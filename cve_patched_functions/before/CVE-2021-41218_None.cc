    .SetShapeFn([](InferenceContext* c) {
      ShapeHandle input = c->input(0);
      if (!c->RankKnown(input)) {
        c->set_output(0, c->UnknownShape());
        return Status::OK();
      }

      int64_t rank = c->Rank(input);
      int concat_dimension;
      int split_dimension;
      int split_count;
      TF_RETURN_IF_ERROR(c->GetAttr("split_count", &split_count));

      TF_RETURN_IF_ERROR(c->GetAttr("concat_dimension", &concat_dimension));

      if (concat_dimension < 0 || concat_dimension >= rank) {
        return errors::InvalidArgument("concat_dimension ", concat_dimension,
                                       " is out of range of input rank ", rank);
      }

      TF_RETURN_IF_ERROR(c->GetAttr("split_dimension", &split_dimension));
      if (split_dimension < 0 || split_dimension >= rank) {
        return errors::InvalidArgument("split_dimension ", split_dimension,
                                       " is out of range of input rank ", rank);
      }

      std::vector<DimensionHandle> dims;
      dims.resize(rank);

      for (int32_t i = 0; i < rank; ++i) {
        dims[i] = c->Dim(input, i);
        if (i == concat_dimension) {
          dims[i] = c->MakeDim(c->Value(dims[i]) * split_count);
        }
        if (i == split_dimension) {
          dims[i] = c->MakeDim(c->Value(dims[i]) / split_count);
        }
      }

      c->set_output(0, c->MakeShape(dims));
      return Status::OK();
    });
