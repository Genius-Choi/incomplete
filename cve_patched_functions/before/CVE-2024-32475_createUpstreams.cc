  void createUpstreams() override {
    if (upstream_tls_) {
      addFakeUpstream(Ssl::createFakeUpstreamSslContext(upstream_cert_name_, context_manager_,
                                                        factory_context_),
                      upstreamProtocol(), /*autonomous_upstream=*/false);
    } else {
      HttpIntegrationTest::createUpstreams();
    }
    if (use_cache_file_) {
      std::string address = version_ == Network::Address::IpVersion::v4
                                ? upstream_address_fn_(0)->ip()->addressAsString()
                                : Network::Test::getLoopbackAddressUrlString(version_);
      cache_file_value_contents_ +=
          absl::StrCat(address, ":", fake_upstreams_[0]->localAddress()->ip()->port(), "|",
                       dns_cache_ttl_, "|0");
      std::string host =
          fmt::format("{}:{}", dns_hostname_, fake_upstreams_[0]->localAddress()->ip()->port());
      TestEnvironment::writeStringToFileForTest("dns_cache.txt",
                                                absl::StrCat(host.length(), "\n", host,
                                                             cache_file_value_contents_.length(),
                                                             "\n", cache_file_value_contents_));
    }
  }
