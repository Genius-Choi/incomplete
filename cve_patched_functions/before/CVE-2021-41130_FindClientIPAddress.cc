const std::string RequestContext::FindClientIPAddress() {
  auto serverConfig = service_context_->config()->server_config();
  std::string client_ip_header;

  if (serverConfig->has_client_ip_extraction_config() &&
      serverConfig->client_ip_extraction_config().client_ip_header().length() >
          0 &&
      request_->FindHeader(
          serverConfig->client_ip_extraction_config().client_ip_header(),
          &client_ip_header)) {
    // split headers
    std::vector<std::string> secments;
    utils::Split(client_ip_header, kClientIPHeaderDelimeter, &secments);
    int client_ip_header_position =
        serverConfig->client_ip_extraction_config().client_ip_position();

    if (client_ip_header_position < 0) {
      client_ip_header_position = secments.size() + client_ip_header_position;
    }

    if (client_ip_header_position >= 0 &&
        client_ip_header_position < (int)secments.size()) {
      return utils::Trim(secments[client_ip_header_position]);
    }
  }

  return request_->GetClientIP();
}
