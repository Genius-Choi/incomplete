bool CV8RealTimeWorker::SaveFileWithChanges(int type, const std::wstring& _path, const std::wstring& sJsonParams)
{
	NSDoctRenderer::DoctRendererFormat::FormatFile _formatDst = NSDoctRenderer::DoctRendererFormat::DOCT;
	if (type & AVS_OFFICESTUDIO_FILE_PRESENTATION)
		_formatDst = NSDoctRenderer::DoctRendererFormat::PPTT;
	else if (type & AVS_OFFICESTUDIO_FILE_SPREADSHEET)
		_formatDst = NSDoctRenderer::DoctRendererFormat::XLST;
	else if ((type & AVS_OFFICESTUDIO_FILE_CROSSPLATFORM) || (type & AVS_OFFICESTUDIO_FILE_IMAGE))
		_formatDst = NSDoctRenderer::DoctRendererFormat::PDF;

	JSSmart<CJSContextScope> context_scope = m_context->CreateContextScope();
	JSSmart<CJSTryCatch> try_catch = m_context->GetExceptions();

	NSNativeControl::CNativeControl* pNative = NULL;

	JSSmart<CJSObject> global_js = m_context->GetGlobal();
	JSSmart<CJSValue> args[1];
	args[0] = CJSContext::createInt(0);

	// GET_NATIVE_ENGINE
	if (true)
	{
		JSSmart<CJSValue> js_result2 = global_js->call_func("GetNativeEngine", 1, args);
		if (!try_catch->Check())
		{
			JSSmart<CJSObject> objNative = js_result2->toObject();
			pNative = (NSNativeControl::CNativeControl*)objNative->getNative()->getObject();
		}
	}

	if (pNative == NULL)
		return false;

	if (_formatDst == NSDoctRenderer::DoctRendererFormat::PDF)
		this->ExecuteCommand(L"Api.asc_SetSilentMode(false);");

	std::wstring strError;
	bool bIsError = Doct_renderer_SaveFile_ForBuilder(_formatDst,
													  _path,
													  pNative,
													  m_context,
													  args,
													  strError,
													  sJsonParams);

	if (_formatDst == NSDoctRenderer::DoctRendererFormat::PDF)
		this->ExecuteCommand(L"Api.asc_SetSilentMode(true);");

	return bIsError;
}
