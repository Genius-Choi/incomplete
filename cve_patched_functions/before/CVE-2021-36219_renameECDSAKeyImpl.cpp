Json::Value SGXWalletServer::renameECDSAKeyImpl(const string &_keyName, const string &_tempKeyName) {
    INIT_RESULT(result)
    result["encryptedKey"] = "";

    try {

        string prefix = _tempKeyName.substr(0, 8);
        if (prefix != "tmp_NEK:") {
            throw SGXException(UNKNOWN_ERROR, "invalid temp key name");
        }
        prefix = _keyName.substr(0, 12);
        if (prefix != "NEK_NODE_ID:") {
            throw SGXException(UNKNOWN_ERROR, "invalid key name");
        }
        string postfix = _keyName.substr(12, _keyName.length());
        if (!isStringDec(postfix)) {
            throw SGXException(UNKNOWN_ERROR, "invalid key name");
        }

        shared_ptr <string> key_ptr = readFromDb(_tempKeyName);


        writeDataToDB(_keyName, *key_ptr);
        LevelDB::getLevelDb()->deleteTempNEK(_tempKeyName);

    } HANDLE_SGX_EXCEPTION(result)

    return result;
}
