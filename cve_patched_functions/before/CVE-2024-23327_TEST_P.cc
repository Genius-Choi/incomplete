TEST_P(ProxyProtocolTLVsIntegrationTest, TestV2TLVProxyProtocolPassAll) {
  setup(true, {}, {});
  initialize();

  IntegrationTcpClientPtr tcp_client = makeTcpConnection(lookupPort("listener_0"));

  std::string observed_data;
  if (GetParam() == Envoy::Network::Address::IpVersion::v4) {
    // 2 TLVs are included:
    // 0x05, 0x00, 0x02, 0x06, 0x07
    // 0x06, 0x00, 0x02, 0x11, 0x12
    const uint8_t v2_protocol[] = {0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x0d, 0x0a, 0x51, 0x55, 0x49,
                                   0x54, 0x0a, 0x21, 0x11, 0x00, 0x16, 0x7f, 0x00, 0x00, 0x01,
                                   0x7f, 0x00, 0x00, 0x01, 0x03, 0x05, 0x02, 0x01, 0x05, 0x00,
                                   0x02, 0x06, 0x07, 0x06, 0x00, 0x02, 0x11, 0x12};
    Buffer::OwnedImpl buffer(v2_protocol, sizeof(v2_protocol));
    ASSERT_TRUE(tcp_client->write(buffer.toString()));
    ASSERT_TRUE(fake_upstreams_[0]->waitForRawConnection(fake_upstream_connection_));
    ASSERT_TRUE(fake_upstream_connection_->waitForData(38, &observed_data));

    // - signature
    // - version and command type, address family and protocol, length of addresses
    // - src address, dest address
    const char data[] = {0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x0d, 0x0a, 0x51, 0x55, 0x49, 0x54, 0x0a,
                         0x21, 0x11, 0x00, 0x16, 0x7f, 0x00, 0x00, 0x01, 0x7f, 0x00, 0x00, 0x01};
    absl::string_view header_start(data, sizeof(data));
    EXPECT_THAT(observed_data, testing::StartsWith(header_start));

    // Only tlv: 0x06, 0x00, 0x02, 0x11, 0x12 is sent to upstream.
    EXPECT_EQ(static_cast<uint8_t>(observed_data[28]), 0x05);
    EXPECT_EQ(static_cast<uint8_t>(observed_data[29]), 0x00);
    EXPECT_EQ(static_cast<uint8_t>(observed_data[30]), 0x02);
    EXPECT_EQ(static_cast<uint8_t>(observed_data[31]), 0x06);
    EXPECT_EQ(static_cast<uint8_t>(observed_data[32]), 0x07);
    EXPECT_EQ(static_cast<uint8_t>(observed_data[33]), 0x06);
    EXPECT_EQ(static_cast<uint8_t>(observed_data[34]), 0x00);
    EXPECT_EQ(static_cast<uint8_t>(observed_data[35]), 0x02);
    EXPECT_EQ(static_cast<uint8_t>(observed_data[36]), 0x11);
    EXPECT_EQ(static_cast<uint8_t>(observed_data[37]), 0x12);
  } else if (GetParam() == Envoy::Network::Address::IpVersion::v6) {
    // 2 TLVs are included:
    // 0x05, 0x00, 0x02, 0x06, 0x07
    // 0x06, 0x00, 0x02, 0x09, 0x0A
    const uint8_t v2_protocol_ipv6[] = {
        0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x0d, 0x0a, 0x51, 0x55, 0x49, 0x54, 0x0a, 0x21,
        0x21, 0x00, 0x2E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x08, 0x00, 0x02,
        0x05, 0x00, 0x02, 0x06, 0x07, 0x06, 0x00, 0x02, 0x09, 0x0A};
    Buffer::OwnedImpl buffer(v2_protocol_ipv6, sizeof(v2_protocol_ipv6));
    ASSERT_TRUE(tcp_client->write(buffer.toString()));
    ASSERT_TRUE(fake_upstreams_[0]->waitForRawConnection(fake_upstream_connection_));

    ASSERT_TRUE(fake_upstream_connection_->waitForData(62, &observed_data));
    // - signature
    // - version and command type, address family and protocol, length of addresses
    // - src address
    // - dest address
    const char data[] = {0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x0d, 0x0a, 0x51, 0x55, 0x49, 0x54, 0x0a,
                         0x21, 0x21, 0x00, 0x2E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
                         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01};
    absl::string_view header_start(data, sizeof(data));
    EXPECT_THAT(observed_data, testing::StartsWith(header_start));

    // Only tlv: 0x06, 0x00, 0x02, 0x09, 0x0A is sent to upstream.
    EXPECT_EQ(static_cast<uint8_t>(observed_data[52]), 0x05);
    EXPECT_EQ(static_cast<uint8_t>(observed_data[53]), 0x00);
    EXPECT_EQ(static_cast<uint8_t>(observed_data[54]), 0x02);
    EXPECT_EQ(static_cast<uint8_t>(observed_data[55]), 0x06);
    EXPECT_EQ(static_cast<uint8_t>(observed_data[56]), 0x07);
    EXPECT_EQ(static_cast<uint8_t>(observed_data[57]), 0x06);
    EXPECT_EQ(static_cast<uint8_t>(observed_data[58]), 0x00);
    EXPECT_EQ(static_cast<uint8_t>(observed_data[59]), 0x02);
    EXPECT_EQ(static_cast<uint8_t>(observed_data[60]), 0x09);
    EXPECT_EQ(static_cast<uint8_t>(observed_data[61]), 0x0A);
  }

  tcp_client->close();
  ASSERT_TRUE(fake_upstream_connection_->waitForDisconnect());
}
