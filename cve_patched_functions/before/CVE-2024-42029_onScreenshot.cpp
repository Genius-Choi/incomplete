void CScreenshotPortal::onScreenshot(sdbus::MethodCall& call) {
    sdbus::ObjectPath requestHandle;
    call >> requestHandle;

    std::string appID;
    call >> appID;

    std::string parentWindow;
    call >> parentWindow;

    std::unordered_map<std::string, sdbus::Variant> options;
    call >> options;

    Debug::log(LOG, "[screenshot] New screenshot request:");
    Debug::log(LOG, "[screenshot]  | {}", requestHandle.c_str());
    Debug::log(LOG, "[screenshot]  | appid: {}", appID);

    bool isInteractive = options.count("interactive") && options["interactive"].get<bool>() && inShellPath("slurp");

    // make screenshot
    const std::string HYPR_DIR             = "/tmp/hypr/";
    const std::string SNAP_FILE            = "xdph_screenshot.png";
    const std::string FILE_PATH            = HYPR_DIR + SNAP_FILE;
    const std::string SNAP_CMD             = "grim " + FILE_PATH;
    const std::string SNAP_INTERACTIVE_CMD = "grim -g \"$(slurp)\" " + FILE_PATH;

    std::unordered_map<std::string, sdbus::Variant> results;
    results["uri"] = "file://" + FILE_PATH;

    std::filesystem::remove(FILE_PATH);
    std::filesystem::create_directory(HYPR_DIR);

    if (isInteractive)
        execAndGet(SNAP_INTERACTIVE_CMD.c_str());
    else
        execAndGet(SNAP_CMD.c_str());

    uint32_t responseCode = std::filesystem::exists(FILE_PATH) ? 0 : 1;

    auto reply = call.createReply();
    reply << responseCode;
    reply << results;
    reply.send();
}
