constructAssociatePDU(DUL_ASSOCIATESERVICEPARAMETERS * params,
          unsigned char type, PRV_ASSOCIATEPDU * pdu)
{
    /* Holds length of an item computed by a lower level routine. */
    unsigned long itemLength;
    /* Pointer to loop through presentation context items */
    DUL_PRESENTATIONCONTEXT * presentationCtx;
    /* A presentation context item which is constructed for each presentation
     * context requested by caller */
    PRV_PRESENTATIONCONTEXTITEM * contextItem;

    pdu->type = type;
    pdu->rsv1 = 0;
    pdu->length = 0;
    pdu->protocol = DUL_PROTOCOL;
    pdu->rsv2[0] = pdu->rsv2[1] = 0;
    pdu->length += 2 + 2; /* Protocol + reserved area */
    pdu->presentationContextList = LST_Create();
    if (pdu->presentationContextList == NULL) return EC_MemoryExhausted;
    pdu->userInfo.SCUSCPRoleList = LST_Create();
    if (pdu->userInfo.SCUSCPRoleList == NULL) return EC_MemoryExhausted;

    if (strlen(params->calledAPTitle) < 1 || strlen(params->calledAPTitle) > 16)
        return makeDcmnetCondition(DULC_ILLEGALSERVICEPARAMETER, OF_error, "Illegal service parameter: Called AP Title");
    OFStandard::strlcpy(pdu->calledAPTitle, params->calledAPTitle, sizeof(pdu->calledAPTitle));
    pdu->length += 16;

    if (strlen(params->callingAPTitle) < 1 || strlen(params->callingAPTitle) > 16)
        return makeDcmnetCondition(DULC_ILLEGALSERVICEPARAMETER, OF_error, "Illegal service parameter: Calling AP Title");
    OFStandard::strlcpy(pdu->callingAPTitle, params->callingAPTitle, sizeof(pdu->callingAPTitle));
    pdu->length += 16;

    (void) memset(pdu->rsv3, 0, 32);
    pdu->length += 32;

    OFCondition cond = constructSubItem(params->applicationContextName,
            DUL_TYPEAPPLICATIONCONTEXT, &pdu->applicationContext, &itemLength);
    if (cond.bad())
        return cond;
    pdu->length += itemLength;

    cond = EC_Normal;
    if (type == DUL_TYPEASSOCIATERQ) {
        DCMNET_DEBUG("Constructing Associate RQ PDU");
        presentationCtx = (DUL_PRESENTATIONCONTEXT*)LST_Head(&params->requestedPresentationContext);
        (void) LST_Position(&params->requestedPresentationContext,
                (LST_NODE*)presentationCtx);
        while (presentationCtx != NULL && cond.good()) {
            contextItem = (PRV_PRESENTATIONCONTEXTITEM *)
                malloc(sizeof(PRV_PRESENTATIONCONTEXTITEM));
            if (contextItem == NULL) return EC_MemoryExhausted;

            cond = constructPresentationContext(type,
                    presentationCtx->presentationContextID,
                    presentationCtx->result,
                    presentationCtx->abstractSyntax,
                    &presentationCtx->proposedTransferSyntax, NULL,
                    contextItem, &itemLength);
            LST_Enqueue(&pdu->presentationContextList, (LST_NODE*)contextItem);

            pdu->length += itemLength;
            presentationCtx = (DUL_PRESENTATIONCONTEXT*)LST_Next(&params->requestedPresentationContext);
        }
    } else {
        DCMNET_DEBUG("Constructing Associate AC PDU");
        if (params->acceptedPresentationContext != NULL) {
            presentationCtx = (DUL_PRESENTATIONCONTEXT*)LST_Head(&params->acceptedPresentationContext);
            if (presentationCtx != NULL)
                (void) LST_Position(&params->acceptedPresentationContext,
                        (LST_NODE*)presentationCtx);
            while (presentationCtx != NULL && cond.good()) {
                contextItem = (PRV_PRESENTATIONCONTEXTITEM *)
                    malloc(sizeof(*contextItem));
                if (contextItem == NULL) return EC_MemoryExhausted;

                cond = constructPresentationContext(type,
                        presentationCtx->presentationContextID,
                        presentationCtx->result,
                        presentationCtx->abstractSyntax,
                        NULL, presentationCtx->acceptedTransferSyntax,
                        contextItem, &itemLength);

                LST_Enqueue(&pdu->presentationContextList, (LST_NODE*)contextItem);

                pdu->length += itemLength;
                presentationCtx = (DUL_PRESENTATIONCONTEXT*)LST_Next(&params->acceptedPresentationContext);
            }
        }
    }

    if (cond.bad())
        return cond;

    cond = constructUserInfo(type, params, &(pdu->userInfo), &itemLength);
    if (cond.bad())
        return cond;
    pdu->length += itemLength;

    return EC_Normal;
}
