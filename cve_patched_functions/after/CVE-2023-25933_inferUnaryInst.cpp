static bool inferUnaryInst(UnaryOperatorInst *UOI) {
  using OpKind = UnaryOperatorInst::OpKind;

  switch (UOI->getOperatorKind()) {
    case OpKind::DeleteKind: // delete:
      UOI->setType(Type::createBoolean());
      return true;
    case OpKind::VoidKind: // void
      UOI->setType(Type::createUndefined());
      return true;
    case OpKind::TypeofKind: // typeof
      UOI->setType(Type::createString());
      return true;
    // https://tc39.es/ecma262/#sec-prefix-increment-operator
    // https://tc39.es/ecma262/#sec-postfix-increment-operator
    case OpKind::IncKind: // ++
    // https://tc39.es/ecma262/#sec-prefix-decrement-operator
    // https://tc39.es/ecma262/#sec-postfix-decrement-operator
    case OpKind::DecKind: // --
    // https://tc39.es/ecma262/#sec-unary-minus-operator
    case OpKind::MinusKind: // -
      return inferUnaryArithDefault(UOI);
    // https://tc39.es/ecma262/#sec-unary-plus-operator
    case OpKind::PlusKind: // +
      UOI->setType(Type::createNumber());
      return true;
    // https://tc39.es/ecma262/#sec-bitwise-not-operator
    case OpKind::TildeKind: // ~
      return inferTilde(UOI);
    case OpKind::BangKind: // !
      UOI->setType(Type::createBoolean());
      return true;
    default:
      break;
  }

  return false;
}
