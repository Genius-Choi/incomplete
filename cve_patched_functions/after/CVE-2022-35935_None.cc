  void Compute(OpKernelContext* context) override {
    OP_REQUIRES(context, TensorShapeUtils::IsScalar(context->input(0).shape()),
                errors::InvalidArgument("dim must be a scalar"));
    int32_t dim = context->input(0).scalar<int32_t>()();
    OP_REQUIRES(context, TensorShapeUtils::IsScalar(context->input(0).shape()),
                errors::InvalidArgument("num_results must be a scalar"));
    int32_t num_results = context->input(1).scalar<int32_t>()();
    OP_REQUIRES(context, TensorShapeUtils::IsScalar(context->input(0).shape()),
                errors::InvalidArgument("skip must be a scalar"));
    int32_t skip = context->input(2).scalar<int32_t>()();

    OP_REQUIRES(context, dim >= 1,
                errors::InvalidArgument("dim must be at least one"));
    OP_REQUIRES(context, dim <= sobol_data::kMaxSobolDim,
                errors::InvalidArgument("dim must be at most ",
                                        sobol_data::kMaxSobolDim));
    OP_REQUIRES(context, num_results >= 1,
                errors::InvalidArgument("num_results must be at least one"));
    OP_REQUIRES(context, skip >= 0,
                errors::InvalidArgument("skip must be non-negative"));
    OP_REQUIRES(context,
                num_results < std::numeric_limits<int32_t>::max() - skip,
                errors::InvalidArgument("num_results+skip must be less than ",
                                        std::numeric_limits<int32_t>::max()));

    Tensor* output = nullptr;
    OP_REQUIRES_OK(context,
                   context->allocate_output(
                       0, TensorShape({num_results, dim}), &output));
    auto output_flat = output->flat<T>();
    const DeviceBase::CpuWorkerThreads& worker_threads =
        *(context->device()->tensorflow_cpu_worker_threads());
    int num_threads = worker_threads.num_threads;
    int block_size = std::max(
        kMinBlockSize, static_cast<int>(std::ceil(
                           static_cast<float>(num_results) / num_threads)));
    worker_threads.workers->TransformRangeConcurrently(
        block_size, num_results /* total */,
        [&dim, &skip, &output_flat](const int start, const int end) {
          CalculateSobolSample<T>(dim, end - start /* num_results */, skip,
                                  start, output_flat);
        });
  }
