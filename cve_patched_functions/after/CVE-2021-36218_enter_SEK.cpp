void enter_SEK() {

    shared_ptr <string> test_key_ptr = LevelDB::getLevelDb()->readString("TEST_KEY");
    if (test_key_ptr == nullptr) {
        spdlog::error("Error: corrupt or empty LevelDB database");
        exit(-1);
    }


    if (!experimental::filesystem::is_regular_file(BACKUP_PATH)) {
        spdlog::error("File does not exist: "  BACKUP_PATH);
        exit(-1);
    }

    ifstream sek_file(BACKUP_PATH);

    spdlog::info("Reading backup key from file ...");

    string sek((istreambuf_iterator<char>(sek_file)),
               istreambuf_iterator<char>());

    boost::trim(sek);

    spdlog::info("Setting backup key ...");

    while (!checkHex(sek, 16)) {
        spdlog::error("Invalid hex in key");
        exit(-1);
    }

    auto encrypted_SEK = check_and_set_SEK(sek);

    vector<char> hexEncrKey(BUF_LEN, 0);

    carray2Hex(encrypted_SEK->data(), encrypted_SEK->size(), hexEncrKey.data(),
               BUF_LEN);

    spdlog::info("Got sealed storage encryption key.");

    LevelDB::getLevelDb()->deleteKey("SEK");

    spdlog::info("Storing sealed storage encryption key in LevelDB ...");

    LevelDB::getLevelDb()->writeDataUnique("SEK", hexEncrKey.data());

    spdlog::info("Stored storage encryption key in LevelDB.");

}
