TEST_P(SslIntegrationTest, AsyncCertValidationSucceeds) {
  // Config client to use an async cert validator which defer the actual validation by 5ms.
  auto custom_validator_config = std::make_unique<envoy::config::core::v3::TypedExtensionConfig>(
      envoy::config::core::v3::TypedExtensionConfig());
  TestUtility::loadFromYaml(TestEnvironment::substitute(R"EOF(
name: "envoy.tls.cert_validator.timed_cert_validator"
typed_config:
  "@type": type.googleapis.com/test.common.config.DummyConfig
  )EOF"),
                            *custom_validator_config);
  initialize();

  Network::ClientConnectionPtr connection = makeSslClientConnection(
      ClientSslTransportOptions().setCustomCertValidatorConfig(custom_validator_config.get()));
  ConnectionStatusCallbacks callbacks;
  connection->addConnectionCallbacks(callbacks);
  connection->connect();
  const auto* socket = dynamic_cast<const Extensions::TransportSockets::Tls::SslHandshakerImpl*>(
      connection->ssl().get());
  ASSERT(socket);
  while (socket->state() == Ssl::SocketState::PreHandshake) {
    dispatcher_->run(Event::Dispatcher::RunType::NonBlock);
  }
  ASSERT_EQ(connection->state(), Network::Connection::State::Open);
  while (!callbacks.connected()) {
    dispatcher_->run(Event::Dispatcher::RunType::NonBlock);
  }
  connection->close(Network::ConnectionCloseType::NoFlush);
}
