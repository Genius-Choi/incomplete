int Verification ( char * public_shares, mpz_t decr_secret_share, int _t, int ind ){

  string pub_shares_str = public_shares;
  libff::init_alt_bn128_params();

  vector<libff::alt_bn128_G2> pub_shares;
  uint64_t share_length = 256;
  uint8_t coord_length = 64;

  for (size_t i = 0; i < _t; ++i) {
    libff::alt_bn128_G2 pub_share;

    uint64_t pos0 = share_length * i;
    string x_c0_str = ConvertHexToDec(pub_shares_str.substr(pos0, coord_length));
    string x_c1_str = ConvertHexToDec(pub_shares_str.substr(pos0 + coord_length, coord_length));
    string y_c0_str = ConvertHexToDec(pub_shares_str.substr(pos0 + 2 * coord_length, coord_length));
    string y_c1_str = ConvertHexToDec(pub_shares_str.substr(pos0 + 3 * coord_length, coord_length));
    if (x_c0_str == "false" || x_c1_str == "false" || y_c0_str == "false" || y_c1_str == "false"){
      return 2;
    }
    pub_share.X.c0 = libff::alt_bn128_Fq(x_c0_str.c_str());
    pub_share.X.c1 = libff::alt_bn128_Fq(x_c1_str.c_str());
    pub_share.Y.c0 = libff::alt_bn128_Fq(y_c0_str.c_str());
    pub_share.Y.c1 = libff::alt_bn128_Fq(y_c1_str.c_str());
    pub_share.Z = libff::alt_bn128_Fq2::one();


    //for ( int j = 0; j < 4; j++) {
      //uint64_t pos0 = share_length * j;
      //string coord = ConvertHexToDec(pub_shares_str.substr(pos0 + j * coord_length, coord_length));
//      if ( i == 0) {
//        memset(public_shares, 0, strlen(public_shares));
//    string coord = ConvertToString(pub_share.Y.c1);
//    strncpy(public_shares, coord.c_str(), coord.length());
//  }
    //}

    pub_shares.push_back(pub_share);
  }

  libff::alt_bn128_G2 val = libff::alt_bn128_G2::zero();
   for (int i = 0; i < _t; ++i) {
    val = val + power(libff::alt_bn128_Fr(ind + 1), i) * pub_shares[i];
  }

  char arr[mpz_sizeinbase (decr_secret_share, 10) + 2];
  char * tmp = mpz_get_str(arr, 10, decr_secret_share);

  libff::alt_bn128_Fr sshare(tmp);

 // strncpy(public_shares, tmp, strlen(tmp));
//  string res = ConvertHexToDec("fe43567238abcdef98760");
//  strncpy(public_shares, res.c_str(), res.length());



  libff::alt_bn128_G2  val2 = sshare * libff::alt_bn128_G2::one();

   memset(public_shares, 0, strlen(public_shares));
  strncpy(public_shares, tmp, strlen(tmp));
//   strncpy(public_shares, ConvertToString(val2.X.c0).c_str(), ConvertToString(val2.X.c0).length());
//   strncpy(public_shares + ConvertToString(val2.X.c0).length(), ":", 1);
//  strncpy(public_shares + ConvertToString(val2.X.c0).length() + 1, ConvertToString(val2.X.c1).c_str(), 77);



  val.to_affine_coordinates();
  val2.to_affine_coordinates();
//  strncpy(public_shares + strlen(tmp), ":", 1);
  strncpy(public_shares, ConvertToString(val.X.c0).c_str(), ConvertToString(val.X.c0).length());
  strncpy(public_shares + ConvertToString(val.X.c0).length(), ":", 1);
  strncpy(public_shares + ConvertToString(val.X.c0).length() + 1, ConvertToString(val2.X.c0).c_str(), ConvertToString(val2.X.c0).length());
  /*strncpy(public_shares + 77 + 77 + 79, "\n", 1);
  strncpy(public_shares + 144 + 79, ConvertToString(val2.X.c0).c_str(), 77);
  strncpy(public_shares + 144 + 78, ":", 1);
  strncpy(public_shares + 144 + 77, ConvertToString(val2.X.c1).c_str(), 77);*/



  return (val == sshare * libff::alt_bn128_G2::one());

}
