std::string resolve_external_data_location(
    const std::string& base_dir,
    const std::string& location,
    const std::string& tensor_name) {
#ifdef _WIN32
  auto file_path = std::filesystem::path(utf8str_to_wstring(location));
  if (file_path.is_absolute()) {
    fail_check(
        "Location of external TensorProto ( tensor name: ",
        tensor_name,
        ") should be a relative path, but it is an absolute path: ",
        location);
  }
  auto relative_path = file_path.lexically_normal().make_preferred().wstring();
  // Check that normalized relative path contains ".." on Windows.
  if (relative_path.find(L"..", 0) != std::string::npos) {
    fail_check(
        "Data of TensorProto ( tensor name: ",
        tensor_name,
        ") should be file inside the ",
        base_dir,
        ", but the '",
        location,
        "' points outside the directory");
  }
  std::wstring data_path = path_join(utf8str_to_wstring(base_dir), relative_path);
  struct _stat64 buff;
  if (data_path.empty() || (data_path[0] != '#' && _wstat64(data_path.c_str(), &buff) != 0)) {
    fail_check(
        "Data of TensorProto ( tensor name: ",
        tensor_name,
        ") should be stored in ",
        location,
        ", but it doesn't exist or is not accessible.");
  }
  return wstring_to_utf8str(data_path);
#else // POSIX
  if (location.empty()) {
    fail_check("Location of external TensorProto ( tensor name: ", tensor_name, ") should not be empty.");
  } else if (location[0] == '/') {
    fail_check(
        "Location of external TensorProto ( tensor name: ",
        tensor_name,
        ") should be a relative path, but it is an absolute path: ",
        location);
  }
  std::string relative_path = clean_relative_path(location);
  // Check that normalized relative path contains ".." on POSIX
  if (relative_path.find("..", 0) != std::string::npos) {
    fail_check(
        "Data of TensorProto ( tensor name: ",
        tensor_name,
        ") should be file inside the ",
        base_dir,
        ", but the '",
        location,
        "' points outside the directory");
  }
  std::string data_path = path_join(base_dir, relative_path);
  // use stat64 to check whether the file exists
#if defined(__APPLE__) || defined(__wasm__) || !defined(__GLIBC__)
  struct stat buffer; // APPLE, wasm and non-glic stdlibs do not have stat64
  if (data_path.empty() || (data_path[0] != '#' && stat((data_path).c_str(), &buffer) != 0)) {
#else
  struct stat64 buffer; // All POSIX under glibc except APPLE and wasm have stat64
  if (data_path.empty() || (data_path[0] != '#' && stat64((data_path).c_str(), &buffer) != 0)) {
#endif
    fail_check(
        "Data of TensorProto ( tensor name: ",
        tensor_name,
        ") should be stored in ",
        data_path,
        ", but it doesn't exist or is not accessible.");
  }
  // Do not allow symlinks or directories.
  if (data_path.empty() || (data_path[0] != '#' && !S_ISREG(buffer.st_mode))) {
    fail_check(
        "Data of TensorProto ( tensor name: ",
        tensor_name,
        ") should be stored in ",
        data_path,
        ", but it is not regular file.");
  }
  return data_path;
#endif
}
