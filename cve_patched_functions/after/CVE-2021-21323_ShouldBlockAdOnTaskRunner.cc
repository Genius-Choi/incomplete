void ShouldBlockAdOnTaskRunner(std::shared_ptr<BraveRequestInfo> ctx,
                               base::Optional<std::string> canonical_name) {
  bool did_match_rule = false;
  bool did_match_exception = false;
  bool did_match_important = false;
  if (!ctx->initiator_url.is_valid()) {
    return;
  }
  std::string source_host = ctx->initiator_url.host();

  g_brave_browser_process->ad_block_service()->ShouldStartRequest(
      ctx->request_url, ctx->resource_type, source_host, &did_match_rule,
      &did_match_exception, &did_match_important, &ctx->mock_data_url);
  if (did_match_important) {
    ctx->blocked_by = kAdBlocked;
    return;
  }

  if (canonical_name.has_value() &&
      ctx->request_url.host() != *canonical_name && *canonical_name != "") {
    GURL::Replacements replacements = GURL::Replacements();
    replacements.SetHost(
        canonical_name->c_str(),
        url::Component(0, static_cast<int>(canonical_name->length())));
    const GURL canonical_url = ctx->request_url.ReplaceComponents(replacements);

    g_brave_browser_process->ad_block_service()->ShouldStartRequest(
        ctx->request_url, ctx->resource_type, source_host, &did_match_rule,
        &did_match_exception, &did_match_important, &ctx->mock_data_url);
  }

  if (did_match_important || (did_match_rule && !did_match_exception)) {
    ctx->blocked_by = kAdBlocked;
  }
}
