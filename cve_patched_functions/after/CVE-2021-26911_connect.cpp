void IMAPSession::connect(ErrorCode * pError)
{
    int r;
    
    setup();

    MCLog("connect %s", MCUTF8DESC(this));

    MCAssert(mState == STATE_DISCONNECTED);

    if (mHostname == NULL) {
        * pError = ErrorInvalidAccount;
        goto close;
    }
    
    switch (mConnectionType) {
        case ConnectionTypeStartTLS:
        MCLog("STARTTLS connect");
        r = mailimap_socket_connect_voip(mImap, MCUTF8(mHostname), mPort, isVoIPEnabled());
        if (hasError(r)) {
            * pError = ErrorConnection;
            goto close;
        }

        r = mailimap_socket_starttls(mImap);
        if (hasError(r)) {
            MCLog("no TLS %i", r);
            * pError = ErrorTLSNotAvailable;
            goto close;
        }
            
        mIsCertificateValid = checkCertificate();
        if (isCheckCertificateEnabled() && !mIsCertificateValid) {
            * pError = ErrorCertificate;
            goto close;
        }
            
        break;

        case ConnectionTypeTLS:
        r = mailimap_ssl_connect_voip(mImap, MCUTF8(mHostname), mPort, isVoIPEnabled());
        MCLog("ssl connect %s %u %u", MCUTF8(mHostname), mPort, r);
        if (hasError(r)) {
            MCLog("connect error %i", r);
            * pError = ErrorConnection;
            goto close;
        }
            
        mIsCertificateValid = checkCertificate();
        if (isCheckCertificateEnabled() && !mIsCertificateValid) {
            * pError = ErrorCertificate;
            goto close;
        }

        break;

        default:
        MCLog("socket connect %s %u", MCUTF8(mHostname), mPort);
        r = mailimap_socket_connect_voip(mImap, MCUTF8(mHostname), mPort, isVoIPEnabled());
        MCLog("socket connect %i", r);
        if (hasError(r)) {
            MCLog("connect error %i", r);
            * pError = ErrorConnection;
            goto close;
        }
        break;
    }
    
    mailstream_low * low;
    String * identifierString;
    char * identifier;
    
    low = mailstream_get_low(mImap->imap_stream);
    identifierString = String::stringWithUTF8Format("%s@%s:%u", MCUTF8(mUsername), MCUTF8(mHostname), mPort);
    identifier = strdup(identifierString->UTF8Characters());
    mailstream_low_set_identifier(low, identifier);
    
    if (mImap->imap_response != NULL) {
        MC_SAFE_REPLACE_RETAIN(String, mWelcomeString, String::stringWithUTF8Characters(mImap->imap_response));
        mYahooServer = (mWelcomeString->locationOfString(MCSTR("yahoo.com")) != -1);
#ifdef LIBETPAN_HAS_MAILIMAP_163_WORKAROUND
        if (mWelcomeString->locationOfString(MCSTR("Coremail System IMap Server Ready")) != -1)
            mailimap_set_163_workaround_enabled(mImap, 1);
#endif
        if (mWelcomeString->locationOfString(MCSTR("Courier-IMAP")) != -1) {
            LOCK();
            mIdleEnabled = true;
            UNLOCK();
            mNamespaceEnabled = true;
        }
        mRamblerRuServer = (mHostname->locationOfString(MCSTR(".rambler.ru")) != -1);
        mHermesServer = (mWelcomeString->locationOfString(MCSTR("Hermes")) != -1);
        mQipServer = (mWelcomeString->locationOfString(MCSTR("QIP IMAP server")) != -1);
    }
    
    mState = STATE_CONNECTED;
    
    if (isAutomaticConfigurationEnabled()) {
        if (mCurrentCapabilities != NULL) {
            applyCapabilities(mCurrentCapabilities);
        } else {
            IndexSet *capabilities = capability(pError);
            if (* pError != ErrorNone) {
                MCLog("capabilities failed");
                goto close;
            } else {
                MC_SAFE_REPLACE_RETAIN(IndexSet, mCurrentCapabilities, capabilities);
                applyCapabilities(mCurrentCapabilities);
            }
        }
    }
    
    * pError = ErrorNone;
    MCLog("connect ok");
    return;
    
close:
    unsetup();
}
