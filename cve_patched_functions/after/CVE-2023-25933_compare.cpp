  virtual CallResult<int> compare(uint32_t a, uint32_t b) override {
    GCScopeMarkerRAII gcMarker{gcScope_, gcMarker_};

    CallResult<PseudoHandle<HermesValue>> callRes{ExecutionStatus::EXCEPTION};
    {
      Handle<> aValHandle = runtime_.makeHandle(JSObject::getOwnIndexed(
          createPseudoHandle(self_.get()), runtime_, a));
      // To avoid the need to create a handle for bVal a NoAllocScope is created
      // below, to ensure no memory allocation will happen.
      HermesValue bVal =
          JSObject::getOwnIndexed(createPseudoHandle(self_.get()), runtime_, b);

      // N.B.: aVal needs to be initialized after bVal's initialization -- i.e.,
      // after no more allocations are expected for a while.
      HermesValue aVal = *aValHandle;

      {
        NoAllocScope noAllocs{runtime_};
        if (!WithCompareFn) {
          if (LLVM_UNLIKELY(aVal.isBigInt())) {
            return aVal.getBigInt()->compare(bVal.getBigInt());
          } else {
            double a = aVal.getNumber();
            double b = bVal.getNumber();
            if (LLVM_UNLIKELY(a == 0) && LLVM_UNLIKELY(b == 0) &&
                LLVM_UNLIKELY(std::signbit(a)) &&
                LLVM_UNLIKELY(!std::signbit(b))) {
              // -0 < +0, according to the spec.
              return -1;
            }
            return (a < b) ? -1 : (a > b ? 1 : 0);
          }
          assert(
              compareFn_ && "Cannot use this version if the compareFn is null");
        }
      }
      // ES7 22.2.3.26 2a.
      // Let v be toNumber_RJS(Call(comparefn, undefined, x, y)).
      callRes = Callable::executeCall2(
          compareFn_, runtime_, Runtime::getUndefinedValue(), aVal, bVal);
    }

    if (callRes == ExecutionStatus::EXCEPTION) {
      return ExecutionStatus::EXCEPTION;
    }
    auto intRes =
        toNumber_RJS(runtime_, runtime_.makeHandle(std::move(*callRes)));
    if (intRes == ExecutionStatus::EXCEPTION) {
      return ExecutionStatus::EXCEPTION;
    }
    // ES7 22.2.3.26 2b.
    // If IsDetachedBuffer(buffer) is true, throw a TypeError exception.
    if (LLVM_UNLIKELY(!self_->attached(runtime_))) {
      return runtime_.raiseTypeError("Callback to sort() detached the array");
    }
    // Cannot return intRes's value directly because it can be NaN
    auto res = intRes->getNumber();
    return (res < 0) ? -1 : (res > 0 ? 1 : 0);
  }
