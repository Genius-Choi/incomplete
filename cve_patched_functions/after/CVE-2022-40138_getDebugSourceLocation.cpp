bool HBCISel::getDebugSourceLocation(
    SourceErrorManager &manager,
    SMLoc loc,
    DebugSourceLocation *out) {
  SourceErrorManager::SourceCoords coords{};
  if (!manager.findBufferLineAndLoc(loc, coords, /*translate*/ true)) {
    return false;
  }

  if (debugIdCache_.currentBufId != coords.bufId) {
    llvh::StringRef filename = manager.getSourceUrl(coords.bufId);
    debugIdCache_.currentFilenameId = BCFGen_->addFilename(filename);

    auto sourceMappingUrl = manager.getSourceMappingUrl(coords.bufId);

    // Lazily compiled functions ask to strip the source mapping URL because it
    // was already encoded in the top level module, and it could be a 1MB+ data
    // url that we don't want to duplicate once per function.
    if (sourceMappingUrl.empty() ||
        bytecodeGenerationOptions_.stripSourceMappingURL) {
      debugIdCache_.currentSourceMappingUrlId =
          facebook::hermes::debugger::kInvalidBreakpoint;
    } else {
      debugIdCache_.currentSourceMappingUrlId = BCFGen_->addFilename(
          F_->getParent()->getContext().getIdentifier(sourceMappingUrl).str());
    }

    debugIdCache_.currentBufId = coords.bufId;
  }

  out->line = coords.line;
  out->column = coords.col;
  out->filenameId = debugIdCache_.currentFilenameId;
  out->sourceMappingUrlId = debugIdCache_.currentSourceMappingUrlId;

  return true;
}
