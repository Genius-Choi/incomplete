diff --git a/changelog/_unreleased/2024-04-03-improve-account-logout.md b/changelog/_unreleased/2024-04-03-improve-account-logout.md
new file mode 100644
index 00000000000..ec809bd9d7a
--- /dev/null
+++ b/changelog/_unreleased/2024-04-03-improve-account-logout.md
@@ -0,0 +1,8 @@
+---
+title: Improve account logout
+issue: NEXT-34608
+---
+
+# Core
+
+* Changed `LogoutRoute` to always logout the user regardless of the configurations.
diff --git a/src/Core/Checkout/Customer/SalesChannel/LogoutRoute.php b/src/Core/Checkout/Customer/SalesChannel/LogoutRoute.php
index b9463627628..9f5368e840d 100644
--- a/src/Core/Checkout/Customer/SalesChannel/LogoutRoute.php
+++ b/src/Core/Checkout/Customer/SalesChannel/LogoutRoute.php
@@ -39,6 +39,8 @@ public function getDecorated(): AbstractLogoutRoute
     #[Route(path: '/store-api/account/logout', name: 'store-api.account.logout', methods: ['POST'], defaults: ['_loginRequired' => true, '_loginRequiredAllowGuest' => true])]
     public function logout(SalesChannelContext $context, RequestDataBag $data): ContextTokenResponse
     {
+        $this->contextPersister->save($context->getToken(), ['customerId' => null], $context->getSalesChannelId());
+
         /** @var CustomerEntity $customer */
         $customer = $context->getCustomer();
         if ($this->shouldDelete($context)) {
diff --git a/tests/integration/Core/Checkout/Customer/SalesChannel/LogoutRouteTest.php b/tests/integration/Core/Checkout/Customer/SalesChannel/LogoutRouteTest.php
index 4ab8e184a83..1f05c9a33b1 100644
--- a/tests/integration/Core/Checkout/Customer/SalesChannel/LogoutRouteTest.php
+++ b/tests/integration/Core/Checkout/Customer/SalesChannel/LogoutRouteTest.php
@@ -166,7 +166,7 @@ public function testLoggedOutUpdateCustomerContextWithReplaceTokenParameter(): v
 
         $newCustomerContextToken = $this->getContainer()->get(Connection::class)->fetchOne('SELECT token FROM sales_channel_api_context WHERE customer_id = ?', [$currentCustomerId]);
 
-        static::assertNotEmpty($newCustomerContextToken);
+        static::assertEmpty($newCustomerContextToken);
         static::assertNotEquals($currentCustomerToken, $newCustomerContextToken);
     }
 
@@ -193,7 +193,6 @@ public function testLoggedOutKeepCustomerContextWithoutReplaceTokenParameter():
         $response = $this->browser->getResponse();
 
         $currentCustomerToken = $response->headers->get(PlatformRequest::HEADER_CONTEXT_TOKEN) ?: '';
-        $currentCustomerId = $this->getContainer()->get(Connection::class)->fetchOne('SELECT customer_id FROM sales_channel_api_context WHERE token = ?', [$currentCustomerToken]);
 
         $this->browser->setServerParameter('HTTP_SW_CONTEXT_TOKEN', $currentCustomerToken);
 
@@ -208,8 +207,7 @@ public function testLoggedOutKeepCustomerContextWithoutReplaceTokenParameter():
             );
 
         $customerIdWithOldToken = $this->getContainer()->get(Connection::class)->fetchOne('SELECT customer_id FROM sales_channel_api_context WHERE token = ?', [$currentCustomerToken]);
-
-        static::assertEquals($currentCustomerId, $customerIdWithOldToken);
+        static::assertEmpty($customerIdWithOldToken);
     }
 
     public function testLogoutRouteReturnContextTokenResponse(): void
diff --git a/tests/integration/Storefront/Controller/AuthControllerTest.php b/tests/integration/Storefront/Controller/AuthControllerTest.php
index 2055c0b79f7..926160758ec 100644
--- a/tests/integration/Storefront/Controller/AuthControllerTest.php
+++ b/tests/integration/Storefront/Controller/AuthControllerTest.php
@@ -262,7 +262,7 @@ public function testOneUserUseOneContextAcrossSessions(): void
         $secondTimeLoginContextToken = $secondTimeLogin->get(PlatformRequest::HEADER_CONTEXT_TOKEN);
 
         static::assertNotEquals($firstTimeLoginSessionId, $secondTimeLoginSessionId);
-        static::assertEquals($firstTimeLoginContextToken, $secondTimeLoginContextToken);
+        static::assertNotEquals($firstTimeLoginContextToken, $secondTimeLoginContextToken);
     }
 
     public function testMergedHintIsAdded(): void
