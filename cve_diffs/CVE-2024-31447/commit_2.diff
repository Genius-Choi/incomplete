diff --git a/src/Core/Checkout/Customer/SalesChannel/LogoutRoute.php b/src/Core/Checkout/Customer/SalesChannel/LogoutRoute.php
index 2515b917822..26d9043d148 100644
--- a/src/Core/Checkout/Customer/SalesChannel/LogoutRoute.php
+++ b/src/Core/Checkout/Customer/SalesChannel/LogoutRoute.php
@@ -36,23 +36,18 @@ public function getDecorated(): AbstractLogoutRoute
         throw new DecorationPatternException(self::class);
     }
 
-    #[Route(path: '/store-api/account/logout', name: 'store-api.account.logout', methods: ['POST'], defaults: ['_loginRequired' => true, '_loginRequiredAllowGuest' => true])]
+    #[Route(path: '/store-api/account/logout', name: 'store-api.account.logout', defaults: ['_loginRequired' => true, '_loginRequiredAllowGuest' => true], methods: ['POST'])]
     public function logout(SalesChannelContext $context, RequestDataBag $data): ContextTokenResponse
     {
+        $newToken = Random::getAlphanumericString(32);
+
         /** @var CustomerEntity $customer */
         $customer = $context->getCustomer();
         if ($this->shouldDelete($context)) {
             $this->cartService->deleteCart($context);
             $this->contextPersister->delete($context->getToken(), $context->getSalesChannelId());
-
-            $event = new CustomerLogoutEvent($context, $customer);
-            $this->eventDispatcher->dispatch($event);
-
-            return new ContextTokenResponse($context->getToken());
-        }
-
-        $newToken = Random::getAlphanumericString(32);
-        if ((bool) $data->get('replace-token')) {
+        } else {
+            $this->contextPersister->save($context->getToken(), ['customerId' => null], $context->getSalesChannelId());
             $newToken = $this->contextPersister->replace($context->getToken(), $context);
         }
 
diff --git a/tests/integration/Core/Checkout/Customer/SalesChannel/LogoutRouteTest.php b/tests/integration/Core/Checkout/Customer/SalesChannel/LogoutRouteTest.php
index 50fae3673cf..4876f1928bb 100644
--- a/tests/integration/Core/Checkout/Customer/SalesChannel/LogoutRouteTest.php
+++ b/tests/integration/Core/Checkout/Customer/SalesChannel/LogoutRouteTest.php
@@ -55,8 +55,6 @@ public function testNotLoggedin(): void
             ->request(
                 'POST',
                 '/store-api/account/logout',
-                [
-                ]
             );
 
         static::assertIsString($this->browser->getResponse()->getContent());
@@ -95,12 +93,6 @@ public function testValidLogout(): void
             ->request(
                 'POST',
                 '/store-api/account/logout',
-                [
-                    'replace-token' => true,
-                ],
-                [],
-                [
-                ]
             );
 
         static::assertSame(200, $this->browser->getResponse()->getStatusCode());
@@ -108,11 +100,7 @@ public function testValidLogout(): void
         $this->browser
             ->request(
                 'POST',
-                '/store-api/account/customer',
-                [],
-                [],
-                [
-                ]
+                '/store-api/account/customer'
             );
 
         static::assertIsString($this->browser->getResponse()->getContent());
@@ -121,55 +109,6 @@ public function testValidLogout(): void
         static::assertArrayHasKey('errors', $response);
     }
 
-    public function testLoggedOutUpdateCustomerContextWithReplaceTokenParameter(): void
-    {
-        $systemConfig = $this->getContainer()->get(SystemConfigService::class);
-        $systemConfig->set('core.loginRegistration.invalidateSessionOnLogOut', false);
-
-        $email = Uuid::randomHex() . '@example.com';
-        $this->createCustomer($email);
-
-        $this->browser
-            ->request(
-                'POST',
-                '/store-api/account/login',
-                [
-                    'email' => $email,
-                    'password' => 'shopware',
-                ]
-            );
-
-        static::assertIsString($this->browser->getResponse()->getContent());
-
-        $response = $this->browser->getResponse();
-
-        $currentCustomerToken = $response->headers->get(PlatformRequest::HEADER_CONTEXT_TOKEN) ?: '';
-        $currentCustomerId = $this->getContainer()->get(Connection::class)->fetchOne('SELECT customer_id FROM sales_channel_api_context WHERE token = ?', [$currentCustomerToken]);
-
-        $this->browser->setServerParameter('HTTP_SW_CONTEXT_TOKEN', $currentCustomerToken);
-
-        $this->browser
-            ->request(
-                'POST',
-                '/store-api/account/logout',
-                [
-                    'replace-token' => true,
-                ],
-                [],
-                [
-                ]
-            );
-
-        $customerIdWithOldToken = $this->getContainer()->get(Connection::class)->fetchOne('SELECT customer_id FROM sales_channel_api_context WHERE token = ?', [$currentCustomerToken]);
-
-        static::assertFalse($customerIdWithOldToken);
-
-        $newCustomerContextToken = $this->getContainer()->get(Connection::class)->fetchOne('SELECT token FROM sales_channel_api_context WHERE customer_id = ?', [$currentCustomerId]);
-
-        static::assertNotEmpty($newCustomerContextToken);
-        static::assertNotEquals($currentCustomerToken, $newCustomerContextToken);
-    }
-
     public function testLoggedOutKeepCustomerContextWithoutReplaceTokenParameter(): void
     {
         $systemConfig = $this->getContainer()->get(SystemConfigService::class);
@@ -193,7 +132,6 @@ public function testLoggedOutKeepCustomerContextWithoutReplaceTokenParameter():
         $response = $this->browser->getResponse();
 
         $currentCustomerToken = $response->headers->get(PlatformRequest::HEADER_CONTEXT_TOKEN) ?: '';
-        $currentCustomerId = $this->getContainer()->get(Connection::class)->fetchOne('SELECT customer_id FROM sales_channel_api_context WHERE token = ?', [$currentCustomerToken]);
 
         $this->browser->setServerParameter('HTTP_SW_CONTEXT_TOKEN', $currentCustomerToken);
 
@@ -201,15 +139,10 @@ public function testLoggedOutKeepCustomerContextWithoutReplaceTokenParameter():
             ->request(
                 'POST',
                 '/store-api/account/logout',
-                [],
-                [],
-                [
-                ]
             );
 
         $customerIdWithOldToken = $this->getContainer()->get(Connection::class)->fetchOne('SELECT customer_id FROM sales_channel_api_context WHERE token = ?', [$currentCustomerToken]);
-
-        static::assertEquals($currentCustomerId, $customerIdWithOldToken);
+        static::assertFalse($customerIdWithOldToken, 'The old token should be gone');
     }
 
     public function testLogoutRouteReturnContextTokenResponse(): void
@@ -286,7 +219,7 @@ public function testLogoutForcedForGuestAccounts(): void
             ->logout($context, $request);
 
         static::assertInstanceOf(ContextTokenResponse::class, $logout);
-        static::assertEquals($login->getToken(), $logout->getToken());
+        static::assertNotEquals($login->getToken(), $logout->getToken());
 
         $exists = $this->getContainer()->get(Connection::class)
             ->fetchAllAssociative('SELECT * FROM sales_channel_api_context WHERE token = :token', ['token' => $login->getToken()]);
@@ -307,12 +240,6 @@ public function testValidLogoutAsGuest(): void
             ->request(
                 'POST',
                 '/store-api/account/logout',
-                [
-                    'replace-token' => true,
-                ],
-                [],
-                [
-                ]
             );
 
         static::assertIsString($this->browser->getResponse()->getContent());
@@ -325,11 +252,7 @@ public function testValidLogoutAsGuest(): void
         $this->browser
             ->request(
                 'POST',
-                '/store-api/account/customer',
-                [],
-                [],
-                [
-                ]
+                '/store-api/account/customer'
             );
 
         static::assertIsString($this->browser->getResponse()->getContent());
diff --git a/tests/integration/Storefront/Controller/AuthControllerTest.php b/tests/integration/Storefront/Controller/AuthControllerTest.php
index c8e7250bf87..014716a2a72 100644
--- a/tests/integration/Storefront/Controller/AuthControllerTest.php
+++ b/tests/integration/Storefront/Controller/AuthControllerTest.php
@@ -262,7 +262,7 @@ public function testOneUserUseOneContextAcrossSessions(): void
         $secondTimeLoginContextToken = $secondTimeLogin->get(PlatformRequest::HEADER_CONTEXT_TOKEN);
 
         static::assertNotEquals($firstTimeLoginSessionId, $secondTimeLoginSessionId);
-        static::assertEquals($firstTimeLoginContextToken, $secondTimeLoginContextToken);
+        static::assertNotEquals($firstTimeLoginContextToken, $secondTimeLoginContextToken);
     }
 
     public function testMergedHintIsAdded(): void
