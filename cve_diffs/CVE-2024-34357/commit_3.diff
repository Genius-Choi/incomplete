diff --git a/typo3/sysext/frontend/Classes/Controller/ShowImageController.php b/typo3/sysext/frontend/Classes/Controller/ShowImageController.php
index aeb36fcca727..1f9faae73308 100644
--- a/typo3/sysext/frontend/Classes/Controller/ShowImageController.php
+++ b/typo3/sysext/frontend/Classes/Controller/ShowImageController.php
@@ -168,12 +168,12 @@ public function main()
             '###publicUrl###' => htmlspecialchars($processedImage->getPublicUrl() ?? ''),
             '###alt###' => htmlspecialchars($this->file->getProperty('alternative') ?: $this->title),
             '###title###' => htmlspecialchars($this->file->getProperty('title') ?: $this->title),
-            '###width###' => $processedImage->getProperty('width'),
-            '###height###' => $processedImage->getProperty('height'),
+            '###width###' => htmlspecialchars((string)$processedImage->getProperty('width')),
+            '###height###' => htmlspecialchars((string)$processedImage->getProperty('height')),
         ];
         $this->imageTag = str_replace(array_keys($imageTagMarkers), array_values($imageTagMarkers), $this->imageTag);
         $markerArray = [
-            '###TITLE###' => $this->file->getProperty('title') ?: $this->title,
+            '###TITLE###' => htmlspecialchars($this->file->getProperty('title') ?: $this->title),
             '###IMAGE###' => $this->imageTag,
             '###BODY###' => $this->bodyTag,
         ];
diff --git a/typo3/sysext/frontend/Tests/Functional/Controller/ShowImageControllerTest.php b/typo3/sysext/frontend/Tests/Functional/Controller/ShowImageControllerTest.php
index c3ee8eca9b5b..76baec2c584c 100644
--- a/typo3/sysext/frontend/Tests/Functional/Controller/ShowImageControllerTest.php
+++ b/typo3/sysext/frontend/Tests/Functional/Controller/ShowImageControllerTest.php
@@ -93,12 +93,14 @@ public static function contentIsGeneratedForLocalFilesDataProvider(): \Generator
     public function contentIsGeneratedForLocalFiles(int $fileId, array $queryParams): void
     {
         $storageDriver = 'Local';
+        $expectedSrc = '/fileadmin/local-file/' . $fileId . '?&test=""';
+        $expectedTitle = '</title></head></html><!-- "fileProperty::title" -->';
 
         $this->storage->expects(self::atLeastOnce())
             ->method('getDriverType')
             ->willReturn($storageDriver);
         $file = $this->buildFile('/local-file/' . $fileId, $this->storage);
-        $processedFile = $this->buildProcessedFile('/fileadmin/local-file/' . $fileId);
+        $processedFile = $this->buildProcessedFile($expectedSrc);
         $this->resourceFactory->expects(self::atLeastOnce())
             ->method('getFileObject')
             ->with($fileId)
@@ -109,16 +111,17 @@ public function contentIsGeneratedForLocalFiles(int $fileId, array $queryParams)
 
         $request = $this->buildRequest($queryParams);
         $response = $this->subject->processRequest($request);
-        $document = (new HTML5())->loadHTML((string)$response->getBody());
+        $responseBody = (string)$response->getBody();
+        $document = (new HTML5())->loadHTML($responseBody);
 
         $titles = $document->getElementsByTagName('title');
         $images = $document->getElementsByTagName('img');
-        self::assertSame('fileProperty::title', $titles->item(0)->nodeValue);
-        self::assertSame('/fileadmin/local-file/13', $images->item(0)->getAttribute('src'));
-        self::assertSame('fileProperty::alternative', $images->item(0)->getAttribute('alt'));
-        self::assertSame('fileProperty::title', $images->item(0)->getAttribute('title'));
-        self::assertSame('processedProperty::width', $images->item(0)->getAttribute('width'));
-        self::assertSame('processedProperty::height', $images->item(0)->getAttribute('height'));
+        self::assertSame($expectedTitle, $titles->item(0)->nodeValue);
+        self::assertSame($expectedSrc, $images->item(0)->getAttribute('src'));
+        self::assertSame($expectedTitle, $images->item(0)->getAttribute('title'));
+        self::assertSame('<!-- "fileProperty::alternative" -->', $images->item(0)->getAttribute('alt'));
+        self::assertSame('<!-- "processedProperty::width" -->', $images->item(0)->getAttribute('width'));
+        self::assertSame('<!-- "processedProperty::height" -->', $images->item(0)->getAttribute('height'));
     }
 
     /**
@@ -141,7 +144,12 @@ private function buildFile(string $identifier, ResourceStorage $storage): FileIn
         $file->method('getIdentifier')
             ->willReturn($identifier);
         $file->method('getProperty')
-            ->willReturnCallback($this->buildRoundTripClosure('fileProperty'));
+            ->willReturnCallback(
+                $this->buildRoundTripClosure(
+                    'fileProperty',
+                    ['title' => '</title></head></html>']
+                )
+            );
 
         return $file;
     }
@@ -162,10 +170,15 @@ private function buildProcessedFile(string $publicUrl): ProcessedFile&MockObject
         return $processedFile;
     }
 
-    private function buildRoundTripClosure(string $prefix): \Closure
+    private function buildRoundTripClosure(string $prefix, array $prependMap = []): \Closure
     {
-        return static function (string ...$args) use ($prefix): string {
-            return sprintf('%s::%s', $prefix, implode(',', $args));
+        return static function (string $name) use ($prefix, $prependMap): string {
+            return sprintf(
+                '%s<!-- "%s::%s" -->',
+                $prependMap[$name] ?? '',
+                $prefix,
+                $name
+            );
         };
     }
 }
