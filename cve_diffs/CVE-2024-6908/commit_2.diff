diff --git a/managed/src/main/java/com/yugabyte/yw/controllers/UsersController.java b/managed/src/main/java/com/yugabyte/yw/controllers/UsersController.java
index 8bc93b893703..b984646a6308 100644
--- a/managed/src/main/java/com/yugabyte/yw/controllers/UsersController.java
+++ b/managed/src/main/java/com/yugabyte/yw/controllers/UsersController.java
@@ -188,6 +188,10 @@ public Result create(UUID customerUUID, Http.Request request) {
       formData.setPassword(generatedPassword); // Password is not used.
     }
 
+    if (formData.getRole() == Users.Role.SuperAdmin) {
+      throw new PlatformServiceException(BAD_REQUEST, "Cannot create an user as SuperAdmin");
+    }
+
     // Validate password.
     passwordPolicyService.checkPasswordPolicy(customerUUID, formData.getPassword());
 
@@ -385,7 +389,21 @@ public Result changeRole(UUID customerUUID, UUID userUUID, String role, Http.Req
     if (Users.Role.SuperAdmin == user.getRole()) {
       throw new PlatformServiceException(BAD_REQUEST, "Cannot change super admin role.");
     }
-    user.setRole(Users.Role.valueOf(role));
+
+    Users.Role userRole = null;
+    try {
+      userRole = Users.Role.valueOf(role);
+    } catch (IllegalArgumentException ex) {
+      throw new PlatformServiceException(BAD_REQUEST, "Role name provided is not supported");
+    }
+
+    if (userRole == null) {
+      throw new PlatformServiceException(BAD_REQUEST, "Role name provided is not supported");
+    } else if (userRole == Users.Role.SuperAdmin) {
+      throw new PlatformServiceException(BAD_REQUEST, "Cannot edit the user role to SuperAdmin");
+    }
+
+    user.setRole(userRole);
     user.save();
 
     boolean useNewAuthz =
diff --git a/managed/src/main/java/com/yugabyte/yw/controllers/YbcController.java b/managed/src/main/java/com/yugabyte/yw/controllers/YbcController.java
index f436e00b9ce2..76e9507be60d 100644
--- a/managed/src/main/java/com/yugabyte/yw/controllers/YbcController.java
+++ b/managed/src/main/java/com/yugabyte/yw/controllers/YbcController.java
@@ -146,6 +146,7 @@ public Result install(
    */
   @YbaApi(visibility = YbaApiVisibility.INTERNAL, sinceYBAVersion = "2.21.0.0")
   @ApiOperation(
+      notes = "YbaApi Internal.",
       value = "YbaApi Internal. Upgrade YBC gflags on the universe nodes",
       nickname = "upgradeYbcGflags",
       response = YBPTask.class)
diff --git a/managed/src/main/resources/swagger-strict.json b/managed/src/main/resources/swagger-strict.json
index d8625623ec5a..8dd57d707c18 100644
--- a/managed/src/main/resources/swagger-strict.json
+++ b/managed/src/main/resources/swagger-strict.json
@@ -25365,50 +25365,6 @@
         "tags" : [ "Universe Upgrades Management" ]
       }
     },
-    "/api/v1/customers/{cUUID}/universes/{uniUUID}/ybc/upgrade/gflags" : {
-      "put" : {
-        "description" : "",
-        "operationId" : "upgradeYbcGflags",
-        "parameters" : [ {
-          "format" : "uuid",
-          "in" : "path",
-          "name" : "cUUID",
-          "required" : true,
-          "type" : "string"
-        }, {
-          "format" : "uuid",
-          "in" : "path",
-          "name" : "uniUUID",
-          "required" : true,
-          "type" : "string"
-        }, {
-          "in" : "query",
-          "name" : "request",
-          "required" : false
-        } ],
-        "responses" : {
-          "200" : {
-            "description" : "successful operation",
-            "schema" : {
-              "$ref" : "#/definitions/YBPTask"
-            }
-          }
-        },
-        "responsesObject" : {
-          "200" : {
-            "description" : "successful operation",
-            "schema" : {
-              "$ref" : "#/definitions/YBPTask"
-            }
-          }
-        },
-        "security" : [ {
-          "apiKeyAuth" : [ ]
-        } ],
-        "summary" : "YbaApi Internal. Upgrade YBC gflags on the universe nodes",
-        "tags" : [ "Ybc Management" ]
-      }
-    },
     "/api/v1/customers/{cUUID}/universes/{uniUUID}/ybc_throttle_params" : {
       "get" : {
         "description" : "",
@@ -27334,8 +27290,6 @@
     "name" : "UniverseClusterMutations"
   }, {
     "name" : "User management"
-  }, {
-    "name" : "Ybc Management"
   }, {
     "name" : "preview"
   } ]
diff --git a/managed/src/main/resources/swagger.json b/managed/src/main/resources/swagger.json
index e067fa2b67a7..eb5c57222c1f 100644
--- a/managed/src/main/resources/swagger.json
+++ b/managed/src/main/resources/swagger.json
@@ -26672,50 +26672,6 @@
         "tags" : [ "Universe Upgrades Management" ]
       }
     },
-    "/api/v1/customers/{cUUID}/universes/{uniUUID}/ybc/upgrade/gflags" : {
-      "put" : {
-        "description" : "",
-        "operationId" : "upgradeYbcGflags",
-        "parameters" : [ {
-          "format" : "uuid",
-          "in" : "path",
-          "name" : "cUUID",
-          "required" : true,
-          "type" : "string"
-        }, {
-          "format" : "uuid",
-          "in" : "path",
-          "name" : "uniUUID",
-          "required" : true,
-          "type" : "string"
-        }, {
-          "in" : "query",
-          "name" : "request",
-          "required" : false
-        } ],
-        "responses" : {
-          "200" : {
-            "description" : "successful operation",
-            "schema" : {
-              "$ref" : "#/definitions/YBPTask"
-            }
-          }
-        },
-        "responsesObject" : {
-          "200" : {
-            "description" : "successful operation",
-            "schema" : {
-              "$ref" : "#/definitions/YBPTask"
-            }
-          }
-        },
-        "security" : [ {
-          "apiKeyAuth" : [ ]
-        } ],
-        "summary" : "YbaApi Internal. Upgrade YBC gflags on the universe nodes",
-        "tags" : [ "Ybc Management" ]
-      }
-    },
     "/api/v1/customers/{cUUID}/universes/{uniUUID}/ybc_throttle_params" : {
       "get" : {
         "description" : "",
@@ -28690,8 +28646,6 @@
     "name" : "UniverseClusterMutations"
   }, {
     "name" : "User management"
-  }, {
-    "name" : "Ybc Management"
   }, {
     "name" : "preview"
   } ]
diff --git a/managed/src/test/java/com/yugabyte/yw/controllers/UsersControllerTest.java b/managed/src/test/java/com/yugabyte/yw/controllers/UsersControllerTest.java
index 04c66d29ac62..64b5358c1379 100644
--- a/managed/src/test/java/com/yugabyte/yw/controllers/UsersControllerTest.java
+++ b/managed/src/test/java/com/yugabyte/yw/controllers/UsersControllerTest.java
@@ -126,6 +126,24 @@ public void testCreateUserWithValidToken() throws IOException {
     assertAuditEntry(1, customer1.getUuid());
   }
 
+  @Test
+  public void testCreateSuperAdminUserWithValidToken() throws IOException {
+    Http.Cookie validCookie = Http.Cookie.builder("authToken", authToken1).build();
+    ObjectNode params = Json.newObject();
+    params.put("email", "foo@bar.com");
+    params.put("password", "new-Password1");
+    params.put("confirmPassword", "new-Password1");
+    params.put("role", "SuperAdmin");
+    Result result =
+        assertPlatformException(
+            () ->
+                route(
+                    fakeRequest("POST", String.format(baseRoute, customer1.getUuid()))
+                        .cookie(validCookie)
+                        .bodyJson(params)));
+    assertEquals(BAD_REQUEST, result.status());
+  }
+
   @Test
   public void testDeleteUserWithValidToken() throws IOException {
     Http.Cookie validCookie = Http.Cookie.builder("authToken", authToken1).build();
@@ -177,6 +195,24 @@ public void testRoleChangeSuperAdmin() throws IOException {
     assertEquals(result.status(), BAD_REQUEST);
   }
 
+  @Test
+  public void testRoleChangeToSuperAdmin() throws IOException {
+    Users testUser1 = ModelFactory.testUser(customer1, "tc3@test.com", Role.Admin);
+    assertEquals(testUser1.getRole(), Role.Admin);
+    Http.Cookie validCookie = Http.Cookie.builder("authToken", authToken1).build();
+    Result result =
+        assertPlatformException(
+            () ->
+                route(
+                    fakeRequest(
+                            "PUT",
+                            String.format(
+                                "%s/%s?role=SuperAdmin",
+                                String.format(baseRoute, customer1.getUuid()), testUser1.getUuid()))
+                        .cookie(validCookie)));
+    assertEquals(result.status(), BAD_REQUEST);
+  }
+
   @Test
   public void testPasswordChangeInvalid() throws IOException {
     Users testUser1 = ModelFactory.testUser(customer1, "tc3@test.com", Role.Admin);
