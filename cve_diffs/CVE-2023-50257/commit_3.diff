diff --git a/include/fastdds/rtps/builtin/discovery/endpoint/EDP.h b/include/fastdds/rtps/builtin/discovery/endpoint/EDP.h
index b57ad891f89..bcdc927919a 100644
--- a/include/fastdds/rtps/builtin/discovery/endpoint/EDP.h
+++ b/include/fastdds/rtps/builtin/discovery/endpoint/EDP.h
@@ -103,9 +103,11 @@ class EDP
     /**
      * Abstract method that assigns remote endpoints when a new RTPSParticipantProxyData is discovered.
      * @param pdata Discovered ParticipantProxyData
+     * @param assign_secure_endpoints Whether to try assigning secure endpoints
      */
     virtual void assignRemoteEndpoints(
-            const ParticipantProxyData& pdata) = 0;
+            const ParticipantProxyData& pdata,
+            bool assign_secure_endpoints) = 0;
     /**
      * Remove remote endpoints from the endpoint discovery protocol
      * @param pdata Pointer to the ParticipantProxyData to remove
diff --git a/include/fastdds/rtps/builtin/discovery/endpoint/EDPSimple.h b/include/fastdds/rtps/builtin/discovery/endpoint/EDPSimple.h
index b945769546f..c2f5e940d78 100644
--- a/include/fastdds/rtps/builtin/discovery/endpoint/EDPSimple.h
+++ b/include/fastdds/rtps/builtin/discovery/endpoint/EDPSimple.h
@@ -102,9 +102,11 @@ class EDPSimple : public EDP
     /**
      * This method assigns the remote builtin endpoints that the remote RTPSParticipant indicates is using to our local builtin endpoints.
      * @param pdata Pointer to the RTPSParticipantProxyData object.
+     * @param assign_secure_endpoints Whether to try assigning secure endpoints
      */
     void assignRemoteEndpoints(
-            const ParticipantProxyData& pdata) override;
+            const ParticipantProxyData& pdata,
+            bool assign_secure_endpoints) override;
     /**
      * Remove remote endpoints from the endpoint discovery protocol
      * @param pdata Pointer to the ParticipantProxyData to remove
diff --git a/include/fastdds/rtps/builtin/discovery/endpoint/EDPStatic.h b/include/fastdds/rtps/builtin/discovery/endpoint/EDPStatic.h
index d949588ecd9..bb3d0d85b73 100644
--- a/include/fastdds/rtps/builtin/discovery/endpoint/EDPStatic.h
+++ b/include/fastdds/rtps/builtin/discovery/endpoint/EDPStatic.h
@@ -66,9 +66,11 @@ class EDPStatic : public EDP
     /**
      * Abstract method that assigns remote endpoints when a new RTPSParticipantProxyData is discovered.
      * @param pdata Pointer to the ParticipantProxyData.
+     * @param assign_secure_endpoints Whether to try assigning secure endpoints
      */
     void assignRemoteEndpoints(
-            const ParticipantProxyData& pdata) override;
+            const ParticipantProxyData& pdata,
+            bool assign_secure_endpoints) override;
     /**
      * Abstract method that removes a local Reader from the discovery method
      * @param R Pointer to the Reader to remove.
diff --git a/include/fastdds/rtps/builtin/discovery/participant/PDP.h b/include/fastdds/rtps/builtin/discovery/participant/PDP.h
index 45a583ab587..5515edae779 100644
--- a/include/fastdds/rtps/builtin/discovery/participant/PDP.h
+++ b/include/fastdds/rtps/builtin/discovery/participant/PDP.h
@@ -279,9 +279,11 @@ class PDP
     /**
      * Override to match additional endpoints to PDP. Like EDP or WLP.
      * @param pdata Pointer to the ParticipantProxyData object.
+     * @param notify_secure_endpoints Whether to try notifying secure endpoints.
      */
     virtual void notifyAboveRemoteEndpoints(
-            const ParticipantProxyData& pdata) = 0;
+            const ParticipantProxyData& pdata,
+            bool notify_secure_endpoints) = 0;
 
     /**
      * Some PDP classes require EDP matching with update PDP DATAs like EDPStatic
diff --git a/include/fastdds/rtps/builtin/discovery/participant/PDPSimple.h b/include/fastdds/rtps/builtin/discovery/participant/PDPSimple.h
index 40ae3fcbe54..7ad96e2511c 100644
--- a/include/fastdds/rtps/builtin/discovery/participant/PDPSimple.h
+++ b/include/fastdds/rtps/builtin/discovery/participant/PDPSimple.h
@@ -100,11 +100,13 @@ class PDPSimple : public PDP
             ParticipantProxyData* pdata) override;
 
     /**
-     * This method notifies EDP and WLP of the existence of a new participant.
-     * @param pdata
+     * Override to match additional endpoints to PDP. Like EDP or WLP.
+     * @param pdata Pointer to the ParticipantProxyData object.
+     * @param notify_secure_endpoints Whether to try notifying secure endpoints.
      */
     void notifyAboveRemoteEndpoints(
-            const ParticipantProxyData& pdata) override;
+            const ParticipantProxyData& pdata,
+            bool notify_secure_endpoints) override;
 
     /**
      * Activate a new Remote Endpoint that has been statically discovered.
diff --git a/include/fastdds/rtps/builtin/liveliness/WLP.h b/include/fastdds/rtps/builtin/liveliness/WLP.h
index 3602fc56a23..a143bec57ba 100644
--- a/include/fastdds/rtps/builtin/liveliness/WLP.h
+++ b/include/fastdds/rtps/builtin/liveliness/WLP.h
@@ -81,10 +81,12 @@ class WLP
     /**
      * Assign the remote endpoints for a newly discovered RTPSParticipant.
      * @param pdata Pointer to the RTPSParticipantProxyData object.
+     * @param assign_secure_endpoints Whether to try assigning secure endpoints.
      * @return True if correct.
      */
     bool assignRemoteEndpoints(
-            const ParticipantProxyData& pdata);
+            const ParticipantProxyData& pdata,
+            bool assign_secure_endpoints);
     /**
      * Remove remote endpoints from the liveliness protocol.
      * @param pdata Pointer to the ParticipantProxyData to remove
diff --git a/include/fastdds/rtps/security/accesscontrol/EndpointSecurityAttributes.h b/include/fastdds/rtps/security/accesscontrol/EndpointSecurityAttributes.h
index 05a9b837901..8a192231970 100644
--- a/include/fastdds/rtps/security/accesscontrol/EndpointSecurityAttributes.h
+++ b/include/fastdds/rtps/security/accesscontrol/EndpointSecurityAttributes.h
@@ -36,14 +36,19 @@ typedef uint32_t PluginEndpointSecurityAttributesMask;
 
 struct PluginEndpointSecurityAttributes
 {
-    PluginEndpointSecurityAttributes() : 
-        is_submessage_encrypted(false), is_submessage_origin_authenticated(false), is_payload_encrypted(false)
-    { }
-
-    explicit PluginEndpointSecurityAttributes(const PluginEndpointSecurityAttributesMask mask) :
-        is_submessage_encrypted((mask & PLUGIN_ENDPOINT_SECURITY_ATTRIBUTES_FLAG_IS_SUBMESSAGE_ENCRYPTED) != 0),
-        is_submessage_origin_authenticated((mask & PLUGIN_ENDPOINT_SECURITY_ATTRIBUTES_FLAG_IS_SUBMESSAGE_ORIGIN_AUTHENTICATED) != 0),
-        is_payload_encrypted((mask & PLUGIN_ENDPOINT_SECURITY_ATTRIBUTES_FLAG_IS_PAYLOAD_ENCRYPTED) != 0)
+    PluginEndpointSecurityAttributes()
+        : is_submessage_encrypted(false)
+        , is_submessage_origin_authenticated(false)
+        , is_payload_encrypted(false)
+    {
+    }
+
+    explicit PluginEndpointSecurityAttributes(
+            const PluginEndpointSecurityAttributesMask mask)
+        : is_submessage_encrypted((mask & PLUGIN_ENDPOINT_SECURITY_ATTRIBUTES_FLAG_IS_SUBMESSAGE_ENCRYPTED) != 0)
+        , is_submessage_origin_authenticated((mask &
+                PLUGIN_ENDPOINT_SECURITY_ATTRIBUTES_FLAG_IS_SUBMESSAGE_ORIGIN_AUTHENTICATED) != 0)
+        , is_payload_encrypted((mask & PLUGIN_ENDPOINT_SECURITY_ATTRIBUTES_FLAG_IS_PAYLOAD_ENCRYPTED) != 0)
     {
     }
 
@@ -54,11 +59,21 @@ struct PluginEndpointSecurityAttributes
     inline PluginEndpointSecurityAttributesMask mask() const
     {
         PluginEndpointSecurityAttributesMask rv = PLUGIN_ENDPOINT_SECURITY_ATTRIBUTES_FLAG_IS_VALID;
-        if (is_submessage_encrypted) rv |= PLUGIN_ENDPOINT_SECURITY_ATTRIBUTES_FLAG_IS_SUBMESSAGE_ENCRYPTED;
-        if (is_submessage_origin_authenticated) rv |= PLUGIN_ENDPOINT_SECURITY_ATTRIBUTES_FLAG_IS_SUBMESSAGE_ORIGIN_AUTHENTICATED;
-        if (is_payload_encrypted) rv |= PLUGIN_ENDPOINT_SECURITY_ATTRIBUTES_FLAG_IS_PAYLOAD_ENCRYPTED;
+        if (is_submessage_encrypted)
+        {
+            rv |= PLUGIN_ENDPOINT_SECURITY_ATTRIBUTES_FLAG_IS_SUBMESSAGE_ENCRYPTED;
+        }
+        if (is_submessage_origin_authenticated)
+        {
+            rv |= PLUGIN_ENDPOINT_SECURITY_ATTRIBUTES_FLAG_IS_SUBMESSAGE_ORIGIN_AUTHENTICATED;
+        }
+        if (is_payload_encrypted)
+        {
+            rv |= PLUGIN_ENDPOINT_SECURITY_ATTRIBUTES_FLAG_IS_PAYLOAD_ENCRYPTED;
+        }
         return rv;
     }
+
 };
 
 typedef uint32_t EndpointSecurityAttributesMask;
@@ -74,23 +89,30 @@ typedef uint32_t EndpointSecurityAttributesMask;
 
 struct EndpointSecurityAttributes
 {
-    EndpointSecurityAttributes() : 
-        is_read_protected(true), is_write_protected(true),
-        is_discovery_protected(false), is_liveliness_protected(false),
-        is_submessage_protected(false), is_payload_protected(false), is_key_protected(false),
-        plugin_endpoint_attributes(0UL)
-    {}
-
-    explicit EndpointSecurityAttributes(const EndpointSecurityAttributesMask mask) :
-        is_read_protected((mask & ENDPOINT_SECURITY_ATTRIBUTES_FLAG_IS_READ_PROTECTED) != 0),
-        is_write_protected((mask & ENDPOINT_SECURITY_ATTRIBUTES_FLAG_IS_WRITE_PROTECTED) != 0),
-        is_discovery_protected((mask & ENDPOINT_SECURITY_ATTRIBUTES_FLAG_IS_DISCOVERY_PROTECTED) != 0),
-        is_liveliness_protected((mask & ENDPOINT_SECURITY_ATTRIBUTES_FLAG_IS_LIVELINESS_PROTECTED) != 0),
-        is_submessage_protected((mask & ENDPOINT_SECURITY_ATTRIBUTES_FLAG_IS_SUBMESSAGE_PROTECTED) != 0),
-        is_payload_protected((mask & ENDPOINT_SECURITY_ATTRIBUTES_FLAG_IS_PAYLOAD_PROTECTED) != 0),
-        is_key_protected((mask & ENDPOINT_SECURITY_ATTRIBUTES_FLAG_IS_KEY_PROTECTED) != 0),
-        plugin_endpoint_attributes(0UL)
-    {}
+    EndpointSecurityAttributes()
+        : is_read_protected(false)
+        , is_write_protected(false)
+        , is_discovery_protected(false)
+        , is_liveliness_protected(false)
+        , is_submessage_protected(false)
+        , is_payload_protected(false)
+        , is_key_protected(false)
+        , plugin_endpoint_attributes(0UL)
+    {
+    }
+
+    explicit EndpointSecurityAttributes(
+            const EndpointSecurityAttributesMask mask)
+        : is_read_protected((mask & ENDPOINT_SECURITY_ATTRIBUTES_FLAG_IS_READ_PROTECTED) != 0)
+        , is_write_protected((mask & ENDPOINT_SECURITY_ATTRIBUTES_FLAG_IS_WRITE_PROTECTED) != 0)
+        , is_discovery_protected((mask & ENDPOINT_SECURITY_ATTRIBUTES_FLAG_IS_DISCOVERY_PROTECTED) != 0)
+        , is_liveliness_protected((mask & ENDPOINT_SECURITY_ATTRIBUTES_FLAG_IS_LIVELINESS_PROTECTED) != 0)
+        , is_submessage_protected((mask & ENDPOINT_SECURITY_ATTRIBUTES_FLAG_IS_SUBMESSAGE_PROTECTED) != 0)
+        , is_payload_protected((mask & ENDPOINT_SECURITY_ATTRIBUTES_FLAG_IS_PAYLOAD_PROTECTED) != 0)
+        , is_key_protected((mask & ENDPOINT_SECURITY_ATTRIBUTES_FLAG_IS_KEY_PROTECTED) != 0)
+        , plugin_endpoint_attributes(0UL)
+    {
+    }
 
     bool is_read_protected;
 
@@ -111,27 +133,50 @@ struct EndpointSecurityAttributes
     inline EndpointSecurityAttributesMask mask() const
     {
         EndpointSecurityAttributesMask rv = ENDPOINT_SECURITY_ATTRIBUTES_FLAG_IS_VALID;
-        if (is_read_protected) rv |= ENDPOINT_SECURITY_ATTRIBUTES_FLAG_IS_READ_PROTECTED;
-        if (is_write_protected) rv |= ENDPOINT_SECURITY_ATTRIBUTES_FLAG_IS_WRITE_PROTECTED;
-        if (is_discovery_protected) rv |= ENDPOINT_SECURITY_ATTRIBUTES_FLAG_IS_DISCOVERY_PROTECTED;
-        if (is_liveliness_protected) rv |= ENDPOINT_SECURITY_ATTRIBUTES_FLAG_IS_LIVELINESS_PROTECTED;
-        if (is_submessage_protected) rv |= ENDPOINT_SECURITY_ATTRIBUTES_FLAG_IS_SUBMESSAGE_PROTECTED;
-        if (is_payload_protected) rv |= ENDPOINT_SECURITY_ATTRIBUTES_FLAG_IS_PAYLOAD_PROTECTED;
-        if (is_key_protected) rv |= ENDPOINT_SECURITY_ATTRIBUTES_FLAG_IS_KEY_PROTECTED;
+        if (is_read_protected)
+        {
+            rv |= ENDPOINT_SECURITY_ATTRIBUTES_FLAG_IS_READ_PROTECTED;
+        }
+        if (is_write_protected)
+        {
+            rv |= ENDPOINT_SECURITY_ATTRIBUTES_FLAG_IS_WRITE_PROTECTED;
+        }
+        if (is_discovery_protected)
+        {
+            rv |= ENDPOINT_SECURITY_ATTRIBUTES_FLAG_IS_DISCOVERY_PROTECTED;
+        }
+        if (is_liveliness_protected)
+        {
+            rv |= ENDPOINT_SECURITY_ATTRIBUTES_FLAG_IS_LIVELINESS_PROTECTED;
+        }
+        if (is_submessage_protected)
+        {
+            rv |= ENDPOINT_SECURITY_ATTRIBUTES_FLAG_IS_SUBMESSAGE_PROTECTED;
+        }
+        if (is_payload_protected)
+        {
+            rv |= ENDPOINT_SECURITY_ATTRIBUTES_FLAG_IS_PAYLOAD_PROTECTED;
+        }
+        if (is_key_protected)
+        {
+            rv |= ENDPOINT_SECURITY_ATTRIBUTES_FLAG_IS_KEY_PROTECTED;
+        }
         return rv;
     }
 
-    inline bool match(const EndpointSecurityAttributesMask remoteMask,
-        const PluginEndpointSecurityAttributesMask remotePluginMask) const
+    inline bool match(
+            const EndpointSecurityAttributesMask remoteMask,
+            const PluginEndpointSecurityAttributesMask remotePluginMask) const
     {
         return security_mask_matches(mask(), remoteMask) &&
-            security_mask_matches(plugin_endpoint_attributes, remotePluginMask);
+               security_mask_matches(plugin_endpoint_attributes, remotePluginMask);
     }
+
 };
 
-}
-}
-}
-}
+} // namespace security
+} // namespace rtps
+} // namespace fastrtps
+} // namespace eprosima
 
 #endif // _FASTDDS_RTPS_SECURITY_ACCESSCONTROL_ENDPOINTSECURITYATTRIBUTES_H_
diff --git a/src/cpp/rtps/builtin/discovery/endpoint/EDPSimple.cpp b/src/cpp/rtps/builtin/discovery/endpoint/EDPSimple.cpp
index 77b20d2b25a..911cc442e74 100644
--- a/src/cpp/rtps/builtin/discovery/endpoint/EDPSimple.cpp
+++ b/src/cpp/rtps/builtin/discovery/endpoint/EDPSimple.cpp
@@ -825,7 +825,8 @@ bool EDPSimple::removeLocalReader(
 }
 
 void EDPSimple::assignRemoteEndpoints(
-        const ParticipantProxyData& pdata)
+        const ParticipantProxyData& pdata,
+        bool assign_secure_endpoints)
 {
     EPROSIMA_LOG_INFO(RTPS_EDP, "New DPD received, adding remote endpoints to our SimpleEDP endpoints");
     const NetworkFactory& network = mp_RTPSParticipant->network_factory();
@@ -890,7 +891,7 @@ void EDPSimple::assignRemoteEndpoints(
 #if HAVE_SECURITY
     auxendp = endp;
     auxendp &= DISC_BUILTIN_ENDPOINT_PUBLICATION_SECURE_ANNOUNCER;
-    if (auxendp != 0 && publications_secure_reader_.first != nullptr)
+    if (auxendp != 0 && publications_secure_reader_.first != nullptr && assign_secure_endpoints)
     {
         temp_writer_proxy_data->guid().entityId = sedp_builtin_publications_secure_writer;
         temp_writer_proxy_data->set_persistence_entity_id(sedp_builtin_publications_secure_writer);
@@ -906,7 +907,7 @@ void EDPSimple::assignRemoteEndpoints(
 
     auxendp = endp;
     auxendp &= DISC_BUILTIN_ENDPOINT_PUBLICATION_SECURE_DETECTOR;
-    if (auxendp != 0 && publications_secure_writer_.first != nullptr)
+    if (auxendp != 0 && publications_secure_writer_.first != nullptr && assign_secure_endpoints)
     {
         temp_reader_proxy_data->guid().entityId = sedp_builtin_publications_secure_reader;
         if (!mp_RTPSParticipant->security_manager().discovered_builtin_reader(
@@ -920,7 +921,7 @@ void EDPSimple::assignRemoteEndpoints(
 
     auxendp = endp;
     auxendp &= DISC_BUILTIN_ENDPOINT_SUBSCRIPTION_SECURE_ANNOUNCER;
-    if (auxendp != 0 && subscriptions_secure_reader_.first != nullptr)
+    if (auxendp != 0 && subscriptions_secure_reader_.first != nullptr && assign_secure_endpoints)
     {
         temp_writer_proxy_data->guid().entityId = sedp_builtin_subscriptions_secure_writer;
         temp_writer_proxy_data->set_persistence_entity_id(sedp_builtin_subscriptions_secure_writer);
@@ -936,7 +937,7 @@ void EDPSimple::assignRemoteEndpoints(
 
     auxendp = endp;
     auxendp &= DISC_BUILTIN_ENDPOINT_SUBSCRIPTION_SECURE_DETECTOR;
-    if (auxendp != 0 && subscriptions_secure_writer_.first != nullptr)
+    if (auxendp != 0 && subscriptions_secure_writer_.first != nullptr && assign_secure_endpoints)
     {
         EPROSIMA_LOG_INFO(RTPS_EDP, "Adding SEDP Sub Reader to my Sub Writer");
         temp_reader_proxy_data->guid().entityId = sedp_builtin_subscriptions_secure_reader;
@@ -948,7 +949,10 @@ void EDPSimple::assignRemoteEndpoints(
                     subscriptions_secure_writer_.first->getGuid());
         }
     }
+#else
+    static_cast<void>(assign_secure_endpoints);
 #endif // if HAVE_SECURITY
+
 }
 
 void EDPSimple::removeRemoteEndpoints(
diff --git a/src/cpp/rtps/builtin/discovery/endpoint/EDPStatic.cpp b/src/cpp/rtps/builtin/discovery/endpoint/EDPStatic.cpp
index 1a65b971ea6..a616dd6669f 100644
--- a/src/cpp/rtps/builtin/discovery/endpoint/EDPStatic.cpp
+++ b/src/cpp/rtps/builtin/discovery/endpoint/EDPStatic.cpp
@@ -407,7 +407,8 @@ bool EDPStatic::removeLocalWriter(
 }
 
 void EDPStatic::assignRemoteEndpoints(
-        const ParticipantProxyData& pdata)
+        const ParticipantProxyData& pdata,
+        bool /*assign_secure_endpoints*/)
 {
     GUID_t persistence_guid;
 
diff --git a/src/cpp/rtps/builtin/discovery/participant/PDPClient.cpp b/src/cpp/rtps/builtin/discovery/participant/PDPClient.cpp
index b23bcd81b4b..acb55f9da53 100644
--- a/src/cpp/rtps/builtin/discovery/participant/PDPClient.cpp
+++ b/src/cpp/rtps/builtin/discovery/participant/PDPClient.cpp
@@ -506,7 +506,8 @@ void PDPClient::assignRemoteEndpoints(
 }
 
 void PDPClient::notifyAboveRemoteEndpoints(
-        const ParticipantProxyData& pdata)
+        const ParticipantProxyData& pdata,
+        bool /*notify_secure_endpoints*/)
 {
 #if HAVE_SECURITY
     if (mp_RTPSParticipant->is_secure())
@@ -575,7 +576,7 @@ void PDPClient::perform_builtin_endpoints_matching(
     // No EDP notification needed. EDP endpoints would be match when PDP synchronization is granted
     if (mp_builtin->mp_WLP != nullptr)
     {
-        mp_builtin->mp_WLP->assignRemoteEndpoints(pdata);
+        mp_builtin->mp_WLP->assignRemoteEndpoints(pdata, true);
     }
 }
 
diff --git a/src/cpp/rtps/builtin/discovery/participant/PDPClient.h b/src/cpp/rtps/builtin/discovery/participant/PDPClient.h
index c1e93dbd37d..e7053c3f1e4 100644
--- a/src/cpp/rtps/builtin/discovery/participant/PDPClient.h
+++ b/src/cpp/rtps/builtin/discovery/participant/PDPClient.h
@@ -123,7 +123,8 @@ class PDPClient : public PDP
     void removeRemoteEndpoints(
             ParticipantProxyData* pdata) override;
     void notifyAboveRemoteEndpoints(
-            const ParticipantProxyData& pdata) override;
+            const ParticipantProxyData& pdata,
+            bool notify_secure_endpoints) override;
 
     /**
      * This method removes a remote RTPSParticipant and all its writers and readers.
diff --git a/src/cpp/rtps/builtin/discovery/participant/PDPListener.cpp b/src/cpp/rtps/builtin/discovery/participant/PDPListener.cpp
index f56f3b1d042..c1d6fbc395c 100644
--- a/src/cpp/rtps/builtin/discovery/participant/PDPListener.cpp
+++ b/src/cpp/rtps/builtin/discovery/participant/PDPListener.cpp
@@ -197,7 +197,7 @@ void PDPListener::onNewCacheChangeAdded(
 
                 if (parent_pdp_->updateInfoMatchesEDP())
                 {
-                    parent_pdp_->mp_EDP->assignRemoteEndpoints(*pdata);
+                    parent_pdp_->mp_EDP->assignRemoteEndpoints(*pdata, true);
                 }
 
                 lock.unlock();
diff --git a/src/cpp/rtps/builtin/discovery/participant/PDPServer.cpp b/src/cpp/rtps/builtin/discovery/participant/PDPServer.cpp
index 54eca18db15..1bd25b69c33 100644
--- a/src/cpp/rtps/builtin/discovery/participant/PDPServer.cpp
+++ b/src/cpp/rtps/builtin/discovery/participant/PDPServer.cpp
@@ -676,7 +676,8 @@ void PDPServer::assignRemoteEndpoints(
 }
 
 void PDPServer::notifyAboveRemoteEndpoints(
-        const ParticipantProxyData& pdata)
+        const ParticipantProxyData& pdata,
+        bool /*notify_secure_endpoints*/)
 {
     static_cast<void>(pdata);
 #if HAVE_SECURITY
@@ -723,12 +724,12 @@ void PDPServer::perform_builtin_endpoints_matching(
     //Inform EDP of new RTPSParticipant data:
     if (mp_EDP != nullptr)
     {
-        mp_EDP->assignRemoteEndpoints(pdata);
+        mp_EDP->assignRemoteEndpoints(pdata, true);
     }
 
     if (mp_builtin->mp_WLP != nullptr)
     {
-        mp_builtin->mp_WLP->assignRemoteEndpoints(pdata);
+        mp_builtin->mp_WLP->assignRemoteEndpoints(pdata, true);
     }
 }
 
diff --git a/src/cpp/rtps/builtin/discovery/participant/PDPServer.hpp b/src/cpp/rtps/builtin/discovery/participant/PDPServer.hpp
index f8b840fae04..0a4ad9b98ba 100644
--- a/src/cpp/rtps/builtin/discovery/participant/PDPServer.hpp
+++ b/src/cpp/rtps/builtin/discovery/participant/PDPServer.hpp
@@ -135,7 +135,8 @@ class PDPServer : public fastrtps::rtps::PDP
     void removeRemoteEndpoints(
             fastrtps::rtps::ParticipantProxyData* pdata) override;
     void notifyAboveRemoteEndpoints(
-            const fastrtps::rtps::ParticipantProxyData& pdata) override;
+            const fastrtps::rtps::ParticipantProxyData& pdata,
+            bool notify_secure_endpoints) override;
 
 #if HAVE_SECURITY
     bool pairing_remote_writer_with_local_reader_after_security(
diff --git a/src/cpp/rtps/builtin/discovery/participant/PDPServerListener.cpp b/src/cpp/rtps/builtin/discovery/participant/PDPServerListener.cpp
index fd83df39863..469a8f7be57 100644
--- a/src/cpp/rtps/builtin/discovery/participant/PDPServerListener.cpp
+++ b/src/cpp/rtps/builtin/discovery/participant/PDPServerListener.cpp
@@ -357,7 +357,7 @@ void PDPServerListener::onNewCacheChangeAdded(
                 // Included form symmetry with PDPListener to profit from a future updateInfoMatchesEDP override
                 if (pdp_server()->updateInfoMatchesEDP() && is_local)
                 {
-                    pdp_server()->mp_EDP->assignRemoteEndpoints(*pdata);
+                    pdp_server()->mp_EDP->assignRemoteEndpoints(*pdata, true);
                 }
             }
 
diff --git a/src/cpp/rtps/builtin/discovery/participant/PDPSimple.cpp b/src/cpp/rtps/builtin/discovery/participant/PDPSimple.cpp
index cfc1087faa4..3579ceb0fc2 100644
--- a/src/cpp/rtps/builtin/discovery/participant/PDPSimple.cpp
+++ b/src/cpp/rtps/builtin/discovery/participant/PDPSimple.cpp
@@ -422,7 +422,7 @@ void PDPSimple::assignRemoteEndpoints(
     mp_RTPSParticipant->security_manager().discovered_participant(*pdata);
 #else
     //Inform EDP of new RTPSParticipant data:
-    notifyAboveRemoteEndpoints(*pdata);
+    notifyAboveRemoteEndpoints(*pdata, true);
 #endif // if HAVE_SECURITY
 }
 
@@ -451,17 +451,18 @@ void PDPSimple::removeRemoteEndpoints(
 }
 
 void PDPSimple::notifyAboveRemoteEndpoints(
-        const ParticipantProxyData& pdata)
+        const ParticipantProxyData& pdata,
+        bool notify_secure_endpoints)
 {
     //Inform EDP of new RTPSParticipant data:
     if (mp_EDP != nullptr)
     {
-        mp_EDP->assignRemoteEndpoints(pdata);
+        mp_EDP->assignRemoteEndpoints(pdata, (notify_secure_endpoints ? true : false));
     }
 
     if (mp_builtin->mp_WLP != nullptr)
     {
-        mp_builtin->mp_WLP->assignRemoteEndpoints(pdata);
+        mp_builtin->mp_WLP->assignRemoteEndpoints(pdata, (notify_secure_endpoints ? true : false));
     }
 
     if (mp_builtin->tlm_ != nullptr)
diff --git a/src/cpp/rtps/builtin/discovery/participant/timedevent/DSClientEvent.cpp b/src/cpp/rtps/builtin/discovery/participant/timedevent/DSClientEvent.cpp
index 4fde9a54bb3..4621a6adaf4 100644
--- a/src/cpp/rtps/builtin/discovery/participant/timedevent/DSClientEvent.cpp
+++ b/src/cpp/rtps/builtin/discovery/participant/timedevent/DSClientEvent.cpp
@@ -74,7 +74,7 @@ bool DSClientEvent::event()
             // Match EDP endpoints with this server if necessary
             if (!mp_EDP->areRemoteEndpointsMatched(part_proxy_data))
             {
-                mp_EDP->assignRemoteEndpoints(*(part_proxy_data));
+                mp_EDP->assignRemoteEndpoints(*(part_proxy_data), true);
             }
         }
         // If the server is not known, we need to run the event again
diff --git a/src/cpp/rtps/builtin/liveliness/WLP.cpp b/src/cpp/rtps/builtin/liveliness/WLP.cpp
index 246c77ea418..6c1b49f6979 100644
--- a/src/cpp/rtps/builtin/liveliness/WLP.cpp
+++ b/src/cpp/rtps/builtin/liveliness/WLP.cpp
@@ -479,7 +479,8 @@ bool WLP::pairing_remote_writer_with_local_reader_after_security(
 #endif // if HAVE_SECURITY
 
 bool WLP::assignRemoteEndpoints(
-        const ParticipantProxyData& pdata)
+        const ParticipantProxyData& pdata,
+        bool assign_secure_endpoints)
 {
     const NetworkFactory& network = mp_participant->network_factory();
     uint32_t endp = pdata.m_availableBuiltinEndpoints;
@@ -524,7 +525,7 @@ bool WLP::assignRemoteEndpoints(
 #if HAVE_SECURITY
     auxendp = endp;
     auxendp &= BUILTIN_ENDPOINT_PARTICIPANT_MESSAGE_SECURE_DATA_WRITER;
-    if (auxendp != 0 && this->mp_builtinReaderSecure != nullptr)
+    if (auxendp != 0 && this->mp_builtinReaderSecure != nullptr && assign_secure_endpoints)
     {
         EPROSIMA_LOG_INFO(RTPS_LIVELINESS, "Adding remote writer to my local Builtin Secure Reader");
         temp_writer_proxy_data_.guid().entityId = c_EntityId_WriterLivelinessSecure;
@@ -540,7 +541,7 @@ bool WLP::assignRemoteEndpoints(
     }
     auxendp = endp;
     auxendp &= BUILTIN_ENDPOINT_PARTICIPANT_MESSAGE_SECURE_DATA_READER;
-    if (auxendp != 0 && this->mp_builtinWriterSecure != nullptr)
+    if (auxendp != 0 && this->mp_builtinWriterSecure != nullptr && assign_secure_endpoints)
     {
         EPROSIMA_LOG_INFO(RTPS_LIVELINESS, "Adding remote reader to my local Builtin Secure Writer");
         temp_reader_proxy_data_.guid().entityId = c_EntityId_ReaderLivelinessSecure;
@@ -552,6 +553,8 @@ bool WLP::assignRemoteEndpoints(
                     mp_builtinWriterSecure->getGuid());
         }
     }
+#else
+    static_cast<void>(assign_secure_endpoints);
 #endif // if HAVE_SECURITY
 
     return true;
diff --git a/src/cpp/rtps/security/SecurityManager.cpp b/src/cpp/rtps/security/SecurityManager.cpp
index 6484caf0286..21b9588347c 100644
--- a/src/cpp/rtps/security/SecurityManager.cpp
+++ b/src/cpp/rtps/security/SecurityManager.cpp
@@ -402,12 +402,25 @@ void SecurityManager::cancel_init()
 
     if (access_plugin_ != nullptr)
     {
+        if (local_permissions_handle_ != nullptr)
+        {
+            access_plugin_->return_permissions_handle(local_permissions_handle_, exception);
+        }
+
         delete access_plugin_;
         access_plugin_ = nullptr;
     }
 
-    delete authentication_plugin_;
-    authentication_plugin_ = nullptr;
+    if (authentication_plugin_ != nullptr)
+    {
+        if (local_identity_handle_ != nullptr)
+        {
+            authentication_plugin_->return_identity_handle(local_identity_handle_, exception);
+        }
+
+        delete authentication_plugin_;
+        authentication_plugin_ = nullptr;
+    }
 
     disable_security_manager();
 }
@@ -568,7 +581,7 @@ bool SecurityManager::discovered_participant(
 
     if (authentication_plugin_ == nullptr)
     {
-        participant_->pdp()->notifyAboveRemoteEndpoints(participant_data);
+        participant_->pdp()->notifyAboveRemoteEndpoints(participant_data, true);
         return true;
     }
 
@@ -604,7 +617,7 @@ bool SecurityManager::discovered_participant(
                     resend_handshake_message_token(guid);
                     return true;
                 },
-                500)); // TODO (Ricardo) Configurable
+                DiscoveredParticipantInfo::INITIAL_RESEND_HANDSHAKE_MILLISECS)); // TODO (Ricardo) Configurable
 
         IdentityHandle* remote_identity_handle = nullptr;
 
@@ -631,23 +644,8 @@ bool SecurityManager::discovered_participant(
             case VALIDATION_PENDING_RETRY:
             // TODO(Ricardo) Send event.
             default:
-                if (strlen(exception.what()) > 0)
-                {
-                    EPROSIMA_LOG_ERROR(SECURITY_AUTHENTICATION, exception.what());
-                }
 
-                EPROSIMA_LOG_INFO(SECURITY, "Authentication failed for participant " <<
-                        participant_data.m_guid);
-
-                // Inform user about authenticated remote participant.
-                if (participant_->getListener() != nullptr)
-                {
-                    ParticipantAuthenticationInfo info;
-                    info.status = ParticipantAuthenticationInfo::UNAUTHORIZED_PARTICIPANT;
-                    info.guid = participant_data.m_guid;
-                    participant_->getListener()->onParticipantAuthentication(
-                        participant_->getUserRTPSParticipant(), std::move(info));
-                }
+                on_validation_failed(participant_data, exception);
 
                 std::lock_guard<shared_mutex> _(mutex_);
 
@@ -850,21 +848,7 @@ bool SecurityManager::on_process_handshake(
 
     if (ret == VALIDATION_FAILED)
     {
-        // Inform user about authenticated remote participant.
-        if (participant_->getListener() != nullptr)
-        {
-            ParticipantAuthenticationInfo info;
-            info.status = ParticipantAuthenticationInfo::UNAUTHORIZED_PARTICIPANT;
-            info.guid = participant_data.m_guid;
-            participant_->getListener()->onParticipantAuthentication(
-                participant_->getUserRTPSParticipant(), std::move(info));
-        }
-
-        if (strlen(exception.what()) > 0)
-        {
-            EPROSIMA_LOG_ERROR(SECURITY_AUTHENTICATION, exception.what());
-        }
-
+        on_validation_failed(participant_data, exception);
         return false;
     }
 
@@ -2897,6 +2881,7 @@ bool SecurityManager::discovered_reader(
     PermissionsHandle* remote_permissions = nullptr;
     std::shared_ptr<ParticipantCryptoHandle> remote_participant_crypto_handle;
     std::shared_ptr<SecretHandle> shared_secret_handle;
+    AuthenticationStatus auth_status(AUTHENTICATION_INIT);
 
     if (!security_attributes.match(remote_reader_data.security_attributes_,
             remote_reader_data.plugin_security_attributes_))
@@ -2917,6 +2902,7 @@ bool SecurityManager::discovered_reader(
             remote_permissions = dp_it->second->get_permissions_handle();
             remote_participant_crypto_handle = dp_it->second->get_participant_crypto();
             shared_secret_handle = dp_it->second->get_shared_secret();
+            auth_status = dp_it->second->get_auth_status();
         }
     }
 
@@ -2927,13 +2913,25 @@ bool SecurityManager::discovered_reader(
     bool returned_value = true;
     SecurityException exception;
 
-    if (!is_builtin && access_plugin_ != nullptr && remote_permissions != nullptr)
+    if (!is_builtin)
     {
-        if ((returned_value = access_plugin_->check_remote_datareader(
-                    *remote_permissions, domain_id_, remote_reader_data, relay_only, exception)) == false)
+        //! Check if it is an unathenticated participant
+        if (participant_->security_attributes().allow_unauthenticated_participants &&
+                auth_status != AUTHENTICATION_NOT_AVAILABLE && auth_status != AUTHENTICATION_OK &&
+                (security_attributes.is_write_protected || security_attributes.is_read_protected))
+        {
+            //!Do not match if read or write protection is enabled for this local endpoint
+            return false;
+        }
+
+        if (access_plugin_ != nullptr && remote_permissions != nullptr)
         {
-            EPROSIMA_LOG_ERROR(SECURITY, "Error checking create remote reader " << remote_reader_data.guid()
-                                                                                << " (" << exception.what() << ")");
+            if ((returned_value = access_plugin_->check_remote_datareader(
+                        *remote_permissions, domain_id_, remote_reader_data, relay_only, exception)) == false)
+            {
+                EPROSIMA_LOG_ERROR(SECURITY, "Error checking create remote reader " << remote_reader_data.guid()
+                                                                                    << " (" << exception.what() << ")");
+            }
         }
     }
 
@@ -3247,6 +3245,7 @@ bool SecurityManager::discovered_writer(
     PermissionsHandle* remote_permissions = nullptr;
     std::shared_ptr<ParticipantCryptoHandle> remote_participant_crypto_handle;
     std::shared_ptr<SecretHandle> shared_secret_handle;
+    AuthenticationStatus auth_status(AUTHENTICATION_INIT);
 
     if (!security_attributes.match(remote_writer_data.security_attributes_,
             remote_writer_data.plugin_security_attributes_))
@@ -3267,6 +3266,7 @@ bool SecurityManager::discovered_writer(
             remote_permissions = dp_it->second->get_permissions_handle();
             remote_participant_crypto_handle = dp_it->second->get_participant_crypto();
             shared_secret_handle = dp_it->second->get_shared_secret();
+            auth_status = dp_it->second->get_auth_status();
         }
     }
 
@@ -3276,13 +3276,25 @@ bool SecurityManager::discovered_writer(
     bool returned_value = true;
     SecurityException exception;
 
-    if (!is_builtin && access_plugin_ != nullptr && remote_permissions != nullptr)
+    if (!is_builtin)
     {
-        if ((returned_value = access_plugin_->check_remote_datawriter(
-                    *remote_permissions, domain_id_, remote_writer_data, exception)) == false)
+        //! Check if it is an unathenticated participant
+        if (participant_->security_attributes().allow_unauthenticated_participants &&
+                auth_status != AUTHENTICATION_NOT_AVAILABLE && auth_status != AUTHENTICATION_OK &&
+                (security_attributes.is_write_protected || security_attributes.is_read_protected))
+        {
+            //!Do not match if read or write protection is enabled for this local endpoint
+            return false;
+        }
+
+        if (access_plugin_ != nullptr && remote_permissions != nullptr)
         {
-            EPROSIMA_LOG_ERROR(SECURITY, "Error checking create remote writer " << remote_writer_data.guid()
-                                                                                << " (" << exception.what() << ")");
+            if ((returned_value = access_plugin_->check_remote_datawriter(
+                        *remote_permissions, domain_id_, remote_writer_data, exception)) == false)
+            {
+                EPROSIMA_LOG_ERROR(SECURITY, "Error checking create remote writer " << remote_writer_data.guid()
+                                                                                    << " (" << exception.what() << ")");
+            }
         }
     }
 
@@ -4105,7 +4117,7 @@ bool SecurityManager::participant_authorized(
 void SecurityManager::notify_participant_authorized(
         const ParticipantProxyData& participant_data)
 {
-    participant_->pdp()->notifyAboveRemoteEndpoints(participant_data);
+    participant_->pdp()->notifyAboveRemoteEndpoints(participant_data, true);
 
     EPROSIMA_LOG_INFO(SECURITY, "Participant " << participant_data.m_guid << " authenticated");
 
@@ -4220,21 +4232,39 @@ void SecurityManager::resend_handshake_message_token(
 
         if (remote_participant_info)
         {
-            if (remote_participant_info->change_sequence_number_ != SequenceNumber_t::unknown())
+            if (remote_participant_info->handshake_requests_sent_ >= DiscoveredParticipantInfo::MAX_HANDSHAKE_REQUESTS)
             {
-                CacheChange_t* p_change = participant_stateless_message_writer_history_->remove_change_and_reuse(
-                    remote_participant_info->change_sequence_number_);
-                remote_participant_info->change_sequence_number_ = SequenceNumber_t::unknown();
-
-                if (p_change != nullptr)
+                SecurityException exception;
+                remote_participant_info->event_->cancel_timer();
+                on_validation_failed(dp_it->second->participant_data(), exception);
+            }
+            else
+            {
+                if (remote_participant_info->change_sequence_number_ != SequenceNumber_t::unknown())
                 {
-                    EPROSIMA_LOG_INFO(SECURITY, "Authentication handshake resent to participant " <<
-                            remote_participant_key);
-                    if (participant_stateless_message_writer_history_->add_change(p_change))
+                    CacheChange_t* p_change = participant_stateless_message_writer_history_->remove_change_and_reuse(
+                        remote_participant_info->change_sequence_number_);
+                    remote_participant_info->change_sequence_number_ = SequenceNumber_t::unknown();
+
+                    if (p_change != nullptr)
                     {
-                        remote_participant_info->change_sequence_number_ = p_change->sequenceNumber;
+                        EPROSIMA_LOG_INFO(SECURITY, "Authentication handshake resent to participant " <<
+                                remote_participant_key);
+                        if (participant_stateless_message_writer_history_->add_change(p_change))
+                        {
+                            remote_participant_info->change_sequence_number_ = p_change->sequenceNumber;
+                            remote_participant_info->handshake_requests_sent_++;
+                        }
+                        //TODO (Ricardo) What to do if not added?
                     }
-                    //TODO (Ricardo) What to do if not added?
+                }
+
+                if (remote_participant_info->auth_status_ == AUTHENTICATION_WAITING_REPLY)
+                {
+                    // Avoid DoS attack by exponentially increasing event interval
+                    auto time_ms = remote_participant_info->event_->getIntervalMilliSec();
+                    remote_participant_info->event_->update_interval_millisec(time_ms * 2);
+                    remote_participant_info->event_->restart_timer();
                 }
             }
 
@@ -4243,6 +4273,34 @@ void SecurityManager::resend_handshake_message_token(
     }
 }
 
+void SecurityManager::on_validation_failed(
+        const ParticipantProxyData& participant_data,
+        const SecurityException& exception) const
+{
+    if (participant_->security_attributes().allow_unauthenticated_participants)
+    {
+        participant_->pdp()->notifyAboveRemoteEndpoints(participant_data, false);
+    }
+
+    if (strlen(exception.what()) > 0)
+    {
+        EPROSIMA_LOG_ERROR(SECURITY_AUTHENTICATION, exception.what());
+    }
+
+    EPROSIMA_LOG_INFO(SECURITY, "Authentication failed for participant " <<
+            participant_data.m_guid);
+
+    // Inform user about authenticated remote participant.
+    if (participant_->getListener() != nullptr)
+    {
+        ParticipantAuthenticationInfo info;
+        info.status = ParticipantAuthenticationInfo::UNAUTHORIZED_PARTICIPANT;
+        info.guid = participant_data.m_guid;
+        participant_->getListener()->onParticipantAuthentication(
+            participant_->getUserRTPSParticipant(), std::move(info));
+    }
+}
+
 bool SecurityManager::DiscoveredParticipantInfo::check_guid_comes_from(
         Authentication* const auth_plugin,
         const GUID_t& adjusted,
diff --git a/src/cpp/rtps/security/SecurityManager.h b/src/cpp/rtps/security/SecurityManager.h
index c477ac3fd7e..26eeb984c98 100644
--- a/src/cpp/rtps/security/SecurityManager.h
+++ b/src/cpp/rtps/security/SecurityManager.h
@@ -350,7 +350,8 @@ class SecurityManager
         AUTHENTICATION_REQUEST_NOT_SEND,
         AUTHENTICATION_WAITING_REQUEST,
         AUTHENTICATION_WAITING_REPLY,
-        AUTHENTICATION_WAITING_FINAL
+        AUTHENTICATION_WAITING_FINAL,
+        AUTHENTICATION_NOT_AVAILABLE
     };
 
     class DiscoveredParticipantInfo
@@ -368,6 +369,7 @@ class SecurityManager
                 , auth_status_(auth_status)
                 , expected_sequence_number_(0)
                 , change_sequence_number_(SequenceNumber_t::unknown())
+                , handshake_requests_sent_(0)
             {
             }
 
@@ -394,6 +396,8 @@ class SecurityManager
 
             EventUniquePtr event_;
 
+            uint32_t handshake_requests_sent_;
+
         private:
 
             AuthenticationInfo(
@@ -404,6 +408,9 @@ class SecurityManager
 
         typedef std::unique_ptr<AuthenticationInfo> AuthUniquePtr;
 
+        static constexpr uint32_t INITIAL_RESEND_HANDSHAKE_MILLISECS = 125;
+        static constexpr uint32_t MAX_HANDSHAKE_REQUESTS = 5;
+
         DiscoveredParticipantInfo(
                 AuthenticationStatus auth_status,
                 const ParticipantProxyData& participant_data)
@@ -493,6 +500,20 @@ class SecurityManager
                 const GUID_t& adjusted,
                 const GUID_t& original);
 
+        AuthenticationStatus get_auth_status() const
+        {
+            std::lock_guard<std::mutex> g(mtx_);
+            if (auth_.get() != nullptr)
+            {
+                return auth_->auth_status_;
+            }
+            else
+            {
+                return AUTHENTICATION_NOT_AVAILABLE;
+            }
+
+        }
+
     private:
 
         DiscoveredParticipantInfo(
@@ -738,6 +759,16 @@ class SecurityManager
     void resend_handshake_message_token(
             const GUID_t& remote_participant_key) const;
 
+    /**
+     * Determines de action to do when validation process fails
+     * @param participant_data ParticipantProxyData& exchange partner
+     * @param exception Exception to generate (if any)
+     * @return true if this participant should be considered as authenticated
+     */
+    void on_validation_failed(
+            const ParticipantProxyData& participant_data,
+            const SecurityException& exception) const;
+
     RTPSParticipantImpl* participant_;
     StatelessWriter* participant_stateless_message_writer_;
     WriterHistory* participant_stateless_message_writer_history_;
diff --git a/src/cpp/security/accesscontrol/Permissions.cpp b/src/cpp/security/accesscontrol/Permissions.cpp
index 69d8794ccdc..846bd8899e1 100644
--- a/src/cpp/security/accesscontrol/Permissions.cpp
+++ b/src/cpp/security/accesscontrol/Permissions.cpp
@@ -686,6 +686,21 @@ static bool check_subject_name(
                             plug_part_attr.is_liveliness_encrypted,
                             plug_part_attr.is_liveliness_origin_authenticated);
 
+                    if (rule.allow_unauthenticated_participants)
+                    {
+                        if (ah->governance_rule_.is_rtps_protected)
+                        {
+                            exception = _SecurityException_(
+                                "allow_unauthenticated_participants cannot be enabled if rtps_protection_kind is not none");
+                            returned_value = false;
+                            break;
+                        }
+                        else
+                        {
+                            ah->governance_rule_.allow_unauthenticated_participants = true;
+                        }
+                    }
+
                     ah->governance_rule_.plugin_participant_attributes = plug_part_attr.mask();
 
                     for (auto topic_rule : rule.topic_rules)
diff --git a/src/cpp/security/authentication/PKIDH.cpp b/src/cpp/security/authentication/PKIDH.cpp
index 16b0cec8c8e..921202fe618 100644
--- a/src/cpp/security/authentication/PKIDH.cpp
+++ b/src/cpp/security/authentication/PKIDH.cpp
@@ -1371,6 +1371,13 @@ ValidationResult_t PKIDH::begin_handshake_reply(
         return ValidationResult_t::VALIDATION_FAILED;
     }
 
+    //! Release the memory in case of having an old certificate
+    if (rih->cert_ != nullptr)
+    {
+        X509_free(rih->cert_);
+        rih->cert_ = nullptr;
+    }
+
     rih->cert_ = load_certificate(*cid);
 
     if (rih->cert_ == nullptr)
diff --git a/test/blackbox/common/BlackboxTestsSecurity.cpp b/test/blackbox/common/BlackboxTestsSecurity.cpp
index 31fb3696921..59d72ecf2b0 100644
--- a/test/blackbox/common/BlackboxTestsSecurity.cpp
+++ b/test/blackbox/common/BlackboxTestsSecurity.cpp
@@ -3486,6 +3486,188 @@ TEST_P(Security, RemoveParticipantProxyDataonSecurityManagerLeaseExpired_validat
 
 }
 
+TEST(Security, AllowUnauthenticatedParticipants_EntityCreationFailsIfRTPSProtectionIsNotNONE)
+{
+    PubSubReader<HelloWorldPubSubType> reader("HelloWorldTopic");
+    std::string governance_file("governance_allow_unauth_rtps_encrypt.smime");
+
+    PropertyPolicy property_policy;
+
+    property_policy.properties().emplace_back(Property("dds.sec.auth.plugin",
+            "builtin.PKI-DH"));
+    property_policy.properties().emplace_back(Property("dds.sec.auth.builtin.PKI-DH.identity_ca",
+            "file://" + std::string(certs_path) + "/maincacert.pem"));
+    property_policy.properties().emplace_back(Property("dds.sec.auth.builtin.PKI-DH.identity_certificate",
+            "file://" + std::string(certs_path) + "/mainsubcert.pem"));
+    property_policy.properties().emplace_back(Property("dds.sec.auth.builtin.PKI-DH.private_key",
+            "file://" + std::string(certs_path) + "/mainsubkey.pem"));
+    property_policy.properties().emplace_back(Property("dds.sec.crypto.plugin",
+            "builtin.AES-GCM-GMAC"));
+    property_policy.properties().emplace_back(Property("dds.sec.access.plugin",
+            "builtin.Access-Permissions"));
+    property_policy.properties().emplace_back(Property(
+                "dds.sec.access.builtin.Access-Permissions.permissions_ca",
+                "file://" + std::string(certs_path) + "/maincacert.pem"));
+    property_policy.properties().emplace_back(Property("dds.sec.access.builtin.Access-Permissions.governance",
+            "file://" + std::string(certs_path) + "/" + governance_file));
+    property_policy.properties().emplace_back(Property("dds.sec.access.builtin.Access-Permissions.permissions",
+            "file://" + std::string(certs_path) + "/permissions_helloworld.smime"));
+
+    reader.property_policy(property_policy).init();
+
+    //! If allow_unauthenticated_participants TRUE and rtps_protection is not NONE
+    //! Entity creation must fail
+    ASSERT_FALSE(reader.isInitialized());
+}
+
+
+TEST(Security, AllowUnauthenticatedParticipants_TwoSecureParticipantsWithDifferentCertificatesAreAbleToMatch)
+{
+    //! Create
+    PubSubReader<HelloWorldPubSubType> reader("HelloWorldTopic");
+    PubSubWriter<HelloWorldPubSubType> writer("HelloWorldTopic");
+
+    PropertyPolicy pub_property_policy, sub_property_policy;
+
+    sub_property_policy.properties().emplace_back(Property("dds.sec.auth.plugin",
+            "builtin.PKI-DH"));
+    sub_property_policy.properties().emplace_back(Property("dds.sec.auth.builtin.PKI-DH.identity_ca",
+            "file://" + std::string(certs_path) + "/othercacert.pem"));
+    sub_property_policy.properties().emplace_back(Property("dds.sec.auth.builtin.PKI-DH.identity_certificate",
+            "file://" + std::string(certs_path) + "/othersubcert.pem"));
+    sub_property_policy.properties().emplace_back(Property("dds.sec.auth.builtin.PKI-DH.private_key",
+            "file://" + std::string(certs_path) + "/othersubkey.pem"));
+    sub_property_policy.properties().emplace_back(Property("dds.sec.crypto.plugin",
+            "builtin.AES-GCM-GMAC"));
+    sub_property_policy.properties().emplace_back(Property("dds.sec.access.plugin",
+            "builtin.Access-Permissions"));
+    sub_property_policy.properties().emplace_back(Property("dds.sec.access.builtin.Access-Permissions.permissions_ca",
+            "file://" + std::string(certs_path) + "/othercacert.pem"));
+    sub_property_policy.properties().emplace_back(Property("dds.sec.access.builtin.Access-Permissions.governance",
+            "file://" + std::string(certs_path) + "/governance_allow_unauth_all_disabled_access_none_other_ca.smime"));
+    sub_property_policy.properties().emplace_back(Property("dds.sec.access.builtin.Access-Permissions.permissions",
+            "file://" + std::string(certs_path) + "/permissions_helloworld_securehelloworld_other_ca.smime"));
+
+    reader.history_depth(10).
+            reliability(eprosima::fastrtps::RELIABLE_RELIABILITY_QOS).
+            property_policy(sub_property_policy).init();
+
+    ASSERT_TRUE(reader.isInitialized());
+
+    pub_property_policy.properties().emplace_back(Property("dds.sec.auth.plugin",
+            "builtin.PKI-DH"));
+    pub_property_policy.properties().emplace_back(Property("dds.sec.auth.builtin.PKI-DH.identity_ca",
+            "file://" + std::string(certs_path) + "/maincacert.pem"));
+    pub_property_policy.properties().emplace_back(Property("dds.sec.auth.builtin.PKI-DH.identity_certificate",
+            "file://" + std::string(certs_path) + "/mainpubcert.pem"));
+    pub_property_policy.properties().emplace_back(Property("dds.sec.auth.builtin.PKI-DH.private_key",
+            "file://" + std::string(certs_path) + "/mainpubkey.pem"));
+    pub_property_policy.properties().emplace_back(Property("dds.sec.crypto.plugin",
+            "builtin.AES-GCM-GMAC"));
+    pub_property_policy.properties().emplace_back(Property("dds.sec.access.plugin",
+            "builtin.Access-Permissions"));
+    pub_property_policy.properties().emplace_back(Property("dds.sec.access.builtin.Access-Permissions.permissions_ca",
+            "file://" + std::string(certs_path) + "/maincacert.pem"));
+    pub_property_policy.properties().emplace_back(Property("dds.sec.access.builtin.Access-Permissions.governance",
+            "file://" + std::string(certs_path) + "/governance_allow_unauth_all_disabled_access_none.smime"));
+    pub_property_policy.properties().emplace_back(Property("dds.sec.access.builtin.Access-Permissions.permissions",
+            "file://" + std::string(certs_path) + "/permissions_helloworld_securehelloworld.smime"));
+
+    writer.history_depth(10).
+            reliability(eprosima::fastrtps::RELIABLE_RELIABILITY_QOS).
+            property_policy(pub_property_policy).init();
+
+    ASSERT_TRUE(writer.isInitialized());
+
+    //! Wait enough time for the PKI requests to time out and give validation_failed (~15secs)
+    writer.wait_discovery(std::chrono::seconds(20));
+
+    //! check that the writer matches the reader because of having allow_unauthenticated_participants enabled
+    ASSERT_TRUE(writer.get_matched());
+
+    //! Data is correctly sent and received
+    auto data = default_helloworld_data_generator();
+
+    reader.startReception(data);
+
+    writer.send(data);
+
+    // In this test all data should be sent.
+    ASSERT_TRUE(data.empty());
+
+    // Block reader until reception finished or timeout.
+    reader.block_for_all();
+
+}
+
+TEST(Security, AllowUnauthenticatedParticipants_TwoParticipantsDifferentCertificatesWithReadWriteProtectionDoNotMatch)
+{
+    //! Create
+    PubSubReader<HelloWorldPubSubType> reader("HelloWorldTopic");
+    PubSubWriter<HelloWorldPubSubType> writer("HelloWorldTopic");
+
+    PropertyPolicy pub_property_policy, sub_property_policy;
+
+    sub_property_policy.properties().emplace_back(Property("dds.sec.auth.plugin",
+            "builtin.PKI-DH"));
+    sub_property_policy.properties().emplace_back(Property("dds.sec.auth.builtin.PKI-DH.identity_ca",
+            "file://" + std::string(certs_path) + "/othercacert.pem"));
+    sub_property_policy.properties().emplace_back(Property("dds.sec.auth.builtin.PKI-DH.identity_certificate",
+            "file://" + std::string(certs_path) + "/othersubcert.pem"));
+    sub_property_policy.properties().emplace_back(Property("dds.sec.auth.builtin.PKI-DH.private_key",
+            "file://" + std::string(certs_path) + "/othersubkey.pem"));
+    sub_property_policy.properties().emplace_back(Property("dds.sec.crypto.plugin",
+            "builtin.AES-GCM-GMAC"));
+    sub_property_policy.properties().emplace_back(Property("dds.sec.access.plugin",
+            "builtin.Access-Permissions"));
+    sub_property_policy.properties().emplace_back(Property("dds.sec.access.builtin.Access-Permissions.permissions_ca",
+            "file://" + std::string(certs_path) + "/othercacert.pem"));
+    sub_property_policy.properties().emplace_back(Property("dds.sec.access.builtin.Access-Permissions.governance",
+            "file://" + std::string(certs_path) +
+            "/governance_allow_unauth_all_disabled_read_write_enabled_other_ca.smime"));
+    sub_property_policy.properties().emplace_back(Property("dds.sec.access.builtin.Access-Permissions.permissions",
+            "file://" + std::string(certs_path) + "/permissions_helloworld_securehelloworld_other_ca.smime"));
+
+    reader.history_depth(10).
+            reliability(eprosima::fastrtps::RELIABLE_RELIABILITY_QOS).
+            property_policy(sub_property_policy).init();
+
+    ASSERT_TRUE(reader.isInitialized());
+
+    pub_property_policy.properties().emplace_back(Property("dds.sec.auth.plugin",
+            "builtin.PKI-DH"));
+    pub_property_policy.properties().emplace_back(Property("dds.sec.auth.builtin.PKI-DH.identity_ca",
+            "file://" + std::string(certs_path) + "/maincacert.pem"));
+    pub_property_policy.properties().emplace_back(Property("dds.sec.auth.builtin.PKI-DH.identity_certificate",
+            "file://" + std::string(certs_path) + "/mainpubcert.pem"));
+    pub_property_policy.properties().emplace_back(Property("dds.sec.auth.builtin.PKI-DH.private_key",
+            "file://" + std::string(certs_path) + "/mainpubkey.pem"));
+    pub_property_policy.properties().emplace_back(Property("dds.sec.crypto.plugin",
+            "builtin.AES-GCM-GMAC"));
+    pub_property_policy.properties().emplace_back(Property("dds.sec.access.plugin",
+            "builtin.Access-Permissions"));
+    pub_property_policy.properties().emplace_back(Property("dds.sec.access.builtin.Access-Permissions.permissions_ca",
+            "file://" + std::string(certs_path) + "/maincacert.pem"));
+    pub_property_policy.properties().emplace_back(Property("dds.sec.access.builtin.Access-Permissions.governance",
+            "file://" + std::string(certs_path) + "/governance_allow_unauth_all_disabled_read_write_enabled.smime"));
+    pub_property_policy.properties().emplace_back(Property("dds.sec.access.builtin.Access-Permissions.permissions",
+            "file://" + std::string(certs_path) + "/permissions_helloworld_securehelloworld.smime"));
+
+    writer.history_depth(10).
+            reliability(eprosima::fastrtps::RELIABLE_RELIABILITY_QOS).
+            property_policy(pub_property_policy).init();
+
+    ASSERT_TRUE(writer.isInitialized());
+
+    //! Wait enough time for the PKI requests to time out and give validation_failed (~15secs)
+    writer.wait_discovery(std::chrono::seconds(20));
+
+    //! check that the writer does not match the reader because of
+    //! having read and write protection enabled
+    //! despite allow_unauthenticated_participants is enabled
+    ASSERT_FALSE(writer.get_matched());
+}
+
 // *INDENT-OFF*
 TEST_P(Security, BuiltinAuthenticationAndAccessAndCryptoPlugin_PermissionsDisableDiscoveryDisableAccessEncrypt_validation_ok_enable_discovery_enable_access_encrypt)
 // *INDENT-ON*
diff --git a/test/certs/certs/AE7BAD8C075AEAF8.pem b/test/certs/certs/AE7BAD8C075AEAF8.pem
new file mode 100644
index 00000000000..b3f96cb1364
--- /dev/null
+++ b/test/certs/certs/AE7BAD8C075AEAF8.pem
@@ -0,0 +1,50 @@
+Certificate:
+    Data:
+        Version: 3 (0x2)
+        Serial Number:
+            ae:7b:ad:8c:07:5a:ea:f8
+        Signature Algorithm: ecdsa-with-SHA256
+        Issuer: C=ES, ST=MA, L=Tres Cantos, O=eProsima, OU=eProsima, CN=eProsima Other Test CA/emailAddress=otherca@eprosima.com
+        Validity
+            Not Before: Mar 30 10:38:52 2023 GMT
+            Not After : Mar 27 10:38:52 2033 GMT
+        Subject: C=ES, ST=MA, O=eProsima, OU=eProsima, CN=Other Subscriber/emailAddress=othersub@eprosima.com
+        Subject Public Key Info:
+            Public Key Algorithm: id-ecPublicKey
+                Public-Key: (256 bit)
+                pub:
+                    04:3a:9b:41:92:b8:82:1d:c3:be:39:f6:b3:73:3c:
+                    e6:e2:17:dc:17:ab:86:ef:6b:6a:35:5a:00:a8:da:
+                    dc:b2:19:1f:c6:8f:93:b6:b7:c9:5f:13:0e:20:fa:
+                    66:a1:30:95:82:59:be:b8:3b:1b:8a:80:de:da:86:
+                    32:db:ce:4e:2c
+                ASN1 OID: prime256v1
+                NIST CURVE: P-256
+        X509v3 extensions:
+            X509v3 Basic Constraints: 
+                CA:FALSE
+            X509v3 Subject Key Identifier: 
+                B1:50:10:A4:24:85:09:85:E9:85:ED:76:6D:FE:00:10:2C:79:09:18
+            X509v3 Authority Key Identifier: 
+                C9:02:C8:50:0E:0C:A8:D5:FA:3A:61:F4:DE:9E:BC:03:D7:F1:A9:F8
+    Signature Algorithm: ecdsa-with-SHA256
+    Signature Value:
+        30:44:02:20:56:55:cc:e5:c8:e3:b0:f2:b2:b6:60:06:64:cd:
+        d8:a9:09:ac:60:c8:8f:22:fe:89:cf:70:90:f8:51:a5:9d:6e:
+        02:20:6e:5d:a5:8c:de:87:26:47:fb:6d:56:cd:d3:9e:d0:55:
+        15:d9:eb:aa:0f:02:b6:d3:d3:18:2e:34:f1:cc:05:fb
+-----BEGIN CERTIFICATE-----
+MIICYjCCAgmgAwIBAgIJAK57rYwHWur4MAoGCCqGSM49BAMCMIGcMQswCQYDVQQG
+EwJFUzELMAkGA1UECAwCTUExFDASBgNVBAcMC1RyZXMgQ2FudG9zMREwDwYDVQQK
+DAhlUHJvc2ltYTERMA8GA1UECwwIZVByb3NpbWExHzAdBgNVBAMMFmVQcm9zaW1h
+IE90aGVyIFRlc3QgQ0ExIzAhBgkqhkiG9w0BCQEWFG90aGVyY2FAZXByb3NpbWEu
+Y29tMB4XDTIzMDMzMDEwMzg1MloXDTMzMDMyNzEwMzg1MlowgYExCzAJBgNVBAYT
+AkVTMQswCQYDVQQIDAJNQTERMA8GA1UECgwIZVByb3NpbWExETAPBgNVBAsMCGVQ
+cm9zaW1hMRkwFwYDVQQDDBBPdGhlciBTdWJzY3JpYmVyMSQwIgYJKoZIhvcNAQkB
+FhVvdGhlcnN1YkBlcHJvc2ltYS5jb20wWTATBgcqhkjOPQIBBggqhkjOPQMBBwNC
+AAQ6m0GSuIIdw7459rNzPObiF9wXq4bva2o1WgCo2tyyGR/Gj5O2t8lfEw4g+mah
+MJWCWb64OxuKgN7ahjLbzk4so00wSzAJBgNVHRMEAjAAMB0GA1UdDgQWBBSxUBCk
+JIUJhemF7XZt/gAQLHkJGDAfBgNVHSMEGDAWgBTJAshQDgyo1fo6YfTenrwD1/Gp
++DAKBggqhkjOPQQDAgNHADBEAiBWVczlyOOw8rK2YAZkzdipCaxgyI8i/onPcJD4
+UaWdbgIgbl2ljN6HJkf7bVbN057QVRXZ66oPArbT0xguNPHMBfs=
+-----END CERTIFICATE-----
diff --git a/test/certs/ecdsaparam b/test/certs/ecdsaparam
new file mode 100644
index 00000000000..a76e47d9590
--- /dev/null
+++ b/test/certs/ecdsaparam
@@ -0,0 +1,3 @@
+-----BEGIN EC PARAMETERS-----
+BggqhkjOPQMBBw==
+-----END EC PARAMETERS-----
diff --git a/test/certs/governance_allow_unauth_all_disabled_access_none.smime b/test/certs/governance_allow_unauth_all_disabled_access_none.smime
new file mode 100644
index 00000000000..3aaf0cb51d7
--- /dev/null
+++ b/test/certs/governance_allow_unauth_all_disabled_access_none.smime
@@ -0,0 +1,81 @@
+MIME-Version: 1.0
+Content-Type: multipart/signed; protocol="application/x-pkcs7-signature"; micalg="sha-256"; boundary="----07F90FA59E370A2EF867E7C0D6A4B808"
+
+This is an S/MIME signed message
+
+------07F90FA59E370A2EF867E7C0D6A4B808
+Content-Type: text/plain
+
+<?xml version="1.0" encoding="utf-8"?>
+<dds xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+    xsi:noNamespaceSchemaLocation="omg_shared_ca_domain_governance.xsd">
+    <domain_access_rules>
+        <domain_rule>
+            <domains>
+                <id_range>
+                    <min>0</min>
+                    <max>230</max>
+                </id_range>
+            </domains>
+            <allow_unauthenticated_participants>true</allow_unauthenticated_participants>
+            <enable_join_access_control>true</enable_join_access_control>
+            <discovery_protection_kind>NONE</discovery_protection_kind>
+            <liveliness_protection_kind>NONE</liveliness_protection_kind>
+            <rtps_protection_kind>NONE</rtps_protection_kind>
+            <topic_access_rules>
+                <topic_rule>
+                    <topic_expression>HelloWorldTopic_*</topic_expression>
+                    <enable_discovery_protection>false</enable_discovery_protection>
+                    <enable_liveliness_protection>false</enable_liveliness_protection>
+                    <enable_read_access_control>false</enable_read_access_control>
+                    <enable_write_access_control>false</enable_write_access_control>
+                    <metadata_protection_kind>NONE</metadata_protection_kind>
+                    <data_protection_kind>NONE</data_protection_kind>
+                </topic_rule>
+                <topic_rule>
+                    <topic_expression>SecureHelloWorldTopic_*</topic_expression>
+                    <enable_discovery_protection>true</enable_discovery_protection>
+                    <enable_liveliness_protection>true</enable_liveliness_protection>
+                    <enable_read_access_control>true</enable_read_access_control>
+                    <enable_write_access_control>true</enable_write_access_control>
+                    <metadata_protection_kind>ENCRYPT</metadata_protection_kind>
+                    <data_protection_kind>ENCRYPT</data_protection_kind>
+                </topic_rule>
+            </topic_access_rules>
+        </domain_rule>
+    </domain_access_rules>
+</dds>
+
+
+------07F90FA59E370A2EF867E7C0D6A4B808
+Content-Type: application/x-pkcs7-signature; name="smime.p7s"
+Content-Transfer-Encoding: base64
+Content-Disposition: attachment; filename="smime.p7s"
+
+MIIEeAYJKoZIhvcNAQcCoIIEaTCCBGUCAQExDzANBglghkgBZQMEAgEFADALBgkq
+hkiG9w0BBwGgggJAMIICPDCCAeOgAwIBAgIJALZwpgo2sxthMAoGCCqGSM49BAMC
+MIGaMQswCQYDVQQGEwJFUzELMAkGA1UECAwCTUExFDASBgNVBAcMC1RyZXMgQ2Fu
+dG9zMREwDwYDVQQKDAhlUHJvc2ltYTERMA8GA1UECwwIZVByb3NpbWExHjAcBgNV
+BAMMFWVQcm9zaW1hIE1haW4gVGVzdCBDQTEiMCAGCSqGSIb3DQEJARYTbWFpbmNh
+QGVwcm9zaW1hLmNvbTAeFw0xNzA5MDYwOTAzMDNaFw0yNzA5MDQwOTAzMDNaMIGa
+MQswCQYDVQQGEwJFUzELMAkGA1UECAwCTUExFDASBgNVBAcMC1RyZXMgQ2FudG9z
+MREwDwYDVQQKDAhlUHJvc2ltYTERMA8GA1UECwwIZVByb3NpbWExHjAcBgNVBAMM
+FWVQcm9zaW1hIE1haW4gVGVzdCBDQTEiMCAGCSqGSIb3DQEJARYTbWFpbmNhQGVw
+cm9zaW1hLmNvbTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABGLlhB3WQ8l1fpUE
+3DfOoulA/de38Zfj7hmpKtOnxiH2q6RJbwhxvJeA7R7mkmAKaJKmzx695BjyiXVS
+7bE7vgejEDAOMAwGA1UdEwQFMAMBAf8wCgYIKoZIzj0EAwIDRwAwRAIgVTY1BEvT
+4pw3GyBMzaUqmp69wi0kBkyOgq04OhyJ13UCICR125vvt0fUhXsXaxOAx28E4Ac9
+SVxpI+3UYs2kV5n0MYIB/DCCAfgCAQEwgagwgZoxCzAJBgNVBAYTAkVTMQswCQYD
+VQQIDAJNQTEUMBIGA1UEBwwLVHJlcyBDYW50b3MxETAPBgNVBAoMCGVQcm9zaW1h
+MREwDwYDVQQLDAhlUHJvc2ltYTEeMBwGA1UEAwwVZVByb3NpbWEgTWFpbiBUZXN0
+IENBMSIwIAYJKoZIhvcNAQkBFhNtYWluY2FAZXByb3NpbWEuY29tAgkAtnCmCjaz
+G2EwDQYJYIZIAWUDBAIBBQCggeQwGAYJKoZIhvcNAQkDMQsGCSqGSIb3DQEHATAc
+BgkqhkiG9w0BCQUxDxcNMjMwMzE1MTY0ODE1WjAvBgkqhkiG9w0BCQQxIgQg1ek7
+kqX+LeAjblegjkGzgLhTHt4UJqAQn3guyk7zRYoweQYJKoZIhvcNAQkPMWwwajAL
+BglghkgBZQMEASowCwYJYIZIAWUDBAEWMAsGCWCGSAFlAwQBAjAKBggqhkiG9w0D
+BzAOBggqhkiG9w0DAgICAIAwDQYIKoZIhvcNAwICAUAwBwYFKw4DAgcwDQYIKoZI
+hvcNAwICASgwCgYIKoZIzj0EAwIERjBEAiAOVigzipHvxmZbFrYr68UqhwWK/LN9
+LKf8yqdHayE8FwIgW7OzRraUcmR3Nh9LQaVEpWFphgIGhIn0uDocXsUfeCs=
+
+------07F90FA59E370A2EF867E7C0D6A4B808--
+
diff --git a/test/certs/governance_allow_unauth_all_disabled_access_none.xml b/test/certs/governance_allow_unauth_all_disabled_access_none.xml
new file mode 100644
index 00000000000..d55609663e7
--- /dev/null
+++ b/test/certs/governance_allow_unauth_all_disabled_access_none.xml
@@ -0,0 +1,40 @@
+<?xml version="1.0" encoding="utf-8"?>
+<dds xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+    xsi:noNamespaceSchemaLocation="omg_shared_ca_domain_governance.xsd">
+    <domain_access_rules>
+        <domain_rule>
+            <domains>
+                <id_range>
+                    <min>0</min>
+                    <max>230</max>
+                </id_range>
+            </domains>
+            <allow_unauthenticated_participants>true</allow_unauthenticated_participants>
+            <enable_join_access_control>true</enable_join_access_control>
+            <discovery_protection_kind>NONE</discovery_protection_kind>
+            <liveliness_protection_kind>NONE</liveliness_protection_kind>
+            <rtps_protection_kind>NONE</rtps_protection_kind>
+            <topic_access_rules>
+                <topic_rule>
+                    <topic_expression>HelloWorldTopic_*</topic_expression>
+                    <enable_discovery_protection>false</enable_discovery_protection>
+                    <enable_liveliness_protection>false</enable_liveliness_protection>
+                    <enable_read_access_control>false</enable_read_access_control>
+                    <enable_write_access_control>false</enable_write_access_control>
+                    <metadata_protection_kind>NONE</metadata_protection_kind>
+                    <data_protection_kind>NONE</data_protection_kind>
+                </topic_rule>
+                <topic_rule>
+                    <topic_expression>SecureHelloWorldTopic_*</topic_expression>
+                    <enable_discovery_protection>true</enable_discovery_protection>
+                    <enable_liveliness_protection>true</enable_liveliness_protection>
+                    <enable_read_access_control>true</enable_read_access_control>
+                    <enable_write_access_control>true</enable_write_access_control>
+                    <metadata_protection_kind>ENCRYPT</metadata_protection_kind>
+                    <data_protection_kind>ENCRYPT</data_protection_kind>
+                </topic_rule>
+            </topic_access_rules>
+        </domain_rule>
+    </domain_access_rules>
+</dds>
+
diff --git a/test/certs/governance_allow_unauth_all_disabled_access_none_other_ca.smime b/test/certs/governance_allow_unauth_all_disabled_access_none_other_ca.smime
new file mode 100644
index 00000000000..ed53af0d575
--- /dev/null
+++ b/test/certs/governance_allow_unauth_all_disabled_access_none_other_ca.smime
@@ -0,0 +1,83 @@
+MIME-Version: 1.0
+Content-Type: multipart/signed; protocol="application/x-pkcs7-signature"; micalg="sha-256"; boundary="----3ED8A7B5D8704D95C963ADF84CBA4013"
+
+This is an S/MIME signed message
+
+------3ED8A7B5D8704D95C963ADF84CBA4013
+Content-Type: text/plain
+
+<?xml version="1.0" encoding="utf-8"?>
+<dds xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+    xsi:noNamespaceSchemaLocation="omg_shared_ca_domain_governance.xsd">
+    <domain_access_rules>
+        <domain_rule>
+            <domains>
+                <id_range>
+                    <min>0</min>
+                    <max>230</max>
+                </id_range>
+            </domains>
+            <allow_unauthenticated_participants>true</allow_unauthenticated_participants>
+            <enable_join_access_control>true</enable_join_access_control>
+            <discovery_protection_kind>NONE</discovery_protection_kind>
+            <liveliness_protection_kind>NONE</liveliness_protection_kind>
+            <rtps_protection_kind>NONE</rtps_protection_kind>
+            <topic_access_rules>
+                <topic_rule>
+                    <topic_expression>HelloWorldTopic_*</topic_expression>
+                    <enable_discovery_protection>false</enable_discovery_protection>
+                    <enable_liveliness_protection>false</enable_liveliness_protection>
+                    <enable_read_access_control>false</enable_read_access_control>
+                    <enable_write_access_control>false</enable_write_access_control>
+                    <metadata_protection_kind>NONE</metadata_protection_kind>
+                    <data_protection_kind>NONE</data_protection_kind>
+                </topic_rule>
+                <topic_rule>
+                    <topic_expression>SecureHelloWorldTopic_*</topic_expression>
+                    <enable_discovery_protection>true</enable_discovery_protection>
+                    <enable_liveliness_protection>true</enable_liveliness_protection>
+                    <enable_read_access_control>true</enable_read_access_control>
+                    <enable_write_access_control>true</enable_write_access_control>
+                    <metadata_protection_kind>ENCRYPT</metadata_protection_kind>
+                    <data_protection_kind>ENCRYPT</data_protection_kind>
+                </topic_rule>
+            </topic_access_rules>
+        </domain_rule>
+    </domain_access_rules>
+</dds>
+
+
+------3ED8A7B5D8704D95C963ADF84CBA4013
+Content-Type: application/x-pkcs7-signature; name="smime.p7s"
+Content-Transfer-Encoding: base64
+Content-Disposition: attachment; filename="smime.p7s"
+
+MIIEtAYJKoZIhvcNAQcCoIIEpTCCBKECAQExDzANBglghkgBZQMEAgEFADALBgkq
+hkiG9w0BBwGgggJuMIICajCCAhGgAwIBAgIUcsQhk60Hd3DBT+O8EmRXlj8CSf8w
+CgYIKoZIzj0EAwIwgZwxCzAJBgNVBAYTAkVTMQswCQYDVQQIDAJNQTEUMBIGA1UE
+BwwLVHJlcyBDYW50b3MxETAPBgNVBAoMCGVQcm9zaW1hMREwDwYDVQQLDAhlUHJv
+c2ltYTEfMB0GA1UEAwwWZVByb3NpbWEgT3RoZXIgVGVzdCBDQTEjMCEGCSqGSIb3
+DQEJARYUb3RoZXJjYUBlcHJvc2ltYS5jb20wHhcNMjMwMzMwMTAzNTAyWhcNMzMw
+MzI3MTAzNTAyWjCBnDELMAkGA1UEBhMCRVMxCzAJBgNVBAgMAk1BMRQwEgYDVQQH
+DAtUcmVzIENhbnRvczERMA8GA1UECgwIZVByb3NpbWExETAPBgNVBAsMCGVQcm9z
+aW1hMR8wHQYDVQQDDBZlUHJvc2ltYSBPdGhlciBUZXN0IENBMSMwIQYJKoZIhvcN
+AQkBFhRvdGhlcmNhQGVwcm9zaW1hLmNvbTBZMBMGByqGSM49AgEGCCqGSM49AwEH
+A0IABE43rFtDDe1JkOMvvGAE7qKIvwRw5RT1W0EGijZiR2pj/RZ184KuxajfOLGY
+RXOa4J93e33h3mmqrDUFrieMqoyjLzAtMAwGA1UdEwQFMAMBAf8wHQYDVR0OBBYE
+FMkCyFAODKjV+jph9N6evAPX8an4MAoGCCqGSM49BAMCA0cAMEQCIAOLdnOdkQla
+8/ziYXxwU2VyN/iEgznWtvSH91sa1w2iAiAVwQ2wHaEh1SGrrgAt68LbmY1XRrFU
+KqF+dVwAw95t1zGCAgowggIGAgEBMIG1MIGcMQswCQYDVQQGEwJFUzELMAkGA1UE
+CAwCTUExFDASBgNVBAcMC1RyZXMgQ2FudG9zMREwDwYDVQQKDAhlUHJvc2ltYTER
+MA8GA1UECwwIZVByb3NpbWExHzAdBgNVBAMMFmVQcm9zaW1hIE90aGVyIFRlc3Qg
+Q0ExIzAhBgkqhkiG9w0BCQEWFG90aGVyY2FAZXByb3NpbWEuY29tAhRyxCGTrQd3
+cMFP47wSZFeWPwJJ/zANBglghkgBZQMEAgEFAKCB5DAYBgkqhkiG9w0BCQMxCwYJ
+KoZIhvcNAQcBMBwGCSqGSIb3DQEJBTEPFw0yMzAzMzAxMDUzNDFaMC8GCSqGSIb3
+DQEJBDEiBCDV6TuSpf4t4CNuV6COQbOAuFMe3hQmoBCfeC7KTvNFijB5BgkqhkiG
+9w0BCQ8xbDBqMAsGCWCGSAFlAwQBKjALBglghkgBZQMEARYwCwYJYIZIAWUDBAEC
+MAoGCCqGSIb3DQMHMA4GCCqGSIb3DQMCAgIAgDANBggqhkiG9w0DAgIBQDAHBgUr
+DgMCBzANBggqhkiG9w0DAgIBKDAKBggqhkjOPQQDAgRHMEUCIC/wGlgiP0Mqwk9Q
++av8l4t+tf1ahpkdQEfi2wm74LM8AiEAgI/H2cMIbfrDX5fHFWxmSBb3zGMlYTxB
+nRx2oh22H+s=
+
+------3ED8A7B5D8704D95C963ADF84CBA4013--
+
diff --git a/test/certs/governance_allow_unauth_all_disabled_read_write_enabled.smime b/test/certs/governance_allow_unauth_all_disabled_read_write_enabled.smime
new file mode 100644
index 00000000000..64a1ed39fec
--- /dev/null
+++ b/test/certs/governance_allow_unauth_all_disabled_read_write_enabled.smime
@@ -0,0 +1,81 @@
+MIME-Version: 1.0
+Content-Type: multipart/signed; protocol="application/x-pkcs7-signature"; micalg="sha-256"; boundary="----77582BDA36A49813FB5820ED62BE0CF5"
+
+This is an S/MIME signed message
+
+------77582BDA36A49813FB5820ED62BE0CF5
+Content-Type: text/plain
+
+<?xml version="1.0" encoding="utf-8"?>
+<dds xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+    xsi:noNamespaceSchemaLocation="omg_shared_ca_domain_governance.xsd">
+    <domain_access_rules>
+        <domain_rule>
+            <domains>
+                <id_range>
+                    <min>0</min>
+                    <max>230</max>
+                </id_range>
+            </domains>
+            <allow_unauthenticated_participants>true</allow_unauthenticated_participants>
+            <enable_join_access_control>true</enable_join_access_control>
+            <discovery_protection_kind>NONE</discovery_protection_kind>
+            <liveliness_protection_kind>NONE</liveliness_protection_kind>
+            <rtps_protection_kind>NONE</rtps_protection_kind>
+            <topic_access_rules>
+                <topic_rule>
+                    <topic_expression>HelloWorldTopic_*</topic_expression>
+                    <enable_discovery_protection>false</enable_discovery_protection>
+                    <enable_liveliness_protection>false</enable_liveliness_protection>
+                    <enable_read_access_control>true</enable_read_access_control>
+                    <enable_write_access_control>true</enable_write_access_control>
+                    <metadata_protection_kind>NONE</metadata_protection_kind>
+                    <data_protection_kind>NONE</data_protection_kind>
+                </topic_rule>
+                <topic_rule>
+                    <topic_expression>SecureHelloWorldTopic_*</topic_expression>
+                    <enable_discovery_protection>true</enable_discovery_protection>
+                    <enable_liveliness_protection>true</enable_liveliness_protection>
+                    <enable_read_access_control>true</enable_read_access_control>
+                    <enable_write_access_control>true</enable_write_access_control>
+                    <metadata_protection_kind>ENCRYPT</metadata_protection_kind>
+                    <data_protection_kind>ENCRYPT</data_protection_kind>
+                </topic_rule>
+            </topic_access_rules>
+        </domain_rule>
+    </domain_access_rules>
+</dds>
+
+
+------77582BDA36A49813FB5820ED62BE0CF5
+Content-Type: application/x-pkcs7-signature; name="smime.p7s"
+Content-Transfer-Encoding: base64
+Content-Disposition: attachment; filename="smime.p7s"
+
+MIIEeAYJKoZIhvcNAQcCoIIEaTCCBGUCAQExDzANBglghkgBZQMEAgEFADALBgkq
+hkiG9w0BBwGgggJAMIICPDCCAeOgAwIBAgIJALZwpgo2sxthMAoGCCqGSM49BAMC
+MIGaMQswCQYDVQQGEwJFUzELMAkGA1UECAwCTUExFDASBgNVBAcMC1RyZXMgQ2Fu
+dG9zMREwDwYDVQQKDAhlUHJvc2ltYTERMA8GA1UECwwIZVByb3NpbWExHjAcBgNV
+BAMMFWVQcm9zaW1hIE1haW4gVGVzdCBDQTEiMCAGCSqGSIb3DQEJARYTbWFpbmNh
+QGVwcm9zaW1hLmNvbTAeFw0xNzA5MDYwOTAzMDNaFw0yNzA5MDQwOTAzMDNaMIGa
+MQswCQYDVQQGEwJFUzELMAkGA1UECAwCTUExFDASBgNVBAcMC1RyZXMgQ2FudG9z
+MREwDwYDVQQKDAhlUHJvc2ltYTERMA8GA1UECwwIZVByb3NpbWExHjAcBgNVBAMM
+FWVQcm9zaW1hIE1haW4gVGVzdCBDQTEiMCAGCSqGSIb3DQEJARYTbWFpbmNhQGVw
+cm9zaW1hLmNvbTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABGLlhB3WQ8l1fpUE
+3DfOoulA/de38Zfj7hmpKtOnxiH2q6RJbwhxvJeA7R7mkmAKaJKmzx695BjyiXVS
+7bE7vgejEDAOMAwGA1UdEwQFMAMBAf8wCgYIKoZIzj0EAwIDRwAwRAIgVTY1BEvT
+4pw3GyBMzaUqmp69wi0kBkyOgq04OhyJ13UCICR125vvt0fUhXsXaxOAx28E4Ac9
+SVxpI+3UYs2kV5n0MYIB/DCCAfgCAQEwgagwgZoxCzAJBgNVBAYTAkVTMQswCQYD
+VQQIDAJNQTEUMBIGA1UEBwwLVHJlcyBDYW50b3MxETAPBgNVBAoMCGVQcm9zaW1h
+MREwDwYDVQQLDAhlUHJvc2ltYTEeMBwGA1UEAwwVZVByb3NpbWEgTWFpbiBUZXN0
+IENBMSIwIAYJKoZIhvcNAQkBFhNtYWluY2FAZXByb3NpbWEuY29tAgkAtnCmCjaz
+G2EwDQYJYIZIAWUDBAIBBQCggeQwGAYJKoZIhvcNAQkDMQsGCSqGSIb3DQEHATAc
+BgkqhkiG9w0BCQUxDxcNMjMwNTA0MTAwMjM2WjAvBgkqhkiG9w0BCQQxIgQgZ79K
+DzCMLm2hn/PgggsyIKV/NVBGwIIdQC+axtPeuKIweQYJKoZIhvcNAQkPMWwwajAL
+BglghkgBZQMEASowCwYJYIZIAWUDBAEWMAsGCWCGSAFlAwQBAjAKBggqhkiG9w0D
+BzAOBggqhkiG9w0DAgICAIAwDQYIKoZIhvcNAwICAUAwBwYFKw4DAgcwDQYIKoZI
+hvcNAwICASgwCgYIKoZIzj0EAwIERjBEAiAlJiKtVNPEpfkKadUXfuK9AMIrvOvs
+AQHPMEmLB9RInAIgZfXDFS+ROyE6OMcewG0SbNvbWSZi4fY+qCGAgLxJ95k=
+
+------77582BDA36A49813FB5820ED62BE0CF5--
+
diff --git a/test/certs/governance_allow_unauth_all_disabled_read_write_enabled.xml b/test/certs/governance_allow_unauth_all_disabled_read_write_enabled.xml
new file mode 100644
index 00000000000..06887b51a66
--- /dev/null
+++ b/test/certs/governance_allow_unauth_all_disabled_read_write_enabled.xml
@@ -0,0 +1,40 @@
+<?xml version="1.0" encoding="utf-8"?>
+<dds xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+    xsi:noNamespaceSchemaLocation="omg_shared_ca_domain_governance.xsd">
+    <domain_access_rules>
+        <domain_rule>
+            <domains>
+                <id_range>
+                    <min>0</min>
+                    <max>230</max>
+                </id_range>
+            </domains>
+            <allow_unauthenticated_participants>true</allow_unauthenticated_participants>
+            <enable_join_access_control>true</enable_join_access_control>
+            <discovery_protection_kind>NONE</discovery_protection_kind>
+            <liveliness_protection_kind>NONE</liveliness_protection_kind>
+            <rtps_protection_kind>NONE</rtps_protection_kind>
+            <topic_access_rules>
+                <topic_rule>
+                    <topic_expression>HelloWorldTopic_*</topic_expression>
+                    <enable_discovery_protection>false</enable_discovery_protection>
+                    <enable_liveliness_protection>false</enable_liveliness_protection>
+                    <enable_read_access_control>true</enable_read_access_control>
+                    <enable_write_access_control>true</enable_write_access_control>
+                    <metadata_protection_kind>NONE</metadata_protection_kind>
+                    <data_protection_kind>NONE</data_protection_kind>
+                </topic_rule>
+                <topic_rule>
+                    <topic_expression>SecureHelloWorldTopic_*</topic_expression>
+                    <enable_discovery_protection>true</enable_discovery_protection>
+                    <enable_liveliness_protection>true</enable_liveliness_protection>
+                    <enable_read_access_control>true</enable_read_access_control>
+                    <enable_write_access_control>true</enable_write_access_control>
+                    <metadata_protection_kind>ENCRYPT</metadata_protection_kind>
+                    <data_protection_kind>ENCRYPT</data_protection_kind>
+                </topic_rule>
+            </topic_access_rules>
+        </domain_rule>
+    </domain_access_rules>
+</dds>
+
diff --git a/test/certs/governance_allow_unauth_all_disabled_read_write_enabled_other_ca.smime b/test/certs/governance_allow_unauth_all_disabled_read_write_enabled_other_ca.smime
new file mode 100644
index 00000000000..b6c2152cbf8
--- /dev/null
+++ b/test/certs/governance_allow_unauth_all_disabled_read_write_enabled_other_ca.smime
@@ -0,0 +1,83 @@
+MIME-Version: 1.0
+Content-Type: multipart/signed; protocol="application/x-pkcs7-signature"; micalg="sha-256"; boundary="----A13F19AA13BD1B164DD2C4DA725AD0E4"
+
+This is an S/MIME signed message
+
+------A13F19AA13BD1B164DD2C4DA725AD0E4
+Content-Type: text/plain
+
+<?xml version="1.0" encoding="utf-8"?>
+<dds xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+    xsi:noNamespaceSchemaLocation="omg_shared_ca_domain_governance.xsd">
+    <domain_access_rules>
+        <domain_rule>
+            <domains>
+                <id_range>
+                    <min>0</min>
+                    <max>230</max>
+                </id_range>
+            </domains>
+            <allow_unauthenticated_participants>true</allow_unauthenticated_participants>
+            <enable_join_access_control>true</enable_join_access_control>
+            <discovery_protection_kind>NONE</discovery_protection_kind>
+            <liveliness_protection_kind>NONE</liveliness_protection_kind>
+            <rtps_protection_kind>NONE</rtps_protection_kind>
+            <topic_access_rules>
+                <topic_rule>
+                    <topic_expression>HelloWorldTopic_*</topic_expression>
+                    <enable_discovery_protection>false</enable_discovery_protection>
+                    <enable_liveliness_protection>false</enable_liveliness_protection>
+                    <enable_read_access_control>true</enable_read_access_control>
+                    <enable_write_access_control>true</enable_write_access_control>
+                    <metadata_protection_kind>NONE</metadata_protection_kind>
+                    <data_protection_kind>NONE</data_protection_kind>
+                </topic_rule>
+                <topic_rule>
+                    <topic_expression>SecureHelloWorldTopic_*</topic_expression>
+                    <enable_discovery_protection>true</enable_discovery_protection>
+                    <enable_liveliness_protection>true</enable_liveliness_protection>
+                    <enable_read_access_control>true</enable_read_access_control>
+                    <enable_write_access_control>true</enable_write_access_control>
+                    <metadata_protection_kind>ENCRYPT</metadata_protection_kind>
+                    <data_protection_kind>ENCRYPT</data_protection_kind>
+                </topic_rule>
+            </topic_access_rules>
+        </domain_rule>
+    </domain_access_rules>
+</dds>
+
+
+------A13F19AA13BD1B164DD2C4DA725AD0E4
+Content-Type: application/x-pkcs7-signature; name="smime.p7s"
+Content-Transfer-Encoding: base64
+Content-Disposition: attachment; filename="smime.p7s"
+
+MIIEswYJKoZIhvcNAQcCoIIEpDCCBKACAQExDzANBglghkgBZQMEAgEFADALBgkq
+hkiG9w0BBwGgggJuMIICajCCAhGgAwIBAgIUcsQhk60Hd3DBT+O8EmRXlj8CSf8w
+CgYIKoZIzj0EAwIwgZwxCzAJBgNVBAYTAkVTMQswCQYDVQQIDAJNQTEUMBIGA1UE
+BwwLVHJlcyBDYW50b3MxETAPBgNVBAoMCGVQcm9zaW1hMREwDwYDVQQLDAhlUHJv
+c2ltYTEfMB0GA1UEAwwWZVByb3NpbWEgT3RoZXIgVGVzdCBDQTEjMCEGCSqGSIb3
+DQEJARYUb3RoZXJjYUBlcHJvc2ltYS5jb20wHhcNMjMwMzMwMTAzNTAyWhcNMzMw
+MzI3MTAzNTAyWjCBnDELMAkGA1UEBhMCRVMxCzAJBgNVBAgMAk1BMRQwEgYDVQQH
+DAtUcmVzIENhbnRvczERMA8GA1UECgwIZVByb3NpbWExETAPBgNVBAsMCGVQcm9z
+aW1hMR8wHQYDVQQDDBZlUHJvc2ltYSBPdGhlciBUZXN0IENBMSMwIQYJKoZIhvcN
+AQkBFhRvdGhlcmNhQGVwcm9zaW1hLmNvbTBZMBMGByqGSM49AgEGCCqGSM49AwEH
+A0IABE43rFtDDe1JkOMvvGAE7qKIvwRw5RT1W0EGijZiR2pj/RZ184KuxajfOLGY
+RXOa4J93e33h3mmqrDUFrieMqoyjLzAtMAwGA1UdEwQFMAMBAf8wHQYDVR0OBBYE
+FMkCyFAODKjV+jph9N6evAPX8an4MAoGCCqGSM49BAMCA0cAMEQCIAOLdnOdkQla
+8/ziYXxwU2VyN/iEgznWtvSH91sa1w2iAiAVwQ2wHaEh1SGrrgAt68LbmY1XRrFU
+KqF+dVwAw95t1zGCAgkwggIFAgEBMIG1MIGcMQswCQYDVQQGEwJFUzELMAkGA1UE
+CAwCTUExFDASBgNVBAcMC1RyZXMgQ2FudG9zMREwDwYDVQQKDAhlUHJvc2ltYTER
+MA8GA1UECwwIZVByb3NpbWExHzAdBgNVBAMMFmVQcm9zaW1hIE90aGVyIFRlc3Qg
+Q0ExIzAhBgkqhkiG9w0BCQEWFG90aGVyY2FAZXByb3NpbWEuY29tAhRyxCGTrQd3
+cMFP47wSZFeWPwJJ/zANBglghkgBZQMEAgEFAKCB5DAYBgkqhkiG9w0BCQMxCwYJ
+KoZIhvcNAQcBMBwGCSqGSIb3DQEJBTEPFw0yMzA1MDQxMDAyMzVaMC8GCSqGSIb3
+DQEJBDEiBCBnv0oPMIwubaGf8+CCCzIgpX81UEbAgh1AL5rG0964ojB5BgkqhkiG
+9w0BCQ8xbDBqMAsGCWCGSAFlAwQBKjALBglghkgBZQMEARYwCwYJYIZIAWUDBAEC
+MAoGCCqGSIb3DQMHMA4GCCqGSIb3DQMCAgIAgDANBggqhkiG9w0DAgIBQDAHBgUr
+DgMCBzANBggqhkiG9w0DAgIBKDAKBggqhkjOPQQDAgRGMEQCIHwetUPhAcczqv0v
+PtCWxn0T0wu7YOhzZeikVX3jnOrDAiA3KOanAHgImiAu7LT24hzdzb5/SvlJdpyP
+9AEVLSBxXg==
+
+------A13F19AA13BD1B164DD2C4DA725AD0E4--
+
diff --git a/test/certs/governance_allow_unauth_rtps_encrypt.smime b/test/certs/governance_allow_unauth_rtps_encrypt.smime
new file mode 100644
index 00000000000..f61068eb1ae
--- /dev/null
+++ b/test/certs/governance_allow_unauth_rtps_encrypt.smime
@@ -0,0 +1,72 @@
+MIME-Version: 1.0
+Content-Type: multipart/signed; protocol="application/x-pkcs7-signature"; micalg="sha-256"; boundary="----06C7B0902A68A04AC5257355D1B00FFD"
+
+This is an S/MIME signed message
+
+------06C7B0902A68A04AC5257355D1B00FFD
+Content-Type: text/plain
+
+<?xml version="1.0" encoding="utf-8"?>
+<dds xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+    xsi:noNamespaceSchemaLocation="omg_shared_ca_domain_governance.xsd">
+    <domain_access_rules>
+        <domain_rule>
+            <domains>
+                <id_range>
+                    <min>0</min>
+                    <max>230</max>
+                </id_range>
+            </domains>
+            <allow_unauthenticated_participants>true</allow_unauthenticated_participants>
+            <enable_join_access_control>true</enable_join_access_control>
+            <discovery_protection_kind>NONE</discovery_protection_kind>
+            <liveliness_protection_kind>NONE</liveliness_protection_kind>
+            <rtps_protection_kind>ENCRYPT</rtps_protection_kind>
+            <topic_access_rules>
+                <topic_rule>
+                    <topic_expression>HelloWorldTopic_*</topic_expression>
+                    <enable_discovery_protection>false</enable_discovery_protection>
+                    <enable_liveliness_protection>false</enable_liveliness_protection>
+                    <enable_read_access_control>false</enable_read_access_control>
+                    <enable_write_access_control>false</enable_write_access_control>
+                    <metadata_protection_kind>NONE</metadata_protection_kind>
+                    <data_protection_kind>NONE</data_protection_kind>
+                </topic_rule>
+            </topic_access_rules>
+        </domain_rule>
+    </domain_access_rules>
+</dds>
+
+
+------06C7B0902A68A04AC5257355D1B00FFD
+Content-Type: application/x-pkcs7-signature; name="smime.p7s"
+Content-Transfer-Encoding: base64
+Content-Disposition: attachment; filename="smime.p7s"
+
+MIIEeQYJKoZIhvcNAQcCoIIEajCCBGYCAQExDzANBglghkgBZQMEAgEFADALBgkq
+hkiG9w0BBwGgggJAMIICPDCCAeOgAwIBAgIJALZwpgo2sxthMAoGCCqGSM49BAMC
+MIGaMQswCQYDVQQGEwJFUzELMAkGA1UECAwCTUExFDASBgNVBAcMC1RyZXMgQ2Fu
+dG9zMREwDwYDVQQKDAhlUHJvc2ltYTERMA8GA1UECwwIZVByb3NpbWExHjAcBgNV
+BAMMFWVQcm9zaW1hIE1haW4gVGVzdCBDQTEiMCAGCSqGSIb3DQEJARYTbWFpbmNh
+QGVwcm9zaW1hLmNvbTAeFw0xNzA5MDYwOTAzMDNaFw0yNzA5MDQwOTAzMDNaMIGa
+MQswCQYDVQQGEwJFUzELMAkGA1UECAwCTUExFDASBgNVBAcMC1RyZXMgQ2FudG9z
+MREwDwYDVQQKDAhlUHJvc2ltYTERMA8GA1UECwwIZVByb3NpbWExHjAcBgNVBAMM
+FWVQcm9zaW1hIE1haW4gVGVzdCBDQTEiMCAGCSqGSIb3DQEJARYTbWFpbmNhQGVw
+cm9zaW1hLmNvbTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABGLlhB3WQ8l1fpUE
+3DfOoulA/de38Zfj7hmpKtOnxiH2q6RJbwhxvJeA7R7mkmAKaJKmzx695BjyiXVS
+7bE7vgejEDAOMAwGA1UdEwQFMAMBAf8wCgYIKoZIzj0EAwIDRwAwRAIgVTY1BEvT
+4pw3GyBMzaUqmp69wi0kBkyOgq04OhyJ13UCICR125vvt0fUhXsXaxOAx28E4Ac9
+SVxpI+3UYs2kV5n0MYIB/TCCAfkCAQEwgagwgZoxCzAJBgNVBAYTAkVTMQswCQYD
+VQQIDAJNQTEUMBIGA1UEBwwLVHJlcyBDYW50b3MxETAPBgNVBAoMCGVQcm9zaW1h
+MREwDwYDVQQLDAhlUHJvc2ltYTEeMBwGA1UEAwwVZVByb3NpbWEgTWFpbiBUZXN0
+IENBMSIwIAYJKoZIhvcNAQkBFhNtYWluY2FAZXByb3NpbWEuY29tAgkAtnCmCjaz
+G2EwDQYJYIZIAWUDBAIBBQCggeQwGAYJKoZIhvcNAQkDMQsGCSqGSIb3DQEHATAc
+BgkqhkiG9w0BCQUxDxcNMjMwMzMwMDc1ODA5WjAvBgkqhkiG9w0BCQQxIgQgzbZr
+hcFcbxFu5gTUSsnzK+W//fbgIP/6XLX5Y7ZlP6oweQYJKoZIhvcNAQkPMWwwajAL
+BglghkgBZQMEASowCwYJYIZIAWUDBAEWMAsGCWCGSAFlAwQBAjAKBggqhkiG9w0D
+BzAOBggqhkiG9w0DAgICAIAwDQYIKoZIhvcNAwICAUAwBwYFKw4DAgcwDQYIKoZI
+hvcNAwICASgwCgYIKoZIzj0EAwIERzBFAiAgntdrTv4jh4CufOqMUL64CFxECcYk
+sJXQIf5CuXZY8wIhAKdn8KR6+CuvZEK5pBiIkTfFPouch61RM1DKV6NCzphl
+
+------06C7B0902A68A04AC5257355D1B00FFD--
+
diff --git a/test/certs/governance_allow_unauth_rtps_encrypt.xml b/test/certs/governance_allow_unauth_rtps_encrypt.xml
new file mode 100644
index 00000000000..ade49a09fce
--- /dev/null
+++ b/test/certs/governance_allow_unauth_rtps_encrypt.xml
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="utf-8"?>
+<dds xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+    xsi:noNamespaceSchemaLocation="omg_shared_ca_domain_governance.xsd">
+    <domain_access_rules>
+        <domain_rule>
+            <domains>
+                <id_range>
+                    <min>0</min>
+                    <max>230</max>
+                </id_range>
+            </domains>
+            <allow_unauthenticated_participants>true</allow_unauthenticated_participants>
+            <enable_join_access_control>true</enable_join_access_control>
+            <discovery_protection_kind>NONE</discovery_protection_kind>
+            <liveliness_protection_kind>NONE</liveliness_protection_kind>
+            <rtps_protection_kind>ENCRYPT</rtps_protection_kind>
+            <topic_access_rules>
+                <topic_rule>
+                    <topic_expression>HelloWorldTopic_*</topic_expression>
+                    <enable_discovery_protection>false</enable_discovery_protection>
+                    <enable_liveliness_protection>false</enable_liveliness_protection>
+                    <enable_read_access_control>false</enable_read_access_control>
+                    <enable_write_access_control>false</enable_write_access_control>
+                    <metadata_protection_kind>NONE</metadata_protection_kind>
+                    <data_protection_kind>NONE</data_protection_kind>
+                </topic_rule>
+            </topic_access_rules>
+        </domain_rule>
+    </domain_access_rules>
+</dds>
+
diff --git a/test/certs/index_other.txt b/test/certs/index_other.txt
new file mode 100644
index 00000000000..49a0974874e
--- /dev/null
+++ b/test/certs/index_other.txt
@@ -0,0 +1 @@
+V	330327103852Z		AE7BAD8C075AEAF8	unknown	/C=ES/ST=MA/O=eProsima/OU=eProsima/CN=Other Subscriber/emailAddress=othersub@eprosima.com
diff --git a/test/certs/othercacert.pem b/test/certs/othercacert.pem
new file mode 100644
index 00000000000..3011b8d8cb9
--- /dev/null
+++ b/test/certs/othercacert.pem
@@ -0,0 +1,15 @@
+-----BEGIN CERTIFICATE-----
+MIICajCCAhGgAwIBAgIUcsQhk60Hd3DBT+O8EmRXlj8CSf8wCgYIKoZIzj0EAwIw
+gZwxCzAJBgNVBAYTAkVTMQswCQYDVQQIDAJNQTEUMBIGA1UEBwwLVHJlcyBDYW50
+b3MxETAPBgNVBAoMCGVQcm9zaW1hMREwDwYDVQQLDAhlUHJvc2ltYTEfMB0GA1UE
+AwwWZVByb3NpbWEgT3RoZXIgVGVzdCBDQTEjMCEGCSqGSIb3DQEJARYUb3RoZXJj
+YUBlcHJvc2ltYS5jb20wHhcNMjMwMzMwMTAzNTAyWhcNMzMwMzI3MTAzNTAyWjCB
+nDELMAkGA1UEBhMCRVMxCzAJBgNVBAgMAk1BMRQwEgYDVQQHDAtUcmVzIENhbnRv
+czERMA8GA1UECgwIZVByb3NpbWExETAPBgNVBAsMCGVQcm9zaW1hMR8wHQYDVQQD
+DBZlUHJvc2ltYSBPdGhlciBUZXN0IENBMSMwIQYJKoZIhvcNAQkBFhRvdGhlcmNh
+QGVwcm9zaW1hLmNvbTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABE43rFtDDe1J
+kOMvvGAE7qKIvwRw5RT1W0EGijZiR2pj/RZ184KuxajfOLGYRXOa4J93e33h3mmq
+rDUFrieMqoyjLzAtMAwGA1UdEwQFMAMBAf8wHQYDVR0OBBYEFMkCyFAODKjV+jph
+9N6evAPX8an4MAoGCCqGSM49BAMCA0cAMEQCIAOLdnOdkQla8/ziYXxwU2VyN/iE
+gznWtvSH91sa1w2iAiAVwQ2wHaEh1SGrrgAt68LbmY1XRrFUKqF+dVwAw95t1w==
+-----END CERTIFICATE-----
diff --git a/test/certs/othercacert.txt b/test/certs/othercacert.txt
new file mode 100644
index 00000000000..5097a08716e
--- /dev/null
+++ b/test/certs/othercacert.txt
@@ -0,0 +1,3 @@
+openssl ecparam -name prime256v1 > ecdsaparam
+
+openssl req -nodes -x509 -days 3650 -newkey ec:ecdsaparam -keyout othercakey.pem -out othercacert.pem -config othercaconf.cnf
diff --git a/test/certs/othercaconf.cnf b/test/certs/othercaconf.cnf
new file mode 100644
index 00000000000..592209ee573
--- /dev/null
+++ b/test/certs/othercaconf.cnf
@@ -0,0 +1,87 @@
+# OpenSSL example Certificate Authority configuration file.
+
+####################################################################
+[ ca ]
+default_ca = CA_default # The default ca section
+
+####################################################################
+[ CA_default ]
+
+dir = . # Where everything is kept
+certs = $dir/certs # Where the issued certs are kept
+new_certs_dir = $dir/certs
+crl_dir = $dir/crl # Where the issued crl are kept
+database = $dir/index_other.txt # database index file.
+
+certificate = $dir/othercacert.pem # The CA certificate
+serial = $dir/serial_other # The current serial number
+crlnumber = $dir/crlnumber # the current crl number
+                           # must be commented out to leave a V1 CRL
+crl = $dir/crl.pem # The current CRL
+private_key = $dir/othercakey.pem # The private key
+RANDFILE = $dir/private/.rand # private random number file
+
+name_opt = ca_default # Subject Name options
+cert_opt = ca_default # Certificate field options
+
+default_days = 1825 # how long to certify for
+default_crl_days = 365 # how long before next CRL
+default_md = sha256 # which md to use.
+preserve = no # keep passed DN ordering
+
+policy = policy_match
+x509_extensions = local_ca_extensions
+#
+#
+# Copy extensions specified in the certificate request
+#
+copy_extensions = copy
+
+# For the CA policy
+[ policy_match ]
+countryName = match
+stateOrProvinceName = match
+organizationName = match
+organizationalUnitName = optional
+commonName = supplied
+emailAddress = optional
+
+# For the 'anything' policy
+# At this point in time, you must list all acceptable 'object'
+# types.
+[ policy_anything ]
+countryName = optional
+stateOrProvinceName = optional
+localityName = optional
+organizationName = optional
+organizationalUnitName = optional
+commonName = supplied
+emailAddress = optional
+
+#
+#
+# x509 extensions to use when generating server certificates.
+#
+[ local_ca_extensions ]
+basicConstraints        = CA:false
+
+[ req ]
+prompt = no
+default_bits    = 2048
+#default_keyfile = privkey.pem
+distinguished_name = root_ca_distinguished_name
+#attributes = req_attributes
+x509_extensions         = root_ca_extensions
+string_mask = utf8only
+
+[ root_ca_distinguished_name ]
+countryName = ES
+stateOrProvinceName = MA
+localityName = Tres Cantos
+organizationName = eProsima
+organizationalUnitName  = eProsima
+commonName = eProsima Other Test CA
+emailAddress = otherca@eprosima.com
+
+[ root_ca_extensions ]
+basicConstraints        = CA:true
diff --git a/test/certs/othercakey.pem b/test/certs/othercakey.pem
new file mode 100644
index 00000000000..4bc78a821d2
--- /dev/null
+++ b/test/certs/othercakey.pem
@@ -0,0 +1,5 @@
+-----BEGIN PRIVATE KEY-----
+MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQg0wnch72ggLKraX/Q
+djG5UBO/RBObsB4n5VzmugNPNKmhRANCAARON6xbQw3tSZDjL7xgBO6iiL8EcOUU
+9VtBBoo2YkdqY/0WdfOCrsWo3zixmEVzmuCfd3t94d5pqqw1Ba4njKqM
+-----END PRIVATE KEY-----
diff --git a/test/certs/othersub.cnf b/test/certs/othersub.cnf
new file mode 100644
index 00000000000..553c404c337
--- /dev/null
+++ b/test/certs/othersub.cnf
@@ -0,0 +1,12 @@
+prompt=no
+string_mask 			= utf8only
+distinguished_name	= req_distinguished_name
+
+[ req_distinguished_name ]
+countryName     		= ES
+stateOrProvinceName	= MA
+localityName			= Tres Cantos
+organizationName		= eProsima
+organizationalUnitName  = eProsima
+emailAddress			= othersub@eprosima.com
+commonName				= Other Subscriber
diff --git a/test/certs/othersubcert.pem b/test/certs/othersubcert.pem
new file mode 100644
index 00000000000..b3f96cb1364
--- /dev/null
+++ b/test/certs/othersubcert.pem
@@ -0,0 +1,50 @@
+Certificate:
+    Data:
+        Version: 3 (0x2)
+        Serial Number:
+            ae:7b:ad:8c:07:5a:ea:f8
+        Signature Algorithm: ecdsa-with-SHA256
+        Issuer: C=ES, ST=MA, L=Tres Cantos, O=eProsima, OU=eProsima, CN=eProsima Other Test CA/emailAddress=otherca@eprosima.com
+        Validity
+            Not Before: Mar 30 10:38:52 2023 GMT
+            Not After : Mar 27 10:38:52 2033 GMT
+        Subject: C=ES, ST=MA, O=eProsima, OU=eProsima, CN=Other Subscriber/emailAddress=othersub@eprosima.com
+        Subject Public Key Info:
+            Public Key Algorithm: id-ecPublicKey
+                Public-Key: (256 bit)
+                pub:
+                    04:3a:9b:41:92:b8:82:1d:c3:be:39:f6:b3:73:3c:
+                    e6:e2:17:dc:17:ab:86:ef:6b:6a:35:5a:00:a8:da:
+                    dc:b2:19:1f:c6:8f:93:b6:b7:c9:5f:13:0e:20:fa:
+                    66:a1:30:95:82:59:be:b8:3b:1b:8a:80:de:da:86:
+                    32:db:ce:4e:2c
+                ASN1 OID: prime256v1
+                NIST CURVE: P-256
+        X509v3 extensions:
+            X509v3 Basic Constraints: 
+                CA:FALSE
+            X509v3 Subject Key Identifier: 
+                B1:50:10:A4:24:85:09:85:E9:85:ED:76:6D:FE:00:10:2C:79:09:18
+            X509v3 Authority Key Identifier: 
+                C9:02:C8:50:0E:0C:A8:D5:FA:3A:61:F4:DE:9E:BC:03:D7:F1:A9:F8
+    Signature Algorithm: ecdsa-with-SHA256
+    Signature Value:
+        30:44:02:20:56:55:cc:e5:c8:e3:b0:f2:b2:b6:60:06:64:cd:
+        d8:a9:09:ac:60:c8:8f:22:fe:89:cf:70:90:f8:51:a5:9d:6e:
+        02:20:6e:5d:a5:8c:de:87:26:47:fb:6d:56:cd:d3:9e:d0:55:
+        15:d9:eb:aa:0f:02:b6:d3:d3:18:2e:34:f1:cc:05:fb
+-----BEGIN CERTIFICATE-----
+MIICYjCCAgmgAwIBAgIJAK57rYwHWur4MAoGCCqGSM49BAMCMIGcMQswCQYDVQQG
+EwJFUzELMAkGA1UECAwCTUExFDASBgNVBAcMC1RyZXMgQ2FudG9zMREwDwYDVQQK
+DAhlUHJvc2ltYTERMA8GA1UECwwIZVByb3NpbWExHzAdBgNVBAMMFmVQcm9zaW1h
+IE90aGVyIFRlc3QgQ0ExIzAhBgkqhkiG9w0BCQEWFG90aGVyY2FAZXByb3NpbWEu
+Y29tMB4XDTIzMDMzMDEwMzg1MloXDTMzMDMyNzEwMzg1MlowgYExCzAJBgNVBAYT
+AkVTMQswCQYDVQQIDAJNQTERMA8GA1UECgwIZVByb3NpbWExETAPBgNVBAsMCGVQ
+cm9zaW1hMRkwFwYDVQQDDBBPdGhlciBTdWJzY3JpYmVyMSQwIgYJKoZIhvcNAQkB
+FhVvdGhlcnN1YkBlcHJvc2ltYS5jb20wWTATBgcqhkjOPQIBBggqhkjOPQMBBwNC
+AAQ6m0GSuIIdw7459rNzPObiF9wXq4bva2o1WgCo2tyyGR/Gj5O2t8lfEw4g+mah
+MJWCWb64OxuKgN7ahjLbzk4so00wSzAJBgNVHRMEAjAAMB0GA1UdDgQWBBSxUBCk
+JIUJhemF7XZt/gAQLHkJGDAfBgNVHSMEGDAWgBTJAshQDgyo1fo6YfTenrwD1/Gp
++DAKBggqhkjOPQQDAgNHADBEAiBWVczlyOOw8rK2YAZkzdipCaxgyI8i/onPcJD4
+UaWdbgIgbl2ljN6HJkf7bVbN057QVRXZ66oPArbT0xguNPHMBfs=
+-----END CERTIFICATE-----
diff --git a/test/certs/othersubcert.txt b/test/certs/othersubcert.txt
new file mode 100644
index 00000000000..2f471f1202a
--- /dev/null
+++ b/test/certs/othersubcert.txt
@@ -0,0 +1,5 @@
+openssl ecparam -name prime256v1 > ecdsaparam
+
+openssl req -nodes -new -newkey ec:ecdsaparam -config othersub.cnf -keyout othersubkey.pem -out othersubreq.pem
+
+openssl ca -batch -create_serial -config othercaconf.cnf -days 3650 -in othersubreq.pem -out othersubcert.pem
diff --git a/test/certs/othersubkey.pem b/test/certs/othersubkey.pem
new file mode 100644
index 00000000000..7a0c1d81f18
--- /dev/null
+++ b/test/certs/othersubkey.pem
@@ -0,0 +1,5 @@
+-----BEGIN PRIVATE KEY-----
+MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgYJZoqzkjeJeHTIoS
+neVEhfGhNrbQUanPr4zJ71uj+VGhRANCAAQ6m0GSuIIdw7459rNzPObiF9wXq4bv
+a2o1WgCo2tyyGR/Gj5O2t8lfEw4g+mahMJWCWb64OxuKgN7ahjLbzk4s
+-----END PRIVATE KEY-----
diff --git a/test/certs/othersubreq.pem b/test/certs/othersubreq.pem
new file mode 100644
index 00000000000..268777f11f8
--- /dev/null
+++ b/test/certs/othersubreq.pem
@@ -0,0 +1,10 @@
+-----BEGIN CERTIFICATE REQUEST-----
+MIIBVDCB+gIBADCBlzELMAkGA1UEBhMCRVMxCzAJBgNVBAgMAk1BMRQwEgYDVQQH
+DAtUcmVzIENhbnRvczERMA8GA1UECgwIZVByb3NpbWExETAPBgNVBAsMCGVQcm9z
+aW1hMSQwIgYJKoZIhvcNAQkBFhVvdGhlcnN1YkBlcHJvc2ltYS5jb20xGTAXBgNV
+BAMMEE90aGVyIFN1YnNjcmliZXIwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAAQ6
+m0GSuIIdw7459rNzPObiF9wXq4bva2o1WgCo2tyyGR/Gj5O2t8lfEw4g+mahMJWC
+Wb64OxuKgN7ahjLbzk4soAAwCgYIKoZIzj0EAwIDSQAwRgIhALqAJV71eLXejVWz
+cxjjxlt95kEkvb787f5KcnTNXH8VAiEA1xoUq5i1ch1OEKgCCdZr92EvC0JmQXlD
+UwQ0OQVuGEM=
+-----END CERTIFICATE REQUEST-----
diff --git a/test/certs/permissions_helloworld_securehelloworld.smime b/test/certs/permissions_helloworld_securehelloworld.smime
new file mode 100644
index 00000000000..4a5d384fb8b
--- /dev/null
+++ b/test/certs/permissions_helloworld_securehelloworld.smime
@@ -0,0 +1,114 @@
+MIME-Version: 1.0
+Content-Type: multipart/signed; protocol="application/x-pkcs7-signature"; micalg="sha-256"; boundary="----1D61C74289DC1143740FA8252270826D"
+
+This is an S/MIME signed message
+
+------1D61C74289DC1143740FA8252270826D
+Content-Type: text/plain
+
+<?xml version="1.0" encoding="utf-8"?>
+<dds xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.omg.org/spec/DDS-Security/20170801/omg_shared_ca_permissions.xsd">
+    <permissions>
+        <grant name="PublisherPermissions">
+            <subject_name>emailAddress=mainpub@eprosima.com, CN=Main Publisher, OU=eProsima, O=eProsima, ST=MA, C=ES</subject_name>
+            <validity>
+                <not_before>2013-06-01T13:00:00</not_before>
+                <not_after>2038-06-01T13:00:00</not_after>
+            </validity>
+            <allow_rule>
+                <domains>
+                    <id_range>
+                        <min>0</min>
+                        <max>230</max>
+                    </id_range>
+                </domains>
+                <publish>
+                    <topics>
+                        <topic>HelloWorldTopic_*</topic>
+                    </topics>
+                </publish>
+            </allow_rule>
+            <allow_rule>
+                <domains>
+                    <id_range>
+                        <min>0</min>
+                        <max>230</max>
+                    </id_range>
+                </domains>
+                <publish>
+                    <topics>
+                        <topic>SecureHelloWorldTopic_*</topic>
+                    </topics>
+                </publish>
+            </allow_rule>
+            <default>DENY</default>
+        </grant>
+        <grant name="SubscriberPermissions">
+            <subject_name>emailAddress=mainsub@eprosima.com, CN=Main Subscriber, OU=eProsima, O=eProsima, ST=MA, C=ES</subject_name>
+            <validity>
+                <not_before>2013-06-01T13:00:00</not_before>
+                <not_after>2038-06-01T13:00:00</not_after>
+            </validity>
+            <allow_rule>
+                <domains>
+                    <id_range>
+                        <min>0</min>
+                        <max>230</max>
+                    </id_range>
+                </domains>
+                <subscribe>
+                    <topics>
+                        <topic>HelloWorldTopic_*</topic>
+                    </topics>
+                </subscribe>
+            </allow_rule>
+            <allow_rule>
+                <domains>
+                    <id_range>
+                        <min>0</min>
+                        <max>230</max>
+                    </id_range>
+                </domains>
+                <subscribe>
+                    <topics>
+                        <topic>SecureHelloWorldTopic_*</topic>
+                    </topics>
+                </subscribe>
+            </allow_rule>
+            <default>DENY</default>
+        </grant>
+    </permissions>
+</dds>
+
+------1D61C74289DC1143740FA8252270826D
+Content-Type: application/x-pkcs7-signature; name="smime.p7s"
+Content-Transfer-Encoding: base64
+Content-Disposition: attachment; filename="smime.p7s"
+
+MIIEeQYJKoZIhvcNAQcCoIIEajCCBGYCAQExDzANBglghkgBZQMEAgEFADALBgkq
+hkiG9w0BBwGgggJAMIICPDCCAeOgAwIBAgIJALZwpgo2sxthMAoGCCqGSM49BAMC
+MIGaMQswCQYDVQQGEwJFUzELMAkGA1UECAwCTUExFDASBgNVBAcMC1RyZXMgQ2Fu
+dG9zMREwDwYDVQQKDAhlUHJvc2ltYTERMA8GA1UECwwIZVByb3NpbWExHjAcBgNV
+BAMMFWVQcm9zaW1hIE1haW4gVGVzdCBDQTEiMCAGCSqGSIb3DQEJARYTbWFpbmNh
+QGVwcm9zaW1hLmNvbTAeFw0xNzA5MDYwOTAzMDNaFw0yNzA5MDQwOTAzMDNaMIGa
+MQswCQYDVQQGEwJFUzELMAkGA1UECAwCTUExFDASBgNVBAcMC1RyZXMgQ2FudG9z
+MREwDwYDVQQKDAhlUHJvc2ltYTERMA8GA1UECwwIZVByb3NpbWExHjAcBgNVBAMM
+FWVQcm9zaW1hIE1haW4gVGVzdCBDQTEiMCAGCSqGSIb3DQEJARYTbWFpbmNhQGVw
+cm9zaW1hLmNvbTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABGLlhB3WQ8l1fpUE
+3DfOoulA/de38Zfj7hmpKtOnxiH2q6RJbwhxvJeA7R7mkmAKaJKmzx695BjyiXVS
+7bE7vgejEDAOMAwGA1UdEwQFMAMBAf8wCgYIKoZIzj0EAwIDRwAwRAIgVTY1BEvT
+4pw3GyBMzaUqmp69wi0kBkyOgq04OhyJ13UCICR125vvt0fUhXsXaxOAx28E4Ac9
+SVxpI+3UYs2kV5n0MYIB/TCCAfkCAQEwgagwgZoxCzAJBgNVBAYTAkVTMQswCQYD
+VQQIDAJNQTEUMBIGA1UEBwwLVHJlcyBDYW50b3MxETAPBgNVBAoMCGVQcm9zaW1h
+MREwDwYDVQQLDAhlUHJvc2ltYTEeMBwGA1UEAwwVZVByb3NpbWEgTWFpbiBUZXN0
+IENBMSIwIAYJKoZIhvcNAQkBFhNtYWluY2FAZXByb3NpbWEuY29tAgkAtnCmCjaz
+G2EwDQYJYIZIAWUDBAIBBQCggeQwGAYJKoZIhvcNAQkDMQsGCSqGSIb3DQEHATAc
+BgkqhkiG9w0BCQUxDxcNMjMwNTA4MTM1MDUwWjAvBgkqhkiG9w0BCQQxIgQgT1oH
+DTs8Qexm3cRVIZtpd76Fqu1+AIFc3FQtihXSSKQweQYJKoZIhvcNAQkPMWwwajAL
+BglghkgBZQMEASowCwYJYIZIAWUDBAEWMAsGCWCGSAFlAwQBAjAKBggqhkiG9w0D
+BzAOBggqhkiG9w0DAgICAIAwDQYIKoZIhvcNAwICAUAwBwYFKw4DAgcwDQYIKoZI
+hvcNAwICASgwCgYIKoZIzj0EAwIERzBFAiAUCcBRhV/IJvA94tLoB+yov4oZqj/1
+NVZfkTnyZTwoKQIhAKb9GiPy9EqaaATI99f2FTRR8sRoNXe/nm5d5O2gOtpT
+
+------1D61C74289DC1143740FA8252270826D--
+
diff --git a/test/certs/permissions_helloworld_securehelloworld.xml b/test/certs/permissions_helloworld_securehelloworld.xml
new file mode 100644
index 00000000000..88cefd1be61
--- /dev/null
+++ b/test/certs/permissions_helloworld_securehelloworld.xml
@@ -0,0 +1,73 @@
+<?xml version="1.0" encoding="utf-8"?>
+<dds xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.omg.org/spec/DDS-Security/20170801/omg_shared_ca_permissions.xsd">
+    <permissions>
+        <grant name="PublisherPermissions">
+            <subject_name>emailAddress=mainpub@eprosima.com, CN=Main Publisher, OU=eProsima, O=eProsima, ST=MA, C=ES</subject_name>
+            <validity>
+                <not_before>2013-06-01T13:00:00</not_before>
+                <not_after>2038-06-01T13:00:00</not_after>
+            </validity>
+            <allow_rule>
+                <domains>
+                    <id_range>
+                        <min>0</min>
+                        <max>230</max>
+                    </id_range>
+                </domains>
+                <publish>
+                    <topics>
+                        <topic>HelloWorldTopic_*</topic>
+                    </topics>
+                </publish>
+            </allow_rule>
+            <allow_rule>
+                <domains>
+                    <id_range>
+                        <min>0</min>
+                        <max>230</max>
+                    </id_range>
+                </domains>
+                <publish>
+                    <topics>
+                        <topic>SecureHelloWorldTopic_*</topic>
+                    </topics>
+                </publish>
+            </allow_rule>
+            <default>DENY</default>
+        </grant>
+        <grant name="SubscriberPermissions">
+            <subject_name>emailAddress=mainsub@eprosima.com, CN=Main Subscriber, OU=eProsima, O=eProsima, ST=MA, C=ES</subject_name>
+            <validity>
+                <not_before>2013-06-01T13:00:00</not_before>
+                <not_after>2038-06-01T13:00:00</not_after>
+            </validity>
+            <allow_rule>
+                <domains>
+                    <id_range>
+                        <min>0</min>
+                        <max>230</max>
+                    </id_range>
+                </domains>
+                <subscribe>
+                    <topics>
+                        <topic>HelloWorldTopic_*</topic>
+                    </topics>
+                </subscribe>
+            </allow_rule>
+            <allow_rule>
+                <domains>
+                    <id_range>
+                        <min>0</min>
+                        <max>230</max>
+                    </id_range>
+                </domains>
+                <subscribe>
+                    <topics>
+                        <topic>SecureHelloWorldTopic_*</topic>
+                    </topics>
+                </subscribe>
+            </allow_rule>
+            <default>DENY</default>
+        </grant>
+    </permissions>
+</dds>
diff --git a/test/certs/permissions_helloworld_securehelloworld_other_ca.smime b/test/certs/permissions_helloworld_securehelloworld_other_ca.smime
new file mode 100644
index 00000000000..ac82854054e
--- /dev/null
+++ b/test/certs/permissions_helloworld_securehelloworld_other_ca.smime
@@ -0,0 +1,82 @@
+MIME-Version: 1.0
+Content-Type: multipart/signed; protocol="application/x-pkcs7-signature"; micalg="sha-256"; boundary="----3934965CFBB897223A391AE03BC0850F"
+
+This is an S/MIME signed message
+
+------3934965CFBB897223A391AE03BC0850F
+Content-Type: text/plain
+
+<?xml version="1.0" encoding="utf-8"?>
+<dds xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.omg.org/spec/DDS-Security/20170801/omg_shared_ca_permissions.xsd">
+    <permissions>
+        <grant name="SubscriberPermissions">
+            <subject_name>emailAddress=othersub@eprosima.com, CN=Other Subscriber, OU=eProsima, O=eProsima, ST=MA, C=ES</subject_name>
+            <validity>
+                <not_before>2013-06-01T13:00:00</not_before>
+                <not_after>2038-06-01T13:00:00</not_after>
+            </validity>
+            <allow_rule>
+                <domains>
+                    <id_range>
+                        <min>0</min>
+                        <max>230</max>
+                    </id_range>
+                </domains>
+                <subscribe>
+                    <topics>
+                        <topic>HelloWorldTopic_*</topic>
+                    </topics>
+                </subscribe>
+            </allow_rule>
+            <allow_rule>
+                <domains>
+                    <id_range>
+                        <min>0</min>
+                        <max>230</max>
+                    </id_range>
+                </domains>
+                <subscribe>
+                    <topics>
+                        <topic>SecureHelloWorldTopic_*</topic>
+                    </topics>
+                </subscribe>
+            </allow_rule>
+            <default>DENY</default>
+        </grant>
+    </permissions>
+</dds>
+
+------3934965CFBB897223A391AE03BC0850F
+Content-Type: application/x-pkcs7-signature; name="smime.p7s"
+Content-Transfer-Encoding: base64
+Content-Disposition: attachment; filename="smime.p7s"
+
+MIIEtAYJKoZIhvcNAQcCoIIEpTCCBKECAQExDzANBglghkgBZQMEAgEFADALBgkq
+hkiG9w0BBwGgggJuMIICajCCAhGgAwIBAgIUcsQhk60Hd3DBT+O8EmRXlj8CSf8w
+CgYIKoZIzj0EAwIwgZwxCzAJBgNVBAYTAkVTMQswCQYDVQQIDAJNQTEUMBIGA1UE
+BwwLVHJlcyBDYW50b3MxETAPBgNVBAoMCGVQcm9zaW1hMREwDwYDVQQLDAhlUHJv
+c2ltYTEfMB0GA1UEAwwWZVByb3NpbWEgT3RoZXIgVGVzdCBDQTEjMCEGCSqGSIb3
+DQEJARYUb3RoZXJjYUBlcHJvc2ltYS5jb20wHhcNMjMwMzMwMTAzNTAyWhcNMzMw
+MzI3MTAzNTAyWjCBnDELMAkGA1UEBhMCRVMxCzAJBgNVBAgMAk1BMRQwEgYDVQQH
+DAtUcmVzIENhbnRvczERMA8GA1UECgwIZVByb3NpbWExETAPBgNVBAsMCGVQcm9z
+aW1hMR8wHQYDVQQDDBZlUHJvc2ltYSBPdGhlciBUZXN0IENBMSMwIQYJKoZIhvcN
+AQkBFhRvdGhlcmNhQGVwcm9zaW1hLmNvbTBZMBMGByqGSM49AgEGCCqGSM49AwEH
+A0IABE43rFtDDe1JkOMvvGAE7qKIvwRw5RT1W0EGijZiR2pj/RZ184KuxajfOLGY
+RXOa4J93e33h3mmqrDUFrieMqoyjLzAtMAwGA1UdEwQFMAMBAf8wHQYDVR0OBBYE
+FMkCyFAODKjV+jph9N6evAPX8an4MAoGCCqGSM49BAMCA0cAMEQCIAOLdnOdkQla
+8/ziYXxwU2VyN/iEgznWtvSH91sa1w2iAiAVwQ2wHaEh1SGrrgAt68LbmY1XRrFU
+KqF+dVwAw95t1zGCAgowggIGAgEBMIG1MIGcMQswCQYDVQQGEwJFUzELMAkGA1UE
+CAwCTUExFDASBgNVBAcMC1RyZXMgQ2FudG9zMREwDwYDVQQKDAhlUHJvc2ltYTER
+MA8GA1UECwwIZVByb3NpbWExHzAdBgNVBAMMFmVQcm9zaW1hIE90aGVyIFRlc3Qg
+Q0ExIzAhBgkqhkiG9w0BCQEWFG90aGVyY2FAZXByb3NpbWEuY29tAhRyxCGTrQd3
+cMFP47wSZFeWPwJJ/zANBglghkgBZQMEAgEFAKCB5DAYBgkqhkiG9w0BCQMxCwYJ
+KoZIhvcNAQcBMBwGCSqGSIb3DQEJBTEPFw0yMzA1MDgxNDA2MDJaMC8GCSqGSIb3
+DQEJBDEiBCCCH2G2Xa8+eUvm3US5yrQq6ZhtQJzfM0Qr7zBotqaqhDB5BgkqhkiG
+9w0BCQ8xbDBqMAsGCWCGSAFlAwQBKjALBglghkgBZQMEARYwCwYJYIZIAWUDBAEC
+MAoGCCqGSIb3DQMHMA4GCCqGSIb3DQMCAgIAgDANBggqhkiG9w0DAgIBQDAHBgUr
+DgMCBzANBggqhkiG9w0DAgIBKDAKBggqhkjOPQQDAgRHMEUCIQDg4DiHq0Se05h+
+bNjHf6/A+mpQXf0/NxWBF1vtu/VE6QIgZ3RRj9dZD3tAPRrIpOi/B9bK8+OgsZ+N
+6cCmPLMDwDM=
+
+------3934965CFBB897223A391AE03BC0850F--
+
diff --git a/test/certs/permissions_helloworld_securehelloworld_other_ca.xml b/test/certs/permissions_helloworld_securehelloworld_other_ca.xml
new file mode 100644
index 00000000000..cd3c400ba3a
--- /dev/null
+++ b/test/certs/permissions_helloworld_securehelloworld_other_ca.xml
@@ -0,0 +1,39 @@
+<?xml version="1.0" encoding="utf-8"?>
+<dds xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.omg.org/spec/DDS-Security/20170801/omg_shared_ca_permissions.xsd">
+    <permissions>
+        <grant name="SubscriberPermissions">
+            <subject_name>emailAddress=othersub@eprosima.com, CN=Other Subscriber, OU=eProsima, O=eProsima, ST=MA, C=ES</subject_name>
+            <validity>
+                <not_before>2013-06-01T13:00:00</not_before>
+                <not_after>2038-06-01T13:00:00</not_after>
+            </validity>
+            <allow_rule>
+                <domains>
+                    <id_range>
+                        <min>0</min>
+                        <max>230</max>
+                    </id_range>
+                </domains>
+                <subscribe>
+                    <topics>
+                        <topic>HelloWorldTopic_*</topic>
+                    </topics>
+                </subscribe>
+            </allow_rule>
+            <allow_rule>
+                <domains>
+                    <id_range>
+                        <min>0</min>
+                        <max>230</max>
+                    </id_range>
+                </domains>
+                <subscribe>
+                    <topics>
+                        <topic>SecureHelloWorldTopic_*</topic>
+                    </topics>
+                </subscribe>
+            </allow_rule>
+            <default>DENY</default>
+        </grant>
+    </permissions>
+</dds>
diff --git a/test/certs/serial_other b/test/certs/serial_other
new file mode 100644
index 00000000000..3b9597b9234
--- /dev/null
+++ b/test/certs/serial_other
@@ -0,0 +1 @@
+AE7BAD8C075AEAF9
\ No newline at end of file
diff --git a/test/communication/CMakeLists.txt b/test/communication/CMakeLists.txt
index 1cd06a98fe5..21c6aa7a8c1 100644
--- a/test/communication/CMakeLists.txt
+++ b/test/communication/CMakeLists.txt
@@ -158,12 +158,16 @@ configure_file(${CMAKE_CURRENT_SOURCE_DIR}/secure_simple_ds_server_no_discovery_
     ${CMAKE_CURRENT_BINARY_DIR}/secure_simple_ds_server_no_discovery_no_rtps_protection_idx_1_profile.xml COPYONLY)
 configure_file(${CMAKE_CURRENT_SOURCE_DIR}/secure_simple_ds_server_no_discovery_protection_profile.xml
     ${CMAKE_CURRENT_BINARY_DIR}/secure_simple_ds_server_no_discovery_protection_profile.xml COPYONLY)
-    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/secure_simple_ds_server_no_discovery_protection_idx_1_profile.xml
+configure_file(${CMAKE_CURRENT_SOURCE_DIR}/secure_simple_ds_server_no_discovery_protection_idx_1_profile.xml
     ${CMAKE_CURRENT_BINARY_DIR}/secure_simple_ds_server_no_discovery_protection_idx_1_profile.xml COPYONLY)
 configure_file(${CMAKE_CURRENT_SOURCE_DIR}/secure_simple_ds_server_no_rtps_protection_profile.xml
     ${CMAKE_CURRENT_BINARY_DIR}/secure_simple_ds_server_no_rtps_protection_profile.xml COPYONLY)
 configure_file(${CMAKE_CURRENT_SOURCE_DIR}/secure_simple_ds_server_no_rtps_protection_idx_1_profile.xml
     ${CMAKE_CURRENT_BINARY_DIR}/secure_simple_ds_server_no_rtps_protection_idx_1_profile.xml COPYONLY)
+configure_file(${CMAKE_CURRENT_SOURCE_DIR}/simple_secure_allow_unauthenticated_pub_profile.xml
+    ${CMAKE_CURRENT_BINARY_DIR}/simple_secure_allow_unauthenticated_pub_profile.xml COPYONLY)
+configure_file(${CMAKE_CURRENT_SOURCE_DIR}/simple_allow_unauthenticated_sub_profile.xml
+    ${CMAKE_CURRENT_BINARY_DIR}/simple_allow_unauthenticated_sub_profile.xml COPYONLY)
 
 if(SECURITY)
     configure_file(${PROJECT_SOURCE_DIR}/test/certs/maincacert.pem
@@ -186,6 +190,10 @@ if(SECURITY)
         ${CMAKE_CURRENT_BINARY_DIR}/governance_disable_rtps_helloworld_all_enable.smime COPYONLY)
     configure_file(${PROJECT_SOURCE_DIR}/test/certs/permissions_helloworld.smime
         ${CMAKE_CURRENT_BINARY_DIR}/permissions_helloworld.smime COPYONLY)
+    configure_file(${PROJECT_SOURCE_DIR}/test/certs/governance_allow_unauth_all_disabled_access_none.smime
+        ${CMAKE_CURRENT_BINARY_DIR}/governance_allow_unauth_all_disabled_access_none.smime COPYONLY)
+    configure_file(${PROJECT_SOURCE_DIR}/test/certs/permissions_helloworld_securehelloworld.smime
+        ${CMAKE_CURRENT_BINARY_DIR}/permissions_helloworld_securehelloworld.smime COPYONLY)
 endif()
 
 if(PYTHONINTERP_FOUND)
@@ -509,6 +517,24 @@ if(PYTHONINTERP_FOUND)
                 "PATH=$<TARGET_FILE_DIR:${PROJECT_NAME}>\\;$<TARGET_FILE_DIR:fastcdr>\\;${WIN_PATH}")
         endif()
 
+        add_test(NAME AllowUnauthenticatedSimplePubSecureNoRTPSProtectionSubNonSecure
+            COMMAND ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_BINARY_DIR}/multiple_subs_secure_crypto_communication.py
+            --n-subs 1
+            --pub $<TARGET_FILE:SimpleCommunicationPublisher>
+            --xml-pub simple_secure_allow_unauthenticated_pub_profile.xml
+            --sub $<TARGET_FILE:SimpleCommunicationSubscriber>
+            --xml-sub simple_allow_unauthenticated_sub_profile.xml
+            --samples 10)
+
+        # Set test with label NoMemoryCheck
+        set_property(TEST AllowUnauthenticatedSimplePubSecureNoRTPSProtectionSubNonSecure PROPERTY LABELS "NoMemoryCheck")
+
+        if(WIN32)
+            string(REPLACE ";" "\\;" WIN_PATH "$ENV{PATH}")
+            set_property(TEST AllowUnauthenticatedSimplePubSecureNoRTPSProtectionSubNonSecure APPEND PROPERTY ENVIRONMENT
+                "PATH=$<TARGET_FILE_DIR:${PROJECT_NAME}>\\;$<TARGET_FILE_DIR:fastcdr>\\;${WIN_PATH}")
+        endif()
+
     endif()
 
     add_test(NAME LivelinessAssertion
diff --git a/test/communication/simple_allow_unauthenticated_sub_profile.xml b/test/communication/simple_allow_unauthenticated_sub_profile.xml
new file mode 100644
index 00000000000..88300420d49
--- /dev/null
+++ b/test/communication/simple_allow_unauthenticated_sub_profile.xml
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="utf-8" ?>
+<dds xmlns="http://www.eprosima.com/XMLSchemas/fastRTPS_Profiles">
+    <profiles>
+        <data_reader profile_name="simple_subscriber_profile" is_default_profile="true">
+            <qos>
+                <reliability>
+                    <kind>BEST_EFFORT</kind>
+                </reliability>
+            </qos>
+        </data_reader>
+    </profiles>
+</dds>
diff --git a/test/communication/simple_secure_allow_unauthenticated_pub_profile.xml b/test/communication/simple_secure_allow_unauthenticated_pub_profile.xml
new file mode 100644
index 00000000000..dcd0b5a37b6
--- /dev/null
+++ b/test/communication/simple_secure_allow_unauthenticated_pub_profile.xml
@@ -0,0 +1,55 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<dds xmlns="http://www.eprosima.com/XMLSchemas/fastRTPS_Profiles" >
+    <profiles>
+        <participant profile_name="simple_secure_publisher" is_default_profile="true">
+            <rtps>
+                <propertiesPolicy>
+                    <properties>
+                        <!-- Activate Auth:PKI-DH plugin -->
+                        <property>
+                            <name>dds.sec.auth.plugin</name>
+                            <value>builtin.PKI-DH</value>
+                        </property>
+                        <!-- Configure Auth:PKI-DH plugin -->
+                        <property>
+                            <name>dds.sec.auth.builtin.PKI-DH.identity_ca</name>
+                            <value>file://maincacert.pem</value>
+                        </property>
+                        <property>
+                            <name>dds.sec.auth.builtin.PKI-DH.identity_certificate</name>
+                            <value>file://mainpubcert.pem</value>
+                        </property>
+                        <property>
+                            <name>dds.sec.auth.builtin.PKI-DH.private_key</name>
+                            <value>file://mainpubkey.pem</value>
+                        </property>
+                        <!-- Activate Access:Permissions plugin -->
+                        <property>
+                            <name>dds.sec.access.plugin</name>
+                            <value>builtin.Access-Permissions</value>
+                        </property>
+                        <!-- Configure Access:Permissions plugin -->
+                        <property>
+                            <name>dds.sec.access.builtin.Access-Permissions.permissions_ca</name>
+                            <value>file://maincacert.pem</value>
+                        </property>
+                        <property>
+                            <name>dds.sec.access.builtin.Access-Permissions.governance</name>
+                            <value>file://governance_allow_unauth_all_disabled_access_none.smime</value>
+                        </property>
+                        <property>
+                            <name>dds.sec.access.builtin.Access-Permissions.permissions</name>
+                            <value>file://permissions_helloworld_securehelloworld.smime</value>
+                        </property>
+                        <!-- Activate Crypto:AES-GCM-GMAC plugin -->
+                        <property>
+                            <name>dds.sec.crypto.plugin</name>
+                            <value>builtin.AES-GCM-GMAC</value>
+                        </property>
+                    </properties>
+                </propertiesPolicy>
+            </rtps>
+        </participant>
+    </profiles>
+</dds>
+
diff --git a/test/mock/rtps/PDP/fastdds/rtps/builtin/discovery/participant/PDP.h b/test/mock/rtps/PDP/fastdds/rtps/builtin/discovery/participant/PDP.h
index edb36acc169..62c414a5558 100644
--- a/test/mock/rtps/PDP/fastdds/rtps/builtin/discovery/participant/PDP.h
+++ b/test/mock/rtps/PDP/fastdds/rtps/builtin/discovery/participant/PDP.h
@@ -55,9 +55,6 @@ class PDP
     MOCK_METHOD1(assignRemoteEndpoints, void(
             ParticipantProxyData* pdata));
 
-    MOCK_METHOD1(notifyAboveRemoteEndpoints, void(
-            const ParticipantProxyData& pdata));
-
     MOCK_METHOD1(removeRemoteEndpoints, void(
             const ParticipantProxyData* pdata));
 
@@ -82,6 +79,10 @@ class PDP
             const GUID_t& writer,
             WriterProxyData& wdata));
 
+    MOCK_METHOD2(notifyAboveRemoteEndpoints, void(
+            const ParticipantProxyData& pdata,
+            bool notify_secure_endpoints));
+
     MOCK_METHOD0(ParticipantProxiesBegin, ResourceLimitedVector<ParticipantProxyData*>::const_iterator());
 
     MOCK_METHOD0(ParticipantProxiesEnd, ResourceLimitedVector<ParticipantProxyData*>::const_iterator());
diff --git a/test/mock/rtps/PDPSimple/fastdds/rtps/builtin/discovery/participant/PDPSimple.h b/test/mock/rtps/PDPSimple/fastdds/rtps/builtin/discovery/participant/PDPSimple.h
index 4f49e9e8c66..eb2d4de8a68 100644
--- a/test/mock/rtps/PDPSimple/fastdds/rtps/builtin/discovery/participant/PDPSimple.h
+++ b/test/mock/rtps/PDPSimple/fastdds/rtps/builtin/discovery/participant/PDPSimple.h
@@ -32,17 +32,20 @@ namespace rtps {
 
 class PDPSimple
 {
-    public:
+public:
 
-        MOCK_METHOD1(notifyAboveRemoteEndpoints, void(const ParticipantProxyData&));
+    MOCK_METHOD2(notifyAboveRemoteEndpoints, void(const ParticipantProxyData&, bool));
 
-        MOCK_METHOD1(get_participant_proxy_data_serialized, CDRMessage_t(Endianness_t));
+    MOCK_METHOD1(get_participant_proxy_data_serialized, CDRMessage_t(Endianness_t));
 
-        EDP* getEDP() { return &edp_; }
+    EDP* getEDP()
+    {
+        return &edp_;
+    }
 
-    private:
+private:
 
-        EDP edp_;
+    EDP edp_;
 };
 
 } //namespace rtps
diff --git a/test/unittest/rtps/discovery/EdpTests.cpp b/test/unittest/rtps/discovery/EdpTests.cpp
index 90bbda4134b..9381ea8722d 100644
--- a/test/unittest/rtps/discovery/EdpTests.cpp
+++ b/test/unittest/rtps/discovery/EdpTests.cpp
@@ -52,7 +52,8 @@ class EDPMock : public EDP
     }
 
     void assignRemoteEndpoints(
-            const ParticipantProxyData& /*pdata*/) override
+            const ParticipantProxyData& /*pdata*/,
+            bool /*assign_secure_endpoints*/) override
     {
     }
 
diff --git a/test/unittest/rtps/security/SecurityHandshakeProcessTests.cpp b/test/unittest/rtps/security/SecurityHandshakeProcessTests.cpp
index 16e1143159a..2ea8fe61efb 100644
--- a/test/unittest/rtps/security/SecurityHandshakeProcessTests.cpp
+++ b/test/unittest/rtps/security/SecurityHandshakeProcessTests.cpp
@@ -157,7 +157,7 @@ TEST_F(SecurityTest, discovered_participant_process_message_not_expecting_reques
     ParticipantProxyData participant_data;
     fill_participant_key(participant_data.m_guid);
     EXPECT_CALL(participant_, pdp()).Times(1).WillOnce(Return(&pdp_));
-    EXPECT_CALL(pdp_, notifyAboveRemoteEndpoints(_)).Times(1);
+    EXPECT_CALL(pdp_, notifyAboveRemoteEndpoints(_, true)).Times(1);
 
     ParticipantAuthenticationInfo info;
     info.status = ParticipantAuthenticationInfo::AUTHORIZED_PARTICIPANT;
@@ -316,7 +316,7 @@ TEST_F(SecurityTest, discovered_participant_process_message_ok_begin_handshake_r
     EXPECT_CALL(*stateless_reader_->history_, remove_change_mock(change)).Times(1).
             WillOnce(Return(true));
     EXPECT_CALL(participant_, pdp()).Times(2).WillRepeatedly(Return(&pdp_));
-    EXPECT_CALL(pdp_, notifyAboveRemoteEndpoints(_)).Times(1);
+    EXPECT_CALL(pdp_, notifyAboveRemoteEndpoints(_, true)).Times(1);
     EXPECT_CALL(pdp_, get_participant_proxy_data_serialized(BIGEND)).Times(1);
     EXPECT_CALL(*auth_plugin_, get_shared_secret(Ref(handshake_handle), _)).Times(1).
             WillOnce(Return(shared_secret_handle));
@@ -573,7 +573,7 @@ TEST_F(SecurityTest, discovered_participant_process_message_pending_handshake_re
     EXPECT_CALL(*stateless_reader_->history_, remove_change_mock(change)).Times(1).
             WillOnce(Return(true));
     EXPECT_CALL(participant_, pdp()).Times(2).WillRepeatedly(Return(&pdp_));
-    EXPECT_CALL(pdp_, notifyAboveRemoteEndpoints(_)).Times(1);
+    EXPECT_CALL(pdp_, notifyAboveRemoteEndpoints(_, true)).Times(1);
     EXPECT_CALL(pdp_, get_participant_proxy_data_serialized(BIGEND)).Times(1);
     EXPECT_CALL(*auth_plugin_, get_shared_secret(Ref(handshake_handle), _)).Times(1).
             WillOnce(Return(shared_secret_handle));
@@ -702,7 +702,7 @@ TEST_F(SecurityTest, discovered_participant_process_message_ok_process_handshake
     EXPECT_CALL(*stateless_reader_->history_, remove_change_mock(change)).Times(1).
             WillOnce(Return(true));
     EXPECT_CALL(participant_, pdp()).Times(1).WillOnce(Return(&pdp_));
-    EXPECT_CALL(pdp_, notifyAboveRemoteEndpoints(_)).Times(1);
+    EXPECT_CALL(pdp_, notifyAboveRemoteEndpoints(_, true)).Times(1);
     EXPECT_CALL(*auth_plugin_, get_shared_secret(Ref(handshake_handle_), _)).Times(1).
             WillOnce(Return(shared_secret_handle));
     EXPECT_CALL(*auth_plugin_, return_sharedsecret_handle(shared_secret_handle, _)).Times(1).
@@ -1096,7 +1096,7 @@ TEST_F(SecurityTest, discovered_participant_process_message_ok_process_handshake
     EXPECT_CALL(*stateless_reader_->history_, remove_change_mock(change)).Times(1).
             WillOnce(Return(true));
     EXPECT_CALL(participant_, pdp()).Times(1).WillOnce(Return(&pdp_));
-    EXPECT_CALL(pdp_, notifyAboveRemoteEndpoints(_)).Times(1);
+    EXPECT_CALL(pdp_, notifyAboveRemoteEndpoints(_, true)).Times(1);
     EXPECT_CALL(*auth_plugin_, get_shared_secret(Ref(handshake_handle_), _)).Times(1).
             WillOnce(Return(shared_secret_handle));
     EXPECT_CALL(*auth_plugin_, return_sharedsecret_handle(shared_secret_handle, _)).Times(1).
diff --git a/test/unittest/rtps/security/SecurityTests.cpp b/test/unittest/rtps/security/SecurityTests.cpp
index da2962375a2..117da5f1331 100644
--- a/test/unittest/rtps/security/SecurityTests.cpp
+++ b/test/unittest/rtps/security/SecurityTests.cpp
@@ -222,7 +222,7 @@ void SecurityTest::final_message_process_ok(
             WillOnce(Return(true));
     //TODO(Ricardo) Verify parameter passed to notifyAboveRemoteEndpoints
     EXPECT_CALL(participant_, pdp()).Times(1).WillOnce(Return(&pdp_));
-    EXPECT_CALL(pdp_, notifyAboveRemoteEndpoints(_)).Times(1);
+    EXPECT_CALL(pdp_, notifyAboveRemoteEndpoints(_, true)).Times(1);
     EXPECT_CALL(*auth_plugin_, get_shared_secret(Ref(handshake_handle_), _)).Times(1).
             WillOnce(Return(shared_secret_handle));
     EXPECT_CALL(*auth_plugin_, return_sharedsecret_handle(shared_secret_handle, _)).Times(1).
diff --git a/test/unittest/rtps/security/SecurityValidationRemoteTests.cpp b/test/unittest/rtps/security/SecurityValidationRemoteTests.cpp
index 2812e57156d..2b8ab1ce98e 100644
--- a/test/unittest/rtps/security/SecurityValidationRemoteTests.cpp
+++ b/test/unittest/rtps/security/SecurityValidationRemoteTests.cpp
@@ -48,7 +48,7 @@ TEST_F(SecurityTest, discovered_participant_validation_remote_identity_ok)
     EXPECT_CALL(*auth_plugin_, return_identity_handle(&remote_identity_handle, _)).Times(1).
             WillOnce(Return(true));
     EXPECT_CALL(participant_, pdp()).Times(1).WillOnce(Return(&pdp_));
-    EXPECT_CALL(pdp_, notifyAboveRemoteEndpoints(_)).Times(1);
+    EXPECT_CALL(pdp_, notifyAboveRemoteEndpoints(_, true)).Times(1);
 
     ParticipantAuthenticationInfo info;
     info.status = ParticipantAuthenticationInfo::AUTHORIZED_PARTICIPANT;
@@ -137,7 +137,7 @@ TEST_F(SecurityTest, discovered_participant_validation_remote_identity_pending_h
     EXPECT_CALL(*auth_plugin_, return_handshake_handle(&handshake_handle, _)).Times(1).
             WillRepeatedly(Return(true));
     EXPECT_CALL(participant_, pdp()).Times(2).WillRepeatedly(Return(&pdp_));
-    EXPECT_CALL(pdp_, notifyAboveRemoteEndpoints(_)).Times(1);
+    EXPECT_CALL(pdp_, notifyAboveRemoteEndpoints(_, true)).Times(1);
     EXPECT_CALL(pdp_, get_participant_proxy_data_serialized(BIGEND)).Times(1);
     EXPECT_CALL(*auth_plugin_, get_shared_secret(Ref(handshake_handle), _)).Times(1).
             WillOnce(Return(shared_secret_handle));
@@ -304,7 +304,7 @@ TEST_F(SecurityTest, discovered_participant_validation_remote_identity_pending_h
     EXPECT_CALL(*auth_plugin_, return_handshake_handle(&handshake_handle, _)).Times(1).
             WillOnce(Return(true));
     EXPECT_CALL(participant_, pdp()).Times(2).WillRepeatedly(Return(&pdp_));
-    EXPECT_CALL(pdp_, notifyAboveRemoteEndpoints(_)).Times(1);
+    EXPECT_CALL(pdp_, notifyAboveRemoteEndpoints(_, true)).Times(1);
     EXPECT_CALL(pdp_, get_participant_proxy_data_serialized(BIGEND)).Times(1);
     EXPECT_CALL(*auth_plugin_, get_shared_secret(Ref(handshake_handle), _)).Times(1).
             WillOnce(Return(shared_secret_handle));
