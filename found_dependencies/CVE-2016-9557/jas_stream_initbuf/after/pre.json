[
    {
        "line": 6,
        "fullcodeline": "assert(!stream->bufbase_);"
    },
    {
        "line": 39,
        "fullcodeline": "stream->bufstart_ = &stream->bufbase_[JAS_STREAM_MAXPUTBACK];"
    },
    {
        "line": 40,
        "fullcodeline": "stream->ptr_ = stream->bufstart_;"
    },
    {
        "line": 41,
        "fullcodeline": "stream->cnt_ = 0;"
    },
    {
        "line": 42,
        "fullcodeline": "stream->bufmode_ |= bufmode & JAS_STREAM_BUFMODEMASK;"
    },
    {
        "line": 8,
        "fullcodeline": "if (bufmode != JAS_STREAM_UNBUF) {"
    },
    {
        "line": 10,
        "fullcodeline": "if (!buf) {"
    },
    {
        "line": 34,
        "fullcodeline": "assert(!buf);"
    },
    {
        "line": 36,
        "fullcodeline": "stream->bufbase_ = stream->tinybuf_;"
    },
    {
        "line": 37,
        "fullcodeline": "stream->bufsize_ = 1;"
    },
    {
        "line": 13,
        "fullcodeline": "if ((stream->bufbase_ = jas_malloc(JAS_STREAM_BUFSIZE +"
    },
    {
        "line": 27,
        "fullcodeline": "assert(bufsize > JAS_STREAM_MAXPUTBACK);"
    },
    {
        "line": 29,
        "fullcodeline": "stream->bufsize_ = bufsize - JAS_STREAM_MAXPUTBACK;"
    },
    {
        "line": 15,
        "fullcodeline": "stream->bufmode_ |= JAS_STREAM_FREEBUF;"
    },
    {
        "line": 16,
        "fullcodeline": "stream->bufsize_ = JAS_STREAM_BUFSIZE;"
    },
    {
        "line": 20,
        "fullcodeline": "stream->bufbase_ = stream->tinybuf_;"
    },
    {
        "line": 21,
        "fullcodeline": "stream->bufsize_ = 1;"
    }
]