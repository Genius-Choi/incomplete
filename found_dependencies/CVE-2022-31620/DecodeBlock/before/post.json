[
    {
        "line": 6,
        "fullcodeline": "if (m_ucScanStart == 0 && m_bResidual == false) {"
    },
    {
        "line": 8,
        "fullcodeline": "struct QMContextSet::DCContextZeroSet &cz = m_Context[dc].Classify(prevdiff,small,large);"
    },
    {
        "line": 54,
        "fullcodeline": "prevdiff = diff;"
    },
    {
        "line": 60,
        "fullcodeline": "block[0] = prevdc << m_ucLowBit; // point transformation"
    },
    {
        "line": 65,
        "fullcodeline": "int k = (m_ucScanStart)?(m_ucScanStart):((m_bResidual)?0:1);"
    },
    {
        "line": 10,
        "fullcodeline": "if (m_Coder.Get(cz.S0)) {"
    },
    {
        "line": 68,
        "fullcodeline": "while(k <= m_ucScanStop && !m_Coder.Get(m_Context[ac].ACZero[k-1].SE)) {"
    },
    {
        "line": 12,
        "fullcodeline": "bool sign = m_Coder.Get(cz.SS); // sign coding, is true for negative."
    },
    {
        "line": 56,
        "fullcodeline": "prevdc   = diff;"
    },
    {
        "line": 82,
        "fullcodeline": "sign = m_Coder.Get(m_Context[ac].Uniform);"
    },
    {
        "line": 118,
        "fullcodeline": "sz++;"
    },
    {
        "line": 121,
        "fullcodeline": "block[DCT::ScanOrder[k]] = sz << m_ucLowBit;"
    },
    {
        "line": 124,
        "fullcodeline": "k++;"
    },
    {
        "line": 17,
        "fullcodeline": "if (m_Coder.Get((sign)?(cz.SN):(cz.SP))) {"
    },
    {
        "line": 51,
        "fullcodeline": "diff = 0;"
    },
    {
        "line": 58,
        "fullcodeline": "prevdc  += diff;"
    },
    {
        "line": 73,
        "fullcodeline": "while(!m_Coder.Get(m_Context[ac].ACZero[k-1].S0)) {"
    },
    {
        "line": 85,
        "fullcodeline": "if (m_Coder.Get(m_Context[ac].ACZero[k-1].SP)) {"
    },
    {
        "line": 18,
        "fullcodeline": "int  i = 0;"
    },
    {
        "line": 19,
        "fullcodeline": "LONG m = 2;"
    },
    {
        "line": 30,
        "fullcodeline": "m >>= 1;"
    },
    {
        "line": 31,
        "fullcodeline": "sz  = m;"
    },
    {
        "line": 45,
        "fullcodeline": "diff = -sz - 1;"
    },
    {
        "line": 74,
        "fullcodeline": "k++;"
    },
    {
        "line": 120,
        "fullcodeline": "sz = -sz;"
    },
    {
        "line": 21,
        "fullcodeline": "while(m_Coder.Get(m_Context[dc].DCMagnitude.X[i])) {"
    },
    {
        "line": 34,
        "fullcodeline": "while((m >>= 1)) {"
    },
    {
        "line": 40,
        "fullcodeline": "sz = 0;"
    },
    {
        "line": 47,
        "fullcodeline": "diff = sz + 1;"
    },
    {
        "line": 75,
        "fullcodeline": "if (k > m_ucScanStop)"
    },
    {
        "line": 87,
        "fullcodeline": "if (m_Coder.Get(m_Context[ac].ACZero[k-1].SP)) {"
    },
    {
        "line": 114,
        "fullcodeline": "sz = 0;"
    },
    {
        "line": 22,
        "fullcodeline": "m <<= 1;"
    },
    {
        "line": 23,
        "fullcodeline": "i++;"
    },
    {
        "line": 76,
        "fullcodeline": "JPG_THROW(MALFORMED_STREAM,\"ACSequentialScan::DecodeBlock\","
    },
    {
        "line": 88,
        "fullcodeline": "int  i = 0;"
    },
    {
        "line": 89,
        "fullcodeline": "LONG m = 4;"
    },
    {
        "line": 101,
        "fullcodeline": "m >>= 1;"
    },
    {
        "line": 102,
        "fullcodeline": "sz  = m;"
    },
    {
        "line": 24,
        "fullcodeline": "if (m == 0)"
    },
    {
        "line": 35,
        "fullcodeline": "if (m_Coder.Get(m_Context[dc].DCMagnitude.M[i])) {"
    },
    {
        "line": 92,
        "fullcodeline": "while(m_Coder.Get(acm.X[i])) {"
    },
    {
        "line": 105,
        "fullcodeline": "while((m >>= 1)) {"
    },
    {
        "line": 111,
        "fullcodeline": "sz = 1;"
    },
    {
        "line": 25,
        "fullcodeline": "JPG_THROW(MALFORMED_STREAM,\"ACSequentialScan::DecodeBlock\","
    },
    {
        "line": 36,
        "fullcodeline": "sz |= m;"
    },
    {
        "line": 90,
        "fullcodeline": "struct QMContextSet::ACContextMagnitudeSet &acm = (k > kx)?(m_Context[ac].ACMagnitudeHigh):(m_Context[ac].ACMagnitudeLow);"
    },
    {
        "line": 93,
        "fullcodeline": "m <<= 1;"
    },
    {
        "line": 94,
        "fullcodeline": "i++;"
    },
    {
        "line": 95,
        "fullcodeline": "if (m == 0)"
    },
    {
        "line": 106,
        "fullcodeline": "if (m_Coder.Get(acm.M[i])) {"
    },
    {
        "line": 96,
        "fullcodeline": "JPG_THROW(MALFORMED_STREAM,\"ACSequentialScan::DecodeBlock\","
    },
    {
        "line": 107,
        "fullcodeline": "sz |= m;"
    }
]