[
    {
        "line": 48,
        "fullcodeline": "model = context['model']"
    },
    {
        "line": 49,
        "fullcodeline": "schema = context.get('schema') or ckan.logic.schema.default_user_schema()"
    },
    {
        "line": 50,
        "fullcodeline": "session = context['session']"
    },
    {
        "line": 52,
        "fullcodeline": "_check_access('user_create', context, data_dict)"
    },
    {
        "line": 54,
        "fullcodeline": "upload = uploader.get_uploader('user')"
    },
    {
        "line": 55,
        "fullcodeline": "upload.update_data_dict(data_dict, 'image_url',"
    },
    {
        "line": 67,
        "fullcodeline": "user = model_save.user_dict_save(data, context)"
    },
    {
        "line": 71,
        "fullcodeline": "session.flush()"
    },
    {
        "line": 73,
        "fullcodeline": "activity_create_context = {"
    },
    {
        "line": 80,
        "fullcodeline": "activity_dict = {"
    },
    {
        "line": 85,
        "fullcodeline": "logic.get_action('activity_create')(activity_create_context, activity_dict)"
    },
    {
        "line": 87,
        "fullcodeline": "upload.upload(uploader.get_max_image_size())"
    },
    {
        "line": 97,
        "fullcodeline": "user_dictize_context = context.copy()"
    },
    {
        "line": 98,
        "fullcodeline": "user_dictize_context['keep_apikey'] = True"
    },
    {
        "line": 99,
        "fullcodeline": "user_dictize_context['keep_email'] = True"
    },
    {
        "line": 101,
        "fullcodeline": "author_obj = model.User.get(context.get('user'))"
    },
    {
        "line": 102,
        "fullcodeline": "include_plugin_extras = False"
    },
    {
        "line": 105,
        "fullcodeline": "user_dict = model_dictize.user_dictize("
    },
    {
        "line": 110,
        "fullcodeline": "context['user_obj'] = user"
    },
    {
        "line": 111,
        "fullcodeline": "context['id'] = user.id"
    },
    {
        "line": 115,
        "fullcodeline": "log.debug('Created user {name}'.format(name=user.name))"
    },
    {
        "line": 57,
        "fullcodeline": "data, errors = _validate(data_dict, schema, context)"
    },
    {
        "line": 64,
        "fullcodeline": "if 'password_hash' in data:"
    },
    {
        "line": 89,
        "fullcodeline": "if not context.get('defer_commit'):"
    },
    {
        "line": 113,
        "fullcodeline": "model.Dashboard.get(user.id)  # Create dashboard for user."
    },
    {
        "line": 60,
        "fullcodeline": "session.rollback()"
    },
    {
        "line": 61,
        "fullcodeline": "raise ValidationError(errors)"
    },
    {
        "line": 65,
        "fullcodeline": "data['_password'] = data.pop('password_hash')"
    },
    {
        "line": 104,
        "fullcodeline": "include_plugin_extras = author_obj.sysadmin and 'plugin_extras' in data"
    },
    {
        "line": 90,
        "fullcodeline": "model.repo.commit()"
    }
]