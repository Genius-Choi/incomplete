[
    {
        "line": 3,
        "fullcodeline": "pool_ctx *ctx = (pool_ctx *)ctx_ptr;"
    },
    {
        "line": 4,
        "fullcodeline": "pool_chunk *cur = ((pool_chunk *)ptr) - 1, *prev, *next, *tmp;"
    },
    {
        "line": 9,
        "fullcodeline": "size = size_align_up(size, sizeof(pool_chunk)) + sizeof(pool_chunk);"
    },
    {
        "line": 25,
        "fullcodeline": "next = ctx->free_list;"
    },
    {
        "line": 51,
        "fullcodeline": "new_ptr = pool_malloc(ctx_ptr, size - sizeof(pool_chunk));"
    },
    {
        "line": 8,
        "fullcodeline": "if (unlikely(size == 0 || size >= ctx->size)) return NULL;"
    },
    {
        "line": 26,
        "fullcodeline": "while (next && next < cur) {"
    },
    {
        "line": 12,
        "fullcodeline": "if (unlikely(size <= cur->size)) {"
    },
    {
        "line": 13,
        "fullcodeline": "free_size = cur->size - size;"
    },
    {
        "line": 28,
        "fullcodeline": "next = next->next;"
    },
    {
        "line": 32,
        "fullcodeline": "if ((u8 *)cur + cur->size == (u8 *)next &&"
    },
    {
        "line": 33,
        "fullcodeline": "cur->size + next->size >= size) {"
    },
    {
        "line": 34,
        "fullcodeline": "free_size = cur->size + next->size - size;"
    },
    {
        "line": 53,
        "fullcodeline": "memcpy(new_ptr, ptr, cur->size - sizeof(pool_chunk));"
    },
    {
        "line": 14,
        "fullcodeline": "if (free_size >= sizeof(pool_chunk) * 2) {"
    },
    {
        "line": 35,
        "fullcodeline": "if (free_size > sizeof(pool_chunk) * 2) {"
    },
    {
        "line": 15,
        "fullcodeline": "tmp = (pool_chunk *)(void *)((u8 *)cur + cur->size - free_size);"
    },
    {
        "line": 16,
        "fullcodeline": "tmp->size = free_size;"
    },
    {
        "line": 36,
        "fullcodeline": "tmp = (pool_chunk *)(void *)((u8 *)cur + size);"
    }
]