[
    {
        "line": 48,
        "fullcodeline": "const char_enc_type *enc_table = get_enc_table_with_flag(flg);"
    },
    {
        "line": 49,
        "fullcodeline": "bool cpy = (enc_table == enc_table_cpy);"
    },
    {
        "line": 50,
        "fullcodeline": "bool esc = has_write_flag(ESCAPE_UNICODE) != 0;"
    },
    {
        "line": 51,
        "fullcodeline": "bool inv = has_write_flag(ALLOW_INVALID_UNICODE) != 0;"
    },
    {
        "line": 52,
        "fullcodeline": "bool newline = has_write_flag(NEWLINE_AT_END) != 0;"
    },
    {
        "line": 54,
        "fullcodeline": "alc_len = root->uni.ofs / sizeof(yyjson_val);"
    },
    {
        "line": 55,
        "fullcodeline": "alc_len = alc_len * YYJSON_WRITER_ESTIMATED_MINIFY_RATIO + 64;"
    },
    {
        "line": 56,
        "fullcodeline": "alc_len = size_align_up(alc_len, sizeof(yyjson_write_ctx));"
    },
    {
        "line": 57,
        "fullcodeline": "hdr = (u8 *)alc.malloc(alc.ctx, alc_len);"
    },
    {
        "line": 59,
        "fullcodeline": "cur = hdr;"
    },
    {
        "line": 60,
        "fullcodeline": "end = hdr + alc_len;"
    },
    {
        "line": 61,
        "fullcodeline": "ctx = (yyjson_write_ctx *)(void *)end;"
    },
    {
        "line": 65,
        "fullcodeline": "val_type = unsafe_yyjson_get_type(val);"
    },
    {
        "line": 66,
        "fullcodeline": "ctn_obj = (val_type == YYJSON_TYPE_OBJ);"
    },
    {
        "line": 67,
        "fullcodeline": "ctn_len = unsafe_yyjson_get_len(val) << (u8)ctn_obj;"
    },
    {
        "line": 68,
        "fullcodeline": "*cur++ = (u8)('[' | ((u8)ctn_obj << 5));"
    },
    {
        "line": 69,
        "fullcodeline": "val++;"
    },
    {
        "line": 72,
        "fullcodeline": "val_type = unsafe_yyjson_get_type(val);"
    },
    {
        "line": 140,
        "fullcodeline": "val++;"
    },
    {
        "line": 141,
        "fullcodeline": "ctn_len--;"
    },
    {
        "line": 146,
        "fullcodeline": "cur--;"
    },
    {
        "line": 147,
        "fullcodeline": "*cur++ = (u8)(']' | ((u8)ctn_obj << 5));"
    },
    {
        "line": 148,
        "fullcodeline": "*cur++ = ',';"
    },
    {
        "line": 150,
        "fullcodeline": "yyjson_write_ctx_get(ctx++, &ctn_len, &ctn_obj);"
    },
    {
        "line": 151,
        "fullcodeline": "ctn_len--;"
    },
    {
        "line": 164,
        "fullcodeline": "*--cur = '\\0';"
    },
    {
        "line": 165,
        "fullcodeline": "*dat_len = (usize)(cur - hdr);"
    },
    {
        "line": 166,
        "fullcodeline": "memset(err, 0, sizeof(yyjson_write_err));"
    },
    {
        "line": 170,
        "fullcodeline": "return_err(MEMORY_ALLOCATION, \"memory allocation failed\");"
    },
    {
        "line": 172,
        "fullcodeline": "return_err(INVALID_VALUE_TYPE, \"invalid JSON value type\");"
    },
    {
        "line": 174,
        "fullcodeline": "return_err(NAN_OR_INF, \"nan or inf number is not allowed\");"
    },
    {
        "line": 176,
        "fullcodeline": "return_err(INVALID_STRING, \"invalid utf-8 encoding in string\");"
    },
    {
        "line": 58,
        "fullcodeline": "if (!hdr) goto fail_alloc;"
    },
    {
        "line": 73,
        "fullcodeline": "if (val_type == YYJSON_TYPE_STR) {"
    },
    {
        "line": 88,
        "fullcodeline": "if (val_type == YYJSON_TYPE_NUM) {"
    },
    {
        "line": 95,
        "fullcodeline": "if ((val_type & (YYJSON_TYPE_ARR & YYJSON_TYPE_OBJ)) =="
    },
    {
        "line": 116,
        "fullcodeline": "if (val_type == YYJSON_TYPE_BOOL) {"
    },
    {
        "line": 122,
        "fullcodeline": "if (val_type == YYJSON_TYPE_NULL) {"
    },
    {
        "line": 128,
        "fullcodeline": "if (val_type == YYJSON_TYPE_RAW) {"
    },
    {
        "line": 142,
        "fullcodeline": "if (unlikely(ctn_len == 0)) goto ctn_end;"
    },
    {
        "line": 149,
        "fullcodeline": "if (unlikely((u8 *)ctx >= end)) goto doc_end;"
    },
    {
        "line": 152,
        "fullcodeline": "if (likely(ctn_len > 0)) {"
    },
    {
        "line": 74,
        "fullcodeline": "is_key = ((u8)ctn_obj & (u8)~ctn_len);"
    },
    {
        "line": 75,
        "fullcodeline": "str_len = unsafe_yyjson_get_len(val);"
    },
    {
        "line": 76,
        "fullcodeline": "str_ptr = (const u8 *)unsafe_yyjson_get_str(val);"
    },
    {
        "line": 77,
        "fullcodeline": "check_str_len(str_len);"
    },
    {
        "line": 78,
        "fullcodeline": "incr_len(str_len * 6 + 16);"
    },
    {
        "line": 85,
        "fullcodeline": "*cur++ = is_key ? ':' : ',';"
    },
    {
        "line": 89,
        "fullcodeline": "incr_len(32);"
    },
    {
        "line": 90,
        "fullcodeline": "cur = write_number(cur, val, flg);"
    },
    {
        "line": 92,
        "fullcodeline": "*cur++ = ',';"
    },
    {
        "line": 96,
        "fullcodeline": "(YYJSON_TYPE_ARR & YYJSON_TYPE_OBJ)) {"
    },
    {
        "line": 97,
        "fullcodeline": "ctn_len_tmp = unsafe_yyjson_get_len(val);"
    },
    {
        "line": 98,
        "fullcodeline": "ctn_obj_tmp = (val_type == YYJSON_TYPE_OBJ);"
    },
    {
        "line": 99,
        "fullcodeline": "incr_len(16);"
    },
    {
        "line": 117,
        "fullcodeline": "incr_len(16);"
    },
    {
        "line": 118,
        "fullcodeline": "cur = write_bool(cur, unsafe_yyjson_get_bool(val));"
    },
    {
        "line": 119,
        "fullcodeline": "cur++;"
    },
    {
        "line": 123,
        "fullcodeline": "incr_len(16);"
    },
    {
        "line": 124,
        "fullcodeline": "cur = write_null(cur);"
    },
    {
        "line": 125,
        "fullcodeline": "cur++;"
    },
    {
        "line": 129,
        "fullcodeline": "str_len = unsafe_yyjson_get_len(val);"
    },
    {
        "line": 130,
        "fullcodeline": "str_ptr = (const u8 *)unsafe_yyjson_get_str(val);"
    },
    {
        "line": 131,
        "fullcodeline": "check_str_len(str_len);"
    },
    {
        "line": 132,
        "fullcodeline": "incr_len(str_len + 2);"
    },
    {
        "line": 133,
        "fullcodeline": "cur = write_raw(cur, str_ptr, str_len);"
    },
    {
        "line": 134,
        "fullcodeline": "*cur++ = ',';"
    },
    {
        "line": 160,
        "fullcodeline": "incr_len(2);"
    },
    {
        "line": 161,
        "fullcodeline": "*(cur - 1) = '\\n';"
    },
    {
        "line": 162,
        "fullcodeline": "cur++;"
    },
    {
        "line": 79,
        "fullcodeline": "if (likely(cpy) && unsafe_yyjson_get_subtype(val)) {"
    },
    {
        "line": 91,
        "fullcodeline": "if (unlikely(!cur)) goto fail_num;"
    },
    {
        "line": 100,
        "fullcodeline": "if (unlikely(ctn_len_tmp == 0)) {"
    },
    {
        "line": 80,
        "fullcodeline": "cur = write_string_noesc(cur, str_ptr, str_len);"
    },
    {
        "line": 102,
        "fullcodeline": "*cur++ = (u8)('[' | ((u8)ctn_obj_tmp << 5));"
    },
    {
        "line": 103,
        "fullcodeline": "*cur++ = (u8)(']' | ((u8)ctn_obj_tmp << 5));"
    },
    {
        "line": 104,
        "fullcodeline": "*cur++ = ',';"
    },
    {
        "line": 82,
        "fullcodeline": "cur = write_string(cur, esc, inv, str_ptr, str_len, enc_table);"
    },
    {
        "line": 108,
        "fullcodeline": "yyjson_write_ctx_set(--ctx, ctn_len, ctn_obj);"
    },
    {
        "line": 109,
        "fullcodeline": "ctn_len = ctn_len_tmp << (u8)ctn_obj_tmp;"
    },
    {
        "line": 110,
        "fullcodeline": "ctn_obj = ctn_obj_tmp;"
    },
    {
        "line": 111,
        "fullcodeline": "*cur++ = (u8)('[' | ((u8)ctn_obj << 5));"
    },
    {
        "line": 112,
        "fullcodeline": "val++;"
    },
    {
        "line": 83,
        "fullcodeline": "if (unlikely(!cur)) goto fail_str;"
    }
]