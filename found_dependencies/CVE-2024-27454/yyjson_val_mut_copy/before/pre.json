[
    {
        "line": 14,
        "fullcodeline": "i_end = unsafe_yyjson_get_next(i_vals);"
    },
    {
        "line": 15,
        "fullcodeline": "i_vals_len = (usize)(unsafe_yyjson_get_next(i_vals) - i_vals);"
    },
    {
        "line": 16,
        "fullcodeline": "m_vals = unsafe_yyjson_mut_val(m_doc, i_vals_len);"
    },
    {
        "line": 18,
        "fullcodeline": "i_val = i_vals;"
    },
    {
        "line": 19,
        "fullcodeline": "m_val = m_vals;"
    },
    {
        "line": 13,
        "fullcodeline": "if (!m_doc || !i_vals) return NULL;"
    },
    {
        "line": 17,
        "fullcodeline": "if (!m_vals) return NULL;"
    },
    {
        "line": 21,
        "fullcodeline": "for (; i_val < i_end; i_val++, m_val++) {"
    },
    {
        "line": 22,
        "fullcodeline": "yyjson_type type = unsafe_yyjson_get_type(i_val);"
    },
    {
        "line": 23,
        "fullcodeline": "m_val->tag = i_val->tag;"
    },
    {
        "line": 25,
        "fullcodeline": "if (type == YYJSON_TYPE_STR || type == YYJSON_TYPE_RAW) {"
    },
    {
        "line": 26,
        "fullcodeline": "const char *str = i_val->uni.str;"
    },
    {
        "line": 27,
        "fullcodeline": "usize str_len = unsafe_yyjson_get_len(i_val);"
    },
    {
        "line": 28,
        "fullcodeline": "m_val->uni.str = unsafe_yyjson_mut_strncpy(m_doc, str, str_len);"
    },
    {
        "line": 30,
        "fullcodeline": "} else if (type == YYJSON_TYPE_ARR) {"
    },
    {
        "line": 31,
        "fullcodeline": "usize len = unsafe_yyjson_get_len(i_val);"
    },
    {
        "line": 32,
        "fullcodeline": "if (len > 0) {"
    },
    {
        "line": 33,
        "fullcodeline": "yyjson_val *ii_val = i_val + 1, *ii_next;"
    },
    {
        "line": 34,
        "fullcodeline": "yyjson_mut_val *mm_val = m_val + 1, *mm_ctn = m_val, *mm_next;"
    },
    {
        "line": 42,
        "fullcodeline": "mm_val->next = mm_ctn + 1;"
    },
    {
        "line": 45,
        "fullcodeline": "} else if (type == YYJSON_TYPE_OBJ) {"
    },
    {
        "line": 46,
        "fullcodeline": "usize len = unsafe_yyjson_get_len(i_val);"
    },
    {
        "line": 35,
        "fullcodeline": "while (len-- > 1) {"
    },
    {
        "line": 36,
        "fullcodeline": "ii_next = unsafe_yyjson_get_next(ii_val);"
    },
    {
        "line": 37,
        "fullcodeline": "mm_next = mm_val + (ii_next - ii_val);"
    },
    {
        "line": 38,
        "fullcodeline": "mm_val->next = mm_next;"
    },
    {
        "line": 39,
        "fullcodeline": "ii_val = ii_next;"
    },
    {
        "line": 40,
        "fullcodeline": "mm_val = mm_next;"
    },
    {
        "line": 47,
        "fullcodeline": "if (len > 0) {"
    },
    {
        "line": 48,
        "fullcodeline": "yyjson_val *ii_key = i_val + 1, *ii_nextkey;"
    },
    {
        "line": 49,
        "fullcodeline": "yyjson_mut_val *mm_key = m_val + 1, *mm_ctn = m_val;"
    },
    {
        "line": 59,
        "fullcodeline": "mm_key->next = mm_key + 1;"
    },
    {
        "line": 51,
        "fullcodeline": "while (len-- > 1) {"
    },
    {
        "line": 52,
        "fullcodeline": "ii_nextkey = unsafe_yyjson_get_next(ii_key + 1);"
    },
    {
        "line": 53,
        "fullcodeline": "mm_nextkey = mm_key + (ii_nextkey - ii_key);"
    },
    {
        "line": 54,
        "fullcodeline": "mm_key->next = mm_key + 1;"
    },
    {
        "line": 56,
        "fullcodeline": "ii_key = ii_nextkey;"
    },
    {
        "line": 57,
        "fullcodeline": "mm_key = mm_nextkey;"
    }
]