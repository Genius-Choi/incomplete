[
    {
        "line": 6,
        "fullcodeline": "*alc = YYJSON_NULL_ALC;"
    },
    {
        "line": 8,
        "fullcodeline": "ctx = (pool_ctx *)mem_align_up(buf, sizeof(pool_ctx));"
    },
    {
        "line": 10,
        "fullcodeline": "size -= (usize)((u8 *)ctx - (u8 *)buf);"
    },
    {
        "line": 11,
        "fullcodeline": "size = size_align_down(size, sizeof(pool_ctx));"
    },
    {
        "line": 13,
        "fullcodeline": "chunk = (pool_chunk *)(ctx + 1);"
    },
    {
        "line": 14,
        "fullcodeline": "chunk->size = size - sizeof(pool_ctx);"
    },
    {
        "line": 15,
        "fullcodeline": "chunk->next = NULL;"
    },
    {
        "line": 16,
        "fullcodeline": "ctx->size = size;"
    },
    {
        "line": 17,
        "fullcodeline": "ctx->free_list = chunk;"
    },
    {
        "line": 19,
        "fullcodeline": "alc->malloc = pool_malloc;"
    },
    {
        "line": 20,
        "fullcodeline": "alc->realloc = pool_realloc;"
    },
    {
        "line": 21,
        "fullcodeline": "alc->free = pool_free;"
    },
    {
        "line": 5,
        "fullcodeline": "if (unlikely(!alc)) return false;"
    },
    {
        "line": 7,
        "fullcodeline": "if (size < sizeof(pool_ctx) * 4) return false;"
    },
    {
        "line": 9,
        "fullcodeline": "if (unlikely(!ctx)) return false;"
    }
]