[
    {
        "line": 58,
        "fullcodeline": "dat_len = has_read_flag(STOP_WHEN_DONE) ? 256 : (usize)(end - cur);"
    },
    {
        "line": 59,
        "fullcodeline": "hdr_len = sizeof(yyjson_doc) / sizeof(yyjson_val);"
    },
    {
        "line": 60,
        "fullcodeline": "hdr_len += (sizeof(yyjson_doc) % sizeof(yyjson_val)) > 0;"
    },
    {
        "line": 61,
        "fullcodeline": "alc_max = USIZE_MAX / sizeof(yyjson_val);"
    },
    {
        "line": 62,
        "fullcodeline": "alc_len = hdr_len + (dat_len / YYJSON_READER_ESTIMATED_MINIFY_RATIO) + 4;"
    },
    {
        "line": 63,
        "fullcodeline": "alc_len = yyjson_min(alc_len, alc_max);"
    },
    {
        "line": 65,
        "fullcodeline": "val_hdr = (yyjson_val *)alc.malloc(alc.ctx, alc_len * sizeof(yyjson_val));"
    },
    {
        "line": 67,
        "fullcodeline": "val_end = val_hdr + (alc_len - 2); /* padding for key-value pair reading */"
    },
    {
        "line": 68,
        "fullcodeline": "val = val_hdr + hdr_len;"
    },
    {
        "line": 69,
        "fullcodeline": "ctn = val;"
    },
    {
        "line": 70,
        "fullcodeline": "ctn_len = 0;"
    },
    {
        "line": 71,
        "fullcodeline": "raw = has_read_flag(NUMBER_AS_RAW) || has_read_flag(BIGNUM_AS_RAW);"
    },
    {
        "line": 72,
        "fullcodeline": "inv = has_read_flag(ALLOW_INVALID_UNICODE) != 0;"
    },
    {
        "line": 73,
        "fullcodeline": "raw_end = NULL;"
    },
    {
        "line": 74,
        "fullcodeline": "pre = raw ? &raw_end : NULL;"
    },
    {
        "line": 88,
        "fullcodeline": "ctn->tag = (((u64)ctn_len + 1) << YYJSON_TAG_BIT) |"
    },
    {
        "line": 92,
        "fullcodeline": "val_incr();"
    },
    {
        "line": 93,
        "fullcodeline": "val->tag = YYJSON_TYPE_ARR;"
    },
    {
        "line": 94,
        "fullcodeline": "val->uni.ofs = (usize)((u8 *)val - (u8 *)ctn);"
    },
    {
        "line": 97,
        "fullcodeline": "ctn = val;"
    },
    {
        "line": 98,
        "fullcodeline": "ctn_len = 0;"
    },
    {
        "line": 187,
        "fullcodeline": "ctn_parent = (yyjson_val *)(void *)((u8 *)ctn - ctn->uni.ofs);"
    },
    {
        "line": 190,
        "fullcodeline": "ctn->uni.ofs = (usize)((u8 *)val - (u8 *)ctn) + sizeof(yyjson_val);"
    },
    {
        "line": 191,
        "fullcodeline": "ctn->tag = ((ctn_len) << YYJSON_TAG_BIT) | YYJSON_TYPE_ARR;"
    },
    {
        "line": 195,
        "fullcodeline": "ctn = ctn_parent;"
    },
    {
        "line": 196,
        "fullcodeline": "ctn_len = (usize)(ctn->tag >> YYJSON_TAG_BIT);"
    },
    {
        "line": 205,
        "fullcodeline": "ctn->tag = (((u64)ctn_len + 1) << YYJSON_TAG_BIT) |"
    },
    {
        "line": 207,
        "fullcodeline": "val_incr();"
    },
    {
        "line": 208,
        "fullcodeline": "val->tag = YYJSON_TYPE_OBJ;"
    },
    {
        "line": 210,
        "fullcodeline": "val->uni.ofs = (usize)((u8 *)val - (u8 *)ctn);"
    },
    {
        "line": 211,
        "fullcodeline": "ctn = val;"
    },
    {
        "line": 212,
        "fullcodeline": "ctn_len = 0;"
    },
    {
        "line": 333,
        "fullcodeline": "ctn_parent = (yyjson_val *)(void *)((u8 *)ctn - ctn->uni.ofs);"
    },
    {
        "line": 335,
        "fullcodeline": "ctn->uni.ofs = (usize)((u8 *)val - (u8 *)ctn) + sizeof(yyjson_val);"
    },
    {
        "line": 336,
        "fullcodeline": "ctn->tag = (ctn_len << (YYJSON_TAG_BIT - 1)) | YYJSON_TYPE_OBJ;"
    },
    {
        "line": 338,
        "fullcodeline": "ctn = ctn_parent;"
    },
    {
        "line": 339,
        "fullcodeline": "ctn_len = (usize)(ctn->tag >> YYJSON_TAG_BIT);"
    },
    {
        "line": 359,
        "fullcodeline": "doc = (yyjson_doc *)val_hdr;"
    },
    {
        "line": 360,
        "fullcodeline": "doc->root = val_hdr + hdr_len;"
    },
    {
        "line": 361,
        "fullcodeline": "doc->alc = alc;"
    },
    {
        "line": 362,
        "fullcodeline": "doc->dat_read = (usize)(cur - hdr);"
    },
    {
        "line": 363,
        "fullcodeline": "doc->val_read = (usize)((val - doc->root) + 1);"
    },
    {
        "line": 364,
        "fullcodeline": "doc->str_pool = has_read_flag(INSITU) ? NULL : (char *)hdr;"
    },
    {
        "line": 368,
        "fullcodeline": "return_err(cur, INVALID_STRING, msg);"
    },
    {
        "line": 370,
        "fullcodeline": "return_err(cur, INVALID_NUMBER, msg);"
    },
    {
        "line": 372,
        "fullcodeline": "return_err(cur, MEMORY_ALLOCATION, \"memory allocation failed\");"
    },
    {
        "line": 374,
        "fullcodeline": "return_err(cur, JSON_STRUCTURE, \"trailing comma is not allowed\");"
    },
    {
        "line": 376,
        "fullcodeline": "return_err(cur, LITERAL, \"invalid literal\");"
    },
    {
        "line": 378,
        "fullcodeline": "return_err(cur, INVALID_COMMENT, \"unclosed multiline comment\");"
    },
    {
        "line": 380,
        "fullcodeline": "return_err(cur, UNEXPECTED_CHARACTER, \"unexpected character\");"
    },
    {
        "line": 382,
        "fullcodeline": "return_err(cur, UNEXPECTED_CONTENT, \"unexpected content after document\");"
    },
    {
        "line": 66,
        "fullcodeline": "if (unlikely(!val_hdr)) goto fail_alloc;"
    },
    {
        "line": 76,
        "fullcodeline": "if (*cur++ == '{') {"
    },
    {
        "line": 101,
        "fullcodeline": "if (*cur == '{') {"
    },
    {
        "line": 105,
        "fullcodeline": "if (*cur == '[') {"
    },
    {
        "line": 109,
        "fullcodeline": "if (char_is_number(*cur)) {"
    },
    {
        "line": 115,
        "fullcodeline": "if (*cur == '\"') {"
    },
    {
        "line": 121,
        "fullcodeline": "if (*cur == 't') {"
    },
    {
        "line": 127,
        "fullcodeline": "if (*cur == 'f') {"
    },
    {
        "line": 133,
        "fullcodeline": "if (*cur == 'n') {"
    },
    {
        "line": 142,
        "fullcodeline": "if (*cur == ']') {"
    },
    {
        "line": 149,
        "fullcodeline": "if (char_is_space(*cur)) {"
    },
    {
        "line": 153,
        "fullcodeline": "if (has_read_flag(ALLOW_INF_AND_NAN) &&"
    },
    {
        "line": 160,
        "fullcodeline": "if (has_read_flag(ALLOW_COMMENTS)) {"
    },
    {
        "line": 167,
        "fullcodeline": "if (*cur == ',') {"
    },
    {
        "line": 171,
        "fullcodeline": "if (*cur == ']') {"
    },
    {
        "line": 175,
        "fullcodeline": "if (char_is_space(*cur)) {"
    },
    {
        "line": 179,
        "fullcodeline": "if (has_read_flag(ALLOW_COMMENTS)) {"
    },
    {
        "line": 192,
        "fullcodeline": "if (unlikely(ctn == ctn_parent)) goto doc_end;"
    },
    {
        "line": 197,
        "fullcodeline": "if ((ctn->tag & YYJSON_TYPE_MASK) == YYJSON_TYPE_OBJ) {"
    },
    {
        "line": 215,
        "fullcodeline": "if (likely(*cur == '\"')) {"
    },
    {
        "line": 221,
        "fullcodeline": "if (likely(*cur == '}')) {"
    },
    {
        "line": 228,
        "fullcodeline": "if (char_is_space(*cur)) {"
    },
    {
        "line": 232,
        "fullcodeline": "if (has_read_flag(ALLOW_COMMENTS)) {"
    },
    {
        "line": 239,
        "fullcodeline": "if (*cur == ':') {"
    },
    {
        "line": 243,
        "fullcodeline": "if (char_is_space(*cur)) {"
    },
    {
        "line": 247,
        "fullcodeline": "if (has_read_flag(ALLOW_COMMENTS)) {"
    },
    {
        "line": 254,
        "fullcodeline": "if (*cur == '\"') {"
    },
    {
        "line": 260,
        "fullcodeline": "if (char_is_number(*cur)) {"
    },
    {
        "line": 266,
        "fullcodeline": "if (*cur == '{') {"
    },
    {
        "line": 270,
        "fullcodeline": "if (*cur == '[') {"
    },
    {
        "line": 274,
        "fullcodeline": "if (*cur == 't') {"
    },
    {
        "line": 280,
        "fullcodeline": "if (*cur == 'f') {"
    },
    {
        "line": 286,
        "fullcodeline": "if (*cur == 'n') {"
    },
    {
        "line": 295,
        "fullcodeline": "if (char_is_space(*cur)) {"
    },
    {
        "line": 299,
        "fullcodeline": "if (has_read_flag(ALLOW_INF_AND_NAN) &&"
    },
    {
        "line": 306,
        "fullcodeline": "if (has_read_flag(ALLOW_COMMENTS)) {"
    },
    {
        "line": 313,
        "fullcodeline": "if (likely(*cur == ',')) {"
    },
    {
        "line": 317,
        "fullcodeline": "if (likely(*cur == '}')) {"
    },
    {
        "line": 321,
        "fullcodeline": "if (char_is_space(*cur)) {"
    },
    {
        "line": 325,
        "fullcodeline": "if (has_read_flag(ALLOW_COMMENTS)) {"
    },
    {
        "line": 337,
        "fullcodeline": "if (unlikely(ctn == ctn_parent)) goto doc_end;"
    },
    {
        "line": 340,
        "fullcodeline": "if ((ctn->tag & YYJSON_TYPE_MASK) == YYJSON_TYPE_OBJ) {"
    },
    {
        "line": 348,
        "fullcodeline": "if (unlikely(cur < end) && !has_read_flag(STOP_WHEN_DONE)) {"
    },
    {
        "line": 358,
        "fullcodeline": "if (pre && *pre) **pre = '\\0';"
    },
    {
        "line": 77,
        "fullcodeline": "ctn->tag = YYJSON_TYPE_OBJ;"
    },
    {
        "line": 78,
        "fullcodeline": "ctn->uni.ofs = 0;"
    },
    {
        "line": 89,
        "fullcodeline": "(ctn->tag & YYJSON_TAG_MASK);"
    },
    {
        "line": 102,
        "fullcodeline": "cur++;"
    },
    {
        "line": 106,
        "fullcodeline": "cur++;"
    },
    {
        "line": 110,
        "fullcodeline": "val_incr();"
    },
    {
        "line": 111,
        "fullcodeline": "ctn_len++;"
    },
    {
        "line": 116,
        "fullcodeline": "val_incr();"
    },
    {
        "line": 117,
        "fullcodeline": "ctn_len++;"
    },
    {
        "line": 122,
        "fullcodeline": "val_incr();"
    },
    {
        "line": 123,
        "fullcodeline": "ctn_len++;"
    },
    {
        "line": 128,
        "fullcodeline": "val_incr();"
    },
    {
        "line": 129,
        "fullcodeline": "ctn_len++;"
    },
    {
        "line": 134,
        "fullcodeline": "val_incr();"
    },
    {
        "line": 135,
        "fullcodeline": "ctn_len++;"
    },
    {
        "line": 143,
        "fullcodeline": "cur++;"
    },
    {
        "line": 154,
        "fullcodeline": "(*cur == 'i' || *cur == 'I' || *cur == 'N')) {"
    },
    {
        "line": 155,
        "fullcodeline": "val_incr();"
    },
    {
        "line": 156,
        "fullcodeline": "ctn_len++;"
    },
    {
        "line": 168,
        "fullcodeline": "cur++;"
    },
    {
        "line": 172,
        "fullcodeline": "cur++;"
    },
    {
        "line": 206,
        "fullcodeline": "(ctn->tag & YYJSON_TAG_MASK);"
    },
    {
        "line": 216,
        "fullcodeline": "val_incr();"
    },
    {
        "line": 217,
        "fullcodeline": "ctn_len++;"
    },
    {
        "line": 222,
        "fullcodeline": "cur++;"
    },
    {
        "line": 240,
        "fullcodeline": "cur++;"
    },
    {
        "line": 255,
        "fullcodeline": "val++;"
    },
    {
        "line": 256,
        "fullcodeline": "ctn_len++;"
    },
    {
        "line": 261,
        "fullcodeline": "val++;"
    },
    {
        "line": 262,
        "fullcodeline": "ctn_len++;"
    },
    {
        "line": 267,
        "fullcodeline": "cur++;"
    },
    {
        "line": 271,
        "fullcodeline": "cur++;"
    },
    {
        "line": 275,
        "fullcodeline": "val++;"
    },
    {
        "line": 276,
        "fullcodeline": "ctn_len++;"
    },
    {
        "line": 281,
        "fullcodeline": "val++;"
    },
    {
        "line": 282,
        "fullcodeline": "ctn_len++;"
    },
    {
        "line": 287,
        "fullcodeline": "val++;"
    },
    {
        "line": 288,
        "fullcodeline": "ctn_len++;"
    },
    {
        "line": 300,
        "fullcodeline": "(*cur == 'i' || *cur == 'I' || *cur == 'N')) {"
    },
    {
        "line": 301,
        "fullcodeline": "val++;"
    },
    {
        "line": 302,
        "fullcodeline": "ctn_len++;"
    },
    {
        "line": 314,
        "fullcodeline": "cur++;"
    },
    {
        "line": 318,
        "fullcodeline": "cur++;"
    },
    {
        "line": 81,
        "fullcodeline": "ctn->tag = YYJSON_TYPE_ARR;"
    },
    {
        "line": 82,
        "fullcodeline": "ctn->uni.ofs = 0;"
    },
    {
        "line": 112,
        "fullcodeline": "if (likely(read_number(&cur, pre, flg, val, &msg))) goto arr_val_end;"
    },
    {
        "line": 118,
        "fullcodeline": "if (likely(read_string(&cur, end, inv, val, &msg))) goto arr_val_end;"
    },
    {
        "line": 124,
        "fullcodeline": "if (likely(read_true(&cur, val))) goto arr_val_end;"
    },
    {
        "line": 130,
        "fullcodeline": "if (likely(read_false(&cur, val))) goto arr_val_end;"
    },
    {
        "line": 136,
        "fullcodeline": "if (likely(read_null(&cur, val))) goto arr_val_end;"
    },
    {
        "line": 137,
        "fullcodeline": "if (has_read_flag(ALLOW_INF_AND_NAN)) {"
    },
    {
        "line": 144,
        "fullcodeline": "if (likely(ctn_len == 0)) goto arr_end;"
    },
    {
        "line": 145,
        "fullcodeline": "if (has_read_flag(ALLOW_TRAILING_COMMAS)) goto arr_end;"
    },
    {
        "line": 146,
        "fullcodeline": "while (*cur != ',') cur--;"
    },
    {
        "line": 150,
        "fullcodeline": "while (char_is_space(*++cur));"
    },
    {
        "line": 157,
        "fullcodeline": "if (read_inf_or_nan(false, &cur, pre, val)) goto arr_val_end;"
    },
    {
        "line": 161,
        "fullcodeline": "if (skip_spaces_and_comments(&cur)) goto arr_val_begin;"
    },
    {
        "line": 162,
        "fullcodeline": "if (byte_match_2(cur, \"/*\")) goto fail_comment;"
    },
    {
        "line": 176,
        "fullcodeline": "while (char_is_space(*++cur));"
    },
    {
        "line": 180,
        "fullcodeline": "if (skip_spaces_and_comments(&cur)) goto arr_val_end;"
    },
    {
        "line": 181,
        "fullcodeline": "if (byte_match_2(cur, \"/*\")) goto fail_comment;"
    },
    {
        "line": 218,
        "fullcodeline": "if (likely(read_string(&cur, end, inv, val, &msg))) goto obj_key_end;"
    },
    {
        "line": 223,
        "fullcodeline": "if (likely(ctn_len == 0)) goto obj_end;"
    },
    {
        "line": 224,
        "fullcodeline": "if (has_read_flag(ALLOW_TRAILING_COMMAS)) goto obj_end;"
    },
    {
        "line": 225,
        "fullcodeline": "while (*cur != ',') cur--;"
    },
    {
        "line": 229,
        "fullcodeline": "while (char_is_space(*++cur));"
    },
    {
        "line": 233,
        "fullcodeline": "if (skip_spaces_and_comments(&cur)) goto obj_key_begin;"
    },
    {
        "line": 234,
        "fullcodeline": "if (byte_match_2(cur, \"/*\")) goto fail_comment;"
    },
    {
        "line": 244,
        "fullcodeline": "while (char_is_space(*++cur));"
    },
    {
        "line": 248,
        "fullcodeline": "if (skip_spaces_and_comments(&cur)) goto obj_key_end;"
    },
    {
        "line": 249,
        "fullcodeline": "if (byte_match_2(cur, \"/*\")) goto fail_comment;"
    },
    {
        "line": 257,
        "fullcodeline": "if (likely(read_string(&cur, end, inv, val, &msg))) goto obj_val_end;"
    },
    {
        "line": 263,
        "fullcodeline": "if (likely(read_number(&cur, pre, flg, val, &msg))) goto obj_val_end;"
    },
    {
        "line": 277,
        "fullcodeline": "if (likely(read_true(&cur, val))) goto obj_val_end;"
    },
    {
        "line": 283,
        "fullcodeline": "if (likely(read_false(&cur, val))) goto obj_val_end;"
    },
    {
        "line": 289,
        "fullcodeline": "if (likely(read_null(&cur, val))) goto obj_val_end;"
    },
    {
        "line": 290,
        "fullcodeline": "if (has_read_flag(ALLOW_INF_AND_NAN)) {"
    },
    {
        "line": 296,
        "fullcodeline": "while (char_is_space(*++cur));"
    },
    {
        "line": 303,
        "fullcodeline": "if (read_inf_or_nan(false, &cur, pre, val)) goto obj_val_end;"
    },
    {
        "line": 307,
        "fullcodeline": "if (skip_spaces_and_comments(&cur)) goto obj_val_begin;"
    },
    {
        "line": 308,
        "fullcodeline": "if (byte_match_2(cur, \"/*\")) goto fail_comment;"
    },
    {
        "line": 322,
        "fullcodeline": "while (char_is_space(*++cur));"
    },
    {
        "line": 326,
        "fullcodeline": "if (skip_spaces_and_comments(&cur)) goto obj_val_end;"
    },
    {
        "line": 327,
        "fullcodeline": "if (byte_match_2(cur, \"/*\")) goto fail_comment;"
    },
    {
        "line": 349,
        "fullcodeline": "if (has_read_flag(ALLOW_COMMENTS)) {"
    },
    {
        "line": 355,
        "fullcodeline": "if (unlikely(cur < end)) goto fail_garbage;"
    },
    {
        "line": 350,
        "fullcodeline": "skip_spaces_and_comments(&cur);"
    },
    {
        "line": 138,
        "fullcodeline": "if (read_nan(false, &cur, pre, val)) goto arr_val_end;"
    },
    {
        "line": 291,
        "fullcodeline": "if (read_nan(false, &cur, pre, val)) goto obj_val_end;"
    },
    {
        "line": 351,
        "fullcodeline": "if (byte_match_2(cur, \"/*\")) goto fail_comment;"
    },
    {
        "line": 353,
        "fullcodeline": "while (char_is_space(*cur)) cur++;"
    }
]