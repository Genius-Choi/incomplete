[
    {
        "line": 7,
        "fullcodeline": "max_count = USIZE_MAX / sizeof(yyjson_mut_val) - 1;"
    },
    {
        "line": 9,
        "fullcodeline": "size = (count + 1) * sizeof(yyjson_mut_val);"
    },
    {
        "line": 10,
        "fullcodeline": "size = yyjson_max(pool->chunk_size, size);"
    },
    {
        "line": 11,
        "fullcodeline": "chunk = (yyjson_val_chunk *)alc->malloc(alc->ctx, size);"
    },
    {
        "line": 15,
        "fullcodeline": "chunk->next = pool->chunks;"
    },
    {
        "line": 16,
        "fullcodeline": "chunk->chunk_size = size;"
    },
    {
        "line": 22,
        "fullcodeline": "size = yyjson_min(pool->chunk_size * 2, pool->chunk_size_max);"
    },
    {
        "line": 8,
        "fullcodeline": "if (unlikely(count > max_count)) return false;"
    },
    {
        "line": 23,
        "fullcodeline": "if (size < pool->chunk_size) size = pool->chunk_size_max; /* overflow */"
    },
    {
        "line": 12,
        "fullcodeline": "if (unlikely(!chunk)) return false;"
    }
]