[
    {
        "line": 59,
        "fullcodeline": "dat_len = has_read_flag(STOP_WHEN_DONE) ? 256 : (usize)(end - cur);"
    },
    {
        "line": 60,
        "fullcodeline": "hdr_len = sizeof(yyjson_doc) / sizeof(yyjson_val);"
    },
    {
        "line": 61,
        "fullcodeline": "hdr_len += (sizeof(yyjson_doc) % sizeof(yyjson_val)) > 0;"
    },
    {
        "line": 62,
        "fullcodeline": "alc_max = USIZE_MAX / sizeof(yyjson_val);"
    },
    {
        "line": 63,
        "fullcodeline": "alc_len = hdr_len + (dat_len / YYJSON_READER_ESTIMATED_PRETTY_RATIO) + 4;"
    },
    {
        "line": 64,
        "fullcodeline": "alc_len = yyjson_min(alc_len, alc_max);"
    },
    {
        "line": 66,
        "fullcodeline": "val_hdr = (yyjson_val *)alc.malloc(alc.ctx, alc_len * sizeof(yyjson_val));"
    },
    {
        "line": 69,
        "fullcodeline": "val = val_hdr + hdr_len;"
    },
    {
        "line": 74,
        "fullcodeline": "raw_end = NULL;"
    },
    {
        "line": 426,
        "fullcodeline": "return_err(cur, INVALID_NUMBER, msg);"
    },
    {
        "line": 428,
        "fullcodeline": "return_err(cur, MEMORY_ALLOCATION, \"memory allocation failed\");"
    },
    {
        "line": 430,
        "fullcodeline": "return_err(cur, JSON_STRUCTURE, \"trailing comma is not allowed\");"
    },
    {
        "line": 432,
        "fullcodeline": "return_err(cur, LITERAL, \"invalid literal\");"
    },
    {
        "line": 434,
        "fullcodeline": "return_err(cur, INVALID_COMMENT, \"unclosed multiline comment\");"
    },
    {
        "line": 436,
        "fullcodeline": "return_err(cur, UNEXPECTED_CHARACTER, \"unexpected character\");"
    },
    {
        "line": 438,
        "fullcodeline": "return_err(cur, UNEXPECTED_CONTENT, \"unexpected content after document\");"
    },
    {
        "line": 440,
        "fullcodeline": "return_err(cur, RECURSION_DEPTH, \"array and object recursion depth exceeded\");"
    },
    {
        "line": 72,
        "fullcodeline": "raw = has_read_flag(NUMBER_AS_RAW) || has_read_flag(BIGNUM_AS_RAW);"
    },
    {
        "line": 73,
        "fullcodeline": "inv = has_read_flag(ALLOW_INVALID_UNICODE) != 0;"
    },
    {
        "line": 67,
        "fullcodeline": "if (unlikely(!val_hdr)) goto fail_alloc;"
    },
    {
        "line": 68,
        "fullcodeline": "val_end = val_hdr + (alc_len - 2); /* padding for key-value pair reading */"
    },
    {
        "line": 420,
        "fullcodeline": "doc->str_pool = has_read_flag(INSITU) ? NULL : (char *)hdr;"
    },
    {
        "line": 77,
        "fullcodeline": "if (*cur++ == '{') {"
    },
    {
        "line": 80,
        "fullcodeline": "if (*cur == '\\n') cur++;"
    },
    {
        "line": 85,
        "fullcodeline": "if (*cur == '\\n') cur++;"
    }
]