[
    {
        "line": 26,
        "fullcodeline": "u8 *hdr = NULL, *cur;"
    },
    {
        "line": 29,
        "fullcodeline": "const char_enc_type *enc_table = get_enc_table_with_flag(flg);"
    },
    {
        "line": 30,
        "fullcodeline": "bool cpy = (enc_table == enc_table_cpy);"
    },
    {
        "line": 31,
        "fullcodeline": "bool esc = has_write_flag(ESCAPE_UNICODE) != 0;"
    },
    {
        "line": 32,
        "fullcodeline": "bool inv = has_write_flag(ALLOW_INVALID_UNICODE) != 0;"
    },
    {
        "line": 88,
        "fullcodeline": "*cur = '\\0';"
    },
    {
        "line": 89,
        "fullcodeline": "*dat_len = (usize)(cur - hdr);"
    },
    {
        "line": 90,
        "fullcodeline": "memset(err, 0, sizeof(yyjson_write_err));"
    },
    {
        "line": 94,
        "fullcodeline": "return_err(MEMORY_ALLOCATION, \"memory allocation failed\");"
    },
    {
        "line": 96,
        "fullcodeline": "return_err(INVALID_VALUE_TYPE, \"invalid JSON value type\");"
    },
    {
        "line": 98,
        "fullcodeline": "return_err(NAN_OR_INF, \"nan or inf number is not allowed\");"
    },
    {
        "line": 100,
        "fullcodeline": "return_err(INVALID_STRING, \"invalid utf-8 encoding in string\");"
    },
    {
        "line": 34,
        "fullcodeline": "switch (unsafe_yyjson_get_type(val)) {"
    },
    {
        "line": 36,
        "fullcodeline": "str_len = unsafe_yyjson_get_len(val);"
    },
    {
        "line": 37,
        "fullcodeline": "str_ptr = (const u8 *)unsafe_yyjson_get_str(val);"
    },
    {
        "line": 38,
        "fullcodeline": "check_str_len(str_len);"
    },
    {
        "line": 39,
        "fullcodeline": "incr_len(str_len + 1);"
    },
    {
        "line": 40,
        "fullcodeline": "cur = write_raw(cur, str_ptr, str_len);"
    },
    {
        "line": 44,
        "fullcodeline": "str_len = unsafe_yyjson_get_len(val);"
    },
    {
        "line": 45,
        "fullcodeline": "str_ptr = (const u8 *)unsafe_yyjson_get_str(val);"
    },
    {
        "line": 46,
        "fullcodeline": "check_str_len(str_len);"
    },
    {
        "line": 47,
        "fullcodeline": "incr_len(str_len * 6 + 4);"
    },
    {
        "line": 57,
        "fullcodeline": "incr_len(32);"
    },
    {
        "line": 58,
        "fullcodeline": "cur = write_number(cur, val, flg);"
    },
    {
        "line": 63,
        "fullcodeline": "incr_len(8);"
    },
    {
        "line": 64,
        "fullcodeline": "cur = write_bool(cur, unsafe_yyjson_get_bool(val));"
    },
    {
        "line": 68,
        "fullcodeline": "incr_len(8);"
    },
    {
        "line": 69,
        "fullcodeline": "cur = write_null(cur);"
    },
    {
        "line": 73,
        "fullcodeline": "incr_len(4);"
    },
    {
        "line": 74,
        "fullcodeline": "byte_copy_2(cur, \"[]\");"
    },
    {
        "line": 75,
        "fullcodeline": "cur += 2;"
    },
    {
        "line": 79,
        "fullcodeline": "incr_len(4);"
    },
    {
        "line": 80,
        "fullcodeline": "byte_copy_2(cur, \"{}\");"
    },
    {
        "line": 81,
        "fullcodeline": "cur += 2;"
    },
    {
        "line": 48,
        "fullcodeline": "if (likely(cpy) && unsafe_yyjson_get_subtype(val)) {"
    },
    {
        "line": 59,
        "fullcodeline": "if (unlikely(!cur)) goto fail_num;"
    },
    {
        "line": 49,
        "fullcodeline": "cur = write_string_noesc(cur, str_ptr, str_len);"
    },
    {
        "line": 51,
        "fullcodeline": "cur = write_string(cur, esc, inv, str_ptr, str_len, enc_table);"
    },
    {
        "line": 52,
        "fullcodeline": "if (unlikely(!cur)) goto fail_str;"
    }
]