[
    {
        "line": 26,
        "fullcodeline": "u8 *hdr = NULL, *cur;"
    },
    {
        "line": 29,
        "fullcodeline": "const char_enc_type *enc_table = get_enc_table_with_flag(flg);"
    },
    {
        "line": 30,
        "fullcodeline": "bool cpy = (enc_table == enc_table_cpy);"
    },
    {
        "line": 31,
        "fullcodeline": "bool esc = has_write_flag(ESCAPE_UNICODE) != 0;"
    },
    {
        "line": 32,
        "fullcodeline": "bool inv = has_write_flag(ALLOW_INVALID_UNICODE) != 0;"
    },
    {
        "line": 33,
        "fullcodeline": "bool newline = has_write_flag(NEWLINE_AT_END) != 0;"
    },
    {
        "line": 34,
        "fullcodeline": "const usize end_len = 2; /* '\\n' and '\\0' */"
    },
    {
        "line": 91,
        "fullcodeline": "*cur = '\\0';"
    },
    {
        "line": 92,
        "fullcodeline": "*dat_len = (usize)(cur - hdr);"
    },
    {
        "line": 93,
        "fullcodeline": "memset(err, 0, sizeof(yyjson_write_err));"
    },
    {
        "line": 36,
        "fullcodeline": "switch (unsafe_yyjson_get_type(val)) {"
    },
    {
        "line": 38,
        "fullcodeline": "str_len = unsafe_yyjson_get_len(val);"
    },
    {
        "line": 39,
        "fullcodeline": "str_ptr = (const u8 *)unsafe_yyjson_get_str(val);"
    },
    {
        "line": 40,
        "fullcodeline": "check_str_len(str_len);"
    },
    {
        "line": 41,
        "fullcodeline": "incr_len(str_len + end_len);"
    },
    {
        "line": 42,
        "fullcodeline": "cur = write_raw(cur, str_ptr, str_len);"
    },
    {
        "line": 46,
        "fullcodeline": "str_len = unsafe_yyjson_get_len(val);"
    },
    {
        "line": 47,
        "fullcodeline": "str_ptr = (const u8 *)unsafe_yyjson_get_str(val);"
    },
    {
        "line": 48,
        "fullcodeline": "check_str_len(str_len);"
    },
    {
        "line": 49,
        "fullcodeline": "incr_len(str_len * 6 + 2 + end_len);"
    },
    {
        "line": 59,
        "fullcodeline": "incr_len(32 + end_len);"
    },
    {
        "line": 60,
        "fullcodeline": "cur = write_number(cur, val, flg);"
    },
    {
        "line": 65,
        "fullcodeline": "incr_len(8);"
    },
    {
        "line": 66,
        "fullcodeline": "cur = write_bool(cur, unsafe_yyjson_get_bool(val));"
    },
    {
        "line": 70,
        "fullcodeline": "incr_len(8);"
    },
    {
        "line": 71,
        "fullcodeline": "cur = write_null(cur);"
    },
    {
        "line": 75,
        "fullcodeline": "incr_len(2 + end_len);"
    },
    {
        "line": 76,
        "fullcodeline": "byte_copy_2(cur, \"[]\");"
    },
    {
        "line": 77,
        "fullcodeline": "cur += 2;"
    },
    {
        "line": 81,
        "fullcodeline": "incr_len(2 + end_len);"
    },
    {
        "line": 82,
        "fullcodeline": "byte_copy_2(cur, \"{}\");"
    },
    {
        "line": 83,
        "fullcodeline": "cur += 2;"
    },
    {
        "line": 90,
        "fullcodeline": "if (newline) *cur++ = '\\n';"
    },
    {
        "line": 50,
        "fullcodeline": "if (likely(cpy) && unsafe_yyjson_get_subtype(val)) {"
    },
    {
        "line": 61,
        "fullcodeline": "if (unlikely(!cur)) goto fail_num;"
    },
    {
        "line": 51,
        "fullcodeline": "cur = write_string_noesc(cur, str_ptr, str_len);"
    },
    {
        "line": 97,
        "fullcodeline": "return_err(MEMORY_ALLOCATION, \"memory allocation failed\");"
    },
    {
        "line": 99,
        "fullcodeline": "return_err(INVALID_VALUE_TYPE, \"invalid JSON value type\");"
    },
    {
        "line": 101,
        "fullcodeline": "return_err(NAN_OR_INF, \"nan or inf number is not allowed\");"
    },
    {
        "line": 103,
        "fullcodeline": "return_err(INVALID_STRING, \"invalid utf-8 encoding in string\");"
    },
    {
        "line": 53,
        "fullcodeline": "cur = write_string(cur, esc, inv, str_ptr, str_len, enc_table);"
    },
    {
        "line": 54,
        "fullcodeline": "if (unlikely(!cur)) goto fail_str;"
    }
]