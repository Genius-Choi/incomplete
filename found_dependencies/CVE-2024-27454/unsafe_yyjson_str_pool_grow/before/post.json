[
    {
        "line": 7,
        "fullcodeline": "max_len = USIZE_MAX - sizeof(yyjson_str_chunk);"
    },
    {
        "line": 9,
        "fullcodeline": "size = len + sizeof(yyjson_str_chunk);"
    },
    {
        "line": 10,
        "fullcodeline": "size = yyjson_max(pool->chunk_size, size);"
    },
    {
        "line": 11,
        "fullcodeline": "chunk = (yyjson_str_chunk *)alc->malloc(alc->ctx, size);"
    },
    {
        "line": 15,
        "fullcodeline": "chunk->next = pool->chunks;"
    },
    {
        "line": 16,
        "fullcodeline": "chunk->chunk_size = size;"
    },
    {
        "line": 17,
        "fullcodeline": "pool->chunks = chunk;"
    },
    {
        "line": 18,
        "fullcodeline": "pool->cur = (char *)chunk + sizeof(yyjson_str_chunk);"
    },
    {
        "line": 19,
        "fullcodeline": "pool->end = (char *)chunk + size;"
    },
    {
        "line": 22,
        "fullcodeline": "size = yyjson_min(pool->chunk_size * 2, pool->chunk_size_max);"
    },
    {
        "line": 24,
        "fullcodeline": "pool->chunk_size = size;"
    },
    {
        "line": 8,
        "fullcodeline": "if (unlikely(len > max_len)) return false;"
    },
    {
        "line": 12,
        "fullcodeline": "if (unlikely(!chunk)) return false;"
    },
    {
        "line": 23,
        "fullcodeline": "if (size < pool->chunk_size) size = pool->chunk_size_max; /* overflow */"
    }
]