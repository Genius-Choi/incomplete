[
    {
        "line": 4,
        "fullcodeline": "ut32 addend = 0;"
    },
    {
        "line": 5,
        "fullcodeline": "struct r_bin_dyldcache_lib_t *ret = NULL;"
    },
    {
        "line": 6,
        "fullcodeline": "struct dyld_cache_image_info* image_infos = NULL;"
    },
    {
        "line": 9,
        "fullcodeline": "int cmd, libsz = 0;"
    },
    {
        "line": 23,
        "fullcodeline": "*nlib = bin->nlibs;"
    },
    {
        "line": 39,
        "fullcodeline": "int sz = bin->nlibs * sizeof (struct dyld_cache_image_info);"
    },
    {
        "line": 40,
        "fullcodeline": "image_infos = malloc (sz); //(struct dyld_cache_image_info*) (bin->b->buf + bin->hdr.startaddr);"
    },
    {
        "line": 45,
        "fullcodeline": "r_buf_read_at (bin->b, bin->hdr.startaddr, (ut8*)image_infos, sz);"
    },
    {
        "line": 46,
        "fullcodeline": "dyld_vmbase = r_buf_read64le (bin->b, bin->hdr.baseaddroff);"
    },
    {
        "line": 47,
        "fullcodeline": "liboff = image_infos[idx].address - dyld_vmbase;"
    },
    {
        "line": 53,
        "fullcodeline": "ret->offset = liboff;"
    },
    {
        "line": 60,
        "fullcodeline": "libname = r_buf_read_string (bin->b, pfo, 64);"
    },
    {
        "line": 62,
        "fullcodeline": "data = bin->b->buf + liboff;"
    },
    {
        "line": 63,
        "fullcodeline": "mh = (struct mach_header *)data;"
    },
    {
        "line": 80,
        "fullcodeline": "r_buf_set_bytes (dbuf, data, addend);"
    },
    {
        "line": 81,
        "fullcodeline": "cmdptr = data + addend;"
    },
    {
        "line": 88,
        "fullcodeline": "cmdptr = data + addend;"
    },
    {
        "line": 157,
        "fullcodeline": "ret->b = dbuf;"
    },
    {
        "line": 158,
        "fullcodeline": "strncpy (ret->path, libname, sizeof (ret->path) - 1);"
    },
    {
        "line": 159,
        "fullcodeline": "ret->size = libsz;"
    },
    {
        "line": 13,
        "fullcodeline": "if (!bin) {"
    },
    {
        "line": 16,
        "fullcodeline": "if (bin->size < 1) {"
    },
    {
        "line": 20,
        "fullcodeline": "if (bin->nlibs < 0 || idx < 0 || idx >= bin->nlibs) {"
    },
    {
        "line": 25,
        "fullcodeline": "if (!ret) {"
    },
    {
        "line": 28,
        "fullcodeline": "if (bin->hdr.startaddr > bin->size) {"
    },
    {
        "line": 34,
        "fullcodeline": "if (bin->hdr.startaddr > bin->size || bin->hdr.baseaddroff > bin->size) {"
    },
    {
        "line": 41,
        "fullcodeline": "if (!image_infos) {"
    },
    {
        "line": 48,
        "fullcodeline": "if (liboff > bin->size) {"
    },
    {
        "line": 55,
        "fullcodeline": "if (pfo < 0 || pfo > bin->size) {"
    },
    {
        "line": 65,
        "fullcodeline": "if (mh->magic != MH_MAGIC && mh->magic != MH_MAGIC_64) {"
    },
    {
        "line": 74,
        "fullcodeline": "if (!(dbuf = r_buf_new ())) {"
    },
    {
        "line": 83,
        "fullcodeline": "for (cmd = 0; cmd < mh->ncmds; cmd++) {"
    },
    {
        "line": 90,
        "fullcodeline": "for (cmd = linkedit_offset = 0; cmd < mh->ncmds; cmd++) {"
    },
    {
        "line": 17,
        "fullcodeline": "eprintf (\"Empty file? (%s)\\n\", bin->file? bin->file: \"(null)\");"
    },
    {
        "line": 29,
        "fullcodeline": "eprintf (\"corrupted dyldcache\");"
    },
    {
        "line": 30,
        "fullcodeline": "free (ret);"
    },
    {
        "line": 35,
        "fullcodeline": "eprintf (\"corrupted dyldcache\");"
    },
    {
        "line": 36,
        "fullcodeline": "free (ret);"
    },
    {
        "line": 42,
        "fullcodeline": "free (ret);"
    },
    {
        "line": 49,
        "fullcodeline": "eprintf (\"Corrupted file\\n\");"
    },
    {
        "line": 50,
        "fullcodeline": "free (ret);"
    },
    {
        "line": 56,
        "fullcodeline": "eprintf (\"corrupted file: pathFileOffset > bin->size (%d)\\n\", pfo);"
    },
    {
        "line": 57,
        "fullcodeline": "free (ret);"
    },
    {
        "line": 69,
        "fullcodeline": "eprintf (\"Not mach-o\\n\");"
    },
    {
        "line": 70,
        "fullcodeline": "free (ret);"
    },
    {
        "line": 75,
        "fullcodeline": "eprintf (\"new (dbuf)\\n\");"
    },
    {
        "line": 76,
        "fullcodeline": "free (ret);"
    },
    {
        "line": 79,
        "fullcodeline": "addend = mh->magic == MH_MAGIC? sizeof (struct mach_header) : sizeof (struct mach_header_64);"
    },
    {
        "line": 84,
        "fullcodeline": "struct load_command *lc = (struct load_command *)cmdptr;"
    },
    {
        "line": 85,
        "fullcodeline": "r_buf_append_bytes (dbuf, (ut8*)lc, lc->cmdsize);"
    },
    {
        "line": 86,
        "fullcodeline": "cmdptr += lc->cmdsize;"
    },
    {
        "line": 91,
        "fullcodeline": "struct load_command *lc = (struct load_command *)cmdptr;"
    },
    {
        "line": 92,
        "fullcodeline": "cmdptr += lc->cmdsize;"
    },
    {
        "line": 66,
        "fullcodeline": "if (mh->magic == 0xbebafeca) { //FAT binary"
    },
    {
        "line": 67,
        "fullcodeline": "eprintf (\"FAT Binary\\n\");"
    },
    {
        "line": 97,
        "fullcodeline": "struct segment_command *seg = (struct segment_command *)lc;"
    },
    {
        "line": 98,
        "fullcodeline": "int t = seg->filesize;"
    },
    {
        "line": 105,
        "fullcodeline": "r_buf_append_bytes (dbuf, bin->b->buf+seg->fileoff, t);"
    },
    {
        "line": 106,
        "fullcodeline": "r_bin_dyldcache_apply_patch (dbuf, dbuf->length, (ut64)((size_t)&seg->fileoff - (size_t)data));"
    },
    {
        "line": 108,
        "fullcodeline": "int sect_offset = seg->fileoff - libsz;"
    },
    {
        "line": 109,
        "fullcodeline": "libsz = dbuf->length;"
    },
    {
        "line": 127,
        "fullcodeline": "struct symtab_command *st = (struct symtab_command *)lc;"
    },
    {
        "line": 128,
        "fullcodeline": "NZ_OFFSET (st->symoff);"
    },
    {
        "line": 129,
        "fullcodeline": "NZ_OFFSET (st->stroff);"
    },
    {
        "line": 134,
        "fullcodeline": "struct dysymtab_command *st = (struct dysymtab_command *)lc;"
    },
    {
        "line": 135,
        "fullcodeline": "NZ_OFFSET (st->tocoff);"
    },
    {
        "line": 136,
        "fullcodeline": "NZ_OFFSET (st->modtaboff);"
    },
    {
        "line": 137,
        "fullcodeline": "NZ_OFFSET (st->extrefsymoff);"
    },
    {
        "line": 138,
        "fullcodeline": "NZ_OFFSET (st->indirectsymoff);"
    },
    {
        "line": 139,
        "fullcodeline": "NZ_OFFSET (st->extreloff);"
    },
    {
        "line": 140,
        "fullcodeline": "NZ_OFFSET (st->locreloff);"
    },
    {
        "line": 146,
        "fullcodeline": "struct dyld_info_command *st = (struct dyld_info_command *)lc;"
    },
    {
        "line": 147,
        "fullcodeline": "NZ_OFFSET (st->rebase_off);"
    },
    {
        "line": 148,
        "fullcodeline": "NZ_OFFSET (st->bind_off);"
    },
    {
        "line": 149,
        "fullcodeline": "NZ_OFFSET (st->weak_bind_off);"
    },
    {
        "line": 150,
        "fullcodeline": "NZ_OFFSET (st->lazy_bind_off);"
    },
    {
        "line": 151,
        "fullcodeline": "NZ_OFFSET (st->export_off);"
    },
    {
        "line": 99,
        "fullcodeline": "if (seg->fileoff + seg->filesize > bin->size || seg->fileoff > bin->size) {"
    },
    {
        "line": 110,
        "fullcodeline": "if (!strcmp (seg->segname, \"__LINKEDIT\")) {"
    },
    {
        "line": 113,
        "fullcodeline": "if (seg->nsects > 0) {"
    },
    {
        "line": 100,
        "fullcodeline": "eprintf (\"malformed dyldcache\\n\");"
    },
    {
        "line": 101,
        "fullcodeline": "free (ret);"
    },
    {
        "line": 102,
        "fullcodeline": "r_buf_free (dbuf);"
    },
    {
        "line": 111,
        "fullcodeline": "linkedit_offset = sect_offset;"
    },
    {
        "line": 114,
        "fullcodeline": "struct section *sects = (struct section *)((ut8 *)seg + sizeof(struct segment_command));"
    },
    {
        "line": 116,
        "fullcodeline": "for (nsect = 0; nsect < seg->nsects; nsect++) {"
    },
    {
        "line": 117,
        "fullcodeline": "if (sects[nsect].offset > libsz) {"
    },
    {
        "line": 118,
        "fullcodeline": "r_bin_dyldcache_apply_patch (dbuf, sects[nsect].offset - sect_offset,"
    },
    {
        "line": 119,
        "fullcodeline": "(ut64)((size_t)&sects[nsect].offset - (size_t)data));"
    }
]