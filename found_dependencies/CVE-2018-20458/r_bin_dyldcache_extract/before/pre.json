[
    {
        "line": 4,
        "fullcodeline": "ut32 addend = 0;"
    },
    {
        "line": 5,
        "fullcodeline": "struct r_bin_dyldcache_lib_t *ret = NULL;"
    },
    {
        "line": 6,
        "fullcodeline": "struct dyld_cache_image_info* image_infos = NULL;"
    },
    {
        "line": 9,
        "fullcodeline": "int cmd, libsz = 0;"
    },
    {
        "line": 40,
        "fullcodeline": "dyld_vmbase = *(ut64 *)(bin->b->buf + bin->hdr.baseaddroff);"
    },
    {
        "line": 41,
        "fullcodeline": "liboff = image_infos[idx].address - dyld_vmbase;"
    },
    {
        "line": 47,
        "fullcodeline": "ret->offset = liboff;"
    },
    {
        "line": 53,
        "fullcodeline": "libname = (char *)(bin->b->buf + image_infos[idx].pathFileOffset);"
    },
    {
        "line": 55,
        "fullcodeline": "data = bin->b->buf + liboff;"
    },
    {
        "line": 56,
        "fullcodeline": "mh = (struct mach_header *)data;"
    },
    {
        "line": 72,
        "fullcodeline": "addend = mh->magic == MH_MAGIC? sizeof (struct mach_header) : sizeof (struct mach_header_64);"
    },
    {
        "line": 73,
        "fullcodeline": "r_buf_set_bytes (dbuf, data, addend);"
    },
    {
        "line": 74,
        "fullcodeline": "cmdptr = data + addend;"
    },
    {
        "line": 81,
        "fullcodeline": "cmdptr = data + addend;"
    },
    {
        "line": 150,
        "fullcodeline": "ret->b = dbuf;"
    },
    {
        "line": 151,
        "fullcodeline": "strncpy (ret->path, libname, sizeof (ret->path) - 1);"
    },
    {
        "line": 152,
        "fullcodeline": "ret->size = libsz;"
    },
    {
        "line": 13,
        "fullcodeline": "if (!bin) {"
    },
    {
        "line": 16,
        "fullcodeline": "if (bin->size < 1) {"
    },
    {
        "line": 25,
        "fullcodeline": "if (!ret) {"
    },
    {
        "line": 29,
        "fullcodeline": "if (bin->hdr.startaddr > bin->size) {"
    },
    {
        "line": 42,
        "fullcodeline": "if (liboff > bin->size) {"
    },
    {
        "line": 48,
        "fullcodeline": "if (image_infos[idx].pathFileOffset > bin->size) {"
    },
    {
        "line": 76,
        "fullcodeline": "for (cmd = 0; cmd < mh->ncmds; cmd++) {"
    },
    {
        "line": 83,
        "fullcodeline": "for (cmd = linkedit_offset = 0; cmd < mh->ncmds; cmd++) {"
    },
    {
        "line": 20,
        "fullcodeline": "if (bin->nlibs < 0 || idx < 0 || idx >= bin->nlibs) {"
    },
    {
        "line": 34,
        "fullcodeline": "if (bin->hdr.startaddr > bin->size || bin->hdr.baseaddroff > bin->size) {"
    },
    {
        "line": 58,
        "fullcodeline": "if (mh->magic != MH_MAGIC && mh->magic != MH_MAGIC_64) {"
    },
    {
        "line": 67,
        "fullcodeline": "if (!(dbuf = r_buf_new ())) {"
    },
    {
        "line": 77,
        "fullcodeline": "struct load_command *lc = (struct load_command *)cmdptr;"
    },
    {
        "line": 78,
        "fullcodeline": "r_buf_append_bytes (dbuf, (ut8*)lc, lc->cmdsize);"
    },
    {
        "line": 79,
        "fullcodeline": "cmdptr += lc->cmdsize;"
    },
    {
        "line": 84,
        "fullcodeline": "struct load_command *lc = (struct load_command *)cmdptr;"
    },
    {
        "line": 85,
        "fullcodeline": "cmdptr += lc->cmdsize;"
    },
    {
        "line": 90,
        "fullcodeline": "struct segment_command *seg = (struct segment_command *)lc;"
    },
    {
        "line": 91,
        "fullcodeline": "int t = seg->filesize;"
    },
    {
        "line": 98,
        "fullcodeline": "r_buf_append_bytes (dbuf, bin->b->buf+seg->fileoff, t);"
    },
    {
        "line": 99,
        "fullcodeline": "r_bin_dyldcache_apply_patch (dbuf, dbuf->length, (ut64)((size_t)&seg->fileoff - (size_t)data));"
    },
    {
        "line": 101,
        "fullcodeline": "int sect_offset = seg->fileoff - libsz;"
    },
    {
        "line": 102,
        "fullcodeline": "libsz = dbuf->length;"
    },
    {
        "line": 120,
        "fullcodeline": "struct symtab_command *st = (struct symtab_command *)lc;"
    },
    {
        "line": 127,
        "fullcodeline": "struct dysymtab_command *st = (struct dysymtab_command *)lc;"
    },
    {
        "line": 139,
        "fullcodeline": "struct dyld_info_command *st = (struct dyld_info_command *)lc;"
    },
    {
        "line": 106,
        "fullcodeline": "if (seg->nsects > 0) {"
    },
    {
        "line": 92,
        "fullcodeline": "if (seg->fileoff + seg->filesize > bin->size || seg->fileoff > bin->size) {"
    },
    {
        "line": 103,
        "fullcodeline": "if (!strcmp (seg->segname, \"__LINKEDIT\")) {"
    },
    {
        "line": 109,
        "fullcodeline": "for (nsect = 0; nsect < seg->nsects; nsect++) {"
    },
    {
        "line": 107,
        "fullcodeline": "struct section *sects = (struct section *)((ut8 *)seg + sizeof(struct segment_command));"
    },
    {
        "line": 110,
        "fullcodeline": "if (sects[nsect].offset > libsz) {"
    },
    {
        "line": 111,
        "fullcodeline": "r_bin_dyldcache_apply_patch (dbuf, sects[nsect].offset - sect_offset,"
    },
    {
        "line": 112,
        "fullcodeline": "(ut64)((size_t)&sects[nsect].offset - (size_t)data));"
    }
]