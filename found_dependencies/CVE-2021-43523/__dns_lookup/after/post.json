[
    {
        "line": 7,
        "fullcodeline": "static int last_ns_num = 0;"
    },
    {
        "line": 8,
        "fullcodeline": "static uint16_t last_id = 1;"
    },
    {
        "line": 22,
        "fullcodeline": "bool first_answer = 1;"
    },
    {
        "line": 24,
        "fullcodeline": "unsigned char *packet = malloc(PACKETSZ);"
    },
    {
        "line": 26,
        "fullcodeline": "int variant = -1;  /* search domain to append, -1: none */"
    },
    {
        "line": 27,
        "fullcodeline": "int local_ns_num = -1; /* Nth server to use */"
    },
    {
        "line": 28,
        "fullcodeline": "int local_id = local_id; /* for compiler */"
    },
    {
        "line": 29,
        "fullcodeline": "int sdomains = 0;"
    },
    {
        "line": 35,
        "fullcodeline": "fd = -1;"
    },
    {
        "line": 36,
        "fullcodeline": "lookup = NULL;"
    },
    {
        "line": 37,
        "fullcodeline": "name_len = strlen(name);"
    },
    {
        "line": 40,
        "fullcodeline": "lookup = malloc(name_len + 1/*for '.'*/ + MAXLEN_searchdomain + 1);"
    },
    {
        "line": 43,
        "fullcodeline": "ends_with_dot = (name[name_len - 1] == '.');"
    },
    {
        "line": 44,
        "fullcodeline": "contains_dot = strchr(name, '.') != NULL;"
    },
    {
        "line": 46,
        "fullcodeline": "memcpy(lookup, name, name_len);"
    },
    {
        "line": 48,
        "fullcodeline": "DPRINTF(\"Looking up type %d answer for '%s'\\n\", type, name);"
    },
    {
        "line": 49,
        "fullcodeline": "retries_left = 0; /* for compiler */"
    },
    {
        "line": 362,
        "fullcodeline": "h_errno = NETDB_INTERNAL;"
    },
    {
        "line": 366,
        "fullcodeline": "free(lookup);"
    },
    {
        "line": 367,
        "fullcodeline": "free(packet);"
    },
    {
        "line": 38,
        "fullcodeline": "if ((unsigned)name_len >= MAXDNAME - MAXLEN_searchdomain - 2)"
    },
    {
        "line": 41,
        "fullcodeline": "if (!packet || !lookup || !name[0])"
    },
    {
        "line": 359,
        "fullcodeline": "} while (retries_left > 0);"
    },
    {
        "line": 364,
        "fullcodeline": "if (fd != -1)"
    },
    {
        "line": 368,
        "fullcodeline": "return -1;"
    },
    {
        "line": 69,
        "fullcodeline": "__UCLIBC_MUTEX_LOCK(__resolv_lock);"
    },
    {
        "line": 70,
        "fullcodeline": "__open_nameservers();"
    },
    {
        "line": 74,
        "fullcodeline": "lookup[name_len] = '\\0';"
    },
    {
        "line": 79,
        "fullcodeline": "act_variant = contains_dot ? variant : variant + 1;"
    },
    {
        "line": 98,
        "fullcodeline": "local_id++;"
    },
    {
        "line": 99,
        "fullcodeline": "local_id &= 0xffff;"
    },
    {
        "line": 101,
        "fullcodeline": "last_id = local_id;"
    },
    {
        "line": 102,
        "fullcodeline": "last_ns_num = local_ns_num;"
    },
    {
        "line": 107,
        "fullcodeline": "__UCLIBC_MUTEX_UNLOCK(__resolv_lock);"
    },
    {
        "line": 109,
        "fullcodeline": "memset(packet, 0, PACKETSZ);"
    },
    {
        "line": 110,
        "fullcodeline": "memset(&h, 0, sizeof(h));"
    },
    {
        "line": 113,
        "fullcodeline": "h.id = local_id;"
    },
    {
        "line": 114,
        "fullcodeline": "h.qdcount = 1;"
    },
    {
        "line": 115,
        "fullcodeline": "h.rd = 1;"
    },
    {
        "line": 116,
        "fullcodeline": "DPRINTF(\"encoding header\\n\", h.rd);"
    },
    {
        "line": 117,
        "fullcodeline": "i = __encode_header(&h, packet, PACKETSZ);"
    },
    {
        "line": 122,
        "fullcodeline": "DPRINTF(\"lookup name: %s\\n\", lookup);"
    },
    {
        "line": 123,
        "fullcodeline": "q.dotted = lookup;"
    },
    {
        "line": 124,
        "fullcodeline": "q.qtype = type;"
    },
    {
        "line": 125,
        "fullcodeline": "q.qclass = C_IN; /* CLASS_IN */"
    },
    {
        "line": 126,
        "fullcodeline": "j = __encode_question(&q, packet+i, PACKETSZ-i);"
    },
    {
        "line": 129,
        "fullcodeline": "packet_len = i + j;"
    },
    {
        "line": 150,
        "fullcodeline": "fd = socket(sa.sa.sa_family, SOCK_DGRAM, IPPROTO_UDP);"
    },
    {
        "line": 153,
        "fullcodeline": "rc = connect(fd, &sa.sa, sizeof(sa));"
    },
    {
        "line": 163,
        "fullcodeline": "DPRINTF(\"Xmit packet len:%d id:%d qr:%d\\n\", packet_len, h.id, h.qr);"
    },
    {
        "line": 165,
        "fullcodeline": "send(fd, packet, packet_len, 0);"
    },
    {
        "line": 182,
        "fullcodeline": "reply_timeout = __resolv_timeout * 1000;"
    },
    {
        "line": 184,
        "fullcodeline": "fds.fd = fd;"
    },
    {
        "line": 185,
        "fullcodeline": "fds.events = POLLIN;"
    },
    {
        "line": 197,
        "fullcodeline": "reply_timeout -= 1000;"
    },
    {
        "line": 217,
        "fullcodeline": "packet_len = recv(fd, packet, PACKETSZ, MSG_DONTWAIT);"
    },
    {
        "line": 230,
        "fullcodeline": "__decode_header(packet, &h);"
    },
    {
        "line": 231,
        "fullcodeline": "DPRINTF(\"len:%d id:%d qr:%d\\n\", packet_len, h.id, h.qr);"
    },
    {
        "line": 237,
        "fullcodeline": "DPRINTF(\"Got response (i think)!\\n\");"
    },
    {
        "line": 238,
        "fullcodeline": "DPRINTF(\"qrcount=%d,ancount=%d,nscount=%d,arcount=%d\\n\","
    },
    {
        "line": 240,
        "fullcodeline": "DPRINTF(\"opcode=%d,aa=%d,tc=%d,rd=%d,ra=%d,rcode=%d\\n\","
    },
    {
        "line": 275,
        "fullcodeline": "pos = HFIXEDSZ;"
    },
    {
        "line": 288,
        "fullcodeline": "DPRINTF(\"Decoding answer at pos %d\\n\", pos);"
    },
    {
        "line": 290,
        "fullcodeline": "first_answer = 1;"
    },
    {
        "line": 291,
        "fullcodeline": "num_answers = 0;"
    },
    {
        "line": 292,
        "fullcodeline": "a->dotted = NULL;"
    },
    {
        "line": 343,
        "fullcodeline": "DPRINTF(\"Answer name = |%s|\\n\", a->dotted);"
    },
    {
        "line": 344,
        "fullcodeline": "DPRINTF(\"Answer type = |%d|\\n\", a->atype);"
    },
    {
        "line": 351,
        "fullcodeline": "free(lookup);"
    },
    {
        "line": 356,
        "fullcodeline": "retries_left--;"
    },
    {
        "line": 357,
        "fullcodeline": "local_ns_num++;"
    },
    {
        "line": 358,
        "fullcodeline": "variant = -1;"
    },
    {
        "line": 365,
        "fullcodeline": "close(fd);"
    },
    {
        "line": 55,
        "fullcodeline": "if (fd != -1) {"
    },
    {
        "line": 71,
        "fullcodeline": "if (type != T_PTR) {"
    },
    {
        "line": 80,
        "fullcodeline": "if (act_variant < sdomains) {"
    },
    {
        "line": 87,
        "fullcodeline": "if (local_ns_num < 0) {"
    },
    {
        "line": 96,
        "fullcodeline": "if (local_ns_num >= __nameservers)"
    },
    {
        "line": 118,
        "fullcodeline": "if (i < 0)"
    },
    {
        "line": 127,
        "fullcodeline": "if (j < 0)"
    },
    {
        "line": 151,
        "fullcodeline": "if (fd < 0) /* paranoia */"
    },
    {
        "line": 154,
        "fullcodeline": "if (rc < 0) {"
    },
    {
        "line": 186,
        "fullcodeline": "if (poll(&fds, 1, reply_timeout) <= 0) {"
    },
    {
        "line": 192,
        "fullcodeline": "if (fds.revents & (POLLERR | POLLHUP | POLLNVAL)) {"
    },
    {
        "line": 220,
        "fullcodeline": "if (packet_len < HFIXEDSZ) {"
    },
    {
        "line": 232,
        "fullcodeline": "if (h.id != local_id || !h.qr) {"
    },
    {
        "line": 246,
        "fullcodeline": "if (h.rcode == NXDOMAIN || h.rcode == SERVFAIL) {"
    },
    {
        "line": 267,
        "fullcodeline": "if (h.rcode != 0)"
    },
    {
        "line": 271,
        "fullcodeline": "if (h.ancount <= 0) {"
    },
    {
        "line": 277,
        "fullcodeline": "for (j = 0; j < h.qdcount; j++) {"
    },
    {
        "line": 293,
        "fullcodeline": "for (j = 0; j < h.ancount; j++) {"
    },
    {
        "line": 337,
        "fullcodeline": "if (!num_answers) {"
    },
    {
        "line": 345,
        "fullcodeline": "if (fd != -1)"
    },
    {
        "line": 56,
        "fullcodeline": "close(fd);"
    },
    {
        "line": 57,
        "fullcodeline": "fd = -1;"
    },
    {
        "line": 72,
        "fullcodeline": "sdomains = __searchdomains;"
    },
    {
        "line": 83,
        "fullcodeline": "lookup[name_len] = '.';"
    },
    {
        "line": 84,
        "fullcodeline": "strcpy(&lookup[name_len + 1], __searchdomain[act_variant]);"
    },
    {
        "line": 88,
        "fullcodeline": "local_id = last_id;"
    },
    {
        "line": 93,
        "fullcodeline": "local_ns_num = last_ns_num;"
    },
    {
        "line": 94,
        "fullcodeline": "retries_left = __nameservers * __resolv_attempts;"
    },
    {
        "line": 97,
        "fullcodeline": "local_ns_num = 0;"
    },
    {
        "line": 187,
        "fullcodeline": "DPRINTF(\"Timeout\\n\");"
    },
    {
        "line": 193,
        "fullcodeline": "DPRINTF(\"Bad event\\n\");"
    },
    {
        "line": 272,
        "fullcodeline": "h_errno = NO_DATA; /* [is this correct code to check for?] */"
    },
    {
        "line": 278,
        "fullcodeline": "DPRINTF(\"Skipping question %d at %d\\n\", j, pos);"
    },
    {
        "line": 279,
        "fullcodeline": "i = __length_question(packet + pos, packet_len - pos);"
    },
    {
        "line": 285,
        "fullcodeline": "pos += i;"
    },
    {
        "line": 286,
        "fullcodeline": "DPRINTF(\"Length of question %d is %d\\n\", j, i);"
    },
    {
        "line": 294,
        "fullcodeline": "i = __decode_answer(packet, pos, packet_len, &ma);"
    },
    {
        "line": 303,
        "fullcodeline": "pos += i;"
    },
    {
        "line": 307,
        "fullcodeline": "++num_answers;"
    },
    {
        "line": 338,
        "fullcodeline": "h_errno = NO_RECOVERY;"
    },
    {
        "line": 346,
        "fullcodeline": "close(fd);"
    },
    {
        "line": 348,
        "fullcodeline": "*outpacket = packet;"
    },
    {
        "line": 226,
        "fullcodeline": "if (packet_len >= 0 && reply_timeout)"
    },
    {
        "line": 248,
        "fullcodeline": "if (!ends_with_dot) {"
    },
    {
        "line": 257,
        "fullcodeline": "if (h.rcode != SERVFAIL) {"
    },
    {
        "line": 280,
        "fullcodeline": "if (i < 0) {"
    },
    {
        "line": 295,
        "fullcodeline": "if (i < 0) {"
    },
    {
        "line": 305,
        "fullcodeline": "if (__hnbad(ma.dotted))"
    },
    {
        "line": 350,
        "fullcodeline": "free(packet);"
    },
    {
        "line": 249,
        "fullcodeline": "DPRINTF(\"variant:%d sdomains:%d\\n\", variant, sdomains);"
    },
    {
        "line": 259,
        "fullcodeline": "h_errno = HOST_NOT_FOUND;"
    },
    {
        "line": 281,
        "fullcodeline": "DPRINTF(\"Packet'question section \""
    },
    {
        "line": 296,
        "fullcodeline": "DPRINTF(\"failed decode %d\\n\", i);"
    },
    {
        "line": 309,
        "fullcodeline": "ma.buf = a->buf;"
    },
    {
        "line": 310,
        "fullcodeline": "ma.buflen = a->buflen;"
    },
    {
        "line": 311,
        "fullcodeline": "ma.add_count = a->add_count;"
    },
    {
        "line": 312,
        "fullcodeline": "free(a->dotted);"
    },
    {
        "line": 313,
        "fullcodeline": "memcpy(a, &ma, sizeof(ma));"
    },
    {
        "line": 318,
        "fullcodeline": "a->add_count = h.ancount - j - 1;"
    },
    {
        "line": 321,
        "fullcodeline": "a->add_count = 0;"
    },
    {
        "line": 322,
        "fullcodeline": "first_answer = 0;"
    },
    {
        "line": 250,
        "fullcodeline": "if (variant < sdomains - 1) {"
    },
    {
        "line": 299,
        "fullcodeline": "if (num_answers && h.tc)"
    },
    {
        "line": 314,
        "fullcodeline": "if (a->atype != T_SIG && (NULL == a->buf || (type != T_A && type != T_AAAA)))"
    },
    {
        "line": 316,
        "fullcodeline": "if (a->atype != type)"
    },
    {
        "line": 319,
        "fullcodeline": "if ((a->rdlength + sizeof(struct in_addr*)) * a->add_count > a->buflen)"
    },
    {
        "line": 324,
        "fullcodeline": "free(ma.dotted);"
    },
    {
        "line": 333,
        "fullcodeline": "memcpy(a->buf + (a->add_count * ma.rdlength), ma.rdata, ma.rdlength);"
    },
    {
        "line": 334,
        "fullcodeline": "++a->add_count;"
    },
    {
        "line": 252,
        "fullcodeline": "variant++;"
    },
    {
        "line": 325,
        "fullcodeline": "if (ma.atype != type)"
    },
    {
        "line": 327,
        "fullcodeline": "if (a->rdlength != ma.rdlength) {"
    },
    {
        "line": 328,
        "fullcodeline": "free(a->dotted);"
    },
    {
        "line": 329,
        "fullcodeline": "DPRINTF(\"Answer address len(%u) differs from original(%u)\\n\","
    }
]