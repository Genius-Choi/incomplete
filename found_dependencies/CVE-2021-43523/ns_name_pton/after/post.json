[
    {
        "line": 3,
        "fullcodeline": "static const char digits[] = \"0123456789\";"
    },
    {
        "line": 5,
        "fullcodeline": "int c, n, escaped, e = 0;"
    },
    {
        "line": 8,
        "fullcodeline": "escaped = 0;"
    },
    {
        "line": 9,
        "fullcodeline": "bp = dst;"
    },
    {
        "line": 10,
        "fullcodeline": "eom = dst + dstsiz;"
    },
    {
        "line": 11,
        "fullcodeline": "label = bp++;"
    },
    {
        "line": 97,
        "fullcodeline": "c = (bp - label - 1);"
    },
    {
        "line": 105,
        "fullcodeline": "*label = c;"
    },
    {
        "line": 119,
        "fullcodeline": "errno = EMSGSIZE;"
    },
    {
        "line": 13,
        "fullcodeline": "while ((c = *src++) != 0) {"
    },
    {
        "line": 98,
        "fullcodeline": "if ((c & NS_CMPRSFLGS) != 0) {\t  /*%< Label too big. */"
    },
    {
        "line": 102,
        "fullcodeline": "if (label >= eom) {"
    },
    {
        "line": 106,
        "fullcodeline": "if (c != 0) {"
    },
    {
        "line": 112,
        "fullcodeline": "if ((bp - dst) > MAXCDNAME) {   /*%< src too big */"
    },
    {
        "line": 120,
        "fullcodeline": "return -1;"
    },
    {
        "line": 95,
        "fullcodeline": "*bp++ = (u_char)c;"
    },
    {
        "line": 110,
        "fullcodeline": "*bp++ = 0;"
    },
    {
        "line": 92,
        "fullcodeline": "if (bp >= eom) {"
    },
    {
        "line": 107,
        "fullcodeline": "if (bp >= eom) {"
    },
    {
        "line": 38,
        "fullcodeline": "cp = strchr(digits, c);"
    },
    {
        "line": 59,
        "fullcodeline": "escaped = 0;"
    },
    {
        "line": 15,
        "fullcodeline": "if (c == '[') { /*%< start a bit string label */"
    },
    {
        "line": 39,
        "fullcodeline": "if (cp != NULL) {"
    },
    {
        "line": 16,
        "fullcodeline": "cp = strchr(src, ']');"
    },
    {
        "line": 21,
        "fullcodeline": "e = encode_bitstring(&src, cp + 2,"
    },
    {
        "line": 27,
        "fullcodeline": "escaped = 0;"
    },
    {
        "line": 28,
        "fullcodeline": "label = bp++;"
    },
    {
        "line": 40,
        "fullcodeline": "n = (cp - digits) * 100;"
    },
    {
        "line": 44,
        "fullcodeline": "cp = strchr(digits, c);"
    },
    {
        "line": 47,
        "fullcodeline": "n += (cp - digits) * 10;"
    },
    {
        "line": 51,
        "fullcodeline": "cp = strchr(digits, c);"
    },
    {
        "line": 54,
        "fullcodeline": "n += (cp - digits);"
    },
    {
        "line": 57,
        "fullcodeline": "c = n;"
    },
    {
        "line": 60,
        "fullcodeline": "} else if (c == '\\\\') {"
    },
    {
        "line": 17,
        "fullcodeline": "if (cp == NULL) {"
    },
    {
        "line": 23,
        "fullcodeline": "if (e != 0) {"
    },
    {
        "line": 30,
        "fullcodeline": "if (c == '\\0')"
    },
    {
        "line": 32,
        "fullcodeline": "if (c != '.') {"
    },
    {
        "line": 42,
        "fullcodeline": "if (c == '\\0')"
    },
    {
        "line": 45,
        "fullcodeline": "if (cp == NULL)"
    },
    {
        "line": 49,
        "fullcodeline": "if (c == '\\0')"
    },
    {
        "line": 52,
        "fullcodeline": "if (cp == NULL)"
    },
    {
        "line": 55,
        "fullcodeline": "if (n > 255)"
    },
    {
        "line": 61,
        "fullcodeline": "escaped = 1;"
    },
    {
        "line": 18,
        "fullcodeline": "errno = EINVAL; /*%< ??? */"
    },
    {
        "line": 24,
        "fullcodeline": "errno = e;"
    },
    {
        "line": 29,
        "fullcodeline": "c = *src++;"
    },
    {
        "line": 33,
        "fullcodeline": "errno = EINVAL;"
    },
    {
        "line": 41,
        "fullcodeline": "c = *src++;"
    },
    {
        "line": 48,
        "fullcodeline": "c = *src++;"
    },
    {
        "line": 19,
        "fullcodeline": "return -1;"
    },
    {
        "line": 25,
        "fullcodeline": "return -1;"
    },
    {
        "line": 34,
        "fullcodeline": "return -1;"
    },
    {
        "line": 63,
        "fullcodeline": "} else if (c == '.') {"
    },
    {
        "line": 64,
        "fullcodeline": "c = (bp - label - 1);"
    },
    {
        "line": 71,
        "fullcodeline": "*label = c;"
    },
    {
        "line": 89,
        "fullcodeline": "label = bp++;"
    },
    {
        "line": 65,
        "fullcodeline": "if ((c & NS_CMPRSFLGS) != 0) {  /*%< Label too big. */"
    },
    {
        "line": 68,
        "fullcodeline": "if (label >= eom) {"
    },
    {
        "line": 73,
        "fullcodeline": "if (*src == '\\0') {"
    },
    {
        "line": 86,
        "fullcodeline": "if (c == 0 || *src == '.') {"
    },
    {
        "line": 74,
        "fullcodeline": "if (c != 0) {"
    },
    {
        "line": 80,
        "fullcodeline": "if ((bp - dst) > MAXCDNAME) {"
    },
    {
        "line": 78,
        "fullcodeline": "*bp++ = '\\0';"
    },
    {
        "line": 75,
        "fullcodeline": "if (bp >= eom) {"
    }
]