[
    {
        "line": 3,
        "fullcodeline": "from .tasks import resize_submission_attachment"
    },
    {
        "line": 5,
        "fullcodeline": "components = list(submission_step.form_step.iter_components(recursive=True))"
    },
    {
        "line": 7,
        "fullcodeline": "uploads = resolve_uploads_from_data(components, submission_step.data)"
    },
    {
        "line": 9,
        "fullcodeline": "result = list()"
    },
    {
        "line": 10,
        "fullcodeline": "validation_errors = defaultdict(list)"
    },
    {
        "line": 11,
        "fullcodeline": "for key, (component, uploads) in uploads.items():"
    },
    {
        "line": 76,
        "fullcodeline": "raise ValidationError(validation_errors)"
    },
    {
        "line": 13,
        "fullcodeline": "resize_apply = glom(component, \"of.image.resize.apply\", default=False)"
    },
    {
        "line": 14,
        "fullcodeline": "resize_size = ("
    },
    {
        "line": 20,
        "fullcodeline": "allowed_mime_types = glom(component, \"file.type\", default=[])"
    },
    {
        "line": 21,
        "fullcodeline": "file_max_size = file_size_cast("
    },
    {
        "line": 25,
        "fullcodeline": "base_name = glom(component, \"file.name\", default=\"\")"
    },
    {
        "line": 28,
        "fullcodeline": "for i, upload in enumerate(uploads, start=1):"
    },
    {
        "line": 15,
        "fullcodeline": "glom(component, \"of.image.resize.width\", default=DEFAULT_IMAGE_MAX_SIZE[0]),"
    },
    {
        "line": 16,
        "fullcodeline": "glom("
    },
    {
        "line": 22,
        "fullcodeline": "glom(component, \"fileMaxSize\", default=\"\") or settings.MAX_FILE_UPLOAD_SIZE"
    },
    {
        "line": 44,
        "fullcodeline": "invalid_file_type_error = ValidationError("
    },
    {
        "line": 61,
        "fullcodeline": "file_name = append_file_num_postfix("
    },
    {
        "line": 68,
        "fullcodeline": "result.append((attachment, created))"
    },
    {
        "line": 29,
        "fullcodeline": "if upload.file_size > file_max_size:"
    },
    {
        "line": 40,
        "fullcodeline": "with upload.content.open(\"rb\") as infile:"
    },
    {
        "line": 51,
        "fullcodeline": "if upload.content_type != file_mime_type:"
    },
    {
        "line": 57,
        "fullcodeline": "if allowed_mime_types and file_mime_type not in allowed_mime_types:"
    },
    {
        "line": 65,
        "fullcodeline": "attachment, created = SubmissionFileAttachment.objects.create_from_upload("
    },
    {
        "line": 70,
        "fullcodeline": "if created and resize_apply and resize_size:"
    },
    {
        "line": 30,
        "fullcodeline": "raise RequestEntityTooLarge("
    },
    {
        "line": 62,
        "fullcodeline": "upload.file_name, base_name, i, len(uploads)"
    },
    {
        "line": 73,
        "fullcodeline": "resize_submission_attachment.delay(attachment.id, resize_size)"
    },
    {
        "line": 42,
        "fullcodeline": "file_mime_type = magic.from_buffer(infile.read(2048), mime=True)"
    },
    {
        "line": 45,
        "fullcodeline": "_(\"The file '{filename}' is not a valid file type.\").format("
    },
    {
        "line": 52,
        "fullcodeline": "validation_errors[key].append(invalid_file_type_error)"
    },
    {
        "line": 58,
        "fullcodeline": "validation_errors[key].append(invalid_file_type_error)"
    },
    {
        "line": 31,
        "fullcodeline": "_("
    }
]