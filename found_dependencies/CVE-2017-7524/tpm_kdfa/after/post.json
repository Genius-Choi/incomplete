[
    {
        "line": 8,
        "fullcodeline": "TPM2B_DIGEST *bufferList[8];"
    },
    {
        "line": 10,
        "fullcodeline": "TPM_RC rval = TPM_RC_SUCCESS;"
    },
    {
        "line": 12,
        "fullcodeline": "UINT16 bytes = bits / 8;"
    },
    {
        "line": 14,
        "fullcodeline": "resultKey->t .size = 0;"
    },
    {
        "line": 16,
        "fullcodeline": "tpm2b_i_2.t.size = 4;"
    },
    {
        "line": 18,
        "fullcodeline": "tpm2bBits.t.size = 4;"
    },
    {
        "line": 19,
        "fullcodeline": "bitsSwizzled = string_bytes_endian_convert_32( bits );"
    },
    {
        "line": 20,
        "fullcodeline": "*(UINT32 *)tpm2bBitsPtr = bitsSwizzled;"
    },
    {
        "line": 24,
        "fullcodeline": "tpm2bLabel.t.size = i+1;"
    },
    {
        "line": 30,
        "fullcodeline": "resultKey->t.size = 0;"
    },
    {
        "line": 32,
        "fullcodeline": "i = 1;"
    },
    {
        "line": 34,
        "fullcodeline": "const EVP_MD *md = tpm_algorithm_to_openssl_digest(hashAlg);"
    },
    {
        "line": 41,
        "fullcodeline": "HMAC_CTX_init(&ctx);"
    },
    {
        "line": 42,
        "fullcodeline": "int rc = HMAC_Init_ex(&ctx, key->buffer, key->size, md, NULL);"
    },
    {
        "line": 94,
        "fullcodeline": "resultKey->t.size = bytes;"
    },
    {
        "line": 97,
        "fullcodeline": "HMAC_CTX_cleanup(&ctx);"
    },
    {
        "line": 22,
        "fullcodeline": "for(i = 0; label[i] != 0 ;i++ );"
    },
    {
        "line": 25,
        "fullcodeline": "for( i = 0; i < tpm2bLabel.t.size; i++ )"
    },
    {
        "line": 35,
        "fullcodeline": "if (!md) {"
    },
    {
        "line": 43,
        "fullcodeline": "if (!rc) {"
    },
    {
        "line": 49,
        "fullcodeline": "while( resultKey->t.size < bytes )"
    },
    {
        "line": 27,
        "fullcodeline": "tpm2bLabel.t.buffer[i] = label[i];"
    },
    {
        "line": 36,
        "fullcodeline": "LOG_ERR(\"Algorithm not supported for hmac: %x\", hashAlg);"
    },
    {
        "line": 44,
        "fullcodeline": "LOG_ERR(\"HMAC Init failed: %s\", ERR_error_string(rc, NULL));"
    },
    {
        "line": 54,
        "fullcodeline": "i_Swizzled = string_bytes_endian_convert_32( i );"
    },
    {
        "line": 55,
        "fullcodeline": "*(UINT32 *)tpm2b_i_2Ptr = i_Swizzled;"
    },
    {
        "line": 57,
        "fullcodeline": "j = 0;"
    },
    {
        "line": 60,
        "fullcodeline": "bufferList[j++] = (TPM2B_DIGEST *)contextU;"
    },
    {
        "line": 61,
        "fullcodeline": "bufferList[j++] = (TPM2B_DIGEST *)contextV;"
    },
    {
        "line": 63,
        "fullcodeline": "bufferList[j] = (TPM2B_DIGEST *)0;"
    },
    {
        "line": 77,
        "fullcodeline": "int rc = HMAC_Final(&ctx, tmpResult.t.buffer, &size);"
    },
    {
        "line": 84,
        "fullcodeline": "tmpResult.t.size = size;"
    },
    {
        "line": 86,
        "fullcodeline": "bool res = string_bytes_concat_buffer(resultKey, &(tmpResult.b));"
    },
    {
        "line": 66,
        "fullcodeline": "for(c=0; c < j; c++) {"
    },
    {
        "line": 78,
        "fullcodeline": "if (!rc) {"
    },
    {
        "line": 87,
        "fullcodeline": "if (!res) {"
    },
    {
        "line": 58,
        "fullcodeline": "bufferList[j++] = (TPM2B_DIGEST *)&(tpm2b_i_2.b);"
    },
    {
        "line": 59,
        "fullcodeline": "bufferList[j++] = (TPM2B_DIGEST *)&(tpm2bLabel.b);"
    },
    {
        "line": 62,
        "fullcodeline": "bufferList[j++] = (TPM2B_DIGEST *)&(tpm2bBits.b);"
    },
    {
        "line": 67,
        "fullcodeline": "TPM2B_DIGEST *digest = bufferList[c];"
    },
    {
        "line": 68,
        "fullcodeline": "int rc =  HMAC_Update(&ctx, digest->b.buffer, digest->b.size);"
    },
    {
        "line": 79,
        "fullcodeline": "LOG_ERR(\"HMAC Final failed: %s\", ERR_error_string(rc, NULL));"
    },
    {
        "line": 80,
        "fullcodeline": "rval = TPM_RC_MEMORY;"
    },
    {
        "line": 88,
        "fullcodeline": "rval = TSS2_SYS_RC_BAD_VALUE;"
    },
    {
        "line": 69,
        "fullcodeline": "if (!rc) {"
    },
    {
        "line": 70,
        "fullcodeline": "LOG_ERR(\"HMAC Update failed: %s\", ERR_error_string(rc, NULL));"
    },
    {
        "line": 71,
        "fullcodeline": "rval = TPM_RC_MEMORY;"
    }
]