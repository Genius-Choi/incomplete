[
    {
        "line": 5,
        "fullcodeline": "char line    [ASCIILINESZ+1] ;"
    },
    {
        "line": 6,
        "fullcodeline": "char section [ASCIILINESZ+1] ;"
    },
    {
        "line": 7,
        "fullcodeline": "char key     [ASCIILINESZ+1] ;"
    },
    {
        "line": 8,
        "fullcodeline": "char tmp     [(ASCIILINESZ * 2) + 1] ;"
    },
    {
        "line": 9,
        "fullcodeline": "char val     [ASCIILINESZ+1] ;"
    },
    {
        "line": 11,
        "fullcodeline": "int  last=0 ;"
    },
    {
        "line": 13,
        "fullcodeline": "int  lineno=0 ;"
    },
    {
        "line": 14,
        "fullcodeline": "int  errs=0;"
    },
    {
        "line": 23,
        "fullcodeline": "dict = dictionary_new(0) ;"
    },
    {
        "line": 29,
        "fullcodeline": "memset(line,    0, ASCIILINESZ);"
    },
    {
        "line": 30,
        "fullcodeline": "memset(section, 0, ASCIILINESZ);"
    },
    {
        "line": 31,
        "fullcodeline": "memset(key,     0, ASCIILINESZ);"
    },
    {
        "line": 32,
        "fullcodeline": "memset(val,     0, ASCIILINESZ);"
    },
    {
        "line": 33,
        "fullcodeline": "last=0 ;"
    },
    {
        "line": 18,
        "fullcodeline": "if ((in=fopen(ininame, \"r\"))==NULL) {"
    },
    {
        "line": 24,
        "fullcodeline": "if (!dict) {"
    },
    {
        "line": 35,
        "fullcodeline": "while (fgets(line+last, ASCIILINESZ-last, in)!=NULL) {"
    },
    {
        "line": 19,
        "fullcodeline": "fprintf(stderr, \"iniparser: cannot open %s\\n\", ininame);"
    },
    {
        "line": 36,
        "fullcodeline": "lineno++ ;"
    },
    {
        "line": 37,
        "fullcodeline": "len = (int)strlen(line)-1;"
    },
    {
        "line": 92,
        "fullcodeline": "memset(line, 0, ASCIILINESZ);"
    },
    {
        "line": 93,
        "fullcodeline": "last=0;"
    },
    {
        "line": 101,
        "fullcodeline": "dict = NULL ;"
    },
    {
        "line": 38,
        "fullcodeline": "if (len==0)"
    },
    {
        "line": 56,
        "fullcodeline": "if (len < 0) { /* Line was entirely \\n and/or spaces */"
    },
    {
        "line": 60,
        "fullcodeline": "if (line[len]=='\\\\') {"
    },
    {
        "line": 67,
        "fullcodeline": "switch (iniparser_line(line, section, key, val)) {"
    },
    {
        "line": 94,
        "fullcodeline": "if (errs<0) {"
    },
    {
        "line": 41,
        "fullcodeline": "if (line[len]!='\\n' && !feof(in)) {"
    },
    {
        "line": 51,
        "fullcodeline": "while ((len>=0) &&"
    },
    {
        "line": 52,
        "fullcodeline": "((line[len]=='\\n') || (isspace(line[len])))) {"
    },
    {
        "line": 53,
        "fullcodeline": "line[len]=0 ;"
    },
    {
        "line": 54,
        "fullcodeline": "len-- ;"
    },
    {
        "line": 57,
        "fullcodeline": "len = 0;"
    },
    {
        "line": 62,
        "fullcodeline": "last=len ;"
    },
    {
        "line": 73,
        "fullcodeline": "errs = dictionary_set(dict, section, NULL);"
    },
    {
        "line": 77,
        "fullcodeline": "sprintf(tmp, \"%s:%s\", section, key);"
    },
    {
        "line": 78,
        "fullcodeline": "errs = dictionary_set(dict, tmp, val) ;"
    },
    {
        "line": 82,
        "fullcodeline": "fprintf(stderr, \"iniparser: syntax error in %s (%d):\\n\","
    },
    {
        "line": 85,
        "fullcodeline": "fprintf(stderr, \"-> %s\\n\", line);"
    },
    {
        "line": 86,
        "fullcodeline": "errs++ ;"
    }
]