[
    {
        "line": 2,
        "fullcodeline": "from vyper.codegen.expr import Expr  # TODO rethink this circular import"
    },
    {
        "line": 4,
        "fullcodeline": "contract_address = Expr.parse_value_expr(call_expr.func.value, context)"
    },
    {
        "line": 5,
        "fullcodeline": "call_kwargs = _parse_kwargs(call_expr, context)"
    },
    {
        "line": 6,
        "fullcodeline": "args_ir = [Expr(x, context).ir_node for x in call_expr.args]"
    },
    {
        "line": 8,
        "fullcodeline": "assert isinstance(contract_address.typ, InterfaceType)"
    },
    {
        "line": 15,
        "fullcodeline": "assert fn_type.min_arg_count <= len(args_ir) <= fn_type.max_arg_count"
    },
    {
        "line": 17,
        "fullcodeline": "ret = [\"seq\"]"
    },
    {
        "line": 25,
        "fullcodeline": "ret += arg_packer"
    },
    {
        "line": 36,
        "fullcodeline": "gas = call_kwargs.gas"
    },
    {
        "line": 37,
        "fullcodeline": "value = call_kwargs.value"
    },
    {
        "line": 39,
        "fullcodeline": "use_staticcall = fn_type.mutability in (StateMutability.VIEW, StateMutability.PURE)"
    },
    {
        "line": 48,
        "fullcodeline": "ret.append(check_external_call(call_op))"
    },
    {
        "line": 50,
        "fullcodeline": "return_t = None"
    },
    {
        "line": 19,
        "fullcodeline": "buf, arg_packer, args_ofst, args_len = _pack_arguments(fn_type, args_ir, context)"
    },
    {
        "line": 21,
        "fullcodeline": "ret_unpacker, ret_ofst, ret_len = _unpack_returndata("
    },
    {
        "line": 27,
        "fullcodeline": "if fn_type.return_type is None and not call_kwargs.skip_contract_check:"
    },
    {
        "line": 40,
        "fullcodeline": "if context.is_constant():"
    },
    {
        "line": 51,
        "fullcodeline": "if fn_type.return_type is not None:"
    },
    {
        "line": 55,
        "fullcodeline": "return IRnode.from_list(ret, typ=return_t, location=MEMORY)"
    },
    {
        "line": 34,
        "fullcodeline": "ret.append(_extcodesize_check(contract_address))"
    },
    {
        "line": 41,
        "fullcodeline": "assert use_staticcall, \"typechecker missed this\""
    },
    {
        "line": 44,
        "fullcodeline": "call_op = [\"staticcall\", gas, contract_address, args_ofst, args_len, buf, ret_len]"
    },
    {
        "line": 46,
        "fullcodeline": "call_op = [\"call\", gas, contract_address, value, args_ofst, args_len, buf, ret_len]"
    },
    {
        "line": 52,
        "fullcodeline": "return_t = new_type_to_old_type(fn_type.return_type)"
    },
    {
        "line": 53,
        "fullcodeline": "ret.append(ret_unpacker)"
    }
]