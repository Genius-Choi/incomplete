[
    {
        "line": 2,
        "fullcodeline": "stats = {"
    },
    {
        "line": 17,
        "fullcodeline": "full_name = entry.full_name.squeeze('/')"
    },
    {
        "line": 19,
        "fullcodeline": "if full_name =~ /\\.{2}(?:\\/|\\z)/"
    },
    {
        "line": 3,
        "fullcodeline": ":current  => 0,"
    },
    {
        "line": 4,
        "fullcodeline": ":currinc  => 0,"
    },
    {
        "line": 5,
        "fullcodeline": ":entry    => entry"
    },
    {
        "line": 24,
        "fullcodeline": "dest = File.join(destdir, full_name)"
    },
    {
        "line": 41,
        "fullcodeline": "fsync_dir(dest)"
    },
    {
        "line": 42,
        "fullcodeline": "fsync_dir(File.join(dest, \"..\"))"
    },
    {
        "line": 45,
        "fullcodeline": "destdir = File.join(destdir, File.dirname(full_name))"
    },
    {
        "line": 46,
        "fullcodeline": "FileUtils.mkdir_p(destdir, :mode => 0755)"
    },
    {
        "line": 48,
        "fullcodeline": "destfile = File.join(destdir, File.basename(full_name))"
    },
    {
        "line": 56,
        "fullcodeline": "File.open(destfile, \"wb\", entry.mode) do |os|"
    },
    {
        "line": 69,
        "fullcodeline": "FileUtils.chmod(entry.mode, destfile)"
    },
    {
        "line": 70,
        "fullcodeline": "fsync_dir(File.dirname(destfile))"
    },
    {
        "line": 71,
        "fullcodeline": "fsync_dir(File.join(File.dirname(destfile), \"..\"))"
    },
    {
        "line": 26,
        "fullcodeline": "yield :dir, full_name, stats if block_given?"
    },
    {
        "line": 28,
        "fullcodeline": "if Archive::Tar::Minitar.dir?(dest)"
    },
    {
        "line": 50,
        "fullcodeline": "File.unlink(destfile) if File.symlink?(destfile)"
    },
    {
        "line": 54,
        "fullcodeline": "yield :file_start, full_name, stats if block_given?"
    },
    {
        "line": 73,
        "fullcodeline": "yield :file_done, full_name, stats if block_given?"
    },
    {
        "line": 37,
        "fullcodeline": "FileUtils.mkdir_p(dest, :mode => entry.mode)"
    },
    {
        "line": 38,
        "fullcodeline": "FileUtils.chmod(entry.mode, dest)"
    },
    {
        "line": 52,
        "fullcodeline": "FileUtils.chmod(0600, destfile) rescue nil  # Errno::ENOENT"
    },
    {
        "line": 35,
        "fullcodeline": "File.unlink(dest.chomp('/')) if File.symlink?(dest.chomp('/'))"
    },
    {
        "line": 30,
        "fullcodeline": "FileUtils.chmod(entry.mode, dest)"
    }
]