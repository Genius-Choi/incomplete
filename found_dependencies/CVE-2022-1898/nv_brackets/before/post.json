[
    {
        "line": 4,
        "fullcodeline": "pos_T\t*pos = NULL;\t    // init for GCC"
    },
    {
        "line": 9,
        "fullcodeline": "cap->oap->motion_type = MCHAR;"
    },
    {
        "line": 10,
        "fullcodeline": "cap->oap->inclusive = FALSE;"
    },
    {
        "line": 12,
        "fullcodeline": "curwin->w_cursor.coladd = 0;    // TODO: don't do this for an error."
    },
    {
        "line": 57,
        "fullcodeline": "if (  (cap->cmdchar == '['"
    },
    {
        "line": 59,
        "fullcodeline": "|| (cap->cmdchar == ']'"
    },
    {
        "line": 61,
        "fullcodeline": "nv_bracket_block(cap, &old_pos);"
    },
    {
        "line": 58,
        "fullcodeline": "&& vim_strchr((char_u *)\"{(*/#mM\", cap->nchar) != NULL)"
    },
    {
        "line": 60,
        "fullcodeline": "&& vim_strchr((char_u *)\"})*/#mM\", cap->nchar) != NULL))"
    },
    {
        "line": 64,
        "fullcodeline": "else if (cap->nchar == '[' || cap->nchar == ']')"
    },
    {
        "line": 71,
        "fullcodeline": "curwin->w_set_curswant = TRUE;"
    },
    {
        "line": 66,
        "fullcodeline": "if (cap->nchar == cap->cmdchar)\t\t    // \"]]\" or \"[[\""
    },
    {
        "line": 74,
        "fullcodeline": "if (!findpar(&cap->oap->inclusive, cap->arg, cap->count1, flag,"
    },
    {
        "line": 67,
        "fullcodeline": "flag = '{';"
    },
    {
        "line": 77,
        "fullcodeline": "clearopbeep(cap->oap);"
    },
    {
        "line": 90,
        "fullcodeline": "else if (cap->nchar == 'p' || cap->nchar == 'P')"
    },
    {
        "line": 69,
        "fullcodeline": "flag = '}';\t\t    // \"][\" or \"[]\""
    },
    {
        "line": 75,
        "fullcodeline": "(cap->oap->op_type != OP_NOP"
    },
    {
        "line": 92,
        "fullcodeline": "nv_put_opt(cap, TRUE);"
    },
    {
        "line": 76,
        "fullcodeline": "&& cap->arg == FORWARD && flag == '{')))"
    },
    {
        "line": 80,
        "fullcodeline": "if (cap->oap->op_type == OP_NOP)"
    },
    {
        "line": 81,
        "fullcodeline": "beginline(BL_WHITE | BL_FIX);"
    },
    {
        "line": 96,
        "fullcodeline": "else if (cap->nchar == '\\'' || cap->nchar == '`')"
    },
    {
        "line": 98,
        "fullcodeline": "pos = &curwin->w_cursor;"
    },
    {
        "line": 109,
        "fullcodeline": "nv_cursormark(cap, cap->nchar == '\\'', pos);"
    },
    {
        "line": 99,
        "fullcodeline": "for (n = cap->count1; n > 0; --n)"
    },
    {
        "line": 107,
        "fullcodeline": "if (pos == NULL)"
    },
    {
        "line": 102,
        "fullcodeline": "pos = getnextmark(pos, cap->cmdchar == '[' ? BACKWARD : FORWARD,"
    },
    {
        "line": 108,
        "fullcodeline": "pos = &prev_pos;"
    },
    {
        "line": 114,
        "fullcodeline": "else if (cap->nchar >= K_RIGHTRELEASE && cap->nchar <= K_LEFTMOUSE)"
    },
    {
        "line": 104,
        "fullcodeline": "if (pos == NULL)"
    },
    {
        "line": 116,
        "fullcodeline": "(void)do_mouse(cap->oap, cap->nchar,"
    },
    {
        "line": 103,
        "fullcodeline": "cap->nchar == '\\'');"
    },
    {
        "line": 164,
        "fullcodeline": "clearopbeep(cap->oap);"
    },
    {
        "line": 117,
        "fullcodeline": "(cap->cmdchar == ']') ? FORWARD : BACKWARD,"
    }
]