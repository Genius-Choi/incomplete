[
    {
        "line": 6,
        "fullcodeline": "char szLine[2048], szTime[20], szText[2048];"
    },
    {
        "line": 28,
        "fullcodeline": "line = 0;"
    },
    {
        "line": 115,
        "fullcodeline": "gf_filter_pid_set_info_str( ctx->opid, \"ttxt:last_dur\", &PROP_UINT(0) );"
    },
    {
        "line": 9,
        "fullcodeline": "if (!ctx->is_setup) {"
    },
    {
        "line": 13,
        "fullcodeline": "if (!ctx->opid) return GF_NOT_SUPPORTED;"
    },
    {
        "line": 14,
        "fullcodeline": "if (!ctx->playstate) return GF_OK;"
    },
    {
        "line": 17,
        "fullcodeline": "if (ctx->seek_state==1) {"
    },
    {
        "line": 109,
        "fullcodeline": "if (ctx->end && !ctx->noflush) {"
    },
    {
        "line": 10,
        "fullcodeline": "ctx->is_setup = GF_TRUE;"
    },
    {
        "line": 18,
        "fullcodeline": "ctx->seek_state = 2;"
    },
    {
        "line": 19,
        "fullcodeline": "gf_fseek(ctx->src, 0, SEEK_SET);"
    },
    {
        "line": 23,
        "fullcodeline": "ts_scale = ((Double) ctx->fps.num) / ctx->fps.den;"
    },
    {
        "line": 31,
        "fullcodeline": "char *sOK = gf_text_get_utf8_line(szLine, 2048, ctx->src, ctx->unicode_type);"
    },
    {
        "line": 34,
        "fullcodeline": "REM_TRAIL_MARKS(szLine, \"\\r\\n\\t \")"
    },
    {
        "line": 36,
        "fullcodeline": "line++;"
    },
    {
        "line": 37,
        "fullcodeline": "len = (u32) strlen(szLine);"
    },
    {
        "line": 40,
        "fullcodeline": "i=0;"
    },
    {
        "line": 49,
        "fullcodeline": "szTime[i] = 0;"
    },
    {
        "line": 50,
        "fullcodeline": "ctx->start = atoi(szTime);"
    },
    {
        "line": 55,
        "fullcodeline": "j=i+2;"
    },
    {
        "line": 56,
        "fullcodeline": "i=0;"
    },
    {
        "line": 65,
        "fullcodeline": "szTime[i] = 0;"
    },
    {
        "line": 66,
        "fullcodeline": "ctx->end = atoi(szTime);"
    },
    {
        "line": 67,
        "fullcodeline": "j+=i+2;"
    },
    {
        "line": 88,
        "fullcodeline": "szText[i-j] = 0;"
    },
    {
        "line": 96,
        "fullcodeline": "samp = gf_isom_new_text_sample();"
    },
    {
        "line": 97,
        "fullcodeline": "gf_isom_text_add_text(samp, szText, (u32) strlen(szText) );"
    },
    {
        "line": 98,
        "fullcodeline": "txtin_process_send_text_sample(ctx, samp, (u64) (ts_scale*(s64)ctx->start), (u32) (ts_scale*(ctx->end - ctx->start)), GF_TRUE);"
    },
    {
        "line": 99,
        "fullcodeline": "gf_isom_delete_text_sample(samp);"
    },
    {
        "line": 101,
        "fullcodeline": "ctx->prev_end = ctx->end;"
    },
    {
        "line": 103,
        "fullcodeline": "gf_filter_pid_set_info(ctx->opid, GF_PROP_PID_DOWN_BYTES, &PROP_LONGUINT( gf_ftell(ctx->src )) );"
    },
    {
        "line": 110,
        "fullcodeline": "samp = gf_isom_new_text_sample();"
    },
    {
        "line": 111,
        "fullcodeline": "txtin_process_send_text_sample(ctx, samp, (u64) (ts_scale*(s64)ctx->end), 0, GF_TRUE);"
    },
    {
        "line": 112,
        "fullcodeline": "gf_isom_delete_text_sample(samp);"
    },
    {
        "line": 11,
        "fullcodeline": "return txtin_setup_srt(filter, ctx);"
    },
    {
        "line": 25,
        "fullcodeline": "ts_scale = 25;"
    },
    {
        "line": 32,
        "fullcodeline": "if (!sOK) break;"
    },
    {
        "line": 38,
        "fullcodeline": "if (!len) continue;"
    },
    {
        "line": 41,
        "fullcodeline": "if (szLine[i] != '{') {"
    },
    {
        "line": 45,
        "fullcodeline": "while (szLine[i+1] && szLine[i+1]!='}') {"
    },
    {
        "line": 51,
        "fullcodeline": "if (ctx->start < ctx->end) {"
    },
    {
        "line": 57,
        "fullcodeline": "if (szLine[i+j] != '{') {"
    },
    {
        "line": 61,
        "fullcodeline": "while (szLine[i+1+j] && szLine[i+1+j]!='}') {"
    },
    {
        "line": 69,
        "fullcodeline": "if (ctx->start > ctx->end) {"
    },
    {
        "line": 74,
        "fullcodeline": "if (ctx->start && ctx->first_samp) {"
    },
    {
        "line": 81,
        "fullcodeline": "for (i=j; i<len; i++) {"
    },
    {
        "line": 105,
        "fullcodeline": "if (gf_filter_pid_would_block(ctx->opid))"
    },
    {
        "line": 15,
        "fullcodeline": "else if (ctx->playstate==2) return GF_EOS;"
    },
    {
        "line": 42,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_PARSER, (\"[TXTIn] Bad SUB file (line %d): expecting \\\"{\\\" got \\\"%c\\\"\\n\", line, szLine[i]));"
    },
    {
        "line": 46,
        "fullcodeline": "szTime[i] = szLine[i+1];"
    },
    {
        "line": 47,
        "fullcodeline": "i++;"
    },
    {
        "line": 52,
        "fullcodeline": "GF_LOG(GF_LOG_WARNING, GF_LOG_PARSER, (\"[TXTIn] corrupted SUB frame (line %d) - starts (at %d ms) before end of previous one (%d ms) - adjusting time stamps\\n\", line, ctx->start, ctx->end));"
    },
    {
        "line": 53,
        "fullcodeline": "ctx->start = ctx->end;"
    },
    {
        "line": 58,
        "fullcodeline": "GF_LOG(GF_LOG_WARNING, GF_LOG_PARSER, (\"[TXTIn] Bad SUB file - expecting \\\"{\\\" got \\\"%c\\\"\\n\", szLine[i]));"
    },
    {
        "line": 62,
        "fullcodeline": "szTime[i] = szLine[i+1+j];"
    },
    {
        "line": 63,
        "fullcodeline": "i++;"
    },
    {
        "line": 70,
        "fullcodeline": "GF_LOG(GF_LOG_WARNING, GF_LOG_PARSER, (\"[TXTIn] corrupted SUB frame (line %d) - ends (at %d ms) before start of current frame (%d ms) - skipping\\n\", line, ctx->end, ctx->start));"
    },
    {
        "line": 75,
        "fullcodeline": "samp = gf_isom_new_text_sample();"
    },
    {
        "line": 76,
        "fullcodeline": "txtin_process_send_text_sample(ctx, samp, 0, (u32) (ts_scale*ctx->start), GF_TRUE);"
    },
    {
        "line": 77,
        "fullcodeline": "ctx->first_samp = GF_FALSE;"
    },
    {
        "line": 78,
        "fullcodeline": "gf_isom_delete_text_sample(samp);"
    },
    {
        "line": 91,
        "fullcodeline": "samp = gf_isom_new_text_sample();"
    },
    {
        "line": 92,
        "fullcodeline": "txtin_process_send_text_sample(ctx, samp, (u64) (ts_scale*(s64)ctx->prev_end), (u32) (ts_scale*(ctx->start - ctx->prev_end)), GF_TRUE);"
    },
    {
        "line": 93,
        "fullcodeline": "gf_isom_delete_text_sample(samp);"
    },
    {
        "line": 82,
        "fullcodeline": "if (szLine[i]=='|') {"
    },
    {
        "line": 83,
        "fullcodeline": "szText[i-j] = '\\n';"
    },
    {
        "line": 85,
        "fullcodeline": "szText[i-j] = szLine[i];"
    }
]