[
    {
        "line": 28,
        "fullcodeline": "assert(cli_wand != (MagickCLI *) NULL);"
    },
    {
        "line": 29,
        "fullcodeline": "assert(cli_wand->signature == MagickWandSignature);"
    },
    {
        "line": 30,
        "fullcodeline": "assert(cli_wand->wand.signature == MagickWandSignature);"
    },
    {
        "line": 31,
        "fullcodeline": "assert(_images != (Image *) NULL);             /* _images must be present */"
    },
    {
        "line": 39,
        "fullcodeline": "arg1 = arg1n;"
    },
    {
        "line": 40,
        "fullcodeline": "arg2 = arg2n;"
    },
    {
        "line": 65,
        "fullcodeline": "status=MagickTrue;"
    },
    {
        "line": 66,
        "fullcodeline": "new_images=NewImageList();"
    },
    {
        "line": 884,
        "fullcodeline": "_images=DestroyImageList(_images);"
    },
    {
        "line": 885,
        "fullcodeline": "_images=GetFirstImageInList(new_images);"
    },
    {
        "line": 33,
        "fullcodeline": "if (cli_wand->wand.debug != MagickFalse)"
    },
    {
        "line": 43,
        "fullcodeline": "if ( (((_process_flags & ProcessInterpretProperities) != 0 )"
    },
    {
        "line": 876,
        "fullcodeline": "if (arg1 != arg1n )"
    },
    {
        "line": 878,
        "fullcodeline": "if (arg2 != arg2n )"
    },
    {
        "line": 882,
        "fullcodeline": "if (new_images == (Image *) NULL)"
    },
    {
        "line": 886,
        "fullcodeline": "return(status == 0 ? MagickFalse : MagickTrue);"
    },
    {
        "line": 34,
        "fullcodeline": "(void) CLILogEvent(cli_wand,CommandEvent,GetMagickModule(),"
    },
    {
        "line": 45,
        "fullcodeline": ")  && ((_option_type & NeverInterpretArgsFlag) == 0) ) {"
    },
    {
        "line": 68,
        "fullcodeline": "switch (*(option+1))"
    },
    {
        "line": 872,
        "fullcodeline": "CLIWandExceptionBreak(OptionError,\"UnrecognizedOption\",option);"
    },
    {
        "line": 877,
        "fullcodeline": "arg1=DestroyString((char *)arg1);"
    },
    {
        "line": 879,
        "fullcodeline": "arg2=DestroyString((char *)arg2);"
    },
    {
        "line": 44,
        "fullcodeline": "|| ((_option_type & AlwaysInterpretArgsFlag) != 0)"
    },
    {
        "line": 47,
        "fullcodeline": "if (arg1n != (char *) NULL) {"
    },
    {
        "line": 54,
        "fullcodeline": "if (arg2n != (char *) NULL) {"
    },
    {
        "line": 84,
        "fullcodeline": "CLIWandExceptionBreak(OptionError,\"UnrecognizedOption\",option);"
    },
    {
        "line": 307,
        "fullcodeline": "CLIWandExceptionBreak(OptionError,\"UnrecognizedOption\",option);"
    },
    {
        "line": 353,
        "fullcodeline": "CLIWandExceptionBreak(OptionError,\"UnrecognizedOption\",option);"
    },
    {
        "line": 367,
        "fullcodeline": "CLIWandExceptionBreak(OptionError,\"UnrecognizedOption\",option);"
    },
    {
        "line": 388,
        "fullcodeline": "CLIWandExceptionBreak(OptionError,\"UnrecognizedOption\",option);"
    },
    {
        "line": 408,
        "fullcodeline": "CLIWandExceptionBreak(OptionError,\"UnrecognizedOption\",option);"
    },
    {
        "line": 462,
        "fullcodeline": "CLIWandExceptionBreak(OptionError,\"UnrecognizedOption\",option);"
    },
    {
        "line": 609,
        "fullcodeline": "CLIWandExceptionBreak(OptionError,\"UnrecognizedOption\",option);"
    },
    {
        "line": 645,
        "fullcodeline": "CLIWandExceptionBreak(OptionError,\"UnrecognizedOption\",option);"
    },
    {
        "line": 736,
        "fullcodeline": "CLIWandExceptionBreak(OptionError,\"UnrecognizedOption\",option);"
    },
    {
        "line": 750,
        "fullcodeline": "CLIWandExceptionBreak(OptionError,\"UnrecognizedOption\",option);"
    },
    {
        "line": 869,
        "fullcodeline": "CLIWandExceptionBreak(OptionError,\"UnrecognizedOption\",option);"
    },
    {
        "line": 883,
        "fullcodeline": "return(status == 0 ? MagickFalse : MagickTrue);"
    },
    {
        "line": 36,
        "fullcodeline": "arg1n == (const char *) NULL ? \"null\" : arg1n,"
    },
    {
        "line": 37,
        "fullcodeline": "arg2n == (const char *) NULL ? \"null\" : arg2n);"
    },
    {
        "line": 48,
        "fullcodeline": "arg1=InterpretImageProperties(_image_info,_images,arg1n,_exception);"
    },
    {
        "line": 55,
        "fullcodeline": "arg2=InterpretImageProperties(_image_info,_images,arg2n,_exception);"
    },
    {
        "line": 72,
        "fullcodeline": "if (LocaleCompare(\"append\",option+1) == 0)"
    },
    {
        "line": 77,
        "fullcodeline": "if (LocaleCompare(\"average\",option+1) == 0)"
    },
    {
        "line": 88,
        "fullcodeline": "if (LocaleCompare(\"channel-fx\",option+1) == 0)"
    },
    {
        "line": 93,
        "fullcodeline": "if (LocaleCompare(\"clut\",option+1) == 0)"
    },
    {
        "line": 112,
        "fullcodeline": "if (LocaleCompare(\"coalesce\",option+1) == 0)"
    },
    {
        "line": 117,
        "fullcodeline": "if (LocaleCompare(\"combine\",option+1) == 0)"
    },
    {
        "line": 130,
        "fullcodeline": "if (LocaleCompare(\"compare\",option+1) == 0)"
    },
    {
        "line": 166,
        "fullcodeline": "if (LocaleCompare(\"complex\",option+1) == 0)"
    },
    {
        "line": 175,
        "fullcodeline": "if (LocaleCompare(\"composite\",option+1) == 0)"
    },
    {
        "line": 278,
        "fullcodeline": "if (LocaleCompare(\"copy\",option+1) == 0)"
    },
    {
        "line": 311,
        "fullcodeline": "if (LocaleCompare(\"deconstruct\",option+1) == 0)"
    },
    {
        "line": 317,
        "fullcodeline": "if (LocaleCompare(\"delete\",option+1) == 0)"
    },
    {
        "line": 325,
        "fullcodeline": "if (LocaleCompare(\"duplicate\",option+1) == 0)"
    },
    {
        "line": 357,
        "fullcodeline": "if (LocaleCompare(\"evaluate-sequence\",option+1) == 0)"
    },
    {
        "line": 371,
        "fullcodeline": "if (LocaleCompare(\"fft\",option+1) == 0)"
    },
    {
        "line": 377,
        "fullcodeline": "if (LocaleCompare(\"flatten\",option+1) == 0)"
    },
    {
        "line": 383,
        "fullcodeline": "if (LocaleCompare(\"fx\",option+1) == 0)"
    },
    {
        "line": 392,
        "fullcodeline": "if (LocaleCompare(\"hald-clut\",option+1) == 0)"
    },
    {
        "line": 412,
        "fullcodeline": "if (LocaleCompare(\"ift\",option+1) == 0)"
    },
    {
        "line": 429,
        "fullcodeline": "if (LocaleCompare(\"insert\",option+1) == 0)"
    },
    {
        "line": 466,
        "fullcodeline": "if (LocaleCompare(\"layers\",option+1) == 0)"
    },
    {
        "line": 613,
        "fullcodeline": "if (LocaleCompare(\"map\",option+1) == 0)"
    },
    {
        "line": 619,
        "fullcodeline": "if (LocaleCompare(\"metric\",option+1) == 0)"
    },
    {
        "line": 624,
        "fullcodeline": "if (LocaleCompare(\"morph\",option+1) == 0)"
    },
    {
        "line": 639,
        "fullcodeline": "if (LocaleCompare(\"mosaic\",option+1) == 0)"
    },
    {
        "line": 649,
        "fullcodeline": "if (LocaleCompare(\"poly\",option+1) == 0)"
    },
    {
        "line": 666,
        "fullcodeline": "if (LocaleCompare(\"process\",option+1) == 0)"
    },
    {
        "line": 740,
        "fullcodeline": "if (LocaleCompare(\"remap\",option+1) == 0)"
    },
    {
        "line": 745,
        "fullcodeline": "if (LocaleCompare(\"reverse\",option+1) == 0)"
    },
    {
        "line": 754,
        "fullcodeline": "if (LocaleCompare(\"smush\",option+1) == 0)"
    },
    {
        "line": 766,
        "fullcodeline": "if (LocaleCompare(\"subimage\",option+1) == 0)"
    },
    {
        "line": 822,
        "fullcodeline": "if (LocaleCompare(\"swap\",option+1) == 0)"
    },
    {
        "line": 49,
        "fullcodeline": "if (arg1 == (char *) NULL) {"
    },
    {
        "line": 56,
        "fullcodeline": "if (arg2 == (char *) NULL) {"
    },
    {
        "line": 74,
        "fullcodeline": "new_images=AppendImages(_images,IsNormalOp,_exception);"
    },
    {
        "line": 79,
        "fullcodeline": "CLIWandWarnReplaced(\"-evaluate-sequence Mean\");"
    },
    {
        "line": 80,
        "fullcodeline": "(void) CLIListOperatorImages(cli_wand,\"-evaluate-sequence\",\"Mean\","
    },
    {
        "line": 90,
        "fullcodeline": "new_images=ChannelFxImage(_images,arg1,_exception);"
    },
    {
        "line": 102,
        "fullcodeline": "new_images=RemoveFirstImageFromList(&_images);"
    },
    {
        "line": 103,
        "fullcodeline": "clut_image=RemoveLastImageFromList(&_images);"
    },
    {
        "line": 107,
        "fullcodeline": "(void) ClutImage(new_images,clut_image,new_images->interpolate,"
    },
    {
        "line": 109,
        "fullcodeline": "clut_image=DestroyImage(clut_image);"
    },
    {
        "line": 114,
        "fullcodeline": "new_images=CoalesceImages(_images,_exception);"
    },
    {
        "line": 127,
        "fullcodeline": "new_images=CombineImages(_images,(ColorspaceType) parse,_exception);"
    },
    {
        "line": 146,
        "fullcodeline": "image=RemoveFirstImageFromList(&_images);"
    },
    {
        "line": 147,
        "fullcodeline": "reconstruct_image=RemoveFirstImageFromList(&_images);"
    },
    {
        "line": 154,
        "fullcodeline": "metric=UndefinedErrorMetric;"
    },
    {
        "line": 155,
        "fullcodeline": "option=GetImageOption(_image_info,\"metric\");"
    },
    {
        "line": 159,
        "fullcodeline": "new_images=CompareImages(image,reconstruct_image,metric,&distortion,"
    },
    {
        "line": 161,
        "fullcodeline": "(void) distortion;"
    },
    {
        "line": 162,
        "fullcodeline": "reconstruct_image=DestroyImage(reconstruct_image);"
    },
    {
        "line": 163,
        "fullcodeline": "image=DestroyImage(image);"
    },
    {
        "line": 168,
        "fullcodeline": "parse=ParseCommandOption(MagickComplexOptions,MagickFalse,arg1);"
    },
    {
        "line": 172,
        "fullcodeline": "new_images=ComplexImages(_images,(ComplexOperator) parse,_exception);"
    },
    {
        "line": 194,
        "fullcodeline": "value=GetImageOption(_image_info,\"compose\");"
    },
    {
        "line": 202,
        "fullcodeline": "clip_to_self=GetCompositeClipToSelf(compose);"
    },
    {
        "line": 203,
        "fullcodeline": "value=GetImageOption(_image_info,\"compose:clip-to-self\");"
    },
    {
        "line": 206,
        "fullcodeline": "value=GetImageOption(_image_info,\"compose:outside-overlay\");"
    },
    {
        "line": 210,
        "fullcodeline": "new_images=RemoveFirstImageFromList(&_images);"
    },
    {
        "line": 211,
        "fullcodeline": "source_image=RemoveFirstImageFromList(&_images);"
    },
    {
        "line": 238,
        "fullcodeline": "SetGeometry(source_image,&geometry);"
    },
    {
        "line": 239,
        "fullcodeline": "(void) ParseAbsoluteGeometry(source_image->geometry,&geometry);"
    },
    {
        "line": 240,
        "fullcodeline": "GravityAdjustGeometry(new_images->columns,new_images->rows,"
    },
    {
        "line": 242,
        "fullcodeline": "mask_image=RemoveFirstImageFromList(&_images);"
    },
    {
        "line": 275,
        "fullcodeline": "source_image=DestroyImage(source_image);"
    },
    {
        "line": 296,
        "fullcodeline": "(void) ParsePageGeometry(_images,arg2,&geometry,_exception);"
    },
    {
        "line": 297,
        "fullcodeline": "offset.x=geometry.x;"
    },
    {
        "line": 298,
        "fullcodeline": "offset.y=geometry.y;"
    },
    {
        "line": 299,
        "fullcodeline": "source_image=_images;"
    },
    {
        "line": 302,
        "fullcodeline": "(void) ParsePageGeometry(source_image,arg1,&geometry,_exception);"
    },
    {
        "line": 303,
        "fullcodeline": "(void) CopyImagePixels(_images,source_image,&geometry,&offset,"
    },
    {
        "line": 313,
        "fullcodeline": "CLIWandWarnReplaced(\"-layer CompareAny\");"
    },
    {
        "line": 314,
        "fullcodeline": "(void) CLIListOperatorImages(cli_wand,\"-layer\",\"CompareAny\",NULL);"
    },
    {
        "line": 349,
        "fullcodeline": "AppendImageToList(&_images, new_images);"
    },
    {
        "line": 350,
        "fullcodeline": "new_images=(Image *) NULL;"
    },
    {
        "line": 359,
        "fullcodeline": "parse=ParseCommandOption(MagickEvaluateOptions,MagickFalse,arg1);"
    },
    {
        "line": 363,
        "fullcodeline": "new_images=EvaluateImages(_images,(MagickEvaluateOperator) parse,"
    },
    {
        "line": 373,
        "fullcodeline": "new_images=ForwardFourierTransformImage(_images,IsNormalOp,"
    },
    {
        "line": 380,
        "fullcodeline": "(void) CLIListOperatorImages(cli_wand,\"-layers\",option+1,NULL);"
    },
    {
        "line": 385,
        "fullcodeline": "new_images=FxImage(_images,arg1,_exception);"
    },
    {
        "line": 400,
        "fullcodeline": "new_images=RemoveFirstImageFromList(&_images);"
    },
    {
        "line": 401,
        "fullcodeline": "hald_image=RemoveLastImageFromList(&_images);"
    },
    {
        "line": 404,
        "fullcodeline": "(void) HaldClutImage(new_images,hald_image,_exception);"
    },
    {
        "line": 405,
        "fullcodeline": "hald_image=DestroyImage(hald_image);"
    },
    {
        "line": 418,
        "fullcodeline": "magnitude_image=RemoveFirstImageFromList(&_images);"
    },
    {
        "line": 419,
        "fullcodeline": "phase_image=RemoveFirstImageFromList(&_images);"
    },
    {
        "line": 423,
        "fullcodeline": "new_images=InverseFourierTransformImage(magnitude_image,phase_image,"
    },
    {
        "line": 425,
        "fullcodeline": "magnitude_image=DestroyImage(magnitude_image);"
    },
    {
        "line": 426,
        "fullcodeline": "phase_image=DestroyImage(phase_image);"
    },
    {
        "line": 440,
        "fullcodeline": "index=0;"
    },
    {
        "line": 441,
        "fullcodeline": "insert_image=RemoveLastImageFromList(&_images);"
    },
    {
        "line": 444,
        "fullcodeline": "index_image=insert_image;"
    },
    {
        "line": 459,
        "fullcodeline": "_images=GetFirstImageInList(index_image);"
    },
    {
        "line": 468,
        "fullcodeline": "parse=ParseCommandOption(MagickLayerOptions,MagickFalse,arg1);"
    },
    {
        "line": 615,
        "fullcodeline": "CLIWandWarnReplaced(\"+remap\");"
    },
    {
        "line": 616,
        "fullcodeline": "(void) RemapImages(_quantize_info,_images,(Image *) NULL,_exception);"
    },
    {
        "line": 621,
        "fullcodeline": "(void) SetImageOption(_image_info,option+1,arg1);"
    },
    {
        "line": 631,
        "fullcodeline": "morph_image=MorphImages(_images,StringToUnsignedLong(arg1),"
    },
    {
        "line": 635,
        "fullcodeline": "_images=DestroyImageList(_images);"
    },
    {
        "line": 636,
        "fullcodeline": "_images=morph_image;"
    },
    {
        "line": 642,
        "fullcodeline": "(void) CLIListOperatorImages(cli_wand,\"-layers\",option+1,NULL);"
    },
    {
        "line": 658,
        "fullcodeline": "args = StringToArrayOfDoubles(arg1,&count,_exception);"
    },
    {
        "line": 661,
        "fullcodeline": "new_images=PolynomialImage(_images,(size_t) (count >> 1),args,"
    },
    {
        "line": 663,
        "fullcodeline": "args=(double *) RelinquishMagickMemory(args);"
    },
    {
        "line": 676,
        "fullcodeline": "arguments=StringToArgv(arg1,&number_arguments);"
    },
    {
        "line": 728,
        "fullcodeline": "(void) SubstituteString(&arguments[1],\"-\",\"\");"
    },
    {
        "line": 729,
        "fullcodeline": "(void) InvokeDynamicImageFilter(arguments[1],&_images,"
    },
    {
        "line": 733,
        "fullcodeline": "arguments=(char **) RelinquishMagickMemory(arguments);"
    },
    {
        "line": 742,
        "fullcodeline": "(void) RemapImages(_quantize_info,_images,(Image *) NULL,_exception);"
    },
    {
        "line": 747,
        "fullcodeline": "ReverseImageList(&_images);"
    },
    {
        "line": 762,
        "fullcodeline": "offset=(ssize_t) StringToLong(arg1);"
    },
    {
        "line": 763,
        "fullcodeline": "new_images=SmushImages(_images,IsNormalOp,offset,_exception);"
    },
    {
        "line": 784,
        "fullcodeline": "base_image=GetImageFromList(_images,0);"
    },
    {
        "line": 785,
        "fullcodeline": "compare_image=GetImageFromList(_images,1);"
    },
    {
        "line": 788,
        "fullcodeline": "metric=UndefinedErrorMetric;"
    },
    {
        "line": 789,
        "fullcodeline": "value=GetImageOption(_image_info,\"metric\");"
    },
    {
        "line": 794,
        "fullcodeline": "new_images=SimilarityImage(base_image,compare_image,metric,0.0,"
    },
    {
        "line": 833,
        "fullcodeline": "index=(-1);"
    },
    {
        "line": 834,
        "fullcodeline": "swap_index=(-2);"
    },
    {
        "line": 850,
        "fullcodeline": "p=GetImageFromList(_images,index);"
    },
    {
        "line": 851,
        "fullcodeline": "q=GetImageFromList(_images,swap_index);"
    },
    {
        "line": 860,
        "fullcodeline": "swap=CloneImage(p,0,0,MagickTrue,_exception);"
    },
    {
        "line": 864,
        "fullcodeline": "ReplaceImageInList(&p,CloneImage(q,0,0,MagickTrue,_exception));"
    },
    {
        "line": 865,
        "fullcodeline": "ReplaceImageInList(&q,swap);"
    },
    {
        "line": 866,
        "fullcodeline": "_images=GetFirstImageInList(q);"
    },
    {
        "line": 50,
        "fullcodeline": "CLIWandException(OptionWarning,\"InterpretPropertyFailure\",option);"
    },
    {
        "line": 51,
        "fullcodeline": "arg1=arg1n;  /* use the given argument as is */"
    },
    {
        "line": 57,
        "fullcodeline": "CLIWandException(OptionWarning,\"InterpretPropertyFailure\",option);"
    },
    {
        "line": 58,
        "fullcodeline": "arg2=arg2n;  /* use the given argument as is */"
    },
    {
        "line": 105,
        "fullcodeline": "if (clut_image == (Image *) NULL)"
    },
    {
        "line": 120,
        "fullcodeline": "if (_images->number_channels < GetImageListLength(_images))"
    },
    {
        "line": 122,
        "fullcodeline": "if ( IfPlusOp )"
    },
    {
        "line": 124,
        "fullcodeline": "if (parse < 0)"
    },
    {
        "line": 149,
        "fullcodeline": "if (reconstruct_image == (Image *) NULL)"
    },
    {
        "line": 156,
        "fullcodeline": "if (option != (const char *) NULL)"
    },
    {
        "line": 169,
        "fullcodeline": "if (parse < 0)"
    },
    {
        "line": 195,
        "fullcodeline": "if (value == (const char *) NULL)"
    },
    {
        "line": 204,
        "fullcodeline": "if (value != (const char *) NULL)"
    },
    {
        "line": 207,
        "fullcodeline": "if (value != (const char *) NULL)"
    },
    {
        "line": 212,
        "fullcodeline": "if (source_image == (Image *) NULL)"
    },
    {
        "line": 216,
        "fullcodeline": "if (source_image->geometry != (char *) NULL)"
    },
    {
        "line": 243,
        "fullcodeline": "if (mask_image == (Image *) NULL)"
    },
    {
        "line": 292,
        "fullcodeline": "if (IsGeometry(arg1) == MagickFalse)"
    },
    {
        "line": 294,
        "fullcodeline": "if (IsGeometry(arg2) == MagickFalse)"
    },
    {
        "line": 300,
        "fullcodeline": "if (source_image->next != (Image *) NULL)"
    },
    {
        "line": 319,
        "fullcodeline": "if (IfNormalOp)"
    },
    {
        "line": 327,
        "fullcodeline": "if (IfNormalOp)"
    },
    {
        "line": 360,
        "fullcodeline": "if (parse < 0)"
    },
    {
        "line": 402,
        "fullcodeline": "if (hald_image == (Image *) NULL)"
    },
    {
        "line": 421,
        "fullcodeline": "if (phase_image == (Image *) NULL)"
    },
    {
        "line": 438,
        "fullcodeline": "if (IfNormalOp && (IsGeometry(arg1) == MagickFalse))"
    },
    {
        "line": 442,
        "fullcodeline": "if (IfNormalOp)"
    },
    {
        "line": 445,
        "fullcodeline": "if (index == 0)"
    },
    {
        "line": 469,
        "fullcodeline": "if ( parse < 0 )"
    },
    {
        "line": 472,
        "fullcodeline": "switch ((LayerMethod) parse)"
    },
    {
        "line": 629,
        "fullcodeline": "if (IsGeometry(arg1) == MagickFalse)"
    },
    {
        "line": 633,
        "fullcodeline": "if (morph_image == (Image *) NULL)"
    },
    {
        "line": 659,
        "fullcodeline": "if (args == (double *) NULL )"
    },
    {
        "line": 677,
        "fullcodeline": "if (arguments == (char **) NULL)"
    },
    {
        "line": 679,
        "fullcodeline": "if (strchr(arguments[1],'=') != (char *) NULL)"
    },
    {
        "line": 731,
        "fullcodeline": "for (j=0; j < number_arguments; j++)"
    },
    {
        "line": 732,
        "fullcodeline": "arguments[j]=DestroyString(arguments[j]);"
    },
    {
        "line": 760,
        "fullcodeline": "if (IsGeometry(arg1) == MagickFalse)"
    },
    {
        "line": 790,
        "fullcodeline": "if (value != (const char *) NULL)"
    },
    {
        "line": 797,
        "fullcodeline": "if (new_images != (Image *) NULL)"
    },
    {
        "line": 835,
        "fullcodeline": "if (IfNormalOp) {"
    },
    {
        "line": 852,
        "fullcodeline": "if ((p == (Image *) NULL) || (q == (Image *) NULL)) {"
    },
    {
        "line": 858,
        "fullcodeline": "if (p == q)"
    },
    {
        "line": 861,
        "fullcodeline": "if (swap == (Image *) NULL)"
    },
    {
        "line": 119,
        "fullcodeline": "parse=(ssize_t) _images->colorspace;"
    },
    {
        "line": 121,
        "fullcodeline": "parse=sRGBColorspace;"
    },
    {
        "line": 123,
        "fullcodeline": "parse=ParseCommandOption(MagickColorspaceOptions,MagickFalse,arg1);"
    },
    {
        "line": 125,
        "fullcodeline": "CLIWandExceptArgBreak(OptionError,\"UnrecognizedColorspace\",option,"
    },
    {
        "line": 151,
        "fullcodeline": "image=DestroyImage(image);"
    },
    {
        "line": 157,
        "fullcodeline": "metric=(MetricType) ParseCommandOption(MagickMetricOptions,"
    },
    {
        "line": 170,
        "fullcodeline": "CLIWandExceptArgBreak(OptionError,\"UnrecognizedEvaluateOperator\","
    },
    {
        "line": 196,
        "fullcodeline": "compose=OverCompositeOp;  /* use Over not source_image->compose */"
    },
    {
        "line": 205,
        "fullcodeline": "clip_to_self=IsStringTrue(value);"
    },
    {
        "line": 208,
        "fullcodeline": "clip_to_self=IsStringFalse(value);  /* deprecated */"
    },
    {
        "line": 221,
        "fullcodeline": "(void) ParseRegionGeometry(source_image,source_image->geometry,"
    },
    {
        "line": 244,
        "fullcodeline": "status&=CompositeImage(new_images,source_image,compose,clip_to_self,"
    },
    {
        "line": 293,
        "fullcodeline": "CLIWandExceptArgBreak(OptionError,\"InvalidArgument\",option,arg1);"
    },
    {
        "line": 295,
        "fullcodeline": "CLIWandExceptArgBreak(OptionError,\"InvalidArgument\",option,arg1);"
    },
    {
        "line": 301,
        "fullcodeline": "source_image=source_image->next;"
    },
    {
        "line": 320,
        "fullcodeline": "DeleteImages(&_images,arg1,_exception);"
    },
    {
        "line": 338,
        "fullcodeline": "number_duplicates=(size_t) StringToLong(arg1);"
    },
    {
        "line": 339,
        "fullcodeline": "p=strchr(arg1,',');"
    },
    {
        "line": 361,
        "fullcodeline": "CLIWandExceptArgBreak(OptionError,\"UnrecognizedEvaluateOperator\","
    },
    {
        "line": 439,
        "fullcodeline": "CLIWandExceptArgBreak(OptionError,\"InvalidArgument\",option,arg1);"
    },
    {
        "line": 443,
        "fullcodeline": "index=(ssize_t) StringToLong(arg1);"
    },
    {
        "line": 446,
        "fullcodeline": "PrependImageToList(&_images,insert_image);"
    },
    {
        "line": 470,
        "fullcodeline": "CLIWandExceptArgBreak(OptionError,\"UnrecognizedLayerMethod\","
    },
    {
        "line": 630,
        "fullcodeline": "CLIWandExceptArgBreak(OptionError,\"InvalidArgument\",option,arg1);"
    },
    {
        "line": 660,
        "fullcodeline": "CLIWandExceptArgBreak(OptionError,\"InvalidNumberList\",option,arg1);"
    },
    {
        "line": 702,
        "fullcodeline": "assert(arg1 != (const char *) NULL);"
    },
    {
        "line": 703,
        "fullcodeline": "length=strlen(arg1);"
    },
    {
        "line": 704,
        "fullcodeline": "token=(char *) NULL;"
    },
    {
        "line": 710,
        "fullcodeline": "next=0;"
    },
    {
        "line": 711,
        "fullcodeline": "arguments=arg1;"
    },
    {
        "line": 712,
        "fullcodeline": "token_info=AcquireTokenInfo();"
    },
    {
        "line": 713,
        "fullcodeline": "status=Tokenizer(token_info,0,token,length,arguments,\"\",\"=\","
    },
    {
        "line": 715,
        "fullcodeline": "token_info=DestroyTokenInfo(token_info);"
    },
    {
        "line": 725,
        "fullcodeline": "token=DestroyString(token);"
    },
    {
        "line": 730,
        "fullcodeline": "number_arguments-2,(const char **) arguments+2,_exception);"
    },
    {
        "line": 761,
        "fullcodeline": "CLIWandExceptArgBreak(OptionError,\"InvalidArgument\",option,arg1);"
    },
    {
        "line": 791,
        "fullcodeline": "metric=(MetricType) ParseCommandOption(MagickMetricOptions,"
    },
    {
        "line": 800,
        "fullcodeline": "result[MagickPathExtent];"
    },
    {
        "line": 802,
        "fullcodeline": "(void) FormatLocaleString(result,MagickPathExtent,\"%lf\","
    },
    {
        "line": 804,
        "fullcodeline": "(void) SetImageProperty(new_images,\"subimage:similarity\",result,"
    },
    {
        "line": 806,
        "fullcodeline": "(void) FormatLocaleString(result,MagickPathExtent,\"%+ld\",(long)"
    },
    {
        "line": 808,
        "fullcodeline": "(void) SetImageProperty(new_images,\"subimage:x\",result,"
    },
    {
        "line": 810,
        "fullcodeline": "(void) FormatLocaleString(result,MagickPathExtent,\"%+ld\",(long)"
    },
    {
        "line": 812,
        "fullcodeline": "(void) SetImageProperty(new_images,\"subimage:y\",result,"
    },
    {
        "line": 814,
        "fullcodeline": "(void) FormatLocaleString(result,MagickPathExtent,"
    },
    {
        "line": 817,
        "fullcodeline": "(void) SetImageProperty(new_images,\"subimage:offset\",result,"
    },
    {
        "line": 842,
        "fullcodeline": "swap_index=(-1);"
    },
    {
        "line": 843,
        "fullcodeline": "flags=ParseGeometry(arg1,&geometry_info);"
    },
    {
        "line": 846,
        "fullcodeline": "index=(ssize_t) geometry_info.rho;"
    },
    {
        "line": 854,
        "fullcodeline": "CLIWandExceptArgBreak(OptionError,\"InvalidImageIndex\",option,arg1)"
    },
    {
        "line": 859,
        "fullcodeline": "CLIWandExceptArgBreak(OptionError,\"InvalidImageIndex\",option,arg1);"
    },
    {
        "line": 862,
        "fullcodeline": "CLIWandExceptArgBreak(ResourceLimitError,\"MemoryAllocationFailed\","
    },
    {
        "line": 198,
        "fullcodeline": "compose=(CompositeOperator) ParseCommandOption(MagickComposeOptions,"
    },
    {
        "line": 223,
        "fullcodeline": "if ((source_image->columns != resize_geometry.width) ||"
    },
    {
        "line": 273,
        "fullcodeline": "mask_image=DestroyImage(mask_image);"
    },
    {
        "line": 322,
        "fullcodeline": "DeleteImages(&_images,\"-1\",_exception);"
    },
    {
        "line": 335,
        "fullcodeline": "if (IsGeometry(arg1) == MagickFalse)"
    },
    {
        "line": 340,
        "fullcodeline": "if (p == (const char *) NULL)"
    },
    {
        "line": 348,
        "fullcodeline": "new_images=DuplicateImages(_images,1,\"-1\",_exception);"
    },
    {
        "line": 476,
        "fullcodeline": "new_images=CoalesceImages(_images,_exception);"
    },
    {
        "line": 484,
        "fullcodeline": "new_images=CompareImagesLayers(_images,(LayerMethod) parse,"
    },
    {
        "line": 493,
        "fullcodeline": "new_images=MergeImageLayers(_images,(LayerMethod) parse,"
    },
    {
        "line": 499,
        "fullcodeline": "new_images=DisposeImages(_images,_exception);"
    },
    {
        "line": 504,
        "fullcodeline": "new_images=OptimizeImageLayers(_images,_exception);"
    },
    {
        "line": 509,
        "fullcodeline": "new_images=OptimizePlusImageLayers(_images,_exception);"
    },
    {
        "line": 514,
        "fullcodeline": "OptimizeImageTransparency(_images,_exception);"
    },
    {
        "line": 519,
        "fullcodeline": "RemoveDuplicateLayers(&_images,_exception);"
    },
    {
        "line": 524,
        "fullcodeline": "RemoveZeroDelayLayers(&_images,_exception);"
    },
    {
        "line": 529,
        "fullcodeline": "new_images=CoalesceImages(_images,_exception);"
    },
    {
        "line": 532,
        "fullcodeline": "_images=DestroyImageList(_images);"
    },
    {
        "line": 533,
        "fullcodeline": "_images=OptimizeImageLayers(new_images,_exception);"
    },
    {
        "line": 536,
        "fullcodeline": "new_images=DestroyImageList(new_images);"
    },
    {
        "line": 537,
        "fullcodeline": "OptimizeImageTransparency(_images,_exception);"
    },
    {
        "line": 538,
        "fullcodeline": "(void) RemapImages(_quantize_info,_images,(Image *) NULL,"
    },
    {
        "line": 556,
        "fullcodeline": "value=GetImageOption(_image_info,\"compose\");"
    },
    {
        "line": 557,
        "fullcodeline": "compose=OverCompositeOp;  /* Default to Over */"
    },
    {
        "line": 563,
        "fullcodeline": "source=_images;"
    },
    {
        "line": 589,
        "fullcodeline": "SetGeometry(_images,&geometry);"
    },
    {
        "line": 590,
        "fullcodeline": "(void) ParseAbsoluteGeometry(_images->geometry,&geometry);"
    },
    {
        "line": 591,
        "fullcodeline": "geometry.width=source->page.width != 0 ?"
    },
    {
        "line": 593,
        "fullcodeline": "geometry.height=source->page.height != 0 ?"
    },
    {
        "line": 595,
        "fullcodeline": "GravityAdjustGeometry(_images->page.width != 0 ?"
    },
    {
        "line": 601,
        "fullcodeline": "CompositeLayers(_images,compose,source,geometry.x,geometry.y,"
    },
    {
        "line": 603,
        "fullcodeline": "source=DestroyImageList(source);"
    },
    {
        "line": 705,
        "fullcodeline": "if (~length >= (MagickPathExtent-1))"
    },
    {
        "line": 708,
        "fullcodeline": "if (token == (char *) NULL)"
    },
    {
        "line": 716,
        "fullcodeline": "if (status == 0)"
    },
    {
        "line": 844,
        "fullcodeline": "if ((flags & RhoValue) == 0)"
    },
    {
        "line": 847,
        "fullcodeline": "if ((flags & SigmaValue) != 0)"
    },
    {
        "line": 863,
        "fullcodeline": "option,GetExceptionMessage(errno));"
    },
    {
        "line": 224,
        "fullcodeline": "(source_image->rows != resize_geometry.height))"
    },
    {
        "line": 229,
        "fullcodeline": "resize_image=ResizeImage(source_image,resize_geometry.width,"
    },
    {
        "line": 248,
        "fullcodeline": "if ((compose == DisplaceCompositeOp) ||"
    },
    {
        "line": 336,
        "fullcodeline": "CLIWandExceptArgBreak(OptionError,\"InvalidArgument\",option,"
    },
    {
        "line": 341,
        "fullcodeline": "new_images=DuplicateImages(_images,number_duplicates,\"-1\","
    },
    {
        "line": 424,
        "fullcodeline": "IsNormalOp,_exception);"
    },
    {
        "line": 447,
        "fullcodeline": "else if (index == (ssize_t) GetImageListLength(_images))"
    },
    {
        "line": 530,
        "fullcodeline": "if (new_images == (Image *) NULL)"
    },
    {
        "line": 534,
        "fullcodeline": "if (_images == (Image *) NULL)"
    },
    {
        "line": 558,
        "fullcodeline": "if (value != (const char *) NULL)"
    },
    {
        "line": 564,
        "fullcodeline": "while (source != (Image *) NULL)"
    },
    {
        "line": 571,
        "fullcodeline": "if (source != (Image *) NULL)"
    },
    {
        "line": 582,
        "fullcodeline": "if (source == (Image *) NULL)"
    },
    {
        "line": 706,
        "fullcodeline": "token=(char *) AcquireQuantumMemory(length+MagickPathExtent,"
    },
    {
        "line": 721,
        "fullcodeline": "argv=(&(arguments[next]));"
    },
    {
        "line": 722,
        "fullcodeline": "(void) InvokeDynamicImageFilter(token,&_images,1,&argv,"
    },
    {
        "line": 815,
        "fullcodeline": "\"%lux%lu%+ld%+ld\",(unsigned long) offset.width,(unsigned long)"
    },
    {
        "line": 816,
        "fullcodeline": "offset.height,(long) offset.x,(long) offset.y);"
    },
    {
        "line": 845,
        "fullcodeline": "CLIWandExceptArgBreak(OptionError,\"InvalidArgument\",option,arg1);"
    },
    {
        "line": 848,
        "fullcodeline": "swap_index=(ssize_t) geometry_info.sigma;"
    },
    {
        "line": 231,
        "fullcodeline": "if (resize_image != (Image *) NULL)"
    },
    {
        "line": 249,
        "fullcodeline": "(compose == DistortCompositeOp))"
    },
    {
        "line": 251,
        "fullcodeline": "status&=CompositeImage(source_image,mask_image,"
    },
    {
        "line": 253,
        "fullcodeline": "status&=CompositeImage(new_images,source_image,compose,"
    },
    {
        "line": 344,
        "fullcodeline": "new_images=DuplicateImages(_images,number_duplicates,p,"
    },
    {
        "line": 448,
        "fullcodeline": "AppendImageToList(&_images,insert_image);"
    },
    {
        "line": 559,
        "fullcodeline": "compose=(CompositeOperator) ParseCommandOption("
    },
    {
        "line": 566,
        "fullcodeline": "source=GetNextImageInList(source);"
    },
    {
        "line": 584,
        "fullcodeline": "(void) ThrowMagickException(_exception,GetMagickModule(),"
    },
    {
        "line": 233,
        "fullcodeline": "source_image=DestroyImage(source_image);"
    },
    {
        "line": 234,
        "fullcodeline": "source_image=resize_image;"
    },
    {
        "line": 261,
        "fullcodeline": "clone_image=CloneImage(new_images,0,0,MagickTrue,_exception);"
    },
    {
        "line": 264,
        "fullcodeline": "status&=CompositeImage(new_images,source_image,compose,"
    },
    {
        "line": 266,
        "fullcodeline": "status&=CompositeImage(new_images,mask_image,"
    },
    {
        "line": 268,
        "fullcodeline": "status&=CompositeImage(clone_image,new_images,OverCompositeOp,"
    },
    {
        "line": 270,
        "fullcodeline": "new_images=DestroyImageList(new_images);"
    },
    {
        "line": 271,
        "fullcodeline": "new_images=clone_image;"
    },
    {
        "line": 451,
        "fullcodeline": "index_image=GetImageFromList(_images,index-1);"
    },
    {
        "line": 457,
        "fullcodeline": "InsertImageInList(&index_image,insert_image);"
    },
    {
        "line": 567,
        "fullcodeline": "if ((source != (Image *) NULL) &&"
    },
    {
        "line": 573,
        "fullcodeline": "if ((GetPreviousImageInList(source) == (Image *) NULL) ||"
    },
    {
        "line": 262,
        "fullcodeline": "if (clone_image == (Image *) NULL)"
    },
    {
        "line": 452,
        "fullcodeline": "if (index_image == (Image *) NULL)"
    },
    {
        "line": 568,
        "fullcodeline": "(LocaleCompare(source->magick,\"NULL\") == 0))"
    },
    {
        "line": 574,
        "fullcodeline": "(GetNextImageInList(source) == (Image *) NULL))"
    },
    {
        "line": 575,
        "fullcodeline": "source=(Image *) NULL;"
    },
    {
        "line": 597,
        "fullcodeline": "_images->page.height != 0 ? _images->page.height :"
    },
    {
        "line": 454,
        "fullcodeline": "insert_image=DestroyImage(insert_image);"
    },
    {
        "line": 455,
        "fullcodeline": "CLIWandExceptArgBreak(OptionError,\"NoSuchImage\",option,arg1);"
    },
    {
        "line": 578,
        "fullcodeline": "source=SplitImageList(source->previous);"
    },
    {
        "line": 579,
        "fullcodeline": "DeleteImageFromList(&source);"
    }
]