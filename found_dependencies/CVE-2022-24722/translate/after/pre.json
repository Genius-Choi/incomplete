[
    {
        "line": 5,
        "fullcodeline": "locale = options.delete(:locale) || ::I18n.locale"
    },
    {
        "line": 1,
        "fullcodeline": "def translate(key = nil, **options)"
    },
    {
        "line": 2,
        "fullcodeline": "return super unless i18n_backend"
    },
    {
        "line": 3,
        "fullcodeline": "return key.map { |k| translate(k, **options) } if key.is_a?(Array)"
    },
    {
        "line": 7,
        "fullcodeline": "key = \"#{i18n_scope}#{key}\" if key.start_with?(\".\")"
    },
    {
        "line": 9,
        "fullcodeline": "if HTML_SAFE_TRANSLATION_KEY.match?(key)"
    },
    {
        "line": 13,
        "fullcodeline": "if key.start_with?(i18n_scope + \".\")"
    },
    {
        "line": 6,
        "fullcodeline": "key = key&.to_s unless key.is_a?(String)"
    },
    {
        "line": 10,
        "fullcodeline": "html_escape_translation_options!(options)"
    },
    {
        "line": 14,
        "fullcodeline": "translated ="
    },
    {
        "line": 15,
        "fullcodeline": "catch(:exception) do"
    },
    {
        "line": 30,
        "fullcodeline": "super(key, locale: locale, **options)"
    },
    {
        "line": 25,
        "fullcodeline": "translated = html_safe_translation(translated)"
    },
    {
        "line": 21,
        "fullcodeline": "return super(key, locale: locale, **options)"
    },
    {
        "line": 24,
        "fullcodeline": "if HTML_SAFE_TRANSLATION_KEY.match?(key)"
    }
]