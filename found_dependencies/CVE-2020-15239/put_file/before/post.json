[
    {
        "line": 14,
        "fullcodeline": "verification_key = flask.request.args.get(\"v\", \"\")"
    },
    {
        "line": 15,
        "fullcodeline": "length = int(flask.request.headers.get(\"Content-Length\", 0))"
    },
    {
        "line": 16,
        "fullcodeline": "hmac_input = \"{} {}\".format(path, length).encode(\"utf-8\")"
    },
    {
        "line": 18,
        "fullcodeline": "mac = hmac.new(key, hmac_input, hashlib.sha256)"
    },
    {
        "line": 19,
        "fullcodeline": "digest = mac.hexdigest()"
    },
    {
        "line": 28,
        "fullcodeline": "content_type = flask.request.headers.get("
    },
    {
        "line": 21,
        "fullcodeline": "if not hmac.compare_digest(digest, verification_key):"
    },
    {
        "line": 33,
        "fullcodeline": "dest_path.parent.mkdir(parents=True, exist_ok=True, mode=0o770)"
    },
    {
        "line": 34,
        "fullcodeline": "data_file, metadata_file = get_paths(dest_path)"
    },
    {
        "line": 62,
        "fullcodeline": "return flask.Response("
    },
    {
        "line": 3,
        "fullcodeline": "dest_path = sanitized_join("
    },
    {
        "line": 22,
        "fullcodeline": "return flask.Response("
    },
    {
        "line": 37,
        "fullcodeline": "with write_file(data_file) as fout:"
    },
    {
        "line": 5,
        "fullcodeline": "pathlib.Path(app.config[\"DATA_ROOT\"]),"
    },
    {
        "line": 60,
        "fullcodeline": "raise"
    },
    {
        "line": 8,
        "fullcodeline": "return flask.Response("
    },
    {
        "line": 38,
        "fullcodeline": "stream_file(flask.request.stream, fout, length)"
    },
    {
        "line": 48,
        "fullcodeline": "return flask.Response("
    },
    {
        "line": 40,
        "fullcodeline": "with metadata_file.open(\"x\") as f:"
    },
    {
        "line": 55,
        "fullcodeline": "return flask.Response("
    },
    {
        "line": 41,
        "fullcodeline": "json.dump("
    },
    {
        "line": 42,
        "fullcodeline": "{"
    },
    {
        "line": 43,
        "fullcodeline": "\"headers\": {\"Content-Type\": content_type},"
    }
]