[
    {
        "line": 12,
        "fullcodeline": "--*notecount;"
    },
    {
        "line": 21,
        "fullcodeline": "(void)memcpy(xnh_addr, &nbuf[offset], xnh_sizeof);"
    },
    {
        "line": 22,
        "fullcodeline": "offset += xnh_sizeof;"
    },
    {
        "line": 24,
        "fullcodeline": "namesz = xnh_namesz;"
    },
    {
        "line": 25,
        "fullcodeline": "descsz = xnh_descsz;"
    },
    {
        "line": 45,
        "fullcodeline": "noff = offset;"
    },
    {
        "line": 46,
        "fullcodeline": "doff = ELF_ALIGN(offset + namesz);"
    },
    {
        "line": 55,
        "fullcodeline": "offset = ELF_ALIGN(doff + descsz);"
    },
    {
        "line": 10,
        "fullcodeline": "if (*notecount == 0)"
    },
    {
        "line": 14,
        "fullcodeline": "if (xnh_sizeof + offset > size) {"
    },
    {
        "line": 26,
        "fullcodeline": "if ((namesz == 0) && (descsz == 0)) {"
    },
    {
        "line": 33,
        "fullcodeline": "if (namesz & 0x80000000) {"
    },
    {
        "line": 39,
        "fullcodeline": "if (descsz & 0x80000000) {"
    },
    {
        "line": 48,
        "fullcodeline": "if (offset + namesz > size) {"
    },
    {
        "line": 56,
        "fullcodeline": "if (doff + descsz > size) {"
    },
    {
        "line": 63,
        "fullcodeline": "if ((*flags & FLAGS_DID_OS_NOTE) == 0) {"
    },
    {
        "line": 69,
        "fullcodeline": "if ((*flags & FLAGS_DID_BUILD_ID) == 0) {"
    },
    {
        "line": 75,
        "fullcodeline": "if ((*flags & FLAGS_DID_NETBSD_PAX) == 0) {"
    },
    {
        "line": 81,
        "fullcodeline": "if ((*flags & FLAGS_DID_CORE) == 0) {"
    },
    {
        "line": 87,
        "fullcodeline": "if (namesz == 7 && strcmp((char *)&nbuf[noff], \"NetBSD\") == 0) {"
    },
    {
        "line": 34,
        "fullcodeline": "(void)file_printf(ms, \", bad note name size 0x%lx\","
    },
    {
        "line": 40,
        "fullcodeline": "(void)file_printf(ms, \", bad note description size 0x%lx\","
    },
    {
        "line": 18,
        "fullcodeline": "return xnh_sizeof + offset;"
    },
    {
        "line": 30,
        "fullcodeline": "return (offset >= size) ? offset : size;"
    },
    {
        "line": 60,
        "fullcodeline": "return (offset >= size) ? offset : size;"
    },
    {
        "line": 64,
        "fullcodeline": "if (do_os_note(ms, nbuf, xnh_type, swap,"
    },
    {
        "line": 70,
        "fullcodeline": "if (do_bid_note(ms, nbuf, xnh_type, swap,"
    },
    {
        "line": 76,
        "fullcodeline": "if (do_pax_note(ms, nbuf, xnh_type, swap,"
    },
    {
        "line": 82,
        "fullcodeline": "if (do_core_note(ms, nbuf, xnh_type, swap,"
    },
    {
        "line": 35,
        "fullcodeline": "(unsigned long)namesz);"
    },
    {
        "line": 41,
        "fullcodeline": "(unsigned long)descsz);"
    },
    {
        "line": 92,
        "fullcodeline": "if (*flags & FLAGS_DID_NETBSD_MARCH)"
    },
    {
        "line": 94,
        "fullcodeline": "if (file_printf(ms, \", compiled for: %.*s\", (int)descsz,"
    },
    {
        "line": 99,
        "fullcodeline": "if (*flags & FLAGS_DID_NETBSD_CMODEL)"
    },
    {
        "line": 101,
        "fullcodeline": "if (file_printf(ms, \", compiler model: %.*s\","
    },
    {
        "line": 106,
        "fullcodeline": "if (*flags & FLAGS_DID_NETBSD_UNKNOWN)"
    },
    {
        "line": 108,
        "fullcodeline": "if (file_printf(ms, \", note=%u\", xnh_type) == -1)"
    },
    {
        "line": 95,
        "fullcodeline": "(const char *)&nbuf[doff]) == -1)"
    },
    {
        "line": 102,
        "fullcodeline": "(int)descsz, (const char *)&nbuf[doff]) == -1)"
    }
]