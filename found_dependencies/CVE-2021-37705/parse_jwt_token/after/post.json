[
    {
        "line": 3,
        "fullcodeline": "token_str = get_auth_token(request)"
    },
    {
        "line": 12,
        "fullcodeline": "token = jwt.decode(token_str, options={\"verify_signature\": False})"
    },
    {
        "line": 19,
        "fullcodeline": "tenants = get_allowed_tenants()"
    },
    {
        "line": 24,
        "fullcodeline": "application_id = UUID(token[\"appid\"]) if \"appid\" in token else None"
    },
    {
        "line": 25,
        "fullcodeline": "object_id = UUID(token[\"oid\"]) if \"oid\" in token else None"
    },
    {
        "line": 26,
        "fullcodeline": "upn = token.get(\"upn\")"
    },
    {
        "line": 4,
        "fullcodeline": "if token_str is None:"
    },
    {
        "line": 14,
        "fullcodeline": "if \"iss\" not in token:"
    },
    {
        "line": 20,
        "fullcodeline": "if token[\"iss\"] not in tenants:"
    },
    {
        "line": 27,
        "fullcodeline": "return UserInfo(application_id=application_id, object_id=object_id, upn=upn)"
    },
    {
        "line": 21,
        "fullcodeline": "logging.error(\"issuer not from allowed tenant: %s - %s\", token[\"iss\"], tenants)"
    },
    {
        "line": 5,
        "fullcodeline": "return Error("
    },
    {
        "line": 15,
        "fullcodeline": "return Error("
    },
    {
        "line": 22,
        "fullcodeline": "return Error(code=ErrorCode.INVALID_REQUEST, errors=[\"unauthorized AAD issuer\"])"
    },
    {
        "line": 7,
        "fullcodeline": "errors=[\"unable to find authorization token\"],"
    },
    {
        "line": 16,
        "fullcodeline": "code=ErrorCode.INVALID_REQUEST, errors=[\"missing issuer from token\"]"
    }
]