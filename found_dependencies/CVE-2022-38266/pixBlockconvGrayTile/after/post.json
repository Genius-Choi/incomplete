[
    {
        "line": 12,
        "fullcodeline": "PROCNAME(\"pixBlockconvGrayTile\");"
    },
    {
        "line": 16,
        "fullcodeline": "pixGetDimensions(pixs, &w, &h, &d);"
    },
    {
        "line": 26,
        "fullcodeline": "wd = w - 2 * wc;"
    },
    {
        "line": 27,
        "fullcodeline": "hd = h - 2 * hc;"
    },
    {
        "line": 46,
        "fullcodeline": "datat = pixGetData(pixt);"
    },
    {
        "line": 47,
        "fullcodeline": "wplt = pixGetWpl(pixt);"
    },
    {
        "line": 48,
        "fullcodeline": "datad = pixGetData(pixd);"
    },
    {
        "line": 49,
        "fullcodeline": "wpld = pixGetWpl(pixd);"
    },
    {
        "line": 50,
        "fullcodeline": "norm = 1. / (l_float32)((2 * wc + 1) * (2 * hc + 1));"
    },
    {
        "line": 77,
        "fullcodeline": "pixDestroy(&pixt);"
    },
    {
        "line": 14,
        "fullcodeline": "if (!pixs)"
    },
    {
        "line": 17,
        "fullcodeline": "if (d != 8)"
    },
    {
        "line": 19,
        "fullcodeline": "if (wc <= 0 || hc <= 0)  /* no-op */"
    },
    {
        "line": 21,
        "fullcodeline": "if (w < 2 * wc + 3 || h < 2 * hc + 3) {"
    },
    {
        "line": 42,
        "fullcodeline": "if ((pixd = pixCreateTemplate(pixs)) == NULL) {"
    },
    {
        "line": 61,
        "fullcodeline": "for (i = hc; i < hc + hd - 2; i++) {"
    },
    {
        "line": 22,
        "fullcodeline": "L_ERROR(\"kernel is too large: w = %d, wc = %d, h = %d, hc = %d\\n\","
    },
    {
        "line": 43,
        "fullcodeline": "pixDestroy(&pixt);"
    },
    {
        "line": 62,
        "fullcodeline": "imin = L_MAX(i - hc - 1, 0);"
    },
    {
        "line": 63,
        "fullcodeline": "imax = L_MIN(i + hc, h - 1);"
    },
    {
        "line": 64,
        "fullcodeline": "lined = datad + i * wpld;"
    },
    {
        "line": 65,
        "fullcodeline": "linemint = datat + imin * wplt;"
    },
    {
        "line": 66,
        "fullcodeline": "linemaxt = datat + imax * wplt;"
    },
    {
        "line": 15,
        "fullcodeline": "return (PIX *)ERROR_PTR(\"pix not defined\", procName, NULL);"
    },
    {
        "line": 18,
        "fullcodeline": "return (PIX *)ERROR_PTR(\"pixs not 8 bpp\", procName, NULL);"
    },
    {
        "line": 20,
        "fullcodeline": "return pixCopy(NULL, pixs);"
    },
    {
        "line": 24,
        "fullcodeline": "return pixCopy(NULL, pixs);"
    },
    {
        "line": 30,
        "fullcodeline": "if (pixGetDepth(pixacc) == 32) {"
    },
    {
        "line": 44,
        "fullcodeline": "return (PIX *)ERROR_PTR(\"pixd not made\", procName, NULL);"
    },
    {
        "line": 67,
        "fullcodeline": "for (j = wc; j < wc + wd - 2; j++) {"
    },
    {
        "line": 31,
        "fullcodeline": "pixt = pixClone(pixacc);"
    },
    {
        "line": 38,
        "fullcodeline": "if ((pixt = pixBlockconvAccum(pixs)) == NULL)"
    },
    {
        "line": 68,
        "fullcodeline": "jmin = L_MAX(j - wc - 1, 0);"
    },
    {
        "line": 69,
        "fullcodeline": "jmax = L_MIN(j + wc, w - 1);"
    },
    {
        "line": 70,
        "fullcodeline": "val = linemaxt[jmax] - linemaxt[jmin]"
    },
    {
        "line": 72,
        "fullcodeline": "val = (l_uint8)(norm * val + 0.5);"
    },
    {
        "line": 73,
        "fullcodeline": "SET_DATA_BYTE(lined, j, val);"
    },
    {
        "line": 33,
        "fullcodeline": "L_WARNING(\"pixacc not 32 bpp; making new one\\n\", procName);"
    },
    {
        "line": 34,
        "fullcodeline": "if ((pixt = pixBlockconvAccum(pixs)) == NULL)"
    },
    {
        "line": 39,
        "fullcodeline": "return (PIX *)ERROR_PTR(\"pixt not made\", procName, NULL);"
    },
    {
        "line": 35,
        "fullcodeline": "return (PIX *)ERROR_PTR(\"pixt not made\", procName, NULL);"
    }
]