[
    {
        "line": 8,
        "fullcodeline": "PROCNAME(\"pixBlockconv\");"
    },
    {
        "line": 14,
        "fullcodeline": "pixGetDimensions(pix, &w, &h, &d);"
    },
    {
        "line": 53,
        "fullcodeline": "pixDestroy(&pixs);"
    },
    {
        "line": 10,
        "fullcodeline": "if (!pix)"
    },
    {
        "line": 12,
        "fullcodeline": "if (wc <= 0 || hc <= 0)"
    },
    {
        "line": 15,
        "fullcodeline": "if (w < 2 * wc + 1 || h < 2 * hc + 1) {"
    },
    {
        "line": 22,
        "fullcodeline": "if ((d == 2 || d == 4 || d == 8) && pixGetColormap(pix)) {"
    },
    {
        "line": 30,
        "fullcodeline": "if (d != 8 && d != 32) {"
    },
    {
        "line": 35,
        "fullcodeline": "if (d == 8) {"
    },
    {
        "line": 16,
        "fullcodeline": "L_ERROR(\"kernel is too large: w = %d, wc = %d, h = %d, hc = %d\\n\","
    },
    {
        "line": 23,
        "fullcodeline": "L_WARNING(\"pix has colormap; removing\\n\", procName);"
    },
    {
        "line": 24,
        "fullcodeline": "pixs = pixRemoveColormap(pix, REMOVE_CMAP_BASED_ON_SRC);"
    },
    {
        "line": 25,
        "fullcodeline": "d = pixGetDepth(pixs);"
    },
    {
        "line": 31,
        "fullcodeline": "pixDestroy(&pixs);"
    },
    {
        "line": 36,
        "fullcodeline": "pixd = pixBlockconvGray(pixs, NULL, wc, hc);"
    },
    {
        "line": 11,
        "fullcodeline": "return (PIX *)ERROR_PTR(\"pix not defined\", procName, NULL);"
    },
    {
        "line": 13,
        "fullcodeline": "return pixCopy(NULL, pix);"
    },
    {
        "line": 18,
        "fullcodeline": "return pixCopy(NULL, pix);  /* no-op */"
    },
    {
        "line": 27,
        "fullcodeline": "pixs = pixClone(pix);"
    },
    {
        "line": 32,
        "fullcodeline": "return (PIX *)ERROR_PTR(\"depth not 8 or 32 bpp\", procName, NULL);"
    },
    {
        "line": 38,
        "fullcodeline": "pixr = pixGetRGBComponent(pixs, COLOR_RED);"
    },
    {
        "line": 39,
        "fullcodeline": "pixrc = pixBlockconvGray(pixr, NULL, wc, hc);"
    },
    {
        "line": 40,
        "fullcodeline": "pixDestroy(&pixr);"
    },
    {
        "line": 41,
        "fullcodeline": "pixg = pixGetRGBComponent(pixs, COLOR_GREEN);"
    },
    {
        "line": 42,
        "fullcodeline": "pixgc = pixBlockconvGray(pixg, NULL, wc, hc);"
    },
    {
        "line": 43,
        "fullcodeline": "pixDestroy(&pixg);"
    },
    {
        "line": 44,
        "fullcodeline": "pixb = pixGetRGBComponent(pixs, COLOR_BLUE);"
    },
    {
        "line": 45,
        "fullcodeline": "pixbc = pixBlockconvGray(pixb, NULL, wc, hc);"
    },
    {
        "line": 46,
        "fullcodeline": "pixDestroy(&pixb);"
    },
    {
        "line": 47,
        "fullcodeline": "pixd = pixCreateRGBImage(pixrc, pixgc, pixbc);"
    },
    {
        "line": 48,
        "fullcodeline": "pixDestroy(&pixrc);"
    },
    {
        "line": 49,
        "fullcodeline": "pixDestroy(&pixgc);"
    },
    {
        "line": 50,
        "fullcodeline": "pixDestroy(&pixbc);"
    }
]