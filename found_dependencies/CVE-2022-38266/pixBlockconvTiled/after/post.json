[
    {
        "line": 12,
        "fullcodeline": "PROCNAME(\"pixBlockconvTiled\");"
    },
    {
        "line": 20,
        "fullcodeline": "pixGetDimensions(pix, &w, &h, &d);"
    },
    {
        "line": 30,
        "fullcodeline": "xrat = w / nx;"
    },
    {
        "line": 31,
        "fullcodeline": "yrat = h / ny;"
    },
    {
        "line": 66,
        "fullcodeline": "pt = pixTilingCreate(pixs, nx, ny, 0, 0, wc + 2, hc + 2);"
    },
    {
        "line": 96,
        "fullcodeline": "pixDestroy(&pixs);"
    },
    {
        "line": 97,
        "fullcodeline": "pixTilingDestroy(&pt);"
    },
    {
        "line": 14,
        "fullcodeline": "if (!pix)"
    },
    {
        "line": 16,
        "fullcodeline": "if (wc <= 0 || hc <= 0)   /* no-op */"
    },
    {
        "line": 18,
        "fullcodeline": "if (nx <= 1 && ny <= 1)"
    },
    {
        "line": 21,
        "fullcodeline": "if (w < 2 * wc + 3 || h < 2 * hc + 3) {"
    },
    {
        "line": 32,
        "fullcodeline": "if (xrat < wc + 2) {"
    },
    {
        "line": 36,
        "fullcodeline": "if (yrat < hc + 2) {"
    },
    {
        "line": 42,
        "fullcodeline": "if ((d == 2 || d == 4 || d == 8) && pixGetColormap(pix)) {"
    },
    {
        "line": 50,
        "fullcodeline": "if (d != 8 && d != 32) {"
    },
    {
        "line": 62,
        "fullcodeline": "if ((pixd = pixCreateTemplate(pixs)) == NULL) {"
    },
    {
        "line": 67,
        "fullcodeline": "for (i = 0; i < ny; i++) {"
    },
    {
        "line": 22,
        "fullcodeline": "L_ERROR(\"kernel is too large: w = %d, wc = %d, h = %d, hc = %d\\n\","
    },
    {
        "line": 33,
        "fullcodeline": "nx = w / (wc + 2);"
    },
    {
        "line": 34,
        "fullcodeline": "L_WARNING(\"tile width too small; nx reduced to %d\\n\", procName, nx);"
    },
    {
        "line": 37,
        "fullcodeline": "ny = h / (hc + 2);"
    },
    {
        "line": 38,
        "fullcodeline": "L_WARNING(\"tile height too small; ny reduced to %d\\n\", procName, ny);"
    },
    {
        "line": 43,
        "fullcodeline": "L_WARNING(\"pix has colormap; removing\\n\", procName);"
    },
    {
        "line": 44,
        "fullcodeline": "pixs = pixRemoveColormap(pix, REMOVE_CMAP_BASED_ON_SRC);"
    },
    {
        "line": 45,
        "fullcodeline": "d = pixGetDepth(pixs);"
    },
    {
        "line": 51,
        "fullcodeline": "pixDestroy(&pixs);"
    },
    {
        "line": 63,
        "fullcodeline": "pixDestroy(&pixs);"
    },
    {
        "line": 15,
        "fullcodeline": "return (PIX *)ERROR_PTR(\"pix not defined\", procName, NULL);"
    },
    {
        "line": 17,
        "fullcodeline": "return pixCopy(NULL, pix);"
    },
    {
        "line": 19,
        "fullcodeline": "return pixBlockconv(pix, wc, hc);"
    },
    {
        "line": 24,
        "fullcodeline": "return pixCopy(NULL, pix);"
    },
    {
        "line": 47,
        "fullcodeline": "pixs = pixClone(pix);"
    },
    {
        "line": 52,
        "fullcodeline": "return (PIX *)ERROR_PTR(\"depth not 8 or 32 bpp\", procName, NULL);"
    },
    {
        "line": 64,
        "fullcodeline": "return (PIX *)ERROR_PTR(\"pixd not made\", procName, NULL);"
    },
    {
        "line": 68,
        "fullcodeline": "for (j = 0; j < nx; j++) {"
    },
    {
        "line": 69,
        "fullcodeline": "pixt = pixTilingGetTile(pt, i, j);"
    },
    {
        "line": 90,
        "fullcodeline": "pixTilingPaintTile(pixd, i, j, pixc, pt);"
    },
    {
        "line": 91,
        "fullcodeline": "pixDestroy(&pixt);"
    },
    {
        "line": 92,
        "fullcodeline": "pixDestroy(&pixc);"
    },
    {
        "line": 72,
        "fullcodeline": "if (d == 8) {"
    },
    {
        "line": 73,
        "fullcodeline": "pixc = pixBlockconvGrayTile(pixt, NULL, wc, hc);"
    },
    {
        "line": 75,
        "fullcodeline": "pixr = pixGetRGBComponent(pixt, COLOR_RED);"
    },
    {
        "line": 76,
        "fullcodeline": "pixrc = pixBlockconvGrayTile(pixr, NULL, wc, hc);"
    },
    {
        "line": 77,
        "fullcodeline": "pixDestroy(&pixr);"
    },
    {
        "line": 78,
        "fullcodeline": "pixg = pixGetRGBComponent(pixt, COLOR_GREEN);"
    },
    {
        "line": 79,
        "fullcodeline": "pixgc = pixBlockconvGrayTile(pixg, NULL, wc, hc);"
    },
    {
        "line": 80,
        "fullcodeline": "pixDestroy(&pixg);"
    },
    {
        "line": 81,
        "fullcodeline": "pixb = pixGetRGBComponent(pixt, COLOR_BLUE);"
    },
    {
        "line": 82,
        "fullcodeline": "pixbc = pixBlockconvGrayTile(pixb, NULL, wc, hc);"
    },
    {
        "line": 83,
        "fullcodeline": "pixDestroy(&pixb);"
    },
    {
        "line": 84,
        "fullcodeline": "pixc = pixCreateRGBImage(pixrc, pixgc, pixbc);"
    },
    {
        "line": 85,
        "fullcodeline": "pixDestroy(&pixrc);"
    },
    {
        "line": 86,
        "fullcodeline": "pixDestroy(&pixgc);"
    },
    {
        "line": 87,
        "fullcodeline": "pixDestroy(&pixbc);"
    }
]