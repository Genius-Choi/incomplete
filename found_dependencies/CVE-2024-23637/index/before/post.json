[
    {
        "line": 6,
        "fullcodeline": "preemptive_cache_enabled = settings().getBoolean([\"devel\", \"cache\", \"preemptive\"])"
    },
    {
        "line": 8,
        "fullcodeline": "locale = _locale_str(g.locale)"
    },
    {
        "line": 11,
        "fullcodeline": "def wizard_active(templates):"
    },
    {
        "line": 15,
        "fullcodeline": "client_refresh = util.flask.cache_check_headers()"
    },
    {
        "line": 16,
        "fullcodeline": "request_refresh = \"_refresh\" in request.values"
    },
    {
        "line": 17,
        "fullcodeline": "printing = printer.is_printing()"
    },
    {
        "line": 24,
        "fullcodeline": "client_refresh = client_refresh and not printing"
    },
    {
        "line": 25,
        "fullcodeline": "force_refresh = ("
    },
    {
        "line": 30,
        "fullcodeline": "fetch_template_data(refresh=force_refresh)"
    },
    {
        "line": 32,
        "fullcodeline": "now = datetime.datetime.utcnow()"
    },
    {
        "line": 34,
        "fullcodeline": "enable_timelapse = settings().getBoolean([\"webcam\", \"timelapseEnabled\"])"
    },
    {
        "line": 35,
        "fullcodeline": "enable_loading_animation = settings().getBoolean([\"devel\", \"showLoadingAnimation\"])"
    },
    {
        "line": 36,
        "fullcodeline": "enable_sd_support = settings().get([\"feature\", \"sdSupport\"])"
    },
    {
        "line": 37,
        "fullcodeline": "enable_webcam = settings().getBoolean([\"webcam\", \"webcamEnabled\"])"
    },
    {
        "line": 38,
        "fullcodeline": "enable_temperature_graph = settings().get([\"feature\", \"temperatureGraph\"])"
    },
    {
        "line": 39,
        "fullcodeline": "sockjs_connect_timeout = settings().getInt([\"devel\", \"sockJsConnectTimeout\"])"
    },
    {
        "line": 41,
        "fullcodeline": "def default_template_filter(template_type, template_key):"
    },
    {
        "line": 47,
        "fullcodeline": "default_additional_etag = ["
    },
    {
        "line": 61,
        "fullcodeline": "def get_preemptively_cached_view("
    },
    {
        "line": 81,
        "fullcodeline": "def get_cached_view("
    },
    {
        "line": 215,
        "fullcodeline": "def plugin_view(p):"
    },
    {
        "line": 250,
        "fullcodeline": "def default_view():"
    },
    {
        "line": 290,
        "fullcodeline": "default_permissions = [Permissions.STATUS, Permissions.SETTINGS_READ]"
    },
    {
        "line": 292,
        "fullcodeline": "response = None"
    },
    {
        "line": 294,
        "fullcodeline": "forced_view = request.headers.get(\"X-Force-View\", None)"
    },
    {
        "line": 2,
        "fullcodeline": "from octoprint.server import connectivityChecker, printer"
    },
    {
        "line": 18,
        "fullcodeline": "if client_refresh and printing:"
    },
    {
        "line": 26,
        "fullcodeline": "client_refresh or request_refresh or wizard_active(_templates.get(locale))"
    },
    {
        "line": 360,
        "fullcodeline": "if response is None:"
    },
    {
        "line": 363,
        "fullcodeline": "return add_csrf_cookie(response)"
    },
    {
        "line": 56,
        "fullcodeline": "] + sorted("
    },
    {
        "line": 298,
        "fullcodeline": "_logger.debug(f\"Forcing rendering of view {forced_view}\")"
    },
    {
        "line": 323,
        "fullcodeline": "ui_plugins = pluginManager.get_implementations("
    },
    {
        "line": 19,
        "fullcodeline": "logging.getLogger(__name__).warning("
    },
    {
        "line": 55,
        "fullcodeline": "wizard_active(_templates.get(locale)),"
    },
    {
        "line": 299,
        "fullcodeline": "if forced_view != \"_default\":"
    },
    {
        "line": 326,
        "fullcodeline": "for plugin in ui_plugins:"
    },
    {
        "line": 361,
        "fullcodeline": "return abort(404)"
    },
    {
        "line": 20,
        "fullcodeline": "\"Client requested cache refresh via cache-control headers but we are printing. \""
    },
    {
        "line": 57,
        "fullcodeline": "\"{}:{}\".format(to_unicode(k, errors=\"replace\"), to_unicode(v, errors=\"replace\"))"
    },
    {
        "line": 300,
        "fullcodeline": "plugin = pluginManager.get_plugin_info(forced_view, require_enabled=True)"
    },
    {
        "line": 315,
        "fullcodeline": "response = require_login_with(permissions=default_permissions)"
    },
    {
        "line": 301,
        "fullcodeline": "if plugin is not None and isinstance("
    },
    {
        "line": 316,
        "fullcodeline": "if not response:"
    },
    {
        "line": 354,
        "fullcodeline": "response = require_login_with(permissions=default_permissions)"
    },
    {
        "line": 304,
        "fullcodeline": "permissions = plugin.implementation.get_ui_permissions()"
    },
    {
        "line": 305,
        "fullcodeline": "response = require_login_with(permissions=permissions)"
    },
    {
        "line": 317,
        "fullcodeline": "response = default_view()"
    },
    {
        "line": 355,
        "fullcodeline": "if not response:"
    },
    {
        "line": 306,
        "fullcodeline": "if not response:"
    },
    {
        "line": 318,
        "fullcodeline": "if _logger.isEnabledFor(logging.DEBUG) and isinstance(response, Response):"
    },
    {
        "line": 356,
        "fullcodeline": "response = default_view()"
    },
    {
        "line": 58,
        "fullcodeline": "for k, v in _plugin_vars.items()"
    },
    {
        "line": 307,
        "fullcodeline": "response = plugin_view(plugin.implementation)"
    },
    {
        "line": 319,
        "fullcodeline": "response.headers[\"X-Ui-Plugin\"] = \"_default\""
    },
    {
        "line": 328,
        "fullcodeline": "if plugin.will_handle_ui(request):"
    },
    {
        "line": 357,
        "fullcodeline": "if _logger.isEnabledFor(logging.DEBUG) and isinstance(response, Response):"
    },
    {
        "line": 308,
        "fullcodeline": "if _logger.isEnabledFor(logging.DEBUG) and isinstance("
    },
    {
        "line": 330,
        "fullcodeline": "permissions = plugin.get_ui_permissions()"
    },
    {
        "line": 331,
        "fullcodeline": "response = require_login_with(permissions=permissions)"
    },
    {
        "line": 347,
        "fullcodeline": "_logger.exception("
    },
    {
        "line": 358,
        "fullcodeline": "response.headers[\"X-Ui-Plugin\"] = \"_default\""
    },
    {
        "line": 332,
        "fullcodeline": "if not response:"
    },
    {
        "line": 333,
        "fullcodeline": "response = plugin_view(plugin)"
    },
    {
        "line": 348,
        "fullcodeline": "\"Error while calling plugin {}, skipping it\".format("
    },
    {
        "line": 351,
        "fullcodeline": "extra={\"plugin\": plugin._identifier},"
    },
    {
        "line": 334,
        "fullcodeline": "if response is not None:"
    },
    {
        "line": 341,
        "fullcodeline": "_logger.warning("
    },
    {
        "line": 335,
        "fullcodeline": "if _logger.isEnabledFor(logging.DEBUG) and isinstance("
    },
    {
        "line": 338,
        "fullcodeline": "response.headers[\"X-Ui-Plugin\"] = plugin._identifier"
    },
    {
        "line": 342,
        "fullcodeline": "\"UiPlugin {} returned an empty response\".format("
    }
]