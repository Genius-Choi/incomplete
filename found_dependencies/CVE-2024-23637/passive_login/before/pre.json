[
    {
        "line": 2,
        "fullcodeline": "logger = logging.getLogger(__name__)"
    },
    {
        "line": 4,
        "fullcodeline": "user = flask_login.current_user"
    },
    {
        "line": 6,
        "fullcodeline": "remote_address = get_remote_address(flask.request)"
    },
    {
        "line": 7,
        "fullcodeline": "ip_check_enabled = settings().getBoolean([\"server\", \"ipCheck\", \"enabled\"])"
    },
    {
        "line": 8,
        "fullcodeline": "ip_check_trusted = settings().get([\"server\", \"ipCheck\", \"trustedSubnets\"])"
    },
    {
        "line": 14,
        "fullcodeline": "def login(u):"
    },
    {
        "line": 43,
        "fullcodeline": "def determine_user(u):"
    },
    {
        "line": 86,
        "fullcodeline": "user = login(determine_user(user))"
    },
    {
        "line": 87,
        "fullcodeline": "response = user.as_dict()"
    },
    {
        "line": 88,
        "fullcodeline": "response[\"_is_external_client\"] = ip_check_enabled and not is_lan_address("
    },
    {
        "line": 10,
        "fullcodeline": "if isinstance(user, LocalProxy):"
    },
    {
        "line": 91,
        "fullcodeline": "if flask.session.get(\"login_mechanism\") is not None:"
    },
    {
        "line": 93,
        "fullcodeline": "return flask.jsonify(response)"
    },
    {
        "line": 12,
        "fullcodeline": "user = user._get_current_object()"
    },
    {
        "line": 92,
        "fullcodeline": "response[\"_login_mechanism\"] = flask.session.get(\"login_mechanism\")"
    }
]