[
    {
        "line": 4,
        "fullcodeline": "app = dockerspawner_configured_app"
    },
    {
        "line": 5,
        "fullcodeline": "name = user.name"
    },
    {
        "line": 6,
        "fullcodeline": "assert isinstance(user.spawner, DockerSpawner)"
    },
    {
        "line": 7,
        "fullcodeline": "default_image = user.spawner.image  # default value"
    },
    {
        "line": 10,
        "fullcodeline": "user.spawner.remove_containers = True"
    },
    {
        "line": 19,
        "fullcodeline": "r = await api_request("
    },
    {
        "line": 53,
        "fullcodeline": "r = await api_request("
    },
    {
        "line": 8,
        "fullcodeline": "if image == \"DEFAULT\":"
    },
    {
        "line": 11,
        "fullcodeline": "if allowed_images is not None:"
    },
    {
        "line": 28,
        "fullcodeline": "if not ok:"
    },
    {
        "line": 34,
        "fullcodeline": "pending = r.status_code == 202"
    },
    {
        "line": 42,
        "fullcodeline": "if image is None:"
    },
    {
        "line": 49,
        "fullcodeline": "assert user.spawner.image == expected_image"
    },
    {
        "line": 51,
        "fullcodeline": "assert obj[\"Config\"][\"Image\"] == expected_image"
    },
    {
        "line": 9,
        "fullcodeline": "image = default_image"
    },
    {
        "line": 12,
        "fullcodeline": "user.spawner.allowed_images = allowed_images"
    },
    {
        "line": 15,
        "fullcodeline": "request_body = json.dumps({\"image\": image})"
    },
    {
        "line": 17,
        "fullcodeline": "request_body = b\"\""
    },
    {
        "line": 29,
        "fullcodeline": "assert r.status_code == 400"
    },
    {
        "line": 32,
        "fullcodeline": "r.raise_for_status()"
    },
    {
        "line": 38,
        "fullcodeline": "r = await api_request(app, \"users\", name)"
    },
    {
        "line": 43,
        "fullcodeline": "expected_image = default_image"
    },
    {
        "line": 50,
        "fullcodeline": "obj = await user.spawner.get_object()"
    },
    {
        "line": 39,
        "fullcodeline": "user_info = r.json()"
    },
    {
        "line": 44,
        "fullcodeline": "elif isinstance(allowed_images, (list, dict)):"
    },
    {
        "line": 45,
        "fullcodeline": "expected_image = user.spawner._get_allowed_images()[image]"
    },
    {
        "line": 47,
        "fullcodeline": "expected_image = image"
    }
]