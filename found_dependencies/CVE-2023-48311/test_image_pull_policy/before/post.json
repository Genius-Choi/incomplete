[
    {
        "line": 2,
        "fullcodeline": "app = dockerspawner_configured_app"
    },
    {
        "line": 3,
        "fullcodeline": "name = \"gumby\""
    },
    {
        "line": 4,
        "fullcodeline": "add_user(app.db, app, name=name)"
    },
    {
        "line": 6,
        "fullcodeline": "assert isinstance(user.spawner, DockerSpawner)"
    },
    {
        "line": 8,
        "fullcodeline": "spawner.image = \"jupyterhub/doesntexist:nosuchtag\""
    },
    {
        "line": 13,
        "fullcodeline": "repo = \"busybox\""
    },
    {
        "line": 14,
        "fullcodeline": "tag = \"1.29.1\"  # a version that's definitely not latest"
    },
    {
        "line": 21,
        "fullcodeline": "spawner.pull_policy = \"ifnotpresent\""
    },
    {
        "line": 22,
        "fullcodeline": "image = f\"{repo}:{tag}\""
    },
    {
        "line": 24,
        "fullcodeline": "await spawner.pull_image(image)"
    },
    {
        "line": 26,
        "fullcodeline": "old_image_info = await asyncio.wrap_future(spawner.docker(\"inspect_image\", image))"
    },
    {
        "line": 27,
        "fullcodeline": "print(old_image_info)"
    },
    {
        "line": 31,
        "fullcodeline": "await asyncio.wrap_future(spawner.docker(\"tag\", image, repo))"
    },
    {
        "line": 33,
        "fullcodeline": "image = repo  # implicit :latest"
    },
    {
        "line": 34,
        "fullcodeline": "spawner.pull_policy = \"ifnotpresent\""
    },
    {
        "line": 36,
        "fullcodeline": "await spawner.pull_image(image)"
    },
    {
        "line": 37,
        "fullcodeline": "image_info = await asyncio.wrap_future(spawner.docker(\"inspect_image\", repo))"
    },
    {
        "line": 38,
        "fullcodeline": "assert image_info[\"Id\"] == old_image_info[\"Id\"]"
    },
    {
        "line": 42,
        "fullcodeline": "spawner.pull_policy = \"always\""
    },
    {
        "line": 43,
        "fullcodeline": "await spawner.pull_image(image)"
    },
    {
        "line": 44,
        "fullcodeline": "image_info = await asyncio.wrap_future(spawner.docker(\"inspect_image\", repo))"
    },
    {
        "line": 45,
        "fullcodeline": "assert image_info[\"Id\"] != old_image_info[\"Id\"]"
    },
    {
        "line": 48,
        "fullcodeline": "spawner.pull_policy = \"never\""
    },
    {
        "line": 49,
        "fullcodeline": "await spawner.pull_image(image)"
    },
    {
        "line": 9,
        "fullcodeline": "with pytest.raises(docker.errors.NotFound):"
    },
    {
        "line": 17,
        "fullcodeline": "await asyncio.wrap_future(spawner.docker(\"remove_image\", f\"{repo}:{tag}\"))"
    },
    {
        "line": 10,
        "fullcodeline": "spawner.image_pull_policy = \"never\""
    },
    {
        "line": 11,
        "fullcodeline": "await spawner.pull_image(spawner.image)"
    },
    {
        "line": 19,
        "fullcodeline": "pass"
    }
]