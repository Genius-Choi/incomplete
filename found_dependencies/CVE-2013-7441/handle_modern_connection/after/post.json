[
    {
        "line": 5,
        "fullcodeline": "CLIENT *client = NULL;"
    },
    {
        "line": 9,
        "fullcodeline": "net = socket_accept(sock);"
    },
    {
        "line": 26,
        "fullcodeline": "client = negotiate(net, NULL, servers, NEG_INIT | NEG_MODERN);"
    },
    {
        "line": 39,
        "fullcodeline": "sock_flags_old = fcntl(net, F_GETFL, 0);"
    },
    {
        "line": 45,
        "fullcodeline": "sock_flags_new = sock_flags_old & ~O_NONBLOCK;"
    },
    {
        "line": 94,
        "fullcodeline": "msg(LOG_INFO, \"Starting to serve\");"
    },
    {
        "line": 95,
        "fullcodeline": "serveconnection(client);"
    },
    {
        "line": 96,
        "fullcodeline": "exit(EXIT_SUCCESS);"
    },
    {
        "line": 99,
        "fullcodeline": "g_free(client);"
    },
    {
        "line": 100,
        "fullcodeline": "close(net);"
    },
    {
        "line": 10,
        "fullcodeline": "if (net < 0)"
    },
    {
        "line": 13,
        "fullcodeline": "if (!dontfork) {"
    },
    {
        "line": 27,
        "fullcodeline": "if (!client) {"
    },
    {
        "line": 32,
        "fullcodeline": "if (client->server->max_connections > 0 &&"
    },
    {
        "line": 40,
        "fullcodeline": "if (sock_flags_old == -1) {"
    },
    {
        "line": 46,
        "fullcodeline": "if (sock_flags_new != sock_flags_old &&"
    },
    {
        "line": 52,
        "fullcodeline": "if (set_peername(net, client)) {"
    },
    {
        "line": 57,
        "fullcodeline": "if (!authorized_client(client)) {"
    },
    {
        "line": 63,
        "fullcodeline": "if (!dontfork) {"
    },
    {
        "line": 102,
        "fullcodeline": "if (!dontfork) {"
    },
    {
        "line": 14,
        "fullcodeline": "pid = spawn_child();"
    },
    {
        "line": 28,
        "fullcodeline": "msg(LOG_ERR, \"Modern initial negotiation failed\");"
    },
    {
        "line": 33,
        "fullcodeline": "g_hash_table_size(children) >= client->server->max_connections) {"
    },
    {
        "line": 34,
        "fullcodeline": "msg(LOG_ERR, \"Max connections (%d) reached\","
    },
    {
        "line": 41,
        "fullcodeline": "msg(LOG_ERR, \"Failed to get socket flags\");"
    },
    {
        "line": 47,
        "fullcodeline": "fcntl(net, F_SETFL, sock_flags_new) == -1) {"
    },
    {
        "line": 48,
        "fullcodeline": "msg(LOG_ERR, \"Failed to set socket to blocking mode\");"
    },
    {
        "line": 53,
        "fullcodeline": "msg(LOG_ERR, \"Failed to set peername\");"
    },
    {
        "line": 58,
        "fullcodeline": "msg(LOG_INFO, \"Client '%s' is not authorized to access\","
    },
    {
        "line": 69,
        "fullcodeline": "g_hash_table_destroy(children);"
    },
    {
        "line": 70,
        "fullcodeline": "children = NULL;"
    },
    {
        "line": 74,
        "fullcodeline": "g_array_free(modernsocks, TRUE);"
    },
    {
        "line": 91,
        "fullcodeline": "g_array_free(servers, FALSE);"
    },
    {
        "line": 103,
        "fullcodeline": "exit(EXIT_FAILURE);"
    },
    {
        "line": 71,
        "fullcodeline": "for (i = 0; i < modernsocks->len; i++) {"
    },
    {
        "line": 80,
        "fullcodeline": "for (i = 0; i < servers->len; i++) {"
    },
    {
        "line": 20,
        "fullcodeline": "close(net);"
    },
    {
        "line": 81,
        "fullcodeline": "const SERVER *const server = &g_array_index(servers, SERVER, i);"
    },
    {
        "line": 82,
        "fullcodeline": "close(server->socket);"
    },
    {
        "line": 16,
        "fullcodeline": "if (pid > 0)"
    },
    {
        "line": 18,
        "fullcodeline": "if (pid < 0)"
    },
    {
        "line": 17,
        "fullcodeline": "msg(LOG_INFO, \"Spawned a child process\");"
    },
    {
        "line": 19,
        "fullcodeline": "msg(LOG_ERR, \"Failed to spawn a child process\");"
    }
]