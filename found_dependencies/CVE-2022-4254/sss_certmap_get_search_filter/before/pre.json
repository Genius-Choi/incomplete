[
    {
        "line": 8,
        "fullcodeline": "struct sss_cert_content *cert_content = NULL;"
    },
    {
        "line": 9,
        "fullcodeline": "char *filter = NULL;"
    },
    {
        "line": 10,
        "fullcodeline": "char **domains = NULL;"
    },
    {
        "line": 17,
        "fullcodeline": "ret = sss_cert_get_content(ctx, der_cert, der_size, &cert_content);"
    },
    {
        "line": 68,
        "fullcodeline": "ret = ENOENT;"
    },
    {
        "line": 13,
        "fullcodeline": "if (_filter == NULL || _domains == NULL) {"
    },
    {
        "line": 18,
        "fullcodeline": "if (ret != 0) {"
    },
    {
        "line": 23,
        "fullcodeline": "if (ctx->prio_list == NULL) {"
    },
    {
        "line": 33,
        "fullcodeline": "for (p = ctx->prio_list; p != NULL; p = p->next) {"
    },
    {
        "line": 72,
        "fullcodeline": "if (ret == 0) {"
    },
    {
        "line": 19,
        "fullcodeline": "CM_DEBUG(ctx, \"Failed to get certificate content [%d].\", ret);"
    },
    {
        "line": 29,
        "fullcodeline": "ret = get_filter(ctx, ctx->default_mapping_rule, cert_content, &filter);"
    },
    {
        "line": 24,
        "fullcodeline": "if (ctx->default_mapping_rule == NULL) {"
    },
    {
        "line": 34,
        "fullcodeline": "for (r = p->rule_list; r != NULL; r = r->next) {"
    },
    {
        "line": 35,
        "fullcodeline": "ret = do_match(ctx, r->parsed_match_rule, cert_content);"
    },
    {
        "line": 38,
        "fullcodeline": "ret = get_filter(ctx, r->parsed_mapping_rule, cert_content,"
    },
    {
        "line": 62,
        "fullcodeline": "ret = 0;"
    },
    {
        "line": 40,
        "fullcodeline": "if (ret != 0) {"
    },
    {
        "line": 45,
        "fullcodeline": "if (r->domains != NULL) {"
    },
    {
        "line": 46,
        "fullcodeline": "for (c = 0; r->domains[c] != NULL; c++);"
    },
    {
        "line": 48,
        "fullcodeline": "if (domains == NULL) {"
    },
    {
        "line": 53,
        "fullcodeline": "for (c = 0; r->domains[c] != NULL; c++) {"
    },
    {
        "line": 49,
        "fullcodeline": "ret = ENOMEM;"
    },
    {
        "line": 54,
        "fullcodeline": "domains[c] = talloc_strdup(domains, r->domains[c]);"
    },
    {
        "line": 55,
        "fullcodeline": "if (domains[c] == NULL) {"
    },
    {
        "line": 56,
        "fullcodeline": "ret = ENOMEM;"
    }
]