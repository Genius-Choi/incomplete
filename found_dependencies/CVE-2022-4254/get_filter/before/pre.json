[
    {
        "line": 7,
        "fullcodeline": "char *result = NULL;"
    },
    {
        "line": 8,
        "fullcodeline": "char *expanded = NULL;"
    },
    {
        "line": 11,
        "fullcodeline": "result = talloc_strdup(ctx, \"\");"
    },
    {
        "line": 41,
        "fullcodeline": "ret = 0;"
    },
    {
        "line": 12,
        "fullcodeline": "if (result == NULL) {"
    },
    {
        "line": 16,
        "fullcodeline": "for (comp = parsed_mapping_rule->list; comp != NULL; comp = comp->next) {"
    },
    {
        "line": 44,
        "fullcodeline": "if (ret == 0) {"
    },
    {
        "line": 17,
        "fullcodeline": "if (comp->type == comp_string) {"
    },
    {
        "line": 18,
        "fullcodeline": "result = talloc_strdup_append(result, comp->val);"
    },
    {
        "line": 19,
        "fullcodeline": "} else if (comp->type == comp_template) {"
    },
    {
        "line": 20,
        "fullcodeline": "ret = expand_template(ctx, comp->parsed_template, cert_content,"
    },
    {
        "line": 27,
        "fullcodeline": "result = talloc_strdup_append(result, expanded);"
    },
    {
        "line": 29,
        "fullcodeline": "expanded = NULL;"
    },
    {
        "line": 22,
        "fullcodeline": "if (ret != 0) {"
    },
    {
        "line": 30,
        "fullcodeline": "if (result == NULL) {"
    },
    {
        "line": 35,
        "fullcodeline": "ret = EINVAL;"
    },
    {
        "line": 31,
        "fullcodeline": "ret = ENOMEM;"
    }
]