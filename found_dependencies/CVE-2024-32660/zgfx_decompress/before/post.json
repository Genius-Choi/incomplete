[
    {
        "line": 4,
        "fullcodeline": "int status = -1;"
    },
    {
        "line": 5,
        "fullcodeline": "BYTE descriptor = 0;"
    },
    {
        "line": 6,
        "fullcodeline": "wStream sbuffer = { 0 };"
    },
    {
        "line": 7,
        "fullcodeline": "wStream* stream = Stream_StaticConstInit(&sbuffer, pSrcData, SrcSize);"
    },
    {
        "line": 9,
        "fullcodeline": "WINPR_ASSERT(zgfx);"
    },
    {
        "line": 10,
        "fullcodeline": "WINPR_ASSERT(stream);"
    },
    {
        "line": 15,
        "fullcodeline": "Stream_Read_UINT8(stream, descriptor); /* descriptor (1 byte) */"
    },
    {
        "line": 85,
        "fullcodeline": "status = 1;"
    },
    {
        "line": 12,
        "fullcodeline": "if (!Stream_CheckAndLogRequiredLength(TAG, stream, 1))"
    },
    {
        "line": 17,
        "fullcodeline": "if (descriptor == ZGFX_SEGMENTED_SINGLE)"
    },
    {
        "line": 22,
        "fullcodeline": "*ppDstData = NULL;"
    },
    {
        "line": 30,
        "fullcodeline": "*pDstSize = zgfx->OutputCount;"
    },
    {
        "line": 31,
        "fullcodeline": "CopyMemory(*ppDstData, zgfx->OutputBuffer, zgfx->OutputCount);"
    },
    {
        "line": 19,
        "fullcodeline": "if (!zgfx_decompress_segment(zgfx, stream, Stream_GetRemainingLength(stream)))"
    },
    {
        "line": 24,
        "fullcodeline": "if (zgfx->OutputCount > 0)"
    },
    {
        "line": 27,
        "fullcodeline": "if (!*ppDstData)"
    },
    {
        "line": 25,
        "fullcodeline": "*ppDstData = aligned_zgfx_malloc(zgfx->OutputCount);"
    },
    {
        "line": 33,
        "fullcodeline": "else if (descriptor == ZGFX_SEGMENTED_MULTIPART)"
    },
    {
        "line": 35,
        "fullcodeline": "UINT32 segmentSize = 0;"
    },
    {
        "line": 36,
        "fullcodeline": "UINT16 segmentNumber = 0;"
    },
    {
        "line": 37,
        "fullcodeline": "UINT16 segmentCount = 0;"
    },
    {
        "line": 38,
        "fullcodeline": "UINT32 uncompressedSize = 0;"
    },
    {
        "line": 39,
        "fullcodeline": "BYTE* pConcatenated = NULL;"
    },
    {
        "line": 40,
        "fullcodeline": "size_t used = 0;"
    },
    {
        "line": 45,
        "fullcodeline": "Stream_Read_UINT16(stream, segmentCount);     /* segmentCount (2 bytes) */"
    },
    {
        "line": 46,
        "fullcodeline": "Stream_Read_UINT32(stream, uncompressedSize); /* uncompressedSize (4 bytes) */"
    },
    {
        "line": 51,
        "fullcodeline": "pConcatenated = aligned_zgfx_malloc(uncompressedSize);"
    },
    {
        "line": 56,
        "fullcodeline": "*ppDstData = pConcatenated;"
    },
    {
        "line": 57,
        "fullcodeline": "*pDstSize = uncompressedSize;"
    },
    {
        "line": 42,
        "fullcodeline": "if (!Stream_CheckAndLogRequiredLength(TAG, stream, 6))"
    },
    {
        "line": 48,
        "fullcodeline": "if (!Stream_CheckAndLogRequiredLengthOfSize(TAG, stream, segmentCount, sizeof(UINT32)))"
    },
    {
        "line": 53,
        "fullcodeline": "if (!pConcatenated)"
    },
    {
        "line": 59,
        "fullcodeline": "for (segmentNumber = 0; segmentNumber < segmentCount; segmentNumber++)"
    },
    {
        "line": 64,
        "fullcodeline": "Stream_Read_UINT32(stream, segmentSize); /* segmentSize (4 bytes) */"
    },
    {
        "line": 75,
        "fullcodeline": "CopyMemory(pConcatenated, zgfx->OutputBuffer, zgfx->OutputCount);"
    },
    {
        "line": 76,
        "fullcodeline": "pConcatenated += zgfx->OutputCount;"
    },
    {
        "line": 77,
        "fullcodeline": "used += zgfx->OutputCount;"
    },
    {
        "line": 61,
        "fullcodeline": "if (!Stream_CheckAndLogRequiredLength(TAG, stream, sizeof(UINT32)))"
    },
    {
        "line": 66,
        "fullcodeline": "if (!zgfx_decompress_segment(zgfx, stream, segmentSize))"
    },
    {
        "line": 69,
        "fullcodeline": "if (zgfx->OutputCount > UINT32_MAX - used)"
    },
    {
        "line": 72,
        "fullcodeline": "if (used + zgfx->OutputCount > uncompressedSize)"
    }
]