[
    {
        "line": 4,
        "fullcodeline": "int status = -1;"
    },
    {
        "line": 5,
        "fullcodeline": "BYTE descriptor = 0;"
    },
    {
        "line": 6,
        "fullcodeline": "wStream sbuffer = { 0 };"
    },
    {
        "line": 7,
        "fullcodeline": "size_t used = 0;"
    },
    {
        "line": 8,
        "fullcodeline": "BYTE* pConcatenated = NULL;"
    },
    {
        "line": 9,
        "fullcodeline": "wStream* stream = Stream_StaticConstInit(&sbuffer, pSrcData, SrcSize);"
    },
    {
        "line": 11,
        "fullcodeline": "WINPR_ASSERT(zgfx);"
    },
    {
        "line": 12,
        "fullcodeline": "WINPR_ASSERT(stream);"
    },
    {
        "line": 13,
        "fullcodeline": "WINPR_ASSERT(ppDstData);"
    },
    {
        "line": 14,
        "fullcodeline": "WINPR_ASSERT(pDstSize);"
    },
    {
        "line": 16,
        "fullcodeline": "*ppDstData = NULL;"
    },
    {
        "line": 17,
        "fullcodeline": "*pDstSize = 0;"
    },
    {
        "line": 22,
        "fullcodeline": "Stream_Read_UINT8(stream, descriptor); /* descriptor (1 byte) */"
    },
    {
        "line": 77,
        "fullcodeline": "status = 1;"
    },
    {
        "line": 19,
        "fullcodeline": "if (!Stream_CheckAndLogRequiredLength(TAG, stream, 1))"
    },
    {
        "line": 24,
        "fullcodeline": "if (descriptor == ZGFX_SEGMENTED_SINGLE)"
    },
    {
        "line": 79,
        "fullcodeline": "if (status < 0)"
    },
    {
        "line": 80,
        "fullcodeline": "free(pConcatenated);"
    },
    {
        "line": 26,
        "fullcodeline": "if (!zgfx_decompress_segment(zgfx, stream, Stream_GetRemainingLength(stream)))"
    },
    {
        "line": 29,
        "fullcodeline": "if (zgfx->OutputCount > 0)"
    },
    {
        "line": 35,
        "fullcodeline": "*ppDstData = pConcatenated;"
    },
    {
        "line": 36,
        "fullcodeline": "*pDstSize = zgfx->OutputCount;"
    },
    {
        "line": 39,
        "fullcodeline": "else if (descriptor == ZGFX_SEGMENTED_MULTIPART)"
    },
    {
        "line": 31,
        "fullcodeline": "if (!zgfx_append(zgfx, &pConcatenated, zgfx->OutputCount, &used))"
    },
    {
        "line": 33,
        "fullcodeline": "if (used != zgfx->OutputCount)"
    },
    {
        "line": 41,
        "fullcodeline": "UINT32 segmentSize = 0;"
    },
    {
        "line": 42,
        "fullcodeline": "UINT16 segmentNumber = 0;"
    },
    {
        "line": 43,
        "fullcodeline": "UINT16 segmentCount = 0;"
    },
    {
        "line": 44,
        "fullcodeline": "UINT32 uncompressedSize = 0;"
    },
    {
        "line": 49,
        "fullcodeline": "Stream_Read_UINT16(stream, segmentCount);     /* segmentCount (2 bytes) */"
    },
    {
        "line": 50,
        "fullcodeline": "Stream_Read_UINT32(stream, uncompressedSize); /* uncompressedSize (4 bytes) */"
    },
    {
        "line": 69,
        "fullcodeline": "*ppDstData = pConcatenated;"
    },
    {
        "line": 70,
        "fullcodeline": "*pDstSize = uncompressedSize;"
    },
    {
        "line": 46,
        "fullcodeline": "if (!Stream_CheckAndLogRequiredLength(TAG, stream, 6))"
    },
    {
        "line": 52,
        "fullcodeline": "for (segmentNumber = 0; segmentNumber < segmentCount; segmentNumber++)"
    },
    {
        "line": 66,
        "fullcodeline": "if (used != uncompressedSize)"
    },
    {
        "line": 57,
        "fullcodeline": "Stream_Read_UINT32(stream, segmentSize); /* segmentSize (4 bytes) */"
    },
    {
        "line": 54,
        "fullcodeline": "if (!Stream_CheckAndLogRequiredLength(TAG, stream, sizeof(UINT32)))"
    },
    {
        "line": 59,
        "fullcodeline": "if (!zgfx_decompress_segment(zgfx, stream, segmentSize))"
    },
    {
        "line": 62,
        "fullcodeline": "if (!zgfx_append(zgfx, &pConcatenated, uncompressedSize, &used))"
    }
]