[
    {
        "line": 18,
        "fullcodeline": "daemon(1, 0);"
    },
    {
        "line": 19,
        "fullcodeline": "openlog(\"KVP\", 0, LOG_USER);"
    },
    {
        "line": 20,
        "fullcodeline": "syslog(LOG_INFO, \"KVP starting; pid is:%d\", getpid());"
    },
    {
        "line": 24,
        "fullcodeline": "kvp_get_os_info();"
    },
    {
        "line": 31,
        "fullcodeline": "fd = socket(AF_NETLINK, SOCK_DGRAM, NETLINK_CONNECTOR);"
    },
    {
        "line": 36,
        "fullcodeline": "addr.nl_family = AF_NETLINK;"
    },
    {
        "line": 37,
        "fullcodeline": "addr.nl_pad = 0;"
    },
    {
        "line": 38,
        "fullcodeline": "addr.nl_pid = 0;"
    },
    {
        "line": 39,
        "fullcodeline": "addr.nl_groups = CN_KVP_IDX;"
    },
    {
        "line": 42,
        "fullcodeline": "error = bind(fd, (struct sockaddr *)&addr, sizeof(addr));"
    },
    {
        "line": 49,
        "fullcodeline": "setsockopt(fd, 270, 1, &sock_opt, sizeof(sock_opt));"
    },
    {
        "line": 53,
        "fullcodeline": "message = (struct cn_msg *)kvp_send_buffer;"
    },
    {
        "line": 54,
        "fullcodeline": "message->id.idx = CN_KVP_IDX;"
    },
    {
        "line": 55,
        "fullcodeline": "message->id.val = CN_KVP_VAL;"
    },
    {
        "line": 57,
        "fullcodeline": "hv_msg = (struct hv_kvp_msg *)message->data;"
    },
    {
        "line": 58,
        "fullcodeline": "hv_msg->kvp_hdr.operation = KVP_OP_REGISTER1;"
    },
    {
        "line": 59,
        "fullcodeline": "message->ack = 0;"
    },
    {
        "line": 62,
        "fullcodeline": "len = netlink_send(fd, message);"
    },
    {
        "line": 69,
        "fullcodeline": "pfd.fd = fd;"
    },
    {
        "line": 26,
        "fullcodeline": "if (kvp_file_init()) {"
    },
    {
        "line": 32,
        "fullcodeline": "if (fd < 0) {"
    },
    {
        "line": 43,
        "fullcodeline": "if (error < 0) {"
    },
    {
        "line": 63,
        "fullcodeline": "if (len < 0) {"
    },
    {
        "line": 27,
        "fullcodeline": "syslog(LOG_ERR, \"Failed to initialize the pools\");"
    },
    {
        "line": 28,
        "fullcodeline": "exit(EXIT_FAILURE);"
    },
    {
        "line": 33,
        "fullcodeline": "syslog(LOG_ERR, \"netlink socket creation failed; error:%d\", fd);"
    },
    {
        "line": 34,
        "fullcodeline": "exit(EXIT_FAILURE);"
    },
    {
        "line": 44,
        "fullcodeline": "syslog(LOG_ERR, \"bind failed; error:%d\", error);"
    },
    {
        "line": 45,
        "fullcodeline": "close(fd);"
    },
    {
        "line": 46,
        "fullcodeline": "exit(EXIT_FAILURE);"
    },
    {
        "line": 64,
        "fullcodeline": "syslog(LOG_ERR, \"netlink_send failed; error:%d\", len);"
    },
    {
        "line": 65,
        "fullcodeline": "close(fd);"
    },
    {
        "line": 66,
        "fullcodeline": "exit(EXIT_FAILURE);"
    },
    {
        "line": 72,
        "fullcodeline": "struct sockaddr *addr_p = (struct sockaddr *) &addr;"
    },
    {
        "line": 74,
        "fullcodeline": "pfd.events = POLLIN;"
    },
    {
        "line": 75,
        "fullcodeline": "pfd.revents = 0;"
    },
    {
        "line": 76,
        "fullcodeline": "poll(&pfd, 1, -1);"
    },
    {
        "line": 78,
        "fullcodeline": "len = recvfrom(fd, kvp_recv_buffer, sizeof(kvp_recv_buffer), 0,"
    },
    {
        "line": 94,
        "fullcodeline": "incoming_msg = (struct nlmsghdr *)kvp_recv_buffer;"
    },
    {
        "line": 95,
        "fullcodeline": "incoming_cn_msg = (struct cn_msg *)NLMSG_DATA(incoming_msg);"
    },
    {
        "line": 96,
        "fullcodeline": "hv_msg = (struct hv_kvp_msg *)incoming_cn_msg->data;"
    },
    {
        "line": 105,
        "fullcodeline": "hv_msg->error = HV_S_OK;"
    },
    {
        "line": 217,
        "fullcodeline": "hv_msg = (struct hv_kvp_msg *)incoming_cn_msg->data;"
    },
    {
        "line": 276,
        "fullcodeline": "incoming_cn_msg->id.idx = CN_KVP_IDX;"
    },
    {
        "line": 277,
        "fullcodeline": "incoming_cn_msg->id.val = CN_KVP_VAL;"
    },
    {
        "line": 278,
        "fullcodeline": "incoming_cn_msg->ack = 0;"
    },
    {
        "line": 281,
        "fullcodeline": "len = netlink_send(fd, incoming_cn_msg);"
    },
    {
        "line": 81,
        "fullcodeline": "if (len < 0) {"
    },
    {
        "line": 107,
        "fullcodeline": "if ((in_hand_shake) && (op == KVP_OP_REGISTER1)) {"
    },
    {
        "line": 198,
        "fullcodeline": "if (op != KVP_OP_ENUMERATE)"
    },
    {
        "line": 206,
        "fullcodeline": "if (pool != KVP_POOL_AUTO) {"
    },
    {
        "line": 282,
        "fullcodeline": "if (len < 0) {"
    },
    {
        "line": 82,
        "fullcodeline": "syslog(LOG_ERR, \"recvfrom failed; pid:%u error:%d %s\","
    },
    {
        "line": 84,
        "fullcodeline": "close(fd);"
    },
    {
        "line": 89,
        "fullcodeline": "syslog(LOG_WARNING, \"Received packet from untrusted pid:%u\","
    },
    {
        "line": 112,
        "fullcodeline": "in_hand_shake = 0;"
    },
    {
        "line": 114,
        "fullcodeline": "lic_version = malloc(strlen(p) + 1);"
    },
    {
        "line": 128,
        "fullcodeline": "if_name ="
    },
    {
        "line": 139,
        "fullcodeline": "error = kvp_get_ip_info("
    },
    {
        "line": 147,
        "fullcodeline": "free(if_name);"
    },
    {
        "line": 152,
        "fullcodeline": "if_name = kvp_get_if_name("
    },
    {
        "line": 162,
        "fullcodeline": "error = kvp_set_ip_info(if_name, kvp_ip_val);"
    },
    {
        "line": 166,
        "fullcodeline": "free(if_name);"
    },
    {
        "line": 223,
        "fullcodeline": "kvp_get_domain_name(key_value,"
    },
    {
        "line": 225,
        "fullcodeline": "strcpy(key_name, \"FullyQualifiedDomainName\");"
    },
    {
        "line": 228,
        "fullcodeline": "strcpy(key_name, \"IntegrationServicesVersion\");"
    },
    {
        "line": 229,
        "fullcodeline": "strcpy(key_value, lic_version);"
    },
    {
        "line": 232,
        "fullcodeline": "kvp_get_ip_info(AF_INET, NULL, KVP_OP_ENUMERATE,"
    },
    {
        "line": 234,
        "fullcodeline": "strcpy(key_name, \"NetworkAddressIPv4\");"
    },
    {
        "line": 237,
        "fullcodeline": "kvp_get_ip_info(AF_INET6, NULL, KVP_OP_ENUMERATE,"
    },
    {
        "line": 239,
        "fullcodeline": "strcpy(key_name, \"NetworkAddressIPv6\");"
    },
    {
        "line": 242,
        "fullcodeline": "strcpy(key_value, os_build);"
    },
    {
        "line": 243,
        "fullcodeline": "strcpy(key_name, \"OSBuildNumber\");"
    },
    {
        "line": 246,
        "fullcodeline": "strcpy(key_value, os_name);"
    },
    {
        "line": 247,
        "fullcodeline": "strcpy(key_name, \"OSName\");"
    },
    {
        "line": 250,
        "fullcodeline": "strcpy(key_value, os_major);"
    },
    {
        "line": 251,
        "fullcodeline": "strcpy(key_name, \"OSMajorVersion\");"
    },
    {
        "line": 254,
        "fullcodeline": "strcpy(key_value, os_minor);"
    },
    {
        "line": 255,
        "fullcodeline": "strcpy(key_name, \"OSMinorVersion\");"
    },
    {
        "line": 258,
        "fullcodeline": "strcpy(key_value, os_version);"
    },
    {
        "line": 259,
        "fullcodeline": "strcpy(key_name, \"OSVersion\");"
    },
    {
        "line": 262,
        "fullcodeline": "strcpy(key_value, processor_arch);"
    },
    {
        "line": 263,
        "fullcodeline": "strcpy(key_name, \"ProcessorArchitecture\");"
    },
    {
        "line": 266,
        "fullcodeline": "hv_msg->error = HV_S_CONT;"
    },
    {
        "line": 283,
        "fullcodeline": "syslog(LOG_ERR, \"net_link send failed; error:%d\", len);"
    },
    {
        "line": 284,
        "fullcodeline": "exit(EXIT_FAILURE);"
    },
    {
        "line": 83,
        "fullcodeline": "addr.nl_pid, errno, strerror(errno));"
    },
    {
        "line": 85,
        "fullcodeline": "return -1;"
    },
    {
        "line": 129,
        "fullcodeline": "kvp_mac_to_if_name((char *)kvp_ip_val->adapter_id);"
    },
    {
        "line": 131,
        "fullcodeline": "if (if_name == NULL) {"
    },
    {
        "line": 154,
        "fullcodeline": "if (if_name == NULL) {"
    },
    {
        "line": 170,
        "fullcodeline": "if (kvp_key_add_or_modify(pool,"
    },
    {
        "line": 179,
        "fullcodeline": "if (kvp_get_value(pool,"
    },
    {
        "line": 188,
        "fullcodeline": "if (kvp_key_delete(pool,"
    },
    {
        "line": 207,
        "fullcodeline": "if (kvp_pool_enumerate(pool,"
    },
    {
        "line": 116,
        "fullcodeline": "strcpy(lic_version, p);"
    },
    {
        "line": 117,
        "fullcodeline": "syslog(LOG_INFO, \"KVP LIC Version: %s\","
    },
    {
        "line": 136,
        "fullcodeline": "hv_msg->error = HV_E_FAIL;"
    },
    {
        "line": 142,
        "fullcodeline": "(MAX_IP_ADDR_SIZE * 2));"
    },
    {
        "line": 145,
        "fullcodeline": "hv_msg->error = error;"
    },
    {
        "line": 153,
        "fullcodeline": "(char *)kvp_ip_val->adapter_id);"
    },
    {
        "line": 159,
        "fullcodeline": "hv_msg->error = HV_GUID_NOTFOUND;"
    },
    {
        "line": 164,
        "fullcodeline": "hv_msg->error = error;"
    },
    {
        "line": 175,
        "fullcodeline": "hv_msg->error = HV_S_CONT;"
    },
    {
        "line": 184,
        "fullcodeline": "hv_msg->error = HV_S_CONT;"
    },
    {
        "line": 191,
        "fullcodeline": "hv_msg->error = HV_S_CONT;"
    },
    {
        "line": 213,
        "fullcodeline": "hv_msg->error = HV_S_CONT;"
    },
    {
        "line": 120,
        "fullcodeline": "syslog(LOG_ERR, \"malloc failed\");"
    }
]