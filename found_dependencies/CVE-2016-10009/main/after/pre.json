[
    {
        "line": 3,
        "fullcodeline": "int c_flag = 0, d_flag = 0, D_flag = 0, k_flag = 0, s_flag = 0;"
    },
    {
        "line": 6,
        "fullcodeline": "char *shell, *format, *pidstr, *agentsocket = NULL;"
    },
    {
        "line": 7,
        "fullcodeline": "fd_set *readsetp = NULL, *writesetp = NULL;"
    },
    {
        "line": 12,
        "fullcodeline": "char pidstrbuf[1 + 3 * sizeof pid];"
    },
    {
        "line": 13,
        "fullcodeline": "struct timeval *tvp = NULL;"
    },
    {
        "line": 17,
        "fullcodeline": "ssh_malloc_init();\t/* must be called before any mallocs */"
    },
    {
        "line": 19,
        "fullcodeline": "sanitise_stdfd();"
    },
    {
        "line": 22,
        "fullcodeline": "setegid(getgid());"
    },
    {
        "line": 23,
        "fullcodeline": "setgid(getgid());"
    },
    {
        "line": 77,
        "fullcodeline": "ac -= optind;"
    },
    {
        "line": 78,
        "fullcodeline": "av += optind;"
    },
    {
        "line": 118,
        "fullcodeline": "parent_pid = getpid();"
    },
    {
        "line": 139,
        "fullcodeline": "prev_mask = umask(0177);"
    },
    {
        "line": 140,
        "fullcodeline": "sock = unix_listener(socket_name, SSH_LISTEN_BACKLOG, 0);"
    },
    {
        "line": 146,
        "fullcodeline": "umask(prev_mask);"
    },
    {
        "line": 163,
        "fullcodeline": "pid = fork();"
    },
    {
        "line": 190,
        "fullcodeline": "log_init(__progname, SYSLOG_LEVEL_INFO, SYSLOG_FACILITY_AUTH, 0);"
    },
    {
        "line": 197,
        "fullcodeline": "(void)chdir(\"/\");"
    },
    {
        "line": 208,
        "fullcodeline": "rlim.rlim_cur = rlim.rlim_max = 0;"
    },
    {
        "line": 216,
        "fullcodeline": "cleanup_pid = getpid();"
    },
    {
        "line": 221,
        "fullcodeline": "new_socket(AUTH_SOCKET, sock);"
    },
    {
        "line": 224,
        "fullcodeline": "idtab_init();"
    },
    {
        "line": 225,
        "fullcodeline": "signal(SIGPIPE, SIG_IGN);"
    },
    {
        "line": 226,
        "fullcodeline": "signal(SIGINT, (d_flag | D_flag) ? cleanup_handler : SIG_IGN);"
    },
    {
        "line": 227,
        "fullcodeline": "signal(SIGHUP, cleanup_handler);"
    },
    {
        "line": 228,
        "fullcodeline": "signal(SIGTERM, cleanup_handler);"
    },
    {
        "line": 229,
        "fullcodeline": "nalloc = 0;"
    },
    {
        "line": 29,
        "fullcodeline": "while ((ch = getopt(ac, av, \"cDdksE:a:P:t:\")) != -1) {"
    },
    {
        "line": 80,
        "fullcodeline": "if (ac > 0 && (c_flag || k_flag || s_flag || d_flag || D_flag))"
    },
    {
        "line": 83,
        "fullcodeline": "if (pkcs11_whitelist == NULL)"
    },
    {
        "line": 86,
        "fullcodeline": "if (ac == 0 && !c_flag && !s_flag) {"
    },
    {
        "line": 120,
        "fullcodeline": "if (agentsocket == NULL) {"
    },
    {
        "line": 141,
        "fullcodeline": "if (sock < 0) {"
    },
    {
        "line": 152,
        "fullcodeline": "if (D_flag || d_flag) {"
    },
    {
        "line": 164,
        "fullcodeline": "if (pid == -1) {"
    },
    {
        "line": 168,
        "fullcodeline": "if (pid != 0) {\t\t/* Parent - execute the given command. */"
    },
    {
        "line": 192,
        "fullcodeline": "if (setsid() == -1) {"
    },
    {
        "line": 198,
        "fullcodeline": "if ((fd = open(_PATH_DEVNULL, O_RDWR, 0)) != -1) {"
    },
    {
        "line": 209,
        "fullcodeline": "if (setrlimit(RLIMIT_CORE, &rlim) < 0) {"
    },
    {
        "line": 222,
        "fullcodeline": "if (ac > 0)"
    },
    {
        "line": 231,
        "fullcodeline": "if (pledge(\"stdio rpath cpath unix id proc exec\", NULL) == -1)"
    },
    {
        "line": 81,
        "fullcodeline": "usage();"
    },
    {
        "line": 84,
        "fullcodeline": "pkcs11_whitelist = xstrdup(DEFAULT_PKCS11_WHITELIST);"
    },
    {
        "line": 87,
        "fullcodeline": "shell = getenv(\"SHELL\");"
    },
    {
        "line": 93,
        "fullcodeline": "const char *errstr = NULL;"
    },
    {
        "line": 95,
        "fullcodeline": "pidstr = getenv(SSH_AGENTPID_ENV_NAME);"
    },
    {
        "line": 101,
        "fullcodeline": "pid = (int)strtonum(pidstr, 2, INT_MAX, &errstr);"
    },
    {
        "line": 112,
        "fullcodeline": "format = c_flag ? \"unsetenv %s;\\n\" : \"unset %s;\\n\";"
    },
    {
        "line": 113,
        "fullcodeline": "printf(format, SSH_AUTHSOCKET_ENV_NAME);"
    },
    {
        "line": 114,
        "fullcodeline": "printf(format, SSH_AGENTPID_ENV_NAME);"
    },
    {
        "line": 115,
        "fullcodeline": "printf(\"echo Agent pid %ld killed;\\n\", (long)pid);"
    },
    {
        "line": 122,
        "fullcodeline": "mktemp_proto(socket_dir, sizeof(socket_dir));"
    },
    {
        "line": 127,
        "fullcodeline": "snprintf(socket_name, sizeof socket_name, \"%s/agent.%ld\", socket_dir,"
    },
    {
        "line": 143,
        "fullcodeline": "*socket_name = '\\0'; /* Don't unlink any existing file */"
    },
    {
        "line": 144,
        "fullcodeline": "cleanup_exit(1);"
    },
    {
        "line": 153,
        "fullcodeline": "log_init(__progname,"
    },
    {
        "line": 156,
        "fullcodeline": "format = c_flag ? \"setenv %s %s;\\n\" : \"%s=%s; export %s;\\n\";"
    },
    {
        "line": 157,
        "fullcodeline": "printf(format, SSH_AUTHSOCKET_ENV_NAME, socket_name,"
    },
    {
        "line": 159,
        "fullcodeline": "printf(\"echo Agent pid %ld;\\n\", (long)parent_pid);"
    },
    {
        "line": 160,
        "fullcodeline": "fflush(stdout);"
    },
    {
        "line": 165,
        "fullcodeline": "perror(\"fork\");"
    },
    {
        "line": 166,
        "fullcodeline": "cleanup_exit(1);"
    },
    {
        "line": 169,
        "fullcodeline": "close(sock);"
    },
    {
        "line": 170,
        "fullcodeline": "snprintf(pidstrbuf, sizeof pidstrbuf, \"%ld\", (long)pid);"
    },
    {
        "line": 185,
        "fullcodeline": "execvp(av[0], av);"
    },
    {
        "line": 186,
        "fullcodeline": "perror(av[0]);"
    },
    {
        "line": 193,
        "fullcodeline": "error(\"setsid: %s\", strerror(errno));"
    },
    {
        "line": 194,
        "fullcodeline": "cleanup_exit(1);"
    },
    {
        "line": 200,
        "fullcodeline": "(void)dup2(fd, STDIN_FILENO);"
    },
    {
        "line": 201,
        "fullcodeline": "(void)dup2(fd, STDOUT_FILENO);"
    },
    {
        "line": 202,
        "fullcodeline": "(void)dup2(fd, STDERR_FILENO);"
    },
    {
        "line": 210,
        "fullcodeline": "error(\"setrlimit RLIMIT_CORE: %s\", strerror(errno));"
    },
    {
        "line": 211,
        "fullcodeline": "cleanup_exit(1);"
    },
    {
        "line": 223,
        "fullcodeline": "parent_alive_interval = 10;"
    },
    {
        "line": 232,
        "fullcodeline": "fatal(\"%s: pledge: %s\", __progname, strerror(errno));"
    },
    {
        "line": 235,
        "fullcodeline": "prepare_select(&readsetp, &writesetp, &max_fd, &nalloc, &tvp);"
    },
    {
        "line": 236,
        "fullcodeline": "result = select(max_fd + 1, readsetp, writesetp, NULL, tvp);"
    },
    {
        "line": 237,
        "fullcodeline": "saved_errno = errno;"
    },
    {
        "line": 88,
        "fullcodeline": "if (shell != NULL && (len = strlen(shell)) > 2 &&"
    },
    {
        "line": 96,
        "fullcodeline": "if (pidstr == NULL) {"
    },
    {
        "line": 108,
        "fullcodeline": "if (kill(pid, SIGTERM) == -1) {"
    },
    {
        "line": 123,
        "fullcodeline": "if (mkdtemp(socket_dir) == NULL) {"
    },
    {
        "line": 128,
        "fullcodeline": "(long)parent_pid);"
    },
    {
        "line": 131,
        "fullcodeline": "socket_dir[0] = '\\0';"
    },
    {
        "line": 132,
        "fullcodeline": "strlcpy(socket_name, agentsocket, sizeof socket_name);"
    },
    {
        "line": 154,
        "fullcodeline": "d_flag ? SYSLOG_LEVEL_DEBUG3 : SYSLOG_LEVEL_INFO,"
    },
    {
        "line": 171,
        "fullcodeline": "if (ac == 0) {"
    },
    {
        "line": 180,
        "fullcodeline": "if (setenv(SSH_AUTHSOCKET_ENV_NAME, socket_name, 1) == -1 ||"
    },
    {
        "line": 203,
        "fullcodeline": "if (fd > 2)"
    },
    {
        "line": 241,
        "fullcodeline": "if (result < 0) {"
    },
    {
        "line": 32,
        "fullcodeline": "fingerprint_hash = ssh_digest_alg_by_name(optarg);"
    },
    {
        "line": 39,
        "fullcodeline": "c_flag++;"
    },
    {
        "line": 42,
        "fullcodeline": "k_flag++;"
    },
    {
        "line": 47,
        "fullcodeline": "pkcs11_whitelist = xstrdup(optarg);"
    },
    {
        "line": 52,
        "fullcodeline": "s_flag++;"
    },
    {
        "line": 57,
        "fullcodeline": "d_flag++;"
    },
    {
        "line": 62,
        "fullcodeline": "D_flag++;"
    },
    {
        "line": 65,
        "fullcodeline": "agentsocket = optarg;"
    },
    {
        "line": 74,
        "fullcodeline": "usage();"
    },
    {
        "line": 89,
        "fullcodeline": "strncmp(shell + len - 3, \"csh\", 3) == 0)"
    },
    {
        "line": 90,
        "fullcodeline": "c_flag = 1;"
    },
    {
        "line": 97,
        "fullcodeline": "fprintf(stderr, \"%s not set, cannot kill agent\\n\","
    },
    {
        "line": 103,
        "fullcodeline": "fprintf(stderr,"
    },
    {
        "line": 109,
        "fullcodeline": "perror(\"kill\");"
    },
    {
        "line": 124,
        "fullcodeline": "perror(\"mkdtemp: private socket dir\");"
    },
    {
        "line": 172,
        "fullcodeline": "format = c_flag ? \"setenv %s %s;\\n\" : \"%s=%s; export %s;\\n\";"
    },
    {
        "line": 173,
        "fullcodeline": "printf(format, SSH_AUTHSOCKET_ENV_NAME, socket_name,"
    },
    {
        "line": 175,
        "fullcodeline": "printf(format, SSH_AGENTPID_ENV_NAME, pidstrbuf,"
    },
    {
        "line": 177,
        "fullcodeline": "printf(\"echo Agent pid %ld;\\n\", (long)pid);"
    },
    {
        "line": 181,
        "fullcodeline": "setenv(SSH_AGENTPID_ENV_NAME, pidstrbuf, 1) == -1) {"
    },
    {
        "line": 182,
        "fullcodeline": "perror(\"setenv\");"
    },
    {
        "line": 204,
        "fullcodeline": "close(fd);"
    },
    {
        "line": 244,
        "fullcodeline": "fatal(\"select: %s\", strerror(saved_errno));"
    },
    {
        "line": 45,
        "fullcodeline": "if (pkcs11_whitelist != NULL)"
    },
    {
        "line": 55,
        "fullcodeline": "if (d_flag || D_flag)"
    },
    {
        "line": 60,
        "fullcodeline": "if (d_flag || D_flag)"
    },
    {
        "line": 242,
        "fullcodeline": "if (saved_errno == EINTR)"
    },
    {
        "line": 33,
        "fullcodeline": "if (fingerprint_hash == -1)"
    },
    {
        "line": 34,
        "fullcodeline": "fatal(\"Invalid hash algorithm \\\"%s\\\"\", optarg);"
    },
    {
        "line": 68,
        "fullcodeline": "if ((lifetime = convtime(optarg)) == -1) {"
    },
    {
        "line": 69,
        "fullcodeline": "fprintf(stderr, \"Invalid lifetime\\n\");"
    },
    {
        "line": 245,
        "fullcodeline": "} else if (result > 0)"
    },
    {
        "line": 246,
        "fullcodeline": "after_select(readsetp, writesetp);"
    }
]