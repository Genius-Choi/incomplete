[
    {
        "line": 2,
        "fullcodeline": "uint8_t *structs = wwsect + 0x2a1, *compd, *ccur, *unpd, *ucur, bc;"
    },
    {
        "line": 4,
        "fullcodeline": "int error=0, i;"
    },
    {
        "line": 6,
        "fullcodeline": "cli_dbgmsg(\"in wwunpack\\n\");"
    },
    {
        "line": 149,
        "fullcodeline": "if(!error) {"
    },
    {
        "line": 12,
        "fullcodeline": "src = sects[scount].rva - cli_readint32(structs); /* src delta / dst delta - not used / dwords / end of src */"
    },
    {
        "line": 13,
        "fullcodeline": "structs+=8;"
    },
    {
        "line": 14,
        "fullcodeline": "szd = cli_readint32(structs) * 4;"
    },
    {
        "line": 15,
        "fullcodeline": "structs+=4;"
    },
    {
        "line": 16,
        "fullcodeline": "srcend = cli_readint32(structs);"
    },
    {
        "line": 17,
        "fullcodeline": "structs+=4;"
    },
    {
        "line": 19,
        "fullcodeline": "unpd = ucur = exe+src+srcend+4-szd;"
    },
    {
        "line": 24,
        "fullcodeline": "cli_dbgmsg(\"WWP: src: %x, szd: %x, srcend: %x - %x\\n\", src, szd, srcend, srcend+4-szd);"
    },
    {
        "line": 29,
        "fullcodeline": "memcpy(compd, unpd, szd);"
    },
    {
        "line": 30,
        "fullcodeline": "memset(unpd, -1, szd); /*FIXME*/"
    },
    {
        "line": 31,
        "fullcodeline": "ccur=compd;"
    },
    {
        "line": 141,
        "fullcodeline": "free(compd);"
    },
    {
        "line": 153,
        "fullcodeline": "exe[pe+6]=(uint8_t)scount;"
    },
    {
        "line": 154,
        "fullcodeline": "exe[pe+7]=(uint8_t)(scount>>8);"
    },
    {
        "line": 156,
        "fullcodeline": "cli_writeint32(&exe[pe+0x50], cli_readint32(&exe[pe+0x50])-sects[scount].vsz);"
    },
    {
        "line": 158,
        "fullcodeline": "structs = &exe[(0xffff&cli_readint32(&exe[pe+0x14]))+pe+0x18];"
    },
    {
        "line": 177,
        "fullcodeline": "error = (uint32_t)cli_writen(desc, exe, exesz)!=exesz;"
    },
    {
        "line": 8,
        "fullcodeline": "if (!CLI_ISCONTAINED(wwsect, sects[scount].rsz, structs, 17)) {"
    },
    {
        "line": 20,
        "fullcodeline": "if (!szd || !CLI_ISCONTAINED(exe, exesz, unpd, szd)) {"
    },
    {
        "line": 25,
        "fullcodeline": "if (!(compd = cli_malloc(szd))) {"
    },
    {
        "line": 34,
        "fullcodeline": "while(!error) {"
    },
    {
        "line": 146,
        "fullcodeline": "if (error || !*structs++) break;"
    },
    {
        "line": 150,
        "fullcodeline": "if (pe+6 > exesz || pe+7 > exesz || pe+0x28 > exesz ||"
    },
    {
        "line": 159,
        "fullcodeline": "for(i=0 ; i<scount ; i++) {"
    },
    {
        "line": 9,
        "fullcodeline": "cli_dbgmsg(\"WWPack: Array of structs out of section\\n\");"
    },
    {
        "line": 21,
        "fullcodeline": "cli_dbgmsg(\"WWPack: Compressed data out of file\\n\");"
    },
    {
        "line": 26,
        "fullcodeline": "cli_dbgmsg(\"WWPack: Unable to allocate memory for compd\\n\");"
    },
    {
        "line": 47,
        "fullcodeline": "BITS(2);"
    },
    {
        "line": 71,
        "fullcodeline": "saved = bits; /* cmp al, 1 / pushf */"
    },
    {
        "line": 73,
        "fullcodeline": "BITS(3);"
    },
    {
        "line": 99,
        "fullcodeline": "backbytes = bits;"
    },
    {
        "line": 143,
        "fullcodeline": "cli_dbgmsg(\"WWPack: decompression error\\n\");"
    },
    {
        "line": 151,
        "fullcodeline": "pe+0x50 > exesz || pe+0x14 > exesz)"
    },
    {
        "line": 165,
        "fullcodeline": "cli_writeint32(structs+8, sects[i].vsz);"
    },
    {
        "line": 166,
        "fullcodeline": "cli_writeint32(structs+12, sects[i].rva);"
    },
    {
        "line": 169,
        "fullcodeline": "structs+=0x28;"
    },
    {
        "line": 171,
        "fullcodeline": "if (!CLI_ISCONTAINED(exe, exesz, structs, 0x28)) {"
    },
    {
        "line": 39,
        "fullcodeline": "if (!bits) { /* BYTE copy */"
    },
    {
        "line": 48,
        "fullcodeline": "if(bits==3) { /* WORD backcopy */"
    },
    {
        "line": 74,
        "fullcodeline": "if (bits<6) {"
    },
    {
        "line": 102,
        "fullcodeline": "if (!saved) {"
    },
    {
        "line": 135,
        "fullcodeline": "if(!CLI_ISCONTAINED(exe, exesz, ucur, backsize) || !CLI_ISCONTAINED(exe, exesz, ucur-backbytes, backsize)) error=1;"
    },
    {
        "line": 155,
        "fullcodeline": "cli_writeint32(&exe[pe+0x28], cli_readint32(wwsect+0x295)+sects[scount].rva+0x299);"
    },
    {
        "line": 49,
        "fullcodeline": "uint8_t shifted, subbed = 31;"
    },
    {
        "line": 50,
        "fullcodeline": "BITS(2);"
    },
    {
        "line": 51,
        "fullcodeline": "shifted = bits + 5;"
    },
    {
        "line": 56,
        "fullcodeline": "backbytes = (1<<shifted)-subbed; /* 1h, 21h, 61h, 161h */"
    },
    {
        "line": 57,
        "fullcodeline": "BITS(shifted); /* 5, 6, 8, 9 */"
    },
    {
        "line": 59,
        "fullcodeline": "backbytes+=bits;"
    },
    {
        "line": 75,
        "fullcodeline": "backbytes = bits;"
    },
    {
        "line": 89,
        "fullcodeline": "BITS(backbytes);"
    },
    {
        "line": 90,
        "fullcodeline": "bits+=(1<<backbytes)-31;"
    },
    {
        "line": 130,
        "fullcodeline": "backsize = bits;"
    },
    {
        "line": 160,
        "fullcodeline": "if (!CLI_ISCONTAINED(exe, exesz, structs, 0x28)) {"
    },
    {
        "line": 40,
        "fullcodeline": "if(ccur-compd>=szd || !CLI_ISCONTAINED(exe, exesz, ucur, 1))"
    },
    {
        "line": 52,
        "fullcodeline": "if(bits>=2) {"
    },
    {
        "line": 58,
        "fullcodeline": "if(error || bits == 0x1ff) break;"
    },
    {
        "line": 60,
        "fullcodeline": "if(!CLI_ISCONTAINED(exe, exesz, ucur, 2) || !CLI_ISCONTAINED(exe, exesz, ucur-backbytes, 2)) {"
    },
    {
        "line": 104,
        "fullcodeline": "if(!bits) {"
    },
    {
        "line": 132,
        "fullcodeline": "backsize = saved+2;"
    },
    {
        "line": 41,
        "fullcodeline": "error=1;"
    },
    {
        "line": 53,
        "fullcodeline": "shifted++;"
    },
    {
        "line": 54,
        "fullcodeline": "subbed += 0x80;"
    },
    {
        "line": 61,
        "fullcodeline": "error=1;"
    },
    {
        "line": 78,
        "fullcodeline": "backbytes++;"
    },
    {
        "line": 81,
        "fullcodeline": "backbytes+=bits;"
    },
    {
        "line": 83,
        "fullcodeline": "backbytes+=5;"
    },
    {
        "line": 86,
        "fullcodeline": "backbytes=12;"
    },
    {
        "line": 91,
        "fullcodeline": "} else if(bits==6) {"
    },
    {
        "line": 106,
        "fullcodeline": "bits+=5;"
    },
    {
        "line": 136,
        "fullcodeline": "else while(backsize--) {"
    },
    {
        "line": 43,
        "fullcodeline": "*ucur++=*ccur++;"
    },
    {
        "line": 63,
        "fullcodeline": "ucur[0]=*(ucur-backbytes);"
    },
    {
        "line": 64,
        "fullcodeline": "ucur[1]=*(ucur-backbytes+1);"
    },
    {
        "line": 65,
        "fullcodeline": "ucur+=2;"
    },
    {
        "line": 92,
        "fullcodeline": "BITS(0x0e);"
    },
    {
        "line": 93,
        "fullcodeline": "bits+=0x1fe1;"
    },
    {
        "line": 108,
        "fullcodeline": "BITS(3);"
    },
    {
        "line": 137,
        "fullcodeline": "*ucur=*(ucur-backbytes);"
    },
    {
        "line": 138,
        "fullcodeline": "ucur++;"
    },
    {
        "line": 95,
        "fullcodeline": "BITS(0x0f);"
    },
    {
        "line": 96,
        "fullcodeline": "bits+=0x5fe1;"
    },
    {
        "line": 110,
        "fullcodeline": "bits+=6;"
    },
    {
        "line": 112,
        "fullcodeline": "BITS(4);"
    },
    {
        "line": 114,
        "fullcodeline": "bits+=13;"
    },
    {
        "line": 116,
        "fullcodeline": "uint8_t cnt = 4;"
    },
    {
        "line": 117,
        "fullcodeline": "uint16_t shifted = 0x0d;"
    },
    {
        "line": 125,
        "fullcodeline": "BITS(cnt);"
    },
    {
        "line": 126,
        "fullcodeline": "bits+=shifted;"
    },
    {
        "line": 124,
        "fullcodeline": "} while(!bits);"
    },
    {
        "line": 121,
        "fullcodeline": "shifted=((shifted+2)<<1)-1;"
    },
    {
        "line": 123,
        "fullcodeline": "cnt++;"
    },
    {
        "line": 120,
        "fullcodeline": "if(cnt==7) { cnt = 0x0e; shifted = 0; break; }"
    }
]