[
    {
        "line": 32,
        "fullcodeline": "packages = []"
    },
    {
        "line": 51,
        "fullcodeline": "collections = list(_find_collections(os.path.join(root, 'collections')))"
    },
    {
        "line": 54,
        "fullcodeline": "uids = set()"
    },
    {
        "line": 61,
        "fullcodeline": "top_elt = ElementTree.Element('nltk_data')"
    },
    {
        "line": 62,
        "fullcodeline": "top_elt.append(ElementTree.Element('packages'))"
    },
    {
        "line": 65,
        "fullcodeline": "top_elt.append(ElementTree.Element('collections'))"
    },
    {
        "line": 69,
        "fullcodeline": "_indent_xml(top_elt)"
    },
    {
        "line": 33,
        "fullcodeline": "for pkg_xml, zf, subdir in _find_packages(os.path.join(root, 'packages')):"
    },
    {
        "line": 55,
        "fullcodeline": "for item in packages + collections:"
    },
    {
        "line": 63,
        "fullcodeline": "for package in packages:"
    },
    {
        "line": 66,
        "fullcodeline": "for collection in collections:"
    },
    {
        "line": 34,
        "fullcodeline": "zipstat = os.stat(zf.filename)"
    },
    {
        "line": 35,
        "fullcodeline": "url = '%s/%s/%s' % (base_url, subdir, os.path.split(zf.filename)[1])"
    },
    {
        "line": 36,
        "fullcodeline": "unzipped_size = sum(zf_info.file_size for zf_info in zf.infolist())"
    },
    {
        "line": 39,
        "fullcodeline": "pkg_xml.set('unzipped_size', '%s' % unzipped_size)"
    },
    {
        "line": 40,
        "fullcodeline": "pkg_xml.set('size', '%s' % zipstat.st_size)"
    },
    {
        "line": 41,
        "fullcodeline": "pkg_xml.set('checksum', '%s' % md5_hexdigest(zf.filename))"
    },
    {
        "line": 42,
        "fullcodeline": "pkg_xml.set('subdir', subdir)"
    },
    {
        "line": 48,
        "fullcodeline": "packages.append(pkg_xml)"
    },
    {
        "line": 58,
        "fullcodeline": "uids.add(item.get('id'))"
    },
    {
        "line": 44,
        "fullcodeline": "if not pkg_xml.get('url'):"
    },
    {
        "line": 56,
        "fullcodeline": "if item.get('id') in uids:"
    },
    {
        "line": 64,
        "fullcodeline": "top_elt[0].append(package)"
    },
    {
        "line": 67,
        "fullcodeline": "top_elt[1].append(collection)"
    },
    {
        "line": 45,
        "fullcodeline": "pkg_xml.set('url', url)"
    },
    {
        "line": 57,
        "fullcodeline": "raise ValueError('Duplicate UID: %s' % item.get('id'))"
    }
]