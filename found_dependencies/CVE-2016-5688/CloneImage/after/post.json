[
    {
        "line": 16,
        "fullcodeline": "assert(image != (const Image *) NULL);"
    },
    {
        "line": 17,
        "fullcodeline": "assert(image->signature == MagickCoreSignature);"
    },
    {
        "line": 20,
        "fullcodeline": "assert(exception != (ExceptionInfo *) NULL);"
    },
    {
        "line": 21,
        "fullcodeline": "assert(exception->signature == MagickCoreSignature);"
    },
    {
        "line": 31,
        "fullcodeline": "(void) ResetMagickMemory(clone_image,0,sizeof(*clone_image));"
    },
    {
        "line": 32,
        "fullcodeline": "clone_image->signature=MagickCoreSignature;"
    },
    {
        "line": 33,
        "fullcodeline": "clone_image->storage_class=image->storage_class;"
    },
    {
        "line": 34,
        "fullcodeline": "clone_image->number_channels=image->number_channels;"
    },
    {
        "line": 35,
        "fullcodeline": "clone_image->number_meta_channels=image->number_meta_channels;"
    },
    {
        "line": 36,
        "fullcodeline": "clone_image->metacontent_extent=image->metacontent_extent;"
    },
    {
        "line": 37,
        "fullcodeline": "clone_image->colorspace=image->colorspace;"
    },
    {
        "line": 38,
        "fullcodeline": "clone_image->read_mask=image->read_mask;"
    },
    {
        "line": 39,
        "fullcodeline": "clone_image->write_mask=image->write_mask;"
    },
    {
        "line": 40,
        "fullcodeline": "clone_image->alpha_trait=image->alpha_trait;"
    },
    {
        "line": 41,
        "fullcodeline": "clone_image->columns=image->columns;"
    },
    {
        "line": 42,
        "fullcodeline": "clone_image->rows=image->rows;"
    },
    {
        "line": 43,
        "fullcodeline": "clone_image->dither=image->dither;"
    },
    {
        "line": 61,
        "fullcodeline": "clone_image->image_info=CloneImageInfo(image->image_info);"
    },
    {
        "line": 62,
        "fullcodeline": "(void) CloneImageProfiles(clone_image,image);"
    },
    {
        "line": 63,
        "fullcodeline": "(void) CloneImageProperties(clone_image,image);"
    },
    {
        "line": 64,
        "fullcodeline": "(void) CloneImageArtifacts(clone_image,image);"
    },
    {
        "line": 65,
        "fullcodeline": "GetTimerInfo(&clone_image->timer);"
    },
    {
        "line": 68,
        "fullcodeline": "clone_image->magick_columns=image->magick_columns;"
    },
    {
        "line": 69,
        "fullcodeline": "clone_image->magick_rows=image->magick_rows;"
    },
    {
        "line": 70,
        "fullcodeline": "clone_image->type=image->type;"
    },
    {
        "line": 71,
        "fullcodeline": "clone_image->channel_mask=image->channel_mask;"
    },
    {
        "line": 72,
        "fullcodeline": "clone_image->channel_map=ClonePixelChannelMap(image->channel_map);"
    },
    {
        "line": 73,
        "fullcodeline": "(void) CopyMagickString(clone_image->magick_filename,image->magick_filename,"
    },
    {
        "line": 75,
        "fullcodeline": "(void) CopyMagickString(clone_image->magick,image->magick,MagickPathExtent);"
    },
    {
        "line": 76,
        "fullcodeline": "(void) CopyMagickString(clone_image->filename,image->filename,"
    },
    {
        "line": 78,
        "fullcodeline": "clone_image->progress_monitor=image->progress_monitor;"
    },
    {
        "line": 79,
        "fullcodeline": "clone_image->client_data=image->client_data;"
    },
    {
        "line": 80,
        "fullcodeline": "clone_image->reference_count=1;"
    },
    {
        "line": 81,
        "fullcodeline": "clone_image->next=image->next;"
    },
    {
        "line": 82,
        "fullcodeline": "clone_image->previous=image->previous;"
    },
    {
        "line": 83,
        "fullcodeline": "clone_image->list=NewImageList();"
    },
    {
        "line": 92,
        "fullcodeline": "clone_image->ping=image->ping;"
    },
    {
        "line": 93,
        "fullcodeline": "clone_image->debug=IsEventLogging();"
    },
    {
        "line": 94,
        "fullcodeline": "clone_image->semaphore=AcquireSemaphoreInfo();"
    },
    {
        "line": 104,
        "fullcodeline": "scale=1.0;"
    },
    {
        "line": 107,
        "fullcodeline": "clone_image->page.width=(size_t) floor(scale*image->page.width+0.5);"
    },
    {
        "line": 110,
        "fullcodeline": "scale=1.0;"
    },
    {
        "line": 113,
        "fullcodeline": "clone_image->page.height=(size_t) floor(scale*image->page.height+0.5);"
    },
    {
        "line": 116,
        "fullcodeline": "clone_image->columns=columns;"
    },
    {
        "line": 117,
        "fullcodeline": "clone_image->rows=rows;"
    },
    {
        "line": 118,
        "fullcodeline": "clone_image->cache=ClonePixelCache(image->cache);"
    },
    {
        "line": 18,
        "fullcodeline": "if (image->debug != MagickFalse)"
    },
    {
        "line": 22,
        "fullcodeline": "if ((image->columns == 0) || (image->rows == 0))"
    },
    {
        "line": 29,
        "fullcodeline": "if (clone_image == (Image *) NULL)"
    },
    {
        "line": 44,
        "fullcodeline": "if (image->colormap != (PixelInfo *) NULL)"
    },
    {
        "line": 66,
        "fullcodeline": "if (image->ascii85 != (void *) NULL)"
    },
    {
        "line": 84,
        "fullcodeline": "if (detach == MagickFalse)"
    },
    {
        "line": 95,
        "fullcodeline": "if ((columns == 0) || (rows == 0))"
    },
    {
        "line": 105,
        "fullcodeline": "if (image->columns != 0)"
    },
    {
        "line": 111,
        "fullcodeline": "if (image->rows != 0)"
    },
    {
        "line": 19,
        "fullcodeline": "(void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",image->filename);"
    },
    {
        "line": 24,
        "fullcodeline": "(void) ThrowMagickException(exception,GetMagickModule(),CorruptImageError,"
    },
    {
        "line": 30,
        "fullcodeline": "ThrowImageException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 49,
        "fullcodeline": "clone_image->colors=image->colors;"
    },
    {
        "line": 50,
        "fullcodeline": "length=(size_t) image->colors;"
    },
    {
        "line": 51,
        "fullcodeline": "clone_image->colormap=(PixelInfo *) AcquireQuantumMemory(length,"
    },
    {
        "line": 58,
        "fullcodeline": "(void) CopyMagickMemory(clone_image->colormap,image->colormap,length*"
    },
    {
        "line": 67,
        "fullcodeline": "Ascii85Initialize(clone_image);"
    },
    {
        "line": 85,
        "fullcodeline": "clone_image->blob=ReferenceBlob(image->blob);"
    },
    {
        "line": 101,
        "fullcodeline": "clone_image->cache=ReferencePixelCache(image->cache);"
    },
    {
        "line": 106,
        "fullcodeline": "scale=(double) columns/(double) image->columns;"
    },
    {
        "line": 108,
        "fullcodeline": "clone_image->page.x=(ssize_t) ceil(scale*image->page.x-0.5);"
    },
    {
        "line": 109,
        "fullcodeline": "clone_image->tile_offset.x=(ssize_t) ceil(scale*image->tile_offset.x-0.5);"
    },
    {
        "line": 112,
        "fullcodeline": "scale=(double) rows/(double) image->rows;"
    },
    {
        "line": 114,
        "fullcodeline": "clone_image->page.y=(ssize_t) ceil(scale*image->page.y-0.5);"
    },
    {
        "line": 115,
        "fullcodeline": "clone_image->tile_offset.y=(ssize_t) ceil(scale*image->tile_offset.y-0.5);"
    },
    {
        "line": 26,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 53,
        "fullcodeline": "if (clone_image->colormap == (PixelInfo *) NULL)"
    },
    {
        "line": 88,
        "fullcodeline": "clone_image->next=NewImageList();"
    },
    {
        "line": 89,
        "fullcodeline": "clone_image->previous=NewImageList();"
    },
    {
        "line": 90,
        "fullcodeline": "clone_image->blob=CloneBlobInfo((BlobInfo *) NULL);"
    },
    {
        "line": 97,
        "fullcodeline": "if (image->montage != (char *) NULL)"
    },
    {
        "line": 99,
        "fullcodeline": "if (image->directory != (char *) NULL)"
    },
    {
        "line": 55,
        "fullcodeline": "clone_image=DestroyImage(clone_image);"
    },
    {
        "line": 56,
        "fullcodeline": "ThrowImageException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 98,
        "fullcodeline": "(void) CloneString(&clone_image->montage,image->montage);"
    },
    {
        "line": 100,
        "fullcodeline": "(void) CloneString(&clone_image->directory,image->directory);"
    }
]