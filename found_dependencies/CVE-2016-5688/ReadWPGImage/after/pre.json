[
    {
        "line": 130,
        "fullcodeline": "assert(image_info != (const ImageInfo *) NULL);"
    },
    {
        "line": 131,
        "fullcodeline": "assert(image_info->signature == MagickCoreSignature);"
    },
    {
        "line": 132,
        "fullcodeline": "assert(exception != (ExceptionInfo *) NULL);"
    },
    {
        "line": 133,
        "fullcodeline": "assert(exception->signature == MagickCoreSignature);"
    },
    {
        "line": 134,
        "fullcodeline": "one=1;"
    },
    {
        "line": 135,
        "fullcodeline": "image=AcquireImage(image_info,exception);"
    },
    {
        "line": 136,
        "fullcodeline": "image->depth=8;"
    },
    {
        "line": 137,
        "fullcodeline": "status=OpenBlob(image_info,image,ReadBinaryBlobMode,exception);"
    },
    {
        "line": 146,
        "fullcodeline": "Header.FileId=ReadBlobLSBLong(image);"
    },
    {
        "line": 147,
        "fullcodeline": "Header.DataOffset=(MagickOffsetType) ReadBlobLSBLong(image);"
    },
    {
        "line": 148,
        "fullcodeline": "Header.ProductType=ReadBlobLSBShort(image);"
    },
    {
        "line": 152,
        "fullcodeline": "Header.EncryptKey=ReadBlobLSBShort(image);"
    },
    {
        "line": 160,
        "fullcodeline": "image->columns = 1;"
    },
    {
        "line": 161,
        "fullcodeline": "image->rows = 1;"
    },
    {
        "line": 162,
        "fullcodeline": "image->colors = 0;"
    },
    {
        "line": 163,
        "fullcodeline": "bpp=0;"
    },
    {
        "line": 164,
        "fullcodeline": "BitmapHeader2.RotAngle=0;"
    },
    {
        "line": 138,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 149,
        "fullcodeline": "Header.FileType=ReadBlobLSBShort(image);"
    },
    {
        "line": 150,
        "fullcodeline": "Header.MajorVersion=ReadBlobByte(image);"
    },
    {
        "line": 151,
        "fullcodeline": "Header.MinorVersion=ReadBlobByte(image);"
    },
    {
        "line": 153,
        "fullcodeline": "Header.Reserved=ReadBlobLSBShort(image);"
    },
    {
        "line": 583,
        "fullcodeline": "(void) CloseBlob(image);"
    },
    {
        "line": 590,
        "fullcodeline": "scene=0;"
    },
    {
        "line": 595,
        "fullcodeline": "p=image;"
    },
    {
        "line": 596,
        "fullcodeline": "image=NULL;"
    },
    {
        "line": 614,
        "fullcodeline": "if (image == (Image *) NULL)"
    },
    {
        "line": 140,
        "fullcodeline": "image=DestroyImageList(image);"
    },
    {
        "line": 155,
        "fullcodeline": "if (Header.FileId!=0x435057FF || (Header.ProductType>>8)!=0x16)"
    },
    {
        "line": 156,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 158,
        "fullcodeline": "ThrowReaderException(CoderError,\"EncryptedWPGImageFileNotSupported\");"
    },
    {
        "line": 381,
        "fullcodeline": "StartWPG.PosSizePrecision = 0;"
    },
    {
        "line": 597,
        "fullcodeline": "while (p != (Image *) NULL)"
    },
    {
        "line": 611,
        "fullcodeline": "for (p=image; p != (Image *) NULL; p=p->next)"
    },
    {
        "line": 612,
        "fullcodeline": "p->scene=(size_t) scene++;"
    },
    {
        "line": 141,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 380,
        "fullcodeline": "(void) memset(CTM,0,sizeof(CTM));"
    },
    {
        "line": 599,
        "fullcodeline": "Image *tmp=p;"
    },
    {
        "line": 169,
        "fullcodeline": "while(!EOFBlob(image)) /* object parser loop */"
    },
    {
        "line": 175,
        "fullcodeline": "Rec.RecType=(i=ReadBlobByte(image));"
    },
    {
        "line": 178,
        "fullcodeline": "Rd_WP_DWORD(image,&Rec.RecordLength);"
    },
    {
        "line": 182,
        "fullcodeline": "Header.DataOffset=TellBlob(image)+Rec.RecordLength;"
    },
    {
        "line": 382,
        "fullcodeline": "while(!EOFBlob(image)) /* object parser loop */"
    },
    {
        "line": 394,
        "fullcodeline": "Rd_WP_DWORD(image,&Rec2.Extension);"
    },
    {
        "line": 395,
        "fullcodeline": "Rd_WP_DWORD(image,&Rec2.RecordLength);"
    },
    {
        "line": 399,
        "fullcodeline": "Header.DataOffset=TellBlob(image)+Rec2.RecordLength;"
    },
    {
        "line": 171,
        "fullcodeline": "(void) SeekBlob(image,Header.DataOffset,SEEK_SET);"
    },
    {
        "line": 172,
        "fullcodeline": "if(EOFBlob(image))"
    },
    {
        "line": 179,
        "fullcodeline": "if(EOFBlob(image))"
    },
    {
        "line": 384,
        "fullcodeline": "(void) SeekBlob(image,Header.DataOffset,SEEK_SET);"
    },
    {
        "line": 385,
        "fullcodeline": "if(EOFBlob(image))"
    },
    {
        "line": 388,
        "fullcodeline": "Rec2.Class=(i=ReadBlobByte(image));"
    },
    {
        "line": 389,
        "fullcodeline": "if(i==EOF)"
    },
    {
        "line": 391,
        "fullcodeline": "Rec2.RecType=(i=ReadBlobByte(image));"
    },
    {
        "line": 392,
        "fullcodeline": "if(i==EOF)"
    },
    {
        "line": 396,
        "fullcodeline": "if(EOFBlob(image))"
    },
    {
        "line": 600,
        "fullcodeline": "if ((p->rows == 0) || (p->columns == 0)) {"
    },
    {
        "line": 601,
        "fullcodeline": "p=p->previous;"
    },
    {
        "line": 187,
        "fullcodeline": "BitmapHeader1.Width=ReadBlobLSBShort(image);"
    },
    {
        "line": 188,
        "fullcodeline": "BitmapHeader1.Height=ReadBlobLSBShort(image);"
    },
    {
        "line": 191,
        "fullcodeline": "BitmapHeader1.Depth=ReadBlobLSBShort(image);"
    },
    {
        "line": 192,
        "fullcodeline": "BitmapHeader1.HorzRes=ReadBlobLSBShort(image);"
    },
    {
        "line": 193,
        "fullcodeline": "BitmapHeader1.VertRes=ReadBlobLSBShort(image);"
    },
    {
        "line": 201,
        "fullcodeline": "image->columns=BitmapHeader1.Width;"
    },
    {
        "line": 202,
        "fullcodeline": "image->rows=BitmapHeader1.Height;"
    },
    {
        "line": 203,
        "fullcodeline": "bpp=BitmapHeader1.Depth;"
    },
    {
        "line": 208,
        "fullcodeline": "WPG_Palette.StartIndex=ReadBlobLSBShort(image);"
    },
    {
        "line": 209,
        "fullcodeline": "WPG_Palette.NumOfEntries=ReadBlobLSBShort(image);"
    },
    {
        "line": 211,
        "fullcodeline": "image->colors=WPG_Palette.NumOfEntries;"
    },
    {
        "line": 234,
        "fullcodeline": "BitmapHeader2.RotAngle=ReadBlobLSBShort(image);"
    },
    {
        "line": 235,
        "fullcodeline": "BitmapHeader2.LowLeftX=ReadBlobLSBShort(image);"
    },
    {
        "line": 237,
        "fullcodeline": "BitmapHeader2.UpRightX=ReadBlobLSBShort(image);"
    },
    {
        "line": 238,
        "fullcodeline": "BitmapHeader2.UpRightY=ReadBlobLSBShort(image);"
    },
    {
        "line": 239,
        "fullcodeline": "BitmapHeader2.Width=ReadBlobLSBShort(image);"
    },
    {
        "line": 240,
        "fullcodeline": "BitmapHeader2.Height=ReadBlobLSBShort(image);"
    },
    {
        "line": 243,
        "fullcodeline": "BitmapHeader2.Depth=ReadBlobLSBShort(image);"
    },
    {
        "line": 244,
        "fullcodeline": "BitmapHeader2.HorzRes=ReadBlobLSBShort(image);"
    },
    {
        "line": 245,
        "fullcodeline": "BitmapHeader2.VertRes=ReadBlobLSBShort(image);"
    },
    {
        "line": 247,
        "fullcodeline": "image->units=PixelsPerCentimeterResolution;"
    },
    {
        "line": 259,
        "fullcodeline": "image->columns=BitmapHeader2.Width;"
    },
    {
        "line": 260,
        "fullcodeline": "image->rows=BitmapHeader2.Height;"
    },
    {
        "line": 261,
        "fullcodeline": "bpp=BitmapHeader2.Depth;"
    },
    {
        "line": 264,
        "fullcodeline": "status=SetImageExtent(image,image->columns,image->rows,exception);"
    },
    {
        "line": 360,
        "fullcodeline": "AcquireNextImage(image_info,image,exception);"
    },
    {
        "line": 361,
        "fullcodeline": "image->depth=8;"
    },
    {
        "line": 364,
        "fullcodeline": "image=SyncNextImageInList(image);"
    },
    {
        "line": 365,
        "fullcodeline": "image->columns=image->rows=1;"
    },
    {
        "line": 366,
        "fullcodeline": "image->colors=0;"
    },
    {
        "line": 406,
        "fullcodeline": "StartWPG.PosSizePrecision=ReadBlobByte(image);"
    },
    {
        "line": 409,
        "fullcodeline": "WPG_Palette.StartIndex=ReadBlobLSBShort(image);"
    },
    {
        "line": 410,
        "fullcodeline": "WPG_Palette.NumOfEntries=ReadBlobLSBShort(image);"
    },
    {
        "line": 412,
        "fullcodeline": "image->colors=WPG_Palette.NumOfEntries;"
    },
    {
        "line": 429,
        "fullcodeline": "Bitmap2Header1.Width=ReadBlobLSBShort(image);"
    },
    {
        "line": 430,
        "fullcodeline": "Bitmap2Header1.Height=ReadBlobLSBShort(image);"
    },
    {
        "line": 434,
        "fullcodeline": "Bitmap2Header1.Compression=ReadBlobByte(image);"
    },
    {
        "line": 458,
        "fullcodeline": "image->columns=Bitmap2Header1.Width;"
    },
    {
        "line": 459,
        "fullcodeline": "image->rows=Bitmap2Header1.Height;"
    },
    {
        "line": 460,
        "fullcodeline": "status=SetImageExtent(image,image->columns,image->rows,exception);"
    },
    {
        "line": 550,
        "fullcodeline": "AcquireNextImage(image_info,image,exception);"
    },
    {
        "line": 551,
        "fullcodeline": "image->depth=8;"
    },
    {
        "line": 554,
        "fullcodeline": "image=SyncNextImageInList(image);"
    },
    {
        "line": 555,
        "fullcodeline": "image->columns=image->rows=1;"
    },
    {
        "line": 556,
        "fullcodeline": "image->colors=0;"
    },
    {
        "line": 560,
        "fullcodeline": "i=ReadBlobLSBShort(image);"
    },
    {
        "line": 568,
        "fullcodeline": "WPG2Flags = LoadWPG2Flags(image,StartWPG.PosSizePrecision,NULL,&CTM);"
    },
    {
        "line": 604,
        "fullcodeline": "image=p;"
    },
    {
        "line": 605,
        "fullcodeline": "p=p->previous;"
    },
    {
        "line": 195,
        "fullcodeline": "if(BitmapHeader1.HorzRes && BitmapHeader1.VertRes)"
    },
    {
        "line": 215,
        "fullcodeline": "i < (int)WPG_Palette.NumOfEntries; i++)"
    },
    {
        "line": 227,
        "fullcodeline": "if(Rec.RecordLength > 8)"
    },
    {
        "line": 236,
        "fullcodeline": "BitmapHeader2.LowLeftY=ReadBlobLSBShort(image);"
    },
    {
        "line": 254,
        "fullcodeline": "if(BitmapHeader2.HorzRes && BitmapHeader2.VertRes)"
    },
    {
        "line": 267,
        "fullcodeline": "if ((image->colors == 0) && (bpp != 24))"
    },
    {
        "line": 293,
        "fullcodeline": "if (bpp == 1)"
    },
    {
        "line": 362,
        "fullcodeline": "if (image->next == (Image *) NULL)"
    },
    {
        "line": 370,
        "fullcodeline": "if(Rec.RecordLength>0x3C)"
    },
    {
        "line": 404,
        "fullcodeline": "StartWPG.HorizontalUnits=ReadBlobLSBShort(image);"
    },
    {
        "line": 405,
        "fullcodeline": "StartWPG.VerticalUnits=ReadBlobLSBShort(image);"
    },
    {
        "line": 413,
        "fullcodeline": "if (AcquireImageColormap(image,image->colors,exception) == MagickFalse)"
    },
    {
        "line": 417,
        "fullcodeline": "i < (int)WPG_Palette.NumOfEntries; i++)"
    },
    {
        "line": 433,
        "fullcodeline": "Bitmap2Header1.Depth=ReadBlobByte(image);"
    },
    {
        "line": 461,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 464,
        "fullcodeline": "if ((image->colors == 0) && (bpp != 24))"
    },
    {
        "line": 512,
        "fullcodeline": "if(CTM[0][0]<0 && !image_info->ping)"
    },
    {
        "line": 529,
        "fullcodeline": "if(CTM[1][1]<0 && !image_info->ping)"
    },
    {
        "line": 552,
        "fullcodeline": "if (image->next == (Image *) NULL)"
    },
    {
        "line": 561,
        "fullcodeline": "if(Rec2.RecordLength > (unsigned int) i)"
    },
    {
        "line": 189,
        "fullcodeline": "if ((BitmapHeader1.Width == 0) || (BitmapHeader1.Height == 0))"
    },
    {
        "line": 190,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 197,
        "fullcodeline": "image->units=PixelsPerCentimeterResolution;"
    },
    {
        "line": 212,
        "fullcodeline": "if (!AcquireImageColormap(image,image->colors,exception))"
    },
    {
        "line": 214,
        "fullcodeline": "for (i=WPG_Palette.StartIndex;"
    },
    {
        "line": 228,
        "fullcodeline": "image=ExtractPostscript(image,image_info,"
    },
    {
        "line": 241,
        "fullcodeline": "if ((BitmapHeader2.Width == 0) || (BitmapHeader2.Height == 0))"
    },
    {
        "line": 242,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 249,
        "fullcodeline": "((BitmapHeader2.LowLeftX-BitmapHeader2.UpRightX)/470.0);"
    },
    {
        "line": 251,
        "fullcodeline": "((BitmapHeader2.LowLeftX-BitmapHeader2.UpRightY)/470.0);"
    },
    {
        "line": 252,
        "fullcodeline": "image->page.x=(int) (BitmapHeader2.LowLeftX/470.0);"
    },
    {
        "line": 253,
        "fullcodeline": "image->page.y=(int) (BitmapHeader2.LowLeftX/470.0);"
    },
    {
        "line": 269,
        "fullcodeline": "image->colors=one << bpp;"
    },
    {
        "line": 308,
        "fullcodeline": "if(UnpackWPGRaster(image,bpp,exception) < 0)"
    },
    {
        "line": 315,
        "fullcodeline": "if(Rec.RecType==0x14 && BitmapHeader2.RotAngle!=0 && !image_info->ping)"
    },
    {
        "line": 371,
        "fullcodeline": "image=ExtractPostscript(image,image_info,"
    },
    {
        "line": 414,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,"
    },
    {
        "line": 416,
        "fullcodeline": "for (i=WPG_Palette.StartIndex;"
    },
    {
        "line": 431,
        "fullcodeline": "if ((Bitmap2Header1.Width == 0) || (Bitmap2Header1.Height == 0))"
    },
    {
        "line": 432,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 441,
        "fullcodeline": "bpp=1;"
    },
    {
        "line": 444,
        "fullcodeline": "bpp=2;"
    },
    {
        "line": 447,
        "fullcodeline": "bpp=4;"
    },
    {
        "line": 450,
        "fullcodeline": "bpp=8;"
    },
    {
        "line": 453,
        "fullcodeline": "bpp=24;"
    },
    {
        "line": 469,
        "fullcodeline": "one=1;"
    },
    {
        "line": 470,
        "fullcodeline": "image->colors=one << bpp;"
    },
    {
        "line": 517,
        "fullcodeline": "flop_image = FlopImage(image, exception);"
    },
    {
        "line": 534,
        "fullcodeline": "flip_image = FlipImage(image, exception);"
    },
    {
        "line": 562,
        "fullcodeline": "image=ExtractPostscript(image,image_info,"
    },
    {
        "line": 198,
        "fullcodeline": "image->resolution.x=BitmapHeader1.HorzRes/470.0;"
    },
    {
        "line": 199,
        "fullcodeline": "image->resolution.y=BitmapHeader1.VertRes/470.0;"
    },
    {
        "line": 217,
        "fullcodeline": "image->colormap[i].red=ScaleCharToQuantum((unsigned char)"
    },
    {
        "line": 219,
        "fullcodeline": "image->colormap[i].green=ScaleCharToQuantum((unsigned char)"
    },
    {
        "line": 221,
        "fullcodeline": "image->colormap[i].blue=ScaleCharToQuantum((unsigned char)"
    },
    {
        "line": 256,
        "fullcodeline": "image->resolution.x=BitmapHeader2.HorzRes/470.0;"
    },
    {
        "line": 257,
        "fullcodeline": "image->resolution.y=BitmapHeader2.VertRes/470.0;"
    },
    {
        "line": 277,
        "fullcodeline": "for (i=0; (i < (int) image->colors) && (i < 256); i++)"
    },
    {
        "line": 318,
        "fullcodeline": "if(BitmapHeader2.RotAngle & 0x8000)"
    },
    {
        "line": 331,
        "fullcodeline": "if(BitmapHeader2.RotAngle & 0x2000)"
    },
    {
        "line": 344,
        "fullcodeline": "if(BitmapHeader2.RotAngle & 0x0FFF)"
    },
    {
        "line": 419,
        "fullcodeline": "image->colormap[i].red=ScaleCharToQuantum((char)"
    },
    {
        "line": 421,
        "fullcodeline": "image->colormap[i].green=ScaleCharToQuantum((char)"
    },
    {
        "line": 423,
        "fullcodeline": "image->colormap[i].blue=ScaleCharToQuantum((char)"
    },
    {
        "line": 425,
        "fullcodeline": "(void) ReadBlobByte(image);   /*Opacity??*/"
    },
    {
        "line": 488,
        "fullcodeline": "ldblk=(ssize_t) ((bpp*image->columns+7)/8);"
    },
    {
        "line": 489,
        "fullcodeline": "BImgBuff=(unsigned char *) AcquireQuantumMemory((size_t)"
    },
    {
        "line": 518,
        "fullcodeline": "if (flop_image != (Image *) NULL) {"
    },
    {
        "line": 535,
        "fullcodeline": "if (flip_image != (Image *) NULL) {"
    },
    {
        "line": 230,
        "fullcodeline": "(ssize_t) Rec.RecordLength-8,exception);"
    },
    {
        "line": 270,
        "fullcodeline": "if (!AcquireImageColormap(image,image->colors,exception))"
    },
    {
        "line": 286,
        "fullcodeline": "if (bpp < 24)"
    },
    {
        "line": 295,
        "fullcodeline": "if(image->colormap[0].red==0 &&"
    },
    {
        "line": 300,
        "fullcodeline": "image->colormap[1].blue==0)"
    },
    {
        "line": 323,
        "fullcodeline": "flop_image = FlopImage(image, exception);"
    },
    {
        "line": 336,
        "fullcodeline": "flip_image = FlipImage(image, exception);"
    },
    {
        "line": 349,
        "fullcodeline": "rotate_image=RotateImage(image,(BitmapHeader2.RotAngle &"
    },
    {
        "line": 373,
        "fullcodeline": "(ssize_t) Rec.RecordLength-0x3C,exception);"
    },
    {
        "line": 471,
        "fullcodeline": "if (!AcquireImageColormap(image,image->colors,exception))"
    },
    {
        "line": 476,
        "fullcodeline": "if(bpp < 24)"
    },
    {
        "line": 491,
        "fullcodeline": "if (BImgBuff == (unsigned char *) NULL)"
    },
    {
        "line": 494,
        "fullcodeline": "for(i=0; i< (ssize_t) image->rows; i++)"
    },
    {
        "line": 519,
        "fullcodeline": "DuplicateBlob(flop_image,image);"
    },
    {
        "line": 521,
        "fullcodeline": "AppendImageToList(&image,flop_image);"
    },
    {
        "line": 536,
        "fullcodeline": "DuplicateBlob(flip_image,image);"
    },
    {
        "line": 538,
        "fullcodeline": "AppendImageToList(&image,flip_image);"
    },
    {
        "line": 564,
        "fullcodeline": "(ssize_t) (Rec2.RecordLength-i-2),exception);"
    },
    {
        "line": 218,
        "fullcodeline": "ReadBlobByte(image));"
    },
    {
        "line": 220,
        "fullcodeline": "ReadBlobByte(image));"
    },
    {
        "line": 222,
        "fullcodeline": "ReadBlobByte(image));"
    },
    {
        "line": 229,
        "fullcodeline": "TellBlob(image)+8,   /* skip PS header in the wpg */"
    },
    {
        "line": 279,
        "fullcodeline": "image->colormap[i].red=ScaleCharToQuantum(WPG1_Palette[i].Red);"
    },
    {
        "line": 280,
        "fullcodeline": "image->colormap[i].green=ScaleCharToQuantum(WPG1_Palette[i].Green);"
    },
    {
        "line": 281,
        "fullcodeline": "image->colormap[i].blue=ScaleCharToQuantum(WPG1_Palette[i].Blue);"
    },
    {
        "line": 299,
        "fullcodeline": "image->colormap[1].green==0 &&"
    },
    {
        "line": 303,
        "fullcodeline": "image->colormap[1].green ="
    },
    {
        "line": 324,
        "fullcodeline": "if (flop_image != (Image *) NULL) {"
    },
    {
        "line": 337,
        "fullcodeline": "if (flip_image != (Image *) NULL) {"
    },
    {
        "line": 351,
        "fullcodeline": "if (rotate_image != (Image *) NULL) {"
    },
    {
        "line": 372,
        "fullcodeline": "TellBlob(image)+0x3C,   /* skip PS l2 header in the wpg */"
    },
    {
        "line": 420,
        "fullcodeline": "ReadBlobByte(image));"
    },
    {
        "line": 422,
        "fullcodeline": "ReadBlobByte(image));"
    },
    {
        "line": 424,
        "fullcodeline": "ReadBlobByte(image));"
    },
    {
        "line": 497,
        "fullcodeline": "InsertRow(image,BImgBuff,i,bpp,exception);"
    },
    {
        "line": 506,
        "fullcodeline": "if( UnpackWPG2Raster(image,bpp,exception) < 0)"
    },
    {
        "line": 520,
        "fullcodeline": "(void) RemoveLastImageFromList(&image);"
    },
    {
        "line": 537,
        "fullcodeline": "(void) RemoveLastImageFromList(&image);"
    },
    {
        "line": 563,
        "fullcodeline": "TellBlob(image)+i,    /*skip PS header in the wpg2*/"
    },
    {
        "line": 287,
        "fullcodeline": "if ( (image->colors < (one << bpp)) && (bpp != 24) )"
    },
    {
        "line": 298,
        "fullcodeline": "image->colormap[1].red==0 &&"
    },
    {
        "line": 304,
        "fullcodeline": "image->colormap[1].blue = QuantumRange;"
    },
    {
        "line": 325,
        "fullcodeline": "DuplicateBlob(flop_image,image);"
    },
    {
        "line": 327,
        "fullcodeline": "AppendImageToList(&image,flop_image);"
    },
    {
        "line": 338,
        "fullcodeline": "DuplicateBlob(flip_image,image);"
    },
    {
        "line": 340,
        "fullcodeline": "AppendImageToList(&image,flip_image);"
    },
    {
        "line": 352,
        "fullcodeline": "DuplicateBlob(rotate_image,image);"
    },
    {
        "line": 354,
        "fullcodeline": "AppendImageToList(&image,rotate_image);"
    },
    {
        "line": 496,
        "fullcodeline": "(void) ReadBlob(image,ldblk,BImgBuff);"
    },
    {
        "line": 288,
        "fullcodeline": "image->colormap=(PixelInfo *) ResizeQuantumMemory("
    },
    {
        "line": 297,
        "fullcodeline": "image->colormap[0].blue==0 &&"
    },
    {
        "line": 326,
        "fullcodeline": "(void) RemoveLastImageFromList(&image);"
    },
    {
        "line": 339,
        "fullcodeline": "(void) RemoveLastImageFromList(&image);"
    },
    {
        "line": 353,
        "fullcodeline": "(void) RemoveLastImageFromList(&image);"
    },
    {
        "line": 477,
        "fullcodeline": "if( image->colors<(one << bpp) && bpp!=24 )"
    },
    {
        "line": 478,
        "fullcodeline": "image->colormap=(PixelInfo *) ResizeQuantumMemory("
    },
    {
        "line": 501,
        "fullcodeline": "BImgBuff=(unsigned char *) RelinquishMagickMemory(BImgBuff);"
    },
    {
        "line": 296,
        "fullcodeline": "image->colormap[0].green==0 &&"
    },
    {
        "line": 289,
        "fullcodeline": "image->colormap,(size_t) (one << bpp),"
    },
    {
        "line": 479,
        "fullcodeline": "image->colormap,(size_t) (one << bpp),"
    }
]