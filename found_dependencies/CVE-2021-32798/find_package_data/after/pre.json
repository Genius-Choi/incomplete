[
    {
        "line": 10,
        "fullcodeline": "excludes = ["
    },
    {
        "line": 17,
        "fullcodeline": "cwd = os.getcwd()"
    },
    {
        "line": 18,
        "fullcodeline": "os.chdir('notebook')"
    },
    {
        "line": 19,
        "fullcodeline": "static_data = []"
    },
    {
        "line": 33,
        "fullcodeline": "components = pjoin(\"static\", \"components\")"
    },
    {
        "line": 36,
        "fullcodeline": "static_data.extend(["
    },
    {
        "line": 75,
        "fullcodeline": "mj = lambda *path: pjoin(components, 'MathJax', *path)"
    },
    {
        "line": 76,
        "fullcodeline": "static_data.extend(["
    },
    {
        "line": 82,
        "fullcodeline": "trees = []"
    },
    {
        "line": 83,
        "fullcodeline": "mj_out = mj('jax', 'output')"
    },
    {
        "line": 106,
        "fullcodeline": "os.chdir(os.path.join('tests',))"
    },
    {
        "line": 107,
        "fullcodeline": "js_tests = glob('*.js') + glob('*/*.js')"
    },
    {
        "line": 109,
        "fullcodeline": "os.chdir(cwd)"
    },
    {
        "line": 111,
        "fullcodeline": "package_data = {"
    },
    {
        "line": 20,
        "fullcodeline": "for parent, dirs, files in os.walk('static'):"
    },
    {
        "line": 30,
        "fullcodeline": "for app in ['auth', 'edit', 'notebook', 'terminal', 'tree']:"
    },
    {
        "line": 69,
        "fullcodeline": "for parent, dirs, files in os.walk(pjoin(components, 'codemirror')):"
    },
    {
        "line": 93,
        "fullcodeline": "for tree in trees + ["
    },
    {
        "line": 11,
        "fullcodeline": "pjoin('static', 'components'),"
    },
    {
        "line": 12,
        "fullcodeline": "pjoin('static', '*', 'less'),"
    },
    {
        "line": 13,
        "fullcodeline": "pjoin('static', '*', 'node_modules')"
    },
    {
        "line": 37,
        "fullcodeline": "pjoin(components, \"backbone\", \"backbone-min.js\"),"
    },
    {
        "line": 38,
        "fullcodeline": "pjoin(components, \"bootstrap\", \"dist\", \"js\", \"bootstrap.min.js\"),"
    },
    {
        "line": 39,
        "fullcodeline": "pjoin(components, \"bootstrap-tour\", \"build\", \"css\", \"bootstrap-tour.min.css\"),"
    },
    {
        "line": 40,
        "fullcodeline": "pjoin(components, \"bootstrap-tour\", \"build\", \"js\", \"bootstrap-tour.min.js\"),"
    },
    {
        "line": 41,
        "fullcodeline": "pjoin(components, \"create-react-class\", \"index.js\"),"
    },
    {
        "line": 42,
        "fullcodeline": "pjoin(components, \"font-awesome\", \"css\", \"*.css\"),"
    },
    {
        "line": 43,
        "fullcodeline": "pjoin(components, \"es6-promise\", \"*.js\"),"
    },
    {
        "line": 44,
        "fullcodeline": "pjoin(components, \"font-awesome\", \"fonts\", \"*.*\"),"
    },
    {
        "line": 45,
        "fullcodeline": "pjoin(components, \"jed\", \"jed.js\"),"
    },
    {
        "line": 46,
        "fullcodeline": "pjoin(components, \"jquery\", \"jquery.min.js\"),"
    },
    {
        "line": 47,
        "fullcodeline": "pjoin(components, \"jquery-typeahead\", \"dist\", \"jquery.typeahead.min.js\"),"
    },
    {
        "line": 48,
        "fullcodeline": "pjoin(components, \"jquery-typeahead\", \"dist\", \"jquery.typeahead.min.css\"),"
    },
    {
        "line": 49,
        "fullcodeline": "pjoin(components, \"jquery-ui\", \"jquery-ui.min.js\"),"
    },
    {
        "line": 50,
        "fullcodeline": "pjoin(components, \"jquery-ui\", \"themes\", \"smoothness\", \"jquery-ui.min.css\"),"
    },
    {
        "line": 51,
        "fullcodeline": "pjoin(components, \"jquery-ui\", \"themes\", \"smoothness\", \"images\", \"*\"),"
    },
    {
        "line": 52,
        "fullcodeline": "pjoin(components, \"marked\", \"lib\", \"marked.js\"),"
    },
    {
        "line": 53,
        "fullcodeline": "pjoin(components, \"react\", \"react.production.min.js\"),"
    },
    {
        "line": 54,
        "fullcodeline": "pjoin(components, \"react\", \"react-dom.production.min.js\"),"
    },
    {
        "line": 55,
        "fullcodeline": "pjoin(components, \"requirejs\", \"require.js\"),"
    },
    {
        "line": 56,
        "fullcodeline": "pjoin(components, \"requirejs-plugins\", \"src\", \"json.js\"),"
    },
    {
        "line": 57,
        "fullcodeline": "pjoin(components, \"requirejs-text\", \"text.js\"),"
    },
    {
        "line": 58,
        "fullcodeline": "pjoin(components, \"sanitizer\", \"index.js\"),"
    },
    {
        "line": 59,
        "fullcodeline": "pjoin(components, \"underscore\", \"underscore-min.js\"),"
    },
    {
        "line": 60,
        "fullcodeline": "pjoin(components, \"moment\", \"moment.js\"),"
    },
    {
        "line": 61,
        "fullcodeline": "pjoin(components, \"moment\", \"min\", \"*.js\"),"
    },
    {
        "line": 62,
        "fullcodeline": "pjoin(components, \"xterm.js\", \"index.js\"),"
    },
    {
        "line": 63,
        "fullcodeline": "pjoin(components, \"xterm.js-css\", \"index.css\"),"
    },
    {
        "line": 64,
        "fullcodeline": "pjoin(components, \"xterm.js-fit\", \"index.js\"),"
    },
    {
        "line": 65,
        "fullcodeline": "pjoin(components, \"text-encoding\", \"lib\", \"encoding.js\"),"
    },
    {
        "line": 77,
        "fullcodeline": "mj('MathJax.js'),"
    },
    {
        "line": 78,
        "fullcodeline": "mj('config', 'TeX-AMS-MML_HTMLorMML-full.js'),"
    },
    {
        "line": 79,
        "fullcodeline": "mj('config', 'Safe.js'),"
    },
    {
        "line": 85,
        "fullcodeline": "if os.path.exists(mj_out):"
    },
    {
        "line": 31,
        "fullcodeline": "static_data.append(pjoin('static', app, 'js', 'main.min.js'))"
    },
    {
        "line": 86,
        "fullcodeline": "for output in os.listdir(mj_out):"
    },
    {
        "line": 112,
        "fullcodeline": "'notebook' : ['templates/*'] + static_data,"
    },
    {
        "line": 114,
        "fullcodeline": "'notebook.bundler.tests': ['resources/*', 'resources/*/*', 'resources/*/*/.*'],"
    },
    {
        "line": 115,
        "fullcodeline": "'notebook.services.api': ['api.yaml'],"
    },
    {
        "line": 116,
        "fullcodeline": "'notebook.i18n': ['*/LC_MESSAGES/*.*'],"
    },
    {
        "line": 21,
        "fullcodeline": "if any(fnmatch(parent, pat) for pat in excludes):"
    },
    {
        "line": 25,
        "fullcodeline": "for f in files:"
    },
    {
        "line": 70,
        "fullcodeline": "for f in files:"
    },
    {
        "line": 102,
        "fullcodeline": "for parent, dirs, files in os.walk(tree):"
    },
    {
        "line": 23,
        "fullcodeline": "dirs[:] = []"
    },
    {
        "line": 87,
        "fullcodeline": "path = pjoin(mj_out, output)"
    },
    {
        "line": 88,
        "fullcodeline": "static_data.append(pjoin(path, '*.js'))"
    },
    {
        "line": 89,
        "fullcodeline": "autoload = pjoin(path, 'autoload')"
    },
    {
        "line": 26,
        "fullcodeline": "static_data.append(pjoin(parent, f))"
    },
    {
        "line": 94,
        "fullcodeline": "mj('localization'), # limit to en?"
    },
    {
        "line": 95,
        "fullcodeline": "mj('fonts', 'HTML-CSS', 'STIX-Web', 'woff'),"
    },
    {
        "line": 96,
        "fullcodeline": "mj('extensions'),"
    },
    {
        "line": 97,
        "fullcodeline": "mj('jax', 'input', 'TeX'),"
    },
    {
        "line": 98,
        "fullcodeline": "mj('jax', 'output', 'HTML-CSS', 'fonts', 'STIX-Web'),"
    },
    {
        "line": 99,
        "fullcodeline": "mj('jax', 'output', 'SVG', 'fonts', 'STIX-Web'),"
    },
    {
        "line": 100,
        "fullcodeline": "mj('jax', 'element', 'mml'),"
    },
    {
        "line": 71,
        "fullcodeline": "if f.endswith(('.js', '.css')):"
    },
    {
        "line": 90,
        "fullcodeline": "if os.path.isdir(autoload):"
    },
    {
        "line": 91,
        "fullcodeline": "trees.append(autoload)"
    },
    {
        "line": 103,
        "fullcodeline": "for f in files:"
    },
    {
        "line": 72,
        "fullcodeline": "static_data.append(pjoin(parent, f))"
    },
    {
        "line": 104,
        "fullcodeline": "static_data.append(pjoin(parent, f))"
    }
]