[
    {
        "line": 4,
        "fullcodeline": "int noblock = flags & MSG_DONTWAIT;"
    },
    {
        "line": 5,
        "fullcodeline": "struct sock *sk = sock->sk;"
    },
    {
        "line": 6,
        "fullcodeline": "struct iucv_sock *iucv = iucv_sk(sk);"
    },
    {
        "line": 9,
        "fullcodeline": "int err = 0;"
    },
    {
        "line": 22,
        "fullcodeline": "skb = skb_recv_datagram(sk, flags, noblock, &err);"
    },
    {
        "line": 29,
        "fullcodeline": "rlen   = skb->len;\t\t/* real length of skb */"
    },
    {
        "line": 34,
        "fullcodeline": "cskb = skb;"
    },
    {
        "line": 52,
        "fullcodeline": "err = put_cmsg(msg, SOL_IUCV, SCM_IUCV_TRGCLS,"
    },
    {
        "line": 11,
        "fullcodeline": "if ((sk->sk_state == IUCV_DISCONN) &&"
    },
    {
        "line": 17,
        "fullcodeline": "if (flags & (MSG_OOB))"
    },
    {
        "line": 23,
        "fullcodeline": "if (!skb) {"
    },
    {
        "line": 31,
        "fullcodeline": "if (!rlen)"
    },
    {
        "line": 35,
        "fullcodeline": "if (skb_copy_datagram_iovec(cskb, 0, msg->msg_iov, copied)) {"
    },
    {
        "line": 42,
        "fullcodeline": "if (sk->sk_type == SOCK_SEQPACKET) {"
    },
    {
        "line": 61,
        "fullcodeline": "if (!(flags & MSG_PEEK)) {"
    },
    {
        "line": 111,
        "fullcodeline": "if (sk->sk_type == SOCK_SEQPACKET && (flags & MSG_TRUNC))"
    },
    {
        "line": 32,
        "fullcodeline": "sk->sk_shutdown = sk->sk_shutdown | RCV_SHUTDOWN;"
    },
    {
        "line": 46,
        "fullcodeline": "msg->msg_flags |= MSG_EOR;"
    },
    {
        "line": 53,
        "fullcodeline": "CB_TRGCLS_LEN, CB_TRGCLS(skb));"
    },
    {
        "line": 72,
        "fullcodeline": "kfree_skb(skb);"
    },
    {
        "line": 84,
        "fullcodeline": "rskb = skb_dequeue(&iucv->backlog_skb_q);"
    },
    {
        "line": 106,
        "fullcodeline": "spin_unlock_bh(&iucv->message_q.lock);"
    },
    {
        "line": 112,
        "fullcodeline": "copied = rlen;"
    },
    {
        "line": 13,
        "fullcodeline": "skb_queue_empty(&sk->sk_receive_queue) &&"
    },
    {
        "line": 18,
        "fullcodeline": "return -EOPNOTSUPP;"
    },
    {
        "line": 24,
        "fullcodeline": "if (sk->sk_shutdown & RCV_SHUTDOWN)"
    },
    {
        "line": 36,
        "fullcodeline": "if (!(flags & MSG_PEEK))"
    },
    {
        "line": 38,
        "fullcodeline": "return -EFAULT;"
    },
    {
        "line": 43,
        "fullcodeline": "if (copied < rlen)"
    },
    {
        "line": 55,
        "fullcodeline": "if (!(flags & MSG_PEEK))"
    },
    {
        "line": 64,
        "fullcodeline": "if (sk->sk_type == SOCK_STREAM) {"
    },
    {
        "line": 73,
        "fullcodeline": "if (iucv->transport == AF_IUCV_TRANS_HIPER) {"
    },
    {
        "line": 94,
        "fullcodeline": "if (skb_queue_empty(&iucv->backlog_skb_q)) {"
    },
    {
        "line": 12,
        "fullcodeline": "skb_queue_empty(&iucv->backlog_skb_q) &&"
    },
    {
        "line": 37,
        "fullcodeline": "skb_queue_head(&sk->sk_receive_queue, skb);"
    },
    {
        "line": 44,
        "fullcodeline": "msg->msg_flags |= MSG_TRUNC;"
    },
    {
        "line": 56,
        "fullcodeline": "skb_queue_head(&sk->sk_receive_queue, skb);"
    },
    {
        "line": 65,
        "fullcodeline": "skb_pull(skb, copied);"
    },
    {
        "line": 74,
        "fullcodeline": "atomic_inc(&iucv->msg_recv);"
    },
    {
        "line": 75,
        "fullcodeline": "if (atomic_read(&iucv->msg_recv) > iucv->msglimit) {"
    },
    {
        "line": 86,
        "fullcodeline": "if (sock_queue_rcv_skb(sk, rskb)) {"
    },
    {
        "line": 95,
        "fullcodeline": "if (!list_empty(&iucv->message_q.list))"
    },
    {
        "line": 97,
        "fullcodeline": "if (atomic_read(&iucv->msg_recv) >="
    },
    {
        "line": 67,
        "fullcodeline": "skb_queue_head(&sk->sk_receive_queue, skb);"
    },
    {
        "line": 76,
        "fullcodeline": "WARN_ON(1);"
    },
    {
        "line": 77,
        "fullcodeline": "iucv_sock_close(sk);"
    },
    {
        "line": 87,
        "fullcodeline": "skb_queue_head(&iucv->backlog_skb_q,"
    },
    {
        "line": 96,
        "fullcodeline": "iucv_process_message_q(sk);"
    },
    {
        "line": 98,
        "fullcodeline": "iucv->msglimit / 2) {"
    },
    {
        "line": 99,
        "fullcodeline": "err = iucv_send_ctrl(sk, AF_IUCV_FLAG_WIN);"
    },
    {
        "line": 78,
        "fullcodeline": "return -EFAULT;"
    },
    {
        "line": 91,
        "fullcodeline": "rskb = skb_dequeue(&iucv->backlog_skb_q);"
    },
    {
        "line": 101,
        "fullcodeline": "sk->sk_state = IUCV_DISCONN;"
    },
    {
        "line": 102,
        "fullcodeline": "sk->sk_state_change(sk);"
    }
]