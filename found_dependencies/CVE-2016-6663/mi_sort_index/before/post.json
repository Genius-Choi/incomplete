[
    {
        "line": 6,
        "fullcodeline": "my_off_t index_pos[HA_MAX_POSSIBLE_KEY];"
    },
    {
        "line": 9,
        "fullcodeline": "MYISAM_SHARE *share=info->s;"
    },
    {
        "line": 11,
        "fullcodeline": "DBUG_ENTER(\"mi_sort_index\");"
    },
    {
        "line": 23,
        "fullcodeline": "fn_format(param->temp_filename,name,\"\", MI_NAME_IEXT,2+4+32);"
    },
    {
        "line": 57,
        "fullcodeline": "flush_key_blocks(share->key_cache,share->kfile, FLUSH_IGNORE_CHANGED);"
    },
    {
        "line": 59,
        "fullcodeline": "share->state.version=(ulong) time((time_t*) 0);"
    },
    {
        "line": 60,
        "fullcodeline": "old_state= share->state;\t\t\t/* save state if not stored */"
    },
    {
        "line": 61,
        "fullcodeline": "r_locks=   share->r_locks;"
    },
    {
        "line": 62,
        "fullcodeline": "w_locks=   share->w_locks;"
    },
    {
        "line": 63,
        "fullcodeline": "old_lock=  info->lock_type;"
    },
    {
        "line": 66,
        "fullcodeline": "share->r_locks= share->w_locks= share->tot_locks= 0;"
    },
    {
        "line": 67,
        "fullcodeline": "(void) _mi_writeinfo(info,WRITEINFO_UPDATE_KEYFILE);"
    },
    {
        "line": 68,
        "fullcodeline": "(void) mysql_file_close(share->kfile, MYF(MY_WME));"
    },
    {
        "line": 69,
        "fullcodeline": "share->kfile = -1;"
    },
    {
        "line": 70,
        "fullcodeline": "(void) mysql_file_close(new_file, MYF(MY_WME));"
    },
    {
        "line": 75,
        "fullcodeline": "info->lock_type= F_UNLCK;\t\t\t/* Force mi_readinfo to lock */"
    },
    {
        "line": 76,
        "fullcodeline": "_mi_readinfo(info,F_WRLCK,0);\t\t\t/* Will lock the table */"
    },
    {
        "line": 77,
        "fullcodeline": "info->lock_type=  old_lock;"
    },
    {
        "line": 78,
        "fullcodeline": "share->r_locks=   r_locks;"
    },
    {
        "line": 79,
        "fullcodeline": "share->w_locks=   w_locks;"
    },
    {
        "line": 80,
        "fullcodeline": "share->tot_locks= r_locks+w_locks;"
    },
    {
        "line": 81,
        "fullcodeline": "share->state=     old_state;\t\t\t/* Restore old state */"
    },
    {
        "line": 83,
        "fullcodeline": "info->state->key_file_length=param->new_file_pos;"
    },
    {
        "line": 84,
        "fullcodeline": "info->update= (short) (HA_STATE_CHANGED | HA_STATE_ROW_CHANGED);"
    },
    {
        "line": 90,
        "fullcodeline": "info->s->state.changed&= ~STATE_NOT_SORTED_PAGES;"
    },
    {
        "line": 91,
        "fullcodeline": "DBUG_RETURN(0);"
    },
    {
        "line": 94,
        "fullcodeline": "(void) mysql_file_close(new_file, MYF(MY_WME));"
    },
    {
        "line": 96,
        "fullcodeline": "(void) mysql_file_delete(mi_key_file_datatmp,"
    },
    {
        "line": 98,
        "fullcodeline": "DBUG_RETURN(-1);"
    },
    {
        "line": 14,
        "fullcodeline": "for (key= 0,keyinfo= &share->keyinfo[0]; key < share->base.keys ;"
    },
    {
        "line": 15,
        "fullcodeline": "key++,keyinfo++)"
    },
    {
        "line": 19,
        "fullcodeline": "if (!(param->testflag & T_SILENT))"
    },
    {
        "line": 24,
        "fullcodeline": "if ((new_file= mysql_file_create(mi_key_file_datatmp,"
    },
    {
        "line": 34,
        "fullcodeline": "if (filecopy(param, new_file,share->kfile,0L,"
    },
    {
        "line": 39,
        "fullcodeline": "for (key= 0,keyinfo= &share->keyinfo[0]; key < share->base.keys ;"
    },
    {
        "line": 40,
        "fullcodeline": "key++,keyinfo++)"
    },
    {
        "line": 71,
        "fullcodeline": "if (change_to_newfile(share->index_file_name, MI_NAME_IEXT, INDEX_TMP_EXT,"
    },
    {
        "line": 85,
        "fullcodeline": "for (key=0 ; key < info->s->base.keys ; key++)"
    },
    {
        "line": 86,
        "fullcodeline": "info->s->state.key_root[key]=index_pos[key];"
    },
    {
        "line": 87,
        "fullcodeline": "for (key=0 ; key < info->s->state.header.max_block_size_index ; key++)"
    },
    {
        "line": 88,
        "fullcodeline": "info->s->state.key_del[key]=  HA_OFFSET_ERROR;"
    },
    {
        "line": 16,
        "fullcodeline": "if (keyinfo->key_alg == HA_KEY_ALG_RTREE)"
    },
    {
        "line": 20,
        "fullcodeline": "printf(\"- Sorting index for MyISAM-table '%s'\\n\",name);"
    },
    {
        "line": 30,
        "fullcodeline": "mi_check_print_error(param,\"Can't create new tempfile: '%s'\","
    },
    {
        "line": 32,
        "fullcodeline": "DBUG_RETURN(-1);"
    },
    {
        "line": 73,
        "fullcodeline": "mi_open_keyfile(share))"
    },
    {
        "line": 97,
        "fullcodeline": "param->temp_filename, MYF(MY_WME));"
    },
    {
        "line": 17,
        "fullcodeline": "DBUG_RETURN(0);"
    },
    {
        "line": 42,
        "fullcodeline": "if (! mi_is_key_active(info->s->state.key_map, key))"
    },
    {
        "line": 45,
        "fullcodeline": "if (share->state.key_root[key] != HA_OFFSET_ERROR)"
    },
    {
        "line": 72,
        "fullcodeline": "MYF(0)) ||"
    },
    {
        "line": 25,
        "fullcodeline": "fn_format(param->temp_filename,"
    },
    {
        "line": 28,
        "fullcodeline": "0, param->tmpfile_createflag, MYF(0))) <= 0)"
    },
    {
        "line": 47,
        "fullcodeline": "index_pos[key]=param->new_file_pos;\t/* Write first block here */"
    },
    {
        "line": 27,
        "fullcodeline": "\"\", INDEX_TMP_EXT, 2+4),"
    },
    {
        "line": 48,
        "fullcodeline": "if (sort_one_index(param,info,keyinfo,share->state.key_root[key],"
    },
    {
        "line": 53,
        "fullcodeline": "index_pos[key]= HA_OFFSET_ERROR;\t\t/* No blocks */"
    }
]