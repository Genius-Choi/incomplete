[
    {
        "line": 8,
        "fullcodeline": "MYISAM_SHARE *share=info->s;"
    },
    {
        "line": 9,
        "fullcodeline": "char llbuff[22],llbuff2[22];"
    },
    {
        "line": 12,
        "fullcodeline": "DBUG_ENTER(\"mi_repair\");"
    },
    {
        "line": 14,
        "fullcodeline": "bzero((char *)&sort_info, sizeof(sort_info));"
    },
    {
        "line": 15,
        "fullcodeline": "bzero((char *)&sort_param, sizeof(sort_param));"
    },
    {
        "line": 16,
        "fullcodeline": "start_records=info->state->records;"
    },
    {
        "line": 17,
        "fullcodeline": "new_header_length=(param->testflag & T_UNPACK) ? 0L :"
    },
    {
        "line": 19,
        "fullcodeline": "got_error=1;"
    },
    {
        "line": 20,
        "fullcodeline": "new_file= -1;"
    },
    {
        "line": 21,
        "fullcodeline": "sort_param.sort_info=&sort_info;"
    },
    {
        "line": 28,
        "fullcodeline": "param->testflag|=T_REP; /* for easy checking */"
    },
    {
        "line": 33,
        "fullcodeline": "DBUG_ASSERT(param->use_buffers < SIZE_T_MAX);"
    },
    {
        "line": 51,
        "fullcodeline": "info->opt_flag|=WRITE_CACHE_USED;"
    },
    {
        "line": 85,
        "fullcodeline": "sort_info.info=info;"
    },
    {
        "line": 86,
        "fullcodeline": "sort_info.param = param;"
    },
    {
        "line": 87,
        "fullcodeline": "sort_param.read_cache=param->read_cache;"
    },
    {
        "line": 88,
        "fullcodeline": "sort_param.pos=sort_param.max_pos=share->pack.header_length;"
    },
    {
        "line": 89,
        "fullcodeline": "sort_param.filepos=new_header_length;"
    },
    {
        "line": 90,
        "fullcodeline": "param->read_cache.end_of_file=sort_info.filelength="
    },
    {
        "line": 92,
        "fullcodeline": "sort_info.dupp=0;"
    },
    {
        "line": 93,
        "fullcodeline": "sort_param.fix_datafile= (my_bool) (! rep_quick);"
    },
    {
        "line": 94,
        "fullcodeline": "sort_param.master=1;"
    },
    {
        "line": 95,
        "fullcodeline": "sort_info.max_records= ~(ha_rows) 0;"
    },
    {
        "line": 97,
        "fullcodeline": "set_data_file_type(&sort_info, share);"
    },
    {
        "line": 98,
        "fullcodeline": "del=info->state->del;"
    },
    {
        "line": 99,
        "fullcodeline": "info->state->records=info->state->del=share->state.split=0;"
    },
    {
        "line": 100,
        "fullcodeline": "info->state->empty=0;"
    },
    {
        "line": 101,
        "fullcodeline": "param->glob_crc=0;"
    },
    {
        "line": 105,
        "fullcodeline": "info->update= (short) (HA_STATE_CHANGED | HA_STATE_ROW_CHANGED);"
    },
    {
        "line": 110,
        "fullcodeline": "mi_drop_all_indexes(param, info, TRUE);"
    },
    {
        "line": 112,
        "fullcodeline": "lock_memory(param);\t\t\t/* Everything is alloced */"
    },
    {
        "line": 205,
        "fullcodeline": "got_error=0;"
    },
    {
        "line": 260,
        "fullcodeline": "my_free(mi_get_rec_buff_ptr(info, sort_param.rec_buff));"
    },
    {
        "line": 261,
        "fullcodeline": "my_free(mi_get_rec_buff_ptr(info, sort_param.record));"
    },
    {
        "line": 262,
        "fullcodeline": "my_free(sort_info.buff);"
    },
    {
        "line": 263,
        "fullcodeline": "(void) end_io_cache(&param->read_cache);"
    },
    {
        "line": 264,
        "fullcodeline": "info->opt_flag&= ~(READ_CACHE_USED | WRITE_CACHE_USED);"
    },
    {
        "line": 265,
        "fullcodeline": "(void) end_io_cache(&info->rec_cache);"
    },
    {
        "line": 266,
        "fullcodeline": "got_error|=flush_blocks(param, share->key_cache, share->kfile);"
    },
    {
        "line": 273,
        "fullcodeline": "share->state.changed|= (STATE_NOT_OPTIMIZED_KEYS | STATE_NOT_SORTED_PAGES |"
    },
    {
        "line": 275,
        "fullcodeline": "DBUG_RETURN(got_error);"
    },
    {
        "line": 23,
        "fullcodeline": "if (!(param->testflag & T_SILENT))"
    },
    {
        "line": 30,
        "fullcodeline": "if (info->s->options & (HA_OPTION_CHECKSUM | HA_OPTION_COMPRESS_RECORD))"
    },
    {
        "line": 35,
        "fullcodeline": "if (!param->using_global_keycache)"
    },
    {
        "line": 39,
        "fullcodeline": "if (init_io_cache(&param->read_cache,info->dfile,"
    },
    {
        "line": 46,
        "fullcodeline": "if (!rep_quick)"
    },
    {
        "line": 52,
        "fullcodeline": "if (!mi_alloc_rec_buff(info, -1, &sort_param.record) ||"
    },
    {
        "line": 59,
        "fullcodeline": "if (!rep_quick)"
    },
    {
        "line": 102,
        "fullcodeline": "if (param->testflag & T_CALC_CHECKSUM)"
    },
    {
        "line": 108,
        "fullcodeline": "if (param->testflag & T_CREATE_MISSING_KEYS)"
    },
    {
        "line": 115,
        "fullcodeline": "while (!(error=sort_get_next_record(&sort_param)))"
    },
    {
        "line": 145,
        "fullcodeline": "if (error > 0 || write_data_suffix(&sort_info, (my_bool)!rep_quick) ||"
    },
    {
        "line": 149,
        "fullcodeline": "if (param->testflag & T_WRITE_LOOP)"
    },
    {
        "line": 153,
        "fullcodeline": "if (mysql_file_chsize(share->kfile, info->state->key_file_length, 0, MYF(0)))"
    },
    {
        "line": 161,
        "fullcodeline": "if (rep_quick && del+sort_info.dupp != info->state->del)"
    },
    {
        "line": 170,
        "fullcodeline": "if (param->testflag & T_SAFE_REPAIR)"
    },
    {
        "line": 181,
        "fullcodeline": "if (!rep_quick)"
    },
    {
        "line": 192,
        "fullcodeline": "if (param->testflag & T_CALC_CHECKSUM)"
    },
    {
        "line": 195,
        "fullcodeline": "if (!(param->testflag & T_SILENT))"
    },
    {
        "line": 207,
        "fullcodeline": "if (&share->state.state != info->state)"
    },
    {
        "line": 211,
        "fullcodeline": "if (!got_error)"
    },
    {
        "line": 267,
        "fullcodeline": "if (!got_error && param->testflag & T_UNPACK)"
    },
    {
        "line": 25,
        "fullcodeline": "printf(\"- recovering (with keycache) MyISAM-table '%s'\\n\",name);"
    },
    {
        "line": 26,
        "fullcodeline": "printf(\"Data records: %s\\n\", llstr(info->state->records,llbuff));"
    },
    {
        "line": 31,
        "fullcodeline": "param->testflag|=T_CALC_CHECKSUM;"
    },
    {
        "line": 36,
        "fullcodeline": "(void) init_key_cache(dflt_key_cache, param->key_cache_block_size,"
    },
    {
        "line": 40,
        "fullcodeline": "(uint) param->read_buffer_length,"
    },
    {
        "line": 41,
        "fullcodeline": "READ_CACHE,share->pack.header_length,1,MYF(MY_WME)))"
    },
    {
        "line": 43,
        "fullcodeline": "bzero(&info->rec_cache,sizeof(info->rec_cache));"
    },
    {
        "line": 53,
        "fullcodeline": "!mi_alloc_rec_buff(info, -1, &sort_param.rec_buff))"
    },
    {
        "line": 55,
        "fullcodeline": "mi_check_print_error(param, \"Not enough memory for extra record\");"
    },
    {
        "line": 77,
        "fullcodeline": "info->s->state.dellink= HA_OFFSET_ERROR;"
    },
    {
        "line": 78,
        "fullcodeline": "info->rec_cache.file=new_file;"
    },
    {
        "line": 91,
        "fullcodeline": "mysql_file_seek(info->dfile, 0L, MY_SEEK_END, MYF(0));"
    },
    {
        "line": 103,
        "fullcodeline": "sort_param.calc_checksum= 1;"
    },
    {
        "line": 109,
        "fullcodeline": "mi_set_all_keys_active(share->state.key_map, share->base.keys);"
    },
    {
        "line": 146,
        "fullcodeline": "flush_io_cache(&info->rec_cache) || param->read_cache.error < 0)"
    },
    {
        "line": 151,
        "fullcodeline": "(void) fputs(\"          \\r\",stdout); (void) fflush(stdout);"
    },
    {
        "line": 155,
        "fullcodeline": "mi_check_print_warning(param,"
    },
    {
        "line": 163,
        "fullcodeline": "mi_check_print_error(param,\"Couldn't fix table with quick recovery: Found wrong number of deleted records\");"
    },
    {
        "line": 164,
        "fullcodeline": "mi_check_print_error(param,\"Run recovery again without -q\");"
    },
    {
        "line": 165,
        "fullcodeline": "got_error=1;"
    },
    {
        "line": 166,
        "fullcodeline": "param->retry_repair=1;"
    },
    {
        "line": 167,
        "fullcodeline": "param->testflag|=T_RETRY_WITHOUT_QUICK;"
    },
    {
        "line": 183,
        "fullcodeline": "mysql_file_close(info->dfile, MYF(0));"
    },
    {
        "line": 184,
        "fullcodeline": "info->dfile=new_file;"
    },
    {
        "line": 185,
        "fullcodeline": "info->state->data_file_length=sort_param.filepos;"
    },
    {
        "line": 186,
        "fullcodeline": "share->state.version=(ulong) time((time_t*) 0);\t/* Force reopen */"
    },
    {
        "line": 193,
        "fullcodeline": "info->state->checksum=param->glob_crc;"
    },
    {
        "line": 208,
        "fullcodeline": "memcpy( &share->state.state, info->state, sizeof(*info->state));"
    },
    {
        "line": 258,
        "fullcodeline": "mi_mark_crashed_on_repair(info);"
    },
    {
        "line": 269,
        "fullcodeline": "share->state.header.options[0]&= (uchar) ~HA_OPTION_COMPRESS_RECORD;"
    },
    {
        "line": 270,
        "fullcodeline": "share->pack.header_length=0;"
    },
    {
        "line": 271,
        "fullcodeline": "share->data_file_type=sort_info.new_data_file_type;"
    },
    {
        "line": 47,
        "fullcodeline": "if (init_io_cache(&info->rec_cache,-1,(uint) param->write_buffer_length,"
    },
    {
        "line": 62,
        "fullcodeline": "if ((new_file= mysql_file_create(mi_key_file_datatmp,"
    },
    {
        "line": 73,
        "fullcodeline": "if (new_header_length &&"
    },
    {
        "line": 79,
        "fullcodeline": "if (param->testflag & T_UNPACK)"
    },
    {
        "line": 117,
        "fullcodeline": "if (writekeys(&sort_param))"
    },
    {
        "line": 142,
        "fullcodeline": "if (sort_write_record(&sort_param))"
    },
    {
        "line": 173,
        "fullcodeline": "if (info->state->records+1 < start_records)"
    },
    {
        "line": 190,
        "fullcodeline": "info->state->data_file_length=sort_param.max_pos;"
    },
    {
        "line": 197,
        "fullcodeline": "if (start_records != info->state->records)"
    },
    {
        "line": 214,
        "fullcodeline": "if (new_file >= 0)"
    },
    {
        "line": 248,
        "fullcodeline": "if (! param->error_printed)"
    },
    {
        "line": 251,
        "fullcodeline": "if (new_file >= 0)"
    },
    {
        "line": 49,
        "fullcodeline": "MYF(MY_WME | MY_WAIT_IF_FULL)))"
    },
    {
        "line": 69,
        "fullcodeline": "mi_check_print_error(param,\"Can't create new tempfile: '%s'\","
    },
    {
        "line": 74,
        "fullcodeline": "filecopy(param,new_file,info->dfile,0L,new_header_length,"
    },
    {
        "line": 81,
        "fullcodeline": "share->options&= ~HA_OPTION_COMPRESS_RECORD;"
    },
    {
        "line": 82,
        "fullcodeline": "mi_int2store(share->state.header.options,share->options);"
    },
    {
        "line": 121,
        "fullcodeline": "DBUG_DUMP(\"record\",(uchar*) sort_param.record,share->base.pack_reclength);"
    },
    {
        "line": 122,
        "fullcodeline": "mi_check_print_info(param,\"Duplicate key %2d for record at %10s against new record at %10s\","
    },
    {
        "line": 133,
        "fullcodeline": "sort_info.dupp++;"
    },
    {
        "line": 175,
        "fullcodeline": "info->state->records=start_records;"
    },
    {
        "line": 176,
        "fullcodeline": "got_error=1;"
    },
    {
        "line": 198,
        "fullcodeline": "printf(\"Data records: %s\\n\", llstr(info->state->records,llbuff));"
    },
    {
        "line": 200,
        "fullcodeline": "mi_check_print_warning(param,"
    },
    {
        "line": 216,
        "fullcodeline": "myf flags= 0;"
    },
    {
        "line": 221,
        "fullcodeline": "mysql_file_close(new_file, MYF(0));"
    },
    {
        "line": 222,
        "fullcodeline": "info->dfile=new_file= -1;"
    },
    {
        "line": 243,
        "fullcodeline": "param->retry_repair= 0;"
    },
    {
        "line": 249,
        "fullcodeline": "mi_check_print_error(param,\"%d for record at pos %s\",my_errno,"
    },
    {
        "line": 253,
        "fullcodeline": "(void) mysql_file_close(new_file, MYF(0));"
    },
    {
        "line": 254,
        "fullcodeline": "(void) mysql_file_delete(mi_key_file_datatmp,"
    },
    {
        "line": 256,
        "fullcodeline": "info->rec_cache.file=-1; /* don't flush data to new_file, it's closed */"
    },
    {
        "line": 119,
        "fullcodeline": "if (my_errno != HA_ERR_FOUND_DUPP_KEY)"
    },
    {
        "line": 123,
        "fullcodeline": "info->errkey+1,"
    },
    {
        "line": 124,
        "fullcodeline": "llstr(sort_param.start_recpos,llbuff),"
    },
    {
        "line": 125,
        "fullcodeline": "llstr(info->dupp_key_pos,llbuff2));"
    },
    {
        "line": 126,
        "fullcodeline": "if (param->testflag & T_VERBOSE)"
    },
    {
        "line": 134,
        "fullcodeline": "if ((param->testflag & (T_FORCE_UNIQUENESS|T_QUICK)) == T_QUICK)"
    },
    {
        "line": 202,
        "fullcodeline": "llstr(sort_info.dupp,llbuff));"
    },
    {
        "line": 217,
        "fullcodeline": "if (param->testflag & T_BACKUP_DATA)"
    },
    {
        "line": 238,
        "fullcodeline": "if (change_to_newfile(share->data_file_name, MI_NAME_DEXT, DATA_TMP_EXT,"
    },
    {
        "line": 250,
        "fullcodeline": "llstr(sort_param.start_recpos,llbuff));"
    },
    {
        "line": 63,
        "fullcodeline": "fn_format(param->temp_filename,"
    },
    {
        "line": 67,
        "fullcodeline": "MYF(0))) < 0)"
    },
    {
        "line": 128,
        "fullcodeline": "(void) _mi_make_key(info,(uint) info->errkey,info->lastkey,"
    },
    {
        "line": 130,
        "fullcodeline": "_mi_print_key(stdout,share->keyinfo[info->errkey].seg,info->lastkey,"
    },
    {
        "line": 136,
        "fullcodeline": "param->testflag|=T_RETRY_WITHOUT_QUICK;"
    },
    {
        "line": 137,
        "fullcodeline": "param->error_printed=1;"
    },
    {
        "line": 218,
        "fullcodeline": "flags |= MY_REDEL_MAKE_BACKUP;"
    },
    {
        "line": 220,
        "fullcodeline": "flags |= MY_REDEL_NO_COPY_STAT;"
    },
    {
        "line": 234,
        "fullcodeline": "(void) my_munmap((char*) info->s->file_map,"
    },
    {
        "line": 236,
        "fullcodeline": "info->s->file_map= NULL;"
    },
    {
        "line": 240,
        "fullcodeline": "mi_open_datafile(info,share,name,-1))"
    },
    {
        "line": 241,
        "fullcodeline": "got_error=1;"
    },
    {
        "line": 255,
        "fullcodeline": "param->temp_filename, MYF(MY_WME));"
    },
    {
        "line": 235,
        "fullcodeline": "(size_t) info->s->mmaped_length);"
    }
]