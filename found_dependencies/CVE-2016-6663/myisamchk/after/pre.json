[
    {
        "line": 4,
        "fullcodeline": "int rep_quick= param->testflag & (T_QUICK | T_FORCE_UNIQUENESS);"
    },
    {
        "line": 7,
        "fullcodeline": "char llbuff[22],llbuff2[22];"
    },
    {
        "line": 8,
        "fullcodeline": "my_bool state_updated=0;"
    },
    {
        "line": 10,
        "fullcodeline": "DBUG_ENTER(\"myisamchk\");"
    },
    {
        "line": 12,
        "fullcodeline": "param->out_flag=error=param->warning_printed=param->error_printed="
    },
    {
        "line": 14,
        "fullcodeline": "datafile=0;"
    },
    {
        "line": 15,
        "fullcodeline": "param->isam_file_name=filename;\t\t/* For error messages */"
    },
    {
        "line": 62,
        "fullcodeline": "share=info->s;"
    },
    {
        "line": 63,
        "fullcodeline": "share->options&= ~HA_OPTION_READ_ONLY_DATA; /* We are modifing it */"
    },
    {
        "line": 64,
        "fullcodeline": "share->tot_locks-= share->r_locks;"
    },
    {
        "line": 65,
        "fullcodeline": "share->r_locks=0;"
    },
    {
        "line": 358,
        "fullcodeline": "mi_lock_database(info, F_UNLCK);"
    },
    {
        "line": 16,
        "fullcodeline": "if (!(info=mi_open(filename,"
    },
    {
        "line": 72,
        "fullcodeline": "if (param->testflag & (T_FAST | T_CHECK_ONLY_CHANGED))"
    },
    {
        "line": 111,
        "fullcodeline": "if ((param->testflag & (T_REP_ANY | T_STATISTICS |"
    },
    {
        "line": 149,
        "fullcodeline": "if (param->testflag & T_DESCRIPT)"
    },
    {
        "line": 365,
        "fullcodeline": "if (error == 0)"
    },
    {
        "line": 374,
        "fullcodeline": "(void) fflush(stdout); (void) fflush(stderr);"
    },
    {
        "line": 397,
        "fullcodeline": "(void) fflush(stderr);"
    },
    {
        "line": 26,
        "fullcodeline": "param->error_printed=1;"
    },
    {
        "line": 60,
        "fullcodeline": "DBUG_RETURN(1);"
    },
    {
        "line": 74,
        "fullcodeline": "my_bool need_to_check= mi_is_crashed(info) || share->state.open_count != 0;"
    },
    {
        "line": 113,
        "fullcodeline": "(((param->testflag & T_UNPACK) &&"
    },
    {
        "line": 136,
        "fullcodeline": "recreate=1;"
    },
    {
        "line": 144,
        "fullcodeline": "share=info->s;"
    },
    {
        "line": 151,
        "fullcodeline": "param->total_files++;"
    },
    {
        "line": 152,
        "fullcodeline": "param->total_records+=info->state->records;"
    },
    {
        "line": 153,
        "fullcodeline": "param->total_deleted+=info->state->del;"
    },
    {
        "line": 154,
        "fullcodeline": "descript(param, info, filename);"
    },
    {
        "line": 340,
        "fullcodeline": "if ((param->testflag & T_AUTO_INC) ||"
    },
    {
        "line": 341,
        "fullcodeline": "((param->testflag & T_REP_ANY) && info->s->base.auto_key))"
    },
    {
        "line": 342,
        "fullcodeline": "update_auto_increment_key(param, info,"
    },
    {
        "line": 345,
        "fullcodeline": "if (!(param->testflag & T_DESCRIPT))"
    },
    {
        "line": 356,
        "fullcodeline": "info->update&= ~HA_STATE_CHANGED;"
    },
    {
        "line": 362,
        "fullcodeline": "mi_check_print_error(param,\"%d when closing MyISAM-table '%s'\",my_errno,filename);"
    },
    {
        "line": 76,
        "fullcodeline": "if ((param->testflag & (T_REP_ANY | T_SORT_RECORDS)) &&"
    },
    {
        "line": 82,
        "fullcodeline": "if (info->s->base.keys && info->state->records)"
    },
    {
        "line": 94,
        "fullcodeline": "if ((param->testflag & T_CHECK_ONLY_CHANGED) &&"
    },
    {
        "line": 98,
        "fullcodeline": "if (!need_to_check)"
    },
    {
        "line": 125,
        "fullcodeline": "myisam_block_size != MI_KEY_BLOCK_LENGTH))"
    },
    {
        "line": 129,
        "fullcodeline": "if (recreate_table(param, &info,filename))"
    },
    {
        "line": 179,
        "fullcodeline": "mi_lock_database(info, F_EXTRA_LCK);"
    },
    {
        "line": 180,
        "fullcodeline": "datafile=info->dfile;"
    },
    {
        "line": 355,
        "fullcodeline": "(void) lock_file(param, share->kfile,0L,F_UNLCK,\"indexfile\",filename);"
    },
    {
        "line": 367,
        "fullcodeline": "if (param->out_flag & O_NEW_DATA)"
    },
    {
        "line": 371,
        "fullcodeline": "if (param->out_flag & O_NEW_INDEX)"
    },
    {
        "line": 377,
        "fullcodeline": "if (param->testflag & (T_REP_ANY | T_SORT_RECORDS | T_SORT_INDEX))"
    },
    {
        "line": 13,
        "fullcodeline": "recreate=0;"
    },
    {
        "line": 17,
        "fullcodeline": "(param->testflag & (T_DESCRIPT | T_READONLY)) ?"
    },
    {
        "line": 19,
        "fullcodeline": "HA_OPEN_FOR_REPAIR |"
    },
    {
        "line": 29,
        "fullcodeline": "mi_check_print_error(param,\"'%s' doesn't have a correct index definition. You need to recreate it before you can do a repair\",filename);"
    },
    {
        "line": 32,
        "fullcodeline": "mi_check_print_error(param,\"'%s' is not a MyISAM-table\",filename);"
    },
    {
        "line": 35,
        "fullcodeline": "mi_check_print_error(param,\"'%s' is marked as crashed\",filename);"
    },
    {
        "line": 38,
        "fullcodeline": "mi_check_print_error(param,\"'%s' is marked as crashed after last repair\",filename);"
    },
    {
        "line": 41,
        "fullcodeline": "mi_check_print_error(param,\"'%s' is an old type of MyISAM-table\", filename);"
    },
    {
        "line": 44,
        "fullcodeline": "mi_check_print_error(param,\"Couldn't read complete header from '%s'\", filename);"
    },
    {
        "line": 47,
        "fullcodeline": "mi_check_print_error(param,\"'%s' is locked. Use -w to wait until unlocked\",filename);"
    },
    {
        "line": 50,
        "fullcodeline": "mi_check_print_error(param,\"File '%s' doesn't exist\",filename);"
    },
    {
        "line": 53,
        "fullcodeline": "mi_check_print_error(param,\"You don't have permission to use '%s'\",filename);"
    },
    {
        "line": 56,
        "fullcodeline": "mi_check_print_error(param,\"%d when opening MyISAM-table '%s'\","
    },
    {
        "line": 77,
        "fullcodeline": "((share->state.changed & (STATE_CHANGED | STATE_CRASHED |"
    },
    {
        "line": 80,
        "fullcodeline": "need_to_check=1;"
    },
    {
        "line": 95,
        "fullcodeline": "(share->state.changed & (STATE_CHANGED | STATE_CRASHED |"
    },
    {
        "line": 97,
        "fullcodeline": "need_to_check=1;"
    },
    {
        "line": 108,
        "fullcodeline": "DBUG_RETURN(0);"
    },
    {
        "line": 123,
        "fullcodeline": "(set_collation &&"
    },
    {
        "line": 128,
        "fullcodeline": "param->language= set_collation->number;"
    },
    {
        "line": 131,
        "fullcodeline": "(void) fprintf(stderr,"
    },
    {
        "line": 137,
        "fullcodeline": "if (!(param->testflag & T_REP_ANY))"
    },
    {
        "line": 139,
        "fullcodeline": "param->testflag|=T_REP_BY_SORT;\t\t/* if only STATISTICS */"
    },
    {
        "line": 142,
        "fullcodeline": "rep_quick|=T_QUICK;"
    },
    {
        "line": 165,
        "fullcodeline": "if (info->lock_type == F_RDLCK)"
    },
    {
        "line": 167,
        "fullcodeline": "if (_mi_readinfo(info,lock_type,0))"
    },
    {
        "line": 182,
        "fullcodeline": "if (param->testflag & (T_REP_ANY | T_SORT_RECORDS | T_SORT_INDEX))"
    },
    {
        "line": 343,
        "fullcodeline": "(my_bool) !test(param->testflag & T_AUTO_INC));"
    },
    {
        "line": 347,
        "fullcodeline": "if (info->update & HA_STATE_CHANGED && ! (param->testflag & T_READONLY))"
    },
    {
        "line": 348,
        "fullcodeline": "error|=update_state_info(param, info,"
    },
    {
        "line": 368,
        "fullcodeline": "error|=change_to_newfile(filename,MI_NAME_DEXT,DATA_TMP_EXT,"
    },
    {
        "line": 372,
        "fullcodeline": "error|=change_to_newfile(filename, MI_NAME_IEXT, INDEX_TMP_EXT, MYF(0));"
    },
    {
        "line": 20,
        "fullcodeline": "((param->testflag & T_WAIT_FOREVER) ?"
    },
    {
        "line": 79,
        "fullcodeline": "!(param->testflag & T_CHECK_ONLY_CHANGED))))"
    },
    {
        "line": 84,
        "fullcodeline": "if ((param->testflag & T_STATISTICS) &&"
    },
    {
        "line": 87,
        "fullcodeline": "if ((param->testflag & T_SORT_INDEX) &&"
    },
    {
        "line": 90,
        "fullcodeline": "if ((param->testflag & T_REP_BY_SORT) &&"
    },
    {
        "line": 100,
        "fullcodeline": "if (!(param->testflag & T_SILENT) || param->testflag & T_INFO)"
    },
    {
        "line": 102,
        "fullcodeline": "if (mi_close(info))"
    },
    {
        "line": 122,
        "fullcodeline": "info->s->state.header.file_version[3] != myisam_file_magic[3] ||"
    },
    {
        "line": 124,
        "fullcodeline": "set_collation->number != share->state.header.language) ||"
    },
    {
        "line": 134,
        "fullcodeline": "return(-1);"
    },
    {
        "line": 158,
        "fullcodeline": "if (!stopwords_inited++)"
    },
    {
        "line": 161,
        "fullcodeline": "if (!(param->testflag & T_READONLY))"
    },
    {
        "line": 162,
        "fullcodeline": "lock_type = F_WRLCK;\t\t\t/* table is changed */"
    },
    {
        "line": 166,
        "fullcodeline": "info->lock_type=F_UNLCK;\t\t\t/* Read only table */"
    },
    {
        "line": 169,
        "fullcodeline": "mi_check_print_error(param,\"Can't lock indexfile of '%s', error: %d\","
    },
    {
        "line": 171,
        "fullcodeline": "param->error_printed=0;"
    },
    {
        "line": 379,
        "fullcodeline": "(void) fprintf(stderr,"
    },
    {
        "line": 393,
        "fullcodeline": "! (param->testflag & (T_REP_ANY | T_SORT_RECORDS | T_SORT_INDEX |"
    },
    {
        "line": 22,
        "fullcodeline": "(param->testflag & T_DESCRIPT) ?"
    },
    {
        "line": 85,
        "fullcodeline": "(share->state.changed & STATE_NOT_ANALYZED))"
    },
    {
        "line": 86,
        "fullcodeline": "need_to_check=1;"
    },
    {
        "line": 88,
        "fullcodeline": "(share->state.changed & STATE_NOT_SORTED_PAGES))"
    },
    {
        "line": 89,
        "fullcodeline": "need_to_check=1;"
    },
    {
        "line": 91,
        "fullcodeline": "(share->state.changed & STATE_NOT_OPTIMIZED_KEYS))"
    },
    {
        "line": 92,
        "fullcodeline": "need_to_check=1;"
    },
    {
        "line": 101,
        "fullcodeline": "printf(\"MyISAM file: %s is already checked\\n\",filename);"
    },
    {
        "line": 104,
        "fullcodeline": "mi_check_print_error(param,\"%d when closing MyISAM-table '%s'\","
    },
    {
        "line": 106,
        "fullcodeline": "DBUG_RETURN(1);"
    },
    {
        "line": 121,
        "fullcodeline": "test_if_almost_full(info) ||"
    },
    {
        "line": 140,
        "fullcodeline": "if (!(param->testflag & T_SILENT))"
    },
    {
        "line": 141,
        "fullcodeline": "printf(\"- '%s' has old table-format. Recreating index\\n\",filename);"
    },
    {
        "line": 164,
        "fullcodeline": "lock_type= F_RDLCK;"
    },
    {
        "line": 184,
        "fullcodeline": "if (param->testflag & T_REP_ANY)"
    },
    {
        "line": 192,
        "fullcodeline": "if (rep_quick && chk_del(param, info, param->testflag & ~T_VERBOSE))"
    },
    {
        "line": 206,
        "fullcodeline": "if (!error)"
    },
    {
        "line": 272,
        "fullcodeline": "if (!error)"
    },
    {
        "line": 349,
        "fullcodeline": "UPDATE_OPEN_COUNT |"
    },
    {
        "line": 395,
        "fullcodeline": "(void) fprintf(stderr, \"MyISAM-table '%s' is usable but should be fixed\\n\","
    },
    {
        "line": 119,
        "fullcodeline": "mi_is_any_intersect_keys_active(param->keys_in_use, share->base.keys,"
    },
    {
        "line": 186,
        "fullcodeline": "ulonglong tmp=share->state.key_map;"
    },
    {
        "line": 187,
        "fullcodeline": "mi_copy_keys_active(share->state.key_map, share->base.keys,"
    },
    {
        "line": 228,
        "fullcodeline": "if (!error && param->testflag & T_SORT_RECORDS)"
    },
    {
        "line": 270,
        "fullcodeline": "if (!error && param->testflag & T_SORT_INDEX)"
    },
    {
        "line": 271,
        "fullcodeline": "error= mi_sort_index(param, info, filename, FALSE);"
    },
    {
        "line": 350,
        "fullcodeline": "(((param->testflag & T_REP_ANY) ?"
    },
    {
        "line": 369,
        "fullcodeline": "((param->testflag & T_BACKUP_DATA) ?"
    },
    {
        "line": 370,
        "fullcodeline": "MYF(MY_REDEL_MAKE_BACKUP) : MYF(0)));"
    },
    {
        "line": 383,
        "fullcodeline": "(void) fprintf(stderr,"
    },
    {
        "line": 386,
        "fullcodeline": "else if (!(param->error_printed & 2) &&"
    },
    {
        "line": 387,
        "fullcodeline": "!(param->testflag & T_FORCE_CREATE))"
    },
    {
        "line": 117,
        "fullcodeline": "mi_uint2korr(share->state.header.base_info_length) !="
    },
    {
        "line": 120,
        "fullcodeline": "~share->state.key_map) ||"
    },
    {
        "line": 189,
        "fullcodeline": "if (tmp != share->state.key_map)"
    },
    {
        "line": 194,
        "fullcodeline": "if (param->testflag & T_FORCE_CREATE)"
    },
    {
        "line": 235,
        "fullcodeline": "if (param->out_flag & O_NEW_DATA)"
    },
    {
        "line": 245,
        "fullcodeline": "if (! error)"
    },
    {
        "line": 273,
        "fullcodeline": "share->state.changed&= ~(STATE_CHANGED | STATE_CRASHED |"
    },
    {
        "line": 276,
        "fullcodeline": "mi_mark_crashed(info);"
    },
    {
        "line": 278,
        "fullcodeline": "else if ((param->testflag & T_CHECK) || !(param->testflag & T_AUTO_INC))"
    },
    {
        "line": 287,
        "fullcodeline": "mi_intersect_keys_active(share->state.key_map, param->keys_in_use);"
    },
    {
        "line": 288,
        "fullcodeline": "error =chk_size(param,info);"
    },
    {
        "line": 353,
        "fullcodeline": "((param->testflag & T_SORT_RECORDS) ?"
    },
    {
        "line": 388,
        "fullcodeline": "(void) fprintf(stderr,"
    },
    {
        "line": 115,
        "fullcodeline": "mi_uint2korr(share->state.header.state_info_length) !="
    },
    {
        "line": 190,
        "fullcodeline": "info->update|=HA_STATE_CHANGED;"
    },
    {
        "line": 196,
        "fullcodeline": "rep_quick=0;"
    },
    {
        "line": 197,
        "fullcodeline": "mi_check_print_info(param,\"Creating new data file\\n\");"
    },
    {
        "line": 208,
        "fullcodeline": "if ((param->testflag & (T_REP_BY_SORT | T_REP_PARALLEL)) &&"
    },
    {
        "line": 211,
        "fullcodeline": "mi_test_if_sort_rep(info, info->state->records,"
    },
    {
        "line": 238,
        "fullcodeline": "error|=change_to_newfile(filename, MI_NAME_DEXT, DATA_TMP_EXT, MYF(0));"
    },
    {
        "line": 241,
        "fullcodeline": "param->out_flag&= ~O_NEW_DATA; /* We are using new datafile */"
    },
    {
        "line": 252,
        "fullcodeline": "my_bool update_index=1;"
    },
    {
        "line": 257,
        "fullcodeline": "error=mi_sort_records(param,info,filename,param->opt_sort_key,"
    },
    {
        "line": 286,
        "fullcodeline": "error =chk_status(param,info);"
    },
    {
        "line": 289,
        "fullcodeline": "if (!error || !(param->testflag & (T_FAST | T_FORCE_CREATE)))"
    },
    {
        "line": 291,
        "fullcodeline": "if ((!error || (!(param->testflag & (T_FAST | T_FORCE_CREATE)) &&"
    },
    {
        "line": 324,
        "fullcodeline": "if (!error)"
    },
    {
        "line": 114,
        "fullcodeline": "share->data_file_type == COMPRESSED_RECORD) ||"
    },
    {
        "line": 201,
        "fullcodeline": "error=1;"
    },
    {
        "line": 202,
        "fullcodeline": "mi_check_print_error(param,"
    },
    {
        "line": 209,
        "fullcodeline": "(mi_is_any_key_active(share->state.key_map) ||"
    },
    {
        "line": 219,
        "fullcodeline": "if (param->testflag & T_REP_BY_SORT)"
    },
    {
        "line": 237,
        "fullcodeline": "(void) my_close(info->dfile,MYF(MY_WME)); /* Close new file */"
    },
    {
        "line": 239,
        "fullcodeline": "if (mi_open_datafile(info,info->s, NULL, -1))"
    },
    {
        "line": 253,
        "fullcodeline": "for (key=0 ; key < share->base.keys; key++)"
    },
    {
        "line": 280,
        "fullcodeline": "if (!(param->testflag & T_SILENT) || param->testflag & T_INFO)"
    },
    {
        "line": 281,
        "fullcodeline": "printf(\"Checking MyISAM file: %s\\n\",filename);"
    },
    {
        "line": 282,
        "fullcodeline": "if (!(param->testflag & T_SILENT))"
    },
    {
        "line": 290,
        "fullcodeline": "error|=chk_del(param, info,param->testflag);"
    },
    {
        "line": 294,
        "fullcodeline": "error|=chk_key(param, info);"
    },
    {
        "line": 302,
        "fullcodeline": "if ((!rep_quick && !error) ||"
    },
    {
        "line": 303,
        "fullcodeline": "!(param->testflag & (T_FAST | T_FORCE_CREATE)))"
    },
    {
        "line": 316,
        "fullcodeline": "lock_memory(param);"
    },
    {
        "line": 321,
        "fullcodeline": "error|=flush_blocks(param, share->key_cache, share->kfile);"
    },
    {
        "line": 210,
        "fullcodeline": "(rep_quick && !param->keys_in_use && !recreate)) &&"
    },
    {
        "line": 220,
        "fullcodeline": "error= mi_repair_by_sort(param, info, filename, rep_quick, FALSE);"
    },
    {
        "line": 225,
        "fullcodeline": "else if (param->testflag & T_REP_ANY)"
    },
    {
        "line": 240,
        "fullcodeline": "error=1;"
    },
    {
        "line": 262,
        "fullcodeline": "if (!error && !update_index)"
    },
    {
        "line": 266,
        "fullcodeline": "error= mi_repair_by_sort(param, info, filename, 1, FALSE);"
    },
    {
        "line": 284,
        "fullcodeline": "llstr(info->state->records,llbuff),"
    },
    {
        "line": 285,
        "fullcodeline": "llstr(info->state->del,llbuff2));"
    },
    {
        "line": 292,
        "fullcodeline": "!param->start_check_pos)))"
    },
    {
        "line": 295,
        "fullcodeline": "if (!error && (param->testflag & (T_STATISTICS | T_AUTO_INC)))"
    },
    {
        "line": 305,
        "fullcodeline": "if (param->testflag & (T_EXTEND | T_MEDIUM))"
    },
    {
        "line": 308,
        "fullcodeline": "(void) init_io_cache(&param->read_cache,datafile,"
    },
    {
        "line": 322,
        "fullcodeline": "(void) end_io_cache(&param->read_cache);"
    },
    {
        "line": 329,
        "fullcodeline": "share->state.changed&= ~(STATE_CHANGED | STATE_CRASHED |"
    },
    {
        "line": 222,
        "fullcodeline": "error= mi_repair_parallel(param, info, filename, rep_quick, FALSE);"
    },
    {
        "line": 226,
        "fullcodeline": "error= mi_repair(param, info, filename, rep_quick, FALSE);"
    },
    {
        "line": 254,
        "fullcodeline": "if (share->keyinfo[key].flag & (HA_BINARY_PACK_KEY|HA_FULLTEXT))"
    },
    {
        "line": 255,
        "fullcodeline": "update_index=0;"
    },
    {
        "line": 259,
        "fullcodeline": "(my_bool) !(param->testflag & T_REP),"
    },
    {
        "line": 296,
        "fullcodeline": "error=update_state_info(param, info,"
    },
    {
        "line": 315,
        "fullcodeline": "MYF(MY_WME));"
    },
    {
        "line": 317,
        "fullcodeline": "if ((info->s->options & (HA_OPTION_PACK_RECORD |"
    },
    {
        "line": 319,
        "fullcodeline": "(param->testflag & (T_EXTEND | T_MEDIUM)))"
    },
    {
        "line": 320,
        "fullcodeline": "error|=chk_data_link(param, info, param->testflag & T_EXTEND);"
    },
    {
        "line": 326,
        "fullcodeline": "if ((share->state.changed & STATE_CHANGED) &&"
    },
    {
        "line": 327,
        "fullcodeline": "(param->testflag & T_UPDATE_STATE))"
    },
    {
        "line": 328,
        "fullcodeline": "info->update|=HA_STATE_CHANGED | HA_STATE_ROW_CHANGED;"
    },
    {
        "line": 306,
        "fullcodeline": "(void) init_key_cache(dflt_key_cache,opt_key_cache_block_size,"
    },
    {
        "line": 332,
        "fullcodeline": "else if (!mi_is_crashed(info) &&"
    },
    {
        "line": 333,
        "fullcodeline": "(param->testflag & T_UPDATE_STATE))"
    },
    {
        "line": 335,
        "fullcodeline": "mi_mark_crashed(info);"
    },
    {
        "line": 336,
        "fullcodeline": "info->update|=HA_STATE_CHANGED | HA_STATE_ROW_CHANGED;"
    },
    {
        "line": 297,
        "fullcodeline": "((param->testflag & T_STATISTICS) ?"
    },
    {
        "line": 299,
        "fullcodeline": "((param->testflag & T_AUTO_INC) ?"
    }
]