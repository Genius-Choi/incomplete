[
    {
        "line": 10,
        "fullcodeline": "krb5_context context = ctx->k5_context;"
    },
    {
        "line": 19,
        "fullcodeline": "header = kg_locate_header_iov(iov, iov_count, toktype);"
    },
    {
        "line": 25,
        "fullcodeline": "padding = kg_locate_iov(iov, iov_count, GSS_IOV_BUFFER_TYPE_PADDING);"
    },
    {
        "line": 26,
        "fullcodeline": "trailer = kg_locate_iov(iov, iov_count, GSS_IOV_BUFFER_TYPE_TRAILER);"
    },
    {
        "line": 46,
        "fullcodeline": "code = g_verify_token_header(ctx->mech_used,"
    },
    {
        "line": 59,
        "fullcodeline": "toktype2 = load_16_be(ptr);"
    },
    {
        "line": 61,
        "fullcodeline": "ptr += 2;"
    },
    {
        "line": 62,
        "fullcodeline": "bodysize -= 2;"
    },
    {
        "line": 20,
        "fullcodeline": "if (header == NULL) {"
    },
    {
        "line": 31,
        "fullcodeline": "if ((ctx->gss_flags & GSS_C_DCE_STYLE) == 0 &&"
    },
    {
        "line": 49,
        "fullcodeline": "if (code != 0) {"
    },
    {
        "line": 54,
        "fullcodeline": "if (bodysize < 2) {"
    },
    {
        "line": 84,
        "fullcodeline": "if (code != 0)"
    },
    {
        "line": 21,
        "fullcodeline": "*minor_status = EINVAL;"
    },
    {
        "line": 32,
        "fullcodeline": "toktype == KG_TOK_WRAP_MSG) {"
    },
    {
        "line": 35,
        "fullcodeline": "kg_iov_msglen(iov, iov_count, &data_length, &assoc_data_length);"
    },
    {
        "line": 37,
        "fullcodeline": "input_length += data_length - assoc_data_length;"
    },
    {
        "line": 47,
        "fullcodeline": "&bodysize, &ptr, -1,"
    },
    {
        "line": 50,
        "fullcodeline": "*minor_status = code;"
    },
    {
        "line": 55,
        "fullcodeline": "*minor_status = (OM_uint32)G_BAD_TOK_HEADER;"
    },
    {
        "line": 68,
        "fullcodeline": "code = gss_krb5int_unseal_v3_iov(context, minor_status, ctx, iov, iov_count,"
    },
    {
        "line": 74,
        "fullcodeline": "code = kg_unseal_v1_iov(context, minor_status, ctx, iov, iov_count,"
    },
    {
        "line": 79,
        "fullcodeline": "*minor_status = (OM_uint32)G_BAD_TOK_HEADER;"
    },
    {
        "line": 80,
        "fullcodeline": "code = GSS_S_DEFECTIVE_TOKEN;"
    },
    {
        "line": 85,
        "fullcodeline": "save_error_info(*minor_status, context);"
    },
    {
        "line": 39,
        "fullcodeline": "if (padding != NULL)"
    },
    {
        "line": 42,
        "fullcodeline": "if (trailer != NULL)"
    },
    {
        "line": 40,
        "fullcodeline": "input_length += padding->buffer.length;"
    },
    {
        "line": 43,
        "fullcodeline": "input_length += trailer->buffer.length;"
    },
    {
        "line": 75,
        "fullcodeline": "(size_t)(ptr - (unsigned char *)header->buffer.value),"
    }
]