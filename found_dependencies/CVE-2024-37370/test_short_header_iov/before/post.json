[
    {
        "line": 4,
        "fullcodeline": "unsigned char tokbuf[128];"
    },
    {
        "line": 8,
        "fullcodeline": "store_16_be(KG_TOK_SEAL_MSG, tokbuf);"
    },
    {
        "line": 9,
        "fullcodeline": "store_16_le(test->signalg, tokbuf + 2);"
    },
    {
        "line": 10,
        "fullcodeline": "store_16_le(test->sealalg, tokbuf + 4);"
    },
    {
        "line": 11,
        "fullcodeline": "store_16_be(0xFFFF, tokbuf + 6);"
    },
    {
        "line": 12,
        "fullcodeline": "memset(tokbuf + 8, 0, 8);"
    },
    {
        "line": 13,
        "fullcodeline": "iov.type = GSS_IOV_BUFFER_TYPE_HEADER;"
    },
    {
        "line": 14,
        "fullcodeline": "make_token(tokbuf, 16, &iov.buffer);"
    },
    {
        "line": 15,
        "fullcodeline": "major = gss_unwrap_iov(&minor, ctx, NULL, NULL, &iov, 1);"
    },
    {
        "line": 21,
        "fullcodeline": "store_16_be(KG_TOK_SIGN_MSG, tokbuf);"
    },
    {
        "line": 22,
        "fullcodeline": "store_16_le(test->signalg, tokbuf + 2);"
    },
    {
        "line": 23,
        "fullcodeline": "store_16_le(SEAL_ALG_NONE, tokbuf + 4);"
    },
    {
        "line": 24,
        "fullcodeline": "store_16_le(0xFFFF, tokbuf + 6);"
    },
    {
        "line": 25,
        "fullcodeline": "memset(tokbuf + 8, 0, 8);"
    },
    {
        "line": 26,
        "fullcodeline": "iov.type = GSS_IOV_BUFFER_TYPE_HEADER;"
    },
    {
        "line": 27,
        "fullcodeline": "make_token(tokbuf, 16, &iov.buffer);"
    },
    {
        "line": 28,
        "fullcodeline": "major = gss_unwrap_iov(&minor, ctx, NULL, NULL, &iov, 1);"
    },
    {
        "line": 31,
        "fullcodeline": "free(iov.buffer.value);"
    },
    {
        "line": 34,
        "fullcodeline": "store_16_be(KG_TOK_MIC_MSG, tokbuf);"
    },
    {
        "line": 35,
        "fullcodeline": "store_16_be(test->signalg, tokbuf + 2);"
    },
    {
        "line": 36,
        "fullcodeline": "store_16_le(SEAL_ALG_NONE, tokbuf + 4);"
    },
    {
        "line": 37,
        "fullcodeline": "store_16_le(0xFFFF, tokbuf + 6);"
    },
    {
        "line": 38,
        "fullcodeline": "memset(tokbuf + 8, 0, 8);"
    },
    {
        "line": 39,
        "fullcodeline": "iov.type = GSS_IOV_BUFFER_TYPE_MIC_TOKEN;"
    },
    {
        "line": 40,
        "fullcodeline": "make_token(tokbuf, 16, &iov.buffer);"
    },
    {
        "line": 41,
        "fullcodeline": "major = gss_verify_mic_iov(&minor, ctx, NULL, &iov, 1);"
    },
    {
        "line": 44,
        "fullcodeline": "free(iov.buffer.value);"
    },
    {
        "line": 16,
        "fullcodeline": "if (major != GSS_S_DEFECTIVE_TOKEN)"
    },
    {
        "line": 29,
        "fullcodeline": "if (major != GSS_S_DEFECTIVE_TOKEN)"
    },
    {
        "line": 42,
        "fullcodeline": "if (major != GSS_S_DEFECTIVE_TOKEN)"
    },
    {
        "line": 17,
        "fullcodeline": "abort();"
    },
    {
        "line": 30,
        "fullcodeline": "abort();"
    },
    {
        "line": 43,
        "fullcodeline": "abort();"
    }
]