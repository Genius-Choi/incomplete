[
    {
        "line": 11,
        "fullcodeline": "memset(&dio, 0, sizeof(dio));"
    },
    {
        "line": 14,
        "fullcodeline": "dio.dag_intdoubl = RPL_DIO_INTERVAL_DOUBLINGS;"
    },
    {
        "line": 15,
        "fullcodeline": "dio.dag_intmin = RPL_DIO_INTERVAL_MIN;"
    },
    {
        "line": 16,
        "fullcodeline": "dio.dag_redund = RPL_DIO_REDUNDANCY;"
    },
    {
        "line": 17,
        "fullcodeline": "dio.dag_min_hoprankinc = RPL_MIN_HOPRANKINC;"
    },
    {
        "line": 18,
        "fullcodeline": "dio.dag_max_rankinc = RPL_MAX_RANKINC;"
    },
    {
        "line": 19,
        "fullcodeline": "dio.ocp = RPL_OF_OCP;"
    },
    {
        "line": 20,
        "fullcodeline": "dio.default_lifetime = RPL_DEFAULT_LIFETIME;"
    },
    {
        "line": 21,
        "fullcodeline": "dio.lifetime_unit = RPL_DEFAULT_LIFETIME_UNIT;"
    },
    {
        "line": 23,
        "fullcodeline": "uip_ipaddr_copy(&from, &UIP_IP_BUF->srcipaddr);"
    },
    {
        "line": 26,
        "fullcodeline": "LOG_INFO(\"Received a DIO from \");"
    },
    {
        "line": 27,
        "fullcodeline": "LOG_INFO_6ADDR(&from);"
    },
    {
        "line": 28,
        "fullcodeline": "LOG_INFO_(\"\\n\");"
    },
    {
        "line": 30,
        "fullcodeline": "buffer_length = uip_len - uip_l3_icmp_hdr_len;"
    },
    {
        "line": 33,
        "fullcodeline": "i = 0;"
    },
    {
        "line": 34,
        "fullcodeline": "buffer = UIP_ICMP_PAYLOAD;"
    },
    {
        "line": 36,
        "fullcodeline": "dio.instance_id = buffer[i++];"
    },
    {
        "line": 37,
        "fullcodeline": "dio.version = buffer[i++];"
    },
    {
        "line": 38,
        "fullcodeline": "dio.rank = get16(buffer, i);"
    },
    {
        "line": 39,
        "fullcodeline": "i += 2;"
    },
    {
        "line": 41,
        "fullcodeline": "LOG_DBG(\"Incoming DIO (id, ver, rank) = (%u,%u,%u)\\n\","
    },
    {
        "line": 46,
        "fullcodeline": "dio.grounded = buffer[i] & RPL_DIO_GROUNDED;"
    },
    {
        "line": 47,
        "fullcodeline": "dio.mop = (buffer[i]& RPL_DIO_MOP_MASK) >> RPL_DIO_MOP_SHIFT;"
    },
    {
        "line": 48,
        "fullcodeline": "dio.preference = buffer[i++] & RPL_DIO_PREFERENCE_MASK;"
    },
    {
        "line": 50,
        "fullcodeline": "dio.dtsn = buffer[i++];"
    },
    {
        "line": 52,
        "fullcodeline": "i += 2;"
    },
    {
        "line": 54,
        "fullcodeline": "memcpy(&dio.dag_id, buffer + i, sizeof(dio.dag_id));"
    },
    {
        "line": 55,
        "fullcodeline": "i += sizeof(dio.dag_id);"
    },
    {
        "line": 57,
        "fullcodeline": "LOG_DBG(\"Incoming DIO (dag_id, pref) = (\");"
    },
    {
        "line": 58,
        "fullcodeline": "LOG_DBG_6ADDR(&dio.dag_id);"
    },
    {
        "line": 59,
        "fullcodeline": "LOG_DBG_(\", %u)\\n\", dio.preference);"
    },
    {
        "line": 192,
        "fullcodeline": "rpl_process_dio(&from, &dio);"
    },
    {
        "line": 195,
        "fullcodeline": "uipbuf_clear();"
    },
    {
        "line": 42,
        "fullcodeline": "(unsigned)dio.instance_id,"
    },
    {
        "line": 43,
        "fullcodeline": "(unsigned)dio.version,"
    },
    {
        "line": 44,
        "fullcodeline": "(unsigned)dio.rank);"
    },
    {
        "line": 62,
        "fullcodeline": "for(; i < buffer_length; i += len) {"
    },
    {
        "line": 63,
        "fullcodeline": "subopt_type = buffer[i];"
    },
    {
        "line": 77,
        "fullcodeline": "LOG_DBG(\"Incoming DIO (option, length) = (%u, %u)\\n\", subopt_type, len - 2);"
    },
    {
        "line": 64,
        "fullcodeline": "if(subopt_type == RPL_OPTION_PAD1) {"
    },
    {
        "line": 71,
        "fullcodeline": "if(len + i > buffer_length) {"
    },
    {
        "line": 65,
        "fullcodeline": "len = 1;"
    },
    {
        "line": 72,
        "fullcodeline": "LOG_WARN(\"Invalid DIO packet\\n\");"
    },
    {
        "line": 73,
        "fullcodeline": "RPL_STAT(rpl_stats.malformed_msgs++);"
    },
    {
        "line": 86,
        "fullcodeline": "dio.mc.type = buffer[i + 2];"
    },
    {
        "line": 87,
        "fullcodeline": "dio.mc.flags = buffer[i + 3] << 1;"
    },
    {
        "line": 88,
        "fullcodeline": "dio.mc.flags |= buffer[i + 4] >> 7;"
    },
    {
        "line": 89,
        "fullcodeline": "dio.mc.aggr = (buffer[i + 4] >> 4) & 0x3;"
    },
    {
        "line": 90,
        "fullcodeline": "dio.mc.prec = buffer[i + 4] & 0xf;"
    },
    {
        "line": 91,
        "fullcodeline": "dio.mc.length = buffer[i + 5];"
    },
    {
        "line": 121,
        "fullcodeline": "dio.destination_prefix.length = buffer[i + 2];"
    },
    {
        "line": 122,
        "fullcodeline": "dio.destination_prefix.flags = buffer[i + 3];"
    },
    {
        "line": 123,
        "fullcodeline": "dio.destination_prefix.lifetime = get32(buffer, i + 4);"
    },
    {
        "line": 145,
        "fullcodeline": "dio.dag_intdoubl = buffer[i + 3];"
    },
    {
        "line": 146,
        "fullcodeline": "dio.dag_intmin = buffer[i + 4];"
    },
    {
        "line": 147,
        "fullcodeline": "dio.dag_redund = buffer[i + 5];"
    },
    {
        "line": 148,
        "fullcodeline": "dio.dag_max_rankinc = get16(buffer, i + 6);"
    },
    {
        "line": 149,
        "fullcodeline": "dio.dag_min_hoprankinc = get16(buffer, i + 8);"
    },
    {
        "line": 150,
        "fullcodeline": "dio.ocp = get16(buffer, i + 10);"
    },
    {
        "line": 152,
        "fullcodeline": "dio.default_lifetime = buffer[i + 13];"
    },
    {
        "line": 153,
        "fullcodeline": "dio.lifetime_unit = get16(buffer, i + 14);"
    },
    {
        "line": 154,
        "fullcodeline": "LOG_INFO(\"DAG conf:dbl=%d, min=%d red=%d maxinc=%d mininc=%d ocp=%d d_l=%u l_u=%u\\n\","
    },
    {
        "line": 165,
        "fullcodeline": "dio.prefix_info.length = buffer[i + 2];"
    },
    {
        "line": 174,
        "fullcodeline": "dio.prefix_info.flags = buffer[i + 3];"
    },
    {
        "line": 177,
        "fullcodeline": "dio.prefix_info.lifetime = get32(buffer, i + 8);"
    },
    {
        "line": 179,
        "fullcodeline": "LOG_INFO(\"Copying prefix information\\n\");"
    },
    {
        "line": 180,
        "fullcodeline": "memcpy(&dio.prefix_info.prefix, &buffer[i + 16], 16);"
    },
    {
        "line": 183,
        "fullcodeline": "LOG_WARN(\"Unsupported suboption type in DIO: %u\\n\","
    },
    {
        "line": 68,
        "fullcodeline": "len = 2 + buffer[i + 1];"
    },
    {
        "line": 81,
        "fullcodeline": "if(len < 6) {"
    },
    {
        "line": 93,
        "fullcodeline": "if(dio.mc.type == RPL_DAG_MC_NONE) {"
    },
    {
        "line": 114,
        "fullcodeline": "if(len < 9) {"
    },
    {
        "line": 125,
        "fullcodeline": "if(((dio.destination_prefix.length + 7) / 8) + 8 <= len &&"
    },
    {
        "line": 138,
        "fullcodeline": "if(len != 16) {"
    },
    {
        "line": 160,
        "fullcodeline": "if(len != 32) {"
    },
    {
        "line": 167,
        "fullcodeline": "if(dio.prefix_info.length > sizeof(uip_ipaddr_t) * 8) {"
    },
    {
        "line": 184,
        "fullcodeline": "(unsigned)subopt_type);"
    },
    {
        "line": 82,
        "fullcodeline": "LOG_WARN(\"Invalid DAG MC, len = %d\\n\", len);"
    },
    {
        "line": 83,
        "fullcodeline": "RPL_STAT(rpl_stats.malformed_msgs++);"
    },
    {
        "line": 115,
        "fullcodeline": "LOG_WARN(\"Invalid destination prefix option, len = %d\\n\", len);"
    },
    {
        "line": 116,
        "fullcodeline": "RPL_STAT(rpl_stats.malformed_msgs++);"
    },
    {
        "line": 126,
        "fullcodeline": "dio.destination_prefix.length <= 128) {"
    },
    {
        "line": 127,
        "fullcodeline": "LOG_INFO(\"Copying destination prefix\\n\");"
    },
    {
        "line": 128,
        "fullcodeline": "memcpy(&dio.destination_prefix.prefix, &buffer[i + 8],"
    },
    {
        "line": 139,
        "fullcodeline": "LOG_WARN(\"Invalid DAG configuration option, len = %d\\n\", len);"
    },
    {
        "line": 140,
        "fullcodeline": "RPL_STAT(rpl_stats.malformed_msgs++);"
    },
    {
        "line": 161,
        "fullcodeline": "LOG_WARN(\"Invalid DAG prefix info, len != 32\\n\");"
    },
    {
        "line": 162,
        "fullcodeline": "RPL_STAT(rpl_stats.malformed_msgs++);"
    },
    {
        "line": 168,
        "fullcodeline": "LOG_WARN(\"Invalid DAG prefix info, len %u > %u\\n\","
    },
    {
        "line": 170,
        "fullcodeline": "RPL_STAT(rpl_stats.malformed_msgs++);"
    },
    {
        "line": 129,
        "fullcodeline": "(dio.destination_prefix.length + 7) / 8);"
    },
    {
        "line": 131,
        "fullcodeline": "LOG_WARN(\"Invalid route info option, len = %d\\n\", len);"
    },
    {
        "line": 132,
        "fullcodeline": "RPL_STAT(rpl_stats.malformed_msgs++);"
    },
    {
        "line": 169,
        "fullcodeline": "dio.prefix_info.length, (unsigned)(sizeof(uip_ipaddr_t) * 8));"
    },
    {
        "line": 95,
        "fullcodeline": "} else if(dio.mc.type == RPL_DAG_MC_ETX) {"
    },
    {
        "line": 96,
        "fullcodeline": "dio.mc.obj.etx = get16(buffer, i + 6);"
    },
    {
        "line": 98,
        "fullcodeline": "LOG_DBG(\"DAG MC: type %u, flags %u, aggr %u, prec %u, length %u, ETX %u\\n\","
    },
    {
        "line": 99,
        "fullcodeline": "(unsigned)dio.mc.type,"
    },
    {
        "line": 100,
        "fullcodeline": "(unsigned)dio.mc.flags,"
    },
    {
        "line": 101,
        "fullcodeline": "(unsigned)dio.mc.aggr,"
    },
    {
        "line": 102,
        "fullcodeline": "(unsigned)dio.mc.prec,"
    },
    {
        "line": 103,
        "fullcodeline": "(unsigned)dio.mc.length,"
    },
    {
        "line": 104,
        "fullcodeline": "(unsigned)dio.mc.obj.etx);"
    },
    {
        "line": 105,
        "fullcodeline": "} else if(dio.mc.type == RPL_DAG_MC_ENERGY) {"
    },
    {
        "line": 106,
        "fullcodeline": "dio.mc.obj.energy.flags = buffer[i + 6];"
    },
    {
        "line": 107,
        "fullcodeline": "dio.mc.obj.energy.energy_est = buffer[i + 7];"
    },
    {
        "line": 109,
        "fullcodeline": "LOG_WARN(\"Unhandled DAG MC type: %u\\n\", (unsigned)dio.mc.type);"
    }
]