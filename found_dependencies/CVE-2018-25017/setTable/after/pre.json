[
    {
        "line": 2,
        "fullcodeline": "assert(!table.empty());"
    },
    {
        "line": 4,
        "fullcodeline": "const int nfilled = table.size();"
    },
    {
        "line": 11,
        "fullcodeline": "ushort16* t = &tables[ntable * TABLE_SIZE];"
    },
    {
        "line": 5,
        "fullcodeline": "if (nfilled >= 65536)"
    },
    {
        "line": 8,
        "fullcodeline": "if (ntable > ntables) {"
    },
    {
        "line": 12,
        "fullcodeline": "if (!dither) {"
    },
    {
        "line": 18,
        "fullcodeline": "for (int i = 0; i < nfilled; i++) {"
    },
    {
        "line": 27,
        "fullcodeline": "for (int i = nfilled; i < 65536; i++) {"
    },
    {
        "line": 6,
        "fullcodeline": "ThrowRDE(\"Table lookup with %i entries is unsupported\", nfilled);"
    },
    {
        "line": 9,
        "fullcodeline": "ThrowRDE(\"Table lookup with number greater than number of tables.\");"
    },
    {
        "line": 19,
        "fullcodeline": "int center = table[i];"
    },
    {
        "line": 20,
        "fullcodeline": "int lower = i > 0 ? table[i - 1] : center;"
    },
    {
        "line": 21,
        "fullcodeline": "int upper = i < (nfilled - 1) ? table[i + 1] : center;"
    },
    {
        "line": 22,
        "fullcodeline": "int delta = upper - lower;"
    },
    {
        "line": 32,
        "fullcodeline": "t[TABLE_SIZE - 1] = t[TABLE_SIZE - 2];"
    },
    {
        "line": 13,
        "fullcodeline": "for (int i = 0; i < 65536; i++) {"
    },
    {
        "line": 23,
        "fullcodeline": "t[i * 2] = center - ((upper - lower + 2) / 4);"
    },
    {
        "line": 14,
        "fullcodeline": "t[i] = (i < nfilled) ? table[i] : table[nfilled - 1];"
    },
    {
        "line": 28,
        "fullcodeline": "t[i * 2] = table[nfilled - 1];"
    },
    {
        "line": 24,
        "fullcodeline": "t[i * 2 + 1] = delta;"
    },
    {
        "line": 29,
        "fullcodeline": "t[i * 2 + 1] = 0;"
    }
]