[
    {
        "line": 7,
        "fullcodeline": "ScopedVideoFrameDone scoped_done(std::move(callbacks));"
    },
    {
        "line": 9,
        "fullcodeline": "CHECK(data->is_read_only_shmem_region());"
    },
    {
        "line": 10,
        "fullcodeline": "base::ReadOnlySharedMemoryRegion& shmem_region ="
    },
    {
        "line": 18,
        "fullcodeline": "DCHECK(shmem_region.IsValid());"
    },
    {
        "line": 20,
        "fullcodeline": "base::ReadOnlySharedMemoryMapping mapping = shmem_region.Map();"
    },
    {
        "line": 33,
        "fullcodeline": "void* const pixels = const_cast<void*>(mapping.memory());"
    },
    {
        "line": 35,
        "fullcodeline": "media::VideoFrameMetadata metadata = info->metadata;"
    },
    {
        "line": 59,
        "fullcodeline": "view_->OnPaint(damage_rect, info->coded_size, pixels);"
    },
    {
        "line": 11,
        "fullcodeline": "data->get_read_only_shmem_region();"
    },
    {
        "line": 21,
        "fullcodeline": "if (!mapping.IsValid()) {"
    },
    {
        "line": 25,
        "fullcodeline": "if (mapping.size() <"
    },
    {
        "line": 22,
        "fullcodeline": "DLOG(ERROR) << \"Shared memory mapping failed.\";"
    },
    {
        "line": 26,
        "fullcodeline": "media::VideoFrame::AllocationSize(info->pixel_format, info->coded_size)) {"
    },
    {
        "line": 27,
        "fullcodeline": "DLOG(ERROR) << \"Shared memory size was less than expected.\";"
    },
    {
        "line": 40,
        "fullcodeline": "damage_rect = gfx::Rect(info->coded_size);"
    },
    {
        "line": 41,
        "fullcodeline": "damage_rect.Intersect(*bounds_in_pixels_);"
    },
    {
        "line": 54,
        "fullcodeline": "if (damage_rect.IsEmpty()) {"
    },
    {
        "line": 55,
        "fullcodeline": "damage_rect = gfx::Rect(info->coded_size);"
    }
]