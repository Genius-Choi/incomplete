[
    {
        "line": 3,
        "fullcodeline": "OP_REQUIRES(context, channels_ == 0 || channels_ == 3,"
    },
    {
        "line": 27,
        "fullcodeline": "Tensor* output = nullptr;"
    },
    {
        "line": 28,
        "fullcodeline": "ptrdiff_t buffer_size = 0;"
    },
    {
        "line": 30,
        "fullcodeline": "uint8* buffer = gif::Decode("
    },
    {
        "line": 73,
        "fullcodeline": "OP_REQUIRES(context, buffer,"
    },
    {
        "line": 83,
        "fullcodeline": "std::unique_ptr<uint8[]> buffer_unique_ptr(buffer);"
    },
    {
        "line": 88,
        "fullcodeline": "const auto& device = context->eigen_device<Eigen::ThreadPoolDevice>();"
    },
    {
        "line": 4,
        "fullcodeline": "errors::InvalidArgument(\"channels must be 0 or 3 for GIF, got \","
    },
    {
        "line": 7,
        "fullcodeline": "if (op_type_ == \"DecodeBmp\") {"
    },
    {
        "line": 74,
        "fullcodeline": "errors::InvalidArgument(\"Invalid GIF data (size \", input.size(),"
    },
    {
        "line": 79,
        "fullcodeline": "if (data_type_ == DataType::DT_UINT8) {"
    },
    {
        "line": 89,
        "fullcodeline": "if (data_type_ == DataType::DT_UINT16) {"
    },
    {
        "line": 13,
        "fullcodeline": "OP_REQUIRES(context, false,"
    },
    {
        "line": 31,
        "fullcodeline": "input.data(), input.size(),"
    },
    {
        "line": 90,
        "fullcodeline": "uint16 scale = floor((std::numeric_limits<uint16>::max() + 1) /"
    },
    {
        "line": 14,
        "fullcodeline": "errors::InvalidArgument("
    },
    {
        "line": 94,
        "fullcodeline": "buffer_view.cast<uint16>() * scale;"
    },
    {
        "line": 17,
        "fullcodeline": "} else if (op_type_ == \"DecodeAndCropJpeg\") {"
    },
    {
        "line": 93,
        "fullcodeline": "output->flat<uint16>().device(device) ="
    },
    {
        "line": 18,
        "fullcodeline": "OP_REQUIRES(context, false,"
    },
    {
        "line": 91,
        "fullcodeline": "(std::numeric_limits<uint8>::max() + 1));"
    },
    {
        "line": 96,
        "fullcodeline": "float scale = 1. / std::numeric_limits<uint8>::max();"
    },
    {
        "line": 19,
        "fullcodeline": "errors::InvalidArgument("
    },
    {
        "line": 98,
        "fullcodeline": "output->flat<float>().device(device) = buffer_view.cast<float>() * scale;"
    }
]