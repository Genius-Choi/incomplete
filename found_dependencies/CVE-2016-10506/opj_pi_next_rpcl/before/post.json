[
    {
        "line": 3,
        "fullcodeline": "opj_pi_comp_t *comp = NULL;"
    },
    {
        "line": 4,
        "fullcodeline": "opj_pi_resolution_t *res = NULL;"
    },
    {
        "line": 5,
        "fullcodeline": "OPJ_UINT32 index = 0;"
    },
    {
        "line": 7,
        "fullcodeline": "if (!pi->first) {"
    },
    {
        "line": 26,
        "fullcodeline": "if (!pi->tp_on) {"
    },
    {
        "line": 32,
        "fullcodeline": "for (pi->resno = pi->poc.resno0; pi->resno < pi->poc.resno1; pi->resno++) {"
    },
    {
        "line": 27,
        "fullcodeline": "pi->poc.ty0 = pi->ty0;"
    },
    {
        "line": 28,
        "fullcodeline": "pi->poc.tx0 = pi->tx0;"
    },
    {
        "line": 29,
        "fullcodeline": "pi->poc.ty1 = pi->ty1;"
    },
    {
        "line": 30,
        "fullcodeline": "pi->poc.tx1 = pi->tx1;"
    },
    {
        "line": 11,
        "fullcodeline": "pi->first = 0;"
    },
    {
        "line": 12,
        "fullcodeline": "pi->dx = 0;"
    },
    {
        "line": 13,
        "fullcodeline": "pi->dy = 0;"
    },
    {
        "line": 33,
        "fullcodeline": "for (pi->y = pi->poc.ty0; pi->y < pi->poc.ty1;"
    },
    {
        "line": 34,
        "fullcodeline": "pi->y += (OPJ_INT32)(pi->dy - (OPJ_UINT32)(pi->y % (OPJ_INT32)pi->dy))) {"
    },
    {
        "line": 14,
        "fullcodeline": "for (compno = 0; compno < pi->numcomps; compno++) {"
    },
    {
        "line": 35,
        "fullcodeline": "for (pi->x = pi->poc.tx0; pi->x < pi->poc.tx1;"
    },
    {
        "line": 36,
        "fullcodeline": "pi->x += (OPJ_INT32)(pi->dx - (OPJ_UINT32)(pi->x % (OPJ_INT32)pi->dx))) {"
    },
    {
        "line": 16,
        "fullcodeline": "for (resno = 0; resno < comp->numresolutions; resno++) {"
    },
    {
        "line": 19,
        "fullcodeline": "dx = comp->dx * (1u << (res->pdx + comp->numresolutions - 1 - resno));"
    },
    {
        "line": 20,
        "fullcodeline": "dy = comp->dy * (1u << (res->pdy + comp->numresolutions - 1 - resno));"
    },
    {
        "line": 21,
        "fullcodeline": "pi->dx = !pi->dx ? dx : opj_uint_min(pi->dx, dx);"
    },
    {
        "line": 22,
        "fullcodeline": "pi->dy = !pi->dy ? dy : opj_uint_min(pi->dy, dy);"
    },
    {
        "line": 37,
        "fullcodeline": "for (pi->compno = pi->poc.compno0; pi->compno < pi->poc.compno1; pi->compno++) {"
    },
    {
        "line": 48,
        "fullcodeline": "levelno = comp->numresolutions - 1 - pi->resno;"
    },
    {
        "line": 49,
        "fullcodeline": "trx0 = opj_int_ceildiv(pi->tx0, (OPJ_INT32)(comp->dx << levelno));"
    },
    {
        "line": 50,
        "fullcodeline": "try0 = opj_int_ceildiv(pi->ty0, (OPJ_INT32)(comp->dy << levelno));"
    },
    {
        "line": 51,
        "fullcodeline": "trx1 = opj_int_ceildiv(pi->tx1, (OPJ_INT32)(comp->dx << levelno));"
    },
    {
        "line": 52,
        "fullcodeline": "try1 = opj_int_ceildiv(pi->ty1, (OPJ_INT32)(comp->dy << levelno));"
    },
    {
        "line": 53,
        "fullcodeline": "rpx = res->pdx + levelno;"
    },
    {
        "line": 54,
        "fullcodeline": "rpy = res->pdy + levelno;"
    },
    {
        "line": 72,
        "fullcodeline": "prci = opj_int_floordivpow2(opj_int_ceildiv(pi->x,"
    },
    {
        "line": 75,
        "fullcodeline": "prcj = opj_int_floordivpow2(opj_int_ceildiv(pi->y,"
    },
    {
        "line": 78,
        "fullcodeline": "pi->precno = (OPJ_UINT32)(prci + prcj * (OPJ_INT32)res->pw);"
    },
    {
        "line": 44,
        "fullcodeline": "if (pi->resno >= comp->numresolutions) {"
    },
    {
        "line": 55,
        "fullcodeline": "if (!((pi->y % (OPJ_INT32)(comp->dy << rpy) == 0) || ((pi->y == pi->ty0) &&"
    },
    {
        "line": 59,
        "fullcodeline": "if (!((pi->x % (OPJ_INT32)(comp->dx << rpx) == 0) || ((pi->x == pi->tx0) &&"
    },
    {
        "line": 64,
        "fullcodeline": "if ((res->pw == 0) || (res->ph == 0)) {"
    },
    {
        "line": 68,
        "fullcodeline": "if ((trx0 == trx1) || (try0 == try1)) {"
    },
    {
        "line": 79,
        "fullcodeline": "for (pi->layno = pi->poc.layno0; pi->layno < pi->poc.layno1; pi->layno++) {"
    },
    {
        "line": 74,
        "fullcodeline": "- opj_int_floordivpow2(trx0, (OPJ_INT32)res->pdx);"
    },
    {
        "line": 77,
        "fullcodeline": "- opj_int_floordivpow2(try0, (OPJ_INT32)res->pdy);"
    },
    {
        "line": 80,
        "fullcodeline": "index = pi->layno * pi->step_l + pi->resno * pi->step_r + pi->compno *"
    },
    {
        "line": 73,
        "fullcodeline": "(OPJ_INT32)(comp->dx << levelno)), (OPJ_INT32)res->pdx)"
    },
    {
        "line": 76,
        "fullcodeline": "(OPJ_INT32)(comp->dy << levelno)), (OPJ_INT32)res->pdy)"
    },
    {
        "line": 56,
        "fullcodeline": "((try0 << levelno) % (1 << rpy))))) {"
    },
    {
        "line": 60,
        "fullcodeline": "((trx0 << levelno) % (1 << rpx))))) {"
    },
    {
        "line": 81,
        "fullcodeline": "pi->step_c + pi->precno * pi->step_p;"
    },
    {
        "line": 83,
        "fullcodeline": "pi->include[index] = 1;"
    }
]