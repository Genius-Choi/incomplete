[
    {
        "line": 3,
        "fullcodeline": "if (!term) return 0;"
    },
    {
        "line": 26,
        "fullcodeline": "CanSeek = evt->duration.can_seek;"
    },
    {
        "line": 111,
        "fullcodeline": "gf_term_process_shortcut(term, evt);"
    },
    {
        "line": 6,
        "fullcodeline": "if (evt->type==GF_EVENT_QUIT) {"
    },
    {
        "line": 25,
        "fullcodeline": "Duration = (u64) ( 1000 * (s64) evt->duration.duration);"
    },
    {
        "line": 55,
        "fullcodeline": "char *szTitle = \"\";"
    },
    {
        "line": 75,
        "fullcodeline": "gf_term_set_option(term, GF_OPT_FULLSCREEN, !gf_term_get_option(term, GF_OPT_FULLSCREEN));"
    },
    {
        "line": 248,
        "fullcodeline": "if (init_w && init_h) {"
    },
    {
        "line": 274,
        "fullcodeline": "if (forced_width && forced_height) {"
    },
    {
        "line": 304,
        "fullcodeline": "pos = ftell(playlist);"
    },
    {
        "line": 305,
        "fullcodeline": "i=0;"
    },
    {
        "line": 312,
        "fullcodeline": "fseek(playlist, pos, SEEK_SET);"
    },
    {
        "line": 334,
        "fullcodeline": "if (gf_term_is_supported_url(term, evt->navigate.to_url, 1, no_mime_check)) {"
    },
    {
        "line": 349,
        "fullcodeline": "int maxTries = 1;"
    },
    {
        "line": 351,
        "fullcodeline": "assert( evt->auth.user);"
    },
    {
        "line": 352,
        "fullcodeline": "assert( evt->auth.password);"
    },
    {
        "line": 353,
        "fullcodeline": "assert( evt->auth.site_url);"
    },
    {
        "line": 40,
        "fullcodeline": "if (!evt->message.message) return 0;"
    },
    {
        "line": 56,
        "fullcodeline": "if (evt->progress.progress_type==0) {"
    },
    {
        "line": 93,
        "fullcodeline": "if (right_down && (user.init_flags & GF_TERM_WINDOWLESS) ) {"
    },
    {
        "line": 97,
        "fullcodeline": "move.type = GF_EVENT_MOVE;"
    },
    {
        "line": 213,
        "fullcodeline": "addon_visible = !addon_visible;"
    },
    {
        "line": 239,
        "fullcodeline": "eos_seen = GF_FALSE;"
    },
    {
        "line": 266,
        "fullcodeline": "move.type = GF_EVENT_MOVE;"
    },
    {
        "line": 276,
        "fullcodeline": "size.type = GF_EVENT_SIZE;"
    },
    {
        "line": 300,
        "fullcodeline": "if (!playlist) {"
    },
    {
        "line": 306,
        "fullcodeline": "while (i<evt->open_file.nb_files) {"
    },
    {
        "line": 335,
        "fullcodeline": "strncpy(the_url, evt->navigate.to_url, sizeof(the_url)-1);"
    },
    {
        "line": 336,
        "fullcodeline": "the_url[sizeof(the_url) - 1] = 0;"
    },
    {
        "line": 350,
        "fullcodeline": "assert( evt->type == GF_EVENT_AUTHORIZATION);"
    },
    {
        "line": 31,
        "fullcodeline": "if (!evt->message.service || !strcmp(evt->message.service, the_url)) {"
    },
    {
        "line": 32,
        "fullcodeline": "servName = \"\";"
    },
    {
        "line": 57,
        "fullcodeline": "szTitle = \"Buffer \";"
    },
    {
        "line": 95,
        "fullcodeline": "move.move.x = evt->mouse.x - last_x;"
    },
    {
        "line": 96,
        "fullcodeline": "move.move.y = last_y-evt->mouse.y;"
    },
    {
        "line": 126,
        "fullcodeline": "gf_term_set_option(term, GF_OPT_FULLSCREEN, !gf_term_get_option(term, GF_OPT_FULLSCREEN));"
    },
    {
        "line": 240,
        "fullcodeline": "if (playback_speed != FIX_ONE)"
    },
    {
        "line": 267,
        "fullcodeline": "move.move.align_x = align_mode & 0xFF;"
    },
    {
        "line": 268,
        "fullcodeline": "move.move.align_y = (align_mode>>8) & 0xFF;"
    },
    {
        "line": 297,
        "fullcodeline": "playlist = NULL;"
    },
    {
        "line": 302,
        "fullcodeline": "playlist = gf_temp_file_new(NULL);"
    },
    {
        "line": 310,
        "fullcodeline": "i++;"
    },
    {
        "line": 319,
        "fullcodeline": "fprintf(stderr, \"A fatal error was encoutered: %s (%s) - exiting ...\\n\", evt->message.message ? evt->message.message : \"no details\", gf_error_to_string(evt->message.error) );"
    },
    {
        "line": 354,
        "fullcodeline": "while ((!strlen(evt->auth.user) || !strlen(evt->auth.password)) && (maxTries--) >= 0) {"
    },
    {
        "line": 355,
        "fullcodeline": "fprintf(stderr, \"**** Authorization required for site %s ****\\n\", evt->auth.site_url);"
    },
    {
        "line": 356,
        "fullcodeline": "fprintf(stderr, \"login   : \");"
    },
    {
        "line": 357,
        "fullcodeline": "read_line_input(evt->auth.user, 50, 1);"
    },
    {
        "line": 358,
        "fullcodeline": "fprintf(stderr, \"\\npassword: \");"
    },
    {
        "line": 359,
        "fullcodeline": "read_line_input(evt->auth.password, 50, 0);"
    },
    {
        "line": 360,
        "fullcodeline": "fprintf(stderr, \"*********\\n\");"
    },
    {
        "line": 8,
        "fullcodeline": "} else if (evt->type==GF_EVENT_KEYDOWN) {"
    },
    {
        "line": 44,
        "fullcodeline": "if (evt->message.error==GF_SCRIPT_INFO) {"
    },
    {
        "line": 129,
        "fullcodeline": "if (evt->key.flags & (GF_KEY_MOD_CTRL|GF_KEY_MOD_ALT)) {"
    },
    {
        "line": 145,
        "fullcodeline": "gf_term_set_option(term, GF_OPT_ASPECT_RATIO, GF_ASPECT_RATIO_4_3);"
    },
    {
        "line": 149,
        "fullcodeline": "gf_term_set_option(term, GF_OPT_ASPECT_RATIO, GF_ASPECT_RATIO_16_9);"
    },
    {
        "line": 153,
        "fullcodeline": "gf_term_set_option(term, GF_OPT_ASPECT_RATIO, GF_ASPECT_RATIO_FILL_SCREEN);"
    },
    {
        "line": 157,
        "fullcodeline": "gf_term_set_option(term, GF_OPT_ASPECT_RATIO, GF_ASPECT_RATIO_KEEP);"
    },
    {
        "line": 160,
        "fullcodeline": "if ((evt->key.flags & GF_KEY_MOD_CTRL) && is_connected) {"
    },
    {
        "line": 170,
        "fullcodeline": "if ((evt->key.flags & GF_KEY_MOD_CTRL) && is_connected) {"
    },
    {
        "line": 181,
        "fullcodeline": "if ((evt->key.flags & GF_KEY_MOD_CTRL) && is_connected) {"
    },
    {
        "line": 182,
        "fullcodeline": "gf_term_set_option(term, GF_OPT_PLAY_STATE, GF_STATE_STEP_PAUSE);"
    },
    {
        "line": 183,
        "fullcodeline": "fprintf(stderr, \"Step time: \");"
    },
    {
        "line": 189,
        "fullcodeline": "if ((evt->key.flags & GF_KEY_MOD_CTRL) && is_connected)"
    },
    {
        "line": 193,
        "fullcodeline": "if ((evt->key.flags & GF_KEY_MOD_CTRL) && is_connected)"
    },
    {
        "line": 197,
        "fullcodeline": "if ((evt->key.flags & GF_KEY_MOD_CTRL) && is_connected) {"
    },
    {
        "line": 203,
        "fullcodeline": "if ((evt->key.flags & GF_KEY_MOD_CTRL) && is_connected) {"
    },
    {
        "line": 217,
        "fullcodeline": "if ((evt->key.flags & VK_MOD) && is_connected) {"
    },
    {
        "line": 222,
        "fullcodeline": "if ((evt->key.flags & VK_MOD) && is_connected) {"
    },
    {
        "line": 227,
        "fullcodeline": "if ((evt->key.flags & VK_MOD) && is_connected) {"
    },
    {
        "line": 241,
        "fullcodeline": "gf_term_set_speed(term, playback_speed);"
    },
    {
        "line": 307,
        "fullcodeline": "if (evt->open_file.files[i] != NULL) {"
    },
    {
        "line": 43,
        "fullcodeline": "if (!is_connected) last_error = evt->message.error;"
    },
    {
        "line": 49,
        "fullcodeline": "} else if (!be_quiet)"
    },
    {
        "line": 58,
        "fullcodeline": "if (bench_mode && (bench_mode!=3) ) {"
    },
    {
        "line": 64,
        "fullcodeline": "else if (evt->progress.progress_type==1) {"
    },
    {
        "line": 106,
        "fullcodeline": "if (evt->key.flags & GF_KEY_MOD_CTRL) switch_bench(!bench_mode);"
    },
    {
        "line": 116,
        "fullcodeline": "if (!bench_mode) switch_bench(!bench_mode);"
    },
    {
        "line": 135,
        "fullcodeline": "if (evt->key.flags & GF_KEY_MOD_CTRL) fprintf(stderr, \"Rendering rate: %f FPS\\n\", gf_term_get_framerate(term, 0));"
    },
    {
        "line": 138,
        "fullcodeline": "if (evt->key.flags & GF_KEY_MOD_CTRL) fprintf(stderr, \"Scene Time: %f \\n\", gf_term_get_time_in_ms(term)/1000.0);"
    },
    {
        "line": 141,
        "fullcodeline": "if (evt->key.flags & GF_KEY_MOD_CTRL) gf_term_set_option(term, GF_OPT_DRAW_MODE, (gf_term_get_option(term, GF_OPT_DRAW_MODE)==GF_DRAW_MODE_DEFER) ? GF_DRAW_MODE_IMMEDIATE : GF_DRAW_MODE_DEFER );"
    },
    {
        "line": 161,
        "fullcodeline": "if (gf_term_get_option(term, GF_OPT_MAIN_ADDON)) {"
    },
    {
        "line": 171,
        "fullcodeline": "u32 pause_state = gf_term_get_option(term, GF_OPT_PLAY_STATE) ;"
    },
    {
        "line": 184,
        "fullcodeline": "PrintTime(gf_term_get_time_in_ms(term));"
    },
    {
        "line": 218,
        "fullcodeline": "do_set_speed(playback_speed * 2);"
    },
    {
        "line": 223,
        "fullcodeline": "do_set_speed(playback_speed / 2);"
    },
    {
        "line": 228,
        "fullcodeline": "do_set_speed(-1 * playback_speed );"
    },
    {
        "line": 260,
        "fullcodeline": "restart = 1;"
    },
    {
        "line": 308,
        "fullcodeline": "fprintf(playlist, \"%s\\n\", evt->open_file.files[i]);"
    },
    {
        "line": 33,
        "fullcodeline": "} else if (!strnicmp(evt->message.service, \"data:\", 5)) {"
    },
    {
        "line": 34,
        "fullcodeline": "servName = \"(embedded data)\";"
    },
    {
        "line": 45,
        "fullcodeline": "GF_LOG(GF_LOG_INFO, GF_LOG_CONSOLE, (\"%s\\n\", evt->message.message));"
    },
    {
        "line": 47,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_CONSOLE, (\"%s %s: %s\\n\", servName, evt->message.message, gf_error_to_string(evt->message.error)));"
    },
    {
        "line": 59,
        "fullcodeline": "if (evt->progress.done >= evt->progress.total) bench_buffer = 0;"
    },
    {
        "line": 66,
        "fullcodeline": "szTitle = \"Download \";"
    },
    {
        "line": 173,
        "fullcodeline": "if ((pause_state == GF_STATE_PAUSED) && (evt->key.flags & GF_KEY_MOD_SHIFT)) {"
    },
    {
        "line": 36,
        "fullcodeline": "servName = evt->message.service;"
    },
    {
        "line": 50,
        "fullcodeline": "GF_LOG(GF_LOG_INFO, GF_LOG_CONSOLE, (\"%s %s\\n\", servName, evt->message.message));"
    },
    {
        "line": 176,
        "fullcodeline": "gf_term_set_option(term, GF_OPT_PLAY_STATE, (pause_state==GF_STATE_PAUSED) ? GF_STATE_PLAYING : GF_STATE_PAUSED);"
    },
    {
        "line": 11,
        "fullcodeline": "if (evt->key.flags & (GF_KEY_MOD_CTRL|GF_KEY_MOD_ALT)) {"
    },
    {
        "line": 68,
        "fullcodeline": "else if (evt->progress.progress_type==2) szTitle = \"Import \";"
    },
    {
        "line": 60,
        "fullcodeline": "else bench_buffer = 1 + 100*evt->progress.done / evt->progress.total;"
    }
]