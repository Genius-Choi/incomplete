[
    {
        "line": 6,
        "fullcodeline": "struct gspca_dev *gspca_dev = (struct gspca_dev *)sd;"
    },
    {
        "line": 10,
        "fullcodeline": "intf = usb_ifnum_to_if(sd->gspca_dev.dev, sd->gspca_dev.iface);"
    },
    {
        "line": 11,
        "fullcodeline": "alt = usb_altnum_to_altsetting(intf, sd->gspca_dev.alt);"
    },
    {
        "line": 14,
        "fullcodeline": "packet_size = le16_to_cpu(alt->endpoint[0].desc.wMaxPacketSize);"
    },
    {
        "line": 48,
        "fullcodeline": "err = stv06xx_write_sensor(sd, PB_CONTROL, BIT(5)|BIT(3)|BIT(1));"
    },
    {
        "line": 49,
        "fullcodeline": "gspca_dbg(gspca_dev, D_STREAM, \"Started stream, status: %d\\n\", err);"
    },
    {
        "line": 12,
        "fullcodeline": "if (!alt)"
    },
    {
        "line": 18,
        "fullcodeline": "if (packet_size < max_packet_size)"
    },
    {
        "line": 24,
        "fullcodeline": "if (mode & PB0100_CROP_TO_VGA) {"
    },
    {
        "line": 36,
        "fullcodeline": "if (mode & PB0100_SUBSAMPLE) {"
    },
    {
        "line": 51,
        "fullcodeline": "return (err < 0) ? err : 0;"
    },
    {
        "line": 19,
        "fullcodeline": "stv06xx_write_sensor(sd, PB_ROWSPEED, BIT(4)|BIT(3)|BIT(1));"
    },
    {
        "line": 25,
        "fullcodeline": "stv06xx_write_sensor(sd, PB_RSTART, 30);"
    },
    {
        "line": 26,
        "fullcodeline": "stv06xx_write_sensor(sd, PB_CSTART, 20);"
    },
    {
        "line": 27,
        "fullcodeline": "stv06xx_write_sensor(sd, PB_RWSIZE, 240 - 1);"
    },
    {
        "line": 28,
        "fullcodeline": "stv06xx_write_sensor(sd, PB_CWSIZE, 320 - 1);"
    },
    {
        "line": 37,
        "fullcodeline": "stv06xx_write_bridge(sd, STV_Y_CTRL, 0x02); /* Wrong, FIXME */"
    },
    {
        "line": 38,
        "fullcodeline": "stv06xx_write_bridge(sd, STV_X_CTRL, 0x06);"
    },
    {
        "line": 40,
        "fullcodeline": "stv06xx_write_bridge(sd, STV_SCAN_RATE, 0x10);"
    },
    {
        "line": 13,
        "fullcodeline": "return -ENODEV;"
    },
    {
        "line": 21,
        "fullcodeline": "stv06xx_write_sensor(sd, PB_ROWSPEED, BIT(5)|BIT(3)|BIT(1));"
    },
    {
        "line": 30,
        "fullcodeline": "stv06xx_write_sensor(sd, PB_RSTART, 8);"
    },
    {
        "line": 31,
        "fullcodeline": "stv06xx_write_sensor(sd, PB_CSTART, 4);"
    },
    {
        "line": 32,
        "fullcodeline": "stv06xx_write_sensor(sd, PB_RWSIZE, 288 - 1);"
    },
    {
        "line": 33,
        "fullcodeline": "stv06xx_write_sensor(sd, PB_CWSIZE, 352 - 1);"
    },
    {
        "line": 42,
        "fullcodeline": "stv06xx_write_bridge(sd, STV_Y_CTRL, 0x01);"
    },
    {
        "line": 43,
        "fullcodeline": "stv06xx_write_bridge(sd, STV_X_CTRL, 0x0a);"
    },
    {
        "line": 45,
        "fullcodeline": "stv06xx_write_bridge(sd, STV_SCAN_RATE, 0x20);"
    }
]