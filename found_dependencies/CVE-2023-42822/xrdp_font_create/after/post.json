[
    {
        "line": 13,
        "fullcodeline": "char file_path_buff[256];"
    },
    {
        "line": 15,
        "fullcodeline": "char font_name[256];"
    },
    {
        "line": 17,
        "fullcodeline": "LOG_DEVEL(LOG_LEVEL_TRACE, \"in xrdp_font_create\");"
    },
    {
        "line": 25,
        "fullcodeline": "get_font_name_from_dpi(globals, dpi, font_name, sizeof(font_name));"
    },
    {
        "line": 60,
        "fullcodeline": "file_size = g_file_get_size(file_path);"
    },
    {
        "line": 69,
        "fullcodeline": "self = (struct xrdp_font *)g_malloc(sizeof(struct xrdp_font), 1);"
    },
    {
        "line": 76,
        "fullcodeline": "self->wm = wm;"
    },
    {
        "line": 77,
        "fullcodeline": "make_stream(s);"
    },
    {
        "line": 78,
        "fullcodeline": "init_stream(s, file_size + 1024);"
    },
    {
        "line": 79,
        "fullcodeline": "fd = g_file_open_ro(file_path);"
    },
    {
        "line": 227,
        "fullcodeline": "free_stream(s);"
    },
    {
        "line": 236,
        "fullcodeline": "LOG_DEVEL(LOG_LEVEL_TRACE, \"out xrdp_font_create\");"
    },
    {
        "line": 19,
        "fullcodeline": "if (dpi == 0)"
    },
    {
        "line": 27,
        "fullcodeline": "if (font_name[0] == '/')"
    },
    {
        "line": 40,
        "fullcodeline": "if (!g_file_exist(file_path))"
    },
    {
        "line": 62,
        "fullcodeline": "if (file_size < 1)"
    },
    {
        "line": 70,
        "fullcodeline": "if (self == NULL)"
    },
    {
        "line": 81,
        "fullcodeline": "if (fd < 0)"
    },
    {
        "line": 21,
        "fullcodeline": "LOG(LOG_LEVEL_WARNING, \"No DPI value is available to find login font\");"
    },
    {
        "line": 22,
        "fullcodeline": "dpi = globals->default_dpi;"
    },
    {
        "line": 23,
        "fullcodeline": "LOG(LOG_LEVEL_WARNING, \"Using the default_dpi of %u\", dpi);"
    },
    {
        "line": 30,
        "fullcodeline": "file_path = font_name;"
    },
    {
        "line": 43,
        "fullcodeline": "const char *default_file_path = XRDP_SHARE_PATH \"/\" DEFAULT_FONT_NAME;"
    },
    {
        "line": 64,
        "fullcodeline": "LOG(LOG_LEVEL_ERROR, \"xrdp_font_create: error reading font from file [%s]\","
    },
    {
        "line": 72,
        "fullcodeline": "LOG(LOG_LEVEL_ERROR, \"xrdp_font_create: \""
    },
    {
        "line": 83,
        "fullcodeline": "LOG(LOG_LEVEL_ERROR,"
    },
    {
        "line": 86,
        "fullcodeline": "g_free(self);"
    },
    {
        "line": 87,
        "fullcodeline": "self = NULL;"
    },
    {
        "line": 37,
        "fullcodeline": "file_path = file_path_buff;"
    },
    {
        "line": 44,
        "fullcodeline": "if (g_file_exist(default_file_path))"
    },
    {
        "line": 91,
        "fullcodeline": "b = g_file_read(fd, s->data, file_size + 1024);"
    },
    {
        "line": 92,
        "fullcodeline": "g_file_close(fd);"
    },
    {
        "line": 46,
        "fullcodeline": "LOG(LOG_LEVEL_WARNING,"
    },
    {
        "line": 49,
        "fullcodeline": "file_path = default_file_path;"
    },
    {
        "line": 95,
        "fullcodeline": "if (b < (4 + 32 + 2 + 2 + 2 + 2 + 4))"
    },
    {
        "line": 53,
        "fullcodeline": "LOG(LOG_LEVEL_ERROR,"
    },
    {
        "line": 97,
        "fullcodeline": "LOG(LOG_LEVEL_ERROR,"
    },
    {
        "line": 99,
        "fullcodeline": "g_free(self);"
    },
    {
        "line": 100,
        "fullcodeline": "self = NULL;"
    },
    {
        "line": 104,
        "fullcodeline": "s->end = s->data + b;"
    },
    {
        "line": 105,
        "fullcodeline": "in_uint8s(s, 4);"
    },
    {
        "line": 106,
        "fullcodeline": "in_uint8a(s, self->name, 32);"
    },
    {
        "line": 107,
        "fullcodeline": "in_uint16_le(s, self->size);"
    },
    {
        "line": 108,
        "fullcodeline": "in_uint16_le(s, self->style);"
    },
    {
        "line": 109,
        "fullcodeline": "in_uint16_le(s, self->body_height);"
    },
    {
        "line": 110,
        "fullcodeline": "in_sint16_le(s, min_descender);"
    },
    {
        "line": 111,
        "fullcodeline": "in_uint8s(s, 4);"
    },
    {
        "line": 112,
        "fullcodeline": "char_count = FIRST_CHAR;"
    },
    {
        "line": 194,
        "fullcodeline": "self->char_count = char_count;"
    },
    {
        "line": 114,
        "fullcodeline": "while (!s_check_end(s))"
    },
    {
        "line": 195,
        "fullcodeline": "if (char_count <= FIRST_CHAR)"
    },
    {
        "line": 132,
        "fullcodeline": "f = self->chars + char_count;"
    },
    {
        "line": 133,
        "fullcodeline": "in_sint16_le(s, i);"
    },
    {
        "line": 134,
        "fullcodeline": "f->width = i;"
    },
    {
        "line": 135,
        "fullcodeline": "in_sint16_le(s, i);"
    },
    {
        "line": 136,
        "fullcodeline": "f->height = i;"
    },
    {
        "line": 137,
        "fullcodeline": "in_sint16_le(s, i);"
    },
    {
        "line": 139,
        "fullcodeline": "f->baseline = i + min_descender;"
    },
    {
        "line": 140,
        "fullcodeline": "in_sint16_le(s, i);"
    },
    {
        "line": 141,
        "fullcodeline": "f->offset = i;"
    },
    {
        "line": 142,
        "fullcodeline": "in_sint16_le(s, i);"
    },
    {
        "line": 143,
        "fullcodeline": "f->incby = i;"
    },
    {
        "line": 144,
        "fullcodeline": "in_uint8s(s, 6);"
    },
    {
        "line": 145,
        "fullcodeline": "datasize = FONT_DATASIZE(f);"
    },
    {
        "line": 189,
        "fullcodeline": "in_uint8a(s, f->data, datasize);"
    },
    {
        "line": 191,
        "fullcodeline": "++char_count;"
    },
    {
        "line": 198,
        "fullcodeline": "xrdp_font_delete(self);"
    },
    {
        "line": 199,
        "fullcodeline": "self = NULL;"
    },
    {
        "line": 116,
        "fullcodeline": "if (!s_check_rem(s, 16))"
    },
    {
        "line": 124,
        "fullcodeline": "if (char_count >= MAX_FONT_CHARS)"
    },
    {
        "line": 147,
        "fullcodeline": "if (datasize < 0 || datasize > 512)"
    },
    {
        "line": 158,
        "fullcodeline": "if (!s_check_rem(s, datasize))"
    },
    {
        "line": 166,
        "fullcodeline": "if (datasize == 0)"
    },
    {
        "line": 182,
        "fullcodeline": "if (f->data == NULL)"
    },
    {
        "line": 118,
        "fullcodeline": "LOG(LOG_LEVEL_WARNING,"
    },
    {
        "line": 126,
        "fullcodeline": "LOG(LOG_LEVEL_WARNING,"
    },
    {
        "line": 150,
        "fullcodeline": "LOG(LOG_LEVEL_ERROR,"
    },
    {
        "line": 160,
        "fullcodeline": "LOG(LOG_LEVEL_ERROR,"
    },
    {
        "line": 170,
        "fullcodeline": "f->width = 1;"
    },
    {
        "line": 171,
        "fullcodeline": "f->height = 1;"
    },
    {
        "line": 175,
        "fullcodeline": "f->data = (char *)g_malloc(FONT_DATASIZE(f), 1);"
    },
    {
        "line": 184,
        "fullcodeline": "LOG(LOG_LEVEL_ERROR,"
    },
    {
        "line": 203,
        "fullcodeline": "if (self->body_height == 0)"
    },
    {
        "line": 211,
        "fullcodeline": "if (char_count > UNICODE_WHITE_SQUARE)"
    },
    {
        "line": 179,
        "fullcodeline": "f->data = (char *)g_malloc(datasize, 0);"
    },
    {
        "line": 207,
        "fullcodeline": "self->body_height = -self->chars[FIRST_CHAR].baseline + 1;"
    },
    {
        "line": 213,
        "fullcodeline": "self->default_char = &self->chars[UNICODE_WHITE_SQUARE];"
    },
    {
        "line": 215,
        "fullcodeline": "else if (char_count > '?')"
    },
    {
        "line": 217,
        "fullcodeline": "self->default_char = &self->chars['?'];"
    },
    {
        "line": 221,
        "fullcodeline": "self->default_char = &self->chars[FIRST_CHAR];"
    }
]