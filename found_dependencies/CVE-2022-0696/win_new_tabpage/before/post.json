[
    {
        "line": 3,
        "fullcodeline": "tabpage_T\t*tp = curtab;"
    },
    {
        "line": 4,
        "fullcodeline": "tabpage_T\t*prev_tp = curtab;"
    },
    {
        "line": 8,
        "fullcodeline": "newtp = alloc_tabpage();"
    },
    {
        "line": 18,
        "fullcodeline": "curtab = newtp;"
    },
    {
        "line": 20,
        "fullcodeline": "newtp->tp_localdir = (tp->tp_localdir == NULL)"
    },
    {
        "line": 74,
        "fullcodeline": "enter_tabpage(curtab, curbuf, TRUE, TRUE);"
    },
    {
        "line": 9,
        "fullcodeline": "if (newtp == NULL)"
    },
    {
        "line": 13,
        "fullcodeline": "if (leave_tabpage(curbuf, TRUE) == FAIL)"
    },
    {
        "line": 23,
        "fullcodeline": "if (win_alloc_firstwin(tp->tp_curwin) == OK)"
    },
    {
        "line": 15,
        "fullcodeline": "vim_free(newtp);"
    },
    {
        "line": 21,
        "fullcodeline": "? NULL : vim_strsave(tp->tp_localdir);"
    },
    {
        "line": 45,
        "fullcodeline": "newtp->tp_firstwin = newtp->tp_lastwin = newtp->tp_curwin = curwin;"
    },
    {
        "line": 47,
        "fullcodeline": "win_init_size();"
    },
    {
        "line": 48,
        "fullcodeline": "firstwin->w_winrow = tabline_height();"
    },
    {
        "line": 49,
        "fullcodeline": "win_comp_scroll(curwin);"
    },
    {
        "line": 51,
        "fullcodeline": "newtp->tp_topframe = topframe;"
    },
    {
        "line": 52,
        "fullcodeline": "last_status(FALSE);"
    },
    {
        "line": 54,
        "fullcodeline": "lastused_tabpage = prev_tp;"
    },
    {
        "line": 65,
        "fullcodeline": "redraw_all_later(NOT_VALID);"
    },
    {
        "line": 66,
        "fullcodeline": "apply_autocmds(EVENT_WINNEW, NULL, NULL, FALSE, curbuf);"
    },
    {
        "line": 67,
        "fullcodeline": "apply_autocmds(EVENT_WINENTER, NULL, NULL, FALSE, curbuf);"
    },
    {
        "line": 68,
        "fullcodeline": "apply_autocmds(EVENT_TABNEW, NULL, NULL, FALSE, curbuf);"
    },
    {
        "line": 69,
        "fullcodeline": "apply_autocmds(EVENT_TABENTER, NULL, NULL, FALSE, curbuf);"
    },
    {
        "line": 26,
        "fullcodeline": "if (after == 1)"
    },
    {
        "line": 29,
        "fullcodeline": "newtp->tp_next = first_tabpage;"
    },
    {
        "line": 30,
        "fullcodeline": "first_tabpage = newtp;"
    },
    {
        "line": 42,
        "fullcodeline": "newtp->tp_next = tp->tp_next;"
    },
    {
        "line": 43,
        "fullcodeline": "tp->tp_next = newtp;"
    },
    {
        "line": 34,
        "fullcodeline": "if (after > 0)"
    },
    {
        "line": 37,
        "fullcodeline": "n = 2;"
    },
    {
        "line": 38,
        "fullcodeline": "for (tp = first_tabpage; tp->tp_next != NULL"
    },
    {
        "line": 39,
        "fullcodeline": "&& n < after; tp = tp->tp_next)"
    },
    {
        "line": 40,
        "fullcodeline": "++n;"
    }
]