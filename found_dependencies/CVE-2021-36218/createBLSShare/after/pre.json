[
    {
        "line": 3,
        "fullcodeline": "CHECK_STATE(s_shares);"
    },
    {
        "line": 4,
        "fullcodeline": "CHECK_STATE(encryptedKeyHex);"
    },
    {
        "line": 6,
        "fullcodeline": "vector<char> errMsg(BUF_LEN,0);"
    },
    {
        "line": 7,
        "fullcodeline": "int errStatus = 0;"
    },
    {
        "line": 10,
        "fullcodeline": "SAFE_UINT8_BUF(encr_bls_key,BUF_LEN);"
    },
    {
        "line": 11,
        "fullcodeline": "SAFE_UINT8_BUF(encr_key,BUF_LEN);"
    },
    {
        "line": 16,
        "fullcodeline": "uint64_t enc_bls_len = 0;"
    },
    {
        "line": 18,
        "fullcodeline": "sgx_status_t status = trustedCreateBlsKeyAES(eid, &errStatus, errMsg.data(), s_shares, encr_key, decKeyLen, encr_bls_key,"
    },
    {
        "line": 23,
        "fullcodeline": "SAFE_CHAR_BUF(hexBLSKey,2 * BUF_LEN)"
    },
    {
        "line": 25,
        "fullcodeline": "carray2Hex(encr_bls_key, enc_bls_len, hexBLSKey, 2 * BUF_LEN);"
    },
    {
        "line": 12,
        "fullcodeline": "if (!hex2carray(encryptedKeyHex, &decKeyLen, encr_key, BUF_LEN)) {"
    },
    {
        "line": 21,
        "fullcodeline": "HANDLE_TRUSTED_FUNCTION_ERROR(status, errStatus, errMsg.data());"
    },
    {
        "line": 13,
        "fullcodeline": "throw SGXException(INVALID_HEX, \"Invalid encryptedKeyHex\");"
    }
]