[
    {
        "line": 3,
        "fullcodeline": "LOG_INFO(__FUNCTION__);"
    },
    {
        "line": 7,
        "fullcodeline": "CHECK_STATE(pub_key_x);"
    },
    {
        "line": 8,
        "fullcodeline": "CHECK_STATE(pub_key_y);"
    },
    {
        "line": 10,
        "fullcodeline": "RANDOM_CHAR_BUF(rand_char, 32);"
    },
    {
        "line": 13,
        "fullcodeline": "mpz_init(seed);"
    },
    {
        "line": 15,
        "fullcodeline": "mpz_init(skey);"
    },
    {
        "line": 17,
        "fullcodeline": "point Pkey = point_init();"
    },
    {
        "line": 19,
        "fullcodeline": "mpz_import(seed, 32, 1, sizeof(rand_char[0]), 0, 0, rand_char);"
    },
    {
        "line": 21,
        "fullcodeline": "mpz_mod(skey, seed, curve->p);"
    },
    {
        "line": 23,
        "fullcodeline": "signature_extract_public_key(Pkey, skey, curve);"
    },
    {
        "line": 25,
        "fullcodeline": "SAFE_CHAR_BUF(arr_x, BUF_LEN);"
    },
    {
        "line": 26,
        "fullcodeline": "mpz_get_str(arr_x, ECDSA_SKEY_BASE, Pkey->x);"
    },
    {
        "line": 27,
        "fullcodeline": "int n_zeroes = 64 - strlen(arr_x);"
    },
    {
        "line": 32,
        "fullcodeline": "strncpy(pub_key_x + n_zeroes, arr_x, 1024 - n_zeroes);"
    },
    {
        "line": 34,
        "fullcodeline": "SAFE_CHAR_BUF(arr_y, BUF_LEN);"
    },
    {
        "line": 35,
        "fullcodeline": "mpz_get_str(arr_y, ECDSA_SKEY_BASE, Pkey->y);"
    },
    {
        "line": 36,
        "fullcodeline": "n_zeroes = 64 - strlen(arr_y);"
    },
    {
        "line": 40,
        "fullcodeline": "strncpy(pub_key_y + n_zeroes, arr_y, 1024 - n_zeroes);"
    },
    {
        "line": 42,
        "fullcodeline": "SAFE_CHAR_BUF(skey_str, BUF_LEN);"
    },
    {
        "line": 43,
        "fullcodeline": "SAFE_CHAR_BUF(arr_skey_str, mpz_sizeinbase(skey, ECDSA_SKEY_BASE) + 2);"
    },
    {
        "line": 44,
        "fullcodeline": "mpz_get_str(arr_skey_str, ECDSA_SKEY_BASE, skey);"
    },
    {
        "line": 45,
        "fullcodeline": "n_zeroes = 64 - strlen(arr_skey_str);"
    },
    {
        "line": 49,
        "fullcodeline": "strncpy(skey_str + n_zeroes, arr_skey_str, 65 - n_zeroes);"
    },
    {
        "line": 50,
        "fullcodeline": "snprintf(errString, BUF_LEN, \"skey len is %d\\n\", (int) strlen(skey_str));"
    },
    {
        "line": 52,
        "fullcodeline": "int status = AES_encrypt((char *) skey_str, encryptedPrivateKey, BUF_LEN,"
    },
    {
        "line": 54,
        "fullcodeline": "CHECK_STATUS(\"ecdsa private key encryption failed\");"
    },
    {
        "line": 56,
        "fullcodeline": "status = AES_decrypt(encryptedPrivateKey, *enc_len, skey_str, BUF_LEN);"
    },
    {
        "line": 58,
        "fullcodeline": "CHECK_STATUS2(\"ecdsa private key decr failed with status %d\");"
    },
    {
        "line": 62,
        "fullcodeline": "mpz_clear(seed);"
    },
    {
        "line": 63,
        "fullcodeline": "mpz_clear(skey);"
    },
    {
        "line": 64,
        "fullcodeline": "point_clear(Pkey);"
    },
    {
        "line": 65,
        "fullcodeline": "LOG_INFO(__FUNCTION__ );"
    },
    {
        "line": 66,
        "fullcodeline": "LOG_INFO(\"SGX call completed\");"
    },
    {
        "line": 28,
        "fullcodeline": "for (int i = 0; i < n_zeroes; i++) {"
    },
    {
        "line": 37,
        "fullcodeline": "for (int i = 0; i < n_zeroes; i++) {"
    },
    {
        "line": 46,
        "fullcodeline": "for (int i = 0; i < n_zeroes; i++) {"
    },
    {
        "line": 29,
        "fullcodeline": "pub_key_x[i] = '0';"
    },
    {
        "line": 38,
        "fullcodeline": "pub_key_y[i] = '0';"
    },
    {
        "line": 47,
        "fullcodeline": "skey_str[i] = '0';"
    }
]