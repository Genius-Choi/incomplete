[
    {
        "line": 2,
        "fullcodeline": "vector<char> errMsg(1024, 0);"
    },
    {
        "line": 3,
        "fullcodeline": "int err_status = 0;"
    },
    {
        "line": 4,
        "fullcodeline": "vector <uint8_t> encrypted_SEK(1024, 0);"
    },
    {
        "line": 5,
        "fullcodeline": "uint32_t enc_len = 0;"
    },
    {
        "line": 7,
        "fullcodeline": "SAFE_CHAR_BUF(SEK, 65);"
    },
    {
        "line": 9,
        "fullcodeline": "spdlog::info(\"Generating backup key. Will be stored in backup_key.txt ... \");"
    },
    {
        "line": 11,
        "fullcodeline": "sgx_status_t status = trustedGenerateSEK(eid, &err_status, errMsg.data(), encrypted_SEK.data(), &enc_len, SEK);"
    },
    {
        "line": 13,
        "fullcodeline": "HANDLE_TRUSTED_FUNCTION_ERROR(status, err_status, errMsg.data());"
    },
    {
        "line": 26,
        "fullcodeline": "ofstream sek_file(BACKUP_PATH);"
    },
    {
        "line": 27,
        "fullcodeline": "sek_file.clear();"
    },
    {
        "line": 32,
        "fullcodeline": "cout << \"ATTENTION! YOUR BACKUP KEY HAS BEEN WRITTEN INTO sgx_data/backup_key.txt \\n\" <<"
    },
    {
        "line": 16,
        "fullcodeline": "if (strnlen(SEK, 33) != 32) {"
    },
    {
        "line": 22,
        "fullcodeline": "carray2Hex(encrypted_SEK.data(), enc_len, hexEncrKey.data(), 2 * enc_len + 1);"
    },
    {
        "line": 37,
        "fullcodeline": "if (!autoconfirm) {"
    },
    {
        "line": 48,
        "fullcodeline": "LevelDB::getLevelDb()->writeDataUnique(\"SEK\", hexEncrKey.data());"
    },
    {
        "line": 54,
        "fullcodeline": "shared_ptr <string> encrypted_SEK_ptr = LevelDB::getLevelDb()->readString(\"SEK\");"
    },
    {
        "line": 20,
        "fullcodeline": "vector<char> hexEncrKey(2 * enc_len + 1, 0);"
    },
    {
        "line": 24,
        "fullcodeline": "spdlog::info(string(\"Encrypted storage encryption key:\") + hexEncrKey.data());"
    },
    {
        "line": 38,
        "fullcodeline": "string confirm_str = \"I confirm\";"
    },
    {
        "line": 17,
        "fullcodeline": "throw SGXException(-1, \"strnlen(SEK,33) != 32\");"
    },
    {
        "line": 44,
        "fullcodeline": "} while (case_insensitive_match(confirm_str, buffer));"
    },
    {
        "line": 43,
        "fullcodeline": "getline(cin, buffer);"
    },
    {
        "line": 41,
        "fullcodeline": "cout << \" DO YOU CONFIRM THAT YOU COPIED THE KEY? (if you confirm type - I confirm)\""
    }
]