[
    {
        "line": 3,
        "fullcodeline": "LOG_DEBUG(__FUNCTION__);"
    },
    {
        "line": 9,
        "fullcodeline": "mpz_init(privateKeyMpz);"
    },
    {
        "line": 10,
        "fullcodeline": "point pKey = point_init();"
    },
    {
        "line": 12,
        "fullcodeline": "point pKey_test = point_init();"
    },
    {
        "line": 14,
        "fullcodeline": "CHECK_STATE(encryptedPrivateKey);"
    },
    {
        "line": 15,
        "fullcodeline": "CHECK_STATE(pub_key_x);"
    },
    {
        "line": 16,
        "fullcodeline": "CHECK_STATE(pub_key_y);"
    },
    {
        "line": 18,
        "fullcodeline": "int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, BUF_LEN);"
    },
    {
        "line": 19,
        "fullcodeline": "CHECK_STATUS2(\"AES_decrypt failed with status %d\");"
    },
    {
        "line": 21,
        "fullcodeline": "skey[enc_len - SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE] = '\\0';"
    },
    {
        "line": 22,
        "fullcodeline": "strncpy(errString, skey, 1024);"
    },
    {
        "line": 24,
        "fullcodeline": "status = mpz_set_str(privateKeyMpz, skey, ECDSA_SKEY_BASE);"
    },
    {
        "line": 26,
        "fullcodeline": "CHECK_STATUS(\"mpz_set_str failed for private key\");"
    },
    {
        "line": 28,
        "fullcodeline": "signature_extract_public_key(pKey, privateKeyMpz, curve);"
    },
    {
        "line": 31,
        "fullcodeline": "point_multiplication(pKey_test, privateKeyMpz, curve->G, curve);"
    },
    {
        "line": 40,
        "fullcodeline": "SAFE_CHAR_BUF(arr_x, BUF_LEN);"
    },
    {
        "line": 41,
        "fullcodeline": "mpz_get_str(arr_x, ECDSA_SKEY_BASE, pKey->x);"
    },
    {
        "line": 43,
        "fullcodeline": "int n_zeroes = 64 - strlen(arr_x);"
    },
    {
        "line": 48,
        "fullcodeline": "strncpy(pub_key_x + n_zeroes, arr_x, 1024 - n_zeroes);"
    },
    {
        "line": 50,
        "fullcodeline": "SAFE_CHAR_BUF(arr_y, BUF_LEN);"
    },
    {
        "line": 51,
        "fullcodeline": "mpz_get_str(arr_y, ECDSA_SKEY_BASE, pKey->y);"
    },
    {
        "line": 53,
        "fullcodeline": "n_zeroes = 64 - strlen(arr_y);"
    },
    {
        "line": 57,
        "fullcodeline": "strncpy(pub_key_y + n_zeroes, arr_y, 1024 - n_zeroes);"
    },
    {
        "line": 61,
        "fullcodeline": "mpz_clear(privateKeyMpz);"
    },
    {
        "line": 62,
        "fullcodeline": "point_clear(pKey);"
    },
    {
        "line": 63,
        "fullcodeline": "point_clear(pKey_test);"
    },
    {
        "line": 65,
        "fullcodeline": "static uint64_t counter = 0;"
    },
    {
        "line": 72,
        "fullcodeline": "counter++;"
    },
    {
        "line": 33,
        "fullcodeline": "if (!point_cmp(pKey, pKey_test)) {"
    },
    {
        "line": 44,
        "fullcodeline": "for (int i = 0; i < n_zeroes; i++) {"
    },
    {
        "line": 54,
        "fullcodeline": "for (int i = 0; i < n_zeroes; i++) {"
    },
    {
        "line": 67,
        "fullcodeline": "if (counter % 1000 == 0) {"
    },
    {
        "line": 34,
        "fullcodeline": "snprintf(errString, BUF_LEN, \"Points are not equal\");"
    },
    {
        "line": 35,
        "fullcodeline": "LOG_ERROR(errString);"
    },
    {
        "line": 36,
        "fullcodeline": "*errStatus = -11;"
    },
    {
        "line": 45,
        "fullcodeline": "pub_key_x[i] = '0';"
    },
    {
        "line": 55,
        "fullcodeline": "pub_key_y[i] = '0';"
    },
    {
        "line": 68,
        "fullcodeline": "LOG_INFO(__FUNCTION__);"
    },
    {
        "line": 69,
        "fullcodeline": "LOG_INFO(\"Thousand SGX calls completed\");"
    }
]