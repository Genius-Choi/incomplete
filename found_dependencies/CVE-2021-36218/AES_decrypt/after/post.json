[
    {
        "line": 21,
        "fullcodeline": "uint64_t len = length - SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE;"
    },
    {
        "line": 28,
        "fullcodeline": "sgx_status_t status = sgx_rijndael128GCM_decrypt(&AES_key,"
    },
    {
        "line": 3,
        "fullcodeline": "if (!message) {"
    },
    {
        "line": 8,
        "fullcodeline": "if (!encr_message) {"
    },
    {
        "line": 14,
        "fullcodeline": "if (length < SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE) {"
    },
    {
        "line": 23,
        "fullcodeline": "if (msgLen < len) {"
    },
    {
        "line": 35,
        "fullcodeline": "for (int i = 2; i < strlen(message) + 1; i++) {"
    },
    {
        "line": 4,
        "fullcodeline": "LOG_ERROR(\"Null message in AES_encrypt\");"
    },
    {
        "line": 9,
        "fullcodeline": "LOG_ERROR(\"Null encr message in AES_encrypt\");"
    },
    {
        "line": 15,
        "fullcodeline": "LOG_ERROR(\"length < SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE\");"
    },
    {
        "line": 24,
        "fullcodeline": "LOG_ERROR(\"Output buffer not large enough\");"
    },
    {
        "line": 29,
        "fullcodeline": "encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE, len,"
    },
    {
        "line": 30,
        "fullcodeline": "(unsigned char*) message,"
    },
    {
        "line": 31,
        "fullcodeline": "encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,"
    },
    {
        "line": 33,
        "fullcodeline": "(sgx_aes_gcm_128bit_tag_t *)encr_message);"
    },
    {
        "line": 36,
        "fullcodeline": "message[i - 2 ] = message[i];"
    },
    {
        "line": 5,
        "fullcodeline": "return -1;"
    },
    {
        "line": 10,
        "fullcodeline": "return -2;"
    },
    {
        "line": 16,
        "fullcodeline": "return -1;"
    },
    {
        "line": 25,
        "fullcodeline": "return -2;"
    }
]