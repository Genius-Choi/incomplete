[
    {
        "line": 3,
        "fullcodeline": "LOG_DEBUG(__FUNCTION__);"
    },
    {
        "line": 8,
        "fullcodeline": "CHECK_STATE(hash);"
    },
    {
        "line": 9,
        "fullcodeline": "CHECK_STATE(sigR);"
    },
    {
        "line": 10,
        "fullcodeline": "CHECK_STATE(sigS);"
    },
    {
        "line": 12,
        "fullcodeline": "SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);"
    },
    {
        "line": 15,
        "fullcodeline": "mpz_init(privateKeyMpz);"
    },
    {
        "line": 17,
        "fullcodeline": "mpz_init(msgMpz);"
    },
    {
        "line": 18,
        "fullcodeline": "signature sign = signature_init();"
    },
    {
        "line": 20,
        "fullcodeline": "int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);"
    },
    {
        "line": 22,
        "fullcodeline": "CHECK_STATUS2(\"aes decrypt failed with status %d\");"
    },
    {
        "line": 24,
        "fullcodeline": "skey[enc_len - SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE] = '\\0';"
    },
    {
        "line": 40,
        "fullcodeline": "signature_sign(sign, msgMpz, privateKeyMpz, curve);"
    },
    {
        "line": 42,
        "fullcodeline": "sigCounter++;"
    },
    {
        "line": 60,
        "fullcodeline": "SAFE_CHAR_BUF(arrM, BUF_LEN);"
    },
    {
        "line": 61,
        "fullcodeline": "mpz_get_str(arrM, 16, msgMpz);"
    },
    {
        "line": 62,
        "fullcodeline": "snprintf(errString, BUF_LEN, \"message is %s \", arrM);"
    },
    {
        "line": 64,
        "fullcodeline": "SAFE_CHAR_BUF(arrR, BUF_LEN);"
    },
    {
        "line": 65,
        "fullcodeline": "mpz_get_str(arrR, base, sign->r);"
    },
    {
        "line": 66,
        "fullcodeline": "strncpy(sigR, arrR, 1024);"
    },
    {
        "line": 68,
        "fullcodeline": "SAFE_CHAR_BUF(arrS, BUF_LEN);"
    },
    {
        "line": 69,
        "fullcodeline": "mpz_get_str(arrS, base, sign->s);"
    },
    {
        "line": 70,
        "fullcodeline": "strncpy(sigS, arrS, 1024);"
    },
    {
        "line": 72,
        "fullcodeline": "*sig_v = sign->v;"
    },
    {
        "line": 77,
        "fullcodeline": "mpz_clear(privateKeyMpz);"
    },
    {
        "line": 78,
        "fullcodeline": "mpz_clear(msgMpz);"
    },
    {
        "line": 79,
        "fullcodeline": "signature_free(sign);"
    },
    {
        "line": 80,
        "fullcodeline": "LOG_DEBUG(__FUNCTION__ );"
    },
    {
        "line": 81,
        "fullcodeline": "LOG_DEBUG(\"SGX call completed\");"
    },
    {
        "line": 26,
        "fullcodeline": "if (mpz_set_str(privateKeyMpz, skey, ECDSA_SKEY_BASE) == -1) {"
    },
    {
        "line": 33,
        "fullcodeline": "if (mpz_set_str(msgMpz, hash, 16) == -1) {"
    },
    {
        "line": 44,
        "fullcodeline": "if (sigCounter % 1000 == 0) {"
    },
    {
        "line": 27,
        "fullcodeline": "*errStatus = -1;"
    },
    {
        "line": 28,
        "fullcodeline": "snprintf(errString, BUF_LEN, \"invalid secret key\");"
    },
    {
        "line": 29,
        "fullcodeline": "LOG_ERROR(errString);"
    },
    {
        "line": 34,
        "fullcodeline": "*errStatus = -1;"
    },
    {
        "line": 35,
        "fullcodeline": "snprintf(errString, BUF_LEN, \"invalid message hash\");"
    },
    {
        "line": 36,
        "fullcodeline": "LOG_ERROR(errString);"
    },
    {
        "line": 46,
        "fullcodeline": "point Pkey = point_init();"
    },
    {
        "line": 48,
        "fullcodeline": "signature_extract_public_key(Pkey, privateKeyMpz, curve);"
    },
    {
        "line": 57,
        "fullcodeline": "point_clear(Pkey);"
    },
    {
        "line": 50,
        "fullcodeline": "if (!signature_verify(msgMpz, sign, Pkey, curve)) {"
    },
    {
        "line": 51,
        "fullcodeline": "*errStatus = -2;"
    },
    {
        "line": 52,
        "fullcodeline": "snprintf(errString, BUF_LEN, \"signature is not verified! \");"
    },
    {
        "line": 53,
        "fullcodeline": "point_clear(Pkey);"
    }
]