[
    {
        "line": 2,
        "fullcodeline": "std::vector<int64_t> ksize;"
    },
    {
        "line": 3,
        "fullcodeline": "if (ctx->num_inputs() == 1) {"
    },
    {
        "line": 4,
        "fullcodeline": "ksize = ksize_;"
    },
    {
        "line": 6,
        "fullcodeline": "const TensorShape ksize_shape = ctx->InputShape(1);"
    },
    {
        "line": 18,
        "fullcodeline": "auto status = ctx->ConstantInputAsIntVector(1, &ksize);"
    },
    {
        "line": 8,
        "fullcodeline": "if (!TensorShapeUtils::IsVector(ksize_shape)) {"
    },
    {
        "line": 12,
        "fullcodeline": "if (ksize_shape.num_elements() != num_dims()) {"
    },
    {
        "line": 19,
        "fullcodeline": "if (!status.ok()) {"
    },
    {
        "line": 9,
        "fullcodeline": "return errors::InvalidArgument(\"ksize must be a vector, not shape \","
    },
    {
        "line": 13,
        "fullcodeline": "return errors::InvalidArgument("
    },
    {
        "line": 10,
        "fullcodeline": "ksize_shape.DebugString());"
    }
]