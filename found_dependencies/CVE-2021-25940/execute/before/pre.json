[
    {
        "line": 2,
        "fullcodeline": "auto const type = _request->requestType();"
    },
    {
        "line": 8,
        "fullcodeline": "bool parseSuccess = false;"
    },
    {
        "line": 9,
        "fullcodeline": "VPackSlice slice = this->parseVPackBody(parseSuccess);"
    },
    {
        "line": 18,
        "fullcodeline": "VPackSlice usernameSlice = slice.get(\"username\");"
    },
    {
        "line": 19,
        "fullcodeline": "VPackSlice passwordSlice = slice.get(\"password\");"
    },
    {
        "line": 25,
        "fullcodeline": "_username = usernameSlice.copyString();"
    },
    {
        "line": 26,
        "fullcodeline": "std::string const password = passwordSlice.copyString();"
    },
    {
        "line": 28,
        "fullcodeline": "auth::UserManager* um = AuthenticationFeature::instance()->userManager();"
    },
    {
        "line": 3,
        "fullcodeline": "if (type != rest::RequestType::POST) {"
    },
    {
        "line": 29,
        "fullcodeline": "if (um == nullptr) {"
    },
    {
        "line": 4,
        "fullcodeline": "generateError(rest::ResponseCode::METHOD_NOT_ALLOWED, TRI_ERROR_HTTP_METHOD_NOT_ALLOWED);"
    },
    {
        "line": 14,
        "fullcodeline": "if (!slice.isObject()) {"
    },
    {
        "line": 21,
        "fullcodeline": "if (!usernameSlice.isString() || !passwordSlice.isString()) {"
    },
    {
        "line": 30,
        "fullcodeline": "std::string msg = \"This server does not support users\";"
    },
    {
        "line": 31,
        "fullcodeline": "LOG_TOPIC(\"2e7d4\", ERR, Logger::AUTHENTICATION) << msg;"
    },
    {
        "line": 15,
        "fullcodeline": "return badRequest();"
    },
    {
        "line": 22,
        "fullcodeline": "return badRequest();"
    },
    {
        "line": 33,
        "fullcodeline": "} else if (um->checkPassword(_username, password)) {"
    },
    {
        "line": 41,
        "fullcodeline": "_isValid = true;"
    },
    {
        "line": 36,
        "fullcodeline": "VPackObjectBuilder b(&resultBuilder);"
    },
    {
        "line": 37,
        "fullcodeline": "std::string jwt = generateJwt(_username, password);"
    },
    {
        "line": 38,
        "fullcodeline": "resultBuilder.add(\"jwt\", VPackValue(jwt));"
    },
    {
        "line": 42,
        "fullcodeline": "generateDocument(resultBuilder.slice(), true, &VPackOptions::Defaults);"
    }
]