[
    {
        "line": 3,
        "fullcodeline": "const int num_nodes = g->num_node_ids();"
    },
    {
        "line": 4,
        "fullcodeline": "cf_info->frame_names.resize(num_nodes);"
    },
    {
        "line": 6,
        "fullcodeline": "parent_nodes.resize(num_nodes);"
    },
    {
        "line": 8,
        "fullcodeline": "visited.resize(num_nodes);"
    },
    {
        "line": 22,
        "fullcodeline": "while (!ready.empty()) {"
    },
    {
        "line": 66,
        "fullcodeline": "return Status::OK();"
    },
    {
        "line": 23,
        "fullcodeline": "Node* curr_node = ready.front();"
    },
    {
        "line": 24,
        "fullcodeline": "int curr_id = curr_node->id();"
    },
    {
        "line": 25,
        "fullcodeline": "ready.pop_front();"
    },
    {
        "line": 27,
        "fullcodeline": "Node* parent = nullptr;"
    },
    {
        "line": 15,
        "fullcodeline": "if (n->in_edges().empty()) {"
    },
    {
        "line": 28,
        "fullcodeline": "if (IsEnter(curr_node)) {"
    },
    {
        "line": 16,
        "fullcodeline": "visited[n->id()] = true;"
    },
    {
        "line": 17,
        "fullcodeline": "cf_info->unique_frame_names.insert(frame_name);"
    },
    {
        "line": 18,
        "fullcodeline": "ready.push_back(n);"
    },
    {
        "line": 30,
        "fullcodeline": "TF_RETURN_IF_ERROR("
    },
    {
        "line": 32,
        "fullcodeline": "parent = curr_node;"
    },
    {
        "line": 48,
        "fullcodeline": "Node* out = out_edge->dst();"
    },
    {
        "line": 50,
        "fullcodeline": "const int out_id = out->id();"
    },
    {
        "line": 53,
        "fullcodeline": "bool is_visited = visited[out_id];"
    },
    {
        "line": 31,
        "fullcodeline": "GetNodeAttr(curr_node->attrs(), \"frame_name\", &frame_name));"
    },
    {
        "line": 49,
        "fullcodeline": "if (IsSink(out)) continue;"
    },
    {
        "line": 54,
        "fullcodeline": "if (!is_visited) {"
    },
    {
        "line": 33,
        "fullcodeline": "} else if (IsExit(curr_node)) {"
    },
    {
        "line": 55,
        "fullcodeline": "ready.push_back(out);"
    },
    {
        "line": 56,
        "fullcodeline": "visited[out_id] = true;"
    },
    {
        "line": 59,
        "fullcodeline": "cf_info->frame_names[out_id] = frame_name;"
    },
    {
        "line": 60,
        "fullcodeline": "parent_nodes[out_id] = parent;"
    },
    {
        "line": 61,
        "fullcodeline": "cf_info->unique_frame_names.insert(frame_name);"
    },
    {
        "line": 35,
        "fullcodeline": "parent = parent_nodes[curr_id];"
    },
    {
        "line": 40,
        "fullcodeline": "frame_name = cf_info->frame_names[parent->id()];"
    },
    {
        "line": 41,
        "fullcodeline": "parent = parent_nodes[parent->id()];"
    },
    {
        "line": 36,
        "fullcodeline": "if (!parent) {"
    },
    {
        "line": 43,
        "fullcodeline": "parent = parent_nodes[curr_id];"
    },
    {
        "line": 44,
        "fullcodeline": "frame_name = cf_info->frame_names[curr_id];"
    },
    {
        "line": 37,
        "fullcodeline": "return errors::InvalidArgument("
    }
]