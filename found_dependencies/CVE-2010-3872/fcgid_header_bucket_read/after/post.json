[
    {
        "line": 6,
        "fullcodeline": "fcgid_bucket_ctx *ctx = (fcgid_bucket_ctx *) b->data;"
    },
    {
        "line": 10,
        "fullcodeline": "apr_bucket *curbucket = b;"
    },
    {
        "line": 13,
        "fullcodeline": "hasread = 0;"
    },
    {
        "line": 35,
        "fullcodeline": "bodysize <<= 8;"
    },
    {
        "line": 36,
        "fullcodeline": "bodysize += header.contentLengthB0;"
    },
    {
        "line": 146,
        "fullcodeline": "hasread = 0;"
    },
    {
        "line": 177,
        "fullcodeline": "b = apr_bucket_immortal_make(b, \"\", 0);"
    },
    {
        "line": 14,
        "fullcodeline": "while (hasread < sizeof(header)) {"
    },
    {
        "line": 39,
        "fullcodeline": "if (header.type == FCGI_STDERR) {"
    },
    {
        "line": 147,
        "fullcodeline": "while (hasread < header.paddingLength) {"
    },
    {
        "line": 165,
        "fullcodeline": "if (header.type != FCGI_END_REQUEST) {"
    },
    {
        "line": 178,
        "fullcodeline": "return apr_bucket_read(b, str, len, APR_BLOCK_READ);"
    },
    {
        "line": 25,
        "fullcodeline": "putsize = fcgid_min(bufferlen, sizeof(header) - hasread);"
    },
    {
        "line": 26,
        "fullcodeline": "memcpy((apr_byte_t *)&header + hasread, buffer, putsize);"
    },
    {
        "line": 27,
        "fullcodeline": "hasread += putsize;"
    },
    {
        "line": 30,
        "fullcodeline": "fcgid_ignore_bytes(ctx, putsize);"
    },
    {
        "line": 40,
        "fullcodeline": "char *logbuf = apr_bucket_alloc(APR_BUCKET_BUFF_SIZE, b->list);"
    },
    {
        "line": 43,
        "fullcodeline": "memset(logbuf, 0, APR_BUCKET_BUFF_SIZE);"
    },
    {
        "line": 45,
        "fullcodeline": "hasread = 0;"
    },
    {
        "line": 69,
        "fullcodeline": "line = logbuf;"
    },
    {
        "line": 85,
        "fullcodeline": "apr_bucket_free(logbuf);"
    },
    {
        "line": 157,
        "fullcodeline": "canignore = fcgid_min(bufferlen, header.paddingLength - hasread);"
    },
    {
        "line": 158,
        "fullcodeline": "hasread += canignore;"
    },
    {
        "line": 161,
        "fullcodeline": "fcgid_ignore_bytes(ctx, canignore);"
    },
    {
        "line": 166,
        "fullcodeline": "apr_bucket *headerbucket ="
    },
    {
        "line": 168,
        "fullcodeline": "APR_BUCKET_INSERT_AFTER(curbucket, headerbucket);"
    },
    {
        "line": 19,
        "fullcodeline": "if ((rv ="
    },
    {
        "line": 46,
        "fullcodeline": "while (hasread < bodysize) {"
    },
    {
        "line": 152,
        "fullcodeline": "if ((rv ="
    },
    {
        "line": 167,
        "fullcodeline": "ap_bucket_fcgid_header_create(b->list, ctx);"
    },
    {
        "line": 58,
        "fullcodeline": "canput = fcgid_min(bufferlen, bodysize - hasread);"
    },
    {
        "line": 59,
        "fullcodeline": "willput ="
    },
    {
        "line": 61,
        "fullcodeline": "memcpy(logbuf + hasread, buffer, willput);"
    },
    {
        "line": 62,
        "fullcodeline": "hasread += canput;"
    },
    {
        "line": 65,
        "fullcodeline": "fcgid_ignore_bytes(ctx, canput);"
    },
    {
        "line": 71,
        "fullcodeline": "char *end = strpbrk(line, \"\\r\\n\");"
    },
    {
        "line": 76,
        "fullcodeline": "ap_log_rerror(APLOG_MARK, APLOG_WARNING, 0, ctx->ipc.request,"
    },
    {
        "line": 81,
        "fullcodeline": "++end;"
    },
    {
        "line": 82,
        "fullcodeline": "line = end + strspn(end, \"\\r\\n\");"
    },
    {
        "line": 90,
        "fullcodeline": "else if (header.type == FCGI_STDOUT) {"
    },
    {
        "line": 171,
        "fullcodeline": "if ((rv = apr_pool_cleanup_run(ctx->ipc.request->pool,"
    },
    {
        "line": 20,
        "fullcodeline": "fcgid_feed_data(ctx, b->list, &buffer,"
    },
    {
        "line": 51,
        "fullcodeline": "if ((rv ="
    },
    {
        "line": 60,
        "fullcodeline": "fcgid_min(canput, APR_BUCKET_BUFF_SIZE - hasread - 1);"
    },
    {
        "line": 73,
        "fullcodeline": "if (end != NULL) {"
    },
    {
        "line": 78,
        "fullcodeline": "if (end == NULL) {"
    },
    {
        "line": 91,
        "fullcodeline": "hasread = 0;"
    },
    {
        "line": 153,
        "fullcodeline": "fcgid_feed_data(ctx, b->list, &buffer,"
    },
    {
        "line": 54,
        "fullcodeline": "apr_bucket_free(logbuf);"
    },
    {
        "line": 74,
        "fullcodeline": "*end = '\\0';"
    },
    {
        "line": 92,
        "fullcodeline": "while (hasread < bodysize) {"
    },
    {
        "line": 52,
        "fullcodeline": "fcgid_feed_data(ctx, b->list, &buffer,"
    },
    {
        "line": 103,
        "fullcodeline": "canput = fcgid_min(bufferlen, bodysize - hasread);"
    },
    {
        "line": 106,
        "fullcodeline": "buckettmp = ctx->buffer;"
    },
    {
        "line": 116,
        "fullcodeline": "APR_BUCKET_INSERT_AFTER(curbucket, buckettmp);"
    },
    {
        "line": 117,
        "fullcodeline": "curbucket = buckettmp;"
    },
    {
        "line": 118,
        "fullcodeline": "hasread += canput;"
    },
    {
        "line": 124,
        "fullcodeline": "else if (header.type == FCGI_END_REQUEST) {"
    },
    {
        "line": 98,
        "fullcodeline": "if ((rv ="
    },
    {
        "line": 107,
        "fullcodeline": "if (canput == (bodysize - hasread)) {"
    },
    {
        "line": 126,
        "fullcodeline": "hasread = 0;"
    },
    {
        "line": 108,
        "fullcodeline": "apr_bucket_split(ctx->buffer, canput);"
    },
    {
        "line": 109,
        "fullcodeline": "ctx->buffer = APR_BUCKET_NEXT(ctx->buffer);"
    },
    {
        "line": 110,
        "fullcodeline": "APR_BUCKET_REMOVE(buckettmp);"
    },
    {
        "line": 127,
        "fullcodeline": "while (hasread < bodysize) {"
    },
    {
        "line": 99,
        "fullcodeline": "fcgid_feed_data(ctx, b->list, &buffer,"
    },
    {
        "line": 113,
        "fullcodeline": "ctx->buffer = NULL;"
    },
    {
        "line": 137,
        "fullcodeline": "canignore = fcgid_min(bufferlen, bodysize);"
    },
    {
        "line": 138,
        "fullcodeline": "hasread += canignore;"
    },
    {
        "line": 141,
        "fullcodeline": "fcgid_ignore_bytes(ctx, canignore);"
    },
    {
        "line": 132,
        "fullcodeline": "if ((rv ="
    },
    {
        "line": 133,
        "fullcodeline": "fcgid_feed_data(ctx, b->list, &buffer,"
    }
]