[
    {
        "line": 4,
        "fullcodeline": "struct dccp_sock *dp = dccp_sk(sk);"
    },
    {
        "line": 5,
        "fullcodeline": "struct dccp_skb_cb *dcb = DCCP_SKB_CB(skb);"
    },
    {
        "line": 6,
        "fullcodeline": "const int old_state = sk->sk_state;"
    },
    {
        "line": 7,
        "fullcodeline": "int queued = 0;"
    },
    {
        "line": 31,
        "fullcodeline": "if (sk->sk_state == DCCP_LISTEN) {"
    },
    {
        "line": 50,
        "fullcodeline": "if (sk->sk_state != DCCP_REQUESTING && dccp_check_seqno(sk, skb))"
    },
    {
        "line": 61,
        "fullcodeline": "if ((dp->dccps_role != DCCP_ROLE_CLIENT &&"
    },
    {
        "line": 71,
        "fullcodeline": "if (dccp_parse_options(sk, NULL, skb))"
    },
    {
        "line": 82,
        "fullcodeline": "if (dh->dccph_type == DCCP_PKT_RESET) {"
    },
    {
        "line": 115,
        "fullcodeline": "if (dh->dccph_type == DCCP_PKT_ACK ||"
    },
    {
        "line": 128,
        "fullcodeline": "if (!queued) {"
    },
    {
        "line": 42,
        "fullcodeline": "dcb->dccpd_reset_code = DCCP_RESET_CODE_NO_CONNECTION;"
    },
    {
        "line": 65,
        "fullcodeline": "(sk->sk_state == DCCP_RESPOND && dh->dccph_type == DCCP_PKT_DATA)) {"
    },
    {
        "line": 66,
        "fullcodeline": "dccp_send_sync(sk, dcb->dccpd_seq, DCCP_PKT_SYNC);"
    },
    {
        "line": 83,
        "fullcodeline": "dccp_rcv_reset(sk, skb);"
    },
    {
        "line": 97,
        "fullcodeline": "queued = dccp_rcv_request_sent_state_process(sk, skb, dh, len);"
    },
    {
        "line": 101,
        "fullcodeline": "__kfree_skb(skb);"
    },
    {
        "line": 106,
        "fullcodeline": "dccp_handle_ackvec_processing(sk, skb);"
    },
    {
        "line": 107,
        "fullcodeline": "dccp_deliver_input_to_ccids(sk, skb);"
    },
    {
        "line": 110,
        "fullcodeline": "queued = dccp_rcv_respond_partopen_state_process(sk, skb,"
    },
    {
        "line": 116,
        "fullcodeline": "dh->dccph_type == DCCP_PKT_DATAACK) {"
    },
    {
        "line": 130,
        "fullcodeline": "__kfree_skb(skb);"
    },
    {
        "line": 32,
        "fullcodeline": "if (dh->dccph_type == DCCP_PKT_REQUEST) {"
    },
    {
        "line": 38,
        "fullcodeline": "if (dh->dccph_type == DCCP_PKT_RESET)"
    },
    {
        "line": 63,
        "fullcodeline": "(dp->dccps_role == DCCP_ROLE_CLIENT &&"
    },
    {
        "line": 98,
        "fullcodeline": "if (queued >= 0)"
    },
    {
        "line": 44,
        "fullcodeline": "} else if (sk->sk_state == DCCP_CLOSED) {"
    },
    {
        "line": 62,
        "fullcodeline": "dh->dccph_type == DCCP_PKT_RESPONSE) ||"
    },
    {
        "line": 64,
        "fullcodeline": "dh->dccph_type == DCCP_PKT_REQUEST) ||"
    },
    {
        "line": 85,
        "fullcodeline": "} else if (dh->dccph_type == DCCP_PKT_CLOSEREQ) {\t/* Step 13 */"
    },
    {
        "line": 119,
        "fullcodeline": "sk->sk_state_change(sk);"
    },
    {
        "line": 120,
        "fullcodeline": "sk_wake_async(sk, SOCK_WAKE_IO, POLL_OUT);"
    },
    {
        "line": 123,
        "fullcodeline": "} else if (unlikely(dh->dccph_type == DCCP_PKT_SYNC)) {"
    },
    {
        "line": 33,
        "fullcodeline": "if (inet_csk(sk)->icsk_af_ops->conn_request(sk,"
    },
    {
        "line": 45,
        "fullcodeline": "dcb->dccpd_reset_code = DCCP_RESET_CODE_NO_CONNECTION;"
    },
    {
        "line": 124,
        "fullcodeline": "dccp_send_sync(sk, dcb->dccpd_seq, DCCP_PKT_SYNCACK);"
    },
    {
        "line": 86,
        "fullcodeline": "if (dccp_rcv_closereq(sk, skb))"
    },
    {
        "line": 89,
        "fullcodeline": "} else if (dh->dccph_type == DCCP_PKT_CLOSE) {\t\t/* Step 14 */"
    },
    {
        "line": 90,
        "fullcodeline": "if (dccp_rcv_close(sk, skb))"
    }
]