[
    {
        "line": 4,
        "fullcodeline": "struct net_bridge *br = netdev_priv(dev);"
    },
    {
        "line": 7,
        "fullcodeline": "int i, err = 0;"
    },
    {
        "line": 8,
        "fullcodeline": "int idx = 0, s_idx = cb->args[1];"
    },
    {
        "line": 13,
        "fullcodeline": "mdb = rcu_dereference(br->mdb);"
    },
    {
        "line": 17,
        "fullcodeline": "nest = nla_nest_start(skb, MDBA_MDB);"
    },
    {
        "line": 14,
        "fullcodeline": "if (!mdb)"
    },
    {
        "line": 18,
        "fullcodeline": "if (nest == NULL)"
    },
    {
        "line": 21,
        "fullcodeline": "for (i = 0; i < mdb->max; i++) {"
    },
    {
        "line": 19,
        "fullcodeline": "return -EMSGSIZE;"
    },
    {
        "line": 30,
        "fullcodeline": "nest2 = nla_nest_start(skb, MDBA_MDB_ENTRY);"
    },
    {
        "line": 58,
        "fullcodeline": "nla_nest_end(skb, nest2);"
    },
    {
        "line": 60,
        "fullcodeline": "idx++;"
    },
    {
        "line": 27,
        "fullcodeline": "if (idx < s_idx)"
    },
    {
        "line": 31,
        "fullcodeline": "if (nest2 == NULL) {"
    },
    {
        "line": 37,
        "fullcodeline": "(p = rcu_dereference(*pp)) != NULL;"
    },
    {
        "line": 32,
        "fullcodeline": "err = -EMSGSIZE;"
    },
    {
        "line": 44,
        "fullcodeline": "if (p->addr.proto == htons(ETH_P_IP))"
    },
    {
        "line": 51,
        "fullcodeline": "if (nla_put(skb, MDBA_MDB_ENTRY_INFO, sizeof(e), &e)) {"
    },
    {
        "line": 52,
        "fullcodeline": "nla_nest_cancel(skb, nest2);"
    },
    {
        "line": 53,
        "fullcodeline": "err = -EMSGSIZE;"
    }
]