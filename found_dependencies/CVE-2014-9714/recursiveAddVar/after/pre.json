[
    {
        "line": 5,
        "fullcodeline": "bool isArray = varVariant.isArray();"
    },
    {
        "line": 6,
        "fullcodeline": "bool isObject = varVariant.isObject();"
    },
    {
        "line": 66,
        "fullcodeline": "std::string varType = getDataTypeString(varVariant.getType()).data();"
    },
    {
        "line": 8,
        "fullcodeline": "if (isArray || isObject) {"
    },
    {
        "line": 16,
        "fullcodeline": "Object varAsObject = varVariant.toObject();"
    },
    {
        "line": 20,
        "fullcodeline": "int length = varAsArray.length();"
    },
    {
        "line": 67,
        "fullcodeline": "if (!getWddxEncoded(varType, \"\", varName, false).empty()) {"
    },
    {
        "line": 21,
        "fullcodeline": "if (length > 0) {"
    },
    {
        "line": 76,
        "fullcodeline": "m_packetString += getWddxEncoded(varType, varValue, varName, hasVarTag);"
    },
    {
        "line": 10,
        "fullcodeline": "m_packetString += \"<var name='\";"
    },
    {
        "line": 11,
        "fullcodeline": "m_packetString += varName.data();"
    },
    {
        "line": 12,
        "fullcodeline": "m_packetString += \"'>\";"
    },
    {
        "line": 17,
        "fullcodeline": "if (isArray) varAsArray = varVariant.toArray();"
    },
    {
        "line": 18,
        "fullcodeline": "if (isObject) varAsArray = varAsObject.toArray();"
    },
    {
        "line": 22,
        "fullcodeline": "ArrayIter it = ArrayIter(varAsArray);"
    },
    {
        "line": 61,
        "fullcodeline": "m_packetString += \"</var>\";"
    },
    {
        "line": 69,
        "fullcodeline": "if (varType.compare(\"boolean\") == 0) {"
    },
    {
        "line": 70,
        "fullcodeline": "varValue = varVariant.toBoolean() ? \"true\" : \"false\";"
    },
    {
        "line": 23,
        "fullcodeline": "if (it.first().isString()) isObject = true;"
    },
    {
        "line": 36,
        "fullcodeline": "for (ArrayIter it(varAsArray); it; ++it) {"
    },
    {
        "line": 72,
        "fullcodeline": "varValue = StringUtil::HtmlEncode(varVariant.toString(),"
    },
    {
        "line": 25,
        "fullcodeline": "m_packetString += \"<struct>\";"
    },
    {
        "line": 37,
        "fullcodeline": "Variant key = it.first();"
    },
    {
        "line": 38,
        "fullcodeline": "Variant value = it.second();"
    },
    {
        "line": 39,
        "fullcodeline": "recursiveAddVar(key.toString(), value, isObject);"
    },
    {
        "line": 42,
        "fullcodeline": "m_packetString += \"</struct>\";"
    },
    {
        "line": 26,
        "fullcodeline": "if (!isArray) {"
    },
    {
        "line": 32,
        "fullcodeline": "m_packetString += \"<array length='\";"
    },
    {
        "line": 33,
        "fullcodeline": "m_packetString += std::to_string(length);"
    },
    {
        "line": 34,
        "fullcodeline": "m_packetString += \"'>\";"
    },
    {
        "line": 45,
        "fullcodeline": "m_packetString += \"</array>\";"
    },
    {
        "line": 51,
        "fullcodeline": "m_packetString += \"<struct>\";"
    },
    {
        "line": 57,
        "fullcodeline": "m_packetString += \"</struct>\";"
    },
    {
        "line": 27,
        "fullcodeline": "m_packetString += \"<var name='php_class_name'><string>\";"
    },
    {
        "line": 28,
        "fullcodeline": "m_packetString += varAsObject->o_getClassName().c_str();"
    },
    {
        "line": 29,
        "fullcodeline": "m_packetString += \"</string></var>\";"
    },
    {
        "line": 52,
        "fullcodeline": "if (!isArray) {"
    },
    {
        "line": 53,
        "fullcodeline": "m_packetString += \"<var name='php_class_name'><string>\";"
    },
    {
        "line": 54,
        "fullcodeline": "m_packetString += varAsObject->o_getClassName().c_str();"
    },
    {
        "line": 55,
        "fullcodeline": "m_packetString += \"</string></var>\";"
    }
]