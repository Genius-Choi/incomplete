[
    {
        "line": 2,
        "fullcodeline": "uint8_t mus_hdr[] = { 'M', 'U', 'S', 0x1A };"
    },
    {
        "line": 3,
        "fullcodeline": "uint32_t mus_song_ofs = 0;"
    },
    {
        "line": 4,
        "fullcodeline": "uint32_t mus_song_len = 0;"
    },
    {
        "line": 5,
        "fullcodeline": "uint16_t mus_ch_cnt1 = 0;"
    },
    {
        "line": 6,
        "fullcodeline": "uint16_t mus_ch_cnt2 = 0;"
    },
    {
        "line": 7,
        "fullcodeline": "uint16_t mus_no_instr = 0;"
    },
    {
        "line": 8,
        "fullcodeline": "uint32_t mus_data_ofs = 0;"
    },
    {
        "line": 9,
        "fullcodeline": "uint16_t * mus_mid_instr = NULL;"
    },
    {
        "line": 10,
        "fullcodeline": "uint16_t mus_instr_cnt = 0;"
    },
    {
        "line": 12,
        "fullcodeline": "uint32_t mus_divisions = 60;"
    },
    {
        "line": 13,
        "fullcodeline": "float tempo_f = 0.0;"
    },
    {
        "line": 14,
        "fullcodeline": "uint16_t mus_freq = 0;"
    },
    {
        "line": 15,
        "fullcodeline": "float samples_per_tick_f = 0.0;"
    },
    {
        "line": 16,
        "fullcodeline": "uint8_t mus_event[] = { 0, 0, 0, 0 };"
    },
    {
        "line": 17,
        "fullcodeline": "uint8_t mus_event_size = 0;"
    },
    {
        "line": 18,
        "fullcodeline": "uint8_t mus_prev_vol[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };"
    },
    {
        "line": 19,
        "fullcodeline": "uint32_t setup_ret = 0;"
    },
    {
        "line": 20,
        "fullcodeline": "uint32_t mus_ticks = 0;"
    },
    {
        "line": 21,
        "fullcodeline": "uint32_t sample_count = 0;"
    },
    {
        "line": 22,
        "fullcodeline": "float sample_count_f = 0.0;"
    },
    {
        "line": 23,
        "fullcodeline": "float sample_remainder = 0.0;"
    },
    {
        "line": 24,
        "fullcodeline": "uint16_t pitchbend_tmp = 0;"
    },
    {
        "line": 37,
        "fullcodeline": "mus_song_len = (mus_data[5] << 8) | mus_data[4];"
    },
    {
        "line": 39,
        "fullcodeline": "mus_song_ofs = (mus_data[7] << 8) | mus_data[6];"
    },
    {
        "line": 42,
        "fullcodeline": "mus_ch_cnt1 = (mus_data[9] << 8) | mus_data[8];"
    },
    {
        "line": 43,
        "fullcodeline": "mus_ch_cnt2 = (mus_data[11] << 8) | mus_data[10];"
    },
    {
        "line": 49,
        "fullcodeline": "mus_no_instr = (mus_data[13] << 8) | mus_data[12];"
    },
    {
        "line": 52,
        "fullcodeline": "mus_data_ofs = 16;"
    },
    {
        "line": 61,
        "fullcodeline": "mus_mid_instr = malloc(mus_no_instr * sizeof(uint16_t));"
    },
    {
        "line": 68,
        "fullcodeline": "mus_data_ofs = mus_song_ofs;"
    },
    {
        "line": 71,
        "fullcodeline": "mus_freq = _cvt_get_option(WM_CO_FREQUENCY);"
    },
    {
        "line": 80,
        "fullcodeline": "samples_per_tick_f = _WM_GetSamplesPerTick(mus_divisions, (uint32_t)tempo_f);"
    },
    {
        "line": 83,
        "fullcodeline": "mus_mdi = _WM_initMDI();"
    },
    {
        "line": 84,
        "fullcodeline": "_WM_midi_setup_divisions(mus_mdi, mus_divisions);"
    },
    {
        "line": 85,
        "fullcodeline": "_WM_midi_setup_tempo(mus_mdi, (uint32_t)tempo_f);"
    },
    {
        "line": 302,
        "fullcodeline": "_WM_midi_setup_endoftrack(mus_mdi);"
    },
    {
        "line": 304,
        "fullcodeline": "mus_mdi->current_event = &mus_mdi->events[0];"
    },
    {
        "line": 305,
        "fullcodeline": "mus_mdi->samples_to_mix = 0;"
    },
    {
        "line": 306,
        "fullcodeline": "mus_mdi->note = NULL;"
    },
    {
        "line": 308,
        "fullcodeline": "_WM_ResetToStart(mus_mdi);"
    },
    {
        "line": 26,
        "fullcodeline": "if (mus_size < 17) {"
    },
    {
        "line": 31,
        "fullcodeline": "if (memcmp(mus_data, mus_hdr, 4)) {"
    },
    {
        "line": 55,
        "fullcodeline": "if (mus_size < (mus_data_ofs + (mus_no_instr << 1) + mus_song_len)) {"
    },
    {
        "line": 62,
        "fullcodeline": "for (mus_instr_cnt = 0; mus_instr_cnt < mus_no_instr; mus_instr_cnt++) {"
    },
    {
        "line": 72,
        "fullcodeline": "if (mus_freq == 0) mus_freq = 140;"
    },
    {
        "line": 74,
        "fullcodeline": "if ((_WM_MixerOptions & WM_MO_ROUNDTEMPO)) {"
    },
    {
        "line": 294,
        "fullcodeline": "} while (mus_data_ofs < mus_size);"
    },
    {
        "line": 298,
        "fullcodeline": "if ((mus_mdi->reverb = _WM_init_reverb(_WM_SampleRate, _WM_reverb_room_width, _WM_reverb_room_length, _WM_reverb_listen_posx, _WM_reverb_listen_posy)) == NULL) {"
    },
    {
        "line": 27,
        "fullcodeline": "_WM_GLOBAL_ERROR(__FUNCTION__, __LINE__, WM_ERR_NOT_MUS, \"File too short\", 0);"
    },
    {
        "line": 32,
        "fullcodeline": "_WM_GLOBAL_ERROR(__FUNCTION__, __LINE__, WM_ERR_NOT_MUS, NULL, 0);"
    },
    {
        "line": 63,
        "fullcodeline": "mus_mid_instr[mus_instr_cnt] = (mus_data[mus_data_ofs + 1] << 8) | mus_data[mus_data_ofs];"
    },
    {
        "line": 64,
        "fullcodeline": "mus_data_ofs += 2;"
    },
    {
        "line": 75,
        "fullcodeline": "tempo_f = (float) (60000000 / mus_freq) + 0.5f;"
    },
    {
        "line": 94,
        "fullcodeline": "MUS_EVENT_DEBUG(\"Before\", mus_data[mus_data_ofs], 0);"
    },
    {
        "line": 102,
        "fullcodeline": "MUS_EVENT_DEBUG(\"After\", mus_data[mus_data_ofs], 0);"
    },
    {
        "line": 269,
        "fullcodeline": "setup_ret = _WM_SetupMidiEvent(mus_mdi, (uint8_t *)mus_event, 0);"
    },
    {
        "line": 280,
        "fullcodeline": "mus_data_ofs += mus_event_size;"
    },
    {
        "line": 282,
        "fullcodeline": "mus_ticks = 0;"
    },
    {
        "line": 287,
        "fullcodeline": "sample_count_f = ((float)mus_ticks * samples_per_tick_f) + sample_remainder;"
    },
    {
        "line": 288,
        "fullcodeline": "sample_count = (uint32_t)sample_count_f;"
    },
    {
        "line": 289,
        "fullcodeline": "sample_remainder = sample_count_f - (float)sample_count;"
    },
    {
        "line": 299,
        "fullcodeline": "_WM_GLOBAL_ERROR(__FUNCTION__, __LINE__, WM_ERR_MEM, \"to init reverb\", 0);"
    },
    {
        "line": 77,
        "fullcodeline": "tempo_f = (float) (60000000 / mus_freq);"
    },
    {
        "line": 96,
        "fullcodeline": "if ((mus_data[mus_data_ofs] & 0x0f) == 0x0f) {"
    },
    {
        "line": 97,
        "fullcodeline": "mus_data[mus_data_ofs] = (mus_data[mus_data_ofs] & 0xf0) | 0x09;"
    },
    {
        "line": 104,
        "fullcodeline": "switch ((mus_data[mus_data_ofs] >> 4) & 0x07) {"
    },
    {
        "line": 106,
        "fullcodeline": "mus_event_size = 2;"
    },
    {
        "line": 107,
        "fullcodeline": "mus_event[0] = 0x80 | (mus_data[mus_data_ofs] & 0x0f);"
    },
    {
        "line": 108,
        "fullcodeline": "mus_event[1] = mus_data[mus_data_ofs + 1];"
    },
    {
        "line": 109,
        "fullcodeline": "mus_event[2] = 0;"
    },
    {
        "line": 110,
        "fullcodeline": "mus_event[3] = 0;"
    },
    {
        "line": 129,
        "fullcodeline": "mus_event_size = 2;"
    },
    {
        "line": 130,
        "fullcodeline": "mus_event[0] = 0xe0 | (mus_data[mus_data_ofs] & 0x0f);"
    },
    {
        "line": 132,
        "fullcodeline": "pitchbend_tmp = mus_data[mus_data_ofs + 1] << 6;"
    },
    {
        "line": 133,
        "fullcodeline": "mus_event[1] = pitchbend_tmp & 0x7f;"
    },
    {
        "line": 134,
        "fullcodeline": "mus_event[2] = (pitchbend_tmp >> 7) & 0x7f;"
    },
    {
        "line": 135,
        "fullcodeline": "mus_event[3] = 0;"
    },
    {
        "line": 138,
        "fullcodeline": "mus_event_size = 2;"
    },
    {
        "line": 185,
        "fullcodeline": "mus_event_size = 3;"
    },
    {
        "line": 257,
        "fullcodeline": "mus_event_size = 1;"
    },
    {
        "line": 264,
        "fullcodeline": "mus_event_size = 1;"
    },
    {
        "line": 275,
        "fullcodeline": "if (!(mus_data[mus_data_ofs] & 0x80)) {"
    },
    {
        "line": 276,
        "fullcodeline": "mus_data_ofs += mus_event_size;"
    },
    {
        "line": 284,
        "fullcodeline": "mus_ticks = (mus_ticks << 7) | (mus_data[mus_data_ofs++] & 0x7f);"
    },
    {
        "line": 113,
        "fullcodeline": "if (mus_data[mus_data_ofs + 1] & 0x80) {"
    },
    {
        "line": 285,
        "fullcodeline": "} while (mus_data[mus_data_ofs - 1] & 0x80);"
    },
    {
        "line": 291,
        "fullcodeline": "mus_mdi->events[mus_mdi->event_count - 1].samples_to_next = sample_count;"
    },
    {
        "line": 114,
        "fullcodeline": "mus_event_size = 3;"
    },
    {
        "line": 115,
        "fullcodeline": "mus_event[0] = 0x90 | (mus_data[mus_data_ofs] & 0x0f);"
    },
    {
        "line": 116,
        "fullcodeline": "mus_event[1] = mus_data[mus_data_ofs + 1] & 0x7f;"
    },
    {
        "line": 117,
        "fullcodeline": "mus_event[2] = mus_data[mus_data_ofs + 2];"
    },
    {
        "line": 118,
        "fullcodeline": "mus_event[3] = 0;"
    },
    {
        "line": 119,
        "fullcodeline": "mus_prev_vol[mus_data[mus_data_ofs] & 0x0f] = mus_event[2];"
    },
    {
        "line": 141,
        "fullcodeline": "mus_event[0] = 0xb0 | (mus_data[mus_data_ofs] & 0x0f);"
    },
    {
        "line": 142,
        "fullcodeline": "mus_event[1] = 120;"
    },
    {
        "line": 143,
        "fullcodeline": "mus_event[2] = 0;"
    },
    {
        "line": 144,
        "fullcodeline": "mus_event[3] = 0;"
    },
    {
        "line": 147,
        "fullcodeline": "mus_event[0] = 0xb0 | (mus_data[mus_data_ofs] & 0x0f);"
    },
    {
        "line": 148,
        "fullcodeline": "mus_event[1] = 123;"
    },
    {
        "line": 149,
        "fullcodeline": "mus_event[2] = 0;"
    },
    {
        "line": 150,
        "fullcodeline": "mus_event[3] = 0;"
    },
    {
        "line": 158,
        "fullcodeline": "mus_event[0] = 0xb0 | (mus_data[mus_data_ofs] & 0x0f);"
    },
    {
        "line": 159,
        "fullcodeline": "mus_event[1] = 126;"
    },
    {
        "line": 160,
        "fullcodeline": "mus_event[2] = 0;"
    },
    {
        "line": 161,
        "fullcodeline": "mus_event[3] = 0;"
    },
    {
        "line": 169,
        "fullcodeline": "mus_event[0] = 0xb0 | (mus_data[mus_data_ofs] & 0x0f);"
    },
    {
        "line": 170,
        "fullcodeline": "mus_event[1] = 127;"
    },
    {
        "line": 171,
        "fullcodeline": "mus_event[2] = 0;"
    },
    {
        "line": 172,
        "fullcodeline": "mus_event[3] = 0;"
    },
    {
        "line": 175,
        "fullcodeline": "mus_event[0] = 0xb0 | (mus_data[mus_data_ofs] & 0x0f);"
    },
    {
        "line": 176,
        "fullcodeline": "mus_event[1] = 121;"
    },
    {
        "line": 177,
        "fullcodeline": "mus_event[2] = 0;"
    },
    {
        "line": 178,
        "fullcodeline": "mus_event[3] = 0;"
    },
    {
        "line": 193,
        "fullcodeline": "mus_event[0] = 0xc0 | (mus_data[mus_data_ofs] & 0x0f);"
    },
    {
        "line": 194,
        "fullcodeline": "mus_event[1] = mus_data[mus_data_ofs + 2];"
    },
    {
        "line": 195,
        "fullcodeline": "mus_event[2] = 0;"
    },
    {
        "line": 196,
        "fullcodeline": "mus_event[3] = 0;"
    },
    {
        "line": 199,
        "fullcodeline": "mus_event[0] = 0xb0 | (mus_data[mus_data_ofs] & 0x0f);"
    },
    {
        "line": 200,
        "fullcodeline": "mus_event[1] = 0;"
    },
    {
        "line": 201,
        "fullcodeline": "mus_event[2] = mus_data[mus_data_ofs + 2];"
    },
    {
        "line": 202,
        "fullcodeline": "mus_event[3] = 0;"
    },
    {
        "line": 205,
        "fullcodeline": "mus_event[0] = 0xb0 | (mus_data[mus_data_ofs] & 0x0f);"
    },
    {
        "line": 206,
        "fullcodeline": "mus_event[1] = 1;"
    },
    {
        "line": 207,
        "fullcodeline": "mus_event[2] = mus_data[mus_data_ofs + 2];"
    },
    {
        "line": 208,
        "fullcodeline": "mus_event[3] = 0;"
    },
    {
        "line": 211,
        "fullcodeline": "mus_event[0] = 0xb0 | (mus_data[mus_data_ofs] & 0x0f);"
    },
    {
        "line": 212,
        "fullcodeline": "mus_event[1] = 7;"
    },
    {
        "line": 213,
        "fullcodeline": "mus_event[2] = mus_data[mus_data_ofs + 2];"
    },
    {
        "line": 214,
        "fullcodeline": "mus_event[3] = 0;"
    },
    {
        "line": 217,
        "fullcodeline": "mus_event[0] = 0xb0 | (mus_data[mus_data_ofs] & 0x0f);"
    },
    {
        "line": 218,
        "fullcodeline": "mus_event[1] = 10;"
    },
    {
        "line": 219,
        "fullcodeline": "mus_event[2] = mus_data[mus_data_ofs + 2];"
    },
    {
        "line": 220,
        "fullcodeline": "mus_event[3] = 0;"
    },
    {
        "line": 223,
        "fullcodeline": "mus_event[0] = 0xb0 | (mus_data[mus_data_ofs] & 0x0f);"
    },
    {
        "line": 224,
        "fullcodeline": "mus_event[1] = 11;"
    },
    {
        "line": 225,
        "fullcodeline": "mus_event[2] = mus_data[mus_data_ofs + 2];"
    },
    {
        "line": 226,
        "fullcodeline": "mus_event[3] = 0;"
    },
    {
        "line": 229,
        "fullcodeline": "mus_event[0] = 0xb0 | (mus_data[mus_data_ofs] & 0x0f);"
    },
    {
        "line": 230,
        "fullcodeline": "mus_event[1] = 91;"
    },
    {
        "line": 231,
        "fullcodeline": "mus_event[2] = mus_data[mus_data_ofs + 2];"
    },
    {
        "line": 232,
        "fullcodeline": "mus_event[3] = 0;"
    },
    {
        "line": 235,
        "fullcodeline": "mus_event[0] = 0xb0 | (mus_data[mus_data_ofs] & 0x0f);"
    },
    {
        "line": 236,
        "fullcodeline": "mus_event[1] = 93;"
    },
    {
        "line": 237,
        "fullcodeline": "mus_event[2] = mus_data[mus_data_ofs + 2];"
    },
    {
        "line": 238,
        "fullcodeline": "mus_event[3] = 0;"
    },
    {
        "line": 241,
        "fullcodeline": "mus_event[0] = 0xb0 | (mus_data[mus_data_ofs] & 0x0f);"
    },
    {
        "line": 242,
        "fullcodeline": "mus_event[1] = 64;"
    },
    {
        "line": 243,
        "fullcodeline": "mus_event[2] = mus_data[mus_data_ofs + 2];"
    },
    {
        "line": 244,
        "fullcodeline": "mus_event[3] = 0;"
    },
    {
        "line": 247,
        "fullcodeline": "mus_event[0] = 0xb0 | (mus_data[mus_data_ofs] & 0x0f);"
    },
    {
        "line": 248,
        "fullcodeline": "mus_event[1] = 67;"
    },
    {
        "line": 249,
        "fullcodeline": "mus_event[2] = mus_data[mus_data_ofs + 2];"
    },
    {
        "line": 250,
        "fullcodeline": "mus_event[3] = 0;"
    },
    {
        "line": 98,
        "fullcodeline": "} else if ((mus_data[mus_data_ofs] & 0x0f) == 0x09) {"
    },
    {
        "line": 99,
        "fullcodeline": "mus_data[mus_data_ofs] = (mus_data[mus_data_ofs] & 0xf0) | 0x0f;"
    },
    {
        "line": 121,
        "fullcodeline": "mus_event_size = 2;"
    },
    {
        "line": 122,
        "fullcodeline": "mus_event[0] = 0x90 | (mus_data[mus_data_ofs] & 0x0f);"
    },
    {
        "line": 123,
        "fullcodeline": "mus_event[1] = mus_data[mus_data_ofs + 1];"
    },
    {
        "line": 124,
        "fullcodeline": "mus_event[2] = mus_prev_vol[mus_data[mus_data_ofs] & 0x0f];"
    },
    {
        "line": 125,
        "fullcodeline": "mus_event[3] = 0;"
    }
]