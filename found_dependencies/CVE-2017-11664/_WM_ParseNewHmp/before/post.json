[
    {
        "line": 2,
        "fullcodeline": "uint8_t is_hmp2 = 0;"
    },
    {
        "line": 3,
        "fullcodeline": "uint32_t zero_cnt = 0;"
    },
    {
        "line": 4,
        "fullcodeline": "uint32_t i = 0;"
    },
    {
        "line": 5,
        "fullcodeline": "uint32_t hmp_file_length = 0;"
    },
    {
        "line": 6,
        "fullcodeline": "uint32_t hmp_chunks = 0;"
    },
    {
        "line": 7,
        "fullcodeline": "uint32_t hmp_divisions = 0;"
    },
    {
        "line": 8,
        "fullcodeline": "uint32_t hmp_unknown = 0;"
    },
    {
        "line": 9,
        "fullcodeline": "uint32_t hmp_bpm = 0;"
    },
    {
        "line": 10,
        "fullcodeline": "uint32_t hmp_song_time = 0;"
    },
    {
        "line": 17,
        "fullcodeline": "uint32_t chunk_num = 0;"
    },
    {
        "line": 18,
        "fullcodeline": "uint32_t hmp_track = 0;"
    },
    {
        "line": 20,
        "fullcodeline": "uint32_t smallest_delta = 0;"
    },
    {
        "line": 21,
        "fullcodeline": "uint32_t subtract_delta = 0;"
    },
    {
        "line": 23,
        "fullcodeline": "uint32_t end_of_chunks = 0;"
    },
    {
        "line": 24,
        "fullcodeline": "uint32_t var_len_shift = 0;"
    },
    {
        "line": 26,
        "fullcodeline": "float tempo_f = 500000.0;"
    },
    {
        "line": 27,
        "fullcodeline": "float samples_per_delta_f = 0.0;"
    },
    {
        "line": 32,
        "fullcodeline": "uint32_t sample_count = 0;"
    },
    {
        "line": 33,
        "fullcodeline": "float sample_count_f = 0;"
    },
    {
        "line": 34,
        "fullcodeline": "float sample_remainder = 0;"
    },
    {
        "line": 40,
        "fullcodeline": "hmp_data += 8;"
    },
    {
        "line": 41,
        "fullcodeline": "hmp_size -= 8;"
    },
    {
        "line": 61,
        "fullcodeline": "hmp_data += zero_cnt;"
    },
    {
        "line": 62,
        "fullcodeline": "hmp_size -= zero_cnt;"
    },
    {
        "line": 65,
        "fullcodeline": "hmp_file_length += (*hmp_data++ << 8);"
    },
    {
        "line": 66,
        "fullcodeline": "hmp_file_length += (*hmp_data++ << 16);"
    },
    {
        "line": 67,
        "fullcodeline": "hmp_file_length += (*hmp_data++ << 24);"
    },
    {
        "line": 68,
        "fullcodeline": "hmp_size -= 4;"
    },
    {
        "line": 70,
        "fullcodeline": "UNUSED(hmp_file_length);"
    },
    {
        "line": 73,
        "fullcodeline": "hmp_data += 12;"
    },
    {
        "line": 74,
        "fullcodeline": "hmp_size -= 12;"
    },
    {
        "line": 77,
        "fullcodeline": "hmp_chunks += (*hmp_data++ << 8);"
    },
    {
        "line": 78,
        "fullcodeline": "hmp_chunks += (*hmp_data++ << 16);"
    },
    {
        "line": 79,
        "fullcodeline": "hmp_chunks += (*hmp_data++ << 24);"
    },
    {
        "line": 80,
        "fullcodeline": "hmp_size -= 4;"
    },
    {
        "line": 84,
        "fullcodeline": "hmp_unknown += (*hmp_data++ << 8);"
    },
    {
        "line": 85,
        "fullcodeline": "hmp_unknown += (*hmp_data++ << 16);"
    },
    {
        "line": 86,
        "fullcodeline": "hmp_unknown += (*hmp_data++ << 24);"
    },
    {
        "line": 87,
        "fullcodeline": "hmp_size -= 4;"
    },
    {
        "line": 89,
        "fullcodeline": "UNUSED(hmp_unknown);"
    },
    {
        "line": 92,
        "fullcodeline": "hmp_divisions = 60;"
    },
    {
        "line": 96,
        "fullcodeline": "hmp_bpm += (*hmp_data++ << 8);"
    },
    {
        "line": 97,
        "fullcodeline": "hmp_bpm += (*hmp_data++ << 16);"
    },
    {
        "line": 98,
        "fullcodeline": "hmp_bpm += (*hmp_data++ << 24);"
    },
    {
        "line": 99,
        "fullcodeline": "hmp_size -= 4;"
    },
    {
        "line": 108,
        "fullcodeline": "samples_per_delta_f = _WM_GetSamplesPerTick(hmp_divisions, tempo_f);"
    },
    {
        "line": 115,
        "fullcodeline": "hmp_song_time += (*hmp_data++ << 8);"
    },
    {
        "line": 116,
        "fullcodeline": "hmp_song_time += (*hmp_data++ << 16);"
    },
    {
        "line": 117,
        "fullcodeline": "hmp_song_time += (*hmp_data++ << 24);"
    },
    {
        "line": 118,
        "fullcodeline": "hmp_size -= 4;"
    },
    {
        "line": 123,
        "fullcodeline": "UNUSED(hmp_song_time);"
    },
    {
        "line": 133,
        "fullcodeline": "hmp_mdi = _WM_initMDI();"
    },
    {
        "line": 135,
        "fullcodeline": "_WM_midi_setup_divisions(hmp_mdi, hmp_divisions);"
    },
    {
        "line": 136,
        "fullcodeline": "_WM_midi_setup_tempo(hmp_mdi, (uint32_t)tempo_f);"
    },
    {
        "line": 138,
        "fullcodeline": "hmp_chunk = malloc(sizeof(uint8_t *) * hmp_chunks);"
    },
    {
        "line": 139,
        "fullcodeline": "chunk_length = malloc(sizeof(uint32_t) * hmp_chunks);"
    },
    {
        "line": 140,
        "fullcodeline": "chunk_delta = malloc(sizeof(uint32_t) * hmp_chunks);"
    },
    {
        "line": 141,
        "fullcodeline": "chunk_ofs = malloc(sizeof(uint32_t) * hmp_chunks);"
    },
    {
        "line": 142,
        "fullcodeline": "chunk_end = malloc(sizeof(uint8_t) * hmp_chunks);"
    },
    {
        "line": 144,
        "fullcodeline": "smallest_delta = 0xffffffff;"
    },
    {
        "line": 201,
        "fullcodeline": "subtract_delta = smallest_delta;"
    },
    {
        "line": 202,
        "fullcodeline": "sample_count_f = (((float) smallest_delta * samples_per_delta_f) + sample_remainder);"
    },
    {
        "line": 204,
        "fullcodeline": "sample_count = (uint32_t) sample_count_f;"
    },
    {
        "line": 205,
        "fullcodeline": "sample_remainder = sample_count_f - (float) sample_count;"
    },
    {
        "line": 207,
        "fullcodeline": "hmp_mdi->events[hmp_mdi->event_count - 1].samples_to_next += sample_count;"
    },
    {
        "line": 208,
        "fullcodeline": "hmp_mdi->extra_info.approx_total_samples += sample_count;"
    },
    {
        "line": 296,
        "fullcodeline": "hmp_mdi->extra_info.current_sample = 0;"
    },
    {
        "line": 298,
        "fullcodeline": "hmp_mdi->samples_to_mix = 0;"
    },
    {
        "line": 299,
        "fullcodeline": "hmp_mdi->note = NULL;"
    },
    {
        "line": 301,
        "fullcodeline": "_WM_ResetToStart(hmp_mdi);"
    },
    {
        "line": 304,
        "fullcodeline": "free(hmp_chunk);"
    },
    {
        "line": 305,
        "fullcodeline": "free(chunk_length);"
    },
    {
        "line": 306,
        "fullcodeline": "free(chunk_delta);"
    },
    {
        "line": 307,
        "fullcodeline": "free(chunk_ofs);"
    },
    {
        "line": 308,
        "fullcodeline": "free(chunk_end);"
    },
    {
        "line": 310,
        "fullcodeline": "_WM_freeMDI(hmp_mdi);"
    },
    {
        "line": 36,
        "fullcodeline": "if (memcmp(hmp_data, \"HMIMIDIP\", 8)) {"
    },
    {
        "line": 43,
        "fullcodeline": "if (!memcmp(hmp_data, \"013195\", 6)) {"
    },
    {
        "line": 55,
        "fullcodeline": "for (i = 0; i < zero_cnt; i++) {"
    },
    {
        "line": 102,
        "fullcodeline": "if ((_WM_MixerOptions & WM_MO_ROUNDTEMPO)) {"
    },
    {
        "line": 146,
        "fullcodeline": "for (i = 0; i < hmp_chunks; i++) {"
    },
    {
        "line": 210,
        "fullcodeline": "while (end_of_chunks < hmp_chunks) {"
    },
    {
        "line": 291,
        "fullcodeline": "if ((hmp_mdi->reverb = _WM_init_reverb(_WM_SampleRate, _WM_reverb_room_width, _WM_reverb_room_length, _WM_reverb_listen_posx, _WM_reverb_listen_posy)) == NULL) {"
    },
    {
        "line": 37,
        "fullcodeline": "_WM_GLOBAL_ERROR(__FUNCTION__, __LINE__, WM_ERR_NOT_HMP, NULL, 0);"
    },
    {
        "line": 44,
        "fullcodeline": "hmp_data += 6;"
    },
    {
        "line": 45,
        "fullcodeline": "hmp_size -= 6;"
    },
    {
        "line": 46,
        "fullcodeline": "is_hmp2 = 1;"
    },
    {
        "line": 51,
        "fullcodeline": "zero_cnt = 18;"
    },
    {
        "line": 64,
        "fullcodeline": "hmp_file_length = *hmp_data++;"
    },
    {
        "line": 76,
        "fullcodeline": "hmp_chunks = *hmp_data++;"
    },
    {
        "line": 83,
        "fullcodeline": "hmp_unknown = *hmp_data++;"
    },
    {
        "line": 95,
        "fullcodeline": "hmp_bpm = *hmp_data++;"
    },
    {
        "line": 103,
        "fullcodeline": "tempo_f = (float) (60000000 / hmp_bpm) + 0.5f;"
    },
    {
        "line": 114,
        "fullcodeline": "hmp_song_time = *hmp_data++;"
    },
    {
        "line": 126,
        "fullcodeline": "hmp_data += 840;"
    },
    {
        "line": 127,
        "fullcodeline": "hmp_size -= 840;"
    },
    {
        "line": 147,
        "fullcodeline": "hmp_chunk[i] = hmp_data;"
    },
    {
        "line": 148,
        "fullcodeline": "chunk_ofs[i] = 0;"
    },
    {
        "line": 151,
        "fullcodeline": "chunk_num += (*hmp_data++ << 8);"
    },
    {
        "line": 152,
        "fullcodeline": "chunk_num += (*hmp_data++ << 16);"
    },
    {
        "line": 153,
        "fullcodeline": "chunk_num += (*hmp_data++ << 24);"
    },
    {
        "line": 154,
        "fullcodeline": "chunk_ofs[i] += 4;"
    },
    {
        "line": 156,
        "fullcodeline": "UNUSED(chunk_num);"
    },
    {
        "line": 159,
        "fullcodeline": "chunk_length[i] += (*hmp_data++ << 8);"
    },
    {
        "line": 160,
        "fullcodeline": "chunk_length[i] += (*hmp_data++ << 16);"
    },
    {
        "line": 161,
        "fullcodeline": "chunk_length[i] += (*hmp_data++ << 24);"
    },
    {
        "line": 162,
        "fullcodeline": "chunk_ofs[i] += 4;"
    },
    {
        "line": 168,
        "fullcodeline": "hmp_size -= chunk_length[i];"
    },
    {
        "line": 171,
        "fullcodeline": "hmp_track += (*hmp_data++ << 8);"
    },
    {
        "line": 172,
        "fullcodeline": "hmp_track += (*hmp_data++ << 16);"
    },
    {
        "line": 173,
        "fullcodeline": "hmp_track += (*hmp_data++ << 24);"
    },
    {
        "line": 174,
        "fullcodeline": "chunk_ofs[i] += 4;"
    },
    {
        "line": 176,
        "fullcodeline": "UNUSED(hmp_track);"
    },
    {
        "line": 179,
        "fullcodeline": "chunk_delta[i] = 0;"
    },
    {
        "line": 180,
        "fullcodeline": "var_len_shift = 0;"
    },
    {
        "line": 188,
        "fullcodeline": "chunk_delta[i] = chunk_delta[i] | ((*hmp_data++ & 0x7F) << var_len_shift);"
    },
    {
        "line": 189,
        "fullcodeline": "chunk_ofs[i]++;"
    },
    {
        "line": 196,
        "fullcodeline": "hmp_data = hmp_chunk[i] + chunk_length[i];"
    },
    {
        "line": 197,
        "fullcodeline": "hmp_chunk[i] += chunk_ofs[i]++;"
    },
    {
        "line": 198,
        "fullcodeline": "chunk_end[i] = 0;"
    },
    {
        "line": 211,
        "fullcodeline": "smallest_delta = 0;"
    },
    {
        "line": 278,
        "fullcodeline": "subtract_delta = smallest_delta;"
    },
    {
        "line": 279,
        "fullcodeline": "sample_count_f= (((float) smallest_delta * samples_per_delta_f) + sample_remainder);"
    },
    {
        "line": 281,
        "fullcodeline": "sample_count = (uint32_t) sample_count_f;"
    },
    {
        "line": 282,
        "fullcodeline": "sample_remainder = sample_count_f - (float) sample_count;"
    },
    {
        "line": 284,
        "fullcodeline": "hmp_mdi->events[hmp_mdi->event_count - 1].samples_to_next += sample_count;"
    },
    {
        "line": 285,
        "fullcodeline": "hmp_mdi->extra_info.approx_total_samples += sample_count;"
    },
    {
        "line": 292,
        "fullcodeline": "_WM_GLOBAL_ERROR(__FUNCTION__, __LINE__, WM_ERR_MEM, \"to init reverb\", 0);"
    },
    {
        "line": 53,
        "fullcodeline": "zero_cnt = 24;"
    },
    {
        "line": 56,
        "fullcodeline": "if (hmp_data[i] != 0) {"
    },
    {
        "line": 105,
        "fullcodeline": "tempo_f = (float) (60000000 / hmp_bpm);"
    },
    {
        "line": 129,
        "fullcodeline": "hmp_data += 712;"
    },
    {
        "line": 130,
        "fullcodeline": "hmp_size -= 712;"
    },
    {
        "line": 164,
        "fullcodeline": "if (chunk_length[i] > hmp_size) {"
    },
    {
        "line": 181,
        "fullcodeline": "if (*hmp_data < 0x80) {"
    },
    {
        "line": 191,
        "fullcodeline": "if (chunk_delta[i] < smallest_delta) {"
    },
    {
        "line": 216,
        "fullcodeline": "for (i = 0; i < hmp_chunks; i++) {"
    },
    {
        "line": 57,
        "fullcodeline": "_WM_GLOBAL_ERROR(__FUNCTION__, __LINE__, WM_ERR_NOT_HMP, NULL, 0);"
    },
    {
        "line": 150,
        "fullcodeline": "chunk_num = *hmp_data++;"
    },
    {
        "line": 158,
        "fullcodeline": "chunk_length[i] = *hmp_data++;"
    },
    {
        "line": 165,
        "fullcodeline": "_WM_GLOBAL_ERROR(__FUNCTION__, __LINE__, WM_ERR_NOT_HMP, \"file too short\", 0);"
    },
    {
        "line": 170,
        "fullcodeline": "hmp_track = *hmp_data++;"
    },
    {
        "line": 192,
        "fullcodeline": "smallest_delta = chunk_delta[i];"
    },
    {
        "line": 186,
        "fullcodeline": "} while (*hmp_data < 0x80);"
    },
    {
        "line": 270,
        "fullcodeline": "} while (!chunk_delta[i]);"
    },
    {
        "line": 272,
        "fullcodeline": "if ((!smallest_delta) || (smallest_delta > chunk_delta[i])) {"
    },
    {
        "line": 183,
        "fullcodeline": "chunk_delta[i] = chunk_delta[i] | ((*hmp_data++ & 0x7F) << var_len_shift);"
    },
    {
        "line": 184,
        "fullcodeline": "var_len_shift += 7;"
    },
    {
        "line": 185,
        "fullcodeline": "chunk_ofs[i]++;"
    },
    {
        "line": 221,
        "fullcodeline": "chunk_delta[i] -= subtract_delta;"
    },
    {
        "line": 259,
        "fullcodeline": "var_len_shift = 0;"
    },
    {
        "line": 260,
        "fullcodeline": "chunk_delta[i] = 0;"
    },
    {
        "line": 268,
        "fullcodeline": "chunk_delta[i] = chunk_delta[i] + ((*hmp_chunk[i] & 0x7F) << var_len_shift);"
    },
    {
        "line": 269,
        "fullcodeline": "hmp_chunk[i]++;"
    },
    {
        "line": 273,
        "fullcodeline": "smallest_delta = chunk_delta[i];"
    },
    {
        "line": 231,
        "fullcodeline": "if (((hmp_chunk[i][0] & 0xf0) == 0xb0 ) && ((hmp_chunk[i][1] == 110) || (hmp_chunk[i][1] == 111)) && (hmp_chunk[i][2] > 0x7f)) {"
    },
    {
        "line": 261,
        "fullcodeline": "if (*hmp_chunk[i] < 0x80) {"
    },
    {
        "line": 234,
        "fullcodeline": "hmp_chunk[i] += 3;"
    },
    {
        "line": 223,
        "fullcodeline": "if ((!smallest_delta)"
    },
    {
        "line": 236,
        "fullcodeline": "uint32_t setup_ret = 0;"
    },
    {
        "line": 257,
        "fullcodeline": "hmp_chunk[i] += setup_ret;"
    },
    {
        "line": 266,
        "fullcodeline": "} while (*hmp_chunk[i] < 0x80);"
    },
    {
        "line": 224,
        "fullcodeline": "|| (smallest_delta > chunk_delta[i])) {"
    },
    {
        "line": 225,
        "fullcodeline": "smallest_delta = chunk_delta[i];"
    },
    {
        "line": 238,
        "fullcodeline": "if ((setup_ret = _WM_SetupMidiEvent(hmp_mdi, hmp_chunk[i], 0)) == 0) {"
    },
    {
        "line": 242,
        "fullcodeline": "if ((hmp_chunk[i][0] == 0xff) && (hmp_chunk[i][1] == 0x2f) && (hmp_chunk[i][2] == 0x00)) {"
    },
    {
        "line": 263,
        "fullcodeline": "chunk_delta[i] = chunk_delta[i] + ((*hmp_chunk[i] & 0x7F) << var_len_shift);"
    },
    {
        "line": 264,
        "fullcodeline": "var_len_shift += 7;"
    },
    {
        "line": 265,
        "fullcodeline": "hmp_chunk[i]++;"
    },
    {
        "line": 244,
        "fullcodeline": "end_of_chunks++;"
    },
    {
        "line": 245,
        "fullcodeline": "chunk_end[i] = 1;"
    },
    {
        "line": 246,
        "fullcodeline": "hmp_chunk[i] += 3;"
    },
    {
        "line": 248,
        "fullcodeline": "} else if ((hmp_chunk[i][0] == 0xff) && (hmp_chunk[i][1] == 0x51) && (hmp_chunk[i][2] == 0x03)) {"
    },
    {
        "line": 250,
        "fullcodeline": "tempo_f = (float)((hmp_chunk[i][3] << 16) + (hmp_chunk[i][4] << 8)+ hmp_chunk[i][5]);"
    },
    {
        "line": 255,
        "fullcodeline": "fprintf(stderr,\"DEBUG: Tempo change %f\\r\\n\", tempo_f);"
    },
    {
        "line": 251,
        "fullcodeline": "if (tempo_f == 0.0)"
    },
    {
        "line": 252,
        "fullcodeline": "tempo_f = 500000.0;"
    }
]