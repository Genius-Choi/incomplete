[
    {
        "line": 5,
        "fullcodeline": "const gtl::InlinedVector<int64_t, 4> shape = tensor_shape.dim_sizes();"
    },
    {
        "line": 6,
        "fullcodeline": "if (shape.empty()) {"
    },
    {
        "line": 15,
        "fullcodeline": "const int num_dims = tensor_shape.dims();"
    },
    {
        "line": 16,
        "fullcodeline": "PrintOneDimV2(0, shape, limit, num_dims, array, 0, &ret);"
    },
    {
        "line": 7,
        "fullcodeline": "for (int64_t i = 0; i < limit; ++i) {"
    },
    {
        "line": 11,
        "fullcodeline": "if (num_elts > limit) strings::StrAppend(&ret, \"...\");"
    },
    {
        "line": 18,
        "fullcodeline": "int64_t data_index = 0;"
    },
    {
        "line": 19,
        "fullcodeline": "const int shape_size = tensor_shape.dims();"
    },
    {
        "line": 20,
        "fullcodeline": "PrintOneDim(0, shape, limit, shape_size, array, &data_index, &ret);"
    },
    {
        "line": 9,
        "fullcodeline": "strings::StrAppend(&ret, PrintOneElement(array[i], print_v2));"
    },
    {
        "line": 8,
        "fullcodeline": "if (i > 0) strings::StrAppend(&ret, \" \");"
    },
    {
        "line": 22,
        "fullcodeline": "if (num_elts > limit) strings::StrAppend(&ret, \"...\");"
    }
]