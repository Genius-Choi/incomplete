[
    {
        "line": 2,
        "fullcodeline": "const int64_t num_elts = NumElements();"
    },
    {
        "line": 6,
        "fullcodeline": "size_t limit = std::min(max_entries, num_elts);"
    },
    {
        "line": 11,
        "fullcodeline": "const char* data = limit > 0 ? tensor_data().data() : nullptr;"
    },
    {
        "line": 3,
        "fullcodeline": "if (max_entries < 0) {"
    },
    {
        "line": 7,
        "fullcodeline": "if ((limit > 0) && (buf_ == nullptr)) {"
    },
    {
        "line": 4,
        "fullcodeline": "max_entries = num_elts;"
    },
    {
        "line": 8,
        "fullcodeline": "return strings::StrCat(\"uninitialized Tensor of \", num_elts,"
    },
    {
        "line": 14,
        "fullcodeline": "return SummarizeArray<bfloat16>(limit, num_elts, shape_, data, print_v2);"
    },
    {
        "line": 17,
        "fullcodeline": "return SummarizeArray<Eigen::half>(limit, num_elts, shape_, data,"
    },
    {
        "line": 21,
        "fullcodeline": "return SummarizeArray<float>(limit, num_elts, shape_, data, print_v2);"
    },
    {
        "line": 24,
        "fullcodeline": "return SummarizeArray<double>(limit, num_elts, shape_, data, print_v2);"
    },
    {
        "line": 27,
        "fullcodeline": "return SummarizeArray<uint32>(limit, num_elts, shape_, data, print_v2);"
    },
    {
        "line": 30,
        "fullcodeline": "return SummarizeArray<int32>(limit, num_elts, shape_, data, print_v2);"
    },
    {
        "line": 34,
        "fullcodeline": "return SummarizeArray<uint8>(limit, num_elts, shape_, data, print_v2);"
    },
    {
        "line": 38,
        "fullcodeline": "return SummarizeArray<uint16>(limit, num_elts, shape_, data, print_v2);"
    },
    {
        "line": 42,
        "fullcodeline": "return SummarizeArray<int16>(limit, num_elts, shape_, data, print_v2);"
    },
    {
        "line": 46,
        "fullcodeline": "return SummarizeArray<int8>(limit, num_elts, shape_, data, print_v2);"
    },
    {
        "line": 49,
        "fullcodeline": "return SummarizeArray<uint64>(limit, num_elts, shape_, data, print_v2);"
    },
    {
        "line": 52,
        "fullcodeline": "return SummarizeArray<int64_t>(limit, num_elts, shape_, data, print_v2);"
    },
    {
        "line": 57,
        "fullcodeline": "return SummarizeArray<bool>(limit, num_elts, shape_, data, print_v2);"
    },
    {
        "line": 60,
        "fullcodeline": "return SummarizeArray<tstring>(limit, num_elts, shape_, data, print_v2);"
    },
    {
        "line": 65,
        "fullcodeline": "if (print_v2 && (dims() > 0)) {"
    },
    {
        "line": 70,
        "fullcodeline": "for (size_t i = 0; i < limit; ++i) {"
    },
    {
        "line": 66,
        "fullcodeline": "strings::StrAppend(&ret, \"[\");"
    },
    {
        "line": 87,
        "fullcodeline": "if (max_entries < num_elts) strings::StrAppend(&ret, \"...\");"
    },
    {
        "line": 88,
        "fullcodeline": "if (print_v2 && (dims() > 0)) {"
    },
    {
        "line": 89,
        "fullcodeline": "strings::StrAppend(&ret, \"]\");"
    },
    {
        "line": 71,
        "fullcodeline": "if (i > 0) strings::StrAppend(&ret, \" \");"
    },
    {
        "line": 84,
        "fullcodeline": "strings::StrAppend(&ret, \"?\");"
    },
    {
        "line": 74,
        "fullcodeline": "const Variant& v = flat<Variant>()(i);"
    },
    {
        "line": 75,
        "fullcodeline": "strings::StrAppend(&ret, \"<\", v.SummarizeValue(), \">\");"
    },
    {
        "line": 78,
        "fullcodeline": "const ResourceHandle& r = flat<ResourceHandle>()(i);"
    },
    {
        "line": 79,
        "fullcodeline": "strings::StrAppend(&ret, \"<\", r.SummarizeValue(), \">\");"
    }
]