[
    {
        "line": 2,
        "fullcodeline": "ut8 bytes[12];"
    },
    {
        "line": 3,
        "fullcodeline": "ut8 *src = bytes;"
    },
    {
        "line": 4,
        "fullcodeline": "r_return_val_if_fail (reg && item, false);"
    },
    {
        "line": 12,
        "fullcodeline": "RRegArena *arena = reg->regset[item->arena].arena;"
    },
    {
        "line": 71,
        "fullcodeline": "const bool fits_in_arena = (arena->size - BITS2BYTES (item->offset) - BITS2BYTES (item->size)) >= 0;"
    },
    {
        "line": 6,
        "fullcodeline": "if (r_reg_is_readonly (reg, item)) {"
    },
    {
        "line": 9,
        "fullcodeline": "if (item->offset < 0) {"
    },
    {
        "line": 13,
        "fullcodeline": "if (!arena) {"
    },
    {
        "line": 72,
        "fullcodeline": "if (src && fits_in_arena) {"
    },
    {
        "line": 19,
        "fullcodeline": "r_reg_set_longdouble (reg, item, (long double)value);"
    },
    {
        "line": 43,
        "fullcodeline": "r_write_ble8 (src, (ut8) (value & UT8_MAX));"
    },
    {
        "line": 23,
        "fullcodeline": "r_write_be64 (src, value);"
    },
    {
        "line": 30,
        "fullcodeline": "r_write_be32 (src, value);"
    },
    {
        "line": 37,
        "fullcodeline": "r_write_be16 (src, value);"
    },
    {
        "line": 47,
        "fullcodeline": "ut8 *buf = arena->bytes + (item->offset / 8);"
    },
    {
        "line": 48,
        "fullcodeline": "int bit = (item->offset % 8);"
    },
    {
        "line": 49,
        "fullcodeline": "ut8 mask = (1 << bit);"
    },
    {
        "line": 74,
        "fullcodeline": "BITS2BYTES (item->offset),"
    },
    {
        "line": 25,
        "fullcodeline": "r_write_le64 (src, value);"
    },
    {
        "line": 32,
        "fullcodeline": "r_write_le32 (src, value);"
    },
    {
        "line": 39,
        "fullcodeline": "r_write_le16 (src, value);"
    },
    {
        "line": 50,
        "fullcodeline": "buf[0] = (buf[0] & (0xff ^ mask)) | mask;"
    },
    {
        "line": 52,
        "fullcodeline": "int idx = item->offset / 8;"
    },
    {
        "line": 57,
        "fullcodeline": "ut8 *buf = arena->bytes + idx;"
    },
    {
        "line": 58,
        "fullcodeline": "int bit = item->offset % 8;"
    },
    {
        "line": 59,
        "fullcodeline": "ut8 mask = 0xff ^ (1 << bit);"
    },
    {
        "line": 53,
        "fullcodeline": "if (idx + item->size > arena->size) {"
    },
    {
        "line": 60,
        "fullcodeline": "buf[0] = (buf[0] & mask) | 0;"
    }
]