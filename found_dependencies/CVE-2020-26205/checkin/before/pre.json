[
    {
        "line": 20,
        "fullcodeline": "machine = process_checkin_serial(serial)"
    },
    {
        "line": 21,
        "fullcodeline": "machine_group = get_object_or_404(MachineGroup, key=submission['Sal']['extra_data'].get('key'))"
    },
    {
        "line": 22,
        "fullcodeline": "machine.machine_group = machine_group"
    },
    {
        "line": 23,
        "fullcodeline": "machine.broken_client = False"
    },
    {
        "line": 24,
        "fullcodeline": "machine.save()"
    },
    {
        "line": 25,
        "fullcodeline": "clean_related(machine)"
    },
    {
        "line": 27,
        "fullcodeline": "object_queue = {"
    },
    {
        "line": 37,
        "fullcodeline": "plugin_results = submission.pop('plugin_results', {})"
    },
    {
        "line": 45,
        "fullcodeline": "object_queue = process_managed_item_histories(object_queue, machine)"
    },
    {
        "line": 60,
        "fullcodeline": "msg = f\"Sal report submitted for {machine.serial}\""
    },
    {
        "line": 61,
        "fullcodeline": "logger.debug(msg)"
    },
    {
        "line": 2,
        "fullcodeline": "if request.content_type != 'application/json':"
    },
    {
        "line": 17,
        "fullcodeline": "if not serial:"
    },
    {
        "line": 38,
        "fullcodeline": "for management_source_name, management_data in submission.items():"
    },
    {
        "line": 49,
        "fullcodeline": "server.utils.process_plugin_script(plugin_results, machine)"
    },
    {
        "line": 50,
        "fullcodeline": "server.utils.run_plugin_processing(machine, submission)"
    },
    {
        "line": 62,
        "fullcodeline": "return HttpResponse(msg)"
    },
    {
        "line": 6,
        "fullcodeline": "submission = json.loads(request.body.decode())"
    },
    {
        "line": 9,
        "fullcodeline": "if not isinstance(submission, dict) or 'Machine' not in submission:"
    },
    {
        "line": 14,
        "fullcodeline": "serial = submission['Machine']['extra_data'].get('serial')"
    },
    {
        "line": 52,
        "fullcodeline": "if server.utils.get_setting('send_data') in (None, True):"
    },
    {
        "line": 3,
        "fullcodeline": "return HttpResponseBadRequest('Checkin must be content-type \"application/json\"!')"
    },
    {
        "line": 10,
        "fullcodeline": "return HttpResponseBadRequest('Checkin JSON is missing required key \"Machine\"!')"
    },
    {
        "line": 18,
        "fullcodeline": "return HttpResponseBadRequest('Checkin JSON is missing required \"Machine\" key \"serial\"!')"
    },
    {
        "line": 42,
        "fullcodeline": "object_queue = process_management_submission("
    },
    {
        "line": 39,
        "fullcodeline": "management_source, _ = ManagementSource.objects.get_or_create("
    },
    {
        "line": 8,
        "fullcodeline": "return HttpResponseBadRequest('Checkin has invalid JSON!')"
    },
    {
        "line": 16,
        "fullcodeline": "return HttpResponseBadRequest('Checkin JSON is missing required \"Machine\" key \"serial\"!')"
    },
    {
        "line": 56,
        "fullcodeline": "server.utils.send_report()"
    },
    {
        "line": 58,
        "fullcodeline": "logger.debug(e)"
    }
]