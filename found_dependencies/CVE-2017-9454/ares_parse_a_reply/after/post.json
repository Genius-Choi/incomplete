[
    {
        "line": 14,
        "fullcodeline": "*host = NULL;"
    },
    {
        "line": 21,
        "fullcodeline": "qdcount = DNS_HEADER_QDCOUNT(abuf);"
    },
    {
        "line": 22,
        "fullcodeline": "ancount = DNS_HEADER_ANCOUNT(abuf);"
    },
    {
        "line": 27,
        "fullcodeline": "aptr = abuf + HFIXEDSZ;"
    },
    {
        "line": 28,
        "fullcodeline": "status = ares_expand_name(aptr, abuf, alen, &hostname, &len);"
    },
    {
        "line": 36,
        "fullcodeline": "aptr += len + QFIXEDSZ;"
    },
    {
        "line": 39,
        "fullcodeline": "addrs = malloc(ancount * sizeof(struct in_addr));"
    },
    {
        "line": 45,
        "fullcodeline": "aliases = malloc((ancount + 1) * sizeof(char *));"
    },
    {
        "line": 52,
        "fullcodeline": "naddrs = 0;"
    },
    {
        "line": 53,
        "fullcodeline": "naliases = 0;"
    },
    {
        "line": 142,
        "fullcodeline": "free(aliases);"
    },
    {
        "line": 143,
        "fullcodeline": "free(addrs);"
    },
    {
        "line": 144,
        "fullcodeline": "free(hostname);"
    },
    {
        "line": 17,
        "fullcodeline": "if (alen < HFIXEDSZ)"
    },
    {
        "line": 23,
        "fullcodeline": "if (qdcount != 1)"
    },
    {
        "line": 29,
        "fullcodeline": "if (status != ARES_SUCCESS)"
    },
    {
        "line": 31,
        "fullcodeline": "if (aptr + len + QFIXEDSZ > abuf + alen)"
    },
    {
        "line": 40,
        "fullcodeline": "if (!addrs)"
    },
    {
        "line": 46,
        "fullcodeline": "if (!aliases)"
    },
    {
        "line": 56,
        "fullcodeline": "for (i = 0; i < (int)ancount; i++)"
    },
    {
        "line": 113,
        "fullcodeline": "if (status == ARES_SUCCESS && naddrs == 0)"
    },
    {
        "line": 115,
        "fullcodeline": "if (status == ARES_SUCCESS)"
    },
    {
        "line": 140,
        "fullcodeline": "for (i = 0; i < naliases; i++)"
    },
    {
        "line": 141,
        "fullcodeline": "free(aliases[i]);"
    },
    {
        "line": 33,
        "fullcodeline": "free(hostname);"
    },
    {
        "line": 42,
        "fullcodeline": "free(hostname);"
    },
    {
        "line": 48,
        "fullcodeline": "free(hostname);"
    },
    {
        "line": 49,
        "fullcodeline": "free(addrs);"
    },
    {
        "line": 59,
        "fullcodeline": "status = ares_expand_name(aptr, abuf, alen, &rr_name, &len);"
    },
    {
        "line": 62,
        "fullcodeline": "aptr += len;"
    },
    {
        "line": 69,
        "fullcodeline": "rr_type = DNS_RR_TYPE(aptr);"
    },
    {
        "line": 70,
        "fullcodeline": "rr_class = DNS_RR_CLASS(aptr);"
    },
    {
        "line": 71,
        "fullcodeline": "rr_len = DNS_RR_LEN(aptr);"
    },
    {
        "line": 72,
        "fullcodeline": "aptr += RRFIXEDSZ;"
    },
    {
        "line": 105,
        "fullcodeline": "aptr += rr_len;"
    },
    {
        "line": 114,
        "fullcodeline": "status = ARES_ENODATA;"
    },
    {
        "line": 118,
        "fullcodeline": "aliases[naliases] = NULL;"
    },
    {
        "line": 138,
        "fullcodeline": "status = ARES_ENOMEM;"
    },
    {
        "line": 60,
        "fullcodeline": "if (status != ARES_SUCCESS)"
    },
    {
        "line": 63,
        "fullcodeline": "if (aptr + RRFIXEDSZ > abuf + alen)"
    },
    {
        "line": 73,
        "fullcodeline": "if (aptr + rr_len > abuf + alen)"
    },
    {
        "line": 80,
        "fullcodeline": "if (rr_class == C_IN && rr_type == T_A"
    },
    {
        "line": 89,
        "fullcodeline": "if (rr_class == C_IN && rr_type == T_CNAME)"
    },
    {
        "line": 106,
        "fullcodeline": "if (aptr > abuf + alen)"
    },
    {
        "line": 65,
        "fullcodeline": "free(rr_name);"
    },
    {
        "line": 66,
        "fullcodeline": "status = ARES_EBADRESP;"
    },
    {
        "line": 75,
        "fullcodeline": "free(rr_name);"
    },
    {
        "line": 76,
        "fullcodeline": "status = ARES_EBADRESP;"
    },
    {
        "line": 82,
        "fullcodeline": "&& strcasecmp(rr_name, hostname) == 0)"
    },
    {
        "line": 84,
        "fullcodeline": "memcpy(&addrs[naddrs], aptr, sizeof(struct in_addr));"
    },
    {
        "line": 85,
        "fullcodeline": "naddrs++;"
    },
    {
        "line": 86,
        "fullcodeline": "status = ARES_SUCCESS;"
    },
    {
        "line": 92,
        "fullcodeline": "aliases[naliases] = rr_name;"
    },
    {
        "line": 93,
        "fullcodeline": "naliases++;"
    },
    {
        "line": 96,
        "fullcodeline": "status = ares_expand_name(aptr, abuf, alen, &rr_data, &len);"
    },
    {
        "line": 99,
        "fullcodeline": "free(hostname);"
    },
    {
        "line": 100,
        "fullcodeline": "hostname = rr_data;"
    },
    {
        "line": 108,
        "fullcodeline": "status = ARES_EBADRESP;"
    },
    {
        "line": 122,
        "fullcodeline": "hostent->h_addr_list = malloc((naddrs + 1) * sizeof(char *));"
    },
    {
        "line": 136,
        "fullcodeline": "free(hostent);"
    },
    {
        "line": 81,
        "fullcodeline": "&& rr_len == sizeof(struct in_addr)"
    },
    {
        "line": 97,
        "fullcodeline": "if (status != ARES_SUCCESS)"
    },
    {
        "line": 103,
        "fullcodeline": "free(rr_name);"
    },
    {
        "line": 126,
        "fullcodeline": "hostent->h_name = hostname;"
    },
    {
        "line": 127,
        "fullcodeline": "hostent->h_aliases = aliases;"
    },
    {
        "line": 128,
        "fullcodeline": "hostent->h_addrtype = AF_INET;"
    },
    {
        "line": 132,
        "fullcodeline": "hostent->h_addr_list[naddrs] = NULL;"
    },
    {
        "line": 133,
        "fullcodeline": "*host = hostent;"
    },
    {
        "line": 130,
        "fullcodeline": "for (i = 0; i < naddrs; i++)"
    },
    {
        "line": 131,
        "fullcodeline": "hostent->h_addr_list[i] = (char *) &addrs[i];"
    }
]