[
    {
        "line": 3,
        "fullcodeline": "png_alloc_size_t limit = PNG_UINT_31_MAX;"
    },
    {
        "line": 13,
        "fullcodeline": "if (png_ptr->chunk_name == png_IDAT)"
    },
    {
        "line": 29,
        "fullcodeline": "if (length > limit)"
    },
    {
        "line": 15,
        "fullcodeline": "png_alloc_size_t idat_limit = PNG_UINT_31_MAX;"
    },
    {
        "line": 16,
        "fullcodeline": "size_t row_factor ="
    },
    {
        "line": 23,
        "fullcodeline": "row_factor = row_factor > 32566? 32566 : row_factor;"
    },
    {
        "line": 24,
        "fullcodeline": "idat_limit += 6 + 5*(idat_limit/row_factor+1); /* zlib+deflate overhead */"
    },
    {
        "line": 25,
        "fullcodeline": "idat_limit=idat_limit < PNG_UINT_31_MAX? idat_limit : PNG_UINT_31_MAX;"
    },
    {
        "line": 26,
        "fullcodeline": "limit = limit < idat_limit? idat_limit : limit;"
    },
    {
        "line": 31,
        "fullcodeline": "png_debug2(0,\" length = %lu, limit = %lu\","
    },
    {
        "line": 33,
        "fullcodeline": "png_chunk_error(png_ptr, \"chunk data is too large\");"
    },
    {
        "line": 17,
        "fullcodeline": "(png_ptr->width * png_ptr->channels * (png_ptr->bit_depth > 8? 2: 1)"
    },
    {
        "line": 19,
        "fullcodeline": "if (png_ptr->height > PNG_UINT_32_MAX/row_factor)"
    },
    {
        "line": 32,
        "fullcodeline": "(unsigned long)length,(unsigned long)limit);"
    },
    {
        "line": 18,
        "fullcodeline": "+ 1 + (png_ptr->interlaced? 6: 0));"
    },
    {
        "line": 20,
        "fullcodeline": "idat_limit=PNG_UINT_31_MAX;"
    },
    {
        "line": 22,
        "fullcodeline": "idat_limit = png_ptr->height * row_factor;"
    }
]