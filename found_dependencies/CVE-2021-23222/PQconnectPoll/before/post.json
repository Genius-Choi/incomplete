[
    {
        "line": 3,
        "fullcodeline": "bool\t\treset_connection_state_machine = false;"
    },
    {
        "line": 4,
        "fullcodeline": "bool\t\tneed_new_connection = false;"
    },
    {
        "line": 6,
        "fullcodeline": "char\t\tsebuf[PG_STRERROR_R_BUFLEN];"
    },
    {
        "line": 1595,
        "fullcodeline": "conn->status = CONNECTION_BAD;"
    },
    {
        "line": 9,
        "fullcodeline": "if (conn == NULL)"
    },
    {
        "line": 55,
        "fullcodeline": "appendPQExpBufferStr(&conn->errorMessage,"
    },
    {
        "line": 74,
        "fullcodeline": "conn->try_next_addr = false;"
    },
    {
        "line": 84,
        "fullcodeline": "char\t\tportstr[MAXPGPATH];"
    },
    {
        "line": 110,
        "fullcodeline": "release_conn_addrinfo(conn);"
    },
    {
        "line": 120,
        "fullcodeline": "MemSet(&hint, 0, sizeof(hint));"
    },
    {
        "line": 121,
        "fullcodeline": "hint.ai_socktype = SOCK_STREAM;"
    },
    {
        "line": 122,
        "fullcodeline": "conn->addrlist_family = hint.ai_family = AF_UNSPEC;"
    },
    {
        "line": 140,
        "fullcodeline": "snprintf(portstr, sizeof(portstr), \"%d\", thisport);"
    },
    {
        "line": 203,
        "fullcodeline": "conn->addr_cur = conn->addrlist;"
    },
    {
        "line": 204,
        "fullcodeline": "reset_connection_state_machine = true;"
    },
    {
        "line": 205,
        "fullcodeline": "conn->try_next_host = false;"
    },
    {
        "line": 217,
        "fullcodeline": "conn->pversion = PG_PROTOCOL(3, 0);"
    },
    {
        "line": 218,
        "fullcodeline": "conn->send_appname = true;"
    },
    {
        "line": 228,
        "fullcodeline": "reset_connection_state_machine = false;"
    },
    {
        "line": 229,
        "fullcodeline": "need_new_connection = true;"
    },
    {
        "line": 236,
        "fullcodeline": "pqDropConnection(conn, true);"
    },
    {
        "line": 239,
        "fullcodeline": "pqDropServerData(conn);"
    },
    {
        "line": 242,
        "fullcodeline": "conn->asyncStatus = PGASYNC_IDLE;"
    },
    {
        "line": 243,
        "fullcodeline": "conn->xactStatus = PQTRANS_IDLE;"
    },
    {
        "line": 244,
        "fullcodeline": "conn->pipelineStatus = PQ_PIPELINE_OFF;"
    },
    {
        "line": 245,
        "fullcodeline": "pqClearAsyncResult(conn);"
    },
    {
        "line": 248,
        "fullcodeline": "conn->status = CONNECTION_NEEDED;"
    },
    {
        "line": 250,
        "fullcodeline": "need_new_connection = false;"
    },
    {
        "line": 1577,
        "fullcodeline": "appendPQExpBuffer(&conn->errorMessage,"
    },
    {
        "line": 32,
        "fullcodeline": "int\t\t\tn = pqReadData(conn);"
    },
    {
        "line": 56,
        "fullcodeline": "libpq_gettext(\"invalid connection state, probably indicative of memory corruption\\n\"));"
    },
    {
        "line": 67,
        "fullcodeline": "if (conn->addr_cur && conn->addr_cur->ai_next)"
    },
    {
        "line": 86,
        "fullcodeline": "if (conn->whichhost + 1 < conn->nconnhost)"
    },
    {
        "line": 125,
        "fullcodeline": "if (ch->port == NULL || ch->port[0] == '\\0')"
    },
    {
        "line": 554,
        "fullcodeline": "conn->status = CONNECTION_MADE;"
    },
    {
        "line": 722,
        "fullcodeline": "startpacket = pqBuildStartupPacket3(conn, &packetlen,"
    },
    {
        "line": 746,
        "fullcodeline": "free(startpacket);"
    },
    {
        "line": 748,
        "fullcodeline": "conn->status = CONNECTION_AWAITING_RESPONSE;"
    },
    {
        "line": 993,
        "fullcodeline": "conn->inCursor = conn->inStart;"
    },
    {
        "line": 1069,
        "fullcodeline": "msgLength -= 4;"
    },
    {
        "line": 1070,
        "fullcodeline": "avail = conn->inEnd - conn->inCursor;"
    },
    {
        "line": 1165,
        "fullcodeline": "conn->auth_req_received = true;"
    },
    {
        "line": 1173,
        "fullcodeline": "msgLength -= 4;"
    },
    {
        "line": 1182,
        "fullcodeline": "res = pg_fe_sendauth(areq, msgLength, conn);"
    },
    {
        "line": 1185,
        "fullcodeline": "conn->inStart = conn->inCursor;"
    },
    {
        "line": 1232,
        "fullcodeline": "res = PQgetResult(conn);"
    },
    {
        "line": 1283,
        "fullcodeline": "conn->status = CONNECTION_CHECK_TARGET;"
    },
    {
        "line": 1410,
        "fullcodeline": "release_conn_addrinfo(conn);"
    },
    {
        "line": 1417,
        "fullcodeline": "resetPQExpBuffer(&conn->errorMessage);"
    },
    {
        "line": 1420,
        "fullcodeline": "conn->status = CONNECTION_OK;"
    },
    {
        "line": 1434,
        "fullcodeline": "conn->status = CONNECTION_OK;"
    },
    {
        "line": 1445,
        "fullcodeline": "res = PQgetResult(conn);"
    },
    {
        "line": 1453,
        "fullcodeline": "conn->status = CONNECTION_CHECK_TARGET;"
    },
    {
        "line": 1464,
        "fullcodeline": "conn->status = CONNECTION_OK;"
    },
    {
        "line": 1474,
        "fullcodeline": "res = PQgetResult(conn);"
    },
    {
        "line": 1511,
        "fullcodeline": "appendPQExpBuffer(&conn->errorMessage,"
    },
    {
        "line": 1516,
        "fullcodeline": "conn->status = CONNECTION_OK;"
    },
    {
        "line": 1517,
        "fullcodeline": "sendTerminateConn(conn);"
    },
    {
        "line": 1520,
        "fullcodeline": "conn->try_next_host = true;"
    },
    {
        "line": 1531,
        "fullcodeline": "conn->status = CONNECTION_OK;"
    },
    {
        "line": 1541,
        "fullcodeline": "res = PQgetResult(conn);"
    },
    {
        "line": 1563,
        "fullcodeline": "appendPQExpBuffer(&conn->errorMessage,"
    },
    {
        "line": 1568,
        "fullcodeline": "conn->status = CONNECTION_OK;"
    },
    {
        "line": 1569,
        "fullcodeline": "sendTerminateConn(conn);"
    },
    {
        "line": 1572,
        "fullcodeline": "conn->try_next_host = true;"
    },
    {
        "line": 1578,
        "fullcodeline": "libpq_gettext(\"invalid connection state %d, \""
    },
    {
        "line": 34,
        "fullcodeline": "if (n < 0)"
    },
    {
        "line": 36,
        "fullcodeline": "if (n == 0)"
    },
    {
        "line": 69,
        "fullcodeline": "conn->addr_cur = conn->addr_cur->ai_next;"
    },
    {
        "line": 70,
        "fullcodeline": "reset_connection_state_machine = true;"
    },
    {
        "line": 87,
        "fullcodeline": "conn->whichhost++;"
    },
    {
        "line": 126,
        "fullcodeline": "thisport = DEF_PGPORT;"
    },
    {
        "line": 146,
        "fullcodeline": "ret = pg_getaddrinfo_all(ch->host, portstr, &hint,"
    },
    {
        "line": 158,
        "fullcodeline": "hint.ai_flags = AI_NUMERICHOST;"
    },
    {
        "line": 159,
        "fullcodeline": "ret = pg_getaddrinfo_all(ch->hostaddr, portstr, &hint,"
    },
    {
        "line": 197,
        "fullcodeline": "Assert(false);"
    },
    {
        "line": 267,
        "fullcodeline": "struct addrinfo *addr_cur = conn->addr_cur;"
    },
    {
        "line": 268,
        "fullcodeline": "char\t\thost_addr[NI_MAXHOST];"
    },
    {
        "line": 281,
        "fullcodeline": "memcpy(&conn->raddr.addr, addr_cur->ai_addr,"
    },
    {
        "line": 283,
        "fullcodeline": "conn->raddr.salen = addr_cur->ai_addrlen;"
    },
    {
        "line": 294,
        "fullcodeline": "getHostaddr(conn, host_addr, NI_MAXHOST);"
    },
    {
        "line": 299,
        "fullcodeline": "conn->sock = socket(addr_cur->ai_family, SOCK_STREAM, 0);"
    },
    {
        "line": 330,
        "fullcodeline": "emitHostIdentityInfo(conn, host_addr);"
    },
    {
        "line": 439,
        "fullcodeline": "conn->sigpipe_so = false;"
    },
    {
        "line": 443,
        "fullcodeline": "conn->sigpipe_flag = false;"
    },
    {
        "line": 494,
        "fullcodeline": "connectFailureMessage(conn, SOCK_ERRNO);"
    },
    {
        "line": 495,
        "fullcodeline": "conn->try_next_addr = true;"
    },
    {
        "line": 514,
        "fullcodeline": "if (getsockopt(conn->sock, SOL_SOCKET, SO_ERROR,"
    },
    {
        "line": 541,
        "fullcodeline": "if (getsockname(conn->sock,"
    },
    {
        "line": 567,
        "fullcodeline": "if (conn->requirepeer && conn->requirepeer[0] &&"
    },
    {
        "line": 625,
        "fullcodeline": "if (IS_AF_UNIX(conn->raddr.addr.ss_family))"
    },
    {
        "line": 724,
        "fullcodeline": "if (!startpacket)"
    },
    {
        "line": 737,
        "fullcodeline": "if (pqPacketSend(conn, 0, startpacket, packetlen) != STATUS_OK)"
    },
    {
        "line": 996,
        "fullcodeline": "if (pqGetc(&beresp, conn))"
    },
    {
        "line": 1007,
        "fullcodeline": "if (!(beresp == 'R' || beresp == 'E'))"
    },
    {
        "line": 1016,
        "fullcodeline": "if (pqGetInt(&msgLength, 4, conn))"
    },
    {
        "line": 1032,
        "fullcodeline": "if (beresp == 'R' && (msgLength < 8 || msgLength > 2000))"
    },
    {
        "line": 1040,
        "fullcodeline": "if (beresp == 'E' && (msgLength < 8 || msgLength > 30000))"
    },
    {
        "line": 1071,
        "fullcodeline": "if (avail < msgLength)"
    },
    {
        "line": 1086,
        "fullcodeline": "if (beresp == 'E')"
    },
    {
        "line": 1168,
        "fullcodeline": "if (pqGetInt((int *) &areq, 4, conn))"
    },
    {
        "line": 1187,
        "fullcodeline": "if (res != STATUS_OK)"
    },
    {
        "line": 1195,
        "fullcodeline": "if (pqFlush(conn))"
    },
    {
        "line": 1198,
        "fullcodeline": "if (areq == AUTH_REQ_OK)"
    },
    {
        "line": 1229,
        "fullcodeline": "if (PQisBusy(conn))"
    },
    {
        "line": 1293,
        "fullcodeline": "if (conn->target_server_type == SERVER_TYPE_READ_WRITE ||"
    },
    {
        "line": 1435,
        "fullcodeline": "if (!PQconsumeInput(conn))"
    },
    {
        "line": 1438,
        "fullcodeline": "if (PQisBusy(conn))"
    },
    {
        "line": 1446,
        "fullcodeline": "if (res != NULL)"
    },
    {
        "line": 1465,
        "fullcodeline": "if (!PQconsumeInput(conn))"
    },
    {
        "line": 1468,
        "fullcodeline": "if (PQisBusy(conn))"
    },
    {
        "line": 1475,
        "fullcodeline": "if (res && PQresultStatus(res) == PGRES_TUPLES_OK &&"
    },
    {
        "line": 1512,
        "fullcodeline": "libpq_gettext(\"\\\"%s\\\" failed\\n\"),"
    },
    {
        "line": 1532,
        "fullcodeline": "if (!PQconsumeInput(conn))"
    },
    {
        "line": 1535,
        "fullcodeline": "if (PQisBusy(conn))"
    },
    {
        "line": 1542,
        "fullcodeline": "if (res && PQresultStatus(res) == PGRES_TUPLES_OK &&"
    },
    {
        "line": 1564,
        "fullcodeline": "libpq_gettext(\"\\\"%s\\\" failed\\n\"),"
    },
    {
        "line": 73,
        "fullcodeline": "conn->try_next_host = true;"
    },
    {
        "line": 148,
        "fullcodeline": "if (ret || !conn->addrlist)"
    },
    {
        "line": 161,
        "fullcodeline": "if (ret || !conn->addrlist)"
    },
    {
        "line": 274,
        "fullcodeline": "if (addr_cur == NULL)"
    },
    {
        "line": 289,
        "fullcodeline": "if (conn->connip != NULL)"
    },
    {
        "line": 300,
        "fullcodeline": "if (conn->sock == PGINVALID_SOCKET)"
    },
    {
        "line": 337,
        "fullcodeline": "if (!IS_AF_UNIX(addr_cur->ai_family))"
    },
    {
        "line": 346,
        "fullcodeline": "if (!pg_set_noblock(conn->sock))"
    },
    {
        "line": 366,
        "fullcodeline": "if (!IS_AF_UNIX(addr_cur->ai_family))"
    },
    {
        "line": 460,
        "fullcodeline": "if (connect(conn->sock, addr_cur->ai_addr,"
    },
    {
        "line": 515,
        "fullcodeline": "(char *) &optval, &optlen) == -1)"
    },
    {
        "line": 517,
        "fullcodeline": "appendPQExpBuffer(&conn->errorMessage,"
    },
    {
        "line": 545,
        "fullcodeline": "appendPQExpBuffer(&conn->errorMessage,"
    },
    {
        "line": 571,
        "fullcodeline": "char\t\tpwdbuf[BUFSIZ];"
    },
    {
        "line": 579,
        "fullcodeline": "errno = 0;"
    },
    {
        "line": 597,
        "fullcodeline": "passerr = pqGetpwuid(uid, &pass_buf, pwdbuf, sizeof(pwdbuf), &pass);"
    },
    {
        "line": 726,
        "fullcodeline": "appendPQExpBufferStr(&conn->errorMessage,"
    },
    {
        "line": 739,
        "fullcodeline": "appendPQExpBuffer(&conn->errorMessage,"
    },
    {
        "line": 742,
        "fullcodeline": "free(startpacket);"
    },
    {
        "line": 1009,
        "fullcodeline": "appendPQExpBuffer(&conn->errorMessage,"
    },
    {
        "line": 1034,
        "fullcodeline": "appendPQExpBuffer(&conn->errorMessage,"
    },
    {
        "line": 1043,
        "fullcodeline": "conn->inCursor = conn->inStart + 1; /* reread data */"
    },
    {
        "line": 1050,
        "fullcodeline": "conn->inStart = conn->inCursor;"
    },
    {
        "line": 1094,
        "fullcodeline": "conn->inStart = conn->inCursor;"
    },
    {
        "line": 1111,
        "fullcodeline": "pgpassfileWarning(conn);"
    },
    {
        "line": 1201,
        "fullcodeline": "conn->status = CONNECTION_AUTH_OK;"
    },
    {
        "line": 1208,
        "fullcodeline": "conn->asyncStatus = PGASYNC_BUSY;"
    },
    {
        "line": 1278,
        "fullcodeline": "PQclear(res);"
    },
    {
        "line": 1294,
        "fullcodeline": "conn->target_server_type == SERVER_TYPE_READ_ONLY)"
    },
    {
        "line": 1324,
        "fullcodeline": "read_only_server ="
    },
    {
        "line": 1440,
        "fullcodeline": "conn->status = CONNECTION_CONSUME;"
    },
    {
        "line": 1448,
        "fullcodeline": "PQclear(res);"
    },
    {
        "line": 1449,
        "fullcodeline": "conn->status = CONNECTION_CONSUME;"
    },
    {
        "line": 1470,
        "fullcodeline": "conn->status = CONNECTION_CHECK_WRITABLE;"
    },
    {
        "line": 1476,
        "fullcodeline": "PQntuples(res) == 1)"
    },
    {
        "line": 1478,
        "fullcodeline": "char\t   *val = PQgetvalue(res, 0, 0);"
    },
    {
        "line": 1499,
        "fullcodeline": "PQclear(res);"
    },
    {
        "line": 1502,
        "fullcodeline": "conn->status = CONNECTION_CONSUME;"
    },
    {
        "line": 1508,
        "fullcodeline": "PQclear(res);"
    },
    {
        "line": 1537,
        "fullcodeline": "conn->status = CONNECTION_CHECK_STANDBY;"
    },
    {
        "line": 1543,
        "fullcodeline": "PQntuples(res) == 1)"
    },
    {
        "line": 1545,
        "fullcodeline": "char\t   *val = PQgetvalue(res, 0, 0);"
    },
    {
        "line": 1551,
        "fullcodeline": "PQclear(res);"
    },
    {
        "line": 1554,
        "fullcodeline": "conn->status = CONNECTION_CONSUME;"
    },
    {
        "line": 1560,
        "fullcodeline": "PQclear(res);"
    },
    {
        "line": 99,
        "fullcodeline": "if (conn->target_server_type == SERVER_TYPE_PREFER_STANDBY &&"
    },
    {
        "line": 129,
        "fullcodeline": "if (!parse_int_param(ch->port, &thisport, conn, \"port\"))"
    },
    {
        "line": 132,
        "fullcodeline": "if (thisport < 1 || thisport > 65535)"
    },
    {
        "line": 150,
        "fullcodeline": "appendPQExpBuffer(&conn->errorMessage,"
    },
    {
        "line": 163,
        "fullcodeline": "appendPQExpBuffer(&conn->errorMessage,"
    },
    {
        "line": 276,
        "fullcodeline": "conn->try_next_host = true;"
    },
    {
        "line": 291,
        "fullcodeline": "free(conn->connip);"
    },
    {
        "line": 292,
        "fullcodeline": "conn->connip = NULL;"
    },
    {
        "line": 296,
        "fullcodeline": "conn->connip = strdup(host_addr);"
    },
    {
        "line": 302,
        "fullcodeline": "int\t\t\terrorno = SOCK_ERRNO;"
    },
    {
        "line": 316,
        "fullcodeline": "emitHostIdentityInfo(conn, host_addr);"
    },
    {
        "line": 317,
        "fullcodeline": "appendPQExpBuffer(&conn->errorMessage,"
    },
    {
        "line": 348,
        "fullcodeline": "appendPQExpBuffer(&conn->errorMessage,"
    },
    {
        "line": 351,
        "fullcodeline": "conn->try_next_addr = true;"
    },
    {
        "line": 369,
        "fullcodeline": "int\t\t\ton = 1;"
    },
    {
        "line": 371,
        "fullcodeline": "int\t\t\tusekeepalives = useKeepalives(conn);"
    },
    {
        "line": 372,
        "fullcodeline": "int\t\t\terr = 0;"
    },
    {
        "line": 518,
        "fullcodeline": "libpq_gettext(\"could not get socket error status: %s\\n\"),"
    },
    {
        "line": 519,
        "fullcodeline": "SOCK_STRERROR(SOCK_ERRNO, sebuf, sizeof(sebuf)));"
    },
    {
        "line": 546,
        "fullcodeline": "libpq_gettext(\"could not get client address from socket: %s\\n\"),"
    },
    {
        "line": 547,
        "fullcodeline": "SOCK_STRERROR(SOCK_ERRNO, sebuf, sizeof(sebuf)));"
    },
    {
        "line": 580,
        "fullcodeline": "if (getpeereid(conn->sock, &uid, &gid) != 0)"
    },
    {
        "line": 598,
        "fullcodeline": "if (pass == NULL)"
    },
    {
        "line": 612,
        "fullcodeline": "if (strcmp(pass->pw_name, conn->requirepeer) != 0)"
    },
    {
        "line": 727,
        "fullcodeline": "libpq_gettext(\"out of memory\\n\"));"
    },
    {
        "line": 740,
        "fullcodeline": "libpq_gettext(\"could not send startup packet: %s\\n\"),"
    },
    {
        "line": 741,
        "fullcodeline": "SOCK_STRERROR(SOCK_ERRNO, sebuf, sizeof(sebuf)));"
    },
    {
        "line": 1010,
        "fullcodeline": "libpq_gettext(\"expected authentication request from server, but received %c\\n\"),"
    },
    {
        "line": 1035,
        "fullcodeline": "libpq_gettext(\"expected authentication request from server, but received %c\\n\"),"
    },
    {
        "line": 1044,
        "fullcodeline": "if (pqGets_append(&conn->errorMessage, conn))"
    },
    {
        "line": 1057,
        "fullcodeline": "if (conn->errorMessage.len == 0 ||"
    },
    {
        "line": 1078,
        "fullcodeline": "if (pqCheckInBufferSpace(conn->inCursor + (size_t) msgLength,"
    },
    {
        "line": 1088,
        "fullcodeline": "if (pqGetErrorNotice3(conn, true))"
    },
    {
        "line": 1103,
        "fullcodeline": "if (strcmp(conn->last_sqlstate,"
    },
    {
        "line": 1240,
        "fullcodeline": "if (res->resultStatus != PGRES_FATAL_ERROR)"
    },
    {
        "line": 1275,
        "fullcodeline": "if (conn->errorMessage.len <= 0 ||"
    },
    {
        "line": 1305,
        "fullcodeline": "if (conn->default_transaction_read_only == PG_BOOL_UNKNOWN ||"
    },
    {
        "line": 1325,
        "fullcodeline": "(conn->default_transaction_read_only == PG_BOOL_YES ||"
    },
    {
        "line": 1328,
        "fullcodeline": "if ((conn->target_server_type == SERVER_TYPE_READ_WRITE) ?"
    },
    {
        "line": 1489,
        "fullcodeline": "if (strncmp(val, \"on\", 2) == 0)"
    },
    {
        "line": 1547,
        "fullcodeline": "if (strncmp(val, \"t\", 1) == 0)"
    },
    {
        "line": 100,
        "fullcodeline": "conn->nconnhost > 0)"
    },
    {
        "line": 102,
        "fullcodeline": "conn->target_server_type = SERVER_TYPE_PREFER_STANDBY_PASS2;"
    },
    {
        "line": 103,
        "fullcodeline": "conn->whichhost = 0;"
    },
    {
        "line": 134,
        "fullcodeline": "appendPQExpBuffer(&conn->errorMessage,"
    },
    {
        "line": 151,
        "fullcodeline": "libpq_gettext(\"could not translate host name \\\"%s\\\" to address: %s\\n\"),"
    },
    {
        "line": 152,
        "fullcodeline": "ch->host, gai_strerror(ret));"
    },
    {
        "line": 164,
        "fullcodeline": "libpq_gettext(\"could not parse network address \\\"%s\\\": %s\\n\"),"
    },
    {
        "line": 165,
        "fullcodeline": "ch->hostaddr, gai_strerror(ret));"
    },
    {
        "line": 310,
        "fullcodeline": "if (addr_cur->ai_next != NULL ||"
    },
    {
        "line": 318,
        "fullcodeline": "libpq_gettext(\"could not create socket: %s\\n\"),"
    },
    {
        "line": 319,
        "fullcodeline": "SOCK_STRERROR(errorno, sebuf, sizeof(sebuf)));"
    },
    {
        "line": 339,
        "fullcodeline": "if (!connectNoDelay(conn))"
    },
    {
        "line": 349,
        "fullcodeline": "libpq_gettext(\"could not set socket to nonblocking mode: %s\\n\"),"
    },
    {
        "line": 350,
        "fullcodeline": "SOCK_STRERROR(SOCK_ERRNO, sebuf, sizeof(sebuf)));"
    },
    {
        "line": 374,
        "fullcodeline": "if (usekeepalives < 0)"
    },
    {
        "line": 463,
        "fullcodeline": "if (SOCK_ERRNO == EINPROGRESS ||"
    },
    {
        "line": 486,
        "fullcodeline": "conn->status = CONNECTION_STARTED;"
    },
    {
        "line": 522,
        "fullcodeline": "else if (optval != 0)"
    },
    {
        "line": 614,
        "fullcodeline": "appendPQExpBuffer(&conn->errorMessage,"
    },
    {
        "line": 1058,
        "fullcodeline": "conn->errorMessage.data[conn->errorMessage.len - 1] != '\\n')"
    },
    {
        "line": 1060,
        "fullcodeline": "appendPQExpBufferChar(&conn->errorMessage, '\\n');"
    },
    {
        "line": 1106,
        "fullcodeline": "conn->try_next_host = true;"
    },
    {
        "line": 1241,
        "fullcodeline": "appendPQExpBufferStr(&conn->errorMessage,"
    },
    {
        "line": 1276,
        "fullcodeline": "conn->errorMessage.data[conn->errorMessage.len - 1] != '\\n')"
    },
    {
        "line": 1277,
        "fullcodeline": "appendPQExpBufferChar(&conn->errorMessage, '\\n');"
    },
    {
        "line": 1306,
        "fullcodeline": "conn->in_hot_standby == PG_BOOL_UNKNOWN)"
    },
    {
        "line": 1314,
        "fullcodeline": "conn->status = CONNECTION_OK;"
    },
    {
        "line": 1319,
        "fullcodeline": "conn->status = CONNECTION_CHECK_WRITABLE;"
    },
    {
        "line": 1326,
        "fullcodeline": "conn->in_hot_standby == PG_BOOL_YES);"
    },
    {
        "line": 1329,
        "fullcodeline": "read_only_server : !read_only_server)"
    },
    {
        "line": 1340,
        "fullcodeline": "conn->status = CONNECTION_OK;"
    },
    {
        "line": 1341,
        "fullcodeline": "sendTerminateConn(conn);"
    },
    {
        "line": 1347,
        "fullcodeline": "conn->try_next_host = true;"
    },
    {
        "line": 1351,
        "fullcodeline": "else if (conn->target_server_type == SERVER_TYPE_PRIMARY ||"
    },
    {
        "line": 1491,
        "fullcodeline": "conn->default_transaction_read_only = PG_BOOL_YES;"
    },
    {
        "line": 1492,
        "fullcodeline": "conn->in_hot_standby = PG_BOOL_YES;"
    },
    {
        "line": 1548,
        "fullcodeline": "conn->in_hot_standby = PG_BOOL_YES;"
    },
    {
        "line": 135,
        "fullcodeline": "libpq_gettext(\"invalid port number: \\\"%s\\\"\\n\"),"
    },
    {
        "line": 311,
        "fullcodeline": "conn->whichhost + 1 < conn->nconnhost)"
    },
    {
        "line": 313,
        "fullcodeline": "conn->try_next_addr = true;"
    },
    {
        "line": 342,
        "fullcodeline": "conn->try_next_addr = true;"
    },
    {
        "line": 376,
        "fullcodeline": "appendPQExpBufferStr(&conn->errorMessage,"
    },
    {
        "line": 378,
        "fullcodeline": "err = 1;"
    },
    {
        "line": 411,
        "fullcodeline": "conn->try_next_addr = true;"
    },
    {
        "line": 467,
        "fullcodeline": "SOCK_ERRNO == EINTR)"
    },
    {
        "line": 474,
        "fullcodeline": "conn->status = CONNECTION_STARTED;"
    },
    {
        "line": 529,
        "fullcodeline": "connectFailureMessage(conn, optval);"
    },
    {
        "line": 535,
        "fullcodeline": "conn->try_next_addr = true;"
    },
    {
        "line": 586,
        "fullcodeline": "if (errno == ENOSYS)"
    },
    {
        "line": 600,
        "fullcodeline": "if (passerr != 0)"
    },
    {
        "line": 615,
        "fullcodeline": "libpq_gettext(\"requirepeer specifies \\\"%s\\\", but actual peer user name is \\\"%s\\\"\\n\"),"
    },
    {
        "line": 1242,
        "fullcodeline": "libpq_gettext(\"unexpected message from server during startup\\n\"));"
    },
    {
        "line": 1315,
        "fullcodeline": "if (!PQsendQueryContinue(conn,"
    },
    {
        "line": 1332,
        "fullcodeline": "if (conn->target_server_type == SERVER_TYPE_READ_WRITE)"
    },
    {
        "line": 1353,
        "fullcodeline": "conn->target_server_type == SERVER_TYPE_PREFER_STANDBY)"
    },
    {
        "line": 1496,
        "fullcodeline": "conn->default_transaction_read_only = PG_BOOL_NO;"
    },
    {
        "line": 1497,
        "fullcodeline": "conn->in_hot_standby = PG_BOOL_NO;"
    },
    {
        "line": 1550,
        "fullcodeline": "conn->in_hot_standby = PG_BOOL_NO;"
    },
    {
        "line": 377,
        "fullcodeline": "libpq_gettext(\"keepalives parameter must be an integer\\n\"));"
    },
    {
        "line": 587,
        "fullcodeline": "appendPQExpBufferStr(&conn->errorMessage,"
    },
    {
        "line": 601,
        "fullcodeline": "appendPQExpBuffer(&conn->errorMessage,"
    },
    {
        "line": 1243,
        "fullcodeline": "else if (conn->send_appname &&"
    },
    {
        "line": 1333,
        "fullcodeline": "appendPQExpBufferStr(&conn->errorMessage,"
    },
    {
        "line": 1352,
        "fullcodeline": "conn->target_server_type == SERVER_TYPE_STANDBY ||"
    },
    {
        "line": 1363,
        "fullcodeline": "if (conn->sversion < 90000)"
    },
    {
        "line": 1366,
        "fullcodeline": "if (conn->in_hot_standby == PG_BOOL_UNKNOWN)"
    },
    {
        "line": 1384,
        "fullcodeline": "if ((conn->target_server_type == SERVER_TYPE_PRIMARY) ?"
    },
    {
        "line": 380,
        "fullcodeline": "else if (usekeepalives == 0)"
    },
    {
        "line": 588,
        "fullcodeline": "libpq_gettext(\"requirepeer parameter is not supported on this platform\\n\"));"
    },
    {
        "line": 590,
        "fullcodeline": "appendPQExpBuffer(&conn->errorMessage,"
    },
    {
        "line": 602,
        "fullcodeline": "libpq_gettext(\"could not look up local user ID %d: %s\\n\"),"
    },
    {
        "line": 603,
        "fullcodeline": "(int) uid,"
    },
    {
        "line": 604,
        "fullcodeline": "strerror_r(passerr, sebuf, sizeof(sebuf)));"
    },
    {
        "line": 606,
        "fullcodeline": "appendPQExpBuffer(&conn->errorMessage,"
    },
    {
        "line": 1244,
        "fullcodeline": "(conn->appname || conn->fbappname))"
    },
    {
        "line": 1258,
        "fullcodeline": "sqlstate = PQresultErrorField(res, PG_DIAG_SQLSTATE);"
    },
    {
        "line": 1334,
        "fullcodeline": "libpq_gettext(\"session is read-only\\n\"));"
    },
    {
        "line": 1336,
        "fullcodeline": "appendPQExpBufferStr(&conn->errorMessage,"
    },
    {
        "line": 1364,
        "fullcodeline": "conn->in_hot_standby = PG_BOOL_NO;"
    },
    {
        "line": 1374,
        "fullcodeline": "conn->status = CONNECTION_OK;"
    },
    {
        "line": 1379,
        "fullcodeline": "conn->status = CONNECTION_CHECK_STANDBY;"
    },
    {
        "line": 1385,
        "fullcodeline": "(conn->in_hot_standby == PG_BOOL_YES) :"
    },
    {
        "line": 1386,
        "fullcodeline": "(conn->in_hot_standby == PG_BOOL_NO))"
    },
    {
        "line": 1397,
        "fullcodeline": "conn->status = CONNECTION_OK;"
    },
    {
        "line": 1398,
        "fullcodeline": "sendTerminateConn(conn);"
    },
    {
        "line": 1404,
        "fullcodeline": "conn->try_next_host = true;"
    },
    {
        "line": 591,
        "fullcodeline": "libpq_gettext(\"could not get peer credentials: %s\\n\"),"
    },
    {
        "line": 592,
        "fullcodeline": "strerror_r(errno, sebuf, sizeof(sebuf)));"
    },
    {
        "line": 607,
        "fullcodeline": "libpq_gettext(\"local user with ID %d does not exist\\n\"),"
    },
    {
        "line": 608,
        "fullcodeline": "(int) uid);"
    },
    {
        "line": 1259,
        "fullcodeline": "if (sqlstate &&"
    },
    {
        "line": 1337,
        "fullcodeline": "libpq_gettext(\"session is not read-only\\n\"));"
    },
    {
        "line": 1375,
        "fullcodeline": "if (!PQsendQueryContinue(conn,"
    },
    {
        "line": 1389,
        "fullcodeline": "if (conn->target_server_type == SERVER_TYPE_PRIMARY)"
    },
    {
        "line": 1260,
        "fullcodeline": "strcmp(sqlstate, ERRCODE_APPNAME_UNKNOWN) == 0)"
    },
    {
        "line": 1262,
        "fullcodeline": "PQclear(res);"
    },
    {
        "line": 1263,
        "fullcodeline": "conn->send_appname = false;"
    },
    {
        "line": 1264,
        "fullcodeline": "need_new_connection = true;"
    },
    {
        "line": 1390,
        "fullcodeline": "appendPQExpBufferStr(&conn->errorMessage,"
    },
    {
        "line": 385,
        "fullcodeline": "else if (setsockopt(conn->sock,"
    },
    {
        "line": 1391,
        "fullcodeline": "libpq_gettext(\"server is in hot standby mode\\n\"));"
    },
    {
        "line": 1393,
        "fullcodeline": "appendPQExpBufferStr(&conn->errorMessage,"
    },
    {
        "line": 389,
        "fullcodeline": "appendPQExpBuffer(&conn->errorMessage,"
    },
    {
        "line": 394,
        "fullcodeline": "err = 1;"
    },
    {
        "line": 1394,
        "fullcodeline": "libpq_gettext(\"server is not in hot standby mode\\n\"));"
    },
    {
        "line": 387,
        "fullcodeline": "(char *) &on, sizeof(on)) < 0)"
    },
    {
        "line": 390,
        "fullcodeline": "libpq_gettext(\"%s(%s) failed: %s\\n\"),"
    },
    {
        "line": 393,
        "fullcodeline": "SOCK_STRERROR(SOCK_ERRNO, sebuf, sizeof(sebuf)));"
    },
    {
        "line": 396,
        "fullcodeline": "else if (!setKeepalivesIdle(conn)"
    },
    {
        "line": 398,
        "fullcodeline": "|| !setKeepalivesCount(conn))"
    },
    {
        "line": 399,
        "fullcodeline": "err = 1;"
    },
    {
        "line": 397,
        "fullcodeline": "|| !setKeepalivesInterval(conn)"
    },
    {
        "line": 406,
        "fullcodeline": "else if (!setTCPUserTimeout(conn))"
    },
    {
        "line": 407,
        "fullcodeline": "err = 1;"
    }
]