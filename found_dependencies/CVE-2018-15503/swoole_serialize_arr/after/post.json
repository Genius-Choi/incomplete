[
    {
        "line": 6,
        "fullcodeline": "swPoolstr *swStr = NULL;"
    },
    {
        "line": 7,
        "fullcodeline": "zend_uchar is_pack = zvalue->u.flags & HASH_FLAG_PACKED;"
    },
    {
        "line": 9,
        "fullcodeline": "ZEND_HASH_FOREACH_KEY_VAL(zvalue, index, key, data)"
    },
    {
        "line": 209,
        "fullcodeline": "ZEND_HASH_FOREACH_END();"
    },
    {
        "line": 11,
        "fullcodeline": "SBucketType type = {0};"
    },
    {
        "line": 12,
        "fullcodeline": "type.data_type = Z_TYPE_P(data);"
    },
    {
        "line": 14,
        "fullcodeline": "size_t p = buffer->offset;"
    },
    {
        "line": 16,
        "fullcodeline": "if (is_pack && zvalue->nNextFreeElement == zvalue->nNumOfElements)"
    },
    {
        "line": 94,
        "fullcodeline": "switch (Z_TYPE_P(data))"
    },
    {
        "line": 18,
        "fullcodeline": "type.key_type = KEY_TYPE_INDEX;"
    },
    {
        "line": 19,
        "fullcodeline": "type.key_len = 0;"
    },
    {
        "line": 20,
        "fullcodeline": "SERIA_SET_ENTRY_TYPE(buffer, type);"
    },
    {
        "line": 142,
        "fullcodeline": "swoole_set_zend_value(buffer, &(data->value));"
    },
    {
        "line": 145,
        "fullcodeline": "data = Z_REFVAL_P(data);"
    },
    {
        "line": 146,
        "fullcodeline": "((SBucketType*) (buffer->buffer + p))->data_type = Z_TYPE_P(data);"
    },
    {
        "line": 177,
        "fullcodeline": "data = Z_INDIRECT_P(data);"
    },
    {
        "line": 178,
        "fullcodeline": "zend_uchar type = Z_TYPE_P(data);"
    },
    {
        "line": 179,
        "fullcodeline": "((SBucketType*) (buffer->buffer + p))->data_type = (type == IS_UNDEF ? IS_NULL : type);"
    },
    {
        "line": 137,
        "fullcodeline": "SBucketType* long_type = (SBucketType*) (buffer->buffer + p);"
    },
    {
        "line": 138,
        "fullcodeline": "swoole_serialize_long(buffer, data, long_type);"
    },
    {
        "line": 151,
        "fullcodeline": "zend_array *ht = Z_ARRVAL_P(data);"
    },
    {
        "line": 188,
        "fullcodeline": "((SBucketType*) (buffer->buffer + p))->data_type = IS_UNDEF;"
    },
    {
        "line": 98,
        "fullcodeline": "if ((swStr = swoole_mini_filter_find(Z_STR_P(data))))"
    },
    {
        "line": 153,
        "fullcodeline": "if (GC_IS_RECURSIVE(ht))"
    },
    {
        "line": 190,
        "fullcodeline": "if (ZEND_HASH_APPLY_PROTECTION(Z_OBJPROP_P(data)))"
    },
    {
        "line": 27,
        "fullcodeline": "type.key_type = KEY_TYPE_STRING;"
    },
    {
        "line": 100,
        "fullcodeline": "((SBucketType*) (buffer->buffer + p))->data_len = 3; //means use same string"
    },
    {
        "line": 155,
        "fullcodeline": "((SBucketType*) (buffer->buffer + p))->data_type = IS_NULL; //reset type null"
    },
    {
        "line": 192,
        "fullcodeline": "GC_PROTECT_RECURSION(Z_OBJPROP_P(data));"
    },
    {
        "line": 193,
        "fullcodeline": "swoole_serialize_object(buffer, data, p);"
    },
    {
        "line": 194,
        "fullcodeline": "GC_UNPROTECT_RECURSION(Z_OBJPROP_P(data));"
    },
    {
        "line": 28,
        "fullcodeline": "if ((swStr = swoole_mini_filter_find(key)))"
    },
    {
        "line": 70,
        "fullcodeline": "type.key_type = KEY_TYPE_INDEX;"
    },
    {
        "line": 101,
        "fullcodeline": "if (swStr->offset & 4)"
    },
    {
        "line": 160,
        "fullcodeline": "seria_array_type(ht, buffer, p, buffer->offset);"
    },
    {
        "line": 198,
        "fullcodeline": "swoole_serialize_object(buffer, data, p);"
    },
    {
        "line": 30,
        "fullcodeline": "type.key_len = 3; //means use same string"
    },
    {
        "line": 31,
        "fullcodeline": "SERIA_SET_ENTRY_TYPE(buffer, type);"
    },
    {
        "line": 71,
        "fullcodeline": "if (index <= 0xff)"
    },
    {
        "line": 103,
        "fullcodeline": "SERIA_SET_ENTRY_SIZE4(buffer, swStr->offset);"
    },
    {
        "line": 112,
        "fullcodeline": "if (Z_STRLEN_P(data) <= 0xff)"
    },
    {
        "line": 161,
        "fullcodeline": "if (ZEND_HASH_APPLY_PROTECTION(ht))"
    },
    {
        "line": 32,
        "fullcodeline": "if (swStr->offset & 4)"
    },
    {
        "line": 73,
        "fullcodeline": "type.key_len = 1;"
    },
    {
        "line": 74,
        "fullcodeline": "SERIA_SET_ENTRY_TYPE(buffer, type);"
    },
    {
        "line": 75,
        "fullcodeline": "SERIA_SET_ENTRY_TYPE(buffer, index);"
    },
    {
        "line": 107,
        "fullcodeline": "SERIA_SET_ENTRY_SHORT(buffer, swStr->offset);"
    },
    {
        "line": 114,
        "fullcodeline": "((SBucketType*) (buffer->buffer + p))->data_len = 1;"
    },
    {
        "line": 115,
        "fullcodeline": "swoole_mini_filter_add(Z_STR_P(data), buffer->offset, 1);"
    },
    {
        "line": 116,
        "fullcodeline": "SERIA_SET_ENTRY_TYPE(buffer, Z_STRLEN_P(data));"
    },
    {
        "line": 117,
        "fullcodeline": "swoole_string_cpy(buffer, Z_STRVAL_P(data), Z_STRLEN_P(data));"
    },
    {
        "line": 163,
        "fullcodeline": "GC_PROTECT_RECURSION(ht);"
    },
    {
        "line": 164,
        "fullcodeline": "swoole_serialize_arr(buffer, ht);"
    },
    {
        "line": 165,
        "fullcodeline": "GC_UNPROTECT_RECURSION(ht);"
    },
    {
        "line": 34,
        "fullcodeline": "SERIA_SET_ENTRY_SIZE4(buffer, swStr->offset);"
    },
    {
        "line": 43,
        "fullcodeline": "if (key->len <= 0xff)"
    },
    {
        "line": 169,
        "fullcodeline": "swoole_serialize_arr(buffer, ht);"
    },
    {
        "line": 38,
        "fullcodeline": "SERIA_SET_ENTRY_SHORT(buffer, swStr->offset);"
    },
    {
        "line": 45,
        "fullcodeline": "type.key_len = 1;"
    },
    {
        "line": 46,
        "fullcodeline": "SERIA_SET_ENTRY_TYPE(buffer, type);"
    },
    {
        "line": 47,
        "fullcodeline": "swoole_mini_filter_add(key, buffer->offset, 1);"
    },
    {
        "line": 48,
        "fullcodeline": "SERIA_SET_ENTRY_TYPE(buffer, key->len);"
    },
    {
        "line": 49,
        "fullcodeline": "swoole_string_cpy(buffer, key->val, key->len);"
    },
    {
        "line": 77,
        "fullcodeline": "else if (index <= 0xffff)"
    },
    {
        "line": 119,
        "fullcodeline": "else if (Z_STRLEN_P(data) <= 0xffff)"
    },
    {
        "line": 79,
        "fullcodeline": "type.key_len = 2;"
    },
    {
        "line": 80,
        "fullcodeline": "SERIA_SET_ENTRY_TYPE(buffer, type);"
    },
    {
        "line": 81,
        "fullcodeline": "SERIA_SET_ENTRY_SHORT(buffer, index);"
    },
    {
        "line": 121,
        "fullcodeline": "((SBucketType*) (buffer->buffer + p))->data_len = 2;"
    },
    {
        "line": 122,
        "fullcodeline": "swoole_mini_filter_add(Z_STR_P(data), buffer->offset, 2);"
    },
    {
        "line": 123,
        "fullcodeline": "SERIA_SET_ENTRY_SHORT(buffer, Z_STRLEN_P(data));"
    },
    {
        "line": 124,
        "fullcodeline": "swoole_string_cpy(buffer, Z_STRVAL_P(data), Z_STRLEN_P(data));"
    },
    {
        "line": 51,
        "fullcodeline": "else if (key->len <= 0xffff)"
    },
    {
        "line": 85,
        "fullcodeline": "type.key_len = 3;"
    },
    {
        "line": 86,
        "fullcodeline": "SERIA_SET_ENTRY_TYPE(buffer, type);"
    },
    {
        "line": 87,
        "fullcodeline": "SERIA_SET_ENTRY_ULONG(buffer, index);"
    },
    {
        "line": 128,
        "fullcodeline": "((SBucketType*) (buffer->buffer + p))->data_len = 0;"
    },
    {
        "line": 129,
        "fullcodeline": "swoole_mini_filter_add(Z_STR_P(data), buffer->offset, 3);"
    },
    {
        "line": 130,
        "fullcodeline": "swoole_string_cpy(buffer, (char*) Z_STR_P(data) + XtOffsetOf(zend_string, len), sizeof (size_t) + Z_STRLEN_P(data));"
    },
    {
        "line": 53,
        "fullcodeline": "type.key_len = 2;"
    },
    {
        "line": 54,
        "fullcodeline": "SERIA_SET_ENTRY_TYPE(buffer, type);"
    },
    {
        "line": 55,
        "fullcodeline": "swoole_mini_filter_add(key, buffer->offset, 2);"
    },
    {
        "line": 56,
        "fullcodeline": "SERIA_SET_ENTRY_SHORT(buffer, key->len);"
    },
    {
        "line": 57,
        "fullcodeline": "swoole_string_cpy(buffer, key->val, key->len);"
    },
    {
        "line": 61,
        "fullcodeline": "type.key_len = 0;"
    },
    {
        "line": 62,
        "fullcodeline": "SERIA_SET_ENTRY_TYPE(buffer, type);"
    },
    {
        "line": 63,
        "fullcodeline": "swoole_mini_filter_add(key, buffer->offset, 3);"
    },
    {
        "line": 64,
        "fullcodeline": "swoole_string_cpy(buffer, key + XtOffsetOf(zend_string, len), sizeof (size_t) + key->len);"
    }
]