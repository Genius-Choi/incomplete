[
    {
        "line": 5,
        "fullcodeline": "char* PasswordHash = NULL;"
    },
    {
        "line": 6,
        "fullcodeline": "INT64 PasswordHashLength = 0;"
    },
    {
        "line": 9,
        "fullcodeline": "WINPR_ASSERT(context);"
    },
    {
        "line": 10,
        "fullcodeline": "WINPR_ASSERT(hash);"
    },
    {
        "line": 12,
        "fullcodeline": "credentials = context->credentials;"
    },
    {
        "line": 15,
        "fullcodeline": "PasswordHashLength = credentials->identity.PasswordLength - SSPI_CREDENTIALS_HASH_LENGTH_OFFSET;"
    },
    {
        "line": 16,
        "fullcodeline": "WINPR_ASSERT(PasswordHashLength >= 0);"
    },
    {
        "line": 17,
        "fullcodeline": "WINPR_ASSERT(PasswordHashLength <= INT_MAX);"
    },
    {
        "line": 18,
        "fullcodeline": "status = ConvertFromUnicode(CP_UTF8, 0, (LPCWSTR)credentials->identity.Password,"
    },
    {
        "line": 24,
        "fullcodeline": "CharUpperBuffA(PasswordHash, (DWORD)PasswordHashLength);"
    },
    {
        "line": 21,
        "fullcodeline": "if (status <= 0)"
    },
    {
        "line": 26,
        "fullcodeline": "for (i = 0; i < 32; i += 2)"
    },
    {
        "line": 19,
        "fullcodeline": "(int)PasswordHashLength, &PasswordHash, 0, NULL, NULL);"
    },
    {
        "line": 28,
        "fullcodeline": "BYTE hn ="
    },
    {
        "line": 30,
        "fullcodeline": "BYTE ln = (BYTE)(PasswordHash[i + 1] > '9' ? PasswordHash[i + 1] - 'A' + 10"
    },
    {
        "line": 22,
        "fullcodeline": "return -1;"
    },
    {
        "line": 29,
        "fullcodeline": "(BYTE)(PasswordHash[i] > '9' ? PasswordHash[i] - 'A' + 10 : PasswordHash[i] - '0');"
    },
    {
        "line": 32,
        "fullcodeline": "hash[i / 2] = (BYTE)((hn << 4) | ln);"
    },
    {
        "line": 31,
        "fullcodeline": ": PasswordHash[i + 1] - '0');"
    }
]