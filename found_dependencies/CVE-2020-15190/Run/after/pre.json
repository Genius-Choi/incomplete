[
    {
        "line": 7,
        "fullcodeline": "params.device = device_;"
    },
    {
        "line": 8,
        "fullcodeline": "params.frame_iter = FrameAndIter(0, 0);"
    },
    {
        "line": 9,
        "fullcodeline": "params.inputs = inputs.GetTensorValues();"
    },
    {
        "line": 10,
        "fullcodeline": "params.op_kernel = kernel_.get();"
    },
    {
        "line": 11,
        "fullcodeline": "params.resource_manager = device_->resource_manager();"
    },
    {
        "line": 12,
        "fullcodeline": "params.input_alloc_attrs = &input_alloc_attrs_;"
    },
    {
        "line": 13,
        "fullcodeline": "params.output_attr_array = output_alloc_attrs_.data();"
    },
    {
        "line": 14,
        "fullcodeline": "params.function_library = flr_;"
    },
    {
        "line": 15,
        "fullcodeline": "params.slice_reader_cache = &slice_reader_cache_;"
    },
    {
        "line": 16,
        "fullcodeline": "params.rendezvous = rendezvous_;"
    },
    {
        "line": 17,
        "fullcodeline": "OpExecutionState* op_execution_state = nullptr;"
    },
    {
        "line": 35,
        "fullcodeline": "params.log_memory = log_memory_;"
    },
    {
        "line": 37,
        "fullcodeline": "params.runner = get_runner();"
    },
    {
        "line": 39,
        "fullcodeline": "params.step_container ="
    },
    {
        "line": 41,
        "fullcodeline": "auto step_container_cleanup = gtl::MakeCleanup([step_container, this] {"
    },
    {
        "line": 47,
        "fullcodeline": "params.collective_executor ="
    },
    {
        "line": 50,
        "fullcodeline": "OpKernelContext context(&params);"
    },
    {
        "line": 40,
        "fullcodeline": "step_container == nullptr ? &step_container_ : step_container;"
    },
    {
        "line": 48,
        "fullcodeline": "collective_executor_ ? collective_executor_->get() : nullptr;"
    },
    {
        "line": 54,
        "fullcodeline": "port::ScopedSetRound round(FE_TONEAREST);"
    },
    {
        "line": 57,
        "fullcodeline": "profiler::AnnotatedTraceMe activity("
    },
    {
        "line": 60,
        "fullcodeline": "device_->Compute(kernel_.get(), &context);"
    },
    {
        "line": 64,
        "fullcodeline": "if (op_execution_state != nullptr) {"
    },
    {
        "line": 68,
        "fullcodeline": "if (!context.status().ok()) return context.status();"
    },
    {
        "line": 70,
        "fullcodeline": "if (outputs != nullptr) {"
    },
    {
        "line": 81,
        "fullcodeline": "return Status::OK();"
    },
    {
        "line": 21,
        "fullcodeline": "params.cancellation_manager = cancellation_manager;"
    },
    {
        "line": 65,
        "fullcodeline": "op_execution_state->Unref();"
    },
    {
        "line": 71,
        "fullcodeline": "outputs->clear();"
    },
    {
        "line": 72,
        "fullcodeline": "for (int i = 0; i < context.num_outputs(); ++i) {"
    },
    {
        "line": 22,
        "fullcodeline": "} else if (kernel_->is_deferred()) {"
    },
    {
        "line": 73,
        "fullcodeline": "const auto* output_tensor = context.mutable_output(i);"
    },
    {
        "line": 23,
        "fullcodeline": "op_execution_state = new OpExecutionState;"
    },
    {
        "line": 24,
        "fullcodeline": "params.cancellation_manager = &op_execution_state->cancellation_manager;"
    },
    {
        "line": 25,
        "fullcodeline": "params.inc_num_deferred_ops_function = [op_execution_state]() {"
    },
    {
        "line": 28,
        "fullcodeline": "params.dec_num_deferred_ops_function = [op_execution_state]() {"
    },
    {
        "line": 32,
        "fullcodeline": "params.cancellation_manager = &default_cancellation_manager;"
    },
    {
        "line": 75,
        "fullcodeline": "outputs->push_back(Tensor(*output_tensor));"
    },
    {
        "line": 77,
        "fullcodeline": "outputs->push_back(Tensor());"
    }
]