[
    {
        "line": 4,
        "fullcodeline": "struct dentry *dir = nd->path.dentry;"
    },
    {
        "line": 5,
        "fullcodeline": "int open_flag = op->open_flag;"
    },
    {
        "line": 6,
        "fullcodeline": "bool will_truncate = (open_flag & O_TRUNC) != 0;"
    },
    {
        "line": 7,
        "fullcodeline": "bool got_write = false;"
    },
    {
        "line": 8,
        "fullcodeline": "int acc_mode = op->acc_mode;"
    },
    {
        "line": 14,
        "fullcodeline": "nd->flags &= ~LOOKUP_PARENT;"
    },
    {
        "line": 15,
        "fullcodeline": "nd->flags |= op->intent;"
    },
    {
        "line": 68,
        "fullcodeline": "error = lookup_open(nd, &path, file, op, got_write);"
    },
    {
        "line": 105,
        "fullcodeline": "error = follow_managed(&path, nd);"
    },
    {
        "line": 112,
        "fullcodeline": "audit_inode(nd->name, path.dentry, 0);"
    },
    {
        "line": 119,
        "fullcodeline": "seq = 0;\t/* out of RCU mode, so the value doesn't matter */"
    },
    {
        "line": 120,
        "fullcodeline": "inode = d_backing_inode(path.dentry);"
    },
    {
        "line": 122,
        "fullcodeline": "error = step_into(nd, &path, 0, inode, seq);"
    },
    {
        "line": 127,
        "fullcodeline": "error = complete_walk(nd);"
    },
    {
        "line": 130,
        "fullcodeline": "audit_inode(nd->name, nd->path.dentry, 0);"
    },
    {
        "line": 140,
        "fullcodeline": "error = -ENOTDIR;"
    },
    {
        "line": 153,
        "fullcodeline": "error = may_open(&nd->path, acc_mode, open_flag);"
    },
    {
        "line": 157,
        "fullcodeline": "error = vfs_open(&nd->path, file);"
    },
    {
        "line": 161,
        "fullcodeline": "error = ima_file_check(file, op->acc_mode);"
    },
    {
        "line": 17,
        "fullcodeline": "if (nd->last_type != LAST_NORM) {"
    },
    {
        "line": 54,
        "fullcodeline": "if (open_flag & (O_CREAT | O_TRUNC | O_WRONLY | O_RDWR)) {"
    },
    {
        "line": 64,
        "fullcodeline": "if (open_flag & O_CREAT)"
    },
    {
        "line": 69,
        "fullcodeline": "if (open_flag & O_CREAT)"
    },
    {
        "line": 77,
        "fullcodeline": "if (file->f_mode & FMODE_OPENED) {"
    },
    {
        "line": 86,
        "fullcodeline": "if (file->f_mode & FMODE_CREATED) {"
    },
    {
        "line": 123,
        "fullcodeline": "if (unlikely(error))"
    },
    {
        "line": 131,
        "fullcodeline": "if (open_flag & O_CREAT) {"
    },
    {
        "line": 156,
        "fullcodeline": "BUG_ON(file->f_mode & FMODE_OPENED); /* once it's opened, it's opened */"
    },
    {
        "line": 18,
        "fullcodeline": "error = handle_dots(nd, nd->last_type);"
    },
    {
        "line": 24,
        "fullcodeline": "if (!(open_flag & O_CREAT)) {"
    },
    {
        "line": 28,
        "fullcodeline": "error = lookup_fast(nd, &path, &inode, &seq);"
    },
    {
        "line": 55,
        "fullcodeline": "error = mnt_want_write(nd->path.mnt);"
    },
    {
        "line": 65,
        "fullcodeline": "inode_lock(dir->d_inode);"
    },
    {
        "line": 70,
        "fullcodeline": "inode_unlock(dir->d_inode);"
    },
    {
        "line": 88,
        "fullcodeline": "open_flag &= ~O_TRUNC;"
    },
    {
        "line": 89,
        "fullcodeline": "will_truncate = false;"
    },
    {
        "line": 90,
        "fullcodeline": "acc_mode = 0;"
    },
    {
        "line": 91,
        "fullcodeline": "path_to_nameidata(&path, nd);"
    },
    {
        "line": 106,
        "fullcodeline": "if (unlikely(error < 0))"
    },
    {
        "line": 114,
        "fullcodeline": "if (unlikely((open_flag & (O_EXCL | O_CREAT)) == (O_EXCL | O_CREAT))) {"
    },
    {
        "line": 132,
        "fullcodeline": "error = -EISDIR;"
    },
    {
        "line": 135,
        "fullcodeline": "error = may_create_in_sticky(dir,"
    },
    {
        "line": 141,
        "fullcodeline": "if ((nd->flags & LOOKUP_DIRECTORY) && !d_can_lookup(nd->path.dentry))"
    },
    {
        "line": 143,
        "fullcodeline": "if (!d_is_reg(nd->path.dentry))"
    },
    {
        "line": 144,
        "fullcodeline": "will_truncate = false;"
    },
    {
        "line": 147,
        "fullcodeline": "error = mnt_want_write(nd->path.mnt);"
    },
    {
        "line": 162,
        "fullcodeline": "if (!error && will_truncate)"
    },
    {
        "line": 163,
        "fullcodeline": "error = handle_truncate(file);"
    },
    {
        "line": 165,
        "fullcodeline": "if (unlikely(error > 0)) {"
    },
    {
        "line": 167,
        "fullcodeline": "error = -EINVAL;"
    },
    {
        "line": 19,
        "fullcodeline": "if (unlikely(error))"
    },
    {
        "line": 32,
        "fullcodeline": "if (error < 0)"
    },
    {
        "line": 35,
        "fullcodeline": "BUG_ON(nd->inode != dir->d_inode);"
    },
    {
        "line": 36,
        "fullcodeline": "BUG_ON(nd->flags & LOOKUP_RCU);"
    },
    {
        "line": 44,
        "fullcodeline": "error = complete_walk(nd);"
    },
    {
        "line": 48,
        "fullcodeline": "audit_inode(nd->name, dir, AUDIT_INODE_PARENT);"
    },
    {
        "line": 67,
        "fullcodeline": "inode_lock_shared(dir->d_inode);"
    },
    {
        "line": 72,
        "fullcodeline": "inode_unlock_shared(dir->d_inode);"
    },
    {
        "line": 116,
        "fullcodeline": "return -EEXIST;"
    },
    {
        "line": 133,
        "fullcodeline": "if (d_is_dir(nd->path.dentry))"
    },
    {
        "line": 137,
        "fullcodeline": "if (unlikely(error))"
    },
    {
        "line": 26,
        "fullcodeline": "nd->flags |= LOOKUP_FOLLOW | LOOKUP_DIRECTORY;"
    },
    {
        "line": 29,
        "fullcodeline": "if (likely(error > 0))"
    },
    {
        "line": 57,
        "fullcodeline": "got_write = true;"
    },
    {
        "line": 78,
        "fullcodeline": "if ((file->f_mode & FMODE_CREATED) ||"
    },
    {
        "line": 79,
        "fullcodeline": "!S_ISREG(file_inode(file)->i_mode))"
    },
    {
        "line": 80,
        "fullcodeline": "will_truncate = false;"
    },
    {
        "line": 136,
        "fullcodeline": "d_backing_inode(nd->path.dentry));"
    },
    {
        "line": 51,
        "fullcodeline": "return -EISDIR;"
    }
]