[
    {
        "line": 4,
        "fullcodeline": "int ret = 0;"
    },
    {
        "line": 6,
        "fullcodeline": "DefragInit();"
    },
    {
        "line": 12,
        "fullcodeline": "int id = 1;"
    },
    {
        "line": 13,
        "fullcodeline": "Packet *packets[17];"
    },
    {
        "line": 14,
        "fullcodeline": "memset(packets, 0x00, sizeof(packets));"
    },
    {
        "line": 21,
        "fullcodeline": "packets[0] = BuildTestPacket(id, 0, 1, 'A', 24);"
    },
    {
        "line": 24,
        "fullcodeline": "packets[1] = BuildTestPacket(id, 32 >> 3, 1, 'B', 16);"
    },
    {
        "line": 27,
        "fullcodeline": "packets[2] = BuildTestPacket(id, 48 >> 3, 1, 'C', 24);"
    },
    {
        "line": 30,
        "fullcodeline": "packets[3] = BuildTestPacket(id, 80 >> 3, 1, 'D', 8);"
    },
    {
        "line": 33,
        "fullcodeline": "packets[4] = BuildTestPacket(id, 104 >> 3, 1, 'E', 16);"
    },
    {
        "line": 36,
        "fullcodeline": "packets[5] = BuildTestPacket(id, 120 >> 3, 1, 'F', 24);"
    },
    {
        "line": 39,
        "fullcodeline": "packets[6] = BuildTestPacket(id, 144 >> 3, 1, 'G', 16);"
    },
    {
        "line": 42,
        "fullcodeline": "packets[7] = BuildTestPacket(id, 160 >> 3, 1, 'H', 16);"
    },
    {
        "line": 45,
        "fullcodeline": "packets[8] = BuildTestPacket(id, 176 >> 3, 1, 'I', 8);"
    },
    {
        "line": 52,
        "fullcodeline": "packets[9] = BuildTestPacket(id, 8 >> 3, 1, 'J', 32);"
    },
    {
        "line": 55,
        "fullcodeline": "packets[10] = BuildTestPacket(id, 48 >> 3, 1, 'K', 24);"
    },
    {
        "line": 58,
        "fullcodeline": "packets[11] = BuildTestPacket(id, 72 >> 3, 1, 'L', 24);"
    },
    {
        "line": 61,
        "fullcodeline": "packets[12] = BuildTestPacket(id, 96 >> 3, 1, 'M', 24);"
    },
    {
        "line": 64,
        "fullcodeline": "packets[13] = BuildTestPacket(id, 128 >> 3, 1, 'N', 8);"
    },
    {
        "line": 67,
        "fullcodeline": "packets[14] = BuildTestPacket(id, 152 >> 3, 1, 'O', 8);"
    },
    {
        "line": 70,
        "fullcodeline": "packets[15] = BuildTestPacket(id, 160 >> 3, 1, 'P', 8);"
    },
    {
        "line": 73,
        "fullcodeline": "packets[16] = BuildTestPacket(id, 176 >> 3, 0, 'Q', 16);"
    },
    {
        "line": 75,
        "fullcodeline": "default_policy = policy;"
    },
    {
        "line": 88,
        "fullcodeline": "int overlap = 0;"
    },
    {
        "line": 104,
        "fullcodeline": "Packet *reassembled = Defrag(NULL, NULL, packets[16], NULL);"
    },
    {
        "line": 119,
        "fullcodeline": "SCFree(reassembled);"
    },
    {
        "line": 126,
        "fullcodeline": "ret = 1;"
    },
    {
        "line": 131,
        "fullcodeline": "DefragDestroy();"
    },
    {
        "line": 78,
        "fullcodeline": "for (i = 0; i < 9; i++) {"
    },
    {
        "line": 89,
        "fullcodeline": "for (; i < 16; i++) {"
    },
    {
        "line": 99,
        "fullcodeline": "if (!overlap) {"
    },
    {
        "line": 105,
        "fullcodeline": "if (reassembled == NULL) {"
    },
    {
        "line": 109,
        "fullcodeline": "if (IPV4_GET_HLEN(reassembled) != 20) {"
    },
    {
        "line": 112,
        "fullcodeline": "if (IPV4_GET_IPLEN(reassembled) != 20 + 192) {"
    },
    {
        "line": 116,
        "fullcodeline": "if (memcmp(GET_PKT_DATA(reassembled) + 20, expected, expected_len) != 0) {"
    },
    {
        "line": 122,
        "fullcodeline": "if (defrag_context->frag_pool->outstanding != 0) {"
    },
    {
        "line": 128,
        "fullcodeline": "for (i = 0; i < 17; i++) {"
    },
    {
        "line": 79,
        "fullcodeline": "Packet *tp = Defrag(NULL, NULL, packets[i], NULL);"
    },
    {
        "line": 90,
        "fullcodeline": "Packet *tp = Defrag(NULL, NULL, packets[i], NULL);"
    },
    {
        "line": 129,
        "fullcodeline": "SCFree(packets[i]);"
    },
    {
        "line": 80,
        "fullcodeline": "if (tp != NULL) {"
    },
    {
        "line": 84,
        "fullcodeline": "if (ENGINE_ISSET_EVENT(packets[i], IPV4_FRAG_OVERLAP)) {"
    },
    {
        "line": 91,
        "fullcodeline": "if (tp != NULL) {"
    },
    {
        "line": 95,
        "fullcodeline": "if (ENGINE_ISSET_EVENT(packets[i], IPV4_FRAG_OVERLAP)) {"
    },
    {
        "line": 81,
        "fullcodeline": "SCFree(tp);"
    },
    {
        "line": 92,
        "fullcodeline": "SCFree(tp);"
    },
    {
        "line": 96,
        "fullcodeline": "overlap++;"
    }
]