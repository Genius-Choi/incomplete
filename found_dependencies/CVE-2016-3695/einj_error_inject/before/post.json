[
    {
        "line": 34,
        "fullcodeline": "base_addr = param1 & param2;"
    },
    {
        "line": 35,
        "fullcodeline": "size = ~param2 + 1;"
    },
    {
        "line": 45,
        "fullcodeline": "mutex_lock(&einj_mutex);"
    },
    {
        "line": 46,
        "fullcodeline": "rc = __einj_error_inject(type, flags, param1, param2, param3, param4);"
    },
    {
        "line": 47,
        "fullcodeline": "mutex_unlock(&einj_mutex);"
    },
    {
        "line": 8,
        "fullcodeline": "if (flags && (flags &"
    },
    {
        "line": 18,
        "fullcodeline": "if (!(param_extension || acpi5))"
    },
    {
        "line": 22,
        "fullcodeline": "if (type & ACPI5_VENDOR_BIT) {"
    },
    {
        "line": 37,
        "fullcodeline": "if (((param2 & PAGE_MASK) != PAGE_MASK) ||"
    },
    {
        "line": 38,
        "fullcodeline": "((region_intersects(base_addr, size, IORESOURCE_SYSTEM_RAM, IORES_DESC_NONE)"
    },
    {
        "line": 9,
        "fullcodeline": "~(SETWA_FLAGS_APICID|SETWA_FLAGS_MEM|SETWA_FLAGS_PCIE_SBDF)))"
    },
    {
        "line": 10,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 23,
        "fullcodeline": "if (vendor_flags != SETWA_FLAGS_MEM)"
    },
    {
        "line": 40,
        "fullcodeline": "(region_intersects(base_addr, size, IORESOURCE_MEM, IORES_DESC_PERSISTENT_MEMORY)"
    },
    {
        "line": 42,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 25,
        "fullcodeline": "} else if (!(type & MEM_ERROR_MASK) && !(flags & SETWA_FLAGS_MEM))"
    }
]