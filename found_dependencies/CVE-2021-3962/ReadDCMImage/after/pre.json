[
    {
        "line": 10,
        "fullcodeline": "explicit_vr[MagickPathExtent],"
    },
    {
        "line": 11,
        "fullcodeline": "implicit_vr[MagickPathExtent],"
    },
    {
        "line": 12,
        "fullcodeline": "magick[MagickPathExtent],"
    },
    {
        "line": 13,
        "fullcodeline": "photometric[MagickPathExtent];"
    },
    {
        "line": 71,
        "fullcodeline": "assert(image_info != (const ImageInfo *) NULL);"
    },
    {
        "line": 72,
        "fullcodeline": "assert(image_info->signature == MagickCoreSignature);"
    },
    {
        "line": 76,
        "fullcodeline": "assert(exception != (ExceptionInfo *) NULL);"
    },
    {
        "line": 77,
        "fullcodeline": "assert(exception->signature == MagickCoreSignature);"
    },
    {
        "line": 78,
        "fullcodeline": "image=AcquireImage(image_info,exception);"
    },
    {
        "line": 79,
        "fullcodeline": "status=OpenBlob(image_info,image,ReadBinaryBlobMode,exception);"
    },
    {
        "line": 85,
        "fullcodeline": "image->depth=8UL;"
    },
    {
        "line": 86,
        "fullcodeline": "image->endian=LSBEndian;"
    },
    {
        "line": 92,
        "fullcodeline": "data=(unsigned char *) NULL;"
    },
    {
        "line": 93,
        "fullcodeline": "stream_info=(DCMStreamInfo *) AcquireMagickMemory(sizeof(*stream_info));"
    },
    {
        "line": 94,
        "fullcodeline": "sequence_depth=0;"
    },
    {
        "line": 95,
        "fullcodeline": "stack=NewLinkedList(256);"
    },
    {
        "line": 99,
        "fullcodeline": "count=ReadBlob(image,128,(unsigned char *) magick);"
    },
    {
        "line": 102,
        "fullcodeline": "count=ReadBlob(image,4,(unsigned char *) magick);"
    },
    {
        "line": 113,
        "fullcodeline": "info.bits_allocated=8;"
    },
    {
        "line": 114,
        "fullcodeline": "info.bytes_per_pixel=1;"
    },
    {
        "line": 115,
        "fullcodeline": "info.depth=8;"
    },
    {
        "line": 116,
        "fullcodeline": "info.mask=0xffff;"
    },
    {
        "line": 117,
        "fullcodeline": "info.max_value=255UL;"
    },
    {
        "line": 118,
        "fullcodeline": "info.samples_per_pixel=1;"
    },
    {
        "line": 119,
        "fullcodeline": "info.signed_data=(~0UL);"
    },
    {
        "line": 120,
        "fullcodeline": "info.rescale_slope=1.0;"
    },
    {
        "line": 121,
        "fullcodeline": "element=0;"
    },
    {
        "line": 122,
        "fullcodeline": "explicit_vr[2]='\\0';"
    },
    {
        "line": 123,
        "fullcodeline": "explicit_file=MagickFalse;"
    },
    {
        "line": 124,
        "fullcodeline": "colors=0;"
    },
    {
        "line": 125,
        "fullcodeline": "number_scenes=1;"
    },
    {
        "line": 127,
        "fullcodeline": "explicit_retry=MagickFalse;"
    },
    {
        "line": 128,
        "fullcodeline": "blob_size=(MagickOffsetType) GetBlobSize(image);"
    },
    {
        "line": 73,
        "fullcodeline": "if (image_info->debug != MagickFalse)"
    },
    {
        "line": 80,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 90,
        "fullcodeline": "(void) memset(&info,0,sizeof(info));"
    },
    {
        "line": 91,
        "fullcodeline": "(void) memset(&map,0,sizeof(map));"
    },
    {
        "line": 96,
        "fullcodeline": "if (stream_info == (DCMStreamInfo *) NULL)"
    },
    {
        "line": 98,
        "fullcodeline": "(void) memset(stream_info,0,sizeof(*stream_info));"
    },
    {
        "line": 112,
        "fullcodeline": "(void) CopyMagickString(photometric,\"MONOCHROME1 \",MagickPathExtent);"
    },
    {
        "line": 1297,
        "fullcodeline": "if (image == (Image *) NULL)"
    },
    {
        "line": 1299,
        "fullcodeline": "(void) CloseBlob(image);"
    },
    {
        "line": 1302,
        "fullcodeline": "return(GetFirstImageInList(image));"
    },
    {
        "line": 74,
        "fullcodeline": "(void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\","
    },
    {
        "line": 82,
        "fullcodeline": "image=DestroyImageList(image);"
    },
    {
        "line": 97,
        "fullcodeline": "ThrowDCMException(ResourceLimitError,\"MemoryAllocationFailed\")"
    },
    {
        "line": 101,
        "fullcodeline": "ThrowDCMException(CorruptImageError,\"ImproperImageHeader\")"
    },
    {
        "line": 103,
        "fullcodeline": "if ((count != 4) || (LocaleNCompare(magick,\"DICM\",4) != 0))"
    },
    {
        "line": 105,
        "fullcodeline": "offset=SeekBlob(image,0L,SEEK_SET);"
    },
    {
        "line": 129,
        "fullcodeline": "while (TellBlob(image) < blob_size)"
    },
    {
        "line": 817,
        "fullcodeline": "image->columns=info.width;"
    },
    {
        "line": 818,
        "fullcodeline": "image->rows=info.height;"
    },
    {
        "line": 83,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 805,
        "fullcodeline": "if ((group == 0xfffc) && (element == 0xfffc))"
    },
    {
        "line": 819,
        "fullcodeline": "if (info.signed_data == 0xffff)"
    },
    {
        "line": 957,
        "fullcodeline": "if (info.depth != (1UL*MAGICKCORE_QUANTUM_DEPTH))"
    },
    {
        "line": 981,
        "fullcodeline": "if (image->compression == RLECompression)"
    },
    {
        "line": 1029,
        "fullcodeline": "for (scene=0; scene < (ssize_t) number_scenes; scene++)"
    },
    {
        "line": 1301,
        "fullcodeline": "return(DestroyImageList(image));"
    },
    {
        "line": 107,
        "fullcodeline": "ThrowDCMException(CorruptImageError,\"ImproperImageHeader\")"
    },
    {
        "line": 131,
        "fullcodeline": "for (group=0; (group != 0x7FE0) || (element != 0x0010) ; )"
    },
    {
        "line": 136,
        "fullcodeline": "image->offset=(ssize_t) TellBlob(image);"
    },
    {
        "line": 137,
        "fullcodeline": "group=ReadBlobLSBShort(image);"
    },
    {
        "line": 138,
        "fullcodeline": "element=ReadBlobLSBShort(image);"
    },
    {
        "line": 155,
        "fullcodeline": "count=ReadBlob(image,2,(unsigned char *) explicit_vr);"
    },
    {
        "line": 165,
        "fullcodeline": "use_explicit=((group == 0x0002) && (explicit_retry == MagickFalse)) ||"
    },
    {
        "line": 237,
        "fullcodeline": "datum=0;"
    },
    {
        "line": 253,
        "fullcodeline": "quantum=0;"
    },
    {
        "line": 254,
        "fullcodeline": "length=1;"
    },
    {
        "line": 312,
        "fullcodeline": "data=(unsigned char *) NULL;"
    },
    {
        "line": 810,
        "fullcodeline": "last=RemoveLastImageFromList(&image);"
    },
    {
        "line": 815,
        "fullcodeline": "if ((info.width == 0) || (info.height == 0))"
    },
    {
        "line": 816,
        "fullcodeline": "ThrowDCMException(CorruptImageError,\"ImproperImageHeader\")"
    },
    {
        "line": 820,
        "fullcodeline": "info.signed_data=(size_t) (info.significant_bits == 16 ? 1 : 0);"
    },
    {
        "line": 821,
        "fullcodeline": "if ((image->compression == JPEGCompression) ||"
    },
    {
        "line": 822,
        "fullcodeline": "(image->compression == JPEG2000Compression))"
    },
    {
        "line": 841,
        "fullcodeline": "length=(size_t) ReadBlobLSBLong(image);"
    },
    {
        "line": 844,
        "fullcodeline": "stream_info->offset_count=length >> 2;"
    },
    {
        "line": 863,
        "fullcodeline": "read_info=CloneImageInfo(image_info);"
    },
    {
        "line": 864,
        "fullcodeline": "SetImageInfoBlob(read_info,(void *) NULL,0);"
    },
    {
        "line": 865,
        "fullcodeline": "images=NewImageList();"
    },
    {
        "line": 965,
        "fullcodeline": "length=(size_t) (GetQuantumRange(info.depth)+1);"
    },
    {
        "line": 970,
        "fullcodeline": "info.scale_size=MagickMax(length,MaxMap)+1;"
    },
    {
        "line": 971,
        "fullcodeline": "info.scale=(Quantum *) AcquireQuantumMemory(info.scale_size,"
    },
    {
        "line": 977,
        "fullcodeline": "range=GetQuantumRange(info.depth);"
    },
    {
        "line": 998,
        "fullcodeline": "tag=((unsigned int) ReadBlobLSBShort(image) << 16) |"
    },
    {
        "line": 1001,
        "fullcodeline": "length=(size_t) ReadBlobLSBLong(image);"
    },
    {
        "line": 1004,
        "fullcodeline": "stream_info->offset_count=length >> 2;"
    },
    {
        "line": 1031,
        "fullcodeline": "image->columns=info.width;"
    },
    {
        "line": 1032,
        "fullcodeline": "image->rows=info.height;"
    },
    {
        "line": 1033,
        "fullcodeline": "image->depth=info.depth;"
    },
    {
        "line": 1034,
        "fullcodeline": "status=SetImageExtent(image,image->columns,image->rows,exception);"
    },
    {
        "line": 1037,
        "fullcodeline": "image->colorspace=RGBColorspace;"
    },
    {
        "line": 1275,
        "fullcodeline": "if (TellBlob(image) < (MagickOffsetType) GetBlobSize(image))"
    },
    {
        "line": 1280,
        "fullcodeline": "AcquireNextImage(image_info,image,exception);"
    },
    {
        "line": 1286,
        "fullcodeline": "image=SyncNextImageInList(image);"
    },
    {
        "line": 1287,
        "fullcodeline": "status=SetImageProgress(image,LoadImagesTag,TellBlob(image),"
    },
    {
        "line": 139,
        "fullcodeline": "if ((group == 0xfffc) && (element == 0xfffc))"
    },
    {
        "line": 141,
        "fullcodeline": "if ((group != 0x0002) && (image->endian == MSBEndian))"
    },
    {
        "line": 150,
        "fullcodeline": "for (i=0; dicom_info[i].group < 0xffff; i++)"
    },
    {
        "line": 154,
        "fullcodeline": "(void) CopyMagickString(implicit_vr,dicom_info[i].vr,MagickPathExtent);"
    },
    {
        "line": 215,
        "fullcodeline": "if (strcmp(explicit_vr,\"SQ\") == 0)"
    },
    {
        "line": 238,
        "fullcodeline": "if (quantum == 4)"
    },
    {
        "line": 255,
        "fullcodeline": "if (datum != 0)"
    },
    {
        "line": 283,
        "fullcodeline": "if (image_info->verbose != MagickFalse)"
    },
    {
        "line": 739,
        "fullcodeline": "if (data != (unsigned char *) NULL)"
    },
    {
        "line": 764,
        "fullcodeline": "if (image_info->verbose != MagickFalse)"
    },
    {
        "line": 795,
        "fullcodeline": "if (data != (unsigned char *) NULL)"
    },
    {
        "line": 797,
        "fullcodeline": "if (EOFBlob(image) != MagickFalse)"
    },
    {
        "line": 811,
        "fullcodeline": "if (last != (Image *) NULL)"
    },
    {
        "line": 836,
        "fullcodeline": "for (i=0; i < (ssize_t) stream_info->remaining; i++)"
    },
    {
        "line": 839,
        "fullcodeline": "(void) (((ssize_t) ReadBlobLSBShort(image) << 16) |"
    },
    {
        "line": 842,
        "fullcodeline": "if (length > (size_t) GetBlobSize(image))"
    },
    {
        "line": 845,
        "fullcodeline": "if (stream_info->offset_count != 0)"
    },
    {
        "line": 866,
        "fullcodeline": "for (scene=0; scene < (ssize_t) number_scenes; scene++)"
    },
    {
        "line": 949,
        "fullcodeline": "read_info=DestroyImageInfo(read_info);"
    },
    {
        "line": 950,
        "fullcodeline": "image=DestroyImageList(image);"
    },
    {
        "line": 955,
        "fullcodeline": "return(GetFirstImageInList(images));"
    },
    {
        "line": 966,
        "fullcodeline": "if (length > (size_t) GetBlobSize(image))"
    },
    {
        "line": 968,
        "fullcodeline": "if (info.scale != (Quantum *) NULL)"
    },
    {
        "line": 973,
        "fullcodeline": "if (info.scale == (Quantum *) NULL)"
    },
    {
        "line": 975,
        "fullcodeline": "(void) memset(info.scale,0,(MagickMax(length,MaxMap)+1)*"
    },
    {
        "line": 978,
        "fullcodeline": "for (i=0; i <= (ssize_t) GetQuantumRange(info.depth); i++)"
    },
    {
        "line": 979,
        "fullcodeline": "info.scale[i]=ScaleAnyToQuantum((size_t) i,range);"
    },
    {
        "line": 989,
        "fullcodeline": "for (i=0; i < (ssize_t) stream_info->remaining; i++)"
    },
    {
        "line": 1002,
        "fullcodeline": "if (length > (size_t) GetBlobSize(image))"
    },
    {
        "line": 1005,
        "fullcodeline": "if (stream_info->offset_count != 0)"
    },
    {
        "line": 1035,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 1038,
        "fullcodeline": "(void) SetImageBackgroundColor(image,exception);"
    },
    {
        "line": 1092,
        "fullcodeline": "if (image->compression == RLECompression)"
    },
    {
        "line": 1243,
        "fullcodeline": "if (IdentifyImageCoderGray(image,exception) != MagickFalse)"
    },
    {
        "line": 1245,
        "fullcodeline": "if (EOFBlob(image) != MagickFalse)"
    },
    {
        "line": 1254,
        "fullcodeline": "if (image_info->number_scenes != 0)"
    },
    {
        "line": 1257,
        "fullcodeline": "if (scene < (ssize_t) (number_scenes-1))"
    },
    {
        "line": 1289,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 143,
        "fullcodeline": "group=(unsigned short) ((group << 8) | ((group >> 8) & 0xFF));"
    },
    {
        "line": 144,
        "fullcodeline": "element=(unsigned short) ((element << 8) | ((element >> 8) & 0xFF));"
    },
    {
        "line": 151,
        "fullcodeline": "if ((group == dicom_info[i].group) &&"
    },
    {
        "line": 157,
        "fullcodeline": "ThrowDCMException(CorruptImageError,\"ImproperImageHeader\")"
    },
    {
        "line": 161,
        "fullcodeline": "if ((explicit_file == MagickFalse) && (group != 0x0002))"
    },
    {
        "line": 162,
        "fullcodeline": "explicit_file=(isupper((int) ((unsigned char) *explicit_vr)) != 0) &&"
    },
    {
        "line": 167,
        "fullcodeline": "if ((use_explicit != MagickFalse) && (strncmp(implicit_vr,\"xs\",2) == 0))"
    },
    {
        "line": 169,
        "fullcodeline": "if ((use_explicit == MagickFalse) || (strncmp(implicit_vr,\"!!\",2) == 0))"
    },
    {
        "line": 171,
        "fullcodeline": "offset=SeekBlob(image,(MagickOffsetType) -2,SEEK_CUR);"
    },
    {
        "line": 174,
        "fullcodeline": "quantum=4;"
    },
    {
        "line": 193,
        "fullcodeline": "if ((group == 0xFFFE) && (element == 0xE0DD))"
    },
    {
        "line": 200,
        "fullcodeline": "sequence_depth--;"
    },
    {
        "line": 201,
        "fullcodeline": "info_copy=(DCMInfo *) RemoveLastElementFromLinkedList(stack);"
    },
    {
        "line": 221,
        "fullcodeline": "info_copy=(DCMInfo *) AcquireMagickMemory(sizeof(info));"
    },
    {
        "line": 225,
        "fullcodeline": "info_copy->scale=(Quantum *) AcquireQuantumMemory("
    },
    {
        "line": 234,
        "fullcodeline": "AppendValueToLinkedList(stack,info_copy);"
    },
    {
        "line": 235,
        "fullcodeline": "sequence_depth++;"
    },
    {
        "line": 303,
        "fullcodeline": "if ((group == 0x7FE0) && (element == 0x0010))"
    },
    {
        "line": 313,
        "fullcodeline": "if ((length == 1) && (quantum == 1))"
    },
    {
        "line": 314,
        "fullcodeline": "datum=ReadBlobByte(image);"
    },
    {
        "line": 355,
        "fullcodeline": "if ((((unsigned int) group << 16) | element) == 0xFFFEE0DD)"
    },
    {
        "line": 796,
        "fullcodeline": "data=(unsigned char *) RelinquishMagickMemory(data);"
    },
    {
        "line": 799,
        "fullcodeline": "ThrowFileException(exception,CorruptImageError,\"UnexpectedEndOfFile\","
    },
    {
        "line": 801,
        "fullcodeline": "group=0xfffc;"
    },
    {
        "line": 837,
        "fullcodeline": "if (ReadBlobByte(image) == EOF)"
    },
    {
        "line": 840,
        "fullcodeline": "ReadBlobLSBShort(image));"
    },
    {
        "line": 843,
        "fullcodeline": "ThrowDCMException(CorruptImageError,\"InsufficientImageDataInFile\")"
    },
    {
        "line": 850,
        "fullcodeline": "stream_info->offsets=(ssize_t *) AcquireQuantumMemory("
    },
    {
        "line": 856,
        "fullcodeline": "offset=TellBlob(image);"
    },
    {
        "line": 869,
        "fullcodeline": "filename[MagickPathExtent];"
    },
    {
        "line": 886,
        "fullcodeline": "tag=((unsigned int) ReadBlobLSBShort(image) << 16) |"
    },
    {
        "line": 888,
        "fullcodeline": "length=(size_t) ReadBlobLSBLong(image);"
    },
    {
        "line": 903,
        "fullcodeline": "file=(FILE *) NULL;"
    },
    {
        "line": 904,
        "fullcodeline": "unique_file=AcquireUniqueFileResource(filename);"
    },
    {
        "line": 934,
        "fullcodeline": "jpeg_image=ReadImage(read_info,exception);"
    },
    {
        "line": 951,
        "fullcodeline": "if ((status == MagickFalse) && (exception->severity < ErrorException))"
    },
    {
        "line": 967,
        "fullcodeline": "ThrowDCMException(CorruptImageError,\"InsufficientImageDataInFile\")"
    },
    {
        "line": 974,
        "fullcodeline": "ThrowDCMException(ResourceLimitError,\"MemoryAllocationFailed\")"
    },
    {
        "line": 994,
        "fullcodeline": "c=ReadBlobByte(image);"
    },
    {
        "line": 999,
        "fullcodeline": "ReadBlobLSBShort(image);"
    },
    {
        "line": 1003,
        "fullcodeline": "ThrowDCMException(CorruptImageError,\"InsufficientImageDataInFile\")"
    },
    {
        "line": 1010,
        "fullcodeline": "stream_info->offsets=(ssize_t *) AcquireQuantumMemory("
    },
    {
        "line": 1024,
        "fullcodeline": "offset=TellBlob(image)+8;"
    },
    {
        "line": 1039,
        "fullcodeline": "if ((image->colormap == (PixelInfo *) NULL) &&"
    },
    {
        "line": 1040,
        "fullcodeline": "(info.samples_per_pixel == 1))"
    },
    {
        "line": 1048,
        "fullcodeline": "one=1;"
    },
    {
        "line": 1109,
        "fullcodeline": "tag=((unsigned int) ReadBlobLSBShort(image) << 16) |"
    },
    {
        "line": 1111,
        "fullcodeline": "stream_info->remaining=(size_t) ReadBlobLSBLong(image);"
    },
    {
        "line": 1120,
        "fullcodeline": "stream_info->count=0;"
    },
    {
        "line": 1121,
        "fullcodeline": "stream_info->segment_count=ReadBlobLSBLong(image);"
    },
    {
        "line": 1124,
        "fullcodeline": "stream_info->remaining-=64;"
    },
    {
        "line": 1134,
        "fullcodeline": "if ((info.samples_per_pixel > 1) && (image->interlace == PlaneInterlace))"
    },
    {
        "line": 1247,
        "fullcodeline": "ThrowFileException(exception,CorruptImageError,\"UnexpectedEndOfFile\","
    },
    {
        "line": 1262,
        "fullcodeline": "AcquireNextImage(image_info,image,exception);"
    },
    {
        "line": 1268,
        "fullcodeline": "image=SyncNextImageInList(image);"
    },
    {
        "line": 1269,
        "fullcodeline": "status=SetImageProgress(image,LoadImagesTag,TellBlob(image),"
    },
    {
        "line": 1281,
        "fullcodeline": "if (GetNextImageInList(image) == (Image *) NULL)"
    },
    {
        "line": 1283,
        "fullcodeline": "status=MagickFalse;"
    },
    {
        "line": 1288,
        "fullcodeline": "GetBlobSize(image));"
    },
    {
        "line": 152,
        "fullcodeline": "(element == dicom_info[i].element))"
    },
    {
        "line": 166,
        "fullcodeline": "(explicit_file != MagickFalse) ? MagickTrue : MagickFalse;"
    },
    {
        "line": 168,
        "fullcodeline": "(void) CopyMagickString(implicit_vr,explicit_vr,MagickPathExtent);"
    },
    {
        "line": 181,
        "fullcodeline": "quantum=2;"
    },
    {
        "line": 202,
        "fullcodeline": "if (info_copy == (DCMInfo *)NULL)"
    },
    {
        "line": 210,
        "fullcodeline": "if (info.scale != (Quantum *) NULL)"
    },
    {
        "line": 212,
        "fullcodeline": "(void) memcpy(&info,info_copy,sizeof(info));"
    },
    {
        "line": 222,
        "fullcodeline": "if (info_copy == (DCMInfo *) NULL)"
    },
    {
        "line": 224,
        "fullcodeline": "(void) memcpy(info_copy,&info,sizeof(info));"
    },
    {
        "line": 227,
        "fullcodeline": "if (info_copy->scale == (Quantum *) NULL)"
    },
    {
        "line": 232,
        "fullcodeline": "(void) memcpy(info_copy->scale,info.scale,info_copy->scale_size*"
    },
    {
        "line": 240,
        "fullcodeline": "if (group == 0x0002)"
    },
    {
        "line": 272,
        "fullcodeline": "if (datum != ~0)"
    },
    {
        "line": 288,
        "fullcodeline": "if (use_explicit == MagickFalse)"
    },
    {
        "line": 290,
        "fullcodeline": "for (i=0; dicom_info[i].description != (char *) NULL; i++)"
    },
    {
        "line": 294,
        "fullcodeline": "(void) FormatLocaleFile(stdout,"
    },
    {
        "line": 299,
        "fullcodeline": "if (dicom_info[i].description != (char *) NULL)"
    },
    {
        "line": 301,
        "fullcodeline": "(void) FormatLocaleFile(stdout,\": \");"
    },
    {
        "line": 305,
        "fullcodeline": "if (image_info->verbose != MagickFalse)"
    },
    {
        "line": 357,
        "fullcodeline": "if (data != (unsigned char *) NULL)"
    },
    {
        "line": 744,
        "fullcodeline": "for (i=0; dicom_info[i].description != (char *) NULL; i++)"
    },
    {
        "line": 748,
        "fullcodeline": "if (dicom_info[i].description != (char *) NULL)"
    },
    {
        "line": 766,
        "fullcodeline": "if (data == (unsigned char *) NULL)"
    },
    {
        "line": 812,
        "fullcodeline": "last=DestroyImage(last);"
    },
    {
        "line": 847,
        "fullcodeline": "if (stream_info->offsets != (ssize_t *) NULL)"
    },
    {
        "line": 852,
        "fullcodeline": "if (stream_info->offsets == (ssize_t *) NULL)"
    },
    {
        "line": 854,
        "fullcodeline": "for (i=0; i < (ssize_t) stream_info->offset_count; i++)"
    },
    {
        "line": 855,
        "fullcodeline": "stream_info->offsets[i]=(ssize_t) ReadBlobLSBSignedLong(image);"
    },
    {
        "line": 857,
        "fullcodeline": "for (i=0; i < (ssize_t) stream_info->offset_count; i++)"
    },
    {
        "line": 889,
        "fullcodeline": "if (length > (size_t) GetBlobSize(image))"
    },
    {
        "line": 891,
        "fullcodeline": "if (EOFBlob(image) != MagickFalse)"
    },
    {
        "line": 896,
        "fullcodeline": "if (tag == 0xFFFEE0DD)"
    },
    {
        "line": 905,
        "fullcodeline": "if (unique_file != -1)"
    },
    {
        "line": 907,
        "fullcodeline": "if (file == (FILE *) NULL)"
    },
    {
        "line": 914,
        "fullcodeline": "for (c=EOF; length != 0; length--)"
    },
    {
        "line": 926,
        "fullcodeline": "(void) fclose(file);"
    },
    {
        "line": 927,
        "fullcodeline": "if (c == EOF)"
    },
    {
        "line": 929,
        "fullcodeline": "(void) FormatLocaleString(read_info->filename,MagickPathExtent,"
    },
    {
        "line": 931,
        "fullcodeline": "if (image->compression == JPEG2000Compression)"
    },
    {
        "line": 935,
        "fullcodeline": "if (jpeg_image != (Image *) NULL)"
    },
    {
        "line": 947,
        "fullcodeline": "(void) RelinquishUniqueFileResource(filename);"
    },
    {
        "line": 995,
        "fullcodeline": "if (c == EOF)"
    },
    {
        "line": 1007,
        "fullcodeline": "if (stream_info->offsets != (ssize_t *) NULL)"
    },
    {
        "line": 1012,
        "fullcodeline": "if (stream_info->offsets == (ssize_t *) NULL)"
    },
    {
        "line": 1014,
        "fullcodeline": "for (i=0; i < (ssize_t) stream_info->offset_count; i++)"
    },
    {
        "line": 1025,
        "fullcodeline": "for (i=0; i < (ssize_t) stream_info->offset_count; i++)"
    },
    {
        "line": 1026,
        "fullcodeline": "stream_info->offsets[i]+=offset;"
    },
    {
        "line": 1049,
        "fullcodeline": "if (colors == 0)"
    },
    {
        "line": 1051,
        "fullcodeline": "if (AcquireImageColormap(image,colors,exception) == MagickFalse)"
    },
    {
        "line": 1053,
        "fullcodeline": "if (map.red != (int *) NULL)"
    },
    {
        "line": 1062,
        "fullcodeline": "if (map.green != (int *) NULL)"
    },
    {
        "line": 1071,
        "fullcodeline": "if (map.blue != (int *) NULL)"
    },
    {
        "line": 1080,
        "fullcodeline": "if (map.gray != (int *) NULL)"
    },
    {
        "line": 1100,
        "fullcodeline": "for (i=0; i < (ssize_t) stream_info->remaining; i++)"
    },
    {
        "line": 1122,
        "fullcodeline": "for (i=0; i < 15; i++)"
    },
    {
        "line": 1125,
        "fullcodeline": "if (stream_info->segment_count > 1)"
    },
    {
        "line": 1146,
        "fullcodeline": "for (i=0; i < (ssize_t) info.samples_per_pixel; i++)"
    },
    {
        "line": 1206,
        "fullcodeline": "option=GetImageOption(image_info,\"dcm:display-range\");"
    },
    {
        "line": 1212,
        "fullcodeline": "option=GetImageOption(image_info,\"dcm:window\");"
    },
    {
        "line": 1228,
        "fullcodeline": "option=GetImageOption(image_info,\"dcm:rescale\");"
    },
    {
        "line": 1233,
        "fullcodeline": "status=ReadDCMPixels(image,&info,stream_info,MagickTrue,exception);"
    },
    {
        "line": 1244,
        "fullcodeline": "(void) SetImageColorspace(image,GRAYColorspace,exception);"
    },
    {
        "line": 1255,
        "fullcodeline": "if (image->scene >= (image_info->scene+image_info->number_scenes-1))"
    },
    {
        "line": 1271,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 173,
        "fullcodeline": "ThrowDCMException(CorruptImageError,\"ImproperImageHeader\")"
    },
    {
        "line": 208,
        "fullcodeline": "ThrowDCMException(CorruptImageError,\"ImproperImageHeader\")"
    },
    {
        "line": 211,
        "fullcodeline": "info.scale=(Quantum *) RelinquishMagickMemory(info.scale);"
    },
    {
        "line": 213,
        "fullcodeline": "info_copy=(DCMInfo *) RelinquishMagickMemory(info_copy);"
    },
    {
        "line": 223,
        "fullcodeline": "ThrowDCMException(ResourceLimitError,\"MemoryAllocationFailed\")"
    },
    {
        "line": 229,
        "fullcodeline": "info_copy=(DCMInfo *) RelinquishMagickMemory(info_copy);"
    },
    {
        "line": 230,
        "fullcodeline": "ThrowDCMException(ResourceLimitError,\"MemoryAllocationFailed\")"
    },
    {
        "line": 241,
        "fullcodeline": "datum=ReadBlobLSBSignedLong(image);"
    },
    {
        "line": 246,
        "fullcodeline": "if (quantum == 2)"
    },
    {
        "line": 257,
        "fullcodeline": "if ((strncmp(implicit_vr,\"OW\",2) == 0) ||"
    },
    {
        "line": 259,
        "fullcodeline": "(strncmp(implicit_vr,\"US\",2) == 0))"
    },
    {
        "line": 260,
        "fullcodeline": "quantum=2;"
    },
    {
        "line": 273,
        "fullcodeline": "length=(size_t) datum/quantum;"
    },
    {
        "line": 289,
        "fullcodeline": "explicit_vr[0]='\\0';"
    },
    {
        "line": 291,
        "fullcodeline": "if ((group == dicom_info[i].group) &&"
    },
    {
        "line": 358,
        "fullcodeline": "data=(unsigned char *) RelinquishMagickMemory(data);"
    },
    {
        "line": 745,
        "fullcodeline": "if ((group == dicom_info[i].group) &&"
    },
    {
        "line": 750,
        "fullcodeline": "attribute=AcquireString(\"dcm:\");"
    },
    {
        "line": 853,
        "fullcodeline": "ThrowDCMException(ResourceLimitError,\"MemoryAllocationFailed\")"
    },
    {
        "line": 887,
        "fullcodeline": "ReadBlobLSBShort(image);"
    },
    {
        "line": 890,
        "fullcodeline": "ThrowDCMException(CorruptImageError,\"InsufficientImageDataInFile\")"
    },
    {
        "line": 893,
        "fullcodeline": "status=MagickFalse;"
    },
    {
        "line": 900,
        "fullcodeline": "status=MagickFalse;"
    },
    {
        "line": 906,
        "fullcodeline": "file=fdopen(unique_file,\"wb\");"
    },
    {
        "line": 910,
        "fullcodeline": "ThrowFileException(exception,FileOpenError,"
    },
    {
        "line": 916,
        "fullcodeline": "c=ReadBlobByte(image);"
    },
    {
        "line": 937,
        "fullcodeline": "ResetImagePropertyIterator(image);"
    },
    {
        "line": 938,
        "fullcodeline": "property=GetNextImageProperty(image);"
    },
    {
        "line": 945,
        "fullcodeline": "AppendImageToList(&images,jpeg_image);"
    },
    {
        "line": 969,
        "fullcodeline": "info.scale=(Quantum *) RelinquishMagickMemory(info.scale);"
    },
    {
        "line": 1013,
        "fullcodeline": "ThrowDCMException(ResourceLimitError,\"MemoryAllocationFailed\")"
    },
    {
        "line": 1016,
        "fullcodeline": "offset=(MagickOffsetType) ReadBlobLSBSignedLong(image);"
    },
    {
        "line": 1020,
        "fullcodeline": "stream_info->offsets[i]=(ssize_t) offset;"
    },
    {
        "line": 1050,
        "fullcodeline": "colors=one << info.depth;"
    },
    {
        "line": 1052,
        "fullcodeline": "ThrowDCMException(ResourceLimitError,\"MemoryAllocationFailed\")"
    },
    {
        "line": 1105,
        "fullcodeline": "c=ReadBlobByte(image);"
    },
    {
        "line": 1110,
        "fullcodeline": "ReadBlobLSBShort(image);"
    },
    {
        "line": 1112,
        "fullcodeline": "if ((tag != 0xFFFEE000) || (stream_info->remaining <= 64) ||"
    },
    {
        "line": 1113,
        "fullcodeline": "(EOFBlob(image) != MagickFalse))"
    },
    {
        "line": 1118,
        "fullcodeline": "ThrowDCMException(CorruptImageError,\"ImproperImageHeader\")"
    },
    {
        "line": 1127,
        "fullcodeline": "info.bytes_per_pixel=1;"
    },
    {
        "line": 1128,
        "fullcodeline": "info.depth=8;"
    },
    {
        "line": 1207,
        "fullcodeline": "if (option != (const char *) NULL)"
    },
    {
        "line": 1213,
        "fullcodeline": "if (option != (char *) NULL)"
    },
    {
        "line": 1229,
        "fullcodeline": "if (option != (char *) NULL)"
    },
    {
        "line": 1263,
        "fullcodeline": "if (GetNextImageInList(image) == (Image *) NULL)"
    },
    {
        "line": 1265,
        "fullcodeline": "status=MagickFalse;"
    },
    {
        "line": 1270,
        "fullcodeline": "GetBlobSize(image));"
    },
    {
        "line": 163,
        "fullcodeline": "(isupper((int) ((unsigned char) *(explicit_vr+1))) != 0) ?"
    },
    {
        "line": 182,
        "fullcodeline": "if ((strcmp(explicit_vr,\"OB\") == 0) ||"
    },
    {
        "line": 187,
        "fullcodeline": "(strcmp(explicit_vr,\"UT\") == 0))"
    },
    {
        "line": 190,
        "fullcodeline": "quantum=4;"
    },
    {
        "line": 243,
        "fullcodeline": "datum=ReadBlobSignedLong(image);"
    },
    {
        "line": 258,
        "fullcodeline": "(strncmp(implicit_vr,\"SS\",2) == 0) ||"
    },
    {
        "line": 279,
        "fullcodeline": "quantum=0;"
    },
    {
        "line": 280,
        "fullcodeline": "length=0;"
    },
    {
        "line": 292,
        "fullcodeline": "(element == dicom_info[i].element))"
    },
    {
        "line": 300,
        "fullcodeline": "(void) FormatLocaleFile(stdout,\" %s\",dicom_info[i].description);"
    },
    {
        "line": 306,
        "fullcodeline": "(void) FormatLocaleFile(stdout,\"\\n\");"
    },
    {
        "line": 316,
        "fullcodeline": "if ((length == 1) && (quantum == 2))"
    },
    {
        "line": 746,
        "fullcodeline": "(element == dicom_info[i].element))"
    },
    {
        "line": 751,
        "fullcodeline": "(void) ConcatenateString(&attribute,dicom_info[i].description);"
    },
    {
        "line": 752,
        "fullcodeline": "for (i=0; i < (ssize_t) MagickMax(length,4); i++)"
    },
    {
        "line": 761,
        "fullcodeline": "attribute=DestroyString(attribute);"
    },
    {
        "line": 767,
        "fullcodeline": "(void) FormatLocaleFile(stdout,\"%d\\n\",datum);"
    },
    {
        "line": 909,
        "fullcodeline": "(void) RelinquishUniqueFileResource(filename);"
    },
    {
        "line": 917,
        "fullcodeline": "if (c == EOF)"
    },
    {
        "line": 923,
        "fullcodeline": "if (fputc(c,file) != c)"
    },
    {
        "line": 932,
        "fullcodeline": "(void) FormatLocaleString(read_info->filename,MagickPathExtent,"
    },
    {
        "line": 939,
        "fullcodeline": "while (property != (const char *) NULL)"
    },
    {
        "line": 1017,
        "fullcodeline": "if (offset > (MagickOffsetType) GetBlobSize(image))"
    },
    {
        "line": 1021,
        "fullcodeline": "if (EOFBlob(image) != MagickFalse)"
    },
    {
        "line": 1054,
        "fullcodeline": "for (i=0; i < (ssize_t) colors; i++)"
    },
    {
        "line": 1063,
        "fullcodeline": "for (i=0; i < (ssize_t) colors; i++)"
    },
    {
        "line": 1072,
        "fullcodeline": "for (i=0; i < (ssize_t) colors; i++)"
    },
    {
        "line": 1081,
        "fullcodeline": "for (i=0; i < (ssize_t) colors; i++)"
    },
    {
        "line": 1106,
        "fullcodeline": "if (c == EOF)"
    },
    {
        "line": 1115,
        "fullcodeline": "if (stream_info->offsets != (ssize_t *) NULL)"
    },
    {
        "line": 1123,
        "fullcodeline": "stream_info->segments[i]=(ssize_t) ReadBlobLSBSignedLong(image);"
    },
    {
        "line": 1129,
        "fullcodeline": "if (stream_info->offset_count > 0)"
    },
    {
        "line": 1148,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 1221,
        "fullcodeline": "flags=ParseGeometry(option,&geometry_info);"
    },
    {
        "line": 1226,
        "fullcodeline": "info.rescale=MagickTrue;"
    },
    {
        "line": 1230,
        "fullcodeline": "info.rescale=IsStringTrue(option);"
    },
    {
        "line": 1231,
        "fullcodeline": "if ((info.window_center != 0) && (info.window_width == 0))"
    },
    {
        "line": 1232,
        "fullcodeline": "info.window_width=info.window_center;"
    },
    {
        "line": 1234,
        "fullcodeline": "if ((status != MagickFalse) && (stream_info->segment_count > 1))"
    },
    {
        "line": 186,
        "fullcodeline": "(strcmp(explicit_vr,\"UN\") == 0) ||"
    },
    {
        "line": 189,
        "fullcodeline": "(void) ReadBlobLSBShort(image);"
    },
    {
        "line": 248,
        "fullcodeline": "if (group == 0x0002)"
    },
    {
        "line": 318,
        "fullcodeline": "if (group == 0x0002)"
    },
    {
        "line": 370,
        "fullcodeline": "transfer_syntax[MagickPathExtent];"
    },
    {
        "line": 386,
        "fullcodeline": "*transfer_syntax='\\0';"
    },
    {
        "line": 455,
        "fullcodeline": "info.samples_per_pixel=(size_t) datum;"
    },
    {
        "line": 469,
        "fullcodeline": "photometric[i]='\\0';"
    },
    {
        "line": 470,
        "fullcodeline": "info.polarity=LocaleCompare(photometric,\"MONOCHROME1 \") == 0 ?"
    },
    {
        "line": 490,
        "fullcodeline": "number_scenes=StringToUnsignedLong((char *) data);"
    },
    {
        "line": 498,
        "fullcodeline": "info.height=(size_t) datum;"
    },
    {
        "line": 506,
        "fullcodeline": "info.width=(size_t) datum;"
    },
    {
        "line": 514,
        "fullcodeline": "info.bits_allocated=(size_t) datum;"
    },
    {
        "line": 515,
        "fullcodeline": "info.bytes_per_pixel=1;"
    },
    {
        "line": 518,
        "fullcodeline": "info.depth=info.bits_allocated;"
    },
    {
        "line": 521,
        "fullcodeline": "info.max_value=(1UL << info.bits_allocated)-1;"
    },
    {
        "line": 522,
        "fullcodeline": "image->depth=info.depth;"
    },
    {
        "line": 530,
        "fullcodeline": "info.significant_bits=(size_t) datum;"
    },
    {
        "line": 531,
        "fullcodeline": "info.bytes_per_pixel=1;"
    },
    {
        "line": 534,
        "fullcodeline": "info.depth=info.significant_bits;"
    },
    {
        "line": 537,
        "fullcodeline": "info.max_value=(1UL << info.significant_bits)-1;"
    },
    {
        "line": 538,
        "fullcodeline": "info.mask=(size_t) GetQuantumRange(info.significant_bits);"
    },
    {
        "line": 539,
        "fullcodeline": "image->depth=info.depth;"
    },
    {
        "line": 554,
        "fullcodeline": "info.signed_data=(size_t) datum;"
    },
    {
        "line": 602,
        "fullcodeline": "colors=(size_t) (length/info.bytes_per_pixel);"
    },
    {
        "line": 603,
        "fullcodeline": "datum=(int) colors;"
    },
    {
        "line": 606,
        "fullcodeline": "map.gray=(int *) AcquireQuantumMemory(MagickMax(colors,65536),"
    },
    {
        "line": 629,
        "fullcodeline": "colors=(size_t) (length/info.bytes_per_pixel);"
    },
    {
        "line": 630,
        "fullcodeline": "datum=(int) colors;"
    },
    {
        "line": 633,
        "fullcodeline": "map.red=(int *) AcquireQuantumMemory(MagickMax(colors,65536),"
    },
    {
        "line": 639,
        "fullcodeline": "p=data;"
    },
    {
        "line": 661,
        "fullcodeline": "colors=(size_t) (length/info.bytes_per_pixel);"
    },
    {
        "line": 662,
        "fullcodeline": "datum=(int) colors;"
    },
    {
        "line": 665,
        "fullcodeline": "map.green=(int *) AcquireQuantumMemory(MagickMax(colors,65536),"
    },
    {
        "line": 671,
        "fullcodeline": "p=data;"
    },
    {
        "line": 693,
        "fullcodeline": "colors=(size_t) (length/info.bytes_per_pixel);"
    },
    {
        "line": 694,
        "fullcodeline": "datum=(int) colors;"
    },
    {
        "line": 697,
        "fullcodeline": "map.blue=(int *) AcquireQuantumMemory(MagickMax(colors,65536),"
    },
    {
        "line": 703,
        "fullcodeline": "p=data;"
    },
    {
        "line": 755,
        "fullcodeline": "if ((i == (ssize_t) length) || (length > 4))"
    },
    {
        "line": 773,
        "fullcodeline": "for (i=0; i < (ssize_t) MagickMax(length,4); i++)"
    },
    {
        "line": 792,
        "fullcodeline": "(void) FormatLocaleFile(stdout,\"\\n\");"
    },
    {
        "line": 848,
        "fullcodeline": "stream_info->offsets=(ssize_t *) RelinquishMagickMemory("
    },
    {
        "line": 919,
        "fullcodeline": "ThrowFileException(exception,CorruptImageError,"
    },
    {
        "line": 943,
        "fullcodeline": "property=GetNextImageProperty(image);"
    },
    {
        "line": 1009,
        "fullcodeline": "RelinquishMagickMemory(stream_info->offsets);"
    },
    {
        "line": 1018,
        "fullcodeline": "ThrowDCMException(CorruptImageError,"
    },
    {
        "line": 1056,
        "fullcodeline": "index=map.red[i];"
    },
    {
        "line": 1065,
        "fullcodeline": "index=map.green[i];"
    },
    {
        "line": 1074,
        "fullcodeline": "index=map.blue[i];"
    },
    {
        "line": 1083,
        "fullcodeline": "index=map.gray[i];"
    },
    {
        "line": 1116,
        "fullcodeline": "stream_info->offsets=(ssize_t *)"
    },
    {
        "line": 1150,
        "fullcodeline": "q=GetAuthenticPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 1222,
        "fullcodeline": "if (flags & RhoValue)"
    },
    {
        "line": 1224,
        "fullcodeline": "if (flags & SigmaValue)"
    },
    {
        "line": 1236,
        "fullcodeline": "if (stream_info->offset_count > 0)"
    },
    {
        "line": 1239,
        "fullcodeline": "(void) ReadDCMPixels(image,&info,stream_info,MagickFalse,"
    },
    {
        "line": 185,
        "fullcodeline": "(strcmp(explicit_vr,\"SQ\") == 0) ||"
    },
    {
        "line": 249,
        "fullcodeline": "datum=ReadBlobLSBSignedShort(image);"
    },
    {
        "line": 262,
        "fullcodeline": "if ((strncmp(implicit_vr,\"FL\",2) == 0) ||"
    },
    {
        "line": 265,
        "fullcodeline": "(strncmp(implicit_vr,\"UL\",2) == 0))"
    },
    {
        "line": 266,
        "fullcodeline": "quantum=4;"
    },
    {
        "line": 319,
        "fullcodeline": "datum=ReadBlobLSBSignedShort(image);"
    },
    {
        "line": 375,
        "fullcodeline": "if ((datum == 0) && (explicit_retry == MagickFalse))"
    },
    {
        "line": 387,
        "fullcodeline": "if (data != (unsigned char *) NULL)"
    },
    {
        "line": 390,
        "fullcodeline": "if (image_info->verbose != MagickFalse)"
    },
    {
        "line": 465,
        "fullcodeline": "if (data == (unsigned char *) NULL)"
    },
    {
        "line": 467,
        "fullcodeline": "for (i=0; i < (ssize_t) MagickMin(length,MagickPathExtent-1); i++)"
    },
    {
        "line": 479,
        "fullcodeline": "if (datum == 1)"
    },
    {
        "line": 488,
        "fullcodeline": "if (data == (unsigned char *) NULL)"
    },
    {
        "line": 516,
        "fullcodeline": "if (datum > 8)"
    },
    {
        "line": 532,
        "fullcodeline": "if (info.significant_bits > 8)"
    },
    {
        "line": 562,
        "fullcodeline": "if (data != (unsigned char *) NULL)"
    },
    {
        "line": 571,
        "fullcodeline": "if (data != (unsigned char *) NULL)"
    },
    {
        "line": 580,
        "fullcodeline": "if (data != (unsigned char *) NULL)"
    },
    {
        "line": 590,
        "fullcodeline": "if (data != (unsigned char *) NULL)"
    },
    {
        "line": 600,
        "fullcodeline": "if (data == (unsigned char *) NULL)"
    },
    {
        "line": 604,
        "fullcodeline": "if (map.gray != (int *) NULL)"
    },
    {
        "line": 608,
        "fullcodeline": "if (map.gray == (int *) NULL)"
    },
    {
        "line": 610,
        "fullcodeline": "(void) memset(map.gray,0,MagickMax(colors,65536)*"
    },
    {
        "line": 612,
        "fullcodeline": "for (i=0; i < (ssize_t) colors; i++)"
    },
    {
        "line": 627,
        "fullcodeline": "if (data == (unsigned char *) NULL)"
    },
    {
        "line": 631,
        "fullcodeline": "if (map.red != (int *) NULL)"
    },
    {
        "line": 635,
        "fullcodeline": "if (map.red == (int *) NULL)"
    },
    {
        "line": 637,
        "fullcodeline": "(void) memset(map.red,0,MagickMax(colors,65536)*"
    },
    {
        "line": 640,
        "fullcodeline": "for (i=0; i < (ssize_t) colors; i++)"
    },
    {
        "line": 659,
        "fullcodeline": "if (data == (unsigned char *) NULL)"
    },
    {
        "line": 663,
        "fullcodeline": "if (map.green != (int *) NULL)"
    },
    {
        "line": 667,
        "fullcodeline": "if (map.green == (int *) NULL)"
    },
    {
        "line": 669,
        "fullcodeline": "(void) memset(map.green,0,MagickMax(colors,65536)*"
    },
    {
        "line": 672,
        "fullcodeline": "for (i=0; i < (ssize_t) colors; i++)"
    },
    {
        "line": 691,
        "fullcodeline": "if (data == (unsigned char *) NULL)"
    },
    {
        "line": 695,
        "fullcodeline": "if (map.blue != (int *) NULL)"
    },
    {
        "line": 699,
        "fullcodeline": "if (map.blue == (int *) NULL)"
    },
    {
        "line": 701,
        "fullcodeline": "(void) memset(map.blue,0,MagickMax(colors,65536)*"
    },
    {
        "line": 704,
        "fullcodeline": "for (i=0; i < (ssize_t) colors; i++)"
    },
    {
        "line": 753,
        "fullcodeline": "if (isprint((int) data[i]) == 0)"
    },
    {
        "line": 757,
        "fullcodeline": "(void) SubstituteString(&attribute,\" \",\"\");"
    },
    {
        "line": 758,
        "fullcodeline": "(void) SetImageProperty(image,attribute,(char *) data,"
    },
    {
        "line": 776,
        "fullcodeline": "if ((i != (ssize_t) length) && (length <= 4))"
    },
    {
        "line": 781,
        "fullcodeline": "datum=0;"
    },
    {
        "line": 941,
        "fullcodeline": "(void) SetImageProperty(jpeg_image,property,"
    },
    {
        "line": 1057,
        "fullcodeline": "if ((info.scale != (Quantum *) NULL) && (index >= 0) &&"
    },
    {
        "line": 1066,
        "fullcodeline": "if ((info.scale != (Quantum *) NULL) && (index >= 0) &&"
    },
    {
        "line": 1075,
        "fullcodeline": "if ((info.scale != (Quantum *) NULL) && (index >= 0) &&"
    },
    {
        "line": 1084,
        "fullcodeline": "if ((info.scale != (Quantum *) NULL) && (index >= 0) &&"
    },
    {
        "line": 1130,
        "fullcodeline": "(void) SeekBlob(image,(MagickOffsetType)"
    },
    {
        "line": 1151,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 1153,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 1186,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 1188,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 1209,
        "fullcodeline": "if (LocaleCompare(option,\"reset\") == 0)"
    },
    {
        "line": 1210,
        "fullcodeline": "info.window_width=0;"
    },
    {
        "line": 1223,
        "fullcodeline": "info.window_center=geometry_info.rho;"
    },
    {
        "line": 1225,
        "fullcodeline": "info.window_width=geometry_info.sigma;"
    },
    {
        "line": 184,
        "fullcodeline": "(strcmp(explicit_vr,\"OF\") == 0) ||"
    },
    {
        "line": 251,
        "fullcodeline": "datum=ReadBlobSignedShort(image);"
    },
    {
        "line": 264,
        "fullcodeline": "(strncmp(implicit_vr,\"SL\",2) == 0) ||"
    },
    {
        "line": 321,
        "fullcodeline": "datum=ReadBlobSignedShort(image);"
    },
    {
        "line": 324,
        "fullcodeline": "if ((length == 1) && (quantum == 4))"
    },
    {
        "line": 377,
        "fullcodeline": "explicit_retry=MagickTrue;"
    },
    {
        "line": 379,
        "fullcodeline": "group=0;"
    },
    {
        "line": 380,
        "fullcodeline": "element=0;"
    },
    {
        "line": 393,
        "fullcodeline": "if (strncmp(transfer_syntax,\"1.2.840.10008.1.2\",17) == 0)"
    },
    {
        "line": 399,
        "fullcodeline": "type=1;"
    },
    {
        "line": 400,
        "fullcodeline": "subtype=0;"
    },
    {
        "line": 456,
        "fullcodeline": "if ((info.samples_per_pixel == 0) || (info.samples_per_pixel > 4))"
    },
    {
        "line": 457,
        "fullcodeline": "ThrowDCMException(CorruptImageError,\"ImproperImageHeader\")"
    },
    {
        "line": 480,
        "fullcodeline": "image->interlace=PlaneInterlace;"
    },
    {
        "line": 517,
        "fullcodeline": "info.bytes_per_pixel=2;"
    },
    {
        "line": 519,
        "fullcodeline": "if ((info.depth == 0) || (info.depth > 32))"
    },
    {
        "line": 520,
        "fullcodeline": "ThrowDCMException(CorruptImageError,\"ImproperImageHeader\")"
    },
    {
        "line": 533,
        "fullcodeline": "info.bytes_per_pixel=2;"
    },
    {
        "line": 535,
        "fullcodeline": "if ((info.depth == 0) || (info.depth > 16))"
    },
    {
        "line": 536,
        "fullcodeline": "ThrowDCMException(CorruptImageError,\"ImproperImageHeader\")"
    },
    {
        "line": 563,
        "fullcodeline": "info.window_center=StringToDouble((char *) data,(char **) NULL);"
    },
    {
        "line": 572,
        "fullcodeline": "info.window_width=StringToDouble((char *) data,(char **) NULL);"
    },
    {
        "line": 581,
        "fullcodeline": "info.rescale_intercept=StringToDouble((char *) data,"
    },
    {
        "line": 591,
        "fullcodeline": "info.rescale_slope=StringToDouble((char *) data,(char **) NULL);"
    },
    {
        "line": 609,
        "fullcodeline": "ThrowDCMException(ResourceLimitError,\"MemoryAllocationFailed\")"
    },
    {
        "line": 613,
        "fullcodeline": "if (info.bytes_per_pixel == 1)"
    },
    {
        "line": 636,
        "fullcodeline": "ThrowDCMException(ResourceLimitError,\"MemoryAllocationFailed\")"
    },
    {
        "line": 646,
        "fullcodeline": "map.red[i]=(int) index;"
    },
    {
        "line": 647,
        "fullcodeline": "p+=2;"
    },
    {
        "line": 668,
        "fullcodeline": "ThrowDCMException(ResourceLimitError,\"MemoryAllocationFailed\")"
    },
    {
        "line": 678,
        "fullcodeline": "map.green[i]=(int) index;"
    },
    {
        "line": 679,
        "fullcodeline": "p+=2;"
    },
    {
        "line": 700,
        "fullcodeline": "ThrowDCMException(ResourceLimitError,\"MemoryAllocationFailed\")"
    },
    {
        "line": 710,
        "fullcodeline": "map.blue[i]=(int) index;"
    },
    {
        "line": 711,
        "fullcodeline": "p+=2;"
    },
    {
        "line": 726,
        "fullcodeline": "if ((data != (unsigned char *) NULL) &&"
    },
    {
        "line": 727,
        "fullcodeline": "(strncmp((char *) data,\"INVERSE\",7) == 0))"
    },
    {
        "line": 728,
        "fullcodeline": "info.polarity=MagickTrue;"
    },
    {
        "line": 774,
        "fullcodeline": "if (isprint((int) data[i]) == 0)"
    },
    {
        "line": 782,
        "fullcodeline": "for (j=(ssize_t) length-1; j >= 0; j--)"
    },
    {
        "line": 783,
        "fullcodeline": "datum=(256*datum+data[j]);"
    },
    {
        "line": 784,
        "fullcodeline": "(void) FormatLocaleFile(stdout,\"%d\",datum);"
    },
    {
        "line": 942,
        "fullcodeline": "GetImageProperty(image,property,exception),exception);"
    },
    {
        "line": 1058,
        "fullcodeline": "(index <= (int) info.max_value))"
    },
    {
        "line": 1059,
        "fullcodeline": "index=(int) info.scale[index];"
    },
    {
        "line": 1067,
        "fullcodeline": "(index <= (int) info.max_value))"
    },
    {
        "line": 1068,
        "fullcodeline": "index=(int) info.scale[index];"
    },
    {
        "line": 1076,
        "fullcodeline": "(index <= (int) info.max_value))"
    },
    {
        "line": 1077,
        "fullcodeline": "index=(int) info.scale[index];"
    },
    {
        "line": 1085,
        "fullcodeline": "(index <= (int) info.max_value))"
    },
    {
        "line": 1086,
        "fullcodeline": "index=(int) info.scale[index];"
    },
    {
        "line": 1117,
        "fullcodeline": "RelinquishMagickMemory(stream_info->offsets);"
    },
    {
        "line": 1184,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 1190,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,(MagickOffsetType)"
    },
    {
        "line": 1237,
        "fullcodeline": "(void) SeekBlob(image,(MagickOffsetType)"
    },
    {
        "line": 183,
        "fullcodeline": "(strcmp(explicit_vr,\"OW\") == 0) ||"
    },
    {
        "line": 263,
        "fullcodeline": "(strncmp(implicit_vr,\"OF\",2) == 0) ||"
    },
    {
        "line": 326,
        "fullcodeline": "if (group == 0x0002)"
    },
    {
        "line": 378,
        "fullcodeline": "(void) SeekBlob(image,(MagickOffsetType) 0,SEEK_SET);"
    },
    {
        "line": 381,
        "fullcodeline": "if (image_info->verbose != MagickFalse)"
    },
    {
        "line": 388,
        "fullcodeline": "(void) CopyMagickString(transfer_syntax,(char *) data,"
    },
    {
        "line": 391,
        "fullcodeline": "(void) FormatLocaleFile(stdout,\"transfer_syntax=%s\\n\","
    },
    {
        "line": 614,
        "fullcodeline": "map.gray[i]=(int) data[i];"
    },
    {
        "line": 642,
        "fullcodeline": "if (image->endian == MSBEndian)"
    },
    {
        "line": 674,
        "fullcodeline": "if (image->endian == MSBEndian)"
    },
    {
        "line": 706,
        "fullcodeline": "if (image->endian == MSBEndian)"
    },
    {
        "line": 787,
        "fullcodeline": "for (i=0; i < (ssize_t) length; i++)"
    },
    {
        "line": 1192,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 268,
        "fullcodeline": "if (strncmp(implicit_vr,\"FD\",2) == 0)"
    },
    {
        "line": 269,
        "fullcodeline": "quantum=8;"
    },
    {
        "line": 327,
        "fullcodeline": "datum=ReadBlobLSBSignedLong(image);"
    },
    {
        "line": 401,
        "fullcodeline": "if (strlen(transfer_syntax) > 17)"
    },
    {
        "line": 403,
        "fullcodeline": "count=(ssize_t) sscanf(transfer_syntax+17,\".%d.%d\",&type,"
    },
    {
        "line": 605,
        "fullcodeline": "map.gray=(int *) RelinquishMagickMemory(map.gray);"
    },
    {
        "line": 616,
        "fullcodeline": "map.gray[i]=(int) ((short *) data)[i];"
    },
    {
        "line": 632,
        "fullcodeline": "map.red=(int *) RelinquishMagickMemory(map.red);"
    },
    {
        "line": 643,
        "fullcodeline": "index=(unsigned short) ((*p << 8) | *(p+1));"
    },
    {
        "line": 664,
        "fullcodeline": "map.green=(int *) RelinquishMagickMemory(map.green);"
    },
    {
        "line": 675,
        "fullcodeline": "index=(unsigned short) ((*p << 8) | *(p+1));"
    },
    {
        "line": 696,
        "fullcodeline": "map.blue=(int *) RelinquishMagickMemory(map.blue);"
    },
    {
        "line": 707,
        "fullcodeline": "index=(unsigned short) ((*p << 8) | *(p+1));"
    },
    {
        "line": 271,
        "fullcodeline": "quantum=1;"
    },
    {
        "line": 329,
        "fullcodeline": "datum=ReadBlobSignedLong(image);"
    },
    {
        "line": 332,
        "fullcodeline": "if ((quantum != 0) && (length != 0))"
    },
    {
        "line": 343,
        "fullcodeline": "count=ReadBlob(image,(size_t) quantum*length,data);"
    },
    {
        "line": 353,
        "fullcodeline": "data[length*quantum]='\\0';"
    },
    {
        "line": 382,
        "fullcodeline": "(void) FormatLocaleFile(stdout,"
    },
    {
        "line": 413,
        "fullcodeline": "image->endian=LSBEndian;"
    },
    {
        "line": 418,
        "fullcodeline": "image->endian=MSBEndian;"
    },
    {
        "line": 434,
        "fullcodeline": "image->compression=RLECompression;"
    },
    {
        "line": 645,
        "fullcodeline": "index=(unsigned short) (*p | (*(p+1) << 8));"
    },
    {
        "line": 677,
        "fullcodeline": "index=(unsigned short) (*p | (*(p+1) << 8));"
    },
    {
        "line": 709,
        "fullcodeline": "index=(unsigned short) (*p | (*(p+1) << 8));"
    },
    {
        "line": 788,
        "fullcodeline": "if (isprint((int) data[i]) != 0)"
    },
    {
        "line": 1159,
        "fullcodeline": "SetPixelRed(image,ScaleCharToQuantum((unsigned char)"
    },
    {
        "line": 1165,
        "fullcodeline": "SetPixelGreen(image,ScaleCharToQuantum((unsigned char)"
    },
    {
        "line": 1171,
        "fullcodeline": "SetPixelBlue(image,ScaleCharToQuantum((unsigned char)"
    },
    {
        "line": 1177,
        "fullcodeline": "SetPixelAlpha(image,ScaleCharToQuantum((unsigned char)"
    },
    {
        "line": 334,
        "fullcodeline": "if (length > (size_t) GetBlobSize(image))"
    },
    {
        "line": 340,
        "fullcodeline": "if (data == (unsigned char *) NULL)"
    },
    {
        "line": 344,
        "fullcodeline": "if (count != (ssize_t) (quantum*length))"
    },
    {
        "line": 406,
        "fullcodeline": "ThrowDCMException(CorruptImageError,"
    },
    {
        "line": 789,
        "fullcodeline": "(void) FormatLocaleFile(stdout,\"%c\",data[i]);"
    },
    {
        "line": 335,
        "fullcodeline": "ThrowDCMException(CorruptImageError,"
    },
    {
        "line": 337,
        "fullcodeline": "if (~length >= 1)"
    },
    {
        "line": 338,
        "fullcodeline": "data=(unsigned char *) AcquireQuantumMemory(length+1,quantum*"
    },
    {
        "line": 341,
        "fullcodeline": "ThrowDCMException(ResourceLimitError,"
    },
    {
        "line": 350,
        "fullcodeline": "ThrowDCMException(CorruptImageError,"
    },
    {
        "line": 423,
        "fullcodeline": "if ((subtype >= 80) && (subtype <= 81))"
    },
    {
        "line": 424,
        "fullcodeline": "image->compression=JPEGCompression;"
    },
    {
        "line": 791,
        "fullcodeline": "(void) FormatLocaleFile(stdout,\"%c\",'.');"
    },
    {
        "line": 346,
        "fullcodeline": "if (image_info->verbose != MagickFalse)"
    },
    {
        "line": 1160,
        "fullcodeline": "ReadDCMByte(stream_info,image)),q);"
    },
    {
        "line": 1166,
        "fullcodeline": "ReadDCMByte(stream_info,image)),q);"
    },
    {
        "line": 1172,
        "fullcodeline": "ReadDCMByte(stream_info,image)),q);"
    },
    {
        "line": 1178,
        "fullcodeline": "ReadDCMByte(stream_info,image)),q);"
    },
    {
        "line": 347,
        "fullcodeline": "(void) FormatLocaleFile(stdout,\"count=%d quantum=%d \""
    },
    {
        "line": 426,
        "fullcodeline": "if ((subtype >= 90) && (subtype <= 93))"
    },
    {
        "line": 427,
        "fullcodeline": "image->compression=JPEG2000Compression;"
    },
    {
        "line": 429,
        "fullcodeline": "image->compression=JPEGCompression;"
    }
]