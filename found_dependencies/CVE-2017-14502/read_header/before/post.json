[
    {
        "line": 13,
        "fullcodeline": "char packed_size[8];"
    },
    {
        "line": 14,
        "fullcodeline": "char unp_size[8];"
    },
    {
        "line": 18,
        "fullcodeline": "int ret = (ARCHIVE_OK), ret2;"
    },
    {
        "line": 23,
        "fullcodeline": "sconv = rar->opt_sconv;"
    },
    {
        "line": 37,
        "fullcodeline": "p = h;"
    },
    {
        "line": 38,
        "fullcodeline": "memcpy(&rar_header, p, sizeof(rar_header));"
    },
    {
        "line": 39,
        "fullcodeline": "rar->file_flags = archive_le16dec(rar_header.flags);"
    },
    {
        "line": 40,
        "fullcodeline": "header_size = archive_le16dec(rar_header.size);"
    },
    {
        "line": 46,
        "fullcodeline": "crc32_val = crc32(0, (const unsigned char *)p + 2, 7 - 2);"
    },
    {
        "line": 47,
        "fullcodeline": "__archive_read_consume(a, 7);"
    },
    {
        "line": 80,
        "fullcodeline": "crc32_val = crc32(crc32_val, h, (unsigned)(header_size - 7));"
    },
    {
        "line": 87,
        "fullcodeline": "p = h;"
    },
    {
        "line": 88,
        "fullcodeline": "endp = p + header_size - 7;"
    },
    {
        "line": 89,
        "fullcodeline": "memcpy(&file_header, p, sizeof(file_header));"
    },
    {
        "line": 90,
        "fullcodeline": "p += sizeof(file_header);"
    },
    {
        "line": 94,
        "fullcodeline": "ttime = archive_le32dec(file_header.file_time);"
    },
    {
        "line": 95,
        "fullcodeline": "rar->mtime = get_time(ttime);"
    },
    {
        "line": 97,
        "fullcodeline": "rar->file_crc = archive_le32dec(file_header.file_crc);"
    },
    {
        "line": 135,
        "fullcodeline": "rar->bytes_remaining = rar->packed_size;"
    },
    {
        "line": 151,
        "fullcodeline": "filename_size = archive_le16dec(file_header.name_size);"
    },
    {
        "line": 169,
        "fullcodeline": "filename = rar->filename;"
    },
    {
        "line": 170,
        "fullcodeline": "memcpy(filename, p, filename_size);"
    },
    {
        "line": 171,
        "fullcodeline": "filename[filename_size] = '\\0';"
    },
    {
        "line": 312,
        "fullcodeline": "rar->filename_save = (char*)realloc(rar->filename_save,"
    },
    {
        "line": 314,
        "fullcodeline": "memcpy(rar->filename_save, rar->filename, filename_size + 1);"
    },
    {
        "line": 315,
        "fullcodeline": "rar->filename_save_size = filename_size;"
    },
    {
        "line": 318,
        "fullcodeline": "free(rar->dbo);"
    },
    {
        "line": 324,
        "fullcodeline": "rar->dbo[0].header_size = header_size;"
    },
    {
        "line": 325,
        "fullcodeline": "rar->dbo[0].start_offset = -1;"
    },
    {
        "line": 326,
        "fullcodeline": "rar->dbo[0].end_offset = -1;"
    },
    {
        "line": 327,
        "fullcodeline": "rar->cursor = 0;"
    },
    {
        "line": 328,
        "fullcodeline": "rar->nodes = 1;"
    },
    {
        "line": 349,
        "fullcodeline": "__archive_read_consume(a, header_size - 7);"
    },
    {
        "line": 351,
        "fullcodeline": "rar->dbo[0].end_offset = rar->dbo[0].start_offset + rar->packed_size;"
    },
    {
        "line": 378,
        "fullcodeline": "rar->bytes_uncopied = rar->bytes_unconsumed = 0;"
    },
    {
        "line": 379,
        "fullcodeline": "rar->lzss.position = rar->offset = 0;"
    },
    {
        "line": 380,
        "fullcodeline": "rar->offset_seek = 0;"
    },
    {
        "line": 381,
        "fullcodeline": "rar->dictionary_size = 0;"
    },
    {
        "line": 382,
        "fullcodeline": "rar->offset_outgoing = 0;"
    },
    {
        "line": 383,
        "fullcodeline": "rar->br.cache_avail = 0;"
    },
    {
        "line": 384,
        "fullcodeline": "rar->br.avail_in = 0;"
    },
    {
        "line": 385,
        "fullcodeline": "rar->crc_calculated = 0;"
    },
    {
        "line": 386,
        "fullcodeline": "rar->entry_eof = 0;"
    },
    {
        "line": 387,
        "fullcodeline": "rar->valid = 1;"
    },
    {
        "line": 388,
        "fullcodeline": "rar->is_ppmd_block = 0;"
    },
    {
        "line": 389,
        "fullcodeline": "rar->start_new_table = 1;"
    },
    {
        "line": 390,
        "fullcodeline": "free(rar->unp_buffer);"
    },
    {
        "line": 391,
        "fullcodeline": "rar->unp_buffer = NULL;"
    },
    {
        "line": 392,
        "fullcodeline": "rar->unp_offset = 0;"
    },
    {
        "line": 393,
        "fullcodeline": "rar->unp_buffer_size = UNP_BUFFER_SIZE;"
    },
    {
        "line": 394,
        "fullcodeline": "memset(rar->lengthtable, 0, sizeof(rar->lengthtable));"
    },
    {
        "line": 395,
        "fullcodeline": "__archive_ppmd7_functions.Ppmd7_Free(&rar->ppmd7_context, &g_szalloc);"
    },
    {
        "line": 396,
        "fullcodeline": "rar->ppmd_valid = rar->ppmd_eod = 0;"
    },
    {
        "line": 402,
        "fullcodeline": "archive_entry_set_mtime(entry, rar->mtime, rar->mnsec);"
    },
    {
        "line": 403,
        "fullcodeline": "archive_entry_set_ctime(entry, rar->ctime, rar->cnsec);"
    },
    {
        "line": 404,
        "fullcodeline": "archive_entry_set_atime(entry, rar->atime, rar->ansec);"
    },
    {
        "line": 405,
        "fullcodeline": "archive_entry_set_size(entry, rar->unp_size);"
    },
    {
        "line": 406,
        "fullcodeline": "archive_entry_set_mode(entry, rar->mode);"
    },
    {
        "line": 24,
        "fullcodeline": "if (sconv == NULL) {"
    },
    {
        "line": 35,
        "fullcodeline": "if ((h = __archive_read_ahead(a, 7, NULL)) == NULL)"
    },
    {
        "line": 41,
        "fullcodeline": "if (header_size < (int64_t)sizeof(file_header) + 7) {"
    },
    {
        "line": 49,
        "fullcodeline": "if (!(rar->file_flags & FHD_SOLID))"
    },
    {
        "line": 76,
        "fullcodeline": "if ((h = __archive_read_ahead(a, (size_t)header_size - 7, NULL)) == NULL)"
    },
    {
        "line": 81,
        "fullcodeline": "if ((crc32_val & 0xffff) != archive_le16dec(rar_header.crc)) {"
    },
    {
        "line": 99,
        "fullcodeline": "if (rar->file_flags & FHD_PASSWORD)"
    },
    {
        "line": 111,
        "fullcodeline": "if (rar->file_flags & FHD_LARGE)"
    },
    {
        "line": 128,
        "fullcodeline": "if (rar->packed_size < 0 || rar->unp_size < 0)"
    },
    {
        "line": 140,
        "fullcodeline": "if (head_type == NEWSUB_HEAD) {"
    },
    {
        "line": 152,
        "fullcodeline": "if (p + filename_size > endp) {"
    },
    {
        "line": 157,
        "fullcodeline": "if (rar->filename_allocated < filename_size * 2 + 2) {"
    },
    {
        "line": 172,
        "fullcodeline": "if (rar->file_flags & FHD_UNICODE)"
    },
    {
        "line": 284,
        "fullcodeline": "if (rar->filename_save &&"
    },
    {
        "line": 319,
        "fullcodeline": "if ((rar->dbo = calloc(1, sizeof(*rar->dbo))) == NULL)"
    },
    {
        "line": 330,
        "fullcodeline": "if (rar->file_flags & FHD_SALT)"
    },
    {
        "line": 341,
        "fullcodeline": "if (rar->file_flags & FHD_EXTTIME) {"
    },
    {
        "line": 399,
        "fullcodeline": "if (head_type == NEWSUB_HEAD)"
    },
    {
        "line": 408,
        "fullcodeline": "if (archive_entry_copy_pathname_l(entry, filename, filename_size, fn_sconv))"
    },
    {
        "line": 422,
        "fullcodeline": "if (((rar->mode) & AE_IFMT) == AE_IFLNK)"
    },
    {
        "line": 435,
        "fullcodeline": "if (rar->bytes_remaining == 0)"
    },
    {
        "line": 31,
        "fullcodeline": "sconv = rar->sconv_default;"
    },
    {
        "line": 42,
        "fullcodeline": "archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,"
    },
    {
        "line": 51,
        "fullcodeline": "rar->compression_method = 0;"
    },
    {
        "line": 52,
        "fullcodeline": "rar->packed_size = 0;"
    },
    {
        "line": 53,
        "fullcodeline": "rar->unp_size = 0;"
    },
    {
        "line": 54,
        "fullcodeline": "rar->mtime = 0;"
    },
    {
        "line": 55,
        "fullcodeline": "rar->ctime = 0;"
    },
    {
        "line": 56,
        "fullcodeline": "rar->atime = 0;"
    },
    {
        "line": 57,
        "fullcodeline": "rar->arctime = 0;"
    },
    {
        "line": 58,
        "fullcodeline": "rar->mode = 0;"
    },
    {
        "line": 59,
        "fullcodeline": "memset(&rar->salt, 0, sizeof(rar->salt));"
    },
    {
        "line": 60,
        "fullcodeline": "rar->atime = 0;"
    },
    {
        "line": 61,
        "fullcodeline": "rar->ansec = 0;"
    },
    {
        "line": 62,
        "fullcodeline": "rar->ctime = 0;"
    },
    {
        "line": 63,
        "fullcodeline": "rar->cnsec = 0;"
    },
    {
        "line": 64,
        "fullcodeline": "rar->mtime = 0;"
    },
    {
        "line": 65,
        "fullcodeline": "rar->mnsec = 0;"
    },
    {
        "line": 66,
        "fullcodeline": "rar->arctime = 0;"
    },
    {
        "line": 67,
        "fullcodeline": "rar->arcnsec = 0;"
    },
    {
        "line": 82,
        "fullcodeline": "archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,"
    },
    {
        "line": 101,
        "fullcodeline": "archive_entry_set_is_data_encrypted(entry, 1);"
    },
    {
        "line": 102,
        "fullcodeline": "rar->has_encrypted_entries = 1;"
    },
    {
        "line": 103,
        "fullcodeline": "archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,"
    },
    {
        "line": 113,
        "fullcodeline": "memcpy(packed_size, file_header.pack_size, 4);"
    },
    {
        "line": 114,
        "fullcodeline": "memcpy(packed_size + 4, p, 4); /* High pack size */"
    },
    {
        "line": 115,
        "fullcodeline": "p += 4;"
    },
    {
        "line": 116,
        "fullcodeline": "memcpy(unp_size, file_header.unp_size, 4);"
    },
    {
        "line": 117,
        "fullcodeline": "memcpy(unp_size + 4, p, 4); /* High unpack size */"
    },
    {
        "line": 118,
        "fullcodeline": "p += 4;"
    },
    {
        "line": 119,
        "fullcodeline": "rar->packed_size = archive_le64dec(&packed_size);"
    },
    {
        "line": 120,
        "fullcodeline": "rar->unp_size = archive_le64dec(&unp_size);"
    },
    {
        "line": 130,
        "fullcodeline": "archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,"
    },
    {
        "line": 141,
        "fullcodeline": "size_t distance = p - (const char *)h;"
    },
    {
        "line": 142,
        "fullcodeline": "header_size += rar->packed_size;"
    },
    {
        "line": 146,
        "fullcodeline": "p = h;"
    },
    {
        "line": 147,
        "fullcodeline": "endp = p + header_size - 7;"
    },
    {
        "line": 148,
        "fullcodeline": "p += distance;"
    },
    {
        "line": 153,
        "fullcodeline": "archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,"
    },
    {
        "line": 159,
        "fullcodeline": "size_t newsize = filename_size * 2 + 2;"
    },
    {
        "line": 160,
        "fullcodeline": "newptr = realloc(rar->filename, newsize);"
    },
    {
        "line": 166,
        "fullcodeline": "rar->filename = newptr;"
    },
    {
        "line": 167,
        "fullcodeline": "rar->filename_allocated = newsize;"
    },
    {
        "line": 286,
        "fullcodeline": "!memcmp(rar->filename, rar->filename_save, filename_size + 1))"
    },
    {
        "line": 288,
        "fullcodeline": "__archive_read_consume(a, header_size - 7);"
    },
    {
        "line": 289,
        "fullcodeline": "rar->cursor++;"
    },
    {
        "line": 321,
        "fullcodeline": "archive_set_error(&a->archive, ENOMEM, \"Couldn't allocate memory.\");"
    },
    {
        "line": 337,
        "fullcodeline": "memcpy(rar->salt, p, 8);"
    },
    {
        "line": 338,
        "fullcodeline": "p += 8;"
    },
    {
        "line": 358,
        "fullcodeline": "rar->mode = archive_le32dec(file_header.file_attr);"
    },
    {
        "line": 363,
        "fullcodeline": "rar->mode |= S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH;"
    },
    {
        "line": 369,
        "fullcodeline": "rar->mode = archive_le32dec(file_header.file_attr);"
    },
    {
        "line": 373,
        "fullcodeline": "archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,"
    },
    {
        "line": 416,
        "fullcodeline": "archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,"
    },
    {
        "line": 419,
        "fullcodeline": "ret = (ARCHIVE_WARN);"
    },
    {
        "line": 425,
        "fullcodeline": "rar->bytes_remaining = 0;"
    },
    {
        "line": 426,
        "fullcodeline": "archive_entry_set_size(entry, 0);"
    },
    {
        "line": 436,
        "fullcodeline": "rar->entry_eof = 1;"
    },
    {
        "line": 25,
        "fullcodeline": "if (!rar->init_default_conversion) {"
    },
    {
        "line": 71,
        "fullcodeline": "archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,"
    },
    {
        "line": 124,
        "fullcodeline": "rar->packed_size = archive_le32dec(file_header.pack_size);"
    },
    {
        "line": 125,
        "fullcodeline": "rar->unp_size = archive_le32dec(file_header.unp_size);"
    },
    {
        "line": 144,
        "fullcodeline": "if ((h = __archive_read_ahead(a, (size_t)header_size - 7, NULL)) == NULL)"
    },
    {
        "line": 161,
        "fullcodeline": "if (newptr == NULL) {"
    },
    {
        "line": 174,
        "fullcodeline": "if (filename_size != strlen(filename))"
    },
    {
        "line": 277,
        "fullcodeline": "fn_sconv = sconv;"
    },
    {
        "line": 280,
        "fullcodeline": "p += filename_size;"
    },
    {
        "line": 285,
        "fullcodeline": "filename_size == rar->filename_save_size &&"
    },
    {
        "line": 290,
        "fullcodeline": "if (rar->cursor >= rar->nodes)"
    },
    {
        "line": 303,
        "fullcodeline": "if (rar->dbo[rar->cursor].start_offset < 0)"
    },
    {
        "line": 313,
        "fullcodeline": "filename_size + 1);"
    },
    {
        "line": 332,
        "fullcodeline": "if (p + 8 > endp) {"
    },
    {
        "line": 342,
        "fullcodeline": "if (read_exttime(p, rar, endp) < 0) {"
    },
    {
        "line": 359,
        "fullcodeline": "if (rar->mode & FILE_ATTRIBUTE_DIRECTORY)"
    },
    {
        "line": 410,
        "fullcodeline": "if (errno == ENOMEM)"
    },
    {
        "line": 418,
        "fullcodeline": "archive_string_conversion_charset_name(fn_sconv));"
    },
    {
        "line": 429,
        "fullcodeline": "if ((ret2 = read_symlink_stored(a, entry, sconv)) < (ARCHIVE_WARN))"
    },
    {
        "line": 431,
        "fullcodeline": "if (ret > ret2)"
    },
    {
        "line": 26,
        "fullcodeline": "rar->sconv_default ="
    },
    {
        "line": 29,
        "fullcodeline": "rar->init_default_conversion = 1;"
    },
    {
        "line": 162,
        "fullcodeline": "archive_set_error(&a->archive, ENOMEM,"
    },
    {
        "line": 179,
        "fullcodeline": "end = filename_size;"
    },
    {
        "line": 180,
        "fullcodeline": "fn_end = filename_size * 2;"
    },
    {
        "line": 181,
        "fullcodeline": "filename_size = 0;"
    },
    {
        "line": 182,
        "fullcodeline": "offset = (unsigned)strlen(filename) + 1;"
    },
    {
        "line": 184,
        "fullcodeline": "flagbits = 0;"
    },
    {
        "line": 185,
        "fullcodeline": "flagbyte = 0;"
    },
    {
        "line": 236,
        "fullcodeline": "filename[filename_size++] = '\\0';"
    },
    {
        "line": 237,
        "fullcodeline": "filename[filename_size++] = '\\0';"
    },
    {
        "line": 247,
        "fullcodeline": "fn_sconv = rar->sconv_utf16be;"
    },
    {
        "line": 249,
        "fullcodeline": "strp = filename;"
    },
    {
        "line": 256,
        "fullcodeline": "p += offset;"
    },
    {
        "line": 278,
        "fullcodeline": "while ((strp = strchr(filename, '\\\\')) != NULL)"
    },
    {
        "line": 279,
        "fullcodeline": "*strp = '/';"
    },
    {
        "line": 292,
        "fullcodeline": "rar->nodes++;"
    },
    {
        "line": 299,
        "fullcodeline": "rar->dbo[rar->cursor].header_size = header_size;"
    },
    {
        "line": 300,
        "fullcodeline": "rar->dbo[rar->cursor].start_offset = -1;"
    },
    {
        "line": 301,
        "fullcodeline": "rar->dbo[rar->cursor].end_offset = -1;"
    },
    {
        "line": 306,
        "fullcodeline": "rar->dbo[rar->cursor].end_offset = rar->dbo[rar->cursor].start_offset +"
    },
    {
        "line": 333,
        "fullcodeline": "archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,"
    },
    {
        "line": 343,
        "fullcodeline": "archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,"
    },
    {
        "line": 360,
        "fullcodeline": "rar->mode = AE_IFDIR | S_IXUSR | S_IXGRP | S_IXOTH;"
    },
    {
        "line": 412,
        "fullcodeline": "archive_set_error(&a->archive, ENOMEM,"
    },
    {
        "line": 432,
        "fullcodeline": "ret = ret2;"
    },
    {
        "line": 27,
        "fullcodeline": "archive_string_default_conversion_for_read("
    },
    {
        "line": 186,
        "fullcodeline": "while (offset < end && filename_size < fn_end)"
    },
    {
        "line": 231,
        "fullcodeline": "if (filename_size > fn_end) {"
    },
    {
        "line": 241,
        "fullcodeline": "if (rar->sconv_utf16be == NULL) {"
    },
    {
        "line": 250,
        "fullcodeline": "while (memcmp(strp, \"\\x00\\x00\", 2))"
    },
    {
        "line": 269,
        "fullcodeline": "fn_sconv = rar->sconv_utf8;"
    },
    {
        "line": 272,
        "fullcodeline": "p += filename_size;"
    },
    {
        "line": 293,
        "fullcodeline": "if ((rar->dbo ="
    },
    {
        "line": 362,
        "fullcodeline": "rar->mode = AE_IFREG;"
    },
    {
        "line": 183,
        "fullcodeline": "highbyte = *(p + offset++);"
    },
    {
        "line": 194,
        "fullcodeline": "flagbits -= 2;"
    },
    {
        "line": 232,
        "fullcodeline": "archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,"
    },
    {
        "line": 242,
        "fullcodeline": "rar->sconv_utf16be = archive_string_conversion_from_charset("
    },
    {
        "line": 254,
        "fullcodeline": "strp += 2;"
    },
    {
        "line": 263,
        "fullcodeline": "if (rar->sconv_utf8 == NULL) {"
    },
    {
        "line": 270,
        "fullcodeline": "while ((strp = strchr(filename, '\\\\')) != NULL)"
    },
    {
        "line": 271,
        "fullcodeline": "*strp = '/';"
    },
    {
        "line": 296,
        "fullcodeline": "archive_set_error(&a->archive, ENOMEM, \"Couldn't allocate memory.\");"
    },
    {
        "line": 188,
        "fullcodeline": "if (!flagbits)"
    },
    {
        "line": 195,
        "fullcodeline": "switch((flagbyte >> flagbits) & 3)"
    },
    {
        "line": 244,
        "fullcodeline": "if (rar->sconv_utf16be == NULL)"
    },
    {
        "line": 252,
        "fullcodeline": "if (!memcmp(strp, \"\\x00\\\\\", 2))"
    },
    {
        "line": 264,
        "fullcodeline": "rar->sconv_utf8 = archive_string_conversion_from_charset("
    },
    {
        "line": 294,
        "fullcodeline": "realloc(rar->dbo, sizeof(*rar->dbo) * rar->nodes)) == NULL)"
    },
    {
        "line": 191,
        "fullcodeline": "flagbits = 8;"
    },
    {
        "line": 198,
        "fullcodeline": "filename[filename_size++] = '\\0';"
    },
    {
        "line": 202,
        "fullcodeline": "filename[filename_size++] = highbyte;"
    },
    {
        "line": 208,
        "fullcodeline": "offset += 2;"
    },
    {
        "line": 253,
        "fullcodeline": "*(strp + 1) = '/';"
    },
    {
        "line": 266,
        "fullcodeline": "if (rar->sconv_utf8 == NULL)"
    },
    {
        "line": 220,
        "fullcodeline": "length = (length & 0x7f) + 2;"
    },
    {
        "line": 190,
        "fullcodeline": "flagbyte = *(p + offset++);"
    },
    {
        "line": 199,
        "fullcodeline": "filename[filename_size++] = *(p + offset++);"
    },
    {
        "line": 203,
        "fullcodeline": "filename[filename_size++] = *(p + offset++);"
    },
    {
        "line": 206,
        "fullcodeline": "filename[filename_size++] = *(p + offset + 1);"
    },
    {
        "line": 207,
        "fullcodeline": "filename[filename_size++] = *(p + offset);"
    },
    {
        "line": 215,
        "fullcodeline": "if (length & 0x80) {"
    },
    {
        "line": 221,
        "fullcodeline": "while (length && filename_size < fn_end) {"
    },
    {
        "line": 213,
        "fullcodeline": "uint8_t length = *(p + offset++);"
    },
    {
        "line": 217,
        "fullcodeline": "high = (char)highbyte;"
    },
    {
        "line": 222,
        "fullcodeline": "unsigned cp = filename_size >> 1;"
    },
    {
        "line": 223,
        "fullcodeline": "filename[filename_size++] = high;"
    },
    {
        "line": 224,
        "fullcodeline": "filename[filename_size++] = p[cp] + extra;"
    },
    {
        "line": 225,
        "fullcodeline": "length--;"
    },
    {
        "line": 219,
        "fullcodeline": "extra = high = 0;"
    },
    {
        "line": 216,
        "fullcodeline": "extra = *(p + offset++);"
    }
]