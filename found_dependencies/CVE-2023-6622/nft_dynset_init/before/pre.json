[
    {
        "line": 5,
        "fullcodeline": "struct nftables_pernet *nft_net = nft_pernet(ctx->net);"
    },
    {
        "line": 6,
        "fullcodeline": "struct nft_dynset *priv = nft_expr_priv(expr);"
    },
    {
        "line": 7,
        "fullcodeline": "u8 genmask = nft_genmask_next(ctx->net);"
    },
    {
        "line": 12,
        "fullcodeline": "lockdep_assert_held(&nft_net->commit_mutex);"
    },
    {
        "line": 29,
        "fullcodeline": "set = nft_set_lookup_global(ctx->net, ctx->table,"
    },
    {
        "line": 44,
        "fullcodeline": "priv->op = ntohl(nla_get_be32(tb[NFTA_DYNSET_OP]));"
    },
    {
        "line": 48,
        "fullcodeline": "timeout = 0;"
    },
    {
        "line": 58,
        "fullcodeline": "err = nft_parse_register_load(tb[NFTA_DYNSET_SREG_KEY], &priv->sreg_key,"
    },
    {
        "line": 142,
        "fullcodeline": "nft_set_ext_prepare(&priv->tmpl);"
    },
    {
        "line": 143,
        "fullcodeline": "nft_set_ext_add_length(&priv->tmpl, NFT_SET_EXT_KEY, set->klen);"
    },
    {
        "line": 159,
        "fullcodeline": "err = nf_tables_bind_set(ctx, set, &priv->binding);"
    },
    {
        "line": 14,
        "fullcodeline": "if (tb[NFTA_DYNSET_SET_NAME] == NULL ||"
    },
    {
        "line": 32,
        "fullcodeline": "if (IS_ERR(set))"
    },
    {
        "line": 35,
        "fullcodeline": "if (set->flags & NFT_SET_OBJECT)"
    },
    {
        "line": 38,
        "fullcodeline": "if (set->ops->update == NULL)"
    },
    {
        "line": 41,
        "fullcodeline": "if (set->flags & NFT_SET_CONSTANT)"
    },
    {
        "line": 45,
        "fullcodeline": "if (priv->op > NFT_DYNSET_OP_DELETE)"
    },
    {
        "line": 49,
        "fullcodeline": "if (tb[NFTA_DYNSET_TIMEOUT] != NULL) {"
    },
    {
        "line": 60,
        "fullcodeline": "if (err < 0)"
    },
    {
        "line": 63,
        "fullcodeline": "if (tb[NFTA_DYNSET_SREG_DATA] != NULL) {"
    },
    {
        "line": 144,
        "fullcodeline": "if (set->flags & NFT_SET_MAP)"
    },
    {
        "line": 150,
        "fullcodeline": "if (set->flags & NFT_SET_TIMEOUT) {"
    },
    {
        "line": 160,
        "fullcodeline": "if (err < 0)"
    },
    {
        "line": 163,
        "fullcodeline": "if (set->size == 0)"
    },
    {
        "line": 170,
        "fullcodeline": "for (i = 0; i < priv->num_exprs; i++)"
    },
    {
        "line": 16,
        "fullcodeline": "tb[NFTA_DYNSET_SREG_KEY] == NULL)"
    },
    {
        "line": 20,
        "fullcodeline": "u32 flags = ntohl(nla_get_be32(tb[NFTA_DYNSET_FLAGS]));"
    },
    {
        "line": 53,
        "fullcodeline": "err = nf_msecs_to_jiffies64(tb[NFTA_DYNSET_TIMEOUT], &timeout);"
    },
    {
        "line": 69,
        "fullcodeline": "err = nft_parse_register_load(tb[NFTA_DYNSET_SREG_DATA],"
    },
    {
        "line": 76,
        "fullcodeline": "if ((tb[NFTA_DYNSET_EXPR] || tb[NFTA_DYNSET_EXPRESSIONS]) &&"
    },
    {
        "line": 77,
        "fullcodeline": "!(set->flags & NFT_SET_EVAL))"
    },
    {
        "line": 83,
        "fullcodeline": "dynset_expr = nft_dynset_expr_alloc(ctx, set,"
    },
    {
        "line": 88,
        "fullcodeline": "priv->num_exprs++;"
    },
    {
        "line": 145,
        "fullcodeline": "nft_set_ext_add_length(&priv->tmpl, NFT_SET_EXT_DATA, set->dlen);"
    },
    {
        "line": 148,
        "fullcodeline": "nft_dynset_ext_add_expr(priv);"
    },
    {
        "line": 164,
        "fullcodeline": "set->size = 0xffff;"
    },
    {
        "line": 15,
        "fullcodeline": "tb[NFTA_DYNSET_OP] == NULL ||"
    },
    {
        "line": 17,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 21,
        "fullcodeline": "if (flags & ~(NFT_DYNSET_F_INV | NFT_DYNSET_F_EXPR))"
    },
    {
        "line": 23,
        "fullcodeline": "if (flags & NFT_DYNSET_F_INV)"
    },
    {
        "line": 33,
        "fullcodeline": "return PTR_ERR(set);"
    },
    {
        "line": 36,
        "fullcodeline": "return -EOPNOTSUPP;"
    },
    {
        "line": 39,
        "fullcodeline": "return -EOPNOTSUPP;"
    },
    {
        "line": 42,
        "fullcodeline": "return -EBUSY;"
    },
    {
        "line": 46,
        "fullcodeline": "return -EOPNOTSUPP;"
    },
    {
        "line": 66,
        "fullcodeline": "if (set->dtype == NFT_DATA_VERDICT)"
    },
    {
        "line": 71,
        "fullcodeline": "if (err < 0)"
    },
    {
        "line": 78,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 85,
        "fullcodeline": "if (IS_ERR(dynset_expr))"
    },
    {
        "line": 151,
        "fullcodeline": "if (timeout || set->timeout) {"
    },
    {
        "line": 24,
        "fullcodeline": "priv->invert = true;"
    },
    {
        "line": 26,
        "fullcodeline": "priv->expr = true;"
    },
    {
        "line": 50,
        "fullcodeline": "if (!(set->flags & NFT_SET_TIMEOUT))"
    },
    {
        "line": 64,
        "fullcodeline": "if (!(set->flags & NFT_SET_MAP))"
    },
    {
        "line": 73,
        "fullcodeline": "} else if (set->flags & NFT_SET_MAP)"
    },
    {
        "line": 91,
        "fullcodeline": "if (set->num_exprs > 1 ||"
    },
    {
        "line": 92,
        "fullcodeline": "(set->num_exprs == 1 &&"
    },
    {
        "line": 94,
        "fullcodeline": "err = -EOPNOTSUPP;"
    },
    {
        "line": 152,
        "fullcodeline": "nft_set_ext_add(&priv->tmpl, NFT_SET_EXT_TIMEOUT);"
    },
    {
        "line": 153,
        "fullcodeline": "nft_set_ext_add(&priv->tmpl, NFT_SET_EXT_EXPIRATION);"
    },
    {
        "line": 22,
        "fullcodeline": "return -EOPNOTSUPP;"
    },
    {
        "line": 51,
        "fullcodeline": "return -EOPNOTSUPP;"
    },
    {
        "line": 65,
        "fullcodeline": "return -EOPNOTSUPP;"
    },
    {
        "line": 67,
        "fullcodeline": "return -EOPNOTSUPP;"
    },
    {
        "line": 86,
        "fullcodeline": "return PTR_ERR(dynset_expr);"
    },
    {
        "line": 93,
        "fullcodeline": "dynset_expr->ops != set->exprs[0]->ops)) {"
    },
    {
        "line": 105,
        "fullcodeline": "i = 0;"
    },
    {
        "line": 106,
        "fullcodeline": "nla_for_each_nested(tmp, tb[NFTA_DYNSET_EXPRESSIONS], left) {"
    },
    {
        "line": 74,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 102,
        "fullcodeline": "if (!priv->expr)"
    },
    {
        "line": 115,
        "fullcodeline": "dynset_expr = nft_dynset_expr_alloc(ctx, set, tmp, i);"
    },
    {
        "line": 120,
        "fullcodeline": "priv->expr_array[i] = dynset_expr;"
    },
    {
        "line": 121,
        "fullcodeline": "priv->num_exprs++;"
    },
    {
        "line": 128,
        "fullcodeline": "i++;"
    },
    {
        "line": 130,
        "fullcodeline": "if (set->num_exprs && set->num_exprs != i) {"
    },
    {
        "line": 107,
        "fullcodeline": "if (i == NFT_SET_EXPR_MAX) {"
    },
    {
        "line": 111,
        "fullcodeline": "if (nla_type(tmp) != NFTA_LIST_ELEM) {"
    },
    {
        "line": 116,
        "fullcodeline": "if (IS_ERR(dynset_expr)) {"
    },
    {
        "line": 123,
        "fullcodeline": "if (set->num_exprs &&"
    },
    {
        "line": 131,
        "fullcodeline": "err = -EOPNOTSUPP;"
    },
    {
        "line": 134,
        "fullcodeline": "} else if (set->num_exprs > 0) {"
    },
    {
        "line": 103,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 108,
        "fullcodeline": "err = -E2BIG;"
    },
    {
        "line": 112,
        "fullcodeline": "err = -EINVAL;"
    },
    {
        "line": 117,
        "fullcodeline": "err = PTR_ERR(dynset_expr);"
    },
    {
        "line": 124,
        "fullcodeline": "dynset_expr->ops != set->exprs[i]->ops) {"
    },
    {
        "line": 125,
        "fullcodeline": "err = -EOPNOTSUPP;"
    },
    {
        "line": 135,
        "fullcodeline": "err = nft_set_elem_expr_clone(ctx, set, priv->expr_array);"
    },
    {
        "line": 139,
        "fullcodeline": "priv->num_exprs = set->num_exprs;"
    },
    {
        "line": 136,
        "fullcodeline": "if (err < 0)"
    }
]