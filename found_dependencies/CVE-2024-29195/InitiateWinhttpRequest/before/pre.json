[
    {
        "line": 6,
        "fullcodeline": "wchar_t* relativePathTemp = NULL;"
    },
    {
        "line": 58,
        "fullcodeline": "free(relativePathTemp);"
    },
    {
        "line": 8,
        "fullcodeline": "if ((requestTypeString = GetHttpRequestString(requestType)) == NULL)"
    },
    {
        "line": 10,
        "fullcodeline": "result = HTTPAPI_INVALID_ARG;"
    },
    {
        "line": 13,
        "fullcodeline": "else if ((requiredCharactersForRelativePath = MultiByteToWideChar(CP_ACP, 0, relativePath, -1, NULL, 0)) == 0)"
    },
    {
        "line": 15,
        "fullcodeline": "result = HTTPAPI_STRING_PROCESSING_ERROR;"
    },
    {
        "line": 16,
        "fullcodeline": "LogError(\"MultiByteToWideChar failed, GetLastError=0x%08x\", GetLastError());"
    },
    {
        "line": 18,
        "fullcodeline": "else if ((relativePathTemp = (wchar_t*)malloc((requiredCharactersForRelativePath + 1) * sizeof(wchar_t))) == NULL)"
    },
    {
        "line": 20,
        "fullcodeline": "result = HTTPAPI_ALLOC_FAILED;"
    },
    {
        "line": 23,
        "fullcodeline": "else if (MultiByteToWideChar(CP_ACP, 0, relativePath, -1, relativePathTemp, (int)requiredCharactersForRelativePath) == 0)"
    },
    {
        "line": 25,
        "fullcodeline": "result = HTTPAPI_STRING_PROCESSING_ERROR;"
    },
    {
        "line": 28,
        "fullcodeline": "else if ((*requestHandle = WinHttpOpenRequest("
    },
    {
        "line": 37,
        "fullcodeline": "result = HTTPAPI_OPEN_REQUEST_FAILED;"
    },
    {
        "line": 40,
        "fullcodeline": "else if ((handleData->x509SchannelHandle != NULL) &&"
    },
    {
        "line": 41,
        "fullcodeline": "!WinHttpSetOption("
    },
    {
        "line": 48,
        "fullcodeline": "result = HTTPAPI_SET_X509_FAILURE;"
    },
    {
        "line": 49,
        "fullcodeline": "LogErrorWinHTTPWithGetLastErrorAsString(\"unable to WinHttpSetOption (WINHTTP_OPTION_CLIENT_CERT_CONTEXT)\");"
    },
    {
        "line": 50,
        "fullcodeline": "(void)WinHttpCloseHandle(*requestHandle);"
    },
    {
        "line": 51,
        "fullcodeline": "*requestHandle = NULL;"
    },
    {
        "line": 55,
        "fullcodeline": "result = HTTPAPI_OK;"
    },
    {
        "line": 44,
        "fullcodeline": "(void*)x509_schannel_get_certificate_context(handleData->x509SchannelHandle),"
    },
    {
        "line": 45,
        "fullcodeline": "sizeof(CERT_CONTEXT)"
    }
]