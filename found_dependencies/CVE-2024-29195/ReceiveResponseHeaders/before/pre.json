[
    {
        "line": 4,
        "fullcodeline": "wchar_t* responseHeadersTemp = NULL;"
    },
    {
        "line": 5,
        "fullcodeline": "DWORD responseHeadersTempLength = 0;"
    },
    {
        "line": 10,
        "fullcodeline": "WinHttpQueryHeaders("
    },
    {
        "line": 93,
        "fullcodeline": "free(responseHeadersTemp);"
    },
    {
        "line": 18,
        "fullcodeline": "if ((responseHeadersTemp = (wchar_t*)malloc((size_t)responseHeadersTempLength + 2)) == NULL)"
    },
    {
        "line": 20,
        "fullcodeline": "result = HTTPAPI_ALLOC_FAILED;"
    },
    {
        "line": 23,
        "fullcodeline": "else if (! WinHttpQueryHeaders("
    },
    {
        "line": 31,
        "fullcodeline": "result = HTTPAPI_QUERY_HEADERS_FAILED;"
    },
    {
        "line": 36,
        "fullcodeline": "wchar_t *next_token = NULL;"
    },
    {
        "line": 37,
        "fullcodeline": "wchar_t* token = wcstok_s(responseHeadersTemp, L\"\\r\\n\", &next_token);"
    },
    {
        "line": 38,
        "fullcodeline": "char* tokenTemp = NULL;"
    },
    {
        "line": 40,
        "fullcodeline": "result = HTTPAPI_OK;"
    },
    {
        "line": 90,
        "fullcodeline": "tokenTemp = NULL;"
    },
    {
        "line": 42,
        "fullcodeline": "while ((token != NULL) &&"
    },
    {
        "line": 43,
        "fullcodeline": "(token[0] != L'\\0'))"
    },
    {
        "line": 47,
        "fullcodeline": "tokenTemp_size = WideCharToMultiByte(CP_ACP, 0, token, -1, NULL, 0, NULL, NULL);"
    },
    {
        "line": 84,
        "fullcodeline": "tokenTemp = NULL;"
    },
    {
        "line": 86,
        "fullcodeline": "token = wcstok_s(NULL, L\"\\r\\n\", &next_token);"
    },
    {
        "line": 48,
        "fullcodeline": "if (tokenTemp_size == 0)"
    },
    {
        "line": 50,
        "fullcodeline": "result = HTTPAPI_STRING_PROCESSING_ERROR;"
    },
    {
        "line": 51,
        "fullcodeline": "LogError(\"WideCharToMultiByte failed\");"
    },
    {
        "line": 54,
        "fullcodeline": "else if ((tokenTemp = (char*)malloc(sizeof(char) * tokenTemp_size)) == NULL)"
    },
    {
        "line": 56,
        "fullcodeline": "result = HTTPAPI_ALLOC_FAILED;"
    },
    {
        "line": 57,
        "fullcodeline": "LogError(\"malloc failed\");"
    },
    {
        "line": 60,
        "fullcodeline": "else if (WideCharToMultiByte(CP_ACP, 0, token, -1, tokenTemp, (int)tokenTemp_size, NULL, NULL) == 0)"
    },
    {
        "line": 62,
        "fullcodeline": "result = HTTPAPI_STRING_PROCESSING_ERROR;"
    },
    {
        "line": 63,
        "fullcodeline": "LogError(\"WideCharToMultiByte failed\");"
    },
    {
        "line": 71,
        "fullcodeline": "char* whereIsColon = strchr(tokenTemp, ':');"
    },
    {
        "line": 72,
        "fullcodeline": "if (whereIsColon != NULL)"
    },
    {
        "line": 74,
        "fullcodeline": "*whereIsColon = '\\0';"
    },
    {
        "line": 75,
        "fullcodeline": "if (HTTPHeaders_AddHeaderNameValuePair(responseHeadersHandle, tokenTemp, whereIsColon + 1) != HTTP_HEADERS_OK)"
    },
    {
        "line": 77,
        "fullcodeline": "LogError(\"HTTPHeaders_AddHeaderNameValuePair failed\");"
    },
    {
        "line": 78,
        "fullcodeline": "result = HTTPAPI_HTTP_HEADERS_FAILED;"
    }
]