[
    {
        "line": 5,
        "fullcodeline": "if (openssl_locks != NULL)"
    },
    {
        "line": 7,
        "fullcodeline": "LogInfo(\"Locks already initialized\");"
    },
    {
        "line": 8,
        "fullcodeline": "result = MU_FAILURE;"
    },
    {
        "line": 12,
        "fullcodeline": "openssl_locks = malloc(CRYPTO_num_locks() * sizeof(LOCK_HANDLE));"
    },
    {
        "line": 13,
        "fullcodeline": "if (openssl_locks == NULL)"
    },
    {
        "line": 15,
        "fullcodeline": "LogError(\"Failed to allocate locks\");"
    },
    {
        "line": 16,
        "fullcodeline": "result = MU_FAILURE;"
    },
    {
        "line": 21,
        "fullcodeline": "for (i = 0; i < CRYPTO_num_locks(); i++)"
    },
    {
        "line": 31,
        "fullcodeline": "if (i != CRYPTO_num_locks())"
    },
    {
        "line": 23,
        "fullcodeline": "openssl_locks[i] = Lock_Init();"
    },
    {
        "line": 38,
        "fullcodeline": "result = MU_FAILURE;"
    },
    {
        "line": 24,
        "fullcodeline": "if (openssl_locks[i] == NULL)"
    },
    {
        "line": 34,
        "fullcodeline": "for (j = 0; j < i; j++)"
    },
    {
        "line": 42,
        "fullcodeline": "CRYPTO_set_locking_callback(openssl_static_locks_lock_unlock_cb);"
    },
    {
        "line": 44,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 26,
        "fullcodeline": "LogError(\"Failed to allocate lock %d\", i);"
    },
    {
        "line": 36,
        "fullcodeline": "Lock_Deinit(openssl_locks[j]);"
    }
]