[
    {
        "line": 5,
        "fullcodeline": "if (openssl_locks != NULL)"
    },
    {
        "line": 7,
        "fullcodeline": "LogInfo(\"Locks already initialized\");"
    },
    {
        "line": 8,
        "fullcodeline": "result = MU_FAILURE;"
    },
    {
        "line": 12,
        "fullcodeline": "size_t malloc_size = safe_multiply_size_t(CRYPTO_num_locks(), sizeof(LOCK_HANDLE));"
    },
    {
        "line": 13,
        "fullcodeline": "if (malloc_size == SIZE_MAX ||"
    },
    {
        "line": 14,
        "fullcodeline": "(openssl_locks = malloc(malloc_size)) == NULL)"
    },
    {
        "line": 16,
        "fullcodeline": "LogError(\"Failed to allocate locks, size:%zu\", malloc_size);"
    },
    {
        "line": 17,
        "fullcodeline": "result = MU_FAILURE;"
    },
    {
        "line": 22,
        "fullcodeline": "for (i = 0; i < CRYPTO_num_locks(); i++)"
    },
    {
        "line": 32,
        "fullcodeline": "if (i != CRYPTO_num_locks())"
    },
    {
        "line": 24,
        "fullcodeline": "openssl_locks[i] = Lock_Init();"
    },
    {
        "line": 39,
        "fullcodeline": "result = MU_FAILURE;"
    },
    {
        "line": 25,
        "fullcodeline": "if (openssl_locks[i] == NULL)"
    },
    {
        "line": 35,
        "fullcodeline": "for (j = 0; j < i; j++)"
    },
    {
        "line": 43,
        "fullcodeline": "CRYPTO_set_locking_callback(openssl_static_locks_lock_unlock_cb);"
    },
    {
        "line": 45,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 27,
        "fullcodeline": "LogError(\"Failed to allocate lock %d\", i);"
    },
    {
        "line": 37,
        "fullcodeline": "Lock_Deinit(openssl_locks[j]);"
    }
]