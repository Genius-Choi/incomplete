[
    {
        "line": 4,
        "fullcodeline": "HTTP_HANDLE_DATA* http_instance = (HTTP_HANDLE_DATA*)handle;"
    },
    {
        "line": 7,
        "fullcodeline": "(http_instance == NULL) ||"
    },
    {
        "line": 9,
        "fullcodeline": "(value == NULL)"
    },
    {
        "line": 15,
        "fullcodeline": "result = HTTPAPI_INVALID_ARG;"
    },
    {
        "line": 8,
        "fullcodeline": "(optionName == NULL) ||"
    },
    {
        "line": 17,
        "fullcodeline": "else if (strcmp(OPTION_TRUSTED_CERT, optionName) == 0)"
    },
    {
        "line": 29,
        "fullcodeline": "size_t len = strlen((char*)value);"
    },
    {
        "line": 30,
        "fullcodeline": "size_t malloc_size = safe_add_size_t(len, 1);"
    },
    {
        "line": 31,
        "fullcodeline": "malloc_size = safe_multiply_size_t(malloc_size, sizeof(char));"
    },
    {
        "line": 32,
        "fullcodeline": "if (malloc_size == SIZE_MAX)"
    },
    {
        "line": 42,
        "fullcodeline": "if (http_instance->certificate == NULL)"
    },
    {
        "line": 34,
        "fullcodeline": "LogError(\"Invalid malloc size\");"
    },
    {
        "line": 35,
        "fullcodeline": "http_instance->certificate = NULL;"
    },
    {
        "line": 45,
        "fullcodeline": "result = HTTPAPI_ALLOC_FAILED;"
    },
    {
        "line": 46,
        "fullcodeline": "LogInfo(\"unable to allocate memory for the certificate in HTTPAPI_SetOption\");"
    },
    {
        "line": 56,
        "fullcodeline": "else if (strcmp(SU_OPTION_X509_CERT, optionName) == 0 || strcmp(OPTION_X509_ECC_CERT, optionName) == 0)"
    },
    {
        "line": 39,
        "fullcodeline": "http_instance->certificate = (char*)malloc(malloc_size);"
    },
    {
        "line": 51,
        "fullcodeline": "(void)strcpy(http_instance->certificate, (const char*)value);"
    },
    {
        "line": 52,
        "fullcodeline": "result = HTTPAPI_OK;"
    },
    {
        "line": 63,
        "fullcodeline": "size_t len = strlen((char*)value);"
    },
    {
        "line": 64,
        "fullcodeline": "size_t malloc_size = safe_add_size_t(len, 1);"
    },
    {
        "line": 65,
        "fullcodeline": "malloc_size = safe_multiply_size_t(malloc_size, sizeof(char));"
    },
    {
        "line": 66,
        "fullcodeline": "if (malloc_size == SIZE_MAX)"
    },
    {
        "line": 76,
        "fullcodeline": "if (http_instance->x509ClientCertificate == NULL)"
    },
    {
        "line": 68,
        "fullcodeline": "LogError(\"Invalid malloc size\");"
    },
    {
        "line": 69,
        "fullcodeline": "http_instance->x509ClientCertificate = NULL;"
    },
    {
        "line": 79,
        "fullcodeline": "result = HTTPAPI_ALLOC_FAILED;"
    },
    {
        "line": 80,
        "fullcodeline": "LogInfo(\"unable to allocate memory for the client certificate in HTTPAPI_SetOption\");"
    },
    {
        "line": 89,
        "fullcodeline": "else if (strcmp(SU_OPTION_X509_PRIVATE_KEY, optionName) == 0 || strcmp(OPTION_X509_ECC_KEY, optionName) == 0)"
    },
    {
        "line": 73,
        "fullcodeline": "http_instance->x509ClientCertificate = (char*)malloc(malloc_size);"
    },
    {
        "line": 85,
        "fullcodeline": "(void)strcpy(http_instance->x509ClientCertificate, (const char*)value);"
    },
    {
        "line": 86,
        "fullcodeline": "result = HTTPAPI_OK;"
    },
    {
        "line": 96,
        "fullcodeline": "size_t len = strlen((char*)value);"
    },
    {
        "line": 97,
        "fullcodeline": "size_t malloc_size = safe_add_size_t(len, 1);"
    },
    {
        "line": 98,
        "fullcodeline": "malloc_size = safe_multiply_size_t(malloc_size, sizeof(char));"
    },
    {
        "line": 99,
        "fullcodeline": "if (malloc_size == SIZE_MAX)"
    },
    {
        "line": 109,
        "fullcodeline": "if (http_instance->x509ClientPrivateKey == NULL)"
    },
    {
        "line": 101,
        "fullcodeline": "LogError(\"Invalid malloc size\");"
    },
    {
        "line": 102,
        "fullcodeline": "http_instance->x509ClientPrivateKey = NULL;"
    },
    {
        "line": 112,
        "fullcodeline": "result = HTTPAPI_ALLOC_FAILED;"
    },
    {
        "line": 113,
        "fullcodeline": "LogInfo(\"unable to allocate memory for the client private key in HTTPAPI_SetOption\");"
    },
    {
        "line": 122,
        "fullcodeline": "else if (strcmp(OPTION_HTTP_PROXY, optionName) == 0)"
    },
    {
        "line": 106,
        "fullcodeline": "http_instance->x509ClientPrivateKey = (char*)malloc(malloc_size);"
    },
    {
        "line": 118,
        "fullcodeline": "(void)strcpy(http_instance->x509ClientPrivateKey, (const char*)value);"
    },
    {
        "line": 119,
        "fullcodeline": "result = HTTPAPI_OK;"
    },
    {
        "line": 126,
        "fullcodeline": "HTTP_PROXY_OPTIONS* proxy_options = (HTTP_PROXY_OPTIONS*)value;"
    },
    {
        "line": 128,
        "fullcodeline": "if (proxy_options->host_address == NULL)"
    },
    {
        "line": 130,
        "fullcodeline": "LogError(\"NULL host_address in proxy options\");"
    },
    {
        "line": 131,
        "fullcodeline": "result = HTTPAPI_ERROR;"
    },
    {
        "line": 192,
        "fullcodeline": "else if (strcmp(OPTION_SET_TLS_RENEGOTIATION, optionName) == 0)"
    },
    {
        "line": 194,
        "fullcodeline": "bool tls_renegotiation = *(bool*)value;"
    },
    {
        "line": 195,
        "fullcodeline": "http_instance->tls_renegotiation = tls_renegotiation;"
    },
    {
        "line": 196,
        "fullcodeline": "result = HTTPAPI_OK;"
    },
    {
        "line": 133,
        "fullcodeline": "else if (((proxy_options->username == NULL) || (proxy_options->password == NULL)) &&"
    },
    {
        "line": 201,
        "fullcodeline": "result = HTTPAPI_INVALID_ARG;"
    },
    {
        "line": 202,
        "fullcodeline": "LogInfo(\"unknown option %s\", optionName);"
    },
    {
        "line": 134,
        "fullcodeline": "(proxy_options->username != proxy_options->password))"
    },
    {
        "line": 136,
        "fullcodeline": "LogError(\"Only one of username and password for proxy settings was NULL\");"
    },
    {
        "line": 137,
        "fullcodeline": "result = HTTPAPI_ERROR;"
    },
    {
        "line": 146,
        "fullcodeline": "if ((xio_options = xio_retrieveoptions(http_instance->xio_handle)) == NULL)"
    },
    {
        "line": 148,
        "fullcodeline": "LogError(\"failed saving underlying I/O transport options\");"
    },
    {
        "line": 149,
        "fullcodeline": "result = HTTPAPI_ERROR;"
    },
    {
        "line": 153,
        "fullcodeline": "xio_destroy(http_instance->xio_handle);"
    },
    {
        "line": 155,
        "fullcodeline": "proxy_config.hostname = http_instance->hostName;"
    },
    {
        "line": 156,
        "fullcodeline": "proxy_config.proxy_hostname = proxy_options->host_address;"
    },
    {
        "line": 157,
        "fullcodeline": "proxy_config.password = proxy_options->password;"
    },
    {
        "line": 158,
        "fullcodeline": "proxy_config.username = proxy_options->username;"
    },
    {
        "line": 159,
        "fullcodeline": "proxy_config.proxy_port = proxy_options->port;"
    },
    {
        "line": 160,
        "fullcodeline": "proxy_config.port = 443;"
    },
    {
        "line": 162,
        "fullcodeline": "tlsio_config.hostname = http_instance->hostName;"
    },
    {
        "line": 163,
        "fullcodeline": "tlsio_config.port = 443;"
    },
    {
        "line": 164,
        "fullcodeline": "tlsio_config.underlying_io_interface =  http_proxy_io_get_interface_description();"
    },
    {
        "line": 165,
        "fullcodeline": "tlsio_config.underlying_io_parameters = &proxy_config;"
    },
    {
        "line": 166,
        "fullcodeline": "tlsio_config.invoke_on_send_complete_callback_for_fragments = true;"
    },
    {
        "line": 168,
        "fullcodeline": "http_instance->xio_handle = xio_create(platform_get_default_tlsio(), (void*)&tlsio_config);"
    },
    {
        "line": 188,
        "fullcodeline": "OptionHandler_Destroy(xio_options);"
    },
    {
        "line": 170,
        "fullcodeline": "if (http_instance->xio_handle == NULL)"
    },
    {
        "line": 172,
        "fullcodeline": "LogError(\"Failed to create xio handle with proxy configuration\");"
    },
    {
        "line": 173,
        "fullcodeline": "result = HTTPAPI_ERROR;"
    },
    {
        "line": 177,
        "fullcodeline": "if (OptionHandler_FeedOptions(xio_options, http_instance->xio_handle) != OPTIONHANDLER_OK)"
    },
    {
        "line": 179,
        "fullcodeline": "LogError(\"Failed feeding existing options to new xio instance.\");"
    },
    {
        "line": 180,
        "fullcodeline": "result = HTTPAPI_ERROR;"
    },
    {
        "line": 184,
        "fullcodeline": "result = HTTPAPI_OK;"
    }
]