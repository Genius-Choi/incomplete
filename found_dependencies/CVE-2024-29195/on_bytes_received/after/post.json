[
    {
        "line": 4,
        "fullcodeline": "HTTP_HANDLE_DATA* http_instance = (HTTP_HANDLE_DATA*)context;"
    },
    {
        "line": 6,
        "fullcodeline": "if (http_instance != NULL)"
    },
    {
        "line": 9,
        "fullcodeline": "if (buffer == NULL)"
    },
    {
        "line": 11,
        "fullcodeline": "http_instance->is_io_error = 1;"
    },
    {
        "line": 12,
        "fullcodeline": "LogError(\"NULL pointer error\");"
    },
    {
        "line": 17,
        "fullcodeline": "size_t malloc_size = http_instance->received_bytes_count + size;"
    },
    {
        "line": 18,
        "fullcodeline": "if (malloc_size < size)"
    },
    {
        "line": 29,
        "fullcodeline": "if (new_received_bytes == NULL)"
    },
    {
        "line": 21,
        "fullcodeline": "new_received_bytes = NULL;"
    },
    {
        "line": 22,
        "fullcodeline": "LogError(\"Invalid size parameter\");"
    },
    {
        "line": 31,
        "fullcodeline": "http_instance->is_io_error = 1;"
    },
    {
        "line": 32,
        "fullcodeline": "LogError(\"Error allocating memory for received data\");"
    },
    {
        "line": 26,
        "fullcodeline": "new_received_bytes = (unsigned char*)realloc(http_instance->received_bytes, malloc_size);"
    },
    {
        "line": 36,
        "fullcodeline": "http_instance->received_bytes = new_received_bytes;"
    },
    {
        "line": 37,
        "fullcodeline": "if (memcpy(http_instance->received_bytes + http_instance->received_bytes_count, buffer, size) == NULL)"
    },
    {
        "line": 39,
        "fullcodeline": "http_instance->is_io_error = 1;"
    },
    {
        "line": 40,
        "fullcodeline": "LogError(\"Error copping received data to the HTTP bufffer\");"
    },
    {
        "line": 44,
        "fullcodeline": "http_instance->received_bytes_count += size;"
    }
]