[
    {
        "line": 6,
        "fullcodeline": "if ((result = (NETWORK_INTERFACE_DESCRIPTION*)malloc(sizeof(NETWORK_INTERFACE_DESCRIPTION))) == NULL)"
    },
    {
        "line": 8,
        "fullcodeline": "LogError(\"Failed allocating NETWORK_INTERFACE_DESCRIPTION\");"
    },
    {
        "line": 10,
        "fullcodeline": "else if ((malloc_size = safe_multiply_size_t(safe_add_size_t(strlen(ifr->ifr_name), 1), sizeof(char))) == SIZE_MAX)"
    },
    {
        "line": 12,
        "fullcodeline": "LogError(\"invalid malloc size\");"
    },
    {
        "line": 13,
        "fullcodeline": "destroy_network_interface_descriptions(result);"
    },
    {
        "line": 14,
        "fullcodeline": "result = NULL;"
    },
    {
        "line": 16,
        "fullcodeline": "else if ((result->name = (char*)malloc(malloc_size)) == NULL)"
    },
    {
        "line": 18,
        "fullcodeline": "LogError(\"failed setting interface description name (malloc failed)\");"
    },
    {
        "line": 19,
        "fullcodeline": "destroy_network_interface_descriptions(result);"
    },
    {
        "line": 20,
        "fullcodeline": "result = NULL;"
    },
    {
        "line": 24,
        "fullcodeline": "strcpy(result->name, ifr->ifr_name);"
    },
    {
        "line": 28,
        "fullcodeline": "size_t malloc_size = safe_multiply_size_t(sizeof(char), MAC_ADDRESS_STRING_LENGTH);"
    },
    {
        "line": 30,
        "fullcodeline": "if (malloc_size == SIZE_MAX ||"
    },
    {
        "line": 31,
        "fullcodeline": "(result->mac_address = (char*)malloc(malloc_size)) == NULL)"
    },
    {
        "line": 33,
        "fullcodeline": "LogError(\"failed formatting mac address (malloc failed) size:%zu\", malloc_size);"
    },
    {
        "line": 34,
        "fullcodeline": "destroy_network_interface_descriptions(result);"
    },
    {
        "line": 35,
        "fullcodeline": "result = NULL;"
    },
    {
        "line": 37,
        "fullcodeline": "else if (sprintf(result->mac_address, \"%02X:%02X:%02X:%02X:%02X:%02X\", mac[0],mac[1],mac[2],mac[3],mac[4],mac[5]) <= 0)"
    },
    {
        "line": 39,
        "fullcodeline": "LogError(\"failed formatting mac address (sprintf failed)\");"
    },
    {
        "line": 40,
        "fullcodeline": "destroy_network_interface_descriptions(result);"
    },
    {
        "line": 41,
        "fullcodeline": "result = NULL;"
    },
    {
        "line": 43,
        "fullcodeline": "else if ((ip_address = inet_ntoa(((struct sockaddr_in*)&ifr->ifr_addr)->sin_addr)) == NULL)"
    },
    {
        "line": 45,
        "fullcodeline": "LogError(\"failed setting the ip address (inet_ntoa failed)\");"
    },
    {
        "line": 46,
        "fullcodeline": "destroy_network_interface_descriptions(result);"
    },
    {
        "line": 47,
        "fullcodeline": "result = NULL;"
    },
    {
        "line": 49,
        "fullcodeline": "else if ((malloc_size = safe_multiply_size_t(safe_add_size_t(strlen(ip_address), 1), sizeof(char))) == SIZE_MAX)"
    },
    {
        "line": 51,
        "fullcodeline": "LogError(\"invalid malloc size\");"
    },
    {
        "line": 52,
        "fullcodeline": "destroy_network_interface_descriptions(result);"
    },
    {
        "line": 53,
        "fullcodeline": "result = NULL;"
    },
    {
        "line": 55,
        "fullcodeline": "else if ((result->ip_address = (char*)malloc(malloc_size)) == NULL)"
    },
    {
        "line": 57,
        "fullcodeline": "LogError(\"failed setting the ip address (malloc failed)\");"
    },
    {
        "line": 58,
        "fullcodeline": "destroy_network_interface_descriptions(result);"
    },
    {
        "line": 59,
        "fullcodeline": "result = NULL;"
    },
    {
        "line": 63,
        "fullcodeline": "strcpy(result->ip_address, ip_address);"
    },
    {
        "line": 64,
        "fullcodeline": "result->next = NULL;"
    },
    {
        "line": 66,
        "fullcodeline": "if (previous_nid != NULL)"
    },
    {
        "line": 68,
        "fullcodeline": "previous_nid->next = result;"
    }
]