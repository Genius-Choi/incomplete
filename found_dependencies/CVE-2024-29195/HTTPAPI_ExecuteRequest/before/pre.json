[
    {
        "line": 7,
        "fullcodeline": "HTTP_HANDLE_DATA* httpHandleData = (HTTP_HANDLE_DATA*)handle;"
    },
    {
        "line": 11,
        "fullcodeline": "if ((httpHandleData == NULL) ||"
    },
    {
        "line": 14,
        "fullcodeline": "((content == NULL) && (contentLength > 0))"
    },
    {
        "line": 17,
        "fullcodeline": "result = HTTPAPI_INVALID_ARG;"
    },
    {
        "line": 13,
        "fullcodeline": "(httpHeadersHandle == NULL) ||"
    },
    {
        "line": 12,
        "fullcodeline": "(relativePath == NULL) ||"
    },
    {
        "line": 20,
        "fullcodeline": "else if (HTTPHeaders_GetHeaderCount(httpHeadersHandle, &headersCount) != HTTP_HEADERS_OK)"
    },
    {
        "line": 22,
        "fullcodeline": "result = HTTPAPI_INVALID_ARG;"
    },
    {
        "line": 28,
        "fullcodeline": "size_t tempHostURL_size = strlen(httpHandleData->hostURL) + strlen(relativePath) + 1;"
    },
    {
        "line": 29,
        "fullcodeline": "tempHostURL = malloc(tempHostURL_size);"
    },
    {
        "line": 30,
        "fullcodeline": "if (tempHostURL == NULL)"
    },
    {
        "line": 32,
        "fullcodeline": "result = HTTPAPI_ERROR;"
    },
    {
        "line": 375,
        "fullcodeline": "free(tempHostURL);"
    },
    {
        "line": 37,
        "fullcodeline": "if (curl_easy_setopt(httpHandleData->curl, CURLOPT_VERBOSE, httpHandleData->verbose) != CURLE_OK)"
    },
    {
        "line": 39,
        "fullcodeline": "result = HTTPAPI_SET_OPTION_FAILED;"
    },
    {
        "line": 42,
        "fullcodeline": "else if ((strcpy_s(tempHostURL, tempHostURL_size, httpHandleData->hostURL) != 0) ||"
    },
    {
        "line": 43,
        "fullcodeline": "(strcat_s(tempHostURL, tempHostURL_size, relativePath) != 0))"
    },
    {
        "line": 45,
        "fullcodeline": "result = HTTPAPI_STRING_PROCESSING_ERROR;"
    },
    {
        "line": 49,
        "fullcodeline": "else if (curl_easy_setopt(httpHandleData->curl, CURLOPT_URL, tempHostURL) != CURLE_OK)"
    },
    {
        "line": 51,
        "fullcodeline": "result = HTTPAPI_SET_OPTION_FAILED;"
    },
    {
        "line": 54,
        "fullcodeline": "else if (curl_easy_setopt(httpHandleData->curl, CURLOPT_TIMEOUT_MS, httpHandleData->timeout) != CURLE_OK)"
    },
    {
        "line": 56,
        "fullcodeline": "result = HTTPAPI_SET_OPTION_FAILED;"
    },
    {
        "line": 59,
        "fullcodeline": "else if (curl_easy_setopt(httpHandleData->curl, CURLOPT_LOW_SPEED_LIMIT, httpHandleData->lowSpeedLimit) != CURLE_OK)"
    },
    {
        "line": 61,
        "fullcodeline": "result = HTTPAPI_SET_OPTION_FAILED;"
    },
    {
        "line": 64,
        "fullcodeline": "else if (curl_easy_setopt(httpHandleData->curl, CURLOPT_LOW_SPEED_TIME, httpHandleData->lowSpeedTime) != CURLE_OK)"
    },
    {
        "line": 66,
        "fullcodeline": "result = HTTPAPI_SET_OPTION_FAILED;"
    },
    {
        "line": 69,
        "fullcodeline": "else if (curl_easy_setopt(httpHandleData->curl, CURLOPT_FRESH_CONNECT, httpHandleData->freshConnect) != CURLE_OK)"
    },
    {
        "line": 71,
        "fullcodeline": "result = HTTPAPI_SET_OPTION_FAILED;"
    },
    {
        "line": 74,
        "fullcodeline": "else if (curl_easy_setopt(httpHandleData->curl, CURLOPT_FORBID_REUSE, httpHandleData->forbidReuse) != CURLE_OK)"
    },
    {
        "line": 76,
        "fullcodeline": "result = HTTPAPI_SET_OPTION_FAILED;"
    },
    {
        "line": 79,
        "fullcodeline": "else if (curl_easy_setopt(httpHandleData->curl, CURLOPT_HTTP_VERSION, CURL_HTTP_VERSION_1_1) != CURLE_OK)"
    },
    {
        "line": 81,
        "fullcodeline": "result = HTTPAPI_SET_OPTION_FAILED;"
    },
    {
        "line": 86,
        "fullcodeline": "result = HTTPAPI_OK;"
    },
    {
        "line": 198,
        "fullcodeline": "if (result == HTTPAPI_OK)"
    },
    {
        "line": 91,
        "fullcodeline": "result = HTTPAPI_INVALID_ARG;"
    },
    {
        "line": 201,
        "fullcodeline": "struct curl_slist* headers = NULL;"
    },
    {
        "line": 372,
        "fullcodeline": "curl_slist_free_all(headers);"
    },
    {
        "line": 96,
        "fullcodeline": "if (curl_easy_setopt(httpHandleData->curl, CURLOPT_HTTPGET, 1L) != CURLE_OK)"
    },
    {
        "line": 113,
        "fullcodeline": "if (curl_easy_setopt(httpHandleData->curl, CURLOPT_HTTPGET, 1L) != CURLE_OK)"
    },
    {
        "line": 132,
        "fullcodeline": "if (curl_easy_setopt(httpHandleData->curl, CURLOPT_POST, 1L) != CURLE_OK)"
    },
    {
        "line": 149,
        "fullcodeline": "if (curl_easy_setopt(httpHandleData->curl, CURLOPT_POST, 1L))"
    },
    {
        "line": 165,
        "fullcodeline": "if (curl_easy_setopt(httpHandleData->curl, CURLOPT_POST, 1L) != CURLE_OK)"
    },
    {
        "line": 181,
        "fullcodeline": "if (curl_easy_setopt(httpHandleData->curl, CURLOPT_POST, 1L) != CURLE_OK)"
    },
    {
        "line": 204,
        "fullcodeline": "for (i = 0; i < headersCount; i++)"
    },
    {
        "line": 232,
        "fullcodeline": "if (result == HTTPAPI_OK)"
    },
    {
        "line": 98,
        "fullcodeline": "result = HTTPAPI_SET_OPTION_FAILED;"
    },
    {
        "line": 115,
        "fullcodeline": "result = HTTPAPI_SET_OPTION_FAILED;"
    },
    {
        "line": 134,
        "fullcodeline": "result = HTTPAPI_SET_OPTION_FAILED;"
    },
    {
        "line": 151,
        "fullcodeline": "result = HTTPAPI_SET_OPTION_FAILED;"
    },
    {
        "line": 167,
        "fullcodeline": "result = HTTPAPI_SET_OPTION_FAILED;"
    },
    {
        "line": 183,
        "fullcodeline": "result = HTTPAPI_SET_OPTION_FAILED;"
    },
    {
        "line": 207,
        "fullcodeline": "if (HTTPHeaders_GetHeader(httpHeadersHandle, i, &tempBuffer) != HTTP_HEADERS_OK)"
    },
    {
        "line": 234,
        "fullcodeline": "if (curl_easy_setopt(httpHandleData->curl, CURLOPT_HTTPHEADER, headers) != CURLE_OK)"
    },
    {
        "line": 103,
        "fullcodeline": "if (curl_easy_setopt(httpHandleData->curl, CURLOPT_CUSTOMREQUEST, NULL) != CURLE_OK)"
    },
    {
        "line": 118,
        "fullcodeline": "else if (curl_easy_setopt(httpHandleData->curl, CURLOPT_NOBODY, 1L) != CURLE_OK)"
    },
    {
        "line": 139,
        "fullcodeline": "if (curl_easy_setopt(httpHandleData->curl, CURLOPT_CUSTOMREQUEST, NULL) != CURLE_OK)"
    },
    {
        "line": 156,
        "fullcodeline": "if (curl_easy_setopt(httpHandleData->curl, CURLOPT_CUSTOMREQUEST, \"PUT\") != CURLE_OK)"
    },
    {
        "line": 172,
        "fullcodeline": "if (curl_easy_setopt(httpHandleData->curl, CURLOPT_CUSTOMREQUEST, \"DELETE\") != CURLE_OK)"
    },
    {
        "line": 188,
        "fullcodeline": "if (curl_easy_setopt(httpHandleData->curl, CURLOPT_CUSTOMREQUEST, \"PATCH\") != CURLE_OK)"
    },
    {
        "line": 210,
        "fullcodeline": "result = HTTPAPI_HTTP_HEADERS_FAILED;"
    },
    {
        "line": 236,
        "fullcodeline": "result = HTTPAPI_SET_OPTION_FAILED;"
    },
    {
        "line": 105,
        "fullcodeline": "result = HTTPAPI_SET_OPTION_FAILED;"
    },
    {
        "line": 120,
        "fullcodeline": "result = HTTPAPI_SET_OPTION_FAILED;"
    },
    {
        "line": 141,
        "fullcodeline": "result = HTTPAPI_SET_OPTION_FAILED;"
    },
    {
        "line": 158,
        "fullcodeline": "result = HTTPAPI_SET_OPTION_FAILED;"
    },
    {
        "line": 174,
        "fullcodeline": "result = HTTPAPI_SET_OPTION_FAILED;"
    },
    {
        "line": 190,
        "fullcodeline": "result = HTTPAPI_SET_OPTION_FAILED;"
    },
    {
        "line": 216,
        "fullcodeline": "struct curl_slist* newHeaders = curl_slist_append(headers, tempBuffer);"
    },
    {
        "line": 217,
        "fullcodeline": "if (newHeaders == NULL)"
    },
    {
        "line": 242,
        "fullcodeline": "if ((content != NULL) &&"
    },
    {
        "line": 269,
        "fullcodeline": "if (result == HTTPAPI_OK)"
    },
    {
        "line": 123,
        "fullcodeline": "else if (curl_easy_setopt(httpHandleData->curl, CURLOPT_CUSTOMREQUEST, NULL) != CURLE_OK)"
    },
    {
        "line": 219,
        "fullcodeline": "result = HTTPAPI_ALLOC_FAILED;"
    },
    {
        "line": 221,
        "fullcodeline": "free(tempBuffer);"
    },
    {
        "line": 243,
        "fullcodeline": "(contentLength > 0))"
    },
    {
        "line": 125,
        "fullcodeline": "result = HTTPAPI_SET_OPTION_FAILED;"
    },
    {
        "line": 226,
        "fullcodeline": "free(tempBuffer);"
    },
    {
        "line": 227,
        "fullcodeline": "headers = newHeaders;"
    },
    {
        "line": 245,
        "fullcodeline": "if ((curl_easy_setopt(httpHandleData->curl, CURLOPT_POSTFIELDS, (void*)content) != CURLE_OK) ||"
    },
    {
        "line": 271,
        "fullcodeline": "if ((curl_easy_setopt(httpHandleData->curl, CURLOPT_WRITEHEADER, NULL) != CURLE_OK) ||"
    },
    {
        "line": 246,
        "fullcodeline": "(curl_easy_setopt(httpHandleData->curl, CURLOPT_POSTFIELDSIZE, contentLength) != CURLE_OK))"
    },
    {
        "line": 248,
        "fullcodeline": "result = HTTPAPI_SET_OPTION_FAILED;"
    },
    {
        "line": 254,
        "fullcodeline": "if (requestType != HTTPAPI_REQUEST_GET)"
    },
    {
        "line": 273,
        "fullcodeline": "(curl_easy_setopt(httpHandleData->curl, CURLOPT_WRITEFUNCTION, ContentWriteFunction) != CURLE_OK))"
    },
    {
        "line": 275,
        "fullcodeline": "result = HTTPAPI_SET_OPTION_FAILED;"
    },
    {
        "line": 272,
        "fullcodeline": "(curl_easy_setopt(httpHandleData->curl, CURLOPT_HEADERFUNCTION, NULL) != CURLE_OK) ||"
    },
    {
        "line": 256,
        "fullcodeline": "if ((curl_easy_setopt(httpHandleData->curl, CURLOPT_POSTFIELDS, (void*)NULL) != CURLE_OK) ||"
    },
    {
        "line": 280,
        "fullcodeline": "if (responseHeadersHandle != NULL)"
    },
    {
        "line": 291,
        "fullcodeline": "if (result == HTTPAPI_OK)"
    },
    {
        "line": 257,
        "fullcodeline": "(curl_easy_setopt(httpHandleData->curl, CURLOPT_POSTFIELDSIZE, 0) != CURLE_OK))"
    },
    {
        "line": 259,
        "fullcodeline": "result = HTTPAPI_SET_OPTION_FAILED;"
    },
    {
        "line": 293,
        "fullcodeline": "responseContentBuffer.buffer = NULL;"
    },
    {
        "line": 294,
        "fullcodeline": "responseContentBuffer.bufferSize = 0;"
    },
    {
        "line": 295,
        "fullcodeline": "responseContentBuffer.error = 0;"
    },
    {
        "line": 283,
        "fullcodeline": "if ((curl_easy_setopt(httpHandleData->curl, CURLOPT_WRITEHEADER, responseHeadersHandle) != CURLE_OK) ||"
    },
    {
        "line": 297,
        "fullcodeline": "if (curl_easy_setopt(httpHandleData->curl, CURLOPT_WRITEDATA, &responseContentBuffer) != CURLE_OK)"
    },
    {
        "line": 303,
        "fullcodeline": "if (result == HTTPAPI_OK)"
    },
    {
        "line": 363,
        "fullcodeline": "if (responseContentBuffer.buffer != NULL)"
    },
    {
        "line": 284,
        "fullcodeline": "(curl_easy_setopt(httpHandleData->curl, CURLOPT_HEADERFUNCTION, HeadersWriteFunction) != CURLE_OK))"
    },
    {
        "line": 286,
        "fullcodeline": "result = HTTPAPI_SET_OPTION_FAILED;"
    },
    {
        "line": 299,
        "fullcodeline": "result = HTTPAPI_SET_OPTION_FAILED;"
    },
    {
        "line": 306,
        "fullcodeline": "CURLcode curlRes = curl_easy_perform(httpHandleData->curl);"
    },
    {
        "line": 365,
        "fullcodeline": "free(responseContentBuffer.buffer);"
    },
    {
        "line": 307,
        "fullcodeline": "if (curlRes != CURLE_OK)"
    },
    {
        "line": 309,
        "fullcodeline": "LogError(\"curl_easy_perform() failed: %s\\n\", curl_easy_strerror(curlRes));"
    },
    {
        "line": 310,
        "fullcodeline": "result = HTTPAPI_OPEN_REQUEST_FAILED;"
    },
    {
        "line": 318,
        "fullcodeline": "if (curl_easy_getinfo(httpHandleData->curl, CURLINFO_RESPONSE_CODE, &httpCode) != CURLE_OK)"
    },
    {
        "line": 320,
        "fullcodeline": "result = HTTPAPI_QUERY_HEADERS_FAILED;"
    },
    {
        "line": 325,
        "fullcodeline": "result = HTTPAPI_READ_DATA_FAILED;"
    },
    {
        "line": 330,
        "fullcodeline": "if (statusCode != NULL)"
    },
    {
        "line": 336,
        "fullcodeline": "if (responseContent != NULL)"
    },
    {
        "line": 349,
        "fullcodeline": "if (httpCode >= 300)"
    },
    {
        "line": 332,
        "fullcodeline": "*statusCode = (unsigned int)httpCode;"
    },
    {
        "line": 351,
        "fullcodeline": "LogError(\"Failure in HTTP communication: server reply code is %ld\", httpCode);"
    },
    {
        "line": 352,
        "fullcodeline": "LogInfo(\"HTTP Response:%*.*s\", (int)responseContentBuffer.bufferSize,"
    },
    {
        "line": 338,
        "fullcodeline": "if ((responseContentBuffer.bufferSize > 0) && (BUFFER_build(responseContent, responseContentBuffer.buffer, responseContentBuffer.bufferSize) != 0))"
    },
    {
        "line": 353,
        "fullcodeline": "(int)responseContentBuffer.bufferSize, responseContentBuffer.buffer);"
    },
    {
        "line": 357,
        "fullcodeline": "result = HTTPAPI_OK;"
    },
    {
        "line": 340,
        "fullcodeline": "result = HTTPAPI_INSUFFICIENT_RESPONSE_BUFFER;"
    }
]