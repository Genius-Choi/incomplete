[
    {
        "line": 7,
        "fullcodeline": "HTTP_HANDLE_DATA* httpHandleData = (HTTP_HANDLE_DATA*)handle;"
    },
    {
        "line": 11,
        "fullcodeline": "if ((httpHandleData == NULL) ||"
    },
    {
        "line": 14,
        "fullcodeline": "((content == NULL) && (contentLength > 0))"
    },
    {
        "line": 17,
        "fullcodeline": "result = HTTPAPI_INVALID_ARG;"
    },
    {
        "line": 13,
        "fullcodeline": "(httpHeadersHandle == NULL) ||"
    },
    {
        "line": 12,
        "fullcodeline": "(relativePath == NULL) ||"
    },
    {
        "line": 20,
        "fullcodeline": "else if (HTTPHeaders_GetHeaderCount(httpHeadersHandle, &headersCount) != HTTP_HEADERS_OK)"
    },
    {
        "line": 22,
        "fullcodeline": "result = HTTPAPI_INVALID_ARG;"
    },
    {
        "line": 28,
        "fullcodeline": "size_t tempHostURL_size = safe_add_size_t(strlen(httpHandleData->hostURL), strlen(relativePath));"
    },
    {
        "line": 29,
        "fullcodeline": "tempHostURL_size = safe_add_size_t(tempHostURL_size, 1);"
    },
    {
        "line": 30,
        "fullcodeline": "if (tempHostURL_size == SIZE_MAX)"
    },
    {
        "line": 40,
        "fullcodeline": "if (tempHostURL == NULL)"
    },
    {
        "line": 32,
        "fullcodeline": "LogError(\"Invalid malloc size\");"
    },
    {
        "line": 33,
        "fullcodeline": "tempHostURL = NULL;"
    },
    {
        "line": 42,
        "fullcodeline": "result = HTTPAPI_ERROR;"
    },
    {
        "line": 37,
        "fullcodeline": "tempHostURL = malloc(tempHostURL_size);"
    },
    {
        "line": 385,
        "fullcodeline": "free(tempHostURL);"
    },
    {
        "line": 47,
        "fullcodeline": "if (curl_easy_setopt(httpHandleData->curl, CURLOPT_VERBOSE, httpHandleData->verbose) != CURLE_OK)"
    },
    {
        "line": 49,
        "fullcodeline": "result = HTTPAPI_SET_OPTION_FAILED;"
    },
    {
        "line": 52,
        "fullcodeline": "else if ((strcpy_s(tempHostURL, tempHostURL_size, httpHandleData->hostURL) != 0) ||"
    },
    {
        "line": 53,
        "fullcodeline": "(strcat_s(tempHostURL, tempHostURL_size, relativePath) != 0))"
    },
    {
        "line": 55,
        "fullcodeline": "result = HTTPAPI_STRING_PROCESSING_ERROR;"
    },
    {
        "line": 59,
        "fullcodeline": "else if (curl_easy_setopt(httpHandleData->curl, CURLOPT_URL, tempHostURL) != CURLE_OK)"
    },
    {
        "line": 61,
        "fullcodeline": "result = HTTPAPI_SET_OPTION_FAILED;"
    },
    {
        "line": 64,
        "fullcodeline": "else if (curl_easy_setopt(httpHandleData->curl, CURLOPT_TIMEOUT_MS, httpHandleData->timeout) != CURLE_OK)"
    },
    {
        "line": 66,
        "fullcodeline": "result = HTTPAPI_SET_OPTION_FAILED;"
    },
    {
        "line": 69,
        "fullcodeline": "else if (curl_easy_setopt(httpHandleData->curl, CURLOPT_LOW_SPEED_LIMIT, httpHandleData->lowSpeedLimit) != CURLE_OK)"
    },
    {
        "line": 71,
        "fullcodeline": "result = HTTPAPI_SET_OPTION_FAILED;"
    },
    {
        "line": 74,
        "fullcodeline": "else if (curl_easy_setopt(httpHandleData->curl, CURLOPT_LOW_SPEED_TIME, httpHandleData->lowSpeedTime) != CURLE_OK)"
    },
    {
        "line": 76,
        "fullcodeline": "result = HTTPAPI_SET_OPTION_FAILED;"
    },
    {
        "line": 79,
        "fullcodeline": "else if (curl_easy_setopt(httpHandleData->curl, CURLOPT_FRESH_CONNECT, httpHandleData->freshConnect) != CURLE_OK)"
    },
    {
        "line": 81,
        "fullcodeline": "result = HTTPAPI_SET_OPTION_FAILED;"
    },
    {
        "line": 84,
        "fullcodeline": "else if (curl_easy_setopt(httpHandleData->curl, CURLOPT_FORBID_REUSE, httpHandleData->forbidReuse) != CURLE_OK)"
    },
    {
        "line": 86,
        "fullcodeline": "result = HTTPAPI_SET_OPTION_FAILED;"
    },
    {
        "line": 89,
        "fullcodeline": "else if (curl_easy_setopt(httpHandleData->curl, CURLOPT_HTTP_VERSION, CURL_HTTP_VERSION_1_1) != CURLE_OK)"
    },
    {
        "line": 91,
        "fullcodeline": "result = HTTPAPI_SET_OPTION_FAILED;"
    },
    {
        "line": 96,
        "fullcodeline": "result = HTTPAPI_OK;"
    },
    {
        "line": 208,
        "fullcodeline": "if (result == HTTPAPI_OK)"
    },
    {
        "line": 101,
        "fullcodeline": "result = HTTPAPI_INVALID_ARG;"
    },
    {
        "line": 211,
        "fullcodeline": "struct curl_slist* headers = NULL;"
    },
    {
        "line": 382,
        "fullcodeline": "curl_slist_free_all(headers);"
    },
    {
        "line": 106,
        "fullcodeline": "if (curl_easy_setopt(httpHandleData->curl, CURLOPT_HTTPGET, 1L) != CURLE_OK)"
    },
    {
        "line": 123,
        "fullcodeline": "if (curl_easy_setopt(httpHandleData->curl, CURLOPT_HTTPGET, 1L) != CURLE_OK)"
    },
    {
        "line": 142,
        "fullcodeline": "if (curl_easy_setopt(httpHandleData->curl, CURLOPT_POST, 1L) != CURLE_OK)"
    },
    {
        "line": 159,
        "fullcodeline": "if (curl_easy_setopt(httpHandleData->curl, CURLOPT_POST, 1L))"
    },
    {
        "line": 175,
        "fullcodeline": "if (curl_easy_setopt(httpHandleData->curl, CURLOPT_POST, 1L) != CURLE_OK)"
    },
    {
        "line": 191,
        "fullcodeline": "if (curl_easy_setopt(httpHandleData->curl, CURLOPT_POST, 1L) != CURLE_OK)"
    },
    {
        "line": 214,
        "fullcodeline": "for (i = 0; i < headersCount; i++)"
    },
    {
        "line": 242,
        "fullcodeline": "if (result == HTTPAPI_OK)"
    },
    {
        "line": 108,
        "fullcodeline": "result = HTTPAPI_SET_OPTION_FAILED;"
    },
    {
        "line": 125,
        "fullcodeline": "result = HTTPAPI_SET_OPTION_FAILED;"
    },
    {
        "line": 144,
        "fullcodeline": "result = HTTPAPI_SET_OPTION_FAILED;"
    },
    {
        "line": 161,
        "fullcodeline": "result = HTTPAPI_SET_OPTION_FAILED;"
    },
    {
        "line": 177,
        "fullcodeline": "result = HTTPAPI_SET_OPTION_FAILED;"
    },
    {
        "line": 193,
        "fullcodeline": "result = HTTPAPI_SET_OPTION_FAILED;"
    },
    {
        "line": 217,
        "fullcodeline": "if (HTTPHeaders_GetHeader(httpHeadersHandle, i, &tempBuffer) != HTTP_HEADERS_OK)"
    },
    {
        "line": 244,
        "fullcodeline": "if (curl_easy_setopt(httpHandleData->curl, CURLOPT_HTTPHEADER, headers) != CURLE_OK)"
    },
    {
        "line": 113,
        "fullcodeline": "if (curl_easy_setopt(httpHandleData->curl, CURLOPT_CUSTOMREQUEST, NULL) != CURLE_OK)"
    },
    {
        "line": 128,
        "fullcodeline": "else if (curl_easy_setopt(httpHandleData->curl, CURLOPT_NOBODY, 1L) != CURLE_OK)"
    },
    {
        "line": 149,
        "fullcodeline": "if (curl_easy_setopt(httpHandleData->curl, CURLOPT_CUSTOMREQUEST, NULL) != CURLE_OK)"
    },
    {
        "line": 166,
        "fullcodeline": "if (curl_easy_setopt(httpHandleData->curl, CURLOPT_CUSTOMREQUEST, \"PUT\") != CURLE_OK)"
    },
    {
        "line": 182,
        "fullcodeline": "if (curl_easy_setopt(httpHandleData->curl, CURLOPT_CUSTOMREQUEST, \"DELETE\") != CURLE_OK)"
    },
    {
        "line": 198,
        "fullcodeline": "if (curl_easy_setopt(httpHandleData->curl, CURLOPT_CUSTOMREQUEST, \"PATCH\") != CURLE_OK)"
    },
    {
        "line": 220,
        "fullcodeline": "result = HTTPAPI_HTTP_HEADERS_FAILED;"
    },
    {
        "line": 246,
        "fullcodeline": "result = HTTPAPI_SET_OPTION_FAILED;"
    },
    {
        "line": 115,
        "fullcodeline": "result = HTTPAPI_SET_OPTION_FAILED;"
    },
    {
        "line": 130,
        "fullcodeline": "result = HTTPAPI_SET_OPTION_FAILED;"
    },
    {
        "line": 151,
        "fullcodeline": "result = HTTPAPI_SET_OPTION_FAILED;"
    },
    {
        "line": 168,
        "fullcodeline": "result = HTTPAPI_SET_OPTION_FAILED;"
    },
    {
        "line": 184,
        "fullcodeline": "result = HTTPAPI_SET_OPTION_FAILED;"
    },
    {
        "line": 200,
        "fullcodeline": "result = HTTPAPI_SET_OPTION_FAILED;"
    },
    {
        "line": 226,
        "fullcodeline": "struct curl_slist* newHeaders = curl_slist_append(headers, tempBuffer);"
    },
    {
        "line": 227,
        "fullcodeline": "if (newHeaders == NULL)"
    },
    {
        "line": 252,
        "fullcodeline": "if ((content != NULL) &&"
    },
    {
        "line": 279,
        "fullcodeline": "if (result == HTTPAPI_OK)"
    },
    {
        "line": 133,
        "fullcodeline": "else if (curl_easy_setopt(httpHandleData->curl, CURLOPT_CUSTOMREQUEST, NULL) != CURLE_OK)"
    },
    {
        "line": 229,
        "fullcodeline": "result = HTTPAPI_ALLOC_FAILED;"
    },
    {
        "line": 231,
        "fullcodeline": "free(tempBuffer);"
    },
    {
        "line": 253,
        "fullcodeline": "(contentLength > 0))"
    },
    {
        "line": 135,
        "fullcodeline": "result = HTTPAPI_SET_OPTION_FAILED;"
    },
    {
        "line": 236,
        "fullcodeline": "free(tempBuffer);"
    },
    {
        "line": 237,
        "fullcodeline": "headers = newHeaders;"
    },
    {
        "line": 255,
        "fullcodeline": "if ((curl_easy_setopt(httpHandleData->curl, CURLOPT_POSTFIELDS, (void*)content) != CURLE_OK) ||"
    },
    {
        "line": 281,
        "fullcodeline": "if ((curl_easy_setopt(httpHandleData->curl, CURLOPT_WRITEHEADER, NULL) != CURLE_OK) ||"
    },
    {
        "line": 256,
        "fullcodeline": "(curl_easy_setopt(httpHandleData->curl, CURLOPT_POSTFIELDSIZE, contentLength) != CURLE_OK))"
    },
    {
        "line": 258,
        "fullcodeline": "result = HTTPAPI_SET_OPTION_FAILED;"
    },
    {
        "line": 264,
        "fullcodeline": "if (requestType != HTTPAPI_REQUEST_GET)"
    },
    {
        "line": 283,
        "fullcodeline": "(curl_easy_setopt(httpHandleData->curl, CURLOPT_WRITEFUNCTION, ContentWriteFunction) != CURLE_OK))"
    },
    {
        "line": 285,
        "fullcodeline": "result = HTTPAPI_SET_OPTION_FAILED;"
    },
    {
        "line": 282,
        "fullcodeline": "(curl_easy_setopt(httpHandleData->curl, CURLOPT_HEADERFUNCTION, NULL) != CURLE_OK) ||"
    },
    {
        "line": 266,
        "fullcodeline": "if ((curl_easy_setopt(httpHandleData->curl, CURLOPT_POSTFIELDS, (void*)NULL) != CURLE_OK) ||"
    },
    {
        "line": 290,
        "fullcodeline": "if (responseHeadersHandle != NULL)"
    },
    {
        "line": 301,
        "fullcodeline": "if (result == HTTPAPI_OK)"
    },
    {
        "line": 267,
        "fullcodeline": "(curl_easy_setopt(httpHandleData->curl, CURLOPT_POSTFIELDSIZE, 0) != CURLE_OK))"
    },
    {
        "line": 269,
        "fullcodeline": "result = HTTPAPI_SET_OPTION_FAILED;"
    },
    {
        "line": 303,
        "fullcodeline": "responseContentBuffer.buffer = NULL;"
    },
    {
        "line": 304,
        "fullcodeline": "responseContentBuffer.bufferSize = 0;"
    },
    {
        "line": 305,
        "fullcodeline": "responseContentBuffer.error = 0;"
    },
    {
        "line": 293,
        "fullcodeline": "if ((curl_easy_setopt(httpHandleData->curl, CURLOPT_WRITEHEADER, responseHeadersHandle) != CURLE_OK) ||"
    },
    {
        "line": 307,
        "fullcodeline": "if (curl_easy_setopt(httpHandleData->curl, CURLOPT_WRITEDATA, &responseContentBuffer) != CURLE_OK)"
    },
    {
        "line": 313,
        "fullcodeline": "if (result == HTTPAPI_OK)"
    },
    {
        "line": 373,
        "fullcodeline": "if (responseContentBuffer.buffer != NULL)"
    },
    {
        "line": 294,
        "fullcodeline": "(curl_easy_setopt(httpHandleData->curl, CURLOPT_HEADERFUNCTION, HeadersWriteFunction) != CURLE_OK))"
    },
    {
        "line": 296,
        "fullcodeline": "result = HTTPAPI_SET_OPTION_FAILED;"
    },
    {
        "line": 309,
        "fullcodeline": "result = HTTPAPI_SET_OPTION_FAILED;"
    },
    {
        "line": 316,
        "fullcodeline": "CURLcode curlRes = curl_easy_perform(httpHandleData->curl);"
    },
    {
        "line": 375,
        "fullcodeline": "free(responseContentBuffer.buffer);"
    },
    {
        "line": 317,
        "fullcodeline": "if (curlRes != CURLE_OK)"
    },
    {
        "line": 319,
        "fullcodeline": "LogError(\"curl_easy_perform() failed: %s\\n\", curl_easy_strerror(curlRes));"
    },
    {
        "line": 320,
        "fullcodeline": "result = HTTPAPI_OPEN_REQUEST_FAILED;"
    },
    {
        "line": 328,
        "fullcodeline": "if (curl_easy_getinfo(httpHandleData->curl, CURLINFO_RESPONSE_CODE, &httpCode) != CURLE_OK)"
    },
    {
        "line": 330,
        "fullcodeline": "result = HTTPAPI_QUERY_HEADERS_FAILED;"
    },
    {
        "line": 335,
        "fullcodeline": "result = HTTPAPI_READ_DATA_FAILED;"
    },
    {
        "line": 340,
        "fullcodeline": "if (statusCode != NULL)"
    },
    {
        "line": 346,
        "fullcodeline": "if (responseContent != NULL)"
    },
    {
        "line": 359,
        "fullcodeline": "if (httpCode >= 300)"
    },
    {
        "line": 342,
        "fullcodeline": "*statusCode = (unsigned int)httpCode;"
    },
    {
        "line": 361,
        "fullcodeline": "LogError(\"Failure in HTTP communication: server reply code is %ld\", httpCode);"
    },
    {
        "line": 362,
        "fullcodeline": "LogInfo(\"HTTP Response:%*.*s\", (int)responseContentBuffer.bufferSize,"
    },
    {
        "line": 348,
        "fullcodeline": "if ((responseContentBuffer.bufferSize > 0) && (BUFFER_build(responseContent, responseContentBuffer.buffer, responseContentBuffer.bufferSize) != 0))"
    },
    {
        "line": 363,
        "fullcodeline": "(int)responseContentBuffer.bufferSize, responseContentBuffer.buffer);"
    },
    {
        "line": 367,
        "fullcodeline": "result = HTTPAPI_OK;"
    },
    {
        "line": 350,
        "fullcodeline": "result = HTTPAPI_INSUFFICIENT_RESPONSE_BUFFER;"
    }
]