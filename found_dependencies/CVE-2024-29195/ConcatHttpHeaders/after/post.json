[
    {
        "line": 6,
        "fullcodeline": "size_t malloc_size = safe_multiply_size_t(toAlloc, sizeof(char));"
    },
    {
        "line": 7,
        "fullcodeline": "malloc_size = safe_add_size_t(malloc_size, 1);"
    },
    {
        "line": 8,
        "fullcodeline": "if (malloc_size == SIZE_MAX)"
    },
    {
        "line": 18,
        "fullcodeline": "if (result == NULL)"
    },
    {
        "line": 10,
        "fullcodeline": "LogError(\"Invalid malloc size\");"
    },
    {
        "line": 11,
        "fullcodeline": "result = NULL;"
    },
    {
        "line": 20,
        "fullcodeline": "LogError(\"unable to malloc\");"
    },
    {
        "line": 15,
        "fullcodeline": "result = (char*)malloc(malloc_size);"
    },
    {
        "line": 24,
        "fullcodeline": "result[0] = '\\0';"
    },
    {
        "line": 25,
        "fullcodeline": "for (i = 0; i < headersCount; i++)"
    },
    {
        "line": 41,
        "fullcodeline": "if (i < headersCount)"
    },
    {
        "line": 43,
        "fullcodeline": "free(result);"
    },
    {
        "line": 44,
        "fullcodeline": "result = NULL;"
    },
    {
        "line": 28,
        "fullcodeline": "if (HTTPHeaders_GetHeader(httpHeadersHandle, i, &temp) != HTTP_HEADERS_OK)"
    },
    {
        "line": 30,
        "fullcodeline": "LogError(\"unable to HTTPHeaders_GetHeader\");"
    },
    {
        "line": 35,
        "fullcodeline": "(void)strcat(result, temp);"
    },
    {
        "line": 36,
        "fullcodeline": "(void)strcat(result, \"\\r\\n\");"
    },
    {
        "line": 37,
        "fullcodeline": "free(temp);"
    }
]