[
    {
        "line": 3,
        "fullcodeline": "char *result = (char*)malloc(toAlloc * sizeof(char) + 1);"
    },
    {
        "line": 6,
        "fullcodeline": "if (result == NULL)"
    },
    {
        "line": 8,
        "fullcodeline": "LogError(\"unable to malloc\");"
    },
    {
        "line": 12,
        "fullcodeline": "result[0] = '\\0';"
    },
    {
        "line": 13,
        "fullcodeline": "for (i = 0; i < headersCount; i++)"
    },
    {
        "line": 29,
        "fullcodeline": "if (i < headersCount)"
    },
    {
        "line": 31,
        "fullcodeline": "free(result);"
    },
    {
        "line": 32,
        "fullcodeline": "result = NULL;"
    },
    {
        "line": 16,
        "fullcodeline": "if (HTTPHeaders_GetHeader(httpHeadersHandle, i, &temp) != HTTP_HEADERS_OK)"
    },
    {
        "line": 18,
        "fullcodeline": "LogError(\"unable to HTTPHeaders_GetHeader\");"
    },
    {
        "line": 23,
        "fullcodeline": "(void)strcat(result, temp);"
    },
    {
        "line": 24,
        "fullcodeline": "(void)strcat(result, \"\\r\\n\");"
    },
    {
        "line": 25,
        "fullcodeline": "free(temp);"
    }
]