[
    {
        "line": 5,
        "fullcodeline": "if (socket_io == NULL ||"
    },
    {
        "line": 7,
        "fullcodeline": "value == NULL)"
    },
    {
        "line": 9,
        "fullcodeline": "result = MU_FAILURE;"
    },
    {
        "line": 6,
        "fullcodeline": "optionName == NULL ||"
    },
    {
        "line": 13,
        "fullcodeline": "SOCKET_IO_INSTANCE* socket_io_instance = (SOCKET_IO_INSTANCE*)socket_io;"
    },
    {
        "line": 15,
        "fullcodeline": "if (strcmp(optionName, \"tcp_keepalive\") == 0)"
    },
    {
        "line": 17,
        "fullcodeline": "result = setsockopt(socket_io_instance->socket, SOL_SOCKET, SO_KEEPALIVE, value, sizeof(int));"
    },
    {
        "line": 18,
        "fullcodeline": "if (result == -1) result = errno;"
    },
    {
        "line": 20,
        "fullcodeline": "else if (strcmp(optionName, \"tcp_keepalive_time\") == 0)"
    },
    {
        "line": 25,
        "fullcodeline": "result = setsockopt(socket_io_instance->socket, SOL_TCP, TCP_KEEPIDLE, value, sizeof(int));"
    },
    {
        "line": 27,
        "fullcodeline": "if (result == -1) result = errno;"
    },
    {
        "line": 29,
        "fullcodeline": "else if (strcmp(optionName, \"tcp_keepalive_interval\") == 0)"
    },
    {
        "line": 31,
        "fullcodeline": "result = setsockopt(socket_io_instance->socket, SOL_TCP, TCP_KEEPINTVL, value, sizeof(int));"
    },
    {
        "line": 32,
        "fullcodeline": "if (result == -1) result = errno;"
    },
    {
        "line": 34,
        "fullcodeline": "else if (strcmp(optionName, OPTION_NET_INT_MAC_ADDRESS) == 0)"
    },
    {
        "line": 41,
        "fullcodeline": "if (strlen(value) == 0)"
    },
    {
        "line": 43,
        "fullcodeline": "LogError(\"option value must be a valid mac address\");"
    },
    {
        "line": 44,
        "fullcodeline": "result = MU_FAILURE;"
    },
    {
        "line": 65,
        "fullcodeline": "else if (strcmp(optionName, OPTION_ADDRESS_TYPE) == 0)"
    },
    {
        "line": 67,
        "fullcodeline": "result = socketio_setaddresstype_option(socket_io_instance, (const char*)value);"
    },
    {
        "line": 46,
        "fullcodeline": "else if ((malloc_size = safe_multiply_size_t(safe_add_size_t(strlen(value), 1), sizeof(char))) == SIZE_MAX)"
    },
    {
        "line": 71,
        "fullcodeline": "result = MU_FAILURE;"
    },
    {
        "line": 48,
        "fullcodeline": "LogError(\"invalid malloc size\");"
    },
    {
        "line": 49,
        "fullcodeline": "result = MU_FAILURE;"
    },
    {
        "line": 50,
        "fullcodeline": "socket_io_instance->target_mac_address = NULL;"
    },
    {
        "line": 52,
        "fullcodeline": "else if ((socket_io_instance->target_mac_address = (char*)malloc(malloc_size)) == NULL)"
    },
    {
        "line": 54,
        "fullcodeline": "LogError(\"failed setting net_interface_mac_address option (malloc failed)\");"
    },
    {
        "line": 55,
        "fullcodeline": "result = MU_FAILURE;"
    },
    {
        "line": 59,
        "fullcodeline": "strcpy(socket_io_instance->target_mac_address, value);"
    },
    {
        "line": 60,
        "fullcodeline": "strtoup(socket_io_instance->target_mac_address);"
    },
    {
        "line": 61,
        "fullcodeline": "result = 0;"
    }
]