[
    {
        "line": 5,
        "fullcodeline": "if (socket_io == NULL ||"
    },
    {
        "line": 7,
        "fullcodeline": "value == NULL)"
    },
    {
        "line": 9,
        "fullcodeline": "result = MU_FAILURE;"
    },
    {
        "line": 6,
        "fullcodeline": "optionName == NULL ||"
    },
    {
        "line": 13,
        "fullcodeline": "SOCKET_IO_INSTANCE* socket_io_instance = (SOCKET_IO_INSTANCE*)socket_io;"
    },
    {
        "line": 15,
        "fullcodeline": "if (strcmp(optionName, \"tcp_keepalive\") == 0)"
    },
    {
        "line": 17,
        "fullcodeline": "result = setsockopt(socket_io_instance->socket, SOL_SOCKET, SO_KEEPALIVE, value, sizeof(int));"
    },
    {
        "line": 18,
        "fullcodeline": "if (result == -1) result = errno;"
    },
    {
        "line": 20,
        "fullcodeline": "else if (strcmp(optionName, \"tcp_keepalive_time\") == 0)"
    },
    {
        "line": 25,
        "fullcodeline": "result = setsockopt(socket_io_instance->socket, SOL_TCP, TCP_KEEPIDLE, value, sizeof(int));"
    },
    {
        "line": 27,
        "fullcodeline": "if (result == -1) result = errno;"
    },
    {
        "line": 29,
        "fullcodeline": "else if (strcmp(optionName, \"tcp_keepalive_interval\") == 0)"
    },
    {
        "line": 31,
        "fullcodeline": "result = setsockopt(socket_io_instance->socket, SOL_TCP, TCP_KEEPINTVL, value, sizeof(int));"
    },
    {
        "line": 32,
        "fullcodeline": "if (result == -1) result = errno;"
    },
    {
        "line": 34,
        "fullcodeline": "else if (strcmp(optionName, OPTION_NET_INT_MAC_ADDRESS) == 0)"
    },
    {
        "line": 40,
        "fullcodeline": "if (strlen(value) == 0)"
    },
    {
        "line": 42,
        "fullcodeline": "LogError(\"option value must be a valid mac address\");"
    },
    {
        "line": 43,
        "fullcodeline": "result = MU_FAILURE;"
    },
    {
        "line": 58,
        "fullcodeline": "else if (strcmp(optionName, OPTION_ADDRESS_TYPE) == 0)"
    },
    {
        "line": 60,
        "fullcodeline": "result = socketio_setaddresstype_option(socket_io_instance, (const char*)value);"
    },
    {
        "line": 45,
        "fullcodeline": "else if ((socket_io_instance->target_mac_address = (char*)malloc(sizeof(char) * (strlen(value) + 1))) == NULL)"
    },
    {
        "line": 64,
        "fullcodeline": "result = MU_FAILURE;"
    },
    {
        "line": 47,
        "fullcodeline": "LogError(\"failed setting net_interface_mac_address option (malloc failed)\");"
    },
    {
        "line": 48,
        "fullcodeline": "result = MU_FAILURE;"
    },
    {
        "line": 52,
        "fullcodeline": "strcpy(socket_io_instance->target_mac_address, value);"
    },
    {
        "line": 53,
        "fullcodeline": "strtoup(socket_io_instance->target_mac_address);"
    },
    {
        "line": 54,
        "fullcodeline": "result = 0;"
    }
]