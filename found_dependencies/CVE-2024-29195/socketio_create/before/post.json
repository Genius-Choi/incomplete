[
    {
        "line": 3,
        "fullcodeline": "SOCKETIO_CONFIG* socket_io_config = io_create_parameters;"
    },
    {
        "line": 6,
        "fullcodeline": "if (socket_io_config == NULL)"
    },
    {
        "line": 8,
        "fullcodeline": "LogError(\"Invalid argument: socket_io_config is NULL\");"
    },
    {
        "line": 9,
        "fullcodeline": "result = NULL;"
    },
    {
        "line": 14,
        "fullcodeline": "if (result != NULL)"
    },
    {
        "line": 16,
        "fullcodeline": "(void)memset(result, 0, sizeof(SOCKET_IO_INSTANCE));"
    },
    {
        "line": 18,
        "fullcodeline": "result->address_type = ADDRESS_TYPE_IP;"
    },
    {
        "line": 19,
        "fullcodeline": "result->pending_io_list = singlylinkedlist_create();"
    },
    {
        "line": 20,
        "fullcodeline": "if (result->pending_io_list == NULL)"
    },
    {
        "line": 66,
        "fullcodeline": "LogError(\"Allocation Failure: SOCKET_IO_INSTANCE\");"
    },
    {
        "line": 22,
        "fullcodeline": "LogError(\"Failure: singlylinkedlist_create unable to create pending list.\");"
    },
    {
        "line": 23,
        "fullcodeline": "destroy_socket_io_instance(result);"
    },
    {
        "line": 24,
        "fullcodeline": "result = NULL;"
    },
    {
        "line": 28,
        "fullcodeline": "if (socket_io_config->hostname != NULL)"
    },
    {
        "line": 44,
        "fullcodeline": "if ((result->hostname == NULL) && (result->socket == INVALID_SOCKET))"
    },
    {
        "line": 30,
        "fullcodeline": "result->hostname = (char*)malloc(strlen(socket_io_config->hostname) + 1);"
    },
    {
        "line": 36,
        "fullcodeline": "result->socket = INVALID_SOCKET;"
    },
    {
        "line": 46,
        "fullcodeline": "LogError(\"Failure: hostname == NULL and socket is invalid.\");"
    },
    {
        "line": 47,
        "fullcodeline": "destroy_socket_io_instance(result);"
    },
    {
        "line": 48,
        "fullcodeline": "result = NULL;"
    },
    {
        "line": 31,
        "fullcodeline": "if (result->hostname != NULL)"
    },
    {
        "line": 40,
        "fullcodeline": "result->hostname = NULL;"
    },
    {
        "line": 52,
        "fullcodeline": "result->port = socket_io_config->port;"
    },
    {
        "line": 53,
        "fullcodeline": "result->on_io_open_complete = NULL;"
    },
    {
        "line": 54,
        "fullcodeline": "result->dns_resolver = dns_resolver_create(result->hostname, socket_io_config->port, NULL);"
    },
    {
        "line": 55,
        "fullcodeline": "result->target_mac_address = NULL;"
    },
    {
        "line": 56,
        "fullcodeline": "result->on_bytes_received = NULL;"
    },
    {
        "line": 57,
        "fullcodeline": "result->on_io_error = NULL;"
    },
    {
        "line": 58,
        "fullcodeline": "result->on_bytes_received_context = NULL;"
    },
    {
        "line": 59,
        "fullcodeline": "result->on_io_error_context = NULL;"
    },
    {
        "line": 60,
        "fullcodeline": "result->io_state = IO_STATE_CLOSED;"
    },
    {
        "line": 33,
        "fullcodeline": "(void)strcpy(result->hostname, socket_io_config->hostname);"
    },
    {
        "line": 41,
        "fullcodeline": "result->socket = *((int*)socket_io_config->accepted_socket);"
    }
]