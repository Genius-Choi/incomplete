[
    {
        "line": 5,
        "fullcodeline": "if (hostName == NULL)"
    },
    {
        "line": 120,
        "fullcodeline": "return (HTTP_HANDLE)httpHandleData;"
    },
    {
        "line": 7,
        "fullcodeline": "LogError(\"invalid arg const char* hostName = %p\", hostName);"
    },
    {
        "line": 8,
        "fullcodeline": "httpHandleData = NULL;"
    },
    {
        "line": 13,
        "fullcodeline": "if (httpHandleData != NULL)"
    },
    {
        "line": 15,
        "fullcodeline": "size_t hostURL_size = safe_add_size_t(strlen(\"https://\"), strlen(hostName));"
    },
    {
        "line": 16,
        "fullcodeline": "hostURL_size = safe_add_size_t(hostURL_size, 1);"
    },
    {
        "line": 18,
        "fullcodeline": "if (hostURL_size == SIZE_MAX)"
    },
    {
        "line": 28,
        "fullcodeline": "if (httpHandleData->hostURL == NULL)"
    },
    {
        "line": 20,
        "fullcodeline": "LogError(\"invalid malloc size\");"
    },
    {
        "line": 21,
        "fullcodeline": "httpHandleData->hostURL = NULL;"
    },
    {
        "line": 30,
        "fullcodeline": "LogError(\"unable to malloc\");"
    },
    {
        "line": 31,
        "fullcodeline": "free(httpHandleData);"
    },
    {
        "line": 32,
        "fullcodeline": "httpHandleData = NULL;"
    },
    {
        "line": 25,
        "fullcodeline": "httpHandleData->hostURL = malloc(hostURL_size);"
    },
    {
        "line": 34,
        "fullcodeline": "else if ((strcpy_s(httpHandleData->hostURL, hostURL_size, \"https://\") != 0) ||"
    },
    {
        "line": 35,
        "fullcodeline": "(strcat_s(httpHandleData->hostURL, hostURL_size, hostName) != 0))"
    },
    {
        "line": 37,
        "fullcodeline": "LogError(\"unable to set hostURL\");"
    },
    {
        "line": 38,
        "fullcodeline": "free(httpHandleData->hostURL);"
    },
    {
        "line": 39,
        "fullcodeline": "free(httpHandleData);"
    },
    {
        "line": 40,
        "fullcodeline": "httpHandleData = NULL;"
    },
    {
        "line": 42,
        "fullcodeline": "else if ((httpHandleData->curl = curl_easy_init()) == NULL)"
    },
    {
        "line": 44,
        "fullcodeline": "LogError(\"unable to init cURL structure\");"
    },
    {
        "line": 45,
        "fullcodeline": "free(httpHandleData->hostURL);"
    },
    {
        "line": 46,
        "fullcodeline": "free(httpHandleData);"
    },
    {
        "line": 47,
        "fullcodeline": "httpHandleData = NULL;"
    },
    {
        "line": 92,
        "fullcodeline": "LogInfo(\"If using SecureTransport with the C SDK, please confirm cURL is also configured to use SecureTransport.\");"
    },
    {
        "line": 94,
        "fullcodeline": "httpHandleData->timeout = 242 * 1000; /*242 seconds seems like a nice enough time. Reasone for 242:"
    },
    {
        "line": 97,
        "fullcodeline": "httpHandleData->lowSpeedTime = 0;"
    },
    {
        "line": 98,
        "fullcodeline": "httpHandleData->lowSpeedLimit = 0;"
    },
    {
        "line": 99,
        "fullcodeline": "httpHandleData->forbidReuse = 0;"
    },
    {
        "line": 100,
        "fullcodeline": "httpHandleData->freshConnect = 0;"
    },
    {
        "line": 101,
        "fullcodeline": "httpHandleData->verbose = 0;"
    },
    {
        "line": 102,
        "fullcodeline": "httpHandleData->x509certificate = NULL;"
    },
    {
        "line": 103,
        "fullcodeline": "httpHandleData->x509privatekey = NULL;"
    },
    {
        "line": 104,
        "fullcodeline": "httpHandleData->certificates = NULL;"
    }
]