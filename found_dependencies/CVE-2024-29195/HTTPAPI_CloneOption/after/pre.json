[
    {
        "line": 8,
        "fullcodeline": "(optionName == NULL) ||"
    },
    {
        "line": 10,
        "fullcodeline": "(savedValue == NULL)"
    },
    {
        "line": 16,
        "fullcodeline": "result = HTTPAPI_INVALID_ARG;"
    },
    {
        "line": 9,
        "fullcodeline": "(value == NULL) ||"
    },
    {
        "line": 18,
        "fullcodeline": "else if (strcmp(OPTION_TRUSTED_CERT, optionName) == 0)"
    },
    {
        "line": 24,
        "fullcodeline": "certLen = strlen((const char*)value);"
    },
    {
        "line": 25,
        "fullcodeline": "size_t malloc_size = safe_add_size_t(certLen, 1);"
    },
    {
        "line": 26,
        "fullcodeline": "malloc_size = safe_multiply_size_t(malloc_size, sizeof(char));"
    },
    {
        "line": 27,
        "fullcodeline": "if (malloc_size == SIZE_MAX)"
    },
    {
        "line": 36,
        "fullcodeline": "if (tempCert == NULL)"
    },
    {
        "line": 29,
        "fullcodeline": "tempCert = NULL;"
    },
    {
        "line": 39,
        "fullcodeline": "result = HTTPAPI_ALLOC_FAILED;"
    },
    {
        "line": 50,
        "fullcodeline": "else if (strcmp(SU_OPTION_X509_CERT, optionName) == 0 || strcmp(OPTION_X509_ECC_CERT, optionName) == 0)"
    },
    {
        "line": 33,
        "fullcodeline": "tempCert = (char*)malloc(malloc_size);"
    },
    {
        "line": 44,
        "fullcodeline": "(void)strcpy(tempCert, (const char*)value);"
    },
    {
        "line": 45,
        "fullcodeline": "*savedValue = tempCert;"
    },
    {
        "line": 46,
        "fullcodeline": "result = HTTPAPI_OK;"
    },
    {
        "line": 52,
        "fullcodeline": "certLen = strlen((const char*)value);"
    },
    {
        "line": 53,
        "fullcodeline": "size_t malloc_size = safe_add_size_t(certLen, 1);"
    },
    {
        "line": 54,
        "fullcodeline": "malloc_size = safe_multiply_size_t(malloc_size, sizeof(char));"
    },
    {
        "line": 55,
        "fullcodeline": "if (malloc_size == SIZE_MAX)"
    },
    {
        "line": 65,
        "fullcodeline": "if (tempCert == NULL)"
    },
    {
        "line": 57,
        "fullcodeline": "LogError(\"Invalid malloc size\");"
    },
    {
        "line": 58,
        "fullcodeline": "tempCert = NULL;"
    },
    {
        "line": 68,
        "fullcodeline": "result = HTTPAPI_ALLOC_FAILED;"
    },
    {
        "line": 78,
        "fullcodeline": "else if (strcmp(SU_OPTION_X509_PRIVATE_KEY, optionName) == 0 || strcmp(OPTION_X509_ECC_KEY, optionName) == 0)"
    },
    {
        "line": 62,
        "fullcodeline": "tempCert = (char*)malloc(malloc_size);"
    },
    {
        "line": 73,
        "fullcodeline": "(void)strcpy(tempCert, (const char*)value);"
    },
    {
        "line": 74,
        "fullcodeline": "*savedValue = tempCert;"
    },
    {
        "line": 75,
        "fullcodeline": "result = HTTPAPI_OK;"
    },
    {
        "line": 80,
        "fullcodeline": "certLen = strlen((const char*)value);"
    },
    {
        "line": 81,
        "fullcodeline": "size_t malloc_size = safe_add_size_t(certLen, 1);"
    },
    {
        "line": 82,
        "fullcodeline": "malloc_size = safe_multiply_size_t(malloc_size, sizeof(char));"
    },
    {
        "line": 83,
        "fullcodeline": "if (malloc_size == SIZE_MAX)"
    },
    {
        "line": 93,
        "fullcodeline": "if (tempCert == NULL)"
    },
    {
        "line": 85,
        "fullcodeline": "LogError(\"Invalid malloc size\");"
    },
    {
        "line": 86,
        "fullcodeline": "tempCert = NULL;"
    },
    {
        "line": 96,
        "fullcodeline": "result = HTTPAPI_ALLOC_FAILED;"
    },
    {
        "line": 106,
        "fullcodeline": "else if (strcmp(OPTION_HTTP_PROXY, optionName) == 0)"
    },
    {
        "line": 90,
        "fullcodeline": "tempCert = (char*)malloc(malloc_size);"
    },
    {
        "line": 101,
        "fullcodeline": "(void)strcpy(tempCert, (const char*)value);"
    },
    {
        "line": 102,
        "fullcodeline": "*savedValue = tempCert;"
    },
    {
        "line": 103,
        "fullcodeline": "result = HTTPAPI_OK;"
    },
    {
        "line": 108,
        "fullcodeline": "HTTP_PROXY_OPTIONS* proxy_data = (HTTP_PROXY_OPTIONS*)value;"
    },
    {
        "line": 110,
        "fullcodeline": "HTTP_PROXY_OPTIONS* new_proxy_info = malloc(sizeof(HTTP_PROXY_OPTIONS));"
    },
    {
        "line": 111,
        "fullcodeline": "if (new_proxy_info == NULL)"
    },
    {
        "line": 113,
        "fullcodeline": "LogError(\"unable to allocate proxy option information\");"
    },
    {
        "line": 114,
        "fullcodeline": "result = HTTPAPI_ERROR;"
    },
    {
        "line": 126,
        "fullcodeline": "else if (strcmp(OPTION_SET_TLS_RENEGOTIATION, optionName) == 0)"
    },
    {
        "line": 118,
        "fullcodeline": "new_proxy_info->host_address = proxy_data->host_address;"
    },
    {
        "line": 119,
        "fullcodeline": "new_proxy_info->port = proxy_data->port;"
    },
    {
        "line": 120,
        "fullcodeline": "new_proxy_info->password = proxy_data->password;"
    },
    {
        "line": 121,
        "fullcodeline": "new_proxy_info->username = proxy_data->username;"
    },
    {
        "line": 122,
        "fullcodeline": "*savedValue = new_proxy_info;"
    },
    {
        "line": 123,
        "fullcodeline": "result = HTTPAPI_OK;"
    },
    {
        "line": 128,
        "fullcodeline": "bool* temp = (bool*)malloc(sizeof(bool)); /*shall be freed by HTTPAPIEX_Destroy*/"
    },
    {
        "line": 129,
        "fullcodeline": "if (temp == NULL)"
    },
    {
        "line": 144,
        "fullcodeline": "result = HTTPAPI_INVALID_ARG;"
    },
    {
        "line": 145,
        "fullcodeline": "LogInfo(\"unknown option %s\", optionName);"
    },
    {
        "line": 131,
        "fullcodeline": "result = HTTPAPI_ERROR;"
    },
    {
        "line": 136,
        "fullcodeline": "*temp = *(bool*)value;"
    },
    {
        "line": 137,
        "fullcodeline": "*savedValue = temp;"
    },
    {
        "line": 138,
        "fullcodeline": "result = HTTPAPI_OK;"
    }
]