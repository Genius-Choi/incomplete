[
    {
        "line": 3,
        "fullcodeline": "TLSIO_CONFIG* tls_io_config = (TLSIO_CONFIG *) io_create_parameters;"
    },
    {
        "line": 6,
        "fullcodeline": "if (tls_io_config == NULL)"
    },
    {
        "line": 8,
        "fullcodeline": "LogError(\"invalid argument detected: void* io_create_parameters = %p\", tls_io_config);"
    },
    {
        "line": 9,
        "fullcodeline": "result = NULL;"
    },
    {
        "line": 13,
        "fullcodeline": "result = (TLS_IO_INSTANCE*)malloc(sizeof(TLS_IO_INSTANCE));"
    },
    {
        "line": 14,
        "fullcodeline": "if (result == NULL)"
    },
    {
        "line": 16,
        "fullcodeline": "LogError(\"malloc failed\");"
    },
    {
        "line": 20,
        "fullcodeline": "(void)memset(result, 0, sizeof(TLS_IO_INSTANCE));"
    },
    {
        "line": 22,
        "fullcodeline": "result->host_name = (SEC_TCHAR*)malloc(sizeof(SEC_TCHAR) * (1 + strlen(tls_io_config->hostname)));"
    },
    {
        "line": 23,
        "fullcodeline": "if (result->host_name == NULL)"
    },
    {
        "line": 25,
        "fullcodeline": "LogError(\"malloc failed\");"
    },
    {
        "line": 27,
        "fullcodeline": "result = NULL;"
    },
    {
        "line": 35,
        "fullcodeline": "(void)strcpy(result->host_name, tls_io_config->hostname);"
    },
    {
        "line": 37,
        "fullcodeline": "if (tls_io_config->underlying_io_interface != NULL)"
    },
    {
        "line": 52,
        "fullcodeline": "if (underlying_io_interface == NULL)"
    },
    {
        "line": 39,
        "fullcodeline": "underlying_io_interface = tls_io_config->underlying_io_interface;"
    },
    {
        "line": 40,
        "fullcodeline": "io_interface_parameters = tls_io_config->underlying_io_parameters;"
    },
    {
        "line": 54,
        "fullcodeline": "LogError(\"socketio_get_interface_description failed\");"
    },
    {
        "line": 55,
        "fullcodeline": "free(result->host_name);"
    },
    {
        "line": 57,
        "fullcodeline": "result = NULL;"
    },
    {
        "line": 44,
        "fullcodeline": "socketio_config.hostname = tls_io_config->hostname;"
    },
    {
        "line": 45,
        "fullcodeline": "socketio_config.port = tls_io_config->port;"
    },
    {
        "line": 46,
        "fullcodeline": "socketio_config.accepted_socket = NULL;"
    },
    {
        "line": 48,
        "fullcodeline": "underlying_io_interface = socketio_get_interface_description();"
    },
    {
        "line": 49,
        "fullcodeline": "io_interface_parameters = &socketio_config;"
    },
    {
        "line": 61,
        "fullcodeline": "result->socket_io = xio_create(underlying_io_interface, io_interface_parameters);"
    },
    {
        "line": 62,
        "fullcodeline": "if (result->socket_io == NULL)"
    },
    {
        "line": 64,
        "fullcodeline": "LogError(\"xio_create failed\");"
    },
    {
        "line": 65,
        "fullcodeline": "free(result->host_name);"
    },
    {
        "line": 67,
        "fullcodeline": "result = NULL;"
    },
    {
        "line": 71,
        "fullcodeline": "result->pending_io_list = singlylinkedlist_create();"
    },
    {
        "line": 72,
        "fullcodeline": "if (result->pending_io_list == NULL)"
    },
    {
        "line": 74,
        "fullcodeline": "LogError(\"Failed creating pending IO list.\");"
    },
    {
        "line": 75,
        "fullcodeline": "xio_destroy(result->socket_io);"
    },
    {
        "line": 76,
        "fullcodeline": "free(result->host_name);"
    },
    {
        "line": 78,
        "fullcodeline": "result = NULL;"
    },
    {
        "line": 82,
        "fullcodeline": "result->received_bytes = NULL;"
    },
    {
        "line": 83,
        "fullcodeline": "result->received_byte_count = 0;"
    },
    {
        "line": 84,
        "fullcodeline": "result->buffer_size = 0;"
    },
    {
        "line": 85,
        "fullcodeline": "result->tlsio_state = TLSIO_STATE_NOT_OPEN;"
    },
    {
        "line": 86,
        "fullcodeline": "result->x509certificate = NULL;"
    },
    {
        "line": 87,
        "fullcodeline": "result->x509privatekey = NULL;"
    },
    {
        "line": 88,
        "fullcodeline": "result->x509_schannel_handle = NULL;"
    }
]