[
    {
        "line": 6,
        "fullcodeline": "size_t malloc_size = sizeof(CONSTBUFFER_HANDLE_DATA) + size;"
    },
    {
        "line": 7,
        "fullcodeline": "if (malloc_size < size)"
    },
    {
        "line": 18,
        "fullcodeline": "if (result == NULL)"
    },
    {
        "line": 9,
        "fullcodeline": "result = NULL;"
    },
    {
        "line": 10,
        "fullcodeline": "LogError(\"invalid size parameter\");"
    },
    {
        "line": 22,
        "fullcodeline": "LogError(\"unable to malloc\");"
    },
    {
        "line": 15,
        "fullcodeline": "result = (CONSTBUFFER_HANDLE)calloc(1, malloc_size);"
    },
    {
        "line": 27,
        "fullcodeline": "INIT_REF_VAR(result->count);"
    },
    {
        "line": 30,
        "fullcodeline": "result->alias.size = size;"
    },
    {
        "line": 45,
        "fullcodeline": "result->buffer_type = CONSTBUFFER_TYPE_COPIED;"
    },
    {
        "line": 31,
        "fullcodeline": "if (size == 0)"
    },
    {
        "line": 33,
        "fullcodeline": "result->alias.buffer = NULL;"
    },
    {
        "line": 37,
        "fullcodeline": "unsigned char* temp = (unsigned char*)(result + 1);"
    },
    {
        "line": 41,
        "fullcodeline": "(void)memcpy(temp, source, size);"
    },
    {
        "line": 42,
        "fullcodeline": "result->alias.buffer = temp;"
    }
]