[
    {
        "line": 5,
        "fullcodeline": "if (name != NULL)"
    },
    {
        "line": 7,
        "fullcodeline": "result = NULL;"
    },
    {
        "line": 9,
        "fullcodeline": "if (strcmp(name, OPTION_NET_INT_MAC_ADDRESS) == 0)"
    },
    {
        "line": 40,
        "fullcodeline": "result = NULL;"
    },
    {
        "line": 11,
        "fullcodeline": "if (value == NULL)"
    },
    {
        "line": 35,
        "fullcodeline": "LogError(\"Cannot clone option %s (not suppported)\", name);"
    },
    {
        "line": 13,
        "fullcodeline": "LogError(\"Failed cloning option %s (value is NULL)\", name);"
    },
    {
        "line": 17,
        "fullcodeline": "size_t malloc_size = safe_add_size_t(strlen((char*)value), 1);"
    },
    {
        "line": 18,
        "fullcodeline": "malloc_size = safe_multiply_size_t(malloc_size, sizeof(char));"
    },
    {
        "line": 19,
        "fullcodeline": "if (malloc_size == SIZE_MAX)"
    },
    {
        "line": 21,
        "fullcodeline": "LogError(\"Invalid malloc size\");"
    },
    {
        "line": 23,
        "fullcodeline": "else if ((result = malloc(malloc_size)) == NULL)"
    },
    {
        "line": 25,
        "fullcodeline": "LogError(\"Failed cloning option %s (malloc failed)\", name);"
    },
    {
        "line": 29,
        "fullcodeline": "strcpy((char *)result, (char *)value);"
    }
]