[
    {
        "line": 4,
        "fullcodeline": "buffer[MaxTextExtent],"
    },
    {
        "line": 6,
        "fullcodeline": "magick[MaxTextExtent];"
    },
    {
        "line": 45,
        "fullcodeline": "assert(image_info != (const ImageInfo *) NULL);"
    },
    {
        "line": 46,
        "fullcodeline": "assert(image_info->signature == MagickCoreSignature);"
    },
    {
        "line": 47,
        "fullcodeline": "assert(image != (Image *) NULL);"
    },
    {
        "line": 48,
        "fullcodeline": "assert(image->signature == MagickCoreSignature);"
    },
    {
        "line": 51,
        "fullcodeline": "status=OpenBlob(image_info,image,WriteBinaryBlobMode,&image->exception);"
    },
    {
        "line": 54,
        "fullcodeline": "scene=0;"
    },
    {
        "line": 55,
        "fullcodeline": "imageListLength=GetImageListLength(image);"
    },
    {
        "line": 946,
        "fullcodeline": "(void) CloseBlob(image);"
    },
    {
        "line": 49,
        "fullcodeline": "if (image->debug != MagickFalse)"
    },
    {
        "line": 52,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 945,
        "fullcodeline": "} while (image_info->adjoin != MagickFalse);"
    },
    {
        "line": 50,
        "fullcodeline": "(void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",image->filename);"
    },
    {
        "line": 64,
        "fullcodeline": "max_value=GetQuantumRange(image->depth);"
    },
    {
        "line": 65,
        "fullcodeline": "packet_size=3;"
    },
    {
        "line": 66,
        "fullcodeline": "quantum_type=RGBQuantum;"
    },
    {
        "line": 67,
        "fullcodeline": "(void) CopyMagickString(magick,image_info->magick,MaxTextExtent);"
    },
    {
        "line": 126,
        "fullcodeline": "(void) FormatLocaleString(buffer,MaxTextExtent,\"P%c\\n\",format);"
    },
    {
        "line": 127,
        "fullcodeline": "(void) WriteBlobString(image,buffer);"
    },
    {
        "line": 128,
        "fullcodeline": "value=GetImageProperty(image,\"comment\");"
    },
    {
        "line": 941,
        "fullcodeline": "image=SyncNextImageInList(image);"
    },
    {
        "line": 942,
        "fullcodeline": "status=SetImageProgress(image,SaveImagesTag,scene++,imageListLength);"
    },
    {
        "line": 129,
        "fullcodeline": "if (value != (const char *) NULL)"
    },
    {
        "line": 146,
        "fullcodeline": "if (format != '7')"
    },
    {
        "line": 939,
        "fullcodeline": "if (GetNextImageInList(image) == (Image *) NULL)"
    },
    {
        "line": 943,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 137,
        "fullcodeline": "(void) WriteBlobByte(image,'#');"
    },
    {
        "line": 144,
        "fullcodeline": "(void) WriteBlobByte(image,'\\n');"
    },
    {
        "line": 148,
        "fullcodeline": "(void) FormatLocaleString(buffer,MaxTextExtent,\"%.20g %.20g\\n\","
    },
    {
        "line": 150,
        "fullcodeline": "(void) WriteBlobString(image,buffer);"
    },
    {
        "line": 73,
        "fullcodeline": "format='7';"
    },
    {
        "line": 79,
        "fullcodeline": "format='4';"
    },
    {
        "line": 87,
        "fullcodeline": "format='F';"
    },
    {
        "line": 95,
        "fullcodeline": "format='5';"
    },
    {
        "line": 120,
        "fullcodeline": "format='6';"
    },
    {
        "line": 138,
        "fullcodeline": "for (p=value; *p != '\\0'; p++)"
    },
    {
        "line": 155,
        "fullcodeline": "type[MaxTextExtent];"
    },
    {
        "line": 160,
        "fullcodeline": "(void) FormatLocaleString(buffer,MaxTextExtent,"
    },
    {
        "line": 163,
        "fullcodeline": "(void) WriteBlobString(image,buffer);"
    },
    {
        "line": 164,
        "fullcodeline": "quantum_type=GetQuantumType(image,&image->exception);"
    },
    {
        "line": 200,
        "fullcodeline": "(void) FormatLocaleString(buffer,MaxTextExtent,"
    },
    {
        "line": 203,
        "fullcodeline": "(void) WriteBlobString(image,buffer);"
    },
    {
        "line": 204,
        "fullcodeline": "(void) FormatLocaleString(buffer,MaxTextExtent,\"TUPLTYPE %s\\nENDHDR\\n\","
    },
    {
        "line": 206,
        "fullcodeline": "(void) WriteBlobString(image,buffer);"
    },
    {
        "line": 216,
        "fullcodeline": "pixels[2048];"
    },
    {
        "line": 221,
        "fullcodeline": "(void) SetImageType(image,BilevelType);"
    },
    {
        "line": 222,
        "fullcodeline": "q=pixels;"
    },
    {
        "line": 268,
        "fullcodeline": "pixels[2048];"
    },
    {
        "line": 280,
        "fullcodeline": "q=pixels;"
    },
    {
        "line": 337,
        "fullcodeline": "pixels[2048];"
    },
    {
        "line": 342,
        "fullcodeline": "(void) TransformImageColorspace(image,sRGBColorspace);"
    },
    {
        "line": 350,
        "fullcodeline": "q=pixels;"
    },
    {
        "line": 414,
        "fullcodeline": "(void) SetImageType(image,BilevelType);"
    },
    {
        "line": 415,
        "fullcodeline": "image->depth=1;"
    },
    {
        "line": 416,
        "fullcodeline": "quantum_info=AcquireQuantumInfo(image_info,image);"
    },
    {
        "line": 419,
        "fullcodeline": "(void) SetQuantumEndian(image,quantum_info,MSBEndian);"
    },
    {
        "line": 420,
        "fullcodeline": "quantum_info->min_is_white=MagickTrue;"
    },
    {
        "line": 421,
        "fullcodeline": "pixels=GetQuantumPixels(quantum_info);"
    },
    {
        "line": 443,
        "fullcodeline": "quantum_info=DestroyQuantumInfo(quantum_info);"
    },
    {
        "line": 453,
        "fullcodeline": "(void) FormatLocaleString(buffer,MaxTextExtent,\"%.20g\\n\",(double)"
    },
    {
        "line": 455,
        "fullcodeline": "(void) WriteBlobString(image,buffer);"
    },
    {
        "line": 456,
        "fullcodeline": "quantum_info=AcquireQuantumInfo(image_info,image);"
    },
    {
        "line": 459,
        "fullcodeline": "(void) SetQuantumEndian(image,quantum_info,MSBEndian);"
    },
    {
        "line": 460,
        "fullcodeline": "quantum_info->min_is_white=MagickTrue;"
    },
    {
        "line": 461,
        "fullcodeline": "pixels=GetQuantumPixels(quantum_info);"
    },
    {
        "line": 462,
        "fullcodeline": "extent=GetQuantumExtent(image,quantum_info,GrayQuantum);"
    },
    {
        "line": 557,
        "fullcodeline": "quantum_info=DestroyQuantumInfo(quantum_info);"
    },
    {
        "line": 565,
        "fullcodeline": "(void) TransformImageColorspace(image,sRGBColorspace);"
    },
    {
        "line": 568,
        "fullcodeline": "(void) FormatLocaleString(buffer,MaxTextExtent,\"%.20g\\n\",(double)"
    },
    {
        "line": 570,
        "fullcodeline": "(void) WriteBlobString(image,buffer);"
    },
    {
        "line": 571,
        "fullcodeline": "quantum_info=AcquireQuantumInfo(image_info,image);"
    },
    {
        "line": 574,
        "fullcodeline": "(void) SetQuantumEndian(image,quantum_info,MSBEndian);"
    },
    {
        "line": 575,
        "fullcodeline": "(void) SetQuantumEndian(image,quantum_info,MSBEndian);"
    },
    {
        "line": 576,
        "fullcodeline": "pixels=GetQuantumPixels(quantum_info);"
    },
    {
        "line": 577,
        "fullcodeline": "extent=GetQuantumExtent(image,quantum_info,quantum_type);"
    },
    {
        "line": 657,
        "fullcodeline": "quantum_info=DestroyQuantumInfo(quantum_info);"
    },
    {
        "line": 667,
        "fullcodeline": "quantum_info=AcquireQuantumInfo(image_info,image);"
    },
    {
        "line": 670,
        "fullcodeline": "(void) SetQuantumEndian(image,quantum_info,MSBEndian);"
    },
    {
        "line": 671,
        "fullcodeline": "pixels=GetQuantumPixels(quantum_info);"
    },
    {
        "line": 899,
        "fullcodeline": "quantum_info=DestroyQuantumInfo(quantum_info);"
    },
    {
        "line": 905,
        "fullcodeline": "(void) WriteBlobString(image,image->endian == LSBEndian ? \"-1.0\\n\" :"
    },
    {
        "line": 907,
        "fullcodeline": "image->depth=32;"
    },
    {
        "line": 908,
        "fullcodeline": "quantum_type=format == 'f' ? GrayQuantum : RGBQuantum;"
    },
    {
        "line": 909,
        "fullcodeline": "quantum_info=AcquireQuantumInfo((const ImageInfo *) NULL,image);"
    },
    {
        "line": 912,
        "fullcodeline": "status=SetQuantumFormat(image,quantum_info,FloatingPointQuantumFormat);"
    },
    {
        "line": 915,
        "fullcodeline": "pixels=GetQuantumPixels(quantum_info);"
    },
    {
        "line": 935,
        "fullcodeline": "quantum_info=DestroyQuantumInfo(quantum_info);"
    },
    {
        "line": 80,
        "fullcodeline": "if (image_info->compression == NoCompression)"
    },
    {
        "line": 88,
        "fullcodeline": "if (SetImageGray(image,&image->exception) != MagickFalse)"
    },
    {
        "line": 96,
        "fullcodeline": "if (image_info->compression == NoCompression)"
    },
    {
        "line": 103,
        "fullcodeline": "if ((image_info->type != TrueColorType) &&"
    },
    {
        "line": 121,
        "fullcodeline": "if (image_info->compression == NoCompression)"
    },
    {
        "line": 140,
        "fullcodeline": "(void) WriteBlobByte(image,(unsigned char) *p);"
    },
    {
        "line": 149,
        "fullcodeline": "(double) image->columns,(double) image->rows);"
    },
    {
        "line": 193,
        "fullcodeline": "if (image->matte != MagickFalse)"
    },
    {
        "line": 198,
        "fullcodeline": "if (image->depth > 32)"
    },
    {
        "line": 223,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 258,
        "fullcodeline": "if (q != pixels)"
    },
    {
        "line": 273,
        "fullcodeline": "if (image->depth <= 8)"
    },
    {
        "line": 281,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 327,
        "fullcodeline": "if (q != pixels)"
    },
    {
        "line": 343,
        "fullcodeline": "if (image->depth <= 8)"
    },
    {
        "line": 351,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 402,
        "fullcodeline": "if (q != pixels)"
    },
    {
        "line": 417,
        "fullcodeline": "if (quantum_info == (QuantumInfo *) NULL)"
    },
    {
        "line": 422,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 451,
        "fullcodeline": "if (image->depth > 32)"
    },
    {
        "line": 457,
        "fullcodeline": "if (quantum_info == (QuantumInfo *) NULL)"
    },
    {
        "line": 463,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 566,
        "fullcodeline": "if (image->depth > 32)"
    },
    {
        "line": 572,
        "fullcodeline": "if (quantum_info == (QuantumInfo *) NULL)"
    },
    {
        "line": 578,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 665,
        "fullcodeline": "if (image->depth > 32)"
    },
    {
        "line": 668,
        "fullcodeline": "if (quantum_info == (QuantumInfo *) NULL)"
    },
    {
        "line": 672,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 910,
        "fullcodeline": "if (quantum_info == (QuantumInfo *) NULL)"
    },
    {
        "line": 913,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 916,
        "fullcodeline": "for (y=(ssize_t) image->rows-1; y >= 0; y--)"
    },
    {
        "line": 81,
        "fullcodeline": "format='1';"
    },
    {
        "line": 89,
        "fullcodeline": "format='f';"
    },
    {
        "line": 97,
        "fullcodeline": "format='2';"
    },
    {
        "line": 104,
        "fullcodeline": "(SetImageGray(image,&image->exception) != MagickFalse))"
    },
    {
        "line": 106,
        "fullcodeline": "format='5';"
    },
    {
        "line": 122,
        "fullcodeline": "format='3';"
    },
    {
        "line": 141,
        "fullcodeline": "if ((*p == '\\n') || (*p == '\\r'))"
    },
    {
        "line": 161,
        "fullcodeline": "\"WIDTH %.20g\\nHEIGHT %.20g\\n\",(double) image->columns,(double)"
    },
    {
        "line": 195,
        "fullcodeline": "packet_size++;"
    },
    {
        "line": 196,
        "fullcodeline": "(void) ConcatenateMagickString(type,\"_ALPHA\",MaxTextExtent);"
    },
    {
        "line": 199,
        "fullcodeline": "image->depth=32;"
    },
    {
        "line": 201,
        "fullcodeline": "\"DEPTH %.20g\\nMAXVAL %.20g\\n\",(double) packet_size,(double)"
    },
    {
        "line": 231,
        "fullcodeline": "p=GetVirtualPixels(image,0,y,image->columns,1,&image->exception);"
    },
    {
        "line": 247,
        "fullcodeline": "*q++='\\n';"
    },
    {
        "line": 248,
        "fullcodeline": "(void) WriteBlob(image,q-pixels,pixels);"
    },
    {
        "line": 249,
        "fullcodeline": "q=pixels;"
    },
    {
        "line": 260,
        "fullcodeline": "*q++='\\n';"
    },
    {
        "line": 261,
        "fullcodeline": "(void) WriteBlob(image,q-pixels,pixels);"
    },
    {
        "line": 274,
        "fullcodeline": "(void) WriteBlobString(image,\"255\\n\");"
    },
    {
        "line": 289,
        "fullcodeline": "p=GetVirtualPixels(image,0,y,image->columns,1,&image->exception);"
    },
    {
        "line": 316,
        "fullcodeline": "*q++='\\n';"
    },
    {
        "line": 317,
        "fullcodeline": "(void) WriteBlob(image,q-pixels,pixels);"
    },
    {
        "line": 318,
        "fullcodeline": "q=pixels;"
    },
    {
        "line": 329,
        "fullcodeline": "*q++='\\n';"
    },
    {
        "line": 330,
        "fullcodeline": "(void) WriteBlob(image,q-pixels,pixels);"
    },
    {
        "line": 344,
        "fullcodeline": "(void) WriteBlobString(image,\"255\\n\");"
    },
    {
        "line": 359,
        "fullcodeline": "p=GetVirtualPixels(image,0,y,image->columns,1,&image->exception);"
    },
    {
        "line": 391,
        "fullcodeline": "*q++='\\n';"
    },
    {
        "line": 392,
        "fullcodeline": "(void) WriteBlob(image,q-pixels,pixels);"
    },
    {
        "line": 393,
        "fullcodeline": "q=pixels;"
    },
    {
        "line": 404,
        "fullcodeline": "*q++='\\n';"
    },
    {
        "line": 405,
        "fullcodeline": "(void) WriteBlob(image,q-pixels,pixels);"
    },
    {
        "line": 418,
        "fullcodeline": "ThrowWriterException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 427,
        "fullcodeline": "p=GetVirtualPixels(image,0,y,image->columns,1,&image->exception);"
    },
    {
        "line": 430,
        "fullcodeline": "extent=ExportQuantumPixels(image,(const CacheView *) NULL,"
    },
    {
        "line": 432,
        "fullcodeline": "count=WriteBlob(image,extent,pixels);"
    },
    {
        "line": 452,
        "fullcodeline": "image->depth=32;"
    },
    {
        "line": 458,
        "fullcodeline": "ThrowWriterException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 471,
        "fullcodeline": "p=GetVirtualPixels(image,0,y,image->columns,1,&image->exception);"
    },
    {
        "line": 474,
        "fullcodeline": "q=pixels;"
    },
    {
        "line": 546,
        "fullcodeline": "count=WriteBlob(image,extent,pixels);"
    },
    {
        "line": 567,
        "fullcodeline": "image->depth=32;"
    },
    {
        "line": 573,
        "fullcodeline": "ThrowWriterException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 586,
        "fullcodeline": "p=GetVirtualPixels(image,0,y,image->columns,1,&image->exception);"
    },
    {
        "line": 589,
        "fullcodeline": "q=pixels;"
    },
    {
        "line": 646,
        "fullcodeline": "count=WriteBlob(image,extent,pixels);"
    },
    {
        "line": 666,
        "fullcodeline": "image->depth=32;"
    },
    {
        "line": 669,
        "fullcodeline": "ThrowWriterException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 683,
        "fullcodeline": "p=GetVirtualPixels(image,0,y,image->columns,1,&image->exception);"
    },
    {
        "line": 686,
        "fullcodeline": "indexes=GetVirtualIndexQueue(image);"
    },
    {
        "line": 687,
        "fullcodeline": "q=pixels;"
    },
    {
        "line": 888,
        "fullcodeline": "count=WriteBlob(image,extent,pixels);"
    },
    {
        "line": 911,
        "fullcodeline": "ThrowWriterException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 914,
        "fullcodeline": "ThrowWriterException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 921,
        "fullcodeline": "p=GetVirtualPixels(image,0,y,image->columns,1,&image->exception);"
    },
    {
        "line": 924,
        "fullcodeline": "extent=ExportQuantumPixels(image,(const CacheView *) NULL,"
    },
    {
        "line": 926,
        "fullcodeline": "(void) WriteBlob(image,extent,pixels);"
    },
    {
        "line": 107,
        "fullcodeline": "if (image_info->compression == NoCompression)"
    },
    {
        "line": 109,
        "fullcodeline": "if (SetImageMonochrome(image,&image->exception) != MagickFalse)"
    },
    {
        "line": 142,
        "fullcodeline": "(void) WriteBlobByte(image,'#');"
    },
    {
        "line": 170,
        "fullcodeline": "packet_size=4;"
    },
    {
        "line": 171,
        "fullcodeline": "(void) CopyMagickString(type,\"CMYK\",MaxTextExtent);"
    },
    {
        "line": 177,
        "fullcodeline": "packet_size=1;"
    },
    {
        "line": 178,
        "fullcodeline": "(void) CopyMagickString(type,\"GRAYSCALE\",MaxTextExtent);"
    },
    {
        "line": 185,
        "fullcodeline": "quantum_type=RGBQuantum;"
    },
    {
        "line": 188,
        "fullcodeline": "packet_size=3;"
    },
    {
        "line": 189,
        "fullcodeline": "(void) CopyMagickString(type,\"RGB\",MaxTextExtent);"
    },
    {
        "line": 202,
        "fullcodeline": "((MagickOffsetType) GetQuantumRange(image->depth)));"
    },
    {
        "line": 232,
        "fullcodeline": "if (p == (const PixelPacket *) NULL)"
    },
    {
        "line": 234,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 250,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 290,
        "fullcodeline": "if (p == (const PixelPacket *) NULL)"
    },
    {
        "line": 292,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 319,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 360,
        "fullcodeline": "if (p == (const PixelPacket *) NULL)"
    },
    {
        "line": 362,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 394,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 428,
        "fullcodeline": "if (p == (const PixelPacket *) NULL)"
    },
    {
        "line": 433,
        "fullcodeline": "if (count != (ssize_t) extent)"
    },
    {
        "line": 435,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 454,
        "fullcodeline": "((MagickOffsetType) GetQuantumRange(image->depth)));"
    },
    {
        "line": 472,
        "fullcodeline": "if (p == (const PixelPacket *) NULL)"
    },
    {
        "line": 547,
        "fullcodeline": "if (count != (ssize_t) extent)"
    },
    {
        "line": 549,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 569,
        "fullcodeline": "((MagickOffsetType) GetQuantumRange(image->depth)));"
    },
    {
        "line": 587,
        "fullcodeline": "if (p == (const PixelPacket *) NULL)"
    },
    {
        "line": 647,
        "fullcodeline": "if (count != (ssize_t) extent)"
    },
    {
        "line": 649,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 684,
        "fullcodeline": "if (p == (const PixelPacket *) NULL)"
    },
    {
        "line": 889,
        "fullcodeline": "if (count != (ssize_t) extent)"
    },
    {
        "line": 891,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 922,
        "fullcodeline": "if (p == (const PixelPacket *) NULL)"
    },
    {
        "line": 927,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 108,
        "fullcodeline": "format='2';"
    },
    {
        "line": 111,
        "fullcodeline": "format='4';"
    },
    {
        "line": 179,
        "fullcodeline": "if (IdentifyImageMonochrome(image,&image->exception) != MagickFalse)"
    },
    {
        "line": 186,
        "fullcodeline": "if (image->matte != MagickFalse)"
    },
    {
        "line": 236,
        "fullcodeline": "*q++=(unsigned char) (GetPixelLuma(image,p) >= (QuantumRange/2.0) ?"
    },
    {
        "line": 238,
        "fullcodeline": "*q++=' ';"
    },
    {
        "line": 245,
        "fullcodeline": "p++;"
    },
    {
        "line": 252,
        "fullcodeline": "status=SetImageProgress(image,SaveImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 276,
        "fullcodeline": "if (image->depth <= 16)"
    },
    {
        "line": 294,
        "fullcodeline": "index=ClampToQuantum(GetPixelLuma(image,p));"
    },
    {
        "line": 305,
        "fullcodeline": "extent=(size_t) count;"
    },
    {
        "line": 312,
        "fullcodeline": "(void) strncpy((char *) q,buffer,extent);"
    },
    {
        "line": 313,
        "fullcodeline": "q+=extent;"
    },
    {
        "line": 314,
        "fullcodeline": "p++;"
    },
    {
        "line": 321,
        "fullcodeline": "status=SetImageProgress(image,SaveImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 346,
        "fullcodeline": "if (image->depth <= 16)"
    },
    {
        "line": 380,
        "fullcodeline": "extent=(size_t) count;"
    },
    {
        "line": 387,
        "fullcodeline": "(void) strncpy((char *) q,buffer,extent);"
    },
    {
        "line": 388,
        "fullcodeline": "q+=extent;"
    },
    {
        "line": 389,
        "fullcodeline": "p++;"
    },
    {
        "line": 396,
        "fullcodeline": "status=SetImageProgress(image,SaveImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 437,
        "fullcodeline": "status=SetImageProgress(image,SaveImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 551,
        "fullcodeline": "status=SetImageProgress(image,SaveImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 651,
        "fullcodeline": "status=SetImageProgress(image,SaveImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 893,
        "fullcodeline": "status=SetImageProgress(image,SaveImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 929,
        "fullcodeline": "status=SetImageProgress(image,SaveImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 112,
        "fullcodeline": "if (image_info->compression == NoCompression)"
    },
    {
        "line": 180,
        "fullcodeline": "(void) CopyMagickString(type,\"BLACKANDWHITE\",MaxTextExtent);"
    },
    {
        "line": 187,
        "fullcodeline": "quantum_type=RGBAQuantum;"
    },
    {
        "line": 239,
        "fullcodeline": "if ((q-pixels+1) >= (ssize_t) sizeof(pixels))"
    },
    {
        "line": 254,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 277,
        "fullcodeline": "(void) WriteBlobString(image,\"65535\\n\");"
    },
    {
        "line": 295,
        "fullcodeline": "if (image->depth <= 8)"
    },
    {
        "line": 306,
        "fullcodeline": "if ((q-pixels+extent+1) >= sizeof(pixels))"
    },
    {
        "line": 323,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 347,
        "fullcodeline": "(void) WriteBlobString(image,\"65535\\n\");"
    },
    {
        "line": 364,
        "fullcodeline": "if (image->depth <= 8)"
    },
    {
        "line": 381,
        "fullcodeline": "if ((q-pixels+extent+1) >= sizeof(pixels))"
    },
    {
        "line": 398,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 439,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 481,
        "fullcodeline": "extent=ExportQuantumPixels(image,(const CacheView *) NULL,"
    },
    {
        "line": 542,
        "fullcodeline": "extent=(size_t) (q-pixels);"
    },
    {
        "line": 553,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 596,
        "fullcodeline": "extent=ExportQuantumPixels(image,(const CacheView *) NULL,"
    },
    {
        "line": 642,
        "fullcodeline": "extent=(size_t) (q-pixels);"
    },
    {
        "line": 653,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 694,
        "fullcodeline": "extent=ExportQuantumPixels(image,(const CacheView *) NULL,"
    },
    {
        "line": 884,
        "fullcodeline": "extent=(size_t) (q-pixels);"
    },
    {
        "line": 895,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 931,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 113,
        "fullcodeline": "format='1';"
    },
    {
        "line": 241,
        "fullcodeline": "*q++='\\n';"
    },
    {
        "line": 242,
        "fullcodeline": "(void) WriteBlob(image,q-pixels,pixels);"
    },
    {
        "line": 243,
        "fullcodeline": "q=pixels;"
    },
    {
        "line": 279,
        "fullcodeline": "(void) WriteBlobString(image,\"4294967295\\n\");"
    },
    {
        "line": 296,
        "fullcodeline": "count=(ssize_t) FormatLocaleString(buffer,MaxTextExtent,\"%u \","
    },
    {
        "line": 308,
        "fullcodeline": "*q++='\\n';"
    },
    {
        "line": 309,
        "fullcodeline": "(void) WriteBlob(image,q-pixels,pixels);"
    },
    {
        "line": 310,
        "fullcodeline": "q=pixels;"
    },
    {
        "line": 349,
        "fullcodeline": "(void) WriteBlobString(image,\"4294967295\\n\");"
    },
    {
        "line": 365,
        "fullcodeline": "count=(ssize_t) FormatLocaleString(buffer,MaxTextExtent,"
    },
    {
        "line": 383,
        "fullcodeline": "*q++='\\n';"
    },
    {
        "line": 384,
        "fullcodeline": "(void) WriteBlob(image,q-pixels,pixels);"
    },
    {
        "line": 385,
        "fullcodeline": "q=pixels;"
    },
    {
        "line": 487,
        "fullcodeline": "if (image->depth <= 8)"
    },
    {
        "line": 507,
        "fullcodeline": "if (image->depth <= 16)"
    },
    {
        "line": 527,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 602,
        "fullcodeline": "if (image->depth <= 8)"
    },
    {
        "line": 617,
        "fullcodeline": "if (image->depth <= 16)"
    },
    {
        "line": 632,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 504,
        "fullcodeline": "extent=(size_t) (q-pixels);"
    },
    {
        "line": 524,
        "fullcodeline": "extent=(size_t) (q-pixels);"
    },
    {
        "line": 539,
        "fullcodeline": "q=PopLongPixel(MSBEndian,(unsigned int) pixel,q);"
    },
    {
        "line": 540,
        "fullcodeline": "p++;"
    },
    {
        "line": 614,
        "fullcodeline": "extent=(size_t) (q-pixels);"
    },
    {
        "line": 629,
        "fullcodeline": "extent=(size_t) (q-pixels);"
    },
    {
        "line": 634,
        "fullcodeline": "pixel=ScaleQuantumToAny(GetPixelRed(p),max_value);"
    },
    {
        "line": 635,
        "fullcodeline": "q=PopLongPixel(MSBEndian,(unsigned short) pixel,q);"
    },
    {
        "line": 636,
        "fullcodeline": "pixel=ScaleQuantumToAny(GetPixelGreen(p),max_value);"
    },
    {
        "line": 637,
        "fullcodeline": "q=PopLongPixel(MSBEndian,(unsigned short) pixel,q);"
    },
    {
        "line": 638,
        "fullcodeline": "pixel=ScaleQuantumToAny(GetPixelBlue(p),max_value);"
    },
    {
        "line": 639,
        "fullcodeline": "q=PopLongPixel(MSBEndian,(unsigned short) pixel,q);"
    },
    {
        "line": 640,
        "fullcodeline": "p++;"
    },
    {
        "line": 299,
        "fullcodeline": "if (image->depth <= 16)"
    },
    {
        "line": 370,
        "fullcodeline": "if (image->depth <= 16)"
    },
    {
        "line": 489,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 509,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 529,
        "fullcodeline": "if (IsGrayPixel(p) == MagickFalse)"
    },
    {
        "line": 604,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 619,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 297,
        "fullcodeline": "ScaleQuantumToChar(index));"
    },
    {
        "line": 300,
        "fullcodeline": "count=(ssize_t) FormatLocaleString(buffer,MaxTextExtent,\"%u \","
    },
    {
        "line": 366,
        "fullcodeline": "\"%u %u %u \",ScaleQuantumToChar(GetPixelRed(p)),"
    },
    {
        "line": 367,
        "fullcodeline": "ScaleQuantumToChar(GetPixelGreen(p)),"
    },
    {
        "line": 368,
        "fullcodeline": "ScaleQuantumToChar(GetPixelBlue(p)));"
    },
    {
        "line": 371,
        "fullcodeline": "count=(ssize_t) FormatLocaleString(buffer,MaxTextExtent,"
    },
    {
        "line": 501,
        "fullcodeline": "q=PopCharPixel((unsigned char) pixel,q);"
    },
    {
        "line": 502,
        "fullcodeline": "p++;"
    },
    {
        "line": 521,
        "fullcodeline": "q=PopShortPixel(MSBEndian,(unsigned short) pixel,q);"
    },
    {
        "line": 522,
        "fullcodeline": "p++;"
    },
    {
        "line": 530,
        "fullcodeline": "pixel=ScaleQuantumToAny(ClampToQuantum("
    },
    {
        "line": 606,
        "fullcodeline": "pixel=ScaleQuantumToAny(GetPixelRed(p),max_value);"
    },
    {
        "line": 607,
        "fullcodeline": "q=PopCharPixel((unsigned char) pixel,q);"
    },
    {
        "line": 608,
        "fullcodeline": "pixel=ScaleQuantumToAny(GetPixelGreen(p),max_value);"
    },
    {
        "line": 609,
        "fullcodeline": "q=PopCharPixel((unsigned char) pixel,q);"
    },
    {
        "line": 610,
        "fullcodeline": "pixel=ScaleQuantumToAny(GetPixelBlue(p),max_value);"
    },
    {
        "line": 611,
        "fullcodeline": "q=PopCharPixel((unsigned char) pixel,q);"
    },
    {
        "line": 612,
        "fullcodeline": "p++;"
    },
    {
        "line": 621,
        "fullcodeline": "pixel=ScaleQuantumToAny(GetPixelRed(p),max_value);"
    },
    {
        "line": 622,
        "fullcodeline": "q=PopShortPixel(MSBEndian,(unsigned short) pixel,q);"
    },
    {
        "line": 623,
        "fullcodeline": "pixel=ScaleQuantumToAny(GetPixelGreen(p),max_value);"
    },
    {
        "line": 624,
        "fullcodeline": "q=PopShortPixel(MSBEndian,(unsigned short) pixel,q);"
    },
    {
        "line": 625,
        "fullcodeline": "pixel=ScaleQuantumToAny(GetPixelBlue(p),max_value);"
    },
    {
        "line": 626,
        "fullcodeline": "q=PopShortPixel(MSBEndian,(unsigned short) pixel,q);"
    },
    {
        "line": 627,
        "fullcodeline": "p++;"
    },
    {
        "line": 705,
        "fullcodeline": "if (image->depth <= 8)"
    },
    {
        "line": 722,
        "fullcodeline": "if (image->depth <= 16)"
    },
    {
        "line": 739,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 757,
        "fullcodeline": "if (image->depth <= 8)"
    },
    {
        "line": 780,
        "fullcodeline": "if (image->depth <= 16)"
    },
    {
        "line": 803,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 825,
        "fullcodeline": "if (image->depth <= 8)"
    },
    {
        "line": 845,
        "fullcodeline": "if (image->depth <= 16)"
    },
    {
        "line": 865,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 303,
        "fullcodeline": "count=(ssize_t) FormatLocaleString(buffer,MaxTextExtent,\"%u \","
    },
    {
        "line": 376,
        "fullcodeline": "count=(ssize_t) FormatLocaleString(buffer,MaxTextExtent,"
    },
    {
        "line": 491,
        "fullcodeline": "if (IsGrayPixel(p) == MagickFalse)"
    },
    {
        "line": 511,
        "fullcodeline": "if (IsGrayPixel(p) == MagickFalse)"
    },
    {
        "line": 741,
        "fullcodeline": "pixel=ScaleQuantumToAny(ClampToQuantum("
    },
    {
        "line": 743,
        "fullcodeline": "q=PopLongPixel(MSBEndian,(unsigned int) pixel,q);"
    },
    {
        "line": 750,
        "fullcodeline": "p++;"
    },
    {
        "line": 805,
        "fullcodeline": "pixel=ScaleQuantumToAny(GetPixelRed(p),max_value);"
    },
    {
        "line": 806,
        "fullcodeline": "q=PopLongPixel(MSBEndian,(unsigned int) pixel,q);"
    },
    {
        "line": 807,
        "fullcodeline": "pixel=ScaleQuantumToAny(GetPixelGreen(p),max_value);"
    },
    {
        "line": 808,
        "fullcodeline": "q=PopLongPixel(MSBEndian,(unsigned int) pixel,q);"
    },
    {
        "line": 809,
        "fullcodeline": "pixel=ScaleQuantumToAny(GetPixelBlue(p),max_value);"
    },
    {
        "line": 810,
        "fullcodeline": "q=PopLongPixel(MSBEndian,(unsigned int) pixel,q);"
    },
    {
        "line": 811,
        "fullcodeline": "pixel=ScaleQuantumToAny(GetPixelIndex(indexes+x),max_value);"
    },
    {
        "line": 812,
        "fullcodeline": "q=PopLongPixel(MSBEndian,(unsigned int) pixel,q);"
    },
    {
        "line": 819,
        "fullcodeline": "p++;"
    },
    {
        "line": 867,
        "fullcodeline": "pixel=ScaleQuantumToAny(GetPixelRed(p),max_value);"
    },
    {
        "line": 868,
        "fullcodeline": "q=PopLongPixel(MSBEndian,(unsigned int) pixel,q);"
    },
    {
        "line": 869,
        "fullcodeline": "pixel=ScaleQuantumToAny(GetPixelGreen(p),max_value);"
    },
    {
        "line": 870,
        "fullcodeline": "q=PopLongPixel(MSBEndian,(unsigned int) pixel,q);"
    },
    {
        "line": 871,
        "fullcodeline": "pixel=ScaleQuantumToAny(GetPixelBlue(p),max_value);"
    },
    {
        "line": 872,
        "fullcodeline": "q=PopLongPixel(MSBEndian,(unsigned int) pixel,q);"
    },
    {
        "line": 879,
        "fullcodeline": "p++;"
    },
    {
        "line": 492,
        "fullcodeline": "pixel=ScaleQuantumToAny(ClampToQuantum("
    },
    {
        "line": 512,
        "fullcodeline": "pixel=ScaleQuantumToAny(ClampToQuantum("
    },
    {
        "line": 534,
        "fullcodeline": "if (image->depth == 32)"
    },
    {
        "line": 707,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 724,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 744,
        "fullcodeline": "if (image->matte != MagickFalse)"
    },
    {
        "line": 759,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 782,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 813,
        "fullcodeline": "if (image->matte != MagickFalse)"
    },
    {
        "line": 827,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 847,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 873,
        "fullcodeline": "if (image->matte != MagickFalse)"
    },
    {
        "line": 301,
        "fullcodeline": "ScaleQuantumToShort(index));"
    },
    {
        "line": 372,
        "fullcodeline": "\"%u %u %u \",ScaleQuantumToShort(GetPixelRed(p)),"
    },
    {
        "line": 373,
        "fullcodeline": "ScaleQuantumToShort(GetPixelGreen(p)),"
    },
    {
        "line": 374,
        "fullcodeline": "ScaleQuantumToShort(GetPixelBlue(p)));"
    },
    {
        "line": 531,
        "fullcodeline": "GetPixelLuma(image,p)),max_value);"
    },
    {
        "line": 535,
        "fullcodeline": "pixel=ScaleQuantumToLong(GetPixelRed(p));"
    },
    {
        "line": 709,
        "fullcodeline": "pixel=ScaleQuantumToAny(ClampToQuantum("
    },
    {
        "line": 711,
        "fullcodeline": "q=PopCharPixel((unsigned char) pixel,q);"
    },
    {
        "line": 718,
        "fullcodeline": "p++;"
    },
    {
        "line": 726,
        "fullcodeline": "pixel=ScaleQuantumToAny(ClampToQuantum("
    },
    {
        "line": 728,
        "fullcodeline": "q=PopShortPixel(MSBEndian,(unsigned short) pixel,q);"
    },
    {
        "line": 735,
        "fullcodeline": "p++;"
    },
    {
        "line": 746,
        "fullcodeline": "pixel=(unsigned char) ScaleQuantumToAny("
    },
    {
        "line": 748,
        "fullcodeline": "q=PopLongPixel(MSBEndian,(unsigned int) pixel,q);"
    },
    {
        "line": 761,
        "fullcodeline": "pixel=ScaleQuantumToAny(GetPixelRed(p),max_value);"
    },
    {
        "line": 762,
        "fullcodeline": "q=PopCharPixel((unsigned char) pixel,q);"
    },
    {
        "line": 763,
        "fullcodeline": "pixel=ScaleQuantumToAny(GetPixelGreen(p),max_value);"
    },
    {
        "line": 764,
        "fullcodeline": "q=PopCharPixel((unsigned char) pixel,q);"
    },
    {
        "line": 765,
        "fullcodeline": "pixel=ScaleQuantumToAny(GetPixelBlue(p),max_value);"
    },
    {
        "line": 766,
        "fullcodeline": "q=PopCharPixel((unsigned char) pixel,q);"
    },
    {
        "line": 767,
        "fullcodeline": "pixel=ScaleQuantumToAny(GetPixelIndex(indexes+x),"
    },
    {
        "line": 769,
        "fullcodeline": "q=PopCharPixel((unsigned char) pixel,q);"
    },
    {
        "line": 776,
        "fullcodeline": "p++;"
    },
    {
        "line": 784,
        "fullcodeline": "pixel=ScaleQuantumToAny(GetPixelRed(p),max_value);"
    },
    {
        "line": 785,
        "fullcodeline": "q=PopShortPixel(MSBEndian,(unsigned short) pixel,q);"
    },
    {
        "line": 786,
        "fullcodeline": "pixel=ScaleQuantumToAny(GetPixelGreen(p),max_value);"
    },
    {
        "line": 787,
        "fullcodeline": "q=PopShortPixel(MSBEndian,(unsigned short) pixel,q);"
    },
    {
        "line": 788,
        "fullcodeline": "pixel=ScaleQuantumToAny(GetPixelBlue(p),max_value);"
    },
    {
        "line": 789,
        "fullcodeline": "q=PopShortPixel(MSBEndian,(unsigned short) pixel,q);"
    },
    {
        "line": 790,
        "fullcodeline": "pixel=ScaleQuantumToAny(GetPixelIndex(indexes+x),"
    },
    {
        "line": 792,
        "fullcodeline": "q=PopShortPixel(MSBEndian,(unsigned short) pixel,q);"
    },
    {
        "line": 799,
        "fullcodeline": "p++;"
    },
    {
        "line": 815,
        "fullcodeline": "pixel=ScaleQuantumToAny((Quantum) (QuantumRange-"
    },
    {
        "line": 817,
        "fullcodeline": "q=PopLongPixel(MSBEndian,(unsigned int) pixel,q);"
    },
    {
        "line": 829,
        "fullcodeline": "pixel=ScaleQuantumToAny(GetPixelRed(p),max_value);"
    },
    {
        "line": 830,
        "fullcodeline": "q=PopCharPixel((unsigned char) pixel,q);"
    },
    {
        "line": 831,
        "fullcodeline": "pixel=ScaleQuantumToAny(GetPixelGreen(p),max_value);"
    },
    {
        "line": 832,
        "fullcodeline": "q=PopCharPixel((unsigned char) pixel,q);"
    },
    {
        "line": 833,
        "fullcodeline": "pixel=ScaleQuantumToAny(GetPixelBlue(p),max_value);"
    },
    {
        "line": 834,
        "fullcodeline": "q=PopCharPixel((unsigned char) pixel,q);"
    },
    {
        "line": 841,
        "fullcodeline": "p++;"
    },
    {
        "line": 849,
        "fullcodeline": "pixel=ScaleQuantumToAny(GetPixelRed(p),max_value);"
    },
    {
        "line": 850,
        "fullcodeline": "q=PopShortPixel(MSBEndian,(unsigned short) pixel,q);"
    },
    {
        "line": 851,
        "fullcodeline": "pixel=ScaleQuantumToAny(GetPixelGreen(p),max_value);"
    },
    {
        "line": 852,
        "fullcodeline": "q=PopShortPixel(MSBEndian,(unsigned short) pixel,q);"
    },
    {
        "line": 853,
        "fullcodeline": "pixel=ScaleQuantumToAny(GetPixelBlue(p),max_value);"
    },
    {
        "line": 854,
        "fullcodeline": "q=PopShortPixel(MSBEndian,(unsigned short) pixel,q);"
    },
    {
        "line": 861,
        "fullcodeline": "p++;"
    },
    {
        "line": 875,
        "fullcodeline": "pixel=ScaleQuantumToAny((Quantum) (QuantumRange-"
    },
    {
        "line": 877,
        "fullcodeline": "q=PopLongPixel(MSBEndian,(unsigned int) pixel,q);"
    },
    {
        "line": 304,
        "fullcodeline": "ScaleQuantumToLong(index));"
    },
    {
        "line": 377,
        "fullcodeline": "\"%u %u %u \",ScaleQuantumToLong(GetPixelRed(p)),"
    },
    {
        "line": 378,
        "fullcodeline": "ScaleQuantumToLong(GetPixelGreen(p)),"
    },
    {
        "line": 379,
        "fullcodeline": "ScaleQuantumToLong(GetPixelBlue(p)));"
    },
    {
        "line": 496,
        "fullcodeline": "if (image->depth == 8)"
    },
    {
        "line": 516,
        "fullcodeline": "if (image->depth == 16)"
    },
    {
        "line": 537,
        "fullcodeline": "pixel=ScaleQuantumToAny(GetPixelRed(p),max_value);"
    },
    {
        "line": 712,
        "fullcodeline": "if (image->matte != MagickFalse)"
    },
    {
        "line": 729,
        "fullcodeline": "if (image->matte != MagickFalse)"
    },
    {
        "line": 742,
        "fullcodeline": "GetPixelLuma(image,p)),max_value);"
    },
    {
        "line": 770,
        "fullcodeline": "if (image->matte != MagickFalse)"
    },
    {
        "line": 793,
        "fullcodeline": "if (image->matte != MagickFalse)"
    },
    {
        "line": 835,
        "fullcodeline": "if (image->matte != MagickFalse)"
    },
    {
        "line": 855,
        "fullcodeline": "if (image->matte != MagickFalse)"
    },
    {
        "line": 493,
        "fullcodeline": "GetPixelLuma(image,p)),max_value);"
    },
    {
        "line": 497,
        "fullcodeline": "pixel=ScaleQuantumToChar(GetPixelRed(p));"
    },
    {
        "line": 513,
        "fullcodeline": "GetPixelLuma(image,p)),max_value);"
    },
    {
        "line": 517,
        "fullcodeline": "pixel=ScaleQuantumToShort(GetPixelRed(p));"
    },
    {
        "line": 714,
        "fullcodeline": "pixel=(unsigned char) ScaleQuantumToAny("
    },
    {
        "line": 716,
        "fullcodeline": "q=PopCharPixel((unsigned char) pixel,q);"
    },
    {
        "line": 731,
        "fullcodeline": "pixel=(unsigned char) ScaleQuantumToAny("
    },
    {
        "line": 733,
        "fullcodeline": "q=PopShortPixel(MSBEndian,(unsigned short) pixel,q);"
    },
    {
        "line": 772,
        "fullcodeline": "pixel=ScaleQuantumToAny((Quantum) (QuantumRange-"
    },
    {
        "line": 774,
        "fullcodeline": "q=PopCharPixel((unsigned char) pixel,q);"
    },
    {
        "line": 795,
        "fullcodeline": "pixel=ScaleQuantumToAny((Quantum) (QuantumRange-"
    },
    {
        "line": 797,
        "fullcodeline": "q=PopShortPixel(MSBEndian,(unsigned short) pixel,q);"
    },
    {
        "line": 837,
        "fullcodeline": "pixel=ScaleQuantumToAny((Quantum) (QuantumRange-"
    },
    {
        "line": 839,
        "fullcodeline": "q=PopCharPixel((unsigned char) pixel,q);"
    },
    {
        "line": 857,
        "fullcodeline": "pixel=ScaleQuantumToAny((Quantum) (QuantumRange-"
    },
    {
        "line": 859,
        "fullcodeline": "q=PopShortPixel(MSBEndian,(unsigned short) pixel,q);"
    },
    {
        "line": 499,
        "fullcodeline": "pixel=ScaleQuantumToAny(GetPixelRed(p),max_value);"
    },
    {
        "line": 519,
        "fullcodeline": "pixel=ScaleQuantumToAny(GetPixelRed(p),max_value);"
    },
    {
        "line": 710,
        "fullcodeline": "GetPixelLuma(image,p)),max_value);"
    },
    {
        "line": 727,
        "fullcodeline": "GetPixelLuma(image,p)),max_value);"
    },
    {
        "line": 747,
        "fullcodeline": "GetPixelOpacity(p),max_value);"
    },
    {
        "line": 816,
        "fullcodeline": "GetPixelOpacity(p)),max_value);"
    },
    {
        "line": 876,
        "fullcodeline": "GetPixelOpacity(p)),max_value);"
    },
    {
        "line": 715,
        "fullcodeline": "GetPixelOpacity(p),max_value);"
    },
    {
        "line": 732,
        "fullcodeline": "GetPixelOpacity(p),max_value);"
    },
    {
        "line": 773,
        "fullcodeline": "GetPixelOpacity(p)),max_value);"
    },
    {
        "line": 796,
        "fullcodeline": "GetPixelOpacity(p)),max_value);"
    },
    {
        "line": 838,
        "fullcodeline": "GetPixelOpacity(p)),max_value);"
    },
    {
        "line": 858,
        "fullcodeline": "GetPixelOpacity(p)),max_value);"
    }
]