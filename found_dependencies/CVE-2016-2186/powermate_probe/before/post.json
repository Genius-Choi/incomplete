[
    {
        "line": 3,
        "fullcodeline": "struct usb_device *udev = interface_to_usbdev (intf);"
    },
    {
        "line": 9,
        "fullcodeline": "int error = -ENOMEM;"
    },
    {
        "line": 11,
        "fullcodeline": "interface = intf->cur_altsetting;"
    },
    {
        "line": 16,
        "fullcodeline": "usb_control_msg(udev, usb_sndctrlpipe(udev, 0),"
    },
    {
        "line": 21,
        "fullcodeline": "pm = kzalloc(sizeof(struct powermate_device), GFP_KERNEL);"
    },
    {
        "line": 22,
        "fullcodeline": "input_dev = input_allocate_device();"
    },
    {
        "line": 29,
        "fullcodeline": "pm->irq = usb_alloc_urb(0, GFP_KERNEL);"
    },
    {
        "line": 33,
        "fullcodeline": "pm->config = usb_alloc_urb(0, GFP_KERNEL);"
    },
    {
        "line": 37,
        "fullcodeline": "pm->udev = udev;"
    },
    {
        "line": 38,
        "fullcodeline": "pm->intf = intf;"
    },
    {
        "line": 39,
        "fullcodeline": "pm->input = input_dev;"
    },
    {
        "line": 41,
        "fullcodeline": "usb_make_path(udev, pm->phys, sizeof(pm->phys));"
    },
    {
        "line": 42,
        "fullcodeline": "strlcat(pm->phys, \"/input0\", sizeof(pm->phys));"
    },
    {
        "line": 44,
        "fullcodeline": "spin_lock_init(&pm->lock);"
    },
    {
        "line": 59,
        "fullcodeline": "input_dev->phys = pm->phys;"
    },
    {
        "line": 60,
        "fullcodeline": "usb_to_input_id(udev, &input_dev->id);"
    },
    {
        "line": 61,
        "fullcodeline": "input_dev->dev.parent = &intf->dev;"
    },
    {
        "line": 63,
        "fullcodeline": "input_set_drvdata(input_dev, pm);"
    },
    {
        "line": 65,
        "fullcodeline": "input_dev->event = powermate_input_event;"
    },
    {
        "line": 67,
        "fullcodeline": "input_dev->evbit[0] = BIT_MASK(EV_KEY) | BIT_MASK(EV_REL) |"
    },
    {
        "line": 69,
        "fullcodeline": "input_dev->keybit[BIT_WORD(BTN_0)] = BIT_MASK(BTN_0);"
    },
    {
        "line": 70,
        "fullcodeline": "input_dev->relbit[BIT_WORD(REL_DIAL)] = BIT_MASK(REL_DIAL);"
    },
    {
        "line": 71,
        "fullcodeline": "input_dev->mscbit[BIT_WORD(MSC_PULSELED)] = BIT_MASK(MSC_PULSELED);"
    },
    {
        "line": 74,
        "fullcodeline": "pipe = usb_rcvintpipe(udev, endpoint->bEndpointAddress);"
    },
    {
        "line": 75,
        "fullcodeline": "maxp = usb_maxpacket(udev, pipe, usb_pipeout(pipe));"
    },
    {
        "line": 83,
        "fullcodeline": "usb_fill_int_urb(pm->irq, udev, pipe, pm->data,"
    },
    {
        "line": 86,
        "fullcodeline": "pm->irq->transfer_dma = pm->data_dma;"
    },
    {
        "line": 87,
        "fullcodeline": "pm->irq->transfer_flags |= URB_NO_TRANSFER_DMA_MAP;"
    },
    {
        "line": 95,
        "fullcodeline": "error = input_register_device(pm->input);"
    },
    {
        "line": 101,
        "fullcodeline": "pm->requires_update = UPDATE_PULSE_ASLEEP | UPDATE_PULSE_AWAKE | UPDATE_PULSE_MODE | UPDATE_STATIC_BRIGHTNESS;"
    },
    {
        "line": 102,
        "fullcodeline": "powermate_pulse_led(pm, 0x80, 255, 0, 1, 0); // set default pulse parameters"
    },
    {
        "line": 104,
        "fullcodeline": "usb_set_intfdata(intf, pm);"
    },
    {
        "line": 107,
        "fullcodeline": "fail5:\tusb_kill_urb(pm->irq);"
    },
    {
        "line": 108,
        "fullcodeline": "fail4:\tusb_free_urb(pm->config);"
    },
    {
        "line": 109,
        "fullcodeline": "fail3:\tusb_free_urb(pm->irq);"
    },
    {
        "line": 110,
        "fullcodeline": "fail2:\tpowermate_free_buffers(udev, pm);"
    },
    {
        "line": 111,
        "fullcodeline": "fail1:\tinput_free_device(input_dev);"
    },
    {
        "line": 112,
        "fullcodeline": "kfree(pm);"
    },
    {
        "line": 13,
        "fullcodeline": "if (!usb_endpoint_is_int_in(endpoint))"
    },
    {
        "line": 17,
        "fullcodeline": "0x0a, USB_TYPE_CLASS | USB_RECIP_INTERFACE,"
    },
    {
        "line": 23,
        "fullcodeline": "if (!pm || !input_dev)"
    },
    {
        "line": 26,
        "fullcodeline": "if (powermate_alloc_buffers(udev, pm))"
    },
    {
        "line": 30,
        "fullcodeline": "if (!pm->irq)"
    },
    {
        "line": 34,
        "fullcodeline": "if (!pm->config)"
    },
    {
        "line": 77,
        "fullcodeline": "if (maxp < POWERMATE_PAYLOAD_SIZE_MIN || maxp > POWERMATE_PAYLOAD_SIZE_MAX) {"
    },
    {
        "line": 90,
        "fullcodeline": "if (usb_submit_urb(pm->irq, GFP_KERNEL)) {"
    },
    {
        "line": 48,
        "fullcodeline": "input_dev->name = pm_name_powermate;"
    },
    {
        "line": 51,
        "fullcodeline": "input_dev->name = pm_name_soundknob;"
    },
    {
        "line": 54,
        "fullcodeline": "input_dev->name = pm_name_soundknob;"
    },
    {
        "line": 68,
        "fullcodeline": "BIT_MASK(EV_MSC);"
    },
    {
        "line": 80,
        "fullcodeline": "maxp = POWERMATE_PAYLOAD_SIZE_MAX;"
    },
    {
        "line": 91,
        "fullcodeline": "error = -EIO;"
    },
    {
        "line": 14,
        "fullcodeline": "return -EIO;"
    }
]