[
    {
        "line": 6,
        "fullcodeline": "bigint *bir = NULL;"
    },
    {
        "line": 7,
        "fullcodeline": "uint8_t *block = (uint8_t *)malloc(sig_len);"
    },
    {
        "line": 9,
        "fullcodeline": "const uint8_t *sig_prefix = NULL;"
    },
    {
        "line": 10,
        "fullcodeline": "uint8_t sig_prefix_size = 0, hash_len = 0;"
    },
    {
        "line": 43,
        "fullcodeline": "dat_bi = bi_import(ctx, sig, sig_len);"
    },
    {
        "line": 44,
        "fullcodeline": "ctx->mod_offset = BIGINT_M_OFFSET;"
    },
    {
        "line": 47,
        "fullcodeline": "decrypted_bi = bi_mod_power2(ctx, dat_bi, modulus, pub_exp);"
    },
    {
        "line": 49,
        "fullcodeline": "bi_export(ctx, decrypted_bi, block, sig_len);"
    },
    {
        "line": 50,
        "fullcodeline": "ctx->mod_offset = BIGINT_M_OFFSET;"
    },
    {
        "line": 57,
        "fullcodeline": "i = 2; /* start at the first padding byte */"
    },
    {
        "line": 73,
        "fullcodeline": "bir = bi_import(ctx, block + i + sig_prefix_size, hash_len);"
    },
    {
        "line": 76,
        "fullcodeline": "free(block);"
    },
    {
        "line": 78,
        "fullcodeline": "bi_clear_cache(ctx);"
    },
    {
        "line": 39,
        "fullcodeline": "if (sig_len < 2 + 8 + 1 + sig_prefix_size + hash_len)"
    },
    {
        "line": 53,
        "fullcodeline": "if (block[0] != 0 || block[1] != 1)"
    },
    {
        "line": 58,
        "fullcodeline": "while (i < sig_len - 1 - sig_prefix_size - hash_len)"
    },
    {
        "line": 65,
        "fullcodeline": "if (block[i++] != 0)"
    },
    {
        "line": 69,
        "fullcodeline": "if (memcmp_P(block+i, sig_prefix, sig_prefix_size))"
    },
    {
        "line": 15,
        "fullcodeline": "sig_prefix = sig_prefix_md5;"
    },
    {
        "line": 16,
        "fullcodeline": "sig_prefix_size = sizeof(sig_prefix_md5);"
    },
    {
        "line": 19,
        "fullcodeline": "sig_prefix = sig_prefix_sha1;"
    },
    {
        "line": 20,
        "fullcodeline": "sig_prefix_size = sizeof(sig_prefix_sha1);"
    },
    {
        "line": 23,
        "fullcodeline": "sig_prefix = sig_prefix_sha256;"
    },
    {
        "line": 24,
        "fullcodeline": "sig_prefix_size = sizeof(sig_prefix_sha256);"
    },
    {
        "line": 27,
        "fullcodeline": "sig_prefix = sig_prefix_sha384;"
    },
    {
        "line": 28,
        "fullcodeline": "sig_prefix_size = sizeof(sig_prefix_sha384);"
    },
    {
        "line": 31,
        "fullcodeline": "sig_prefix = sig_prefix_sha512;"
    },
    {
        "line": 32,
        "fullcodeline": "sig_prefix_size = sizeof(sig_prefix_sha512);"
    },
    {
        "line": 36,
        "fullcodeline": "hash_len = sig_prefix[sig_prefix_size - 1];"
    },
    {
        "line": 60,
        "fullcodeline": "if (block[i++] != 0xFF)"
    }
]