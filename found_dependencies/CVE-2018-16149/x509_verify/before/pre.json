[
    {
        "line": 4,
        "fullcodeline": "int ret = X509_OK, i = 0;"
    },
    {
        "line": 6,
        "fullcodeline": "X509_CTX *next_cert = NULL;"
    },
    {
        "line": 7,
        "fullcodeline": "BI_CTX *ctx = NULL;"
    },
    {
        "line": 8,
        "fullcodeline": "bigint *mod = NULL, *expn = NULL;"
    },
    {
        "line": 9,
        "fullcodeline": "int match_ca_cert = 0;"
    },
    {
        "line": 11,
        "fullcodeline": "uint8_t is_self_signed = 0;"
    },
    {
        "line": 29,
        "fullcodeline": "gettimeofday(&tv, NULL);"
    },
    {
        "line": 72,
        "fullcodeline": "next_cert = cert->next;"
    },
    {
        "line": 135,
        "fullcodeline": "cert_sig = sig_verify(ctx, cert->signature, cert->sig_len,"
    },
    {
        "line": 151,
        "fullcodeline": "bi_clear_cache(ctx);"
    },
    {
        "line": 13,
        "fullcodeline": "if (cert == NULL)"
    },
    {
        "line": 21,
        "fullcodeline": "if (asn1_compare_dn(cert->ca_cert_dn, cert->cert_dn) == 0)"
    },
    {
        "line": 32,
        "fullcodeline": "if (tv.tv_sec < cert->not_before)"
    },
    {
        "line": 39,
        "fullcodeline": "if (tv.tv_sec > cert->not_after)"
    },
    {
        "line": 75,
        "fullcodeline": "if (next_cert == NULL)"
    },
    {
        "line": 128,
        "fullcodeline": "if (!match_ca_cert && is_self_signed)"
    },
    {
        "line": 138,
        "fullcodeline": "if (cert_sig && cert->digest)"
    },
    {
        "line": 157,
        "fullcodeline": "if (next_cert != NULL)"
    },
    {
        "line": 15,
        "fullcodeline": "ret = X509_VFY_ERROR_NO_TRUSTED_CERT;"
    },
    {
        "line": 23,
        "fullcodeline": "is_self_signed = 1;"
    },
    {
        "line": 24,
        "fullcodeline": "ctx = cert->rsa_ctx->bi_ctx;"
    },
    {
        "line": 25,
        "fullcodeline": "mod = cert->rsa_ctx->m;"
    },
    {
        "line": 26,
        "fullcodeline": "expn = cert->rsa_ctx->e;"
    },
    {
        "line": 34,
        "fullcodeline": "ret = X509_VFY_ERROR_NOT_YET_VALID;"
    },
    {
        "line": 41,
        "fullcodeline": "ret = X509_VFY_ERROR_EXPIRED;"
    },
    {
        "line": 130,
        "fullcodeline": "ret = X509_VFY_ERROR_SELF_SIGNED;"
    },
    {
        "line": 136,
        "fullcodeline": "bi_clone(ctx, mod), bi_clone(ctx, expn));"
    },
    {
        "line": 144,
        "fullcodeline": "bi_free(ctx, cert_sig);"
    },
    {
        "line": 159,
        "fullcodeline": "(*pathLenConstraint)++; /* don't include last certificate */"
    },
    {
        "line": 160,
        "fullcodeline": "ret = x509_verify(ca_cert_ctx, next_cert, pathLenConstraint);"
    },
    {
        "line": 50,
        "fullcodeline": "if (!cert->basic_constraint_cA &&"
    },
    {
        "line": 62,
        "fullcodeline": "if (cert->basic_constraint_cA &&"
    },
    {
        "line": 77,
        "fullcodeline": "if (ca_cert_ctx != NULL)"
    },
    {
        "line": 108,
        "fullcodeline": "if (!match_ca_cert && !is_self_signed)"
    },
    {
        "line": 140,
        "fullcodeline": "if (bi_compare(cert_sig, cert->digest) != 0)"
    },
    {
        "line": 148,
        "fullcodeline": "ret = X509_VFY_ERROR_BAD_SIGNATURE;"
    },
    {
        "line": 51,
        "fullcodeline": "IS_SET_KEY_USAGE_FLAG(cert, KEY_USAGE_KEY_CERT_SIGN))"
    },
    {
        "line": 53,
        "fullcodeline": "ret = X509_VFY_ERROR_BASIC_CONSTRAINT;"
    },
    {
        "line": 65,
        "fullcodeline": "(cert->basic_constraint_pathLenConstraint+1) < *pathLenConstraint)"
    },
    {
        "line": 67,
        "fullcodeline": "ret = X509_VFY_ERROR_BASIC_CONSTRAINT;"
    },
    {
        "line": 110,
        "fullcodeline": "ret = X509_VFY_ERROR_NO_TRUSTED_CERT;"
    },
    {
        "line": 114,
        "fullcodeline": "else if (asn1_compare_dn(cert->ca_cert_dn, next_cert->cert_dn) != 0)"
    },
    {
        "line": 141,
        "fullcodeline": "ret = X509_VFY_ERROR_BAD_SIGNATURE;"
    },
    {
        "line": 63,
        "fullcodeline": "(!cert->key_usage_present ||"
    },
    {
        "line": 80,
        "fullcodeline": "while (i < CONFIG_X509_MAX_CA_CERTS && ca_cert_ctx->cert[i])"
    },
    {
        "line": 117,
        "fullcodeline": "ret = X509_VFY_ERROR_INVALID_CHAIN;"
    },
    {
        "line": 64,
        "fullcodeline": "IS_SET_KEY_USAGE_FLAG(cert, KEY_USAGE_KEY_CERT_SIGN)) &&"
    },
    {
        "line": 102,
        "fullcodeline": "i++;"
    },
    {
        "line": 122,
        "fullcodeline": "ctx = next_cert->rsa_ctx->bi_ctx;"
    },
    {
        "line": 123,
        "fullcodeline": "mod = next_cert->rsa_ctx->m;"
    },
    {
        "line": 124,
        "fullcodeline": "expn = next_cert->rsa_ctx->e;"
    },
    {
        "line": 85,
        "fullcodeline": "if (cert->basic_constraint_present &&"
    },
    {
        "line": 89,
        "fullcodeline": "if (asn1_compare_dn(cert->ca_cert_dn,"
    },
    {
        "line": 86,
        "fullcodeline": "!ca_cert_ctx->cert[i]->basic_constraint_cA)"
    },
    {
        "line": 93,
        "fullcodeline": "match_ca_cert = true;"
    },
    {
        "line": 94,
        "fullcodeline": "ctx = ca_cert_ctx->cert[i]->rsa_ctx->bi_ctx;"
    },
    {
        "line": 95,
        "fullcodeline": "mod = ca_cert_ctx->cert[i]->rsa_ctx->m;"
    },
    {
        "line": 96,
        "fullcodeline": "expn = ca_cert_ctx->cert[i]->rsa_ctx->e;"
    }
]