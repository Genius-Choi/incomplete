[
    {
        "line": 6,
        "fullcodeline": "struct SessionHandle *data = conn->data;"
    },
    {
        "line": 7,
        "fullcodeline": "struct pingpong *pp = &smtpc->pp;"
    },
    {
        "line": 9,
        "fullcodeline": "char localhost[HOSTNAME_MAX + 1];"
    },
    {
        "line": 11,
        "fullcodeline": "*done = FALSE; /* default to not done yet */"
    },
    {
        "line": 15,
        "fullcodeline": "Curl_reset_reqproto(conn);"
    },
    {
        "line": 17,
        "fullcodeline": "result = smtp_init(conn);"
    },
    {
        "line": 22,
        "fullcodeline": "conn->bits.close = FALSE;"
    },
    {
        "line": 24,
        "fullcodeline": "pp->response_time = RESP_TIMEOUT; /* set default response time-out */"
    },
    {
        "line": 25,
        "fullcodeline": "pp->statemach_act = smtp_statemach_act;"
    },
    {
        "line": 26,
        "fullcodeline": "pp->endofresp = smtp_endofresp;"
    },
    {
        "line": 27,
        "fullcodeline": "pp->conn = conn;"
    },
    {
        "line": 65,
        "fullcodeline": "Curl_pp_init(pp); /* init the response reader stuff */"
    },
    {
        "line": 67,
        "fullcodeline": "pp->response_time = RESP_TIMEOUT; /* set default response time-out */"
    },
    {
        "line": 68,
        "fullcodeline": "pp->statemach_act = smtp_statemach_act;"
    },
    {
        "line": 69,
        "fullcodeline": "pp->endofresp = smtp_endofresp;"
    },
    {
        "line": 70,
        "fullcodeline": "pp->conn = conn;"
    },
    {
        "line": 80,
        "fullcodeline": "result = Curl_urldecode(conn->data, path, 0, &smtpc->domain, NULL, TRUE);"
    },
    {
        "line": 86,
        "fullcodeline": "state(conn, SMTP_SERVERGREET);"
    },
    {
        "line": 18,
        "fullcodeline": "if(CURLE_OK != result)"
    },
    {
        "line": 56,
        "fullcodeline": "if((conn->handler->protocol & CURLPROTO_SMTPS) &&"
    },
    {
        "line": 88,
        "fullcodeline": "if(data->state.used_interface == Curl_if_multi)"
    },
    {
        "line": 44,
        "fullcodeline": "memset(&http_proxy, 0, sizeof(http_proxy));"
    },
    {
        "line": 45,
        "fullcodeline": "data->state.proto.http = &http_proxy;"
    },
    {
        "line": 47,
        "fullcodeline": "result = Curl_proxyCONNECT(conn, FIRSTSOCKET,"
    },
    {
        "line": 50,
        "fullcodeline": "data->state.proto.smtp = smtp_save;"
    },
    {
        "line": 57,
        "fullcodeline": "data->state.used_interface != Curl_if_multi) {"
    },
    {
        "line": 60,
        "fullcodeline": "result = Curl_ssl_connect(conn, FIRSTSOCKET);"
    },
    {
        "line": 89,
        "fullcodeline": "result = smtp_multi_statemach(conn, done);"
    },
    {
        "line": 52,
        "fullcodeline": "if(CURLE_OK != result)"
    },
    {
        "line": 73,
        "fullcodeline": "if(!Curl_gethostname(localhost, sizeof localhost))"
    },
    {
        "line": 91,
        "fullcodeline": "result = smtp_easy_statemach(conn);"
    },
    {
        "line": 74,
        "fullcodeline": "path = localhost;"
    },
    {
        "line": 92,
        "fullcodeline": "if(!result)"
    },
    {
        "line": 76,
        "fullcodeline": "path = \"localhost\";"
    },
    {
        "line": 93,
        "fullcodeline": "*done = TRUE;"
    }
]