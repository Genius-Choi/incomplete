[
    {
        "line": 4,
        "fullcodeline": "mk_ptr_t message, *page = 0;"
    },
    {
        "line": 9,
        "fullcodeline": "mk_header_set_http_status(sr, http_status);"
    },
    {
        "line": 51,
        "fullcodeline": "mk_ptr_reset(&message);"
    },
    {
        "line": 118,
        "fullcodeline": "sr->headers.location = NULL;"
    },
    {
        "line": 119,
        "fullcodeline": "sr->headers.cgi = SH_NOCGI;"
    },
    {
        "line": 130,
        "fullcodeline": "mk_header_send(cs->socket, cs, sr);"
    },
    {
        "line": 141,
        "fullcodeline": "mk_server_cork_flag(cs->socket, TCP_CORK_OFF);"
    },
    {
        "line": 15,
        "fullcodeline": "if (http_status != MK_CLIENT_LENGTH_REQUIRED &&"
    },
    {
        "line": 121,
        "fullcodeline": "sr->headers.last_modified = -1;"
    },
    {
        "line": 123,
        "fullcodeline": "if (!page) {"
    },
    {
        "line": 17,
        "fullcodeline": "http_status != MK_CLIENT_REQUEST_ENTITY_TOO_LARGE) {"
    },
    {
        "line": 20,
        "fullcodeline": "mk_list_foreach(head, &sr->host_conf->error_pages) {"
    },
    {
        "line": 55,
        "fullcodeline": "page = mk_request_set_default_page(\"Bad Request\","
    },
    {
        "line": 61,
        "fullcodeline": "page = mk_request_set_default_page(\"Forbidden\","
    },
    {
        "line": 69,
        "fullcodeline": "page = mk_request_set_default_page(\"Not Found\","
    },
    {
        "line": 78,
        "fullcodeline": "page = mk_request_set_default_page(\"Entity too large\","
    },
    {
        "line": 85,
        "fullcodeline": "page = mk_request_set_default_page(\"Method Not Allowed\","
    },
    {
        "line": 95,
        "fullcodeline": "page = mk_request_set_default_page(\"Method Not Implemented\","
    },
    {
        "line": 101,
        "fullcodeline": "page = mk_request_set_default_page(\"Internal Server Error\","
    },
    {
        "line": 107,
        "fullcodeline": "mk_ptr_reset(&message);"
    },
    {
        "line": 108,
        "fullcodeline": "page = mk_request_set_default_page(\"HTTP Version Not Supported\","
    },
    {
        "line": 136,
        "fullcodeline": "mk_ptr_free(page);"
    },
    {
        "line": 16,
        "fullcodeline": "http_status != MK_CLIENT_BAD_REQUEST &&"
    },
    {
        "line": 27,
        "fullcodeline": "ret = mk_file_get_info(entry->real_path, &finfo);"
    },
    {
        "line": 33,
        "fullcodeline": "fd = open(entry->real_path, config->open_flags);"
    },
    {
        "line": 38,
        "fullcodeline": "sr->fd_file   = fd;"
    },
    {
        "line": 39,
        "fullcodeline": "sr->fd_is_fdt = MK_FALSE;"
    },
    {
        "line": 40,
        "fullcodeline": "sr->bytes_to_send = finfo.size;"
    },
    {
        "line": 41,
        "fullcodeline": "sr->headers.content_length = finfo.size;"
    },
    {
        "line": 42,
        "fullcodeline": "sr->headers.real_length    = finfo.size;"
    },
    {
        "line": 44,
        "fullcodeline": "memcpy(&sr->file_info, &finfo, sizeof(struct file_info));"
    },
    {
        "line": 46,
        "fullcodeline": "mk_header_send(cs->socket, cs, sr);"
    },
    {
        "line": 133,
        "fullcodeline": "if (sr->method != MK_HTTP_METHOD_HEAD)"
    },
    {
        "line": 22,
        "fullcodeline": "if (entry->status != http_status) {"
    },
    {
        "line": 28,
        "fullcodeline": "if (ret == -1) {"
    },
    {
        "line": 34,
        "fullcodeline": "if (fd == -1) {"
    },
    {
        "line": 47,
        "fullcodeline": "return mk_http_send_file(cs, sr);"
    },
    {
        "line": 134,
        "fullcodeline": "mk_socket_send(cs->socket, page->data, page->len);"
    }
]