[
    {
        "line": 4,
        "fullcodeline": "module_ = module;"
    },
    {
        "line": 5,
        "fullcodeline": "all_ivalues_.clear();"
    },
    {
        "line": 6,
        "fullcodeline": "all_types_.clear();"
    },
    {
        "line": 7,
        "fullcodeline": "storages_.clear();"
    },
    {
        "line": 8,
        "fullcodeline": "storage_loaded_.clear();"
    },
    {
        "line": 9,
        "fullcodeline": "module_parsed_ = false;"
    },
    {
        "line": 11,
        "fullcodeline": "const auto* ivalues = module->ivalues();"
    },
    {
        "line": 12,
        "fullcodeline": "TORCH_CHECK("
    },
    {
        "line": 15,
        "fullcodeline": "TORCH_CHECK("
    },
    {
        "line": 17,
        "fullcodeline": "all_ivalues_.resize(ivalues->size());"
    },
    {
        "line": 18,
        "fullcodeline": "all_types_.resize(module->object_types()->size());"
    },
    {
        "line": 19,
        "fullcodeline": "storages_.resize(module->storage_data_size());"
    },
    {
        "line": 20,
        "fullcodeline": "storage_loaded_.resize(module->storage_data_size(), false);"
    },
    {
        "line": 22,
        "fullcodeline": "mobile_ivalue_size_ = module_->mobile_ivalue_size();"
    },
    {
        "line": 33,
        "fullcodeline": "IValue& module_ivalue = getIValue(module->state_obj());"
    },
    {
        "line": 43,
        "fullcodeline": "module_parsed_ = true;"
    },
    {
        "line": 44,
        "fullcodeline": "auto m = mobile::Module(module_ivalue.toObject(), mcu_);"
    },
    {
        "line": 45,
        "fullcodeline": "m.set_min_operator_version(module->operator_version());"
    },
    {
        "line": 46,
        "fullcodeline": "m.set_bytecode_version(module->bytecode_version());"
    },
    {
        "line": 13,
        "fullcodeline": "ivalues && module->object_types(),"
    },
    {
        "line": 16,
        "fullcodeline": "reinterpret_cast<const char*>(ivalues) < end, \"Corrupted ivalues field\");"
    },
    {
        "line": 23,
        "fullcodeline": "if (mobile_ivalue_size_ == 0) {"
    },
    {
        "line": 27,
        "fullcodeline": "for (uint32_t i = 0; i < mobile_ivalue_size_; i++) {"
    },
    {
        "line": 24,
        "fullcodeline": "mobile_ivalue_size_ = ivalues->size();"
    },
    {
        "line": 28,
        "fullcodeline": "const auto* ival = ivalues->Get(i);"
    },
    {
        "line": 29,
        "fullcodeline": "TORCH_CHECK("
    },
    {
        "line": 31,
        "fullcodeline": "parseAndPopulate(i, ival);"
    },
    {
        "line": 37,
        "fullcodeline": "uint32_t class_index ="
    },
    {
        "line": 39,
        "fullcodeline": "ClassTypePtr class_type = all_types_[class_index];"
    },
    {
        "line": 40,
        "fullcodeline": "class_type->addMethod(f.second);"
    },
    {
        "line": 30,
        "fullcodeline": "reinterpret_cast<const char*>(ival) < end, \"Corrupted ivalue item\")"
    },
    {
        "line": 38,
        "fullcodeline": "ivalues->Get(f.first)->val_as_Function()->class_type();"
    }
]