[
    {
        "line": 3,
        "fullcodeline": "int full = 0, at_tail = 0, at_head = 0, full_next = 0, full_prev = 0;"
    },
    {
        "line": 4,
        "fullcodeline": "int fill = quicklist->fill;"
    },
    {
        "line": 5,
        "fullcodeline": "quicklistNode *node = entry->node;"
    },
    {
        "line": 6,
        "fullcodeline": "quicklistNode *new_node = NULL;"
    },
    {
        "line": 108,
        "fullcodeline": "quicklist->count++;"
    },
    {
        "line": 8,
        "fullcodeline": "if (!node) {"
    },
    {
        "line": 20,
        "fullcodeline": "if (!_quicklistNodeAllowInsert(node, fill, sz)) {"
    },
    {
        "line": 26,
        "fullcodeline": "if (after && (entry->offset == node->count)) {"
    },
    {
        "line": 35,
        "fullcodeline": "if (!after && (entry->offset == 0)) {"
    },
    {
        "line": 45,
        "fullcodeline": "if (!full && after) {"
    },
    {
        "line": 10,
        "fullcodeline": "D(\"No node given!\");"
    },
    {
        "line": 11,
        "fullcodeline": "new_node = quicklistCreateNode();"
    },
    {
        "line": 12,
        "fullcodeline": "new_node->zl = ziplistPush(ziplistNew(), value, sz, ZIPLIST_HEAD);"
    },
    {
        "line": 13,
        "fullcodeline": "__quicklistInsertNode(quicklist, NULL, new_node, after);"
    },
    {
        "line": 14,
        "fullcodeline": "new_node->count++;"
    },
    {
        "line": 15,
        "fullcodeline": "quicklist->count++;"
    },
    {
        "line": 21,
        "fullcodeline": "D(\"Current node is full with count %d with requested fill %lu\","
    },
    {
        "line": 23,
        "fullcodeline": "full = 1;"
    },
    {
        "line": 27,
        "fullcodeline": "D(\"At Tail of current ziplist\");"
    },
    {
        "line": 28,
        "fullcodeline": "at_tail = 1;"
    },
    {
        "line": 36,
        "fullcodeline": "D(\"At Head\");"
    },
    {
        "line": 37,
        "fullcodeline": "at_head = 1;"
    },
    {
        "line": 46,
        "fullcodeline": "D(\"Not full, inserting after current position.\");"
    },
    {
        "line": 47,
        "fullcodeline": "quicklistDecompressNodeForUse(node);"
    },
    {
        "line": 48,
        "fullcodeline": "unsigned char *next = ziplistNext(node->zl, entry->zi);"
    },
    {
        "line": 54,
        "fullcodeline": "node->count++;"
    },
    {
        "line": 55,
        "fullcodeline": "quicklistNodeUpdateSz(node);"
    },
    {
        "line": 56,
        "fullcodeline": "quicklistRecompressOnly(quicklist, node);"
    },
    {
        "line": 29,
        "fullcodeline": "if (!_quicklistNodeAllowInsert(node->next, fill, sz)) {"
    },
    {
        "line": 38,
        "fullcodeline": "if (!_quicklistNodeAllowInsert(node->prev, fill, sz)) {"
    },
    {
        "line": 49,
        "fullcodeline": "if (next == NULL) {"
    },
    {
        "line": 30,
        "fullcodeline": "D(\"Next node is full too.\");"
    },
    {
        "line": 31,
        "fullcodeline": "full_next = 1;"
    },
    {
        "line": 39,
        "fullcodeline": "D(\"Prev node is full too.\");"
    },
    {
        "line": 40,
        "fullcodeline": "full_prev = 1;"
    },
    {
        "line": 50,
        "fullcodeline": "node->zl = ziplistPush(node->zl, value, sz, ZIPLIST_TAIL);"
    },
    {
        "line": 57,
        "fullcodeline": "} else if (!full && !after) {"
    },
    {
        "line": 52,
        "fullcodeline": "node->zl = ziplistInsert(node->zl, next, value, sz);"
    },
    {
        "line": 58,
        "fullcodeline": "D(\"Not full, inserting before current position.\");"
    },
    {
        "line": 59,
        "fullcodeline": "quicklistDecompressNodeForUse(node);"
    },
    {
        "line": 60,
        "fullcodeline": "node->zl = ziplistInsert(node->zl, entry->zi, value, sz);"
    },
    {
        "line": 61,
        "fullcodeline": "node->count++;"
    },
    {
        "line": 62,
        "fullcodeline": "quicklistNodeUpdateSz(node);"
    },
    {
        "line": 63,
        "fullcodeline": "quicklistRecompressOnly(quicklist, node);"
    },
    {
        "line": 64,
        "fullcodeline": "} else if (full && at_tail && node->next && !full_next && after) {"
    },
    {
        "line": 67,
        "fullcodeline": "D(\"Full and tail, but next isn't full; inserting next node head\");"
    },
    {
        "line": 68,
        "fullcodeline": "new_node = node->next;"
    },
    {
        "line": 69,
        "fullcodeline": "quicklistDecompressNodeForUse(new_node);"
    },
    {
        "line": 70,
        "fullcodeline": "new_node->zl = ziplistPush(new_node->zl, value, sz, ZIPLIST_HEAD);"
    },
    {
        "line": 71,
        "fullcodeline": "new_node->count++;"
    },
    {
        "line": 72,
        "fullcodeline": "quicklistNodeUpdateSz(new_node);"
    },
    {
        "line": 73,
        "fullcodeline": "quicklistRecompressOnly(quicklist, new_node);"
    },
    {
        "line": 74,
        "fullcodeline": "} else if (full && at_head && node->prev && !full_prev && !after) {"
    },
    {
        "line": 77,
        "fullcodeline": "D(\"Full and head, but prev isn't full, inserting prev node tail\");"
    },
    {
        "line": 78,
        "fullcodeline": "new_node = node->prev;"
    },
    {
        "line": 79,
        "fullcodeline": "quicklistDecompressNodeForUse(new_node);"
    },
    {
        "line": 80,
        "fullcodeline": "new_node->zl = ziplistPush(new_node->zl, value, sz, ZIPLIST_TAIL);"
    },
    {
        "line": 81,
        "fullcodeline": "new_node->count++;"
    },
    {
        "line": 82,
        "fullcodeline": "quicklistNodeUpdateSz(new_node);"
    },
    {
        "line": 83,
        "fullcodeline": "quicklistRecompressOnly(quicklist, new_node);"
    },
    {
        "line": 84,
        "fullcodeline": "} else if (full && ((at_tail && node->next && full_next && after) ||"
    },
    {
        "line": 88,
        "fullcodeline": "D(\"\\tprovisioning new node...\");"
    },
    {
        "line": 89,
        "fullcodeline": "new_node = quicklistCreateNode();"
    },
    {
        "line": 90,
        "fullcodeline": "new_node->zl = ziplistPush(ziplistNew(), value, sz, ZIPLIST_HEAD);"
    },
    {
        "line": 91,
        "fullcodeline": "new_node->count++;"
    },
    {
        "line": 92,
        "fullcodeline": "quicklistNodeUpdateSz(new_node);"
    },
    {
        "line": 93,
        "fullcodeline": "__quicklistInsertNode(quicklist, node, new_node, after);"
    },
    {
        "line": 85,
        "fullcodeline": "(at_head && node->prev && full_prev && !after))) {"
    },
    {
        "line": 97,
        "fullcodeline": "D(\"\\tsplitting node...\");"
    },
    {
        "line": 98,
        "fullcodeline": "quicklistDecompressNodeForUse(node);"
    },
    {
        "line": 99,
        "fullcodeline": "new_node = _quicklistSplitNode(node, entry->offset, after);"
    },
    {
        "line": 100,
        "fullcodeline": "new_node->zl = ziplistPush(new_node->zl, value, sz,"
    },
    {
        "line": 102,
        "fullcodeline": "new_node->count++;"
    },
    {
        "line": 103,
        "fullcodeline": "quicklistNodeUpdateSz(new_node);"
    },
    {
        "line": 104,
        "fullcodeline": "__quicklistInsertNode(quicklist, node, new_node, after);"
    },
    {
        "line": 105,
        "fullcodeline": "_quicklistMergeNodes(quicklist, node);"
    },
    {
        "line": 101,
        "fullcodeline": "after ? ZIPLIST_HEAD : ZIPLIST_TAIL);"
    }
]