[
    {
        "line": 2,
        "fullcodeline": "robj *o = NULL, *ele, *dec;"
    },
    {
        "line": 6,
        "fullcodeline": "if (rdbtype == RDB_TYPE_STRING) {"
    },
    {
        "line": 9,
        "fullcodeline": "o = tryObjectEncoding(o);"
    },
    {
        "line": 8,
        "fullcodeline": "if ((o = rdbLoadEncodedStringObject(rdb)) == NULL) return NULL;"
    },
    {
        "line": 10,
        "fullcodeline": "} else if (rdbtype == RDB_TYPE_LIST) {"
    },
    {
        "line": 14,
        "fullcodeline": "o = createQuicklistObject();"
    },
    {
        "line": 15,
        "fullcodeline": "quicklistSetOptions(o->ptr, server.list_max_ziplist_size,"
    },
    {
        "line": 12,
        "fullcodeline": "if ((len = rdbLoadLen(rdb,NULL)) == RDB_LENERR) return NULL;"
    },
    {
        "line": 24,
        "fullcodeline": "dec = getDecodedObject(ele);"
    },
    {
        "line": 25,
        "fullcodeline": "size_t len = sdslen(dec->ptr);"
    },
    {
        "line": 26,
        "fullcodeline": "quicklistPushTail(o->ptr, dec->ptr, len);"
    },
    {
        "line": 30,
        "fullcodeline": "} else if (rdbtype == RDB_TYPE_SET) {"
    },
    {
        "line": 20,
        "fullcodeline": "if ((ele = rdbLoadEncodedStringObject(rdb)) == NULL) {"
    },
    {
        "line": 35,
        "fullcodeline": "size_t max_entries = server.set_max_intset_entries;"
    },
    {
        "line": 36,
        "fullcodeline": "if (max_entries >= 1<<30) max_entries = 1<<30;"
    },
    {
        "line": 37,
        "fullcodeline": "if (len > max_entries) {"
    },
    {
        "line": 48,
        "fullcodeline": "for (i = 0; i < len; i++) {"
    },
    {
        "line": 32,
        "fullcodeline": "if ((len = rdbLoadLen(rdb,NULL)) == RDB_LENERR) return NULL;"
    },
    {
        "line": 38,
        "fullcodeline": "o = createSetObject();"
    },
    {
        "line": 41,
        "fullcodeline": "if (len > DICT_HT_INITIAL_SIZE)"
    },
    {
        "line": 44,
        "fullcodeline": "o = createIntsetObject();"
    },
    {
        "line": 52,
        "fullcodeline": "if ((sdsele = rdbGenericLoadStringObject(rdb,RDB_LOAD_SDS,NULL)) == NULL) {"
    },
    {
        "line": 57,
        "fullcodeline": "if (o->encoding == OBJ_ENCODING_INTSET) {"
    },
    {
        "line": 69,
        "fullcodeline": "if (o->encoding == OBJ_ENCODING_HT) {"
    },
    {
        "line": 75,
        "fullcodeline": "} else if (rdbtype == RDB_TYPE_ZSET_2 || rdbtype == RDB_TYPE_ZSET) {"
    },
    {
        "line": 78,
        "fullcodeline": "size_t maxelelen = 0, totelelen = 0;"
    },
    {
        "line": 82,
        "fullcodeline": "o = createZsetObject();"
    },
    {
        "line": 83,
        "fullcodeline": "zs = o->ptr;"
    },
    {
        "line": 42,
        "fullcodeline": "dictExpand(o->ptr,len);"
    },
    {
        "line": 70,
        "fullcodeline": "dictAdd((dict*)o->ptr,sdsele,NULL);"
    },
    {
        "line": 85,
        "fullcodeline": "if (zsetlen > DICT_HT_INITIAL_SIZE)"
    },
    {
        "line": 59,
        "fullcodeline": "if (isSdsRepresentableAsLongLong(sdsele,&llval) == C_OK) {"
    },
    {
        "line": 81,
        "fullcodeline": "if ((zsetlen = rdbLoadLen(rdb,NULL)) == RDB_LENERR) return NULL;"
    },
    {
        "line": 86,
        "fullcodeline": "dictExpand(zs->dict,zsetlen);"
    },
    {
        "line": 115,
        "fullcodeline": "totelelen += sdslen(sdsele);"
    },
    {
        "line": 117,
        "fullcodeline": "znode = zslInsert(zs->zsl,score,sdsele);"
    },
    {
        "line": 122,
        "fullcodeline": "if (zsetLength(o) <= server.zset_max_ziplist_entries &&"
    },
    {
        "line": 124,
        "fullcodeline": "ziplistSafeToAdd(NULL, totelelen))"
    },
    {
        "line": 126,
        "fullcodeline": "zsetConvert(o,OBJ_ENCODING_ZIPLIST);"
    },
    {
        "line": 128,
        "fullcodeline": "} else if (rdbtype == RDB_TYPE_HASH) {"
    },
    {
        "line": 60,
        "fullcodeline": "o->ptr = intsetAdd(o->ptr,llval,NULL);"
    },
    {
        "line": 94,
        "fullcodeline": "if ((sdsele = rdbGenericLoadStringObject(rdb,RDB_LOAD_SDS,NULL)) == NULL) {"
    },
    {
        "line": 114,
        "fullcodeline": "if (sdslen(sdsele) > maxelelen) maxelelen = sdslen(sdsele);"
    },
    {
        "line": 123,
        "fullcodeline": "maxelelen <= server.zset_max_ziplist_value &&"
    },
    {
        "line": 133,
        "fullcodeline": "len = rdbLoadLen(rdb, NULL);"
    },
    {
        "line": 136,
        "fullcodeline": "o = createHashObject();"
    },
    {
        "line": 62,
        "fullcodeline": "setTypeConvert(o,OBJ_ENCODING_HT);"
    },
    {
        "line": 63,
        "fullcodeline": "dictExpand(o->ptr,len);"
    },
    {
        "line": 134,
        "fullcodeline": "if (len == RDB_LENERR) return NULL;"
    },
    {
        "line": 139,
        "fullcodeline": "if (len > server.hash_max_ziplist_entries)"
    },
    {
        "line": 143,
        "fullcodeline": "while (o->encoding == OBJ_ENCODING_ZIPLIST && len > 0) {"
    },
    {
        "line": 204,
        "fullcodeline": "serverAssert(len == 0);"
    },
    {
        "line": 140,
        "fullcodeline": "hashTypeConvert(o, OBJ_ENCODING_HT);"
    },
    {
        "line": 144,
        "fullcodeline": "len--;"
    },
    {
        "line": 170,
        "fullcodeline": "o->ptr = ziplistPush(o->ptr, (unsigned char*)field,"
    },
    {
        "line": 172,
        "fullcodeline": "o->ptr = ziplistPush(o->ptr, (unsigned char*)value,"
    },
    {
        "line": 179,
        "fullcodeline": "if (o->encoding == OBJ_ENCODING_HT && len > DICT_HT_INITIAL_SIZE)"
    },
    {
        "line": 180,
        "fullcodeline": "dictExpand(o->ptr,len);"
    },
    {
        "line": 183,
        "fullcodeline": "while (o->encoding == OBJ_ENCODING_HT && len > 0) {"
    },
    {
        "line": 184,
        "fullcodeline": "len--;"
    },
    {
        "line": 197,
        "fullcodeline": "ret = dictAdd((dict*)o->ptr, field, value);"
    },
    {
        "line": 205,
        "fullcodeline": "} else if (rdbtype == RDB_TYPE_LIST_QUICKLIST) {"
    },
    {
        "line": 100,
        "fullcodeline": "if (rdbLoadBinaryDoubleValue(rdb,&score) == -1) {"
    },
    {
        "line": 146,
        "fullcodeline": "if ((field = rdbGenericLoadStringObject(rdb,RDB_LOAD_SDS,NULL)) == NULL) {"
    },
    {
        "line": 150,
        "fullcodeline": "if ((value = rdbGenericLoadStringObject(rdb,RDB_LOAD_SDS,NULL)) == NULL) {"
    },
    {
        "line": 186,
        "fullcodeline": "if ((field = rdbGenericLoadStringObject(rdb,RDB_LOAD_SDS,NULL)) == NULL) {"
    },
    {
        "line": 190,
        "fullcodeline": "if ((value = rdbGenericLoadStringObject(rdb,RDB_LOAD_SDS,NULL)) == NULL) {"
    },
    {
        "line": 207,
        "fullcodeline": "o = createQuicklistObject();"
    },
    {
        "line": 208,
        "fullcodeline": "quicklistSetOptions(o->ptr, server.list_max_ziplist_size,"
    },
    {
        "line": 106,
        "fullcodeline": "if (rdbLoadDoubleValue(rdb,&score) == -1) {"
    },
    {
        "line": 157,
        "fullcodeline": "if (sdslen(field) > server.hash_max_ziplist_value ||"
    },
    {
        "line": 159,
        "fullcodeline": "!ziplistSafeToAdd(o->ptr, sdslen(field)+sdslen(value)))"
    },
    {
        "line": 161,
        "fullcodeline": "hashTypeConvert(o, OBJ_ENCODING_HT);"
    },
    {
        "line": 162,
        "fullcodeline": "ret = dictAdd((dict*)o->ptr, field, value);"
    },
    {
        "line": 171,
        "fullcodeline": "sdslen(field), ZIPLIST_TAIL);"
    },
    {
        "line": 173,
        "fullcodeline": "sdslen(value), ZIPLIST_TAIL);"
    },
    {
        "line": 158,
        "fullcodeline": "sdslen(value) > server.hash_max_ziplist_value ||"
    },
    {
        "line": 163,
        "fullcodeline": "if (ret == DICT_ERR) {"
    },
    {
        "line": 206,
        "fullcodeline": "if ((len = rdbLoadLen(rdb,NULL)) == RDB_LENERR) return NULL;"
    },
    {
        "line": 212,
        "fullcodeline": "unsigned char *zl ="
    },
    {
        "line": 218,
        "fullcodeline": "quicklistAppendZiplist(o->ptr, zl);"
    },
    {
        "line": 213,
        "fullcodeline": "rdbGenericLoadStringObject(rdb,RDB_LOAD_PLAIN,NULL);"
    },
    {
        "line": 214,
        "fullcodeline": "if (zl == NULL) {"
    },
    {
        "line": 220,
        "fullcodeline": "} else if (rdbtype == RDB_TYPE_HASH_ZIPMAP  ||"
    },
    {
        "line": 224,
        "fullcodeline": "rdbtype == RDB_TYPE_HASH_ZIPLIST)"
    },
    {
        "line": 226,
        "fullcodeline": "unsigned char *encoded ="
    },
    {
        "line": 229,
        "fullcodeline": "o = createObject(OBJ_STRING,encoded); /* Obj type fixed below. */"
    },
    {
        "line": 223,
        "fullcodeline": "rdbtype == RDB_TYPE_ZSET_ZIPLIST ||"
    },
    {
        "line": 227,
        "fullcodeline": "rdbGenericLoadStringObject(rdb,RDB_LOAD_PLAIN,NULL);"
    },
    {
        "line": 228,
        "fullcodeline": "if (encoded == NULL) return NULL;"
    },
    {
        "line": 222,
        "fullcodeline": "rdbtype == RDB_TYPE_SET_INTSET   ||"
    },
    {
        "line": 272,
        "fullcodeline": "o->type = OBJ_LIST;"
    },
    {
        "line": 273,
        "fullcodeline": "o->encoding = OBJ_ENCODING_ZIPLIST;"
    },
    {
        "line": 274,
        "fullcodeline": "listTypeConvert(o,OBJ_ENCODING_QUICKLIST);"
    },
    {
        "line": 277,
        "fullcodeline": "o->type = OBJ_SET;"
    },
    {
        "line": 278,
        "fullcodeline": "o->encoding = OBJ_ENCODING_INTSET;"
    },
    {
        "line": 283,
        "fullcodeline": "o->type = OBJ_ZSET;"
    },
    {
        "line": 284,
        "fullcodeline": "o->encoding = OBJ_ENCODING_ZIPLIST;"
    },
    {
        "line": 289,
        "fullcodeline": "o->type = OBJ_HASH;"
    },
    {
        "line": 290,
        "fullcodeline": "o->encoding = OBJ_ENCODING_ZIPLIST;"
    },
    {
        "line": 299,
        "fullcodeline": "} else if (rdbtype == RDB_TYPE_STREAM_LISTPACKS) {"
    },
    {
        "line": 221,
        "fullcodeline": "rdbtype == RDB_TYPE_LIST_ZIPLIST ||"
    },
    {
        "line": 242,
        "fullcodeline": "unsigned char *zl = ziplistNew();"
    },
    {
        "line": 243,
        "fullcodeline": "unsigned char *zi = zipmapRewind(o->ptr);"
    },
    {
        "line": 246,
        "fullcodeline": "unsigned int maxlen = 0;"
    },
    {
        "line": 260,
        "fullcodeline": "o->ptr = zl;"
    },
    {
        "line": 261,
        "fullcodeline": "o->type = OBJ_HASH;"
    },
    {
        "line": 262,
        "fullcodeline": "o->encoding = OBJ_ENCODING_ZIPLIST;"
    },
    {
        "line": 300,
        "fullcodeline": "o = createStreamObject();"
    },
    {
        "line": 301,
        "fullcodeline": "stream *s = o->ptr;"
    },
    {
        "line": 302,
        "fullcodeline": "uint64_t listpacks = rdbLoadLen(rdb,NULL);"
    },
    {
        "line": 349,
        "fullcodeline": "s->length = rdbLoadLen(rdb,NULL);"
    },
    {
        "line": 362,
        "fullcodeline": "uint64_t cgroups_count = rdbLoadLen(rdb,NULL);"
    },
    {
        "line": 279,
        "fullcodeline": "if (intsetLen(o->ptr) > server.set_max_intset_entries)"
    },
    {
        "line": 280,
        "fullcodeline": "setTypeConvert(o,OBJ_ENCODING_HT);"
    },
    {
        "line": 285,
        "fullcodeline": "if (zsetLength(o) > server.zset_max_ziplist_entries)"
    },
    {
        "line": 286,
        "fullcodeline": "zsetConvert(o,OBJ_ENCODING_SKIPLIST);"
    },
    {
        "line": 291,
        "fullcodeline": "if (hashTypeLength(o) > server.hash_max_ziplist_entries)"
    },
    {
        "line": 292,
        "fullcodeline": "hashTypeConvert(o, OBJ_ENCODING_HT);"
    },
    {
        "line": 303,
        "fullcodeline": "if (listpacks == RDB_LENERR) {"
    },
    {
        "line": 352,
        "fullcodeline": "s->last_id.ms = rdbLoadLen(rdb,NULL);"
    },
    {
        "line": 353,
        "fullcodeline": "s->last_id.seq = rdbLoadLen(rdb,NULL);"
    },
    {
        "line": 355,
        "fullcodeline": "if (rioGetReadError(rdb)) {"
    },
    {
        "line": 363,
        "fullcodeline": "if (cgroups_count == RDB_LENERR) {"
    },
    {
        "line": 248,
        "fullcodeline": "while ((zi = zipmapNext(zi, &fstr, &flen, &vstr, &vlen)) != NULL) {"
    },
    {
        "line": 255,
        "fullcodeline": "zl = ziplistPush(zl, fstr, flen, ZIPLIST_TAIL);"
    },
    {
        "line": 256,
        "fullcodeline": "zl = ziplistPush(zl, vstr, vlen, ZIPLIST_TAIL);"
    },
    {
        "line": 264,
        "fullcodeline": "if (hashTypeLength(o) > server.hash_max_ziplist_entries ||"
    },
    {
        "line": 265,
        "fullcodeline": "maxlen > server.hash_max_ziplist_value)"
    },
    {
        "line": 267,
        "fullcodeline": "hashTypeConvert(o, OBJ_ENCODING_HT);"
    },
    {
        "line": 313,
        "fullcodeline": "sds nodekey = rdbGenericLoadStringObject(rdb,RDB_LOAD_SDS,NULL);"
    },
    {
        "line": 325,
        "fullcodeline": "unsigned char *lp ="
    },
    {
        "line": 333,
        "fullcodeline": "unsigned char *first = lpFirst(lp);"
    },
    {
        "line": 342,
        "fullcodeline": "int retval = raxInsert(s->rax,"
    },
    {
        "line": 373,
        "fullcodeline": "sds cgname = rdbGenericLoadStringObject(rdb,RDB_LOAD_SDS,NULL);"
    },
    {
        "line": 381,
        "fullcodeline": "cg_id.ms = rdbLoadLen(rdb,NULL);"
    },
    {
        "line": 382,
        "fullcodeline": "cg_id.seq = rdbLoadLen(rdb,NULL);"
    },
    {
        "line": 390,
        "fullcodeline": "streamCG *cgroup = streamCreateCG(s,cgname,sdslen(cgname),&cg_id);"
    },
    {
        "line": 401,
        "fullcodeline": "uint64_t pel_size = rdbLoadLen(rdb,NULL);"
    },
    {
        "line": 430,
        "fullcodeline": "uint64_t consumers_num = rdbLoadLen(rdb,NULL);"
    },
    {
        "line": 487,
        "fullcodeline": "} else if (rdbtype == RDB_TYPE_MODULE || rdbtype == RDB_TYPE_MODULE_2) {"
    },
    {
        "line": 249,
        "fullcodeline": "if (flen > maxlen) maxlen = flen;"
    },
    {
        "line": 250,
        "fullcodeline": "if (vlen > maxlen) maxlen = vlen;"
    },
    {
        "line": 314,
        "fullcodeline": "if (nodekey == NULL) {"
    },
    {
        "line": 326,
        "fullcodeline": "rdbGenericLoadStringObject(rdb,RDB_LOAD_PLAIN,NULL);"
    },
    {
        "line": 327,
        "fullcodeline": "if (lp == NULL) {"
    },
    {
        "line": 334,
        "fullcodeline": "if (first == NULL) {"
    },
    {
        "line": 374,
        "fullcodeline": "if (cgname == NULL) {"
    },
    {
        "line": 383,
        "fullcodeline": "if (rioGetReadError(rdb)) {"
    },
    {
        "line": 391,
        "fullcodeline": "if (cgroup == NULL)"
    },
    {
        "line": 402,
        "fullcodeline": "if (pel_size == RDB_LENERR) {"
    },
    {
        "line": 431,
        "fullcodeline": "if (consumers_num == RDB_LENERR) {"
    },
    {
        "line": 488,
        "fullcodeline": "uint64_t moduleid = rdbLoadLen(rdb,NULL);"
    },
    {
        "line": 493,
        "fullcodeline": "moduleType *mt = moduleTypeLookupModuleByID(moduleid);"
    },
    {
        "line": 494,
        "fullcodeline": "char name[10];"
    },
    {
        "line": 508,
        "fullcodeline": "initStaticStringObject(keyobj,key);"
    },
    {
        "line": 509,
        "fullcodeline": "moduleInitIOContext(io,mt,rdb,&keyobj);"
    },
    {
        "line": 510,
        "fullcodeline": "io.ver = (rdbtype == RDB_TYPE_MODULE) ? 1 : 2;"
    },
    {
        "line": 513,
        "fullcodeline": "void *ptr = mt->rdb_load(&io,moduleid&1023);"
    },
    {
        "line": 538,
        "fullcodeline": "o = createModuleObject(mt,ptr);"
    },
    {
        "line": 251,
        "fullcodeline": "if (!ziplistSafeToAdd(zl, (size_t)flen + vlen)) {"
    },
    {
        "line": 252,
        "fullcodeline": "rdbExitReportCorruptRDB(\"Hash zipmap too big (%u)\", flen);"
    },
    {
        "line": 319,
        "fullcodeline": "if (sdslen(nodekey) != sizeof(streamID)) {"
    },
    {
        "line": 392,
        "fullcodeline": "rdbExitReportCorruptRDB(\"Duplicated consumer group name %s\","
    },
    {
        "line": 414,
        "fullcodeline": "streamNACK *nack = streamCreateNACK(NULL);"
    },
    {
        "line": 415,
        "fullcodeline": "nack->delivery_time = rdbLoadMillisecondTime(rdb,RDB_VERSION);"
    },
    {
        "line": 416,
        "fullcodeline": "nack->delivery_count = rdbLoadLen(rdb,NULL);"
    },
    {
        "line": 437,
        "fullcodeline": "sds cname = rdbGenericLoadStringObject(rdb,RDB_LOAD_SDS,NULL);"
    },
    {
        "line": 444,
        "fullcodeline": "streamConsumer *consumer ="
    },
    {
        "line": 447,
        "fullcodeline": "consumer->seen_time = rdbLoadMillisecondTime(rdb,RDB_VERSION);"
    },
    {
        "line": 456,
        "fullcodeline": "pel_size = rdbLoadLen(rdb,NULL);"
    },
    {
        "line": 489,
        "fullcodeline": "if (rioGetReadError(rdb)) {"
    },
    {
        "line": 496,
        "fullcodeline": "if (rdbCheckMode && rdbtype == RDB_TYPE_MODULE_2) {"
    },
    {
        "line": 501,
        "fullcodeline": "if (mt == NULL) {"
    },
    {
        "line": 533,
        "fullcodeline": "if (ptr == NULL) {"
    },
    {
        "line": 417,
        "fullcodeline": "if (rioGetReadError(rdb)) {"
    },
    {
        "line": 438,
        "fullcodeline": "if (cname == NULL) {"
    },
    {
        "line": 445,
        "fullcodeline": "streamLookupConsumer(cgroup,cname,SLC_NONE);"
    },
    {
        "line": 448,
        "fullcodeline": "if (rioGetReadError(rdb)) {"
    },
    {
        "line": 457,
        "fullcodeline": "if (pel_size == RDB_LENERR) {"
    },
    {
        "line": 497,
        "fullcodeline": "moduleTypeNameByID(name,moduleid);"
    },
    {
        "line": 502,
        "fullcodeline": "moduleTypeNameByID(name,moduleid);"
    },
    {
        "line": 503,
        "fullcodeline": "serverLog(LL_WARNING,\"The RDB file contains module data I can't load: no matching module '%s'\", name);"
    },
    {
        "line": 515,
        "fullcodeline": "moduleFreeContext(io.ctx);"
    },
    {
        "line": 521,
        "fullcodeline": "uint64_t eof = rdbLoadLen(rdb,NULL);"
    },
    {
        "line": 534,
        "fullcodeline": "moduleTypeNameByID(name,moduleid);"
    },
    {
        "line": 409,
        "fullcodeline": "if (rioRead(rdb,rawid,sizeof(rawid)) == 0) {"
    },
    {
        "line": 423,
        "fullcodeline": "if (!raxInsert(cgroup->pel,rawid,sizeof(rawid),nack,NULL))"
    },
    {
        "line": 471,
        "fullcodeline": "streamNACK *nack = raxFind(cgroup->pel,rawid,sizeof(rawid));"
    },
    {
        "line": 479,
        "fullcodeline": "nack->consumer = consumer;"
    },
    {
        "line": 498,
        "fullcodeline": "return rdbLoadCheckModuleValue(rdb,name);"
    },
    {
        "line": 522,
        "fullcodeline": "if (eof == RDB_LENERR) {"
    },
    {
        "line": 527,
        "fullcodeline": "if (eof != RDB_MODULE_OPCODE_EOF) {"
    },
    {
        "line": 472,
        "fullcodeline": "if (nack == raxNotFound)"
    },
    {
        "line": 523,
        "fullcodeline": "o = createModuleObject(mt,ptr); /* creating just in order to easily destroy */"
    },
    {
        "line": 528,
        "fullcodeline": "serverLog(LL_WARNING,\"The RDB file contains module data for the module '%s' that is not terminated by the proper module value EOF marker\", name);"
    },
    {
        "line": 465,
        "fullcodeline": "if (rioRead(rdb,rawid,sizeof(rawid)) == 0) {"
    },
    {
        "line": 480,
        "fullcodeline": "if (!raxInsert(consumer->pel,rawid,sizeof(rawid),nack,NULL))"
    }
]