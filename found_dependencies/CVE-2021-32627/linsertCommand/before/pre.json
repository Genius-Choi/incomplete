[
    {
        "line": 6,
        "fullcodeline": "int inserted = 0;"
    },
    {
        "line": 21,
        "fullcodeline": "iter = listTypeInitIterator(subject,0,LIST_TAIL);"
    },
    {
        "line": 8,
        "fullcodeline": "if (strcasecmp(c->argv[2]->ptr,\"after\") == 0) {"
    },
    {
        "line": 22,
        "fullcodeline": "while (listTypeNext(iter,&entry)) {"
    },
    {
        "line": 42,
        "fullcodeline": "addReplyLongLong(c,listTypeLength(subject));"
    },
    {
        "line": 9,
        "fullcodeline": "where = LIST_TAIL;"
    },
    {
        "line": 17,
        "fullcodeline": "if ((subject = lookupKeyWriteOrReply(c,c->argv[1],shared.czero)) == NULL ||"
    },
    {
        "line": 18,
        "fullcodeline": "checkType(c,subject,OBJ_LIST)) return;"
    },
    {
        "line": 32,
        "fullcodeline": "signalModifiedKey(c,c->db,c->argv[1]);"
    },
    {
        "line": 33,
        "fullcodeline": "notifyKeyspaceEvent(NOTIFY_LIST,\"linsert\","
    },
    {
        "line": 23,
        "fullcodeline": "if (listTypeEqual(&entry,c->argv[3])) {"
    },
    {
        "line": 10,
        "fullcodeline": "} else if (strcasecmp(c->argv[2]->ptr,\"before\") == 0) {"
    },
    {
        "line": 38,
        "fullcodeline": "addReplyLongLong(c,-1);"
    },
    {
        "line": 11,
        "fullcodeline": "where = LIST_HEAD;"
    },
    {
        "line": 13,
        "fullcodeline": "addReply(c,shared.syntaxerr);"
    }
]