[
    {
        "line": 22,
        "fullcodeline": "size_t totelelen = 0;"
    },
    {
        "line": 34,
        "fullcodeline": "raxStart(&ri,s->rax);"
    },
    {
        "line": 35,
        "fullcodeline": "raxSeek(&ri,\"$\",NULL,0);"
    },
    {
        "line": 37,
        "fullcodeline": "size_t lp_bytes = 0;        /* Total bytes in the tail listpack. */"
    },
    {
        "line": 38,
        "fullcodeline": "unsigned char *lp = NULL;   /* Tail listpack pointer. */"
    },
    {
        "line": 45,
        "fullcodeline": "raxStop(&ri);"
    },
    {
        "line": 50,
        "fullcodeline": "uint64_t rax_key[2];    /* Key in the radix tree containing the listpack.*/"
    },
    {
        "line": 100,
        "fullcodeline": "int flags = STREAM_ITEM_FLAG_NONE;"
    },
    {
        "line": 176,
        "fullcodeline": "lp = lpAppendInteger(lp,flags);"
    },
    {
        "line": 177,
        "fullcodeline": "lp = lpAppendInteger(lp,id.ms - master_id.ms);"
    },
    {
        "line": 178,
        "fullcodeline": "lp = lpAppendInteger(lp,id.seq - master_id.seq);"
    },
    {
        "line": 188,
        "fullcodeline": "int64_t lp_count = numfields;"
    },
    {
        "line": 189,
        "fullcodeline": "lp_count += 3; /* Add the 3 fixed fields flags + ms-diff + seq-diff. */"
    },
    {
        "line": 195,
        "fullcodeline": "lp = lpAppendInteger(lp,lp_count);"
    },
    {
        "line": 200,
        "fullcodeline": "s->length++;"
    },
    {
        "line": 201,
        "fullcodeline": "s->last_id = id;"
    },
    {
        "line": 14,
        "fullcodeline": "if (streamCompareID(&id,&s->last_id) <= 0) {"
    },
    {
        "line": 23,
        "fullcodeline": "for (int64_t i = 0; i < numfields*2; i++) {"
    },
    {
        "line": 27,
        "fullcodeline": "if (totelelen > STREAM_LISTPACK_MAX_SIZE) {"
    },
    {
        "line": 41,
        "fullcodeline": "if (raxNext(&ri)) {"
    },
    {
        "line": 88,
        "fullcodeline": "if (lp != NULL) {"
    },
    {
        "line": 101,
        "fullcodeline": "if (lp == NULL || lp_bytes >= server.stream_node_max_bytes) {"
    },
    {
        "line": 179,
        "fullcodeline": "if (!(flags & STREAM_ITEM_FLAG_SAMEFIELDS))"
    },
    {
        "line": 181,
        "fullcodeline": "for (int64_t i = 0; i < numfields; i++) {"
    },
    {
        "line": 190,
        "fullcodeline": "if (!(flags & STREAM_ITEM_FLAG_SAMEFIELDS)) {"
    },
    {
        "line": 198,
        "fullcodeline": "if (ri.data != lp)"
    },
    {
        "line": 15,
        "fullcodeline": "errno = EDOM;"
    },
    {
        "line": 25,
        "fullcodeline": "totelelen += sdslen(ele);"
    },
    {
        "line": 28,
        "fullcodeline": "errno = ERANGE;"
    },
    {
        "line": 42,
        "fullcodeline": "lp = ri.data;"
    },
    {
        "line": 43,
        "fullcodeline": "lp_bytes = lpBytes(lp);"
    },
    {
        "line": 102,
        "fullcodeline": "master_id = id;"
    },
    {
        "line": 103,
        "fullcodeline": "streamEncodeID(rax_key,&id);"
    },
    {
        "line": 105,
        "fullcodeline": "lp = lpNew();"
    },
    {
        "line": 106,
        "fullcodeline": "lp = lpAppendInteger(lp,1); /* One item, the one we are adding. */"
    },
    {
        "line": 107,
        "fullcodeline": "lp = lpAppendInteger(lp,0); /* Zero deleted so far. */"
    },
    {
        "line": 108,
        "fullcodeline": "lp = lpAppendInteger(lp,numfields);"
    },
    {
        "line": 113,
        "fullcodeline": "lp = lpAppendInteger(lp,0); /* Master entry zero terminator. */"
    },
    {
        "line": 114,
        "fullcodeline": "raxInsert(s->rax,(unsigned char*)&rax_key,sizeof(rax_key),lp,NULL);"
    },
    {
        "line": 117,
        "fullcodeline": "flags |= STREAM_ITEM_FLAG_SAMEFIELDS;"
    },
    {
        "line": 180,
        "fullcodeline": "lp = lpAppendInteger(lp,numfields);"
    },
    {
        "line": 185,
        "fullcodeline": "lp = lpAppend(lp,(unsigned char*)value,sdslen(value));"
    },
    {
        "line": 193,
        "fullcodeline": "lp_count += numfields+1;"
    },
    {
        "line": 199,
        "fullcodeline": "raxInsert(s->rax,(unsigned char*)&rax_key,sizeof(rax_key),lp,NULL);"
    },
    {
        "line": 202,
        "fullcodeline": "if (added_id) *added_id = id;"
    },
    {
        "line": 8,
        "fullcodeline": "streamNextID(&s->last_id,&id);"
    },
    {
        "line": 90,
        "fullcodeline": "if (node_max_bytes == 0 || node_max_bytes > STREAM_LISTPACK_MAX_SIZE)"
    },
    {
        "line": 92,
        "fullcodeline": "if (lp_bytes + totelelen >= node_max_bytes) {"
    },
    {
        "line": 109,
        "fullcodeline": "for (int64_t i = 0; i < numfields; i++) {"
    },
    {
        "line": 119,
        "fullcodeline": "serverAssert(ri.key_len == sizeof(rax_key));"
    },
    {
        "line": 120,
        "fullcodeline": "memcpy(rax_key,ri.key,sizeof(rax_key));"
    },
    {
        "line": 123,
        "fullcodeline": "streamDecodeID(rax_key,&master_id);"
    },
    {
        "line": 124,
        "fullcodeline": "unsigned char *lp_ele = lpFirst(lp);"
    },
    {
        "line": 127,
        "fullcodeline": "int64_t count = lpGetInteger(lp_ele);"
    },
    {
        "line": 128,
        "fullcodeline": "lp = lpReplaceInteger(lp,&lp_ele,count+1);"
    },
    {
        "line": 129,
        "fullcodeline": "lp_ele = lpNext(lp,lp_ele); /* seek deleted. */"
    },
    {
        "line": 130,
        "fullcodeline": "lp_ele = lpNext(lp,lp_ele); /* seek master entry num fields. */"
    },
    {
        "line": 134,
        "fullcodeline": "int64_t master_fields_count = lpGetInteger(lp_ele);"
    },
    {
        "line": 135,
        "fullcodeline": "lp_ele = lpNext(lp,lp_ele);"
    },
    {
        "line": 183,
        "fullcodeline": "if (!(flags & STREAM_ITEM_FLAG_SAMEFIELDS))"
    },
    {
        "line": 91,
        "fullcodeline": "node_max_bytes = STREAM_LISTPACK_MAX_SIZE;"
    },
    {
        "line": 93,
        "fullcodeline": "lp = NULL;"
    },
    {
        "line": 111,
        "fullcodeline": "lp = lpAppend(lp,(unsigned char*)field,sdslen(field));"
    },
    {
        "line": 136,
        "fullcodeline": "if (numfields == master_fields_count) {"
    },
    {
        "line": 184,
        "fullcodeline": "lp = lpAppend(lp,(unsigned char*)field,sdslen(field));"
    },
    {
        "line": 182,
        "fullcodeline": "sds field = argv[i*2]->ptr, value = argv[i*2+1]->ptr;"
    },
    {
        "line": 138,
        "fullcodeline": "for (i = 0; i < master_fields_count; i++) {"
    },
    {
        "line": 150,
        "fullcodeline": "if (i == master_fields_count) flags |= STREAM_ITEM_FLAG_SAMEFIELDS;"
    },
    {
        "line": 95,
        "fullcodeline": "int64_t count = lpGetInteger(lpFirst(lp));"
    },
    {
        "line": 110,
        "fullcodeline": "sds field = argv[i*2]->ptr;"
    },
    {
        "line": 141,
        "fullcodeline": "unsigned char buf[LP_INTBUF_SIZE];"
    },
    {
        "line": 142,
        "fullcodeline": "unsigned char *e = lpGet(lp_ele,&e_len,buf);"
    },
    {
        "line": 146,
        "fullcodeline": "lp_ele = lpNext(lp,lp_ele);"
    },
    {
        "line": 96,
        "fullcodeline": "if (count >= server.stream_node_max_entries) lp = NULL;"
    },
    {
        "line": 144,
        "fullcodeline": "if (sdslen(field) != (size_t)e_len ||"
    },
    {
        "line": 145,
        "fullcodeline": "memcmp(e,field,e_len) != 0) break;"
    },
    {
        "line": 139,
        "fullcodeline": "sds field = argv[i*2]->ptr;"
    }
]