[
    {
        "line": 5,
        "fullcodeline": "struct rt6_info *rt = (struct rt6_info *)skb_dst(skb);"
    },
    {
        "line": 6,
        "fullcodeline": "struct ipv6_pinfo *np = skb->sk && !dev_recursion_level() ?"
    },
    {
        "line": 13,
        "fullcodeline": "int ptr, offset = 0, err = 0;"
    },
    {
        "line": 14,
        "fullcodeline": "u8 *prevhdr, nexthdr = 0;"
    },
    {
        "line": 16,
        "fullcodeline": "hlen = ip6_find_1stfragopt(skb, &prevhdr);"
    },
    {
        "line": 19,
        "fullcodeline": "mtu = ip6_skb_dst_mtu(skb);"
    },
    {
        "line": 43,
        "fullcodeline": "mtu -= hlen + sizeof(struct frag_hdr);"
    },
    {
        "line": 45,
        "fullcodeline": "frag_id = ipv6_select_ident(net, &ipv6_hdr(skb)->daddr,"
    },
    {
        "line": 52,
        "fullcodeline": "hroom = LL_RESERVED_SPACE(rt->dst.dev);"
    },
    {
        "line": 180,
        "fullcodeline": "left = skb->len - hlen;\t\t/* Space per frame */"
    },
    {
        "line": 181,
        "fullcodeline": "ptr = hlen;\t\t\t/* Where to start from */"
    },
    {
        "line": 276,
        "fullcodeline": "IP6_INC_STATS(net, ip6_dst_idev(skb_dst(skb)),"
    },
    {
        "line": 278,
        "fullcodeline": "consume_skb(skb);"
    },
    {
        "line": 286,
        "fullcodeline": "icmpv6_send(skb, ICMPV6_PKT_TOOBIG, 0, mtu);"
    },
    {
        "line": 287,
        "fullcodeline": "err = -EMSGSIZE;"
    },
    {
        "line": 290,
        "fullcodeline": "IP6_INC_STATS(net, ip6_dst_idev(skb_dst(skb)),"
    },
    {
        "line": 292,
        "fullcodeline": "kfree_skb(skb);"
    },
    {
        "line": 24,
        "fullcodeline": "if (unlikely(!skb->ignore_df && skb->len > mtu))"
    },
    {
        "line": 37,
        "fullcodeline": "if (np && np->frag_size < mtu) {"
    },
    {
        "line": 41,
        "fullcodeline": "if (mtu < hlen + sizeof(struct frag_hdr) + 8)"
    },
    {
        "line": 48,
        "fullcodeline": "if (skb->ip_summed == CHECKSUM_PARTIAL &&"
    },
    {
        "line": 53,
        "fullcodeline": "if (skb_has_frag_list(skb)) {"
    },
    {
        "line": 192,
        "fullcodeline": "while (left > 0)\t{"
    },
    {
        "line": 282,
        "fullcodeline": "if (skb->sk && dst_allfrag(skb_dst(skb)))"
    },
    {
        "line": 7,
        "fullcodeline": "inet6_sk(skb->sk) : NULL;"
    },
    {
        "line": 27,
        "fullcodeline": "if (IP6CB(skb)->frag_max_size) {"
    },
    {
        "line": 32,
        "fullcodeline": "mtu = IP6CB(skb)->frag_max_size;"
    },
    {
        "line": 49,
        "fullcodeline": "(err = skb_checksum_help(skb)))"
    },
    {
        "line": 54,
        "fullcodeline": "unsigned int first_len = skb_pagelen(skb);"
    },
    {
        "line": 63,
        "fullcodeline": "skb_walk_frags(skb, frag) {"
    },
    {
        "line": 82,
        "fullcodeline": "err = 0;"
    },
    {
        "line": 83,
        "fullcodeline": "offset = 0;"
    },
    {
        "line": 86,
        "fullcodeline": "*prevhdr = NEXTHDR_FRAGMENT;"
    },
    {
        "line": 87,
        "fullcodeline": "tmp_hdr = kmemdup(skb_network_header(skb), hlen, GFP_ATOMIC);"
    },
    {
        "line": 95,
        "fullcodeline": "skb_frag_list_init(skb);"
    },
    {
        "line": 97,
        "fullcodeline": "__skb_pull(skb, hlen);"
    },
    {
        "line": 98,
        "fullcodeline": "fh = (struct frag_hdr *)__skb_push(skb, sizeof(struct frag_hdr));"
    },
    {
        "line": 99,
        "fullcodeline": "__skb_push(skb, hlen);"
    },
    {
        "line": 100,
        "fullcodeline": "skb_reset_network_header(skb);"
    },
    {
        "line": 101,
        "fullcodeline": "memcpy(skb_network_header(skb), tmp_hdr, hlen);"
    },
    {
        "line": 103,
        "fullcodeline": "fh->nexthdr = nexthdr;"
    },
    {
        "line": 104,
        "fullcodeline": "fh->reserved = 0;"
    },
    {
        "line": 105,
        "fullcodeline": "fh->frag_off = htons(IP6_MF);"
    },
    {
        "line": 106,
        "fullcodeline": "fh->identification = frag_id;"
    },
    {
        "line": 108,
        "fullcodeline": "first_len = skb_pagelen(skb);"
    },
    {
        "line": 109,
        "fullcodeline": "skb->data_len = first_len - skb_headlen(skb);"
    },
    {
        "line": 110,
        "fullcodeline": "skb->len = first_len;"
    },
    {
        "line": 111,
        "fullcodeline": "ipv6_hdr(skb)->payload_len = htons(first_len -"
    },
    {
        "line": 114,
        "fullcodeline": "dst_hold(&rt->dst);"
    },
    {
        "line": 153,
        "fullcodeline": "kfree(tmp_hdr);"
    },
    {
        "line": 162,
        "fullcodeline": "kfree_skb_list(frag);"
    },
    {
        "line": 164,
        "fullcodeline": "IP6_INC_STATS(net, ip6_dst_idev(&rt->dst),"
    },
    {
        "line": 166,
        "fullcodeline": "ip6_rt_put(rt);"
    },
    {
        "line": 195,
        "fullcodeline": "len = left;"
    },
    {
        "line": 206,
        "fullcodeline": "frag = alloc_skb(len + hlen + sizeof(struct frag_hdr) +"
    },
    {
        "line": 219,
        "fullcodeline": "ip6_copy_metadata(frag, skb);"
    },
    {
        "line": 220,
        "fullcodeline": "skb_reserve(frag, hroom);"
    },
    {
        "line": 221,
        "fullcodeline": "skb_put(frag, len + hlen + sizeof(struct frag_hdr));"
    },
    {
        "line": 222,
        "fullcodeline": "skb_reset_network_header(frag);"
    },
    {
        "line": 223,
        "fullcodeline": "fh = (struct frag_hdr *)(skb_network_header(frag) + hlen);"
    },
    {
        "line": 224,
        "fullcodeline": "frag->transport_header = (frag->network_header + hlen +"
    },
    {
        "line": 237,
        "fullcodeline": "skb_copy_from_linear_data(skb, skb_network_header(frag), hlen);"
    },
    {
        "line": 239,
        "fullcodeline": "fragnexthdr_offset = skb_network_header(frag);"
    },
    {
        "line": 240,
        "fullcodeline": "fragnexthdr_offset += prevhdr - skb_network_header(skb);"
    },
    {
        "line": 241,
        "fullcodeline": "*fragnexthdr_offset = NEXTHDR_FRAGMENT;"
    },
    {
        "line": 246,
        "fullcodeline": "fh->nexthdr = nexthdr;"
    },
    {
        "line": 247,
        "fullcodeline": "fh->reserved = 0;"
    },
    {
        "line": 248,
        "fullcodeline": "fh->identification = frag_id;"
    },
    {
        "line": 253,
        "fullcodeline": "BUG_ON(skb_copy_bits(skb, ptr, skb_transport_header(frag),"
    },
    {
        "line": 255,
        "fullcodeline": "left -= len;"
    },
    {
        "line": 257,
        "fullcodeline": "fh->frag_off = htons(offset);"
    },
    {
        "line": 260,
        "fullcodeline": "ipv6_hdr(frag)->payload_len = htons(frag->len -"
    },
    {
        "line": 263,
        "fullcodeline": "ptr += len;"
    },
    {
        "line": 264,
        "fullcodeline": "offset += len;"
    },
    {
        "line": 269,
        "fullcodeline": "err = output(net, sk, frag);"
    },
    {
        "line": 273,
        "fullcodeline": "IP6_INC_STATS(net, ip6_dst_idev(skb_dst(skb)),"
    },
    {
        "line": 283,
        "fullcodeline": "sk_nocaps_add(skb->sk, NETIF_F_GSO_MASK);"
    },
    {
        "line": 285,
        "fullcodeline": "skb->dev = skb_dst(skb)->dev;"
    },
    {
        "line": 28,
        "fullcodeline": "if (IP6CB(skb)->frag_max_size > mtu)"
    },
    {
        "line": 33,
        "fullcodeline": "if (mtu < IPV6_MIN_MTU)"
    },
    {
        "line": 57,
        "fullcodeline": "if (first_len - hlen > mtu ||"
    },
    {
        "line": 74,
        "fullcodeline": "BUG_ON(frag->sk);"
    },
    {
        "line": 79,
        "fullcodeline": "skb->truesize -= frag->truesize;"
    },
    {
        "line": 88,
        "fullcodeline": "if (!tmp_hdr) {"
    },
    {
        "line": 155,
        "fullcodeline": "if (err == 0) {"
    },
    {
        "line": 197,
        "fullcodeline": "if (len > mtu)"
    },
    {
        "line": 201,
        "fullcodeline": "if (len < left)\t{"
    },
    {
        "line": 208,
        "fullcodeline": "if (!frag) {"
    },
    {
        "line": 258,
        "fullcodeline": "if (left > 0)"
    },
    {
        "line": 34,
        "fullcodeline": "mtu = IPV6_MIN_MTU;"
    },
    {
        "line": 39,
        "fullcodeline": "mtu = np->frag_size;"
    },
    {
        "line": 46,
        "fullcodeline": "&ipv6_hdr(skb)->saddr);"
    },
    {
        "line": 60,
        "fullcodeline": "skb_headroom(skb) < (hroom + sizeof(struct frag_hdr)))"
    },
    {
        "line": 65,
        "fullcodeline": "if (frag->len > mtu ||"
    },
    {
        "line": 71,
        "fullcodeline": "if (skb_shared(frag))"
    },
    {
        "line": 89,
        "fullcodeline": "IP6_INC_STATS(net, ip6_dst_idev(skb_dst(skb)),"
    },
    {
        "line": 91,
        "fullcodeline": "err = -ENOMEM;"
    },
    {
        "line": 94,
        "fullcodeline": "frag = skb_shinfo(skb)->frag_list;"
    },
    {
        "line": 140,
        "fullcodeline": "err = output(net, sk, skb);"
    },
    {
        "line": 148,
        "fullcodeline": "skb = frag;"
    },
    {
        "line": 149,
        "fullcodeline": "frag = skb->next;"
    },
    {
        "line": 150,
        "fullcodeline": "skb->next = NULL;"
    },
    {
        "line": 156,
        "fullcodeline": "IP6_INC_STATS(net, ip6_dst_idev(&rt->dst),"
    },
    {
        "line": 158,
        "fullcodeline": "ip6_rt_put(rt);"
    },
    {
        "line": 198,
        "fullcodeline": "len = mtu;"
    },
    {
        "line": 202,
        "fullcodeline": "len &= ~7;"
    },
    {
        "line": 209,
        "fullcodeline": "IP6_INC_STATS(net, ip6_dst_idev(skb_dst(skb)),"
    },
    {
        "line": 211,
        "fullcodeline": "err = -ENOMEM;"
    },
    {
        "line": 232,
        "fullcodeline": "skb_set_owner_w(frag, skb->sk);"
    },
    {
        "line": 259,
        "fullcodeline": "fh->frag_off |= htons(IP6_MF);"
    },
    {
        "line": 59,
        "fullcodeline": "skb_cloned(skb) ||"
    },
    {
        "line": 67,
        "fullcodeline": "skb_headroom(frag) < (hlen + hroom + sizeof(struct frag_hdr)))"
    },
    {
        "line": 76,
        "fullcodeline": "frag->sk = skb->sk;"
    },
    {
        "line": 77,
        "fullcodeline": "frag->destructor = sock_wfree;"
    },
    {
        "line": 141,
        "fullcodeline": "if (!err)"
    },
    {
        "line": 145,
        "fullcodeline": "if (err || !frag)"
    },
    {
        "line": 58,
        "fullcodeline": "((first_len - hlen) & 7) ||"
    },
    {
        "line": 66,
        "fullcodeline": "((frag->len & 7) && frag->next) ||"
    },
    {
        "line": 120,
        "fullcodeline": "frag->ip_summed = CHECKSUM_NONE;"
    },
    {
        "line": 121,
        "fullcodeline": "skb_reset_transport_header(frag);"
    },
    {
        "line": 122,
        "fullcodeline": "fh = (struct frag_hdr *)__skb_push(frag, sizeof(struct frag_hdr));"
    },
    {
        "line": 123,
        "fullcodeline": "__skb_push(frag, hlen);"
    },
    {
        "line": 124,
        "fullcodeline": "skb_reset_network_header(frag);"
    },
    {
        "line": 125,
        "fullcodeline": "memcpy(skb_network_header(frag), tmp_hdr,"
    },
    {
        "line": 127,
        "fullcodeline": "offset += skb->len - hlen - sizeof(struct frag_hdr);"
    },
    {
        "line": 128,
        "fullcodeline": "fh->nexthdr = nexthdr;"
    },
    {
        "line": 129,
        "fullcodeline": "fh->reserved = 0;"
    },
    {
        "line": 130,
        "fullcodeline": "fh->frag_off = htons(offset);"
    },
    {
        "line": 133,
        "fullcodeline": "fh->identification = frag_id;"
    },
    {
        "line": 134,
        "fullcodeline": "ipv6_hdr(frag)->payload_len ="
    },
    {
        "line": 137,
        "fullcodeline": "ip6_copy_metadata(frag, skb);"
    },
    {
        "line": 142,
        "fullcodeline": "IP6_INC_STATS(net, ip6_dst_idev(&rt->dst),"
    },
    {
        "line": 135,
        "fullcodeline": "htons(frag->len -"
    },
    {
        "line": 132,
        "fullcodeline": "fh->frag_off |= htons(IP6_MF);"
    }
]