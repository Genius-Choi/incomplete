[
    {
        "line": 4,
        "fullcodeline": "struct packet_sock *po = pkt_sk(sk);"
    },
    {
        "line": 8,
        "fullcodeline": "struct net_device *dev = NULL;"
    },
    {
        "line": 9,
        "fullcodeline": "int ret = 0;"
    },
    {
        "line": 10,
        "fullcodeline": "bool unlisted = false;"
    },
    {
        "line": 12,
        "fullcodeline": "lock_sock(sk);"
    },
    {
        "line": 13,
        "fullcodeline": "spin_lock(&po->bind_lock);"
    },
    {
        "line": 14,
        "fullcodeline": "rcu_read_lock();"
    },
    {
        "line": 38,
        "fullcodeline": "proto_curr = po->prot_hook.type;"
    },
    {
        "line": 39,
        "fullcodeline": "dev_curr = po->prot_hook.dev;"
    },
    {
        "line": 41,
        "fullcodeline": "need_rehook = proto_curr != proto || dev_curr != dev;"
    },
    {
        "line": 83,
        "fullcodeline": "rcu_read_unlock();"
    },
    {
        "line": 84,
        "fullcodeline": "spin_unlock(&po->bind_lock);"
    },
    {
        "line": 85,
        "fullcodeline": "release_sock(sk);"
    },
    {
        "line": 71,
        "fullcodeline": "if (proto == 0 || !need_rehook)"
    },
    {
        "line": 74,
        "fullcodeline": "if (!unlisted && (!dev || (dev->flags & IFF_UP))) {"
    },
    {
        "line": 17,
        "fullcodeline": "ret = -EINVAL;"
    },
    {
        "line": 22,
        "fullcodeline": "dev = dev_get_by_name_rcu(sock_net(sk), name);"
    },
    {
        "line": 36,
        "fullcodeline": "dev_hold(dev);"
    },
    {
        "line": 54,
        "fullcodeline": "po->num = proto;"
    },
    {
        "line": 55,
        "fullcodeline": "po->prot_hook.type = proto;"
    },
    {
        "line": 69,
        "fullcodeline": "dev_put(dev_curr);"
    },
    {
        "line": 75,
        "fullcodeline": "register_prot_hook(sk);"
    },
    {
        "line": 23,
        "fullcodeline": "if (!dev) {"
    },
    {
        "line": 57,
        "fullcodeline": "if (unlikely(unlisted)) {"
    },
    {
        "line": 77,
        "fullcodeline": "sk->sk_err = ENETDOWN;"
    },
    {
        "line": 24,
        "fullcodeline": "ret = -ENODEV;"
    },
    {
        "line": 46,
        "fullcodeline": "__unregister_prot_hook(sk, true);"
    },
    {
        "line": 47,
        "fullcodeline": "rcu_read_lock();"
    },
    {
        "line": 48,
        "fullcodeline": "dev_curr = po->prot_hook.dev;"
    },
    {
        "line": 58,
        "fullcodeline": "dev_put(dev);"
    },
    {
        "line": 59,
        "fullcodeline": "po->prot_hook.dev = NULL;"
    },
    {
        "line": 60,
        "fullcodeline": "po->ifindex = -1;"
    },
    {
        "line": 61,
        "fullcodeline": "packet_cached_dev_reset(po);"
    },
    {
        "line": 78,
        "fullcodeline": "if (!sock_flag(sk, SOCK_DEAD))"
    },
    {
        "line": 28,
        "fullcodeline": "dev = dev_get_by_index_rcu(sock_net(sk), ifindex);"
    },
    {
        "line": 63,
        "fullcodeline": "po->prot_hook.dev = dev;"
    },
    {
        "line": 64,
        "fullcodeline": "po->ifindex = dev ? dev->ifindex : 0;"
    },
    {
        "line": 65,
        "fullcodeline": "packet_cached_dev_assign(po, dev);"
    },
    {
        "line": 79,
        "fullcodeline": "sk->sk_error_report(sk);"
    },
    {
        "line": 29,
        "fullcodeline": "if (!dev) {"
    },
    {
        "line": 50,
        "fullcodeline": "unlisted = !dev_get_by_index_rcu(sock_net(sk),"
    },
    {
        "line": 30,
        "fullcodeline": "ret = -ENODEV;"
    }
]