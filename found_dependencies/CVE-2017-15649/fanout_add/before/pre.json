[
    {
        "line": 3,
        "fullcodeline": "struct packet_rollover *rollover = NULL;"
    },
    {
        "line": 4,
        "fullcodeline": "struct packet_sock *po = pkt_sk(sk);"
    },
    {
        "line": 6,
        "fullcodeline": "u8 type = type_flags & 0xff;"
    },
    {
        "line": 7,
        "fullcodeline": "u8 flags = type_flags >> 8;"
    },
    {
        "line": 26,
        "fullcodeline": "mutex_lock(&fanout_mutex);"
    },
    {
        "line": 28,
        "fullcodeline": "err = -EINVAL;"
    },
    {
        "line": 32,
        "fullcodeline": "err = -EALREADY;"
    },
    {
        "line": 61,
        "fullcodeline": "match = NULL;"
    },
    {
        "line": 62,
        "fullcodeline": "list_for_each_entry(f, &fanout_list, list) {"
    },
    {
        "line": 69,
        "fullcodeline": "err = -EINVAL;"
    },
    {
        "line": 92,
        "fullcodeline": "err = -EINVAL;"
    },
    {
        "line": 29,
        "fullcodeline": "if (!po->running)"
    },
    {
        "line": 48,
        "fullcodeline": "if (type_flags & PACKET_FANOUT_FLAG_UNIQUEID) {"
    },
    {
        "line": 70,
        "fullcodeline": "if (match && match->flags != flags)"
    },
    {
        "line": 72,
        "fullcodeline": "if (!match) {"
    },
    {
        "line": 106,
        "fullcodeline": "if (err && rollover) {"
    },
    {
        "line": 36,
        "fullcodeline": "if (type == PACKET_FANOUT_ROLLOVER ||"
    },
    {
        "line": 37,
        "fullcodeline": "(type_flags & PACKET_FANOUT_FLAG_ROLLOVER)) {"
    },
    {
        "line": 38,
        "fullcodeline": "err = -ENOMEM;"
    },
    {
        "line": 39,
        "fullcodeline": "rollover = kzalloc(sizeof(*rollover), GFP_KERNEL);"
    },
    {
        "line": 45,
        "fullcodeline": "po->rollover = rollover;"
    },
    {
        "line": 58,
        "fullcodeline": "flags &= ~(PACKET_FANOUT_FLAG_UNIQUEID >> 8);"
    },
    {
        "line": 73,
        "fullcodeline": "err = -ENOMEM;"
    },
    {
        "line": 74,
        "fullcodeline": "match = kzalloc(sizeof(*match), GFP_KERNEL);"
    },
    {
        "line": 78,
        "fullcodeline": "match->id = id;"
    },
    {
        "line": 79,
        "fullcodeline": "match->type = type;"
    },
    {
        "line": 80,
        "fullcodeline": "match->flags = flags;"
    },
    {
        "line": 81,
        "fullcodeline": "INIT_LIST_HEAD(&match->list);"
    },
    {
        "line": 83,
        "fullcodeline": "refcount_set(&match->sk_ref, 0);"
    },
    {
        "line": 84,
        "fullcodeline": "fanout_init_data(match);"
    },
    {
        "line": 87,
        "fullcodeline": "match->prot_hook.func = packet_rcv_fanout;"
    },
    {
        "line": 89,
        "fullcodeline": "match->prot_hook.id_match = match_fanout_group;"
    },
    {
        "line": 93,
        "fullcodeline": "if (match->type == type &&"
    },
    {
        "line": 95,
        "fullcodeline": "match->prot_hook.dev == po->prot_hook.dev) {"
    },
    {
        "line": 96,
        "fullcodeline": "err = -ENOSPC;"
    },
    {
        "line": 12,
        "fullcodeline": "if (type_flags & PACKET_FANOUT_FLAG_ROLLOVER)"
    },
    {
        "line": 23,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 40,
        "fullcodeline": "if (!rollover)"
    },
    {
        "line": 49,
        "fullcodeline": "if (id != 0) {"
    },
    {
        "line": 63,
        "fullcodeline": "if (f->id == id &&"
    },
    {
        "line": 64,
        "fullcodeline": "read_pnet(&f->net) == sock_net(sk)) {"
    },
    {
        "line": 75,
        "fullcodeline": "if (!match)"
    },
    {
        "line": 77,
        "fullcodeline": "write_pnet(&match->net, sock_net(sk));"
    },
    {
        "line": 94,
        "fullcodeline": "match->prot_hook.type == po->prot_hook.type &&"
    },
    {
        "line": 97,
        "fullcodeline": "if (refcount_read(&match->sk_ref) < PACKET_FANOUT_MAX) {"
    },
    {
        "line": 50,
        "fullcodeline": "err = -EINVAL;"
    },
    {
        "line": 53,
        "fullcodeline": "if (!fanout_find_new_id(sk, &id)) {"
    },
    {
        "line": 54,
        "fullcodeline": "err = -ENOMEM;"
    },
    {
        "line": 99,
        "fullcodeline": "po->fanout = match;"
    },
    {
        "line": 100,
        "fullcodeline": "refcount_set(&match->sk_ref, refcount_read(&match->sk_ref) + 1);"
    },
    {
        "line": 102,
        "fullcodeline": "err = 0;"
    },
    {
        "line": 13,
        "fullcodeline": "return -EINVAL;"
    }
]