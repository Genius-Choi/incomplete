[
    {
        "line": 4,
        "fullcodeline": "struct sctp_transport *transport = (struct sctp_transport *) peer;"
    },
    {
        "line": 5,
        "fullcodeline": "struct sctp_association *asoc = transport->asoc;"
    },
    {
        "line": 6,
        "fullcodeline": "struct net *net = sock_net(asoc->base.sk);"
    },
    {
        "line": 10,
        "fullcodeline": "bh_lock_sock(asoc->base.sk);"
    },
    {
        "line": 27,
        "fullcodeline": "error = sctp_do_sm(net, SCTP_EVENT_T_TIMEOUT,"
    },
    {
        "line": 37,
        "fullcodeline": "bh_unlock_sock(asoc->base.sk);"
    },
    {
        "line": 38,
        "fullcodeline": "sctp_transport_put(transport);"
    },
    {
        "line": 11,
        "fullcodeline": "if (sock_owned_by_user(asoc->base.sk)) {"
    },
    {
        "line": 12,
        "fullcodeline": "pr_debug(\"%s: sock is busy\\n\", __func__);"
    },
    {
        "line": 28,
        "fullcodeline": "SCTP_ST_TIMEOUT(SCTP_EVENT_TIMEOUT_T3_RTX),"
    },
    {
        "line": 34,
        "fullcodeline": "asoc->base.sk->sk_err = -error;"
    },
    {
        "line": 15,
        "fullcodeline": "if (!mod_timer(&transport->T3_rtx_timer, jiffies + (HZ/20)))"
    },
    {
        "line": 16,
        "fullcodeline": "sctp_transport_hold(transport);"
    }
]