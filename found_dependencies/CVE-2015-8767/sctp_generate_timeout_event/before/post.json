[
    {
        "line": 4,
        "fullcodeline": "struct net *net = sock_net(asoc->base.sk);"
    },
    {
        "line": 5,
        "fullcodeline": "int error = 0;"
    },
    {
        "line": 7,
        "fullcodeline": "bh_lock_sock(asoc->base.sk);"
    },
    {
        "line": 25,
        "fullcodeline": "error = sctp_do_sm(net, SCTP_EVENT_T_TIMEOUT,"
    },
    {
        "line": 34,
        "fullcodeline": "bh_unlock_sock(asoc->base.sk);"
    },
    {
        "line": 35,
        "fullcodeline": "sctp_association_put(asoc);"
    },
    {
        "line": 8,
        "fullcodeline": "if (sock_owned_by_user(asoc->base.sk)) {"
    },
    {
        "line": 9,
        "fullcodeline": "pr_debug(\"%s: sock is busy: timer %d\\n\", __func__,"
    },
    {
        "line": 26,
        "fullcodeline": "SCTP_ST_TIMEOUT(timeout_type),"
    },
    {
        "line": 28,
        "fullcodeline": "(void *)timeout_type, GFP_ATOMIC);"
    },
    {
        "line": 31,
        "fullcodeline": "asoc->base.sk->sk_err = -error;"
    },
    {
        "line": 13,
        "fullcodeline": "if (!mod_timer(&asoc->timers[timeout_type], jiffies + (HZ/20)))"
    },
    {
        "line": 14,
        "fullcodeline": "sctp_association_hold(asoc);"
    }
]