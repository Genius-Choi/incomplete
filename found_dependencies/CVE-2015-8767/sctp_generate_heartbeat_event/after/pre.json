[
    {
        "line": 3,
        "fullcodeline": "int error = 0;"
    },
    {
        "line": 4,
        "fullcodeline": "struct sctp_transport *transport = (struct sctp_transport *) data;"
    },
    {
        "line": 5,
        "fullcodeline": "struct sctp_association *asoc = transport->asoc;"
    },
    {
        "line": 6,
        "fullcodeline": "struct sock *sk = asoc->base.sk;"
    },
    {
        "line": 7,
        "fullcodeline": "struct net *net = sock_net(sk);"
    },
    {
        "line": 9,
        "fullcodeline": "bh_lock_sock(sk);"
    },
    {
        "line": 25,
        "fullcodeline": "error = sctp_do_sm(net, SCTP_EVENT_T_TIMEOUT,"
    },
    {
        "line": 34,
        "fullcodeline": "bh_unlock_sock(sk);"
    },
    {
        "line": 35,
        "fullcodeline": "sctp_transport_put(transport);"
    },
    {
        "line": 10,
        "fullcodeline": "if (sock_owned_by_user(sk)) {"
    },
    {
        "line": 11,
        "fullcodeline": "pr_debug(\"%s: sock is busy\\n\", __func__);"
    },
    {
        "line": 26,
        "fullcodeline": "SCTP_ST_TIMEOUT(SCTP_EVENT_TIMEOUT_HEARTBEAT),"
    },
    {
        "line": 31,
        "fullcodeline": "sk->sk_err = -error;"
    },
    {
        "line": 14,
        "fullcodeline": "if (!mod_timer(&transport->hb_timer, jiffies + (HZ/20)))"
    },
    {
        "line": 15,
        "fullcodeline": "sctp_transport_hold(transport);"
    }
]