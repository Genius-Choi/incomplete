[
    {
        "line": 8,
        "fullcodeline": "te_found = False"
    },
    {
        "line": 9,
        "fullcodeline": "cl_found = False"
    },
    {
        "line": 11,
        "fullcodeline": "for (name, value) in headers.fields:"
    },
    {
        "line": 21,
        "fullcodeline": "if te_found and cl_found:"
    },
    {
        "line": 22,
        "fullcodeline": "raise ValueError(\"Received both a Transfer-Encoding and a Content-Length header, \""
    },
    {
        "line": 17,
        "fullcodeline": "name_lower = name.lower()"
    },
    {
        "line": 18,
        "fullcodeline": "te_found = te_found or name_lower == b\"transfer-encoding\""
    },
    {
        "line": 19,
        "fullcodeline": "cl_found = cl_found or name_lower == b\"content-length\""
    },
    {
        "line": 12,
        "fullcodeline": "if not _valid_header_name.match(name):"
    },
    {
        "line": 13,
        "fullcodeline": "raise ValueError(f\"Received an invalid header name: {name!r}. Invalid header names may introduce \""
    },
    {
        "line": 14,
        "fullcodeline": "f\"request smuggling vulnerabilities. Disable the validate_inbound_headers option \""
    },
    {
        "line": 15,
        "fullcodeline": "f\"to skip this security check.\")"
    }
]