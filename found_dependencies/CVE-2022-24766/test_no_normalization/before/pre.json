[
    {
        "line": 3,
        "fullcodeline": "tctx.options.normalize_outbound_headers = normalize"
    },
    {
        "line": 5,
        "fullcodeline": "server = Placeholder(Server)"
    },
    {
        "line": 6,
        "fullcodeline": "flow = Placeholder(HTTPFlow)"
    },
    {
        "line": 9,
        "fullcodeline": "request_headers = list(example_request_headers) + [(b\"Should-Not-Be-Capitalized! \", b\" :) \")]"
    },
    {
        "line": 10,
        "fullcodeline": "request_headers_lower = [(k.lower(), v) for (k, v) in request_headers]"
    },
    {
        "line": 11,
        "fullcodeline": "response_headers = list(example_response_headers) + [(b\"Same\", b\"Here\")]"
    },
    {
        "line": 12,
        "fullcodeline": "response_headers_lower = [(k.lower(), v) for (k, v) in response_headers]"
    },
    {
        "line": 14,
        "fullcodeline": "initial = Placeholder(bytes)"
    },
    {
        "line": 15,
        "fullcodeline": "assert ("
    },
    {
        "line": 27,
        "fullcodeline": "frames = decode_frames(initial())"
    },
    {
        "line": 28,
        "fullcodeline": "assert [type(x) for x in frames] == ["
    },
    {
        "line": 32,
        "fullcodeline": "assert hpack.hpack.Decoder().decode(frames[1].data, True) == request_headers_lower if normalize else request_headers"
    },
    {
        "line": 34,
        "fullcodeline": "sff = FrameFactory()"
    },
    {
        "line": 36,
        "fullcodeline": "playbook"
    },
    {
        "line": 45,
        "fullcodeline": "hdrs = response_headers_lower if normalize else response_headers"
    },
    {
        "line": 46,
        "fullcodeline": "assert playbook << SendData(tctx.client, cff.build_headers_frame(hdrs, flags=[\"END_STREAM\"]).serialize())"
    },
    {
        "line": 48,
        "fullcodeline": "assert flow().request.headers.fields == ((b\"Should-Not-Be-Capitalized! \", b\" :) \"),)"
    },
    {
        "line": 49,
        "fullcodeline": "assert flow().response.headers.fields == ((b\"Same\", b\"Here\"),)"
    },
    {
        "line": 7,
        "fullcodeline": "playbook, cff = start_h2_client(tctx)"
    },
    {
        "line": 16,
        "fullcodeline": "playbook"
    },
    {
        "line": 25,
        "fullcodeline": "<< SendData(server, initial)"
    },
    {
        "line": 40,
        "fullcodeline": "<< http.HttpResponseHook(flow)"
    },
    {
        "line": 44,
        "fullcodeline": "playbook << Log(\"Lowercased 'Same' header as uppercase is not allowed with HTTP/2.\")"
    },
    {
        "line": 24,
        "fullcodeline": ">> reply(None, side_effect=make_h2)"
    },
    {
        "line": 23,
        "fullcodeline": "<< OpenConnection(server)"
    },
    {
        "line": 38,
        "fullcodeline": "<< http.HttpResponseHeadersHook(flow)"
    },
    {
        "line": 37,
        "fullcodeline": ">> DataReceived(server, sff.build_headers_frame(response_headers, flags=[\"END_STREAM\"]).serialize())"
    },
    {
        "line": 21,
        "fullcodeline": "<< http.HttpRequestHook(flow)"
    },
    {
        "line": 19,
        "fullcodeline": "<< http.HttpRequestHeadersHook(flow)"
    },
    {
        "line": 17,
        "fullcodeline": ">> DataReceived(tctx.client,"
    },
    {
        "line": 18,
        "fullcodeline": "cff.build_headers_frame(request_headers, flags=[\"END_STREAM\"]).serialize())"
    }
]