[
    {
        "line": 3,
        "fullcodeline": "assert expected_http_body_size("
    },
    {
        "line": 8,
        "fullcodeline": "assert expected_http_body_size("
    },
    {
        "line": 12,
        "fullcodeline": "assert expected_http_body_size("
    },
    {
        "line": 16,
        "fullcodeline": "assert expected_http_body_size("
    },
    {
        "line": 27,
        "fullcodeline": "assert expected_http_body_size("
    },
    {
        "line": 30,
        "fullcodeline": "assert expected_http_body_size("
    },
    {
        "line": 50,
        "fullcodeline": "assert expected_http_body_size("
    },
    {
        "line": 61,
        "fullcodeline": "assert expected_http_body_size("
    },
    {
        "line": 65,
        "fullcodeline": "assert expected_http_body_size("
    },
    {
        "line": 86,
        "fullcodeline": "assert expected_http_body_size("
    },
    {
        "line": 89,
        "fullcodeline": "assert expected_http_body_size("
    },
    {
        "line": 20,
        "fullcodeline": "for code in (100, 204, 304):"
    },
    {
        "line": 33,
        "fullcodeline": "with pytest.raises(ValueError, match=\"Invalid transfer encoding\"):"
    },
    {
        "line": 37,
        "fullcodeline": "with pytest.raises(ValueError, match=\"Unknown transfer encoding\"):"
    },
    {
        "line": 41,
        "fullcodeline": "with pytest.raises(ValueError, match=\"Unknown transfer encoding\"):"
    },
    {
        "line": 46,
        "fullcodeline": "with pytest.raises(ValueError, match=\"Invalid request transfer encoding\"):"
    },
    {
        "line": 56,
        "fullcodeline": "for val in (b\"foo\", b\"-7\"):"
    },
    {
        "line": 69,
        "fullcodeline": "with pytest.raises(ValueError, match=\"Conflicting Content-Length headers\"):"
    },
    {
        "line": 75,
        "fullcodeline": "with pytest.raises(ValueError, match=\"Invalid Content-Length header\"):"
    },
    {
        "line": 80,
        "fullcodeline": "with pytest.raises(ValueError, match=\"Negative Content-Length header\"):"
    },
    {
        "line": 53,
        "fullcodeline": ") == -1"
    },
    {
        "line": 91,
        "fullcodeline": ") == -1"
    },
    {
        "line": 4,
        "fullcodeline": "treq(headers=Headers(expect=\"100-continue\", content_length=\"42\")),"
    },
    {
        "line": 9,
        "fullcodeline": "treq(method=b\"HEAD\"),"
    },
    {
        "line": 10,
        "fullcodeline": "tresp(headers=Headers(content_length=\"42\"))"
    },
    {
        "line": 13,
        "fullcodeline": "treq(method=b\"CONNECT\", headers=Headers()),"
    },
    {
        "line": 17,
        "fullcodeline": "treq(method=b\"CONNECT\"),"
    },
    {
        "line": 21,
        "fullcodeline": "assert expected_http_body_size("
    },
    {
        "line": 28,
        "fullcodeline": "treq(headers=Headers(transfer_encoding=\"chunked\")),"
    },
    {
        "line": 31,
        "fullcodeline": "treq(headers=Headers(transfer_encoding=\"gzip,\\tchunked\")),"
    },
    {
        "line": 34,
        "fullcodeline": "expected_http_body_size("
    },
    {
        "line": 38,
        "fullcodeline": "expected_http_body_size("
    },
    {
        "line": 42,
        "fullcodeline": "expected_http_body_size("
    },
    {
        "line": 47,
        "fullcodeline": "expected_http_body_size("
    },
    {
        "line": 52,
        "fullcodeline": "tresp(headers=Headers(transfer_encoding=\"gzip\")),"
    },
    {
        "line": 62,
        "fullcodeline": "treq(headers=Headers(content_length=\"42\"))"
    },
    {
        "line": 66,
        "fullcodeline": "treq(headers=Headers([(b'content-length', b'42'), (b'content-length', b'42')]))"
    },
    {
        "line": 70,
        "fullcodeline": "expected_http_body_size("
    },
    {
        "line": 76,
        "fullcodeline": "expected_http_body_size("
    },
    {
        "line": 81,
        "fullcodeline": "expected_http_body_size("
    },
    {
        "line": 87,
        "fullcodeline": "treq(headers=Headers())"
    },
    {
        "line": 90,
        "fullcodeline": "treq(headers=Headers()), tresp(headers=Headers())"
    },
    {
        "line": 35,
        "fullcodeline": "treq(headers=Headers(transfer_encoding=\"chun\\u212Aed\")),  # \"chun\u212aed\".lower() == \"chunked\""
    },
    {
        "line": 39,
        "fullcodeline": "treq(headers=Headers(transfer_encoding=\"chun ked\")),  # \"chun\u212aed\".lower() == \"chunked\""
    },
    {
        "line": 43,
        "fullcodeline": "treq(headers=Headers(transfer_encoding=\"qux\")),"
    },
    {
        "line": 48,
        "fullcodeline": "treq(headers=Headers(transfer_encoding=\"gzip\")),"
    },
    {
        "line": 57,
        "fullcodeline": "with pytest.raises(ValueError):"
    },
    {
        "line": 71,
        "fullcodeline": "treq(headers=Headers([(b'content-length', b'42'), (b'content-length', b'45')]))"
    },
    {
        "line": 77,
        "fullcodeline": "treq(headers=Headers([(b'content-length', b'NaN')]))"
    },
    {
        "line": 82,
        "fullcodeline": "treq(headers=Headers([(b'content-length', b'-1')]))"
    },
    {
        "line": 23,
        "fullcodeline": "tresp(status_code=code)"
    },
    {
        "line": 58,
        "fullcodeline": "expected_http_body_size("
    },
    {
        "line": 59,
        "fullcodeline": "treq(headers=Headers(content_length=val))"
    }
]