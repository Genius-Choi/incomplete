[
    {
        "line": 4,
        "fullcodeline": "bool indices_is_empty = false;"
    },
    {
        "line": 11,
        "fullcodeline": "bool is_single_element_op = false;"
    },
    {
        "line": 20,
        "fullcodeline": "string reduction_indices_input = node->input(1);"
    },
    {
        "line": 21,
        "fullcodeline": "NodeDef* reduction_indices = node_map_->GetNode(reduction_indices_input);"
    },
    {
        "line": 23,
        "fullcodeline": "auto outputs_cleanup = gtl::MakeCleanup([&reduction_indices_vector] {"
    },
    {
        "line": 35,
        "fullcodeline": "bool keep_dims ="
    },
    {
        "line": 37,
        "fullcodeline": "bool simplifiable_to_reshape ="
    },
    {
        "line": 39,
        "fullcodeline": "bool simplifiable_to_identity = IsReductionSimplifiableToIdentity("
    },
    {
        "line": 5,
        "fullcodeline": "if (!IsReductionWithConstantIndices(*node, &indices_is_empty)) {"
    },
    {
        "line": 13,
        "fullcodeline": "if (!IsReductionCandidateForSimplification("
    },
    {
        "line": 28,
        "fullcodeline": "if (!EvaluateNode(*reduction_indices, TensorVector(),"
    },
    {
        "line": 36,
        "fullcodeline": "node->attr().count(\"keep_dims\") > 0 && node->attr().at(\"keep_dims\").b();"
    },
    {
        "line": 38,
        "fullcodeline": "is_single_element_op && !keep_dims && (node->attr().count(\"T\") > 0);"
    },
    {
        "line": 31,
        "fullcodeline": "reduction_indices_vector.size() != 1) {"
    },
    {
        "line": 44,
        "fullcodeline": "const int new_num_dimensions = output_tensor_shape.dim_size();"
    },
    {
        "line": 45,
        "fullcodeline": "Tensor tensor(DT_INT32, TensorShape({new_num_dimensions}));"
    },
    {
        "line": 49,
        "fullcodeline": "TensorValue shape_value(&tensor);"
    },
    {
        "line": 50,
        "fullcodeline": "NodeDef* shape_node = optimized_graph->add_node();"
    },
    {
        "line": 56,
        "fullcodeline": "shape_node->set_device(node->device());"
    },
    {
        "line": 57,
        "fullcodeline": "node_map_->AddNode(shape_node->name(), shape_node);"
    },
    {
        "line": 59,
        "fullcodeline": "shape_node->add_input(AsControlDependency(reduction_indices_input));"
    },
    {
        "line": 60,
        "fullcodeline": "node_map_->AddOutput(NodeName(reduction_indices_input), shape_node->name());"
    },
    {
        "line": 62,
        "fullcodeline": "node->set_op(\"Reshape\");"
    },
    {
        "line": 63,
        "fullcodeline": "node_map_->UpdateInput(node->name(), node->input(1), shape_node->name());"
    },
    {
        "line": 64,
        "fullcodeline": "node->set_input(1, shape_node->name());"
    },
    {
        "line": 65,
        "fullcodeline": "node->mutable_attr()->erase(\"keep_dims\");"
    },
    {
        "line": 66,
        "fullcodeline": "node->mutable_attr()->erase(\"Tidx\");"
    },
    {
        "line": 68,
        "fullcodeline": "attr_type_indices.set_type(DT_INT32);"
    },
    {
        "line": 69,
        "fullcodeline": "(*node->mutable_attr())[\"Tshape\"] = attr_type_indices;"
    },
    {
        "line": 9,
        "fullcodeline": "return ReplaceReductionWithIdentity(node);"
    },
    {
        "line": 46,
        "fullcodeline": "for (int i = 0; i < new_num_dimensions; i++) {"
    },
    {
        "line": 51,
        "fullcodeline": "if (!CreateNodeDef(OptimizedNodeName(*node, \"_shape_const\"), shape_value,"
    },
    {
        "line": 47,
        "fullcodeline": "tensor.flat<int>()(i) = 1;"
    },
    {
        "line": 72,
        "fullcodeline": "return ReplaceReductionWithIdentity(node);"
    }
]