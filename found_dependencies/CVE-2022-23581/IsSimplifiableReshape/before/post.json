[
    {
        "line": 6,
        "fullcodeline": "CHECK_LE(2, node.input_size());"
    },
    {
        "line": 7,
        "fullcodeline": "const NodeDef* new_shape = node_map_->GetNode(node.input(1));"
    },
    {
        "line": 12,
        "fullcodeline": "auto outputs_cleanup = gtl::MakeCleanup([&outputs] {"
    },
    {
        "line": 18,
        "fullcodeline": "Status s = EvaluateNode(*new_shape, TensorVector(), &outputs);"
    },
    {
        "line": 22,
        "fullcodeline": "CHECK_EQ(1, outputs.size());"
    },
    {
        "line": 24,
        "fullcodeline": "const std::vector<OpInfo::TensorProperties>& props ="
    },
    {
        "line": 29,
        "fullcodeline": "const OpInfo::TensorProperties& prop = props[0];"
    },
    {
        "line": 33,
        "fullcodeline": "const PartialTensorShape shape(prop.shape());"
    },
    {
        "line": 3,
        "fullcodeline": "if (!IsReshape(node)) {"
    },
    {
        "line": 8,
        "fullcodeline": "if (!IsReallyConstant(*new_shape)) {"
    },
    {
        "line": 19,
        "fullcodeline": "if (!s.ok()) {"
    },
    {
        "line": 25,
        "fullcodeline": "properties.GetInputProperties(node.name());"
    },
    {
        "line": 26,
        "fullcodeline": "if (props.empty()) {"
    },
    {
        "line": 30,
        "fullcodeline": "if (prop.dtype() == DT_INVALID) {"
    },
    {
        "line": 34,
        "fullcodeline": "if (!shape.IsFullyDefined()) {"
    },
    {
        "line": 39,
        "fullcodeline": "if (outputs[0]->dtype() == DT_INT32) {"
    },
    {
        "line": 55,
        "fullcodeline": "return shape.IsCompatibleWith(new_dims);"
    },
    {
        "line": 40,
        "fullcodeline": "std::vector<int32> shp;"
    },
    {
        "line": 45,
        "fullcodeline": "TF_CHECK_OK(TensorShapeUtils::MakeShape(shp, &new_dims));"
    },
    {
        "line": 41,
        "fullcodeline": "for (int i = 0; i < outputs[0]->NumElements(); ++i) {"
    },
    {
        "line": 47,
        "fullcodeline": "std::vector<int64_t> shp;"
    },
    {
        "line": 52,
        "fullcodeline": "TF_CHECK_OK(TensorShapeUtils::MakeShape(shp, &new_dims));"
    },
    {
        "line": 42,
        "fullcodeline": "int32_t dim = outputs[0]->flat<int32>()(i);"
    },
    {
        "line": 43,
        "fullcodeline": "shp.push_back(dim);"
    },
    {
        "line": 48,
        "fullcodeline": "for (int i = 0; i < outputs[0]->NumElements(); ++i) {"
    },
    {
        "line": 49,
        "fullcodeline": "int64_t dim = outputs[0]->flat<int64_t>()(i);"
    },
    {
        "line": 50,
        "fullcodeline": "shp.push_back(dim);"
    }
]