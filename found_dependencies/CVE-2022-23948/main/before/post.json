[
    {
        "line": 18,
        "fullcodeline": "instance_tpm = tpm()"
    },
    {
        "line": 20,
        "fullcodeline": "registrar_ip = config.get('cloud_agent', 'registrar_ip')"
    },
    {
        "line": 21,
        "fullcodeline": "registrar_port = config.get('cloud_agent', 'registrar_port')"
    },
    {
        "line": 24,
        "fullcodeline": "contact_ip = os.getenv(\"KEYLIME_AGENT_CONTACT_IP\", None)"
    },
    {
        "line": 27,
        "fullcodeline": "contact_port = os.getenv(\"KEYLIME_AGENT_CONTACT_PORT\", None)"
    },
    {
        "line": 32,
        "fullcodeline": "secure_mount.mount()"
    },
    {
        "line": 35,
        "fullcodeline": "config.ch_dir(config.WORK_DIR, logger)"
    },
    {
        "line": 40,
        "fullcodeline": "virtual_agent = instance_tpm.is_vtpm()"
    },
    {
        "line": 44,
        "fullcodeline": "kernel_version = tuple(platform.release().split(\"-\")[0].split(\".\"))"
    },
    {
        "line": 100,
        "fullcodeline": "logger.info(\"Agent UUID: %s\", agent_uuid)"
    },
    {
        "line": 102,
        "fullcodeline": "serveraddr = (config.get('cloud_agent', 'cloudagent_ip'),"
    },
    {
        "line": 105,
        "fullcodeline": "keylime_ca = config.get('cloud_agent', 'keylime_ca')"
    },
    {
        "line": 109,
        "fullcodeline": "server = CloudAgentHTTPServer(serveraddr, Handler, agent_uuid)"
    },
    {
        "line": 110,
        "fullcodeline": "context = web_util.generate_mtls_context(server.mtls_cert_path, server.rsakey_path, keylime_ca, logger=logger)"
    },
    {
        "line": 111,
        "fullcodeline": "server.socket = context.wrap_socket(server.socket, server_side=True)"
    },
    {
        "line": 112,
        "fullcodeline": "serverthread = threading.Thread(target=server.serve_forever, daemon=True)"
    },
    {
        "line": 115,
        "fullcodeline": "mtls_cert = server.mtls_cert.public_bytes(serialization.Encoding.PEM)"
    },
    {
        "line": 116,
        "fullcodeline": "keyblob = registrar_client.doRegisterAgent("
    },
    {
        "line": 124,
        "fullcodeline": "key = instance_tpm.activate_identity(keyblob)"
    },
    {
        "line": 131,
        "fullcodeline": "retval = registrar_client.doActivateAgent("
    },
    {
        "line": 139,
        "fullcodeline": "revocation_process = multiprocessing.Process(target=revocation_listener, daemon=True)"
    },
    {
        "line": 140,
        "fullcodeline": "revocation_process.start()"
    },
    {
        "line": 142,
        "fullcodeline": "logger.info(\"Starting Cloud Agent on %s:%s with API version %s. Use <Ctrl-C> to stop\", serveraddr[0], serveraddr[1], keylime_api_version.current_version())"
    },
    {
        "line": 143,
        "fullcodeline": "serverthread.start()"
    },
    {
        "line": 145,
        "fullcodeline": "def shutdown_handler(*_):"
    },
    {
        "line": 160,
        "fullcodeline": "signal.signal(signal.SIGTERM, shutdown_handler)"
    },
    {
        "line": 161,
        "fullcodeline": "signal.signal(signal.SIGQUIT, shutdown_handler)"
    },
    {
        "line": 162,
        "fullcodeline": "signal.signal(signal.SIGINT, shutdown_handler)"
    },
    {
        "line": 165,
        "fullcodeline": "serverthread.join()"
    },
    {
        "line": 2,
        "fullcodeline": "for ML in [config.MEASUREDBOOT_ML, config.IMA_ML]:"
    },
    {
        "line": 6,
        "fullcodeline": "if config.get('cloud_agent', 'agent_uuid') == 'dmidecode':"
    },
    {
        "line": 25,
        "fullcodeline": "if contact_ip is None and config.has_option('cloud_agent', 'agent_contact_ip'):"
    },
    {
        "line": 28,
        "fullcodeline": "if contact_port is None and config.has_option('cloud_agent', 'agent_contact_port'):"
    },
    {
        "line": 38,
        "fullcodeline": "(ekcert, ek_tpm, aik_tpm) = instance_tpm.tpm_init(self_activate=False, config_pw=config.get("
    },
    {
        "line": 45,
        "fullcodeline": "if tuple(map(int,kernel_version)) < (5, 10, 0) and instance_tpm.defaults[\"hash\"] != algorithms.Hash.SHA1:"
    },
    {
        "line": 50,
        "fullcodeline": "if ekcert is None:"
    },
    {
        "line": 61,
        "fullcodeline": "if agent_uuid == 'hash_ek':"
    },
    {
        "line": 86,
        "fullcodeline": "if not validators.valid_agent_id(agent_uuid):"
    },
    {
        "line": 89,
        "fullcodeline": "if config.STUB_VTPM and config.TPM_CANNED_VALUES is not None:"
    },
    {
        "line": 106,
        "fullcodeline": "if keylime_ca == \"default\":"
    },
    {
        "line": 119,
        "fullcodeline": "if keyblob is None:"
    },
    {
        "line": 126,
        "fullcodeline": "if key is None:"
    },
    {
        "line": 134,
        "fullcodeline": "if not retval:"
    },
    {
        "line": 10,
        "fullcodeline": "cmd = ['which', 'dmidecode']"
    },
    {
        "line": 11,
        "fullcodeline": "ret = cmd_exec.run(cmd, raiseOnError=False)"
    },
    {
        "line": 26,
        "fullcodeline": "contact_ip = config.get('cloud_agent', 'agent_contact_ip')"
    },
    {
        "line": 29,
        "fullcodeline": "contact_port = config.get('cloud_agent', 'agent_contact_port', fallback=\"invalid\")"
    },
    {
        "line": 46,
        "fullcodeline": "logger.warning(\"IMA attestation only works on kernel versions <5.10 with SHA1 as hash algorithm. \""
    },
    {
        "line": 58,
        "fullcodeline": "agent_uuid = config.get('cloud_agent', 'agent_uuid')"
    },
    {
        "line": 62,
        "fullcodeline": "ek_pubkey = pubkey_from_tpm2b_public(base64.b64decode(ek_tpm))"
    },
    {
        "line": 63,
        "fullcodeline": "ek_pubkey_pem = ek_pubkey.public_bytes(encoding=serialization.Encoding.PEM,"
    },
    {
        "line": 65,
        "fullcodeline": "agent_uuid = hashlib.sha256(ek_pubkey_pem).hexdigest()"
    },
    {
        "line": 87,
        "fullcodeline": "raise RuntimeError(\"The agent ID set via agent uuid parameter use invalid characters\")"
    },
    {
        "line": 91,
        "fullcodeline": "jsonIn = config.TPM_CANNED_VALUES"
    },
    {
        "line": 103,
        "fullcodeline": "config.getint('cloud_agent', 'cloudagent_port'))"
    },
    {
        "line": 107,
        "fullcodeline": "keylime_ca = os.path.join(config.WORK_DIR, 'cv_ca', 'cacert.crt')"
    },
    {
        "line": 120,
        "fullcodeline": "instance_tpm.flush_keys()"
    },
    {
        "line": 121,
        "fullcodeline": "raise Exception(\"Registration failed\")"
    },
    {
        "line": 127,
        "fullcodeline": "instance_tpm.flush_keys()"
    },
    {
        "line": 128,
        "fullcodeline": "raise Exception(\"Activation failed\")"
    },
    {
        "line": 135,
        "fullcodeline": "instance_tpm.flush_keys()"
    },
    {
        "line": 136,
        "fullcodeline": "raise Exception(\"Registration failed on activate\")"
    },
    {
        "line": 7,
        "fullcodeline": "if os.getuid() != 0:"
    },
    {
        "line": 12,
        "fullcodeline": "if ret['code'] != 0:"
    },
    {
        "line": 66,
        "fullcodeline": "elif agent_uuid == 'generate' or agent_uuid is None:"
    },
    {
        "line": 92,
        "fullcodeline": "if \"add_vtpm_to_group\" in jsonIn:"
    },
    {
        "line": 3,
        "fullcodeline": "if not os.access(ML, os.F_OK):"
    },
    {
        "line": 8,
        "fullcodeline": "raise RuntimeError('agent_uuid is configured to use dmidecode, '"
    },
    {
        "line": 13,
        "fullcodeline": "raise RuntimeError('agent_uuid is configured to use dmidecode, '"
    },
    {
        "line": 52,
        "fullcodeline": "ekcert = 'virtual'"
    },
    {
        "line": 60,
        "fullcodeline": "agent_uuid = None"
    },
    {
        "line": 67,
        "fullcodeline": "agent_uuid = str(uuid.uuid4())"
    },
    {
        "line": 97,
        "fullcodeline": "raise Exception(\"Command %s not found in canned json!\" %"
    },
    {
        "line": 4,
        "fullcodeline": "logger.warning(\"Measurement list path %s not accessible by agent. Any attempt to instruct it to access this path - via \\\"keylime_tenant\\\" CLI - will result in agent process dying\", ML)"
    },
    {
        "line": 53,
        "fullcodeline": "elif instance_tpm.is_emulator():"
    },
    {
        "line": 68,
        "fullcodeline": "elif agent_uuid == 'dmidecode':"
    },
    {
        "line": 54,
        "fullcodeline": "ekcert = 'emulator'"
    },
    {
        "line": 69,
        "fullcodeline": "cmd = ['dmidecode', '-s', 'system-uuid']"
    },
    {
        "line": 70,
        "fullcodeline": "ret = cmd_exec.run(cmd)"
    },
    {
        "line": 71,
        "fullcodeline": "sys_uuid = ret['retout'][0].decode('utf-8')"
    },
    {
        "line": 72,
        "fullcodeline": "agent_uuid = sys_uuid.strip()"
    },
    {
        "line": 77,
        "fullcodeline": "elif agent_uuid == 'hostname':"
    },
    {
        "line": 74,
        "fullcodeline": "uuid.UUID(agent_uuid)"
    },
    {
        "line": 78,
        "fullcodeline": "agent_uuid = socket.getfqdn()"
    },
    {
        "line": 79,
        "fullcodeline": "elif agent_uuid == 'environment':"
    },
    {
        "line": 76,
        "fullcodeline": "raise RuntimeError(\"The UUID returned from dmidecode is invalid: %s\" % e)  # pylint: disable=raise-missing-from"
    },
    {
        "line": 80,
        "fullcodeline": "agent_uuid = os.getenv(\"KEYLIME_AGENT_UUID\", None)"
    },
    {
        "line": 81,
        "fullcodeline": "if agent_uuid is None:"
    },
    {
        "line": 83,
        "fullcodeline": "elif not validators.valid_uuid(agent_uuid):"
    },
    {
        "line": 82,
        "fullcodeline": "raise RuntimeError(\"Env variable KEYLIME_AGENT_UUID is empty, but agent_uuid is set to 'environment'\")"
    },
    {
        "line": 84,
        "fullcodeline": "raise RuntimeError(\"The UUID is not valid\")"
    }
]