[
    {
        "line": 3,
        "fullcodeline": "char *buf = NULL;"
    },
    {
        "line": 6,
        "fullcodeline": "int ret = -1;"
    },
    {
        "line": 7,
        "fullcodeline": "int rc = -1;"
    },
    {
        "line": 10,
        "fullcodeline": "size_t off = 0;"
    },
    {
        "line": 11,
        "fullcodeline": "int root_type = MSGPACK_OBJECT_ARRAY;"
    },
    {
        "line": 12,
        "fullcodeline": "struct flb_hs *hs = data;"
    },
    {
        "line": 13,
        "fullcodeline": "flb_sds_t prefix = NULL;"
    },
    {
        "line": 14,
        "fullcodeline": "flb_sds_t output_name = NULL;"
    },
    {
        "line": 17,
        "fullcodeline": "struct mk_list *props = NULL;"
    },
    {
        "line": 18,
        "fullcodeline": "struct flb_chunk_trace_limit limit = { 0 };"
    },
    {
        "line": 36,
        "fullcodeline": "msgpack_unpacked_init(&result);"
    },
    {
        "line": 37,
        "fullcodeline": "rc = flb_pack_json(request->data.data, request->data.len, &buf, &buf_size,"
    },
    {
        "line": 45,
        "fullcodeline": "rc = msgpack_unpack_next(&result, buf, buf_size, &off);"
    },
    {
        "line": 167,
        "fullcodeline": "msgpack_pack_map(mp_pck, 1);"
    },
    {
        "line": 168,
        "fullcodeline": "msgpack_pack_str_with_body(mp_pck, \"status\", strlen(\"status\"));"
    },
    {
        "line": 171,
        "fullcodeline": "ret = 200;"
    },
    {
        "line": 22,
        "fullcodeline": "if (request->method == MK_METHOD_GET) {"
    },
    {
        "line": 46,
        "fullcodeline": "if (rc != MSGPACK_UNPACK_SUCCESS) {"
    },
    {
        "line": 52,
        "fullcodeline": "if (result.data.type == MSGPACK_OBJECT_MAP) {"
    },
    {
        "line": 169,
        "fullcodeline": "msgpack_pack_str_with_body(mp_pck, \"ok\", strlen(\"ok\"));"
    },
    {
        "line": 175,
        "fullcodeline": "if (props != NULL) {"
    },
    {
        "line": 181,
        "fullcodeline": "if (buf != NULL) {"
    },
    {
        "line": 23,
        "fullcodeline": "ret = enable_trace_input(hs, input_name, \"trace.\", \"stdout\", NULL);"
    },
    {
        "line": 39,
        "fullcodeline": "if (rc == -1) {"
    },
    {
        "line": 40,
        "fullcodeline": "ret = 503;"
    },
    {
        "line": 47,
        "fullcodeline": "ret = 503;"
    },
    {
        "line": 150,
        "fullcodeline": "ret = enable_trace_input(hs, input_name, prefix, output_name, props);"
    },
    {
        "line": 176,
        "fullcodeline": "flb_kv_release(props);"
    },
    {
        "line": 24,
        "fullcodeline": "if (ret == 0) {"
    },
    {
        "line": 53,
        "fullcodeline": "for (i = 0; i < result.data.via.map.size; i++) {"
    },
    {
        "line": 146,
        "fullcodeline": "if (output_name == NULL) {"
    },
    {
        "line": 151,
        "fullcodeline": "if (ret != 0) {"
    },
    {
        "line": 156,
        "fullcodeline": "if (limit.type != 0) {"
    },
    {
        "line": 25,
        "fullcodeline": "msgpack_pack_map(mp_pck, 1);"
    },
    {
        "line": 26,
        "fullcodeline": "msgpack_pack_str_with_body(mp_pck, \"status\", strlen(\"status\"));"
    },
    {
        "line": 27,
        "fullcodeline": "msgpack_pack_str_with_body(mp_pck, \"ok\", strlen(\"ok\"));"
    },
    {
        "line": 54,
        "fullcodeline": "key = &result.data.via.map.ptr[i].key;"
    },
    {
        "line": 55,
        "fullcodeline": "val = &result.data.via.map.ptr[i].val;"
    },
    {
        "line": 147,
        "fullcodeline": "output_name = flb_sds_create(\"stdout\");"
    },
    {
        "line": 157,
        "fullcodeline": "input_instance = find_input(hs, input_name);"
    },
    {
        "line": 57,
        "fullcodeline": "if (key->type != MSGPACK_OBJECT_STR) {"
    },
    {
        "line": 158,
        "fullcodeline": "if (limit.type == FLB_CHUNK_TRACE_LIMIT_TIME) {"
    },
    {
        "line": 58,
        "fullcodeline": "ret = 503;"
    },
    {
        "line": 63,
        "fullcodeline": "if (strncmp(key->via.str.ptr, \"prefix\", key->via.str.size) == 0) {"
    },
    {
        "line": 72,
        "fullcodeline": "prefix = flb_sds_create_len(val->via.str.ptr, val->via.str.size);"
    },
    {
        "line": 64,
        "fullcodeline": "if (val->type != MSGPACK_OBJECT_STR) {"
    },
    {
        "line": 69,
        "fullcodeline": "if (prefix != NULL) {"
    },
    {
        "line": 65,
        "fullcodeline": "ret = 503;"
    },
    {
        "line": 161,
        "fullcodeline": "else if (limit.type == FLB_CHUNK_TRACE_LIMIT_COUNT) {"
    },
    {
        "line": 74,
        "fullcodeline": "else if (strncmp(key->via.str.ptr, \"output\", key->via.str.size) == 0) {"
    },
    {
        "line": 83,
        "fullcodeline": "output_name = flb_sds_create_len(val->via.str.ptr, val->via.str.size);"
    },
    {
        "line": 75,
        "fullcodeline": "if (val->type != MSGPACK_OBJECT_STR) {"
    },
    {
        "line": 80,
        "fullcodeline": "if (output_name != NULL) {"
    },
    {
        "line": 76,
        "fullcodeline": "ret = 503;"
    },
    {
        "line": 85,
        "fullcodeline": "else if (strncmp(key->via.str.ptr, \"params\", key->via.str.size) == 0) {"
    },
    {
        "line": 91,
        "fullcodeline": "props = flb_calloc(1, sizeof(struct mk_list));"
    },
    {
        "line": 92,
        "fullcodeline": "flb_kv_init(props);"
    },
    {
        "line": 86,
        "fullcodeline": "if (val->type != MSGPACK_OBJECT_MAP) {"
    },
    {
        "line": 93,
        "fullcodeline": "for (x = 0; x < val->via.map.size; x++) {"
    },
    {
        "line": 87,
        "fullcodeline": "ret = 503;"
    },
    {
        "line": 104,
        "fullcodeline": "flb_kv_item_create_len(props,"
    },
    {
        "line": 94,
        "fullcodeline": "if (val->via.map.ptr[x].val.type != MSGPACK_OBJECT_STR) {"
    },
    {
        "line": 99,
        "fullcodeline": "if (val->via.map.ptr[x].key.type != MSGPACK_OBJECT_STR) {"
    },
    {
        "line": 109,
        "fullcodeline": "else if (strncmp(key->via.str.ptr, \"limit\", key->via.str.size) == 0) {"
    },
    {
        "line": 95,
        "fullcodeline": "ret = 503;"
    },
    {
        "line": 100,
        "fullcodeline": "ret = 503;"
    },
    {
        "line": 110,
        "fullcodeline": "if (val->type != MSGPACK_OBJECT_MAP) {"
    },
    {
        "line": 120,
        "fullcodeline": "if (val->via.map.ptr[0].key.type != MSGPACK_OBJECT_STR) {"
    },
    {
        "line": 125,
        "fullcodeline": "if (val->via.map.ptr[0].val.type != MSGPACK_OBJECT_POSITIVE_INTEGER) {"
    },
    {
        "line": 111,
        "fullcodeline": "ret = 503;"
    },
    {
        "line": 116,
        "fullcodeline": "ret = 503;"
    },
    {
        "line": 121,
        "fullcodeline": "ret = 503;"
    },
    {
        "line": 126,
        "fullcodeline": "ret = 503;"
    },
    {
        "line": 130,
        "fullcodeline": "if (strncmp(val->via.map.ptr[0].key.via.str.ptr, \"seconds\", val->via.map.ptr[0].key.via.str.size) == 0) {"
    },
    {
        "line": 131,
        "fullcodeline": "limit.type = FLB_CHUNK_TRACE_LIMIT_TIME;"
    },
    {
        "line": 132,
        "fullcodeline": "limit.seconds = val->via.map.ptr[0].val.via.u64;"
    },
    {
        "line": 134,
        "fullcodeline": "else if (strncmp(val->via.map.ptr[0].key.via.str.ptr, \"count\", val->via.map.ptr[0].key.via.str.size) == 0) {"
    },
    {
        "line": 135,
        "fullcodeline": "limit.type = FLB_CHUNK_TRACE_LIMIT_COUNT;"
    },
    {
        "line": 136,
        "fullcodeline": "limit.count = val->via.map.ptr[0].val.via.u64;"
    },
    {
        "line": 139,
        "fullcodeline": "ret = 503;"
    }
]