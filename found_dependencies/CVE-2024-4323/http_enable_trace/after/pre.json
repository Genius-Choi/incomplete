[
    {
        "line": 5,
        "fullcodeline": "char *buf = NULL;"
    },
    {
        "line": 8,
        "fullcodeline": "int ret = -1;"
    },
    {
        "line": 9,
        "fullcodeline": "int rc = -1;"
    },
    {
        "line": 12,
        "fullcodeline": "size_t off = 0;"
    },
    {
        "line": 13,
        "fullcodeline": "int root_type = MSGPACK_OBJECT_ARRAY;"
    },
    {
        "line": 14,
        "fullcodeline": "struct flb_hs *hs = data;"
    },
    {
        "line": 15,
        "fullcodeline": "flb_sds_t prefix = NULL;"
    },
    {
        "line": 16,
        "fullcodeline": "flb_sds_t output_name = NULL;"
    },
    {
        "line": 19,
        "fullcodeline": "struct mk_list *props = NULL;"
    },
    {
        "line": 20,
        "fullcodeline": "struct flb_chunk_trace_limit limit = { 0 };"
    },
    {
        "line": 38,
        "fullcodeline": "msgpack_unpacked_init(&result);"
    },
    {
        "line": 39,
        "fullcodeline": "rc = flb_pack_json(request->data.data, request->data.len, &buf, &buf_size,"
    },
    {
        "line": 47,
        "fullcodeline": "rc = msgpack_unpack_next(&result, buf, buf_size, &off);"
    },
    {
        "line": 169,
        "fullcodeline": "msgpack_pack_map(mp_pck, 1);"
    },
    {
        "line": 170,
        "fullcodeline": "msgpack_pack_str_with_body(mp_pck, HTTP_FIELD_STATUS, HTTP_FIELD_STATUS_LEN);"
    },
    {
        "line": 173,
        "fullcodeline": "ret = 200;"
    },
    {
        "line": 24,
        "fullcodeline": "if (request->method == MK_METHOD_GET) {"
    },
    {
        "line": 48,
        "fullcodeline": "if (rc != MSGPACK_UNPACK_SUCCESS) {"
    },
    {
        "line": 54,
        "fullcodeline": "if (result.data.type == MSGPACK_OBJECT_MAP) {"
    },
    {
        "line": 177,
        "fullcodeline": "if (props != NULL) {"
    },
    {
        "line": 183,
        "fullcodeline": "if (buf != NULL) {"
    },
    {
        "line": 25,
        "fullcodeline": "ret = enable_trace_input(hs, input_name, input_nlen, \"trace.\", \"stdout\", NULL);"
    },
    {
        "line": 41,
        "fullcodeline": "if (rc == -1) {"
    },
    {
        "line": 42,
        "fullcodeline": "ret = 503;"
    },
    {
        "line": 49,
        "fullcodeline": "ret = 503;"
    },
    {
        "line": 152,
        "fullcodeline": "ret = enable_trace_input(hs, input_name, input_nlen, prefix, output_name, props);"
    },
    {
        "line": 178,
        "fullcodeline": "flb_kv_release(props);"
    },
    {
        "line": 26,
        "fullcodeline": "if (ret == 0) {"
    },
    {
        "line": 55,
        "fullcodeline": "for (i = 0; i < result.data.via.map.size; i++) {"
    },
    {
        "line": 148,
        "fullcodeline": "if (output_name == NULL) {"
    },
    {
        "line": 153,
        "fullcodeline": "if (ret != 0) {"
    },
    {
        "line": 158,
        "fullcodeline": "if (limit.type != 0) {"
    },
    {
        "line": 27,
        "fullcodeline": "msgpack_pack_map(mp_pck, 1);"
    },
    {
        "line": 28,
        "fullcodeline": "msgpack_pack_str_with_body(mp_pck, HTTP_FIELD_STATUS, HTTP_FIELD_STATUS_LEN);"
    },
    {
        "line": 29,
        "fullcodeline": "msgpack_pack_str_with_body(mp_pck, HTTP_RESULT_OK, HTTP_RESULT_OK_LEN);"
    },
    {
        "line": 56,
        "fullcodeline": "key = &result.data.via.map.ptr[i].key;"
    },
    {
        "line": 57,
        "fullcodeline": "val = &result.data.via.map.ptr[i].val;"
    },
    {
        "line": 149,
        "fullcodeline": "output_name = flb_sds_create(\"stdout\");"
    },
    {
        "line": 159,
        "fullcodeline": "input_instance = find_input(hs, input_name, input_nlen);"
    },
    {
        "line": 59,
        "fullcodeline": "if (key->type != MSGPACK_OBJECT_STR) {"
    },
    {
        "line": 160,
        "fullcodeline": "if (limit.type == FLB_CHUNK_TRACE_LIMIT_TIME) {"
    },
    {
        "line": 60,
        "fullcodeline": "ret = 503;"
    },
    {
        "line": 65,
        "fullcodeline": "if (strncmp(key->via.str.ptr, \"prefix\", key->via.str.size) == 0) {"
    },
    {
        "line": 74,
        "fullcodeline": "prefix = flb_sds_create_len(val->via.str.ptr, val->via.str.size);"
    },
    {
        "line": 66,
        "fullcodeline": "if (val->type != MSGPACK_OBJECT_STR) {"
    },
    {
        "line": 71,
        "fullcodeline": "if (prefix != NULL) {"
    },
    {
        "line": 67,
        "fullcodeline": "ret = 503;"
    },
    {
        "line": 163,
        "fullcodeline": "else if (limit.type == FLB_CHUNK_TRACE_LIMIT_COUNT) {"
    },
    {
        "line": 76,
        "fullcodeline": "else if (strncmp(key->via.str.ptr, \"output\", key->via.str.size) == 0) {"
    },
    {
        "line": 85,
        "fullcodeline": "output_name = flb_sds_create_len(val->via.str.ptr, val->via.str.size);"
    },
    {
        "line": 77,
        "fullcodeline": "if (val->type != MSGPACK_OBJECT_STR) {"
    },
    {
        "line": 82,
        "fullcodeline": "if (output_name != NULL) {"
    },
    {
        "line": 78,
        "fullcodeline": "ret = 503;"
    },
    {
        "line": 87,
        "fullcodeline": "else if (strncmp(key->via.str.ptr, \"params\", key->via.str.size) == 0) {"
    },
    {
        "line": 93,
        "fullcodeline": "props = flb_calloc(1, sizeof(struct mk_list));"
    },
    {
        "line": 94,
        "fullcodeline": "flb_kv_init(props);"
    },
    {
        "line": 88,
        "fullcodeline": "if (val->type != MSGPACK_OBJECT_MAP) {"
    },
    {
        "line": 95,
        "fullcodeline": "for (x = 0; x < val->via.map.size; x++) {"
    },
    {
        "line": 89,
        "fullcodeline": "ret = 503;"
    },
    {
        "line": 106,
        "fullcodeline": "flb_kv_item_create_len(props,"
    },
    {
        "line": 96,
        "fullcodeline": "if (val->via.map.ptr[x].val.type != MSGPACK_OBJECT_STR) {"
    },
    {
        "line": 101,
        "fullcodeline": "if (val->via.map.ptr[x].key.type != MSGPACK_OBJECT_STR) {"
    },
    {
        "line": 111,
        "fullcodeline": "else if (strncmp(key->via.str.ptr, \"limit\", key->via.str.size) == 0) {"
    },
    {
        "line": 97,
        "fullcodeline": "ret = 503;"
    },
    {
        "line": 102,
        "fullcodeline": "ret = 503;"
    },
    {
        "line": 112,
        "fullcodeline": "if (val->type != MSGPACK_OBJECT_MAP) {"
    },
    {
        "line": 122,
        "fullcodeline": "if (val->via.map.ptr[0].key.type != MSGPACK_OBJECT_STR) {"
    },
    {
        "line": 127,
        "fullcodeline": "if (val->via.map.ptr[0].val.type != MSGPACK_OBJECT_POSITIVE_INTEGER) {"
    },
    {
        "line": 113,
        "fullcodeline": "ret = 503;"
    },
    {
        "line": 118,
        "fullcodeline": "ret = 503;"
    },
    {
        "line": 123,
        "fullcodeline": "ret = 503;"
    },
    {
        "line": 128,
        "fullcodeline": "ret = 503;"
    },
    {
        "line": 132,
        "fullcodeline": "if (strncmp(val->via.map.ptr[0].key.via.str.ptr, \"seconds\", val->via.map.ptr[0].key.via.str.size) == 0) {"
    },
    {
        "line": 133,
        "fullcodeline": "limit.type = FLB_CHUNK_TRACE_LIMIT_TIME;"
    },
    {
        "line": 134,
        "fullcodeline": "limit.seconds = val->via.map.ptr[0].val.via.u64;"
    },
    {
        "line": 136,
        "fullcodeline": "else if (strncmp(val->via.map.ptr[0].key.via.str.ptr, \"count\", val->via.map.ptr[0].key.via.str.size) == 0) {"
    },
    {
        "line": 137,
        "fullcodeline": "limit.type = FLB_CHUNK_TRACE_LIMIT_COUNT;"
    },
    {
        "line": 138,
        "fullcodeline": "limit.count = val->via.map.ptr[0].val.via.u64;"
    },
    {
        "line": 141,
        "fullcodeline": "ret = 503;"
    }
]