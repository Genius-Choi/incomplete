[
    {
        "line": 7,
        "fullcodeline": "char *buf = NULL;"
    },
    {
        "line": 9,
        "fullcodeline": "int root_type = MSGPACK_OBJECT_ARRAY;"
    },
    {
        "line": 11,
        "fullcodeline": "flb_sds_t error_msg = NULL;"
    },
    {
        "line": 12,
        "fullcodeline": "int response = 200;"
    },
    {
        "line": 15,
        "fullcodeline": "msgpack_object_array *inputs = NULL;"
    },
    {
        "line": 16,
        "fullcodeline": "size_t off = 0;"
    },
    {
        "line": 20,
        "fullcodeline": "msgpack_sbuffer_init(&mp_sbuf);"
    },
    {
        "line": 21,
        "fullcodeline": "msgpack_packer_init(&mp_pck, &mp_sbuf, msgpack_sbuffer_write);"
    },
    {
        "line": 23,
        "fullcodeline": "msgpack_unpacked_init(&result);"
    },
    {
        "line": 24,
        "fullcodeline": "ret = flb_pack_json(request->data.data, request->data.len, &buf, &buf_size,"
    },
    {
        "line": 30,
        "fullcodeline": "ret = msgpack_unpack_next(&result, buf, buf_size, &off);"
    },
    {
        "line": 65,
        "fullcodeline": "msgpack_pack_map(&mp_pck, 2);"
    },
    {
        "line": 67,
        "fullcodeline": "msgpack_pack_str_with_body(&mp_pck, STR_INPUTS, STR_INPUTS_LEN);"
    },
    {
        "line": 68,
        "fullcodeline": "msgpack_pack_map(&mp_pck, inputs->size);"
    },
    {
        "line": 121,
        "fullcodeline": "msgpack_pack_str_with_body(&mp_pck, \"result\", strlen(\"result\"));"
    },
    {
        "line": 126,
        "fullcodeline": "msgpack_unpacked_destroy(&result);"
    },
    {
        "line": 153,
        "fullcodeline": "out_buf = flb_msgpack_raw_to_json_sds(mp_sbuf.data, mp_sbuf.size);"
    },
    {
        "line": 157,
        "fullcodeline": "msgpack_sbuffer_destroy(&mp_sbuf);"
    },
    {
        "line": 159,
        "fullcodeline": "mk_http_status(request, response);"
    },
    {
        "line": 160,
        "fullcodeline": "mk_http_send(request,"
    },
    {
        "line": 162,
        "fullcodeline": "mk_http_done(request);"
    },
    {
        "line": 164,
        "fullcodeline": "flb_sds_destroy(out_buf);"
    },
    {
        "line": 26,
        "fullcodeline": "if (ret == -1) {"
    },
    {
        "line": 31,
        "fullcodeline": "if (ret != MSGPACK_UNPACK_SUCCESS) {"
    },
    {
        "line": 37,
        "fullcodeline": "if (result.data.type != MSGPACK_OBJECT_MAP) {"
    },
    {
        "line": 43,
        "fullcodeline": "for (i = 0; i < result.data.via.map.size; i++) {"
    },
    {
        "line": 59,
        "fullcodeline": "if (inputs == NULL) {"
    },
    {
        "line": 70,
        "fullcodeline": "for (i = 0; i < inputs->size; i++) {"
    },
    {
        "line": 80,
        "fullcodeline": "for (i = 0; i < inputs->size; i++) {"
    },
    {
        "line": 123,
        "fullcodeline": "if (buf != NULL) {"
    },
    {
        "line": 127,
        "fullcodeline": "if (response == 404) {"
    },
    {
        "line": 154,
        "fullcodeline": "if (out_buf == NULL) {"
    },
    {
        "line": 161,
        "fullcodeline": "out_buf, flb_sds_len(out_buf), NULL);"
    },
    {
        "line": 32,
        "fullcodeline": "ret = -1;"
    },
    {
        "line": 33,
        "fullcodeline": "error_msg = flb_sds_create(\"unfinished input\");"
    },
    {
        "line": 38,
        "fullcodeline": "response = 503;"
    },
    {
        "line": 39,
        "fullcodeline": "error_msg = flb_sds_create(\"input is not an object\");"
    },
    {
        "line": 60,
        "fullcodeline": "response = 503;"
    },
    {
        "line": 61,
        "fullcodeline": "error_msg = flb_sds_create(\"inputs not found\");"
    },
    {
        "line": 85,
        "fullcodeline": "msgpack_pack_str_with_body(&mp_pck, input_name, input_nlen);"
    },
    {
        "line": 124,
        "fullcodeline": "flb_free(buf);"
    },
    {
        "line": 128,
        "fullcodeline": "msgpack_pack_map(&mp_pck, 1);"
    },
    {
        "line": 129,
        "fullcodeline": "msgpack_pack_str_with_body(&mp_pck, HTTP_FIELD_STATUS, HTTP_FIELD_STATUS_LEN);"
    },
    {
        "line": 130,
        "fullcodeline": "msgpack_pack_str_with_body(&mp_pck, HTTP_RESULT_NOTFOUND, HTTP_RESULT_NOTFOUND_LEN);"
    },
    {
        "line": 155,
        "fullcodeline": "out_buf = flb_sds_create(\"serialization error\");"
    },
    {
        "line": 44,
        "fullcodeline": "if (result.data.via.map.ptr[i].val.type != MSGPACK_OBJECT_ARRAY) {"
    },
    {
        "line": 47,
        "fullcodeline": "if (result.data.via.map.ptr[i].key.type != MSGPACK_OBJECT_STR) {"
    },
    {
        "line": 50,
        "fullcodeline": "if (result.data.via.map.ptr[i].key.via.str.size < STR_INPUTS_LEN) {"
    },
    {
        "line": 53,
        "fullcodeline": "if (strncmp(result.data.via.map.ptr[i].key.via.str.ptr, STR_INPUTS, STR_INPUTS_LEN)) {"
    },
    {
        "line": 72,
        "fullcodeline": "if (inputs->ptr[i].type != MSGPACK_OBJECT_STR || inputs->ptr[i].via.str.ptr == NULL) {"
    },
    {
        "line": 87,
        "fullcodeline": "if (request->method == MK_METHOD_POST) {"
    },
    {
        "line": 73,
        "fullcodeline": "response = 503;"
    },
    {
        "line": 74,
        "fullcodeline": "error_msg = flb_sds_create(\"invalid input\");"
    },
    {
        "line": 75,
        "fullcodeline": "msgpack_sbuffer_clear(&mp_sbuf);"
    },
    {
        "line": 89,
        "fullcodeline": "ret = msgpack_params_enable_trace((struct flb_hs *)data, &result,"
    },
    {
        "line": 132,
        "fullcodeline": "else if (response == 503) {"
    },
    {
        "line": 92,
        "fullcodeline": "if (ret != 0) {"
    },
    {
        "line": 133,
        "fullcodeline": "msgpack_pack_map(&mp_pck, 2);"
    },
    {
        "line": 134,
        "fullcodeline": "msgpack_pack_str_with_body(&mp_pck, HTTP_FIELD_STATUS, HTTP_FIELD_STATUS_LEN);"
    },
    {
        "line": 135,
        "fullcodeline": "msgpack_pack_str_with_body(&mp_pck, HTTP_RESULT_OK, HTTP_RESULT_OK_LEN);"
    },
    {
        "line": 136,
        "fullcodeline": "msgpack_pack_str_with_body(&mp_pck, HTTP_FIELD_MESSAGE, HTTP_FIELD_MESSAGE_LEN);"
    },
    {
        "line": 93,
        "fullcodeline": "msgpack_pack_map(&mp_pck, 2);"
    },
    {
        "line": 94,
        "fullcodeline": "msgpack_pack_str_with_body(&mp_pck, HTTP_FIELD_STATUS, HTTP_FIELD_STATUS_LEN);"
    },
    {
        "line": 95,
        "fullcodeline": "msgpack_pack_str_with_body(&mp_pck, HTTP_RESULT_ERROR, HTTP_RESULT_ERROR_LEN);"
    },
    {
        "line": 96,
        "fullcodeline": "msgpack_pack_str_with_body(&mp_pck, HTTP_FIELD_RETURNCODE,"
    },
    {
        "line": 98,
        "fullcodeline": "msgpack_pack_int64(&mp_pck, ret);"
    },
    {
        "line": 106,
        "fullcodeline": "else if (request->method == MK_METHOD_DELETE) {"
    },
    {
        "line": 147,
        "fullcodeline": "msgpack_pack_map(&mp_pck, 1);"
    },
    {
        "line": 148,
        "fullcodeline": "msgpack_pack_str_with_body(&mp_pck, HTTP_FIELD_STATUS, HTTP_FIELD_STATUS_LEN);"
    },
    {
        "line": 149,
        "fullcodeline": "msgpack_pack_str_with_body(&mp_pck, HTTP_RESULT_OK, HTTP_RESULT_OK_LEN);"
    },
    {
        "line": 101,
        "fullcodeline": "msgpack_pack_map(&mp_pck, 1);"
    },
    {
        "line": 102,
        "fullcodeline": "msgpack_pack_str_with_body(&mp_pck, HTTP_FIELD_STATUS, HTTP_FIELD_STATUS_LEN);"
    },
    {
        "line": 103,
        "fullcodeline": "msgpack_pack_str_with_body(&mp_pck, HTTP_RESULT_OK, HTTP_RESULT_OK_LEN);"
    },
    {
        "line": 107,
        "fullcodeline": "disable_trace_input((struct flb_hs *)data, input_name, input_nlen);"
    },
    {
        "line": 108,
        "fullcodeline": "msgpack_pack_str_with_body(&mp_pck, HTTP_FIELD_STATUS, HTTP_FIELD_STATUS_LEN);"
    },
    {
        "line": 109,
        "fullcodeline": "msgpack_pack_str_with_body(&mp_pck, HTTP_RESULT_OK, HTTP_RESULT_OK_LEN);"
    },
    {
        "line": 138,
        "fullcodeline": "msgpack_pack_str_with_body(&mp_pck, error_msg, flb_sds_len(error_msg));"
    },
    {
        "line": 139,
        "fullcodeline": "flb_sds_destroy(error_msg);"
    },
    {
        "line": 112,
        "fullcodeline": "msgpack_pack_map(&mp_pck, 2);"
    },
    {
        "line": 113,
        "fullcodeline": "msgpack_pack_str_with_body(&mp_pck, HTTP_FIELD_STATUS, HTTP_FIELD_STATUS_LEN);"
    },
    {
        "line": 114,
        "fullcodeline": "msgpack_pack_str_with_body(&mp_pck, HTTP_RESULT_ERROR, HTTP_RESULT_ERROR_LEN);"
    },
    {
        "line": 115,
        "fullcodeline": "msgpack_pack_str_with_body(&mp_pck, HTTP_FIELD_MESSAGE, HTTP_FIELD_MESSAGE_LEN);"
    },
    {
        "line": 116,
        "fullcodeline": "msgpack_pack_str_with_body(&mp_pck, HTTP_RESULT_METHODNOTALLOWED,"
    },
    {
        "line": 142,
        "fullcodeline": "msgpack_pack_str_with_body(&mp_pck, HTTP_RESULT_UNKNOWNERROR,"
    }
]