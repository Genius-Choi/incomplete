[
    {
        "line": 11,
        "fullcodeline": "const HttpHeader *hdr_in = &request->header;"
    },
    {
        "line": 12,
        "fullcodeline": "const HttpHeaderEntry *e = nullptr;"
    },
    {
        "line": 13,
        "fullcodeline": "HttpHeaderPos pos = HttpHeaderInitPos;"
    },
    {
        "line": 14,
        "fullcodeline": "assert (hdr_out->owner == hoRequest);"
    },
    {
        "line": 27,
        "fullcodeline": "bool we_do_ranges = decideIfWeDoRanges (request);"
    },
    {
        "line": 29,
        "fullcodeline": "String strConnection (hdr_in->getList(Http::HdrType::CONNECTION));"
    },
    {
        "line": 45,
        "fullcodeline": "hdr_out->addVia(request->http_ver, hdr_in);"
    },
    {
        "line": 127,
        "fullcodeline": "httpFixupAuthentication(request, hdr_in, hdr_out, flags);"
    },
    {
        "line": 171,
        "fullcodeline": "httpHdrMangleList(hdr_out, request, al, ROR_REQUEST);"
    },
    {
        "line": 173,
        "fullcodeline": "strConnection.clean();"
    },
    {
        "line": 17,
        "fullcodeline": "if (request->lastmod > -1)"
    },
    {
        "line": 22,
        "fullcodeline": "if (request->etag.size() > 0) {"
    },
    {
        "line": 31,
        "fullcodeline": "while ((e = hdr_in->getEntry(&pos)))"
    },
    {
        "line": 32,
        "fullcodeline": "copyOneHeaderFromClientsideRequestToUpstreamRequest(e, strConnection, request, hdr_out, we_do_ranges, flags);"
    },
    {
        "line": 37,
        "fullcodeline": "if (!we_do_ranges && request->multipartRangeRequest()) {"
    },
    {
        "line": 60,
        "fullcodeline": "if (strcmp(opt_forwarded_for, \"delete\") != 0) {"
    },
    {
        "line": 103,
        "fullcodeline": "if (!hdr_out->has(Http::HdrType::HOST)) {"
    },
    {
        "line": 113,
        "fullcodeline": "if (!hdr_out->has(Http::HdrType::AUTHORIZATION)) {"
    },
    {
        "line": 131,
        "fullcodeline": "HttpHdrCc *cc = hdr_in->getCc();"
    },
    {
        "line": 147,
        "fullcodeline": "hdr_out->putCc(cc);"
    },
    {
        "line": 149,
        "fullcodeline": "delete cc;"
    },
    {
        "line": 155,
        "fullcodeline": "if (!hdr_out->has(Http::HdrType::CONNECTION)) // forwardUpgrade() may add it"
    },
    {
        "line": 18,
        "fullcodeline": "hdr_out->putTime(Http::HdrType::IF_MODIFIED_SINCE, request->lastmod);"
    },
    {
        "line": 23,
        "fullcodeline": "hdr_out->addEntry(new HttpHeaderEntry(Http::HdrType::IF_NONE_MATCH, SBuf(),"
    },
    {
        "line": 41,
        "fullcodeline": "request->ignoreRange(\"want to request the whole object\");"
    },
    {
        "line": 42,
        "fullcodeline": "request->flags.isRanged = false;"
    },
    {
        "line": 49,
        "fullcodeline": "String strSurrogate(hdr_in->getList(Http::HdrType::SURROGATE_CAPABILITY));"
    },
    {
        "line": 53,
        "fullcodeline": "snprintf(bbuf, BBUF_SZ, \"%s=\\\"Surrogate/1.0\\\"\", Config.Accel.surrogate_id);"
    },
    {
        "line": 55,
        "fullcodeline": "strListAdd(&strSurrogate, bbuf, ',');"
    },
    {
        "line": 56,
        "fullcodeline": "hdr_out->putStr(Http::HdrType::SURROGATE_CAPABILITY, strSurrogate.termedBuf());"
    },
    {
        "line": 62,
        "fullcodeline": "String strFwd = hdr_in->getList(Http::HdrType::X_FORWARDED_FOR);"
    },
    {
        "line": 133,
        "fullcodeline": "if (!cc)"
    },
    {
        "line": 137,
        "fullcodeline": "if (!cc->hasMaxAge() && !cc->hasNoCache()) {"
    },
    {
        "line": 156,
        "fullcodeline": "hdr_out->putStr(Http::HdrType::CONNECTION, flags.keepalive ? \"keep-alive\" : \"close\");"
    },
    {
        "line": 167,
        "fullcodeline": "hdr_out->putStr(Http::HdrType::TRANSFER_ENCODING, \"chunked\");"
    },
    {
        "line": 66,
        "fullcodeline": "if (strFwd.size() > 32*1024 || !strFwd.canGrowBy(strFwd.size())) {"
    },
    {
        "line": 79,
        "fullcodeline": "if (strcmp(opt_forwarded_for, \"on\") == 0) {"
    },
    {
        "line": 97,
        "fullcodeline": "if (strFwd.size() > 0)"
    },
    {
        "line": 114,
        "fullcodeline": "if (flags.toOrigin && !request->url.userInfo().isEmpty()) {"
    },
    {
        "line": 134,
        "fullcodeline": "cc = new HttpHdrCc();"
    },
    {
        "line": 139,
        "fullcodeline": "SBuf tmp(request->effectiveRequestUri());"
    },
    {
        "line": 140,
        "fullcodeline": "cc->maxAge(getMaxAge(entry ? entry->url() : tmp.c_str()));"
    },
    {
        "line": 145,
        "fullcodeline": "cc->onlyIfCached(true);"
    },
    {
        "line": 160,
        "fullcodeline": "if (flags.front_end_https == 1 || request->url.getScheme() == AnyP::PROTO_HTTPS)"
    },
    {
        "line": 24,
        "fullcodeline": "request->etag.termedBuf()));"
    },
    {
        "line": 70,
        "fullcodeline": "strFwd = \"error\";"
    },
    {
        "line": 72,
        "fullcodeline": "static int warnedCount = 0;"
    },
    {
        "line": 98,
        "fullcodeline": "hdr_out->putStr(Http::HdrType::X_FORWARDED_FOR, strFwd.termedBuf());"
    },
    {
        "line": 105,
        "fullcodeline": "hdr_out->putStr(Http::HdrType::HOST, request->peer_domain);"
    },
    {
        "line": 115,
        "fullcodeline": "static char result[base64_encode_len(MAX_URL*2)]; // should be big enough for a single URI segment"
    },
    {
        "line": 117,
        "fullcodeline": "base64_encode_init(&ctx);"
    },
    {
        "line": 118,
        "fullcodeline": "size_t blen = base64_encode_update(&ctx, result, request->url.userInfo().length(), reinterpret_cast<const uint8_t*>(request->url.userInfo().rawContent()));"
    },
    {
        "line": 119,
        "fullcodeline": "blen += base64_encode_final(&ctx, result+blen);"
    },
    {
        "line": 120,
        "fullcodeline": "result[blen] = '\\0';"
    },
    {
        "line": 161,
        "fullcodeline": "hdr_out->putStr(Http::HdrType::FRONT_END_HTTPS, \"On\");"
    },
    {
        "line": 73,
        "fullcodeline": "if (warnedCount++ < 100) {"
    },
    {
        "line": 81,
        "fullcodeline": "if ( request->client_addr.isNoAddr() )"
    },
    {
        "line": 107,
        "fullcodeline": "SBuf authority = request->url.authority();"
    },
    {
        "line": 108,
        "fullcodeline": "hdr_out->putStr(Http::HdrType::HOST, authority.c_str());"
    },
    {
        "line": 74,
        "fullcodeline": "const SBuf url(entry ? SBuf(entry->url()) : request->effectiveRequestUri());"
    },
    {
        "line": 75,
        "fullcodeline": "debugs(11, DBG_IMPORTANT, \"WARNING: likely forwarding loop with \" << url);"
    },
    {
        "line": 82,
        "fullcodeline": "strListAdd(&strFwd, \"unknown\", ',');"
    },
    {
        "line": 85,
        "fullcodeline": "} else if (strcmp(opt_forwarded_for, \"off\") == 0) {"
    },
    {
        "line": 122,
        "fullcodeline": "httpHeaderPutStrf(hdr_out, Http::HdrType::AUTHORIZATION, \"Basic %.*s\", (int)blen, result);"
    },
    {
        "line": 84,
        "fullcodeline": "strListAdd(&strFwd, request->client_addr.toStr(ntoabuf, MAX_IPSTRLEN), ',');"
    },
    {
        "line": 87,
        "fullcodeline": "strListAdd(&strFwd, \"unknown\", ',');"
    },
    {
        "line": 88,
        "fullcodeline": "} else if (strcmp(opt_forwarded_for, \"transparent\") == 0) {"
    },
    {
        "line": 90,
        "fullcodeline": "} else if (strcmp(opt_forwarded_for, \"truncate\") == 0) {"
    },
    {
        "line": 92,
        "fullcodeline": "if ( request->client_addr.isNoAddr() )"
    },
    {
        "line": 93,
        "fullcodeline": "strFwd = \"unknown\";"
    },
    {
        "line": 95,
        "fullcodeline": "strFwd = request->client_addr.toStr(ntoabuf, MAX_IPSTRLEN);"
    }
]