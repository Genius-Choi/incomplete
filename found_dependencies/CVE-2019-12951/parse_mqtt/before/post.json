[
    {
        "line": 3,
        "fullcodeline": "size_t len = 0, len_len = 0;"
    },
    {
        "line": 5,
        "fullcodeline": "unsigned char lc = 0;"
    },
    {
        "line": 10,
        "fullcodeline": "cmd = header >> 4;"
    },
    {
        "line": 13,
        "fullcodeline": "len = len_len = 0;"
    },
    {
        "line": 14,
        "fullcodeline": "p = io->buf + 1;"
    },
    {
        "line": 23,
        "fullcodeline": "end = p + len;"
    },
    {
        "line": 28,
        "fullcodeline": "mm->cmd = cmd;"
    },
    {
        "line": 29,
        "fullcodeline": "mm->qos = MG_MQTT_GET_QOS(header);"
    },
    {
        "line": 110,
        "fullcodeline": "mm->len = end - io->buf;"
    },
    {
        "line": 8,
        "fullcodeline": "if (io->len < 2) return MG_MQTT_ERROR_INCOMPLETE_MSG;"
    },
    {
        "line": 15,
        "fullcodeline": "while ((size_t)(p - io->buf) < io->len) {"
    },
    {
        "line": 24,
        "fullcodeline": "if (lc & 0x80 || len > (io->len - (p - io->buf))) {"
    },
    {
        "line": 17,
        "fullcodeline": "len += (lc & 0x7f) << 7 * len_len;"
    },
    {
        "line": 18,
        "fullcodeline": "len_len++;"
    },
    {
        "line": 73,
        "fullcodeline": "mm->connack_ret_code = p[1];"
    },
    {
        "line": 80,
        "fullcodeline": "mm->message_id = getu16(p);"
    },
    {
        "line": 96,
        "fullcodeline": "mm->message_id = getu16(p);"
    },
    {
        "line": 97,
        "fullcodeline": "p += 2;"
    },
    {
        "line": 102,
        "fullcodeline": "mm->payload.p = p;"
    },
    {
        "line": 103,
        "fullcodeline": "mm->payload.len = end - p;"
    },
    {
        "line": 19,
        "fullcodeline": "if (!(lc & 0x80)) break;"
    },
    {
        "line": 20,
        "fullcodeline": "if (len_len > 4) return MG_MQTT_ERROR_MALFORMED_MSG;"
    },
    {
        "line": 33,
        "fullcodeline": "p = scanto(p, &mm->protocol_name);"
    },
    {
        "line": 37,
        "fullcodeline": "mm->keep_alive_timer = getu16(p);"
    },
    {
        "line": 38,
        "fullcodeline": "p += 2;"
    },
    {
        "line": 40,
        "fullcodeline": "p = scanto(p, &mm->client_id);"
    },
    {
        "line": 60,
        "fullcodeline": "LOG(LL_DEBUG,"
    },
    {
        "line": 72,
        "fullcodeline": "if (end - p < 2) return MG_MQTT_ERROR_MALFORMED_MSG;"
    },
    {
        "line": 83,
        "fullcodeline": "p = scanto(p, &mm->topic);"
    },
    {
        "line": 90,
        "fullcodeline": "mm->payload.p = p;"
    },
    {
        "line": 91,
        "fullcodeline": "mm->payload.len = end - p;"
    },
    {
        "line": 95,
        "fullcodeline": "if (end - p < 2) return MG_MQTT_ERROR_MALFORMED_MSG;"
    },
    {
        "line": 16,
        "fullcodeline": "lc = *((const unsigned char *) p++);"
    },
    {
        "line": 34,
        "fullcodeline": "if (p > end - 4) return MG_MQTT_ERROR_MALFORMED_MSG;"
    },
    {
        "line": 39,
        "fullcodeline": "if (p >= end) return MG_MQTT_ERROR_MALFORMED_MSG;"
    },
    {
        "line": 41,
        "fullcodeline": "if (p > end) return MG_MQTT_ERROR_MALFORMED_MSG;"
    },
    {
        "line": 42,
        "fullcodeline": "if (mm->connect_flags & MG_MQTT_HAS_WILL) {"
    },
    {
        "line": 46,
        "fullcodeline": "if (mm->connect_flags & MG_MQTT_HAS_WILL) {"
    },
    {
        "line": 50,
        "fullcodeline": "if (mm->connect_flags & MG_MQTT_HAS_USER_NAME) {"
    },
    {
        "line": 54,
        "fullcodeline": "if (mm->connect_flags & MG_MQTT_HAS_PASSWORD) {"
    },
    {
        "line": 58,
        "fullcodeline": "if (p != end) return MG_MQTT_ERROR_MALFORMED_MSG;"
    },
    {
        "line": 61,
        "fullcodeline": "(\"%d %2x %d proto [%.*s] client_id [%.*s] will_topic [%.*s] \""
    },
    {
        "line": 84,
        "fullcodeline": "if (p > end) return MG_MQTT_ERROR_MALFORMED_MSG;"
    },
    {
        "line": 85,
        "fullcodeline": "if (mm->qos > 0) {"
    },
    {
        "line": 35,
        "fullcodeline": "mm->protocol_version = *(uint8_t *) p++;"
    },
    {
        "line": 36,
        "fullcodeline": "mm->connect_flags = *(uint8_t *) p++;"
    },
    {
        "line": 44,
        "fullcodeline": "p = scanto(p, &mm->will_topic);"
    },
    {
        "line": 48,
        "fullcodeline": "p = scanto(p, &mm->will_message);"
    },
    {
        "line": 52,
        "fullcodeline": "p = scanto(p, &mm->user_name);"
    },
    {
        "line": 56,
        "fullcodeline": "p = scanto(p, &mm->password);"
    },
    {
        "line": 87,
        "fullcodeline": "mm->message_id = getu16(p);"
    },
    {
        "line": 88,
        "fullcodeline": "p += 2;"
    },
    {
        "line": 43,
        "fullcodeline": "if (p >= end) return MG_MQTT_ERROR_MALFORMED_MSG;"
    },
    {
        "line": 47,
        "fullcodeline": "if (p >= end) return MG_MQTT_ERROR_MALFORMED_MSG;"
    },
    {
        "line": 51,
        "fullcodeline": "if (p >= end) return MG_MQTT_ERROR_MALFORMED_MSG;"
    },
    {
        "line": 55,
        "fullcodeline": "if (p >= end) return MG_MQTT_ERROR_MALFORMED_MSG;"
    },
    {
        "line": 63,
        "fullcodeline": "(int) len, (int) mm->connect_flags, (int) mm->keep_alive_timer,"
    },
    {
        "line": 86,
        "fullcodeline": "if (end - p < 2) return MG_MQTT_ERROR_MALFORMED_MSG;"
    }
]