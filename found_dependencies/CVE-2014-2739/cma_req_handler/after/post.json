[
    {
        "line": 7,
        "fullcodeline": "listen_id = cm_id->context;"
    },
    {
        "line": 14,
        "fullcodeline": "memset(&event, 0, sizeof event);"
    },
    {
        "line": 15,
        "fullcodeline": "offset = cma_user_data_offset(listen_id);"
    },
    {
        "line": 16,
        "fullcodeline": "event.event = RDMA_CM_EVENT_CONNECT_REQUEST;"
    },
    {
        "line": 32,
        "fullcodeline": "mutex_lock_nested(&conn_id->handler_mutex, SINGLE_DEPTH_NESTING);"
    },
    {
        "line": 33,
        "fullcodeline": "ret = cma_acquire_dev(conn_id, listen_id);"
    },
    {
        "line": 37,
        "fullcodeline": "conn_id->cm_id.ib = cm_id;"
    },
    {
        "line": 38,
        "fullcodeline": "cm_id->context = conn_id;"
    },
    {
        "line": 39,
        "fullcodeline": "cm_id->cm_handler = cma_ib_handler;"
    },
    {
        "line": 45,
        "fullcodeline": "atomic_inc(&conn_id->refcount);"
    },
    {
        "line": 46,
        "fullcodeline": "ret = conn_id->id.event_handler(&conn_id->id, &event);"
    },
    {
        "line": 53,
        "fullcodeline": "mutex_lock(&lock);"
    },
    {
        "line": 57,
        "fullcodeline": "mutex_unlock(&lock);"
    },
    {
        "line": 58,
        "fullcodeline": "mutex_unlock(&conn_id->handler_mutex);"
    },
    {
        "line": 59,
        "fullcodeline": "mutex_unlock(&listen_id->handler_mutex);"
    },
    {
        "line": 60,
        "fullcodeline": "cma_deref_id(conn_id);"
    },
    {
        "line": 64,
        "fullcodeline": "cma_deref_id(conn_id);"
    },
    {
        "line": 66,
        "fullcodeline": "conn_id->cm_id.ib = NULL;"
    },
    {
        "line": 68,
        "fullcodeline": "cma_exch(conn_id, RDMA_CM_DESTROYING);"
    },
    {
        "line": 69,
        "fullcodeline": "mutex_unlock(&conn_id->handler_mutex);"
    },
    {
        "line": 71,
        "fullcodeline": "mutex_unlock(&listen_id->handler_mutex);"
    },
    {
        "line": 8,
        "fullcodeline": "if (!cma_check_req_qp_type(&listen_id->id, ib_event))"
    },
    {
        "line": 11,
        "fullcodeline": "if (cma_disable_callback(listen_id, RDMA_CM_LISTEN))"
    },
    {
        "line": 17,
        "fullcodeline": "if (ib_event->event == IB_CM_SIDR_REQ_RECEIVED) {"
    },
    {
        "line": 27,
        "fullcodeline": "if (!conn_id) {"
    },
    {
        "line": 54,
        "fullcodeline": "if (cma_comp(conn_id, RDMA_CM_CONNECT) &&"
    },
    {
        "line": 18,
        "fullcodeline": "conn_id = cma_new_udp_id(&listen_id->id, ib_event);"
    },
    {
        "line": 19,
        "fullcodeline": "event.param.ud.private_data = ib_event->private_data + offset;"
    },
    {
        "line": 20,
        "fullcodeline": "event.param.ud.private_data_len ="
    },
    {
        "line": 28,
        "fullcodeline": "ret = -ENOMEM;"
    },
    {
        "line": 55,
        "fullcodeline": "(conn_id->id.qp_type != IB_QPT_UD))"
    },
    {
        "line": 56,
        "fullcodeline": "ib_send_cm_mra(cm_id, CMA_CM_MRA_SETTING, NULL, 0);"
    },
    {
        "line": 73,
        "fullcodeline": "rdma_destroy_id(&conn_id->id);"
    },
    {
        "line": 9,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 12,
        "fullcodeline": "return -ECONNABORTED;"
    },
    {
        "line": 21,
        "fullcodeline": "IB_CM_SIDR_REQ_PRIVATE_DATA_SIZE - offset;"
    },
    {
        "line": 23,
        "fullcodeline": "conn_id = cma_new_conn_id(&listen_id->id, ib_event);"
    },
    {
        "line": 24,
        "fullcodeline": "cma_set_req_event_data(&event, &ib_event->param.req_rcvd,"
    }
]