[
    {
        "line": 2,
        "fullcodeline": "clean_params = User.association_name_to_id_convert(params)"
    },
    {
        "line": 3,
        "fullcodeline": "clean_params = User.param_cleanup(clean_params, true)"
    },
    {
        "line": 8,
        "fullcodeline": "admin_account_exists = true"
    },
    {
        "line": 138,
        "fullcodeline": "user.delete('password')"
    },
    {
        "line": 9,
        "fullcodeline": "if count <= 2"
    },
    {
        "line": 14,
        "fullcodeline": "if !current_user"
    },
    {
        "line": 77,
        "fullcodeline": "if !admin_account_exists"
    },
    {
        "line": 97,
        "fullcodeline": "if params[:invite].present? && current_user"
    },
    {
        "line": 112,
        "fullcodeline": "if params[:signup].present? && !current_user"
    },
    {
        "line": 121,
        "fullcodeline": "if response_expand?"
    },
    {
        "line": 128,
        "fullcodeline": "if response_full?"
    },
    {
        "line": 139,
        "fullcodeline": "render json: user, status: :created"
    },
    {
        "line": 10,
        "fullcodeline": "admin_account_exists = false"
    },
    {
        "line": 32,
        "fullcodeline": "exists = User.exists?(email: clean_params[:email].downcase.strip)"
    },
    {
        "line": 35,
        "fullcodeline": "user = User.new(clean_params)"
    },
    {
        "line": 36,
        "fullcodeline": "user.associations_from_param(params)"
    },
    {
        "line": 37,
        "fullcodeline": "user.updated_by_id = 1"
    },
    {
        "line": 38,
        "fullcodeline": "user.created_by_id = 1"
    },
    {
        "line": 41,
        "fullcodeline": "group_ids = []"
    },
    {
        "line": 42,
        "fullcodeline": "role_ids  = []"
    },
    {
        "line": 55,
        "fullcodeline": "user.role_ids  = role_ids"
    },
    {
        "line": 56,
        "fullcodeline": "user.group_ids = group_ids"
    },
    {
        "line": 68,
        "fullcodeline": "check_attributes_by_current_user_permission(params)"
    },
    {
        "line": 70,
        "fullcodeline": "user = User.new(clean_params)"
    },
    {
        "line": 71,
        "fullcodeline": "user.associations_from_param(params)"
    },
    {
        "line": 78,
        "fullcodeline": "Setting.set('system_init_done', true)"
    },
    {
        "line": 86,
        "fullcodeline": "Calendar.init_setup(request.remote_ip)"
    },
    {
        "line": 99,
        "fullcodeline": "token = Token.create(action: 'PasswordReset', user_id: user.id)"
    },
    {
        "line": 100,
        "fullcodeline": "NotificationFactory::Mailer.notification("
    },
    {
        "line": 113,
        "fullcodeline": "result = User.signup_new_token(user)"
    },
    {
        "line": 114,
        "fullcodeline": "NotificationFactory::Mailer.notification("
    },
    {
        "line": 123,
        "fullcodeline": "user.delete('password')"
    },
    {
        "line": 124,
        "fullcodeline": "render json: user, status: :created"
    },
    {
        "line": 129,
        "fullcodeline": "result = {"
    },
    {
        "line": 133,
        "fullcodeline": "render json: result, status: :created"
    },
    {
        "line": 137,
        "fullcodeline": "user = user.reload.attributes_with_association_ids"
    },
    {
        "line": 17,
        "fullcodeline": "if admin_account_exists && !Setting.get('user_create_account')"
    },
    {
        "line": 22,
        "fullcodeline": "if admin_account_exists && !params[:signup]"
    },
    {
        "line": 43,
        "fullcodeline": "if count <= 2"
    },
    {
        "line": 27,
        "fullcodeline": "if clean_params[:email].blank?"
    },
    {
        "line": 44,
        "fullcodeline": "Role.where(name: %w[Admin Agent]).each do |role|"
    },
    {
        "line": 47,
        "fullcodeline": "Group.all.each do |group|"
    },
    {
        "line": 61,
        "fullcodeline": "user.source = 'signup'"
    },
    {
        "line": 81,
        "fullcodeline": "if user.email.present?"
    },
    {
        "line": 82,
        "fullcodeline": "Service::Image.organization_suggest(user.email)"
    },
    {
        "line": 90,
        "fullcodeline": "TextModule.load(request.env['HTTP_ACCEPT_LANGUAGE'] || 'en-us')"
    },
    {
        "line": 98,
        "fullcodeline": "sleep 5 if ENV['REMOTE_URL'].present?"
    },
    {
        "line": 103,
        "fullcodeline": "objects:  {"
    },
    {
        "line": 104,
        "fullcodeline": "token:        token,"
    },
    {
        "line": 105,
        "fullcodeline": "user:         user,"
    },
    {
        "line": 106,
        "fullcodeline": "current_user: current_user,"
    },
    {
        "line": 122,
        "fullcodeline": "user = user.reload.attributes_with_association_names"
    },
    {
        "line": 130,
        "fullcodeline": "id:     user.id,"
    },
    {
        "line": 131,
        "fullcodeline": "assets: user.assets({}),"
    },
    {
        "line": 92,
        "fullcodeline": "logger.error \"Unable to load text modules #{request.env['HTTP_ACCEPT_LANGUAGE'] || 'en-us'}: #{e.message}\""
    }
]