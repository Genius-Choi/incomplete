[
    {
        "line": 3,
        "fullcodeline": "debugs(17, 3, clientConn << \": Fetching \" << request->method << ' ' << entry->url());"
    },
    {
        "line": 9,
        "fullcodeline": "assert(Comm::IsConnOpen(serverConn));"
    },
    {
        "line": 11,
        "fullcodeline": "assert(!waitingForDispatched);"
    },
    {
        "line": 12,
        "fullcodeline": "waitingForDispatched = true;"
    },
    {
        "line": 14,
        "fullcodeline": "fd_note(serverConnection()->fd, entry->url());"
    },
    {
        "line": 16,
        "fullcodeline": "fd_table[serverConnection()->fd].noteUse();"
    },
    {
        "line": 19,
        "fullcodeline": "assert(entry->ping_status != PING_WAITING);"
    },
    {
        "line": 21,
        "fullcodeline": "assert(entry->locked());"
    },
    {
        "line": 23,
        "fullcodeline": "EBIT_SET(entry->flags, ENTRY_DISPATCHED);"
    },
    {
        "line": 25,
        "fullcodeline": "flags.connected_okay = true;"
    },
    {
        "line": 27,
        "fullcodeline": "netdbPingSite(request->url.host());"
    },
    {
        "line": 33,
        "fullcodeline": "if (Ip::Qos::TheConfig.isHitNfmarkActive()) {"
    },
    {
        "line": 65,
        "fullcodeline": "if (const auto peer = serverConnection()->getPeer()) {"
    },
    {
        "line": 66,
        "fullcodeline": "++peer->stats.fetches;"
    },
    {
        "line": 67,
        "fullcodeline": "request->prepForPeering(*peer);"
    },
    {
        "line": 68,
        "fullcodeline": "httpStart(this);"
    },
    {
        "line": 34,
        "fullcodeline": "if (Comm::IsConnOpen(clientConn) && Comm::IsConnOpen(serverConnection())) {"
    },
    {
        "line": 71,
        "fullcodeline": "request->prepForDirect();"
    },
    {
        "line": 35,
        "fullcodeline": "fde * clientFde = &fd_table[clientConn->fd]; // XXX: move the fd_table access into Ip::Qos"
    },
    {
        "line": 37,
        "fullcodeline": "clientFde->nfConnmarkFromServer = Ip::Qos::getNfConnmark(serverConnection(), Ip::Qos::dirOpened);"
    },
    {
        "line": 70,
        "fullcodeline": "assert(!request->flags.sslPeek);"
    },
    {
        "line": 73,
        "fullcodeline": "switch (request->url.getScheme()) {"
    },
    {
        "line": 107,
        "fullcodeline": "debugs(17, DBG_IMPORTANT, \"WARNING: Cannot retrieve '\" << entry->url() << \"'.\");"
    },
    {
        "line": 108,
        "fullcodeline": "const auto anErr = new ErrorState(ERR_UNSUP_REQ, Http::scBadRequest, request, al);"
    }
]