[
    {
        "line": 3,
        "fullcodeline": "struct ext4_sb_info *sbi = EXT4_SB(sb);"
    },
    {
        "line": 4,
        "fullcodeline": "struct ext4_group_desc *gdp = NULL;"
    },
    {
        "line": 7,
        "fullcodeline": "int groups_per_flex = 0;"
    },
    {
        "line": 12,
        "fullcodeline": "groups_per_flex = 1 << sbi->s_log_groups_per_flex;"
    },
    {
        "line": 20,
        "fullcodeline": "flex_group_count = ((sbi->s_groups_count + groups_per_flex - 1) +"
    },
    {
        "line": 23,
        "fullcodeline": "size = flex_group_count * sizeof(struct flex_groups);"
    },
    {
        "line": 24,
        "fullcodeline": "sbi->s_flex_groups = ext4_kvzalloc(size, GFP_KERNEL);"
    },
    {
        "line": 14,
        "fullcodeline": "if (groups_per_flex < 2) {"
    },
    {
        "line": 25,
        "fullcodeline": "if (sbi->s_flex_groups == NULL) {"
    },
    {
        "line": 31,
        "fullcodeline": "for (i = 0; i < sbi->s_groups_count; i++) {"
    },
    {
        "line": 15,
        "fullcodeline": "sbi->s_log_groups_per_flex = 0;"
    },
    {
        "line": 26,
        "fullcodeline": "ext4_msg(sb, KERN_ERR, \"not enough memory for %u flex groups\","
    },
    {
        "line": 32,
        "fullcodeline": "gdp = ext4_get_group_desc(sb, i, NULL);"
    },
    {
        "line": 34,
        "fullcodeline": "flex_group = ext4_flex_group(sbi, i);"
    },
    {
        "line": 35,
        "fullcodeline": "atomic_add(ext4_free_inodes_count(sb, gdp),"
    },
    {
        "line": 37,
        "fullcodeline": "atomic_add(ext4_free_group_clusters(sb, gdp),"
    },
    {
        "line": 39,
        "fullcodeline": "atomic_add(ext4_used_dirs_count(sb, gdp),"
    },
    {
        "line": 21,
        "fullcodeline": "((le16_to_cpu(sbi->s_es->s_reserved_gdt_blocks) + 1) <<"
    },
    {
        "line": 22,
        "fullcodeline": "EXT4_DESC_PER_BLOCK_BITS(sb))) / groups_per_flex;"
    }
]