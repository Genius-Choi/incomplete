[
    {
        "line": 3,
        "fullcodeline": "static const U32 maxSrcLog = 23;"
    },
    {
        "line": 4,
        "fullcodeline": "static const U32 maxSampleLog = 22;"
    },
    {
        "line": 5,
        "fullcodeline": "size_t const srcBufferSize = (size_t)1<<maxSrcLog;"
    },
    {
        "line": 6,
        "fullcodeline": "size_t const dstBufferSize = (size_t)1<<maxSampleLog;"
    },
    {
        "line": 7,
        "fullcodeline": "size_t const cBufferSize   = ZSTD_compressBound(dstBufferSize);"
    },
    {
        "line": 8,
        "fullcodeline": "BYTE* cNoiseBuffer[5];"
    },
    {
        "line": 9,
        "fullcodeline": "BYTE* const cBuffer = (BYTE*) malloc (cBufferSize);"
    },
    {
        "line": 10,
        "fullcodeline": "BYTE* const dstBuffer = (BYTE*) malloc (dstBufferSize);"
    },
    {
        "line": 11,
        "fullcodeline": "BYTE* const mirrorBuffer = (BYTE*) malloc (dstBufferSize);"
    },
    {
        "line": 12,
        "fullcodeline": "ZSTD_CCtx* const refCtx = ZSTD_createCCtx();"
    },
    {
        "line": 13,
        "fullcodeline": "ZSTD_CCtx* const ctx = ZSTD_createCCtx();"
    },
    {
        "line": 14,
        "fullcodeline": "ZSTD_DCtx* const dctx = ZSTD_createDCtx();"
    },
    {
        "line": 15,
        "fullcodeline": "U32 result = 0;"
    },
    {
        "line": 16,
        "fullcodeline": "U32 testNb = 0;"
    },
    {
        "line": 17,
        "fullcodeline": "U32 coreSeed = seed;"
    },
    {
        "line": 18,
        "fullcodeline": "UTIL_time_t const startClock = UTIL_getTime();"
    },
    {
        "line": 19,
        "fullcodeline": "U64 const maxClockSpan = maxDurationS * SEC_TO_MICRO;"
    },
    {
        "line": 20,
        "fullcodeline": "int const cLevelLimiter = bigTests ? 3 : 2;"
    },
    {
        "line": 23,
        "fullcodeline": "cNoiseBuffer[0] = (BYTE*)malloc (srcBufferSize);"
    },
    {
        "line": 24,
        "fullcodeline": "cNoiseBuffer[1] = (BYTE*)malloc (srcBufferSize);"
    },
    {
        "line": 25,
        "fullcodeline": "cNoiseBuffer[2] = (BYTE*)malloc (srcBufferSize);"
    },
    {
        "line": 26,
        "fullcodeline": "cNoiseBuffer[3] = (BYTE*)malloc (srcBufferSize);"
    },
    {
        "line": 27,
        "fullcodeline": "cNoiseBuffer[4] = (BYTE*)malloc (srcBufferSize);"
    },
    {
        "line": 28,
        "fullcodeline": "CHECK (!cNoiseBuffer[0] || !cNoiseBuffer[1] || !cNoiseBuffer[2] || !cNoiseBuffer[3] || !cNoiseBuffer[4]"
    },
    {
        "line": 33,
        "fullcodeline": "RDG_genBuffer(cNoiseBuffer[0], srcBufferSize, 0.00, 0., coreSeed);    /* pure noise */"
    },
    {
        "line": 34,
        "fullcodeline": "RDG_genBuffer(cNoiseBuffer[1], srcBufferSize, 0.05, 0., coreSeed);    /* barely compressible */"
    },
    {
        "line": 35,
        "fullcodeline": "RDG_genBuffer(cNoiseBuffer[2], srcBufferSize, compressibility, 0., coreSeed);"
    },
    {
        "line": 36,
        "fullcodeline": "RDG_genBuffer(cNoiseBuffer[3], srcBufferSize, 0.95, 0., coreSeed);    /* highly compressible */"
    },
    {
        "line": 37,
        "fullcodeline": "RDG_genBuffer(cNoiseBuffer[4], srcBufferSize, 1.00, 0., coreSeed);    /* sparse content */"
    },
    {
        "line": 280,
        "fullcodeline": "DISPLAY(\"\\r%u fuzzer tests completed   \\n\", testNb-1);"
    },
    {
        "line": 283,
        "fullcodeline": "ZSTD_freeCCtx(refCtx);"
    },
    {
        "line": 284,
        "fullcodeline": "ZSTD_freeCCtx(ctx);"
    },
    {
        "line": 285,
        "fullcodeline": "ZSTD_freeDCtx(dctx);"
    },
    {
        "line": 286,
        "fullcodeline": "free(cNoiseBuffer[0]);"
    },
    {
        "line": 287,
        "fullcodeline": "free(cNoiseBuffer[1]);"
    },
    {
        "line": 288,
        "fullcodeline": "free(cNoiseBuffer[2]);"
    },
    {
        "line": 289,
        "fullcodeline": "free(cNoiseBuffer[3]);"
    },
    {
        "line": 290,
        "fullcodeline": "free(cNoiseBuffer[4]);"
    },
    {
        "line": 291,
        "fullcodeline": "free(cBuffer);"
    },
    {
        "line": 292,
        "fullcodeline": "free(dstBuffer);"
    },
    {
        "line": 293,
        "fullcodeline": "free(mirrorBuffer);"
    },
    {
        "line": 40,
        "fullcodeline": "for (testNb=1; testNb < startTest; testNb++) FUZ_rand(&coreSeed);"
    },
    {
        "line": 43,
        "fullcodeline": "for ( ; (testNb <= nbTests) || (UTIL_clockSpanMicro(startClock) < maxClockSpan); testNb++ ) {"
    },
    {
        "line": 29,
        "fullcodeline": "|| !dstBuffer || !mirrorBuffer || !cBuffer || !refCtx || !ctx || !dctx,"
    },
    {
        "line": 57,
        "fullcodeline": "FUZ_rand(&coreSeed);"
    },
    {
        "line": 76,
        "fullcodeline": "sampleSize = FUZ_randomLength(&lseed, maxSampleLog);"
    },
    {
        "line": 79,
        "fullcodeline": "sampleBuffer = (BYTE*)malloc(sampleSize);"
    },
    {
        "line": 80,
        "fullcodeline": "CHECK(sampleBuffer==NULL, \"not enough memory for sample buffer\");"
    },
    {
        "line": 83,
        "fullcodeline": "crcOrig = XXH64(sampleBuffer, sampleSize, 0);"
    },
    {
        "line": 121,
        "fullcodeline": "DISPLAYLEVEL(5, \"fuzzer t%u: simple decompression test \\n\", testNb);"
    },
    {
        "line": 129,
        "fullcodeline": "free(sampleBuffer);   /* no longer useful after this point */"
    },
    {
        "line": 132,
        "fullcodeline": "DISPLAYLEVEL(5, \"fuzzer t%u: decompression of truncated source \\n\", testNb);"
    },
    {
        "line": 144,
        "fullcodeline": "DISPLAYLEVEL(5, \"fuzzer t%u: decompress into too small dst buffer \\n\", testNb);"
    },
    {
        "line": 193,
        "fullcodeline": "DISPLAYLEVEL(5, \"fuzzer t%u: Bufferless streaming compression test \\n\", testNb);"
    },
    {
        "line": 250,
        "fullcodeline": "DISPLAYLEVEL(5, \"fuzzer t%u: Bufferless streaming decompression test \\n\", testNb);"
    },
    {
        "line": 262,
        "fullcodeline": "CHECK_Z( ZSTD_decompressBegin_usingDict(dctx, dict, dictSize) );"
    },
    {
        "line": 263,
        "fullcodeline": "totalCSize = 0;"
    },
    {
        "line": 264,
        "fullcodeline": "totalGenSize = 0;"
    },
    {
        "line": 272,
        "fullcodeline": "CHECK (ZSTD_nextSrcSizeToDecompress(dctx) != 0, \"frame not fully decoded\");"
    },
    {
        "line": 273,
        "fullcodeline": "CHECK (totalGenSize != totalTestSize, \"streaming decompressed data : wrong size\")"
    },
    {
        "line": 274,
        "fullcodeline": "CHECK (totalCSize != cSize, \"compressed data should be fully read\")"
    },
    {
        "line": 54,
        "fullcodeline": "if (nbTests >= testNb) { DISPLAYUPDATE(2, \"\\r%6u/%6u    \", testNb, nbTests); }"
    },
    {
        "line": 58,
        "fullcodeline": "{ U32 const prime1 = 2654435761U; lseed = coreSeed ^ prime1; }"
    },
    {
        "line": 61,
        "fullcodeline": "{   U32 buffNb = FUZ_rand(&lseed) & 0x7F;"
    },
    {
        "line": 72,
        "fullcodeline": "srcBuffer = cNoiseBuffer[buffNb];"
    },
    {
        "line": 81,
        "fullcodeline": "{ size_t const sampleStart = FUZ_rand(&lseed) % (srcBufferSize - sampleSize);"
    },
    {
        "line": 82,
        "fullcodeline": "memcpy(sampleBuffer, srcBuffer + sampleStart, sampleSize); }"
    },
    {
        "line": 86,
        "fullcodeline": "{   int const cLevelPositive ="
    },
    {
        "line": 90,
        "fullcodeline": "int const cLevel = ((FUZ_rand(&lseed) & 15) == 3) ?"
    },
    {
        "line": 93,
        "fullcodeline": "DISPLAYLEVEL(5, \"fuzzer t%u: Simple compression test (level %i) \\n\", testNb, cLevel);"
    },
    {
        "line": 94,
        "fullcodeline": "cSize = ZSTD_compressCCtx(ctx, cBuffer, cBufferSize, sampleBuffer, sampleSize, cLevel);"
    },
    {
        "line": 95,
        "fullcodeline": "CHECK(ZSTD_isError(cSize), \"ZSTD_compressCCtx failed : %s\", ZSTD_getErrorName(cSize));"
    },
    {
        "line": 111,
        "fullcodeline": "CHECK_Z( ZSTD_getFrameHeader(&zfh, cBuffer, cSize) );"
    },
    {
        "line": 112,
        "fullcodeline": "CHECK(zfh.frameContentSize != sampleSize, \"Frame content size incorrect\");"
    },
    {
        "line": 116,
        "fullcodeline": "{   unsigned long long const rSize = ZSTD_findDecompressedSize(cBuffer, cSize);"
    },
    {
        "line": 117,
        "fullcodeline": "CHECK(rSize != sampleSize, \"decompressed size incorrect\");"
    },
    {
        "line": 122,
        "fullcodeline": "{   size_t const margin = (FUZ_rand(&lseed) & 1) ? 0 : (FUZ_rand(&lseed) & 31) + 1;"
    },
    {
        "line": 123,
        "fullcodeline": "size_t const dSize = ZSTD_decompress(dstBuffer, sampleSize + margin, cBuffer, cSize);"
    },
    {
        "line": 124,
        "fullcodeline": "CHECK(dSize != sampleSize, \"ZSTD_decompress failed (%s) (srcSize : %u ; cSize : %u)\", ZSTD_getErrorName(dSize), (U32)sampleSize, (U32)cSize);"
    },
    {
        "line": 133,
        "fullcodeline": "{   size_t const missing = (FUZ_rand(&lseed) % (cSize-2)) + 1;   /* no problem, as cSize > 4 (frameHeaderSizer) */"
    },
    {
        "line": 134,
        "fullcodeline": "size_t const tooSmallSize = cSize - missing;"
    },
    {
        "line": 135,
        "fullcodeline": "void* cBufferTooSmall = malloc(tooSmallSize);   /* valgrind will catch read overflows */"
    },
    {
        "line": 136,
        "fullcodeline": "CHECK(cBufferTooSmall == NULL, \"not enough memory !\");"
    },
    {
        "line": 137,
        "fullcodeline": "memcpy(cBufferTooSmall, cBuffer, tooSmallSize);"
    },
    {
        "line": 140,
        "fullcodeline": "free(cBufferTooSmall);"
    },
    {
        "line": 145,
        "fullcodeline": "if (sampleSize > 3) {"
    },
    {
        "line": 156,
        "fullcodeline": "if (cSize > 6) {"
    },
    {
        "line": 194,
        "fullcodeline": "{   U32 const testLog = FUZ_rand(&lseed) % maxSrcLog;"
    },
    {
        "line": 195,
        "fullcodeline": "U32 const dictLog = FUZ_rand(&lseed) % maxSrcLog;"
    },
    {
        "line": 196,
        "fullcodeline": "int const cLevel = (FUZ_rand(&lseed) %"
    },
    {
        "line": 200,
        "fullcodeline": "maxTestSize = FUZ_rLogLength(&lseed, testLog);"
    },
    {
        "line": 203,
        "fullcodeline": "dictSize = FUZ_rLogLength(&lseed, dictLog);   /* needed also for decompression */"
    },
    {
        "line": 204,
        "fullcodeline": "dict = srcBuffer + (FUZ_rand(&lseed) % (srcBufferSize - dictSize));"
    },
    {
        "line": 206,
        "fullcodeline": "DISPLAYLEVEL(6, \"fuzzer t%u: Compressing up to <=%u bytes at level %i with dictionary size %u \\n\","
    },
    {
        "line": 219,
        "fullcodeline": "CHECK_Z( ZSTD_copyCCtx(ctx, refCtx, 0) );"
    },
    {
        "line": 222,
        "fullcodeline": "{   U32 const nbChunks = (FUZ_rand(&lseed) & 127) + 2;"
    },
    {
        "line": 225,
        "fullcodeline": "XXH64_reset(&xxhState, 0);"
    },
    {
        "line": 246,
        "fullcodeline": "crcOrig = XXH64_digest(&xxhState);"
    },
    {
        "line": 253,
        "fullcodeline": "CHECK( ZSTD_getFrameHeader(&zfh, cBuffer, ZSTD_frameHeaderSize_max),"
    },
    {
        "line": 261,
        "fullcodeline": "if (dictSize<8) dictSize=0, dict=NULL;   /* disable dictionary */"
    },
    {
        "line": 265,
        "fullcodeline": "while (totalCSize < cSize) {"
    },
    {
        "line": 275,
        "fullcodeline": "{   U64 const crcDest = XXH64(dstBuffer, totalTestSize, 0);"
    },
    {
        "line": 276,
        "fullcodeline": "CHECK(crcOrig != crcDest, \"streaming decompressed data corrupted (pos %u / %u)\","
    },
    {
        "line": 62,
        "fullcodeline": "if (buffNb & 7) buffNb=2;   /* most common : compressible (P) */"
    },
    {
        "line": 87,
        "fullcodeline": "( FUZ_rand(&lseed) %"
    },
    {
        "line": 98,
        "fullcodeline": "if (cSize > 3) {"
    },
    {
        "line": 125,
        "fullcodeline": "{   U64 const crcDest = XXH64(dstBuffer, sampleSize, 0);"
    },
    {
        "line": 126,
        "fullcodeline": "CHECK(crcOrig != crcDest, \"decompression result corrupted (pos %u / %u)\", (U32)findDiff(sampleBuffer, dstBuffer, sampleSize), (U32)sampleSize);"
    },
    {
        "line": 138,
        "fullcodeline": "{ size_t const errorCode = ZSTD_decompress(dstBuffer, dstBufferSize, cBufferTooSmall, tooSmallSize);"
    },
    {
        "line": 139,
        "fullcodeline": "CHECK(!ZSTD_isError(errorCode), \"ZSTD_decompress should have failed ! (truncated src buffer)\"); }"
    },
    {
        "line": 146,
        "fullcodeline": "size_t const missing = (FUZ_rand(&lseed) % (sampleSize-2)) + 1;   /* no problem, as cSize > 4 (frameHeaderSizer) */"
    },
    {
        "line": 147,
        "fullcodeline": "size_t const tooSmallSize = sampleSize - missing;"
    },
    {
        "line": 148,
        "fullcodeline": "static const BYTE token = 0xA9;"
    },
    {
        "line": 149,
        "fullcodeline": "dstBuffer[tooSmallSize] = token;"
    },
    {
        "line": 152,
        "fullcodeline": "CHECK(dstBuffer[tooSmallSize] != token, \"ZSTD_decompress : dst buffer overflow\");"
    },
    {
        "line": 180,
        "fullcodeline": "DISPLAYLEVEL(5, \"fuzzer t%u: decompress noisy source \\n\", testNb);"
    },
    {
        "line": 201,
        "fullcodeline": "if (maxTestSize >= dstBufferSize) maxTestSize = dstBufferSize-1;"
    },
    {
        "line": 207,
        "fullcodeline": "testNb, (U32)maxTestSize, cLevel, (U32)dictSize);"
    },
    {
        "line": 209,
        "fullcodeline": "if (FUZ_rand(&lseed) & 0xF) {"
    },
    {
        "line": 226,
        "fullcodeline": "for (totalTestSize=0, cSize=0, n=0 ; n<nbChunks ; n++) {"
    },
    {
        "line": 242,
        "fullcodeline": "{   size_t const flushResult = ZSTD_compressEnd(ctx, cBuffer+cSize, cBufferSize-cSize, NULL, 0);"
    },
    {
        "line": 243,
        "fullcodeline": "CHECK (ZSTD_isError(flushResult), \"multi-segments epilogue error : %s\", ZSTD_getErrorName(flushResult));"
    },
    {
        "line": 244,
        "fullcodeline": "cSize += flushResult;"
    },
    {
        "line": 255,
        "fullcodeline": "{   size_t const roundBuffSize = ZSTD_decodingBufferSize_min(zfh.windowSize, zfh.frameContentSize);"
    },
    {
        "line": 256,
        "fullcodeline": "CHECK_Z(roundBuffSize);"
    },
    {
        "line": 257,
        "fullcodeline": "CHECK((roundBuffSize > totalTestSize) && (zfh.frameContentSize!=ZSTD_CONTENTSIZE_UNKNOWN),"
    },
    {
        "line": 266,
        "fullcodeline": "size_t const inSize = ZSTD_nextSrcSizeToDecompress(dctx);"
    },
    {
        "line": 267,
        "fullcodeline": "size_t const genSize = ZSTD_decompressContinue(dctx, dstBuffer+totalGenSize, dstBufferSize-totalGenSize, cBuffer+totalCSize, inSize);"
    },
    {
        "line": 268,
        "fullcodeline": "CHECK (ZSTD_isError(genSize), \"ZSTD_decompressContinue error : %s\", ZSTD_getErrorName(genSize));"
    },
    {
        "line": 269,
        "fullcodeline": "totalGenSize += genSize;"
    },
    {
        "line": 270,
        "fullcodeline": "totalCSize += inSize;"
    },
    {
        "line": 277,
        "fullcodeline": "(U32)findDiff(mirrorBuffer, dstBuffer, totalTestSize), (U32)totalTestSize);"
    },
    {
        "line": 55,
        "fullcodeline": "else { DISPLAYUPDATE(2, \"\\r%6u          \", testNb); }"
    },
    {
        "line": 91,
        "fullcodeline": "- (int)((FUZ_rand(&lseed) & 7) + 1) :   /* test negative cLevel */"
    },
    {
        "line": 99,
        "fullcodeline": "const size_t missing = (FUZ_rand(&lseed) % (cSize-2)) + 1;   /* no problem, as cSize > 4 (frameHeaderSizer) */"
    },
    {
        "line": 100,
        "fullcodeline": "const size_t tooSmallSize = cSize - missing;"
    },
    {
        "line": 101,
        "fullcodeline": "const U32 endMark = 0x4DC2B1A9;"
    },
    {
        "line": 102,
        "fullcodeline": "memcpy(dstBuffer+tooSmallSize, &endMark, 4);"
    },
    {
        "line": 150,
        "fullcodeline": "{ size_t const errorCode = ZSTD_decompress(dstBuffer, tooSmallSize, cBuffer, cSize);"
    },
    {
        "line": 151,
        "fullcodeline": "CHECK(!ZSTD_isError(errorCode), \"ZSTD_decompress should have failed : %u > %u (dst buffer too small)\", (U32)errorCode, (U32)tooSmallSize); }"
    },
    {
        "line": 158,
        "fullcodeline": "{   U32 const maxNbBits = FUZ_highbit32((U32)(cSize-4));"
    },
    {
        "line": 159,
        "fullcodeline": "size_t pos = 4;   /* preserve magic number (too easy to detect) */"
    },
    {
        "line": 181,
        "fullcodeline": "{   U32 const endMark = 0xA9B1C3D6;"
    },
    {
        "line": 182,
        "fullcodeline": "memcpy(dstBuffer+sampleSize, &endMark, 4);"
    },
    {
        "line": 210,
        "fullcodeline": "CHECK_Z ( ZSTD_compressBegin_usingDict(refCtx, dict, dictSize, cLevel) );"
    },
    {
        "line": 227,
        "fullcodeline": "size_t const segmentSize = FUZ_randomLength(&lseed, maxSampleLog);"
    },
    {
        "line": 228,
        "fullcodeline": "size_t const segmentStart = FUZ_rand(&lseed) % (srcBufferSize - segmentSize);"
    },
    {
        "line": 237,
        "fullcodeline": "XXH64_update(&xxhState, srcBuffer+segmentStart, segmentSize);"
    },
    {
        "line": 238,
        "fullcodeline": "memcpy(mirrorBuffer + totalTestSize, srcBuffer+segmentStart, segmentSize);"
    },
    {
        "line": 239,
        "fullcodeline": "totalTestSize += segmentSize;"
    },
    {
        "line": 259,
        "fullcodeline": "(U32)roundBuffSize, (U32)totalTestSize );"
    },
    {
        "line": 64,
        "fullcodeline": "buffNb >>= 3;"
    },
    {
        "line": 88,
        "fullcodeline": "(ZSTD_maxCLevel() - (FUZ_highbit32((U32)sampleSize) / cLevelLimiter)) )"
    },
    {
        "line": 103,
        "fullcodeline": "{ size_t const errorCode = ZSTD_compressCCtx(ctx, dstBuffer, tooSmallSize, sampleBuffer, sampleSize, cLevel);"
    },
    {
        "line": 104,
        "fullcodeline": "CHECK(!ZSTD_isError(errorCode), \"ZSTD_compressCCtx should have failed ! (buffer too small : %u < %u)\", (U32)tooSmallSize, (U32)cSize); }"
    },
    {
        "line": 105,
        "fullcodeline": "{ U32 endCheck; memcpy(&endCheck, dstBuffer+tooSmallSize, 4);"
    },
    {
        "line": 106,
        "fullcodeline": "CHECK(endCheck != endMark, \"ZSTD_compressCCtx : dst buffer overflow\"); }"
    },
    {
        "line": 183,
        "fullcodeline": "{   size_t const decompressResult = ZSTD_decompress(dstBuffer, sampleSize, cBuffer, cSize);"
    },
    {
        "line": 185,
        "fullcodeline": "CHECK((!ZSTD_isError(decompressResult)) && (decompressResult>sampleSize),"
    },
    {
        "line": 188,
        "fullcodeline": "{   U32 endCheck; memcpy(&endCheck, dstBuffer+sampleSize, 4);"
    },
    {
        "line": 189,
        "fullcodeline": "CHECK(endMark!=endCheck, \"ZSTD_decompress on noisy src : dst buffer overflow\");"
    },
    {
        "line": 197,
        "fullcodeline": "(ZSTD_maxCLevel() -"
    },
    {
        "line": 212,
        "fullcodeline": "ZSTD_compressionParameters const cPar = ZSTD_getCParams(cLevel, ZSTD_CONTENTSIZE_UNKNOWN, dictSize);"
    },
    {
        "line": 213,
        "fullcodeline": "ZSTD_frameParameters const fPar = { FUZ_rand(&lseed)&1 /* contentSizeFlag */,"
    },
    {
        "line": 216,
        "fullcodeline": "ZSTD_parameters const p = FUZ_makeParams(cPar, fPar);"
    },
    {
        "line": 217,
        "fullcodeline": "CHECK_Z ( ZSTD_compressBegin_advanced(refCtx, dict, dictSize, p, 0) );"
    },
    {
        "line": 230,
        "fullcodeline": "if (cBufferSize-cSize < ZSTD_compressBound(segmentSize)) break;   /* avoid invalid dstBufferTooSmall */"
    },
    {
        "line": 231,
        "fullcodeline": "if (totalTestSize+segmentSize > maxTestSize) break;"
    },
    {
        "line": 233,
        "fullcodeline": "{   size_t const compressResult = ZSTD_compressContinue(ctx, cBuffer+cSize, cBufferSize-cSize, srcBuffer+segmentStart, segmentSize);"
    },
    {
        "line": 234,
        "fullcodeline": "CHECK (ZSTD_isError(compressResult), \"multi-segments compression error : %s\", ZSTD_getErrorName(compressResult));"
    },
    {
        "line": 235,
        "fullcodeline": "cSize += compressResult;"
    },
    {
        "line": 65,
        "fullcodeline": "if (buffNb & 7) {"
    },
    {
        "line": 186,
        "fullcodeline": "\"ZSTD_decompress on noisy src : result is too large : %u > %u (dst buffer)\", (U32)decompressResult, (U32)sampleSize);"
    },
    {
        "line": 198,
        "fullcodeline": "(MAX(testLog, dictLog) / cLevelLimiter))) +"
    },
    {
        "line": 66,
        "fullcodeline": "const U32 tnb[2] = { 1, 3 };   /* barely/highly compressible */"
    },
    {
        "line": 67,
        "fullcodeline": "buffNb = tnb[buffNb >> 3];"
    },
    {
        "line": 162,
        "fullcodeline": "{   U32 const nbBits = FUZ_rand(&lseed) % maxNbBits;"
    },
    {
        "line": 163,
        "fullcodeline": "size_t const mask = (1<<nbBits) - 1;"
    },
    {
        "line": 164,
        "fullcodeline": "size_t const skipLength = FUZ_rand(&lseed) & mask;"
    },
    {
        "line": 165,
        "fullcodeline": "pos += skipLength;"
    },
    {
        "line": 167,
        "fullcodeline": "if (pos >= cSize) break;"
    },
    {
        "line": 169,
        "fullcodeline": "{   U32 const nbBitsCodes = FUZ_rand(&lseed) % maxNbBits;"
    },
    {
        "line": 170,
        "fullcodeline": "U32 const nbBits = nbBitsCodes ? nbBitsCodes-1 : 0;"
    },
    {
        "line": 171,
        "fullcodeline": "size_t const mask = (1<<nbBits) - 1;"
    },
    {
        "line": 172,
        "fullcodeline": "size_t const rNoiseLength = (FUZ_rand(&lseed) & mask) + 1;"
    },
    {
        "line": 173,
        "fullcodeline": "size_t const noiseLength = MIN(rNoiseLength, cSize-pos);"
    },
    {
        "line": 174,
        "fullcodeline": "size_t const noiseStart = FUZ_rand(&lseed) % (srcBufferSize - noiseLength);"
    },
    {
        "line": 175,
        "fullcodeline": "memcpy(cBuffer + pos, srcBuffer + noiseStart, noiseLength);"
    },
    {
        "line": 176,
        "fullcodeline": "pos += noiseLength;"
    },
    {
        "line": 214,
        "fullcodeline": "!(FUZ_rand(&lseed)&3) /* contentChecksumFlag*/,"
    },
    {
        "line": 69,
        "fullcodeline": "const U32 tnb[2] = { 0, 4 };   /* not compressible / sparse */"
    },
    {
        "line": 70,
        "fullcodeline": "buffNb = tnb[buffNb >> 3];"
    }
]