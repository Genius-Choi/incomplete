[
    {
        "line": 13,
        "fullcodeline": "CHECK_E(BIT_initCStream(&blockStream, dst, dstCapacity), dstSize_tooSmall); /* not enough space remaining */"
    },
    {
        "line": 14,
        "fullcodeline": "DEBUGLOG(6, \"available space for bitstream : %i  (dstCapacity=%u)\","
    },
    {
        "line": 19,
        "fullcodeline": "FSE_initCState2(&stateMatchLength, CTable_MatchLength, mlCodeTable[nbSeq-1]);"
    },
    {
        "line": 20,
        "fullcodeline": "FSE_initCState2(&stateOffsetBits,  CTable_OffsetBits,  ofCodeTable[nbSeq-1]);"
    },
    {
        "line": 21,
        "fullcodeline": "FSE_initCState2(&stateLitLength,   CTable_LitLength,   llCodeTable[nbSeq-1]);"
    },
    {
        "line": 22,
        "fullcodeline": "BIT_addBits(&blockStream, sequences[nbSeq-1].litLength, LL_bits[llCodeTable[nbSeq-1]]);"
    },
    {
        "line": 24,
        "fullcodeline": "BIT_addBits(&blockStream, sequences[nbSeq-1].matchLength, ML_bits[mlCodeTable[nbSeq-1]]);"
    },
    {
        "line": 38,
        "fullcodeline": "BIT_flushBits(&blockStream);"
    },
    {
        "line": 79,
        "fullcodeline": "DEBUGLOG(6, \"ZSTD_encodeSequences: flushing ML state with %u bits\", stateMatchLength.stateLog);"
    },
    {
        "line": 80,
        "fullcodeline": "FSE_flushCState(&blockStream, &stateMatchLength);"
    },
    {
        "line": 81,
        "fullcodeline": "DEBUGLOG(6, \"ZSTD_encodeSequences: flushing Off state with %u bits\", stateOffsetBits.stateLog);"
    },
    {
        "line": 82,
        "fullcodeline": "FSE_flushCState(&blockStream, &stateOffsetBits);"
    },
    {
        "line": 83,
        "fullcodeline": "DEBUGLOG(6, \"ZSTD_encodeSequences: flushing LL state with %u bits\", stateLitLength.stateLog);"
    },
    {
        "line": 84,
        "fullcodeline": "FSE_flushCState(&blockStream, &stateLitLength);"
    },
    {
        "line": 15,
        "fullcodeline": "(int)(blockStream.endPtr - blockStream.startPtr),"
    },
    {
        "line": 16,
        "fullcodeline": "(unsigned)dstCapacity);"
    },
    {
        "line": 25,
        "fullcodeline": "if (MEM_32bits()) BIT_flushBits(&blockStream);"
    },
    {
        "line": 86,
        "fullcodeline": "{   size_t const streamSize = BIT_closeCStream(&blockStream);"
    },
    {
        "line": 23,
        "fullcodeline": "if (MEM_32bits()) BIT_flushBits(&blockStream);"
    },
    {
        "line": 27,
        "fullcodeline": "U32 const ofBits = ofCodeTable[nbSeq-1];"
    },
    {
        "line": 28,
        "fullcodeline": "int const extraBits = ofBits - MIN(ofBits, STREAM_ACCUMULATOR_MIN-1);"
    },
    {
        "line": 33,
        "fullcodeline": "BIT_addBits(&blockStream, sequences[nbSeq-1].offset >> extraBits,"
    },
    {
        "line": 41,
        "fullcodeline": "for (n=nbSeq-2 ; n<nbSeq ; n--) {      /* intentional underflow */"
    },
    {
        "line": 87,
        "fullcodeline": "if (streamSize==0) return ERROR(dstSize_tooSmall);   /* not enough space */"
    },
    {
        "line": 34,
        "fullcodeline": "ofBits - extraBits);"
    },
    {
        "line": 36,
        "fullcodeline": "BIT_addBits(&blockStream, sequences[nbSeq-1].offset, ofCodeTable[nbSeq-1]);"
    },
    {
        "line": 42,
        "fullcodeline": "BYTE const llCode = llCodeTable[n];"
    },
    {
        "line": 43,
        "fullcodeline": "BYTE const ofCode = ofCodeTable[n];"
    },
    {
        "line": 44,
        "fullcodeline": "BYTE const mlCode = mlCodeTable[n];"
    },
    {
        "line": 45,
        "fullcodeline": "U32  const llBits = LL_bits[llCode];"
    },
    {
        "line": 46,
        "fullcodeline": "U32  const ofBits = ofCode;"
    },
    {
        "line": 47,
        "fullcodeline": "U32  const mlBits = ML_bits[mlCode];"
    },
    {
        "line": 48,
        "fullcodeline": "DEBUGLOG(6, \"encoding: litlen:%2u - matchlen:%2u - offCode:%7u\","
    },
    {
        "line": 54,
        "fullcodeline": "FSE_encodeSymbol(&blockStream, &stateOffsetBits, ofCode);       /* 15 */  /* 15 */"
    },
    {
        "line": 55,
        "fullcodeline": "FSE_encodeSymbol(&blockStream, &stateMatchLength, mlCode);      /* 24 */  /* 24 */"
    },
    {
        "line": 57,
        "fullcodeline": "FSE_encodeSymbol(&blockStream, &stateLitLength, llCode);        /* 16 */  /* 33 */"
    },
    {
        "line": 60,
        "fullcodeline": "BIT_addBits(&blockStream, sequences[n].litLength, llBits);"
    },
    {
        "line": 62,
        "fullcodeline": "BIT_addBits(&blockStream, sequences[n].matchLength, mlBits);"
    },
    {
        "line": 75,
        "fullcodeline": "BIT_flushBits(&blockStream);                                    /* (7)*/"
    },
    {
        "line": 76,
        "fullcodeline": "DEBUGLOG(7, \"remaining space : %i\", (int)(blockStream.endPtr - blockStream.ptr));"
    },
    {
        "line": 30,
        "fullcodeline": "BIT_addBits(&blockStream, sequences[nbSeq-1].offset, extraBits);"
    },
    {
        "line": 31,
        "fullcodeline": "BIT_flushBits(&blockStream);"
    },
    {
        "line": 50,
        "fullcodeline": "sequences[n].matchLength + MINMATCH,"
    },
    {
        "line": 58,
        "fullcodeline": "if (MEM_32bits() || (ofBits+mlBits+llBits >= 64-7-(LLFSELog+MLFSELog+OffFSELog)))"
    },
    {
        "line": 61,
        "fullcodeline": "if (MEM_32bits() && ((llBits+mlBits)>24)) BIT_flushBits(&blockStream);"
    },
    {
        "line": 63,
        "fullcodeline": "if (MEM_32bits() || (ofBits+mlBits+llBits > 56)) BIT_flushBits(&blockStream);"
    },
    {
        "line": 56,
        "fullcodeline": "if (MEM_32bits()) BIT_flushBits(&blockStream);                  /* (7)*/"
    },
    {
        "line": 59,
        "fullcodeline": "BIT_flushBits(&blockStream);                                /* (7)*/"
    },
    {
        "line": 65,
        "fullcodeline": "int const extraBits = ofBits - MIN(ofBits, STREAM_ACCUMULATOR_MIN-1);"
    },
    {
        "line": 70,
        "fullcodeline": "BIT_addBits(&blockStream, sequences[n].offset >> extraBits,"
    },
    {
        "line": 71,
        "fullcodeline": "ofBits - extraBits);                            /* 31 */"
    },
    {
        "line": 73,
        "fullcodeline": "BIT_addBits(&blockStream, sequences[n].offset, ofBits);     /* 31 */"
    },
    {
        "line": 67,
        "fullcodeline": "BIT_addBits(&blockStream, sequences[n].offset, extraBits);"
    },
    {
        "line": 68,
        "fullcodeline": "BIT_flushBits(&blockStream);                            /* (7)*/"
    }
]