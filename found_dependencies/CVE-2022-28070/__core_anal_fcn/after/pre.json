[
    {
        "line": 7,
        "fullcodeline": "int has_next = r_config_get_i (core->config, \"anal.hasnext\");"
    },
    {
        "line": 9,
        "fullcodeline": "int i, nexti = 0;"
    },
    {
        "line": 10,
        "fullcodeline": "ut64 *next = NULL;"
    },
    {
        "line": 12,
        "fullcodeline": "RAnalFunction *fcn = r_anal_function_new (core->anal);"
    },
    {
        "line": 13,
        "fullcodeline": "r_warn_if_fail (fcn);"
    },
    {
        "line": 14,
        "fullcodeline": "const char *fcnpfx = r_config_get (core->config, \"anal.fcnprefix\");"
    },
    {
        "line": 18,
        "fullcodeline": "const char *cc = r_anal_cc_default (core->anal);"
    },
    {
        "line": 25,
        "fullcodeline": "fcn->cc = r_str_constpool_get (&core->anal->constpool, cc);"
    },
    {
        "line": 26,
        "fullcodeline": "r_warn_if_fail (fcn->cc);"
    },
    {
        "line": 27,
        "fullcodeline": "hint = r_anal_hint_get (core->anal, at);"
    },
    {
        "line": 34,
        "fullcodeline": "fcn->addr = at;"
    },
    {
        "line": 35,
        "fullcodeline": "fcn->name = get_function_name (core, at);"
    },
    {
        "line": 154,
        "fullcodeline": "core->anal->leaddrs = NULL;"
    },
    {
        "line": 175,
        "fullcodeline": "core->anal->leaddrs = NULL;"
    },
    {
        "line": 2,
        "fullcodeline": "if (depth < 0) {"
    },
    {
        "line": 15,
        "fullcodeline": "if (!fcnpfx) {"
    },
    {
        "line": 19,
        "fullcodeline": "if (!cc) {"
    },
    {
        "line": 28,
        "fullcodeline": "if (hint && hint->bits == 16) {"
    },
    {
        "line": 37,
        "fullcodeline": "if (!fcn->name) {"
    },
    {
        "line": 152,
        "fullcodeline": "} while (fcnlen != R_ANAL_RET_END);"
    },
    {
        "line": 16,
        "fullcodeline": "fcnpfx = \"fcn\";"
    },
    {
        "line": 23,
        "fullcodeline": "cc = \"reg\";"
    },
    {
        "line": 30,
        "fullcodeline": "fcn->bits = 16;"
    },
    {
        "line": 43,
        "fullcodeline": "ut64 delta = r_anal_function_linear_size (fcn);"
    },
    {
        "line": 50,
        "fullcodeline": "fcnlen = r_anal_function(core->anal, fcn, at + delta, core->anal->opt.bb_max_size, reftype);"
    },
    {
        "line": 72,
        "fullcodeline": "f = r_core_flag_get_by_spaces (core->flags, fcn->addr);"
    },
    {
        "line": 73,
        "fullcodeline": "set_fcn_name_from_flag (fcn, f, fcnpfx);"
    },
    {
        "line": 164,
        "fullcodeline": "if (core->anal->cur && core->anal->cur->arch && !strcmp (core->anal->cur->arch, \"x86\")) {"
    },
    {
        "line": 165,
        "fullcodeline": "r_anal_function_check_bp_use (fcn);"
    },
    {
        "line": 211,
        "fullcodeline": "if (fcn && core->anal->cur && core->anal->cur->arch && !strcmp (core->anal->cur->arch, \"x86\")) {"
    },
    {
        "line": 212,
        "fullcodeline": "r_anal_function_check_bp_use (fcn);"
    },
    {
        "line": 20,
        "fullcodeline": "if (r_anal_cc_once (core->anal)) {"
    },
    {
        "line": 32,
        "fullcodeline": "fcn->bits = core->anal->bits;"
    },
    {
        "line": 54,
        "fullcodeline": "if (fcnlen == 0) {"
    },
    {
        "line": 60,
        "fullcodeline": "if (fcnlen < 0) {"
    },
    {
        "line": 156,
        "fullcodeline": "for (i = 0; i < nexti; i++) {"
    },
    {
        "line": 166,
        "fullcodeline": "if (fcn && !fcn->bp_frame) {"
    },
    {
        "line": 196,
        "fullcodeline": "if (fcn && has_next) {"
    },
    {
        "line": 213,
        "fullcodeline": "if (!fcn->bp_frame) {"
    },
    {
        "line": 44,
        "fullcodeline": "if (!r_io_is_valid_offset (core->io, at + delta, !core->anal->opt.noncode)) {"
    },
    {
        "line": 52,
        "fullcodeline": "r_anal_set_stringrefs (core, fcn);"
    },
    {
        "line": 75,
        "fullcodeline": "if (fcnlen == R_ANAL_RET_ERROR ||"
    },
    {
        "line": 76,
        "fullcodeline": "(fcnlen == R_ANAL_RET_END && !r_anal_function_realsize (fcn))) { /* Error analyzing function */"
    },
    {
        "line": 160,
        "fullcodeline": "r_core_anal_fcn (core, next[i], from, 0, depth - 1);"
    },
    {
        "line": 178,
        "fullcodeline": "if (!r_anal_function_realsize (fcn) || fcn->addr == UT64_MAX) {"
    },
    {
        "line": 180,
        "fullcodeline": "fcn = NULL;"
    },
    {
        "line": 197,
        "fullcodeline": "ut64 newaddr = r_anal_function_max_addr (fcn);"
    },
    {
        "line": 198,
        "fullcodeline": "RIOMap *map = r_io_map_get_at (core->io, newaddr);"
    },
    {
        "line": 194,
        "fullcodeline": "r_anal_add_function (core->anal, fcn);"
    },
    {
        "line": 78,
        "fullcodeline": "r_anal_analyze_fcn_refs (core, fcn, depth);"
    },
    {
        "line": 81,
        "fullcodeline": "} else if (fcnlen == R_ANAL_RET_END) { /* Function analysis complete */"
    },
    {
        "line": 157,
        "fullcodeline": "if (!next[i] || r_anal_get_fcn_in (core->anal, next[i], 0)) {"
    },
    {
        "line": 183,
        "fullcodeline": "if (!fcn->name) {"
    },
    {
        "line": 199,
        "fullcodeline": "if (!map || (map && (map->perm & R_PERM_X))) {"
    },
    {
        "line": 200,
        "fullcodeline": "next = next_append (next, &nexti, newaddr);"
    },
    {
        "line": 82,
        "fullcodeline": "f = r_core_flag_get_by_spaces (core->flags, fcn->addr);"
    },
    {
        "line": 119,
        "fullcodeline": "r_anal_add_function (core->anal, fcn);"
    },
    {
        "line": 190,
        "fullcodeline": "r_flag_space_push (core->flags, R_FLAGS_FS_FUNCTIONS);"
    },
    {
        "line": 191,
        "fullcodeline": "r_flag_set (core->flags, fcn->name, at, r_anal_function_linear_size (fcn));"
    },
    {
        "line": 192,
        "fullcodeline": "r_flag_space_pop (core->flags);"
    },
    {
        "line": 201,
        "fullcodeline": "for (i = 0; i < nexti; i++) {"
    },
    {
        "line": 115,
        "fullcodeline": "if (from != UT64_MAX) {"
    },
    {
        "line": 205,
        "fullcodeline": "r_core_anal_fcn (core, next[i], next[i], 0, depth - 1);"
    },
    {
        "line": 83,
        "fullcodeline": "if (f && f->name && strncmp (f->name, \"sect\", 4)) { /* Check if it's already flagged */"
    },
    {
        "line": 84,
        "fullcodeline": "char *new_name = strdup (f->name);"
    },
    {
        "line": 99,
        "fullcodeline": "fcn->name = new_name;"
    },
    {
        "line": 116,
        "fullcodeline": "r_anal_xrefs_set (core->anal, from, fcn->addr, reftype);"
    },
    {
        "line": 121,
        "fullcodeline": "ut64 addr = r_anal_function_max_addr (fcn);"
    },
    {
        "line": 122,
        "fullcodeline": "RIOMap *map = r_io_map_get_at (core->io, addr);"
    },
    {
        "line": 148,
        "fullcodeline": "if (!r_anal_analyze_fcn_refs (core, fcn, depth)) {"
    },
    {
        "line": 202,
        "fullcodeline": "if (!next[i]) {"
    },
    {
        "line": 101,
        "fullcodeline": "R_FREE (fcn->name);"
    },
    {
        "line": 102,
        "fullcodeline": "const char *fcnpfx = r_anal_fcntype_tostring (fcn->type);"
    },
    {
        "line": 107,
        "fullcodeline": "autoname_imp_trampoline (core, fcn);"
    },
    {
        "line": 109,
        "fullcodeline": "r_flag_space_push (core->flags, R_FLAGS_FS_FUNCTIONS);"
    },
    {
        "line": 110,
        "fullcodeline": "r_flag_set (core->flags, fcn->name, fcn->addr, r_anal_function_linear_size (fcn));"
    },
    {
        "line": 111,
        "fullcodeline": "r_flag_space_pop (core->flags);"
    },
    {
        "line": 88,
        "fullcodeline": "const RList *syms = r_bin_get_symbols (core->bin);"
    },
    {
        "line": 89,
        "fullcodeline": "ut64 baddr = r_config_get_i (core->config, \"bin.baddr\");"
    },
    {
        "line": 90,
        "fullcodeline": "r_list_foreach (syms, iter, sym) {"
    },
    {
        "line": 124,
        "fullcodeline": "if (!map || (map && map->perm & R_PERM_X)) {"
    },
    {
        "line": 103,
        "fullcodeline": "if (!fcnpfx || !*fcnpfx || !strcmp (fcnpfx, \"fcn\")) {"
    },
    {
        "line": 104,
        "fullcodeline": "fcnpfx = r_config_get (core->config, \"anal.fcnprefix\");"
    },
    {
        "line": 125,
        "fullcodeline": "for (i = 0; i < nexti; i++) {"
    },
    {
        "line": 130,
        "fullcodeline": "if (i == nexti) {"
    },
    {
        "line": 131,
        "fullcodeline": "ut64 at = r_anal_function_max_addr (fcn);"
    },
    {
        "line": 143,
        "fullcodeline": "loganal (fcn->addr, at, 10000 - depth);"
    },
    {
        "line": 144,
        "fullcodeline": "next = next_append (next, &nexti, at);"
    },
    {
        "line": 91,
        "fullcodeline": "if (sym->type && (sym->paddr + baddr) == fcn->addr && !strcmp (sym->type, R_BIN_TYPE_FUNC_STR)) {"
    },
    {
        "line": 126,
        "fullcodeline": "if (next[i] == addr) {"
    },
    {
        "line": 93,
        "fullcodeline": "new_name = r_str_newf (\"sym.%s\", sym->name);"
    },
    {
        "line": 134,
        "fullcodeline": "RAnalMetaItem *mi = r_meta_get_at (core->anal, at, R_META_TYPE_ANY, &size);"
    },
    {
        "line": 138,
        "fullcodeline": "at += size;"
    }
]