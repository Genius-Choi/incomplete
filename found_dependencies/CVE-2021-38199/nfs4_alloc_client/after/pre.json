[
    {
        "line": 3,
        "fullcodeline": "char buf[INET6_ADDRSTRLEN + 1];"
    },
    {
        "line": 4,
        "fullcodeline": "const char *ip_addr = cl_init->ip_addr;"
    },
    {
        "line": 5,
        "fullcodeline": "struct nfs_client *clp = nfs_alloc_client(cl_init);"
    },
    {
        "line": 11,
        "fullcodeline": "err = nfs_get_cb_ident_idr(clp, cl_init->minorversion);"
    },
    {
        "line": 21,
        "fullcodeline": "INIT_DELAYED_WORK(&clp->cl_renewd, nfs4_renew_state);"
    },
    {
        "line": 24,
        "fullcodeline": "clp->cl_state = 1 << NFS4CLNT_LEASE_EXPIRED;"
    },
    {
        "line": 25,
        "fullcodeline": "clp->cl_mvops = nfs_v4_minor_ops[cl_init->minorversion];"
    },
    {
        "line": 26,
        "fullcodeline": "clp->cl_mig_gen = 1;"
    },
    {
        "line": 34,
        "fullcodeline": "__set_bit(NFS_CS_DISCRTRY, &clp->cl_flags);"
    },
    {
        "line": 35,
        "fullcodeline": "__set_bit(NFS_CS_NO_RETRANS_TIMEOUT, &clp->cl_flags);"
    },
    {
        "line": 41,
        "fullcodeline": "err = nfs_create_rpc_client(clp, cl_init, RPC_AUTH_GSS_KRB5I);"
    },
    {
        "line": 60,
        "fullcodeline": "strlcpy(clp->cl_ipaddr, ip_addr, sizeof(clp->cl_ipaddr));"
    },
    {
        "line": 62,
        "fullcodeline": "err = nfs_idmap_new(clp);"
    },
    {
        "line": 68,
        "fullcodeline": "__set_bit(NFS_CS_IDMAP, &clp->cl_res_state);"
    },
    {
        "line": 8,
        "fullcodeline": "if (IS_ERR(clp))"
    },
    {
        "line": 15,
        "fullcodeline": "if (cl_init->minorversion > NFS4_MAX_MINOR_VERSION) {"
    },
    {
        "line": 32,
        "fullcodeline": "if (cl_init->minorversion != 0)"
    },
    {
        "line": 42,
        "fullcodeline": "if (err == -EINVAL)"
    },
    {
        "line": 44,
        "fullcodeline": "if (err < 0)"
    },
    {
        "line": 48,
        "fullcodeline": "if (ip_addr == NULL) {"
    },
    {
        "line": 63,
        "fullcodeline": "if (err < 0) {"
    },
    {
        "line": 73,
        "fullcodeline": "return ERR_PTR(err);"
    },
    {
        "line": 16,
        "fullcodeline": "err = -EINVAL;"
    },
    {
        "line": 33,
        "fullcodeline": "__set_bit(NFS_CS_INFINITE_SLOTS, &clp->cl_flags);"
    },
    {
        "line": 43,
        "fullcodeline": "err = nfs_create_rpc_client(clp, cl_init, RPC_AUTH_UNIX);"
    },
    {
        "line": 50,
        "fullcodeline": "struct sockaddr *sap = (struct sockaddr *)&cb_addr;"
    },
    {
        "line": 52,
        "fullcodeline": "err = rpc_localaddr(clp->cl_rpcclient, sap, sizeof(cb_addr));"
    },
    {
        "line": 55,
        "fullcodeline": "err = rpc_ntop(sap, buf, sizeof(buf));"
    },
    {
        "line": 58,
        "fullcodeline": "ip_addr = (const char *)buf;"
    },
    {
        "line": 64,
        "fullcodeline": "dprintk(\"%s: failed to create idmapper. Error = %d\\n\","
    },
    {
        "line": 53,
        "fullcodeline": "if (err < 0)"
    },
    {
        "line": 56,
        "fullcodeline": "if (err < 0)"
    }
]