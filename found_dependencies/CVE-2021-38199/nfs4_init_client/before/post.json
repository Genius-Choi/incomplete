[
    {
        "line": 4,
        "fullcodeline": "char buf[INET6_ADDRSTRLEN + 1];"
    },
    {
        "line": 5,
        "fullcodeline": "const char *ip_addr = cl_init->ip_addr;"
    },
    {
        "line": 14,
        "fullcodeline": "clp->rpc_ops = &nfs_v4_clientops;"
    },
    {
        "line": 18,
        "fullcodeline": "__set_bit(NFS_CS_DISCRTRY, &clp->cl_flags);"
    },
    {
        "line": 19,
        "fullcodeline": "__set_bit(NFS_CS_NO_RETRANS_TIMEOUT, &clp->cl_flags);"
    },
    {
        "line": 21,
        "fullcodeline": "error = nfs_create_rpc_client(clp, cl_init, RPC_AUTH_GSS_KRB5I);"
    },
    {
        "line": 40,
        "fullcodeline": "strlcpy(clp->cl_ipaddr, ip_addr, sizeof(clp->cl_ipaddr));"
    },
    {
        "line": 42,
        "fullcodeline": "error = nfs_idmap_new(clp);"
    },
    {
        "line": 48,
        "fullcodeline": "__set_bit(NFS_CS_IDMAP, &clp->cl_res_state);"
    },
    {
        "line": 50,
        "fullcodeline": "error = nfs4_init_client_minor_version(clp);"
    },
    {
        "line": 54,
        "fullcodeline": "error = nfs4_discover_server_trunking(clp, &old);"
    },
    {
        "line": 67,
        "fullcodeline": "clear_bit(NFS_CS_TSM_POSSIBLE, &clp->cl_flags);"
    },
    {
        "line": 68,
        "fullcodeline": "nfs_put_client(clp);"
    },
    {
        "line": 72,
        "fullcodeline": "nfs_mark_client_ready(clp, error);"
    },
    {
        "line": 73,
        "fullcodeline": "nfs_put_client(clp);"
    },
    {
        "line": 9,
        "fullcodeline": "if (clp->cl_cons_state == NFS_CS_READY)"
    },
    {
        "line": 16,
        "fullcodeline": "if (clp->cl_minorversion != 0)"
    },
    {
        "line": 22,
        "fullcodeline": "if (error == -EINVAL)"
    },
    {
        "line": 24,
        "fullcodeline": "if (error < 0)"
    },
    {
        "line": 28,
        "fullcodeline": "if (ip_addr == NULL) {"
    },
    {
        "line": 43,
        "fullcodeline": "if (error < 0) {"
    },
    {
        "line": 51,
        "fullcodeline": "if (error < 0)"
    },
    {
        "line": 55,
        "fullcodeline": "if (error < 0)"
    },
    {
        "line": 58,
        "fullcodeline": "if (clp != old) {"
    },
    {
        "line": 74,
        "fullcodeline": "return ERR_PTR(error);"
    },
    {
        "line": 17,
        "fullcodeline": "__set_bit(NFS_CS_INFINITE_SLOTS, &clp->cl_flags);"
    },
    {
        "line": 23,
        "fullcodeline": "error = nfs_create_rpc_client(clp, cl_init, RPC_AUTH_UNIX);"
    },
    {
        "line": 30,
        "fullcodeline": "struct sockaddr *sap = (struct sockaddr *)&cb_addr;"
    },
    {
        "line": 32,
        "fullcodeline": "error = rpc_localaddr(clp->cl_rpcclient, sap, sizeof(cb_addr));"
    },
    {
        "line": 35,
        "fullcodeline": "error = rpc_ntop(sap, buf, sizeof(buf));"
    },
    {
        "line": 38,
        "fullcodeline": "ip_addr = (const char *)buf;"
    },
    {
        "line": 44,
        "fullcodeline": "dprintk(\"%s: failed to create idmapper. Error = %d\\n\","
    },
    {
        "line": 59,
        "fullcodeline": "clp->cl_preserve_clid = true;"
    },
    {
        "line": 65,
        "fullcodeline": "nfs_mark_client_ready(clp, -EPERM);"
    },
    {
        "line": 33,
        "fullcodeline": "if (error < 0)"
    },
    {
        "line": 36,
        "fullcodeline": "if (error < 0)"
    }
]