[
    {
        "line": 5,
        "fullcodeline": "unsigned int hook = state->hook;"
    },
    {
        "line": 6,
        "fullcodeline": "static const char nulldevname[IFNAMSIZ] __attribute__((aligned(sizeof(long))));"
    },
    {
        "line": 9,
        "fullcodeline": "unsigned int verdict = NF_DROP;"
    },
    {
        "line": 19,
        "fullcodeline": "stackidx = 0;"
    },
    {
        "line": 20,
        "fullcodeline": "ip = ip_hdr(skb);"
    },
    {
        "line": 21,
        "fullcodeline": "indev = state->in ? state->in->name : nulldevname;"
    },
    {
        "line": 22,
        "fullcodeline": "outdev = state->out ? state->out->name : nulldevname;"
    },
    {
        "line": 29,
        "fullcodeline": "acpar.fragoff = ntohs(ip->frag_off) & IP_OFFSET;"
    },
    {
        "line": 30,
        "fullcodeline": "acpar.thoff   = ip_hdrlen(skb);"
    },
    {
        "line": 31,
        "fullcodeline": "acpar.hotdrop = false;"
    },
    {
        "line": 32,
        "fullcodeline": "acpar.state   = state;"
    },
    {
        "line": 34,
        "fullcodeline": "WARN_ON(!(table->valid_hooks & (1 << hook)));"
    },
    {
        "line": 35,
        "fullcodeline": "local_bh_disable();"
    },
    {
        "line": 36,
        "fullcodeline": "addend = xt_write_recseq_begin();"
    },
    {
        "line": 37,
        "fullcodeline": "private = READ_ONCE(table->private); /* Address dependency. */"
    },
    {
        "line": 38,
        "fullcodeline": "cpu        = smp_processor_id();"
    },
    {
        "line": 39,
        "fullcodeline": "table_base = private->entries;"
    },
    {
        "line": 52,
        "fullcodeline": "e = get_entry(table_base, private->hook_entry[hook]);"
    },
    {
        "line": 133,
        "fullcodeline": "xt_write_recseq_end(addend);"
    },
    {
        "line": 134,
        "fullcodeline": "local_bh_enable();"
    },
    {
        "line": 49,
        "fullcodeline": "if (static_key_false(&xt_tee_enabled))"
    },
    {
        "line": 131,
        "fullcodeline": "} while (!acpar.hotdrop);"
    },
    {
        "line": 50,
        "fullcodeline": "jumpstack += private->stacksize * __this_cpu_read(nf_skb_duplicated);"
    },
    {
        "line": 59,
        "fullcodeline": "WARN_ON(!e);"
    },
    {
        "line": 67,
        "fullcodeline": "xt_ematch_foreach(ematch, e) {"
    },
    {
        "line": 74,
        "fullcodeline": "counter = xt_get_this_cpu_counter(&e->counters);"
    },
    {
        "line": 75,
        "fullcodeline": "ADD_COUNTER(*counter, skb->len, 1);"
    },
    {
        "line": 77,
        "fullcodeline": "t = ipt_get_target(e);"
    },
    {
        "line": 78,
        "fullcodeline": "WARN_ON(!t->u.kernel.target);"
    },
    {
        "line": 119,
        "fullcodeline": "acpar.target   = t->u.kernel.target;"
    },
    {
        "line": 120,
        "fullcodeline": "acpar.targinfo = t->data;"
    },
    {
        "line": 122,
        "fullcodeline": "verdict = t->u.kernel.target->target(skb, &acpar);"
    },
    {
        "line": 60,
        "fullcodeline": "if (!ip_packet_match(ip, indev, outdev,"
    },
    {
        "line": 69,
        "fullcodeline": "acpar.matchinfo = ematch->data;"
    },
    {
        "line": 123,
        "fullcodeline": "if (verdict == XT_CONTINUE) {"
    },
    {
        "line": 63,
        "fullcodeline": "e = ipt_next_entry(e);"
    },
    {
        "line": 70,
        "fullcodeline": "if (!acpar.match->match(skb, &acpar))"
    },
    {
        "line": 115,
        "fullcodeline": "e = get_entry(table_base, v);"
    },
    {
        "line": 125,
        "fullcodeline": "ip = ip_hdr(skb);"
    },
    {
        "line": 126,
        "fullcodeline": "e = ipt_next_entry(e);"
    },
    {
        "line": 91,
        "fullcodeline": "if (v < 0) {"
    },
    {
        "line": 106,
        "fullcodeline": "if (table_base + v != ipt_next_entry(e) &&"
    },
    {
        "line": 90,
        "fullcodeline": "v = ((struct xt_standard_target *)t)->verdict;"
    },
    {
        "line": 107,
        "fullcodeline": "!(e->ip.flags & IPT_F_GOTO)) {"
    },
    {
        "line": 112,
        "fullcodeline": "jumpstack[stackidx++] = e;"
    },
    {
        "line": 93,
        "fullcodeline": "if (v != XT_RETURN) {"
    },
    {
        "line": 97,
        "fullcodeline": "if (stackidx == 0) {"
    },
    {
        "line": 108,
        "fullcodeline": "if (unlikely(stackidx >= private->stacksize)) {"
    },
    {
        "line": 94,
        "fullcodeline": "verdict = (unsigned int)(-v) - 1;"
    },
    {
        "line": 98,
        "fullcodeline": "e = get_entry(table_base,"
    },
    {
        "line": 109,
        "fullcodeline": "verdict = NF_DROP;"
    },
    {
        "line": 101,
        "fullcodeline": "e = jumpstack[--stackidx];"
    },
    {
        "line": 102,
        "fullcodeline": "e = ipt_next_entry(e);"
    }
]