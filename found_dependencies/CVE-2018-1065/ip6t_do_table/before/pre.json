[
    {
        "line": 5,
        "fullcodeline": "unsigned int hook = state->hook;"
    },
    {
        "line": 6,
        "fullcodeline": "static const char nulldevname[IFNAMSIZ] __attribute__((aligned(sizeof(long))));"
    },
    {
        "line": 8,
        "fullcodeline": "unsigned int verdict = NF_DROP;"
    },
    {
        "line": 18,
        "fullcodeline": "stackidx = 0;"
    },
    {
        "line": 19,
        "fullcodeline": "indev = state->in ? state->in->name : nulldevname;"
    },
    {
        "line": 20,
        "fullcodeline": "outdev = state->out ? state->out->name : nulldevname;"
    },
    {
        "line": 27,
        "fullcodeline": "acpar.hotdrop = false;"
    },
    {
        "line": 28,
        "fullcodeline": "acpar.state   = state;"
    },
    {
        "line": 30,
        "fullcodeline": "WARN_ON(!(table->valid_hooks & (1 << hook)));"
    },
    {
        "line": 32,
        "fullcodeline": "local_bh_disable();"
    },
    {
        "line": 33,
        "fullcodeline": "addend = xt_write_recseq_begin();"
    },
    {
        "line": 34,
        "fullcodeline": "private = READ_ONCE(table->private); /* Address dependency. */"
    },
    {
        "line": 35,
        "fullcodeline": "cpu        = smp_processor_id();"
    },
    {
        "line": 36,
        "fullcodeline": "table_base = private->entries;"
    },
    {
        "line": 37,
        "fullcodeline": "jumpstack  = (struct ip6t_entry **)private->jumpstack[cpu];"
    },
    {
        "line": 49,
        "fullcodeline": "e = get_entry(table_base, private->hook_entry[hook]);"
    },
    {
        "line": 122,
        "fullcodeline": "xt_write_recseq_end(addend);"
    },
    {
        "line": 123,
        "fullcodeline": "local_bh_enable();"
    },
    {
        "line": 46,
        "fullcodeline": "if (static_key_false(&xt_tee_enabled))"
    },
    {
        "line": 120,
        "fullcodeline": "} while (!acpar.hotdrop);"
    },
    {
        "line": 47,
        "fullcodeline": "jumpstack += private->stacksize * __this_cpu_read(nf_skb_duplicated);"
    },
    {
        "line": 56,
        "fullcodeline": "WARN_ON(!e);"
    },
    {
        "line": 57,
        "fullcodeline": "acpar.thoff = 0;"
    },
    {
        "line": 65,
        "fullcodeline": "xt_ematch_foreach(ematch, e) {"
    },
    {
        "line": 72,
        "fullcodeline": "counter = xt_get_this_cpu_counter(&e->counters);"
    },
    {
        "line": 73,
        "fullcodeline": "ADD_COUNTER(*counter, skb->len, 1);"
    },
    {
        "line": 75,
        "fullcodeline": "t = ip6t_get_target_c(e);"
    },
    {
        "line": 76,
        "fullcodeline": "WARN_ON(!t->u.kernel.target);"
    },
    {
        "line": 111,
        "fullcodeline": "acpar.target   = t->u.kernel.target;"
    },
    {
        "line": 112,
        "fullcodeline": "acpar.targinfo = t->data;"
    },
    {
        "line": 114,
        "fullcodeline": "verdict = t->u.kernel.target->target(skb, &acpar);"
    },
    {
        "line": 58,
        "fullcodeline": "if (!ip6_packet_match(skb, indev, outdev, &e->ipv6,"
    },
    {
        "line": 66,
        "fullcodeline": "acpar.match     = ematch->u.kernel.match;"
    },
    {
        "line": 67,
        "fullcodeline": "acpar.matchinfo = ematch->data;"
    },
    {
        "line": 85,
        "fullcodeline": "if (!t->u.kernel.target->target) {"
    },
    {
        "line": 115,
        "fullcodeline": "if (verdict == XT_CONTINUE)"
    },
    {
        "line": 61,
        "fullcodeline": "e = ip6t_next_entry(e);"
    },
    {
        "line": 68,
        "fullcodeline": "if (!acpar.match->match(skb, &acpar))"
    },
    {
        "line": 88,
        "fullcodeline": "v = ((struct xt_standard_target *)t)->verdict;"
    },
    {
        "line": 107,
        "fullcodeline": "e = get_entry(table_base, v);"
    },
    {
        "line": 116,
        "fullcodeline": "e = ip6t_next_entry(e);"
    },
    {
        "line": 89,
        "fullcodeline": "if (v < 0) {"
    },
    {
        "line": 102,
        "fullcodeline": "if (table_base + v != ip6t_next_entry(e) &&"
    },
    {
        "line": 103,
        "fullcodeline": "!(e->ipv6.flags & IP6T_F_GOTO)) {"
    },
    {
        "line": 104,
        "fullcodeline": "jumpstack[stackidx++] = e;"
    },
    {
        "line": 91,
        "fullcodeline": "if (v != XT_RETURN) {"
    },
    {
        "line": 95,
        "fullcodeline": "if (stackidx == 0)"
    },
    {
        "line": 92,
        "fullcodeline": "verdict = (unsigned int)(-v) - 1;"
    },
    {
        "line": 96,
        "fullcodeline": "e = get_entry(table_base,"
    },
    {
        "line": 99,
        "fullcodeline": "e = ip6t_next_entry(jumpstack[--stackidx]);"
    }
]