[
    {
        "line": 8,
        "fullcodeline": "int\t\ttemp = 0;\t    // init for GCC"
    },
    {
        "line": 11,
        "fullcodeline": "int\t\tdid_backspace = FALSE;"
    },
    {
        "line": 14,
        "fullcodeline": "int\t\tcpc[MAX_MCO];\t    // composing characters"
    },
    {
        "line": 15,
        "fullcodeline": "int\t\tcall_fix_indent = FALSE;"
    },
    {
        "line": 46,
        "fullcodeline": "in_indent = inindent(0);"
    },
    {
        "line": 49,
        "fullcodeline": "end_comment_pending = NUL;\t// After BS, don't auto-end comment"
    },
    {
        "line": 360,
        "fullcodeline": "did_si = FALSE;"
    },
    {
        "line": 361,
        "fullcodeline": "can_si = FALSE;"
    },
    {
        "line": 362,
        "fullcodeline": "can_si_back = FALSE;"
    },
    {
        "line": 23,
        "fullcodeline": "if (       BUFEMPTY()"
    },
    {
        "line": 44,
        "fullcodeline": "if (stop_arrow() == FAIL)"
    },
    {
        "line": 59,
        "fullcodeline": "if (curwin->w_cursor.coladd > 0)"
    },
    {
        "line": 77,
        "fullcodeline": "if (curwin->w_cursor.col == 0)"
    },
    {
        "line": 363,
        "fullcodeline": "if (curwin->w_cursor.col <= 1)"
    },
    {
        "line": 28,
        "fullcodeline": "((curwin->w_cursor.lnum == 1 && curwin->w_cursor.col == 0)"
    },
    {
        "line": 40,
        "fullcodeline": "vim_beep(BO_BS);"
    },
    {
        "line": 48,
        "fullcodeline": "can_cindent = FALSE;"
    },
    {
        "line": 71,
        "fullcodeline": "curwin->w_cursor.coladd = 0;"
    },
    {
        "line": 79,
        "fullcodeline": "lnum = Insstart.lnum;"
    },
    {
        "line": 97,
        "fullcodeline": "cc = -1;"
    },
    {
        "line": 377,
        "fullcodeline": "if (curwin->w_cursor.lnum == Insstart_orig.lnum"
    },
    {
        "line": 378,
        "fullcodeline": "&& curwin->w_cursor.col < Insstart_orig.col)"
    },
    {
        "line": 388,
        "fullcodeline": "if (vim_strchr(p_cpo, CPO_BACKSPACE) != NULL && dollar_vcol == -1)"
    },
    {
        "line": 38,
        "fullcodeline": "|| (!can_bs(BS_EOL) && curwin->w_cursor.col == 0))))"
    },
    {
        "line": 61,
        "fullcodeline": "if (mode == BACKSPACE_CHAR)"
    },
    {
        "line": 66,
        "fullcodeline": "if (mode == BACKSPACE_WORD)"
    },
    {
        "line": 80,
        "fullcodeline": "if (curwin->w_cursor.lnum == lnum"
    },
    {
        "line": 98,
        "fullcodeline": "if (State & REPLACE_FLAG)"
    },
    {
        "line": 179,
        "fullcodeline": "mincol = 0;"
    },
    {
        "line": 358,
        "fullcodeline": "did_backspace = TRUE;"
    },
    {
        "line": 36,
        "fullcodeline": "|| (!can_bs(BS_INDENT) && !arrow_used && ai_col > 0"
    },
    {
        "line": 89,
        "fullcodeline": "--Insstart.lnum;"
    },
    {
        "line": 99,
        "fullcodeline": "cc = replace_pop();\t    // returns -1 if NL was inserted"
    },
    {
        "line": 104,
        "fullcodeline": "if ((State & REPLACE_FLAG) && curwin->w_cursor.lnum <= lnum)"
    },
    {
        "line": 29,
        "fullcodeline": "|| (!can_bs(BS_START)"
    },
    {
        "line": 37,
        "fullcodeline": "&& curwin->w_cursor.col <= ai_col)"
    },
    {
        "line": 181,
        "fullcodeline": "if (mode == BACKSPACE_LINE"
    },
    {
        "line": 182,
        "fullcodeline": "&& (curbuf->b_p_ai || cindent_on())"
    },
    {
        "line": 188,
        "fullcodeline": "save_col = curwin->w_cursor.col;"
    },
    {
        "line": 189,
        "fullcodeline": "beginline(BL_WHITE);"
    },
    {
        "line": 196,
        "fullcodeline": "curwin->w_cursor.col = save_col;"
    },
    {
        "line": 202,
        "fullcodeline": "if (\t   mode == BACKSPACE_CHAR"
    },
    {
        "line": 203,
        "fullcodeline": "&& ((p_sta && in_indent)"
    },
    {
        "line": 224,
        "fullcodeline": "getvcol(curwin, &curwin->w_cursor, &vcol, NULL, NULL);"
    },
    {
        "line": 225,
        "fullcodeline": "start_vcol = vcol;"
    },
    {
        "line": 227,
        "fullcodeline": "getvcol(curwin, &curwin->w_cursor, NULL, NULL, &want_vcol);"
    },
    {
        "line": 243,
        "fullcodeline": "want_vcol = (want_vcol / ts) * ts;"
    },
    {
        "line": 30,
        "fullcodeline": "&& ((arrow_used"
    },
    {
        "line": 86,
        "fullcodeline": "if (u_save((linenr_T)(curwin->w_cursor.lnum - 2),"
    },
    {
        "line": 90,
        "fullcodeline": "Insstart.col = (colnr_T)STRLEN(ml_get(Insstart.lnum));"
    },
    {
        "line": 144,
        "fullcodeline": "if (State & REPLACE_FLAG)"
    },
    {
        "line": 190,
        "fullcodeline": "if (curwin->w_cursor.col < save_col)"
    },
    {
        "line": 204,
        "fullcodeline": "|| ((get_sts_value() != 0"
    },
    {
        "line": 249,
        "fullcodeline": "ins_bs_one(&vcol);"
    },
    {
        "line": 252,
        "fullcodeline": "while (vcol < want_vcol)"
    },
    {
        "line": 272,
        "fullcodeline": "if (vcol >= start_vcol)"
    },
    {
        "line": 281,
        "fullcodeline": "int cclass = 0, prev_cclass = 0;"
    },
    {
        "line": 34,
        "fullcodeline": ") || (curwin->w_cursor.lnum == Insstart_orig.lnum"
    },
    {
        "line": 87,
        "fullcodeline": "(linenr_T)(curwin->w_cursor.lnum + 1)) == FAIL)"
    },
    {
        "line": 110,
        "fullcodeline": "if (!(State & VREPLACE_FLAG)"
    },
    {
        "line": 111,
        "fullcodeline": "|| curwin->w_cursor.lnum > orig_line_count)"
    },
    {
        "line": 113,
        "fullcodeline": "temp = gchar_cursor();\t// remember current char"
    },
    {
        "line": 114,
        "fullcodeline": "--curwin->w_cursor.lnum;"
    },
    {
        "line": 151,
        "fullcodeline": "oldState = State;"
    },
    {
        "line": 152,
        "fullcodeline": "State = MODE_NORMAL;"
    },
    {
        "line": 192,
        "fullcodeline": "mincol = curwin->w_cursor.col;"
    },
    {
        "line": 210,
        "fullcodeline": "&& (*(ml_get_cursor() - 1) == TAB"
    },
    {
        "line": 240,
        "fullcodeline": "ts = (int)get_sw_value(curbuf);"
    },
    {
        "line": 247,
        "fullcodeline": "while (vcol > want_vcol"
    },
    {
        "line": 248,
        "fullcodeline": "&& (cc = *(ml_get_cursor() - 1), VIM_ISWHITE(cc)))"
    },
    {
        "line": 267,
        "fullcodeline": "getvcol(curwin, &curwin->w_cursor, &vcol, NULL, NULL);"
    },
    {
        "line": 35,
        "fullcodeline": "&& curwin->w_cursor.col <= Insstart_orig.col)))"
    },
    {
        "line": 131,
        "fullcodeline": "(void)do_join(2, FALSE, FALSE, FALSE, FALSE);"
    },
    {
        "line": 156,
        "fullcodeline": "while (cc > 0)"
    },
    {
        "line": 209,
        "fullcodeline": "&& curwin->w_cursor.col > 0"
    },
    {
        "line": 211,
        "fullcodeline": "|| (*(ml_get_cursor() - 1) == ' '"
    },
    {
        "line": 242,
        "fullcodeline": "ts = (int)get_sts_value();"
    },
    {
        "line": 255,
        "fullcodeline": "if (curwin->w_cursor.lnum == Insstart_orig.lnum"
    },
    {
        "line": 259,
        "fullcodeline": "if (State & VREPLACE_FLAG)"
    },
    {
        "line": 284,
        "fullcodeline": "cclass = mb_get_class(ml_get_cursor());"
    },
    {
        "line": 292,
        "fullcodeline": "cc = gchar_cursor();"
    },
    {
        "line": 352,
        "fullcodeline": "(curwin->w_cursor.col > mincol"
    },
    {
        "line": 353,
        "fullcodeline": "&&  (can_bs(BS_NOSTOP)"
    },
    {
        "line": 119,
        "fullcodeline": "if (has_format_option(FO_AUTO)"
    },
    {
        "line": 120,
        "fullcodeline": "&& has_format_option(FO_WHITE_PAR))"
    },
    {
        "line": 122,
        "fullcodeline": "char_u  *ptr = ml_get_buf(curbuf, curwin->w_cursor.lnum,"
    },
    {
        "line": 126,
        "fullcodeline": "len = (int)STRLEN(ptr);"
    },
    {
        "line": 132,
        "fullcodeline": "if (temp == NUL && gchar_cursor() != NUL)"
    },
    {
        "line": 158,
        "fullcodeline": "save_col = curwin->w_cursor.col;"
    },
    {
        "line": 160,
        "fullcodeline": "curwin->w_cursor.col = save_col;"
    },
    {
        "line": 161,
        "fullcodeline": "cc = replace_pop();"
    },
    {
        "line": 212,
        "fullcodeline": "&& (!*inserted_space_p"
    },
    {
        "line": 256,
        "fullcodeline": "&& curwin->w_cursor.col < Insstart_orig.col)"
    },
    {
        "line": 257,
        "fullcodeline": "Insstart_orig.col = curwin->w_cursor.col;"
    },
    {
        "line": 346,
        "fullcodeline": "if (mode == BACKSPACE_CHAR)"
    },
    {
        "line": 354,
        "fullcodeline": "|| (curwin->w_cursor.lnum != Insstart_orig.lnum"
    },
    {
        "line": 296,
        "fullcodeline": "prev_cclass = cclass;"
    },
    {
        "line": 297,
        "fullcodeline": "cclass = mb_get_class(ml_get_cursor());"
    },
    {
        "line": 301,
        "fullcodeline": "if (mode == BACKSPACE_WORD && !vim_isspace(cc))"
    },
    {
        "line": 303,
        "fullcodeline": "mode = BACKSPACE_WORD_NOT_SPACE;"
    },
    {
        "line": 304,
        "fullcodeline": "temp = vim_iswordc(cc);"
    },
    {
        "line": 355,
        "fullcodeline": "|| curwin->w_cursor.col != Insstart_orig.col)"
    },
    {
        "line": 127,
        "fullcodeline": "if (len > 0 && ptr[len - 1] == ' ')"
    },
    {
        "line": 264,
        "fullcodeline": "if ((State & REPLACE_FLAG))"
    },
    {
        "line": 322,
        "fullcodeline": "replace_do_bs(-1);"
    },
    {
        "line": 325,
        "fullcodeline": "if (enc_utf8 && p_deco)"
    },
    {
        "line": 327,
        "fullcodeline": "(void)del_char(FALSE);"
    },
    {
        "line": 307,
        "fullcodeline": "else if (mode == BACKSPACE_WORD_NOT_SPACE"
    },
    {
        "line": 308,
        "fullcodeline": "&& ((vim_isspace(cc) || vim_iswordc(cc) != temp)"
    },
    {
        "line": 333,
        "fullcodeline": "if (enc_utf8 && p_deco && cpc[0] != NUL)"
    },
    {
        "line": 309,
        "fullcodeline": "|| prev_cclass != cclass))"
    },
    {
        "line": 326,
        "fullcodeline": "(void)utfc_ptr2char(ml_get_cursor(), cpc);"
    }
]