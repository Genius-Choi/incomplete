[
    {
        "line": 3,
        "fullcodeline": "byte\t\tseq[65536];"
    },
    {
        "line": 7,
        "fullcodeline": "size = mbuf->cursize - offset;"
    },
    {
        "line": 8,
        "fullcodeline": "buffer = mbuf->data + offset;"
    },
    {
        "line": 14,
        "fullcodeline": "Com_Memset(&huff, 0, sizeof(huff_t));"
    },
    {
        "line": 16,
        "fullcodeline": "huff.tree = huff.lhead = huff.ltail = huff.loc[NYT] = &(huff.nodeList[huff.blocNode++]);"
    },
    {
        "line": 17,
        "fullcodeline": "huff.tree->symbol = NYT;"
    },
    {
        "line": 18,
        "fullcodeline": "huff.tree->weight = 0;"
    },
    {
        "line": 19,
        "fullcodeline": "huff.lhead->next = huff.lhead->prev = NULL;"
    },
    {
        "line": 20,
        "fullcodeline": "huff.tree->parent = huff.tree->left = huff.tree->right = NULL;"
    },
    {
        "line": 22,
        "fullcodeline": "cch = buffer[0]*256 + buffer[1];"
    },
    {
        "line": 27,
        "fullcodeline": "bloc = 16;"
    },
    {
        "line": 49,
        "fullcodeline": "mbuf->cursize = cch + offset;"
    },
    {
        "line": 50,
        "fullcodeline": "Com_Memcpy(mbuf->data + offset, seq, cch);"
    },
    {
        "line": 10,
        "fullcodeline": "if ( size <= 0 ) {"
    },
    {
        "line": 24,
        "fullcodeline": "if ( cch > mbuf->maxsize - offset ) {"
    },
    {
        "line": 29,
        "fullcodeline": "for ( j = 0; j < cch; j++ ) {"
    },
    {
        "line": 25,
        "fullcodeline": "cch = mbuf->maxsize - offset;"
    },
    {
        "line": 30,
        "fullcodeline": "ch = 0;"
    },
    {
        "line": 37,
        "fullcodeline": "Huff_Receive(huff.tree, &ch, buffer);\t\t\t\t/* Get a character */"
    },
    {
        "line": 45,
        "fullcodeline": "seq[j] = ch;\t\t\t\t\t\t\t\t\t/* Write symbol */"
    },
    {
        "line": 47,
        "fullcodeline": "Huff_addRef(&huff, (byte)ch);\t\t\t\t\t\t\t\t/* Increment node */"
    },
    {
        "line": 33,
        "fullcodeline": "if ( (bloc >> 3) > size ) {"
    },
    {
        "line": 38,
        "fullcodeline": "if ( ch == NYT ) {\t\t\t\t\t\t\t\t/* We got a NYT, get the symbol associated with it */"
    },
    {
        "line": 34,
        "fullcodeline": "seq[j] = 0;"
    },
    {
        "line": 39,
        "fullcodeline": "ch = 0;"
    },
    {
        "line": 40,
        "fullcodeline": "for ( i = 0; i < 8; i++ ) {"
    },
    {
        "line": 41,
        "fullcodeline": "ch = (ch<<1) + get_bit(buffer);"
    }
]