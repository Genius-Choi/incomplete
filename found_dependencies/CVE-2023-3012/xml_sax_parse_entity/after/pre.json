[
    {
        "line": 3,
        "fullcodeline": "char szC[2];"
    },
    {
        "line": 4,
        "fullcodeline": "char *ent_name=NULL;"
    },
    {
        "line": 5,
        "fullcodeline": "u32 i = 0;"
    },
    {
        "line": 6,
        "fullcodeline": "XML_Entity *ent = (XML_Entity *)gf_list_last(parser->entities);"
    },
    {
        "line": 7,
        "fullcodeline": "char *skip_chars = \" \\t\\n\\r\";"
    },
    {
        "line": 8,
        "fullcodeline": "i=0;"
    },
    {
        "line": 11,
        "fullcodeline": "szC[1]=0;"
    },
    {
        "line": 9,
        "fullcodeline": "if (ent && ent->value) ent = NULL;"
    },
    {
        "line": 13,
        "fullcodeline": "while (parser->current_pos+i < parser->line_size) {"
    },
    {
        "line": 10,
        "fullcodeline": "if (ent) skip_chars = NULL;"
    },
    {
        "line": 14,
        "fullcodeline": "u8 c = parser->buffer[parser->current_pos+i];"
    },
    {
        "line": 66,
        "fullcodeline": "if (ent && !ent->value)"
    },
    {
        "line": 67,
        "fullcodeline": "parser->sax_state = SAX_STATE_SYNTAX_ERROR;"
    },
    {
        "line": 15,
        "fullcodeline": "if (skip_chars && strchr(skip_chars, c)) {"
    },
    {
        "line": 20,
        "fullcodeline": "if (!ent && (c=='%')) {"
    },
    {
        "line": 17,
        "fullcodeline": "parser->current_pos++;"
    },
    {
        "line": 21,
        "fullcodeline": "parser->current_pos+=i+1;"
    },
    {
        "line": 22,
        "fullcodeline": "parser->sax_state = SAX_STATE_SKIP_DOCTYPE;"
    },
    {
        "line": 16,
        "fullcodeline": "if (c=='\\n') parser->line++;"
    },
    {
        "line": 23,
        "fullcodeline": "if (ent_name) gf_free(ent_name);"
    },
    {
        "line": 26,
        "fullcodeline": "else if (!ent && ((c=='\\\"') || (c=='\\'')) ) {"
    },
    {
        "line": 27,
        "fullcodeline": "GF_SAFEALLOC(ent, XML_Entity);"
    },
    {
        "line": 35,
        "fullcodeline": "ent->name = ent_name;"
    },
    {
        "line": 36,
        "fullcodeline": "ent_name=NULL;"
    },
    {
        "line": 37,
        "fullcodeline": "ent->namelen = (u32) strlen(ent->name);"
    },
    {
        "line": 38,
        "fullcodeline": "ent->sep = c;"
    },
    {
        "line": 39,
        "fullcodeline": "parser->current_pos += 1+i;"
    },
    {
        "line": 40,
        "fullcodeline": "assert(parser->current_pos < parser->line_size);"
    },
    {
        "line": 41,
        "fullcodeline": "xml_sax_swap(parser);"
    },
    {
        "line": 42,
        "fullcodeline": "i=0;"
    },
    {
        "line": 43,
        "fullcodeline": "gf_list_add(parser->entities, ent);"
    },
    {
        "line": 44,
        "fullcodeline": "skip_chars = NULL;"
    },
    {
        "line": 28,
        "fullcodeline": "if (!ent) {"
    },
    {
        "line": 33,
        "fullcodeline": "if (!ent_name) gf_dynstrcat(&ent_name, \"\", NULL);"
    },
    {
        "line": 29,
        "fullcodeline": "parser->sax_state = SAX_STATE_ALLOC_ERROR;"
    },
    {
        "line": 45,
        "fullcodeline": "} else if (ent && c==ent->sep) {"
    },
    {
        "line": 47,
        "fullcodeline": "xml_sax_store_text(parser, i);"
    },
    {
        "line": 49,
        "fullcodeline": "ent->value = xml_get_current_text(parser);"
    },
    {
        "line": 52,
        "fullcodeline": "parser->current_pos += 1;"
    },
    {
        "line": 53,
        "fullcodeline": "assert(parser->current_pos < parser->line_size);"
    },
    {
        "line": 57,
        "fullcodeline": "} else if (!ent) {"
    },
    {
        "line": 50,
        "fullcodeline": "if (!ent->value) ent->value = gf_strdup(\"\");"
    },
    {
        "line": 58,
        "fullcodeline": "szC[0] = c;"
    },
    {
        "line": 59,
        "fullcodeline": "gf_dynstrcat(&ent_name, szC, NULL);"
    },
    {
        "line": 60,
        "fullcodeline": "i++;"
    },
    {
        "line": 62,
        "fullcodeline": "i++;"
    }
]