[
    {
        "line": 4,
        "fullcodeline": "form_html = f\"\"\""
    },
    {
        "line": 10,
        "fullcodeline": "form = BeautifulSoup(form_html, \"lxml\").form"
    },
    {
        "line": 12,
        "fullcodeline": "valid_enctype = (enctype in valid_enctypes_file_submit and"
    },
    {
        "line": 14,
        "fullcodeline": "expected_content = b\"\"  # default"
    },
    {
        "line": 32,
        "fullcodeline": "browser = mechanicalsoup.Browser()"
    },
    {
        "line": 33,
        "fullcodeline": "response = browser._request(form)"
    },
    {
        "line": 39,
        "fullcodeline": "assert expected_enctype in response.request.headers[\"Content-Type\"]"
    },
    {
        "line": 41,
        "fullcodeline": "resp = response.json()"
    },
    {
        "line": 42,
        "fullcodeline": "assert resp[\"form\"][\"in\"] == \"test\""
    },
    {
        "line": 44,
        "fullcodeline": "found = False"
    },
    {
        "line": 45,
        "fullcodeline": "found_in = None"
    },
    {
        "line": 58,
        "fullcodeline": "assert found == bool(file_field)"
    },
    {
        "line": 15,
        "fullcodeline": "if submit_file and file_field:"
    },
    {
        "line": 35,
        "fullcodeline": "if enctype not in valid_enctypes_file_submit:"
    },
    {
        "line": 47,
        "fullcodeline": "for key, value in resp.items():"
    },
    {
        "line": 72,
        "fullcodeline": "if submit_file and file_field:"
    },
    {
        "line": 5,
        "fullcodeline": "<form method=\"post\" action=\"{httpbin.url}/post\" enctype=\"{enctype}\">"
    },
    {
        "line": 7,
        "fullcodeline": "{file_field}"
    },
    {
        "line": 17,
        "fullcodeline": "file_content = b\":-)\""
    },
    {
        "line": 19,
        "fullcodeline": "pic_filename = os.path.basename(pic_path)"
    },
    {
        "line": 20,
        "fullcodeline": "os.write(pic_filedescriptor, file_content)"
    },
    {
        "line": 21,
        "fullcodeline": "os.close(pic_filedescriptor)"
    },
    {
        "line": 29,
        "fullcodeline": "tag = form.find(\"input\", {\"name\": \"pic\"})"
    },
    {
        "line": 30,
        "fullcodeline": "tag[\"value\"] = open(pic_path, \"rb\")"
    },
    {
        "line": 36,
        "fullcodeline": "expected_enctype = default_enctype"
    },
    {
        "line": 38,
        "fullcodeline": "expected_enctype = enctype"
    },
    {
        "line": 60,
        "fullcodeline": "assert content == expected_content"
    },
    {
        "line": 73,
        "fullcodeline": "os.remove(pic_path)"
    },
    {
        "line": 18,
        "fullcodeline": "pic_filedescriptor, pic_path = tempfile.mkstemp()"
    },
    {
        "line": 24,
        "fullcodeline": "expected_content = file_content"
    },
    {
        "line": 28,
        "fullcodeline": "expected_content = os.path.basename(pic_path.encode())"
    },
    {
        "line": 63,
        "fullcodeline": "assert found_in == \"files\""
    },
    {
        "line": 70,
        "fullcodeline": "assert found_in == \"form\""
    },
    {
        "line": 49,
        "fullcodeline": "if \"pic\" in value:"
    },
    {
        "line": 55,
        "fullcodeline": "if key == \"files\" and not valid_enctype:"
    },
    {
        "line": 65,
        "fullcodeline": "assert (\"filename=\\\"\" + pic_filename + \"\\\"\""
    },
    {
        "line": 68,
        "fullcodeline": "assert b\"filename=\\\"\\\"\" in response.request.body"
    },
    {
        "line": 50,
        "fullcodeline": "content = value[\"pic\"].encode()"
    },
    {
        "line": 51,
        "fullcodeline": "assert not found"
    },
    {
        "line": 52,
        "fullcodeline": "assert key in (\"files\", \"form\")"
    },
    {
        "line": 53,
        "fullcodeline": "found = True"
    },
    {
        "line": 54,
        "fullcodeline": "found_in = key"
    },
    {
        "line": 56,
        "fullcodeline": "assert not value"
    }
]