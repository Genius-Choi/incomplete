[
    {
        "line": 9,
        "fullcodeline": "OP_REQUIRES("
    },
    {
        "line": 15,
        "fullcodeline": "OP_REQUIRES("
    },
    {
        "line": 22,
        "fullcodeline": "output->flat<T>().setZero();"
    },
    {
        "line": 23,
        "fullcodeline": "std::array<int64, 3> input_size = {{tensor_in_shape.dim_size(3),"
    },
    {
        "line": 10,
        "fullcodeline": "context, tensor_in_shape.dim_size(0) == out_backprop.dim_size(0),"
    },
    {
        "line": 11,
        "fullcodeline": "errors::InvalidArgument("
    },
    {
        "line": 16,
        "fullcodeline": "context, tensor_in_shape.dim_size(4) == out_backprop.dim_size(4),"
    },
    {
        "line": 17,
        "fullcodeline": "errors::InvalidArgument("
    },
    {
        "line": 26,
        "fullcodeline": "for (int64 p = 0; p < out_backprop.dim_size(3); ++p) {"
    },
    {
        "line": 14,
        "fullcodeline": "tensor_in_shape.dim_size(0), \" and \", out_backprop.dim_size(0)));"
    },
    {
        "line": 20,
        "fullcodeline": "tensor_in_shape.dim_size(4), \" and \", out_backprop.dim_size(4)));"
    },
    {
        "line": 36,
        "fullcodeline": "OP_REQUIRES_OK(context,"
    },
    {
        "line": 37,
        "fullcodeline": "GetBroadcastSize(p, input_size[0], window[0], stride[0],"
    },
    {
        "line": 39,
        "fullcodeline": "for (int64 r = 0; r < out_backprop.dim_size(2); ++r) {"
    },
    {
        "line": 41,
        "fullcodeline": "OP_REQUIRES_OK(context,"
    },
    {
        "line": 42,
        "fullcodeline": "GetBroadcastSize(r, input_size[1], window[1], stride[1],"
    },
    {
        "line": 44,
        "fullcodeline": "for (int64 c = 0; c < out_backprop.dim_size(1); ++c) {"
    },
    {
        "line": 46,
        "fullcodeline": "OP_REQUIRES_OK("
    },
    {
        "line": 49,
        "fullcodeline": "TensorSlice src{{0, -1}, {c, 1}, {r, 1}, {p, 1}, {0, -1}};"
    },
    {
        "line": 50,
        "fullcodeline": "TensorSlice dst{{0, -1},"
    },
    {
        "line": 63,
        "fullcodeline": "Eigen::array<int, 5> bcast = {1, csize, rsize, psize, 1};"
    },
    {
        "line": 76,
        "fullcodeline": "float divide_size = rsize * csize * psize * 1.0f;"
    },
    {
        "line": 77,
        "fullcodeline": "slices *= slices.constant(1.0f / divide_size);"
    },
    {
        "line": 47,
        "fullcodeline": "context, GetBroadcastSize(c, input_size[2], window[2], stride[2],"
    },
    {
        "line": 55,
        "fullcodeline": "Eigen::DSizes<Eigen::DenseIndex, 5> src_indices;"
    },
    {
        "line": 56,
        "fullcodeline": "Eigen::DSizes<Eigen::DenseIndex, 5> src_sizes;"
    },
    {
        "line": 57,
        "fullcodeline": "Eigen::DSizes<Eigen::DenseIndex, 5> dst_indices;"
    },
    {
        "line": 58,
        "fullcodeline": "Eigen::DSizes<Eigen::DenseIndex, 5> dst_sizes;"
    },
    {
        "line": 59,
        "fullcodeline": "src.FillIndicesAndSizes<5>(out_backprop.shape(), &src_indices,"
    },
    {
        "line": 61,
        "fullcodeline": "dst.FillIndicesAndSizes<5>(tensor_in_shape, &dst_indices, &dst_sizes);"
    },
    {
        "line": 72,
        "fullcodeline": "Eigen::Tensor<T, 5, Eigen::RowMajor> slices(src_sizes);"
    },
    {
        "line": 73,
        "fullcodeline": "slices.device(context->eigen_cpu_device()) ="
    },
    {
        "line": 74,
        "fullcodeline": "out_backprop.tensor<T, 5>().slice(src_indices, src_sizes);"
    },
    {
        "line": 79,
        "fullcodeline": "output->tensor<T, 5>()"
    },
    {
        "line": 81,
        "fullcodeline": ".device(context->eigen_cpu_device()) += slices.broadcast(bcast);"
    },
    {
        "line": 51,
        "fullcodeline": "{cindex, csize},"
    },
    {
        "line": 52,
        "fullcodeline": "{rindex, rsize},"
    },
    {
        "line": 53,
        "fullcodeline": "{pindex, psize},"
    },
    {
        "line": 54,
        "fullcodeline": "{0, -1}};"
    }
]