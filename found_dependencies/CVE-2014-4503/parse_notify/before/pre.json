[
    {
        "line": 7,
        "fullcodeline": "bool clean, ret = false;"
    },
    {
        "line": 11,
        "fullcodeline": "arr = json_array_get(val, 4);"
    },
    {
        "line": 15,
        "fullcodeline": "merkles = json_array_size(arr);"
    },
    {
        "line": 17,
        "fullcodeline": "job_id = json_array_string(val, 0);"
    },
    {
        "line": 18,
        "fullcodeline": "prev_hash = json_array_string(val, 1);"
    },
    {
        "line": 19,
        "fullcodeline": "coinbase1 = json_array_string(val, 2);"
    },
    {
        "line": 20,
        "fullcodeline": "coinbase2 = json_array_string(val, 3);"
    },
    {
        "line": 21,
        "fullcodeline": "bbversion = json_array_string(val, 5);"
    },
    {
        "line": 22,
        "fullcodeline": "nbit = json_array_string(val, 6);"
    },
    {
        "line": 23,
        "fullcodeline": "ntime = json_array_string(val, 7);"
    },
    {
        "line": 24,
        "fullcodeline": "clean = json_is_true(json_array_get(val, 8));"
    },
    {
        "line": 45,
        "fullcodeline": "cg_wlock(&pool->data_lock);"
    },
    {
        "line": 51,
        "fullcodeline": "pool->swork.job_id = job_id;"
    },
    {
        "line": 52,
        "fullcodeline": "pool->swork.prev_hash = prev_hash;"
    },
    {
        "line": 53,
        "fullcodeline": "cb1_len = strlen(coinbase1) / 2;"
    },
    {
        "line": 54,
        "fullcodeline": "cb2_len = strlen(coinbase2) / 2;"
    },
    {
        "line": 55,
        "fullcodeline": "pool->swork.bbversion = bbversion;"
    },
    {
        "line": 56,
        "fullcodeline": "pool->swork.nbit = nbit;"
    },
    {
        "line": 57,
        "fullcodeline": "pool->swork.ntime = ntime;"
    },
    {
        "line": 58,
        "fullcodeline": "pool->swork.clean = clean;"
    },
    {
        "line": 59,
        "fullcodeline": "alloc_len = pool->swork.cb_len = cb1_len + pool->n1_len + pool->n2size + cb2_len;"
    },
    {
        "line": 60,
        "fullcodeline": "pool->nonce2_offset = cb1_len + pool->n1_len;"
    },
    {
        "line": 77,
        "fullcodeline": "pool->swork.merkles = merkles;"
    },
    {
        "line": 80,
        "fullcodeline": "pool->merkle_offset = strlen(pool->swork.bbversion) +"
    },
    {
        "line": 82,
        "fullcodeline": "pool->swork.header_len = pool->merkle_offset +"
    },
    {
        "line": 88,
        "fullcodeline": "pool->merkle_offset /= 2;"
    },
    {
        "line": 89,
        "fullcodeline": "pool->swork.header_len = pool->swork.header_len * 2 + 1;"
    },
    {
        "line": 90,
        "fullcodeline": "align_len(&pool->swork.header_len);"
    },
    {
        "line": 91,
        "fullcodeline": "header = (char *)alloca(pool->swork.header_len);"
    },
    {
        "line": 92,
        "fullcodeline": "snprintf(header, pool->swork.header_len,"
    },
    {
        "line": 104,
        "fullcodeline": "cb1 = (unsigned char *)calloc(cb1_len, 1);"
    },
    {
        "line": 107,
        "fullcodeline": "hex2bin(cb1, coinbase1, cb1_len);"
    },
    {
        "line": 108,
        "fullcodeline": "cb2 = (unsigned char *)calloc(cb2_len, 1);"
    },
    {
        "line": 111,
        "fullcodeline": "hex2bin(cb2, coinbase2, cb2_len);"
    },
    {
        "line": 113,
        "fullcodeline": "align_len(&alloc_len);"
    },
    {
        "line": 114,
        "fullcodeline": "pool->coinbase = (unsigned char *)calloc(alloc_len, 1);"
    },
    {
        "line": 117,
        "fullcodeline": "memcpy(pool->coinbase, cb1, cb1_len);"
    },
    {
        "line": 118,
        "fullcodeline": "memcpy(pool->coinbase + cb1_len, pool->nonce1bin, pool->n1_len);"
    },
    {
        "line": 119,
        "fullcodeline": "memcpy(pool->coinbase + cb1_len + pool->n1_len + pool->n2size, cb2, cb2_len);"
    },
    {
        "line": 120,
        "fullcodeline": "cg_wunlock(&pool->data_lock);"
    },
    {
        "line": 132,
        "fullcodeline": "free(coinbase1);"
    },
    {
        "line": 133,
        "fullcodeline": "free(coinbase2);"
    },
    {
        "line": 134,
        "fullcodeline": "free(cb1);"
    },
    {
        "line": 135,
        "fullcodeline": "free(cb2);"
    },
    {
        "line": 138,
        "fullcodeline": "pool->getwork_requested++;"
    },
    {
        "line": 139,
        "fullcodeline": "total_getworks++;"
    },
    {
        "line": 140,
        "fullcodeline": "ret = true;"
    },
    {
        "line": 12,
        "fullcodeline": "if (!arr || !json_is_array(arr))"
    },
    {
        "line": 26,
        "fullcodeline": "if (!job_id || !prev_hash || !coinbase1 || !coinbase2 || !bbversion || !nbit || !ntime) {"
    },
    {
        "line": 62,
        "fullcodeline": "for (i = 0; i < pool->swork.merkles; i++)"
    },
    {
        "line": 63,
        "fullcodeline": "free(pool->swork.merkle_bin[i]);"
    },
    {
        "line": 101,
        "fullcodeline": "if (unlikely(!hex2bin(pool->header_bin, header, 128)))"
    },
    {
        "line": 105,
        "fullcodeline": "if (unlikely(!cb1))"
    },
    {
        "line": 109,
        "fullcodeline": "if (unlikely(!cb2))"
    },
    {
        "line": 115,
        "fullcodeline": "if (unlikely(!pool->coinbase))"
    },
    {
        "line": 141,
        "fullcodeline": "if (pool == current_pool())"
    },
    {
        "line": 65,
        "fullcodeline": "pool->swork.merkle_bin = (unsigned char **)realloc(pool->swork.merkle_bin,"
    },
    {
        "line": 79,
        "fullcodeline": "pool->nonce2 = 0;"
    },
    {
        "line": 81,
        "fullcodeline": "strlen(pool->swork.prev_hash);"
    },
    {
        "line": 102,
        "fullcodeline": "quit(1, \"Failed to convert header to header_bin in parse_notify\");"
    },
    {
        "line": 106,
        "fullcodeline": "quithere(1, \"Failed to calloc cb1 in parse_notify\");"
    },
    {
        "line": 110,
        "fullcodeline": "quithere(1, \"Failed to calloc cb2 in parse_notify\");"
    },
    {
        "line": 116,
        "fullcodeline": "quit(1, \"Failed to calloc pool coinbase in parse_notify\");"
    },
    {
        "line": 123,
        "fullcodeline": "applog(LOG_DEBUG, \"job_id: %s\", job_id);"
    },
    {
        "line": 124,
        "fullcodeline": "applog(LOG_DEBUG, \"prev_hash: %s\", prev_hash);"
    },
    {
        "line": 125,
        "fullcodeline": "applog(LOG_DEBUG, \"coinbase1: %s\", coinbase1);"
    },
    {
        "line": 126,
        "fullcodeline": "applog(LOG_DEBUG, \"coinbase2: %s\", coinbase2);"
    },
    {
        "line": 127,
        "fullcodeline": "applog(LOG_DEBUG, \"bbversion: %s\", bbversion);"
    },
    {
        "line": 128,
        "fullcodeline": "applog(LOG_DEBUG, \"nbit: %s\", nbit);"
    },
    {
        "line": 129,
        "fullcodeline": "applog(LOG_DEBUG, \"ntime: %s\", ntime);"
    },
    {
        "line": 130,
        "fullcodeline": "applog(LOG_DEBUG, \"clean: %s\", clean ? \"yes\" : \"no\");"
    },
    {
        "line": 142,
        "fullcodeline": "opt_work_update = true;"
    },
    {
        "line": 67,
        "fullcodeline": "for (i = 0; i < merkles; i++) {"
    },
    {
        "line": 29,
        "fullcodeline": "free(job_id);"
    },
    {
        "line": 31,
        "fullcodeline": "free(prev_hash);"
    },
    {
        "line": 33,
        "fullcodeline": "free(coinbase1);"
    },
    {
        "line": 35,
        "fullcodeline": "free(coinbase2);"
    },
    {
        "line": 37,
        "fullcodeline": "free(bbversion);"
    },
    {
        "line": 39,
        "fullcodeline": "free(nbit);"
    },
    {
        "line": 41,
        "fullcodeline": "free(ntime);"
    },
    {
        "line": 68,
        "fullcodeline": "char *merkle = json_array_string(arr, i);"
    },
    {
        "line": 70,
        "fullcodeline": "pool->swork.merkle_bin[i] = (unsigned char *)malloc(32);"
    },
    {
        "line": 73,
        "fullcodeline": "hex2bin(pool->swork.merkle_bin[i], merkle, 32);"
    },
    {
        "line": 74,
        "fullcodeline": "free(merkle);"
    },
    {
        "line": 85,
        "fullcodeline": "strlen(pool->swork.nbit) +"
    },
    {
        "line": 66,
        "fullcodeline": "sizeof(char *) * merkles + 1);"
    },
    {
        "line": 71,
        "fullcodeline": "if (unlikely(!pool->swork.merkle_bin[i]))"
    },
    {
        "line": 84,
        "fullcodeline": "strlen(pool->swork.ntime) +"
    },
    {
        "line": 72,
        "fullcodeline": "quit(1, \"Failed to malloc pool swork merkle_bin\");"
    }
]