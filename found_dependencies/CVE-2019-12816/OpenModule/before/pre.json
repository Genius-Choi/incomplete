[
    {
        "line": 4,
        "fullcodeline": "sRetMsg.clear();"
    },
    {
        "line": 29,
        "fullcodeline": "ModHandle p = dlopen((sModPath).c_str(), RTLD_NOW | RTLD_GLOBAL);"
    },
    {
        "line": 48,
        "fullcodeline": "const CModuleEntry* pModuleEntry = fpZNCModuleEntry();"
    },
    {
        "line": 6,
        "fullcodeline": "for (unsigned int a = 0; a < sModule.length(); a++) {"
    },
    {
        "line": 31,
        "fullcodeline": "if (!p) {"
    },
    {
        "line": 42,
        "fullcodeline": "*reinterpret_cast<void**>(&fpZNCModuleEntry) = dlsym(p, \"ZNCModuleEntry\");"
    },
    {
        "line": 61,
        "fullcodeline": "if (std::strcmp(pModuleEntry->pcCompileOptions,"
    },
    {
        "line": 34,
        "fullcodeline": "const char* cDlError = dlerror();"
    },
    {
        "line": 35,
        "fullcodeline": "CString sDlError = cDlError ? cDlError : t_s(\"Unknown error\");"
    },
    {
        "line": 50,
        "fullcodeline": "if (std::strcmp(pModuleEntry->pcVersion, VERSION_STR) ||"
    },
    {
        "line": 51,
        "fullcodeline": "std::strcmp(pModuleEntry->pcVersionExtra, VERSION_EXTRA)) {"
    },
    {
        "line": 7,
        "fullcodeline": "if (((sModule[a] < '0') || (sModule[a] > '9')) &&"
    },
    {
        "line": 36,
        "fullcodeline": "sRetMsg = t_f(\"Unable to open module {1}: {2}\")(sModule, sDlError);"
    },
    {
        "line": 45,
        "fullcodeline": "sRetMsg = t_f(\"Could not find ZNCModuleEntry in module {1}\")(sModule);"
    },
    {
        "line": 63,
        "fullcodeline": "sRetMsg = t_f("
    },
    {
        "line": 9,
        "fullcodeline": "((sModule[a] < 'A') || (sModule[a] > 'Z')) && (sModule[a] != '_')) {"
    },
    {
        "line": 10,
        "fullcodeline": "sRetMsg ="
    },
    {
        "line": 11,
        "fullcodeline": "t_f(\"Module names can only contain letters, numbers and \""
    },
    {
        "line": 8,
        "fullcodeline": "((sModule[a] < 'a') || (sModule[a] > 'z')) &&"
    }
]