[
    {
        "line": 4,
        "fullcodeline": "sRetMsg = \"\";"
    },
    {
        "line": 16,
        "fullcodeline": "bool bHandled = false;"
    },
    {
        "line": 17,
        "fullcodeline": "_GLOBALMODULECALL(OnModuleLoading(sModule, sArgs, eType, bSuccess, sRetMsg),"
    },
    {
        "line": 28,
        "fullcodeline": "Info.SetName(sModule);"
    },
    {
        "line": 29,
        "fullcodeline": "Info.SetPath(sModPath);"
    },
    {
        "line": 31,
        "fullcodeline": "ModHandle p = OpenModule(sModule, sModPath, Info, sRetMsg);"
    },
    {
        "line": 54,
        "fullcodeline": "CModule* pModule ="
    },
    {
        "line": 56,
        "fullcodeline": "pModule->SetDescription(Info.GetDescription());"
    },
    {
        "line": 57,
        "fullcodeline": "pModule->SetArgs(sArgs);"
    },
    {
        "line": 58,
        "fullcodeline": "pModule->SetModPath(CDir::ChangeDir(CZNC::Get().GetCurPath(), sModPath));"
    },
    {
        "line": 59,
        "fullcodeline": "push_back(pModule);"
    },
    {
        "line": 6,
        "fullcodeline": "if (!ValidateModuleName(sModule, sRetMsg)) {"
    },
    {
        "line": 33,
        "fullcodeline": "if (!p) return false;"
    },
    {
        "line": 55,
        "fullcodeline": "Info.GetLoader()(p, pUser, pNetwork, sModule, sDataPath, eType);"
    },
    {
        "line": 10,
        "fullcodeline": "if (FindModule(sModule) != nullptr) {"
    },
    {
        "line": 24,
        "fullcodeline": "if (!FindModPath(sModule, sModPath, sDataPath)) {"
    },
    {
        "line": 35,
        "fullcodeline": "if (!Info.SupportsType(eType)) {"
    },
    {
        "line": 42,
        "fullcodeline": "if (!pUser && eType == CModInfo::UserModule) {"
    },
    {
        "line": 48,
        "fullcodeline": "if (!pNetwork && eType == CModInfo::NetworkModule) {"
    },
    {
        "line": 63,
        "fullcodeline": "bLoaded = pModule->OnLoad(sArgs, sRetMsg);"
    },
    {
        "line": 70,
        "fullcodeline": "UnloadModule(sModule, sModPath);"
    },
    {
        "line": 78,
        "fullcodeline": "if (!sRetMsg.empty()) {"
    },
    {
        "line": 79,
        "fullcodeline": "sRetMsg += \" \";"
    },
    {
        "line": 11,
        "fullcodeline": "sRetMsg = t_f(\"Module {1} already loaded.\")(sModule);"
    },
    {
        "line": 25,
        "fullcodeline": "sRetMsg = t_f(\"Unable to find module {1}\")(sModule);"
    },
    {
        "line": 37,
        "fullcodeline": "sRetMsg = t_f(\"Module {1} does not support module type {2}.\")("
    },
    {
        "line": 44,
        "fullcodeline": "sRetMsg = t_f(\"Module {1} requires a user.\")(sModule);"
    },
    {
        "line": 50,
        "fullcodeline": "sRetMsg = t_f(\"Module {1} requires a network.\")(sModule);"
    },
    {
        "line": 65,
        "fullcodeline": "bLoaded = false;"
    },
    {
        "line": 66,
        "fullcodeline": "sRetMsg = t_s(\"Caught an exception\");"
    },
    {
        "line": 38,
        "fullcodeline": "sModule, CModInfo::ModuleTypeToString(eType));"
    },
    {
        "line": 71,
        "fullcodeline": "if (!sRetMsg.empty())"
    },
    {
        "line": 72,
        "fullcodeline": "sRetMsg = t_f(\"Module {1} aborted: {2}\")(sModule, sRetMsg);"
    },
    {
        "line": 74,
        "fullcodeline": "sRetMsg = t_f(\"Module {1} aborted.\")(sModule);"
    }
]