[
    {
        "line": 31,
        "fullcodeline": "col_names = request.GET.getlist(\"col_names\")"
    },
    {
        "line": 33,
        "fullcodeline": "ctx = conn.createServiceOptsDict()"
    },
    {
        "line": 34,
        "fullcodeline": "ctx.setOmeroGroup(\"-1\")"
    },
    {
        "line": 36,
        "fullcodeline": "r = conn.getSharedResources()"
    },
    {
        "line": 37,
        "fullcodeline": "t = r.openTable(omero.model.OriginalFileI(fileid), ctx)"
    },
    {
        "line": 27,
        "fullcodeline": "if query is None:"
    },
    {
        "line": 29,
        "fullcodeline": "if not query:"
    },
    {
        "line": 38,
        "fullcodeline": "if not t:"
    },
    {
        "line": 28,
        "fullcodeline": "query = request.GET.get(\"query\")"
    },
    {
        "line": 42,
        "fullcodeline": "cols = t.getHeaders()"
    },
    {
        "line": 43,
        "fullcodeline": "col_indices = range(len(cols))"
    },
    {
        "line": 59,
        "fullcodeline": "rows = t.getNumberOfRows()"
    },
    {
        "line": 61,
        "fullcodeline": "offset = kwargs.get(\"offset\", 0)"
    },
    {
        "line": 62,
        "fullcodeline": "limit = kwargs.get(\"limit\", None)"
    },
    {
        "line": 71,
        "fullcodeline": "range_start = offset"
    },
    {
        "line": 72,
        "fullcodeline": "range_size = kwargs.get(\"limit\", rows)"
    },
    {
        "line": 73,
        "fullcodeline": "range_end = min(rows, range_start + range_size)"
    },
    {
        "line": 91,
        "fullcodeline": "def row_generator(table, h):"
    },
    {
        "line": 105,
        "fullcodeline": "row_gen = row_generator(t, hits)"
    },
    {
        "line": 107,
        "fullcodeline": "rsp_data = {"
    },
    {
        "line": 30,
        "fullcodeline": "return dict(error=\"Must specify query parameter, use * to retrieve all\")"
    },
    {
        "line": 39,
        "fullcodeline": "return dict(error=\"Table %s not found\" % fileid)"
    },
    {
        "line": 63,
        "fullcodeline": "if not offset:"
    },
    {
        "line": 65,
        "fullcodeline": "if not limit:"
    },
    {
        "line": 75,
        "fullcodeline": "if query == \"*\":"
    },
    {
        "line": 120,
        "fullcodeline": "if not lazy:"
    },
    {
        "line": 45,
        "fullcodeline": "enumerated_columns = ("
    },
    {
        "line": 50,
        "fullcodeline": "cols = []"
    },
    {
        "line": 51,
        "fullcodeline": "col_indices = []"
    },
    {
        "line": 64,
        "fullcodeline": "offset = int(request.GET.get(\"offset\", 0))"
    },
    {
        "line": 66,
        "fullcodeline": "limit = ("
    },
    {
        "line": 76,
        "fullcodeline": "hits = range(range_start, range_end)"
    },
    {
        "line": 77,
        "fullcodeline": "totalCount = rows"
    },
    {
        "line": 79,
        "fullcodeline": "match = re.match(r\"^(\\w+)-(\\d+)\", query)"
    },
    {
        "line": 121,
        "fullcodeline": "row_data = []"
    },
    {
        "line": 125,
        "fullcodeline": "rsp_data[\"data\"][\"rows\"] = row_data"
    },
    {
        "line": 127,
        "fullcodeline": "rsp_data[\"data\"][\"lazy_rows\"] = row_gen"
    },
    {
        "line": 128,
        "fullcodeline": "rsp_data[\"table\"] = t"
    },
    {
        "line": 132,
        "fullcodeline": "if not lazy:"
    },
    {
        "line": 46,
        "fullcodeline": "[(i, j) for (i, j) in enumerate(cols) if j.name in col_names]"
    },
    {
        "line": 52,
        "fullcodeline": "for col_name in col_names:"
    },
    {
        "line": 67,
        "fullcodeline": "int(request.GET.get(\"limit\"))"
    },
    {
        "line": 123,
        "fullcodeline": "for rows in list(row_gen):"
    },
    {
        "line": 133,
        "fullcodeline": "t.close()"
    },
    {
        "line": 68,
        "fullcodeline": "if request.GET.get(\"limit\") is not None"
    },
    {
        "line": 81,
        "fullcodeline": "query = \"(%s==%s)\" % (match.group(1), match.group(2))"
    },
    {
        "line": 83,
        "fullcodeline": "logger.info(query)"
    },
    {
        "line": 84,
        "fullcodeline": "hits = t.getWhereList(query, None, 0, rows, 1)"
    },
    {
        "line": 85,
        "fullcodeline": "totalCount = len(hits)"
    },
    {
        "line": 87,
        "fullcodeline": "hits = hits[range_start:range_end]"
    },
    {
        "line": 108,
        "fullcodeline": "\"data\": {"
    },
    {
        "line": 112,
        "fullcodeline": "\"meta\": {"
    },
    {
        "line": 48,
        "fullcodeline": "else [(i, j) for (i, j) in enumerate(cols)]"
    },
    {
        "line": 124,
        "fullcodeline": "row_data.extend(rows)"
    },
    {
        "line": 53,
        "fullcodeline": "for (i, j) in enumerated_columns:"
    },
    {
        "line": 109,
        "fullcodeline": "\"column_types\": [col.__class__.__name__ for col in cols],"
    },
    {
        "line": 110,
        "fullcodeline": "\"columns\": [col.name for col in cols],"
    },
    {
        "line": 89,
        "fullcodeline": "return dict(error=\"Error executing query: %s\" % query)"
    },
    {
        "line": 54,
        "fullcodeline": "if col_name == j.name:"
    },
    {
        "line": 55,
        "fullcodeline": "col_indices.append(i)"
    },
    {
        "line": 56,
        "fullcodeline": "cols.append(j)"
    }
]