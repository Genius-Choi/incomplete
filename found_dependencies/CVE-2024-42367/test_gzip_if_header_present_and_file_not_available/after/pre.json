[
    {
        "line": 2,
        "fullcodeline": "request = make_mocked_request("
    },
    {
        "line": 6,
        "fullcodeline": "gz_filepath = mock.create_autospec(Path, spec_set=True)"
    },
    {
        "line": 7,
        "fullcodeline": "gz_filepath.lstat.side_effect = OSError(2, \"No such file or directory\")"
    },
    {
        "line": 9,
        "fullcodeline": "filepath = mock.create_autospec(Path, spec_set=True)"
    },
    {
        "line": 10,
        "fullcodeline": "filepath.name = \"logo.png\""
    },
    {
        "line": 11,
        "fullcodeline": "filepath.with_suffix.return_value = gz_filepath"
    },
    {
        "line": 12,
        "fullcodeline": "filepath.stat.return_value.st_size = 1024"
    },
    {
        "line": 13,
        "fullcodeline": "filepath.stat.return_value.st_mtime_ns = 1603733507222449291"
    },
    {
        "line": 14,
        "fullcodeline": "filepath.stat.return_value.st_mode = MOCK_MODE"
    },
    {
        "line": 16,
        "fullcodeline": "file_sender = FileResponse(filepath)"
    },
    {
        "line": 17,
        "fullcodeline": "file_sender._path = filepath"
    },
    {
        "line": 18,
        "fullcodeline": "file_sender._sendfile = make_mocked_coro(None)  # type: ignore[assignment]"
    },
    {
        "line": 20,
        "fullcodeline": "loop.run_until_complete(file_sender.prepare(request))"
    },
    {
        "line": 22,
        "fullcodeline": "assert filepath.open.called"
    },
    {
        "line": 23,
        "fullcodeline": "assert not gz_filepath.open.called"
    },
    {
        "line": 3,
        "fullcodeline": "\"GET\", \"http://python.org/logo.png\", headers={hdrs.ACCEPT_ENCODING: \"gzip\"}"
    }
]