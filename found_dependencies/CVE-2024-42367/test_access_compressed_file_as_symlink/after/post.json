[
    {
        "line": 5,
        "fullcodeline": "private_file = tmp_path / \"private.txt\""
    },
    {
        "line": 6,
        "fullcodeline": "private_file.write_text(\"private info\")"
    },
    {
        "line": 7,
        "fullcodeline": "www_dir = tmp_path / \"www\""
    },
    {
        "line": 8,
        "fullcodeline": "www_dir.mkdir()"
    },
    {
        "line": 9,
        "fullcodeline": "gz_link = www_dir / \"file.txt.gz\""
    },
    {
        "line": 10,
        "fullcodeline": "gz_link.symlink_to(f\"../{private_file.name}\")"
    },
    {
        "line": 12,
        "fullcodeline": "app = web.Application()"
    },
    {
        "line": 14,
        "fullcodeline": "client = await aiohttp_client(app)"
    },
    {
        "line": 17,
        "fullcodeline": "resp = await client.get(f\"/{gz_link.stem}\", auto_decompress=False)"
    },
    {
        "line": 18,
        "fullcodeline": "assert resp.status == 404"
    },
    {
        "line": 19,
        "fullcodeline": "resp.release()"
    },
    {
        "line": 22,
        "fullcodeline": "txt_file = gz_link.with_suffix(\"\")"
    },
    {
        "line": 23,
        "fullcodeline": "txt_file.write_text(\"public data\")"
    },
    {
        "line": 24,
        "fullcodeline": "resp = await client.get(f\"/{txt_file.name}\")"
    },
    {
        "line": 25,
        "fullcodeline": "assert resp.status == 200"
    },
    {
        "line": 26,
        "fullcodeline": "assert resp.headers.get(\"Content-Encoding\") is None"
    },
    {
        "line": 27,
        "fullcodeline": "assert resp.content_type == \"text/plain\""
    },
    {
        "line": 28,
        "fullcodeline": "assert await resp.text() == \"public data\""
    },
    {
        "line": 29,
        "fullcodeline": "resp.release()"
    },
    {
        "line": 30,
        "fullcodeline": "await client.close()"
    },
    {
        "line": 13,
        "fullcodeline": "app.router.add_static(\"/\", www_dir)"
    }
]