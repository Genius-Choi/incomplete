[
    {
        "line": 6,
        "fullcodeline": "char buff1[24], buff2[24], *p;"
    },
    {
        "line": 9,
        "fullcodeline": "p = buff1;"
    },
    {
        "line": 10,
        "fullcodeline": "i = ctm->length;"
    },
    {
        "line": 11,
        "fullcodeline": "str = (char *)ctm->data;"
    },
    {
        "line": 40,
        "fullcodeline": "*(p++) = 'Z';"
    },
    {
        "line": 41,
        "fullcodeline": "*(p++) = '\\0';"
    },
    {
        "line": 53,
        "fullcodeline": "atm.type = ctm->type;"
    },
    {
        "line": 54,
        "fullcodeline": "atm.flags = 0;"
    },
    {
        "line": 56,
        "fullcodeline": "atm.data = (unsigned char *)buff2;"
    },
    {
        "line": 74,
        "fullcodeline": "i = strcmp(buff1, buff2);"
    },
    {
        "line": 12,
        "fullcodeline": "if (ctm->type == V_ASN1_UTCTIME) {"
    },
    {
        "line": 26,
        "fullcodeline": "if ((*str == 'Z') || (*str == '-') || (*str == '+')) {"
    },
    {
        "line": 43,
        "fullcodeline": "if (*str == 'Z')"
    },
    {
        "line": 58,
        "fullcodeline": "if (X509_time_adj(&atm, offset * 60, cmp_time) == NULL)"
    },
    {
        "line": 61,
        "fullcodeline": "if (ctm->type == V_ASN1_UTCTIME) {"
    },
    {
        "line": 75,
        "fullcodeline": "if (i == 0)                 /* wait a second then return younger :-) */"
    },
    {
        "line": 15,
        "fullcodeline": "memcpy(p, str, 10);"
    },
    {
        "line": 16,
        "fullcodeline": "p += 10;"
    },
    {
        "line": 17,
        "fullcodeline": "str += 10;"
    },
    {
        "line": 27,
        "fullcodeline": "*(p++) = '0';"
    },
    {
        "line": 28,
        "fullcodeline": "*(p++) = '0';"
    },
    {
        "line": 44,
        "fullcodeline": "offset = 0;"
    },
    {
        "line": 62,
        "fullcodeline": "i = (buff1[0] - '0') * 10 + (buff1[1] - '0');"
    },
    {
        "line": 65,
        "fullcodeline": "j = (buff2[0] - '0') * 10 + (buff2[1] - '0');"
    },
    {
        "line": 13,
        "fullcodeline": "if ((i < 11) || (i > 17))"
    },
    {
        "line": 21,
        "fullcodeline": "memcpy(p, str, 12);"
    },
    {
        "line": 22,
        "fullcodeline": "p += 12;"
    },
    {
        "line": 23,
        "fullcodeline": "str += 12;"
    },
    {
        "line": 48,
        "fullcodeline": "offset = ((str[1] - '0') * 10 + (str[2] - '0')) * 60;"
    },
    {
        "line": 49,
        "fullcodeline": "offset += (str[3] - '0') * 10 + (str[4] - '0');"
    },
    {
        "line": 63,
        "fullcodeline": "if (i < 50)"
    },
    {
        "line": 66,
        "fullcodeline": "if (j < 50)"
    },
    {
        "line": 69,
        "fullcodeline": "if (i < j)"
    },
    {
        "line": 71,
        "fullcodeline": "if (i > j)"
    },
    {
        "line": 76,
        "fullcodeline": "return -1;"
    },
    {
        "line": 19,
        "fullcodeline": "if (i < 13)"
    },
    {
        "line": 33,
        "fullcodeline": "if (*str == '.') {"
    },
    {
        "line": 46,
        "fullcodeline": "if ((*str != '+') && (*str != '-'))"
    },
    {
        "line": 50,
        "fullcodeline": "if (*str == '-')"
    },
    {
        "line": 64,
        "fullcodeline": "i += 100;           /* cf. RFC 2459 */"
    },
    {
        "line": 67,
        "fullcodeline": "j += 100;"
    },
    {
        "line": 30,
        "fullcodeline": "*(p++) = *(str++);"
    },
    {
        "line": 31,
        "fullcodeline": "*(p++) = *(str++);"
    },
    {
        "line": 34,
        "fullcodeline": "str++;"
    },
    {
        "line": 51,
        "fullcodeline": "offset = -offset;"
    },
    {
        "line": 70,
        "fullcodeline": "return -1;"
    },
    {
        "line": 35,
        "fullcodeline": "while ((*str >= '0') && (*str <= '9'))"
    },
    {
        "line": 36,
        "fullcodeline": "str++;"
    }
]