[
    {
        "line": 6,
        "fullcodeline": "char buff1[24], buff2[24], *p;"
    },
    {
        "line": 9,
        "fullcodeline": "p = buff1;"
    },
    {
        "line": 10,
        "fullcodeline": "remaining = ctm->length;"
    },
    {
        "line": 11,
        "fullcodeline": "str = (char *)ctm->data;"
    },
    {
        "line": 90,
        "fullcodeline": "atm.type = ctm->type;"
    },
    {
        "line": 91,
        "fullcodeline": "atm.flags = 0;"
    },
    {
        "line": 92,
        "fullcodeline": "atm.length = sizeof(buff2);"
    },
    {
        "line": 93,
        "fullcodeline": "atm.data = (unsigned char *)buff2;"
    },
    {
        "line": 111,
        "fullcodeline": "i = strcmp(buff1, buff2);"
    },
    {
        "line": 18,
        "fullcodeline": "if (ctm->type == V_ASN1_UTCTIME) {"
    },
    {
        "line": 69,
        "fullcodeline": "if (!remaining)"
    },
    {
        "line": 71,
        "fullcodeline": "if (*str == 'Z') {"
    },
    {
        "line": 95,
        "fullcodeline": "if (X509_time_adj(&atm, offset * 60, cmp_time) == NULL)"
    },
    {
        "line": 112,
        "fullcodeline": "if (i == 0)                 /* wait a second then return younger :-) */"
    },
    {
        "line": 20,
        "fullcodeline": "int min_length = sizeof(\"YYMMDDHHMMZ\") - 1;"
    },
    {
        "line": 21,
        "fullcodeline": "int max_length = sizeof(\"YYMMDDHHMMSS+hhmm\") - 1;"
    },
    {
        "line": 24,
        "fullcodeline": "memcpy(p, str, 10);"
    },
    {
        "line": 25,
        "fullcodeline": "p += 10;"
    },
    {
        "line": 26,
        "fullcodeline": "str += 10;"
    },
    {
        "line": 27,
        "fullcodeline": "remaining -= 10;"
    },
    {
        "line": 40,
        "fullcodeline": "if ((*str == 'Z') || (*str == '-') || (*str == '+')) {"
    },
    {
        "line": 65,
        "fullcodeline": "*(p++) = 'Z';"
    },
    {
        "line": 74,
        "fullcodeline": "offset = 0;"
    },
    {
        "line": 99,
        "fullcodeline": "i = (buff1[0] - '0') * 10 + (buff1[1] - '0');"
    },
    {
        "line": 102,
        "fullcodeline": "j = (buff2[0] - '0') * 10 + (buff2[1] - '0');"
    },
    {
        "line": 22,
        "fullcodeline": "if (remaining < min_length || remaining > max_length)"
    },
    {
        "line": 30,
        "fullcodeline": "int min_length = sizeof(\"YYYYMMDDHHMMZ\") - 1;"
    },
    {
        "line": 31,
        "fullcodeline": "int max_length = sizeof(\"YYYYMMDDHHMMSS.fff+hhmm\") - 1;"
    },
    {
        "line": 34,
        "fullcodeline": "memcpy(p, str, 12);"
    },
    {
        "line": 35,
        "fullcodeline": "p += 12;"
    },
    {
        "line": 36,
        "fullcodeline": "str += 12;"
    },
    {
        "line": 37,
        "fullcodeline": "remaining -= 12;"
    },
    {
        "line": 49,
        "fullcodeline": "remaining -= 2;"
    },
    {
        "line": 85,
        "fullcodeline": "offset = ((str[1] - '0') * 10 + (str[2] - '0')) * 60;"
    },
    {
        "line": 86,
        "fullcodeline": "offset += (str[3] - '0') * 10 + (str[4] - '0');"
    },
    {
        "line": 100,
        "fullcodeline": "if (i < 50)"
    },
    {
        "line": 103,
        "fullcodeline": "if (j < 50)"
    },
    {
        "line": 106,
        "fullcodeline": "if (i < j)"
    },
    {
        "line": 113,
        "fullcodeline": "return -1;"
    },
    {
        "line": 41,
        "fullcodeline": "*(p++) = '0';"
    },
    {
        "line": 42,
        "fullcodeline": "*(p++) = '0';"
    },
    {
        "line": 45,
        "fullcodeline": "if (remaining < 2)"
    },
    {
        "line": 55,
        "fullcodeline": "if (remaining && *str == '.') {"
    },
    {
        "line": 101,
        "fullcodeline": "i += 100;           /* cf. RFC 2459 */"
    },
    {
        "line": 104,
        "fullcodeline": "j += 100;"
    },
    {
        "line": 32,
        "fullcodeline": "if (remaining < min_length || remaining > max_length)"
    },
    {
        "line": 47,
        "fullcodeline": "*(p++) = *(str++);"
    },
    {
        "line": 48,
        "fullcodeline": "*(p++) = *(str++);"
    },
    {
        "line": 56,
        "fullcodeline": "str++;"
    },
    {
        "line": 57,
        "fullcodeline": "remaining--;"
    },
    {
        "line": 77,
        "fullcodeline": "if ((*str != '+') && (*str != '-'))"
    },
    {
        "line": 82,
        "fullcodeline": "if (str[1] < '0' || str[1] > '9' || str[2] < '0' || str[2] > '9' ||"
    },
    {
        "line": 83,
        "fullcodeline": "str[3] < '0' || str[3] > '9' || str[4] < '0' || str[4] > '9')"
    },
    {
        "line": 88,
        "fullcodeline": "offset = -offset;"
    },
    {
        "line": 107,
        "fullcodeline": "return -1;"
    },
    {
        "line": 58,
        "fullcodeline": "for (i = 0; i < 3 && remaining; i++, str++, remaining--) {"
    },
    {
        "line": 59,
        "fullcodeline": "if (*str < '0' || *str > '9')"
    }
]