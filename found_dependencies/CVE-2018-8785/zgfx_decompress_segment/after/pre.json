[
    {
        "line": 5,
        "fullcodeline": "UINT32 extra = 0;"
    },
    {
        "line": 12,
        "fullcodeline": "size_t cbSegment = segmentSize - 1;"
    },
    {
        "line": 17,
        "fullcodeline": "Stream_Read_UINT8(stream, flags); /* header (1 byte) */"
    },
    {
        "line": 18,
        "fullcodeline": "zgfx->OutputCount = 0;"
    },
    {
        "line": 19,
        "fullcodeline": "pbSegment = Stream_Pointer(stream);"
    },
    {
        "line": 20,
        "fullcodeline": "Stream_Seek(stream, cbSegment);"
    },
    {
        "line": 30,
        "fullcodeline": "zgfx->pbInputCurrent = pbSegment;"
    },
    {
        "line": 31,
        "fullcodeline": "zgfx->pbInputEnd = &pbSegment[cbSegment - 1];"
    },
    {
        "line": 33,
        "fullcodeline": "zgfx->cBitsRemaining = 8 * (cbSegment - 1) - *zgfx->pbInputEnd;"
    },
    {
        "line": 34,
        "fullcodeline": "zgfx->cBitsCurrent = 0;"
    },
    {
        "line": 35,
        "fullcodeline": "zgfx->BitsCurrent = 0;"
    },
    {
        "line": 14,
        "fullcodeline": "if ((Stream_GetRemainingLength(stream) < segmentSize) || (segmentSize < 1))"
    },
    {
        "line": 22,
        "fullcodeline": "if (!(flags & PACKET_COMPRESSED))"
    },
    {
        "line": 24,
        "fullcodeline": "zgfx_history_buffer_ring_write(zgfx, pbSegment, cbSegment);"
    },
    {
        "line": 25,
        "fullcodeline": "CopyMemory(zgfx->OutputBuffer, pbSegment, cbSegment);"
    },
    {
        "line": 39,
        "fullcodeline": "haveBits = 0;"
    },
    {
        "line": 40,
        "fullcodeline": "inPrefix = 0;"
    },
    {
        "line": 42,
        "fullcodeline": "for (opIndex = 0; ZGFX_TOKEN_TABLE[opIndex].prefixLength != 0; opIndex++)"
    },
    {
        "line": 44,
        "fullcodeline": "while (haveBits < ZGFX_TOKEN_TABLE[opIndex].prefixLength)"
    },
    {
        "line": 51,
        "fullcodeline": "if (inPrefix == ZGFX_TOKEN_TABLE[opIndex].prefixCode)"
    },
    {
        "line": 46,
        "fullcodeline": "zgfx_GetBits(zgfx, 1);"
    },
    {
        "line": 47,
        "fullcodeline": "inPrefix = (inPrefix << 1) + zgfx->bits;"
    },
    {
        "line": 48,
        "fullcodeline": "haveBits++;"
    },
    {
        "line": 56,
        "fullcodeline": "zgfx_GetBits(zgfx, ZGFX_TOKEN_TABLE[opIndex].valueBits);"
    },
    {
        "line": 57,
        "fullcodeline": "c = (BYTE)(ZGFX_TOKEN_TABLE[opIndex].valueBase + zgfx->bits);"
    },
    {
        "line": 60,
        "fullcodeline": "if (++zgfx->HistoryIndex == zgfx->HistoryBufferSize)"
    },
    {
        "line": 67,
        "fullcodeline": "zgfx_GetBits(zgfx, ZGFX_TOKEN_TABLE[opIndex].valueBits);"
    },
    {
        "line": 68,
        "fullcodeline": "distance = ZGFX_TOKEN_TABLE[opIndex].valueBase + zgfx->bits;"
    },
    {
        "line": 61,
        "fullcodeline": "zgfx->HistoryIndex = 0;"
    },
    {
        "line": 63,
        "fullcodeline": "zgfx->OutputBuffer[zgfx->OutputCount++] = c;"
    },
    {
        "line": 70,
        "fullcodeline": "if (distance != 0)"
    },
    {
        "line": 73,
        "fullcodeline": "zgfx_GetBits(zgfx, 1);"
    },
    {
        "line": 96,
        "fullcodeline": "zgfx_history_buffer_ring_read(zgfx, distance, &(zgfx->OutputBuffer[zgfx->OutputCount]), count);"
    },
    {
        "line": 97,
        "fullcodeline": "zgfx_history_buffer_ring_write(zgfx, &(zgfx->OutputBuffer[zgfx->OutputCount]), count);"
    },
    {
        "line": 98,
        "fullcodeline": "zgfx->OutputCount += count;"
    },
    {
        "line": 75,
        "fullcodeline": "if (zgfx->bits == 0)"
    },
    {
        "line": 103,
        "fullcodeline": "zgfx_GetBits(zgfx, 15);"
    },
    {
        "line": 104,
        "fullcodeline": "count = zgfx->bits;"
    },
    {
        "line": 105,
        "fullcodeline": "zgfx->cBitsRemaining -= zgfx->cBitsCurrent;"
    },
    {
        "line": 106,
        "fullcodeline": "zgfx->cBitsCurrent = 0;"
    },
    {
        "line": 107,
        "fullcodeline": "zgfx->BitsCurrent = 0;"
    },
    {
        "line": 108,
        "fullcodeline": "CopyMemory(&(zgfx->OutputBuffer[zgfx->OutputCount]), zgfx->pbInputCurrent, count);"
    },
    {
        "line": 109,
        "fullcodeline": "zgfx_history_buffer_ring_write(zgfx, zgfx->pbInputCurrent, count);"
    },
    {
        "line": 110,
        "fullcodeline": "zgfx->pbInputCurrent += count;"
    },
    {
        "line": 111,
        "fullcodeline": "zgfx->cBitsRemaining -= (8 * count);"
    },
    {
        "line": 112,
        "fullcodeline": "zgfx->OutputCount += count;"
    },
    {
        "line": 77,
        "fullcodeline": "count = 3;"
    },
    {
        "line": 81,
        "fullcodeline": "count = 4;"
    },
    {
        "line": 82,
        "fullcodeline": "extra = 2;"
    },
    {
        "line": 83,
        "fullcodeline": "zgfx_GetBits(zgfx, 1);"
    },
    {
        "line": 92,
        "fullcodeline": "zgfx_GetBits(zgfx, extra);"
    },
    {
        "line": 93,
        "fullcodeline": "count += zgfx->bits;"
    },
    {
        "line": 85,
        "fullcodeline": "while (zgfx->bits == 1)"
    },
    {
        "line": 87,
        "fullcodeline": "count *= 2;"
    },
    {
        "line": 88,
        "fullcodeline": "extra++;"
    },
    {
        "line": 89,
        "fullcodeline": "zgfx_GetBits(zgfx, 1);"
    }
]