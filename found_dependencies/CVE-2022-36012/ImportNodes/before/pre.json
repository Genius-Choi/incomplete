[
    {
        "line": 3,
        "fullcodeline": "Location unknown_loc = builder.getUnknownLoc();"
    },
    {
        "line": 4,
        "fullcodeline": "MLIRContext* context = builder.getContext();"
    },
    {
        "line": 6,
        "fullcodeline": "Type placeholder_ty = OpaqueTensorType::get(context);"
    },
    {
        "line": 7,
        "fullcodeline": "Type control_ty = ControlType::get(context);"
    },
    {
        "line": 8,
        "fullcodeline": "TFGraphDialect* tfgDialect ="
    },
    {
        "line": 10,
        "fullcodeline": "StringAttr device_attr = tfgDialect->getDeviceAttrIdentifier();"
    },
    {
        "line": 11,
        "fullcodeline": "StringAttr name_attr = tfgDialect->getNameAttrIdentifier();"
    },
    {
        "line": 12,
        "fullcodeline": "StringAttr fulltype_attr = tfgDialect->getFullTypeAttrIdentifier();"
    },
    {
        "line": 9,
        "fullcodeline": "cast<TFGraphDialect>(context->getLoadedDialect(\"tfg\"));"
    },
    {
        "line": 63,
        "fullcodeline": "return Status::OK();"
    },
    {
        "line": 15,
        "fullcodeline": "DVLOG(1) << \"Processing node \" << node.name() << \"\\n\";"
    },
    {
        "line": 17,
        "fullcodeline": "OperationState state(unknown_loc, absl::StrCat(\"tfg.\", node.op()));"
    },
    {
        "line": 24,
        "fullcodeline": "state.types.push_back(placeholder_ty);"
    },
    {
        "line": 25,
        "fullcodeline": "state.types.push_back(control_ty);"
    },
    {
        "line": 45,
        "fullcodeline": "Operation* op = builder.create(state);"
    },
    {
        "line": 47,
        "fullcodeline": "StringRef node_name = node.name();"
    },
    {
        "line": 53,
        "fullcodeline": "TF_RETURN_IF_ERROR(value_manager.DefineOperation(op, node_name));"
    },
    {
        "line": 16,
        "fullcodeline": "if (node.op().empty()) return InvalidArgument(\"empty op type\");"
    },
    {
        "line": 20,
        "fullcodeline": "state.operands.push_back("
    },
    {
        "line": 34,
        "fullcodeline": "if (!node.device().empty())"
    },
    {
        "line": 36,
        "fullcodeline": "if (!node.name().empty())"
    },
    {
        "line": 38,
        "fullcodeline": "if (node.has_experimental_type()) {"
    },
    {
        "line": 49,
        "fullcodeline": "size_t colon_sep = node_name.find_first_of(':');"
    },
    {
        "line": 21,
        "fullcodeline": "value_manager.GetValueOrCreatePlaceholder(input));"
    },
    {
        "line": 28,
        "fullcodeline": "const std::string& name = namedAttr.first;"
    },
    {
        "line": 29,
        "fullcodeline": "const AttrValue& tf_attr = namedAttr.second;"
    },
    {
        "line": 32,
        "fullcodeline": "state.addAttribute(name, attr);"
    },
    {
        "line": 35,
        "fullcodeline": "state.addAttribute(device_attr, StringAttr::get(context, node.device()));"
    },
    {
        "line": 37,
        "fullcodeline": "state.addAttribute(name_attr, StringAttr::get(context, node.name()));"
    },
    {
        "line": 42,
        "fullcodeline": "state.addAttribute(fulltype_attr, type);"
    },
    {
        "line": 50,
        "fullcodeline": "if (colon_sep != StringRef::npos)"
    },
    {
        "line": 57,
        "fullcodeline": "if (op.getName().getStringRef() == \"tfg.__mlir_placeholder\") {"
    },
    {
        "line": 51,
        "fullcodeline": "node_name = node_name.take_front(colon_sep);"
    },
    {
        "line": 58,
        "fullcodeline": "return InvalidArgument(absl::StrCat("
    },
    {
        "line": 60,
        "fullcodeline": "op.getAttrOfType<StringAttr>(name_attr).getValue().str()));"
    }
]