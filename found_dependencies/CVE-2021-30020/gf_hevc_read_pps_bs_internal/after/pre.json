[
    {
        "line": 8,
        "fullcodeline": "pps_id = gf_bs_read_ue_log(bs, \"pps_id\");"
    },
    {
        "line": 14,
        "fullcodeline": "pps = &hevc->pps[pps_id];"
    },
    {
        "line": 20,
        "fullcodeline": "pps->sps_id = gf_bs_read_ue_log(bs, \"sps_id\");"
    },
    {
        "line": 10,
        "fullcodeline": "if ((pps_id < 0) || (pps_id >= 64)) {"
    },
    {
        "line": 27,
        "fullcodeline": "pps->dependent_slice_segments_enabled_flag = gf_bs_read_int_log(bs, 1, \"dependent_slice_segments_enabled_flag\");"
    },
    {
        "line": 29,
        "fullcodeline": "pps->output_flag_present_flag = gf_bs_read_int_log(bs, 1, \"output_flag_present_flag\");"
    },
    {
        "line": 30,
        "fullcodeline": "pps->num_extra_slice_header_bits = gf_bs_read_int_log(bs, 3, \"num_extra_slice_header_bits\");"
    },
    {
        "line": 31,
        "fullcodeline": "pps->sign_data_hiding_flag = gf_bs_read_int_log(bs, 1, \"sign_data_hiding_flag\");"
    },
    {
        "line": 32,
        "fullcodeline": "pps->cabac_init_present_flag = gf_bs_read_int_log(bs, 1, \"cabac_init_present_flag\");"
    },
    {
        "line": 35,
        "fullcodeline": "pps->pic_init_qp_minus26 = gf_bs_read_se_log(bs, \"pic_init_qp_minus26\");"
    },
    {
        "line": 36,
        "fullcodeline": "pps->constrained_intra_pred_flag = gf_bs_read_int_log(bs, 1, \"constrained_intra_pred_flag\");"
    },
    {
        "line": 37,
        "fullcodeline": "pps->transform_skip_enabled_flag = gf_bs_read_int_log(bs, 1, \"transform_skip_enabled_flag\");"
    },
    {
        "line": 41,
        "fullcodeline": "pps->pic_cb_qp_offset = gf_bs_read_se_log(bs, \"pic_cb_qp_offset\");"
    },
    {
        "line": 42,
        "fullcodeline": "pps->pic_cr_qp_offset = gf_bs_read_se_log(bs, \"pic_cr_qp_offset\");"
    },
    {
        "line": 43,
        "fullcodeline": "pps->slice_chroma_qp_offsets_present_flag = gf_bs_read_int_log(bs, 1, \"slice_chroma_qp_offsets_present_flag\");"
    },
    {
        "line": 44,
        "fullcodeline": "pps->weighted_pred_flag = gf_bs_read_int_log(bs, 1, \"weighted_pred_flag\");"
    },
    {
        "line": 45,
        "fullcodeline": "pps->weighted_bipred_flag = gf_bs_read_int_log(bs, 1, \"weighted_bipred_flag\");"
    },
    {
        "line": 46,
        "fullcodeline": "pps->transquant_bypass_enable_flag = gf_bs_read_int_log(bs, 1, \"transquant_bypass_enable_flag\");"
    },
    {
        "line": 47,
        "fullcodeline": "pps->tiles_enabled_flag = gf_bs_read_int_log(bs, 1, \"tiles_enabled_flag\");"
    },
    {
        "line": 48,
        "fullcodeline": "pps->entropy_coding_sync_enabled_flag = gf_bs_read_int_log(bs, 1, \"entropy_coding_sync_enabled_flag\");"
    },
    {
        "line": 63,
        "fullcodeline": "pps->loop_filter_across_slices_enabled_flag = gf_bs_read_int_log(bs, 1, \"loop_filter_across_slices_enabled_flag\");"
    },
    {
        "line": 74,
        "fullcodeline": "pps->lists_modification_present_flag = gf_bs_read_int_log(bs, 1, \"lists_modification_present_flag\");"
    },
    {
        "line": 75,
        "fullcodeline": "pps->log2_parallel_merge_level_minus2 = gf_bs_read_ue_log(bs, \"log2_parallel_merge_level_minus2\");"
    },
    {
        "line": 76,
        "fullcodeline": "pps->slice_segment_header_extension_present_flag = gf_bs_read_int_log(bs, 1, \"slice_segment_header_extension_present_flag\");"
    },
    {
        "line": 11,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_CODING, (\"[HEVC] wrong PPS ID %d in PPS\\n\", pps_id));"
    },
    {
        "line": 21,
        "fullcodeline": "if ((pps->sps_id<0) || (pps->sps_id >= 16)) {"
    },
    {
        "line": 33,
        "fullcodeline": "pps->num_ref_idx_l0_default_active = 1 + gf_bs_read_ue_log(bs, \"num_ref_idx_l0_default_active\");"
    },
    {
        "line": 34,
        "fullcodeline": "pps->num_ref_idx_l1_default_active = 1 + gf_bs_read_ue_log(bs, \"num_ref_idx_l1_default_active\");"
    },
    {
        "line": 38,
        "fullcodeline": "if ((pps->cu_qp_delta_enabled_flag = gf_bs_read_int_log(bs, 1, \"cu_qp_delta_enabled_flag\")))"
    },
    {
        "line": 50,
        "fullcodeline": "pps->num_tile_columns = 1 + gf_bs_read_ue_log(bs, \"num_tile_columns_minus1\");"
    },
    {
        "line": 51,
        "fullcodeline": "pps->num_tile_rows = 1 + gf_bs_read_ue_log(bs, \"num_tile_rows_minus1\");"
    },
    {
        "line": 52,
        "fullcodeline": "pps->uniform_spacing_flag = gf_bs_read_int_log(bs, 1, \"uniform_spacing_flag\");"
    },
    {
        "line": 64,
        "fullcodeline": "if ((pps->deblocking_filter_control_present_flag = gf_bs_read_int_log(bs, 1, \"deblocking_filter_control_present_flag\"))) {"
    },
    {
        "line": 71,
        "fullcodeline": "if ((pps->pic_scaling_list_data_present_flag = gf_bs_read_int_log(bs, 1, \"pic_scaling_list_data_present_flag\"))) {"
    },
    {
        "line": 72,
        "fullcodeline": "hevc_scaling_list_data(bs);"
    },
    {
        "line": 12,
        "fullcodeline": "return -1;"
    },
    {
        "line": 22,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_CODING, (\"[HEVC] wrong SPS ID %d in PPS\\n\", pps->sps_id));"
    },
    {
        "line": 24,
        "fullcodeline": "return -1;"
    },
    {
        "line": 39,
        "fullcodeline": "pps->diff_cu_qp_delta_depth = gf_bs_read_ue_log(bs, \"diff_cu_qp_delta_depth\");"
    },
    {
        "line": 61,
        "fullcodeline": "pps->loop_filter_across_tiles_enabled_flag = gf_bs_read_int_log(bs, 1, \"loop_filter_across_tiles_enabled_flag\");"
    },
    {
        "line": 65,
        "fullcodeline": "pps->deblocking_filter_override_enabled_flag = gf_bs_read_int_log(bs, 1, \"deblocking_filter_override_enabled_flag\");"
    },
    {
        "line": 66,
        "fullcodeline": "if (! (pps->pic_disable_deblocking_filter_flag = gf_bs_read_int_log(bs, 1, \"pic_disable_deblocking_filter_flag\"))) {"
    },
    {
        "line": 54,
        "fullcodeline": "for (i = 0; i < pps->num_tile_columns - 1; i++) {"
    },
    {
        "line": 57,
        "fullcodeline": "for (i = 0; i < pps->num_tile_rows - 1; i++) {"
    },
    {
        "line": 67,
        "fullcodeline": "pps->beta_offset_div2 = gf_bs_read_se_log(bs, \"beta_offset_div2\");"
    },
    {
        "line": 68,
        "fullcodeline": "pps->tc_offset_div2 = gf_bs_read_se_log(bs, \"tc_offset_div2\");"
    },
    {
        "line": 55,
        "fullcodeline": "pps->column_width[i] = 1 + gf_bs_read_ue_log_idx(bs, \"column_width_minus1\", i);"
    },
    {
        "line": 58,
        "fullcodeline": "pps->row_height[i] = 1 + gf_bs_read_ue_log_idx(bs, \"row_height_minus1\", i);"
    }
]