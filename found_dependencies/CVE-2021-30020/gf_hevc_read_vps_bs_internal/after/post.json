[
    {
        "line": 7,
        "fullcodeline": "u8 layer_id_included_flag[MAX_LHVC_LAYERS][64];"
    },
    {
        "line": 10,
        "fullcodeline": "vps_id = gf_bs_read_int_log(bs, 4, \"vps_id\");"
    },
    {
        "line": 15,
        "fullcodeline": "vps->bit_pos_vps_extensions = -1;"
    },
    {
        "line": 21,
        "fullcodeline": "vps->base_layer_internal_flag = gf_bs_read_int_log(bs, 1, \"base_layer_internal_flag\");"
    },
    {
        "line": 22,
        "fullcodeline": "vps->base_layer_available_flag = gf_bs_read_int_log(bs, 1, \"base_layer_available_flag\");"
    },
    {
        "line": 23,
        "fullcodeline": "vps->max_layers = 1 + gf_bs_read_int_log(bs, 6, \"max_layers_minus1\");"
    },
    {
        "line": 28,
        "fullcodeline": "vps->max_sub_layers = gf_bs_read_int_log(bs, 3, \"max_sub_layers_minus1\") + 1;"
    },
    {
        "line": 29,
        "fullcodeline": "vps->temporal_id_nesting = gf_bs_read_int_log(bs, 1, \"temporal_id_nesting\");"
    },
    {
        "line": 30,
        "fullcodeline": "gf_bs_read_int_log(bs, 16, \"vps_reserved_ffff_16bits\");"
    },
    {
        "line": 31,
        "fullcodeline": "hevc_profile_tier_level(bs, 1, vps->max_sub_layers - 1, &vps->ptl, 0);"
    },
    {
        "line": 33,
        "fullcodeline": "vps_sub_layer_ordering_info_present_flag = gf_bs_read_int_log(bs, 1, \"vps_sub_layer_ordering_info_present_flag\");"
    },
    {
        "line": 39,
        "fullcodeline": "vps->max_layer_id = gf_bs_read_int_log(bs, 6, \"max_layer_id\");"
    },
    {
        "line": 44,
        "fullcodeline": "vps->num_layer_sets = gf_bs_read_ue_log(bs, \"num_layer_sets_minus1\") + 1;"
    },
    {
        "line": 54,
        "fullcodeline": "vps->num_layers_in_id_list[0] = 1;"
    },
    {
        "line": 87,
        "fullcodeline": "vps_extension_flag = gf_bs_read_int_log(bs, 1, \"vps_extension_flag\");"
    },
    {
        "line": 12,
        "fullcodeline": "if ((vps_id<0) || (vps_id >= 16)) return -1;"
    },
    {
        "line": 16,
        "fullcodeline": "if (!vps->state) {"
    },
    {
        "line": 24,
        "fullcodeline": "if (vps->max_layers > MAX_LHVC_LAYERS) {"
    },
    {
        "line": 34,
        "fullcodeline": "for (i = (vps_sub_layer_ordering_info_present_flag ? 0 : vps->max_sub_layers - 1); i < vps->max_sub_layers; i++) {"
    },
    {
        "line": 40,
        "fullcodeline": "if (vps->max_layer_id > MAX_LHVC_LAYERS) {"
    },
    {
        "line": 45,
        "fullcodeline": "if (vps->num_layer_sets > MAX_LHVC_LAYERS) {"
    },
    {
        "line": 49,
        "fullcodeline": "for (i = 1; i < vps->num_layer_sets; i++) {"
    },
    {
        "line": 55,
        "fullcodeline": "for (i = 1; i < vps->num_layer_sets; i++) {"
    },
    {
        "line": 67,
        "fullcodeline": "if (gf_bs_read_int_log(bs, 1, \"vps_timing_info_present_flag\")) {"
    },
    {
        "line": 17,
        "fullcodeline": "vps->id = vps_id;"
    },
    {
        "line": 18,
        "fullcodeline": "vps->state = 1;"
    },
    {
        "line": 25,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_CODING, (\"[HEVC] sorry, %d layers in VPS but only %d supported\\n\", vps->max_layers, MAX_LHVC_LAYERS));"
    },
    {
        "line": 35,
        "fullcodeline": "gf_bs_read_ue_log_idx(bs, \"vps_max_dec_pic_buffering_minus1\", i);"
    },
    {
        "line": 36,
        "fullcodeline": "gf_bs_read_ue_log_idx(bs, \"vps_max_num_reorder_pics\", i);"
    },
    {
        "line": 37,
        "fullcodeline": "gf_bs_read_ue_log_idx(bs, \"vps_max_latency_increase_plus1\", i);"
    },
    {
        "line": 41,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_CODING, (\"[HEVC] VPS max layer ID %u but GPAC only supports %u\\n\", vps->max_layer_id, MAX_LHVC_LAYERS));"
    },
    {
        "line": 46,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_CODING, (\"[HEVC] Wrong number of layer sets in VPS %d\\n\", vps->num_layer_sets));"
    },
    {
        "line": 57,
        "fullcodeline": "n = 0;"
    },
    {
        "line": 65,
        "fullcodeline": "vps->num_layers_in_id_list[i] = n;"
    },
    {
        "line": 69,
        "fullcodeline": "gf_bs_read_int_log(bs, 32, \"vps_num_units_in_tick\");"
    },
    {
        "line": 70,
        "fullcodeline": "gf_bs_read_int_log(bs, 32, \"vps_time_scale\");"
    },
    {
        "line": 74,
        "fullcodeline": "vps_num_hrd_parameters = gf_bs_read_ue_log(bs, \"vps_num_hrd_parameters\");"
    },
    {
        "line": 90,
        "fullcodeline": "gf_bs_align(bs);"
    },
    {
        "line": 91,
        "fullcodeline": "res = hevc_parse_vps_extension(vps, bs);"
    },
    {
        "line": 26,
        "fullcodeline": "return -1;"
    },
    {
        "line": 42,
        "fullcodeline": "return -1;"
    },
    {
        "line": 47,
        "fullcodeline": "return -1;"
    },
    {
        "line": 50,
        "fullcodeline": "for (j = 0; j <= vps->max_layer_id; j++) {"
    },
    {
        "line": 58,
        "fullcodeline": "for (m = 0; m <= vps->max_layer_id; m++) {"
    },
    {
        "line": 71,
        "fullcodeline": "if (gf_bs_read_int_log(bs, 1, \"vps_poc_proportional_to_timing_flag\")) {"
    },
    {
        "line": 75,
        "fullcodeline": "for (i = 0; i < vps_num_hrd_parameters; i++) {"
    },
    {
        "line": 92,
        "fullcodeline": "if (res != GF_TRUE) {"
    },
    {
        "line": 96,
        "fullcodeline": "if (gf_bs_read_int_log(bs, 1, \"vps_extension2_flag\")) {"
    },
    {
        "line": 51,
        "fullcodeline": "layer_id_included_flag[i][j] = gf_bs_read_int_log_idx2(bs, 1, \"layer_id_included_flag\", i, j);"
    },
    {
        "line": 72,
        "fullcodeline": "gf_bs_read_ue_log(bs, \"vps_num_ticks_poc_diff_one_minus1\");"
    },
    {
        "line": 76,
        "fullcodeline": "Bool cprms_present_flag = GF_TRUE;"
    },
    {
        "line": 77,
        "fullcodeline": "gf_bs_read_ue_log_idx(bs, \"hrd_layer_set_idx\", i);"
    },
    {
        "line": 80,
        "fullcodeline": "hevc_parse_hrd_parameters(bs, cprms_present_flag, vps->max_sub_layers - 1, i);"
    },
    {
        "line": 93,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_CODING, (\"[HEVC] Failed to parse VPS extensions\\n\"));"
    },
    {
        "line": 78,
        "fullcodeline": "if (i > 0)"
    },
    {
        "line": 94,
        "fullcodeline": "return -1;"
    },
    {
        "line": 60,
        "fullcodeline": "vps->LayerSetLayerIdList[i][n++] = m;"
    },
    {
        "line": 79,
        "fullcodeline": "cprms_present_flag = gf_bs_read_int_log(bs, 1, \"cprms_present_flag\");"
    },
    {
        "line": 61,
        "fullcodeline": "if (vps->LayerSetLayerIdListMax[i] < m)"
    },
    {
        "line": 62,
        "fullcodeline": "vps->LayerSetLayerIdListMax[i] = m;"
    }
]