[
    {
        "line": 2,
        "fullcodeline": "DataBuf streamTypedBuf(GUID);"
    },
    {
        "line": 3,
        "fullcodeline": "io_->readOrThrow(streamTypedBuf.data(), streamTypedBuf.size(), Exiv2::ErrorCode::kerCorruptedMetadata);"
    },
    {
        "line": 6,
        "fullcodeline": "auto stream = static_cast<streamTypeInfo>(0);"
    },
    {
        "line": 8,
        "fullcodeline": "auto tag_stream_type = GUIDReferenceTags.find(GUIDTag(streamTypedBuf.data()));"
    },
    {
        "line": 9,
        "fullcodeline": "if (tag_stream_type != GUIDReferenceTags.end()) {"
    },
    {
        "line": 15,
        "fullcodeline": "io_->seek(io_->tell() + GUID, BasicIo::beg);  // ignore Error Correction Type"
    },
    {
        "line": 17,
        "fullcodeline": "uint64_t time_offset = readQWORDTag(io_);"
    },
    {
        "line": 23,
        "fullcodeline": "auto specific_data_length = readDWORDTag(io_);"
    },
    {
        "line": 24,
        "fullcodeline": "auto correction_data_length = readDWORDTag(io_);"
    },
    {
        "line": 26,
        "fullcodeline": "io_->seek(io_->tell() + WORD /*Flags*/ + DWORD /*Reserved*/ + specific_data_length + correction_data_length,"
    },
    {
        "line": 10,
        "fullcodeline": "if (tag_stream_type->second == \"Audio_Media\")"
    },
    {
        "line": 18,
        "fullcodeline": "if (stream == streamTypeInfo::Video)"
    },
    {
        "line": 11,
        "fullcodeline": "stream = streamTypeInfo::Audio;"
    },
    {
        "line": 19,
        "fullcodeline": "xmpData()[\"Xmp.video.TimeOffset\"] = time_offset;"
    },
    {
        "line": 12,
        "fullcodeline": "else if (tag_stream_type->second == \"Video_Media\")"
    },
    {
        "line": 20,
        "fullcodeline": "else if (stream == streamTypeInfo::Audio)"
    },
    {
        "line": 13,
        "fullcodeline": "stream = streamTypeInfo::Video;"
    },
    {
        "line": 21,
        "fullcodeline": "xmpData()[\"Xmp.audio.TimeOffset\"] = time_offset;"
    }
]