[
    {
        "line": 6,
        "fullcodeline": "uint8_t *start = pkt;"
    },
    {
        "line": 3,
        "fullcodeline": "if (!g_teredo_enabled)"
    },
    {
        "line": 9,
        "fullcodeline": "if (len < IPV6_HEADER_LEN)"
    },
    {
        "line": 15,
        "fullcodeline": "if (start[0] == 0x0) {"
    },
    {
        "line": 47,
        "fullcodeline": "if (IP_GET_RAW_VER(start) == 6) {"
    },
    {
        "line": 48,
        "fullcodeline": "IPV6Hdr *thdr = (IPV6Hdr *)start;"
    },
    {
        "line": 58,
        "fullcodeline": "if (len ==  IPV6_HEADER_LEN +"
    },
    {
        "line": 51,
        "fullcodeline": "if (IPV6_GET_RAW_HLIM(thdr) == 0)"
    },
    {
        "line": 55,
        "fullcodeline": "if (IPV6_GET_RAW_NH(thdr) == 0 && IPV6_GET_RAW_PLEN(thdr) < 8)"
    },
    {
        "line": 20,
        "fullcodeline": "if (len >= TEREDO_ORIG_INDICATION_LENGTH + IPV6_HEADER_LEN)"
    },
    {
        "line": 59,
        "fullcodeline": "IPV6_GET_RAW_PLEN(thdr) + (start - pkt)) {"
    },
    {
        "line": 60,
        "fullcodeline": "if (pq != NULL) {"
    },
    {
        "line": 21,
        "fullcodeline": "start += TEREDO_ORIG_INDICATION_LENGTH;"
    },
    {
        "line": 61,
        "fullcodeline": "int blen = len - (start - pkt);"
    },
    {
        "line": 63,
        "fullcodeline": "Packet *tp = PacketTunnelPktSetup(tv, dtv, p, start, blen,"
    },
    {
        "line": 65,
        "fullcodeline": "if (tp != NULL) {"
    },
    {
        "line": 66,
        "fullcodeline": "PKT_SET_SRC(tp, PKT_SRC_DECODER_TEREDO);"
    }
]