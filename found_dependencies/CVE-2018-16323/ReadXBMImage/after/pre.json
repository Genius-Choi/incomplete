[
    {
        "line": 4,
        "fullcodeline": "buffer[MagickPathExtent],"
    },
    {
        "line": 5,
        "fullcodeline": "name[MagickPathExtent];"
    },
    {
        "line": 27,
        "fullcodeline": "hex_digits[256];"
    },
    {
        "line": 48,
        "fullcodeline": "assert(image_info != (const ImageInfo *) NULL);"
    },
    {
        "line": 49,
        "fullcodeline": "assert(image_info->signature == MagickCoreSignature);"
    },
    {
        "line": 53,
        "fullcodeline": "assert(exception != (ExceptionInfo *) NULL);"
    },
    {
        "line": 54,
        "fullcodeline": "assert(exception->signature == MagickCoreSignature);"
    },
    {
        "line": 55,
        "fullcodeline": "image=AcquireImage(image_info,exception);"
    },
    {
        "line": 56,
        "fullcodeline": "status=OpenBlob(image_info,image,ReadBinaryBlobMode,exception);"
    },
    {
        "line": 65,
        "fullcodeline": "width=0;"
    },
    {
        "line": 66,
        "fullcodeline": "height=0;"
    },
    {
        "line": 67,
        "fullcodeline": "*name='\\0';"
    },
    {
        "line": 78,
        "fullcodeline": "image->columns=width;"
    },
    {
        "line": 79,
        "fullcodeline": "image->rows=height;"
    },
    {
        "line": 80,
        "fullcodeline": "image->depth=8;"
    },
    {
        "line": 81,
        "fullcodeline": "image->storage_class=PseudoClass;"
    },
    {
        "line": 82,
        "fullcodeline": "image->colors=2;"
    },
    {
        "line": 86,
        "fullcodeline": "version=11;"
    },
    {
        "line": 129,
        "fullcodeline": "status=SetImageExtent(image,image->columns,image->rows,exception);"
    },
    {
        "line": 137,
        "fullcodeline": "hex_digits[(int) '0']=0;"
    },
    {
        "line": 138,
        "fullcodeline": "hex_digits[(int) '1']=1;"
    },
    {
        "line": 139,
        "fullcodeline": "hex_digits[(int) '2']=2;"
    },
    {
        "line": 140,
        "fullcodeline": "hex_digits[(int) '3']=3;"
    },
    {
        "line": 141,
        "fullcodeline": "hex_digits[(int) '4']=4;"
    },
    {
        "line": 142,
        "fullcodeline": "hex_digits[(int) '5']=5;"
    },
    {
        "line": 143,
        "fullcodeline": "hex_digits[(int) '6']=6;"
    },
    {
        "line": 144,
        "fullcodeline": "hex_digits[(int) '7']=7;"
    },
    {
        "line": 145,
        "fullcodeline": "hex_digits[(int) '8']=8;"
    },
    {
        "line": 146,
        "fullcodeline": "hex_digits[(int) '9']=9;"
    },
    {
        "line": 147,
        "fullcodeline": "hex_digits[(int) 'A']=10;"
    },
    {
        "line": 148,
        "fullcodeline": "hex_digits[(int) 'B']=11;"
    },
    {
        "line": 149,
        "fullcodeline": "hex_digits[(int) 'C']=12;"
    },
    {
        "line": 150,
        "fullcodeline": "hex_digits[(int) 'D']=13;"
    },
    {
        "line": 151,
        "fullcodeline": "hex_digits[(int) 'E']=14;"
    },
    {
        "line": 152,
        "fullcodeline": "hex_digits[(int) 'F']=15;"
    },
    {
        "line": 153,
        "fullcodeline": "hex_digits[(int) 'a']=10;"
    },
    {
        "line": 154,
        "fullcodeline": "hex_digits[(int) 'b']=11;"
    },
    {
        "line": 155,
        "fullcodeline": "hex_digits[(int) 'c']=12;"
    },
    {
        "line": 156,
        "fullcodeline": "hex_digits[(int) 'd']=13;"
    },
    {
        "line": 157,
        "fullcodeline": "hex_digits[(int) 'e']=14;"
    },
    {
        "line": 158,
        "fullcodeline": "hex_digits[(int) 'f']=15;"
    },
    {
        "line": 159,
        "fullcodeline": "hex_digits[(int) 'x']=0;"
    },
    {
        "line": 160,
        "fullcodeline": "hex_digits[(int) ' ']=(-1);"
    },
    {
        "line": 161,
        "fullcodeline": "hex_digits[(int) ',']=(-1);"
    },
    {
        "line": 162,
        "fullcodeline": "hex_digits[(int) '}']=(-1);"
    },
    {
        "line": 163,
        "fullcodeline": "hex_digits[(int) '\\n']=(-1);"
    },
    {
        "line": 164,
        "fullcodeline": "hex_digits[(int) '\\t']=(-1);"
    },
    {
        "line": 168,
        "fullcodeline": "padding=0;"
    },
    {
        "line": 172,
        "fullcodeline": "bytes_per_line=(unsigned int) (image->columns+7)/8+padding;"
    },
    {
        "line": 173,
        "fullcodeline": "length=(unsigned int) image->rows;"
    },
    {
        "line": 174,
        "fullcodeline": "data=(unsigned char *) AcquireQuantumMemory(length,bytes_per_line*"
    },
    {
        "line": 178,
        "fullcodeline": "p=data;"
    },
    {
        "line": 211,
        "fullcodeline": "p=data;"
    },
    {
        "line": 50,
        "fullcodeline": "if (image_info->debug != MagickFalse)"
    },
    {
        "line": 57,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 113,
        "fullcodeline": "if (AcquireImageColormap(image,image->colors,exception) == MagickFalse)"
    },
    {
        "line": 124,
        "fullcodeline": "if (image_info->ping != MagickFalse)"
    },
    {
        "line": 130,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 135,
        "fullcodeline": "for (i=0; i < (ssize_t) (sizeof(hex_digits)/sizeof(*hex_digits)); i++)"
    },
    {
        "line": 136,
        "fullcodeline": "hex_digits[i]=(-1);"
    },
    {
        "line": 176,
        "fullcodeline": "if (data == (unsigned char *) NULL)"
    },
    {
        "line": 203,
        "fullcodeline": "if (EOFBlob(image) != MagickFalse)"
    },
    {
        "line": 212,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 238,
        "fullcodeline": "(void) SyncImage(image,exception);"
    },
    {
        "line": 239,
        "fullcodeline": "(void) CloseBlob(image);"
    },
    {
        "line": 240,
        "fullcodeline": "return(GetFirstImageInList(image));"
    },
    {
        "line": 51,
        "fullcodeline": "(void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\","
    },
    {
        "line": 59,
        "fullcodeline": "image=DestroyImageList(image);"
    },
    {
        "line": 68,
        "fullcodeline": "while (ReadBlobString(image,buffer) != (char *) NULL)"
    },
    {
        "line": 73,
        "fullcodeline": "while (ReadBlobString(image,buffer) != (char *) NULL)"
    },
    {
        "line": 87,
        "fullcodeline": "while (ReadBlobString(image,buffer) != (char *) NULL)"
    },
    {
        "line": 99,
        "fullcodeline": "p=(unsigned char *) strrchr(name,'_');"
    },
    {
        "line": 107,
        "fullcodeline": "if ((image->columns == 0) || (image->rows == 0) ||"
    },
    {
        "line": 108,
        "fullcodeline": "(EOFBlob(image) != MagickFalse))"
    },
    {
        "line": 109,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 114,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 169,
        "fullcodeline": "if (((image->columns % 16) != 0) && ((image->columns % 16) < 9) &&"
    },
    {
        "line": 170,
        "fullcodeline": "(version == 10))"
    },
    {
        "line": 171,
        "fullcodeline": "padding=1;"
    },
    {
        "line": 205,
        "fullcodeline": "data=(unsigned char *) RelinquishMagickMemory(data);"
    },
    {
        "line": 214,
        "fullcodeline": "q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 217,
        "fullcodeline": "bit=0;"
    },
    {
        "line": 218,
        "fullcodeline": "byte=0;"
    },
    {
        "line": 232,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 237,
        "fullcodeline": "data=(unsigned char *) RelinquishMagickMemory(data);"
    },
    {
        "line": 60,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 69,
        "fullcodeline": "if (sscanf(buffer,\"#define %1024s %u\",name,&width) == 2)"
    },
    {
        "line": 74,
        "fullcodeline": "if (sscanf(buffer,\"#define %1024s %u\",name,&height) == 2)"
    },
    {
        "line": 100,
        "fullcodeline": "if (p == (unsigned char *) NULL)"
    },
    {
        "line": 126,
        "fullcodeline": "(void) CloseBlob(image);"
    },
    {
        "line": 127,
        "fullcodeline": "return(GetFirstImageInList(image));"
    },
    {
        "line": 131,
        "fullcodeline": "return(DestroyImageList(image));"
    },
    {
        "line": 180,
        "fullcodeline": "for (i=0; i < (ssize_t) (bytes_per_line*image->rows); (i+=2))"
    },
    {
        "line": 215,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 219,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 230,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 234,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 89,
        "fullcodeline": "if (sscanf(buffer,\"static short %1024s = {\",name) == 1)"
    },
    {
        "line": 90,
        "fullcodeline": "version=10;"
    },
    {
        "line": 101,
        "fullcodeline": "p=(unsigned char *) name;"
    },
    {
        "line": 104,
        "fullcodeline": "if (LocaleCompare(\"bits[]\",(char *) p) == 0)"
    },
    {
        "line": 182,
        "fullcodeline": "c=XBMInteger(image,hex_digits);"
    },
    {
        "line": 193,
        "fullcodeline": "for (i=0; i < (ssize_t) (bytes_per_line*image->rows); i++)"
    },
    {
        "line": 223,
        "fullcodeline": "SetPixelIndex(image,(Quantum) ((byte & 0x01) != 0 ? 0x01 : 0x00),q);"
    },
    {
        "line": 224,
        "fullcodeline": "bit++;"
    },
    {
        "line": 225,
        "fullcodeline": "byte>>=1;"
    },
    {
        "line": 228,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 70,
        "fullcodeline": "if ((strlen(name) >= 6) &&"
    },
    {
        "line": 71,
        "fullcodeline": "(LocaleCompare(name+strlen(name)-6,\"_width\") == 0))"
    },
    {
        "line": 75,
        "fullcodeline": "if ((strlen(name) >= 7) &&"
    },
    {
        "line": 76,
        "fullcodeline": "(LocaleCompare(name+strlen(name)-7,\"_height\") == 0))"
    },
    {
        "line": 103,
        "fullcodeline": "p++;"
    },
    {
        "line": 183,
        "fullcodeline": "if (c < 0)"
    },
    {
        "line": 195,
        "fullcodeline": "c=XBMInteger(image,hex_digits);"
    },
    {
        "line": 221,
        "fullcodeline": "if (bit == 0)"
    },
    {
        "line": 226,
        "fullcodeline": "if (bit == 8)"
    },
    {
        "line": 185,
        "fullcodeline": "data=(unsigned char *) RelinquishMagickMemory(data);"
    },
    {
        "line": 186,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 188,
        "fullcodeline": "*p++=(unsigned char) c;"
    },
    {
        "line": 189,
        "fullcodeline": "if ((padding == 0) || (((i+2) % bytes_per_line) != 0))"
    },
    {
        "line": 196,
        "fullcodeline": "if (c < 0)"
    },
    {
        "line": 222,
        "fullcodeline": "byte=(unsigned int) (*p++);"
    },
    {
        "line": 227,
        "fullcodeline": "bit=0;"
    },
    {
        "line": 92,
        "fullcodeline": "if (sscanf(buffer,\"static unsigned char %1024s = {\",name) == 1)"
    },
    {
        "line": 93,
        "fullcodeline": "version=11;"
    },
    {
        "line": 198,
        "fullcodeline": "data=(unsigned char *) RelinquishMagickMemory(data);"
    },
    {
        "line": 199,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 190,
        "fullcodeline": "*p++=(unsigned char) (c >> 8);"
    },
    {
        "line": 95,
        "fullcodeline": "if (sscanf(buffer,\"static char %1024s = {\",name) == 1)"
    },
    {
        "line": 96,
        "fullcodeline": "version=11;"
    }
]