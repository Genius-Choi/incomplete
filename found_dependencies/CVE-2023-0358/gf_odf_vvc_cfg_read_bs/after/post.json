[
    {
        "line": 4,
        "fullcodeline": "GF_VVCConfig *cfg = gf_odf_vvc_cfg_new();"
    },
    {
        "line": 6,
        "fullcodeline": "gf_bs_read_int(bs, 5);"
    },
    {
        "line": 7,
        "fullcodeline": "cfg->nal_unit_size = 1 + gf_bs_read_int(bs, 2);"
    },
    {
        "line": 8,
        "fullcodeline": "cfg->ptl_present = gf_bs_read_int(bs, 1);"
    },
    {
        "line": 77,
        "fullcodeline": "count = gf_bs_read_int(bs, 8);"
    },
    {
        "line": 78,
        "fullcodeline": "for (i=0; i<count; i++) {"
    },
    {
        "line": 13,
        "fullcodeline": "cfg->ols_idx = gf_bs_read_int(bs, 9);"
    },
    {
        "line": 14,
        "fullcodeline": "cfg->numTemporalLayers = gf_bs_read_int(bs, 3);"
    },
    {
        "line": 15,
        "fullcodeline": "cfg->constantFrameRate = gf_bs_read_int(bs, 2);"
    },
    {
        "line": 16,
        "fullcodeline": "cfg->chroma_format = gf_bs_read_int(bs, 2);"
    },
    {
        "line": 17,
        "fullcodeline": "cfg->bit_depth = 8 + gf_bs_read_int(bs, 3);"
    },
    {
        "line": 18,
        "fullcodeline": "gf_bs_read_int(bs, 5);"
    },
    {
        "line": 21,
        "fullcodeline": "gf_bs_read_int(bs, 2);"
    },
    {
        "line": 22,
        "fullcodeline": "cfg->num_constraint_info = gf_bs_read_int(bs, 6);"
    },
    {
        "line": 23,
        "fullcodeline": "cfg->general_profile_idc = gf_bs_read_int(bs, 7);"
    },
    {
        "line": 24,
        "fullcodeline": "cfg->general_tier_flag = gf_bs_read_int(bs, 1);"
    },
    {
        "line": 25,
        "fullcodeline": "cfg->general_level_idc = gf_bs_read_u8(bs);"
    },
    {
        "line": 26,
        "fullcodeline": "cfg->ptl_frame_only_constraint = gf_bs_read_int(bs, 1);"
    },
    {
        "line": 27,
        "fullcodeline": "cfg->ptl_multilayer_enabled = gf_bs_read_int(bs, 1);"
    },
    {
        "line": 43,
        "fullcodeline": "cfg->ptl_sublayer_present_mask = 0;"
    },
    {
        "line": 56,
        "fullcodeline": "cfg->num_sub_profiles = gf_bs_read_u8(bs);"
    },
    {
        "line": 72,
        "fullcodeline": "cfg->maxPictureWidth = gf_bs_read_u16(bs);"
    },
    {
        "line": 73,
        "fullcodeline": "cfg->maxPictureHeight = gf_bs_read_u16(bs);"
    },
    {
        "line": 74,
        "fullcodeline": "cfg->avgFrameRate = gf_bs_read_u16(bs);"
    },
    {
        "line": 80,
        "fullcodeline": "Bool valid = GF_FALSE;"
    },
    {
        "line": 82,
        "fullcodeline": "GF_SAFEALLOC(ar, GF_NALUFFParamArray);"
    },
    {
        "line": 88,
        "fullcodeline": "ar->array_completeness = gf_bs_read_int(bs, 1);"
    },
    {
        "line": 89,
        "fullcodeline": "gf_bs_read_int(bs, 2);"
    },
    {
        "line": 90,
        "fullcodeline": "ar->type = gf_bs_read_int(bs, 5);"
    },
    {
        "line": 44,
        "fullcodeline": "for (j=cfg->numTemporalLayers-2; j>=0; j--) {"
    },
    {
        "line": 48,
        "fullcodeline": "for (j=cfg->numTemporalLayers; j<=8 && cfg->numTemporalLayers>1; j++) {"
    },
    {
        "line": 51,
        "fullcodeline": "for (j=cfg->numTemporalLayers-2; j>=0; j--) {"
    },
    {
        "line": 66,
        "fullcodeline": "for (i=0; i<cfg->num_sub_profiles; i++) {"
    },
    {
        "line": 83,
        "fullcodeline": "if (!ar) {"
    },
    {
        "line": 110,
        "fullcodeline": "if (!valid || ((ar->type != GF_VVC_NALU_DEC_PARAM) && (ar->type != GF_VVC_NALU_OPI)))"
    },
    {
        "line": 115,
        "fullcodeline": "for (j=0; j<nalucount; j++) {"
    },
    {
        "line": 30,
        "fullcodeline": "cfg->general_constraint_info = gf_malloc(sizeof(u8)*cfg->num_constraint_info);"
    },
    {
        "line": 36,
        "fullcodeline": "gf_bs_read_data(bs, cfg->general_constraint_info, cfg->num_constraint_info - 1);"
    },
    {
        "line": 37,
        "fullcodeline": "cfg->general_constraint_info[cfg->num_constraint_info-1] =  gf_bs_read_int(bs, 6);"
    },
    {
        "line": 45,
        "fullcodeline": "u32 val = gf_bs_read_int(bs, 1);"
    },
    {
        "line": 46,
        "fullcodeline": "cfg->ptl_sublayer_present_mask |= val << j;"
    },
    {
        "line": 49,
        "fullcodeline": "gf_bs_read_int(bs, 1);"
    },
    {
        "line": 58,
        "fullcodeline": "cfg->sub_profiles_idc = gf_malloc(sizeof(u32)*cfg->num_sub_profiles);"
    },
    {
        "line": 67,
        "fullcodeline": "cfg->sub_profiles_idc[i] = gf_bs_read_u32(bs);"
    },
    {
        "line": 84,
        "fullcodeline": "gf_odf_vvc_cfg_del(cfg);"
    },
    {
        "line": 85,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_CODING, (\"[VVC] alloc failed while parsing vvc config\\n\"));"
    },
    {
        "line": 100,
        "fullcodeline": "valid = GF_TRUE;"
    },
    {
        "line": 101,
        "fullcodeline": "ar->nalus = gf_list_new();"
    },
    {
        "line": 102,
        "fullcodeline": "gf_list_add(cfg->param_array, ar);"
    },
    {
        "line": 105,
        "fullcodeline": "GF_LOG(GF_LOG_WARNING, GF_LOG_CODING, (\"[VVC] Invalid NALU type %d in vvcC - ignoring\\n\", ar->type));"
    },
    {
        "line": 106,
        "fullcodeline": "gf_free(ar);"
    },
    {
        "line": 111,
        "fullcodeline": "nalucount = gf_bs_read_int(bs, 16);"
    },
    {
        "line": 117,
        "fullcodeline": "u32 size = gf_bs_read_int(bs, 16);"
    },
    {
        "line": 127,
        "fullcodeline": "GF_SAFEALLOC(sl, GF_NALUFFParam );"
    },
    {
        "line": 134,
        "fullcodeline": "sl->size = size;"
    },
    {
        "line": 135,
        "fullcodeline": "sl->data = (char *)gf_malloc(sizeof(char) * sl->size);"
    },
    {
        "line": 142,
        "fullcodeline": "gf_bs_read_data(bs, sl->data, sl->size);"
    },
    {
        "line": 143,
        "fullcodeline": "gf_list_add(ar->nalus, sl);"
    },
    {
        "line": 31,
        "fullcodeline": "if (!cfg->general_constraint_info) {"
    },
    {
        "line": 40,
        "fullcodeline": "gf_bs_read_int(bs, 6);"
    },
    {
        "line": 52,
        "fullcodeline": "if (cfg->ptl_sublayer_present_mask & (1<<j)) {"
    },
    {
        "line": 59,
        "fullcodeline": "if (!cfg->sub_profiles_idc) {"
    },
    {
        "line": 113,
        "fullcodeline": "nalucount = 1;"
    },
    {
        "line": 118,
        "fullcodeline": "if ((size>gf_bs_available(bs)) || (size<2)) {"
    },
    {
        "line": 123,
        "fullcodeline": "if (!valid) {"
    },
    {
        "line": 128,
        "fullcodeline": "if (!sl) {"
    },
    {
        "line": 136,
        "fullcodeline": "if (!sl->data) {"
    },
    {
        "line": 32,
        "fullcodeline": "gf_free(cfg);"
    },
    {
        "line": 33,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_CODING, (\"[VVC] alloc failed while parsing vvc config\\n\"));"
    },
    {
        "line": 53,
        "fullcodeline": "cfg->sublayer_level_idc[j] = gf_bs_read_u8(bs);"
    },
    {
        "line": 60,
        "fullcodeline": "gf_free(cfg->general_constraint_info);"
    },
    {
        "line": 61,
        "fullcodeline": "gf_free(cfg);"
    },
    {
        "line": 62,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_CODING, (\"[VVC] alloc failed while parsing vvc config\\n\"));"
    },
    {
        "line": 119,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_CODING, (\"[VVC] Wrong param set size %d\\n\", size));"
    },
    {
        "line": 120,
        "fullcodeline": "gf_odf_vvc_cfg_del(cfg);"
    },
    {
        "line": 124,
        "fullcodeline": "gf_bs_skip_bytes(bs, size);"
    },
    {
        "line": 129,
        "fullcodeline": "gf_odf_vvc_cfg_del(cfg);"
    },
    {
        "line": 130,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_CODING, (\"[VVC] alloc failed while parsing vvc config\\n\"));"
    },
    {
        "line": 137,
        "fullcodeline": "gf_free(sl);"
    },
    {
        "line": 138,
        "fullcodeline": "gf_odf_vvc_cfg_del(cfg);"
    },
    {
        "line": 139,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_CODING, (\"[VVC] alloc failed while parsing vvc config\\n\"));"
    }
]