[
    {
        "line": 5,
        "fullcodeline": "unsigned char buf[2048];"
    },
    {
        "line": 8,
        "fullcodeline": "struct device * d = devlist;"
    },
    {
        "line": 9,
        "fullcodeline": "unsigned char rbuf[4096];"
    },
    {
        "line": 10,
        "fullcodeline": "unsigned char * rp = rbuf+1;"
    },
    {
        "line": 11,
        "fullcodeline": "unsigned char nrep = 0;"
    },
    {
        "line": 13,
        "fullcodeline": "struct service * newserv = NULL;"
    },
    {
        "line": 16,
        "fullcodeline": "n = read(req->socket, buf, sizeof(buf));"
    },
    {
        "line": 27,
        "fullcodeline": "t = time(NULL);"
    },
    {
        "line": 28,
        "fullcodeline": "type = buf[0];"
    },
    {
        "line": 29,
        "fullcodeline": "p = buf + 1;"
    },
    {
        "line": 30,
        "fullcodeline": "DECODELENGTH_CHECKLIMIT(l, p, buf + n);"
    },
    {
        "line": 39,
        "fullcodeline": "syslog(LOG_INFO, \"(s=%d) request type=%d str='%.*s'\","
    },
    {
        "line": 235,
        "fullcodeline": "close(req->socket);"
    },
    {
        "line": 236,
        "fullcodeline": "req->socket = -1;"
    },
    {
        "line": 17,
        "fullcodeline": "if(n<0) {"
    },
    {
        "line": 23,
        "fullcodeline": "if(n==0) {"
    },
    {
        "line": 31,
        "fullcodeline": "if(p+l > buf+n) {"
    },
    {
        "line": 35,
        "fullcodeline": "if(l == 0 && type != 3) {"
    },
    {
        "line": 20,
        "fullcodeline": "syslog(LOG_ERR, \"(s=%d) processRequest(): read(): %m\", req->socket);"
    },
    {
        "line": 24,
        "fullcodeline": "syslog(LOG_INFO, \"(s=%d) request connection closed\", req->socket);"
    },
    {
        "line": 32,
        "fullcodeline": "syslog(LOG_WARNING, \"bad request (length encoding)\");"
    },
    {
        "line": 36,
        "fullcodeline": "syslog(LOG_WARNING, \"bad request (length=0)\");"
    },
    {
        "line": 108,
        "fullcodeline": "rbuf[0] = nrep;"
    },
    {
        "line": 109,
        "fullcodeline": "syslog(LOG_DEBUG, \"(s=%d) response : %d device%s\","
    },
    {
        "line": 126,
        "fullcodeline": "newserv->st = malloc(l + 1);"
    },
    {
        "line": 131,
        "fullcodeline": "memcpy(newserv->st, p, l);"
    },
    {
        "line": 132,
        "fullcodeline": "newserv->st[l] = '\\0';"
    },
    {
        "line": 133,
        "fullcodeline": "p += l;"
    },
    {
        "line": 138,
        "fullcodeline": "DECODELENGTH_CHECKLIMIT(l, p, buf + n);"
    },
    {
        "line": 147,
        "fullcodeline": "syslog(LOG_INFO, \"usn='%.*s'\", l, p);"
    },
    {
        "line": 148,
        "fullcodeline": "newserv->usn = malloc(l + 1);"
    },
    {
        "line": 153,
        "fullcodeline": "memcpy(newserv->usn, p, l);"
    },
    {
        "line": 154,
        "fullcodeline": "newserv->usn[l] = '\\0';"
    },
    {
        "line": 155,
        "fullcodeline": "p += l;"
    },
    {
        "line": 156,
        "fullcodeline": "DECODELENGTH_CHECKLIMIT(l, p, buf + n);"
    },
    {
        "line": 165,
        "fullcodeline": "syslog(LOG_INFO, \"server='%.*s'\", l, p);"
    },
    {
        "line": 166,
        "fullcodeline": "newserv->server = malloc(l + 1);"
    },
    {
        "line": 171,
        "fullcodeline": "memcpy(newserv->server, p, l);"
    },
    {
        "line": 172,
        "fullcodeline": "newserv->server[l] = '\\0';"
    },
    {
        "line": 173,
        "fullcodeline": "p += l;"
    },
    {
        "line": 174,
        "fullcodeline": "DECODELENGTH_CHECKLIMIT(l, p, buf + n);"
    },
    {
        "line": 183,
        "fullcodeline": "syslog(LOG_INFO, \"location='%.*s'\", l, p);"
    },
    {
        "line": 184,
        "fullcodeline": "newserv->location = malloc(l + 1);"
    },
    {
        "line": 189,
        "fullcodeline": "memcpy(newserv->location, p, l);"
    },
    {
        "line": 190,
        "fullcodeline": "newserv->location[l] = '\\0';"
    },
    {
        "line": 210,
        "fullcodeline": "LIST_INSERT_HEAD(&servicelisthead, newserv, entries);"
    },
    {
        "line": 211,
        "fullcodeline": "newserv = NULL;"
    },
    {
        "line": 218,
        "fullcodeline": "syslog(LOG_WARNING, \"Unknown request type %d\", type);"
    },
    {
        "line": 219,
        "fullcodeline": "rbuf[0] = '\\0';"
    },
    {
        "line": 228,
        "fullcodeline": "free(newserv->st);"
    },
    {
        "line": 229,
        "fullcodeline": "free(newserv->usn);"
    },
    {
        "line": 230,
        "fullcodeline": "free(newserv->server);"
    },
    {
        "line": 231,
        "fullcodeline": "free(newserv->location);"
    },
    {
        "line": 232,
        "fullcodeline": "free(newserv);"
    },
    {
        "line": 233,
        "fullcodeline": "newserv = NULL;"
    },
    {
        "line": 18,
        "fullcodeline": "if(errno == EINTR || errno == EAGAIN || errno == EWOULDBLOCK)"
    },
    {
        "line": 45,
        "fullcodeline": "while(d && (nrep < 255)) {"
    },
    {
        "line": 80,
        "fullcodeline": "serv && (nrep < 255);"
    },
    {
        "line": 110,
        "fullcodeline": "req->socket, nrep, (nrep > 1) ? \"s\" : \"\");"
    },
    {
        "line": 111,
        "fullcodeline": "if(write(req->socket, rbuf, rp - rbuf) < 0) {"
    },
    {
        "line": 118,
        "fullcodeline": "if(!newserv) {"
    },
    {
        "line": 122,
        "fullcodeline": "if(containsForbiddenChars(p, l)) {"
    },
    {
        "line": 127,
        "fullcodeline": "if(!newserv->st) {"
    },
    {
        "line": 134,
        "fullcodeline": "if(p >= buf + n) {"
    },
    {
        "line": 139,
        "fullcodeline": "if(p+l > buf+n) {"
    },
    {
        "line": 143,
        "fullcodeline": "if(containsForbiddenChars(p, l)) {"
    },
    {
        "line": 149,
        "fullcodeline": "if(!newserv->usn) {"
    },
    {
        "line": 157,
        "fullcodeline": "if(p+l > buf+n) {"
    },
    {
        "line": 161,
        "fullcodeline": "if(containsForbiddenChars(p, l)) {"
    },
    {
        "line": 167,
        "fullcodeline": "if(!newserv->server) {"
    },
    {
        "line": 175,
        "fullcodeline": "if(p+l > buf+n) {"
    },
    {
        "line": 179,
        "fullcodeline": "if(containsForbiddenChars(p, l)) {"
    },
    {
        "line": 185,
        "fullcodeline": "if(!newserv->location) {"
    },
    {
        "line": 220,
        "fullcodeline": "if(write(req->socket, rbuf, 1) < 0) {"
    },
    {
        "line": 76,
        "fullcodeline": "d = d->next;"
    },
    {
        "line": 112,
        "fullcodeline": "syslog(LOG_ERR, \"(s=%d) write: %m\", req->socket);"
    },
    {
        "line": 119,
        "fullcodeline": "syslog(LOG_ERR, \"cannot allocate memory\");"
    },
    {
        "line": 123,
        "fullcodeline": "syslog(LOG_ERR, \"bad request (st contains forbidden chars)\");"
    },
    {
        "line": 128,
        "fullcodeline": "syslog(LOG_ERR, \"cannot allocate memory\");"
    },
    {
        "line": 135,
        "fullcodeline": "syslog(LOG_WARNING, \"bad request (missing usn)\");"
    },
    {
        "line": 140,
        "fullcodeline": "syslog(LOG_WARNING, \"bad request (length encoding)\");"
    },
    {
        "line": 144,
        "fullcodeline": "syslog(LOG_ERR, \"bad request (usn contains forbidden chars)\");"
    },
    {
        "line": 150,
        "fullcodeline": "syslog(LOG_ERR, \"cannot allocate memory\");"
    },
    {
        "line": 158,
        "fullcodeline": "syslog(LOG_WARNING, \"bad request (length encoding)\");"
    },
    {
        "line": 162,
        "fullcodeline": "syslog(LOG_ERR, \"bad request (server contains forbidden chars)\");"
    },
    {
        "line": 168,
        "fullcodeline": "syslog(LOG_ERR, \"cannot allocate memory\");"
    },
    {
        "line": 176,
        "fullcodeline": "syslog(LOG_WARNING, \"bad request (length encoding)\");"
    },
    {
        "line": 180,
        "fullcodeline": "syslog(LOG_ERR, \"bad request (location contains forbidden chars)\");"
    },
    {
        "line": 186,
        "fullcodeline": "syslog(LOG_ERR, \"cannot allocate memory\");"
    },
    {
        "line": 221,
        "fullcodeline": "syslog(LOG_ERR, \"(s=%d) write: %m\", req->socket);"
    },
    {
        "line": 46,
        "fullcodeline": "if(d->t < t) {"
    },
    {
        "line": 83,
        "fullcodeline": "if(strlen(serv->location) + strlen(serv->st)"
    },
    {
        "line": 86,
        "fullcodeline": "if( (type==1 && 0==strncmp(serv->st, (const char *)p, l))"
    },
    {
        "line": 195,
        "fullcodeline": "if(0 == strcmp(newserv->usn, serv->usn)"
    },
    {
        "line": 47,
        "fullcodeline": "syslog(LOG_INFO, \"outdated device\");"
    },
    {
        "line": 88,
        "fullcodeline": "||(type==3) ) {"
    },
    {
        "line": 93,
        "fullcodeline": "m = strlen(serv->location);"
    },
    {
        "line": 94,
        "fullcodeline": "CODELENGTH(m, rp);"
    },
    {
        "line": 95,
        "fullcodeline": "memcpy(rp, serv->location, m);"
    },
    {
        "line": 96,
        "fullcodeline": "rp += m;"
    },
    {
        "line": 97,
        "fullcodeline": "m = strlen(serv->st);"
    },
    {
        "line": 98,
        "fullcodeline": "CODELENGTH(m, rp);"
    },
    {
        "line": 99,
        "fullcodeline": "memcpy(rp, serv->st, m);"
    },
    {
        "line": 100,
        "fullcodeline": "rp += m;"
    },
    {
        "line": 101,
        "fullcodeline": "m = strlen(serv->usn);"
    },
    {
        "line": 102,
        "fullcodeline": "CODELENGTH(m, rp);"
    },
    {
        "line": 103,
        "fullcodeline": "memcpy(rp, serv->usn, m);"
    },
    {
        "line": 104,
        "fullcodeline": "rp += m;"
    },
    {
        "line": 105,
        "fullcodeline": "nrep++;"
    },
    {
        "line": 196,
        "fullcodeline": "&& 0 == strcmp(newserv->st, serv->st)) {"
    },
    {
        "line": 197,
        "fullcodeline": "syslog(LOG_INFO, \"Service allready in the list. Updating...\");"
    },
    {
        "line": 198,
        "fullcodeline": "free(newserv->st);"
    },
    {
        "line": 199,
        "fullcodeline": "free(newserv->usn);"
    },
    {
        "line": 200,
        "fullcodeline": "free(serv->server);"
    },
    {
        "line": 201,
        "fullcodeline": "serv->server = newserv->server;"
    },
    {
        "line": 202,
        "fullcodeline": "free(serv->location);"
    },
    {
        "line": 203,
        "fullcodeline": "serv->location = newserv->location;"
    },
    {
        "line": 204,
        "fullcodeline": "free(newserv);"
    },
    {
        "line": 205,
        "fullcodeline": "newserv = NULL;"
    },
    {
        "line": 84,
        "fullcodeline": "+ strlen(serv->usn) + 6 + (rp - rbuf) >= sizeof(rbuf))"
    },
    {
        "line": 87,
        "fullcodeline": "||(type==2 && 0==strncmp(serv->usn, (const char *)p, l))"
    },
    {
        "line": 50,
        "fullcodeline": "if(d->headers[HEADER_LOCATION].l + d->headers[HEADER_NT].l"
    },
    {
        "line": 54,
        "fullcodeline": "if( (type==1 && 0==memcmp(d->headers[HEADER_NT].p, p, l))"
    },
    {
        "line": 56,
        "fullcodeline": "||(type==3) ) {"
    },
    {
        "line": 62,
        "fullcodeline": "CODELENGTH(m, rp);"
    },
    {
        "line": 63,
        "fullcodeline": "memcpy(rp, d->headers[HEADER_LOCATION].p, d->headers[HEADER_LOCATION].l);"
    },
    {
        "line": 64,
        "fullcodeline": "rp += d->headers[HEADER_LOCATION].l;"
    },
    {
        "line": 66,
        "fullcodeline": "CODELENGTH(m, rp);"
    },
    {
        "line": 67,
        "fullcodeline": "memcpy(rp, d->headers[HEADER_NT].p, d->headers[HEADER_NT].l);"
    },
    {
        "line": 68,
        "fullcodeline": "rp += d->headers[HEADER_NT].l;"
    },
    {
        "line": 70,
        "fullcodeline": "CODELENGTH(m, rp);"
    },
    {
        "line": 71,
        "fullcodeline": "memcpy(rp, d->headers[HEADER_USN].p, d->headers[HEADER_USN].l);"
    },
    {
        "line": 72,
        "fullcodeline": "rp += d->headers[HEADER_USN].l;"
    },
    {
        "line": 73,
        "fullcodeline": "nrep++;"
    },
    {
        "line": 52,
        "fullcodeline": "+ (rp - rbuf) >= (int)sizeof(rbuf))"
    },
    {
        "line": 55,
        "fullcodeline": "||(type==2 && 0==memcmp(d->headers[HEADER_USN].p, p, l))"
    }
]