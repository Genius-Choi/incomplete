[
    {
        "line": 3,
        "fullcodeline": "GF_MP3DmxCtx *ctx = gf_filter_get_udta(filter);"
    },
    {
        "line": 5,
        "fullcodeline": "Bool is_eos=GF_FALSE;"
    },
    {
        "line": 9,
        "fullcodeline": "u64 cts = GF_FILTER_NO_TS;"
    },
    {
        "line": 18,
        "fullcodeline": "pck = gf_filter_pid_get_packet(ctx->ipid);"
    },
    {
        "line": 34,
        "fullcodeline": "prev_pck_size = ctx->mp3_buffer_size;"
    },
    {
        "line": 71,
        "fullcodeline": "remain = ctx->mp3_buffer_size;"
    },
    {
        "line": 72,
        "fullcodeline": "start = ctx->mp3_buffer;"
    },
    {
        "line": 15,
        "fullcodeline": "if (ctx->opid && !ctx->is_playing)"
    },
    {
        "line": 19,
        "fullcodeline": "if (!pck) {"
    },
    {
        "line": 35,
        "fullcodeline": "if (pck && !ctx->resume_from) {"
    },
    {
        "line": 59,
        "fullcodeline": "if (ctx->timescale && pck) {"
    },
    {
        "line": 66,
        "fullcodeline": "if (cts == GF_FILTER_NO_TS) {"
    },
    {
        "line": 230,
        "fullcodeline": "if (!pck) {"
    },
    {
        "line": 13,
        "fullcodeline": "mp3_dmx_check_dur(filter, ctx);"
    },
    {
        "line": 36,
        "fullcodeline": "data = (char *) gf_filter_pck_get_data(pck, &pck_size);"
    },
    {
        "line": 54,
        "fullcodeline": "memcpy(ctx->mp3_buffer + ctx->mp3_buffer_size, data, pck_size);"
    },
    {
        "line": 55,
        "fullcodeline": "ctx->mp3_buffer_size += pck_size;"
    },
    {
        "line": 60,
        "fullcodeline": "cts = gf_filter_pck_get_cts(pck);"
    },
    {
        "line": 68,
        "fullcodeline": "prev_pck_size = 0;"
    },
    {
        "line": 75,
        "fullcodeline": "start += ctx->resume_from - 1;"
    },
    {
        "line": 76,
        "fullcodeline": "remain -= ctx->resume_from - 1;"
    },
    {
        "line": 77,
        "fullcodeline": "ctx->resume_from = 0;"
    },
    {
        "line": 82,
        "fullcodeline": "Bool skip_id3v1=GF_FALSE;"
    },
    {
        "line": 83,
        "fullcodeline": "u32 bytes_skipped=0, size, nb_samp, bytes_to_drop=0;;"
    },
    {
        "line": 122,
        "fullcodeline": "ctx->hdr = gf_mp3_get_next_header_mem(start, remain, &bytes_skipped);"
    },
    {
        "line": 128,
        "fullcodeline": "sync = start + bytes_skipped;"
    },
    {
        "line": 130,
        "fullcodeline": "size = gf_mp3_frame_size(ctx->hdr);"
    },
    {
        "line": 151,
        "fullcodeline": "mp3_dmx_check_pid(filter, ctx);"
    },
    {
        "line": 157,
        "fullcodeline": "ctx->is_sync = GF_TRUE;"
    },
    {
        "line": 159,
        "fullcodeline": "nb_samp = gf_mp3_window_size(ctx->hdr);"
    },
    {
        "line": 169,
        "fullcodeline": "bytes_to_drop = bytes_skipped + size;"
    },
    {
        "line": 195,
        "fullcodeline": "mp3_dmx_update_cts(ctx);"
    },
    {
        "line": 213,
        "fullcodeline": "start += bytes_to_drop;"
    },
    {
        "line": 214,
        "fullcodeline": "remain -= bytes_to_drop;"
    },
    {
        "line": 231,
        "fullcodeline": "ctx->mp3_buffer_size = 0;"
    },
    {
        "line": 20,
        "fullcodeline": "if (gf_filter_pid_is_eos(ctx->ipid)) {"
    },
    {
        "line": 38,
        "fullcodeline": "if (ctx->byte_offset != GF_FILTER_NO_BO) {"
    },
    {
        "line": 50,
        "fullcodeline": "if (ctx->mp3_buffer_size + pck_size > ctx->mp3_buffer_alloc) {"
    },
    {
        "line": 62,
        "fullcodeline": "if (!ctx->cts && (cts != GF_FILTER_NO_TS))"
    },
    {
        "line": 85,
        "fullcodeline": "if (!ctx->tag_size && (remain>3)) {"
    },
    {
        "line": 125,
        "fullcodeline": "if (!ctx->hdr) {"
    },
    {
        "line": 134,
        "fullcodeline": "if (size + 1 < remain-bytes_skipped) {"
    },
    {
        "line": 153,
        "fullcodeline": "if (!ctx->is_playing) {"
    },
    {
        "line": 170,
        "fullcodeline": "if (ctx->timescale && !prev_pck_size && (cts != GF_FILTER_NO_TS) ) {"
    },
    {
        "line": 175,
        "fullcodeline": "if (!ctx->in_seek) {"
    },
    {
        "line": 202,
        "fullcodeline": "if (bytes_to_drop>remain) {"
    },
    {
        "line": 210,
        "fullcodeline": "if (!bytes_to_drop) {"
    },
    {
        "line": 226,
        "fullcodeline": "if (ctx->byte_offset != GF_FILTER_NO_BO)"
    },
    {
        "line": 232,
        "fullcodeline": "return mp3_dmx_process(filter);"
    },
    {
        "line": 237,
        "fullcodeline": "ctx->mp3_buffer_size = remain;"
    },
    {
        "line": 238,
        "fullcodeline": "gf_filter_pid_drop_packet(ctx->ipid);"
    },
    {
        "line": 28,
        "fullcodeline": "is_eos = GF_TRUE;"
    },
    {
        "line": 39,
        "fullcodeline": "u64 byte_offset = gf_filter_pck_get_byte_offset(pck);"
    },
    {
        "line": 51,
        "fullcodeline": "ctx->mp3_buffer_alloc = ctx->mp3_buffer_size + pck_size;"
    },
    {
        "line": 52,
        "fullcodeline": "ctx->mp3_buffer = gf_realloc(ctx->mp3_buffer, ctx->mp3_buffer_alloc);"
    },
    {
        "line": 63,
        "fullcodeline": "ctx->cts = cts;"
    },
    {
        "line": 112,
        "fullcodeline": "memcpy(ctx->id3_buffer + ctx->id3_buffer_size, start, bytes_to_drop);"
    },
    {
        "line": 113,
        "fullcodeline": "ctx->id3_buffer_size += bytes_to_drop;"
    },
    {
        "line": 154,
        "fullcodeline": "ctx->resume_from = (u32) (sync - ctx->mp3_buffer + 1);"
    },
    {
        "line": 162,
        "fullcodeline": "u64 nb_samples_at_seek = (u64) (ctx->start_range * ctx->sr);"
    },
    {
        "line": 171,
        "fullcodeline": "ctx->cts = cts;"
    },
    {
        "line": 172,
        "fullcodeline": "cts = GF_FILTER_NO_TS;"
    },
    {
        "line": 180,
        "fullcodeline": "dst_pck = gf_filter_pck_new_alloc(ctx->opid, size, &output);"
    },
    {
        "line": 182,
        "fullcodeline": "memcpy(output, sync, size);"
    },
    {
        "line": 184,
        "fullcodeline": "gf_filter_pck_set_cts(dst_pck, ctx->cts);"
    },
    {
        "line": 185,
        "fullcodeline": "gf_filter_pck_set_duration(dst_pck, nb_samp);"
    },
    {
        "line": 186,
        "fullcodeline": "gf_filter_pck_set_sap(dst_pck, GF_FILTER_SAP_1);"
    },
    {
        "line": 187,
        "fullcodeline": "gf_filter_pck_set_framing(dst_pck, GF_TRUE, GF_TRUE);"
    },
    {
        "line": 193,
        "fullcodeline": "gf_filter_pck_send(dst_pck);"
    },
    {
        "line": 199,
        "fullcodeline": "bytes_to_drop+=128;"
    },
    {
        "line": 206,
        "fullcodeline": "bytes_to_drop=remain;"
    },
    {
        "line": 211,
        "fullcodeline": "bytes_to_drop = 1;"
    },
    {
        "line": 227,
        "fullcodeline": "ctx->byte_offset += bytes_to_drop;"
    },
    {
        "line": 21,
        "fullcodeline": "if (!ctx->mp3_buffer_size) {"
    },
    {
        "line": 40,
        "fullcodeline": "if (!ctx->mp3_buffer_size) {"
    },
    {
        "line": 88,
        "fullcodeline": "if (start[0] == 'I' && start[1] == 'D' && start[2] == '3') {"
    },
    {
        "line": 105,
        "fullcodeline": "if (ctx->tag_size>remain) {"
    },
    {
        "line": 115,
        "fullcodeline": "if (!ctx->tag_size && ctx->opid) {"
    },
    {
        "line": 136,
        "fullcodeline": "if (sync[size] !=0xFF) {"
    },
    {
        "line": 163,
        "fullcodeline": "if (ctx->cts + nb_samp >= nb_samples_at_seek) {"
    },
    {
        "line": 176,
        "fullcodeline": "if (bytes_skipped + size > remain) {"
    },
    {
        "line": 181,
        "fullcodeline": "if (!dst_pck) break;"
    },
    {
        "line": 189,
        "fullcodeline": "if (ctx->byte_offset != GF_FILTER_NO_BO) {"
    },
    {
        "line": 203,
        "fullcodeline": "if (!is_eos) {"
    },
    {
        "line": 217,
        "fullcodeline": "if (prev_pck_size > bytes_to_drop) prev_pck_size -= bytes_to_drop;"
    },
    {
        "line": 235,
        "fullcodeline": "memmove(ctx->mp3_buffer, start, remain);"
    },
    {
        "line": 25,
        "fullcodeline": "ctx->src_pck = NULL;"
    },
    {
        "line": 41,
        "fullcodeline": "ctx->byte_offset = byte_offset;"
    },
    {
        "line": 92,
        "fullcodeline": "ctx->tag_size = ((start[9] & 0x7f) + ((start[8] & 0x7f) << 7) + ((start[7] & 0x7f) << 14) + ((start[6] & 0x7f) << 21));"
    },
    {
        "line": 94,
        "fullcodeline": "bytes_to_drop = 10;"
    },
    {
        "line": 99,
        "fullcodeline": "memcpy(ctx->id3_buffer, start, 10);"
    },
    {
        "line": 100,
        "fullcodeline": "ctx->id3_buffer_size = 10;"
    },
    {
        "line": 106,
        "fullcodeline": "bytes_to_drop = remain;"
    },
    {
        "line": 107,
        "fullcodeline": "ctx->tag_size-=remain;"
    },
    {
        "line": 116,
        "fullcodeline": "mp3_dmx_flush_id3(filter, ctx);"
    },
    {
        "line": 165,
        "fullcodeline": "ctx->in_seek = GF_FALSE;"
    },
    {
        "line": 177,
        "fullcodeline": "GF_LOG(GF_LOG_WARNING, GF_LOG_MEDIA, (\"[MP3Dmx] truncated frame of size %u (remains %d)\\n\", size, remain-bytes_skipped));"
    },
    {
        "line": 190,
        "fullcodeline": "gf_filter_pck_set_byte_offset(dst_pck, ctx->byte_offset + bytes_skipped);"
    },
    {
        "line": 204,
        "fullcodeline": "GF_LOG(GF_LOG_WARNING, GF_LOG_MEDIA, (\"[MP3Dmx] truncated frame!\\n\"));"
    },
    {
        "line": 89,
        "fullcodeline": "if (remain<10)"
    },
    {
        "line": 95,
        "fullcodeline": "if (ctx->id3_buffer_alloc < ctx->tag_size+10) {"
    },
    {
        "line": 109,
        "fullcodeline": "bytes_to_drop = ctx->tag_size;"
    },
    {
        "line": 110,
        "fullcodeline": "ctx->tag_size = 0;"
    },
    {
        "line": 137,
        "fullcodeline": "if ((sync[size]=='T') && (sync[size+1]=='A') && (sync[size+2]=='G')) {"
    },
    {
        "line": 219,
        "fullcodeline": "prev_pck_size=0;"
    },
    {
        "line": 221,
        "fullcodeline": "ctx->src_pck = pck;"
    },
    {
        "line": 23,
        "fullcodeline": "gf_filter_pid_set_eos(ctx->opid);"
    },
    {
        "line": 24,
        "fullcodeline": "if (ctx->src_pck) gf_filter_pck_unref(ctx->src_pck);"
    },
    {
        "line": 42,
        "fullcodeline": "} else if (ctx->byte_offset + ctx->mp3_buffer_size != byte_offset) {"
    },
    {
        "line": 96,
        "fullcodeline": "ctx->id3_buffer = gf_realloc(ctx->id3_buffer, ctx->tag_size+10);"
    },
    {
        "line": 97,
        "fullcodeline": "ctx->id3_buffer_alloc = ctx->tag_size+10;"
    },
    {
        "line": 138,
        "fullcodeline": "skip_id3v1=GF_TRUE;"
    },
    {
        "line": 43,
        "fullcodeline": "ctx->byte_offset = GF_FILTER_NO_BO;"
    },
    {
        "line": 140,
        "fullcodeline": "GF_LOG(ctx->is_sync ? GF_LOG_WARNING : GF_LOG_DEBUG, GF_LOG_MEDIA, (\"[MP3Dmx] invalid frame, resyncing\\n\"));"
    },
    {
        "line": 141,
        "fullcodeline": "ctx->is_sync = GF_FALSE;"
    },
    {
        "line": 220,
        "fullcodeline": "if (ctx->src_pck) gf_filter_pck_unref(ctx->src_pck);"
    },
    {
        "line": 223,
        "fullcodeline": "gf_filter_pck_ref_props(&ctx->src_pck);"
    },
    {
        "line": 44,
        "fullcodeline": "if ((byte_offset != GF_FILTER_NO_BO) && (byte_offset>ctx->mp3_buffer_size) ) {"
    },
    {
        "line": 45,
        "fullcodeline": "ctx->byte_offset = byte_offset - ctx->mp3_buffer_size;"
    }
]