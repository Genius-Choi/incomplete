[
    {
        "line": 22,
        "fullcodeline": "if not is_init:"
    },
    {
        "line": 29,
        "fullcodeline": "if is_base_type(typ, \"int128\"):"
    },
    {
        "line": 23,
        "fullcodeline": "data_decl = [\"calldataload\", [\"add\", 4, datapos]]"
    },
    {
        "line": 24,
        "fullcodeline": "copier = functools.partial(_mk_calldatacopy_copier, mempos=mempos)"
    },
    {
        "line": 26,
        "fullcodeline": "data_decl = [\"codeload\", [\"add\", \"~codelen\", datapos]]"
    },
    {
        "line": 27,
        "fullcodeline": "copier = functools.partial(_mk_codecopy_copier, mempos=mempos)"
    },
    {
        "line": 30,
        "fullcodeline": "return LLLnode.from_list("
    },
    {
        "line": 34,
        "fullcodeline": "elif is_base_type(typ, \"bool\"):"
    },
    {
        "line": 31,
        "fullcodeline": "int128_clamp(data_decl), typ=typ, annotation=\"checking int128 input\""
    },
    {
        "line": 35,
        "fullcodeline": "if version_check(begin=\"constantinople\"):"
    },
    {
        "line": 39,
        "fullcodeline": "return LLLnode.from_list(lll, typ=typ, annotation=\"checking bool input\")"
    },
    {
        "line": 41,
        "fullcodeline": "elif is_base_type(typ, \"address\"):"
    },
    {
        "line": 36,
        "fullcodeline": "lll = [\"assert\", [\"iszero\", [\"shr\", 1, data_decl]]]"
    },
    {
        "line": 38,
        "fullcodeline": "lll = [\"uclamplt\", data_decl, 2]"
    },
    {
        "line": 42,
        "fullcodeline": "return LLLnode.from_list("
    },
    {
        "line": 46,
        "fullcodeline": "elif isinstance(typ, ByteArrayLike):"
    },
    {
        "line": 43,
        "fullcodeline": "address_clamp(data_decl), typ=typ, annotation=\"checking address input\""
    },
    {
        "line": 47,
        "fullcodeline": "return LLLnode.from_list("
    },
    {
        "line": 57,
        "fullcodeline": "elif isinstance(typ, ListType):"
    },
    {
        "line": 48,
        "fullcodeline": "["
    },
    {
        "line": 50,
        "fullcodeline": "copier(data_decl, 32 + typ.maxlen),"
    },
    {
        "line": 51,
        "fullcodeline": "[\"assert\", [\"le\", [\"calldataload\", [\"add\", 4, data_decl]], typ.maxlen]],"
    },
    {
        "line": 58,
        "fullcodeline": "if typ.count > 5 or (type(datapos) is list and type(mempos) is list):"
    },
    {
        "line": 97,
        "fullcodeline": "return LLLnode.from_list([\"seq\"] + lll_node, typ=None, annotation=\"checking list input\")"
    },
    {
        "line": 100,
        "fullcodeline": "return LLLnode.from_list(\"pass\")"
    },
    {
        "line": 60,
        "fullcodeline": "subtype = typ.subtype"
    },
    {
        "line": 66,
        "fullcodeline": "clamper = make_arg_clamper("
    },
    {
        "line": 77,
        "fullcodeline": "type_size = get_size_of_type(typ)"
    },
    {
        "line": 78,
        "fullcodeline": "i_incr = get_size_of_type(subtype) * 32"
    },
    {
        "line": 80,
        "fullcodeline": "mem_to = type_size * 32"
    },
    {
        "line": 81,
        "fullcodeline": "loop_label = f\"_check_list_loop_{str(uuid.uuid4())}\""
    },
    {
        "line": 83,
        "fullcodeline": "lll_node = ["
    },
    {
        "line": 91,
        "fullcodeline": "lll_node = []"
    },
    {
        "line": 61,
        "fullcodeline": "while hasattr(subtype, \"subtype\"):"
    },
    {
        "line": 72,
        "fullcodeline": "if clamper.value == \"pass\":"
    },
    {
        "line": 92,
        "fullcodeline": "for i in range(typ.count):"
    },
    {
        "line": 62,
        "fullcodeline": "subtype = subtype.subtype"
    },
    {
        "line": 67,
        "fullcodeline": "[\"add\", datapos, [\"mload\", offset]],"
    },
    {
        "line": 68,
        "fullcodeline": "[\"add\", mempos, [\"mload\", offset]],"
    },
    {
        "line": 84,
        "fullcodeline": "[\"mstore\", offset, 0],  # init loop"
    },
    {
        "line": 85,
        "fullcodeline": "[\"label\", loop_label],"
    },
    {
        "line": 87,
        "fullcodeline": "[\"mstore\", offset, [\"add\", [\"mload\", offset], i_incr]],"
    },
    {
        "line": 88,
        "fullcodeline": "[\"if\", [\"lt\", [\"mload\", offset], mem_to], [\"goto\", loop_label]],"
    },
    {
        "line": 93,
        "fullcodeline": "offset = get_size_of_type(typ.subtype) * 32 * i"
    },
    {
        "line": 94,
        "fullcodeline": "lll_node.append("
    },
    {
        "line": 95,
        "fullcodeline": "make_arg_clamper(datapos + offset, mempos + offset, typ.subtype, is_init)"
    }
]