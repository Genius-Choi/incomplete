[
    {
        "line": 2,
        "fullcodeline": "parent_abi_t = abi_type_of(lll_node.typ)"
    },
    {
        "line": 3,
        "fullcodeline": "size_bound = parent_abi_t.size_bound()"
    },
    {
        "line": 7,
        "fullcodeline": "lll_ret = [\"seq\"]"
    },
    {
        "line": 8,
        "fullcodeline": "dyn_ofst = \"dyn_ofst\"  # current offset in the dynamic section"
    },
    {
        "line": 9,
        "fullcodeline": "dst_begin = \"dst\"  # pointer to beginning of buffer"
    },
    {
        "line": 10,
        "fullcodeline": "dst_loc = \"dst_loc\"  # pointer to write location in static section"
    },
    {
        "line": 11,
        "fullcodeline": "os = o_list(lll_node, pos=pos)"
    },
    {
        "line": 65,
        "fullcodeline": "lll_ret = [\"with\", dst_begin, dst, [\"with\", dst_loc, dst_begin, lll_ret]]"
    },
    {
        "line": 4,
        "fullcodeline": "if bufsz is not None and bufsz < 32 * size_bound:"
    },
    {
        "line": 13,
        "fullcodeline": "for i, o in enumerate(os):"
    },
    {
        "line": 59,
        "fullcodeline": "if not (parent_abi_t.is_dynamic() and parent_abi_t.is_tuple()):"
    },
    {
        "line": 67,
        "fullcodeline": "return LLLnode.from_list(lll_ret, pos=pos)"
    },
    {
        "line": 5,
        "fullcodeline": "raise CompilerPanic(\"buffer provided to abi_encode not large enough\")"
    },
    {
        "line": 60,
        "fullcodeline": "pass  # optimize out dyn_ofst allocation if we don't need it"
    },
    {
        "line": 62,
        "fullcodeline": "dyn_section_start = parent_abi_t.static_size()"
    },
    {
        "line": 63,
        "fullcodeline": "lll_ret = [\"with\", \"dyn_ofst\", dyn_section_start, lll_ret]"
    },
    {
        "line": 14,
        "fullcodeline": "abi_t = abi_type_of(o.typ)"
    },
    {
        "line": 48,
        "fullcodeline": "if not parent_abi_t.is_dynamic():"
    },
    {
        "line": 16,
        "fullcodeline": "if parent_abi_t.is_tuple():"
    },
    {
        "line": 40,
        "fullcodeline": "if i + 1 == len(os):"
    },
    {
        "line": 49,
        "fullcodeline": "lll_ret.append(parent_abi_t.embedded_static_size())"
    },
    {
        "line": 41,
        "fullcodeline": "pass  # optimize out the last increment to dst_loc"
    },
    {
        "line": 43,
        "fullcodeline": "sz = abi_t.embedded_static_size()"
    },
    {
        "line": 44,
        "fullcodeline": "lll_ret.append([\"set\", dst_loc, [\"add\", dst_loc, sz]])"
    },
    {
        "line": 50,
        "fullcodeline": "elif parent_abi_t.is_tuple():"
    },
    {
        "line": 17,
        "fullcodeline": "if abi_t.is_dynamic():"
    },
    {
        "line": 31,
        "fullcodeline": "elif isinstance(o.typ, BaseType):"
    },
    {
        "line": 51,
        "fullcodeline": "lll_ret.append(\"dyn_ofst\")"
    },
    {
        "line": 18,
        "fullcodeline": "lll_ret.append([\"mstore\", dst_loc, dyn_ofst])"
    },
    {
        "line": 20,
        "fullcodeline": "child_dst = [\"add\", dst_begin, dyn_ofst]"
    },
    {
        "line": 21,
        "fullcodeline": "child = abi_encode(child_dst, o, pos=pos, returns_len=True)"
    },
    {
        "line": 26,
        "fullcodeline": "lll_ret.append([\"set\", dyn_ofst, [\"add\", dyn_ofst, child]])"
    },
    {
        "line": 29,
        "fullcodeline": "lll_ret.append(abi_encode(dst_loc, o, pos=pos, returns_len=False))"
    },
    {
        "line": 32,
        "fullcodeline": "d = LLLnode(dst_loc, typ=o.typ, location=\"memory\")"
    },
    {
        "line": 33,
        "fullcodeline": "lll_ret.append(make_setter(d, o, location=d.location, pos=pos))"
    },
    {
        "line": 52,
        "fullcodeline": "elif isinstance(lll_node.typ, ByteArrayLike):"
    },
    {
        "line": 34,
        "fullcodeline": "elif isinstance(o.typ, ByteArrayLike):"
    },
    {
        "line": 54,
        "fullcodeline": "calc_len = [\"ceil32\", [\"add\", 32, [\"mload\", dst_loc]]]"
    },
    {
        "line": 55,
        "fullcodeline": "lll_ret.append(calc_len)"
    },
    {
        "line": 57,
        "fullcodeline": "raise CompilerPanic(\"unknown type {lll_node.typ}\")"
    },
    {
        "line": 35,
        "fullcodeline": "d = LLLnode.from_list(dst_loc, typ=o.typ, location=\"memory\")"
    },
    {
        "line": 36,
        "fullcodeline": "lll_ret.append([\"seq\", make_setter(d, o, location=d.location, pos=pos), zero_pad(d)])"
    },
    {
        "line": 38,
        "fullcodeline": "raise CompilerPanic(f\"unreachable type: {o.typ}\")"
    }
]