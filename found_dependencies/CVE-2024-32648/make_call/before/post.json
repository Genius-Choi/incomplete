[
    {
        "line": 11,
        "fullcodeline": "pop_local_vars = []"
    },
    {
        "line": 12,
        "fullcodeline": "push_local_vars = []"
    },
    {
        "line": 13,
        "fullcodeline": "pop_return_values = []"
    },
    {
        "line": 14,
        "fullcodeline": "push_args = []"
    },
    {
        "line": 18,
        "fullcodeline": "from vyper.old_codegen.expr import parse_sequence"
    },
    {
        "line": 21,
        "fullcodeline": "sig = FunctionSignature.lookup_sig(context.sigs, method_name, expr_args, stmt_expr, context,)"
    },
    {
        "line": 34,
        "fullcodeline": "var_slots = [(v.pos, v.size) for name, v in context.vars.items() if v.location == \"memory\"]"
    },
    {
        "line": 136,
        "fullcodeline": "jump_to_func = ["
    },
    {
        "line": 143,
        "fullcodeline": "returner = [0]"
    },
    {
        "line": 219,
        "fullcodeline": "call_body = list("
    },
    {
        "line": 232,
        "fullcodeline": "pop_returner_call_body = [\"pop\", call_body] if sig.output_type is None else call_body"
    },
    {
        "line": 234,
        "fullcodeline": "o = LLLnode.from_list("
    },
    {
        "line": 242,
        "fullcodeline": "o.gas += sig.gas"
    },
    {
        "line": 20,
        "fullcodeline": "pre_init, expr_args = parse_sequence(stmt_expr, stmt_expr.args, context)"
    },
    {
        "line": 23,
        "fullcodeline": "if context.is_constant() and sig.mutability not in (\"view\", \"pure\"):"
    },
    {
        "line": 30,
        "fullcodeline": "if not sig.internal:"
    },
    {
        "line": 24,
        "fullcodeline": "raise StateAccessViolation("
    },
    {
        "line": 31,
        "fullcodeline": "raise StructureException(\"Cannot call external functions via 'self'\", stmt_expr)"
    },
    {
        "line": 36,
        "fullcodeline": "var_slots.sort(key=lambda x: x[0])"
    },
    {
        "line": 73,
        "fullcodeline": "push_args += [inargs]  # copy arguments first, to not mess up the push/pop sequencing."
    },
    {
        "line": 75,
        "fullcodeline": "static_arg_size = 32 * sum([get_static_size_of_type(arg.typ) for arg in expr_args])"
    },
    {
        "line": 76,
        "fullcodeline": "static_pos = int(arg_pos + static_arg_size)"
    },
    {
        "line": 77,
        "fullcodeline": "needs_dyn_section = any([has_dynamic_data(arg.typ) for arg in expr_args])"
    },
    {
        "line": 128,
        "fullcodeline": "push_args += [[\"mload\", pos] for pos in reversed(range(arg_pos, static_pos, 32))]"
    },
    {
        "line": 137,
        "fullcodeline": "[\"add\", [\"pc\"], 6],  # set callback pointer."
    },
    {
        "line": 138,
        "fullcodeline": "[\"goto\", f\"priv_{sig.method_id}\"],"
    },
    {
        "line": 139,
        "fullcodeline": "[\"jumpdest\"],"
    },
    {
        "line": 220,
        "fullcodeline": "itertools.chain("
    },
    {
        "line": 238,
        "fullcodeline": "pos=getpos(stmt_expr),"
    },
    {
        "line": 239,
        "fullcodeline": "annotation=f\"Internal Call: {method_name}\","
    },
    {
        "line": 38,
        "fullcodeline": "if len(var_slots) > 10:"
    },
    {
        "line": 70,
        "fullcodeline": "inargs, inargsize, arg_pos = pack_arguments("
    },
    {
        "line": 145,
        "fullcodeline": "output_placeholder, returner, output_size = _call_make_placeholder(stmt_expr, context, sig)"
    },
    {
        "line": 146,
        "fullcodeline": "if output_size > 0:"
    },
    {
        "line": 221,
        "fullcodeline": "[\"seq_unchecked\"],"
    },
    {
        "line": 228,
        "fullcodeline": "[returner],"
    },
    {
        "line": 25,
        "fullcodeline": "f\"May not call state modifying function \""
    },
    {
        "line": 27,
        "fullcodeline": "getpos(stmt_expr),"
    },
    {
        "line": 41,
        "fullcodeline": "i_placeholder = context.new_internal_variable(BaseType(\"uint256\"))"
    },
    {
        "line": 42,
        "fullcodeline": "local_save_ident = f\"_{stmt_expr.lineno}_{stmt_expr.col_offset}\""
    },
    {
        "line": 43,
        "fullcodeline": "push_loop_label = \"save_locals_start\" + local_save_ident"
    },
    {
        "line": 44,
        "fullcodeline": "pop_loop_label = \"restore_locals_start\" + local_save_ident"
    },
    {
        "line": 45,
        "fullcodeline": "push_local_vars = ["
    },
    {
        "line": 52,
        "fullcodeline": "pop_local_vars = ["
    },
    {
        "line": 61,
        "fullcodeline": "push_mem_slots = []"
    },
    {
        "line": 65,
        "fullcodeline": "push_local_vars = [[\"mload\", pos] for pos in push_mem_slots]"
    },
    {
        "line": 66,
        "fullcodeline": "pop_local_vars = [[\"mstore\", pos, \"pass\"] for pos in push_mem_slots[::-1]]"
    },
    {
        "line": 80,
        "fullcodeline": "ident = f\"push_args_{sig.method_id}_{stmt_expr.lineno}_{stmt_expr.col_offset}\""
    },
    {
        "line": 81,
        "fullcodeline": "start_label = ident + \"_start\""
    },
    {
        "line": 82,
        "fullcodeline": "end_label = ident + \"_end\""
    },
    {
        "line": 83,
        "fullcodeline": "i_placeholder = context.new_internal_variable(BaseType(\"uint256\"))"
    },
    {
        "line": 93,
        "fullcodeline": "idx = 0"
    },
    {
        "line": 98,
        "fullcodeline": "push_args += ["
    },
    {
        "line": 118,
        "fullcodeline": "push_args += ["
    },
    {
        "line": 130,
        "fullcodeline": "raise StructureException("
    },
    {
        "line": 147,
        "fullcodeline": "dynamic_offsets = []"
    },
    {
        "line": 183,
        "fullcodeline": "dyn_idx = 0"
    },
    {
        "line": 26,
        "fullcodeline": "f\"'{method_name}' within {context.pp_constancy()}.\","
    },
    {
        "line": 40,
        "fullcodeline": "mem_from, mem_to = var_slots[0][0], var_slots[-1][0] + var_slots[-1][1] * 32"
    },
    {
        "line": 62,
        "fullcodeline": "for pos, size in var_slots:"
    },
    {
        "line": 94,
        "fullcodeline": "for arg in expr_args:"
    },
    {
        "line": 148,
        "fullcodeline": "if isinstance(sig.output_type, (BaseType, ListType)):"
    },
    {
        "line": 184,
        "fullcodeline": "for in_memory_offset, _out_type in dynamic_offsets:"
    },
    {
        "line": 46,
        "fullcodeline": "[\"mstore\", i_placeholder, mem_from],"
    },
    {
        "line": 47,
        "fullcodeline": "[\"label\", push_loop_label],"
    },
    {
        "line": 48,
        "fullcodeline": "[\"mload\", [\"mload\", i_placeholder]],"
    },
    {
        "line": 49,
        "fullcodeline": "[\"mstore\", i_placeholder, [\"add\", [\"mload\", i_placeholder], 32]],"
    },
    {
        "line": 50,
        "fullcodeline": "[\"if\", [\"lt\", [\"mload\", i_placeholder], mem_to], [\"goto\", push_loop_label]],"
    },
    {
        "line": 53,
        "fullcodeline": "[\"mstore\", i_placeholder, mem_to - 32],"
    },
    {
        "line": 54,
        "fullcodeline": "[\"label\", pop_loop_label],"
    },
    {
        "line": 55,
        "fullcodeline": "[\"mstore\", [\"mload\", i_placeholder], \"pass\"],"
    },
    {
        "line": 56,
        "fullcodeline": "[\"mstore\", i_placeholder, [\"sub\", [\"mload\", i_placeholder], 32]],"
    },
    {
        "line": 57,
        "fullcodeline": "[\"if\", [\"ge\", [\"mload\", i_placeholder], mem_from], [\"goto\", pop_loop_label]],"
    },
    {
        "line": 99,
        "fullcodeline": "["
    },
    {
        "line": 119,
        "fullcodeline": "[\"label\", start_label],"
    },
    {
        "line": 120,
        "fullcodeline": "[\"if\", [\"lt\", [\"mload\", i_placeholder], static_pos], [\"goto\", end_label]],"
    },
    {
        "line": 121,
        "fullcodeline": "[\"mload\", [\"mload\", i_placeholder]],"
    },
    {
        "line": 122,
        "fullcodeline": "[\"mstore\", i_placeholder, [\"sub\", [\"mload\", i_placeholder], 32]],  # decrease i"
    },
    {
        "line": 123,
        "fullcodeline": "[\"goto\", start_label],"
    },
    {
        "line": 124,
        "fullcodeline": "[\"label\", end_label],"
    },
    {
        "line": 131,
        "fullcodeline": "f\"Wrong number of args for: {sig.name} (0 args given, expected {len(sig.args)})\","
    },
    {
        "line": 149,
        "fullcodeline": "pop_return_values = ["
    },
    {
        "line": 63,
        "fullcodeline": "push_mem_slots.extend([pos + i * 32 for i in range(size)])"
    },
    {
        "line": 97,
        "fullcodeline": "idx += get_static_size_of_type(arg.typ)"
    },
    {
        "line": 102,
        "fullcodeline": "[\"mload\", arg_pos + last_idx * 32],"
    },
    {
        "line": 103,
        "fullcodeline": "["
    },
    {
        "line": 153,
        "fullcodeline": "elif isinstance(sig.output_type, ByteArrayLike):"
    },
    {
        "line": 185,
        "fullcodeline": "ident = f\"{stmt_expr.lineno}_{stmt_expr.col_offset}_arg_{dyn_idx}\""
    },
    {
        "line": 186,
        "fullcodeline": "dyn_idx += 1"
    },
    {
        "line": 187,
        "fullcodeline": "start_label = \"dyn_unpack_start_\" + ident"
    },
    {
        "line": 188,
        "fullcodeline": "end_label = \"dyn_unpack_end_\" + ident"
    },
    {
        "line": 189,
        "fullcodeline": "i_placeholder = context.new_internal_variable(typ=BaseType(\"uint256\"))"
    },
    {
        "line": 190,
        "fullcodeline": "begin_pos = [\"add\", output_placeholder, in_memory_offset]"
    },
    {
        "line": 192,
        "fullcodeline": "o = LLLnode.from_list("
    },
    {
        "line": 217,
        "fullcodeline": "pop_return_values.append(o)"
    },
    {
        "line": 95,
        "fullcodeline": "if isinstance(arg.typ, ByteArrayLike):"
    },
    {
        "line": 106,
        "fullcodeline": "[\"add\", arg_pos, \"offset\"],"
    },
    {
        "line": 107,
        "fullcodeline": "["
    },
    {
        "line": 154,
        "fullcodeline": "dynamic_offsets = [(0, sig.output_type)]"
    },
    {
        "line": 155,
        "fullcodeline": "pop_return_values = ["
    },
    {
        "line": 96,
        "fullcodeline": "last_idx = idx"
    },
    {
        "line": 110,
        "fullcodeline": "[\"mload\", \"len_pos\"],"
    },
    {
        "line": 111,
        "fullcodeline": "[\"mstore\", i_placeholder, [\"add\", \"len_pos\", [\"ceil32\", \"len_value\"]]],"
    },
    {
        "line": 158,
        "fullcodeline": "elif isinstance(sig.output_type, TupleLike):"
    },
    {
        "line": 193,
        "fullcodeline": "["
    },
    {
        "line": 215,
        "fullcodeline": "pos=getpos(stmt_expr),"
    },
    {
        "line": 156,
        "fullcodeline": "[\"pop\", \"pass\"],"
    },
    {
        "line": 159,
        "fullcodeline": "static_offset = 0"
    },
    {
        "line": 160,
        "fullcodeline": "pop_return_values = []"
    },
    {
        "line": 195,
        "fullcodeline": "[\"mstore\", begin_pos, \"pass\"],  # get len"
    },
    {
        "line": 196,
        "fullcodeline": "[\"mstore\", i_placeholder, 0],"
    },
    {
        "line": 197,
        "fullcodeline": "[\"label\", start_label],"
    },
    {
        "line": 198,
        "fullcodeline": "[  # break"
    },
    {
        "line": 203,
        "fullcodeline": "[  # pop into correct memory slot."
    },
    {
        "line": 209,
        "fullcodeline": "[\"mstore\", i_placeholder, [\"add\", 32, [\"mload\", i_placeholder]]],"
    },
    {
        "line": 210,
        "fullcodeline": "[\"goto\", start_label],"
    },
    {
        "line": 211,
        "fullcodeline": "[\"label\", end_label],"
    },
    {
        "line": 161,
        "fullcodeline": "for name, typ in sig.output_type.tuple_items():"
    },
    {
        "line": 200,
        "fullcodeline": "[\"ge\", [\"mload\", i_placeholder], [\"ceil32\", [\"mload\", begin_pos]]],"
    },
    {
        "line": 201,
        "fullcodeline": "[\"goto\", end_label],"
    },
    {
        "line": 205,
        "fullcodeline": "[\"add\", [\"add\", begin_pos, 32], [\"mload\", i_placeholder]],"
    },
    {
        "line": 151,
        "fullcodeline": "for pos in range(0, output_size, 32)"
    },
    {
        "line": 150,
        "fullcodeline": "[\"mstore\", [\"add\", output_placeholder, pos], \"pass\"]"
    },
    {
        "line": 162,
        "fullcodeline": "if isinstance(typ, ByteArrayLike):"
    },
    {
        "line": 163,
        "fullcodeline": "pop_return_values.append("
    },
    {
        "line": 166,
        "fullcodeline": "dynamic_offsets.append("
    },
    {
        "line": 169,
        "fullcodeline": "static_offset += 32"
    },
    {
        "line": 171,
        "fullcodeline": "member_output_size = get_size_of_type(typ) * 32"
    },
    {
        "line": 172,
        "fullcodeline": "pop_return_values.extend("
    },
    {
        "line": 180,
        "fullcodeline": "static_offset += member_output_size"
    },
    {
        "line": 164,
        "fullcodeline": "[\"mstore\", [\"add\", output_placeholder, static_offset], \"pass\"]"
    },
    {
        "line": 167,
        "fullcodeline": "([\"mload\", [\"add\", output_placeholder, static_offset]], name)"
    },
    {
        "line": 173,
        "fullcodeline": "["
    },
    {
        "line": 175,
        "fullcodeline": "for pos in range("
    },
    {
        "line": 174,
        "fullcodeline": "[\"mstore\", [\"add\", output_placeholder, pos], \"pass\"]"
    },
    {
        "line": 176,
        "fullcodeline": "static_offset, static_offset + member_output_size, 32"
    }
]