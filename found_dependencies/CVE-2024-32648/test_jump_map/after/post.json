[
    {
        "line": 3,
        "fullcodeline": "pos_map = source_map[\"pc_pos_map\"]"
    },
    {
        "line": 4,
        "fullcodeline": "jump_map = source_map[\"pc_jump_map\"]"
    },
    {
        "line": 6,
        "fullcodeline": "assert len([v for v in jump_map.values() if v == \"o\"]) == 1"
    },
    {
        "line": 7,
        "fullcodeline": "assert len([v for v in jump_map.values() if v == \"i\"]) == 2"
    },
    {
        "line": 9,
        "fullcodeline": "code_lines = [i + \"\\n\" for i in TEST_CODE.split(\"\\n\")]"
    },
    {
        "line": 10,
        "fullcodeline": "for pc in [k for k, v in jump_map.items() if v == \"o\"]:"
    },
    {
        "line": 14,
        "fullcodeline": "for pc in [k for k, v in jump_map.items() if v == \"i\"]:"
    },
    {
        "line": 2,
        "fullcodeline": "source_map = compile_code(TEST_CODE, [\"source_map\"])[\"source_map\"]"
    },
    {
        "line": 12,
        "fullcodeline": "assert code_lines[lineno - 1][col_offset:end_col_offset].startswith(\"return\")"
    },
    {
        "line": 16,
        "fullcodeline": "assert code_lines[lineno - 1][col_offset:end_col_offset].startswith(\"self.\")"
    },
    {
        "line": 11,
        "fullcodeline": "lineno, col_offset, _, end_col_offset = pos_map[pc]"
    },
    {
        "line": 15,
        "fullcodeline": "lineno, col_offset, _, end_col_offset = pos_map[pc]"
    }
]