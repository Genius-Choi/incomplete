[
    {
        "line": 5,
        "fullcodeline": "func_types = [i._metadata[\"type\"] for i in global_ctx._defs]"
    },
    {
        "line": 6,
        "fullcodeline": "mutabilities = [i.mutability for i in func_types if i.visibility == FunctionVisibility.EXTERNAL]"
    },
    {
        "line": 7,
        "fullcodeline": "has_payable = any(i == StateMutability.PAYABLE for i in mutabilities)"
    },
    {
        "line": 8,
        "fullcodeline": "has_nonpayable = any(i != StateMutability.PAYABLE for i in mutabilities)"
    },
    {
        "line": 10,
        "fullcodeline": "is_default_payable = ("
    },
    {
        "line": 19,
        "fullcodeline": "check_per_function = is_default_payable and has_nonpayable"
    },
    {
        "line": 22,
        "fullcodeline": "payable_funcs = []"
    },
    {
        "line": 23,
        "fullcodeline": "nonpayable_funcs = []"
    },
    {
        "line": 24,
        "fullcodeline": "internal_funcs = []"
    },
    {
        "line": 83,
        "fullcodeline": "runtime = ["
    },
    {
        "line": 89,
        "fullcodeline": "runtime.extend(internal_funcs)"
    },
    {
        "line": 92,
        "fullcodeline": "o.append([\"return\", 0, [\"lll\", runtime, 0]])"
    },
    {
        "line": 11,
        "fullcodeline": "default_function is not None"
    },
    {
        "line": 27,
        "fullcodeline": "for func_node in regular_functions:"
    },
    {
        "line": 93,
        "fullcodeline": "return o, runtime"
    },
    {
        "line": 12,
        "fullcodeline": "and default_function._metadata[\"type\"].mutability == StateMutability.PAYABLE"
    },
    {
        "line": 66,
        "fullcodeline": "fallback_lll = LLLnode.from_list([\"revert\", 0, 0], typ=None, annotation=\"Default function\")"
    },
    {
        "line": 69,
        "fullcodeline": "external_seq = [\"seq\"] + payable_funcs + nonpayable_funcs"
    },
    {
        "line": 74,
        "fullcodeline": "external_seq = [\"seq\"]"
    },
    {
        "line": 86,
        "fullcodeline": "[\"with\", \"_calldata_method_id\", [\"mload\", 0], external_seq],"
    },
    {
        "line": 87,
        "fullcodeline": "[\"seq_unchecked\", [\"label\", \"fallback\"], fallback_lll],"
    },
    {
        "line": 44,
        "fullcodeline": "func_lll.total_gas += add_gas"
    },
    {
        "line": 50,
        "fullcodeline": "sig = FunctionSignature.from_definition(func_node, external_interfaces, global_ctx._structs)"
    },
    {
        "line": 51,
        "fullcodeline": "sig.gas = func_lll.total_gas"
    },
    {
        "line": 52,
        "fullcodeline": "sig.frame_start = frame_start"
    },
    {
        "line": 53,
        "fullcodeline": "sig.frame_size = frame_size"
    },
    {
        "line": 54,
        "fullcodeline": "sigs[sig.name] = sig"
    },
    {
        "line": 58,
        "fullcodeline": "fallback_lll, _frame_start, _frame_size = generate_lll_for_function("
    },
    {
        "line": 29,
        "fullcodeline": "func_lll, frame_start, frame_size = generate_lll_for_function("
    },
    {
        "line": 33,
        "fullcodeline": "if func_type.visibility == FunctionVisibility.INTERNAL:"
    },
    {
        "line": 76,
        "fullcodeline": "external_seq += payable_funcs"
    },
    {
        "line": 78,
        "fullcodeline": "external_seq.append([\"assert\", [\"iszero\", \"callvalue\"]])"
    },
    {
        "line": 79,
        "fullcodeline": "external_seq += nonpayable_funcs"
    },
    {
        "line": 34,
        "fullcodeline": "internal_funcs.append(func_lll)"
    },
    {
        "line": 63,
        "fullcodeline": "check_per_function or not regular_functions,"
    },
    {
        "line": 36,
        "fullcodeline": "elif func_type.mutability == StateMutability.PAYABLE:"
    },
    {
        "line": 60,
        "fullcodeline": "{**{\"self\": sigs}, **external_interfaces},"
    },
    {
        "line": 30,
        "fullcodeline": "func_node, {**{\"self\": sigs}, **external_interfaces}, global_ctx, check_per_function"
    },
    {
        "line": 37,
        "fullcodeline": "add_gas += 30  # CMC 20210910 why?"
    },
    {
        "line": 38,
        "fullcodeline": "payable_funcs.append(func_lll)"
    },
    {
        "line": 41,
        "fullcodeline": "add_gas += 30  # CMC 20210910 why?"
    },
    {
        "line": 42,
        "fullcodeline": "nonpayable_funcs.append(func_lll)"
    }
]