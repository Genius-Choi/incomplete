[
    {
        "line": 11,
        "fullcodeline": "pos = getpos(code)"
    },
    {
        "line": 16,
        "fullcodeline": "handle_base_args = _register_function_args(context, sig)"
    },
    {
        "line": 19,
        "fullcodeline": "kwarg_handlers = _generate_kwarg_handlers(context, sig, pos)"
    },
    {
        "line": 23,
        "fullcodeline": "entrance = [[\"label\", sig.external_function_base_entry_label]]"
    },
    {
        "line": 25,
        "fullcodeline": "entrance += handle_base_args"
    },
    {
        "line": 32,
        "fullcodeline": "entrance += nonreentrant_pre"
    },
    {
        "line": 34,
        "fullcodeline": "body = [parse_body(c, context) for c in code.body]"
    },
    {
        "line": 36,
        "fullcodeline": "exit = [[\"label\", sig.exit_sequence_label]] + nonreentrant_post"
    },
    {
        "line": 47,
        "fullcodeline": "func_common_lll = [\"seq\"] + entrance + body + exit"
    },
    {
        "line": 13,
        "fullcodeline": "nonreentrant_pre, nonreentrant_post = get_nonreentrant_lock(func_type)"
    },
    {
        "line": 27,
        "fullcodeline": "if check_nonpayable and sig.mutability != \"payable\":"
    },
    {
        "line": 49,
        "fullcodeline": "if sig.is_default_func or sig.is_init_func:"
    },
    {
        "line": 58,
        "fullcodeline": "return LLLnode.from_list(ret, pos=getpos(code))"
    },
    {
        "line": 30,
        "fullcodeline": "entrance += [[\"assert\", [\"iszero\", \"callvalue\"]]]"
    },
    {
        "line": 38,
        "fullcodeline": "pass  # init func has special exit sequence generated by parser.py"
    },
    {
        "line": 51,
        "fullcodeline": "ret = func_common_lll"
    },
    {
        "line": 53,
        "fullcodeline": "ret = kwarg_handlers"
    },
    {
        "line": 39,
        "fullcodeline": "elif context.return_type is None:"
    },
    {
        "line": 56,
        "fullcodeline": "ret[-1][-1].append(func_common_lll)"
    },
    {
        "line": 40,
        "fullcodeline": "exit += [[\"stop\"]]"
    },
    {
        "line": 43,
        "fullcodeline": "exit += [[\"return\", \"pass\", \"pass\"]]"
    }
]