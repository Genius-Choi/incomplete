[
    {
        "line": 2,
        "fullcodeline": "return_t = contract_sig.return_type"
    },
    {
        "line": 6,
        "fullcodeline": "return_t = calculate_type_for_external_return(return_t)"
    },
    {
        "line": 12,
        "fullcodeline": "abi_return_t = abi_type_of(return_t)"
    },
    {
        "line": 14,
        "fullcodeline": "min_return_size = abi_return_t.min_size()"
    },
    {
        "line": 15,
        "fullcodeline": "max_return_size = abi_return_t.size_bound()"
    },
    {
        "line": 18,
        "fullcodeline": "ret_ofst = buf"
    },
    {
        "line": 19,
        "fullcodeline": "ret_len = max_return_size"
    },
    {
        "line": 22,
        "fullcodeline": "ret = []"
    },
    {
        "line": 25,
        "fullcodeline": "ret += [[\"assert\", [\"gt\", \"returndatasize\", min_return_size - 1]]]"
    },
    {
        "line": 36,
        "fullcodeline": "buf = LLLnode(buf, typ=return_t, encoding=_returndata_encoding(contract_sig), location=\"memory\")"
    },
    {
        "line": 41,
        "fullcodeline": "ret += [buf]"
    },
    {
        "line": 3,
        "fullcodeline": "if return_t is None:"
    },
    {
        "line": 10,
        "fullcodeline": "should_unwrap_abi_tuple = return_t != contract_sig.return_type"
    },
    {
        "line": 43,
        "fullcodeline": "return ret, ret_ofst, ret_len"
    },
    {
        "line": 16,
        "fullcodeline": "assert 0 < min_return_size <= max_return_size"
    },
    {
        "line": 39,
        "fullcodeline": "buf = get_element_ptr(buf, 0, pos=None, array_bounds_check=False)"
    },
    {
        "line": 4,
        "fullcodeline": "return [\"pass\"], 0, 0"
    }
]