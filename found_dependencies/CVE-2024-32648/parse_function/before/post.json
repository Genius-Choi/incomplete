[
    {
        "line": 11,
        "fullcodeline": "sig = FunctionSignature.from_definition(code, sigs=sigs, custom_structs=global_ctx._structs,)"
    },
    {
        "line": 14,
        "fullcodeline": "sig.validate_return_statement_balance()"
    },
    {
        "line": 17,
        "fullcodeline": "memory_allocator = MemoryAllocator()"
    },
    {
        "line": 18,
        "fullcodeline": "context = ctx.Context("
    },
    {
        "line": 38,
        "fullcodeline": "o.context = context"
    },
    {
        "line": 39,
        "fullcodeline": "o.total_gas = o.gas + calc_mem_gas(o.context.memory_allocator.size_of_mem)"
    },
    {
        "line": 40,
        "fullcodeline": "o.func_name = sig.name"
    },
    {
        "line": 9,
        "fullcodeline": "if _vars is None:"
    },
    {
        "line": 10,
        "fullcodeline": "_vars = {}"
    },
    {
        "line": 25,
        "fullcodeline": "is_payable=sig.mutability == \"payable\","
    },
    {
        "line": 32,
        "fullcodeline": "o = parse_internal_function(code=code, sig=sig, context=context,)"
    },
    {
        "line": 34,
        "fullcodeline": "o = parse_external_function("
    },
    {
        "line": 24,
        "fullcodeline": "constancy=Constancy.Constant if sig.mutability in (\"view\", \"pure\") else Constancy.Mutable,"
    }
]