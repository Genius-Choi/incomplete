[
    {
        "line": 3,
        "fullcodeline": "if isinstance(item, vy_ast.Name):"
    },
    {
        "line": 4,
        "fullcodeline": "if item.id in BASE_TYPES:"
    },
    {
        "line": 15,
        "fullcodeline": "elif isinstance(item, vy_ast.Call) and isinstance(item.func, vy_ast.Name):"
    },
    {
        "line": 25,
        "fullcodeline": "raise InvalidType(\"Units are no longer supported\", item)"
    },
    {
        "line": 5,
        "fullcodeline": "return BaseType(item.id)"
    },
    {
        "line": 6,
        "fullcodeline": "elif (sigs is not None) and item.id in sigs:"
    },
    {
        "line": 17,
        "fullcodeline": "if item.func.id == \"address\":"
    },
    {
        "line": 21,
        "fullcodeline": "if (custom_structs is not None) and (item.func.id in custom_structs):"
    },
    {
        "line": 27,
        "fullcodeline": "elif isinstance(item, vy_ast.Subscript):"
    },
    {
        "line": 7,
        "fullcodeline": "return InterfaceType(item.id)"
    },
    {
        "line": 8,
        "fullcodeline": "elif (custom_structs is not None) and (item.id in custom_structs):"
    },
    {
        "line": 18,
        "fullcodeline": "if sigs and item.args[0].id in sigs:"
    },
    {
        "line": 22,
        "fullcodeline": "return make_struct_type("
    },
    {
        "line": 61,
        "fullcodeline": "elif isinstance(item, vy_ast.Dict):"
    },
    {
        "line": 13,
        "fullcodeline": "raise InvalidType(\"Invalid base type: \" + item.id, item)"
    },
    {
        "line": 62,
        "fullcodeline": "warnings.warn("
    },
    {
        "line": 66,
        "fullcodeline": "raise InvalidType(\"Invalid type\", item)"
    },
    {
        "line": 9,
        "fullcodeline": "return make_struct_type("
    },
    {
        "line": 19,
        "fullcodeline": "return InterfaceType(item.args[0].id)"
    },
    {
        "line": 31,
        "fullcodeline": "if not isinstance(n_val, int) or n_val <= 0:"
    },
    {
        "line": 37,
        "fullcodeline": "if getattr(item.value, \"id\", None) == \"Bytes\":"
    },
    {
        "line": 46,
        "fullcodeline": "elif item.value.id in (\"HashMap\",) and isinstance(item.slice.value, vy_ast.Tuple):"
    },
    {
        "line": 63,
        "fullcodeline": "\"Anonymous structs have been removed in\" \" favor of named structs, see VIP300\","
    },
    {
        "line": 67,
        "fullcodeline": "elif isinstance(item, vy_ast.Tuple):"
    },
    {
        "line": 32,
        "fullcodeline": "raise InvalidType("
    },
    {
        "line": 47,
        "fullcodeline": "keytype = parse_type("
    },
    {
        "line": 58,
        "fullcodeline": "raise InvalidType(\"Unknown list type.\", item)"
    },
    {
        "line": 68,
        "fullcodeline": "members = [parse_type(x, location, custom_structs=custom_structs) for x in item.elements]"
    },
    {
        "line": 71,
        "fullcodeline": "raise InvalidType(\"Invalid type\", item)"
    },
    {
        "line": 38,
        "fullcodeline": "return ByteArrayType(n_val)"
    },
    {
        "line": 39,
        "fullcodeline": "elif getattr(item.value, \"id\", None) == \"String\":"
    },
    {
        "line": 50,
        "fullcodeline": "return MappingType("
    },
    {
        "line": 69,
        "fullcodeline": "return TupleType(members)"
    },
    {
        "line": 52,
        "fullcodeline": "parse_type("
    },
    {
        "line": 40,
        "fullcodeline": "return StringType(n_val)"
    },
    {
        "line": 43,
        "fullcodeline": "return ListType("
    },
    {
        "line": 44,
        "fullcodeline": "parse_type(item.value, location, sigs, custom_structs=custom_structs,), n_val,"
    }
]