[
    {
        "line": 2,
        "fullcodeline": "_prune_unreachable_code(assembly)"
    },
    {
        "line": 4,
        "fullcodeline": "_merge_iszero(assembly)"
    },
    {
        "line": 6,
        "fullcodeline": "_merge_jumpdests(assembly)"
    },
    {
        "line": 8,
        "fullcodeline": "line_number_map = {"
    },
    {
        "line": 15,
        "fullcodeline": "posmap = {}"
    },
    {
        "line": 16,
        "fullcodeline": "sub_assemblies = []"
    },
    {
        "line": 17,
        "fullcodeline": "codes = []"
    },
    {
        "line": 18,
        "fullcodeline": "pos = start_pos"
    },
    {
        "line": 56,
        "fullcodeline": "posmap[\"_sym_codeend\"] = pos"
    },
    {
        "line": 57,
        "fullcodeline": "o = b\"\""
    },
    {
        "line": 85,
        "fullcodeline": "assert len(o) == pos - start_pos"
    },
    {
        "line": 86,
        "fullcodeline": "line_number_map[\"breakpoints\"] = list(line_number_map[\"breakpoints\"])"
    },
    {
        "line": 87,
        "fullcodeline": "line_number_map[\"pc_breakpoints\"] = list(line_number_map[\"pc_breakpoints\"])"
    },
    {
        "line": 22,
        "fullcodeline": "for i, item in enumerate(assembly):"
    },
    {
        "line": 58,
        "fullcodeline": "for i, item in enumerate(assembly):"
    },
    {
        "line": 88,
        "fullcodeline": "return o, line_number_map"
    },
    {
        "line": 23,
        "fullcodeline": "note_line_num(line_number_map, item, pos)"
    },
    {
        "line": 11,
        "fullcodeline": "\"pc_jump_map\": {0: \"-\"},"
    },
    {
        "line": 12,
        "fullcodeline": "\"pc_pos_map\": {},"
    },
    {
        "line": 24,
        "fullcodeline": "if item == \"DEBUG\":"
    },
    {
        "line": 27,
        "fullcodeline": "if item == \"JUMP\":"
    },
    {
        "line": 38,
        "fullcodeline": "if is_symbol(item):"
    },
    {
        "line": 59,
        "fullcodeline": "if item == \"DEBUG\":"
    },
    {
        "line": 28,
        "fullcodeline": "last = assembly[i - 1]"
    },
    {
        "line": 29,
        "fullcodeline": "if last == \"MLOAD\":"
    },
    {
        "line": 35,
        "fullcodeline": "elif item in (\"JUMPI\", \"JUMPDEST\"):"
    },
    {
        "line": 39,
        "fullcodeline": "if assembly[i + 1] == \"JUMPDEST\" or assembly[i + 1] == \"BLANK\":"
    },
    {
        "line": 44,
        "fullcodeline": "elif item == \"BLANK\":"
    },
    {
        "line": 61,
        "fullcodeline": "elif is_symbol(item):"
    },
    {
        "line": 30,
        "fullcodeline": "line_number_map[\"pc_jump_map\"][pos] = \"o\""
    },
    {
        "line": 36,
        "fullcodeline": "line_number_map[\"pc_jump_map\"][pos] = \"-\""
    },
    {
        "line": 41,
        "fullcodeline": "posmap[item] = pos - start_pos"
    },
    {
        "line": 43,
        "fullcodeline": "pos += 3  # PUSH2 highbits lowbits"
    },
    {
        "line": 45,
        "fullcodeline": "pos += 0"
    },
    {
        "line": 31,
        "fullcodeline": "elif is_symbol(last) and \"_priv_\" in last:"
    },
    {
        "line": 46,
        "fullcodeline": "elif isinstance(item, list):"
    },
    {
        "line": 62,
        "fullcodeline": "if assembly[i + 1] != \"JUMPDEST\" and assembly[i + 1] != \"BLANK\":"
    },
    {
        "line": 64,
        "fullcodeline": "elif isinstance(item, int):"
    },
    {
        "line": 32,
        "fullcodeline": "line_number_map[\"pc_jump_map\"][pos] = \"i\""
    },
    {
        "line": 34,
        "fullcodeline": "line_number_map[\"pc_jump_map\"][pos] = \"-\""
    },
    {
        "line": 48,
        "fullcodeline": "sub_assemblies.append(item)"
    },
    {
        "line": 49,
        "fullcodeline": "codes.append(c)"
    },
    {
        "line": 50,
        "fullcodeline": "pos += len(c)"
    },
    {
        "line": 54,
        "fullcodeline": "pos += 1"
    },
    {
        "line": 63,
        "fullcodeline": "o += bytes([PUSH_OFFSET + 2, posmap[item] // 256, posmap[item] % 256])"
    },
    {
        "line": 65,
        "fullcodeline": "o += bytes([item])"
    },
    {
        "line": 47,
        "fullcodeline": "c, sub_map = assembly_to_evm(item, start_pos=pos)"
    },
    {
        "line": 51,
        "fullcodeline": "for key in line_number_map:"
    },
    {
        "line": 66,
        "fullcodeline": "elif isinstance(item, str) and item.upper() in get_opcodes():"
    },
    {
        "line": 67,
        "fullcodeline": "o += bytes([get_opcodes()[item.upper()][0]])"
    },
    {
        "line": 68,
        "fullcodeline": "elif item[:4] == \"PUSH\":"
    },
    {
        "line": 52,
        "fullcodeline": "line_number_map[key].update(sub_map[key])"
    },
    {
        "line": 69,
        "fullcodeline": "o += bytes([PUSH_OFFSET + int(item[4:])])"
    },
    {
        "line": 70,
        "fullcodeline": "elif item[:3] == \"DUP\":"
    },
    {
        "line": 71,
        "fullcodeline": "o += bytes([DUP_OFFSET + int(item[3:])])"
    },
    {
        "line": 72,
        "fullcodeline": "elif item[:4] == \"SWAP\":"
    },
    {
        "line": 73,
        "fullcodeline": "o += bytes([SWAP_OFFSET + int(item[4:])])"
    },
    {
        "line": 74,
        "fullcodeline": "elif item == \"BLANK\":"
    },
    {
        "line": 75,
        "fullcodeline": "pass"
    },
    {
        "line": 76,
        "fullcodeline": "elif isinstance(item, list):"
    },
    {
        "line": 83,
        "fullcodeline": "raise Exception(\"Weird symbol in assembly: \" + str(item))  # pragma: no cover"
    },
    {
        "line": 77,
        "fullcodeline": "for j in range(len(sub_assemblies)):"
    },
    {
        "line": 78,
        "fullcodeline": "if sub_assemblies[j] == item:"
    },
    {
        "line": 79,
        "fullcodeline": "o += codes[j]"
    }
]