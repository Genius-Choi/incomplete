[
    {
        "line": 4,
        "fullcodeline": "output_placeholder = context.new_internal_variable(typ=sig.output_type)"
    },
    {
        "line": 5,
        "fullcodeline": "output_size = get_size_of_type(sig.output_type) * 32"
    },
    {
        "line": 2,
        "fullcodeline": "if not sig.output_type:"
    },
    {
        "line": 6,
        "fullcodeline": "if isinstance(sig.output_type, BaseType):"
    },
    {
        "line": 22,
        "fullcodeline": "return output_placeholder, output_size, returner"
    },
    {
        "line": 7,
        "fullcodeline": "returner = [0, output_placeholder]"
    },
    {
        "line": 3,
        "fullcodeline": "return 0, 0, []"
    },
    {
        "line": 8,
        "fullcodeline": "elif isinstance(sig.output_type, ByteArrayLike):"
    },
    {
        "line": 9,
        "fullcodeline": "returner = [0, output_placeholder + 32]"
    },
    {
        "line": 10,
        "fullcodeline": "elif isinstance(sig.output_type, TupleLike):"
    },
    {
        "line": 12,
        "fullcodeline": "returner = [\"seq\"]"
    },
    {
        "line": 13,
        "fullcodeline": "decoded_placeholder = context.new_internal_variable(typ=sig.output_type)"
    },
    {
        "line": 14,
        "fullcodeline": "decoded_node = LLLnode(decoded_placeholder, typ=sig.output_type, location=\"memory\")"
    },
    {
        "line": 15,
        "fullcodeline": "output_node = LLLnode(output_placeholder, typ=sig.output_type, location=\"memory\")"
    },
    {
        "line": 16,
        "fullcodeline": "returner.append(abi_decode(decoded_node, output_node))"
    },
    {
        "line": 17,
        "fullcodeline": "returner.extend([0, decoded_placeholder])"
    },
    {
        "line": 18,
        "fullcodeline": "elif isinstance(sig.output_type, ListType):"
    },
    {
        "line": 19,
        "fullcodeline": "returner = [0, output_placeholder]"
    },
    {
        "line": 21,
        "fullcodeline": "raise TypeCheckFailure(f\"Invalid output type: {sig.output_type}\")"
    }
]