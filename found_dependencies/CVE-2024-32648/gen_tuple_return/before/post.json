[
    {
        "line": 2,
        "fullcodeline": "abi_typ = abi_type_of(context.return_type)"
    },
    {
        "line": 13,
        "fullcodeline": "abi_typ = ensure_tuple(abi_typ)"
    },
    {
        "line": 14,
        "fullcodeline": "abi_bytes_needed = abi_typ.static_size() + abi_typ.dynamic_size_bound()"
    },
    {
        "line": 15,
        "fullcodeline": "dst = context.memory_allocator.expand_memory(abi_bytes_needed)"
    },
    {
        "line": 16,
        "fullcodeline": "return_buffer = LLLnode("
    },
    {
        "line": 20,
        "fullcodeline": "check_assign(return_buffer, sub, pos=getpos(stmt))"
    },
    {
        "line": 76,
        "fullcodeline": "sub_loc = LLLnode(\"sub_loc\", typ=sub.typ, location=sub.location)"
    },
    {
        "line": 77,
        "fullcodeline": "encode_out = abi_encode(return_buffer, sub_loc, pos=getpos(stmt), returns_len=True)"
    },
    {
        "line": 78,
        "fullcodeline": "load_return_len = [\"mload\", MemoryPositions.FREE_VAR_SPACE]"
    },
    {
        "line": 79,
        "fullcodeline": "os = ["
    },
    {
        "line": 22,
        "fullcodeline": "if sub.value == \"multi\":"
    },
    {
        "line": 60,
        "fullcodeline": "if sub.value == \"seq_unchecked\" and sub.args[-1].value == \"multi\":"
    },
    {
        "line": 89,
        "fullcodeline": "return LLLnode.from_list(os, typ=None, pos=getpos(stmt), valency=0)"
    },
    {
        "line": 49,
        "fullcodeline": "encode_out = abi_encode(return_buffer, sub, pos=getpos(stmt), returns_len=True)"
    },
    {
        "line": 50,
        "fullcodeline": "load_return_len = [\"mload\", MemoryPositions.FREE_VAR_SPACE]"
    },
    {
        "line": 51,
        "fullcodeline": "os = ["
    },
    {
        "line": 61,
        "fullcodeline": "encode_out = abi_encode(return_buffer, sub.args[-1], pos=getpos(stmt), returns_len=True)"
    },
    {
        "line": 62,
        "fullcodeline": "load_return_len = [\"mload\", MemoryPositions.FREE_VAR_SPACE]"
    },
    {
        "line": 63,
        "fullcodeline": "os = ("
    },
    {
        "line": 83,
        "fullcodeline": "["
    },
    {
        "line": 24,
        "fullcodeline": "if isinstance(context.return_type, TupleType) and not abi_typ.dynamic_size_bound():"
    },
    {
        "line": 56,
        "fullcodeline": "return LLLnode.from_list(os, typ=None, pos=getpos(stmt), valency=0)"
    },
    {
        "line": 64,
        "fullcodeline": "[\"seq\"]"
    },
    {
        "line": 71,
        "fullcodeline": "return LLLnode.from_list(os, typ=None, pos=getpos(stmt), valency=0)"
    },
    {
        "line": 85,
        "fullcodeline": "[\"mstore\", MemoryPositions.FREE_VAR_SPACE, encode_out],"
    },
    {
        "line": 86,
        "fullcodeline": "make_return_stmt(stmt, context, return_buffer, load_return_len),"
    },
    {
        "line": 29,
        "fullcodeline": "new_sub = LLLnode.from_list("
    },
    {
        "line": 34,
        "fullcodeline": "setter = make_setter(new_sub, sub, \"memory\", pos=getpos(stmt))"
    },
    {
        "line": 53,
        "fullcodeline": "[\"mstore\", MemoryPositions.FREE_VAR_SPACE, encode_out],"
    },
    {
        "line": 54,
        "fullcodeline": "make_return_stmt(stmt, context, return_buffer, load_return_len),"
    },
    {
        "line": 66,
        "fullcodeline": "+ ["
    },
    {
        "line": 35,
        "fullcodeline": "return LLLnode.from_list("
    },
    {
        "line": 65,
        "fullcodeline": "+ sub.args[:-1]"
    },
    {
        "line": 67,
        "fullcodeline": "[\"mstore\", MemoryPositions.FREE_VAR_SPACE, encode_out],"
    },
    {
        "line": 68,
        "fullcodeline": "make_return_stmt(stmt, context, return_buffer, load_return_len),"
    },
    {
        "line": 30,
        "fullcodeline": "context.new_internal_variable(context.return_type),"
    },
    {
        "line": 36,
        "fullcodeline": "["
    },
    {
        "line": 44,
        "fullcodeline": "pos=getpos(stmt),"
    },
    {
        "line": 39,
        "fullcodeline": "make_return_stmt("
    },
    {
        "line": 40,
        "fullcodeline": "stmt, context, new_sub, get_size_of_type(context.return_type) * 32,"
    }
]