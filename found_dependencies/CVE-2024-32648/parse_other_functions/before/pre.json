[
    {
        "line": 3,
        "fullcodeline": "func_types = [i._metadata[\"type\"] for i in global_ctx._defs]"
    },
    {
        "line": 4,
        "fullcodeline": "mutabilities = [i.mutability for i in func_types if i.visibility == FunctionVisibility.EXTERNAL]"
    },
    {
        "line": 5,
        "fullcodeline": "has_payable = next((True for i in mutabilities if i == StateMutability.PAYABLE), False)"
    },
    {
        "line": 6,
        "fullcodeline": "has_nonpayable = next((True for i in mutabilities if i != StateMutability.PAYABLE), False)"
    },
    {
        "line": 7,
        "fullcodeline": "is_default_payable = ("
    },
    {
        "line": 13,
        "fullcodeline": "check_per_function = is_default_payable and has_nonpayable"
    },
    {
        "line": 16,
        "fullcodeline": "payable_func_sub = [\"seq\"]"
    },
    {
        "line": 17,
        "fullcodeline": "external_func_sub = [\"seq\"]"
    },
    {
        "line": 18,
        "fullcodeline": "internal_func_sub = [\"seq\"]"
    },
    {
        "line": 19,
        "fullcodeline": "add_gas = func_init_lll().gas"
    },
    {
        "line": 64,
        "fullcodeline": "main_seq = ["
    },
    {
        "line": 72,
        "fullcodeline": "o.append([\"return\", 0, [\"lll\", main_seq, 0]])"
    },
    {
        "line": 8,
        "fullcodeline": "default_function is not None"
    },
    {
        "line": 21,
        "fullcodeline": "for func_node in otherfuncs:"
    },
    {
        "line": 73,
        "fullcodeline": "return o, main_seq"
    },
    {
        "line": 9,
        "fullcodeline": "and default_function._metadata[\"type\"].mutability == StateMutability.PAYABLE"
    },
    {
        "line": 41,
        "fullcodeline": "fallback_lll = parse_function("
    },
    {
        "line": 49,
        "fullcodeline": "fallback_lll = LLLnode.from_list([\"revert\", 0, 0], typ=None, annotation=\"Default function\")"
    },
    {
        "line": 52,
        "fullcodeline": "external_seq = [\"seq\", payable_func_sub, external_func_sub]"
    },
    {
        "line": 56,
        "fullcodeline": "external_seq = [\"seq\"]"
    },
    {
        "line": 67,
        "fullcodeline": "[\"with\", \"_func_sig\", [\"mload\", 0], external_seq],"
    },
    {
        "line": 68,
        "fullcodeline": "[\"seq_unchecked\", [\"label\", \"fallback\"], fallback_lll],"
    },
    {
        "line": 22,
        "fullcodeline": "func_type = func_node._metadata[\"type\"]"
    },
    {
        "line": 23,
        "fullcodeline": "func_lll = parse_function("
    },
    {
        "line": 34,
        "fullcodeline": "func_lll.total_gas += add_gas"
    },
    {
        "line": 26,
        "fullcodeline": "if func_type.visibility == FunctionVisibility.INTERNAL:"
    },
    {
        "line": 35,
        "fullcodeline": "for sig in sig_utils.generate_default_arg_sigs(func_node, external_interfaces, global_ctx):"
    },
    {
        "line": 46,
        "fullcodeline": "check_per_function or not otherfuncs,"
    },
    {
        "line": 58,
        "fullcodeline": "external_seq.append(payable_func_sub)"
    },
    {
        "line": 60,
        "fullcodeline": "external_seq.extend([[\"assert\", [\"iszero\", \"callvalue\"]], external_func_sub])"
    },
    {
        "line": 27,
        "fullcodeline": "internal_func_sub.append(func_lll)"
    },
    {
        "line": 43,
        "fullcodeline": "{**{\"self\": sigs}, **external_interfaces},"
    },
    {
        "line": 24,
        "fullcodeline": "func_node, {**{\"self\": sigs}, **external_interfaces}, global_ctx, check_per_function"
    },
    {
        "line": 28,
        "fullcodeline": "elif func_type.mutability == StateMutability.PAYABLE:"
    },
    {
        "line": 36,
        "fullcodeline": "sig.gas = func_lll.total_gas"
    },
    {
        "line": 37,
        "fullcodeline": "sigs[sig.sig] = sig"
    },
    {
        "line": 29,
        "fullcodeline": "add_gas += 30"
    },
    {
        "line": 30,
        "fullcodeline": "payable_func_sub.append(func_lll)"
    },
    {
        "line": 32,
        "fullcodeline": "external_func_sub.append(func_lll)"
    },
    {
        "line": 33,
        "fullcodeline": "add_gas += 30"
    }
]