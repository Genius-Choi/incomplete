[
    {
        "line": 2,
        "fullcodeline": "funcs = [func for func in abi if func[\"type\"] == \"function\"]"
    },
    {
        "line": 3,
        "fullcodeline": "sigs = []"
    },
    {
        "line": 5,
        "fullcodeline": "for func in funcs:"
    },
    {
        "line": 6,
        "fullcodeline": "args = []"
    },
    {
        "line": 7,
        "fullcodeline": "returns = None"
    },
    {
        "line": 24,
        "fullcodeline": "decorator_list = [vy_ast.Name(id=\"external\")]"
    },
    {
        "line": 35,
        "fullcodeline": "sig = FunctionSignature.from_definition("
    },
    {
        "line": 45,
        "fullcodeline": "sigs.append(sig)"
    },
    {
        "line": 8,
        "fullcodeline": "for a in func[\"inputs\"]:"
    },
    {
        "line": 17,
        "fullcodeline": "if len(func[\"outputs\"]) == 1:"
    },
    {
        "line": 26,
        "fullcodeline": "if (\"constant\" in func and func[\"constant\"]) or ("
    },
    {
        "line": 30,
        "fullcodeline": "if (\"payable\" in func and func[\"payable\"]) or ("
    },
    {
        "line": 18,
        "fullcodeline": "returns = abi_type_to_ast(func[\"outputs\"][0][\"type\"], 1)"
    },
    {
        "line": 27,
        "fullcodeline": "\"stateMutability\" in func and func[\"stateMutability\"] == \"view\""
    },
    {
        "line": 29,
        "fullcodeline": "decorator_list.append(vy_ast.Name(id=\"view\"))"
    },
    {
        "line": 31,
        "fullcodeline": "\"stateMutability\" in func and func[\"stateMutability\"] == \"payable\""
    },
    {
        "line": 33,
        "fullcodeline": "decorator_list.append(vy_ast.Name(id=\"payable\"))"
    },
    {
        "line": 36,
        "fullcodeline": "func_ast=vy_ast.FunctionDef("
    },
    {
        "line": 9,
        "fullcodeline": "arg = vy_ast.arg("
    },
    {
        "line": 15,
        "fullcodeline": "args.append(arg)"
    },
    {
        "line": 19,
        "fullcodeline": "elif len(func[\"outputs\"]) > 1:"
    },
    {
        "line": 38,
        "fullcodeline": "args=vy_ast.arguments(args=args),"
    },
    {
        "line": 20,
        "fullcodeline": "returns = vy_ast.Tuple("
    },
    {
        "line": 11,
        "fullcodeline": "annotation=abi_type_to_ast(a[\"type\"], 1048576),"
    },
    {
        "line": 21,
        "fullcodeline": "elements=[abi_type_to_ast(a[\"type\"], 1) for a in func[\"outputs\"]]"
    }
]