[
    {
        "line": 2,
        "fullcodeline": "t = lll_node.typ"
    },
    {
        "line": 3,
        "fullcodeline": "if isinstance(t, ByteArrayLike):"
    },
    {
        "line": 5,
        "fullcodeline": "if isinstance(t, BaseType):"
    },
    {
        "line": 6,
        "fullcodeline": "lll_node = unwrap_location(lll_node)"
    },
    {
        "line": 4,
        "fullcodeline": "return [\"assert\", [\"le\", get_bytearray_length(lll_node), t.maxlen]]"
    },
    {
        "line": 7,
        "fullcodeline": "if t.typ in (\"int128\"):"
    },
    {
        "line": 9,
        "fullcodeline": "if t.typ in (\"decimal\"):"
    },
    {
        "line": 17,
        "fullcodeline": "if t.typ in (\"address\",):"
    },
    {
        "line": 19,
        "fullcodeline": "if t.typ in (\"bool\",):"
    },
    {
        "line": 21,
        "fullcodeline": "if t.typ in (\"int256\", \"uint256\", \"bytes32\"):"
    },
    {
        "line": 8,
        "fullcodeline": "return int_clamp(lll_node, 128, signed=True)"
    },
    {
        "line": 10,
        "fullcodeline": "return ["
    },
    {
        "line": 18,
        "fullcodeline": "return int_clamp(lll_node, 160)"
    },
    {
        "line": 20,
        "fullcodeline": "return int_clamp(lll_node, 1)"
    },
    {
        "line": 22,
        "fullcodeline": "return [\"pass\"]  # special case, no clamp"
    },
    {
        "line": 12,
        "fullcodeline": "[\"mload\", MemoryPositions.MINDECIMAL],"
    },
    {
        "line": 14,
        "fullcodeline": "[\"mload\", MemoryPositions.MAXDECIMAL],"
    }
]