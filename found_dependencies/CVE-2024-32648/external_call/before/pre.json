[
    {
        "line": 2,
        "fullcodeline": "from vyper.old_codegen.expr import Expr"
    },
    {
        "line": 9,
        "fullcodeline": "method_name = node.func.attr"
    },
    {
        "line": 10,
        "fullcodeline": "sig = context.sigs[interface_name][method_name]"
    },
    {
        "line": 19,
        "fullcodeline": "sub = [\"seq\"]"
    },
    {
        "line": 106,
        "fullcodeline": "sub.extend(returner)"
    },
    {
        "line": 4,
        "fullcodeline": "if value is None:"
    },
    {
        "line": 6,
        "fullcodeline": "if gas is None:"
    },
    {
        "line": 11,
        "fullcodeline": "inargs, inargsize, _ = pack_arguments("
    },
    {
        "line": 18,
        "fullcodeline": "output_placeholder, output_size, returner = get_external_call_output(sig, context)"
    },
    {
        "line": 20,
        "fullcodeline": "if not output_size:"
    },
    {
        "line": 24,
        "fullcodeline": "if context.is_constant() and sig.mutability not in (\"view\", \"pure\"):"
    },
    {
        "line": 32,
        "fullcodeline": "if context.is_constant() or sig.mutability in (\"view\", \"pure\"):"
    },
    {
        "line": 108,
        "fullcodeline": "return LLLnode.from_list(sub, typ=sig.output_type, location=\"memory\", pos=getpos(node))"
    },
    {
        "line": 5,
        "fullcodeline": "value = 0"
    },
    {
        "line": 7,
        "fullcodeline": "gas = \"gas\""
    },
    {
        "line": 23,
        "fullcodeline": "sub.append([\"assert\", [\"extcodesize\", contract_address]])"
    },
    {
        "line": 26,
        "fullcodeline": "raise StateAccessViolation("
    },
    {
        "line": 33,
        "fullcodeline": "sub.append("
    },
    {
        "line": 48,
        "fullcodeline": "sub.append("
    },
    {
        "line": 65,
        "fullcodeline": "output_type = sig.output_type"
    },
    {
        "line": 34,
        "fullcodeline": "["
    },
    {
        "line": 49,
        "fullcodeline": "["
    },
    {
        "line": 66,
        "fullcodeline": "if not has_dynamic_data(output_type):"
    },
    {
        "line": 13,
        "fullcodeline": "[Expr(arg, context).lll_node for arg in node.args],"
    },
    {
        "line": 27,
        "fullcodeline": "f\"May not call state modifying function '{method_name}' \""
    },
    {
        "line": 36,
        "fullcodeline": "["
    },
    {
        "line": 51,
        "fullcodeline": "["
    },
    {
        "line": 67,
        "fullcodeline": "static_output_size = get_static_size_of_type(output_type) * 32"
    },
    {
        "line": 68,
        "fullcodeline": "sub.append([\"assert\", [\"gt\", \"returndatasize\", static_output_size - 1]])"
    },
    {
        "line": 77,
        "fullcodeline": "dynamic_checks = []"
    },
    {
        "line": 78,
        "fullcodeline": "static_offset = output_placeholder"
    },
    {
        "line": 79,
        "fullcodeline": "static_output_size = 0"
    },
    {
        "line": 103,
        "fullcodeline": "sub.append([\"assert\", [\"gt\", \"returndatasize\", static_output_size - 1]])"
    },
    {
        "line": 104,
        "fullcodeline": "sub.extend(dynamic_checks)"
    },
    {
        "line": 28,
        "fullcodeline": "f\"within {context.pp_constancy()}.\","
    },
    {
        "line": 70,
        "fullcodeline": "if isinstance(output_type, ByteArrayLike):"
    },
    {
        "line": 80,
        "fullcodeline": "for typ in types_list:"
    },
    {
        "line": 71,
        "fullcodeline": "types_list = (output_type,)"
    },
    {
        "line": 72,
        "fullcodeline": "elif isinstance(output_type, TupleLike):"
    },
    {
        "line": 100,
        "fullcodeline": "static_offset += get_static_size_of_type(typ) * 32"
    },
    {
        "line": 101,
        "fullcodeline": "static_output_size += get_static_size_of_type(typ) * 32"
    },
    {
        "line": 73,
        "fullcodeline": "types_list = output_type.tuple_members()"
    },
    {
        "line": 75,
        "fullcodeline": "raise"
    },
    {
        "line": 82,
        "fullcodeline": "if isinstance(typ, ByteArrayLike):"
    },
    {
        "line": 83,
        "fullcodeline": "static_output_size += 32"
    },
    {
        "line": 86,
        "fullcodeline": "if not sig.is_from_json:"
    },
    {
        "line": 87,
        "fullcodeline": "dynamic_checks.append("
    },
    {
        "line": 88,
        "fullcodeline": "["
    },
    {
        "line": 90,
        "fullcodeline": "["
    },
    {
        "line": 92,
        "fullcodeline": "["
    },
    {
        "line": 94,
        "fullcodeline": "[\"add\", [\"mload\", static_offset], output_placeholder],"
    }
]