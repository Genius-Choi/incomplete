[
    {
        "line": 3,
        "fullcodeline": "from vyper.old_codegen.abi import abi_type_of"
    },
    {
        "line": 7,
        "fullcodeline": "def _abi_helper(member_t, ofst, clamp=True):"
    },
    {
        "line": 5,
        "fullcodeline": "typ, location = parent.typ, parent.location"
    },
    {
        "line": 39,
        "fullcodeline": "if isinstance(typ, TupleLike):"
    },
    {
        "line": 40,
        "fullcodeline": "if isinstance(typ, StructType):"
    },
    {
        "line": 51,
        "fullcodeline": "if parent.value is None:"
    },
    {
        "line": 54,
        "fullcodeline": "if parent.value == \"multi\":"
    },
    {
        "line": 58,
        "fullcodeline": "if parent.encoding in (Encoding.ABI, Encoding.JSON_ABI):"
    },
    {
        "line": 73,
        "fullcodeline": "if location == \"storage\":"
    },
    {
        "line": 95,
        "fullcodeline": "elif isinstance(typ, ListType) and is_base_type(key.typ, (\"int128\", \"int256\", \"uint256\")):"
    },
    {
        "line": 42,
        "fullcodeline": "attrs = list(typ.tuple_keys())"
    },
    {
        "line": 43,
        "fullcodeline": "index = attrs.index(key)"
    },
    {
        "line": 44,
        "fullcodeline": "annotation = key"
    },
    {
        "line": 46,
        "fullcodeline": "attrs = list(range(len(typ.members)))"
    },
    {
        "line": 47,
        "fullcodeline": "index = key"
    },
    {
        "line": 48,
        "fullcodeline": "annotation = None"
    },
    {
        "line": 55,
        "fullcodeline": "assert parent.encoding != Encoding.ABI, \"no abi-encoded literals\""
    },
    {
        "line": 65,
        "fullcodeline": "ofst = 0  # offset from parent start"
    },
    {
        "line": 76,
        "fullcodeline": "offset = 0"
    },
    {
        "line": 96,
        "fullcodeline": "subtype = typ.subtype"
    },
    {
        "line": 101,
        "fullcodeline": "k = unwrap_location(key)"
    },
    {
        "line": 52,
        "fullcodeline": "return LLLnode.from_list(None, typ=subtype)"
    },
    {
        "line": 59,
        "fullcodeline": "if parent.location == \"storage\":"
    },
    {
        "line": 67,
        "fullcodeline": "for i in range(index):"
    },
    {
        "line": 71,
        "fullcodeline": "return _abi_helper(member_t, ofst)"
    },
    {
        "line": 77,
        "fullcodeline": "for i in range(index):"
    },
    {
        "line": 79,
        "fullcodeline": "return LLLnode.from_list("
    },
    {
        "line": 83,
        "fullcodeline": "elif location in (\"calldata\", \"memory\", \"code\"):"
    },
    {
        "line": 98,
        "fullcodeline": "if parent.value is None:"
    },
    {
        "line": 102,
        "fullcodeline": "if not array_bounds_check:"
    },
    {
        "line": 116,
        "fullcodeline": "if parent.encoding in (Encoding.ABI, Encoding.JSON_ABI):"
    },
    {
        "line": 131,
        "fullcodeline": "if location == \"storage\":"
    },
    {
        "line": 143,
        "fullcodeline": "elif isinstance(typ, MappingType):"
    },
    {
        "line": 60,
        "fullcodeline": "raise CompilerPanic(\"storage variables should not be abi encoded\")"
    },
    {
        "line": 80,
        "fullcodeline": "[\"add\", parent, offset], typ=subtype, location=\"storage\", pos=pos,"
    },
    {
        "line": 84,
        "fullcodeline": "offset = 0"
    },
    {
        "line": 103,
        "fullcodeline": "sub = k"
    },
    {
        "line": 120,
        "fullcodeline": "member_t = typ.subtype"
    },
    {
        "line": 121,
        "fullcodeline": "member_abi_t = abi_type_of(member_t)"
    },
    {
        "line": 133,
        "fullcodeline": "offset = get_size_of_type(subtype)"
    },
    {
        "line": 144,
        "fullcodeline": "sub = None"
    },
    {
        "line": 68,
        "fullcodeline": "member_abi_t = abi_type_of(typ.members[attrs[i]])"
    },
    {
        "line": 69,
        "fullcodeline": "ofst += member_abi_t.embedded_static_size()"
    },
    {
        "line": 78,
        "fullcodeline": "offset += get_size_of_type(typ.members[attrs[i]])"
    },
    {
        "line": 85,
        "fullcodeline": "for i in range(index):"
    },
    {
        "line": 87,
        "fullcodeline": "return LLLnode.from_list("
    },
    {
        "line": 99,
        "fullcodeline": "return LLLnode.from_list(None, typ=subtype)"
    },
    {
        "line": 117,
        "fullcodeline": "if parent.location == \"storage\":"
    },
    {
        "line": 129,
        "fullcodeline": "return _abi_helper(member_t, ofst)"
    },
    {
        "line": 134,
        "fullcodeline": "return LLLnode.from_list("
    },
    {
        "line": 137,
        "fullcodeline": "elif location in (\"calldata\", \"memory\", \"code\"):"
    },
    {
        "line": 145,
        "fullcodeline": "if isinstance(key.typ, ByteArrayLike):"
    },
    {
        "line": 171,
        "fullcodeline": "if sub is not None and location == \"storage\":"
    },
    {
        "line": 88,
        "fullcodeline": "_add_ofst(parent, offset),"
    },
    {
        "line": 108,
        "fullcodeline": "sub = k"
    },
    {
        "line": 114,
        "fullcodeline": "sub = [\"uclamplt\", k, typ.count]"
    },
    {
        "line": 118,
        "fullcodeline": "raise CompilerPanic(\"storage variables should not be abi encoded\")"
    },
    {
        "line": 125,
        "fullcodeline": "ofst = k.value * member_abi_t.embedded_static_size()"
    },
    {
        "line": 127,
        "fullcodeline": "ofst = [\"mul\", k, member_abi_t.embedded_static_size()]"
    },
    {
        "line": 135,
        "fullcodeline": "[\"add\", parent, [\"mul\", sub, offset]], typ=subtype, location=\"storage\", pos=pos"
    },
    {
        "line": 138,
        "fullcodeline": "offset = 32 * get_size_of_type(subtype)"
    },
    {
        "line": 168,
        "fullcodeline": "subtype = typ.valuetype"
    },
    {
        "line": 169,
        "fullcodeline": "sub = unwrap_location(key)"
    },
    {
        "line": 86,
        "fullcodeline": "offset += 32 * get_size_of_type(typ.members[attrs[i]])"
    },
    {
        "line": 106,
        "fullcodeline": "if key.value < 0 or key.value >= typ.count:"
    },
    {
        "line": 139,
        "fullcodeline": "return LLLnode.from_list("
    },
    {
        "line": 147,
        "fullcodeline": "if isinstance(typ.keytype, ByteArrayLike) and (typ.keytype.maxlen >= key.typ.maxlen):"
    },
    {
        "line": 172,
        "fullcodeline": "return LLLnode.from_list([\"sha3_64\", parent, sub], typ=subtype, location=\"storage\")"
    },
    {
        "line": 140,
        "fullcodeline": "[\"add\", [\"mul\", offset, sub], parent], typ=subtype, location=location, pos=pos"
    },
    {
        "line": 148,
        "fullcodeline": "subtype = typ.valuetype"
    },
    {
        "line": 149,
        "fullcodeline": "if len(key.args[0].args) >= 3:  # handle bytes literal."
    },
    {
        "line": 150,
        "fullcodeline": "sub = LLLnode.from_list("
    },
    {
        "line": 166,
        "fullcodeline": "sub = LLLnode.from_list([\"sha3\", [\"add\", value, 32], key])"
    },
    {
        "line": 163,
        "fullcodeline": "if value == \"add\":"
    },
    {
        "line": 151,
        "fullcodeline": "["
    },
    {
        "line": 165,
        "fullcodeline": "value = key.args[0]"
    },
    {
        "line": 154,
        "fullcodeline": "["
    },
    {
        "line": 156,
        "fullcodeline": "[\"add\", key.args[0].args[-1], 32],"
    },
    {
        "line": 157,
        "fullcodeline": "[\"mload\", key.args[0].args[-1]],"
    }
]