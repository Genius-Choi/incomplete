[
    {
        "line": 3,
        "fullcodeline": "if isinstance(left.typ, BaseType):"
    },
    {
        "line": 4,
        "fullcodeline": "right = unwrap_location(right)"
    },
    {
        "line": 5,
        "fullcodeline": "if location == \"storage\":"
    },
    {
        "line": 10,
        "fullcodeline": "elif isinstance(left.typ, ByteArrayLike):"
    },
    {
        "line": 6,
        "fullcodeline": "return LLLnode.from_list([\"sstore\", left, right], typ=None)"
    },
    {
        "line": 11,
        "fullcodeline": "return make_byte_array_copier(left, right, pos)"
    },
    {
        "line": 13,
        "fullcodeline": "elif isinstance(left.typ, MappingType):"
    },
    {
        "line": 8,
        "fullcodeline": "return LLLnode.from_list([\"mstore\", left, right], typ=None)"
    },
    {
        "line": 14,
        "fullcodeline": "raise TypeMismatch(\"Cannot copy mappings; can only copy individual elements\", pos)"
    },
    {
        "line": 16,
        "fullcodeline": "elif isinstance(left.typ, ListType):"
    },
    {
        "line": 25,
        "fullcodeline": "left_token = LLLnode.from_list(\"_L\", typ=left.typ, location=left.location)"
    },
    {
        "line": 18,
        "fullcodeline": "if left.value == \"multi\":"
    },
    {
        "line": 22,
        "fullcodeline": "if right.typ.count != left.typ.count:"
    },
    {
        "line": 27,
        "fullcodeline": "if right.value in [\"multi\", \"seq_unchecked\"] and right.typ.is_literal:"
    },
    {
        "line": 79,
        "fullcodeline": "elif isinstance(left.typ, TupleLike):"
    },
    {
        "line": 20,
        "fullcodeline": "if not isinstance(right.typ, ListType):"
    },
    {
        "line": 98,
        "fullcodeline": "left_token = LLLnode.from_list(\"_L\", typ=left.typ, location=left.location)"
    },
    {
        "line": 99,
        "fullcodeline": "keyz = left.typ.tuple_keys()"
    },
    {
        "line": 35,
        "fullcodeline": "for i in range(left.typ.count):"
    },
    {
        "line": 42,
        "fullcodeline": "elif right.value is None:"
    },
    {
        "line": 82,
        "fullcodeline": "if right.value is not None:"
    },
    {
        "line": 102,
        "fullcodeline": "if left.value == \"multi\":"
    },
    {
        "line": 108,
        "fullcodeline": "if right.value == \"multi\":"
    },
    {
        "line": 31,
        "fullcodeline": "subs = right.args[:-1]"
    },
    {
        "line": 34,
        "fullcodeline": "subs = []"
    },
    {
        "line": 38,
        "fullcodeline": "if left.location == \"memory\" and isinstance(left.value, int):"
    },
    {
        "line": 48,
        "fullcodeline": "subs = []"
    },
    {
        "line": 66,
        "fullcodeline": "right_token = LLLnode.from_list(\"_R\", typ=right.typ, location=right.location)"
    },
    {
        "line": 67,
        "fullcodeline": "subs = []"
    },
    {
        "line": 72,
        "fullcodeline": "lll_node = [\"seq\"] + subs"
    },
    {
        "line": 80,
        "fullcodeline": "if left.value == \"multi\" and isinstance(left.typ, StructType):"
    },
    {
        "line": 103,
        "fullcodeline": "locations = [arg.location for arg in left.args]"
    },
    {
        "line": 105,
        "fullcodeline": "locations = [location for _ in keyz]"
    },
    {
        "line": 114,
        "fullcodeline": "right_args = dict(zip(right.typ.tuple_keys(), right.args))"
    },
    {
        "line": 115,
        "fullcodeline": "subs = []"
    },
    {
        "line": 36,
        "fullcodeline": "lhs_setter = _make_array_index_setter(left, left_token, pos, location, i)"
    },
    {
        "line": 37,
        "fullcodeline": "subs.append(make_setter(lhs_setter, right.args[i], location, pos=pos,))"
    },
    {
        "line": 39,
        "fullcodeline": "return LLLnode.from_list([\"seq\"] + subs, typ=None)"
    },
    {
        "line": 41,
        "fullcodeline": "return LLLnode.from_list([\"with\", \"_L\", left, [\"seq\"] + subs], typ=None)"
    },
    {
        "line": 43,
        "fullcodeline": "if right.typ != left.typ:"
    },
    {
        "line": 45,
        "fullcodeline": "if left.location == \"memory\":"
    },
    {
        "line": 49,
        "fullcodeline": "for i in range(left.typ.count):"
    },
    {
        "line": 63,
        "fullcodeline": "return LLLnode.from_list([\"with\", \"_L\", left, [\"seq\"] + subs], typ=None)"
    },
    {
        "line": 68,
        "fullcodeline": "for i in range(left.typ.count):"
    },
    {
        "line": 77,
        "fullcodeline": "return LLLnode.from_list(lll_node, typ=None)"
    },
    {
        "line": 85,
        "fullcodeline": "if isinstance(left.typ, StructType):"
    },
    {
        "line": 116,
        "fullcodeline": "for (key, loc) in zip(keyz, locations):"
    },
    {
        "line": 125,
        "fullcodeline": "return LLLnode.from_list([\"with\", \"_L\", left, [\"seq\"] + subs], typ=None)"
    },
    {
        "line": 127,
        "fullcodeline": "elif right.value is None:"
    },
    {
        "line": 73,
        "fullcodeline": "if right.location != \"memory\" or not isinstance(right.value, int):"
    },
    {
        "line": 74,
        "fullcodeline": "lll_node = [\"with\", \"_R\", right, lll_node]"
    },
    {
        "line": 75,
        "fullcodeline": "if left.location != \"memory\" or not isinstance(left.value, int):"
    },
    {
        "line": 76,
        "fullcodeline": "lll_node = [\"with\", \"_L\", left, lll_node]"
    },
    {
        "line": 83,
        "fullcodeline": "if not isinstance(right.typ, left.typ.__class__):"
    },
    {
        "line": 109,
        "fullcodeline": "if len(right.args) != len(keyz):"
    },
    {
        "line": 134,
        "fullcodeline": "subs = []"
    },
    {
        "line": 46,
        "fullcodeline": "return mzero(left, 32 * get_size_of_type(left.typ))"
    },
    {
        "line": 50,
        "fullcodeline": "subs.append("
    },
    {
        "line": 69,
        "fullcodeline": "lhs_setter = _make_array_index_setter(left, left_token, pos, left.location, i)"
    },
    {
        "line": 70,
        "fullcodeline": "rhs_setter = _make_array_index_setter(right, right_token, pos, right.location, i)"
    },
    {
        "line": 71,
        "fullcodeline": "subs.append(make_setter(lhs_setter, rhs_setter, location, pos=pos,))"
    },
    {
        "line": 86,
        "fullcodeline": "for k in left.typ.members:"
    },
    {
        "line": 89,
        "fullcodeline": "for k in right.typ.members:"
    },
    {
        "line": 92,
        "fullcodeline": "if left.typ.name != right.typ.name:"
    },
    {
        "line": 117,
        "fullcodeline": "subs.append("
    },
    {
        "line": 128,
        "fullcodeline": "if left.typ != right.typ:"
    },
    {
        "line": 131,
        "fullcodeline": "if left.location == \"memory\":"
    },
    {
        "line": 135,
        "fullcodeline": "for key, loc in zip(keyz, locations):"
    },
    {
        "line": 144,
        "fullcodeline": "return LLLnode.from_list([\"with\", \"_L\", left, [\"seq\"] + subs], typ=None)"
    },
    {
        "line": 51,
        "fullcodeline": "make_setter("
    },
    {
        "line": 95,
        "fullcodeline": "if len(left.typ.members) != len(right.typ.members):"
    },
    {
        "line": 118,
        "fullcodeline": "make_setter("
    },
    {
        "line": 146,
        "fullcodeline": "elif isinstance(left.typ, TupleType) and isinstance(right.typ, TupleType):"
    },
    {
        "line": 147,
        "fullcodeline": "subs = []"
    },
    {
        "line": 152,
        "fullcodeline": "right_token = LLLnode.from_list(\"_R\", typ=right.typ, location=right.location)"
    },
    {
        "line": 165,
        "fullcodeline": "subs = []"
    },
    {
        "line": 166,
        "fullcodeline": "right_token = LLLnode.from_list(\"_R\", typ=right.typ, location=right.location)"
    },
    {
        "line": 52,
        "fullcodeline": "add_variable_offset("
    },
    {
        "line": 58,
        "fullcodeline": "LLLnode.from_list(None, typ=right.typ.subtype),"
    },
    {
        "line": 119,
        "fullcodeline": "add_variable_offset(left_token, key, pos=pos),"
    },
    {
        "line": 132,
        "fullcodeline": "return mzero(left, 32 * get_size_of_type(left.typ))"
    },
    {
        "line": 136,
        "fullcodeline": "subs.append("
    },
    {
        "line": 148,
        "fullcodeline": "for var_arg in left.args:"
    },
    {
        "line": 153,
        "fullcodeline": "for left_arg, key, loc in zip(left.args, keyz, locations):"
    },
    {
        "line": 160,
        "fullcodeline": "return LLLnode.from_list("
    },
    {
        "line": 167,
        "fullcodeline": "for typ, loc in zip(keyz, locations):"
    },
    {
        "line": 176,
        "fullcodeline": "return LLLnode.from_list("
    },
    {
        "line": 54,
        "fullcodeline": "LLLnode.from_list(i, typ=\"int256\"),"
    },
    {
        "line": 87,
        "fullcodeline": "if k not in right.typ.members:"
    },
    {
        "line": 90,
        "fullcodeline": "if k not in left.typ.members:"
    },
    {
        "line": 137,
        "fullcodeline": "make_setter("
    },
    {
        "line": 161,
        "fullcodeline": "[\"with\", \"_R\", right, [\"seq\"] + subs], typ=None, annotation=\"Tuple assignment\","
    },
    {
        "line": 177,
        "fullcodeline": "[\"with\", \"_L\", left, [\"with\", \"_R\", right, [\"seq\"] + subs]], typ=None,"
    },
    {
        "line": 138,
        "fullcodeline": "add_variable_offset(left_token, key, pos=pos),"
    },
    {
        "line": 139,
        "fullcodeline": "LLLnode.from_list(None, typ=right.typ.members[key]),"
    },
    {
        "line": 154,
        "fullcodeline": "subs.append("
    },
    {
        "line": 168,
        "fullcodeline": "subs.append("
    },
    {
        "line": 155,
        "fullcodeline": "make_setter("
    },
    {
        "line": 169,
        "fullcodeline": "make_setter("
    },
    {
        "line": 156,
        "fullcodeline": "left_arg, add_variable_offset(right_token, key, pos=pos), loc, pos=pos"
    },
    {
        "line": 170,
        "fullcodeline": "add_variable_offset(left_token, typ, pos=pos),"
    },
    {
        "line": 171,
        "fullcodeline": "add_variable_offset(right_token, typ, pos=pos),"
    }
]