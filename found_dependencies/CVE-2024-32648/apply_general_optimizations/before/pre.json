[
    {
        "line": 3,
        "fullcodeline": "argz = [apply_general_optimizations(arg) for arg in node.args]"
    },
    {
        "line": 5,
        "fullcodeline": "if node.value == \"seq\":"
    },
    {
        "line": 9,
        "fullcodeline": "if node.value in arith and int_at(argz, 0) and int_at(argz, 1):"
    },
    {
        "line": 6,
        "fullcodeline": "_merge_memzero(argz)"
    },
    {
        "line": 7,
        "fullcodeline": "_merge_calldataload(argz)"
    },
    {
        "line": 13,
        "fullcodeline": "new_value = calcer(left, right)"
    },
    {
        "line": 10,
        "fullcodeline": "left, right = get_int_at(argz, 0), get_int_at(argz, 1)"
    },
    {
        "line": 12,
        "fullcodeline": "calcer, symb = arith[str(node.value)]"
    },
    {
        "line": 14,
        "fullcodeline": "if argz[0].annotation and argz[1].annotation:"
    },
    {
        "line": 22,
        "fullcodeline": "return LLLnode("
    },
    {
        "line": 32,
        "fullcodeline": "elif _is_constant_add(node, argz):"
    },
    {
        "line": 15,
        "fullcodeline": "annotation = argz[0].annotation + symb + argz[1].annotation"
    },
    {
        "line": 16,
        "fullcodeline": "elif argz[0].annotation or argz[1].annotation:"
    },
    {
        "line": 34,
        "fullcodeline": "calcer, symb = arith[str(node.value)]"
    },
    {
        "line": 35,
        "fullcodeline": "if argz[0].annotation and argz[1].args[0].annotation:"
    },
    {
        "line": 45,
        "fullcodeline": "return LLLnode("
    },
    {
        "line": 17,
        "fullcodeline": "annotation = ("
    },
    {
        "line": 21,
        "fullcodeline": "annotation = \"\""
    },
    {
        "line": 36,
        "fullcodeline": "annotation = argz[0].annotation + symb + argz[1].args[0].annotation"
    },
    {
        "line": 47,
        "fullcodeline": "["
    },
    {
        "line": 57,
        "fullcodeline": "elif node.value == \"add\" and get_int_at(argz, 0) == 0:"
    },
    {
        "line": 18,
        "fullcodeline": "(argz[0].annotation or str(left)) + symb + (argz[1].annotation or str(right))"
    },
    {
        "line": 37,
        "fullcodeline": "elif argz[0].annotation or argz[1].args[0].annotation:"
    },
    {
        "line": 48,
        "fullcodeline": "LLLnode(int(argz[0].value) + int(argz[1].args[0].value), annotation=annotation),"
    },
    {
        "line": 58,
        "fullcodeline": "return LLLnode("
    },
    {
        "line": 38,
        "fullcodeline": "annotation = ("
    },
    {
        "line": 44,
        "fullcodeline": "annotation = \"\""
    },
    {
        "line": 68,
        "fullcodeline": "elif node.value == \"add\" and get_int_at(argz, 1) == 0:"
    },
    {
        "line": 69,
        "fullcodeline": "return LLLnode("
    },
    {
        "line": 79,
        "fullcodeline": "elif node.value == \"clamp\" and int_at(argz, 0) and int_at(argz, 1) and int_at(argz, 2):"
    },
    {
        "line": 41,
        "fullcodeline": "+ (argz[1].args[0].annotation or str(argz[1].args[0].value))"
    },
    {
        "line": 39,
        "fullcodeline": "(argz[0].annotation or str(argz[0].value))"
    },
    {
        "line": 86,
        "fullcodeline": "elif node.value == \"clamp\" and int_at(argz, 0) and int_at(argz, 1):"
    },
    {
        "line": 80,
        "fullcodeline": "if get_int_at(argz, 0, True) > get_int_at(argz, 1, True):  # type: ignore"
    },
    {
        "line": 81,
        "fullcodeline": "raise Exception(\"Clamp always fails\")"
    },
    {
        "line": 82,
        "fullcodeline": "elif get_int_at(argz, 1, True) > get_int_at(argz, 2, True):  # type: ignore"
    },
    {
        "line": 87,
        "fullcodeline": "if get_int_at(argz, 0, True) > get_int_at(argz, 1, True):  # type: ignore"
    },
    {
        "line": 100,
        "fullcodeline": "elif node.value == \"clamp_nonzero\" and int_at(argz, 0):"
    },
    {
        "line": 83,
        "fullcodeline": "raise Exception(\"Clamp always fails\")"
    },
    {
        "line": 88,
        "fullcodeline": "raise Exception(\"Clamp always fails\")"
    },
    {
        "line": 90,
        "fullcodeline": "return LLLnode("
    },
    {
        "line": 92,
        "fullcodeline": "[argz[1], argz[2]],"
    },
    {
        "line": 101,
        "fullcodeline": "if get_int_at(argz, 0) != 0:"
    },
    {
        "line": 115,
        "fullcodeline": "elif node.value == \"eq\" and int_at(argz, 1) and argz[1].value == 0:"
    },
    {
        "line": 102,
        "fullcodeline": "return LLLnode("
    },
    {
        "line": 113,
        "fullcodeline": "raise Exception(\"Clamp always fails\")"
    },
    {
        "line": 116,
        "fullcodeline": "return LLLnode("
    },
    {
        "line": 118,
        "fullcodeline": "[argz[0]],"
    },
    {
        "line": 128,
        "fullcodeline": "elif node.value in (\"if\", \"if_unchecked\", \"assert\") and argz[0].value == \"ne\":"
    },
    {
        "line": 129,
        "fullcodeline": "argz[0] = LLLnode.from_list([\"xor\"] + argz[0].args)  # type: ignore"
    },
    {
        "line": 130,
        "fullcodeline": "return LLLnode.from_list("
    },
    {
        "line": 138,
        "fullcodeline": "elif node.value == \"seq\":"
    },
    {
        "line": 139,
        "fullcodeline": "xs: List[Any] = []"
    },
    {
        "line": 131,
        "fullcodeline": "[node.value] + argz,  # type: ignore"
    },
    {
        "line": 140,
        "fullcodeline": "for arg in argz:"
    },
    {
        "line": 145,
        "fullcodeline": "return LLLnode("
    },
    {
        "line": 155,
        "fullcodeline": "elif node.total_gas is not None:"
    },
    {
        "line": 156,
        "fullcodeline": "o = LLLnode("
    },
    {
        "line": 166,
        "fullcodeline": "o.total_gas = node.total_gas - node.gas + o.gas"
    },
    {
        "line": 167,
        "fullcodeline": "o.func_name = node.func_name"
    },
    {
        "line": 170,
        "fullcodeline": "return LLLnode("
    },
    {
        "line": 141,
        "fullcodeline": "if arg.value == \"seq\":"
    },
    {
        "line": 142,
        "fullcodeline": "xs.extend(arg.args)"
    },
    {
        "line": 144,
        "fullcodeline": "xs.append(arg)"
    }
]