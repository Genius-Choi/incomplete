[
    {
        "line": 3,
        "fullcodeline": "args_tuple_t = TupleType([x.typ for x in args])"
    },
    {
        "line": 4,
        "fullcodeline": "args_as_tuple = LLLnode.from_list([\"multi\"] + [x for x in args], typ=args_tuple_t)"
    },
    {
        "line": 5,
        "fullcodeline": "args_abi_t = abi_type_of(args_tuple_t)"
    },
    {
        "line": 8,
        "fullcodeline": "dst_tuple_t = TupleType([arg.typ for arg in contract_sig.args][: len(args)])"
    },
    {
        "line": 9,
        "fullcodeline": "_tmp = LLLnode(\"fake node\", location=\"memory\", typ=dst_tuple_t)"
    },
    {
        "line": 10,
        "fullcodeline": "check_assign(_tmp, args_as_tuple, pos)"
    },
    {
        "line": 21,
        "fullcodeline": "buflen += 32  # padding for the method id"
    },
    {
        "line": 23,
        "fullcodeline": "buf_t = get_type_for_exact_size(buflen)"
    },
    {
        "line": 24,
        "fullcodeline": "buf = context.new_internal_variable(buf_t)"
    },
    {
        "line": 26,
        "fullcodeline": "args_ofst = buf + 28"
    },
    {
        "line": 27,
        "fullcodeline": "args_len = args_abi_t.size_bound() + 4"
    },
    {
        "line": 29,
        "fullcodeline": "abi_signature = contract_sig.name + canonicalize_type(dst_tuple_t)"
    },
    {
        "line": 38,
        "fullcodeline": "mstore_method_id = [[\"mstore\", buf, util.abi_method_id(abi_signature)]]"
    },
    {
        "line": 12,
        "fullcodeline": "if contract_sig.return_type is not None:"
    },
    {
        "line": 40,
        "fullcodeline": "if len(args) == 0:"
    },
    {
        "line": 45,
        "fullcodeline": "return buf, mstore_method_id + [encode_args], args_ofst, args_len"
    },
    {
        "line": 13,
        "fullcodeline": "return_abi_t = abi_type_of(calculate_type_for_external_return(contract_sig.return_type))"
    },
    {
        "line": 17,
        "fullcodeline": "buflen = max(args_abi_t.size_bound(), return_abi_t.size_bound())"
    },
    {
        "line": 19,
        "fullcodeline": "buflen = args_abi_t.size_bound()"
    },
    {
        "line": 41,
        "fullcodeline": "encode_args = [\"pass\"]"
    },
    {
        "line": 43,
        "fullcodeline": "encode_args = abi_encode(buf + 32, args_as_tuple, pos)"
    }
]