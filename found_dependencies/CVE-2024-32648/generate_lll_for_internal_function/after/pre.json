[
    {
        "line": 32,
        "fullcodeline": "func_type = code._metadata[\"type\"]"
    },
    {
        "line": 43,
        "fullcodeline": "function_entry_label = sig.internal_function_label"
    },
    {
        "line": 44,
        "fullcodeline": "cleanup_label = sig.exit_sequence_label"
    },
    {
        "line": 47,
        "fullcodeline": "stop_func = LLLnode.from_list([\"jump\", \"pass\"], annotation=\"jump to return address\")"
    },
    {
        "line": 49,
        "fullcodeline": "enter = [[\"label\", function_entry_label]] + nonreentrant_pre"
    },
    {
        "line": 51,
        "fullcodeline": "body = [parse_body(c, context) for c in code.body]"
    },
    {
        "line": 53,
        "fullcodeline": "exit = [[\"label\", cleanup_label]] + nonreentrant_post + [stop_func]"
    },
    {
        "line": 36,
        "fullcodeline": "for arg in sig.args:"
    },
    {
        "line": 41,
        "fullcodeline": "nonreentrant_pre, nonreentrant_post = get_nonreentrant_lock(func_type)"
    },
    {
        "line": 55,
        "fullcodeline": "return LLLnode.from_list([\"seq\"] + enter + body + exit, typ=None, pos=getpos(code),)"
    },
    {
        "line": 39,
        "fullcodeline": "context.new_variable(arg.name, arg.typ, is_mutable=False)"
    }
]