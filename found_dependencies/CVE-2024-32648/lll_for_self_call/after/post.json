[
    {
        "line": 2,
        "fullcodeline": "from vyper.old_codegen.expr import ("
    },
    {
        "line": 6,
        "fullcodeline": "pos = getpos(stmt_expr)"
    },
    {
        "line": 18,
        "fullcodeline": "pos_args_lll = [Expr(x, context).lll_node for x in stmt_expr.args]"
    },
    {
        "line": 22,
        "fullcodeline": "kw_args_lll = [Expr(x, context).lll_node for x in kw_vals]"
    },
    {
        "line": 24,
        "fullcodeline": "args_lll = pos_args_lll + kw_args_lll"
    },
    {
        "line": 26,
        "fullcodeline": "args_tuple_t = TupleType([x.typ for x in args_lll])"
    },
    {
        "line": 27,
        "fullcodeline": "args_as_tuple = LLLnode.from_list([\"multi\"] + [x for x in args_lll], typ=args_tuple_t)"
    },
    {
        "line": 30,
        "fullcodeline": "context.register_callee(sig.frame_size)"
    },
    {
        "line": 43,
        "fullcodeline": "return_label = _generate_label(f\"{sig.internal_function_label}_call\")"
    },
    {
        "line": 47,
        "fullcodeline": "return_buffer = ("
    },
    {
        "line": 50,
        "fullcodeline": "return_buffer = LLLnode.from_list([return_buffer], annotation=f\"{return_label}_return_buf\")"
    },
    {
        "line": 53,
        "fullcodeline": "dst_tuple_t = TupleType([arg.typ for arg in sig.args])"
    },
    {
        "line": 54,
        "fullcodeline": "args_dst = LLLnode(sig.frame_start, typ=dst_tuple_t, location=\"memory\")"
    },
    {
        "line": 76,
        "fullcodeline": "call_sequence = ["
    },
    {
        "line": 89,
        "fullcodeline": "o = LLLnode.from_list("
    },
    {
        "line": 97,
        "fullcodeline": "o.is_self_call = True"
    },
    {
        "line": 20,
        "fullcodeline": "sig, kw_vals = context.lookup_internal_function(method_name, pos_args_lll)"
    },
    {
        "line": 32,
        "fullcodeline": "if context.is_constant() and sig.mutability not in (\"view\", \"pure\"):"
    },
    {
        "line": 40,
        "fullcodeline": "if not sig.internal:"
    },
    {
        "line": 48,
        "fullcodeline": "context.new_internal_variable(sig.return_type) if sig.return_type is not None else \"pass\""
    },
    {
        "line": 33,
        "fullcodeline": "raise StateAccessViolation("
    },
    {
        "line": 41,
        "fullcodeline": "raise StructureException(\"Cannot call external functions via 'self'\", stmt_expr)"
    },
    {
        "line": 61,
        "fullcodeline": "copy_args = [\"seq\"]"
    },
    {
        "line": 63,
        "fullcodeline": "tmp_args_buf = LLLnode("
    },
    {
        "line": 66,
        "fullcodeline": "copy_args.append("
    },
    {
        "line": 71,
        "fullcodeline": "copy_args.append(make_setter(args_dst, tmp_args_buf, \"memory\", pos))"
    },
    {
        "line": 74,
        "fullcodeline": "copy_args = make_setter(args_dst, args_as_tuple, \"memory\", pos)"
    },
    {
        "line": 79,
        "fullcodeline": "["
    },
    {
        "line": 85,
        "fullcodeline": "[\"label\", return_label],"
    },
    {
        "line": 94,
        "fullcodeline": "annotation=stmt_expr.get(\"node_source_code\"),"
    },
    {
        "line": 68,
        "fullcodeline": "make_setter(tmp_args_buf, args_as_tuple, \"memory\", pos)"
    },
    {
        "line": 83,
        "fullcodeline": "push_label_to_stack(return_label),  # pass return label to subroutine"
    },
    {
        "line": 34,
        "fullcodeline": "f\"May not call state modifying function \""
    },
    {
        "line": 36,
        "fullcodeline": "getpos(stmt_expr),"
    },
    {
        "line": 64,
        "fullcodeline": "context.new_internal_variable(dst_tuple_t), typ=dst_tuple_t, location=\"memory\","
    },
    {
        "line": 35,
        "fullcodeline": "f\"'{method_name}' within {context.pp_constancy()}.\","
    }
]