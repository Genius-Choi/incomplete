[
    {
        "line": 26,
        "fullcodeline": "source_lines = source_code.splitlines(keepends=True)"
    },
    {
        "line": 30,
        "fullcodeline": "line_offset = lineno - 1"
    },
    {
        "line": 31,
        "fullcodeline": "start_offset = max(0, line_offset - context_lines)"
    },
    {
        "line": 32,
        "fullcodeline": "end_offset = min(len(source_lines), line_offset + context_lines + 1)"
    },
    {
        "line": 34,
        "fullcodeline": "line_repr = source_lines[line_offset]"
    },
    {
        "line": 42,
        "fullcodeline": "before_lines = \"\".join(source_lines[start_offset:line_offset])"
    },
    {
        "line": 43,
        "fullcodeline": "after_lines = \"\".join(source_lines[line_offset + 1 : end_offset])  # noqa: E203"
    },
    {
        "line": 44,
        "fullcodeline": "location_repr = \"\".join((before_lines, line_repr, mark_repr, after_lines))"
    },
    {
        "line": 72,
        "fullcodeline": "cleanup_lines = [line.rstrip() for line in location_repr.splitlines()]"
    },
    {
        "line": 73,
        "fullcodeline": "cleanup_lines += [\"\"] * (num_lines - len(cleanup_lines))"
    },
    {
        "line": 23,
        "fullcodeline": "if lineno is None:"
    },
    {
        "line": 27,
        "fullcodeline": "if lineno < 1 or lineno > len(source_lines):"
    },
    {
        "line": 35,
        "fullcodeline": "if \"\\n\" not in line_repr[-2:]:  # Handle certain edge cases"
    },
    {
        "line": 37,
        "fullcodeline": "if col_offset is None:"
    },
    {
        "line": 66,
        "fullcodeline": "if col_offset is None:"
    },
    {
        "line": 28,
        "fullcodeline": "raise ValueError(\"Line number is out of range\")"
    },
    {
        "line": 36,
        "fullcodeline": "line_repr += \"\\n\""
    },
    {
        "line": 38,
        "fullcodeline": "mark_repr = \"\""
    },
    {
        "line": 40,
        "fullcodeline": "mark_repr = \"-\" * col_offset + \"^\" + \"\\n\""
    },
    {
        "line": 48,
        "fullcodeline": "lineno_reprs = [f\"{i} \" for i in range(start_offset + 1, end_offset + 1)]"
    },
    {
        "line": 51,
        "fullcodeline": "local_line_off = line_offset - start_offset"
    },
    {
        "line": 52,
        "fullcodeline": "lineno_reprs[local_line_off] = \"---> \" + lineno_reprs[local_line_off]"
    },
    {
        "line": 55,
        "fullcodeline": "max_len = max(len(i) for i in lineno_reprs)"
    },
    {
        "line": 58,
        "fullcodeline": "justified_reprs = [i.rjust(max_len) for i in lineno_reprs]"
    },
    {
        "line": 62,
        "fullcodeline": "location_repr = indent(location_repr, indent_chars=justified_reprs)"
    },
    {
        "line": 68,
        "fullcodeline": "num_lines = end_offset - start_offset"
    },
    {
        "line": 70,
        "fullcodeline": "num_lines = end_offset - start_offset + 1"
    },
    {
        "line": 75,
        "fullcodeline": "return \"\\n\".join(cleanup_lines)"
    },
    {
        "line": 59,
        "fullcodeline": "if col_offset is not None:"
    },
    {
        "line": 60,
        "fullcodeline": "justified_reprs.insert(local_line_off + 1, \"-\" * max_len)"
    }
]