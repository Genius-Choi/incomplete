[
    {
        "line": 4,
        "fullcodeline": "GF_XMTParser *parser = (GF_XMTParser *)sax_cbck;"
    },
    {
        "line": 7,
        "fullcodeline": "GF_Node *node = NULL;"
    },
    {
        "line": 10,
        "fullcodeline": "top = (XMTNodeStack *)gf_list_last(parser->nodes);"
    },
    {
        "line": 161,
        "fullcodeline": "tag = xmt_get_node_tag(parser, name);"
    },
    {
        "line": 8,
        "fullcodeline": "if (!parser->doc_type || !parser->state) return;"
    },
    {
        "line": 12,
        "fullcodeline": "if (!top) {"
    },
    {
        "line": 162,
        "fullcodeline": "if (!tag) {"
    },
    {
        "line": 14,
        "fullcodeline": "desc = (GF_Descriptor*)gf_list_last(parser->descriptors);"
    },
    {
        "line": 15,
        "fullcodeline": "if (desc && (desc->tag == gf_odf_get_tag_by_name((char *)name)) ) {"
    },
    {
        "line": 56,
        "fullcodeline": "if (parser->state == XMT_STATE_HEAD) {"
    },
    {
        "line": 25,
        "fullcodeline": "gf_list_rem_last(parser->descriptors);"
    },
    {
        "line": 212,
        "fullcodeline": "} else if (top->node->sgprivate->tag==tag) {"
    },
    {
        "line": 18,
        "fullcodeline": "if (desc->tag == GF_ODF_ESD_TAG) {"
    },
    {
        "line": 26,
        "fullcodeline": "if (gf_list_count(parser->descriptors)) return;"
    },
    {
        "line": 28,
        "fullcodeline": "if ((parser->doc_type==1) && (parser->state==XMT_STATE_HEAD) && parser->load->ctx && !parser->load->ctx->root_od) {"
    },
    {
        "line": 57,
        "fullcodeline": "if ((parser->doc_type == 1) && !strcmp(name, \"Header\")) parser->state = XMT_STATE_BODY;"
    },
    {
        "line": 164,
        "fullcodeline": "if (!strcmp(name, top->container_field.name)) {"
    },
    {
        "line": 213,
        "fullcodeline": "node = top->node;"
    },
    {
        "line": 214,
        "fullcodeline": "gf_list_rem_last(parser->nodes);"
    },
    {
        "line": 215,
        "fullcodeline": "gf_free(top);"
    },
    {
        "line": 218,
        "fullcodeline": "top = (XMTNodeStack*)gf_list_last(parser->nodes);"
    },
    {
        "line": 19,
        "fullcodeline": "GF_ESD *esd = (GF_ESD*)desc;"
    },
    {
        "line": 20,
        "fullcodeline": "GF_StreamContext *sc = gf_sm_stream_new(parser->load->ctx, esd->ESID, esd->decoderConfig ? esd->decoderConfig->streamType : 0, esd->decoderConfig ? esd->decoderConfig->objectTypeIndication : 0);"
    },
    {
        "line": 29,
        "fullcodeline": "parser->load->ctx->root_od = (GF_ObjectDescriptor *)desc;"
    },
    {
        "line": 79,
        "fullcodeline": "else if (parser->state == XMT_STATE_ELEMENTS) {"
    },
    {
        "line": 171,
        "fullcodeline": "top->container_field.far_ptr = NULL;"
    },
    {
        "line": 172,
        "fullcodeline": "top->container_field.name = NULL;"
    },
    {
        "line": 173,
        "fullcodeline": "top->last = NULL;"
    },
    {
        "line": 197,
        "fullcodeline": "else if (!top->node && !strcmp(name, \"field\")) {"
    },
    {
        "line": 220,
        "fullcodeline": "if (!top || (top->container_field.fieldType==GF_SG_VRML_SFCOMMANDBUFFER)) {"
    },
    {
        "line": 322,
        "fullcodeline": "if (parser->load->flags & GF_SM_LOAD_FOR_PLAYBACK) {"
    },
    {
        "line": 21,
        "fullcodeline": "if (sc && esd->slConfig && esd->slConfig->timestampResolution)"
    },
    {
        "line": 80,
        "fullcodeline": "gf_assert((parser->doc_type != 1) || parser->command);"
    },
    {
        "line": 165,
        "fullcodeline": "if (top->container_field.fieldType==GF_SG_VRML_SFCOMMANDBUFFER) {"
    },
    {
        "line": 198,
        "fullcodeline": "gf_list_rem_last(parser->nodes);"
    },
    {
        "line": 199,
        "fullcodeline": "gf_free(top);"
    },
    {
        "line": 347,
        "fullcodeline": "} else if (parser->current_node_tag==tag) {"
    },
    {
        "line": 22,
        "fullcodeline": "sc->timeScale = esd->slConfig->timestampResolution;"
    },
    {
        "line": 31,
        "fullcodeline": "else if (!parser->od_command) {"
    },
    {
        "line": 59,
        "fullcodeline": "else if ((parser->doc_type == 2) && !strcmp(name, \"head\")) {"
    },
    {
        "line": 81,
        "fullcodeline": "if (!strcmp(name, \"Replace\") || !strcmp(name, \"Insert\") || !strcmp(name, \"Delete\")) {"
    },
    {
        "line": 166,
        "fullcodeline": "parser->state = XMT_STATE_ELEMENTS;"
    },
    {
        "line": 168,
        "fullcodeline": "parser->command_buffer->buffer = NULL;"
    },
    {
        "line": 169,
        "fullcodeline": "parser->command_buffer = NULL;"
    },
    {
        "line": 176,
        "fullcodeline": "else if (!strcmp(name, \"Replace\") || !strcmp(name, \"Insert\") || !strcmp(name, \"Delete\") )  {"
    },
    {
        "line": 221,
        "fullcodeline": "if (parser->doc_type == 1) {"
    },
    {
        "line": 324,
        "fullcodeline": "if (!parser->parsing_proto) {"
    },
    {
        "line": 348,
        "fullcodeline": "gf_list_rem_last(parser->nodes);"
    },
    {
        "line": 349,
        "fullcodeline": "gf_free(top);"
    },
    {
        "line": 32,
        "fullcodeline": "xmt_report(parser, GF_OK, \"Warning: descriptor %s defined outside scene scope - skipping\", name);"
    },
    {
        "line": 33,
        "fullcodeline": "gf_odf_desc_del(desc);"
    },
    {
        "line": 34,
        "fullcodeline": "XMT_ODLink *prev_l = gf_list_last(parser->od_links);"
    },
    {
        "line": 60,
        "fullcodeline": "parser->state = XMT_STATE_BODY;"
    },
    {
        "line": 62,
        "fullcodeline": "tag = xmt_get_node_tag(parser, \"Group\");"
    },
    {
        "line": 63,
        "fullcodeline": "node = gf_node_new(parser->load->scene_graph, tag);"
    },
    {
        "line": 64,
        "fullcodeline": "gf_node_register(node, NULL);"
    },
    {
        "line": 65,
        "fullcodeline": "gf_sg_set_root_node(parser->load->scene_graph, node);"
    },
    {
        "line": 66,
        "fullcodeline": "gf_node_init(node);"
    },
    {
        "line": 69,
        "fullcodeline": "GF_SAFEALLOC(parser->x3d_root, XMTNodeStack);"
    },
    {
        "line": 74,
        "fullcodeline": "parser->x3d_root->node = node;"
    },
    {
        "line": 82,
        "fullcodeline": "parser->command = NULL;"
    },
    {
        "line": 83,
        "fullcodeline": "parser->state = XMT_STATE_COMMANDS;"
    },
    {
        "line": 100,
        "fullcodeline": "else if (parser->state == XMT_STATE_COMMANDS) {"
    },
    {
        "line": 200,
        "fullcodeline": "} else if (top->node && top->node->sgprivate->tag == TAG_ProtoNode) {"
    },
    {
        "line": 223,
        "fullcodeline": "Bool single_node = 0;"
    },
    {
        "line": 351,
        "fullcodeline": "xmt_report(parser, GF_NON_COMPLIANT_BITSTREAM, \"Warning: closing element %s doesn't match created node %s\", name, gf_node_get_class_name(top->node) );"
    },
    {
        "line": 35,
        "fullcodeline": "if ((GF_Descriptor *) prev_l->od == desc) {"
    },
    {
        "line": 70,
        "fullcodeline": "if (!parser->x3d_root) {"
    },
    {
        "line": 224,
        "fullcodeline": "if (!parser->command) {"
    },
    {
        "line": 325,
        "fullcodeline": "if ((tag==TAG_MPEG4_Script)"
    },
    {
        "line": 36,
        "fullcodeline": "gf_list_pop_back(parser->od_links);"
    },
    {
        "line": 38,
        "fullcodeline": "gf_list_del(prev_l->mf_urls);"
    },
    {
        "line": 39,
        "fullcodeline": "gf_free(prev_l);"
    },
    {
        "line": 71,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_PARSER, (\"Failed to allocate X3D root\\n\"));"
    },
    {
        "line": 77,
        "fullcodeline": "else if ((parser->doc_type == 3) && !strcmp(name, \"head\")) parser->state = XMT_STATE_BODY;"
    },
    {
        "line": 85,
        "fullcodeline": "else if (!strcmp(name, \"repField\")) {"
    },
    {
        "line": 102,
        "fullcodeline": "if ((parser->doc_type == 1) && !strcmp(name, \"Body\")) parser->state = XMT_STATE_BODY_END;"
    },
    {
        "line": 186,
        "fullcodeline": "parser->state = XMT_STATE_COMMANDS;"
    },
    {
        "line": 190,
        "fullcodeline": "else if (!strcmp(name, \"node\") || !strcmp(name, \"nodes\")) {"
    },
    {
        "line": 201,
        "fullcodeline": "if (!strcmp(name, \"node\") || !strcmp(name, \"nodes\")) {"
    },
    {
        "line": 225,
        "fullcodeline": "gf_assert(0);"
    },
    {
        "line": 246,
        "fullcodeline": "single_node = 1;"
    },
    {
        "line": 250,
        "fullcodeline": "inf = (GF_CommandField*)gf_list_last(parser->command->command_fields);"
    },
    {
        "line": 273,
        "fullcodeline": "gf_node_register(node, NULL);"
    },
    {
        "line": 288,
        "fullcodeline": "xmt_report(parser, GF_OK, \"Warning: node %s defined outside scene scope - skipping\", name);"
    },
    {
        "line": 289,
        "fullcodeline": "gf_node_register(node, NULL);"
    },
    {
        "line": 290,
        "fullcodeline": "gf_node_unregister(node, NULL);"
    },
    {
        "line": 296,
        "fullcodeline": "else if (parser->doc_type == 2) {"
    },
    {
        "line": 327,
        "fullcodeline": "|| (tag==TAG_X3D_Script)"
    },
    {
        "line": 44,
        "fullcodeline": "gf_list_add( ((GF_ESDUpdate *)parser->od_command)->ESDescriptors, desc);"
    },
    {
        "line": 49,
        "fullcodeline": "gf_list_add( ((GF_ODUpdate *)parser->od_command)->objectDescriptors, desc);"
    },
    {
        "line": 86,
        "fullcodeline": "parser->state = XMT_STATE_COMMANDS;"
    },
    {
        "line": 140,
        "fullcodeline": "else if (parser->state == XMT_STATE_BODY_END) {"
    },
    {
        "line": 191,
        "fullcodeline": "top->container_field.far_ptr = NULL;"
    },
    {
        "line": 192,
        "fullcodeline": "top->container_field.name = NULL;"
    },
    {
        "line": 193,
        "fullcodeline": "top->last = NULL;"
    },
    {
        "line": 202,
        "fullcodeline": "top->container_field.far_ptr = NULL;"
    },
    {
        "line": 203,
        "fullcodeline": "top->container_field.name = NULL;"
    },
    {
        "line": 204,
        "fullcodeline": "top->last = NULL;"
    },
    {
        "line": 251,
        "fullcodeline": "if (!inf) {"
    },
    {
        "line": 255,
        "fullcodeline": "if ((inf->fieldType==GF_SG_VRML_MFNODE) && !inf->node_list) {"
    },
    {
        "line": 332,
        "fullcodeline": "if (!top || (top->node != node)) {"
    },
    {
        "line": 37,
        "fullcodeline": "if (prev_l->desc_name) gf_free(prev_l->desc_name);"
    },
    {
        "line": 231,
        "fullcodeline": "gf_sg_proto_add_node_code(parser->parsing_proto, node);"
    },
    {
        "line": 232,
        "fullcodeline": "gf_node_register(node, NULL);"
    },
    {
        "line": 252,
        "fullcodeline": "inf = gf_sg_command_field_new(parser->command);"
    },
    {
        "line": 253,
        "fullcodeline": "inf->fieldType = GF_SG_VRML_SFNODE;"
    },
    {
        "line": 256,
        "fullcodeline": "inf->field_ptr = &inf->node_list;"
    },
    {
        "line": 271,
        "fullcodeline": "inf->new_node = NULL;"
    },
    {
        "line": 275,
        "fullcodeline": "gf_node_list_add_child(& inf->node_list, node);"
    },
    {
        "line": 283,
        "fullcodeline": "gf_sg_proto_add_node_code(parser->parsing_proto, node);"
    },
    {
        "line": 284,
        "fullcodeline": "gf_node_register(node, NULL);"
    },
    {
        "line": 89,
        "fullcodeline": "else if (!strcmp(name, \"ProtoDeclare\") || !strcmp(name, \"ExternProtoDeclare\"))  {"
    },
    {
        "line": 104,
        "fullcodeline": "else if ((parser->doc_type == 2) && !strcmp(name, \"Scene\")) parser->state = XMT_STATE_BODY_END;"
    },
    {
        "line": 142,
        "fullcodeline": "if ((parser->doc_type == 1) && !strcmp(name, \"XMT-A\")) parser->state = XMT_STATE_END;"
    },
    {
        "line": 182,
        "fullcodeline": "parser->command_buffer->buffer = NULL;"
    },
    {
        "line": 183,
        "fullcodeline": "parser->command_buffer = prev;"
    },
    {
        "line": 205,
        "fullcodeline": "} else if (!strcmp(name, \"ProtoInstance\")) {"
    },
    {
        "line": 277,
        "fullcodeline": "inf->new_node = node;"
    },
    {
        "line": 278,
        "fullcodeline": "inf->field_ptr = &inf->new_node;"
    },
    {
        "line": 298,
        "fullcodeline": "gf_sg_proto_add_node_code(parser->parsing_proto, node);"
    },
    {
        "line": 299,
        "fullcodeline": "gf_node_register(node, NULL);"
    },
    {
        "line": 314,
        "fullcodeline": "else if ((parser->load->flags & GF_SM_LOAD_FOR_PLAYBACK) && (parser->load->scene_graph->RootNode!=node) ) {"
    },
    {
        "line": 90,
        "fullcodeline": "GF_Proto *cur = parser->parsing_proto;"
    },
    {
        "line": 91,
        "fullcodeline": "xmt_resolve_routes(parser);"
    },
    {
        "line": 92,
        "fullcodeline": "parser->parsing_proto = (GF_Proto*)cur->userpriv;"
    },
    {
        "line": 93,
        "fullcodeline": "parser->load->scene_graph = cur->parent_graph;"
    },
    {
        "line": 94,
        "fullcodeline": "cur->userpriv = NULL;"
    },
    {
        "line": 206,
        "fullcodeline": "gf_list_rem_last(parser->nodes);"
    },
    {
        "line": 207,
        "fullcodeline": "node = top->node;"
    },
    {
        "line": 208,
        "fullcodeline": "gf_free(top);"
    },
    {
        "line": 258,
        "fullcodeline": "gf_node_list_add_child(& inf->node_list, inf->new_node);"
    },
    {
        "line": 259,
        "fullcodeline": "inf->new_node = NULL;"
    },
    {
        "line": 265,
        "fullcodeline": "gf_node_unregister(inf->new_node, NULL);"
    },
    {
        "line": 301,
        "fullcodeline": "M_Group *gr = (M_Group *)gf_sg_get_root_node(parser->load->scene_graph);"
    },
    {
        "line": 315,
        "fullcodeline": "gf_node_register(node, NULL);"
    },
    {
        "line": 335,
        "fullcodeline": "gf_list_add(parser->command->scripts_to_load, node);"
    },
    {
        "line": 234,
        "fullcodeline": "parser->command->node = node;"
    },
    {
        "line": 235,
        "fullcodeline": "gf_node_register(node, NULL);"
    },
    {
        "line": 267,
        "fullcodeline": "inf->field_ptr = &inf->node_list;"
    },
    {
        "line": 268,
        "fullcodeline": "gf_node_list_add_child(& inf->node_list, inf->new_node);"
    },
    {
        "line": 269,
        "fullcodeline": "inf->fieldType = GF_SG_VRML_MFNODE;"
    },
    {
        "line": 302,
        "fullcodeline": "if (!gr) {"
    },
    {
        "line": 317,
        "fullcodeline": "xmt_report(parser, GF_OK, \"Warning: node %s defined outside scene scope - skipping\", name);"
    },
    {
        "line": 318,
        "fullcodeline": "gf_node_register(node, NULL);"
    },
    {
        "line": 319,
        "fullcodeline": "gf_node_unregister(node, NULL);"
    },
    {
        "line": 96,
        "fullcodeline": "else if (parser->proto_field && !strcmp(name, \"field\")) parser->proto_field = NULL;"
    },
    {
        "line": 106,
        "fullcodeline": "else if ((parser->doc_type == 3) && !strcmp(name, \"body\")) parser->state = XMT_STATE_BODY_END;"
    },
    {
        "line": 144,
        "fullcodeline": "else if ((parser->doc_type == 2) && !strcmp(name, \"X3D\")) {"
    },
    {
        "line": 303,
        "fullcodeline": "xmt_report(parser, GF_OK, \"Warning: node %s defined outside scene scope - skipping\", name);"
    },
    {
        "line": 304,
        "fullcodeline": "gf_node_register(node, NULL);"
    },
    {
        "line": 305,
        "fullcodeline": "gf_node_unregister(node, NULL);"
    },
    {
        "line": 334,
        "fullcodeline": "if (!parser->command->scripts_to_load) parser->command->scripts_to_load = gf_list_new();"
    },
    {
        "line": 338,
        "fullcodeline": "else if (parser->doc_type==2) {"
    },
    {
        "line": 151,
        "fullcodeline": "gf_list_del(parser->script_to_load);"
    },
    {
        "line": 152,
        "fullcodeline": "parser->script_to_load = NULL;"
    },
    {
        "line": 153,
        "fullcodeline": "parser->state = XMT_STATE_END;"
    },
    {
        "line": 236,
        "fullcodeline": "} else if (parser->command->node != node) {"
    },
    {
        "line": 339,
        "fullcodeline": "gf_list_add(parser->script_to_load, node);"
    },
    {
        "line": 237,
        "fullcodeline": "xmt_report(parser, GF_OK, \"Warning: top-node already assigned - discarding node %s\", name);"
    },
    {
        "line": 238,
        "fullcodeline": "gf_node_register(node, NULL);"
    },
    {
        "line": 239,
        "fullcodeline": "gf_node_unregister(node, NULL);"
    },
    {
        "line": 341,
        "fullcodeline": "gf_sg_script_load(node);"
    },
    {
        "line": 98,
        "fullcodeline": "else if ((parser->doc_type == 2) && !strcmp(name, \"Scene\")) parser->state = XMT_STATE_BODY_END;"
    },
    {
        "line": 109,
        "fullcodeline": "else if (!strcmp(name, \"Replace\") || !strcmp(name, \"Insert\") || !strcmp(name, \"Delete\") )  {"
    },
    {
        "line": 146,
        "fullcodeline": "GF_Node *n = (GF_Node *)gf_list_last(parser->script_to_load);"
    },
    {
        "line": 148,
        "fullcodeline": "gf_list_rem_last(parser->script_to_load);"
    },
    {
        "line": 149,
        "fullcodeline": "gf_sg_script_load(n);"
    },
    {
        "line": 156,
        "fullcodeline": "else if ((parser->doc_type == 3) && !strcmp(name, \"XMT-O\")) parser->state = XMT_STATE_END;"
    },
    {
        "line": 147,
        "fullcodeline": "if (!n) break;"
    },
    {
        "line": 111,
        "fullcodeline": "if (parser->command && parser->command_buffer && parser->command_buffer->buffer) {"
    },
    {
        "line": 117,
        "fullcodeline": "parser->command = (GF_Command*) parser->command_buffer->buffer;"
    },
    {
        "line": 118,
        "fullcodeline": "parser->command_buffer->buffer = NULL;"
    },
    {
        "line": 119,
        "fullcodeline": "parser->command_buffer = NULL;"
    },
    {
        "line": 129,
        "fullcodeline": "else if (!strcmp(name, \"ObjectDescriptorUpdate\") || !strcmp(name, \"ObjectDescriptorRemove\")"
    },
    {
        "line": 113,
        "fullcodeline": "if ((parser->command->tag==GF_SG_ROUTE_INSERT) && !parser->command->fromNodeID) {"
    },
    {
        "line": 125,
        "fullcodeline": "parser->command = NULL;"
    },
    {
        "line": 131,
        "fullcodeline": "|| !strcmp(name, \"IPMP_DescriptorUpdate\") || !strcmp(name, \"IPMP_DescriptorRemove\") ) {"
    },
    {
        "line": 132,
        "fullcodeline": "parser->od_command = NULL;"
    },
    {
        "line": 114,
        "fullcodeline": "gf_list_del_item(parser->command_buffer->commandList, parser->command);"
    },
    {
        "line": 122,
        "fullcodeline": "if (parser->command && (parser->command->tag==GF_SG_ROUTE_INSERT) && !parser->command->fromNodeID) {"
    },
    {
        "line": 123,
        "fullcodeline": "gf_list_del_item(parser->scene_au->commands, parser->command);"
    },
    {
        "line": 130,
        "fullcodeline": "|| !strcmp(name, \"ES_DescriptorUpdate\") || !strcmp(name, \"ES_DescriptorRemove\")"
    },
    {
        "line": 135,
        "fullcodeline": "else if (!strcmp(name, \"par\"))"
    },
    {
        "line": 136,
        "fullcodeline": "parser->in_com = 1;"
    }
]