[
    {
        "line": 2,
        "fullcodeline": "valid_http_methods :get, :delete"
    },
    {
        "line": 3,
        "fullcodeline": "required_parameters :project, :repository, :arch, :package, :filename"
    },
    {
        "line": 6,
        "fullcodeline": "prj = nil"
    },
    {
        "line": 20,
        "fullcodeline": "path = request.path+\"?\"+request.query_string"
    },
    {
        "line": 39,
        "fullcodeline": "regexp = nil"
    },
    {
        "line": 7,
        "fullcodeline": "if params[:package] == \"_repository\""
    },
    {
        "line": 14,
        "fullcodeline": "if prj.class == DbProject and prj.disabled_for?('binarydownload', params[:repository], params[:arch]) and not @http_user.can_download_binaries?(prj)"
    },
    {
        "line": 8,
        "fullcodeline": "prj = DbProject.get_by_name params[:project]"
    },
    {
        "line": 10,
        "fullcodeline": "pkg = DbPackage.get_by_project_and_name params[:project], params[:package], use_source=false"
    },
    {
        "line": 15,
        "fullcodeline": "render_error :status => 403, :errorcode => \"download_binary_no_permission\","
    },
    {
        "line": 43,
        "fullcodeline": "fpath = \"/build/\"+[:project,:repository,:arch,:package].map {|x| params[x]}.join(\"/\")"
    },
    {
        "line": 44,
        "fullcodeline": "file_list = Suse::Backend.get(fpath)"
    },
    {
        "line": 45,
        "fullcodeline": "regexp = file_list.body.match(/name=[\"']#{Regexp.quote params[:filename]}[\"'].*size=[\"']([^\"']*)[\"']/)"
    },
    {
        "line": 48,
        "fullcodeline": "fsize = regexp[1]"
    },
    {
        "line": 11,
        "fullcodeline": "prj = pkg.db_project if pkg.class == DbPackage"
    },
    {
        "line": 16,
        "fullcodeline": ":message => \"No permission to download binaries from package #{params[:package]}, project #{params[:project]}\""
    },
    {
        "line": 49,
        "fullcodeline": "logger.info \"streaming #{path}\""
    },
    {
        "line": 63,
        "fullcodeline": "'Content-Disposition' => %(attachment; filename=\"#{params[:filename]}\"),"
    },
    {
        "line": 64,
        "fullcodeline": "'Content-Type' => c_type,"
    },
    {
        "line": 65,
        "fullcodeline": "'Transfer-Encoding' => 'binary',"
    },
    {
        "line": 66,
        "fullcodeline": "'Content-Length' => fsize"
    },
    {
        "line": 69,
        "fullcodeline": "render :status => 200, :text => Proc.new {|request,output|"
    },
    {
        "line": 80,
        "fullcodeline": "pass_to_backend path"
    },
    {
        "line": 23,
        "fullcodeline": "unless permissions.project_change? params[:project]"
    },
    {
        "line": 51,
        "fullcodeline": "c_type = case params[:filename].split(/\\./)[-1]"
    },
    {
        "line": 62,
        "fullcodeline": "headers.update("
    },
    {
        "line": 25,
        "fullcodeline": ":message => \"No permission to delete binaries from project #{params[:project]}\""
    },
    {
        "line": 52,
        "fullcodeline": "when \"rpm\""
    },
    {
        "line": 53,
        "fullcodeline": "\"application/x-rpm\""
    },
    {
        "line": 54,
        "fullcodeline": "when \"deb\""
    },
    {
        "line": 55,
        "fullcodeline": "\"application/x-deb\""
    },
    {
        "line": 57,
        "fullcodeline": "\"application/x-cd-image\""
    },
    {
        "line": 58,
        "fullcodeline": "else"
    }
]