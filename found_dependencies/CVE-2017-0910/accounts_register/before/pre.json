[
    {
        "line": 3,
        "fullcodeline": "key = request.POST['key']"
    },
    {
        "line": 4,
        "fullcodeline": "confirmation = Confirmation.objects.get(confirmation_key=key)"
    },
    {
        "line": 5,
        "fullcodeline": "prereg_user = confirmation.content_object"
    },
    {
        "line": 6,
        "fullcodeline": "email = prereg_user.email"
    },
    {
        "line": 7,
        "fullcodeline": "realm_creation = prereg_user.realm_creation"
    },
    {
        "line": 8,
        "fullcodeline": "password_required = prereg_user.password_required"
    },
    {
        "line": 10,
        "fullcodeline": "validators.validate_email(email)"
    },
    {
        "line": 34,
        "fullcodeline": "name_validated = False"
    },
    {
        "line": 19,
        "fullcodeline": "if realm and not email_allowed_for_realm(email, realm):"
    },
    {
        "line": 23,
        "fullcodeline": "if realm and realm.deactivated:"
    },
    {
        "line": 96,
        "fullcodeline": "if form.is_valid():"
    },
    {
        "line": 194,
        "fullcodeline": "return render("
    },
    {
        "line": 13,
        "fullcodeline": "realm = None"
    },
    {
        "line": 15,
        "fullcodeline": "realm = get_realm(get_subdomain(request))"
    },
    {
        "line": 29,
        "fullcodeline": "validate_email_for_realm(realm, email)"
    },
    {
        "line": 37,
        "fullcodeline": "if request.POST.get('from_confirmation'):"
    },
    {
        "line": 82,
        "fullcodeline": "postdata = request.POST.copy()"
    },
    {
        "line": 92,
        "fullcodeline": "form = RegistrationForm(postdata, realm_creation=realm_creation)"
    },
    {
        "line": 110,
        "fullcodeline": "full_name = form.cleaned_data['full_name']"
    },
    {
        "line": 111,
        "fullcodeline": "short_name = email_to_username(email)"
    },
    {
        "line": 113,
        "fullcodeline": "timezone = u\"\""
    },
    {
        "line": 122,
        "fullcodeline": "return_data = {}  # type: Dict[str, bool]"
    },
    {
        "line": 168,
        "fullcodeline": "send_initial_pms(user_profile)"
    },
    {
        "line": 182,
        "fullcodeline": "auth_result = authenticate(username=user_profile.email,"
    },
    {
        "line": 16,
        "fullcodeline": "if prereg_user.realm is not None and prereg_user.realm != realm:"
    },
    {
        "line": 20,
        "fullcodeline": "return render(request, \"zerver/closed_realm.html\","
    },
    {
        "line": 26,
        "fullcodeline": "return redirect_to_deactivation_notice()"
    },
    {
        "line": 42,
        "fullcodeline": "if realm is not None and realm.is_zephyr_mirror_realm:"
    },
    {
        "line": 83,
        "fullcodeline": "if name_changes_disabled(realm):"
    },
    {
        "line": 97,
        "fullcodeline": "if password_auth_enabled(realm):"
    },
    {
        "line": 108,
        "fullcodeline": "assert(realm is not None)"
    },
    {
        "line": 123,
        "fullcodeline": "if ldap_auth_enabled(realm):"
    },
    {
        "line": 192,
        "fullcodeline": "return login_and_go_to_home(request, auth_result)"
    },
    {
        "line": 197,
        "fullcodeline": "context={'form': form,"
    },
    {
        "line": 39,
        "fullcodeline": "del request.session['authenticated_full_name']"
    },
    {
        "line": 47,
        "fullcodeline": "hesiod_name = compute_mit_user_fullname(email)"
    },
    {
        "line": 48,
        "fullcodeline": "form = RegistrationForm("
    },
    {
        "line": 51,
        "fullcodeline": "name_validated = True"
    },
    {
        "line": 93,
        "fullcodeline": "if not (password_auth_enabled(realm) and password_required):"
    },
    {
        "line": 98,
        "fullcodeline": "password = form.cleaned_data['password']"
    },
    {
        "line": 101,
        "fullcodeline": "password = None"
    },
    {
        "line": 104,
        "fullcodeline": "string_id = form.cleaned_data['realm_subdomain']"
    },
    {
        "line": 105,
        "fullcodeline": "realm_name = form.cleaned_data['realm_name']"
    },
    {
        "line": 106,
        "fullcodeline": "realm = do_create_realm(string_id, realm_name)"
    },
    {
        "line": 107,
        "fullcodeline": "setup_initial_streams(realm)"
    },
    {
        "line": 114,
        "fullcodeline": "if 'timezone' in request.POST and request.POST['timezone'] in get_all_timezones():"
    },
    {
        "line": 115,
        "fullcodeline": "timezone = request.POST['timezone']"
    },
    {
        "line": 118,
        "fullcodeline": "existing_user_profile = get_user_profile_by_email(email)"
    },
    {
        "line": 136,
        "fullcodeline": "auth_result = authenticate(request,"
    },
    {
        "line": 171,
        "fullcodeline": "setup_initial_private_stream(user_profile)"
    },
    {
        "line": 172,
        "fullcodeline": "send_initial_realm_messages(realm)"
    },
    {
        "line": 201,
        "fullcodeline": "'lock_name': name_validated and name_changes_disabled(realm),"
    },
    {
        "line": 206,
        "fullcodeline": "'password_required': password_auth_enabled(realm) and password_required,"
    },
    {
        "line": 207,
        "fullcodeline": "'password_auth_enabled': password_auth_enabled(realm),"
    },
    {
        "line": 209,
        "fullcodeline": "'MAX_REALM_NAME_LENGTH': str(Realm.MAX_REALM_NAME_LENGTH),"
    },
    {
        "line": 210,
        "fullcodeline": "'MAX_NAME_LENGTH': str(UserProfile.MAX_NAME_LENGTH),"
    },
    {
        "line": 211,
        "fullcodeline": "'MAX_PASSWORD_LENGTH': str(form.MAX_PASSWORD_LENGTH),"
    },
    {
        "line": 212,
        "fullcodeline": "'MAX_REALM_SUBDOMAIN_LENGTH': str(Realm.MAX_REALM_SUBDOMAIN_LENGTH)"
    },
    {
        "line": 17,
        "fullcodeline": "return render(request, 'confirmation/link_does_not_exist.html')"
    },
    {
        "line": 21,
        "fullcodeline": "context={\"closed_domain_name\": realm.name})"
    },
    {
        "line": 31,
        "fullcodeline": "return HttpResponseRedirect(reverse('django.contrib.auth.views.login') + '?email=' +"
    },
    {
        "line": 141,
        "fullcodeline": "if auth_result is None:"
    },
    {
        "line": 150,
        "fullcodeline": "return login_and_go_to_home(request, auth_result)"
    },
    {
        "line": 151,
        "fullcodeline": "elif existing_user_profile is not None and existing_user_profile.is_mirror_dummy:"
    },
    {
        "line": 178,
        "fullcodeline": "return redirect_and_log_into_subdomain(realm, full_name, email)"
    },
    {
        "line": 188,
        "fullcodeline": "logging.error(\"Subdomain mismatch in registration %s: %s\" % ("
    },
    {
        "line": 190,
        "fullcodeline": "return redirect('/')"
    },
    {
        "line": 200,
        "fullcodeline": "'full_name': request.session.get('authenticated_full_name', None),"
    },
    {
        "line": 88,
        "fullcodeline": "postdata.update({'full_name': request.session['authenticated_full_name']})"
    },
    {
        "line": 89,
        "fullcodeline": "name_validated = True"
    },
    {
        "line": 120,
        "fullcodeline": "existing_user_profile = None"
    },
    {
        "line": 152,
        "fullcodeline": "user_profile = existing_user_profile"
    },
    {
        "line": 153,
        "fullcodeline": "do_activate_user(user_profile)"
    },
    {
        "line": 154,
        "fullcodeline": "do_change_password(user_profile, password)"
    },
    {
        "line": 155,
        "fullcodeline": "do_change_full_name(user_profile, full_name, user_profile)"
    },
    {
        "line": 156,
        "fullcodeline": "do_set_user_display_setting(user_profile, 'timezone', timezone)"
    },
    {
        "line": 158,
        "fullcodeline": "user_profile = do_create_user(email, password, realm, full_name, short_name,"
    },
    {
        "line": 49,
        "fullcodeline": "initial={'full_name': hesiod_name if \"@\" not in hesiod_name else \"\"},"
    },
    {
        "line": 53,
        "fullcodeline": "for backend in get_backends():"
    },
    {
        "line": 74,
        "fullcodeline": "elif 'full_name' in request.POST:"
    },
    {
        "line": 146,
        "fullcodeline": "return HttpResponseRedirect(reverse('django.contrib.auth.views.login') + '?email=' +"
    },
    {
        "line": 32,
        "fullcodeline": "urllib.parse.quote_plus(email))"
    },
    {
        "line": 75,
        "fullcodeline": "form = RegistrationForm("
    },
    {
        "line": 80,
        "fullcodeline": "form = RegistrationForm(realm_creation=realm_creation)"
    },
    {
        "line": 162,
        "fullcodeline": "newsletter_data={\"IP\": request.META['REMOTE_ADDR']})"
    },
    {
        "line": 54,
        "fullcodeline": "if isinstance(backend, LDAPBackend):"
    },
    {
        "line": 147,
        "fullcodeline": "urllib.parse.quote_plus(email))"
    },
    {
        "line": 76,
        "fullcodeline": "initial={'full_name': request.POST.get('full_name')},"
    },
    {
        "line": 57,
        "fullcodeline": "ldap_full_name = ldap_attrs[settings.AUTH_LDAP_USER_ATTR_MAP['full_name']][0]"
    },
    {
        "line": 58,
        "fullcodeline": "request.session['authenticated_full_name'] = ldap_full_name"
    },
    {
        "line": 59,
        "fullcodeline": "name_validated = True"
    },
    {
        "line": 65,
        "fullcodeline": "form = RegistrationForm({'full_name': ldap_full_name},"
    },
    {
        "line": 55,
        "fullcodeline": "ldap_attrs = _LDAPUser(backend, backend.django_to_ldap_username(email)).attrs"
    }
]