[
    {
        "line": 4,
        "fullcodeline": "struct mm_struct *mm = vma->vm_mm;"
    },
    {
        "line": 8,
        "fullcodeline": "address &= PAGE_MASK;"
    },
    {
        "line": 9,
        "fullcodeline": "error = security_mmap_addr(address);"
    },
    {
        "line": 14,
        "fullcodeline": "prev = vma->vm_prev;"
    },
    {
        "line": 31,
        "fullcodeline": "anon_vma_lock_write(vma->anon_vma);"
    },
    {
        "line": 70,
        "fullcodeline": "anon_vma_unlock_write(vma->anon_vma);"
    },
    {
        "line": 34,
        "fullcodeline": "if (address < vma->vm_start) {"
    },
    {
        "line": 16,
        "fullcodeline": "if (prev && !(prev->vm_flags & VM_GROWSDOWN) &&"
    },
    {
        "line": 17,
        "fullcodeline": "(prev->vm_flags & (VM_WRITE|VM_READ|VM_EXEC))) {"
    },
    {
        "line": 23,
        "fullcodeline": "if (unlikely(anon_vma_prepare(vma)))"
    },
    {
        "line": 37,
        "fullcodeline": "size = vma->vm_end - address;"
    },
    {
        "line": 38,
        "fullcodeline": "grow = (vma->vm_start - address) >> PAGE_SHIFT;"
    },
    {
        "line": 40,
        "fullcodeline": "error = -ENOMEM;"
    },
    {
        "line": 18,
        "fullcodeline": "if (address - prev->vm_end < stack_guard_gap)"
    },
    {
        "line": 24,
        "fullcodeline": "return -ENOMEM;"
    },
    {
        "line": 41,
        "fullcodeline": "if (grow <= vma->vm_pgoff) {"
    },
    {
        "line": 42,
        "fullcodeline": "error = acct_stack_growth(vma, size, grow);"
    },
    {
        "line": 19,
        "fullcodeline": "return -ENOMEM;"
    },
    {
        "line": 43,
        "fullcodeline": "if (!error) {"
    },
    {
        "line": 55,
        "fullcodeline": "spin_lock(&mm->page_table_lock);"
    },
    {
        "line": 58,
        "fullcodeline": "vm_stat_account(mm, vma->vm_flags, grow);"
    },
    {
        "line": 59,
        "fullcodeline": "anon_vma_interval_tree_pre_update_vma(vma);"
    },
    {
        "line": 60,
        "fullcodeline": "vma->vm_start = address;"
    },
    {
        "line": 61,
        "fullcodeline": "vma->vm_pgoff -= grow;"
    },
    {
        "line": 62,
        "fullcodeline": "anon_vma_interval_tree_post_update_vma(vma);"
    },
    {
        "line": 63,
        "fullcodeline": "vma_gap_update(vma);"
    },
    {
        "line": 66,
        "fullcodeline": "perf_event_mmap(vma);"
    },
    {
        "line": 56,
        "fullcodeline": "if (vma->vm_flags & VM_LOCKED)"
    },
    {
        "line": 57,
        "fullcodeline": "mm->locked_vm += grow;"
    }
]