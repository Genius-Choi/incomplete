[
    {
        "line": 4,
        "fullcodeline": "int nullshell = 0;"
    },
    {
        "line": 5,
        "fullcodeline": "const uid_t uid = getuid();"
    },
    {
        "line": 6,
        "fullcodeline": "struct sinfo info = { 0 };"
    },
    {
        "line": 9,
        "fullcodeline": "sanitize_env();"
    },
    {
        "line": 10,
        "fullcodeline": "setlocale(LC_ALL, \"\");"
    },
    {
        "line": 11,
        "fullcodeline": "bindtextdomain(PACKAGE, LOCALEDIR);"
    },
    {
        "line": 12,
        "fullcodeline": "textdomain(PACKAGE);"
    },
    {
        "line": 13,
        "fullcodeline": "atexit(close_stdout);"
    },
    {
        "line": 15,
        "fullcodeline": "parse_argv(argc, argv, &info);"
    },
    {
        "line": 54,
        "fullcodeline": "oldshell = pw->pw_shell;"
    },
    {
        "line": 78,
        "fullcodeline": "printf(_(\"Changing shell for %s.\\n\"), pw->pw_name);"
    },
    {
        "line": 91,
        "fullcodeline": "check_shell(info.shell);"
    },
    {
        "line": 101,
        "fullcodeline": "pw->pw_shell = info.shell;"
    },
    {
        "line": 107,
        "fullcodeline": "printf(_(\"Shell changed.\\n\"));"
    },
    {
        "line": 16,
        "fullcodeline": "if (!info.username) {"
    },
    {
        "line": 29,
        "fullcodeline": "if (!(is_local(pw->pw_name)))"
    },
    {
        "line": 55,
        "fullcodeline": "if (oldshell == NULL || *oldshell == '\\0') {"
    },
    {
        "line": 65,
        "fullcodeline": "if (uid != 0 && uid != pw->pw_uid) {"
    },
    {
        "line": 72,
        "fullcodeline": "if (uid != 0 && !get_shell_list(oldshell)) {"
    },
    {
        "line": 85,
        "fullcodeline": "if (!info.shell) {"
    },
    {
        "line": 93,
        "fullcodeline": "if (!nullshell && strcmp(oldshell, info.shell) == 0)"
    },
    {
        "line": 102,
        "fullcodeline": "if (setpwnam(pw, \".chsh\") < 0)"
    },
    {
        "line": 17,
        "fullcodeline": "pw = getpwuid(uid);"
    },
    {
        "line": 30,
        "fullcodeline": "errx(EXIT_FAILURE, _(\"can only change local entries\"));"
    },
    {
        "line": 56,
        "fullcodeline": "oldshell = _PATH_BSHELL;\t/* default */"
    },
    {
        "line": 57,
        "fullcodeline": "nullshell = 1;"
    },
    {
        "line": 67,
        "fullcodeline": "errno = EACCES;"
    },
    {
        "line": 68,
        "fullcodeline": "err(EXIT_FAILURE,"
    },
    {
        "line": 73,
        "fullcodeline": "errno = EACCES;"
    },
    {
        "line": 74,
        "fullcodeline": "err(EXIT_FAILURE, _(\"your shell is not in %s, \""
    },
    {
        "line": 86,
        "fullcodeline": "info.shell = ask_new_shell(_(\"New shell\"), oldshell);"
    },
    {
        "line": 94,
        "fullcodeline": "errx(EXIT_SUCCESS, _(\"Shell not changed.\"));"
    },
    {
        "line": 103,
        "fullcodeline": "err(EXIT_FAILURE, _(\"setpwnam failed\\n\""
    },
    {
        "line": 18,
        "fullcodeline": "if (!pw)"
    },
    {
        "line": 22,
        "fullcodeline": "pw = getpwnam(info.username);"
    },
    {
        "line": 69,
        "fullcodeline": "_(\"running UID doesn't match UID of user we're \""
    },
    {
        "line": 87,
        "fullcodeline": "if (!info.shell)"
    },
    {
        "line": 19,
        "fullcodeline": "errx(EXIT_FAILURE, _(\"you (user %d) don't exist.\"),"
    },
    {
        "line": 23,
        "fullcodeline": "if (!pw)"
    },
    {
        "line": 24,
        "fullcodeline": "errx(EXIT_FAILURE, _(\"user \\\"%s\\\" does not exist.\"),"
    }
]