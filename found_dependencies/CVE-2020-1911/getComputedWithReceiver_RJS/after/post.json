[
    {
        "line": 21,
        "fullcodeline": "auto converted = toPropertyKeyIfObject(runtime, nameValHandle);"
    },
    {
        "line": 31,
        "fullcodeline": "MutableHandle<JSObject> propObj{runtime};"
    },
    {
        "line": 22,
        "fullcodeline": "if (LLVM_UNLIKELY(converted == ExecutionStatus::EXCEPTION)) {"
    },
    {
        "line": 32,
        "fullcodeline": "if (LLVM_UNLIKELY("
    },
    {
        "line": 39,
        "fullcodeline": "if (!propObj)"
    },
    {
        "line": 42,
        "fullcodeline": "if (LLVM_LIKELY("
    },
    {
        "line": 33,
        "fullcodeline": "getComputedPrimitiveDescriptor("
    },
    {
        "line": 43,
        "fullcodeline": "!desc.flags.accessor && !desc.flags.hostObject &&"
    },
    {
        "line": 49,
        "fullcodeline": "auto *accessor = vmcast<PropertyAccessor>("
    },
    {
        "line": 40,
        "fullcodeline": "return createPseudoHandle(HermesValue::encodeUndefinedValue());"
    },
    {
        "line": 45,
        "fullcodeline": "return createPseudoHandle("
    },
    {
        "line": 51,
        "fullcodeline": "if (!accessor->getter)"
    },
    {
        "line": 55,
        "fullcodeline": "return accessor->getter.get(runtime)->executeCall0("
    },
    {
        "line": 9,
        "fullcodeline": "if (auto arrayIndex = toArrayIndexFastPath(*nameValHandle)) {"
    },
    {
        "line": 11,
        "fullcodeline": "PseudoHandle<> ourValue = createPseudoHandle("
    },
    {
        "line": 46,
        "fullcodeline": "getComputedSlotValue(propObj.get(), runtime, desc));"
    },
    {
        "line": 50,
        "fullcodeline": "getComputedSlotValue(propObj.get(), runtime, desc));"
    },
    {
        "line": 56,
        "fullcodeline": "runtime->makeHandle(accessor->getter), runtime, receiver);"
    },
    {
        "line": 13,
        "fullcodeline": "if (LLVM_LIKELY(!ourValue->isEmpty()))"
    },
    {
        "line": 52,
        "fullcodeline": "return createPseudoHandle(HermesValue::encodeUndefinedValue());"
    },
    {
        "line": 58,
        "fullcodeline": "SymbolID id{};"
    },
    {
        "line": 59,
        "fullcodeline": "LAZY_TO_IDENTIFIER(runtime, nameValPrimitiveHandle, id);"
    },
    {
        "line": 60,
        "fullcodeline": "auto propRes = vmcast<HostObject>(propObj.get())->get(id);"
    },
    {
        "line": 12,
        "fullcodeline": "getOwnIndexed(selfHandle.get(), runtime, *arrayIndex));"
    },
    {
        "line": 61,
        "fullcodeline": "if (propRes == ExecutionStatus::EXCEPTION)"
    },
    {
        "line": 65,
        "fullcodeline": "assert(desc.flags.proxyObject && \"descriptor flags are impossible\");"
    },
    {
        "line": 66,
        "fullcodeline": "CallResult<Handle<>> key = toPropertyKey(runtime, nameValPrimitiveHandle);"
    },
    {
        "line": 67,
        "fullcodeline": "if (key == ExecutionStatus::EXCEPTION)"
    },
    {
        "line": 69,
        "fullcodeline": "return JSProxy::getComputed(propObj, runtime, *key, receiver);"
    }
]