[
    {
        "line": 3,
        "fullcodeline": "sc_card_t *card = p15card->card;"
    },
    {
        "line": 4,
        "fullcodeline": "unsigned char buff[128];"
    },
    {
        "line": 6,
        "fullcodeline": "size_t field_length = 0, modulus_length = 0;"
    },
    {
        "line": 9,
        "fullcodeline": "set_string (&p15card->tokeninfo->label, \"ID-kaart\");"
    },
    {
        "line": 10,
        "fullcodeline": "set_string (&p15card->tokeninfo->manufacturer_id, \"AS Sertifitseerimiskeskus\");"
    },
    {
        "line": 13,
        "fullcodeline": "sc_format_path (\"3f00eeee5044\", &tmppath);"
    },
    {
        "line": 14,
        "fullcodeline": "r = sc_select_file (card, &tmppath, NULL);"
    },
    {
        "line": 15,
        "fullcodeline": "SC_TEST_RET(card->ctx, SC_LOG_DEBUG_NORMAL, r, \"select esteid PD failed\");"
    },
    {
        "line": 18,
        "fullcodeline": "r = sc_read_record (card, SC_ESTEID_PD_DOCUMENT_NR, buff, sizeof(buff), SC_RECORD_BY_REC_NR);"
    },
    {
        "line": 19,
        "fullcodeline": "SC_TEST_RET(card->ctx, SC_LOG_DEBUG_NORMAL, r, \"read document number failed\");"
    },
    {
        "line": 20,
        "fullcodeline": "buff[MIN((size_t) r, (sizeof buff)-1)] = '\\0';"
    },
    {
        "line": 21,
        "fullcodeline": "set_string (&p15card->tokeninfo->serial_number, (const char *) buff);"
    },
    {
        "line": 23,
        "fullcodeline": "p15card->tokeninfo->flags = SC_PKCS15_TOKEN_PRN_GENERATION"
    },
    {
        "line": 81,
        "fullcodeline": "sc_format_path (\"3f000016\", &tmppath);"
    },
    {
        "line": 82,
        "fullcodeline": "r = sc_select_file (card, &tmppath, NULL);"
    },
    {
        "line": 28,
        "fullcodeline": "for (i = 0; i < 2; i++) {"
    },
    {
        "line": 87,
        "fullcodeline": "for (i = 0; i < 3; i++) {"
    },
    {
        "line": 139,
        "fullcodeline": "for (i = 0; i < 2; i++) {"
    },
    {
        "line": 29,
        "fullcodeline": "static const char *esteid_cert_names[2] = {"
    },
    {
        "line": 32,
        "fullcodeline": "static char const *esteid_cert_paths[2] = {"
    },
    {
        "line": 35,
        "fullcodeline": "static int esteid_cert_ids[2] = {1, 2};"
    },
    {
        "line": 40,
        "fullcodeline": "memset(&cert_info, 0, sizeof(cert_info));"
    },
    {
        "line": 41,
        "fullcodeline": "memset(&cert_obj, 0, sizeof(cert_obj));"
    },
    {
        "line": 43,
        "fullcodeline": "cert_info.id.value[0] = esteid_cert_ids[i];"
    },
    {
        "line": 44,
        "fullcodeline": "cert_info.id.len = 1;"
    },
    {
        "line": 45,
        "fullcodeline": "sc_format_path(esteid_cert_paths[i], &cert_info.path);"
    },
    {
        "line": 46,
        "fullcodeline": "strlcpy(cert_obj.label, esteid_cert_names[i], sizeof(cert_obj.label));"
    },
    {
        "line": 47,
        "fullcodeline": "r = sc_pkcs15emu_add_x509_cert(p15card, &cert_obj, &cert_info);"
    },
    {
        "line": 89,
        "fullcodeline": "static const char *esteid_pin_names[3] = {"
    },
    {
        "line": 94,
        "fullcodeline": "static const int esteid_pin_min[3] = {4, 5, 8};"
    },
    {
        "line": 95,
        "fullcodeline": "static const int esteid_pin_ref[3] = {1, 2, 0};"
    },
    {
        "line": 96,
        "fullcodeline": "static const int esteid_pin_authid[3] = {1, 2, 3};"
    },
    {
        "line": 97,
        "fullcodeline": "static const int esteid_pin_flags[3] = {0, 0, SC_PKCS15_PIN_FLAG_UNBLOCKING_PIN};"
    },
    {
        "line": 102,
        "fullcodeline": "memset(&pin_info, 0, sizeof(pin_info));"
    },
    {
        "line": 103,
        "fullcodeline": "memset(&pin_obj, 0, sizeof(pin_obj));"
    },
    {
        "line": 106,
        "fullcodeline": "r = sc_read_record (card, i + 1, buff, sizeof(buff), SC_RECORD_BY_REC_NR);"
    },
    {
        "line": 109,
        "fullcodeline": "tries_left = buff[5];"
    },
    {
        "line": 113,
        "fullcodeline": "pin_info.auth_type = SC_PKCS15_PIN_AUTH_TYPE_PIN;"
    },
    {
        "line": 116,
        "fullcodeline": "pin_info.attrs.pin.type = SC_PKCS15_PIN_TYPE_ASCII_NUMERIC;"
    },
    {
        "line": 121,
        "fullcodeline": "pin_info.tries_left = (int)tries_left;"
    },
    {
        "line": 122,
        "fullcodeline": "pin_info.max_tries = 3;"
    },
    {
        "line": 124,
        "fullcodeline": "strlcpy(pin_obj.label, esteid_pin_names[i], sizeof(pin_obj.label));"
    },
    {
        "line": 125,
        "fullcodeline": "pin_obj.flags = esteid_pin_flags[i];"
    },
    {
        "line": 133,
        "fullcodeline": "r = sc_pkcs15emu_add_pin_obj(p15card, &pin_obj, &pin_info);"
    },
    {
        "line": 140,
        "fullcodeline": "static int prkey_pin[2] = {1, 2};"
    },
    {
        "line": 142,
        "fullcodeline": "static const char *prkey_name[2] = {"
    },
    {
        "line": 149,
        "fullcodeline": "memset(&prkey_info, 0, sizeof(prkey_info));"
    },
    {
        "line": 150,
        "fullcodeline": "memset(&prkey_obj, 0, sizeof(prkey_obj));"
    },
    {
        "line": 154,
        "fullcodeline": "prkey_info.native = 1;"
    },
    {
        "line": 155,
        "fullcodeline": "prkey_info.key_reference = i + 1;"
    },
    {
        "line": 156,
        "fullcodeline": "prkey_info.field_length = field_length;"
    },
    {
        "line": 157,
        "fullcodeline": "prkey_info.modulus_length = modulus_length;"
    },
    {
        "line": 165,
        "fullcodeline": "strlcpy(prkey_obj.label, prkey_name[i], sizeof(prkey_obj.label));"
    },
    {
        "line": 168,
        "fullcodeline": "prkey_obj.user_consent = 0;"
    },
    {
        "line": 169,
        "fullcodeline": "prkey_obj.flags = SC_PKCS15_CO_FLAG_PRIVATE;"
    },
    {
        "line": 48,
        "fullcodeline": "if (r < 0)"
    },
    {
        "line": 50,
        "fullcodeline": "if (i == 0) {"
    },
    {
        "line": 128,
        "fullcodeline": "if (i < 2) {"
    },
    {
        "line": 158,
        "fullcodeline": "if (i == 1)"
    },
    {
        "line": 171,
        "fullcodeline": "if(field_length > 0)"
    },
    {
        "line": 51,
        "fullcodeline": "sc_pkcs15_cert_t *cert = NULL;"
    },
    {
        "line": 52,
        "fullcodeline": "r = sc_pkcs15_read_certificate(p15card, &cert_info, &cert);"
    },
    {
        "line": 159,
        "fullcodeline": "prkey_info.usage = SC_PKCS15_PRKEY_USAGE_NONREPUDIATION;"
    },
    {
        "line": 172,
        "fullcodeline": "r = sc_pkcs15emu_add_ec_prkey(p15card, &prkey_obj, &prkey_info);"
    },
    {
        "line": 53,
        "fullcodeline": "if (r < 0)"
    },
    {
        "line": 55,
        "fullcodeline": "if (cert->key->algorithm == SC_ALGORITHM_EC)"
    },
    {
        "line": 59,
        "fullcodeline": "if (r == SC_SUCCESS) {"
    },
    {
        "line": 174,
        "fullcodeline": "r = sc_pkcs15emu_add_rsa_prkey(p15card, &prkey_obj, &prkey_info);"
    },
    {
        "line": 56,
        "fullcodeline": "field_length = cert->key->u.ec.params.field_length;"
    },
    {
        "line": 60,
        "fullcodeline": "static const struct sc_object_id cn_oid = {{ 2, 5, 4, 3, -1 }};"
    },
    {
        "line": 61,
        "fullcodeline": "u8 *cn_name = NULL;"
    },
    {
        "line": 62,
        "fullcodeline": "size_t cn_len = 0;"
    },
    {
        "line": 63,
        "fullcodeline": "sc_pkcs15_get_name_from_dn(card->ctx, cert->subject,"
    },
    {
        "line": 74,
        "fullcodeline": "free(cn_name);"
    },
    {
        "line": 75,
        "fullcodeline": "sc_pkcs15_free_certificate(cert);"
    },
    {
        "line": 160,
        "fullcodeline": "else if(field_length > 0) // ECC has sign and derive usage"
    },
    {
        "line": 58,
        "fullcodeline": "modulus_length = cert->key->u.rsa.modulus.len * 8;"
    },
    {
        "line": 65,
        "fullcodeline": "if (cn_len > 0) {"
    },
    {
        "line": 161,
        "fullcodeline": "prkey_info.usage = SC_PKCS15_PRKEY_USAGE_SIGN | SC_PKCS15_PRKEY_USAGE_DERIVE;"
    },
    {
        "line": 66,
        "fullcodeline": "char *token_name = malloc(cn_len+1);"
    },
    {
        "line": 163,
        "fullcodeline": "prkey_info.usage = SC_PKCS15_PRKEY_USAGE_SIGN | SC_PKCS15_PRKEY_USAGE_ENCRYPT | SC_PKCS15_PRKEY_USAGE_DECRYPT;"
    },
    {
        "line": 68,
        "fullcodeline": "memcpy(token_name, cn_name, cn_len);"
    },
    {
        "line": 69,
        "fullcodeline": "token_name[cn_len] = '\\0';"
    },
    {
        "line": 70,
        "fullcodeline": "set_string(&p15card->tokeninfo->label, (const char*)token_name);"
    },
    {
        "line": 71,
        "fullcodeline": "free(token_name);"
    }
]