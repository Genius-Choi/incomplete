[
    {
        "line": 3,
        "fullcodeline": "int subsampling_dx = parameters->subsampling_dx;"
    },
    {
        "line": 4,
        "fullcodeline": "int subsampling_dy = parameters->subsampling_dy;"
    },
    {
        "line": 9,
        "fullcodeline": "int j, currentPlane, numcomps = 0, w, h;"
    },
    {
        "line": 10,
        "fullcodeline": "OPJ_COLOR_SPACE color_space = OPJ_CLRSPC_UNKNOWN;"
    },
    {
        "line": 11,
        "fullcodeline": "opj_image_cmptparm_t cmptparm[4]; /* RGBA */"
    },
    {
        "line": 12,
        "fullcodeline": "opj_image_t *image = NULL;"
    },
    {
        "line": 13,
        "fullcodeline": "int has_alpha = 0;"
    },
    {
        "line": 16,
        "fullcodeline": "OPJ_BOOL is_cinema = OPJ_IS_CINEMA(parameters->rsiz);"
    },
    {
        "line": 17,
        "fullcodeline": "convert_XXx32s_C1R cvtTifTo32s = NULL;"
    },
    {
        "line": 18,
        "fullcodeline": "convert_32s_CXPX cvtCxToPx = NULL;"
    },
    {
        "line": 19,
        "fullcodeline": "OPJ_INT32* buffer32s = NULL;"
    },
    {
        "line": 20,
        "fullcodeline": "OPJ_INT32* planes[4];"
    },
    {
        "line": 23,
        "fullcodeline": "tif = TIFFOpen(filename, \"r\");"
    },
    {
        "line": 30,
        "fullcodeline": "tiBps = tiPhoto = tiSf = tiSpp = tiPC = 0;"
    },
    {
        "line": 31,
        "fullcodeline": "tiWidth = tiHeight = 0;"
    },
    {
        "line": 33,
        "fullcodeline": "TIFFGetField(tif, TIFFTAG_IMAGEWIDTH, &tiWidth);"
    },
    {
        "line": 34,
        "fullcodeline": "TIFFGetField(tif, TIFFTAG_IMAGELENGTH, &tiHeight);"
    },
    {
        "line": 35,
        "fullcodeline": "TIFFGetField(tif, TIFFTAG_BITSPERSAMPLE, &tiBps);"
    },
    {
        "line": 36,
        "fullcodeline": "TIFFGetField(tif, TIFFTAG_SAMPLEFORMAT, &tiSf);"
    },
    {
        "line": 37,
        "fullcodeline": "TIFFGetField(tif, TIFFTAG_SAMPLESPERPIXEL, &tiSpp);"
    },
    {
        "line": 38,
        "fullcodeline": "TIFFGetField(tif, TIFFTAG_PHOTOMETRIC, &tiPhoto);"
    },
    {
        "line": 39,
        "fullcodeline": "TIFFGetField(tif, TIFFTAG_PLANARCONFIG, &tiPC);"
    },
    {
        "line": 40,
        "fullcodeline": "w= (int)tiWidth;"
    },
    {
        "line": 41,
        "fullcodeline": "h= (int)tiHeight;"
    },
    {
        "line": 132,
        "fullcodeline": "memset(&cmptparm[0], 0, 4 * sizeof(opj_image_cmptparm_t));"
    },
    {
        "line": 171,
        "fullcodeline": "image = opj_image_create((OPJ_UINT32)numcomps, &cmptparm[0], color_space);"
    },
    {
        "line": 178,
        "fullcodeline": "image->x0 = (OPJ_UINT32)parameters->image_offset_x0;"
    },
    {
        "line": 179,
        "fullcodeline": "image->y0 = (OPJ_UINT32)parameters->image_offset_y0;"
    },
    {
        "line": 180,
        "fullcodeline": "image->x1 =\t!image->x0 ? (OPJ_UINT32)(w - 1) * (OPJ_UINT32)subsampling_dx + 1 :"
    },
    {
        "line": 182,
        "fullcodeline": "image->y1 =\t!image->y0 ? (OPJ_UINT32)(h - 1) * (OPJ_UINT32)subsampling_dy + 1 :"
    },
    {
        "line": 189,
        "fullcodeline": "image->comps[numcomps - 1].alpha = (OPJ_UINT16)(1 - (numcomps & 1));"
    },
    {
        "line": 191,
        "fullcodeline": "strip_size = TIFFStripSize(tif);"
    },
    {
        "line": 193,
        "fullcodeline": "buf = _TIFFmalloc(strip_size);"
    },
    {
        "line": 199,
        "fullcodeline": "rowStride = ((OPJ_SIZE_T)w * tiSpp * tiBps + 7U) / 8U;"
    },
    {
        "line": 200,
        "fullcodeline": "buffer32s = (OPJ_INT32 *)malloc((OPJ_SIZE_T)w * tiSpp * sizeof(OPJ_INT32));"
    },
    {
        "line": 208,
        "fullcodeline": "strip = 0;"
    },
    {
        "line": 209,
        "fullcodeline": "currentPlane = 0;"
    },
    {
        "line": 238,
        "fullcodeline": "free(buffer32s);"
    },
    {
        "line": 239,
        "fullcodeline": "_TIFFfree(buf);"
    },
    {
        "line": 240,
        "fullcodeline": "TIFFClose(tif);"
    },
    {
        "line": 25,
        "fullcodeline": "if(!tif)"
    },
    {
        "line": 43,
        "fullcodeline": "if(tiBps > 16U) {"
    },
    {
        "line": 49,
        "fullcodeline": "if(tiPhoto != PHOTOMETRIC_MINISBLACK && tiPhoto != PHOTOMETRIC_RGB) {"
    },
    {
        "line": 107,
        "fullcodeline": "TIFFGetFieldDefaulted(tif, TIFFTAG_EXTRASAMPLES,"
    },
    {
        "line": 134,
        "fullcodeline": "if ((tiPhoto == PHOTOMETRIC_RGB) && (is_cinema) && (tiBps != 12U)) {"
    },
    {
        "line": 144,
        "fullcodeline": "if(tiPhoto == PHOTOMETRIC_RGB) /* RGB(A) */"
    },
    {
        "line": 156,
        "fullcodeline": "if (tiPC == PLANARCONFIG_SEPARATE) {"
    },
    {
        "line": 161,
        "fullcodeline": "for(j = 0; j < numcomps; j++)"
    },
    {
        "line": 172,
        "fullcodeline": "if(!image)"
    },
    {
        "line": 185,
        "fullcodeline": "for(j = 0; j < numcomps; j++)"
    },
    {
        "line": 194,
        "fullcodeline": "if (buf == NULL) {"
    },
    {
        "line": 201,
        "fullcodeline": "if (buffer32s == NULL) {"
    },
    {
        "line": 236,
        "fullcodeline": "} while ((tiPC == PLANARCONFIG_SEPARATE) && (currentPlane < numcomps));"
    },
    {
        "line": 27,
        "fullcodeline": "fprintf(stderr, \"tiftoimage:Failed to open %s for reading\\n\", filename);"
    },
    {
        "line": 44,
        "fullcodeline": "fprintf(stderr,\"tiftoimage: Bits=%d, Only 1 to 16 bits implemented\\n\",tiBps);"
    },
    {
        "line": 45,
        "fullcodeline": "fprintf(stderr,\"\\tAborting\\n\");"
    },
    {
        "line": 46,
        "fullcodeline": "TIFFClose(tif);"
    },
    {
        "line": 50,
        "fullcodeline": "fprintf(stderr,\"tiftoimage: Bad color format %d.\\n\\tOnly RGB(A) and GRAY(A) has been implemented\\n\",(int) tiPhoto);"
    },
    {
        "line": 51,
        "fullcodeline": "fprintf(stderr,\"\\tAborting\\n\");"
    },
    {
        "line": 52,
        "fullcodeline": "TIFFClose(tif);"
    },
    {
        "line": 66,
        "fullcodeline": "cvtTifTo32s = tif_3uto32s;"
    },
    {
        "line": 69,
        "fullcodeline": "cvtTifTo32s = tif_5uto32s;"
    },
    {
        "line": 72,
        "fullcodeline": "cvtTifTo32s = tif_7uto32s;"
    },
    {
        "line": 75,
        "fullcodeline": "cvtTifTo32s = tif_9uto32s;"
    },
    {
        "line": 78,
        "fullcodeline": "cvtTifTo32s = tif_10uto32s;"
    },
    {
        "line": 81,
        "fullcodeline": "cvtTifTo32s = tif_11uto32s;"
    },
    {
        "line": 84,
        "fullcodeline": "cvtTifTo32s = tif_12uto32s;"
    },
    {
        "line": 87,
        "fullcodeline": "cvtTifTo32s = tif_13uto32s;"
    },
    {
        "line": 90,
        "fullcodeline": "cvtTifTo32s = tif_14uto32s;"
    },
    {
        "line": 93,
        "fullcodeline": "cvtTifTo32s = tif_15uto32s;"
    },
    {
        "line": 96,
        "fullcodeline": "cvtTifTo32s = (convert_XXx32s_C1R)tif_16uto32s;"
    },
    {
        "line": 110,
        "fullcodeline": "if(extrasamples >= 1)"
    },
    {
        "line": 135,
        "fullcodeline": "fprintf(stdout,\"WARNING:\\n\""
    },
    {
        "line": 146,
        "fullcodeline": "numcomps = 3 + has_alpha;"
    },
    {
        "line": 147,
        "fullcodeline": "color_space = OPJ_CLRSPC_SRGB;"
    },
    {
        "line": 158,
        "fullcodeline": "tiSpp = 1U; /* consider only one sample per plane */"
    },
    {
        "line": 163,
        "fullcodeline": "cmptparm[j].prec = tiBps;"
    },
    {
        "line": 164,
        "fullcodeline": "cmptparm[j].bpp = tiBps;"
    },
    {
        "line": 165,
        "fullcodeline": "cmptparm[j].dx = (OPJ_UINT32)subsampling_dx;"
    },
    {
        "line": 166,
        "fullcodeline": "cmptparm[j].dy = (OPJ_UINT32)subsampling_dy;"
    },
    {
        "line": 167,
        "fullcodeline": "cmptparm[j].w = (OPJ_UINT32)w;"
    },
    {
        "line": 168,
        "fullcodeline": "cmptparm[j].h = (OPJ_UINT32)h;"
    },
    {
        "line": 174,
        "fullcodeline": "TIFFClose(tif);"
    },
    {
        "line": 181,
        "fullcodeline": "image->x0 + (OPJ_UINT32)(w - 1) * (OPJ_UINT32)subsampling_dx + 1;"
    },
    {
        "line": 183,
        "fullcodeline": "image->y0 + (OPJ_UINT32)(h - 1) * (OPJ_UINT32)subsampling_dy + 1;"
    },
    {
        "line": 195,
        "fullcodeline": "TIFFClose(tif);"
    },
    {
        "line": 196,
        "fullcodeline": "opj_image_destroy(image);"
    },
    {
        "line": 202,
        "fullcodeline": "_TIFFfree(buf);"
    },
    {
        "line": 203,
        "fullcodeline": "TIFFClose(tif);"
    },
    {
        "line": 204,
        "fullcodeline": "opj_image_destroy(image);"
    },
    {
        "line": 213,
        "fullcodeline": "h= (int)tiHeight;"
    },
    {
        "line": 235,
        "fullcodeline": "currentPlane++;"
    },
    {
        "line": 141,
        "fullcodeline": "is_cinema = 0U;"
    },
    {
        "line": 215,
        "fullcodeline": "for(; (h > 0) && (strip < TIFFNumberOfStrips(tif)); strip++)"
    },
    {
        "line": 243,
        "fullcodeline": "for (j=0; j < numcomps; ++j) {"
    },
    {
        "line": 149,
        "fullcodeline": "else if (tiPhoto == PHOTOMETRIC_MINISBLACK) /* GRAY(A) */"
    },
    {
        "line": 220,
        "fullcodeline": "ssize = (OPJ_SIZE_T)TIFFReadEncodedStrip(tif, strip, buf, strip_size);"
    },
    {
        "line": 221,
        "fullcodeline": "dat8 = (const OPJ_UINT8*)buf;"
    },
    {
        "line": 244,
        "fullcodeline": "scale_component(&(image->comps[j]), 12);"
    },
    {
        "line": 123,
        "fullcodeline": "has_alpha = 1;"
    },
    {
        "line": 128,
        "fullcodeline": "if(tiSpp == 4 || tiSpp == 2) has_alpha = 1;"
    },
    {
        "line": 151,
        "fullcodeline": "numcomps = 1 + has_alpha;"
    },
    {
        "line": 152,
        "fullcodeline": "color_space = OPJ_CLRSPC_GRAY;"
    },
    {
        "line": 223,
        "fullcodeline": "while (ssize >= rowStride) {"
    },
    {
        "line": 117,
        "fullcodeline": "if(tiSpp > 3)"
    },
    {
        "line": 224,
        "fullcodeline": "cvtTifTo32s(dat8, buffer32s, (OPJ_SIZE_T)w * tiSpp);"
    },
    {
        "line": 225,
        "fullcodeline": "cvtCxToPx(buffer32s, planes, (OPJ_SIZE_T)w);"
    },
    {
        "line": 226,
        "fullcodeline": "planes[0] += w;"
    },
    {
        "line": 227,
        "fullcodeline": "planes[1] += w;"
    },
    {
        "line": 228,
        "fullcodeline": "planes[2] += w;"
    },
    {
        "line": 229,
        "fullcodeline": "planes[3] += w;"
    },
    {
        "line": 230,
        "fullcodeline": "dat8  += rowStride;"
    },
    {
        "line": 231,
        "fullcodeline": "ssize -= rowStride;"
    },
    {
        "line": 232,
        "fullcodeline": "h--;"
    },
    {
        "line": 118,
        "fullcodeline": "has_alpha = 1;"
    }
]