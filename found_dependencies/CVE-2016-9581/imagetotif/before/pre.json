[
    {
        "line": 11,
        "fullcodeline": "OPJ_INT32* buffer32s = NULL;"
    },
    {
        "line": 12,
        "fullcodeline": "OPJ_INT32 const* planes[4];"
    },
    {
        "line": 13,
        "fullcodeline": "convert_32s_PXCX cvtPxToCx = NULL;"
    },
    {
        "line": 14,
        "fullcodeline": "convert_32sXXx_C1R cvt32sToTif = NULL;"
    },
    {
        "line": 16,
        "fullcodeline": "bps = (int)image->comps[0].prec;"
    },
    {
        "line": 17,
        "fullcodeline": "planes[0] = image->comps[0].data;"
    },
    {
        "line": 19,
        "fullcodeline": "numcomps = image->numcomps;"
    },
    {
        "line": 68,
        "fullcodeline": "tif = TIFFOpen(outfile, \"wb\");"
    },
    {
        "line": 124,
        "fullcodeline": "adjust = sgnd ? 1 << (image->comps[0].prec - 1) : 0;"
    },
    {
        "line": 125,
        "fullcodeline": "width   = (int)image->comps[0].w;"
    },
    {
        "line": 126,
        "fullcodeline": "height  = (int)image->comps[0].h;"
    },
    {
        "line": 128,
        "fullcodeline": "TIFFSetField(tif, TIFFTAG_IMAGEWIDTH, width);"
    },
    {
        "line": 129,
        "fullcodeline": "TIFFSetField(tif, TIFFTAG_IMAGELENGTH, height);"
    },
    {
        "line": 130,
        "fullcodeline": "TIFFSetField(tif, TIFFTAG_SAMPLESPERPIXEL, numcomps);"
    },
    {
        "line": 131,
        "fullcodeline": "TIFFSetField(tif, TIFFTAG_BITSPERSAMPLE, bps);"
    },
    {
        "line": 132,
        "fullcodeline": "TIFFSetField(tif, TIFFTAG_ORIENTATION, ORIENTATION_TOPLEFT);"
    },
    {
        "line": 133,
        "fullcodeline": "TIFFSetField(tif, TIFFTAG_PLANARCONFIG, PLANARCONFIG_CONTIG);"
    },
    {
        "line": 134,
        "fullcodeline": "TIFFSetField(tif, TIFFTAG_PHOTOMETRIC, tiPhoto);"
    },
    {
        "line": 135,
        "fullcodeline": "TIFFSetField(tif, TIFFTAG_ROWSPERSTRIP, 1);"
    },
    {
        "line": 137,
        "fullcodeline": "strip_size = TIFFStripSize(tif);"
    },
    {
        "line": 138,
        "fullcodeline": "rowStride = ((OPJ_SIZE_T)width * numcomps * (OPJ_SIZE_T)bps + 7U) / 8U;"
    },
    {
        "line": 144,
        "fullcodeline": "buf = _TIFFmalloc(strip_size);"
    },
    {
        "line": 149,
        "fullcodeline": "buffer32s = (OPJ_INT32 *)malloc((OPJ_SIZE_T)width * numcomps * sizeof(OPJ_INT32));"
    },
    {
        "line": 21,
        "fullcodeline": "if (image->color_space == OPJ_CLRSPC_CMYK) {"
    },
    {
        "line": 40,
        "fullcodeline": "for (i = 1U; i < numcomps; ++i) {"
    },
    {
        "line": 55,
        "fullcodeline": "if (i != numcomps) {"
    },
    {
        "line": 61,
        "fullcodeline": "if(bps > 16) bps = 0;"
    },
    {
        "line": 62,
        "fullcodeline": "if(bps == 0)"
    },
    {
        "line": 69,
        "fullcodeline": "if (!tif)"
    },
    {
        "line": 74,
        "fullcodeline": "for (i = 0U; i < numcomps; ++i) {"
    },
    {
        "line": 145,
        "fullcodeline": "if (buf == NULL) {"
    },
    {
        "line": 150,
        "fullcodeline": "if (buffer32s == NULL) {"
    },
    {
        "line": 156,
        "fullcodeline": "for (i = 0; i < image->comps[0].h; ++i) {"
    },
    {
        "line": 27,
        "fullcodeline": "tiPhoto = PHOTOMETRIC_SEPARATED;"
    },
    {
        "line": 53,
        "fullcodeline": "planes[i] = image->comps[i].data;"
    },
    {
        "line": 56,
        "fullcodeline": "fprintf(stderr,\"imagetotif: All components shall have the same subsampling, same bit depth.\\n\");"
    },
    {
        "line": 64,
        "fullcodeline": "fprintf(stderr,\"imagetotif: Bits=%d, Only 1 to 16 bits implemented\\n\",bps);"
    },
    {
        "line": 75,
        "fullcodeline": "clip_component(&(image->comps[i]), image->comps[0].prec);"
    },
    {
        "line": 87,
        "fullcodeline": "cvt32sToTif = tif_32sto3u;"
    },
    {
        "line": 90,
        "fullcodeline": "cvt32sToTif = tif_32sto5u;"
    },
    {
        "line": 93,
        "fullcodeline": "cvt32sToTif = tif_32sto7u;"
    },
    {
        "line": 96,
        "fullcodeline": "cvt32sToTif = tif_32sto9u;"
    },
    {
        "line": 99,
        "fullcodeline": "cvt32sToTif = tif_32sto10u;"
    },
    {
        "line": 102,
        "fullcodeline": "cvt32sToTif = tif_32sto11u;"
    },
    {
        "line": 105,
        "fullcodeline": "cvt32sToTif = tif_32sto12u;"
    },
    {
        "line": 108,
        "fullcodeline": "cvt32sToTif = tif_32sto13u;"
    },
    {
        "line": 111,
        "fullcodeline": "cvt32sToTif = tif_32sto14u;"
    },
    {
        "line": 114,
        "fullcodeline": "cvt32sToTif = tif_32sto15u;"
    },
    {
        "line": 157,
        "fullcodeline": "cvtPxToCx(planes, buffer32s, (OPJ_SIZE_T)width, adjust);"
    },
    {
        "line": 158,
        "fullcodeline": "cvt32sToTif(buffer32s, (OPJ_BYTE *)buf, (OPJ_SIZE_T)width * numcomps);"
    },
    {
        "line": 160,
        "fullcodeline": "planes[0] += width;"
    },
    {
        "line": 161,
        "fullcodeline": "planes[1] += width;"
    },
    {
        "line": 162,
        "fullcodeline": "planes[2] += width;"
    },
    {
        "line": 163,
        "fullcodeline": "planes[3] += width;"
    },
    {
        "line": 22,
        "fullcodeline": "if (numcomps < 4U) {"
    },
    {
        "line": 28,
        "fullcodeline": "if (numcomps > 4U) {"
    },
    {
        "line": 47,
        "fullcodeline": "if (image->comps[0].prec != image->comps[i].prec) {"
    },
    {
        "line": 50,
        "fullcodeline": "if (image->comps[0].sgnd != image->comps[i].sgnd) {"
    },
    {
        "line": 117,
        "fullcodeline": "cvt32sToTif = (convert_32sXXx_C1R)tif_32sto16u;"
    },
    {
        "line": 159,
        "fullcodeline": "(void)TIFFWriteEncodedStrip(tif, i, (void*)buf, strip_size);"
    },
    {
        "line": 23,
        "fullcodeline": "fprintf(stderr,\"imagetotif: CMYK images shall be composed of at least 4 planes.\\n\");"
    },
    {
        "line": 24,
        "fullcodeline": "fprintf(stderr,\"\\tAborting\\n\");"
    },
    {
        "line": 29,
        "fullcodeline": "numcomps = 4U; /* Alpha not supported */"
    },
    {
        "line": 32,
        "fullcodeline": "else if (numcomps > 2U) {"
    },
    {
        "line": 33,
        "fullcodeline": "tiPhoto = PHOTOMETRIC_RGB;"
    },
    {
        "line": 34,
        "fullcodeline": "if (numcomps > 4U) {"
    },
    {
        "line": 38,
        "fullcodeline": "tiPhoto = PHOTOMETRIC_MINISBLACK;"
    },
    {
        "line": 35,
        "fullcodeline": "numcomps = 4U;"
    }
]