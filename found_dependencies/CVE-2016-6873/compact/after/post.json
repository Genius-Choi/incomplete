[
    {
        "line": 3,
        "fullcodeline": "if (var.isArray()) {"
    },
    {
        "line": 4,
        "fullcodeline": "auto adata = var.getArrayData();"
    },
    {
        "line": 5,
        "fullcodeline": "auto check = couldRecur(var, adata);"
    },
    {
        "line": 6,
        "fullcodeline": "if (check && !seen.insert(adata).second) {"
    },
    {
        "line": 10,
        "fullcodeline": "for (ArrayIter iter(adata); iter; ++iter) {"
    },
    {
        "line": 15,
        "fullcodeline": "String varname = var.toString();"
    },
    {
        "line": 7,
        "fullcodeline": "raise_warning(\"compact(): recursion detected\");"
    },
    {
        "line": 11,
        "fullcodeline": "compact(seen, v, ret, iter.secondRef());"
    },
    {
        "line": 13,
        "fullcodeline": "if (check) seen.erase(adata);"
    },
    {
        "line": 16,
        "fullcodeline": "if (!varname.empty() && v->lookup(varname.get()) != NULL) {"
    },
    {
        "line": 17,
        "fullcodeline": "ret.set(varname, *reinterpret_cast<Variant*>(v->lookup(varname.get())));"
    }
]