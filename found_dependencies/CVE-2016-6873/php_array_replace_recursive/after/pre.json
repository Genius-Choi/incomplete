[
    {
        "line": 3,
        "fullcodeline": "if (arr1.get() == arr2.get()) {"
    },
    {
        "line": 17,
        "fullcodeline": "for (ArrayIter iter(arr2); iter; ++iter) {"
    },
    {
        "line": 12,
        "fullcodeline": "if (check && !seen.insert((void*)arr1.get()).second) {"
    },
    {
        "line": 18,
        "fullcodeline": "Variant key = iter.first();"
    },
    {
        "line": 19,
        "fullcodeline": "const Variant& value = iter.secondRef();"
    },
    {
        "line": 20,
        "fullcodeline": "if (arr1.exists(key, true) && value.isArray()) {"
    },
    {
        "line": 21,
        "fullcodeline": "Variant &v = arr1.lvalAt(key, AccessFlags::Key);"
    },
    {
        "line": 37,
        "fullcodeline": "seen.erase((void*)arr1.get());"
    },
    {
        "line": 22,
        "fullcodeline": "if (v.isArray()) {"
    },
    {
        "line": 32,
        "fullcodeline": "arr1.setWithRef(key, value, true);"
    },
    {
        "line": 23,
        "fullcodeline": "Array subarr1 = v.toArray();"
    },
    {
        "line": 24,
        "fullcodeline": "const ArrNR& arr_value = value.toArrNR();"
    },
    {
        "line": 25,
        "fullcodeline": "php_array_replace_recursive(seen, couldRecur(v, subarr1.get()),"
    },
    {
        "line": 29,
        "fullcodeline": "arr1.set(key, value, true);"
    }
]