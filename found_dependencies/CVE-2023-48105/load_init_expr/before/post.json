[
    {
        "line": 5,
        "fullcodeline": "const uint8 *p = *p_buf, *p_end = buf_end;"
    },
    {
        "line": 9,
        "fullcodeline": "CHECK_BUF(p, p_end, 1);"
    },
    {
        "line": 10,
        "fullcodeline": "init_expr->init_expr_type = read_uint8(p);"
    },
    {
        "line": 11,
        "fullcodeline": "flag = init_expr->init_expr_type;"
    },
    {
        "line": 100,
        "fullcodeline": "CHECK_BUF(p, p_end, 1);"
    },
    {
        "line": 101,
        "fullcodeline": "end_byte = read_uint8(p);"
    },
    {
        "line": 104,
        "fullcodeline": "*p_buf = p;"
    },
    {
        "line": 108,
        "fullcodeline": "set_error_buf(error_buf, error_buf_size,"
    },
    {
        "line": 102,
        "fullcodeline": "if (end_byte != 0x0b)"
    },
    {
        "line": 18,
        "fullcodeline": "read_leb_int32(p, p_end, init_expr->u.i32);"
    },
    {
        "line": 24,
        "fullcodeline": "read_leb_int64(p, p_end, init_expr->u.i64);"
    },
    {
        "line": 30,
        "fullcodeline": "CHECK_BUF(p, p_end, 4);"
    },
    {
        "line": 39,
        "fullcodeline": "CHECK_BUF(p, p_end, 8);"
    },
    {
        "line": 89,
        "fullcodeline": "read_leb_uint32(p, p_end, init_expr->u.global_index);"
    },
    {
        "line": 16,
        "fullcodeline": "if (type != VALUE_TYPE_I32)"
    },
    {
        "line": 22,
        "fullcodeline": "if (type != VALUE_TYPE_I64)"
    },
    {
        "line": 28,
        "fullcodeline": "if (type != VALUE_TYPE_F32)"
    },
    {
        "line": 32,
        "fullcodeline": "for (i = 0; i < sizeof(float32); i++)"
    },
    {
        "line": 37,
        "fullcodeline": "if (type != VALUE_TYPE_F64)"
    },
    {
        "line": 41,
        "fullcodeline": "for (i = 0; i < sizeof(float64); i++)"
    },
    {
        "line": 93,
        "fullcodeline": "set_error_buf(error_buf, error_buf_size,"
    },
    {
        "line": 33,
        "fullcodeline": "*p_float++ = *p++;"
    },
    {
        "line": 42,
        "fullcodeline": "*p_float++ = *p++;"
    }
]