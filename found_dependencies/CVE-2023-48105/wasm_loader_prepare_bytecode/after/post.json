[
    {
        "line": 5,
        "fullcodeline": "uint8 *p = func->code, *p_end = func->code + func->code_size, *p_org;"
    },
    {
        "line": 12,
        "fullcodeline": "int32 i32_const = 0;"
    },
    {
        "line": 15,
        "fullcodeline": "bool return_value = false;"
    },
    {
        "line": 30,
        "fullcodeline": "global_count = module->import_global_count + module->global_count;"
    },
    {
        "line": 35,
        "fullcodeline": "func_block_type.is_value_type = false;"
    },
    {
        "line": 36,
        "fullcodeline": "func_block_type.u.type = func->func_type;"
    },
    {
        "line": 38,
        "fullcodeline": "local_count = func->local_count;"
    },
    {
        "line": 39,
        "fullcodeline": "local_types = func->local_types;"
    },
    {
        "line": 40,
        "fullcodeline": "local_offsets = func->local_offsets;"
    },
    {
        "line": 69,
        "fullcodeline": "PUSH_CSP(LABEL_TYPE_FUNCTION, func_block_type, p);"
    },
    {
        "line": 2932,
        "fullcodeline": "func->max_stack_cell_num = loader_ctx->max_stack_cell_num;"
    },
    {
        "line": 2934,
        "fullcodeline": "func->max_block_num = loader_ctx->max_csp_num;"
    },
    {
        "line": 2935,
        "fullcodeline": "return_value = true;"
    },
    {
        "line": 2938,
        "fullcodeline": "wasm_loader_ctx_destroy(loader_ctx);"
    },
    {
        "line": 2940,
        "fullcodeline": "(void)table_idx;"
    },
    {
        "line": 2941,
        "fullcodeline": "(void)table_seg_idx;"
    },
    {
        "line": 2942,
        "fullcodeline": "(void)data_seg_idx;"
    },
    {
        "line": 2943,
        "fullcodeline": "(void)i64_const;"
    },
    {
        "line": 2944,
        "fullcodeline": "(void)local_offset;"
    },
    {
        "line": 2945,
        "fullcodeline": "(void)p_org;"
    },
    {
        "line": 2946,
        "fullcodeline": "(void)mem_offset;"
    },
    {
        "line": 2947,
        "fullcodeline": "(void)align;"
    },
    {
        "line": 42,
        "fullcodeline": "if (!(loader_ctx = wasm_loader_ctx_init(func, error_buf, error_buf_size))) {"
    },
    {
        "line": 71,
        "fullcodeline": "while (p < p_end) {"
    },
    {
        "line": 2886,
        "fullcodeline": "if (loader_ctx->csp_num > 0) {"
    },
    {
        "line": 2887,
        "fullcodeline": "if (cur_func_idx < module->function_count - 1)"
    },
    {
        "line": 72,
        "fullcodeline": "opcode = *p++;"
    },
    {
        "line": 81,
        "fullcodeline": "RESET_STACK();"
    },
    {
        "line": 82,
        "fullcodeline": "SET_CUR_BLOCK_STACK_POLYMORPHIC_STATE(true);"
    },
    {
        "line": 95,
        "fullcodeline": "POP_I32();"
    },
    {
        "line": 1464,
        "fullcodeline": "CHECK_MEMORY();"
    },
    {
        "line": 1471,
        "fullcodeline": "PUSH_I32();"
    },
    {
        "line": 1473,
        "fullcodeline": "module->possible_memory_grow = true;"
    },
    {
        "line": 1480,
        "fullcodeline": "CHECK_MEMORY();"
    },
    {
        "line": 1487,
        "fullcodeline": "POP_AND_PUSH(VALUE_TYPE_I32, VALUE_TYPE_I32);"
    },
    {
        "line": 1489,
        "fullcodeline": "module->possible_memory_grow = true;"
    },
    {
        "line": 1500,
        "fullcodeline": "read_leb_int32(p, p_end, i32_const);"
    },
    {
        "line": 1512,
        "fullcodeline": "(void)i32_const;"
    },
    {
        "line": 1514,
        "fullcodeline": "PUSH_I32();"
    },
    {
        "line": 1518,
        "fullcodeline": "read_leb_int64(p, p_end, i64_const);"
    },
    {
        "line": 1530,
        "fullcodeline": "PUSH_I64();"
    },
    {
        "line": 1534,
        "fullcodeline": "p += sizeof(float32);"
    },
    {
        "line": 1548,
        "fullcodeline": "PUSH_F32();"
    },
    {
        "line": 1552,
        "fullcodeline": "p += sizeof(float64);"
    },
    {
        "line": 1567,
        "fullcodeline": "PUSH_F64();"
    },
    {
        "line": 1571,
        "fullcodeline": "POP_AND_PUSH(VALUE_TYPE_I32, VALUE_TYPE_I32);"
    },
    {
        "line": 1584,
        "fullcodeline": "POP2_AND_PUSH(VALUE_TYPE_I32, VALUE_TYPE_I32);"
    },
    {
        "line": 1588,
        "fullcodeline": "POP_AND_PUSH(VALUE_TYPE_I64, VALUE_TYPE_I32);"
    },
    {
        "line": 1601,
        "fullcodeline": "POP2_AND_PUSH(VALUE_TYPE_I64, VALUE_TYPE_I32);"
    },
    {
        "line": 1610,
        "fullcodeline": "POP2_AND_PUSH(VALUE_TYPE_F32, VALUE_TYPE_I32);"
    },
    {
        "line": 1619,
        "fullcodeline": "POP2_AND_PUSH(VALUE_TYPE_F64, VALUE_TYPE_I32);"
    },
    {
        "line": 1625,
        "fullcodeline": "POP_AND_PUSH(VALUE_TYPE_I32, VALUE_TYPE_I32);"
    },
    {
        "line": 1643,
        "fullcodeline": "POP2_AND_PUSH(VALUE_TYPE_I32, VALUE_TYPE_I32);"
    },
    {
        "line": 1649,
        "fullcodeline": "POP_AND_PUSH(VALUE_TYPE_I64, VALUE_TYPE_I64);"
    },
    {
        "line": 1667,
        "fullcodeline": "POP2_AND_PUSH(VALUE_TYPE_I64, VALUE_TYPE_I64);"
    },
    {
        "line": 1677,
        "fullcodeline": "POP_AND_PUSH(VALUE_TYPE_F32, VALUE_TYPE_F32);"
    },
    {
        "line": 1687,
        "fullcodeline": "POP2_AND_PUSH(VALUE_TYPE_F32, VALUE_TYPE_F32);"
    },
    {
        "line": 1697,
        "fullcodeline": "POP_AND_PUSH(VALUE_TYPE_F64, VALUE_TYPE_F64);"
    },
    {
        "line": 1707,
        "fullcodeline": "POP2_AND_PUSH(VALUE_TYPE_F64, VALUE_TYPE_F64);"
    },
    {
        "line": 1711,
        "fullcodeline": "POP_AND_PUSH(VALUE_TYPE_I64, VALUE_TYPE_I32);"
    },
    {
        "line": 1716,
        "fullcodeline": "POP_AND_PUSH(VALUE_TYPE_F32, VALUE_TYPE_I32);"
    },
    {
        "line": 1721,
        "fullcodeline": "POP_AND_PUSH(VALUE_TYPE_F64, VALUE_TYPE_I32);"
    },
    {
        "line": 1726,
        "fullcodeline": "POP_AND_PUSH(VALUE_TYPE_I32, VALUE_TYPE_I64);"
    },
    {
        "line": 1731,
        "fullcodeline": "POP_AND_PUSH(VALUE_TYPE_F32, VALUE_TYPE_I64);"
    },
    {
        "line": 1736,
        "fullcodeline": "POP_AND_PUSH(VALUE_TYPE_F64, VALUE_TYPE_I64);"
    },
    {
        "line": 1741,
        "fullcodeline": "POP_AND_PUSH(VALUE_TYPE_I32, VALUE_TYPE_F32);"
    },
    {
        "line": 1746,
        "fullcodeline": "POP_AND_PUSH(VALUE_TYPE_I64, VALUE_TYPE_F32);"
    },
    {
        "line": 1750,
        "fullcodeline": "POP_AND_PUSH(VALUE_TYPE_F64, VALUE_TYPE_F32);"
    },
    {
        "line": 1755,
        "fullcodeline": "POP_AND_PUSH(VALUE_TYPE_I32, VALUE_TYPE_F64);"
    },
    {
        "line": 1760,
        "fullcodeline": "POP_AND_PUSH(VALUE_TYPE_I64, VALUE_TYPE_F64);"
    },
    {
        "line": 1764,
        "fullcodeline": "POP_AND_PUSH(VALUE_TYPE_F32, VALUE_TYPE_F64);"
    },
    {
        "line": 1768,
        "fullcodeline": "POP_AND_PUSH(VALUE_TYPE_F32, VALUE_TYPE_I32);"
    },
    {
        "line": 1772,
        "fullcodeline": "POP_AND_PUSH(VALUE_TYPE_F64, VALUE_TYPE_I64);"
    },
    {
        "line": 1776,
        "fullcodeline": "POP_AND_PUSH(VALUE_TYPE_I32, VALUE_TYPE_F32);"
    },
    {
        "line": 1780,
        "fullcodeline": "POP_AND_PUSH(VALUE_TYPE_I64, VALUE_TYPE_F64);"
    },
    {
        "line": 1785,
        "fullcodeline": "POP_AND_PUSH(VALUE_TYPE_I32, VALUE_TYPE_I32);"
    },
    {
        "line": 1791,
        "fullcodeline": "POP_AND_PUSH(VALUE_TYPE_I64, VALUE_TYPE_I64);"
    },
    {
        "line": 2876,
        "fullcodeline": "set_error_buf_v(error_buf, error_buf_size, \"%s %02x\","
    },
    {
        "line": 2889,
        "fullcodeline": "set_error_buf(error_buf, error_buf_size, \"END opcode expected\");"
    },
    {
        "line": 107,
        "fullcodeline": "p_org = p - 1;"
    },
    {
        "line": 108,
        "fullcodeline": "CHECK_BUF(p, p_end, 1);"
    },
    {
        "line": 109,
        "fullcodeline": "value_type = read_uint8(p);"
    },
    {
        "line": 152,
        "fullcodeline": "PUSH_CSP(LABEL_TYPE_BLOCK + (opcode - WASM_OP_BLOCK),"
    },
    {
        "line": 251,
        "fullcodeline": "(loader_ctx->frame_csp - 1)->else_addr = p - 1;"
    },
    {
        "line": 261,
        "fullcodeline": "RESET_STACK();"
    },
    {
        "line": 262,
        "fullcodeline": "SET_CUR_BLOCK_STACK_POLYMORPHIC_STATE(false);"
    },
    {
        "line": 287,
        "fullcodeline": "BranchBlock *cur_block = loader_ctx->frame_csp - 1;"
    },
    {
        "line": 324,
        "fullcodeline": "POP_CSP();"
    },
    {
        "line": 367,
        "fullcodeline": "RESET_STACK();"
    },
    {
        "line": 368,
        "fullcodeline": "SET_CUR_BLOCK_STACK_POLYMORPHIC_STATE(true);"
    },
    {
        "line": 374,
        "fullcodeline": "POP_I32();"
    },
    {
        "line": 385,
        "fullcodeline": "uint8 *ret_types = NULL;"
    },
    {
        "line": 386,
        "fullcodeline": "uint32 ret_count = 0;"
    },
    {
        "line": 390,
        "fullcodeline": "BrTableCache *br_table_cache = NULL;"
    },
    {
        "line": 392,
        "fullcodeline": "p_org = p - 1;"
    },
    {
        "line": 395,
        "fullcodeline": "read_leb_uint32(p, p_end, count);"
    },
    {
        "line": 399,
        "fullcodeline": "POP_I32();"
    },
    {
        "line": 402,
        "fullcodeline": "p_depth_begin = p_depth = p;"
    },
    {
        "line": 488,
        "fullcodeline": "RESET_STACK();"
    },
    {
        "line": 489,
        "fullcodeline": "SET_CUR_BLOCK_STACK_POLYMORPHIC_STATE(true);"
    },
    {
        "line": 508,
        "fullcodeline": "RESET_STACK();"
    },
    {
        "line": 509,
        "fullcodeline": "SET_CUR_BLOCK_STACK_POLYMORPHIC_STATE(true);"
    },
    {
        "line": 522,
        "fullcodeline": "read_leb_uint32(p, p_end, func_idx);"
    },
    {
        "line": 612,
        "fullcodeline": "read_leb_uint32(p, p_end, type_idx);"
    },
    {
        "line": 616,
        "fullcodeline": "CHECK_BUF(p, p_end, 1);"
    },
    {
        "line": 617,
        "fullcodeline": "table_idx = read_uint8(p);"
    },
    {
        "line": 634,
        "fullcodeline": "POP_I32();"
    },
    {
        "line": 702,
        "fullcodeline": "BranchBlock *cur_block = loader_ctx->frame_csp - 1;"
    },
    {
        "line": 703,
        "fullcodeline": "int32 available_stack_cell ="
    },
    {
        "line": 770,
        "fullcodeline": "BranchBlock *cur_block = loader_ctx->frame_csp - 1;"
    },
    {
        "line": 776,
        "fullcodeline": "POP_I32();"
    },
    {
        "line": 778,
        "fullcodeline": "available_stack_cell = (int32)(loader_ctx->stack_cell_num"
    },
    {
        "line": 1082,
        "fullcodeline": "p_org = p - 1;"
    },
    {
        "line": 1083,
        "fullcodeline": "GET_LOCAL_INDEX_TYPE_AND_OFFSET();"
    },
    {
        "line": 1084,
        "fullcodeline": "PUSH_TYPE(local_type);"
    },
    {
        "line": 1114,
        "fullcodeline": "p_org = p - 1;"
    },
    {
        "line": 1115,
        "fullcodeline": "GET_LOCAL_INDEX_TYPE_AND_OFFSET();"
    },
    {
        "line": 1116,
        "fullcodeline": "POP_TYPE(local_type);"
    },
    {
        "line": 1178,
        "fullcodeline": "p_org = p - 1;"
    },
    {
        "line": 1179,
        "fullcodeline": "GET_LOCAL_INDEX_TYPE_AND_OFFSET();"
    },
    {
        "line": 1190,
        "fullcodeline": "POP_TYPE(local_type);"
    },
    {
        "line": 1191,
        "fullcodeline": "PUSH_TYPE(local_type);"
    },
    {
        "line": 1238,
        "fullcodeline": "p_org = p - 1;"
    },
    {
        "line": 1239,
        "fullcodeline": "read_leb_uint32(p, p_end, global_idx);"
    },
    {
        "line": 1253,
        "fullcodeline": "PUSH_TYPE(global_type);"
    },
    {
        "line": 1280,
        "fullcodeline": "bool is_mutable = false;"
    },
    {
        "line": 1282,
        "fullcodeline": "p_org = p - 1;"
    },
    {
        "line": 1283,
        "fullcodeline": "read_leb_uint32(p, p_end, global_idx);"
    },
    {
        "line": 1310,
        "fullcodeline": "POP_TYPE(global_type);"
    },
    {
        "line": 1398,
        "fullcodeline": "CHECK_MEMORY();"
    },
    {
        "line": 1399,
        "fullcodeline": "read_leb_uint32(p, p_end, align);      /* align */"
    },
    {
        "line": 1400,
        "fullcodeline": "read_leb_uint32(p, p_end, mem_offset); /* offset */"
    },
    {
        "line": 1466,
        "fullcodeline": "if (*p++ != 0x00) {"
    },
    {
        "line": 1482,
        "fullcodeline": "if (*p++ != 0x00) {"
    },
    {
        "line": 1798,
        "fullcodeline": "read_leb_uint32(p, p_end, opcode1);"
    },
    {
        "line": 2893,
        "fullcodeline": "set_error_buf(error_buf, error_buf_size,"
    },
    {
        "line": 110,
        "fullcodeline": "if (is_byte_a_type(value_type)) {"
    },
    {
        "line": 145,
        "fullcodeline": "if (BLOCK_HAS_PARAM(block_type)) {"
    },
    {
        "line": 156,
        "fullcodeline": "if (BLOCK_HAS_PARAM(block_type)) {"
    },
    {
        "line": 237,
        "fullcodeline": "if (loader_ctx->csp_num < 2"
    },
    {
        "line": 247,
        "fullcodeline": "if (!check_block_stack(loader_ctx, loader_ctx->frame_csp - 1,"
    },
    {
        "line": 265,
        "fullcodeline": "if (BLOCK_HAS_PARAM(block_type)) {"
    },
    {
        "line": 290,
        "fullcodeline": "if (!check_block_stack(loader_ctx, cur_block, error_buf,"
    },
    {
        "line": 296,
        "fullcodeline": "if (cur_block->label_type == LABEL_TYPE_IF"
    },
    {
        "line": 346,
        "fullcodeline": "if (loader_ctx->csp_num > 0) {"
    },
    {
        "line": 363,
        "fullcodeline": "if (!(frame_csp_tmp = check_branch_block("
    },
    {
        "line": 376,
        "fullcodeline": "if (!(frame_csp_tmp = check_branch_block("
    },
    {
        "line": 404,
        "fullcodeline": "for (i = 0; i <= count; i++) {"
    },
    {
        "line": 484,
        "fullcodeline": "while (p_depth < p)"
    },
    {
        "line": 485,
        "fullcodeline": "*p_depth++ = WASM_OP_NOP;"
    },
    {
        "line": 497,
        "fullcodeline": "for (idx = (int32)func->func_type->result_count - 1; idx >= 0;"
    },
    {
        "line": 498,
        "fullcodeline": "idx--) {"
    },
    {
        "line": 528,
        "fullcodeline": "if (!check_function_index(module, func_idx, error_buf,"
    },
    {
        "line": 533,
        "fullcodeline": "if (func_idx < module->import_function_count)"
    },
    {
        "line": 542,
        "fullcodeline": "if (func_type->param_count > 0) {"
    },
    {
        "line": 555,
        "fullcodeline": "for (i = 0; i < func_type->result_count; i++) {"
    },
    {
        "line": 619,
        "fullcodeline": "if (!check_table_index(module, table_idx, error_buf,"
    },
    {
        "line": 636,
        "fullcodeline": "if (type_idx >= module->type_count) {"
    },
    {
        "line": 643,
        "fullcodeline": "if (func_type->param_count > 0) {"
    },
    {
        "line": 656,
        "fullcodeline": "for (i = 0; i < func_type->result_count; i++) {"
    },
    {
        "line": 704,
        "fullcodeline": "(int32)(loader_ctx->stack_cell_num"
    },
    {
        "line": 707,
        "fullcodeline": "if (available_stack_cell <= 0"
    },
    {
        "line": 715,
        "fullcodeline": "if (available_stack_cell > 0) {"
    },
    {
        "line": 781,
        "fullcodeline": "if (available_stack_cell <= 0"
    },
    {
        "line": 790,
        "fullcodeline": "if (available_stack_cell > 0) {"
    },
    {
        "line": 1095,
        "fullcodeline": "if (local_offset < 0x80) {"
    },
    {
        "line": 1159,
        "fullcodeline": "if (local_offset < 0x80) {"
    },
    {
        "line": 1219,
        "fullcodeline": "if (local_offset < 0x80) {"
    },
    {
        "line": 1240,
        "fullcodeline": "if (global_idx >= global_count) {"
    },
    {
        "line": 1256,
        "fullcodeline": "if (global_type == VALUE_TYPE_I64"
    },
    {
        "line": 1284,
        "fullcodeline": "if (global_idx >= global_count) {"
    },
    {
        "line": 1296,
        "fullcodeline": "if (!is_mutable) {"
    },
    {
        "line": 1313,
        "fullcodeline": "if (global_type == VALUE_TYPE_I64"
    },
    {
        "line": 1401,
        "fullcodeline": "if (!check_memory_access_align(opcode, align, error_buf,"
    },
    {
        "line": 1467,
        "fullcodeline": "set_error_buf(error_buf, error_buf_size,"
    },
    {
        "line": 1483,
        "fullcodeline": "set_error_buf(error_buf, error_buf_size,"
    },
    {
        "line": 114,
        "fullcodeline": "block_type.is_value_type = true;"
    },
    {
        "line": 115,
        "fullcodeline": "block_type.u.value_type = value_type;"
    },
    {
        "line": 146,
        "fullcodeline": "WASMType *wasm_type = block_type.u.type;"
    },
    {
        "line": 235,
        "fullcodeline": "BlockType block_type = (loader_ctx->frame_csp - 1)->block_type;"
    },
    {
        "line": 238,
        "fullcodeline": "|| (loader_ctx->frame_csp - 1)->label_type"
    },
    {
        "line": 240,
        "fullcodeline": "set_error_buf("
    },
    {
        "line": 297,
        "fullcodeline": "&& !cur_block->else_addr) {"
    },
    {
        "line": 298,
        "fullcodeline": "uint32 block_param_count = 0, block_ret_count = 0;"
    },
    {
        "line": 299,
        "fullcodeline": "uint8 *block_param_types = NULL, *block_ret_types = NULL;"
    },
    {
        "line": 300,
        "fullcodeline": "BlockType *cur_block_type = &cur_block->block_type;"
    },
    {
        "line": 347,
        "fullcodeline": "loader_ctx->frame_csp->end_addr = p - 1;"
    },
    {
        "line": 439,
        "fullcodeline": "depth = (uint32)(loader_ctx->frame_csp - 1 - frame_csp_tmp);"
    },
    {
        "line": 483,
        "fullcodeline": "p_depth = p_depth_begin;"
    },
    {
        "line": 501,
        "fullcodeline": "POP_TYPE(ret_type);"
    },
    {
        "line": 556,
        "fullcodeline": "PUSH_TYPE(func_type->types[func_type->param_count + i]);"
    },
    {
        "line": 637,
        "fullcodeline": "set_error_buf(error_buf, error_buf_size, \"unknown type\");"
    },
    {
        "line": 657,
        "fullcodeline": "PUSH_TYPE(func_type->types[func_type->param_count + i]);"
    },
    {
        "line": 708,
        "fullcodeline": "&& !cur_block->is_stack_polymorphic) {"
    },
    {
        "line": 709,
        "fullcodeline": "set_error_buf(error_buf, error_buf_size,"
    },
    {
        "line": 782,
        "fullcodeline": "&& !cur_block->is_stack_polymorphic) {"
    },
    {
        "line": 783,
        "fullcodeline": "set_error_buf(error_buf, error_buf_size,"
    },
    {
        "line": 857,
        "fullcodeline": "POP2_AND_PUSH(ref_type, ref_type);"
    },
    {
        "line": 1096,
        "fullcodeline": "*p_org++ = EXT_OP_GET_LOCAL_FAST;"
    },
    {
        "line": 1160,
        "fullcodeline": "*p_org++ = EXT_OP_SET_LOCAL_FAST;"
    },
    {
        "line": 1220,
        "fullcodeline": "*p_org++ = EXT_OP_TEE_LOCAL_FAST;"
    },
    {
        "line": 1241,
        "fullcodeline": "set_error_buf(error_buf, error_buf_size, \"unknown global\");"
    },
    {
        "line": 1246,
        "fullcodeline": "global_idx < module->import_global_count"
    },
    {
        "line": 1257,
        "fullcodeline": "|| global_type == VALUE_TYPE_F64) {"
    },
    {
        "line": 1264,
        "fullcodeline": "*p_org = WASM_OP_GET_GLOBAL_64;"
    },
    {
        "line": 1285,
        "fullcodeline": "set_error_buf(error_buf, error_buf_size, \"unknown global\");"
    },
    {
        "line": 1290,
        "fullcodeline": "global_idx < module->import_global_count"
    },
    {
        "line": 1297,
        "fullcodeline": "set_error_buf(error_buf, error_buf_size,"
    },
    {
        "line": 1303,
        "fullcodeline": "global_idx < module->import_global_count"
    },
    {
        "line": 1314,
        "fullcodeline": "|| global_type == VALUE_TYPE_F64) {"
    },
    {
        "line": 1321,
        "fullcodeline": "*p_org = WASM_OP_SET_GLOBAL_64;"
    },
    {
        "line": 1418,
        "fullcodeline": "POP_AND_PUSH(VALUE_TYPE_I32, VALUE_TYPE_I32);"
    },
    {
        "line": 1427,
        "fullcodeline": "POP_AND_PUSH(VALUE_TYPE_I32, VALUE_TYPE_I64);"
    },
    {
        "line": 1430,
        "fullcodeline": "POP_AND_PUSH(VALUE_TYPE_I32, VALUE_TYPE_F32);"
    },
    {
        "line": 1433,
        "fullcodeline": "POP_AND_PUSH(VALUE_TYPE_I32, VALUE_TYPE_F64);"
    },
    {
        "line": 1439,
        "fullcodeline": "POP_I32();"
    },
    {
        "line": 1440,
        "fullcodeline": "POP_I32();"
    },
    {
        "line": 1446,
        "fullcodeline": "POP_I64();"
    },
    {
        "line": 1447,
        "fullcodeline": "POP_I32();"
    },
    {
        "line": 1450,
        "fullcodeline": "POP_F32();"
    },
    {
        "line": 1451,
        "fullcodeline": "POP_I32();"
    },
    {
        "line": 1454,
        "fullcodeline": "POP_F64();"
    },
    {
        "line": 1455,
        "fullcodeline": "POP_I32();"
    },
    {
        "line": 1805,
        "fullcodeline": "POP_AND_PUSH(VALUE_TYPE_F32, VALUE_TYPE_I32);"
    },
    {
        "line": 1809,
        "fullcodeline": "POP_AND_PUSH(VALUE_TYPE_F64, VALUE_TYPE_I32);"
    },
    {
        "line": 1813,
        "fullcodeline": "POP_AND_PUSH(VALUE_TYPE_F32, VALUE_TYPE_I64);"
    },
    {
        "line": 1817,
        "fullcodeline": "POP_AND_PUSH(VALUE_TYPE_F64, VALUE_TYPE_I64);"
    },
    {
        "line": 2056,
        "fullcodeline": "set_error_buf_v(error_buf, error_buf_size,"
    },
    {
        "line": 120,
        "fullcodeline": "p--;"
    },
    {
        "line": 121,
        "fullcodeline": "read_leb_uint32(p, p_end, type_index);"
    },
    {
        "line": 127,
        "fullcodeline": "block_type.is_value_type = false;"
    },
    {
        "line": 140,
        "fullcodeline": "*p_org = EXT_OP_BLOCK + (opcode - WASM_OP_BLOCK);"
    },
    {
        "line": 147,
        "fullcodeline": "for (i = 0; i < block_type.u.type->param_count; i++)"
    },
    {
        "line": 157,
        "fullcodeline": "for (i = 0; i < block_type.u.type->param_count; i++)"
    },
    {
        "line": 158,
        "fullcodeline": "PUSH_TYPE(block_type.u.type->types[i]);"
    },
    {
        "line": 266,
        "fullcodeline": "for (i = 0; i < block_type.u.type->param_count; i++)"
    },
    {
        "line": 267,
        "fullcodeline": "PUSH_TYPE(block_type.u.type->types[i]);"
    },
    {
        "line": 314,
        "fullcodeline": "if (block_param_count != block_ret_count"
    },
    {
        "line": 405,
        "fullcodeline": "if (!(frame_csp_tmp ="
    },
    {
        "line": 410,
        "fullcodeline": "if (i == 0) {"
    },
    {
        "line": 543,
        "fullcodeline": "for (idx = (int32)(func_type->param_count - 1); idx >= 0;"
    },
    {
        "line": 544,
        "fullcodeline": "idx--) {"
    },
    {
        "line": 644,
        "fullcodeline": "for (idx = (int32)(func_type->param_count - 1); idx >= 0;"
    },
    {
        "line": 645,
        "fullcodeline": "idx--) {"
    },
    {
        "line": 864,
        "fullcodeline": "PUSH_TYPE(VALUE_TYPE_ANY);"
    },
    {
        "line": 1097,
        "fullcodeline": "if (is_32bit_type(local_type)) {"
    },
    {
        "line": 1103,
        "fullcodeline": "while (p_org < p) {"
    },
    {
        "line": 1161,
        "fullcodeline": "if (is_32bit_type(local_type)) {"
    },
    {
        "line": 1167,
        "fullcodeline": "while (p_org < p) {"
    },
    {
        "line": 1221,
        "fullcodeline": "if (is_32bit_type(local_type)) {"
    },
    {
        "line": 1227,
        "fullcodeline": "while (p_org < p) {"
    },
    {
        "line": 122,
        "fullcodeline": "if (type_index >= module->type_count) {"
    },
    {
        "line": 315,
        "fullcodeline": "|| (block_param_count"
    },
    {
        "line": 318,
        "fullcodeline": "set_error_buf(error_buf, error_buf_size,"
    },
    {
        "line": 351,
        "fullcodeline": "if (p < p_end) {"
    },
    {
        "line": 441,
        "fullcodeline": "br_table_cache->br_depths[i] = depth;"
    },
    {
        "line": 499,
        "fullcodeline": "ret_type = *(func->func_type->types"
    },
    {
        "line": 545,
        "fullcodeline": "POP_TYPE(func_type->types[idx]);"
    },
    {
        "line": 646,
        "fullcodeline": "POP_TYPE(func_type->types[idx]);"
    },
    {
        "line": 717,
        "fullcodeline": "loader_ctx->frame_ref--;"
    },
    {
        "line": 718,
        "fullcodeline": "loader_ctx->stack_cell_num--;"
    },
    {
        "line": 791,
        "fullcodeline": "switch (*(loader_ctx->frame_ref - 1)) {"
    },
    {
        "line": 798,
        "fullcodeline": "*(p - 1) = WASM_OP_SELECT_64;"
    },
    {
        "line": 848,
        "fullcodeline": "ref_type = *(loader_ctx->frame_ref - 1);"
    },
    {
        "line": 1098,
        "fullcodeline": "*p_org++ = (uint8)local_offset;"
    },
    {
        "line": 1104,
        "fullcodeline": "*p_org++ = WASM_OP_NOP;"
    },
    {
        "line": 1162,
        "fullcodeline": "*p_org++ = (uint8)local_offset;"
    },
    {
        "line": 1168,
        "fullcodeline": "*p_org++ = WASM_OP_NOP;"
    },
    {
        "line": 1222,
        "fullcodeline": "*p_org++ = (uint8)local_offset;"
    },
    {
        "line": 1228,
        "fullcodeline": "*p_org++ = WASM_OP_NOP;"
    },
    {
        "line": 1249,
        "fullcodeline": "->globals[global_idx"
    },
    {
        "line": 1293,
        "fullcodeline": "->globals[global_idx"
    },
    {
        "line": 1306,
        "fullcodeline": "->globals[global_idx"
    },
    {
        "line": 1323,
        "fullcodeline": "else if (module->aux_stack_size > 0"
    },
    {
        "line": 123,
        "fullcodeline": "set_error_buf(error_buf, error_buf_size,"
    },
    {
        "line": 149,
        "fullcodeline": "wasm_type->types[wasm_type->param_count - i - 1]);"
    },
    {
        "line": 302,
        "fullcodeline": "if (cur_block_type->u.value_type != VALUE_TYPE_VOID) {"
    },
    {
        "line": 311,
        "fullcodeline": "block_ret_types ="
    },
    {
        "line": 316,
        "fullcodeline": "&& memcmp(block_param_types, block_ret_types,"
    },
    {
        "line": 352,
        "fullcodeline": "set_error_buf(error_buf, error_buf_size,"
    },
    {
        "line": 406,
        "fullcodeline": "check_branch_block(loader_ctx, &p, p_end,"
    },
    {
        "line": 411,
        "fullcodeline": "if (frame_csp_tmp->label_type != LABEL_TYPE_LOOP)"
    },
    {
        "line": 416,
        "fullcodeline": "uint8 *tmp_ret_types = NULL;"
    },
    {
        "line": 417,
        "fullcodeline": "uint32 tmp_ret_count = 0;"
    },
    {
        "line": 716,
        "fullcodeline": "if (is_32bit_type(*(loader_ctx->frame_ref - 1))) {"
    },
    {
        "line": 842,
        "fullcodeline": "set_error_buf(error_buf, error_buf_size,"
    },
    {
        "line": 1101,
        "fullcodeline": "*p_org++ = (uint8)(local_offset | 0x80);"
    },
    {
        "line": 1165,
        "fullcodeline": "*p_org++ = (uint8)(local_offset | 0x80);"
    },
    {
        "line": 1225,
        "fullcodeline": "*p_org++ = (uint8)(local_offset | 0x80);"
    },
    {
        "line": 1324,
        "fullcodeline": "&& global_idx == module->aux_stack_top_global_index) {"
    },
    {
        "line": 1331,
        "fullcodeline": "*p_org = WASM_OP_SET_GLOBAL_AUX_STACK;"
    },
    {
        "line": 303,
        "fullcodeline": "block_ret_count = 1;"
    },
    {
        "line": 304,
        "fullcodeline": "block_ret_types = &cur_block_type->u.value_type;"
    },
    {
        "line": 312,
        "fullcodeline": "cur_block_type->u.type->types + block_param_count;"
    },
    {
        "line": 412,
        "fullcodeline": "ret_count = block_type_get_result_types("
    },
    {
        "line": 421,
        "fullcodeline": "if (frame_csp_tmp->label_type != LABEL_TYPE_LOOP)"
    },
    {
        "line": 425,
        "fullcodeline": "if (ret_count != tmp_ret_count"
    },
    {
        "line": 444,
        "fullcodeline": "if (depth > 255) {"
    },
    {
        "line": 538,
        "fullcodeline": "->functions[func_idx"
    },
    {
        "line": 422,
        "fullcodeline": "tmp_ret_count = block_type_get_result_types("
    },
    {
        "line": 426,
        "fullcodeline": "|| (ret_count"
    },
    {
        "line": 430,
        "fullcodeline": "set_error_buf("
    },
    {
        "line": 460,
        "fullcodeline": "*p_org = EXT_OP_BR_TABLE_CACHE;"
    },
    {
        "line": 461,
        "fullcodeline": "br_table_cache->br_table_op_addr = p_org;"
    },
    {
        "line": 462,
        "fullcodeline": "br_table_cache->br_count = count;"
    },
    {
        "line": 467,
        "fullcodeline": "br_table_cache->br_depths[i] = depth;"
    },
    {
        "line": 468,
        "fullcodeline": "bh_list_insert(module->br_table_cache_list,"
    },
    {
        "line": 730,
        "fullcodeline": "loader_ctx->frame_ref -= 2;"
    },
    {
        "line": 731,
        "fullcodeline": "loader_ctx->stack_cell_num -= 2;"
    },
    {
        "line": 733,
        "fullcodeline": "*(p - 1) = WASM_OP_DROP_64;"
    },
    {
        "line": 427,
        "fullcodeline": "&& 0"
    },
    {
        "line": 453,
        "fullcodeline": "if (!(br_table_cache = loader_malloc("
    },
    {
        "line": 464,
        "fullcodeline": "for (j = 0; j < i; j++) {"
    },
    {
        "line": 474,
        "fullcodeline": "*p_depth++ = (uint8)depth;"
    },
    {
        "line": 729,
        "fullcodeline": "else if (is_64bit_type(*(loader_ctx->frame_ref - 1))) {"
    },
    {
        "line": 754,
        "fullcodeline": "set_error_buf(error_buf, error_buf_size,"
    },
    {
        "line": 428,
        "fullcodeline": "!= memcmp(ret_types, tmp_ret_types,"
    },
    {
        "line": 465,
        "fullcodeline": "br_table_cache->br_depths[j] = p_depth_begin[j];"
    },
    {
        "line": 454,
        "fullcodeline": "offsetof(BrTableCache, br_depths)"
    },
    {
        "line": 455,
        "fullcodeline": "+ sizeof(uint32)"
    },
    {
        "line": 456,
        "fullcodeline": "* (uint64)(count + 1),"
    }
]