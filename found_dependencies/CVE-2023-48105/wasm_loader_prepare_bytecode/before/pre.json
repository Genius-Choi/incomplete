[
    {
        "line": 5,
        "fullcodeline": "uint8 *p = func->code, *p_end = func->code + func->code_size, *p_org;"
    },
    {
        "line": 12,
        "fullcodeline": "int32 i32_const = 0;"
    },
    {
        "line": 15,
        "fullcodeline": "bool return_value = false;"
    },
    {
        "line": 30,
        "fullcodeline": "global_count = module->import_global_count + module->global_count;"
    },
    {
        "line": 32,
        "fullcodeline": "param_count = func->func_type->param_count;"
    },
    {
        "line": 33,
        "fullcodeline": "param_types = func->func_type->types;"
    },
    {
        "line": 35,
        "fullcodeline": "func_block_type.is_value_type = false;"
    },
    {
        "line": 36,
        "fullcodeline": "func_block_type.u.type = func->func_type;"
    },
    {
        "line": 38,
        "fullcodeline": "local_count = func->local_count;"
    },
    {
        "line": 39,
        "fullcodeline": "local_types = func->local_types;"
    },
    {
        "line": 40,
        "fullcodeline": "local_offsets = func->local_offsets;"
    },
    {
        "line": 69,
        "fullcodeline": "PUSH_CSP(LABEL_TYPE_FUNCTION, func_block_type, p);"
    },
    {
        "line": 2929,
        "fullcodeline": "func->max_stack_cell_num = loader_ctx->max_stack_cell_num;"
    },
    {
        "line": 2931,
        "fullcodeline": "func->max_block_num = loader_ctx->max_csp_num;"
    },
    {
        "line": 2932,
        "fullcodeline": "return_value = true;"
    },
    {
        "line": 2935,
        "fullcodeline": "wasm_loader_ctx_destroy(loader_ctx);"
    },
    {
        "line": 2937,
        "fullcodeline": "(void)table_idx;"
    },
    {
        "line": 2938,
        "fullcodeline": "(void)table_seg_idx;"
    },
    {
        "line": 2939,
        "fullcodeline": "(void)data_seg_idx;"
    },
    {
        "line": 2940,
        "fullcodeline": "(void)i64_const;"
    },
    {
        "line": 2941,
        "fullcodeline": "(void)local_offset;"
    },
    {
        "line": 2942,
        "fullcodeline": "(void)p_org;"
    },
    {
        "line": 2943,
        "fullcodeline": "(void)mem_offset;"
    },
    {
        "line": 2944,
        "fullcodeline": "(void)align;"
    },
    {
        "line": 42,
        "fullcodeline": "if (!(loader_ctx = wasm_loader_ctx_init(func, error_buf, error_buf_size))) {"
    },
    {
        "line": 71,
        "fullcodeline": "while (p < p_end) {"
    },
    {
        "line": 2883,
        "fullcodeline": "if (loader_ctx->csp_num > 0) {"
    },
    {
        "line": 72,
        "fullcodeline": "opcode = *p++;"
    },
    {
        "line": 2884,
        "fullcodeline": "if (cur_func_idx < module->function_count - 1)"
    },
    {
        "line": 81,
        "fullcodeline": "RESET_STACK();"
    },
    {
        "line": 82,
        "fullcodeline": "SET_CUR_BLOCK_STACK_POLYMORPHIC_STATE(true);"
    },
    {
        "line": 95,
        "fullcodeline": "POP_I32();"
    },
    {
        "line": 1463,
        "fullcodeline": "CHECK_MEMORY();"
    },
    {
        "line": 1470,
        "fullcodeline": "PUSH_I32();"
    },
    {
        "line": 1472,
        "fullcodeline": "module->possible_memory_grow = true;"
    },
    {
        "line": 1479,
        "fullcodeline": "CHECK_MEMORY();"
    },
    {
        "line": 1486,
        "fullcodeline": "POP_AND_PUSH(VALUE_TYPE_I32, VALUE_TYPE_I32);"
    },
    {
        "line": 1488,
        "fullcodeline": "module->possible_memory_grow = true;"
    },
    {
        "line": 1499,
        "fullcodeline": "read_leb_int32(p, p_end, i32_const);"
    },
    {
        "line": 1511,
        "fullcodeline": "(void)i32_const;"
    },
    {
        "line": 1513,
        "fullcodeline": "PUSH_I32();"
    },
    {
        "line": 1517,
        "fullcodeline": "read_leb_int64(p, p_end, i64_const);"
    },
    {
        "line": 1529,
        "fullcodeline": "PUSH_I64();"
    },
    {
        "line": 1533,
        "fullcodeline": "p += sizeof(float32);"
    },
    {
        "line": 1547,
        "fullcodeline": "PUSH_F32();"
    },
    {
        "line": 1551,
        "fullcodeline": "p += sizeof(float64);"
    },
    {
        "line": 1566,
        "fullcodeline": "PUSH_F64();"
    },
    {
        "line": 1570,
        "fullcodeline": "POP_AND_PUSH(VALUE_TYPE_I32, VALUE_TYPE_I32);"
    },
    {
        "line": 1583,
        "fullcodeline": "POP2_AND_PUSH(VALUE_TYPE_I32, VALUE_TYPE_I32);"
    },
    {
        "line": 1587,
        "fullcodeline": "POP_AND_PUSH(VALUE_TYPE_I64, VALUE_TYPE_I32);"
    },
    {
        "line": 1600,
        "fullcodeline": "POP2_AND_PUSH(VALUE_TYPE_I64, VALUE_TYPE_I32);"
    },
    {
        "line": 1609,
        "fullcodeline": "POP2_AND_PUSH(VALUE_TYPE_F32, VALUE_TYPE_I32);"
    },
    {
        "line": 1618,
        "fullcodeline": "POP2_AND_PUSH(VALUE_TYPE_F64, VALUE_TYPE_I32);"
    },
    {
        "line": 1624,
        "fullcodeline": "POP_AND_PUSH(VALUE_TYPE_I32, VALUE_TYPE_I32);"
    },
    {
        "line": 1642,
        "fullcodeline": "POP2_AND_PUSH(VALUE_TYPE_I32, VALUE_TYPE_I32);"
    },
    {
        "line": 1648,
        "fullcodeline": "POP_AND_PUSH(VALUE_TYPE_I64, VALUE_TYPE_I64);"
    },
    {
        "line": 1666,
        "fullcodeline": "POP2_AND_PUSH(VALUE_TYPE_I64, VALUE_TYPE_I64);"
    },
    {
        "line": 1676,
        "fullcodeline": "POP_AND_PUSH(VALUE_TYPE_F32, VALUE_TYPE_F32);"
    },
    {
        "line": 1686,
        "fullcodeline": "POP2_AND_PUSH(VALUE_TYPE_F32, VALUE_TYPE_F32);"
    },
    {
        "line": 1696,
        "fullcodeline": "POP_AND_PUSH(VALUE_TYPE_F64, VALUE_TYPE_F64);"
    },
    {
        "line": 1706,
        "fullcodeline": "POP2_AND_PUSH(VALUE_TYPE_F64, VALUE_TYPE_F64);"
    },
    {
        "line": 1710,
        "fullcodeline": "POP_AND_PUSH(VALUE_TYPE_I64, VALUE_TYPE_I32);"
    },
    {
        "line": 1715,
        "fullcodeline": "POP_AND_PUSH(VALUE_TYPE_F32, VALUE_TYPE_I32);"
    },
    {
        "line": 1720,
        "fullcodeline": "POP_AND_PUSH(VALUE_TYPE_F64, VALUE_TYPE_I32);"
    },
    {
        "line": 1725,
        "fullcodeline": "POP_AND_PUSH(VALUE_TYPE_I32, VALUE_TYPE_I64);"
    },
    {
        "line": 1730,
        "fullcodeline": "POP_AND_PUSH(VALUE_TYPE_F32, VALUE_TYPE_I64);"
    },
    {
        "line": 1735,
        "fullcodeline": "POP_AND_PUSH(VALUE_TYPE_F64, VALUE_TYPE_I64);"
    },
    {
        "line": 1740,
        "fullcodeline": "POP_AND_PUSH(VALUE_TYPE_I32, VALUE_TYPE_F32);"
    },
    {
        "line": 1745,
        "fullcodeline": "POP_AND_PUSH(VALUE_TYPE_I64, VALUE_TYPE_F32);"
    },
    {
        "line": 1749,
        "fullcodeline": "POP_AND_PUSH(VALUE_TYPE_F64, VALUE_TYPE_F32);"
    },
    {
        "line": 1754,
        "fullcodeline": "POP_AND_PUSH(VALUE_TYPE_I32, VALUE_TYPE_F64);"
    },
    {
        "line": 1759,
        "fullcodeline": "POP_AND_PUSH(VALUE_TYPE_I64, VALUE_TYPE_F64);"
    },
    {
        "line": 1763,
        "fullcodeline": "POP_AND_PUSH(VALUE_TYPE_F32, VALUE_TYPE_F64);"
    },
    {
        "line": 1767,
        "fullcodeline": "POP_AND_PUSH(VALUE_TYPE_F32, VALUE_TYPE_I32);"
    },
    {
        "line": 1771,
        "fullcodeline": "POP_AND_PUSH(VALUE_TYPE_F64, VALUE_TYPE_I64);"
    },
    {
        "line": 1775,
        "fullcodeline": "POP_AND_PUSH(VALUE_TYPE_I32, VALUE_TYPE_F32);"
    },
    {
        "line": 1779,
        "fullcodeline": "POP_AND_PUSH(VALUE_TYPE_I64, VALUE_TYPE_F64);"
    },
    {
        "line": 1784,
        "fullcodeline": "POP_AND_PUSH(VALUE_TYPE_I32, VALUE_TYPE_I32);"
    },
    {
        "line": 1790,
        "fullcodeline": "POP_AND_PUSH(VALUE_TYPE_I64, VALUE_TYPE_I64);"
    },
    {
        "line": 2873,
        "fullcodeline": "set_error_buf_v(error_buf, error_buf_size, \"%s %02x\","
    },
    {
        "line": 2886,
        "fullcodeline": "set_error_buf(error_buf, error_buf_size, \"END opcode expected\");"
    },
    {
        "line": 107,
        "fullcodeline": "p_org = p - 1;"
    },
    {
        "line": 108,
        "fullcodeline": "value_type = read_uint8(p);"
    },
    {
        "line": 151,
        "fullcodeline": "PUSH_CSP(LABEL_TYPE_BLOCK + (opcode - WASM_OP_BLOCK),"
    },
    {
        "line": 234,
        "fullcodeline": "BlockType block_type = (loader_ctx->frame_csp - 1)->block_type;"
    },
    {
        "line": 250,
        "fullcodeline": "(loader_ctx->frame_csp - 1)->else_addr = p - 1;"
    },
    {
        "line": 260,
        "fullcodeline": "RESET_STACK();"
    },
    {
        "line": 261,
        "fullcodeline": "SET_CUR_BLOCK_STACK_POLYMORPHIC_STATE(false);"
    },
    {
        "line": 286,
        "fullcodeline": "BranchBlock *cur_block = loader_ctx->frame_csp - 1;"
    },
    {
        "line": 323,
        "fullcodeline": "POP_CSP();"
    },
    {
        "line": 366,
        "fullcodeline": "RESET_STACK();"
    },
    {
        "line": 367,
        "fullcodeline": "SET_CUR_BLOCK_STACK_POLYMORPHIC_STATE(true);"
    },
    {
        "line": 373,
        "fullcodeline": "POP_I32();"
    },
    {
        "line": 384,
        "fullcodeline": "uint8 *ret_types = NULL;"
    },
    {
        "line": 385,
        "fullcodeline": "uint32 ret_count = 0;"
    },
    {
        "line": 389,
        "fullcodeline": "BrTableCache *br_table_cache = NULL;"
    },
    {
        "line": 391,
        "fullcodeline": "p_org = p - 1;"
    },
    {
        "line": 394,
        "fullcodeline": "read_leb_uint32(p, p_end, count);"
    },
    {
        "line": 398,
        "fullcodeline": "POP_I32();"
    },
    {
        "line": 401,
        "fullcodeline": "p_depth_begin = p_depth = p;"
    },
    {
        "line": 487,
        "fullcodeline": "RESET_STACK();"
    },
    {
        "line": 488,
        "fullcodeline": "SET_CUR_BLOCK_STACK_POLYMORPHIC_STATE(true);"
    },
    {
        "line": 507,
        "fullcodeline": "RESET_STACK();"
    },
    {
        "line": 508,
        "fullcodeline": "SET_CUR_BLOCK_STACK_POLYMORPHIC_STATE(true);"
    },
    {
        "line": 521,
        "fullcodeline": "read_leb_uint32(p, p_end, func_idx);"
    },
    {
        "line": 611,
        "fullcodeline": "read_leb_uint32(p, p_end, type_idx);"
    },
    {
        "line": 615,
        "fullcodeline": "CHECK_BUF(p, p_end, 1);"
    },
    {
        "line": 616,
        "fullcodeline": "table_idx = read_uint8(p);"
    },
    {
        "line": 633,
        "fullcodeline": "POP_I32();"
    },
    {
        "line": 640,
        "fullcodeline": "func_type = module->types[type_idx];"
    },
    {
        "line": 701,
        "fullcodeline": "BranchBlock *cur_block = loader_ctx->frame_csp - 1;"
    },
    {
        "line": 702,
        "fullcodeline": "int32 available_stack_cell ="
    },
    {
        "line": 769,
        "fullcodeline": "BranchBlock *cur_block = loader_ctx->frame_csp - 1;"
    },
    {
        "line": 775,
        "fullcodeline": "POP_I32();"
    },
    {
        "line": 777,
        "fullcodeline": "available_stack_cell = (int32)(loader_ctx->stack_cell_num"
    },
    {
        "line": 1081,
        "fullcodeline": "p_org = p - 1;"
    },
    {
        "line": 1082,
        "fullcodeline": "GET_LOCAL_INDEX_TYPE_AND_OFFSET();"
    },
    {
        "line": 1083,
        "fullcodeline": "PUSH_TYPE(local_type);"
    },
    {
        "line": 1113,
        "fullcodeline": "p_org = p - 1;"
    },
    {
        "line": 1114,
        "fullcodeline": "GET_LOCAL_INDEX_TYPE_AND_OFFSET();"
    },
    {
        "line": 1115,
        "fullcodeline": "POP_TYPE(local_type);"
    },
    {
        "line": 1177,
        "fullcodeline": "p_org = p - 1;"
    },
    {
        "line": 1178,
        "fullcodeline": "GET_LOCAL_INDEX_TYPE_AND_OFFSET();"
    },
    {
        "line": 1189,
        "fullcodeline": "POP_TYPE(local_type);"
    },
    {
        "line": 1190,
        "fullcodeline": "PUSH_TYPE(local_type);"
    },
    {
        "line": 1237,
        "fullcodeline": "p_org = p - 1;"
    },
    {
        "line": 1238,
        "fullcodeline": "read_leb_uint32(p, p_end, global_idx);"
    },
    {
        "line": 1244,
        "fullcodeline": "global_type ="
    },
    {
        "line": 1252,
        "fullcodeline": "PUSH_TYPE(global_type);"
    },
    {
        "line": 1279,
        "fullcodeline": "bool is_mutable = false;"
    },
    {
        "line": 1281,
        "fullcodeline": "p_org = p - 1;"
    },
    {
        "line": 1282,
        "fullcodeline": "read_leb_uint32(p, p_end, global_idx);"
    },
    {
        "line": 1288,
        "fullcodeline": "is_mutable ="
    },
    {
        "line": 1301,
        "fullcodeline": "global_type ="
    },
    {
        "line": 1309,
        "fullcodeline": "POP_TYPE(global_type);"
    },
    {
        "line": 1397,
        "fullcodeline": "CHECK_MEMORY();"
    },
    {
        "line": 1398,
        "fullcodeline": "read_leb_uint32(p, p_end, align);      /* align */"
    },
    {
        "line": 1399,
        "fullcodeline": "read_leb_uint32(p, p_end, mem_offset); /* offset */"
    },
    {
        "line": 1465,
        "fullcodeline": "if (*p++ != 0x00) {"
    },
    {
        "line": 1481,
        "fullcodeline": "if (*p++ != 0x00) {"
    },
    {
        "line": 1797,
        "fullcodeline": "read_leb_uint32(p, p_end, opcode1);"
    },
    {
        "line": 2890,
        "fullcodeline": "set_error_buf(error_buf, error_buf_size,"
    },
    {
        "line": 109,
        "fullcodeline": "if (is_byte_a_type(value_type)) {"
    },
    {
        "line": 144,
        "fullcodeline": "if (BLOCK_HAS_PARAM(block_type)) {"
    },
    {
        "line": 155,
        "fullcodeline": "if (BLOCK_HAS_PARAM(block_type)) {"
    },
    {
        "line": 236,
        "fullcodeline": "if (loader_ctx->csp_num < 2"
    },
    {
        "line": 246,
        "fullcodeline": "if (!check_block_stack(loader_ctx, loader_ctx->frame_csp - 1,"
    },
    {
        "line": 264,
        "fullcodeline": "if (BLOCK_HAS_PARAM(block_type)) {"
    },
    {
        "line": 289,
        "fullcodeline": "if (!check_block_stack(loader_ctx, cur_block, error_buf,"
    },
    {
        "line": 295,
        "fullcodeline": "if (cur_block->label_type == LABEL_TYPE_IF"
    },
    {
        "line": 345,
        "fullcodeline": "if (loader_ctx->csp_num > 0) {"
    },
    {
        "line": 362,
        "fullcodeline": "if (!(frame_csp_tmp = check_branch_block("
    },
    {
        "line": 375,
        "fullcodeline": "if (!(frame_csp_tmp = check_branch_block("
    },
    {
        "line": 403,
        "fullcodeline": "for (i = 0; i <= count; i++) {"
    },
    {
        "line": 483,
        "fullcodeline": "while (p_depth < p)"
    },
    {
        "line": 484,
        "fullcodeline": "*p_depth++ = WASM_OP_NOP;"
    },
    {
        "line": 496,
        "fullcodeline": "for (idx = (int32)func->func_type->result_count - 1; idx >= 0;"
    },
    {
        "line": 497,
        "fullcodeline": "idx--) {"
    },
    {
        "line": 527,
        "fullcodeline": "if (!check_function_index(module, func_idx, error_buf,"
    },
    {
        "line": 532,
        "fullcodeline": "if (func_idx < module->import_function_count)"
    },
    {
        "line": 541,
        "fullcodeline": "if (func_type->param_count > 0) {"
    },
    {
        "line": 554,
        "fullcodeline": "for (i = 0; i < func_type->result_count; i++) {"
    },
    {
        "line": 618,
        "fullcodeline": "if (!check_table_index(module, table_idx, error_buf,"
    },
    {
        "line": 635,
        "fullcodeline": "if (type_idx >= module->type_count) {"
    },
    {
        "line": 642,
        "fullcodeline": "if (func_type->param_count > 0) {"
    },
    {
        "line": 655,
        "fullcodeline": "for (i = 0; i < func_type->result_count; i++) {"
    },
    {
        "line": 703,
        "fullcodeline": "(int32)(loader_ctx->stack_cell_num"
    },
    {
        "line": 706,
        "fullcodeline": "if (available_stack_cell <= 0"
    },
    {
        "line": 714,
        "fullcodeline": "if (available_stack_cell > 0) {"
    },
    {
        "line": 780,
        "fullcodeline": "if (available_stack_cell <= 0"
    },
    {
        "line": 789,
        "fullcodeline": "if (available_stack_cell > 0) {"
    },
    {
        "line": 1094,
        "fullcodeline": "if (local_offset < 0x80) {"
    },
    {
        "line": 1158,
        "fullcodeline": "if (local_offset < 0x80) {"
    },
    {
        "line": 1218,
        "fullcodeline": "if (local_offset < 0x80) {"
    },
    {
        "line": 1239,
        "fullcodeline": "if (global_idx >= global_count) {"
    },
    {
        "line": 1245,
        "fullcodeline": "global_idx < module->import_global_count"
    },
    {
        "line": 1255,
        "fullcodeline": "if (global_type == VALUE_TYPE_I64"
    },
    {
        "line": 1283,
        "fullcodeline": "if (global_idx >= global_count) {"
    },
    {
        "line": 1289,
        "fullcodeline": "global_idx < module->import_global_count"
    },
    {
        "line": 1295,
        "fullcodeline": "if (!is_mutable) {"
    },
    {
        "line": 1302,
        "fullcodeline": "global_idx < module->import_global_count"
    },
    {
        "line": 1312,
        "fullcodeline": "if (global_type == VALUE_TYPE_I64"
    },
    {
        "line": 1400,
        "fullcodeline": "if (!check_memory_access_align(opcode, align, error_buf,"
    },
    {
        "line": 1466,
        "fullcodeline": "set_error_buf(error_buf, error_buf_size,"
    },
    {
        "line": 1482,
        "fullcodeline": "set_error_buf(error_buf, error_buf_size,"
    },
    {
        "line": 113,
        "fullcodeline": "block_type.is_value_type = true;"
    },
    {
        "line": 114,
        "fullcodeline": "block_type.u.value_type = value_type;"
    },
    {
        "line": 145,
        "fullcodeline": "WASMType *wasm_type = block_type.u.type;"
    },
    {
        "line": 237,
        "fullcodeline": "|| (loader_ctx->frame_csp - 1)->label_type"
    },
    {
        "line": 239,
        "fullcodeline": "set_error_buf("
    },
    {
        "line": 296,
        "fullcodeline": "&& !cur_block->else_addr) {"
    },
    {
        "line": 297,
        "fullcodeline": "uint32 block_param_count = 0, block_ret_count = 0;"
    },
    {
        "line": 298,
        "fullcodeline": "uint8 *block_param_types = NULL, *block_ret_types = NULL;"
    },
    {
        "line": 299,
        "fullcodeline": "BlockType *cur_block_type = &cur_block->block_type;"
    },
    {
        "line": 346,
        "fullcodeline": "loader_ctx->frame_csp->end_addr = p - 1;"
    },
    {
        "line": 438,
        "fullcodeline": "depth = (uint32)(loader_ctx->frame_csp - 1 - frame_csp_tmp);"
    },
    {
        "line": 482,
        "fullcodeline": "p_depth = p_depth_begin;"
    },
    {
        "line": 498,
        "fullcodeline": "ret_type = *(func->func_type->types"
    },
    {
        "line": 500,
        "fullcodeline": "POP_TYPE(ret_type);"
    },
    {
        "line": 533,
        "fullcodeline": "func_type ="
    },
    {
        "line": 555,
        "fullcodeline": "PUSH_TYPE(func_type->types[func_type->param_count + i]);"
    },
    {
        "line": 636,
        "fullcodeline": "set_error_buf(error_buf, error_buf_size, \"unknown type\");"
    },
    {
        "line": 656,
        "fullcodeline": "PUSH_TYPE(func_type->types[func_type->param_count + i]);"
    },
    {
        "line": 707,
        "fullcodeline": "&& !cur_block->is_stack_polymorphic) {"
    },
    {
        "line": 708,
        "fullcodeline": "set_error_buf(error_buf, error_buf_size,"
    },
    {
        "line": 781,
        "fullcodeline": "&& !cur_block->is_stack_polymorphic) {"
    },
    {
        "line": 782,
        "fullcodeline": "set_error_buf(error_buf, error_buf_size,"
    },
    {
        "line": 847,
        "fullcodeline": "ref_type = *(loader_ctx->frame_ref - 1);"
    },
    {
        "line": 856,
        "fullcodeline": "POP2_AND_PUSH(ref_type, ref_type);"
    },
    {
        "line": 1095,
        "fullcodeline": "*p_org++ = EXT_OP_GET_LOCAL_FAST;"
    },
    {
        "line": 1159,
        "fullcodeline": "*p_org++ = EXT_OP_SET_LOCAL_FAST;"
    },
    {
        "line": 1219,
        "fullcodeline": "*p_org++ = EXT_OP_TEE_LOCAL_FAST;"
    },
    {
        "line": 1240,
        "fullcodeline": "set_error_buf(error_buf, error_buf_size, \"unknown global\");"
    },
    {
        "line": 1256,
        "fullcodeline": "|| global_type == VALUE_TYPE_F64) {"
    },
    {
        "line": 1263,
        "fullcodeline": "*p_org = WASM_OP_GET_GLOBAL_64;"
    },
    {
        "line": 1284,
        "fullcodeline": "set_error_buf(error_buf, error_buf_size, \"unknown global\");"
    },
    {
        "line": 1296,
        "fullcodeline": "set_error_buf(error_buf, error_buf_size,"
    },
    {
        "line": 1313,
        "fullcodeline": "|| global_type == VALUE_TYPE_F64) {"
    },
    {
        "line": 1320,
        "fullcodeline": "*p_org = WASM_OP_SET_GLOBAL_64;"
    },
    {
        "line": 1417,
        "fullcodeline": "POP_AND_PUSH(VALUE_TYPE_I32, VALUE_TYPE_I32);"
    },
    {
        "line": 1426,
        "fullcodeline": "POP_AND_PUSH(VALUE_TYPE_I32, VALUE_TYPE_I64);"
    },
    {
        "line": 1429,
        "fullcodeline": "POP_AND_PUSH(VALUE_TYPE_I32, VALUE_TYPE_F32);"
    },
    {
        "line": 1432,
        "fullcodeline": "POP_AND_PUSH(VALUE_TYPE_I32, VALUE_TYPE_F64);"
    },
    {
        "line": 1439,
        "fullcodeline": "POP_I32();"
    },
    {
        "line": 1445,
        "fullcodeline": "POP_I64();"
    },
    {
        "line": 1446,
        "fullcodeline": "POP_I32();"
    },
    {
        "line": 1449,
        "fullcodeline": "POP_F32();"
    },
    {
        "line": 1450,
        "fullcodeline": "POP_I32();"
    },
    {
        "line": 1453,
        "fullcodeline": "POP_F64();"
    },
    {
        "line": 1454,
        "fullcodeline": "POP_I32();"
    },
    {
        "line": 1804,
        "fullcodeline": "POP_AND_PUSH(VALUE_TYPE_F32, VALUE_TYPE_I32);"
    },
    {
        "line": 1808,
        "fullcodeline": "POP_AND_PUSH(VALUE_TYPE_F64, VALUE_TYPE_I32);"
    },
    {
        "line": 1812,
        "fullcodeline": "POP_AND_PUSH(VALUE_TYPE_F32, VALUE_TYPE_I64);"
    },
    {
        "line": 1816,
        "fullcodeline": "POP_AND_PUSH(VALUE_TYPE_F64, VALUE_TYPE_I64);"
    },
    {
        "line": 2055,
        "fullcodeline": "set_error_buf_v(error_buf, error_buf_size,"
    },
    {
        "line": 119,
        "fullcodeline": "p--;"
    },
    {
        "line": 120,
        "fullcodeline": "read_leb_uint32(p, p_end, type_index);"
    },
    {
        "line": 126,
        "fullcodeline": "block_type.is_value_type = false;"
    },
    {
        "line": 127,
        "fullcodeline": "block_type.u.type = module->types[type_index];"
    },
    {
        "line": 139,
        "fullcodeline": "*p_org = EXT_OP_BLOCK + (opcode - WASM_OP_BLOCK);"
    },
    {
        "line": 146,
        "fullcodeline": "for (i = 0; i < block_type.u.type->param_count; i++)"
    },
    {
        "line": 147,
        "fullcodeline": "POP_TYPE("
    },
    {
        "line": 156,
        "fullcodeline": "for (i = 0; i < block_type.u.type->param_count; i++)"
    },
    {
        "line": 157,
        "fullcodeline": "PUSH_TYPE(block_type.u.type->types[i]);"
    },
    {
        "line": 265,
        "fullcodeline": "for (i = 0; i < block_type.u.type->param_count; i++)"
    },
    {
        "line": 266,
        "fullcodeline": "PUSH_TYPE(block_type.u.type->types[i]);"
    },
    {
        "line": 313,
        "fullcodeline": "if (block_param_count != block_ret_count"
    },
    {
        "line": 404,
        "fullcodeline": "if (!(frame_csp_tmp ="
    },
    {
        "line": 409,
        "fullcodeline": "if (i == 0) {"
    },
    {
        "line": 536,
        "fullcodeline": "func_type = module"
    },
    {
        "line": 542,
        "fullcodeline": "for (idx = (int32)(func_type->param_count - 1); idx >= 0;"
    },
    {
        "line": 543,
        "fullcodeline": "idx--) {"
    },
    {
        "line": 643,
        "fullcodeline": "for (idx = (int32)(func_type->param_count - 1); idx >= 0;"
    },
    {
        "line": 644,
        "fullcodeline": "idx--) {"
    },
    {
        "line": 715,
        "fullcodeline": "if (is_32bit_type(*(loader_ctx->frame_ref - 1))) {"
    },
    {
        "line": 863,
        "fullcodeline": "PUSH_TYPE(VALUE_TYPE_ANY);"
    },
    {
        "line": 1096,
        "fullcodeline": "if (is_32bit_type(local_type)) {"
    },
    {
        "line": 1102,
        "fullcodeline": "while (p_org < p) {"
    },
    {
        "line": 1160,
        "fullcodeline": "if (is_32bit_type(local_type)) {"
    },
    {
        "line": 1166,
        "fullcodeline": "while (p_org < p) {"
    },
    {
        "line": 1220,
        "fullcodeline": "if (is_32bit_type(local_type)) {"
    },
    {
        "line": 1226,
        "fullcodeline": "while (p_org < p) {"
    },
    {
        "line": 121,
        "fullcodeline": "if (type_index >= module->type_count) {"
    },
    {
        "line": 314,
        "fullcodeline": "|| (block_param_count"
    },
    {
        "line": 317,
        "fullcodeline": "set_error_buf(error_buf, error_buf_size,"
    },
    {
        "line": 350,
        "fullcodeline": "if (p < p_end) {"
    },
    {
        "line": 440,
        "fullcodeline": "br_table_cache->br_depths[i] = depth;"
    },
    {
        "line": 544,
        "fullcodeline": "POP_TYPE(func_type->types[idx]);"
    },
    {
        "line": 645,
        "fullcodeline": "POP_TYPE(func_type->types[idx]);"
    },
    {
        "line": 716,
        "fullcodeline": "loader_ctx->frame_ref--;"
    },
    {
        "line": 717,
        "fullcodeline": "loader_ctx->stack_cell_num--;"
    },
    {
        "line": 790,
        "fullcodeline": "switch (*(loader_ctx->frame_ref - 1)) {"
    },
    {
        "line": 797,
        "fullcodeline": "*(p - 1) = WASM_OP_SELECT_64;"
    },
    {
        "line": 1097,
        "fullcodeline": "*p_org++ = (uint8)local_offset;"
    },
    {
        "line": 1103,
        "fullcodeline": "*p_org++ = WASM_OP_NOP;"
    },
    {
        "line": 1161,
        "fullcodeline": "*p_org++ = (uint8)local_offset;"
    },
    {
        "line": 1167,
        "fullcodeline": "*p_org++ = WASM_OP_NOP;"
    },
    {
        "line": 1221,
        "fullcodeline": "*p_org++ = (uint8)local_offset;"
    },
    {
        "line": 1227,
        "fullcodeline": "*p_org++ = WASM_OP_NOP;"
    },
    {
        "line": 1248,
        "fullcodeline": "->globals[global_idx"
    },
    {
        "line": 1292,
        "fullcodeline": "->globals[global_idx"
    },
    {
        "line": 1305,
        "fullcodeline": "->globals[global_idx"
    },
    {
        "line": 1322,
        "fullcodeline": "else if (module->aux_stack_size > 0"
    },
    {
        "line": 122,
        "fullcodeline": "set_error_buf(error_buf, error_buf_size,"
    },
    {
        "line": 148,
        "fullcodeline": "wasm_type->types[wasm_type->param_count - i - 1]);"
    },
    {
        "line": 301,
        "fullcodeline": "if (cur_block_type->u.value_type != VALUE_TYPE_VOID) {"
    },
    {
        "line": 307,
        "fullcodeline": "block_param_count = cur_block_type->u.type->param_count;"
    },
    {
        "line": 308,
        "fullcodeline": "block_ret_count = cur_block_type->u.type->result_count;"
    },
    {
        "line": 309,
        "fullcodeline": "block_param_types = cur_block_type->u.type->types;"
    },
    {
        "line": 310,
        "fullcodeline": "block_ret_types ="
    },
    {
        "line": 315,
        "fullcodeline": "&& memcmp(block_param_types, block_ret_types,"
    },
    {
        "line": 351,
        "fullcodeline": "set_error_buf(error_buf, error_buf_size,"
    },
    {
        "line": 405,
        "fullcodeline": "check_branch_block(loader_ctx, &p, p_end,"
    },
    {
        "line": 410,
        "fullcodeline": "if (frame_csp_tmp->label_type != LABEL_TYPE_LOOP)"
    },
    {
        "line": 415,
        "fullcodeline": "uint8 *tmp_ret_types = NULL;"
    },
    {
        "line": 416,
        "fullcodeline": "uint32 tmp_ret_count = 0;"
    },
    {
        "line": 841,
        "fullcodeline": "set_error_buf(error_buf, error_buf_size,"
    },
    {
        "line": 1100,
        "fullcodeline": "*p_org++ = (uint8)(local_offset | 0x80);"
    },
    {
        "line": 1164,
        "fullcodeline": "*p_org++ = (uint8)(local_offset | 0x80);"
    },
    {
        "line": 1224,
        "fullcodeline": "*p_org++ = (uint8)(local_offset | 0x80);"
    },
    {
        "line": 1323,
        "fullcodeline": "&& global_idx == module->aux_stack_top_global_index) {"
    },
    {
        "line": 1330,
        "fullcodeline": "*p_org = WASM_OP_SET_GLOBAL_AUX_STACK;"
    },
    {
        "line": 302,
        "fullcodeline": "block_ret_count = 1;"
    },
    {
        "line": 303,
        "fullcodeline": "block_ret_types = &cur_block_type->u.value_type;"
    },
    {
        "line": 311,
        "fullcodeline": "cur_block_type->u.type->types + block_param_count;"
    },
    {
        "line": 411,
        "fullcodeline": "ret_count = block_type_get_result_types("
    },
    {
        "line": 420,
        "fullcodeline": "if (frame_csp_tmp->label_type != LABEL_TYPE_LOOP)"
    },
    {
        "line": 424,
        "fullcodeline": "if (ret_count != tmp_ret_count"
    },
    {
        "line": 443,
        "fullcodeline": "if (depth > 255) {"
    },
    {
        "line": 537,
        "fullcodeline": "->functions[func_idx"
    },
    {
        "line": 728,
        "fullcodeline": "else if (is_64bit_type(*(loader_ctx->frame_ref - 1))) {"
    },
    {
        "line": 421,
        "fullcodeline": "tmp_ret_count = block_type_get_result_types("
    },
    {
        "line": 425,
        "fullcodeline": "|| (ret_count"
    },
    {
        "line": 429,
        "fullcodeline": "set_error_buf("
    },
    {
        "line": 459,
        "fullcodeline": "*p_org = EXT_OP_BR_TABLE_CACHE;"
    },
    {
        "line": 460,
        "fullcodeline": "br_table_cache->br_table_op_addr = p_org;"
    },
    {
        "line": 461,
        "fullcodeline": "br_table_cache->br_count = count;"
    },
    {
        "line": 466,
        "fullcodeline": "br_table_cache->br_depths[i] = depth;"
    },
    {
        "line": 467,
        "fullcodeline": "bh_list_insert(module->br_table_cache_list,"
    },
    {
        "line": 729,
        "fullcodeline": "loader_ctx->frame_ref -= 2;"
    },
    {
        "line": 730,
        "fullcodeline": "loader_ctx->stack_cell_num -= 2;"
    },
    {
        "line": 732,
        "fullcodeline": "*(p - 1) = WASM_OP_DROP_64;"
    },
    {
        "line": 426,
        "fullcodeline": "&& 0"
    },
    {
        "line": 452,
        "fullcodeline": "if (!(br_table_cache = loader_malloc("
    },
    {
        "line": 463,
        "fullcodeline": "for (j = 0; j < i; j++) {"
    },
    {
        "line": 473,
        "fullcodeline": "*p_depth++ = (uint8)depth;"
    },
    {
        "line": 753,
        "fullcodeline": "set_error_buf(error_buf, error_buf_size,"
    },
    {
        "line": 427,
        "fullcodeline": "!= memcmp(ret_types, tmp_ret_types,"
    },
    {
        "line": 464,
        "fullcodeline": "br_table_cache->br_depths[j] = p_depth_begin[j];"
    },
    {
        "line": 453,
        "fullcodeline": "offsetof(BrTableCache, br_depths)"
    },
    {
        "line": 454,
        "fullcodeline": "+ sizeof(uint32)"
    },
    {
        "line": 455,
        "fullcodeline": "* (uint64)(count + 1),"
    }
]