[
    {
        "line": 3,
        "fullcodeline": "struct ccp_sha_engine *sha = &cmd->u.sha;"
    },
    {
        "line": 156,
        "fullcodeline": "memset(&op, 0, sizeof(op));"
    },
    {
        "line": 157,
        "fullcodeline": "op.cmd_q = cmd_q;"
    },
    {
        "line": 158,
        "fullcodeline": "op.jobid = CCP_NEW_JOBID(cmd_q->ccp);"
    },
    {
        "line": 159,
        "fullcodeline": "op.sb_ctx = cmd_q->sb_ctx; /* Pre-allocated */"
    },
    {
        "line": 168,
        "fullcodeline": "ret = ccp_init_dm_workarea(&ctx, cmd_q, sb_count * CCP_SB_BYTES,"
    },
    {
        "line": 198,
        "fullcodeline": "ret = ccp_copy_to_sb(cmd_q, &ctx, op.jobid, op.sb_ctx,"
    },
    {
        "line": 237,
        "fullcodeline": "ret = ccp_copy_from_sb(cmd_q, &ctx, op.jobid, op.sb_ctx,"
    },
    {
        "line": 47,
        "fullcodeline": "if (!sha->ctx)"
    },
    {
        "line": 54,
        "fullcodeline": "if (cmd_q->ccp->vdata->version == CCP_VERSION(3, 0)) {"
    },
    {
        "line": 153,
        "fullcodeline": "if (sha->src_len && !sha->src)"
    },
    {
        "line": 273,
        "fullcodeline": "if (sha->final && sha->opad) {"
    },
    {
        "line": 19,
        "fullcodeline": "block_size = SHA1_BLOCK_SIZE;"
    },
    {
        "line": 24,
        "fullcodeline": "block_size = SHA224_BLOCK_SIZE;"
    },
    {
        "line": 29,
        "fullcodeline": "block_size = SHA256_BLOCK_SIZE;"
    },
    {
        "line": 35,
        "fullcodeline": "block_size = SHA384_BLOCK_SIZE;"
    },
    {
        "line": 41,
        "fullcodeline": "block_size = SHA512_BLOCK_SIZE;"
    },
    {
        "line": 50,
        "fullcodeline": "if (!sha->final && (sha->src_len & (block_size - 1)))"
    },
    {
        "line": 103,
        "fullcodeline": "digest_size = SHA1_DIGEST_SIZE;"
    },
    {
        "line": 104,
        "fullcodeline": "init = (void *) ccp_sha1_init;"
    },
    {
        "line": 105,
        "fullcodeline": "ctx_size = SHA1_DIGEST_SIZE;"
    },
    {
        "line": 106,
        "fullcodeline": "sb_count = 1;"
    },
    {
        "line": 113,
        "fullcodeline": "digest_size = SHA224_DIGEST_SIZE;"
    },
    {
        "line": 114,
        "fullcodeline": "init = (void *) ccp_sha224_init;"
    },
    {
        "line": 115,
        "fullcodeline": "ctx_size = SHA256_DIGEST_SIZE;"
    },
    {
        "line": 116,
        "fullcodeline": "sb_count = 1;"
    },
    {
        "line": 117,
        "fullcodeline": "ioffset = 0;"
    },
    {
        "line": 124,
        "fullcodeline": "digest_size = SHA256_DIGEST_SIZE;"
    },
    {
        "line": 125,
        "fullcodeline": "init = (void *) ccp_sha256_init;"
    },
    {
        "line": 126,
        "fullcodeline": "ctx_size = SHA256_DIGEST_SIZE;"
    },
    {
        "line": 127,
        "fullcodeline": "sb_count = 1;"
    },
    {
        "line": 128,
        "fullcodeline": "ooffset = ioffset = 0;"
    },
    {
        "line": 131,
        "fullcodeline": "digest_size = SHA384_DIGEST_SIZE;"
    },
    {
        "line": 132,
        "fullcodeline": "init = (void *) ccp_sha384_init;"
    },
    {
        "line": 133,
        "fullcodeline": "ctx_size = SHA512_DIGEST_SIZE;"
    },
    {
        "line": 134,
        "fullcodeline": "sb_count = 2;"
    },
    {
        "line": 135,
        "fullcodeline": "ioffset = 0;"
    },
    {
        "line": 136,
        "fullcodeline": "ooffset = 2 * CCP_SB_BYTES - SHA384_DIGEST_SIZE;"
    },
    {
        "line": 139,
        "fullcodeline": "digest_size = SHA512_DIGEST_SIZE;"
    },
    {
        "line": 140,
        "fullcodeline": "init = (void *) ccp_sha512_init;"
    },
    {
        "line": 141,
        "fullcodeline": "ctx_size = SHA512_DIGEST_SIZE;"
    },
    {
        "line": 142,
        "fullcodeline": "sb_count = 2;"
    },
    {
        "line": 143,
        "fullcodeline": "ooffset = ioffset = 0;"
    },
    {
        "line": 146,
        "fullcodeline": "ret = -EINVAL;"
    },
    {
        "line": 207,
        "fullcodeline": "ret = ccp_init_data(&src, cmd_q, sha->src, sha->src_len,"
    },
    {
        "line": 284,
        "fullcodeline": "hmac_buf = kmalloc(block_size + digest_size, GFP_KERNEL);"
    },
    {
        "line": 289,
        "fullcodeline": "sg_init_one(&sg, hmac_buf, block_size + digest_size);"
    },
    {
        "line": 291,
        "fullcodeline": "scatterwalk_map_and_copy(hmac_buf, sha->opad, 0, block_size, 0);"
    },
    {
        "line": 316,
        "fullcodeline": "memset(&hmac_cmd, 0, sizeof(hmac_cmd));"
    },
    {
        "line": 317,
        "fullcodeline": "hmac_cmd.engine = CCP_ENGINE_SHA;"
    },
    {
        "line": 329,
        "fullcodeline": "ret = ccp_run_sha_cmd(cmd_q, &hmac_cmd);"
    },
    {
        "line": 17,
        "fullcodeline": "if (sha->ctx_len < SHA1_DIGEST_SIZE)"
    },
    {
        "line": 22,
        "fullcodeline": "if (sha->ctx_len < SHA224_DIGEST_SIZE)"
    },
    {
        "line": 27,
        "fullcodeline": "if (sha->ctx_len < SHA256_DIGEST_SIZE)"
    },
    {
        "line": 44,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 48,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 51,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 56,
        "fullcodeline": "if (!sha->src_len) {"
    },
    {
        "line": 154,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 192,
        "fullcodeline": "ret = ccp_set_dm_area(&ctx, 0, sha->ctx, 0,"
    },
    {
        "line": 226,
        "fullcodeline": "op.eom = 1;"
    },
    {
        "line": 227,
        "fullcodeline": "ret = cmd_q->ccp->vdata->perform->sha(&op);"
    },
    {
        "line": 269,
        "fullcodeline": "ccp_get_dm_area(&ctx, 0, sha->ctx, 0,"
    },
    {
        "line": 279,
        "fullcodeline": "if (sha->opad_len != block_size) {"
    },
    {
        "line": 285,
        "fullcodeline": "if (!hmac_buf) {"
    },
    {
        "line": 327,
        "fullcodeline": "hmac_cmd.u.sha.msg_bits = (block_size + digest_size) << 3;"
    },
    {
        "line": 32,
        "fullcodeline": "if (cmd_q->ccp->vdata->version < CCP_VERSION(4, 0)"
    },
    {
        "line": 33,
        "fullcodeline": "|| sha->ctx_len < SHA384_DIGEST_SIZE)"
    },
    {
        "line": 38,
        "fullcodeline": "if (cmd_q->ccp->vdata->version < CCP_VERSION(4, 0)"
    },
    {
        "line": 39,
        "fullcodeline": "|| sha->ctx_len < SHA512_DIGEST_SIZE)"
    },
    {
        "line": 107,
        "fullcodeline": "if (cmd_q->ccp->vdata->version != CCP_VERSION(3, 0))"
    },
    {
        "line": 108,
        "fullcodeline": "ooffset = ioffset = CCP_SB_BYTES - SHA1_DIGEST_SIZE;"
    },
    {
        "line": 118,
        "fullcodeline": "if (cmd_q->ccp->vdata->version != CCP_VERSION(3, 0))"
    },
    {
        "line": 119,
        "fullcodeline": "ooffset = CCP_SB_BYTES - SHA224_DIGEST_SIZE;"
    },
    {
        "line": 181,
        "fullcodeline": "memcpy(ctx.address + ctx_size / 2, init,"
    },
    {
        "line": 183,
        "fullcodeline": "memcpy(ctx.address, init + ctx_size / 2,"
    },
    {
        "line": 187,
        "fullcodeline": "ret = -EINVAL;"
    },
    {
        "line": 213,
        "fullcodeline": "ccp_prepare_data(&src, NULL, &op, block_size, false);"
    },
    {
        "line": 217,
        "fullcodeline": "ret = cmd_q->ccp->vdata->perform->sha(&op);"
    },
    {
        "line": 223,
        "fullcodeline": "ccp_process_data(&src, NULL, &op);"
    },
    {
        "line": 250,
        "fullcodeline": "ccp_get_dm_area(&ctx, ooffset,"
    },
    {
        "line": 256,
        "fullcodeline": "ccp_get_dm_area(&ctx, 0,"
    },
    {
        "line": 259,
        "fullcodeline": "ccp_get_dm_area(&ctx, LSB_ITEM_SIZE + ooffset,"
    },
    {
        "line": 264,
        "fullcodeline": "ret = -EINVAL;"
    },
    {
        "line": 270,
        "fullcodeline": "sb_count * CCP_SB_BYTES);"
    },
    {
        "line": 280,
        "fullcodeline": "ret = -EINVAL;"
    },
    {
        "line": 286,
        "fullcodeline": "ret = -ENOMEM;"
    },
    {
        "line": 296,
        "fullcodeline": "memcpy(hmac_buf + block_size,"
    },
    {
        "line": 302,
        "fullcodeline": "memcpy(hmac_buf + block_size,"
    },
    {
        "line": 305,
        "fullcodeline": "memcpy(hmac_buf + block_size +"
    },
    {
        "line": 312,
        "fullcodeline": "ret = -EINVAL;"
    },
    {
        "line": 18,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 23,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 28,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 34,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 40,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 110,
        "fullcodeline": "ooffset = ioffset = 0;"
    },
    {
        "line": 121,
        "fullcodeline": "ooffset = 0;"
    },
    {
        "line": 182,
        "fullcodeline": "ctx_size / 2);"
    },
    {
        "line": 184,
        "fullcodeline": "ctx_size / 2);"
    },
    {
        "line": 193,
        "fullcodeline": "sb_count * CCP_SB_BYTES);"
    },
    {
        "line": 214,
        "fullcodeline": "if (sha->final && !src.sg_wa.bytes_left)"
    },
    {
        "line": 257,
        "fullcodeline": "sha->ctx, LSB_ITEM_SIZE - ooffset,"
    },
    {
        "line": 261,
        "fullcodeline": "LSB_ITEM_SIZE - ooffset);"
    },
    {
        "line": 78,
        "fullcodeline": "sha_zero = sha1_zero_message_hash;"
    },
    {
        "line": 79,
        "fullcodeline": "digest_len = SHA1_DIGEST_SIZE;"
    },
    {
        "line": 82,
        "fullcodeline": "sha_zero = sha224_zero_message_hash;"
    },
    {
        "line": 83,
        "fullcodeline": "digest_len = SHA224_DIGEST_SIZE;"
    },
    {
        "line": 86,
        "fullcodeline": "sha_zero = sha256_zero_message_hash;"
    },
    {
        "line": 87,
        "fullcodeline": "digest_len = SHA256_DIGEST_SIZE;"
    },
    {
        "line": 215,
        "fullcodeline": "op.eom = 1;"
    },
    {
        "line": 306,
        "fullcodeline": "(LSB_ITEM_SIZE - ooffset),"
    },
    {
        "line": 68,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 90,
        "fullcodeline": "return -EINVAL;"
    }
]