[
    {
        "line": 4,
        "fullcodeline": "bool reopen_log = false;"
    },
    {
        "line": 9,
        "fullcodeline": "bool bad_option = false;"
    },
    {
        "line": 12,
        "fullcodeline": "struct option long_options[] = {"
    },
    {
        "line": 79,
        "fullcodeline": "curind = optind;"
    },
    {
        "line": 338,
        "fullcodeline": "if (optind < argc) {"
    },
    {
        "line": 13,
        "fullcodeline": "{\"use-file\",\t\trequired_argument,\tNULL, 'f'},"
    },
    {
        "line": 21,
        "fullcodeline": "{\"all\",\t\t\tno_argument,\t\tNULL,  3 },"
    },
    {
        "line": 22,
        "fullcodeline": "{\"log-console\",\t\tno_argument,\t\tNULL, 'l'},"
    },
    {
        "line": 23,
        "fullcodeline": "{\"log-detail\",\t\tno_argument,\t\tNULL, 'D'},"
    },
    {
        "line": 24,
        "fullcodeline": "{\"log-facility\",\trequired_argument,\tNULL, 'S'},"
    },
    {
        "line": 25,
        "fullcodeline": "{\"log-file\",\t\toptional_argument,\tNULL, 'g'},"
    },
    {
        "line": 26,
        "fullcodeline": "{\"flush-log-file\",\tno_argument,\t\tNULL,  2 },"
    },
    {
        "line": 27,
        "fullcodeline": "{\"no-syslog\",\t\tno_argument,\t\tNULL, 'G'},"
    },
    {
        "line": 35,
        "fullcodeline": "{\"dont-respawn\",\tno_argument,\t\tNULL, 'R'},"
    },
    {
        "line": 36,
        "fullcodeline": "{\"dont-fork\",\t\tno_argument,\t\tNULL, 'n'},"
    },
    {
        "line": 37,
        "fullcodeline": "{\"dump-conf\",\t\tno_argument,\t\tNULL, 'd'},"
    },
    {
        "line": 38,
        "fullcodeline": "{\"pid\",\t\t\trequired_argument,\tNULL, 'p'},"
    },
    {
        "line": 53,
        "fullcodeline": "{\"core-dump\",\t\tno_argument,\t\tNULL, 'm'},"
    },
    {
        "line": 54,
        "fullcodeline": "{\"core-dump-pattern\",\toptional_argument,\tNULL, 'M'},"
    },
    {
        "line": 61,
        "fullcodeline": "{\"config-id\",\t\trequired_argument,\tNULL, 'i'},"
    },
    {
        "line": 62,
        "fullcodeline": "{\"signum\",\t\trequired_argument,\tNULL,  4 },"
    },
    {
        "line": 63,
        "fullcodeline": "{\"config-test\",\t\toptional_argument,\tNULL, 't'},"
    },
    {
        "line": 70,
        "fullcodeline": "{\"version\",\t\tno_argument,\t\tNULL, 'v'},"
    },
    {
        "line": 71,
        "fullcodeline": "{\"help\",\t\tno_argument,\t\tNULL, 'h'},"
    },
    {
        "line": 73,
        "fullcodeline": "{NULL,\t\t\t0,\t\t\tNULL,  0 }"
    },
    {
        "line": 80,
        "fullcodeline": "while (longindex = -1, (c = getopt_long(argc, argv, \":vhlndDRS:f:p:i:mM::g::Gt::\""
    },
    {
        "line": 335,
        "fullcodeline": "curind = optind;"
    },
    {
        "line": 339,
        "fullcodeline": "printf(\"Unexpected argument(s): \");"
    },
    {
        "line": 342,
        "fullcodeline": "printf(\"\\n\");"
    },
    {
        "line": 346,
        "fullcodeline": "exit(1);"
    },
    {
        "line": 102,
        "fullcodeline": ", long_options, &longindex)) != -1) {"
    },
    {
        "line": 106,
        "fullcodeline": "if (longindex >= 0 && long_options[longindex].has_arg == required_argument && optarg && !optarg[0]) {"
    },
    {
        "line": 340,
        "fullcodeline": "while (optind < argc)"
    },
    {
        "line": 341,
        "fullcodeline": "printf(\"%s \", argv[optind++]);"
    },
    {
        "line": 107,
        "fullcodeline": "c = ':';"
    },
    {
        "line": 108,
        "fullcodeline": "optarg = NULL;"
    },
    {
        "line": 113,
        "fullcodeline": "fprintf(stderr, \"%s\", version_string);"
    },
    {
        "line": 117,
        "fullcodeline": "fprintf(stderr, \"\\n\\n%s\\n\\n\", COPYRIGHT_STRING);"
    },
    {
        "line": 118,
        "fullcodeline": "fprintf(stderr, \"Built with kernel headers for Linux %d.%d.%d\\n\","
    },
    {
        "line": 122,
        "fullcodeline": "uname(&uname_buf);"
    },
    {
        "line": 123,
        "fullcodeline": "fprintf(stderr, \"Running on %s %s %s\\n\\n\", uname_buf.sysname, uname_buf.release, uname_buf.version);"
    },
    {
        "line": 124,
        "fullcodeline": "fprintf(stderr, \"configure options: %s\\n\\n\", KEEPALIVED_CONFIGURE_OPTIONS);"
    },
    {
        "line": 125,
        "fullcodeline": "fprintf(stderr, \"Config options: %s\\n\\n\", CONFIGURATION_OPTIONS);"
    },
    {
        "line": 126,
        "fullcodeline": "fprintf(stderr, \"System options: %s\\n\", SYSTEM_OPTIONS);"
    },
    {
        "line": 127,
        "fullcodeline": "exit(0);"
    },
    {
        "line": 130,
        "fullcodeline": "usage(argv[0]);"
    },
    {
        "line": 131,
        "fullcodeline": "exit(0);"
    },
    {
        "line": 134,
        "fullcodeline": "__set_bit(LOG_CONSOLE_BIT, &debug);"
    },
    {
        "line": 135,
        "fullcodeline": "reopen_log = true;"
    },
    {
        "line": 138,
        "fullcodeline": "__set_bit(DONT_FORK_BIT, &debug);"
    },
    {
        "line": 141,
        "fullcodeline": "__set_bit(DUMP_CONF_BIT, &debug);"
    },
    {
        "line": 160,
        "fullcodeline": "__set_bit(DONT_RESPAWN_BIT, &debug);"
    },
    {
        "line": 180,
        "fullcodeline": "open_log_file(log_file_name, NULL, NULL, NULL);"
    },
    {
        "line": 183,
        "fullcodeline": "__set_bit(NO_SYSLOG_BIT, &debug);"
    },
    {
        "line": 184,
        "fullcodeline": "reopen_log = true;"
    },
    {
        "line": 187,
        "fullcodeline": "__set_bit(CONFIG_TEST_BIT, &debug);"
    },
    {
        "line": 188,
        "fullcodeline": "__set_bit(DONT_RESPAWN_BIT, &debug);"
    },
    {
        "line": 189,
        "fullcodeline": "__set_bit(DONT_FORK_BIT, &debug);"
    },
    {
        "line": 190,
        "fullcodeline": "__set_bit(NO_SYSLOG_BIT, &debug);"
    },
    {
        "line": 202,
        "fullcodeline": "conf_file = optarg;"
    },
    {
        "line": 205,
        "fullcodeline": "set_flush_log_file();"
    },
    {
        "line": 221,
        "fullcodeline": "main_pidfile = optarg;"
    },
    {
        "line": 250,
        "fullcodeline": "set_core_dump_pattern = true;"
    },
    {
        "line": 255,
        "fullcodeline": "create_core_dump = true;"
    },
    {
        "line": 269,
        "fullcodeline": "FREE_PTR(config_id);"
    },
    {
        "line": 270,
        "fullcodeline": "config_id = MALLOC(strlen(optarg) + 1);"
    },
    {
        "line": 271,
        "fullcodeline": "strcpy(config_id, optarg);"
    },
    {
        "line": 274,
        "fullcodeline": "signum = get_signum(optarg);"
    },
    {
        "line": 280,
        "fullcodeline": "printf(\"%d\\n\", signum);"
    },
    {
        "line": 281,
        "fullcodeline": "exit(0);"
    },
    {
        "line": 284,
        "fullcodeline": "__set_bit(RUN_ALL_CHILDREN, &daemon_mode);"
    },
    {
        "line": 322,
        "fullcodeline": "bad_option = true;"
    },
    {
        "line": 329,
        "fullcodeline": "bad_option = true;"
    },
    {
        "line": 332,
        "fullcodeline": "exit(1);"
    },
    {
        "line": 119,
        "fullcodeline": "(LINUX_VERSION_CODE >> 16) & 0xff,"
    },
    {
        "line": 120,
        "fullcodeline": "(LINUX_VERSION_CODE >>  8) & 0xff,"
    },
    {
        "line": 121,
        "fullcodeline": "(LINUX_VERSION_CODE      ) & 0xff);"
    },
    {
        "line": 154,
        "fullcodeline": "if (__test_bit(LOG_DETAIL_BIT, &debug))"
    },
    {
        "line": 168,
        "fullcodeline": "if (!read_unsigned(optarg, &facility, 0, LOG_FACILITY_MAX, false))"
    },
    {
        "line": 176,
        "fullcodeline": "if (optarg && optarg[0])"
    },
    {
        "line": 191,
        "fullcodeline": "if (optarg && optarg[0]) {"
    },
    {
        "line": 251,
        "fullcodeline": "if (optarg && optarg[0])"
    },
    {
        "line": 275,
        "fullcodeline": "if (signum == -1) {"
    },
    {
        "line": 318,
        "fullcodeline": "if (optopt && argv[curind][1] != '-')"
    },
    {
        "line": 325,
        "fullcodeline": "if (optopt && argv[curind][1] != '-')"
    },
    {
        "line": 155,
        "fullcodeline": "__set_bit(LOG_EXTRA_DETAIL_BIT, &debug);"
    },
    {
        "line": 169,
        "fullcodeline": "fprintf(stderr, \"Invalid log facility '%s'\\n\", optarg);"
    },
    {
        "line": 177,
        "fullcodeline": "log_file_name = optarg;"
    },
    {
        "line": 192,
        "fullcodeline": "int fd = open(optarg, O_WRONLY | O_APPEND | O_CREAT, S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH);"
    },
    {
        "line": 197,
        "fullcodeline": "dup2(fd, STDERR_FILENO);"
    },
    {
        "line": 198,
        "fullcodeline": "close(fd);"
    },
    {
        "line": 252,
        "fullcodeline": "core_dump_pattern = optarg;"
    },
    {
        "line": 276,
        "fullcodeline": "fprintf(stderr, \"Unknown sigfunc %s\\n\", optarg);"
    },
    {
        "line": 277,
        "fullcodeline": "exit(1);"
    },
    {
        "line": 319,
        "fullcodeline": "fprintf(stderr, \"Unknown option -%c\\n\", optopt);"
    },
    {
        "line": 326,
        "fullcodeline": "fprintf(stderr, \"Missing parameter for option -%c\\n\", optopt);"
    },
    {
        "line": 157,
        "fullcodeline": "__set_bit(LOG_DETAIL_BIT, &debug);"
    },
    {
        "line": 172,
        "fullcodeline": "reopen_log = true;"
    },
    {
        "line": 179,
        "fullcodeline": "log_file_name = \"/tmp/keepalived.log\";"
    },
    {
        "line": 193,
        "fullcodeline": "if (fd == -1) {"
    },
    {
        "line": 321,
        "fullcodeline": "fprintf(stderr, \"Unknown option %s\\n\", argv[curind]);"
    },
    {
        "line": 328,
        "fullcodeline": "fprintf(stderr, \"Missing parameter for option --%s\\n\", long_options[longindex].name);"
    },
    {
        "line": 194,
        "fullcodeline": "fprintf(stderr, \"Unable to open config-test log file %s\\n\", optarg);"
    },
    {
        "line": 195,
        "fullcodeline": "exit(EXIT_FAILURE);"
    }
]