[
    {
        "line": 3,
        "fullcodeline": "bool report_stopped = true;"
    },
    {
        "line": 9,
        "fullcodeline": "set_time_now();"
    },
    {
        "line": 12,
        "fullcodeline": "save_cmd_line_options(argc, argv);"
    },
    {
        "line": 15,
        "fullcodeline": "debug = 0;"
    },
    {
        "line": 19,
        "fullcodeline": "prog_type = PROG_TYPE_PARENT;"
    },
    {
        "line": 34,
        "fullcodeline": "openlog(PACKAGE_NAME, LOG_PID, log_facility);"
    },
    {
        "line": 86,
        "fullcodeline": "log_message(LOG_INFO, \"Starting %s\", version_string);"
    },
    {
        "line": 90,
        "fullcodeline": "core_dump_init();"
    },
    {
        "line": 111,
        "fullcodeline": "log_command_line(0);"
    },
    {
        "line": 128,
        "fullcodeline": "global_data = alloc_global_data();"
    },
    {
        "line": 130,
        "fullcodeline": "read_config_file();"
    },
    {
        "line": 132,
        "fullcodeline": "init_global_data(global_data, NULL);"
    },
    {
        "line": 172,
        "fullcodeline": "set_child_finder_name(find_keepalived_child_name);"
    },
    {
        "line": 261,
        "fullcodeline": "umask(0);"
    },
    {
        "line": 278,
        "fullcodeline": "master = thread_make_master();"
    },
    {
        "line": 281,
        "fullcodeline": "signal_init();"
    },
    {
        "line": 287,
        "fullcodeline": "initialise_debug_options();"
    },
    {
        "line": 294,
        "fullcodeline": "launch_thread_scheduler(master);"
    },
    {
        "line": 297,
        "fullcodeline": "stop_keepalived();"
    },
    {
        "line": 328,
        "fullcodeline": "free_parent_mallocs_startup(false);"
    },
    {
        "line": 329,
        "fullcodeline": "free_parent_mallocs_exit();"
    },
    {
        "line": 330,
        "fullcodeline": "free_global_data(global_data);"
    },
    {
        "line": 332,
        "fullcodeline": "closelog();"
    },
    {
        "line": 335,
        "fullcodeline": "FREE_PTR(syslog_ident);"
    },
    {
        "line": 340,
        "fullcodeline": "close_std_fd();"
    },
    {
        "line": 342,
        "fullcodeline": "exit(KEEPALIVED_EXIT_OK);"
    },
    {
        "line": 41,
        "fullcodeline": "if (uname(&uname_buf))"
    },
    {
        "line": 74,
        "fullcodeline": "if (parse_cmdline(argc, argv)) {"
    },
    {
        "line": 80,
        "fullcodeline": "if (__test_bit(LOG_CONSOLE_BIT, &debug))"
    },
    {
        "line": 121,
        "fullcodeline": "if (!check_conf_file(conf_file)) {"
    },
    {
        "line": 145,
        "fullcodeline": "if (!__test_bit(CONFIG_TEST_BIT, &debug) &&"
    },
    {
        "line": 190,
        "fullcodeline": "if (!__test_bit(CONFIG_TEST_BIT, &debug)) {"
    },
    {
        "line": 251,
        "fullcodeline": "if (!__test_bit(DONT_FORK_BIT, &debug) &&"
    },
    {
        "line": 267,
        "fullcodeline": "if (__test_bit(CONFIG_TEST_BIT, &debug)) {"
    },
    {
        "line": 274,
        "fullcodeline": "if (!pidfile_write(main_pidfile, getpid()))"
    },
    {
        "line": 284,
        "fullcodeline": "if (!start_keepalived())"
    },
    {
        "line": 42,
        "fullcodeline": "log_message(LOG_INFO, \"Unable to get uname() information - error %d\", errno);"
    },
    {
        "line": 81,
        "fullcodeline": "enable_console_log();"
    },
    {
        "line": 159,
        "fullcodeline": "use_pid_dir = true;"
    },
    {
        "line": 161,
        "fullcodeline": "open_log_file(log_file_name,"
    },
    {
        "line": 174,
        "fullcodeline": "if (!__test_bit(CONFIG_TEST_BIT, &debug)) {"
    },
    {
        "line": 252,
        "fullcodeline": "xdaemon(false, false, true) > 0) {"
    },
    {
        "line": 254,
        "fullcodeline": "FREE_PTR(config_id);"
    },
    {
        "line": 255,
        "fullcodeline": "FREE_PTR(orig_core_dump_pattern);"
    },
    {
        "line": 268,
        "fullcodeline": "validate_config();"
    },
    {
        "line": 270,
        "fullcodeline": "config_test_exit();"
    },
    {
        "line": 285,
        "fullcodeline": "log_message(LOG_INFO, \"Warning - keepalived has no configuration to run\");"
    },
    {
        "line": 312,
        "fullcodeline": "log_message(LOG_INFO, \"Stopped %s\", version_string);"
    },
    {
        "line": 322,
        "fullcodeline": "remove_pid_dir();"
    },
    {
        "line": 326,
        "fullcodeline": "update_core_dump_pattern(orig_core_dump_pattern);"
    },
    {
        "line": 44,
        "fullcodeline": "os_major = (unsigned)strtoul(uname_buf.release, &end, 10);"
    },
    {
        "line": 76,
        "fullcodeline": "if (!__test_bit(NO_SYSLOG_BIT, &debug))"
    },
    {
        "line": 93,
        "fullcodeline": "if (KERNEL_VERSION(os_major, os_minor, os_release) < LINUX_VERSION_CODE) {"
    },
    {
        "line": 122,
        "fullcodeline": "if (__test_bit(CONFIG_TEST_BIT, &debug))"
    },
    {
        "line": 151,
        "fullcodeline": "if ((syslog_ident = make_syslog_ident(PACKAGE_NAME))) {"
    },
    {
        "line": 243,
        "fullcodeline": "if (keepalived_running(daemon_mode)) {"
    },
    {
        "line": 45,
        "fullcodeline": "if (*end != '.')"
    },
    {
        "line": 58,
        "fullcodeline": "if (!os_major)"
    },
    {
        "line": 62,
        "fullcodeline": "if (!config_id) {"
    },
    {
        "line": 77,
        "fullcodeline": "openlog(PACKAGE_NAME, LOG_PID | ((__test_bit(LOG_CONSOLE_BIT, &debug)) ? LOG_CONS : 0) , log_facility);"
    },
    {
        "line": 95,
        "fullcodeline": "log_message(LOG_INFO, \"WARNING - keepalived was build for newer Linux %d.%d.%d, running on %s %s %s\","
    },
    {
        "line": 123,
        "fullcodeline": "config_test_exit();"
    },
    {
        "line": 152,
        "fullcodeline": "log_message(LOG_INFO, \"Changing syslog ident to %s\", syslog_ident);"
    },
    {
        "line": 154,
        "fullcodeline": "openlog(syslog_ident, LOG_PID | ((__test_bit(LOG_CONSOLE_BIT, &debug)) ? LOG_CONS : 0), log_facility);"
    },
    {
        "line": 177,
        "fullcodeline": "create_pid_dir();"
    },
    {
        "line": 210,
        "fullcodeline": "main_pidfile = KEEPALIVED_PID_DIR KEEPALIVED_PID_FILE PID_EXTENSION;"
    },
    {
        "line": 244,
        "fullcodeline": "log_message(LOG_INFO, \"daemon is already running\");"
    },
    {
        "line": 245,
        "fullcodeline": "report_stopped = false;"
    },
    {
        "line": 46,
        "fullcodeline": "os_major = 0;"
    },
    {
        "line": 59,
        "fullcodeline": "log_message(LOG_INFO, \"Unable to parse kernel version %s\", uname_buf.release);"
    },
    {
        "line": 63,
        "fullcodeline": "end = strchrnul(uname_buf.nodename, '.');"
    },
    {
        "line": 64,
        "fullcodeline": "config_id = MALLOC((size_t)(end - uname_buf.nodename) + 1);"
    },
    {
        "line": 65,
        "fullcodeline": "strncpy(config_id, uname_buf.nodename, (size_t)(end - uname_buf.nodename));"
    },
    {
        "line": 66,
        "fullcodeline": "config_id[end - uname_buf.nodename] = '\\0';"
    },
    {
        "line": 96,
        "fullcodeline": "(LINUX_VERSION_CODE >> 16) & 0xff,"
    },
    {
        "line": 97,
        "fullcodeline": "(LINUX_VERSION_CODE >>  8) & 0xff,"
    },
    {
        "line": 98,
        "fullcodeline": "(LINUX_VERSION_CODE      ) & 0xff,"
    },
    {
        "line": 102,
        "fullcodeline": "log_message(LOG_INFO, \"Running on %s %s %s (built for Linux %d.%d.%d)\","
    },
    {
        "line": 157,
        "fullcodeline": "log_message(LOG_INFO, \"Unable to change syslog ident\");"
    },
    {
        "line": 227,
        "fullcodeline": "main_pidfile = PID_DIR KEEPALIVED_PID_FILE PID_EXTENSION;"
    },
    {
        "line": 48,
        "fullcodeline": "os_minor = (unsigned)strtoul(end + 1, &end, 10);"
    },
    {
        "line": 104,
        "fullcodeline": "(LINUX_VERSION_CODE >> 16) & 0xff,"
    },
    {
        "line": 105,
        "fullcodeline": "(LINUX_VERSION_CODE >>  8) & 0xff,"
    },
    {
        "line": 106,
        "fullcodeline": "(LINUX_VERSION_CODE      ) & 0xff);"
    },
    {
        "line": 193,
        "fullcodeline": "free_main_pidfile = true;"
    },
    {
        "line": 49,
        "fullcodeline": "if (*end != '.')"
    },
    {
        "line": 50,
        "fullcodeline": "os_major = 0;"
    },
    {
        "line": 52,
        "fullcodeline": "if (!isdigit(end[1]))"
    },
    {
        "line": 53,
        "fullcodeline": "os_major = 0;"
    },
    {
        "line": 55,
        "fullcodeline": "os_release = (unsigned)strtoul(end + 1, &end, 10);"
    }
]