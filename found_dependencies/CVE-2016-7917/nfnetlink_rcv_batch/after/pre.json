[
    {
        "line": 4,
        "fullcodeline": "struct sk_buff *oskb = skb;"
    },
    {
        "line": 5,
        "fullcodeline": "struct net *net = sock_net(skb->sk);"
    },
    {
        "line": 15,
        "fullcodeline": "status = 0;"
    },
    {
        "line": 17,
        "fullcodeline": "skb = netlink_skb_clone(oskb, GFP_KERNEL);"
    },
    {
        "line": 21,
        "fullcodeline": "nfnl_lock(subsys_id);"
    },
    {
        "line": 22,
        "fullcodeline": "ss = nfnl_dereference_protected(subsys_id);"
    },
    {
        "line": 12,
        "fullcodeline": "if (subsys_id >= NFNL_SUBSYS_COUNT)"
    },
    {
        "line": 18,
        "fullcodeline": "if (!skb)"
    },
    {
        "line": 23,
        "fullcodeline": "if (!ss) {"
    },
    {
        "line": 44,
        "fullcodeline": "while (skb->len >= nlmsg_total_size(0)) {"
    },
    {
        "line": 148,
        "fullcodeline": "if (status & NFNL_BATCH_REPLAY) {"
    },
    {
        "line": 38,
        "fullcodeline": "if (!ss->commit || !ss->abort) {"
    },
    {
        "line": 47,
        "fullcodeline": "nlh = nlmsg_hdr(skb);"
    },
    {
        "line": 64,
        "fullcodeline": "type = nlh->nlmsg_type;"
    },
    {
        "line": 86,
        "fullcodeline": "nc = nfnetlink_find_client(type, ss);"
    },
    {
        "line": 142,
        "fullcodeline": "msglen = NLMSG_ALIGN(nlh->nlmsg_len);"
    },
    {
        "line": 145,
        "fullcodeline": "skb_pull(skb, msglen);"
    },
    {
        "line": 149,
        "fullcodeline": "ss->abort(net, oskb);"
    },
    {
        "line": 150,
        "fullcodeline": "nfnl_err_reset(&err_list);"
    },
    {
        "line": 151,
        "fullcodeline": "nfnl_unlock(subsys_id);"
    },
    {
        "line": 13,
        "fullcodeline": "return netlink_ack(skb, nlh, -EINVAL);"
    },
    {
        "line": 19,
        "fullcodeline": "return netlink_ack(oskb, nlh, -ENOMEM);"
    },
    {
        "line": 40,
        "fullcodeline": "netlink_ack(oskb, nlh, -EOPNOTSUPP);"
    },
    {
        "line": 41,
        "fullcodeline": "return kfree_skb(skb);"
    },
    {
        "line": 65,
        "fullcodeline": "if (type == NFNL_MSG_BATCH_BEGIN) {"
    },
    {
        "line": 81,
        "fullcodeline": "if (NFNL_SUBSYS_ID(type) != subsys_id) {"
    },
    {
        "line": 93,
        "fullcodeline": "int min_len = nlmsg_total_size(sizeof(struct nfgenmsg));"
    },
    {
        "line": 95,
        "fullcodeline": "struct nlattr *cda[ss->cb[cb_id].attr_count + 1];"
    },
    {
        "line": 96,
        "fullcodeline": "struct nlattr *attr = (void *)nlh + min_len;"
    },
    {
        "line": 97,
        "fullcodeline": "int attrlen = nlh->nlmsg_len - min_len;"
    },
    {
        "line": 99,
        "fullcodeline": "err = nla_parse(cda, ss->cb[cb_id].attr_count,"
    },
    {
        "line": 119,
        "fullcodeline": "if (nlh->nlmsg_flags & NLM_F_ACK || err) {"
    },
    {
        "line": 143,
        "fullcodeline": "if (msglen > skb->len)"
    },
    {
        "line": 33,
        "fullcodeline": "netlink_ack(oskb, nlh, -EOPNOTSUPP);"
    },
    {
        "line": 34,
        "fullcodeline": "return kfree_skb(skb);"
    },
    {
        "line": 50,
        "fullcodeline": "if (nlh->nlmsg_len < NLMSG_HDRLEN ||"
    },
    {
        "line": 52,
        "fullcodeline": "nlmsg_len(nlh) < sizeof(struct nfgenmsg)) {"
    },
    {
        "line": 53,
        "fullcodeline": "nfnl_err_reset(&err_list);"
    },
    {
        "line": 54,
        "fullcodeline": "status |= NFNL_BATCH_FAILURE;"
    },
    {
        "line": 59,
        "fullcodeline": "if (!(nlh->nlmsg_flags & NLM_F_REQUEST)) {"
    },
    {
        "line": 60,
        "fullcodeline": "err = -EINVAL;"
    },
    {
        "line": 67,
        "fullcodeline": "nfnl_err_reset(&err_list);"
    },
    {
        "line": 68,
        "fullcodeline": "status |= NFNL_BATCH_FAILURE;"
    },
    {
        "line": 82,
        "fullcodeline": "err = -EINVAL;"
    },
    {
        "line": 88,
        "fullcodeline": "err = -EINVAL;"
    },
    {
        "line": 94,
        "fullcodeline": "u_int8_t cb_id = NFNL_MSG_TYPE(nlh->nlmsg_type);"
    },
    {
        "line": 101,
        "fullcodeline": "if (err < 0)"
    },
    {
        "line": 113,
        "fullcodeline": "if (err == -EAGAIN) {"
    },
    {
        "line": 144,
        "fullcodeline": "msglen = skb->len;"
    },
    {
        "line": 51,
        "fullcodeline": "skb->len < nlh->nlmsg_len ||"
    },
    {
        "line": 105,
        "fullcodeline": "err = nc->call_batch(net, net->nfnl, skb, nlh,"
    },
    {
        "line": 114,
        "fullcodeline": "status |= NFNL_BATCH_REPLAY;"
    },
    {
        "line": 155,
        "fullcodeline": "ss->commit(net, oskb);"
    },
    {
        "line": 70,
        "fullcodeline": "} else if (type == NFNL_MSG_BATCH_END) {"
    },
    {
        "line": 124,
        "fullcodeline": "if (nfnl_err_add(&err_list, nlh, err) < 0) {"
    },
    {
        "line": 129,
        "fullcodeline": "nfnl_err_reset(&err_list);"
    },
    {
        "line": 130,
        "fullcodeline": "netlink_ack(oskb, nlmsg_hdr(oskb), -ENOMEM);"
    },
    {
        "line": 131,
        "fullcodeline": "status |= NFNL_BATCH_FAILURE;"
    },
    {
        "line": 139,
        "fullcodeline": "status |= NFNL_BATCH_FAILURE;"
    },
    {
        "line": 157,
        "fullcodeline": "ss->abort(net, oskb);"
    },
    {
        "line": 71,
        "fullcodeline": "status |= NFNL_BATCH_DONE;"
    },
    {
        "line": 73,
        "fullcodeline": "} else if (type < NLMSG_MIN_TYPE) {"
    },
    {
        "line": 74,
        "fullcodeline": "err = -EINVAL;"
    }
]