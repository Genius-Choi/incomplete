[
    {
        "line": 7,
        "fullcodeline": "CALLBACK_ARGS* callback_args = (CALLBACK_ARGS*) args;"
    },
    {
        "line": 9,
        "fullcodeline": "YR_STRING* string = callback_args->string;"
    },
    {
        "line": 12,
        "fullcodeline": "int result = ERROR_SUCCESS;"
    },
    {
        "line": 13,
        "fullcodeline": "int tidx = callback_args->context->tidx;"
    },
    {
        "line": 15,
        "fullcodeline": "size_t match_offset = match_data - callback_args->data;"
    },
    {
        "line": 18,
        "fullcodeline": "match_length += callback_args->forward_matches;"
    },
    {
        "line": 21,
        "fullcodeline": "assert(match_offset + match_length <= callback_args->data_size);"
    },
    {
        "line": 49,
        "fullcodeline": "if (STRING_IS_CHAIN_PART(string))"
    },
    {
        "line": 51,
        "fullcodeline": "result = _yr_scan_verify_chained_string_match("
    },
    {
        "line": 25,
        "fullcodeline": "if (flags & RE_FLAGS_WIDE)"
    },
    {
        "line": 78,
        "fullcodeline": "new_match->data_length = yr_min(match_length, MAX_MATCH_DATA);"
    },
    {
        "line": 61,
        "fullcodeline": "if (string->matches[tidx].count == 0)"
    },
    {
        "line": 73,
        "fullcodeline": "FAIL_ON_ERROR(yr_arena_allocate_memory("
    },
    {
        "line": 80,
        "fullcodeline": "FAIL_ON_ERROR(yr_arena_write_data("
    },
    {
        "line": 86,
        "fullcodeline": "if (result == ERROR_SUCCESS)"
    },
    {
        "line": 27,
        "fullcodeline": "if (match_offset >= 2 &&"
    },
    {
        "line": 75,
        "fullcodeline": "sizeof(YR_MATCH),"
    },
    {
        "line": 88,
        "fullcodeline": "new_match->base = callback_args->data_base;"
    },
    {
        "line": 89,
        "fullcodeline": "new_match->offset = match_offset;"
    },
    {
        "line": 90,
        "fullcodeline": "new_match->match_length = match_length;"
    },
    {
        "line": 91,
        "fullcodeline": "new_match->prev = NULL;"
    },
    {
        "line": 92,
        "fullcodeline": "new_match->next = NULL;"
    },
    {
        "line": 29,
        "fullcodeline": "isalnum(*(match_data - 2)))"
    },
    {
        "line": 32,
        "fullcodeline": "if (match_offset + match_length + 1 < callback_args->data_size &&"
    },
    {
        "line": 34,
        "fullcodeline": "isalnum(*(match_data + match_length)))"
    },
    {
        "line": 66,
        "fullcodeline": "FAIL_ON_ERROR(yr_arena_write_data("
    },
    {
        "line": 94,
        "fullcodeline": "FAIL_ON_ERROR(_yr_scan_add_match_to_list("
    },
    {
        "line": 28,
        "fullcodeline": "*(match_data - 1) == 0 &&"
    },
    {
        "line": 33,
        "fullcodeline": "*(match_data + match_length + 1) == 0 &&"
    },
    {
        "line": 39,
        "fullcodeline": "if (match_offset >= 1 &&"
    },
    {
        "line": 40,
        "fullcodeline": "isalnum(*(match_data - 1)))"
    },
    {
        "line": 43,
        "fullcodeline": "if (match_offset + match_length < callback_args->data_size &&"
    },
    {
        "line": 44,
        "fullcodeline": "isalnum(*(match_data + match_length)))"
    },
    {
        "line": 97,
        "fullcodeline": "STRING_IS_GREEDY_REGEXP(string)));"
    }
]