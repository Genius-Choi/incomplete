[
    {
        "line": 3,
        "fullcodeline": "unsigned char buffer[0x11] = { 0 };"
    },
    {
        "line": 9,
        "fullcodeline": "bool v2_signing_valid = false;"
    },
    {
        "line": 10,
        "fullcodeline": "bool v3_signing_exist = false;"
    },
    {
        "line": 11,
        "fullcodeline": "bool v3_1_signing_exist = false;"
    },
    {
        "line": 14,
        "fullcodeline": "struct file *fp = ksu_filp_open_compat(path, O_RDONLY, 0);"
    },
    {
        "line": 21,
        "fullcodeline": "fp->f_mode |= FMODE_NONOTIFY;"
    },
    {
        "line": 41,
        "fullcodeline": "pos += 12;"
    },
    {
        "line": 43,
        "fullcodeline": "ksu_kernel_read_compat(fp, &size4, 0x4, &pos);"
    },
    {
        "line": 44,
        "fullcodeline": "pos = size4 - 0x18;"
    },
    {
        "line": 46,
        "fullcodeline": "ksu_kernel_read_compat(fp, &size8, 0x8, &pos);"
    },
    {
        "line": 47,
        "fullcodeline": "ksu_kernel_read_compat(fp, buffer, 0x10, &pos);"
    },
    {
        "line": 52,
        "fullcodeline": "pos = size4 - (size8 + 0x8);"
    },
    {
        "line": 53,
        "fullcodeline": "ksu_kernel_read_compat(fp, &size_of_block, 0x8, &pos);"
    },
    {
        "line": 83,
        "fullcodeline": "filp_close(fp, 0);"
    },
    {
        "line": 15,
        "fullcodeline": "if (IS_ERR(fp)) {"
    },
    {
        "line": 24,
        "fullcodeline": "for (i = 0;; ++i) {"
    },
    {
        "line": 48,
        "fullcodeline": "if (strcmp((char *)buffer, \"APK Sig Block 42\")) {"
    },
    {
        "line": 54,
        "fullcodeline": "if (size_of_block != size8) {"
    },
    {
        "line": 85,
        "fullcodeline": "if (v3_signing_exist || v3_1_signing_exist) {"
    },
    {
        "line": 16,
        "fullcodeline": "pr_err(\"open %s error.\\n\", path);"
    },
    {
        "line": 26,
        "fullcodeline": "pos = generic_file_llseek(fp, -i - 2, SEEK_END);"
    },
    {
        "line": 27,
        "fullcodeline": "ksu_kernel_read_compat(fp, &n, 2, &pos);"
    },
    {
        "line": 61,
        "fullcodeline": "ksu_kernel_read_compat(fp, &size8, 0x8,"
    },
    {
        "line": 66,
        "fullcodeline": "ksu_kernel_read_compat(fp, &id, 0x4, &pos); // id"
    },
    {
        "line": 67,
        "fullcodeline": "offset = 4;"
    },
    {
        "line": 68,
        "fullcodeline": "pr_info(\"id: 0x%08x\\n\", id);"
    },
    {
        "line": 79,
        "fullcodeline": "pos += (size8 - offset);"
    },
    {
        "line": 86,
        "fullcodeline": "pr_err(\"Unexpected v3 signature scheme found!\\n\");"
    },
    {
        "line": 17,
        "fullcodeline": "return PTR_ERR(fp);"
    },
    {
        "line": 28,
        "fullcodeline": "if (n == i) {"
    },
    {
        "line": 35,
        "fullcodeline": "if (i == 0xffff) {"
    },
    {
        "line": 63,
        "fullcodeline": "if (size8 == size_of_block) {"
    },
    {
        "line": 69,
        "fullcodeline": "if (id == 0x7109871au) {"
    },
    {
        "line": 29,
        "fullcodeline": "pos -= 22;"
    },
    {
        "line": 30,
        "fullcodeline": "ksu_kernel_read_compat(fp, &size4, 4, &pos);"
    },
    {
        "line": 36,
        "fullcodeline": "pr_info(\"error: cannot find eocd\\n\");"
    },
    {
        "line": 70,
        "fullcodeline": "v2_signing_valid = check_block(fp, &size4, &pos, &offset,"
    },
    {
        "line": 31,
        "fullcodeline": "if ((size4 ^ 0xcafebabeu) == 0xccfbf1eeu) {"
    },
    {
        "line": 72,
        "fullcodeline": "} else if (id == 0xf05368c0u) {"
    },
    {
        "line": 74,
        "fullcodeline": "v3_signing_exist = true;"
    },
    {
        "line": 75,
        "fullcodeline": "} else if (id == 0x1b93ad61u) {"
    },
    {
        "line": 77,
        "fullcodeline": "v3_1_signing_exist = true;"
    }
]