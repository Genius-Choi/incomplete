[
    {
        "line": 3,
        "fullcodeline": "static struct strbuf validated_path = STRBUF_INIT;"
    },
    {
        "line": 4,
        "fullcodeline": "static struct strbuf used_path = STRBUF_INIT;"
    },
    {
        "line": 6,
        "fullcodeline": "if (!path)"
    },
    {
        "line": 9,
        "fullcodeline": "if (!strict) {"
    },
    {
        "line": 71,
        "fullcodeline": "if (is_git_directory(\".\")) {"
    },
    {
        "line": 10,
        "fullcodeline": "static const char *suffix[] = {"
    },
    {
        "line": 14,
        "fullcodeline": "int len = strlen(path);"
    },
    {
        "line": 26,
        "fullcodeline": "strbuf_reset(&used_path);"
    },
    {
        "line": 27,
        "fullcodeline": "strbuf_reset(&validated_path);"
    },
    {
        "line": 28,
        "fullcodeline": "strbuf_add(&used_path, path, len);"
    },
    {
        "line": 29,
        "fullcodeline": "strbuf_add(&validated_path, path, len);"
    },
    {
        "line": 52,
        "fullcodeline": "gitfile = read_gitfile(used_path.buf);"
    },
    {
        "line": 53,
        "fullcodeline": "die_upon_dubious_ownership(gitfile, NULL, used_path.buf);"
    },
    {
        "line": 60,
        "fullcodeline": "path = validated_path.buf;"
    },
    {
        "line": 72,
        "fullcodeline": "set_git_dir(\".\", 0);"
    },
    {
        "line": 73,
        "fullcodeline": "check_repository_format(NULL);"
    },
    {
        "line": 16,
        "fullcodeline": "while ((1 < len) && (path[len-1] == '/'))"
    },
    {
        "line": 17,
        "fullcodeline": "len--;"
    },
    {
        "line": 23,
        "fullcodeline": "if (PATH_MAX <= len)"
    },
    {
        "line": 31,
        "fullcodeline": "if (used_path.buf[0] == '~') {"
    },
    {
        "line": 38,
        "fullcodeline": "for (i = 0; suffix[i]; i++) {"
    },
    {
        "line": 50,
        "fullcodeline": "if (!suffix[i])"
    },
    {
        "line": 58,
        "fullcodeline": "if (chdir(used_path.buf))"
    },
    {
        "line": 63,
        "fullcodeline": "const char *gitfile = read_gitfile(path);"
    },
    {
        "line": 64,
        "fullcodeline": "die_upon_dubious_ownership(gitfile, NULL, path);"
    },
    {
        "line": 32,
        "fullcodeline": "char *newpath = interpolate_path(used_path.buf, 0);"
    },
    {
        "line": 35,
        "fullcodeline": "strbuf_attach(&used_path, newpath, strlen(newpath),"
    },
    {
        "line": 40,
        "fullcodeline": "size_t baselen = used_path.len;"
    },
    {
        "line": 41,
        "fullcodeline": "strbuf_addstr(&used_path, suffix[i]);"
    },
    {
        "line": 48,
        "fullcodeline": "strbuf_setlen(&used_path, baselen);"
    },
    {
        "line": 55,
        "fullcodeline": "strbuf_reset(&used_path);"
    },
    {
        "line": 56,
        "fullcodeline": "strbuf_addstr(&used_path, gitfile);"
    },
    {
        "line": 67,
        "fullcodeline": "if (chdir(path))"
    },
    {
        "line": 33,
        "fullcodeline": "if (!newpath)"
    },
    {
        "line": 36,
        "fullcodeline": "strlen(newpath));"
    },
    {
        "line": 42,
        "fullcodeline": "if (!stat(used_path.buf, &st) &&"
    },
    {
        "line": 66,
        "fullcodeline": "path = gitfile;"
    },
    {
        "line": 43,
        "fullcodeline": "(S_ISREG(st.st_mode) ||"
    },
    {
        "line": 45,
        "fullcodeline": "strbuf_addstr(&validated_path, suffix[i]);"
    },
    {
        "line": 44,
        "fullcodeline": "(S_ISDIR(st.st_mode) && is_git_directory(used_path.buf)))) {"
    }
]