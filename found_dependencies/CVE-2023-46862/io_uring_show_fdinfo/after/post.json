[
    {
        "line": 3,
        "fullcodeline": "struct io_ring_ctx *ctx = f->private_data;"
    },
    {
        "line": 5,
        "fullcodeline": "struct io_rings *r = ctx->rings;"
    },
    {
        "line": 6,
        "fullcodeline": "unsigned int sq_mask = ctx->sq_entries - 1, cq_mask = ctx->cq_entries - 1;"
    },
    {
        "line": 7,
        "fullcodeline": "unsigned int sq_head = READ_ONCE(r->sq.head);"
    },
    {
        "line": 8,
        "fullcodeline": "unsigned int sq_tail = READ_ONCE(r->sq.tail);"
    },
    {
        "line": 9,
        "fullcodeline": "unsigned int cq_head = READ_ONCE(r->cq.head);"
    },
    {
        "line": 10,
        "fullcodeline": "unsigned int cq_tail = READ_ONCE(r->cq.tail);"
    },
    {
        "line": 11,
        "fullcodeline": "unsigned int cq_shift = 0;"
    },
    {
        "line": 12,
        "fullcodeline": "unsigned int sq_shift = 0;"
    },
    {
        "line": 14,
        "fullcodeline": "int sq_pid = -1, sq_cpu = -1;"
    },
    {
        "line": 29,
        "fullcodeline": "seq_printf(m, \"SqMask:\\t0x%x\\n\", sq_mask);"
    },
    {
        "line": 30,
        "fullcodeline": "seq_printf(m, \"SqHead:\\t%u\\n\", sq_head);"
    },
    {
        "line": 31,
        "fullcodeline": "seq_printf(m, \"SqTail:\\t%u\\n\", sq_tail);"
    },
    {
        "line": 32,
        "fullcodeline": "seq_printf(m, \"CachedSqHead:\\t%u\\n\", ctx->cached_sq_head);"
    },
    {
        "line": 33,
        "fullcodeline": "seq_printf(m, \"CqMask:\\t0x%x\\n\", cq_mask);"
    },
    {
        "line": 34,
        "fullcodeline": "seq_printf(m, \"CqHead:\\t%u\\n\", cq_head);"
    },
    {
        "line": 35,
        "fullcodeline": "seq_printf(m, \"CqTail:\\t%u\\n\", cq_tail);"
    },
    {
        "line": 36,
        "fullcodeline": "seq_printf(m, \"CachedCqTail:\\t%u\\n\", ctx->cached_cq_tail);"
    },
    {
        "line": 37,
        "fullcodeline": "seq_printf(m, \"SQEs:\\t%u\\n\", sq_tail - sq_head);"
    },
    {
        "line": 38,
        "fullcodeline": "sq_entries = min(sq_tail - sq_head, ctx->sq_entries);"
    },
    {
        "line": 70,
        "fullcodeline": "seq_printf(m, \"CQEs:\\t%u\\n\", cq_tail - cq_head);"
    },
    {
        "line": 71,
        "fullcodeline": "cq_entries = min(cq_tail - cq_head, ctx->cq_entries);"
    },
    {
        "line": 91,
        "fullcodeline": "has_lock = mutex_trylock(&ctx->uring_lock);"
    },
    {
        "line": 105,
        "fullcodeline": "seq_printf(m, \"SqThread:\\t%d\\n\", sq_pid);"
    },
    {
        "line": 106,
        "fullcodeline": "seq_printf(m, \"SqThreadCpu:\\t%d\\n\", sq_cpu);"
    },
    {
        "line": 107,
        "fullcodeline": "seq_printf(m, \"UserFiles:\\t%u\\n\", ctx->nr_user_files);"
    },
    {
        "line": 116,
        "fullcodeline": "seq_printf(m, \"UserBufs:\\t%u\\n\", ctx->nr_user_bufs);"
    },
    {
        "line": 132,
        "fullcodeline": "seq_puts(m, \"PollList:\\n\");"
    },
    {
        "line": 154,
        "fullcodeline": "seq_puts(m, \"CqOverflowList:\\n\");"
    },
    {
        "line": 155,
        "fullcodeline": "spin_lock(&ctx->completion_lock);"
    },
    {
        "line": 156,
        "fullcodeline": "list_for_each_entry(ocqe, &ctx->cq_overflow_list, list) {"
    },
    {
        "line": 164,
        "fullcodeline": "spin_unlock(&ctx->completion_lock);"
    },
    {
        "line": 18,
        "fullcodeline": "if (ctx->flags & IORING_SETUP_CQE32)"
    },
    {
        "line": 20,
        "fullcodeline": "if (ctx->flags & IORING_SETUP_SQE128)"
    },
    {
        "line": 39,
        "fullcodeline": "for (i = 0; i < sq_entries; i++) {"
    },
    {
        "line": 72,
        "fullcodeline": "for (i = 0; i < cq_entries; i++) {"
    },
    {
        "line": 93,
        "fullcodeline": "if (has_lock && (ctx->flags & IORING_SETUP_SQPOLL)) {"
    },
    {
        "line": 108,
        "fullcodeline": "for (i = 0; has_lock && i < ctx->nr_user_files; i++) {"
    },
    {
        "line": 117,
        "fullcodeline": "for (i = 0; has_lock && i < ctx->nr_user_bufs; i++) {"
    },
    {
        "line": 123,
        "fullcodeline": "if (has_lock && !xa_empty(&ctx->personalities)) {"
    },
    {
        "line": 133,
        "fullcodeline": "for (i = 0; i < (1U << ctx->cancel_table.hash_bits); i++) {"
    },
    {
        "line": 157,
        "fullcodeline": "struct io_uring_cqe *cqe = &ocqe->cqe;"
    },
    {
        "line": 159,
        "fullcodeline": "seq_printf(m, \"  user_data=%llu, res=%d, flags=%x\\n\","
    },
    {
        "line": 19,
        "fullcodeline": "cq_shift = 1;"
    },
    {
        "line": 21,
        "fullcodeline": "sq_shift = 1;"
    },
    {
        "line": 40,
        "fullcodeline": "unsigned int entry = i + sq_head;"
    },
    {
        "line": 46,
        "fullcodeline": "sq_idx = READ_ONCE(ctx->sq_array[entry & sq_mask]);"
    },
    {
        "line": 50,
        "fullcodeline": "seq_printf(m, \"%5u: opcode:%s, fd:%d, flags:%x, off:%llu, \""
    },
    {
        "line": 68,
        "fullcodeline": "seq_printf(m, \"\\n\");"
    },
    {
        "line": 73,
        "fullcodeline": "unsigned int entry = i + cq_head;"
    },
    {
        "line": 76,
        "fullcodeline": "seq_printf(m, \"%5u: user_data:%llu, res:%d, flag:%x\","
    },
    {
        "line": 82,
        "fullcodeline": "seq_printf(m, \"\\n\");"
    },
    {
        "line": 94,
        "fullcodeline": "struct io_sq_data *sq = ctx->sq_data;"
    },
    {
        "line": 109,
        "fullcodeline": "struct file *f = io_file_from_index(&ctx->file_table, i);"
    },
    {
        "line": 119,
        "fullcodeline": "unsigned int len = buf->ubuf_end - buf->ubuf;"
    },
    {
        "line": 121,
        "fullcodeline": "seq_printf(m, \"%5u: 0x%llx/%u\\n\", i, buf->ubuf, len);"
    },
    {
        "line": 127,
        "fullcodeline": "seq_printf(m, \"Personalities:\\n\");"
    },
    {
        "line": 128,
        "fullcodeline": "xa_for_each(&ctx->personalities, index, cred)"
    },
    {
        "line": 129,
        "fullcodeline": "io_uring_show_cred(m, index, cred);"
    },
    {
        "line": 138,
        "fullcodeline": "spin_lock(&hb->lock);"
    },
    {
        "line": 139,
        "fullcodeline": "hlist_for_each_entry(req, &hb->list, hash_node)"
    },
    {
        "line": 140,
        "fullcodeline": "seq_printf(m, \"  op=%d, task_works=%d\\n\", req->opcode,"
    },
    {
        "line": 142,
        "fullcodeline": "spin_unlock(&hb->lock);"
    },
    {
        "line": 146,
        "fullcodeline": "hlist_for_each_entry(req, &hbl->list, hash_node)"
    },
    {
        "line": 147,
        "fullcodeline": "seq_printf(m, \"  op=%d, task_works=%d\\n\", req->opcode,"
    },
    {
        "line": 152,
        "fullcodeline": "mutex_unlock(&ctx->uring_lock);"
    },
    {
        "line": 44,
        "fullcodeline": "if (ctx->flags & IORING_SETUP_NO_SQARRAY)"
    },
    {
        "line": 47,
        "fullcodeline": "if (sq_idx > sq_mask)"
    },
    {
        "line": 53,
        "fullcodeline": "sq_idx, io_uring_get_opcode(sqe->opcode), sqe->fd,"
    },
    {
        "line": 54,
        "fullcodeline": "sqe->flags, (unsigned long long) sqe->off,"
    },
    {
        "line": 55,
        "fullcodeline": "(unsigned long long) sqe->addr, sqe->rw_flags,"
    },
    {
        "line": 77,
        "fullcodeline": "entry & cq_mask, cqe->user_data, cqe->res,"
    },
    {
        "line": 96,
        "fullcodeline": "if (mutex_trylock(&sq->lock)) {"
    },
    {
        "line": 141,
        "fullcodeline": "task_work_pending(req->task));"
    },
    {
        "line": 144,
        "fullcodeline": "if (!has_lock)"
    },
    {
        "line": 148,
        "fullcodeline": "task_work_pending(req->task));"
    },
    {
        "line": 58,
        "fullcodeline": "u64 *sqeb = (void *) (sqe + 1);"
    },
    {
        "line": 80,
        "fullcodeline": "seq_printf(m, \", extra1:%llu, extra2:%llu\\n\","
    },
    {
        "line": 101,
        "fullcodeline": "mutex_unlock(&sq->lock);"
    },
    {
        "line": 112,
        "fullcodeline": "seq_printf(m, \"%5u: %s\\n\", i, file_dentry(f)->d_iname);"
    },
    {
        "line": 49,
        "fullcodeline": "sqe = &ctx->sq_sqes[sq_idx << sq_shift];"
    },
    {
        "line": 62,
        "fullcodeline": "for (j = 0; j < size; j++) {"
    },
    {
        "line": 74,
        "fullcodeline": "struct io_uring_cqe *cqe = &r->cqes[(entry & cq_mask) << cq_shift];"
    },
    {
        "line": 114,
        "fullcodeline": "seq_printf(m, \"%5u: <none>\\n\", i);"
    },
    {
        "line": 63,
        "fullcodeline": "seq_printf(m, \", e%d:0x%llx\", j,"
    },
    {
        "line": 65,
        "fullcodeline": "sqeb++;"
    },
    {
        "line": 98,
        "fullcodeline": "sq_pid = task_pid_nr(sq->thread);"
    },
    {
        "line": 99,
        "fullcodeline": "sq_cpu = task_cpu(sq->thread);"
    }
]