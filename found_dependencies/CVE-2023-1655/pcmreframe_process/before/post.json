[
    {
        "line": 3,
        "fullcodeline": "GF_PCMReframeCtx *ctx = gf_filter_get_udta(filter);"
    },
    {
        "line": 13,
        "fullcodeline": "pck = gf_filter_pid_get_packet(ctx->ipid);"
    },
    {
        "line": 28,
        "fullcodeline": "data = (char *) gf_filter_pck_get_data(pck, &pck_size);"
    },
    {
        "line": 29,
        "fullcodeline": "byte_offset = gf_filter_pck_get_byte_offset(pck);"
    },
    {
        "line": 125,
        "fullcodeline": "byte_offset+= ctx->wav_hdr_size;"
    },
    {
        "line": 178,
        "fullcodeline": "gf_filter_pid_drop_packet(ctx->ipid);"
    },
    {
        "line": 11,
        "fullcodeline": "if (!ctx->is_playing && ctx->opid) return GF_OK;"
    },
    {
        "line": 14,
        "fullcodeline": "if (!pck) {"
    },
    {
        "line": 31,
        "fullcodeline": "if (ctx->probe_wave==1) {"
    },
    {
        "line": 32,
        "fullcodeline": "Bool wav_ok = GF_TRUE;"
    },
    {
        "line": 42,
        "fullcodeline": "u32 type = gf_bs_read_u32(bs);"
    },
    {
        "line": 46,
        "fullcodeline": "gf_bs_read_u32(bs);"
    },
    {
        "line": 47,
        "fullcodeline": "u32 wtype = gf_bs_read_u32(bs);"
    },
    {
        "line": 103,
        "fullcodeline": "ctx->wav_hdr_size = (u32) gf_bs_get_position(bs);"
    },
    {
        "line": 105,
        "fullcodeline": "gf_bs_del(bs);"
    },
    {
        "line": 115,
        "fullcodeline": "ctx->probe_wave = 2;"
    },
    {
        "line": 116,
        "fullcodeline": "pcmreframe_configure_pid(filter, ctx->ipid, GF_FALSE);"
    },
    {
        "line": 121,
        "fullcodeline": "pck_size -= ctx->wav_hdr_size;"
    },
    {
        "line": 122,
        "fullcodeline": "data+=ctx->wav_hdr_size;"
    },
    {
        "line": 123,
        "fullcodeline": "byte_offset = 0;"
    },
    {
        "line": 181,
        "fullcodeline": "gf_free(ctx->probe_data);"
    },
    {
        "line": 182,
        "fullcodeline": "ctx->probe_data = NULL;"
    },
    {
        "line": 183,
        "fullcodeline": "ctx->probe_data_size = 0;"
    },
    {
        "line": 15,
        "fullcodeline": "if (gf_filter_pid_is_eos(ctx->ipid) && !ctx->reverse_play) {"
    },
    {
        "line": 43,
        "fullcodeline": "if (type!=GF_4CC('R', 'I', 'F', 'F')) {"
    },
    {
        "line": 48,
        "fullcodeline": "if (wtype!=GF_4CC('W', 'A', 'V', 'E')) {"
    },
    {
        "line": 51,
        "fullcodeline": "while (gf_bs_available(bs)) {"
    },
    {
        "line": 89,
        "fullcodeline": "if (gf_bs_is_overflow(bs)) {"
    },
    {
        "line": 106,
        "fullcodeline": "if (!wav_ok) {"
    },
    {
        "line": 128,
        "fullcodeline": "if (!ctx->out_pck) {"
    },
    {
        "line": 138,
        "fullcodeline": "if (pck_size + ctx->nb_bytes_in_frame < ctx->frame_size) {"
    },
    {
        "line": 35,
        "fullcodeline": "ctx->probe_data = gf_realloc(ctx->probe_data, ctx->probe_data_size+pck_size);"
    },
    {
        "line": 36,
        "fullcodeline": "memcpy(ctx->probe_data + ctx->probe_data_size, data, pck_size);"
    },
    {
        "line": 37,
        "fullcodeline": "ctx->probe_data_size += pck_size;"
    },
    {
        "line": 38,
        "fullcodeline": "bs = gf_bs_new(ctx->probe_data, ctx->probe_data_size, GF_BITSTREAM_READ);"
    },
    {
        "line": 44,
        "fullcodeline": "wav_ok = GF_FALSE;"
    },
    {
        "line": 49,
        "fullcodeline": "wav_ok = GF_FALSE;"
    },
    {
        "line": 52,
        "fullcodeline": "type = gf_bs_read_u32(bs);"
    },
    {
        "line": 53,
        "fullcodeline": "u32 csize = gf_bs_read_u32_le(bs); //subchunk size"
    },
    {
        "line": 63,
        "fullcodeline": "u16 atype = gf_bs_read_u16_le(bs);"
    },
    {
        "line": 64,
        "fullcodeline": "ctx->ch = gf_bs_read_u16_le(bs);"
    },
    {
        "line": 65,
        "fullcodeline": "ctx->sr = gf_bs_read_u32_le(bs);"
    },
    {
        "line": 66,
        "fullcodeline": "gf_bs_read_u32_le(bs); //byte rate"
    },
    {
        "line": 67,
        "fullcodeline": "gf_bs_read_u16_le(bs); // block align"
    },
    {
        "line": 68,
        "fullcodeline": "u32 bps = gf_bs_read_u16_le(bs);"
    },
    {
        "line": 99,
        "fullcodeline": "GF_LOG(GF_LOG_WARNING, GF_LOG_MEDIA, (\"[PCMReframe] Cannot find wave data chink afetr %d bytes, aborting\\n\", ctx->probe_data_size));"
    },
    {
        "line": 100,
        "fullcodeline": "wav_ok = GF_FALSE;"
    },
    {
        "line": 107,
        "fullcodeline": "gf_filter_pid_drop_packet(ctx->ipid);"
    },
    {
        "line": 110,
        "fullcodeline": "gf_filter_pid_set_discard(ctx->ipid, GF_TRUE);"
    },
    {
        "line": 111,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_MEDIA, (\"[PCMReframe] Invalid or unsupported WAVE header, aborting\\n\", ctx->probe_data_size));"
    },
    {
        "line": 118,
        "fullcodeline": "pck_size = ctx->probe_data_size;"
    },
    {
        "line": 119,
        "fullcodeline": "data = ctx->probe_data;"
    },
    {
        "line": 129,
        "fullcodeline": "ctx->out_pck = gf_filter_pck_new_alloc(ctx->opid, ctx->frame_size, &ctx->out_data);"
    },
    {
        "line": 132,
        "fullcodeline": "gf_filter_pck_set_cts(ctx->out_pck, ctx->cts);"
    },
    {
        "line": 133,
        "fullcodeline": "gf_filter_pck_set_sap(ctx->out_pck, GF_FILTER_SAP_1);"
    },
    {
        "line": 134,
        "fullcodeline": "gf_filter_pck_set_duration(ctx->out_pck, ctx->framelen);"
    },
    {
        "line": 135,
        "fullcodeline": "gf_filter_pck_set_byte_offset(ctx->out_pck, byte_offset);"
    },
    {
        "line": 139,
        "fullcodeline": "memcpy(ctx->out_data + ctx->nb_bytes_in_frame, data, pck_size);"
    },
    {
        "line": 140,
        "fullcodeline": "ctx->nb_bytes_in_frame += pck_size;"
    },
    {
        "line": 141,
        "fullcodeline": "pck_size = 0;"
    },
    {
        "line": 40,
        "fullcodeline": "bs = gf_bs_new(data, pck_size, GF_BITSTREAM_READ);"
    },
    {
        "line": 54,
        "fullcodeline": "if (type==GF_4CC('d', 'a', 't', 'a')) {"
    },
    {
        "line": 58,
        "fullcodeline": "if (type!=GF_4CC('f', 'm', 't', ' ')) {"
    },
    {
        "line": 69,
        "fullcodeline": "if (atype==3) {"
    },
    {
        "line": 90,
        "fullcodeline": "if (!ctx->probe_data) {"
    },
    {
        "line": 95,
        "fullcodeline": "if (ctx->probe_data_size<=10000) {"
    },
    {
        "line": 130,
        "fullcodeline": "if (!ctx->out_pck) return GF_OUT_OF_MEM;"
    },
    {
        "line": 143,
        "fullcodeline": "u32 remain = ctx->frame_size - ctx->nb_bytes_in_frame;"
    },
    {
        "line": 144,
        "fullcodeline": "memcpy(ctx->out_data + ctx->nb_bytes_in_frame, data, remain);"
    },
    {
        "line": 145,
        "fullcodeline": "ctx->nb_bytes_in_frame = ctx->frame_size;"
    },
    {
        "line": 146,
        "fullcodeline": "pcmreframe_flush_packet(ctx);"
    },
    {
        "line": 148,
        "fullcodeline": "pck_size -= remain;"
    },
    {
        "line": 149,
        "fullcodeline": "data += remain;"
    },
    {
        "line": 150,
        "fullcodeline": "byte_offset += remain;"
    },
    {
        "line": 151,
        "fullcodeline": "ctx->out_pck = NULL;"
    },
    {
        "line": 152,
        "fullcodeline": "ctx->nb_bytes_in_frame = 0;"
    },
    {
        "line": 175,
        "fullcodeline": "ctx->cts += ctx->framelen;"
    },
    {
        "line": 17,
        "fullcodeline": "gf_filter_pck_truncate(ctx->out_pck, ctx->nb_bytes_in_frame);"
    },
    {
        "line": 18,
        "fullcodeline": "gf_filter_pck_set_duration(ctx->out_pck, ctx->nb_bytes_in_frame/ctx->Bps/ctx->ch);"
    },
    {
        "line": 19,
        "fullcodeline": "pcmreframe_flush_packet(ctx);"
    },
    {
        "line": 22,
        "fullcodeline": "gf_filter_pid_set_eos(ctx->opid);"
    },
    {
        "line": 59,
        "fullcodeline": "gf_bs_skip_bytes(bs, csize);"
    },
    {
        "line": 91,
        "fullcodeline": "ctx->probe_data = gf_malloc(pck_size);"
    },
    {
        "line": 92,
        "fullcodeline": "memcpy(ctx->probe_data, data, pck_size);"
    },
    {
        "line": 93,
        "fullcodeline": "ctx->probe_data_size = pck_size;"
    },
    {
        "line": 96,
        "fullcodeline": "gf_filter_pid_drop_packet(ctx->ipid);"
    },
    {
        "line": 109,
        "fullcodeline": "gf_filter_pid_set_eos(ctx->opid);"
    },
    {
        "line": 70,
        "fullcodeline": "if (bps==32) {"
    },
    {
        "line": 166,
        "fullcodeline": "ctx->cts -= ctx->framelen;"
    },
    {
        "line": 167,
        "fullcodeline": "ctx->filepos -= ctx->frame_size;"
    },
    {
        "line": 168,
        "fullcodeline": "gf_filter_pid_drop_packet(ctx->ipid);"
    },
    {
        "line": 170,
        "fullcodeline": "GF_FEVT_INIT(fevt, GF_FEVT_SOURCE_SEEK, ctx->ipid);"
    },
    {
        "line": 171,
        "fullcodeline": "fevt.seek.start_offset = ctx->filepos + ctx->wav_hdr_size;"
    },
    {
        "line": 172,
        "fullcodeline": "gf_filter_pid_send_event(ctx->ipid, &fevt);"
    },
    {
        "line": 71,
        "fullcodeline": "ctx->safmt = GF_AUDIO_FMT_FLT;"
    },
    {
        "line": 75,
        "fullcodeline": "} else if (atype==1) {"
    },
    {
        "line": 158,
        "fullcodeline": "if (!ctx->cts) {"
    },
    {
        "line": 73,
        "fullcodeline": "wav_ok = GF_FALSE;"
    },
    {
        "line": 161,
        "fullcodeline": "GF_FEVT_INIT(fevt, GF_FEVT_STOP, ctx->ipid);"
    },
    {
        "line": 162,
        "fullcodeline": "gf_filter_pid_send_event(ctx->ipid, &fevt);"
    },
    {
        "line": 163,
        "fullcodeline": "ctx->done = GF_TRUE;"
    },
    {
        "line": 76,
        "fullcodeline": "if (bps==32) {"
    },
    {
        "line": 77,
        "fullcodeline": "ctx->safmt = GF_AUDIO_FMT_S32;"
    },
    {
        "line": 160,
        "fullcodeline": "gf_filter_pid_set_eos(ctx->opid);"
    },
    {
        "line": 78,
        "fullcodeline": "} else if (bps==24) {"
    },
    {
        "line": 79,
        "fullcodeline": "ctx->safmt = GF_AUDIO_FMT_S24;"
    },
    {
        "line": 80,
        "fullcodeline": "} else if (bps==16) {"
    },
    {
        "line": 81,
        "fullcodeline": "ctx->safmt = GF_AUDIO_FMT_S16;"
    },
    {
        "line": 82,
        "fullcodeline": "} else if (bps==8) {"
    },
    {
        "line": 83,
        "fullcodeline": "ctx->safmt = GF_AUDIO_FMT_U8;"
    },
    {
        "line": 85,
        "fullcodeline": "wav_ok = GF_FALSE;"
    }
]