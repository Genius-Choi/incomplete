[
    {
        "line": 2,
        "fullcodeline": "cs_arm64_op op = INSOP64 (n);"
    },
    {
        "line": 10,
        "fullcodeline": "const bool isvessas = op.vas;"
    },
    {
        "line": 4,
        "fullcodeline": "if (op.vector_index != -1) {"
    },
    {
        "line": 12,
        "fullcodeline": "if (isvessas && i != -1) {"
    },
    {
        "line": 5,
        "fullcodeline": "i = op.vector_index;"
    },
    {
        "line": 13,
        "fullcodeline": "int size = vector_size (&op);"
    },
    {
        "line": 14,
        "fullcodeline": "int shift = i * size;"
    },
    {
        "line": 15,
        "fullcodeline": "char *regc = \"l\";"
    },
    {
        "line": 16,
        "fullcodeline": "size_t s = sizeof (bitmask_by_width) / sizeof (*bitmask_by_width);"
    },
    {
        "line": 17,
        "fullcodeline": "size_t index = size > 0? (size - 1) % s: 0;"
    },
    {
        "line": 21,
        "fullcodeline": "ut64 mask = bitmask_by_width[index];"
    },
    {
        "line": 18,
        "fullcodeline": "if (index >= BITMASK_BY_WIDTH_COUNT) {"
    },
    {
        "line": 22,
        "fullcodeline": "if (shift >= 64) {"
    },
    {
        "line": 27,
        "fullcodeline": "if (shift > 0 && shift < 64) {"
    },
    {
        "line": 19,
        "fullcodeline": "index = 0;"
    },
    {
        "line": 23,
        "fullcodeline": "shift -= 64;"
    },
    {
        "line": 24,
        "fullcodeline": "regc = \"h\";"
    },
    {
        "line": 36,
        "fullcodeline": "r_strbuf_appendf (sb, \"%s\", REG64 (n));"
    },
    {
        "line": 31,
        "fullcodeline": "int dimsize = size % 64;"
    }
]