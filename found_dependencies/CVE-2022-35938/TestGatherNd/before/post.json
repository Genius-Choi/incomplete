[
    {
        "line": 5,
        "fullcodeline": "TfLiteIntArray* pdims = IntArrayFromInts(param_dims);"
    },
    {
        "line": 6,
        "fullcodeline": "TfLiteIntArray* idims = IntArrayFromInts(index_dims);"
    },
    {
        "line": 7,
        "fullcodeline": "TfLiteIntArray* odims = IntArrayFromInts(output_dims);"
    },
    {
        "line": 9,
        "fullcodeline": "constexpr int inputs_size = 2;"
    },
    {
        "line": 10,
        "fullcodeline": "constexpr int outputs_size = 1;"
    },
    {
        "line": 11,
        "fullcodeline": "constexpr int tensors_size = inputs_size + outputs_size;"
    },
    {
        "line": 12,
        "fullcodeline": "TfLiteTensor tensors[tensors_size] = {"
    },
    {
        "line": 17,
        "fullcodeline": "int inputs_array_data[] = {2, 0, 1};"
    },
    {
        "line": 18,
        "fullcodeline": "TfLiteIntArray* inputs_array = IntArrayFromInts(inputs_array_data);"
    },
    {
        "line": 19,
        "fullcodeline": "int outputs_array_data[] = {1, 2};"
    },
    {
        "line": 20,
        "fullcodeline": "TfLiteIntArray* outputs_array = IntArrayFromInts(outputs_array_data);"
    },
    {
        "line": 22,
        "fullcodeline": "const TfLiteRegistration registration = Register_GATHER_ND();"
    },
    {
        "line": 23,
        "fullcodeline": "micro::KernelRunner runner(registration, tensors, tensors_size, inputs_array,"
    },
    {
        "line": 25,
        "fullcodeline": "TF_LITE_MICRO_EXPECT_EQ(kTfLiteOk, runner.InitAndPrepare());"
    },
    {
        "line": 26,
        "fullcodeline": "TF_LITE_MICRO_EXPECT_EQ(kTfLiteOk, runner.Invoke());"
    },
    {
        "line": 29,
        "fullcodeline": "TfLiteTensor* actual_output_tensor = &tensors[2];"
    },
    {
        "line": 30,
        "fullcodeline": "TfLiteIntArray* actual_output_dims = actual_output_tensor->dims;"
    },
    {
        "line": 31,
        "fullcodeline": "const int output_size = ElementCount(*actual_output_dims);"
    },
    {
        "line": 32,
        "fullcodeline": "for (int i = 0; i < output_size; ++i) {"
    },
    {
        "line": 13,
        "fullcodeline": "CreateTensor(param_data, pdims),"
    },
    {
        "line": 14,
        "fullcodeline": "CreateTensor(index_data, idims),"
    },
    {
        "line": 15,
        "fullcodeline": "CreateTensor(output_data, odims),"
    },
    {
        "line": 33,
        "fullcodeline": "TF_LITE_MICRO_EXPECT_EQ(expected_output_data[i], output_data[i]);"
    }
]