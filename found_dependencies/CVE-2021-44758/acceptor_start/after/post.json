[
    {
        "line": 20,
        "fullcodeline": "gss_buffer_t mech_input_token = GSS_C_NO_BUFFER;"
    },
    {
        "line": 23,
        "fullcodeline": "gss_OID preferred_mech_type = GSS_C_NO_OID;"
    },
    {
        "line": 25,
        "fullcodeline": "int get_mic = 0;"
    },
    {
        "line": 26,
        "fullcodeline": "int first_ok = 0;"
    },
    {
        "line": 28,
        "fullcodeline": "mech_output_token.value = NULL;"
    },
    {
        "line": 29,
        "fullcodeline": "mech_output_token.length = 0;"
    },
    {
        "line": 30,
        "fullcodeline": "mech_buf.value = NULL;"
    },
    {
        "line": 35,
        "fullcodeline": "ret = _gss_spnego_alloc_sec_context(minor_status, context_handle);"
    },
    {
        "line": 39,
        "fullcodeline": "ctx = (gssspnego_ctx)*context_handle;"
    },
    {
        "line": 45,
        "fullcodeline": "ret = gss_decapsulate_token (input_token_buffer,"
    },
    {
        "line": 51,
        "fullcodeline": "ret = decode_NegotiationToken(data.value, data.length, &nt, &nt_len);"
    },
    {
        "line": 52,
        "fullcodeline": "gss_release_buffer(minor_status, &data);"
    },
    {
        "line": 69,
        "fullcodeline": "HEIMDAL_MUTEX_lock(&ctx->ctx_id_mutex);"
    },
    {
        "line": 71,
        "fullcodeline": "ret = copy_MechTypeList(&ni->mechTypes, &ctx->initiator_mech_types);"
    },
    {
        "line": 86,
        "fullcodeline": "ret = select_mech(minor_status,"
    },
    {
        "line": 155,
        "fullcodeline": "ctx->preferred_mech_type = preferred_mech_type;"
    },
    {
        "line": 168,
        "fullcodeline": "ret = send_accept (minor_status,"
    },
    {
        "line": 184,
        "fullcodeline": "free_NegotiationToken(&nt);"
    },
    {
        "line": 212,
        "fullcodeline": "_gss_spnego_internal_delete_sec_context(&junk, context_handle,"
    },
    {
        "line": 32,
        "fullcodeline": "if (input_token_buffer->length == 0)"
    },
    {
        "line": 36,
        "fullcodeline": "if (ret != GSS_S_COMPLETE)"
    },
    {
        "line": 57,
        "fullcodeline": "if (nt.element != choice_NegotiationToken_negTokenInit) {"
    },
    {
        "line": 63,
        "fullcodeline": "if (ni->mechTypes.len < 1) {"
    },
    {
        "line": 91,
        "fullcodeline": "if (ret == 0 && ni->mechToken != NULL) {"
    },
    {
        "line": 139,
        "fullcodeline": "if (!first_ok && ni->mechToken != NULL) {"
    },
    {
        "line": 157,
        "fullcodeline": "if (preferred_mech_type == GSS_C_NO_OID) {"
    },
    {
        "line": 178,
        "fullcodeline": "if (mech_output_token.value != NULL)"
    },
    {
        "line": 180,
        "fullcodeline": "if (mech_buf.value != NULL) {"
    },
    {
        "line": 187,
        "fullcodeline": "if (ret == GSS_S_COMPLETE) {"
    },
    {
        "line": 200,
        "fullcodeline": "if (mech_type != NULL)"
    },
    {
        "line": 202,
        "fullcodeline": "if (ret_flags != NULL)"
    },
    {
        "line": 204,
        "fullcodeline": "if (time_rec != NULL)"
    },
    {
        "line": 207,
        "fullcodeline": "if (ret == GSS_S_COMPLETE || ret == GSS_S_CONTINUE_NEEDED) {"
    },
    {
        "line": 54,
        "fullcodeline": "*minor_status = ret;"
    },
    {
        "line": 58,
        "fullcodeline": "*minor_status = 0;"
    },
    {
        "line": 64,
        "fullcodeline": "free_NegotiationToken(&nt);"
    },
    {
        "line": 65,
        "fullcodeline": "*minor_status = 0;"
    },
    {
        "line": 73,
        "fullcodeline": "HEIMDAL_MUTEX_unlock(&ctx->ctx_id_mutex);"
    },
    {
        "line": 74,
        "fullcodeline": "free_NegotiationToken(&nt);"
    },
    {
        "line": 75,
        "fullcodeline": "*minor_status = ret;"
    },
    {
        "line": 96,
        "fullcodeline": "mech_input_token = &ibuf;"
    },
    {
        "line": 101,
        "fullcodeline": "ret = gss_accept_sec_context(minor_status,"
    },
    {
        "line": 142,
        "fullcodeline": "preferred_mech_type = GSS_C_NO_OID;"
    },
    {
        "line": 158,
        "fullcodeline": "send_reject(minor_status, output_token);"
    },
    {
        "line": 159,
        "fullcodeline": "HEIMDAL_MUTEX_unlock(&ctx->ctx_id_mutex);"
    },
    {
        "line": 160,
        "fullcodeline": "free_NegotiationToken(&nt);"
    },
    {
        "line": 172,
        "fullcodeline": "get_mic ? &mech_buf : NULL,"
    },
    {
        "line": 179,
        "fullcodeline": "gss_release_buffer(&junk, &mech_output_token);"
    },
    {
        "line": 181,
        "fullcodeline": "free(mech_buf.value);"
    },
    {
        "line": 182,
        "fullcodeline": "mech_buf.value = NULL;"
    },
    {
        "line": 201,
        "fullcodeline": "*mech_type = ctx->negotiated_mech_type;"
    },
    {
        "line": 203,
        "fullcodeline": "*ret_flags = ctx->mech_flags;"
    },
    {
        "line": 205,
        "fullcodeline": "*time_rec = ctx->mech_time_rec;"
    },
    {
        "line": 208,
        "fullcodeline": "HEIMDAL_MUTEX_unlock(&ctx->ctx_id_mutex);"
    },
    {
        "line": 33,
        "fullcodeline": "return send_supported_mechs (minor_status, output_token);"
    },
    {
        "line": 98,
        "fullcodeline": "if (ctx->mech_src_name != GSS_C_NO_NAME)"
    },
    {
        "line": 113,
        "fullcodeline": "if (ret == GSS_S_COMPLETE || ret == GSS_S_CONTINUE_NEEDED) {"
    },
    {
        "line": 145,
        "fullcodeline": "for (j = 1; j < ni->mechTypes.len; ++j) {"
    },
    {
        "line": 188,
        "fullcodeline": "if (src_name != NULL && ctx->mech_src_name != NULL) {"
    },
    {
        "line": 99,
        "fullcodeline": "gss_release_name(&junk, &ctx->mech_src_name);"
    },
    {
        "line": 114,
        "fullcodeline": "ctx->preferred_mech_type = preferred_mech_type;"
    },
    {
        "line": 118,
        "fullcodeline": "ret = acceptor_complete(minor_status,"
    },
    {
        "line": 129,
        "fullcodeline": "first_ok = 1;"
    },
    {
        "line": 146,
        "fullcodeline": "ret = select_mech(minor_status,"
    },
    {
        "line": 191,
        "fullcodeline": "name = calloc(1, sizeof(*name));"
    },
    {
        "line": 115,
        "fullcodeline": "if (ret == GSS_S_COMPLETE)"
    },
    {
        "line": 126,
        "fullcodeline": "if (ret != GSS_S_COMPLETE)"
    },
    {
        "line": 131,
        "fullcodeline": "gss_mg_collect_error(preferred_mech_type, ret, *minor_status);"
    },
    {
        "line": 150,
        "fullcodeline": "if (ret == 0)"
    },
    {
        "line": 116,
        "fullcodeline": "ctx->open = 1;"
    },
    {
        "line": 193,
        "fullcodeline": "name->mech = ctx->mech_src_name;"
    },
    {
        "line": 194,
        "fullcodeline": "ctx->mech_src_name = NULL;"
    },
    {
        "line": 195,
        "fullcodeline": "*src_name = (gss_name_t)name;"
    }
]