[
    {
        "line": 5,
        "fullcodeline": "char szLineConv[2048];"
    },
    {
        "line": 8,
        "fullcodeline": "memset(szLine, 0, sizeof(char)*lineSize);"
    },
    {
        "line": 9,
        "fullcodeline": "sOK = gf_fgets(szLine, lineSize, txt_in);"
    },
    {
        "line": 99,
        "fullcodeline": "sptr = (u16 *)szLine;"
    },
    {
        "line": 100,
        "fullcodeline": "i = gf_utf8_wcstombs(szLineConv, 2048, (const unsigned short **) &sptr);"
    },
    {
        "line": 102,
        "fullcodeline": "szLineConv[i] = 0;"
    },
    {
        "line": 103,
        "fullcodeline": "strcpy(szLine, szLineConv);"
    },
    {
        "line": 10,
        "fullcodeline": "if (!sOK) return NULL;"
    },
    {
        "line": 11,
        "fullcodeline": "if (unicode_type<=1) {"
    },
    {
        "line": 86,
        "fullcodeline": "if (unicode_type==2)"
    },
    {
        "line": 101,
        "fullcodeline": "if (i == GF_UTF8_FAIL) i = 0;"
    },
    {
        "line": 105,
        "fullcodeline": "if (unicode_type==3) gf_fgetc(txt_in);"
    },
    {
        "line": 12,
        "fullcodeline": "j=0;"
    },
    {
        "line": 13,
        "fullcodeline": "len = (u32) strlen(szLine);"
    },
    {
        "line": 78,
        "fullcodeline": "szLineConv[j] = 0;"
    },
    {
        "line": 79,
        "fullcodeline": "strcpy(szLine, szLineConv);"
    },
    {
        "line": 89,
        "fullcodeline": "i=0;"
    },
    {
        "line": 14,
        "fullcodeline": "for (i=0; i<len; i++) {"
    },
    {
        "line": 70,
        "fullcodeline": "if ( j >= GF_ARRAY_LENGTH(szLineConv) ) {"
    },
    {
        "line": 74,
        "fullcodeline": "if ( j >= lineSize ) {"
    },
    {
        "line": 65,
        "fullcodeline": "szLineConv[j] = szLine[i];"
    },
    {
        "line": 66,
        "fullcodeline": "j++;"
    },
    {
        "line": 71,
        "fullcodeline": "GF_LOG(GF_LOG_DEBUG, GF_LOG_PARSER, (\"[TXTIn] Line too long to convert to utf8 (len: %d)\\n\", len));"
    },
    {
        "line": 72,
        "fullcodeline": "j = GF_ARRAY_LENGTH(szLineConv) -1 ;"
    },
    {
        "line": 75,
        "fullcodeline": "GF_LOG(GF_LOG_DEBUG, GF_LOG_PARSER, (\"[TXTIn] UT8 converted line too long for buffer (len: %d, buffer: %d)\\n\", j, lineSize));"
    },
    {
        "line": 76,
        "fullcodeline": "j = lineSize-1 ;"
    },
    {
        "line": 93,
        "fullcodeline": "c = szLine[i+1];"
    },
    {
        "line": 94,
        "fullcodeline": "szLine[i+1] = szLine[i];"
    },
    {
        "line": 95,
        "fullcodeline": "szLine[i] = c;"
    },
    {
        "line": 96,
        "fullcodeline": "i+=2;"
    },
    {
        "line": 15,
        "fullcodeline": "if (!unicode_type && (szLine[i] & 0x80)) {"
    },
    {
        "line": 62,
        "fullcodeline": "if (j >= GF_ARRAY_LENGTH(szLineConv))"
    },
    {
        "line": 92,
        "fullcodeline": "if (!szLine[i] && !szLine[i+1]) break;"
    },
    {
        "line": 17,
        "fullcodeline": "if ((szLine[i+1] & 0xc0) != 0x80) {"
    },
    {
        "line": 20,
        "fullcodeline": "szLineConv[j] = 0xc0 | ( (szLine[i] >> 6) & 0x3 );"
    },
    {
        "line": 21,
        "fullcodeline": "j++;"
    },
    {
        "line": 22,
        "fullcodeline": "szLine[i] &= 0xbf;"
    },
    {
        "line": 18,
        "fullcodeline": "if (j >= GF_ARRAY_LENGTH(szLineConv))"
    },
    {
        "line": 25,
        "fullcodeline": "else if ( (szLine[i] & 0xe0) == 0xc0) {"
    },
    {
        "line": 28,
        "fullcodeline": "szLineConv[j] = szLine[i];"
    },
    {
        "line": 29,
        "fullcodeline": "i++;"
    },
    {
        "line": 30,
        "fullcodeline": "j++;"
    },
    {
        "line": 26,
        "fullcodeline": "if (j >= GF_ARRAY_LENGTH(szLineConv))"
    },
    {
        "line": 33,
        "fullcodeline": "else if ( (szLine[i] & 0xf0) == 0xe0) {"
    },
    {
        "line": 36,
        "fullcodeline": "szLineConv[j] = szLine[i];"
    },
    {
        "line": 37,
        "fullcodeline": "i++;"
    },
    {
        "line": 38,
        "fullcodeline": "j++;"
    },
    {
        "line": 39,
        "fullcodeline": "szLineConv[j] = szLine[i];"
    },
    {
        "line": 40,
        "fullcodeline": "i++;"
    },
    {
        "line": 41,
        "fullcodeline": "j++;"
    },
    {
        "line": 34,
        "fullcodeline": "if (j+1 >= GF_ARRAY_LENGTH(szLineConv))"
    },
    {
        "line": 44,
        "fullcodeline": "else if ( (szLine[i] & 0xf8) == 0xf0) {"
    },
    {
        "line": 47,
        "fullcodeline": "szLineConv[j] = szLine[i];"
    },
    {
        "line": 48,
        "fullcodeline": "i++;"
    },
    {
        "line": 49,
        "fullcodeline": "j++;"
    },
    {
        "line": 50,
        "fullcodeline": "szLineConv[j] = szLine[i];"
    },
    {
        "line": 51,
        "fullcodeline": "i++;"
    },
    {
        "line": 52,
        "fullcodeline": "j++;"
    },
    {
        "line": 53,
        "fullcodeline": "szLineConv[j] = szLine[i];"
    },
    {
        "line": 54,
        "fullcodeline": "i++;"
    },
    {
        "line": 55,
        "fullcodeline": "j++;"
    },
    {
        "line": 45,
        "fullcodeline": "if (j+2 >= GF_ARRAY_LENGTH(szLineConv))"
    },
    {
        "line": 57,
        "fullcodeline": "i+=1;"
    }
]