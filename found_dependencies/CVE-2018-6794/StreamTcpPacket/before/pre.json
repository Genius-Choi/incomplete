[
    {
        "line": 4,
        "fullcodeline": "SCEnter();"
    },
    {
        "line": 6,
        "fullcodeline": "DEBUG_ASSERT_FLOW_LOCKED(p->flow);"
    },
    {
        "line": 19,
        "fullcodeline": "TcpSession *ssn = (TcpSession *)p->flow->protoctx;"
    },
    {
        "line": 250,
        "fullcodeline": "SCReturnInt(0);"
    },
    {
        "line": 269,
        "fullcodeline": "SCReturnInt(-1);"
    },
    {
        "line": 11,
        "fullcodeline": "if (unlikely(p->flow->thread_id == 0)) {"
    },
    {
        "line": 22,
        "fullcodeline": "if (ssn != NULL) {"
    },
    {
        "line": 40,
        "fullcodeline": "if ((p->tcph->th_flags & (TH_SYN|TH_ACK)) == (TH_SYN|TH_ACK)) {"
    },
    {
        "line": 45,
        "fullcodeline": "if (p->tcph->th_flags & (TH_RST)) {"
    },
    {
        "line": 50,
        "fullcodeline": "if (!(p->tcph->th_flags & TH_ACK) && TCP_GET_ACK(p) != 0) {"
    },
    {
        "line": 58,
        "fullcodeline": "if (StreamTcpCheckFlowDrops(p) == 1) {"
    },
    {
        "line": 69,
        "fullcodeline": "if (ssn == NULL || ssn->state == TCP_NONE) {"
    },
    {
        "line": 181,
        "fullcodeline": "if (ssn != NULL) {"
    },
    {
        "line": 254,
        "fullcodeline": "while (stt->pseudo_queue.len > 0) {"
    },
    {
        "line": 262,
        "fullcodeline": "if (p->flags & PKT_STREAM_MODIFIED) {"
    },
    {
        "line": 266,
        "fullcodeline": "if (StreamTcpInlineDropInvalid()) {"
    },
    {
        "line": 12,
        "fullcodeline": "p->flow->thread_id = (FlowThreadId)tv->id;"
    },
    {
        "line": 23,
        "fullcodeline": "ssn->tcp_packet_flags |= p->tcph->th_flags;"
    },
    {
        "line": 41,
        "fullcodeline": "StatsIncr(tv, stt->counter_tcp_synack);"
    },
    {
        "line": 46,
        "fullcodeline": "StatsIncr(tv, stt->counter_tcp_rst);"
    },
    {
        "line": 51,
        "fullcodeline": "StreamTcpSetEvent(p, STREAM_PKT_BROKEN_ACK);"
    },
    {
        "line": 59,
        "fullcodeline": "SCLogDebug(\"This flow/stream triggered a drop rule\");"
    },
    {
        "line": 60,
        "fullcodeline": "FlowSetNoPacketInspectionFlag(p->flow);"
    },
    {
        "line": 61,
        "fullcodeline": "DecodeSetNoPacketInspectionFlag(p);"
    },
    {
        "line": 62,
        "fullcodeline": "StreamTcpDisableAppLayer(p->flow);"
    },
    {
        "line": 63,
        "fullcodeline": "PACKET_DROP(p);"
    },
    {
        "line": 65,
        "fullcodeline": "StreamTcpSessionPktFree(p);"
    },
    {
        "line": 66,
        "fullcodeline": "SCReturnInt(0);"
    },
    {
        "line": 255,
        "fullcodeline": "Packet *np = PacketDequeue(&stt->pseudo_queue);"
    },
    {
        "line": 263,
        "fullcodeline": "ReCalculateChecksum(p);"
    },
    {
        "line": 267,
        "fullcodeline": "PACKET_DROP(p);"
    },
    {
        "line": 24,
        "fullcodeline": "if (PKT_IS_TOSERVER(p))"
    },
    {
        "line": 30,
        "fullcodeline": "if (ssn->flags & STREAMTCP_FLAG_ASYNC &&"
    },
    {
        "line": 70,
        "fullcodeline": "if (StreamTcpPacketStateNone(tv, p, stt, ssn, &stt->pseudo_queue) == -1) {"
    },
    {
        "line": 106,
        "fullcodeline": "StreamTcpClearKeepAliveFlag(ssn, p);"
    },
    {
        "line": 182,
        "fullcodeline": "while (stt->pseudo_queue.len > 0) {"
    },
    {
        "line": 204,
        "fullcodeline": "if (p->flags & PKT_STREAM_MODIFIED) {"
    },
    {
        "line": 211,
        "fullcodeline": "if ((ssn->client.flags & STREAMTCP_STREAM_FLAG_DEPTH_REACHED) &&"
    },
    {
        "line": 220,
        "fullcodeline": "if ((ssn->client.flags & STREAMTCP_STREAM_FLAG_DEPTH_REACHED) ||"
    },
    {
        "line": 227,
        "fullcodeline": "if ((PKT_IS_TOSERVER(p) && (ssn->client.flags & STREAMTCP_STREAM_FLAG_NOREASSEMBLY)) ||"
    },
    {
        "line": 233,
        "fullcodeline": "if (ssn->flags & STREAMTCP_FLAG_BYPASS) {"
    },
    {
        "line": 256,
        "fullcodeline": "if (np != NULL) {"
    },
    {
        "line": 25,
        "fullcodeline": "ssn->client.tcp_flags |= p->tcph->th_flags;"
    },
    {
        "line": 32,
        "fullcodeline": "ssn->server.tcp_flags != 0)"
    },
    {
        "line": 34,
        "fullcodeline": "SCLogDebug(\"ssn %p: removing ASYNC flag as we have packets on both sides\", ssn);"
    },
    {
        "line": 35,
        "fullcodeline": "ssn->flags &= ~STREAMTCP_FLAG_ASYNC;"
    },
    {
        "line": 42,
        "fullcodeline": "} else if (p->tcph->th_flags & (TH_SYN)) {"
    },
    {
        "line": 80,
        "fullcodeline": "if (p->flags & PKT_PSEUDO_STREAM_END) {"
    },
    {
        "line": 96,
        "fullcodeline": "if (ssn->flags & STREAMTCP_FLAG_MIDSTREAM_SYNACK)"
    },
    {
        "line": 99,
        "fullcodeline": "if (StreamTcpPacketIsKeepAlive(ssn, p) == 1) {"
    },
    {
        "line": 102,
        "fullcodeline": "if (StreamTcpPacketIsKeepAliveACK(ssn, p) == 1) {"
    },
    {
        "line": 110,
        "fullcodeline": "if (StreamTcpPacketIsFinShutdownAck(ssn, p) == 0)"
    },
    {
        "line": 171,
        "fullcodeline": "if (ssn->state >= TCP_ESTABLISHED) {"
    },
    {
        "line": 183,
        "fullcodeline": "SCLogDebug(\"processing pseudo packet / stream end\");"
    },
    {
        "line": 184,
        "fullcodeline": "Packet *np = PacketDequeue(&stt->pseudo_queue);"
    },
    {
        "line": 200,
        "fullcodeline": "SCLogDebug(\"processing pseudo packet / stream end done\");"
    },
    {
        "line": 205,
        "fullcodeline": "ReCalculateChecksum(p);"
    },
    {
        "line": 212,
        "fullcodeline": "(ssn->server.flags & STREAMTCP_STREAM_FLAG_DEPTH_REACHED))"
    },
    {
        "line": 221,
        "fullcodeline": "(ssn->server.flags & STREAMTCP_STREAM_FLAG_DEPTH_REACHED))"
    },
    {
        "line": 223,
        "fullcodeline": "p->flags |= PKT_STREAM_NOPCAPLOG;"
    },
    {
        "line": 228,
        "fullcodeline": "(PKT_IS_TOCLIENT(p) && (ssn->server.flags & STREAMTCP_STREAM_FLAG_NOREASSEMBLY)))"
    },
    {
        "line": 230,
        "fullcodeline": "p->flags |= PKT_STREAM_NOPCAPLOG;"
    },
    {
        "line": 257,
        "fullcodeline": "PacketEnqueue(pq, np);"
    },
    {
        "line": 31,
        "fullcodeline": "ssn->client.tcp_flags != 0 &&"
    },
    {
        "line": 43,
        "fullcodeline": "StatsIncr(tv, stt->counter_tcp_syn);"
    },
    {
        "line": 97,
        "fullcodeline": "StreamTcpPacketSwitchDir(ssn, p);"
    },
    {
        "line": 103,
        "fullcodeline": "StreamTcpClearKeepAliveFlag(ssn, p);"
    },
    {
        "line": 163,
        "fullcodeline": "SCLogDebug(\"packet received on closed state\");"
    },
    {
        "line": 166,
        "fullcodeline": "SCLogDebug(\"packet received on default state\");"
    },
    {
        "line": 172,
        "fullcodeline": "p->flags |= PKT_STREAM_EST;"
    },
    {
        "line": 185,
        "fullcodeline": "if (np != NULL) {"
    },
    {
        "line": 215,
        "fullcodeline": "if (StreamTcpBypassEnabled()) {"
    },
    {
        "line": 235,
        "fullcodeline": "if (StreamTcpBypassEnabled()) {"
    },
    {
        "line": 26,
        "fullcodeline": "else if (PKT_IS_TOCLIENT(p))"
    },
    {
        "line": 81,
        "fullcodeline": "if (PKT_IS_TOCLIENT(p)) {"
    },
    {
        "line": 111,
        "fullcodeline": "if (StreamTcpPacketIsWindowUpdate(ssn, p) == 0)"
    },
    {
        "line": 117,
        "fullcodeline": "if(StreamTcpPacketStateSynSent(tv, p, stt, ssn, &stt->pseudo_queue)) {"
    },
    {
        "line": 122,
        "fullcodeline": "if(StreamTcpPacketStateSynRecv(tv, p, stt, ssn, &stt->pseudo_queue)) {"
    },
    {
        "line": 127,
        "fullcodeline": "if(StreamTcpPacketStateEstablished(tv, p, stt, ssn, &stt->pseudo_queue)) {"
    },
    {
        "line": 132,
        "fullcodeline": "if(StreamTcpPacketStateFinWait1(tv, p, stt, ssn, &stt->pseudo_queue)) {"
    },
    {
        "line": 137,
        "fullcodeline": "if(StreamTcpPacketStateFinWait2(tv, p, stt, ssn, &stt->pseudo_queue)) {"
    },
    {
        "line": 142,
        "fullcodeline": "if(StreamTcpPacketStateClosing(tv, p, stt, ssn, &stt->pseudo_queue)) {"
    },
    {
        "line": 147,
        "fullcodeline": "if(StreamTcpPacketStateCloseWait(tv, p, stt, ssn, &stt->pseudo_queue)) {"
    },
    {
        "line": 152,
        "fullcodeline": "if(StreamTcpPacketStateLastAck(tv, p, stt, ssn, &stt->pseudo_queue)) {"
    },
    {
        "line": 157,
        "fullcodeline": "if(StreamTcpPacketStateTimeWait(tv, p, stt, ssn, &stt->pseudo_queue)) {"
    },
    {
        "line": 198,
        "fullcodeline": "PacketEnqueue(pq, np);"
    },
    {
        "line": 216,
        "fullcodeline": "PacketBypassCallback(p);"
    },
    {
        "line": 236,
        "fullcodeline": "PacketBypassCallback(p);"
    },
    {
        "line": 240,
        "fullcodeline": "} else if (g_detect_disabled &&"
    },
    {
        "line": 27,
        "fullcodeline": "ssn->server.tcp_flags |= p->tcph->th_flags;"
    },
    {
        "line": 82,
        "fullcodeline": "ssn->client.last_ack = TCP_GET_ACK(p);"
    },
    {
        "line": 83,
        "fullcodeline": "StreamTcpReassembleHandleSegment(tv, stt->ra_ctx, ssn,"
    },
    {
        "line": 187,
        "fullcodeline": "if (PKT_IS_TOSERVER(np)) {"
    },
    {
        "line": 245,
        "fullcodeline": "SCLogDebug(\"bypass as stream is dead and we have no rules\");"
    },
    {
        "line": 246,
        "fullcodeline": "PacketBypassCallback(p);"
    },
    {
        "line": 86,
        "fullcodeline": "ssn->server.last_ack = TCP_GET_ACK(p);"
    },
    {
        "line": 87,
        "fullcodeline": "StreamTcpReassembleHandleSegment(tv, stt->ra_ctx, ssn,"
    },
    {
        "line": 112,
        "fullcodeline": "if (StreamTcpPacketIsBadWindowUpdate(ssn,p))"
    },
    {
        "line": 188,
        "fullcodeline": "SCLogDebug(\"pseudo packet is to server\");"
    },
    {
        "line": 189,
        "fullcodeline": "StreamTcpReassembleHandleSegment(tv, stt->ra_ctx, ssn,"
    },
    {
        "line": 242,
        "fullcodeline": "(ssn->server.flags & STREAMTCP_STREAM_FLAG_NOREASSEMBLY) &&"
    },
    {
        "line": 192,
        "fullcodeline": "SCLogDebug(\"pseudo packet is to client\");"
    },
    {
        "line": 193,
        "fullcodeline": "StreamTcpReassembleHandleSegment(tv, stt->ra_ctx, ssn,"
    },
    {
        "line": 241,
        "fullcodeline": "(ssn->client.flags & STREAMTCP_STREAM_FLAG_NOREASSEMBLY) &&"
    }
]