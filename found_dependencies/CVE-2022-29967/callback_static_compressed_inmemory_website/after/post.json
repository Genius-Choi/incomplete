[
    {
        "line": 2,
        "fullcodeline": "struct _u_compressed_inmemory_website_config * config = (struct _u_compressed_inmemory_website_config *)user_data;"
    },
    {
        "line": 3,
        "fullcodeline": "char ** accept_list = NULL;"
    },
    {
        "line": 4,
        "fullcodeline": "int ret = U_CALLBACK_CONTINUE, compress_mode = U_COMPRESS_NONE, res;"
    },
    {
        "line": 6,
        "fullcodeline": "unsigned char * file_content, * file_content_orig = NULL;"
    },
    {
        "line": 7,
        "fullcodeline": "size_t length, read_length, offset, data_zip_len = 0;"
    },
    {
        "line": 9,
        "fullcodeline": "char * file_requested, * file_path, * url_dup_save, * data_zip = NULL, * real_path = NULL;"
    },
    {
        "line": 15,
        "fullcodeline": "if (request->callback_position > 0) {"
    },
    {
        "line": 18,
        "fullcodeline": "file_requested = o_strdup(request->http_url);"
    },
    {
        "line": 19,
        "fullcodeline": "url_dup_save = file_requested;"
    },
    {
        "line": 21,
        "fullcodeline": "file_requested += o_strlen((config->url_prefix));"
    },
    {
        "line": 194,
        "fullcodeline": "o_free(url_dup_save);"
    },
    {
        "line": 22,
        "fullcodeline": "while (file_requested[0] == '/') {"
    },
    {
        "line": 26,
        "fullcodeline": "if (strchr(file_requested, '#') != NULL) {"
    },
    {
        "line": 30,
        "fullcodeline": "if (strchr(file_requested, '?') != NULL) {"
    },
    {
        "line": 34,
        "fullcodeline": "if (file_requested == NULL || o_strnullempty(file_requested) || 0 == o_strcmp(\"/\", file_requested)) {"
    },
    {
        "line": 39,
        "fullcodeline": "if (!u_map_has_key_case(response->map_header, U_CONTENT_HEADER)) {"
    },
    {
        "line": 23,
        "fullcodeline": "file_requested++;"
    },
    {
        "line": 27,
        "fullcodeline": "*strchr(file_requested, '#') = '\\0';"
    },
    {
        "line": 31,
        "fullcodeline": "*strchr(file_requested, '?') = '\\0';"
    },
    {
        "line": 35,
        "fullcodeline": "o_free(url_dup_save);"
    },
    {
        "line": 36,
        "fullcodeline": "url_dup_save = file_requested = o_strdup(\"index.html\");"
    },
    {
        "line": 40,
        "fullcodeline": "if (split_string(u_map_get_case(request->map_header, U_ACCEPT_HEADER), \",\", &accept_list)) {"
    },
    {
        "line": 192,
        "fullcodeline": "ret = callback_static_file_uncompressed(request, response, user_data);"
    },
    {
        "line": 187,
        "fullcodeline": "free_string_array(accept_list);"
    },
    {
        "line": 41,
        "fullcodeline": "if (config->allow_gzip && string_array_has_trimmed_value((const char **)accept_list, U_ACCEPT_GZIP)) {"
    },
    {
        "line": 47,
        "fullcodeline": "if (compress_mode != U_COMPRESS_NONE) {"
    },
    {
        "line": 189,
        "fullcodeline": "ret = callback_static_file_uncompressed(request, response, user_data);"
    },
    {
        "line": 42,
        "fullcodeline": "compress_mode = U_COMPRESS_GZIP;"
    },
    {
        "line": 48,
        "fullcodeline": "if (compress_mode == U_COMPRESS_GZIP && config->allow_cache_compressed && u_map_has_key(&config->gzip_files, file_requested)) {"
    },
    {
        "line": 185,
        "fullcodeline": "ret = callback_static_file_uncompressed(request, response, user_data);"
    },
    {
        "line": 43,
        "fullcodeline": "} else if (config->allow_deflate && string_array_has_trimmed_value((const char **)accept_list, U_ACCEPT_DEFLATE)) {"
    },
    {
        "line": 49,
        "fullcodeline": "ulfius_set_binary_body_response(response, 200, u_map_get(&config->gzip_files, file_requested), u_map_get_length(&config->gzip_files, file_requested));"
    },
    {
        "line": 50,
        "fullcodeline": "u_map_put(response->map_header, U_CONTENT_HEADER, U_ACCEPT_GZIP);"
    },
    {
        "line": 52,
        "fullcodeline": "content_type = u_map_get_case(&config->mime_types, get_filename_ext(file_requested));"
    },
    {
        "line": 56,
        "fullcodeline": "u_map_put(response->map_header, \"Content-Type\", content_type);"
    },
    {
        "line": 57,
        "fullcodeline": "u_map_copy_into(response->map_header, &config->map_header);"
    },
    {
        "line": 44,
        "fullcodeline": "compress_mode = U_COMPRESS_DEFL;"
    },
    {
        "line": 53,
        "fullcodeline": "if (content_type == NULL) {"
    },
    {
        "line": 54,
        "fullcodeline": "content_type = u_map_get(&config->mime_types, \"*\");"
    },
    {
        "line": 58,
        "fullcodeline": "} else if (compress_mode == U_COMPRESS_DEFL && config->allow_cache_compressed && u_map_has_key(&config->deflate_files, file_requested)) {"
    },
    {
        "line": 59,
        "fullcodeline": "ulfius_set_binary_body_response(response, 200, u_map_get(&config->deflate_files, file_requested), u_map_get_length(&config->deflate_files, file_requested));"
    },
    {
        "line": 60,
        "fullcodeline": "u_map_put(response->map_header, U_CONTENT_HEADER, U_ACCEPT_DEFLATE);"
    },
    {
        "line": 62,
        "fullcodeline": "content_type = u_map_get_case(&config->mime_types, get_filename_ext(file_requested));"
    },
    {
        "line": 66,
        "fullcodeline": "u_map_put(response->map_header, \"Content-Type\", content_type);"
    },
    {
        "line": 67,
        "fullcodeline": "u_map_copy_into(response->map_header, &config->map_header);"
    },
    {
        "line": 63,
        "fullcodeline": "if (content_type == NULL) {"
    },
    {
        "line": 69,
        "fullcodeline": "file_path = msprintf(\"%s/%s\", ((struct _u_compressed_inmemory_website_config *)user_data)->files_path, file_requested);"
    },
    {
        "line": 70,
        "fullcodeline": "real_path = realpath(file_path, NULL);"
    },
    {
        "line": 181,
        "fullcodeline": "o_free(file_path);"
    },
    {
        "line": 182,
        "fullcodeline": "free(real_path); // realpath uses malloc"
    },
    {
        "line": 64,
        "fullcodeline": "content_type = u_map_get(&config->mime_types, \"*\");"
    },
    {
        "line": 71,
        "fullcodeline": "if (0 == o_strncmp(((struct _u_compressed_inmemory_website_config *)user_data)->files_path, real_path, o_strlen(((struct _u_compressed_inmemory_website_config *)user_data)->files_path))) {"
    },
    {
        "line": 72,
        "fullcodeline": "if (!pthread_mutex_lock(&config->lock)) {"
    },
    {
        "line": 179,
        "fullcodeline": "response->status = 403;"
    },
    {
        "line": 73,
        "fullcodeline": "f = fopen (file_path, \"rb\");"
    },
    {
        "line": 173,
        "fullcodeline": "pthread_mutex_unlock(&config->lock);"
    },
    {
        "line": 175,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_ERROR, \"callback_static_compressed_inmemory_website - Error pthread_lock_mutex\");"
    },
    {
        "line": 176,
        "fullcodeline": "ret = U_CALLBACK_ERROR;"
    },
    {
        "line": 75,
        "fullcodeline": "content_type = u_map_get_case(&config->mime_types, get_filename_ext(file_requested));"
    },
    {
        "line": 84,
        "fullcodeline": "u_map_put(response->map_header, \"Content-Type\", content_type);"
    },
    {
        "line": 85,
        "fullcodeline": "u_map_copy_into(response->map_header, &config->map_header);"
    },
    {
        "line": 87,
        "fullcodeline": "fseek (f, 0, SEEK_END);"
    },
    {
        "line": 88,
        "fullcodeline": "offset = length = ftell (f);"
    },
    {
        "line": 89,
        "fullcodeline": "fseek (f, 0, SEEK_SET);"
    },
    {
        "line": 164,
        "fullcodeline": "fclose(f);"
    },
    {
        "line": 76,
        "fullcodeline": "if (content_type == NULL) {"
    },
    {
        "line": 80,
        "fullcodeline": "if (!string_array_has_value((const char **)config->mime_types_compressed, content_type)) {"
    },
    {
        "line": 77,
        "fullcodeline": "content_type = u_map_get(&config->mime_types, \"*\");"
    },
    {
        "line": 78,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_WARNING, \"Static File Server - Unknown mime type for extension %s\", get_filename_ext(file_requested));"
    },
    {
        "line": 81,
        "fullcodeline": "compress_mode = U_COMPRESS_NONE;"
    },
    {
        "line": 162,
        "fullcodeline": "o_free(file_content_orig);"
    },
    {
        "line": 166,
        "fullcodeline": "if (((struct _u_compressed_inmemory_website_config *)user_data)->redirect_on_404 == NULL) {"
    },
    {
        "line": 92,
        "fullcodeline": "if ((file_content_orig = file_content = o_malloc(length)) != NULL && (data_zip = o_malloc((2*length)+20)) != NULL) {"
    },
    {
        "line": 167,
        "fullcodeline": "ret = U_CALLBACK_IGNORE;"
    },
    {
        "line": 93,
        "fullcodeline": "defstream.zalloc = u_zalloc;"
    },
    {
        "line": 94,
        "fullcodeline": "defstream.zfree = u_zfree;"
    },
    {
        "line": 95,
        "fullcodeline": "defstream.opaque = Z_NULL;"
    },
    {
        "line": 96,
        "fullcodeline": "defstream.avail_in = (uInt)length;"
    },
    {
        "line": 97,
        "fullcodeline": "defstream.next_in = (Bytef *)file_content;"
    },
    {
        "line": 156,
        "fullcodeline": "deflateEnd(&defstream);"
    },
    {
        "line": 157,
        "fullcodeline": "o_free(data_zip);"
    },
    {
        "line": 169,
        "fullcodeline": "ulfius_add_header_to_response(response, \"Location\", ((struct _u_compressed_inmemory_website_config *)user_data)->redirect_on_404);"
    },
    {
        "line": 170,
        "fullcodeline": "response->status = 302;"
    },
    {
        "line": 98,
        "fullcodeline": "while ((read_length = fread(file_content, sizeof(char), offset, f))) {"
    },
    {
        "line": 103,
        "fullcodeline": "if (compress_mode == U_COMPRESS_GZIP) {"
    },
    {
        "line": 119,
        "fullcodeline": "if (ret == U_CALLBACK_CONTINUE) {"
    },
    {
        "line": 159,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_ERROR, \"callback_static_compressed_inmemory_website - Error allocating resource for file_content or data_zip\");"
    },
    {
        "line": 160,
        "fullcodeline": "ret = U_CALLBACK_ERROR;"
    },
    {
        "line": 99,
        "fullcodeline": "file_content += read_length;"
    },
    {
        "line": 100,
        "fullcodeline": "offset -= read_length;"
    },
    {
        "line": 104,
        "fullcodeline": "if (deflateInit2(&defstream,"
    },
    {
        "line": 139,
        "fullcodeline": "} while (U_CALLBACK_CONTINUE == ret && defstream.avail_out == 0);"
    },
    {
        "line": 141,
        "fullcodeline": "if (ret == U_CALLBACK_CONTINUE) {"
    },
    {
        "line": 110,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_ERROR, \"callback_static_compressed_inmemory_website - Error deflateInit (gzip)\");"
    },
    {
        "line": 111,
        "fullcodeline": "ret = U_CALLBACK_ERROR;"
    },
    {
        "line": 114,
        "fullcodeline": "if (deflateInit(&defstream, Z_BEST_COMPRESSION) != Z_OK) {"
    },
    {
        "line": 153,
        "fullcodeline": "u_map_put(response->map_header, U_CONTENT_HEADER, compress_mode==U_COMPRESS_GZIP?U_ACCEPT_GZIP:U_ACCEPT_DEFLATE);"
    },
    {
        "line": 107,
        "fullcodeline": "U_GZIP_WINDOW_BITS | U_GZIP_ENCODING,"
    },
    {
        "line": 115,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_ERROR, \"callback_static_compressed_inmemory_website - Error deflateInit (deflate)\");"
    },
    {
        "line": 116,
        "fullcodeline": "ret = U_CALLBACK_ERROR;"
    },
    {
        "line": 121,
        "fullcodeline": "if ((data_zip = o_realloc(data_zip, data_zip_len+_U_W_BLOCK_SIZE)) != NULL) {"
    },
    {
        "line": 142,
        "fullcodeline": "if (compress_mode == U_COMPRESS_GZIP) {"
    },
    {
        "line": 122,
        "fullcodeline": "defstream.avail_out = _U_W_BLOCK_SIZE;"
    },
    {
        "line": 123,
        "fullcodeline": "defstream.next_out = ((Bytef *)data_zip)+data_zip_len;"
    },
    {
        "line": 134,
        "fullcodeline": "data_zip_len += _U_W_BLOCK_SIZE - defstream.avail_out;"
    },
    {
        "line": 146,
        "fullcodeline": "ulfius_set_binary_body_response(response, 200, u_map_get(&config->gzip_files, file_requested), u_map_get_length(&config->gzip_files, file_requested));"
    },
    {
        "line": 124,
        "fullcodeline": "switch ((res = deflate(&defstream, Z_FINISH))) {"
    },
    {
        "line": 136,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_ERROR, \"callback_static_compressed_inmemory_website - Error allocating resources for data_zip\");"
    },
    {
        "line": 137,
        "fullcodeline": "ret = U_CALLBACK_ERROR;"
    },
    {
        "line": 151,
        "fullcodeline": "ulfius_set_binary_body_response(response, 200, u_map_get(&config->deflate_files, file_requested), u_map_get_length(&config->deflate_files, file_requested));"
    },
    {
        "line": 130,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_ERROR, \"callback_static_compressed_inmemory_website - Error deflate %d\", res);"
    },
    {
        "line": 131,
        "fullcodeline": "ret = U_CALLBACK_ERROR;"
    },
    {
        "line": 144,
        "fullcodeline": "u_map_put_binary(&config->gzip_files, file_requested, data_zip, 0, defstream.total_out);"
    },
    {
        "line": 149,
        "fullcodeline": "u_map_put_binary(&config->deflate_files, file_requested, data_zip, 0, defstream.total_out);"
    }
]