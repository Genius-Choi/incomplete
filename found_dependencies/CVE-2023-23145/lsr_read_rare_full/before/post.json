[
    {
        "line": 7,
        "fullcodeline": "GF_LSR_READ_INT(lsr, nb_rare, 1, \"has_rare\");"
    },
    {
        "line": 9,
        "fullcodeline": "GF_LSR_READ_INT(lsr, nb_rare, 6, \"nbOfAttributes\");"
    },
    {
        "line": 8,
        "fullcodeline": "if (!nb_rare) return;"
    },
    {
        "line": 11,
        "fullcodeline": "for (i=0; i<nb_rare; i++) {"
    },
    {
        "line": 12,
        "fullcodeline": "GF_LSR_READ_INT(lsr, field_rare, 6, \"attributeRARE\");"
    },
    {
        "line": 55,
        "fullcodeline": "field_tag = gf_lsr_rare_type_to_attribute(field_rare);"
    },
    {
        "line": 59,
        "fullcodeline": "lsr->last_error = gf_node_get_attribute_by_tag(n, field_tag, GF_TRUE, GF_FALSE, &info);"
    },
    {
        "line": 15,
        "fullcodeline": "if (field_rare==49) {"
    },
    {
        "line": 56,
        "fullcodeline": "if (field_tag==-1) {"
    },
    {
        "line": 60,
        "fullcodeline": "if (!info.far_ptr) lsr->last_error = GF_NOT_SUPPORTED;"
    },
    {
        "line": 65,
        "fullcodeline": "lsr_read_byte_align_string(lsr, info.far_ptr, \"class\");"
    },
    {
        "line": 69,
        "fullcodeline": "((SVG_Number*)info.far_ptr)->value = lsr_read_fixed_clamp(lsr, \"audio-level\");"
    },
    {
        "line": 72,
        "fullcodeline": "lsr_read_paint(lsr, (SVG_Paint *)info.far_ptr, \"color\");"
    },
    {
        "line": 75,
        "fullcodeline": "GF_LSR_READ_INT(lsr, *(SVG_RenderingHint*)info.far_ptr, 2, \"color-rendering\");"
    },
    {
        "line": 78,
        "fullcodeline": "GF_LSR_READ_INT(lsr, *(SVG_Display*)info.far_ptr, 5, \"display\");"
    },
    {
        "line": 81,
        "fullcodeline": "GF_LSR_READ_INT(lsr, *(SVG_DisplayAlign*)info.far_ptr, 3, \"display-align\");"
    },
    {
        "line": 84,
        "fullcodeline": "((SVG_Number*)info.far_ptr)->type = SVG_NUMBER_VALUE;"
    },
    {
        "line": 85,
        "fullcodeline": "((SVG_Number*)info.far_ptr)->value = lsr_read_fixed_clamp(lsr, \"fill-opacity\");"
    },
    {
        "line": 88,
        "fullcodeline": "GF_LSR_READ_INT(lsr, *(SVG_FillRule*)info.far_ptr, 2, \"fill-rule\");"
    },
    {
        "line": 91,
        "fullcodeline": "GF_LSR_READ_INT(lsr, *(SVG_RenderingHint*)info.far_ptr, 2, \"image-rendering\");"
    },
    {
        "line": 94,
        "fullcodeline": "lsr_read_line_increment_type(lsr, info.far_ptr, \"line-increment\");"
    },
    {
        "line": 97,
        "fullcodeline": "GF_LSR_READ_INT(lsr, *(SVG_PointerEvents*)info.far_ptr, 4, \"pointer-events\");"
    },
    {
        "line": 100,
        "fullcodeline": "GF_LSR_READ_INT(lsr, *(SVG_RenderingHint*)info.far_ptr, 3, \"shape-rendering\");"
    },
    {
        "line": 103,
        "fullcodeline": "lsr_read_paint(lsr, info.far_ptr, \"solid-color\");"
    },
    {
        "line": 106,
        "fullcodeline": "((SVG_Number*)info.far_ptr)->type = SVG_NUMBER_VALUE;"
    },
    {
        "line": 107,
        "fullcodeline": "((SVG_Number*)info.far_ptr)->value = lsr_read_fixed_clamp(lsr, \"solid-opacity\");"
    },
    {
        "line": 110,
        "fullcodeline": "lsr_read_paint(lsr, info.far_ptr, \"stop-color\");"
    },
    {
        "line": 113,
        "fullcodeline": "((SVG_Number*)info.far_ptr)->type = SVG_NUMBER_VALUE;"
    },
    {
        "line": 114,
        "fullcodeline": "((SVG_Number*)info.far_ptr)->value = lsr_read_fixed_clamp(lsr, \"stop-opacity\");"
    },
    {
        "line": 141,
        "fullcodeline": "lsr_read_fixed_16_8i(lsr, info.far_ptr, \"dashOffset\");"
    },
    {
        "line": 145,
        "fullcodeline": "GF_LSR_READ_INT(lsr, *(SVG_StrokeLineCap*)info.far_ptr, 2, \"stroke-linecap\");"
    },
    {
        "line": 148,
        "fullcodeline": "GF_LSR_READ_INT(lsr, *(SVG_StrokeLineJoin*)info.far_ptr, 2, \"stroke-linejoin\");"
    },
    {
        "line": 151,
        "fullcodeline": "lsr_read_fixed_16_8i(lsr, info.far_ptr, \"miterLimit\");"
    },
    {
        "line": 154,
        "fullcodeline": "((SVG_Number*)info.far_ptr)->type = SVG_NUMBER_VALUE;"
    },
    {
        "line": 155,
        "fullcodeline": "((SVG_Number*)info.far_ptr)->value = lsr_read_fixed_clamp(lsr, \"stroke-opacity\");"
    },
    {
        "line": 158,
        "fullcodeline": "lsr_read_fixed_16_8i(lsr, info.far_ptr, \"strokeWidth\");"
    },
    {
        "line": 161,
        "fullcodeline": "GF_LSR_READ_INT(lsr, *(SVG_TextAnchor*)info.far_ptr, 2, \"text-achor\");"
    },
    {
        "line": 164,
        "fullcodeline": "GF_LSR_READ_INT(lsr, *(SVG_RenderingHint*)info.far_ptr, 3, \"text-rendering\");"
    },
    {
        "line": 167,
        "fullcodeline": "lsr_read_paint(lsr, info.far_ptr, \"viewport-fill\");"
    },
    {
        "line": 170,
        "fullcodeline": "((SVG_Number*)info.far_ptr)->type = SVG_NUMBER_VALUE;"
    },
    {
        "line": 171,
        "fullcodeline": "((SVG_Number*)info.far_ptr)->value = lsr_read_fixed_clamp(lsr, \"viewport-fill-opacity\");"
    },
    {
        "line": 174,
        "fullcodeline": "GF_LSR_READ_INT(lsr, *(SVG_VectorEffect*)info.far_ptr, 4, \"vector-effect\");"
    },
    {
        "line": 177,
        "fullcodeline": "GF_LSR_READ_INT(lsr, *(SVG_Visibility*)info.far_ptr, 2, \"visibility\");"
    },
    {
        "line": 180,
        "fullcodeline": "lsr_read_byte_align_string_list(lsr, *(GF_List**)info.far_ptr, \"requiredExtensions\", GF_TRUE, GF_FALSE);"
    },
    {
        "line": 183,
        "fullcodeline": "lsr_read_byte_align_string_list(lsr, *(GF_List**)info.far_ptr, \"requiredFormats\", GF_FALSE, GF_FALSE);"
    },
    {
        "line": 196,
        "fullcodeline": "lsr_read_byte_align_string_list(lsr, *(GF_List**)info.far_ptr, \"systemLanguage\", GF_FALSE, GF_FALSE);"
    },
    {
        "line": 199,
        "fullcodeline": "lsr_read_byte_align_string(lsr, &((XMLRI*)info.far_ptr)->string, \"xml:base\");"
    },
    {
        "line": 200,
        "fullcodeline": "((XMLRI*)info.far_ptr)->type = XMLRI_STRING;"
    },
    {
        "line": 203,
        "fullcodeline": "lsr_read_byte_align_string(lsr, info.far_ptr, \"xml:lang\");"
    },
    {
        "line": 206,
        "fullcodeline": "GF_LSR_READ_INT(lsr, *(XML_Space*)info.far_ptr, 1, \"xml:space\");"
    },
    {
        "line": 210,
        "fullcodeline": "lsr_read_focus(lsr, (SVG_Focus*)info.far_ptr, \"focusNext\");"
    },
    {
        "line": 213,
        "fullcodeline": "lsr_read_focus(lsr, (SVG_Focus*)info.far_ptr, \"focusNorth\");"
    },
    {
        "line": 216,
        "fullcodeline": "lsr_read_focus(lsr, (SVG_Focus*)info.far_ptr, \"focusNorthEast\");"
    },
    {
        "line": 219,
        "fullcodeline": "lsr_read_focus(lsr, (SVG_Focus*)info.far_ptr, \"focusNorthWest\");"
    },
    {
        "line": 222,
        "fullcodeline": "lsr_read_focus(lsr, (SVG_Focus*)info.far_ptr, \"focusPrev\");"
    },
    {
        "line": 225,
        "fullcodeline": "lsr_read_focus(lsr, (SVG_Focus*)info.far_ptr, \"focusSouth\");"
    },
    {
        "line": 228,
        "fullcodeline": "lsr_read_focus(lsr, (SVG_Focus*)info.far_ptr, \"focusSouthEast\");"
    },
    {
        "line": 231,
        "fullcodeline": "lsr_read_focus(lsr, (SVG_Focus*)info.far_ptr, \"focusSouthWest\");"
    },
    {
        "line": 234,
        "fullcodeline": "lsr_read_focus(lsr, (SVG_Focus*)info.far_ptr, \"focusEast\");"
    },
    {
        "line": 237,
        "fullcodeline": "GF_LSR_READ_INT(lsr, *(SVG_Focusable*)info.far_ptr, 2, \"focusable\");"
    },
    {
        "line": 240,
        "fullcodeline": "lsr_read_focus(lsr, (SVG_Focus*)info.far_ptr, \"focusWest\");"
    },
    {
        "line": 243,
        "fullcodeline": "lsr_read_matrix(lsr, info.far_ptr);"
    },
    {
        "line": 246,
        "fullcodeline": "lsr_read_byte_align_string_list(lsr, *(GF_List**)info.far_ptr, \"textDecoration\", GF_FALSE, GF_FALSE);"
    },
    {
        "line": 250,
        "fullcodeline": "GF_LSR_READ_INT(lsr, *(SVG_FontVariant*)info.far_ptr, 2, \"font-variant\");"
    },
    {
        "line": 268,
        "fullcodeline": "lsr_read_fixed_16_8i(lsr, info.far_ptr, \"fontSize\");"
    },
    {
        "line": 271,
        "fullcodeline": "GF_LSR_READ_INT(lsr, *(SVG_FontStyle*)info.far_ptr, 3, \"fontStyle\");"
    },
    {
        "line": 274,
        "fullcodeline": "GF_LSR_READ_INT(lsr, *(SVG_FontWeight*)info.far_ptr, 4, \"fontWeight\");"
    },
    {
        "line": 277,
        "fullcodeline": "lsr_read_byte_align_string(lsr, info.far_ptr, \"xlink:title\");"
    },
    {
        "line": 281,
        "fullcodeline": "GF_LSR_READ_INT(lsr, field_rare, 3, \"xlink:type\");"
    },
    {
        "line": 284,
        "fullcodeline": "lsr_read_any_uri(lsr, info.far_ptr, \"xlink:role\");"
    },
    {
        "line": 287,
        "fullcodeline": "lsr_read_any_uri(lsr, info.far_ptr, \"xlink:arcrole\");"
    },
    {
        "line": 291,
        "fullcodeline": "GF_LSR_READ_INT(lsr, field_rare, 2, \"xlink:actuate\");"
    },
    {
        "line": 295,
        "fullcodeline": "GF_LSR_READ_INT(lsr, field_rare, 3, \"xlink:show\");"
    },
    {
        "line": 298,
        "fullcodeline": "lsr_read_smil_times(lsr, NULL, 0, info.far_ptr, \"end\", 0);"
    },
    {
        "line": 301,
        "fullcodeline": "lsr_read_duration_ex(lsr, NULL, 0, info.far_ptr, \"min\", 0);"
    },
    {
        "line": 304,
        "fullcodeline": "lsr_read_duration_ex(lsr, NULL, 0, info.far_ptr, \"min\", 0);"
    },
    {
        "line": 119,
        "fullcodeline": "SVG_StrokeDashArray *da = (SVG_StrokeDashArray *)info.far_ptr;"
    },
    {
        "line": 120,
        "fullcodeline": "GF_LSR_READ_INT(lsr, flag, 1, \"dashArray\");"
    },
    {
        "line": 187,
        "fullcodeline": "u32 j, fcount = lsr_read_vluimsbf5(lsr, \"count\");"
    },
    {
        "line": 255,
        "fullcodeline": "GF_LSR_READ_INT(lsr, flag, 1, \"isInherit\");"
    },
    {
        "line": 18,
        "fullcodeline": "GF_LSR_READ_INT(lsr, extID, lsr->info->cfg.extensionIDBits, \"extensionID\");"
    },
    {
        "line": 19,
        "fullcodeline": "len = lsr_read_vluimsbf5(lsr, \"len\");"
    },
    {
        "line": 50,
        "fullcodeline": "GF_LSR_READ_INT(lsr, extID, 1, \"hasNextExtension\");"
    },
    {
        "line": 188,
        "fullcodeline": "for (j=0; j<fcount; j++) {"
    },
    {
        "line": 20,
        "fullcodeline": "if (extID==2) {"
    },
    {
        "line": 51,
        "fullcodeline": "if (!extID) break;"
    },
    {
        "line": 122,
        "fullcodeline": "da->type=SVG_STROKEDASHARRAY_INHERIT;"
    },
    {
        "line": 190,
        "fullcodeline": "GF_LSR_READ_INT(lsr, fval, 6, \"feature\");"
    },
    {
        "line": 257,
        "fullcodeline": "((SVG_FontFamily*)info.far_ptr)->type = SVG_FONTFAMILY_INHERIT;"
    },
    {
        "line": 21,
        "fullcodeline": "GF_LSR_READ_INT(lsr, len, 2, \"nbOfAttributes\");"
    },
    {
        "line": 124,
        "fullcodeline": "da->type=SVG_STROKEDASHARRAY_ARRAY;"
    },
    {
        "line": 125,
        "fullcodeline": "da->array.count = lsr_read_vluimsbf5(lsr, \"len\");"
    },
    {
        "line": 126,
        "fullcodeline": "da->array.vals = (Fixed*)gf_malloc(sizeof(Fixed)*da->array.count);"
    },
    {
        "line": 127,
        "fullcodeline": "da->array.units = (u8*)gf_malloc(sizeof(u8)*da->array.count);"
    },
    {
        "line": 260,
        "fullcodeline": "((SVG_FontFamily*)info.far_ptr)->type = SVG_FONTFAMILY_VALUE;"
    },
    {
        "line": 261,
        "fullcodeline": "GF_LSR_READ_INT(lsr, flag, lsr->fontIndexBits, \"fontIndex\");"
    },
    {
        "line": 262,
        "fullcodeline": "ft = (char*)gf_list_get(lsr->font_table, flag);"
    },
    {
        "line": 22,
        "fullcodeline": "for (j=0; j<len; j++) {"
    },
    {
        "line": 48,
        "fullcodeline": "gf_bs_read_int(lsr->bs, len);"
    },
    {
        "line": 128,
        "fullcodeline": "if (!da->array.vals || !da->array.units) {"
    },
    {
        "line": 132,
        "fullcodeline": "for (j=0; j<da->array.count; j++) {"
    },
    {
        "line": 23,
        "fullcodeline": "GF_LSR_READ_INT(lsr, extID, 3, \"attributeRARE\");"
    },
    {
        "line": 129,
        "fullcodeline": "lsr->last_error = GF_OUT_OF_MEM;"
    },
    {
        "line": 133,
        "fullcodeline": "da->array.vals[j] = lsr_read_fixed_16_8(lsr, \"dash\");"
    },
    {
        "line": 134,
        "fullcodeline": "da->array.units[j] = 0;"
    },
    {
        "line": 263,
        "fullcodeline": "if (ft) ((SVG_FontFamily*)info.far_ptr)->value = gf_strdup(ft);"
    },
    {
        "line": 26,
        "fullcodeline": "lsr->last_error = gf_node_get_attribute_by_tag(n, TAG_SVG_ATT_syncMaster, GF_TRUE, GF_FALSE, &info);"
    },
    {
        "line": 27,
        "fullcodeline": "GF_LSR_READ_INT(lsr, *(SVG_Boolean *)info.far_ptr, 1, \"syncMaster\");"
    },
    {
        "line": 30,
        "fullcodeline": "lsr->last_error = gf_node_get_attribute_by_tag(n, TAG_SVG_ATT_focusHighlight, GF_TRUE, GF_FALSE, &info);"
    },
    {
        "line": 31,
        "fullcodeline": "GF_LSR_READ_INT(lsr, *(SVG_FocusHighlight *)info.far_ptr, 2, \"focusHighlight\");"
    },
    {
        "line": 34,
        "fullcodeline": "lsr->last_error = gf_node_get_attribute_by_tag(n, TAG_SVG_ATT_initialVisibility, GF_TRUE, GF_FALSE, &info);"
    },
    {
        "line": 35,
        "fullcodeline": "GF_LSR_READ_INT(lsr, *(SVG_InitialVisibility *)info.far_ptr, 2, \"initialVisibility\");"
    },
    {
        "line": 38,
        "fullcodeline": "lsr->last_error = gf_node_get_attribute_by_tag(n, TAG_SVG_ATT_fullscreen, GF_TRUE, GF_FALSE, &info);"
    },
    {
        "line": 39,
        "fullcodeline": "GF_LSR_READ_INT(lsr, *(SVG_Boolean *)info.far_ptr, 1, \"fullscreen\");"
    },
    {
        "line": 42,
        "fullcodeline": "lsr->last_error = gf_node_get_attribute_by_tag(n, TAG_SVG_ATT_requiredFonts, GF_TRUE, GF_FALSE, &info);"
    },
    {
        "line": 43,
        "fullcodeline": "lsr_read_byte_align_string_list(lsr, *(GF_List **)info.far_ptr, \"requiredFonts\", GF_FALSE, GF_TRUE);"
    }
]