[
    {
        "line": 5,
        "fullcodeline": "bool ia32e = !!(vmcs12->vm_entry_controls & VM_ENTRY_IA32E_MODE);"
    },
    {
        "line": 7,
        "fullcodeline": "*entry_failure_code = ENTRY_FAIL_DEFAULT;"
    },
    {
        "line": 9,
        "fullcodeline": "if (CC(!nested_guest_cr0_valid(vcpu, vmcs12->guest_cr0)) ||"
    },
    {
        "line": 21,
        "fullcodeline": "if (nested_vmx_check_vmcs_link_ptr(vcpu, vmcs12)) {"
    },
    {
        "line": 10,
        "fullcodeline": "CC(!nested_guest_cr4_valid(vcpu, vmcs12->guest_cr4)))"
    },
    {
        "line": 13,
        "fullcodeline": "if ((vmcs12->vm_entry_controls & VM_ENTRY_LOAD_DEBUG_CONTROLS) &&"
    },
    {
        "line": 14,
        "fullcodeline": "CC(!kvm_dr7_valid(vmcs12->guest_dr7)))"
    },
    {
        "line": 17,
        "fullcodeline": "if ((vmcs12->vm_entry_controls & VM_ENTRY_LOAD_IA32_PAT) &&"
    },
    {
        "line": 18,
        "fullcodeline": "CC(!kvm_pat_valid(vmcs12->guest_ia32_pat)))"
    },
    {
        "line": 22,
        "fullcodeline": "*entry_failure_code = ENTRY_FAIL_VMCS_LINK_PTR;"
    },
    {
        "line": 26,
        "fullcodeline": "if ((vmcs12->vm_entry_controls & VM_ENTRY_LOAD_IA32_PERF_GLOBAL_CTRL) &&"
    },
    {
        "line": 27,
        "fullcodeline": "CC(!kvm_valid_perf_global_ctrl(vcpu_to_pmu(vcpu),"
    },
    {
        "line": 31,
        "fullcodeline": "if (CC((vmcs12->guest_cr0 & (X86_CR0_PG | X86_CR0_PE)) == X86_CR0_PG))"
    },
    {
        "line": 34,
        "fullcodeline": "if (CC(ia32e && !(vmcs12->guest_cr4 & X86_CR4_PAE)) ||"
    },
    {
        "line": 35,
        "fullcodeline": "CC(ia32e && !(vmcs12->guest_cr0 & X86_CR0_PG)))"
    },
    {
        "line": 48,
        "fullcodeline": "(vmcs12->vm_entry_controls & VM_ENTRY_LOAD_IA32_EFER)) {"
    },
    {
        "line": 56,
        "fullcodeline": "if ((vmcs12->vm_entry_controls & VM_ENTRY_LOAD_BNDCFGS) &&"
    },
    {
        "line": 57,
        "fullcodeline": "(CC(is_noncanonical_address(vmcs12->guest_bndcfgs & PAGE_MASK, vcpu)) ||"
    },
    {
        "line": 11,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 15,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 19,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 23,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 29,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 32,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 36,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 58,
        "fullcodeline": "CC((vmcs12->guest_bndcfgs & MSR_IA32_BNDCFGS_RSVD))))"
    },
    {
        "line": 59,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 62,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 47,
        "fullcodeline": "if (to_vmx(vcpu)->nested.nested_run_pending &&"
    },
    {
        "line": 49,
        "fullcodeline": "if (CC(!kvm_valid_efer(vcpu, vmcs12->guest_ia32_efer)) ||"
    },
    {
        "line": 51,
        "fullcodeline": "CC(((vmcs12->guest_cr0 & X86_CR0_PG) &&"
    },
    {
        "line": 50,
        "fullcodeline": "CC(ia32e != !!(vmcs12->guest_ia32_efer & EFER_LMA)) ||"
    },
    {
        "line": 53,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 52,
        "fullcodeline": "ia32e != !!(vmcs12->guest_ia32_efer & EFER_LME))))"
    }
]