[
    {
        "line": 3,
        "fullcodeline": "size_t zl_sz = node->sz;"
    },
    {
        "line": 5,
        "fullcodeline": "quicklistNode *new_node = quicklistCreateNode();"
    },
    {
        "line": 6,
        "fullcodeline": "new_node->zl = zmalloc(zl_sz);"
    },
    {
        "line": 9,
        "fullcodeline": "memcpy(new_node->zl, node->zl, zl_sz);"
    },
    {
        "line": 12,
        "fullcodeline": "int orig_start = after ? offset + 1 : 0;"
    },
    {
        "line": 13,
        "fullcodeline": "int orig_extent = after ? -1 : offset;"
    },
    {
        "line": 14,
        "fullcodeline": "int new_start = after ? 0 : offset;"
    },
    {
        "line": 15,
        "fullcodeline": "int new_extent = after ? offset + 1 : -1;"
    },
    {
        "line": 17,
        "fullcodeline": "D(\"After %d (%d); ranges: [%d, %d], [%d, %d]\", after, offset, orig_start,"
    },
    {
        "line": 20,
        "fullcodeline": "node->zl = ziplistDeleteRange(node->zl, orig_start, orig_extent);"
    },
    {
        "line": 21,
        "fullcodeline": "node->count = ziplistLen(node->zl);"
    },
    {
        "line": 22,
        "fullcodeline": "quicklistNodeUpdateSz(node);"
    },
    {
        "line": 24,
        "fullcodeline": "new_node->zl = ziplistDeleteRange(new_node->zl, new_start, new_extent);"
    },
    {
        "line": 25,
        "fullcodeline": "new_node->count = ziplistLen(new_node->zl);"
    },
    {
        "line": 26,
        "fullcodeline": "quicklistNodeUpdateSz(new_node);"
    },
    {
        "line": 28,
        "fullcodeline": "D(\"After split lengths: orig (%d), new (%d)\", node->count, new_node->count);"
    }
]