[
    {
        "line": 7,
        "fullcodeline": "allow_fragments = bool(allow_fragments)"
    },
    {
        "line": 8,
        "fullcodeline": "key = url, scheme, allow_fragments, type(url), type(scheme)"
    },
    {
        "line": 9,
        "fullcodeline": "cached = _parse_cache.get(key, None)"
    },
    {
        "line": 15,
        "fullcodeline": "i = url.find(':')"
    },
    {
        "line": 53,
        "fullcodeline": "_checknetloc(netloc)"
    },
    {
        "line": 54,
        "fullcodeline": "v = SplitResult(scheme, netloc, url, query, fragment)"
    },
    {
        "line": 55,
        "fullcodeline": "_parse_cache[key] = v"
    },
    {
        "line": 12,
        "fullcodeline": "if len(_parse_cache) >= MAX_CACHE_SIZE: # avoid runaway growth"
    },
    {
        "line": 14,
        "fullcodeline": "netloc = query = fragment = ''"
    },
    {
        "line": 16,
        "fullcodeline": "if i > 0:"
    },
    {
        "line": 44,
        "fullcodeline": "if url[:2] == '//':"
    },
    {
        "line": 49,
        "fullcodeline": "if allow_fragments and '#' in url:"
    },
    {
        "line": 51,
        "fullcodeline": "if '?' in url:"
    },
    {
        "line": 13,
        "fullcodeline": "clear_cache()"
    },
    {
        "line": 17,
        "fullcodeline": "if url[:i] == 'http': # optimize the common case"
    },
    {
        "line": 33,
        "fullcodeline": "for c in url[:i]:"
    },
    {
        "line": 45,
        "fullcodeline": "netloc, url = _splitnetloc(url, 2)"
    },
    {
        "line": 46,
        "fullcodeline": "if (('[' in netloc and ']' not in netloc) or"
    },
    {
        "line": 50,
        "fullcodeline": "url, fragment = url.split('#', 1)"
    },
    {
        "line": 52,
        "fullcodeline": "url, query = url.split('?', 1)"
    },
    {
        "line": 18,
        "fullcodeline": "scheme = url[:i].lower()"
    },
    {
        "line": 19,
        "fullcodeline": "url = url[i+1:]"
    },
    {
        "line": 29,
        "fullcodeline": "_checknetloc(netloc)"
    },
    {
        "line": 30,
        "fullcodeline": "v = SplitResult(scheme, netloc, url, query, fragment)"
    },
    {
        "line": 31,
        "fullcodeline": "_parse_cache[key] = v"
    },
    {
        "line": 47,
        "fullcodeline": "(']' in netloc and '[' not in netloc)):"
    },
    {
        "line": 48,
        "fullcodeline": "raise ValueError(\"Invalid IPv6 URL\")"
    },
    {
        "line": 20,
        "fullcodeline": "if url[:2] == '//':"
    },
    {
        "line": 25,
        "fullcodeline": "if allow_fragments and '#' in url:"
    },
    {
        "line": 27,
        "fullcodeline": "if '?' in url:"
    },
    {
        "line": 39,
        "fullcodeline": "rest = url[i+1:]"
    },
    {
        "line": 34,
        "fullcodeline": "if c not in scheme_chars:"
    },
    {
        "line": 40,
        "fullcodeline": "if not rest or any(c not in '0123456789' for c in rest):"
    },
    {
        "line": 21,
        "fullcodeline": "netloc, url = _splitnetloc(url, 2)"
    },
    {
        "line": 22,
        "fullcodeline": "if (('[' in netloc and ']' not in netloc) or"
    },
    {
        "line": 26,
        "fullcodeline": "url, fragment = url.split('#', 1)"
    },
    {
        "line": 28,
        "fullcodeline": "url, query = url.split('?', 1)"
    },
    {
        "line": 23,
        "fullcodeline": "(']' in netloc and '[' not in netloc)):"
    },
    {
        "line": 24,
        "fullcodeline": "raise ValueError(\"Invalid IPv6 URL\")"
    },
    {
        "line": 42,
        "fullcodeline": "scheme, url = url[:i].lower(), rest"
    }
]