[
    {
        "line": 6,
        "fullcodeline": "import unicodedata"
    },
    {
        "line": 8,
        "fullcodeline": "n = n.replace(':', '')        # ignore characters already included"
    },
    {
        "line": 9,
        "fullcodeline": "n = n.replace('#', '')        # but not the surrounding text"
    },
    {
        "line": 10,
        "fullcodeline": "n = n.replace('?', '')"
    },
    {
        "line": 11,
        "fullcodeline": "netloc2 = unicodedata.normalize('NFKC', n)"
    },
    {
        "line": 2,
        "fullcodeline": "if not netloc or not isinstance(netloc, unicode):"
    },
    {
        "line": 12,
        "fullcodeline": "if n == netloc2:"
    },
    {
        "line": 14,
        "fullcodeline": "for c in '/?#@:':"
    },
    {
        "line": 7,
        "fullcodeline": "n = netloc.rpartition('@')[2] # ignore anything to the left of '@'"
    },
    {
        "line": 15,
        "fullcodeline": "if c in netloc2:"
    },
    {
        "line": 16,
        "fullcodeline": "raise ValueError(\"netloc '\" + netloc + \"' contains invalid \" +"
    }
]