[
    {
        "line": 4,
        "fullcodeline": "pks = []"
    },
    {
        "line": 5,
        "fullcodeline": "invalid_ids = []"
    },
    {
        "line": 6,
        "fullcodeline": "used_type = graphene_type"
    },
    {
        "line": 8,
        "fullcodeline": "for graphql_id in ids:"
    },
    {
        "line": 31,
        "fullcodeline": "return used_type, pks"
    },
    {
        "line": 29,
        "fullcodeline": "raise GraphQLError(ERROR_COULD_NO_RESOLVE_GLOBAL_ID % invalid_ids)"
    },
    {
        "line": 25,
        "fullcodeline": "used_type = node_type"
    },
    {
        "line": 26,
        "fullcodeline": "pks.append(_id)"
    },
    {
        "line": 9,
        "fullcodeline": "if not graphql_id:"
    },
    {
        "line": 20,
        "fullcodeline": "if used_type and str(used_type) != str(node_type):"
    },
    {
        "line": 10,
        "fullcodeline": "invalid_ids.append(graphql_id)"
    },
    {
        "line": 23,
        "fullcodeline": "raise GraphQLError(f\"Must receive {str(used_type)} id: {graphql_id}.\")"
    },
    {
        "line": 14,
        "fullcodeline": "node_type, _id = from_global_id_or_error(graphql_id)"
    },
    {
        "line": 21,
        "fullcodeline": "if not raise_error:"
    },
    {
        "line": 16,
        "fullcodeline": "invalid_ids.append(graphql_id)"
    }
]