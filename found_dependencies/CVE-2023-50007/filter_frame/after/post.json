[
    {
        "line": 3,
        "fullcodeline": "AVFilterContext *ctx = inlink->dst;"
    },
    {
        "line": 4,
        "fullcodeline": "AudioFWTDNContext *s = ctx->priv;"
    },
    {
        "line": 8,
        "fullcodeline": "int eof = in == NULL;"
    },
    {
        "line": 10,
        "fullcodeline": "out = ff_get_audio_buffer(outlink, s->nb_samples);"
    },
    {
        "line": 41,
        "fullcodeline": "td.in  = in;"
    },
    {
        "line": 42,
        "fullcodeline": "td.out = out;"
    },
    {
        "line": 43,
        "fullcodeline": "ff_filter_execute(ctx, s->filter_channel, &td, NULL, inlink->ch_layout.nb_channels);"
    },
    {
        "line": 47,
        "fullcodeline": "s->sn += s->nb_samples;"
    },
    {
        "line": 77,
        "fullcodeline": "av_frame_free(&in);"
    },
    {
        "line": 11,
        "fullcodeline": "if (!out) {"
    },
    {
        "line": 22,
        "fullcodeline": "if (!in || in->nb_samples < s->nb_samples) {"
    },
    {
        "line": 49,
        "fullcodeline": "if (s->drop_samples >= in->nb_samples) {"
    },
    {
        "line": 78,
        "fullcodeline": "return ff_filter_frame(outlink, out);"
    },
    {
        "line": 12,
        "fullcodeline": "av_frame_free(&in);"
    },
    {
        "line": 16,
        "fullcodeline": "av_frame_copy_props(out, in);"
    },
    {
        "line": 17,
        "fullcodeline": "s->eof_pts = in->pts + in->nb_samples;"
    },
    {
        "line": 20,
        "fullcodeline": "out->pts = s->eof_pts - s->padd_samples;"
    },
    {
        "line": 23,
        "fullcodeline": "AVFrame *new_in = ff_get_audio_buffer(outlink, s->nb_samples);"
    },
    {
        "line": 33,
        "fullcodeline": "s->padd_samples -= s->nb_samples - (in ? in->nb_samples: 0);"
    },
    {
        "line": 37,
        "fullcodeline": "av_frame_free(&in);"
    },
    {
        "line": 38,
        "fullcodeline": "in = new_in;"
    },
    {
        "line": 45,
        "fullcodeline": "s->got_profile = 1;"
    },
    {
        "line": 50,
        "fullcodeline": "s->drop_samples -= in->nb_samples;"
    },
    {
        "line": 51,
        "fullcodeline": "s->delay += in->nb_samples;"
    },
    {
        "line": 52,
        "fullcodeline": "av_frame_free(&in);"
    },
    {
        "line": 53,
        "fullcodeline": "av_frame_free(&out);"
    },
    {
        "line": 54,
        "fullcodeline": "FF_FILTER_FORWARD_STATUS(inlink, outlink);"
    },
    {
        "line": 55,
        "fullcodeline": "FF_FILTER_FORWARD_WANTED(outlink, inlink);"
    },
    {
        "line": 13,
        "fullcodeline": "return AVERROR(ENOMEM);"
    },
    {
        "line": 25,
        "fullcodeline": "if (!new_in) {"
    },
    {
        "line": 26,
        "fullcodeline": "av_frame_free(&in);"
    },
    {
        "line": 27,
        "fullcodeline": "av_frame_free(&out);"
    },
    {
        "line": 31,
        "fullcodeline": "av_frame_copy_props(new_in, in);"
    },
    {
        "line": 35,
        "fullcodeline": "av_samples_copy(new_in->extended_data, in->extended_data, 0, 0,"
    },
    {
        "line": 57,
        "fullcodeline": "} else if (s->drop_samples > 0) {"
    },
    {
        "line": 28,
        "fullcodeline": "return AVERROR(ENOMEM);"
    },
    {
        "line": 64,
        "fullcodeline": "out->nb_samples = in->nb_samples - s->drop_samples;"
    },
    {
        "line": 65,
        "fullcodeline": "out->pts = in->pts - av_rescale_q(s->delay, (AVRational){1, outlink->sample_rate}, outlink->time_base);"
    },
    {
        "line": 66,
        "fullcodeline": "s->delay += s->drop_samples;"
    },
    {
        "line": 67,
        "fullcodeline": "s->drop_samples = 0;"
    },
    {
        "line": 58,
        "fullcodeline": "for (int ch = 0; ch < out->ch_layout.nb_channels; ch++) {"
    },
    {
        "line": 59,
        "fullcodeline": "memmove(out->extended_data[ch],"
    },
    {
        "line": 69,
        "fullcodeline": "if (s->padd_samples < 0 && eof) {"
    },
    {
        "line": 73,
        "fullcodeline": "if (!eof)"
    },
    {
        "line": 60,
        "fullcodeline": "out->extended_data[ch] + s->drop_samples * sizeof(double),"
    },
    {
        "line": 61,
        "fullcodeline": "(in->nb_samples - s->drop_samples) * sizeof(double));"
    },
    {
        "line": 70,
        "fullcodeline": "out->nb_samples = FFMAX(0, out->nb_samples + s->padd_samples);"
    },
    {
        "line": 71,
        "fullcodeline": "s->padd_samples = 0;"
    },
    {
        "line": 74,
        "fullcodeline": "out->pts = in->pts - av_rescale_q(s->delay, (AVRational){1, outlink->sample_rate}, outlink->time_base);"
    }
]