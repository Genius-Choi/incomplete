[
    {
        "line": 3,
        "fullcodeline": "struct nfs4_closedata *calldata = data;"
    },
    {
        "line": 4,
        "fullcodeline": "struct nfs4_state *state = calldata->state;"
    },
    {
        "line": 5,
        "fullcodeline": "struct nfs_server *server = NFS_SERVER(calldata->inode);"
    },
    {
        "line": 29,
        "fullcodeline": "nfs_refresh_inode(calldata->inode, calldata->res.fattr);"
    },
    {
        "line": 7,
        "fullcodeline": "if (RPC_ASSASSINATED(task))"
    },
    {
        "line": 14,
        "fullcodeline": "nfs_set_open_stateid(state, &calldata->res.stateid, 0);"
    },
    {
        "line": 15,
        "fullcodeline": "renew_lease(server, calldata->timestamp);"
    },
    {
        "line": 17,
        "fullcodeline": "case -NFS4ERR_STALE_STATEID:"
    },
    {
        "line": 18,
        "fullcodeline": "case -NFS4ERR_OLD_STATEID:"
    },
    {
        "line": 19,
        "fullcodeline": "case -NFS4ERR_BAD_STATEID:"
    },
    {
        "line": 20,
        "fullcodeline": "case -NFS4ERR_EXPIRED:"
    },
    {
        "line": 21,
        "fullcodeline": "if (calldata->arg.open_flags == 0)"
    },
    {
        "line": 24,
        "fullcodeline": "if (nfs4_async_handle_error(task, server, state) == -EAGAIN) {"
    },
    {
        "line": 25,
        "fullcodeline": "rpc_restart_call(task);"
    }
]