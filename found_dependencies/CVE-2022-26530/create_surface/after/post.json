[
    {
        "line": 2,
        "fullcodeline": "struct swaylock_state *state = surface->state;"
    },
    {
        "line": 4,
        "fullcodeline": "surface->image = select_image(state, surface);"
    },
    {
        "line": 6,
        "fullcodeline": "surface->surface = wl_compositor_create_surface(state->compositor);"
    },
    {
        "line": 7,
        "fullcodeline": "assert(surface->surface);"
    },
    {
        "line": 9,
        "fullcodeline": "surface->child = wl_compositor_create_surface(state->compositor);"
    },
    {
        "line": 10,
        "fullcodeline": "assert(surface->child);"
    },
    {
        "line": 11,
        "fullcodeline": "surface->subsurface = wl_subcompositor_get_subsurface(state->subcompositor, surface->child, surface->surface);"
    },
    {
        "line": 12,
        "fullcodeline": "assert(surface->subsurface);"
    },
    {
        "line": 13,
        "fullcodeline": "wl_subsurface_set_sync(surface->subsurface);"
    },
    {
        "line": 38,
        "fullcodeline": "if (surface_is_opaque(surface) &&"
    },
    {
        "line": 48,
        "fullcodeline": "if (!state->ext_session_lock_v1) {"
    },
    {
        "line": 16,
        "fullcodeline": "surface->ext_session_lock_surface_v1 = ext_session_lock_v1_get_lock_surface("
    },
    {
        "line": 18,
        "fullcodeline": "ext_session_lock_surface_v1_add_listener(surface->ext_session_lock_surface_v1,"
    },
    {
        "line": 40,
        "fullcodeline": "surface->state->args.mode != BACKGROUND_MODE_FIT) {"
    },
    {
        "line": 41,
        "fullcodeline": "struct wl_region *region ="
    },
    {
        "line": 43,
        "fullcodeline": "wl_region_add(region, 0, 0, INT32_MAX, INT32_MAX);"
    },
    {
        "line": 44,
        "fullcodeline": "wl_surface_set_opaque_region(surface->surface, region);"
    },
    {
        "line": 45,
        "fullcodeline": "wl_region_destroy(region);"
    },
    {
        "line": 49,
        "fullcodeline": "wl_surface_commit(surface->surface);"
    },
    {
        "line": 21,
        "fullcodeline": "surface->layer_surface = zwlr_layer_shell_v1_get_layer_surface("
    },
    {
        "line": 25,
        "fullcodeline": "zwlr_layer_surface_v1_set_size(surface->layer_surface, 0, 0);"
    },
    {
        "line": 26,
        "fullcodeline": "zwlr_layer_surface_v1_set_anchor(surface->layer_surface,"
    },
    {
        "line": 31,
        "fullcodeline": "zwlr_layer_surface_v1_set_exclusive_zone(surface->layer_surface, -1);"
    },
    {
        "line": 32,
        "fullcodeline": "zwlr_layer_surface_v1_set_keyboard_interactivity("
    },
    {
        "line": 34,
        "fullcodeline": "zwlr_layer_surface_v1_add_listener(surface->layer_surface,"
    },
    {
        "line": 39,
        "fullcodeline": "surface->state->args.mode != BACKGROUND_MODE_CENTER &&"
    },
    {
        "line": 27,
        "fullcodeline": "ZWLR_LAYER_SURFACE_V1_ANCHOR_TOP |"
    }
]