[
    {
        "line": 2,
        "fullcodeline": "swaylock_log_init(LOG_ERROR);"
    },
    {
        "line": 3,
        "fullcodeline": "initialize_pw_backend(argc, argv);"
    },
    {
        "line": 4,
        "fullcodeline": "srand(time(NULL));"
    },
    {
        "line": 6,
        "fullcodeline": "enum line_mode line_mode = LM_LINE;"
    },
    {
        "line": 7,
        "fullcodeline": "state.failed_attempts = 0;"
    },
    {
        "line": 8,
        "fullcodeline": "state.args = (struct swaylock_args){"
    },
    {
        "line": 30,
        "fullcodeline": "char *config_path = NULL;"
    },
    {
        "line": 31,
        "fullcodeline": "int result = parse_options(argc, argv, NULL, NULL, &config_path);"
    },
    {
        "line": 73,
        "fullcodeline": "wl_list_init(&state.surfaces);"
    },
    {
        "line": 74,
        "fullcodeline": "state.xkb.context = xkb_context_new(XKB_CONTEXT_NO_FLAGS);"
    },
    {
        "line": 75,
        "fullcodeline": "state.display = wl_display_connect(NULL);"
    },
    {
        "line": 84,
        "fullcodeline": "struct wl_registry *registry = wl_display_get_registry(state.display);"
    },
    {
        "line": 85,
        "fullcodeline": "wl_registry_add_listener(registry, &registry_listener, &state);"
    },
    {
        "line": 86,
        "fullcodeline": "wl_display_roundtrip(state.display);"
    },
    {
        "line": 87,
        "fullcodeline": "assert(state.compositor && state.layer_shell && state.shm);"
    },
    {
        "line": 95,
        "fullcodeline": "zwlr_input_inhibit_manager_v1_get_inhibitor(state.input_inhibit_manager);"
    },
    {
        "line": 118,
        "fullcodeline": "wl_list_for_each(surface, &state.surfaces, link) {"
    },
    {
        "line": 127,
        "fullcodeline": "state.eventloop = loop_create();"
    },
    {
        "line": 128,
        "fullcodeline": "loop_add_fd(state.eventloop, wl_display_get_fd(state.display), POLLIN,"
    },
    {
        "line": 131,
        "fullcodeline": "loop_add_fd(state.eventloop, get_comm_reply_fd(), POLLIN, comm_in, NULL);"
    },
    {
        "line": 133,
        "fullcodeline": "state.run_display = true;"
    },
    {
        "line": 32,
        "fullcodeline": "if (result != 0) {"
    },
    {
        "line": 36,
        "fullcodeline": "if (!config_path) {"
    },
    {
        "line": 50,
        "fullcodeline": "if (argc > 1) {"
    },
    {
        "line": 59,
        "fullcodeline": "if (line_mode == LM_INSIDE) {"
    },
    {
        "line": 76,
        "fullcodeline": "if (!state.display) {"
    },
    {
        "line": 88,
        "fullcodeline": "if (!state.input_inhibit_manager) {"
    },
    {
        "line": 96,
        "fullcodeline": "if (wl_display_roundtrip(state.display) == -1) {"
    },
    {
        "line": 119,
        "fullcodeline": "create_layer_surface(surface);"
    },
    {
        "line": 33,
        "fullcodeline": "free(config_path);"
    },
    {
        "line": 37,
        "fullcodeline": "config_path = get_config_path();"
    },
    {
        "line": 41,
        "fullcodeline": "swaylock_log(LOG_DEBUG, \"Found config at %s\", config_path);"
    },
    {
        "line": 42,
        "fullcodeline": "int config_status = load_config(config_path, &state, &line_mode);"
    },
    {
        "line": 43,
        "fullcodeline": "free(config_path);"
    },
    {
        "line": 51,
        "fullcodeline": "swaylock_log(LOG_DEBUG, \"Parsing CLI Args\");"
    },
    {
        "line": 52,
        "fullcodeline": "int result = parse_options(argc, argv, &state, &line_mode, NULL);"
    },
    {
        "line": 78,
        "fullcodeline": "swaylock_log(LOG_ERROR, \"Unable to connect to the compositor. \""
    },
    {
        "line": 90,
        "fullcodeline": "swaylock_log(LOG_ERROR, \"Compositor does not support the input \""
    },
    {
        "line": 98,
        "fullcodeline": "swaylock_log(LOG_ERROR, \"Exiting - failed to inhibit input:\""
    },
    {
        "line": 105,
        "fullcodeline": "wl_list_for_each(surface, &state.surfaces, link) {"
    },
    {
        "line": 111,
        "fullcodeline": "wl_display_roundtrip(state.display);"
    },
    {
        "line": 123,
        "fullcodeline": "wl_display_roundtrip(state.display);"
    },
    {
        "line": 124,
        "fullcodeline": "daemonize();"
    },
    {
        "line": 135,
        "fullcodeline": "errno = 0;"
    },
    {
        "line": 139,
        "fullcodeline": "loop_poll(state.eventloop);"
    },
    {
        "line": 44,
        "fullcodeline": "if (config_status != 0) {"
    },
    {
        "line": 53,
        "fullcodeline": "if (result != 0) {"
    },
    {
        "line": 106,
        "fullcodeline": "surface->xdg_output = zxdg_output_manager_v1_get_xdg_output("
    },
    {
        "line": 108,
        "fullcodeline": "zxdg_output_v1_add_listener("
    },
    {
        "line": 113,
        "fullcodeline": "swaylock_log(LOG_INFO, \"Compositor does not support zxdg output \""
    },
    {
        "line": 136,
        "fullcodeline": "if (wl_display_flush(state.display) == -1 && errno != EAGAIN) {"
    },
    {
        "line": 9,
        "fullcodeline": ".mode = BACKGROUND_MODE_FILL,"
    },
    {
        "line": 10,
        "fullcodeline": ".font = strdup(\"sans-serif\"),"
    },
    {
        "line": 11,
        "fullcodeline": ".font_size = 0,"
    },
    {
        "line": 12,
        "fullcodeline": ".radius = 50,"
    },
    {
        "line": 13,
        "fullcodeline": ".thickness = 10,"
    },
    {
        "line": 14,
        "fullcodeline": ".indicator_x_position = 0,"
    },
    {
        "line": 15,
        "fullcodeline": ".indicator_y_position = 0,"
    },
    {
        "line": 16,
        "fullcodeline": ".override_indicator_x_position = false,"
    },
    {
        "line": 17,
        "fullcodeline": ".override_indicator_y_position = false,"
    },
    {
        "line": 18,
        "fullcodeline": ".ignore_empty = false,"
    },
    {
        "line": 19,
        "fullcodeline": ".show_indicator = true,"
    },
    {
        "line": 20,
        "fullcodeline": ".show_caps_lock_indicator = false,"
    },
    {
        "line": 21,
        "fullcodeline": ".show_caps_lock_text = true,"
    },
    {
        "line": 22,
        "fullcodeline": ".show_keyboard_layout = false,"
    },
    {
        "line": 23,
        "fullcodeline": ".hide_keyboard_layout = false,"
    },
    {
        "line": 24,
        "fullcodeline": ".show_failed_attempts = false,"
    },
    {
        "line": 25,
        "fullcodeline": ".indicator_idle_visible = false"
    },
    {
        "line": 61,
        "fullcodeline": "} else if (line_mode == LM_RING) {"
    }
]