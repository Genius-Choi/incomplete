[
    {
        "line": 3,
        "fullcodeline": "struct swaylock_state *state = data;"
    },
    {
        "line": 4,
        "fullcodeline": "if (strcmp(interface, wl_compositor_interface.name) == 0) {"
    },
    {
        "line": 5,
        "fullcodeline": "state->compositor = wl_registry_bind(registry, name,"
    },
    {
        "line": 7,
        "fullcodeline": "} else if (strcmp(interface, wl_subcompositor_interface.name) == 0) {"
    },
    {
        "line": 8,
        "fullcodeline": "state->subcompositor = wl_registry_bind(registry, name,"
    },
    {
        "line": 10,
        "fullcodeline": "} else if (strcmp(interface, wl_shm_interface.name) == 0) {"
    },
    {
        "line": 11,
        "fullcodeline": "state->shm = wl_registry_bind(registry, name,"
    },
    {
        "line": 13,
        "fullcodeline": "} else if (strcmp(interface, wl_seat_interface.name) == 0) {"
    },
    {
        "line": 14,
        "fullcodeline": "struct wl_seat *seat = wl_registry_bind("
    },
    {
        "line": 16,
        "fullcodeline": "struct swaylock_seat *swaylock_seat ="
    },
    {
        "line": 18,
        "fullcodeline": "swaylock_seat->state = state;"
    },
    {
        "line": 19,
        "fullcodeline": "wl_seat_add_listener(seat, &seat_listener, swaylock_seat);"
    },
    {
        "line": 17,
        "fullcodeline": "calloc(1, sizeof(struct swaylock_seat));"
    },
    {
        "line": 20,
        "fullcodeline": "} else if (strcmp(interface, zwlr_layer_shell_v1_interface.name) == 0) {"
    },
    {
        "line": 21,
        "fullcodeline": "state->layer_shell = wl_registry_bind("
    },
    {
        "line": 23,
        "fullcodeline": "} else if (strcmp(interface, zwlr_input_inhibit_manager_v1_interface.name) == 0) {"
    },
    {
        "line": 24,
        "fullcodeline": "state->input_inhibit_manager = wl_registry_bind("
    },
    {
        "line": 26,
        "fullcodeline": "} else if (strcmp(interface, zxdg_output_manager_v1_interface.name) == 0) {"
    },
    {
        "line": 27,
        "fullcodeline": "state->zxdg_output_manager = wl_registry_bind("
    },
    {
        "line": 29,
        "fullcodeline": "} else if (strcmp(interface, wl_output_interface.name) == 0) {"
    },
    {
        "line": 30,
        "fullcodeline": "struct swaylock_surface *surface ="
    },
    {
        "line": 32,
        "fullcodeline": "surface->state = state;"
    },
    {
        "line": 33,
        "fullcodeline": "surface->output = wl_registry_bind(registry, name,"
    },
    {
        "line": 35,
        "fullcodeline": "surface->output_global_name = name;"
    },
    {
        "line": 36,
        "fullcodeline": "wl_output_add_listener(surface->output, &_wl_output_listener, surface);"
    },
    {
        "line": 37,
        "fullcodeline": "wl_list_insert(&state->surfaces, &surface->link);"
    },
    {
        "line": 31,
        "fullcodeline": "calloc(1, sizeof(struct swaylock_surface));"
    },
    {
        "line": 40,
        "fullcodeline": "create_layer_surface(surface);"
    },
    {
        "line": 41,
        "fullcodeline": "wl_display_roundtrip(state->display);"
    }
]