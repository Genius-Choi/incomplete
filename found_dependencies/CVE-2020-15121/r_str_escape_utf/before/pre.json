[
    {
        "line": 33,
        "fullcodeline": "new_buf = malloc (1 + (len * 4));"
    },
    {
        "line": 37,
        "fullcodeline": "p = buf;"
    },
    {
        "line": 38,
        "fullcodeline": "q = new_buf;"
    },
    {
        "line": 7,
        "fullcodeline": "if (!buf) {"
    },
    {
        "line": 34,
        "fullcodeline": "if (!new_buf) {"
    },
    {
        "line": 39,
        "fullcodeline": "while (p < end) {"
    },
    {
        "line": 26,
        "fullcodeline": "len = end - buf;"
    },
    {
        "line": 29,
        "fullcodeline": "len = strlen (buf);"
    },
    {
        "line": 30,
        "fullcodeline": "end = buf + len;"
    },
    {
        "line": 15,
        "fullcodeline": "if (buf_size < 0) {"
    },
    {
        "line": 18,
        "fullcodeline": "if (enc == R_STRING_ENC_UTF16LE || enc == R_STRING_ENC_UTF16BE) {"
    },
    {
        "line": 23,
        "fullcodeline": "if (!end) {"
    },
    {
        "line": 19,
        "fullcodeline": "end = (char *)r_mem_mem_aligned ((ut8 *)buf, buf_size, (ut8 *)\"\\0\\0\", 2, 2);"
    },
    {
        "line": 24,
        "fullcodeline": "end = buf + buf_size - 1; /* TODO: handle overlong strings properly */"
    },
    {
        "line": 56,
        "fullcodeline": "ch_bytes = r_utf8_decode ((ut8 *)p, end - p, &ch);"
    },
    {
        "line": 61,
        "fullcodeline": "if (show_asciidot && !IS_PRINTABLE(ch)) {"
    },
    {
        "line": 81,
        "fullcodeline": "p += ch_bytes < 2 ? 2 : ch_bytes;"
    },
    {
        "line": 85,
        "fullcodeline": "p += 4;"
    },
    {
        "line": 88,
        "fullcodeline": "p += ch_bytes;"
    },
    {
        "line": 21,
        "fullcodeline": "end = (char *)r_mem_mem_aligned ((ut8 *)buf, buf_size, (ut8 *)\"\\0\\0\\0\\0\", 4, 4);"
    },
    {
        "line": 50,
        "fullcodeline": "if (ch_bytes == 0) {"
    },
    {
        "line": 57,
        "fullcodeline": "if (ch_bytes == 0) {"
    },
    {
        "line": 45,
        "fullcodeline": "if (enc == R_STRING_ENC_UTF16LE || enc == R_STRING_ENC_UTF16BE) {"
    },
    {
        "line": 46,
        "fullcodeline": "ch_bytes = r_utf16_decode ((ut8 *)p, end - p, &ch, enc == R_STRING_ENC_UTF16BE);"
    },
    {
        "line": 51,
        "fullcodeline": "p++;"
    },
    {
        "line": 58,
        "fullcodeline": "ch_bytes = 1;"
    },
    {
        "line": 62,
        "fullcodeline": "*q++ = '.';"
    },
    {
        "line": 63,
        "fullcodeline": "} else if (ch_bytes > 1) {"
    },
    {
        "line": 48,
        "fullcodeline": "ch_bytes = r_utf32_decode ((ut8 *)p, end - p, &ch, enc == R_STRING_ENC_UTF32BE);"
    },
    {
        "line": 75,
        "fullcodeline": "int offset = enc == R_STRING_ENC_UTF16BE ? 1 : enc == R_STRING_ENC_UTF32BE ? 3 : 0;"
    },
    {
        "line": 76,
        "fullcodeline": "r_str_byte_escape (p + offset, &q, false, false, esc_bslash);"
    },
    {
        "line": 65,
        "fullcodeline": "q += r_utf8_encode ((ut8 *)q, ch);"
    },
    {
        "line": 69,
        "fullcodeline": "for (i = ch_bytes == 4 ? 6 : 2; i >= 0; i -= 2) {"
    },
    {
        "line": 67,
        "fullcodeline": "*q++ = '\\\\';"
    },
    {
        "line": 68,
        "fullcodeline": "*q++ = ch_bytes == 4 ? 'U' : 'u';"
    },
    {
        "line": 70,
        "fullcodeline": "*q++ = \"0123456789abcdef\"[ch >> 4 * (i + 1) & 0xf];"
    },
    {
        "line": 71,
        "fullcodeline": "*q++ = \"0123456789abcdef\"[ch >> 4 * i & 0xf];"
    }
]