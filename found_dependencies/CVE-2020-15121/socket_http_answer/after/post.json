[
    {
        "line": 2,
        "fullcodeline": "r_return_val_if_fail (s, NULL);"
    },
    {
        "line": 4,
        "fullcodeline": "int ret, len = 0, delta = 0;"
    },
    {
        "line": 6,
        "fullcodeline": "RBuffer *b = r_buf_new ();"
    },
    {
        "line": 10,
        "fullcodeline": "char *res = NULL;"
    },
    {
        "line": 11,
        "fullcodeline": "size_t olen = socket_slurp (s, b);"
    },
    {
        "line": 12,
        "fullcodeline": "char *buf = malloc (olen + 1);"
    },
    {
        "line": 16,
        "fullcodeline": "r_buf_read_at (b, 0, (ut8 *)buf, olen);"
    },
    {
        "line": 17,
        "fullcodeline": "buf[olen] = 0;"
    },
    {
        "line": 26,
        "fullcodeline": "olen -= delta;"
    },
    {
        "line": 27,
        "fullcodeline": "*dn = 0; // chop headers"
    },
    {
        "line": 30,
        "fullcodeline": "p = r_str_casestr (buf, \"Location:\");"
    },
    {
        "line": 50,
        "fullcodeline": "p = r_str_casestr (buf, \"Content-Length: \");"
    },
    {
        "line": 83,
        "fullcodeline": "free (buf);"
    },
    {
        "line": 84,
        "fullcodeline": "r_buf_free (b);"
    },
    {
        "line": 85,
        "fullcodeline": "r_socket_close (s);"
    },
    {
        "line": 7,
        "fullcodeline": "if (!b) {"
    },
    {
        "line": 13,
        "fullcodeline": "if (!buf) {"
    },
    {
        "line": 18,
        "fullcodeline": "if ((dn = (char*)r_str_casestr (buf, \"\\n\\n\"))) {"
    },
    {
        "line": 56,
        "fullcodeline": "if (len > 0) {"
    },
    {
        "line": 19,
        "fullcodeline": "delta += 2;"
    },
    {
        "line": 36,
        "fullcodeline": "p += strlen (\"Location:\");"
    },
    {
        "line": 37,
        "fullcodeline": "char *end_url = strchr (p, '\\n');"
    },
    {
        "line": 52,
        "fullcodeline": "len = atoi (p + 16);"
    },
    {
        "line": 87,
        "fullcodeline": "*rlen = len;"
    },
    {
        "line": 32,
        "fullcodeline": "if (!redirections) {"
    },
    {
        "line": 54,
        "fullcodeline": "len = olen - (dn - buf);"
    },
    {
        "line": 57,
        "fullcodeline": "if (len > olen) {"
    },
    {
        "line": 80,
        "fullcodeline": "res = NULL;"
    },
    {
        "line": 20,
        "fullcodeline": "} else if ((dn = (char*)r_str_casestr (buf, \"\\r\\n\\r\\n\"))) {"
    },
    {
        "line": 33,
        "fullcodeline": "eprintf (\"Too many redirects\\n\");"
    },
    {
        "line": 39,
        "fullcodeline": "int url_len = end_url - p;"
    },
    {
        "line": 40,
        "fullcodeline": "char *url = r_str_ndup (p, url_len);"
    },
    {
        "line": 41,
        "fullcodeline": "r_str_trim (url);"
    },
    {
        "line": 42,
        "fullcodeline": "res = socket_http_get_recursive (url, code, rlen, --redirections);"
    },
    {
        "line": 43,
        "fullcodeline": "free (url);"
    },
    {
        "line": 58,
        "fullcodeline": "res = malloc (len + 2);"
    },
    {
        "line": 62,
        "fullcodeline": "olen -= dn - buf;"
    },
    {
        "line": 63,
        "fullcodeline": "memcpy (res, dn + delta, olen);"
    },
    {
        "line": 71,
        "fullcodeline": "res[len] = 0;"
    },
    {
        "line": 21,
        "fullcodeline": "delta += 4;"
    },
    {
        "line": 59,
        "fullcodeline": "if (!res) {"
    },
    {
        "line": 70,
        "fullcodeline": "} while (olen < len);"
    },
    {
        "line": 73,
        "fullcodeline": "res = malloc (len + 1);"
    },
    {
        "line": 65,
        "fullcodeline": "ret = r_socket_read_block (s, (ut8*) res + olen, len - olen);"
    },
    {
        "line": 69,
        "fullcodeline": "olen += ret;"
    },
    {
        "line": 66,
        "fullcodeline": "if (ret < 1) {"
    },
    {
        "line": 75,
        "fullcodeline": "memcpy (res, dn + delta, len);"
    },
    {
        "line": 76,
        "fullcodeline": "res[len] = 0;"
    }
]