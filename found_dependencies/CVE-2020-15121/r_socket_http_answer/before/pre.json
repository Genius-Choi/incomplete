[
    {
        "line": 2,
        "fullcodeline": "r_return_val_if_fail (s, NULL);"
    },
    {
        "line": 4,
        "fullcodeline": "int ret, len = 0, bufsz = 32768, delta = 0;"
    },
    {
        "line": 5,
        "fullcodeline": "char *dn, *buf = calloc (1, bufsz + 32); // XXX: use r_buffer here"
    },
    {
        "line": 9,
        "fullcodeline": "char *res = NULL;"
    },
    {
        "line": 10,
        "fullcodeline": "int olen = __socket_slurp (s, (ut8*)buf, bufsz);"
    },
    {
        "line": 19,
        "fullcodeline": "olen -= delta;"
    },
    {
        "line": 20,
        "fullcodeline": "*dn = 0; // chop headers"
    },
    {
        "line": 22,
        "fullcodeline": "p = r_str_casestr (buf, \"Content-Length: \");"
    },
    {
        "line": 6,
        "fullcodeline": "if (!buf) {"
    },
    {
        "line": 11,
        "fullcodeline": "if ((dn = (char*)r_str_casestr (buf, \"\\n\\n\"))) {"
    },
    {
        "line": 28,
        "fullcodeline": "if (len > 0) {"
    },
    {
        "line": 12,
        "fullcodeline": "delta += 2;"
    },
    {
        "line": 24,
        "fullcodeline": "len = atoi (p + 16);"
    },
    {
        "line": 26,
        "fullcodeline": "len = olen - (dn - buf);"
    },
    {
        "line": 29,
        "fullcodeline": "if (len > olen) {"
    },
    {
        "line": 48,
        "fullcodeline": "res = NULL;"
    },
    {
        "line": 13,
        "fullcodeline": "} else if ((dn = (char*)r_str_casestr (buf, \"\\r\\n\\r\\n\"))) {"
    },
    {
        "line": 30,
        "fullcodeline": "res = malloc (len + 2);"
    },
    {
        "line": 31,
        "fullcodeline": "memcpy (res, dn + delta, olen);"
    },
    {
        "line": 39,
        "fullcodeline": "res[len] = 0;"
    },
    {
        "line": 14,
        "fullcodeline": "delta += 4;"
    },
    {
        "line": 38,
        "fullcodeline": "} while (olen < len);"
    },
    {
        "line": 41,
        "fullcodeline": "res = malloc (len + 1);"
    },
    {
        "line": 33,
        "fullcodeline": "ret = r_socket_read_block (s, (ut8*) res + olen, len - olen);"
    },
    {
        "line": 37,
        "fullcodeline": "olen += ret;"
    },
    {
        "line": 34,
        "fullcodeline": "if (ret < 1) {"
    },
    {
        "line": 43,
        "fullcodeline": "memcpy (res, dn + delta, len);"
    },
    {
        "line": 44,
        "fullcodeline": "res[len] = 0;"
    }
]