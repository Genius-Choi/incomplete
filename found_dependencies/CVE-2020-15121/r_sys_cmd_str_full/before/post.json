[
    {
        "line": 2,
        "fullcodeline": "char *mysterr = NULL;"
    },
    {
        "line": 6,
        "fullcodeline": "char buffer[1024], *outputptr = NULL;"
    },
    {
        "line": 7,
        "fullcodeline": "char *inputptr = (char *)input;"
    },
    {
        "line": 8,
        "fullcodeline": "int pid, bytes = 0, status;"
    },
    {
        "line": 9,
        "fullcodeline": "int sh_in[2], sh_out[2], sh_err[2];"
    },
    {
        "line": 3,
        "fullcodeline": "if (!sterr) {"
    },
    {
        "line": 14,
        "fullcodeline": "if (pipe (sh_in)) {"
    },
    {
        "line": 26,
        "fullcodeline": "if (pipe (sh_err)) {"
    },
    {
        "line": 32,
        "fullcodeline": "switch ((pid = r_sys_fork ())) {"
    },
    {
        "line": 4,
        "fullcodeline": "sterr = &mysterr;"
    },
    {
        "line": 12,
        "fullcodeline": "*len = 0;"
    },
    {
        "line": 27,
        "fullcodeline": "close (sh_in[0]);"
    },
    {
        "line": 28,
        "fullcodeline": "close (sh_in[1]);"
    },
    {
        "line": 33,
        "fullcodeline": "case -1:"
    },
    {
        "line": 36,
        "fullcodeline": "dup2 (sh_in[0], 0);"
    },
    {
        "line": 37,
        "fullcodeline": "close (sh_in[0]);"
    },
    {
        "line": 38,
        "fullcodeline": "close (sh_in[1]);"
    },
    {
        "line": 49,
        "fullcodeline": "close (sh_err[0]);"
    },
    {
        "line": 50,
        "fullcodeline": "close (sh_err[1]);"
    },
    {
        "line": 51,
        "fullcodeline": "exit (r_sandbox_system (cmd, 0));"
    },
    {
        "line": 53,
        "fullcodeline": "outputptr = strdup (\"\");"
    },
    {
        "line": 67,
        "fullcodeline": "close (sh_err[1]);"
    },
    {
        "line": 68,
        "fullcodeline": "close (sh_in[0]);"
    },
    {
        "line": 73,
        "fullcodeline": "r_sys_signal (SIGPIPE, SIG_IGN);"
    },
    {
        "line": 128,
        "fullcodeline": "close (sh_err[0]);"
    },
    {
        "line": 129,
        "fullcodeline": "close (sh_in[1]);"
    },
    {
        "line": 130,
        "fullcodeline": "waitpid (pid, &status, 0);"
    },
    {
        "line": 131,
        "fullcodeline": "bool ret = true;"
    },
    {
        "line": 18,
        "fullcodeline": "if (pipe (sh_out)) {"
    },
    {
        "line": 54,
        "fullcodeline": "if (!outputptr) {"
    },
    {
        "line": 69,
        "fullcodeline": "if (!inputptr || !*inputptr) {"
    },
    {
        "line": 19,
        "fullcodeline": "close (sh_in[0]);"
    },
    {
        "line": 20,
        "fullcodeline": "close (sh_in[1]);"
    },
    {
        "line": 21,
        "fullcodeline": "close (sh_out[0]);"
    },
    {
        "line": 22,
        "fullcodeline": "close (sh_out[1]);"
    },
    {
        "line": 40,
        "fullcodeline": "dup2 (sh_out[1], 1);"
    },
    {
        "line": 41,
        "fullcodeline": "close (sh_out[0]);"
    },
    {
        "line": 42,
        "fullcodeline": "close (sh_out[1]);"
    },
    {
        "line": 45,
        "fullcodeline": "dup2 (sh_err[1], 2);"
    },
    {
        "line": 58,
        "fullcodeline": "*sterr = strdup (\"\");"
    },
    {
        "line": 65,
        "fullcodeline": "close (sh_out[1]);"
    },
    {
        "line": 70,
        "fullcodeline": "close (sh_in[1]);"
    },
    {
        "line": 77,
        "fullcodeline": "FD_ZERO (&rfds);"
    },
    {
        "line": 78,
        "fullcodeline": "FD_ZERO (&wfds);"
    },
    {
        "line": 88,
        "fullcodeline": "memset (buffer, 0, sizeof (buffer));"
    },
    {
        "line": 89,
        "fullcodeline": "nfd = select (sh_err[0] + 1, &rfds, &wfds, NULL, NULL);"
    },
    {
        "line": 126,
        "fullcodeline": "close (sh_out[0]);"
    },
    {
        "line": 138,
        "fullcodeline": "ret = false;"
    },
    {
        "line": 142,
        "fullcodeline": "*output = outputptr;"
    },
    {
        "line": 47,
        "fullcodeline": "close (2);"
    },
    {
        "line": 59,
        "fullcodeline": "if (!*sterr) {"
    },
    {
        "line": 85,
        "fullcodeline": "if (inputptr && *inputptr) {"
    },
    {
        "line": 90,
        "fullcodeline": "if (nfd < 0) {"
    },
    {
        "line": 93,
        "fullcodeline": "if (output && FD_ISSET (sh_out[0], &rfds)) {"
    },
    {
        "line": 144,
        "fullcodeline": "free (outputptr);"
    },
    {
        "line": 60,
        "fullcodeline": "free (outputptr);"
    },
    {
        "line": 80,
        "fullcodeline": "FD_SET (sh_out[0], &rfds);"
    },
    {
        "line": 83,
        "fullcodeline": "FD_SET (sh_err[0], &rfds);"
    },
    {
        "line": 86,
        "fullcodeline": "FD_SET (sh_in[1], &wfds);"
    },
    {
        "line": 97,
        "fullcodeline": "buffer[sizeof (buffer) - 1] = '\\0';"
    },
    {
        "line": 101,
        "fullcodeline": "outputptr = r_str_append (outputptr, buffer);"
    },
    {
        "line": 94,
        "fullcodeline": "if (!(bytes = read (sh_out[0], buffer, sizeof (buffer)-1))) {"
    },
    {
        "line": 99,
        "fullcodeline": "*len += bytes;"
    },
    {
        "line": 102,
        "fullcodeline": "} else if (FD_ISSET (sh_err[0], &rfds) && sterr) {"
    },
    {
        "line": 106,
        "fullcodeline": "buffer[sizeof (buffer) - 1] = '\\0';"
    },
    {
        "line": 107,
        "fullcodeline": "*sterr = r_str_append (*sterr, buffer);"
    },
    {
        "line": 103,
        "fullcodeline": "if (!read (sh_err[0], buffer, sizeof (buffer)-1)) {"
    },
    {
        "line": 108,
        "fullcodeline": "} else if (FD_ISSET (sh_in[1], &wfds) && inputptr && *inputptr) {"
    },
    {
        "line": 109,
        "fullcodeline": "int inputptr_len = strlen (inputptr);"
    },
    {
        "line": 110,
        "fullcodeline": "bytes = write (sh_in[1], inputptr, inputptr_len);"
    },
    {
        "line": 114,
        "fullcodeline": "inputptr += bytes;"
    },
    {
        "line": 111,
        "fullcodeline": "if (bytes != inputptr_len) {"
    },
    {
        "line": 115,
        "fullcodeline": "if (!*inputptr) {"
    },
    {
        "line": 116,
        "fullcodeline": "close (sh_in[1]);"
    },
    {
        "line": 119,
        "fullcodeline": "if (!output && !sterr) {"
    }
]