[
    {
        "line": 5,
        "fullcodeline": "const int weights_dims_count = weights_shape.DimensionsCount();"
    },
    {
        "line": 6,
        "fullcodeline": "const int output_dims_count = output_shape.DimensionsCount();"
    },
    {
        "line": 8,
        "fullcodeline": "const int accum_depth = weights_shape.Dims(weights_dims_count - 1);"
    },
    {
        "line": 9,
        "fullcodeline": "const int output_elements = output_shape.FlatSize();"
    },
    {
        "line": 10,
        "fullcodeline": "const int input_elements = input_shape.FlatSize();"
    },
    {
        "line": 11,
        "fullcodeline": "const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);"
    },
    {
        "line": 12,
        "fullcodeline": "const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,"
    },
    {
        "line": 14,
        "fullcodeline": "const int max_batch_index = batches - 1;"
    },
    {
        "line": 15,
        "fullcodeline": "const int max_output = max_batch_index * output_depth + w0_size;"
    },
    {
        "line": 16,
        "fullcodeline": "const int max_batch_depth = accum_depth * max_batch_index;"
    },
    {
        "line": 19,
        "fullcodeline": "if (output_elements < max_output) return false;"
    },
    {
        "line": 22,
        "fullcodeline": "for (int i = 0; i < sparsity->dim_metadata[1].array_indices->size; ++i) {"
    },
    {
        "line": 13,
        "fullcodeline": "output_shape, output_dims_count - 1);"
    },
    {
        "line": 23,
        "fullcodeline": "if (input_elements <="
    },
    {
        "line": 24,
        "fullcodeline": "max_batch_depth + sparsity->dim_metadata[1].array_indices->data[i])"
    }
]