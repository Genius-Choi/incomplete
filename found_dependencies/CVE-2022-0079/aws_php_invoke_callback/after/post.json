[
    {
        "line": 3,
        "fullcodeline": "char *error = NULL;"
    },
    {
        "line": 4,
        "fullcodeline": "zend_fcall_info fci = {0};"
    },
    {
        "line": 5,
        "fullcodeline": "zend_fcall_info_cache fcc = empty_fcall_info_cache;"
    },
    {
        "line": 11,
        "fullcodeline": "const size_t num_args = strlen(arg_types);"
    },
    {
        "line": 12,
        "fullcodeline": "zval *stack = alloca(sizeof(zval) * num_args);"
    },
    {
        "line": 13,
        "fullcodeline": "int arg_idx = 0;"
    },
    {
        "line": 15,
        "fullcodeline": "va_start(va, arg_types);"
    },
    {
        "line": 71,
        "fullcodeline": "va_end(va);"
    },
    {
        "line": 78,
        "fullcodeline": "zval **arg_ptrs = alloca(sizeof(zval *) * num_args);"
    },
    {
        "line": 79,
        "fullcodeline": "zval ***args = alloca(sizeof(zval **) * num_args);"
    },
    {
        "line": 84,
        "fullcodeline": "fci.param_count = num_args;"
    },
    {
        "line": 85,
        "fullcodeline": "fci.params = args;"
    },
    {
        "line": 91,
        "fullcodeline": "zval *retval5 = NULL;"
    },
    {
        "line": 92,
        "fullcodeline": "fci.retval_ptr_ptr = &retval5;"
    },
    {
        "line": 6,
        "fullcodeline": "if (zend_fcall_info_init(callback, IS_CALLABLE_CHECK_SYNTAX_ONLY, &fci, &fcc, NULL, &error) == FAILURE) {"
    },
    {
        "line": 16,
        "fullcodeline": "while (arg_idx < num_args) {"
    },
    {
        "line": 80,
        "fullcodeline": "for (int arg_idx = 0; arg_idx < num_args; ++arg_idx) {"
    },
    {
        "line": 97,
        "fullcodeline": "if (zend_call_function(&fci, &fcc) == FAILURE) {"
    },
    {
        "line": 7,
        "fullcodeline": "aws_php_throw_exception(\"Unable to initialize callback from callable via zend_fcall_info_init: %s\", error);"
    },
    {
        "line": 17,
        "fullcodeline": "const char arg_type = arg_types[arg_idx];"
    },
    {
        "line": 69,
        "fullcodeline": "++arg_idx;"
    },
    {
        "line": 81,
        "fullcodeline": "arg_ptrs[arg_idx] = &stack[arg_idx];"
    },
    {
        "line": 82,
        "fullcodeline": "args[arg_idx] = &arg_ptrs[arg_idx];"
    },
    {
        "line": 98,
        "fullcodeline": "aws_php_throw_exception(\"zend_call_function failed in aws_php_invoke_callback\");"
    },
    {
        "line": 104,
        "fullcodeline": "ZVAL_ZVAL(&retval, retval5, 1, 1);"
    },
    {
        "line": 63,
        "fullcodeline": "aws_php_throw_exception(\"Unsupported argument type to aws_php_invoke_callback: %c\", arg_type);"
    },
    {
        "line": 66,
        "fullcodeline": "aws_php_throw_exception(\"Unsupported argument type to aws_php_invoke_callback: %c\", arg_type);"
    },
    {
        "line": 27,
        "fullcodeline": "ZVAL_ZVAL(&stack[arg_idx], zval_val, 0, 0);"
    },
    {
        "line": 34,
        "fullcodeline": "const size_t len = va_arg(va, size_t);"
    },
    {
        "line": 35,
        "fullcodeline": "aws_php_zval_stringl(&stack[arg_idx], buf, len);"
    },
    {
        "line": 41,
        "fullcodeline": "ZVAL_BOOL(&stack[arg_idx], bool_val);"
    },
    {
        "line": 46,
        "fullcodeline": "ZVAL_DOUBLE(&stack[arg_idx], double_val);"
    },
    {
        "line": 50,
        "fullcodeline": "zend_ulong long_val = va_arg(va, zend_ulong);"
    },
    {
        "line": 51,
        "fullcodeline": "ZVAL_LONG(&stack[arg_idx], long_val);"
    }
]