[
    {
        "line": 5,
        "fullcodeline": "int cc, dct_dc_size, dct_diff, code, j, idx = 1, group = 0, run = 0,"
    },
    {
        "line": 11,
        "fullcodeline": "const int min = -1 *  (1 << (s->avctx->bits_per_raw_sample + 6));"
    },
    {
        "line": 12,
        "fullcodeline": "const int max =      ((1 << (s->avctx->bits_per_raw_sample + 6)) - 1);"
    },
    {
        "line": 14,
        "fullcodeline": "mismatch = 1;"
    },
    {
        "line": 16,
        "fullcodeline": "memset(block, 0, 64 * sizeof(int32_t));"
    },
    {
        "line": 46,
        "fullcodeline": "s->last_dc[cc] += dct_diff;"
    },
    {
        "line": 54,
        "fullcodeline": "block[0] = av_clip(block[0], min, max);"
    },
    {
        "line": 55,
        "fullcodeline": "mismatch ^= block[0];"
    },
    {
        "line": 113,
        "fullcodeline": "block[63] ^= mismatch & 1;"
    },
    {
        "line": 18,
        "fullcodeline": "if (n < 4) {"
    },
    {
        "line": 31,
        "fullcodeline": "if (dct_dc_size < 0) {"
    },
    {
        "line": 19,
        "fullcodeline": "cc = 0;"
    },
    {
        "line": 20,
        "fullcodeline": "dct_dc_size = get_vlc2(&s->gb, ctx->studio_luma_dc.table, STUDIO_INTRA_BITS, 2);"
    },
    {
        "line": 21,
        "fullcodeline": "quant_matrix = s->intra_matrix;"
    },
    {
        "line": 32,
        "fullcodeline": "av_log(s->avctx, AV_LOG_ERROR, \"illegal dct_dc_size vlc\\n\");"
    },
    {
        "line": 49,
        "fullcodeline": "block[0] = s->last_dc[cc] * (8 >> s->intra_dc_precision);"
    },
    {
        "line": 59,
        "fullcodeline": "group = get_vlc2(&s->gb, cur_vlc->table, STUDIO_INTRA_BITS, 2);"
    },
    {
        "line": 108,
        "fullcodeline": "block[j] = ((8 * 2 * block[j] * quant_matrix[j] * s->qscale) >> s->dct_precision) / 32;"
    },
    {
        "line": 109,
        "fullcodeline": "block[j] = av_clip(block[j], min, max);"
    },
    {
        "line": 110,
        "fullcodeline": "mismatch ^= block[j];"
    },
    {
        "line": 23,
        "fullcodeline": "cc = (n & 1) + 1;"
    },
    {
        "line": 28,
        "fullcodeline": "quant_matrix = s->chroma_intra_matrix;"
    },
    {
        "line": 51,
        "fullcodeline": "block[0] = s->last_dc[cc] * (8 >> s->intra_dc_precision) * (8 >> s->dct_precision);"
    },
    {
        "line": 61,
        "fullcodeline": "if (group < 0) {"
    },
    {
        "line": 69,
        "fullcodeline": "if (group == 0) {"
    },
    {
        "line": 34,
        "fullcodeline": "} else if (dct_dc_size == 0) {"
    },
    {
        "line": 62,
        "fullcodeline": "av_log(s->avctx, AV_LOG_ERROR, \"illegal ac coefficient group vlc\\n\");"
    },
    {
        "line": 25,
        "fullcodeline": "dct_dc_size = get_vlc2(&s->gb, ctx->studio_luma_dc.table, STUDIO_INTRA_BITS, 2);"
    },
    {
        "line": 35,
        "fullcodeline": "dct_diff = 0;"
    },
    {
        "line": 27,
        "fullcodeline": "dct_dc_size = get_vlc2(&s->gb, ctx->studio_chroma_dc.table, STUDIO_INTRA_BITS, 2);"
    },
    {
        "line": 37,
        "fullcodeline": "dct_diff = get_xbits(&s->gb, dct_dc_size);"
    },
    {
        "line": 72,
        "fullcodeline": "} else if (group >= 1 && group <= 6) {"
    },
    {
        "line": 39,
        "fullcodeline": "if (dct_dc_size > 8) {"
    },
    {
        "line": 74,
        "fullcodeline": "run = 1 << additional_code_len;"
    },
    {
        "line": 77,
        "fullcodeline": "idx += run;"
    },
    {
        "line": 40,
        "fullcodeline": "if(!check_marker(s->avctx, &s->gb, \"dct_dc_size > 8\"))"
    },
    {
        "line": 76,
        "fullcodeline": "run += get_bits(&s->gb, additional_code_len);"
    },
    {
        "line": 79,
        "fullcodeline": "} else if (group >= 7 && group <= 12) {"
    },
    {
        "line": 81,
        "fullcodeline": "code = get_bits(&s->gb, additional_code_len);"
    },
    {
        "line": 82,
        "fullcodeline": "sign = code & 1;"
    },
    {
        "line": 83,
        "fullcodeline": "code >>= 1;"
    },
    {
        "line": 84,
        "fullcodeline": "run = (1 << (additional_code_len - 1)) + code;"
    },
    {
        "line": 85,
        "fullcodeline": "idx += run;"
    },
    {
        "line": 88,
        "fullcodeline": "j = scantable[idx++];"
    },
    {
        "line": 89,
        "fullcodeline": "block[j] = sign ? 1 : -1;"
    },
    {
        "line": 86,
        "fullcodeline": "if (idx > 63)"
    },
    {
        "line": 90,
        "fullcodeline": "} else if (group >= 13 && group <= 20) {"
    },
    {
        "line": 94,
        "fullcodeline": "j = scantable[idx++];"
    },
    {
        "line": 95,
        "fullcodeline": "block[j] = get_xbits(&s->gb, additional_code_len);"
    },
    {
        "line": 92,
        "fullcodeline": "if (idx > 63)"
    },
    {
        "line": 96,
        "fullcodeline": "} else if (group == 21) {"
    },
    {
        "line": 100,
        "fullcodeline": "j = scantable[idx++];"
    },
    {
        "line": 101,
        "fullcodeline": "additional_code_len = s->avctx->bits_per_raw_sample + s->dct_precision + 4;"
    },
    {
        "line": 102,
        "fullcodeline": "flc = get_bits(&s->gb, additional_code_len);"
    },
    {
        "line": 98,
        "fullcodeline": "if (idx > 63)"
    },
    {
        "line": 103,
        "fullcodeline": "if (flc >> (additional_code_len-1))"
    },
    {
        "line": 104,
        "fullcodeline": "block[j] = -1 * (( flc ^ ((1 << additional_code_len) -1)) + 1);"
    },
    {
        "line": 106,
        "fullcodeline": "block[j] = flc;"
    }
]