[
    {
        "line": 3,
        "fullcodeline": "MpegEncContext *s = &ctx->m;"
    },
    {
        "line": 8,
        "fullcodeline": "s->partitioned_frame = 0;"
    },
    {
        "line": 9,
        "fullcodeline": "s->decode_mb = mpeg4_decode_studio_mb;"
    },
    {
        "line": 11,
        "fullcodeline": "decode_smpte_tc(ctx, gb);"
    },
    {
        "line": 13,
        "fullcodeline": "skip_bits(gb, 10); /* temporal_reference */"
    },
    {
        "line": 14,
        "fullcodeline": "skip_bits(gb, 2); /* vop_structure */"
    },
    {
        "line": 15,
        "fullcodeline": "s->pict_type = get_bits(gb, 2) + AV_PICTURE_TYPE_I; /* vop_coding_type */"
    },
    {
        "line": 47,
        "fullcodeline": "mpeg4_load_default_matrices(s);"
    },
    {
        "line": 49,
        "fullcodeline": "next_start_code_studio(gb);"
    },
    {
        "line": 50,
        "fullcodeline": "extension_and_user_data(s, gb, 4);"
    },
    {
        "line": 5,
        "fullcodeline": "if (get_bits_left(gb) <= 32)"
    },
    {
        "line": 16,
        "fullcodeline": "if (get_bits1(gb)) { /* vop_coded */"
    },
    {
        "line": 22,
        "fullcodeline": "if (s->pict_type == AV_PICTURE_TYPE_I) {"
    },
    {
        "line": 27,
        "fullcodeline": "if (ctx->shape != BIN_ONLY_SHAPE) {"
    },
    {
        "line": 17,
        "fullcodeline": "skip_bits1(gb); /* top_field_first */"
    },
    {
        "line": 18,
        "fullcodeline": "skip_bits1(gb); /* repeat_first_field */"
    },
    {
        "line": 19,
        "fullcodeline": "s->progressive_frame = get_bits1(gb) ^ 1; /* progressive_frame */"
    },
    {
        "line": 28,
        "fullcodeline": "s->alternate_scan = get_bits1(gb);"
    },
    {
        "line": 29,
        "fullcodeline": "s->frame_pred_frame_dct = get_bits1(gb);"
    },
    {
        "line": 30,
        "fullcodeline": "s->dct_precision = get_bits(gb, 2);"
    },
    {
        "line": 31,
        "fullcodeline": "s->intra_dc_precision = get_bits(gb, 2);"
    },
    {
        "line": 32,
        "fullcodeline": "s->q_scale_type = get_bits1(gb);"
    },
    {
        "line": 36,
        "fullcodeline": "ff_init_scantable(s->idsp.idct_permutation, &s->inter_scantable,   ff_alternate_vertical_scan);"
    },
    {
        "line": 37,
        "fullcodeline": "ff_init_scantable(s->idsp.idct_permutation, &s->intra_scantable,   ff_alternate_vertical_scan);"
    },
    {
        "line": 38,
        "fullcodeline": "ff_init_scantable(s->idsp.idct_permutation, &s->intra_h_scantable, ff_alternate_vertical_scan);"
    },
    {
        "line": 39,
        "fullcodeline": "ff_init_scantable(s->idsp.idct_permutation, &s->intra_v_scantable, ff_alternate_vertical_scan);"
    },
    {
        "line": 23,
        "fullcodeline": "if (get_bits1(gb))"
    },
    {
        "line": 41,
        "fullcodeline": "ff_init_scantable(s->idsp.idct_permutation, &s->inter_scantable,   ff_zigzag_direct);"
    },
    {
        "line": 42,
        "fullcodeline": "ff_init_scantable(s->idsp.idct_permutation, &s->intra_scantable,   ff_zigzag_direct);"
    },
    {
        "line": 43,
        "fullcodeline": "ff_init_scantable(s->idsp.idct_permutation, &s->intra_h_scantable, ff_alternate_horizontal_scan);"
    },
    {
        "line": 44,
        "fullcodeline": "ff_init_scantable(s->idsp.idct_permutation, &s->intra_v_scantable, ff_alternate_vertical_scan);"
    },
    {
        "line": 24,
        "fullcodeline": "reset_studio_dc_predictors(s);"
    }
]