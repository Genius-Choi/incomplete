[
    {
        "line": 15,
        "fullcodeline": "char szLine[2048], szText[2048], *ptr;"
    },
    {
        "line": 16,
        "fullcodeline": "unsigned short uniLine[5000], uniText[5000], *sptr;"
    },
    {
        "line": 18,
        "fullcodeline": "srt_in = gf_fopen(import->in_name, \"rt\");"
    },
    {
        "line": 19,
        "fullcodeline": "gf_fseek(srt_in, 0, SEEK_END);"
    },
    {
        "line": 20,
        "fullcodeline": "file_size = gf_ftell(srt_in);"
    },
    {
        "line": 21,
        "fullcodeline": "gf_fseek(srt_in, 0, SEEK_SET);"
    },
    {
        "line": 23,
        "fullcodeline": "unicode_type = gf_text_get_utf_type(srt_in);"
    },
    {
        "line": 29,
        "fullcodeline": "cfg = NULL;"
    },
    {
        "line": 52,
        "fullcodeline": "track = gf_isom_new_track(import->dest, ID, GF_ISOM_MEDIA_TEXT, timescale);"
    },
    {
        "line": 57,
        "fullcodeline": "gf_isom_set_track_enabled(import->dest, track, 1);"
    },
    {
        "line": 58,
        "fullcodeline": "import->final_trackID = gf_isom_get_track_id(import->dest, track);"
    },
    {
        "line": 130,
        "fullcodeline": "gf_text_import_set_language(import, track);"
    },
    {
        "line": 131,
        "fullcodeline": "duration = (u32) (((Double) import->duration)*timescale/1000.0);"
    },
    {
        "line": 133,
        "fullcodeline": "default_color = rec.text_color;"
    },
    {
        "line": 135,
        "fullcodeline": "e = GF_OK;"
    },
    {
        "line": 136,
        "fullcodeline": "state = 0;"
    },
    {
        "line": 137,
        "fullcodeline": "end = prev_end = 0;"
    },
    {
        "line": 138,
        "fullcodeline": "curLine = 0;"
    },
    {
        "line": 139,
        "fullcodeline": "txt_line = 0;"
    },
    {
        "line": 140,
        "fullcodeline": "set_start_char = set_end_char = GF_FALSE;"
    },
    {
        "line": 141,
        "fullcodeline": "char_len = 0;"
    },
    {
        "line": 142,
        "fullcodeline": "start = 0;"
    },
    {
        "line": 143,
        "fullcodeline": "nb_samp = 0;"
    },
    {
        "line": 144,
        "fullcodeline": "samp = gf_isom_new_text_sample();"
    },
    {
        "line": 146,
        "fullcodeline": "first_samp = GF_TRUE;"
    },
    {
        "line": 450,
        "fullcodeline": "gf_isom_delete_text_sample(samp);"
    },
    {
        "line": 451,
        "fullcodeline": "gf_set_progress(\"Importing SRT\", nb_samp, nb_samp);"
    },
    {
        "line": 455,
        "fullcodeline": "gf_fclose(srt_in);"
    },
    {
        "line": 24,
        "fullcodeline": "if (unicode_type<0) {"
    },
    {
        "line": 51,
        "fullcodeline": "if (cfg && cfg->timescale) timescale = cfg->timescale;"
    },
    {
        "line": 53,
        "fullcodeline": "if (!track) {"
    },
    {
        "line": 59,
        "fullcodeline": "if (import->esd && !import->esd->ESID) import->esd->ESID = import->final_trackID;"
    },
    {
        "line": 434,
        "fullcodeline": "if (end && !(import->flags & GF_IMPORT_NO_TEXT_FLUSH ) ) {"
    },
    {
        "line": 25,
        "fullcodeline": "gf_fclose(srt_in);"
    },
    {
        "line": 36,
        "fullcodeline": "timescale = import->esd->slConfig->timestampResolution;"
    },
    {
        "line": 54,
        "fullcodeline": "gf_fclose(srt_in);"
    },
    {
        "line": 61,
        "fullcodeline": "if (OCR_ES_ID) gf_isom_set_track_reference(import->dest, track, GF_ISOM_REF_OCR, OCR_ES_ID);"
    },
    {
        "line": 65,
        "fullcodeline": "char *firstFont = NULL;"
    },
    {
        "line": 67,
        "fullcodeline": "gf_isom_set_track_layout_info(import->dest, track, cfg->text_width<<16, cfg->text_height<<16, 0, 0, cfg->layer);"
    },
    {
        "line": 70,
        "fullcodeline": "count = gf_list_count(cfg->sample_descriptions);"
    },
    {
        "line": 88,
        "fullcodeline": "gf_import_message(import, GF_OK, \"Timed Text (SRT) import - text track %d x %d, font %s (size %d)\", cfg->text_width, cfg->text_height, firstFont, rec.font_size);"
    },
    {
        "line": 90,
        "fullcodeline": "gf_odf_desc_del((GF_Descriptor *)cfg);"
    },
    {
        "line": 148,
        "fullcodeline": "char *sOK = gf_text_get_utf8_line(szLine, 2048, srt_in, unicode_type);"
    },
    {
        "line": 150,
        "fullcodeline": "if (sOK) REM_TRAIL_MARKS(szLine, \"\\r\\n\\t \")"
    },
    {
        "line": 435,
        "fullcodeline": "gf_isom_text_reset(samp);"
    },
    {
        "line": 436,
        "fullcodeline": "s = gf_isom_text_to_sample(samp);"
    },
    {
        "line": 437,
        "fullcodeline": "s->DTS = (u64) ((timescale*end)/1000);"
    },
    {
        "line": 438,
        "fullcodeline": "s->IsRAP = RAP;"
    },
    {
        "line": 439,
        "fullcodeline": "gf_isom_add_sample(import->dest, track, 1, s);"
    },
    {
        "line": 440,
        "fullcodeline": "gf_isom_sample_del(&s);"
    },
    {
        "line": 441,
        "fullcodeline": "nb_samp++;"
    },
    {
        "line": 442,
        "fullcodeline": "gf_isom_set_last_sample_duration(import->dest, track, 0);"
    },
    {
        "line": 454,
        "fullcodeline": "if (e) gf_isom_remove_track(import->dest, track);"
    },
    {
        "line": 26,
        "fullcodeline": "return gf_import_message(import, GF_NOT_SUPPORTED, \"Unsupported SRT UTF encoding\");"
    },
    {
        "line": 37,
        "fullcodeline": "if (!timescale) timescale = 1000;"
    },
    {
        "line": 40,
        "fullcodeline": "if (import->esd->decoderConfig && import->esd->decoderConfig->decoderSpecificInfo->tag == GF_ODF_TEXT_CFG_TAG) {"
    },
    {
        "line": 47,
        "fullcodeline": "timescale = 1000;"
    },
    {
        "line": 48,
        "fullcodeline": "OCR_ES_ID = ID = 0;"
    },
    {
        "line": 55,
        "fullcodeline": "return gf_import_message(import, gf_isom_last_error(import->dest), \"Error creating text track\");"
    },
    {
        "line": 71,
        "fullcodeline": "for (i=0; i<count; i++) {"
    },
    {
        "line": 94,
        "fullcodeline": "gf_text_get_video_size(import, &w, &h);"
    },
    {
        "line": 98,
        "fullcodeline": "gf_isom_set_track_layout_info(import->dest, track, w<<16, h<<16, 0, 0, 0);"
    },
    {
        "line": 99,
        "fullcodeline": "sd = (GF_TextSampleDescriptor*)gf_odf_desc_new(GF_ODF_TX3G_TAG);"
    },
    {
        "line": 101,
        "fullcodeline": "sd->font_count = 1;"
    },
    {
        "line": 102,
        "fullcodeline": "sd->fonts[0].fontID = 1;"
    },
    {
        "line": 103,
        "fullcodeline": "sd->fonts[0].fontName = gf_strdup(import->fontName ? import->fontName : \"Serif\");"
    },
    {
        "line": 104,
        "fullcodeline": "sd->back_color = 0x00000000;\t/*transparent*/"
    },
    {
        "line": 105,
        "fullcodeline": "sd->default_style.fontID = 1;"
    },
    {
        "line": 106,
        "fullcodeline": "sd->default_style.font_size = import->fontSize ? import->fontSize : TTXT_DEFAULT_FONT_SIZE;"
    },
    {
        "line": 107,
        "fullcodeline": "sd->default_style.text_color = 0xFFFFFFFF;\t/*white*/"
    },
    {
        "line": 108,
        "fullcodeline": "sd->default_style.style_flags = 0;"
    },
    {
        "line": 109,
        "fullcodeline": "sd->horiz_justif = 1; /*center of scene*/"
    },
    {
        "line": 110,
        "fullcodeline": "sd->vert_justif = (s8) -1;\t/*bottom of scene*/"
    },
    {
        "line": 124,
        "fullcodeline": "rec = sd->default_style;"
    },
    {
        "line": 125,
        "fullcodeline": "gf_isom_new_text_description(import->dest, track, sd, NULL, NULL, &state);"
    },
    {
        "line": 127,
        "fullcodeline": "gf_import_message(import, GF_OK, \"Timed Text (SRT) import - text track %d x %d, font %s (size %d)\", w, h, sd->fonts[0].fontName, rec.font_size);"
    },
    {
        "line": 128,
        "fullcodeline": "gf_odf_desc_del((GF_Descriptor *)sd);"
    },
    {
        "line": 151,
        "fullcodeline": "if (!sOK || !strlen(szLine)) {"
    },
    {
        "line": 427,
        "fullcodeline": "if (duration && (start >= duration)) {"
    },
    {
        "line": 32,
        "fullcodeline": "import->esd->slConfig = (GF_SLConfig *) gf_odf_desc_new(GF_ODF_SLC_TAG);"
    },
    {
        "line": 33,
        "fullcodeline": "import->esd->slConfig->predefined = 2;"
    },
    {
        "line": 34,
        "fullcodeline": "import->esd->slConfig->timestampResolution = 1000;"
    },
    {
        "line": 41,
        "fullcodeline": "cfg = (GF_TextConfig *) import->esd->decoderConfig->decoderSpecificInfo;"
    },
    {
        "line": 42,
        "fullcodeline": "import->esd->decoderConfig->decoderSpecificInfo = NULL;"
    },
    {
        "line": 72,
        "fullcodeline": "GF_TextSampleDescriptor *sd= (GF_TextSampleDescriptor *)gf_list_get(cfg->sample_descriptions, i);"
    },
    {
        "line": 85,
        "fullcodeline": "gf_isom_new_text_description(import->dest, track, sd, NULL, NULL, &state);"
    },
    {
        "line": 112,
        "fullcodeline": "if (import->flags & GF_IMPORT_SKIP_TXT_BOX) {"
    },
    {
        "line": 152,
        "fullcodeline": "rec.style_flags = 0;"
    },
    {
        "line": 153,
        "fullcodeline": "rec.startCharOffset = rec.endCharOffset = 0;"
    },
    {
        "line": 187,
        "fullcodeline": "state = 0;"
    },
    {
        "line": 199,
        "fullcodeline": "curLine = line;"
    },
    {
        "line": 200,
        "fullcodeline": "state = 1;"
    },
    {
        "line": 210,
        "fullcodeline": "start = (3600*sh + 60*sm + ss)*1000 + sms;"
    },
    {
        "line": 216,
        "fullcodeline": "end = (3600*eh + 60*em + es)*1000 + ems;"
    },
    {
        "line": 225,
        "fullcodeline": "rec.style_flags = 0;"
    },
    {
        "line": 226,
        "fullcodeline": "state = 2;"
    },
    {
        "line": 236,
        "fullcodeline": "first_samp = GF_FALSE;"
    },
    {
        "line": 244,
        "fullcodeline": "ptr = (char *) szLine;"
    },
    {
        "line": 253,
        "fullcodeline": "i=j=0;"
    },
    {
        "line": 254,
        "fullcodeline": "rem_styles = 0;"
    },
    {
        "line": 255,
        "fullcodeline": "rem_color = 0;"
    },
    {
        "line": 416,
        "fullcodeline": "char_line = j;"
    },
    {
        "line": 417,
        "fullcodeline": "uniText[j] = 0;"
    },
    {
        "line": 419,
        "fullcodeline": "sptr = (u16 *) uniText;"
    },
    {
        "line": 420,
        "fullcodeline": "len = (u32) gf_utf8_wcstombs(szText, 5000, (const u16 **) &sptr);"
    },
    {
        "line": 422,
        "fullcodeline": "gf_isom_text_add_text(samp, szText, len);"
    },
    {
        "line": 423,
        "fullcodeline": "char_len += char_line;"
    },
    {
        "line": 424,
        "fullcodeline": "txt_line ++;"
    },
    {
        "line": 428,
        "fullcodeline": "end = 0;"
    },
    {
        "line": 444,
        "fullcodeline": "if (duration && (start >= duration)) {"
    },
    {
        "line": 73,
        "fullcodeline": "if (!sd->font_count) {"
    },
    {
        "line": 83,
        "fullcodeline": "if (!i) rec = sd->default_style;"
    },
    {
        "line": 86,
        "fullcodeline": "if (!firstFont) firstFont = sd->fonts[0].fontName;"
    },
    {
        "line": 113,
        "fullcodeline": "sd->default_pos.top = sd->default_pos.left = sd->default_pos.right = sd->default_pos.bottom = 0;"
    },
    {
        "line": 188,
        "fullcodeline": "if (!sOK) break;"
    },
    {
        "line": 194,
        "fullcodeline": "if (sscanf(szLine, \"%u\", &line) != 1) {"
    },
    {
        "line": 198,
        "fullcodeline": "if (line != curLine + 1) gf_import_message(import, GF_OK, \"WARNING: corrupted SRT frame %d after frame %d\", line, curLine);"
    },
    {
        "line": 203,
        "fullcodeline": "if (sscanf(szLine, \"%u:%u:%u,%u --> %u:%u:%u,%u\", &sh, &sm, &ss, &sms, &eh, &em, &es, &ems) != 8) {"
    },
    {
        "line": 211,
        "fullcodeline": "if (start<end) {"
    },
    {
        "line": 218,
        "fullcodeline": "if (first_samp && (start>0)) {"
    },
    {
        "line": 227,
        "fullcodeline": "if (end<=prev_end) {"
    },
    {
        "line": 246,
        "fullcodeline": "size_t _len = gf_utf8_mbstowcs(uniLine, 5000, (const char **) &ptr);"
    },
    {
        "line": 251,
        "fullcodeline": "len = (u32) _len;"
    },
    {
        "line": 256,
        "fullcodeline": "while (i<len) {"
    },
    {
        "line": 445,
        "fullcodeline": "gf_isom_set_last_sample_duration(import->dest, track, (timescale*duration)/1000);"
    },
    {
        "line": 75,
        "fullcodeline": "sd->font_count = 1;"
    },
    {
        "line": 76,
        "fullcodeline": "sd->fonts[0].fontID = 1;"
    },
    {
        "line": 77,
        "fullcodeline": "sd->fonts[0].fontName = gf_strdup(\"Serif\");"
    },
    {
        "line": 79,
        "fullcodeline": "if (!sd->default_style.fontID) sd->default_style.fontID = sd->fonts[0].fontID;"
    },
    {
        "line": 80,
        "fullcodeline": "if (!sd->default_style.font_size) sd->default_style.font_size = 16;"
    },
    {
        "line": 81,
        "fullcodeline": "if (!sd->default_style.text_color) sd->default_style.text_color = 0xFF000000;"
    },
    {
        "line": 168,
        "fullcodeline": "s = gf_isom_text_to_sample(samp);"
    },
    {
        "line": 177,
        "fullcodeline": "txt_line = 0;"
    },
    {
        "line": 178,
        "fullcodeline": "char_len = 0;"
    },
    {
        "line": 179,
        "fullcodeline": "set_start_char = set_end_char = GF_FALSE;"
    },
    {
        "line": 180,
        "fullcodeline": "rec.startCharOffset = rec.endCharOffset = 0;"
    },
    {
        "line": 181,
        "fullcodeline": "gf_isom_text_reset(samp);"
    },
    {
        "line": 184,
        "fullcodeline": "gf_set_progress(\"Importing SRT\", gf_ftell(srt_in), file_size);"
    },
    {
        "line": 195,
        "fullcodeline": "e = gf_import_message(import, GF_CORRUPTED_DATA, \"Bad SRT formatting - expecting number got \\\"%s\\\"\", szLine);"
    },
    {
        "line": 204,
        "fullcodeline": "sh = eh = 0;"
    },
    {
        "line": 213,
        "fullcodeline": "start = end;"
    },
    {
        "line": 219,
        "fullcodeline": "s = gf_isom_text_to_sample(samp);"
    },
    {
        "line": 220,
        "fullcodeline": "s->DTS = 0;"
    },
    {
        "line": 221,
        "fullcodeline": "gf_isom_add_sample(import->dest, track, 1, s);"
    },
    {
        "line": 222,
        "fullcodeline": "gf_isom_sample_del(&s);"
    },
    {
        "line": 223,
        "fullcodeline": "nb_samp++;"
    },
    {
        "line": 229,
        "fullcodeline": "start = end;"
    },
    {
        "line": 230,
        "fullcodeline": "state = 3;"
    },
    {
        "line": 240,
        "fullcodeline": "gf_isom_text_add_text(samp, \"\\n\", 1);"
    },
    {
        "line": 241,
        "fullcodeline": "char_len += 1;"
    },
    {
        "line": 247,
        "fullcodeline": "if (_len == (size_t) -1) {"
    },
    {
        "line": 257,
        "fullcodeline": "u32 font_style = 0;"
    },
    {
        "line": 258,
        "fullcodeline": "u32 style_nb_chars = 0;"
    },
    {
        "line": 259,
        "fullcodeline": "u32 style_def_type = 0;"
    },
    {
        "line": 403,
        "fullcodeline": "uniText[j] = uniLine[i];"
    },
    {
        "line": 404,
        "fullcodeline": "j++;"
    },
    {
        "line": 405,
        "fullcodeline": "i++;"
    },
    {
        "line": 409,
        "fullcodeline": "gf_isom_text_add_style(samp, &rec);"
    },
    {
        "line": 410,
        "fullcodeline": "set_end_char = GF_FALSE;"
    },
    {
        "line": 411,
        "fullcodeline": "set_start_char = GF_TRUE;"
    },
    {
        "line": 412,
        "fullcodeline": "rec.startCharOffset = char_len + j;"
    },
    {
        "line": 413,
        "fullcodeline": "rec.style_flags &= ~rem_styles;"
    },
    {
        "line": 447,
        "fullcodeline": "gf_isom_set_last_sample_duration(import->dest, track, 0);"
    },
    {
        "line": 115,
        "fullcodeline": "if ((sd->default_pos.bottom==sd->default_pos.top) || (sd->default_pos.right==sd->default_pos.left)) {"
    },
    {
        "line": 155,
        "fullcodeline": "if (prev_end && (start != prev_end)) {"
    },
    {
        "line": 169,
        "fullcodeline": "if (state<=2) {"
    },
    {
        "line": 185,
        "fullcodeline": "if (duration && (end >= duration)) break;"
    },
    {
        "line": 205,
        "fullcodeline": "if (sscanf(szLine, \"%u:%u,%u --> %u:%u,%u\", &sm, &ss, &sms, &em, &es, &ems) != 6) {"
    },
    {
        "line": 248,
        "fullcodeline": "e = gf_import_message(import, GF_CORRUPTED_DATA, \"Invalid UTF data (line %d)\", curLine);"
    },
    {
        "line": 261,
        "fullcodeline": "if ( (uniLine[i]=='<') && (uniLine[i+2]=='>')) {"
    },
    {
        "line": 310,
        "fullcodeline": "if (style_def_type==1)  {"
    },
    {
        "line": 360,
        "fullcodeline": "if (style_def_type==2)  {"
    },
    {
        "line": 116,
        "fullcodeline": "sd->default_pos.left = import->text_x;"
    },
    {
        "line": 117,
        "fullcodeline": "sd->default_pos.top = import->text_y;"
    },
    {
        "line": 118,
        "fullcodeline": "sd->default_pos.right = (import->text_width ? import->text_width : w) + sd->default_pos.left;"
    },
    {
        "line": 119,
        "fullcodeline": "sd->default_pos.bottom = (import->text_height ? import->text_height : h) + sd->default_pos.top;"
    },
    {
        "line": 156,
        "fullcodeline": "GF_TextSample * empty_samp = gf_isom_new_text_sample();"
    },
    {
        "line": 157,
        "fullcodeline": "s = gf_isom_text_to_sample(empty_samp);"
    },
    {
        "line": 158,
        "fullcodeline": "gf_isom_delete_text_sample(empty_samp);"
    },
    {
        "line": 165,
        "fullcodeline": "gf_isom_sample_del(&s);"
    },
    {
        "line": 170,
        "fullcodeline": "s->DTS = (u64) ((timescale*start)/1000);"
    },
    {
        "line": 171,
        "fullcodeline": "s->IsRAP = RAP;"
    },
    {
        "line": 172,
        "fullcodeline": "gf_isom_add_sample(import->dest, track, 1, s);"
    },
    {
        "line": 173,
        "fullcodeline": "gf_isom_sample_del(&s);"
    },
    {
        "line": 174,
        "fullcodeline": "nb_samp++;"
    },
    {
        "line": 175,
        "fullcodeline": "prev_end = end;"
    },
    {
        "line": 206,
        "fullcodeline": "e = gf_import_message(import, GF_CORRUPTED_DATA, \"Error scanning SRT frame %d timing\", curLine);"
    },
    {
        "line": 262,
        "fullcodeline": "style_nb_chars = 3;"
    },
    {
        "line": 263,
        "fullcodeline": "style_def_type = 1;"
    },
    {
        "line": 355,
        "fullcodeline": "i += style_nb_chars;"
    },
    {
        "line": 388,
        "fullcodeline": "i+=style_nb_chars;"
    },
    {
        "line": 393,
        "fullcodeline": "gf_isom_text_add_style(samp, &rec);"
    },
    {
        "line": 394,
        "fullcodeline": "set_end_char = GF_FALSE;"
    },
    {
        "line": 395,
        "fullcodeline": "set_start_char = GF_TRUE;"
    },
    {
        "line": 396,
        "fullcodeline": "rec.startCharOffset = char_len + j;"
    },
    {
        "line": 397,
        "fullcodeline": "rec.style_flags &= ~rem_styles;"
    },
    {
        "line": 398,
        "fullcodeline": "rem_styles = 0;"
    },
    {
        "line": 399,
        "fullcodeline": "rec.text_color = default_color;"
    },
    {
        "line": 400,
        "fullcodeline": "rem_color = 0;"
    },
    {
        "line": 159,
        "fullcodeline": "if (state<=2) {"
    },
    {
        "line": 323,
        "fullcodeline": "if (set_start_char && (rec.startCharOffset != j)) {"
    },
    {
        "line": 160,
        "fullcodeline": "s->DTS = (u64) ((timescale*prev_end)/1000);"
    },
    {
        "line": 161,
        "fullcodeline": "s->IsRAP = RAP;"
    },
    {
        "line": 162,
        "fullcodeline": "gf_isom_add_sample(import->dest, track, 1, s);"
    },
    {
        "line": 163,
        "fullcodeline": "nb_samp++;"
    },
    {
        "line": 265,
        "fullcodeline": "else if ( (uniLine[i]=='<') && (uniLine[i+1]=='/') && (uniLine[i+3]=='>')) {"
    },
    {
        "line": 313,
        "fullcodeline": "assert(set_start_char);"
    },
    {
        "line": 314,
        "fullcodeline": "gf_isom_text_add_style(samp, &rec);"
    },
    {
        "line": 315,
        "fullcodeline": "set_end_char = set_start_char = GF_FALSE;"
    },
    {
        "line": 316,
        "fullcodeline": "rec.style_flags &= ~rem_styles;"
    },
    {
        "line": 317,
        "fullcodeline": "rem_styles = 0;"
    },
    {
        "line": 324,
        "fullcodeline": "rec.endCharOffset = char_len + j;"
    },
    {
        "line": 327,
        "fullcodeline": "switch (uniLine[i+1]) {"
    },
    {
        "line": 330,
        "fullcodeline": "rec.style_flags |= GF_TXT_STYLE_BOLD;"
    },
    {
        "line": 331,
        "fullcodeline": "set_start_char = GF_TRUE;"
    },
    {
        "line": 332,
        "fullcodeline": "rec.startCharOffset = char_len + j;"
    },
    {
        "line": 336,
        "fullcodeline": "rec.style_flags |= GF_TXT_STYLE_ITALIC;"
    },
    {
        "line": 337,
        "fullcodeline": "set_start_char = GF_TRUE;"
    },
    {
        "line": 338,
        "fullcodeline": "rec.startCharOffset = char_len + j;"
    },
    {
        "line": 342,
        "fullcodeline": "rec.style_flags |= GF_TXT_STYLE_UNDERLINED;"
    },
    {
        "line": 343,
        "fullcodeline": "set_start_char = GF_TRUE;"
    },
    {
        "line": 344,
        "fullcodeline": "rec.startCharOffset = char_len + j;"
    },
    {
        "line": 361,
        "fullcodeline": "switch (uniLine[i+2]) {"
    },
    {
        "line": 364,
        "fullcodeline": "rem_styles |= GF_TXT_STYLE_BOLD;"
    },
    {
        "line": 365,
        "fullcodeline": "set_end_char = GF_TRUE;"
    },
    {
        "line": 366,
        "fullcodeline": "rec.endCharOffset = char_len + j;"
    },
    {
        "line": 370,
        "fullcodeline": "rem_styles |= GF_TXT_STYLE_ITALIC;"
    },
    {
        "line": 371,
        "fullcodeline": "set_end_char = GF_TRUE;"
    },
    {
        "line": 372,
        "fullcodeline": "rec.endCharOffset = char_len + j;"
    },
    {
        "line": 376,
        "fullcodeline": "rem_styles |= GF_TXT_STYLE_UNDERLINED;"
    },
    {
        "line": 377,
        "fullcodeline": "set_end_char = GF_TRUE;"
    },
    {
        "line": 378,
        "fullcodeline": "rec.endCharOffset = char_len + j;"
    },
    {
        "line": 266,
        "fullcodeline": "style_def_type = 2;"
    },
    {
        "line": 267,
        "fullcodeline": "style_nb_chars = 4;"
    },
    {
        "line": 319,
        "fullcodeline": "rec.text_color = default_color;"
    },
    {
        "line": 320,
        "fullcodeline": "rem_color = 0;"
    },
    {
        "line": 325,
        "fullcodeline": "if (rec.style_flags) gf_isom_text_add_style(samp, &rec);"
    },
    {
        "line": 349,
        "fullcodeline": "rec.text_color = font_style;"
    },
    {
        "line": 350,
        "fullcodeline": "set_start_char = GF_TRUE;"
    },
    {
        "line": 351,
        "fullcodeline": "rec.startCharOffset = char_len + j;"
    },
    {
        "line": 383,
        "fullcodeline": "rem_color = 1;"
    },
    {
        "line": 384,
        "fullcodeline": "set_end_char = GF_TRUE;"
    },
    {
        "line": 385,
        "fullcodeline": "rec.endCharOffset = char_len + j;"
    },
    {
        "line": 269,
        "fullcodeline": "else if (uniLine[i]=='<')  {"
    },
    {
        "line": 270,
        "fullcodeline": "const unsigned short* src = uniLine + i;"
    },
    {
        "line": 271,
        "fullcodeline": "size_t alen = gf_utf8_wcstombs(szLine, 2048, (const unsigned short**) & src);"
    },
    {
        "line": 272,
        "fullcodeline": "szLine[alen] = 0;"
    },
    {
        "line": 273,
        "fullcodeline": "strlwr(szLine);"
    },
    {
        "line": 274,
        "fullcodeline": "if (!strncmp(szLine, \"<font \", 6) ) {"
    },
    {
        "line": 275,
        "fullcodeline": "char *a_sep = strstr(szLine, \"color\");"
    },
    {
        "line": 276,
        "fullcodeline": "if (a_sep) a_sep = strchr(a_sep, '\"');"
    },
    {
        "line": 278,
        "fullcodeline": "char *e_sep = strchr(a_sep+1, '\"');"
    },
    {
        "line": 292,
        "fullcodeline": "else if (!strncmp(szLine, \"</font>\", 7) ) {"
    },
    {
        "line": 293,
        "fullcodeline": "style_nb_chars = 7;"
    },
    {
        "line": 294,
        "fullcodeline": "style_def_type = 2;"
    },
    {
        "line": 295,
        "fullcodeline": "font_style = 0xFFFFFFFF;"
    },
    {
        "line": 280,
        "fullcodeline": "e_sep[0] = 0;"
    },
    {
        "line": 281,
        "fullcodeline": "font_style = gf_color_parse(a_sep+1);"
    },
    {
        "line": 282,
        "fullcodeline": "e_sep[0] = '\"';"
    },
    {
        "line": 283,
        "fullcodeline": "e_sep = strchr(e_sep+1, '>');"
    },
    {
        "line": 299,
        "fullcodeline": "char *a_sep = strstr(szLine, \">\");"
    },
    {
        "line": 285,
        "fullcodeline": "style_nb_chars = (u32) (1 + e_sep - szLine);"
    },
    {
        "line": 286,
        "fullcodeline": "style_def_type = 1;"
    },
    {
        "line": 301,
        "fullcodeline": "style_nb_chars = (u32) (a_sep - szLine);"
    },
    {
        "line": 302,
        "fullcodeline": "i += style_nb_chars;"
    }
]