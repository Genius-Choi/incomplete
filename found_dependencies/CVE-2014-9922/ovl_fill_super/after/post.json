[
    {
        "line": 13,
        "fullcodeline": "err = -ENOMEM;"
    },
    {
        "line": 14,
        "fullcodeline": "ufs = kzalloc(sizeof(struct ovl_fs), GFP_KERNEL);"
    },
    {
        "line": 18,
        "fullcodeline": "err = ovl_parse_opt((char *) data, &ufs->config);"
    },
    {
        "line": 23,
        "fullcodeline": "err = -EINVAL;"
    },
    {
        "line": 30,
        "fullcodeline": "err = -ENOMEM;"
    },
    {
        "line": 31,
        "fullcodeline": "oe = ovl_alloc_entry();"
    },
    {
        "line": 35,
        "fullcodeline": "err = ovl_mount_dir(ufs->config.upperdir, &upperpath);"
    },
    {
        "line": 39,
        "fullcodeline": "err = ovl_mount_dir(ufs->config.lowerdir, &lowerpath);"
    },
    {
        "line": 43,
        "fullcodeline": "err = ovl_mount_dir(ufs->config.workdir, &workpath);"
    },
    {
        "line": 47,
        "fullcodeline": "err = -EINVAL;"
    },
    {
        "line": 74,
        "fullcodeline": "err = vfs_statfs(&lowerpath, &statfs);"
    },
    {
        "line": 79,
        "fullcodeline": "ufs->lower_namelen = statfs.f_namelen;"
    },
    {
        "line": 81,
        "fullcodeline": "sb->s_stack_depth = max(upperpath.mnt->mnt_sb->s_stack_depth,"
    },
    {
        "line": 84,
        "fullcodeline": "err = -EINVAL;"
    },
    {
        "line": 90,
        "fullcodeline": "ufs->upper_mnt = clone_private_mount(&upperpath);"
    },
    {
        "line": 91,
        "fullcodeline": "err = PTR_ERR(ufs->upper_mnt);"
    },
    {
        "line": 97,
        "fullcodeline": "ufs->lower_mnt = clone_private_mount(&lowerpath);"
    },
    {
        "line": 98,
        "fullcodeline": "err = PTR_ERR(ufs->lower_mnt);"
    },
    {
        "line": 104,
        "fullcodeline": "ufs->workdir = ovl_workdir_create(ufs->upper_mnt, workpath.dentry);"
    },
    {
        "line": 105,
        "fullcodeline": "err = PTR_ERR(ufs->workdir);"
    },
    {
        "line": 116,
        "fullcodeline": "ufs->lower_mnt->mnt_flags |= MNT_READONLY;"
    },
    {
        "line": 122,
        "fullcodeline": "sb->s_d_op = &ovl_dentry_operations;"
    },
    {
        "line": 124,
        "fullcodeline": "err = -ENOMEM;"
    },
    {
        "line": 125,
        "fullcodeline": "root_inode = ovl_new_inode(sb, S_IFDIR, oe);"
    },
    {
        "line": 129,
        "fullcodeline": "root_dentry = d_make_root(root_inode);"
    },
    {
        "line": 133,
        "fullcodeline": "mntput(upperpath.mnt);"
    },
    {
        "line": 134,
        "fullcodeline": "mntput(lowerpath.mnt);"
    },
    {
        "line": 135,
        "fullcodeline": "path_put(&workpath);"
    },
    {
        "line": 137,
        "fullcodeline": "oe->__upperdentry = upperpath.dentry;"
    },
    {
        "line": 138,
        "fullcodeline": "oe->lowerdentry = lowerpath.dentry;"
    },
    {
        "line": 140,
        "fullcodeline": "root_dentry->d_fsdata = oe;"
    },
    {
        "line": 142,
        "fullcodeline": "sb->s_magic = OVERLAYFS_SUPER_MAGIC;"
    },
    {
        "line": 143,
        "fullcodeline": "sb->s_op = &ovl_super_operations;"
    },
    {
        "line": 144,
        "fullcodeline": "sb->s_root = root_dentry;"
    },
    {
        "line": 145,
        "fullcodeline": "sb->s_fs_info = ufs;"
    },
    {
        "line": 150,
        "fullcodeline": "dput(ufs->workdir);"
    },
    {
        "line": 152,
        "fullcodeline": "mntput(ufs->lower_mnt);"
    },
    {
        "line": 154,
        "fullcodeline": "mntput(ufs->upper_mnt);"
    },
    {
        "line": 156,
        "fullcodeline": "path_put(&workpath);"
    },
    {
        "line": 158,
        "fullcodeline": "path_put(&lowerpath);"
    },
    {
        "line": 160,
        "fullcodeline": "path_put(&upperpath);"
    },
    {
        "line": 162,
        "fullcodeline": "kfree(oe);"
    },
    {
        "line": 164,
        "fullcodeline": "kfree(ufs->config.lowerdir);"
    },
    {
        "line": 165,
        "fullcodeline": "kfree(ufs->config.upperdir);"
    },
    {
        "line": 166,
        "fullcodeline": "kfree(ufs->config.workdir);"
    },
    {
        "line": 167,
        "fullcodeline": "kfree(ufs);"
    },
    {
        "line": 15,
        "fullcodeline": "if (!ufs)"
    },
    {
        "line": 24,
        "fullcodeline": "if (!ufs->config.upperdir || !ufs->config.lowerdir ||"
    },
    {
        "line": 32,
        "fullcodeline": "if (oe == NULL)"
    },
    {
        "line": 48,
        "fullcodeline": "if (!S_ISDIR(upperpath.dentry->d_inode->i_mode) ||"
    },
    {
        "line": 55,
        "fullcodeline": "if (upperpath.mnt != workpath.mnt) {"
    },
    {
        "line": 59,
        "fullcodeline": "if (!ovl_workdir_ok(workpath.dentry, upperpath.dentry)) {"
    },
    {
        "line": 64,
        "fullcodeline": "if (!ovl_is_allowed_fs_type(upperpath.dentry)) {"
    },
    {
        "line": 69,
        "fullcodeline": "if (!ovl_is_allowed_fs_type(lowerpath.dentry)) {"
    },
    {
        "line": 85,
        "fullcodeline": "if (sb->s_stack_depth > FILESYSTEM_MAX_STACK_DEPTH) {"
    },
    {
        "line": 92,
        "fullcodeline": "if (IS_ERR(ufs->upper_mnt)) {"
    },
    {
        "line": 99,
        "fullcodeline": "if (IS_ERR(ufs->lower_mnt)) {"
    },
    {
        "line": 106,
        "fullcodeline": "if (IS_ERR(ufs->workdir)) {"
    },
    {
        "line": 119,
        "fullcodeline": "if (ufs->upper_mnt->mnt_sb->s_flags & MS_RDONLY)"
    },
    {
        "line": 126,
        "fullcodeline": "if (!root_inode)"
    },
    {
        "line": 130,
        "fullcodeline": "if (!root_dentry)"
    },
    {
        "line": 26,
        "fullcodeline": "pr_err(\"overlayfs: missing upperdir or lowerdir or workdir\\n\");"
    },
    {
        "line": 50,
        "fullcodeline": "!S_ISDIR(workpath.dentry->d_inode->i_mode)) {"
    },
    {
        "line": 51,
        "fullcodeline": "pr_err(\"overlayfs: upperdir or lowerdir or workdir not a directory\\n\");"
    },
    {
        "line": 56,
        "fullcodeline": "pr_err(\"overlayfs: workdir and upperdir must reside under the same mount\\n\");"
    },
    {
        "line": 60,
        "fullcodeline": "pr_err(\"overlayfs: workdir and upperdir must be separate subtrees\\n\");"
    },
    {
        "line": 65,
        "fullcodeline": "pr_err(\"overlayfs: filesystem of upperdir is not supported\\n\");"
    },
    {
        "line": 70,
        "fullcodeline": "pr_err(\"overlayfs: filesystem of lowerdir is not supported\\n\");"
    },
    {
        "line": 76,
        "fullcodeline": "pr_err(\"overlayfs: statfs failed on lowerpath\\n\");"
    },
    {
        "line": 86,
        "fullcodeline": "pr_err(\"overlayfs: maximum fs stacking depth exceeded\\n\");"
    },
    {
        "line": 93,
        "fullcodeline": "pr_err(\"overlayfs: failed to clone upperpath\\n\");"
    },
    {
        "line": 100,
        "fullcodeline": "pr_err(\"overlayfs: failed to clone lowerpath\\n\");"
    },
    {
        "line": 107,
        "fullcodeline": "pr_err(\"overlayfs: failed to create directory %s/%s\\n\","
    },
    {
        "line": 120,
        "fullcodeline": "sb->s_flags |= MS_RDONLY;"
    },
    {
        "line": 49,
        "fullcodeline": "!S_ISDIR(lowerpath.dentry->d_inode->i_mode) ||"
    }
]