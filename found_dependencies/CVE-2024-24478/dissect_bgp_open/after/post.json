[
    {
        "line": 15,
        "fullcodeline": "offset = BGP_MARKER_SIZE + 2 + 1;"
    },
    {
        "line": 17,
        "fullcodeline": "proto_tree_add_item(tree, hf_bgp_open_version, tvb, offset, 1, ENC_BIG_ENDIAN);"
    },
    {
        "line": 18,
        "fullcodeline": "offset += 1;"
    },
    {
        "line": 20,
        "fullcodeline": "ti = proto_tree_add_item_ret_uint(tree, hf_bgp_open_myas, tvb, offset, 2, ENC_BIG_ENDIAN, &as_num);"
    },
    {
        "line": 24,
        "fullcodeline": "offset += 2;"
    },
    {
        "line": 26,
        "fullcodeline": "proto_tree_add_item(tree, hf_bgp_open_holdtime, tvb, offset, 2, ENC_BIG_ENDIAN);"
    },
    {
        "line": 27,
        "fullcodeline": "offset += 2;"
    },
    {
        "line": 29,
        "fullcodeline": "proto_tree_add_item(tree, hf_bgp_open_identifier, tvb, offset, 4, ENC_NA);"
    },
    {
        "line": 30,
        "fullcodeline": "offset += 4;"
    },
    {
        "line": 32,
        "fullcodeline": "proto_tree_add_item(tree, hf_bgp_open_opt_len, tvb, offset, 1, ENC_BIG_ENDIAN);"
    },
    {
        "line": 33,
        "fullcodeline": "optlen = tvb_get_guint8(tvb, offset);"
    },
    {
        "line": 34,
        "fullcodeline": "offset += 1;"
    },
    {
        "line": 21,
        "fullcodeline": "if (as_num == BGP_AS_TRANS) {"
    },
    {
        "line": 37,
        "fullcodeline": "if (optlen > 0) {"
    },
    {
        "line": 22,
        "fullcodeline": "proto_item_append_text(ti, \" (AS_TRANS)\");"
    },
    {
        "line": 38,
        "fullcodeline": "ptype = tvb_get_guint8(tvb, offset);"
    },
    {
        "line": 54,
        "fullcodeline": "ti = proto_tree_add_item(tree, hf_bgp_open_opt_params, tvb, offset, optlen, ENC_NA);"
    },
    {
        "line": 55,
        "fullcodeline": "opt_tree = proto_item_add_subtree(ti, ett_bgp_options);"
    },
    {
        "line": 39,
        "fullcodeline": "if (ptype == BGP_OPTION_EXTENDED_LEN) {  /* Extended Length covered by RFC9072 */"
    },
    {
        "line": 58,
        "fullcodeline": "while (offset < oend) {"
    },
    {
        "line": 40,
        "fullcodeline": "optlen = tvb_get_guint16(tvb, offset+1, ENC_BIG_ENDIAN);"
    },
    {
        "line": 42,
        "fullcodeline": "ti =  proto_tree_add_item(tree, hf_bgp_open_opt_extension, tvb, offset, 3, ENC_NA);"
    },
    {
        "line": 43,
        "fullcodeline": "opt_extension_tree = proto_item_add_subtree(ti, ett_bgp_options_ext);"
    },
    {
        "line": 44,
        "fullcodeline": "proto_tree_add_item(opt_extension_tree, hf_bgp_open_opt_extension_mark, tvb, offset, 1, ENC_NA);"
    },
    {
        "line": 45,
        "fullcodeline": "proto_tree_add_item(opt_extension_tree, hf_bgp_open_opt_extension_len, tvb, offset +1, 2, ENC_BIG_ENDIAN);"
    },
    {
        "line": 47,
        "fullcodeline": "oend = offset + 3 + optlen;"
    },
    {
        "line": 48,
        "fullcodeline": "offset += 3;"
    },
    {
        "line": 61,
        "fullcodeline": "ti = proto_tree_add_item(opt_tree, hf_bgp_open_opt_param, tvb, offset, -1, ENC_NA);"
    },
    {
        "line": 62,
        "fullcodeline": "par_tree = proto_item_add_subtree(ti, ett_bgp_options);"
    },
    {
        "line": 65,
        "fullcodeline": "proto_tree_add_item(par_tree, hf_bgp_open_opt_param_type, tvb, offset, 1, ENC_BIG_ENDIAN);"
    },
    {
        "line": 66,
        "fullcodeline": "ptype = tvb_get_guint8(tvb, offset);"
    },
    {
        "line": 67,
        "fullcodeline": "proto_item_append_text(ti, \": %s\", val_to_str(ptype, bgp_open_opt_vals, \"Unknown Parameter %d\"));"
    },
    {
        "line": 68,
        "fullcodeline": "offset += 1;"
    },
    {
        "line": 71,
        "fullcodeline": "proto_tree_add_item(par_tree, hf_bgp_open_opt_param_len, tvb, offset, 1, ENC_BIG_ENDIAN);"
    },
    {
        "line": 72,
        "fullcodeline": "plen = tvb_get_guint8(tvb, offset);"
    },
    {
        "line": 73,
        "fullcodeline": "proto_item_set_len(ti, plen+2);"
    },
    {
        "line": 74,
        "fullcodeline": "offset += 1;"
    },
    {
        "line": 50,
        "fullcodeline": "oend = offset + optlen;"
    },
    {
        "line": 79,
        "fullcodeline": "proto_tree_add_item(par_tree, hf_bgp_open_opt_param_auth, tvb, offset, plen, ENC_NA);"
    },
    {
        "line": 80,
        "fullcodeline": "offset += plen;"
    },
    {
        "line": 84,
        "fullcodeline": "cend = offset + plen;"
    },
    {
        "line": 92,
        "fullcodeline": "proto_tree_add_item(opt_tree, hf_bgp_open_opt_param_unknown, tvb, offset, plen, ENC_NA);"
    },
    {
        "line": 87,
        "fullcodeline": "while (offset < cend) {"
    },
    {
        "line": 88,
        "fullcodeline": "offset = dissect_bgp_capability_item(tvb, par_tree, pinfo, offset, FALSE);"
    }
]