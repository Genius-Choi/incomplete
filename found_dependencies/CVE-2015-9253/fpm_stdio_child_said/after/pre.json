[
    {
        "line": 3,
        "fullcodeline": "static const int max_buf_size = 1024;"
    },
    {
        "line": 4,
        "fullcodeline": "int fd = ev->fd;"
    },
    {
        "line": 5,
        "fullcodeline": "char buf[max_buf_size];"
    },
    {
        "line": 9,
        "fullcodeline": "int fifo_in = 1, fifo_out = 1;"
    },
    {
        "line": 10,
        "fullcodeline": "int is_last_message = 0;"
    },
    {
        "line": 11,
        "fullcodeline": "int in_buf = 0;"
    },
    {
        "line": 17,
        "fullcodeline": "child = (struct fpm_child_s *)arg;"
    },
    {
        "line": 14,
        "fullcodeline": "if (!arg) {"
    },
    {
        "line": 18,
        "fullcodeline": "is_stdout = (fd == child->fd_stdout);"
    },
    {
        "line": 25,
        "fullcodeline": "while (fifo_in || fifo_out) {"
    },
    {
        "line": 20,
        "fullcodeline": "event = &child->ev_stdout;"
    },
    {
        "line": 22,
        "fullcodeline": "event = &child->ev_stderr;"
    },
    {
        "line": 27,
        "fullcodeline": "res = read(fd, buf + in_buf, max_buf_size - 1 - in_buf);"
    },
    {
        "line": 28,
        "fullcodeline": "if (res <= 0) { /* no data */"
    },
    {
        "line": 55,
        "fullcodeline": "if (in_buf == 0) {"
    },
    {
        "line": 29,
        "fullcodeline": "fifo_in = 0;"
    },
    {
        "line": 56,
        "fullcodeline": "fifo_out = 0;"
    },
    {
        "line": 50,
        "fullcodeline": "in_buf += res;"
    },
    {
        "line": 59,
        "fullcodeline": "int should_print = 0;"
    },
    {
        "line": 60,
        "fullcodeline": "buf[in_buf] = '\\0';"
    },
    {
        "line": 74,
        "fullcodeline": "nl = strchr(buf, '\\n');"
    },
    {
        "line": 30,
        "fullcodeline": "if (res < 0 && (errno == EAGAIN || errno == EWOULDBLOCK)) {"
    },
    {
        "line": 65,
        "fullcodeline": "if (in_buf == max_buf_size - 1) {"
    },
    {
        "line": 70,
        "fullcodeline": "if (!fifo_in) {"
    },
    {
        "line": 75,
        "fullcodeline": "if (nl || should_print) {"
    },
    {
        "line": 66,
        "fullcodeline": "should_print = 1;"
    },
    {
        "line": 71,
        "fullcodeline": "should_print = 1;"
    },
    {
        "line": 81,
        "fullcodeline": "zlog(ZLOG_WARNING, \"[pool %s] child %d said into %s: \\\"%s\\\"%s\", child->wp->config->name,"
    },
    {
        "line": 35,
        "fullcodeline": "zlog(ZLOG_SYSERROR, \"unable to read what child say\");"
    },
    {
        "line": 43,
        "fullcodeline": "child->fd_stdout = -1;"
    },
    {
        "line": 78,
        "fullcodeline": "*nl = '\\0';"
    },
    {
        "line": 85,
        "fullcodeline": "int out_buf = 1 + nl - buf;"
    },
    {
        "line": 86,
        "fullcodeline": "memmove(buf, buf + out_buf, in_buf - out_buf);"
    },
    {
        "line": 87,
        "fullcodeline": "in_buf -= out_buf;"
    },
    {
        "line": 46,
        "fullcodeline": "child->fd_stderr = -1;"
    },
    {
        "line": 89,
        "fullcodeline": "in_buf = 0;"
    }
]