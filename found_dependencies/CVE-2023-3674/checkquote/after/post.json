[
    {
        "line": 19,
        "fullcodeline": "pubkey = serialization.load_pem_public_key(aikblob, backend=backends.default_backend())"
    },
    {
        "line": 28,
        "fullcodeline": "hashfunc = tpm2_objects.HASH_FUNCS.get(hash_alg)"
    },
    {
        "line": 34,
        "fullcodeline": "digest = hashes.Hash(hashfunc, backend=backends.default_backend())"
    },
    {
        "line": 35,
        "fullcodeline": "digest.update(quoteblob)"
    },
    {
        "line": 36,
        "fullcodeline": "quote_digest = digest.finalize()"
    },
    {
        "line": 38,
        "fullcodeline": "verify(pubkey, signature, quote_digest, hashfunc)"
    },
    {
        "line": 41,
        "fullcodeline": "retDict = tpm2_objects.unmarshal_tpms_attest(quoteblob)"
    },
    {
        "line": 42,
        "fullcodeline": "extradata = retDict[\"extraData\"]"
    },
    {
        "line": 15,
        "fullcodeline": "sig_alg, hash_alg, sig_size = struct.unpack_from(\">HHH\", sigblob, 0)"
    },
    {
        "line": 17,
        "fullcodeline": "(signature,) = struct.unpack_from(f\"{sig_size}s\", sigblob, 6)"
    },
    {
        "line": 20,
        "fullcodeline": "if not isinstance(pubkey, (RSAPublicKey, EllipticCurvePublicKey)):"
    },
    {
        "line": 23,
        "fullcodeline": "if isinstance(pubkey, RSAPublicKey) and sig_alg not in [tpm2_objects.TPM_ALG_RSASSA]:"
    },
    {
        "line": 25,
        "fullcodeline": "if isinstance(pubkey, EllipticCurvePublicKey) and sig_alg not in [tpm2_objects.TPM_ALG_ECDSA]:"
    },
    {
        "line": 29,
        "fullcodeline": "if not hashfunc:"
    },
    {
        "line": 31,
        "fullcodeline": "if hashfunc.name != exp_hash_alg:"
    },
    {
        "line": 43,
        "fullcodeline": "if extradata.decode(\"utf-8\") != nonce:"
    },
    {
        "line": 47,
        "fullcodeline": "compare_digest, pcrs_dict = __get_and_hash_pcrs(pcrblob, hash_alg)"
    },
    {
        "line": 48,
        "fullcodeline": "if retDict[\"attested.quote.pcrDigest\"] != compare_digest:"
    },
    {
        "line": 21,
        "fullcodeline": "raise ValueError(f\"Unsupported key type {type(pubkey).__name__}\")"
    },
    {
        "line": 24,
        "fullcodeline": "raise ValueError(f\"Unsupported quote signature algorithm '{sig_alg:#x}' for RSA keys\")"
    },
    {
        "line": 26,
        "fullcodeline": "raise ValueError(f\"Unsupported quote signature algorithm '{sig_alg:#x}' for EC keys\")"
    },
    {
        "line": 30,
        "fullcodeline": "raise ValueError(f\"Unsupported hash with id {hash_alg:#x} in signature blob\")"
    },
    {
        "line": 32,
        "fullcodeline": "raise ValueError(f\"Quote was expected to use {exp_hash_alg} but used {hashfunc.name} instead\")"
    },
    {
        "line": 44,
        "fullcodeline": "raise Exception(\"The nonce from the attestation differs from the expected nonce\")"
    },
    {
        "line": 49,
        "fullcodeline": "raise Exception(\"The digest used for quoting is different than the one that was calculated\")"
    }
]