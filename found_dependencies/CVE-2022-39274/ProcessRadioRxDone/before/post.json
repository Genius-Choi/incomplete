[
    {
        "line": 7,
        "fullcodeline": "LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;"
    },
    {
        "line": 16,
        "fullcodeline": "uint8_t pktHeaderLen = 0;"
    },
    {
        "line": 18,
        "fullcodeline": "uint32_t downLinkCounter = 0;"
    },
    {
        "line": 20,
        "fullcodeline": "uint8_t multicast = 0;"
    },
    {
        "line": 21,
        "fullcodeline": "AddressIdentifier_t addrID = UNICAST_DEV_ADDR;"
    },
    {
        "line": 23,
        "fullcodeline": "uint8_t macCmdPayload[2] = { 0 };"
    },
    {
        "line": 24,
        "fullcodeline": "Mlme_t joinType = MLME_JOIN;"
    },
    {
        "line": 26,
        "fullcodeline": "LoRaMacRadioEvents.Events.RxProcessPending = 0;"
    },
    {
        "line": 28,
        "fullcodeline": "MacCtx.McpsConfirm.AckReceived = false;"
    },
    {
        "line": 29,
        "fullcodeline": "MacCtx.McpsIndication.Rssi = rssi;"
    },
    {
        "line": 30,
        "fullcodeline": "MacCtx.McpsIndication.Snr = snr;"
    },
    {
        "line": 32,
        "fullcodeline": "MacCtx.McpsIndication.Port = 0;"
    },
    {
        "line": 33,
        "fullcodeline": "MacCtx.McpsIndication.Multicast = 0;"
    },
    {
        "line": 34,
        "fullcodeline": "MacCtx.McpsIndication.IsUplinkTxPending = 0;"
    },
    {
        "line": 35,
        "fullcodeline": "MacCtx.McpsIndication.Buffer = NULL;"
    },
    {
        "line": 36,
        "fullcodeline": "MacCtx.McpsIndication.BufferSize = 0;"
    },
    {
        "line": 37,
        "fullcodeline": "MacCtx.McpsIndication.RxData = false;"
    },
    {
        "line": 38,
        "fullcodeline": "MacCtx.McpsIndication.AckReceived = false;"
    },
    {
        "line": 39,
        "fullcodeline": "MacCtx.McpsIndication.DownLinkCounter = 0;"
    },
    {
        "line": 40,
        "fullcodeline": "MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;"
    },
    {
        "line": 41,
        "fullcodeline": "MacCtx.McpsIndication.DevAddress = 0;"
    },
    {
        "line": 42,
        "fullcodeline": "MacCtx.McpsIndication.DeviceTimeAnsReceived = false;"
    },
    {
        "line": 43,
        "fullcodeline": "MacCtx.McpsIndication.ResponseTimeout = 0;"
    },
    {
        "line": 45,
        "fullcodeline": "Radio.Sleep( );"
    },
    {
        "line": 76,
        "fullcodeline": "macHdr.Value = payload[pktHeaderLen++];"
    },
    {
        "line": 533,
        "fullcodeline": "UpdateRxSlotIdleState( );"
    },
    {
        "line": 47,
        "fullcodeline": "if( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 )"
    },
    {
        "line": 53,
        "fullcodeline": "if( LoRaMacClassBRxBeacon( payload, size ) == true )"
    },
    {
        "line": 60,
        "fullcodeline": "if( Nvm.MacGroup2.DeviceClass == CLASS_B )"
    },
    {
        "line": 79,
        "fullcodeline": "if( macHdr.Bits.Major != 0 )"
    },
    {
        "line": 516,
        "fullcodeline": "if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||"
    },
    {
        "line": 528,
        "fullcodeline": "if( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_CLASS_C )"
    },
    {
        "line": 55,
        "fullcodeline": "MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;"
    },
    {
        "line": 56,
        "fullcodeline": "MacCtx.MlmeIndication.BeaconInfo.Snr = snr;"
    },
    {
        "line": 81,
        "fullcodeline": "MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;"
    },
    {
        "line": 82,
        "fullcodeline": "PrepareRxDoneAbort( );"
    },
    {
        "line": 221,
        "fullcodeline": "MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;"
    },
    {
        "line": 227,
        "fullcodeline": "getPhy.Attribute = PHY_MAX_PAYLOAD;"
    },
    {
        "line": 228,
        "fullcodeline": "phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );"
    },
    {
        "line": 236,
        "fullcodeline": "macMsgData.Buffer = payload;"
    },
    {
        "line": 237,
        "fullcodeline": "macMsgData.BufSize = size;"
    },
    {
        "line": 239,
        "fullcodeline": "macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;"
    },
    {
        "line": 269,
        "fullcodeline": "MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;"
    },
    {
        "line": 280,
        "fullcodeline": "multicast = 0;"
    },
    {
        "line": 281,
        "fullcodeline": "downLinkCounter = 0;"
    },
    {
        "line": 310,
        "fullcodeline": "macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );"
    },
    {
        "line": 328,
        "fullcodeline": "macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );"
    },
    {
        "line": 345,
        "fullcodeline": "MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;"
    },
    {
        "line": 346,
        "fullcodeline": "MacCtx.McpsIndication.Multicast = multicast;"
    },
    {
        "line": 347,
        "fullcodeline": "MacCtx.McpsIndication.Buffer = NULL;"
    },
    {
        "line": 348,
        "fullcodeline": "MacCtx.McpsIndication.BufferSize = 0;"
    },
    {
        "line": 349,
        "fullcodeline": "MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;"
    },
    {
        "line": 350,
        "fullcodeline": "MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;"
    },
    {
        "line": 352,
        "fullcodeline": "MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;"
    },
    {
        "line": 353,
        "fullcodeline": "MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;"
    },
    {
        "line": 402,
        "fullcodeline": "RemoveMacCommands( MacCtx.McpsIndication.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );"
    },
    {
        "line": 495,
        "fullcodeline": "MacCtx.MacFlags.Bits.McpsInd = 1;"
    },
    {
        "line": 499,
        "fullcodeline": "memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );"
    },
    {
        "line": 501,
        "fullcodeline": "MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;"
    },
    {
        "line": 502,
        "fullcodeline": "MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;"
    },
    {
        "line": 503,
        "fullcodeline": "MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;"
    },
    {
        "line": 504,
        "fullcodeline": "MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;"
    },
    {
        "line": 506,
        "fullcodeline": "MacCtx.MacFlags.Bits.McpsInd = 1;"
    },
    {
        "line": 509,
        "fullcodeline": "MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;"
    },
    {
        "line": 510,
        "fullcodeline": "PrepareRxDoneAbort( );"
    },
    {
        "line": 517,
        "fullcodeline": "( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_2 ) )"
    },
    {
        "line": 530,
        "fullcodeline": "MacCtx.MacFlags.Bits.MacDone = 1;"
    },
    {
        "line": 62,
        "fullcodeline": "if( LoRaMacClassBIsPingExpected( ) == true )"
    },
    {
        "line": 97,
        "fullcodeline": "macMsgJoinAccept.Buffer = payload;"
    },
    {
        "line": 98,
        "fullcodeline": "macMsgJoinAccept.BufSize = size;"
    },
    {
        "line": 107,
        "fullcodeline": "macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );"
    },
    {
        "line": 128,
        "fullcodeline": "bool rxDrValid = false;"
    },
    {
        "line": 131,
        "fullcodeline": "rxDrValid = RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR );"
    },
    {
        "line": 229,
        "fullcodeline": "if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||"
    },
    {
        "line": 241,
        "fullcodeline": "if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )"
    },
    {
        "line": 250,
        "fullcodeline": "if( Nvm.MacGroup2.DeviceClass == CLASS_B )"
    },
    {
        "line": 272,
        "fullcodeline": "if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )"
    },
    {
        "line": 282,
        "fullcodeline": "for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )"
    },
    {
        "line": 300,
        "fullcodeline": "if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||"
    },
    {
        "line": 311,
        "fullcodeline": "if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )"
    },
    {
        "line": 329,
        "fullcodeline": "if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )"
    },
    {
        "line": 356,
        "fullcodeline": "if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||"
    },
    {
        "line": 364,
        "fullcodeline": "if( multicast == 1 )"
    },
    {
        "line": 396,
        "fullcodeline": "if( ( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) ) ||"
    },
    {
        "line": 470,
        "fullcodeline": "if( Nvm.MacGroup2.IsRejoinAcceptPending == true )"
    },
    {
        "line": 484,
        "fullcodeline": "if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && (Nvm.MacGroup2.IsCertPortOn == false ) )"
    },
    {
        "line": 519,
        "fullcodeline": "if( MacCtx.NodeAckRequested == true )"
    },
    {
        "line": 64,
        "fullcodeline": "LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );"
    },
    {
        "line": 65,
        "fullcodeline": "LoRaMacClassBPingSlotTimerEvent( NULL );"
    },
    {
        "line": 66,
        "fullcodeline": "MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;"
    },
    {
        "line": 91,
        "fullcodeline": "if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )"
    },
    {
        "line": 101,
        "fullcodeline": "if( ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) && ( Nvm.MacGroup2.IsRejoinAcceptPending == false ) )"
    },
    {
        "line": 109,
        "fullcodeline": "if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )"
    },
    {
        "line": 115,
        "fullcodeline": "if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )"
    },
    {
        "line": 121,
        "fullcodeline": "if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )"
    },
    {
        "line": 133,
        "fullcodeline": "if( ( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus ) && ( rxDrValid == true ) )"
    },
    {
        "line": 230,
        "fullcodeline": "( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )"
    },
    {
        "line": 232,
        "fullcodeline": "MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;"
    },
    {
        "line": 233,
        "fullcodeline": "PrepareRxDoneAbort( );"
    },
    {
        "line": 243,
        "fullcodeline": "MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;"
    },
    {
        "line": 244,
        "fullcodeline": "PrepareRxDoneAbort( );"
    },
    {
        "line": 274,
        "fullcodeline": "MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;"
    },
    {
        "line": 275,
        "fullcodeline": "PrepareRxDoneAbort( );"
    },
    {
        "line": 304,
        "fullcodeline": "MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;"
    },
    {
        "line": 305,
        "fullcodeline": "PrepareRxDoneAbort( );"
    },
    {
        "line": 323,
        "fullcodeline": "MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;"
    },
    {
        "line": 324,
        "fullcodeline": "PrepareRxDoneAbort( );"
    },
    {
        "line": 341,
        "fullcodeline": "PrepareRxDoneAbort( );"
    },
    {
        "line": 357,
        "fullcodeline": "( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_2 ) )"
    },
    {
        "line": 359,
        "fullcodeline": "Nvm.MacGroup1.AdrAckCounter = 0;"
    },
    {
        "line": 360,
        "fullcodeline": "Nvm.MacGroup2.DownlinkReceived = true;"
    },
    {
        "line": 366,
        "fullcodeline": "MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;"
    },
    {
        "line": 397,
        "fullcodeline": "( MacCtx.McpsIndication.ResponseTimeout > 0 ) )"
    },
    {
        "line": 399,
        "fullcodeline": "MacCtx.McpsIndication.IsUplinkTxPending = 1;"
    },
    {
        "line": 464,
        "fullcodeline": "MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;"
    },
    {
        "line": 465,
        "fullcodeline": "PrepareRxDoneAbort( );"
    },
    {
        "line": 472,
        "fullcodeline": "Nvm.MacGroup2.IsRejoinAcceptPending = false;"
    },
    {
        "line": 487,
        "fullcodeline": "MacCtx.McpsIndication.Port = macMsgData.FPort;"
    },
    {
        "line": 488,
        "fullcodeline": "MacCtx.McpsIndication.Buffer = NULL;"
    },
    {
        "line": 489,
        "fullcodeline": "MacCtx.McpsIndication.BufferSize = 0;"
    },
    {
        "line": 490,
        "fullcodeline": "MacCtx.McpsIndication.RxData = false;"
    },
    {
        "line": 93,
        "fullcodeline": "MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;"
    },
    {
        "line": 94,
        "fullcodeline": "PrepareRxDoneAbort( );"
    },
    {
        "line": 103,
        "fullcodeline": "MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;"
    },
    {
        "line": 104,
        "fullcodeline": "PrepareRxDoneAbort( );"
    },
    {
        "line": 111,
        "fullcodeline": "macCryptoStatus = LoRaMacCryptoHandleJoinAccept( REJOIN_REQ_0, SecureElementGetJoinEui( ), &macMsgJoinAccept );"
    },
    {
        "line": 112,
        "fullcodeline": "joinType = MLME_REJOIN_0;"
    },
    {
        "line": 117,
        "fullcodeline": "macCryptoStatus = LoRaMacCryptoHandleJoinAccept( REJOIN_REQ_1, SecureElementGetJoinEui( ), &macMsgJoinAccept );"
    },
    {
        "line": 118,
        "fullcodeline": "joinType = MLME_REJOIN_1;"
    },
    {
        "line": 123,
        "fullcodeline": "macCryptoStatus = LoRaMacCryptoHandleJoinAccept( REJOIN_REQ_2, SecureElementGetJoinEui( ), &macMsgJoinAccept );"
    },
    {
        "line": 124,
        "fullcodeline": "joinType = MLME_REJOIN_2;"
    },
    {
        "line": 137,
        "fullcodeline": "Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );"
    },
    {
        "line": 138,
        "fullcodeline": "Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );"
    },
    {
        "line": 141,
        "fullcodeline": "Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;"
    },
    {
        "line": 149,
        "fullcodeline": "Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;"
    },
    {
        "line": 154,
        "fullcodeline": "Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;"
    },
    {
        "line": 155,
        "fullcodeline": "Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;"
    },
    {
        "line": 158,
        "fullcodeline": "Nvm.MacGroup2.MacParams.ChannelsNbTrans = 1;"
    },
    {
        "line": 171,
        "fullcodeline": "applyCFList.Payload = macMsgJoinAccept.CFList;"
    },
    {
        "line": 173,
        "fullcodeline": "applyCFList.Size = size - 17;"
    },
    {
        "line": 177,
        "fullcodeline": "RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );"
    },
    {
        "line": 179,
        "fullcodeline": "Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;"
    },
    {
        "line": 252,
        "fullcodeline": "if( LoRaMacClassBIsPingExpected( ) == true )"
    },
    {
        "line": 284,
        "fullcodeline": "if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&"
    },
    {
        "line": 302,
        "fullcodeline": "( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )"
    },
    {
        "line": 313,
        "fullcodeline": "if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )"
    },
    {
        "line": 331,
        "fullcodeline": "if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )"
    },
    {
        "line": 415,
        "fullcodeline": "ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );"
    },
    {
        "line": 416,
        "fullcodeline": "MacCtx.McpsIndication.Port = macMsgData.FPort;"
    },
    {
        "line": 417,
        "fullcodeline": "MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;"
    },
    {
        "line": 418,
        "fullcodeline": "MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;"
    },
    {
        "line": 419,
        "fullcodeline": "MacCtx.McpsIndication.RxData = true;"
    },
    {
        "line": 431,
        "fullcodeline": "ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );"
    },
    {
        "line": 432,
        "fullcodeline": "MacCtx.McpsIndication.Port = macMsgData.FPort;"
    },
    {
        "line": 444,
        "fullcodeline": "ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.McpsIndication.RxSlot );"
    },
    {
        "line": 445,
        "fullcodeline": "MacCtx.McpsIndication.Port = macMsgData.FPort;"
    },
    {
        "line": 457,
        "fullcodeline": "MacCtx.McpsIndication.Port = macMsgData.FPort;"
    },
    {
        "line": 458,
        "fullcodeline": "MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;"
    },
    {
        "line": 459,
        "fullcodeline": "MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;"
    },
    {
        "line": 460,
        "fullcodeline": "MacCtx.McpsIndication.RxData = true;"
    },
    {
        "line": 478,
        "fullcodeline": "if( MacCtx.MacFlags.Bits.MlmeReq == 1 )"
    },
    {
        "line": 521,
        "fullcodeline": "if( MacCtx.McpsConfirm.AckReceived == true )"
    },
    {
        "line": 68,
        "fullcodeline": "else if( LoRaMacClassBIsMulticastExpected( ) == true )"
    },
    {
        "line": 150,
        "fullcodeline": "if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )"
    },
    {
        "line": 161,
        "fullcodeline": "if( macMsgJoinAccept.DLSettings.Bits.OptNeg == 0 )"
    },
    {
        "line": 182,
        "fullcodeline": "if( Nvm.MacGroup2.Version.Fields.Minor >= 1 )"
    },
    {
        "line": 190,
        "fullcodeline": "if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )"
    },
    {
        "line": 196,
        "fullcodeline": "if( Nvm.MacGroup2.IsRejoinAcceptPending == true )"
    },
    {
        "line": 205,
        "fullcodeline": "if( ( joinType == MLME_REJOIN_0 ) || ( joinType == MLME_REJOIN_1 ) )"
    },
    {
        "line": 254,
        "fullcodeline": "LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );"
    },
    {
        "line": 255,
        "fullcodeline": "LoRaMacClassBPingSlotTimerEvent( NULL );"
    },
    {
        "line": 256,
        "fullcodeline": "MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;"
    },
    {
        "line": 285,
        "fullcodeline": "( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )"
    },
    {
        "line": 287,
        "fullcodeline": "multicast = 1;"
    },
    {
        "line": 290,
        "fullcodeline": "address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;"
    },
    {
        "line": 301,
        "fullcodeline": "( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||"
    },
    {
        "line": 316,
        "fullcodeline": "MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;"
    },
    {
        "line": 334,
        "fullcodeline": "MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;"
    },
    {
        "line": 370,
        "fullcodeline": "if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )"
    },
    {
        "line": 480,
        "fullcodeline": "MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;"
    },
    {
        "line": 523,
        "fullcodeline": "OnRetransmitTimeoutTimerEvent( NULL );"
    },
    {
        "line": 70,
        "fullcodeline": "LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );"
    },
    {
        "line": 71,
        "fullcodeline": "LoRaMacClassBMulticastSlotTimerEvent( NULL );"
    },
    {
        "line": 72,
        "fullcodeline": "MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;"
    },
    {
        "line": 152,
        "fullcodeline": "Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;"
    },
    {
        "line": 163,
        "fullcodeline": "Nvm.MacGroup2.Version.Value = LORAMAC_FALLBACK_VERSION;"
    },
    {
        "line": 184,
        "fullcodeline": "Nvm.MacGroup1.RekeyIndUplinksCounter = 0;"
    },
    {
        "line": 185,
        "fullcodeline": "macCmdPayload[0] = Nvm.MacGroup2.Version.Fields.Minor;"
    },
    {
        "line": 186,
        "fullcodeline": "LoRaMacCommandsAddCmd( MOTE_MAC_REKEY_IND, macCmdPayload, 1 );"
    },
    {
        "line": 192,
        "fullcodeline": "LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, joinType );"
    },
    {
        "line": 198,
        "fullcodeline": "Nvm.MacGroup2.IsRejoinAcceptPending = false;"
    },
    {
        "line": 207,
        "fullcodeline": "ResetMacParameters( true );"
    },
    {
        "line": 213,
        "fullcodeline": "if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )"
    },
    {
        "line": 291,
        "fullcodeline": "if( Nvm.MacGroup2.DeviceClass == CLASS_C )"
    },
    {
        "line": 321,
        "fullcodeline": "MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;"
    },
    {
        "line": 339,
        "fullcodeline": "MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;"
    },
    {
        "line": 372,
        "fullcodeline": "Nvm.MacGroup1.SrvAckRequested = true;"
    },
    {
        "line": 377,
        "fullcodeline": "MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;"
    },
    {
        "line": 167,
        "fullcodeline": "Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;"
    },
    {
        "line": 215,
        "fullcodeline": "LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );"
    },
    {
        "line": 259,
        "fullcodeline": "else if( LoRaMacClassBIsMulticastExpected( ) == true )"
    },
    {
        "line": 293,
        "fullcodeline": "MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;"
    },
    {
        "line": 373,
        "fullcodeline": "if( Nvm.MacGroup2.Version.Fields.Minor == 0 )"
    },
    {
        "line": 380,
        "fullcodeline": "if( ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_1 ) &&"
    },
    {
        "line": 390,
        "fullcodeline": "Nvm.MacGroup1.SrvAckRequested = false;"
    },
    {
        "line": 391,
        "fullcodeline": "MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;"
    },
    {
        "line": 261,
        "fullcodeline": "LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );"
    },
    {
        "line": 262,
        "fullcodeline": "LoRaMacClassBMulticastSlotTimerEvent( NULL );"
    },
    {
        "line": 263,
        "fullcodeline": "MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;"
    },
    {
        "line": 375,
        "fullcodeline": "Nvm.MacGroup1.LastRxMic = macMsgData.MIC;"
    },
    {
        "line": 381,
        "fullcodeline": "( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_2 ) )"
    },
    {
        "line": 384,
        "fullcodeline": "MacCtx.McpsIndication.ResponseTimeout = REGION_COMMON_CLASS_B_C_RESP_TIMEOUT;"
    }
]