[
    {
        "line": 5,
        "fullcodeline": "struct sc_pkcs15_bignum bn[2];"
    },
    {
        "line": 6,
        "fullcodeline": "unsigned char *out = NULL;"
    },
    {
        "line": 7,
        "fullcodeline": "bn[0].data = NULL;"
    },
    {
        "line": 8,
        "fullcodeline": "bn[1].data = NULL;"
    },
    {
        "line": 10,
        "fullcodeline": "LOG_FUNC_CALLED(card->ctx);"
    },
    {
        "line": 14,
        "fullcodeline": "sc_log(card->ctx,\"last selected : magic %X; ef %X\","
    },
    {
        "line": 74,
        "fullcodeline": "free(bn[0].data);"
    },
    {
        "line": 75,
        "fullcodeline": "free(bn[1].data);"
    },
    {
        "line": 76,
        "fullcodeline": "free(out);"
    },
    {
        "line": 78,
        "fullcodeline": "LOG_FUNC_RETURN(card->ctx, rv);"
    },
    {
        "line": 17,
        "fullcodeline": "if (offset & ~0x7FFF)"
    },
    {
        "line": 20,
        "fullcodeline": "if (auth_current_ef->magic==SC_FILE_MAGIC &&"
    },
    {
        "line": 18,
        "fullcodeline": "LOG_TEST_RET(card->ctx, SC_ERROR_INVALID_ARGUMENTS, \"Invalid file offset\");"
    },
    {
        "line": 21,
        "fullcodeline": "auth_current_ef->ef_structure == SC_CARDCTL_OBERTHUR_KEY_RSA_PUBLIC)   {"
    },
    {
        "line": 23,
        "fullcodeline": "unsigned char resp[256];"
    },
    {
        "line": 28,
        "fullcodeline": "rv = auth_read_component(card, SC_CARDCTL_OBERTHUR_KEY_RSA_PUBLIC,"
    },
    {
        "line": 30,
        "fullcodeline": "LOG_TEST_RET(card->ctx, rv, \"read component failed\");"
    },
    {
        "line": 35,
        "fullcodeline": "bn[0].data = calloc(1, rv - jj);"
    },
    {
        "line": 40,
        "fullcodeline": "bn[0].len = rv - jj;"
    },
    {
        "line": 41,
        "fullcodeline": "memcpy(bn[0].data, resp + jj, rv - jj);"
    },
    {
        "line": 43,
        "fullcodeline": "rv = auth_read_component(card, SC_CARDCTL_OBERTHUR_KEY_RSA_PUBLIC,"
    },
    {
        "line": 45,
        "fullcodeline": "LOG_TEST_GOTO_ERR(card->ctx, rv, \"Cannot read RSA public key component\");"
    },
    {
        "line": 47,
        "fullcodeline": "bn[1].data = calloc(1, rv);"
    },
    {
        "line": 52,
        "fullcodeline": "bn[1].len = rv;"
    },
    {
        "line": 53,
        "fullcodeline": "memcpy(bn[1].data, resp, rv);"
    },
    {
        "line": 55,
        "fullcodeline": "key.exponent = bn[0];"
    },
    {
        "line": 56,
        "fullcodeline": "key.modulus = bn[1];"
    },
    {
        "line": 32,
        "fullcodeline": "for (jj=0; jj<rv && *(resp+jj)==0; jj++)"
    },
    {
        "line": 36,
        "fullcodeline": "if (!bn[0].data) {"
    },
    {
        "line": 48,
        "fullcodeline": "if (!bn[1].data) {"
    },
    {
        "line": 58,
        "fullcodeline": "if (sc_pkcs15_encode_pubkey_rsa(card->ctx, &key, &out, &out_len)) {"
    },
    {
        "line": 70,
        "fullcodeline": "rv = iso_ops->read_binary(card, offset, buf, count, 0);"
    },
    {
        "line": 37,
        "fullcodeline": "rv = SC_ERROR_OUT_OF_MEMORY;"
    },
    {
        "line": 49,
        "fullcodeline": "rv = SC_ERROR_OUT_OF_MEMORY;"
    },
    {
        "line": 59,
        "fullcodeline": "rv = SC_ERROR_INVALID_ASN1_OBJECT;"
    },
    {
        "line": 60,
        "fullcodeline": "LOG_TEST_GOTO_ERR(card->ctx, rv, \"cannot encode RSA public key\");"
    },
    {
        "line": 63,
        "fullcodeline": "rv  = out_len - offset > count ? count : out_len - offset;"
    },
    {
        "line": 64,
        "fullcodeline": "memcpy(buf, out + offset, rv);"
    },
    {
        "line": 66,
        "fullcodeline": "sc_log_hex(card->ctx, \"write_publickey\", buf, rv);"
    }
]