[
    {
        "line": 7,
        "fullcodeline": "assert(card && card->ctx && in_path);"
    },
    {
        "line": 15,
        "fullcodeline": "assert(iso_ops && iso_ops->select_file);"
    },
    {
        "line": 16,
        "fullcodeline": "file_out_copy = file_out;"
    },
    {
        "line": 17,
        "fullcodeline": "r = iso_ops->select_file(card, in_path, file_out_copy);"
    },
    {
        "line": 20,
        "fullcodeline": "assert(file_out_copy);"
    },
    {
        "line": 21,
        "fullcodeline": "file = *file_out_copy;"
    },
    {
        "line": 22,
        "fullcodeline": "assert(file);"
    },
    {
        "line": 34,
        "fullcodeline": "SC_FUNC_RETURN(card->ctx, SC_LOG_DEBUG_VERBOSE, r);"
    },
    {
        "line": 18,
        "fullcodeline": "if (r || file_out_copy == NULL)"
    },
    {
        "line": 23,
        "fullcodeline": "if (file->sec_attr && file->sec_attr_len == SC_RTECP_SEC_ATTR_SIZE)"
    },
    {
        "line": 13,
        "fullcodeline": "SC_FUNC_RETURN(card->ctx, SC_LOG_DEBUG_NORMAL, SC_ERROR_NOT_SUPPORTED);"
    },
    {
        "line": 19,
        "fullcodeline": "SC_FUNC_RETURN(card->ctx, SC_LOG_DEBUG_VERBOSE, r);"
    },
    {
        "line": 24,
        "fullcodeline": "set_acl_from_sec_attr(card, file);"
    },
    {
        "line": 28,
        "fullcodeline": "sc_file_free(file);"
    },
    {
        "line": 26,
        "fullcodeline": "r = SC_ERROR_UNKNOWN_DATA_RECEIVED;"
    },
    {
        "line": 31,
        "fullcodeline": "assert(file_out);"
    },
    {
        "line": 32,
        "fullcodeline": "*file_out = file;"
    }
]