[
    {
        "line": 3,
        "fullcodeline": "struct RArray *a = mrb_ary_ptr(self);"
    },
    {
        "line": 4,
        "fullcodeline": "mrb_int len = ARY_LEN(a);"
    },
    {
        "line": 11,
        "fullcodeline": "ary_modify_check(mrb, a);"
    },
    {
        "line": 15,
        "fullcodeline": "val = mrb_ary_new_from_values(mrb, n, ARY_PTR(a));"
    },
    {
        "line": 8,
        "fullcodeline": "if (mrb_get_args(mrb, \"|i\", &n) == 0) {"
    },
    {
        "line": 13,
        "fullcodeline": "if (n < 0) mrb_raise(mrb, E_ARGUMENT_ERROR, \"negative array shift\");"
    },
    {
        "line": 14,
        "fullcodeline": "if (n > len) n = len;"
    },
    {
        "line": 16,
        "fullcodeline": "if (ARY_SHARED_P(a)) {"
    },
    {
        "line": 22,
        "fullcodeline": "if (len > ARY_SHIFT_SHARED_MIN) {"
    },
    {
        "line": 12,
        "fullcodeline": "if (len == 0 || n == 0) return mrb_ary_new(mrb);"
    },
    {
        "line": 9,
        "fullcodeline": "return mrb_ary_shift(mrb, self);"
    },
    {
        "line": 26,
        "fullcodeline": "else if (len == n) {"
    },
    {
        "line": 30,
        "fullcodeline": "mrb_value *ptr = ARY_PTR(a);"
    },
    {
        "line": 31,
        "fullcodeline": "mrb_int size = len-n;"
    },
    {
        "line": 37,
        "fullcodeline": "ARY_SET_LEN(a, len-n);"
    },
    {
        "line": 34,
        "fullcodeline": "*ptr = *(ptr+n);"
    },
    {
        "line": 35,
        "fullcodeline": "++ptr;"
    }
]