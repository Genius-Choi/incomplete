[
    {
        "line": 6,
        "fullcodeline": "int err = 0;"
    },
    {
        "line": 14,
        "fullcodeline": "sgi_timer_del(timr);"
    },
    {
        "line": 15,
        "fullcodeline": "when = timespec_to_ns(&new_setting->it_value);"
    },
    {
        "line": 16,
        "fullcodeline": "period = timespec_to_ns(&new_setting->it_interval);"
    },
    {
        "line": 22,
        "fullcodeline": "base = kmalloc(sizeof(struct mmtimer), GFP_KERNEL);"
    },
    {
        "line": 44,
        "fullcodeline": "when = (when + sgi_clock_period - 1) / sgi_clock_period + rtc_time();"
    },
    {
        "line": 45,
        "fullcodeline": "period = (period + sgi_clock_period - 1)  / sgi_clock_period;"
    },
    {
        "line": 52,
        "fullcodeline": "preempt_disable();"
    },
    {
        "line": 54,
        "fullcodeline": "nodeid =  cpu_to_node(smp_processor_id());"
    },
    {
        "line": 57,
        "fullcodeline": "spin_lock_irqsave(&timers[nodeid].lock, irqflags);"
    },
    {
        "line": 59,
        "fullcodeline": "base->timer = timr;"
    },
    {
        "line": 60,
        "fullcodeline": "base->cpu = smp_processor_id();"
    },
    {
        "line": 62,
        "fullcodeline": "timr->it.mmtimer.clock = TIMER_SET;"
    },
    {
        "line": 63,
        "fullcodeline": "timr->it.mmtimer.node = nodeid;"
    },
    {
        "line": 64,
        "fullcodeline": "timr->it.mmtimer.incr = period;"
    },
    {
        "line": 65,
        "fullcodeline": "timr->it.mmtimer.expires = when;"
    },
    {
        "line": 70,
        "fullcodeline": "mmtimer_add_list(base);"
    },
    {
        "line": 83,
        "fullcodeline": "mmtimer_set_next_timer(nodeid);"
    },
    {
        "line": 86,
        "fullcodeline": "spin_unlock_irqrestore(&timers[nodeid].lock, irqflags);"
    },
    {
        "line": 88,
        "fullcodeline": "preempt_enable();"
    },
    {
        "line": 18,
        "fullcodeline": "if (when == 0)"
    },
    {
        "line": 23,
        "fullcodeline": "if (base == NULL)"
    },
    {
        "line": 26,
        "fullcodeline": "if (flags & TIMER_ABSTIME) {"
    },
    {
        "line": 72,
        "fullcodeline": "if (timers[nodeid].next == n) {"
    },
    {
        "line": 12,
        "fullcodeline": "sgi_timer_get(timr, old_setting);"
    },
    {
        "line": 30,
        "fullcodeline": "getnstimeofday(&n);"
    },
    {
        "line": 31,
        "fullcodeline": "now = timespec_to_ns(&n);"
    },
    {
        "line": 74,
        "fullcodeline": "spin_unlock_irqrestore(&timers[nodeid].lock, irqflags);"
    },
    {
        "line": 75,
        "fullcodeline": "preempt_enable();"
    },
    {
        "line": 81,
        "fullcodeline": "mmtimer_disable_int(cnodeid_to_nasid(nodeid), COMPARATOR);"
    },
    {
        "line": 24,
        "fullcodeline": "return -ENOMEM;"
    },
    {
        "line": 32,
        "fullcodeline": "if (when > now)"
    },
    {
        "line": 33,
        "fullcodeline": "when -= now;"
    },
    {
        "line": 36,
        "fullcodeline": "when = 0;"
    }
]