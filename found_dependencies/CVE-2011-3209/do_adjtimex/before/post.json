[
    {
        "line": 31,
        "fullcodeline": "write_seqlock_irq(&xtime_lock);"
    },
    {
        "line": 32,
        "fullcodeline": "result = time_state;\t/* mostly `TIME_OK' */"
    },
    {
        "line": 35,
        "fullcodeline": "save_adjust = time_adjust;"
    },
    {
        "line": 135,
        "fullcodeline": "txc->freq\t   = (time_freq / NSEC_PER_USEC) <<"
    },
    {
        "line": 137,
        "fullcodeline": "txc->maxerror\t   = time_maxerror;"
    },
    {
        "line": 138,
        "fullcodeline": "txc->esterror\t   = time_esterror;"
    },
    {
        "line": 139,
        "fullcodeline": "txc->status\t   = time_status;"
    },
    {
        "line": 140,
        "fullcodeline": "txc->constant\t   = time_constant;"
    },
    {
        "line": 141,
        "fullcodeline": "txc->precision\t   = 1;"
    },
    {
        "line": 142,
        "fullcodeline": "txc->tolerance\t   = MAXFREQ;"
    },
    {
        "line": 143,
        "fullcodeline": "txc->tick\t   = tick_usec;"
    },
    {
        "line": 146,
        "fullcodeline": "txc->ppsfreq\t   = 0;"
    },
    {
        "line": 147,
        "fullcodeline": "txc->jitter\t   = 0;"
    },
    {
        "line": 148,
        "fullcodeline": "txc->shift\t   = 0;"
    },
    {
        "line": 149,
        "fullcodeline": "txc->stabil\t   = 0;"
    },
    {
        "line": 150,
        "fullcodeline": "txc->jitcnt\t   = 0;"
    },
    {
        "line": 151,
        "fullcodeline": "txc->calcnt\t   = 0;"
    },
    {
        "line": 152,
        "fullcodeline": "txc->errcnt\t   = 0;"
    },
    {
        "line": 153,
        "fullcodeline": "txc->stbcnt\t   = 0;"
    },
    {
        "line": 154,
        "fullcodeline": "write_sequnlock_irq(&xtime_lock);"
    },
    {
        "line": 155,
        "fullcodeline": "do_gettimeofday(&txc->time);"
    },
    {
        "line": 156,
        "fullcodeline": "notify_cmos_timer();"
    },
    {
        "line": 8,
        "fullcodeline": "if (txc->modes && !capable(CAP_SYS_TIME))"
    },
    {
        "line": 13,
        "fullcodeline": "if ((txc->modes & ADJ_OFFSET_SINGLESHOT) == ADJ_OFFSET_SINGLESHOT) {"
    },
    {
        "line": 20,
        "fullcodeline": "if (txc->modes != ADJ_OFFSET_SINGLESHOT && (txc->modes & ADJ_OFFSET))"
    },
    {
        "line": 26,
        "fullcodeline": "if (txc->modes & ADJ_TICK)"
    },
    {
        "line": 126,
        "fullcodeline": "leave:\tif ((time_status & (STA_UNSYNC|STA_CLOCKERR)) != 0)"
    },
    {
        "line": 129,
        "fullcodeline": "if ((txc->modes == ADJ_OFFSET_SINGLESHOT) ||"
    },
    {
        "line": 127,
        "fullcodeline": "result = TIME_ERROR;"
    },
    {
        "line": 130,
        "fullcodeline": "(txc->modes == ADJ_OFFSET_SS_READ))"
    },
    {
        "line": 131,
        "fullcodeline": "txc->offset = save_adjust;"
    },
    {
        "line": 136,
        "fullcodeline": "(SHIFT_USEC - SHIFT_NSEC);"
    },
    {
        "line": 9,
        "fullcodeline": "return -EPERM;"
    },
    {
        "line": 15,
        "fullcodeline": "if (txc->modes != ADJ_OFFSET_SINGLESHOT &&"
    },
    {
        "line": 22,
        "fullcodeline": "if (txc->offset <= - MAXPHASE || txc->offset >= MAXPHASE )"
    },
    {
        "line": 27,
        "fullcodeline": "if (txc->tick <  900000/USER_HZ ||"
    },
    {
        "line": 43,
        "fullcodeline": "if (txc->modes & ADJ_STATUS)\t/* only set allowed bits */"
    },
    {
        "line": 47,
        "fullcodeline": "if (txc->modes & ADJ_FREQUENCY) {\t/* p. 22 */"
    },
    {
        "line": 56,
        "fullcodeline": "if (txc->modes & ADJ_MAXERROR) {"
    },
    {
        "line": 64,
        "fullcodeline": "if (txc->modes & ADJ_ESTERROR) {"
    },
    {
        "line": 72,
        "fullcodeline": "if (txc->modes & ADJ_TIMECONST) {\t/* p. 24 */"
    },
    {
        "line": 80,
        "fullcodeline": "if (txc->modes & ADJ_OFFSET) {\t/* values checked earlier */"
    },
    {
        "line": 120,
        "fullcodeline": "if (txc->modes & ADJ_TICK)"
    },
    {
        "line": 123,
        "fullcodeline": "if (txc->modes & (ADJ_TICK|ADJ_FREQUENCY|ADJ_OFFSET))"
    },
    {
        "line": 133,
        "fullcodeline": "txc->offset = ((long)shift_right(time_offset, SHIFT_UPDATE)) *"
    },
    {
        "line": 16,
        "fullcodeline": "txc->modes != ADJ_OFFSET_SS_READ)"
    },
    {
        "line": 28,
        "fullcodeline": "txc->tick > 1100000/USER_HZ)"
    },
    {
        "line": 44,
        "fullcodeline": "time_status =  (txc->status & ~STA_RONLY) |"
    },
    {
        "line": 52,
        "fullcodeline": "time_freq = ((s64)txc->freq * NSEC_PER_USEC)"
    },
    {
        "line": 61,
        "fullcodeline": "time_maxerror = txc->maxerror;"
    },
    {
        "line": 69,
        "fullcodeline": "time_esterror = txc->esterror;"
    },
    {
        "line": 77,
        "fullcodeline": "time_constant = min(txc->constant + 4, (long)MAXTC);"
    },
    {
        "line": 121,
        "fullcodeline": "tick_usec = txc->tick;"
    },
    {
        "line": 124,
        "fullcodeline": "ntp_update_frequency();"
    },
    {
        "line": 17,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 23,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 29,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 48,
        "fullcodeline": "if (txc->freq > MAXFREQ || txc->freq < -MAXFREQ) {"
    },
    {
        "line": 57,
        "fullcodeline": "if (txc->maxerror < 0 || txc->maxerror >= NTP_PHASE_LIMIT) {"
    },
    {
        "line": 65,
        "fullcodeline": "if (txc->esterror < 0 || txc->esterror >= NTP_PHASE_LIMIT) {"
    },
    {
        "line": 73,
        "fullcodeline": "if (txc->constant < 0) {\t/* NTP v4 uses values > 6 */"
    },
    {
        "line": 81,
        "fullcodeline": "if (txc->modes == ADJ_OFFSET_SINGLESHOT) {"
    },
    {
        "line": 45,
        "fullcodeline": "(time_status & STA_RONLY);"
    },
    {
        "line": 49,
        "fullcodeline": "result = -EINVAL;"
    },
    {
        "line": 53,
        "fullcodeline": ">> (SHIFT_USEC - SHIFT_NSEC);"
    },
    {
        "line": 58,
        "fullcodeline": "result = -EINVAL;"
    },
    {
        "line": 66,
        "fullcodeline": "result = -EINVAL;"
    },
    {
        "line": 74,
        "fullcodeline": "result = -EINVAL;"
    },
    {
        "line": 83,
        "fullcodeline": "time_adjust = txc->offset;"
    },
    {
        "line": 85,
        "fullcodeline": "else if (time_status & STA_PLL) {"
    },
    {
        "line": 86,
        "fullcodeline": "time_offset = txc->offset * NSEC_PER_USEC;"
    },
    {
        "line": 92,
        "fullcodeline": "time_offset = min(time_offset, (s64)MAXPHASE * NSEC_PER_USEC);"
    },
    {
        "line": 93,
        "fullcodeline": "time_offset = max(time_offset, (s64)-MAXPHASE * NSEC_PER_USEC);"
    },
    {
        "line": 103,
        "fullcodeline": "mtemp = xtime.tv_sec - time_reftime;"
    },
    {
        "line": 104,
        "fullcodeline": "time_reftime = xtime.tv_sec;"
    },
    {
        "line": 106,
        "fullcodeline": "freq_adj = time_offset * mtemp;"
    },
    {
        "line": 107,
        "fullcodeline": "freq_adj = shift_right(freq_adj, time_constant * 2 +"
    },
    {
        "line": 111,
        "fullcodeline": "freq_adj += time_freq;"
    },
    {
        "line": 112,
        "fullcodeline": "freq_adj = min(freq_adj, (s64)MAXFREQ_NSEC);"
    },
    {
        "line": 113,
        "fullcodeline": "time_freq = max(freq_adj, (s64)-MAXFREQ_NSEC);"
    },
    {
        "line": 114,
        "fullcodeline": "time_offset = div_long_long_rem_signed(time_offset,"
    },
    {
        "line": 117,
        "fullcodeline": "time_offset <<= SHIFT_UPDATE;"
    },
    {
        "line": 101,
        "fullcodeline": "if (time_status & STA_FREQHOLD || time_reftime == 0)"
    },
    {
        "line": 109,
        "fullcodeline": "if (mtemp >= MINSEC && (time_status & STA_FLL || mtemp > MAXSEC))"
    },
    {
        "line": 110,
        "fullcodeline": "freq_adj += div_s64(time_offset << (SHIFT_NSEC - SHIFT_FLL), mtemp);"
    },
    {
        "line": 108,
        "fullcodeline": "(SHIFT_PLL + 2) * 2 - SHIFT_NSEC);"
    }
]