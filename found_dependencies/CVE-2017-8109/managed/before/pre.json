[
    {
        "line": 467,
        "fullcodeline": "name = os.path.expanduser(name)"
    },
    {
        "line": 469,
        "fullcodeline": "ret = {'changes': {},"
    },
    {
        "line": 487,
        "fullcodeline": "mode = salt.utils.normalize_mode(mode)"
    },
    {
        "line": 489,
        "fullcodeline": "contents_count = len("
    },
    {
        "line": 627,
        "fullcodeline": "user = _test_owner(kwargs, user=user)"
    },
    {
        "line": 641,
        "fullcodeline": "u_check = _check_user(user, group)"
    },
    {
        "line": 747,
        "fullcodeline": "tmp_filename = None"
    },
    {
        "line": 458,
        "fullcodeline": "if 'env' in kwargs:"
    },
    {
        "line": 475,
        "fullcodeline": "if mode is not None and salt.utils.is_windows():"
    },
    {
        "line": 494,
        "fullcodeline": "if source and contents_count > 0:"
    },
    {
        "line": 515,
        "fullcodeline": "if not source and contents_count == 0 and replace:"
    },
    {
        "line": 526,
        "fullcodeline": "if contents_pillar is not None:"
    },
    {
        "line": 576,
        "fullcodeline": "if use_contents is not None:"
    },
    {
        "line": 625,
        "fullcodeline": "if not name:"
    },
    {
        "line": 654,
        "fullcodeline": "if context is None:"
    },
    {
        "line": 659,
        "fullcodeline": "if defaults and not isinstance(defaults, dict):"
    },
    {
        "line": 674,
        "fullcodeline": "accum_data, _ = _load_accumulators()"
    },
    {
        "line": 675,
        "fullcodeline": "if name in accum_data:"
    },
    {
        "line": 820,
        "fullcodeline": "if comment_ and contents is None:"
    },
    {
        "line": 465,
        "fullcodeline": "kwargs.pop('env')"
    },
    {
        "line": 479,
        "fullcodeline": "keep_mode = mode.lower() == 'keep'"
    },
    {
        "line": 516,
        "fullcodeline": "replace = False"
    },
    {
        "line": 517,
        "fullcodeline": "log.warning("
    },
    {
        "line": 628,
        "fullcodeline": "if salt.utils.is_windows():"
    },
    {
        "line": 634,
        "fullcodeline": "group = user"
    },
    {
        "line": 649,
        "fullcodeline": "if os.path.isdir(name):"
    },
    {
        "line": 650,
        "fullcodeline": "ret['comment'] = 'Specified target {0} is a directory'.format(name)"
    },
    {
        "line": 651,
        "fullcodeline": "ret['result'] = False"
    },
    {
        "line": 655,
        "fullcodeline": "context = {}"
    },
    {
        "line": 663,
        "fullcodeline": "if not replace and os.path.exists(name):"
    },
    {
        "line": 678,
        "fullcodeline": "context['accumulator'] = accum_data[name]"
    },
    {
        "line": 750,
        "fullcodeline": "tmp_filename = salt.utils.mkstemp(suffix=tmp_ext)"
    },
    {
        "line": 459,
        "fullcodeline": "salt.utils.warn_until("
    },
    {
        "line": 476,
        "fullcodeline": "return _error(ret, 'The \\'mode\\' option is not supported on Windows')"
    },
    {
        "line": 490,
        "fullcodeline": "[x for x in (contents, contents_pillar, contents_grains)"
    },
    {
        "line": 495,
        "fullcodeline": "return _error("
    },
    {
        "line": 500,
        "fullcodeline": "elif keep_mode and contents_count > 0:"
    },
    {
        "line": 527,
        "fullcodeline": "if isinstance(contents_pillar, list):"
    },
    {
        "line": 548,
        "fullcodeline": "elif contents_grains is not None:"
    },
    {
        "line": 592,
        "fullcodeline": "isinstance(use_contents, six.string_types) and '\\0' in use_contents"
    },
    {
        "line": 626,
        "fullcodeline": "return _error(ret, 'Must provide name to file.exists')"
    },
    {
        "line": 644,
        "fullcodeline": "return _error(ret, u_check)"
    },
    {
        "line": 645,
        "fullcodeline": "if not os.path.isabs(name):"
    },
    {
        "line": 646,
        "fullcodeline": "return _error("
    },
    {
        "line": 660,
        "fullcodeline": "return _error("
    },
    {
        "line": 665,
        "fullcodeline": "ret, _ = __salt__['file.check_perms'](name, ret, user, group, mode,"
    },
    {
        "line": 676,
        "fullcodeline": "if not context:"
    },
    {
        "line": 715,
        "fullcodeline": "source, source_hash = __salt__['file.source_list']("
    },
    {
        "line": 727,
        "fullcodeline": "sfn, source_sum, comment_ = __salt__['file.get_managed']("
    },
    {
        "line": 753,
        "fullcodeline": "if __salt__['file.file_exists'](name):"
    },
    {
        "line": 821,
        "fullcodeline": "return _error(ret, comment_)"
    },
    {
        "line": 461,
        "fullcodeline": "'Parameter \\'env\\' has been detected in the argument list.  This '"
    },
    {
        "line": 470,
        "fullcodeline": "'pchanges': {},"
    },
    {
        "line": 482,
        "fullcodeline": "mode = None"
    },
    {
        "line": 484,
        "fullcodeline": "keep_mode = False"
    },
    {
        "line": 497,
        "fullcodeline": "'\\'source\\' cannot be used in combination with \\'contents\\', '"
    },
    {
        "line": 518,
        "fullcodeline": "'State for file: {0} - Neither \\'source\\' nor \\'contents\\' nor '"
    },
    {
        "line": 528,
        "fullcodeline": "list_contents = []"
    },
    {
        "line": 538,
        "fullcodeline": "use_contents = os.linesep.join(list_contents)"
    },
    {
        "line": 540,
        "fullcodeline": "use_contents = __salt__['pillar.get'](contents_pillar, __NOT_FOUND,"
    },
    {
        "line": 577,
        "fullcodeline": "if not allow_empty and not use_contents:"
    },
    {
        "line": 594,
        "fullcodeline": "contents = use_contents"
    },
    {
        "line": 596,
        "fullcodeline": "validated_contents = _validate_str_list(use_contents)"
    },
    {
        "line": 604,
        "fullcodeline": "contents = os.linesep.join(validated_contents)"
    },
    {
        "line": 608,
        "fullcodeline": "contents = __salt__['file.apply_template_on_contents']("
    },
    {
        "line": 630,
        "fullcodeline": "log.warning("
    },
    {
        "line": 638,
        "fullcodeline": "ret['comment'] = ('File {0} is not present and is not set for '"
    },
    {
        "line": 656,
        "fullcodeline": "elif not isinstance(context, dict):"
    },
    {
        "line": 668,
        "fullcodeline": "ret['comment'] = 'File {0} not updated'.format(name)"
    },
    {
        "line": 677,
        "fullcodeline": "context = {}"
    },
    {
        "line": 721,
        "fullcodeline": "ret['result'] = False"
    },
    {
        "line": 722,
        "fullcodeline": "ret['comment'] = 'Unable to manage file: {0}'.format(exc)"
    },
    {
        "line": 743,
        "fullcodeline": "ret['changes'] = {}"
    },
    {
        "line": 744,
        "fullcodeline": "log.debug(traceback.format_exc())"
    },
    {
        "line": 765,
        "fullcodeline": "ret = __salt__['file.manage_file']("
    },
    {
        "line": 795,
        "fullcodeline": "ret = {'changes': {},"
    },
    {
        "line": 804,
        "fullcodeline": "cret = mod_run_check_cmd(check_cmd, tmp_filename, **check_cmd_opts)"
    },
    {
        "line": 813,
        "fullcodeline": "sfn = tmp_filename"
    },
    {
        "line": 815,
        "fullcodeline": "ret = {'changes': {},"
    },
    {
        "line": 501,
        "fullcodeline": "return _error("
    },
    {
        "line": 506,
        "fullcodeline": "elif contents_count > 1:"
    },
    {
        "line": 529,
        "fullcodeline": "for nextp in contents_pillar:"
    },
    {
        "line": 542,
        "fullcodeline": "if use_contents is __NOT_FOUND:"
    },
    {
        "line": 549,
        "fullcodeline": "if isinstance(contents_grains, list):"
    },
    {
        "line": 570,
        "fullcodeline": "elif contents is not None:"
    },
    {
        "line": 584,
        "fullcodeline": "return _error("
    },
    {
        "line": 597,
        "fullcodeline": "if not validated_contents:"
    },
    {
        "line": 636,
        "fullcodeline": "if not os.path.isfile(name):"
    },
    {
        "line": 647,
        "fullcodeline": "ret, 'Specified file {0} is not an absolute path'.format(name))"
    },
    {
        "line": 657,
        "fullcodeline": "return _error("
    },
    {
        "line": 669,
        "fullcodeline": "elif not ret['changes'] and ret['result']:"
    },
    {
        "line": 699,
        "fullcodeline": "if isinstance(ret['pchanges'], tuple):"
    },
    {
        "line": 745,
        "fullcodeline": "return _error(ret, 'Unable to manage file: {0}'.format(exc))"
    },
    {
        "line": 801,
        "fullcodeline": "if 'shell' in __grains__:"
    },
    {
        "line": 805,
        "fullcodeline": "if isinstance(cret, dict):"
    },
    {
        "line": 824,
        "fullcodeline": "return __salt__['file.manage_file']("
    },
    {
        "line": 503,
        "fullcodeline": "'Mode preservation cannot be used in combination with \\'contents\\', '"
    },
    {
        "line": 550,
        "fullcodeline": "list_contents = []"
    },
    {
        "line": 560,
        "fullcodeline": "use_contents = os.linesep.join(list_contents)"
    },
    {
        "line": 562,
        "fullcodeline": "use_contents = __salt__['grains.get'](contents_grains, __NOT_FOUND,"
    },
    {
        "line": 571,
        "fullcodeline": "use_contents = contents"
    },
    {
        "line": 574,
        "fullcodeline": "use_contents = None"
    },
    {
        "line": 579,
        "fullcodeline": "contents_id = 'contents_pillar {0}'.format(contents_pillar)"
    },
    {
        "line": 605,
        "fullcodeline": "if contents_newline and not contents.endswith(os.linesep):"
    },
    {
        "line": 606,
        "fullcodeline": "contents += os.linesep"
    },
    {
        "line": 614,
        "fullcodeline": "if not isinstance(contents, six.string_types):"
    },
    {
        "line": 631,
        "fullcodeline": "'The group argument for {0} has been ignored as this '"
    },
    {
        "line": 670,
        "fullcodeline": "ret['comment'] = ('File {0} exists with proper permissions. '"
    },
    {
        "line": 683,
        "fullcodeline": "ret['pchanges'] = __salt__['file.check_managed_changes']("
    },
    {
        "line": 755,
        "fullcodeline": "__salt__['file.copy'](name, tmp_filename)"
    },
    {
        "line": 786,
        "fullcodeline": "ret['changes'] = {}"
    },
    {
        "line": 787,
        "fullcodeline": "log.debug(traceback.format_exc())"
    },
    {
        "line": 800,
        "fullcodeline": "check_cmd_opts = {}"
    },
    {
        "line": 806,
        "fullcodeline": "ret.update(cret)"
    },
    {
        "line": 845,
        "fullcodeline": "ret['changes'] = {}"
    },
    {
        "line": 849,
        "fullcodeline": "if tmp_filename and os.path.isfile(tmp_filename):"
    },
    {
        "line": 507,
        "fullcodeline": "return _error("
    },
    {
        "line": 530,
        "fullcodeline": "nextc = __salt__['pillar.get'](nextp, __NOT_FOUND,"
    },
    {
        "line": 537,
        "fullcodeline": "list_contents.append(nextc)"
    },
    {
        "line": 543,
        "fullcodeline": "return _error("
    },
    {
        "line": 551,
        "fullcodeline": "for nextg in contents_grains:"
    },
    {
        "line": 564,
        "fullcodeline": "if use_contents is __NOT_FOUND:"
    },
    {
        "line": 586,
        "fullcodeline": "'{0} value would result in empty contents. Set allow_empty '"
    },
    {
        "line": 598,
        "fullcodeline": "return _error("
    },
    {
        "line": 615,
        "fullcodeline": "if 'result' in contents:"
    },
    {
        "line": 619,
        "fullcodeline": "if 'comment' in contents:"
    },
    {
        "line": 700,
        "fullcodeline": "ret['result'], ret['comment'] = ret['pchanges']"
    },
    {
        "line": 790,
        "fullcodeline": "return _error(ret, 'Unable to check_cmd file: {0}'.format(exc))"
    },
    {
        "line": 846,
        "fullcodeline": "log.debug(traceback.format_exc())"
    },
    {
        "line": 847,
        "fullcodeline": "return _error(ret, 'Unable to manage file: {0}'.format(exc))"
    },
    {
        "line": 491,
        "fullcodeline": "if x is not None]"
    },
    {
        "line": 509,
        "fullcodeline": "'Only one of \\'contents\\', \\'contents_pillar\\', and '"
    },
    {
        "line": 532,
        "fullcodeline": "if nextc is __NOT_FOUND:"
    },
    {
        "line": 581,
        "fullcodeline": "contents_id = 'contents_grains {0}'.format(contents_grains)"
    },
    {
        "line": 583,
        "fullcodeline": "contents_id = '\\'contents\\''"
    },
    {
        "line": 600,
        "fullcodeline": "'Contents specified by contents/contents_pillar/'"
    },
    {
        "line": 616,
        "fullcodeline": "ret['result'] = contents['result']"
    },
    {
        "line": 618,
        "fullcodeline": "ret['result'] = False"
    },
    {
        "line": 620,
        "fullcodeline": "ret['comment'] = contents['comment']"
    },
    {
        "line": 622,
        "fullcodeline": "ret['comment'] = 'Error while applying template on contents'"
    },
    {
        "line": 702,
        "fullcodeline": "ret['result'] = None"
    },
    {
        "line": 703,
        "fullcodeline": "ret['comment'] = 'The file {0} is set to be changed'.format(name)"
    },
    {
        "line": 709,
        "fullcodeline": "ret['result'] = True"
    },
    {
        "line": 710,
        "fullcodeline": "ret['comment'] = 'The file {0} is in the correct state'.format(name)"
    },
    {
        "line": 788,
        "fullcodeline": "if os.path.isfile(tmp_filename):"
    },
    {
        "line": 789,
        "fullcodeline": "os.remove(tmp_filename)"
    },
    {
        "line": 807,
        "fullcodeline": "if os.path.isfile(tmp_filename):"
    },
    {
        "line": 545,
        "fullcodeline": "'Pillar {0} does not exist'.format(contents_pillar)"
    },
    {
        "line": 552,
        "fullcodeline": "nextc = __salt__['grains.get'](nextg, __NOT_FOUND,"
    },
    {
        "line": 559,
        "fullcodeline": "list_contents.append(nextc)"
    },
    {
        "line": 565,
        "fullcodeline": "return _error("
    },
    {
        "line": 704,
        "fullcodeline": "if show_changes and 'diff' in ret['pchanges']:"
    },
    {
        "line": 706,
        "fullcodeline": "if not show_changes:"
    },
    {
        "line": 757,
        "fullcodeline": "return _error("
    },
    {
        "line": 533,
        "fullcodeline": "return _error("
    },
    {
        "line": 554,
        "fullcodeline": "if nextc is __NOT_FOUND:"
    },
    {
        "line": 567,
        "fullcodeline": "'Grain {0} does not exist'.format(contents_grains)"
    },
    {
        "line": 759,
        "fullcodeline": "'Unable to copy file {0} to {1}: {2}'.format("
    },
    {
        "line": 535,
        "fullcodeline": "'Pillar {0} does not exist'.format(nextp)"
    },
    {
        "line": 555,
        "fullcodeline": "return _error("
    },
    {
        "line": 557,
        "fullcodeline": "'Grain {0} does not exist'.format(nextc)"
    }
]