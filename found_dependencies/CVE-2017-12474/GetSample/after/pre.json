[
    {
        "line": 17,
        "fullcodeline": "index++;"
    },
    {
        "line": 21,
        "fullcodeline": "result = m_StscAtom->GetChunkForSample(index, chunk, skip, desc);"
    },
    {
        "line": 53,
        "fullcodeline": "sample.SetDescriptionIndex(desc-1); // adjust for 0-based indexes"
    },
    {
        "line": 56,
        "fullcodeline": "AP4_UI32 cts_offset = 0;"
    },
    {
        "line": 57,
        "fullcodeline": "AP4_UI64 dts        = 0;"
    },
    {
        "line": 58,
        "fullcodeline": "AP4_UI32 duration   = 0;"
    },
    {
        "line": 59,
        "fullcodeline": "result = m_SttsAtom->GetDts(index, dts, &duration);"
    },
    {
        "line": 61,
        "fullcodeline": "sample.SetDuration(duration);"
    },
    {
        "line": 62,
        "fullcodeline": "sample.SetDts(dts);"
    },
    {
        "line": 72,
        "fullcodeline": "AP4_Size sample_size = 0;"
    },
    {
        "line": 81,
        "fullcodeline": "sample.SetSize(sample_size);"
    },
    {
        "line": 91,
        "fullcodeline": "sample.SetOffset(offset);"
    },
    {
        "line": 94,
        "fullcodeline": "sample.SetDataStream(m_SampleStream);"
    },
    {
        "line": 7,
        "fullcodeline": "if (!m_StscAtom) {"
    },
    {
        "line": 22,
        "fullcodeline": "if (AP4_FAILED(result)) return result;"
    },
    {
        "line": 25,
        "fullcodeline": "if (skip > index) return AP4_ERROR_INTERNAL;"
    },
    {
        "line": 36,
        "fullcodeline": "if (AP4_FAILED(result)) return result;"
    },
    {
        "line": 39,
        "fullcodeline": "for (unsigned int i = index-skip; i < index; i++) {"
    },
    {
        "line": 60,
        "fullcodeline": "if (AP4_FAILED(result)) return result;"
    },
    {
        "line": 63,
        "fullcodeline": "if (m_CttsAtom == NULL) {"
    },
    {
        "line": 80,
        "fullcodeline": "if (AP4_FAILED(result)) return result;"
    },
    {
        "line": 84,
        "fullcodeline": "if (m_StssAtom == NULL) {"
    },
    {
        "line": 12,
        "fullcodeline": "if (m_StcoAtom == NULL && m_Co64Atom == NULL) {"
    },
    {
        "line": 31,
        "fullcodeline": "result = m_StcoAtom->GetChunkOffset(chunk, offset_32);"
    },
    {
        "line": 32,
        "fullcodeline": "offset = offset_32;"
    },
    {
        "line": 40,
        "fullcodeline": "AP4_Size size = 0;"
    },
    {
        "line": 49,
        "fullcodeline": "offset += size;"
    },
    {
        "line": 64,
        "fullcodeline": "sample.SetCts(dts);"
    },
    {
        "line": 74,
        "fullcodeline": "result = m_StszAtom->GetSampleSize(index, sample_size);"
    },
    {
        "line": 85,
        "fullcodeline": "sample.SetSync(true);"
    },
    {
        "line": 34,
        "fullcodeline": "result = m_Co64Atom->GetChunkOffset(chunk, offset);"
    },
    {
        "line": 48,
        "fullcodeline": "if (AP4_FAILED(result)) return result;"
    },
    {
        "line": 66,
        "fullcodeline": "result = m_CttsAtom->GetCtsOffset(index, cts_offset);"
    },
    {
        "line": 68,
        "fullcodeline": "sample.SetCtsDelta(cts_offset);"
    },
    {
        "line": 87,
        "fullcodeline": "sample.SetSync(m_StssAtom->IsSampleSync(index));"
    },
    {
        "line": 42,
        "fullcodeline": "result = m_StszAtom->GetSampleSize(i, size);"
    },
    {
        "line": 67,
        "fullcodeline": "if (AP4_FAILED(result)) return result;"
    },
    {
        "line": 76,
        "fullcodeline": "result = m_Stz2Atom->GetSampleSize(index, sample_size);"
    },
    {
        "line": 78,
        "fullcodeline": "result = AP4_ERROR_INVALID_FORMAT;"
    },
    {
        "line": 44,
        "fullcodeline": "result = m_Stz2Atom->GetSampleSize(i, size);"
    },
    {
        "line": 46,
        "fullcodeline": "result = AP4_ERROR_INVALID_FORMAT;"
    }
]