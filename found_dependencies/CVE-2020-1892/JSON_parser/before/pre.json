[
    {
        "line": 4,
        "fullcodeline": "NoHandleSurpriseScope no_surprise(SafepointFlags);"
    },
    {
        "line": 6,
        "fullcodeline": "json_parser *json = s_json_parser.get(); /* the parser state */"
    },
    {
        "line": 10,
        "fullcodeline": "json->initSb(length);"
    },
    {
        "line": 37,
        "fullcodeline": "int state = 0;"
    },
    {
        "line": 40,
        "fullcodeline": "bool const loose = options & k_JSON_FB_LOOSE;"
    },
    {
        "line": 41,
        "fullcodeline": "JSONContainerType const container_type ="
    },
    {
        "line": 43,
        "fullcodeline": "int qchr = 0;"
    },
    {
        "line": 45,
        "fullcodeline": "int8_t const (*next_state_table)[32];"
    },
    {
        "line": 55,
        "fullcodeline": "UncheckedBuffer *buf = &json->sb_buf;"
    },
    {
        "line": 56,
        "fullcodeline": "UncheckedBuffer *key = &json->sb_key;"
    },
    {
        "line": 58,
        "fullcodeline": "DataType type = kInvalidDataType;"
    },
    {
        "line": 59,
        "fullcodeline": "unsigned short escaped_bytes = 0;"
    },
    {
        "line": 63,
        "fullcodeline": "json->depth = depth;"
    },
    {
        "line": 79,
        "fullcodeline": "json->mark = json->top = -1;"
    },
    {
        "line": 80,
        "fullcodeline": "push(json, Mode::DONE);"
    },
    {
        "line": 19,
        "fullcodeline": "if (assoc &&"
    },
    {
        "line": 42,
        "fullcodeline": "get_container_type_from_options(options);"
    },
    {
        "line": 67,
        "fullcodeline": "if (depth > json->stack.size()) {"
    },
    {
        "line": 28,
        "fullcodeline": "SimpleParser::TryParse(p, length, json->tl_buffer.tv, z,"
    },
    {
        "line": 47,
        "fullcodeline": "byte_class = loose_ascii_class;"
    },
    {
        "line": 48,
        "fullcodeline": "next_state_table = loose_state_transition_table;"
    },
    {
        "line": 68,
        "fullcodeline": "json->stack.resize(depth);"
    },
    {
        "line": 84,
        "fullcodeline": "b = decoder.decode();"
    },
    {
        "line": 115,
        "fullcodeline": "s = next_state_table[state][c];"
    },
    {
        "line": 492,
        "fullcodeline": "if (state == 9 && pop(json, Mode::DONE)) {"
    },
    {
        "line": 493,
        "fullcodeline": "s_json_parser->error_code = JSON_ERROR_NONE;"
    },
    {
        "line": 27,
        "fullcodeline": "length <= RuntimeOption::EvalSimpleJsonMaxLength &&"
    },
    {
        "line": 29,
        "fullcodeline": "get_container_type_from_options(options),"
    },
    {
        "line": 30,
        "fullcodeline": "options & k_JSON_FB_THRIFT_SIMPLE_JSON)) {"
    },
    {
        "line": 50,
        "fullcodeline": "byte_class = ascii_class;"
    },
    {
        "line": 51,
        "fullcodeline": "next_state_table = state_transition_table;"
    },
    {
        "line": 92,
        "fullcodeline": "if (b == UTF8_END) break; // UTF-8 decoding finishes successfully."
    },
    {
        "line": 93,
        "fullcodeline": "if (b == UTF8_ERROR) {"
    },
    {
        "line": 97,
        "fullcodeline": "assertx(b >= 0);"
    },
    {
        "line": 99,
        "fullcodeline": "if ((b & 127) == b) {"
    },
    {
        "line": 117,
        "fullcodeline": "if (s == -4) {"
    },
    {
        "line": 126,
        "fullcodeline": "if (s < 0) {"
    },
    {
        "line": 26,
        "fullcodeline": "depth >= SimpleParser::kMaxArrayDepth &&"
    },
    {
        "line": 86,
        "fullcodeline": "if (state == 3 && type == KindOfString) {"
    },
    {
        "line": 94,
        "fullcodeline": "s_json_parser->error_code = JSON_ERROR_UTF8;"
    },
    {
        "line": 101,
        "fullcodeline": "c = byte_class[b];"
    },
    {
        "line": 20,
        "fullcodeline": "options == (options & (k_JSON_FB_LOOSE |"
    },
    {
        "line": 103,
        "fullcodeline": "if (c <= S_ERR) {"
    },
    {
        "line": 108,
        "fullcodeline": "c = S_ETC;"
    },
    {
        "line": 118,
        "fullcodeline": "if (b != qchr) {"
    },
    {
        "line": 415,
        "fullcodeline": "bool is_tsimplejson = options & k_JSON_FB_THRIFT_SIMPLE_JSON;"
    },
    {
        "line": 488,
        "fullcodeline": "state = s;"
    },
    {
        "line": 87,
        "fullcodeline": "while (b != '\\\"' &&  b != '\\\\' && b != '\\'' && b <= 127 && b >= ' ') {"
    },
    {
        "line": 88,
        "fullcodeline": "buf->append((char)b);"
    },
    {
        "line": 89,
        "fullcodeline": "b = decoder.decode();"
    },
    {
        "line": 104,
        "fullcodeline": "s_json_parser->error_code = JSON_ERROR_CTRL_CHAR;"
    },
    {
        "line": 119,
        "fullcodeline": "s = 3;"
    },
    {
        "line": 146,
        "fullcodeline": "state = 9;"
    },
    {
        "line": 157,
        "fullcodeline": "state = 1;"
    },
    {
        "line": 233,
        "fullcodeline": "state = 9;"
    },
    {
        "line": 243,
        "fullcodeline": "state = 2;"
    },
    {
        "line": 416,
        "fullcodeline": "if (type == KindOfString) {"
    },
    {
        "line": 121,
        "fullcodeline": "qchr = 0;"
    },
    {
        "line": 136,
        "fullcodeline": "if (json->top == 1) z = json->stack[json->top].val;"
    },
    {
        "line": 152,
        "fullcodeline": "if (!push(json, Mode::KEY)) {"
    },
    {
        "line": 158,
        "fullcodeline": "if (json->top > 0) {"
    },
    {
        "line": 221,
        "fullcodeline": "if (json->top == 1) z = json->stack[json->top].val;"
    },
    {
        "line": 245,
        "fullcodeline": "if (json->top > 0) {"
    },
    {
        "line": 300,
        "fullcodeline": "state = 9;"
    },
    {
        "line": 374,
        "fullcodeline": "buf->clear();"
    },
    {
        "line": 385,
        "fullcodeline": "if (json->stack[json->top].mode == Mode::KEY) {"
    },
    {
        "line": 143,
        "fullcodeline": "if (!pop(json, Mode::KEY)) {"
    },
    {
        "line": 187,
        "fullcodeline": "json->stack[json->top].key = copy_and_clear(*key);"
    },
    {
        "line": 209,
        "fullcodeline": "if (type != kInvalidDataType &&"
    },
    {
        "line": 210,
        "fullcodeline": "json->stack[json->top].mode == Mode::OBJECT) {"
    },
    {
        "line": 212,
        "fullcodeline": "json_create_zval(mval, *buf, type, options);"
    },
    {
        "line": 213,
        "fullcodeline": "Variant &top = json->stack[json->top].val;"
    },
    {
        "line": 214,
        "fullcodeline": "object_set(json, top, copy_and_clear(*key),"
    },
    {
        "line": 216,
        "fullcodeline": "buf->clear();"
    },
    {
        "line": 229,
        "fullcodeline": "if (!pop(json, Mode::OBJECT)) {"
    },
    {
        "line": 239,
        "fullcodeline": "if (!push(json, Mode::ARRAY)) {"
    },
    {
        "line": 264,
        "fullcodeline": "json->stack[json->top].key = copy_and_clear(*key);"
    },
    {
        "line": 273,
        "fullcodeline": "if (type != kInvalidDataType &&"
    },
    {
        "line": 288,
        "fullcodeline": "if (json->top == 1) z = json->stack[json->top].val;"
    },
    {
        "line": 309,
        "fullcodeline": "state = 27;"
    },
    {
        "line": 310,
        "fullcodeline": "std::swap(buf, key);"
    },
    {
        "line": 315,
        "fullcodeline": "state = 9;"
    },
    {
        "line": 387,
        "fullcodeline": "std::swap(buf, key);"
    },
    {
        "line": 400,
        "fullcodeline": "if (pop(json, Mode::KEY) && push(json, Mode::OBJECT)) {"
    },
    {
        "line": 401,
        "fullcodeline": "state = 28;"
    },
    {
        "line": 139,
        "fullcodeline": "attach_zval(json, json->stack[json->top].key, assoc, container_type);"
    },
    {
        "line": 161,
        "fullcodeline": "if (container_type == JSONContainerType::COLLECTIONS) {"
    },
    {
        "line": 203,
        "fullcodeline": "if (pop(json, Mode::KEY)) {"
    },
    {
        "line": 224,
        "fullcodeline": "attach_zval(json, json->stack[json->top].key,"
    },
    {
        "line": 248,
        "fullcodeline": "if (container_type == JSONContainerType::COLLECTIONS) {"
    },
    {
        "line": 274,
        "fullcodeline": "json->stack[json->top].mode == Mode::ARRAY) {"
    },
    {
        "line": 276,
        "fullcodeline": "json_create_zval(mval, *buf, type, options);"
    },
    {
        "line": 277,
        "fullcodeline": "auto& top = json->stack[json->top].val;"
    },
    {
        "line": 283,
        "fullcodeline": "buf->clear();"
    },
    {
        "line": 296,
        "fullcodeline": "if (!pop(json, Mode::ARRAY)) {"
    },
    {
        "line": 318,
        "fullcodeline": "if (type == KindOfString) {"
    },
    {
        "line": 335,
        "fullcodeline": "if (type != kInvalidDataType &&"
    },
    {
        "line": 336,
        "fullcodeline": "(json->stack[json->top].mode == Mode::OBJECT ||"
    },
    {
        "line": 338,
        "fullcodeline": "json_create_zval(mval, *buf, type, options);"
    },
    {
        "line": 368,
        "fullcodeline": "state = 28;"
    },
    {
        "line": 389,
        "fullcodeline": "s = -2;"
    },
    {
        "line": 417,
        "fullcodeline": "if (/*<fb>*/(/*</fb>*/s == 3/*<fb>*/ || s == 30)/*</fb>*/ &&"
    },
    {
        "line": 418,
        "fullcodeline": "state != 8) {"
    },
    {
        "line": 204,
        "fullcodeline": "push(json, Mode::OBJECT);"
    },
    {
        "line": 278,
        "fullcodeline": "if (container_type == JSONContainerType::COLLECTIONS) {"
    },
    {
        "line": 291,
        "fullcodeline": "attach_zval(json, json->stack[json->top].key, assoc,"
    },
    {
        "line": 320,
        "fullcodeline": "state = 9;"
    },
    {
        "line": 337,
        "fullcodeline": "json->stack[json->top].mode == Mode::ARRAY)) {"
    },
    {
        "line": 360,
        "fullcodeline": "if (type != kInvalidDataType) {"
    },
    {
        "line": 462,
        "fullcodeline": "} else if ((type == kInvalidDataType || type == KindOfNull) &&"
    },
    {
        "line": 463,
        "fullcodeline": "(c == S_DIG || c == S_ZER)) {"
    },
    {
        "line": 464,
        "fullcodeline": "type = KindOfInt64;"
    },
    {
        "line": 465,
        "fullcodeline": "buf->append((char)b);"
    },
    {
        "line": 319,
        "fullcodeline": "z = copy_and_clear(*buf);"
    },
    {
        "line": 343,
        "fullcodeline": "if (pop(json, Mode::OBJECT) &&"
    },
    {
        "line": 344,
        "fullcodeline": "push(json, Mode::KEY)) {"
    },
    {
        "line": 356,
        "fullcodeline": "state = 29;"
    },
    {
        "line": 361,
        "fullcodeline": "auto& top = json->stack[json->top].val;"
    },
    {
        "line": 420,
        "fullcodeline": "utf16_to_utf8(*buf, b);"
    },
    {
        "line": 433,
        "fullcodeline": "} else if (s == 6) {"
    },
    {
        "line": 166,
        "fullcodeline": "if (!assoc) {"
    },
    {
        "line": 250,
        "fullcodeline": "} else if (container_type == JSONContainerType::HACK_ARRAYS) {"
    },
    {
        "line": 279,
        "fullcodeline": "collections::append(top.getObjectData(), mval.asTypedValue());"
    },
    {
        "line": 281,
        "fullcodeline": "top.asArrRef().append(mval);"
    },
    {
        "line": 345,
        "fullcodeline": "if (type != kInvalidDataType) {"
    },
    {
        "line": 362,
        "fullcodeline": "if (container_type == JSONContainerType::COLLECTIONS) {"
    },
    {
        "line": 466,
        "fullcodeline": "} else if (type == KindOfInt64 && s == 24) {"
    },
    {
        "line": 346,
        "fullcodeline": "Variant &top = json->stack[json->top].val;"
    },
    {
        "line": 347,
        "fullcodeline": "object_set("
    },
    {
        "line": 467,
        "fullcodeline": "type = KindOfDouble;"
    },
    {
        "line": 468,
        "fullcodeline": "buf->append((char)b);"
    },
    {
        "line": 350,
        "fullcodeline": "copy_and_clear(*key),"
    },
    {
        "line": 363,
        "fullcodeline": "collections::append(top.getObjectData(), mval.asTypedValue());"
    },
    {
        "line": 365,
        "fullcodeline": "top.asArrRef().append(mval);"
    },
    {
        "line": 423,
        "fullcodeline": "case 'b': buf->append('\\b'); break;"
    },
    {
        "line": 424,
        "fullcodeline": "case 't': buf->append('\\t'); break;"
    },
    {
        "line": 425,
        "fullcodeline": "case 'n': buf->append('\\n'); break;"
    },
    {
        "line": 426,
        "fullcodeline": "case 'f': buf->append('\\f'); break;"
    },
    {
        "line": 427,
        "fullcodeline": "case 'r': buf->append('\\r'); break;"
    },
    {
        "line": 429,
        "fullcodeline": "utf16_to_utf8(*buf, b);"
    },
    {
        "line": 439,
        "fullcodeline": "escaped_bytes = 0;"
    },
    {
        "line": 443,
        "fullcodeline": "} else if (s == 7) {"
    },
    {
        "line": 169,
        "fullcodeline": "} else if (container_type == JSONContainerType::HACK_ARRAYS) {"
    },
    {
        "line": 252,
        "fullcodeline": "} else if (container_type == JSONContainerType::DARRAYS_AND_VARRAYS) {"
    },
    {
        "line": 441,
        "fullcodeline": "escaped_bytes = dehexchar(b) << 12;"
    },
    {
        "line": 435,
        "fullcodeline": "if (UNLIKELY(b != '0'))  {"
    },
    {
        "line": 469,
        "fullcodeline": "} else if ((type == kInvalidDataType || type == KindOfNull ||"
    },
    {
        "line": 471,
        "fullcodeline": "c == S_DOT) {"
    },
    {
        "line": 472,
        "fullcodeline": "type = KindOfDouble;"
    },
    {
        "line": 473,
        "fullcodeline": "buf->append((char)b);"
    },
    {
        "line": 452,
        "fullcodeline": "} else if (s == 8) {"
    },
    {
        "line": 470,
        "fullcodeline": "type == KindOfInt64) &&"
    },
    {
        "line": 254,
        "fullcodeline": "} else if (container_type == JSONContainerType::DARRAYS) {"
    },
    {
        "line": 450,
        "fullcodeline": "escaped_bytes += dehexchar(b) << 8;"
    },
    {
        "line": 453,
        "fullcodeline": "escaped_bytes += dehexchar(b) << 4;"
    },
    {
        "line": 171,
        "fullcodeline": "} else if (container_type == JSONContainerType::DARRAYS ||"
    },
    {
        "line": 172,
        "fullcodeline": "container_type == JSONContainerType::DARRAYS_AND_VARRAYS)"
    },
    {
        "line": 445,
        "fullcodeline": "if (UNLIKELY(b != '0'))  {"
    },
    {
        "line": 474,
        "fullcodeline": "} else if (type != KindOfString && c == S_QUO) {"
    },
    {
        "line": 475,
        "fullcodeline": "type = KindOfString;"
    },
    {
        "line": 476,
        "fullcodeline": "/*<fb>*/qchr = b;/*</fb>*/"
    },
    {
        "line": 177,
        "fullcodeline": "container_type == JSONContainerType::LEGACY_HACK_ARRAYS) {"
    },
    {
        "line": 256,
        "fullcodeline": "} else if (container_type == JSONContainerType::LEGACY_HACK_ARRAYS) {"
    },
    {
        "line": 454,
        "fullcodeline": "} else if (s == 3 && state == 8) {"
    },
    {
        "line": 455,
        "fullcodeline": "escaped_bytes += dehexchar(b);"
    },
    {
        "line": 178,
        "fullcodeline": "auto arr = staticEmptyDictArray()->copy();"
    },
    {
        "line": 179,
        "fullcodeline": "arr->setLegacyArray(true);"
    },
    {
        "line": 257,
        "fullcodeline": "auto arr = staticEmptyVecArray()->copy();"
    },
    {
        "line": 258,
        "fullcodeline": "arr->setLegacyArray(true);"
    },
    {
        "line": 477,
        "fullcodeline": "} else if ((type == kInvalidDataType || type == KindOfNull ||"
    },
    {
        "line": 479,
        "fullcodeline": "((state == 12 && s == 9) ||"
    },
    {
        "line": 481,
        "fullcodeline": "type = KindOfBoolean;"
    },
    {
        "line": 457,
        "fullcodeline": "buf->append((char)escaped_bytes);"
    },
    {
        "line": 478,
        "fullcodeline": "type == KindOfInt64 || type == KindOfDouble) &&"
    },
    {
        "line": 480,
        "fullcodeline": "(state == 16 && s == 9))) {"
    },
    {
        "line": 459,
        "fullcodeline": "utf16_to_utf8(*buf, escaped_bytes);"
    },
    {
        "line": 482,
        "fullcodeline": "} else if (type == kInvalidDataType && state == 19 && s == 9) {"
    },
    {
        "line": 483,
        "fullcodeline": "type = KindOfNull;"
    },
    {
        "line": 484,
        "fullcodeline": "} else if (type != KindOfString && c > S_WSP) {"
    },
    {
        "line": 485,
        "fullcodeline": "utf16_to_utf8(*buf, b);"
    }
]