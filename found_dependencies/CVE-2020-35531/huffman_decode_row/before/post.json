[
    {
        "line": 4,
        "fullcodeline": "x3f_directory_entry_header_t *DEH = &DE->header;"
    },
    {
        "line": 6,
        "fullcodeline": "x3f_huffman_t *HUF = ID->huffman;"
    },
    {
        "line": 8,
        "fullcodeline": "int16_t c[3] = {(int16_t)offset, (int16_t)offset, (int16_t)offset};"
    },
    {
        "line": 12,
        "fullcodeline": "set_bit_state(&BS, (uint8_t *)ID->data + HUF->row_offsets.element[row]);"
    },
    {
        "line": 14,
        "fullcodeline": "for (col = 0; col < ID->columns; col++)"
    },
    {
        "line": 18,
        "fullcodeline": "for (color = 0; color < 3; color++)"
    },
    {
        "line": 22,
        "fullcodeline": "c[color] += get_huffman_diff(&BS, &HUF->tree);"
    },
    {
        "line": 23,
        "fullcodeline": "if (c[color] < 0)"
    },
    {
        "line": 25,
        "fullcodeline": "c_fix = 0;"
    },
    {
        "line": 38,
        "fullcodeline": "HUF->x3rgb16.data[3 * (row * ID->columns + col) + color] ="
    },
    {
        "line": 42,
        "fullcodeline": "HUF->rgb8.data[3 * (row * ID->columns + col) + color] = (uint8_t)c_fix;"
    },
    {
        "line": 26,
        "fullcodeline": "if (c[color] < *minimum)"
    },
    {
        "line": 31,
        "fullcodeline": "c_fix = c[color];"
    },
    {
        "line": 39,
        "fullcodeline": "(uint16_t)c_fix;"
    },
    {
        "line": 27,
        "fullcodeline": "*minimum = c[color];"
    }
]