[
    {
        "line": 5,
        "fullcodeline": "headers.removeInline(authorization_handle.handle());"
    },
    {
        "line": 9,
        "fullcodeline": "const Http::HeaderEntry* host_header = headers.Host();"
    },
    {
        "line": 10,
        "fullcodeline": "ASSERT(host_header != nullptr);"
    },
    {
        "line": 11,
        "fullcodeline": "host_ = host_header->value().getStringView();"
    },
    {
        "line": 13,
        "fullcodeline": "const Http::HeaderEntry* path_header = headers.Path();"
    },
    {
        "line": 14,
        "fullcodeline": "ASSERT(path_header != nullptr);"
    },
    {
        "line": 15,
        "fullcodeline": "const absl::string_view path_str = path_header->value().getStringView();"
    },
    {
        "line": 105,
        "fullcodeline": "const auto query_parameters = Http::Utility::parseQueryString(path_str);"
    },
    {
        "line": 118,
        "fullcodeline": "auth_code_ = query_parameters.at(queryParamsCode());"
    },
    {
        "line": 119,
        "fullcodeline": "state_ = Http::Utility::PercentEncoding::decode(query_parameters.at(queryParamsState()));"
    },
    {
        "line": 128,
        "fullcodeline": "const auto redirect_uri = formatter.format(headers, *Http::ResponseHeaderMapImpl::create(),"
    },
    {
        "line": 131,
        "fullcodeline": "oauth_client_->asyncGetAccessToken(auth_code_, config_->clientId(), config_->clientSecret(),"
    },
    {
        "line": 18,
        "fullcodeline": "if (config_->signoutPath().match(path_header->value().getStringView())) {"
    },
    {
        "line": 22,
        "fullcodeline": "if (canSkipOAuth(headers)) {"
    },
    {
        "line": 56,
        "fullcodeline": "if (config_->forwardBearerToken()) {"
    },
    {
        "line": 127,
        "fullcodeline": "Formatter::FormatterImpl formatter(config_->redirectUri());"
    },
    {
        "line": 57,
        "fullcodeline": "request_headers_ = &headers;"
    },
    {
        "line": 64,
        "fullcodeline": "if (!config_->redirectPathMatcher().match(path_str)) {"
    },
    {
        "line": 65,
        "fullcodeline": "Http::ResponseHeaderMapPtr response_headers{Http::createHeaderMap<Http::ResponseHeaderMapImpl>("
    },
    {
        "line": 71,
        "fullcodeline": "auto scheme = Http::Headers::get().SchemeValues.Https;"
    },
    {
        "line": 73,
        "fullcodeline": "const auto* scheme_header = headers.Scheme();"
    },
    {
        "line": 79,
        "fullcodeline": "const std::string base_path = absl::StrCat(scheme, \"://\", host_);"
    },
    {
        "line": 80,
        "fullcodeline": "const std::string state_path = absl::StrCat(base_path, headers.Path()->value().getStringView());"
    },
    {
        "line": 81,
        "fullcodeline": "const std::string escaped_state = Http::Utility::PercentEncoding::encode(state_path, \":/=&?\");"
    },
    {
        "line": 84,
        "fullcodeline": "const auto redirect_uri = formatter.format(headers, *Http::ResponseHeaderMapImpl::create(),"
    },
    {
        "line": 87,
        "fullcodeline": "const std::string escaped_redirect_uri ="
    },
    {
        "line": 90,
        "fullcodeline": "const std::string new_url = fmt::format("
    },
    {
        "line": 94,
        "fullcodeline": "response_headers->setLocation(new_url + config_->encodedResourceQueryParams());"
    },
    {
        "line": 95,
        "fullcodeline": "decoder_callbacks_->encodeHeaders(std::move(response_headers), true, REDIRECT_FOR_CREDENTIALS);"
    },
    {
        "line": 106,
        "fullcodeline": "if (query_parameters.find(queryParamsError()) != query_parameters.end()) {"
    },
    {
        "line": 112,
        "fullcodeline": "if (query_parameters.find(queryParamsCode()) == query_parameters.end() ||"
    },
    {
        "line": 113,
        "fullcodeline": "query_parameters.find(queryParamsState()) == query_parameters.end()) {"
    },
    {
        "line": 122,
        "fullcodeline": "if (!state_url.initialize(state_, false)) {"
    },
    {
        "line": 130,
        "fullcodeline": "decoder_callbacks_->streamInfo(), \"\");"
    },
    {
        "line": 19,
        "fullcodeline": "return signOutUser(headers);"
    },
    {
        "line": 29,
        "fullcodeline": "if (config_->redirectPathMatcher().match(path_str)) {"
    },
    {
        "line": 83,
        "fullcodeline": "Formatter::FormatterImpl formatter(config_->redirectUri());"
    },
    {
        "line": 88,
        "fullcodeline": "Http::Utility::PercentEncoding::encode(redirect_uri, \":/=&?\");"
    },
    {
        "line": 30,
        "fullcodeline": "Http::Utility::QueryParams query_parameters = Http::Utility::parseQueryString(path_str);"
    },
    {
        "line": 32,
        "fullcodeline": "const auto state ="
    },
    {
        "line": 44,
        "fullcodeline": "Http::ResponseHeaderMapPtr response_headers{"
    },
    {
        "line": 48,
        "fullcodeline": "decoder_callbacks_->encodeHeaders(std::move(response_headers), true, REDIRECT_RACE);"
    },
    {
        "line": 74,
        "fullcodeline": "if ((scheme_header != nullptr &&"
    },
    {
        "line": 75,
        "fullcodeline": "scheme_header->value().getStringView() == Http::Headers::get().SchemeValues.Http)) {"
    },
    {
        "line": 76,
        "fullcodeline": "scheme = Http::Headers::get().SchemeValues.Http;"
    },
    {
        "line": 86,
        "fullcodeline": "decoder_callbacks_->streamInfo(), \"\");"
    },
    {
        "line": 91,
        "fullcodeline": "AuthorizationEndpointFormat, config_->authorizationEndpoint(), config_->clientId(),"
    },
    {
        "line": 92,
        "fullcodeline": "config_->encodedAuthScopes(), escaped_redirect_uri, escaped_state);"
    },
    {
        "line": 33,
        "fullcodeline": "Http::Utility::PercentEncoding::decode(query_parameters.at(queryParamsState()));"
    },
    {
        "line": 35,
        "fullcodeline": "if (!state_url.initialize(state, false)) {"
    },
    {
        "line": 40,
        "fullcodeline": "if (config_->redirectPathMatcher().match(state_url.pathAndQueryParams())) {"
    },
    {
        "line": 45,
        "fullcodeline": "Http::createHeaderMap<Http::ResponseHeaderMapImpl>("
    },
    {
        "line": 66,
        "fullcodeline": "{{Http::Headers::get().Status, std::to_string(enumToInt(Http::Code::Found))}})};"
    },
    {
        "line": 46,
        "fullcodeline": "{{Http::Headers::get().Status, std::to_string(enumToInt(Http::Code::Found))},"
    }
]