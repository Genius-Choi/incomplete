[
    {
        "line": 29,
        "fullcodeline": "retval = \"STALE\""
    },
    {
        "line": 30,
        "fullcodeline": "cc = _parse_cache_control(request_headers)"
    },
    {
        "line": 31,
        "fullcodeline": "cc_response = _parse_cache_control(response_headers)"
    },
    {
        "line": 34,
        "fullcodeline": "\"pragma\" in request_headers"
    },
    {
        "line": 35,
        "fullcodeline": "and request_headers[\"pragma\"].lower().find(\"no-cache\") != -1"
    },
    {
        "line": 37,
        "fullcodeline": "retval = \"TRANSPARENT\""
    },
    {
        "line": 38,
        "fullcodeline": "if \"cache-control\" not in request_headers:"
    },
    {
        "line": 40,
        "fullcodeline": "elif \"no-cache\" in cc:"
    },
    {
        "line": 39,
        "fullcodeline": "request_headers[\"cache-control\"] = \"no-cache\""
    },
    {
        "line": 41,
        "fullcodeline": "retval = \"TRANSPARENT\""
    },
    {
        "line": 42,
        "fullcodeline": "elif \"no-cache\" in cc_response:"
    },
    {
        "line": 43,
        "fullcodeline": "retval = \"STALE\""
    },
    {
        "line": 44,
        "fullcodeline": "elif \"only-if-cached\" in cc:"
    },
    {
        "line": 45,
        "fullcodeline": "retval = \"FRESH\""
    },
    {
        "line": 46,
        "fullcodeline": "elif \"date\" in response_headers:"
    },
    {
        "line": 47,
        "fullcodeline": "date = calendar.timegm(email.Utils.parsedate_tz(response_headers[\"date\"]))"
    },
    {
        "line": 48,
        "fullcodeline": "now = time.time()"
    },
    {
        "line": 49,
        "fullcodeline": "current_age = max(0, now - date)"
    },
    {
        "line": 50,
        "fullcodeline": "if \"max-age\" in cc_response:"
    },
    {
        "line": 63,
        "fullcodeline": "if \"max-age\" in cc:"
    },
    {
        "line": 68,
        "fullcodeline": "if \"min-fresh\" in cc:"
    },
    {
        "line": 74,
        "fullcodeline": "if freshness_lifetime > current_age:"
    },
    {
        "line": 73,
        "fullcodeline": "current_age += min_fresh"
    },
    {
        "line": 75,
        "fullcodeline": "retval = \"FRESH\""
    },
    {
        "line": 55,
        "fullcodeline": "elif \"expires\" in response_headers:"
    },
    {
        "line": 52,
        "fullcodeline": "freshness_lifetime = int(cc_response[\"max-age\"])"
    },
    {
        "line": 56,
        "fullcodeline": "expires = email.Utils.parsedate_tz(response_headers[\"expires\"])"
    },
    {
        "line": 62,
        "fullcodeline": "freshness_lifetime = 0"
    },
    {
        "line": 65,
        "fullcodeline": "freshness_lifetime = int(cc[\"max-age\"])"
    },
    {
        "line": 70,
        "fullcodeline": "min_fresh = int(cc[\"min-fresh\"])"
    },
    {
        "line": 57,
        "fullcodeline": "if None == expires:"
    },
    {
        "line": 54,
        "fullcodeline": "freshness_lifetime = 0"
    },
    {
        "line": 58,
        "fullcodeline": "freshness_lifetime = 0"
    },
    {
        "line": 60,
        "fullcodeline": "freshness_lifetime = max(0, calendar.timegm(expires) - date)"
    },
    {
        "line": 67,
        "fullcodeline": "freshness_lifetime = 0"
    },
    {
        "line": 72,
        "fullcodeline": "min_fresh = 0"
    }
]