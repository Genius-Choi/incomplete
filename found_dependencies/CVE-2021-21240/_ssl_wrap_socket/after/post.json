[
    {
        "line": 6,
        "fullcodeline": "if ssl_version is None:"
    },
    {
        "line": 9,
        "fullcodeline": "if hasattr(ssl, \"SSLContext\"):  # Python 2.7.9"
    },
    {
        "line": 10,
        "fullcodeline": "context = ssl.SSLContext(ssl_version)"
    },
    {
        "line": 11,
        "fullcodeline": "context.verify_mode = cert_reqs"
    },
    {
        "line": 12,
        "fullcodeline": "context.check_hostname = cert_reqs != ssl.CERT_NONE"
    },
    {
        "line": 20,
        "fullcodeline": "return context.wrap_socket(sock, server_hostname=hostname)"
    },
    {
        "line": 24,
        "fullcodeline": "return ssl.wrap_socket("
    },
    {
        "line": 19,
        "fullcodeline": "context.load_verify_locations(ca_certs)"
    },
    {
        "line": 23,
        "fullcodeline": "raise NotSupportedOnThisPlatform(\"Certificate with password is not supported.\")"
    },
    {
        "line": 15,
        "fullcodeline": "context.load_cert_chain(cert_file, key_file, key_password)"
    },
    {
        "line": 17,
        "fullcodeline": "context.load_cert_chain(cert_file, key_file)"
    }
]