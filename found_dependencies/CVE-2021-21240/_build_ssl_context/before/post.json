[
    {
        "line": 8,
        "fullcodeline": "context = ssl.SSLContext(DEFAULT_TLS_VERSION)"
    },
    {
        "line": 9,
        "fullcodeline": "context.verify_mode = ("
    },
    {
        "line": 32,
        "fullcodeline": "context.load_verify_locations(ca_certs)"
    },
    {
        "line": 5,
        "fullcodeline": "if not hasattr(ssl, \"SSLContext\"):"
    },
    {
        "line": 10,
        "fullcodeline": "ssl.CERT_NONE if disable_ssl_certificate_validation else ssl.CERT_REQUIRED"
    },
    {
        "line": 15,
        "fullcodeline": "if maximum_version is not None:"
    },
    {
        "line": 20,
        "fullcodeline": "if minimum_version is not None:"
    },
    {
        "line": 29,
        "fullcodeline": "if hasattr(context, \"check_hostname\"):"
    },
    {
        "line": 6,
        "fullcodeline": "raise RuntimeError(\"httplib2 requires Python 3.2+ for ssl.SSLContext\")"
    },
    {
        "line": 30,
        "fullcodeline": "context.check_hostname = not disable_ssl_certificate_validation"
    },
    {
        "line": 35,
        "fullcodeline": "context.load_cert_chain(cert_file, key_file, key_password)"
    },
    {
        "line": 16,
        "fullcodeline": "if hasattr(context, \"maximum_version\"):"
    },
    {
        "line": 21,
        "fullcodeline": "if hasattr(context, \"minimum_version\"):"
    },
    {
        "line": 17,
        "fullcodeline": "context.maximum_version = getattr(ssl.TLSVersion, maximum_version)"
    },
    {
        "line": 19,
        "fullcodeline": "raise RuntimeError(\"setting tls_maximum_version requires Python 3.7 and OpenSSL 1.1 or newer\")"
    },
    {
        "line": 22,
        "fullcodeline": "context.minimum_version = getattr(ssl.TLSVersion, minimum_version)"
    },
    {
        "line": 24,
        "fullcodeline": "raise RuntimeError(\"setting tls_minimum_version requires Python 3.7 and OpenSSL 1.1 or newer\")"
    }
]