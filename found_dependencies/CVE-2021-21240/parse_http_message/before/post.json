[
    {
        "line": 8,
        "fullcodeline": "msg = kind()"
    },
    {
        "line": 9,
        "fullcodeline": "msg.raw = start_line"
    },
    {
        "line": 25,
        "fullcodeline": "msg.version = msg.proto[5:]"
    },
    {
        "line": 36,
        "fullcodeline": "content_length_string = msg.headers.get(\"content-length\", \"\")"
    },
    {
        "line": 47,
        "fullcodeline": "msg.raw += msg.body_raw"
    },
    {
        "line": 10,
        "fullcodeline": "if kind is HttpRequest:"
    },
    {
        "line": 37,
        "fullcodeline": "if content_length_string.isdigit():"
    },
    {
        "line": 5,
        "fullcodeline": "start_line = buf.readline()"
    },
    {
        "line": 11,
        "fullcodeline": "assert re.match("
    },
    {
        "line": 15,
        "fullcodeline": "assert msg.proto.startswith(\"HTTP/\"), repr(start_line)"
    },
    {
        "line": 28,
        "fullcodeline": "line = buf.readline()"
    },
    {
        "line": 29,
        "fullcodeline": "msg.raw += line"
    },
    {
        "line": 30,
        "fullcodeline": "line = line.rstrip()"
    },
    {
        "line": 33,
        "fullcodeline": "t = line.decode().split(\":\", 1)"
    },
    {
        "line": 34,
        "fullcodeline": "msg.headers[t[0].lower()] = t[1].lstrip()"
    },
    {
        "line": 38,
        "fullcodeline": "content_length = int(content_length_string)"
    },
    {
        "line": 13,
        "fullcodeline": "), \"Start line does not look like HTTP request: \" + repr(start_line)"
    },
    {
        "line": 14,
        "fullcodeline": "msg.method, msg.uri, msg.proto = start_line.rstrip().decode().split(\" \", 2)"
    },
    {
        "line": 16,
        "fullcodeline": "elif kind is HttpResponse:"
    },
    {
        "line": 31,
        "fullcodeline": "if not line:"
    },
    {
        "line": 39,
        "fullcodeline": "msg.body = msg.body_raw = buf.read(content_length)"
    },
    {
        "line": 40,
        "fullcodeline": "elif msg.headers.get(\"transfer-encoding\") == \"chunked\":"
    },
    {
        "line": 17,
        "fullcodeline": "assert re.match("
    },
    {
        "line": 21,
        "fullcodeline": "msg.status = int(msg.status)"
    },
    {
        "line": 22,
        "fullcodeline": "assert msg.proto.startswith(\"HTTP/\"), repr(start_line)"
    },
    {
        "line": 24,
        "fullcodeline": "raise Exception(\"Use HttpRequest or HttpResponse .from_{bytes,buffered}\")"
    },
    {
        "line": 41,
        "fullcodeline": "raise NotImplemented"
    },
    {
        "line": 19,
        "fullcodeline": "), \"Start line does not look like HTTP response: \" + repr(start_line)"
    },
    {
        "line": 20,
        "fullcodeline": "msg.proto, msg.status, msg.reason = start_line.rstrip().decode().split(\" \", 2)"
    },
    {
        "line": 42,
        "fullcodeline": "elif msg.version == \"1.0\":"
    },
    {
        "line": 43,
        "fullcodeline": "msg.body = msg.body_raw = buf.readall()"
    },
    {
        "line": 45,
        "fullcodeline": "msg.body = msg.body_raw = b\"\""
    }
]