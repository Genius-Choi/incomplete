[
    {
        "line": 3,
        "fullcodeline": "txSlot* instance = fxConstructTypedArray(the);"
    },
    {
        "line": 4,
        "fullcodeline": "txSlot* dispatch = instance->next;"
    },
    {
        "line": 5,
        "fullcodeline": "txSlot* view = dispatch->next;"
    },
    {
        "line": 6,
        "fullcodeline": "txSlot* buffer = view->next;"
    },
    {
        "line": 7,
        "fullcodeline": "txSlot* data = C_NULL;"
    },
    {
        "line": 8,
        "fullcodeline": "txU2 shift = dispatch->value.typedArray.dispatch->shift;"
    },
    {
        "line": 10,
        "fullcodeline": "if ((mxArgc > 0) && (mxArgv(0)->kind == XS_REFERENCE_KIND)) {"
    },
    {
        "line": 11,
        "fullcodeline": "slot = mxArgv(0)->value.reference->next;"
    },
    {
        "line": 12,
        "fullcodeline": "if (slot && ((slot->kind == XS_ARRAY_BUFFER_KIND) || (slot->kind == XS_HOST_KIND))) {"
    },
    {
        "line": 103,
        "fullcodeline": "txInteger length = fxArgToByteLength(the, 0, 0);"
    },
    {
        "line": 106,
        "fullcodeline": "length <<= shift;"
    },
    {
        "line": 109,
        "fullcodeline": "mxPushInteger(length);"
    },
    {
        "line": 13,
        "fullcodeline": "txInteger offset = fxArgToByteLength(the, 1, 0);"
    },
    {
        "line": 18,
        "fullcodeline": "size = fxArgToByteLength(the, 2, -1);"
    },
    {
        "line": 19,
        "fullcodeline": "info = fxGetBufferInfo(the, mxArgv(0));"
    },
    {
        "line": 34,
        "fullcodeline": "view->value.dataView.offset = offset;"
    },
    {
        "line": 35,
        "fullcodeline": "view->value.dataView.size = size;"
    },
    {
        "line": 36,
        "fullcodeline": "buffer->kind = XS_REFERENCE_KIND;"
    },
    {
        "line": 37,
        "fullcodeline": "buffer->value.reference = mxArgv(0)->value.reference;"
    },
    {
        "line": 104,
        "fullcodeline": "if (length & (((1 << shift) - 1) << (32 - shift)))"
    },
    {
        "line": 16,
        "fullcodeline": "if (offset & ((1 << shift) - 1))"
    },
    {
        "line": 20,
        "fullcodeline": "if (size >= 0) {"
    },
    {
        "line": 17,
        "fullcodeline": "mxRangeError(\"invalid byteOffset %ld\", offset);"
    },
    {
        "line": 21,
        "fullcodeline": "size <<= shift;"
    },
    {
        "line": 39,
        "fullcodeline": "else if (slot && (slot->kind == XS_TYPED_ARRAY_KIND)) {"
    },
    {
        "line": 22,
        "fullcodeline": "if (info->value.bufferInfo.length < (offset + size))"
    },
    {
        "line": 28,
        "fullcodeline": "size = info->value.bufferInfo.length - offset;"
    },
    {
        "line": 40,
        "fullcodeline": "txSlot* sourceDispatch = slot;"
    },
    {
        "line": 41,
        "fullcodeline": "txSlot* sourceView = sourceDispatch->next;"
    },
    {
        "line": 42,
        "fullcodeline": "txSlot* sourceBuffer = sourceView->next;"
    },
    {
        "line": 43,
        "fullcodeline": "txU2 sourceShift = sourceDispatch->value.typedArray.dispatch->shift;"
    },
    {
        "line": 44,
        "fullcodeline": "txInteger sourceLength = fxCheckDataViewSize(the, sourceView, sourceBuffer, XS_IMMUTABLE) >> sourceShift;"
    },
    {
        "line": 45,
        "fullcodeline": "txSlot* sourceData = sourceBuffer->value.reference->next;"
    },
    {
        "line": 46,
        "fullcodeline": "txInteger sourceDelta = sourceDispatch->value.typedArray.dispatch->size;"
    },
    {
        "line": 47,
        "fullcodeline": "txInteger sourceOffset = sourceView->value.dataView.offset;"
    },
    {
        "line": 48,
        "fullcodeline": "txInteger offset = 0;"
    },
    {
        "line": 53,
        "fullcodeline": "mxPush(mxArrayBufferConstructor);"
    },
    {
        "line": 67,
        "fullcodeline": "sourceLength = fxGetDataViewSize(the, sourceView, sourceBuffer) >> sourceShift;"
    },
    {
        "line": 68,
        "fullcodeline": "size = sourceLength << shift;"
    },
    {
        "line": 71,
        "fullcodeline": "mxPullSlot(buffer);"
    },
    {
        "line": 72,
        "fullcodeline": "sourceLength = fxCheckDataViewSize(the, sourceView, sourceBuffer, XS_IMMUTABLE) >> sourceShift;"
    },
    {
        "line": 73,
        "fullcodeline": "size = sourceLength << shift;"
    },
    {
        "line": 75,
        "fullcodeline": "data = fxCheckArrayBufferDetached(the, buffer, XS_MUTABLE);"
    },
    {
        "line": 23,
        "fullcodeline": "mxRangeError(\"out of range byteLength %ld\", size);"
    },
    {
        "line": 26,
        "fullcodeline": "if (info->value.bufferInfo.length & ((1 << shift) - 1))"
    },
    {
        "line": 29,
        "fullcodeline": "if (size < 0)"
    },
    {
        "line": 31,
        "fullcodeline": "if (info->value.bufferInfo.maxLength >= 0)"
    },
    {
        "line": 49,
        "fullcodeline": "txInteger size = sourceLength << shift;"
    },
    {
        "line": 55,
        "fullcodeline": "if (sourceData->kind == XS_ARRAY_BUFFER_KIND) {"
    },
    {
        "line": 27,
        "fullcodeline": "mxRangeError(\"invalid byteLength %ld\", info->value.bufferInfo.length);"
    },
    {
        "line": 30,
        "fullcodeline": "mxRangeError(\"out of range byteLength %ld\", size);"
    },
    {
        "line": 32,
        "fullcodeline": "size = -1;"
    },
    {
        "line": 56,
        "fullcodeline": "mxPushSlot(sourceBuffer);"
    },
    {
        "line": 58,
        "fullcodeline": "fxToSpeciesConstructor(the, &mxArrayBufferConstructor);"
    },
    {
        "line": 57,
        "fullcodeline": "mxGetID(mxID(_constructor));"
    },
    {
        "line": 81,
        "fullcodeline": "txBoolean contentType = (dispatch->value.typedArray.dispatch->constructorID == _BigInt64Array)"
    },
    {
        "line": 83,
        "fullcodeline": "txBoolean sourceContentType = (sourceDispatch->value.typedArray.dispatch->constructorID == _BigInt64Array)"
    },
    {
        "line": 88,
        "fullcodeline": "while (offset < size) {"
    },
    {
        "line": 82,
        "fullcodeline": "|| (dispatch->value.typedArray.dispatch->constructorID == _BigUint64Array);"
    },
    {
        "line": 84,
        "fullcodeline": "|| (sourceDispatch->value.typedArray.dispatch->constructorID == _BigUint64Array);"
    },
    {
        "line": 89,
        "fullcodeline": "(*sourceDispatch->value.typedArray.dispatch->getter)(the, sourceData, sourceOffset, the->stack, EndianNative);"
    },
    {
        "line": 90,
        "fullcodeline": "(*dispatch->value.typedArray.dispatch->coerce)(the, the->stack);"
    },
    {
        "line": 91,
        "fullcodeline": "(*dispatch->value.typedArray.dispatch->setter)(the, data, offset, the->stack, EndianNative);"
    },
    {
        "line": 92,
        "fullcodeline": "sourceOffset += sourceDelta;"
    },
    {
        "line": 93,
        "fullcodeline": "offset += 1 << shift;"
    }
]