[
    {
        "line": 3,
        "fullcodeline": "const char *argv_out[OGS_ARG_MAX];"
    },
    {
        "line": 4,
        "fullcodeline": "bool user_config = false;"
    },
    {
        "line": 5,
        "fullcodeline": "int i = 0;"
    },
    {
        "line": 13,
        "fullcodeline": "argv_out[i] = NULL;"
    },
    {
        "line": 52,
        "fullcodeline": "ogs_msleep(300);"
    },
    {
        "line": 7,
        "fullcodeline": "for (i = 0; argv[i] && i < OGS_ARG_MAX-3; i++) {"
    },
    {
        "line": 15,
        "fullcodeline": "if (!user_config) {"
    },
    {
        "line": 21,
        "fullcodeline": "if (ogs_app()->parameter.no_nrf == 0)"
    },
    {
        "line": 23,
        "fullcodeline": "if (ogs_app()->parameter.no_scp == 0)"
    },
    {
        "line": 26,
        "fullcodeline": "if (ogs_app()->parameter.no_upf == 0)"
    },
    {
        "line": 28,
        "fullcodeline": "if (ogs_app()->parameter.no_smf == 0)"
    },
    {
        "line": 31,
        "fullcodeline": "if (ogs_app()->parameter.no_amf == 0)"
    },
    {
        "line": 34,
        "fullcodeline": "if (ogs_app()->parameter.no_ausf == 0)"
    },
    {
        "line": 36,
        "fullcodeline": "if (ogs_app()->parameter.no_udm == 0)"
    },
    {
        "line": 38,
        "fullcodeline": "if (ogs_app()->parameter.no_pcf == 0)"
    },
    {
        "line": 40,
        "fullcodeline": "if (ogs_app()->parameter.no_nssf == 0)"
    },
    {
        "line": 42,
        "fullcodeline": "if (ogs_app()->parameter.no_bsf == 0)"
    },
    {
        "line": 44,
        "fullcodeline": "if (ogs_app()->parameter.no_udr == 0)"
    },
    {
        "line": 11,
        "fullcodeline": "argv_out[i] = argv[i];"
    },
    {
        "line": 16,
        "fullcodeline": "argv_out[i++] = \"-c\";"
    },
    {
        "line": 17,
        "fullcodeline": "argv_out[i++] = DEFAULT_CONFIG_FILENAME;"
    },
    {
        "line": 18,
        "fullcodeline": "argv_out[i] = NULL;"
    },
    {
        "line": 22,
        "fullcodeline": "nrf_thread = test_child_create(\"nrf\", argv_out);"
    },
    {
        "line": 24,
        "fullcodeline": "scp_thread = test_child_create(\"scp\", argv_out);"
    },
    {
        "line": 27,
        "fullcodeline": "upf_thread = test_child_create(\"upf\", argv_out);"
    },
    {
        "line": 29,
        "fullcodeline": "smf_thread = test_child_create(\"smf\", argv_out);"
    },
    {
        "line": 32,
        "fullcodeline": "amf_thread = test_child_create(\"amf\", argv_out);"
    },
    {
        "line": 35,
        "fullcodeline": "ausf_thread = test_child_create(\"ausf\", argv_out);"
    },
    {
        "line": 37,
        "fullcodeline": "udm_thread = test_child_create(\"udm\", argv_out);"
    },
    {
        "line": 39,
        "fullcodeline": "pcf_thread = test_child_create(\"pcf\", argv_out);"
    },
    {
        "line": 41,
        "fullcodeline": "nssf_thread = test_child_create(\"nssf\", argv_out);"
    },
    {
        "line": 43,
        "fullcodeline": "bsf_thread = test_child_create(\"bsf\", argv_out);"
    },
    {
        "line": 45,
        "fullcodeline": "udr_thread = test_child_create(\"udr\", argv_out);"
    },
    {
        "line": 8,
        "fullcodeline": "if (strcmp(\"-c\", argv[i]) == 0) {"
    },
    {
        "line": 9,
        "fullcodeline": "user_config = true;"
    }
]