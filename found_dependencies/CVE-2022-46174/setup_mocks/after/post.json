[
    {
        "line": 2,
        "fullcodeline": "mocker.patch(\"mount_efs.start_watchdog\")"
    },
    {
        "line": 3,
        "fullcodeline": "mocker.patch("
    },
    {
        "line": 7,
        "fullcodeline": "mocker.patch(\"socket.socket\", return_value=MagicMock())"
    },
    {
        "line": 8,
        "fullcodeline": "mocker.patch("
    },
    {
        "line": 12,
        "fullcodeline": "mocker.patch(\"mount_efs.get_target_region\", return_value=REGION)"
    },
    {
        "line": 13,
        "fullcodeline": "mocker.patch(\"mount_efs.write_tls_tunnel_state_file\", return_value=\"~mocktempfile\")"
    },
    {
        "line": 14,
        "fullcodeline": "mocker.patch(\"mount_efs.create_certificate\")"
    },
    {
        "line": 15,
        "fullcodeline": "mocker.patch(\"os.rename\")"
    },
    {
        "line": 16,
        "fullcodeline": "mocker.patch(\"os.kill\")"
    },
    {
        "line": 17,
        "fullcodeline": "mocker.patch("
    },
    {
        "line": 22,
        "fullcodeline": "process_mock = MagicMock()"
    },
    {
        "line": 23,
        "fullcodeline": "process_mock.communicate.return_value = ("
    },
    {
        "line": 27,
        "fullcodeline": "process_mock.returncode = 0"
    },
    {
        "line": 29,
        "fullcodeline": "popen_mock = mocker.patch(\"subprocess.Popen\", return_value=process_mock)"
    },
    {
        "line": 30,
        "fullcodeline": "write_config_mock = mocker.patch("
    },
    {
        "line": 5,
        "fullcodeline": "return_value=(DEFAULT_TLS_PORT, DEFAULT_TLS_PORT + 10),"
    },
    {
        "line": 10,
        "fullcodeline": "return_value=(DNS_NAME, None),"
    },
    {
        "line": 33,
        "fullcodeline": "return popen_mock, write_config_mock"
    }
]