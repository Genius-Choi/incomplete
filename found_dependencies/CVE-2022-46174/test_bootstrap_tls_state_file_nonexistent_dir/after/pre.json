[
    {
        "line": 3,
        "fullcodeline": "state_file_dir = str(tmpdir.join(tempfile.mkdtemp()[1]))"
    },
    {
        "line": 5,
        "fullcodeline": "def config_get_side_effect(section, field):"
    },
    {
        "line": 15,
        "fullcodeline": "MOCK_CONFIG.get.side_effect = config_get_side_effect"
    },
    {
        "line": 17,
        "fullcodeline": "assert not os.path.exists(state_file_dir)"
    },
    {
        "line": 19,
        "fullcodeline": "mocker.patch(\"mount_efs._stunnel_bin\", return_value=\"/usr/bin/stunnel\")"
    },
    {
        "line": 20,
        "fullcodeline": "mocker.patch(\"mount_efs.find_existing_mount_using_tls_port\", return_value=None)"
    },
    {
        "line": 26,
        "fullcodeline": "assert os.path.exists(state_file_dir)"
    },
    {
        "line": 2,
        "fullcodeline": "popen_mock, _ = setup_mocks(mocker)"
    },
    {
        "line": 21,
        "fullcodeline": "with mount_efs.bootstrap_tls("
    },
    {
        "line": 24,
        "fullcodeline": "pass"
    },
    {
        "line": 22,
        "fullcodeline": "MOCK_CONFIG, INIT_SYSTEM, DNS_NAME, FS_ID, MOUNT_POINT, {}, state_file_dir"
    }
]