[
    {
        "line": 11,
        "fullcodeline": "tls_port_sock = choose_tls_port_and_get_bind_sock(config, options)"
    },
    {
        "line": 12,
        "fullcodeline": "tls_port = get_tls_port_from_sock(tls_port_sock)"
    },
    {
        "line": 100,
        "fullcodeline": "logging.info('Starting TLS tunnel: \"%s\"', \" \".join(tunnel_args))"
    },
    {
        "line": 101,
        "fullcodeline": "tunnel_proc = subprocess.Popen("
    },
    {
        "line": 108,
        "fullcodeline": "logging.info(\"Started TLS tunnel, pid: %d\", tunnel_proc.pid)"
    },
    {
        "line": 110,
        "fullcodeline": "temp_tls_state_file = write_tls_tunnel_state_file("
    },
    {
        "line": 121,
        "fullcodeline": "if \"netns\" not in options:"
    },
    {
        "line": 17,
        "fullcodeline": "options[\"tlsport\"] = tls_port"
    },
    {
        "line": 19,
        "fullcodeline": "use_iam = \"iam\" in options"
    },
    {
        "line": 20,
        "fullcodeline": "ap_id = options.get(\"accesspoint\")"
    },
    {
        "line": 21,
        "fullcodeline": "cert_details = {}"
    },
    {
        "line": 22,
        "fullcodeline": "security_credentials = None"
    },
    {
        "line": 23,
        "fullcodeline": "client_info = get_client_info(config)"
    },
    {
        "line": 24,
        "fullcodeline": "region = get_target_region(config)"
    },
    {
        "line": 44,
        "fullcodeline": "cert_details[\"mountStateDir\"] = ("
    },
    {
        "line": 48,
        "fullcodeline": "cert_details[\"commonName\"] = socket.gethostname()[0:64]"
    },
    {
        "line": 49,
        "fullcodeline": "region = get_target_region(config)"
    },
    {
        "line": 50,
        "fullcodeline": "cert_details[\"region\"] = region"
    },
    {
        "line": 51,
        "fullcodeline": "cert_details[\"certificateCreationTime\"] = create_certificate("
    },
    {
        "line": 62,
        "fullcodeline": "cert_details[\"certificate\"] = os.path.join("
    },
    {
        "line": 65,
        "fullcodeline": "cert_details[\"privateKey\"] = get_private_key_path()"
    },
    {
        "line": 66,
        "fullcodeline": "cert_details[\"fsId\"] = fs_id"
    },
    {
        "line": 68,
        "fullcodeline": "start_watchdog(init_system)"
    },
    {
        "line": 73,
        "fullcodeline": "verify_level = int(options.get(\"verify\", DEFAULT_STUNNEL_VERIFY_LEVEL))"
    },
    {
        "line": 74,
        "fullcodeline": "ocsp_enabled = is_ocsp_enabled(config, options)"
    },
    {
        "line": 76,
        "fullcodeline": "stunnel_config_file = write_stunnel_config_file("
    },
    {
        "line": 90,
        "fullcodeline": "tunnel_args = [_stunnel_bin(), stunnel_config_file]"
    },
    {
        "line": 116,
        "fullcodeline": "[stunnel_config_file],"
    },
    {
        "line": 122,
        "fullcodeline": "test_tlsport(options[\"tlsport\"])"
    },
    {
        "line": 45,
        "fullcodeline": "get_mount_specific_filename(fs_id, mountpoint, tls_port) + \"+\""
    },
    {
        "line": 70,
        "fullcodeline": "if not os.path.exists(state_file_dir):"
    },
    {
        "line": 91,
        "fullcodeline": "if \"netns\" in options:"
    },
    {
        "line": 96,
        "fullcodeline": "logging.debug(\"Closing socket used to choose TLS port %s.\", tls_port)"
    },
    {
        "line": 97,
        "fullcodeline": "tls_port_sock.close()"
    },
    {
        "line": 124,
        "fullcodeline": "with NetNS(nspath=options[\"netns\"]):"
    },
    {
        "line": 130,
        "fullcodeline": "os.rename("
    },
    {
        "line": 27,
        "fullcodeline": "aws_creds_uri = options.get(\"awscredsuri\")"
    },
    {
        "line": 41,
        "fullcodeline": "cert_details[\"accessPoint\"] = ap_id"
    },
    {
        "line": 71,
        "fullcodeline": "create_required_directory(config, state_file_dir)"
    },
    {
        "line": 92,
        "fullcodeline": "tunnel_args = [\"nsenter\", \"--net=\" + options[\"netns\"]] + tunnel_args"
    },
    {
        "line": 33,
        "fullcodeline": "security_credentials, credentials_source = get_aws_security_credentials("
    },
    {
        "line": 125,
        "fullcodeline": "test_tlsport(options[\"tlsport\"])"
    },
    {
        "line": 131,
        "fullcodeline": "os.path.join(state_file_dir, temp_tls_state_file),"
    },
    {
        "line": 132,
        "fullcodeline": "os.path.join(state_file_dir, temp_tls_state_file[1:]),"
    },
    {
        "line": 29,
        "fullcodeline": "kwargs = {\"aws_creds_uri\": aws_creds_uri}"
    },
    {
        "line": 31,
        "fullcodeline": "kwargs = {\"awsprofile\": get_aws_profile(options, use_iam)}"
    },
    {
        "line": 38,
        "fullcodeline": "cert_details[\"awsCredentialsMethod\"] = credentials_source"
    }
]