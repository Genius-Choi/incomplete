[
    {
        "line": 15,
        "fullcodeline": "table_row *row = NULL;"
    },
    {
        "line": 16,
        "fullcodeline": "bufsize_t cell_matched = 1, pipe_matched = 1, offset;"
    },
    {
        "line": 17,
        "fullcodeline": "int expect_more_cells = 1;"
    },
    {
        "line": 18,
        "fullcodeline": "int row_end_offset = 0;"
    },
    {
        "line": 19,
        "fullcodeline": "int int_overflow_abort = 0;"
    },
    {
        "line": 21,
        "fullcodeline": "row = (table_row *)parser->mem->calloc(1, sizeof(table_row));"
    },
    {
        "line": 22,
        "fullcodeline": "row->n_columns = 0;"
    },
    {
        "line": 23,
        "fullcodeline": "row->cells = NULL;"
    },
    {
        "line": 26,
        "fullcodeline": "offset = scan_table_cell_end(string, len, 0);"
    },
    {
        "line": 30,
        "fullcodeline": "while (offset < len && expect_more_cells) {"
    },
    {
        "line": 91,
        "fullcodeline": "if (offset != len || row->n_columns == 0 || int_overflow_abort) {"
    },
    {
        "line": 31,
        "fullcodeline": "cell_matched = scan_table_cell(string, len, offset);"
    },
    {
        "line": 32,
        "fullcodeline": "pipe_matched = scan_table_cell_end(string, len, offset + cell_matched);"
    },
    {
        "line": 62,
        "fullcodeline": "offset += cell_matched + pipe_matched;"
    },
    {
        "line": 92,
        "fullcodeline": "free_table_row(parser->mem, row);"
    },
    {
        "line": 93,
        "fullcodeline": "row = NULL;"
    },
    {
        "line": 34,
        "fullcodeline": "if (cell_matched || pipe_matched) {"
    },
    {
        "line": 38,
        "fullcodeline": "cmark_strbuf *cell_buf = unescape_pipes(parser->mem, string + offset,"
    },
    {
        "line": 40,
        "fullcodeline": "cmark_strbuf_trim(cell_buf);"
    },
    {
        "line": 42,
        "fullcodeline": "node_cell *cell = (node_cell *)parser->mem->calloc(1, sizeof(*cell));"
    },
    {
        "line": 43,
        "fullcodeline": "cell->buf = cell_buf;"
    },
    {
        "line": 44,
        "fullcodeline": "cell->start_offset = offset;"
    },
    {
        "line": 45,
        "fullcodeline": "cell->end_offset = offset + cell_matched - 1;"
    },
    {
        "line": 58,
        "fullcodeline": "row->n_columns += 1;"
    },
    {
        "line": 59,
        "fullcodeline": "row->cells = cmark_llist_append(parser->mem, row->cells, cell);"
    },
    {
        "line": 65,
        "fullcodeline": "expect_more_cells = 1;"
    },
    {
        "line": 47,
        "fullcodeline": "while (cell->start_offset > 0 && string[cell->start_offset - 1] != '|') {"
    },
    {
        "line": 54,
        "fullcodeline": "if (row->n_columns == UINT16_MAX) {"
    },
    {
        "line": 68,
        "fullcodeline": "row_end_offset = scan_table_row_end(string, len, offset);"
    },
    {
        "line": 69,
        "fullcodeline": "offset += row_end_offset;"
    },
    {
        "line": 48,
        "fullcodeline": "--cell->start_offset;"
    },
    {
        "line": 49,
        "fullcodeline": "++cell->internal_offset;"
    },
    {
        "line": 55,
        "fullcodeline": "int_overflow_abort = 1;"
    },
    {
        "line": 74,
        "fullcodeline": "if (row_end_offset && offset != len) {"
    },
    {
        "line": 75,
        "fullcodeline": "row->paragraph_offset = offset;"
    },
    {
        "line": 77,
        "fullcodeline": "cmark_llist_free_full(parser->mem, row->cells, (cmark_free_func)free_table_cell);"
    },
    {
        "line": 78,
        "fullcodeline": "row->cells = NULL;"
    },
    {
        "line": 79,
        "fullcodeline": "row->n_columns = 0;"
    },
    {
        "line": 82,
        "fullcodeline": "offset += scan_table_cell_end(string, len, offset);"
    },
    {
        "line": 84,
        "fullcodeline": "expect_more_cells = 1;"
    },
    {
        "line": 86,
        "fullcodeline": "expect_more_cells = 0;"
    }
]