[
    {
        "line": 11,
        "fullcodeline": "table_row_block ="
    },
    {
        "line": 14,
        "fullcodeline": "cmark_node_set_syntax_extension(table_row_block, self);"
    },
    {
        "line": 15,
        "fullcodeline": "table_row_block->end_column = parent_container->end_column;"
    },
    {
        "line": 18,
        "fullcodeline": "row = row_from_string(self, parser, input + cmark_parser_get_first_nonspace(parser),"
    },
    {
        "line": 42,
        "fullcodeline": "free_table_row(parser->mem, row);"
    },
    {
        "line": 44,
        "fullcodeline": "cmark_parser_advance_offset(parser, (char *)input,"
    },
    {
        "line": 8,
        "fullcodeline": "if (cmark_parser_is_blank(parser))"
    },
    {
        "line": 12,
        "fullcodeline": "cmark_parser_add_child(parser, parent_container, CMARK_NODE_TABLE_ROW,"
    },
    {
        "line": 16,
        "fullcodeline": "table_row_block->as.opaque = parser->mem->calloc(1, sizeof(node_table_row));"
    },
    {
        "line": 23,
        "fullcodeline": "int i, table_columns = get_n_table_columns(parent_container);"
    },
    {
        "line": 45,
        "fullcodeline": "len - 1 - cmark_parser_get_offset(parser), false);"
    },
    {
        "line": 19,
        "fullcodeline": "len - cmark_parser_get_first_nonspace(parser));"
    },
    {
        "line": 25,
        "fullcodeline": "for (tmp = row->cells, i = 0; tmp && i < table_columns; tmp = tmp->next, ++i) {"
    },
    {
        "line": 35,
        "fullcodeline": "for (; i < table_columns; ++i) {"
    },
    {
        "line": 26,
        "fullcodeline": "node_cell *cell = (node_cell *) tmp->data;"
    },
    {
        "line": 27,
        "fullcodeline": "cmark_node *node = cmark_parser_add_child(parser, table_row_block,"
    },
    {
        "line": 29,
        "fullcodeline": "node->internal_offset = cell->internal_offset;"
    },
    {
        "line": 30,
        "fullcodeline": "node->end_column = parent_container->start_column + cell->end_offset;"
    },
    {
        "line": 31,
        "fullcodeline": "cmark_node_set_string_content(node, (char *) cell->buf->ptr);"
    },
    {
        "line": 32,
        "fullcodeline": "cmark_node_set_syntax_extension(node, self);"
    },
    {
        "line": 36,
        "fullcodeline": "cmark_node *node = cmark_parser_add_child("
    }
]