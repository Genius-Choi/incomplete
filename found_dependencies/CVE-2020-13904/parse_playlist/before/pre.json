[
    {
        "line": 4,
        "fullcodeline": "int ret = 0, is_segment = 0, is_variant = 0;"
    },
    {
        "line": 5,
        "fullcodeline": "int64_t duration = 0;"
    },
    {
        "line": 6,
        "fullcodeline": "enum KeyType key_type = KEY_NONE;"
    },
    {
        "line": 7,
        "fullcodeline": "uint8_t iv[16] = \"\";"
    },
    {
        "line": 8,
        "fullcodeline": "int has_iv = 0;"
    },
    {
        "line": 9,
        "fullcodeline": "char key[MAX_URL_SIZE] = \"\";"
    },
    {
        "line": 10,
        "fullcodeline": "char line[MAX_URL_SIZE];"
    },
    {
        "line": 12,
        "fullcodeline": "int close_in = 0;"
    },
    {
        "line": 13,
        "fullcodeline": "int64_t seg_offset = 0;"
    },
    {
        "line": 14,
        "fullcodeline": "int64_t seg_size = -1;"
    },
    {
        "line": 15,
        "fullcodeline": "uint8_t *new_url = NULL;"
    },
    {
        "line": 17,
        "fullcodeline": "char tmp_str[MAX_URL_SIZE];"
    },
    {
        "line": 18,
        "fullcodeline": "struct segment *cur_init_section = NULL;"
    },
    {
        "line": 48,
        "fullcodeline": "read_chomp_line(in, line, sizeof(line));"
    },
    {
        "line": 20,
        "fullcodeline": "if (!in) {"
    },
    {
        "line": 22,
        "fullcodeline": "AVDictionary *opts = NULL;"
    },
    {
        "line": 23,
        "fullcodeline": "close_in = 1;"
    },
    {
        "line": 25,
        "fullcodeline": "av_dict_set(&opts, \"seekable\", \"0\", 0);"
    },
    {
        "line": 28,
        "fullcodeline": "av_dict_set(&opts, \"user-agent\", c->user_agent, 0);"
    },
    {
        "line": 29,
        "fullcodeline": "av_dict_set(&opts, \"cookies\", c->cookies, 0);"
    },
    {
        "line": 30,
        "fullcodeline": "av_dict_set(&opts, \"headers\", c->headers, 0);"
    },
    {
        "line": 32,
        "fullcodeline": "ret = avio_open2(&in, url, AVIO_FLAG_READ,"
    },
    {
        "line": 34,
        "fullcodeline": "av_dict_free(&opts);"
    },
    {
        "line": 45,
        "fullcodeline": "if (av_opt_get(in, \"location\", AV_OPT_SEARCH_CHILDREN, &new_url) >= 0)"
    },
    {
        "line": 46,
        "fullcodeline": "url = new_url;"
    },
    {
        "line": 50,
        "fullcodeline": "ret = AVERROR_INVALIDDATA;"
    },
    {
        "line": 55,
        "fullcodeline": "free_segment_list(pls);"
    },
    {
        "line": 56,
        "fullcodeline": "pls->finished = 0;"
    },
    {
        "line": 57,
        "fullcodeline": "pls->type = PLS_TYPE_UNSPECIFIED;"
    },
    {
        "line": 59,
        "fullcodeline": "while (!avio_feof(in)) {"
    },
    {
        "line": 60,
        "fullcodeline": "read_chomp_line(in, line, sizeof(line));"
    },
    {
        "line": 35,
        "fullcodeline": "if (ret < 0)"
    },
    {
        "line": 61,
        "fullcodeline": "if (av_strstart(line, \"#EXT-X-STREAM-INF:\", &ptr)) {"
    },
    {
        "line": 63,
        "fullcodeline": "memset(&variant_info, 0, sizeof(variant_info));"
    },
    {
        "line": 64,
        "fullcodeline": "ff_parse_key_value(ptr, (ff_parse_key_val_cb) handle_variant_args,"
    },
    {
        "line": 66,
        "fullcodeline": "} else if (av_strstart(line, \"#EXT-X-KEY:\", &ptr)) {"
    },
    {
        "line": 67,
        "fullcodeline": "struct key_info info = {{0}};"
    },
    {
        "line": 68,
        "fullcodeline": "ff_parse_key_value(ptr, (ff_parse_key_val_cb) handle_key_args,"
    },
    {
        "line": 70,
        "fullcodeline": "key_type = KEY_NONE;"
    },
    {
        "line": 80,
        "fullcodeline": "av_strlcpy(key, info.uri, sizeof(key));"
    },
    {
        "line": 72,
        "fullcodeline": "if (!strcmp(info.method, \"AES-128\"))"
    },
    {
        "line": 73,
        "fullcodeline": "key_type = KEY_AES_128;"
    },
    {
        "line": 74,
        "fullcodeline": "if (!strcmp(info.method, \"SAMPLE-AES\"))"
    },
    {
        "line": 75,
        "fullcodeline": "key_type = KEY_SAMPLE_AES;"
    },
    {
        "line": 76,
        "fullcodeline": "if (!strncmp(info.iv, \"0x\", 2) || !strncmp(info.iv, \"0X\", 2)) {"
    },
    {
        "line": 81,
        "fullcodeline": "} else if (av_strstart(line, \"#EXT-X-MEDIA:\", &ptr)) {"
    },
    {
        "line": 82,
        "fullcodeline": "struct rendition_info info = {{0}};"
    },
    {
        "line": 83,
        "fullcodeline": "ff_parse_key_value(ptr, (ff_parse_key_val_cb) handle_rendition_args,"
    },
    {
        "line": 85,
        "fullcodeline": "new_rendition(c, &info, url);"
    },
    {
        "line": 86,
        "fullcodeline": "} else if (av_strstart(line, \"#EXT-X-TARGETDURATION:\", &ptr)) {"
    },
    {
        "line": 87,
        "fullcodeline": "ret = ensure_playlist(c, &pls, url);"
    },
    {
        "line": 90,
        "fullcodeline": "pls->target_duration = atoi(ptr) * AV_TIME_BASE;"
    },
    {
        "line": 88,
        "fullcodeline": "if (ret < 0)"
    },
    {
        "line": 91,
        "fullcodeline": "} else if (av_strstart(line, \"#EXT-X-MEDIA-SEQUENCE:\", &ptr)) {"
    },
    {
        "line": 92,
        "fullcodeline": "ret = ensure_playlist(c, &pls, url);"
    },
    {
        "line": 95,
        "fullcodeline": "pls->start_seq_no = atoi(ptr);"
    },
    {
        "line": 93,
        "fullcodeline": "if (ret < 0)"
    },
    {
        "line": 96,
        "fullcodeline": "} else if (av_strstart(line, \"#EXT-X-PLAYLIST-TYPE:\", &ptr)) {"
    },
    {
        "line": 97,
        "fullcodeline": "ret = ensure_playlist(c, &pls, url);"
    },
    {
        "line": 98,
        "fullcodeline": "if (ret < 0)"
    },
    {
        "line": 100,
        "fullcodeline": "if (!strcmp(ptr, \"EVENT\"))"
    },
    {
        "line": 101,
        "fullcodeline": "pls->type = PLS_TYPE_EVENT;"
    },
    {
        "line": 104,
        "fullcodeline": "} else if (av_strstart(line, \"#EXT-X-MAP:\", &ptr)) {"
    },
    {
        "line": 105,
        "fullcodeline": "struct init_section_info info = {{0}};"
    },
    {
        "line": 106,
        "fullcodeline": "ret = ensure_playlist(c, &pls, url);"
    },
    {
        "line": 109,
        "fullcodeline": "ff_parse_key_value(ptr, (ff_parse_key_val_cb) handle_init_section_args,"
    },
    {
        "line": 111,
        "fullcodeline": "cur_init_section = new_init_section(pls, &info, url);"
    },
    {
        "line": 107,
        "fullcodeline": "if (ret < 0)"
    },
    {
        "line": 102,
        "fullcodeline": "else if (!strcmp(ptr, \"VOD\"))"
    },
    {
        "line": 103,
        "fullcodeline": "pls->type = PLS_TYPE_VOD;"
    },
    {
        "line": 112,
        "fullcodeline": "} else if (av_strstart(line, \"#EXT-X-ENDLIST\", &ptr)) {"
    },
    {
        "line": 114,
        "fullcodeline": "pls->finished = 1;"
    },
    {
        "line": 115,
        "fullcodeline": "} else if (av_strstart(line, \"#EXTINF:\", &ptr)) {"
    },
    {
        "line": 117,
        "fullcodeline": "duration   = atof(ptr) * AV_TIME_BASE;"
    },
    {
        "line": 118,
        "fullcodeline": "} else if (av_strstart(line, \"#EXT-X-BYTERANGE:\", &ptr)) {"
    },
    {
        "line": 119,
        "fullcodeline": "seg_size = atoi(ptr);"
    },
    {
        "line": 120,
        "fullcodeline": "ptr = strchr(ptr, '@');"
    },
    {
        "line": 122,
        "fullcodeline": "seg_offset = atoi(ptr+1);"
    },
    {
        "line": 123,
        "fullcodeline": "} else if (av_strstart(line, \"#\", NULL)) {"
    },
    {
        "line": 142,
        "fullcodeline": "seg = av_malloc(sizeof(struct segment));"
    },
    {
        "line": 147,
        "fullcodeline": "seg->duration = duration;"
    },
    {
        "line": 148,
        "fullcodeline": "seg->key_type = key_type;"
    },
    {
        "line": 169,
        "fullcodeline": "ff_make_absolute_url(tmp_str, sizeof(tmp_str), url, line);"
    },
    {
        "line": 170,
        "fullcodeline": "seg->url = av_strdup(tmp_str);"
    },
    {
        "line": 178,
        "fullcodeline": "dynarray_add(&pls->segments, &pls->n_segments, seg);"
    },
    {
        "line": 181,
        "fullcodeline": "seg->size = seg_size;"
    },
    {
        "line": 191,
        "fullcodeline": "seg->init_section = cur_init_section;"
    },
    {
        "line": 135,
        "fullcodeline": "if (!pls) {"
    },
    {
        "line": 143,
        "fullcodeline": "if (!seg) {"
    },
    {
        "line": 157,
        "fullcodeline": "if (key_type != KEY_NONE) {"
    },
    {
        "line": 171,
        "fullcodeline": "if (!seg->url) {"
    },
    {
        "line": 182,
        "fullcodeline": "if (seg_size >= 0) {"
    },
    {
        "line": 127,
        "fullcodeline": "if (!new_variant(c, &variant_info, line, url)) {"
    },
    {
        "line": 128,
        "fullcodeline": "ret = AVERROR(ENOMEM);"
    },
    {
        "line": 140,
        "fullcodeline": "pls = c->playlists[c->n_playlists - 1];"
    },
    {
        "line": 144,
        "fullcodeline": "ret = AVERROR(ENOMEM);"
    },
    {
        "line": 150,
        "fullcodeline": "memcpy(seg->iv, iv, sizeof(iv));"
    },
    {
        "line": 158,
        "fullcodeline": "ff_make_absolute_url(tmp_str, sizeof(tmp_str), url, key);"
    },
    {
        "line": 159,
        "fullcodeline": "seg->key = av_strdup(tmp_str);"
    },
    {
        "line": 172,
        "fullcodeline": "av_free(seg->key);"
    },
    {
        "line": 174,
        "fullcodeline": "ret = AVERROR(ENOMEM);"
    },
    {
        "line": 183,
        "fullcodeline": "seg->url_offset = seg_offset;"
    },
    {
        "line": 184,
        "fullcodeline": "seg_offset += seg_size;"
    },
    {
        "line": 185,
        "fullcodeline": "seg_size = -1;"
    },
    {
        "line": 152,
        "fullcodeline": "int seq = pls->start_seq_no + pls->n_segments;"
    },
    {
        "line": 153,
        "fullcodeline": "memset(seg->iv, 0, sizeof(seg->iv));"
    },
    {
        "line": 160,
        "fullcodeline": "if (!seg->key) {"
    },
    {
        "line": 166,
        "fullcodeline": "seg->key = NULL;"
    },
    {
        "line": 187,
        "fullcodeline": "seg->url_offset = 0;"
    },
    {
        "line": 188,
        "fullcodeline": "seg_offset = 0;"
    },
    {
        "line": 136,
        "fullcodeline": "if (!new_variant(c, 0, url, NULL)) {"
    },
    {
        "line": 137,
        "fullcodeline": "ret = AVERROR(ENOMEM);"
    },
    {
        "line": 162,
        "fullcodeline": "ret = AVERROR(ENOMEM);"
    }
]