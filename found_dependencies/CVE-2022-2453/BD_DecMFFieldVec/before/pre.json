[
    {
        "line": 10,
        "fullcodeline": "memset(&sffield, 0, sizeof(GF_FieldInfo));"
    },
    {
        "line": 11,
        "fullcodeline": "sffield.fieldIndex = field->fieldIndex;"
    },
    {
        "line": 12,
        "fullcodeline": "sffield.fieldType = gf_sg_vrml_get_sf_type(field->fieldType);"
    },
    {
        "line": 13,
        "fullcodeline": "sffield.NDTtype = field->NDTtype;"
    },
    {
        "line": 14,
        "fullcodeline": "sffield.name = field->name;"
    },
    {
        "line": 16,
        "fullcodeline": "initial_qp = qp_local = qp_on = 0;"
    },
    {
        "line": 19,
        "fullcodeline": "NbBits = gf_bs_read_int(bs, 5);"
    },
    {
        "line": 20,
        "fullcodeline": "nbFields = gf_bs_read_int(bs, NbBits);"
    },
    {
        "line": 28,
        "fullcodeline": "if (field->fieldType != GF_SG_VRML_MFNODE) {"
    },
    {
        "line": 23,
        "fullcodeline": "initial_qp = 1;"
    },
    {
        "line": 25,
        "fullcodeline": "gf_bifs_dec_qp14_set_length(codec, nbFields);"
    },
    {
        "line": 29,
        "fullcodeline": "e = gf_sg_vrml_mf_alloc(field->far_ptr, field->fieldType, nbFields);"
    },
    {
        "line": 94,
        "fullcodeline": "if (qp_on) gf_bifs_dec_qp_remove(codec, GF_TRUE);"
    },
    {
        "line": 32,
        "fullcodeline": "for (i=0; i<nbFields; i++) {"
    },
    {
        "line": 39,
        "fullcodeline": "last = NULL;"
    },
    {
        "line": 33,
        "fullcodeline": "e = gf_sg_vrml_mf_get_item(field->far_ptr, field->fieldType, & sffield.far_ptr, i);"
    },
    {
        "line": 35,
        "fullcodeline": "e = gf_bifs_dec_sf_field(codec, bs, node, &sffield, GF_FALSE);"
    },
    {
        "line": 40,
        "fullcodeline": "for (i=0; i<nbFields; i++) {"
    },
    {
        "line": 83,
        "fullcodeline": "if (qp_on && qp_local) {"
    },
    {
        "line": 41,
        "fullcodeline": "GF_Node *new_node = gf_bifs_dec_node(codec, bs, field->NDTtype);"
    },
    {
        "line": 43,
        "fullcodeline": "e = gf_node_register(new_node, is_mem_com ? NULL : node);"
    },
    {
        "line": 88,
        "fullcodeline": "gf_bifs_dec_qp_remove(codec, initial_qp);"
    },
    {
        "line": 78,
        "fullcodeline": "return codec->LastError ? codec->LastError : GF_NON_COMPLIANT_BITSTREAM;"
    },
    {
        "line": 48,
        "fullcodeline": "if (gf_node_get_tag(new_node) == TAG_MPEG4_QuantizationParameter) {"
    },
    {
        "line": 49,
        "fullcodeline": "qp_local = ((M_QuantizationParameter *)new_node)->isLocal;"
    },
    {
        "line": 55,
        "fullcodeline": "e = gf_bifs_dec_qp_set(codec, new_node);"
    },
    {
        "line": 57,
        "fullcodeline": "qp_on = 1;"
    },
    {
        "line": 67,
        "fullcodeline": "e = gf_node_list_add_child_last(field->far_ptr, new_node, &last);"
    },
    {
        "line": 74,
        "fullcodeline": "e = gf_node_list_add_child_last( (GF_ChildNodeItem **)field->far_ptr, new_node, &last);"
    },
    {
        "line": 53,
        "fullcodeline": "if (qp_on) gf_bifs_dec_qp_remove(codec, GF_FALSE);"
    },
    {
        "line": 58,
        "fullcodeline": "if (qp_local) qp_local = 2;"
    },
    {
        "line": 60,
        "fullcodeline": "e = gf_node_list_add_child_last(field->far_ptr, new_node, &last);"
    },
    {
        "line": 63,
        "fullcodeline": "gf_node_register(new_node, NULL);"
    },
    {
        "line": 64,
        "fullcodeline": "gf_node_unregister(new_node, node);"
    }
]