[
    {
        "line": 8,
        "fullcodeline": "assert(node);"
    },
    {
        "line": 11,
        "fullcodeline": "if (gf_sg_vrml_is_sf_field(field->fieldType)) {"
    },
    {
        "line": 12,
        "fullcodeline": "e = gf_bifs_dec_sf_field(codec, bs, node, field, is_mem_com);"
    },
    {
        "line": 41,
        "fullcodeline": "flag = gf_bs_read_int(bs, 1);"
    },
    {
        "line": 16,
        "fullcodeline": "if (field->eventType == GF_SG_EVENT_IN) {"
    },
    {
        "line": 42,
        "fullcodeline": "if (!flag) {"
    },
    {
        "line": 29,
        "fullcodeline": "flag = gf_bs_read_int(bs, 1);"
    },
    {
        "line": 49,
        "fullcodeline": "flag = gf_bs_read_int(bs, 1);"
    },
    {
        "line": 17,
        "fullcodeline": "if (field->fieldType == GF_SG_VRML_MFNODE) {"
    },
    {
        "line": 44,
        "fullcodeline": "if (field->fieldType != GF_SG_VRML_MFNODE) {"
    },
    {
        "line": 18,
        "fullcodeline": "gf_node_unregister_children(node, * (GF_ChildNodeItem **)field->far_ptr);"
    },
    {
        "line": 19,
        "fullcodeline": "* (GF_ChildNodeItem **)field->far_ptr = NULL;"
    },
    {
        "line": 34,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_CODING, (\"[BIFS] Stream uses Predictive Field Coding, disabled in this build!\\n\"));"
    },
    {
        "line": 45,
        "fullcodeline": "e = gf_sg_vrml_mf_reset(field->far_ptr, field->fieldType);"
    },
    {
        "line": 51,
        "fullcodeline": "e = BD_DecMFFieldList(codec, bs, node, field, is_mem_com);"
    },
    {
        "line": 22,
        "fullcodeline": "e = gf_sg_vrml_mf_reset(field->far_ptr, field->fieldType);"
    },
    {
        "line": 53,
        "fullcodeline": "e = BD_DecMFFieldVec(codec, bs, node, field, is_mem_com);"
    },
    {
        "line": 55,
        "fullcodeline": "if (e) return codec->LastError = e;"
    }
]