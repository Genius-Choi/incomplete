[
    {
        "line": 7,
        "fullcodeline": "unsigned int major = 1, minor = 0;   /* Assume HTTP/1.0 if non-\"HTTP\" protocol */"
    },
    {
        "line": 8,
        "fullcodeline": "char http[5];"
    },
    {
        "line": 10,
        "fullcodeline": "int num_blank_lines = 0;"
    },
    {
        "line": 11,
        "fullcodeline": "int max_blank_lines = r->server->limit_req_fields;"
    },
    {
        "line": 12,
        "fullcodeline": "core_server_config *conf = ap_get_core_module_config(r->server->module_config);"
    },
    {
        "line": 13,
        "fullcodeline": "int strict = conf->http_conformance & AP_HTTP_CONFORMANCE_STRICT;"
    },
    {
        "line": 14,
        "fullcodeline": "int enforce_strict = !(conf->http_conformance & AP_HTTP_CONFORMANCE_LOGONLY);"
    },
    {
        "line": 73,
        "fullcodeline": "r->request_time = apr_time_now();"
    },
    {
        "line": 74,
        "fullcodeline": "ll = r->the_request;"
    },
    {
        "line": 75,
        "fullcodeline": "r->method = ap_getword_white(r->pool, &ll);"
    },
    {
        "line": 77,
        "fullcodeline": "uri = ap_getword_white(r->pool, &ll);"
    },
    {
        "line": 81,
        "fullcodeline": "r->method_number = ap_method_number_of(r->method);"
    },
    {
        "line": 86,
        "fullcodeline": "ap_parse_uri(r, uri);"
    },
    {
        "line": 108,
        "fullcodeline": "r->protocol = apr_pstrmemdup(r->pool, pro, len);"
    },
    {
        "line": 16,
        "fullcodeline": "if (max_blank_lines <= 0) {"
    },
    {
        "line": 65,
        "fullcodeline": "} while ((len <= 0) && (++num_blank_lines < max_blank_lines));"
    },
    {
        "line": 67,
        "fullcodeline": "if (APLOGrtrace5(r)) {"
    },
    {
        "line": 17,
        "fullcodeline": "max_blank_lines = DEFAULT_LIMIT_REQUEST_FIELDS;"
    },
    {
        "line": 41,
        "fullcodeline": "r->the_request = NULL;"
    },
    {
        "line": 42,
        "fullcodeline": "rv = ap_rgetline(&(r->the_request), (apr_size_t)(r->server->limit_req_line + 2),"
    },
    {
        "line": 68,
        "fullcodeline": "ap_log_rerror(APLOG_MARK, APLOG_TRACE5, 0, r,"
    },
    {
        "line": 82,
        "fullcodeline": "if (r->method_number == M_GET && r->method[0] == 'H') {"
    },
    {
        "line": 83,
        "fullcodeline": "r->header_only = 1;"
    },
    {
        "line": 89,
        "fullcodeline": "r->assbackwards = 0;"
    },
    {
        "line": 90,
        "fullcodeline": "pro = ll;"
    },
    {
        "line": 91,
        "fullcodeline": "len = strlen(ll);"
    },
    {
        "line": 111,
        "fullcodeline": "if (len == 8"
    },
    {
        "line": 114,
        "fullcodeline": "&& apr_isdigit(pro[7])) {"
    },
    {
        "line": 115,
        "fullcodeline": "r->proto_num = HTTP_VERSION(pro[5] - '0', pro[7] - '0');"
    },
    {
        "line": 137,
        "fullcodeline": "int err = 0;"
    },
    {
        "line": 45,
        "fullcodeline": "if (rv != APR_SUCCESS) {"
    },
    {
        "line": 70,
        "fullcodeline": "ap_escape_logitem(r->pool, r->the_request));"
    },
    {
        "line": 93,
        "fullcodeline": "r->assbackwards = 1;"
    },
    {
        "line": 94,
        "fullcodeline": "pro = \"HTTP/0.9\";"
    },
    {
        "line": 95,
        "fullcodeline": "len = 8;"
    },
    {
        "line": 113,
        "fullcodeline": "&& pro[4] == '/' && apr_isdigit(pro[5]) && pro[6] == '.'"
    },
    {
        "line": 165,
        "fullcodeline": "if (err && enforce_strict) {"
    },
    {
        "line": 46,
        "fullcodeline": "r->request_time = apr_time_now();"
    },
    {
        "line": 61,
        "fullcodeline": "r->proto_num = HTTP_VERSION(1,0);"
    },
    {
        "line": 62,
        "fullcodeline": "r->protocol  = apr_pstrdup(r->pool, \"HTTP/1.0\");"
    },
    {
        "line": 96,
        "fullcodeline": "if (conf->http09_enable == AP_HTTP09_DISABLE) {"
    },
    {
        "line": 141,
        "fullcodeline": "err = HTTP_BAD_REQUEST;"
    },
    {
        "line": 147,
        "fullcodeline": "err = HTTP_BAD_REQUEST;"
    },
    {
        "line": 52,
        "fullcodeline": "if (APR_STATUS_IS_ENOSPC(rv)) {"
    },
    {
        "line": 97,
        "fullcodeline": "r->status = HTTP_VERSION_NOT_SUPPORTED;"
    },
    {
        "line": 102,
        "fullcodeline": "r->connection->keepalive = AP_CONN_CLOSE;"
    },
    {
        "line": 126,
        "fullcodeline": "if (3 == sscanf(r->protocol, \"%4s/%u.%u\", http, &major, &minor)"
    },
    {
        "line": 128,
        "fullcodeline": "&& (minor < HTTP_VERSION(1, 0)) ) { /* don't allow HTTP/0.1000 */"
    },
    {
        "line": 129,
        "fullcodeline": "r->proto_num = HTTP_VERSION(major, minor);"
    },
    {
        "line": 53,
        "fullcodeline": "r->status    = HTTP_REQUEST_URI_TOO_LARGE;"
    },
    {
        "line": 98,
        "fullcodeline": "r->protocol = apr_pstrmemdup(r->pool, pro, len);"
    },
    {
        "line": 101,
        "fullcodeline": "r->proto_num = HTTP_VERSION(0, 9);"
    },
    {
        "line": 112,
        "fullcodeline": "&& pro[0] == 'H' && pro[1] == 'T' && pro[2] == 'T' && pro[3] == 'P'"
    },
    {
        "line": 127,
        "fullcodeline": "&& (strcasecmp(\"http\", http) == 0)"
    },
    {
        "line": 132,
        "fullcodeline": "r->proto_num = HTTP_VERSION(1, 0);"
    },
    {
        "line": 152,
        "fullcodeline": "err = HTTP_BAD_REQUEST;"
    },
    {
        "line": 55,
        "fullcodeline": "else if (APR_STATUS_IS_TIMEUP(rv)) {"
    },
    {
        "line": 56,
        "fullcodeline": "r->status = HTTP_REQUEST_TIME_OUT;"
    },
    {
        "line": 154,
        "fullcodeline": "else if (r->method_number == M_INVALID) {"
    },
    {
        "line": 157,
        "fullcodeline": "err = HTTP_NOT_IMPLEMENTED;"
    },
    {
        "line": 58,
        "fullcodeline": "else if (APR_STATUS_IS_EINVAL(rv)) {"
    },
    {
        "line": 59,
        "fullcodeline": "r->status = HTTP_BAD_REQUEST;"
    },
    {
        "line": 159,
        "fullcodeline": "else if (r->assbackwards == 0 && r->proto_num < HTTP_VERSION(1, 0)) {"
    },
    {
        "line": 162,
        "fullcodeline": "err = HTTP_BAD_REQUEST;"
    }
]