[
    {
        "line": 2,
        "fullcodeline": "@requests_count +=1"
    },
    {
        "line": 4,
        "fullcodeline": "env = req.env"
    },
    {
        "line": 5,
        "fullcodeline": "client = req.io"
    },
    {
        "line": 9,
        "fullcodeline": "normalize_env env, req"
    },
    {
        "line": 11,
        "fullcodeline": "env[PUMA_SOCKET] = client"
    },
    {
        "line": 17,
        "fullcodeline": "env[HIJACK_P] = true"
    },
    {
        "line": 18,
        "fullcodeline": "env[HIJACK] = req"
    },
    {
        "line": 20,
        "fullcodeline": "body = req.body"
    },
    {
        "line": 22,
        "fullcodeline": "head = env[REQUEST_METHOD] == HEAD"
    },
    {
        "line": 24,
        "fullcodeline": "env[RACK_INPUT] = body"
    },
    {
        "line": 53,
        "fullcodeline": "after_reply = env[RACK_AFTER_REPLY] = []"
    },
    {
        "line": 7,
        "fullcodeline": "return false if closed_socket?(client)"
    },
    {
        "line": 13,
        "fullcodeline": "if env[HTTPS_KEY] && client.peercert"
    },
    {
        "line": 25,
        "fullcodeline": "env[RACK_URL_SCHEME] = default_server_port(env) == PORT_443 ? HTTPS : HTTP"
    },
    {
        "line": 14,
        "fullcodeline": "env[PUMA_PEERCERT] = client.peercert"
    },
    {
        "line": 28,
        "fullcodeline": "env[EARLY_HINTS] = lambda { |headers|"
    },
    {
        "line": 84,
        "fullcodeline": "content_length = nil"
    },
    {
        "line": 91,
        "fullcodeline": "cork_socket client"
    },
    {
        "line": 93,
        "fullcodeline": "line_ending = LINE_END"
    },
    {
        "line": 132,
        "fullcodeline": "response_hijack = nil"
    },
    {
        "line": 182,
        "fullcodeline": "lines << line_ending"
    },
    {
        "line": 184,
        "fullcodeline": "fast_write client, lines.to_s"
    },
    {
        "line": 96,
        "fullcodeline": "http_11 = if env[HTTP_VERSION] == HTTP_11"
    },
    {
        "line": 57,
        "fullcodeline": "status, headers, res_body = @app.call(env)"
    },
    {
        "line": 61,
        "fullcodeline": "status = status.to_i"
    },
    {
        "line": 87,
        "fullcodeline": "if res_body.kind_of? Array and res_body.size == 1"
    },
    {
        "line": 88,
        "fullcodeline": "content_length = res_body[0].bytesize"
    },
    {
        "line": 97,
        "fullcodeline": "allow_chunked = true"
    },
    {
        "line": 98,
        "fullcodeline": "keep_alive = env.fetch(HTTP_CONNECTION, \"\").downcase != CLOSE"
    },
    {
        "line": 115,
        "fullcodeline": "allow_chunked = false"
    },
    {
        "line": 116,
        "fullcodeline": "keep_alive = env.fetch(HTTP_CONNECTION, \"\").downcase == KEEP_ALIVE"
    },
    {
        "line": 114,
        "fullcodeline": "else"
    },
    {
        "line": 159,
        "fullcodeline": "lines << CONNECTION_KEEP_ALIVE"
    },
    {
        "line": 169,
        "fullcodeline": "lines << line_ending"
    },
    {
        "line": 170,
        "fullcodeline": "fast_write client, lines.to_s"
    },
    {
        "line": 175,
        "fullcodeline": "lines.append CONTENT_LENGTH_S, content_length.to_s, line_ending"
    },
    {
        "line": 187,
        "fullcodeline": "response_hijack.call client"
    },
    {
        "line": 192,
        "fullcodeline": "res_body.each do |part|"
    },
    {
        "line": 63,
        "fullcodeline": "if status == -1"
    },
    {
        "line": 72,
        "fullcodeline": "@events.unknown_error self, e, \"Rack app\""
    },
    {
        "line": 74,
        "fullcodeline": "status = 503"
    },
    {
        "line": 75,
        "fullcodeline": "headers = {}"
    },
    {
        "line": 76,
        "fullcodeline": "res_body = [\"Request was internally terminated early\\n\"]"
    },
    {
        "line": 79,
        "fullcodeline": "@events.unknown_error self, e, \"Rack app\", env"
    },
    {
        "line": 81,
        "fullcodeline": "status, headers, res_body = lowlevel_error(e, env)"
    },
    {
        "line": 105,
        "fullcodeline": "if status == 200"
    },
    {
        "line": 121,
        "fullcodeline": "if status == 200"
    },
    {
        "line": 165,
        "fullcodeline": "if content_length and status != 204"
    },
    {
        "line": 106,
        "fullcodeline": "lines << HTTP_11_200"
    },
    {
        "line": 108,
        "fullcodeline": "lines.append \"HTTP/1.1 \", status.to_s, \" \","
    },
    {
        "line": 122,
        "fullcodeline": "lines << HTTP_10_200"
    },
    {
        "line": 124,
        "fullcodeline": "lines.append \"HTTP/1.0 \", status.to_s, \" \","
    },
    {
        "line": 160,
        "fullcodeline": "elsif http_11 && !keep_alive"
    },
    {
        "line": 161,
        "fullcodeline": "lines << CONNECTION_CLOSE"
    },
    {
        "line": 166,
        "fullcodeline": "lines.append CONTENT_LENGTH_S, content_length.to_s, line_ending"
    },
    {
        "line": 177,
        "fullcodeline": "elsif !response_hijack and allow_chunked"
    },
    {
        "line": 178,
        "fullcodeline": "lines << TRANSFER_ENCODING_CHUNKED"
    },
    {
        "line": 207,
        "fullcodeline": "fast_write client, CLOSE_CHUNKED"
    },
    {
        "line": 71,
        "fullcodeline": "@events.log \"Detected force shutdown of a thread, returning 503\""
    },
    {
        "line": 109,
        "fullcodeline": "fetch_status_code(status), line_ending"
    },
    {
        "line": 125,
        "fullcodeline": "fetch_status_code(status), line_ending"
    },
    {
        "line": 64,
        "fullcodeline": "unless headers.empty? and res_body == []"
    },
    {
        "line": 111,
        "fullcodeline": "no_body ||= status < 200 || STATUS_WITH_NO_ENTITY_BODY[status]"
    },
    {
        "line": 127,
        "fullcodeline": "no_body ||= status < 200 || STATUS_WITH_NO_ENTITY_BODY[status]"
    },
    {
        "line": 65,
        "fullcodeline": "raise \"async response must have empty headers and body\""
    }
]