[
    {
        "line": 4,
        "fullcodeline": "struct sk_buff *segs = ERR_PTR(-EINVAL);"
    },
    {
        "line": 10,
        "fullcodeline": "u8 frag_hdr_sz = sizeof(struct frag_hdr);"
    },
    {
        "line": 15,
        "fullcodeline": "mss = skb_shinfo(skb)->gso_size;"
    },
    {
        "line": 16,
        "fullcodeline": "if (unlikely(skb->len <= mss))"
    },
    {
        "line": 19,
        "fullcodeline": "if (skb_gso_ok(skb, features | NETIF_F_GSO_ROBUST)) {"
    },
    {
        "line": 39,
        "fullcodeline": "if (skb->encapsulation && skb_shinfo(skb)->gso_type & SKB_GSO_UDP_TUNNEL)"
    },
    {
        "line": 21,
        "fullcodeline": "int type = skb_shinfo(skb)->gso_type;"
    },
    {
        "line": 33,
        "fullcodeline": "skb_shinfo(skb)->gso_segs = DIV_ROUND_UP(skb->len, mss);"
    },
    {
        "line": 35,
        "fullcodeline": "segs = NULL;"
    },
    {
        "line": 40,
        "fullcodeline": "segs = skb_udp_tunnel_segment(skb, features);"
    },
    {
        "line": 23,
        "fullcodeline": "if (unlikely(type & ~(SKB_GSO_UDP |"
    },
    {
        "line": 45,
        "fullcodeline": "offset = skb_checksum_start_offset(skb);"
    },
    {
        "line": 46,
        "fullcodeline": "csum = skb_checksum(skb, offset, skb->len - offset, 0);"
    },
    {
        "line": 47,
        "fullcodeline": "offset += skb->csum_offset;"
    },
    {
        "line": 48,
        "fullcodeline": "*(__sum16 *)(skb->data + offset) = csum_fold(csum);"
    },
    {
        "line": 49,
        "fullcodeline": "skb->ip_summed = CHECKSUM_NONE;"
    },
    {
        "line": 52,
        "fullcodeline": "tnl_hlen = skb_tnl_header_len(skb);"
    },
    {
        "line": 61,
        "fullcodeline": "unfrag_ip6hlen = ip6_find_1stfragopt(skb, &prevhdr);"
    },
    {
        "line": 62,
        "fullcodeline": "nexthdr = *prevhdr;"
    },
    {
        "line": 63,
        "fullcodeline": "*prevhdr = NEXTHDR_FRAGMENT;"
    },
    {
        "line": 64,
        "fullcodeline": "unfrag_len = (skb_network_header(skb) - skb_mac_header(skb)) +"
    },
    {
        "line": 66,
        "fullcodeline": "packet_start = (u8 *) skb->head + SKB_GSO_CB(skb)->mac_offset;"
    },
    {
        "line": 67,
        "fullcodeline": "memmove(packet_start-frag_hdr_sz, packet_start, unfrag_len);"
    },
    {
        "line": 69,
        "fullcodeline": "SKB_GSO_CB(skb)->mac_offset -= frag_hdr_sz;"
    },
    {
        "line": 70,
        "fullcodeline": "skb->mac_header -= frag_hdr_sz;"
    },
    {
        "line": 71,
        "fullcodeline": "skb->network_header -= frag_hdr_sz;"
    },
    {
        "line": 73,
        "fullcodeline": "fptr = (struct frag_hdr *)(skb_network_header(skb) + unfrag_ip6hlen);"
    },
    {
        "line": 74,
        "fullcodeline": "fptr->nexthdr = nexthdr;"
    },
    {
        "line": 75,
        "fullcodeline": "fptr->reserved = 0;"
    },
    {
        "line": 76,
        "fullcodeline": "ipv6_select_ident(fptr, (struct rt6_info *)skb_dst(skb));"
    },
    {
        "line": 81,
        "fullcodeline": "segs = skb_segment(skb, features);"
    },
    {
        "line": 53,
        "fullcodeline": "if (skb->mac_header < (tnl_hlen + frag_hdr_sz)) {"
    },
    {
        "line": 30,
        "fullcodeline": "!(type & (SKB_GSO_UDP))))"
    },
    {
        "line": 54,
        "fullcodeline": "if (gso_pskb_expand_head(skb, tnl_hlen + frag_hdr_sz))"
    }
]