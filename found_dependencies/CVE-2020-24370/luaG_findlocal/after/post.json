[
    {
        "line": 2,
        "fullcodeline": "StkId base = ci->func + 1;"
    },
    {
        "line": 3,
        "fullcodeline": "const char *name = NULL;"
    },
    {
        "line": 4,
        "fullcodeline": "if (isLua(ci)) {"
    },
    {
        "line": 10,
        "fullcodeline": "if (name == NULL) {  /* no 'standard' name? */"
    },
    {
        "line": 11,
        "fullcodeline": "StkId limit = (ci == L->ci) ? L->top : ci->next->func;"
    },
    {
        "line": 20,
        "fullcodeline": "*pos = base + (n - 1);"
    },
    {
        "line": 5,
        "fullcodeline": "if (n < 0)  /* access to vararg values? */"
    },
    {
        "line": 12,
        "fullcodeline": "if (limit - base >= n && n > 0) {  /* is 'n' inside 'ci' stack? */"
    },
    {
        "line": 14,
        "fullcodeline": "name = isLua(ci) ? \"(temporary)\" : \"(C temporary)\";"
    },
    {
        "line": 6,
        "fullcodeline": "return findvararg(ci, n, pos);"
    },
    {
        "line": 8,
        "fullcodeline": "name = luaF_getlocalname(ci_func(ci)->p, n, currentpc(ci));"
    }
]