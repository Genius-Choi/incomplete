[
    {
        "line": 3,
        "fullcodeline": "struct l2cap_pinfo *pi = l2cap_pi(sk);"
    },
    {
        "line": 4,
        "fullcodeline": "struct l2cap_conf_req *req = data;"
    },
    {
        "line": 5,
        "fullcodeline": "struct l2cap_conf_rfc rfc = { .mode = L2CAP_MODE_BASIC };"
    },
    {
        "line": 6,
        "fullcodeline": "void *ptr = req->data;"
    },
    {
        "line": 8,
        "fullcodeline": "BT_DBG(\"sk %p\", sk);"
    },
    {
        "line": 33,
        "fullcodeline": "req->dcid  = cpu_to_le16(pi->dcid);"
    },
    {
        "line": 34,
        "fullcodeline": "req->flags = cpu_to_le16(0);"
    },
    {
        "line": 36,
        "fullcodeline": "return ptr - data;"
    },
    {
        "line": 17,
        "fullcodeline": "rfc.mode            = L2CAP_MODE_ERTM;"
    },
    {
        "line": 18,
        "fullcodeline": "rfc.txwin_size      = L2CAP_DEFAULT_RX_WINDOW;"
    },
    {
        "line": 19,
        "fullcodeline": "rfc.max_transmit    = L2CAP_DEFAULT_MAX_RECEIVE;"
    },
    {
        "line": 20,
        "fullcodeline": "rfc.retrans_timeout = cpu_to_le16(L2CAP_DEFAULT_RETRANS_TO);"
    },
    {
        "line": 21,
        "fullcodeline": "rfc.monitor_timeout = cpu_to_le16(L2CAP_DEFAULT_MONITOR_TO);"
    },
    {
        "line": 22,
        "fullcodeline": "rfc.max_pdu_size    = cpu_to_le16(L2CAP_DEFAULT_MAX_RX_APDU);"
    },
    {
        "line": 24,
        "fullcodeline": "l2cap_add_conf_opt(&ptr, L2CAP_CONF_RFC,"
    },
    {
        "line": 12,
        "fullcodeline": "if (pi->imtu != L2CAP_DEFAULT_MTU)"
    },
    {
        "line": 25,
        "fullcodeline": "sizeof(rfc), (unsigned long) &rfc);"
    },
    {
        "line": 13,
        "fullcodeline": "l2cap_add_conf_opt(&ptr, L2CAP_CONF_MTU, 2, pi->imtu);"
    }
]