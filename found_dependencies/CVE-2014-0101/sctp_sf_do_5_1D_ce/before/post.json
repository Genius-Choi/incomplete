[
    {
        "line": 7,
        "fullcodeline": "struct sctp_chunk *chunk = arg;"
    },
    {
        "line": 11,
        "fullcodeline": "struct sctp_ulpevent *ev, *ai_ev = NULL;"
    },
    {
        "line": 12,
        "fullcodeline": "int error = 0;"
    },
    {
        "line": 54,
        "fullcodeline": "new_asoc = sctp_unpack_cookie(ep, asoc, chunk, GFP_ATOMIC, &error,"
    },
    {
        "line": 102,
        "fullcodeline": "error = sctp_auth_asoc_init_active_key(new_asoc, GFP_ATOMIC);"
    },
    {
        "line": 136,
        "fullcodeline": "repl = sctp_make_cookie_ack(new_asoc, chunk);"
    },
    {
        "line": 146,
        "fullcodeline": "ev = sctp_ulpevent_make_assoc_change(new_asoc, 0, SCTP_COMM_UP, 0,"
    },
    {
        "line": 170,
        "fullcodeline": "sctp_add_cmd_sf(commands, SCTP_CMD_NEW_ASOC, SCTP_ASOC(new_asoc));"
    },
    {
        "line": 171,
        "fullcodeline": "sctp_add_cmd_sf(commands, SCTP_CMD_NEW_STATE,"
    },
    {
        "line": 173,
        "fullcodeline": "SCTP_INC_STATS(net, SCTP_MIB_CURRESTAB);"
    },
    {
        "line": 174,
        "fullcodeline": "SCTP_INC_STATS(net, SCTP_MIB_PASSIVEESTABS);"
    },
    {
        "line": 175,
        "fullcodeline": "sctp_add_cmd_sf(commands, SCTP_CMD_HB_TIMERS_START, SCTP_NULL());"
    },
    {
        "line": 182,
        "fullcodeline": "sctp_add_cmd_sf(commands, SCTP_CMD_REPLY, SCTP_CHUNK(repl));"
    },
    {
        "line": 185,
        "fullcodeline": "sctp_add_cmd_sf(commands, SCTP_CMD_EVENT_ULP, SCTP_ULPEVENT(ev));"
    },
    {
        "line": 195,
        "fullcodeline": "sctp_ulpevent_free(ev);"
    },
    {
        "line": 197,
        "fullcodeline": "sctp_chunk_free(repl);"
    },
    {
        "line": 199,
        "fullcodeline": "sctp_association_free(new_asoc);"
    },
    {
        "line": 19,
        "fullcodeline": "if (ep == sctp_sk(net->sctp.ctl_sock)->ep) {"
    },
    {
        "line": 29,
        "fullcodeline": "if (!sctp_chunk_length_valid(chunk, sizeof(sctp_chunkhdr_t)))"
    },
    {
        "line": 37,
        "fullcodeline": "if (!sctp_sstate(sk, LISTENING) ||"
    },
    {
        "line": 46,
        "fullcodeline": "if (!pskb_pull(chunk->skb, ntohs(chunk->chunk_hdr->length) -"
    },
    {
        "line": 63,
        "fullcodeline": "if (!new_asoc) {"
    },
    {
        "line": 93,
        "fullcodeline": "if (!sctp_process_init(new_asoc, chunk,"
    },
    {
        "line": 137,
        "fullcodeline": "if (!repl)"
    },
    {
        "line": 150,
        "fullcodeline": "if (!ev)"
    },
    {
        "line": 172,
        "fullcodeline": "SCTP_STATE(SCTP_STATE_ESTABLISHED));"
    },
    {
        "line": 20,
        "fullcodeline": "SCTP_INC_STATS(net, SCTP_MIB_OUTOFBLUES);"
    },
    {
        "line": 38,
        "fullcodeline": "(sctp_style(sk, TCP) && sk_acceptq_is_full(sk)))"
    },
    {
        "line": 117,
        "fullcodeline": "auth.skb = chunk->auth_chunk;"
    },
    {
        "line": 118,
        "fullcodeline": "auth.asoc = chunk->asoc;"
    },
    {
        "line": 119,
        "fullcodeline": "auth.sctp_hdr = chunk->sctp_hdr;"
    },
    {
        "line": 120,
        "fullcodeline": "auth.chunk_hdr = (sctp_chunkhdr_t *)skb_push(chunk->auth_chunk,"
    },
    {
        "line": 122,
        "fullcodeline": "skb_pull(chunk->auth_chunk, sizeof(sctp_chunkhdr_t));"
    },
    {
        "line": 123,
        "fullcodeline": "auth.transport = chunk->transport;"
    },
    {
        "line": 125,
        "fullcodeline": "ret = sctp_sf_authenticate(net, ep, new_asoc, type, &auth);"
    },
    {
        "line": 128,
        "fullcodeline": "kfree_skb(chunk->auth_chunk);"
    },
    {
        "line": 159,
        "fullcodeline": "ai_ev = sctp_ulpevent_make_adaptation_indication(new_asoc,"
    },
    {
        "line": 178,
        "fullcodeline": "sctp_add_cmd_sf(commands, SCTP_CMD_TIMER_START,"
    },
    {
        "line": 189,
        "fullcodeline": "sctp_add_cmd_sf(commands, SCTP_CMD_EVENT_ULP,"
    },
    {
        "line": 21,
        "fullcodeline": "return sctp_sf_tabort_8_4_8(net, ep, asoc, type, arg, commands);"
    },
    {
        "line": 30,
        "fullcodeline": "return sctp_sf_pdiscard(net, ep, asoc, type, arg, commands);"
    },
    {
        "line": 39,
        "fullcodeline": "return sctp_sf_tabort_8_4_8(net, ep, asoc, type, arg, commands);"
    },
    {
        "line": 130,
        "fullcodeline": "if (ret != SCTP_IERROR_NO_ERROR) {"
    },
    {
        "line": 161,
        "fullcodeline": "if (!ai_ev)"
    },
    {
        "line": 179,
        "fullcodeline": "SCTP_TO(SCTP_EVENT_TIMEOUT_AUTOCLOSE));"
    },
    {
        "line": 190,
        "fullcodeline": "SCTP_ULPEVENT(ai_ev));"
    },
    {
        "line": 68,
        "fullcodeline": "case -SCTP_IERROR_NOMEM:"
    },
    {
        "line": 71,
        "fullcodeline": "case -SCTP_IERROR_STALE_COOKIE:"
    },
    {
        "line": 72,
        "fullcodeline": "sctp_send_stale_cookie_err(net, ep, asoc, chunk, commands,"
    },
    {
        "line": 76,
        "fullcodeline": "case -SCTP_IERROR_BAD_SIG:"
    },
    {
        "line": 131,
        "fullcodeline": "sctp_association_free(new_asoc);"
    },
    {
        "line": 74,
        "fullcodeline": "return sctp_sf_pdiscard(net, ep, asoc, type, arg, commands);"
    },
    {
        "line": 78,
        "fullcodeline": "return sctp_sf_pdiscard(net, ep, asoc, type, arg, commands);"
    },
    {
        "line": 132,
        "fullcodeline": "return sctp_sf_pdiscard(net, ep, asoc, type, arg, commands);"
    }
]