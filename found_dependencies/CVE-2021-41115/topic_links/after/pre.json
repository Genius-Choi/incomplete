[
    {
        "line": 2,
        "fullcodeline": "matches: List[Dict[str, Union[str, int]]] = []"
    },
    {
        "line": 3,
        "fullcodeline": "linkifiers = linkifiers_for_realm(linkifiers_key)"
    },
    {
        "line": 5,
        "fullcodeline": "options = re2.Options()"
    },
    {
        "line": 6,
        "fullcodeline": "options.log_errors = False"
    },
    {
        "line": 50,
        "fullcodeline": "matches = sorted(matches, key=lambda k: k[\"index\"])"
    },
    {
        "line": 7,
        "fullcodeline": "for linkifier in linkifiers:"
    },
    {
        "line": 32,
        "fullcodeline": "for sub_string in basic_link_splitter.split(topic_name):"
    },
    {
        "line": 51,
        "fullcodeline": "return [{k: str(v) for k, v in match.items() if k != \"index\"} for match in matches]"
    },
    {
        "line": 8,
        "fullcodeline": "raw_pattern = linkifier[\"pattern\"]"
    },
    {
        "line": 9,
        "fullcodeline": "url_format_string = linkifier[\"url_format\"]"
    },
    {
        "line": 33,
        "fullcodeline": "link_match = re.match(get_web_link_regex(), sub_string)"
    },
    {
        "line": 17,
        "fullcodeline": "for m in pattern.finditer(topic_name):"
    },
    {
        "line": 11,
        "fullcodeline": "pattern = re2.compile(prepare_linkifier_pattern(raw_pattern), options=options)"
    },
    {
        "line": 35,
        "fullcodeline": "actual_match_url = link_match.group(\"url\")"
    },
    {
        "line": 36,
        "fullcodeline": "result = urlsplit(actual_match_url)"
    },
    {
        "line": 44,
        "fullcodeline": "matches.append("
    },
    {
        "line": 18,
        "fullcodeline": "match_details = m.groupdict()"
    },
    {
        "line": 19,
        "fullcodeline": "match_text = match_details[\"linkifier_actual_match\"]"
    },
    {
        "line": 23,
        "fullcodeline": "matches += ["
    },
    {
        "line": 37,
        "fullcodeline": "if not result.scheme:"
    },
    {
        "line": 45,
        "fullcodeline": "dict(url=url, text=actual_match_url, index=topic_name.find(actual_match_url))"
    },
    {
        "line": 41,
        "fullcodeline": "url = result._replace(scheme=\"https\").geturl()"
    },
    {
        "line": 43,
        "fullcodeline": "url = actual_match_url"
    },
    {
        "line": 24,
        "fullcodeline": "dict("
    },
    {
        "line": 38,
        "fullcodeline": "if not result.netloc:"
    },
    {
        "line": 25,
        "fullcodeline": "url=url_format_string % match_details,"
    },
    {
        "line": 27,
        "fullcodeline": "index=topic_name.find(match_text),"
    },
    {
        "line": 39,
        "fullcodeline": "i = (result.path + \"/\").index(\"/\")"
    },
    {
        "line": 40,
        "fullcodeline": "result = result._replace(netloc=result.path[:i], path=result.path[i:])"
    }
]