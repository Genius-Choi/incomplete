[
    {
        "line": 40,
        "fullcodeline": "pixels[4],"
    },
    {
        "line": 49,
        "fullcodeline": "assert(image_info != (const ImageInfo *) NULL);"
    },
    {
        "line": 50,
        "fullcodeline": "assert(image_info->signature == MagickCoreSignature);"
    },
    {
        "line": 54,
        "fullcodeline": "assert(exception != (ExceptionInfo *) NULL);"
    },
    {
        "line": 55,
        "fullcodeline": "assert(exception->signature == MagickCoreSignature);"
    },
    {
        "line": 56,
        "fullcodeline": "image=AcquireImage(image_info,exception);"
    },
    {
        "line": 57,
        "fullcodeline": "status=OpenBlob(image_info,image,ReadBinaryBlobMode,exception);"
    },
    {
        "line": 66,
        "fullcodeline": "count=ReadBlob(image,1,&tga_info.id_length);"
    },
    {
        "line": 67,
        "fullcodeline": "tga_info.colormap_type=(unsigned char) ReadBlobByte(image);"
    },
    {
        "line": 68,
        "fullcodeline": "tga_info.image_type=(TGAImageType) ReadBlobByte(image);"
    },
    {
        "line": 80,
        "fullcodeline": "tga_info.colormap_index=ReadBlobLSBShort(image);"
    },
    {
        "line": 81,
        "fullcodeline": "tga_info.colormap_length=ReadBlobLSBShort(image);"
    },
    {
        "line": 82,
        "fullcodeline": "tga_info.colormap_size=(unsigned char) ReadBlobByte(image);"
    },
    {
        "line": 85,
        "fullcodeline": "tga_info.width=(unsigned short) ReadBlobLSBShort(image);"
    },
    {
        "line": 86,
        "fullcodeline": "tga_info.height=(unsigned short) ReadBlobLSBShort(image);"
    },
    {
        "line": 87,
        "fullcodeline": "tga_info.bits_per_pixel=(unsigned char) ReadBlobByte(image);"
    },
    {
        "line": 88,
        "fullcodeline": "tga_info.attributes=(unsigned char) ReadBlobByte(image);"
    },
    {
        "line": 97,
        "fullcodeline": "image->columns=tga_info.width;"
    },
    {
        "line": 98,
        "fullcodeline": "image->rows=tga_info.height;"
    },
    {
        "line": 99,
        "fullcodeline": "alpha_bits=(tga_info.attributes & 0x0FU);"
    },
    {
        "line": 100,
        "fullcodeline": "image->alpha_trait=(alpha_bits > 0) || (tga_info.bits_per_pixel == 32) ||"
    },
    {
        "line": 118,
        "fullcodeline": "image->compression=NoCompression;"
    },
    {
        "line": 166,
        "fullcodeline": "status=SetImageExtent(image,image->columns,image->rows,exception);"
    },
    {
        "line": 170,
        "fullcodeline": "pixel.alpha=(MagickRealType) OpaqueAlpha;"
    },
    {
        "line": 250,
        "fullcodeline": "base=0;"
    },
    {
        "line": 251,
        "fullcodeline": "flag=0;"
    },
    {
        "line": 252,
        "fullcodeline": "skip=MagickFalse;"
    },
    {
        "line": 254,
        "fullcodeline": "index=0;"
    },
    {
        "line": 255,
        "fullcodeline": "runlength=0;"
    },
    {
        "line": 256,
        "fullcodeline": "offset=0;"
    },
    {
        "line": 51,
        "fullcodeline": "if (image_info->debug != MagickFalse)"
    },
    {
        "line": 58,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 83,
        "fullcodeline": "tga_info.x_origin=ReadBlobLSBShort(image);"
    },
    {
        "line": 84,
        "fullcodeline": "tga_info.y_origin=ReadBlobLSBShort(image);"
    },
    {
        "line": 89,
        "fullcodeline": "if (EOFBlob(image) != MagickFalse)"
    },
    {
        "line": 113,
        "fullcodeline": "if ((tga_info.image_type == TGAColormap) ||"
    },
    {
        "line": 119,
        "fullcodeline": "if ((tga_info.image_type == TGARLEColormap) ||"
    },
    {
        "line": 123,
        "fullcodeline": "if (image->storage_class == PseudoClass)"
    },
    {
        "line": 138,
        "fullcodeline": "if (tga_info.id_length != 0)"
    },
    {
        "line": 161,
        "fullcodeline": "if (image_info->ping != MagickFalse)"
    },
    {
        "line": 167,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 169,
        "fullcodeline": "(void) ResetMagickMemory(&pixel,0,sizeof(pixel));"
    },
    {
        "line": 171,
        "fullcodeline": "if (tga_info.colormap_type != 0)"
    },
    {
        "line": 257,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 402,
        "fullcodeline": "(void) CloseBlob(image);"
    },
    {
        "line": 403,
        "fullcodeline": "return(GetFirstImageInList(image));"
    },
    {
        "line": 52,
        "fullcodeline": "(void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\","
    },
    {
        "line": 60,
        "fullcodeline": "image=DestroyImageList(image);"
    },
    {
        "line": 69,
        "fullcodeline": "if ((count != 1) ||"
    },
    {
        "line": 76,
        "fullcodeline": "(((tga_info.image_type == TGAColormap) ||"
    },
    {
        "line": 79,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 90,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"UnableToReadImageData\");"
    },
    {
        "line": 91,
        "fullcodeline": "if ((((tga_info.bits_per_pixel <= 1) || (tga_info.bits_per_pixel >= 17)) &&"
    },
    {
        "line": 92,
        "fullcodeline": "(tga_info.bits_per_pixel != 24) && (tga_info.bits_per_pixel != 32)))"
    },
    {
        "line": 93,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 102,
        "fullcodeline": "if ((tga_info.image_type != TGAColormap) &&"
    },
    {
        "line": 103,
        "fullcodeline": "(tga_info.image_type != TGARLEColormap))"
    },
    {
        "line": 104,
        "fullcodeline": "image->depth=(size_t) ((tga_info.bits_per_pixel <= 8) ? 8 :"
    },
    {
        "line": 116,
        "fullcodeline": "(tga_info.image_type == TGARLEMonochrome))"
    },
    {
        "line": 117,
        "fullcodeline": "image->storage_class=PseudoClass;"
    },
    {
        "line": 121,
        "fullcodeline": "(tga_info.image_type == TGARLERGB))"
    },
    {
        "line": 122,
        "fullcodeline": "image->compression=RLECompression;"
    },
    {
        "line": 149,
        "fullcodeline": "length=(size_t) tga_info.id_length;"
    },
    {
        "line": 150,
        "fullcodeline": "comment=(char *) NULL;"
    },
    {
        "line": 157,
        "fullcodeline": "comment[tga_info.id_length]='\\0';"
    },
    {
        "line": 259,
        "fullcodeline": "real=offset;"
    },
    {
        "line": 262,
        "fullcodeline": "q=QueueAuthenticPixels(image,0,(ssize_t) real,image->columns,1,exception);"
    },
    {
        "line": 399,
        "fullcodeline": "if (EOFBlob(image) != MagickFalse)"
    },
    {
        "line": 400,
        "fullcodeline": "ThrowFileException(exception,CorruptImageError,\"UnexpectedEndOfFile\","
    },
    {
        "line": 61,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 70,
        "fullcodeline": "((tga_info.image_type != TGAColormap) &&"
    },
    {
        "line": 78,
        "fullcodeline": "(tga_info.colormap_type == 0)))"
    },
    {
        "line": 101,
        "fullcodeline": "(tga_info.colormap_size == 32) ?  BlendPixelTrait : UndefinedPixelTrait;"
    },
    {
        "line": 109,
        "fullcodeline": "image->depth=(size_t) ((tga_info.colormap_size <= 8) ? 8 :"
    },
    {
        "line": 115,
        "fullcodeline": "(tga_info.image_type == TGARLEColormap) ||"
    },
    {
        "line": 120,
        "fullcodeline": "(tga_info.image_type == TGARLEMonochrome) ||"
    },
    {
        "line": 125,
        "fullcodeline": "if (tga_info.colormap_type != 0)"
    },
    {
        "line": 154,
        "fullcodeline": "if (comment == (char *) NULL)"
    },
    {
        "line": 156,
        "fullcodeline": "count=ReadBlob(image,tga_info.id_length,(unsigned char *) comment);"
    },
    {
        "line": 158,
        "fullcodeline": "(void) SetImageProperty(image,\"comment\",comment,exception);"
    },
    {
        "line": 159,
        "fullcodeline": "comment=DestroyString(comment);"
    },
    {
        "line": 163,
        "fullcodeline": "(void) CloseBlob(image);"
    },
    {
        "line": 168,
        "fullcodeline": "return(DestroyImageList(image));"
    },
    {
        "line": 176,
        "fullcodeline": "if (AcquireImageColormap(image,image->colors,exception) == MagickFalse)"
    },
    {
        "line": 178,
        "fullcodeline": "for (i=0; i < (ssize_t) tga_info.colormap_index; i++)"
    },
    {
        "line": 180,
        "fullcodeline": "for ( ; i < (ssize_t) image->colors; i++)"
    },
    {
        "line": 263,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 265,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 384,
        "fullcodeline": "if (offset >= image->rows)"
    },
    {
        "line": 389,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 391,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 75,
        "fullcodeline": "(tga_info.image_type != TGARLEMonochrome)) ||"
    },
    {
        "line": 77,
        "fullcodeline": "(tga_info.image_type == TGARLEColormap)) &&"
    },
    {
        "line": 114,
        "fullcodeline": "(tga_info.image_type == TGAMonochrome) ||"
    },
    {
        "line": 126,
        "fullcodeline": "image->colors=tga_info.colormap_index+tga_info.colormap_length;"
    },
    {
        "line": 151,
        "fullcodeline": "if (~length >= (MagickPathExtent-1))"
    },
    {
        "line": 152,
        "fullcodeline": "comment=(char *) AcquireQuantumMemory(length+MagickPathExtent,"
    },
    {
        "line": 155,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 260,
        "fullcodeline": "if (((unsigned char) (tga_info.attributes & 0x20) >> 5) == 0)"
    },
    {
        "line": 261,
        "fullcodeline": "real=image->rows-real-1;"
    },
    {
        "line": 368,
        "fullcodeline": "SetPixelRed(image,ClampToQuantum(pixel.red),q);"
    },
    {
        "line": 369,
        "fullcodeline": "SetPixelGreen(image,ClampToQuantum(pixel.green),q);"
    },
    {
        "line": 370,
        "fullcodeline": "SetPixelBlue(image,ClampToQuantum(pixel.blue),q);"
    },
    {
        "line": 373,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 380,
        "fullcodeline": "if (((unsigned char) (tga_info.attributes & 0xc0) >> 6) == 2)"
    },
    {
        "line": 381,
        "fullcodeline": "offset+=2;"
    },
    {
        "line": 386,
        "fullcodeline": "base++;"
    },
    {
        "line": 387,
        "fullcodeline": "offset=base;"
    },
    {
        "line": 393,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 74,
        "fullcodeline": "(tga_info.image_type != TGARLERGB) &&"
    },
    {
        "line": 132,
        "fullcodeline": "one=1;"
    },
    {
        "line": 133,
        "fullcodeline": "image->colors=one << tga_info.bits_per_pixel;"
    },
    {
        "line": 287,
        "fullcodeline": "if (skip == MagickFalse)"
    },
    {
        "line": 364,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 366,
        "fullcodeline": "if (image->storage_class == PseudoClass)"
    },
    {
        "line": 371,
        "fullcodeline": "if (image->alpha_trait != UndefinedPixelTrait)"
    },
    {
        "line": 383,
        "fullcodeline": "offset++;"
    },
    {
        "line": 395,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 73,
        "fullcodeline": "(tga_info.image_type != TGARLEColormap) &&"
    },
    {
        "line": 105,
        "fullcodeline": "(tga_info.bits_per_pixel <= 16) ? 5 :"
    },
    {
        "line": 134,
        "fullcodeline": "if (AcquireImageColormap(image,image->colors,exception) == MagickFalse)"
    },
    {
        "line": 267,
        "fullcodeline": "if ((tga_info.image_type == TGARLEColormap) ||"
    },
    {
        "line": 269,
        "fullcodeline": "(tga_info.image_type == TGARLEMonochrome))"
    },
    {
        "line": 365,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"UnableToReadImageData\");"
    },
    {
        "line": 367,
        "fullcodeline": "SetPixelIndex(image,index,q);"
    },
    {
        "line": 372,
        "fullcodeline": "SetPixelAlpha(image,ClampToQuantum(pixel.alpha),q);"
    },
    {
        "line": 72,
        "fullcodeline": "(tga_info.image_type != TGAMonochrome) &&"
    },
    {
        "line": 106,
        "fullcodeline": "(tga_info.bits_per_pixel == 24) ? 8 :"
    },
    {
        "line": 110,
        "fullcodeline": "(tga_info.colormap_size <= 16) ? 5 :"
    },
    {
        "line": 135,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 190,
        "fullcodeline": "pixel.red=(MagickRealType) ScaleCharToQuantum((unsigned char)"
    },
    {
        "line": 192,
        "fullcodeline": "pixel.green=pixel.red;"
    },
    {
        "line": 193,
        "fullcodeline": "pixel.blue=pixel.red;"
    },
    {
        "line": 205,
        "fullcodeline": "j=(unsigned char) ReadBlobByte(image);"
    },
    {
        "line": 206,
        "fullcodeline": "k=(unsigned char) ReadBlobByte(image);"
    },
    {
        "line": 207,
        "fullcodeline": "range=GetQuantumRange(5UL);"
    },
    {
        "line": 208,
        "fullcodeline": "pixel.red=(MagickRealType) ScaleAnyToQuantum(1UL*(k & 0x7c) >> 2,"
    },
    {
        "line": 210,
        "fullcodeline": "pixel.green=(MagickRealType) ScaleAnyToQuantum((1UL*(k & 0x03)"
    },
    {
        "line": 212,
        "fullcodeline": "pixel.blue=(MagickRealType) ScaleAnyToQuantum(1UL*(j & 0x1f),range);"
    },
    {
        "line": 220,
        "fullcodeline": "pixel.blue=(MagickRealType) ScaleCharToQuantum((unsigned char)"
    },
    {
        "line": 222,
        "fullcodeline": "pixel.green=(MagickRealType) ScaleCharToQuantum((unsigned char)"
    },
    {
        "line": 224,
        "fullcodeline": "pixel.red=(MagickRealType) ScaleCharToQuantum((unsigned char)"
    },
    {
        "line": 233,
        "fullcodeline": "pixel.blue=(MagickRealType) ScaleCharToQuantum((unsigned char)"
    },
    {
        "line": 235,
        "fullcodeline": "pixel.green=(MagickRealType) ScaleCharToQuantum((unsigned char)"
    },
    {
        "line": 237,
        "fullcodeline": "pixel.red=(MagickRealType) ScaleCharToQuantum((unsigned char)"
    },
    {
        "line": 239,
        "fullcodeline": "pixel.alpha=(MagickRealType) ScaleCharToQuantum((unsigned char)"
    },
    {
        "line": 268,
        "fullcodeline": "(tga_info.image_type == TGARLERGB) ||"
    },
    {
        "line": 271,
        "fullcodeline": "if (runlength != 0)"
    },
    {
        "line": 71,
        "fullcodeline": "(tga_info.image_type != TGARGB) &&"
    },
    {
        "line": 107,
        "fullcodeline": "(tga_info.bits_per_pixel == 32) ? 8 : 8);"
    },
    {
        "line": 111,
        "fullcodeline": "(tga_info.colormap_size == 24) ? 8 :"
    },
    {
        "line": 273,
        "fullcodeline": "runlength--;"
    },
    {
        "line": 274,
        "fullcodeline": "skip=flag != 0;"
    },
    {
        "line": 278,
        "fullcodeline": "count=ReadBlob(image,1,&runlength);"
    },
    {
        "line": 281,
        "fullcodeline": "flag=runlength & 0x80;"
    },
    {
        "line": 284,
        "fullcodeline": "skip=MagickFalse;"
    },
    {
        "line": 296,
        "fullcodeline": "index=(Quantum) ReadBlobByte(image);"
    },
    {
        "line": 322,
        "fullcodeline": "j=pixels[0];"
    },
    {
        "line": 323,
        "fullcodeline": "k=pixels[1];"
    },
    {
        "line": 324,
        "fullcodeline": "range=GetQuantumRange(5UL);"
    },
    {
        "line": 325,
        "fullcodeline": "pixel.red=(MagickRealType) ScaleAnyToQuantum(1UL*(k & 0x7c) >> 2,"
    },
    {
        "line": 327,
        "fullcodeline": "pixel.green=(MagickRealType) ScaleAnyToQuantum((1UL*"
    },
    {
        "line": 329,
        "fullcodeline": "pixel.blue=(MagickRealType) ScaleAnyToQuantum(1UL*(j & 0x1f),range);"
    },
    {
        "line": 345,
        "fullcodeline": "pixel.blue=(MagickRealType) ScaleCharToQuantum(pixels[0]);"
    },
    {
        "line": 346,
        "fullcodeline": "pixel.green=(MagickRealType) ScaleCharToQuantum(pixels[1]);"
    },
    {
        "line": 347,
        "fullcodeline": "pixel.red=(MagickRealType) ScaleCharToQuantum(pixels[2]);"
    },
    {
        "line": 357,
        "fullcodeline": "pixel.blue=(MagickRealType) ScaleCharToQuantum(pixels[0]);"
    },
    {
        "line": 358,
        "fullcodeline": "pixel.green=(MagickRealType) ScaleCharToQuantum(pixels[1]);"
    },
    {
        "line": 359,
        "fullcodeline": "pixel.red=(MagickRealType) ScaleCharToQuantum(pixels[2]);"
    },
    {
        "line": 360,
        "fullcodeline": "pixel.alpha=(MagickRealType) ScaleCharToQuantum(pixels[3]);"
    },
    {
        "line": 282,
        "fullcodeline": "if (flag != 0)"
    },
    {
        "line": 330,
        "fullcodeline": "if (image->alpha_trait != UndefinedPixelTrait)"
    },
    {
        "line": 333,
        "fullcodeline": "if (image->storage_class == PseudoClass)"
    },
    {
        "line": 191,
        "fullcodeline": "ReadBlobByte(image));"
    },
    {
        "line": 211,
        "fullcodeline": "<< 3)+(1UL*(j & 0xe0) >> 5),range);"
    },
    {
        "line": 221,
        "fullcodeline": "ReadBlobByte(image));"
    },
    {
        "line": 223,
        "fullcodeline": "ReadBlobByte(image));"
    },
    {
        "line": 225,
        "fullcodeline": "ReadBlobByte(image));"
    },
    {
        "line": 234,
        "fullcodeline": "ReadBlobByte(image));"
    },
    {
        "line": 236,
        "fullcodeline": "ReadBlobByte(image));"
    },
    {
        "line": 238,
        "fullcodeline": "ReadBlobByte(image));"
    },
    {
        "line": 240,
        "fullcodeline": "ReadBlobByte(image));"
    },
    {
        "line": 280,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"UnableToReadImageData\");"
    },
    {
        "line": 283,
        "fullcodeline": "runlength-=128;"
    },
    {
        "line": 298,
        "fullcodeline": "pixel=image->colormap[(ssize_t) ConstrainColormapIndex(image,"
    },
    {
        "line": 320,
        "fullcodeline": "if (ReadBlob(image,2,pixels) != 2)"
    },
    {
        "line": 321,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"UnableToReadImageData\");"
    },
    {
        "line": 331,
        "fullcodeline": "pixel.alpha=(MagickRealType) ((k & 0x80) == 0 ? (Quantum)"
    },
    {
        "line": 334,
        "fullcodeline": "index=(Quantum) ConstrainColormapIndex(image,((ssize_t) (k << 8))+"
    },
    {
        "line": 343,
        "fullcodeline": "if (ReadBlob(image,3,pixels) != 3)"
    },
    {
        "line": 344,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"UnableToReadImageData\");"
    },
    {
        "line": 355,
        "fullcodeline": "if (ReadBlob(image,4,pixels) != 4)"
    },
    {
        "line": 356,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"UnableToReadImageData\");"
    },
    {
        "line": 302,
        "fullcodeline": "pixel.red=(MagickRealType) ScaleCharToQuantum((unsigned char)"
    },
    {
        "line": 304,
        "fullcodeline": "pixel.green=(MagickRealType) ScaleCharToQuantum((unsigned char)"
    },
    {
        "line": 306,
        "fullcodeline": "pixel.blue=(MagickRealType) ScaleCharToQuantum((unsigned char)"
    },
    {
        "line": 328,
        "fullcodeline": "(k & 0x03) << 3)+(1UL*(j & 0xe0) >> 5),range);"
    }
]