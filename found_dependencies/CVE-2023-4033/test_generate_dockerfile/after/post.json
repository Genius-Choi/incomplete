[
    {
        "line": 10,
        "fullcodeline": "extra_args = [\"--install-mlflow\"]"
    },
    {
        "line": 14,
        "fullcodeline": "output_directory = tmp_path.joinpath(\"output_directory\")"
    },
    {
        "line": 15,
        "fullcodeline": "pyfunc_generate_dockerfile("
    },
    {
        "line": 21,
        "fullcodeline": "assert output_directory.is_dir()"
    },
    {
        "line": 22,
        "fullcodeline": "assert output_directory.joinpath(\"Dockerfile\").exists()"
    },
    {
        "line": 23,
        "fullcodeline": "assert output_directory.joinpath(\"model_dir\").is_dir()"
    },
    {
        "line": 25,
        "fullcodeline": "assert output_directory.joinpath(\"Dockerfile\").stat().st_size != 0"
    },
    {
        "line": 2,
        "fullcodeline": "with mlflow.start_run() as active_run:"
    },
    {
        "line": 12,
        "fullcodeline": "extra_args.append(\"--enable-mlserver\")"
    },
    {
        "line": 9,
        "fullcodeline": "model_uri = f\"runs:/{active_run.info.run_id}/model\""
    },
    {
        "line": 4,
        "fullcodeline": "mlflow.sklearn.log_model("
    },
    {
        "line": 8,
        "fullcodeline": "mlflow.sklearn.log_model(sk_model, \"model\")"
    },
    {
        "line": 5,
        "fullcodeline": "sk_model, \"model\", extra_pip_requirements=[PROTOBUF_REQUIREMENT]"
    }
]