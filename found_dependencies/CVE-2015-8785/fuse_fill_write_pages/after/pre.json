[
    {
        "line": 5,
        "fullcodeline": "struct fuse_conn *fc = get_fuse_conn(mapping->host);"
    },
    {
        "line": 6,
        "fullcodeline": "unsigned offset = pos & (PAGE_CACHE_SIZE - 1);"
    },
    {
        "line": 7,
        "fullcodeline": "size_t count = 0;"
    },
    {
        "line": 10,
        "fullcodeline": "req->in.argpages = 1;"
    },
    {
        "line": 11,
        "fullcodeline": "req->page_descs[0].offset = offset;"
    },
    {
        "line": 59,
        "fullcodeline": "} while (iov_iter_count(ii) && count < fc->max_write &&"
    },
    {
        "line": 62,
        "fullcodeline": "return count > 0 ? count : err;"
    },
    {
        "line": 16,
        "fullcodeline": "pgoff_t index = pos >> PAGE_CACHE_SHIFT;"
    },
    {
        "line": 17,
        "fullcodeline": "size_t bytes = min_t(size_t, PAGE_CACHE_SIZE - offset,"
    },
    {
        "line": 20,
        "fullcodeline": "bytes = min_t(size_t, bytes, fc->max_write - count);"
    },
    {
        "line": 23,
        "fullcodeline": "err = -EFAULT;"
    },
    {
        "line": 27,
        "fullcodeline": "err = -ENOMEM;"
    },
    {
        "line": 28,
        "fullcodeline": "page = grab_cache_page_write_begin(mapping, index, 0);"
    },
    {
        "line": 35,
        "fullcodeline": "tmp = iov_iter_copy_from_user_atomic(page, ii, offset, bytes);"
    },
    {
        "line": 36,
        "fullcodeline": "flush_dcache_page(page);"
    },
    {
        "line": 38,
        "fullcodeline": "iov_iter_advance(ii, tmp);"
    },
    {
        "line": 46,
        "fullcodeline": "err = 0;"
    },
    {
        "line": 47,
        "fullcodeline": "req->pages[req->num_pages] = page;"
    },
    {
        "line": 48,
        "fullcodeline": "req->page_descs[req->num_pages].length = tmp;"
    },
    {
        "line": 49,
        "fullcodeline": "req->num_pages++;"
    },
    {
        "line": 51,
        "fullcodeline": "count += tmp;"
    },
    {
        "line": 52,
        "fullcodeline": "pos += tmp;"
    },
    {
        "line": 53,
        "fullcodeline": "offset += tmp;"
    },
    {
        "line": 60,
        "fullcodeline": "req->num_pages < req->max_pages && offset == 0);"
    },
    {
        "line": 24,
        "fullcodeline": "if (iov_iter_fault_in_readable(ii, bytes))"
    },
    {
        "line": 29,
        "fullcodeline": "if (!page)"
    },
    {
        "line": 32,
        "fullcodeline": "if (mapping_writably_mapped(mapping))"
    },
    {
        "line": 39,
        "fullcodeline": "if (!tmp) {"
    },
    {
        "line": 54,
        "fullcodeline": "if (offset == PAGE_CACHE_SIZE)"
    },
    {
        "line": 57,
        "fullcodeline": "if (!fc->big_writes)"
    },
    {
        "line": 18,
        "fullcodeline": "iov_iter_count(ii));"
    },
    {
        "line": 33,
        "fullcodeline": "flush_dcache_page(page);"
    },
    {
        "line": 40,
        "fullcodeline": "unlock_page(page);"
    },
    {
        "line": 41,
        "fullcodeline": "page_cache_release(page);"
    },
    {
        "line": 42,
        "fullcodeline": "bytes = min(bytes, iov_iter_single_seg_count(ii));"
    },
    {
        "line": 55,
        "fullcodeline": "offset = 0;"
    }
]