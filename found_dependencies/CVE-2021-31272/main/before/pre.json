[
    {
        "line": 3,
        "fullcodeline": "bool create = false;"
    },
    {
        "line": 4,
        "fullcodeline": "bool extract = false;"
    },
    {
        "line": 5,
        "fullcodeline": "bool list = false;"
    },
    {
        "line": 6,
        "fullcodeline": "bool verbose = false;"
    },
    {
        "line": 7,
        "fullcodeline": "bool gzip = false;"
    },
    {
        "line": 8,
        "fullcodeline": "const char* archive_file = nullptr;"
    },
    {
        "line": 12,
        "fullcodeline": "args_parser.add_option(create, \"Create archive\", \"create\", 'c');"
    },
    {
        "line": 13,
        "fullcodeline": "args_parser.add_option(extract, \"Extract archive\", \"extract\", 'x');"
    },
    {
        "line": 14,
        "fullcodeline": "args_parser.add_option(list, \"List contents\", \"list\", 't');"
    },
    {
        "line": 15,
        "fullcodeline": "args_parser.add_option(verbose, \"Print paths\", \"verbose\", 'v');"
    },
    {
        "line": 16,
        "fullcodeline": "args_parser.add_option(gzip, \"compress or uncompress file using gzip\", \"gzip\", 'z');"
    },
    {
        "line": 17,
        "fullcodeline": "args_parser.add_option(archive_file, \"Archive file\", \"file\", 'f', \"FILE\");"
    },
    {
        "line": 18,
        "fullcodeline": "args_parser.add_positional_argument(paths, \"Paths\", \"PATHS\", Core::ArgsParser::Required::No);"
    },
    {
        "line": 19,
        "fullcodeline": "args_parser.parse(argc, argv);"
    },
    {
        "line": 21,
        "fullcodeline": "if (create + extract + list != 1) {"
    },
    {
        "line": 26,
        "fullcodeline": "if (list || extract) {"
    },
    {
        "line": 22,
        "fullcodeline": "warnln(\"exactly one of -c, -x, and -t can be used\");"
    },
    {
        "line": 27,
        "fullcodeline": "auto file = Core::File::standard_input();"
    },
    {
        "line": 39,
        "fullcodeline": "Compress::GzipDecompressor gzip_stream(file_stream);"
    },
    {
        "line": 41,
        "fullcodeline": "InputStream& file_input_stream = file_stream;"
    },
    {
        "line": 42,
        "fullcodeline": "InputStream& gzip_input_stream = gzip_stream;"
    },
    {
        "line": 99,
        "fullcodeline": "auto file = Core::File::standard_output();"
    },
    {
        "line": 111,
        "fullcodeline": "Compress::GzipCompressor gzip_stream(file_stream);"
    },
    {
        "line": 113,
        "fullcodeline": "OutputStream& file_output_stream = file_stream;"
    },
    {
        "line": 114,
        "fullcodeline": "OutputStream& gzip_output_stream = gzip_stream;"
    },
    {
        "line": 135,
        "fullcodeline": "auto add_directory = [&](String path, auto handle_directory) -> void {"
    },
    {
        "line": 48,
        "fullcodeline": "for (; !tar_stream.finished(); tar_stream.advance()) {"
    },
    {
        "line": 30,
        "fullcodeline": "auto maybe_file = Core::File::open(archive_file, Core::IODevice::OpenMode::ReadOnly);"
    },
    {
        "line": 35,
        "fullcodeline": "file = maybe_file.value();"
    },
    {
        "line": 44,
        "fullcodeline": "if (!tar_stream.valid()) {"
    },
    {
        "line": 94,
        "fullcodeline": "if (paths.size() == 0) {"
    },
    {
        "line": 102,
        "fullcodeline": "auto maybe_file = Core::File::open(archive_file, Core::IODevice::OpenMode::WriteOnly);"
    },
    {
        "line": 107,
        "fullcodeline": "file = maybe_file.value();"
    },
    {
        "line": 31,
        "fullcodeline": "if (maybe_file.is_error()) {"
    },
    {
        "line": 103,
        "fullcodeline": "if (maybe_file.is_error()) {"
    },
    {
        "line": 158,
        "fullcodeline": "if (Core::File::is_directory(path)) {"
    },
    {
        "line": 53,
        "fullcodeline": "Tar::TarFileStream file_stream = tar_stream.file_contents();"
    },
    {
        "line": 55,
        "fullcodeline": "const Tar::Header& header = tar_stream.header();"
    },
    {
        "line": 159,
        "fullcodeline": "add_directory(path, add_directory);"
    },
    {
        "line": 32,
        "fullcodeline": "warnln(\"Core::File::open: {}\", maybe_file.error());"
    },
    {
        "line": 50,
        "fullcodeline": "outln(\"{}\", tar_stream.header().file_name());"
    },
    {
        "line": 56,
        "fullcodeline": "switch (header.type_flag()) {"
    },
    {
        "line": 104,
        "fullcodeline": "warnln(\"Core::File::open: {}\", maybe_file.error());"
    },
    {
        "line": 161,
        "fullcodeline": "add_file(path);"
    },
    {
        "line": 59,
        "fullcodeline": "int fd = open(String(header.file_name()).characters(), O_CREAT | O_WRONLY, header.mode());"
    },
    {
        "line": 60,
        "fullcodeline": "if (fd < 0) {"
    },
    {
        "line": 65,
        "fullcodeline": "Array<u8, buffer_size> buffer;"
    },
    {
        "line": 67,
        "fullcodeline": "while ((nread = file_stream.read(buffer)) > 0) {"
    },
    {
        "line": 77,
        "fullcodeline": "if (mkdir(String(header.file_name()).characters(), header.mode())) {"
    },
    {
        "line": 68,
        "fullcodeline": "if (write(fd, buffer.data(), nread) < 0) {"
    }
]