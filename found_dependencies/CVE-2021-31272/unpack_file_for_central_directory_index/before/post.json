[
    {
        "line": 31,
        "fullcodeline": "u8 buffer[4];"
    },
    {
        "line": 34,
        "fullcodeline": "off_t local_file_header_index = buffer[3] << 24 | buffer[2] << 16 | buffer[1] << 8 | buffer[0];"
    },
    {
        "line": 38,
        "fullcodeline": "auto compression_method = buffer[1] << 8 | buffer[0];"
    },
    {
        "line": 40,
        "fullcodeline": "VERIFY(compression_method == None);"
    },
    {
        "line": 44,
        "fullcodeline": "off_t compressed_file_size = buffer[3] << 24 | buffer[2] << 16 | buffer[1] << 8 | buffer[0];"
    },
    {
        "line": 48,
        "fullcodeline": "off_t file_name_length = buffer[1] << 8 | buffer[0];"
    },
    {
        "line": 52,
        "fullcodeline": "off_t extra_field_length = buffer[1] << 8 | buffer[0];"
    },
    {
        "line": 54,
        "fullcodeline": "char file_name[file_name_length + 1];"
    },
    {
        "line": 57,
        "fullcodeline": "file_name[file_name_length] = '\\0';"
    },
    {
        "line": 32,
        "fullcodeline": "if (!seek_and_read(buffer, file, central_directory_index + CFDHLocalFileHeaderIndexOffset, 4))"
    },
    {
        "line": 36,
        "fullcodeline": "if (!seek_and_read(buffer, file, local_file_header_index + LFHCompressionMethodOffset, 2))"
    },
    {
        "line": 42,
        "fullcodeline": "if (!seek_and_read(buffer, file, local_file_header_index + LFHCompressedSizeOffset, 4))"
    },
    {
        "line": 46,
        "fullcodeline": "if (!seek_and_read(buffer, file, local_file_header_index + LFHFileNameLengthOffset, 2))"
    },
    {
        "line": 50,
        "fullcodeline": "if (!seek_and_read(buffer, file, local_file_header_index + LFHExtraFieldLengthOffset, 2))"
    },
    {
        "line": 55,
        "fullcodeline": "if (!seek_and_read((u8*)file_name, file, local_file_header_index + LFHFileNameBaseOffset, file_name_length))"
    },
    {
        "line": 59,
        "fullcodeline": "if (file_name[file_name_length - 1] == '/') {"
    },
    {
        "line": 60,
        "fullcodeline": "if (mkdir(file_name, 0755) < 0) {"
    },
    {
        "line": 65,
        "fullcodeline": "auto new_file = Core::File::construct(String { file_name });"
    },
    {
        "line": 71,
        "fullcodeline": "printf(\" extracting: %s\\n\", file_name);"
    },
    {
        "line": 72,
        "fullcodeline": "u8 raw_file_contents[compressed_file_size];"
    },
    {
        "line": 61,
        "fullcodeline": "perror(\"mkdir\");"
    },
    {
        "line": 66,
        "fullcodeline": "if (!new_file->open(Core::IODevice::WriteOnly)) {"
    },
    {
        "line": 73,
        "fullcodeline": "if (!seek_and_read(raw_file_contents, file, local_file_header_index + LFHFileNameBaseOffset + file_name_length + extra_field_length, compressed_file_size))"
    },
    {
        "line": 77,
        "fullcodeline": "if (!new_file->write(raw_file_contents, compressed_file_size)) {"
    },
    {
        "line": 82,
        "fullcodeline": "if (!new_file->close()) {"
    },
    {
        "line": 67,
        "fullcodeline": "fprintf(stderr, \"Can't write file %s: %s\\n\", file_name, new_file->error_string());"
    },
    {
        "line": 78,
        "fullcodeline": "fprintf(stderr, \"Can't write file contents in %s: %s\\n\", file_name, new_file->error_string());"
    },
    {
        "line": 83,
        "fullcodeline": "fprintf(stderr, \"Can't close file %s: %s\\n\", file_name, new_file->error_string());"
    }
]