[
    {
        "line": 6,
        "fullcodeline": "INDEX_TYPE row_split_size = row_split.size();"
    },
    {
        "line": 7,
        "fullcodeline": "if (row_split_size > 0) {"
    },
    {
        "line": 10,
        "fullcodeline": "for (INDEX_TYPE i = 0; i < row_split_size - 1; ++i) {"
    },
    {
        "line": 26,
        "fullcodeline": "if (row_split_size > 0) {"
    },
    {
        "line": 8,
        "fullcodeline": "result->reserve(row_split(row_split_size - 1));"
    },
    {
        "line": 11,
        "fullcodeline": "INDEX_TYPE row_length = row_split(i + 1) - row_split(i);"
    },
    {
        "line": 12,
        "fullcodeline": "INDEX_TYPE real_length = std::min(output_size, row_length);"
    },
    {
        "line": 13,
        "fullcodeline": "INDEX_TYPE parent_output_index_current = parent_output_index[i];"
    },
    {
        "line": 27,
        "fullcodeline": "OP_REQUIRES(context, result->size() == row_split(row_split_size - 1),"
    },
    {
        "line": 15,
        "fullcodeline": "if (parent_output_index_current == -1) {"
    },
    {
        "line": 18,
        "fullcodeline": "for (INDEX_TYPE j = 0; j < real_length; ++j) {"
    },
    {
        "line": 22,
        "fullcodeline": "for (INDEX_TYPE j = 0; j < row_length - real_length; ++j) {"
    },
    {
        "line": 28,
        "fullcodeline": "errors::InvalidArgument(\"Invalid row split size.\"));"
    },
    {
        "line": 16,
        "fullcodeline": "real_length = 0;"
    },
    {
        "line": 19,
        "fullcodeline": "result->push_back(parent_output_index_current);"
    },
    {
        "line": 20,
        "fullcodeline": "parent_output_index_current += output_index_multiplier;"
    },
    {
        "line": 23,
        "fullcodeline": "result->push_back(-1);"
    }
]