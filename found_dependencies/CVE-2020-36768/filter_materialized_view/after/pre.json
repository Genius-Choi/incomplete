[
    {
        "line": 29,
        "fullcodeline": "values = {}"
    },
    {
        "line": 40,
        "fullcodeline": "filter_cond = []"
    },
    {
        "line": 31,
        "fullcodeline": "if schema is not None:"
    },
    {
        "line": 34,
        "fullcodeline": "if limit is None:"
    },
    {
        "line": 42,
        "fullcodeline": "if state_code is not None:"
    },
    {
        "line": 47,
        "fullcodeline": "if area is not None:"
    },
    {
        "line": 55,
        "fullcodeline": "if distance_grid is not None:"
    },
    {
        "line": 63,
        "fullcodeline": "if building is not None:"
    },
    {
        "line": 71,
        "fullcodeline": "if buildingfp is not None:"
    },
    {
        "line": 79,
        "fullcodeline": "if keys is None:"
    },
    {
        "line": 87,
        "fullcodeline": "if len(filter_cond) > 0:"
    },
    {
        "line": 92,
        "fullcodeline": "with engine.connect() as con:"
    },
    {
        "line": 32,
        "fullcodeline": "view_name = \"{}.{}\".format(schema, view_name)"
    },
    {
        "line": 35,
        "fullcodeline": "limit = \"\""
    },
    {
        "line": 37,
        "fullcodeline": "values[\"limit\"] = int(limit)"
    },
    {
        "line": 38,
        "fullcodeline": "limit = \" LIMIT :limit\""
    },
    {
        "line": 43,
        "fullcodeline": "key = \"adm1_pcode\""
    },
    {
        "line": 44,
        "fullcodeline": "filter_cond += [f\"{view_name}.{key} = :{key}\"]"
    },
    {
        "line": 45,
        "fullcodeline": "values[key] = state_code"
    },
    {
        "line": 48,
        "fullcodeline": "key = \"area_km2\""
    },
    {
        "line": 49,
        "fullcodeline": "val1 = key + \"_1\""
    },
    {
        "line": 50,
        "fullcodeline": "val2 = key + \"_2\""
    },
    {
        "line": 51,
        "fullcodeline": "filter_cond += [f\"{view_name}.{key} >= :{val1}\", f\"{view_name}.{key} <= :{val2}\"]"
    },
    {
        "line": 52,
        "fullcodeline": "values[val1] = float(area[0])"
    },
    {
        "line": 53,
        "fullcodeline": "values[val2] = float(area[1])"
    },
    {
        "line": 56,
        "fullcodeline": "key = \"grid_dist_km\""
    },
    {
        "line": 57,
        "fullcodeline": "val1 = key + \"_1\""
    },
    {
        "line": 58,
        "fullcodeline": "val2 = key + \"_2\""
    },
    {
        "line": 59,
        "fullcodeline": "filter_cond += [f\"{view_name}.{key} >= :{val1}\", f\"{view_name}.{key} <= :{val2}\"]"
    },
    {
        "line": 60,
        "fullcodeline": "values[val1] = float(distance_grid[0])"
    },
    {
        "line": 61,
        "fullcodeline": "values[val2] = float(distance_grid[1])"
    },
    {
        "line": 64,
        "fullcodeline": "key = \"building_count\""
    },
    {
        "line": 65,
        "fullcodeline": "val1 = key + \"_1\""
    },
    {
        "line": 66,
        "fullcodeline": "val2 = key + \"_2\""
    },
    {
        "line": 67,
        "fullcodeline": "filter_cond += [f\"{view_name}.{key}>=:{val1}\", f\"{view_name}.{key}<=:{val2}\"]"
    },
    {
        "line": 68,
        "fullcodeline": "values[val1] = int(building[0])"
    },
    {
        "line": 69,
        "fullcodeline": "values[val2] = int(building[1])"
    },
    {
        "line": 72,
        "fullcodeline": "key = \"percentage_building_area\""
    },
    {
        "line": 73,
        "fullcodeline": "val1 = key + \"_1\""
    },
    {
        "line": 74,
        "fullcodeline": "val2 = key + \"_2\""
    },
    {
        "line": 75,
        "fullcodeline": "filter_cond += [f\"{view_name}.{key}>=:{val1}\", f\"{view_name}.{key}<=:{val2}\"]"
    },
    {
        "line": 76,
        "fullcodeline": "values[val1] = float(buildingfp[0])"
    },
    {
        "line": 77,
        "fullcodeline": "values[val2] = float(buildingfp[1])"
    },
    {
        "line": 80,
        "fullcodeline": "columns = \"*\""
    },
    {
        "line": 88,
        "fullcodeline": "filter_cond_str = \" WHERE \" + \" AND \".join(filter_cond)"
    },
    {
        "line": 90,
        "fullcodeline": "filter_cond_str = \"\""
    },
    {
        "line": 82,
        "fullcodeline": "if not isinstance(keys, str):"
    },
    {
        "line": 93,
        "fullcodeline": "query = 'SELECT {} FROM {}{}{};'.format(columns, view_name, filter_cond_str, limit)"
    },
    {
        "line": 94,
        "fullcodeline": "rs = con.execute(text(query), **values)"
    },
    {
        "line": 95,
        "fullcodeline": "data = rs.fetchall()"
    },
    {
        "line": 83,
        "fullcodeline": "columns = \", \".join(keys)"
    },
    {
        "line": 85,
        "fullcodeline": "columns = \"COUNT({})\".format(keys)"
    }
]