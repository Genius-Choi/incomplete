[
    {
        "line": 5,
        "fullcodeline": "int ret = 0, remove = 0;"
    },
    {
        "line": 6,
        "fullcodeline": "char *filename_buf = NULL;"
    },
    {
        "line": 7,
        "fullcodeline": "struct lock_file lock = LOCK_INIT;"
    },
    {
        "line": 9,
        "fullcodeline": "struct strbuf buf = STRBUF_INIT;"
    },
    {
        "line": 10,
        "fullcodeline": "FILE *config_file = NULL;"
    },
    {
        "line": 12,
        "fullcodeline": "struct strbuf copystr = STRBUF_INIT;"
    },
    {
        "line": 14,
        "fullcodeline": "uint32_t line_nr = 0;"
    },
    {
        "line": 16,
        "fullcodeline": "memset(&store, 0, sizeof(store));"
    },
    {
        "line": 26,
        "fullcodeline": "out_fd = hold_lock_file_for_update(&lock, config_filename, 0);"
    },
    {
        "line": 148,
        "fullcodeline": "fclose(config_file);"
    },
    {
        "line": 149,
        "fullcodeline": "config_file = NULL;"
    },
    {
        "line": 157,
        "fullcodeline": "rollback_lock_file(&lock);"
    },
    {
        "line": 159,
        "fullcodeline": "free(filename_buf);"
    },
    {
        "line": 160,
        "fullcodeline": "config_store_data_clear(&store);"
    },
    {
        "line": 161,
        "fullcodeline": "strbuf_release(&buf);"
    },
    {
        "line": 18,
        "fullcodeline": "if (new_name && !section_name_is_ok(new_name)) {"
    },
    {
        "line": 23,
        "fullcodeline": "if (!config_filename)"
    },
    {
        "line": 27,
        "fullcodeline": "if (out_fd < 0) {"
    },
    {
        "line": 32,
        "fullcodeline": "if (!(config_file = fopen(config_filename, \"rb\"))) {"
    },
    {
        "line": 40,
        "fullcodeline": "if (fstat(fileno(config_file), &st) == -1) {"
    },
    {
        "line": 45,
        "fullcodeline": "if (chmod(get_lock_file_path(&lock), st.st_mode & 07777) < 0) {"
    },
    {
        "line": 51,
        "fullcodeline": "while (!strbuf_getwholeline(&buf, config_file, '\\n')) {"
    },
    {
        "line": 140,
        "fullcodeline": "if (copystr.len > 0) {"
    },
    {
        "line": 151,
        "fullcodeline": "if (commit_lock_file(&lock) < 0)"
    },
    {
        "line": 19,
        "fullcodeline": "ret = error(_(\"invalid section name: %s\"), new_name);"
    },
    {
        "line": 24,
        "fullcodeline": "config_filename = filename_buf = git_pathdup(\"config\");"
    },
    {
        "line": 28,
        "fullcodeline": "ret = error(_(\"could not lock config file %s\"), config_filename);"
    },
    {
        "line": 33,
        "fullcodeline": "ret = warn_on_fopen_errors(config_filename);"
    },
    {
        "line": 41,
        "fullcodeline": "ret = error_errno(_(\"fstat on %s failed\"), config_filename);"
    },
    {
        "line": 46,
        "fullcodeline": "ret = error_errno(_(\"chmod on %s failed\"),"
    },
    {
        "line": 53,
        "fullcodeline": "int is_section = 0;"
    },
    {
        "line": 54,
        "fullcodeline": "char *output = buf.buf;"
    },
    {
        "line": 56,
        "fullcodeline": "line_nr++;"
    },
    {
        "line": 123,
        "fullcodeline": "length = strlen(output);"
    },
    {
        "line": 145,
        "fullcodeline": "strbuf_reset(&copystr);"
    },
    {
        "line": 152,
        "fullcodeline": "ret = error_errno(_(\"could not write config file %s\"),"
    },
    {
        "line": 156,
        "fullcodeline": "fclose(config_file);"
    },
    {
        "line": 58,
        "fullcodeline": "if (buf.len >= GIT_CONFIG_MAX_LINE_LEN) {"
    },
    {
        "line": 65,
        "fullcodeline": "for (i = 0; buf.buf[i] && isspace(buf.buf[i]); i++)"
    },
    {
        "line": 67,
        "fullcodeline": "if (buf.buf[i] == '[') {"
    },
    {
        "line": 125,
        "fullcodeline": "if (!is_section && copystr.len > 0) {"
    },
    {
        "line": 129,
        "fullcodeline": "if (write_in_full(out_fd, output, length) < 0) {"
    },
    {
        "line": 141,
        "fullcodeline": "if (write_in_full(out_fd, copystr.buf, copystr.len) < 0) {"
    },
    {
        "line": 47,
        "fullcodeline": "get_lock_file_path(&lock));"
    },
    {
        "line": 70,
        "fullcodeline": "is_section = 1;"
    },
    {
        "line": 86,
        "fullcodeline": "offset = section_name_match(&buf.buf[i], old_name);"
    },
    {
        "line": 119,
        "fullcodeline": "remove = 0;"
    },
    {
        "line": 126,
        "fullcodeline": "strbuf_add(&copystr, output, length);"
    },
    {
        "line": 130,
        "fullcodeline": "ret = write_error(get_lock_file_path(&lock));"
    },
    {
        "line": 142,
        "fullcodeline": "ret = write_error(get_lock_file_path(&lock));"
    },
    {
        "line": 78,
        "fullcodeline": "if (copystr.len > 0) {"
    },
    {
        "line": 87,
        "fullcodeline": "if (offset > 0) {"
    },
    {
        "line": 83,
        "fullcodeline": "strbuf_reset(&copystr);"
    },
    {
        "line": 88,
        "fullcodeline": "ret++;"
    },
    {
        "line": 93,
        "fullcodeline": "store.baselen = strlen(new_name);"
    },
    {
        "line": 79,
        "fullcodeline": "if (write_in_full(out_fd, copystr.buf, copystr.len) < 0) {"
    },
    {
        "line": 89,
        "fullcodeline": "if (new_name == NULL) {"
    },
    {
        "line": 94,
        "fullcodeline": "if (!copy) {"
    },
    {
        "line": 80,
        "fullcodeline": "ret = write_error(get_lock_file_path(&lock));"
    },
    {
        "line": 90,
        "fullcodeline": "remove = 1;"
    },
    {
        "line": 104,
        "fullcodeline": "output += offset + i;"
    },
    {
        "line": 95,
        "fullcodeline": "if (write_section(out_fd, new_name, &store) < 0) {"
    },
    {
        "line": 105,
        "fullcodeline": "if (strlen(output) > 0) {"
    },
    {
        "line": 116,
        "fullcodeline": "copystr = store_create_section(new_name, &store);"
    },
    {
        "line": 96,
        "fullcodeline": "ret = write_error(get_lock_file_path(&lock));"
    },
    {
        "line": 112,
        "fullcodeline": "output -= 1;"
    },
    {
        "line": 113,
        "fullcodeline": "output[0] = '\\t';"
    }
]