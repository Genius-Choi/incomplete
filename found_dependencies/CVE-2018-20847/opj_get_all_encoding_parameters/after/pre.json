[
    {
        "line": 18,
        "fullcodeline": "const opj_tcp_t *tcp = 00;"
    },
    {
        "line": 19,
        "fullcodeline": "const opj_tccp_t * l_tccp = 00;"
    },
    {
        "line": 20,
        "fullcodeline": "const opj_image_comp_t * l_img_comp = 00;"
    },
    {
        "line": 29,
        "fullcodeline": "assert(p_cp != 00);"
    },
    {
        "line": 30,
        "fullcodeline": "assert(p_image != 00);"
    },
    {
        "line": 31,
        "fullcodeline": "assert(tileno < p_cp->tw * p_cp->th);"
    },
    {
        "line": 34,
        "fullcodeline": "tcp = &p_cp->tcps [tileno];"
    },
    {
        "line": 35,
        "fullcodeline": "l_tccp = tcp->tccps;"
    },
    {
        "line": 36,
        "fullcodeline": "l_img_comp = p_image->comps;"
    },
    {
        "line": 39,
        "fullcodeline": "p = tileno % p_cp->tw;"
    },
    {
        "line": 40,
        "fullcodeline": "q = tileno / p_cp->tw;"
    },
    {
        "line": 43,
        "fullcodeline": "*p_tx0 = (OPJ_INT32)opj_uint_max(p_cp->tx0 + p * p_cp->tdx, p_image->x0);"
    },
    {
        "line": 44,
        "fullcodeline": "*p_tx1 = (OPJ_INT32)opj_uint_min(p_cp->tx0 + (p + 1) * p_cp->tdx, p_image->x1);"
    },
    {
        "line": 45,
        "fullcodeline": "*p_ty0 = (OPJ_INT32)opj_uint_max(p_cp->ty0 + q * p_cp->tdy, p_image->y0);"
    },
    {
        "line": 46,
        "fullcodeline": "*p_ty1 = (OPJ_INT32)opj_uint_min(p_cp->ty0 + (q + 1) * p_cp->tdy, p_image->y1);"
    },
    {
        "line": 49,
        "fullcodeline": "*p_max_prec = 0;"
    },
    {
        "line": 50,
        "fullcodeline": "*p_max_res = 0;"
    },
    {
        "line": 53,
        "fullcodeline": "*p_dx_min = 0x7fffffff;"
    },
    {
        "line": 54,
        "fullcodeline": "*p_dy_min = 0x7fffffff;"
    },
    {
        "line": 56,
        "fullcodeline": "for (compno = 0; compno < p_image->numcomps; ++compno) {"
    },
    {
        "line": 65,
        "fullcodeline": "lResolutionPtr = p_resolutions[compno];"
    },
    {
        "line": 67,
        "fullcodeline": "l_tcx0 = opj_int_ceildiv(*p_tx0, (OPJ_INT32)l_img_comp->dx);"
    },
    {
        "line": 68,
        "fullcodeline": "l_tcy0 = opj_int_ceildiv(*p_ty0, (OPJ_INT32)l_img_comp->dy);"
    },
    {
        "line": 69,
        "fullcodeline": "l_tcx1 = opj_int_ceildiv(*p_tx1, (OPJ_INT32)l_img_comp->dx);"
    },
    {
        "line": 70,
        "fullcodeline": "l_tcy1 = opj_int_ceildiv(*p_ty1, (OPJ_INT32)l_img_comp->dy);"
    },
    {
        "line": 77,
        "fullcodeline": "l_level_no = l_tccp->numresolutions - 1;"
    },
    {
        "line": 114,
        "fullcodeline": "++l_tccp;"
    },
    {
        "line": 115,
        "fullcodeline": "++l_img_comp;"
    },
    {
        "line": 72,
        "fullcodeline": "if (l_tccp->numresolutions > *p_max_res) {"
    },
    {
        "line": 78,
        "fullcodeline": "for (resno = 0; resno < l_tccp->numresolutions; ++resno) {"
    },
    {
        "line": 73,
        "fullcodeline": "*p_max_res = l_tccp->numresolutions;"
    },
    {
        "line": 82,
        "fullcodeline": "l_pdx = l_tccp->prcw[resno];"
    },
    {
        "line": 83,
        "fullcodeline": "l_pdy = l_tccp->prch[resno];"
    },
    {
        "line": 86,
        "fullcodeline": "l_dx = l_img_comp->dx * (1u << (l_pdx + l_level_no));"
    },
    {
        "line": 87,
        "fullcodeline": "l_dy = l_img_comp->dy * (1u << (l_pdy + l_level_no));"
    },
    {
        "line": 89,
        "fullcodeline": "*p_dx_min = (OPJ_UINT32)opj_int_min((OPJ_INT32)*p_dx_min, (OPJ_INT32)l_dx);"
    },
    {
        "line": 90,
        "fullcodeline": "*p_dy_min = (OPJ_UINT32)opj_int_min((OPJ_INT32)*p_dy_min, (OPJ_INT32)l_dy);"
    },
    {
        "line": 93,
        "fullcodeline": "l_rx0 = opj_int_ceildivpow2(l_tcx0, (OPJ_INT32)l_level_no);"
    },
    {
        "line": 94,
        "fullcodeline": "l_ry0 = opj_int_ceildivpow2(l_tcy0, (OPJ_INT32)l_level_no);"
    },
    {
        "line": 95,
        "fullcodeline": "l_rx1 = opj_int_ceildivpow2(l_tcx1, (OPJ_INT32)l_level_no);"
    },
    {
        "line": 96,
        "fullcodeline": "l_ry1 = opj_int_ceildivpow2(l_tcy1, (OPJ_INT32)l_level_no);"
    },
    {
        "line": 97,
        "fullcodeline": "l_px0 = opj_int_floordivpow2(l_rx0, (OPJ_INT32)l_pdx) << l_pdx;"
    },
    {
        "line": 98,
        "fullcodeline": "l_py0 = opj_int_floordivpow2(l_ry0, (OPJ_INT32)l_pdy) << l_pdy;"
    },
    {
        "line": 99,
        "fullcodeline": "l_px1 = opj_int_ceildivpow2(l_rx1, (OPJ_INT32)l_pdx) << l_pdx;"
    },
    {
        "line": 100,
        "fullcodeline": "py1 = opj_int_ceildivpow2(l_ry1, (OPJ_INT32)l_pdy) << l_pdy;"
    },
    {
        "line": 101,
        "fullcodeline": "l_pw = (l_rx0==l_rx1)?0:(OPJ_UINT32)((l_px1 - l_px0) >> l_pdx);"
    },
    {
        "line": 102,
        "fullcodeline": "l_ph = (l_ry0==l_ry1)?0:(OPJ_UINT32)((py1 - l_py0) >> l_pdy);"
    },
    {
        "line": 105,
        "fullcodeline": "l_product = l_pw * l_ph;"
    },
    {
        "line": 112,
        "fullcodeline": "--l_level_no;"
    },
    {
        "line": 108,
        "fullcodeline": "if (l_product > *p_max_prec) {"
    },
    {
        "line": 84,
        "fullcodeline": "*lResolutionPtr++ = l_pdx;"
    },
    {
        "line": 85,
        "fullcodeline": "*lResolutionPtr++ = l_pdy;"
    },
    {
        "line": 103,
        "fullcodeline": "*lResolutionPtr++ = l_pw;"
    },
    {
        "line": 104,
        "fullcodeline": "*lResolutionPtr++ = l_ph;"
    },
    {
        "line": 109,
        "fullcodeline": "*p_max_prec = l_product;"
    }
]