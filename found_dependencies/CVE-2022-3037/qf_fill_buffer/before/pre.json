[
    {
        "line": 5,
        "fullcodeline": "int\t\told_KeyTyped = KeyTyped;"
    },
    {
        "line": 6,
        "fullcodeline": "list_T\t*qftf_list = NULL;"
    },
    {
        "line": 7,
        "fullcodeline": "listitem_T\t*qftf_li = NULL;"
    },
    {
        "line": 85,
        "fullcodeline": "check_lnums(TRUE);"
    },
    {
        "line": 9,
        "fullcodeline": "if (old_last == NULL)"
    },
    {
        "line": 23,
        "fullcodeline": "if (qfl != NULL)"
    },
    {
        "line": 87,
        "fullcodeline": "if (old_last == NULL)"
    },
    {
        "line": 25,
        "fullcodeline": "char_u\t\tdirname[MAXPATHL];"
    },
    {
        "line": 26,
        "fullcodeline": "int\t\tinvalid_val = FALSE;"
    },
    {
        "line": 27,
        "fullcodeline": "int\t\tprev_bufnr = -1;"
    },
    {
        "line": 29,
        "fullcodeline": "*dirname = NUL;"
    },
    {
        "line": 46,
        "fullcodeline": "qftf_list = call_qftf_func(qfl, qf_winid, (long)(lnum + 1),"
    },
    {
        "line": 92,
        "fullcodeline": "++curbuf_lock;"
    },
    {
        "line": 93,
        "fullcodeline": "set_option_value_give_err((char_u *)\"ft\","
    },
    {
        "line": 95,
        "fullcodeline": "curbuf->b_p_ma = FALSE;"
    },
    {
        "line": 98,
        "fullcodeline": "apply_autocmds(EVENT_BUFREADPOST, (char_u *)\"quickfix\", NULL,"
    },
    {
        "line": 100,
        "fullcodeline": "apply_autocmds(EVENT_BUFWINENTER, (char_u *)\"quickfix\", NULL,"
    },
    {
        "line": 106,
        "fullcodeline": "redraw_curbuf_later(UPD_NOT_VALID);"
    },
    {
        "line": 11,
        "fullcodeline": "if (buf != curbuf)"
    },
    {
        "line": 32,
        "fullcodeline": "if (old_last == NULL)"
    },
    {
        "line": 48,
        "fullcodeline": "if (qftf_list != NULL)"
    },
    {
        "line": 51,
        "fullcodeline": "while (lnum < qfl->qf_count)"
    },
    {
        "line": 79,
        "fullcodeline": "if (old_last == NULL)"
    },
    {
        "line": 13,
        "fullcodeline": "internal_error(\"qf_fill_buffer()\");"
    },
    {
        "line": 18,
        "fullcodeline": "while ((curbuf->b_ml.ml_flags & ML_EMPTY) == 0)"
    },
    {
        "line": 19,
        "fullcodeline": "(void)ml_delete((linenr_T)1);"
    },
    {
        "line": 34,
        "fullcodeline": "qfp = qfl->qf_start;"
    },
    {
        "line": 35,
        "fullcodeline": "lnum = 0;"
    },
    {
        "line": 49,
        "fullcodeline": "qftf_li = qftf_list->lv_first;"
    },
    {
        "line": 53,
        "fullcodeline": "char_u\t*qftf_str = NULL;"
    },
    {
        "line": 69,
        "fullcodeline": "prev_bufnr = qfp->qf_fnum;"
    },
    {
        "line": 70,
        "fullcodeline": "++lnum;"
    },
    {
        "line": 71,
        "fullcodeline": "qfp = qfp->qf_next;"
    },
    {
        "line": 43,
        "fullcodeline": "lnum = buf->b_ml.ml_line_count;"
    },
    {
        "line": 65,
        "fullcodeline": "if (qf_buf_add_line(buf, lnum, qfp, dirname,"
    },
    {
        "line": 72,
        "fullcodeline": "if (qfp == NULL)"
    },
    {
        "line": 75,
        "fullcodeline": "if (qftf_li != NULL)"
    },
    {
        "line": 81,
        "fullcodeline": "(void)ml_delete(lnum + 1);"
    },
    {
        "line": 39,
        "fullcodeline": "if (old_last->qf_next != NULL)"
    },
    {
        "line": 58,
        "fullcodeline": "if (qftf_li != NULL && !invalid_val)"
    },
    {
        "line": 60,
        "fullcodeline": "qftf_str = tv_get_string_chk(&qftf_li->li_tv);"
    },
    {
        "line": 76,
        "fullcodeline": "qftf_li = qftf_li->li_next;"
    },
    {
        "line": 40,
        "fullcodeline": "qfp = old_last->qf_next;"
    },
    {
        "line": 61,
        "fullcodeline": "if (qftf_str == NULL)"
    },
    {
        "line": 66,
        "fullcodeline": "prev_bufnr != qfp->qf_fnum, qftf_str) == FAIL)"
    },
    {
        "line": 42,
        "fullcodeline": "qfp = old_last;"
    },
    {
        "line": 62,
        "fullcodeline": "invalid_val = TRUE;"
    }
]