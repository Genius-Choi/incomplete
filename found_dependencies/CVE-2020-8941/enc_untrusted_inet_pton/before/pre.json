[
    {
        "line": 7,
        "fullcodeline": "input.Push<int>(TokLinuxAfFamily(af));"
    },
    {
        "line": 8,
        "fullcodeline": "input.PushByReference(Extent{"
    },
    {
        "line": 12,
        "fullcodeline": "const auto status = NonSystemCallDispatcher("
    },
    {
        "line": 14,
        "fullcodeline": "CheckStatusAndParamCount(status, output, \"enc_untrusted_inet_pton\", 3);"
    },
    {
        "line": 16,
        "fullcodeline": "int result = output.next<int>();"
    },
    {
        "line": 17,
        "fullcodeline": "int klinux_errno = output.next<int>();"
    },
    {
        "line": 23,
        "fullcodeline": "auto klinux_addr_buffer = output.next();"
    },
    {
        "line": 24,
        "fullcodeline": "size_t max_size = 0;"
    },
    {
        "line": 2,
        "fullcodeline": "if (!src || !dst) {"
    },
    {
        "line": 18,
        "fullcodeline": "if (result == -1) {"
    },
    {
        "line": 25,
        "fullcodeline": "if (af == AF_INET) {"
    },
    {
        "line": 30,
        "fullcodeline": "memcpy(dst, klinux_addr_buffer.data(),"
    },
    {
        "line": 31,
        "fullcodeline": "std::min(klinux_addr_buffer.size(), max_size));"
    },
    {
        "line": 19,
        "fullcodeline": "errno = FromkLinuxErrorNumber(klinux_errno);"
    },
    {
        "line": 26,
        "fullcodeline": "max_size = sizeof(struct in_addr);"
    },
    {
        "line": 9,
        "fullcodeline": "src, std::min(strlen(src) + 1, static_cast<size_t>(INET6_ADDRSTRLEN))});"
    },
    {
        "line": 20,
        "fullcodeline": "return -1;"
    },
    {
        "line": 27,
        "fullcodeline": "} else if (af == AF_INET6) {"
    },
    {
        "line": 28,
        "fullcodeline": "max_size = sizeof(struct in6_addr);"
    }
]