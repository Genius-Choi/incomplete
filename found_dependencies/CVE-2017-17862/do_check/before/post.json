[
    {
        "line": 7,
        "fullcodeline": "int insn_idx, prev_insn_idx = 0;"
    },
    {
        "line": 8,
        "fullcodeline": "int insn_processed = 0;"
    },
    {
        "line": 9,
        "fullcodeline": "bool do_print_state = false;"
    },
    {
        "line": 11,
        "fullcodeline": "state = kzalloc(sizeof(struct bpf_verifier_state), GFP_KERNEL);"
    },
    {
        "line": 14,
        "fullcodeline": "env->cur_state = state;"
    },
    {
        "line": 15,
        "fullcodeline": "init_reg_state(env, state->regs);"
    },
    {
        "line": 16,
        "fullcodeline": "state->parent = NULL;"
    },
    {
        "line": 17,
        "fullcodeline": "insn_idx = 0;"
    },
    {
        "line": 285,
        "fullcodeline": "verbose(env, \"processed %d insns, stack depth %d\\n\", insn_processed,"
    },
    {
        "line": 12,
        "fullcodeline": "if (!state)"
    },
    {
        "line": 29,
        "fullcodeline": "insn = &insns[insn_idx];"
    },
    {
        "line": 30,
        "fullcodeline": "class = BPF_CLASS(insn->code);"
    },
    {
        "line": 39,
        "fullcodeline": "err = is_state_visited(env, insn_idx);"
    },
    {
        "line": 73,
        "fullcodeline": "err = ext_analyzer_insn_hook(env, insn_idx, prev_insn_idx);"
    },
    {
        "line": 77,
        "fullcodeline": "regs = cur_regs(env);"
    },
    {
        "line": 282,
        "fullcodeline": "insn_idx++;"
    },
    {
        "line": 13,
        "fullcodeline": "return -ENOMEM;"
    },
    {
        "line": 23,
        "fullcodeline": "if (insn_idx >= insn_cnt) {"
    },
    {
        "line": 32,
        "fullcodeline": "if (++insn_processed > BPF_COMPLEXITY_LIMIT_INSNS) {"
    },
    {
        "line": 40,
        "fullcodeline": "if (err < 0)"
    },
    {
        "line": 42,
        "fullcodeline": "if (err == 1) {"
    },
    {
        "line": 54,
        "fullcodeline": "if (need_resched())"
    },
    {
        "line": 57,
        "fullcodeline": "if (env->log.level > 1 || (env->log.level && do_print_state)) {"
    },
    {
        "line": 78,
        "fullcodeline": "if (class == BPF_ALU || class == BPF_ALU64) {"
    },
    {
        "line": 24,
        "fullcodeline": "verbose(env, \"invalid insn idx %d insn_cnt %d\\n\","
    },
    {
        "line": 33,
        "fullcodeline": "verbose(env,"
    },
    {
        "line": 55,
        "fullcodeline": "cond_resched();"
    },
    {
        "line": 63,
        "fullcodeline": "print_verifier_state(env, state);"
    },
    {
        "line": 64,
        "fullcodeline": "do_print_state = false;"
    },
    {
        "line": 68,
        "fullcodeline": "verbose(env, \"%d: \", insn_idx);"
    },
    {
        "line": 69,
        "fullcodeline": "print_bpf_insn(verbose, env, insn,"
    },
    {
        "line": 79,
        "fullcodeline": "err = check_alu_op(env, insn);"
    },
    {
        "line": 26,
        "fullcodeline": "return -EFAULT;"
    },
    {
        "line": 36,
        "fullcodeline": "return -E2BIG;"
    },
    {
        "line": 58,
        "fullcodeline": "if (env->log.level > 1)"
    },
    {
        "line": 59,
        "fullcodeline": "verbose(env, \"%d:\", insn_idx);"
    },
    {
        "line": 83,
        "fullcodeline": "} else if (class == BPF_LDX) {"
    },
    {
        "line": 61,
        "fullcodeline": "verbose(env, \"\\nfrom %d to %d:\","
    },
    {
        "line": 89,
        "fullcodeline": "err = check_reg_arg(env, insn->src_reg, SRC_OP);"
    },
    {
        "line": 93,
        "fullcodeline": "err = check_reg_arg(env, insn->dst_reg, DST_OP_NO_MARK);"
    },
    {
        "line": 102,
        "fullcodeline": "err = check_mem_access(env, insn_idx, insn->src_reg, insn->off,"
    },
    {
        "line": 46,
        "fullcodeline": "verbose(env, \"\\nfrom %d to %d: safe\\n\","
    },
    {
        "line": 110,
        "fullcodeline": "if (*prev_src_type == NOT_INIT) {"
    },
    {
        "line": 49,
        "fullcodeline": "verbose(env, \"%d: safe\\n\", insn_idx);"
    },
    {
        "line": 103,
        "fullcodeline": "BPF_SIZE(insn->code), BPF_READ,"
    },
    {
        "line": 115,
        "fullcodeline": "*prev_src_type = src_reg_type;"
    },
    {
        "line": 131,
        "fullcodeline": "} else if (class == BPF_STX) {"
    },
    {
        "line": 143,
        "fullcodeline": "err = check_reg_arg(env, insn->src_reg, SRC_OP);"
    },
    {
        "line": 147,
        "fullcodeline": "err = check_reg_arg(env, insn->dst_reg, SRC_OP);"
    },
    {
        "line": 154,
        "fullcodeline": "err = check_mem_access(env, insn_idx, insn->dst_reg, insn->off,"
    },
    {
        "line": 117,
        "fullcodeline": "} else if (src_reg_type != *prev_src_type &&"
    },
    {
        "line": 134,
        "fullcodeline": "if (BPF_MODE(insn->code) == BPF_XADD) {"
    },
    {
        "line": 162,
        "fullcodeline": "if (*prev_dst_type == NOT_INIT) {"
    },
    {
        "line": 118,
        "fullcodeline": "(src_reg_type == PTR_TO_CTX ||"
    },
    {
        "line": 127,
        "fullcodeline": "verbose(env, \"same insn cannot be used with different pointers\\n\");"
    },
    {
        "line": 135,
        "fullcodeline": "err = check_xadd(env, insn_idx, insn);"
    },
    {
        "line": 138,
        "fullcodeline": "insn_idx++;"
    },
    {
        "line": 155,
        "fullcodeline": "BPF_SIZE(insn->code), BPF_WRITE,"
    },
    {
        "line": 163,
        "fullcodeline": "*prev_dst_type = dst_reg_type;"
    },
    {
        "line": 171,
        "fullcodeline": "} else if (class == BPF_ST) {"
    },
    {
        "line": 119,
        "fullcodeline": "*prev_src_type == PTR_TO_CTX)) {"
    },
    {
        "line": 128,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 178,
        "fullcodeline": "err = check_reg_arg(env, insn->dst_reg, SRC_OP);"
    },
    {
        "line": 183,
        "fullcodeline": "err = check_mem_access(env, insn_idx, insn->dst_reg, insn->off,"
    },
    {
        "line": 164,
        "fullcodeline": "} else if (dst_reg_type != *prev_dst_type &&"
    },
    {
        "line": 172,
        "fullcodeline": "if (BPF_MODE(insn->code) != BPF_MEM ||"
    },
    {
        "line": 165,
        "fullcodeline": "(dst_reg_type == PTR_TO_CTX ||"
    },
    {
        "line": 167,
        "fullcodeline": "verbose(env, \"same insn cannot be used with different pointers\\n\");"
    },
    {
        "line": 173,
        "fullcodeline": "insn->src_reg != BPF_REG_0) {"
    },
    {
        "line": 174,
        "fullcodeline": "verbose(env, \"BPF_ST uses reserved fields\\n\");"
    },
    {
        "line": 184,
        "fullcodeline": "BPF_SIZE(insn->code), BPF_WRITE,"
    },
    {
        "line": 185,
        "fullcodeline": "-1);"
    },
    {
        "line": 189,
        "fullcodeline": "} else if (class == BPF_JMP) {"
    },
    {
        "line": 166,
        "fullcodeline": "*prev_dst_type == PTR_TO_CTX)) {"
    },
    {
        "line": 168,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 175,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 190,
        "fullcodeline": "u8 opcode = BPF_OP(insn->code);"
    },
    {
        "line": 192,
        "fullcodeline": "if (opcode == BPF_CALL) {"
    },
    {
        "line": 201,
        "fullcodeline": "err = check_call(env, insn->imm, insn_idx);"
    },
    {
        "line": 259,
        "fullcodeline": "} else if (class == BPF_LD) {"
    },
    {
        "line": 193,
        "fullcodeline": "if (BPF_SRC(insn->code) != BPF_K ||"
    },
    {
        "line": 260,
        "fullcodeline": "u8 mode = BPF_MODE(insn->code);"
    },
    {
        "line": 196,
        "fullcodeline": "insn->dst_reg != BPF_REG_0) {"
    },
    {
        "line": 197,
        "fullcodeline": "verbose(env, \"BPF_CALL uses reserved fields\\n\");"
    },
    {
        "line": 205,
        "fullcodeline": "} else if (opcode == BPF_JA) {"
    },
    {
        "line": 262,
        "fullcodeline": "if (mode == BPF_ABS || mode == BPF_IND) {"
    },
    {
        "line": 278,
        "fullcodeline": "verbose(env, \"unknown insn class %d\\n\", class);"
    },
    {
        "line": 195,
        "fullcodeline": "insn->src_reg != BPF_REG_0 ||"
    },
    {
        "line": 198,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 214,
        "fullcodeline": "insn_idx += insn->off + 1;"
    },
    {
        "line": 263,
        "fullcodeline": "err = check_ld_abs(env, insn);"
    },
    {
        "line": 279,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 194,
        "fullcodeline": "insn->off != 0 ||"
    },
    {
        "line": 206,
        "fullcodeline": "if (BPF_SRC(insn->code) != BPF_K ||"
    },
    {
        "line": 209,
        "fullcodeline": "insn->dst_reg != BPF_REG_0) {"
    },
    {
        "line": 210,
        "fullcodeline": "verbose(env, \"BPF_JA uses reserved fields\\n\");"
    },
    {
        "line": 217,
        "fullcodeline": "} else if (opcode == BPF_EXIT) {"
    },
    {
        "line": 267,
        "fullcodeline": "} else if (mode == BPF_IMM) {"
    },
    {
        "line": 208,
        "fullcodeline": "insn->src_reg != BPF_REG_0 ||"
    },
    {
        "line": 211,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 232,
        "fullcodeline": "err = check_reg_arg(env, BPF_REG_0, SRC_OP);"
    },
    {
        "line": 241,
        "fullcodeline": "err = check_return_code(env);"
    },
    {
        "line": 245,
        "fullcodeline": "err = pop_stack(env, &prev_insn_idx, &insn_idx);"
    },
    {
        "line": 268,
        "fullcodeline": "err = check_ld_imm(env, insn);"
    },
    {
        "line": 272,
        "fullcodeline": "insn_idx++;"
    },
    {
        "line": 207,
        "fullcodeline": "insn->imm != 0 ||"
    },
    {
        "line": 218,
        "fullcodeline": "if (BPF_SRC(insn->code) != BPF_K ||"
    },
    {
        "line": 236,
        "fullcodeline": "if (is_pointer_value(env, BPF_REG_0)) {"
    },
    {
        "line": 246,
        "fullcodeline": "if (err < 0) {"
    },
    {
        "line": 255,
        "fullcodeline": "err = check_cond_jmp_op(env, insn, &insn_idx);"
    },
    {
        "line": 274,
        "fullcodeline": "verbose(env, \"invalid BPF_LD mode\\n\");"
    },
    {
        "line": 221,
        "fullcodeline": "insn->dst_reg != BPF_REG_0) {"
    },
    {
        "line": 222,
        "fullcodeline": "verbose(env, \"BPF_EXIT uses reserved fields\\n\");"
    },
    {
        "line": 237,
        "fullcodeline": "verbose(env, \"R0 leaks addr as return value\\n\");"
    },
    {
        "line": 275,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 220,
        "fullcodeline": "insn->src_reg != BPF_REG_0 ||"
    },
    {
        "line": 223,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 238,
        "fullcodeline": "return -EACCES;"
    },
    {
        "line": 247,
        "fullcodeline": "if (err != -ENOENT)"
    },
    {
        "line": 251,
        "fullcodeline": "do_print_state = true;"
    },
    {
        "line": 219,
        "fullcodeline": "insn->imm != 0 ||"
    }
]