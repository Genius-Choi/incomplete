[
    {
        "line": 10,
        "fullcodeline": "char params[MAX_QPATH];"
    },
    {
        "line": 25,
        "fullcodeline": "buildScript = qtrue;"
    },
    {
        "line": 27,
        "fullcodeline": "pScript = level.scriptAI;"
    },
    {
        "line": 28,
        "fullcodeline": "wantName = qtrue;"
    },
    {
        "line": 29,
        "fullcodeline": "inScript = qfalse;"
    },
    {
        "line": 30,
        "fullcodeline": "COM_BeginParseSession( \"AICast_ScriptParse\" );"
    },
    {
        "line": 31,
        "fullcodeline": "bracketLevel = 0;"
    },
    {
        "line": 32,
        "fullcodeline": "numEventItems = 0;"
    },
    {
        "line": 34,
        "fullcodeline": "memset( cast_temp_events, 0, sizeof( cast_temp_events ) );"
    },
    {
        "line": 21,
        "fullcodeline": "if ( !ent->aiName ) {"
    },
    {
        "line": 215,
        "fullcodeline": "if ( numEventItems > 0 ) {"
    },
    {
        "line": 38,
        "fullcodeline": "token = COM_Parse( &pScript );"
    },
    {
        "line": 216,
        "fullcodeline": "cs->castScriptEvents = G_Alloc( sizeof( cast_script_event_t ) * numEventItems );"
    },
    {
        "line": 217,
        "fullcodeline": "memcpy( cs->castScriptEvents, cast_temp_events, sizeof( cast_script_event_t ) * numEventItems );"
    },
    {
        "line": 218,
        "fullcodeline": "cs->numCastScriptEvents = numEventItems;"
    },
    {
        "line": 220,
        "fullcodeline": "cs->castScriptStatus.castScriptEventIndex = -1;"
    },
    {
        "line": 40,
        "fullcodeline": "if ( !token[0] ) {"
    },
    {
        "line": 48,
        "fullcodeline": "if ( token[0] == '}' ) {"
    },
    {
        "line": 55,
        "fullcodeline": "wantName = qtrue;"
    },
    {
        "line": 41,
        "fullcodeline": "if ( !wantName ) {"
    },
    {
        "line": 42,
        "fullcodeline": "G_Error( \"AICast_ScriptParse(), Error (line %d): '}' expected, end of script found.\\n\", COM_GetCurrentParseLine() );"
    },
    {
        "line": 53,
        "fullcodeline": "G_Error( \"AICast_ScriptParse(), Error (line %d): '}' found, but not expected.\\n\", COM_GetCurrentParseLine() );"
    },
    {
        "line": 56,
        "fullcodeline": "} else if ( token[0] == '{' )    {"
    },
    {
        "line": 58,
        "fullcodeline": "G_Error( \"AICast_ScriptParse(), Error (line %d): '{' found, NAME expected.\\n\", COM_GetCurrentParseLine() );"
    },
    {
        "line": 65,
        "fullcodeline": "wantName = qfalse;"
    },
    {
        "line": 61,
        "fullcodeline": "if ( !Q_strcasecmp( ent->aiName, token ) ) {"
    },
    {
        "line": 62,
        "fullcodeline": "inScript = qtrue;"
    },
    {
        "line": 63,
        "fullcodeline": "numEventItems = 0;"
    },
    {
        "line": 72,
        "fullcodeline": "eventNum = AICast_EventForString( token );"
    },
    {
        "line": 86,
        "fullcodeline": "curEvent->eventNum = eventNum;"
    },
    {
        "line": 87,
        "fullcodeline": "memset( params, 0, sizeof( params ) );"
    },
    {
        "line": 195,
        "fullcodeline": "numEventItems++;"
    },
    {
        "line": 67,
        "fullcodeline": "if ( !Q_strcasecmp( token, \"attributes\" ) ) {"
    },
    {
        "line": 73,
        "fullcodeline": "if ( eventNum < 0 ) {"
    },
    {
        "line": 76,
        "fullcodeline": "if ( numEventItems >= MAX_SCRIPT_EVENTS ) {"
    },
    {
        "line": 81,
        "fullcodeline": "if ( !Q_stricmp( token, \"friendlysightcorpse\" ) ) {"
    },
    {
        "line": 90,
        "fullcodeline": "while ( ( token = COM_Parse( &pScript ) ) && ( token[0] != '{' ) )"
    },
    {
        "line": 110,
        "fullcodeline": "if ( strlen( params ) ) { // copy the params into the event"
    },
    {
        "line": 116,
        "fullcodeline": "while ( ( token = COM_Parse( &pScript ) ) && ( token[0] != '}' ) )"
    },
    {
        "line": 69,
        "fullcodeline": "AICast_CheckLevelAttributes( cs, ent, &pScript );"
    },
    {
        "line": 74,
        "fullcodeline": "G_Error( \"AICast_ScriptParse(), Error (line %d): unknown event: %s.\\n\", COM_GetCurrentParseLine(), token );"
    },
    {
        "line": 77,
        "fullcodeline": "G_Error( \"AICast_ScriptParse(), Error (line %d): MAX_SCRIPT_EVENTS reached (%d)\\n\", COM_GetCurrentParseLine(), MAX_SCRIPT_EVENTS );"
    },
    {
        "line": 82,
        "fullcodeline": "cs->aiFlags &= ~AIFL_CORPSESIGHTING;"
    },
    {
        "line": 107,
        "fullcodeline": "Q_strcat( params, sizeof( params ), token );"
    },
    {
        "line": 111,
        "fullcodeline": "curEvent->params = G_Alloc( strlen( params ) + 1 );"
    },
    {
        "line": 112,
        "fullcodeline": "Q_strncpyz( curEvent->params, params, strlen( params ) + 1 );"
    },
    {
        "line": 122,
        "fullcodeline": "action = AICast_ActionForString( cs, token );"
    },
    {
        "line": 127,
        "fullcodeline": "curEvent->stack.items[curEvent->stack.numItems].action = action;"
    },
    {
        "line": 129,
        "fullcodeline": "memset( params, 0, sizeof( params ) );"
    },
    {
        "line": 130,
        "fullcodeline": "token = COM_ParseExt( &pScript, qfalse );"
    },
    {
        "line": 188,
        "fullcodeline": "curEvent->stack.numItems++;"
    },
    {
        "line": 199,
        "fullcodeline": "while ( ( token = COM_Parse( &pScript ) ) )"
    },
    {
        "line": 92,
        "fullcodeline": "if ( !token[0] ) {"
    },
    {
        "line": 96,
        "fullcodeline": "if ( eventNum == 13 ) {   // statechange event, check params"
    },
    {
        "line": 104,
        "fullcodeline": "if ( strlen( params ) ) { // add a space between each param"
    },
    {
        "line": 118,
        "fullcodeline": "if ( !token[0] ) {"
    },
    {
        "line": 123,
        "fullcodeline": "if ( !action ) {"
    },
    {
        "line": 131,
        "fullcodeline": "for ( i = 0; token[0]; i++ )"
    },
    {
        "line": 183,
        "fullcodeline": "if ( strlen( params ) ) { // copy the params into the event"
    },
    {
        "line": 190,
        "fullcodeline": "if ( curEvent->stack.numItems >= AICAST_MAX_SCRIPT_STACK_ITEMS ) {"
    },
    {
        "line": 93,
        "fullcodeline": "G_Error( \"AICast_ScriptParse(), Error (line %d): '}' expected, end of script found.\\n\", COM_GetCurrentParseLine() );"
    },
    {
        "line": 105,
        "fullcodeline": "Q_strcat( params, sizeof( params ), \" \" );"
    },
    {
        "line": 119,
        "fullcodeline": "G_Error( \"AICast_ScriptParse(), Error (line %d): '}' expected, end of script found.\\n\", COM_GetCurrentParseLine() );"
    },
    {
        "line": 124,
        "fullcodeline": "G_Error( \"AICast_ScriptParse(), Error (line %d): unknown action: %s.\\n\", COM_GetCurrentParseLine(), token );"
    },
    {
        "line": 174,
        "fullcodeline": "Q_strcat( params, sizeof( params ), token );"
    },
    {
        "line": 180,
        "fullcodeline": "token = COM_ParseExt( &pScript, qfalse );"
    },
    {
        "line": 184,
        "fullcodeline": "curEvent->stack.items[curEvent->stack.numItems].params = G_Alloc( strlen( params ) + 1 );"
    },
    {
        "line": 185,
        "fullcodeline": "Q_strncpyz( curEvent->stack.items[curEvent->stack.numItems].params, params, strlen( params ) + 1 );"
    },
    {
        "line": 191,
        "fullcodeline": "G_Error( \"AICast_ScriptParse(): script exceeded MAX_SCRIPT_ITEMS (%d), line %d\\n\", AICAST_MAX_SCRIPT_STACK_ITEMS, COM_GetCurrentParseLine() );"
    },
    {
        "line": 201,
        "fullcodeline": "if ( !token[0] ) {"
    },
    {
        "line": 97,
        "fullcodeline": "if ( strlen( token ) > 1 ) {"
    },
    {
        "line": 133,
        "fullcodeline": "if ( strlen( params ) ) { // add a space between each param"
    },
    {
        "line": 137,
        "fullcodeline": "if ( i == 0 ) {"
    },
    {
        "line": 170,
        "fullcodeline": "if ( strrchr( token,' ' ) ) { // need to wrap this param in quotes since it has more than one word"
    },
    {
        "line": 176,
        "fullcodeline": "if ( strrchr( token,' ' ) ) { // need to wrap this param in quotes since it has more than one word"
    },
    {
        "line": 202,
        "fullcodeline": "G_Error( \"AICast_ScriptParse(), Error (line %d): '}' expected, end of script found.\\n\", COM_GetCurrentParseLine() );"
    },
    {
        "line": 134,
        "fullcodeline": "Q_strcat( params, sizeof( params ), \" \" );"
    },
    {
        "line": 171,
        "fullcodeline": "Q_strcat( params, sizeof( params ), \"\\\"\" );"
    },
    {
        "line": 177,
        "fullcodeline": "Q_strcat( params, sizeof( params ), \"\\\"\" );"
    },
    {
        "line": 98,
        "fullcodeline": "if ( BG_IndexForString( token, animStateStr, qtrue ) < 0 ) {"
    },
    {
        "line": 139,
        "fullcodeline": "if ( !Q_stricmp( action->actionString, \"playsound\" ) ) {"
    },
    {
        "line": 144,
        "fullcodeline": "if (    buildScript && ("
    },
    {
        "line": 156,
        "fullcodeline": "if ( !Q_stricmp( action->actionString, \"giveweapon\" ) ) { // register weapon for client pre-loading"
    },
    {
        "line": 163,
        "fullcodeline": "if ( !Q_stricmp( action->actionString, \"changelevel\" ) ) {"
    },
    {
        "line": 203,
        "fullcodeline": "} else if ( token[0] == '{' ) {"
    },
    {
        "line": 99,
        "fullcodeline": "G_Error( \"AICast_ScriptParse(), Error (line %d): unknown state type '%s'.\\n\", COM_GetCurrentParseLine(), token );"
    },
    {
        "line": 140,
        "fullcodeline": "G_SoundIndex( token );"
    },
    {
        "line": 145,
        "fullcodeline": "!Q_stricmp( action->actionString, \"mu_start\" ) ||"
    },
    {
        "line": 157,
        "fullcodeline": "gitem_t *weap = BG_FindItem2( token );    // (SA) FIXME: rats, need to fix this for weapon names with spaces: 'mauser rifle'"
    },
    {
        "line": 159,
        "fullcodeline": "RegisterItem( weap );   // don't be nice, just do it.  if it can't find it, you'll bomb out to the error menu"
    },
    {
        "line": 164,
        "fullcodeline": "Q_strncpyz( level.nextMap, token, sizeof( level.nextMap ) );"
    },
    {
        "line": 165,
        "fullcodeline": "trap_Cvar_Set( \"nextmap\", level.nextMap );"
    },
    {
        "line": 204,
        "fullcodeline": "bracketLevel++;"
    },
    {
        "line": 149,
        "fullcodeline": "!Q_stricmp( action->actionString, \"startcamblack\" ) )"
    },
    {
        "line": 151,
        "fullcodeline": "if ( strlen( token ) ) { // we know there's a [0], but don't know if it's '0'"
    },
    {
        "line": 148,
        "fullcodeline": "!Q_stricmp( action->actionString, \"startcam\" ) ||"
    },
    {
        "line": 152,
        "fullcodeline": "trap_SendServerCommand( cs->entityNum, va( \"addToBuild %s\\n\", token ) );"
    },
    {
        "line": 205,
        "fullcodeline": "} else if ( token[0] == '}' ) {"
    },
    {
        "line": 147,
        "fullcodeline": "!Q_stricmp( action->actionString, \"mu_queue\" ) ||"
    },
    {
        "line": 146,
        "fullcodeline": "!Q_stricmp( action->actionString, \"mu_play\" ) ||"
    },
    {
        "line": 206,
        "fullcodeline": "if ( !--bracketLevel ) {"
    }
]