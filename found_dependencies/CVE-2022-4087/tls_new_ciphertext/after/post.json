[
    {
        "line": 4,
        "fullcodeline": "struct tls_cipherspec *cipherspec = &tls->rx_cipherspec;"
    },
    {
        "line": 5,
        "fullcodeline": "struct tls_cipher_suite *suite = cipherspec->suite;"
    },
    {
        "line": 6,
        "fullcodeline": "struct cipher_algorithm *cipher = suite->cipher;"
    },
    {
        "line": 7,
        "fullcodeline": "struct digest_algorithm *digest = suite->digest;"
    },
    {
        "line": 8,
        "fullcodeline": "size_t len = ntohs ( tlshdr->length );"
    },
    {
        "line": 14,
        "fullcodeline": "uint8_t verify_mac[digest->digestsize];"
    },
    {
        "line": 24,
        "fullcodeline": "assert ( ! list_empty ( rx_data ) );"
    },
    {
        "line": 34,
        "fullcodeline": "memcpy ( iv.fixed, cipherspec->fixed_iv, sizeof ( iv.fixed ) );"
    },
    {
        "line": 35,
        "fullcodeline": "memcpy ( iv.record, first->data, sizeof ( iv.record ) );"
    },
    {
        "line": 36,
        "fullcodeline": "iob_pull ( first, sizeof ( iv.record ) );"
    },
    {
        "line": 37,
        "fullcodeline": "len -= sizeof ( iv.record );"
    },
    {
        "line": 40,
        "fullcodeline": "authhdr.seq = cpu_to_be64 ( tls->rx_seq );"
    },
    {
        "line": 41,
        "fullcodeline": "authhdr.header.type = tlshdr->type;"
    },
    {
        "line": 42,
        "fullcodeline": "authhdr.header.version = tlshdr->version;"
    },
    {
        "line": 43,
        "fullcodeline": "authhdr.header.length = htons ( len );"
    },
    {
        "line": 46,
        "fullcodeline": "cipher_setiv ( cipher, cipherspec->cipher_ctx, &iv, sizeof ( iv ) );"
    },
    {
        "line": 49,
        "fullcodeline": "check_len = 0;"
    },
    {
        "line": 50,
        "fullcodeline": "list_for_each_entry ( iobuf, &tls->rx_data, list ) {"
    },
    {
        "line": 55,
        "fullcodeline": "assert ( check_len == len );"
    },
    {
        "line": 74,
        "fullcodeline": "iob_unput ( last, suite->mac_len );"
    },
    {
        "line": 75,
        "fullcodeline": "len -= suite->mac_len;"
    },
    {
        "line": 76,
        "fullcodeline": "mac = last->tail;"
    },
    {
        "line": 79,
        "fullcodeline": "DBGC2 ( tls, \"Received plaintext data:\\n\" );"
    },
    {
        "line": 80,
        "fullcodeline": "check_len = 0;"
    },
    {
        "line": 81,
        "fullcodeline": "list_for_each_entry ( iobuf, rx_data, list ) {"
    },
    {
        "line": 85,
        "fullcodeline": "assert ( check_len == len );"
    },
    {
        "line": 88,
        "fullcodeline": "authhdr.header.length = htons ( len );"
    },
    {
        "line": 29,
        "fullcodeline": "if ( iob_len ( first ) < sizeof ( iv.record ) ) {"
    },
    {
        "line": 51,
        "fullcodeline": "cipher_decrypt ( cipher, cipherspec->cipher_ctx,"
    },
    {
        "line": 53,
        "fullcodeline": "check_len += iob_len ( iobuf );"
    },
    {
        "line": 58,
        "fullcodeline": "if ( is_block_cipher ( cipher ) ) {"
    },
    {
        "line": 69,
        "fullcodeline": "if ( iob_len ( last ) < suite->mac_len ) {"
    },
    {
        "line": 82,
        "fullcodeline": "DBGC2_HD ( tls, iobuf->data, iob_len ( iobuf ) );"
    },
    {
        "line": 83,
        "fullcodeline": "check_len += iob_len ( iobuf );"
    },
    {
        "line": 93,
        "fullcodeline": "if ( memcmp ( mac, verify_mac, suite->mac_len ) != 0 ) {"
    },
    {
        "line": 99,
        "fullcodeline": "if ( ( rc = tls_new_record ( tls, tlshdr->type, rx_data ) ) != 0 )"
    },
    {
        "line": 30,
        "fullcodeline": "DBGC ( tls, \"TLS %p received underlength IV\\n\", tls );"
    },
    {
        "line": 31,
        "fullcodeline": "DBGC_HD ( tls, first->data, iob_len ( first ) );"
    },
    {
        "line": 52,
        "fullcodeline": "iobuf->data, iobuf->data, iob_len ( iobuf ) );"
    },
    {
        "line": 59,
        "fullcodeline": "pad_len = tls_verify_padding ( tls, last );"
    },
    {
        "line": 64,
        "fullcodeline": "iob_unput ( last, pad_len );"
    },
    {
        "line": 65,
        "fullcodeline": "len -= pad_len;"
    },
    {
        "line": 70,
        "fullcodeline": "DBGC ( tls, \"TLS %p received underlength MAC\\n\", tls );"
    },
    {
        "line": 71,
        "fullcodeline": "DBGC_HD ( tls, last->data, iob_len ( last ) );"
    },
    {
        "line": 90,
        "fullcodeline": "tls_hmac_list ( cipherspec, &authhdr, rx_data, verify_mac );"
    },
    {
        "line": 94,
        "fullcodeline": "DBGC ( tls, \"TLS %p failed MAC verification\\n\", tls );"
    },
    {
        "line": 32,
        "fullcodeline": "return -EINVAL_IV;"
    },
    {
        "line": 60,
        "fullcodeline": "if ( pad_len < 0 ) {"
    },
    {
        "line": 72,
        "fullcodeline": "return -EINVAL_MAC;"
    },
    {
        "line": 95,
        "fullcodeline": "return -EINVAL_MAC;"
    },
    {
        "line": 62,
        "fullcodeline": "pad_len = 0;"
    }
]