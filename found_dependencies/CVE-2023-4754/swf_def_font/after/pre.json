[
    {
        "line": 6,
        "fullcodeline": "u32 *offset_table = NULL;"
    },
    {
        "line": 9,
        "fullcodeline": "GF_SAFEALLOC(ft, SWFFont);"
    },
    {
        "line": 12,
        "fullcodeline": "ft->glyphs = gf_list_new();"
    },
    {
        "line": 13,
        "fullcodeline": "ft->fontID = swf_get_16(read);"
    },
    {
        "line": 14,
        "fullcodeline": "e = GF_OK;"
    },
    {
        "line": 15,
        "fullcodeline": "gf_list_add(read->fonts, ft);"
    },
    {
        "line": 10,
        "fullcodeline": "if (!ft) return GF_OUT_OF_MEM;"
    },
    {
        "line": 17,
        "fullcodeline": "if (revision==0) {"
    },
    {
        "line": 18,
        "fullcodeline": "start = swf_get_file_pos(read);"
    },
    {
        "line": 20,
        "fullcodeline": "count = swf_get_16(read);"
    },
    {
        "line": 21,
        "fullcodeline": "ft->nbGlyphs = count / 2;"
    },
    {
        "line": 22,
        "fullcodeline": "offset_table = (u32*)gf_malloc(sizeof(u32) * ft->nbGlyphs);"
    },
    {
        "line": 24,
        "fullcodeline": "for (i=1; i<ft->nbGlyphs; i++) offset_table[i] = swf_get_16(read);"
    },
    {
        "line": 26,
        "fullcodeline": "for (i=0; i<ft->nbGlyphs; i++) {"
    },
    {
        "line": 23,
        "fullcodeline": "if (ft->nbGlyphs) offset_table[0] = 0;"
    },
    {
        "line": 27,
        "fullcodeline": "swf_align(read);"
    },
    {
        "line": 28,
        "fullcodeline": "e = swf_seek_file_to(read, start + offset_table[i]);"
    },
    {
        "line": 30,
        "fullcodeline": "swf_parse_shape_def(read, ft, 0);"
    },
    {
        "line": 38,
        "fullcodeline": "ft->has_layout = swf_read_int(read, 1);"
    },
    {
        "line": 39,
        "fullcodeline": "ft->has_shiftJIS = swf_read_int(read, 1);"
    },
    {
        "line": 40,
        "fullcodeline": "ft->is_unicode = swf_read_int(read, 1);"
    },
    {
        "line": 41,
        "fullcodeline": "ft->is_ansi = swf_read_int(read, 1);"
    },
    {
        "line": 44,
        "fullcodeline": "ft->is_italic = swf_read_int(read, 1);"
    },
    {
        "line": 45,
        "fullcodeline": "ft->is_bold = swf_read_int(read, 1);"
    },
    {
        "line": 46,
        "fullcodeline": "swf_read_int(read, 8);"
    },
    {
        "line": 47,
        "fullcodeline": "count = swf_read_int(read, 8);"
    },
    {
        "line": 48,
        "fullcodeline": "ft->fontName = (char*)gf_malloc(sizeof(u8)*count+1);"
    },
    {
        "line": 52,
        "fullcodeline": "ft->nbGlyphs = swf_get_16(read);"
    },
    {
        "line": 53,
        "fullcodeline": "start = swf_get_file_pos(read);"
    },
    {
        "line": 42,
        "fullcodeline": "wide_offset = swf_read_int(read, 1);"
    },
    {
        "line": 43,
        "fullcodeline": "wide_codes = swf_read_int(read, 1);"
    },
    {
        "line": 50,
        "fullcodeline": "for (i=0; i<count; i++) ft->fontName[i] = swf_read_int(read, 8);"
    },
    {
        "line": 56,
        "fullcodeline": "offset_table = (u32*)gf_malloc(sizeof(u32) * ft->nbGlyphs);"
    },
    {
        "line": 64,
        "fullcodeline": "code_offset = swf_get_32(read);"
    },
    {
        "line": 80,
        "fullcodeline": "checkpos = swf_get_file_pos(read);"
    },
    {
        "line": 102,
        "fullcodeline": "count = swf_get_16(read);"
    },
    {
        "line": 57,
        "fullcodeline": "for (i=0; i<ft->nbGlyphs; i++) {"
    },
    {
        "line": 66,
        "fullcodeline": "code_offset = swf_get_16(read);"
    },
    {
        "line": 70,
        "fullcodeline": "for (i=0; i<ft->nbGlyphs; i++) {"
    },
    {
        "line": 87,
        "fullcodeline": "for (i=0; i<ft->nbGlyphs; i++) {"
    },
    {
        "line": 93,
        "fullcodeline": "ft->ascent = swf_get_s16(read);"
    },
    {
        "line": 94,
        "fullcodeline": "ft->descent = swf_get_s16(read);"
    },
    {
        "line": 95,
        "fullcodeline": "ft->leading = swf_get_s16(read);"
    },
    {
        "line": 103,
        "fullcodeline": "for (i=0; i<count; i++) {"
    },
    {
        "line": 71,
        "fullcodeline": "swf_align(read);"
    },
    {
        "line": 72,
        "fullcodeline": "e = swf_seek_file_to(read, start + offset_table[i]);"
    },
    {
        "line": 75,
        "fullcodeline": "swf_parse_shape_def(read, ft, 0);"
    },
    {
        "line": 82,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_PARSER, (\"[SWF Parsing] bad code offset in font\\n\"));"
    },
    {
        "line": 86,
        "fullcodeline": "ft->glyph_codes = (u16*)gf_malloc(sizeof(u16) * ft->nbGlyphs);"
    },
    {
        "line": 111,
        "fullcodeline": "swf_get_s16(read);"
    },
    {
        "line": 98,
        "fullcodeline": "for (i=0; i<ft->nbGlyphs; i++) ft->glyph_adv[i] = swf_get_s16(read);"
    },
    {
        "line": 99,
        "fullcodeline": "for (i=0; i<ft->nbGlyphs; i++) swf_get_rec(read, &rc);"
    },
    {
        "line": 58,
        "fullcodeline": "if (wide_offset) offset_table[i] = swf_get_32(read);"
    },
    {
        "line": 97,
        "fullcodeline": "ft->glyph_adv = (s16*)gf_malloc(sizeof(s16) * ft->nbGlyphs);"
    },
    {
        "line": 105,
        "fullcodeline": "swf_get_16(read);"
    },
    {
        "line": 106,
        "fullcodeline": "swf_get_16(read);"
    },
    {
        "line": 59,
        "fullcodeline": "else offset_table[i] = swf_get_16(read);"
    },
    {
        "line": 88,
        "fullcodeline": "if (wide_codes) ft->glyph_codes[i] = swf_get_16(read);"
    },
    {
        "line": 108,
        "fullcodeline": "swf_read_int(read, 8);"
    },
    {
        "line": 109,
        "fullcodeline": "swf_read_int(read, 8);"
    },
    {
        "line": 89,
        "fullcodeline": "else ft->glyph_codes[i] = swf_read_int(read, 8);"
    }
]