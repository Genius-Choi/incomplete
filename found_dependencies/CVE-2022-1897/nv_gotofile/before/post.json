[
    {
        "line": 4,
        "fullcodeline": "linenr_T\tlnum = -1;"
    },
    {
        "line": 22,
        "fullcodeline": "ptr = grab_file_name(cap->count1, &lnum);"
    },
    {
        "line": 6,
        "fullcodeline": "if (text_locked())"
    },
    {
        "line": 12,
        "fullcodeline": "if (curbuf_locked())"
    },
    {
        "line": 24,
        "fullcodeline": "if (ptr != NULL)"
    },
    {
        "line": 8,
        "fullcodeline": "clearopbeep(cap->oap);"
    },
    {
        "line": 9,
        "fullcodeline": "text_locked_msg();"
    },
    {
        "line": 14,
        "fullcodeline": "clearop(cap->oap);"
    },
    {
        "line": 29,
        "fullcodeline": "setpcmark();"
    },
    {
        "line": 38,
        "fullcodeline": "vim_free(ptr);"
    },
    {
        "line": 27,
        "fullcodeline": "if (curbufIsChanged() && curbuf->b_nwindows <= 1 && !buf_hide(curbuf))"
    },
    {
        "line": 30,
        "fullcodeline": "if (do_ecmd(0, ptr, NULL, NULL, ECMD_LAST,"
    },
    {
        "line": 41,
        "fullcodeline": "clearop(cap->oap);"
    },
    {
        "line": 28,
        "fullcodeline": "(void)autowrite(curbuf, FALSE);"
    },
    {
        "line": 32,
        "fullcodeline": "&& cap->nchar == 'F' && lnum >= 0)"
    },
    {
        "line": 34,
        "fullcodeline": "curwin->w_cursor.lnum = lnum;"
    },
    {
        "line": 35,
        "fullcodeline": "check_cursor_lnum();"
    },
    {
        "line": 36,
        "fullcodeline": "beginline(BL_SOL | BL_FIX);"
    },
    {
        "line": 31,
        "fullcodeline": "buf_hide(curbuf) ? ECMD_HIDE : 0, curwin) == OK"
    }
]