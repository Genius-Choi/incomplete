[
    {
        "line": 15,
        "fullcodeline": "int\t\tuse_firstwin = FALSE;\t// use first window for arglist"
    },
    {
        "line": 16,
        "fullcodeline": "int\t\ttab_drop_empty_window = FALSE;"
    },
    {
        "line": 17,
        "fullcodeline": "int\t\tsplit_ret = OK;"
    },
    {
        "line": 25,
        "fullcodeline": "win_T\t*new_curwin = NULL;"
    },
    {
        "line": 26,
        "fullcodeline": "tabpage_T\t*new_curtab = NULL;"
    },
    {
        "line": 41,
        "fullcodeline": "setpcmark();"
    },
    {
        "line": 43,
        "fullcodeline": "opened_len = ARGCOUNT;"
    },
    {
        "line": 44,
        "fullcodeline": "opened = alloc_clear(opened_len);"
    },
    {
        "line": 52,
        "fullcodeline": "++alist->al_refcount;"
    },
    {
        "line": 54,
        "fullcodeline": "old_curwin = curwin;"
    },
    {
        "line": 55,
        "fullcodeline": "old_curtab = curtab;"
    },
    {
        "line": 182,
        "fullcodeline": "++autocmd_no_enter;"
    },
    {
        "line": 183,
        "fullcodeline": "++autocmd_no_leave;"
    },
    {
        "line": 184,
        "fullcodeline": "last_curwin = curwin;"
    },
    {
        "line": 185,
        "fullcodeline": "last_curtab = curtab;"
    },
    {
        "line": 186,
        "fullcodeline": "win_enter(lastwin, FALSE);"
    },
    {
        "line": 271,
        "fullcodeline": "alist_unlink(alist);"
    },
    {
        "line": 273,
        "fullcodeline": "--autocmd_no_enter;"
    },
    {
        "line": 289,
        "fullcodeline": "--autocmd_no_leave;"
    },
    {
        "line": 290,
        "fullcodeline": "vim_free(opened);"
    },
    {
        "line": 35,
        "fullcodeline": "if (ARGCOUNT <= 0)"
    },
    {
        "line": 45,
        "fullcodeline": "if (opened == NULL)"
    },
    {
        "line": 66,
        "fullcodeline": "if (had_tab > 0)"
    },
    {
        "line": 178,
        "fullcodeline": "if (count > opened_len || count <= 0)"
    },
    {
        "line": 189,
        "fullcodeline": "if (keep_tabs && BUFEMPTY() && curbuf->b_nwindows == 1"
    },
    {
        "line": 196,
        "fullcodeline": "for (i = 0; i < count && !got_int; ++i)"
    },
    {
        "line": 276,
        "fullcodeline": "if (last_curtab != new_curtab)"
    },
    {
        "line": 284,
        "fullcodeline": "if (valid_tabpage(new_curtab))"
    },
    {
        "line": 286,
        "fullcodeline": "if (win_valid(new_curwin))"
    },
    {
        "line": 67,
        "fullcodeline": "goto_tabpage_tp(first_tabpage, TRUE, TRUE);"
    },
    {
        "line": 70,
        "fullcodeline": "tpnext = curtab->tp_next;"
    },
    {
        "line": 173,
        "fullcodeline": "goto_tabpage_tp(tpnext, TRUE, TRUE);"
    },
    {
        "line": 179,
        "fullcodeline": "count = opened_len;"
    },
    {
        "line": 192,
        "fullcodeline": "use_firstwin = TRUE;"
    },
    {
        "line": 193,
        "fullcodeline": "tab_drop_empty_window = TRUE;"
    },
    {
        "line": 263,
        "fullcodeline": "ui_breakcheck();"
    },
    {
        "line": 285,
        "fullcodeline": "goto_tabpage_tp(new_curtab, TRUE, TRUE);"
    },
    {
        "line": 287,
        "fullcodeline": "win_enter(new_curwin, FALSE);"
    },
    {
        "line": 71,
        "fullcodeline": "for (wp = firstwin; wp != NULL; wp = wpnext)"
    },
    {
        "line": 166,
        "fullcodeline": "if (had_tab == 0 || tpnext == NULL)"
    },
    {
        "line": 170,
        "fullcodeline": "if (!valid_tabpage(tpnext))"
    },
    {
        "line": 190,
        "fullcodeline": "&& curbuf->b_ffname == NULL && !curbuf->b_changed)"
    },
    {
        "line": 198,
        "fullcodeline": "if (alist == &global_alist && i == global_alist.al_ga.ga_len - 1)"
    },
    {
        "line": 200,
        "fullcodeline": "if (opened[i] > 0)"
    },
    {
        "line": 266,
        "fullcodeline": "if (had_tab > 0 && tabpage_index(NULL) <= p_tpm)"
    },
    {
        "line": 278,
        "fullcodeline": "if (valid_tabpage(last_curtab))"
    },
    {
        "line": 280,
        "fullcodeline": "if (win_valid(last_curwin))"
    },
    {
        "line": 73,
        "fullcodeline": "wpnext = wp->w_next;"
    },
    {
        "line": 74,
        "fullcodeline": "buf = wp->w_buffer;"
    },
    {
        "line": 124,
        "fullcodeline": "wp->w_arg_idx = i;"
    },
    {
        "line": 171,
        "fullcodeline": "tpnext = first_tabpage;\t// start all over..."
    },
    {
        "line": 199,
        "fullcodeline": "arg_had_last = TRUE;"
    },
    {
        "line": 267,
        "fullcodeline": "cmdmod.cmod_tab = 9999;"
    },
    {
        "line": 279,
        "fullcodeline": "goto_tabpage_tp(last_curtab, TRUE, TRUE);"
    },
    {
        "line": 281,
        "fullcodeline": "win_enter(last_curwin, FALSE);"
    },
    {
        "line": 75,
        "fullcodeline": "if (buf->b_ffname == NULL"
    },
    {
        "line": 126,
        "fullcodeline": "if (i == opened_len && !keep_tabs)// close this window"
    },
    {
        "line": 203,
        "fullcodeline": "if (curwin->w_arg_idx != i)"
    },
    {
        "line": 76,
        "fullcodeline": "|| (!keep_tabs && (buf->b_nwindows > 1"
    },
    {
        "line": 78,
        "fullcodeline": "i = opened_len;"
    },
    {
        "line": 205,
        "fullcodeline": "FOR_ALL_WINDOWS(wpnext)"
    },
    {
        "line": 228,
        "fullcodeline": "else if (split_ret == OK)"
    },
    {
        "line": 128,
        "fullcodeline": "if (buf_hide(buf) || forceit || buf->b_nwindows > 1"
    },
    {
        "line": 246,
        "fullcodeline": "curwin->w_arg_idx = i;"
    },
    {
        "line": 252,
        "fullcodeline": "(void)do_ecmd(0, alist_name(&AARGLIST(alist)[i]), NULL, NULL,"
    },
    {
        "line": 261,
        "fullcodeline": "use_firstwin = FALSE;"
    },
    {
        "line": 77,
        "fullcodeline": "|| wp->w_width != Columns)))"
    },
    {
        "line": 82,
        "fullcodeline": "for (i = 0; i < opened_len; ++i)"
    },
    {
        "line": 129,
        "fullcodeline": "|| !bufIsChanged(buf))"
    },
    {
        "line": 207,
        "fullcodeline": "if (wpnext->w_arg_idx == i)"
    },
    {
        "line": 231,
        "fullcodeline": "if (tab_drop_empty_window && i == count - 1)"
    },
    {
        "line": 233,
        "fullcodeline": "if (!use_firstwin)\t\t// split current window"
    },
    {
        "line": 247,
        "fullcodeline": "if (i == 0)"
    },
    {
        "line": 257,
        "fullcodeline": "if (tab_drop_empty_window && i == count - 1)"
    },
    {
        "line": 133,
        "fullcodeline": "if (!buf_hide(buf) && buf->b_nwindows <= 1"
    },
    {
        "line": 150,
        "fullcodeline": "if (ONE_WINDOW"
    },
    {
        "line": 232,
        "fullcodeline": "--autocmd_no_enter;"
    },
    {
        "line": 235,
        "fullcodeline": "p_ea_save = p_ea;"
    },
    {
        "line": 236,
        "fullcodeline": "p_ea = TRUE;\t\t// use space from all windows"
    },
    {
        "line": 237,
        "fullcodeline": "split_ret = win_split(0, WSP_ROOM | WSP_BELOW);"
    },
    {
        "line": 238,
        "fullcodeline": "p_ea = p_ea_save;"
    },
    {
        "line": 249,
        "fullcodeline": "new_curwin = curwin;"
    },
    {
        "line": 250,
        "fullcodeline": "new_curtab = curtab;"
    },
    {
        "line": 254,
        "fullcodeline": "((buf_hide(curwin->w_buffer)"
    },
    {
        "line": 258,
        "fullcodeline": "++autocmd_no_enter;"
    },
    {
        "line": 260,
        "fullcodeline": "++autocmd_no_leave;"
    },
    {
        "line": 84,
        "fullcodeline": "if (i < alist->al_ga.ga_len"
    },
    {
        "line": 134,
        "fullcodeline": "&& bufIsChanged(buf))"
    },
    {
        "line": 138,
        "fullcodeline": "set_bufref(&bufref, buf);"
    },
    {
        "line": 140,
        "fullcodeline": "(void)autowrite(buf, FALSE);"
    },
    {
        "line": 151,
        "fullcodeline": "&& (first_tabpage->tp_next == NULL || !had_tab))"
    },
    {
        "line": 152,
        "fullcodeline": "use_firstwin = TRUE;"
    },
    {
        "line": 239,
        "fullcodeline": "if (split_ret == FAIL)"
    },
    {
        "line": 243,
        "fullcodeline": "--autocmd_no_leave;"
    },
    {
        "line": 85,
        "fullcodeline": "&& (AARGLIST(alist)[i].ae_fnum == buf->b_fnum"
    },
    {
        "line": 89,
        "fullcodeline": "int weight = 1;"
    },
    {
        "line": 143,
        "fullcodeline": "if (!win_valid(wp) || !bufref_valid(&bufref))"
    },
    {
        "line": 155,
        "fullcodeline": "win_close(wp, !buf_hide(buf) && !bufIsChanged(buf));"
    },
    {
        "line": 211,
        "fullcodeline": "new_curwin = wpnext;"
    },
    {
        "line": 212,
        "fullcodeline": "new_curtab = curtab;"
    },
    {
        "line": 86,
        "fullcodeline": "|| fullpathcmp(alist_name(&AARGLIST(alist)[i]),"
    },
    {
        "line": 91,
        "fullcodeline": "if (old_curtab == curtab)"
    },
    {
        "line": 98,
        "fullcodeline": "if (weight > (int)opened[i])"
    },
    {
        "line": 112,
        "fullcodeline": "if (wp->w_alist != alist)"
    },
    {
        "line": 145,
        "fullcodeline": "wpnext = firstwin;\t// start all over..."
    },
    {
        "line": 158,
        "fullcodeline": "if (!win_valid(wpnext))"
    },
    {
        "line": 255,
        "fullcodeline": "|| bufIsChanged(curwin->w_buffer)) ? ECMD_HIDE : 0)"
    },
    {
        "line": 93,
        "fullcodeline": "++weight;"
    },
    {
        "line": 100,
        "fullcodeline": "opened[i] = (char_u)weight;"
    },
    {
        "line": 116,
        "fullcodeline": "alist_unlink(wp->w_alist);"
    },
    {
        "line": 117,
        "fullcodeline": "wp->w_alist = alist;"
    },
    {
        "line": 159,
        "fullcodeline": "wpnext = firstwin;\t// start all over..."
    },
    {
        "line": 94,
        "fullcodeline": "if (old_curwin == wp)"
    },
    {
        "line": 101,
        "fullcodeline": "if (i == 0)"
    },
    {
        "line": 217,
        "fullcodeline": "emsg(_(\"E249: window layout changed unexpectedly\"));"
    },
    {
        "line": 218,
        "fullcodeline": "i = count;"
    },
    {
        "line": 95,
        "fullcodeline": "++weight;"
    },
    {
        "line": 105,
        "fullcodeline": "new_curwin = wp;"
    },
    {
        "line": 106,
        "fullcodeline": "new_curtab = curtab;"
    },
    {
        "line": 222,
        "fullcodeline": "win_move_after(wpnext, curwin);"
    },
    {
        "line": 103,
        "fullcodeline": "if (new_curwin != NULL)"
    },
    {
        "line": 110,
        "fullcodeline": "i = opened_len;"
    },
    {
        "line": 104,
        "fullcodeline": "new_curwin->w_arg_idx = opened_len;"
    }
]