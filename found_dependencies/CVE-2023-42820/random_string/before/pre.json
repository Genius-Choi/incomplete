[
    {
        "line": 2,
        "fullcodeline": "args_names = ['lower', 'upper', 'digit', 'special_char']"
    },
    {
        "line": 3,
        "fullcodeline": "args_values = [lower, upper, digit, special_char]"
    },
    {
        "line": 4,
        "fullcodeline": "args_string = [string.ascii_lowercase, string.ascii_uppercase, string.digits, string_punctuation]"
    },
    {
        "line": 5,
        "fullcodeline": "args_string_map = dict(zip(args_names, args_string))"
    },
    {
        "line": 6,
        "fullcodeline": "kwargs = dict(zip(args_names, args_values))"
    },
    {
        "line": 7,
        "fullcodeline": "kwargs_keys = list(kwargs.keys())"
    },
    {
        "line": 8,
        "fullcodeline": "kwargs_values = list(kwargs.values())"
    },
    {
        "line": 9,
        "fullcodeline": "args_true_count = len([i for i in kwargs_values if i])"
    },
    {
        "line": 10,
        "fullcodeline": "assert any(kwargs_values), f'Parameters {kwargs_keys} must have at least one `True`'"
    },
    {
        "line": 11,
        "fullcodeline": "assert length >= args_true_count, f'Expected length >= {args_true_count}, bug got {length}'"
    },
    {
        "line": 13,
        "fullcodeline": "can_startswith_special_char = args_true_count == 1 and special_char"
    },
    {
        "line": 15,
        "fullcodeline": "chars = ''.join([args_string_map[k] for k, v in kwargs.items() if v])"
    },
    {
        "line": 31,
        "fullcodeline": "password = ''.join(password)"
    },
    {
        "line": 18,
        "fullcodeline": "password = list(random.choice(chars) for i in range(length))"
    },
    {
        "line": 19,
        "fullcodeline": "for k, v in kwargs.items():"
    },
    {
        "line": 20,
        "fullcodeline": "if v and not (set(password) & set(args_string_map[k])):"
    },
    {
        "line": 24,
        "fullcodeline": "if not can_startswith_special_char and password[0] in args_string_map['special_char']:"
    }
]