[
    {
        "line": 7,
        "fullcodeline": "eprosima::shared_lock<eprosima::shared_mutex> guard(mtx_);"
    },
    {
        "line": 16,
        "fullcodeline": "bool endiannessFlag = (smh->flags & BIT(0)) != 0;"
    },
    {
        "line": 17,
        "fullcodeline": "bool inlineQosFlag = (smh->flags & BIT(1)) != 0;"
    },
    {
        "line": 18,
        "fullcodeline": "bool dataFlag = (smh->flags & BIT(2)) != 0;"
    },
    {
        "line": 19,
        "fullcodeline": "bool keyFlag = (smh->flags & BIT(3)) != 0;"
    },
    {
        "line": 37,
        "fullcodeline": "msg->pos += 2;"
    },
    {
        "line": 39,
        "fullcodeline": "bool valid = true;"
    },
    {
        "line": 40,
        "fullcodeline": "int16_t octetsToInlineQos = 0;"
    },
    {
        "line": 41,
        "fullcodeline": "valid &= CDRMessage::readInt16(msg, &octetsToInlineQos); //it should be 16 in this implementation"
    },
    {
        "line": 44,
        "fullcodeline": "RTPSReader* first_reader = nullptr;"
    },
    {
        "line": 46,
        "fullcodeline": "valid &= CDRMessage::readEntityId(msg, &readerID);"
    },
    {
        "line": 57,
        "fullcodeline": "ch.kind = ALIVE;"
    },
    {
        "line": 58,
        "fullcodeline": "ch.writerGUID.guidPrefix = source_guid_prefix_;"
    },
    {
        "line": 59,
        "fullcodeline": "valid &= CDRMessage::readEntityId(msg, &ch.writerGUID.entityId);"
    },
    {
        "line": 61,
        "fullcodeline": "writerID = ch.writerGUID.entityId;"
    },
    {
        "line": 64,
        "fullcodeline": "valid &= CDRMessage::readSequenceNumber(msg, &ch.sequenceNumber);"
    },
    {
        "line": 89,
        "fullcodeline": "uint32_t inlineQosSize = 0;"
    },
    {
        "line": 163,
        "fullcodeline": "process_data_message_function_(readerID, ch, was_decoded);"
    },
    {
        "line": 165,
        "fullcodeline": "IPayloadPool* payload_pool = ch.payload_owner();"
    },
    {
        "line": 172,
        "fullcodeline": "ch.serializedPayload.data = nullptr;"
    },
    {
        "line": 173,
        "fullcodeline": "ch.inline_qos.data = nullptr;"
    },
    {
        "line": 10,
        "fullcodeline": "if (smh->submessageLength < RTPSMESSAGE_DATA_MIN_LENGTH)"
    },
    {
        "line": 20,
        "fullcodeline": "if (keyFlag && dataFlag)"
    },
    {
        "line": 49,
        "fullcodeline": "if (!willAReaderAcceptMsgDirectedTo(readerID, first_reader))"
    },
    {
        "line": 66,
        "fullcodeline": "if (!valid)"
    },
    {
        "line": 71,
        "fullcodeline": "if (ch.sequenceNumber <= SequenceNumber_t())"
    },
    {
        "line": 78,
        "fullcodeline": "if (octetsToInlineQos > RTPSMESSAGE_OCTETSTOINLINEQOS_DATASUBMSG)"
    },
    {
        "line": 105,
        "fullcodeline": "if (dataFlag || keyFlag)"
    },
    {
        "line": 29,
        "fullcodeline": "msg->msg_endian = LITTLEEND;"
    },
    {
        "line": 80,
        "fullcodeline": "msg->pos += (octetsToInlineQos - RTPSMESSAGE_OCTETSTOINLINEQOS_DATASUBMSG);"
    },
    {
        "line": 99,
        "fullcodeline": "ch.inline_qos.max_size = inlineQosSize;"
    },
    {
        "line": 100,
        "fullcodeline": "ch.inline_qos.length = inlineQosSize;"
    },
    {
        "line": 101,
        "fullcodeline": "ch.inline_qos.encapsulation = endiannessFlag ? PL_CDR_LE : PL_CDR_BE;"
    },
    {
        "line": 102,
        "fullcodeline": "ch.inline_qos.pos = 0;"
    },
    {
        "line": 108,
        "fullcodeline": "payload_size = smh->submessageLength -"
    },
    {
        "line": 156,
        "fullcodeline": "ch.sourceTimestamp = timestamp_;"
    },
    {
        "line": 168,
        "fullcodeline": "payload_pool->release_payload(ch);"
    },
    {
        "line": 33,
        "fullcodeline": "msg->msg_endian = BIGEND;"
    },
    {
        "line": 81,
        "fullcodeline": "if (msg->pos > msg->length)"
    },
    {
        "line": 93,
        "fullcodeline": "if (!ParameterList::updateCacheChangeFromInlineQos(ch, msg, inlineQosSize))"
    },
    {
        "line": 109,
        "fullcodeline": "(RTPSMESSAGE_DATA_EXTRA_INLINEQOS_SIZE + octetsToInlineQos + inlineQosSize);"
    },
    {
        "line": 113,
        "fullcodeline": "uint32_t next_pos = msg->pos + payload_size;"
    },
    {
        "line": 98,
        "fullcodeline": "ch.inline_qos.data = &msg->buffer[msg->pos - inlineQosSize];"
    },
    {
        "line": 114,
        "fullcodeline": "if (msg->length >= next_pos && payload_size > 0)"
    },
    {
        "line": 117,
        "fullcodeline": "ch.serializedPayload.length = payload_size;"
    },
    {
        "line": 118,
        "fullcodeline": "ch.serializedPayload.max_size = payload_size;"
    },
    {
        "line": 119,
        "fullcodeline": "msg->pos = next_pos;"
    },
    {
        "line": 125,
        "fullcodeline": "ch.serializedPayload.data = nullptr;"
    },
    {
        "line": 126,
        "fullcodeline": "ch.inline_qos.data = nullptr;"
    },
    {
        "line": 149,
        "fullcodeline": "msg->pos += payload_size;"
    },
    {
        "line": 132,
        "fullcodeline": "if (payload_size <= 0)"
    },
    {
        "line": 140,
        "fullcodeline": "if (payload_size <= PARAMETER_KEY_HASH_LENGTH)"
    },
    {
        "line": 135,
        "fullcodeline": "ch.serializedPayload.data = nullptr;"
    },
    {
        "line": 136,
        "fullcodeline": "ch.inline_qos.data = nullptr;"
    },
    {
        "line": 142,
        "fullcodeline": "memcpy(ch.instanceHandle.value, &msg->buffer[msg->pos], payload_size);"
    }
]