[
    {
        "line": 2,
        "fullcodeline": "if (lex->tk=='=' || lex->tk==LEX_PLUSEQUAL || lex->tk==LEX_MINUSEQUAL ||"
    },
    {
        "line": 6,
        "fullcodeline": "lex->tk==LEX_LSHIFTEQUAL || lex->tk==LEX_RSHIFTUNSIGNEDEQUAL) {"
    },
    {
        "line": 9,
        "fullcodeline": "int op = lex->tk;"
    },
    {
        "line": 10,
        "fullcodeline": "JSP_ASSERT_MATCH(op);"
    },
    {
        "line": 11,
        "fullcodeline": "rhs = jspeAssignmentExpression();"
    },
    {
        "line": 12,
        "fullcodeline": "rhs = jsvSkipNameAndUnLock(rhs); // ensure we get rid of any references on the RHS"
    },
    {
        "line": 50,
        "fullcodeline": "jsvUnLock(rhs);"
    },
    {
        "line": 14,
        "fullcodeline": "if (JSP_SHOULD_EXECUTE && lhs) {"
    },
    {
        "line": 5,
        "fullcodeline": "lex->tk==LEX_XOREQUAL || lex->tk==LEX_RSHIFTEQUAL ||"
    },
    {
        "line": 15,
        "fullcodeline": "if (op=='=') {"
    },
    {
        "line": 4,
        "fullcodeline": "lex->tk==LEX_ANDEQUAL || lex->tk==LEX_OREQUAL ||"
    },
    {
        "line": 16,
        "fullcodeline": "jspReplaceWithOrAddToRoot(lhs, rhs);"
    },
    {
        "line": 3,
        "fullcodeline": "lex->tk==LEX_MULEQUAL || lex->tk==LEX_DIVEQUAL || lex->tk==LEX_MODEQUAL ||"
    },
    {
        "line": 18,
        "fullcodeline": "if (op==LEX_PLUSEQUAL) op='+';"
    },
    {
        "line": 29,
        "fullcodeline": "if (op=='+' && jsvIsName(lhs)) {"
    },
    {
        "line": 30,
        "fullcodeline": "JsVar *currentValue = jsvSkipName(lhs);"
    },
    {
        "line": 40,
        "fullcodeline": "jsvUnLock(currentValue);"
    },
    {
        "line": 44,
        "fullcodeline": "JsVar *res = jsvMathsOpSkipNames(lhs,rhs,op);"
    },
    {
        "line": 45,
        "fullcodeline": "jspReplaceWith(lhs, res);"
    },
    {
        "line": 46,
        "fullcodeline": "jsvUnLock(res);"
    },
    {
        "line": 31,
        "fullcodeline": "if (jsvIsString(currentValue) && !jsvIsFlatString(currentValue) && jsvGetRefs(currentValue)==1 && rhs!=currentValue) {"
    },
    {
        "line": 19,
        "fullcodeline": "else if (op==LEX_MINUSEQUAL) op='-';"
    },
    {
        "line": 35,
        "fullcodeline": "JsVar *str = jsvAsString(rhs, false);"
    },
    {
        "line": 36,
        "fullcodeline": "jsvAppendStringVarComplete(currentValue, str);"
    },
    {
        "line": 37,
        "fullcodeline": "jsvUnLock(str);"
    },
    {
        "line": 38,
        "fullcodeline": "op = 0;"
    },
    {
        "line": 20,
        "fullcodeline": "else if (op==LEX_MULEQUAL) op='*';"
    },
    {
        "line": 21,
        "fullcodeline": "else if (op==LEX_DIVEQUAL) op='/';"
    },
    {
        "line": 22,
        "fullcodeline": "else if (op==LEX_MODEQUAL) op='%';"
    },
    {
        "line": 23,
        "fullcodeline": "else if (op==LEX_ANDEQUAL) op='&';"
    },
    {
        "line": 24,
        "fullcodeline": "else if (op==LEX_OREQUAL) op='|';"
    },
    {
        "line": 25,
        "fullcodeline": "else if (op==LEX_XOREQUAL) op='^';"
    },
    {
        "line": 26,
        "fullcodeline": "else if (op==LEX_RSHIFTEQUAL) op=LEX_RSHIFT;"
    },
    {
        "line": 27,
        "fullcodeline": "else if (op==LEX_LSHIFTEQUAL) op=LEX_LSHIFT;"
    },
    {
        "line": 28,
        "fullcodeline": "else if (op==LEX_RSHIFTUNSIGNEDEQUAL) op=LEX_RSHIFTUNSIGNED;"
    }
]