[
    {
        "line": 2,
        "fullcodeline": "JSP_ASSERT_MATCH(LEX_R_FOR);"
    },
    {
        "line": 3,
        "fullcodeline": "JSP_MATCH('(');"
    },
    {
        "line": 4,
        "fullcodeline": "bool wasInLoop = (execInfo.execute&EXEC_IN_LOOP)!=0;"
    },
    {
        "line": 5,
        "fullcodeline": "execInfo.execute |= EXEC_FOR_INIT;"
    },
    {
        "line": 7,
        "fullcodeline": "JsVar *forStatement = 0;"
    },
    {
        "line": 15,
        "fullcodeline": "execInfo.execute &= (JsExecFlags)~EXEC_FOR_INIT;"
    },
    {
        "line": 9,
        "fullcodeline": "if (lex->tk != ';')"
    },
    {
        "line": 11,
        "fullcodeline": "if (jspIsInterrupted()) {"
    },
    {
        "line": 16,
        "fullcodeline": "if (lex->tk == LEX_R_IN) {"
    },
    {
        "line": 10,
        "fullcodeline": "forStatement = jspeStatement();"
    },
    {
        "line": 12,
        "fullcodeline": "jsvUnLock(forStatement);"
    },
    {
        "line": 31,
        "fullcodeline": "JsVar *array = jsvSkipNameAndUnLock(jspeExpression());"
    },
    {
        "line": 33,
        "fullcodeline": "JslCharPos forBodyStart = jslCharPosClone(&lex->tokenStart);"
    },
    {
        "line": 36,
        "fullcodeline": "execInfo.execute |= EXEC_IN_LOOP;"
    },
    {
        "line": 38,
        "fullcodeline": "JslCharPos forBodyEnd = jslCharPosClone(&lex->tokenStart);"
    },
    {
        "line": 100,
        "fullcodeline": "jslSeekToP(&forBodyEnd);"
    },
    {
        "line": 19,
        "fullcodeline": "if (JSP_SHOULD_EXECUTE && !jsvIsName(forStatement)) {"
    },
    {
        "line": 25,
        "fullcodeline": "if (JSP_SHOULD_EXECUTE && !jsvGetRefs(forStatement)) {"
    },
    {
        "line": 30,
        "fullcodeline": "JSP_MATCH_WITH_CLEANUP_AND_RETURN(LEX_R_IN, jsvUnLock(forStatement), 0);"
    },
    {
        "line": 32,
        "fullcodeline": "JSP_MATCH_WITH_CLEANUP_AND_RETURN(')', jsvUnLock2(forStatement, array), 0);"
    },
    {
        "line": 39,
        "fullcodeline": "if (!wasInLoop) execInfo.execute &= (JsExecFlags)~EXEC_IN_LOOP;"
    },
    {
        "line": 112,
        "fullcodeline": "bool loopCond = true;"
    },
    {
        "line": 113,
        "fullcodeline": "bool hasHadBreak = false;"
    },
    {
        "line": 117,
        "fullcodeline": "JslCharPos forCondStart = jslCharPosClone(&lex->tokenStart);"
    },
    {
        "line": 124,
        "fullcodeline": "JslCharPos forIterStart = jslCharPosClone(&lex->tokenStart);"
    },
    {
        "line": 131,
        "fullcodeline": "JSP_MATCH_WITH_CLEANUP_AND_RETURN(')',jslCharPosFree(&forCondStart);jslCharPosFree(&forIterStart);,0);"
    },
    {
        "line": 133,
        "fullcodeline": "JslCharPos forBodyStart = jslCharPosClone(&lex->tokenStart); // actual for body"
    },
    {
        "line": 136,
        "fullcodeline": "execInfo.execute |= EXEC_IN_LOOP;"
    },
    {
        "line": 138,
        "fullcodeline": "JslCharPos forBodyEnd = jslCharPosClone(&lex->tokenStart);"
    },
    {
        "line": 185,
        "fullcodeline": "jslSeekToP(&forBodyEnd);"
    },
    {
        "line": 20,
        "fullcodeline": "jsvUnLock(forStatement);"
    },
    {
        "line": 28,
        "fullcodeline": "jsvAddName(execInfo.root, forStatement);"
    },
    {
        "line": 105,
        "fullcodeline": "jsvRemoveChild(execInfo.root, forStatement);"
    },
    {
        "line": 118,
        "fullcodeline": "if (lex->tk != ';') {"
    },
    {
        "line": 125,
        "fullcodeline": "if (lex->tk != ')')  { // we could have 'for (;;)'"
    },
    {
        "line": 135,
        "fullcodeline": "if (!loopCond) jspSetNoExecute();"
    },
    {
        "line": 139,
        "fullcodeline": "if (!wasInLoop) execInfo.execute &= (JsExecFlags)~EXEC_IN_LOOP;"
    },
    {
        "line": 140,
        "fullcodeline": "if (loopCond || !JSP_SHOULD_EXECUTE) {"
    },
    {
        "line": 148,
        "fullcodeline": "if (!loopCond) JSP_RESTORE_EXECUTE();"
    },
    {
        "line": 43,
        "fullcodeline": "if (jsvIsIterable(array)) {"
    },
    {
        "line": 119,
        "fullcodeline": "JsVar *cond = jspeAssignmentExpression(); // condition"
    },
    {
        "line": 120,
        "fullcodeline": "loopCond = JSP_SHOULD_EXECUTE && jsvGetBoolAndUnLock(jsvSkipName(cond));"
    },
    {
        "line": 150,
        "fullcodeline": "jslSeekToP(&forIterStart);"
    },
    {
        "line": 153,
        "fullcodeline": "while (!hasHadBreak && JSP_SHOULD_EXECUTE && loopCond"
    },
    {
        "line": 158,
        "fullcodeline": "jslSeekToP(&forCondStart);"
    },
    {
        "line": 44,
        "fullcodeline": "JsvIsInternalChecker checkerFunction = jsvGetInternalFunctionCheckerFor(array);"
    },
    {
        "line": 45,
        "fullcodeline": "JsVar *foundPrototype = 0;"
    },
    {
        "line": 48,
        "fullcodeline": "jsvIteratorNew(&it, array, JSIF_DEFINED_ARRAY_ElEMENTS);"
    },
    {
        "line": 49,
        "fullcodeline": "bool hasHadBreak = false;"
    },
    {
        "line": 141,
        "fullcodeline": "if (execInfo.execute & EXEC_CONTINUE)"
    },
    {
        "line": 151,
        "fullcodeline": "if (lex->tk != ')') jsvUnLock(jspeExpression());"
    },
    {
        "line": 160,
        "fullcodeline": "if (lex->tk == ';') {"
    },
    {
        "line": 167,
        "fullcodeline": "if (JSP_SHOULD_EXECUTE && loopCond) {"
    },
    {
        "line": 94,
        "fullcodeline": "assert(!foundPrototype);"
    },
    {
        "line": 142,
        "fullcodeline": "execInfo.execute = EXEC_YES;"
    },
    {
        "line": 161,
        "fullcodeline": "loopCond = true;"
    },
    {
        "line": 168,
        "fullcodeline": "jslSeekToP(&forBodyStart);"
    },
    {
        "line": 169,
        "fullcodeline": "execInfo.execute |= EXEC_IN_LOOP;"
    },
    {
        "line": 180,
        "fullcodeline": "if (JSP_SHOULD_EXECUTE && loopCond && !hasHadBreak) {"
    },
    {
        "line": 181,
        "fullcodeline": "jslSeekToP(&forIterStart);"
    },
    {
        "line": 50,
        "fullcodeline": "while (JSP_SHOULD_EXECUTE && jsvIteratorHasElement(&it) && !hasHadBreak) {"
    },
    {
        "line": 51,
        "fullcodeline": "JsVar *loopIndexVar = jsvIteratorGetKey(&it);"
    },
    {
        "line": 52,
        "fullcodeline": "bool ignore = false;"
    },
    {
        "line": 163,
        "fullcodeline": "JsVar *cond = jspeAssignmentExpression();"
    },
    {
        "line": 164,
        "fullcodeline": "loopCond = jsvGetBoolAndUnLock(jsvSkipName(cond));"
    },
    {
        "line": 173,
        "fullcodeline": "if (execInfo.execute & EXEC_CONTINUE)"
    },
    {
        "line": 182,
        "fullcodeline": "if (lex->tk != ')') jsvUnLock(jspeExpression());"
    },
    {
        "line": 87,
        "fullcodeline": "if (!jsvIteratorHasElement(&it) && foundPrototype) {"
    },
    {
        "line": 96,
        "fullcodeline": "} else if (!jsvIsUndefined(array)) {"
    },
    {
        "line": 97,
        "fullcodeline": "jsExceptionHere(JSET_ERROR, \"FOR loop can only iterate over Arrays, Strings or Objects, not %t\", array);"
    },
    {
        "line": 143,
        "fullcodeline": "else if (execInfo.execute & EXEC_BREAK) {"
    },
    {
        "line": 172,
        "fullcodeline": "if (!wasInLoop) execInfo.execute &= (JsExecFlags)~EXEC_IN_LOOP;"
    },
    {
        "line": 174,
        "fullcodeline": "execInfo.execute = EXEC_YES;"
    },
    {
        "line": 53,
        "fullcodeline": "if (checkerFunction && checkerFunction(loopIndexVar)) {"
    },
    {
        "line": 54,
        "fullcodeline": "ignore = true;"
    },
    {
        "line": 60,
        "fullcodeline": "JsVar *indexValue = jsvIsName(loopIndexVar) ?"
    },
    {
        "line": 88,
        "fullcodeline": "jsvIteratorFree(&it);"
    },
    {
        "line": 89,
        "fullcodeline": "jsvIteratorNew(&it, foundPrototype, JSIF_DEFINED_ARRAY_ElEMENTS);"
    },
    {
        "line": 91,
        "fullcodeline": "foundPrototype = 0;"
    },
    {
        "line": 144,
        "fullcodeline": "execInfo.execute = EXEC_YES;"
    },
    {
        "line": 145,
        "fullcodeline": "hasHadBreak = true;"
    },
    {
        "line": 84,
        "fullcodeline": "jsvIteratorNext(&it);"
    },
    {
        "line": 175,
        "fullcodeline": "else if (execInfo.execute & EXEC_BREAK) {"
    },
    {
        "line": 55,
        "fullcodeline": "if (jsvIsString(loopIndexVar) &&"
    },
    {
        "line": 56,
        "fullcodeline": "jsvIsStringEqual(loopIndexVar, JSPARSE_INHERITS_VAR))"
    },
    {
        "line": 57,
        "fullcodeline": "foundPrototype = jsvSkipName(loopIndexVar);"
    },
    {
        "line": 61,
        "fullcodeline": "jsvCopyNameOnly(loopIndexVar, false/*no copy children*/, false/*not a name*/) :"
    },
    {
        "line": 65,
        "fullcodeline": "jsvSetValueOfName(forStatement, indexValue);"
    },
    {
        "line": 68,
        "fullcodeline": "jsvIteratorNext(&it);"
    },
    {
        "line": 70,
        "fullcodeline": "jslSeekToP(&forBodyStart);"
    },
    {
        "line": 71,
        "fullcodeline": "execInfo.execute |= EXEC_IN_LOOP;"
    },
    {
        "line": 176,
        "fullcodeline": "execInfo.execute = EXEC_YES;"
    },
    {
        "line": 177,
        "fullcodeline": "hasHadBreak = true;"
    },
    {
        "line": 64,
        "fullcodeline": "assert(!jsvIsName(indexValue) && jsvGetRefs(indexValue)==0);"
    },
    {
        "line": 66,
        "fullcodeline": "if (indexValue!=loopIndexVar) jsvUnLock(indexValue);"
    },
    {
        "line": 76,
        "fullcodeline": "if (execInfo.execute & EXEC_CONTINUE)"
    },
    {
        "line": 74,
        "fullcodeline": "if (!wasInLoop) execInfo.execute &= (JsExecFlags)~EXEC_IN_LOOP;"
    },
    {
        "line": 77,
        "fullcodeline": "execInfo.execute = EXEC_YES;"
    },
    {
        "line": 78,
        "fullcodeline": "else if (execInfo.execute & EXEC_BREAK) {"
    },
    {
        "line": 79,
        "fullcodeline": "execInfo.execute = EXEC_YES;"
    },
    {
        "line": 80,
        "fullcodeline": "hasHadBreak = true;"
    }
]