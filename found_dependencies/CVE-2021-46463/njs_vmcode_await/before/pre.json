[
    {
        "line": 12,
        "fullcodeline": "active = &vm->active_frame->native;"
    },
    {
        "line": 14,
        "fullcodeline": "value = njs_scope_valid_value(vm, await->retval);"
    },
    {
        "line": 19,
        "fullcodeline": "njs_set_function(&ctor, &vm->constructors[NJS_OBJ_TYPE_PROMISE]);"
    },
    {
        "line": 21,
        "fullcodeline": "promise = njs_promise_resolve(vm, &ctor, value);"
    },
    {
        "line": 26,
        "fullcodeline": "ctx = active->function->await;"
    },
    {
        "line": 59,
        "fullcodeline": "ctx->pc = (u_char *) await + sizeof(njs_vmcode_await_t);"
    },
    {
        "line": 60,
        "fullcodeline": "ctx->index = await->retval;"
    },
    {
        "line": 71,
        "fullcodeline": "fulfilled->context = ctx;"
    },
    {
        "line": 72,
        "fullcodeline": "fulfilled->args_count = 1;"
    },
    {
        "line": 73,
        "fullcodeline": "fulfilled->u.native = njs_await_fulfilled;"
    },
    {
        "line": 75,
        "fullcodeline": "rejected = njs_promise_create_function(vm, 0);"
    },
    {
        "line": 80,
        "fullcodeline": "rejected->context = ctx;"
    },
    {
        "line": 81,
        "fullcodeline": "rejected->args_count = 1;"
    },
    {
        "line": 82,
        "fullcodeline": "rejected->u.native = njs_await_rejected;"
    },
    {
        "line": 84,
        "fullcodeline": "njs_set_object(&val, &promise->object);"
    },
    {
        "line": 85,
        "fullcodeline": "njs_set_function(&on_fulfilled, fulfilled);"
    },
    {
        "line": 86,
        "fullcodeline": "njs_set_function(&on_rejected, rejected);"
    },
    {
        "line": 88,
        "fullcodeline": "ret = njs_promise_perform_then(vm, &val, &on_fulfilled, &on_rejected, NULL);"
    },
    {
        "line": 15,
        "fullcodeline": "if (njs_slow_path(value == NULL)) {"
    },
    {
        "line": 28,
        "fullcodeline": "if (ctx == NULL) {"
    },
    {
        "line": 64,
        "fullcodeline": "if (frame->exception.catch != NULL) {"
    },
    {
        "line": 93,
        "fullcodeline": "(void) njs_vmcode_return(vm, NULL, &vm->retval);"
    },
    {
        "line": 22,
        "fullcodeline": "if (njs_slow_path(promise == NULL)) {"
    },
    {
        "line": 29,
        "fullcodeline": "ctx = njs_mp_alloc(vm->mem_pool, sizeof(njs_async_ctx_t));"
    },
    {
        "line": 35,
        "fullcodeline": "size = njs_function_frame_size(active);"
    },
    {
        "line": 37,
        "fullcodeline": "fulfilled = njs_promise_create_function(vm, size);"
    },
    {
        "line": 42,
        "fullcodeline": "ctx->await = fulfilled->context;"
    },
    {
        "line": 43,
        "fullcodeline": "ctx->capability = active->function->context;"
    },
    {
        "line": 47,
        "fullcodeline": "ret = njs_function_frame_save(vm, ctx->await, NULL);"
    },
    {
        "line": 76,
        "fullcodeline": "if (njs_slow_path(rejected == NULL)) {"
    },
    {
        "line": 89,
        "fullcodeline": "if (njs_slow_path(ret != NJS_OK)) {"
    },
    {
        "line": 53,
        "fullcodeline": "fulfilled = njs_promise_create_function(vm, 0);"
    },
    {
        "line": 30,
        "fullcodeline": "if (njs_slow_path(ctx == NULL)) {"
    },
    {
        "line": 38,
        "fullcodeline": "if (njs_slow_path(fulfilled == NULL)) {"
    },
    {
        "line": 48,
        "fullcodeline": "if (njs_slow_path(ret != NJS_OK)) {"
    },
    {
        "line": 54,
        "fullcodeline": "if (njs_slow_path(fulfilled == NULL)) {"
    }
]