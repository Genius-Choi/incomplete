[
    {
        "line": 3,
        "fullcodeline": "BLOSC_UNUSED_PARAM(chunk);"
    },
    {
        "line": 4,
        "fullcodeline": "ZFP_ERROR_NULL(input);"
    },
    {
        "line": 5,
        "fullcodeline": "ZFP_ERROR_NULL(output);"
    },
    {
        "line": 6,
        "fullcodeline": "ZFP_ERROR_NULL(cparams);"
    },
    {
        "line": 7,
        "fullcodeline": "ZFP_ERROR_NULL(cparams->schunk);"
    },
    {
        "line": 9,
        "fullcodeline": "double tol = (int8_t) meta;"
    },
    {
        "line": 11,
        "fullcodeline": "int64_t *shape = malloc(8 * sizeof(int64_t));"
    },
    {
        "line": 12,
        "fullcodeline": "int32_t *chunkshape = malloc(8 * sizeof(int32_t));"
    },
    {
        "line": 13,
        "fullcodeline": "int32_t *blockshape = malloc(8 * sizeof(int32_t));"
    },
    {
        "line": 23,
        "fullcodeline": "deserialize_meta(smeta, smeta_len, &ndim, shape, chunkshape, blockshape);"
    },
    {
        "line": 40,
        "fullcodeline": "double tolerance = pow(10, tol);"
    },
    {
        "line": 42,
        "fullcodeline": "int32_t typesize = cparams->typesize;"
    },
    {
        "line": 59,
        "fullcodeline": "zfp = zfp_stream_open(NULL);"
    },
    {
        "line": 60,
        "fullcodeline": "zfp_stream_set_accuracy(zfp, tolerance);"
    },
    {
        "line": 61,
        "fullcodeline": "stream = stream_open(output, output_len);"
    },
    {
        "line": 62,
        "fullcodeline": "zfp_stream_set_bit_stream(zfp, stream);"
    },
    {
        "line": 63,
        "fullcodeline": "zfp_stream_rewind(zfp);"
    },
    {
        "line": 86,
        "fullcodeline": "int zfp_maxout = (int) zfp_stream_maximum_size(zfp, field);"
    },
    {
        "line": 89,
        "fullcodeline": "uint8_t *aux_out = malloc(zfp_maxout);"
    },
    {
        "line": 90,
        "fullcodeline": "zfp_aux = zfp_stream_open(NULL);"
    },
    {
        "line": 91,
        "fullcodeline": "zfp_stream_set_accuracy(zfp_aux, tolerance);"
    },
    {
        "line": 92,
        "fullcodeline": "stream_aux = stream_open(aux_out, zfp_maxout);"
    },
    {
        "line": 93,
        "fullcodeline": "zfp_stream_set_bit_stream(zfp_aux, stream_aux);"
    },
    {
        "line": 94,
        "fullcodeline": "zfp_stream_rewind(zfp_aux);"
    },
    {
        "line": 96,
        "fullcodeline": "zfpsize = zfp_compress(zfp_aux, field);"
    },
    {
        "line": 117,
        "fullcodeline": "memcpy(output, aux_out, zfpsize);"
    },
    {
        "line": 16,
        "fullcodeline": "if (blosc2_meta_get(cparams->schunk, \"b2nd\", &smeta, &smeta_len) < 0) {"
    },
    {
        "line": 26,
        "fullcodeline": "for(int i = 0; i < ndim; i++) {"
    },
    {
        "line": 106,
        "fullcodeline": "if (zfpsize == 0) {"
    },
    {
        "line": 120,
        "fullcodeline": "return (int) zfpsize;"
    },
    {
        "line": 17,
        "fullcodeline": "free(shape);"
    },
    {
        "line": 18,
        "fullcodeline": "free(chunkshape);"
    },
    {
        "line": 19,
        "fullcodeline": "free(blockshape);"
    },
    {
        "line": 20,
        "fullcodeline": "BLOSC_TRACE_ERROR(\"b2nd layer not found!\");"
    },
    {
        "line": 45,
        "fullcodeline": "case sizeof(float):"
    },
    {
        "line": 46,
        "fullcodeline": "type = zfp_type_float;"
    },
    {
        "line": 48,
        "fullcodeline": "case sizeof(double):"
    },
    {
        "line": 49,
        "fullcodeline": "type = zfp_type_double;"
    },
    {
        "line": 67,
        "fullcodeline": "field = zfp_field_1d((void *) input, type, blockshape[0]);"
    },
    {
        "line": 70,
        "fullcodeline": "field = zfp_field_2d((void *) input, type, blockshape[1], blockshape[0]);"
    },
    {
        "line": 73,
        "fullcodeline": "field = zfp_field_3d((void *) input, type, blockshape[2], blockshape[1], blockshape[0]);"
    },
    {
        "line": 76,
        "fullcodeline": "field = zfp_field_4d((void *) input, type, blockshape[3], blockshape[2], blockshape[1], blockshape[0]);"
    },
    {
        "line": 27,
        "fullcodeline": "if (blockshape[i] < 4) {"
    },
    {
        "line": 109,
        "fullcodeline": "return (int) zfpsize;"
    }
]