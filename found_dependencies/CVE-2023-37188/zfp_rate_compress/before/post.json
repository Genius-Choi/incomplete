[
    {
        "line": 3,
        "fullcodeline": "BLOSC_UNUSED_PARAM(chunk);"
    },
    {
        "line": 4,
        "fullcodeline": "ZFP_ERROR_NULL(input);"
    },
    {
        "line": 5,
        "fullcodeline": "ZFP_ERROR_NULL(output);"
    },
    {
        "line": 6,
        "fullcodeline": "ZFP_ERROR_NULL(cparams);"
    },
    {
        "line": 8,
        "fullcodeline": "double ratio = (double) meta / 100.0;"
    },
    {
        "line": 10,
        "fullcodeline": "int64_t *shape = malloc(8 * sizeof(int64_t));"
    },
    {
        "line": 11,
        "fullcodeline": "int32_t *chunkshape = malloc(8 * sizeof(int32_t));"
    },
    {
        "line": 12,
        "fullcodeline": "int32_t *blockshape = malloc(8 * sizeof(int32_t));"
    },
    {
        "line": 22,
        "fullcodeline": "deserialize_meta(smeta, smeta_len, &ndim, shape, chunkshape, blockshape);"
    },
    {
        "line": 23,
        "fullcodeline": "free(smeta);"
    },
    {
        "line": 40,
        "fullcodeline": "int32_t typesize = cparams->typesize;"
    },
    {
        "line": 53,
        "fullcodeline": "double rate = ratio * typesize * 8;     // convert from output size / input size to output bits per input value"
    },
    {
        "line": 54,
        "fullcodeline": "uint cellsize = 1u << (2 * ndim);"
    },
    {
        "line": 70,
        "fullcodeline": "zfp = zfp_stream_open(NULL);"
    },
    {
        "line": 71,
        "fullcodeline": "stream = stream_open(output, output_len);"
    },
    {
        "line": 72,
        "fullcodeline": "zfp_stream_set_bit_stream(zfp, stream);"
    },
    {
        "line": 73,
        "fullcodeline": "zfp_stream_rewind(zfp);"
    },
    {
        "line": 96,
        "fullcodeline": "int zfp_maxout = (int) zfp_stream_maximum_size(zfp, field);"
    },
    {
        "line": 97,
        "fullcodeline": "zfp_stream_close(zfp);"
    },
    {
        "line": 98,
        "fullcodeline": "stream_close(stream);"
    },
    {
        "line": 99,
        "fullcodeline": "uint8_t *aux_out = malloc(zfp_maxout);"
    },
    {
        "line": 100,
        "fullcodeline": "zfp_aux = zfp_stream_open(NULL);"
    },
    {
        "line": 101,
        "fullcodeline": "stream_aux = stream_open(aux_out, zfp_maxout);"
    },
    {
        "line": 102,
        "fullcodeline": "zfp_stream_set_bit_stream(zfp_aux, stream_aux);"
    },
    {
        "line": 103,
        "fullcodeline": "zfp_stream_rewind(zfp_aux);"
    },
    {
        "line": 104,
        "fullcodeline": "zfp_stream_set_rate(zfp_aux, rate, type, ndim, zfp_false);"
    },
    {
        "line": 106,
        "fullcodeline": "zfpsize = zfp_compress(zfp_aux, field);"
    },
    {
        "line": 109,
        "fullcodeline": "zfp_field_free(field);"
    },
    {
        "line": 110,
        "fullcodeline": "zfp_stream_close(zfp_aux);"
    },
    {
        "line": 111,
        "fullcodeline": "stream_close(stream_aux);"
    },
    {
        "line": 112,
        "fullcodeline": "free(shape);"
    },
    {
        "line": 113,
        "fullcodeline": "free(chunkshape);"
    },
    {
        "line": 114,
        "fullcodeline": "free(blockshape);"
    },
    {
        "line": 127,
        "fullcodeline": "memcpy(output, aux_out, zfpsize);"
    },
    {
        "line": 128,
        "fullcodeline": "free(aux_out);"
    },
    {
        "line": 15,
        "fullcodeline": "if (blosc2_meta_get(cparams->schunk, \"b2nd\", &smeta, &smeta_len) < 0) {"
    },
    {
        "line": 25,
        "fullcodeline": "for(int i = 0; i < ndim; i++) {"
    },
    {
        "line": 56,
        "fullcodeline": "if (type == zfp_type_float) {"
    },
    {
        "line": 116,
        "fullcodeline": "if (zfpsize == 0) {"
    },
    {
        "line": 121,
        "fullcodeline": "if ((int32_t) zfpsize >= input_len) {"
    },
    {
        "line": 130,
        "fullcodeline": "return (int) zfpsize;"
    },
    {
        "line": 16,
        "fullcodeline": "free(shape);"
    },
    {
        "line": 17,
        "fullcodeline": "free(chunkshape);"
    },
    {
        "line": 18,
        "fullcodeline": "free(blockshape);"
    },
    {
        "line": 19,
        "fullcodeline": "BLOSC_TRACE_ERROR(\"b2nd layer not found!\");"
    },
    {
        "line": 44,
        "fullcodeline": "type = zfp_type_float;"
    },
    {
        "line": 47,
        "fullcodeline": "type = zfp_type_double;"
    },
    {
        "line": 50,
        "fullcodeline": "BLOSC_TRACE_ERROR(\"ZFP is not available for typesize: %d\", typesize);"
    },
    {
        "line": 57,
        "fullcodeline": "min_rate = (double) (1 + 8u) / cellsize;"
    },
    {
        "line": 77,
        "fullcodeline": "field = zfp_field_1d((void *) input, type, blockshape[0]);"
    },
    {
        "line": 80,
        "fullcodeline": "field = zfp_field_2d((void *) input, type, blockshape[1], blockshape[0]);"
    },
    {
        "line": 83,
        "fullcodeline": "field = zfp_field_3d((void *) input, type, blockshape[2], blockshape[1], blockshape[0]);"
    },
    {
        "line": 86,
        "fullcodeline": "field = zfp_field_4d((void *) input, type, blockshape[3], blockshape[2], blockshape[1], blockshape[0]);"
    },
    {
        "line": 89,
        "fullcodeline": "free(shape);"
    },
    {
        "line": 90,
        "fullcodeline": "free(chunkshape);"
    },
    {
        "line": 91,
        "fullcodeline": "free(blockshape);"
    },
    {
        "line": 92,
        "fullcodeline": "BLOSC_TRACE_ERROR(\"ZFP is not available for ndims: %d\", ndim);"
    },
    {
        "line": 117,
        "fullcodeline": "BLOSC_TRACE_ERROR(\"\\n ZFP: Compression failed\\n\");"
    },
    {
        "line": 118,
        "fullcodeline": "free(aux_out);"
    },
    {
        "line": 122,
        "fullcodeline": "BLOSC_TRACE_ERROR(\"\\n ZFP: Compressed data is bigger than input! \\n\");"
    },
    {
        "line": 123,
        "fullcodeline": "free(aux_out);"
    },
    {
        "line": 26,
        "fullcodeline": "if (blockshape[i] < 4) {"
    },
    {
        "line": 58,
        "fullcodeline": "if (rate < min_rate) {"
    },
    {
        "line": 64,
        "fullcodeline": "min_rate = (double) (1 + 11u) / cellsize;"
    },
    {
        "line": 119,
        "fullcodeline": "return (int) zfpsize;"
    },
    {
        "line": 27,
        "fullcodeline": "BLOSC_TRACE_ERROR(\"ZFP does not support blocks smaller than cells (4x...x4\");"
    },
    {
        "line": 59,
        "fullcodeline": "BLOSC_TRACE_ERROR(\"ZFP minimum rate for this item type is %f. Compression will be done using this one.\\n\","
    },
    {
        "line": 65,
        "fullcodeline": "if (rate < min_rate) {"
    },
    {
        "line": 66,
        "fullcodeline": "BLOSC_TRACE_ERROR(\"ZFP minimum rate for this item type is %f. Compression will be done using this one.\\n\","
    }
]