[
    {
        "line": 3,
        "fullcodeline": "RedisModuleKey *key = RedisModule_OpenKey(ctx, keystr, REDISMODULE_READ | REDISMODULE_WRITE);"
    },
    {
        "line": 4,
        "fullcodeline": "CuckooFilter *cf = NULL;"
    },
    {
        "line": 5,
        "fullcodeline": "int status = cfGetFilter(key, &cf);"
    },
    {
        "line": 7,
        "fullcodeline": "if (status == SB_EMPTY && options->autocreate) {"
    },
    {
        "line": 16,
        "fullcodeline": "if (cf->numFilters >= CFMaxExpansions) {"
    },
    {
        "line": 28,
        "fullcodeline": "for (size_t ii = 0; ii < nitems; ++ii) {"
    },
    {
        "line": 25,
        "fullcodeline": "RedisModule_ReplyWithArray(ctx, nitems);"
    },
    {
        "line": 30,
        "fullcodeline": "const char *elem = RedisModule_StringPtrLen(items[ii], &elemlen);"
    },
    {
        "line": 31,
        "fullcodeline": "CuckooHash hash = CUCKOO_GEN_HASH(elem, elemlen);"
    },
    {
        "line": 8,
        "fullcodeline": "if ((cf = cfCreate(key, options->capacity, CF_DEFAULT_BUCKETSIZE, CF_MAX_ITERATIONS,"
    },
    {
        "line": 20,
        "fullcodeline": "return RedisModule_ReplyWithError(ctx, \"Maximum expansions reached\");"
    },
    {
        "line": 12,
        "fullcodeline": "} else if (status != SB_OK) {"
    },
    {
        "line": 71,
        "fullcodeline": "RedisModule_ReplyWithError(ctx, \"Memory allocation failure\"); // LCOV_EXCL_LINE"
    },
    {
        "line": 10,
        "fullcodeline": "return RedisModule_ReplyWithError(ctx, \"Could not create filter\"); // LCOV_EXCL_LINE"
    },
    {
        "line": 34,
        "fullcodeline": "insStatus = CuckooFilter_InsertUnique(cf, hash);"
    },
    {
        "line": 40,
        "fullcodeline": "if (_is_resp3(ctx) && (!options->is_nx || !options->is_multi)) {"
    },
    {
        "line": 49,
        "fullcodeline": "if (_is_resp3(ctx) && (!options->is_nx || !options->is_multi)) {"
    },
    {
        "line": 58,
        "fullcodeline": "if (!options->is_multi) {"
    },
    {
        "line": 13,
        "fullcodeline": "return RedisModule_ReplyWithError(ctx, statusStrerror(status));"
    },
    {
        "line": 36,
        "fullcodeline": "insStatus = CuckooFilter_Insert(cf, hash);"
    },
    {
        "line": 42,
        "fullcodeline": "RedisModule_ReplyWithBool(ctx, 1);"
    },
    {
        "line": 51,
        "fullcodeline": "RedisModule_ReplyWithBool(ctx, 0);"
    },
    {
        "line": 45,
        "fullcodeline": "RedisModule_ReplyWithLongLong(ctx, 1);"
    },
    {
        "line": 54,
        "fullcodeline": "RedisModule_ReplyWithLongLong(ctx, 0);"
    },
    {
        "line": 59,
        "fullcodeline": "return RedisModule_ReplyWithError(ctx, \"Filter is full\");"
    },
    {
        "line": 61,
        "fullcodeline": "if (_is_resp3(ctx) && !options->is_nx) {"
    },
    {
        "line": 63,
        "fullcodeline": "RedisModule_ReplyWithBool(ctx, 0);"
    },
    {
        "line": 66,
        "fullcodeline": "RedisModule_ReplyWithLongLong(ctx, -1);"
    }
]