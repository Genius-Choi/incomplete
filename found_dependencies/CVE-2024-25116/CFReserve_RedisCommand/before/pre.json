[
    {
        "line": 2,
        "fullcodeline": "RedisModule_AutoMemory(ctx);"
    },
    {
        "line": 13,
        "fullcodeline": "long long maxIterations = CF_MAX_ITERATIONS;"
    },
    {
        "line": 14,
        "fullcodeline": "int mi_loc = RMUtil_ArgIndex(\"MAXITERATIONS\", argv, argc);"
    },
    {
        "line": 24,
        "fullcodeline": "long long bucketSize = CF_DEFAULT_BUCKETSIZE;"
    },
    {
        "line": 25,
        "fullcodeline": "int bs_loc = RMUtil_ArgIndex(\"BUCKETSIZE\", argv, argc);"
    },
    {
        "line": 35,
        "fullcodeline": "long long expansion = CF_DEFAULT_EXPANSION;"
    },
    {
        "line": 36,
        "fullcodeline": "int ex_loc = RMUtil_ArgIndex(\"EXPANSION\", argv, argc);"
    },
    {
        "line": 51,
        "fullcodeline": "RedisModuleKey *key = RedisModule_OpenKey(ctx, argv[1], REDISMODULE_READ | REDISMODULE_WRITE);"
    },
    {
        "line": 52,
        "fullcodeline": "int status = cfGetFilter(key, &cf);"
    },
    {
        "line": 57,
        "fullcodeline": "cf = cfCreate(key, capacity, bucketSize, maxIterations, expansion);"
    },
    {
        "line": 4,
        "fullcodeline": "if (argc < 3 || (argc % 2) == 0) {"
    },
    {
        "line": 9,
        "fullcodeline": "if (RedisModule_StringToLongLong(argv[2], &capacity)) {"
    },
    {
        "line": 15,
        "fullcodeline": "if (mi_loc != -1) {"
    },
    {
        "line": 26,
        "fullcodeline": "if (bs_loc != -1) {"
    },
    {
        "line": 37,
        "fullcodeline": "if (ex_loc != -1) {"
    },
    {
        "line": 46,
        "fullcodeline": "if (bucketSize * 2 > capacity) {"
    },
    {
        "line": 53,
        "fullcodeline": "if (status != SB_EMPTY) {"
    },
    {
        "line": 58,
        "fullcodeline": "if (cf == NULL) {"
    },
    {
        "line": 5,
        "fullcodeline": "return RedisModule_WrongArity(ctx);"
    },
    {
        "line": 10,
        "fullcodeline": "return RedisModule_ReplyWithError(ctx, \"Bad capacity\");"
    },
    {
        "line": 16,
        "fullcodeline": "if (RedisModule_StringToLongLong(argv[mi_loc + 1], &maxIterations) != REDISMODULE_OK) {"
    },
    {
        "line": 27,
        "fullcodeline": "if (RedisModule_StringToLongLong(argv[bs_loc + 1], &bucketSize) != REDISMODULE_OK) {"
    },
    {
        "line": 47,
        "fullcodeline": "return RedisModule_ReplyWithError(ctx, \"Capacity must be at least (BucketSize * 2)\");"
    },
    {
        "line": 54,
        "fullcodeline": "return RedisModule_ReplyWithError(ctx, statusStrerror(status));"
    },
    {
        "line": 59,
        "fullcodeline": "return RedisModule_ReplyWithError(ctx, \"Couldn't create Cuckoo Filter\"); // LCOV_EXCL_LINE"
    },
    {
        "line": 61,
        "fullcodeline": "RedisModule_ReplicateVerbatim(ctx);"
    },
    {
        "line": 38,
        "fullcodeline": "if (RedisModule_StringToLongLong(argv[ex_loc + 1], &expansion) != REDISMODULE_OK) {"
    },
    {
        "line": 62,
        "fullcodeline": "return RedisModule_ReplyWithSimpleString(ctx, \"OK\");"
    },
    {
        "line": 17,
        "fullcodeline": "return RedisModule_ReplyWithError(ctx, \"Couldn't parse MAXITERATIONS\");"
    },
    {
        "line": 28,
        "fullcodeline": "return RedisModule_ReplyWithError(ctx, \"Couldn't parse BUCKETSIZE\");"
    },
    {
        "line": 39,
        "fullcodeline": "return RedisModule_ReplyWithError(ctx, \"Couldn't parse EXPANSION\");"
    },
    {
        "line": 18,
        "fullcodeline": "} else if (maxIterations <= 0) {"
    },
    {
        "line": 29,
        "fullcodeline": "} else if (bucketSize <= 0) {"
    },
    {
        "line": 40,
        "fullcodeline": "} else if (expansion < 0) {"
    },
    {
        "line": 19,
        "fullcodeline": "return RedisModule_ReplyWithError("
    },
    {
        "line": 30,
        "fullcodeline": "return RedisModule_ReplyWithError("
    },
    {
        "line": 41,
        "fullcodeline": "return RedisModule_ReplyWithError("
    }
]