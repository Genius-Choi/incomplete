[
    {
        "line": 47,
        "fullcodeline": "assert(image_info != (const ImageInfo *) NULL);"
    },
    {
        "line": 48,
        "fullcodeline": "assert(image_info->signature == MagickCoreSignature);"
    },
    {
        "line": 49,
        "fullcodeline": "assert(image != (Image *) NULL);"
    },
    {
        "line": 50,
        "fullcodeline": "assert(image->signature == MagickCoreSignature);"
    },
    {
        "line": 53,
        "fullcodeline": "assert(exception != (ExceptionInfo *) NULL);"
    },
    {
        "line": 54,
        "fullcodeline": "assert(exception->signature == MagickCoreSignature);"
    },
    {
        "line": 55,
        "fullcodeline": "status=OpenBlob(image_info,image,WriteBinaryBlobMode,exception);"
    },
    {
        "line": 58,
        "fullcodeline": "type=4;"
    },
    {
        "line": 65,
        "fullcodeline": "option=GetImageOption(image_info,\"bmp:format\");"
    },
    {
        "line": 79,
        "fullcodeline": "scene=0;"
    },
    {
        "line": 51,
        "fullcodeline": "if (image->debug != MagickFalse)"
    },
    {
        "line": 56,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 66,
        "fullcodeline": "if (option != (char *) NULL)"
    },
    {
        "line": 648,
        "fullcodeline": "} while (image_info->adjoin != MagickFalse);"
    },
    {
        "line": 649,
        "fullcodeline": "(void) CloseBlob(image);"
    },
    {
        "line": 52,
        "fullcodeline": "(void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",image->filename);"
    },
    {
        "line": 59,
        "fullcodeline": "if (LocaleCompare(image_info->magick,\"BMP2\") == 0)"
    },
    {
        "line": 60,
        "fullcodeline": "type=2;"
    },
    {
        "line": 87,
        "fullcodeline": "bmp_info.file_size=14+12;"
    },
    {
        "line": 90,
        "fullcodeline": "bmp_info.offset_bits=bmp_info.file_size;"
    },
    {
        "line": 91,
        "fullcodeline": "bmp_info.compression=BI_RGB;"
    },
    {
        "line": 144,
        "fullcodeline": "bytes_per_line=4*((image->columns*bmp_info.bits_per_pixel+31)/32);"
    },
    {
        "line": 145,
        "fullcodeline": "bmp_info.ba_offset=0;"
    },
    {
        "line": 146,
        "fullcodeline": "profile=GetImageProfile(image,\"icc\");"
    },
    {
        "line": 147,
        "fullcodeline": "have_color_info=(image->rendering_intent != UndefinedIntent) ||"
    },
    {
        "line": 178,
        "fullcodeline": "bmp_info.width=(ssize_t) image->columns;"
    },
    {
        "line": 179,
        "fullcodeline": "bmp_info.height=(ssize_t) image->rows;"
    },
    {
        "line": 180,
        "fullcodeline": "bmp_info.planes=1;"
    },
    {
        "line": 181,
        "fullcodeline": "bmp_info.image_size=(unsigned long) (bytes_per_line*image->rows);"
    },
    {
        "line": 182,
        "fullcodeline": "bmp_info.file_size+=bmp_info.image_size;"
    },
    {
        "line": 183,
        "fullcodeline": "bmp_info.x_pixels=75*39;"
    },
    {
        "line": 184,
        "fullcodeline": "bmp_info.y_pixels=75*39;"
    },
    {
        "line": 201,
        "fullcodeline": "bmp_info.colors_important=bmp_info.number_colors;"
    },
    {
        "line": 205,
        "fullcodeline": "pixel_info=AcquireVirtualMemory((size_t) bmp_info.image_size,"
    },
    {
        "line": 209,
        "fullcodeline": "pixels=(unsigned char *) GetVirtualMemoryBlob(pixel_info);"
    },
    {
        "line": 643,
        "fullcodeline": "image=SyncNextImageInList(image);"
    },
    {
        "line": 644,
        "fullcodeline": "status=SetImageProgress(image,SaveImagesTag,scene++,"
    },
    {
        "line": 68,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 85,
        "fullcodeline": "(void) TransformImageColorspace(image,sRGBColorspace,exception);"
    },
    {
        "line": 86,
        "fullcodeline": "(void) ResetMagickMemory(&bmp_info,0,sizeof(bmp_info));"
    },
    {
        "line": 88,
        "fullcodeline": "if (type > 2)"
    },
    {
        "line": 94,
        "fullcodeline": "if (image->storage_class != DirectClass)"
    },
    {
        "line": 127,
        "fullcodeline": "if (image->storage_class == DirectClass)"
    },
    {
        "line": 150,
        "fullcodeline": "if (type == 2)"
    },
    {
        "line": 207,
        "fullcodeline": "if (pixel_info == (MemoryInfo *) NULL)"
    },
    {
        "line": 210,
        "fullcodeline": "(void) ResetMagickMemory(pixels,0,(size_t) bmp_info.image_size);"
    },
    {
        "line": 432,
        "fullcodeline": "if (image->debug != MagickFalse)"
    },
    {
        "line": 486,
        "fullcodeline": "(void) WriteBlob(image,2,(unsigned char *) \"BM\");"
    },
    {
        "line": 487,
        "fullcodeline": "(void) WriteBlobLSBLong(image,bmp_info.file_size);"
    },
    {
        "line": 488,
        "fullcodeline": "(void) WriteBlobLSBLong(image,bmp_info.ba_offset);  /* always 0 */"
    },
    {
        "line": 489,
        "fullcodeline": "(void) WriteBlobLSBLong(image,bmp_info.offset_bits);"
    },
    {
        "line": 490,
        "fullcodeline": "if (type == 2)"
    },
    {
        "line": 596,
        "fullcodeline": "if (image->storage_class == PseudoClass)"
    },
    {
        "line": 636,
        "fullcodeline": "if (image->debug != MagickFalse)"
    },
    {
        "line": 639,
        "fullcodeline": "(void) WriteBlob(image,(size_t) bmp_info.image_size,pixels);"
    },
    {
        "line": 640,
        "fullcodeline": "pixel_info=RelinquishVirtualMemory(pixel_info);"
    },
    {
        "line": 646,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 71,
        "fullcodeline": "if (LocaleCompare(option,\"bmp2\") == 0)"
    },
    {
        "line": 72,
        "fullcodeline": "type=2;"
    },
    {
        "line": 73,
        "fullcodeline": "if (LocaleCompare(option,\"bmp3\") == 0)"
    },
    {
        "line": 74,
        "fullcodeline": "type=3;"
    },
    {
        "line": 75,
        "fullcodeline": "if (LocaleCompare(option,\"bmp4\") == 0)"
    },
    {
        "line": 76,
        "fullcodeline": "type=4;"
    },
    {
        "line": 89,
        "fullcodeline": "bmp_info.file_size+=28;"
    },
    {
        "line": 92,
        "fullcodeline": "if ((image->storage_class == PseudoClass) && (image->colors > 256))"
    },
    {
        "line": 99,
        "fullcodeline": "bmp_info.bits_per_pixel=8;"
    },
    {
        "line": 110,
        "fullcodeline": "bmp_info.number_colors=1U << bmp_info.bits_per_pixel;"
    },
    {
        "line": 132,
        "fullcodeline": "bmp_info.number_colors=0;"
    },
    {
        "line": 133,
        "fullcodeline": "bmp_info.bits_per_pixel=(unsigned short)"
    },
    {
        "line": 135,
        "fullcodeline": "bmp_info.compression=(unsigned int) ((type > 3) &&"
    },
    {
        "line": 151,
        "fullcodeline": "bmp_info.size=12;"
    },
    {
        "line": 175,
        "fullcodeline": "if ((image->columns != (signed int) image->columns) ||"
    },
    {
        "line": 176,
        "fullcodeline": "(image->rows != (signed int) image->rows))"
    },
    {
        "line": 177,
        "fullcodeline": "ThrowWriterException(ImageError,\"WidthOrHeightExceedsLimit\");"
    },
    {
        "line": 208,
        "fullcodeline": "ThrowWriterException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 403,
        "fullcodeline": "if ((type > 2) && (bmp_info.bits_per_pixel == 8))"
    },
    {
        "line": 518,
        "fullcodeline": "if ((type > 3) && ((image->alpha_trait != UndefinedPixelTrait) ||"
    },
    {
        "line": 607,
        "fullcodeline": "bmp_colormap=(unsigned char *) AcquireQuantumMemory((size_t) (1UL <<"
    },
    {
        "line": 611,
        "fullcodeline": "q=bmp_colormap;"
    },
    {
        "line": 641,
        "fullcodeline": "if (GetNextImageInList(image) == (Image *) NULL)"
    },
    {
        "line": 645,
        "fullcodeline": "GetImageListLength(image));"
    },
    {
        "line": 62,
        "fullcodeline": "if (LocaleCompare(image_info->magick,\"BMP3\") == 0)"
    },
    {
        "line": 63,
        "fullcodeline": "type=3;"
    },
    {
        "line": 93,
        "fullcodeline": "(void) SetImageStorageClass(image,DirectClass,exception);"
    },
    {
        "line": 100,
        "fullcodeline": "if (image->colors <= 2)"
    },
    {
        "line": 108,
        "fullcodeline": "if (image_info->compression == RLECompression)"
    },
    {
        "line": 111,
        "fullcodeline": "if (image->alpha_trait != UndefinedPixelTrait)"
    },
    {
        "line": 137,
        "fullcodeline": "if ((type == 3) && (image->alpha_trait != UndefinedPixelTrait))"
    },
    {
        "line": 148,
        "fullcodeline": "(profile != (StringInfo *) NULL) || (image->gamma != 0.0) ?  MagickTrue :"
    },
    {
        "line": 190,
        "fullcodeline": "bmp_info.x_pixels=(unsigned int) (100.0*image->resolution.x/2.54);"
    },
    {
        "line": 191,
        "fullcodeline": "bmp_info.y_pixels=(unsigned int) (100.0*image->resolution.y/2.54);"
    },
    {
        "line": 196,
        "fullcodeline": "bmp_info.x_pixels=(unsigned int) (100.0*image->resolution.x);"
    },
    {
        "line": 197,
        "fullcodeline": "bmp_info.y_pixels=(unsigned int) (100.0*image->resolution.y);"
    },
    {
        "line": 404,
        "fullcodeline": "if (image_info->compression != NoCompression)"
    },
    {
        "line": 434,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 436,
        "fullcodeline": "if (image->storage_class == DirectClass)"
    },
    {
        "line": 442,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 444,
        "fullcodeline": "if (image->alpha_trait != UndefinedPixelTrait)"
    },
    {
        "line": 450,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 479,
        "fullcodeline": "if (bmp_info.number_colors == 0)"
    },
    {
        "line": 495,
        "fullcodeline": "(void) WriteBlobLSBLong(image,bmp_info.size);"
    },
    {
        "line": 496,
        "fullcodeline": "(void) WriteBlobLSBSignedShort(image,(signed short) bmp_info.width);"
    },
    {
        "line": 497,
        "fullcodeline": "(void) WriteBlobLSBSignedShort(image,(signed short) bmp_info.height);"
    },
    {
        "line": 498,
        "fullcodeline": "(void) WriteBlobLSBShort(image,bmp_info.planes);"
    },
    {
        "line": 499,
        "fullcodeline": "(void) WriteBlobLSBShort(image,bmp_info.bits_per_pixel);"
    },
    {
        "line": 519,
        "fullcodeline": "(have_color_info != MagickFalse)))"
    },
    {
        "line": 524,
        "fullcodeline": "(void) WriteBlobLSBLong(image,0x00ff0000U);  /* Red mask */"
    },
    {
        "line": 525,
        "fullcodeline": "(void) WriteBlobLSBLong(image,0x0000ff00U);  /* Green mask */"
    },
    {
        "line": 526,
        "fullcodeline": "(void) WriteBlobLSBLong(image,0x000000ffU);  /* Blue mask */"
    },
    {
        "line": 527,
        "fullcodeline": "(void) WriteBlobLSBLong(image,0xff000000U);  /* Alpha mask */"
    },
    {
        "line": 528,
        "fullcodeline": "(void) WriteBlobLSBLong(image,0x73524742U);  /* sRGB */"
    },
    {
        "line": 529,
        "fullcodeline": "(void) WriteBlobLSBLong(image,(unsigned int)"
    },
    {
        "line": 531,
        "fullcodeline": "(void) WriteBlobLSBLong(image,(unsigned int)"
    },
    {
        "line": 533,
        "fullcodeline": "(void) WriteBlobLSBLong(image,(unsigned int)"
    },
    {
        "line": 536,
        "fullcodeline": "(void) WriteBlobLSBLong(image,(unsigned int)"
    },
    {
        "line": 538,
        "fullcodeline": "(void) WriteBlobLSBLong(image,(unsigned int)"
    },
    {
        "line": 540,
        "fullcodeline": "(void) WriteBlobLSBLong(image,(unsigned int)"
    },
    {
        "line": 543,
        "fullcodeline": "(void) WriteBlobLSBLong(image,(unsigned int)"
    },
    {
        "line": 545,
        "fullcodeline": "(void) WriteBlobLSBLong(image,(unsigned int)"
    },
    {
        "line": 547,
        "fullcodeline": "(void) WriteBlobLSBLong(image,(unsigned int)"
    },
    {
        "line": 550,
        "fullcodeline": "(void) WriteBlobLSBLong(image,(unsigned int)"
    },
    {
        "line": 552,
        "fullcodeline": "(void) WriteBlobLSBLong(image,(unsigned int)"
    },
    {
        "line": 554,
        "fullcodeline": "(void) WriteBlobLSBLong(image,(unsigned int)"
    },
    {
        "line": 556,
        "fullcodeline": "if ((image->rendering_intent != UndefinedIntent) ||"
    },
    {
        "line": 604,
        "fullcodeline": "if (image->debug != MagickFalse)"
    },
    {
        "line": 609,
        "fullcodeline": "if (bmp_colormap == (unsigned char *) NULL)"
    },
    {
        "line": 612,
        "fullcodeline": "for (i=0; i < (ssize_t) MagickMin((ssize_t) image->colors,(ssize_t) bmp_info.number_colors); i++)"
    },
    {
        "line": 620,
        "fullcodeline": "for ( ; i < (ssize_t) (1UL << bmp_info.bits_per_pixel); i++)"
    },
    {
        "line": 628,
        "fullcodeline": "if (type <= 2)"
    },
    {
        "line": 637,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 101,
        "fullcodeline": "bmp_info.bits_per_pixel=1;"
    },
    {
        "line": 109,
        "fullcodeline": "bmp_info.bits_per_pixel=8;"
    },
    {
        "line": 139,
        "fullcodeline": "option=GetImageOption(image_info,\"bmp3:alpha\");"
    },
    {
        "line": 222,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 276,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 320,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 348,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 378,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 412,
        "fullcodeline": "rle_info=AcquireVirtualMemory((size_t) (2*(bytes_per_line+2)+2),"
    },
    {
        "line": 419,
        "fullcodeline": "bmp_data=(unsigned char *) GetVirtualMemoryBlob(rle_info);"
    },
    {
        "line": 420,
        "fullcodeline": "bmp_info.file_size-=bmp_info.image_size;"
    },
    {
        "line": 421,
        "fullcodeline": "bmp_info.image_size=(unsigned int) EncodeImage(image,bytes_per_line,"
    },
    {
        "line": 423,
        "fullcodeline": "bmp_info.file_size+=bmp_info.image_size;"
    },
    {
        "line": 425,
        "fullcodeline": "pixel_info=rle_info;"
    },
    {
        "line": 426,
        "fullcodeline": "pixels=bmp_data;"
    },
    {
        "line": 427,
        "fullcodeline": "bmp_info.compression=BI_RLE8;"
    },
    {
        "line": 506,
        "fullcodeline": "(void) WriteBlobLSBLong(image,bmp_info.size);"
    },
    {
        "line": 507,
        "fullcodeline": "(void) WriteBlobLSBSignedLong(image,(signed int) bmp_info.width);"
    },
    {
        "line": 508,
        "fullcodeline": "(void) WriteBlobLSBSignedLong(image,(signed int) bmp_info.height);"
    },
    {
        "line": 509,
        "fullcodeline": "(void) WriteBlobLSBShort(image,bmp_info.planes);"
    },
    {
        "line": 510,
        "fullcodeline": "(void) WriteBlobLSBShort(image,bmp_info.bits_per_pixel);"
    },
    {
        "line": 511,
        "fullcodeline": "(void) WriteBlobLSBLong(image,bmp_info.compression);"
    },
    {
        "line": 512,
        "fullcodeline": "(void) WriteBlobLSBLong(image,bmp_info.image_size);"
    },
    {
        "line": 513,
        "fullcodeline": "(void) WriteBlobLSBLong(image,bmp_info.x_pixels);"
    },
    {
        "line": 514,
        "fullcodeline": "(void) WriteBlobLSBLong(image,bmp_info.y_pixels);"
    },
    {
        "line": 515,
        "fullcodeline": "(void) WriteBlobLSBLong(image,bmp_info.number_colors);"
    },
    {
        "line": 516,
        "fullcodeline": "(void) WriteBlobLSBLong(image,bmp_info.colors_important);"
    },
    {
        "line": 557,
        "fullcodeline": "(profile != (StringInfo *) NULL))"
    },
    {
        "line": 610,
        "fullcodeline": "ThrowWriterException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 634,
        "fullcodeline": "bmp_colormap=(unsigned char *) RelinquishMagickMemory(bmp_colormap);"
    },
    {
        "line": 112,
        "fullcodeline": "(void) SetImageStorageClass(image,DirectClass,exception);"
    },
    {
        "line": 134,
        "fullcodeline": "((type > 3) && (image->alpha_trait != UndefinedPixelTrait) ? 32 : 24);"
    },
    {
        "line": 153,
        "fullcodeline": "if ((type == 3) || ((image->alpha_trait == UndefinedPixelTrait) &&"
    },
    {
        "line": 156,
        "fullcodeline": "type=3;"
    },
    {
        "line": 157,
        "fullcodeline": "bmp_info.size=40;"
    },
    {
        "line": 227,
        "fullcodeline": "p=GetVirtualPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 230,
        "fullcodeline": "q=pixels+(image->rows-y-1)*bytes_per_line;"
    },
    {
        "line": 231,
        "fullcodeline": "bit=0;"
    },
    {
        "line": 232,
        "fullcodeline": "byte=0;"
    },
    {
        "line": 251,
        "fullcodeline": "offset=(ssize_t) (image->columns+7)/8;"
    },
    {
        "line": 278,
        "fullcodeline": "p=GetVirtualPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 281,
        "fullcodeline": "q=pixels+(image->rows-y-1)*bytes_per_line;"
    },
    {
        "line": 282,
        "fullcodeline": "nibble=0;"
    },
    {
        "line": 283,
        "fullcodeline": "byte=0;"
    },
    {
        "line": 302,
        "fullcodeline": "offset=(ssize_t) (image->columns+1)/2;"
    },
    {
        "line": 322,
        "fullcodeline": "p=GetVirtualPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 325,
        "fullcodeline": "q=pixels+(image->rows-y-1)*bytes_per_line;"
    },
    {
        "line": 350,
        "fullcodeline": "p=GetVirtualPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 353,
        "fullcodeline": "q=pixels+(image->rows-y-1)*bytes_per_line;"
    },
    {
        "line": 380,
        "fullcodeline": "p=GetVirtualPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 383,
        "fullcodeline": "q=pixels+(image->rows-y-1)*bytes_per_line;"
    },
    {
        "line": 414,
        "fullcodeline": "if (rle_info == (MemoryInfo *) NULL)"
    },
    {
        "line": 424,
        "fullcodeline": "pixel_info=RelinquishVirtualMemory(pixel_info);"
    },
    {
        "line": 437,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 445,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 480,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 530,
        "fullcodeline": "(image->chromaticity.red_primary.x*0x40000000));"
    },
    {
        "line": 532,
        "fullcodeline": "(image->chromaticity.red_primary.y*0x40000000));"
    },
    {
        "line": 534,
        "fullcodeline": "((1.000f-(image->chromaticity.red_primary.x+"
    },
    {
        "line": 537,
        "fullcodeline": "(image->chromaticity.green_primary.x*0x40000000));"
    },
    {
        "line": 539,
        "fullcodeline": "(image->chromaticity.green_primary.y*0x40000000));"
    },
    {
        "line": 541,
        "fullcodeline": "((1.000f-(image->chromaticity.green_primary.x+"
    },
    {
        "line": 544,
        "fullcodeline": "(image->chromaticity.blue_primary.x*0x40000000));"
    },
    {
        "line": 546,
        "fullcodeline": "(image->chromaticity.blue_primary.y*0x40000000));"
    },
    {
        "line": 548,
        "fullcodeline": "((1.000f-(image->chromaticity.blue_primary.x+"
    },
    {
        "line": 551,
        "fullcodeline": "(bmp_info.gamma_scale.x*0x10000));"
    },
    {
        "line": 553,
        "fullcodeline": "(bmp_info.gamma_scale.y*0x10000));"
    },
    {
        "line": 555,
        "fullcodeline": "(bmp_info.gamma_scale.z*0x10000));"
    },
    {
        "line": 590,
        "fullcodeline": "(void) WriteBlobLSBLong(image,(unsigned int) intent);"
    },
    {
        "line": 591,
        "fullcodeline": "(void) WriteBlobLSBLong(image,0x00);  /* dummy profile data */"
    },
    {
        "line": 592,
        "fullcodeline": "(void) WriteBlobLSBLong(image,0x00);  /* dummy profile length */"
    },
    {
        "line": 593,
        "fullcodeline": "(void) WriteBlobLSBLong(image,0x00);  /* reserved */"
    },
    {
        "line": 605,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 608,
        "fullcodeline": "bmp_info.bits_per_pixel),4*sizeof(*bmp_colormap));"
    },
    {
        "line": 614,
        "fullcodeline": "*q++=ScaleQuantumToChar(ClampToQuantum(image->colormap[i].blue));"
    },
    {
        "line": 615,
        "fullcodeline": "*q++=ScaleQuantumToChar(ClampToQuantum(image->colormap[i].green));"
    },
    {
        "line": 616,
        "fullcodeline": "*q++=ScaleQuantumToChar(ClampToQuantum(image->colormap[i].red));"
    },
    {
        "line": 617,
        "fullcodeline": "if (type > 2)"
    },
    {
        "line": 625,
        "fullcodeline": "if (type > 2)"
    },
    {
        "line": 629,
        "fullcodeline": "(void) WriteBlob(image,(size_t) (3*(1L << bmp_info.bits_per_pixel)),"
    },
    {
        "line": 103,
        "fullcodeline": "if (image->colors <= 16)"
    },
    {
        "line": 114,
        "fullcodeline": "if ((size_t) bmp_info.number_colors < image->colors)"
    },
    {
        "line": 136,
        "fullcodeline": "(image->alpha_trait != UndefinedPixelTrait) ?  BI_BITFIELDS : BI_RGB);"
    },
    {
        "line": 141,
        "fullcodeline": "bmp_info.bits_per_pixel=32;"
    },
    {
        "line": 154,
        "fullcodeline": "(have_color_info == MagickFalse)))"
    },
    {
        "line": 164,
        "fullcodeline": "bmp_info.size=108;"
    },
    {
        "line": 165,
        "fullcodeline": "extra_size=68;"
    },
    {
        "line": 172,
        "fullcodeline": "bmp_info.file_size+=extra_size;"
    },
    {
        "line": 173,
        "fullcodeline": "bmp_info.offset_bits+=extra_size;"
    },
    {
        "line": 228,
        "fullcodeline": "if (p == (const Quantum *) NULL)"
    },
    {
        "line": 233,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 246,
        "fullcodeline": "if (bit != 0)"
    },
    {
        "line": 252,
        "fullcodeline": "for (x=offset; x < (ssize_t) bytes_per_line; x++)"
    },
    {
        "line": 254,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 279,
        "fullcodeline": "if (p == (const Quantum *) NULL)"
    },
    {
        "line": 284,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 303,
        "fullcodeline": "for (x=offset; x < (ssize_t) bytes_per_line; x++)"
    },
    {
        "line": 305,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 323,
        "fullcodeline": "if (p == (const Quantum *) NULL)"
    },
    {
        "line": 326,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 331,
        "fullcodeline": "for ( ; x < (ssize_t) bytes_per_line; x++)"
    },
    {
        "line": 333,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 351,
        "fullcodeline": "if (p == (const Quantum *) NULL)"
    },
    {
        "line": 354,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 361,
        "fullcodeline": "for (x=3L*(ssize_t) image->columns; x < (ssize_t) bytes_per_line; x++)"
    },
    {
        "line": 363,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 381,
        "fullcodeline": "if (p == (const Quantum *) NULL)"
    },
    {
        "line": 384,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 392,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 413,
        "fullcodeline": "(image->rows+2)*sizeof(*pixels));"
    },
    {
        "line": 416,
        "fullcodeline": "pixel_info=RelinquishVirtualMemory(pixel_info);"
    },
    {
        "line": 417,
        "fullcodeline": "ThrowWriterException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 440,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 448,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 456,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 462,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 468,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 474,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 483,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 622,
        "fullcodeline": "*q++=(unsigned char) 0x00;"
    },
    {
        "line": 623,
        "fullcodeline": "*q++=(unsigned char) 0x00;"
    },
    {
        "line": 624,
        "fullcodeline": "*q++=(unsigned char) 0x00;"
    },
    {
        "line": 632,
        "fullcodeline": "(void) WriteBlob(image,(size_t) (4*(1L << bmp_info.bits_per_pixel)),"
    },
    {
        "line": 104,
        "fullcodeline": "bmp_info.bits_per_pixel=4;"
    },
    {
        "line": 166,
        "fullcodeline": "if ((image->rendering_intent != UndefinedIntent) ||"
    },
    {
        "line": 235,
        "fullcodeline": "byte<<=1;"
    },
    {
        "line": 236,
        "fullcodeline": "byte|=GetPixelIndex(image,p) != 0 ? 0x01 : 0x00;"
    },
    {
        "line": 237,
        "fullcodeline": "bit++;"
    },
    {
        "line": 244,
        "fullcodeline": "p+=GetPixelChannels(image);"
    },
    {
        "line": 256,
        "fullcodeline": "status=SetImageProgress(image,SaveImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 286,
        "fullcodeline": "byte<<=4;"
    },
    {
        "line": 287,
        "fullcodeline": "byte|=((size_t) GetPixelIndex(image,p) & 0x0f);"
    },
    {
        "line": 288,
        "fullcodeline": "nibble++;"
    },
    {
        "line": 295,
        "fullcodeline": "p+=GetPixelChannels(image);"
    },
    {
        "line": 307,
        "fullcodeline": "status=SetImageProgress(image,SaveImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 329,
        "fullcodeline": "p+=GetPixelChannels(image);"
    },
    {
        "line": 335,
        "fullcodeline": "status=SetImageProgress(image,SaveImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 359,
        "fullcodeline": "p+=GetPixelChannels(image);"
    },
    {
        "line": 365,
        "fullcodeline": "status=SetImageProgress(image,SaveImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 390,
        "fullcodeline": "p+=GetPixelChannels(image);"
    },
    {
        "line": 394,
        "fullcodeline": "status=SetImageProgress(image,SaveImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 566,
        "fullcodeline": "intent=LCS_GM_BUSINESS;"
    },
    {
        "line": 571,
        "fullcodeline": "intent=LCS_GM_GRAPHICS;"
    },
    {
        "line": 576,
        "fullcodeline": "intent=LCS_GM_IMAGES;"
    },
    {
        "line": 581,
        "fullcodeline": "intent=LCS_GM_ABS_COLORIMETRIC;"
    },
    {
        "line": 586,
        "fullcodeline": "intent=0;"
    },
    {
        "line": 115,
        "fullcodeline": "(void) SetImageStorageClass(image,DirectClass,exception);"
    },
    {
        "line": 118,
        "fullcodeline": "bmp_info.file_size+=3*(1UL << bmp_info.bits_per_pixel);"
    },
    {
        "line": 119,
        "fullcodeline": "bmp_info.offset_bits+=3*(1UL << bmp_info.bits_per_pixel);"
    },
    {
        "line": 167,
        "fullcodeline": "(profile != (StringInfo *) NULL))"
    },
    {
        "line": 169,
        "fullcodeline": "bmp_info.size=124;"
    },
    {
        "line": 170,
        "fullcodeline": "extra_size+=16;"
    },
    {
        "line": 238,
        "fullcodeline": "if (bit == 8)"
    },
    {
        "line": 258,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 289,
        "fullcodeline": "if (nibble == 2)"
    },
    {
        "line": 309,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 337,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 356,
        "fullcodeline": "*q++=ScaleQuantumToChar(GetPixelBlue(image,p));"
    },
    {
        "line": 357,
        "fullcodeline": "*q++=ScaleQuantumToChar(GetPixelGreen(image,p));"
    },
    {
        "line": 358,
        "fullcodeline": "*q++=ScaleQuantumToChar(GetPixelRed(image,p));"
    },
    {
        "line": 367,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 386,
        "fullcodeline": "*q++=ScaleQuantumToChar(GetPixelBlue(image,p));"
    },
    {
        "line": 387,
        "fullcodeline": "*q++=ScaleQuantumToChar(GetPixelGreen(image,p));"
    },
    {
        "line": 388,
        "fullcodeline": "*q++=ScaleQuantumToChar(GetPixelRed(image,p));"
    },
    {
        "line": 389,
        "fullcodeline": "*q++=ScaleQuantumToChar(GetPixelAlpha(image,p));"
    },
    {
        "line": 396,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 618,
        "fullcodeline": "*q++=(unsigned char) 0x0;"
    },
    {
        "line": 626,
        "fullcodeline": "*q++=(unsigned char) 0x00;"
    },
    {
        "line": 106,
        "fullcodeline": "if (image->colors <= 256)"
    },
    {
        "line": 120,
        "fullcodeline": "if (type > 2)"
    },
    {
        "line": 241,
        "fullcodeline": "bit=0;"
    },
    {
        "line": 242,
        "fullcodeline": "byte=0;"
    },
    {
        "line": 248,
        "fullcodeline": "*q++=(unsigned char) (byte << (8-bit));"
    },
    {
        "line": 292,
        "fullcodeline": "nibble=0;"
    },
    {
        "line": 293,
        "fullcodeline": "byte=0;"
    },
    {
        "line": 299,
        "fullcodeline": "*q++=(unsigned char) (byte << 4);"
    },
    {
        "line": 328,
        "fullcodeline": "*q++=(unsigned char) GetPixelIndex(image,p);"
    },
    {
        "line": 107,
        "fullcodeline": "bmp_info.bits_per_pixel=8;"
    },
    {
        "line": 122,
        "fullcodeline": "bmp_info.file_size+=(1UL << bmp_info.bits_per_pixel);"
    },
    {
        "line": 123,
        "fullcodeline": "bmp_info.offset_bits+=(1UL << bmp_info.bits_per_pixel);"
    },
    {
        "line": 240,
        "fullcodeline": "*q++=(unsigned char) byte;"
    },
    {
        "line": 291,
        "fullcodeline": "*q++=(unsigned char) byte;"
    }
]