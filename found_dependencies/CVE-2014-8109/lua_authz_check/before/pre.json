[
    {
        "line": 7,
        "fullcodeline": "ap_lua_server_cfg *server_cfg = ap_get_module_config(r->server->module_config,"
    },
    {
        "line": 9,
        "fullcodeline": "const ap_lua_dir_cfg *cfg = ap_get_module_config(r->per_dir_config,"
    },
    {
        "line": 11,
        "fullcodeline": "const lua_authz_provider_spec *prov_spec = parsed_require_line;"
    },
    {
        "line": 13,
        "fullcodeline": "int nargs = 0;"
    },
    {
        "line": 15,
        "fullcodeline": "spec = create_vm_spec(&pool, r, cfg, server_cfg, prov_spec->file_name,"
    },
    {
        "line": 18,
        "fullcodeline": "L = ap_lua_get_lua_state(pool, spec, r);"
    },
    {
        "line": 24,
        "fullcodeline": "lua_getglobal(L, prov_spec->function_name);"
    },
    {
        "line": 32,
        "fullcodeline": "ap_lua_run_lua_request(L, r);"
    },
    {
        "line": 60,
        "fullcodeline": "result = lua_tointeger(L, -1);"
    },
    {
        "line": 19,
        "fullcodeline": "if (L == NULL) {"
    },
    {
        "line": 47,
        "fullcodeline": "if (lua_pcall(L, 1 + nargs, 1, 0)) {"
    },
    {
        "line": 25,
        "fullcodeline": "if (!lua_isfunction(L, -1)) {"
    },
    {
        "line": 45,
        "fullcodeline": "nargs = prov_spec->args->nelts;"
    },
    {
        "line": 54,
        "fullcodeline": "if (!lua_isnumber(L, -1)) {"
    },
    {
        "line": 41,
        "fullcodeline": "for (i = 0; i < prov_spec->args->nelts; i++) {"
    },
    {
        "line": 48,
        "fullcodeline": "const char *err = lua_tostring(L, -1);"
    },
    {
        "line": 35,
        "fullcodeline": "if (!lua_checkstack(L, prov_spec->args->nelts)) {"
    },
    {
        "line": 43,
        "fullcodeline": "lua_pushstring(L, arg);"
    }
]