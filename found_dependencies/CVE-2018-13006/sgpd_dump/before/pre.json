[
    {
        "line": 4,
        "fullcodeline": "GF_SampleGroupDescriptionBox *ptr = (GF_SampleGroupDescriptionBox*) a;"
    },
    {
        "line": 7,
        "fullcodeline": "gf_isom_box_dump_start(a, \"SampleGroupDescriptionBox\", trace);"
    },
    {
        "line": 13,
        "fullcodeline": "fprintf(trace, \">\\n\");"
    },
    {
        "line": 5,
        "fullcodeline": "if (!a) return GF_BAD_PARAM;"
    },
    {
        "line": 11,
        "fullcodeline": "if (ptr->version==1) fprintf(trace, \" default_length=\\\"%d\\\"\", ptr->default_length);"
    },
    {
        "line": 12,
        "fullcodeline": "if ((ptr->version>=2) && ptr->default_description_index) fprintf(trace, \" default_group_index=\\\"%d\\\"\", ptr->default_description_index);"
    },
    {
        "line": 14,
        "fullcodeline": "for (i=0; i<gf_list_count(ptr->group_descriptions); i++) {"
    },
    {
        "line": 10,
        "fullcodeline": "fprintf(trace, \"grouping_type=\\\"%s\\\"\", gf_4cc_to_str(ptr->grouping_type) );"
    },
    {
        "line": 15,
        "fullcodeline": "void *entry = gf_list_get(ptr->group_descriptions, i);"
    },
    {
        "line": 18,
        "fullcodeline": "fprintf(trace, \"<RollRecoveryEntry roll_distance=\\\"%d\\\" />\\n\", ((GF_RollRecoveryEntry*)entry)->roll_distance );"
    },
    {
        "line": 21,
        "fullcodeline": "fprintf(trace, \"<AudioPreRollEntry roll_distance=\\\"%d\\\" />\\n\", ((GF_RollRecoveryEntry*)entry)->roll_distance );"
    },
    {
        "line": 24,
        "fullcodeline": "fprintf(trace, \"<TemporalLevelEntry level_independently_decodable=\\\"%d\\\"/>\\n\", ((GF_TemporalLevelEntry*)entry)->level_independently_decodable);"
    },
    {
        "line": 27,
        "fullcodeline": "fprintf(trace, \"<VisualRandomAccessEntry num_leading_samples_known=\\\"%s\\\"\", ((GF_VisualRandomAccessEntry*)entry)->num_leading_samples_known ? \"yes\" : \"no\");"
    },
    {
        "line": 30,
        "fullcodeline": "fprintf(trace, \"/>\\n\");"
    },
    {
        "line": 33,
        "fullcodeline": "fprintf(trace, \"<SyncSampleGroupEntry NAL_unit_type=\\\"%d\\\"/>\\n\", ((GF_SYNCEntry*)entry)->NALU_type);"
    },
    {
        "line": 36,
        "fullcodeline": "fprintf(trace, \"<CENCSampleEncryptionGroupEntry IsEncrypted=\\\"%d\\\" IV_size=\\\"%d\\\" KID=\\\"\", ((GF_CENCSampleEncryptionGroupEntry*)entry)->IsProtected, ((GF_CENCSampleEncryptionGroupEntry*)entry)->Per_Sample_IV_size);"
    },
    {
        "line": 37,
        "fullcodeline": "dump_data_hex(trace, (char *)((GF_CENCSampleEncryptionGroupEntry*)entry)->KID, 16);"
    },
    {
        "line": 42,
        "fullcodeline": "fprintf(trace, \"\\\"/>\\n\");"
    },
    {
        "line": 45,
        "fullcodeline": "oinf_entry_dump(entry, trace);"
    },
    {
        "line": 48,
        "fullcodeline": "linf_dump(entry, trace);"
    },
    {
        "line": 51,
        "fullcodeline": "trif_dump(trace, (char *) ((GF_DefaultSampleGroupDescriptionEntry*)entry)->data,  ((GF_DefaultSampleGroupDescriptionEntry*)entry)->length);"
    },
    {
        "line": 55,
        "fullcodeline": "nalm_dump(trace, (char *) ((GF_DefaultSampleGroupDescriptionEntry*)entry)->data,  ((GF_DefaultSampleGroupDescriptionEntry*)entry)->length);"
    },
    {
        "line": 58,
        "fullcodeline": "fprintf(trace, \"<SAPEntry dependent_flag=\\\"%d\\\" SAP_type=\\\"%d\\\" />\\n\", ((GF_SAPEntry*)entry)->dependent_flag, ((GF_SAPEntry*)entry)->SAP_type);"
    },
    {
        "line": 61,
        "fullcodeline": "fprintf(trace, \"<DefaultSampleGroupDescriptionEntry size=\\\"%d\\\" data=\\\"\", ((GF_DefaultSampleGroupDescriptionEntry*)entry)->length);"
    },
    {
        "line": 62,
        "fullcodeline": "dump_data(trace, (char *) ((GF_DefaultSampleGroupDescriptionEntry*)entry)->data,  ((GF_DefaultSampleGroupDescriptionEntry*)entry)->length);"
    },
    {
        "line": 63,
        "fullcodeline": "fprintf(trace, \"\\\"/>\\n\");"
    },
    {
        "line": 69,
        "fullcodeline": "fprintf(trace, \"<RollRecoveryEntry roll_distance=\\\"\\\"/>\\n\");"
    },
    {
        "line": 72,
        "fullcodeline": "fprintf(trace, \"<AudioPreRollEntry roll_distance=\\\"\\\"/>\\n\");"
    },
    {
        "line": 75,
        "fullcodeline": "fprintf(trace, \"<TemporalLevelEntry level_independently_decodable=\\\"\\\"/>\\n\");"
    },
    {
        "line": 78,
        "fullcodeline": "fprintf(trace, \"<VisualRandomAccessEntry num_leading_samples_known=\\\"yes|no\\\" num_leading_samples=\\\"\\\" />\\n\");"
    },
    {
        "line": 81,
        "fullcodeline": "fprintf(trace, \"<SyncSampleGroupEntry NAL_unit_type=\\\"\\\" />\\n\");"
    },
    {
        "line": 84,
        "fullcodeline": "fprintf(trace, \"<CENCSampleEncryptionGroupEntry IsEncrypted=\\\"\\\" IV_size=\\\"\\\" KID=\\\"\\\" constant_IV_size=\\\"\\\"  constant_IV=\\\"\\\"/>\\n\");"
    },
    {
        "line": 87,
        "fullcodeline": "oinf_entry_dump(NULL, trace);"
    },
    {
        "line": 90,
        "fullcodeline": "linf_dump(NULL, trace);"
    },
    {
        "line": 93,
        "fullcodeline": "trif_dump(trace, NULL, 0);"
    },
    {
        "line": 96,
        "fullcodeline": "nalm_dump(trace, NULL, 0);"
    },
    {
        "line": 99,
        "fullcodeline": "fprintf(trace, \"<SAPEntry dependent_flag=\\\"\\\" SAP_type=\\\"\\\" />\\n\");"
    },
    {
        "line": 102,
        "fullcodeline": "fprintf(trace, \"<DefaultSampleGroupDescriptionEntry size=\\\"\\\" data=\\\"\\\"/>\\n\");"
    },
    {
        "line": 29,
        "fullcodeline": "fprintf(trace, \" num_leading_samples=\\\"%d\\\"\", ((GF_VisualRandomAccessEntry*)entry)->num_leading_samples);"
    },
    {
        "line": 38,
        "fullcodeline": "if ((((GF_CENCSampleEncryptionGroupEntry*)entry)->IsProtected == 1) && !((GF_CENCSampleEncryptionGroupEntry*)entry)->Per_Sample_IV_size) {"
    },
    {
        "line": 39,
        "fullcodeline": "fprintf(trace, \"\\\" constant_IV_size=\\\"%d\\\"  constant_IV=\\\"\", ((GF_CENCSampleEncryptionGroupEntry*)entry)->constant_IV_size);"
    },
    {
        "line": 40,
        "fullcodeline": "dump_data_hex(trace, (char *)((GF_CENCSampleEncryptionGroupEntry*)entry)->constant_IV, ((GF_CENCSampleEncryptionGroupEntry*)entry)->constant_IV_size);"
    }
]