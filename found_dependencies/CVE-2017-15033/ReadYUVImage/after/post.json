[
    {
        "line": 42,
        "fullcodeline": "assert(image_info != (const ImageInfo *) NULL);"
    },
    {
        "line": 43,
        "fullcodeline": "assert(image_info->signature == MagickCoreSignature);"
    },
    {
        "line": 47,
        "fullcodeline": "assert(exception != (ExceptionInfo *) NULL);"
    },
    {
        "line": 48,
        "fullcodeline": "assert(exception->signature == MagickCoreSignature);"
    },
    {
        "line": 49,
        "fullcodeline": "image=AcquireImage(image_info,exception);"
    },
    {
        "line": 52,
        "fullcodeline": "status=SetImageExtent(image,image->columns,image->rows,exception);"
    },
    {
        "line": 55,
        "fullcodeline": "quantum=(ssize_t) (image->depth <= 8 ? 1 : 2);"
    },
    {
        "line": 56,
        "fullcodeline": "interlace=image_info->interlace;"
    },
    {
        "line": 57,
        "fullcodeline": "horizontal_factor=2;"
    },
    {
        "line": 58,
        "fullcodeline": "vertical_factor=2;"
    },
    {
        "line": 109,
        "fullcodeline": "status=MagickTrue;"
    },
    {
        "line": 416,
        "fullcodeline": "scanline=(unsigned char *) RelinquishMagickMemory(scanline);"
    },
    {
        "line": 417,
        "fullcodeline": "(void) CloseBlob(image);"
    },
    {
        "line": 44,
        "fullcodeline": "if (image_info->debug != MagickFalse)"
    },
    {
        "line": 50,
        "fullcodeline": "if ((image->columns == 0) || (image->rows == 0))"
    },
    {
        "line": 53,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 59,
        "fullcodeline": "if (image_info->sampling_factor != (char *) NULL)"
    },
    {
        "line": 76,
        "fullcodeline": "if ((interlace == UndefinedInterlace) ||"
    },
    {
        "line": 83,
        "fullcodeline": "if (interlace != PartitionInterlace)"
    },
    {
        "line": 101,
        "fullcodeline": "if (interlace == NoInterlace)"
    },
    {
        "line": 107,
        "fullcodeline": "if (scanline == (unsigned char *) NULL)"
    },
    {
        "line": 415,
        "fullcodeline": "} while (count != 0);"
    },
    {
        "line": 418,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 420,
        "fullcodeline": "return(GetFirstImageInList(image));"
    },
    {
        "line": 45,
        "fullcodeline": "(void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\","
    },
    {
        "line": 51,
        "fullcodeline": "ThrowReaderException(OptionError,\"MustSpecifyImageSize\");"
    },
    {
        "line": 67,
        "fullcodeline": "flags=ParseGeometry(image_info->sampling_factor,&geometry_info);"
    },
    {
        "line": 68,
        "fullcodeline": "horizontal_factor=(ssize_t) geometry_info.rho;"
    },
    {
        "line": 69,
        "fullcodeline": "vertical_factor=(ssize_t) geometry_info.sigma;"
    },
    {
        "line": 77,
        "fullcodeline": "((interlace == NoInterlace) && (vertical_factor == 2)))"
    },
    {
        "line": 79,
        "fullcodeline": "interlace=NoInterlace;    /* CCIR 4:2:2 */"
    },
    {
        "line": 88,
        "fullcodeline": "status=OpenBlob(image_info,image,ReadBinaryBlobMode,exception);"
    },
    {
        "line": 102,
        "fullcodeline": "scanline=(unsigned char *) AcquireQuantumMemory((size_t) (2UL*"
    },
    {
        "line": 108,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 112,
        "fullcodeline": "chroma_image=CloneImage(image,(image->columns+horizontal_factor-1)/"
    },
    {
        "line": 126,
        "fullcodeline": "status=SetImageExtent(image,image->columns,image->rows,exception);"
    },
    {
        "line": 349,
        "fullcodeline": "resize_image=ResizeImage(chroma_image,image->columns,image->rows,"
    },
    {
        "line": 351,
        "fullcodeline": "chroma_image=DestroyImage(chroma_image);"
    },
    {
        "line": 375,
        "fullcodeline": "resize_image=DestroyImage(resize_image);"
    },
    {
        "line": 54,
        "fullcodeline": "return(DestroyImageList(image));"
    },
    {
        "line": 70,
        "fullcodeline": "if ((flags & SigmaValue) == 0)"
    },
    {
        "line": 72,
        "fullcodeline": "if ((horizontal_factor != 1) && (horizontal_factor != 2) &&"
    },
    {
        "line": 80,
        "fullcodeline": "if (vertical_factor == 2)"
    },
    {
        "line": 89,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 94,
        "fullcodeline": "if (DiscardBlobBytes(image,(MagickSizeType) image->offset) == MagickFalse)"
    },
    {
        "line": 105,
        "fullcodeline": "scanline=(unsigned char *) AcquireQuantumMemory(image->columns,"
    },
    {
        "line": 115,
        "fullcodeline": "if (chroma_image == (Image *) NULL)"
    },
    {
        "line": 123,
        "fullcodeline": "if ((image_info->ping != MagickFalse) && (image_info->number_scenes != 0))"
    },
    {
        "line": 127,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 129,
        "fullcodeline": "if (interlace == PartitionInterlace)"
    },
    {
        "line": 140,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 255,
        "fullcodeline": "if (interlace == PartitionInterlace)"
    },
    {
        "line": 267,
        "fullcodeline": "if (interlace != NoInterlace)"
    },
    {
        "line": 352,
        "fullcodeline": "if (resize_image == (Image *) NULL)"
    },
    {
        "line": 357,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 376,
        "fullcodeline": "if (SetImageColorspace(image,YCbCrColorspace,exception) == MagickFalse)"
    },
    {
        "line": 378,
        "fullcodeline": "if (interlace == PartitionInterlace)"
    },
    {
        "line": 381,
        "fullcodeline": "if (EOFBlob(image) != MagickFalse)"
    },
    {
        "line": 390,
        "fullcodeline": "if (image_info->number_scenes != 0)"
    },
    {
        "line": 393,
        "fullcodeline": "if (interlace == NoInterlace)"
    },
    {
        "line": 397,
        "fullcodeline": "if (count != 0)"
    },
    {
        "line": 419,
        "fullcodeline": "return(DestroyImageList(image));"
    },
    {
        "line": 71,
        "fullcodeline": "vertical_factor=horizontal_factor;"
    },
    {
        "line": 73,
        "fullcodeline": "(vertical_factor != 1) && (vertical_factor != 2))"
    },
    {
        "line": 74,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"UnexpectedSamplingFactor\");"
    },
    {
        "line": 81,
        "fullcodeline": "interlace=PlaneInterlace; /* CCIR 4:1:1 */"
    },
    {
        "line": 91,
        "fullcodeline": "image=DestroyImageList(image);"
    },
    {
        "line": 95,
        "fullcodeline": "ThrowFileException(exception,CorruptImageError,\"UnexpectedEndOfFile\","
    },
    {
        "line": 113,
        "fullcodeline": "horizontal_factor,(image->rows+vertical_factor-1)/vertical_factor,"
    },
    {
        "line": 117,
        "fullcodeline": "scanline=(unsigned char *) RelinquishMagickMemory(scanline);"
    },
    {
        "line": 118,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 131,
        "fullcodeline": "AppendImageFormat(\"Y\",image->filename);"
    },
    {
        "line": 132,
        "fullcodeline": "status=OpenBlob(image_info,image,ReadBinaryBlobMode,exception);"
    },
    {
        "line": 257,
        "fullcodeline": "(void) CloseBlob(image);"
    },
    {
        "line": 258,
        "fullcodeline": "AppendImageFormat(\"U\",image->filename);"
    },
    {
        "line": 259,
        "fullcodeline": "status=OpenBlob(image_info,image,ReadBinaryBlobMode,exception);"
    },
    {
        "line": 354,
        "fullcodeline": "scanline=(unsigned char *) RelinquishMagickMemory(scanline);"
    },
    {
        "line": 355,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 359,
        "fullcodeline": "q=GetAuthenticPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 360,
        "fullcodeline": "chroma_pixels=GetVirtualPixels(resize_image,0,y,resize_image->columns,1,"
    },
    {
        "line": 379,
        "fullcodeline": "(void) CopyMagickString(image->filename,image_info->filename,"
    },
    {
        "line": 383,
        "fullcodeline": "ThrowFileException(exception,CorruptImageError,\"UnexpectedEndOfFile\","
    },
    {
        "line": 394,
        "fullcodeline": "count=ReadBlob(image,(size_t) (2*quantum*image->columns),scanline);"
    },
    {
        "line": 402,
        "fullcodeline": "AcquireNextImage(image_info,image,exception);"
    },
    {
        "line": 409,
        "fullcodeline": "image=SyncNextImageInList(image);"
    },
    {
        "line": 410,
        "fullcodeline": "status=SetImageProgress(image,LoadImagesTag,TellBlob(image),"
    },
    {
        "line": 92,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 103,
        "fullcodeline": "image->columns+2UL),(size_t) quantum*sizeof(*scanline));"
    },
    {
        "line": 124,
        "fullcodeline": "if (image->scene >= (image_info->scene+image_info->number_scenes-1))"
    },
    {
        "line": 133,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 145,
        "fullcodeline": "if (interlace == NoInterlace)"
    },
    {
        "line": 242,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 244,
        "fullcodeline": "if (interlace == NoInterlace)"
    },
    {
        "line": 247,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 260,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 269,
        "fullcodeline": "for (y=0; y < (ssize_t) chroma_image->rows; y++)"
    },
    {
        "line": 302,
        "fullcodeline": "if (interlace == PartitionInterlace)"
    },
    {
        "line": 314,
        "fullcodeline": "for (y=0; y < (ssize_t) chroma_image->rows; y++)"
    },
    {
        "line": 362,
        "fullcodeline": "if ((q == (Quantum *) NULL) ||"
    },
    {
        "line": 365,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 372,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 391,
        "fullcodeline": "if (image->scene >= (image_info->scene+image_info->number_scenes-1))"
    },
    {
        "line": 396,
        "fullcodeline": "count=ReadBlob(image,(size_t) quantum*image->columns,scanline);"
    },
    {
        "line": 403,
        "fullcodeline": "if (GetNextImageInList(image) == (Image *) NULL)"
    },
    {
        "line": 412,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 106,
        "fullcodeline": "(size_t) quantum*sizeof(*scanline));"
    },
    {
        "line": 135,
        "fullcodeline": "scanline=(unsigned char *) RelinquishMagickMemory(scanline);"
    },
    {
        "line": 136,
        "fullcodeline": "image=DestroyImageList(image);"
    },
    {
        "line": 159,
        "fullcodeline": "p=scanline;"
    },
    {
        "line": 160,
        "fullcodeline": "q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 163,
        "fullcodeline": "chroma_pixels=QueueAuthenticPixels(chroma_image,0,y,"
    },
    {
        "line": 249,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 262,
        "fullcodeline": "scanline=(unsigned char *) RelinquishMagickMemory(scanline);"
    },
    {
        "line": 263,
        "fullcodeline": "image=DestroyImageList(image);"
    },
    {
        "line": 271,
        "fullcodeline": "length=quantum*chroma_image->columns;"
    },
    {
        "line": 272,
        "fullcodeline": "count=ReadBlob(image,length,scanline);"
    },
    {
        "line": 280,
        "fullcodeline": "p=scanline;"
    },
    {
        "line": 281,
        "fullcodeline": "q=QueueAuthenticPixels(chroma_image,0,y,chroma_image->columns,1,"
    },
    {
        "line": 304,
        "fullcodeline": "(void) CloseBlob(image);"
    },
    {
        "line": 305,
        "fullcodeline": "AppendImageFormat(\"V\",image->filename);"
    },
    {
        "line": 306,
        "fullcodeline": "status=OpenBlob(image_info,image,ReadBinaryBlobMode,exception);"
    },
    {
        "line": 316,
        "fullcodeline": "length=quantum*chroma_image->columns;"
    },
    {
        "line": 317,
        "fullcodeline": "count=ReadBlob(image,length,scanline);"
    },
    {
        "line": 325,
        "fullcodeline": "p=scanline;"
    },
    {
        "line": 326,
        "fullcodeline": "q=GetAuthenticPixels(chroma_image,0,y,chroma_image->columns,1,"
    },
    {
        "line": 363,
        "fullcodeline": "(chroma_pixels == (const Quantum *) NULL))"
    },
    {
        "line": 367,
        "fullcodeline": "SetPixelGreen(image,GetPixelGreen(resize_image,chroma_pixels),q);"
    },
    {
        "line": 368,
        "fullcodeline": "SetPixelBlue(image,GetPixelBlue(resize_image,chroma_pixels),q);"
    },
    {
        "line": 369,
        "fullcodeline": "chroma_pixels+=GetPixelChannels(resize_image);"
    },
    {
        "line": 370,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 405,
        "fullcodeline": "scanline=(unsigned char *) RelinquishMagickMemory(scanline);"
    },
    {
        "line": 406,
        "fullcodeline": "image=DestroyImageList(image);"
    },
    {
        "line": 411,
        "fullcodeline": "GetBlobSize(image));"
    },
    {
        "line": 137,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 147,
        "fullcodeline": "if ((y > 0) || (GetPreviousImageInList(image) == (Image *) NULL))"
    },
    {
        "line": 161,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 165,
        "fullcodeline": "if (chroma_pixels == (Quantum *) NULL)"
    },
    {
        "line": 167,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x+=2)"
    },
    {
        "line": 224,
        "fullcodeline": "p=scanline;"
    },
    {
        "line": 225,
        "fullcodeline": "q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 245,
        "fullcodeline": "if (SyncAuthenticPixels(chroma_image,exception) == MagickFalse)"
    },
    {
        "line": 251,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 264,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 273,
        "fullcodeline": "if (count != (ssize_t) length)"
    },
    {
        "line": 283,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 285,
        "fullcodeline": "for (x=0; x < (ssize_t) chroma_image->columns; x++)"
    },
    {
        "line": 299,
        "fullcodeline": "if (SyncAuthenticPixels(chroma_image,exception) == MagickFalse)"
    },
    {
        "line": 307,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 318,
        "fullcodeline": "if (count != (ssize_t) length)"
    },
    {
        "line": 328,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 330,
        "fullcodeline": "for (x=0; x < (ssize_t) chroma_image->columns; x++)"
    },
    {
        "line": 342,
        "fullcodeline": "if (SyncAuthenticPixels(chroma_image,exception) == MagickFalse)"
    },
    {
        "line": 407,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 149,
        "fullcodeline": "length=2*quantum*image->columns;"
    },
    {
        "line": 150,
        "fullcodeline": "count=ReadBlob(image,length,scanline);"
    },
    {
        "line": 169,
        "fullcodeline": "SetPixelRed(chroma_image,0,chroma_pixels);"
    },
    {
        "line": 186,
        "fullcodeline": "SetPixelGreen(image,0,q);"
    },
    {
        "line": 187,
        "fullcodeline": "SetPixelBlue(image,0,q);"
    },
    {
        "line": 188,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 189,
        "fullcodeline": "SetPixelGreen(image,0,q);"
    },
    {
        "line": 190,
        "fullcodeline": "SetPixelBlue(image,0,q);"
    },
    {
        "line": 206,
        "fullcodeline": "chroma_pixels+=GetPixelChannels(chroma_image);"
    },
    {
        "line": 207,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 212,
        "fullcodeline": "if ((y > 0) || (GetPreviousImageInList(image) == (Image *) NULL))"
    },
    {
        "line": 226,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 228,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 275,
        "fullcodeline": "status=MagickFalse;"
    },
    {
        "line": 276,
        "fullcodeline": "ThrowFileException(exception,CorruptImageError,"
    },
    {
        "line": 287,
        "fullcodeline": "SetPixelRed(chroma_image,0,q);"
    },
    {
        "line": 296,
        "fullcodeline": "SetPixelBlue(chroma_image,0,q);"
    },
    {
        "line": 297,
        "fullcodeline": "q+=GetPixelChannels(chroma_image);"
    },
    {
        "line": 309,
        "fullcodeline": "scanline=(unsigned char *) RelinquishMagickMemory(scanline);"
    },
    {
        "line": 310,
        "fullcodeline": "image=DestroyImageList(image);"
    },
    {
        "line": 320,
        "fullcodeline": "status=MagickFalse;"
    },
    {
        "line": 321,
        "fullcodeline": "ThrowFileException(exception,CorruptImageError,"
    },
    {
        "line": 340,
        "fullcodeline": "q+=GetPixelChannels(chroma_image);"
    },
    {
        "line": 151,
        "fullcodeline": "if (count != (ssize_t) length)"
    },
    {
        "line": 170,
        "fullcodeline": "if (quantum == 1)"
    },
    {
        "line": 179,
        "fullcodeline": "if (quantum == 1)"
    },
    {
        "line": 191,
        "fullcodeline": "if (quantum == 1)"
    },
    {
        "line": 199,
        "fullcodeline": "if (quantum == 1)"
    },
    {
        "line": 214,
        "fullcodeline": "length=quantum*image->columns;"
    },
    {
        "line": 215,
        "fullcodeline": "count=ReadBlob(image,length,scanline);"
    },
    {
        "line": 237,
        "fullcodeline": "SetPixelGreen(image,0,q);"
    },
    {
        "line": 238,
        "fullcodeline": "SetPixelBlue(image,0,q);"
    },
    {
        "line": 239,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 288,
        "fullcodeline": "if (quantum == 1)"
    },
    {
        "line": 311,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 332,
        "fullcodeline": "if (quantum == 1)"
    },
    {
        "line": 153,
        "fullcodeline": "status=MagickFalse;"
    },
    {
        "line": 154,
        "fullcodeline": "ThrowFileException(exception,CorruptImageError,"
    },
    {
        "line": 171,
        "fullcodeline": "SetPixelGreen(chroma_image,ScaleCharToQuantum(*p++),"
    },
    {
        "line": 180,
        "fullcodeline": "SetPixelRed(image,ScaleCharToQuantum(*p++),q);"
    },
    {
        "line": 192,
        "fullcodeline": "SetPixelBlue(chroma_image,ScaleCharToQuantum(*p++),chroma_pixels);"
    },
    {
        "line": 200,
        "fullcodeline": "SetPixelRed(image,ScaleCharToQuantum(*p++),q);"
    },
    {
        "line": 216,
        "fullcodeline": "if (count != (ssize_t) length)"
    },
    {
        "line": 230,
        "fullcodeline": "if (quantum == 1)"
    },
    {
        "line": 289,
        "fullcodeline": "SetPixelGreen(chroma_image,ScaleCharToQuantum(*p++),q);"
    },
    {
        "line": 333,
        "fullcodeline": "SetPixelBlue(chroma_image,ScaleCharToQuantum(*p++),q);"
    },
    {
        "line": 175,
        "fullcodeline": "SetPixelGreen(chroma_image,ScaleShortToQuantum(((*p) << 8) |"
    },
    {
        "line": 177,
        "fullcodeline": "p+=2;"
    },
    {
        "line": 183,
        "fullcodeline": "SetPixelRed(image,ScaleShortToQuantum(((*p) << 8) | *(p+1)),q);"
    },
    {
        "line": 184,
        "fullcodeline": "p+=2;"
    },
    {
        "line": 195,
        "fullcodeline": "SetPixelBlue(chroma_image,ScaleShortToQuantum(((*p) << 8) |"
    },
    {
        "line": 197,
        "fullcodeline": "p+=2;"
    },
    {
        "line": 203,
        "fullcodeline": "SetPixelRed(image,ScaleShortToQuantum(((*p) << 8) | *(p+1)),q);"
    },
    {
        "line": 204,
        "fullcodeline": "p+=2;"
    },
    {
        "line": 218,
        "fullcodeline": "status=MagickFalse;"
    },
    {
        "line": 219,
        "fullcodeline": "ThrowFileException(exception,CorruptImageError,"
    },
    {
        "line": 231,
        "fullcodeline": "SetPixelRed(image,ScaleCharToQuantum(*p++),q);"
    },
    {
        "line": 292,
        "fullcodeline": "SetPixelGreen(chroma_image,ScaleShortToQuantum(((*p) << 8) |"
    },
    {
        "line": 294,
        "fullcodeline": "p+=2;"
    },
    {
        "line": 336,
        "fullcodeline": "SetPixelBlue(chroma_image,ScaleShortToQuantum(((*p) << 8) |"
    },
    {
        "line": 338,
        "fullcodeline": "p+=2;"
    },
    {
        "line": 234,
        "fullcodeline": "SetPixelRed(image,ScaleShortToQuantum(((*p) << 8) | *(p+1)),q);"
    },
    {
        "line": 235,
        "fullcodeline": "p+=2;"
    },
    {
        "line": 176,
        "fullcodeline": "*(p+1)),chroma_pixels);"
    },
    {
        "line": 196,
        "fullcodeline": "*(p+1)),chroma_pixels);"
    },
    {
        "line": 293,
        "fullcodeline": "*(p+1)),q);"
    },
    {
        "line": 337,
        "fullcodeline": "*(p+1)),q);"
    }
]