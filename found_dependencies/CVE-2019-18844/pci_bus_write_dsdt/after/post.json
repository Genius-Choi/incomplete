[
    {
        "line": 22,
        "fullcodeline": "dsdt_line(\"  Device (PCI%01X)\", bus);"
    },
    {
        "line": 23,
        "fullcodeline": "dsdt_line(\"  {\");"
    },
    {
        "line": 24,
        "fullcodeline": "dsdt_line(\"    Name (_HID, EisaId (\\\"PNP0A03\\\"))\");"
    },
    {
        "line": 25,
        "fullcodeline": "dsdt_line(\"    Name (_ADR, Zero)\");"
    },
    {
        "line": 27,
        "fullcodeline": "dsdt_line(\"    Method (_BBN, 0, NotSerialized)\");"
    },
    {
        "line": 28,
        "fullcodeline": "dsdt_line(\"    {\");"
    },
    {
        "line": 29,
        "fullcodeline": "dsdt_line(\"        Return (0x%08X)\", bus);"
    },
    {
        "line": 30,
        "fullcodeline": "dsdt_line(\"    }\");"
    },
    {
        "line": 31,
        "fullcodeline": "dsdt_line(\"    Name (_CRS, ResourceTemplate ()\");"
    },
    {
        "line": 32,
        "fullcodeline": "dsdt_line(\"    {\");"
    },
    {
        "line": 33,
        "fullcodeline": "dsdt_line(\"      WordBusNumber (ResourceProducer, MinFixed, \""
    },
    {
        "line": 35,
        "fullcodeline": "dsdt_line(\"        0x0000,             // Granularity\");"
    },
    {
        "line": 36,
        "fullcodeline": "dsdt_line(\"        0x%04X,             // Range Minimum\", bus);"
    },
    {
        "line": 37,
        "fullcodeline": "dsdt_line(\"        0x%04X,             // Range Maximum\", bus);"
    },
    {
        "line": 38,
        "fullcodeline": "dsdt_line(\"        0x0000,             // Translation Offset\");"
    },
    {
        "line": 39,
        "fullcodeline": "dsdt_line(\"        0x0001,             // Length\");"
    },
    {
        "line": 40,
        "fullcodeline": "dsdt_line(\"        ,, )\");"
    },
    {
        "line": 74,
        "fullcodeline": "dsdt_line(\"      WordIO (ResourceProducer, MinFixed, MaxFixed, \""
    },
    {
        "line": 76,
        "fullcodeline": "dsdt_line(\"        0x0000,             // Granularity\");"
    },
    {
        "line": 77,
        "fullcodeline": "dsdt_line(\"        0x%04X,             // Range Minimum\", bi->iobase);"
    },
    {
        "line": 78,
        "fullcodeline": "dsdt_line(\"        0x%04X,             // Range Maximum\","
    },
    {
        "line": 80,
        "fullcodeline": "dsdt_line(\"        0x0000,             // Translation Offset\");"
    },
    {
        "line": 81,
        "fullcodeline": "dsdt_line(\"        0x%04X,             // Length\","
    },
    {
        "line": 83,
        "fullcodeline": "dsdt_line(\"        ,, , TypeStatic)\");"
    },
    {
        "line": 86,
        "fullcodeline": "dsdt_line(\"      DWordMemory (ResourceProducer, PosDecode, \""
    },
    {
        "line": 88,
        "fullcodeline": "dsdt_line(\"        0x00000000,         // Granularity\");"
    },
    {
        "line": 89,
        "fullcodeline": "dsdt_line(\"        0x%08X,         // Range Minimum\\n\", bi->membase32);"
    },
    {
        "line": 90,
        "fullcodeline": "dsdt_line(\"        0x%08X,         // Range Maximum\\n\","
    },
    {
        "line": 92,
        "fullcodeline": "dsdt_line(\"        0x00000000,         // Translation Offset\");"
    },
    {
        "line": 93,
        "fullcodeline": "dsdt_line(\"        0x%08X,         // Length\\n\","
    },
    {
        "line": 95,
        "fullcodeline": "dsdt_line(\"        ,, , AddressRangeMemory, TypeStatic)\");"
    },
    {
        "line": 98,
        "fullcodeline": "dsdt_line(\"      QWordMemory (ResourceProducer, PosDecode, \""
    },
    {
        "line": 100,
        "fullcodeline": "dsdt_line(\"        0x0000000000000000, // Granularity\");"
    },
    {
        "line": 101,
        "fullcodeline": "dsdt_line(\"        0x%016lX, // Range Minimum\\n\", bi->membase64);"
    },
    {
        "line": 102,
        "fullcodeline": "dsdt_line(\"        0x%016lX, // Range Maximum\\n\","
    },
    {
        "line": 104,
        "fullcodeline": "dsdt_line(\"        0x0000000000000000, // Translation Offset\");"
    },
    {
        "line": 105,
        "fullcodeline": "dsdt_line(\"        0x%016lX, // Length\\n\","
    },
    {
        "line": 107,
        "fullcodeline": "dsdt_line(\"        ,, , AddressRangeMemory, TypeStatic)\");"
    },
    {
        "line": 108,
        "fullcodeline": "dsdt_line(\"    })\");"
    },
    {
        "line": 137,
        "fullcodeline": "dsdt_indent(2);"
    },
    {
        "line": 147,
        "fullcodeline": "dsdt_unindent(2);"
    },
    {
        "line": 149,
        "fullcodeline": "dsdt_line(\"  }\");"
    },
    {
        "line": 12,
        "fullcodeline": "if (bi == NULL) {"
    },
    {
        "line": 42,
        "fullcodeline": "if (bus == 0) {"
    },
    {
        "line": 79,
        "fullcodeline": "bi->iolimit - 1);"
    },
    {
        "line": 82,
        "fullcodeline": "bi->iolimit - bi->iobase);"
    },
    {
        "line": 91,
        "fullcodeline": "bi->memlimit32 - 1);"
    },
    {
        "line": 94,
        "fullcodeline": "bi->memlimit32 - bi->membase32);"
    },
    {
        "line": 103,
        "fullcodeline": "bi->memlimit64 - 1);"
    },
    {
        "line": 106,
        "fullcodeline": "bi->memlimit64 - bi->membase64);"
    },
    {
        "line": 110,
        "fullcodeline": "if (!is_rtvm) {"
    },
    {
        "line": 138,
        "fullcodeline": "for (slot = 0; slot < MAXSLOTS; slot++) {"
    },
    {
        "line": 43,
        "fullcodeline": "dsdt_indent(3);"
    },
    {
        "line": 44,
        "fullcodeline": "dsdt_fixed_ioport(0xCF8, 8);"
    },
    {
        "line": 45,
        "fullcodeline": "dsdt_unindent(3);"
    },
    {
        "line": 47,
        "fullcodeline": "dsdt_line(\"      WordIO (ResourceProducer, MinFixed, MaxFixed, \""
    },
    {
        "line": 49,
        "fullcodeline": "dsdt_line(\"        0x0000,             // Granularity\");"
    },
    {
        "line": 50,
        "fullcodeline": "dsdt_line(\"        0x0000,             // Range Minimum\");"
    },
    {
        "line": 51,
        "fullcodeline": "dsdt_line(\"        0x0CF7,             // Range Maximum\");"
    },
    {
        "line": 52,
        "fullcodeline": "dsdt_line(\"        0x0000,             // Translation Offset\");"
    },
    {
        "line": 53,
        "fullcodeline": "dsdt_line(\"        0x0CF8,             // Length\");"
    },
    {
        "line": 54,
        "fullcodeline": "dsdt_line(\"        ,, , TypeStatic)\");"
    },
    {
        "line": 56,
        "fullcodeline": "dsdt_line(\"      WordIO (ResourceProducer, MinFixed, MaxFixed, \""
    },
    {
        "line": 58,
        "fullcodeline": "dsdt_line(\"        0x0000,             // Granularity\");"
    },
    {
        "line": 59,
        "fullcodeline": "dsdt_line(\"        0x0D00,             // Range Minimum\");"
    },
    {
        "line": 60,
        "fullcodeline": "dsdt_line(\"        0x%04X,             // Range Maximum\","
    },
    {
        "line": 62,
        "fullcodeline": "dsdt_line(\"        0x0000,             // Translation Offset\");"
    },
    {
        "line": 63,
        "fullcodeline": "dsdt_line(\"        0x%04X,             // Length\","
    },
    {
        "line": 65,
        "fullcodeline": "dsdt_line(\"        ,, , TypeStatic)\");"
    },
    {
        "line": 111,
        "fullcodeline": "count = pci_count_lintr(bus);"
    },
    {
        "line": 18,
        "fullcodeline": "if (bus != 0)"
    },
    {
        "line": 61,
        "fullcodeline": "PCI_EMUL_IOBASE - 1);"
    },
    {
        "line": 64,
        "fullcodeline": "PCI_EMUL_IOBASE - 0x0D00);"
    },
    {
        "line": 67,
        "fullcodeline": "if (bi == NULL) {"
    },
    {
        "line": 112,
        "fullcodeline": "if (count != 0) {"
    },
    {
        "line": 140,
        "fullcodeline": "for (func = 0; func < MAXFUNCS; func++) {"
    },
    {
        "line": 68,
        "fullcodeline": "dsdt_line(\"    })\");"
    },
    {
        "line": 113,
        "fullcodeline": "dsdt_indent(2);"
    },
    {
        "line": 114,
        "fullcodeline": "dsdt_line(\"Name (PPRT, Package ()\");"
    },
    {
        "line": 115,
        "fullcodeline": "dsdt_line(\"{\");"
    },
    {
        "line": 116,
        "fullcodeline": "pci_walk_lintr(bus, pci_pirq_prt_entry, NULL);"
    },
    {
        "line": 117,
        "fullcodeline": "dsdt_line(\"})\");"
    },
    {
        "line": 118,
        "fullcodeline": "dsdt_line(\"Name (APRT, Package ()\");"
    },
    {
        "line": 119,
        "fullcodeline": "dsdt_line(\"{\");"
    },
    {
        "line": 120,
        "fullcodeline": "pci_walk_lintr(bus, pci_apic_prt_entry, NULL);"
    },
    {
        "line": 121,
        "fullcodeline": "dsdt_line(\"})\");"
    },
    {
        "line": 122,
        "fullcodeline": "dsdt_line(\"Method (_PRT, 0, NotSerialized)\");"
    },
    {
        "line": 123,
        "fullcodeline": "dsdt_line(\"{\");"
    },
    {
        "line": 124,
        "fullcodeline": "dsdt_line(\"  If (PICM)\");"
    },
    {
        "line": 125,
        "fullcodeline": "dsdt_line(\"  {\");"
    },
    {
        "line": 126,
        "fullcodeline": "dsdt_line(\"    Return (APRT)\");"
    },
    {
        "line": 127,
        "fullcodeline": "dsdt_line(\"  }\");"
    },
    {
        "line": 128,
        "fullcodeline": "dsdt_line(\"  Else\");"
    },
    {
        "line": 129,
        "fullcodeline": "dsdt_line(\"  {\");"
    },
    {
        "line": 130,
        "fullcodeline": "dsdt_line(\"    Return (PPRT)\");"
    },
    {
        "line": 131,
        "fullcodeline": "dsdt_line(\"  }\");"
    },
    {
        "line": 132,
        "fullcodeline": "dsdt_line(\"}\");"
    },
    {
        "line": 133,
        "fullcodeline": "dsdt_unindent(2);"
    },
    {
        "line": 142,
        "fullcodeline": "if (dev != NULL &&"
    },
    {
        "line": 143,
        "fullcodeline": "dev->dev_ops->vdev_write_dsdt != NULL)"
    },
    {
        "line": 144,
        "fullcodeline": "dev->dev_ops->vdev_write_dsdt(dev);"
    }
]