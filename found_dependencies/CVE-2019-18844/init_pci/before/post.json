[
    {
        "line": 10,
        "fullcodeline": "int success_cnt = 0;"
    },
    {
        "line": 13,
        "fullcodeline": "pci_emul_iobase = PCI_EMUL_IOBASE;"
    },
    {
        "line": 14,
        "fullcodeline": "pci_emul_membase32 = vm_get_lowmem_limit(ctx);"
    },
    {
        "line": 15,
        "fullcodeline": "pci_emul_membase64 = PCI_EMUL_MEMBASE64;"
    },
    {
        "line": 17,
        "fullcodeline": "create_gsi_sharing_groups();"
    },
    {
        "line": 71,
        "fullcodeline": "error = check_gsi_sharing_violation();"
    },
    {
        "line": 99,
        "fullcodeline": "lpc_pirq_routed();"
    },
    {
        "line": 116,
        "fullcodeline": "lowmem = vm_get_lowmem_size(ctx);"
    },
    {
        "line": 117,
        "fullcodeline": "bzero(&mr, sizeof(struct mem_range));"
    },
    {
        "line": 118,
        "fullcodeline": "mr.name = \"PCI hole (32-bit)\";"
    },
    {
        "line": 119,
        "fullcodeline": "mr.flags = MEM_F_RW;"
    },
    {
        "line": 120,
        "fullcodeline": "mr.base = lowmem;"
    },
    {
        "line": 121,
        "fullcodeline": "mr.size = (4ULL * 1024 * 1024 * 1024) - lowmem;"
    },
    {
        "line": 122,
        "fullcodeline": "mr.handler = pci_emul_fallback_handler;"
    },
    {
        "line": 123,
        "fullcodeline": "error = register_mem_fallback(&mr);"
    },
    {
        "line": 124,
        "fullcodeline": "assert(error == 0);"
    },
    {
        "line": 127,
        "fullcodeline": "bzero(&mr, sizeof(struct mem_range));"
    },
    {
        "line": 128,
        "fullcodeline": "mr.name = \"PCI hole (64-bit)\";"
    },
    {
        "line": 129,
        "fullcodeline": "mr.flags = MEM_F_RW;"
    },
    {
        "line": 130,
        "fullcodeline": "mr.base = PCI_EMUL_MEMBASE64;"
    },
    {
        "line": 131,
        "fullcodeline": "mr.size = PCI_EMUL_MEMLIMIT64 - PCI_EMUL_MEMBASE64;"
    },
    {
        "line": 132,
        "fullcodeline": "mr.handler = pci_emul_fallback_handler;"
    },
    {
        "line": 133,
        "fullcodeline": "error = register_mem_fallback(&mr);"
    },
    {
        "line": 134,
        "fullcodeline": "assert(error == 0);"
    },
    {
        "line": 137,
        "fullcodeline": "bzero(&mr, sizeof(struct mem_range));"
    },
    {
        "line": 138,
        "fullcodeline": "mr.name = \"PCI ECFG\";"
    },
    {
        "line": 139,
        "fullcodeline": "mr.flags = MEM_F_RW;"
    },
    {
        "line": 140,
        "fullcodeline": "mr.base = PCI_EMUL_ECFG_BASE;"
    },
    {
        "line": 141,
        "fullcodeline": "mr.size = PCI_EMUL_ECFG_SIZE;"
    },
    {
        "line": 142,
        "fullcodeline": "mr.handler = pci_emul_ecfg_handler;"
    },
    {
        "line": 143,
        "fullcodeline": "error = register_mem(&mr);"
    },
    {
        "line": 144,
        "fullcodeline": "assert(error == 0);"
    },
    {
        "line": 19,
        "fullcodeline": "for (bus = 0; bus < MAXBUSES; bus++) {"
    },
    {
        "line": 72,
        "fullcodeline": "if (error < 0)"
    },
    {
        "line": 80,
        "fullcodeline": "for (bus = 0; bus < MAXBUSES; bus++) {"
    },
    {
        "line": 149,
        "fullcodeline": "for (bus = 0; bus < MAXBUSES && success_cnt > 0; bus++) {"
    },
    {
        "line": 27,
        "fullcodeline": "bi->iobase = pci_emul_iobase;"
    },
    {
        "line": 28,
        "fullcodeline": "bi->membase32 = pci_emul_membase32;"
    },
    {
        "line": 29,
        "fullcodeline": "bi->membase64 = pci_emul_membase64;"
    },
    {
        "line": 56,
        "fullcodeline": "pci_emul_iobase += BUSIO_ROUNDUP;"
    },
    {
        "line": 57,
        "fullcodeline": "pci_emul_iobase = roundup2(pci_emul_iobase, BUSIO_ROUNDUP);"
    },
    {
        "line": 58,
        "fullcodeline": "bi->iolimit = pci_emul_iobase;"
    },
    {
        "line": 60,
        "fullcodeline": "pci_emul_membase32 += BUSMEM_ROUNDUP;"
    },
    {
        "line": 61,
        "fullcodeline": "pci_emul_membase32 = roundup2(pci_emul_membase32,"
    },
    {
        "line": 63,
        "fullcodeline": "bi->memlimit32 = pci_emul_membase32;"
    },
    {
        "line": 65,
        "fullcodeline": "pci_emul_membase64 += BUSMEM_ROUNDUP;"
    },
    {
        "line": 66,
        "fullcodeline": "pci_emul_membase64 = roundup2(pci_emul_membase64,"
    },
    {
        "line": 68,
        "fullcodeline": "bi->memlimit64 = pci_emul_membase64;"
    },
    {
        "line": 21,
        "fullcodeline": "if (bi == NULL)"
    },
    {
        "line": 31,
        "fullcodeline": "for (slot = 0; slot < MAXSLOTS; slot++) {"
    },
    {
        "line": 82,
        "fullcodeline": "if (bi == NULL)"
    },
    {
        "line": 85,
        "fullcodeline": "for (slot = 0; slot < MAXSLOTS; slot++) {"
    },
    {
        "line": 151,
        "fullcodeline": "if (bi == NULL)"
    },
    {
        "line": 153,
        "fullcodeline": "for (slot = 0; slot < MAXSLOTS && success_cnt > 0; slot++) {"
    },
    {
        "line": 33,
        "fullcodeline": "for (func = 0; func < MAXFUNCS; func++) {"
    },
    {
        "line": 87,
        "fullcodeline": "for (func = 0; func < MAXFUNCS; func++) {"
    },
    {
        "line": 155,
        "fullcodeline": "for (func = 0; func < MAXFUNCS; func++) {"
    },
    {
        "line": 37,
        "fullcodeline": "ops = pci_emul_finddev(fi->fi_name);"
    },
    {
        "line": 38,
        "fullcodeline": "assert(ops != NULL);"
    },
    {
        "line": 40,
        "fullcodeline": "pr_notice(\"pci init %s\\r\\n\", fi->fi_name);"
    },
    {
        "line": 41,
        "fullcodeline": "error = pci_emul_init(ctx, ops, bus, slot,"
    },
    {
        "line": 47,
        "fullcodeline": "success_cnt++;"
    },
    {
        "line": 91,
        "fullcodeline": "pci_lintr_route(fi->fi_devi);"
    },
    {
        "line": 161,
        "fullcodeline": "ops = pci_emul_finddev(fi->fi_name);"
    },
    {
        "line": 162,
        "fullcodeline": "assert(ops != NULL);"
    },
    {
        "line": 163,
        "fullcodeline": "pci_emul_deinit(ctx, ops, bus, slot,"
    },
    {
        "line": 35,
        "fullcodeline": "if (fi->fi_name == NULL)"
    },
    {
        "line": 89,
        "fullcodeline": "if (fi->fi_devi == NULL)"
    },
    {
        "line": 93,
        "fullcodeline": "if (ops && ops->vdev_phys_access)"
    },
    {
        "line": 157,
        "fullcodeline": "if (fi->fi_name == NULL)"
    },
    {
        "line": 159,
        "fullcodeline": "if (success_cnt-- <= 0)"
    },
    {
        "line": 44,
        "fullcodeline": "pr_err(\"pci %s init failed\\n\", fi->fi_name);"
    },
    {
        "line": 94,
        "fullcodeline": "ops->vdev_phys_access(ctx,"
    }
]