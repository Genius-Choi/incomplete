[
    {
        "line": 6,
        "fullcodeline": "cmd = pci_get_cfgdata16(dev, PCIR_COMMAND);\t/* stash old value */"
    },
    {
        "line": 15,
        "fullcodeline": "rshift = (coff & 0x3) * 8;"
    },
    {
        "line": 16,
        "fullcodeline": "readonly = 0xFFFFF880 >> rshift;"
    },
    {
        "line": 18,
        "fullcodeline": "old = CFGREAD(dev, coff, bytes);"
    },
    {
        "line": 19,
        "fullcodeline": "new &= ~readonly;"
    },
    {
        "line": 20,
        "fullcodeline": "new |= (old & readonly);"
    },
    {
        "line": 21,
        "fullcodeline": "CFGWRITE(dev, coff, new, bytes);\t\t/* update config */"
    },
    {
        "line": 23,
        "fullcodeline": "cmd2 = pci_get_cfgdata16(dev, PCIR_COMMAND);\t/* get updated value */"
    },
    {
        "line": 24,
        "fullcodeline": "changed = cmd ^ cmd2;"
    },
    {
        "line": 30,
        "fullcodeline": "for (i = 0; i <= PCI_BARMAX; i++) {"
    },
    {
        "line": 55,
        "fullcodeline": "pr_err(\"%s: invalid bar type %d\\n\", __func__, dev->bar[i].type);"
    },
    {
        "line": 37,
        "fullcodeline": "if (changed & PCIM_CMD_PORTEN) {"
    },
    {
        "line": 47,
        "fullcodeline": "if (changed & PCIM_CMD_MEMEN) {"
    },
    {
        "line": 38,
        "fullcodeline": "if (porten(dev))"
    },
    {
        "line": 48,
        "fullcodeline": "if (memen(dev))"
    },
    {
        "line": 39,
        "fullcodeline": "register_bar(dev, i);"
    },
    {
        "line": 49,
        "fullcodeline": "register_bar(dev, i);"
    },
    {
        "line": 41,
        "fullcodeline": "unregister_bar(dev, i);"
    },
    {
        "line": 51,
        "fullcodeline": "unregister_bar(dev, i);"
    }
]