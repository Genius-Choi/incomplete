[
    {
        "line": 7,
        "fullcodeline": "if (is_pci_gvt(dev)) {"
    },
    {
        "line": 18,
        "fullcodeline": "printf(\"modify_bar_registration: bypass for pci-gvt\\n\");"
    },
    {
        "line": 23,
        "fullcodeline": "bzero(&iop, sizeof(struct inout_port));"
    },
    {
        "line": 24,
        "fullcodeline": "iop.name = dev->name;"
    },
    {
        "line": 25,
        "fullcodeline": "iop.port = dev->bar[idx].addr;"
    },
    {
        "line": 26,
        "fullcodeline": "iop.size = dev->bar[idx].size;"
    },
    {
        "line": 37,
        "fullcodeline": "bzero(&mr, sizeof(struct mem_range));"
    },
    {
        "line": 38,
        "fullcodeline": "mr.name = dev->name;"
    },
    {
        "line": 39,
        "fullcodeline": "mr.base = dev->bar[idx].addr;"
    },
    {
        "line": 40,
        "fullcodeline": "mr.size = dev->bar[idx].size;"
    },
    {
        "line": 51,
        "fullcodeline": "error = EINVAL;"
    },
    {
        "line": 28,
        "fullcodeline": "iop.flags = IOPORT_F_INOUT;"
    },
    {
        "line": 29,
        "fullcodeline": "iop.handler = pci_emul_io_handler;"
    },
    {
        "line": 30,
        "fullcodeline": "iop.arg = dev;"
    },
    {
        "line": 31,
        "fullcodeline": "error = register_inout(&iop);"
    },
    {
        "line": 42,
        "fullcodeline": "mr.flags = MEM_F_RW;"
    },
    {
        "line": 43,
        "fullcodeline": "mr.handler = pci_emul_mem_handler;"
    },
    {
        "line": 44,
        "fullcodeline": "mr.arg1 = dev;"
    },
    {
        "line": 45,
        "fullcodeline": "mr.arg2 = idx;"
    },
    {
        "line": 46,
        "fullcodeline": "error = register_mem(&mr);"
    },
    {
        "line": 33,
        "fullcodeline": "error = unregister_inout(&iop);"
    },
    {
        "line": 48,
        "fullcodeline": "error = unregister_mem(&mr);"
    }
]