[
    {
        "line": 7,
        "fullcodeline": "assert(idx >= 0 && idx <= PCI_BARMAX);"
    },
    {
        "line": 83,
        "fullcodeline": "bar = (addr & mask) | lobits;"
    },
    {
        "line": 84,
        "fullcodeline": "pci_set_cfgdata32(pdi, PCIR_BAR(idx), bar);"
    },
    {
        "line": 9,
        "fullcodeline": "if ((size & (size - 1)) != 0)"
    },
    {
        "line": 13,
        "fullcodeline": "if (type == PCIBAR_IO) {"
    },
    {
        "line": 72,
        "fullcodeline": "if (baseptr != NULL) {"
    },
    {
        "line": 86,
        "fullcodeline": "if (type == PCIBAR_MEM64) {"
    },
    {
        "line": 10,
        "fullcodeline": "size = 1UL << flsl(size);\t/* round up to a power of 2 */"
    },
    {
        "line": 23,
        "fullcodeline": "baseptr = NULL;"
    },
    {
        "line": 24,
        "fullcodeline": "addr = mask = lobits = 0;"
    },
    {
        "line": 27,
        "fullcodeline": "baseptr = &pci_emul_iobase;"
    },
    {
        "line": 28,
        "fullcodeline": "limit = PCI_EMUL_IOLIMIT;"
    },
    {
        "line": 29,
        "fullcodeline": "mask = PCIM_BAR_IO_BASE;"
    },
    {
        "line": 30,
        "fullcodeline": "lobits = PCIM_BAR_IO_SPACE;"
    },
    {
        "line": 56,
        "fullcodeline": "limit = PCI_EMUL_MEMLIMIT64;"
    },
    {
        "line": 57,
        "fullcodeline": "mask = PCIM_BAR_MEM_BASE;"
    },
    {
        "line": 58,
        "fullcodeline": "lobits = PCIM_BAR_MEM_SPACE | PCIM_BAR_MEM_64 |"
    },
    {
        "line": 62,
        "fullcodeline": "baseptr = &pci_emul_membase32;"
    },
    {
        "line": 63,
        "fullcodeline": "limit = PCI_EMUL_MEMLIMIT32;"
    },
    {
        "line": 64,
        "fullcodeline": "mask = PCIM_BAR_MEM_BASE;"
    },
    {
        "line": 65,
        "fullcodeline": "lobits = PCIM_BAR_MEM_SPACE | PCIM_BAR_MEM_32;"
    },
    {
        "line": 68,
        "fullcodeline": "printf(\"%s: invalid bar type %d\\n\", __func__, type);"
    },
    {
        "line": 69,
        "fullcodeline": "assert(0);"
    },
    {
        "line": 73,
        "fullcodeline": "error = pci_emul_alloc_resource(baseptr, limit, size, &addr);"
    },
    {
        "line": 88,
        "fullcodeline": "pdi->bar[idx + 1].type = PCIBAR_MEMHI64;"
    },
    {
        "line": 89,
        "fullcodeline": "pci_set_cfgdata32(pdi, PCIR_BAR(idx + 1), bar >> 32);"
    },
    {
        "line": 14,
        "fullcodeline": "if (size < 4)"
    },
    {
        "line": 41,
        "fullcodeline": "if (!skip_pci_mem64bar_workaround && (size <= 32 * 1024 * 1024)) {"
    },
    {
        "line": 52,
        "fullcodeline": "if (size == 0x100000000UL)"
    },
    {
        "line": 74,
        "fullcodeline": "if (error != 0)"
    },
    {
        "line": 87,
        "fullcodeline": "assert(idx + 1 <= PCI_BARMAX);"
    },
    {
        "line": 15,
        "fullcodeline": "size = 4;"
    },
    {
        "line": 17,
        "fullcodeline": "if (size < 16)"
    },
    {
        "line": 42,
        "fullcodeline": "baseptr = &pci_emul_membase32;"
    },
    {
        "line": 43,
        "fullcodeline": "limit = PCI_EMUL_MEMLIMIT32;"
    },
    {
        "line": 44,
        "fullcodeline": "mask = PCIM_BAR_MEM_BASE;"
    },
    {
        "line": 45,
        "fullcodeline": "lobits = PCIM_BAR_MEM_SPACE | PCIM_BAR_MEM_64;"
    },
    {
        "line": 53,
        "fullcodeline": "baseptr = &hostbase;"
    },
    {
        "line": 18,
        "fullcodeline": "size = 16;"
    },
    {
        "line": 55,
        "fullcodeline": "baseptr = &pci_emul_membase64;"
    }
]