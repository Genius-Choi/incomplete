[
    {
        "line": 3,
        "fullcodeline": "struct xfrm_user_tmpl vec[XFRM_MAX_DEPTH];"
    },
    {
        "line": 6,
        "fullcodeline": "if (xp->xfrm_nr == 0)"
    },
    {
        "line": 9,
        "fullcodeline": "for (i = 0; i < xp->xfrm_nr; i++) {"
    },
    {
        "line": 25,
        "fullcodeline": "return nla_put(skb, XFRMA_TMPL,"
    },
    {
        "line": 10,
        "fullcodeline": "struct xfrm_user_tmpl *up = &vec[i];"
    },
    {
        "line": 13,
        "fullcodeline": "memcpy(&up->id, &kp->id, sizeof(up->id));"
    },
    {
        "line": 14,
        "fullcodeline": "up->family = kp->encap_family;"
    },
    {
        "line": 15,
        "fullcodeline": "memcpy(&up->saddr, &kp->saddr, sizeof(up->saddr));"
    },
    {
        "line": 16,
        "fullcodeline": "up->reqid = kp->reqid;"
    },
    {
        "line": 17,
        "fullcodeline": "up->mode = kp->mode;"
    },
    {
        "line": 18,
        "fullcodeline": "up->share = kp->share;"
    },
    {
        "line": 19,
        "fullcodeline": "up->optional = kp->optional;"
    },
    {
        "line": 20,
        "fullcodeline": "up->aalgos = kp->aalgos;"
    },
    {
        "line": 21,
        "fullcodeline": "up->ealgos = kp->ealgos;"
    },
    {
        "line": 22,
        "fullcodeline": "up->calgos = kp->calgos;"
    },
    {
        "line": 26,
        "fullcodeline": "sizeof(struct xfrm_user_tmpl) * xp->xfrm_nr, vec);"
    }
]