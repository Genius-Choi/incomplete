[
    {
        "line": 3,
        "fullcodeline": "auto* endpoint = p.mutable_token_endpoint();"
    },
    {
        "line": 4,
        "fullcodeline": "endpoint->set_cluster(\"auth.example.com\");"
    },
    {
        "line": 5,
        "fullcodeline": "endpoint->set_uri(\"auth.example.com/_oauth\");"
    },
    {
        "line": 6,
        "fullcodeline": "endpoint->mutable_timeout()->set_seconds(1);"
    },
    {
        "line": 7,
        "fullcodeline": "p.set_redirect_uri(\"%REQ(:scheme)%://%REQ(:authority)%\" + TEST_CALLBACK);"
    },
    {
        "line": 8,
        "fullcodeline": "p.mutable_redirect_path_matcher()->mutable_path()->set_exact(TEST_CALLBACK);"
    },
    {
        "line": 9,
        "fullcodeline": "p.set_authorization_endpoint(\"https://auth.example.com/oauth/authorize/\");"
    },
    {
        "line": 10,
        "fullcodeline": "p.mutable_signout_path()->mutable_path()->set_exact(\"/_signout\");"
    },
    {
        "line": 11,
        "fullcodeline": "p.set_forward_bearer_token(true);"
    },
    {
        "line": 12,
        "fullcodeline": "p.add_auth_scopes(\"user\");"
    },
    {
        "line": 13,
        "fullcodeline": "p.add_auth_scopes(\"openid\");"
    },
    {
        "line": 14,
        "fullcodeline": "p.add_auth_scopes(\"email\");"
    },
    {
        "line": 15,
        "fullcodeline": "p.add_resources(\"oauth2-resource\");"
    },
    {
        "line": 16,
        "fullcodeline": "p.add_resources(\"http://example.com\");"
    },
    {
        "line": 17,
        "fullcodeline": "p.add_resources(\"https://example.com\");"
    },
    {
        "line": 18,
        "fullcodeline": "auto* matcher = p.add_pass_through_matcher();"
    },
    {
        "line": 19,
        "fullcodeline": "matcher->set_name(\":method\");"
    },
    {
        "line": 20,
        "fullcodeline": "matcher->mutable_string_match()->set_exact(\"OPTIONS\");"
    },
    {
        "line": 21,
        "fullcodeline": "auto credentials = p.mutable_credentials();"
    },
    {
        "line": 22,
        "fullcodeline": "credentials->set_client_id(TEST_CLIENT_ID);"
    },
    {
        "line": 23,
        "fullcodeline": "credentials->mutable_token_secret()->set_name(\"secret\");"
    },
    {
        "line": 24,
        "fullcodeline": "credentials->mutable_hmac_secret()->set_name(\"hmac\");"
    },
    {
        "line": 28,
        "fullcodeline": "MessageUtil::validate(p, ProtobufMessage::getStrictValidationVisitor());"
    },
    {
        "line": 31,
        "fullcodeline": "auto secret_reader = std::make_shared<MockSecretReader>();"
    },
    {
        "line": 32,
        "fullcodeline": "FilterConfigSharedPtr c = std::make_shared<FilterConfig>(p, factory_context_.cluster_manager_,"
    }
]