[
    {
        "line": 21,
        "fullcodeline": "auto& crypto_util = Envoy::Common::Crypto::UtilitySingleton::get();"
    },
    {
        "line": 23,
        "fullcodeline": "auto token_secret = config_->tokenSecret();"
    },
    {
        "line": 25,
        "fullcodeline": "const std::string pre_encoded_token ="
    },
    {
        "line": 28,
        "fullcodeline": "absl::Base64Escape(pre_encoded_token, &encoded_token);"
    },
    {
        "line": 31,
        "fullcodeline": "const std::string cookie_tail = fmt::format(CookieTailFormatString, new_expires_);"
    },
    {
        "line": 32,
        "fullcodeline": "const std::string cookie_tail_http_only ="
    },
    {
        "line": 39,
        "fullcodeline": "Http::ResponseHeaderMapPtr response_headers{Http::createHeaderMap<Http::ResponseHeaderMapImpl>("
    },
    {
        "line": 42,
        "fullcodeline": "const CookieNames& cookie_names = config_->cookieNames();"
    },
    {
        "line": 44,
        "fullcodeline": "response_headers->addReferenceKey("
    },
    {
        "line": 47,
        "fullcodeline": "response_headers->addReferenceKey("
    },
    {
        "line": 68,
        "fullcodeline": "response_headers->setLocation(state_);"
    },
    {
        "line": 70,
        "fullcodeline": "decoder_callbacks_->encodeHeaders(std::move(response_headers), true, REDIRECT_LOGGED_IN);"
    },
    {
        "line": 15,
        "fullcodeline": "if (config_->forwardBearerToken()) {"
    },
    {
        "line": 24,
        "fullcodeline": "std::vector<uint8_t> token_secret_vec(token_secret.begin(), token_secret.end());"
    },
    {
        "line": 26,
        "fullcodeline": "Hex::encode(crypto_util.getSha256Hmac(token_secret_vec, token_payload));"
    },
    {
        "line": 33,
        "fullcodeline": "fmt::format(CookieTailHttpOnlyFormatString, new_expires_);"
    },
    {
        "line": 46,
        "fullcodeline": "absl::StrCat(cookie_names.oauth_hmac_, \"=\", encoded_token, cookie_tail_http_only));"
    },
    {
        "line": 49,
        "fullcodeline": "absl::StrCat(cookie_names.oauth_expires_, \"=\", new_expires_, cookie_tail_http_only));"
    },
    {
        "line": 53,
        "fullcodeline": "if (config_->forwardBearerToken()) {"
    },
    {
        "line": 9,
        "fullcodeline": "config_->stats().oauth_success_.inc();"
    },
    {
        "line": 10,
        "fullcodeline": "decoder_callbacks_->continueDecoding();"
    },
    {
        "line": 16,
        "fullcodeline": "token_payload = absl::StrCat(host_, new_expires_, access_token_, id_token_, refresh_token_);"
    },
    {
        "line": 54,
        "fullcodeline": "response_headers->addReferenceKey("
    },
    {
        "line": 6,
        "fullcodeline": "if (config_->forwardBearerToken()) {"
    },
    {
        "line": 18,
        "fullcodeline": "token_payload = absl::StrCat(host_, new_expires_);"
    },
    {
        "line": 56,
        "fullcodeline": "absl::StrCat(cookie_names.bearer_token_, \"=\", access_token_, cookie_tail));"
    },
    {
        "line": 57,
        "fullcodeline": "if (id_token_ != EMPTY_STRING) {"
    },
    {
        "line": 62,
        "fullcodeline": "if (refresh_token_ != EMPTY_STRING) {"
    },
    {
        "line": 7,
        "fullcodeline": "setBearerToken(*request_headers_, access_token_);"
    },
    {
        "line": 58,
        "fullcodeline": "response_headers->addReferenceKey(Http::Headers::get().SetCookie,"
    },
    {
        "line": 63,
        "fullcodeline": "response_headers->addReferenceKey(Http::Headers::get().SetCookie,"
    },
    {
        "line": 59,
        "fullcodeline": "absl::StrCat(\"IdToken=\", id_token_, cookie_tail));"
    },
    {
        "line": 64,
        "fullcodeline": "absl::StrCat(\"RefreshToken=\", refresh_token_, cookie_tail));"
    },
    {
        "line": 40,
        "fullcodeline": "{{Http::Headers::get().Status, std::to_string(enumToInt(Http::Code::Found))}})};"
    }
]