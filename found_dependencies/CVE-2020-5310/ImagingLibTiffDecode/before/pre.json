[
    {
        "line": 2,
        "fullcodeline": "TIFFSTATE *clientstate = (TIFFSTATE *)state->context;"
    },
    {
        "line": 3,
        "fullcodeline": "char *filename = \"tempfile.tif\";"
    },
    {
        "line": 4,
        "fullcodeline": "char *mode = \"r\";"
    },
    {
        "line": 10,
        "fullcodeline": "TRACE((\"in decoder: bytes %d\\n\", bytes));"
    },
    {
        "line": 11,
        "fullcodeline": "TRACE((\"State: count %d, state %d, x %d, y %d, ystep %d\\n\", state->count, state->state,"
    },
    {
        "line": 13,
        "fullcodeline": "TRACE((\"State: xsize %d, ysize %d, xoff %d, yoff %d \\n\", state->xsize, state->ysize,"
    },
    {
        "line": 15,
        "fullcodeline": "TRACE((\"State: bits %d, bytes %d \\n\", state->bits, state->bytes));"
    },
    {
        "line": 16,
        "fullcodeline": "TRACE((\"Buffer: %p: %c%c%c%c\\n\", buffer, (char)buffer[0], (char)buffer[1],(char)buffer[2], (char)buffer[3]));"
    },
    {
        "line": 17,
        "fullcodeline": "TRACE((\"State->Buffer: %c%c%c%c\\n\", (char)state->buffer[0], (char)state->buffer[1],(char)state->buffer[2], (char)state->buffer[3]));"
    },
    {
        "line": 18,
        "fullcodeline": "TRACE((\"Image: mode %s, type %d, bands: %d, xsize %d, ysize %d \\n\","
    },
    {
        "line": 20,
        "fullcodeline": "TRACE((\"Image: image8 %p, image32 %p, image %p, block %p \\n\","
    },
    {
        "line": 22,
        "fullcodeline": "TRACE((\"Image: pixelsize: %d, linesize %d \\n\","
    },
    {
        "line": 25,
        "fullcodeline": "dump_state(clientstate);"
    },
    {
        "line": 26,
        "fullcodeline": "clientstate->size = bytes;"
    },
    {
        "line": 27,
        "fullcodeline": "clientstate->eof = clientstate->size;"
    },
    {
        "line": 28,
        "fullcodeline": "clientstate->loc = 0;"
    },
    {
        "line": 29,
        "fullcodeline": "clientstate->data = (tdata_t)buffer;"
    },
    {
        "line": 30,
        "fullcodeline": "clientstate->flrealloc = 0;"
    },
    {
        "line": 31,
        "fullcodeline": "dump_state(clientstate);"
    },
    {
        "line": 33,
        "fullcodeline": "TIFFSetWarningHandler(NULL);"
    },
    {
        "line": 34,
        "fullcodeline": "TIFFSetWarningHandlerExt(NULL);"
    },
    {
        "line": 49,
        "fullcodeline": "if (!tiff){"
    },
    {
        "line": 66,
        "fullcodeline": "if (TIFFIsTiled(tiff)) {"
    },
    {
        "line": 181,
        "fullcodeline": "return -1;"
    },
    {
        "line": 37,
        "fullcodeline": "TRACE((\"Opening using fd: %d\\n\",clientstate->fp));"
    },
    {
        "line": 38,
        "fullcodeline": "lseek(clientstate->fp,0,SEEK_SET); // Sometimes, I get it set to the end."
    },
    {
        "line": 39,
        "fullcodeline": "tiff = TIFFFdOpen(clientstate->fp, filename, mode);"
    },
    {
        "line": 50,
        "fullcodeline": "TRACE((\"Error, didn't get the tiff\\n\"));"
    },
    {
        "line": 51,
        "fullcodeline": "state->errcode = IMAGING_CODEC_BROKEN;"
    },
    {
        "line": 57,
        "fullcodeline": "uint32 ifdoffset = clientstate->ifd;"
    },
    {
        "line": 59,
        "fullcodeline": "rv = TIFFSetSubDirectory(tiff, ifdoffset);"
    },
    {
        "line": 71,
        "fullcodeline": "TIFFGetField(tiff, TIFFTAG_TILEWIDTH, &tile_width);"
    },
    {
        "line": 72,
        "fullcodeline": "TIFFGetField(tiff, TIFFTAG_TILELENGTH, &tile_length);"
    },
    {
        "line": 75,
        "fullcodeline": "row_byte_size = (tile_width * state->bits + 7) / 8;"
    },
    {
        "line": 76,
        "fullcodeline": "state->bytes = row_byte_size * tile_length;"
    },
    {
        "line": 86,
        "fullcodeline": "new_data = realloc (state->buffer, state->bytes);"
    },
    {
        "line": 93,
        "fullcodeline": "state->buffer = new_data;"
    },
    {
        "line": 41,
        "fullcodeline": "TRACE((\"Opening from string\\n\"));"
    },
    {
        "line": 42,
        "fullcodeline": "tiff = TIFFClientOpen(filename, mode,"
    },
    {
        "line": 52,
        "fullcodeline": "return -1;"
    },
    {
        "line": 58,
        "fullcodeline": "TRACE((\"reading tiff ifd %u\\n\", ifdoffset));"
    },
    {
        "line": 79,
        "fullcodeline": "if (state->bytes > INT_MAX - 1) {"
    },
    {
        "line": 87,
        "fullcodeline": "if (!new_data) {"
    },
    {
        "line": 95,
        "fullcodeline": "TRACE((\"TIFFTileSize: %d\\n\", state->bytes));"
    },
    {
        "line": 97,
        "fullcodeline": "for (y = state->yoff; y < state->ysize; y += tile_length) {"
    },
    {
        "line": 130,
        "fullcodeline": "ret = TIFFGetField(tiff, TIFFTAG_ROWSPERSTRIP, &rows_per_strip);"
    },
    {
        "line": 137,
        "fullcodeline": "row_byte_size = (state->xsize * state->bits + 7) / 8;"
    },
    {
        "line": 138,
        "fullcodeline": "state->bytes = rows_per_strip * row_byte_size;"
    },
    {
        "line": 143,
        "fullcodeline": "new_data = realloc (state->buffer, state->bytes);"
    },
    {
        "line": 150,
        "fullcodeline": "state->buffer = new_data;"
    },
    {
        "line": 134,
        "fullcodeline": "TRACE((\"RowsPerStrip: %u \\n\", rows_per_strip));"
    },
    {
        "line": 140,
        "fullcodeline": "TRACE((\"StripSize: %d \\n\", state->bytes));"
    },
    {
        "line": 144,
        "fullcodeline": "if (!new_data) {"
    },
    {
        "line": 152,
        "fullcodeline": "for (; state->y < state->ysize; state->y += rows_per_strip) {"
    },
    {
        "line": 43,
        "fullcodeline": "(thandle_t) clientstate,"
    },
    {
        "line": 62,
        "fullcodeline": "return -1;"
    },
    {
        "line": 82,
        "fullcodeline": "return -1;"
    },
    {
        "line": 90,
        "fullcodeline": "return -1;"
    },
    {
        "line": 98,
        "fullcodeline": "for (x = state->xoff; x < state->xsize; x += tile_width) {"
    },
    {
        "line": 132,
        "fullcodeline": "rows_per_strip = state->ysize;"
    },
    {
        "line": 108,
        "fullcodeline": "current_tile_width = min(tile_width, state->xsize - x);"
    },
    {
        "line": 147,
        "fullcodeline": "return -1;"
    },
    {
        "line": 160,
        "fullcodeline": "TRACE((\"Decoded strip for row %d \\n\", state->y));"
    },
    {
        "line": 163,
        "fullcodeline": "for (strip_row = 0; strip_row < min(rows_per_strip, state->ysize - state->y); strip_row++) {"
    },
    {
        "line": 106,
        "fullcodeline": "TRACE((\"Read tile at %dx%d; \\n\\n\", x, y));"
    },
    {
        "line": 111,
        "fullcodeline": "for (tile_y = 0; tile_y < min(tile_length, state->ysize - y); tile_y++) {"
    },
    {
        "line": 153,
        "fullcodeline": "if (ReadStrip(tiff, state->y, (UINT32 *)state->buffer) == -1) {"
    },
    {
        "line": 99,
        "fullcodeline": "if (ReadTile(tiff, x, y, (UINT32*) state->buffer) == -1) {"
    },
    {
        "line": 117,
        "fullcodeline": "state->shuffle((UINT8*) im->image[tile_y + y] + x * im->pixelsize,"
    },
    {
        "line": 154,
        "fullcodeline": "TRACE((\"Decode Error, strip %d\\n\", TIFFComputeStrip(tiff, state->y, 0)));"
    },
    {
        "line": 157,
        "fullcodeline": "return -1;"
    },
    {
        "line": 164,
        "fullcodeline": "TRACE((\"Writing data into line %d ; \\n\", state->y + strip_row));"
    },
    {
        "line": 100,
        "fullcodeline": "TRACE((\"Decode Error, Tile at %dx%d\\n\", x, y));"
    },
    {
        "line": 103,
        "fullcodeline": "return -1;"
    },
    {
        "line": 112,
        "fullcodeline": "TRACE((\"Writing tile data at %dx%d using tile_width: %d; \\n\", tile_y + y, x, current_tile_width));"
    },
    {
        "line": 170,
        "fullcodeline": "state->xoff * im->pixelsize,"
    },
    {
        "line": 171,
        "fullcodeline": "state->buffer + strip_row * row_byte_size,"
    },
    {
        "line": 118,
        "fullcodeline": "state->buffer + tile_y * row_byte_size,"
    }
]