[
    {
        "line": 7,
        "fullcodeline": "LC_ASSERT(ServerMajorVersion >= 5);"
    },
    {
        "line": 15,
        "fullcodeline": "packet = malloc(sizeof(*packet) + paylen);"
    },
    {
        "line": 20,
        "fullcodeline": "packet->type = ptype;"
    },
    {
        "line": 21,
        "fullcodeline": "memcpy(&packet[1], payload, paylen);"
    },
    {
        "line": 40,
        "fullcodeline": "enetPacket = enet_packet_create(packet, sizeof(*packet) + paylen, ENET_PACKET_FLAG_RELIABLE);"
    },
    {
        "line": 53,
        "fullcodeline": "enet_host_flush(client);"
    },
    {
        "line": 55,
        "fullcodeline": "free(packet);"
    },
    {
        "line": 11,
        "fullcodeline": "if (peer == NULL) {"
    },
    {
        "line": 16,
        "fullcodeline": "if (packet == NULL) {"
    },
    {
        "line": 24,
        "fullcodeline": "while ((err = serviceEnetHost(client, &event, 0)) > 0) {"
    },
    {
        "line": 35,
        "fullcodeline": "if (err < 0) {"
    },
    {
        "line": 41,
        "fullcodeline": "if (packet == NULL) {"
    },
    {
        "line": 46,
        "fullcodeline": "if (enet_peer_send(peer, 0, enetPacket) < 0) {"
    },
    {
        "line": 36,
        "fullcodeline": "Limelog(\"Control stream connection failed\\n\");"
    },
    {
        "line": 42,
        "fullcodeline": "free(packet);"
    },
    {
        "line": 47,
        "fullcodeline": "Limelog(\"Failed to send ENet control packet\\n\");"
    },
    {
        "line": 48,
        "fullcodeline": "enet_packet_destroy(enetPacket);"
    },
    {
        "line": 49,
        "fullcodeline": "free(packet);"
    },
    {
        "line": 25,
        "fullcodeline": "if (event.type == ENET_EVENT_TYPE_RECEIVE) {"
    },
    {
        "line": 26,
        "fullcodeline": "enet_packet_destroy(event.packet);"
    },
    {
        "line": 28,
        "fullcodeline": "else if (event.type == ENET_EVENT_TYPE_DISCONNECT) {"
    },
    {
        "line": 29,
        "fullcodeline": "Limelog(\"Control stream received disconnect event\\n\");"
    },
    {
        "line": 30,
        "fullcodeline": "free(packet);"
    }
]