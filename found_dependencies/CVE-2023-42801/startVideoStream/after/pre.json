[
    {
        "line": 6,
        "fullcodeline": "LC_ASSERT(NegotiatedVideoFormat != 0);"
    },
    {
        "line": 7,
        "fullcodeline": "VideoCallbacks.setup(NegotiatedVideoFormat, StreamConfig.width,"
    },
    {
        "line": 10,
        "fullcodeline": "rtpSocket = bindUdpSocket(RemoteAddr.ss_family, RTP_RECV_BUFFER);"
    },
    {
        "line": 15,
        "fullcodeline": "err = PltCreateThread(ReceiveThreadProc, NULL, &receiveThread);"
    },
    {
        "line": 38,
        "fullcodeline": "err = PltCreateThread(UdpPingThreadProc, NULL, &udpPingThread);"
    },
    {
        "line": 11,
        "fullcodeline": "if (rtpSocket == INVALID_SOCKET) {"
    },
    {
        "line": 16,
        "fullcodeline": "if (err != 0) {"
    },
    {
        "line": 27,
        "fullcodeline": "if (AppVersionQuad[0] == 3) {"
    },
    {
        "line": 39,
        "fullcodeline": "if (err != 0) {"
    },
    {
        "line": 20,
        "fullcodeline": "if ((VideoCallbacks.capabilities & CAPABILITY_DIRECT_SUBMIT) == 0) {"
    },
    {
        "line": 21,
        "fullcodeline": "err = PltCreateThread(DecoderThreadProc, NULL, &decoderThread);"
    },
    {
        "line": 29,
        "fullcodeline": "firstFrameSocket = connectTcpSocket(&RemoteAddr, RemoteAddrLen,"
    },
    {
        "line": 45,
        "fullcodeline": "err = readFirstFrame();"
    },
    {
        "line": 12,
        "fullcodeline": "return LastSocketError();"
    },
    {
        "line": 22,
        "fullcodeline": "if (err != 0) {"
    },
    {
        "line": 46,
        "fullcodeline": "if (err != 0) {"
    },
    {
        "line": 32,
        "fullcodeline": "return LastSocketError();"
    }
]