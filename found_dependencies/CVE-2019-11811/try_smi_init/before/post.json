[
    {
        "line": 3,
        "fullcodeline": "int rv = 0;"
    },
    {
        "line": 5,
        "fullcodeline": "char *init_name = NULL;"
    },
    {
        "line": 7,
        "fullcodeline": "pr_info(\"Trying %s-specified %s state machine at %s address 0x%lx, slave address 0x%x, irq %d\\n\","
    },
    {
        "line": 33,
        "fullcodeline": "new_smi->si_num = smi_num;"
    },
    {
        "line": 58,
        "fullcodeline": "new_smi->si_sm = kmalloc(new_smi->handlers->size(), GFP_KERNEL);"
    },
    {
        "line": 63,
        "fullcodeline": "new_smi->io.io_size = new_smi->handlers->init_data(new_smi->si_sm,"
    },
    {
        "line": 67,
        "fullcodeline": "rv = new_smi->io.io_setup(&new_smi->io);"
    },
    {
        "line": 86,
        "fullcodeline": "rv = try_get_dev_id(new_smi);"
    },
    {
        "line": 94,
        "fullcodeline": "setup_oem_data_handler(new_smi);"
    },
    {
        "line": 95,
        "fullcodeline": "setup_xaction_handlers(new_smi);"
    },
    {
        "line": 96,
        "fullcodeline": "check_for_broken_irqs(new_smi);"
    },
    {
        "line": 98,
        "fullcodeline": "new_smi->waiting_msg = NULL;"
    },
    {
        "line": 99,
        "fullcodeline": "new_smi->curr_msg = NULL;"
    },
    {
        "line": 100,
        "fullcodeline": "atomic_set(&new_smi->req_events, 0);"
    },
    {
        "line": 101,
        "fullcodeline": "new_smi->run_to_completion = false;"
    },
    {
        "line": 105,
        "fullcodeline": "new_smi->interrupt_disabled = true;"
    },
    {
        "line": 106,
        "fullcodeline": "atomic_set(&new_smi->need_watch, 0);"
    },
    {
        "line": 108,
        "fullcodeline": "rv = try_enable_event_buffer(new_smi);"
    },
    {
        "line": 116,
        "fullcodeline": "start_clear_flags(new_smi);"
    },
    {
        "line": 138,
        "fullcodeline": "dev_set_drvdata(new_smi->io.dev, new_smi);"
    },
    {
        "line": 139,
        "fullcodeline": "rv = device_add_group(new_smi->io.dev, &ipmi_si_dev_attr_group);"
    },
    {
        "line": 146,
        "fullcodeline": "new_smi->dev_group_added = true;"
    },
    {
        "line": 148,
        "fullcodeline": "rv = ipmi_register_smi(&handlers,"
    },
    {
        "line": 160,
        "fullcodeline": "smi_num++;"
    },
    {
        "line": 162,
        "fullcodeline": "dev_info(new_smi->io.dev, \"IPMI %s interface initialized\\n\","
    },
    {
        "line": 165,
        "fullcodeline": "WARN_ON(new_smi->io.dev->init_name != NULL);"
    },
    {
        "line": 168,
        "fullcodeline": "kfree(init_name);"
    },
    {
        "line": 59,
        "fullcodeline": "if (!new_smi->si_sm) {"
    },
    {
        "line": 74,
        "fullcodeline": "if (new_smi->handlers->detect(new_smi->si_sm)) {"
    },
    {
        "line": 102,
        "fullcodeline": "for (i = 0; i < SI_NUM_STATS; i++)"
    },
    {
        "line": 103,
        "fullcodeline": "atomic_set(&new_smi->stats[i], 0);"
    },
    {
        "line": 109,
        "fullcodeline": "if (rv == 0)"
    },
    {
        "line": 127,
        "fullcodeline": "if (new_smi->pdev && !new_smi->pdev_registered) {"
    },
    {
        "line": 16,
        "fullcodeline": "new_smi->handlers = &kcs_smi_handlers;"
    },
    {
        "line": 20,
        "fullcodeline": "new_smi->handlers = &smic_smi_handlers;"
    },
    {
        "line": 24,
        "fullcodeline": "new_smi->handlers = &bt_smi_handlers;"
    },
    {
        "line": 29,
        "fullcodeline": "rv = -EIO;"
    },
    {
        "line": 37,
        "fullcodeline": "init_name = kasprintf(GFP_KERNEL, \"ipmi_si.%d\","
    },
    {
        "line": 44,
        "fullcodeline": "new_smi->pdev = platform_device_alloc(\"ipmi_si\","
    },
    {
        "line": 54,
        "fullcodeline": "new_smi->io.dev->init_name = init_name;"
    },
    {
        "line": 60,
        "fullcodeline": "rv = -ENOMEM;"
    },
    {
        "line": 69,
        "fullcodeline": "dev_err(new_smi->io.dev, \"Could not set up I/O space\\n\");"
    },
    {
        "line": 78,
        "fullcodeline": "rv = -ENODEV;"
    },
    {
        "line": 110,
        "fullcodeline": "new_smi->has_event_buffer = true;"
    },
    {
        "line": 123,
        "fullcodeline": "new_smi->interrupt_disabled = false;"
    },
    {
        "line": 124,
        "fullcodeline": "atomic_set(&new_smi->req_events, 1);"
    },
    {
        "line": 128,
        "fullcodeline": "rv = platform_device_add(new_smi->pdev);"
    },
    {
        "line": 135,
        "fullcodeline": "new_smi->pdev_registered = true;"
    },
    {
        "line": 141,
        "fullcodeline": "dev_err(new_smi->io.dev,"
    },
    {
        "line": 153,
        "fullcodeline": "dev_err(new_smi->io.dev,"
    },
    {
        "line": 46,
        "fullcodeline": "if (!new_smi->pdev) {"
    },
    {
        "line": 47,
        "fullcodeline": "pr_err(\"Unable to allocate platform device\\n\");"
    },
    {
        "line": 48,
        "fullcodeline": "rv = -ENOMEM;"
    },
    {
        "line": 76,
        "fullcodeline": "dev_err(new_smi->io.dev,"
    },
    {
        "line": 89,
        "fullcodeline": "dev_err(new_smi->io.dev,"
    },
    {
        "line": 130,
        "fullcodeline": "dev_err(new_smi->io.dev,"
    }
]