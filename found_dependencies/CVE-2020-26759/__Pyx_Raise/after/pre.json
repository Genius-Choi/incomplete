[
    {
        "line": 2,
        "fullcodeline": "PyObject* owned_instance = NULL;"
    },
    {
        "line": 83,
        "fullcodeline": "PyErr_SetObject(type, value);"
    },
    {
        "line": 102,
        "fullcodeline": "Py_XDECREF(owned_instance);"
    },
    {
        "line": 3,
        "fullcodeline": "if (tb == Py_None) {"
    },
    {
        "line": 10,
        "fullcodeline": "if (value == Py_None)"
    },
    {
        "line": 12,
        "fullcodeline": "if (PyExceptionInstance_Check(type)) {"
    },
    {
        "line": 4,
        "fullcodeline": "tb = 0;"
    },
    {
        "line": 11,
        "fullcodeline": "value = 0;"
    },
    {
        "line": 18,
        "fullcodeline": "value = type;"
    },
    {
        "line": 19,
        "fullcodeline": "type = (PyObject*) Py_TYPE(value);"
    },
    {
        "line": 81,
        "fullcodeline": "PyException_SetCause(value, fixed_cause);"
    },
    {
        "line": 92,
        "fullcodeline": "PyThreadState *tstate = __Pyx_PyThreadState_Current;"
    },
    {
        "line": 93,
        "fullcodeline": "PyObject* tmp_tb = tstate->curexc_traceback;"
    },
    {
        "line": 66,
        "fullcodeline": "if (cause == Py_None) {"
    },
    {
        "line": 94,
        "fullcodeline": "if (tb != tmp_tb) {"
    },
    {
        "line": 5,
        "fullcodeline": "} else if (tb && !PyTraceBack_Check(tb)) {"
    },
    {
        "line": 14,
        "fullcodeline": "PyErr_SetString(PyExc_TypeError,"
    },
    {
        "line": 20,
        "fullcodeline": "} else if (PyExceptionClass_Check(type)) {"
    },
    {
        "line": 67,
        "fullcodeline": "fixed_cause = NULL;"
    },
    {
        "line": 95,
        "fullcodeline": "Py_INCREF(tb);"
    },
    {
        "line": 96,
        "fullcodeline": "tstate->curexc_traceback = tb;"
    },
    {
        "line": 97,
        "fullcodeline": "Py_XDECREF(tmp_tb);"
    },
    {
        "line": 6,
        "fullcodeline": "PyErr_SetString(PyExc_TypeError,"
    },
    {
        "line": 21,
        "fullcodeline": "PyObject *instance_class = NULL;"
    },
    {
        "line": 22,
        "fullcodeline": "if (value && PyExceptionInstance_Check(value)) {"
    },
    {
        "line": 35,
        "fullcodeline": "if (!instance_class) {"
    },
    {
        "line": 60,
        "fullcodeline": "PyErr_SetString(PyExc_TypeError,"
    },
    {
        "line": 68,
        "fullcodeline": "} else if (PyExceptionClass_Check(cause)) {"
    },
    {
        "line": 23,
        "fullcodeline": "instance_class = (PyObject*) Py_TYPE(value);"
    },
    {
        "line": 46,
        "fullcodeline": "owned_instance = PyObject_Call(type, args, NULL);"
    },
    {
        "line": 47,
        "fullcodeline": "Py_DECREF(args);"
    },
    {
        "line": 50,
        "fullcodeline": "value = owned_instance;"
    },
    {
        "line": 69,
        "fullcodeline": "fixed_cause = PyObject_CallObject(cause, NULL);"
    },
    {
        "line": 24,
        "fullcodeline": "if (instance_class != type) {"
    },
    {
        "line": 37,
        "fullcodeline": "if (!value)"
    },
    {
        "line": 44,
        "fullcodeline": "if (!args)"
    },
    {
        "line": 48,
        "fullcodeline": "if (!owned_instance)"
    },
    {
        "line": 51,
        "fullcodeline": "if (!PyExceptionInstance_Check(value)) {"
    },
    {
        "line": 70,
        "fullcodeline": "if (fixed_cause == NULL)"
    },
    {
        "line": 25,
        "fullcodeline": "int is_subclass = PyObject_IsSubclass(instance_class, type);"
    },
    {
        "line": 38,
        "fullcodeline": "args = PyTuple_New(0);"
    },
    {
        "line": 52,
        "fullcodeline": "PyErr_Format(PyExc_TypeError,"
    },
    {
        "line": 72,
        "fullcodeline": "} else if (PyExceptionInstance_Check(cause)) {"
    },
    {
        "line": 26,
        "fullcodeline": "if (!is_subclass) {"
    },
    {
        "line": 55,
        "fullcodeline": "type, Py_TYPE(value));"
    },
    {
        "line": 73,
        "fullcodeline": "fixed_cause = cause;"
    },
    {
        "line": 74,
        "fullcodeline": "Py_INCREF(fixed_cause);"
    },
    {
        "line": 27,
        "fullcodeline": "instance_class = NULL;"
    },
    {
        "line": 39,
        "fullcodeline": "else if (PyTuple_Check(value)) {"
    },
    {
        "line": 76,
        "fullcodeline": "PyErr_SetString(PyExc_TypeError,"
    },
    {
        "line": 40,
        "fullcodeline": "Py_INCREF(value);"
    },
    {
        "line": 41,
        "fullcodeline": "args = value;"
    },
    {
        "line": 28,
        "fullcodeline": "} else if (unlikely(is_subclass == -1)) {"
    },
    {
        "line": 43,
        "fullcodeline": "args = PyTuple_Pack(1, value);"
    },
    {
        "line": 31,
        "fullcodeline": "type = instance_class;"
    }
]