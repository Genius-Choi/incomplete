[
    {
        "line": 2,
        "fullcodeline": "PyObject *__pyx_r = NULL;"
    },
    {
        "line": 4,
        "fullcodeline": "PyObject *__pyx_t_1 = NULL;"
    },
    {
        "line": 10,
        "fullcodeline": "PyObject *__pyx_t_7 = NULL;"
    },
    {
        "line": 11,
        "fullcodeline": "PyObject *__pyx_t_8 = NULL;"
    },
    {
        "line": 12,
        "fullcodeline": "PyObject *__pyx_t_9 = NULL;"
    },
    {
        "line": 13,
        "fullcodeline": "__Pyx_RefNannySetupContext(\"__pyx_unpickle_BufferedWriter__set_state\", 0);"
    },
    {
        "line": 26,
        "fullcodeline": "__pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)"
    },
    {
        "line": 27,
        "fullcodeline": "__Pyx_GOTREF(__pyx_t_1);"
    },
    {
        "line": 28,
        "fullcodeline": "__pyx_t_2 = __Pyx_PyObject_AsWritableString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)"
    },
    {
        "line": 29,
        "fullcodeline": "__pyx_v___pyx_result->buffer = __pyx_t_2;"
    },
    {
        "line": 30,
        "fullcodeline": "__Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;"
    },
    {
        "line": 35,
        "fullcodeline": "__pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)"
    },
    {
        "line": 36,
        "fullcodeline": "__Pyx_GOTREF(__pyx_t_1);"
    },
    {
        "line": 37,
        "fullcodeline": "__pyx_t_3 = __Pyx_PyIndex_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_3 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)"
    },
    {
        "line": 38,
        "fullcodeline": "__Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;"
    },
    {
        "line": 39,
        "fullcodeline": "__pyx_v___pyx_result->buffer_size = __pyx_t_3;"
    },
    {
        "line": 44,
        "fullcodeline": "__pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)"
    },
    {
        "line": 45,
        "fullcodeline": "__Pyx_GOTREF(__pyx_t_1);"
    },
    {
        "line": 46,
        "fullcodeline": "__pyx_t_3 = __Pyx_PyIndex_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_3 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)"
    },
    {
        "line": 47,
        "fullcodeline": "__Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;"
    },
    {
        "line": 48,
        "fullcodeline": "__pyx_v___pyx_result->position = __pyx_t_3;"
    },
    {
        "line": 60,
        "fullcodeline": "__pyx_t_3 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)"
    },
    {
        "line": 61,
        "fullcodeline": "__pyx_t_5 = ((__pyx_t_3 > 3) != 0);"
    },
    {
        "line": 67,
        "fullcodeline": "__pyx_t_5 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)"
    },
    {
        "line": 68,
        "fullcodeline": "__pyx_t_6 = (__pyx_t_5 != 0);"
    },
    {
        "line": 69,
        "fullcodeline": "__pyx_t_4 = __pyx_t_6;"
    },
    {
        "line": 124,
        "fullcodeline": "__pyx_r = Py_None; __Pyx_INCREF(Py_None);"
    },
    {
        "line": 131,
        "fullcodeline": "__Pyx_AddTraceback(\"clickhouse_driver.bufferedwriter.__pyx_unpickle_BufferedWriter__set_state\", __pyx_clineno, __pyx_lineno, __pyx_filename);"
    },
    {
        "line": 132,
        "fullcodeline": "__pyx_r = 0;"
    },
    {
        "line": 134,
        "fullcodeline": "__Pyx_XGIVEREF(__pyx_r);"
    },
    {
        "line": 135,
        "fullcodeline": "__Pyx_RefNannyFinishContext();"
    },
    {
        "line": 56,
        "fullcodeline": "if (unlikely(__pyx_v___pyx_state == Py_None)) {"
    },
    {
        "line": 22,
        "fullcodeline": "if (unlikely(__pyx_v___pyx_state == Py_None)) {"
    },
    {
        "line": 23,
        "fullcodeline": "PyErr_SetString(PyExc_TypeError, \"'NoneType' object is not subscriptable\");"
    },
    {
        "line": 24,
        "fullcodeline": "__PYX_ERR(1, 12, __pyx_L1_error)"
    },
    {
        "line": 31,
        "fullcodeline": "if (unlikely(__pyx_v___pyx_state == Py_None)) {"
    },
    {
        "line": 32,
        "fullcodeline": "PyErr_SetString(PyExc_TypeError, \"'NoneType' object is not subscriptable\");"
    },
    {
        "line": 33,
        "fullcodeline": "__PYX_ERR(1, 12, __pyx_L1_error)"
    },
    {
        "line": 40,
        "fullcodeline": "if (unlikely(__pyx_v___pyx_state == Py_None)) {"
    },
    {
        "line": 41,
        "fullcodeline": "PyErr_SetString(PyExc_TypeError, \"'NoneType' object is not subscriptable\");"
    },
    {
        "line": 42,
        "fullcodeline": "__PYX_ERR(1, 12, __pyx_L1_error)"
    },
    {
        "line": 57,
        "fullcodeline": "PyErr_SetString(PyExc_TypeError, \"object of type 'NoneType' has no len()\");"
    },
    {
        "line": 58,
        "fullcodeline": "__PYX_ERR(1, 13, __pyx_L1_error)"
    },
    {
        "line": 78,
        "fullcodeline": "__pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)"
    },
    {
        "line": 79,
        "fullcodeline": "__Pyx_GOTREF(__pyx_t_7);"
    },
    {
        "line": 80,
        "fullcodeline": "__pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_update); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 14, __pyx_L1_error)"
    },
    {
        "line": 81,
        "fullcodeline": "__Pyx_GOTREF(__pyx_t_8);"
    },
    {
        "line": 82,
        "fullcodeline": "__Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;"
    },
    {
        "line": 87,
        "fullcodeline": "__pyx_t_7 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)"
    },
    {
        "line": 88,
        "fullcodeline": "__Pyx_GOTREF(__pyx_t_7);"
    },
    {
        "line": 89,
        "fullcodeline": "__pyx_t_9 = NULL;"
    },
    {
        "line": 99,
        "fullcodeline": "__pyx_t_1 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_9, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_7);"
    },
    {
        "line": 100,
        "fullcodeline": "__Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;"
    },
    {
        "line": 101,
        "fullcodeline": "__Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;"
    },
    {
        "line": 102,
        "fullcodeline": "if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 14, __pyx_L1_error)"
    },
    {
        "line": 103,
        "fullcodeline": "__Pyx_GOTREF(__pyx_t_1);"
    },
    {
        "line": 104,
        "fullcodeline": "__Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;"
    },
    {
        "line": 105,
        "fullcodeline": "__Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;"
    },
    {
        "line": 64,
        "fullcodeline": "__pyx_t_4 = __pyx_t_5;"
    },
    {
        "line": 83,
        "fullcodeline": "if (unlikely(__pyx_v___pyx_state == Py_None)) {"
    },
    {
        "line": 90,
        "fullcodeline": "if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {"
    },
    {
        "line": 84,
        "fullcodeline": "PyErr_SetString(PyExc_TypeError, \"'NoneType' object is not subscriptable\");"
    },
    {
        "line": 85,
        "fullcodeline": "__PYX_ERR(1, 14, __pyx_L1_error)"
    },
    {
        "line": 91,
        "fullcodeline": "__pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);"
    },
    {
        "line": 92,
        "fullcodeline": "if (likely(__pyx_t_9)) {"
    },
    {
        "line": 93,
        "fullcodeline": "PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);"
    },
    {
        "line": 94,
        "fullcodeline": "__Pyx_INCREF(__pyx_t_9);"
    },
    {
        "line": 95,
        "fullcodeline": "__Pyx_INCREF(function);"
    },
    {
        "line": 96,
        "fullcodeline": "__Pyx_DECREF_SET(__pyx_t_8, function);"
    }
]