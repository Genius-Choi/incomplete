[
    {
        "line": 6,
        "fullcodeline": "OP_REQUIRES(context, data_format == FORMAT_NHWC,"
    },
    {
        "line": 10,
        "fullcodeline": "OP_REQUIRES(context,"
    },
    {
        "line": 15,
        "fullcodeline": "OP_REQUIRES(context, filter.dim_size(3) == input.dim_size(input.dims() - 1),"
    },
    {
        "line": 20,
        "fullcodeline": "functor::CuboidConvolution<CPUDevice, T>()("
    },
    {
        "line": 7,
        "fullcodeline": "errors::InvalidArgument(\"CPU implementation of Conv3D \""
    },
    {
        "line": 11,
        "fullcodeline": "dilations[0] == 1 && dilations[1] == 1 && dilations[2] == 1,"
    },
    {
        "line": 12,
        "fullcodeline": "errors::InvalidArgument(\"CPU implementation of Conv3D \""
    },
    {
        "line": 16,
        "fullcodeline": "errors::InvalidArgument("
    },
    {
        "line": 21,
        "fullcodeline": "context->eigen_device<CPUDevice>(), output->tensor<T, 5>(),"
    },
    {
        "line": 22,
        "fullcodeline": "input.tensor<T, 5>(), filter.tensor<T, 5>(), strides[2], strides[1],"
    },
    {
        "line": 23,
        "fullcodeline": "strides[0], BrainPadding2EigenPadding(padding));"
    },
    {
        "line": 17,
        "fullcodeline": "\"Number of channels in filter (\", filter.dim_size(3),"
    },
    {
        "line": 19,
        "fullcodeline": "input.dim_size(input.dims() - 1), \")\"));"
    }
]