[
    {
        "line": 3,
        "fullcodeline": "int ret = -1;"
    },
    {
        "line": 4,
        "fullcodeline": "int cert_valid = 0;"
    },
    {
        "line": 5,
        "fullcodeline": "unsigned char digest[SHA256LEN];"
    },
    {
        "line": 8,
        "fullcodeline": "char digest_str[SHA256STRLEN], *subject, *issuer;"
    },
    {
        "line": 12,
        "fullcodeline": "char common_name[FIELD_SIZE + 1];"
    },
    {
        "line": 14,
        "fullcodeline": "SSL_set_verify(tunnel->ssl_handle, SSL_VERIFY_PEER, NULL);"
    },
    {
        "line": 16,
        "fullcodeline": "X509 *cert = SSL_get_peer_certificate(tunnel->ssl_handle);"
    },
    {
        "line": 22,
        "fullcodeline": "subj = X509_get_subject_name(cert);"
    },
    {
        "line": 58,
        "fullcodeline": "digest_str[SHA256STRLEN - 1] = '\\0';"
    },
    {
        "line": 70,
        "fullcodeline": "subject = X509_NAME_oneline(subj, NULL, 0);"
    },
    {
        "line": 71,
        "fullcodeline": "issuer = X509_NAME_oneline(X509_get_issuer_name(cert), NULL, 0);"
    },
    {
        "line": 74,
        "fullcodeline": "log_error(\"    --trusted-cert %s\\n\", digest_str);"
    },
    {
        "line": 76,
        "fullcodeline": "log_error(\"    trusted-cert = %s\\n\", digest_str);"
    },
    {
        "line": 17,
        "fullcodeline": "if (cert == NULL) {"
    },
    {
        "line": 56,
        "fullcodeline": "for (i = 0; i < SHA256LEN; i++)"
    },
    {
        "line": 57,
        "fullcodeline": "sprintf(&digest_str[2 * i], \"%02x\", digest[i]);"
    },
    {
        "line": 60,
        "fullcodeline": "for (elem = tunnel->config->cert_whitelist; elem != NULL;"
    },
    {
        "line": 61,
        "fullcodeline": "elem = elem->next)"
    },
    {
        "line": 64,
        "fullcodeline": "if (elem != NULL) { // break before end of loop"
    },
    {
        "line": 79,
        "fullcodeline": "for (line = strtok(subject, \"/\"); line != NULL;"
    },
    {
        "line": 80,
        "fullcodeline": "line = strtok(NULL, \"/\"))"
    },
    {
        "line": 83,
        "fullcodeline": "for (line = strtok(issuer, \"/\"); line != NULL;"
    },
    {
        "line": 84,
        "fullcodeline": "line = strtok(NULL, \"/\"))"
    },
    {
        "line": 18,
        "fullcodeline": "log_error(\"Unable to get gateway certificate.\\n\");"
    },
    {
        "line": 32,
        "fullcodeline": "if (subj"
    },
    {
        "line": 35,
        "fullcodeline": "&& strncasecmp(common_name, tunnel->config->gateway_host,"
    },
    {
        "line": 37,
        "fullcodeline": "cert_valid = 1;"
    },
    {
        "line": 42,
        "fullcodeline": "&& SSL_get_verify_result(tunnel->ssl_handle) == X509_V_OK) {"
    },
    {
        "line": 44,
        "fullcodeline": "ret = 0;"
    },
    {
        "line": 50,
        "fullcodeline": "if (X509_digest(cert, EVP_sha256(), digest, &len) <= 0"
    },
    {
        "line": 51,
        "fullcodeline": "|| len != SHA256LEN) {"
    },
    {
        "line": 66,
        "fullcodeline": "ret = 0;"
    },
    {
        "line": 33,
        "fullcodeline": "&& X509_NAME_get_text_by_NID(subj, NID_commonName, common_name,"
    },
    {
        "line": 62,
        "fullcodeline": "if (memcmp(digest_str, elem->data, SHA256STRLEN - 1) == 0)"
    }
]