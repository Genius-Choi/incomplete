[
    {
        "line": 20,
        "fullcodeline": "struct _u_endpoint * endpoint_list = ((struct _u_instance *)cls)->endpoint_list, ** current_endpoint_list = NULL, * current_endpoint = NULL;"
    },
    {
        "line": 22,
        "fullcodeline": "int mhd_ret = MHD_NO, callback_ret = U_OK, i, close_loop = 0, inner_error = U_OK, mhd_response_flag;"
    },
    {
        "line": 25,
        "fullcodeline": "int upgrade_protocol = 0;"
    },
    {
        "line": 26,
        "fullcodeline": "char * protocol = NULL, * extension = NULL, ** extension_list = NULL;"
    },
    {
        "line": 35,
        "fullcodeline": "gnutls_certificate_status_t client_cert_status = 0;"
    },
    {
        "line": 38,
        "fullcodeline": "char * content_type, * auth_realm = NULL;"
    },
    {
        "line": 39,
        "fullcodeline": "struct _u_response * response = NULL;"
    },
    {
        "line": 42,
        "fullcodeline": "void * response_buffer = NULL;"
    },
    {
        "line": 43,
        "fullcodeline": "size_t response_buffer_len = 0;"
    },
    {
        "line": 46,
        "fullcodeline": "struct MHD_Response * mhd_response = NULL;"
    },
    {
        "line": 48,
        "fullcodeline": "UNUSED(url);"
    },
    {
        "line": 52,
        "fullcodeline": "if (con_info == NULL) {"
    },
    {
        "line": 57,
        "fullcodeline": "if (con_info->u_instance == NULL) {"
    },
    {
        "line": 53,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_ERROR, \"Ulfius - Error con_info is NULL\");"
    },
    {
        "line": 58,
        "fullcodeline": "con_info->u_instance = (struct _u_instance *)cls;"
    },
    {
        "line": 63,
        "fullcodeline": "ci = MHD_get_connection_info (connection, MHD_CONNECTION_INFO_GNUTLS_SESSION);"
    },
    {
        "line": 82,
        "fullcodeline": "con_info->callback_first_iteration = 0;"
    },
    {
        "line": 84,
        "fullcodeline": "con_info->has_post_processor = 0;"
    },
    {
        "line": 86,
        "fullcodeline": "con_info->request->http_protocol = o_strdup(version);"
    },
    {
        "line": 87,
        "fullcodeline": "con_info->request->http_verb = o_strdup(method);"
    },
    {
        "line": 93,
        "fullcodeline": "memcpy(con_info->request->client_address, so_client, sizeof(struct sockaddr));"
    },
    {
        "line": 103,
        "fullcodeline": "content_type = (char*)u_map_get_case(con_info->request->map_header, ULFIUS_HTTP_HEADER_CONTENT);"
    },
    {
        "line": 64,
        "fullcodeline": "if (ci != NULL && ci->tls_session != NULL) {"
    },
    {
        "line": 89,
        "fullcodeline": "if (con_info->request->client_address == NULL || con_info->request->http_verb == NULL) {"
    },
    {
        "line": 106,
        "fullcodeline": "if (content_type != NULL &&"
    },
    {
        "line": 83,
        "fullcodeline": "so_client = MHD_get_connection_info (connection, MHD_CONNECTION_INFO_CLIENT_ADDRESS)->client_addr;"
    },
    {
        "line": 85,
        "fullcodeline": "con_info->max_post_param_size = ((struct _u_instance *)cls)->max_post_param_size;"
    },
    {
        "line": 90,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_ERROR, \"Ulfius - Error allocating client_address or http_verb\");"
    },
    {
        "line": 95,
        "fullcodeline": "MHD_get_connection_values (connection, MHD_HEADER_KIND, ulfius_fill_map_check_utf8, con_info->request->map_header);"
    },
    {
        "line": 96,
        "fullcodeline": "MHD_get_connection_values (connection, MHD_GET_ARGUMENT_KIND, ulfius_fill_map_check_utf8, &con_info->map_url_initial);"
    },
    {
        "line": 97,
        "fullcodeline": "MHD_get_connection_values (connection, MHD_COOKIE_KIND, ulfius_fill_map_check_utf8, con_info->request->map_cookie);"
    },
    {
        "line": 107,
        "fullcodeline": "(0 == o_strncmp(MHD_HTTP_POST_ENCODING_FORM_URLENCODED, content_type, o_strlen(MHD_HTTP_POST_ENCODING_FORM_URLENCODED)) ||"
    },
    {
        "line": 109,
        "fullcodeline": "con_info->has_post_processor = 1;"
    },
    {
        "line": 110,
        "fullcodeline": "con_info->post_processor = MHD_create_post_processor (connection, ULFIUS_POSTBUFFERSIZE, mhd_iterate_post_data, (void *) con_info);"
    },
    {
        "line": 119,
        "fullcodeline": "} else if (*upload_data_size != 0) {"
    },
    {
        "line": 99,
        "fullcodeline": "MHD_get_connection_values (connection, MHD_HEADER_KIND, ulfius_fill_map, con_info->request->map_header);"
    },
    {
        "line": 100,
        "fullcodeline": "MHD_get_connection_values (connection, MHD_GET_ARGUMENT_KIND, ulfius_fill_map, &con_info->map_url_initial);"
    },
    {
        "line": 101,
        "fullcodeline": "MHD_get_connection_values (connection, MHD_COOKIE_KIND, ulfius_fill_map, con_info->request->map_cookie);"
    },
    {
        "line": 108,
        "fullcodeline": "0 == o_strncmp(MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA, content_type, o_strlen(MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA)))) {"
    },
    {
        "line": 111,
        "fullcodeline": "if (NULL == con_info->post_processor) {"
    },
    {
        "line": 120,
        "fullcodeline": "size_t body_len = con_info->request->binary_body_length + *upload_data_size, upload_data_size_current = *upload_data_size;"
    },
    {
        "line": 65,
        "fullcodeline": "if (((struct _u_instance *)cls)->use_client_cert_auth) {"
    },
    {
        "line": 112,
        "fullcodeline": "ulfius_clean_request_full(con_info->request);"
    },
    {
        "line": 113,
        "fullcodeline": "con_info->request = NULL;"
    },
    {
        "line": 114,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_ERROR, \"Ulfius - Error allocating post_processor\");"
    },
    {
        "line": 122,
        "fullcodeline": "if (((struct _u_instance *)cls)->max_post_body_size > 0 && con_info->request->binary_body_length + *upload_data_size > ((struct _u_instance *)cls)->max_post_body_size) {"
    },
    {
        "line": 127,
        "fullcodeline": "if (body_len >= con_info->request->binary_body_length) {"
    },
    {
        "line": 149,
        "fullcodeline": "current_endpoint_list = ulfius_endpoint_match(method, con_info->request->url_path, endpoint_list);"
    },
    {
        "line": 171,
        "fullcodeline": "mhd_response_flag = MHD_RESPMEM_MUST_FREE;"
    },
    {
        "line": 615,
        "fullcodeline": "o_free(current_endpoint_list);"
    },
    {
        "line": 66,
        "fullcodeline": "if (((ret_cert = gnutls_certificate_verify_peers2(ci->tls_session, &client_cert_status)) != 0 && ret_cert != GNUTLS_E_NO_CERTIFICATE_FOUND) || client_cert_status != 0) {"
    },
    {
        "line": 123,
        "fullcodeline": "body_len = ((struct _u_instance *)cls)->max_post_body_size;"
    },
    {
        "line": 124,
        "fullcodeline": "upload_data_size_current = ((struct _u_instance *)cls)->max_post_body_size - con_info->request->binary_body_length;"
    },
    {
        "line": 128,
        "fullcodeline": "con_info->request->binary_body = o_realloc(con_info->request->binary_body, body_len);"
    },
    {
        "line": 152,
        "fullcodeline": "if ((current_endpoint_list == NULL || current_endpoint_list[0] == NULL) && ((struct _u_instance *)cls)->default_endpoint != NULL && ((struct _u_instance *)cls)->default_endpoint->callback_function != NULL) {"
    },
    {
        "line": 173,
        "fullcodeline": "if (current_endpoint_list[0] != NULL) {"
    },
    {
        "line": 605,
        "fullcodeline": "if (mhd_response_flag == MHD_RESPMEM_MUST_COPY) {"
    },
    {
        "line": 611,
        "fullcodeline": "for (i=0; current_endpoint_list[i] != NULL; i++) {"
    },
    {
        "line": 67,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_ERROR, \"Ulfius - Error gnutls_certificate_verify_peers2\");"
    },
    {
        "line": 129,
        "fullcodeline": "if (con_info->request->binary_body == NULL) {"
    },
    {
        "line": 153,
        "fullcodeline": "current_endpoint_list = o_realloc(current_endpoint_list, 2*sizeof(struct _u_endpoint *));"
    },
    {
        "line": 606,
        "fullcodeline": "o_free(response_buffer);"
    },
    {
        "line": 612,
        "fullcodeline": "ulfius_clean_endpoint(current_endpoint_list[i]);"
    },
    {
        "line": 613,
        "fullcodeline": "o_free(current_endpoint_list[i]);"
    },
    {
        "line": 130,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_ERROR, \"Ulfius - Error allocating memory for con_info->request->binary_body\");"
    },
    {
        "line": 154,
        "fullcodeline": "if (current_endpoint_list != NULL) {"
    },
    {
        "line": 175,
        "fullcodeline": "if (response == NULL) {"
    },
    {
        "line": 593,
        "fullcodeline": "response_buffer = o_strdup(ULFIUS_HTTP_NOT_FOUND_BODY);"
    },
    {
        "line": 68,
        "fullcodeline": "} else if (!ret_cert) {"
    },
    {
        "line": 133,
        "fullcodeline": "memcpy((char*)con_info->request->binary_body + con_info->request->binary_body_length, upload_data, upload_data_size_current);"
    },
    {
        "line": 134,
        "fullcodeline": "con_info->request->binary_body_length += upload_data_size_current;"
    },
    {
        "line": 136,
        "fullcodeline": "const char * content_type = u_map_get_case(con_info->request->map_header, ULFIUS_HTTP_HEADER_CONTENT);"
    },
    {
        "line": 141,
        "fullcodeline": "*upload_data_size = 0;"
    },
    {
        "line": 162,
        "fullcodeline": "current_endpoint_list[1] = NULL;"
    },
    {
        "line": 176,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_ERROR, \"Ulfius - Error allocating response\");"
    },
    {
        "line": 177,
        "fullcodeline": "mhd_ret = MHD_NO;"
    },
    {
        "line": 594,
        "fullcodeline": "if (response_buffer == NULL) {"
    },
    {
        "line": 69,
        "fullcodeline": "pcert = gnutls_certificate_get_peers(ci->tls_session, &listsize);"
    },
    {
        "line": 137,
        "fullcodeline": "if (0 == o_strncmp(MHD_HTTP_POST_ENCODING_FORM_URLENCODED, content_type, o_strlen(MHD_HTTP_POST_ENCODING_FORM_URLENCODED)) ||"
    },
    {
        "line": 155,
        "fullcodeline": "if ((current_endpoint_list[0] = o_malloc(sizeof(struct _u_endpoint))) != NULL) {"
    },
    {
        "line": 164,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_ERROR, \"Ulfius - Error allocating memory for current_endpoint_list of default endpoint\");"
    },
    {
        "line": 595,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_ERROR, \"Ulfius - Error allocating memory for response_buffer\");"
    },
    {
        "line": 596,
        "fullcodeline": "mhd_ret = MHD_NO;"
    },
    {
        "line": 70,
        "fullcodeline": "if ((pcert == NULL) || (listsize == 0)) {"
    },
    {
        "line": 138,
        "fullcodeline": "0 == o_strncmp(MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA, content_type, o_strlen(MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA))) {"
    },
    {
        "line": 139,
        "fullcodeline": "MHD_post_process (con_info->post_processor, upload_data, *upload_data_size);"
    },
    {
        "line": 178,
        "fullcodeline": "} else if (ulfius_init_response(response) != U_OK) {"
    },
    {
        "line": 598,
        "fullcodeline": "response_buffer_len = o_strlen(ULFIUS_HTTP_NOT_FOUND_BODY);"
    },
    {
        "line": 599,
        "fullcodeline": "mhd_response = MHD_CREATE_RESPONSE_FROM_BUFFER_PIMPED (response_buffer_len, response_buffer, mhd_response_flag );"
    },
    {
        "line": 600,
        "fullcodeline": "mhd_ret = MHD_queue_response (connection, MHD_HTTP_NOT_FOUND, mhd_response);"
    },
    {
        "line": 601,
        "fullcodeline": "MHD_destroy_response (mhd_response);"
    },
    {
        "line": 71,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_ERROR, \"Ulfius - Failed to retrieve client certificate chain\");"
    },
    {
        "line": 156,
        "fullcodeline": "if (ulfius_copy_endpoint(current_endpoint_list[0], ((struct _u_instance *)cls)->default_endpoint) != U_OK) {"
    },
    {
        "line": 160,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_ERROR, \"Ulfius - Error allocating memory for current_endpoint_list[0] of default endpoint\");"
    },
    {
        "line": 179,
        "fullcodeline": "o_free(response);"
    },
    {
        "line": 180,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_ERROR, \"Ulfius - Error ulfius_init_response\");"
    },
    {
        "line": 181,
        "fullcodeline": "mhd_ret = MHD_NO;"
    },
    {
        "line": 157,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_ERROR, \"Ulfius - Error ulfius_copy_endpoint for current_endpoint_list[0]\");"
    },
    {
        "line": 190,
        "fullcodeline": "con_info->request->auth_basic_user = MHD_basic_auth_get_username_password(connection, &con_info->request->auth_basic_password);"
    },
    {
        "line": 184,
        "fullcodeline": "if (((struct _u_instance *)cls)->default_headers != NULL && u_map_count(((struct _u_instance *)cls)->default_headers) > 0) {"
    },
    {
        "line": 192,
        "fullcodeline": "for (i=0; current_endpoint_list[i] != NULL && !close_loop; i++) {"
    },
    {
        "line": 485,
        "fullcodeline": "if (!con_info->request->callback_position && ((struct _u_instance *)cls)->default_endpoint != NULL && ((struct _u_instance *)cls)->default_endpoint->callback_function != NULL && mhd_response == NULL) {"
    },
    {
        "line": 569,
        "fullcodeline": "if (mhd_response != NULL) {"
    },
    {
        "line": 73,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_ERROR, \"Ulfius - Failed to initialize client certificate\");"
    },
    {
        "line": 185,
        "fullcodeline": "u_map_clean_full(response->map_header);"
    },
    {
        "line": 186,
        "fullcodeline": "response->map_header = u_map_copy(((struct _u_instance *)cls)->default_headers);"
    },
    {
        "line": 193,
        "fullcodeline": "current_endpoint = current_endpoint_list[i];"
    },
    {
        "line": 194,
        "fullcodeline": "u_map_empty(con_info->request->map_url);"
    },
    {
        "line": 195,
        "fullcodeline": "u_map_copy_into(con_info->request->map_url, &con_info->map_url_initial);"
    },
    {
        "line": 202,
        "fullcodeline": "callback_ret = current_endpoint->callback_function(con_info->request, response, current_endpoint->user_data);"
    },
    {
        "line": 486,
        "fullcodeline": "callback_ret = ((struct _u_instance *)cls)->default_endpoint->callback_function(con_info->request, response, ((struct _u_instance *)cls)->default_endpoint->user_data);"
    },
    {
        "line": 583,
        "fullcodeline": "MHD_destroy_response (mhd_response);"
    },
    {
        "line": 588,
        "fullcodeline": "ulfius_clean_response_full(response);"
    },
    {
        "line": 589,
        "fullcodeline": "response = NULL;"
    },
    {
        "line": 196,
        "fullcodeline": "if (ulfius_parse_url(con_info->request->url_path, current_endpoint, con_info->request->map_url, con_info->u_instance->check_utf8) != U_OK) {"
    },
    {
        "line": 203,
        "fullcodeline": "if (callback_ret != U_CALLBACK_IGNORE) {"
    },
    {
        "line": 206,
        "fullcodeline": "if (response->timeout > 0 && MHD_set_connection_option(connection, MHD_CONNECTION_OPTION_TIMEOUT, response->timeout) !=  MHD_YES) {"
    },
    {
        "line": 209,
        "fullcodeline": "if (response->stream_callback != NULL) {"
    },
    {
        "line": 570,
        "fullcodeline": "if (auth_realm != NULL && inner_error == U_CALLBACK_UNAUTHORIZED) {"
    },
    {
        "line": 585,
        "fullcodeline": "if (response->free_shared_data != NULL && response->shared_data != NULL) {"
    },
    {
        "line": 74,
        "fullcodeline": "} else if (gnutls_x509_crt_import(con_info->request->client_cert, &pcert[0], GNUTLS_X509_FMT_DER)) {"
    },
    {
        "line": 197,
        "fullcodeline": "o_free(response);"
    },
    {
        "line": 198,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_ERROR, \"Ulfius - Error parsing url: \", con_info->request->url_path);"
    },
    {
        "line": 199,
        "fullcodeline": "mhd_ret = MHD_NO;"
    },
    {
        "line": 207,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_ERROR, \"Ulfius - Error setting connection response timeout value\");"
    },
    {
        "line": 212,
        "fullcodeline": "mhd_response = MHD_create_response_from_callback(response->stream_size, response->stream_block_size, response->stream_callback, response->stream_user_data, response->stream_callback_free);"
    },
    {
        "line": 220,
        "fullcodeline": "close_loop = 1;"
    },
    {
        "line": 527,
        "fullcodeline": "close_loop = 1;"
    },
    {
        "line": 528,
        "fullcodeline": "response->status = MHD_HTTP_INTERNAL_SERVER_ERROR;"
    },
    {
        "line": 529,
        "fullcodeline": "response_buffer = o_strdup(ULFIUS_HTTP_ERROR_BODY);"
    },
    {
        "line": 571,
        "fullcodeline": "mhd_ret = MHD_queue_basic_auth_fail_response (connection, auth_realm, mhd_response);"
    },
    {
        "line": 586,
        "fullcodeline": "response->free_shared_data(response->shared_data);"
    },
    {
        "line": 75,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_ERROR, \"Ulfius - Failed to import client certificate\");"
    },
    {
        "line": 76,
        "fullcodeline": "gnutls_x509_crt_deinit(con_info->request->client_cert);"
    },
    {
        "line": 213,
        "fullcodeline": "if (mhd_response == NULL) {"
    },
    {
        "line": 491,
        "fullcodeline": "if (ulfius_get_body_from_response(response, &response_buffer, &response_buffer_len) == U_OK) {"
    },
    {
        "line": 520,
        "fullcodeline": "if (response->auth_realm != NULL) {"
    },
    {
        "line": 530,
        "fullcodeline": "if (response_buffer == NULL) {"
    },
    {
        "line": 541,
        "fullcodeline": "if (ulfius_get_body_from_response(response, &response_buffer, &response_buffer_len) == U_OK) {"
    },
    {
        "line": 214,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_ERROR, \"Ulfius - Error MHD_create_response_from_callback\");"
    },
    {
        "line": 215,
        "fullcodeline": "mhd_ret = MHD_NO;"
    },
    {
        "line": 222,
        "fullcodeline": "} else if (((struct _websocket_handle *)response->websocket_handle)->websocket_manager_callback != NULL ||"
    },
    {
        "line": 492,
        "fullcodeline": "mhd_response = MHD_CREATE_RESPONSE_FROM_BUFFER_PIMPED (response_buffer_len, response_buffer, mhd_response_flag );"
    },
    {
        "line": 521,
        "fullcodeline": "auth_realm = response->auth_realm;"
    },
    {
        "line": 531,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_ERROR, \"Ulfius - Error allocating memory for response_buffer\");"
    },
    {
        "line": 532,
        "fullcodeline": "mhd_ret = MHD_NO;"
    },
    {
        "line": 543,
        "fullcodeline": "mhd_response = MHD_CREATE_RESPONSE_FROM_BUFFER_PIMPED (response_buffer_len, response_buffer, mhd_response_flag );"
    },
    {
        "line": 572,
        "fullcodeline": "} else if (inner_error == U_CALLBACK_UNAUTHORIZED) {"
    },
    {
        "line": 223,
        "fullcodeline": "((struct _websocket_handle *)response->websocket_handle)->websocket_incoming_message_callback != NULL) {"
    },
    {
        "line": 225,
        "fullcodeline": "int websocket_has_error = 0;"
    },
    {
        "line": 387,
        "fullcodeline": "close_loop = 1;"
    },
    {
        "line": 493,
        "fullcodeline": "if (ulfius_set_response_header(mhd_response, response->map_header) == -1 || ulfius_set_response_cookie(mhd_response, response) == -1) {"
    },
    {
        "line": 509,
        "fullcodeline": "response_buffer = o_strdup(ULFIUS_HTTP_ERROR_BODY);"
    },
    {
        "line": 534,
        "fullcodeline": "response_buffer_len = o_strlen(ULFIUS_HTTP_ERROR_BODY);"
    },
    {
        "line": 535,
        "fullcodeline": "mhd_response = MHD_CREATE_RESPONSE_FROM_BUFFER_PIMPED (response_buffer_len, response_buffer, mhd_response_flag );"
    },
    {
        "line": 544,
        "fullcodeline": "if (mhd_response == NULL) {"
    },
    {
        "line": 553,
        "fullcodeline": "response->status = MHD_HTTP_INTERNAL_SERVER_ERROR;"
    },
    {
        "line": 554,
        "fullcodeline": "response_buffer = o_strdup(ULFIUS_HTTP_ERROR_BODY);"
    },
    {
        "line": 573,
        "fullcodeline": "mhd_ret = MHD_queue_response (connection, MHD_HTTP_UNAUTHORIZED, mhd_response);"
    },
    {
        "line": 216,
        "fullcodeline": "} else if (ulfius_set_response_header(mhd_response, response->map_header) == -1 || ulfius_set_response_cookie(mhd_response, response) == -1) {"
    },
    {
        "line": 226,
        "fullcodeline": "if (websocket != NULL && ulfius_init_websocket(websocket) == U_OK) {"
    },
    {
        "line": 494,
        "fullcodeline": "inner_error = U_ERROR_PARAMS;"
    },
    {
        "line": 495,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_ERROR, \"Ulfius - Error setting headers or cookies\");"
    },
    {
        "line": 496,
        "fullcodeline": "response->status = MHD_HTTP_INTERNAL_SERVER_ERROR;"
    },
    {
        "line": 497,
        "fullcodeline": "response->binary_body = o_strdup(ULFIUS_HTTP_ERROR_BODY);"
    },
    {
        "line": 498,
        "fullcodeline": "response->binary_body_length = o_strlen(ULFIUS_HTTP_ERROR_BODY);"
    },
    {
        "line": 510,
        "fullcodeline": "if (response_buffer == NULL) {"
    },
    {
        "line": 522,
        "fullcodeline": "} else if (((struct _u_instance *)cls)->default_auth_realm != NULL) {"
    },
    {
        "line": 545,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_ERROR, \"Ulfius - Error MHD_create_response_from_buffer\");"
    },
    {
        "line": 546,
        "fullcodeline": "mhd_ret = MHD_NO;"
    },
    {
        "line": 555,
        "fullcodeline": "if (response_buffer == NULL) {"
    },
    {
        "line": 217,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_ERROR, \"Ulfius - Error setting headers or cookies\");"
    },
    {
        "line": 218,
        "fullcodeline": "mhd_ret = MHD_NO;"
    },
    {
        "line": 392,
        "fullcodeline": "ulfius_clear_websocket(websocket);"
    },
    {
        "line": 396,
        "fullcodeline": "if ((callback_ret == U_CALLBACK_CONTINUE || callback_ret == U_CALLBACK_IGNORE) && current_endpoint_list[i+1] == NULL) {"
    },
    {
        "line": 499,
        "fullcodeline": "if (response->binary_body == NULL) {"
    },
    {
        "line": 505,
        "fullcodeline": "inner_error = U_CALLBACK_UNAUTHORIZED;"
    },
    {
        "line": 511,
        "fullcodeline": "inner_error = U_ERROR_MEMORY;"
    },
    {
        "line": 512,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_ERROR, \"Ulfius - Error allocating memory for response_buffer\");"
    },
    {
        "line": 513,
        "fullcodeline": "mhd_ret = MHD_NO;"
    },
    {
        "line": 523,
        "fullcodeline": "auth_realm = ((struct _u_instance *)cls)->default_auth_realm;"
    },
    {
        "line": 556,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_ERROR, \"Ulfius - Error allocating memory for response_buffer\");"
    },
    {
        "line": 557,
        "fullcodeline": "mhd_ret = MHD_NO;"
    },
    {
        "line": 230,
        "fullcodeline": "if (NULL != o_strcasestr(u_map_get_case(con_info->request->map_header, \"upgrade\"), U_WEBSOCKET_UPGRADE_VALUE) &&"
    },
    {
        "line": 376,
        "fullcodeline": "response->status = MHD_HTTP_INTERNAL_SERVER_ERROR;"
    },
    {
        "line": 377,
        "fullcodeline": "response_buffer = o_strdup(ULFIUS_HTTP_ERROR_BODY);"
    },
    {
        "line": 385,
        "fullcodeline": "websocket_has_error = 1;"
    },
    {
        "line": 389,
        "fullcodeline": "if (((struct _websocket_handle *)response->websocket_handle)->websocket_onclose_callback != NULL) {"
    },
    {
        "line": 398,
        "fullcodeline": "callback_ret = U_CALLBACK_COMPLETE;"
    },
    {
        "line": 406,
        "fullcodeline": "close_loop = 1;"
    },
    {
        "line": 431,
        "fullcodeline": "close_loop = 1;"
    },
    {
        "line": 470,
        "fullcodeline": "close_loop = 1;"
    },
    {
        "line": 471,
        "fullcodeline": "response->status = MHD_HTTP_INTERNAL_SERVER_ERROR;"
    },
    {
        "line": 472,
        "fullcodeline": "response_buffer = o_strdup(ULFIUS_HTTP_ERROR_BODY);"
    },
    {
        "line": 500,
        "fullcodeline": "inner_error = U_ERROR_MEMORY;"
    },
    {
        "line": 501,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_ERROR, \"Ulfius - Error allocating memory for response->binary_body\");"
    },
    {
        "line": 502,
        "fullcodeline": "mhd_ret = MHD_NO;"
    },
    {
        "line": 515,
        "fullcodeline": "response_buffer_len = o_strlen(ULFIUS_HTTP_ERROR_BODY);"
    },
    {
        "line": 516,
        "fullcodeline": "mhd_response = MHD_CREATE_RESPONSE_FROM_BUFFER_PIMPED (response_buffer_len, response_buffer, mhd_response_flag );"
    },
    {
        "line": 517,
        "fullcodeline": "inner_error = U_CALLBACK_UNAUTHORIZED;"
    },
    {
        "line": 547,
        "fullcodeline": "} else if (ulfius_set_response_header(mhd_response, response->map_header) == -1 || ulfius_set_response_cookie(mhd_response, response) == -1) {"
    },
    {
        "line": 559,
        "fullcodeline": "response_buffer_len = o_strlen(ULFIUS_HTTP_ERROR_BODY);"
    },
    {
        "line": 560,
        "fullcodeline": "mhd_response = MHD_CREATE_RESPONSE_FROM_BUFFER_PIMPED (response_buffer_len, response_buffer, mhd_response_flag );"
    },
    {
        "line": 576,
        "fullcodeline": "mhd_ret = MHD_queue_response (connection,"
    },
    {
        "line": 235,
        "fullcodeline": "0 == o_strcmp(con_info->request->http_verb, \"GET\")) {"
    },
    {
        "line": 236,
        "fullcodeline": "int ret_protocol = U_ERROR, ret_extensions = U_OK;"
    },
    {
        "line": 359,
        "fullcodeline": "o_free(protocol);"
    },
    {
        "line": 360,
        "fullcodeline": "o_free(extension);"
    },
    {
        "line": 378,
        "fullcodeline": "if (response_buffer == NULL) {"
    },
    {
        "line": 390,
        "fullcodeline": "((struct _websocket_handle *)response->websocket_handle)->websocket_onclose_callback(con_info->request, websocket->websocket_manager!=NULL?websocket->websocket_manager:NULL, ((struct _websocket_handle *)response->websocket_handle)->websocket_onclose_user_data);"
    },
    {
        "line": 407,
        "fullcodeline": "if (ulfius_get_body_from_response(response, &response_buffer, &response_buffer_len) == U_OK) {"
    },
    {
        "line": 433,
        "fullcodeline": "if (ulfius_get_body_from_response(response, &response_buffer, &response_buffer_len) == U_OK) {"
    },
    {
        "line": 462,
        "fullcodeline": "if (response->auth_realm != NULL) {"
    },
    {
        "line": 473,
        "fullcodeline": "if (response_buffer == NULL) {"
    },
    {
        "line": 548,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_ERROR, \"Ulfius - Error setting headers or cookies\");"
    },
    {
        "line": 549,
        "fullcodeline": "mhd_ret = MHD_NO;"
    },
    {
        "line": 581,
        "fullcodeline": "mhd_ret = MHD_queue_response (connection, response->status, mhd_response);"
    },
    {
        "line": 234,
        "fullcodeline": "0 == o_strcmp(u_map_get_case(con_info->request->map_header, \"Sec-WebSocket-Version\"), \"13\") &&"
    },
    {
        "line": 238,
        "fullcodeline": "if (u_map_has_key(con_info->request->map_header, \"Sec-WebSocket-Extensions\") && (extension_len = pointer_list_size(((struct _websocket_handle *)response->websocket_handle)->websocket_extension_list))) {"
    },
    {
        "line": 282,
        "fullcodeline": "if (ret_extensions == U_OK &&"
    },
    {
        "line": 362,
        "fullcodeline": "response_buffer = msprintf(\"%s%s%s%s%s%s\","
    },
    {
        "line": 369,
        "fullcodeline": "response->status = MHD_HTTP_BAD_REQUEST;"
    },
    {
        "line": 370,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_DEBUG, \"Ulfius - Error websocket connection: %s\", response_buffer);"
    },
    {
        "line": 371,
        "fullcodeline": "mhd_response = MHD_CREATE_RESPONSE_FROM_BUFFER_PIMPED (o_strlen(response_buffer), response_buffer, mhd_response_flag );"
    },
    {
        "line": 372,
        "fullcodeline": "websocket_has_error = 1;"
    },
    {
        "line": 379,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_ERROR, \"Ulfius - Error allocating memory for response_buffer\");"
    },
    {
        "line": 380,
        "fullcodeline": "mhd_ret = MHD_NO;"
    },
    {
        "line": 409,
        "fullcodeline": "mhd_response = MHD_CREATE_RESPONSE_FROM_BUFFER_PIMPED (response_buffer_len, response_buffer, mhd_response_flag );"
    },
    {
        "line": 434,
        "fullcodeline": "mhd_response = MHD_CREATE_RESPONSE_FROM_BUFFER_PIMPED (response_buffer_len, response_buffer, mhd_response_flag );"
    },
    {
        "line": 463,
        "fullcodeline": "auth_realm = response->auth_realm;"
    },
    {
        "line": 474,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_ERROR, \"Ulfius - Error allocating memory for response_buffer\");"
    },
    {
        "line": 475,
        "fullcodeline": "mhd_ret = MHD_NO;"
    },
    {
        "line": 233,
        "fullcodeline": "0 == o_strcmp(con_info->request->http_protocol, \"HTTP/1.1\") &&"
    },
    {
        "line": 278,
        "fullcodeline": "free_string_array(extension_list);"
    },
    {
        "line": 283,
        "fullcodeline": "(ret_protocol = ulfius_check_first_match(u_map_get_case(con_info->request->map_header, \"Sec-WebSocket-Protocol\"), ((struct _websocket_handle *)response->websocket_handle)->websocket_protocol, \",\", &protocol)) == U_OK) {"
    },
    {
        "line": 284,
        "fullcodeline": "char websocket_accept[32] = {0};"
    },
    {
        "line": 382,
        "fullcodeline": "response_buffer_len = o_strlen(ULFIUS_HTTP_ERROR_BODY);"
    },
    {
        "line": 383,
        "fullcodeline": "mhd_response = MHD_CREATE_RESPONSE_FROM_BUFFER_PIMPED (response_buffer_len, response_buffer, mhd_response_flag );"
    },
    {
        "line": 410,
        "fullcodeline": "if (mhd_response == NULL) {"
    },
    {
        "line": 419,
        "fullcodeline": "response->status = MHD_HTTP_INTERNAL_SERVER_ERROR;"
    },
    {
        "line": 420,
        "fullcodeline": "response_buffer = o_strdup(ULFIUS_HTTP_ERROR_BODY);"
    },
    {
        "line": 435,
        "fullcodeline": "if (ulfius_set_response_header(mhd_response, response->map_header) == -1 || ulfius_set_response_cookie(mhd_response, response) == -1) {"
    },
    {
        "line": 451,
        "fullcodeline": "response_buffer = o_strdup(ULFIUS_HTTP_ERROR_BODY);"
    },
    {
        "line": 477,
        "fullcodeline": "response_buffer_len = o_strlen(ULFIUS_HTTP_ERROR_BODY);"
    },
    {
        "line": 478,
        "fullcodeline": "mhd_response = MHD_CREATE_RESPONSE_FROM_BUFFER_PIMPED (response_buffer_len, response_buffer, mhd_response_flag );"
    },
    {
        "line": 232,
        "fullcodeline": "NULL != o_strcasestr(u_map_get_case(con_info->request->map_header, \"Connection\"), \"Upgrade\") &&"
    },
    {
        "line": 239,
        "fullcodeline": "if (split_string(u_map_get_case(con_info->request->map_header, \"Sec-WebSocket-Extensions\"), \",\", &extension_list)) {"
    },
    {
        "line": 280,
        "fullcodeline": "ret_extensions = ulfius_check_list_match(u_map_get_case(con_info->request->map_header, \"Sec-WebSocket-Extensions\"), ((struct _websocket_handle *)response->websocket_handle)->websocket_extensions, \",\", &extension);"
    },
    {
        "line": 285,
        "fullcodeline": "if (ulfius_generate_handshake_answer(u_map_get_case(con_info->request->map_header, \"Sec-WebSocket-Key\"), websocket_accept)) {"
    },
    {
        "line": 353,
        "fullcodeline": "response->status = MHD_HTTP_BAD_REQUEST;"
    },
    {
        "line": 354,
        "fullcodeline": "response_buffer = msprintf(\"%s%s\", (ret_protocol!=U_OK?\"Error validating protocol\\n\":\"\"), (ret_extensions!=U_OK?\"Error validating extensions\":\"\"));"
    },
    {
        "line": 355,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_DEBUG, \"Ulfius - Error websocket connection: %s\", response_buffer);"
    },
    {
        "line": 356,
        "fullcodeline": "mhd_response = MHD_CREATE_RESPONSE_FROM_BUFFER_PIMPED (o_strlen(response_buffer), response_buffer, mhd_response_flag );"
    },
    {
        "line": 357,
        "fullcodeline": "websocket_has_error = 1;"
    },
    {
        "line": 363,
        "fullcodeline": "o_strcasestr(u_map_get_case(con_info->request->map_header, \"upgrade\"), U_WEBSOCKET_UPGRADE_VALUE)==NULL?\"No Upgrade websocket header\\n\":\"\","
    },
    {
        "line": 364,
        "fullcodeline": "o_strcasestr(u_map_get_case(con_info->request->map_header, \"Connection\"), \"Upgrade\")==NULL?\"No Connection Upgrade header\\n\":\"\","
    },
    {
        "line": 365,
        "fullcodeline": "u_map_get_case(con_info->request->map_header, \"Sec-WebSocket-Key\")==NULL?\"No Sec-WebSocket-Key header\\n\":\"\","
    },
    {
        "line": 366,
        "fullcodeline": "o_strcmp(con_info->request->http_protocol, \"HTTP/1.1\")!=0?\"Wrong HTTP Protocol\\n\":\"\","
    },
    {
        "line": 367,
        "fullcodeline": "o_strcmp(u_map_get_case(con_info->request->map_header, \"Sec-WebSocket-Version\"), \"13\")!=0?\"Wrong websocket version\\n\":\"\","
    },
    {
        "line": 368,
        "fullcodeline": "o_strcmp(con_info->request->http_verb, \"GET\")!=0?\"Method is not GET\\n\":\"\");"
    },
    {
        "line": 411,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_ERROR, \"Ulfius - Error MHD_create_response_from_buffer\");"
    },
    {
        "line": 412,
        "fullcodeline": "mhd_ret = MHD_NO;"
    },
    {
        "line": 421,
        "fullcodeline": "if (response_buffer == NULL) {"
    },
    {
        "line": 436,
        "fullcodeline": "inner_error = U_ERROR_PARAMS;"
    },
    {
        "line": 437,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_ERROR, \"Ulfius - Error setting headers or cookies\");"
    },
    {
        "line": 438,
        "fullcodeline": "response->status = MHD_HTTP_INTERNAL_SERVER_ERROR;"
    },
    {
        "line": 439,
        "fullcodeline": "response->binary_body = o_strdup(ULFIUS_HTTP_ERROR_BODY);"
    },
    {
        "line": 440,
        "fullcodeline": "response->binary_body_length = o_strlen(ULFIUS_HTTP_ERROR_BODY);"
    },
    {
        "line": 452,
        "fullcodeline": "if (response_buffer == NULL) {"
    },
    {
        "line": 464,
        "fullcodeline": "} else if (((struct _u_instance *)cls)->default_auth_realm != NULL) {"
    },
    {
        "line": 231,
        "fullcodeline": "NULL != u_map_get_case(con_info->request->map_header, \"Sec-WebSocket-Key\") &&"
    },
    {
        "line": 286,
        "fullcodeline": "websocket->request = ulfius_duplicate_request(con_info->request);"
    },
    {
        "line": 422,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_ERROR, \"Ulfius - Error allocating memory for response_buffer\");"
    },
    {
        "line": 423,
        "fullcodeline": "mhd_ret = MHD_NO;"
    },
    {
        "line": 441,
        "fullcodeline": "if (response->binary_body == NULL) {"
    },
    {
        "line": 447,
        "fullcodeline": "inner_error = U_CALLBACK_UNAUTHORIZED;"
    },
    {
        "line": 453,
        "fullcodeline": "inner_error = U_ERROR_MEMORY;"
    },
    {
        "line": 454,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_ERROR, \"Ulfius - Error allocating memory for response_buffer\");"
    },
    {
        "line": 455,
        "fullcodeline": "mhd_ret = MHD_NO;"
    },
    {
        "line": 465,
        "fullcodeline": "auth_realm = ((struct _u_instance *)cls)->default_auth_realm;"
    },
    {
        "line": 240,
        "fullcodeline": "for (x=0; extension_list[x]!=NULL; x++) {"
    },
    {
        "line": 276,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_ERROR, \"Ulfius - Error split_string Sec-WebSocket-Extensions\");"
    },
    {
        "line": 287,
        "fullcodeline": "if (websocket->request != NULL) {"
    },
    {
        "line": 341,
        "fullcodeline": "response->status = MHD_HTTP_INTERNAL_SERVER_ERROR;"
    },
    {
        "line": 342,
        "fullcodeline": "response_buffer = o_strdup(ULFIUS_HTTP_ERROR_BODY);"
    },
    {
        "line": 350,
        "fullcodeline": "websocket_has_error = 1;"
    },
    {
        "line": 413,
        "fullcodeline": "} else if (ulfius_set_response_header(mhd_response, response->map_header) == -1 || ulfius_set_response_cookie(mhd_response, response) == -1) {"
    },
    {
        "line": 425,
        "fullcodeline": "response_buffer_len = o_strlen(ULFIUS_HTTP_ERROR_BODY);"
    },
    {
        "line": 426,
        "fullcodeline": "mhd_response = MHD_CREATE_RESPONSE_FROM_BUFFER_PIMPED (response_buffer_len, response_buffer, mhd_response_flag );"
    },
    {
        "line": 442,
        "fullcodeline": "inner_error = U_ERROR_MEMORY;"
    },
    {
        "line": 443,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_ERROR, \"Ulfius - Error allocating memory for response->binary_body\");"
    },
    {
        "line": 444,
        "fullcodeline": "mhd_ret = MHD_NO;"
    },
    {
        "line": 457,
        "fullcodeline": "response_buffer_len = o_strlen(ULFIUS_HTTP_ERROR_BODY);"
    },
    {
        "line": 458,
        "fullcodeline": "mhd_response = MHD_CREATE_RESPONSE_FROM_BUFFER_PIMPED (response_buffer_len, response_buffer, mhd_response_flag );"
    },
    {
        "line": 459,
        "fullcodeline": "inner_error = U_CALLBACK_UNAUTHORIZED;"
    },
    {
        "line": 288,
        "fullcodeline": "websocket->instance = (struct _u_instance *)cls;"
    },
    {
        "line": 289,
        "fullcodeline": "websocket->websocket_manager_callback = ((struct _websocket_handle *)response->websocket_handle)->websocket_manager_callback;"
    },
    {
        "line": 291,
        "fullcodeline": "websocket->websocket_incoming_message_callback = ((struct _websocket_handle *)response->websocket_handle)->websocket_incoming_message_callback;"
    },
    {
        "line": 293,
        "fullcodeline": "websocket->websocket_onclose_callback = ((struct _websocket_handle *)response->websocket_handle)->websocket_onclose_callback;"
    },
    {
        "line": 294,
        "fullcodeline": "websocket->websocket_onclose_user_data = ((struct _websocket_handle *)response->websocket_handle)->websocket_onclose_user_data;"
    },
    {
        "line": 295,
        "fullcodeline": "websocket->websocket_manager->rsv_expected = ((struct _websocket_handle *)response->websocket_handle)->rsv_expected;"
    },
    {
        "line": 296,
        "fullcodeline": "websocket->websocket_manager->websocket_extension_list = ((struct _websocket_handle *)response->websocket_handle)->websocket_extension_list;"
    },
    {
        "line": 297,
        "fullcodeline": "((struct _websocket_handle *)response->websocket_handle)->websocket_extension_list = NULL;"
    },
    {
        "line": 298,
        "fullcodeline": "mhd_response = MHD_create_response_for_upgrade(ulfius_start_websocket_cb, websocket);"
    },
    {
        "line": 343,
        "fullcodeline": "if (response_buffer == NULL) {"
    },
    {
        "line": 414,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_ERROR, \"Ulfius - Error setting headers or cookies\");"
    },
    {
        "line": 415,
        "fullcodeline": "mhd_ret = MHD_NO;"
    },
    {
        "line": 241,
        "fullcodeline": "for (y=0; y<extension_len; y++) {"
    },
    {
        "line": 299,
        "fullcodeline": "if (mhd_response == NULL) {"
    },
    {
        "line": 328,
        "fullcodeline": "response->status = MHD_HTTP_INTERNAL_SERVER_ERROR;"
    },
    {
        "line": 329,
        "fullcodeline": "response_buffer = o_strdup(ULFIUS_HTTP_ERROR_BODY);"
    },
    {
        "line": 337,
        "fullcodeline": "websocket_has_error = 1;"
    },
    {
        "line": 344,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_ERROR, \"Ulfius - Error allocating memory for response_buffer\");"
    },
    {
        "line": 345,
        "fullcodeline": "mhd_ret = MHD_NO;"
    },
    {
        "line": 242,
        "fullcodeline": "struct _websocket_extension * ws_ext = (struct _websocket_extension *)pointer_list_get_at(((struct _websocket_handle *)response->websocket_handle)->websocket_extension_list, y);"
    },
    {
        "line": 290,
        "fullcodeline": "websocket->websocket_manager_user_data = ((struct _websocket_handle *)response->websocket_handle)->websocket_manager_user_data;"
    },
    {
        "line": 292,
        "fullcodeline": "websocket->websocket_incoming_user_data = ((struct _websocket_handle *)response->websocket_handle)->websocket_incoming_user_data;"
    },
    {
        "line": 300,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_ERROR, \"Ulfius - Error MHD_create_response_for_upgrade\");"
    },
    {
        "line": 301,
        "fullcodeline": "mhd_ret = MHD_NO;"
    },
    {
        "line": 330,
        "fullcodeline": "if (response_buffer == NULL) {"
    },
    {
        "line": 347,
        "fullcodeline": "response_buffer_len = o_strlen(ULFIUS_HTTP_ERROR_BODY);"
    },
    {
        "line": 348,
        "fullcodeline": "mhd_response = MHD_CREATE_RESPONSE_FROM_BUFFER_PIMPED (response_buffer_len, response_buffer, mhd_response_flag );"
    },
    {
        "line": 243,
        "fullcodeline": "if (ws_ext != NULL && !ws_ext->enabled) {"
    },
    {
        "line": 303,
        "fullcodeline": "MHD_add_response_header (mhd_response,"
    },
    {
        "line": 306,
        "fullcodeline": "MHD_add_response_header (mhd_response,"
    },
    {
        "line": 309,
        "fullcodeline": "MHD_add_response_header (mhd_response,"
    },
    {
        "line": 331,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_ERROR, \"Ulfius - Error allocating memory for websocket->request\");"
    },
    {
        "line": 332,
        "fullcodeline": "mhd_ret = MHD_NO;"
    },
    {
        "line": 312,
        "fullcodeline": "if (o_strlen(extension)) {"
    },
    {
        "line": 317,
        "fullcodeline": "if (ulfius_set_response_header(mhd_response, response->map_header) == -1 || ulfius_set_response_cookie(mhd_response, response) == -1) {"
    },
    {
        "line": 334,
        "fullcodeline": "response_buffer_len = o_strlen(ULFIUS_HTTP_ERROR_BODY);"
    },
    {
        "line": 335,
        "fullcodeline": "mhd_response = MHD_CREATE_RESPONSE_FROM_BUFFER_PIMPED (response_buffer_len, response_buffer, mhd_response_flag );"
    },
    {
        "line": 244,
        "fullcodeline": "if (ws_ext->websocket_extension_server_match != NULL) {"
    },
    {
        "line": 313,
        "fullcodeline": "MHD_add_response_header (mhd_response,"
    },
    {
        "line": 318,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_ERROR, \"Ulfius - Error setting headers or cookies\");"
    },
    {
        "line": 319,
        "fullcodeline": "mhd_ret = MHD_NO;"
    },
    {
        "line": 320,
        "fullcodeline": "websocket_has_error = 1;"
    },
    {
        "line": 322,
        "fullcodeline": "ulfius_instance_add_websocket_active((struct _u_instance *)cls, websocket);"
    },
    {
        "line": 323,
        "fullcodeline": "upgrade_protocol = 1;"
    },
    {
        "line": 245,
        "fullcodeline": "if (ws_ext->websocket_extension_server_match(trimwhitespace(extension_list[x]), (const char **)extension_list, &ws_ext->extension_client, ws_ext->websocket_extension_server_match_user_data, &ws_ext->context) == U_OK) {"
    },
    {
        "line": 258,
        "fullcodeline": "if (0 == o_strcmp(extension_list[x], ws_ext->extension_server)) {"
    },
    {
        "line": 246,
        "fullcodeline": "if (!(ws_ext->rsv & ((struct _websocket_handle *)response->websocket_handle)->rsv_expected)) {"
    },
    {
        "line": 247,
        "fullcodeline": "((struct _websocket_handle *)response->websocket_handle)->rsv_expected |= ws_ext->rsv;"
    },
    {
        "line": 248,
        "fullcodeline": "ws_ext->enabled = 1;"
    },
    {
        "line": 259,
        "fullcodeline": "if (!(ws_ext->rsv & ((struct _websocket_handle *)response->websocket_handle)->rsv_expected)) {"
    },
    {
        "line": 249,
        "fullcodeline": "if (extension != NULL) {"
    },
    {
        "line": 260,
        "fullcodeline": "ws_ext->extension_client = o_strdup(extension_list[x]);"
    },
    {
        "line": 261,
        "fullcodeline": "((struct _websocket_handle *)response->websocket_handle)->rsv_expected |= ws_ext->rsv;"
    },
    {
        "line": 262,
        "fullcodeline": "ws_ext->enabled = 1;"
    },
    {
        "line": 250,
        "fullcodeline": "extension = mstrcatf(extension, \", %s\", ws_ext->extension_client);"
    },
    {
        "line": 263,
        "fullcodeline": "if (extension != NULL) {"
    },
    {
        "line": 252,
        "fullcodeline": "extension = o_strdup(ws_ext->extension_client);"
    },
    {
        "line": 264,
        "fullcodeline": "extension = mstrcatf(extension, \", %s\", ws_ext->extension_client);"
    },
    {
        "line": 266,
        "fullcodeline": "extension = o_strdup(ws_ext->extension_client);"
    }
]