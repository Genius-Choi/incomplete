[
    {
        "line": 10,
        "fullcodeline": "unsigned *rate_table = NULL;"
    },
    {
        "line": 12,
        "fullcodeline": "fp = kmemdup(quirk->data, sizeof(*fp), GFP_KERNEL);"
    },
    {
        "line": 31,
        "fullcodeline": "stream = (fp->endpoint & USB_DIR_IN)"
    },
    {
        "line": 33,
        "fullcodeline": "err = snd_usb_add_audio_stream(chip, stream, fp);"
    },
    {
        "line": 45,
        "fullcodeline": "alts = &iface->altsetting[fp->altset_idx];"
    },
    {
        "line": 46,
        "fullcodeline": "altsd = get_iface_desc(alts);"
    },
    {
        "line": 53,
        "fullcodeline": "fp->protocol = altsd->bInterfaceProtocol;"
    },
    {
        "line": 59,
        "fullcodeline": "usb_set_interface(chip->dev, fp->iface, 0);"
    },
    {
        "line": 60,
        "fullcodeline": "snd_usb_init_pitch(chip, fp->iface, alts, fp);"
    },
    {
        "line": 61,
        "fullcodeline": "snd_usb_init_sample_rate(chip, fp->iface, alts, fp, fp->rate_max);"
    },
    {
        "line": 13,
        "fullcodeline": "if (!fp) {"
    },
    {
        "line": 17,
        "fullcodeline": "if (fp->nr_rates > MAX_NR_RATES) {"
    },
    {
        "line": 21,
        "fullcodeline": "if (fp->nr_rates > 0) {"
    },
    {
        "line": 34,
        "fullcodeline": "if (err < 0) {"
    },
    {
        "line": 39,
        "fullcodeline": "if (fp->iface != get_iface_desc(&iface->altsetting[0])->bInterfaceNumber ||"
    },
    {
        "line": 47,
        "fullcodeline": "if (altsd->bNumEndpoints < 1) {"
    },
    {
        "line": 55,
        "fullcodeline": "if (fp->datainterval == 0)"
    },
    {
        "line": 57,
        "fullcodeline": "if (fp->maxpacksize == 0)"
    },
    {
        "line": 14,
        "fullcodeline": "usb_audio_err(chip, \"cannot memdup\\n\");"
    },
    {
        "line": 18,
        "fullcodeline": "kfree(fp);"
    },
    {
        "line": 22,
        "fullcodeline": "rate_table = kmemdup(fp->rate_table,"
    },
    {
        "line": 28,
        "fullcodeline": "fp->rate_table = rate_table;"
    },
    {
        "line": 35,
        "fullcodeline": "kfree(fp);"
    },
    {
        "line": 36,
        "fullcodeline": "kfree(rate_table);"
    },
    {
        "line": 40,
        "fullcodeline": "fp->altset_idx >= iface->num_altsetting) {"
    },
    {
        "line": 41,
        "fullcodeline": "kfree(fp);"
    },
    {
        "line": 42,
        "fullcodeline": "kfree(rate_table);"
    },
    {
        "line": 48,
        "fullcodeline": "kfree(fp);"
    },
    {
        "line": 49,
        "fullcodeline": "kfree(rate_table);"
    },
    {
        "line": 56,
        "fullcodeline": "fp->datainterval = snd_usb_parse_datainterval(chip, alts);"
    },
    {
        "line": 58,
        "fullcodeline": "fp->maxpacksize = le16_to_cpu(get_endpoint(alts, 0)->wMaxPacketSize);"
    },
    {
        "line": 15,
        "fullcodeline": "return -ENOMEM;"
    },
    {
        "line": 19,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 24,
        "fullcodeline": "if (!rate_table) {"
    },
    {
        "line": 43,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 50,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 23,
        "fullcodeline": "sizeof(int) * fp->nr_rates, GFP_KERNEL);"
    },
    {
        "line": 25,
        "fullcodeline": "kfree(fp);"
    },
    {
        "line": 26,
        "fullcodeline": "return -ENOMEM;"
    }
]