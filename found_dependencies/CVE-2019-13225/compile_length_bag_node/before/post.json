[
    {
        "line": 6,
        "fullcodeline": "if (node->type == BAG_OPTION)"
    },
    {
        "line": 9,
        "fullcodeline": "if (NODE_BAG_BODY(node)) {"
    },
    {
        "line": 10,
        "fullcodeline": "tlen = compile_length_tree(NODE_BAG_BODY(node), reg);"
    },
    {
        "line": 99,
        "fullcodeline": "len = 0;"
    },
    {
        "line": 7,
        "fullcodeline": "return compile_length_option_node(node, reg);"
    },
    {
        "line": 11,
        "fullcodeline": "if (tlen < 0) return tlen;"
    },
    {
        "line": 14,
        "fullcodeline": "tlen = 0;"
    },
    {
        "line": 48,
        "fullcodeline": "len += tlen + (MEM_STATUS_AT0(reg->bt_mem_end, node->m.regnum)"
    },
    {
        "line": 54,
        "fullcodeline": "if (NODE_IS_STOP_BT_SIMPLE_REPEAT(node)) {"
    },
    {
        "line": 73,
        "fullcodeline": "Node* cond = NODE_BAG_BODY(node);"
    },
    {
        "line": 77,
        "fullcodeline": "len = compile_length_tree(cond, reg);"
    },
    {
        "line": 79,
        "fullcodeline": "len += SIZE_OP_PUSH;"
    },
    {
        "line": 80,
        "fullcodeline": "len += SIZE_OP_ATOMIC_START + SIZE_OP_ATOMIC_END;"
    },
    {
        "line": 43,
        "fullcodeline": "if (MEM_STATUS_AT0(reg->bt_mem_start, node->m.regnum))"
    },
    {
        "line": 58,
        "fullcodeline": "qn = QUANT_(NODE_BAG_BODY(node));"
    },
    {
        "line": 59,
        "fullcodeline": "tlen = compile_length_tree(NODE_QUANT_BODY(qn), reg);"
    },
    {
        "line": 62,
        "fullcodeline": "v = onig_positive_int_multiply(qn->lower, tlen);"
    },
    {
        "line": 64,
        "fullcodeline": "len = v + SIZE_OP_PUSH + tlen + SIZE_OP_POP_OUT + SIZE_OP_JUMP;"
    },
    {
        "line": 78,
        "fullcodeline": "if (len < 0) return len;"
    },
    {
        "line": 82,
        "fullcodeline": "if (IS_NOT_NULL(Then)) {"
    },
    {
        "line": 88,
        "fullcodeline": "if (IS_NOT_NULL(Else)) {"
    },
    {
        "line": 44,
        "fullcodeline": "len = SIZE_OP_MEMORY_START_PUSH;"
    },
    {
        "line": 60,
        "fullcodeline": "if (tlen < 0) return tlen;"
    },
    {
        "line": 63,
        "fullcodeline": "if (v < 0) return ONIGERR_TOO_BIG_NUMBER_FOR_REPEAT_RANGE;"
    },
    {
        "line": 67,
        "fullcodeline": "len = SIZE_OP_ATOMIC_START + tlen + SIZE_OP_ATOMIC_END;"
    },
    {
        "line": 83,
        "fullcodeline": "tlen = compile_length_tree(Then, reg);"
    },
    {
        "line": 85,
        "fullcodeline": "len += tlen;"
    },
    {
        "line": 89,
        "fullcodeline": "len += SIZE_OP_JUMP;"
    },
    {
        "line": 90,
        "fullcodeline": "tlen = compile_length_tree(Else, reg);"
    },
    {
        "line": 92,
        "fullcodeline": "len += tlen;"
    },
    {
        "line": 46,
        "fullcodeline": "len = SIZE_OP_MEMORY_START;"
    },
    {
        "line": 84,
        "fullcodeline": "if (tlen < 0) return tlen;"
    },
    {
        "line": 91,
        "fullcodeline": "if (tlen < 0) return tlen;"
    }
]