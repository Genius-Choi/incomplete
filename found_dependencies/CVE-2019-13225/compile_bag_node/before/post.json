[
    {
        "line": 7,
        "fullcodeline": "r = compile_bag_memory_node(node, reg, env);"
    },
    {
        "line": 11,
        "fullcodeline": "r = compile_option_node(node, reg, env);"
    },
    {
        "line": 15,
        "fullcodeline": "if (NODE_IS_STOP_BT_SIMPLE_REPEAT(node)) {"
    },
    {
        "line": 48,
        "fullcodeline": "Node* cond = NODE_BAG_BODY(node);"
    },
    {
        "line": 52,
        "fullcodeline": "r = add_op(reg, OP_ATOMIC_START);"
    },
    {
        "line": 55,
        "fullcodeline": "cond_len = compile_length_tree(cond, reg);"
    },
    {
        "line": 64,
        "fullcodeline": "jump_len = cond_len + then_len + SIZE_OP_ATOMIC_END;"
    },
    {
        "line": 67,
        "fullcodeline": "r = add_op(reg, OP_PUSH);"
    },
    {
        "line": 69,
        "fullcodeline": "COP(reg)->push.addr = SIZE_INC_OP + jump_len;"
    },
    {
        "line": 71,
        "fullcodeline": "r = compile_tree(cond, reg, env);"
    },
    {
        "line": 73,
        "fullcodeline": "r = add_op(reg, OP_ATOMIC_END);"
    },
    {
        "line": 16,
        "fullcodeline": "QuantNode* qn = QUANT_(NODE_BAG_BODY(node));"
    },
    {
        "line": 17,
        "fullcodeline": "r = compile_tree_n_times(NODE_QUANT_BODY(qn), qn->lower, reg, env);"
    },
    {
        "line": 20,
        "fullcodeline": "len = compile_length_tree(NODE_QUANT_BODY(qn), reg);"
    },
    {
        "line": 23,
        "fullcodeline": "r = add_op(reg, OP_PUSH);"
    },
    {
        "line": 25,
        "fullcodeline": "COP(reg)->push.addr = SIZE_INC_OP + len + SIZE_OP_POP_OUT + SIZE_OP_JUMP;"
    },
    {
        "line": 27,
        "fullcodeline": "r = compile_tree(NODE_QUANT_BODY(qn), reg, env);"
    },
    {
        "line": 29,
        "fullcodeline": "r = add_op(reg, OP_POP_OUT);"
    },
    {
        "line": 32,
        "fullcodeline": "r = add_op(reg, OP_JUMP);"
    },
    {
        "line": 34,
        "fullcodeline": "COP(reg)->jump.addr = -((int )SIZE_OP_PUSH + len + (int )SIZE_OP_POP_OUT);"
    },
    {
        "line": 53,
        "fullcodeline": "if (r != 0) return r;"
    },
    {
        "line": 56,
        "fullcodeline": "if (cond_len < 0) return cond_len;"
    },
    {
        "line": 57,
        "fullcodeline": "if (IS_NOT_NULL(Then)) {"
    },
    {
        "line": 65,
        "fullcodeline": "if (IS_NOT_NULL(Else)) jump_len += SIZE_OP_JUMP;"
    },
    {
        "line": 68,
        "fullcodeline": "if (r != 0) return r;"
    },
    {
        "line": 72,
        "fullcodeline": "if (r != 0) return r;"
    },
    {
        "line": 74,
        "fullcodeline": "if (r != 0) return r;"
    },
    {
        "line": 76,
        "fullcodeline": "if (IS_NOT_NULL(Then)) {"
    },
    {
        "line": 81,
        "fullcodeline": "if (IS_NOT_NULL(Else)) {"
    },
    {
        "line": 18,
        "fullcodeline": "if (r != 0) return r;"
    },
    {
        "line": 21,
        "fullcodeline": "if (len < 0) return len;"
    },
    {
        "line": 24,
        "fullcodeline": "if (r != 0) return r;"
    },
    {
        "line": 28,
        "fullcodeline": "if (r != 0) return r;"
    },
    {
        "line": 30,
        "fullcodeline": "if (r != 0) return r;"
    },
    {
        "line": 33,
        "fullcodeline": "if (r != 0) return r;"
    },
    {
        "line": 37,
        "fullcodeline": "r = add_op(reg, OP_ATOMIC_START);"
    },
    {
        "line": 39,
        "fullcodeline": "r = compile_tree(NODE_BAG_BODY(node), reg, env);"
    },
    {
        "line": 41,
        "fullcodeline": "r = add_op(reg, OP_ATOMIC_END);"
    },
    {
        "line": 58,
        "fullcodeline": "then_len = compile_length_tree(Then, reg);"
    },
    {
        "line": 77,
        "fullcodeline": "r = compile_tree(Then, reg, env);"
    },
    {
        "line": 82,
        "fullcodeline": "int else_len = compile_length_tree(Else, reg);"
    },
    {
        "line": 83,
        "fullcodeline": "r = add_op(reg, OP_JUMP);"
    },
    {
        "line": 85,
        "fullcodeline": "COP(reg)->jump.addr = else_len + SIZE_INC_OP;"
    },
    {
        "line": 87,
        "fullcodeline": "r = compile_tree(Else, reg, env);"
    },
    {
        "line": 38,
        "fullcodeline": "if (r != 0) return r;"
    },
    {
        "line": 40,
        "fullcodeline": "if (r != 0) return r;"
    },
    {
        "line": 59,
        "fullcodeline": "if (then_len < 0) return then_len;"
    },
    {
        "line": 62,
        "fullcodeline": "then_len = 0;"
    },
    {
        "line": 78,
        "fullcodeline": "if (r != 0) return r;"
    },
    {
        "line": 84,
        "fullcodeline": "if (r != 0) return r;"
    }
]