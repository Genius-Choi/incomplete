[
    {
        "line": 3,
        "fullcodeline": "Authctxt *authctxt = ssh->authctxt;"
    },
    {
        "line": 4,
        "fullcodeline": "gss_OID_desc goid = {0, NULL};"
    },
    {
        "line": 5,
        "fullcodeline": "Gssctxt *ctxt = NULL;"
    },
    {
        "line": 10,
        "fullcodeline": "u_char *doid = NULL;"
    },
    {
        "line": 56,
        "fullcodeline": "authctxt->methoddata = (void *)ctxt;"
    },
    {
        "line": 64,
        "fullcodeline": "free(doid);"
    },
    {
        "line": 66,
        "fullcodeline": "ssh_dispatch_set(ssh, SSH2_MSG_USERAUTH_GSSAPI_TOKEN, &input_gssapi_token);"
    },
    {
        "line": 67,
        "fullcodeline": "ssh_dispatch_set(ssh, SSH2_MSG_USERAUTH_GSSAPI_ERRTOK, &input_gssapi_errtok);"
    },
    {
        "line": 68,
        "fullcodeline": "authctxt->postponed = 1;"
    },
    {
        "line": 12,
        "fullcodeline": "if (!authctxt->valid || authctxt->user == NULL)"
    },
    {
        "line": 15,
        "fullcodeline": "if ((r = sshpkt_get_u32(ssh, &mechs)) != 0)"
    },
    {
        "line": 18,
        "fullcodeline": "if (mechs == 0) {"
    },
    {
        "line": 40,
        "fullcodeline": "} while (mechs > 0 && !present);"
    },
    {
        "line": 42,
        "fullcodeline": "if (!present) {"
    },
    {
        "line": 48,
        "fullcodeline": "if (GSS_ERROR(PRIVSEP(ssh_gssapi_server_ctx(&ctxt, &goid)))) {"
    },
    {
        "line": 59,
        "fullcodeline": "if ((r = sshpkt_start(ssh, SSH2_MSG_USERAUTH_GSSAPI_RESPONSE)) != 0 ||"
    },
    {
        "line": 16,
        "fullcodeline": "fatal(\"%s: %s\", __func__, ssh_err(r));"
    },
    {
        "line": 19,
        "fullcodeline": "debug(\"Mechanism negotiation is not supported\");"
    },
    {
        "line": 24,
        "fullcodeline": "mechs--;"
    },
    {
        "line": 26,
        "fullcodeline": "free(doid);"
    },
    {
        "line": 28,
        "fullcodeline": "present = 0;"
    },
    {
        "line": 43,
        "fullcodeline": "free(doid);"
    },
    {
        "line": 44,
        "fullcodeline": "authctxt->server_caused_failure = 1;"
    },
    {
        "line": 51,
        "fullcodeline": "free(doid);"
    },
    {
        "line": 52,
        "fullcodeline": "authctxt->server_caused_failure = 1;"
    },
    {
        "line": 61,
        "fullcodeline": "(r = sshpkt_send(ssh)) != 0)"
    },
    {
        "line": 62,
        "fullcodeline": "fatal(\"%s: %s\", __func__, ssh_err(r));"
    },
    {
        "line": 29,
        "fullcodeline": "if ((r = sshpkt_get_string(ssh, &doid, &len)) != 0)"
    },
    {
        "line": 32,
        "fullcodeline": "if (len > 2 && doid[0] == SSH_GSS_OIDTYPE &&"
    },
    {
        "line": 49,
        "fullcodeline": "if (ctxt != NULL)"
    },
    {
        "line": 60,
        "fullcodeline": "(r = sshpkt_put_string(ssh, doid, len)) != 0 ||"
    },
    {
        "line": 30,
        "fullcodeline": "fatal(\"%s: %s\", __func__, ssh_err(r));"
    },
    {
        "line": 33,
        "fullcodeline": "doid[1] == len - 2) {"
    },
    {
        "line": 34,
        "fullcodeline": "goid.elements = doid + 2;"
    },
    {
        "line": 35,
        "fullcodeline": "goid.length   = len - 2;"
    },
    {
        "line": 36,
        "fullcodeline": "ssh_gssapi_test_oid_supported(&ms, &goid, &present);"
    },
    {
        "line": 50,
        "fullcodeline": "ssh_gssapi_delete_ctx(&ctxt);"
    },
    {
        "line": 38,
        "fullcodeline": "logit(\"Badly formed OID received\");"
    }
]