[
    {
        "line": 6,
        "fullcodeline": "struct device\t\t\t*dev = &pdev->dev;"
    },
    {
        "line": 10,
        "fullcodeline": "of_id = of_match_device(spi_gpio_dt_ids, &pdev->dev);"
    },
    {
        "line": 12,
        "fullcodeline": "master = spi_alloc_master(dev, sizeof(*spi_gpio));"
    },
    {
        "line": 16,
        "fullcodeline": "status = devm_add_action_or_reset(&pdev->dev, spi_gpio_put, master);"
    },
    {
        "line": 30,
        "fullcodeline": "spi_gpio = spi_master_get_devdata(master);"
    },
    {
        "line": 32,
        "fullcodeline": "status = spi_gpio_request(dev, spi_gpio);"
    },
    {
        "line": 36,
        "fullcodeline": "master->bits_per_word_mask = SPI_BPW_RANGE_MASK(1, 32);"
    },
    {
        "line": 37,
        "fullcodeline": "master->mode_bits = SPI_3WIRE | SPI_3WIRE_HIZ | SPI_CPHA | SPI_CPOL |"
    },
    {
        "line": 49,
        "fullcodeline": "master->bus_num = pdev->id;"
    },
    {
        "line": 50,
        "fullcodeline": "master->setup = spi_gpio_setup;"
    },
    {
        "line": 51,
        "fullcodeline": "master->cleanup = spi_gpio_cleanup;"
    },
    {
        "line": 60,
        "fullcodeline": "master->flags |= SPI_MASTER_GPIO_SS;"
    },
    {
        "line": 61,
        "fullcodeline": "bb->chipselect = spi_gpio_chipselect;"
    },
    {
        "line": 62,
        "fullcodeline": "bb->set_line_direction = spi_gpio_set_direction;"
    },
    {
        "line": 75,
        "fullcodeline": "bb->setup_transfer = spi_bitbang_setup_transfer;"
    },
    {
        "line": 77,
        "fullcodeline": "status = spi_bitbang_init(&spi_gpio->bitbang);"
    },
    {
        "line": 13,
        "fullcodeline": "if (!master)"
    },
    {
        "line": 64,
        "fullcodeline": "if (master->flags & SPI_MASTER_NO_TX) {"
    },
    {
        "line": 81,
        "fullcodeline": "return devm_spi_register_master(&pdev->dev, spi_master_get(master));"
    },
    {
        "line": 23,
        "fullcodeline": "status = spi_gpio_probe_dt(pdev, master);"
    },
    {
        "line": 46,
        "fullcodeline": "master->flags = SPI_MASTER_NO_TX;"
    },
    {
        "line": 65,
        "fullcodeline": "bb->txrx_word[SPI_MODE_0] = spi_gpio_spec_txrx_word_mode0;"
    },
    {
        "line": 66,
        "fullcodeline": "bb->txrx_word[SPI_MODE_1] = spi_gpio_spec_txrx_word_mode1;"
    },
    {
        "line": 67,
        "fullcodeline": "bb->txrx_word[SPI_MODE_2] = spi_gpio_spec_txrx_word_mode2;"
    },
    {
        "line": 68,
        "fullcodeline": "bb->txrx_word[SPI_MODE_3] = spi_gpio_spec_txrx_word_mode3;"
    },
    {
        "line": 14,
        "fullcodeline": "return -ENOMEM;"
    },
    {
        "line": 25,
        "fullcodeline": "status = spi_gpio_probe_pdata(pdev, master);"
    },
    {
        "line": 70,
        "fullcodeline": "bb->txrx_word[SPI_MODE_0] = spi_gpio_txrx_word_mode0;"
    },
    {
        "line": 71,
        "fullcodeline": "bb->txrx_word[SPI_MODE_1] = spi_gpio_txrx_word_mode1;"
    },
    {
        "line": 72,
        "fullcodeline": "bb->txrx_word[SPI_MODE_2] = spi_gpio_txrx_word_mode2;"
    },
    {
        "line": 73,
        "fullcodeline": "bb->txrx_word[SPI_MODE_3] = spi_gpio_txrx_word_mode3;"
    }
]