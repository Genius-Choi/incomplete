[
    {
        "line": 5,
        "fullcodeline": "int bufsize = JPC_CEILDIVPOW2(numrows, 1);"
    },
    {
        "line": 6,
        "fullcodeline": "jpc_fix_t splitbuf[QMFB_SPLITBUFSIZE * JPC_QMFB_COLGRPSIZE];"
    },
    {
        "line": 7,
        "fullcodeline": "jpc_fix_t *buf = splitbuf;"
    },
    {
        "line": 18,
        "fullcodeline": "if (bufsize > QMFB_SPLITBUFSIZE) {"
    },
    {
        "line": 26,
        "fullcodeline": "if (numrows >= 2) {"
    },
    {
        "line": 79,
        "fullcodeline": "if (buf != splitbuf) {"
    },
    {
        "line": 27,
        "fullcodeline": "hstartrow = (numrows + 1 - parity) >> 1;"
    },
    {
        "line": 29,
        "fullcodeline": "m = numrows - hstartrow;"
    },
    {
        "line": 32,
        "fullcodeline": "n = m;"
    },
    {
        "line": 33,
        "fullcodeline": "dstptr = buf;"
    },
    {
        "line": 34,
        "fullcodeline": "srcptr = &a[(1 - parity) * stride];"
    },
    {
        "line": 47,
        "fullcodeline": "dstptr = &a[(1 - parity) * stride];"
    },
    {
        "line": 48,
        "fullcodeline": "srcptr = &a[(2 - parity) * stride];"
    },
    {
        "line": 49,
        "fullcodeline": "n = numrows - m - (!parity);"
    },
    {
        "line": 62,
        "fullcodeline": "dstptr = &a[hstartrow * stride];"
    },
    {
        "line": 63,
        "fullcodeline": "srcptr = buf;"
    },
    {
        "line": 64,
        "fullcodeline": "n = m;"
    },
    {
        "line": 80,
        "fullcodeline": "jas_free(buf);"
    },
    {
        "line": 19,
        "fullcodeline": "if (!(buf = jas_alloc3(bufsize, JPC_QMFB_COLGRPSIZE,"
    },
    {
        "line": 65,
        "fullcodeline": "while (n-- > 0) {"
    },
    {
        "line": 35,
        "fullcodeline": "while (n-- > 0) {"
    },
    {
        "line": 36,
        "fullcodeline": "dstptr2 = dstptr;"
    },
    {
        "line": 37,
        "fullcodeline": "srcptr2 = srcptr;"
    },
    {
        "line": 43,
        "fullcodeline": "dstptr += JPC_QMFB_COLGRPSIZE;"
    },
    {
        "line": 44,
        "fullcodeline": "srcptr += stride << 1;"
    },
    {
        "line": 50,
        "fullcodeline": "while (n-- > 0) {"
    },
    {
        "line": 51,
        "fullcodeline": "dstptr2 = dstptr;"
    },
    {
        "line": 52,
        "fullcodeline": "srcptr2 = srcptr;"
    },
    {
        "line": 58,
        "fullcodeline": "dstptr += stride;"
    },
    {
        "line": 59,
        "fullcodeline": "srcptr += stride << 1;"
    },
    {
        "line": 66,
        "fullcodeline": "dstptr2 = dstptr;"
    },
    {
        "line": 67,
        "fullcodeline": "srcptr2 = srcptr;"
    },
    {
        "line": 73,
        "fullcodeline": "dstptr += stride;"
    },
    {
        "line": 74,
        "fullcodeline": "srcptr += JPC_QMFB_COLGRPSIZE;"
    },
    {
        "line": 38,
        "fullcodeline": "for (i = 0; i < JPC_QMFB_COLGRPSIZE; ++i) {"
    },
    {
        "line": 53,
        "fullcodeline": "for (i = 0; i < JPC_QMFB_COLGRPSIZE; ++i) {"
    },
    {
        "line": 68,
        "fullcodeline": "for (i = 0; i < JPC_QMFB_COLGRPSIZE; ++i) {"
    },
    {
        "line": 20,
        "fullcodeline": "sizeof(jpc_fix_t)))) {"
    },
    {
        "line": 39,
        "fullcodeline": "*dstptr2 = *srcptr2;"
    },
    {
        "line": 40,
        "fullcodeline": "++dstptr2;"
    },
    {
        "line": 41,
        "fullcodeline": "++srcptr2;"
    },
    {
        "line": 54,
        "fullcodeline": "*dstptr2 = *srcptr2;"
    },
    {
        "line": 55,
        "fullcodeline": "++dstptr2;"
    },
    {
        "line": 56,
        "fullcodeline": "++srcptr2;"
    },
    {
        "line": 69,
        "fullcodeline": "*dstptr2 = *srcptr2;"
    },
    {
        "line": 70,
        "fullcodeline": "++dstptr2;"
    },
    {
        "line": 71,
        "fullcodeline": "++srcptr2;"
    }
]