[
    {
        "line": 3,
        "fullcodeline": "int do_rf64 = 0, write_junk = 1;"
    },
    {
        "line": 12,
        "fullcodeline": "int num_channels = WavpackGetNumChannels (wpc);"
    },
    {
        "line": 13,
        "fullcodeline": "int32_t channel_mask = WavpackGetChannelMask (wpc);"
    },
    {
        "line": 14,
        "fullcodeline": "int32_t sample_rate = WavpackGetSampleRate (wpc);"
    },
    {
        "line": 15,
        "fullcodeline": "int bytes_per_sample = WavpackGetBytesPerSample (wpc);"
    },
    {
        "line": 16,
        "fullcodeline": "int bits_per_sample = WavpackGetBitsPerSample (wpc);"
    },
    {
        "line": 17,
        "fullcodeline": "int format = WavpackGetFloatNormExp (wpc) ? 3 : 1;"
    },
    {
        "line": 18,
        "fullcodeline": "int wavhdrsize = 16;"
    },
    {
        "line": 28,
        "fullcodeline": "total_data_bytes = total_samples * bytes_per_sample * num_channels;"
    },
    {
        "line": 39,
        "fullcodeline": "CLEAR (wavhdr);"
    },
    {
        "line": 41,
        "fullcodeline": "wavhdr.FormatTag = format;"
    },
    {
        "line": 42,
        "fullcodeline": "wavhdr.NumChannels = num_channels;"
    },
    {
        "line": 43,
        "fullcodeline": "wavhdr.SampleRate = sample_rate;"
    },
    {
        "line": 44,
        "fullcodeline": "wavhdr.BytesPerSecond = sample_rate * num_channels * bytes_per_sample;"
    },
    {
        "line": 45,
        "fullcodeline": "wavhdr.BlockAlign = bytes_per_sample * num_channels;"
    },
    {
        "line": 46,
        "fullcodeline": "wavhdr.BitsPerSample = bits_per_sample;"
    },
    {
        "line": 66,
        "fullcodeline": "total_riff_bytes = sizeof (riffhdr) + wavhdrsize + sizeof (datahdr) + ((total_data_bytes + 1) & ~(int64_t)1);"
    },
    {
        "line": 69,
        "fullcodeline": "strncpy (fmthdr.ckID, \"fmt \", sizeof (fmthdr.ckID));"
    },
    {
        "line": 70,
        "fullcodeline": "strncpy (datahdr.ckID, \"data\", sizeof (datahdr.ckID));"
    },
    {
        "line": 71,
        "fullcodeline": "fmthdr.ckSize = wavhdrsize;"
    },
    {
        "line": 99,
        "fullcodeline": "WavpackNativeToLittleEndian (&riffhdr, ChunkHeaderFormat);"
    },
    {
        "line": 100,
        "fullcodeline": "WavpackNativeToLittleEndian (&fmthdr, ChunkHeaderFormat);"
    },
    {
        "line": 101,
        "fullcodeline": "WavpackNativeToLittleEndian (&wavhdr, WaveHeaderFormat);"
    },
    {
        "line": 102,
        "fullcodeline": "WavpackNativeToLittleEndian (&datahdr, ChunkHeaderFormat);"
    },
    {
        "line": 20,
        "fullcodeline": "if (format == 3 && WavpackGetFloatNormExp (wpc) != 127) {"
    },
    {
        "line": 25,
        "fullcodeline": "if (total_samples == -1)"
    },
    {
        "line": 30,
        "fullcodeline": "if (total_data_bytes > 0xff000000) {"
    },
    {
        "line": 21,
        "fullcodeline": "error_line (\"can't create valid RIFF wav header for non-normalized floating data!\");"
    },
    {
        "line": 26,
        "fullcodeline": "total_samples = 0x7ffff000 / (bytes_per_sample * num_channels);"
    },
    {
        "line": 33,
        "fullcodeline": "write_junk = 0;"
    },
    {
        "line": 48,
        "fullcodeline": "if (num_channels > 2 || channel_mask != 0x5 - num_channels) {"
    },
    {
        "line": 49,
        "fullcodeline": "wavhdrsize = sizeof (wavhdr);"
    },
    {
        "line": 50,
        "fullcodeline": "wavhdr.cbSize = 22;"
    },
    {
        "line": 51,
        "fullcodeline": "wavhdr.ValidBitsPerSample = bits_per_sample;"
    },
    {
        "line": 52,
        "fullcodeline": "wavhdr.SubFormat = format;"
    },
    {
        "line": 53,
        "fullcodeline": "wavhdr.ChannelMask = channel_mask;"
    },
    {
        "line": 54,
        "fullcodeline": "wavhdr.FormatTag = 0xfffe;"
    },
    {
        "line": 55,
        "fullcodeline": "wavhdr.BitsPerSample = bytes_per_sample * 8;"
    },
    {
        "line": 67,
        "fullcodeline": "if (do_rf64) total_riff_bytes += sizeof (ds64hdr) + sizeof (ds64_chunk);"
    },
    {
        "line": 68,
        "fullcodeline": "if (write_junk) total_riff_bytes += sizeof (junkchunk);"
    },
    {
        "line": 74,
        "fullcodeline": "CLEAR (junkchunk);"
    },
    {
        "line": 76,
        "fullcodeline": "junkchunk.ckSize = sizeof (junkchunk) - 8;"
    },
    {
        "line": 77,
        "fullcodeline": "WavpackNativeToLittleEndian (&junkchunk, ChunkHeaderFormat);"
    },
    {
        "line": 81,
        "fullcodeline": "strncpy (ds64hdr.ckID, \"ds64\", sizeof (ds64hdr.ckID));"
    },
    {
        "line": 82,
        "fullcodeline": "ds64hdr.ckSize = sizeof (ds64_chunk);"
    },
    {
        "line": 83,
        "fullcodeline": "CLEAR (ds64_chunk);"
    },
    {
        "line": 84,
        "fullcodeline": "ds64_chunk.riffSize64 = total_riff_bytes;"
    },
    {
        "line": 85,
        "fullcodeline": "ds64_chunk.dataSize64 = total_data_bytes;"
    },
    {
        "line": 86,
        "fullcodeline": "ds64_chunk.sampleCount64 = total_samples;"
    },
    {
        "line": 87,
        "fullcodeline": "riffhdr.ckSize = (uint32_t) -1;"
    },
    {
        "line": 88,
        "fullcodeline": "datahdr.ckSize = (uint32_t) -1;"
    },
    {
        "line": 89,
        "fullcodeline": "WavpackNativeToLittleEndian (&ds64hdr, ChunkHeaderFormat);"
    },
    {
        "line": 90,
        "fullcodeline": "WavpackNativeToLittleEndian (&ds64_chunk, DS64ChunkFormat);"
    },
    {
        "line": 104,
        "fullcodeline": "if (!DoWriteFile (outfile, &riffhdr, sizeof (riffhdr), &bcount) || bcount != sizeof (riffhdr) ||"
    },
    {
        "line": 110,
        "fullcodeline": "!DoWriteFile (outfile, &datahdr, sizeof (datahdr), &bcount) || bcount != sizeof (datahdr)) {"
    },
    {
        "line": 93,
        "fullcodeline": "riffhdr.ckSize = (uint32_t) total_riff_bytes;"
    },
    {
        "line": 94,
        "fullcodeline": "datahdr.ckSize = (uint32_t) total_data_bytes;"
    },
    {
        "line": 32,
        "fullcodeline": "error_line (\"total_data_bytes = %lld, so rf64\", total_data_bytes);"
    },
    {
        "line": 109,
        "fullcodeline": "!DoWriteFile (outfile, &wavhdr, wavhdrsize, &bcount) || bcount != wavhdrsize ||"
    },
    {
        "line": 37,
        "fullcodeline": "error_line (\"total_data_bytes = %lld, so riff\", total_data_bytes);"
    },
    {
        "line": 108,
        "fullcodeline": "!DoWriteFile (outfile, &fmthdr, sizeof (fmthdr), &bcount) || bcount != sizeof (fmthdr) ||"
    },
    {
        "line": 107,
        "fullcodeline": "(write_junk && (!DoWriteFile (outfile, &junkchunk, sizeof (junkchunk), &bcount) || bcount != sizeof (junkchunk))) ||"
    },
    {
        "line": 106,
        "fullcodeline": "(do_rf64 && (!DoWriteFile (outfile, &ds64_chunk, sizeof (ds64_chunk), &bcount) || bcount != sizeof (ds64_chunk))) ||"
    },
    {
        "line": 105,
        "fullcodeline": "(do_rf64 && (!DoWriteFile (outfile, &ds64hdr, sizeof (ds64hdr), &bcount) || bcount != sizeof (ds64hdr))) ||"
    }
]