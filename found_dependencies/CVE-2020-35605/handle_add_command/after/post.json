[
    {
        "line": 4,
        "fullcodeline": "has_add_respose = false;"
    },
    {
        "line": 5,
        "fullcodeline": "bool existing, init_img = true;"
    },
    {
        "line": 6,
        "fullcodeline": "Image *img = NULL;"
    },
    {
        "line": 7,
        "fullcodeline": "unsigned char tt = g->transmission_type ? g->transmission_type : 'd';"
    },
    {
        "line": 9,
        "fullcodeline": "uint32_t fmt = g->format ? g->format : RGBA;"
    },
    {
        "line": 70,
        "fullcodeline": "static char fname[2056] = {0};"
    },
    {
        "line": 106,
        "fullcodeline": "self->loading_image = 0;"
    },
    {
        "line": 107,
        "fullcodeline": "bool needs_processing = g->compressed || fmt == PNG;"
    },
    {
        "line": 152,
        "fullcodeline": "size_t required_sz = (size_t)(img->load_data.is_opaque ? 3 : 4) * img->width * img->height;"
    },
    {
        "line": 10,
        "fullcodeline": "if (tt == 'd' && self->loading_image) init_img = false;"
    },
    {
        "line": 105,
        "fullcodeline": "if (!img->data_loaded) return NULL;"
    },
    {
        "line": 153,
        "fullcodeline": "if (img->load_data.data_sz != required_sz) ABRT(EINVAL, \"Image dimensions: %ux%u do not match data size: %zu, expected size: %zu\", img->width, img->height, img->load_data.data_sz, required_sz);"
    },
    {
        "line": 154,
        "fullcodeline": "if (LIKELY(img->data_loaded && send_to_gpu)) {"
    },
    {
        "line": 13,
        "fullcodeline": "self->last_init_graphics_command.id = iid;"
    },
    {
        "line": 14,
        "fullcodeline": "self->loading_image = 0;"
    },
    {
        "line": 16,
        "fullcodeline": "remove_images(self, add_trim_predicate, 0);"
    },
    {
        "line": 17,
        "fullcodeline": "img = find_or_create_image(self, iid, &existing);"
    },
    {
        "line": 28,
        "fullcodeline": "img->atime = monotonic(); img->used_storage = 0;"
    },
    {
        "line": 29,
        "fullcodeline": "img->width = g->data_width; img->height = g->data_height;"
    },
    {
        "line": 82,
        "fullcodeline": "memcpy(img->load_data.buf + img->load_data.buf_used, payload, g->payload_sz);"
    },
    {
        "line": 83,
        "fullcodeline": "img->load_data.buf_used += g->payload_sz;"
    },
    {
        "line": 90,
        "fullcodeline": "snprintf(fname, sizeof(fname)/sizeof(fname[0]), \"%.*s\", (int)g->payload_sz, payload);"
    },
    {
        "line": 94,
        "fullcodeline": "img->data_loaded = mmap_img_file(self, img, fd, g->data_sz, g->data_offset);"
    },
    {
        "line": 95,
        "fullcodeline": "safe_close(fd, __FILE__, __LINE__);"
    },
    {
        "line": 103,
        "fullcodeline": "ABRT(EINVAL, \"Unknown transmission type: %c\", g->transmission_type);"
    },
    {
        "line": 133,
        "fullcodeline": "img->load_data.data = img->load_data.buf;"
    },
    {
        "line": 155,
        "fullcodeline": "send_image_to_gpu(&img->texture_id, img->load_data.data, img->width, img->height, img->load_data.is_opaque, img->load_data.is_4byte_aligned, false, REPEAT_CLAMP);"
    },
    {
        "line": 156,
        "fullcodeline": "free_load_data(&img->load_data);"
    },
    {
        "line": 157,
        "fullcodeline": "self->used_storage += required_sz;"
    },
    {
        "line": 158,
        "fullcodeline": "img->used_storage = required_sz;"
    },
    {
        "line": 15,
        "fullcodeline": "if (g->data_width > 10000 || g->data_height > 10000) ABRT(EINVAL, \"Image too large\");"
    },
    {
        "line": 47,
        "fullcodeline": "if (tt == 'd') {"
    },
    {
        "line": 58,
        "fullcodeline": "self->last_init_graphics_command.more = g->more;"
    },
    {
        "line": 59,
        "fullcodeline": "self->last_init_graphics_command.payload_sz = g->payload_sz;"
    },
    {
        "line": 60,
        "fullcodeline": "g = &self->last_init_graphics_command;"
    },
    {
        "line": 61,
        "fullcodeline": "tt = g->transmission_type ? g->transmission_type : 'd';"
    },
    {
        "line": 62,
        "fullcodeline": "fmt = g->format ? g->format : RGBA;"
    },
    {
        "line": 63,
        "fullcodeline": "img = img_by_internal_id(self, self->loading_image);"
    },
    {
        "line": 73,
        "fullcodeline": "if (img->load_data.buf_capacity - img->load_data.buf_used < g->payload_sz) {"
    },
    {
        "line": 84,
        "fullcodeline": "if (!g->more) { img->data_loaded = true; self->loading_image = 0; }"
    },
    {
        "line": 89,
        "fullcodeline": "if (g->payload_sz > 2048) ABRT(EINVAL, \"Filename too long\");"
    },
    {
        "line": 91,
        "fullcodeline": "if (tt == 's') fd = shm_open(fname, O_RDONLY, 0);"
    },
    {
        "line": 93,
        "fullcodeline": "if (fd == -1) ABRT(EBADF, \"Failed to open file for graphics transmission with error: [%d] %s\", errno, strerror(errno));"
    },
    {
        "line": 96,
        "fullcodeline": "if (tt == 't') {"
    },
    {
        "line": 134,
        "fullcodeline": "if (img->load_data.buf_used < img->load_data.data_sz) {"
    },
    {
        "line": 19,
        "fullcodeline": "free_load_data(&img->load_data);"
    },
    {
        "line": 20,
        "fullcodeline": "img->data_loaded = false;"
    },
    {
        "line": 21,
        "fullcodeline": "free_refs_data(img);"
    },
    {
        "line": 22,
        "fullcodeline": "*is_dirty = true;"
    },
    {
        "line": 23,
        "fullcodeline": "self->layers_dirty = true;"
    },
    {
        "line": 33,
        "fullcodeline": "img->load_data.is_4byte_aligned = true;"
    },
    {
        "line": 34,
        "fullcodeline": "img->load_data.is_opaque = false;"
    },
    {
        "line": 35,
        "fullcodeline": "img->load_data.data_sz = g->data_sz ? g->data_sz : 1024 * 100;"
    },
    {
        "line": 39,
        "fullcodeline": "img->load_data.data_sz = (size_t)g->data_width * g->data_height * (fmt / 8);"
    },
    {
        "line": 41,
        "fullcodeline": "img->load_data.is_4byte_aligned = fmt == RGBA || (img->width % 4 == 0);"
    },
    {
        "line": 42,
        "fullcodeline": "img->load_data.is_opaque = fmt == RGB;"
    },
    {
        "line": 45,
        "fullcodeline": "ABRT(EINVAL, \"Unknown image format: %u\", fmt);"
    },
    {
        "line": 49,
        "fullcodeline": "img->load_data.buf_capacity = img->load_data.data_sz + (g->compressed ? 1024 : 10);  // compression header"
    },
    {
        "line": 50,
        "fullcodeline": "img->load_data.buf = malloc(img->load_data.buf_capacity);"
    },
    {
        "line": 51,
        "fullcodeline": "img->load_data.buf_used = 0;"
    },
    {
        "line": 64,
        "fullcodeline": "if (img == NULL) {"
    },
    {
        "line": 75,
        "fullcodeline": "img->load_data.buf_capacity = MIN(2 * img->load_data.buf_capacity, MAX_DATA_SZ);"
    },
    {
        "line": 76,
        "fullcodeline": "img->load_data.buf = realloc(img->load_data.buf, img->load_data.buf_capacity);"
    },
    {
        "line": 113,
        "fullcodeline": "IB;"
    },
    {
        "line": 121,
        "fullcodeline": "ABRT(EINVAL, \"Unknown image compression: %c\", g->compressed);"
    },
    {
        "line": 125,
        "fullcodeline": "IB;"
    },
    {
        "line": 135,
        "fullcodeline": "ABRT(ENODATA, \"Insufficient image data: %zu < %zu\", img->load_data.buf_used, img->load_data.data_sz);"
    },
    {
        "line": 139,
        "fullcodeline": "img->load_data.mapped_file = NULL; img->load_data.mapped_file_sz = 0;"
    },
    {
        "line": 142,
        "fullcodeline": "if (tt == 'd') {"
    },
    {
        "line": 25,
        "fullcodeline": "img->internal_id = internal_id_counter++;"
    },
    {
        "line": 26,
        "fullcodeline": "img->client_id = iid;"
    },
    {
        "line": 32,
        "fullcodeline": "if (g->data_sz > MAX_DATA_SZ) ABRT(EINVAL, \"PNG data size too large\");"
    },
    {
        "line": 40,
        "fullcodeline": "if (!img->load_data.data_sz) ABRT(EINVAL, \"Zero width/height not allowed\");"
    },
    {
        "line": 52,
        "fullcodeline": "if (img->load_data.buf == NULL) {"
    },
    {
        "line": 65,
        "fullcodeline": "self->loading_image = 0;"
    },
    {
        "line": 66,
        "fullcodeline": "ABRT(EILSEQ, \"More payload loading refers to non-existent image\");"
    },
    {
        "line": 74,
        "fullcodeline": "if (img->load_data.buf_used + g->payload_sz > MAX_DATA_SZ || fmt != PNG) ABRT(EFBIG, \"Too much data\");"
    },
    {
        "line": 77,
        "fullcodeline": "if (img->load_data.buf == NULL) {"
    },
    {
        "line": 92,
        "fullcodeline": "else fd = open(fname, O_CLOEXEC | O_RDONLY);"
    },
    {
        "line": 114,
        "fullcodeline": "if (!inflate_zlib(self, img, buf, bufsz)) {"
    },
    {
        "line": 126,
        "fullcodeline": "if (!inflate_png(self, img, buf, bufsz)) {"
    },
    {
        "line": 48,
        "fullcodeline": "if (g->more) self->loading_image = img->internal_id;"
    },
    {
        "line": 53,
        "fullcodeline": "ABRT(ENOMEM, \"Out of memory\");"
    },
    {
        "line": 54,
        "fullcodeline": "img->load_data.buf_capacity = 0; img->load_data.buf_used = 0;"
    },
    {
        "line": 78,
        "fullcodeline": "ABRT(ENOMEM, \"Out of memory\");"
    },
    {
        "line": 79,
        "fullcodeline": "img->load_data.buf_capacity = 0; img->load_data.buf_used = 0;"
    },
    {
        "line": 97,
        "fullcodeline": "if (global_state.boss) { call_boss(safe_delete_temp_file, \"s\", fname); }"
    },
    {
        "line": 100,
        "fullcodeline": "else if (tt == 's') shm_unlink(fname);"
    },
    {
        "line": 115,
        "fullcodeline": "img->data_loaded = false; return NULL;"
    },
    {
        "line": 127,
        "fullcodeline": "img->data_loaded = false; return NULL;"
    },
    {
        "line": 143,
        "fullcodeline": "if (img->load_data.buf_used < img->load_data.data_sz) {"
    },
    {
        "line": 98,
        "fullcodeline": "else unlink(fname);"
    },
    {
        "line": 144,
        "fullcodeline": "ABRT(ENODATA, \"Insufficient image data: %zu < %zu\",  img->load_data.buf_used, img->load_data.data_sz);"
    },
    {
        "line": 147,
        "fullcodeline": "if (img->load_data.mapped_file_sz < img->load_data.data_sz) {"
    },
    {
        "line": 145,
        "fullcodeline": "} else img->load_data.data = img->load_data.buf;"
    },
    {
        "line": 148,
        "fullcodeline": "ABRT(ENODATA, \"Insufficient image data: %zu < %zu\",  img->load_data.mapped_file_sz, img->load_data.data_sz);"
    }
]