[
    {
        "line": 4,
        "fullcodeline": "struct avi_reader_port *fport = (struct avi_reader_port*)this_port;"
    },
    {
        "line": 5,
        "fullcodeline": "pj_status_t status = PJ_SUCCESS;"
    },
    {
        "line": 6,
        "fullcodeline": "pj_ssize_t size_read = 0, size_to_read = 0;"
    },
    {
        "line": 8,
        "fullcodeline": "pj_assert(fport->base.info.signature == SIGNATURE);"
    },
    {
        "line": 85,
        "fullcodeline": "size_to_read = frame->size;"
    },
    {
        "line": 77,
        "fullcodeline": "if (fport->base.info.fmt.type == PJMEDIA_TYPE_AUDIO &&"
    },
    {
        "line": 176,
        "fullcodeline": "if (frame->type == PJMEDIA_FRAME_TYPE_AUDIO) {"
    },
    {
        "line": 225,
        "fullcodeline": "if (status == AVI_EOF) {"
    },
    {
        "line": 12,
        "fullcodeline": "PJ_LOG(5,(THIS_FILE, \"File port %.*s EOF\","
    },
    {
        "line": 69,
        "fullcodeline": "PJ_LOG(5,(THIS_FILE, \"File port %.*s rewinding..\","
    },
    {
        "line": 72,
        "fullcodeline": "fport->eof = PJ_FALSE;"
    },
    {
        "line": 73,
        "fullcodeline": "pj_file_setpos(fport->fd, fport->start_data, PJ_SEEK_SET);"
    },
    {
        "line": 78,
        "fullcodeline": "(fport->fmt_id == PJMEDIA_FORMAT_PCMA ||"
    },
    {
        "line": 81,
        "fullcodeline": "frame->size >>= 1;"
    },
    {
        "line": 87,
        "fullcodeline": "pjmedia_avi_subchunk ch = {0, 0};"
    },
    {
        "line": 150,
        "fullcodeline": "frame->type = (fport->base.info.fmt.type == PJMEDIA_TYPE_VIDEO ?"
    },
    {
        "line": 226,
        "fullcodeline": "fport->eof = PJ_TRUE;"
    },
    {
        "line": 228,
        "fullcodeline": "size_to_read -= size_read;"
    },
    {
        "line": 235,
        "fullcodeline": "pj_bzero((char *)frame->buf + frame->size - size_to_read,"
    },
    {
        "line": 60,
        "fullcodeline": "if ((status != PJ_SUCCESS) ||"
    },
    {
        "line": 79,
        "fullcodeline": "fport->fmt_id == PJMEDIA_FORMAT_PCMU))"
    },
    {
        "line": 92,
        "fullcodeline": "if (fport->size_left > 0 && fport->size_left < size_to_read) {"
    },
    {
        "line": 102,
        "fullcodeline": "if (fport->size_left == 0) {"
    },
    {
        "line": 153,
        "fullcodeline": "if (frame->type == PJMEDIA_FRAME_TYPE_AUDIO) {"
    },
    {
        "line": 179,
        "fullcodeline": "if (fport->fmt_id == PJMEDIA_FORMAT_PCMA ||"
    },
    {
        "line": 229,
        "fullcodeline": "if (size_to_read == (pj_ssize_t)frame->size) {"
    },
    {
        "line": 18,
        "fullcodeline": "pj_bool_t no_loop = (fport->options & PJMEDIA_AVI_FILE_NO_LOOP);"
    },
    {
        "line": 47,
        "fullcodeline": "frame->type = PJMEDIA_FRAME_TYPE_NONE;"
    },
    {
        "line": 48,
        "fullcodeline": "frame->size = 0;"
    },
    {
        "line": 61,
        "fullcodeline": "(fport->options & PJMEDIA_AVI_FILE_NO_LOOP))"
    },
    {
        "line": 63,
        "fullcodeline": "frame->type = PJMEDIA_FRAME_TYPE_NONE;"
    },
    {
        "line": 64,
        "fullcodeline": "frame->size = 0;"
    },
    {
        "line": 93,
        "fullcodeline": "status = file_read3(fport->fd, frame->buf, fport->size_left,"
    },
    {
        "line": 97,
        "fullcodeline": "size_to_read -= fport->size_left;"
    },
    {
        "line": 98,
        "fullcodeline": "fport->size_left = 0;"
    },
    {
        "line": 104,
        "fullcodeline": "pj_file_getpos(fport->fd, &pos);"
    },
    {
        "line": 112,
        "fullcodeline": "status = file_read(fport->fd, &ch, sizeof(pjmedia_avi_subchunk));"
    },
    {
        "line": 118,
        "fullcodeline": "cid = (char *)&ch.id;"
    },
    {
        "line": 125,
        "fullcodeline": "fport->pad = (pj_uint8_t)ch.len & 1;"
    },
    {
        "line": 127,
        "fullcodeline": "TRACE_((THIS_FILE, \"Reading movi data at pos %u (%x), id: %.*s, \""
    },
    {
        "line": 147,
        "fullcodeline": "fport->size_left = ch.len;"
    },
    {
        "line": 156,
        "fullcodeline": "status = file_read3(fport->fd, (char *)frame->buf + frame->size -"
    },
    {
        "line": 161,
        "fullcodeline": "fport->size_left -= size_to_read;"
    },
    {
        "line": 180,
        "fullcodeline": "fport->fmt_id == PJMEDIA_FORMAT_PCMU)"
    },
    {
        "line": 186,
        "fullcodeline": "dst = (pj_uint16_t*)frame->buf + frame->size - 1;"
    },
    {
        "line": 187,
        "fullcodeline": "src = (pj_uint8_t*)frame->buf + frame->size - 1;"
    },
    {
        "line": 200,
        "fullcodeline": "frame->size <<= 1;"
    },
    {
        "line": 204,
        "fullcodeline": "fport->next_ts.u64 += (fport->usec_per_frame *"
    },
    {
        "line": 231,
        "fullcodeline": "frame->type = PJMEDIA_FRAME_TYPE_NONE;"
    },
    {
        "line": 232,
        "fullcodeline": "frame->size = 0;"
    },
    {
        "line": 20,
        "fullcodeline": "if (!fport->subscribed) {"
    },
    {
        "line": 27,
        "fullcodeline": "if (fport->subscribed && fport->eof != 2) {"
    },
    {
        "line": 50,
        "fullcodeline": "return (no_loop? PJ_EEOF: PJ_SUCCESS);"
    },
    {
        "line": 95,
        "fullcodeline": "if (status != PJ_SUCCESS)"
    },
    {
        "line": 113,
        "fullcodeline": "if (status != PJ_SUCCESS) {"
    },
    {
        "line": 119,
        "fullcodeline": "if (cid[0] >= '0' && cid[0] <= '9' &&"
    },
    {
        "line": 132,
        "fullcodeline": "if (stream_id != fport->stream_id) {"
    },
    {
        "line": 154,
        "fullcodeline": "if (size_to_read > fport->size_left)"
    },
    {
        "line": 159,
        "fullcodeline": "if (status != PJ_SUCCESS)"
    },
    {
        "line": 163,
        "fullcodeline": "pj_assert(frame->size >= ch.len);"
    },
    {
        "line": 164,
        "fullcodeline": "status = file_read3(fport->fd, frame->buf, ch.len,"
    },
    {
        "line": 168,
        "fullcodeline": "frame->size = ch.len;"
    },
    {
        "line": 169,
        "fullcodeline": "fport->size_left = 0;"
    },
    {
        "line": 189,
        "fullcodeline": "if (fport->fmt_id == PJMEDIA_FORMAT_PCMU) {"
    },
    {
        "line": 208,
        "fullcodeline": "fport->next_ts.u64 += (frame->size *"
    },
    {
        "line": 214,
        "fullcodeline": "fport->next_ts.u64 += (fport->usec_per_frame * VIDEO_CLOCK_RATE /"
    },
    {
        "line": 21,
        "fullcodeline": "status = pjmedia_event_subscribe(NULL, &file_on_event,"
    },
    {
        "line": 23,
        "fullcodeline": "fport->subscribed = (status == PJ_SUCCESS)? PJ_TRUE:"
    },
    {
        "line": 38,
        "fullcodeline": "pjmedia_event_init(&event, PJMEDIA_EVENT_CALLBACK,"
    },
    {
        "line": 40,
        "fullcodeline": "pjmedia_event_publish(NULL, fport, &event,"
    },
    {
        "line": 108,
        "fullcodeline": "status = pj_file_setpos(fport->fd, fport->pad, PJ_SEEK_CUR);"
    },
    {
        "line": 109,
        "fullcodeline": "fport->pad = 0;"
    },
    {
        "line": 114,
        "fullcodeline": "size_read = 0;"
    },
    {
        "line": 120,
        "fullcodeline": "cid[1] >= '0' && cid[1] <= '9')"
    },
    {
        "line": 122,
        "fullcodeline": "stream_id = (cid[0] - '0') * 10 + (cid[1] - '0');"
    },
    {
        "line": 143,
        "fullcodeline": "status = pj_file_setpos(fport->fd, ch.len,"
    },
    {
        "line": 155,
        "fullcodeline": "size_to_read = fport->size_left;"
    },
    {
        "line": 166,
        "fullcodeline": "if (status != PJ_SUCCESS)"
    },
    {
        "line": 217,
        "fullcodeline": "fport->next_ts.u64 += (frame->size * VIDEO_CLOCK_RATE /"
    },
    {
        "line": 53,
        "fullcodeline": "status = (*fport->cb)(this_port, fport->base.port_data.pdata);"
    },
    {
        "line": 124,
        "fullcodeline": "stream_id = 100;"
    },
    {
        "line": 128,
        "fullcodeline": "\"length: %u\", (unsigned long)pos,"
    },
    {
        "line": 129,
        "fullcodeline": "(unsigned long)pos, 4, cid, ch.len));"
    },
    {
        "line": 133,
        "fullcodeline": "if (COMPARE_TAG(ch.id, PJMEDIA_AVI_LIST_TAG))"
    },
    {
        "line": 190,
        "fullcodeline": "for (i = 0; i < frame->size; ++i) {"
    },
    {
        "line": 210,
        "fullcodeline": "(fport->base.info.fmt.det.aud.avg_bps / 8));"
    },
    {
        "line": 32,
        "fullcodeline": "fport->eof = 2;"
    },
    {
        "line": 134,
        "fullcodeline": "PJ_LOG(5, (THIS_FILE, \"Unsupported LIST tag found in \""
    },
    {
        "line": 191,
        "fullcodeline": "*dst-- = (pj_uint16_t) pjmedia_ulaw2linear(*src--);"
    },
    {
        "line": 194,
        "fullcodeline": "for (i = 0; i < frame->size; ++i) {"
    },
    {
        "line": 218,
        "fullcodeline": "(fport->base.info.fmt.det.vid.avg_bps / 8));"
    },
    {
        "line": 34,
        "fullcodeline": "fport->eof = PJ_FALSE;"
    },
    {
        "line": 35,
        "fullcodeline": "pj_file_setpos(fport->fd, fport->start_data, PJ_SEEK_SET);"
    },
    {
        "line": 195,
        "fullcodeline": "*dst-- = (pj_uint16_t) pjmedia_alaw2linear(*src--);"
    },
    {
        "line": 136,
        "fullcodeline": "else if (COMPARE_TAG(ch.id, PJMEDIA_AVI_RIFF_TAG)) {"
    },
    {
        "line": 137,
        "fullcodeline": "PJ_LOG(3, (THIS_FILE, \"Unsupported format: multiple \""
    },
    {
        "line": 139,
        "fullcodeline": "status = AVI_EOF;"
    }
]