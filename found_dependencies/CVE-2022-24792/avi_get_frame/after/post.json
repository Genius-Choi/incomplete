[
    {
        "line": 4,
        "fullcodeline": "struct avi_reader_port *fport = (struct avi_reader_port*)this_port;"
    },
    {
        "line": 5,
        "fullcodeline": "pj_status_t status = PJ_SUCCESS;"
    },
    {
        "line": 6,
        "fullcodeline": "pj_ssize_t size_read = 0, size_to_read = 0;"
    },
    {
        "line": 8,
        "fullcodeline": "pj_assert(fport->base.info.signature == SIGNATURE);"
    },
    {
        "line": 85,
        "fullcodeline": "size_to_read = frame->size;"
    },
    {
        "line": 77,
        "fullcodeline": "if (fport->base.info.fmt.type == PJMEDIA_TYPE_AUDIO &&"
    },
    {
        "line": 181,
        "fullcodeline": "if (frame->type == PJMEDIA_FRAME_TYPE_AUDIO) {"
    },
    {
        "line": 230,
        "fullcodeline": "if (status == AVI_EOF) {"
    },
    {
        "line": 12,
        "fullcodeline": "PJ_LOG(5,(THIS_FILE, \"File port %.*s EOF\","
    },
    {
        "line": 69,
        "fullcodeline": "PJ_LOG(5,(THIS_FILE, \"File port %.*s rewinding..\","
    },
    {
        "line": 72,
        "fullcodeline": "fport->eof = PJ_FALSE;"
    },
    {
        "line": 73,
        "fullcodeline": "pj_file_setpos(fport->fd, fport->start_data, PJ_SEEK_SET);"
    },
    {
        "line": 78,
        "fullcodeline": "(fport->fmt_id == PJMEDIA_FORMAT_PCMA ||"
    },
    {
        "line": 81,
        "fullcodeline": "frame->size >>= 1;"
    },
    {
        "line": 87,
        "fullcodeline": "pjmedia_avi_subchunk ch = {0, 0};"
    },
    {
        "line": 155,
        "fullcodeline": "frame->type = (fport->base.info.fmt.type == PJMEDIA_TYPE_VIDEO ?"
    },
    {
        "line": 231,
        "fullcodeline": "fport->eof = PJ_TRUE;"
    },
    {
        "line": 233,
        "fullcodeline": "size_to_read -= size_read;"
    },
    {
        "line": 240,
        "fullcodeline": "pj_bzero((char *)frame->buf + frame->size - size_to_read,"
    },
    {
        "line": 60,
        "fullcodeline": "if ((status != PJ_SUCCESS) ||"
    },
    {
        "line": 79,
        "fullcodeline": "fport->fmt_id == PJMEDIA_FORMAT_PCMU))"
    },
    {
        "line": 92,
        "fullcodeline": "if (fport->size_left > 0 && fport->size_left < size_to_read) {"
    },
    {
        "line": 102,
        "fullcodeline": "if (fport->size_left == 0) {"
    },
    {
        "line": 158,
        "fullcodeline": "if (frame->type == PJMEDIA_FRAME_TYPE_AUDIO) {"
    },
    {
        "line": 184,
        "fullcodeline": "if (fport->fmt_id == PJMEDIA_FORMAT_PCMA ||"
    },
    {
        "line": 234,
        "fullcodeline": "if (size_to_read == (pj_ssize_t)frame->size) {"
    },
    {
        "line": 18,
        "fullcodeline": "pj_bool_t no_loop = (fport->options & PJMEDIA_AVI_FILE_NO_LOOP);"
    },
    {
        "line": 47,
        "fullcodeline": "frame->type = PJMEDIA_FRAME_TYPE_NONE;"
    },
    {
        "line": 48,
        "fullcodeline": "frame->size = 0;"
    },
    {
        "line": 61,
        "fullcodeline": "(fport->options & PJMEDIA_AVI_FILE_NO_LOOP))"
    },
    {
        "line": 63,
        "fullcodeline": "frame->type = PJMEDIA_FRAME_TYPE_NONE;"
    },
    {
        "line": 64,
        "fullcodeline": "frame->size = 0;"
    },
    {
        "line": 93,
        "fullcodeline": "status = file_read3(fport->fd, frame->buf, fport->size_left,"
    },
    {
        "line": 97,
        "fullcodeline": "size_to_read -= fport->size_left;"
    },
    {
        "line": 98,
        "fullcodeline": "fport->size_left = 0;"
    },
    {
        "line": 106,
        "fullcodeline": "pj_file_getpos(fport->fd, &pos);"
    },
    {
        "line": 114,
        "fullcodeline": "status = file_read(fport->fd, &ch, sizeof(pjmedia_avi_subchunk));"
    },
    {
        "line": 161,
        "fullcodeline": "status = file_read3(fport->fd, (char *)frame->buf + frame->size -"
    },
    {
        "line": 166,
        "fullcodeline": "fport->size_left -= size_to_read;"
    },
    {
        "line": 185,
        "fullcodeline": "fport->fmt_id == PJMEDIA_FORMAT_PCMU)"
    },
    {
        "line": 191,
        "fullcodeline": "dst = (pj_uint16_t*)frame->buf + frame->size - 1;"
    },
    {
        "line": 192,
        "fullcodeline": "src = (pj_uint8_t*)frame->buf + frame->size - 1;"
    },
    {
        "line": 205,
        "fullcodeline": "frame->size <<= 1;"
    },
    {
        "line": 209,
        "fullcodeline": "fport->next_ts.u64 += (fport->usec_per_frame *"
    },
    {
        "line": 236,
        "fullcodeline": "frame->type = PJMEDIA_FRAME_TYPE_NONE;"
    },
    {
        "line": 237,
        "fullcodeline": "frame->size = 0;"
    },
    {
        "line": 20,
        "fullcodeline": "if (!fport->subscribed) {"
    },
    {
        "line": 27,
        "fullcodeline": "if (fport->subscribed && fport->eof != 2) {"
    },
    {
        "line": 50,
        "fullcodeline": "return (no_loop? PJ_EEOF: PJ_SUCCESS);"
    },
    {
        "line": 95,
        "fullcodeline": "if (status != PJ_SUCCESS)"
    },
    {
        "line": 115,
        "fullcodeline": "if (status != PJ_SUCCESS) {"
    },
    {
        "line": 159,
        "fullcodeline": "if (size_to_read > fport->size_left)"
    },
    {
        "line": 164,
        "fullcodeline": "if (status != PJ_SUCCESS)"
    },
    {
        "line": 168,
        "fullcodeline": "pj_assert(frame->size >= ch.len);"
    },
    {
        "line": 169,
        "fullcodeline": "status = file_read3(fport->fd, frame->buf, ch.len,"
    },
    {
        "line": 173,
        "fullcodeline": "frame->size = ch.len;"
    },
    {
        "line": 174,
        "fullcodeline": "fport->size_left = 0;"
    },
    {
        "line": 194,
        "fullcodeline": "if (fport->fmt_id == PJMEDIA_FORMAT_PCMU) {"
    },
    {
        "line": 213,
        "fullcodeline": "fport->next_ts.u64 += (frame->size *"
    },
    {
        "line": 219,
        "fullcodeline": "fport->next_ts.u64 += (fport->usec_per_frame * VIDEO_CLOCK_RATE /"
    },
    {
        "line": 21,
        "fullcodeline": "status = pjmedia_event_subscribe(NULL, &file_on_event,"
    },
    {
        "line": 23,
        "fullcodeline": "fport->subscribed = (status == PJ_SUCCESS)? PJ_TRUE:"
    },
    {
        "line": 38,
        "fullcodeline": "pjmedia_event_init(&event, PJMEDIA_EVENT_CALLBACK,"
    },
    {
        "line": 40,
        "fullcodeline": "pjmedia_event_publish(NULL, fport, &event,"
    },
    {
        "line": 110,
        "fullcodeline": "status = pj_file_setpos(fport->fd, fport->pad, PJ_SEEK_CUR);"
    },
    {
        "line": 111,
        "fullcodeline": "fport->pad = 0;"
    },
    {
        "line": 116,
        "fullcodeline": "size_read = 0;"
    },
    {
        "line": 160,
        "fullcodeline": "size_to_read = fport->size_left;"
    },
    {
        "line": 171,
        "fullcodeline": "if (status != PJ_SUCCESS)"
    },
    {
        "line": 222,
        "fullcodeline": "fport->next_ts.u64 += (frame->size * VIDEO_CLOCK_RATE /"
    },
    {
        "line": 53,
        "fullcodeline": "status = (*fport->cb)(this_port, fport->base.port_data.pdata);"
    },
    {
        "line": 195,
        "fullcodeline": "for (i = 0; i < frame->size; ++i) {"
    },
    {
        "line": 215,
        "fullcodeline": "(fport->base.info.fmt.det.aud.avg_bps / 8));"
    },
    {
        "line": 32,
        "fullcodeline": "fport->eof = 2;"
    },
    {
        "line": 196,
        "fullcodeline": "*dst-- = (pj_uint16_t) pjmedia_ulaw2linear(*src--);"
    },
    {
        "line": 199,
        "fullcodeline": "for (i = 0; i < frame->size; ++i) {"
    },
    {
        "line": 223,
        "fullcodeline": "(fport->base.info.fmt.det.vid.avg_bps / 8));"
    },
    {
        "line": 34,
        "fullcodeline": "fport->eof = PJ_FALSE;"
    },
    {
        "line": 35,
        "fullcodeline": "pj_file_setpos(fport->fd, fport->start_data, PJ_SEEK_SET);"
    },
    {
        "line": 200,
        "fullcodeline": "*dst-- = (pj_uint16_t) pjmedia_alaw2linear(*src--);"
    }
]