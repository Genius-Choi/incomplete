[
    {
        "line": 6,
        "fullcodeline": "guint16 key_bytes_len = 0; /* Length of the total key data field */"
    },
    {
        "line": 15,
        "fullcodeline": "key_version = AIRPDCAP_EAP_KEY_DESCR_VER(pEAPKey->key_information[1]);"
    },
    {
        "line": 34,
        "fullcodeline": "key_data = (guint8 *)pEAPKey + sizeof(EAPOL_RSN_KEY);"
    },
    {
        "line": 35,
        "fullcodeline": "szEncryptedKey = (guint8 *)g_memdup(key_data, key_bytes_len);"
    },
    {
        "line": 37,
        "fullcodeline": "DEBUG_DUMP(\"Encrypted Broadcast key:\", szEncryptedKey, key_bytes_len);"
    },
    {
        "line": 38,
        "fullcodeline": "DEBUG_DUMP(\"KeyIV:\", pEAPKey->key_iv, 16);"
    },
    {
        "line": 39,
        "fullcodeline": "DEBUG_DUMP(\"decryption_key:\", decryption_key, 16);"
    },
    {
        "line": 43,
        "fullcodeline": "memcpy(tmp_sa, sa, sizeof(AIRPDCAP_SEC_ASSOCIATION));"
    },
    {
        "line": 44,
        "fullcodeline": "sa->next=tmp_sa;"
    },
    {
        "line": 142,
        "fullcodeline": "key_len = (sa->wpa.key_ver==AIRPDCAP_WPA_KEY_VER_NOT_CCMP)?TKIP_GROUP_KEY_LEN:CCMP_GROUP_KEY_LEN;"
    },
    {
        "line": 150,
        "fullcodeline": "DEBUG_DUMP(\"Broadcast key:\", szEncryptedKey, key_len);"
    },
    {
        "line": 153,
        "fullcodeline": "sa->key = &dummy_key;  /* we just need key to be not null because it is checked in AirPDcapRsnaMng().  The WPA key materials are actually in the .wpa structure */"
    },
    {
        "line": 154,
        "fullcodeline": "sa->validKey = TRUE;"
    },
    {
        "line": 158,
        "fullcodeline": "memset(sa->wpa.ptk, 0, sizeof(sa->wpa.ptk));"
    },
    {
        "line": 159,
        "fullcodeline": "memcpy(sa->wpa.ptk+32, szEncryptedKey, key_len);"
    },
    {
        "line": 160,
        "fullcodeline": "g_free(szEncryptedKey);"
    },
    {
        "line": 16,
        "fullcodeline": "if (key_version == AIRPDCAP_WPA_KEY_VER_NOT_CCMP){"
    },
    {
        "line": 29,
        "fullcodeline": "if (key_bytes_len < GROUP_KEY_MIN_LEN || key_bytes_len > eapol_len - sizeof(EAPOL_RSN_KEY)) {"
    },
    {
        "line": 53,
        "fullcodeline": "if (key_version == AIRPDCAP_WPA_KEY_VER_NOT_CCMP){"
    },
    {
        "line": 143,
        "fullcodeline": "if (key_len > key_bytes_len) {"
    },
    {
        "line": 18,
        "fullcodeline": "key_bytes_len = pntoh16(pEAPKey->key_length);"
    },
    {
        "line": 54,
        "fullcodeline": "guint8 new_key[32];"
    },
    {
        "line": 55,
        "fullcodeline": "guint8 dummy[256];"
    },
    {
        "line": 64,
        "fullcodeline": "sa->wpa.key_ver = (key_bytes_len >=TKIP_GROUP_KEY_LEN)?AIRPDCAP_WPA_KEY_VER_NOT_CCMP:AIRPDCAP_WPA_KEY_VER_AES_CCMP;"
    },
    {
        "line": 67,
        "fullcodeline": "memcpy(new_key, pEAPKey->key_iv, 16);"
    },
    {
        "line": 68,
        "fullcodeline": "memcpy(new_key+16, decryption_key, 16);"
    },
    {
        "line": 69,
        "fullcodeline": "DEBUG_DUMP(\"FullDecrKey:\", new_key, 32);"
    },
    {
        "line": 71,
        "fullcodeline": "crypt_rc4_init(&rc4_state, new_key, sizeof(new_key));"
    },
    {
        "line": 74,
        "fullcodeline": "crypt_rc4(&rc4_state, dummy, 256);"
    },
    {
        "line": 75,
        "fullcodeline": "crypt_rc4(&rc4_state, szEncryptedKey, key_bytes_len);"
    },
    {
        "line": 145,
        "fullcodeline": "g_free(szEncryptedKey);"
    },
    {
        "line": 19,
        "fullcodeline": "}else if (key_version == AIRPDCAP_WPA_KEY_VER_AES_CCMP){"
    },
    {
        "line": 77,
        "fullcodeline": "} else if (key_version == AIRPDCAP_WPA_KEY_VER_AES_CCMP){"
    },
    {
        "line": 21,
        "fullcodeline": "key_bytes_len = pntoh16(pEAPKey->key_data_len);"
    },
    {
        "line": 86,
        "fullcodeline": "decrypted_data = AES_unwrap(decryption_key, 16, szEncryptedKey,  key_bytes_len);"
    },
    {
        "line": 93,
        "fullcodeline": "key_found = FALSE;"
    },
    {
        "line": 94,
        "fullcodeline": "key_index = 0;"
    },
    {
        "line": 139,
        "fullcodeline": "g_free(decrypted_data);"
    },
    {
        "line": 24,
        "fullcodeline": "if (key_bytes_len < 16) {"
    },
    {
        "line": 98,
        "fullcodeline": "while(key_index < (key_bytes_len - 6) && !key_found){"
    },
    {
        "line": 134,
        "fullcodeline": "if (key_length == TKIP_GROUP_KEY_LEN)"
    },
    {
        "line": 103,
        "fullcodeline": "rsn_id = decrypted_data[key_index];"
    },
    {
        "line": 104,
        "fullcodeline": "type = ((decrypted_data[key_index + 2] << 24) +"
    },
    {
        "line": 117,
        "fullcodeline": "key_length = decrypted_data[key_index+1] - 6;"
    },
    {
        "line": 127,
        "fullcodeline": "memcpy(szEncryptedKey, decrypted_data+key_index+8, key_length);"
    },
    {
        "line": 135,
        "fullcodeline": "sa->wpa.key_ver = AIRPDCAP_WPA_KEY_VER_NOT_CCMP;"
    },
    {
        "line": 109,
        "fullcodeline": "if (rsn_id == 0xdd && type == 0x000fac01) {"
    },
    {
        "line": 119,
        "fullcodeline": "if (key_index+8 >= key_bytes_len ||"
    },
    {
        "line": 129,
        "fullcodeline": "g_free(decrypted_data);"
    },
    {
        "line": 130,
        "fullcodeline": "g_free(szEncryptedKey);"
    },
    {
        "line": 137,
        "fullcodeline": "sa->wpa.key_ver = AIRPDCAP_WPA_KEY_VER_AES_CCMP;"
    },
    {
        "line": 110,
        "fullcodeline": "key_found = TRUE;"
    },
    {
        "line": 120,
        "fullcodeline": "key_length > key_bytes_len - key_index - 8) {"
    },
    {
        "line": 121,
        "fullcodeline": "g_free(decrypted_data);"
    },
    {
        "line": 122,
        "fullcodeline": "g_free(szEncryptedKey);"
    },
    {
        "line": 106,
        "fullcodeline": "(decrypted_data[key_index + 4] << 8) +"
    },
    {
        "line": 107,
        "fullcodeline": "(decrypted_data[key_index + 5]));"
    },
    {
        "line": 112,
        "fullcodeline": "key_index += decrypted_data[key_index+1]+2;"
    },
    {
        "line": 105,
        "fullcodeline": "(decrypted_data[key_index + 3] << 16) +"
    }
]