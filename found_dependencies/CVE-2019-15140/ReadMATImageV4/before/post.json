[
    {
        "line": 46,
        "fullcodeline": "quantum_info=(QuantumInfo *) NULL;"
    },
    {
        "line": 47,
        "fullcodeline": "(void) SeekBlob(image,0,SEEK_SET);"
    },
    {
        "line": 48,
        "fullcodeline": "status=MagickTrue;"
    },
    {
        "line": 239,
        "fullcodeline": "(void) CloseBlob(image);"
    },
    {
        "line": 49,
        "fullcodeline": "while (EOFBlob(image) == MagickFalse)"
    },
    {
        "line": 240,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 242,
        "fullcodeline": "return(GetFirstImageInList(image));"
    },
    {
        "line": 54,
        "fullcodeline": "ldblk=ReadBlobLSBLong(image);"
    },
    {
        "line": 57,
        "fullcodeline": "HDR.Type[3]=ldblk % 10; ldblk /= 10;  /* T digit */"
    },
    {
        "line": 58,
        "fullcodeline": "HDR.Type[2]=ldblk % 10; ldblk /= 10;  /* P digit */"
    },
    {
        "line": 59,
        "fullcodeline": "HDR.Type[1]=ldblk % 10; ldblk /= 10;  /* O digit */"
    },
    {
        "line": 60,
        "fullcodeline": "HDR.Type[0]=ldblk;        /* M digit */"
    },
    {
        "line": 101,
        "fullcodeline": "image->columns=(size_t) HDR.nRows;"
    },
    {
        "line": 102,
        "fullcodeline": "image->rows=(size_t) HDR.nCols;"
    },
    {
        "line": 115,
        "fullcodeline": "status=SetImageExtent(image,image->columns,image->rows,exception);"
    },
    {
        "line": 118,
        "fullcodeline": "(void) SetImageBackgroundColor(image,exception);"
    },
    {
        "line": 119,
        "fullcodeline": "(void) SetImageColorspace(image,GRAYColorspace,exception);"
    },
    {
        "line": 120,
        "fullcodeline": "quantum_info=AcquireQuantumInfo(image_info,image);"
    },
    {
        "line": 150,
        "fullcodeline": "image->depth=depth;"
    },
    {
        "line": 153,
        "fullcodeline": "status=SetQuantumFormat(image,quantum_info,format_type);"
    },
    {
        "line": 154,
        "fullcodeline": "status=SetQuantumDepth(image,quantum_info,depth);"
    },
    {
        "line": 155,
        "fullcodeline": "status=SetQuantumEndian(image,quantum_info,endian);"
    },
    {
        "line": 156,
        "fullcodeline": "SetQuantumScale(quantum_info,1.0);"
    },
    {
        "line": 157,
        "fullcodeline": "pixels=(unsigned char *) GetQuantumPixels(quantum_info);"
    },
    {
        "line": 206,
        "fullcodeline": "rotated_image=RotateImage(image,90.0,exception);"
    },
    {
        "line": 227,
        "fullcodeline": "AcquireNextImage(image_info,image,exception);"
    },
    {
        "line": 233,
        "fullcodeline": "image=SyncNextImageInList(image);"
    },
    {
        "line": 234,
        "fullcodeline": "status=SetImageProgress(image,LoadImagesTag,TellBlob(image),"
    },
    {
        "line": 55,
        "fullcodeline": "if ((ldblk > 9999) || (ldblk < 0))"
    },
    {
        "line": 61,
        "fullcodeline": "if (HDR.Type[3] != 0)"
    },
    {
        "line": 63,
        "fullcodeline": "if (HDR.Type[2] != 0)"
    },
    {
        "line": 65,
        "fullcodeline": "if (HDR.Type[0] == 0)"
    },
    {
        "line": 81,
        "fullcodeline": "if ((HDR.imagf != 0) && (HDR.imagf != 1))"
    },
    {
        "line": 83,
        "fullcodeline": "if (HDR.nameLen > 0xFFFF)"
    },
    {
        "line": 85,
        "fullcodeline": "for (i=0; i < (ssize_t) HDR.nameLen; i++)"
    },
    {
        "line": 103,
        "fullcodeline": "if ((image->columns == 0) || (image->rows == 0))"
    },
    {
        "line": 105,
        "fullcodeline": "if (image_info->ping != MagickFalse)"
    },
    {
        "line": 116,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 121,
        "fullcodeline": "if (quantum_info == (QuantumInfo *) NULL)"
    },
    {
        "line": 151,
        "fullcodeline": "if (HDR.Type[0] != 0)"
    },
    {
        "line": 158,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 184,
        "fullcodeline": "if (HDR.imagf == 1)"
    },
    {
        "line": 198,
        "fullcodeline": "if (quantum_info != (QuantumInfo *) NULL)"
    },
    {
        "line": 200,
        "fullcodeline": "if (EOFBlob(image) != MagickFalse)"
    },
    {
        "line": 207,
        "fullcodeline": "if (rotated_image != (Image *) NULL)"
    },
    {
        "line": 220,
        "fullcodeline": "if (image_info->number_scenes != 0)"
    },
    {
        "line": 228,
        "fullcodeline": "if (GetNextImageInList(image) == (Image *) NULL)"
    },
    {
        "line": 236,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 241,
        "fullcodeline": "return(DestroyImageList(image));"
    },
    {
        "line": 67,
        "fullcodeline": "HDR.nRows=ReadBlobLSBLong(image);"
    },
    {
        "line": 68,
        "fullcodeline": "HDR.nCols=ReadBlobLSBLong(image);"
    },
    {
        "line": 69,
        "fullcodeline": "HDR.imagf=ReadBlobLSBLong(image);"
    },
    {
        "line": 70,
        "fullcodeline": "HDR.nameLen=ReadBlobLSBLong(image);"
    },
    {
        "line": 71,
        "fullcodeline": "endian=LSBEndian;"
    },
    {
        "line": 93,
        "fullcodeline": "byte=ReadBlobByte(image);"
    },
    {
        "line": 107,
        "fullcodeline": "Swap(image->columns,image->rows);"
    },
    {
        "line": 109,
        "fullcodeline": "SeekBlob(image, HDR.nCols*ldblk, SEEK_CUR);"
    },
    {
        "line": 126,
        "fullcodeline": "format_type=FloatingPointQuantumFormat;"
    },
    {
        "line": 127,
        "fullcodeline": "depth=64;"
    },
    {
        "line": 130,
        "fullcodeline": "format_type=FloatingPointQuantumFormat;"
    },
    {
        "line": 131,
        "fullcodeline": "depth=32;"
    },
    {
        "line": 134,
        "fullcodeline": "format_type=UnsignedQuantumFormat;"
    },
    {
        "line": 135,
        "fullcodeline": "depth=16;"
    },
    {
        "line": 138,
        "fullcodeline": "format_type=SignedQuantumFormat;"
    },
    {
        "line": 139,
        "fullcodeline": "depth=16;"
    },
    {
        "line": 142,
        "fullcodeline": "format_type=UnsignedQuantumFormat;"
    },
    {
        "line": 143,
        "fullcodeline": "depth=8;"
    },
    {
        "line": 146,
        "fullcodeline": "format_type=UnsignedQuantumFormat;"
    },
    {
        "line": 147,
        "fullcodeline": "depth=8;"
    },
    {
        "line": 152,
        "fullcodeline": "SetQuantumEndian(image,quantum_info,MSBEndian);"
    },
    {
        "line": 163,
        "fullcodeline": "count=ReadBlob(image,depth/8*image->columns,(char *) pixels);"
    },
    {
        "line": 166,
        "fullcodeline": "q=QueueAuthenticPixels(image,0,image->rows-y-1,image->columns,1,"
    },
    {
        "line": 170,
        "fullcodeline": "(void) ImportQuantumPixels(image,(CacheView *) NULL,quantum_info,"
    },
    {
        "line": 199,
        "fullcodeline": "quantum_info=DestroyQuantumInfo(quantum_info);"
    },
    {
        "line": 202,
        "fullcodeline": "ThrowFileException(exception,CorruptImageError,\"UnexpectedEndOfFile\","
    },
    {
        "line": 209,
        "fullcodeline": "rotated_image->page.x=0;"
    },
    {
        "line": 210,
        "fullcodeline": "rotated_image->page.y=0;"
    },
    {
        "line": 211,
        "fullcodeline": "rotated_image->colors = image->colors;"
    },
    {
        "line": 212,
        "fullcodeline": "DestroyBlob(rotated_image);"
    },
    {
        "line": 213,
        "fullcodeline": "rotated_image->blob=ReferenceBlob(image->blob);"
    },
    {
        "line": 214,
        "fullcodeline": "AppendImageToList(&image,rotated_image);"
    },
    {
        "line": 215,
        "fullcodeline": "DeleteImageFromList(&image);"
    },
    {
        "line": 230,
        "fullcodeline": "status=MagickFalse;"
    },
    {
        "line": 235,
        "fullcodeline": "GetBlobSize(image));"
    },
    {
        "line": 75,
        "fullcodeline": "HDR.nRows=ReadBlobMSBLong(image);"
    },
    {
        "line": 76,
        "fullcodeline": "HDR.nCols=ReadBlobMSBLong(image);"
    },
    {
        "line": 77,
        "fullcodeline": "HDR.imagf=ReadBlobMSBLong(image);"
    },
    {
        "line": 78,
        "fullcodeline": "HDR.nameLen=ReadBlobMSBLong(image);"
    },
    {
        "line": 79,
        "fullcodeline": "endian=MSBEndian;"
    },
    {
        "line": 84,
        "fullcodeline": "return(DestroyImageList(image));"
    },
    {
        "line": 94,
        "fullcodeline": "if (byte == EOF)"
    },
    {
        "line": 104,
        "fullcodeline": "return(DestroyImageList(image));"
    },
    {
        "line": 108,
        "fullcodeline": "if(HDR.imagf==1) ldblk *= 2;"
    },
    {
        "line": 110,
        "fullcodeline": "if ((image->columns == 0) || (image->rows == 0))"
    },
    {
        "line": 117,
        "fullcodeline": "return(DestroyImageList(image));"
    },
    {
        "line": 122,
        "fullcodeline": "return(DestroyImageList(image));"
    },
    {
        "line": 164,
        "fullcodeline": "if (count == -1)"
    },
    {
        "line": 168,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 172,
        "fullcodeline": "if ((HDR.Type[1] == 2) || (HDR.Type[1] == 3))"
    },
    {
        "line": 174,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 176,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 185,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 221,
        "fullcodeline": "if (image->scene >= (image_info->scene+image_info->number_scenes-1))"
    },
    {
        "line": 96,
        "fullcodeline": "ThrowFileException(exception,CorruptImageError,\"UnexpectedEndOfFile\","
    },
    {
        "line": 173,
        "fullcodeline": "FixSignedValues(image,q,(int) image->columns);"
    },
    {
        "line": 178,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 190,
        "fullcodeline": "count=ReadBlob(image,depth/8*image->columns,(char *) pixels);"
    },
    {
        "line": 111,
        "fullcodeline": "return(image->previous == (Image *) NULL ? DestroyImageList(image)"
    },
    {
        "line": 180,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 191,
        "fullcodeline": "if (count == -1)"
    },
    {
        "line": 193,
        "fullcodeline": "if (HDR.Type[1] == 0)"
    },
    {
        "line": 194,
        "fullcodeline": "InsertComplexDoubleRow(image,(double *) pixels,y,0,0,exception);"
    },
    {
        "line": 196,
        "fullcodeline": "InsertComplexFloatRow(image,(float *) pixels,y,0,0,exception);"
    }
]