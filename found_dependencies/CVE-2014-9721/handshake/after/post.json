[
    {
        "line": 4,
        "fullcodeline": "zmq_assert (greeting_bytes_read < greeting_size);"
    },
    {
        "line": 79,
        "fullcodeline": "const size_t revision_pos = 10;"
    },
    {
        "line": 204,
        "fullcodeline": "handshaking = false;"
    },
    {
        "line": 6,
        "fullcodeline": "while (greeting_bytes_read < greeting_size) {"
    },
    {
        "line": 83,
        "fullcodeline": "if (greeting_recv [0] != 0xff || !(greeting_recv [9] & 0x01)) {"
    },
    {
        "line": 199,
        "fullcodeline": "if (outsize == 0)"
    },
    {
        "line": 7,
        "fullcodeline": "const int n = read (greeting_recv + greeting_bytes_read,"
    },
    {
        "line": 19,
        "fullcodeline": "greeting_bytes_read += n;"
    },
    {
        "line": 89,
        "fullcodeline": "encoder = new (std::nothrow) v1_encoder_t (out_batch_size);"
    },
    {
        "line": 92,
        "fullcodeline": "decoder = new (std::nothrow) v1_decoder_t (in_batch_size, options.maxmsgsize);"
    },
    {
        "line": 99,
        "fullcodeline": "const size_t header_size = options.identity_size + 1 >= 255 ? 10 : 2;"
    },
    {
        "line": 100,
        "fullcodeline": "unsigned char tmp [10], *bufferp = tmp;"
    },
    {
        "line": 104,
        "fullcodeline": "const int rc = tx_msg.init_size (options.identity_size);"
    },
    {
        "line": 105,
        "fullcodeline": "zmq_assert (rc == 0);"
    },
    {
        "line": 106,
        "fullcodeline": "memcpy (tx_msg.data (), options.identity, options.identity_size);"
    },
    {
        "line": 107,
        "fullcodeline": "encoder->load_msg (&tx_msg);"
    },
    {
        "line": 108,
        "fullcodeline": "size_t buffer_size = encoder->encode (&bufferp, header_size);"
    },
    {
        "line": 109,
        "fullcodeline": "zmq_assert (buffer_size == header_size);"
    },
    {
        "line": 112,
        "fullcodeline": "inpos = greeting_recv;"
    },
    {
        "line": 113,
        "fullcodeline": "insize = greeting_bytes_read;"
    },
    {
        "line": 9,
        "fullcodeline": "if (n == 0) {"
    },
    {
        "line": 13,
        "fullcodeline": "if (n == -1) {"
    },
    {
        "line": 24,
        "fullcodeline": "if (greeting_recv [0] != 0xff)"
    },
    {
        "line": 27,
        "fullcodeline": "if (greeting_bytes_read < signature_size)"
    },
    {
        "line": 34,
        "fullcodeline": "if (!(greeting_recv [9] & 0x01))"
    },
    {
        "line": 39,
        "fullcodeline": "if (outpos + outsize == greeting_send + signature_size) {"
    },
    {
        "line": 45,
        "fullcodeline": "if (greeting_bytes_read > signature_size) {"
    },
    {
        "line": 84,
        "fullcodeline": "if (session->zap_enabled ()) {"
    },
    {
        "line": 118,
        "fullcodeline": "if (options.type == ZMQ_PUB || options.type == ZMQ_XPUB)"
    },
    {
        "line": 8,
        "fullcodeline": "greeting_size - greeting_bytes_read);"
    },
    {
        "line": 10,
        "fullcodeline": "error ();"
    },
    {
        "line": 42,
        "fullcodeline": "outpos [outsize++] = 3;     //  Major version number"
    },
    {
        "line": 86,
        "fullcodeline": "error ();"
    },
    {
        "line": 119,
        "fullcodeline": "subscription_required = true;"
    },
    {
        "line": 129,
        "fullcodeline": "if (greeting_recv [revision_pos] == ZMTP_1_0) {"
    },
    {
        "line": 14,
        "fullcodeline": "if (errno != EAGAIN)"
    },
    {
        "line": 40,
        "fullcodeline": "if (outsize == 0)"
    },
    {
        "line": 46,
        "fullcodeline": "if (outpos + outsize == greeting_send + signature_size + 1) {"
    },
    {
        "line": 135,
        "fullcodeline": "encoder = new (std::nothrow) v1_encoder_t ("
    },
    {
        "line": 139,
        "fullcodeline": "decoder = new (std::nothrow) v1_decoder_t ("
    },
    {
        "line": 15,
        "fullcodeline": "error ();"
    },
    {
        "line": 130,
        "fullcodeline": "if (session->zap_enabled ()) {"
    },
    {
        "line": 47,
        "fullcodeline": "if (outsize == 0)"
    },
    {
        "line": 51,
        "fullcodeline": "if (greeting_recv [10] == ZMTP_1_0"
    },
    {
        "line": 132,
        "fullcodeline": "error ();"
    },
    {
        "line": 144,
        "fullcodeline": "if (greeting_recv [revision_pos] == ZMTP_2_0) {"
    },
    {
        "line": 52,
        "fullcodeline": "||  greeting_recv [10] == ZMTP_2_0)"
    },
    {
        "line": 150,
        "fullcodeline": "encoder = new (std::nothrow) v2_encoder_t (out_batch_size);"
    },
    {
        "line": 153,
        "fullcodeline": "decoder = new (std::nothrow) v2_decoder_t ("
    },
    {
        "line": 55,
        "fullcodeline": "outpos [outsize++] = 0; //  Minor version number"
    },
    {
        "line": 56,
        "fullcodeline": "memset (outpos + outsize, 0, 20);"
    },
    {
        "line": 58,
        "fullcodeline": "zmq_assert (options.mechanism == ZMQ_NULL"
    },
    {
        "line": 69,
        "fullcodeline": "outsize += 20;"
    },
    {
        "line": 70,
        "fullcodeline": "memset (outpos + outsize, 0, 32);"
    },
    {
        "line": 71,
        "fullcodeline": "outsize += 32;"
    },
    {
        "line": 72,
        "fullcodeline": "greeting_size = v3_greeting_size;"
    },
    {
        "line": 145,
        "fullcodeline": "if (session->zap_enabled ()) {"
    },
    {
        "line": 158,
        "fullcodeline": "encoder = new (std::nothrow) v2_encoder_t (out_batch_size);"
    },
    {
        "line": 161,
        "fullcodeline": "decoder = new (std::nothrow) v2_decoder_t ("
    },
    {
        "line": 53,
        "fullcodeline": "outpos [outsize++] = options.type;"
    },
    {
        "line": 62,
        "fullcodeline": "if (options.mechanism == ZMQ_NULL)"
    },
    {
        "line": 147,
        "fullcodeline": "error ();"
    },
    {
        "line": 165,
        "fullcodeline": "if (options.mechanism == ZMQ_NULL"
    },
    {
        "line": 60,
        "fullcodeline": "||  options.mechanism == ZMQ_CURVE);"
    },
    {
        "line": 63,
        "fullcodeline": "memcpy (outpos + outsize, \"NULL\", 4);"
    },
    {
        "line": 166,
        "fullcodeline": "&&  memcmp (greeting_recv + 12, \"NULL\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\", 20) == 0) {"
    },
    {
        "line": 167,
        "fullcodeline": "mechanism = new (std::nothrow)"
    },
    {
        "line": 59,
        "fullcodeline": "||  options.mechanism == ZMQ_PLAIN"
    },
    {
        "line": 65,
        "fullcodeline": "if (options.mechanism == ZMQ_PLAIN)"
    },
    {
        "line": 172,
        "fullcodeline": "if (options.mechanism == ZMQ_PLAIN"
    },
    {
        "line": 66,
        "fullcodeline": "memcpy (outpos + outsize, \"PLAIN\", 5);"
    },
    {
        "line": 173,
        "fullcodeline": "&&  memcmp (greeting_recv + 12, \"PLAIN\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\", 20) == 0) {"
    },
    {
        "line": 174,
        "fullcodeline": "mechanism = new (std::nothrow)"
    },
    {
        "line": 68,
        "fullcodeline": "memcpy (outpos + outsize, \"CURVE\", 5);"
    },
    {
        "line": 191,
        "fullcodeline": "error ();"
    }
]