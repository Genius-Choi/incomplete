[
    {
        "line": 3,
        "fullcodeline": "uint8_t temp_ip = 0;"
    },
    {
        "line": 4,
        "fullcodeline": "struct pbuf *newly_malloc_packet_buffer = NULL;"
    },
    {
        "line": 7,
        "fullcodeline": "newly_malloc_packet_buffer = pbuf_alloc(PBUF_TRANSPORT, DHCP_MSG_LEN + DHCP_OPTION_TOTAL_LENGTH_MAX, PBUF_RAM);"
    },
    {
        "line": 19,
        "fullcodeline": "dhcp_message_total_options_lenth = DHCP_OPTION_TOTAL_LENGTH_MAX;"
    },
    {
        "line": 20,
        "fullcodeline": "dhcp_message_repository = (struct dhcp_msg *)newly_malloc_packet_buffer->payload;"
    },
    {
        "line": 49,
        "fullcodeline": "printf(\"\\n\\r[%d]DHCP assign ip = %d.%d.%d.%d, hwaddr 0x%02x:0x%02x:0x%02x:0x%02x:0x%02x:0x%02x\\n\", \\"
    },
    {
        "line": 54,
        "fullcodeline": "IP4_ADDR(&dhcps_allocated_client_address, (ip4_addr1(&dhcps_network_id)),"
    },
    {
        "line": 59,
        "fullcodeline": "dhcps_initialize_message(dhcp_message_repository);"
    },
    {
        "line": 87,
        "fullcodeline": "pbuf_free(newly_malloc_packet_buffer);"
    },
    {
        "line": 8,
        "fullcodeline": "if(newly_malloc_packet_buffer == NULL)"
    },
    {
        "line": 13,
        "fullcodeline": "if(pbuf_copy(newly_malloc_packet_buffer, packet_buffer) != ERR_OK)"
    },
    {
        "line": 26,
        "fullcodeline": "if(temp_ip == 0)"
    },
    {
        "line": 31,
        "fullcodeline": "if (temp_ip == 0) {"
    },
    {
        "line": 50,
        "fullcodeline": "xTaskGetTickCount(), ip4_addr1(&dhcps_network_id), \\"
    },
    {
        "line": 51,
        "fullcodeline": "ip4_addr2(&dhcps_network_id), ip4_addr3(&dhcps_network_id), temp_ip, \\"
    },
    {
        "line": 55,
        "fullcodeline": "ip4_addr2(&dhcps_network_id), ip4_addr3(&dhcps_network_id), temp_ip);"
    },
    {
        "line": 60,
        "fullcodeline": "if(add_offer_options(add_msg_type(&dhcp_message_repository->options[4], DHCP_MESSAGE_TYPE_OFFER)) == 0){"
    },
    {
        "line": 10,
        "fullcodeline": "printf(\"\\r\\n[%s] error:  pbuf alloc fail !\", __func__);"
    },
    {
        "line": 15,
        "fullcodeline": "printf(\"\\r\\n[%s] error:  pbuf copy fail !\", __func__);"
    },
    {
        "line": 16,
        "fullcodeline": "pbuf_free(newly_malloc_packet_buffer);"
    },
    {
        "line": 27,
        "fullcodeline": "temp_ip = search_next_ip();"
    },
    {
        "line": 37,
        "fullcodeline": "printf(\"\\r\\n No useable ip!!!!\\r\\n\");"
    },
    {
        "line": 61,
        "fullcodeline": "if(dhcp_message_repository->flags == 0x0){"
    },
    {
        "line": 72,
        "fullcodeline": "udp_sendto_if(dhcps_pcb, newly_malloc_packet_buffer, &dhcps_allocated_client_address, DHCP_CLIENT_PORT, dhcps_netif);"
    },
    {
        "line": 63,
        "fullcodeline": "for(int i=0;i<6;i++)"
    },
    {
        "line": 84,
        "fullcodeline": "udp_sendto_if(dhcps_pcb, newly_malloc_packet_buffer, &dhcps_send_broadcast_address, DHCP_CLIENT_PORT, dhcps_netif);"
    }
]