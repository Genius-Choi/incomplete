[
    {
        "line": 14,
        "fullcodeline": "bufs = kcalloc(nr_pages, sizeof(*bufs), GFP_KERNEL | __GFP_NOWARN);"
    },
    {
        "line": 39,
        "fullcodeline": "account_pipe_buffers(pipe, pipe->buffers, nr_pages);"
    },
    {
        "line": 40,
        "fullcodeline": "pipe->curbuf = 0;"
    },
    {
        "line": 41,
        "fullcodeline": "kfree(pipe->bufs);"
    },
    {
        "line": 42,
        "fullcodeline": "pipe->bufs = bufs;"
    },
    {
        "line": 43,
        "fullcodeline": "pipe->buffers = nr_pages;"
    },
    {
        "line": 11,
        "fullcodeline": "if (nr_pages < pipe->nrbufs)"
    },
    {
        "line": 15,
        "fullcodeline": "if (unlikely(!bufs))"
    },
    {
        "line": 44,
        "fullcodeline": "return nr_pages * PAGE_SIZE;"
    },
    {
        "line": 26,
        "fullcodeline": "tail = pipe->curbuf + pipe->nrbufs;"
    },
    {
        "line": 32,
        "fullcodeline": "head = pipe->nrbufs - tail;"
    },
    {
        "line": 12,
        "fullcodeline": "return -EBUSY;"
    },
    {
        "line": 16,
        "fullcodeline": "return -ENOMEM;"
    },
    {
        "line": 27,
        "fullcodeline": "if (tail < pipe->buffers)"
    },
    {
        "line": 28,
        "fullcodeline": "tail = 0;"
    },
    {
        "line": 34,
        "fullcodeline": "memcpy(bufs, pipe->bufs + pipe->curbuf, head * sizeof(struct pipe_buffer));"
    },
    {
        "line": 36,
        "fullcodeline": "memcpy(bufs + head, pipe->bufs, tail * sizeof(struct pipe_buffer));"
    },
    {
        "line": 30,
        "fullcodeline": "tail &= (pipe->buffers - 1);"
    }
]