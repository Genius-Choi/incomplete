[
    {
        "line": 5,
        "fullcodeline": "char uuid[16];"
    },
    {
        "line": 7,
        "fullcodeline": "GF_BitStream *uncomp_bs = NULL;"
    },
    {
        "line": 8,
        "fullcodeline": "u8 *uncomp_data = NULL;"
    },
    {
        "line": 9,
        "fullcodeline": "u32 compressed_size=0;"
    },
    {
        "line": 11,
        "fullcodeline": "Bool skip_logs = (gf_bs_get_cookie(bs) & GF_ISOM_BS_COOKIE_NO_LOGS ) ? GF_TRUE : GF_FALSE;"
    },
    {
        "line": 12,
        "fullcodeline": "Bool is_special = GF_TRUE;"
    },
    {
        "line": 20,
        "fullcodeline": "comp_start = start = gf_bs_get_position(bs);"
    },
    {
        "line": 22,
        "fullcodeline": "uuid_type = 0;"
    },
    {
        "line": 23,
        "fullcodeline": "size = (u64) gf_bs_read_u32(bs);"
    },
    {
        "line": 24,
        "fullcodeline": "hdr_size = 4;"
    },
    {
        "line": 91,
        "fullcodeline": "memset(uuid, 0, 16);"
    },
    {
        "line": 116,
        "fullcodeline": "restore_type = 0;"
    },
    {
        "line": 163,
        "fullcodeline": "end = gf_bs_available(bs);"
    },
    {
        "line": 170,
        "fullcodeline": "newBox->size = size - hdr_size;"
    },
    {
        "line": 172,
        "fullcodeline": "e = gf_isom_full_box_read(newBox, bs);"
    },
    {
        "line": 178,
        "fullcodeline": "newBox->size = size;"
    },
    {
        "line": 179,
        "fullcodeline": "end = gf_bs_get_position(bs);"
    },
    {
        "line": 14,
        "fullcodeline": "if ((bs == NULL) || (outBox == NULL) ) return GF_BAD_PARAM;"
    },
    {
        "line": 92,
        "fullcodeline": "if (type == GF_ISOM_BOX_TYPE_UUID ) {"
    },
    {
        "line": 102,
        "fullcodeline": "if (size == 1) {"
    },
    {
        "line": 112,
        "fullcodeline": "if ( size < hdr_size ) {"
    },
    {
        "line": 128,
        "fullcodeline": "if (parent_type && (parent_type == GF_ISOM_BOX_TYPE_TREF)) {"
    },
    {
        "line": 157,
        "fullcodeline": "if (!newBox->type) newBox->type = type;"
    },
    {
        "line": 161,
        "fullcodeline": "payload_start = gf_bs_get_position(bs);"
    },
    {
        "line": 164,
        "fullcodeline": "if (size - hdr_size > end ) {"
    },
    {
        "line": 173,
        "fullcodeline": "if (!e) e = gf_isom_box_read(newBox, bs);"
    },
    {
        "line": 212,
        "fullcodeline": "if (e && (e != GF_ISOM_INCOMPLETE_FILE)) {"
    },
    {
        "line": 223,
        "fullcodeline": "if (end-start > size) {"
    },
    {
        "line": 16,
        "fullcodeline": "if (gf_bs_available(bs) < 8) {"
    },
    {
        "line": 26,
        "fullcodeline": "if ((size >= 2) && (size <= 4)) {"
    },
    {
        "line": 27,
        "fullcodeline": "size = 4;"
    },
    {
        "line": 28,
        "fullcodeline": "type = GF_ISOM_BOX_TYPE_VOID;"
    },
    {
        "line": 96,
        "fullcodeline": "gf_bs_read_data(bs, uuid, 16);"
    },
    {
        "line": 97,
        "fullcodeline": "hdr_size += 16;"
    },
    {
        "line": 98,
        "fullcodeline": "uuid_type = gf_isom_solve_uuid_box(uuid);"
    },
    {
        "line": 106,
        "fullcodeline": "size = gf_bs_read_u64(bs);"
    },
    {
        "line": 107,
        "fullcodeline": "hdr_size += 8;"
    },
    {
        "line": 117,
        "fullcodeline": "if ((parent_type==GF_ISOM_BOX_TYPE_STSD) && (type==GF_QT_SUBTYPE_RAW) ) {"
    },
    {
        "line": 118,
        "fullcodeline": "u64 cookie = gf_bs_get_cookie(bs);"
    },
    {
        "line": 119,
        "fullcodeline": "restore_type = type;"
    },
    {
        "line": 129,
        "fullcodeline": "newBox = gf_isom_box_new(GF_ISOM_BOX_TYPE_REFT);"
    },
    {
        "line": 152,
        "fullcodeline": "if (type==GF_ISOM_BOX_TYPE_UUID && !is_special) {"
    },
    {
        "line": 159,
        "fullcodeline": "newBox->type = restore_type;"
    },
    {
        "line": 165,
        "fullcodeline": "newBox->size = size - hdr_size - end;"
    },
    {
        "line": 190,
        "fullcodeline": "size -= 8;"
    },
    {
        "line": 208,
        "fullcodeline": "newBox->internal_flags = GF_ISOM_BOX_COMPRESSED;"
    },
    {
        "line": 30,
        "fullcodeline": "type = gf_bs_read_u32(bs);"
    },
    {
        "line": 31,
        "fullcodeline": "hdr_size += 4;"
    },
    {
        "line": 120,
        "fullcodeline": "if (cookie & GF_ISOM_BS_COOKIE_VISUAL_TRACK)"
    },
    {
        "line": 130,
        "fullcodeline": "if (!newBox) return GF_OUT_OF_MEM;"
    },
    {
        "line": 192,
        "fullcodeline": "if (type==GF_ISOM_BOX_TYPE_MOOF) {"
    },
    {
        "line": 33,
        "fullcodeline": "if (type == GF_ISOM_BOX_TYPE_TOTL)"
    },
    {
        "line": 35,
        "fullcodeline": "if (!size) {"
    },
    {
        "line": 48,
        "fullcodeline": "if (is_root_box && (size>=8)) {"
    },
    {
        "line": 93,
        "fullcodeline": "if (gf_bs_available(bs) < 16) {"
    },
    {
        "line": 103,
        "fullcodeline": "if (gf_bs_available(bs) < 8) {"
    },
    {
        "line": 121,
        "fullcodeline": "type = GF_QT_SUBTYPE_RAW_VID;"
    },
    {
        "line": 132,
        "fullcodeline": "} else if (parent_type && (parent_type == GF_ISOM_BOX_TYPE_IREF)) {"
    },
    {
        "line": 176,
        "fullcodeline": "e = GF_OK;"
    },
    {
        "line": 229,
        "fullcodeline": "} else if (end-start < size) {"
    },
    {
        "line": 34,
        "fullcodeline": "size = 12;"
    },
    {
        "line": 51,
        "fullcodeline": "u32 osize = 0;"
    },
    {
        "line": 52,
        "fullcodeline": "u32 otype = type;"
    },
    {
        "line": 123,
        "fullcodeline": "type = GF_QT_SUBTYPE_RAW_AUD;"
    },
    {
        "line": 133,
        "fullcodeline": "newBox = gf_isom_box_new(GF_ISOM_BOX_TYPE_REFI);"
    },
    {
        "line": 193,
        "fullcodeline": "((GF_MovieFragmentBox *)newBox)->compressed_diff = (s32)size - (s32)compressed_size;"
    },
    {
        "line": 230,
        "fullcodeline": "u32 to_skip = (u32) (size-(end-start));"
    },
    {
        "line": 53,
        "fullcodeline": "if (type==GF_4CC('!', 'm', 'o', 'f')) {"
    },
    {
        "line": 134,
        "fullcodeline": "if (!newBox) return GF_OUT_OF_MEM;"
    },
    {
        "line": 196,
        "fullcodeline": "else if (type==GF_ISOM_BOX_TYPE_MOOV) {"
    },
    {
        "line": 40,
        "fullcodeline": "size = gf_bs_available(bs) + 8;"
    },
    {
        "line": 55,
        "fullcodeline": "type = GF_ISOM_BOX_TYPE_MOOF;"
    },
    {
        "line": 71,
        "fullcodeline": "compb = gf_malloc((u32) (size-8));"
    },
    {
        "line": 73,
        "fullcodeline": "compressed_size = (u32) (size - 8);"
    },
    {
        "line": 74,
        "fullcodeline": "gf_bs_read_data(bs, compb, compressed_size);"
    },
    {
        "line": 75,
        "fullcodeline": "e = gf_gz_decompress_payload(compb, compressed_size, &uncomp_data, &osize);"
    },
    {
        "line": 82,
        "fullcodeline": "size = osize + 8;"
    },
    {
        "line": 83,
        "fullcodeline": "uncomp_bs = gf_bs_new(uncomp_data, osize, GF_BITSTREAM_READ);"
    },
    {
        "line": 84,
        "fullcodeline": "bs = uncomp_bs;"
    },
    {
        "line": 85,
        "fullcodeline": "start = 0;"
    },
    {
        "line": 136,
        "fullcodeline": "} else if (parent_type && (parent_type == GF_ISOM_BOX_TYPE_TRGR)) {"
    },
    {
        "line": 37,
        "fullcodeline": "if (!skip_logs) {"
    },
    {
        "line": 137,
        "fullcodeline": "newBox = gf_isom_box_new(GF_ISOM_BOX_TYPE_TRGT);"
    },
    {
        "line": 197,
        "fullcodeline": "((GF_MovieBox *)newBox)->compressed_diff = (s32)size - (s32)compressed_size;"
    },
    {
        "line": 38,
        "fullcodeline": "GF_LOG(GF_LOG_DEBUG, GF_LOG_CONTAINER, (\"[iso file] Warning Read Box type %s (0x%08X) size 0 reading till the end of file\\n\", gf_4cc_to_str(type), type));"
    },
    {
        "line": 57,
        "fullcodeline": "else if (type==GF_4CC('!', 'm', 'o', 'v')) {"
    },
    {
        "line": 77,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[iso file] Failed to uncompress payload for box type %s (0x%08X)\\n\", gf_4cc_to_str(otype), otype));"
    },
    {
        "line": 138,
        "fullcodeline": "if (!newBox) return GF_OUT_OF_MEM;"
    },
    {
        "line": 201,
        "fullcodeline": "else if (type==GF_ISOM_BOX_TYPE_SIDX) {"
    },
    {
        "line": 232,
        "fullcodeline": "if ((to_skip!=4) || gf_bs_peek_bits(bs, 32, 0)) {"
    },
    {
        "line": 59,
        "fullcodeline": "type = GF_ISOM_BOX_TYPE_MOOV;"
    },
    {
        "line": 140,
        "fullcodeline": "} else if (parent_type && (parent_type == GF_ISOM_BOX_TYPE_GRPL)) {"
    },
    {
        "line": 141,
        "fullcodeline": "newBox = gf_isom_box_new(GF_ISOM_BOX_TYPE_GRPT);"
    },
    {
        "line": 202,
        "fullcodeline": "((GF_SegmentIndexBox *)newBox)->compressed_diff = (s32)size - (s32)compressed_size;"
    },
    {
        "line": 61,
        "fullcodeline": "else if (type==GF_4CC('!', 's', 'i', 'x')) {"
    },
    {
        "line": 142,
        "fullcodeline": "if (!newBox) return GF_OUT_OF_MEM;"
    },
    {
        "line": 146,
        "fullcodeline": "is_special = GF_FALSE;"
    },
    {
        "line": 147,
        "fullcodeline": "newBox = gf_isom_box_new_ex(uuid_type ? uuid_type : type, parent_type, skip_logs, is_root_box);"
    },
    {
        "line": 63,
        "fullcodeline": "type = GF_ISOM_BOX_TYPE_SIDX;"
    },
    {
        "line": 148,
        "fullcodeline": "if (!newBox) return GF_OUT_OF_MEM;"
    },
    {
        "line": 206,
        "fullcodeline": "((GF_SubsegmentIndexBox *)newBox)->compressed_diff = (s32)size - (s32)compressed_size;"
    },
    {
        "line": 65,
        "fullcodeline": "else if (type==GF_4CC('!', 's', 's', 'x')) {"
    },
    {
        "line": 67,
        "fullcodeline": "type = GF_ISOM_BOX_TYPE_SSIX;"
    }
]