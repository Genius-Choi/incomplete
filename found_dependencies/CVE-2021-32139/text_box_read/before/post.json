[
    {
        "line": 5,
        "fullcodeline": "GF_TextSampleEntryBox *ptr = (GF_TextSampleEntryBox*)s;"
    },
    {
        "line": 7,
        "fullcodeline": "ISOM_DECREASE_SIZE(ptr, 51);"
    },
    {
        "line": 9,
        "fullcodeline": "e = gf_isom_base_sample_entry_read((GF_SampleEntryBox *)ptr, bs);"
    },
    {
        "line": 12,
        "fullcodeline": "ptr->displayFlags = gf_bs_read_u32(bs);\t\t\t/*Display flags*/"
    },
    {
        "line": 13,
        "fullcodeline": "ptr->textJustification = gf_bs_read_u32(bs);\t/*Text justification*/"
    },
    {
        "line": 14,
        "fullcodeline": "gf_bs_read_data(bs, ptr->background_color, 6);\t/*Background color*/"
    },
    {
        "line": 15,
        "fullcodeline": "gpp_read_box(bs, &ptr->default_box);\t\t\t/*Default text box*/"
    },
    {
        "line": 16,
        "fullcodeline": "gf_bs_read_data(bs, ptr->reserved1, 8);\t\t\t/*Reserved*/"
    },
    {
        "line": 17,
        "fullcodeline": "ptr->fontNumber = gf_bs_read_u16(bs);\t\t\t/*Font number*/"
    },
    {
        "line": 18,
        "fullcodeline": "ptr->fontFace   = gf_bs_read_u16(bs);\t\t\t/*Font face*/"
    },
    {
        "line": 19,
        "fullcodeline": "ptr->reserved2  = gf_bs_read_u8(bs);\t\t\t/*Reserved*/"
    },
    {
        "line": 20,
        "fullcodeline": "ptr->reserved3  = gf_bs_read_u16(bs);\t\t\t/*Reserved*/"
    },
    {
        "line": 21,
        "fullcodeline": "gf_bs_read_data(bs, ptr->foreground_color, 6);\t/*Foreground color*/"
    },
    {
        "line": 27,
        "fullcodeline": "ISOM_DECREASE_SIZE(ptr, 1);"
    },
    {
        "line": 28,
        "fullcodeline": "pSize = gf_bs_read_u8(bs); /*a Pascal string begins with its size: get textName size*/"
    },
    {
        "line": 71,
        "fullcodeline": "ISOM_DECREASE_SIZE(ptr, pSize);"
    },
    {
        "line": 24,
        "fullcodeline": "if (!ptr->size)"
    },
    {
        "line": 30,
        "fullcodeline": "if (ptr->size < pSize) {"
    },
    {
        "line": 72,
        "fullcodeline": "return gf_isom_box_array_read(s, bs);"
    },
    {
        "line": 31,
        "fullcodeline": "u32 b_size = pSize;"
    },
    {
        "line": 32,
        "fullcodeline": "size_t i = 0;"
    },
    {
        "line": 33,
        "fullcodeline": "GF_LOG(GF_LOG_DEBUG, GF_LOG_CONTAINER, (\"[iso file] text box doesn't use a Pascal string: trying to decode anyway.\\n\"));"
    },
    {
        "line": 34,
        "fullcodeline": "ptr->textName = (char*)gf_malloc((size_t)ptr->size + 1 + 1);"
    },
    {
        "line": 56,
        "fullcodeline": "ptr->textName[i] = '\\0';\t\t\t\t/*Font name*/"
    },
    {
        "line": 57,
        "fullcodeline": "GF_LOG(GF_LOG_WARNING, GF_LOG_CONTAINER, (\"[iso file] text box doesn't use a Pascal string: \\\"%s\\\" detected.\\n\", ptr->textName));"
    },
    {
        "line": 61,
        "fullcodeline": "ptr->textName = (char*) gf_malloc(pSize+1 * sizeof(char));"
    },
    {
        "line": 69,
        "fullcodeline": "ptr->textName[pSize] = '\\0';\t\t\t\t/*Font name*/"
    },
    {
        "line": 35,
        "fullcodeline": "if (!ptr->textName) return GF_OUT_OF_MEM;"
    },
    {
        "line": 62,
        "fullcodeline": "if (!ptr->textName) return GF_OUT_OF_MEM;"
    },
    {
        "line": 64,
        "fullcodeline": "if (gf_bs_read_data(bs, ptr->textName, pSize) != pSize) {"
    },
    {
        "line": 38,
        "fullcodeline": "char c = (char)b_size;"
    },
    {
        "line": 49,
        "fullcodeline": "i++;"
    },
    {
        "line": 52,
        "fullcodeline": "ptr->size--;"
    },
    {
        "line": 53,
        "fullcodeline": "b_size = gf_bs_read_u8(bs);"
    },
    {
        "line": 65,
        "fullcodeline": "gf_free(ptr->textName);"
    },
    {
        "line": 66,
        "fullcodeline": "ptr->textName = NULL;"
    },
    {
        "line": 39,
        "fullcodeline": "if (c == '\\0') {"
    },
    {
        "line": 50,
        "fullcodeline": "if (!ptr->size)"
    },
    {
        "line": 41,
        "fullcodeline": "} else if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {"
    },
    {
        "line": 42,
        "fullcodeline": "ptr->textName[i] = c;"
    },
    {
        "line": 44,
        "fullcodeline": "gf_free(ptr->textName);"
    },
    {
        "line": 45,
        "fullcodeline": "ptr->textName = NULL;"
    },
    {
        "line": 46,
        "fullcodeline": "GF_LOG(GF_LOG_WARNING, GF_LOG_CONTAINER, (\"[iso file] text box doesn't use a Pascal string and contains non-chars. Abort.\\n\"));"
    }
]