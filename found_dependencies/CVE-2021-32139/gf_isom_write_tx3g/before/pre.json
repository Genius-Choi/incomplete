[
    {
        "line": 4,
        "fullcodeline": "Bool is_qt_text = (a->type==GF_ISOM_BOX_TYPE_TEXT) ? GF_TRUE : GF_FALSE;"
    },
    {
        "line": 5,
        "fullcodeline": "const char *qt_fontname = NULL;"
    },
    {
        "line": 14,
        "fullcodeline": "size = 8 + 18 + 8 + 12;"
    },
    {
        "line": 15,
        "fullcodeline": "size += 8 + 2;"
    },
    {
        "line": 16,
        "fullcodeline": "fount_count = 0;"
    },
    {
        "line": 33,
        "fullcodeline": "gf_bs_write_u32(bs, size);"
    },
    {
        "line": 34,
        "fullcodeline": "gf_bs_write_u32(bs, a->type);"
    },
    {
        "line": 35,
        "fullcodeline": "gf_bs_write_data(bs, a->reserved, 6);"
    },
    {
        "line": 36,
        "fullcodeline": "gf_bs_write_u16(bs, a->dataReferenceIndex);"
    },
    {
        "line": 37,
        "fullcodeline": "gf_bs_write_u32(bs, a->displayFlags);"
    },
    {
        "line": 38,
        "fullcodeline": "gf_bs_write_u8(bs, a->horizontal_justification);"
    },
    {
        "line": 39,
        "fullcodeline": "gf_bs_write_u8(bs, a->vertical_justification);"
    },
    {
        "line": 40,
        "fullcodeline": "gpp_write_rgba(bs, a->back_color);"
    },
    {
        "line": 41,
        "fullcodeline": "gpp_write_box(bs, &a->default_box);"
    },
    {
        "line": 42,
        "fullcodeline": "gpp_write_style(bs, &a->default_style);"
    },
    {
        "line": 44,
        "fullcodeline": "size -= (8 + 18 + 8 + 12);"
    },
    {
        "line": 45,
        "fullcodeline": "gf_bs_write_u32(bs, size);"
    },
    {
        "line": 46,
        "fullcodeline": "gf_bs_write_u32(bs, GF_ISOM_BOX_TYPE_FTAB);"
    },
    {
        "line": 48,
        "fullcodeline": "gf_bs_write_u16(bs, fount_count);"
    },
    {
        "line": 49,
        "fullcodeline": "for (j=0; j<fount_count; j++) {"
    },
    {
        "line": 11,
        "fullcodeline": "if (sidx_offset) gf_bs_write_u8(bs, sidx + sidx_offset);"
    },
    {
        "line": 18,
        "fullcodeline": "GF_TextSampleEntryBox *qt = (GF_TextSampleEntryBox *)a;"
    },
    {
        "line": 20,
        "fullcodeline": "qt_fontname = qt->textName;"
    },
    {
        "line": 21,
        "fullcodeline": "fount_count = 1;"
    },
    {
        "line": 51,
        "fullcodeline": "gf_bs_write_u16(bs, 0);"
    },
    {
        "line": 25,
        "fullcodeline": "fount_count = a->font_table->entry_count;"
    },
    {
        "line": 60,
        "fullcodeline": "gf_bs_write_u16(bs, a->font_table->fonts[j].fontID);"
    },
    {
        "line": 26,
        "fullcodeline": "for (j=0; j<fount_count; j++) {"
    },
    {
        "line": 53,
        "fullcodeline": "u32 len = (u32) strlen(qt_fontname);"
    },
    {
        "line": 54,
        "fullcodeline": "gf_bs_write_u8(bs, len);"
    },
    {
        "line": 55,
        "fullcodeline": "gf_bs_write_data(bs, qt_fontname, len);"
    },
    {
        "line": 27,
        "fullcodeline": "size += 3;"
    },
    {
        "line": 57,
        "fullcodeline": "gf_bs_write_u8(bs, 0);"
    },
    {
        "line": 62,
        "fullcodeline": "u32 len = (u32) strlen(a->font_table->fonts[j].fontName);"
    },
    {
        "line": 63,
        "fullcodeline": "gf_bs_write_u8(bs, len);"
    },
    {
        "line": 64,
        "fullcodeline": "gf_bs_write_data(bs, a->font_table->fonts[j].fontName, len);"
    },
    {
        "line": 66,
        "fullcodeline": "gf_bs_write_u8(bs, 0);"
    },
    {
        "line": 28,
        "fullcodeline": "if (a->font_table->fonts[j].fontName) size += (u32) strlen(a->font_table->fonts[j].fontName);"
    }
]