[
    {
        "line": 10,
        "fullcodeline": "*out_esd = NULL;"
    },
    {
        "line": 12,
        "fullcodeline": "count = gf_list_count(sampleDesc);"
    },
    {
        "line": 15,
        "fullcodeline": "esd = gf_odf_desc_esd_new(2);"
    },
    {
        "line": 16,
        "fullcodeline": "esd->decoderConfig->streamType = GF_STREAM_TEXT;"
    },
    {
        "line": 17,
        "fullcodeline": "esd->decoderConfig->objectTypeIndication = GF_CODECID_TEXT_MPEG4;"
    },
    {
        "line": 19,
        "fullcodeline": "bs = gf_bs_new(NULL, 0, GF_BITSTREAM_WRITE);"
    },
    {
        "line": 23,
        "fullcodeline": "gf_bs_write_u8(bs, 0x10);"
    },
    {
        "line": 25,
        "fullcodeline": "gf_bs_write_u8(bs, 0x10);"
    },
    {
        "line": 27,
        "fullcodeline": "gf_bs_write_u8(bs, 0x10);"
    },
    {
        "line": 28,
        "fullcodeline": "gf_bs_write_u24(bs, mdia->mediaHeader->timeScale);"
    },
    {
        "line": 29,
        "fullcodeline": "gf_bs_write_int(bs, 0, 1);\t/*no alt formats*/"
    },
    {
        "line": 30,
        "fullcodeline": "gf_bs_write_int(bs, 2, 2);\t/*only out-of-band-band sample desc*/"
    },
    {
        "line": 31,
        "fullcodeline": "gf_bs_write_int(bs, 1, 1);\t/*we will write sample desc*/"
    },
    {
        "line": 34,
        "fullcodeline": "has_v_info = 0;"
    },
    {
        "line": 35,
        "fullcodeline": "i=0;"
    },
    {
        "line": 41,
        "fullcodeline": "gf_bs_write_int(bs, has_v_info, 1);"
    },
    {
        "line": 43,
        "fullcodeline": "gf_bs_write_int(bs, 0, 3);\t/*reserved, spec doesn't say the values*/"
    },
    {
        "line": 44,
        "fullcodeline": "gf_bs_write_u8(bs, mdia->mediaTrack->Header->layer);"
    },
    {
        "line": 45,
        "fullcodeline": "gf_bs_write_u16(bs, mdia->mediaTrack->Header->width>>16);"
    },
    {
        "line": 46,
        "fullcodeline": "gf_bs_write_u16(bs, mdia->mediaTrack->Header->height>>16);"
    },
    {
        "line": 49,
        "fullcodeline": "gf_bs_write_u8(bs, count);"
    },
    {
        "line": 69,
        "fullcodeline": "gf_bs_get_content(bs, &esd->decoderConfig->decoderSpecificInfo->data, &esd->decoderConfig->decoderSpecificInfo->dataLength);"
    },
    {
        "line": 70,
        "fullcodeline": "gf_bs_del(bs);"
    },
    {
        "line": 71,
        "fullcodeline": "*out_esd = esd;"
    },
    {
        "line": 13,
        "fullcodeline": "if (!count) return GF_ISOM_INVALID_MEDIA;"
    },
    {
        "line": 36,
        "fullcodeline": "while ((tk = (GF_TrackBox*)gf_list_enum(mdia->mediaTrack->moov->trackList, &i))) {"
    },
    {
        "line": 50,
        "fullcodeline": "for (i=0; i<count; i++) {"
    },
    {
        "line": 52,
        "fullcodeline": "a = (GF_Tx3gSampleEntryBox *) gf_list_get(sampleDesc, i);"
    },
    {
        "line": 54,
        "fullcodeline": "gf_isom_write_tx3g(a, bs, i+1, SAMPLE_INDEX_OFFSET);"
    },
    {
        "line": 59,
        "fullcodeline": "gf_bs_write_u16(bs, 0);"
    },
    {
        "line": 60,
        "fullcodeline": "gf_bs_write_u16(bs, 0);"
    },
    {
        "line": 62,
        "fullcodeline": "trans >>= 16;"
    },
    {
        "line": 63,
        "fullcodeline": "gf_bs_write_u16(bs, trans);"
    },
    {
        "line": 65,
        "fullcodeline": "trans >>= 16;"
    },
    {
        "line": 66,
        "fullcodeline": "gf_bs_write_u16(bs, trans);"
    },
    {
        "line": 37,
        "fullcodeline": "if (tk->Media->handler && (tk->Media->handler->handlerType == GF_ISOM_MEDIA_VISUAL)) {"
    },
    {
        "line": 53,
        "fullcodeline": "if ((a->type != GF_ISOM_BOX_TYPE_TX3G) && (a->type != GF_ISOM_BOX_TYPE_TEXT) ) continue;"
    },
    {
        "line": 38,
        "fullcodeline": "has_v_info = 1;"
    }
]