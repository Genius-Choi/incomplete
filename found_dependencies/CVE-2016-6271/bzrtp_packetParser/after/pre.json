[
    {
        "line": 7,
        "fullcodeline": "uint8_t *messageContent = (uint8_t *)(input+ZRTP_PACKET_HEADER_LENGTH+ZRTP_MESSAGE_HEADER_LENGTH);"
    },
    {
        "line": 14,
        "fullcodeline": "messageData = (bzrtpHelloMessage_t *)malloc(sizeof(bzrtpHelloMessage_t));"
    },
    {
        "line": 17,
        "fullcodeline": "memcpy(messageData->version, messageContent, 4);"
    },
    {
        "line": 18,
        "fullcodeline": "messageContent +=4;"
    },
    {
        "line": 19,
        "fullcodeline": "memcpy(messageData->clientIdentifier, messageContent, 16);"
    },
    {
        "line": 20,
        "fullcodeline": "messageContent +=16;"
    },
    {
        "line": 21,
        "fullcodeline": "memcpy(messageData->H3, messageContent, 32);"
    },
    {
        "line": 22,
        "fullcodeline": "messageContent +=32;"
    },
    {
        "line": 23,
        "fullcodeline": "memcpy(messageData->ZID, messageContent, 12);"
    },
    {
        "line": 24,
        "fullcodeline": "messageContent +=12;"
    },
    {
        "line": 25,
        "fullcodeline": "messageData->S = ((*messageContent)>>6)&0x01;"
    },
    {
        "line": 26,
        "fullcodeline": "messageData->M = ((*messageContent)>>5)&0x01;"
    },
    {
        "line": 27,
        "fullcodeline": "messageData->P = ((*messageContent)>>4)&0x01;"
    },
    {
        "line": 28,
        "fullcodeline": "messageContent +=1;"
    },
    {
        "line": 29,
        "fullcodeline": "messageData->hc = MIN((*messageContent)&0x0F, 7);"
    },
    {
        "line": 30,
        "fullcodeline": "messageContent +=1;"
    },
    {
        "line": 31,
        "fullcodeline": "messageData->cc = MIN(((*messageContent)>>4)&0x0F, 7);"
    },
    {
        "line": 32,
        "fullcodeline": "messageData->ac = MIN((*messageContent)&0x0F, 7);"
    },
    {
        "line": 33,
        "fullcodeline": "messageContent +=1;"
    },
    {
        "line": 34,
        "fullcodeline": "messageData->kc = MIN(((*messageContent)>>4)&0x0F, 7);"
    },
    {
        "line": 35,
        "fullcodeline": "messageData->sc = MIN((*messageContent)&0x0F, 7);"
    },
    {
        "line": 36,
        "fullcodeline": "messageContent +=1;"
    },
    {
        "line": 66,
        "fullcodeline": "addMandatoryCryptoTypesIfNeeded(ZRTP_HASH_TYPE, messageData->supportedHash, &messageData->hc);"
    },
    {
        "line": 67,
        "fullcodeline": "addMandatoryCryptoTypesIfNeeded(ZRTP_CIPHERBLOCK_TYPE, messageData->supportedCipher, &messageData->cc);"
    },
    {
        "line": 68,
        "fullcodeline": "addMandatoryCryptoTypesIfNeeded(ZRTP_AUTHTAG_TYPE, messageData->supportedAuthTag, &messageData->ac);"
    },
    {
        "line": 69,
        "fullcodeline": "addMandatoryCryptoTypesIfNeeded(ZRTP_KEYAGREEMENT_TYPE, messageData->supportedKeyAgreement, &messageData->kc);"
    },
    {
        "line": 70,
        "fullcodeline": "addMandatoryCryptoTypesIfNeeded(ZRTP_SAS_TYPE, messageData->supportedSas, &messageData->sc);"
    },
    {
        "line": 72,
        "fullcodeline": "memcpy(messageData->MAC, messageContent, 8);"
    },
    {
        "line": 78,
        "fullcodeline": "zrtpPacket->packetString = (uint8_t *)malloc(inputLength*sizeof(uint8_t));"
    },
    {
        "line": 96,
        "fullcodeline": "uint8_t checkH3[32];"
    },
    {
        "line": 97,
        "fullcodeline": "uint8_t checkMAC[32];"
    },
    {
        "line": 103,
        "fullcodeline": "messageData = (bzrtpCommitMessage_t *)malloc(sizeof(bzrtpCommitMessage_t));"
    },
    {
        "line": 106,
        "fullcodeline": "memcpy(messageData->H2, messageContent, 32);"
    },
    {
        "line": 107,
        "fullcodeline": "messageContent +=32;"
    },
    {
        "line": 115,
        "fullcodeline": "peerHelloMessageData = (bzrtpHelloMessage_t *)zrtpChannelContext->peerPackets[HELLO_MESSAGE_STORE_ID]->messageData;"
    },
    {
        "line": 117,
        "fullcodeline": "bctoolbox_sha256(messageData->H2, 32, 32, checkH3);"
    },
    {
        "line": 124,
        "fullcodeline": "bctoolbox_hmacSha256(messageData->H2, 32, zrtpChannelContext->peerPackets[HELLO_MESSAGE_STORE_ID]->packetString+ZRTP_PACKET_HEADER_LENGTH, zrtpChannelContext->peerPackets[HELLO_MESSAGE_STORE_ID]->messageLength-8, 8, checkMAC);"
    },
    {
        "line": 130,
        "fullcodeline": "memcpy(messageData->ZID, messageContent, 12);"
    },
    {
        "line": 131,
        "fullcodeline": "messageContent +=12;"
    },
    {
        "line": 132,
        "fullcodeline": "messageData->hashAlgo = cryptoAlgoTypeStringToInt(messageContent, ZRTP_HASH_TYPE);"
    },
    {
        "line": 133,
        "fullcodeline": "messageContent += 4;"
    },
    {
        "line": 134,
        "fullcodeline": "messageData->cipherAlgo = cryptoAlgoTypeStringToInt(messageContent, ZRTP_CIPHERBLOCK_TYPE);"
    },
    {
        "line": 135,
        "fullcodeline": "messageContent += 4;"
    },
    {
        "line": 136,
        "fullcodeline": "messageData->authTagAlgo = cryptoAlgoTypeStringToInt(messageContent, ZRTP_AUTHTAG_TYPE);"
    },
    {
        "line": 137,
        "fullcodeline": "messageContent += 4;"
    },
    {
        "line": 138,
        "fullcodeline": "messageData->keyAgreementAlgo = cryptoAlgoTypeStringToInt(messageContent, ZRTP_KEYAGREEMENT_TYPE);"
    },
    {
        "line": 139,
        "fullcodeline": "messageContent += 4;"
    },
    {
        "line": 164,
        "fullcodeline": "messageData->sasAlgo = cryptoAlgoTypeStringToInt(messageContent, ZRTP_SAS_TYPE);"
    },
    {
        "line": 165,
        "fullcodeline": "messageContent += 4;"
    },
    {
        "line": 183,
        "fullcodeline": "memcpy(messageData->MAC, messageContent, 8);"
    },
    {
        "line": 187,
        "fullcodeline": "zrtpPacket->packetString = (uint8_t *)malloc(inputLength*sizeof(uint8_t));"
    },
    {
        "line": 197,
        "fullcodeline": "uint16_t pvLength = computeKeyAgreementPrivateValueLength(zrtpChannelContext->keyAgreementAlgo);"
    },
    {
        "line": 207,
        "fullcodeline": "messageData = (bzrtpDHPartMessage_t *)malloc(sizeof(bzrtpDHPartMessage_t));"
    },
    {
        "line": 208,
        "fullcodeline": "messageData->pv = (uint8_t *)malloc(pvLength*sizeof(uint8_t));"
    },
    {
        "line": 211,
        "fullcodeline": "memcpy(messageData->H1, messageContent, 32);"
    },
    {
        "line": 212,
        "fullcodeline": "messageContent +=32;"
    },
    {
        "line": 294,
        "fullcodeline": "memcpy(messageData->rs1ID, messageContent, 8);"
    },
    {
        "line": 295,
        "fullcodeline": "messageContent +=8;"
    },
    {
        "line": 296,
        "fullcodeline": "memcpy(messageData->rs2ID, messageContent, 8);"
    },
    {
        "line": 297,
        "fullcodeline": "messageContent +=8;"
    },
    {
        "line": 298,
        "fullcodeline": "memcpy(messageData->auxsecretID, messageContent, 8);"
    },
    {
        "line": 299,
        "fullcodeline": "messageContent +=8;"
    },
    {
        "line": 300,
        "fullcodeline": "memcpy(messageData->pbxsecretID, messageContent, 8);"
    },
    {
        "line": 301,
        "fullcodeline": "messageContent +=8;"
    },
    {
        "line": 302,
        "fullcodeline": "memcpy(messageData->pv, messageContent, pvLength);"
    },
    {
        "line": 303,
        "fullcodeline": "messageContent +=pvLength;"
    },
    {
        "line": 304,
        "fullcodeline": "memcpy(messageData->MAC, messageContent, 8);"
    },
    {
        "line": 310,
        "fullcodeline": "zrtpPacket->packetString = (uint8_t *)malloc(inputLength*sizeof(uint8_t));"
    },
    {
        "line": 317,
        "fullcodeline": "uint8_t *confirmMessageKey = NULL;"
    },
    {
        "line": 318,
        "fullcodeline": "uint8_t *confirmMessageMacKey = NULL;"
    },
    {
        "line": 321,
        "fullcodeline": "uint8_t computedHmac[8];"
    },
    {
        "line": 343,
        "fullcodeline": "messageData = (bzrtpConfirmMessage_t *)malloc(sizeof(bzrtpConfirmMessage_t));"
    },
    {
        "line": 346,
        "fullcodeline": "memcpy(messageData->confirm_mac, messageContent, 8);"
    },
    {
        "line": 347,
        "fullcodeline": "messageContent +=8;"
    },
    {
        "line": 348,
        "fullcodeline": "memcpy(messageData->CFBIV, messageContent, 16);"
    },
    {
        "line": 349,
        "fullcodeline": "messageContent +=16;"
    },
    {
        "line": 354,
        "fullcodeline": "cipherTextLength = zrtpPacket->messageLength - ZRTP_MESSAGE_HEADER_LENGTH - 24; /* confirm message is header, confirm_mac(8 bytes), CFB IV(16 bytes), encrypted part */"
    },
    {
        "line": 357,
        "fullcodeline": "zrtpChannelContext->hmacFunction(confirmMessageMacKey, zrtpChannelContext->hashLength, messageContent, cipherTextLength, 8, computedHmac);"
    },
    {
        "line": 365,
        "fullcodeline": "confirmPlainMessageBuffer = (uint8_t *)malloc(cipherTextLength*sizeof(uint8_t));"
    },
    {
        "line": 366,
        "fullcodeline": "zrtpChannelContext->cipherDecryptionFunction(confirmMessageKey, messageData->CFBIV, messageContent, cipherTextLength, confirmPlainMessageBuffer);"
    },
    {
        "line": 367,
        "fullcodeline": "confirmPlainMessage = confirmPlainMessageBuffer; /* point into the allocated buffer */"
    },
    {
        "line": 370,
        "fullcodeline": "memcpy(messageData->H0, confirmPlainMessage, 32);"
    },
    {
        "line": 371,
        "fullcodeline": "confirmPlainMessage +=33; /* +33 because next 8 bits are unused */"
    },
    {
        "line": 459,
        "fullcodeline": "messageData->sig_len = ((uint16_t)(confirmPlainMessage[0]&0x01))<<8 | (((uint16_t)confirmPlainMessage[1])&0x00FF);"
    },
    {
        "line": 460,
        "fullcodeline": "confirmPlainMessage += 2;"
    },
    {
        "line": 461,
        "fullcodeline": "messageData->E = ((*confirmPlainMessage)&0x08)>>3;"
    },
    {
        "line": 462,
        "fullcodeline": "messageData->V = ((*confirmPlainMessage)&0x04)>>2;"
    },
    {
        "line": 463,
        "fullcodeline": "messageData->A = ((*confirmPlainMessage)&0x02)>>1;"
    },
    {
        "line": 464,
        "fullcodeline": "messageData->D = (*confirmPlainMessage)&0x01;"
    },
    {
        "line": 465,
        "fullcodeline": "confirmPlainMessage += 1;"
    },
    {
        "line": 467,
        "fullcodeline": "messageData->cacheExpirationInterval = (((uint32_t)confirmPlainMessage[0])<<24) | (((uint32_t)confirmPlainMessage[1])<<16) | (((uint32_t)confirmPlainMessage[2])<<8) | ((uint32_t)confirmPlainMessage[3]);"
    },
    {
        "line": 468,
        "fullcodeline": "confirmPlainMessage += 4;"
    },
    {
        "line": 486,
        "fullcodeline": "zrtpPacket->packetString = (uint8_t *)malloc(inputLength*sizeof(uint8_t));"
    },
    {
        "line": 502,
        "fullcodeline": "messageData = (bzrtpPingMessage_t *)malloc(sizeof(bzrtpPingMessage_t));"
    },
    {
        "line": 505,
        "fullcodeline": "memcpy(messageData->version, messageContent, 4);"
    },
    {
        "line": 506,
        "fullcodeline": "messageContent +=4;"
    },
    {
        "line": 507,
        "fullcodeline": "memcpy(messageData->endpointHash, messageContent, 8);"
    },
    {
        "line": 39,
        "fullcodeline": "if (zrtpPacket->messageLength != ZRTP_HELLOMESSAGE_FIXED_LENGTH + 4*((uint16_t)(messageData->hc)+(uint16_t)(messageData->cc)+(uint16_t)(messageData->ac)+(uint16_t)(messageData->kc)+(uint16_t)(messageData->sc))) {"
    },
    {
        "line": 45,
        "fullcodeline": "for (i=0; i<messageData->hc; i++) {"
    },
    {
        "line": 49,
        "fullcodeline": "for (i=0; i<messageData->cc; i++) {"
    },
    {
        "line": 53,
        "fullcodeline": "for (i=0; i<messageData->ac; i++) {"
    },
    {
        "line": 57,
        "fullcodeline": "for (i=0; i<messageData->kc; i++) {"
    },
    {
        "line": 61,
        "fullcodeline": "for (i=0; i<messageData->sc; i++) {"
    },
    {
        "line": 86,
        "fullcodeline": "if (zrtpPacket->messageLength != ZRTP_HELLOACKMESSAGE_FIXED_LENGTH) {"
    },
    {
        "line": 198,
        "fullcodeline": "if (pvLength == 0) {"
    },
    {
        "line": 202,
        "fullcodeline": "if (zrtpPacket->messageLength != ZRTP_DHPARTMESSAGE_FIXED_LENGTH+pvLength) {"
    },
    {
        "line": 326,
        "fullcodeline": "if (zrtpChannelContext->role == RESPONDER) { /* responder uses initiator's keys to decrypt */"
    },
    {
        "line": 334,
        "fullcodeline": "if (zrtpChannelContext->role == INITIATOR) { /* the iniator uses responder's keys to decrypt */"
    },
    {
        "line": 472,
        "fullcodeline": "if (messageData->sig_len>0) {"
    },
    {
        "line": 40,
        "fullcodeline": "free(messageData);"
    },
    {
        "line": 46,
        "fullcodeline": "messageData->supportedHash[i] = cryptoAlgoTypeStringToInt(messageContent, ZRTP_HASH_TYPE);"
    },
    {
        "line": 47,
        "fullcodeline": "messageContent +=4;"
    },
    {
        "line": 50,
        "fullcodeline": "messageData->supportedCipher[i] = cryptoAlgoTypeStringToInt(messageContent, ZRTP_CIPHERBLOCK_TYPE);"
    },
    {
        "line": 51,
        "fullcodeline": "messageContent +=4;"
    },
    {
        "line": 54,
        "fullcodeline": "messageData->supportedAuthTag[i] = cryptoAlgoTypeStringToInt(messageContent, ZRTP_AUTHTAG_TYPE);"
    },
    {
        "line": 55,
        "fullcodeline": "messageContent +=4;"
    },
    {
        "line": 58,
        "fullcodeline": "messageData->supportedKeyAgreement[i] = cryptoAlgoTypeStringToInt(messageContent, ZRTP_KEYAGREEMENT_TYPE);"
    },
    {
        "line": 59,
        "fullcodeline": "messageContent +=4;"
    },
    {
        "line": 62,
        "fullcodeline": "messageData->supportedSas[i] = cryptoAlgoTypeStringToInt(messageContent, ZRTP_SAS_TYPE);"
    },
    {
        "line": 63,
        "fullcodeline": "messageContent +=4;"
    },
    {
        "line": 118,
        "fullcodeline": "if (memcmp(checkH3, peerHelloMessageData->H3, 32) != 0) {"
    },
    {
        "line": 125,
        "fullcodeline": "if (memcmp(checkMAC, peerHelloMessageData->MAC, 8) != 0) {"
    },
    {
        "line": 147,
        "fullcodeline": "variableLength = 32; /* hvi is 32 bytes length in DH Commit message format */"
    },
    {
        "line": 150,
        "fullcodeline": "variableLength = 24; /* nonce (16 bytes) and keyID(8 bytes) are 24 bytes length in preshared Commit message format */"
    },
    {
        "line": 153,
        "fullcodeline": "variableLength = 16; /* nonce is 24 bytes length in multistream Commit message format */"
    },
    {
        "line": 160,
        "fullcodeline": "if (zrtpPacket->messageLength != ZRTP_COMMITMESSAGE_FIXED_LENGTH + variableLength) {"
    },
    {
        "line": 168,
        "fullcodeline": "if ((messageData->keyAgreementAlgo == ZRTP_KEYAGREEMENT_Prsh) || (messageData->keyAgreementAlgo == ZRTP_KEYAGREEMENT_Mult)) {"
    },
    {
        "line": 169,
        "fullcodeline": "memcpy(messageData->nonce, messageContent, 16);"
    },
    {
        "line": 170,
        "fullcodeline": "messageContent +=16;"
    },
    {
        "line": 216,
        "fullcodeline": "uint8_t checkH2[32];"
    },
    {
        "line": 217,
        "fullcodeline": "uint8_t checkMAC[32];"
    },
    {
        "line": 225,
        "fullcodeline": "peerCommitMessageData = (bzrtpCommitMessage_t *)zrtpChannelContext->peerPackets[COMMIT_MESSAGE_STORE_ID]->messageData;"
    },
    {
        "line": 227,
        "fullcodeline": "bctoolbox_sha256(messageData->H1, 32, 32, checkH2);"
    },
    {
        "line": 234,
        "fullcodeline": "bctoolbox_hmacSha256(messageData->H1, 32, zrtpChannelContext->peerPackets[COMMIT_MESSAGE_STORE_ID]->packetString+ZRTP_PACKET_HEADER_LENGTH, zrtpChannelContext->peerPackets[COMMIT_MESSAGE_STORE_ID]->messageLength-8, 8, checkMAC);"
    },
    {
        "line": 330,
        "fullcodeline": "confirmMessageKey = zrtpChannelContext->zrtpkeyi;"
    },
    {
        "line": 331,
        "fullcodeline": "confirmMessageMacKey = zrtpChannelContext->mackeyi;"
    },
    {
        "line": 338,
        "fullcodeline": "confirmMessageKey = zrtpChannelContext->zrtpkeyr;"
    },
    {
        "line": 339,
        "fullcodeline": "confirmMessageMacKey = zrtpChannelContext->mackeyr;"
    },
    {
        "line": 359,
        "fullcodeline": "if (memcmp(computedHmac, messageData->confirm_mac, 8) != 0) { /* confirm_mac doesn't match */"
    },
    {
        "line": 374,
        "fullcodeline": "if (zrtpChannelContext->keyAgreementAlgo == ZRTP_KEYAGREEMENT_Prsh || zrtpChannelContext->keyAgreementAlgo == ZRTP_KEYAGREEMENT_Mult) {"
    },
    {
        "line": 376,
        "fullcodeline": "uint8_t checkH1[32];"
    },
    {
        "line": 377,
        "fullcodeline": "bctoolbox_sha256(messageData->H0, 32, 32, checkH1);"
    },
    {
        "line": 473,
        "fullcodeline": "memcpy(messageData->signatureBlockType, confirmPlainMessage, 4);"
    },
    {
        "line": 474,
        "fullcodeline": "confirmPlainMessage += 4;"
    },
    {
        "line": 476,
        "fullcodeline": "messageData->signatureBlock = (uint8_t *)malloc(4*(messageData->sig_len-1)*sizeof(uint8_t));"
    },
    {
        "line": 477,
        "fullcodeline": "memcpy(messageData->signatureBlock, confirmPlainMessage, 4*(messageData->sig_len-1));"
    },
    {
        "line": 173,
        "fullcodeline": "if (messageData->keyAgreementAlgo == ZRTP_KEYAGREEMENT_Prsh) {"
    },
    {
        "line": 178,
        "fullcodeline": "memcpy(messageData->hvi, messageContent, 32);"
    },
    {
        "line": 179,
        "fullcodeline": "messageContent +=32;"
    },
    {
        "line": 245,
        "fullcodeline": "uint8_t computedHvi[32];"
    },
    {
        "line": 246,
        "fullcodeline": "uint16_t HelloMessageLength = zrtpChannelContext->selfPackets[HELLO_MESSAGE_STORE_ID]->messageLength;"
    },
    {
        "line": 247,
        "fullcodeline": "uint16_t DHPartHelloMessageStringLength = zrtpPacket->messageLength + HelloMessageLength;"
    },
    {
        "line": 249,
        "fullcodeline": "uint8_t *DHPartHelloMessageString = (uint8_t *)malloc(DHPartHelloMessageStringLength*sizeof(uint8_t));"
    },
    {
        "line": 251,
        "fullcodeline": "memcpy(DHPartHelloMessageString, input+ZRTP_PACKET_HEADER_LENGTH, zrtpPacket->messageLength);"
    },
    {
        "line": 254,
        "fullcodeline": "zrtpChannelContext->hashFunction(DHPartHelloMessageString, DHPartHelloMessageStringLength, 32, computedHvi);"
    },
    {
        "line": 266,
        "fullcodeline": "uint8_t checkH2[32];"
    },
    {
        "line": 267,
        "fullcodeline": "uint8_t checkH3[32];"
    },
    {
        "line": 268,
        "fullcodeline": "uint8_t checkMAC[32];"
    },
    {
        "line": 276,
        "fullcodeline": "peerHelloMessageData = (bzrtpHelloMessage_t *)zrtpChannelContext->peerPackets[HELLO_MESSAGE_STORE_ID]->messageData;"
    },
    {
        "line": 278,
        "fullcodeline": "bctoolbox_sha256(messageData->H1, 32, 32, checkH2);"
    },
    {
        "line": 279,
        "fullcodeline": "bctoolbox_sha256(checkH2, 32, 32, checkH3);"
    },
    {
        "line": 286,
        "fullcodeline": "bctoolbox_hmacSha256(checkH2, 32, zrtpChannelContext->peerPackets[HELLO_MESSAGE_STORE_ID]->packetString+ZRTP_PACKET_HEADER_LENGTH, zrtpChannelContext->peerPackets[HELLO_MESSAGE_STORE_ID]->messageLength-8, 8, checkMAC);"
    },
    {
        "line": 434,
        "fullcodeline": "uint8_t checkH1[32];"
    },
    {
        "line": 435,
        "fullcodeline": "uint8_t checkMAC[32];"
    },
    {
        "line": 443,
        "fullcodeline": "peerDHPartMessageData = (bzrtpDHPartMessage_t *)zrtpChannelContext->peerPackets[DHPART_MESSAGE_STORE_ID]->messageData;"
    },
    {
        "line": 445,
        "fullcodeline": "bctoolbox_sha256(messageData->H0, 32, 32, checkH1);"
    },
    {
        "line": 452,
        "fullcodeline": "bctoolbox_hmacSha256(messageData->H0, 32, zrtpChannelContext->peerPackets[DHPART_MESSAGE_STORE_ID]->packetString+ZRTP_PACKET_HEADER_LENGTH, zrtpChannelContext->peerPackets[DHPART_MESSAGE_STORE_ID]->messageLength-8, 8, checkMAC);"
    },
    {
        "line": 479,
        "fullcodeline": "messageData->signatureBlock  = NULL;"
    },
    {
        "line": 174,
        "fullcodeline": "memcpy(messageData->keyID, messageContent, 8);"
    },
    {
        "line": 175,
        "fullcodeline": "messageContent +=8;"
    },
    {
        "line": 228,
        "fullcodeline": "if (memcmp(checkH2, peerCommitMessageData->H2, 32) != 0) {"
    },
    {
        "line": 235,
        "fullcodeline": "if (memcmp(checkMAC, peerCommitMessageData->MAC, 8) != 0) {"
    },
    {
        "line": 327,
        "fullcodeline": "if ((zrtpChannelContext->zrtpkeyi == NULL) || (zrtpChannelContext->mackeyi == NULL)) {"
    },
    {
        "line": 335,
        "fullcodeline": "if ((zrtpChannelContext->zrtpkeyr == NULL) || (zrtpChannelContext->mackeyr == NULL)) {"
    },
    {
        "line": 381,
        "fullcodeline": "uint8_t checkH2[32];"
    },
    {
        "line": 382,
        "fullcodeline": "uint8_t checkMAC[32];"
    },
    {
        "line": 390,
        "fullcodeline": "peerCommitMessageData = (bzrtpCommitMessage_t *)zrtpChannelContext->peerPackets[COMMIT_MESSAGE_STORE_ID]->messageData;"
    },
    {
        "line": 392,
        "fullcodeline": "bctoolbox_sha256(checkH1, 32, 32, checkH2);"
    },
    {
        "line": 399,
        "fullcodeline": "bctoolbox_hmacSha256(checkH1, 32, zrtpChannelContext->peerPackets[COMMIT_MESSAGE_STORE_ID]->packetString+ZRTP_PACKET_HEADER_LENGTH, zrtpChannelContext->peerPackets[COMMIT_MESSAGE_STORE_ID]->messageLength-8, 8, checkMAC);"
    },
    {
        "line": 438,
        "fullcodeline": "if (zrtpChannelContext->peerPackets[DHPART_MESSAGE_STORE_ID] == NULL) {"
    },
    {
        "line": 259,
        "fullcodeline": "if (memcmp(computedHvi, peerCommitMessageData->hvi, 32)!=0) {"
    },
    {
        "line": 280,
        "fullcodeline": "if (memcmp(checkH3, peerHelloMessageData->H3, 32) != 0) {"
    },
    {
        "line": 287,
        "fullcodeline": "if (memcmp(checkMAC, peerHelloMessageData->MAC, 8) != 0) {"
    },
    {
        "line": 385,
        "fullcodeline": "if (zrtpChannelContext->peerPackets[COMMIT_MESSAGE_STORE_ID] == NULL) {"
    },
    {
        "line": 405,
        "fullcodeline": "uint8_t checkH2[32];"
    },
    {
        "line": 406,
        "fullcodeline": "uint8_t checkH3[32];"
    },
    {
        "line": 407,
        "fullcodeline": "uint8_t checkMAC[32];"
    },
    {
        "line": 415,
        "fullcodeline": "peerHelloMessageData = (bzrtpHelloMessage_t *)zrtpChannelContext->peerPackets[HELLO_MESSAGE_STORE_ID]->messageData;"
    },
    {
        "line": 417,
        "fullcodeline": "bctoolbox_sha256(checkH1, 32, 32, checkH2);"
    },
    {
        "line": 418,
        "fullcodeline": "bctoolbox_sha256(checkH2, 32, 32, checkH3);"
    },
    {
        "line": 425,
        "fullcodeline": "bctoolbox_hmacSha256(checkH2, 32, zrtpChannelContext->peerPackets[HELLO_MESSAGE_STORE_ID]->packetString+ZRTP_PACKET_HEADER_LENGTH, zrtpChannelContext->peerPackets[HELLO_MESSAGE_STORE_ID]->messageLength-8, 8, checkMAC);"
    },
    {
        "line": 446,
        "fullcodeline": "if (memcmp(checkH1, peerDHPartMessageData->H1, 32) != 0) {"
    },
    {
        "line": 453,
        "fullcodeline": "if (memcmp(checkMAC, peerDHPartMessageData->MAC, 8) != 0) {"
    },
    {
        "line": 393,
        "fullcodeline": "if (memcmp(checkH2, peerCommitMessageData->H2, 32) != 0) {"
    },
    {
        "line": 400,
        "fullcodeline": "if (memcmp(checkMAC, peerCommitMessageData->MAC, 8) != 0) {"
    },
    {
        "line": 410,
        "fullcodeline": "if (zrtpChannelContext->peerPackets[HELLO_MESSAGE_STORE_ID] == NULL) {"
    },
    {
        "line": 419,
        "fullcodeline": "if (memcmp(checkH3, peerHelloMessageData->H3, 32) != 0) {"
    },
    {
        "line": 426,
        "fullcodeline": "if (memcmp(checkMAC, peerHelloMessageData->MAC, 8) != 0) {"
    }
]