[
    {
        "line": 6,
        "fullcodeline": "bzrtpContext_t *context87654321 = bzrtp_createBzrtpContext(0x87654321);"
    },
    {
        "line": 7,
        "fullcodeline": "bzrtpContext_t *context12345678 = bzrtp_createBzrtpContext(0x12345678);"
    },
    {
        "line": 11,
        "fullcodeline": "memcpy (context12345678->channelContext[0]->selfH[0], H12345678[0], 32);"
    },
    {
        "line": 12,
        "fullcodeline": "memcpy (context12345678->channelContext[0]->selfH[1], H12345678[1], 32);"
    },
    {
        "line": 13,
        "fullcodeline": "memcpy (context12345678->channelContext[0]->selfH[2], H12345678[2], 32);"
    },
    {
        "line": 14,
        "fullcodeline": "memcpy (context12345678->channelContext[0]->selfH[3], H12345678[3], 32);"
    },
    {
        "line": 15,
        "fullcodeline": "memcpy (context87654321->channelContext[0]->selfH[0], H87654321[0], 32);"
    },
    {
        "line": 16,
        "fullcodeline": "memcpy (context87654321->channelContext[0]->selfH[1], H87654321[1], 32);"
    },
    {
        "line": 17,
        "fullcodeline": "memcpy (context87654321->channelContext[0]->selfH[2], H87654321[2], 32);"
    },
    {
        "line": 18,
        "fullcodeline": "memcpy (context87654321->channelContext[0]->selfH[3], H87654321[3], 32);"
    },
    {
        "line": 21,
        "fullcodeline": "context87654321->channelContext[0]->keyAgreementAlgo = ZRTP_KEYAGREEMENT_DH3k;"
    },
    {
        "line": 22,
        "fullcodeline": "context12345678->channelContext[0]->keyAgreementAlgo = ZRTP_KEYAGREEMENT_DH3k;"
    },
    {
        "line": 23,
        "fullcodeline": "context87654321->channelContext[0]->cipherAlgo = ZRTP_CIPHER_AES1;"
    },
    {
        "line": 24,
        "fullcodeline": "context12345678->channelContext[0]->cipherAlgo = ZRTP_CIPHER_AES1;"
    },
    {
        "line": 25,
        "fullcodeline": "context87654321->channelContext[0]->hashAlgo = ZRTP_HASH_S256;"
    },
    {
        "line": 26,
        "fullcodeline": "context12345678->channelContext[0]->hashAlgo = ZRTP_HASH_S256;"
    },
    {
        "line": 28,
        "fullcodeline": "updateCryptoFunctionPointers(context87654321->channelContext[0]);"
    },
    {
        "line": 29,
        "fullcodeline": "updateCryptoFunctionPointers(context12345678->channelContext[0]);"
    },
    {
        "line": 32,
        "fullcodeline": "context87654321->channelContext[0]->mackeyi = (uint8_t *)malloc(32);"
    },
    {
        "line": 33,
        "fullcodeline": "context12345678->channelContext[0]->mackeyi = (uint8_t *)malloc(32);"
    },
    {
        "line": 34,
        "fullcodeline": "context87654321->channelContext[0]->mackeyr = (uint8_t *)malloc(32);"
    },
    {
        "line": 35,
        "fullcodeline": "context12345678->channelContext[0]->mackeyr = (uint8_t *)malloc(32);"
    },
    {
        "line": 37,
        "fullcodeline": "context87654321->channelContext[0]->zrtpkeyi = (uint8_t *)malloc(16);"
    },
    {
        "line": 38,
        "fullcodeline": "context12345678->channelContext[0]->zrtpkeyi = (uint8_t *)malloc(16);"
    },
    {
        "line": 39,
        "fullcodeline": "context87654321->channelContext[0]->zrtpkeyr = (uint8_t *)malloc(16);"
    },
    {
        "line": 40,
        "fullcodeline": "context12345678->channelContext[0]->zrtpkeyr = (uint8_t *)malloc(16);"
    },
    {
        "line": 42,
        "fullcodeline": "memcpy(context12345678->channelContext[0]->mackeyi, mackeyi, 32);"
    },
    {
        "line": 43,
        "fullcodeline": "memcpy(context12345678->channelContext[0]->mackeyr, mackeyr, 32);"
    },
    {
        "line": 44,
        "fullcodeline": "memcpy(context12345678->channelContext[0]->zrtpkeyi, zrtpkeyi, 16);"
    },
    {
        "line": 45,
        "fullcodeline": "memcpy(context12345678->channelContext[0]->zrtpkeyr, zrtpkeyr, 16);"
    },
    {
        "line": 46,
        "fullcodeline": "memcpy(context87654321->channelContext[0]->mackeyi, mackeyi, 32);"
    },
    {
        "line": 47,
        "fullcodeline": "memcpy(context87654321->channelContext[0]->mackeyr, mackeyr, 32);"
    },
    {
        "line": 48,
        "fullcodeline": "memcpy(context87654321->channelContext[0]->zrtpkeyi, zrtpkeyi, 16);"
    },
    {
        "line": 49,
        "fullcodeline": "memcpy(context87654321->channelContext[0]->zrtpkeyr, zrtpkeyr, 16);"
    },
    {
        "line": 52,
        "fullcodeline": "context12345678->channelContext[0]->role = RESPONDER;"
    },
    {
        "line": 54,
        "fullcodeline": "for (i=0; i<TEST_PACKET_NUMBER; i++) {"
    },
    {
        "line": 55,
        "fullcodeline": "uint8_t freePacketFlag = 1;"
    },
    {
        "line": 57,
        "fullcodeline": "zrtpPacket = bzrtp_packetCheck(patternZRTPPackets[i], patternZRTPMetaData[i][0], (patternZRTPMetaData[i][1])-1, &retval);"
    },
    {
        "line": 58,
        "fullcodeline": "retval +=  bzrtp_packetParser((patternZRTPMetaData[i][2]==0x87654321)?context12345678:context87654321, (patternZRTPMetaData[i][2]==0x87654321)?context12345678->channelContext[0]:context87654321->channelContext[0], patternZRTPPackets[i], patternZRTPMetaData[i][0], zrtpPacket);"
    },
    {
        "line": 78,
        "fullcodeline": "bzrtp_message(\"parsing Ret val is %x index is %d\\n\", retval, i);"
    },
    {
        "line": 107,
        "fullcodeline": "free(zrtpPacket->packetString);"
    },
    {
        "line": 109,
        "fullcodeline": "retval = bzrtp_packetBuild((patternZRTPMetaData[i][2]==0x12345678)?context12345678:context87654321, (patternZRTPMetaData[i][2]==0x12345678)?context12345678->channelContext[0]:context87654321->channelContext[0], zrtpPacket, patternZRTPMetaData[i][1]);"
    },
    {
        "line": 59,
        "fullcodeline": "if (hvi_trick==0) {"
    },
    {
        "line": 80,
        "fullcodeline": "if (zrtpPacket->messageType==MSGTYPE_HELLO) {"
    },
    {
        "line": 90,
        "fullcodeline": "if (zrtpPacket->messageType==MSGTYPE_COMMIT) {"
    },
    {
        "line": 98,
        "fullcodeline": "if (zrtpPacket->messageType==MSGTYPE_DHPART1 || zrtpPacket->messageType==MSGTYPE_DHPART2) {"
    },
    {
        "line": 117,
        "fullcodeline": "if (zrtpPacket->packetString != NULL) {"
    },
    {
        "line": 123,
        "fullcodeline": "if (freePacketFlag == 1) {"
    },
    {
        "line": 128,
        "fullcodeline": "if (hvi_trick == 1) {"
    },
    {
        "line": 60,
        "fullcodeline": "CU_ASSERT_EQUAL_FATAL(retval,0);"
    },
    {
        "line": 88,
        "fullcodeline": "freePacketFlag = 0;"
    },
    {
        "line": 96,
        "fullcodeline": "freePacketFlag = 0;"
    },
    {
        "line": 104,
        "fullcodeline": "freePacketFlag = 0;"
    },
    {
        "line": 118,
        "fullcodeline": "CU_ASSERT_TRUE(memcmp(zrtpPacket->packetString, patternZRTPPackets[i], patternZRTPMetaData[i][0]) == 0);"
    },
    {
        "line": 124,
        "fullcodeline": "bzrtp_freeZrtpPacket(zrtpPacket);"
    },
    {
        "line": 81,
        "fullcodeline": "if (patternZRTPMetaData[i][2]==0x87654321) {"
    },
    {
        "line": 91,
        "fullcodeline": "if (patternZRTPMetaData[i][2]==0x87654321) {"
    },
    {
        "line": 99,
        "fullcodeline": "if (patternZRTPMetaData[i][2]==0x87654321) {"
    },
    {
        "line": 120,
        "fullcodeline": "CU_FAIL(\"Unable to build packet\");"
    },
    {
        "line": 129,
        "fullcodeline": "if (zrtpPacket->messageType==MSGTYPE_COMMIT) {"
    },
    {
        "line": 62,
        "fullcodeline": "if (zrtpPacket->messageType==MSGTYPE_DHPART2) {"
    },
    {
        "line": 82,
        "fullcodeline": "context12345678->channelContext[0]->peerPackets[HELLO_MESSAGE_STORE_ID] = zrtpPacket;"
    },
    {
        "line": 83,
        "fullcodeline": "context87654321->channelContext[0]->selfPackets[HELLO_MESSAGE_STORE_ID] = zrtpPacket;"
    },
    {
        "line": 92,
        "fullcodeline": "context12345678->channelContext[0]->peerPackets[COMMIT_MESSAGE_STORE_ID] = zrtpPacket;"
    },
    {
        "line": 100,
        "fullcodeline": "context12345678->channelContext[0]->peerPackets[DHPART_MESSAGE_STORE_ID] = zrtpPacket;"
    },
    {
        "line": 63,
        "fullcodeline": "CU_ASSERT_EQUAL_FATAL(retval, BZRTP_PARSER_ERROR_UNMATCHINGHVI);"
    },
    {
        "line": 66,
        "fullcodeline": "context87654321->channelContext[0]->selfPackets[HELLO_MESSAGE_STORE_ID] = NULL;"
    },
    {
        "line": 67,
        "fullcodeline": "context12345678->channelContext[0]->selfPackets[HELLO_MESSAGE_STORE_ID] = NULL;"
    },
    {
        "line": 69,
        "fullcodeline": "bzrtp_destroyBzrtpContext(context87654321, 0x87654321);"
    },
    {
        "line": 70,
        "fullcodeline": "bzrtp_destroyBzrtpContext(context12345678, 0x12345678);"
    },
    {
        "line": 85,
        "fullcodeline": "context87654321->channelContext[0]->peerPackets[HELLO_MESSAGE_STORE_ID] = zrtpPacket;"
    },
    {
        "line": 86,
        "fullcodeline": "context12345678->channelContext[0]->selfPackets[HELLO_MESSAGE_STORE_ID] = zrtpPacket;"
    },
    {
        "line": 94,
        "fullcodeline": "context87654321->channelContext[0]->peerPackets[COMMIT_MESSAGE_STORE_ID] = zrtpPacket;"
    },
    {
        "line": 102,
        "fullcodeline": "context87654321->channelContext[0]->peerPackets[DHPART_MESSAGE_STORE_ID] = zrtpPacket;"
    },
    {
        "line": 130,
        "fullcodeline": "if (patternZRTPMetaData[i][2]==0x87654321) {"
    },
    {
        "line": 75,
        "fullcodeline": "CU_ASSERT_EQUAL_FATAL(retval,0);"
    },
    {
        "line": 132,
        "fullcodeline": "peerCommitMessageData = (bzrtpCommitMessage_t *)zrtpPacket->messageData;"
    },
    {
        "line": 133,
        "fullcodeline": "peerCommitMessageData->hvi[0]=0xFF;"
    }
]