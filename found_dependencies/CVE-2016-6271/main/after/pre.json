[
    {
        "line": 2,
        "fullcodeline": "int i, fails_count=0;"
    },
    {
        "line": 5,
        "fullcodeline": "CU_pSuite *suites[] = {"
    },
    {
        "line": 34,
        "fullcodeline": "cryptoUtilsTestSuite = CU_add_suite(\"Bzrtp Crypto Utils\", NULL, NULL);"
    },
    {
        "line": 35,
        "fullcodeline": "CU_add_test(cryptoUtilsTestSuite, \"zrtpKDF\", test_zrtpKDF);"
    },
    {
        "line": 36,
        "fullcodeline": "CU_add_test(cryptoUtilsTestSuite, \"CRC32\", test_CRC32);"
    },
    {
        "line": 37,
        "fullcodeline": "CU_add_test(cryptoUtilsTestSuite, \"algo agreement\", test_algoAgreement);"
    },
    {
        "line": 38,
        "fullcodeline": "CU_add_test(cryptoUtilsTestSuite, \"context algo setter and getter\", test_algoSetterGetter);"
    },
    {
        "line": 39,
        "fullcodeline": "CU_add_test(cryptoUtilsTestSuite, \"adding mandatory crypto algorithms if needed\", test_addMandatoryCryptoTypesIfNeeded);"
    },
    {
        "line": 42,
        "fullcodeline": "parserTestSuite = CU_add_suite(\"Bzrtp ZRTP Packet Parser\", NULL, NULL);"
    },
    {
        "line": 43,
        "fullcodeline": "CU_add_test(parserTestSuite, \"Parse\", test_parser);"
    },
    {
        "line": 44,
        "fullcodeline": "CU_add_test(parserTestSuite, \"Parse hvi check fail\", test_parser_hvi);"
    },
    {
        "line": 45,
        "fullcodeline": "CU_add_test(parserTestSuite, \"Parse Exchange\", test_parserComplete);"
    },
    {
        "line": 46,
        "fullcodeline": "CU_add_test(parserTestSuite, \"State machine\", test_stateMachine);"
    },
    {
        "line": 11,
        "fullcodeline": "if (argc>1) {"
    },
    {
        "line": 29,
        "fullcodeline": "if (CUE_SUCCESS != CU_initialize_registry()) {"
    },
    {
        "line": 62,
        "fullcodeline": "return (fails_count == 0 ? 0 : 1);"
    },
    {
        "line": 49,
        "fullcodeline": "for(i=0; suites[i]; i++){"
    },
    {
        "line": 51,
        "fullcodeline": "fails_count += CU_get_number_of_tests_failed();"
    },
    {
        "line": 12,
        "fullcodeline": "if (argv[1][0] == '-') {"
    },
    {
        "line": 30,
        "fullcodeline": "return CU_get_error();"
    },
    {
        "line": 13,
        "fullcodeline": "if (strcmp(argv[1], \"-verbose\") == 0) {"
    },
    {
        "line": 14,
        "fullcodeline": "verbose = 1;"
    },
    {
        "line": 16,
        "fullcodeline": "printf (\"Usage:\\n %s [-verbose] to enable extensive logging\\n\", argv[0]);"
    }
]