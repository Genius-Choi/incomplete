[
    {
        "line": 53,
        "fullcodeline": "with modulestore().bulk_operations(course_key):"
    },
    {
        "line": 18,
        "fullcodeline": "error = CsrfViewMiddleware(get_response=lambda request: None).process_view(request, None, (), {})"
    },
    {
        "line": 26,
        "fullcodeline": "authentication_classes = (JwtAuthentication, BearerAuthenticationAllowInactiveUser)"
    },
    {
        "line": 27,
        "fullcodeline": "authenticators = [auth() for auth in authentication_classes]"
    },
    {
        "line": 43,
        "fullcodeline": "if request.method != 'GET' and not (request.user and request.user.is_authenticated):"
    },
    {
        "line": 49,
        "fullcodeline": "course_key = CourseKey.from_string(course_id)"
    },
    {
        "line": 29,
        "fullcodeline": "for authenticator in authenticators:"
    },
    {
        "line": 44,
        "fullcodeline": "return HttpResponseForbidden('Unauthenticated')"
    },
    {
        "line": 59,
        "fullcodeline": "return _invoke_xblock_handler(request, course_id, usage_id, handler, suffix, course=course)"
    },
    {
        "line": 51,
        "fullcodeline": "raise Http404(f'{course_id} is not a valid course key')  # lint-amnesty, pylint: disable=raise-missing-from"
    },
    {
        "line": 55,
        "fullcodeline": "course = modulestore().get_course(course_key)"
    },
    {
        "line": 31,
        "fullcodeline": "user_auth_tuple = authenticator.authenticate(request)"
    },
    {
        "line": 57,
        "fullcodeline": "raise Http404(f'{course_id} does not exist in the modulestore')  # lint-amnesty, pylint: disable=raise-missing-from"
    },
    {
        "line": 33,
        "fullcodeline": "log.exception("
    },
    {
        "line": 37,
        "fullcodeline": "if user_auth_tuple is not None:"
    },
    {
        "line": 38,
        "fullcodeline": "request.user, _ = user_auth_tuple"
    }
]