[
    {
        "line": 3,
        "fullcodeline": "my_main_ptr main_ptr = (my_main_ptr)cinfo->main;"
    },
    {
        "line": 4,
        "fullcodeline": "my_coef_ptr coef = (my_coef_ptr)cinfo->coef;"
    },
    {
        "line": 5,
        "fullcodeline": "my_master_ptr master = (my_master_ptr)cinfo->master;"
    },
    {
        "line": 25,
        "fullcodeline": "lines_per_iMCU_row = cinfo->_min_DCT_scaled_size * cinfo->max_v_samp_factor;"
    },
    {
        "line": 26,
        "fullcodeline": "lines_left_in_iMCU_row ="
    },
    {
        "line": 29,
        "fullcodeline": "lines_after_iMCU_row = num_lines - lines_left_in_iMCU_row;"
    },
    {
        "line": 113,
        "fullcodeline": "lines_to_read = lines_after_iMCU_row - lines_to_skip;"
    },
    {
        "line": 162,
        "fullcodeline": "cinfo->output_scanline += lines_to_skip;"
    },
    {
        "line": 11,
        "fullcodeline": "if (cinfo->global_state != DSTATE_SCANNING)"
    },
    {
        "line": 15,
        "fullcodeline": "if (cinfo->output_scanline + num_lines >= cinfo->output_height) {"
    },
    {
        "line": 22,
        "fullcodeline": "if (num_lines == 0)"
    },
    {
        "line": 27,
        "fullcodeline": "(lines_per_iMCU_row - (cinfo->output_scanline % lines_per_iMCU_row)) %"
    },
    {
        "line": 145,
        "fullcodeline": "for (i = 0; i < lines_to_skip; i += lines_per_iMCU_row) {"
    },
    {
        "line": 12,
        "fullcodeline": "ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);"
    },
    {
        "line": 16,
        "fullcodeline": "cinfo->output_scanline = cinfo->output_height;"
    },
    {
        "line": 17,
        "fullcodeline": "(*cinfo->inputctl->finish_input_pass) (cinfo);"
    },
    {
        "line": 18,
        "fullcodeline": "cinfo->inputctl->eoi_reached = TRUE;"
    },
    {
        "line": 67,
        "fullcodeline": "main_ptr->context_state = CTX_PREPARE_FOR_IMCU;"
    },
    {
        "line": 104,
        "fullcodeline": "lines_to_skip = ((lines_after_iMCU_row - 1) / lines_per_iMCU_row) *"
    },
    {
        "line": 155,
        "fullcodeline": "cinfo->input_iMCU_row++;"
    },
    {
        "line": 156,
        "fullcodeline": "cinfo->output_iMCU_row++;"
    },
    {
        "line": 171,
        "fullcodeline": "read_and_discard_scanlines(cinfo, lines_to_read);"
    },
    {
        "line": 19,
        "fullcodeline": "return cinfo->output_height - cinfo->output_scanline;"
    },
    {
        "line": 107,
        "fullcodeline": "lines_to_skip = (lines_after_iMCU_row / lines_per_iMCU_row) *"
    },
    {
        "line": 146,
        "fullcodeline": "for (y = 0; y < coef->MCU_rows_per_iMCU_row; y++) {"
    },
    {
        "line": 157,
        "fullcodeline": "if (cinfo->input_iMCU_row < cinfo->total_iMCU_rows)"
    },
    {
        "line": 166,
        "fullcodeline": "main_ptr->iMCU_row_ctr += lines_to_skip / lines_per_iMCU_row;"
    },
    {
        "line": 173,
        "fullcodeline": "increment_simple_rowgroup_ctr(cinfo, lines_to_read);"
    },
    {
        "line": 183,
        "fullcodeline": "upsample->rows_to_go = cinfo->output_height - cinfo->output_scanline;"
    },
    {
        "line": 44,
        "fullcodeline": "if ((num_lines < lines_left_in_iMCU_row + 1) ||"
    },
    {
        "line": 45,
        "fullcodeline": "(lines_left_in_iMCU_row <= 1 && main_ptr->buffer_full &&"
    },
    {
        "line": 47,
        "fullcodeline": "read_and_discard_scanlines(cinfo, num_lines);"
    },
    {
        "line": 54,
        "fullcodeline": "if (lines_left_in_iMCU_row <= 1 && main_ptr->buffer_full) {"
    },
    {
        "line": 55,
        "fullcodeline": "cinfo->output_scanline += lines_left_in_iMCU_row + lines_per_iMCU_row;"
    },
    {
        "line": 56,
        "fullcodeline": "lines_after_iMCU_row -= lines_per_iMCU_row;"
    },
    {
        "line": 62,
        "fullcodeline": "if (main_ptr->iMCU_row_ctr == 0 ||"
    },
    {
        "line": 63,
        "fullcodeline": "(main_ptr->iMCU_row_ctr == 1 && lines_left_in_iMCU_row > 2))"
    },
    {
        "line": 64,
        "fullcodeline": "set_wraparound_pointers(cinfo);"
    },
    {
        "line": 82,
        "fullcodeline": "if (num_lines < lines_left_in_iMCU_row) {"
    },
    {
        "line": 121,
        "fullcodeline": "cinfo->output_scanline += lines_to_skip;"
    },
    {
        "line": 122,
        "fullcodeline": "cinfo->output_iMCU_row += lines_to_skip / lines_per_iMCU_row;"
    },
    {
        "line": 127,
        "fullcodeline": "read_and_discard_scanlines(cinfo, lines_to_read);"
    },
    {
        "line": 158,
        "fullcodeline": "start_iMCU_row(cinfo);"
    },
    {
        "line": 186,
        "fullcodeline": "upsample->rows_to_go = cinfo->output_height - cinfo->output_scanline;"
    },
    {
        "line": 46,
        "fullcodeline": "lines_after_iMCU_row < lines_per_iMCU_row + 1)) {"
    },
    {
        "line": 58,
        "fullcodeline": "cinfo->output_scanline += lines_left_in_iMCU_row;"
    },
    {
        "line": 72,
        "fullcodeline": "upsample->rows_to_go = cinfo->output_height - cinfo->output_scanline;"
    },
    {
        "line": 83,
        "fullcodeline": "increment_simple_rowgroup_ctr(cinfo, num_lines);"
    },
    {
        "line": 123,
        "fullcodeline": "main_ptr->iMCU_row_ctr += lines_to_skip / lines_per_iMCU_row;"
    },
    {
        "line": 129,
        "fullcodeline": "cinfo->output_scanline += lines_to_skip;"
    },
    {
        "line": 130,
        "fullcodeline": "cinfo->output_iMCU_row += lines_to_skip / lines_per_iMCU_row;"
    },
    {
        "line": 131,
        "fullcodeline": "increment_simple_rowgroup_ctr(cinfo, lines_to_read);"
    },
    {
        "line": 136,
        "fullcodeline": "upsample->rows_to_go = cinfo->output_height - cinfo->output_scanline;"
    },
    {
        "line": 147,
        "fullcodeline": "for (x = 0; x < cinfo->MCUs_per_row; x++) {"
    },
    {
        "line": 160,
        "fullcodeline": "(*cinfo->inputctl->finish_input_pass) (cinfo);"
    },
    {
        "line": 76,
        "fullcodeline": "upsample->rows_to_go = cinfo->output_height - cinfo->output_scanline;"
    },
    {
        "line": 86,
        "fullcodeline": "cinfo->output_scanline += lines_left_in_iMCU_row;"
    },
    {
        "line": 139,
        "fullcodeline": "upsample->rows_to_go = cinfo->output_height - cinfo->output_scanline;"
    },
    {
        "line": 152,
        "fullcodeline": "(*cinfo->entropy->decode_mcu) (cinfo, NULL);"
    },
    {
        "line": 93,
        "fullcodeline": "upsample->rows_to_go = cinfo->output_height - cinfo->output_scanline;"
    },
    {
        "line": 97,
        "fullcodeline": "upsample->rows_to_go = cinfo->output_height - cinfo->output_scanline;"
    }
]