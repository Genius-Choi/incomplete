[
    {
        "line": 2,
        "fullcodeline": "assert(full_path);"
    },
    {
        "line": 15,
        "fullcodeline": "unlink(RUN_LIB_FILE);\t\t\t  // in case is there"
    },
    {
        "line": 16,
        "fullcodeline": "create_empty_file_as_root(RUN_LIB_FILE, 0644);"
    },
    {
        "line": 23,
        "fullcodeline": "sbox_run(SBOX_USER | SBOX_SECCOMP | SBOX_CAPS_NONE, 3, PATH_FLDD, full_path, RUN_LIB_FILE);"
    },
    {
        "line": 26,
        "fullcodeline": "FILE *fp = fopen(RUN_LIB_FILE, \"r\");"
    },
    {
        "line": 30,
        "fullcodeline": "char buf[MAXBUF];"
    },
    {
        "line": 38,
        "fullcodeline": "fclose(fp);"
    },
    {
        "line": 3,
        "fullcodeline": "if (arg_debug || arg_debug_private_lib)"
    },
    {
        "line": 8,
        "fullcodeline": "if (access(full_path, R_OK)) {"
    },
    {
        "line": 17,
        "fullcodeline": "if (chown(RUN_LIB_FILE, getuid(), getgid()))"
    },
    {
        "line": 21,
        "fullcodeline": "if (arg_debug || arg_debug_private_lib)"
    },
    {
        "line": 27,
        "fullcodeline": "if (!fp)"
    },
    {
        "line": 31,
        "fullcodeline": "while (fgets(buf, MAXBUF, fp)) {"
    },
    {
        "line": 4,
        "fullcodeline": "printf(\"    fslib_copy_libs %s\\n\", full_path);"
    },
    {
        "line": 18,
        "fullcodeline": "errExit(\"chown\");"
    },
    {
        "line": 22,
        "fullcodeline": "printf(\"    running fldd %s\\n\", full_path);"
    },
    {
        "line": 28,
        "fullcodeline": "errExit(\"fopen\");"
    },
    {
        "line": 33,
        "fullcodeline": "char *ptr = strchr(buf, '\\n');"
    },
    {
        "line": 36,
        "fullcodeline": "fslib_duplicate(buf);"
    },
    {
        "line": 9,
        "fullcodeline": "if (arg_debug || arg_debug_private_lib)"
    },
    {
        "line": 10,
        "fullcodeline": "printf(\"cannot find %s for private-lib, skipping...\\n\", full_path);"
    },
    {
        "line": 35,
        "fullcodeline": "*ptr = '\\0';"
    }
]