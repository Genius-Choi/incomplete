[
    {
        "line": 3,
        "fullcodeline": "(void)sandbox_arg;"
    },
    {
        "line": 5,
        "fullcodeline": "pid_t child_pid = getpid();"
    },
    {
        "line": 36,
        "fullcodeline": "preproc_mount_mnt_dir();"
    },
    {
        "line": 46,
        "fullcodeline": "fs_logger2int(\"sandbox pid:\", (int) sandbox_pid);"
    },
    {
        "line": 53,
        "fullcodeline": "fs_logger(\"install mount namespace\");"
    },
    {
        "line": 68,
        "fullcodeline": "int gw_cfg_failed = 0; // default gw configuration flag"
    },
    {
        "line": 196,
        "fullcodeline": "bool need_preload = arg_trace || arg_tracelog || arg_seccomp_postexec;"
    },
    {
        "line": 232,
        "fullcodeline": "fs_basic_fs();"
    },
    {
        "line": 366,
        "fullcodeline": "fs_proc_sys_dev_boot();"
    },
    {
        "line": 380,
        "fullcodeline": "fs_whitelist();"
    },
    {
        "line": 383,
        "fullcodeline": "fs_blacklist(); // mkdir and mkfile are processed all over again"
    },
    {
        "line": 422,
        "fullcodeline": "fs_resolvconf();"
    },
    {
        "line": 427,
        "fullcodeline": "fs_logger_print();"
    },
    {
        "line": 428,
        "fullcodeline": "fs_logger_change_owner();"
    },
    {
        "line": 433,
        "fullcodeline": "EUID_USER();"
    },
    {
        "line": 434,
        "fullcodeline": "int cwd = 0;"
    },
    {
        "line": 460,
        "fullcodeline": "EUID_ROOT();"
    },
    {
        "line": 462,
        "fullcodeline": "fs_x11();"
    },
    {
        "line": 467,
        "fullcodeline": "save_umask();"
    },
    {
        "line": 473,
        "fullcodeline": "save_nonewprivs();"
    },
    {
        "line": 476,
        "fullcodeline": "set_caps();"
    },
    {
        "line": 479,
        "fullcodeline": "save_cpu();"
    },
    {
        "line": 482,
        "fullcodeline": "save_cgroup();"
    },
    {
        "line": 530,
        "fullcodeline": "FILE *rj = create_ready_for_join_file();"
    },
    {
        "line": 536,
        "fullcodeline": "save_nogroups();"
    },
    {
        "line": 548,
        "fullcodeline": "close(child_to_parent_fds[1]);"
    },
    {
        "line": 551,
        "fullcodeline": "wait_for_other(parent_to_child_fds[0]);"
    },
    {
        "line": 552,
        "fullcodeline": "close(parent_to_child_fds[0]);"
    },
    {
        "line": 582,
        "fullcodeline": "drop_privs(arg_nogroups);"
    },
    {
        "line": 585,
        "fullcodeline": "prctl(PR_SET_PDEATHSIG, SIGKILL, 0, 0, 0);"
    },
    {
        "line": 597,
        "fullcodeline": "pid_t app_pid = fork();"
    },
    {
        "line": 622,
        "fullcodeline": "fclose(rj);"
    },
    {
        "line": 624,
        "fullcodeline": "int status = monitor_application(app_pid);\t// monitor application"
    },
    {
        "line": 625,
        "fullcodeline": "flush_stdin();"
    },
    {
        "line": 16,
        "fullcodeline": "if (arg_debug && child_pid == 1)"
    },
    {
        "line": 32,
        "fullcodeline": "if (mount(NULL, \"/\", NULL, MS_SLAVE | MS_REC, NULL) < 0) {"
    },
    {
        "line": 58,
        "fullcodeline": "if (arg_netfilter && any_bridge_configured()) { // assuming by default the client filter"
    },
    {
        "line": 61,
        "fullcodeline": "if (arg_netfilter6 && any_bridge_configured()) { // assuming by default the client filter"
    },
    {
        "line": 137,
        "fullcodeline": "if (!arg_quiet) {"
    },
    {
        "line": 166,
        "fullcodeline": "if (arg_nonetwork || any_bridge_configured() || any_interface_configured()) {"
    },
    {
        "line": 199,
        "fullcodeline": "if (getuid() != 0 && (arg_appimage || cfg.chrootdir || arg_overlay)) {"
    },
    {
        "line": 295,
        "fullcodeline": "if (arg_private_bin && !arg_appimage) {"
    },
    {
        "line": 315,
        "fullcodeline": "if (arg_private_lib && !arg_appimage) {"
    },
    {
        "line": 371,
        "fullcodeline": "if (checkcfg(CFG_DISABLE_MNT))"
    },
    {
        "line": 440,
        "fullcodeline": "if (!cwd) {"
    },
    {
        "line": 598,
        "fullcodeline": "if (app_pid == -1)"
    },
    {
        "line": 601,
        "fullcodeline": "if (app_pid == 0) {"
    },
    {
        "line": 627,
        "fullcodeline": "if (WIFEXITED(status)) {"
    },
    {
        "line": 7,
        "fullcodeline": "printf(\"Initializing child process\\n\");"
    },
    {
        "line": 17,
        "fullcodeline": "printf(\"PID namespace installed\\n\");"
    },
    {
        "line": 33,
        "fullcodeline": "chk_chroot();"
    },
    {
        "line": 45,
        "fullcodeline": "fs_logger2(\"sandbox name:\", cfg.name);"
    },
    {
        "line": 48,
        "fullcodeline": "fs_logger(\"sandbox filesystem: chroot\");"
    },
    {
        "line": 59,
        "fullcodeline": "netfilter(arg_netfilter_file);"
    },
    {
        "line": 62,
        "fullcodeline": "netfilter6(arg_netfilter6_file);"
    },
    {
        "line": 70,
        "fullcodeline": "net_if_up(\"lo\");"
    },
    {
        "line": 200,
        "fullcodeline": "enforce_filters();"
    },
    {
        "line": 201,
        "fullcodeline": "need_preload = arg_trace || arg_tracelog;"
    },
    {
        "line": 206,
        "fullcodeline": "fs_trace_preload();"
    },
    {
        "line": 210,
        "fullcodeline": "fs_store_hosts_file();"
    },
    {
        "line": 259,
        "fullcodeline": "fs_private_dev();"
    },
    {
        "line": 336,
        "fullcodeline": "EUID_USER();"
    },
    {
        "line": 337,
        "fullcodeline": "fs_private_tmp();"
    },
    {
        "line": 338,
        "fullcodeline": "EUID_ROOT();"
    },
    {
        "line": 345,
        "fullcodeline": "dbus_session_disable();"
    },
    {
        "line": 352,
        "fullcodeline": "fs_hostname(cfg.hostname);"
    },
    {
        "line": 355,
        "fullcodeline": "fs_mount_hosts_file();"
    },
    {
        "line": 361,
        "fullcodeline": "netns_mounts(arg_netns);"
    },
    {
        "line": 372,
        "fullcodeline": "fs_mnt(1);"
    },
    {
        "line": 390,
        "fullcodeline": "pulseaudio_disable();"
    },
    {
        "line": 393,
        "fullcodeline": "fs_dev_disable_sound();"
    },
    {
        "line": 399,
        "fullcodeline": "fs_dev_disable_3d();"
    },
    {
        "line": 402,
        "fullcodeline": "fs_dev_disable_tv();"
    },
    {
        "line": 405,
        "fullcodeline": "fs_dev_disable_dvd();"
    },
    {
        "line": 408,
        "fullcodeline": "fs_dev_disable_u2f();"
    },
    {
        "line": 411,
        "fullcodeline": "fs_dev_disable_video();"
    },
    {
        "line": 417,
        "fullcodeline": "fs_trace();"
    },
    {
        "line": 453,
        "fullcodeline": "char *cpath = get_current_dir_name();"
    },
    {
        "line": 464,
        "fullcodeline": "x11_xorg();"
    },
    {
        "line": 538,
        "fullcodeline": "int rv = unshare(CLONE_NEWUSER);"
    },
    {
        "line": 559,
        "fullcodeline": "set_caps();"
    },
    {
        "line": 566,
        "fullcodeline": "prctl(PR_SET_NO_NEW_PRIVS, 1, 0, 0, 0);"
    },
    {
        "line": 592,
        "fullcodeline": "set_cpu_affinity();"
    },
    {
        "line": 599,
        "fullcodeline": "errExit(\"fork\");"
    },
    {
        "line": 617,
        "fullcodeline": "set_rlimits();"
    },
    {
        "line": 619,
        "fullcodeline": "start_application(0, rj);"
    },
    {
        "line": 24,
        "fullcodeline": "if (sethostname(cfg.hostname, strlen(cfg.hostname)) < 0)"
    },
    {
        "line": 138,
        "fullcodeline": "if (any_bridge_configured() || any_interface_configured() || cfg.defaultgw || cfg.dns1) {"
    },
    {
        "line": 170,
        "fullcodeline": "EUID_USER();"
    },
    {
        "line": 171,
        "fullcodeline": "env_ibus_load();"
    },
    {
        "line": 172,
        "fullcodeline": "EUID_ROOT();"
    },
    {
        "line": 436,
        "fullcodeline": "if (chdir(cfg.cwd) == 0)"
    },
    {
        "line": 441,
        "fullcodeline": "if (chdir(\"/\") < 0)"
    },
    {
        "line": 539,
        "fullcodeline": "if (rv == -1) {"
    },
    {
        "line": 568,
        "fullcodeline": "if (prctl(PR_GET_NO_NEW_PRIVS, 0, 0, 0, 0) != 1) {"
    },
    {
        "line": 629,
        "fullcodeline": "return WEXITSTATUS(status);"
    },
    {
        "line": 25,
        "fullcodeline": "errExit(\"sethostname\");"
    },
    {
        "line": 72,
        "fullcodeline": "printf(\"Network namespace enabled, only loopback interface available\\n\");"
    },
    {
        "line": 139,
        "fullcodeline": "fmessage(\"\\n\");"
    },
    {
        "line": 161,
        "fullcodeline": "fmessage(\"\\n\");"
    },
    {
        "line": 263,
        "fullcodeline": "fwarning(\"private-etc feature is disabled in chroot\\n\");"
    },
    {
        "line": 276,
        "fullcodeline": "fwarning(\"private-opt feature is disabled in chroot\\n\");"
    },
    {
        "line": 286,
        "fullcodeline": "fwarning(\"private-srv feature is disabled in chroot\\n\");"
    },
    {
        "line": 297,
        "fullcodeline": "fwarning(\"private-bin feature is disabled in chroot\\n\");"
    },
    {
        "line": 317,
        "fullcodeline": "fwarning(\"private-lib feature is disabled in chroot\\n\");"
    },
    {
        "line": 327,
        "fullcodeline": "fwarning(\"private-cache feature is disabled in chroot\\n\");"
    },
    {
        "line": 395,
        "fullcodeline": "else if (!arg_noautopulse)"
    },
    {
        "line": 437,
        "fullcodeline": "cwd = 1;"
    },
    {
        "line": 442,
        "fullcodeline": "errExit(\"chdir\");"
    },
    {
        "line": 455,
        "fullcodeline": "printf(\"Current directory: %s\\n\", cpath);"
    },
    {
        "line": 456,
        "fullcodeline": "free(cpath);"
    },
    {
        "line": 540,
        "fullcodeline": "fwarning(\"cannot create a new user namespace, going forward without it...\\n\");"
    },
    {
        "line": 541,
        "fullcodeline": "arg_noroot = 0;"
    },
    {
        "line": 558,
        "fullcodeline": "printf(\"noroot user namespace installed\\n\");"
    },
    {
        "line": 569,
        "fullcodeline": "fwarning(\"cannot set NO_NEW_PRIVS, it requires a Linux kernel version 3.5 or newer.\\n\");"
    },
    {
        "line": 632,
        "fullcodeline": "return -1;"
    },
    {
        "line": 50,
        "fullcodeline": "fs_logger(\"sandbox filesystem: overlay\");"
    },
    {
        "line": 75,
        "fullcodeline": "netns(arg_netns);"
    },
    {
        "line": 140,
        "fullcodeline": "if (any_bridge_configured() || any_interface_configured()) {"
    },
    {
        "line": 147,
        "fullcodeline": "if (cfg.defaultgw != 0) {"
    },
    {
        "line": 153,
        "fullcodeline": "if (cfg.dns1 != NULL)"
    },
    {
        "line": 155,
        "fullcodeline": "if (cfg.dns2 != NULL)"
    },
    {
        "line": 157,
        "fullcodeline": "if (cfg.dns3 != NULL)"
    },
    {
        "line": 159,
        "fullcodeline": "if (cfg.dns4 != NULL)"
    },
    {
        "line": 374,
        "fullcodeline": "fs_mnt(0);"
    },
    {
        "line": 396,
        "fullcodeline": "pulseaudio_init();"
    },
    {
        "line": 445,
        "fullcodeline": "if (stat(cfg.homedir, &s) == 0) {"
    },
    {
        "line": 52,
        "fullcodeline": "fs_logger(\"sandbox filesystem: local\");"
    },
    {
        "line": 154,
        "fullcodeline": "fmessage(\"DNS server %s\\n\", cfg.dns1);"
    },
    {
        "line": 156,
        "fullcodeline": "fmessage(\"DNS server %s\\n\", cfg.dns2);"
    },
    {
        "line": 158,
        "fullcodeline": "fmessage(\"DNS server %s\\n\", cfg.dns3);"
    },
    {
        "line": 160,
        "fullcodeline": "fmessage(\"DNS server %s\\n\", cfg.dns4);"
    },
    {
        "line": 240,
        "fullcodeline": "fwarning(\"private=directory feature is disabled in chroot\\n\");"
    },
    {
        "line": 571,
        "fullcodeline": "fprintf(stderr, \"Error: NO_NEW_PRIVS required for this sandbox, exiting ...\\n\");"
    },
    {
        "line": 572,
        "fullcodeline": "exit(1);"
    },
    {
        "line": 77,
        "fullcodeline": "printf(\"Network namespace '%s' activated\\n\", arg_netns);"
    },
    {
        "line": 79,
        "fullcodeline": "else if (any_bridge_configured() || any_interface_configured()) {"
    },
    {
        "line": 265,
        "fullcodeline": "fwarning(\"private-etc feature is disabled in overlay\\n\");"
    },
    {
        "line": 278,
        "fullcodeline": "fwarning(\"private-opt feature is disabled in overlay\\n\");"
    },
    {
        "line": 288,
        "fullcodeline": "fwarning(\"private-srv feature is disabled in overlay\\n\");"
    },
    {
        "line": 299,
        "fullcodeline": "fwarning(\"private-bin feature is disabled in overlay\\n\");"
    },
    {
        "line": 319,
        "fullcodeline": "fwarning(\"private-lib feature is disabled in overlay\\n\");"
    },
    {
        "line": 329,
        "fullcodeline": "fwarning(\"private-cache feature is disabled in overlay\\n\");"
    },
    {
        "line": 447,
        "fullcodeline": "if (chdir(cfg.homedir) < 0)"
    },
    {
        "line": 576,
        "fullcodeline": "printf(\"NO_NEW_PRIVS set\\n\");"
    },
    {
        "line": 81,
        "fullcodeline": "net_if_up(\"lo\");"
    },
    {
        "line": 85,
        "fullcodeline": "sandbox_if_up(&cfg.bridge0);"
    },
    {
        "line": 89,
        "fullcodeline": "sandbox_if_up(&cfg.bridge1);"
    },
    {
        "line": 93,
        "fullcodeline": "sandbox_if_up(&cfg.bridge2);"
    },
    {
        "line": 97,
        "fullcodeline": "sandbox_if_up(&cfg.bridge3);"
    },
    {
        "line": 142,
        "fullcodeline": "sbox_run(SBOX_ROOT | SBOX_CAPS_NETWORK | SBOX_SECCOMP, 3, PATH_FNET, \"printif\", \"scan\");"
    },
    {
        "line": 149,
        "fullcodeline": "fmessage(\"Default gateway configuration failed\\n\");"
    },
    {
        "line": 255,
        "fullcodeline": "fs_private();"
    },
    {
        "line": 267,
        "fullcodeline": "fs_private_dir_list(\"/etc\", RUN_ETC_DIR, cfg.etc_private_keep);"
    },
    {
        "line": 280,
        "fullcodeline": "fs_private_dir_list(\"/opt\", RUN_OPT_DIR, cfg.opt_private_keep);"
    },
    {
        "line": 290,
        "fullcodeline": "fs_private_dir_list(\"/srv\", RUN_SRV_DIR, cfg.srv_private_keep);"
    },
    {
        "line": 310,
        "fullcodeline": "fs_private_bin_list();"
    },
    {
        "line": 321,
        "fullcodeline": "fs_private_lib();"
    },
    {
        "line": 331,
        "fullcodeline": "fs_private_cache();"
    },
    {
        "line": 448,
        "fullcodeline": "errExit(\"chdir\");"
    },
    {
        "line": 144,
        "fullcodeline": "sbox_run(SBOX_ROOT | SBOX_CAPS_NETWORK | SBOX_SECCOMP, 2, PATH_FNET, \"printif\");"
    },
    {
        "line": 151,
        "fullcodeline": "fmessage(\"Default gateway %d.%d.%d.%d\\n\", PRINT_IP(cfg.defaultgw));"
    },
    {
        "line": 242,
        "fullcodeline": "fwarning(\"private=directory feature is disabled in overlay\\n\");"
    },
    {
        "line": 248,
        "fullcodeline": "fwarning(\"private-home= feature is disabled in chroot\\n\");"
    },
    {
        "line": 84,
        "fullcodeline": "net_config_mac(cfg.bridge0.devsandbox, cfg.bridge0.macsandbox);"
    },
    {
        "line": 88,
        "fullcodeline": "net_config_mac(cfg.bridge1.devsandbox, cfg.bridge1.macsandbox);"
    },
    {
        "line": 92,
        "fullcodeline": "net_config_mac(cfg.bridge2.devsandbox, cfg.bridge2.macsandbox);"
    },
    {
        "line": 96,
        "fullcodeline": "net_config_mac(cfg.bridge3.devsandbox, cfg.bridge3.macsandbox);"
    },
    {
        "line": 105,
        "fullcodeline": "net_config_interface(cfg.interface0.dev, cfg.interface0.ip, cfg.interface0.mask, cfg.interface0.mtu);"
    },
    {
        "line": 110,
        "fullcodeline": "net_config_interface(cfg.interface1.dev, cfg.interface1.ip, cfg.interface1.mask, cfg.interface1.mtu);"
    },
    {
        "line": 115,
        "fullcodeline": "net_config_interface(cfg.interface2.dev, cfg.interface2.ip, cfg.interface2.mask, cfg.interface2.mtu);"
    },
    {
        "line": 120,
        "fullcodeline": "net_config_interface(cfg.interface3.dev, cfg.interface3.ip, cfg.interface3.mask, cfg.interface3.mtu);"
    },
    {
        "line": 133,
        "fullcodeline": "printf(\"Network namespace enabled\\n\");"
    },
    {
        "line": 244,
        "fullcodeline": "fs_private_homedir();"
    },
    {
        "line": 270,
        "fullcodeline": "fs_trace_preload();"
    },
    {
        "line": 303,
        "fullcodeline": "EUID_USER();"
    },
    {
        "line": 307,
        "fullcodeline": "cfg.bin_private_keep = tmp;"
    },
    {
        "line": 308,
        "fullcodeline": "EUID_ROOT();"
    },
    {
        "line": 126,
        "fullcodeline": "if (net_add_route(0, 0, cfg.defaultgw)) {"
    },
    {
        "line": 305,
        "fullcodeline": "if (asprintf(&tmp, \"%s,xauth\", cfg.bin_private_keep) == -1)"
    },
    {
        "line": 104,
        "fullcodeline": "printf(\"Configuring %d.%d.%d.%d address on interface %s\\n\", PRINT_IP(cfg.interface0.ip), cfg.interface0.dev);"
    },
    {
        "line": 109,
        "fullcodeline": "printf(\"Configuring %d.%d.%d.%d address on interface %s\\n\", PRINT_IP(cfg.interface1.ip), cfg.interface1.dev);"
    },
    {
        "line": 114,
        "fullcodeline": "printf(\"Configuring %d.%d.%d.%d address on interface %s\\n\", PRINT_IP(cfg.interface2.ip), cfg.interface2.dev);"
    },
    {
        "line": 119,
        "fullcodeline": "printf(\"Configuring %d.%d.%d.%d address on interface %s\\n\", PRINT_IP(cfg.interface3.ip), cfg.interface3.dev);"
    },
    {
        "line": 127,
        "fullcodeline": "fwarning(\"cannot configure default route\\n\");"
    },
    {
        "line": 128,
        "fullcodeline": "gw_cfg_failed = 1;"
    },
    {
        "line": 250,
        "fullcodeline": "fwarning(\"private-home= feature is disabled in overlay\\n\");"
    },
    {
        "line": 306,
        "fullcodeline": "errExit(\"asprintf\");"
    },
    {
        "line": 252,
        "fullcodeline": "fs_private_home_list();"
    }
]