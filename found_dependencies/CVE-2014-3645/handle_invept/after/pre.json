[
    {
        "line": 10,
        "fullcodeline": "u64 eptp_mask = ((1ull << 51) - 1) & PAGE_MASK;"
    },
    {
        "line": 26,
        "fullcodeline": "vmx_instruction_info = vmcs_read32(VMX_INSTRUCTION_INFO);"
    },
    {
        "line": 27,
        "fullcodeline": "type = kvm_register_read(vcpu, (vmx_instruction_info >> 28) & 0xf);"
    },
    {
        "line": 29,
        "fullcodeline": "types = (nested_vmx_ept_caps >> VMX_EPT_EXTENT_SHIFT) & 6;"
    },
    {
        "line": 12,
        "fullcodeline": "if (!(nested_vmx_secondary_ctls_high & SECONDARY_EXEC_ENABLE_EPT) ||"
    },
    {
        "line": 40,
        "fullcodeline": "if (get_vmx_mem_address(vcpu, vmcs_readl(EXIT_QUALIFICATION),"
    },
    {
        "line": 43,
        "fullcodeline": "if (kvm_read_guest_virt(&vcpu->arch.emulate_ctxt, gva, &operand,"
    },
    {
        "line": 13,
        "fullcodeline": "!(nested_vmx_ept_caps & VMX_EPT_INVEPT_BIT)) {"
    },
    {
        "line": 14,
        "fullcodeline": "kvm_queue_exception(vcpu, UD_VECTOR);"
    },
    {
        "line": 18,
        "fullcodeline": "if (!nested_vmx_check_permission(vcpu))"
    },
    {
        "line": 21,
        "fullcodeline": "if (!kvm_read_cr0_bits(vcpu, X86_CR0_PE)) {"
    },
    {
        "line": 31,
        "fullcodeline": "if (!(types & (1UL << type))) {"
    },
    {
        "line": 32,
        "fullcodeline": "nested_vmx_failValid(vcpu,"
    },
    {
        "line": 55,
        "fullcodeline": "kvm_mmu_sync_roots(vcpu);"
    },
    {
        "line": 56,
        "fullcodeline": "kvm_mmu_flush_tlb(vcpu);"
    },
    {
        "line": 57,
        "fullcodeline": "nested_vmx_succeed(vcpu);"
    },
    {
        "line": 51,
        "fullcodeline": "if ((operand.eptp & eptp_mask) !="
    },
    {
        "line": 52,
        "fullcodeline": "(nested_ept_get_cr3(vcpu) & eptp_mask))"
    }
]