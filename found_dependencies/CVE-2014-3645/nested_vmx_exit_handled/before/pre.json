[
    {
        "line": 3,
        "fullcodeline": "u32 intr_info = vmcs_read32(VM_EXIT_INTR_INFO);"
    },
    {
        "line": 4,
        "fullcodeline": "struct vcpu_vmx *vmx = to_vmx(vcpu);"
    },
    {
        "line": 5,
        "fullcodeline": "struct vmcs12 *vmcs12 = get_vmcs12(vcpu);"
    },
    {
        "line": 6,
        "fullcodeline": "u32 exit_reason = vmx->exit_reason;"
    },
    {
        "line": 12,
        "fullcodeline": "pr_info_ratelimited(\"%s failed vm entry %x\\n\", __func__,"
    },
    {
        "line": 13,
        "fullcodeline": "vmcs_read32(VM_INSTRUCTION_ERROR));"
    },
    {
        "line": 23,
        "fullcodeline": "return vmcs12->exception_bitmap &"
    },
    {
        "line": 30,
        "fullcodeline": "return nested_cpu_has(vmcs12, CPU_BASED_VIRTUAL_INTR_PENDING);"
    },
    {
        "line": 32,
        "fullcodeline": "return nested_cpu_has(vmcs12, CPU_BASED_VIRTUAL_NMI_PENDING);"
    },
    {
        "line": 38,
        "fullcodeline": "return nested_cpu_has(vmcs12, CPU_BASED_HLT_EXITING);"
    },
    {
        "line": 42,
        "fullcodeline": "return nested_cpu_has(vmcs12, CPU_BASED_INVLPG_EXITING);"
    },
    {
        "line": 44,
        "fullcodeline": "return nested_cpu_has(vmcs12, CPU_BASED_RDPMC_EXITING);"
    },
    {
        "line": 46,
        "fullcodeline": "return nested_cpu_has(vmcs12, CPU_BASED_RDTSC_EXITING);"
    },
    {
        "line": 58,
        "fullcodeline": "return nested_vmx_exit_handled_cr(vcpu, vmcs12);"
    },
    {
        "line": 60,
        "fullcodeline": "return nested_cpu_has(vmcs12, CPU_BASED_MOV_DR_EXITING);"
    },
    {
        "line": 62,
        "fullcodeline": "return nested_vmx_exit_handled_io(vcpu, vmcs12);"
    },
    {
        "line": 65,
        "fullcodeline": "return nested_vmx_exit_handled_msr(vcpu, vmcs12, exit_reason);"
    },
    {
        "line": 69,
        "fullcodeline": "return nested_cpu_has(vmcs12, CPU_BASED_MWAIT_EXITING);"
    },
    {
        "line": 71,
        "fullcodeline": "return nested_cpu_has(vmcs12, CPU_BASED_MONITOR_EXITING);"
    },
    {
        "line": 73,
        "fullcodeline": "return nested_cpu_has(vmcs12, CPU_BASED_PAUSE_EXITING) ||"
    },
    {
        "line": 81,
        "fullcodeline": "return nested_cpu_has2(vmcs12,"
    },
    {
        "line": 87,
        "fullcodeline": "return vmcs12->pin_based_vm_exec_control &"
    },
    {
        "line": 90,
        "fullcodeline": "return nested_cpu_has2(vmcs12, SECONDARY_EXEC_WBINVD_EXITING);"
    },
    {
        "line": 19,
        "fullcodeline": "if (!is_exception(intr_info))"
    },
    {
        "line": 24,
        "fullcodeline": "(1u << (intr_info & INTR_INFO_VECTOR_MASK));"
    },
    {
        "line": 74,
        "fullcodeline": "nested_cpu_has2(vmcs12,"
    },
    {
        "line": 21,
        "fullcodeline": "else if (is_page_fault(intr_info))"
    }
]