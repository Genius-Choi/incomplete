[
    {
        "line": 4,
        "fullcodeline": "struct inet_sock *inet = inet_sk(sk);"
    },
    {
        "line": 5,
        "fullcodeline": "struct rtable *rt = skb_rtable(skb);"
    },
    {
        "line": 9,
        "fullcodeline": "skb_push(skb, sizeof(struct iphdr) + (opt ? opt->optlen : 0));"
    },
    {
        "line": 10,
        "fullcodeline": "skb_reset_network_header(skb);"
    },
    {
        "line": 11,
        "fullcodeline": "iph = ip_hdr(skb);"
    },
    {
        "line": 12,
        "fullcodeline": "iph->version  = 4;"
    },
    {
        "line": 13,
        "fullcodeline": "iph->ihl      = 5;"
    },
    {
        "line": 14,
        "fullcodeline": "iph->tos      = inet->tos;"
    },
    {
        "line": 19,
        "fullcodeline": "iph->ttl      = ip_select_ttl(inet, &rt->dst);"
    },
    {
        "line": 20,
        "fullcodeline": "iph->daddr    = rt->rt_dst;"
    },
    {
        "line": 21,
        "fullcodeline": "iph->saddr    = rt->rt_src;"
    },
    {
        "line": 22,
        "fullcodeline": "iph->protocol = sk->sk_protocol;"
    },
    {
        "line": 23,
        "fullcodeline": "ip_select_ident(iph, &rt->dst, sk);"
    },
    {
        "line": 30,
        "fullcodeline": "skb->priority = sk->sk_priority;"
    },
    {
        "line": 31,
        "fullcodeline": "skb->mark = sk->sk_mark;"
    },
    {
        "line": 15,
        "fullcodeline": "if (ip_dont_fragment(sk, &rt->dst))"
    },
    {
        "line": 25,
        "fullcodeline": "if (opt && opt->optlen) {"
    },
    {
        "line": 34,
        "fullcodeline": "return ip_local_out(skb);"
    },
    {
        "line": 16,
        "fullcodeline": "iph->frag_off = htons(IP_DF);"
    },
    {
        "line": 26,
        "fullcodeline": "iph->ihl += opt->optlen>>2;"
    },
    {
        "line": 27,
        "fullcodeline": "ip_options_build(skb, opt, daddr, rt, 0);"
    },
    {
        "line": 18,
        "fullcodeline": "iph->frag_off = 0;"
    }
]