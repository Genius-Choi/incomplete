[
    {
        "line": 4,
        "fullcodeline": "struct inet_sock *inet = inet_sk(sk);"
    },
    {
        "line": 5,
        "fullcodeline": "struct udp_sock *up = udp_sk(sk);"
    },
    {
        "line": 7,
        "fullcodeline": "int ulen = len;"
    },
    {
        "line": 9,
        "fullcodeline": "struct rtable *rt = NULL;"
    },
    {
        "line": 10,
        "fullcodeline": "int free = 0;"
    },
    {
        "line": 11,
        "fullcodeline": "int connected = 0;"
    },
    {
        "line": 15,
        "fullcodeline": "int err, is_udplite = IS_UDPLITE(sk);"
    },
    {
        "line": 16,
        "fullcodeline": "int corkreq = up->corkflag || msg->msg_flags&MSG_MORE;"
    },
    {
        "line": 31,
        "fullcodeline": "ipc.opt = NULL;"
    },
    {
        "line": 32,
        "fullcodeline": "ipc.tx_flags = 0;"
    },
    {
        "line": 34,
        "fullcodeline": "getfrag = is_udplite ? udplite_getfrag : ip_generic_getfrag;"
    },
    {
        "line": 51,
        "fullcodeline": "ulen += sizeof(struct udphdr);"
    },
    {
        "line": 79,
        "fullcodeline": "ipc.addr = inet->inet_saddr;"
    },
    {
        "line": 81,
        "fullcodeline": "ipc.oif = sk->sk_bound_dev_if;"
    },
    {
        "line": 82,
        "fullcodeline": "err = sock_tx_timestamp(sk, &ipc.tx_flags);"
    },
    {
        "line": 106,
        "fullcodeline": "saddr = ipc.addr;"
    },
    {
        "line": 107,
        "fullcodeline": "ipc.addr = faddr = daddr;"
    },
    {
        "line": 115,
        "fullcodeline": "tos = RT_TOS(inet->tos);"
    },
    {
        "line": 165,
        "fullcodeline": "saddr = rt->rt_src;"
    },
    {
        "line": 180,
        "fullcodeline": "lock_sock(sk);"
    },
    {
        "line": 202,
        "fullcodeline": "err = ip_append_data(sk, getfrag, msg->msg_iov, ulen,"
    },
    {
        "line": 211,
        "fullcodeline": "release_sock(sk);"
    },
    {
        "line": 236,
        "fullcodeline": "err = 0;"
    },
    {
        "line": 21,
        "fullcodeline": "if (len > 0xFFFF)"
    },
    {
        "line": 28,
        "fullcodeline": "if (msg->msg_flags & MSG_OOB) /* Mirror BSD error message compatibility */"
    },
    {
        "line": 93,
        "fullcodeline": "if (!ipc.opt) {"
    },
    {
        "line": 109,
        "fullcodeline": "if (ipc.opt && ipc.opt->opt.srr) {"
    },
    {
        "line": 123,
        "fullcodeline": "if (ipv4_is_multicast(daddr)) {"
    },
    {
        "line": 134,
        "fullcodeline": "if (rt == NULL) {"
    },
    {
        "line": 161,
        "fullcodeline": "if (msg->msg_flags&MSG_CONFIRM)"
    },
    {
        "line": 166,
        "fullcodeline": "if (!ipc.addr)"
    },
    {
        "line": 217,
        "fullcodeline": "if (!err)"
    },
    {
        "line": 234,
        "fullcodeline": "if (!(msg->msg_flags&MSG_PROBE) || len)"
    },
    {
        "line": 41,
        "fullcodeline": "lock_sock(sk);"
    },
    {
        "line": 49,
        "fullcodeline": "release_sock(sk);"
    },
    {
        "line": 57,
        "fullcodeline": "struct sockaddr_in * usin = (struct sockaddr_in *)msg->msg_name;"
    },
    {
        "line": 65,
        "fullcodeline": "daddr = usin->sin_addr.s_addr;"
    },
    {
        "line": 66,
        "fullcodeline": "dport = usin->sin_port;"
    },
    {
        "line": 86,
        "fullcodeline": "err = ip_cmsg_send(sock_net(sk), msg, &ipc);"
    },
    {
        "line": 97,
        "fullcodeline": "inet_opt = rcu_dereference(inet->inet_opt);"
    },
    {
        "line": 112,
        "fullcodeline": "faddr = ipc.opt->opt.faddr;"
    },
    {
        "line": 116,
        "fullcodeline": "if (sock_flag(sk, SOCK_LOCALROUTE) ||"
    },
    {
        "line": 118,
        "fullcodeline": "(ipc.opt && ipc.opt->opt.is_strictroute)) {"
    },
    {
        "line": 119,
        "fullcodeline": "tos |= RTO_ONLINK;"
    },
    {
        "line": 132,
        "fullcodeline": "rt = (struct rtable *)sk_dst_check(sk, 0);"
    },
    {
        "line": 136,
        "fullcodeline": "struct net *net = sock_net(sk);"
    },
    {
        "line": 138,
        "fullcodeline": "flowi4_init_output(&fl4, ipc.oif, sk->sk_mark, tos,"
    },
    {
        "line": 143,
        "fullcodeline": "security_sk_classify_flow(sk, flowi4_to_flowi(&fl4));"
    },
    {
        "line": 144,
        "fullcodeline": "rt = ip_route_output_flow(net, &fl4, sk);"
    },
    {
        "line": 153,
        "fullcodeline": "err = -EACCES;"
    },
    {
        "line": 167,
        "fullcodeline": "daddr = ipc.addr = rt->rt_dst;"
    },
    {
        "line": 171,
        "fullcodeline": "skb = ip_make_skb(sk, getfrag, msg->msg_iov, ulen,"
    },
    {
        "line": 174,
        "fullcodeline": "err = PTR_ERR(skb);"
    },
    {
        "line": 184,
        "fullcodeline": "release_sock(sk);"
    },
    {
        "line": 187,
        "fullcodeline": "err = -EINVAL;"
    },
    {
        "line": 206,
        "fullcodeline": "udp_flush_pending_frames(sk);"
    },
    {
        "line": 226,
        "fullcodeline": "if (err == -ENOBUFS || test_bit(SOCK_NOSPACE, &sk->sk_socket->flags)) {"
    },
    {
        "line": 227,
        "fullcodeline": "UDP_INC_STATS_USER(sock_net(sk),"
    },
    {
        "line": 22,
        "fullcodeline": "return -EMSGSIZE;"
    },
    {
        "line": 29,
        "fullcodeline": "return -EOPNOTSUPP;"
    },
    {
        "line": 42,
        "fullcodeline": "if (likely(up->pending)) {"
    },
    {
        "line": 58,
        "fullcodeline": "if (msg->msg_namelen < sizeof(*usin))"
    },
    {
        "line": 60,
        "fullcodeline": "if (usin->sin_family != AF_INET) {"
    },
    {
        "line": 67,
        "fullcodeline": "if (dport == 0)"
    },
    {
        "line": 72,
        "fullcodeline": "daddr = inet->inet_daddr;"
    },
    {
        "line": 73,
        "fullcodeline": "dport = inet->inet_dport;"
    },
    {
        "line": 110,
        "fullcodeline": "if (!daddr)"
    },
    {
        "line": 117,
        "fullcodeline": "(msg->msg_flags & MSG_DONTROUTE) ||"
    },
    {
        "line": 124,
        "fullcodeline": "if (!ipc.oif)"
    },
    {
        "line": 126,
        "fullcodeline": "if (!saddr)"
    },
    {
        "line": 140,
        "fullcodeline": "inet_sk_flowi_flags(sk)|FLOWI_FLAG_CAN_SLEEP,"
    },
    {
        "line": 145,
        "fullcodeline": "if (IS_ERR(rt)) {"
    },
    {
        "line": 175,
        "fullcodeline": "if (skb && !IS_ERR(skb))"
    },
    {
        "line": 204,
        "fullcodeline": "corkreq ? msg->msg_flags|MSG_MORE : msg->msg_flags);"
    },
    {
        "line": 70,
        "fullcodeline": "if (sk->sk_state != TCP_ESTABLISHED)"
    },
    {
        "line": 101,
        "fullcodeline": "ipc.opt = &opt_copy.opt;"
    },
    {
        "line": 125,
        "fullcodeline": "ipc.oif = inet->mc_index;"
    },
    {
        "line": 127,
        "fullcodeline": "saddr = inet->mc_addr;"
    },
    {
        "line": 146,
        "fullcodeline": "err = PTR_ERR(rt);"
    },
    {
        "line": 147,
        "fullcodeline": "rt = NULL;"
    },
    {
        "line": 154,
        "fullcodeline": "if ((rt->rt_flags & RTCF_BROADCAST) &&"
    },
    {
        "line": 155,
        "fullcodeline": "!sock_flag(sk, SOCK_BROADCAST))"
    },
    {
        "line": 158,
        "fullcodeline": "sk_dst_set(sk, dst_clone(&rt->dst));"
    },
    {
        "line": 176,
        "fullcodeline": "err = udp_send_skb(skb, daddr, dport);"
    },
    {
        "line": 59,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 61,
        "fullcodeline": "if (usin->sin_family != AF_UNSPEC)"
    },
    {
        "line": 68,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 111,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 148,
        "fullcodeline": "if (err == -ENETUNREACH)"
    },
    {
        "line": 208,
        "fullcodeline": "err = udp_push_pending_frames(sk);"
    },
    {
        "line": 43,
        "fullcodeline": "if (unlikely(up->pending != AF_INET)) {"
    },
    {
        "line": 71,
        "fullcodeline": "return -EDESTADDRREQ;"
    },
    {
        "line": 149,
        "fullcodeline": "IP_INC_STATS_BH(net, IPSTATS_MIB_OUTNOROUTES);"
    },
    {
        "line": 45,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 62,
        "fullcodeline": "return -EAFNOSUPPORT;"
    },
    {
        "line": 209,
        "fullcodeline": "else if (unlikely(skb_queue_empty(&sk->sk_write_queue)))"
    }
]