[
    {
        "line": 4,
        "fullcodeline": "struct inet_sock *inet = inet_sk(sk);"
    },
    {
        "line": 6,
        "fullcodeline": "struct rtable *rt = NULL;"
    },
    {
        "line": 7,
        "fullcodeline": "int free = 0;"
    },
    {
        "line": 13,
        "fullcodeline": "err = -EMSGSIZE;"
    },
    {
        "line": 21,
        "fullcodeline": "err = -EOPNOTSUPP;"
    },
    {
        "line": 56,
        "fullcodeline": "ipc.addr = inet->inet_saddr;"
    },
    {
        "line": 57,
        "fullcodeline": "ipc.opt = NULL;"
    },
    {
        "line": 58,
        "fullcodeline": "ipc.tx_flags = 0;"
    },
    {
        "line": 59,
        "fullcodeline": "ipc.oif = sk->sk_bound_dev_if;"
    },
    {
        "line": 69,
        "fullcodeline": "saddr = ipc.addr;"
    },
    {
        "line": 70,
        "fullcodeline": "ipc.addr = daddr;"
    },
    {
        "line": 88,
        "fullcodeline": "tos = RT_CONN_FLAGS(sk);"
    },
    {
        "line": 122,
        "fullcodeline": "err = -EACCES;"
    },
    {
        "line": 152,
        "fullcodeline": "ip_rt_put(rt);"
    },
    {
        "line": 160,
        "fullcodeline": "dst_confirm(&rt->dst);"
    },
    {
        "line": 163,
        "fullcodeline": "err = 0;"
    },
    {
        "line": 14,
        "fullcodeline": "if (len > 0xFFFF)"
    },
    {
        "line": 22,
        "fullcodeline": "if (msg->msg_flags & MSG_OOB)\t/* Mirror BSD error message */"
    },
    {
        "line": 72,
        "fullcodeline": "if (!ipc.opt)"
    },
    {
        "line": 89,
        "fullcodeline": "if (msg->msg_flags & MSG_DONTROUTE)"
    },
    {
        "line": 92,
        "fullcodeline": "if (ipv4_is_multicast(daddr)) {"
    },
    {
        "line": 102,
        "fullcodeline": "flowi4_init_output(&fl4, ipc.oif, sk->sk_mark, tos,"
    },
    {
        "line": 113,
        "fullcodeline": "security_sk_classify_flow(sk, flowi4_to_flowi(&fl4));"
    },
    {
        "line": 114,
        "fullcodeline": "rt = ip_route_output_flow(sock_net(sk), &fl4, sk);"
    },
    {
        "line": 123,
        "fullcodeline": "if (rt->rt_flags & RTCF_BROADCAST && !sock_flag(sk, SOCK_BROADCAST))"
    },
    {
        "line": 126,
        "fullcodeline": "if (msg->msg_flags & MSG_CONFIRM)"
    },
    {
        "line": 155,
        "fullcodeline": "if (err < 0)"
    },
    {
        "line": 161,
        "fullcodeline": "if (!(msg->msg_flags & MSG_PROBE) || len)"
    },
    {
        "line": 30,
        "fullcodeline": "struct sockaddr_in *usin = (struct sockaddr_in *)msg->msg_name;"
    },
    {
        "line": 31,
        "fullcodeline": "err = -EINVAL;"
    },
    {
        "line": 62,
        "fullcodeline": "err = ip_cmsg_send(sock_net(sk), msg, &ipc);"
    },
    {
        "line": 73,
        "fullcodeline": "ipc.opt = inet->opt;"
    },
    {
        "line": 76,
        "fullcodeline": "err = -EINVAL;"
    },
    {
        "line": 90,
        "fullcodeline": "tos |= RTO_ONLINK;"
    },
    {
        "line": 104,
        "fullcodeline": "inet->hdrincl ? IPPROTO_RAW : sk->sk_protocol,"
    },
    {
        "line": 107,
        "fullcodeline": "if (!inet->hdrincl) {"
    },
    {
        "line": 115,
        "fullcodeline": "if (IS_ERR(rt)) {"
    },
    {
        "line": 131,
        "fullcodeline": "err = raw_send_hdrinc(sk, msg->msg_iov, len,"
    },
    {
        "line": 151,
        "fullcodeline": "kfree(ipc.opt);"
    },
    {
        "line": 32,
        "fullcodeline": "if (msg->msg_namelen < sizeof(*usin))"
    },
    {
        "line": 34,
        "fullcodeline": "if (usin->sin_family != AF_INET) {"
    },
    {
        "line": 50,
        "fullcodeline": "err = -EDESTADDRREQ;"
    },
    {
        "line": 53,
        "fullcodeline": "daddr = inet->inet_daddr;"
    },
    {
        "line": 93,
        "fullcodeline": "if (!ipc.oif)"
    },
    {
        "line": 95,
        "fullcodeline": "if (!saddr)"
    },
    {
        "line": 108,
        "fullcodeline": "err = raw_probe_proto_opt(&fl4, msg);"
    },
    {
        "line": 116,
        "fullcodeline": "err = PTR_ERR(rt);"
    },
    {
        "line": 117,
        "fullcodeline": "rt = NULL;"
    },
    {
        "line": 137,
        "fullcodeline": "lock_sock(sk);"
    },
    {
        "line": 138,
        "fullcodeline": "err = ip_append_data(sk, ip_generic_getfrag, msg->msg_iov, len, 0,"
    },
    {
        "line": 147,
        "fullcodeline": "release_sock(sk);"
    },
    {
        "line": 40,
        "fullcodeline": "err = -EAFNOSUPPORT;"
    },
    {
        "line": 51,
        "fullcodeline": "if (sk->sk_state != TCP_ESTABLISHED)"
    },
    {
        "line": 66,
        "fullcodeline": "free = 1;"
    },
    {
        "line": 94,
        "fullcodeline": "ipc.oif = inet->mc_index;"
    },
    {
        "line": 96,
        "fullcodeline": "saddr = inet->mc_addr;"
    },
    {
        "line": 135,
        "fullcodeline": "if (!ipc.addr)"
    },
    {
        "line": 83,
        "fullcodeline": "if (!daddr)"
    },
    {
        "line": 136,
        "fullcodeline": "ipc.addr = rt->rt_dst;"
    },
    {
        "line": 141,
        "fullcodeline": "ip_flush_pending_frames(sk);"
    },
    {
        "line": 142,
        "fullcodeline": "else if (!(msg->msg_flags & MSG_MORE)) {"
    },
    {
        "line": 143,
        "fullcodeline": "err = ip_push_pending_frames(sk);"
    },
    {
        "line": 144,
        "fullcodeline": "if (err == -ENOBUFS && !inet->recverr)"
    },
    {
        "line": 145,
        "fullcodeline": "err = 0;"
    }
]