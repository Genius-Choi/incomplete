[
    {
        "line": 4,
        "fullcodeline": "struct inet_sock *inet = inet_sk(sk);"
    },
    {
        "line": 11,
        "fullcodeline": "opt = ipc->opt;"
    },
    {
        "line": 29,
        "fullcodeline": "*rtp = NULL;"
    },
    {
        "line": 30,
        "fullcodeline": "cork->fragsize = inet->pmtudisc == IP_PMTUDISC_PROBE ?"
    },
    {
        "line": 32,
        "fullcodeline": "cork->dst = &rt->dst;"
    },
    {
        "line": 33,
        "fullcodeline": "cork->length = 0;"
    },
    {
        "line": 34,
        "fullcodeline": "cork->tx_flags = ipc->tx_flags;"
    },
    {
        "line": 35,
        "fullcodeline": "cork->page = NULL;"
    },
    {
        "line": 36,
        "fullcodeline": "cork->off = 0;"
    },
    {
        "line": 24,
        "fullcodeline": "if (unlikely(!rt))"
    },
    {
        "line": 19,
        "fullcodeline": "memcpy(cork->opt, opt, sizeof(struct ip_options) + opt->optlen);"
    },
    {
        "line": 20,
        "fullcodeline": "cork->flags |= IPCORK_OPT;"
    },
    {
        "line": 21,
        "fullcodeline": "cork->addr = ipc->addr;"
    },
    {
        "line": 13,
        "fullcodeline": "if (cork->opt == NULL) {"
    },
    {
        "line": 25,
        "fullcodeline": "return -EFAULT;"
    },
    {
        "line": 14,
        "fullcodeline": "cork->opt = kmalloc(sizeof(struct ip_options) + 40,"
    },
    {
        "line": 16,
        "fullcodeline": "if (unlikely(cork->opt == NULL))"
    },
    {
        "line": 17,
        "fullcodeline": "return -ENOBUFS;"
    }
]