[
    {
        "line": 3,
        "fullcodeline": "struct inet_sock *inet = inet_sk(sk);"
    },
    {
        "line": 4,
        "fullcodeline": "struct rtable *rt = (struct rtable *)__sk_dst_check(sk, 0);"
    },
    {
        "line": 13,
        "fullcodeline": "daddr = inet->inet_daddr;"
    },
    {
        "line": 16,
        "fullcodeline": "rt = ip_route_output_ports(sock_net(sk), sk, daddr, inet->inet_saddr,"
    },
    {
        "line": 14,
        "fullcodeline": "if (inet->opt && inet->opt->srr)"
    },
    {
        "line": 20,
        "fullcodeline": "if (!IS_ERR(rt)) {"
    },
    {
        "line": 18,
        "fullcodeline": "sk->sk_protocol, RT_CONN_FLAGS(sk),"
    },
    {
        "line": 21,
        "fullcodeline": "err = 0;"
    },
    {
        "line": 22,
        "fullcodeline": "sk_setup_caps(sk, &rt->dst);"
    },
    {
        "line": 24,
        "fullcodeline": "err = PTR_ERR(rt);"
    },
    {
        "line": 27,
        "fullcodeline": "sk->sk_route_caps = 0;"
    },
    {
        "line": 32,
        "fullcodeline": "if (!sysctl_ip_dynaddr ||"
    },
    {
        "line": 35,
        "fullcodeline": "(err = inet_sk_reselect_saddr(sk)) != 0)"
    },
    {
        "line": 36,
        "fullcodeline": "sk->sk_err_soft = -err;"
    },
    {
        "line": 34,
        "fullcodeline": "(sk->sk_userlocks & SOCK_BINDADDR_LOCK) ||"
    },
    {
        "line": 33,
        "fullcodeline": "sk->sk_state != TCP_SYN_SENT ||"
    }
]