[
    {
        "line": 5,
        "fullcodeline": "struct l2tp_ip_sock *lsa = l2tp_ip_sk(sk);"
    },
    {
        "line": 6,
        "fullcodeline": "struct inet_sock *inet = inet_sk(sk);"
    },
    {
        "line": 7,
        "fullcodeline": "struct ip_options *opt = inet->opt;"
    },
    {
        "line": 8,
        "fullcodeline": "struct rtable *rt = NULL;"
    },
    {
        "line": 9,
        "fullcodeline": "int connected = 0;"
    },
    {
        "line": 36,
        "fullcodeline": "rc = -ENOMEM;"
    },
    {
        "line": 37,
        "fullcodeline": "skb = sock_wmalloc(sk, 2 + NET_SKB_PAD + sizeof(struct iphdr) +"
    },
    {
        "line": 43,
        "fullcodeline": "skb_reserve(skb, 2 + NET_SKB_PAD);"
    },
    {
        "line": 44,
        "fullcodeline": "skb_reset_network_header(skb);"
    },
    {
        "line": 45,
        "fullcodeline": "skb_reserve(skb, sizeof(struct iphdr));"
    },
    {
        "line": 46,
        "fullcodeline": "skb_reset_transport_header(skb);"
    },
    {
        "line": 52,
        "fullcodeline": "rc = memcpy_fromiovec(skb_put(skb, len), msg->msg_iov, len);"
    },
    {
        "line": 79,
        "fullcodeline": "skb_dst_set(skb, dst_clone(&rt->dst));"
    },
    {
        "line": 82,
        "fullcodeline": "rc = ip_queue_xmit(skb);"
    },
    {
        "line": 97,
        "fullcodeline": "IP_INC_STATS(sock_net(sk), IPSTATS_MIB_OUTNOROUTES);"
    },
    {
        "line": 12,
        "fullcodeline": "if (sock_flag(sk, SOCK_DEAD))"
    },
    {
        "line": 39,
        "fullcodeline": "if (!skb)"
    },
    {
        "line": 53,
        "fullcodeline": "if (rc < 0) {"
    },
    {
        "line": 61,
        "fullcodeline": "if (rt == NULL) {"
    },
    {
        "line": 86,
        "fullcodeline": "if (rc >= 0) {"
    },
    {
        "line": 99,
        "fullcodeline": "return -EHOSTUNREACH;"
    },
    {
        "line": 17,
        "fullcodeline": "struct sockaddr_l2tpip *lip = (struct sockaddr_l2tpip *) msg->msg_name;"
    },
    {
        "line": 26,
        "fullcodeline": "daddr = lip->l2tp_addr.s_addr;"
    },
    {
        "line": 59,
        "fullcodeline": "rt = (struct rtable *) __sk_dst_check(sk, 0);"
    },
    {
        "line": 70,
        "fullcodeline": "rt = ip_route_output_ports(sock_net(sk), sk,"
    },
    {
        "line": 77,
        "fullcodeline": "sk_setup_caps(sk, &rt->dst);"
    },
    {
        "line": 89,
        "fullcodeline": "rc = len;"
    },
    {
        "line": 13,
        "fullcodeline": "return -ENOTCONN;"
    },
    {
        "line": 21,
        "fullcodeline": "if (lip->l2tp_family != AF_INET) {"
    },
    {
        "line": 31,
        "fullcodeline": "daddr = inet->inet_daddr;"
    },
    {
        "line": 49,
        "fullcodeline": "*((__be32 *) skb_put(skb, 4)) = 0;"
    },
    {
        "line": 63,
        "fullcodeline": "if (opt && opt->srr)"
    },
    {
        "line": 75,
        "fullcodeline": "if (IS_ERR(rt))"
    },
    {
        "line": 28,
        "fullcodeline": "if (sk->sk_state != TCP_ESTABLISHED)"
    },
    {
        "line": 64,
        "fullcodeline": "daddr = opt->faddr;"
    },
    {
        "line": 73,
        "fullcodeline": "sk->sk_protocol, RT_CONN_FLAGS(sk),"
    },
    {
        "line": 19,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 22,
        "fullcodeline": "if (lip->l2tp_family != AF_UNSPEC)"
    },
    {
        "line": 29,
        "fullcodeline": "return -EDESTADDRREQ;"
    },
    {
        "line": 23,
        "fullcodeline": "return -EAFNOSUPPORT;"
    }
]