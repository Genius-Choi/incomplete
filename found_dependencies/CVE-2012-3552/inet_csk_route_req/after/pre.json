[
    {
        "line": 5,
        "fullcodeline": "const struct inet_request_sock *ireq = inet_rsk(req);"
    },
    {
        "line": 6,
        "fullcodeline": "struct ip_options_rcu *opt = inet_rsk(req)->opt;"
    },
    {
        "line": 7,
        "fullcodeline": "struct net *net = sock_net(sk);"
    },
    {
        "line": 10,
        "fullcodeline": "flowi4_init_output(&fl4, sk->sk_bound_dev_if, sk->sk_mark,"
    },
    {
        "line": 15,
        "fullcodeline": "security_req_classify_flow(req, flowi4_to_flowi(&fl4));"
    },
    {
        "line": 16,
        "fullcodeline": "rt = ip_route_output_flow(net, &fl4, sk);"
    },
    {
        "line": 26,
        "fullcodeline": "IP_INC_STATS_BH(net, IPSTATS_MIB_OUTNOROUTES);"
    },
    {
        "line": 11,
        "fullcodeline": "RT_CONN_FLAGS(sk), RT_SCOPE_UNIVERSE,"
    },
    {
        "line": 12,
        "fullcodeline": "sk->sk_protocol, inet_sk_flowi_flags(sk),"
    },
    {
        "line": 13,
        "fullcodeline": "(opt && opt->opt.srr) ? opt->opt.faddr : ireq->rmt_addr,"
    },
    {
        "line": 17,
        "fullcodeline": "if (IS_ERR(rt))"
    },
    {
        "line": 19,
        "fullcodeline": "if (opt && opt->opt.is_strictroute && rt->rt_dst != rt->rt_gateway)"
    },
    {
        "line": 14,
        "fullcodeline": "ireq->loc_addr, ireq->rmt_port, inet_sk(sk)->inet_sport);"
    }
]