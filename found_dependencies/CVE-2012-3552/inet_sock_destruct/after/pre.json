[
    {
        "line": 3,
        "fullcodeline": "struct inet_sock *inet = inet_sk(sk);"
    },
    {
        "line": 5,
        "fullcodeline": "__skb_queue_purge(&sk->sk_receive_queue);"
    },
    {
        "line": 6,
        "fullcodeline": "__skb_queue_purge(&sk->sk_error_queue);"
    },
    {
        "line": 8,
        "fullcodeline": "sk_mem_reclaim(sk);"
    },
    {
        "line": 22,
        "fullcodeline": "WARN_ON(sk->sk_wmem_queued);"
    },
    {
        "line": 23,
        "fullcodeline": "WARN_ON(sk->sk_forward_alloc);"
    },
    {
        "line": 10,
        "fullcodeline": "if (sk->sk_type == SOCK_STREAM && sk->sk_state != TCP_CLOSE) {"
    },
    {
        "line": 20,
        "fullcodeline": "WARN_ON(atomic_read(&sk->sk_rmem_alloc));"
    },
    {
        "line": 21,
        "fullcodeline": "WARN_ON(atomic_read(&sk->sk_wmem_alloc));"
    },
    {
        "line": 25,
        "fullcodeline": "kfree(rcu_dereference_protected(inet->inet_opt, 1));"
    },
    {
        "line": 26,
        "fullcodeline": "dst_release(rcu_dereference_check(sk->sk_dst_cache, 1));"
    },
    {
        "line": 11,
        "fullcodeline": "pr_err(\"Attempt to release TCP socket in state %d %p\\n\","
    },
    {
        "line": 15,
        "fullcodeline": "if (!sock_flag(sk, SOCK_DEAD)) {"
    }
]