[
    {
        "line": 3,
        "fullcodeline": "struct sock *sk = skb->sk;"
    },
    {
        "line": 4,
        "fullcodeline": "struct inet_sock *inet = inet_sk(sk);"
    },
    {
        "line": 5,
        "fullcodeline": "struct ip_options *opt = inet->opt;"
    },
    {
        "line": 13,
        "fullcodeline": "rcu_read_lock();"
    },
    {
        "line": 14,
        "fullcodeline": "rt = skb_rtable(skb);"
    },
    {
        "line": 19,
        "fullcodeline": "rt = (struct rtable *)__sk_dst_check(sk, 0);"
    },
    {
        "line": 43,
        "fullcodeline": "skb_dst_set_noref(skb, &rt->dst);"
    },
    {
        "line": 50,
        "fullcodeline": "skb_push(skb, sizeof(struct iphdr) + (opt ? opt->optlen : 0));"
    },
    {
        "line": 51,
        "fullcodeline": "skb_reset_network_header(skb);"
    },
    {
        "line": 52,
        "fullcodeline": "iph = ip_hdr(skb);"
    },
    {
        "line": 53,
        "fullcodeline": "*((__be16 *)iph) = htons((4 << 12) | (5 << 8) | (inet->tos & 0xff));"
    },
    {
        "line": 58,
        "fullcodeline": "iph->ttl      = ip_select_ttl(inet, &rt->dst);"
    },
    {
        "line": 59,
        "fullcodeline": "iph->protocol = sk->sk_protocol;"
    },
    {
        "line": 60,
        "fullcodeline": "iph->saddr    = rt->rt_src;"
    },
    {
        "line": 61,
        "fullcodeline": "iph->daddr    = rt->rt_dst;"
    },
    {
        "line": 69,
        "fullcodeline": "ip_select_ident_more(iph, &rt->dst, sk,"
    },
    {
        "line": 72,
        "fullcodeline": "skb->priority = sk->sk_priority;"
    },
    {
        "line": 73,
        "fullcodeline": "skb->mark = sk->sk_mark;"
    },
    {
        "line": 75,
        "fullcodeline": "res = ip_local_out(skb);"
    },
    {
        "line": 76,
        "fullcodeline": "rcu_read_unlock();"
    },
    {
        "line": 81,
        "fullcodeline": "IP_INC_STATS(sock_net(sk), IPSTATS_MIB_OUTNOROUTES);"
    },
    {
        "line": 15,
        "fullcodeline": "if (rt != NULL)"
    },
    {
        "line": 20,
        "fullcodeline": "if (rt == NULL) {"
    },
    {
        "line": 46,
        "fullcodeline": "if (opt && opt->is_strictroute && rt->rt_dst != rt->rt_gateway)"
    },
    {
        "line": 54,
        "fullcodeline": "if (ip_dont_fragment(sk, &rt->dst) && !skb->local_df)"
    },
    {
        "line": 64,
        "fullcodeline": "if (opt && opt->optlen) {"
    },
    {
        "line": 70,
        "fullcodeline": "(skb_shinfo(skb)->gso_segs ?: 1) - 1);"
    },
    {
        "line": 83,
        "fullcodeline": "return -EHOSTUNREACH;"
    },
    {
        "line": 24,
        "fullcodeline": "daddr = inet->inet_daddr;"
    },
    {
        "line": 32,
        "fullcodeline": "rt = ip_route_output_ports(sock_net(sk), sk,"
    },
    {
        "line": 41,
        "fullcodeline": "sk_setup_caps(sk, &rt->dst);"
    },
    {
        "line": 55,
        "fullcodeline": "iph->frag_off = htons(IP_DF);"
    },
    {
        "line": 65,
        "fullcodeline": "iph->ihl += opt->optlen >> 2;"
    },
    {
        "line": 66,
        "fullcodeline": "ip_options_build(skb, opt, inet->inet_daddr, rt, 0);"
    },
    {
        "line": 25,
        "fullcodeline": "if(opt && opt->srr)"
    },
    {
        "line": 39,
        "fullcodeline": "if (IS_ERR(rt))"
    },
    {
        "line": 57,
        "fullcodeline": "iph->frag_off = 0;"
    },
    {
        "line": 26,
        "fullcodeline": "daddr = opt->faddr;"
    },
    {
        "line": 37,
        "fullcodeline": "RT_CONN_FLAGS(sk),"
    }
]