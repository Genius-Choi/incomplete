[
    {
        "line": 5,
        "fullcodeline": "static int num_seen=0;"
    },
    {
        "line": 7,
        "fullcodeline": "unsigned domain = layer_hint?LD_APP:LD_EXIT;"
    },
    {
        "line": 9,
        "fullcodeline": "int optimistic_data = 0; /* Set to 1 if we receive data on a stream"
    },
    {
        "line": 13,
        "fullcodeline": "tor_assert(cell);"
    },
    {
        "line": 14,
        "fullcodeline": "tor_assert(circ);"
    },
    {
        "line": 16,
        "fullcodeline": "relay_header_unpack(&rh, cell->payload);"
    },
    {
        "line": 18,
        "fullcodeline": "num_seen++;"
    },
    {
        "line": 19,
        "fullcodeline": "log_debug(domain, \"Now seen %d relay cells here (command %d, stream %d).\","
    },
    {
        "line": 22,
        "fullcodeline": "if (rh.length > RELAY_PAYLOAD_SIZE) {"
    },
    {
        "line": 28,
        "fullcodeline": "if (rh.stream_id == 0) {"
    },
    {
        "line": 48,
        "fullcodeline": "if (conn && !connection_state_is_open(TO_CONN(conn))) {"
    },
    {
        "line": 23,
        "fullcodeline": "log_fn(LOG_PROTOCOL_WARN, LD_PROTOCOL,"
    },
    {
        "line": 99,
        "fullcodeline": "++stats_n_data_cells_received;"
    },
    {
        "line": 112,
        "fullcodeline": "log_debug(domain,\"circ deliver_window now %d.\", layer_hint ?"
    },
    {
        "line": 129,
        "fullcodeline": "stats_n_data_bytes_received += rh.length;"
    },
    {
        "line": 142,
        "fullcodeline": "reason = rh.length > 0 ?"
    },
    {
        "line": 163,
        "fullcodeline": "conn->edge_has_sent_end = 1;"
    },
    {
        "line": 214,
        "fullcodeline": "log_debug(domain,\"Got an extended cell! Yay.\");"
    },
    {
        "line": 318,
        "fullcodeline": "conn->package_window += STREAMWINDOW_INCREMENT;"
    },
    {
        "line": 319,
        "fullcodeline": "log_debug(domain,\"stream-level sendme, packagewindow now %d.\","
    },
    {
        "line": 25,
        "fullcodeline": "return - END_CIRC_REASON_TORPROTOCOL;"
    },
    {
        "line": 69,
        "fullcodeline": "if (layer_hint &&"
    },
    {
        "line": 87,
        "fullcodeline": "if (rh.command == RELAY_COMMAND_BEGIN_DIR) {"
    },
    {
        "line": 97,
        "fullcodeline": "return connection_exit_begin_conn(cell, circ);"
    },
    {
        "line": 117,
        "fullcodeline": "if (!conn) {"
    },
    {
        "line": 131,
        "fullcodeline": "rh.length, TO_CONN(conn));"
    },
    {
        "line": 144,
        "fullcodeline": "if (!conn) {"
    },
    {
        "line": 155,
        "fullcodeline": "if (conn->base_.type == CONN_TYPE_AP) {"
    },
    {
        "line": 164,
        "fullcodeline": "if (!conn->end_reason)"
    },
    {
        "line": 174,
        "fullcodeline": "static uint64_t total_n_extend=0, total_nonearly=0;"
    },
    {
        "line": 175,
        "fullcodeline": "total_n_extend++;"
    },
    {
        "line": 259,
        "fullcodeline": "payload[0] = (char)END_CIRC_REASON_REQUESTED;"
    },
    {
        "line": 260,
        "fullcodeline": "relay_send_command_from_edge(0, circ, RELAY_COMMAND_TRUNCATED,"
    },
    {
        "line": 265,
        "fullcodeline": "if (!layer_hint) {"
    },
    {
        "line": 270,
        "fullcodeline": "circuit_truncated(TO_ORIGIN_CIRCUIT(circ), layer_hint,"
    },
    {
        "line": 271,
        "fullcodeline": "get_uint8(cell->payload + RELAY_HEADER_SIZE));"
    },
    {
        "line": 283,
        "fullcodeline": "if (!rh.stream_id) {"
    },
    {
        "line": 313,
        "fullcodeline": "if (!conn) {"
    },
    {
        "line": 325,
        "fullcodeline": "connection_start_reading(TO_CONN(conn));"
    },
    {
        "line": 348,
        "fullcodeline": "connection_exit_begin_resolve(cell, TO_OR_CIRCUIT(circ));"
    },
    {
        "line": 49,
        "fullcodeline": "if (conn->base_.type == CONN_TYPE_EXIT &&"
    },
    {
        "line": 52,
        "fullcodeline": "rh.command == RELAY_COMMAND_DATA) {"
    },
    {
        "line": 56,
        "fullcodeline": "optimistic_data = 1;"
    },
    {
        "line": 70,
        "fullcodeline": "circ->purpose != CIRCUIT_PURPOSE_S_REND_JOINED) {"
    },
    {
        "line": 75,
        "fullcodeline": "if (circ->purpose == CIRCUIT_PURPOSE_S_REND_JOINED &&"
    },
    {
        "line": 76,
        "fullcodeline": "layer_hint != TO_ORIGIN_CIRCUIT(circ)->cpath->prev) {"
    },
    {
        "line": 92,
        "fullcodeline": "static uint64_t next_id = 0;"
    },
    {
        "line": 93,
        "fullcodeline": "circ->dirreq_id = ++next_id;"
    },
    {
        "line": 100,
        "fullcodeline": "if (( layer_hint && --layer_hint->deliver_window < 0) ||"
    },
    {
        "line": 101,
        "fullcodeline": "(!layer_hint && --circ->deliver_window < 0)) {"
    },
    {
        "line": 123,
        "fullcodeline": "if (--conn->deliver_window < 0) { /* is it below 0 after decrement? */"
    },
    {
        "line": 143,
        "fullcodeline": "get_uint8(cell->payload+RELAY_HEADER_SIZE) : END_STREAM_REASON_MISC;"
    },
    {
        "line": 156,
        "fullcodeline": "entry_connection_t *entry_conn = EDGE_TO_ENTRY_CONN(conn);"
    },
    {
        "line": 165,
        "fullcodeline": "conn->end_reason = reason | END_STREAM_REASON_FLAG_REMOTE;"
    },
    {
        "line": 205,
        "fullcodeline": "return circuit_extend(cell, circ);"
    },
    {
        "line": 230,
        "fullcodeline": "if ((reason=circuit_send_next_onion_skin(TO_ORIGIN_CIRCUIT(circ)))<0) {"
    },
    {
        "line": 245,
        "fullcodeline": "circ->n_hop = NULL;"
    },
    {
        "line": 246,
        "fullcodeline": "tor_free(circ->n_chan_create_cell);"
    },
    {
        "line": 247,
        "fullcodeline": "circuit_set_state(circ, CIRCUIT_STATE_OPEN);"
    },
    {
        "line": 250,
        "fullcodeline": "uint8_t trunc_reason = get_uint8(cell->payload + RELAY_HEADER_SIZE);"
    },
    {
        "line": 251,
        "fullcodeline": "circuit_clear_cell_queue(circ, circ->n_chan);"
    },
    {
        "line": 252,
        "fullcodeline": "channel_send_destroy(circ->n_circ_id, circ->n_chan,"
    },
    {
        "line": 254,
        "fullcodeline": "circuit_set_n_circid_chan(circ, 0, NULL);"
    },
    {
        "line": 258,
        "fullcodeline": "char payload[1];"
    },
    {
        "line": 327,
        "fullcodeline": "if (connection_edge_package_raw_inbuf(conn, 1, NULL) < 0) {"
    },
    {
        "line": 50,
        "fullcodeline": "(conn->base_.state == EXIT_CONN_STATE_CONNECTING ||"
    },
    {
        "line": 110,
        "fullcodeline": "return -END_CIRC_REASON_TORPROTOCOL;"
    },
    {
        "line": 126,
        "fullcodeline": "return -END_CIRC_REASON_TORPROTOCOL;"
    },
    {
        "line": 146,
        "fullcodeline": "stream_end_reason_to_string(reason));"
    },
    {
        "line": 169,
        "fullcodeline": "connection_mark_and_flush(TO_CONN(conn));"
    },
    {
        "line": 181,
        "fullcodeline": "if (cell->command != CELL_RELAY_EARLY &&"
    },
    {
        "line": 182,
        "fullcodeline": "!networkstatus_get_param(NULL,\"AllowNonearlyExtend\",0,0,1)) {"
    },
    {
        "line": 184,
        "fullcodeline": "static ratelim_t early_warning_limit ="
    },
    {
        "line": 217,
        "fullcodeline": "if (extended_cell_parse(&extended_cell, rh.command,"
    },
    {
        "line": 224,
        "fullcodeline": "if ((reason = circuit_finish_handshake(TO_ORIGIN_CIRCUIT(circ),"
    },
    {
        "line": 277,
        "fullcodeline": "return -END_CIRC_REASON_TORPROTOCOL;"
    },
    {
        "line": 329,
        "fullcodeline": "connection_mark_for_close(TO_CONN(conn));"
    },
    {
        "line": 354,
        "fullcodeline": "return -END_CIRC_REASON_TORPROTOCOL;"
    },
    {
        "line": 51,
        "fullcodeline": "conn->base_.state == EXIT_CONN_STATE_RESOLVING) &&"
    },
    {
        "line": 58,
        "fullcodeline": "return connection_edge_process_relay_cell_not_open("
    },
    {
        "line": 107,
        "fullcodeline": "connection_edge_end(conn, END_STREAM_REASON_TORPROTOCOL);"
    },
    {
        "line": 158,
        "fullcodeline": "!entry_conn->socks_request->has_finished)"
    },
    {
        "line": 185,
        "fullcodeline": "RATELIM_INIT(EARLY_WARNING_INTERVAL);"
    },
    {
        "line": 187,
        "fullcodeline": "if (cell->command == CELL_RELAY) {"
    },
    {
        "line": 222,
        "fullcodeline": "return -END_CIRC_REASON_TORPROTOCOL;"
    },
    {
        "line": 292,
        "fullcodeline": "layer_hint->package_window += CIRCWINDOW_INCREMENT;"
    },
    {
        "line": 293,
        "fullcodeline": "log_debug(LD_APP,\"circ-level sendme at origin, packagewindow %d.\","
    },
    {
        "line": 94,
        "fullcodeline": "TO_OR_CIRCUIT(circ)->p_chan->dirreq_id = circ->dirreq_id;"
    },
    {
        "line": 108,
        "fullcodeline": "connection_mark_for_close(TO_CONN(conn));"
    },
    {
        "line": 188,
        "fullcodeline": "++total_nonearly;"
    },
    {
        "line": 305,
        "fullcodeline": "circ->package_window += CIRCWINDOW_INCREMENT;"
    },
    {
        "line": 306,
        "fullcodeline": "log_debug(LD_APP,"
    },
    {
        "line": 189,
        "fullcodeline": "if ((m = rate_limit_log(&early_warning_limit, approx_time()))) {"
    },
    {
        "line": 199,
        "fullcodeline": "log_fn(LOG_WARN, domain,"
    },
    {
        "line": 190,
        "fullcodeline": "double percentage = ((double)total_nonearly)/total_n_extend;"
    },
    {
        "line": 191,
        "fullcodeline": "percentage *= 100;"
    },
    {
        "line": 192,
        "fullcodeline": "log_fn(LOG_PROTOCOL_WARN, domain, \"EXTEND cell received, \""
    },
    {
        "line": 290,
        "fullcodeline": "return -END_CIRC_REASON_TORPROTOCOL;"
    },
    {
        "line": 342,
        "fullcodeline": "} else if (circ->purpose != CIRCUIT_PURPOSE_OR) {"
    },
    {
        "line": 303,
        "fullcodeline": "return -END_CIRC_REASON_TORPROTOCOL;"
    }
]