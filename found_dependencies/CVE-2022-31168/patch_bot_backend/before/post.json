[
    {
        "line": 22,
        "fullcodeline": "bot = access_bot_by_id(user_profile, bot_id)"
    },
    {
        "line": 85,
        "fullcodeline": "json_result = dict("
    },
    {
        "line": 24,
        "fullcodeline": "if full_name is not None:"
    },
    {
        "line": 27,
        "fullcodeline": "if role is not None and bot.role != role:"
    },
    {
        "line": 34,
        "fullcodeline": "if bot_owner_id is not None:"
    },
    {
        "line": 48,
        "fullcodeline": "if default_sending_stream is not None:"
    },
    {
        "line": 54,
        "fullcodeline": "if default_events_register_stream is not None:"
    },
    {
        "line": 60,
        "fullcodeline": "if default_all_public_streams is not None:"
    },
    {
        "line": 65,
        "fullcodeline": "if service_payload_url is not None:"
    },
    {
        "line": 70,
        "fullcodeline": "if config_data is not None:"
    },
    {
        "line": 73,
        "fullcodeline": "if len(request.FILES) == 0:"
    },
    {
        "line": 98,
        "fullcodeline": "if bot.bot_owner is not None:"
    },
    {
        "line": 101,
        "fullcodeline": "return json_success(request, data=json_result)"
    },
    {
        "line": 25,
        "fullcodeline": "check_change_bot_full_name(bot, full_name, user_profile)"
    },
    {
        "line": 32,
        "fullcodeline": "do_change_user_role(bot, role, acting_user=user_profile)"
    },
    {
        "line": 44,
        "fullcodeline": "previous_owner = bot.bot_owner"
    },
    {
        "line": 53,
        "fullcodeline": "do_change_default_sending_stream(bot, stream, acting_user=user_profile)"
    },
    {
        "line": 59,
        "fullcodeline": "do_change_default_events_register_stream(bot, stream, acting_user=user_profile)"
    },
    {
        "line": 61,
        "fullcodeline": "do_change_default_all_public_streams("
    },
    {
        "line": 66,
        "fullcodeline": "check_valid_interface_type(service_interface)"
    },
    {
        "line": 67,
        "fullcodeline": "assert service_interface is not None"
    },
    {
        "line": 68,
        "fullcodeline": "do_update_outgoing_webhook_service(bot, service_interface, service_payload_url)"
    },
    {
        "line": 71,
        "fullcodeline": "do_update_bot_config_data(bot, config_data)"
    },
    {
        "line": 74,
        "fullcodeline": "pass"
    },
    {
        "line": 87,
        "fullcodeline": "avatar_url=avatar_url(bot),"
    },
    {
        "line": 91,
        "fullcodeline": "default_sending_stream=get_stream_name(bot.default_sending_stream),"
    },
    {
        "line": 92,
        "fullcodeline": "default_events_register_stream=get_stream_name(bot.default_events_register_stream),"
    },
    {
        "line": 29,
        "fullcodeline": "if UserProfile.ROLE_REALM_OWNER in [role, bot.role] and not user_profile.is_realm_owner:"
    },
    {
        "line": 39,
        "fullcodeline": "if not owner.is_active:"
    },
    {
        "line": 45,
        "fullcodeline": "if previous_owner != owner:"
    },
    {
        "line": 49,
        "fullcodeline": "if default_sending_stream == \"\":"
    },
    {
        "line": 55,
        "fullcodeline": "if default_events_register_stream == \"\":"
    },
    {
        "line": 75,
        "fullcodeline": "elif len(request.FILES) == 1:"
    },
    {
        "line": 30,
        "fullcodeline": "raise OrganizationOwnerRequired()"
    },
    {
        "line": 36,
        "fullcodeline": "owner = get_user_profile_by_id_in_realm(bot_owner_id, user_profile.realm)"
    },
    {
        "line": 40,
        "fullcodeline": "raise JsonableError(_(\"Failed to change owner, user is deactivated\"))"
    },
    {
        "line": 42,
        "fullcodeline": "raise JsonableError(_(\"Failed to change owner, bots can't own other bots\"))"
    },
    {
        "line": 46,
        "fullcodeline": "do_change_bot_owner(bot, owner, user_profile)"
    },
    {
        "line": 50,
        "fullcodeline": "stream: Optional[Stream] = None"
    },
    {
        "line": 56,
        "fullcodeline": "stream = None"
    },
    {
        "line": 77,
        "fullcodeline": "assert isinstance(user_file, UploadedFile)"
    },
    {
        "line": 78,
        "fullcodeline": "assert user_file.size is not None"
    },
    {
        "line": 79,
        "fullcodeline": "upload_avatar_image(user_file, user_profile, bot)"
    },
    {
        "line": 81,
        "fullcodeline": "do_change_avatar_fields(bot, avatar_source, acting_user=user_profile)"
    },
    {
        "line": 83,
        "fullcodeline": "raise JsonableError(_(\"You may only upload one file at a time\"))"
    },
    {
        "line": 52,
        "fullcodeline": "(stream, sub) = access_stream_by_name(user_profile, default_sending_stream)"
    },
    {
        "line": 58,
        "fullcodeline": "(stream, sub) = access_stream_by_name(user_profile, default_events_register_stream)"
    },
    {
        "line": 38,
        "fullcodeline": "raise JsonableError(_(\"Failed to change owner, no such user\"))"
    },
    {
        "line": 76,
        "fullcodeline": "user_file = list(request.FILES.values())[0]"
    }
]