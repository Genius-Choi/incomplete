[
    {
        "line": 6,
        "fullcodeline": "uECC_word_t u1[uECC_MAX_WORDS], u2[uECC_MAX_WORDS];"
    },
    {
        "line": 7,
        "fullcodeline": "uECC_word_t z[uECC_MAX_WORDS];"
    },
    {
        "line": 8,
        "fullcodeline": "uECC_word_t sum[uECC_MAX_WORDS * 2];"
    },
    {
        "line": 9,
        "fullcodeline": "uECC_word_t rx[uECC_MAX_WORDS];"
    },
    {
        "line": 10,
        "fullcodeline": "uECC_word_t ry[uECC_MAX_WORDS];"
    },
    {
        "line": 11,
        "fullcodeline": "uECC_word_t tx[uECC_MAX_WORDS];"
    },
    {
        "line": 12,
        "fullcodeline": "uECC_word_t ty[uECC_MAX_WORDS];"
    },
    {
        "line": 13,
        "fullcodeline": "uECC_word_t tz[uECC_MAX_WORDS];"
    },
    {
        "line": 14,
        "fullcodeline": "const uECC_word_t *points[4];"
    },
    {
        "line": 21,
        "fullcodeline": "uECC_word_t _public[uECC_MAX_WORDS * 2];"
    },
    {
        "line": 23,
        "fullcodeline": "uECC_word_t r[uECC_MAX_WORDS], s[uECC_MAX_WORDS];"
    },
    {
        "line": 24,
        "fullcodeline": "wordcount_t num_words = curve->num_words;"
    },
    {
        "line": 25,
        "fullcodeline": "wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);"
    },
    {
        "line": 27,
        "fullcodeline": "rx[num_n_words - 1] = 0;"
    },
    {
        "line": 28,
        "fullcodeline": "r[num_n_words - 1] = 0;"
    },
    {
        "line": 29,
        "fullcodeline": "s[num_n_words - 1] = 0;"
    },
    {
        "line": 35,
        "fullcodeline": "uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);"
    },
    {
        "line": 36,
        "fullcodeline": "uECC_vli_bytesToNative("
    },
    {
        "line": 38,
        "fullcodeline": "uECC_vli_bytesToNative(r, signature, curve->num_bytes);"
    },
    {
        "line": 39,
        "fullcodeline": "uECC_vli_bytesToNative(s, signature + curve->num_bytes, curve->num_bytes);"
    },
    {
        "line": 54,
        "fullcodeline": "uECC_vli_modInv(z, s, curve->n, num_n_words); /* z = 1/s */"
    },
    {
        "line": 55,
        "fullcodeline": "u1[num_n_words - 1] = 0;"
    },
    {
        "line": 56,
        "fullcodeline": "bits2int(u1, message_hash, hash_size, curve);"
    },
    {
        "line": 57,
        "fullcodeline": "uECC_vli_modMult(u1, u1, z, curve->n, num_n_words); /* u1 = e/s */"
    },
    {
        "line": 58,
        "fullcodeline": "uECC_vli_modMult(u2, r, z, curve->n, num_n_words); /* u2 = r/s */"
    },
    {
        "line": 61,
        "fullcodeline": "uECC_vli_set(sum, _public, num_words);"
    },
    {
        "line": 62,
        "fullcodeline": "uECC_vli_set(sum + num_words, _public + num_words, num_words);"
    },
    {
        "line": 63,
        "fullcodeline": "uECC_vli_set(tx, curve->G, num_words);"
    },
    {
        "line": 64,
        "fullcodeline": "uECC_vli_set(ty, curve->G + num_words, num_words);"
    },
    {
        "line": 65,
        "fullcodeline": "uECC_vli_modSub(z, sum, tx, curve->p, num_words); /* z = x2 - x1 */"
    },
    {
        "line": 66,
        "fullcodeline": "XYcZ_add(tx, ty, sum, sum + num_words, curve);"
    },
    {
        "line": 67,
        "fullcodeline": "uECC_vli_modInv(z, z, curve->p, num_words); /* z = 1/z */"
    },
    {
        "line": 68,
        "fullcodeline": "apply_z(sum, sum + num_words, z, curve);"
    },
    {
        "line": 75,
        "fullcodeline": "num_bits = smax(uECC_vli_numBits(u1, num_n_words),"
    },
    {
        "line": 78,
        "fullcodeline": "point = points[(!!uECC_vli_testBit(u1, num_bits - 1)) |"
    },
    {
        "line": 80,
        "fullcodeline": "uECC_vli_set(rx, point, num_words);"
    },
    {
        "line": 81,
        "fullcodeline": "uECC_vli_set(ry, point + num_words, num_words);"
    },
    {
        "line": 82,
        "fullcodeline": "uECC_vli_clear(z, num_words);"
    },
    {
        "line": 83,
        "fullcodeline": "z[0] = 1;"
    },
    {
        "line": 101,
        "fullcodeline": "uECC_vli_modInv(z, z, curve->p, num_words); /* Z = 1/Z */"
    },
    {
        "line": 102,
        "fullcodeline": "apply_z(rx, ry, z, curve);"
    },
    {
        "line": 37,
        "fullcodeline": "_public + num_words, public_key + curve->num_bytes, curve->num_bytes);"
    },
    {
        "line": 43,
        "fullcodeline": "if (uECC_vli_isZero(r, num_words) || uECC_vli_isZero(s, num_words)) {"
    },
    {
        "line": 85,
        "fullcodeline": "for (i = num_bits - 2; i >= 0; --i) {"
    },
    {
        "line": 110,
        "fullcodeline": "return (int)(uECC_vli_equal(rx, r, num_words));"
    },
    {
        "line": 48,
        "fullcodeline": "if (uECC_vli_cmp_unsafe(curve->n, r, num_n_words) != 1 ||"
    },
    {
        "line": 49,
        "fullcodeline": "uECC_vli_cmp_unsafe(curve->n, s, num_n_words) != 1) {"
    },
    {
        "line": 76,
        "fullcodeline": "uECC_vli_numBits(u2, num_n_words));"
    },
    {
        "line": 87,
        "fullcodeline": "curve->double_jacobian(rx, ry, z, curve);"
    },
    {
        "line": 90,
        "fullcodeline": "point = points[index];"
    },
    {
        "line": 105,
        "fullcodeline": "if (uECC_vli_cmp_unsafe(curve->n, rx, num_n_words) != 1) {"
    },
    {
        "line": 106,
        "fullcodeline": "uECC_vli_sub(rx, rx, curve->n, num_n_words);"
    },
    {
        "line": 79,
        "fullcodeline": "((!!uECC_vli_testBit(u2, num_bits - 1)) << 1)];"
    },
    {
        "line": 89,
        "fullcodeline": "index = (!!uECC_vli_testBit(u1, i)) | ((!!uECC_vli_testBit(u2, i)) << 1);"
    },
    {
        "line": 92,
        "fullcodeline": "uECC_vli_set(tx, point, num_words);"
    },
    {
        "line": 93,
        "fullcodeline": "uECC_vli_set(ty, point + num_words, num_words);"
    },
    {
        "line": 94,
        "fullcodeline": "apply_z(tx, ty, z, curve);"
    },
    {
        "line": 95,
        "fullcodeline": "uECC_vli_modSub(tz, rx, tx, curve->p, num_words); /* Z = x2 - x1 */"
    },
    {
        "line": 96,
        "fullcodeline": "XYcZ_add(tx, ty, rx, ry, curve);"
    },
    {
        "line": 97,
        "fullcodeline": "uECC_vli_modMult_fast(z, z, tz, curve);"
    }
]