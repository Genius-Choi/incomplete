[
    {
        "line": 5,
        "fullcodeline": "unsigned num_n_bytes = BITS_TO_BYTES(curve->num_n_bits);"
    },
    {
        "line": 6,
        "fullcodeline": "unsigned num_n_words = BITS_TO_WORDS(curve->num_n_bits);"
    },
    {
        "line": 15,
        "fullcodeline": "uECC_vli_clear(native, num_n_words);"
    },
    {
        "line": 19,
        "fullcodeline": "uECC_vli_bytesToNative(native, bits, bits_size);"
    },
    {
        "line": 24,
        "fullcodeline": "shift = bits_size * 8 - curve->num_n_bits;"
    },
    {
        "line": 25,
        "fullcodeline": "carry = 0;"
    },
    {
        "line": 26,
        "fullcodeline": "ptr = native + num_n_words;"
    },
    {
        "line": 11,
        "fullcodeline": "if (bits_size > num_n_bytes) {"
    },
    {
        "line": 21,
        "fullcodeline": "if (bits_size * 8 <= (unsigned)curve->num_n_bits) {"
    },
    {
        "line": 27,
        "fullcodeline": "while (ptr-- > native) {"
    },
    {
        "line": 34,
        "fullcodeline": "if (uECC_vli_cmp_unsafe(curve->n, native, num_n_words) != 1) {"
    },
    {
        "line": 12,
        "fullcodeline": "bits_size = num_n_bytes;"
    },
    {
        "line": 28,
        "fullcodeline": "uECC_word_t temp = *ptr;"
    },
    {
        "line": 29,
        "fullcodeline": "*ptr = (temp >> shift) | carry;"
    },
    {
        "line": 30,
        "fullcodeline": "carry = temp << (uECC_WORD_BITS - shift);"
    },
    {
        "line": 35,
        "fullcodeline": "uECC_vli_sub(native, native, curve->n, num_n_words);"
    }
]