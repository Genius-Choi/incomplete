[
    {
        "line": 8,
        "fullcodeline": "uECC_word_t tmp[uECC_MAX_WORDS];"
    },
    {
        "line": 9,
        "fullcodeline": "uECC_word_t s[uECC_MAX_WORDS];"
    },
    {
        "line": 10,
        "fullcodeline": "uECC_word_t *k2[2] = {tmp, s};"
    },
    {
        "line": 14,
        "fullcodeline": "uECC_word_t p[uECC_MAX_WORDS * 2];"
    },
    {
        "line": 17,
        "fullcodeline": "wordcount_t num_words = curve->num_words;"
    },
    {
        "line": 18,
        "fullcodeline": "wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);"
    },
    {
        "line": 19,
        "fullcodeline": "bitcount_t num_n_bits = curve->num_n_bits;"
    },
    {
        "line": 26,
        "fullcodeline": "carry = regularize_k(k, tmp, s, curve);"
    },
    {
        "line": 27,
        "fullcodeline": "EccPoint_mult(p, curve->G, k2[!carry], 0, num_n_bits + 1, curve);"
    },
    {
        "line": 43,
        "fullcodeline": "uECC_vli_modMult(k, k, tmp, curve->n, num_n_words); /* k' = rand * k */"
    },
    {
        "line": 44,
        "fullcodeline": "uECC_vli_modInv(k, k, curve->n, num_n_words);       /* k = 1 / k' */"
    },
    {
        "line": 45,
        "fullcodeline": "uECC_vli_modMult(k, k, tmp, curve->n, num_n_words); /* k = 1 / k */"
    },
    {
        "line": 48,
        "fullcodeline": "uECC_vli_nativeToBytes(signature, curve->num_bytes, p); /* store r */"
    },
    {
        "line": 54,
        "fullcodeline": "uECC_vli_bytesToNative(tmp, private_key, BITS_TO_BYTES(curve->num_n_bits)); /* tmp = d */"
    },
    {
        "line": 57,
        "fullcodeline": "s[num_n_words - 1] = 0;"
    },
    {
        "line": 58,
        "fullcodeline": "uECC_vli_set(s, p, num_words);"
    },
    {
        "line": 59,
        "fullcodeline": "uECC_vli_modMult(s, tmp, s, curve->n, num_n_words); /* s = r*d */"
    },
    {
        "line": 61,
        "fullcodeline": "bits2int(tmp, message_hash, hash_size, curve);"
    },
    {
        "line": 62,
        "fullcodeline": "uECC_vli_modAdd(s, tmp, s, curve->n, num_n_words); /* s = e + r*d */"
    },
    {
        "line": 63,
        "fullcodeline": "uECC_vli_modMult(s, s, k, curve->n, num_n_words);  /* s = (e + r*d) / k */"
    },
    {
        "line": 22,
        "fullcodeline": "if (uECC_vli_isZero(k, num_words) || uECC_vli_cmp(curve->n, k, num_n_words) != 1) {"
    },
    {
        "line": 28,
        "fullcodeline": "if (uECC_vli_isZero(p, num_words)) {"
    },
    {
        "line": 34,
        "fullcodeline": "if (!g_rng_function) {"
    },
    {
        "line": 35,
        "fullcodeline": "uECC_vli_clear(tmp, num_n_words);"
    },
    {
        "line": 36,
        "fullcodeline": "tmp[0] = 1;"
    },
    {
        "line": 64,
        "fullcodeline": "if (uECC_vli_numBits(s, num_n_words) > (bitcount_t)curve->num_bytes * 8) {"
    },
    {
        "line": 37,
        "fullcodeline": "} else if (!uECC_generate_random_int(tmp, curve->n, num_n_words)) {"
    }
]