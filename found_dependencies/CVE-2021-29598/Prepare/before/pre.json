[
    {
        "line": 2,
        "fullcodeline": "const auto* params = reinterpret_cast<TfLiteSVDFParams*>(node->builtin_data);"
    },
    {
        "line": 3,
        "fullcodeline": "OpData* op_data = reinterpret_cast<OpData*>(node->user_data);"
    },
    {
        "line": 4,
        "fullcodeline": "int scratch_tensor_index = op_data->scratch_tensor_index;"
    },
    {
        "line": 7,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);"
    },
    {
        "line": 8,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, node->inputs->size, 5);"
    },
    {
        "line": 11,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));"
    },
    {
        "line": 13,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kWeightsFeatureTensor,"
    },
    {
        "line": 16,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 19,
        "fullcodeline": "TF_LITE_ENSURE(context,"
    },
    {
        "line": 24,
        "fullcodeline": "const int rank = params->rank;"
    },
    {
        "line": 25,
        "fullcodeline": "const int batch_size = input->dims->data[0];"
    },
    {
        "line": 26,
        "fullcodeline": "const int num_filters = weights_feature->dims->data[0];"
    },
    {
        "line": 27,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, num_filters % rank, 0);"
    },
    {
        "line": 28,
        "fullcodeline": "const int num_units = num_filters / rank;"
    },
    {
        "line": 29,
        "fullcodeline": "const int memory_size = weights_time->dims->data[1];"
    },
    {
        "line": 30,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, input->dims->data[1],"
    },
    {
        "line": 32,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, weights_time->dims->data[0], num_filters);"
    },
    {
        "line": 34,
        "fullcodeline": "const TfLiteTensor* bias = GetOptionalInputTensor(context, node, kBiasTensor);"
    },
    {
        "line": 40,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kStateTensor, &state));"
    },
    {
        "line": 42,
        "fullcodeline": "TF_LITE_ENSURE_OK(context,"
    },
    {
        "line": 46,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, NumDimensions(state), 2);"
    },
    {
        "line": 47,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, SizeOfDimension(state, 0), batch_size);"
    },
    {
        "line": 48,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, SizeOfDimension(state, 1),"
    },
    {
        "line": 52,
        "fullcodeline": "TfLiteIntArray* output_size_array = TfLiteIntArrayCreate(2);"
    },
    {
        "line": 53,
        "fullcodeline": "output_size_array->data[0] = batch_size;"
    },
    {
        "line": 54,
        "fullcodeline": "output_size_array->data[1] = num_units;"
    },
    {
        "line": 55,
        "fullcodeline": "TF_LITE_ENSURE_OK(context,"
    },
    {
        "line": 59,
        "fullcodeline": "const bool is_hybrid_op = IsHybridOp(input, weights_feature);"
    },
    {
        "line": 60,
        "fullcodeline": "const bool is_full_integer = input->type == kTfLiteInt8;"
    },
    {
        "line": 63,
        "fullcodeline": "TfLiteIntArrayFree(node->temporaries);"
    },
    {
        "line": 71,
        "fullcodeline": "node->temporaries->data[0] = scratch_tensor_index;"
    },
    {
        "line": 73,
        "fullcodeline": "TfLiteIntArray* scratch_size_array = TfLiteIntArrayCreate(2);"
    },
    {
        "line": 74,
        "fullcodeline": "scratch_size_array->data[0] = batch_size;"
    },
    {
        "line": 75,
        "fullcodeline": "scratch_size_array->data[1] = num_filters;"
    },
    {
        "line": 78,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 88,
        "fullcodeline": "scratch_tensor->allocation_type = kTfLiteArenaRw;"
    },
    {
        "line": 89,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, context->ResizeTensor(context, scratch_tensor,"
    },
    {
        "line": 17,
        "fullcodeline": "context, GetInputSafe(context, node, kWeightsTimeTensor, &weights_time));"
    },
    {
        "line": 20,
        "fullcodeline": "input->type == kTfLiteFloat32 || input->type == kTfLiteInt8);"
    },
    {
        "line": 43,
        "fullcodeline": "GetOutputSafe(context, node, kOutputTensor, &output));"
    },
    {
        "line": 49,
        "fullcodeline": "memory_size * num_filters);"
    },
    {
        "line": 56,
        "fullcodeline": "context->ResizeTensor(context, output, output_size_array));"
    },
    {
        "line": 79,
        "fullcodeline": "context, GetTemporarySafe(context, node, /*index=*/0, &scratch_tensor));"
    },
    {
        "line": 36,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, bias->dims->data[0], num_units);"
    },
    {
        "line": 65,
        "fullcodeline": "node->temporaries = TfLiteIntArrayCreate(6);"
    },
    {
        "line": 84,
        "fullcodeline": "scratch_tensor->type = kTfLiteInt32;"
    },
    {
        "line": 93,
        "fullcodeline": "op_data->compute_row_sums = true;"
    },
    {
        "line": 96,
        "fullcodeline": "node->temporaries->data[1] = scratch_tensor_index + 1;"
    },
    {
        "line": 98,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, GetTemporarySafe(context, node, /*index=*/1,"
    },
    {
        "line": 100,
        "fullcodeline": "input_quantized->type = weights_feature->type;"
    },
    {
        "line": 101,
        "fullcodeline": "input_quantized->allocation_type = kTfLiteArenaRw;"
    },
    {
        "line": 109,
        "fullcodeline": "node->temporaries->data[2] = scratch_tensor_index + 2;"
    },
    {
        "line": 111,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, GetTemporarySafe(context, node, /*index=*/2,"
    },
    {
        "line": 113,
        "fullcodeline": "scaling_factors->type = kTfLiteFloat32;"
    },
    {
        "line": 114,
        "fullcodeline": "scaling_factors->allocation_type = kTfLiteArenaRw;"
    },
    {
        "line": 115,
        "fullcodeline": "int scaling_dims[1] = {batch_size};"
    },
    {
        "line": 125,
        "fullcodeline": "node->temporaries->data[3] = scratch_tensor_index + 3;"
    },
    {
        "line": 127,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, GetTemporarySafe(context, node, /*index=*/3,"
    },
    {
        "line": 129,
        "fullcodeline": "float_weights_time->type = kTfLiteFloat32;"
    },
    {
        "line": 131,
        "fullcodeline": "float_weights_time->allocation_type = kTfLiteArenaRwPersistent;"
    },
    {
        "line": 140,
        "fullcodeline": "node->temporaries->data[4] = scratch_tensor_index + 4;"
    },
    {
        "line": 142,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 144,
        "fullcodeline": "zero_points->type = kTfLiteFloat32;"
    },
    {
        "line": 145,
        "fullcodeline": "zero_points->allocation_type = kTfLiteArenaRw;"
    },
    {
        "line": 146,
        "fullcodeline": "int zero_points_dims[1] = {batch_size};"
    },
    {
        "line": 154,
        "fullcodeline": "node->temporaries->data[5] = scratch_tensor_index + 5;"
    },
    {
        "line": 156,
        "fullcodeline": "TF_LITE_ENSURE_OK(context,"
    },
    {
        "line": 158,
        "fullcodeline": "row_sums->type = kTfLiteFloat32;"
    },
    {
        "line": 159,
        "fullcodeline": "row_sums->allocation_type = kTfLiteArenaRwPersistent;"
    },
    {
        "line": 160,
        "fullcodeline": "int row_sums_dims[1] = {num_filters};"
    },
    {
        "line": 170,
        "fullcodeline": "TfLiteIntArray* output_temp_size_array = TfLiteIntArrayCreate(2);"
    },
    {
        "line": 171,
        "fullcodeline": "output_temp_size_array->data[0] = num_units;"
    },
    {
        "line": 172,
        "fullcodeline": "output_temp_size_array->data[1] = batch_size;"
    },
    {
        "line": 173,
        "fullcodeline": "node->temporaries->data[1] = scratch_tensor_index + 1;"
    },
    {
        "line": 175,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 177,
        "fullcodeline": "output_temp->type = kTfLiteInt32;"
    },
    {
        "line": 178,
        "fullcodeline": "output_temp->allocation_type = kTfLiteArenaRw;"
    },
    {
        "line": 179,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, context->ResizeTensor(context, output_temp,"
    },
    {
        "line": 183,
        "fullcodeline": "auto* input_params ="
    },
    {
        "line": 185,
        "fullcodeline": "auto* weights_feature_params = reinterpret_cast<TfLiteAffineQuantization*>("
    },
    {
        "line": 187,
        "fullcodeline": "auto* state_params ="
    },
    {
        "line": 189,
        "fullcodeline": "auto* weight_time_params = reinterpret_cast<TfLiteAffineQuantization*>("
    },
    {
        "line": 191,
        "fullcodeline": "auto* output_params = reinterpret_cast<TfLiteAffineQuantization*>("
    },
    {
        "line": 193,
        "fullcodeline": "const double effective_scale_1 = input_params->scale->data[0] *"
    },
    {
        "line": 196,
        "fullcodeline": "const double effective_scale_2 = state_params->scale->data[0] *"
    },
    {
        "line": 199,
        "fullcodeline": "QuantizeMultiplier(effective_scale_1, &op_data->effective_scale_1_a,"
    },
    {
        "line": 201,
        "fullcodeline": "QuantizeMultiplier(effective_scale_2, &op_data->effective_scale_2_a,"
    },
    {
        "line": 86,
        "fullcodeline": "scratch_tensor->type = kTfLiteFloat32;"
    },
    {
        "line": 102,
        "fullcodeline": "if (!TfLiteIntArrayEqual(input_quantized->dims, input->dims)) {"
    },
    {
        "line": 116,
        "fullcodeline": "if (!TfLiteIntArrayEqualsArray(scaling_factors->dims, 1, scaling_dims)) {"
    },
    {
        "line": 132,
        "fullcodeline": "if (!TfLiteIntArrayEqual(float_weights_time->dims, weights_time->dims)) {"
    },
    {
        "line": 143,
        "fullcodeline": "context, GetTemporarySafe(context, node, /*index=*/4, &zero_points));"
    },
    {
        "line": 147,
        "fullcodeline": "if (!TfLiteIntArrayEqualsArray(zero_points->dims, 1, zero_points_dims)) {"
    },
    {
        "line": 157,
        "fullcodeline": "GetTemporarySafe(context, node, /*index=*/5, &row_sums));"
    },
    {
        "line": 161,
        "fullcodeline": "if (!TfLiteIntArrayEqualsArray(row_sums->dims, 1, row_sums_dims)) {"
    },
    {
        "line": 176,
        "fullcodeline": "context, GetTemporarySafe(context, node, /*index=*/1, &output_temp));"
    },
    {
        "line": 184,
        "fullcodeline": "reinterpret_cast<TfLiteAffineQuantization*>(input->quantization.params);"
    },
    {
        "line": 188,
        "fullcodeline": "reinterpret_cast<TfLiteAffineQuantization*>(state->quantization.params);"
    },
    {
        "line": 103,
        "fullcodeline": "TfLiteIntArray* input_quantized_size = TfLiteIntArrayCopy(input->dims);"
    },
    {
        "line": 104,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, context->ResizeTensor(context, input_quantized,"
    },
    {
        "line": 117,
        "fullcodeline": "TfLiteIntArray* scaling_factors_size = TfLiteIntArrayCreate(1);"
    },
    {
        "line": 118,
        "fullcodeline": "scaling_factors_size->data[0] = batch_size;"
    },
    {
        "line": 119,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, context->ResizeTensor(context, scaling_factors,"
    },
    {
        "line": 133,
        "fullcodeline": "TfLiteIntArray* float_weights_time_size ="
    },
    {
        "line": 135,
        "fullcodeline": "TF_LITE_ENSURE_OK(context,"
    },
    {
        "line": 148,
        "fullcodeline": "TfLiteIntArray* zero_points_size = TfLiteIntArrayCreate(1);"
    },
    {
        "line": 149,
        "fullcodeline": "zero_points_size->data[0] = zero_points_dims[0];"
    },
    {
        "line": 150,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, context->ResizeTensor(context, zero_points,"
    },
    {
        "line": 162,
        "fullcodeline": "TfLiteIntArray* row_sums_size = TfLiteIntArrayCreate(1);"
    },
    {
        "line": 163,
        "fullcodeline": "row_sums_size->data[0] = row_sums_dims[0];"
    },
    {
        "line": 164,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 67,
        "fullcodeline": "node->temporaries = TfLiteIntArrayCreate(2);"
    },
    {
        "line": 134,
        "fullcodeline": "TfLiteIntArrayCopy(weights_time->dims);"
    },
    {
        "line": 136,
        "fullcodeline": "context->ResizeTensor(context, float_weights_time,"
    },
    {
        "line": 165,
        "fullcodeline": "context, context->ResizeTensor(context, row_sums, row_sums_size));"
    },
    {
        "line": 69,
        "fullcodeline": "node->temporaries = TfLiteIntArrayCreate(1);"
    }
]