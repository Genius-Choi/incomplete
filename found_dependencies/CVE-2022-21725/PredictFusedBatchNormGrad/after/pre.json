[
    {
        "line": 3,
        "fullcodeline": "bool found_unknown_shapes = false;"
    },
    {
        "line": 4,
        "fullcodeline": "const auto& op_info = op_context.op_info;"
    },
    {
        "line": 14,
        "fullcodeline": "int64_t ops = 0;"
    },
    {
        "line": 15,
        "fullcodeline": "const auto rsqrt_cost = Eigen::internal::functor_traits<"
    },
    {
        "line": 17,
        "fullcodeline": "ops = dims.iz * (dims.batch * dims.ix * dims.iy * 11 + 5 + rsqrt_cost);"
    },
    {
        "line": 18,
        "fullcodeline": "node_costs->num_compute_ops = ops;"
    },
    {
        "line": 20,
        "fullcodeline": "const int64_t size_nhwc ="
    },
    {
        "line": 22,
        "fullcodeline": "const int64_t size_c ="
    },
    {
        "line": 26,
        "fullcodeline": "node_costs->num_input_bytes_accessed = {size_nhwc, size_nhwc, size_c, size_c};"
    },
    {
        "line": 27,
        "fullcodeline": "node_costs->num_output_bytes_accessed = {size_nhwc, size_c, size_c};"
    },
    {
        "line": 29,
        "fullcodeline": "node_costs->internal_read_bytes = size_nhwc;"
    },
    {
        "line": 30,
        "fullcodeline": "node_costs->max_memory = node_costs->num_total_output_bytes();"
    },
    {
        "line": 21,
        "fullcodeline": "CalculateTensorSize(op_info.inputs(1), &found_unknown_shapes);"
    },
    {
        "line": 23,
        "fullcodeline": "CalculateTensorSize(op_info.inputs(2), &found_unknown_shapes);"
    },
    {
        "line": 36,
        "fullcodeline": "return Status::OK();"
    },
    {
        "line": 33,
        "fullcodeline": "node_costs->inaccurate = true;"
    },
    {
        "line": 34,
        "fullcodeline": "node_costs->num_nodes_with_unknown_shapes = 1;"
    }
]