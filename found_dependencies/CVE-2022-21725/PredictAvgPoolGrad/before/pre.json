[
    {
        "line": 3,
        "fullcodeline": "bool found_unknown_shapes = false;"
    },
    {
        "line": 4,
        "fullcodeline": "const auto& op_info = op_context.op_info;"
    },
    {
        "line": 9,
        "fullcodeline": "bool shape_found = false;"
    },
    {
        "line": 28,
        "fullcodeline": "ConvolutionDimensions dims ="
    },
    {
        "line": 31,
        "fullcodeline": "int64_t ops = 0;"
    },
    {
        "line": 40,
        "fullcodeline": "auto s = PredictDefaultNodeCosts(ops, op_context, &found_unknown_shapes,"
    },
    {
        "line": 42,
        "fullcodeline": "node_costs->max_memory = node_costs->num_total_output_bytes();"
    },
    {
        "line": 11,
        "fullcodeline": "if (op_info.inputs_size() >= 1 && op_info.inputs(0).has_value()) {"
    },
    {
        "line": 15,
        "fullcodeline": "if (!shape_found && op_info.outputs_size() > 0) {"
    },
    {
        "line": 19,
        "fullcodeline": "if (!shape_found) {"
    },
    {
        "line": 29,
        "fullcodeline": "OpDimensionsFromInputs(x_shape, op_info, &found_unknown_shapes);"
    },
    {
        "line": 32,
        "fullcodeline": "if (dims.kx <= dims.sx && dims.ky <= dims.sy) {"
    },
    {
        "line": 12,
        "fullcodeline": "const TensorProto& value = op_info.inputs(0).value();"
    },
    {
        "line": 13,
        "fullcodeline": "shape_found = GetTensorShapeProtoFromTensorProto(value, &x_shape);"
    },
    {
        "line": 16,
        "fullcodeline": "x_shape = op_info.outputs(0).shape();"
    },
    {
        "line": 17,
        "fullcodeline": "shape_found = true;"
    },
    {
        "line": 21,
        "fullcodeline": "x_shape.Clear();"
    },
    {
        "line": 25,
        "fullcodeline": "found_unknown_shapes = true;"
    },
    {
        "line": 34,
        "fullcodeline": "ops = dims.batch * dims.iz * (dims.ix * dims.iy + dims.ox * dims.oy);"
    },
    {
        "line": 22,
        "fullcodeline": "for (int i = 0; i < 4; ++i) {"
    },
    {
        "line": 37,
        "fullcodeline": "ops = dims.batch * dims.iz *"
    },
    {
        "line": 23,
        "fullcodeline": "x_shape.add_dim()->set_size(1);"
    },
    {
        "line": 38,
        "fullcodeline": "(dims.ix * dims.iy + dims.ox * dims.oy * (dims.kx * dims.ky + 1));"
    }
]