[
    {
        "line": 3,
        "fullcodeline": "bool found_unknown_shapes = false;"
    },
    {
        "line": 4,
        "fullcodeline": "const auto& op_info = op_context.op_info;"
    },
    {
        "line": 6,
        "fullcodeline": "ConvolutionDimensions dims = OpDimensionsFromInputs("
    },
    {
        "line": 10,
        "fullcodeline": "int per_output_ops = dims.kx * dims.ky == 1 ? 1 : dims.kx * dims.ky - 1;"
    },
    {
        "line": 11,
        "fullcodeline": "int64_t ops = dims.batch * dims.ox * dims.oy * dims.oz * per_output_ops;"
    },
    {
        "line": 12,
        "fullcodeline": "node_costs->num_compute_ops = ops;"
    },
    {
        "line": 14,
        "fullcodeline": "int64_t input_size = 0;"
    },
    {
        "line": 24,
        "fullcodeline": "node_costs->num_input_bytes_accessed = {input_size};"
    },
    {
        "line": 25,
        "fullcodeline": "const int64_t output_size ="
    },
    {
        "line": 27,
        "fullcodeline": "node_costs->num_output_bytes_accessed = {output_size};"
    },
    {
        "line": 28,
        "fullcodeline": "node_costs->max_memory = output_size;"
    },
    {
        "line": 15,
        "fullcodeline": "if (dims.ky >= dims.sy) {"
    },
    {
        "line": 26,
        "fullcodeline": "CalculateOutputSize(op_info, &found_unknown_shapes);"
    },
    {
        "line": 33,
        "fullcodeline": "return Status::OK();"
    },
    {
        "line": 7,
        "fullcodeline": "op_info.inputs(0).shape(), op_info, &found_unknown_shapes);"
    },
    {
        "line": 16,
        "fullcodeline": "input_size = CalculateTensorSize(op_info.inputs(0), &found_unknown_shapes);"
    },
    {
        "line": 30,
        "fullcodeline": "node_costs->inaccurate = true;"
    },
    {
        "line": 31,
        "fullcodeline": "node_costs->num_nodes_with_unknown_shapes = 1;"
    },
    {
        "line": 21,
        "fullcodeline": "const auto data_size = DataTypeSize(BaseType(op_info.inputs(0).dtype()));"
    },
    {
        "line": 22,
        "fullcodeline": "input_size = data_size * dims.batch * dims.ix * dims.ky * dims.oy * dims.iz;"
    }
]