[
    {
        "line": 5,
        "fullcodeline": "filename[MagickPathExtent];"
    },
    {
        "line": 33,
        "fullcodeline": "assert(image_info != (const ImageInfo *) NULL);"
    },
    {
        "line": 34,
        "fullcodeline": "assert(image_info->signature == MagickCoreSignature);"
    },
    {
        "line": 38,
        "fullcodeline": "assert(exception != (ExceptionInfo *) NULL);"
    },
    {
        "line": 39,
        "fullcodeline": "assert(exception->signature == MagickCoreSignature);"
    },
    {
        "line": 40,
        "fullcodeline": "image=AcquireImage(image_info,exception);"
    },
    {
        "line": 41,
        "fullcodeline": "status=OpenBlob(image_info,image,ReadBinaryBlobMode,exception);"
    },
    {
        "line": 50,
        "fullcodeline": "file=(FILE *) NULL;"
    },
    {
        "line": 51,
        "fullcodeline": "unique_file=AcquireUniqueFileResource(filename);"
    },
    {
        "line": 66,
        "fullcodeline": "strip_offset=10+(12*14)+4+8;"
    },
    {
        "line": 74,
        "fullcodeline": "offset=(ssize_t) ftell(file)-4;"
    },
    {
        "line": 83,
        "fullcodeline": "status=MagickTrue;"
    },
    {
        "line": 95,
        "fullcodeline": "read_info=CloneImageInfo((ImageInfo *) NULL);"
    },
    {
        "line": 97,
        "fullcodeline": "image=ReadTIFFImage(read_info,exception);"
    },
    {
        "line": 35,
        "fullcodeline": "if (image_info->debug != MagickFalse)"
    },
    {
        "line": 42,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 52,
        "fullcodeline": "if (unique_file != -1)"
    },
    {
        "line": 56,
        "fullcodeline": "length=fwrite(\"\\111\\111\\052\\000\\010\\000\\000\\000\\016\\000\",1,10,file);"
    },
    {
        "line": 57,
        "fullcodeline": "length=fwrite(\"\\376\\000\\003\\000\\001\\000\\000\\000\\000\\000\\000\\000\",1,12,file);"
    },
    {
        "line": 58,
        "fullcodeline": "length=fwrite(\"\\000\\001\\004\\000\\001\\000\\000\\000\",1,8,file);"
    },
    {
        "line": 59,
        "fullcodeline": "length=WriteLSBLong(file,image->columns);"
    },
    {
        "line": 60,
        "fullcodeline": "length=fwrite(\"\\001\\001\\004\\000\\001\\000\\000\\000\",1,8,file);"
    },
    {
        "line": 61,
        "fullcodeline": "length=WriteLSBLong(file,image->rows);"
    },
    {
        "line": 62,
        "fullcodeline": "length=fwrite(\"\\002\\001\\003\\000\\001\\000\\000\\000\\001\\000\\000\\000\",1,12,file);"
    },
    {
        "line": 63,
        "fullcodeline": "length=fwrite(\"\\003\\001\\003\\000\\001\\000\\000\\000\\004\\000\\000\\000\",1,12,file);"
    },
    {
        "line": 64,
        "fullcodeline": "length=fwrite(\"\\006\\001\\003\\000\\001\\000\\000\\000\\000\\000\\000\\000\",1,12,file);"
    },
    {
        "line": 65,
        "fullcodeline": "length=fwrite(\"\\021\\001\\003\\000\\001\\000\\000\\000\",1,8,file);"
    },
    {
        "line": 67,
        "fullcodeline": "length=WriteLSBLong(file,(size_t) strip_offset);"
    },
    {
        "line": 68,
        "fullcodeline": "length=fwrite(\"\\022\\001\\003\\000\\001\\000\\000\\000\",1,8,file);"
    },
    {
        "line": 69,
        "fullcodeline": "length=WriteLSBLong(file,(size_t) image_info->orientation);"
    },
    {
        "line": 70,
        "fullcodeline": "length=fwrite(\"\\025\\001\\003\\000\\001\\000\\000\\000\\001\\000\\000\\000\",1,12,file);"
    },
    {
        "line": 71,
        "fullcodeline": "length=fwrite(\"\\026\\001\\004\\000\\001\\000\\000\\000\",1,8,file);"
    },
    {
        "line": 72,
        "fullcodeline": "length=WriteLSBLong(file,image->rows);"
    },
    {
        "line": 73,
        "fullcodeline": "length=fwrite(\"\\027\\001\\004\\000\\001\\000\\000\\000\\000\\000\\000\\000\",1,12,file);"
    },
    {
        "line": 75,
        "fullcodeline": "length=fwrite(\"\\032\\001\\005\\000\\001\\000\\000\\000\",1,8,file);"
    },
    {
        "line": 76,
        "fullcodeline": "length=WriteLSBLong(file,(size_t) (strip_offset-8));"
    },
    {
        "line": 77,
        "fullcodeline": "length=fwrite(\"\\033\\001\\005\\000\\001\\000\\000\\000\",1,8,file);"
    },
    {
        "line": 78,
        "fullcodeline": "length=WriteLSBLong(file,(size_t) (strip_offset-8));"
    },
    {
        "line": 79,
        "fullcodeline": "length=fwrite(\"\\050\\001\\003\\000\\001\\000\\000\\000\\002\\000\\000\\000\",1,12,file);"
    },
    {
        "line": 80,
        "fullcodeline": "length=fwrite(\"\\000\\000\\000\\000\",1,4,file);"
    },
    {
        "line": 81,
        "fullcodeline": "length=WriteLSBLong(file,(long) image->resolution.x);"
    },
    {
        "line": 82,
        "fullcodeline": "length=WriteLSBLong(file,1);"
    },
    {
        "line": 84,
        "fullcodeline": "for (length=0; (c=ReadBlobByte(image)) != EOF; length++)"
    },
    {
        "line": 88,
        "fullcodeline": "length=WriteLSBLong(file,(unsigned int) length);"
    },
    {
        "line": 89,
        "fullcodeline": "(void) fclose(file);"
    },
    {
        "line": 90,
        "fullcodeline": "(void) CloseBlob(image);"
    },
    {
        "line": 91,
        "fullcodeline": "image=DestroyImage(image);"
    },
    {
        "line": 96,
        "fullcodeline": "(void) FormatLocaleString(read_info->filename,MagickPathExtent,\"%s\",filename);"
    },
    {
        "line": 98,
        "fullcodeline": "read_info=DestroyImageInfo(read_info);"
    },
    {
        "line": 99,
        "fullcodeline": "if (image != (Image *) NULL)"
    },
    {
        "line": 107,
        "fullcodeline": "(void) RelinquishUniqueFileResource(filename);"
    },
    {
        "line": 36,
        "fullcodeline": "(void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\","
    },
    {
        "line": 44,
        "fullcodeline": "image=DestroyImageList(image);"
    },
    {
        "line": 53,
        "fullcodeline": "file=fdopen(unique_file,\"wb\");"
    },
    {
        "line": 54,
        "fullcodeline": "if ((unique_file == -1) || (file == (FILE *) NULL))"
    },
    {
        "line": 55,
        "fullcodeline": "ThrowImageException(FileOpenError,\"UnableToCreateTemporaryFile\");"
    },
    {
        "line": 87,
        "fullcodeline": "offset=(ssize_t) fseek(file,(ssize_t) offset,SEEK_SET);"
    },
    {
        "line": 109,
        "fullcodeline": "image=DestroyImage(image);"
    },
    {
        "line": 45,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 85,
        "fullcodeline": "if (fputc(c,file) != c)"
    },
    {
        "line": 86,
        "fullcodeline": "status=MagickFalse;"
    },
    {
        "line": 101,
        "fullcodeline": "(void) CopyMagickString(image->filename,image_info->filename,"
    },
    {
        "line": 103,
        "fullcodeline": "(void) CopyMagickString(image->magick_filename,image_info->filename,"
    },
    {
        "line": 105,
        "fullcodeline": "(void) CopyMagickString(image->magick,\"GROUP4\",MagickPathExtent);"
    }
]