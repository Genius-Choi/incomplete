[
    {
        "line": 20,
        "fullcodeline": "nb_sections = gf_list_count(sections);"
    },
    {
        "line": 25,
        "fullcodeline": "section = (GF_M2TS_Section *)gf_list_get(sections, 0);"
    },
    {
        "line": 26,
        "fullcodeline": "data = section->data;"
    },
    {
        "line": 27,
        "fullcodeline": "data_size = section->data_size;"
    },
    {
        "line": 37,
        "fullcodeline": "nb_progs = data_size / 4;"
    },
    {
        "line": 73,
        "fullcodeline": "evt_type = (status&GF_M2TS_TABLE_UPDATE) ? GF_M2TS_EVT_PAT_UPDATE : GF_M2TS_EVT_PAT_FOUND;"
    },
    {
        "line": 12,
        "fullcodeline": "if (!(status&GF_M2TS_TABLE_END)) return;"
    },
    {
        "line": 15,
        "fullcodeline": "if (status&GF_M2TS_TABLE_REPEAT) {"
    },
    {
        "line": 39,
        "fullcodeline": "for (i=0; i<nb_progs; i++) {"
    },
    {
        "line": 22,
        "fullcodeline": "GF_LOG(GF_LOG_WARNING, GF_LOG_CONTAINER, (\"PAT on multiple sections not supported\\n\"));"
    },
    {
        "line": 29,
        "fullcodeline": "if (!(status&GF_M2TS_TABLE_UPDATE) && gf_list_count(ts->programs)) {"
    },
    {
        "line": 41,
        "fullcodeline": "number = (data[0]<<8) | data[1];"
    },
    {
        "line": 42,
        "fullcodeline": "pid = (data[2]&0x1f)<<8 | data[3];"
    },
    {
        "line": 43,
        "fullcodeline": "data += 4;"
    },
    {
        "line": 44,
        "fullcodeline": "if (number==0) {"
    },
    {
        "line": 16,
        "fullcodeline": "if (ts->on_event) ts->on_event(ts, GF_M2TS_EVT_PAT_REPEAT, NULL);"
    },
    {
        "line": 45,
        "fullcodeline": "if (!ts->nit) {"
    },
    {
        "line": 49,
        "fullcodeline": "GF_SAFEALLOC(prog, GF_M2TS_Program);"
    },
    {
        "line": 54,
        "fullcodeline": "prog->streams = gf_list_new();"
    },
    {
        "line": 55,
        "fullcodeline": "prog->pmt_pid = pid;"
    },
    {
        "line": 56,
        "fullcodeline": "prog->number = number;"
    },
    {
        "line": 57,
        "fullcodeline": "prog->ts = ts;"
    },
    {
        "line": 58,
        "fullcodeline": "gf_list_add(ts->programs, prog);"
    },
    {
        "line": 59,
        "fullcodeline": "GF_SAFEALLOC(pmt, GF_M2TS_SECTION_ES);"
    },
    {
        "line": 64,
        "fullcodeline": "pmt->flags = GF_M2TS_ES_IS_SECTION;"
    },
    {
        "line": 65,
        "fullcodeline": "gf_list_add(prog->streams, pmt);"
    },
    {
        "line": 66,
        "fullcodeline": "pmt->pid = prog->pmt_pid;"
    },
    {
        "line": 67,
        "fullcodeline": "pmt->program = prog;"
    },
    {
        "line": 69,
        "fullcodeline": "pmt->sec = gf_m2ts_section_filter_new(gf_m2ts_process_pmt, 0);"
    },
    {
        "line": 33,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"Multiple different PAT on single TS found, ignoring new PAT declaration (table id %d - extended table id %d)\\n\", table_id, ex_table_id));"
    },
    {
        "line": 46,
        "fullcodeline": "ts->nit = gf_m2ts_section_filter_new(gf_m2ts_process_nit, 0);"
    },
    {
        "line": 50,
        "fullcodeline": "if (!prog) {"
    },
    {
        "line": 60,
        "fullcodeline": "if (!pmt) {"
    },
    {
        "line": 51,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"Fail to allocate program for pid %d\\n\", pid));"
    },
    {
        "line": 61,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"Fail to allocate pmt filter for pid %d\\n\", pid));"
    }
]