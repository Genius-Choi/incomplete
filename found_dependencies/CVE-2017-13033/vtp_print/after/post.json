[
    {
        "line": 11,
        "fullcodeline": "tptr = pptr;"
    },
    {
        "line": 13,
        "fullcodeline": "ND_TCHECK2(*tptr, VTP_HEADER_LEN);"
    },
    {
        "line": 16,
        "fullcodeline": "ND_PRINT((ndo, \"VTPv%u, Message %s (0x%02x), length %u\","
    },
    {
        "line": 28,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\tDomain name: \"));"
    },
    {
        "line": 34,
        "fullcodeline": "fn_printzp(ndo, tptr + 4, mgmtd_len, NULL);"
    },
    {
        "line": 35,
        "fullcodeline": "ND_PRINT((ndo, \", %s: %u\","
    },
    {
        "line": 39,
        "fullcodeline": "tptr += VTP_HEADER_LEN;"
    },
    {
        "line": 277,
        "fullcodeline": "ND_PRINT((ndo, \"[|vtp]\"));"
    },
    {
        "line": 8,
        "fullcodeline": "if (length < VTP_HEADER_LEN)"
    },
    {
        "line": 23,
        "fullcodeline": "if (ndo->ndo_vflag < 1) {"
    },
    {
        "line": 30,
        "fullcodeline": "if (mgmtd_len < 1 ||  mgmtd_len > 32) {"
    },
    {
        "line": 15,
        "fullcodeline": "type = *(tptr+1);"
    },
    {
        "line": 29,
        "fullcodeline": "mgmtd_len = *(tptr + 3);"
    },
    {
        "line": 31,
        "fullcodeline": "ND_PRINT((ndo, \" [invalid MgmtD Len %d]\", mgmtd_len));"
    },
    {
        "line": 65,
        "fullcodeline": "ND_TCHECK2(*tptr, 8);"
    },
    {
        "line": 66,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t  Config Rev %x, Updater %s\","
    },
    {
        "line": 69,
        "fullcodeline": "tptr += 8;"
    },
    {
        "line": 70,
        "fullcodeline": "ND_TCHECK2(*tptr, VTP_UPDATE_TIMESTAMP_LEN);"
    },
    {
        "line": 71,
        "fullcodeline": "ND_PRINT((ndo, \", Timestamp 0x%08x 0x%08x 0x%08x\","
    },
    {
        "line": 75,
        "fullcodeline": "tptr += VTP_UPDATE_TIMESTAMP_LEN;"
    },
    {
        "line": 76,
        "fullcodeline": "ND_TCHECK2(*tptr, VTP_MD5_DIGEST_LEN);"
    },
    {
        "line": 77,
        "fullcodeline": "ND_PRINT((ndo, \", MD5 digest: %08x%08x%08x%08x\","
    },
    {
        "line": 82,
        "fullcodeline": "tptr += VTP_MD5_DIGEST_LEN;"
    },
    {
        "line": 107,
        "fullcodeline": "ND_TCHECK_32BITS(tptr);"
    },
    {
        "line": 108,
        "fullcodeline": "ND_PRINT((ndo, \", Config Rev %x\", EXTRACT_32BITS(tptr)));"
    },
    {
        "line": 125,
        "fullcodeline": "tptr += 4;"
    },
    {
        "line": 261,
        "fullcodeline": "ND_TCHECK2(*tptr, 4);"
    },
    {
        "line": 262,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\tStart value: %u\", EXTRACT_32BITS(tptr)));"
    },
    {
        "line": 18,
        "fullcodeline": "tok2str(vtp_message_type_values,\"Unknown message type\", type),"
    },
    {
        "line": 36,
        "fullcodeline": "tok2str(vtp_header_values, \"Unknown\", type),"
    },
    {
        "line": 126,
        "fullcodeline": "while (tptr < (pptr+length)) {"
    },
    {
        "line": 37,
        "fullcodeline": "*(tptr+2)));"
    },
    {
        "line": 128,
        "fullcodeline": "ND_TCHECK_8BITS(tptr);"
    },
    {
        "line": 129,
        "fullcodeline": "len = *tptr;"
    },
    {
        "line": 133,
        "fullcodeline": "ND_TCHECK2(*tptr, len);"
    },
    {
        "line": 135,
        "fullcodeline": "vtp_vlan = (const struct vtp_vlan_*)tptr;"
    },
    {
        "line": 139,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\tVLAN info status %s, type %s, VLAN-id %u, MTU %u, SAID 0x%08x, Name \","
    },
    {
        "line": 145,
        "fullcodeline": "len  -= VTP_VLAN_INFO_FIXED_PART_LEN;"
    },
    {
        "line": 146,
        "fullcodeline": "tptr += VTP_VLAN_INFO_FIXED_PART_LEN;"
    },
    {
        "line": 149,
        "fullcodeline": "ND_TCHECK2(*tptr, vtp_vlan->name_len);"
    },
    {
        "line": 150,
        "fullcodeline": "fn_printzp(ndo, tptr, vtp_vlan->name_len, NULL);"
    },
    {
        "line": 155,
        "fullcodeline": "len  -= 4*((vtp_vlan->name_len + 3)/4);"
    },
    {
        "line": 156,
        "fullcodeline": "tptr += 4*((vtp_vlan->name_len + 3)/4);"
    },
    {
        "line": 67,
        "fullcodeline": "EXTRACT_32BITS(tptr),"
    },
    {
        "line": 68,
        "fullcodeline": "ipaddr_string(ndo, tptr+4)));"
    },
    {
        "line": 72,
        "fullcodeline": "EXTRACT_32BITS(tptr),"
    },
    {
        "line": 73,
        "fullcodeline": "EXTRACT_32BITS(tptr + 4),"
    },
    {
        "line": 74,
        "fullcodeline": "EXTRACT_32BITS(tptr + 8)));"
    },
    {
        "line": 78,
        "fullcodeline": "EXTRACT_32BITS(tptr),"
    },
    {
        "line": 79,
        "fullcodeline": "EXTRACT_32BITS(tptr + 4),"
    },
    {
        "line": 80,
        "fullcodeline": "EXTRACT_32BITS(tptr + 8),"
    },
    {
        "line": 81,
        "fullcodeline": "EXTRACT_32BITS(tptr + 12)));"
    },
    {
        "line": 130,
        "fullcodeline": "if (len == 0)"
    },
    {
        "line": 136,
        "fullcodeline": "if (len < VTP_VLAN_INFO_FIXED_PART_LEN)"
    },
    {
        "line": 147,
        "fullcodeline": "if (len < 4*((vtp_vlan->name_len + 3)/4))"
    },
    {
        "line": 160,
        "fullcodeline": "while (len > 0) {"
    },
    {
        "line": 171,
        "fullcodeline": "ND_TCHECK2(*tptr, 2);"
    },
    {
        "line": 172,
        "fullcodeline": "type = *tptr;"
    },
    {
        "line": 175,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t\\t%s (0x%04x) TLV\","
    },
    {
        "line": 183,
        "fullcodeline": "ND_TCHECK2(*tptr, tlv_len * 2 +2);"
    },
    {
        "line": 239,
        "fullcodeline": "len -= 2 + tlv_len*2;"
    },
    {
        "line": 240,
        "fullcodeline": "tptr += 2 + tlv_len*2;"
    },
    {
        "line": 140,
        "fullcodeline": "tok2str(vtp_vlan_status,\"Unknown\",vtp_vlan->status),"
    },
    {
        "line": 141,
        "fullcodeline": "tok2str(vtp_vlan_type_values,\"Unknown\",vtp_vlan->type),"
    },
    {
        "line": 142,
        "fullcodeline": "EXTRACT_16BITS(&vtp_vlan->vlanid),"
    },
    {
        "line": 143,
        "fullcodeline": "EXTRACT_16BITS(&vtp_vlan->mtu),"
    },
    {
        "line": 144,
        "fullcodeline": "EXTRACT_32BITS(&vtp_vlan->index)));"
    },
    {
        "line": 169,
        "fullcodeline": "if (len < 2)"
    },
    {
        "line": 179,
        "fullcodeline": "if (len < tlv_len * 2 + 2) {"
    },
    {
        "line": 189,
        "fullcodeline": "if (tlv_len != 1) {"
    },
    {
        "line": 173,
        "fullcodeline": "tlv_len = *(tptr+1);"
    },
    {
        "line": 180,
        "fullcodeline": "ND_PRINT((ndo, \" (TLV goes past the end of the packet)\"));"
    },
    {
        "line": 190,
        "fullcodeline": "ND_PRINT((ndo, \" (invalid TLV length %u != 1)\", tlv_len));"
    },
    {
        "line": 176,
        "fullcodeline": "tok2str(vtp_vlan_tlv_values, \"Unknown\", type),"
    },
    {
        "line": 193,
        "fullcodeline": "tlv_value = EXTRACT_16BITS(tptr+2);"
    },
    {
        "line": 197,
        "fullcodeline": "ND_PRINT((ndo, \", %u\", tlv_value));"
    },
    {
        "line": 201,
        "fullcodeline": "ND_PRINT((ndo, \", %s (%u)\","
    },
    {
        "line": 207,
        "fullcodeline": "ND_PRINT((ndo, \", %s (%u)\","
    },
    {
        "line": 213,
        "fullcodeline": "ND_PRINT((ndo, \", %s (%u)\","
    },
    {
        "line": 219,
        "fullcodeline": "ND_PRINT((ndo, \", %s (%u)\","
    },
    {
        "line": 235,
        "fullcodeline": "print_unknown_data(ndo, tptr, \"\\n\\t\\t  \", 2 + tlv_len*2);"
    },
    {
        "line": 202,
        "fullcodeline": "tlv_value == 1 ? \"Enabled\" : \"Disabled\","
    },
    {
        "line": 208,
        "fullcodeline": "tok2str(vtp_stp_type_values, \"Unknown\", tlv_value),"
    },
    {
        "line": 214,
        "fullcodeline": "tlv_value == 1 ? \"SRB\" : \"SRT\","
    },
    {
        "line": 220,
        "fullcodeline": "tlv_value == 1 ? \"Backup\" : \"Not backup\","
    }
]