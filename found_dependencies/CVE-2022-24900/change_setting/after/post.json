[
    {
        "line": 2,
        "fullcodeline": "setting_name = request.args.get('setting_name')"
    },
    {
        "line": 3,
        "fullcodeline": "value = request.args.get('value')"
    },
    {
        "line": 4,
        "fullcodeline": "second_value = request.args.get('second_value')"
    },
    {
        "line": 5,
        "fullcodeline": "disable_sequence = request.args.get('disable_sequence')"
    },
    {
        "line": 7,
        "fullcodeline": "reload_sequence = True"
    },
    {
        "line": 8,
        "fullcodeline": "if (second_value == \"no_reload\"):"
    },
    {
        "line": 11,
        "fullcodeline": "if (disable_sequence == \"true\"):"
    },
    {
        "line": 15,
        "fullcodeline": "if setting_name == \"clean_ledstrip\":"
    },
    {
        "line": 18,
        "fullcodeline": "if setting_name == \"led_color\":"
    },
    {
        "line": 34,
        "fullcodeline": "if setting_name == \"light_mode\":"
    },
    {
        "line": 38,
        "fullcodeline": "if setting_name == \"fading_speed\" or setting_name == \"velocity_speed\":"
    },
    {
        "line": 42,
        "fullcodeline": "if setting_name == \"brightness\":"
    },
    {
        "line": 46,
        "fullcodeline": "if setting_name == \"backlight_brightness\":"
    },
    {
        "line": 55,
        "fullcodeline": "if setting_name == \"backlight_color\":"
    },
    {
        "line": 68,
        "fullcodeline": "if setting_name == \"sides_color\":"
    },
    {
        "line": 79,
        "fullcodeline": "if setting_name == \"sides_color_mode\":"
    },
    {
        "line": 83,
        "fullcodeline": "if setting_name == \"input_port\":"
    },
    {
        "line": 87,
        "fullcodeline": "if setting_name == \"secondary_input_port\":"
    },
    {
        "line": 90,
        "fullcodeline": "if setting_name == \"play_port\":"
    },
    {
        "line": 94,
        "fullcodeline": "if setting_name == \"skipped_notes\":"
    },
    {
        "line": 98,
        "fullcodeline": "if setting_name == \"add_note_offset\":"
    },
    {
        "line": 102,
        "fullcodeline": "if setting_name == \"append_note_offset\":"
    },
    {
        "line": 106,
        "fullcodeline": "if setting_name == \"remove_note_offset\":"
    },
    {
        "line": 110,
        "fullcodeline": "if setting_name == \"note_offsets\":"
    },
    {
        "line": 113,
        "fullcodeline": "if setting_name == \"update_note_offset\":"
    },
    {
        "line": 117,
        "fullcodeline": "if setting_name == \"led_count\":"
    },
    {
        "line": 121,
        "fullcodeline": "if setting_name == \"shift\":"
    },
    {
        "line": 125,
        "fullcodeline": "if setting_name == \"reverse\":"
    },
    {
        "line": 129,
        "fullcodeline": "if setting_name == \"color_mode\":"
    },
    {
        "line": 138,
        "fullcodeline": "if setting_name == \"add_multicolor\":"
    },
    {
        "line": 142,
        "fullcodeline": "if setting_name == \"add_multicolor_and_set_value\":"
    },
    {
        "line": 160,
        "fullcodeline": "if setting_name == \"remove_multicolor\":"
    },
    {
        "line": 164,
        "fullcodeline": "if setting_name == \"multicolor\":"
    },
    {
        "line": 174,
        "fullcodeline": "if setting_name == \"multicolor_range_left\":"
    },
    {
        "line": 180,
        "fullcodeline": "if setting_name == \"multicolor_range_right\":"
    },
    {
        "line": 186,
        "fullcodeline": "if setting_name == \"remove_all_multicolors\":"
    },
    {
        "line": 194,
        "fullcodeline": "if setting_name == \"rainbow_offset\":"
    },
    {
        "line": 200,
        "fullcodeline": "if setting_name == \"rainbow_scale\":"
    },
    {
        "line": 206,
        "fullcodeline": "if setting_name == \"rainbow_timeshift\":"
    },
    {
        "line": 212,
        "fullcodeline": "if setting_name == \"speed_slowest_color\":"
    },
    {
        "line": 224,
        "fullcodeline": "if setting_name == \"speed_fastest_color\":"
    },
    {
        "line": 236,
        "fullcodeline": "if setting_name == \"gradient_start_color\":"
    },
    {
        "line": 248,
        "fullcodeline": "if setting_name == \"gradient_end_color\":"
    },
    {
        "line": 260,
        "fullcodeline": "if setting_name == \"speed_max_notes\":"
    },
    {
        "line": 266,
        "fullcodeline": "if setting_name == \"speed_period_in_seconds\":"
    },
    {
        "line": 272,
        "fullcodeline": "if setting_name == \"key_in_scale_color\":"
    },
    {
        "line": 284,
        "fullcodeline": "if setting_name == \"key_not_in_scale_color\":"
    },
    {
        "line": 296,
        "fullcodeline": "if setting_name == \"scale_key\":"
    },
    {
        "line": 302,
        "fullcodeline": "if setting_name == \"next_step\":"
    },
    {
        "line": 306,
        "fullcodeline": "if setting_name == \"set_sequence\":"
    },
    {
        "line": 314,
        "fullcodeline": "if setting_name == \"change_sequence_name\":"
    },
    {
        "line": 326,
        "fullcodeline": "if setting_name == \"change_step_value\":"
    },
    {
        "line": 338,
        "fullcodeline": "if setting_name == \"change_step_activation_method\":"
    },
    {
        "line": 350,
        "fullcodeline": "if setting_name == \"add_sequence\":"
    },
    {
        "line": 405,
        "fullcodeline": "if setting_name == \"remove_sequence\":"
    },
    {
        "line": 425,
        "fullcodeline": "if setting_name == \"add_step\":"
    },
    {
        "line": 465,
        "fullcodeline": "if setting_name == \"remove_step\":"
    },
    {
        "line": 492,
        "fullcodeline": "if setting_name == \"save_led_settings_to_step\" and second_value != \"\":"
    },
    {
        "line": 721,
        "fullcodeline": "if setting_name == \"screen_on\":"
    },
    {
        "line": 727,
        "fullcodeline": "if setting_name == \"reset_to_default\":"
    },
    {
        "line": 730,
        "fullcodeline": "if setting_name == \"restart_rpi\":"
    },
    {
        "line": 733,
        "fullcodeline": "if setting_name == \"turnoff_rpi\":"
    },
    {
        "line": 736,
        "fullcodeline": "if setting_name == \"update_rpi\":"
    },
    {
        "line": 742,
        "fullcodeline": "if setting_name == \"connect_ports\":"
    },
    {
        "line": 746,
        "fullcodeline": "if setting_name == \"disconnect_ports\":"
    },
    {
        "line": 750,
        "fullcodeline": "if setting_name == \"restart_rtp\":"
    },
    {
        "line": 753,
        "fullcodeline": "if setting_name == \"start_recording\":"
    },
    {
        "line": 757,
        "fullcodeline": "if setting_name == \"cancel_recording\":"
    },
    {
        "line": 761,
        "fullcodeline": "if setting_name == \"save_recording\":"
    },
    {
        "line": 767,
        "fullcodeline": "if setting_name == \"change_song_name\":"
    },
    {
        "line": 785,
        "fullcodeline": "if setting_name == \"remove_song\":"
    },
    {
        "line": 808,
        "fullcodeline": "if setting_name == \"download_song\":"
    },
    {
        "line": 829,
        "fullcodeline": "if setting_name == \"download_sheet_music\":"
    },
    {
        "line": 847,
        "fullcodeline": "if setting_name == \"start_midi_play\":"
    },
    {
        "line": 856,
        "fullcodeline": "if setting_name == \"stop_midi_play\":"
    },
    {
        "line": 862,
        "fullcodeline": "if setting_name == \"learning_load_song\":"
    },
    {
        "line": 868,
        "fullcodeline": "if setting_name == \"start_learning_song\":"
    },
    {
        "line": 874,
        "fullcodeline": "if setting_name == \"stop_learning_song\":"
    },
    {
        "line": 880,
        "fullcodeline": "if setting_name == \"change_practice\":"
    },
    {
        "line": 888,
        "fullcodeline": "if setting_name == \"change_tempo\":"
    },
    {
        "line": 896,
        "fullcodeline": "if setting_name == \"change_hands\":"
    },
    {
        "line": 904,
        "fullcodeline": "if setting_name == \"change_mute_hand\":"
    },
    {
        "line": 912,
        "fullcodeline": "if setting_name == \"learning_start_point\":"
    },
    {
        "line": 921,
        "fullcodeline": "if setting_name == \"learning_end_point\":"
    },
    {
        "line": 930,
        "fullcodeline": "if setting_name == \"set_current_time_as_start_point\":"
    },
    {
        "line": 938,
        "fullcodeline": "if setting_name == \"set_current_time_as_end_point\":"
    },
    {
        "line": 946,
        "fullcodeline": "if setting_name == \"change_handL_color\":"
    },
    {
        "line": 954,
        "fullcodeline": "if setting_name == \"change_handR_color\":"
    },
    {
        "line": 962,
        "fullcodeline": "if setting_name == \"change_learning_loop\":"
    },
    {
        "line": 970,
        "fullcodeline": "return jsonify(success=True)"
    },
    {
        "line": 9,
        "fullcodeline": "reload_sequence = False"
    },
    {
        "line": 13,
        "fullcodeline": "webinterface.ledsettings.sequence_active = False"
    },
    {
        "line": 16,
        "fullcodeline": "fastColorWipe(webinterface.ledstrip.strip, True, webinterface.ledsettings)"
    },
    {
        "line": 19,
        "fullcodeline": "rgb = wc.hex_to_rgb(\"#\" + value)"
    },
    {
        "line": 21,
        "fullcodeline": "webinterface.ledsettings.color_mode = \"Single\""
    },
    {
        "line": 23,
        "fullcodeline": "webinterface.ledsettings.red = rgb[0]"
    },
    {
        "line": 24,
        "fullcodeline": "webinterface.ledsettings.green = rgb[1]"
    },
    {
        "line": 25,
        "fullcodeline": "webinterface.ledsettings.blue = rgb[2]"
    },
    {
        "line": 35,
        "fullcodeline": "webinterface.ledsettings.mode = value"
    },
    {
        "line": 39,
        "fullcodeline": "webinterface.ledsettings.fadingspeed = int(value)"
    },
    {
        "line": 47,
        "fullcodeline": "webinterface.ledsettings.backlight_brightness_percent = int(value)"
    },
    {
        "line": 48,
        "fullcodeline": "webinterface.ledsettings.backlight_brightness = 255 * webinterface.ledsettings.backlight_brightness_percent / 100"
    },
    {
        "line": 53,
        "fullcodeline": "fastColorWipe(webinterface.ledstrip.strip, True, webinterface.ledsettings)"
    },
    {
        "line": 56,
        "fullcodeline": "rgb = wc.hex_to_rgb(\"#\" + value)"
    },
    {
        "line": 58,
        "fullcodeline": "webinterface.ledsettings.backlight_red = rgb[0]"
    },
    {
        "line": 59,
        "fullcodeline": "webinterface.ledsettings.backlight_green = rgb[1]"
    },
    {
        "line": 60,
        "fullcodeline": "webinterface.ledsettings.backlight_blue = rgb[2]"
    },
    {
        "line": 66,
        "fullcodeline": "fastColorWipe(webinterface.ledstrip.strip, True, webinterface.ledsettings)"
    },
    {
        "line": 69,
        "fullcodeline": "rgb = wc.hex_to_rgb(\"#\" + value)"
    },
    {
        "line": 71,
        "fullcodeline": "webinterface.ledsettings.adjacent_red = rgb[0]"
    },
    {
        "line": 72,
        "fullcodeline": "webinterface.ledsettings.adjacent_green = rgb[1]"
    },
    {
        "line": 73,
        "fullcodeline": "webinterface.ledsettings.adjacent_blue = rgb[2]"
    },
    {
        "line": 80,
        "fullcodeline": "webinterface.ledsettings.adjacent_mode = value"
    },
    {
        "line": 96,
        "fullcodeline": "webinterface.ledsettings.skipped_notes = value"
    },
    {
        "line": 130,
        "fullcodeline": "reload_sequence = True"
    },
    {
        "line": 134,
        "fullcodeline": "webinterface.ledsettings.color_mode = value"
    },
    {
        "line": 143,
        "fullcodeline": "settings = json.loads(value)"
    },
    {
        "line": 165,
        "fullcodeline": "rgb = wc.hex_to_rgb(\"#\" + value)"
    },
    {
        "line": 166,
        "fullcodeline": "webinterface.ledsettings.multicolor[int(second_value)][0] = rgb[0]"
    },
    {
        "line": 167,
        "fullcodeline": "webinterface.ledsettings.multicolor[int(second_value)][1] = rgb[1]"
    },
    {
        "line": 168,
        "fullcodeline": "webinterface.ledsettings.multicolor[int(second_value)][2] = rgb[2]"
    },
    {
        "line": 175,
        "fullcodeline": "webinterface.ledsettings.multicolor_range[int(second_value)][0] = int(value)"
    },
    {
        "line": 181,
        "fullcodeline": "webinterface.ledsettings.multicolor_range[int(second_value)][1] = int(value)"
    },
    {
        "line": 195,
        "fullcodeline": "webinterface.ledsettings.rainbow_offset = int(value)"
    },
    {
        "line": 201,
        "fullcodeline": "webinterface.ledsettings.rainbow_scale = int(value)"
    },
    {
        "line": 207,
        "fullcodeline": "webinterface.ledsettings.rainbow_timeshift = int(value)"
    },
    {
        "line": 213,
        "fullcodeline": "rgb = wc.hex_to_rgb(\"#\" + value)"
    },
    {
        "line": 214,
        "fullcodeline": "webinterface.ledsettings.speed_slowest[\"red\"] = rgb[0]"
    },
    {
        "line": 215,
        "fullcodeline": "webinterface.ledsettings.speed_slowest[\"green\"] = rgb[1]"
    },
    {
        "line": 216,
        "fullcodeline": "webinterface.ledsettings.speed_slowest[\"blue\"] = rgb[2]"
    },
    {
        "line": 225,
        "fullcodeline": "rgb = wc.hex_to_rgb(\"#\" + value)"
    },
    {
        "line": 226,
        "fullcodeline": "webinterface.ledsettings.speed_fastest[\"red\"] = rgb[0]"
    },
    {
        "line": 227,
        "fullcodeline": "webinterface.ledsettings.speed_fastest[\"green\"] = rgb[1]"
    },
    {
        "line": 228,
        "fullcodeline": "webinterface.ledsettings.speed_fastest[\"blue\"] = rgb[2]"
    },
    {
        "line": 237,
        "fullcodeline": "rgb = wc.hex_to_rgb(\"#\" + value)"
    },
    {
        "line": 238,
        "fullcodeline": "webinterface.ledsettings.gradient_start[\"red\"] = rgb[0]"
    },
    {
        "line": 239,
        "fullcodeline": "webinterface.ledsettings.gradient_start[\"green\"] = rgb[1]"
    },
    {
        "line": 240,
        "fullcodeline": "webinterface.ledsettings.gradient_start[\"blue\"] = rgb[2]"
    },
    {
        "line": 249,
        "fullcodeline": "rgb = wc.hex_to_rgb(\"#\" + value)"
    },
    {
        "line": 250,
        "fullcodeline": "webinterface.ledsettings.gradient_end[\"red\"] = rgb[0]"
    },
    {
        "line": 251,
        "fullcodeline": "webinterface.ledsettings.gradient_end[\"green\"] = rgb[1]"
    },
    {
        "line": 252,
        "fullcodeline": "webinterface.ledsettings.gradient_end[\"blue\"] = rgb[2]"
    },
    {
        "line": 261,
        "fullcodeline": "webinterface.ledsettings.speed_max_notes = int(value)"
    },
    {
        "line": 267,
        "fullcodeline": "webinterface.ledsettings.speed_period_in_seconds = float(value)"
    },
    {
        "line": 273,
        "fullcodeline": "rgb = wc.hex_to_rgb(\"#\" + value)"
    },
    {
        "line": 274,
        "fullcodeline": "webinterface.ledsettings.key_in_scale[\"red\"] = rgb[0]"
    },
    {
        "line": 275,
        "fullcodeline": "webinterface.ledsettings.key_in_scale[\"green\"] = rgb[1]"
    },
    {
        "line": 276,
        "fullcodeline": "webinterface.ledsettings.key_in_scale[\"blue\"] = rgb[2]"
    },
    {
        "line": 285,
        "fullcodeline": "rgb = wc.hex_to_rgb(\"#\" + value)"
    },
    {
        "line": 286,
        "fullcodeline": "webinterface.ledsettings.key_not_in_scale[\"red\"] = rgb[0]"
    },
    {
        "line": 287,
        "fullcodeline": "webinterface.ledsettings.key_not_in_scale[\"green\"] = rgb[1]"
    },
    {
        "line": 288,
        "fullcodeline": "webinterface.ledsettings.key_not_in_scale[\"blue\"] = rgb[2]"
    },
    {
        "line": 297,
        "fullcodeline": "webinterface.ledsettings.scale_key = int(value)"
    },
    {
        "line": 315,
        "fullcodeline": "sequences_tree = minidom.parse(\"sequences.xml\")"
    },
    {
        "line": 316,
        "fullcodeline": "sequence_to_edit = \"sequence_\" + str(value)"
    },
    {
        "line": 318,
        "fullcodeline": "sequences_tree.getElementsByTagName(sequence_to_edit)["
    },
    {
        "line": 322,
        "fullcodeline": "pretty_save(\"sequences.xml\", sequences_tree)"
    },
    {
        "line": 327,
        "fullcodeline": "sequences_tree = minidom.parse(\"sequences.xml\")"
    },
    {
        "line": 328,
        "fullcodeline": "sequence_to_edit = \"sequence_\" + str(value)"
    },
    {
        "line": 330,
        "fullcodeline": "sequences_tree.getElementsByTagName(sequence_to_edit)["
    },
    {
        "line": 334,
        "fullcodeline": "pretty_save(\"sequences.xml\", sequences_tree)"
    },
    {
        "line": 339,
        "fullcodeline": "sequences_tree = minidom.parse(\"sequences.xml\")"
    },
    {
        "line": 340,
        "fullcodeline": "sequence_to_edit = \"sequence_\" + str(value)"
    },
    {
        "line": 342,
        "fullcodeline": "sequences_tree.getElementsByTagName(sequence_to_edit)["
    },
    {
        "line": 346,
        "fullcodeline": "pretty_save(\"sequences.xml\", sequences_tree)"
    },
    {
        "line": 351,
        "fullcodeline": "sequences_tree = minidom.parse(\"sequences.xml\")"
    },
    {
        "line": 353,
        "fullcodeline": "sequences_amount = 1"
    },
    {
        "line": 359,
        "fullcodeline": "settings = sequences_tree.createElement(\"settings\")"
    },
    {
        "line": 361,
        "fullcodeline": "control_number = sequences_tree.createElement(\"control_number\")"
    },
    {
        "line": 362,
        "fullcodeline": "control_number.appendChild(sequences_tree.createTextNode(\"0\"))"
    },
    {
        "line": 363,
        "fullcodeline": "settings.appendChild(control_number)"
    },
    {
        "line": 365,
        "fullcodeline": "next_step = sequences_tree.createElement(\"next_step\")"
    },
    {
        "line": 366,
        "fullcodeline": "next_step.appendChild(sequences_tree.createTextNode(\"1\"))"
    },
    {
        "line": 367,
        "fullcodeline": "settings.appendChild(next_step)"
    },
    {
        "line": 369,
        "fullcodeline": "sequence_name = sequences_tree.createElement(\"sequence_name\")"
    },
    {
        "line": 370,
        "fullcodeline": "sequence_name.appendChild(sequences_tree.createTextNode(\"Sequence \" + str(sequences_amount)))"
    },
    {
        "line": 371,
        "fullcodeline": "settings.appendChild(sequence_name)"
    },
    {
        "line": 373,
        "fullcodeline": "step = sequences_tree.createElement(\"step_1\")"
    },
    {
        "line": 375,
        "fullcodeline": "color = sequences_tree.createElement(\"color\")"
    },
    {
        "line": 376,
        "fullcodeline": "color.appendChild(sequences_tree.createTextNode(\"RGB\"))"
    },
    {
        "line": 377,
        "fullcodeline": "step.appendChild(color)"
    },
    {
        "line": 379,
        "fullcodeline": "red = sequences_tree.createElement(\"Red\")"
    },
    {
        "line": 380,
        "fullcodeline": "red.appendChild(sequences_tree.createTextNode(\"255\"))"
    },
    {
        "line": 381,
        "fullcodeline": "step.appendChild(red)"
    },
    {
        "line": 383,
        "fullcodeline": "green = sequences_tree.createElement(\"Green\")"
    },
    {
        "line": 384,
        "fullcodeline": "green.appendChild(sequences_tree.createTextNode(\"255\"))"
    },
    {
        "line": 385,
        "fullcodeline": "step.appendChild(green)"
    },
    {
        "line": 387,
        "fullcodeline": "blue = sequences_tree.createElement(\"Blue\")"
    },
    {
        "line": 388,
        "fullcodeline": "blue.appendChild(sequences_tree.createTextNode(\"255\"))"
    },
    {
        "line": 389,
        "fullcodeline": "step.appendChild(blue)"
    },
    {
        "line": 391,
        "fullcodeline": "light_mode = sequences_tree.createElement(\"light_mode\")"
    },
    {
        "line": 392,
        "fullcodeline": "light_mode.appendChild(sequences_tree.createTextNode(\"Normal\"))"
    },
    {
        "line": 393,
        "fullcodeline": "step.appendChild(light_mode)"
    },
    {
        "line": 395,
        "fullcodeline": "element = sequences_tree.createElement(\"sequence_\" + str(sequences_amount))"
    },
    {
        "line": 396,
        "fullcodeline": "element.appendChild(settings)"
    },
    {
        "line": 397,
        "fullcodeline": "element.appendChild(step)"
    },
    {
        "line": 401,
        "fullcodeline": "pretty_save(\"sequences.xml\", sequences_tree)"
    },
    {
        "line": 406,
        "fullcodeline": "sequences_tree = minidom.parse(\"sequences.xml\")"
    },
    {
        "line": 409,
        "fullcodeline": "nodes = sequences_tree.getElementsByTagName(\"sequence_\" + str(value))"
    },
    {
        "line": 415,
        "fullcodeline": "i = 1"
    },
    {
        "line": 421,
        "fullcodeline": "pretty_save(\"sequences.xml\", sequences_tree)"
    },
    {
        "line": 426,
        "fullcodeline": "sequences_tree = minidom.parse(\"sequences.xml\")"
    },
    {
        "line": 428,
        "fullcodeline": "step_amount = 1"
    },
    {
        "line": 435,
        "fullcodeline": "step = sequences_tree.createElement(\"step_\" + str(step_amount))"
    },
    {
        "line": 437,
        "fullcodeline": "color = sequences_tree.createElement(\"color\")"
    },
    {
        "line": 439,
        "fullcodeline": "color.appendChild(sequences_tree.createTextNode(\"RGB\"))"
    },
    {
        "line": 440,
        "fullcodeline": "step.appendChild(color)"
    },
    {
        "line": 442,
        "fullcodeline": "red = sequences_tree.createElement(\"Red\")"
    },
    {
        "line": 443,
        "fullcodeline": "red.appendChild(sequences_tree.createTextNode(\"255\"))"
    },
    {
        "line": 444,
        "fullcodeline": "step.appendChild(red)"
    },
    {
        "line": 446,
        "fullcodeline": "green = sequences_tree.createElement(\"Green\")"
    },
    {
        "line": 447,
        "fullcodeline": "green.appendChild(sequences_tree.createTextNode(\"255\"))"
    },
    {
        "line": 448,
        "fullcodeline": "step.appendChild(green)"
    },
    {
        "line": 450,
        "fullcodeline": "blue = sequences_tree.createElement(\"Blue\")"
    },
    {
        "line": 451,
        "fullcodeline": "blue.appendChild(sequences_tree.createTextNode(\"255\"))"
    },
    {
        "line": 452,
        "fullcodeline": "step.appendChild(blue)"
    },
    {
        "line": 454,
        "fullcodeline": "light_mode = sequences_tree.createElement(\"light_mode\")"
    },
    {
        "line": 455,
        "fullcodeline": "light_mode.appendChild(sequences_tree.createTextNode(\"Normal\"))"
    },
    {
        "line": 456,
        "fullcodeline": "step.appendChild(light_mode)"
    },
    {
        "line": 460,
        "fullcodeline": "pretty_save(\"sequences.xml\", sequences_tree)"
    },
    {
        "line": 467,
        "fullcodeline": "second_value = int(second_value)"
    },
    {
        "line": 468,
        "fullcodeline": "second_value += 1"
    },
    {
        "line": 470,
        "fullcodeline": "sequences_tree = minidom.parse(\"sequences.xml\")"
    },
    {
        "line": 473,
        "fullcodeline": "nodes = sequences_tree.getElementsByTagName(\"sequence_\" + str(value))[0].getElementsByTagName("
    },
    {
        "line": 480,
        "fullcodeline": "i = 1"
    },
    {
        "line": 487,
        "fullcodeline": "pretty_save(\"sequences.xml\", sequences_tree)"
    },
    {
        "line": 495,
        "fullcodeline": "sequences_tree = minidom.parse(\"sequences.xml\")"
    },
    {
        "line": 497,
        "fullcodeline": "second_value = int(second_value)"
    },
    {
        "line": 498,
        "fullcodeline": "second_value += 1"
    },
    {
        "line": 500,
        "fullcodeline": "nodes = sequences_tree.getElementsByTagName(\"sequence_\" + str(value))[0].getElementsByTagName("
    },
    {
        "line": 507,
        "fullcodeline": "step = sequences_tree.createElement(\"step_\" + str(second_value))"
    },
    {
        "line": 510,
        "fullcodeline": "color_mode = sequences_tree.createElement(\"color\")"
    },
    {
        "line": 511,
        "fullcodeline": "color_mode.appendChild(sequences_tree.createTextNode(str(webinterface.ledsettings.color_mode)))"
    },
    {
        "line": 512,
        "fullcodeline": "step.appendChild(color_mode)"
    },
    {
        "line": 515,
        "fullcodeline": "mode = sequences_tree.createElement(\"light_mode\")"
    },
    {
        "line": 516,
        "fullcodeline": "mode.appendChild(sequences_tree.createTextNode(str(webinterface.ledsettings.mode)))"
    },
    {
        "line": 517,
        "fullcodeline": "step.appendChild(mode)"
    },
    {
        "line": 717,
        "fullcodeline": "pretty_save(\"sequences.xml\", sequences_tree)"
    },
    {
        "line": 731,
        "fullcodeline": "call(\"sudo /sbin/reboot now\", shell=True)"
    },
    {
        "line": 734,
        "fullcodeline": "call(\"sudo /sbin/shutdown -h now\", shell=True)"
    },
    {
        "line": 737,
        "fullcodeline": "call(\"sudo git reset --hard HEAD\", shell=True)"
    },
    {
        "line": 738,
        "fullcodeline": "call(\"sudo git checkout .\", shell=True)"
    },
    {
        "line": 739,
        "fullcodeline": "call(\"sudo git clean -fdx\", shell=True)"
    },
    {
        "line": 740,
        "fullcodeline": "call(\"sudo git pull origin master\", shell=True)"
    },
    {
        "line": 747,
        "fullcodeline": "call(\"sudo aconnect -x\", shell=True)"
    },
    {
        "line": 751,
        "fullcodeline": "call(\"sudo systemctl restart rtpmidid\", shell=True)"
    },
    {
        "line": 762,
        "fullcodeline": "now = datetime.datetime.now()"
    },
    {
        "line": 763,
        "fullcodeline": "current_date = now.strftime(\"%Y-%m-%d %H:%M\")"
    },
    {
        "line": 830,
        "fullcodeline": "file_types = [\".musicxml\", \".xml\", \".mxl\", \".abc\"]"
    },
    {
        "line": 831,
        "fullcodeline": "i = 0"
    },
    {
        "line": 848,
        "fullcodeline": "webinterface.saving.t = threading.Thread(target=play_midi, args=(value, webinterface.midiports,"
    },
    {
        "line": 858,
        "fullcodeline": "fastColorWipe(webinterface.ledstrip.strip, True, webinterface.ledsettings)"
    },
    {
        "line": 863,
        "fullcodeline": "webinterface.learning.t = threading.Thread(target=webinterface.learning.load_midi, args=(value,))"
    },
    {
        "line": 869,
        "fullcodeline": "webinterface.learning.t = threading.Thread(target=webinterface.learning.learn_midi)"
    },
    {
        "line": 875,
        "fullcodeline": "webinterface.learning.is_started_midi = False"
    },
    {
        "line": 876,
        "fullcodeline": "fastColorWipe(webinterface.ledstrip.strip, True, webinterface.ledsettings)"
    },
    {
        "line": 881,
        "fullcodeline": "value = int(value)"
    },
    {
        "line": 882,
        "fullcodeline": "webinterface.learning.practice = value"
    },
    {
        "line": 883,
        "fullcodeline": "webinterface.learning.practice = clamp(webinterface.learning.practice, 0, len(webinterface.learning.practiceList) - 1)"
    },
    {
        "line": 889,
        "fullcodeline": "value = int(value)"
    },
    {
        "line": 890,
        "fullcodeline": "webinterface.learning.set_tempo = value"
    },
    {
        "line": 891,
        "fullcodeline": "webinterface.learning.set_tempo = clamp(webinterface.learning.set_tempo, 10, 200)"
    },
    {
        "line": 897,
        "fullcodeline": "value = int(value)"
    },
    {
        "line": 898,
        "fullcodeline": "webinterface.learning.hands = value"
    },
    {
        "line": 899,
        "fullcodeline": "webinterface.learning.hands = clamp(webinterface.learning.hands, 0, len(webinterface.learning.handsList) - 1)"
    },
    {
        "line": 905,
        "fullcodeline": "value = int(value)"
    },
    {
        "line": 906,
        "fullcodeline": "webinterface.learning.mute_hand = value"
    },
    {
        "line": 907,
        "fullcodeline": "webinterface.learning.mute_hand = clamp(webinterface.learning.mute_hand, 0, len(webinterface.learning.mute_handList) - 1)"
    },
    {
        "line": 913,
        "fullcodeline": "value = int(value)"
    },
    {
        "line": 914,
        "fullcodeline": "webinterface.learning.start_point = value"
    },
    {
        "line": 915,
        "fullcodeline": "webinterface.learning.start_point = clamp(webinterface.learning.start_point, 0, webinterface.learning.end_point - 1)"
    },
    {
        "line": 922,
        "fullcodeline": "value = int(value)"
    },
    {
        "line": 923,
        "fullcodeline": "webinterface.learning.end_point = value"
    },
    {
        "line": 924,
        "fullcodeline": "webinterface.learning.end_point = clamp(webinterface.learning.end_point, webinterface.learning.start_point + 1, 100)"
    },
    {
        "line": 931,
        "fullcodeline": "webinterface.learning.start_point = round(float(webinterface.learning.current_idx * 100 / float(len(webinterface.learning.song_tracks))), 3)"
    },
    {
        "line": 932,
        "fullcodeline": "webinterface.learning.start_point = clamp(webinterface.learning.start_point, 0, webinterface.learning.end_point - 1)"
    },
    {
        "line": 939,
        "fullcodeline": "webinterface.learning.end_point = round(float(webinterface.learning.current_idx * 100 / float(len(webinterface.learning.song_tracks))), 3)"
    },
    {
        "line": 940,
        "fullcodeline": "webinterface.learning.end_point = clamp(webinterface.learning.end_point, webinterface.learning.start_point + 1, 100)"
    },
    {
        "line": 947,
        "fullcodeline": "value = int(value)"
    },
    {
        "line": 948,
        "fullcodeline": "webinterface.learning.hand_colorL += value"
    },
    {
        "line": 949,
        "fullcodeline": "webinterface.learning.hand_colorL = clamp(webinterface.learning.hand_colorL, 0, len(webinterface.learning.hand_colorList) - 1)"
    },
    {
        "line": 955,
        "fullcodeline": "value = int(value)"
    },
    {
        "line": 956,
        "fullcodeline": "webinterface.learning.hand_colorR += value"
    },
    {
        "line": 957,
        "fullcodeline": "webinterface.learning.hand_colorR = clamp(webinterface.learning.hand_colorR, 0, len(webinterface.learning.hand_colorList) - 1)"
    },
    {
        "line": 963,
        "fullcodeline": "value = int(value == 'true')"
    },
    {
        "line": 964,
        "fullcodeline": "webinterface.learning.is_loop_active = value"
    },
    {
        "line": 12,
        "fullcodeline": "webinterface.ledsettings.__init__(webinterface.usersettings)"
    },
    {
        "line": 27,
        "fullcodeline": "webinterface.usersettings.change_setting_value(\"color_mode\", webinterface.ledsettings.color_mode)"
    },
    {
        "line": 28,
        "fullcodeline": "webinterface.usersettings.change_setting_value(\"red\", rgb[0])"
    },
    {
        "line": 29,
        "fullcodeline": "webinterface.usersettings.change_setting_value(\"green\", rgb[1])"
    },
    {
        "line": 30,
        "fullcodeline": "webinterface.usersettings.change_setting_value(\"blue\", rgb[2])"
    },
    {
        "line": 32,
        "fullcodeline": "return jsonify(success=True, reload_sequence=reload_sequence)"
    },
    {
        "line": 36,
        "fullcodeline": "webinterface.usersettings.change_setting_value(\"mode\", value)"
    },
    {
        "line": 40,
        "fullcodeline": "webinterface.usersettings.change_setting_value(\"fadingspeed\", webinterface.ledsettings.fadingspeed)"
    },
    {
        "line": 43,
        "fullcodeline": "webinterface.usersettings.change_setting_value(\"brightness_percent\", int(value))"
    },
    {
        "line": 44,
        "fullcodeline": "webinterface.ledstrip.change_brightness(int(value), True)"
    },
    {
        "line": 49,
        "fullcodeline": "webinterface.usersettings.change_setting_value(\"backlight_brightness\","
    },
    {
        "line": 51,
        "fullcodeline": "webinterface.usersettings.change_setting_value(\"backlight_brightness_percent\","
    },
    {
        "line": 62,
        "fullcodeline": "webinterface.usersettings.change_setting_value(\"backlight_red\", rgb[0])"
    },
    {
        "line": 63,
        "fullcodeline": "webinterface.usersettings.change_setting_value(\"backlight_green\", rgb[1])"
    },
    {
        "line": 64,
        "fullcodeline": "webinterface.usersettings.change_setting_value(\"backlight_blue\", rgb[2])"
    },
    {
        "line": 75,
        "fullcodeline": "webinterface.usersettings.change_setting_value(\"adjacent_red\", rgb[0])"
    },
    {
        "line": 76,
        "fullcodeline": "webinterface.usersettings.change_setting_value(\"adjacent_green\", rgb[1])"
    },
    {
        "line": 77,
        "fullcodeline": "webinterface.usersettings.change_setting_value(\"adjacent_blue\", rgb[2])"
    },
    {
        "line": 81,
        "fullcodeline": "webinterface.usersettings.change_setting_value(\"adjacent_mode\", value)"
    },
    {
        "line": 84,
        "fullcodeline": "webinterface.usersettings.change_setting_value(\"input_port\", value)"
    },
    {
        "line": 85,
        "fullcodeline": "webinterface.midiports.change_port(\"inport\", value)"
    },
    {
        "line": 88,
        "fullcodeline": "webinterface.usersettings.change_setting_value(\"secondary_input_port\", value)"
    },
    {
        "line": 91,
        "fullcodeline": "webinterface.usersettings.change_setting_value(\"play_port\", value)"
    },
    {
        "line": 92,
        "fullcodeline": "webinterface.midiports.change_port(\"playport\", value)"
    },
    {
        "line": 95,
        "fullcodeline": "webinterface.usersettings.change_setting_value(\"skipped_notes\", value)"
    },
    {
        "line": 99,
        "fullcodeline": "webinterface.ledsettings.add_note_offset()"
    },
    {
        "line": 100,
        "fullcodeline": "return jsonify(success=True, reload=True)"
    },
    {
        "line": 103,
        "fullcodeline": "webinterface.ledsettings.append_note_offset()"
    },
    {
        "line": 104,
        "fullcodeline": "return jsonify(success=True, reload=True)"
    },
    {
        "line": 107,
        "fullcodeline": "webinterface.ledsettings.del_note_offset(int(value) + 1)"
    },
    {
        "line": 108,
        "fullcodeline": "return jsonify(success=True, reload=True)"
    },
    {
        "line": 111,
        "fullcodeline": "webinterface.usersettings.change_setting_value(\"note_offsets\", value)"
    },
    {
        "line": 114,
        "fullcodeline": "webinterface.ledsettings.update_note_offset(int(value) + 1, second_value)"
    },
    {
        "line": 115,
        "fullcodeline": "return jsonify(success=True, reload=True)"
    },
    {
        "line": 118,
        "fullcodeline": "webinterface.usersettings.change_setting_value(\"led_count\", int(value))"
    },
    {
        "line": 119,
        "fullcodeline": "webinterface.ledstrip.change_led_count(int(value), True)"
    },
    {
        "line": 122,
        "fullcodeline": "webinterface.usersettings.change_setting_value(\"shift\", int(value))"
    },
    {
        "line": 123,
        "fullcodeline": "webinterface.ledstrip.change_shift(int(value), True)"
    },
    {
        "line": 126,
        "fullcodeline": "webinterface.usersettings.change_setting_value(\"reverse\", int(value))"
    },
    {
        "line": 127,
        "fullcodeline": "webinterface.ledstrip.change_reverse(int(value), True)"
    },
    {
        "line": 131,
        "fullcodeline": "if (second_value == \"no_reload\"):"
    },
    {
        "line": 135,
        "fullcodeline": "webinterface.usersettings.change_setting_value(\"color_mode\", webinterface.ledsettings.color_mode)"
    },
    {
        "line": 136,
        "fullcodeline": "return jsonify(success=True, reload_sequence=reload_sequence)"
    },
    {
        "line": 139,
        "fullcodeline": "webinterface.ledsettings.addcolor()"
    },
    {
        "line": 140,
        "fullcodeline": "return jsonify(success=True, reload=True)"
    },
    {
        "line": 145,
        "fullcodeline": "webinterface.ledsettings.multicolor.clear()"
    },
    {
        "line": 146,
        "fullcodeline": "webinterface.ledsettings.multicolor_range.clear()"
    },
    {
        "line": 148,
        "fullcodeline": "for key, value in settings.items():"
    },
    {
        "line": 154,
        "fullcodeline": "webinterface.usersettings.change_setting_value(\"multicolor\", webinterface.ledsettings.multicolor)"
    },
    {
        "line": 155,
        "fullcodeline": "webinterface.usersettings.change_setting_value(\"multicolor_range\","
    },
    {
        "line": 158,
        "fullcodeline": "return jsonify(success=True)"
    },
    {
        "line": 161,
        "fullcodeline": "webinterface.ledsettings.deletecolor(int(value) + 1)"
    },
    {
        "line": 162,
        "fullcodeline": "return jsonify(success=True, reload=True)"
    },
    {
        "line": 170,
        "fullcodeline": "webinterface.usersettings.change_setting_value(\"multicolor\", webinterface.ledsettings.multicolor)"
    },
    {
        "line": 172,
        "fullcodeline": "return jsonify(success=True, reload_sequence=reload_sequence)"
    },
    {
        "line": 176,
        "fullcodeline": "webinterface.usersettings.change_setting_value(\"multicolor_range\", webinterface.ledsettings.multicolor_range)"
    },
    {
        "line": 178,
        "fullcodeline": "return jsonify(success=True, reload_sequence=reload_sequence)"
    },
    {
        "line": 182,
        "fullcodeline": "webinterface.usersettings.change_setting_value(\"multicolor_range\", webinterface.ledsettings.multicolor_range)"
    },
    {
        "line": 184,
        "fullcodeline": "return jsonify(success=True, reload_sequence=reload_sequence)"
    },
    {
        "line": 187,
        "fullcodeline": "webinterface.ledsettings.multicolor.clear()"
    },
    {
        "line": 188,
        "fullcodeline": "webinterface.ledsettings.multicolor_range.clear()"
    },
    {
        "line": 190,
        "fullcodeline": "webinterface.usersettings.change_setting_value(\"multicolor\", webinterface.ledsettings.multicolor)"
    },
    {
        "line": 191,
        "fullcodeline": "webinterface.usersettings.change_setting_value(\"multicolor_range\", webinterface.ledsettings.multicolor_range)"
    },
    {
        "line": 192,
        "fullcodeline": "return jsonify(success=True)"
    },
    {
        "line": 196,
        "fullcodeline": "webinterface.usersettings.change_setting_value(\"rainbow_offset\","
    },
    {
        "line": 198,
        "fullcodeline": "return jsonify(success=True, reload_sequence=reload_sequence)"
    },
    {
        "line": 202,
        "fullcodeline": "webinterface.usersettings.change_setting_value(\"rainbow_scale\","
    },
    {
        "line": 204,
        "fullcodeline": "return jsonify(success=True, reload_sequence=reload_sequence)"
    },
    {
        "line": 208,
        "fullcodeline": "webinterface.usersettings.change_setting_value(\"rainbow_timeshift\","
    },
    {
        "line": 210,
        "fullcodeline": "return jsonify(success=True, reload_sequence=reload_sequence)"
    },
    {
        "line": 218,
        "fullcodeline": "webinterface.usersettings.change_setting_value(\"speed_slowest_red\", rgb[0])"
    },
    {
        "line": 219,
        "fullcodeline": "webinterface.usersettings.change_setting_value(\"speed_slowest_green\", rgb[1])"
    },
    {
        "line": 220,
        "fullcodeline": "webinterface.usersettings.change_setting_value(\"speed_slowest_blue\", rgb[2])"
    },
    {
        "line": 222,
        "fullcodeline": "return jsonify(success=True, reload_sequence=reload_sequence)"
    },
    {
        "line": 230,
        "fullcodeline": "webinterface.usersettings.change_setting_value(\"speed_fastest_red\", rgb[0])"
    },
    {
        "line": 231,
        "fullcodeline": "webinterface.usersettings.change_setting_value(\"speed_fastest_green\", rgb[1])"
    },
    {
        "line": 232,
        "fullcodeline": "webinterface.usersettings.change_setting_value(\"speed_fastest_blue\", rgb[2])"
    },
    {
        "line": 234,
        "fullcodeline": "return jsonify(success=True, reload_sequence=reload_sequence)"
    },
    {
        "line": 242,
        "fullcodeline": "webinterface.usersettings.change_setting_value(\"gradient_start_red\", rgb[0])"
    },
    {
        "line": 243,
        "fullcodeline": "webinterface.usersettings.change_setting_value(\"gradient_start_green\", rgb[1])"
    },
    {
        "line": 244,
        "fullcodeline": "webinterface.usersettings.change_setting_value(\"gradient_start_blue\", rgb[2])"
    },
    {
        "line": 246,
        "fullcodeline": "return jsonify(success=True, reload_sequence=reload_sequence)"
    },
    {
        "line": 254,
        "fullcodeline": "webinterface.usersettings.change_setting_value(\"gradient_end_red\", rgb[0])"
    },
    {
        "line": 255,
        "fullcodeline": "webinterface.usersettings.change_setting_value(\"gradient_end_green\", rgb[1])"
    },
    {
        "line": 256,
        "fullcodeline": "webinterface.usersettings.change_setting_value(\"gradient_end_blue\", rgb[2])"
    },
    {
        "line": 258,
        "fullcodeline": "return jsonify(success=True, reload_sequence=reload_sequence)"
    },
    {
        "line": 262,
        "fullcodeline": "webinterface.usersettings.change_setting_value(\"speed_max_notes\", int(value))"
    },
    {
        "line": 264,
        "fullcodeline": "return jsonify(success=True, reload_sequence=reload_sequence)"
    },
    {
        "line": 268,
        "fullcodeline": "webinterface.usersettings.change_setting_value(\"speed_period_in_seconds\", float(value))"
    },
    {
        "line": 270,
        "fullcodeline": "return jsonify(success=True, reload_sequence=reload_sequence)"
    },
    {
        "line": 278,
        "fullcodeline": "webinterface.usersettings.change_setting_value(\"key_in_scale_red\", rgb[0])"
    },
    {
        "line": 279,
        "fullcodeline": "webinterface.usersettings.change_setting_value(\"key_in_scale_green\", rgb[1])"
    },
    {
        "line": 280,
        "fullcodeline": "webinterface.usersettings.change_setting_value(\"key_in_scale_blue\", rgb[2])"
    },
    {
        "line": 282,
        "fullcodeline": "return jsonify(success=True, reload_sequence=reload_sequence)"
    },
    {
        "line": 290,
        "fullcodeline": "webinterface.usersettings.change_setting_value(\"key_not_in_scale_red\", rgb[0])"
    },
    {
        "line": 291,
        "fullcodeline": "webinterface.usersettings.change_setting_value(\"key_not_in_scale_green\", rgb[1])"
    },
    {
        "line": 292,
        "fullcodeline": "webinterface.usersettings.change_setting_value(\"key_not_in_scale_blue\", rgb[2])"
    },
    {
        "line": 294,
        "fullcodeline": "return jsonify(success=True, reload_sequence=reload_sequence)"
    },
    {
        "line": 298,
        "fullcodeline": "webinterface.usersettings.change_setting_value(\"scale_key\", int(value))"
    },
    {
        "line": 300,
        "fullcodeline": "return jsonify(success=True, reload_sequence=reload_sequence)"
    },
    {
        "line": 303,
        "fullcodeline": "webinterface.ledsettings.set_sequence(0, 1, False)"
    },
    {
        "line": 304,
        "fullcodeline": "return jsonify(success=True, reload_sequence=reload_sequence)"
    },
    {
        "line": 307,
        "fullcodeline": "if (int(value) == 0):"
    },
    {
        "line": 312,
        "fullcodeline": "return jsonify(success=True, reload_sequence=reload_sequence)"
    },
    {
        "line": 320,
        "fullcodeline": "0].getElementsByTagName(\"sequence_name\")[0].firstChild.nodeValue = str(second_value)"
    },
    {
        "line": 324,
        "fullcodeline": "return jsonify(success=True, reload_sequence=reload_sequence)"
    },
    {
        "line": 332,
        "fullcodeline": "0].getElementsByTagName(\"next_step\")[0].firstChild.nodeValue = str(second_value)"
    },
    {
        "line": 336,
        "fullcodeline": "return jsonify(success=True, reload_sequence=reload_sequence)"
    },
    {
        "line": 344,
        "fullcodeline": "0].getElementsByTagName(\"control_number\")[0].firstChild.nodeValue = str(second_value)"
    },
    {
        "line": 348,
        "fullcodeline": "return jsonify(success=True, reload_sequence=reload_sequence)"
    },
    {
        "line": 399,
        "fullcodeline": "sequences_tree.getElementsByTagName(\"list\")[0].appendChild(element)"
    },
    {
        "line": 403,
        "fullcodeline": "return jsonify(success=True, reload_sequence=reload_sequence)"
    },
    {
        "line": 410,
        "fullcodeline": "for node in nodes:"
    },
    {
        "line": 416,
        "fullcodeline": "for sequence in sequences_tree.getElementsByTagName(\"list\")[0].childNodes:"
    },
    {
        "line": 423,
        "fullcodeline": "return jsonify(success=True, reload_sequence=reload_sequence)"
    },
    {
        "line": 458,
        "fullcodeline": "sequences_tree.getElementsByTagName(\"sequence_\" + str(value))[0].appendChild(step)"
    },
    {
        "line": 462,
        "fullcodeline": "return jsonify(success=True, reload_sequence=reload_sequence, reload_steps_list=True)"
    },
    {
        "line": 475,
        "fullcodeline": "for node in nodes:"
    },
    {
        "line": 481,
        "fullcodeline": "for step in sequences_tree.getElementsByTagName(\"sequence_\" + str(value))[0].childNodes:"
    },
    {
        "line": 489,
        "fullcodeline": "return jsonify(success=True, reload_sequence=reload_sequence)"
    },
    {
        "line": 502,
        "fullcodeline": "for node in nodes:"
    },
    {
        "line": 520,
        "fullcodeline": "if (webinterface.ledsettings.mode == \"Fading\" or webinterface.ledsettings.mode == \"Velocity\"):"
    },
    {
        "line": 540,
        "fullcodeline": "if (webinterface.ledsettings.color_mode == \"Single\"):"
    },
    {
        "line": 554,
        "fullcodeline": "if (webinterface.ledsettings.color_mode == \"Multicolor\"):"
    },
    {
        "line": 580,
        "fullcodeline": "if (webinterface.ledsettings.color_mode == \"Rainbow\"):"
    },
    {
        "line": 596,
        "fullcodeline": "if (webinterface.ledsettings.color_mode == \"Speed\"):"
    },
    {
        "line": 642,
        "fullcodeline": "if (webinterface.ledsettings.color_mode == \"Gradient\"):"
    },
    {
        "line": 676,
        "fullcodeline": "if (webinterface.ledsettings.color_mode == \"Scale\"):"
    },
    {
        "line": 719,
        "fullcodeline": "return jsonify(success=True, reload_sequence=reload_sequence, reload_steps_list=True)"
    },
    {
        "line": 722,
        "fullcodeline": "if (int(value) == 0):"
    },
    {
        "line": 728,
        "fullcodeline": "webinterface.usersettings.reset_to_default()"
    },
    {
        "line": 743,
        "fullcodeline": "webinterface.midiports.connectall()"
    },
    {
        "line": 744,
        "fullcodeline": "return jsonify(success=True, reload_ports=True)"
    },
    {
        "line": 748,
        "fullcodeline": "return jsonify(success=True, reload_ports=True)"
    },
    {
        "line": 754,
        "fullcodeline": "webinterface.saving.start_recording()"
    },
    {
        "line": 755,
        "fullcodeline": "return jsonify(success=True, reload_songs=True)"
    },
    {
        "line": 758,
        "fullcodeline": "webinterface.saving.cancel_recording()"
    },
    {
        "line": 759,
        "fullcodeline": "return jsonify(success=True, reload_songs=True)"
    },
    {
        "line": 764,
        "fullcodeline": "webinterface.saving.save(current_date)"
    },
    {
        "line": 765,
        "fullcodeline": "return jsonify(success=True, reload_songs=True)"
    },
    {
        "line": 771,
        "fullcodeline": "if \"_main\" in value:"
    },
    {
        "line": 783,
        "fullcodeline": "return jsonify(success=True, reload_songs=True)"
    },
    {
        "line": 786,
        "fullcodeline": "if \"_main\" in value:"
    },
    {
        "line": 806,
        "fullcodeline": "return jsonify(success=True, reload_songs=True)"
    },
    {
        "line": 809,
        "fullcodeline": "if \"_main\" in value:"
    },
    {
        "line": 832,
        "fullcodeline": "while i < len(file_types):"
    },
    {
        "line": 839,
        "fullcodeline": "webinterface.learning.convert_midi_to_abc(value)"
    },
    {
        "line": 852,
        "fullcodeline": "webinterface.saving.t.start()"
    },
    {
        "line": 854,
        "fullcodeline": "return jsonify(success=True, reload_songs=True)"
    },
    {
        "line": 857,
        "fullcodeline": "webinterface.saving.is_playing_midi.clear()"
    },
    {
        "line": 860,
        "fullcodeline": "return jsonify(success=True, reload_songs=True)"
    },
    {
        "line": 864,
        "fullcodeline": "webinterface.learning.t.start()"
    },
    {
        "line": 866,
        "fullcodeline": "return jsonify(success=True, reload_learning_settings=True)"
    },
    {
        "line": 870,
        "fullcodeline": "webinterface.learning.t.start()"
    },
    {
        "line": 872,
        "fullcodeline": "return jsonify(success=True)"
    },
    {
        "line": 878,
        "fullcodeline": "return jsonify(success=True)"
    },
    {
        "line": 884,
        "fullcodeline": "webinterface.usersettings.change_setting_value(\"practice\", webinterface.learning.practice)"
    },
    {
        "line": 886,
        "fullcodeline": "return jsonify(success=True)"
    },
    {
        "line": 892,
        "fullcodeline": "webinterface.usersettings.change_setting_value(\"set_tempo\", webinterface.learning.set_tempo)"
    },
    {
        "line": 894,
        "fullcodeline": "return jsonify(success=True)"
    },
    {
        "line": 900,
        "fullcodeline": "webinterface.usersettings.change_setting_value(\"hands\", webinterface.learning.hands)"
    },
    {
        "line": 902,
        "fullcodeline": "return jsonify(success=True)"
    },
    {
        "line": 908,
        "fullcodeline": "webinterface.usersettings.change_setting_value(\"mute_hand\", webinterface.learning.mute_hand)"
    },
    {
        "line": 910,
        "fullcodeline": "return jsonify(success=True)"
    },
    {
        "line": 916,
        "fullcodeline": "webinterface.usersettings.change_setting_value(\"start_point\", webinterface.learning.start_point)"
    },
    {
        "line": 917,
        "fullcodeline": "webinterface.learning.restart_learning()"
    },
    {
        "line": 919,
        "fullcodeline": "return jsonify(success=True)"
    },
    {
        "line": 925,
        "fullcodeline": "webinterface.usersettings.change_setting_value(\"end_point\", webinterface.learning.end_point)"
    },
    {
        "line": 926,
        "fullcodeline": "webinterface.learning.restart_learning()"
    },
    {
        "line": 928,
        "fullcodeline": "return jsonify(success=True)"
    },
    {
        "line": 933,
        "fullcodeline": "webinterface.usersettings.change_setting_value(\"start_point\", webinterface.learning.start_point)"
    },
    {
        "line": 934,
        "fullcodeline": "webinterface.learning.restart_learning()"
    },
    {
        "line": 936,
        "fullcodeline": "return jsonify(success=True, reload_learning_settings=True)"
    },
    {
        "line": 941,
        "fullcodeline": "webinterface.usersettings.change_setting_value(\"end_point\", webinterface.learning.end_point)"
    },
    {
        "line": 942,
        "fullcodeline": "webinterface.learning.restart_learning()"
    },
    {
        "line": 944,
        "fullcodeline": "return jsonify(success=True, reload_learning_settings=True)"
    },
    {
        "line": 950,
        "fullcodeline": "webinterface.usersettings.change_setting_value(\"hand_colorL\", webinterface.learning.hand_colorL)"
    },
    {
        "line": 952,
        "fullcodeline": "return jsonify(success=True, reload_learning_settings=True)"
    },
    {
        "line": 958,
        "fullcodeline": "webinterface.usersettings.change_setting_value(\"hand_colorR\", webinterface.learning.hand_colorR)"
    },
    {
        "line": 960,
        "fullcodeline": "return jsonify(success=True, reload_learning_settings=True)"
    },
    {
        "line": 965,
        "fullcodeline": "webinterface.usersettings.change_setting_value(\"is_loop_active\", webinterface.learning.is_loop_active)"
    },
    {
        "line": 967,
        "fullcodeline": "return jsonify(success=True)"
    },
    {
        "line": 50,
        "fullcodeline": "int(webinterface.ledsettings.backlight_brightness))"
    },
    {
        "line": 132,
        "fullcodeline": "reload_sequence = False"
    },
    {
        "line": 197,
        "fullcodeline": "int(webinterface.ledsettings.rainbow_offset))"
    },
    {
        "line": 203,
        "fullcodeline": "int(webinterface.ledsettings.rainbow_scale))"
    },
    {
        "line": 209,
        "fullcodeline": "int(webinterface.ledsettings.rainbow_timeshift))"
    },
    {
        "line": 309,
        "fullcodeline": "webinterface.ledsettings.sequence_active = False"
    },
    {
        "line": 357,
        "fullcodeline": "sequences_amount += 1"
    },
    {
        "line": 433,
        "fullcodeline": "step_amount += 1"
    },
    {
        "line": 521,
        "fullcodeline": "fadingspeed = sequences_tree.createElement(\"fadingspeed\")"
    },
    {
        "line": 537,
        "fullcodeline": "step.appendChild(fadingspeed)"
    },
    {
        "line": 541,
        "fullcodeline": "red = sequences_tree.createElement(\"Red\")"
    },
    {
        "line": 542,
        "fullcodeline": "red.appendChild(sequences_tree.createTextNode(str(webinterface.ledsettings.red)))"
    },
    {
        "line": 543,
        "fullcodeline": "step.appendChild(red)"
    },
    {
        "line": 545,
        "fullcodeline": "green = sequences_tree.createElement(\"Green\")"
    },
    {
        "line": 546,
        "fullcodeline": "green.appendChild(sequences_tree.createTextNode(str(webinterface.ledsettings.green)))"
    },
    {
        "line": 547,
        "fullcodeline": "step.appendChild(green)"
    },
    {
        "line": 549,
        "fullcodeline": "blue = sequences_tree.createElement(\"Blue\")"
    },
    {
        "line": 550,
        "fullcodeline": "blue.appendChild(sequences_tree.createTextNode(str(webinterface.ledsettings.blue)))"
    },
    {
        "line": 551,
        "fullcodeline": "step.appendChild(blue)"
    },
    {
        "line": 582,
        "fullcodeline": "rainbow_offset = sequences_tree.createElement(\"Offset\")"
    },
    {
        "line": 583,
        "fullcodeline": "rainbow_offset.appendChild(sequences_tree.createTextNode(str(webinterface.ledsettings.rainbow_offset)))"
    },
    {
        "line": 584,
        "fullcodeline": "step.appendChild(rainbow_offset)"
    },
    {
        "line": 586,
        "fullcodeline": "rainbow_scale = sequences_tree.createElement(\"Scale\")"
    },
    {
        "line": 587,
        "fullcodeline": "rainbow_scale.appendChild(sequences_tree.createTextNode(str(webinterface.ledsettings.rainbow_scale)))"
    },
    {
        "line": 588,
        "fullcodeline": "step.appendChild(rainbow_scale)"
    },
    {
        "line": 590,
        "fullcodeline": "rainbow_timeshift = sequences_tree.createElement(\"Timeshift\")"
    },
    {
        "line": 591,
        "fullcodeline": "rainbow_timeshift.appendChild("
    },
    {
        "line": 593,
        "fullcodeline": "step.appendChild(rainbow_timeshift)"
    },
    {
        "line": 598,
        "fullcodeline": "speed_slowest_red = sequences_tree.createElement(\"speed_slowest_red\")"
    },
    {
        "line": 599,
        "fullcodeline": "speed_slowest_red.appendChild("
    },
    {
        "line": 601,
        "fullcodeline": "step.appendChild(speed_slowest_red)"
    },
    {
        "line": 603,
        "fullcodeline": "speed_slowest_green = sequences_tree.createElement(\"speed_slowest_green\")"
    },
    {
        "line": 604,
        "fullcodeline": "speed_slowest_green.appendChild("
    },
    {
        "line": 606,
        "fullcodeline": "step.appendChild(speed_slowest_green)"
    },
    {
        "line": 608,
        "fullcodeline": "speed_slowest_blue = sequences_tree.createElement(\"speed_slowest_blue\")"
    },
    {
        "line": 609,
        "fullcodeline": "speed_slowest_blue.appendChild("
    },
    {
        "line": 611,
        "fullcodeline": "step.appendChild(speed_slowest_blue)"
    },
    {
        "line": 614,
        "fullcodeline": "speed_fastest_red = sequences_tree.createElement(\"speed_fastest_red\")"
    },
    {
        "line": 615,
        "fullcodeline": "speed_fastest_red.appendChild("
    },
    {
        "line": 617,
        "fullcodeline": "step.appendChild(speed_fastest_red)"
    },
    {
        "line": 619,
        "fullcodeline": "speed_fastest_green = sequences_tree.createElement(\"speed_fastest_green\")"
    },
    {
        "line": 620,
        "fullcodeline": "speed_fastest_green.appendChild("
    },
    {
        "line": 622,
        "fullcodeline": "step.appendChild(speed_fastest_green)"
    },
    {
        "line": 624,
        "fullcodeline": "speed_fastest_blue = sequences_tree.createElement(\"speed_fastest_blue\")"
    },
    {
        "line": 625,
        "fullcodeline": "speed_fastest_blue.appendChild("
    },
    {
        "line": 627,
        "fullcodeline": "step.appendChild(speed_fastest_blue)"
    },
    {
        "line": 632,
        "fullcodeline": "speed_max_notes = sequences_tree.createElement(\"speed_max_notes\")"
    },
    {
        "line": 633,
        "fullcodeline": "speed_max_notes.appendChild(sequences_tree.createTextNode(str(webinterface.ledsettings.speed_max_notes)))"
    },
    {
        "line": 634,
        "fullcodeline": "step.appendChild(speed_max_notes)"
    },
    {
        "line": 636,
        "fullcodeline": "speed_period_in_seconds = sequences_tree.createElement(\"speed_period_in_seconds\")"
    },
    {
        "line": 637,
        "fullcodeline": "speed_period_in_seconds.appendChild("
    },
    {
        "line": 639,
        "fullcodeline": "step.appendChild(speed_period_in_seconds)"
    },
    {
        "line": 644,
        "fullcodeline": "gradient_start_red = sequences_tree.createElement(\"gradient_start_red\")"
    },
    {
        "line": 645,
        "fullcodeline": "gradient_start_red.appendChild("
    },
    {
        "line": 647,
        "fullcodeline": "step.appendChild(gradient_start_red)"
    },
    {
        "line": 649,
        "fullcodeline": "gradient_start_green = sequences_tree.createElement(\"gradient_start_green\")"
    },
    {
        "line": 650,
        "fullcodeline": "gradient_start_green.appendChild("
    },
    {
        "line": 652,
        "fullcodeline": "step.appendChild(gradient_start_green)"
    },
    {
        "line": 654,
        "fullcodeline": "gradient_start_blue = sequences_tree.createElement(\"gradient_start_blue\")"
    },
    {
        "line": 655,
        "fullcodeline": "gradient_start_blue.appendChild("
    },
    {
        "line": 657,
        "fullcodeline": "step.appendChild(gradient_start_blue)"
    },
    {
        "line": 660,
        "fullcodeline": "gradient_end_red = sequences_tree.createElement(\"gradient_end_red\")"
    },
    {
        "line": 661,
        "fullcodeline": "gradient_end_red.appendChild("
    },
    {
        "line": 663,
        "fullcodeline": "step.appendChild(gradient_end_red)"
    },
    {
        "line": 665,
        "fullcodeline": "gradient_end_green = sequences_tree.createElement(\"gradient_end_green\")"
    },
    {
        "line": 666,
        "fullcodeline": "gradient_end_green.appendChild("
    },
    {
        "line": 668,
        "fullcodeline": "step.appendChild(gradient_end_green)"
    },
    {
        "line": 670,
        "fullcodeline": "gradient_end_blue = sequences_tree.createElement(\"gradient_end_blue\")"
    },
    {
        "line": 671,
        "fullcodeline": "gradient_end_blue.appendChild("
    },
    {
        "line": 673,
        "fullcodeline": "step.appendChild(gradient_end_blue)"
    },
    {
        "line": 678,
        "fullcodeline": "key_in_scale_red = sequences_tree.createElement(\"key_in_scale_red\")"
    },
    {
        "line": 679,
        "fullcodeline": "key_in_scale_red.appendChild("
    },
    {
        "line": 681,
        "fullcodeline": "step.appendChild(key_in_scale_red)"
    },
    {
        "line": 683,
        "fullcodeline": "key_in_scale_green = sequences_tree.createElement(\"key_in_scale_green\")"
    },
    {
        "line": 684,
        "fullcodeline": "key_in_scale_green.appendChild("
    },
    {
        "line": 686,
        "fullcodeline": "step.appendChild(key_in_scale_green)"
    },
    {
        "line": 688,
        "fullcodeline": "key_in_scale_blue = sequences_tree.createElement(\"key_in_scale_blue\")"
    },
    {
        "line": 689,
        "fullcodeline": "key_in_scale_blue.appendChild("
    },
    {
        "line": 691,
        "fullcodeline": "step.appendChild(key_in_scale_blue)"
    },
    {
        "line": 694,
        "fullcodeline": "key_not_in_scale_red = sequences_tree.createElement(\"key_not_in_scale_red\")"
    },
    {
        "line": 695,
        "fullcodeline": "key_not_in_scale_red.appendChild("
    },
    {
        "line": 697,
        "fullcodeline": "step.appendChild(key_not_in_scale_red)"
    },
    {
        "line": 699,
        "fullcodeline": "key_not_in_scale_green = sequences_tree.createElement(\"key_not_in_scale_green\")"
    },
    {
        "line": 700,
        "fullcodeline": "key_not_in_scale_green.appendChild("
    },
    {
        "line": 702,
        "fullcodeline": "step.appendChild(key_not_in_scale_green)"
    },
    {
        "line": 704,
        "fullcodeline": "key_not_in_scale_blue = sequences_tree.createElement(\"key_not_in_scale_blue\")"
    },
    {
        "line": 705,
        "fullcodeline": "key_not_in_scale_blue.appendChild("
    },
    {
        "line": 707,
        "fullcodeline": "step.appendChild(key_not_in_scale_blue)"
    },
    {
        "line": 768,
        "fullcodeline": "if os.path.exists(\"Songs/\" + second_value):"
    },
    {
        "line": 772,
        "fullcodeline": "search_name = value.replace(\"_main.mid\", \"\")"
    },
    {
        "line": 778,
        "fullcodeline": "os.rename('Songs/' + value, 'Songs/' + second_value)"
    },
    {
        "line": 779,
        "fullcodeline": "os.rename('Songs/cache/' + value + \".p\", 'Songs/cache/' + second_value + \".p\")"
    },
    {
        "line": 787,
        "fullcodeline": "name_no_suffix = value.replace(\"_main.mid\", \"\")"
    },
    {
        "line": 792,
        "fullcodeline": "os.remove(\"Songs/\" + value)"
    },
    {
        "line": 794,
        "fullcodeline": "file_types = [\".musicxml\", \".xml\", \".mxl\", \".abc\"]"
    },
    {
        "line": 810,
        "fullcodeline": "zipObj = ZipFile(\"Songs/\" + value.replace(\".mid\", \"\") + \".zip\", 'w')"
    },
    {
        "line": 811,
        "fullcodeline": "name_no_suffix = value.replace(\"_main.mid\", \"\")"
    },
    {
        "line": 812,
        "fullcodeline": "songs_count = 0"
    },
    {
        "line": 817,
        "fullcodeline": "zipObj.close()"
    },
    {
        "line": 149,
        "fullcodeline": "rgb = wc.hex_to_rgb(\"#\" + value[\"color\"])"
    },
    {
        "line": 308,
        "fullcodeline": "webinterface.ledsettings.__init__(webinterface.usersettings)"
    },
    {
        "line": 311,
        "fullcodeline": "webinterface.ledsettings.set_sequence(int(value) - 1, 0)"
    },
    {
        "line": 355,
        "fullcodeline": "if (len(sequences_tree.getElementsByTagName(\"sequence_\" + str(sequences_amount))) == 0):"
    },
    {
        "line": 411,
        "fullcodeline": "parent = node.parentNode"
    },
    {
        "line": 412,
        "fullcodeline": "parent.removeChild(node)"
    },
    {
        "line": 430,
        "fullcodeline": "if (len(sequences_tree.getElementsByTagName(\"sequence_\" + str(value))[0].getElementsByTagName("
    },
    {
        "line": 474,
        "fullcodeline": "\"step_\" + str(second_value))"
    },
    {
        "line": 476,
        "fullcodeline": "parent = node.parentNode"
    },
    {
        "line": 477,
        "fullcodeline": "parent.removeChild(node)"
    },
    {
        "line": 501,
        "fullcodeline": "\"step_\" + str(second_value))"
    },
    {
        "line": 503,
        "fullcodeline": "parent = node.parentNode"
    },
    {
        "line": 504,
        "fullcodeline": "parent.removeChild(node)"
    },
    {
        "line": 524,
        "fullcodeline": "if (webinterface.ledsettings.fadingspeed == \"Slow\"):"
    },
    {
        "line": 559,
        "fullcodeline": "for i in range(len(multicolor)):"
    },
    {
        "line": 570,
        "fullcodeline": "for i in range(len(multicolor_range)):"
    },
    {
        "line": 592,
        "fullcodeline": "sequences_tree.createTextNode(str(webinterface.ledsettings.rainbow_timeshift)))"
    },
    {
        "line": 600,
        "fullcodeline": "sequences_tree.createTextNode(str(webinterface.ledsettings.speed_slowest[\"red\"])))"
    },
    {
        "line": 605,
        "fullcodeline": "sequences_tree.createTextNode(str(webinterface.ledsettings.speed_slowest[\"green\"])))"
    },
    {
        "line": 610,
        "fullcodeline": "sequences_tree.createTextNode(str(webinterface.ledsettings.speed_slowest[\"blue\"])))"
    },
    {
        "line": 616,
        "fullcodeline": "sequences_tree.createTextNode(str(webinterface.ledsettings.speed_fastest[\"red\"])))"
    },
    {
        "line": 621,
        "fullcodeline": "sequences_tree.createTextNode(str(webinterface.ledsettings.speed_fastest[\"green\"])))"
    },
    {
        "line": 626,
        "fullcodeline": "sequences_tree.createTextNode(str(webinterface.ledsettings.speed_fastest[\"blue\"])))"
    },
    {
        "line": 638,
        "fullcodeline": "sequences_tree.createTextNode(str(webinterface.ledsettings.speed_period_in_seconds)))"
    },
    {
        "line": 646,
        "fullcodeline": "sequences_tree.createTextNode(str(webinterface.ledsettings.gradient_start[\"red\"])))"
    },
    {
        "line": 651,
        "fullcodeline": "sequences_tree.createTextNode(str(webinterface.ledsettings.gradient_start[\"green\"])))"
    },
    {
        "line": 656,
        "fullcodeline": "sequences_tree.createTextNode(str(webinterface.ledsettings.gradient_start[\"blue\"])))"
    },
    {
        "line": 662,
        "fullcodeline": "sequences_tree.createTextNode(str(webinterface.ledsettings.gradient_end[\"red\"])))"
    },
    {
        "line": 667,
        "fullcodeline": "sequences_tree.createTextNode(str(webinterface.ledsettings.gradient_end[\"green\"])))"
    },
    {
        "line": 672,
        "fullcodeline": "sequences_tree.createTextNode(str(webinterface.ledsettings.gradient_end[\"blue\"])))"
    },
    {
        "line": 680,
        "fullcodeline": "sequences_tree.createTextNode(str(webinterface.ledsettings.key_in_scale[\"red\"])))"
    },
    {
        "line": 685,
        "fullcodeline": "sequences_tree.createTextNode(str(webinterface.ledsettings.key_in_scale[\"green\"])))"
    },
    {
        "line": 690,
        "fullcodeline": "sequences_tree.createTextNode(str(webinterface.ledsettings.key_in_scale[\"blue\"])))"
    },
    {
        "line": 696,
        "fullcodeline": "sequences_tree.createTextNode(str(webinterface.ledsettings.key_not_in_scale[\"red\"])))"
    },
    {
        "line": 701,
        "fullcodeline": "sequences_tree.createTextNode(str(webinterface.ledsettings.key_not_in_scale[\"green\"])))"
    },
    {
        "line": 706,
        "fullcodeline": "sequences_tree.createTextNode(str(webinterface.ledsettings.key_not_in_scale[\"blue\"])))"
    },
    {
        "line": 710,
        "fullcodeline": "sequences_tree.getElementsByTagName(\"sequence_\" + str(value))["
    },
    {
        "line": 723,
        "fullcodeline": "webinterface.menu.disable_screen()"
    },
    {
        "line": 725,
        "fullcodeline": "webinterface.menu.enable_screen()"
    },
    {
        "line": 769,
        "fullcodeline": "return jsonify(success=False, reload_songs=True, error=second_value + \" already exists\")"
    },
    {
        "line": 773,
        "fullcodeline": "for fname in os.listdir('Songs'):"
    },
    {
        "line": 788,
        "fullcodeline": "for fname in os.listdir('Songs'):"
    },
    {
        "line": 795,
        "fullcodeline": "for file_type in file_types:"
    },
    {
        "line": 813,
        "fullcodeline": "for fname in os.listdir('Songs'):"
    },
    {
        "line": 818,
        "fullcodeline": "if songs_count == 1:"
    },
    {
        "line": 826,
        "fullcodeline": "return send_file(safe_join(\"../Songs/\" + value), mimetype='application/x-csv', attachment_filename=value,"
    },
    {
        "line": 841,
        "fullcodeline": "return send_file(safe_join(\"../Songs/\", value.replace(\".mid\", \".abc\")), mimetype='application/x-csv',"
    },
    {
        "line": 151,
        "fullcodeline": "webinterface.ledsettings.multicolor.append([int(rgb[0]), int(rgb[1]), int(rgb[2])])"
    },
    {
        "line": 152,
        "fullcodeline": "webinterface.ledsettings.multicolor_range.append([int(value[\"range\"][0]), int(value[\"range\"][1])])"
    },
    {
        "line": 417,
        "fullcodeline": "if (sequence.nodeType == 1):"
    },
    {
        "line": 482,
        "fullcodeline": "if (step.nodeType == 1 and step.tagName != \"settings\"):"
    },
    {
        "line": 525,
        "fullcodeline": "fadingspeed.appendChild(sequences_tree.createTextNode(\"10\"))"
    },
    {
        "line": 802,
        "fullcodeline": "os.remove(\"Songs/cache/\" + value + \".p\")"
    },
    {
        "line": 819,
        "fullcodeline": "os.remove(\"Songs/\" + value.replace(\".mid\", \"\") + \".zip\")"
    },
    {
        "line": 834,
        "fullcodeline": "new_name = value.replace(\".mid\", file_types[i])"
    },
    {
        "line": 842,
        "fullcodeline": "attachment_filename=value.replace(\".mid\", \".abc\"), as_attachment=True)"
    },
    {
        "line": 844,
        "fullcodeline": "print(\"Converting failed\")"
    },
    {
        "line": 418,
        "fullcodeline": "sequences_tree.getElementsByTagName(sequence.nodeName)[0].tagName = \"sequence_\" + str(i)"
    },
    {
        "line": 419,
        "fullcodeline": "i += 1"
    },
    {
        "line": 483,
        "fullcodeline": "sequences_tree.getElementsByTagName(\"sequence_\" + str(value))[0].getElementsByTagName(step.nodeName)["
    },
    {
        "line": 485,
        "fullcodeline": "i += 1"
    },
    {
        "line": 526,
        "fullcodeline": "elif (webinterface.ledsettings.fadingspeed == \"Medium\"):"
    },
    {
        "line": 560,
        "fullcodeline": "color = sequences_tree.createElement(\"color_\" + str(i + 1))"
    },
    {
        "line": 561,
        "fullcodeline": "new_multicolor = str(multicolor[i])"
    },
    {
        "line": 562,
        "fullcodeline": "new_multicolor = new_multicolor.replace(\"[\", \"\")"
    },
    {
        "line": 563,
        "fullcodeline": "new_multicolor = new_multicolor.replace(\"]\", \"\")"
    },
    {
        "line": 565,
        "fullcodeline": "color.appendChild(sequences_tree.createTextNode(new_multicolor))"
    },
    {
        "line": 566,
        "fullcodeline": "step.appendChild(color)"
    },
    {
        "line": 571,
        "fullcodeline": "color_range = sequences_tree.createElement(\"color_range_\" + str(i + 1))"
    },
    {
        "line": 572,
        "fullcodeline": "new_multicolor_range = str(multicolor_range[i])"
    },
    {
        "line": 574,
        "fullcodeline": "new_multicolor_range = new_multicolor_range.replace(\"[\", \"\")"
    },
    {
        "line": 575,
        "fullcodeline": "new_multicolor_range = new_multicolor_range.replace(\"]\", \"\")"
    },
    {
        "line": 576,
        "fullcodeline": "color_range.appendChild(sequences_tree.createTextNode(new_multicolor_range))"
    },
    {
        "line": 577,
        "fullcodeline": "step.appendChild(color_range)"
    },
    {
        "line": 715,
        "fullcodeline": "sequences_tree.getElementsByTagName(\"sequence_\" + str(value))[0].appendChild(step)"
    },
    {
        "line": 820,
        "fullcodeline": "return send_file(\"../Songs/\" + value, mimetype='application/x-csv', attachment_filename=value,"
    },
    {
        "line": 823,
        "fullcodeline": "return send_file(\"../Songs/\" + value.replace(\".mid\", \"\") + \".zip\", mimetype='application/x-csv',"
    },
    {
        "line": 835,
        "fullcodeline": "return send_file(\"../Songs/\" + new_name, mimetype='application/x-csv', attachment_filename=new_name,"
    },
    {
        "line": 484,
        "fullcodeline": "0].tagName = \"step_\" + str(i)"
    },
    {
        "line": 527,
        "fullcodeline": "fadingspeed.appendChild(sequences_tree.createTextNode(\"20\"))"
    },
    {
        "line": 712,
        "fullcodeline": "sequences_tree.getElementsByTagName(\"sequence_\" + str(value))["
    },
    {
        "line": 774,
        "fullcodeline": "if search_name in fname:"
    },
    {
        "line": 789,
        "fullcodeline": "if name_no_suffix in fname:"
    },
    {
        "line": 804,
        "fullcodeline": "print(\"No cache file for \" + value)"
    },
    {
        "line": 814,
        "fullcodeline": "if name_no_suffix in fname and \".zip\" not in fname:"
    },
    {
        "line": 824,
        "fullcodeline": "attachment_filename=value.replace(\".mid\", \"\") + \".zip\", as_attachment=True)"
    },
    {
        "line": 838,
        "fullcodeline": "i += 1"
    },
    {
        "line": 431,
        "fullcodeline": "\"step_\" + str(step_amount))) == 0):"
    },
    {
        "line": 528,
        "fullcodeline": "elif (webinterface.ledsettings.fadingspeed == \"Fast\"):"
    },
    {
        "line": 713,
        "fullcodeline": "0].getElementsByTagName(\"step_\" + str(second_value + 1))[0])"
    },
    {
        "line": 775,
        "fullcodeline": "new_name = second_value.replace(\".mid\", \"\") + fname.replace(search_name, \"\")"
    },
    {
        "line": 776,
        "fullcodeline": "os.rename('Songs/' + fname, 'Songs/' + new_name)"
    },
    {
        "line": 790,
        "fullcodeline": "os.remove(\"Songs/\" + fname)"
    },
    {
        "line": 797,
        "fullcodeline": "os.remove(\"Songs/\" + value.replace(\".mid\", file_type))"
    },
    {
        "line": 815,
        "fullcodeline": "songs_count += 1"
    },
    {
        "line": 816,
        "fullcodeline": "zipObj.write(\"Songs/\" + fname)"
    },
    {
        "line": 529,
        "fullcodeline": "fadingspeed.appendChild(sequences_tree.createTextNode(\"40\"))"
    },
    {
        "line": 530,
        "fullcodeline": "elif (webinterface.ledsettings.fadingspeed == \"Very fast\"):"
    },
    {
        "line": 799,
        "fullcodeline": "pass"
    },
    {
        "line": 531,
        "fullcodeline": "fadingspeed.appendChild(sequences_tree.createTextNode(\"50\"))"
    },
    {
        "line": 532,
        "fullcodeline": "elif (webinterface.ledsettings.fadingspeed == \"Instant\"):"
    },
    {
        "line": 533,
        "fullcodeline": "fadingspeed.appendChild(sequences_tree.createTextNode(\"1000\"))"
    },
    {
        "line": 534,
        "fullcodeline": "elif (webinterface.ledsettings.fadingspeed == \"Very slow\"):"
    },
    {
        "line": 535,
        "fullcodeline": "fadingspeed.appendChild(sequences_tree.createTextNode(\"2\"))"
    }
]