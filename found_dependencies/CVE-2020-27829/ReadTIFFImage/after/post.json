[
    {
        "line": 38,
        "fullcodeline": "*pixel_info = (MemoryInfo *) NULL;"
    },
    {
        "line": 87,
        "fullcodeline": "*sans[2] = { NULL, NULL };"
    },
    {
        "line": 92,
        "fullcodeline": "assert(image_info != (const ImageInfo *) NULL);"
    },
    {
        "line": 93,
        "fullcodeline": "assert(image_info->signature == MagickCoreSignature);"
    },
    {
        "line": 97,
        "fullcodeline": "assert(exception != (ExceptionInfo *) NULL);"
    },
    {
        "line": 98,
        "fullcodeline": "assert(exception->signature == MagickCoreSignature);"
    },
    {
        "line": 99,
        "fullcodeline": "image=AcquireImage(image_info,exception);"
    },
    {
        "line": 100,
        "fullcodeline": "status=OpenBlob(image_info,image,ReadBinaryBlobMode,exception);"
    },
    {
        "line": 106,
        "fullcodeline": "(void) SetMagickThreadValue(tiff_exception,exception);"
    },
    {
        "line": 107,
        "fullcodeline": "tiff=TIFFClientOpen(image->filename,\"rb\",(thandle_t) image,TIFFReadBlob,"
    },
    {
        "line": 150,
        "fullcodeline": "more_frames=MagickTrue;"
    },
    {
        "line": 980,
        "fullcodeline": "TIFFClose(tiff);"
    },
    {
        "line": 94,
        "fullcodeline": "if (image_info->debug != MagickFalse)"
    },
    {
        "line": 101,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 110,
        "fullcodeline": "if (tiff == (TIFF *) NULL)"
    },
    {
        "line": 115,
        "fullcodeline": "if (exception->severity > ErrorException)"
    },
    {
        "line": 121,
        "fullcodeline": "if (image_info->number_scenes != 0)"
    },
    {
        "line": 979,
        "fullcodeline": "} while ((status != MagickFalse) && (more_frames != MagickFalse));"
    },
    {
        "line": 981,
        "fullcodeline": "if (status != MagickFalse)"
    },
    {
        "line": 983,
        "fullcodeline": "if ((image_info->number_scenes != 0) &&"
    },
    {
        "line": 986,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 988,
        "fullcodeline": "return(GetFirstImageInList(image));"
    },
    {
        "line": 95,
        "fullcodeline": "(void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\","
    },
    {
        "line": 103,
        "fullcodeline": "image=DestroyImageList(image);"
    },
    {
        "line": 112,
        "fullcodeline": "image=DestroyImageList(image);"
    },
    {
        "line": 117,
        "fullcodeline": "TIFFClose(tiff);"
    },
    {
        "line": 118,
        "fullcodeline": "image=DestroyImageList(image);"
    },
    {
        "line": 154,
        "fullcodeline": "photometric=PHOTOMETRIC_RGB;"
    },
    {
        "line": 258,
        "fullcodeline": "image->columns=(size_t) width;"
    },
    {
        "line": 259,
        "fullcodeline": "image->rows=(size_t) height;"
    },
    {
        "line": 260,
        "fullcodeline": "image->depth=(size_t) bits_per_sample;"
    },
    {
        "line": 264,
        "fullcodeline": "image->endian=MSBEndian;"
    },
    {
        "line": 288,
        "fullcodeline": "status=TIFFGetProfiles(tiff,image,exception);"
    },
    {
        "line": 294,
        "fullcodeline": "status=TIFFGetProperties(tiff,image,exception);"
    },
    {
        "line": 300,
        "fullcodeline": "option=GetImageOption(image_info,\"tiff:exif-properties\");"
    },
    {
        "line": 399,
        "fullcodeline": "quantum_info=(QuantumInfo *) NULL;"
    },
    {
        "line": 413,
        "fullcodeline": "value=(unsigned short) image->scene;"
    },
    {
        "line": 464,
        "fullcodeline": "status=SetImageExtent(image,image->columns,image->rows,exception);"
    },
    {
        "line": 470,
        "fullcodeline": "status=SetImageColorspace(image,image->colorspace,exception);"
    },
    {
        "line": 471,
        "fullcodeline": "status&=ResetImagePixels(image,exception);"
    },
    {
        "line": 480,
        "fullcodeline": "quantum_info=AcquireQuantumInfo(image_info,image);"
    },
    {
        "line": 491,
        "fullcodeline": "status=MagickTrue;"
    },
    {
        "line": 507,
        "fullcodeline": "extra_samples=0;"
    },
    {
        "line": 508,
        "fullcodeline": "tiff_status=TIFFGetFieldDefaulted(tiff,TIFFTAG_EXTRASAMPLES,&extra_samples,"
    },
    {
        "line": 544,
        "fullcodeline": "method=ReadGenericMethod;"
    },
    {
        "line": 545,
        "fullcodeline": "rows_per_strip=(uint32) image->rows;"
    },
    {
        "line": 577,
        "fullcodeline": "quantum_info->endian=LSBEndian;"
    },
    {
        "line": 578,
        "fullcodeline": "quantum_type=RGBQuantum;"
    },
    {
        "line": 583,
        "fullcodeline": "number_pixels=MagickMax(TIFFScanlineSize(tiff),MagickMax((ssize_t)"
    },
    {
        "line": 586,
        "fullcodeline": "pixel_info=AcquireVirtualMemory(number_pixels,sizeof(uint32));"
    },
    {
        "line": 589,
        "fullcodeline": "pixels=(unsigned char *) GetVirtualMemoryBlob(pixel_info);"
    },
    {
        "line": 590,
        "fullcodeline": "(void) memset(pixels,0,number_pixels*sizeof(uint32));"
    },
    {
        "line": 591,
        "fullcodeline": "quantum_type=IndexQuantum;"
    },
    {
        "line": 592,
        "fullcodeline": "pad=(size_t) MagickMax((ssize_t) samples_per_pixel-1,0);"
    },
    {
        "line": 940,
        "fullcodeline": "pixel_info=RelinquishVirtualMemory(pixel_info);"
    },
    {
        "line": 941,
        "fullcodeline": "SetQuantumImageType(image,quantum_type);"
    },
    {
        "line": 961,
        "fullcodeline": "more_frames=TIFFReadDirectory(tiff) != 0 ? MagickTrue : MagickFalse;"
    },
    {
        "line": 982,
        "fullcodeline": "TIFFReadPhotoshopLayers(image_info,image,exception);"
    },
    {
        "line": 984,
        "fullcodeline": "(image_info->scene >= GetImageListLength(image)))"
    },
    {
        "line": 985,
        "fullcodeline": "status=MagickFalse;"
    },
    {
        "line": 104,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 113,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 119,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 128,
        "fullcodeline": "if (image_info->scene < (size_t) TIFFNumberOfDirectories(tiff))"
    },
    {
        "line": 155,
        "fullcodeline": "if ((TIFFGetField(tiff,TIFFTAG_IMAGEWIDTH,&width) != 1) ||"
    },
    {
        "line": 170,
        "fullcodeline": "if (((sample_format != SAMPLEFORMAT_IEEEFP) || (bits_per_sample != 64)) &&"
    },
    {
        "line": 176,
        "fullcodeline": "if (sample_format == SAMPLEFORMAT_IEEEFP)"
    },
    {
        "line": 242,
        "fullcodeline": "if (image->debug != MagickFalse)"
    },
    {
        "line": 261,
        "fullcodeline": "if (image->debug != MagickFalse)"
    },
    {
        "line": 265,
        "fullcodeline": "if (endian == FILLORDER_LSB2MSB)"
    },
    {
        "line": 279,
        "fullcodeline": "if ((photometric == PHOTOMETRIC_MINISBLACK) ||"
    },
    {
        "line": 282,
        "fullcodeline": "if (photometric == PHOTOMETRIC_SEPARATED)"
    },
    {
        "line": 284,
        "fullcodeline": "if (photometric == PHOTOMETRIC_CIELAB)"
    },
    {
        "line": 286,
        "fullcodeline": "if ((photometric == PHOTOMETRIC_YCBCR) && (compress_tag != COMPRESSION_JPEG))"
    },
    {
        "line": 289,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 295,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 301,
        "fullcodeline": "if (IsStringFalse(option) == MagickFalse) /* enabled by default */"
    },
    {
        "line": 303,
        "fullcodeline": "if ((TIFFGetFieldDefaulted(tiff,TIFFTAG_XRESOLUTION,&x_resolution,sans) == 1) &&"
    },
    {
        "line": 309,
        "fullcodeline": "if (TIFFGetFieldDefaulted(tiff,TIFFTAG_RESOLUTIONUNIT,&units,sans,sans) == 1)"
    },
    {
        "line": 316,
        "fullcodeline": "if ((TIFFGetFieldDefaulted(tiff,TIFFTAG_XPOSITION,&x_position,sans) == 1) &&"
    },
    {
        "line": 322,
        "fullcodeline": "if (TIFFGetFieldDefaulted(tiff,TIFFTAG_ORIENTATION,&orientation,sans) == 1)"
    },
    {
        "line": 324,
        "fullcodeline": "if (TIFFGetField(tiff,TIFFTAG_WHITEPOINT,&chromaticity) == 1)"
    },
    {
        "line": 332,
        "fullcodeline": "if (TIFFGetField(tiff,TIFFTAG_PRIMARYCHROMATICITIES,&chromaticity) == 1)"
    },
    {
        "line": 400,
        "fullcodeline": "if ((photometric == PHOTOMETRIC_PALETTE) &&"
    },
    {
        "line": 414,
        "fullcodeline": "if (TIFFGetFieldDefaulted(tiff,TIFFTAG_PAGENUMBER,&value,&pages,sans) == 1)"
    },
    {
        "line": 416,
        "fullcodeline": "if (image->storage_class == PseudoClass)"
    },
    {
        "line": 457,
        "fullcodeline": "if (image_info->ping != MagickFalse)"
    },
    {
        "line": 465,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 472,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 481,
        "fullcodeline": "if (quantum_info == (QuantumInfo *) NULL)"
    },
    {
        "line": 483,
        "fullcodeline": "if (sample_format == SAMPLEFORMAT_UINT)"
    },
    {
        "line": 485,
        "fullcodeline": "if (sample_format == SAMPLEFORMAT_INT)"
    },
    {
        "line": 487,
        "fullcodeline": "if (sample_format == SAMPLEFORMAT_IEEEFP)"
    },
    {
        "line": 489,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 510,
        "fullcodeline": "if (tiff_status == 1)"
    },
    {
        "line": 537,
        "fullcodeline": "if (image->alpha_trait != UndefinedPixelTrait)"
    },
    {
        "line": 539,
        "fullcodeline": "if (samples_per_pixel > MaxPixelChannels)"
    },
    {
        "line": 546,
        "fullcodeline": "if (TIFFGetField(tiff,TIFFTAG_ROWSPERSTRIP,&rows_per_strip) == 1)"
    },
    {
        "line": 558,
        "fullcodeline": "if (TIFFIsTiled(tiff) != MagickFalse)"
    },
    {
        "line": 572,
        "fullcodeline": "if (image->compression == JPEGCompression)"
    },
    {
        "line": 575,
        "fullcodeline": "if (photometric == PHOTOMETRIC_LOGLUV)"
    },
    {
        "line": 579,
        "fullcodeline": "if (TIFFScanlineSize(tiff) <= 0)"
    },
    {
        "line": 581,
        "fullcodeline": "if ((1.0*TIFFScanlineSize(tiff)) > (2.53*GetBlobSize(image)))"
    },
    {
        "line": 587,
        "fullcodeline": "if (pixel_info == (MemoryInfo *) NULL)"
    },
    {
        "line": 593,
        "fullcodeline": "if (image->alpha_trait != UndefinedPixelTrait)"
    },
    {
        "line": 603,
        "fullcodeline": "if ((samples_per_pixel > 2) && (interlace != PLANARCONFIG_SEPARATE))"
    },
    {
        "line": 943,
        "fullcodeline": "if (quantum_info != (QuantumInfo *) NULL)"
    },
    {
        "line": 945,
        "fullcodeline": "if (photometric == PHOTOMETRIC_CIELAB)"
    },
    {
        "line": 947,
        "fullcodeline": "if ((photometric == PHOTOMETRIC_LOGL) ||"
    },
    {
        "line": 958,
        "fullcodeline": "if (image_info->number_scenes != 0)"
    },
    {
        "line": 962,
        "fullcodeline": "if (more_frames != MagickFalse)"
    },
    {
        "line": 987,
        "fullcodeline": "return(DestroyImageList(image));"
    },
    {
        "line": 165,
        "fullcodeline": "(TIFFGetFieldDefaulted(tiff,TIFFTAG_MAXSAMPLEVALUE,&max_sample_value,sans) != 1))"
    },
    {
        "line": 167,
        "fullcodeline": "TIFFClose(tiff);"
    },
    {
        "line": 168,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 171,
        "fullcodeline": "((bits_per_sample <= 0) || (bits_per_sample > 32)))"
    },
    {
        "line": 173,
        "fullcodeline": "TIFFClose(tiff);"
    },
    {
        "line": 174,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"UnsupportedBitsPerPixel\");"
    },
    {
        "line": 177,
        "fullcodeline": "(void) SetImageProperty(image,\"quantum:format\",\"floating-point\","
    },
    {
        "line": 244,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),\"Geometry: %ux%u\","
    },
    {
        "line": 246,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),\"Interlace: %u\","
    },
    {
        "line": 248,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 250,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 252,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 254,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),\"Photometric \""
    },
    {
        "line": 262,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),\"Image depth: %.20g\","
    },
    {
        "line": 266,
        "fullcodeline": "image->endian=LSBEndian;"
    },
    {
        "line": 280,
        "fullcodeline": "(photometric == PHOTOMETRIC_MINISWHITE))"
    },
    {
        "line": 281,
        "fullcodeline": "image->colorspace=GRAYColorspace;"
    },
    {
        "line": 283,
        "fullcodeline": "image->colorspace=CMYKColorspace;"
    },
    {
        "line": 285,
        "fullcodeline": "image->colorspace=LabColorspace;"
    },
    {
        "line": 287,
        "fullcodeline": "image->colorspace=YCbCrColorspace;"
    },
    {
        "line": 291,
        "fullcodeline": "TIFFClose(tiff);"
    },
    {
        "line": 297,
        "fullcodeline": "TIFFClose(tiff);"
    },
    {
        "line": 302,
        "fullcodeline": "TIFFGetEXIFProperties(tiff,image,exception);"
    },
    {
        "line": 304,
        "fullcodeline": "(TIFFGetFieldDefaulted(tiff,TIFFTAG_YRESOLUTION,&y_resolution,sans) == 1))"
    },
    {
        "line": 306,
        "fullcodeline": "image->resolution.x=x_resolution;"
    },
    {
        "line": 307,
        "fullcodeline": "image->resolution.y=y_resolution;"
    },
    {
        "line": 317,
        "fullcodeline": "(TIFFGetFieldDefaulted(tiff,TIFFTAG_YPOSITION,&y_position,sans) == 1))"
    },
    {
        "line": 323,
        "fullcodeline": "image->orientation=(OrientationType) orientation;"
    },
    {
        "line": 354,
        "fullcodeline": "case COMPRESSION_NONE: image->compression=NoCompression; break;"
    },
    {
        "line": 355,
        "fullcodeline": "case COMPRESSION_CCITTFAX3: image->compression=FaxCompression; break;"
    },
    {
        "line": 356,
        "fullcodeline": "case COMPRESSION_CCITTFAX4: image->compression=Group4Compression; break;"
    },
    {
        "line": 384,
        "fullcodeline": "case COMPRESSION_OJPEG: image->compression=JPEGCompression; break;"
    },
    {
        "line": 388,
        "fullcodeline": "case COMPRESSION_LZW: image->compression=LZWCompression; break;"
    },
    {
        "line": 389,
        "fullcodeline": "case COMPRESSION_DEFLATE: image->compression=ZipCompression; break;"
    },
    {
        "line": 390,
        "fullcodeline": "case COMPRESSION_ADOBE_DEFLATE: image->compression=ZipCompression; break;"
    },
    {
        "line": 397,
        "fullcodeline": "default: image->compression=RLECompression; break;"
    },
    {
        "line": 401,
        "fullcodeline": "(pow(2.0,1.0*bits_per_sample) <= MaxColormapSize))"
    },
    {
        "line": 406,
        "fullcodeline": "colors=(size_t) GetQuantumRange(bits_per_sample)+1;"
    },
    {
        "line": 415,
        "fullcodeline": "image->scene=value;"
    },
    {
        "line": 429,
        "fullcodeline": "tiff_status=TIFFGetField(tiff,TIFFTAG_COLORMAP,&red_colormap,"
    },
    {
        "line": 467,
        "fullcodeline": "TIFFClose(tiff);"
    },
    {
        "line": 474,
        "fullcodeline": "TIFFClose(tiff);"
    },
    {
        "line": 482,
        "fullcodeline": "ThrowTIFFException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 484,
        "fullcodeline": "status=SetQuantumFormat(image,quantum_info,UnsignedQuantumFormat);"
    },
    {
        "line": 486,
        "fullcodeline": "status=SetQuantumFormat(image,quantum_info,SignedQuantumFormat);"
    },
    {
        "line": 488,
        "fullcodeline": "status=SetQuantumFormat(image,quantum_info,FloatingPointQuantumFormat);"
    },
    {
        "line": 490,
        "fullcodeline": "ThrowTIFFException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 512,
        "fullcodeline": "(void) SetImageProperty(image,\"tiff:alpha\",\"unspecified\",exception);"
    },
    {
        "line": 538,
        "fullcodeline": "(void) SetImageAlphaChannel(image,OpaqueAlphaChannel,exception);"
    },
    {
        "line": 541,
        "fullcodeline": "TIFFClose(tiff);"
    },
    {
        "line": 542,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"MaximumChannelsExceeded\");"
    },
    {
        "line": 549,
        "fullcodeline": "buffer[MagickPathExtent];"
    },
    {
        "line": 551,
        "fullcodeline": "(void) FormatLocaleString(buffer,MagickPathExtent,\"%u\","
    },
    {
        "line": 553,
        "fullcodeline": "(void) SetImageProperty(image,\"tiff:rows-per-strip\",buffer,exception);"
    },
    {
        "line": 554,
        "fullcodeline": "method=ReadStripMethod;"
    },
    {
        "line": 570,
        "fullcodeline": "method=ReadTileMethod;"
    },
    {
        "line": 573,
        "fullcodeline": "method=GetJPEGMethod(image,tiff,photometric,bits_per_sample,"
    },
    {
        "line": 576,
        "fullcodeline": "method=ReadGenericMethod;"
    },
    {
        "line": 580,
        "fullcodeline": "ThrowTIFFException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 582,
        "fullcodeline": "ThrowTIFFException(CorruptImageError,\"InsufficientImageDataInFile\");"
    },
    {
        "line": 588,
        "fullcodeline": "ThrowTIFFException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 605,
        "fullcodeline": "pad=(size_t) MagickMax((size_t) samples_per_pixel-3,0);"
    },
    {
        "line": 606,
        "fullcodeline": "quantum_type=RGBQuantum;"
    },
    {
        "line": 622,
        "fullcodeline": "status=SetQuantumPad(image,quantum_info,pad*((bits_per_sample+7) >> 3));"
    },
    {
        "line": 944,
        "fullcodeline": "quantum_info=DestroyQuantumInfo(quantum_info);"
    },
    {
        "line": 946,
        "fullcodeline": "DecodeLabImage(image,exception);"
    },
    {
        "line": 949,
        "fullcodeline": "(photometric == PHOTOMETRIC_MINISWHITE))"
    },
    {
        "line": 951,
        "fullcodeline": "image->type=GrayscaleType;"
    },
    {
        "line": 967,
        "fullcodeline": "AcquireNextImage(image_info,image,exception);"
    },
    {
        "line": 973,
        "fullcodeline": "image=SyncNextImageInList(image);"
    },
    {
        "line": 974,
        "fullcodeline": "status=SetImageProgress(image,LoadImagesTag,image->scene-1,"
    },
    {
        "line": 130,
        "fullcodeline": "for (i=0; i < (ssize_t) image_info->scene; i++)"
    },
    {
        "line": 164,
        "fullcodeline": "(TIFFGetFieldDefaulted(tiff,TIFFTAG_MINSAMPLEVALUE,&min_sample_value,sans) != 1) ||"
    },
    {
        "line": 183,
        "fullcodeline": "(void) SetImageProperty(image,\"tiff:photometric\",\"min-is-black\","
    },
    {
        "line": 189,
        "fullcodeline": "(void) SetImageProperty(image,\"tiff:photometric\",\"min-is-white\","
    },
    {
        "line": 195,
        "fullcodeline": "(void) SetImageProperty(image,\"tiff:photometric\",\"palette\",exception);"
    },
    {
        "line": 200,
        "fullcodeline": "(void) SetImageProperty(image,\"tiff:photometric\",\"RGB\",exception);"
    },
    {
        "line": 205,
        "fullcodeline": "(void) SetImageProperty(image,\"tiff:photometric\",\"CIELAB\",exception);"
    },
    {
        "line": 210,
        "fullcodeline": "(void) SetImageProperty(image,\"tiff:photometric\",\"CIE Log2(L)\","
    },
    {
        "line": 216,
        "fullcodeline": "(void) SetImageProperty(image,\"tiff:photometric\",\"LOGLUV\",exception);"
    },
    {
        "line": 228,
        "fullcodeline": "(void) SetImageProperty(image,\"tiff:photometric\",\"separated\",exception);"
    },
    {
        "line": 233,
        "fullcodeline": "(void) SetImageProperty(image,\"tiff:photometric\",\"YCBCR\",exception);"
    },
    {
        "line": 238,
        "fullcodeline": "(void) SetImageProperty(image,\"tiff:photometric\",\"unknown\",exception);"
    },
    {
        "line": 292,
        "fullcodeline": "return(DestroyImageList(image));"
    },
    {
        "line": 298,
        "fullcodeline": "return(DestroyImageList(image));"
    },
    {
        "line": 311,
        "fullcodeline": "if (units == RESUNIT_INCH)"
    },
    {
        "line": 313,
        "fullcodeline": "if (units == RESUNIT_CENTIMETER)"
    },
    {
        "line": 326,
        "fullcodeline": "if ((chromaticity != (float *) NULL) && (*chromaticity != 0.0))"
    },
    {
        "line": 334,
        "fullcodeline": "if ((chromaticity != (float *) NULL) && (*chromaticity != 0.0))"
    },
    {
        "line": 359,
        "fullcodeline": "image->compression=JPEGCompression;"
    },
    {
        "line": 407,
        "fullcodeline": "if (AcquireImageColormap(image,colors,exception) == MagickFalse)"
    },
    {
        "line": 431,
        "fullcodeline": "if (tiff_status == 1)"
    },
    {
        "line": 459,
        "fullcodeline": "if (image_info->number_scenes != 0)"
    },
    {
        "line": 468,
        "fullcodeline": "return(DestroyImageList(image));"
    },
    {
        "line": 475,
        "fullcodeline": "return(DestroyImageList(image));"
    },
    {
        "line": 496,
        "fullcodeline": "quantum_info->min_is_white=MagickFalse;"
    },
    {
        "line": 501,
        "fullcodeline": "quantum_info->min_is_white=MagickTrue;"
    },
    {
        "line": 513,
        "fullcodeline": "if (extra_samples == 0)"
    },
    {
        "line": 555,
        "fullcodeline": "if (rows_per_strip > (uint32) image->rows)"
    },
    {
        "line": 564,
        "fullcodeline": "if ((TIFFGetField(tiff,TIFFTAG_TILEWIDTH,&columns) != 1) ||"
    },
    {
        "line": 567,
        "fullcodeline": "if ((AcquireMagickResource(WidthResource,columns) == MagickFalse) ||"
    },
    {
        "line": 585,
        "fullcodeline": "log(2.0))),image->columns*rows_per_strip));"
    },
    {
        "line": 595,
        "fullcodeline": "if (image->storage_class == PseudoClass)"
    },
    {
        "line": 607,
        "fullcodeline": "if (image->alpha_trait != UndefinedPixelTrait)"
    },
    {
        "line": 612,
        "fullcodeline": "if (image->colorspace == CMYKColorspace)"
    },
    {
        "line": 623,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 697,
        "fullcodeline": "extent=TIFFStripSize(tiff);"
    },
    {
        "line": 701,
        "fullcodeline": "extent+=image->columns*sizeof(uint32);"
    },
    {
        "line": 703,
        "fullcodeline": "strip_pixels=(unsigned char *) AcquireQuantumMemory(extent,"
    },
    {
        "line": 707,
        "fullcodeline": "(void) memset(strip_pixels,0,extent*sizeof(*strip_pixels));"
    },
    {
        "line": 708,
        "fullcodeline": "stride=TIFFVStripSize(tiff,1);"
    },
    {
        "line": 709,
        "fullcodeline": "strip_id=0;"
    },
    {
        "line": 710,
        "fullcodeline": "p=strip_pixels;"
    },
    {
        "line": 768,
        "fullcodeline": "strip_pixels=(unsigned char *) RelinquishMagickMemory(strip_pixels);"
    },
    {
        "line": 792,
        "fullcodeline": "number_pixels=(MagickSizeType) columns*rows;"
    },
    {
        "line": 795,
        "fullcodeline": "extent=TIFFTileSize(tiff);"
    },
    {
        "line": 799,
        "fullcodeline": "extent+=columns*sizeof(uint32);"
    },
    {
        "line": 801,
        "fullcodeline": "tile_pixels=(unsigned char *) AcquireQuantumMemory(extent,"
    },
    {
        "line": 805,
        "fullcodeline": "(void) memset(tile_pixels,0,extent*sizeof(*tile_pixels));"
    },
    {
        "line": 871,
        "fullcodeline": "tile_pixels=(unsigned char *) RelinquishMagickMemory(tile_pixels);"
    },
    {
        "line": 878,
        "fullcodeline": "*generic_info = (MemoryInfo * ) NULL;"
    },
    {
        "line": 883,
        "fullcodeline": "uint32"
    },
    {
        "line": 891,
        "fullcodeline": "number_pixels=(MagickSizeType) image->columns*image->rows;"
    },
    {
        "line": 892,
        "fullcodeline": "number_pixels+=image->columns*sizeof(uint32);"
    },
    {
        "line": 893,
        "fullcodeline": "generic_info=AcquireVirtualMemory(number_pixels,sizeof(uint32));"
    },
    {
        "line": 896,
        "fullcodeline": "pixels=(uint32 *) GetVirtualMemoryBlob(generic_info);"
    },
    {
        "line": 897,
        "fullcodeline": "(void) TIFFReadRGBAImage(tiff,(uint32) image->columns,(uint32)"
    },
    {
        "line": 899,
        "fullcodeline": "p=pixels+(image->columns*image->rows)-1;"
    },
    {
        "line": 936,
        "fullcodeline": "generic_info=RelinquishVirtualMemory(generic_info);"
    },
    {
        "line": 948,
        "fullcodeline": "(photometric == PHOTOMETRIC_MINISBLACK) ||"
    },
    {
        "line": 952,
        "fullcodeline": "if (bits_per_sample == 1)"
    },
    {
        "line": 959,
        "fullcodeline": "if (image->scene >= (image_info->scene+image_info->number_scenes-1))"
    },
    {
        "line": 968,
        "fullcodeline": "if (GetNextImageInList(image) == (Image *) NULL)"
    },
    {
        "line": 976,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 132,
        "fullcodeline": "status=TIFFReadDirectory(tiff) != 0 ? MagickTrue : MagickFalse;"
    },
    {
        "line": 139,
        "fullcodeline": "AcquireNextImage(image_info,image,exception);"
    },
    {
        "line": 146,
        "fullcodeline": "image=SyncNextImageInList(image);"
    },
    {
        "line": 163,
        "fullcodeline": "(TIFFGetFieldDefaulted(tiff,TIFFTAG_SAMPLEFORMAT,&sample_format,sans) != 1) ||"
    },
    {
        "line": 245,
        "fullcodeline": "(unsigned int) width,(unsigned int) height);"
    },
    {
        "line": 255,
        "fullcodeline": "\"interpretation: %s\",GetImageProperty(image,\"tiff:photometric\","
    },
    {
        "line": 263,
        "fullcodeline": "(double) image->depth);"
    },
    {
        "line": 312,
        "fullcodeline": "image->units=PixelsPerInchResolution;"
    },
    {
        "line": 314,
        "fullcodeline": "image->units=PixelsPerCentimeterResolution;"
    },
    {
        "line": 319,
        "fullcodeline": "image->page.x=(ssize_t) ceil(x_position*image->resolution.x-0.5);"
    },
    {
        "line": 320,
        "fullcodeline": "image->page.y=(ssize_t) ceil(y_position*image->resolution.y-0.5);"
    },
    {
        "line": 328,
        "fullcodeline": "image->chromaticity.white_point.x=chromaticity[0];"
    },
    {
        "line": 329,
        "fullcodeline": "image->chromaticity.white_point.y=chromaticity[1];"
    },
    {
        "line": 336,
        "fullcodeline": "image->chromaticity.red_primary.x=chromaticity[0];"
    },
    {
        "line": 337,
        "fullcodeline": "image->chromaticity.red_primary.y=chromaticity[1];"
    },
    {
        "line": 338,
        "fullcodeline": "image->chromaticity.green_primary.x=chromaticity[2];"
    },
    {
        "line": 339,
        "fullcodeline": "image->chromaticity.green_primary.y=chromaticity[3];"
    },
    {
        "line": 340,
        "fullcodeline": "image->chromaticity.blue_primary.x=chromaticity[4];"
    },
    {
        "line": 341,
        "fullcodeline": "image->chromaticity.blue_primary.y=chromaticity[5];"
    },
    {
        "line": 409,
        "fullcodeline": "TIFFClose(tiff);"
    },
    {
        "line": 410,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 552,
        "fullcodeline": "(unsigned int) rows_per_strip);"
    },
    {
        "line": 556,
        "fullcodeline": "rows_per_strip=(uint32) image->rows;"
    },
    {
        "line": 565,
        "fullcodeline": "(TIFFGetField(tiff,TIFFTAG_TILELENGTH,&rows) != 1))"
    },
    {
        "line": 566,
        "fullcodeline": "ThrowTIFFException(CoderError,\"ImageIsNotTiled\");"
    },
    {
        "line": 568,
        "fullcodeline": "(AcquireMagickResource(HeightResource,rows) == MagickFalse))"
    },
    {
        "line": 569,
        "fullcodeline": "ThrowTIFFException(ImageError,\"WidthOrHeightExceedsLimit\");"
    },
    {
        "line": 584,
        "fullcodeline": "image->columns*samples_per_pixel*pow(2.0,ceil(log(bits_per_sample)/"
    },
    {
        "line": 596,
        "fullcodeline": "quantum_type=IndexAlphaQuantum;"
    },
    {
        "line": 601,
        "fullcodeline": "if (image->storage_class != PseudoClass)"
    },
    {
        "line": 609,
        "fullcodeline": "quantum_type=RGBAQuantum;"
    },
    {
        "line": 610,
        "fullcodeline": "pad=(size_t) MagickMax((size_t) samples_per_pixel-4,0);"
    },
    {
        "line": 614,
        "fullcodeline": "pad=(size_t) MagickMax((size_t) samples_per_pixel-4,0);"
    },
    {
        "line": 615,
        "fullcodeline": "quantum_type=CMYKQuantum;"
    },
    {
        "line": 624,
        "fullcodeline": "ThrowTIFFException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 633,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 705,
        "fullcodeline": "if (strip_pixels == (unsigned char *) NULL)"
    },
    {
        "line": 711,
        "fullcodeline": "for (i=0; i < (ssize_t) samples_per_pixel; i++)"
    },
    {
        "line": 789,
        "fullcodeline": "if ((TIFFGetField(tiff,TIFFTAG_TILEWIDTH,&columns) != 1) ||"
    },
    {
        "line": 793,
        "fullcodeline": "if (HeapOverflowSanityCheck(rows,sizeof(*tile_pixels)) != MagickFalse)"
    },
    {
        "line": 803,
        "fullcodeline": "if (tile_pixels == (unsigned char *) NULL)"
    },
    {
        "line": 806,
        "fullcodeline": "for (i=0; i < (ssize_t) samples_per_pixel; i++)"
    },
    {
        "line": 889,
        "fullcodeline": "if (HeapOverflowSanityCheck(image->rows,sizeof(*pixels)) != MagickFalse)"
    },
    {
        "line": 894,
        "fullcodeline": "if (generic_info == (MemoryInfo *) NULL)"
    },
    {
        "line": 900,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 953,
        "fullcodeline": "image->type=BilevelType;"
    },
    {
        "line": 970,
        "fullcodeline": "status=MagickFalse;"
    },
    {
        "line": 133,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 140,
        "fullcodeline": "if (GetNextImageInList(image) == (Image *) NULL)"
    },
    {
        "line": 162,
        "fullcodeline": "(TIFFGetFieldDefaulted(tiff,TIFFTAG_BITSPERSAMPLE,&bits_per_sample,sans) != 1) ||"
    },
    {
        "line": 433,
        "fullcodeline": "if ((red_colormap != (uint16 *) NULL) &&"
    },
    {
        "line": 460,
        "fullcodeline": "if (image->scene >= (image_info->scene+image_info->number_scenes-1))"
    },
    {
        "line": 515,
        "fullcodeline": "if ((samples_per_pixel == 4) && (photometric == PHOTOMETRIC_RGB))"
    },
    {
        "line": 598,
        "fullcodeline": "quantum_type=samples_per_pixel == 1 ? AlphaQuantum : GrayAlphaQuantum;"
    },
    {
        "line": 602,
        "fullcodeline": "quantum_type=GrayQuantum;"
    },
    {
        "line": 616,
        "fullcodeline": "if (image->alpha_trait != UndefinedPixelTrait)"
    },
    {
        "line": 644,
        "fullcodeline": "tiff_status=TIFFReadPixels(tiff,0,y,(char *) pixels);"
    },
    {
        "line": 647,
        "fullcodeline": "q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 650,
        "fullcodeline": "p=pixels;"
    },
    {
        "line": 706,
        "fullcodeline": "ThrowTIFFException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 729,
        "fullcodeline": "rows_remaining=0;"
    },
    {
        "line": 790,
        "fullcodeline": "(TIFFGetField(tiff,TIFFTAG_TILELENGTH,&rows) != 1))"
    },
    {
        "line": 791,
        "fullcodeline": "ThrowTIFFException(CoderError,\"ImageIsNotTiled\");"
    },
    {
        "line": 794,
        "fullcodeline": "ThrowTIFFException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 804,
        "fullcodeline": "ThrowTIFFException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 890,
        "fullcodeline": "ThrowTIFFException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 895,
        "fullcodeline": "ThrowTIFFException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 898,
        "fullcodeline": "image->rows,(uint32 *) pixels,0);"
    },
    {
        "line": 908,
        "fullcodeline": "q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 911,
        "fullcodeline": "q+=GetPixelChannels(image)*(image->columns-1);"
    },
    {
        "line": 135,
        "fullcodeline": "TIFFClose(tiff);"
    },
    {
        "line": 136,
        "fullcodeline": "image=DestroyImageList(image);"
    },
    {
        "line": 142,
        "fullcodeline": "TIFFClose(tiff);"
    },
    {
        "line": 143,
        "fullcodeline": "image=DestroyImageList(image);"
    },
    {
        "line": 161,
        "fullcodeline": "(TIFFGetFieldDefaulted(tiff,TIFFTAG_SAMPLESPERPIXEL,&samples_per_pixel,sans) != 1) ||"
    },
    {
        "line": 435,
        "fullcodeline": "(blue_colormap != (uint16 *) NULL))"
    },
    {
        "line": 437,
        "fullcodeline": "range=255;  /* might be old style 8-bit colormap */"
    },
    {
        "line": 516,
        "fullcodeline": "image->alpha_trait=BlendPixelTrait;"
    },
    {
        "line": 519,
        "fullcodeline": "for (i=0; i < extra_samples; i++)"
    },
    {
        "line": 618,
        "fullcodeline": "quantum_type=CMYKAQuantum;"
    },
    {
        "line": 619,
        "fullcodeline": "pad=(size_t) MagickMax((size_t) samples_per_pixel-5,0);"
    },
    {
        "line": 645,
        "fullcodeline": "if (tiff_status == -1)"
    },
    {
        "line": 648,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 651,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 664,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 666,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 704,
        "fullcodeline": "2*sizeof(*strip_pixels));"
    },
    {
        "line": 730,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 765,
        "fullcodeline": "if ((samples_per_pixel > 1) && (interlace != PLANARCONFIG_SEPARATE))"
    },
    {
        "line": 821,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y+=rows)"
    },
    {
        "line": 861,
        "fullcodeline": "if ((samples_per_pixel > 1) && (interlace != PLANARCONFIG_SEPARATE))"
    },
    {
        "line": 863,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 909,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 912,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 926,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 928,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 137,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 144,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 160,
        "fullcodeline": "(TIFFGetFieldDefaulted(tiff,TIFFTAG_PLANARCONFIG,&interlace,sans) != 1) ||"
    },
    {
        "line": 434,
        "fullcodeline": "(green_colormap != (uint16 *) NULL) &&"
    },
    {
        "line": 438,
        "fullcodeline": "for (i=0; i < (ssize_t) image->colors; i++)"
    },
    {
        "line": 445,
        "fullcodeline": "for (i=0; i < (ssize_t) image->colors; i++)"
    },
    {
        "line": 521,
        "fullcodeline": "image->alpha_trait=BlendPixelTrait;"
    },
    {
        "line": 653,
        "fullcodeline": "SetPixelCyan(image,ScaleCharToQuantum(ClampYCC((double) *p+"
    },
    {
        "line": 655,
        "fullcodeline": "SetPixelMagenta(image,ScaleCharToQuantum(ClampYCC((double) *p-"
    },
    {
        "line": 658,
        "fullcodeline": "SetPixelYellow(image,ScaleCharToQuantum(ClampYCC((double) *p+"
    },
    {
        "line": 660,
        "fullcodeline": "SetPixelBlack(image,ScaleCharToQuantum((unsigned char) *(p+3)),q);"
    },
    {
        "line": 661,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 662,
        "fullcodeline": "p+=4;"
    },
    {
        "line": 668,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 719,
        "fullcodeline": "case 1: quantum_type=GreenQuantum; break;"
    },
    {
        "line": 720,
        "fullcodeline": "case 2: quantum_type=BlueQuantum; break;"
    },
    {
        "line": 727,
        "fullcodeline": "case 4: quantum_type=AlphaQuantum; break;"
    },
    {
        "line": 735,
        "fullcodeline": "q=GetAuthenticPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 751,
        "fullcodeline": "(void) ImportQuantumPixels(image,(CacheView *) NULL,"
    },
    {
        "line": 753,
        "fullcodeline": "p+=stride;"
    },
    {
        "line": 754,
        "fullcodeline": "rows_remaining--;"
    },
    {
        "line": 811,
        "fullcodeline": "case 1: quantum_type=GreenQuantum; break;"
    },
    {
        "line": 812,
        "fullcodeline": "case 2: quantum_type=BlueQuantum; break;"
    },
    {
        "line": 819,
        "fullcodeline": "case 4: quantum_type=AlphaQuantum; break;"
    },
    {
        "line": 829,
        "fullcodeline": "rows_remaining=image->rows-y;"
    },
    {
        "line": 865,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,(MagickOffsetType) i,"
    },
    {
        "line": 914,
        "fullcodeline": "SetPixelRed(image,ScaleCharToQuantum((unsigned char)"
    },
    {
        "line": 916,
        "fullcodeline": "SetPixelGreen(image,ScaleCharToQuantum((unsigned char)"
    },
    {
        "line": 918,
        "fullcodeline": "SetPixelBlue(image,ScaleCharToQuantum((unsigned char)"
    },
    {
        "line": 923,
        "fullcodeline": "p--;"
    },
    {
        "line": 924,
        "fullcodeline": "q-=GetPixelChannels(image);"
    },
    {
        "line": 930,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 159,
        "fullcodeline": "(TIFFGetFieldDefaulted(tiff,TIFFTAG_FILLORDER,&endian,sans) != 1) ||"
    },
    {
        "line": 439,
        "fullcodeline": "if ((red_colormap[i] >= 256) || (green_colormap[i] >= 256) ||"
    },
    {
        "line": 447,
        "fullcodeline": "image->colormap[i].red=ClampToQuantum(((double)"
    },
    {
        "line": 449,
        "fullcodeline": "image->colormap[i].green=ClampToQuantum(((double)"
    },
    {
        "line": 451,
        "fullcodeline": "image->colormap[i].blue=ClampToQuantum(((double)"
    },
    {
        "line": 522,
        "fullcodeline": "if (sample_info[i] == EXTRASAMPLE_ASSOCALPHA)"
    },
    {
        "line": 670,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 736,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 738,
        "fullcodeline": "if (rows_remaining == 0)"
    },
    {
        "line": 755,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 757,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 830,
        "fullcodeline": "if ((ssize_t) (y+rows) < (ssize_t) image->rows)"
    },
    {
        "line": 832,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x+=columns)"
    },
    {
        "line": 867,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 920,
        "fullcodeline": "if (image->alpha_trait != UndefinedPixelTrait)"
    },
    {
        "line": 932,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 158,
        "fullcodeline": "(TIFFGetFieldDefaulted(tiff,TIFFTAG_COMPRESSION,&compress_tag,sans) != 1) ||"
    },
    {
        "line": 440,
        "fullcodeline": "(blue_colormap[i] >= 256))"
    },
    {
        "line": 442,
        "fullcodeline": "range=65535;"
    },
    {
        "line": 524,
        "fullcodeline": "SetQuantumAlphaType(quantum_info,AssociatedQuantumAlpha);"
    },
    {
        "line": 525,
        "fullcodeline": "(void) SetImageProperty(image,\"tiff:alpha\",\"associated\","
    },
    {
        "line": 723,
        "fullcodeline": "if (image->colorspace == CMYKColorspace)"
    },
    {
        "line": 740,
        "fullcodeline": "strip_size=TIFFReadEncodedStrip(tiff,strip_id,strip_pixels,"
    },
    {
        "line": 744,
        "fullcodeline": "rows_remaining=rows_per_strip;"
    },
    {
        "line": 748,
        "fullcodeline": "p=strip_pixels;"
    },
    {
        "line": 749,
        "fullcodeline": "strip_id++;"
    },
    {
        "line": 759,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 815,
        "fullcodeline": "if (image->colorspace == CMYKColorspace)"
    },
    {
        "line": 831,
        "fullcodeline": "rows_remaining=rows;"
    },
    {
        "line": 838,
        "fullcodeline": "columns_remaining=image->columns-x;"
    },
    {
        "line": 843,
        "fullcodeline": "p=tile_pixels;"
    },
    {
        "line": 921,
        "fullcodeline": "SetPixelAlpha(image,ScaleCharToQuantum((unsigned char)"
    },
    {
        "line": 157,
        "fullcodeline": "(TIFFGetFieldDefaulted(tiff,TIFFTAG_PHOTOMETRIC,&photometric,sans) != 1) ||"
    },
    {
        "line": 724,
        "fullcodeline": "quantum_type=BlackQuantum;"
    },
    {
        "line": 742,
        "fullcodeline": "if (strip_size == -1)"
    },
    {
        "line": 745,
        "fullcodeline": "if ((y+rows_per_strip) > image->rows)"
    },
    {
        "line": 761,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 816,
        "fullcodeline": "quantum_type=BlackQuantum;"
    },
    {
        "line": 839,
        "fullcodeline": "if ((ssize_t) (x+columns) < (ssize_t) image->columns)"
    },
    {
        "line": 841,
        "fullcodeline": "if (TIFFReadTile(tiff,tile_pixels,(uint32) x,(uint32) y,0,i) == 0)"
    },
    {
        "line": 844,
        "fullcodeline": "for (row=0; row < rows_remaining; row++)"
    },
    {
        "line": 915,
        "fullcodeline": "TIFFGetR(*p)),q);"
    },
    {
        "line": 917,
        "fullcodeline": "TIFFGetG(*p)),q);"
    },
    {
        "line": 919,
        "fullcodeline": "TIFFGetB(*p)),q);"
    },
    {
        "line": 156,
        "fullcodeline": "(TIFFGetField(tiff,TIFFTAG_IMAGELENGTH,&height) != 1) ||"
    },
    {
        "line": 529,
        "fullcodeline": "if (sample_info[i] == EXTRASAMPLE_UNASSALPHA)"
    },
    {
        "line": 741,
        "fullcodeline": "TIFFStripSize(tiff));"
    },
    {
        "line": 746,
        "fullcodeline": "rows_remaining=(rows_per_strip-(y+rows_per_strip-"
    },
    {
        "line": 840,
        "fullcodeline": "columns_remaining=columns;"
    },
    {
        "line": 849,
        "fullcodeline": "q=GetAuthenticPixels(image,x,y+row,columns_remaining,1,"
    },
    {
        "line": 853,
        "fullcodeline": "(void) ImportQuantumPixels(image,(CacheView *) NULL,"
    },
    {
        "line": 855,
        "fullcodeline": "p+=TIFFTileRowSize(tiff);"
    },
    {
        "line": 531,
        "fullcodeline": "SetQuantumAlphaType(quantum_info,DisassociatedQuantumAlpha);"
    },
    {
        "line": 532,
        "fullcodeline": "(void) SetImageProperty(image,\"tiff:alpha\",\"unassociated\","
    },
    {
        "line": 654,
        "fullcodeline": "(1.402*(double) *(p+2))-179.456)),q);"
    },
    {
        "line": 656,
        "fullcodeline": "(0.34414*(double) *(p+1))-(0.71414*(double ) *(p+2))+"
    },
    {
        "line": 659,
        "fullcodeline": "(1.772*(double) *(p+1))-226.816)),q);"
    },
    {
        "line": 851,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 856,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 922,
        "fullcodeline": "TIFFGetA(*p)),q);"
    }
]