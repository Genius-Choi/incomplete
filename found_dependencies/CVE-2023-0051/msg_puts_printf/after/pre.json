[
    {
        "line": 3,
        "fullcodeline": "char_u\t*s = str;"
    },
    {
        "line": 4,
        "fullcodeline": "char_u\t*buf = NULL;"
    },
    {
        "line": 5,
        "fullcodeline": "char_u\t*p = s;"
    },
    {
        "line": 78,
        "fullcodeline": "msg_didout = TRUE;\t    // assume that line is not empty"
    },
    {
        "line": 11,
        "fullcodeline": "while ((maxlen < 0 || (int)(s - str) < maxlen) && *s != NUL)"
    },
    {
        "line": 58,
        "fullcodeline": "if (*p != NUL && !(silent_mode && p_verbose == 0))"
    },
    {
        "line": 55,
        "fullcodeline": "++s;"
    },
    {
        "line": 60,
        "fullcodeline": "char_u *tofree = NULL;"
    },
    {
        "line": 13,
        "fullcodeline": "if (!(silent_mode && p_verbose == 0))"
    },
    {
        "line": 62,
        "fullcodeline": "if (maxlen > 0 && vim_strlen_maxlen((char *)p, (size_t)maxlen)"
    },
    {
        "line": 68,
        "fullcodeline": "if (p != NULL)"
    },
    {
        "line": 50,
        "fullcodeline": "if (*s == CAR || *s == NL)"
    },
    {
        "line": 65,
        "fullcodeline": "tofree = vim_strnsave(p, (size_t)maxlen);"
    },
    {
        "line": 66,
        "fullcodeline": "p = tofree;"
    },
    {
        "line": 74,
        "fullcodeline": "vim_free(tofree);"
    },
    {
        "line": 16,
        "fullcodeline": "if (*s == NL)"
    },
    {
        "line": 51,
        "fullcodeline": "msg_col = 0;"
    },
    {
        "line": 63,
        "fullcodeline": ">= (size_t)maxlen)"
    },
    {
        "line": 18,
        "fullcodeline": "int n = (int)(s - p);"
    },
    {
        "line": 20,
        "fullcodeline": "buf = alloc(n + 3);"
    },
    {
        "line": 34,
        "fullcodeline": "p = s + 1;"
    },
    {
        "line": 53,
        "fullcodeline": "++msg_col;"
    },
    {
        "line": 71,
        "fullcodeline": "mch_msg((char *)p);"
    },
    {
        "line": 21,
        "fullcodeline": "if (buf != NULL)"
    },
    {
        "line": 73,
        "fullcodeline": "mch_errmsg((char *)p);"
    },
    {
        "line": 23,
        "fullcodeline": "memcpy(buf, p, n);"
    },
    {
        "line": 26,
        "fullcodeline": "buf[n++] = NL;"
    },
    {
        "line": 27,
        "fullcodeline": "buf[n++] = NUL;"
    },
    {
        "line": 32,
        "fullcodeline": "vim_free(buf);"
    },
    {
        "line": 24,
        "fullcodeline": "if (!info_message)"
    },
    {
        "line": 25,
        "fullcodeline": "buf[n++] = CAR;"
    },
    {
        "line": 29,
        "fullcodeline": "mch_msg((char *)buf);"
    },
    {
        "line": 31,
        "fullcodeline": "mch_errmsg((char *)buf);"
    }
]