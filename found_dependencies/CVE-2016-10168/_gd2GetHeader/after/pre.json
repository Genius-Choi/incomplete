[
    {
        "line": 7,
        "fullcodeline": "char id[5];"
    },
    {
        "line": 12,
        "fullcodeline": "GD2_DBG (printf (\"Reading gd2 header info\\n\"));"
    },
    {
        "line": 21,
        "fullcodeline": "id[4] = 0;"
    },
    {
        "line": 23,
        "fullcodeline": "GD2_DBG (printf (\"Got file code: %s\\n\", id));"
    },
    {
        "line": 35,
        "fullcodeline": "GD2_DBG (printf (\"Version: %d\\n\", *vers));"
    },
    {
        "line": 51,
        "fullcodeline": "GD2_DBG (printf (\"Image is %dx%d\\n\", *sx, *sy));"
    },
    {
        "line": 57,
        "fullcodeline": "GD2_DBG (printf (\"ChunkSize: %d\\n\", *cs));"
    },
    {
        "line": 68,
        "fullcodeline": "GD2_DBG (printf (\"Format: %d\\n\", *fmt));"
    },
    {
        "line": 82,
        "fullcodeline": "GD2_DBG (printf (\"%d Chunks Wide\\n\", *ncx));"
    },
    {
        "line": 88,
        "fullcodeline": "GD2_DBG (printf (\"%d Chunks vertically\\n\", *ncy));"
    },
    {
        "line": 123,
        "fullcodeline": "GD2_DBG (printf (\"gd2 header complete\\n\"));"
    },
    {
        "line": 14,
        "fullcodeline": "for (i = 0; i < 4; i++) {"
    },
    {
        "line": 26,
        "fullcodeline": "if (strcmp (id, GD2_ID) != 0) {"
    },
    {
        "line": 32,
        "fullcodeline": "if (gdGetWord (vers, in) != 1) {"
    },
    {
        "line": 37,
        "fullcodeline": "if ((*vers != 1) && (*vers != 2)) {"
    },
    {
        "line": 43,
        "fullcodeline": "if (!gdGetWord (sx, in)) {"
    },
    {
        "line": 47,
        "fullcodeline": "if (!gdGetWord (sy, in)) {"
    },
    {
        "line": 54,
        "fullcodeline": "if (gdGetWord (cs, in) != 1) {"
    },
    {
        "line": 59,
        "fullcodeline": "if ((*cs < GD2_CHUNKSIZE_MIN) || (*cs > GD2_CHUNKSIZE_MAX)) {"
    },
    {
        "line": 65,
        "fullcodeline": "if (gdGetWord (fmt, in) != 1) {"
    },
    {
        "line": 70,
        "fullcodeline": "if ((*fmt != GD2_FMT_RAW) && (*fmt != GD2_FMT_COMPRESSED) &&"
    },
    {
        "line": 79,
        "fullcodeline": "if (gdGetWord (ncx, in) != 1) {"
    },
    {
        "line": 85,
        "fullcodeline": "if (gdGetWord (ncy, in) != 1) {"
    },
    {
        "line": 90,
        "fullcodeline": "if (gd2_compressed (*fmt)) {"
    },
    {
        "line": 15,
        "fullcodeline": "ch = gdGetC (in);"
    },
    {
        "line": 19,
        "fullcodeline": "id[i] = ch;"
    },
    {
        "line": 72,
        "fullcodeline": "(*fmt != GD2_FMT_TRUECOLOR_COMPRESSED)) {"
    },
    {
        "line": 95,
        "fullcodeline": "nc = (*ncx) * (*ncy);"
    },
    {
        "line": 97,
        "fullcodeline": "GD2_DBG (printf (\"Reading %d chunk index entries\\n\", nc));"
    },
    {
        "line": 101,
        "fullcodeline": "sidx = sizeof (t_chunk_info) * nc;"
    },
    {
        "line": 106,
        "fullcodeline": "cidx = gdCalloc (sidx, 1);"
    },
    {
        "line": 120,
        "fullcodeline": "*chunkIdx = cidx;"
    },
    {
        "line": 16,
        "fullcodeline": "if (ch == EOF) {"
    },
    {
        "line": 27,
        "fullcodeline": "GD2_DBG (printf (\"Not a valid gd2 file\\n\"));"
    },
    {
        "line": 38,
        "fullcodeline": "GD2_DBG (printf (\"Bad version: %d\\n\", *vers));"
    },
    {
        "line": 44,
        "fullcodeline": "GD2_DBG (printf (\"Could not get x-size\\n\"));"
    },
    {
        "line": 48,
        "fullcodeline": "GD2_DBG (printf (\"Could not get y-size\\n\"));"
    },
    {
        "line": 60,
        "fullcodeline": "GD2_DBG (printf (\"Bad chunk size: %d\\n\", *cs));"
    },
    {
        "line": 71,
        "fullcodeline": "(*fmt != GD2_FMT_TRUECOLOR_RAW) &&"
    },
    {
        "line": 73,
        "fullcodeline": "GD2_DBG (printf (\"Bad data format: %d\\n\", *fmt));"
    },
    {
        "line": 91,
        "fullcodeline": "if (*ncx <= 0 || *ncy <= 0 || *ncx > INT_MAX / *ncy) {"
    },
    {
        "line": 98,
        "fullcodeline": "if (overflow2(sizeof(t_chunk_info), nc)) {"
    },
    {
        "line": 102,
        "fullcodeline": "if (sidx <= 0) {"
    },
    {
        "line": 107,
        "fullcodeline": "if (cidx == NULL) {"
    },
    {
        "line": 110,
        "fullcodeline": "for (i = 0; i < nc; i++) {"
    },
    {
        "line": 92,
        "fullcodeline": "GD2_DBG(printf (\"Illegal chunk counts: %d * %d\\n\", *ncx, *ncy));"
    },
    {
        "line": 111,
        "fullcodeline": "if (gdGetInt (&cidx[i].offset, in) != 1) {"
    },
    {
        "line": 114,
        "fullcodeline": "if (gdGetInt (&cidx[i].size, in) != 1) {"
    },
    {
        "line": 117,
        "fullcodeline": "if (cidx[i].offset < 0 || cidx[i].size < 0)"
    }
]