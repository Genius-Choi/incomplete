[
    {
        "line": 9,
        "fullcodeline": "stop_redo_ins();"
    },
    {
        "line": 10,
        "fullcodeline": "replace_flush();\t\t// abandon replace stack"
    },
    {
        "line": 17,
        "fullcodeline": "ptr = get_inserted();"
    },
    {
        "line": 116,
        "fullcodeline": "did_ai = FALSE;"
    },
    {
        "line": 18,
        "fullcodeline": "if (did_restart_edit == 0 || (ptr != NULL"
    },
    {
        "line": 28,
        "fullcodeline": "if (!arrow_used && end_insert_pos != NULL)"
    },
    {
        "line": 125,
        "fullcodeline": "if (end_insert_pos != NULL)"
    },
    {
        "line": 21,
        "fullcodeline": "vim_free(last_insert);"
    },
    {
        "line": 22,
        "fullcodeline": "last_insert = ptr;"
    },
    {
        "line": 23,
        "fullcodeline": "last_insert_skip = new_insert_skip;"
    },
    {
        "line": 66,
        "fullcodeline": "check_auto_format(TRUE);"
    },
    {
        "line": 127,
        "fullcodeline": "curbuf->b_op_start = Insstart;"
    },
    {
        "line": 128,
        "fullcodeline": "curbuf->b_op_start_orig = Insstart_orig;"
    },
    {
        "line": 129,
        "fullcodeline": "curbuf->b_op_end = *end_insert_pos;"
    },
    {
        "line": 19,
        "fullcodeline": "&& (int)STRLEN(ptr) > new_insert_skip))"
    },
    {
        "line": 26,
        "fullcodeline": "vim_free(ptr);"
    },
    {
        "line": 34,
        "fullcodeline": "if (!ins_need_undo && has_format_option(FO_AUTO))"
    },
    {
        "line": 73,
        "fullcodeline": "if (!nomove && did_ai && (esc || (vim_strchr(p_cpo, CPO_INDENT) == NULL"
    },
    {
        "line": 36,
        "fullcodeline": "pos_T   tpos = curwin->w_cursor;"
    },
    {
        "line": 41,
        "fullcodeline": "cc = 'x';"
    },
    {
        "line": 50,
        "fullcodeline": "auto_format(TRUE, FALSE);"
    },
    {
        "line": 75,
        "fullcodeline": "&& end_insert_pos->lnum <= curbuf->b_ml.ml_line_count)"
    },
    {
        "line": 77,
        "fullcodeline": "pos_T\ttpos = curwin->w_cursor;"
    },
    {
        "line": 79,
        "fullcodeline": "curwin->w_cursor = *end_insert_pos;"
    },
    {
        "line": 80,
        "fullcodeline": "check_cursor_col();  // make sure it is not past the line"
    },
    {
        "line": 42,
        "fullcodeline": "if (curwin->w_cursor.col > 0 && gchar_cursor() == NUL)"
    },
    {
        "line": 52,
        "fullcodeline": "if (VIM_ISWHITE(cc))"
    },
    {
        "line": 91,
        "fullcodeline": "if (curwin->w_cursor.lnum != tpos.lnum)"
    },
    {
        "line": 104,
        "fullcodeline": "if (VIsual_active && VIsual.lnum == curwin->w_cursor.lnum)"
    },
    {
        "line": 44,
        "fullcodeline": "dec_cursor();"
    },
    {
        "line": 45,
        "fullcodeline": "cc = gchar_cursor();"
    },
    {
        "line": 85,
        "fullcodeline": "cc = gchar_cursor();"
    },
    {
        "line": 92,
        "fullcodeline": "curwin->w_cursor = tpos;"
    },
    {
        "line": 106,
        "fullcodeline": "int len = (int)STRLEN(ml_get_curline());"
    },
    {
        "line": 46,
        "fullcodeline": "if (!VIM_ISWHITE(cc))"
    },
    {
        "line": 54,
        "fullcodeline": "if (gchar_cursor() != NUL)"
    },
    {
        "line": 58,
        "fullcodeline": "if (gchar_cursor() == NUL"
    },
    {
        "line": 74,
        "fullcodeline": "&& curwin->w_cursor.lnum != end_insert_pos->lnum))"
    },
    {
        "line": 83,
        "fullcodeline": "if (gchar_cursor() == NUL && curwin->w_cursor.col > 0)"
    },
    {
        "line": 86,
        "fullcodeline": "if (!VIM_ISWHITE(cc))"
    },
    {
        "line": 88,
        "fullcodeline": "if (del_char(TRUE) == FAIL)"
    },
    {
        "line": 96,
        "fullcodeline": "tpos = curwin->w_cursor;"
    },
    {
        "line": 97,
        "fullcodeline": "tpos.col++;"
    },
    {
        "line": 108,
        "fullcodeline": "if (VIsual.col > len)"
    },
    {
        "line": 47,
        "fullcodeline": "curwin->w_cursor = tpos;"
    },
    {
        "line": 55,
        "fullcodeline": "inc_cursor();"
    },
    {
        "line": 60,
        "fullcodeline": "&& curwin->w_cursor.col == tpos.col)"
    },
    {
        "line": 61,
        "fullcodeline": "curwin->w_cursor.coladd = tpos.coladd;"
    },
    {
        "line": 84,
        "fullcodeline": "--curwin->w_cursor.col;"
    },
    {
        "line": 98,
        "fullcodeline": "if (cc != NUL && gchar_pos(&tpos) == NUL)"
    },
    {
        "line": 110,
        "fullcodeline": "VIsual.col = len;"
    },
    {
        "line": 111,
        "fullcodeline": "VIsual.coladd = 0;"
    },
    {
        "line": 59,
        "fullcodeline": "&& curwin->w_cursor.lnum == tpos.lnum"
    },
    {
        "line": 99,
        "fullcodeline": "++curwin->w_cursor.col;\t// put cursor back on the NUL"
    }
]