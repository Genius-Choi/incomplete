[
    {
        "line": 3,
        "fullcodeline": "const std::map<String, bool> testCases = { { \"a\",                    true  },"
    },
    {
        "line": 23,
        "fullcodeline": "tmpDir.getFile().createDirectory();"
    },
    {
        "line": 24,
        "fullcodeline": "auto data = createZipMemoryBlock (entryNames);"
    },
    {
        "line": 25,
        "fullcodeline": "MemoryInputStream mi (data, false);"
    },
    {
        "line": 26,
        "fullcodeline": "ZipFile zip (mi);"
    },
    {
        "line": 20,
        "fullcodeline": "entryNames.add (testCase.first);"
    },
    {
        "line": 28,
        "fullcodeline": "for (int i = 0; i < zip.getNumEntries(); ++i)"
    },
    {
        "line": 7,
        "fullcodeline": "{ \"/b\",                   false },"
    },
    {
        "line": 9,
        "fullcodeline": "{ \"c/d\",                  true  },"
    },
    {
        "line": 10,
        "fullcodeline": "{ \"../e/f\",               false },"
    },
    {
        "line": 11,
        "fullcodeline": "{ \"../../g/h\",            false },"
    },
    {
        "line": 12,
        "fullcodeline": "{ \"i/../j\",               true  },"
    },
    {
        "line": 13,
        "fullcodeline": "{ \"k/l/../\",              true  },"
    },
    {
        "line": 14,
        "fullcodeline": "{ \"m/n/../../\",           false },"
    },
    {
        "line": 15,
        "fullcodeline": "{ \"o/p/../../../\",        false } };"
    },
    {
        "line": 30,
        "fullcodeline": "const auto result = zip.uncompressEntry (i, tmpDir.getFile());"
    },
    {
        "line": 31,
        "fullcodeline": "const auto caseIt = testCases.find (zip.getEntry (i)->filename);"
    },
    {
        "line": 33,
        "fullcodeline": "if (caseIt != testCases.end())"
    },
    {
        "line": 35,
        "fullcodeline": "expect (result.wasOk() == caseIt->second,"
    },
    {
        "line": 36,
        "fullcodeline": "zip.getEntry (i)->filename + \" was unexpectedly \" + (result.wasOk() ? \"OK\" : \"not OK\"));"
    },
    {
        "line": 40,
        "fullcodeline": "expect (false);"
    }
]