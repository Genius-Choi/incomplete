[
    {
        "line": 4,
        "fullcodeline": "int n, l, size, bauto, ret = 1;"
    },
    {
        "line": 10,
        "fullcodeline": "list = nullptr;"
    },
    {
        "line": 11,
        "fullcodeline": "if (value == nullptr || value_length <= 0) {"
    },
    {
        "line": 23,
        "fullcodeline": "identify_list = MBSTRG(default_detect_order_list);"
    },
    {
        "line": 24,
        "fullcodeline": "identify_list_size = MBSTRG(default_detect_order_list_size);"
    },
    {
        "line": 37,
        "fullcodeline": "endp = tmpstr + value_length;"
    },
    {
        "line": 38,
        "fullcodeline": "n = 1;"
    },
    {
        "line": 39,
        "fullcodeline": "p1 = tmpstr;"
    },
    {
        "line": 44,
        "fullcodeline": "size = n + identify_list_size;"
    },
    {
        "line": 46,
        "fullcodeline": "list = (mbfl_encoding **)calloc(size, sizeof(mbfl_encoding*));"
    },
    {
        "line": 114,
        "fullcodeline": "req::free(tmpstr);"
    },
    {
        "line": 13,
        "fullcodeline": "*return_list = nullptr;"
    },
    {
        "line": 16,
        "fullcodeline": "*return_size = 0;"
    },
    {
        "line": 27,
        "fullcodeline": "if (value[0]=='\"' && value[value_length-1]=='\"' && value_length>2) {"
    },
    {
        "line": 33,
        "fullcodeline": "if (tmpstr == nullptr) {"
    },
    {
        "line": 40,
        "fullcodeline": "while ((p2 = (char*)string_memnstr(p1, \",\", 1, endp)) != nullptr) {"
    },
    {
        "line": 47,
        "fullcodeline": "if (list != nullptr) {"
    },
    {
        "line": 28,
        "fullcodeline": "tmpstr = req::strndup(value + 1, value_length - 2);"
    },
    {
        "line": 29,
        "fullcodeline": "value_length -= 2;"
    },
    {
        "line": 41,
        "fullcodeline": "p1 = p2 + 1;"
    },
    {
        "line": 42,
        "fullcodeline": "n++;"
    },
    {
        "line": 48,
        "fullcodeline": "entry = list;"
    },
    {
        "line": 49,
        "fullcodeline": "n = 0;"
    },
    {
        "line": 50,
        "fullcodeline": "bauto = 0;"
    },
    {
        "line": 51,
        "fullcodeline": "p1 = tmpstr;"
    },
    {
        "line": 31,
        "fullcodeline": "tmpstr = req::strndup(value, value_length);"
    },
    {
        "line": 88,
        "fullcodeline": "} while (n < size && p2 != nullptr);"
    },
    {
        "line": 89,
        "fullcodeline": "if (n > 0) {"
    },
    {
        "line": 112,
        "fullcodeline": "ret = 0;"
    },
    {
        "line": 53,
        "fullcodeline": "p2 = p = (char*)string_memnstr(p1, \",\", 1, endp);"
    },
    {
        "line": 57,
        "fullcodeline": "*p = '\\0';"
    },
    {
        "line": 62,
        "fullcodeline": "p--;"
    },
    {
        "line": 87,
        "fullcodeline": "p1 = p2 + 1;"
    },
    {
        "line": 103,
        "fullcodeline": "*return_size = n;"
    },
    {
        "line": 54,
        "fullcodeline": "if (p == nullptr) {"
    },
    {
        "line": 59,
        "fullcodeline": "while (p1 < p && (*p1 == ' ' || *p1 == '\\t')) {"
    },
    {
        "line": 63,
        "fullcodeline": "while (p > p1 && (*p == ' ' || *p == '\\t')) {"
    },
    {
        "line": 68,
        "fullcodeline": "if (strcasecmp(p1, \"auto\") == 0) {"
    },
    {
        "line": 96,
        "fullcodeline": "free(list);"
    },
    {
        "line": 100,
        "fullcodeline": "ret = 0;"
    },
    {
        "line": 107,
        "fullcodeline": "*return_list = nullptr;"
    },
    {
        "line": 110,
        "fullcodeline": "*return_size = 0;"
    },
    {
        "line": 55,
        "fullcodeline": "p = endp;"
    },
    {
        "line": 60,
        "fullcodeline": "p1++;"
    },
    {
        "line": 64,
        "fullcodeline": "*p = '\\0';"
    },
    {
        "line": 65,
        "fullcodeline": "p--;"
    },
    {
        "line": 91,
        "fullcodeline": "*return_list = list;"
    },
    {
        "line": 69,
        "fullcodeline": "if (!bauto) {"
    },
    {
        "line": 79,
        "fullcodeline": "encoding = (mbfl_encoding*) mbfl_name2encoding(p1);"
    },
    {
        "line": 93,
        "fullcodeline": "free(list);"
    },
    {
        "line": 98,
        "fullcodeline": "*return_list = nullptr;"
    },
    {
        "line": 70,
        "fullcodeline": "bauto = 1;"
    },
    {
        "line": 71,
        "fullcodeline": "l = identify_list_size;"
    },
    {
        "line": 72,
        "fullcodeline": "src = identify_list;"
    },
    {
        "line": 80,
        "fullcodeline": "if (encoding != nullptr) {"
    },
    {
        "line": 73,
        "fullcodeline": "for (int i = 0; i < l; i++) {"
    },
    {
        "line": 81,
        "fullcodeline": "*entry++ = encoding;"
    },
    {
        "line": 82,
        "fullcodeline": "n++;"
    },
    {
        "line": 74,
        "fullcodeline": "*entry++ = (mbfl_encoding*) mbfl_no2encoding(*src++);"
    },
    {
        "line": 75,
        "fullcodeline": "n++;"
    },
    {
        "line": 84,
        "fullcodeline": "ret = 0;"
    }
]