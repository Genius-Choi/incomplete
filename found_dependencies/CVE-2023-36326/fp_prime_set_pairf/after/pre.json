[
    {
        "line": 3,
        "fullcodeline": "ctx_t *ctx = core_get();"
    },
    {
        "line": 4,
        "fullcodeline": "size_t len = bn_bits(x) + 1;"
    },
    {
        "line": 5,
        "fullcodeline": "int8_t s[RLC_FP_BITS + 1];"
    },
    {
        "line": 7,
        "fullcodeline": "bn_null(p);"
    },
    {
        "line": 8,
        "fullcodeline": "bn_null(t0);"
    },
    {
        "line": 9,
        "fullcodeline": "bn_null(t1);"
    },
    {
        "line": 12,
        "fullcodeline": "bn_new(p);"
    },
    {
        "line": 13,
        "fullcodeline": "bn_new(t0);"
    },
    {
        "line": 14,
        "fullcodeline": "bn_new(t1);"
    },
    {
        "line": 16,
        "fullcodeline": "bn_copy(&(ctx->par), x);"
    },
    {
        "line": 17,
        "fullcodeline": "bn_copy(t0, x);"
    },
    {
        "line": 140,
        "fullcodeline": "ctx->par_len = 0;"
    },
    {
        "line": 141,
        "fullcodeline": "bn_rec_naf(s, &len, &(ctx->par), 2);"
    },
    {
        "line": 159,
        "fullcodeline": "RLC_THROW(ERR_CAUGHT);"
    },
    {
        "line": 161,
        "fullcodeline": "bn_free(p);"
    },
    {
        "line": 162,
        "fullcodeline": "bn_free(t0);"
    },
    {
        "line": 163,
        "fullcodeline": "bn_free(t1);"
    },
    {
        "line": 143,
        "fullcodeline": "if (s[0] == -1) {"
    },
    {
        "line": 147,
        "fullcodeline": "for (int i = 0; i < len && ctx->par_len < RLC_TERMS; i++) {"
    },
    {
        "line": 155,
        "fullcodeline": "if (ctx->par_len == RLC_TERMS) {"
    },
    {
        "line": 22,
        "fullcodeline": "bn_set_dig(p, 1);"
    },
    {
        "line": 23,
        "fullcodeline": "bn_mul_dig(t1, t0, 6);"
    },
    {
        "line": 24,
        "fullcodeline": "bn_add(p, p, t1);"
    },
    {
        "line": 25,
        "fullcodeline": "bn_mul(t1, t0, t0);"
    },
    {
        "line": 26,
        "fullcodeline": "bn_mul_dig(t1, t1, 24);"
    },
    {
        "line": 27,
        "fullcodeline": "bn_add(p, p, t1);"
    },
    {
        "line": 28,
        "fullcodeline": "bn_mul(t1, t0, t0);"
    },
    {
        "line": 29,
        "fullcodeline": "bn_mul(t1, t1, t0);"
    },
    {
        "line": 30,
        "fullcodeline": "bn_mul_dig(t1, t1, 36);"
    },
    {
        "line": 31,
        "fullcodeline": "bn_add(p, p, t1);"
    },
    {
        "line": 32,
        "fullcodeline": "bn_mul(t0, t0, t0);"
    },
    {
        "line": 33,
        "fullcodeline": "bn_mul(t1, t0, t0);"
    },
    {
        "line": 34,
        "fullcodeline": "bn_mul_dig(t1, t1, 36);"
    },
    {
        "line": 35,
        "fullcodeline": "bn_add(p, p, t1);"
    },
    {
        "line": 36,
        "fullcodeline": "fp_prime_set_dense(p);"
    },
    {
        "line": 40,
        "fullcodeline": "bn_sqr(t1, t0);"
    },
    {
        "line": 41,
        "fullcodeline": "bn_sqr(p, t1);"
    },
    {
        "line": 42,
        "fullcodeline": "bn_sub(p, p, t1);"
    },
    {
        "line": 43,
        "fullcodeline": "bn_add_dig(p, p, 1);"
    },
    {
        "line": 44,
        "fullcodeline": "bn_sub(t1, t1, t0);"
    },
    {
        "line": 45,
        "fullcodeline": "bn_sub(t1, t1, t0);"
    },
    {
        "line": 46,
        "fullcodeline": "bn_add_dig(t1, t1, 1);"
    },
    {
        "line": 47,
        "fullcodeline": "bn_mul(p, p, t1);"
    },
    {
        "line": 48,
        "fullcodeline": "bn_div_dig(p, p, 3);"
    },
    {
        "line": 49,
        "fullcodeline": "bn_add(p, p, t0);"
    },
    {
        "line": 50,
        "fullcodeline": "fp_prime_set_dense(p);"
    },
    {
        "line": 54,
        "fullcodeline": "bn_set_dig(p, 4);"
    },
    {
        "line": 55,
        "fullcodeline": "bn_mul_dig(t1, t0, 4);"
    },
    {
        "line": 56,
        "fullcodeline": "bn_add(p, p, t1);"
    },
    {
        "line": 57,
        "fullcodeline": "bn_sqr(t0, t0);"
    },
    {
        "line": 58,
        "fullcodeline": "bn_add(p, p, t0);"
    },
    {
        "line": 59,
        "fullcodeline": "bn_sqr(t1, t0);"
    },
    {
        "line": 60,
        "fullcodeline": "bn_add(p, p, t1);"
    },
    {
        "line": 61,
        "fullcodeline": "bn_add(p, p, t1);"
    },
    {
        "line": 62,
        "fullcodeline": "bn_add(p, p, t1);"
    },
    {
        "line": 63,
        "fullcodeline": "bn_add(p, p, t1);"
    },
    {
        "line": 64,
        "fullcodeline": "bn_add(p, p, t1);"
    },
    {
        "line": 65,
        "fullcodeline": "bn_mul(t1, t1, t0);"
    },
    {
        "line": 66,
        "fullcodeline": "bn_add(p, p, t1);"
    },
    {
        "line": 67,
        "fullcodeline": "bn_mul(t1, t1, t0);"
    },
    {
        "line": 68,
        "fullcodeline": "bn_add(p, p, t1);"
    },
    {
        "line": 69,
        "fullcodeline": "bn_div_dig(p, p, 4);"
    },
    {
        "line": 70,
        "fullcodeline": "fp_prime_set_dense(p);"
    },
    {
        "line": 74,
        "fullcodeline": "bn_sqr(t1, t0);"
    },
    {
        "line": 75,
        "fullcodeline": "bn_sqr(t1, t1);"
    },
    {
        "line": 76,
        "fullcodeline": "bn_sqr(p, t1);"
    },
    {
        "line": 77,
        "fullcodeline": "bn_sub(p, p, t1);"
    },
    {
        "line": 78,
        "fullcodeline": "bn_add_dig(p, p, 1);"
    },
    {
        "line": 79,
        "fullcodeline": "bn_sub_dig(t1, t0, 1);"
    },
    {
        "line": 80,
        "fullcodeline": "bn_sqr(t1, t1);"
    },
    {
        "line": 81,
        "fullcodeline": "bn_mul(p, p, t1);"
    },
    {
        "line": 82,
        "fullcodeline": "bn_div_dig(p, p, 3);"
    },
    {
        "line": 83,
        "fullcodeline": "bn_add(p, p, t0);"
    },
    {
        "line": 84,
        "fullcodeline": "fp_prime_set_dense(p);"
    },
    {
        "line": 88,
        "fullcodeline": "bn_sqr(t1, t0);"
    },
    {
        "line": 89,
        "fullcodeline": "bn_sqr(t1, t1);"
    },
    {
        "line": 90,
        "fullcodeline": "bn_sqr(p, t1);"
    },
    {
        "line": 91,
        "fullcodeline": "bn_sqr(t1, p);"
    },
    {
        "line": 92,
        "fullcodeline": "bn_sub(t1, t1, p);"
    },
    {
        "line": 93,
        "fullcodeline": "bn_add_dig(t1, t1, 1);"
    },
    {
        "line": 94,
        "fullcodeline": "bn_sub_dig(p, t0, 1);"
    },
    {
        "line": 95,
        "fullcodeline": "bn_sqr(p, p);"
    },
    {
        "line": 96,
        "fullcodeline": "bn_mul(p, p, t1);"
    },
    {
        "line": 97,
        "fullcodeline": "bn_div_dig(p, p, 3);"
    },
    {
        "line": 98,
        "fullcodeline": "bn_add(p, p, t0);"
    },
    {
        "line": 99,
        "fullcodeline": "fp_prime_set_dense(p);"
    },
    {
        "line": 103,
        "fullcodeline": "bn_set_dig(p, 1);"
    },
    {
        "line": 104,
        "fullcodeline": "bn_mul_dig(t1, t0, 3);"
    },
    {
        "line": 105,
        "fullcodeline": "bn_add(p, p, t1);"
    },
    {
        "line": 106,
        "fullcodeline": "bn_sqr(t1, t0);"
    },
    {
        "line": 107,
        "fullcodeline": "bn_add(p, p, t1);"
    },
    {
        "line": 108,
        "fullcodeline": "bn_add(p, p, t1);"
    },
    {
        "line": 109,
        "fullcodeline": "bn_add(p, p, t1);"
    },
    {
        "line": 110,
        "fullcodeline": "bn_sqr(t1, t1);"
    },
    {
        "line": 111,
        "fullcodeline": "bn_sqr(t1, t1);"
    },
    {
        "line": 112,
        "fullcodeline": "bn_mul(t1, t1, t0);"
    },
    {
        "line": 113,
        "fullcodeline": "bn_mul_dig(t1, t1, 243);"
    },
    {
        "line": 114,
        "fullcodeline": "bn_add(p, p, t1);"
    },
    {
        "line": 115,
        "fullcodeline": "bn_mul(t1, t1, t0);"
    },
    {
        "line": 116,
        "fullcodeline": "bn_add(p, p, t1);"
    },
    {
        "line": 117,
        "fullcodeline": "bn_mul_dig(t1, t1, 3);"
    },
    {
        "line": 118,
        "fullcodeline": "bn_add(p, p, t1);"
    },
    {
        "line": 119,
        "fullcodeline": "bn_mul(t1, t1, t0);"
    },
    {
        "line": 120,
        "fullcodeline": "bn_add(p, p, t1);"
    },
    {
        "line": 121,
        "fullcodeline": "bn_mul_dig(t1, t1, 27);"
    },
    {
        "line": 122,
        "fullcodeline": "bn_mul(t1, t1, t0);"
    },
    {
        "line": 123,
        "fullcodeline": "bn_mul(t1, t1, t0);"
    },
    {
        "line": 124,
        "fullcodeline": "bn_mul(t1, t1, t0);"
    },
    {
        "line": 125,
        "fullcodeline": "bn_mul(t1, t1, t0);"
    },
    {
        "line": 126,
        "fullcodeline": "bn_mul(t1, t1, t0);"
    },
    {
        "line": 127,
        "fullcodeline": "bn_mul(t1, t1, t0);"
    },
    {
        "line": 128,
        "fullcodeline": "bn_mul(t1, t1, t0);"
    },
    {
        "line": 129,
        "fullcodeline": "bn_add(p, p, t1);"
    },
    {
        "line": 130,
        "fullcodeline": "bn_mul_dig(t1, t1, 3);"
    },
    {
        "line": 131,
        "fullcodeline": "bn_mul(t1, t1, t0);"
    },
    {
        "line": 132,
        "fullcodeline": "bn_add(p, p, t1);"
    },
    {
        "line": 133,
        "fullcodeline": "bn_mul(t1, t1, t0);"
    },
    {
        "line": 134,
        "fullcodeline": "bn_add(p, p, t1);"
    },
    {
        "line": 135,
        "fullcodeline": "fp_prime_set_dense(p);"
    },
    {
        "line": 144,
        "fullcodeline": "s[0] = 1;"
    },
    {
        "line": 145,
        "fullcodeline": "s[1] = -1;"
    },
    {
        "line": 156,
        "fullcodeline": "RLC_THROW(ERR_NO_VALID);"
    },
    {
        "line": 148,
        "fullcodeline": "if (s[i] > 0) {"
    },
    {
        "line": 151,
        "fullcodeline": "if (s[i] < 0) {"
    },
    {
        "line": 149,
        "fullcodeline": "ctx->par_sps[ctx->par_len++] = i;"
    },
    {
        "line": 152,
        "fullcodeline": "ctx->par_sps[ctx->par_len++] = -i;"
    }
]