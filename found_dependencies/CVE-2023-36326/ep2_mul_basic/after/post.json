[
    {
        "line": 5,
        "fullcodeline": "ep2_null(t);"
    },
    {
        "line": 7,
        "fullcodeline": "if (bn_is_zero(k) || ep2_is_infty(p)) {"
    },
    {
        "line": 13,
        "fullcodeline": "ep2_new(t);"
    },
    {
        "line": 14,
        "fullcodeline": "l = bn_bits(k);"
    },
    {
        "line": 29,
        "fullcodeline": "ep2_copy(r, t);"
    },
    {
        "line": 30,
        "fullcodeline": "ep2_norm(r, r);"
    },
    {
        "line": 36,
        "fullcodeline": "RLC_THROW(ERR_CAUGHT);"
    },
    {
        "line": 39,
        "fullcodeline": "ep2_free(t);"
    },
    {
        "line": 8,
        "fullcodeline": "ep2_set_infty(r);"
    },
    {
        "line": 16,
        "fullcodeline": "if (bn_get_bit(k, l - 1)) {"
    },
    {
        "line": 22,
        "fullcodeline": "for (int i = l - 2; i >= 0; i--) {"
    },
    {
        "line": 31,
        "fullcodeline": "if (bn_sign(k) == RLC_NEG) {"
    },
    {
        "line": 17,
        "fullcodeline": "ep2_copy(t, p);"
    },
    {
        "line": 23,
        "fullcodeline": "ep2_dbl(t, t);"
    },
    {
        "line": 32,
        "fullcodeline": "ep2_neg(r, r);"
    },
    {
        "line": 19,
        "fullcodeline": "ep2_set_infty(t);"
    },
    {
        "line": 24,
        "fullcodeline": "if (bn_get_bit(k, i)) {"
    },
    {
        "line": 25,
        "fullcodeline": "ep2_add(t, t, p);"
    }
]