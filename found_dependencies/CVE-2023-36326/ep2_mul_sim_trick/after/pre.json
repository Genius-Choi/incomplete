[
    {
        "line": 3,
        "fullcodeline": "ep2_t t0[1 << (EP_WIDTH / 2)];"
    },
    {
        "line": 4,
        "fullcodeline": "ep2_t t1[1 << (EP_WIDTH / 2)];"
    },
    {
        "line": 5,
        "fullcodeline": "ep2_t t[1 << EP_WIDTH];"
    },
    {
        "line": 7,
        "fullcodeline": "size_t l0, l1, w = EP_WIDTH / 2;"
    },
    {
        "line": 8,
        "fullcodeline": "uint8_t w0[2 * RLC_FP_BITS], w1[2 * RLC_FP_BITS];"
    },
    {
        "line": 10,
        "fullcodeline": "bn_null(n);"
    },
    {
        "line": 11,
        "fullcodeline": "bn_null(_k);"
    },
    {
        "line": 12,
        "fullcodeline": "bn_null(_m);"
    },
    {
        "line": 14,
        "fullcodeline": "if (bn_is_zero(k) || ep2_is_infty(p)) {"
    },
    {
        "line": 24,
        "fullcodeline": "bn_new(n);"
    },
    {
        "line": 25,
        "fullcodeline": "bn_new(_k);"
    },
    {
        "line": 26,
        "fullcodeline": "bn_new(_m);"
    },
    {
        "line": 28,
        "fullcodeline": "ep2_curve_get_ord(n);"
    },
    {
        "line": 29,
        "fullcodeline": "bn_mod(_k, k, n);"
    },
    {
        "line": 30,
        "fullcodeline": "bn_mod(_m, m, n);"
    },
    {
        "line": 44,
        "fullcodeline": "ep2_copy(t0[1], p);"
    },
    {
        "line": 53,
        "fullcodeline": "ep2_copy(t1[1], q);"
    },
    {
        "line": 71,
        "fullcodeline": "l0 = l1 = RLC_CEIL(2 * RLC_FP_BITS, w);"
    },
    {
        "line": 72,
        "fullcodeline": "bn_rec_win(w0, &l0, k, w);"
    },
    {
        "line": 73,
        "fullcodeline": "bn_rec_win(w1, &l1, m, w);"
    },
    {
        "line": 82,
        "fullcodeline": "ep2_set_infty(r);"
    },
    {
        "line": 91,
        "fullcodeline": "RLC_THROW(ERR_CAUGHT);"
    },
    {
        "line": 15,
        "fullcodeline": "ep2_mul(r, q, m);"
    },
    {
        "line": 18,
        "fullcodeline": "if (bn_is_zero(m) || ep2_is_infty(q)) {"
    },
    {
        "line": 32,
        "fullcodeline": "for (int i = 0; i < (1 << w); i++) {"
    },
    {
        "line": 38,
        "fullcodeline": "for (int i = 0; i < (1 << EP_WIDTH); i++) {"
    },
    {
        "line": 45,
        "fullcodeline": "if (bn_sign(k) == RLC_NEG) {"
    },
    {
        "line": 48,
        "fullcodeline": "for (int i = 2; i < (1 << w); i++) {"
    },
    {
        "line": 57,
        "fullcodeline": "for (int i = 1; i < (1 << w); i++) {"
    },
    {
        "line": 61,
        "fullcodeline": "for (int i = 0; i < (1 << w); i++) {"
    },
    {
        "line": 75,
        "fullcodeline": "for (int i = l0; i < l1; i++) {"
    },
    {
        "line": 78,
        "fullcodeline": "for (int i = l1; i < l0; i++) {"
    },
    {
        "line": 83,
        "fullcodeline": "for (int i = RLC_MAX(l0, l1) - 1; i >= 0; i--) {"
    },
    {
        "line": 97,
        "fullcodeline": "for (int i = 0; i < (1 << w); i++) {"
    },
    {
        "line": 101,
        "fullcodeline": "for (int i = 0; i < (1 << EP_WIDTH); i++) {"
    },
    {
        "line": 33,
        "fullcodeline": "ep2_null(t0[i]);"
    },
    {
        "line": 34,
        "fullcodeline": "ep2_null(t1[i]);"
    },
    {
        "line": 35,
        "fullcodeline": "ep2_new(t0[i]);"
    },
    {
        "line": 36,
        "fullcodeline": "ep2_new(t1[i]);"
    },
    {
        "line": 39,
        "fullcodeline": "ep2_null(t[i]);"
    },
    {
        "line": 40,
        "fullcodeline": "ep2_new(t[i]);"
    },
    {
        "line": 46,
        "fullcodeline": "ep2_neg(t0[1], t0[1]);"
    },
    {
        "line": 49,
        "fullcodeline": "ep2_add(t0[i], t0[i - 1], t0[1]);"
    },
    {
        "line": 54,
        "fullcodeline": "if (bn_sign(m) == RLC_NEG) {"
    },
    {
        "line": 55,
        "fullcodeline": "ep2_neg(t1[1], t1[1]);"
    },
    {
        "line": 58,
        "fullcodeline": "ep2_add(t1[i], t1[i - 1], t1[1]);"
    },
    {
        "line": 76,
        "fullcodeline": "w0[i] = 0;"
    },
    {
        "line": 79,
        "fullcodeline": "w1[i] = 0;"
    },
    {
        "line": 87,
        "fullcodeline": "ep2_add(r, r, t[(w0[i] << w) + w1[i]]);"
    },
    {
        "line": 62,
        "fullcodeline": "for (int j = 0; j < (1 << w); j++) {"
    },
    {
        "line": 84,
        "fullcodeline": "for (int j = 0; j < w; j++) {"
    },
    {
        "line": 63,
        "fullcodeline": "ep2_add(t[(i << w) + j], t0[i], t1[j]);"
    },
    {
        "line": 85,
        "fullcodeline": "ep2_dbl(r, r);"
    }
]