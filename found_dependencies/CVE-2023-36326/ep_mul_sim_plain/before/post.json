[
    {
        "line": 4,
        "fullcodeline": "int8_t naf0[RLC_FP_BITS + 1], naf1[RLC_FP_BITS + 1], n0, n1, *u, *v;"
    },
    {
        "line": 5,
        "fullcodeline": "ep_t t0[1 << (EP_WIDTH - 2)];"
    },
    {
        "line": 6,
        "fullcodeline": "ep_t t1[1 << (EP_WIDTH - 2)];"
    },
    {
        "line": 9,
        "fullcodeline": "gen = (t == NULL ? 0 : 1);"
    },
    {
        "line": 26,
        "fullcodeline": "ep_tab(t1, q, EP_WIDTH);"
    },
    {
        "line": 34,
        "fullcodeline": "l0 = l1 = RLC_FP_BITS + 1;"
    },
    {
        "line": 35,
        "fullcodeline": "bn_rec_naf(naf0, &l0, k, w);"
    },
    {
        "line": 36,
        "fullcodeline": "bn_rec_naf(naf1, &l1, m, EP_WIDTH);"
    },
    {
        "line": 38,
        "fullcodeline": "l = RLC_MAX(l0, l1);"
    },
    {
        "line": 50,
        "fullcodeline": "u = naf0 + l - 1;"
    },
    {
        "line": 51,
        "fullcodeline": "v = naf1 + l - 1;"
    },
    {
        "line": 52,
        "fullcodeline": "ep_set_infty(r);"
    },
    {
        "line": 72,
        "fullcodeline": "ep_norm(r, r);"
    },
    {
        "line": 75,
        "fullcodeline": "RLC_THROW(ERR_CAUGHT);"
    },
    {
        "line": 10,
        "fullcodeline": "if (!gen) {"
    },
    {
        "line": 20,
        "fullcodeline": "for (i = 0; i < (1 << (EP_WIDTH - 2)); i++) {"
    },
    {
        "line": 39,
        "fullcodeline": "if (bn_sign(k) == RLC_NEG) {"
    },
    {
        "line": 44,
        "fullcodeline": "if (bn_sign(m) == RLC_NEG) {"
    },
    {
        "line": 53,
        "fullcodeline": "for (i = l - 1; i >= 0; i--, u--, v--) {"
    },
    {
        "line": 79,
        "fullcodeline": "if (!gen) {"
    },
    {
        "line": 84,
        "fullcodeline": "for (i = 0; i < 1 << (EP_WIDTH - 2); i++) {"
    },
    {
        "line": 15,
        "fullcodeline": "ep_tab(t0, p, EP_WIDTH);"
    },
    {
        "line": 16,
        "fullcodeline": "t = (const ep_t *)t0;"
    },
    {
        "line": 21,
        "fullcodeline": "ep_null(t1[i]);"
    },
    {
        "line": 22,
        "fullcodeline": "ep_new(t1[i]);"
    },
    {
        "line": 30,
        "fullcodeline": "w = EP_DEPTH;"
    },
    {
        "line": 54,
        "fullcodeline": "ep_dbl(r, r);"
    },
    {
        "line": 85,
        "fullcodeline": "ep_free(t1[i]);"
    },
    {
        "line": 11,
        "fullcodeline": "for (i = 0; i < (1 << (EP_WIDTH - 2)); i++) {"
    },
    {
        "line": 32,
        "fullcodeline": "w = EP_WIDTH;"
    },
    {
        "line": 40,
        "fullcodeline": "for (i =  0; i < l0; i++) {"
    },
    {
        "line": 45,
        "fullcodeline": "for (i =  0; i < l1; i++) {"
    },
    {
        "line": 58,
        "fullcodeline": "if (n0 > 0) {"
    },
    {
        "line": 61,
        "fullcodeline": "if (n0 < 0) {"
    },
    {
        "line": 64,
        "fullcodeline": "if (n1 > 0) {"
    },
    {
        "line": 67,
        "fullcodeline": "if (n1 < 0) {"
    },
    {
        "line": 80,
        "fullcodeline": "for (i = 0; i < 1 << (EP_WIDTH - 2); i++) {"
    },
    {
        "line": 12,
        "fullcodeline": "ep_null(t0[i]);"
    },
    {
        "line": 13,
        "fullcodeline": "ep_new(t0[i]);"
    },
    {
        "line": 41,
        "fullcodeline": "naf0[i] = -naf0[i];"
    },
    {
        "line": 46,
        "fullcodeline": "naf1[i] = -naf1[i];"
    },
    {
        "line": 59,
        "fullcodeline": "ep_add(r, r, t[n0 / 2]);"
    },
    {
        "line": 62,
        "fullcodeline": "ep_sub(r, r, t[-n0 / 2]);"
    },
    {
        "line": 65,
        "fullcodeline": "ep_add(r, r, t1[n1 / 2]);"
    },
    {
        "line": 68,
        "fullcodeline": "ep_sub(r, r, t1[-n1 / 2]);"
    },
    {
        "line": 81,
        "fullcodeline": "ep_free(t0[i]);"
    }
]