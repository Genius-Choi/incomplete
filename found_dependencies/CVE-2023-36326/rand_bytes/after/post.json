[
    {
        "line": 2,
        "fullcodeline": "uint8_t hash[RLC_MD_LEN];"
    },
    {
        "line": 3,
        "fullcodeline": "int carry, len  = (RLC_RAND_SIZE - 1)/2;"
    },
    {
        "line": 4,
        "fullcodeline": "ctx_t *ctx = core_get();"
    },
    {
        "line": 12,
        "fullcodeline": "rand_gen(buf, size);"
    },
    {
        "line": 14,
        "fullcodeline": "ctx->rand[0] = 0x3;"
    },
    {
        "line": 15,
        "fullcodeline": "md_map(hash, ctx->rand, 1 + len);"
    },
    {
        "line": 17,
        "fullcodeline": "rand_add(ctx->rand + 1, ctx->rand + 1 + len, len);"
    },
    {
        "line": 18,
        "fullcodeline": "carry = rand_add(ctx->rand + 1 + (len - RLC_MD_LEN), hash, RLC_MD_LEN);"
    },
    {
        "line": 19,
        "fullcodeline": "rand_inc(ctx->rand, len - RLC_MD_LEN + 1, carry);"
    },
    {
        "line": 20,
        "fullcodeline": "rand_inc(ctx->rand, len + 1, ctx->counter);"
    },
    {
        "line": 21,
        "fullcodeline": "ctx->counter = ctx->counter + 1;"
    },
    {
        "line": 6,
        "fullcodeline": "if (sizeof(int) > 2 && size > (1 << 16)) {"
    },
    {
        "line": 7,
        "fullcodeline": "RLC_THROW(ERR_NO_VALID);"
    }
]