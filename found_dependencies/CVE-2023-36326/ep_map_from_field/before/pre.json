[
    {
        "line": 7,
        "fullcodeline": "const int len_per_elm = (FP_PRIME + ep_param_level() + 7) / 8;"
    },
    {
        "line": 9,
        "fullcodeline": "bn_null(k);"
    },
    {
        "line": 10,
        "fullcodeline": "fp_null(t);"
    },
    {
        "line": 11,
        "fullcodeline": "ep_null(q);"
    },
    {
        "line": 18,
        "fullcodeline": "bn_new(k);"
    },
    {
        "line": 19,
        "fullcodeline": "fp_new(t);"
    },
    {
        "line": 20,
        "fullcodeline": "ep_new(q);"
    },
    {
        "line": 23,
        "fullcodeline": "const int abNeq0 = (ep_curve_opt_a() != RLC_ZERO) &&"
    },
    {
        "line": 47,
        "fullcodeline": "EP_MAP_CONVERT_BYTES(0);"
    },
    {
        "line": 48,
        "fullcodeline": "EP_MAP_APPLY_MAP(p);"
    },
    {
        "line": 49,
        "fullcodeline": "TMPL_MAP_CALL_ISOMAP(ep, p);"
    },
    {
        "line": 52,
        "fullcodeline": "EP_MAP_CONVERT_BYTES(1);"
    },
    {
        "line": 53,
        "fullcodeline": "EP_MAP_APPLY_MAP(q);"
    },
    {
        "line": 54,
        "fullcodeline": "TMPL_MAP_CALL_ISOMAP(ep, q);"
    },
    {
        "line": 63,
        "fullcodeline": "ep_add(p, p, q);"
    },
    {
        "line": 64,
        "fullcodeline": "ep_norm(p, p);"
    },
    {
        "line": 95,
        "fullcodeline": "RLC_THROW(ERR_CAUGHT);"
    },
    {
        "line": 98,
        "fullcodeline": "bn_free(k);"
    },
    {
        "line": 99,
        "fullcodeline": "fp_free(t);"
    },
    {
        "line": 100,
        "fullcodeline": "ep_free(q);"
    },
    {
        "line": 14,
        "fullcodeline": "if (len != 2 * len_per_elm) {"
    },
    {
        "line": 67,
        "fullcodeline": "switch (ep_curve_is_pairf()) {"
    },
    {
        "line": 15,
        "fullcodeline": "RLC_THROW(ERR_NO_VALID);"
    },
    {
        "line": 24,
        "fullcodeline": "(ep_curve_opt_b() != RLC_ZERO);"
    },
    {
        "line": 75,
        "fullcodeline": "fp_prime_get_par(k);"
    },
    {
        "line": 76,
        "fullcodeline": "bn_neg(k, k);"
    },
    {
        "line": 77,
        "fullcodeline": "bn_add_dig(k, k, 1);"
    },
    {
        "line": 86,
        "fullcodeline": "ep_curve_get_cof(k);"
    },
    {
        "line": 78,
        "fullcodeline": "if (bn_bits(k) < RLC_DIG) {"
    },
    {
        "line": 87,
        "fullcodeline": "if (bn_bits(k) < RLC_DIG) {"
    },
    {
        "line": 79,
        "fullcodeline": "ep_mul_dig(p, p, k->dp[0]);"
    },
    {
        "line": 88,
        "fullcodeline": "ep_mul_dig(p, p, k->dp[0]);"
    },
    {
        "line": 81,
        "fullcodeline": "ep_mul(p, p, k);"
    },
    {
        "line": 90,
        "fullcodeline": "ep_mul_basic(p, p, k);"
    }
]