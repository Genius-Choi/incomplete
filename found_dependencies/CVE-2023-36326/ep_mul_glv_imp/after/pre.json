[
    {
        "line": 3,
        "fullcodeline": "int8_t naf0[RLC_FP_BITS + 1], naf1[RLC_FP_BITS + 1], *t0, *t1;"
    },
    {
        "line": 4,
        "fullcodeline": "bn_t n, _k, k0, k1, v1[3], v2[3];"
    },
    {
        "line": 5,
        "fullcodeline": "ep_t q, t[1 << (EP_WIDTH - 2)];"
    },
    {
        "line": 8,
        "fullcodeline": "bn_null(n);"
    },
    {
        "line": 9,
        "fullcodeline": "bn_null(_k);"
    },
    {
        "line": 10,
        "fullcodeline": "bn_null(k0);"
    },
    {
        "line": 11,
        "fullcodeline": "bn_null(k1);"
    },
    {
        "line": 12,
        "fullcodeline": "ep_null(q);"
    },
    {
        "line": 15,
        "fullcodeline": "bn_new(n);"
    },
    {
        "line": 16,
        "fullcodeline": "bn_new(_k);"
    },
    {
        "line": 17,
        "fullcodeline": "bn_new(k0);"
    },
    {
        "line": 18,
        "fullcodeline": "bn_new(k1);"
    },
    {
        "line": 19,
        "fullcodeline": "ep_new(q);"
    },
    {
        "line": 31,
        "fullcodeline": "ep_curve_get_ord(n);"
    },
    {
        "line": 32,
        "fullcodeline": "ep_curve_get_v1(v1);"
    },
    {
        "line": 33,
        "fullcodeline": "ep_curve_get_v2(v2);"
    },
    {
        "line": 35,
        "fullcodeline": "bn_mod(_k, k, n);"
    },
    {
        "line": 36,
        "fullcodeline": "bn_rec_glv(k0, k1, _k, n, (const bn_t *)v1, (const bn_t *)v2);"
    },
    {
        "line": 37,
        "fullcodeline": "s0 = bn_sign(k0);"
    },
    {
        "line": 38,
        "fullcodeline": "s1 = bn_sign(k1);"
    },
    {
        "line": 39,
        "fullcodeline": "bn_abs(k0, k0);"
    },
    {
        "line": 40,
        "fullcodeline": "bn_abs(k1, k1);"
    },
    {
        "line": 49,
        "fullcodeline": "l0 = l1 = RLC_FP_BITS + 1;"
    },
    {
        "line": 50,
        "fullcodeline": "bn_rec_naf(naf0, &l0, k0, EP_WIDTH);"
    },
    {
        "line": 51,
        "fullcodeline": "bn_rec_naf(naf1, &l1, k1, EP_WIDTH);"
    },
    {
        "line": 53,
        "fullcodeline": "l = RLC_MAX(l0, l1);"
    },
    {
        "line": 54,
        "fullcodeline": "t0 = naf0 + l - 1;"
    },
    {
        "line": 55,
        "fullcodeline": "t1 = naf1 + l - 1;"
    },
    {
        "line": 57,
        "fullcodeline": "ep_set_infty(r);"
    },
    {
        "line": 85,
        "fullcodeline": "ep_norm(r, r);"
    },
    {
        "line": 91,
        "fullcodeline": "RLC_THROW(ERR_CAUGHT);"
    },
    {
        "line": 94,
        "fullcodeline": "bn_free(n);"
    },
    {
        "line": 95,
        "fullcodeline": "bn_free(_k);"
    },
    {
        "line": 96,
        "fullcodeline": "bn_free(k0);"
    },
    {
        "line": 97,
        "fullcodeline": "bn_free(k1);"
    },
    {
        "line": 99,
        "fullcodeline": "ep_free(q);"
    },
    {
        "line": 20,
        "fullcodeline": "for (i = 0; i < (1 << (EP_WIDTH - 2)); i++) {"
    },
    {
        "line": 24,
        "fullcodeline": "for (i = 0; i < 3; i++) {"
    },
    {
        "line": 42,
        "fullcodeline": "if (s0 == RLC_POS) {"
    },
    {
        "line": 58,
        "fullcodeline": "for (i = l - 1; i >= 0; i--, t0--, t1--) {"
    },
    {
        "line": 86,
        "fullcodeline": "if (bn_sign(_k) == RLC_NEG) {"
    },
    {
        "line": 100,
        "fullcodeline": "for (i = 0; i < 1 << (EP_WIDTH - 2); i++) {"
    },
    {
        "line": 103,
        "fullcodeline": "for (i = 0; i < 3; i++) {"
    },
    {
        "line": 21,
        "fullcodeline": "ep_null(t[i]);"
    },
    {
        "line": 22,
        "fullcodeline": "ep_new(t[i]);"
    },
    {
        "line": 25,
        "fullcodeline": "bn_null(v1[i]);"
    },
    {
        "line": 26,
        "fullcodeline": "bn_null(v2[i]);"
    },
    {
        "line": 27,
        "fullcodeline": "bn_new(v1[i]);"
    },
    {
        "line": 28,
        "fullcodeline": "bn_new(v2[i]);"
    },
    {
        "line": 43,
        "fullcodeline": "ep_tab(t, p, EP_WIDTH);"
    },
    {
        "line": 59,
        "fullcodeline": "ep_dbl(r, r);"
    },
    {
        "line": 61,
        "fullcodeline": "n0 = *t0;"
    },
    {
        "line": 62,
        "fullcodeline": "n1 = *t1;"
    },
    {
        "line": 87,
        "fullcodeline": "ep_neg(r, r);"
    },
    {
        "line": 101,
        "fullcodeline": "ep_free(t[i]);"
    },
    {
        "line": 104,
        "fullcodeline": "bn_free(v1[i]);"
    },
    {
        "line": 105,
        "fullcodeline": "bn_free(v2[i]);"
    },
    {
        "line": 45,
        "fullcodeline": "ep_neg(q, p);"
    },
    {
        "line": 46,
        "fullcodeline": "ep_tab(t, q, EP_WIDTH);"
    },
    {
        "line": 63,
        "fullcodeline": "if (n0 > 0) {"
    },
    {
        "line": 66,
        "fullcodeline": "if (n0 < 0) {"
    },
    {
        "line": 69,
        "fullcodeline": "if (n1 > 0) {"
    },
    {
        "line": 76,
        "fullcodeline": "if (n1 < 0) {"
    },
    {
        "line": 64,
        "fullcodeline": "ep_add(r, r, t[n0 / 2]);"
    },
    {
        "line": 67,
        "fullcodeline": "ep_sub(r, r, t[-n0 / 2]);"
    },
    {
        "line": 70,
        "fullcodeline": "ep_psi(q, t[n1 / 2]);"
    },
    {
        "line": 74,
        "fullcodeline": "ep_add(r, r, q);"
    },
    {
        "line": 77,
        "fullcodeline": "ep_psi(q, t[-n1 / 2]);"
    },
    {
        "line": 81,
        "fullcodeline": "ep_sub(r, r, q);"
    },
    {
        "line": 71,
        "fullcodeline": "if (s0 != s1) {"
    },
    {
        "line": 78,
        "fullcodeline": "if (s0 != s1) {"
    },
    {
        "line": 72,
        "fullcodeline": "ep_neg(q, q);"
    },
    {
        "line": 79,
        "fullcodeline": "ep_neg(q, q);"
    }
]