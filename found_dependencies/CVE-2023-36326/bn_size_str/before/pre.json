[
    {
        "line": 2,
        "fullcodeline": "int digits = 0;"
    },
    {
        "line": 5,
        "fullcodeline": "bn_null(t);"
    },
    {
        "line": 8,
        "fullcodeline": "if (radix < 2 || radix > 64) {"
    },
    {
        "line": 13,
        "fullcodeline": "if (bn_is_zero(a)) {"
    },
    {
        "line": 18,
        "fullcodeline": "if (radix == 2) {"
    },
    {
        "line": 22,
        "fullcodeline": "if (a->sign == RLC_NEG) {"
    },
    {
        "line": 27,
        "fullcodeline": "bn_new(t);"
    },
    {
        "line": 28,
        "fullcodeline": "bn_copy(t, a);"
    },
    {
        "line": 30,
        "fullcodeline": "t->sign = RLC_POS;"
    },
    {
        "line": 37,
        "fullcodeline": "RLC_THROW(ERR_CAUGHT);"
    },
    {
        "line": 42,
        "fullcodeline": "return digits + 1;"
    },
    {
        "line": 9,
        "fullcodeline": "RLC_THROW(ERR_NO_VALID);"
    },
    {
        "line": 23,
        "fullcodeline": "digits++;"
    },
    {
        "line": 19,
        "fullcodeline": "return bn_bits(a) + (a->sign == RLC_NEG ? 1 : 0) + 1;"
    },
    {
        "line": 32,
        "fullcodeline": "while (!bn_is_zero(t)) {"
    },
    {
        "line": 33,
        "fullcodeline": "bn_div_dig(t, t, (dig_t)radix);"
    },
    {
        "line": 34,
        "fullcodeline": "digits++;"
    }
]