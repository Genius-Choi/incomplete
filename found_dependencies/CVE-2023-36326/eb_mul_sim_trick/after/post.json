[
    {
        "line": 3,
        "fullcodeline": "eb_t t0[1 << (EB_WIDTH / 2)], t1[1 << (EB_WIDTH / 2)], t[1 << EB_WIDTH];"
    },
    {
        "line": 4,
        "fullcodeline": "size_t l0, l1, w = EB_WIDTH / 2;"
    },
    {
        "line": 5,
        "fullcodeline": "uint8_t w0[RLC_FB_BITS], w1[RLC_FB_BITS];"
    },
    {
        "line": 8,
        "fullcodeline": "bn_null(n);"
    },
    {
        "line": 10,
        "fullcodeline": "if (bn_is_zero(k) || eb_is_infty(p)) {"
    },
    {
        "line": 14,
        "fullcodeline": "if (bn_is_zero(m) || eb_is_infty(q)) {"
    },
    {
        "line": 20,
        "fullcodeline": "bn_new(n);"
    },
    {
        "line": 22,
        "fullcodeline": "eb_curve_get_ord(n);"
    },
    {
        "line": 35,
        "fullcodeline": "eb_set_infty(t0[0]);"
    },
    {
        "line": 36,
        "fullcodeline": "eb_copy(t0[1], p);"
    },
    {
        "line": 44,
        "fullcodeline": "eb_set_infty(t1[0]);"
    },
    {
        "line": 45,
        "fullcodeline": "eb_copy(t1[1], q);"
    },
    {
        "line": 63,
        "fullcodeline": "l0 = l1 = RLC_CEIL(RLC_FB_BITS + 1, w);"
    },
    {
        "line": 64,
        "fullcodeline": "bn_rec_win(w0, &l0, k, w);"
    },
    {
        "line": 65,
        "fullcodeline": "bn_rec_win(w1, &l1, m, w);"
    },
    {
        "line": 73,
        "fullcodeline": "eb_set_infty(r);"
    },
    {
        "line": 80,
        "fullcodeline": "eb_norm(r, r);"
    },
    {
        "line": 82,
        "fullcodeline": "RLC_THROW(ERR_CAUGHT);"
    },
    {
        "line": 85,
        "fullcodeline": "bn_free(n);"
    },
    {
        "line": 11,
        "fullcodeline": "eb_mul(r, q, m);"
    },
    {
        "line": 15,
        "fullcodeline": "eb_mul(r, p, k);"
    },
    {
        "line": 24,
        "fullcodeline": "for (int i = 0; i < (1 << w); i++) {"
    },
    {
        "line": 30,
        "fullcodeline": "for (int i = 0; i < (1 << EB_WIDTH); i++) {"
    },
    {
        "line": 37,
        "fullcodeline": "if (bn_sign(k) == RLC_NEG) {"
    },
    {
        "line": 40,
        "fullcodeline": "for (int i = 2; i < (1 << w); i++) {"
    },
    {
        "line": 46,
        "fullcodeline": "if (bn_sign(m) == RLC_NEG) {"
    },
    {
        "line": 49,
        "fullcodeline": "for (int i = 2; i < (1 << w); i++) {"
    },
    {
        "line": 53,
        "fullcodeline": "for (int i = 0; i < (1 << w); i++) {"
    },
    {
        "line": 66,
        "fullcodeline": "for (int i = l0; i < l1; i++) {"
    },
    {
        "line": 69,
        "fullcodeline": "for (int i = l1; i < l0; i++) {"
    },
    {
        "line": 74,
        "fullcodeline": "for (int i = RLC_MAX(l0, l1) - 1; i >= 0; i--) {"
    },
    {
        "line": 86,
        "fullcodeline": "for (int i = 0; i < (1 << w); i++) {"
    },
    {
        "line": 90,
        "fullcodeline": "for (int i = 0; i < (1 << EB_WIDTH); i++) {"
    },
    {
        "line": 25,
        "fullcodeline": "eb_null(t0[i]);"
    },
    {
        "line": 26,
        "fullcodeline": "eb_null(t1[i]);"
    },
    {
        "line": 27,
        "fullcodeline": "eb_new(t0[i]);"
    },
    {
        "line": 28,
        "fullcodeline": "eb_new(t1[i]);"
    },
    {
        "line": 31,
        "fullcodeline": "eb_null(t[i]);"
    },
    {
        "line": 32,
        "fullcodeline": "eb_new(t[i]);"
    },
    {
        "line": 38,
        "fullcodeline": "eb_neg(t0[1], t0[1]);"
    },
    {
        "line": 41,
        "fullcodeline": "eb_add(t0[i], t0[i - 1], t0[1]);"
    },
    {
        "line": 47,
        "fullcodeline": "eb_neg(t1[1], t1[1]);"
    },
    {
        "line": 50,
        "fullcodeline": "eb_add(t1[i], t1[i - 1], t1[1]);"
    },
    {
        "line": 67,
        "fullcodeline": "w0[i] = 0;"
    },
    {
        "line": 70,
        "fullcodeline": "w1[i] = 0;"
    },
    {
        "line": 78,
        "fullcodeline": "eb_add(r, r, t[(w0[i] << w) + w1[i]]);"
    },
    {
        "line": 87,
        "fullcodeline": "eb_free(t0[i]);"
    },
    {
        "line": 88,
        "fullcodeline": "eb_free(t1[i]);"
    },
    {
        "line": 91,
        "fullcodeline": "eb_free(t[i]);"
    },
    {
        "line": 54,
        "fullcodeline": "for (int j = 0; j < (1 << w); j++) {"
    },
    {
        "line": 75,
        "fullcodeline": "for (int j = 0; j < w; j++) {"
    },
    {
        "line": 55,
        "fullcodeline": "eb_add(t[(i << w) + j], t0[i], t1[j]);"
    },
    {
        "line": 76,
        "fullcodeline": "eb_dbl(r, r);"
    }
]