[
    {
        "line": 5,
        "fullcodeline": "bn_zero(a);"
    },
    {
        "line": 12,
        "fullcodeline": "j = 0;"
    },
    {
        "line": 7,
        "fullcodeline": "if (radix < 2 || radix > 64) {"
    },
    {
        "line": 13,
        "fullcodeline": "if (str[0] == '-') {"
    },
    {
        "line": 21,
        "fullcodeline": "bn_grow(a, RLC_CEIL(len * util_bits_dig(radix), RLC_DIG));"
    },
    {
        "line": 43,
        "fullcodeline": "a->sign = sign;"
    },
    {
        "line": 44,
        "fullcodeline": "bn_trim(a);"
    },
    {
        "line": 46,
        "fullcodeline": "RLC_THROW(ERR_CAUGHT);"
    },
    {
        "line": 8,
        "fullcodeline": "RLC_THROW(ERR_NO_VALID);"
    },
    {
        "line": 14,
        "fullcodeline": "j++;"
    },
    {
        "line": 15,
        "fullcodeline": "sign = RLC_NEG;"
    },
    {
        "line": 23,
        "fullcodeline": "while (j < len) {"
    },
    {
        "line": 17,
        "fullcodeline": "sign = RLC_POS;"
    },
    {
        "line": 27,
        "fullcodeline": "c = (char)((radix < 36) ? RLC_UPP(str[j]) : str[j]);"
    },
    {
        "line": 40,
        "fullcodeline": "j++;"
    },
    {
        "line": 24,
        "fullcodeline": "if (str[j] == 0) {"
    },
    {
        "line": 28,
        "fullcodeline": "for (i = 0; i < 64; i++) {"
    },
    {
        "line": 34,
        "fullcodeline": "if (i < radix) {"
    },
    {
        "line": 35,
        "fullcodeline": "bn_mul_dig(a, a, (dig_t)radix);"
    },
    {
        "line": 36,
        "fullcodeline": "bn_add_dig(a, a, (dig_t)i);"
    },
    {
        "line": 29,
        "fullcodeline": "if (c == util_conv_char(i)) {"
    }
]