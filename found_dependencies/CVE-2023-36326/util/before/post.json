[
    {
        "line": 2,
        "fullcodeline": "int bits, code = RLC_ERR;"
    },
    {
        "line": 3,
        "fullcodeline": "char str[RLC_BN_BITS + 2];"
    },
    {
        "line": 4,
        "fullcodeline": "dig_t digit, raw[RLC_BN_DIGS];"
    },
    {
        "line": 5,
        "fullcodeline": "uint8_t bin[RLC_CEIL(RLC_BN_BITS, 8)];"
    },
    {
        "line": 8,
        "fullcodeline": "bn_null(a);"
    },
    {
        "line": 9,
        "fullcodeline": "bn_null(b);"
    },
    {
        "line": 10,
        "fullcodeline": "bn_null(c);"
    },
    {
        "line": 233,
        "fullcodeline": "code = RLC_OK;"
    },
    {
        "line": 235,
        "fullcodeline": "bn_free(a);"
    },
    {
        "line": 236,
        "fullcodeline": "bn_free(b);"
    },
    {
        "line": 237,
        "fullcodeline": "bn_free(c);"
    },
    {
        "line": 13,
        "fullcodeline": "bn_new(a);"
    },
    {
        "line": 14,
        "fullcodeline": "bn_new(b);"
    },
    {
        "line": 15,
        "fullcodeline": "bn_new(c);"
    },
    {
        "line": 17,
        "fullcodeline": "TEST_CASE(\"comparison is consistent\") {"
    },
    {
        "line": 30,
        "fullcodeline": "TEST_CASE(\"copy and comparison are consistent\") {"
    },
    {
        "line": 45,
        "fullcodeline": "TEST_CASE(\"absolute, negation and comparison are consistent\") {"
    },
    {
        "line": 56,
        "fullcodeline": "TEST_CASE(\"signal test is correct\") {"
    },
    {
        "line": 63,
        "fullcodeline": "TEST_CASE(\"assignment to zero and comparison are consistent\") {"
    },
    {
        "line": 76,
        "fullcodeline": "TEST_CASE(\"assignment to zero and zero test are consistent\") {"
    },
    {
        "line": 82,
        "fullcodeline": "TEST_CASE(\"oddness test is correct\") {"
    },
    {
        "line": 89,
        "fullcodeline": "bits = 0;"
    },
    {
        "line": 90,
        "fullcodeline": "TEST_CASE(\"assignment and bit counting are consistent\") {"
    },
    {
        "line": 96,
        "fullcodeline": "bits = 0;"
    },
    {
        "line": 97,
        "fullcodeline": "TEST_CASE(\"bit setting and getting are consistent\") {"
    },
    {
        "line": 107,
        "fullcodeline": "bits = 0;"
    },
    {
        "line": 108,
        "fullcodeline": "TEST_CASE(\"hamming weight is correct\") {"
    },
    {
        "line": 118,
        "fullcodeline": "TEST_CASE(\"generating a random integer is consistent\") {"
    },
    {
        "line": 136,
        "fullcodeline": "TEST_CASE(\"reading and writing the first digit are consistent\") {"
    },
    {
        "line": 144,
        "fullcodeline": "TEST_CASE(\"assignment to a constant and comparison are consistent\") {"
    },
    {
        "line": 153,
        "fullcodeline": "TEST_CASE(\"assignment to random and comparison are consistent\") {"
    },
    {
        "line": 163,
        "fullcodeline": "bits = 0;"
    },
    {
        "line": 164,
        "fullcodeline": "TEST_CASE(\"different forms of assignment are consistent\") {"
    },
    {
        "line": 172,
        "fullcodeline": "TEST_CASE(\"reading and writing a positive number are consistent\") {"
    },
    {
        "line": 191,
        "fullcodeline": "TEST_CASE(\"getting the size of a positive number is correct\") {"
    },
    {
        "line": 200,
        "fullcodeline": "TEST_CASE(\"reading and writing a negative number are consistent\") {"
    },
    {
        "line": 221,
        "fullcodeline": "TEST_CASE(\"getting the size of a negative number is correct\") {"
    },
    {
        "line": 231,
        "fullcodeline": "RLC_ERROR(end);"
    },
    {
        "line": 18,
        "fullcodeline": "bn_rand(a, RLC_POS, RLC_BN_BITS);"
    },
    {
        "line": 19,
        "fullcodeline": "bn_rand(b, RLC_POS, RLC_BN_BITS);"
    },
    {
        "line": 31,
        "fullcodeline": "bn_rand(a, RLC_POS, RLC_BN_BITS);"
    },
    {
        "line": 32,
        "fullcodeline": "bn_rand(b, RLC_POS, RLC_BN_BITS);"
    },
    {
        "line": 33,
        "fullcodeline": "bn_rand(c, RLC_POS, RLC_BN_BITS);"
    },
    {
        "line": 46,
        "fullcodeline": "bn_rand(a, RLC_POS, RLC_BN_BITS);"
    },
    {
        "line": 47,
        "fullcodeline": "bn_neg(b, a);"
    },
    {
        "line": 48,
        "fullcodeline": "bn_abs(a, b);"
    },
    {
        "line": 49,
        "fullcodeline": "TEST_ASSERT(bn_cmp(a, b) == RLC_GT, end);"
    },
    {
        "line": 50,
        "fullcodeline": "TEST_ASSERT(bn_cmp(b, a) == RLC_LT, end);"
    },
    {
        "line": 51,
        "fullcodeline": "TEST_ASSERT(bn_cmp_abs(a, b) == RLC_EQ, end);"
    },
    {
        "line": 52,
        "fullcodeline": "TEST_ASSERT(bn_cmp_dig(a, (dig_t)0) == RLC_GT, end);"
    },
    {
        "line": 53,
        "fullcodeline": "TEST_ASSERT(bn_cmp_dig(b, (dig_t)0) == RLC_LT, end);"
    },
    {
        "line": 57,
        "fullcodeline": "bn_rand(a, RLC_POS, RLC_BN_BITS);"
    },
    {
        "line": 58,
        "fullcodeline": "bn_rand(b, RLC_NEG, RLC_BN_BITS);"
    },
    {
        "line": 59,
        "fullcodeline": "TEST_ASSERT(bn_sign(a) == RLC_POS, end);"
    },
    {
        "line": 60,
        "fullcodeline": "TEST_ASSERT(bn_sign(b) == RLC_NEG, end);"
    },
    {
        "line": 64,
        "fullcodeline": "bn_rand(a, RLC_POS, RLC_BN_BITS);"
    },
    {
        "line": 65,
        "fullcodeline": "bn_rand(b, RLC_NEG, RLC_BN_BITS);"
    },
    {
        "line": 66,
        "fullcodeline": "bn_zero(c);"
    },
    {
        "line": 67,
        "fullcodeline": "TEST_ASSERT(bn_cmp(a, c) == RLC_GT, end);"
    },
    {
        "line": 68,
        "fullcodeline": "TEST_ASSERT(bn_cmp(c, a) == RLC_LT, end);"
    },
    {
        "line": 69,
        "fullcodeline": "TEST_ASSERT(bn_cmp(b, c) == RLC_LT, end);"
    },
    {
        "line": 70,
        "fullcodeline": "TEST_ASSERT(bn_cmp(c, b) == RLC_GT, end);"
    },
    {
        "line": 71,
        "fullcodeline": "TEST_ASSERT(bn_cmp_dig(a, (dig_t)0) == RLC_GT, end);"
    },
    {
        "line": 72,
        "fullcodeline": "TEST_ASSERT(bn_cmp_dig(b, (dig_t)0) == RLC_LT, end);"
    },
    {
        "line": 73,
        "fullcodeline": "TEST_ASSERT(bn_cmp_dig(c, (dig_t)0) == RLC_EQ, end);"
    },
    {
        "line": 77,
        "fullcodeline": "bn_zero(c);"
    },
    {
        "line": 78,
        "fullcodeline": "TEST_ASSERT(bn_is_zero(c), end);"
    },
    {
        "line": 79,
        "fullcodeline": "TEST_ASSERT(bn_cmp_dig(c, (dig_t)0) == RLC_EQ, end);"
    },
    {
        "line": 83,
        "fullcodeline": "bn_set_dig(a, 2);"
    },
    {
        "line": 84,
        "fullcodeline": "bn_set_dig(b, 1);"
    },
    {
        "line": 85,
        "fullcodeline": "TEST_ASSERT(bn_is_even(a) == 1, end);"
    },
    {
        "line": 86,
        "fullcodeline": "TEST_ASSERT(bn_is_even(b) == 0, end);"
    },
    {
        "line": 91,
        "fullcodeline": "bn_set_2b(a, bits);"
    },
    {
        "line": 92,
        "fullcodeline": "TEST_ASSERT(bits + 1 == bn_bits(a), end);"
    },
    {
        "line": 93,
        "fullcodeline": "bits = (bits + 1) % RLC_BN_BITS;"
    },
    {
        "line": 98,
        "fullcodeline": "bn_zero(a);"
    },
    {
        "line": 99,
        "fullcodeline": "bn_set_bit(a, bits, 1);"
    },
    {
        "line": 100,
        "fullcodeline": "TEST_ASSERT(bn_get_bit(a, bits) == 1, end);"
    },
    {
        "line": 101,
        "fullcodeline": "bn_set_bit(a, bits, 0);"
    },
    {
        "line": 102,
        "fullcodeline": "TEST_ASSERT(bn_get_bit(a, bits) == 0, end);"
    },
    {
        "line": 103,
        "fullcodeline": "bits = (bits + 1) % RLC_BN_BITS;"
    },
    {
        "line": 109,
        "fullcodeline": "bn_zero(a);"
    },
    {
        "line": 113,
        "fullcodeline": "TEST_ASSERT(bn_ham(a) == bits, end);"
    },
    {
        "line": 114,
        "fullcodeline": "bits = (bits + 1) % RLC_BN_BITS;"
    },
    {
        "line": 122,
        "fullcodeline": "bn_rand_mod(a, b);"
    },
    {
        "line": 123,
        "fullcodeline": "TEST_ASSERT(bn_sign(a) == bn_sign(b), end);"
    },
    {
        "line": 124,
        "fullcodeline": "TEST_ASSERT(bn_is_zero(a) == 0, end);"
    },
    {
        "line": 125,
        "fullcodeline": "TEST_ASSERT(bn_cmp(a, b) == RLC_LT, end);"
    },
    {
        "line": 129,
        "fullcodeline": "bn_rand_mod(a, b);"
    },
    {
        "line": 130,
        "fullcodeline": "TEST_ASSERT(bn_sign(a) == bn_sign(b), end);"
    },
    {
        "line": 131,
        "fullcodeline": "TEST_ASSERT(bn_is_zero(a) == 0, end);"
    },
    {
        "line": 132,
        "fullcodeline": "TEST_ASSERT(bn_cmp(a, b) == RLC_GT, end);"
    },
    {
        "line": 137,
        "fullcodeline": "bn_rand(a, RLC_POS, RLC_DIG);"
    },
    {
        "line": 138,
        "fullcodeline": "bn_rand(b, RLC_POS, RLC_DIG);"
    },
    {
        "line": 139,
        "fullcodeline": "bn_get_dig(&digit, a);"
    },
    {
        "line": 140,
        "fullcodeline": "bn_set_dig(b, digit);"
    },
    {
        "line": 141,
        "fullcodeline": "TEST_ASSERT(bn_cmp(a, b) == RLC_EQ, end);"
    },
    {
        "line": 145,
        "fullcodeline": "bn_set_dig(a, 2);"
    },
    {
        "line": 146,
        "fullcodeline": "bn_set_dig(b, 1);"
    },
    {
        "line": 147,
        "fullcodeline": "TEST_ASSERT(bn_cmp(a, b) == RLC_GT, end);"
    },
    {
        "line": 148,
        "fullcodeline": "TEST_ASSERT(bn_cmp(b, a) == RLC_LT, end);"
    },
    {
        "line": 149,
        "fullcodeline": "TEST_ASSERT(bn_cmp_dig(a, (dig_t)0) == RLC_GT, end);"
    },
    {
        "line": 150,
        "fullcodeline": "TEST_ASSERT(bn_cmp_dig(b, (dig_t)0) == RLC_GT, end);"
    },
    {
        "line": 154,
        "fullcodeline": "bn_rand(a, RLC_POS, RLC_BN_BITS);"
    },
    {
        "line": 155,
        "fullcodeline": "bn_rand(b, RLC_NEG, RLC_BN_BITS);"
    },
    {
        "line": 156,
        "fullcodeline": "bn_zero(c);"
    },
    {
        "line": 157,
        "fullcodeline": "TEST_ASSERT(bn_cmp(a, c) == RLC_GT, end);"
    },
    {
        "line": 158,
        "fullcodeline": "TEST_ASSERT(bn_cmp(b, c) == RLC_LT, end);"
    },
    {
        "line": 159,
        "fullcodeline": "TEST_ASSERT(bn_cmp_dig(a, (dig_t)0) == RLC_GT, end);"
    },
    {
        "line": 160,
        "fullcodeline": "TEST_ASSERT(bn_cmp_dig(b, (dig_t)0) == RLC_LT, end);"
    },
    {
        "line": 165,
        "fullcodeline": "bn_set_dig(a, (dig_t)(1) << (dig_t)bits);"
    },
    {
        "line": 166,
        "fullcodeline": "bn_set_2b(b, bits);"
    },
    {
        "line": 167,
        "fullcodeline": "bits++;"
    },
    {
        "line": 168,
        "fullcodeline": "bits %= (RLC_DIG);"
    },
    {
        "line": 169,
        "fullcodeline": "TEST_ASSERT(bn_cmp(a, b) == RLC_EQ, end);"
    },
    {
        "line": 173,
        "fullcodeline": "int len = RLC_CEIL(RLC_BN_BITS, 8);"
    },
    {
        "line": 174,
        "fullcodeline": "bn_rand(a, RLC_POS, RLC_BN_BITS);"
    },
    {
        "line": 181,
        "fullcodeline": "bn_write_bin(bin, len, a);"
    },
    {
        "line": 182,
        "fullcodeline": "bn_read_bin(b, bin, len);"
    },
    {
        "line": 183,
        "fullcodeline": "TEST_ASSERT(bn_cmp(a, b) == RLC_EQ, end);"
    },
    {
        "line": 184,
        "fullcodeline": "len = RLC_BN_DIGS;"
    },
    {
        "line": 185,
        "fullcodeline": "bn_write_raw(raw, len, a);"
    },
    {
        "line": 186,
        "fullcodeline": "bn_read_raw(b, raw, len);"
    },
    {
        "line": 187,
        "fullcodeline": "TEST_ASSERT(bn_cmp(a, b) == RLC_EQ, end);"
    },
    {
        "line": 192,
        "fullcodeline": "bn_rand(a, RLC_POS, RLC_BN_BITS);"
    },
    {
        "line": 193,
        "fullcodeline": "TEST_ASSERT((bn_size_str(a, 2) - 1) == bn_bits(a), end);"
    },
    {
        "line": 194,
        "fullcodeline": "bits = (bn_bits(a) % 8 == 0 ? bn_bits(a) / 8 : bn_bits(a) / 8 + 1);"
    },
    {
        "line": 195,
        "fullcodeline": "TEST_ASSERT(bn_size_bin(a) == bits, end);"
    },
    {
        "line": 196,
        "fullcodeline": "TEST_ASSERT(bn_size_raw(a) == a->used, end);"
    },
    {
        "line": 201,
        "fullcodeline": "int len = RLC_CEIL(RLC_BN_BITS, 8);"
    },
    {
        "line": 202,
        "fullcodeline": "bn_rand(a, RLC_NEG, RLC_BN_BITS);"
    },
    {
        "line": 209,
        "fullcodeline": "bn_write_bin(bin, len, a);"
    },
    {
        "line": 210,
        "fullcodeline": "bn_read_bin(b, bin, len);"
    },
    {
        "line": 211,
        "fullcodeline": "bn_neg(b, b);"
    },
    {
        "line": 212,
        "fullcodeline": "TEST_ASSERT(bn_cmp(a, b) == RLC_EQ, end);"
    },
    {
        "line": 213,
        "fullcodeline": "len = RLC_BN_DIGS;"
    },
    {
        "line": 214,
        "fullcodeline": "bn_write_raw(raw, len, a);"
    },
    {
        "line": 215,
        "fullcodeline": "bn_read_raw(b, raw, len);"
    },
    {
        "line": 216,
        "fullcodeline": "bn_neg(b, b);"
    },
    {
        "line": 217,
        "fullcodeline": "TEST_ASSERT(bn_cmp(a, b) == RLC_EQ, end);"
    },
    {
        "line": 222,
        "fullcodeline": "bn_rand(a, RLC_NEG, RLC_BN_BITS);"
    },
    {
        "line": 223,
        "fullcodeline": "TEST_ASSERT((bn_size_str(a, 2) - 2) == bn_bits(a), end);"
    },
    {
        "line": 224,
        "fullcodeline": "bits = (bn_bits(a) % 8 == 0 ? bn_bits(a) / 8 : bn_bits(a) / 8 + 1);"
    },
    {
        "line": 225,
        "fullcodeline": "TEST_ASSERT(bn_size_bin(a) == bits, end);"
    },
    {
        "line": 226,
        "fullcodeline": "TEST_ASSERT(bn_size_raw(a) == a->used, end);"
    },
    {
        "line": 20,
        "fullcodeline": "if (bn_cmp(a, b) != RLC_EQ) {"
    },
    {
        "line": 34,
        "fullcodeline": "if (bn_cmp(a, c) != RLC_EQ) {"
    },
    {
        "line": 38,
        "fullcodeline": "if (bn_cmp(b, c) != RLC_EQ) {"
    },
    {
        "line": 110,
        "fullcodeline": "for (int j = 0; j < bits; j++) {"
    },
    {
        "line": 121,
        "fullcodeline": "} while (bn_is_zero(b));"
    },
    {
        "line": 128,
        "fullcodeline": "} while (bn_bits(b) <= 1);"
    },
    {
        "line": 175,
        "fullcodeline": "for (int j = 2; j <= 64; j++) {"
    },
    {
        "line": 203,
        "fullcodeline": "for (int j = 2; j <= 64; j++) {"
    },
    {
        "line": 35,
        "fullcodeline": "bn_copy(c, a);"
    },
    {
        "line": 36,
        "fullcodeline": "TEST_ASSERT(bn_cmp(c, a) == RLC_EQ, end);"
    },
    {
        "line": 39,
        "fullcodeline": "bn_copy(c, b);"
    },
    {
        "line": 40,
        "fullcodeline": "TEST_ASSERT(bn_cmp(b, c) == RLC_EQ, end);"
    },
    {
        "line": 111,
        "fullcodeline": "bn_set_bit(a, j, 1);"
    },
    {
        "line": 120,
        "fullcodeline": "bn_rand(b, RLC_POS, RLC_BN_BITS);"
    },
    {
        "line": 127,
        "fullcodeline": "bn_rand(b, RLC_NEG, RLC_DIG);"
    },
    {
        "line": 176,
        "fullcodeline": "bits = bn_size_str(a, j);"
    },
    {
        "line": 177,
        "fullcodeline": "bn_write_str(str, bits, a, j);"
    },
    {
        "line": 178,
        "fullcodeline": "bn_read_str(b, str, bits, j);"
    },
    {
        "line": 179,
        "fullcodeline": "TEST_ASSERT(bn_cmp(a, b) == RLC_EQ, end);"
    },
    {
        "line": 204,
        "fullcodeline": "bits = bn_size_str(a, j);"
    },
    {
        "line": 205,
        "fullcodeline": "bn_write_str(str, bits, a, j);"
    },
    {
        "line": 206,
        "fullcodeline": "bn_read_str(b, str, bits, j);"
    },
    {
        "line": 207,
        "fullcodeline": "TEST_ASSERT(bn_cmp(a, b) == RLC_EQ, end);"
    },
    {
        "line": 21,
        "fullcodeline": "if (bn_cmp(a, b) == RLC_GT) {"
    },
    {
        "line": 22,
        "fullcodeline": "TEST_ASSERT(bn_cmp(b, a) == RLC_LT, end);"
    },
    {
        "line": 24,
        "fullcodeline": "TEST_ASSERT(bn_cmp(b, a) == RLC_GT, end);"
    }
]