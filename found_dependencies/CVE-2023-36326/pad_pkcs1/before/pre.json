[
    {
        "line": 2,
        "fullcodeline": "uint8_t *id, pad = 0;"
    },
    {
        "line": 6,
        "fullcodeline": "bn_null(t);"
    },
    {
        "line": 9,
        "fullcodeline": "bn_new(t);"
    },
    {
        "line": 154,
        "fullcodeline": "result = RLC_ERR;"
    },
    {
        "line": 157,
        "fullcodeline": "bn_free(t);"
    },
    {
        "line": 14,
        "fullcodeline": "bn_zero(m);"
    },
    {
        "line": 15,
        "fullcodeline": "bn_lsh(m, m, 8);"
    },
    {
        "line": 16,
        "fullcodeline": "bn_add_dig(m, m, RSA_PUB);"
    },
    {
        "line": 18,
        "fullcodeline": "*p_len = k_len - 3 - m_len;"
    },
    {
        "line": 27,
        "fullcodeline": "bn_lsh(m, m, (m_len + 1) * 8);"
    },
    {
        "line": 28,
        "fullcodeline": "result = RLC_OK;"
    },
    {
        "line": 31,
        "fullcodeline": "m_len = k_len - 1;"
    },
    {
        "line": 32,
        "fullcodeline": "bn_rsh(t, m, 8 * m_len);"
    },
    {
        "line": 53,
        "fullcodeline": "id = hash_id(MD_MAP, &len);"
    },
    {
        "line": 54,
        "fullcodeline": "bn_zero(m);"
    },
    {
        "line": 55,
        "fullcodeline": "bn_lsh(m, m, 8);"
    },
    {
        "line": 56,
        "fullcodeline": "bn_add_dig(m, m, RSA_PRV);"
    },
    {
        "line": 58,
        "fullcodeline": "*p_len = k_len - 3 - m_len - len;"
    },
    {
        "line": 64,
        "fullcodeline": "bn_lsh(m, m, 8 * (len + 1));"
    },
    {
        "line": 65,
        "fullcodeline": "bn_read_bin(t, id, len);"
    },
    {
        "line": 66,
        "fullcodeline": "bn_add(m, m, t);"
    },
    {
        "line": 68,
        "fullcodeline": "bn_lsh(m, m, m_len * 8);"
    },
    {
        "line": 69,
        "fullcodeline": "result = RLC_OK;"
    },
    {
        "line": 73,
        "fullcodeline": "bn_zero(m);"
    },
    {
        "line": 74,
        "fullcodeline": "bn_lsh(m, m, 8);"
    },
    {
        "line": 75,
        "fullcodeline": "bn_add_dig(m, m, RSA_PRV);"
    },
    {
        "line": 77,
        "fullcodeline": "*p_len = k_len - 3 - m_len;"
    },
    {
        "line": 83,
        "fullcodeline": "bn_lsh(m, m, 8 * (m_len + 1));"
    },
    {
        "line": 84,
        "fullcodeline": "result = RLC_OK;"
    },
    {
        "line": 87,
        "fullcodeline": "m_len = k_len - 1;"
    },
    {
        "line": 88,
        "fullcodeline": "bn_rsh(t, m, 8 * m_len);"
    },
    {
        "line": 124,
        "fullcodeline": "m_len = k_len - 1;"
    },
    {
        "line": 125,
        "fullcodeline": "bn_rsh(t, m, 8 * m_len);"
    },
    {
        "line": 19,
        "fullcodeline": "for (int i = 0; i < *p_len; i++) {"
    },
    {
        "line": 33,
        "fullcodeline": "if (bn_is_zero(t)) {"
    },
    {
        "line": 59,
        "fullcodeline": "for (int i = 0; i < *p_len; i++) {"
    },
    {
        "line": 78,
        "fullcodeline": "for (int i = 0; i < *p_len; i++) {"
    },
    {
        "line": 89,
        "fullcodeline": "if (bn_is_zero(t)) {"
    },
    {
        "line": 126,
        "fullcodeline": "if (bn_is_zero(t)) {"
    },
    {
        "line": 20,
        "fullcodeline": "bn_lsh(m, m, 8);"
    },
    {
        "line": 24,
        "fullcodeline": "bn_add_dig(m, m, pad);"
    },
    {
        "line": 34,
        "fullcodeline": "*p_len = m_len;"
    },
    {
        "line": 35,
        "fullcodeline": "m_len--;"
    },
    {
        "line": 36,
        "fullcodeline": "bn_rsh(t, m, 8 * m_len);"
    },
    {
        "line": 37,
        "fullcodeline": "pad = (uint8_t)t->dp[0];"
    },
    {
        "line": 60,
        "fullcodeline": "bn_lsh(m, m, 8);"
    },
    {
        "line": 61,
        "fullcodeline": "bn_add_dig(m, m, RSA_PAD);"
    },
    {
        "line": 79,
        "fullcodeline": "bn_lsh(m, m, 8);"
    },
    {
        "line": 80,
        "fullcodeline": "bn_add_dig(m, m, RSA_PAD);"
    },
    {
        "line": 90,
        "fullcodeline": "m_len--;"
    },
    {
        "line": 91,
        "fullcodeline": "bn_rsh(t, m, 8 * m_len);"
    },
    {
        "line": 92,
        "fullcodeline": "pad = (uint8_t)t->dp[0];"
    },
    {
        "line": 127,
        "fullcodeline": "m_len--;"
    },
    {
        "line": 128,
        "fullcodeline": "bn_rsh(t, m, 8 * m_len);"
    },
    {
        "line": 129,
        "fullcodeline": "pad = (uint8_t)t->dp[0];"
    },
    {
        "line": 23,
        "fullcodeline": "} while (pad == 0);"
    },
    {
        "line": 38,
        "fullcodeline": "if (pad == RSA_PUB) {"
    },
    {
        "line": 93,
        "fullcodeline": "if (pad == RSA_PRV) {"
    },
    {
        "line": 130,
        "fullcodeline": "if (pad == RSA_PRV) {"
    },
    {
        "line": 22,
        "fullcodeline": "rand_bytes(&pad, 1);"
    },
    {
        "line": 45,
        "fullcodeline": "*p_len -= (m_len - 1);"
    },
    {
        "line": 46,
        "fullcodeline": "bn_mod_2b(m, m, (k_len - *p_len) * 8);"
    },
    {
        "line": 47,
        "fullcodeline": "result = (m_len > 0 ? RLC_OK : RLC_ERR);"
    },
    {
        "line": 94,
        "fullcodeline": "int counter = 0;"
    },
    {
        "line": 102,
        "fullcodeline": "id = hash_id(MD_MAP, &len);"
    },
    {
        "line": 103,
        "fullcodeline": "bn_rsh(t, m, 8 * m_len);"
    },
    {
        "line": 104,
        "fullcodeline": "bn_mod_2b(t, t, 8);"
    },
    {
        "line": 131,
        "fullcodeline": "int counter = 0;"
    },
    {
        "line": 139,
        "fullcodeline": "*p_len = k_len - m_len;"
    },
    {
        "line": 140,
        "fullcodeline": "bn_rsh(t, m, 8 * m_len);"
    },
    {
        "line": 141,
        "fullcodeline": "bn_mod_2b(t, t, 8);"
    },
    {
        "line": 43,
        "fullcodeline": "} while (pad != 0 && m_len > 0);"
    },
    {
        "line": 100,
        "fullcodeline": "} while (pad == RSA_PAD && m_len > 0);"
    },
    {
        "line": 105,
        "fullcodeline": "if (bn_is_zero(t)) {"
    },
    {
        "line": 137,
        "fullcodeline": "} while (pad == RSA_PAD && m_len > 0);"
    },
    {
        "line": 142,
        "fullcodeline": "if (bn_is_zero(t)) {"
    },
    {
        "line": 40,
        "fullcodeline": "m_len--;"
    },
    {
        "line": 41,
        "fullcodeline": "bn_rsh(t, m, 8 * m_len);"
    },
    {
        "line": 42,
        "fullcodeline": "pad = (uint8_t)t->dp[0];"
    },
    {
        "line": 96,
        "fullcodeline": "counter++;"
    },
    {
        "line": 97,
        "fullcodeline": "m_len--;"
    },
    {
        "line": 98,
        "fullcodeline": "bn_rsh(t, m, 8 * m_len);"
    },
    {
        "line": 99,
        "fullcodeline": "pad = (uint8_t)t->dp[0];"
    },
    {
        "line": 106,
        "fullcodeline": "m_len -= len;"
    },
    {
        "line": 107,
        "fullcodeline": "bn_rsh(t, m, 8 * m_len);"
    },
    {
        "line": 108,
        "fullcodeline": "int r = 0;"
    },
    {
        "line": 114,
        "fullcodeline": "*p_len = k_len - m_len;"
    },
    {
        "line": 115,
        "fullcodeline": "bn_mod_2b(m, m, m_len * 8);"
    },
    {
        "line": 133,
        "fullcodeline": "counter++;"
    },
    {
        "line": 134,
        "fullcodeline": "m_len--;"
    },
    {
        "line": 135,
        "fullcodeline": "bn_rsh(t, m, 8 * m_len);"
    },
    {
        "line": 136,
        "fullcodeline": "pad = (uint8_t)t->dp[0];"
    },
    {
        "line": 143,
        "fullcodeline": "bn_mod_2b(m, m, m_len * 8);"
    },
    {
        "line": 109,
        "fullcodeline": "for (int i = 0; i < len; i++) {"
    },
    {
        "line": 116,
        "fullcodeline": "if (r == 0 && m_len == RLC_MD_LEN && counter >= 8) {"
    },
    {
        "line": 144,
        "fullcodeline": "if (m_len == RLC_MD_LEN && counter >= 8) {"
    },
    {
        "line": 110,
        "fullcodeline": "pad = (uint8_t)t->dp[0];"
    },
    {
        "line": 111,
        "fullcodeline": "r |= pad ^ id[len - i - 1];"
    },
    {
        "line": 112,
        "fullcodeline": "bn_rsh(t, t, 8);"
    },
    {
        "line": 117,
        "fullcodeline": "result = RLC_OK;"
    },
    {
        "line": 145,
        "fullcodeline": "result = RLC_OK;"
    }
]