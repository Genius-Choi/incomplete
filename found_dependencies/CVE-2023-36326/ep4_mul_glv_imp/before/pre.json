[
    {
        "line": 2,
        "fullcodeline": "int sign, i, j, l, _l[8];"
    },
    {
        "line": 3,
        "fullcodeline": "bn_t n, _k[8], u, v;"
    },
    {
        "line": 4,
        "fullcodeline": "int8_t naf[8][RLC_FP_BITS + 1];"
    },
    {
        "line": 5,
        "fullcodeline": "ep4_t q[8];"
    },
    {
        "line": 7,
        "fullcodeline": "bn_null(n);"
    },
    {
        "line": 8,
        "fullcodeline": "bn_null(u);"
    },
    {
        "line": 9,
        "fullcodeline": "bn_null(v);"
    },
    {
        "line": 12,
        "fullcodeline": "bn_new(n);"
    },
    {
        "line": 13,
        "fullcodeline": "bn_new(u);"
    },
    {
        "line": 14,
        "fullcodeline": "bn_new(v);"
    },
    {
        "line": 22,
        "fullcodeline": "bn_abs(v, k);"
    },
    {
        "line": 23,
        "fullcodeline": "ep4_curve_get_ord(n);"
    },
    {
        "line": 28,
        "fullcodeline": "fp_prime_get_par(u);"
    },
    {
        "line": 29,
        "fullcodeline": "sign = bn_sign(u);"
    },
    {
        "line": 30,
        "fullcodeline": "bn_abs(u, u);"
    },
    {
        "line": 32,
        "fullcodeline": "ep4_norm(q[0], p);"
    },
    {
        "line": 47,
        "fullcodeline": "l = 0;"
    },
    {
        "line": 57,
        "fullcodeline": "ep4_set_infty(r);"
    },
    {
        "line": 72,
        "fullcodeline": "ep4_norm(r, r);"
    },
    {
        "line": 75,
        "fullcodeline": "RLC_THROW(ERR_CAUGHT);"
    },
    {
        "line": 78,
        "fullcodeline": "bn_free(n);"
    },
    {
        "line": 79,
        "fullcodeline": "bn_free(u);"
    },
    {
        "line": 80,
        "fullcodeline": "bn_free(v);"
    },
    {
        "line": 15,
        "fullcodeline": "for (i = 0; i < 8; i++) {"
    },
    {
        "line": 24,
        "fullcodeline": "if (bn_cmp_abs(v, n) == RLC_GT) {"
    },
    {
        "line": 33,
        "fullcodeline": "for (i = 0; i < 8; i++) {"
    },
    {
        "line": 48,
        "fullcodeline": "for (i = 0; i < 8; i++) {"
    },
    {
        "line": 58,
        "fullcodeline": "for (j = l - 1; j >= 0; j--) {"
    },
    {
        "line": 81,
        "fullcodeline": "for (i = 0; i < 8; i++) {"
    },
    {
        "line": 16,
        "fullcodeline": "bn_null(_k[i]);"
    },
    {
        "line": 17,
        "fullcodeline": "ep4_null(q[i]);"
    },
    {
        "line": 18,
        "fullcodeline": "bn_new(_k[i]);"
    },
    {
        "line": 19,
        "fullcodeline": "ep4_new(q[i]);"
    },
    {
        "line": 25,
        "fullcodeline": "bn_mod(v, v, n);"
    },
    {
        "line": 34,
        "fullcodeline": "bn_mod(_k[i], v, u);"
    },
    {
        "line": 35,
        "fullcodeline": "bn_div(v, v, u);"
    },
    {
        "line": 52,
        "fullcodeline": "_l[i] = RLC_FP_BITS + 1;"
    },
    {
        "line": 53,
        "fullcodeline": "bn_rec_naf(naf[i], &_l[i], _k[i], 2);"
    },
    {
        "line": 54,
        "fullcodeline": "l = RLC_MAX(l, _l[i]);"
    },
    {
        "line": 59,
        "fullcodeline": "ep4_dbl(r, r);"
    },
    {
        "line": 82,
        "fullcodeline": "bn_free(_k[i]);"
    },
    {
        "line": 83,
        "fullcodeline": "ep4_free(q[i]);"
    },
    {
        "line": 36,
        "fullcodeline": "if ((sign == RLC_NEG) && (i % 2 != 0)) {"
    },
    {
        "line": 39,
        "fullcodeline": "if (bn_sign(k) == RLC_NEG) {"
    },
    {
        "line": 42,
        "fullcodeline": "if (i > 0) {"
    },
    {
        "line": 49,
        "fullcodeline": "if (bn_sign(_k[i]) == RLC_NEG) {"
    },
    {
        "line": 61,
        "fullcodeline": "for (i = 0; i < 8; i++) {"
    },
    {
        "line": 37,
        "fullcodeline": "bn_neg(_k[i], _k[i]);"
    },
    {
        "line": 40,
        "fullcodeline": "bn_neg(_k[i], _k[i]);"
    },
    {
        "line": 43,
        "fullcodeline": "ep4_frb(q[i], q[i - 1], 1);"
    },
    {
        "line": 50,
        "fullcodeline": "ep4_neg(q[i], q[i]);"
    },
    {
        "line": 62,
        "fullcodeline": "if (naf[i][j] > 0) {"
    },
    {
        "line": 65,
        "fullcodeline": "if (naf[i][j] < 0) {"
    },
    {
        "line": 63,
        "fullcodeline": "ep4_add(r, r, q[i]);"
    },
    {
        "line": 66,
        "fullcodeline": "ep4_sub(r, r, q[i]);"
    }
]