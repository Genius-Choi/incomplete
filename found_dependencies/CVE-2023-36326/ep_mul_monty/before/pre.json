[
    {
        "line": 3,
        "fullcodeline": "ep_t t[2];"
    },
    {
        "line": 6,
        "fullcodeline": "bn_null(n);"
    },
    {
        "line": 7,
        "fullcodeline": "bn_null(l);"
    },
    {
        "line": 8,
        "fullcodeline": "bn_null(_k);"
    },
    {
        "line": 9,
        "fullcodeline": "ep_null(t[0]);"
    },
    {
        "line": 10,
        "fullcodeline": "ep_null(t[1]);"
    },
    {
        "line": 12,
        "fullcodeline": "if (bn_is_zero(k) || ep_is_infty(p)) {"
    },
    {
        "line": 18,
        "fullcodeline": "bn_new(n);"
    },
    {
        "line": 19,
        "fullcodeline": "bn_new(l);"
    },
    {
        "line": 20,
        "fullcodeline": "bn_new(_k);"
    },
    {
        "line": 21,
        "fullcodeline": "ep_new(t[0]);"
    },
    {
        "line": 22,
        "fullcodeline": "ep_new(t[1]);"
    },
    {
        "line": 24,
        "fullcodeline": "ep_curve_get_ord(n);"
    },
    {
        "line": 25,
        "fullcodeline": "bits = bn_bits(n);"
    },
    {
        "line": 27,
        "fullcodeline": "bn_mod(_k, k, n);"
    },
    {
        "line": 28,
        "fullcodeline": "bn_abs(l, _k);"
    },
    {
        "line": 29,
        "fullcodeline": "bn_add(l, l, n);"
    },
    {
        "line": 30,
        "fullcodeline": "bn_add(n, l, n);"
    },
    {
        "line": 31,
        "fullcodeline": "dv_swap_cond(l->dp, n->dp, RLC_MAX(l->used, n->used),"
    },
    {
        "line": 33,
        "fullcodeline": "l->used = RLC_SEL(l->used, n->used, bn_get_bit(l, bits) == 0);"
    },
    {
        "line": 35,
        "fullcodeline": "ep_norm(t[0], p);"
    },
    {
        "line": 36,
        "fullcodeline": "ep_dbl(t[1], t[0]);"
    },
    {
        "line": 39,
        "fullcodeline": "ep_blind(t[0], t[0]);"
    },
    {
        "line": 40,
        "fullcodeline": "ep_blind(t[1], t[1]);"
    },
    {
        "line": 54,
        "fullcodeline": "ep_norm(r, t[0]);"
    },
    {
        "line": 55,
        "fullcodeline": "ep_neg(t[0], r);"
    },
    {
        "line": 56,
        "fullcodeline": "dv_copy_cond(r->y, t[0]->y, RLC_FP_DIGS, bn_sign(_k) == RLC_NEG);"
    },
    {
        "line": 58,
        "fullcodeline": "RLC_THROW(ERR_CAUGHT);"
    },
    {
        "line": 13,
        "fullcodeline": "ep_set_infty(r);"
    },
    {
        "line": 32,
        "fullcodeline": "bn_get_bit(l, bits) == 0);"
    },
    {
        "line": 42,
        "fullcodeline": "for (i = bits - 1; i >= 0; i--) {"
    },
    {
        "line": 43,
        "fullcodeline": "j = bn_get_bit(l, i);"
    },
    {
        "line": 44,
        "fullcodeline": "dv_swap_cond(t[0]->x, t[1]->x, RLC_FP_DIGS, j ^ 1);"
    },
    {
        "line": 45,
        "fullcodeline": "dv_swap_cond(t[0]->y, t[1]->y, RLC_FP_DIGS, j ^ 1);"
    },
    {
        "line": 46,
        "fullcodeline": "dv_swap_cond(t[0]->z, t[1]->z, RLC_FP_DIGS, j ^ 1);"
    },
    {
        "line": 47,
        "fullcodeline": "ep_add(t[0], t[0], t[1]);"
    },
    {
        "line": 48,
        "fullcodeline": "ep_dbl(t[1], t[1]);"
    },
    {
        "line": 49,
        "fullcodeline": "dv_swap_cond(t[0]->x, t[1]->x, RLC_FP_DIGS, j ^ 1);"
    },
    {
        "line": 50,
        "fullcodeline": "dv_swap_cond(t[0]->y, t[1]->y, RLC_FP_DIGS, j ^ 1);"
    },
    {
        "line": 51,
        "fullcodeline": "dv_swap_cond(t[0]->z, t[1]->z, RLC_FP_DIGS, j ^ 1);"
    }
]