[
    {
        "line": 2,
        "fullcodeline": "int code = RLC_ERR;"
    },
    {
        "line": 3,
        "fullcodeline": "bn_t a, b, c, v1[3], v2[3];"
    },
    {
        "line": 5,
        "fullcodeline": "uint8_t d[RLC_BN_BITS + 1];"
    },
    {
        "line": 6,
        "fullcodeline": "int8_t e[2 * (RLC_BN_BITS + 1)];"
    },
    {
        "line": 9,
        "fullcodeline": "bn_null(a);"
    },
    {
        "line": 10,
        "fullcodeline": "bn_null(b);"
    },
    {
        "line": 11,
        "fullcodeline": "bn_null(c);"
    },
    {
        "line": 304,
        "fullcodeline": "code = RLC_OK;"
    },
    {
        "line": 306,
        "fullcodeline": "bn_free(a);"
    },
    {
        "line": 307,
        "fullcodeline": "bn_free(b);"
    },
    {
        "line": 308,
        "fullcodeline": "bn_free(c);"
    },
    {
        "line": 12,
        "fullcodeline": "for (k = 0; k < 3; k++) {"
    },
    {
        "line": 18,
        "fullcodeline": "bn_new(a);"
    },
    {
        "line": 19,
        "fullcodeline": "bn_new(b);"
    },
    {
        "line": 20,
        "fullcodeline": "bn_new(c);"
    },
    {
        "line": 26,
        "fullcodeline": "TEST_CASE(\"window recoding is correct\") {"
    },
    {
        "line": 40,
        "fullcodeline": "TEST_CASE(\"sliding window recoding is correct\") {"
    },
    {
        "line": 58,
        "fullcodeline": "TEST_CASE(\"naf recoding is correct\") {"
    },
    {
        "line": 211,
        "fullcodeline": "TEST_CASE(\"regular recoding is correct\") {"
    },
    {
        "line": 233,
        "fullcodeline": "TEST_CASE(\"jsf recoding is correct\") {"
    },
    {
        "line": 302,
        "fullcodeline": "RLC_ERROR(end);"
    },
    {
        "line": 309,
        "fullcodeline": "for (k = 0; k < 3; k++) {"
    },
    {
        "line": 13,
        "fullcodeline": "bn_null(v1[k]);"
    },
    {
        "line": 14,
        "fullcodeline": "bn_null(v2[k]);"
    },
    {
        "line": 21,
        "fullcodeline": "for (k = 0; k < 3; k++) {"
    },
    {
        "line": 213,
        "fullcodeline": "bn_rand(a, RLC_POS, RLC_BN_BITS);"
    },
    {
        "line": 234,
        "fullcodeline": "bn_rand(a, RLC_POS, RLC_BN_BITS);"
    },
    {
        "line": 235,
        "fullcodeline": "bn_rand(b, RLC_POS, RLC_BN_BITS);"
    },
    {
        "line": 236,
        "fullcodeline": "l = 2 * (RLC_BN_BITS + 1);"
    },
    {
        "line": 237,
        "fullcodeline": "bn_rec_jsf(e, &l, a, b);"
    },
    {
        "line": 238,
        "fullcodeline": "w = RLC_MAX(bn_bits(a), bn_bits(b)) + 1;"
    },
    {
        "line": 239,
        "fullcodeline": "bn_add(a, a, b);"
    },
    {
        "line": 240,
        "fullcodeline": "bn_zero(b);"
    },
    {
        "line": 254,
        "fullcodeline": "TEST_ASSERT(bn_cmp(a, b) == RLC_EQ, end);"
    },
    {
        "line": 310,
        "fullcodeline": "bn_free(v1[k]);"
    },
    {
        "line": 311,
        "fullcodeline": "bn_free(v2[k]);"
    },
    {
        "line": 22,
        "fullcodeline": "bn_new(v1[k]);"
    },
    {
        "line": 23,
        "fullcodeline": "bn_new(v2[k]);"
    },
    {
        "line": 27,
        "fullcodeline": "for (w = 2; w <= 8; w++) {"
    },
    {
        "line": 41,
        "fullcodeline": "for (w = 2; w <= 8; w++) {"
    },
    {
        "line": 59,
        "fullcodeline": "for (w = 2; w <= 8; w++) {"
    },
    {
        "line": 214,
        "fullcodeline": "if (bn_is_even(a)) {"
    },
    {
        "line": 217,
        "fullcodeline": "for (w = 2; w <= 8; w++) {"
    },
    {
        "line": 241,
        "fullcodeline": "for (k = l - 1; k >= 0; k--) {"
    },
    {
        "line": 28,
        "fullcodeline": "bn_rand(a, RLC_POS, RLC_BN_BITS);"
    },
    {
        "line": 29,
        "fullcodeline": "l = RLC_BN_BITS + 1;"
    },
    {
        "line": 30,
        "fullcodeline": "bn_rec_win(d, &l, a, w);"
    },
    {
        "line": 31,
        "fullcodeline": "bn_zero(b);"
    },
    {
        "line": 36,
        "fullcodeline": "TEST_ASSERT(bn_cmp(a, b) == RLC_EQ, end);"
    },
    {
        "line": 42,
        "fullcodeline": "bn_rand(a, RLC_POS, RLC_BN_BITS);"
    },
    {
        "line": 43,
        "fullcodeline": "l = RLC_BN_BITS + 1;"
    },
    {
        "line": 44,
        "fullcodeline": "bn_rec_slw(d, &l, a, w);"
    },
    {
        "line": 45,
        "fullcodeline": "bn_zero(b);"
    },
    {
        "line": 54,
        "fullcodeline": "TEST_ASSERT(bn_cmp(a, b) == RLC_EQ, end);"
    },
    {
        "line": 60,
        "fullcodeline": "bn_rand(a, RLC_POS, RLC_BN_BITS);"
    },
    {
        "line": 61,
        "fullcodeline": "l = RLC_BN_BITS + 1;"
    },
    {
        "line": 62,
        "fullcodeline": "bn_rec_naf(e, &l, a, w);"
    },
    {
        "line": 63,
        "fullcodeline": "bn_zero(b);"
    },
    {
        "line": 72,
        "fullcodeline": "TEST_ASSERT(bn_cmp(a, b) == RLC_EQ, end);"
    },
    {
        "line": 215,
        "fullcodeline": "bn_add_dig(a, a, 1);"
    },
    {
        "line": 218,
        "fullcodeline": "l = RLC_BN_BITS + 1;"
    },
    {
        "line": 219,
        "fullcodeline": "bn_rec_reg(e, &l, a, RLC_BN_BITS, w);"
    },
    {
        "line": 220,
        "fullcodeline": "bn_zero(b);"
    },
    {
        "line": 229,
        "fullcodeline": "TEST_ASSERT(bn_cmp(a, b) == RLC_EQ, end);"
    },
    {
        "line": 242,
        "fullcodeline": "bn_dbl(b, b);"
    },
    {
        "line": 32,
        "fullcodeline": "for (k = l - 1; k >= 0; k--) {"
    },
    {
        "line": 46,
        "fullcodeline": "for (k = 0; k < l; k++) {"
    },
    {
        "line": 64,
        "fullcodeline": "for (k = l - 1; k >= 0; k--) {"
    },
    {
        "line": 221,
        "fullcodeline": "for (k = l - 1; k >= 0; k--) {"
    },
    {
        "line": 243,
        "fullcodeline": "if (e[k] >= 0) {"
    },
    {
        "line": 248,
        "fullcodeline": "if (e[k + w] >= 0) {"
    },
    {
        "line": 33,
        "fullcodeline": "bn_lsh(b, b, w);"
    },
    {
        "line": 34,
        "fullcodeline": "bn_add_dig(b, b, d[k]);"
    },
    {
        "line": 65,
        "fullcodeline": "bn_dbl(b, b);"
    },
    {
        "line": 222,
        "fullcodeline": "bn_lsh(b, b, w - 1);"
    },
    {
        "line": 244,
        "fullcodeline": "bn_add_dig(b, b, e[k]);"
    },
    {
        "line": 249,
        "fullcodeline": "bn_add_dig(b, b, e[k + w]);"
    },
    {
        "line": 47,
        "fullcodeline": "if (d[k] == 0) {"
    },
    {
        "line": 66,
        "fullcodeline": "if (e[k] >= 0) {"
    },
    {
        "line": 223,
        "fullcodeline": "if (e[k] > 0) {"
    },
    {
        "line": 246,
        "fullcodeline": "bn_sub_dig(b, b, -e[k]);"
    },
    {
        "line": 251,
        "fullcodeline": "bn_sub_dig(b, b, -e[k + w]);"
    },
    {
        "line": 48,
        "fullcodeline": "bn_dbl(b, b);"
    },
    {
        "line": 67,
        "fullcodeline": "bn_add_dig(b, b, e[k]);"
    },
    {
        "line": 224,
        "fullcodeline": "bn_add_dig(b, b, e[k]);"
    },
    {
        "line": 50,
        "fullcodeline": "bn_lsh(b, b, util_bits_dig(d[k]));"
    },
    {
        "line": 51,
        "fullcodeline": "bn_add_dig(b, b, d[k]);"
    },
    {
        "line": 69,
        "fullcodeline": "bn_sub_dig(b, b, -e[k]);"
    },
    {
        "line": 226,
        "fullcodeline": "bn_sub_dig(b, b, -e[k]);"
    }
]