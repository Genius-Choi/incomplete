[
    {
        "line": 5,
        "fullcodeline": "bn_copy(c, a);"
    },
    {
        "line": 7,
        "fullcodeline": "RLC_RIP(bits, digits, bits);"
    },
    {
        "line": 10,
        "fullcodeline": "bn_grow(c, c->used + digits + (bits > 0));"
    },
    {
        "line": 12,
        "fullcodeline": "c->used = a->used + digits;"
    },
    {
        "line": 13,
        "fullcodeline": "c->sign = a->sign;"
    },
    {
        "line": 29,
        "fullcodeline": "bn_trim(c);"
    },
    {
        "line": 31,
        "fullcodeline": "RLC_THROW(ERR_CAUGHT);"
    },
    {
        "line": 14,
        "fullcodeline": "if (digits > 0) {"
    },
    {
        "line": 18,
        "fullcodeline": "if (bits > 0) {"
    },
    {
        "line": 15,
        "fullcodeline": "dv_lshd(c->dp, a->dp, c->used, digits);"
    },
    {
        "line": 19,
        "fullcodeline": "if (c != a) {"
    },
    {
        "line": 24,
        "fullcodeline": "if (carry != 0) {"
    },
    {
        "line": 20,
        "fullcodeline": "carry = bn_lshb_low(c->dp + digits, a->dp, a->used, bits);"
    },
    {
        "line": 25,
        "fullcodeline": "c->dp[c->used] = carry;"
    },
    {
        "line": 26,
        "fullcodeline": "(c->used)++;"
    },
    {
        "line": 22,
        "fullcodeline": "carry = bn_lshb_low(c->dp + digits, c->dp + digits, c->used - digits, bits);"
    }
]