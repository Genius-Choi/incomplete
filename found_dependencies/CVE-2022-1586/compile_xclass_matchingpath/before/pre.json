[
    {
        "line": 4,
        "fullcodeline": "jump_list *found = NULL;"
    },
    {
        "line": 5,
        "fullcodeline": "jump_list **list = (cc[0] & XCL_NOT) == 0 ? &found : backtracks;"
    },
    {
        "line": 6,
        "fullcodeline": "sljit_uw c, charoffset, max = 256, min = READ_CHAR_MAX;"
    },
    {
        "line": 7,
        "fullcodeline": "struct sljit_jump *jump = NULL;"
    },
    {
        "line": 22,
        "fullcodeline": "cc++;"
    },
    {
        "line": 23,
        "fullcodeline": "ccbegin = cc;"
    },
    {
        "line": 24,
        "fullcodeline": "compares = 0;"
    },
    {
        "line": 141,
        "fullcodeline": "SLJIT_ASSERT(compares > 0);"
    },
    {
        "line": 144,
        "fullcodeline": "cc = ccbegin;"
    },
    {
        "line": 452,
        "fullcodeline": "charoffset = 0;"
    },
    {
        "line": 453,
        "fullcodeline": "numberofcmps = 0;"
    },
    {
        "line": 26,
        "fullcodeline": "if (cc[-1] & XCL_MAP)"
    },
    {
        "line": 32,
        "fullcodeline": "while (*cc != XCL_END)"
    },
    {
        "line": 145,
        "fullcodeline": "if ((cc[-1] & XCL_NOT) != 0)"
    },
    {
        "line": 156,
        "fullcodeline": "if ((cc[-1] & XCL_HASPROP) == 0)"
    },
    {
        "line": 458,
        "fullcodeline": "while (*cc != XCL_END)"
    },
    {
        "line": 732,
        "fullcodeline": "if (found != NULL)"
    },
    {
        "line": 28,
        "fullcodeline": "min = 0;"
    },
    {
        "line": 29,
        "fullcodeline": "cc += 32 / sizeof(PCRE2_UCHAR);"
    },
    {
        "line": 34,
        "fullcodeline": "compares++;"
    },
    {
        "line": 146,
        "fullcodeline": "read_char(common, min, max, backtracks, READ_CHAR_UPDATE_STR_PTR);"
    },
    {
        "line": 460,
        "fullcodeline": "compares--;"
    },
    {
        "line": 461,
        "fullcodeline": "invertcmp = (compares == 0 && list != backtracks);"
    },
    {
        "line": 462,
        "fullcodeline": "jump = NULL;"
    },
    {
        "line": 733,
        "fullcodeline": "set_jumps(found, LABEL());"
    },
    {
        "line": 35,
        "fullcodeline": "if (*cc == XCL_SINGLE)"
    },
    {
        "line": 152,
        "fullcodeline": "read_char(common, min, max, NULL, 0);"
    },
    {
        "line": 158,
        "fullcodeline": "if ((cc[-1] & XCL_MAP) != 0)"
    },
    {
        "line": 464,
        "fullcodeline": "if (*cc == XCL_SINGLE)"
    },
    {
        "line": 728,
        "fullcodeline": "if (jump != NULL)"
    },
    {
        "line": 37,
        "fullcodeline": "cc ++;"
    },
    {
        "line": 38,
        "fullcodeline": "GETCHARINCTEST(c, cc);"
    },
    {
        "line": 160,
        "fullcodeline": "jump = CMP(SLJIT_GREATER, TMP1, 0, SLJIT_IMM, 255);"
    },
    {
        "line": 171,
        "fullcodeline": "add_jump(compiler, backtracks, JUMP(SLJIT_JUMP));"
    },
    {
        "line": 172,
        "fullcodeline": "JUMPHERE(jump);"
    },
    {
        "line": 174,
        "fullcodeline": "cc += 32 / sizeof(PCRE2_UCHAR);"
    },
    {
        "line": 182,
        "fullcodeline": "else if ((cc[-1] & XCL_MAP) != 0)"
    },
    {
        "line": 466,
        "fullcodeline": "cc ++;"
    },
    {
        "line": 467,
        "fullcodeline": "GETCHARINCTEST(c, cc);"
    },
    {
        "line": 729,
        "fullcodeline": "add_jump(compiler, compares > 0 ? list : backtracks, jump);"
    },
    {
        "line": 39,
        "fullcodeline": "if (c > max) max = c;"
    },
    {
        "line": 40,
        "fullcodeline": "if (c < min) min = c;"
    },
    {
        "line": 161,
        "fullcodeline": "if (!optimize_class(common, (const sljit_u8 *)cc, (((const sljit_u8 *)cc)[31] & 0x80) != 0, TRUE, &found))"
    },
    {
        "line": 178,
        "fullcodeline": "OP2(SLJIT_SUB, TMP2, 0, TMP1, 0, SLJIT_IMM, min);"
    },
    {
        "line": 179,
        "fullcodeline": "add_jump(compiler, (cc[-1] & XCL_NOT) == 0 ? backtracks : &found, CMP(SLJIT_GREATER, TMP2, 0, SLJIT_IMM, max - min));"
    },
    {
        "line": 184,
        "fullcodeline": "OP1(SLJIT_MOV, RETURN_ADDR, 0, TMP1, 0);"
    },
    {
        "line": 209,
        "fullcodeline": "OP1(SLJIT_MOV, TMP1, 0, RETURN_ADDR, 0);"
    },
    {
        "line": 210,
        "fullcodeline": "cc += 32 / sizeof(PCRE2_UCHAR);"
    },
    {
        "line": 469,
        "fullcodeline": "if (numberofcmps < 3 && (*cc == XCL_SINGLE || *cc == XCL_RANGE))"
    },
    {
        "line": 45,
        "fullcodeline": "else if (*cc == XCL_RANGE)"
    },
    {
        "line": 163,
        "fullcodeline": "OP2(SLJIT_AND, TMP2, 0, TMP1, 0, SLJIT_IMM, 0x7);"
    },
    {
        "line": 164,
        "fullcodeline": "OP2(SLJIT_LSHR, TMP1, 0, TMP1, 0, SLJIT_IMM, 3);"
    },
    {
        "line": 165,
        "fullcodeline": "OP1(SLJIT_MOV_U8, TMP1, 0, SLJIT_MEM1(TMP1), (sljit_sw)cc);"
    },
    {
        "line": 166,
        "fullcodeline": "OP2(SLJIT_SHL, TMP2, 0, SLJIT_IMM, 1, TMP2, 0);"
    },
    {
        "line": 167,
        "fullcodeline": "OP2U(SLJIT_AND | SLJIT_SET_Z, TMP1, 0, TMP2, 0);"
    },
    {
        "line": 168,
        "fullcodeline": "add_jump(compiler, &found, JUMP(SLJIT_NOT_ZERO));"
    },
    {
        "line": 188,
        "fullcodeline": "if (!optimize_class(common, (const sljit_u8 *)cc, FALSE, TRUE, list))"
    },
    {
        "line": 471,
        "fullcodeline": "OP2U(SLJIT_SUB | SLJIT_SET_Z, TMP1, 0, SLJIT_IMM, (sljit_sw)(c - charoffset));"
    },
    {
        "line": 472,
        "fullcodeline": "OP_FLAGS(numberofcmps == 0 ? SLJIT_MOV : SLJIT_OR, TMP2, 0, SLJIT_EQUAL);"
    },
    {
        "line": 473,
        "fullcodeline": "numberofcmps++;"
    },
    {
        "line": 488,
        "fullcodeline": "else if (*cc == XCL_RANGE)"
    },
    {
        "line": 47,
        "fullcodeline": "cc ++;"
    },
    {
        "line": 48,
        "fullcodeline": "GETCHARINCTEST(c, cc);"
    },
    {
        "line": 50,
        "fullcodeline": "GETCHARINCTEST(c, cc);"
    },
    {
        "line": 194,
        "fullcodeline": "jump = CMP(SLJIT_GREATER, TMP1, 0, SLJIT_IMM, 255);"
    },
    {
        "line": 196,
        "fullcodeline": "OP2(SLJIT_AND, TMP2, 0, TMP1, 0, SLJIT_IMM, 0x7);"
    },
    {
        "line": 197,
        "fullcodeline": "OP2(SLJIT_LSHR, TMP1, 0, TMP1, 0, SLJIT_IMM, 3);"
    },
    {
        "line": 198,
        "fullcodeline": "OP1(SLJIT_MOV_U8, TMP1, 0, SLJIT_MEM1(TMP1), (sljit_sw)cc);"
    },
    {
        "line": 199,
        "fullcodeline": "OP2(SLJIT_SHL, TMP2, 0, SLJIT_IMM, 1, TMP2, 0);"
    },
    {
        "line": 200,
        "fullcodeline": "OP2U(SLJIT_AND | SLJIT_SET_Z, TMP1, 0, TMP2, 0);"
    },
    {
        "line": 201,
        "fullcodeline": "add_jump(compiler, list, JUMP(SLJIT_NOT_ZERO));"
    },
    {
        "line": 206,
        "fullcodeline": "JUMPHERE(jump);"
    },
    {
        "line": 490,
        "fullcodeline": "cc ++;"
    },
    {
        "line": 491,
        "fullcodeline": "GETCHARINCTEST(c, cc);"
    },
    {
        "line": 492,
        "fullcodeline": "SET_CHAR_OFFSET(c);"
    },
    {
        "line": 493,
        "fullcodeline": "GETCHARINCTEST(c, cc);"
    },
    {
        "line": 49,
        "fullcodeline": "if (c < min) min = c;"
    },
    {
        "line": 51,
        "fullcodeline": "if (c > max) max = c;"
    },
    {
        "line": 475,
        "fullcodeline": "else if (numberofcmps > 0)"
    },
    {
        "line": 495,
        "fullcodeline": "if (numberofcmps < 3 && (*cc == XCL_SINGLE || *cc == XCL_RANGE))"
    },
    {
        "line": 477,
        "fullcodeline": "OP2U(SLJIT_SUB | SLJIT_SET_Z, TMP1, 0, SLJIT_IMM, (sljit_sw)(c - charoffset));"
    },
    {
        "line": 478,
        "fullcodeline": "OP_FLAGS(SLJIT_OR | SLJIT_SET_Z, TMP2, 0, SLJIT_EQUAL);"
    },
    {
        "line": 479,
        "fullcodeline": "jump = JUMP(SLJIT_NOT_ZERO ^ invertcmp);"
    },
    {
        "line": 480,
        "fullcodeline": "numberofcmps = 0;"
    },
    {
        "line": 497,
        "fullcodeline": "OP2U(SLJIT_SUB | SLJIT_SET_LESS_EQUAL, TMP1, 0, SLJIT_IMM, (sljit_sw)(c - charoffset));"
    },
    {
        "line": 498,
        "fullcodeline": "OP_FLAGS(numberofcmps == 0 ? SLJIT_MOV : SLJIT_OR, TMP2, 0, SLJIT_LESS_EQUAL);"
    },
    {
        "line": 499,
        "fullcodeline": "numberofcmps++;"
    },
    {
        "line": 484,
        "fullcodeline": "jump = CMP(SLJIT_EQUAL ^ invertcmp, TMP1, 0, SLJIT_IMM, (sljit_sw)(c - charoffset));"
    },
    {
        "line": 485,
        "fullcodeline": "numberofcmps = 0;"
    },
    {
        "line": 501,
        "fullcodeline": "else if (numberofcmps > 0)"
    },
    {
        "line": 503,
        "fullcodeline": "OP2U(SLJIT_SUB | SLJIT_SET_LESS_EQUAL, TMP1, 0, SLJIT_IMM, (sljit_sw)(c - charoffset));"
    },
    {
        "line": 504,
        "fullcodeline": "OP_FLAGS(SLJIT_OR | SLJIT_SET_Z, TMP2, 0, SLJIT_LESS_EQUAL);"
    },
    {
        "line": 505,
        "fullcodeline": "jump = JUMP(SLJIT_NOT_ZERO ^ invertcmp);"
    },
    {
        "line": 506,
        "fullcodeline": "numberofcmps = 0;"
    },
    {
        "line": 510,
        "fullcodeline": "jump = CMP(SLJIT_LESS_EQUAL ^ invertcmp, TMP1, 0, SLJIT_IMM, (sljit_sw)(c - charoffset));"
    },
    {
        "line": 511,
        "fullcodeline": "numberofcmps = 0;"
    }
]