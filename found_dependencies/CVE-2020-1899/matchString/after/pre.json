[
    {
        "line": 2,
        "fullcodeline": "const char* p = m_buf;"
    },
    {
        "line": 3,
        "fullcodeline": "assertx(p <= m_end);"
    },
    {
        "line": 4,
        "fullcodeline": "int total = 0;"
    },
    {
        "line": 5,
        "fullcodeline": "if (*p == 'S' && type() == VariableUnserializer::Type::APCSerialize) {"
    },
    {
        "line": 35,
        "fullcodeline": "assertx(m_buf + total == p);"
    },
    {
        "line": 6,
        "fullcodeline": "total = 2 + 8 + 1;"
    },
    {
        "line": 8,
        "fullcodeline": "p++;"
    },
    {
        "line": 10,
        "fullcodeline": "auto const sd = *reinterpret_cast<StringData*const*>(p);"
    },
    {
        "line": 13,
        "fullcodeline": "p += size_t(8);"
    },
    {
        "line": 7,
        "fullcodeline": "if (p + total > m_end) return false;"
    },
    {
        "line": 11,
        "fullcodeline": "assertx(sd->isStatic());"
    },
    {
        "line": 15,
        "fullcodeline": "const auto ss = str.size();"
    },
    {
        "line": 17,
        "fullcodeline": "int digits = ss >= 10 ? 2 : 1;"
    },
    {
        "line": 18,
        "fullcodeline": "total = 2 + digits + 2 + ss + 2;"
    },
    {
        "line": 31,
        "fullcodeline": "p += ss;"
    },
    {
        "line": 34,
        "fullcodeline": "if (*p++ != ';') return false;"
    },
    {
        "line": 12,
        "fullcodeline": "if (str.compare(sd->slice()) != 0) return false;"
    },
    {
        "line": 16,
        "fullcodeline": "if (ss >= 100) return false;"
    },
    {
        "line": 30,
        "fullcodeline": "if (memcmp(p, str.data(), ss)) return false;"
    },
    {
        "line": 9,
        "fullcodeline": "if (*p++ != ':') return false;"
    },
    {
        "line": 20,
        "fullcodeline": "if (*p++ != 's') return false;"
    },
    {
        "line": 21,
        "fullcodeline": "if (*p++ != ':') return false;"
    },
    {
        "line": 28,
        "fullcodeline": "if (*p++ != ':') return false;"
    },
    {
        "line": 29,
        "fullcodeline": "if (*p++ != '\\\"') return false;"
    },
    {
        "line": 32,
        "fullcodeline": "if (*p++ != '\\\"') return false;"
    },
    {
        "line": 23,
        "fullcodeline": "if (*p++ != '0' + ss/10) return false;"
    },
    {
        "line": 24,
        "fullcodeline": "if (*p++ != '0' + ss%10) return false;"
    },
    {
        "line": 26,
        "fullcodeline": "if (*p++ != '0' + ss) return false;"
    }
]