[
    {
        "line": 2,
        "fullcodeline": "ut8 e_ident[EI_NIDENT];"
    },
    {
        "line": 3,
        "fullcodeline": "ut8 ehdr[sizeof (Elf_(Ehdr))] = {0};"
    },
    {
        "line": 9,
        "fullcodeline": "sdb_set (bin->kv, \"elf_type.cparse\", \"enum elf_type { ET_NONE=0, ET_REL=1,\""
    },
    {
        "line": 12,
        "fullcodeline": "sdb_set (bin->kv, \"elf_machine.cparse\", \"enum elf_machine {EM_NONE=0, EM_M32=1,\""
    },
    {
        "line": 49,
        "fullcodeline": "sdb_set (bin->kv, \"elf_class.cparse\", \"enum elf_class {ELFCLASSNONE=0, ELFCLASS32=1, ELFCLASS64=2};\", 0);"
    },
    {
        "line": 50,
        "fullcodeline": "sdb_set (bin->kv, \"elf_data.cparse\", \"enum elf_data {ELFDATANONE=0, ELFDATA2LSB=1, ELFDATA2MSB=2};\", 0);"
    },
    {
        "line": 51,
        "fullcodeline": "sdb_set (bin->kv, \"elf_hdr_version.cparse\", \"enum elf_hdr_version {EV_NONE=0, EV_CURRENT=1};\", 0);"
    },
    {
        "line": 52,
        "fullcodeline": "sdb_set (bin->kv, \"elf_obj_version.cparse\", \"enum elf_obj_version {EV_NONE=0, EV_CURRENT=1};\", 0);"
    },
    {
        "line": 53,
        "fullcodeline": "sdb_num_set (bin->kv, \"elf_header.offset\", 0, 0);"
    },
    {
        "line": 54,
        "fullcodeline": "sdb_num_set (bin->kv, \"elf_header.size\", sizeof (Elf_(Ehdr)), 0);"
    },
    {
        "line": 55,
        "fullcodeline": "sdb_set (bin->kv, \"elf_ident.format\", \"[4]z[1]E[1]E[1]E.::\""
    },
    {
        "line": 62,
        "fullcodeline": "sdb_set (bin->kv, \"elf_header.format\", \"?[2]E[2]E[4]ExxxxN2N2N2N2N2N2\""
    },
    {
        "line": 66,
        "fullcodeline": "bin->endian = (e_ident[EI_DATA] == ELFDATA2MSB)? 1: 0;"
    },
    {
        "line": 68,
        "fullcodeline": "len = r_buf_read_at (bin->b, 0, ehdr, sizeof (ehdr));"
    },
    {
        "line": 74,
        "fullcodeline": "memcpy (&bin->ehdr.e_ident, ehdr, 16);"
    },
    {
        "line": 78,
        "fullcodeline": "i = 16;"
    },
    {
        "line": 5,
        "fullcodeline": "if (r_buf_read_at (bin->b, 0, e_ident, EI_NIDENT) == -1) {"
    },
    {
        "line": 80,
        "fullcodeline": "bin->ehdr.e_type = READ16 (ehdr, i);"
    },
    {
        "line": 81,
        "fullcodeline": "bin->ehdr.e_machine = READ16 (ehdr, i);"
    },
    {
        "line": 82,
        "fullcodeline": "bin->ehdr.e_version = READ32 (ehdr, i);"
    },
    {
        "line": 88,
        "fullcodeline": "bin->ehdr.e_entry = READ32 (ehdr, i);"
    },
    {
        "line": 89,
        "fullcodeline": "bin->ehdr.e_phoff = READ32 (ehdr, i);"
    },
    {
        "line": 90,
        "fullcodeline": "bin->ehdr.e_shoff = READ32 (ehdr, i);"
    },
    {
        "line": 92,
        "fullcodeline": "bin->ehdr.e_flags = READ32 (ehdr, i);"
    },
    {
        "line": 93,
        "fullcodeline": "bin->ehdr.e_ehsize = READ16 (ehdr, i);"
    },
    {
        "line": 94,
        "fullcodeline": "bin->ehdr.e_phentsize = READ16 (ehdr, i);"
    },
    {
        "line": 95,
        "fullcodeline": "bin->ehdr.e_phnum = READ16 (ehdr, i);"
    },
    {
        "line": 96,
        "fullcodeline": "bin->ehdr.e_shentsize = READ16 (ehdr, i);"
    },
    {
        "line": 97,
        "fullcodeline": "bin->ehdr.e_shnum = READ16 (ehdr, i);"
    },
    {
        "line": 98,
        "fullcodeline": "bin->ehdr.e_shstrndx = READ16 (ehdr, i);"
    },
    {
        "line": 6,
        "fullcodeline": "R_LOG_ERROR (\"read (magic)\");"
    },
    {
        "line": 75,
        "fullcodeline": "if (!__is_valid_ident (bin)) {"
    }
]