[
    {
        "line": 2,
        "fullcodeline": "struct msp430_cmd cmd = {0};"
    },
    {
        "line": 3,
        "fullcodeline": "op->size = -1;"
    },
    {
        "line": 4,
        "fullcodeline": "op->nopcode = 1;"
    },
    {
        "line": 5,
        "fullcodeline": "op->type = R_ANAL_OP_TYPE_UNK;"
    },
    {
        "line": 6,
        "fullcodeline": "op->family = R_ANAL_OP_FAMILY_CPU;"
    },
    {
        "line": 8,
        "fullcodeline": "int ret = op->size = msp430_decode_command (buf, len, &cmd);"
    },
    {
        "line": 32,
        "fullcodeline": "op->addr = addr;"
    },
    {
        "line": 9,
        "fullcodeline": "if (mask & R_ANAL_OP_MASK_DISASM) {"
    },
    {
        "line": 28,
        "fullcodeline": "if (ret < 0) {"
    },
    {
        "line": 84,
        "fullcodeline": "op->jump = addr + cmd.jmp_addr;"
    },
    {
        "line": 85,
        "fullcodeline": "op->fail = addr + 2;"
    },
    {
        "line": 88,
        "fullcodeline": "op->type = R_ANAL_OP_TYPE_ILL;"
    },
    {
        "line": 91,
        "fullcodeline": "op->type = R_ANAL_OP_TYPE_UNK;"
    },
    {
        "line": 10,
        "fullcodeline": "if (ret < 1) {"
    },
    {
        "line": 20,
        "fullcodeline": "char *ba = op->mnemonic;"
    },
    {
        "line": 21,
        "fullcodeline": "r_str_replace_ch (ba, '#', 0, 1);"
    },
    {
        "line": 23,
        "fullcodeline": "r_str_replace_ch (ba, '&', 0, 1);"
    },
    {
        "line": 24,
        "fullcodeline": "r_str_replace_ch (ba, '%', 0, 1);"
    },
    {
        "line": 79,
        "fullcodeline": "if (cmd.jmp_cond == MSP430_JMP) {"
    },
    {
        "line": 11,
        "fullcodeline": "op->mnemonic = strdup (\"invalid\");"
    },
    {
        "line": 39,
        "fullcodeline": "op->type = R_ANAL_OP_TYPE_ROR;"
    },
    {
        "line": 42,
        "fullcodeline": "op->type = R_ANAL_OP_TYPE_PUSH;"
    },
    {
        "line": 45,
        "fullcodeline": "op->type = R_ANAL_OP_TYPE_CALL;"
    },
    {
        "line": 46,
        "fullcodeline": "op->fail = addr + op->size;"
    },
    {
        "line": 52,
        "fullcodeline": "op->type = R_ANAL_OP_TYPE_RET;"
    },
    {
        "line": 62,
        "fullcodeline": "op->type = R_ANAL_OP_TYPE_MOV;"
    },
    {
        "line": 70,
        "fullcodeline": "case MSP430_ADD: op->type = R_ANAL_OP_TYPE_ADD; break;"
    },
    {
        "line": 72,
        "fullcodeline": "case MSP430_SUB: op->type = R_ANAL_OP_TYPE_SUB; break;"
    },
    {
        "line": 73,
        "fullcodeline": "case MSP430_CMP: op->type = R_ANAL_OP_TYPE_CMP; break;"
    },
    {
        "line": 74,
        "fullcodeline": "case MSP430_XOR: op->type = R_ANAL_OP_TYPE_XOR; break;"
    },
    {
        "line": 75,
        "fullcodeline": "case MSP430_AND: op->type = R_ANAL_OP_TYPE_AND; break;"
    },
    {
        "line": 80,
        "fullcodeline": "op->type = R_ANAL_OP_TYPE_JMP;"
    },
    {
        "line": 47,
        "fullcodeline": "if (len > 4) {"
    },
    {
        "line": 63,
        "fullcodeline": "if ((cmd.instr)[0] == 'b' && (cmd.instr)[1] == 'r') {"
    },
    {
        "line": 82,
        "fullcodeline": "op->type = R_ANAL_OP_TYPE_CJMP;"
    },
    {
        "line": 12,
        "fullcodeline": "} else if (ret > 0) {"
    },
    {
        "line": 48,
        "fullcodeline": "op->jump = r_read_at_le16 (buf, 2);"
    },
    {
        "line": 65,
        "fullcodeline": "op->type = R_ANAL_OP_TYPE_UJMP;"
    },
    {
        "line": 14,
        "fullcodeline": "op->mnemonic = r_str_newf (\"%s %s\",cmd.instr, cmd.operands);"
    },
    {
        "line": 16,
        "fullcodeline": "op->mnemonic = strdup (cmd.instr);"
    }
]