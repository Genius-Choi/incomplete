[
    {
        "line": 11,
        "fullcodeline": "cfg = gf_odf_av1_cfg_new();"
    },
    {
        "line": 12,
        "fullcodeline": "gf_av1_init_state(&state);"
    },
    {
        "line": 13,
        "fullcodeline": "state.config = cfg;"
    },
    {
        "line": 15,
        "fullcodeline": "cfg->marker = gf_bs_read_int(bs, 1);"
    },
    {
        "line": 16,
        "fullcodeline": "cfg->version = gf_bs_read_int(bs, 7);"
    },
    {
        "line": 17,
        "fullcodeline": "cfg->seq_profile = gf_bs_read_int(bs, 3);"
    },
    {
        "line": 18,
        "fullcodeline": "cfg->seq_level_idx_0 = gf_bs_read_int(bs, 5);"
    },
    {
        "line": 19,
        "fullcodeline": "cfg->seq_tier_0 = gf_bs_read_int(bs, 1);"
    },
    {
        "line": 20,
        "fullcodeline": "cfg->high_bitdepth = gf_bs_read_int(bs, 1);"
    },
    {
        "line": 21,
        "fullcodeline": "cfg->twelve_bit = gf_bs_read_int(bs, 1);"
    },
    {
        "line": 22,
        "fullcodeline": "cfg->monochrome = gf_bs_read_int(bs, 1);"
    },
    {
        "line": 23,
        "fullcodeline": "cfg->chroma_subsampling_x = gf_bs_read_int(bs, 1);"
    },
    {
        "line": 24,
        "fullcodeline": "cfg->chroma_subsampling_y = gf_bs_read_int(bs, 1);"
    },
    {
        "line": 25,
        "fullcodeline": "cfg->chroma_sample_position = gf_bs_read_int(bs, 2);"
    },
    {
        "line": 27,
        "fullcodeline": "reserved = gf_bs_read_int(bs, 3);"
    },
    {
        "line": 33,
        "fullcodeline": "cfg->initial_presentation_delay_present = gf_bs_read_int(bs, 1);"
    },
    {
        "line": 40,
        "fullcodeline": "size -= 4;"
    },
    {
        "line": 78,
        "fullcodeline": "gf_av1_reset_state(& state, GF_TRUE);"
    },
    {
        "line": 8,
        "fullcodeline": "if (!size) size = (u32) gf_bs_available(bs);"
    },
    {
        "line": 9,
        "fullcodeline": "if (!size) return NULL;"
    },
    {
        "line": 28,
        "fullcodeline": "if (reserved != 0 || cfg->marker != 1 || cfg->version != 1) {"
    },
    {
        "line": 29,
        "fullcodeline": "GF_LOG(GF_LOG_DEBUG, GF_LOG_CONTAINER, (\"[AV1] wrong avcC reserved %d / marker %d / version %d expecting 0 1 1\\n\", reserved, cfg->marker, cfg->version));"
    },
    {
        "line": 30,
        "fullcodeline": "gf_odf_av1_cfg_del(cfg);"
    },
    {
        "line": 35,
        "fullcodeline": "cfg->initial_presentation_delay_minus_one = gf_bs_read_int(bs, 4);"
    },
    {
        "line": 47,
        "fullcodeline": "pos = gf_bs_get_position(bs);"
    },
    {
        "line": 48,
        "fullcodeline": "obu_size = 0;"
    },
    {
        "line": 53,
        "fullcodeline": "assert(obu_size == gf_bs_get_position(bs) - pos);"
    },
    {
        "line": 59,
        "fullcodeline": "GF_SAFEALLOC(a, GF_AV1_OBUArrayEntry);"
    },
    {
        "line": 61,
        "fullcodeline": "a->obu = gf_malloc((size_t)obu_size);"
    },
    {
        "line": 66,
        "fullcodeline": "gf_bs_seek(bs, pos);"
    },
    {
        "line": 67,
        "fullcodeline": "gf_bs_read_data(bs, (char *) a->obu, (u32)obu_size);"
    },
    {
        "line": 68,
        "fullcodeline": "a->obu_length = obu_size;"
    },
    {
        "line": 69,
        "fullcodeline": "a->obu_type = obu_type;"
    },
    {
        "line": 70,
        "fullcodeline": "gf_list_add(cfg->obu_array, a);"
    },
    {
        "line": 76,
        "fullcodeline": "size -= (u32) obu_size;"
    },
    {
        "line": 37,
        "fullcodeline": "/*reserved = */gf_bs_read_int(bs, 4);"
    },
    {
        "line": 38,
        "fullcodeline": "cfg->initial_presentation_delay_minus_one = 0;"
    },
    {
        "line": 49,
        "fullcodeline": "if (gf_av1_parse_obu(bs, &obu_type, &obu_size, NULL, &state) != GF_OK) {"
    },
    {
        "line": 56,
        "fullcodeline": "if (!av1_is_obu_header(obu_type)) {"
    },
    {
        "line": 60,
        "fullcodeline": "if (!a) break;"
    },
    {
        "line": 62,
        "fullcodeline": "if (!a->obu) {"
    },
    {
        "line": 72,
        "fullcodeline": "if (size<obu_size) {"
    },
    {
        "line": 63,
        "fullcodeline": "gf_free(a);"
    },
    {
        "line": 73,
        "fullcodeline": "GF_LOG(GF_LOG_WARNING, GF_LOG_CONTAINER, (\"[AV1] AV1 config misses %d bytes to fit the entire OBU\\n\", obu_size - size));"
    }
]