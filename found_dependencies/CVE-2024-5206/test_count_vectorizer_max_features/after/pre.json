[
    {
        "line": 4,
        "fullcodeline": "cv_1 = CountVectorizer(max_features=1)"
    },
    {
        "line": 5,
        "fullcodeline": "cv_3 = CountVectorizer(max_features=3)"
    },
    {
        "line": 6,
        "fullcodeline": "cv_None = CountVectorizer(max_features=None)"
    },
    {
        "line": 8,
        "fullcodeline": "counts_1 = cv_1.fit_transform(JUNK_FOOD_DOCS).sum(axis=0)"
    },
    {
        "line": 9,
        "fullcodeline": "counts_3 = cv_3.fit_transform(JUNK_FOOD_DOCS).sum(axis=0)"
    },
    {
        "line": 10,
        "fullcodeline": "counts_None = cv_None.fit_transform(JUNK_FOOD_DOCS).sum(axis=0)"
    },
    {
        "line": 12,
        "fullcodeline": "features_1 = cv_1.get_feature_names_out()"
    },
    {
        "line": 13,
        "fullcodeline": "features_3 = cv_3.get_feature_names_out()"
    },
    {
        "line": 14,
        "fullcodeline": "features_None = cv_None.get_feature_names_out()"
    },
    {
        "line": 17,
        "fullcodeline": "assert 7 == counts_1.max()"
    },
    {
        "line": 18,
        "fullcodeline": "assert 7 == counts_3.max()"
    },
    {
        "line": 19,
        "fullcodeline": "assert 7 == counts_None.max()"
    },
    {
        "line": 22,
        "fullcodeline": "assert \"the\" == features_1[np.argmax(counts_1)]"
    },
    {
        "line": 23,
        "fullcodeline": "assert \"the\" == features_3[np.argmax(counts_3)]"
    },
    {
        "line": 24,
        "fullcodeline": "assert \"the\" == features_None[np.argmax(counts_None)]"
    }
]