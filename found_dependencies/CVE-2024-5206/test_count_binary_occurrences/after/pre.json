[
    {
        "line": 3,
        "fullcodeline": "test_data = [\"aaabc\", \"abbde\"]"
    },
    {
        "line": 4,
        "fullcodeline": "vect = CountVectorizer(analyzer=\"char\", max_df=1.0)"
    },
    {
        "line": 5,
        "fullcodeline": "X = vect.fit_transform(test_data).toarray()"
    },
    {
        "line": 6,
        "fullcodeline": "assert_array_equal([\"a\", \"b\", \"c\", \"d\", \"e\"], vect.get_feature_names_out())"
    },
    {
        "line": 7,
        "fullcodeline": "assert_array_equal([[3, 1, 1, 0, 0], [1, 2, 0, 1, 1]], X)"
    },
    {
        "line": 11,
        "fullcodeline": "vect = CountVectorizer(analyzer=\"char\", max_df=1.0, binary=True)"
    },
    {
        "line": 12,
        "fullcodeline": "X = vect.fit_transform(test_data).toarray()"
    },
    {
        "line": 13,
        "fullcodeline": "assert_array_equal([[1, 1, 1, 0, 0], [1, 1, 0, 1, 1]], X)"
    },
    {
        "line": 16,
        "fullcodeline": "vect = CountVectorizer(analyzer=\"char\", max_df=1.0, binary=True, dtype=np.float32)"
    },
    {
        "line": 17,
        "fullcodeline": "X_sparse = vect.fit_transform(test_data)"
    },
    {
        "line": 18,
        "fullcodeline": "assert X_sparse.dtype == np.float32"
    }
]