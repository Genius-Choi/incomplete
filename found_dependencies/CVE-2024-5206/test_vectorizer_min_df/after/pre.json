[
    {
        "line": 2,
        "fullcodeline": "test_data = [\"abc\", \"dea\", \"eat\"]"
    },
    {
        "line": 3,
        "fullcodeline": "vect = CountVectorizer(analyzer=\"char\", min_df=1)"
    },
    {
        "line": 4,
        "fullcodeline": "vect.fit(test_data)"
    },
    {
        "line": 5,
        "fullcodeline": "assert \"a\" in vect.vocabulary_.keys()"
    },
    {
        "line": 6,
        "fullcodeline": "assert len(vect.vocabulary_.keys()) == 6"
    },
    {
        "line": 8,
        "fullcodeline": "vect.min_df = 2"
    },
    {
        "line": 9,
        "fullcodeline": "vect.fit(test_data)"
    },
    {
        "line": 10,
        "fullcodeline": "assert \"c\" not in vect.vocabulary_.keys()  # {bcdt} ignored"
    },
    {
        "line": 11,
        "fullcodeline": "assert len(vect.vocabulary_.keys()) == 2  # {ae} remain"
    },
    {
        "line": 13,
        "fullcodeline": "vect.min_df = 0.8  # 0.8 * 3 documents -> min_doc_count == 2.4"
    },
    {
        "line": 14,
        "fullcodeline": "vect.fit(test_data)"
    },
    {
        "line": 15,
        "fullcodeline": "assert \"c\" not in vect.vocabulary_.keys()  # {bcdet} ignored"
    },
    {
        "line": 16,
        "fullcodeline": "assert len(vect.vocabulary_.keys()) == 1  # {a} remains"
    }
]