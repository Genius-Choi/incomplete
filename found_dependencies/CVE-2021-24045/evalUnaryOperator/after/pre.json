[
    {
        "line": 8,
        "fullcodeline": "switch (operand->getKind()) {"
    },
    {
        "line": 48,
        "fullcodeline": "if (evalIsTrue(builder, operand)) {"
    },
    {
        "line": 51,
        "fullcodeline": "if (evalIsFalse(builder, operand)) {"
    },
    {
        "line": 57,
        "fullcodeline": "return builder.getLiteralUndefined();"
    },
    {
        "line": 16,
        "fullcodeline": "return builder.getLiteralNaN();"
    },
    {
        "line": 18,
        "fullcodeline": "if (evalIsTrue(builder, operand)) {"
    },
    {
        "line": 24,
        "fullcodeline": "return builder.getLiteralNegativeZero();"
    },
    {
        "line": 33,
        "fullcodeline": "return builder.getLiteralString(\"object\");"
    },
    {
        "line": 35,
        "fullcodeline": "return builder.getLiteralString(\"undefined\");"
    },
    {
        "line": 37,
        "fullcodeline": "return builder.getLiteralString(\"boolean\");"
    },
    {
        "line": 39,
        "fullcodeline": "return builder.getLiteralString(\"number\");"
    },
    {
        "line": 41,
        "fullcodeline": "return builder.getLiteralString(\"string\");"
    },
    {
        "line": 49,
        "fullcodeline": "return builder.getLiteralBool(false);"
    },
    {
        "line": 52,
        "fullcodeline": "return builder.getLiteralBool(true);"
    },
    {
        "line": 10,
        "fullcodeline": "if (auto *literalNum = llvh::dyn_cast<LiteralNumber>(operand)) {"
    },
    {
        "line": 11,
        "fullcodeline": "auto V = -literalNum->getValue();"
    },
    {
        "line": 12,
        "fullcodeline": "return builder.getLiteralNumber(V);"
    },
    {
        "line": 19,
        "fullcodeline": "return builder.getLiteralNumber(-1);"
    },
    {
        "line": 21,
        "fullcodeline": "return builder.getLiteralNegativeZero();"
    }
]