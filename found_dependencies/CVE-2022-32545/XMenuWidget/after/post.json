[
    {
        "line": 42,
        "fullcodeline": "assert(display != (Display *) NULL);"
    },
    {
        "line": 43,
        "fullcodeline": "assert(windows != (XWindows *) NULL);"
    },
    {
        "line": 44,
        "fullcodeline": "assert(title != (char *) NULL);"
    },
    {
        "line": 45,
        "fullcodeline": "assert(selections != (const char **) NULL);"
    },
    {
        "line": 46,
        "fullcodeline": "assert(item != (char *) NULL);"
    },
    {
        "line": 47,
        "fullcodeline": "(void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",title);"
    },
    {
        "line": 49,
        "fullcodeline": "windows->widget.width=submenu_info.active == 0 ?"
    },
    {
        "line": 57,
        "fullcodeline": "number_selections=(unsigned int) id;"
    },
    {
        "line": 58,
        "fullcodeline": "XGetWidgetInfo((char *) NULL,&menu_info);"
    },
    {
        "line": 59,
        "fullcodeline": "title_height=(unsigned int) (submenu_info.active == 0 ?"
    },
    {
        "line": 61,
        "fullcodeline": "width=WidgetTextWidth(font_info,(char *) title);"
    },
    {
        "line": 62,
        "fullcodeline": "height=(unsigned int) ((3*(font_info->ascent+font_info->descent)) >> 1);"
    },
    {
        "line": 66,
        "fullcodeline": "windows->widget.width+=QuantumMargin+(menu_info.bevel_width << 1);"
    },
    {
        "line": 67,
        "fullcodeline": "top_offset=title_height+menu_info.bevel_width-1;"
    },
    {
        "line": 68,
        "fullcodeline": "windows->widget.height=top_offset+number_selections*height+4;"
    },
    {
        "line": 69,
        "fullcodeline": "windows->widget.min_width=windows->widget.width;"
    },
    {
        "line": 70,
        "fullcodeline": "windows->widget.min_height=windows->widget.height;"
    },
    {
        "line": 71,
        "fullcodeline": "XQueryPosition(display,windows->widget.root,&x,&y);"
    },
    {
        "line": 72,
        "fullcodeline": "windows->widget.x=x-(QuantumMargin >> 1);"
    },
    {
        "line": 80,
        "fullcodeline": "windows->widget.y=submenu_info.active == 0 ? y-(int)"
    },
    {
        "line": 84,
        "fullcodeline": "XConstrainWindowPosition(display,&windows->widget);"
    },
    {
        "line": 88,
        "fullcodeline": "window_attributes.override_redirect=MagickTrue;"
    },
    {
        "line": 89,
        "fullcodeline": "(void) XChangeWindowAttributes(display,windows->widget.id,"
    },
    {
        "line": 91,
        "fullcodeline": "window_changes.width=(int) windows->widget.width;"
    },
    {
        "line": 92,
        "fullcodeline": "window_changes.height=(int) windows->widget.height;"
    },
    {
        "line": 93,
        "fullcodeline": "window_changes.x=windows->widget.x;"
    },
    {
        "line": 94,
        "fullcodeline": "window_changes.y=windows->widget.y;"
    },
    {
        "line": 95,
        "fullcodeline": "(void) XReconfigureWMWindow(display,windows->widget.id,windows->widget.screen,"
    },
    {
        "line": 97,
        "fullcodeline": "(void) XMapRaised(display,windows->widget.id);"
    },
    {
        "line": 98,
        "fullcodeline": "windows->widget.mapped=MagickFalse;"
    },
    {
        "line": 102,
        "fullcodeline": "selection_info.height=height;"
    },
    {
        "line": 103,
        "fullcodeline": "cursor=XCreateFontCursor(display,XC_right_ptr);"
    },
    {
        "line": 104,
        "fullcodeline": "(void) XCheckDefineCursor(display,windows->image.id,cursor);"
    },
    {
        "line": 105,
        "fullcodeline": "(void) XCheckDefineCursor(display,windows->command.id,cursor);"
    },
    {
        "line": 106,
        "fullcodeline": "(void) XCheckDefineCursor(display,windows->widget.id,cursor);"
    },
    {
        "line": 107,
        "fullcodeline": "state=UpdateConfigurationState;"
    },
    {
        "line": 387,
        "fullcodeline": "(void) XFreeCursor(display,cursor);"
    },
    {
        "line": 388,
        "fullcodeline": "window_attributes.override_redirect=MagickFalse;"
    },
    {
        "line": 389,
        "fullcodeline": "(void) XChangeWindowAttributes(display,windows->widget.id,"
    },
    {
        "line": 391,
        "fullcodeline": "(void) XWithdrawWindow(display,windows->widget.id,windows->widget.screen);"
    },
    {
        "line": 392,
        "fullcodeline": "XCheckRefreshWindows(display,windows);"
    },
    {
        "line": 401,
        "fullcodeline": "(void) CopyMagickString(item,selections[selection_info.id],MaxTextExtent);"
    },
    {
        "line": 51,
        "fullcodeline": "for (id=0; selections[id] != (char *) NULL; id++)"
    },
    {
        "line": 73,
        "fullcodeline": "if (submenu_info.active != 0)"
    },
    {
        "line": 82,
        "fullcodeline": "if (submenu_info.active != 0)"
    },
    {
        "line": 386,
        "fullcodeline": "} while ((state & ExitState) == 0);"
    },
    {
        "line": 393,
        "fullcodeline": "if (submenu_info.active != 0)"
    },
    {
        "line": 399,
        "fullcodeline": "if ((selection_info.id < 0) || (selection_info.id >= (int) number_selections))"
    },
    {
        "line": 50,
        "fullcodeline": "WidgetTextWidth(font_info,(char *) title) : 0;"
    },
    {
        "line": 53,
        "fullcodeline": "width=WidgetTextWidth(font_info,(char *) selections[id]);"
    },
    {
        "line": 75,
        "fullcodeline": "windows->widget.x="
    },
    {
        "line": 77,
        "fullcodeline": "toggle_info.raised=MagickTrue;"
    },
    {
        "line": 78,
        "fullcodeline": "XDrawTriangleEast(display,&windows->command,&toggle_info);"
    },
    {
        "line": 90,
        "fullcodeline": "(size_t) CWOverrideRedirect,&window_attributes);"
    },
    {
        "line": 96,
        "fullcodeline": "(unsigned int) (CWWidth | CWHeight | CWX | CWY),&window_changes);"
    },
    {
        "line": 193,
        "fullcodeline": "(void) XIfEvent(display,&event,XScreenEvent,(char *) windows);"
    },
    {
        "line": 390,
        "fullcodeline": "(size_t) CWOverrideRedirect,&window_attributes);"
    },
    {
        "line": 395,
        "fullcodeline": "submenu_info.active=MagickFalse;"
    },
    {
        "line": 396,
        "fullcodeline": "toggle_info.raised=MagickFalse;"
    },
    {
        "line": 397,
        "fullcodeline": "XDrawTriangleEast(display,&windows->command,&toggle_info);"
    },
    {
        "line": 54,
        "fullcodeline": "if (width > windows->widget.width)"
    },
    {
        "line": 60,
        "fullcodeline": "(3*(font_info->descent+font_info->ascent) >> 1)+5 : 2);"
    },
    {
        "line": 76,
        "fullcodeline": "windows->command.x+windows->command.width-QuantumMargin;"
    },
    {
        "line": 110,
        "fullcodeline": "if (state & UpdateConfigurationState)"
    },
    {
        "line": 133,
        "fullcodeline": "if (state & RedrawWidgetState)"
    },
    {
        "line": 174,
        "fullcodeline": "if (number_selections > 2)"
    },
    {
        "line": 400,
        "fullcodeline": "return(~0);"
    },
    {
        "line": 55,
        "fullcodeline": "windows->widget.width=width;"
    },
    {
        "line": 81,
        "fullcodeline": "((3*title_height) >> 2) : y;"
    },
    {
        "line": 115,
        "fullcodeline": "XGetWidgetInfo((char *) NULL,&menu_info);"
    },
    {
        "line": 116,
        "fullcodeline": "menu_info.bevel_width--;"
    },
    {
        "line": 117,
        "fullcodeline": "menu_info.width=windows->widget.width-((menu_info.bevel_width) << 1);"
    },
    {
        "line": 118,
        "fullcodeline": "menu_info.height=windows->widget.height-((menu_info.bevel_width) << 1);"
    },
    {
        "line": 119,
        "fullcodeline": "menu_info.x=(int) menu_info.bevel_width;"
    },
    {
        "line": 120,
        "fullcodeline": "menu_info.y=(int) menu_info.bevel_width;"
    },
    {
        "line": 121,
        "fullcodeline": "XGetWidgetInfo((char *) NULL,&selection_info);"
    },
    {
        "line": 122,
        "fullcodeline": "selection_info.center=MagickFalse;"
    },
    {
        "line": 123,
        "fullcodeline": "selection_info.width=menu_info.width;"
    },
    {
        "line": 124,
        "fullcodeline": "selection_info.height=height;"
    },
    {
        "line": 125,
        "fullcodeline": "selection_info.x=menu_info.x;"
    },
    {
        "line": 126,
        "fullcodeline": "highlight_info=selection_info;"
    },
    {
        "line": 127,
        "fullcodeline": "highlight_info.bevel_width--;"
    },
    {
        "line": 128,
        "fullcodeline": "highlight_info.width-=(highlight_info.bevel_width << 1);"
    },
    {
        "line": 129,
        "fullcodeline": "highlight_info.height-=(highlight_info.bevel_width << 1);"
    },
    {
        "line": 130,
        "fullcodeline": "highlight_info.x+=highlight_info.bevel_width;"
    },
    {
        "line": 131,
        "fullcodeline": "state&=(~UpdateConfigurationState);"
    },
    {
        "line": 155,
        "fullcodeline": "selection_info.center=MagickTrue;"
    },
    {
        "line": 156,
        "fullcodeline": "selection_info.y=(int) menu_info.bevel_width;"
    },
    {
        "line": 157,
        "fullcodeline": "selection_info.text=(char *) title;"
    },
    {
        "line": 160,
        "fullcodeline": "selection_info.center=MagickFalse;"
    },
    {
        "line": 161,
        "fullcodeline": "selection_info.y=(int) top_offset;"
    },
    {
        "line": 171,
        "fullcodeline": "XDrawBevel(display,&windows->widget,&menu_info);"
    },
    {
        "line": 172,
        "fullcodeline": "state&=(~RedrawWidgetState);"
    },
    {
        "line": 179,
        "fullcodeline": "y=(int) (top_offset+selection_info.height*(number_selections-1));"
    },
    {
        "line": 180,
        "fullcodeline": "XSetBevelColor(display,&windows->widget,MagickFalse);"
    },
    {
        "line": 181,
        "fullcodeline": "(void) XDrawLine(display,windows->widget.id,"
    },
    {
        "line": 184,
        "fullcodeline": "XSetBevelColor(display,&windows->widget,MagickTrue);"
    },
    {
        "line": 185,
        "fullcodeline": "(void) XDrawLine(display,windows->widget.id,"
    },
    {
        "line": 188,
        "fullcodeline": "(void) XSetFillStyle(display,windows->widget.widget_context,FillSolid);"
    },
    {
        "line": 138,
        "fullcodeline": "if (submenu_info.active == 0)"
    },
    {
        "line": 158,
        "fullcodeline": "if (submenu_info.active == 0)"
    },
    {
        "line": 162,
        "fullcodeline": "for (id=0; id < (int) number_selections; id++)"
    },
    {
        "line": 210,
        "fullcodeline": "state&=(~InactiveWidgetState);"
    },
    {
        "line": 213,
        "fullcodeline": "id=(event.xbutton.y-top_offset)/(int) selection_info.height;"
    },
    {
        "line": 214,
        "fullcodeline": "selection_info.id=id;"
    },
    {
        "line": 220,
        "fullcodeline": "selection_info.y=(int) (top_offset+id*selection_info.height);"
    },
    {
        "line": 221,
        "fullcodeline": "selection_info.text=(char *) selections[id];"
    },
    {
        "line": 222,
        "fullcodeline": "XDrawWidgetText(display,&windows->widget,&selection_info);"
    },
    {
        "line": 223,
        "fullcodeline": "highlight_info.y=selection_info.y+highlight_info.bevel_width;"
    },
    {
        "line": 224,
        "fullcodeline": "XDrawBevel(display,&windows->widget,&highlight_info);"
    },
    {
        "line": 237,
        "fullcodeline": "XSetCursorState(display,windows,MagickFalse);"
    },
    {
        "line": 238,
        "fullcodeline": "*item='\\0';"
    },
    {
        "line": 239,
        "fullcodeline": "state|=ExitState;"
    },
    {
        "line": 252,
        "fullcodeline": "windows->widget.width=(unsigned int)"
    },
    {
        "line": 254,
        "fullcodeline": "windows->widget.height=(unsigned int)"
    },
    {
        "line": 256,
        "fullcodeline": "state|=UpdateConfigurationState;"
    },
    {
        "line": 265,
        "fullcodeline": "state&=(~InactiveWidgetState);"
    },
    {
        "line": 268,
        "fullcodeline": "id=((event.xcrossing.y-top_offset)/(int) selection_info.height);"
    },
    {
        "line": 287,
        "fullcodeline": "selection_info.id=id;"
    },
    {
        "line": 288,
        "fullcodeline": "selection_info.y=(int)"
    },
    {
        "line": 290,
        "fullcodeline": "selection_info.text=(char *) selections[selection_info.id];"
    },
    {
        "line": 291,
        "fullcodeline": "XDrawWidgetText(display,&windows->widget,&selection_info);"
    },
    {
        "line": 292,
        "fullcodeline": "highlight_info.y=selection_info.y+highlight_info.bevel_width;"
    },
    {
        "line": 293,
        "fullcodeline": "XDrawBevel(display,&windows->widget,&highlight_info);"
    },
    {
        "line": 302,
        "fullcodeline": "state|=RedrawWidgetState;"
    },
    {
        "line": 309,
        "fullcodeline": "state|=InactiveWidgetState;"
    },
    {
        "line": 310,
        "fullcodeline": "id=selection_info.id;"
    },
    {
        "line": 316,
        "fullcodeline": "selection_info.y=(int) (top_offset+id*selection_info.height);"
    },
    {
        "line": 317,
        "fullcodeline": "selection_info.id=(~0);"
    },
    {
        "line": 318,
        "fullcodeline": "selection_info.text=(char *) selections[id];"
    },
    {
        "line": 319,
        "fullcodeline": "XDrawWidgetText(display,&windows->widget,&selection_info);"
    },
    {
        "line": 356,
        "fullcodeline": "id=(event.xmotion.y-top_offset)/(int) selection_info.height;"
    },
    {
        "line": 370,
        "fullcodeline": "selection_info.id=id;"
    },
    {
        "line": 376,
        "fullcodeline": "selection_info.y=(int) (top_offset+id*selection_info.height);"
    },
    {
        "line": 377,
        "fullcodeline": "selection_info.text=(char *) selections[id];"
    },
    {
        "line": 378,
        "fullcodeline": "XDrawWidgetText(display,&windows->widget,&selection_info);"
    },
    {
        "line": 379,
        "fullcodeline": "highlight_info.y=selection_info.y+highlight_info.bevel_width;"
    },
    {
        "line": 380,
        "fullcodeline": "XDrawBevel(display,&windows->widget,&highlight_info);"
    },
    {
        "line": 140,
        "fullcodeline": "y=(int) title_height;"
    },
    {
        "line": 141,
        "fullcodeline": "XSetBevelColor(display,&windows->widget,MagickFalse);"
    },
    {
        "line": 142,
        "fullcodeline": "(void) XDrawLine(display,windows->widget.id,"
    },
    {
        "line": 145,
        "fullcodeline": "XSetBevelColor(display,&windows->widget,MagickTrue);"
    },
    {
        "line": 146,
        "fullcodeline": "(void) XDrawLine(display,windows->widget.id,"
    },
    {
        "line": 149,
        "fullcodeline": "(void) XSetFillStyle(display,windows->widget.widget_context,"
    },
    {
        "line": 159,
        "fullcodeline": "XDrawWidgetText(display,&windows->widget,&selection_info);"
    },
    {
        "line": 164,
        "fullcodeline": "selection_info.text=(char *) selections[id];"
    },
    {
        "line": 165,
        "fullcodeline": "XDrawWidgetText(display,&windows->widget,&selection_info);"
    },
    {
        "line": 166,
        "fullcodeline": "highlight_info.y=selection_info.y+highlight_info.bevel_width;"
    },
    {
        "line": 169,
        "fullcodeline": "selection_info.y+=(int) selection_info.height;"
    },
    {
        "line": 182,
        "fullcodeline": "windows->widget.widget_context,selection_info.x,y-1,"
    },
    {
        "line": 183,
        "fullcodeline": "(int) selection_info.width,y-1);"
    },
    {
        "line": 187,
        "fullcodeline": "(int) selection_info.width,y);"
    },
    {
        "line": 198,
        "fullcodeline": "if (event.xbutton.window != windows->widget.id)"
    },
    {
        "line": 211,
        "fullcodeline": "if (selection_info.height == 0)"
    },
    {
        "line": 215,
        "fullcodeline": "if ((id < 0) || (id >= (int) number_selections))"
    },
    {
        "line": 229,
        "fullcodeline": "if (windows->widget.mapped == MagickFalse)"
    },
    {
        "line": 231,
        "fullcodeline": "if (event.xbutton.window == windows->command.id)"
    },
    {
        "line": 249,
        "fullcodeline": "if ((event.xconfigure.width == (int) windows->widget.width) &&"
    },
    {
        "line": 261,
        "fullcodeline": "if (event.xcrossing.window != windows->widget.id)"
    },
    {
        "line": 263,
        "fullcodeline": "if (event.xcrossing.state == 0)"
    },
    {
        "line": 266,
        "fullcodeline": "if (selection_info.height == 0)"
    },
    {
        "line": 269,
        "fullcodeline": "if ((selection_info.id >= 0) &&"
    },
    {
        "line": 282,
        "fullcodeline": "if ((id < 0) || (id >= (int) number_selections))"
    },
    {
        "line": 300,
        "fullcodeline": "if (event.xexpose.count != 0)"
    },
    {
        "line": 307,
        "fullcodeline": "if (event.xcrossing.window != windows->widget.id)"
    },
    {
        "line": 311,
        "fullcodeline": "if ((id < 0) || (id >= (int) number_selections))"
    },
    {
        "line": 327,
        "fullcodeline": "while (XCheckMaskEvent(display,ButtonMotionMask,&event)) ;"
    },
    {
        "line": 328,
        "fullcodeline": "if (submenu_info.active != 0)"
    },
    {
        "line": 350,
        "fullcodeline": "if (event.xmotion.window != windows->widget.id)"
    },
    {
        "line": 352,
        "fullcodeline": "if (state & InactiveWidgetState)"
    },
    {
        "line": 354,
        "fullcodeline": "if (selection_info.height == 0)"
    },
    {
        "line": 357,
        "fullcodeline": "if ((selection_info.id >= 0) &&"
    },
    {
        "line": 371,
        "fullcodeline": "if ((id < 0) || (id >= (int) number_selections))"
    },
    {
        "line": 167,
        "fullcodeline": "if (id == selection_info.id)"
    },
    {
        "line": 205,
        "fullcodeline": "selection_info.id=(~0);"
    },
    {
        "line": 206,
        "fullcodeline": "*item='\\0';"
    },
    {
        "line": 207,
        "fullcodeline": "state|=ExitState;"
    },
    {
        "line": 250,
        "fullcodeline": "(event.xconfigure.height == (int) windows->widget.height))"
    },
    {
        "line": 253,
        "fullcodeline": "MagickMax(event.xconfigure.width,(int) windows->widget.min_width);"
    },
    {
        "line": 255,
        "fullcodeline": "MagickMax(event.xconfigure.height,(int) windows->widget.min_height);"
    },
    {
        "line": 270,
        "fullcodeline": "(selection_info.id < (int) number_selections))"
    },
    {
        "line": 277,
        "fullcodeline": "selection_info.y=(int)"
    },
    {
        "line": 279,
        "fullcodeline": "selection_info.text=(char *) selections[selection_info.id];"
    },
    {
        "line": 280,
        "fullcodeline": "XDrawWidgetText(display,&windows->widget,&selection_info);"
    },
    {
        "line": 289,
        "fullcodeline": "(top_offset+selection_info.id*selection_info.height);"
    },
    {
        "line": 358,
        "fullcodeline": "(selection_info.id < (int) number_selections))"
    },
    {
        "line": 365,
        "fullcodeline": "selection_info.y=(int)"
    },
    {
        "line": 367,
        "fullcodeline": "selection_info.text=(char *) selections[selection_info.id];"
    },
    {
        "line": 368,
        "fullcodeline": "XDrawWidgetText(display,&windows->widget,&selection_info);"
    },
    {
        "line": 143,
        "fullcodeline": "windows->widget.widget_context,selection_info.x,y-1,"
    },
    {
        "line": 144,
        "fullcodeline": "(int) selection_info.width,y-1);"
    },
    {
        "line": 148,
        "fullcodeline": "(int) selection_info.width,y);"
    },
    {
        "line": 168,
        "fullcodeline": "XDrawBevel(display,&windows->widget,&highlight_info);"
    },
    {
        "line": 203,
        "fullcodeline": "if (event.xbutton.window == windows->command.id)"
    },
    {
        "line": 232,
        "fullcodeline": "if ((state & InactiveWidgetState) == 0)"
    },
    {
        "line": 275,
        "fullcodeline": "if (id == selection_info.id)"
    },
    {
        "line": 329,
        "fullcodeline": "if (event.xmotion.window == windows->command.id)"
    },
    {
        "line": 363,
        "fullcodeline": "if (id == selection_info.id)"
    },
    {
        "line": 204,
        "fullcodeline": "(void) XPutBackEvent(display,&event);"
    },
    {
        "line": 278,
        "fullcodeline": "(top_offset+selection_info.id*selection_info.height);"
    },
    {
        "line": 366,
        "fullcodeline": "(top_offset+selection_info.id*selection_info.height);"
    },
    {
        "line": 331,
        "fullcodeline": "if ((state & InactiveWidgetState) == 0)"
    },
    {
        "line": 333,
        "fullcodeline": "if (MatteIsActive(submenu_info,event.xmotion) == MagickFalse)"
    },
    {
        "line": 335,
        "fullcodeline": "selection_info.id=(~0);"
    },
    {
        "line": 336,
        "fullcodeline": "*item='\\0';"
    },
    {
        "line": 337,
        "fullcodeline": "state|=ExitState;"
    },
    {
        "line": 342,
        "fullcodeline": "if (WindowIsActive(windows->command,event.xmotion))"
    },
    {
        "line": 344,
        "fullcodeline": "selection_info.id=(~0);"
    },
    {
        "line": 345,
        "fullcodeline": "*item='\\0';"
    },
    {
        "line": 346,
        "fullcodeline": "state|=ExitState;"
    }
]