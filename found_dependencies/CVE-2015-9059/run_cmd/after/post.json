[
    {
        "line": 7,
        "fullcodeline": "sigemptyset(&sigm);"
    },
    {
        "line": 8,
        "fullcodeline": "sigaddset(&sigm, SIGTERM);"
    },
    {
        "line": 9,
        "fullcodeline": "sigprocmask(SIG_BLOCK, &sigm, &sigm_old);"
    },
    {
        "line": 11,
        "fullcodeline": "pid = fork();"
    },
    {
        "line": 12,
        "fullcodeline": "if ( pid < 0 ) {"
    },
    {
        "line": 13,
        "fullcodeline": "sigprocmask(SIG_SETMASK, &sigm_old, NULL);"
    },
    {
        "line": 14,
        "fullcodeline": "fd_printf(STO, \"*** cannot fork: %s ***\\r\\n\", strerror(errno));"
    },
    {
        "line": 15,
        "fullcodeline": "return -1;"
    },
    {
        "line": 21,
        "fullcodeline": "sigprocmask(SIG_SETMASK, &sigm_old, NULL);"
    },
    {
        "line": 27,
        "fullcodeline": "term_apply(STI);"
    },
    {
        "line": 25,
        "fullcodeline": "} while ( r < 0 && errno == EINTR );"
    },
    {
        "line": 29,
        "fullcodeline": "if ( WIFEXITED(status) ) {"
    },
    {
        "line": 45,
        "fullcodeline": "char *argv[RUNCMD_ARGS_MAX + 1];"
    },
    {
        "line": 49,
        "fullcodeline": "term_remove(STI);"
    },
    {
        "line": 51,
        "fullcodeline": "term_erase(fd);"
    },
    {
        "line": 53,
        "fullcodeline": "fl = fcntl(fd, F_GETFL);"
    },
    {
        "line": 54,
        "fullcodeline": "fl &= ~O_NONBLOCK;"
    },
    {
        "line": 55,
        "fullcodeline": "fcntl(fd, F_SETFL, fl);"
    },
    {
        "line": 57,
        "fullcodeline": "close(STI);"
    },
    {
        "line": 58,
        "fullcodeline": "close(STO);"
    },
    {
        "line": 59,
        "fullcodeline": "dup2(fd, STI);"
    },
    {
        "line": 60,
        "fullcodeline": "dup2(fd, STO);"
    },
    {
        "line": 63,
        "fullcodeline": "argc = 0;"
    },
    {
        "line": 64,
        "fullcodeline": "r = split_quoted(cmd, &argc, argv, RUNCMD_ARGS_MAX);"
    },
    {
        "line": 69,
        "fullcodeline": "r = split_quoted(args_extra, &argc, argv, RUNCMD_ARGS_MAX);"
    },
    {
        "line": 78,
        "fullcodeline": "argv[argc] = NULL;"
    },
    {
        "line": 81,
        "fullcodeline": "fd_printf(STDERR_FILENO, \"$ %s %s\\n\", cmd, args_extra);"
    },
    {
        "line": 82,
        "fullcodeline": "establish_child_signal_handlers();"
    },
    {
        "line": 83,
        "fullcodeline": "sigprocmask(SIG_SETMASK, &sigm_old, NULL);"
    },
    {
        "line": 84,
        "fullcodeline": "execvp(argv[0], argv);"
    },
    {
        "line": 86,
        "fullcodeline": "fd_printf(STDERR_FILENO, \"exec: %s\\n\", strerror(errno));"
    },
    {
        "line": 87,
        "fullcodeline": "exit(RUNCMD_EXEC_FAIL);"
    },
    {
        "line": 24,
        "fullcodeline": "r = waitpid(pid, &status, 0);"
    },
    {
        "line": 30,
        "fullcodeline": "fd_printf(STO, \"\\r\\n*** exit status: %d ***\\r\\n\","
    },
    {
        "line": 65,
        "fullcodeline": "if ( r < 0 ) {"
    },
    {
        "line": 70,
        "fullcodeline": "if ( r < 0 ) {"
    },
    {
        "line": 74,
        "fullcodeline": "if ( argc < 1 ) {"
    },
    {
        "line": 31,
        "fullcodeline": "WEXITSTATUS(status));"
    },
    {
        "line": 32,
        "fullcodeline": "return WEXITSTATUS(status);"
    },
    {
        "line": 66,
        "fullcodeline": "fd_printf(STDERR_FILENO, \"Cannot parse command\\n\");"
    },
    {
        "line": 67,
        "fullcodeline": "exit(RUNCMD_EXEC_FAIL);"
    },
    {
        "line": 71,
        "fullcodeline": "fd_printf(STDERR_FILENO, \"Cannot parse extra args\\n\");"
    },
    {
        "line": 72,
        "fullcodeline": "exit(RUNCMD_EXEC_FAIL);"
    },
    {
        "line": 75,
        "fullcodeline": "fd_printf(STDERR_FILENO, \"No command given\\n\");"
    },
    {
        "line": 76,
        "fullcodeline": "exit(RUNCMD_EXEC_FAIL);"
    },
    {
        "line": 33,
        "fullcodeline": "} else if ( WIFSIGNALED(status) ) {"
    },
    {
        "line": 34,
        "fullcodeline": "fd_printf(STO, \"\\r\\n*** killed by signal: %d ***\\r\\n\","
    },
    {
        "line": 35,
        "fullcodeline": "WTERMSIG(status));"
    },
    {
        "line": 36,
        "fullcodeline": "return -1;"
    },
    {
        "line": 38,
        "fullcodeline": "fd_printf(STO, \"\\r\\n*** abnormal termination: 0x%x ***\\r\\n\", r);"
    },
    {
        "line": 39,
        "fullcodeline": "return -1;"
    }
]