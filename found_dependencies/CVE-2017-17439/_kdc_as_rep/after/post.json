[
    {
        "line": 7,
        "fullcodeline": "krb5_context context = r->context;"
    },
    {
        "line": 8,
        "fullcodeline": "krb5_kdc_configuration *config = r->config;"
    },
    {
        "line": 9,
        "fullcodeline": "KDC_REQ *req = &r->req;"
    },
    {
        "line": 10,
        "fullcodeline": "KDC_REQ_BODY *b = NULL;"
    },
    {
        "line": 14,
        "fullcodeline": "krb5_error_code ret = 0;"
    },
    {
        "line": 16,
        "fullcodeline": "int found_pa = 0;"
    },
    {
        "line": 17,
        "fullcodeline": "int i, flags = HDB_F_FOR_AS_REQ;"
    },
    {
        "line": 21,
        "fullcodeline": "memset(&rep, 0, sizeof(rep));"
    },
    {
        "line": 22,
        "fullcodeline": "error_method.len = 0;"
    },
    {
        "line": 23,
        "fullcodeline": "error_method.val = NULL;"
    },
    {
        "line": 28,
        "fullcodeline": "ret = _kdc_fast_unwrap_request(r);"
    },
    {
        "line": 34,
        "fullcodeline": "b = &req->req_body;"
    },
    {
        "line": 35,
        "fullcodeline": "f = b->kdc_options;"
    },
    {
        "line": 75,
        "fullcodeline": "kdc_log(context, config, 0, \"AS-REQ %s from %s for %s\","
    },
    {
        "line": 100,
        "fullcodeline": "ret = _kdc_db_fetch(context, config, r->client_princ,"
    },
    {
        "line": 139,
        "fullcodeline": "ret = _kdc_db_fetch(context, config, r->server_princ,"
    },
    {
        "line": 165,
        "fullcodeline": "ret = _kdc_find_etype(context,"
    },
    {
        "line": 290,
        "fullcodeline": "ret = _kdc_check_access(context, config, r->client, r->client_name,"
    },
    {
        "line": 301,
        "fullcodeline": "ret = _kdc_get_preferred_key(context, config,"
    },
    {
        "line": 318,
        "fullcodeline": "rep.pvno = 5;"
    },
    {
        "line": 319,
        "fullcodeline": "rep.msg_type = krb_as_rep;"
    },
    {
        "line": 328,
        "fullcodeline": "ret = _krb5_principal2principalname(&rep.cname, r->client->entry.principal);"
    },
    {
        "line": 332,
        "fullcodeline": "rep.ticket.tkt_vno = 5;"
    },
    {
        "line": 333,
        "fullcodeline": "ret = copy_Realm(&r->server->entry.principal->realm, &rep.ticket.realm);"
    },
    {
        "line": 345,
        "fullcodeline": "r->et.flags.initial = 1;"
    },
    {
        "line": 375,
        "fullcodeline": "ret = copy_PrincipalName(&rep.cname, &r->et.cname);"
    },
    {
        "line": 378,
        "fullcodeline": "ret = copy_Realm(&rep.crealm, &r->et.crealm);"
    },
    {
        "line": 441,
        "fullcodeline": "r->et.transited.tr_type = DOMAIN_X500_COMPRESS;"
    },
    {
        "line": 453,
        "fullcodeline": "r->ek.last_req.val = malloc(2 * sizeof(*r->ek.last_req.val));"
    },
    {
        "line": 458,
        "fullcodeline": "r->ek.last_req.len = 0;"
    },
    {
        "line": 476,
        "fullcodeline": "r->ek.nonce = b->nonce;"
    },
    {
        "line": 489,
        "fullcodeline": "r->ek.flags = r->et.flags;"
    },
    {
        "line": 490,
        "fullcodeline": "r->ek.authtime = r->et.authtime;"
    },
    {
        "line": 495,
        "fullcodeline": "r->ek.endtime = r->et.endtime;"
    },
    {
        "line": 500,
        "fullcodeline": "ret = copy_Realm(&rep.ticket.realm, &r->ek.srealm);"
    },
    {
        "line": 503,
        "fullcodeline": "ret = copy_PrincipalName(&rep.ticket.sname, &r->ek.sname);"
    },
    {
        "line": 527,
        "fullcodeline": "ret = copy_EncryptionKey(&r->session_key, &r->et.key);"
    },
    {
        "line": 531,
        "fullcodeline": "ret = copy_EncryptionKey(&r->session_key, &r->ek.key);"
    },
    {
        "line": 552,
        "fullcodeline": "_kdc_log_timestamp(context, config, \"AS-REQ\", r->et.authtime, r->et.starttime,"
    },
    {
        "line": 556,
        "fullcodeline": "ret = _kdc_add_KRB5SignedPath(context,"
    },
    {
        "line": 567,
        "fullcodeline": "log_as_req(context, config, r->reply_key.keytype, setype, b);"
    },
    {
        "line": 573,
        "fullcodeline": "r->et.flags.enc_pa_rep = r->ek.flags.enc_pa_rep = 1;"
    },
    {
        "line": 579,
        "fullcodeline": "i = 0;"
    },
    {
        "line": 580,
        "fullcodeline": "pa = _kdc_find_padata(req, &i, KRB5_PADATA_REQ_ENC_PA_REP);"
    },
    {
        "line": 596,
        "fullcodeline": "ret = _kdc_encode_reply(context, config,"
    },
    {
        "line": 614,
        "fullcodeline": "free_AS_REP(&rep);"
    },
    {
        "line": 636,
        "fullcodeline": "free_EncTicketPart(&r->et);"
    },
    {
        "line": 637,
        "fullcodeline": "free_EncKDCRepPart(&r->ek);"
    },
    {
        "line": 638,
        "fullcodeline": "free_KDCFastState(&r->fast);"
    },
    {
        "line": 668,
        "fullcodeline": "krb5_free_keyblock_contents(r->context, &r->reply_key);"
    },
    {
        "line": 669,
        "fullcodeline": "krb5_free_keyblock_contents(r->context, &r->session_key);"
    },
    {
        "line": 40,
        "fullcodeline": "if(b->sname == NULL){"
    },
    {
        "line": 56,
        "fullcodeline": "if(b->cname == NULL){"
    },
    {
        "line": 82,
        "fullcodeline": "if (_kdc_is_anonymous(context, r->client_princ)) {"
    },
    {
        "line": 103,
        "fullcodeline": "if(ret == HDB_ERR_NOT_FOUND_HERE) {"
    },
    {
        "line": 142,
        "fullcodeline": "if(ret == HDB_ERR_NOT_FOUND_HERE) {"
    },
    {
        "line": 214,
        "fullcodeline": "if (found_pa == 0) {"
    },
    {
        "line": 307,
        "fullcodeline": "if(f.renew || f.validate || f.proxy || f.forwarded || f.enc_tkt_in_skey"
    },
    {
        "line": 321,
        "fullcodeline": "if (_kdc_is_anonymous(context, r->client_princ)) {"
    },
    {
        "line": 341,
        "fullcodeline": "if (CNT(b, UNKNOWN) || CNT(b, PRINCIPAL) || CNT(b, SRV_INST) || CNT(b, SRV_HST) || CNT(b, SRV_XHST))"
    },
    {
        "line": 369,
        "fullcodeline": "if(!_kdc_check_addresses(context, config, b->addresses, from_addr)) {"
    },
    {
        "line": 386,
        "fullcodeline": "start = r->et.authtime = kdc_time;"
    },
    {
        "line": 394,
        "fullcodeline": "_kdc_fix_time(&b->till);"
    },
    {
        "line": 406,
        "fullcodeline": "r->et.endtime = t;"
    },
    {
        "line": 433,
        "fullcodeline": "if (_kdc_is_anon_request(b))"
    },
    {
        "line": 454,
        "fullcodeline": "if (r->ek.last_req.val == NULL) {"
    },
    {
        "line": 459,
        "fullcodeline": "if (r->client->entry.pw_end"
    },
    {
        "line": 471,
        "fullcodeline": "if (r->ek.last_req.len == 0) {"
    },
    {
        "line": 477,
        "fullcodeline": "if (r->client->entry.valid_end || r->client->entry.pw_end) {"
    },
    {
        "line": 515,
        "fullcodeline": "if (r->session_key.keytype == ETYPE_NULL) {"
    },
    {
        "line": 521,
        "fullcodeline": "if (r->reply_key.keytype == ETYPE_NULL) {"
    },
    {
        "line": 548,
        "fullcodeline": "if (send_pac_p(context, req)) {"
    },
    {
        "line": 607,
        "fullcodeline": "if (datagram_reply && reply->length > config->max_datagram_reply_length) {"
    },
    {
        "line": 619,
        "fullcodeline": "if (ret != 0 && ret != HDB_ERR_NOT_FOUND_HERE && reply->length == 0) {"
    },
    {
        "line": 30,
        "fullcodeline": "_kdc_r_log(r, 0, \"FAST unwrap request from %s failed: %d\", from, ret);"
    },
    {
        "line": 38,
        "fullcodeline": "flags |= HDB_F_CANON;"
    },
    {
        "line": 41,
        "fullcodeline": "ret = KRB5KRB_ERR_GENERIC;"
    },
    {
        "line": 42,
        "fullcodeline": "_kdc_set_e_text(r, \"No server in request\");"
    },
    {
        "line": 52,
        "fullcodeline": "kdc_log(context, config, 0,"
    },
    {
        "line": 57,
        "fullcodeline": "ret = KRB5KRB_ERR_GENERIC;"
    },
    {
        "line": 58,
        "fullcodeline": "_kdc_set_e_text(r, \"No client in request\");"
    },
    {
        "line": 70,
        "fullcodeline": "kdc_log(context, config, 0,"
    },
    {
        "line": 101,
        "fullcodeline": "HDB_F_GET_CLIENT | flags, NULL,"
    },
    {
        "line": 104,
        "fullcodeline": "kdc_log(context, config, 5, \"client %s does not have secrets at this KDC, need to proxy\","
    },
    {
        "line": 140,
        "fullcodeline": "HDB_F_GET_SERVER|HDB_F_GET_KRBTGT | flags,"
    },
    {
        "line": 143,
        "fullcodeline": "kdc_log(context, config, 5, \"target %s does not have secrets at this KDC, need to proxy\","
    },
    {
        "line": 166,
        "fullcodeline": "krb5_principal_is_krbtgt(context, r->server_princ) ?"
    },
    {
        "line": 172,
        "fullcodeline": "kdc_log(context, config, 0,"
    },
    {
        "line": 186,
        "fullcodeline": "log_patypes(context, config, req->padata);"
    },
    {
        "line": 215,
        "fullcodeline": "Key *ckey = NULL;"
    },
    {
        "line": 230,
        "fullcodeline": "ret = _kdc_find_etype(context,"
    },
    {
        "line": 274,
        "fullcodeline": "krb5_free_keyblock_contents(r->context,  &r->reply_key);"
    },
    {
        "line": 275,
        "fullcodeline": "ret = krb5_copy_keyblock_contents(r->context, &ckey->key, &r->reply_key);"
    },
    {
        "line": 281,
        "fullcodeline": "r->clientdb->hdb_auth_status(context, r->clientdb, r->client,"
    },
    {
        "line": 308,
        "fullcodeline": "|| (_kdc_is_anon_request(b) && !config->allow_anonymous)) {"
    },
    {
        "line": 309,
        "fullcodeline": "ret = KRB5KDC_ERR_BADOPTION;"
    },
    {
        "line": 310,
        "fullcodeline": "_kdc_set_e_text(r, \"Bad KDC options\");"
    },
    {
        "line": 322,
        "fullcodeline": "Realm anon_realm=KRB5_ANON_REALM;"
    },
    {
        "line": 323,
        "fullcodeline": "ret = copy_Realm(&anon_realm, &rep.crealm);"
    },
    {
        "line": 342,
        "fullcodeline": "rep.ticket.sname.name_type = b->sname->name_type;"
    },
    {
        "line": 347,
        "fullcodeline": "r->et.flags.forwardable = f.forwardable;"
    },
    {
        "line": 354,
        "fullcodeline": "r->et.flags.proxiable = f.proxiable;"
    },
    {
        "line": 361,
        "fullcodeline": "r->et.flags.may_postdate = f.allow_postdate;"
    },
    {
        "line": 370,
        "fullcodeline": "_kdc_set_e_text(r, \"Bad address list in requested\");"
    },
    {
        "line": 371,
        "fullcodeline": "ret = KRB5KRB_AP_ERR_BADADDR;"
    },
    {
        "line": 388,
        "fullcodeline": "if(f.postdated && req->req_body.from){"
    },
    {
        "line": 407,
        "fullcodeline": "if(f.renewable_ok && r->et.endtime < *b->till){"
    },
    {
        "line": 416,
        "fullcodeline": "if(f.renewable && b->rtime){"
    },
    {
        "line": 434,
        "fullcodeline": "r->et.flags.anonymous = 1;"
    },
    {
        "line": 438,
        "fullcodeline": "copy_HostAddresses(b->addresses, r->et.caddr);"
    },
    {
        "line": 455,
        "fullcodeline": "ret = ENOMEM;"
    },
    {
        "line": 460,
        "fullcodeline": "&& (config->kdc_warn_pwexpire == 0"
    },
    {
        "line": 462,
        "fullcodeline": "r->ek.last_req.val[r->ek.last_req.len].lr_type  = LR_PW_EXPTIME;"
    },
    {
        "line": 463,
        "fullcodeline": "r->ek.last_req.val[r->ek.last_req.len].lr_value = *r->client->entry.pw_end;"
    },
    {
        "line": 464,
        "fullcodeline": "++r->ek.last_req.len;"
    },
    {
        "line": 467,
        "fullcodeline": "r->ek.last_req.val[r->ek.last_req.len].lr_type  = LR_ACCT_EXPTIME;"
    },
    {
        "line": 469,
        "fullcodeline": "++r->ek.last_req.len;"
    },
    {
        "line": 472,
        "fullcodeline": "r->ek.last_req.val[r->ek.last_req.len].lr_type  = LR_NONE;"
    },
    {
        "line": 473,
        "fullcodeline": "r->ek.last_req.val[r->ek.last_req.len].lr_value = 0;"
    },
    {
        "line": 474,
        "fullcodeline": "++r->ek.last_req.len;"
    },
    {
        "line": 493,
        "fullcodeline": "*r->ek.starttime = *r->et.starttime;"
    },
    {
        "line": 498,
        "fullcodeline": "*r->ek.renew_till = *r->et.renew_till;"
    },
    {
        "line": 508,
        "fullcodeline": "copy_HostAddresses(r->et.caddr, r->ek.caddr);"
    },
    {
        "line": 516,
        "fullcodeline": "ret = krb5_generate_random_keyblock(context, r->sessionetype, &r->session_key);"
    },
    {
        "line": 522,
        "fullcodeline": "_kdc_set_e_text(r, \"Client have no reply key\");"
    },
    {
        "line": 523,
        "fullcodeline": "ret = KRB5KDC_ERR_CLIENT_NOTYET;"
    },
    {
        "line": 542,
        "fullcodeline": "ret = copy_METHOD_DATA(&r->outpadata, rep.padata);"
    },
    {
        "line": 549,
        "fullcodeline": "generate_pac(r, skey);"
    },
    {
        "line": 583,
        "fullcodeline": "ret = add_enc_pa_rep(r);"
    },
    {
        "line": 608,
        "fullcodeline": "krb5_data_free(reply);"
    },
    {
        "line": 609,
        "fullcodeline": "ret = KRB5KRB_ERR_RESPONSE_TOO_BIG;"
    },
    {
        "line": 610,
        "fullcodeline": "_kdc_set_e_text(r, \"Reply packet too large\");"
    },
    {
        "line": 620,
        "fullcodeline": "ret = _kdc_fast_mk_error(context, r,"
    },
    {
        "line": 641,
        "fullcodeline": "free_METHOD_DATA(&error_method);"
    },
    {
        "line": 643,
        "fullcodeline": "free_METHOD_DATA(&r->outpadata);"
    },
    {
        "line": 645,
        "fullcodeline": "krb5_free_principal(context, r->client_princ);"
    },
    {
        "line": 646,
        "fullcodeline": "r->client_princ = NULL;"
    },
    {
        "line": 649,
        "fullcodeline": "free(r->client_name);"
    },
    {
        "line": 650,
        "fullcodeline": "r->client_name = NULL;"
    },
    {
        "line": 653,
        "fullcodeline": "krb5_free_principal(context, r->server_princ);"
    },
    {
        "line": 654,
        "fullcodeline": "r->server_princ = NULL;"
    },
    {
        "line": 657,
        "fullcodeline": "free(r->server_name);"
    },
    {
        "line": 658,
        "fullcodeline": "r->server_name = NULL;"
    },
    {
        "line": 661,
        "fullcodeline": "_kdc_free_ent(context, r->client);"
    },
    {
        "line": 663,
        "fullcodeline": "_kdc_free_ent(context, r->server);"
    },
    {
        "line": 665,
        "fullcodeline": "krb5_crypto_destroy(r->context, r->armor_crypto);"
    },
    {
        "line": 666,
        "fullcodeline": "r->armor_crypto = NULL;"
    },
    {
        "line": 44,
        "fullcodeline": "ret = _krb5_principalname2krb5_principal (context,"
    },
    {
        "line": 60,
        "fullcodeline": "ret = _krb5_principalname2krb5_principal (context,"
    },
    {
        "line": 67,
        "fullcodeline": "ret = krb5_unparse_name(context, r->client_princ, &r->client_name);"
    },
    {
        "line": 83,
        "fullcodeline": "if (!_kdc_is_anon_request(b)) {"
    },
    {
        "line": 190,
        "fullcodeline": "for (n = 0; !found_pa && n < sizeof(pat) / sizeof(pat[0]); n++) {"
    },
    {
        "line": 218,
        "fullcodeline": "for (n = 0; n < sizeof(pat) / sizeof(pat[0]); n++) {"
    },
    {
        "line": 233,
        "fullcodeline": "if (ret == 0) {"
    },
    {
        "line": 263,
        "fullcodeline": "if (require_preauth_p(r) || _kdc_is_anon_request(b)) {"
    },
    {
        "line": 269,
        "fullcodeline": "if (ckey == NULL) {"
    },
    {
        "line": 325,
        "fullcodeline": "ret = copy_Realm(&r->client->entry.principal->realm, &rep.crealm);"
    },
    {
        "line": 390,
        "fullcodeline": "start = *r->et.starttime = *req->req_body.from;"
    },
    {
        "line": 391,
        "fullcodeline": "r->et.flags.invalid = 1;"
    },
    {
        "line": 392,
        "fullcodeline": "r->et.flags.postdated = 1; /* XXX ??? */"
    },
    {
        "line": 400,
        "fullcodeline": "t = start + min(t - start, *r->client->entry.max_life);"
    },
    {
        "line": 402,
        "fullcodeline": "t = start + min(t - start, *r->server->entry.max_life);"
    },
    {
        "line": 408,
        "fullcodeline": "f.renewable = 1;"
    },
    {
        "line": 417,
        "fullcodeline": "t = *b->rtime;"
    },
    {
        "line": 428,
        "fullcodeline": "*r->et.renew_till = t;"
    },
    {
        "line": 429,
        "fullcodeline": "r->et.flags.renewable = 1;"
    },
    {
        "line": 461,
        "fullcodeline": "|| kdc_time + config->kdc_warn_pwexpire >= *r->client->entry.pw_end)) {"
    },
    {
        "line": 488,
        "fullcodeline": "r->ek.key_expiration = NULL;"
    },
    {
        "line": 538,
        "fullcodeline": "if (rep.padata == NULL) {"
    },
    {
        "line": 48,
        "fullcodeline": "if (ret == 0)"
    },
    {
        "line": 84,
        "fullcodeline": "kdc_log(context, config, 0, \"Anonymous ticket w/o anonymous flag\");"
    },
    {
        "line": 85,
        "fullcodeline": "ret = KRB5KDC_ERR_C_PRINCIPAL_UNKNOWN;"
    },
    {
        "line": 88,
        "fullcodeline": "} else if (_kdc_is_anon_request(b)) {"
    },
    {
        "line": 107,
        "fullcodeline": "} else if (ret == HDB_ERR_WRONG_REALM) {"
    },
    {
        "line": 196,
        "fullcodeline": "kdc_log(context, config, 5,"
    },
    {
        "line": 198,
        "fullcodeline": "i = 0;"
    },
    {
        "line": 199,
        "fullcodeline": "pa = _kdc_find_padata(req, &i, pat[n].type);"
    },
    {
        "line": 221,
        "fullcodeline": "ret = krb5_padata_add(context, &error_method,"
    },
    {
        "line": 253,
        "fullcodeline": "ret = get_pa_etype_info2(context, config,"
    },
    {
        "line": 264,
        "fullcodeline": "ret = KRB5KDC_ERR_PREAUTH_REQUIRED;"
    },
    {
        "line": 265,
        "fullcodeline": "_kdc_set_e_text(r, \"Need to use PA-ENC-TIMESTAMP/PA-PK-AS-REQ\");"
    },
    {
        "line": 270,
        "fullcodeline": "ret = KRB5KDC_ERR_CLIENT_NOTYET;"
    },
    {
        "line": 271,
        "fullcodeline": "_kdc_set_e_text(r, \"Doesn't have a client key available\");"
    },
    {
        "line": 409,
        "fullcodeline": "if(b->rtime == NULL){"
    },
    {
        "line": 413,
        "fullcodeline": "if(*b->rtime < *b->till)"
    },
    {
        "line": 418,
        "fullcodeline": "if(t == 0)"
    },
    {
        "line": 539,
        "fullcodeline": "ret = ENOMEM;"
    },
    {
        "line": 585,
        "fullcodeline": "const char *msg = krb5_get_error_message(r->context, ret);"
    },
    {
        "line": 586,
        "fullcodeline": "_kdc_r_log(r, 0, \"add_enc_pa_rep failed: %s: %d\", msg, ret);"
    },
    {
        "line": 587,
        "fullcodeline": "krb5_free_error_message(r->context, msg);"
    },
    {
        "line": 626,
        "fullcodeline": "r->client_princ ?"
    },
    {
        "line": 628,
        "fullcodeline": "r->client_princ ?"
    },
    {
        "line": 49,
        "fullcodeline": "ret = krb5_unparse_name(context, r->server_princ, &r->server_name);"
    },
    {
        "line": 89,
        "fullcodeline": "kdc_log(context, config, 0,"
    },
    {
        "line": 92,
        "fullcodeline": "ret = KRB5KDC_ERR_C_PRINCIPAL_UNKNOWN;"
    },
    {
        "line": 108,
        "fullcodeline": "char *fixed_client_name = NULL;"
    },
    {
        "line": 110,
        "fullcodeline": "ret = krb5_unparse_name(context, r->client->entry.principal,"
    },
    {
        "line": 116,
        "fullcodeline": "kdc_log(context, config, 0, \"WRONG_REALM - %s -> %s\","
    },
    {
        "line": 118,
        "fullcodeline": "free(fixed_client_name);"
    },
    {
        "line": 120,
        "fullcodeline": "ret = _kdc_fast_mk_error(context, r,"
    },
    {
        "line": 147,
        "fullcodeline": "const char *msg = krb5_get_error_message(context, ret);"
    },
    {
        "line": 148,
        "fullcodeline": "kdc_log(context, config, 0, \"UNKNOWN -- %s: %s\", r->server_name, msg);"
    },
    {
        "line": 149,
        "fullcodeline": "krb5_free_error_message(context, msg);"
    },
    {
        "line": 150,
        "fullcodeline": "ret = KRB5KDC_ERR_S_PRINCIPAL_UNKNOWN;"
    },
    {
        "line": 191,
        "fullcodeline": "if (pat[n].validate == NULL)"
    },
    {
        "line": 193,
        "fullcodeline": "if (r->armor_crypto == NULL && (pat[n].flags & PA_REQ_FAST))"
    },
    {
        "line": 219,
        "fullcodeline": "if ((pat[n].flags & PA_ANNOUNCE) == 0)"
    },
    {
        "line": 349,
        "fullcodeline": "_kdc_set_e_text(r, \"Ticket may not be forwardable\");"
    },
    {
        "line": 350,
        "fullcodeline": "ret = KRB5KDC_ERR_POLICY;"
    },
    {
        "line": 356,
        "fullcodeline": "_kdc_set_e_text(r, \"Ticket may not be proxiable\");"
    },
    {
        "line": 357,
        "fullcodeline": "ret = KRB5KDC_ERR_POLICY;"
    },
    {
        "line": 363,
        "fullcodeline": "_kdc_set_e_text(r, \"Ticket may not be postdate\");"
    },
    {
        "line": 364,
        "fullcodeline": "ret = KRB5KDC_ERR_POLICY;"
    },
    {
        "line": 410,
        "fullcodeline": "ALLOC(b->rtime);"
    },
    {
        "line": 411,
        "fullcodeline": "*b->rtime = 0;"
    },
    {
        "line": 414,
        "fullcodeline": "*b->rtime = *b->till;"
    },
    {
        "line": 419,
        "fullcodeline": "t = MAX_TIME;"
    },
    {
        "line": 421,
        "fullcodeline": "t = start + min(t - start, *r->client->entry.max_renew);"
    },
    {
        "line": 423,
        "fullcodeline": "t = start + min(t - start, *r->server->entry.max_renew);"
    },
    {
        "line": 486,
        "fullcodeline": "*r->ek.key_expiration = *r->client->entry.pw_end;"
    },
    {
        "line": 201,
        "fullcodeline": "ret = pat[n].validate(r, pa);"
    },
    {
        "line": 205,
        "fullcodeline": "kdc_log(context, config, 0,"
    },
    {
        "line": 208,
        "fullcodeline": "found_pa = 1;"
    },
    {
        "line": 209,
        "fullcodeline": "r->et.flags.pre_authent = 1;"
    },
    {
        "line": 248,
        "fullcodeline": "ret = get_pa_etype_info(context, config,"
    },
    {
        "line": 481,
        "fullcodeline": "*r->ek.key_expiration = min(*r->client->entry.valid_end,"
    },
    {
        "line": 202,
        "fullcodeline": "if (ret != 0) {"
    },
    {
        "line": 133,
        "fullcodeline": "const char *msg = krb5_get_error_message(context, ret);"
    },
    {
        "line": 134,
        "fullcodeline": "kdc_log(context, config, 0, \"UNKNOWN -- %s: %s\", r->client_name, msg);"
    },
    {
        "line": 135,
        "fullcodeline": "krb5_free_error_message(context, msg);"
    },
    {
        "line": 136,
        "fullcodeline": "ret = KRB5KDC_ERR_C_PRINCIPAL_UNKNOWN;"
    }
]