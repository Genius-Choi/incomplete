[
    {
        "line": 3,
        "fullcodeline": "int ret = 0;"
    },
    {
        "line": 4,
        "fullcodeline": "const TCHAR *m_Err = _LANG_ERRORWRITINGTEMP;"
    },
    {
        "line": 5,
        "fullcodeline": "int cl_flags = 0;"
    },
    {
        "line": 8,
        "fullcodeline": "TCHAR seekchar=_T(' ');"
    },
    {
        "line": 12,
        "fullcodeline": "SetErrorMode(SEM_NOOPENFILEERRORBOX | SEM_FAILCRITICALERRORS);"
    },
    {
        "line": 20,
        "fullcodeline": "ovi.dwOSVersionInfoSize = sizeof(OSVERSIONINFOEX);"
    },
    {
        "line": 97,
        "fullcodeline": "g_SHGetFolderPath = myGetProcAddress(MGA_SHGetFolderPath); // and SHFOLDER"
    },
    {
        "line": 110,
        "fullcodeline": "InitCommonControls();"
    },
    {
        "line": 141,
        "fullcodeline": "mystrcpy(g_caption,_LANG_GENERIC_ERROR);"
    },
    {
        "line": 143,
        "fullcodeline": "mystrcpy(state_command_line, GetCommandLine());"
    },
    {
        "line": 149,
        "fullcodeline": "cmdline = state_command_line;"
    },
    {
        "line": 152,
        "fullcodeline": "cmdline=findchar(cmdline, seekchar);"
    },
    {
        "line": 153,
        "fullcodeline": "cmdline=CharNext(cmdline);"
    },
    {
        "line": 154,
        "fullcodeline": "realcmds=cmdline;"
    },
    {
        "line": 202,
        "fullcodeline": "GetTempPath(NSIS_MAX_STRLEN, state_temp_dir);"
    },
    {
        "line": 230,
        "fullcodeline": "DeleteFile(state_language);"
    },
    {
        "line": 232,
        "fullcodeline": "m_Err = loadHeaders(cl_flags);"
    },
    {
        "line": 331,
        "fullcodeline": "g_exec_flags.errlvl = -1;"
    },
    {
        "line": 332,
        "fullcodeline": "ret = ui_doinstall();"
    },
    {
        "line": 341,
        "fullcodeline": "CleanUp();"
    },
    {
        "line": 379,
        "fullcodeline": "ExitProcess(ret);"
    },
    {
        "line": 15,
        "fullcodeline": "if (sizeof(void*) < 8)"
    },
    {
        "line": 21,
        "fullcodeline": "if (!GetVersionEx((OSVERSIONINFO*) &ovi) && sizeof(void*) < 8)"
    },
    {
        "line": 31,
        "fullcodeline": "if (sizeof(TCHAR) == 1 && ovi.dwPlatformId < VER_PLATFORM_WIN32_NT)"
    },
    {
        "line": 36,
        "fullcodeline": "if (sizeof(void*) < 8 && ovi.dwMajorVersion < 10) // Ideally (sizeof(TCHAR) == 1 && ovi.dwMajorVersion < 5) but the compatibility tab emulates this bug"
    },
    {
        "line": 42,
        "fullcodeline": "UINT32 *p = &g_osinfo.WVBuild;"
    },
    {
        "line": 43,
        "fullcodeline": "p[0] = ovi.dwBuildNumber;"
    },
    {
        "line": 44,
        "fullcodeline": "p[1] = MAKELONG(MAKEWORD(ovi.wProductType, ovi.wServicePackMajor), MAKEWORD(ovi.dwMinorVersion, ovi.dwMajorVersion));"
    },
    {
        "line": 53,
        "fullcodeline": "BOOL avoidwinbug = IsWinVista();"
    },
    {
        "line": 104,
        "fullcodeline": "FARPROC fp = myGetProcAddress(MGA_IsOS);"
    },
    {
        "line": 138,
        "fullcodeline": "SHGetFileInfo(_T(\"\"), 0, &shfi, sizeof(SHFILEINFO), 0);"
    },
    {
        "line": 150,
        "fullcodeline": "if (*cmdline == _T('\\\"')) seekchar = *cmdline++;"
    },
    {
        "line": 203,
        "fullcodeline": "if (!ValidateTempDir())"
    },
    {
        "line": 376,
        "fullcodeline": "if (g_exec_flags.errlvl != -1)"
    },
    {
        "line": 17,
        "fullcodeline": "*((UINT32*)&ovi.szCSDVersion[0]) = 0; // Zero out SP"
    },
    {
        "line": 18,
        "fullcodeline": "*((UINT64*)&ovi.wServicePackMajor) = 0; // wServicePackMajor, wSuiteMask and wProductType"
    },
    {
        "line": 23,
        "fullcodeline": "ovi.dwOSVersionInfoSize = sizeof(OSVERSIONINFO);"
    },
    {
        "line": 24,
        "fullcodeline": "GetVersionEx((OSVERSIONINFO*) &ovi);"
    },
    {
        "line": 33,
        "fullcodeline": "ovi.wProductType = 0;"
    },
    {
        "line": 34,
        "fullcodeline": "ovi.wServicePackMajor = ovi.szCSDVersion[1] >= 'A' ? ovi.szCSDVersion[1] - ('A'-1) : 0; // A, B or C"
    },
    {
        "line": 38,
        "fullcodeline": "ovi.dwBuildNumber &= 0xffff; // Remove W9x garbage"
    },
    {
        "line": 54,
        "fullcodeline": "if (!avoidwinbug)"
    },
    {
        "line": 62,
        "fullcodeline": "static const char preload[] ="
    },
    {
        "line": 162,
        "fullcodeline": "seekchar = _T(' ');"
    },
    {
        "line": 196,
        "fullcodeline": "cmdline = findchar(cmdline, seekchar);"
    },
    {
        "line": 205,
        "fullcodeline": "GetWindowsDirectory(state_temp_dir, NSIS_MAX_STRLEN - 5); // leave space for \\Temp"
    },
    {
        "line": 206,
        "fullcodeline": "mystrcat(state_temp_dir, _T(\"\\\\Temp\"));"
    },
    {
        "line": 349,
        "fullcodeline": "my_MessageBox(m_Err, MB_OK | MB_ICONSTOP | (IDOK << 21));"
    },
    {
        "line": 350,
        "fullcodeline": "ExitProcess(2);"
    },
    {
        "line": 377,
        "fullcodeline": "ret = g_exec_flags.errlvl;"
    },
    {
        "line": 25,
        "fullcodeline": "if (sizeof(TCHAR) == 2 || ovi.dwPlatformId == VER_PLATFORM_WIN32_NT)"
    },
    {
        "line": 56,
        "fullcodeline": "FARPROC fp = myGetProcAddress(MGA_SetDefaultDllDirectories);"
    },
    {
        "line": 78,
        "fullcodeline": "for (dll = preload; dll[0]; dll += lstrlenA(dll) + 1)"
    },
    {
        "line": 79,
        "fullcodeline": "LoadSystemLibrary(dll);"
    },
    {
        "line": 106,
        "fullcodeline": "if (fp && ((BOOL(WINAPI*)(UINT))fp)(os_wow6432)) g_osinfo.WVProd |= NSIS_OSINFO_PROD_WOW64FLAG;"
    },
    {
        "line": 159,
        "fullcodeline": "while (*cmdline == _T(' ')) cmdline++;"
    },
    {
        "line": 163,
        "fullcodeline": "if (cmdline[0] == _T('\\\"'))"
    },
    {
        "line": 170,
        "fullcodeline": "if (cmdline[0] == _T('/'))"
    },
    {
        "line": 198,
        "fullcodeline": "if (*cmdline == _T('\\\"'))"
    },
    {
        "line": 207,
        "fullcodeline": "if (!ValidateTempDir())"
    },
    {
        "line": 27,
        "fullcodeline": "ovi.wProductType = 4; // TODO: For < NT4SP6, look it up in the registry. 4 means not W9x and not VER_NT_*"
    },
    {
        "line": 28,
        "fullcodeline": "ovi.wServicePackMajor = ovi.szCSDVersion[0] == 'S' ? ovi.szCSDVersion[13] - '0' : 0;"
    },
    {
        "line": 165,
        "fullcodeline": "cmdline++;"
    },
    {
        "line": 166,
        "fullcodeline": "seekchar = _T('\\\"');"
    },
    {
        "line": 172,
        "fullcodeline": "cmdline++;"
    },
    {
        "line": 199,
        "fullcodeline": "cmdline++;"
    },
    {
        "line": 213,
        "fullcodeline": "GetTempPath(NSIS_MAX_STRLEN - 4, state_temp_dir); // leave space for \\Low"
    },
    {
        "line": 214,
        "fullcodeline": "mystrcat(state_temp_dir, _T(\"Low\"));"
    },
    {
        "line": 221,
        "fullcodeline": "SetEnvironmentVariable(_T(\"TEMP\"), state_temp_dir);"
    },
    {
        "line": 222,
        "fullcodeline": "SetEnvironmentVariable(_T(\"TMP\"), state_temp_dir);"
    },
    {
        "line": 187,
        "fullcodeline": "if (CMP4CHAR(cmdline-2, _T(\" /D=\")))"
    },
    {
        "line": 224,
        "fullcodeline": "if (!ValidateTempDir())"
    },
    {
        "line": 189,
        "fullcodeline": "*(cmdline-2)=_T('\\0'); // keep this from being passed to uninstaller if necessary"
    },
    {
        "line": 190,
        "fullcodeline": "mystrcpy(state_install_directory,cmdline+2);"
    }
]