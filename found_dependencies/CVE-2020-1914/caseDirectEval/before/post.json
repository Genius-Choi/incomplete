[
    {
        "line": 5,
        "fullcodeline": "auto *result = &O1REG(DirectEval);"
    },
    {
        "line": 6,
        "fullcodeline": "auto *input = &O2REG(DirectEval);"
    },
    {
        "line": 8,
        "fullcodeline": "GCScopeMarkerRAII gcMarker{runtime};"
    },
    {
        "line": 12,
        "fullcodeline": "auto global = runtime->getGlobal();"
    },
    {
        "line": 13,
        "fullcodeline": "auto existingEval = global->getNamed_RJS("
    },
    {
        "line": 18,
        "fullcodeline": "auto *nativeExistingEval = dyn_vmcast<NativeFunction>(existingEval->get());"
    },
    {
        "line": 48,
        "fullcodeline": "ScopeChain scopeChain{};"
    },
    {
        "line": 49,
        "fullcodeline": "scopeChain.functions.emplace_back();"
    },
    {
        "line": 51,
        "fullcodeline": "auto cr = vm::directEval("
    },
    {
        "line": 15,
        "fullcodeline": "if (LLVM_UNLIKELY(existingEval == ExecutionStatus::EXCEPTION)) {"
    },
    {
        "line": 19,
        "fullcodeline": "if (LLVM_UNLIKELY("
    },
    {
        "line": 40,
        "fullcodeline": "if (!input->isString()) {"
    },
    {
        "line": 53,
        "fullcodeline": "if (cr == ExecutionStatus::EXCEPTION)"
    },
    {
        "line": 20,
        "fullcodeline": "!nativeExistingEval ||"
    },
    {
        "line": 52,
        "fullcodeline": "runtime, Handle<StringPrimitive>::vmcast(input), scopeChain, false);"
    },
    {
        "line": 21,
        "fullcodeline": "nativeExistingEval->getFunctionPtr() != hermes::vm::eval)) {"
    },
    {
        "line": 36,
        "fullcodeline": "return runtime->raiseTypeErrorForValue("
    },
    {
        "line": 22,
        "fullcodeline": "if (auto *existingEvalCallable ="
    },
    {
        "line": 24,
        "fullcodeline": "auto evalRes = existingEvalCallable->executeCall1("
    },
    {
        "line": 32,
        "fullcodeline": "*result = evalRes->get();"
    },
    {
        "line": 33,
        "fullcodeline": "evalRes->invalidate();"
    },
    {
        "line": 37,
        "fullcodeline": "runtime->makeHandle(std::move(*existingEval)), \" is not a function\");"
    },
    {
        "line": 23,
        "fullcodeline": "dyn_vmcast<Callable>(existingEval->get())) {"
    },
    {
        "line": 29,
        "fullcodeline": "if (LLVM_UNLIKELY(evalRes == ExecutionStatus::EXCEPTION)) {"
    },
    {
        "line": 25,
        "fullcodeline": "runtime->makeHandle<Callable>(existingEvalCallable),"
    }
]