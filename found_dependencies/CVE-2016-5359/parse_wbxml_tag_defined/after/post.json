[
    {
        "line": 5,
        "fullcodeline": "guint32     tvb_len  = tvb_reported_length (tvb);"
    },
    {
        "line": 6,
        "fullcodeline": "guint32     off      = offset, last_off;"
    },
    {
        "line": 13,
        "fullcodeline": "guint8      tag_save_known      = 0;     /* Will contain peek & 0x3F (tag identity) */"
    },
    {
        "line": 14,
        "fullcodeline": "guint8      tag_new_known       = 0;     /* Will contain peek & 0x3F (tag identity) */"
    },
    {
        "line": 17,
        "fullcodeline": "guint8      parsing_tag_content = FALSE; /* Are we parsing content from a"
    },
    {
        "line": 22,
        "fullcodeline": "tag_save_literal = NULL;                 /* Prevents compiler warning */"
    },
    {
        "line": 24,
        "fullcodeline": "DebugLog((\"parse_wbxml_tag_defined (level = %u, offset = %u)\\n\", *level, offset));"
    },
    {
        "line": 25,
        "fullcodeline": "last_off = off;"
    },
    {
        "line": 402,
        "fullcodeline": "DebugLog((\"STAG: level = %u, Return: len = %u (end of function body)\\n\", *level, off - offset));"
    },
    {
        "line": 26,
        "fullcodeline": "while (off < tvb_len) {"
    },
    {
        "line": 403,
        "fullcodeline": "return (off - offset);"
    },
    {
        "line": 27,
        "fullcodeline": "peek = tvb_get_guint8 (tvb, off);"
    },
    {
        "line": 28,
        "fullcodeline": "DebugLog((\"STAG: (top of while) level = %3u, peek = 0x%02X, off = %u, tvb_len = %u\\n\", *level, peek, off, tvb_len));"
    },
    {
        "line": 400,
        "fullcodeline": "last_off = off;"
    },
    {
        "line": 29,
        "fullcodeline": "if ((peek & 0x3F) < 4) switch (peek) { /* Global tokens in state = STAG"
    },
    {
        "line": 397,
        "fullcodeline": "if (off < last_off) {"
    },
    {
        "line": 398,
        "fullcodeline": "THROW(ReportedBoundsError);"
    },
    {
        "line": 217,
        "fullcodeline": "tag_len = 0;"
    },
    {
        "line": 32,
        "fullcodeline": "*codepage_stag = tvb_get_guint8 (tvb, off+1);"
    },
    {
        "line": 33,
        "fullcodeline": "proto_tree_add_text (tree, tvb, off, 2,"
    },
    {
        "line": 38,
        "fullcodeline": "off += 2;"
    },
    {
        "line": 57,
        "fullcodeline": "(*level)--;"
    },
    {
        "line": 58,
        "fullcodeline": "off++;"
    },
    {
        "line": 60,
        "fullcodeline": "DebugLog((\"STAG: level = %u, Return: len = %u\\n\", *level, off - offset));"
    },
    {
        "line": 63,
        "fullcodeline": "ent = tvb_get_guintvar (tvb, off+1, &len);"
    },
    {
        "line": 64,
        "fullcodeline": "proto_tree_add_text (tree, tvb, off, 1+len,"
    },
    {
        "line": 69,
        "fullcodeline": "off += 1+len;"
    },
    {
        "line": 72,
        "fullcodeline": "len = tvb_strsize (tvb, off+1);"
    },
    {
        "line": 73,
        "fullcodeline": "proto_tree_add_text (tree, tvb, off, 1+len,"
    },
    {
        "line": 79,
        "fullcodeline": "off += 1+len;"
    },
    {
        "line": 85,
        "fullcodeline": "len = tvb_strsize (tvb, off+1);"
    },
    {
        "line": 86,
        "fullcodeline": "proto_tree_add_text (tree, tvb, off, 1+len,"
    },
    {
        "line": 94,
        "fullcodeline": "off += 1+len;"
    },
    {
        "line": 97,
        "fullcodeline": "proto_tree_add_text (tree, tvb, off, 1,"
    },
    {
        "line": 102,
        "fullcodeline": "len = parse_wbxml_attribute_list_defined (tree, tvb, off,"
    },
    {
        "line": 105,
        "fullcodeline": "off += len;"
    },
    {
        "line": 113,
        "fullcodeline": "proto_tree_add_text (tree, tvb, off-1, 1,"
    },
    {
        "line": 123,
        "fullcodeline": "idx = tvb_get_guintvar (tvb, off+1, &len);"
    },
    {
        "line": 137,
        "fullcodeline": "off += 1+len;"
    },
    {
        "line": 140,
        "fullcodeline": "idx = tvb_get_guintvar (tvb, off+1, &len);"
    },
    {
        "line": 141,
        "fullcodeline": "str_len = tvb_strsize (tvb, str_tbl+idx);"
    },
    {
        "line": 142,
        "fullcodeline": "proto_tree_add_text (tree, tvb, off, 1+len,"
    },
    {
        "line": 148,
        "fullcodeline": "off += 1+len;"
    },
    {
        "line": 154,
        "fullcodeline": "proto_tree_add_text (tree, tvb, off, 1,"
    },
    {
        "line": 160,
        "fullcodeline": "off++;"
    },
    {
        "line": 218,
        "fullcodeline": "if ((peek & 0x3F) == 4) { /* LITERAL */"
    },
    {
        "line": 232,
        "fullcodeline": "if (peek & 0x40) { /* Content present */"
    },
    {
        "line": 61,
        "fullcodeline": "return (off - offset);"
    },
    {
        "line": 68,
        "fullcodeline": "*level, *codepage_stag, Indent (*level), ent);"
    },
    {
        "line": 77,
        "fullcodeline": "*level, *codepage_stag, Indent(*level),"
    },
    {
        "line": 78,
        "fullcodeline": "tvb_format_text (tvb, off+1, len-1));"
    },
    {
        "line": 91,
        "fullcodeline": "peek & 0x0f, Indent (*level),"
    },
    {
        "line": 92,
        "fullcodeline": "map_token (map->global, 0, peek),"
    },
    {
        "line": 93,
        "fullcodeline": "tvb_format_text (tvb, off+1, len-1));"
    },
    {
        "line": 101,
        "fullcodeline": "*level, *codepage_stag, Indent (*level));"
    },
    {
        "line": 106,
        "fullcodeline": "if (off >= tvb_len) {"
    },
    {
        "line": 117,
        "fullcodeline": "*level, *codepage_stag, Indent (*level));"
    },
    {
        "line": 130,
        "fullcodeline": "proto_tree_add_text (tree, tvb, off, 1+len,"
    },
    {
        "line": 146,
        "fullcodeline": "*level, *codepage_stag, Indent (*level),"
    },
    {
        "line": 147,
        "fullcodeline": "tvb_format_text (tvb, str_tbl+idx, str_len-1));"
    },
    {
        "line": 158,
        "fullcodeline": "*level, *codepage_stag, peek & 0x0f, Indent (*level),"
    },
    {
        "line": 159,
        "fullcodeline": "map_token (map->global, 0, peek));"
    },
    {
        "line": 163,
        "fullcodeline": "if (tvb_get_guint8 (tvb, 0)) { /* WBXML 1.x (x > 0) */"
    },
    {
        "line": 219,
        "fullcodeline": "DebugLog((\"STAG: LITERAL tag (peek = 0x%02X, off = %u) - TableRef follows!\\n\", peek, off));"
    },
    {
        "line": 220,
        "fullcodeline": "idx = tvb_get_guintvar (tvb, off+1, &tag_len);"
    },
    {
        "line": 221,
        "fullcodeline": "str_len = tvb_strsize (tvb, str_tbl+idx);"
    },
    {
        "line": 222,
        "fullcodeline": "tag_new_literal = (const gchar*)tvb_get_ptr (tvb, str_tbl+idx, str_len);"
    },
    {
        "line": 223,
        "fullcodeline": "tag_new_known = 0; /* invalidate known tag_new */"
    },
    {
        "line": 42,
        "fullcodeline": "proto_tree_add_text (tree, tvb, off, 1,"
    },
    {
        "line": 107,
        "fullcodeline": "DebugLog((\"STAG: level = %u, ThrowException: len = %u (short frame)\\n\", *level, off - offset));"
    },
    {
        "line": 111,
        "fullcodeline": "THROW(ReportedBoundsError);"
    },
    {
        "line": 134,
        "fullcodeline": "*level, *codepage_stag, peek & 0x0f, Indent (*level),"
    },
    {
        "line": 182,
        "fullcodeline": "proto_tree_add_text (tree, tvb, off, 1 + len,"
    },
    {
        "line": 187,
        "fullcodeline": "off += 1 + len;"
    },
    {
        "line": 225,
        "fullcodeline": "tag_new_known = peek & 0x3F;"
    },
    {
        "line": 226,
        "fullcodeline": "tag_new_literal = map_token (map->tags, *codepage_stag,"
    },
    {
        "line": 321,
        "fullcodeline": "DebugLog((\"<Tag/> in Tag - No recursion! (off = %u)\\n\", off));"
    },
    {
        "line": 322,
        "fullcodeline": "(*level)++;"
    },
    {
        "line": 393,
        "fullcodeline": "(*level)--;"
    },
    {
        "line": 47,
        "fullcodeline": "tag_save_known, Indent (*level),"
    },
    {
        "line": 50,
        "fullcodeline": "proto_tree_add_text (tree, tvb, off, 1,"
    },
    {
        "line": 125,
        "fullcodeline": "if (map->ext_t[peek & 0x03])"
    },
    {
        "line": 126,
        "fullcodeline": "s = (map->ext_t[peek & 0x03])(tvb, idx, str_tbl);"
    },
    {
        "line": 186,
        "fullcodeline": "*level, *codepage_stag, Indent (*level), str);"
    },
    {
        "line": 189,
        "fullcodeline": "proto_tree_add_text (tree, tvb, off, 1,"
    },
    {
        "line": 195,
        "fullcodeline": "off = tvb_len;"
    },
    {
        "line": 196,
        "fullcodeline": "DebugLog((\"STAG: level = %u, Return: len = %u\\n\", *level, off - offset));"
    },
    {
        "line": 239,
        "fullcodeline": "DebugLog((\"STAG: Tag in Tag - RECURSE! (off = %u)\\n\", off));"
    },
    {
        "line": 242,
        "fullcodeline": "(*level)++;"
    },
    {
        "line": 243,
        "fullcodeline": "len = parse_wbxml_tag_defined (tree, tvb, off, str_tbl,"
    },
    {
        "line": 245,
        "fullcodeline": "off += len;"
    },
    {
        "line": 323,
        "fullcodeline": "if (peek & 0x80) { /* No Content, Attribute list present */"
    },
    {
        "line": 54,
        "fullcodeline": "*level, *codepage_stag, Indent (*level),"
    },
    {
        "line": 55,
        "fullcodeline": "tag_save_literal ? tag_save_literal : \"\");"
    },
    {
        "line": 128,
        "fullcodeline": "s = wmem_strdup_printf(wmem_packet_scope(), \"EXT_T_%1x (%s)\", peek & 0x03,"
    },
    {
        "line": 197,
        "fullcodeline": "return (off - offset);"
    },
    {
        "line": 317,
        "fullcodeline": "parsing_tag_content = TRUE;"
    },
    {
        "line": 318,
        "fullcodeline": "DebugLog((\"Tag in Tag - No recursion this time! (off = %u)\\n\", off));"
    },
    {
        "line": 248,
        "fullcodeline": "if ((peek & 0x3F) == 4) { /* Literal tag */"
    },
    {
        "line": 257,
        "fullcodeline": "if (peek & 0x80) { /* Content and Attribute list present */"
    },
    {
        "line": 129,
        "fullcodeline": "map_token (map->global, 0, peek));"
    },
    {
        "line": 167,
        "fullcodeline": "str = map->opaque_binary_tag(tvb, off + 1,"
    },
    {
        "line": 249,
        "fullcodeline": "tag_save_literal = tag_new_literal;"
    },
    {
        "line": 250,
        "fullcodeline": "tag_save_known = 0;"
    },
    {
        "line": 275,
        "fullcodeline": "len = parse_wbxml_attribute_list_defined (tree, tvb,"
    },
    {
        "line": 278,
        "fullcodeline": "off += len;"
    },
    {
        "line": 287,
        "fullcodeline": "proto_tree_add_text (tree, tvb, off-1, 1,"
    },
    {
        "line": 325,
        "fullcodeline": "proto_tree_add_text (tree, tvb, off, 1,"
    },
    {
        "line": 332,
        "fullcodeline": "off++;"
    },
    {
        "line": 333,
        "fullcodeline": "len = parse_wbxml_attribute_list_defined (tree, tvb,"
    },
    {
        "line": 336,
        "fullcodeline": "off += len;"
    },
    {
        "line": 344,
        "fullcodeline": "proto_tree_add_text (tree, tvb, off-1, 1,"
    },
    {
        "line": 170,
        "fullcodeline": "str = default_opaque_binary_tag(tvb, off + 1,"
    },
    {
        "line": 175,
        "fullcodeline": "str = map->opaque_literal_tag(tvb, off + 1,"
    },
    {
        "line": 252,
        "fullcodeline": "tag_save_known = tag_new_known;"
    },
    {
        "line": 253,
        "fullcodeline": "tag_save_literal = tag_new_literal;"
    },
    {
        "line": 279,
        "fullcodeline": "if (off >= tvb_len) {"
    },
    {
        "line": 291,
        "fullcodeline": "*level, *codepage_stag, Indent (*level));"
    },
    {
        "line": 330,
        "fullcodeline": "Indent (*level), tag_new_literal);"
    },
    {
        "line": 337,
        "fullcodeline": "if (off > tvb_len) {"
    },
    {
        "line": 348,
        "fullcodeline": "*level, *codepage_stag, Indent (*level));"
    },
    {
        "line": 350,
        "fullcodeline": "proto_tree_add_text (tree, tvb, off, 1,"
    },
    {
        "line": 355,
        "fullcodeline": "off += 1 + tag_len;"
    },
    {
        "line": 356,
        "fullcodeline": "len = parse_wbxml_attribute_list_defined (tree, tvb,"
    },
    {
        "line": 359,
        "fullcodeline": "off += len;"
    },
    {
        "line": 367,
        "fullcodeline": "proto_tree_add_text (tree, tvb, off-1, 1,"
    },
    {
        "line": 375,
        "fullcodeline": "proto_tree_add_text (tree, tvb, off, 1,"
    },
    {
        "line": 382,
        "fullcodeline": "off++;"
    },
    {
        "line": 178,
        "fullcodeline": "str = default_opaque_literal_tag(tvb, off + 1,"
    },
    {
        "line": 259,
        "fullcodeline": "proto_tree_add_text (tree, tvb, off, 1,"
    },
    {
        "line": 266,
        "fullcodeline": "off++;"
    },
    {
        "line": 280,
        "fullcodeline": "DebugLog((\"STAG: level = %u, ThrowException: len = %u (short frame)\\n\","
    },
    {
        "line": 285,
        "fullcodeline": "THROW(ReportedBoundsError);"
    },
    {
        "line": 338,
        "fullcodeline": "DebugLog((\"STAG: level = %u, ThrowException: len = %u (short frame)\\n\", *level, off - offset));"
    },
    {
        "line": 342,
        "fullcodeline": "THROW(ReportedBoundsError);"
    },
    {
        "line": 354,
        "fullcodeline": "*level, *codepage_stag, Indent (*level), tag_new_literal);"
    },
    {
        "line": 360,
        "fullcodeline": "if (off >= tvb_len) {"
    },
    {
        "line": 371,
        "fullcodeline": "*level, *codepage_stag, Indent (*level));"
    },
    {
        "line": 380,
        "fullcodeline": "Indent (*level), tag_new_literal);"
    },
    {
        "line": 384,
        "fullcodeline": "proto_tree_add_text (tree, tvb, off, 1,"
    },
    {
        "line": 390,
        "fullcodeline": "off += 1 + tag_len;"
    },
    {
        "line": 264,
        "fullcodeline": "Indent (*level), tag_new_literal);"
    },
    {
        "line": 268,
        "fullcodeline": "proto_tree_add_text (tree, tvb, off, 1,"
    },
    {
        "line": 273,
        "fullcodeline": "off += 1 + tag_len;"
    },
    {
        "line": 294,
        "fullcodeline": "proto_tree_add_text (tree, tvb, off, 1,"
    },
    {
        "line": 301,
        "fullcodeline": "off++;"
    },
    {
        "line": 361,
        "fullcodeline": "DebugLog((\"STAG: level = %u, ThrowException: len = %u (short frame)\\n\", *level, off - offset));"
    },
    {
        "line": 365,
        "fullcodeline": "THROW(ReportedBoundsError);"
    },
    {
        "line": 388,
        "fullcodeline": "*level, *codepage_stag, Indent (*level),"
    },
    {
        "line": 272,
        "fullcodeline": "*level, *codepage_stag, Indent (*level), tag_new_literal);"
    },
    {
        "line": 299,
        "fullcodeline": "Indent (*level), tag_new_literal);"
    },
    {
        "line": 303,
        "fullcodeline": "proto_tree_add_text (tree, tvb, off, 1,"
    },
    {
        "line": 309,
        "fullcodeline": "off += 1 + tag_len;"
    },
    {
        "line": 281,
        "fullcodeline": "*level, off - offset));"
    },
    {
        "line": 307,
        "fullcodeline": "*level, *codepage_stag, Indent (*level),"
    }
]