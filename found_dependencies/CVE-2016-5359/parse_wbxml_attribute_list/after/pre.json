[
    {
        "line": 4,
        "fullcodeline": "guint32 tvb_len = tvb_reported_length (tvb);"
    },
    {
        "line": 5,
        "fullcodeline": "guint32 off     = offset, last_off;"
    },
    {
        "line": 12,
        "fullcodeline": "DebugLog((\"parse_wbxml_attr (level = %u, offset = %u)\\n\", level, offset));"
    },
    {
        "line": 14,
        "fullcodeline": "last_off = off;"
    },
    {
        "line": 15,
        "fullcodeline": "while (off < tvb_len) {"
    },
    {
        "line": 177,
        "fullcodeline": "DebugLog((\"ATTR: level = %u, Return: len = %u (end of function body)\\n\","
    },
    {
        "line": 179,
        "fullcodeline": "return (off - offset);"
    },
    {
        "line": 16,
        "fullcodeline": "peek = tvb_get_guint8 (tvb, off);"
    },
    {
        "line": 17,
        "fullcodeline": "DebugLog((\"ATTR: (top of while) level = %3u, peek = 0x%02X, \""
    },
    {
        "line": 175,
        "fullcodeline": "last_off = off;"
    },
    {
        "line": 19,
        "fullcodeline": "if ((peek & 0x3F) < 5) switch (peek) { /* Global tokens"
    },
    {
        "line": 172,
        "fullcodeline": "if (off < last_off) {"
    },
    {
        "line": 178,
        "fullcodeline": "level, off - offset));"
    },
    {
        "line": 173,
        "fullcodeline": "THROW(ReportedBoundsError);"
    },
    {
        "line": 22,
        "fullcodeline": "*codepage_attr = tvb_get_guint8 (tvb, off+1);"
    },
    {
        "line": 23,
        "fullcodeline": "proto_tree_add_text (tree, tvb, off, 2,"
    },
    {
        "line": 27,
        "fullcodeline": "off += 2;"
    },
    {
        "line": 35,
        "fullcodeline": "off++;"
    },
    {
        "line": 36,
        "fullcodeline": "DebugLog((\"ATTR: level = %u, Return: len = %u\\n\","
    },
    {
        "line": 40,
        "fullcodeline": "ent = tvb_get_guintvar (tvb, off+1, &len);"
    },
    {
        "line": 41,
        "fullcodeline": "proto_tree_add_text (tree, tvb, off, 1+len,"
    },
    {
        "line": 46,
        "fullcodeline": "off += 1+len;"
    },
    {
        "line": 49,
        "fullcodeline": "len = tvb_strsize (tvb, off+1);"
    },
    {
        "line": 50,
        "fullcodeline": "proto_tree_add_text (tree, tvb, off, 1+len,"
    },
    {
        "line": 56,
        "fullcodeline": "off += 1+len;"
    },
    {
        "line": 59,
        "fullcodeline": "idx = tvb_get_guintvar (tvb, off+1, &len);"
    },
    {
        "line": 60,
        "fullcodeline": "str_len = tvb_strsize (tvb, str_tbl+idx);"
    },
    {
        "line": 61,
        "fullcodeline": "proto_tree_add_text (tree, tvb, off, 1+len,"
    },
    {
        "line": 67,
        "fullcodeline": "off += 1+len;"
    },
    {
        "line": 73,
        "fullcodeline": "len = tvb_strsize (tvb, off+1);"
    },
    {
        "line": 74,
        "fullcodeline": "proto_tree_add_text (tree, tvb, off, 1+len,"
    },
    {
        "line": 80,
        "fullcodeline": "off += 1+len;"
    },
    {
        "line": 88,
        "fullcodeline": "idx = tvb_get_guintvar (tvb, off+1, &len);"
    },
    {
        "line": 89,
        "fullcodeline": "proto_tree_add_text (tree, tvb, off, 1+len,"
    },
    {
        "line": 95,
        "fullcodeline": "off += 1+len;"
    },
    {
        "line": 98,
        "fullcodeline": "idx = tvb_get_guintvar (tvb, off+1, &len);"
    },
    {
        "line": 99,
        "fullcodeline": "str_len = tvb_strsize (tvb, str_tbl+idx);"
    },
    {
        "line": 100,
        "fullcodeline": "proto_tree_add_text (tree, tvb, off, 1+len,"
    },
    {
        "line": 106,
        "fullcodeline": "off += 1+len;"
    },
    {
        "line": 113,
        "fullcodeline": "proto_tree_add_text (tree, tvb, off, 1,"
    },
    {
        "line": 118,
        "fullcodeline": "off++;"
    },
    {
        "line": 144,
        "fullcodeline": "proto_tree_add_text (tree, tvb, off, 1,"
    },
    {
        "line": 151,
        "fullcodeline": "off = tvb_len;"
    },
    {
        "line": 154,
        "fullcodeline": "if (peek & 0x80) { /* attrValue */"
    },
    {
        "line": 38,
        "fullcodeline": "return (off - offset);"
    },
    {
        "line": 45,
        "fullcodeline": "level, *codepage_attr, Indent (level), ent);"
    },
    {
        "line": 54,
        "fullcodeline": "level, *codepage_attr, Indent (level),"
    },
    {
        "line": 55,
        "fullcodeline": "tvb_format_text (tvb, off+1, len-1));"
    },
    {
        "line": 65,
        "fullcodeline": "level, *codepage_attr, Indent (level),"
    },
    {
        "line": 66,
        "fullcodeline": "tvb_format_text (tvb, str_tbl+idx, str_len-1));"
    },
    {
        "line": 78,
        "fullcodeline": "level, *codepage_attr, peek & 0x0f, Indent (level),"
    },
    {
        "line": 79,
        "fullcodeline": "tvb_format_text (tvb, off+1, len-1));"
    },
    {
        "line": 93,
        "fullcodeline": "level, *codepage_attr, peek & 0x0f, Indent (level),"
    },
    {
        "line": 104,
        "fullcodeline": "level, *codepage_attr, Indent (level),"
    },
    {
        "line": 105,
        "fullcodeline": "tvb_format_text (tvb, str_tbl+idx, str_len-1));"
    },
    {
        "line": 117,
        "fullcodeline": "level, *codepage_attr, peek & 0x0f, Indent (level));"
    },
    {
        "line": 121,
        "fullcodeline": "if (tvb_get_guint8 (tvb, 0)) { /* WBXML 1.x (x > 0) */"
    },
    {
        "line": 149,
        "fullcodeline": "val_to_str_ext (peek, &vals_wbxml1x_global_tokens_ext, \"(unknown 0x%x)\"));"
    },
    {
        "line": 155,
        "fullcodeline": "proto_tree_add_text (tree, tvb, off, 1,"
    },
    {
        "line": 161,
        "fullcodeline": "off++;"
    },
    {
        "line": 122,
        "fullcodeline": "idx = tvb_get_guintvar (tvb, off+1, &len);"
    },
    {
        "line": 123,
        "fullcodeline": "proto_tree_add_text (tree, tvb, off, 1 + len + idx,"
    },
    {
        "line": 128,
        "fullcodeline": "off += 1+len+idx;"
    },
    {
        "line": 159,
        "fullcodeline": "level, *codepage_attr, peek & 0x7f, Indent (level),"
    },
    {
        "line": 163,
        "fullcodeline": "proto_tree_add_text (tree, tvb, off, 1,"
    },
    {
        "line": 169,
        "fullcodeline": "off++;"
    },
    {
        "line": 37,
        "fullcodeline": "level, off - offset));"
    },
    {
        "line": 127,
        "fullcodeline": "level, *codepage_attr, Indent (level), idx);"
    },
    {
        "line": 130,
        "fullcodeline": "proto_tree_add_text (tree, tvb, off, 1,"
    },
    {
        "line": 136,
        "fullcodeline": "off = tvb_len;"
    },
    {
        "line": 167,
        "fullcodeline": "level, *codepage_attr, peek & 0x7f, Indent (level),"
    },
    {
        "line": 137,
        "fullcodeline": "DebugLog((\"ATTR: level = %u, Return: len = %u\\n\","
    },
    {
        "line": 139,
        "fullcodeline": "return (off - offset);"
    },
    {
        "line": 138,
        "fullcodeline": "level, off - offset));"
    }
]