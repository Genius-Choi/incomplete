[
    {
        "line": 5,
        "fullcodeline": "guint32     tvb_len             = tvb_reported_length (tvb);"
    },
    {
        "line": 6,
        "fullcodeline": "guint32     off                 = offset, last_off;"
    },
    {
        "line": 13,
        "fullcodeline": "guint8      tag_save_known      = 0;     /* Will contain peek & 0x3F (tag identity) */"
    },
    {
        "line": 14,
        "fullcodeline": "guint8      tag_new_known       = 0;     /* Will contain peek & 0x3F (tag identity) */"
    },
    {
        "line": 17,
        "fullcodeline": "char       *tag_save_buf        = NULL;  /* Will contain \"tag_0x%02X\" */"
    },
    {
        "line": 18,
        "fullcodeline": "char       *tag_new_buf         = NULL;  /* Will contain \"tag_0x%02X\" */"
    },
    {
        "line": 19,
        "fullcodeline": "guint8      parsing_tag_content = FALSE; /* Are we parsing content from a"
    },
    {
        "line": 24,
        "fullcodeline": "tag_save_literal = NULL;                 /* Prevents compiler warning */"
    },
    {
        "line": 26,
        "fullcodeline": "DebugLog((\"parse_wbxml_tag (level = %u, offset = %u)\\n\", *level, offset));"
    },
    {
        "line": 27,
        "fullcodeline": "last_off = off;"
    },
    {
        "line": 392,
        "fullcodeline": "DebugLog((\"STAG: level = %u, Return: len = %u (end of function body)\\n\","
    },
    {
        "line": 28,
        "fullcodeline": "while (off < tvb_len) {"
    },
    {
        "line": 394,
        "fullcodeline": "return (off - offset);"
    },
    {
        "line": 29,
        "fullcodeline": "peek = tvb_get_guint8 (tvb, off);"
    },
    {
        "line": 30,
        "fullcodeline": "DebugLog((\"STAG: (top of while) level = %3u, peek = 0x%02X, off = %u, tvb_len = %u\\n\", *level, peek, off, tvb_len));"
    },
    {
        "line": 390,
        "fullcodeline": "last_off = off;"
    },
    {
        "line": 31,
        "fullcodeline": "if ((peek & 0x3F) < 4) switch (peek) { /* Global tokens in state = STAG"
    },
    {
        "line": 387,
        "fullcodeline": "if (off < last_off) {"
    },
    {
        "line": 393,
        "fullcodeline": "*level, off - offset));"
    },
    {
        "line": 388,
        "fullcodeline": "THROW(ReportedBoundsError);"
    },
    {
        "line": 195,
        "fullcodeline": "tag_len = 0;"
    },
    {
        "line": 34,
        "fullcodeline": "*codepage_stag = tvb_get_guint8 (tvb, off+1);"
    },
    {
        "line": 35,
        "fullcodeline": "proto_tree_add_text (tree, tvb, off, 2,"
    },
    {
        "line": 40,
        "fullcodeline": "off += 2;"
    },
    {
        "line": 59,
        "fullcodeline": "(*level)--;"
    },
    {
        "line": 60,
        "fullcodeline": "off++;"
    },
    {
        "line": 62,
        "fullcodeline": "DebugLog((\"STAG: level = %u, Return: len = %u\\n\","
    },
    {
        "line": 66,
        "fullcodeline": "ent = tvb_get_guintvar (tvb, off+1, &len);"
    },
    {
        "line": 67,
        "fullcodeline": "proto_tree_add_text (tree, tvb, off, 1+len,"
    },
    {
        "line": 72,
        "fullcodeline": "off += 1+len;"
    },
    {
        "line": 75,
        "fullcodeline": "len = tvb_strsize (tvb, off+1);"
    },
    {
        "line": 76,
        "fullcodeline": "proto_tree_add_text (tree, tvb, off, 1+len,"
    },
    {
        "line": 82,
        "fullcodeline": "off += 1+len;"
    },
    {
        "line": 88,
        "fullcodeline": "len = tvb_strsize (tvb, off+1);"
    },
    {
        "line": 89,
        "fullcodeline": "proto_tree_add_text (tree, tvb, off, 1+len,"
    },
    {
        "line": 95,
        "fullcodeline": "off += 1+len;"
    },
    {
        "line": 98,
        "fullcodeline": "proto_tree_add_text (tree, tvb, off, 1,"
    },
    {
        "line": 103,
        "fullcodeline": "len = parse_wbxml_attribute_list (tree, tvb, off, str_tbl,"
    },
    {
        "line": 106,
        "fullcodeline": "off += len;"
    },
    {
        "line": 115,
        "fullcodeline": "proto_tree_add_text (tree, tvb, off-1, 1,"
    },
    {
        "line": 125,
        "fullcodeline": "idx = tvb_get_guintvar (tvb, off+1, &len);"
    },
    {
        "line": 126,
        "fullcodeline": "proto_tree_add_text (tree, tvb, off, 1+len,"
    },
    {
        "line": 132,
        "fullcodeline": "off += 1+len;"
    },
    {
        "line": 135,
        "fullcodeline": "idx = tvb_get_guintvar (tvb, off+1, &len);"
    },
    {
        "line": 136,
        "fullcodeline": "str_len = tvb_strsize (tvb, str_tbl+idx);"
    },
    {
        "line": 137,
        "fullcodeline": "proto_tree_add_text (tree, tvb, off, 1+len,"
    },
    {
        "line": 143,
        "fullcodeline": "off += 1+len;"
    },
    {
        "line": 149,
        "fullcodeline": "proto_tree_add_text (tree, tvb, off, 1,"
    },
    {
        "line": 154,
        "fullcodeline": "off++;"
    },
    {
        "line": 196,
        "fullcodeline": "if ((peek & 0x3F) == 4) { /* LITERAL */"
    },
    {
        "line": 212,
        "fullcodeline": "if (peek & 0x40) { /* Content present */"
    },
    {
        "line": 64,
        "fullcodeline": "return (off - offset);"
    },
    {
        "line": 71,
        "fullcodeline": "*level, *codepage_stag, Indent (*level), ent);"
    },
    {
        "line": 80,
        "fullcodeline": "*level, *codepage_stag, Indent(*level),"
    },
    {
        "line": 81,
        "fullcodeline": "tvb_format_text (tvb, off+1, len-1));"
    },
    {
        "line": 93,
        "fullcodeline": "*level, *codepage_stag, peek & 0x0f, Indent (*level),"
    },
    {
        "line": 94,
        "fullcodeline": "tvb_format_text (tvb, off+1, len-1));"
    },
    {
        "line": 102,
        "fullcodeline": "*level, *codepage_stag, Indent (*level));"
    },
    {
        "line": 107,
        "fullcodeline": "if (off >= tvb_len) {"
    },
    {
        "line": 119,
        "fullcodeline": "*level, *codepage_stag, Indent (*level));"
    },
    {
        "line": 130,
        "fullcodeline": "*level, *codepage_stag, peek & 0x0f, Indent (*level),"
    },
    {
        "line": 141,
        "fullcodeline": "*level, *codepage_stag, Indent (*level),"
    },
    {
        "line": 142,
        "fullcodeline": "tvb_format_text (tvb, str_tbl+idx, str_len-1));"
    },
    {
        "line": 153,
        "fullcodeline": "*level, *codepage_stag, peek & 0x0f, Indent (*level));"
    },
    {
        "line": 157,
        "fullcodeline": "if (tvb_get_guint8 (tvb, 0)) { /* WBXML 1.x (x > 0) */"
    },
    {
        "line": 197,
        "fullcodeline": "DebugLog((\"STAG: LITERAL tag (peek = 0x%02X, off = %u)\""
    },
    {
        "line": 199,
        "fullcodeline": "idx = tvb_get_guintvar (tvb, off+1, &tag_len);"
    },
    {
        "line": 200,
        "fullcodeline": "str_len = tvb_strsize (tvb, str_tbl+idx);"
    },
    {
        "line": 201,
        "fullcodeline": "tag_new_literal = (const gchar*)tvb_get_ptr (tvb, str_tbl+idx, str_len);"
    },
    {
        "line": 202,
        "fullcodeline": "tag_new_known = 0; /* invalidate known tag_new */"
    },
    {
        "line": 44,
        "fullcodeline": "proto_tree_add_text (tree, tvb, off, 1,"
    },
    {
        "line": 108,
        "fullcodeline": "DebugLog((\"STAG: level = %u, ThrowException: len = %u (short frame)\\n\","
    },
    {
        "line": 113,
        "fullcodeline": "THROW(ReportedBoundsError);"
    },
    {
        "line": 158,
        "fullcodeline": "idx = tvb_get_guintvar (tvb, off+1, &len);"
    },
    {
        "line": 159,
        "fullcodeline": "proto_tree_add_text (tree, tvb, off, 1 + len + idx,"
    },
    {
        "line": 164,
        "fullcodeline": "off += 1+len+idx;"
    },
    {
        "line": 204,
        "fullcodeline": "tag_new_known = peek & 0x3F;"
    },
    {
        "line": 205,
        "fullcodeline": "tag_new_buf=wmem_strdup_printf(wmem_packet_scope(), \"Tag_0x%02X\","
    },
    {
        "line": 207,
        "fullcodeline": "tag_new_literal = tag_new_buf;"
    },
    {
        "line": 306,
        "fullcodeline": "DebugLog((\"<Tag/> in Tag - No recursion! (off = %u)\\n\", off));"
    },
    {
        "line": 307,
        "fullcodeline": "(*level)++;"
    },
    {
        "line": 383,
        "fullcodeline": "(*level)--;"
    },
    {
        "line": 49,
        "fullcodeline": "Indent (*level),"
    },
    {
        "line": 52,
        "fullcodeline": "proto_tree_add_text (tree, tvb, off, 1,"
    },
    {
        "line": 63,
        "fullcodeline": "*level, off - offset));"
    },
    {
        "line": 163,
        "fullcodeline": "*level, *codepage_stag, Indent (*level), idx);"
    },
    {
        "line": 166,
        "fullcodeline": "proto_tree_add_text (tree, tvb, off, 1,"
    },
    {
        "line": 172,
        "fullcodeline": "off = tvb_len;"
    },
    {
        "line": 173,
        "fullcodeline": "DebugLog((\"STAG: level = %u, Return: len = %u\\n\","
    },
    {
        "line": 219,
        "fullcodeline": "DebugLog((\"STAG: Tag in Tag - RECURSE! (off = %u)\\n\", off));"
    },
    {
        "line": 222,
        "fullcodeline": "(*level)++;"
    },
    {
        "line": 223,
        "fullcodeline": "len = parse_wbxml_tag (tree, tvb, off, str_tbl, level,"
    },
    {
        "line": 225,
        "fullcodeline": "off += len;"
    },
    {
        "line": 308,
        "fullcodeline": "if (peek & 0x80) { /* No Content, Attribute list present */"
    },
    {
        "line": 56,
        "fullcodeline": "*level, *codepage_stag, Indent (*level),"
    },
    {
        "line": 57,
        "fullcodeline": "tag_save_literal ? tag_save_literal : \"\");"
    },
    {
        "line": 175,
        "fullcodeline": "return (off - offset);"
    },
    {
        "line": 301,
        "fullcodeline": "parsing_tag_content = TRUE;"
    },
    {
        "line": 302,
        "fullcodeline": "DebugLog((\"Tag in Tag - No recursion this time! \""
    },
    {
        "line": 109,
        "fullcodeline": "*level, off - offset));"
    },
    {
        "line": 228,
        "fullcodeline": "if ((peek & 0x3F) == 4) { /* Literal tag */"
    },
    {
        "line": 239,
        "fullcodeline": "if (peek & 0x80) { /* Content and Attribute list present */"
    },
    {
        "line": 174,
        "fullcodeline": "*level, off - offset));"
    },
    {
        "line": 229,
        "fullcodeline": "tag_save_literal = tag_new_literal;"
    },
    {
        "line": 230,
        "fullcodeline": "tag_save_known = 0;"
    },
    {
        "line": 258,
        "fullcodeline": "len = parse_wbxml_attribute_list (tree, tvb,"
    },
    {
        "line": 261,
        "fullcodeline": "off += len;"
    },
    {
        "line": 271,
        "fullcodeline": "proto_tree_add_text (tree, tvb, off-1, 1,"
    },
    {
        "line": 310,
        "fullcodeline": "proto_tree_add_text (tree, tvb, off, 1,"
    },
    {
        "line": 317,
        "fullcodeline": "off++;"
    },
    {
        "line": 318,
        "fullcodeline": "len = parse_wbxml_attribute_list (tree, tvb,"
    },
    {
        "line": 321,
        "fullcodeline": "off += len;"
    },
    {
        "line": 331,
        "fullcodeline": "proto_tree_add_text (tree, tvb, off-1, 1,"
    },
    {
        "line": 232,
        "fullcodeline": "tag_save_known = tag_new_known;"
    },
    {
        "line": 233,
        "fullcodeline": "tag_save_buf=wmem_strdup_printf(wmem_packet_scope(), \"Tag_0x%02X\","
    },
    {
        "line": 235,
        "fullcodeline": "tag_save_literal = tag_save_buf;"
    },
    {
        "line": 262,
        "fullcodeline": "if (off >= tvb_len) {"
    },
    {
        "line": 275,
        "fullcodeline": "*level, *codepage_stag, Indent (*level));"
    },
    {
        "line": 315,
        "fullcodeline": "Indent (*level), tag_new_literal);"
    },
    {
        "line": 322,
        "fullcodeline": "if (off >= tvb_len) {"
    },
    {
        "line": 335,
        "fullcodeline": "*level, *codepage_stag, Indent (*level));"
    },
    {
        "line": 337,
        "fullcodeline": "proto_tree_add_text (tree, tvb, off, 1,"
    },
    {
        "line": 343,
        "fullcodeline": "off += 1 + tag_len;"
    },
    {
        "line": 344,
        "fullcodeline": "len = parse_wbxml_attribute_list (tree, tvb,"
    },
    {
        "line": 347,
        "fullcodeline": "off += len;"
    },
    {
        "line": 357,
        "fullcodeline": "proto_tree_add_text (tree, tvb, off-1, 1,"
    },
    {
        "line": 365,
        "fullcodeline": "proto_tree_add_text (tree, tvb, off, 1,"
    },
    {
        "line": 372,
        "fullcodeline": "off++;"
    },
    {
        "line": 241,
        "fullcodeline": "proto_tree_add_text (tree, tvb, off, 1,"
    },
    {
        "line": 248,
        "fullcodeline": "off++;"
    },
    {
        "line": 263,
        "fullcodeline": "DebugLog((\"STAG: level = %u, ThrowException: \""
    },
    {
        "line": 269,
        "fullcodeline": "THROW(ReportedBoundsError);"
    },
    {
        "line": 323,
        "fullcodeline": "DebugLog((\"STAG: level = %u, ThrowException: \""
    },
    {
        "line": 329,
        "fullcodeline": "THROW(ReportedBoundsError);"
    },
    {
        "line": 341,
        "fullcodeline": "*level, *codepage_stag, Indent (*level),"
    },
    {
        "line": 348,
        "fullcodeline": "if (off >= tvb_len) {"
    },
    {
        "line": 361,
        "fullcodeline": "*level, *codepage_stag, Indent (*level));"
    },
    {
        "line": 370,
        "fullcodeline": "Indent (*level), tag_new_literal);"
    },
    {
        "line": 374,
        "fullcodeline": "proto_tree_add_text (tree, tvb, off, 1,"
    },
    {
        "line": 380,
        "fullcodeline": "off += 1 + tag_len;"
    },
    {
        "line": 246,
        "fullcodeline": "Indent (*level), tag_new_literal);"
    },
    {
        "line": 250,
        "fullcodeline": "proto_tree_add_text (tree, tvb, off, 1,"
    },
    {
        "line": 256,
        "fullcodeline": "off += 1 + tag_len;"
    },
    {
        "line": 278,
        "fullcodeline": "proto_tree_add_text (tree, tvb, off, 1,"
    },
    {
        "line": 285,
        "fullcodeline": "off++;"
    },
    {
        "line": 349,
        "fullcodeline": "DebugLog((\"STAG: level = %u, ThrowException: \""
    },
    {
        "line": 355,
        "fullcodeline": "THROW(ReportedBoundsError);"
    },
    {
        "line": 378,
        "fullcodeline": "*level, *codepage_stag, Indent (*level),"
    },
    {
        "line": 254,
        "fullcodeline": "*level, *codepage_stag, Indent (*level),"
    },
    {
        "line": 283,
        "fullcodeline": "Indent (*level), tag_new_literal);"
    },
    {
        "line": 287,
        "fullcodeline": "proto_tree_add_text (tree, tvb, off, 1,"
    },
    {
        "line": 293,
        "fullcodeline": "off += 1 + tag_len;"
    },
    {
        "line": 265,
        "fullcodeline": "*level, off - offset));"
    },
    {
        "line": 291,
        "fullcodeline": "*level, *codepage_stag, Indent (*level),"
    },
    {
        "line": 325,
        "fullcodeline": "*level, off - offset));"
    },
    {
        "line": 351,
        "fullcodeline": "*level, off - offset));"
    }
]