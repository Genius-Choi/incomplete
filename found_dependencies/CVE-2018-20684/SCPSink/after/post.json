[
    {
        "line": 16,
        "fullcodeline": "bool SkipConfirmed = false;"
    },
    {
        "line": 17,
        "fullcodeline": "bool Initialized = (Level > 0);"
    },
    {
        "line": 19,
        "fullcodeline": "FileData.SetTime = 0;"
    },
    {
        "line": 21,
        "fullcodeline": "FSecureShell->SendNull();"
    },
    {
        "line": 23,
        "fullcodeline": "while (!OperationProgress->Cancel)"
    },
    {
        "line": 32,
        "fullcodeline": "UnicodeString FullFileName = FileName;"
    },
    {
        "line": 26,
        "fullcodeline": "if (FileData.SetTime) FileData.SetTime--;"
    },
    {
        "line": 37,
        "fullcodeline": "UnicodeString Line = FSecureShell->ReceiveLine();"
    },
    {
        "line": 39,
        "fullcodeline": "if (Line.Length() == 0) FTerminal->FatalError(NULL, LoadStr(SCP_EMPTY_LINE));"
    },
    {
        "line": 41,
        "fullcodeline": "if (IsLastLine(Line))"
    },
    {
        "line": 409,
        "fullcodeline": "Success = false;"
    },
    {
        "line": 413,
        "fullcodeline": "SCPSendError(E.Message, false);"
    },
    {
        "line": 414,
        "fullcodeline": "Success = false;"
    },
    {
        "line": 45,
        "fullcodeline": "OperationProgress->SetCancel(csRemoteAbort);"
    },
    {
        "line": 47,
        "fullcodeline": "FSecureShell->ClearStdError();"
    },
    {
        "line": 396,
        "fullcodeline": "if (!SkipConfirmed)"
    },
    {
        "line": 415,
        "fullcodeline": "if (!FTerminal->HandleException(&E)) throw;"
    },
    {
        "line": 75,
        "fullcodeline": "Initialized = true;"
    },
    {
        "line": 78,
        "fullcodeline": "wchar_t Ctrl = Line[1];"
    },
    {
        "line": 79,
        "fullcodeline": "Line.Delete(1, 1);"
    },
    {
        "line": 119,
        "fullcodeline": "MaskParams.Modification = FileData.Modification;"
    },
    {
        "line": 159,
        "fullcodeline": "bool Dir = (Ctrl == L'D');"
    },
    {
        "line": 160,
        "fullcodeline": "UnicodeString BaseFileName = FTerminal->GetBaseFileName(FullFileName);"
    },
    {
        "line": 176,
        "fullcodeline": "FTerminal->LogFileDetails(FileName, FileData.Modification, MaskParams.Size);"
    },
    {
        "line": 178,
        "fullcodeline": "UnicodeString DestFileNameOnly ="
    },
    {
        "line": 182,
        "fullcodeline": "UnicodeString DestFileName ="
    },
    {
        "line": 185,
        "fullcodeline": "FileData.Attrs = FileGetAttrFix(ApiPath(DestFileName));"
    },
    {
        "line": 187,
        "fullcodeline": "FileData.Exists = (FileData.Attrs != -1);"
    },
    {
        "line": 398,
        "fullcodeline": "TSuspendFileOperationProgress Suspend(OperationProgress);"
    },
    {
        "line": 399,
        "fullcodeline": "TQueryParams Params(qpAllowContinueOnError);"
    },
    {
        "line": 405,
        "fullcodeline": "FTerminal->Log->AddException(&E);"
    },
    {
        "line": 53,
        "fullcodeline": "ReadCommandOutput(coExpectNoOutput | coRaiseExcept |"
    },
    {
        "line": 161,
        "fullcodeline": "if (!CopyParam->AllowTransfer(BaseFileName, osRemote, Dir, MaskParams, IsUnixHiddenFile(BaseFileName)))"
    },
    {
        "line": 169,
        "fullcodeline": "if (CopyParam->SkipTransfer(FullFileName, Dir))"
    },
    {
        "line": 179,
        "fullcodeline": "FTerminal->ChangeFileName("
    },
    {
        "line": 183,
        "fullcodeline": "IncludeTrailingBackslash(TargetDir) + DestFileNameOnly;"
    },
    {
        "line": 400,
        "fullcodeline": "if (FTerminal->QueryUserException(FMTLOAD(COPY_ERROR, (FullFileName)),"
    },
    {
        "line": 55,
        "fullcodeline": "if (!Initialized)"
    },
    {
        "line": 88,
        "fullcodeline": "FTerminal->TerminalError(Line);"
    },
    {
        "line": 92,
        "fullcodeline": "FSecureShell->SendNull();"
    },
    {
        "line": 115,
        "fullcodeline": "FTerminal->FatalError(NULL, FMTLOAD(SCP_INVALID_CONTROL_RECORD, (Ctrl, Line)));"
    },
    {
        "line": 124,
        "fullcodeline": "FileData.RemoteRights.Octal = CutToChar(Line, L' ', True);"
    },
    {
        "line": 126,
        "fullcodeline": "__int64 TSize = StrToInt64(CutToChar(Line, L' ', False).TrimRight());"
    },
    {
        "line": 127,
        "fullcodeline": "MaskParams.Size = TSize;"
    },
    {
        "line": 130,
        "fullcodeline": "UnicodeString OnlyFileName = UnixExtractFileName(Line);"
    },
    {
        "line": 140,
        "fullcodeline": "FullFileName = SourceDir + OnlyFileName;"
    },
    {
        "line": 141,
        "fullcodeline": "OperationProgress->SetFile(FullFileName);"
    },
    {
        "line": 142,
        "fullcodeline": "OperationProgress->SetTransferSize(TSize);"
    },
    {
        "line": 163,
        "fullcodeline": "FTerminal->LogEvent(FORMAT(L\"File \\\"%s\\\" excluded from transfer\","
    },
    {
        "line": 165,
        "fullcodeline": "SkipConfirmed = true;"
    },
    {
        "line": 166,
        "fullcodeline": "SCPError(L\"\", false);"
    },
    {
        "line": 171,
        "fullcodeline": "SkipConfirmed = true;"
    },
    {
        "line": 172,
        "fullcodeline": "SCPError(L\"\", false);"
    },
    {
        "line": 173,
        "fullcodeline": "OperationProgress->AddSkippedFileSize(MaskParams.Size);"
    },
    {
        "line": 181,
        "fullcodeline": "Level == 0);"
    },
    {
        "line": 204,
        "fullcodeline": "UnicodeString FullFileName = SourceDir + OperationProgress->FileName;"
    },
    {
        "line": 205,
        "fullcodeline": "SCPSink(DestFileName, FullFileName, UnixIncludeTrailingBackslash(FullFileName),"
    },
    {
        "line": 403,
        "fullcodeline": "OperationProgress->SetCancel(csCancel);"
    },
    {
        "line": 62,
        "fullcodeline": "if (!Initialized && FTerminal->Active)"
    },
    {
        "line": 84,
        "fullcodeline": "throw EScpFileSkipped(NULL, FMTLOAD(REMOTE_ERROR, (Line)));"
    },
    {
        "line": 97,
        "fullcodeline": "if (swscanf(Line.c_str(), L\"%ld %*d %ld %*d\",  &MTime, &ATime) == 2)"
    },
    {
        "line": 131,
        "fullcodeline": "if (Line != OnlyFileName)"
    },
    {
        "line": 135,
        "fullcodeline": "if ((Level == 0) && (OnlyFileName != UnixExtractFileName(FileName)))"
    },
    {
        "line": 150,
        "fullcodeline": "SCPError(LoadStr(SCP_ILLEGAL_FILE_DESCRIPTOR), false);"
    },
    {
        "line": 156,
        "fullcodeline": "throw ESkipFile(NULL, MainInstructions(LoadStr(USER_TERMINATED)));"
    },
    {
        "line": 190,
        "fullcodeline": "if (FileData.Exists && !(FileData.Attrs & faDirectory))"
    },
    {
        "line": 195,
        "fullcodeline": "if (!FileData.Exists)"
    },
    {
        "line": 206,
        "fullcodeline": "CopyParam, Success, OperationProgress, Params, Level + 1);"
    },
    {
        "line": 401,
        "fullcodeline": "&E, qaOK | qaAbort, &Params, qtError) == qaAbort)"
    },
    {
        "line": 57,
        "fullcodeline": "throw Exception(L\"\");"
    },
    {
        "line": 64,
        "fullcodeline": "FTerminal->TerminalError(&E, LoadStr(SCP_INIT_ERROR));"
    },
    {
        "line": 99,
        "fullcodeline": "FileData.Modification = UnixToDateTime(MTime, FTerminal->SessionData->DSTMode);"
    },
    {
        "line": 100,
        "fullcodeline": "FSecureShell->SendNull();"
    },
    {
        "line": 102,
        "fullcodeline": "FileData.SetTime = 2;"
    },
    {
        "line": 133,
        "fullcodeline": "FTerminal->LogEvent(FORMAT(L\"Warning: Remote host set a compound pathname '%s'\", (Line)));"
    },
    {
        "line": 137,
        "fullcodeline": "SCPError(LoadStr(UNREQUESTED_FILE), False);"
    },
    {
        "line": 147,
        "fullcodeline": "TSuspendFileOperationProgress Suspend(OperationProgress);"
    },
    {
        "line": 148,
        "fullcodeline": "FTerminal->Log->AddException(&E);"
    },
    {
        "line": 192,
        "fullcodeline": "SCPError(FMTLOAD(NOT_DIRECTORY_ERROR, (DestFileName)), false);"
    },
    {
        "line": 201,
        "fullcodeline": "FILE_OPERATION_LOOP_END(FMTLOAD(CREATE_DIR_ERROR, (DestFileName)));"
    },
    {
        "line": 209,
        "fullcodeline": "else if (Ctrl == L'C')"
    },
    {
        "line": 107,
        "fullcodeline": "SCPError(LoadStr(SCP_ILLEGAL_TIME_FORMAT), False);"
    },
    {
        "line": 211,
        "fullcodeline": "TDownloadSessionAction Action(FTerminal->ActionLog);"
    },
    {
        "line": 212,
        "fullcodeline": "Action.FileName(FTerminal->AbsolutePath(FullFileName, true));"
    },
    {
        "line": 380,
        "fullcodeline": "int NewAttrs = CopyParam->LocalFileAttrs(FileData.RemoteRights);"
    },
    {
        "line": 390,
        "fullcodeline": "FTerminal->LogFileDone(OperationProgress, DestFileName);"
    },
    {
        "line": 379,
        "fullcodeline": "if (FileData.Attrs == -1) FileData.Attrs = faArchive;"
    },
    {
        "line": 381,
        "fullcodeline": "if ((NewAttrs & FileData.Attrs) != NewAttrs)"
    },
    {
        "line": 216,
        "fullcodeline": "HANDLE File = NULL;"
    },
    {
        "line": 217,
        "fullcodeline": "TStream * FileStream = NULL;"
    },
    {
        "line": 387,
        "fullcodeline": "FILE_OPERATION_LOOP_END(FMTLOAD(CANT_SET_ATTRS, (DestFileName)));"
    },
    {
        "line": 370,
        "fullcodeline": "Action.Cancel();"
    },
    {
        "line": 374,
        "fullcodeline": "FTerminal->RollbackAction(Action, OperationProgress, &E);"
    }
]