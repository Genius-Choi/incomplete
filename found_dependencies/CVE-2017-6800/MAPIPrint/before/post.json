[
    {
        "line": 11,
        "fullcodeline": "for (j = 0; j < p->count; j++) {"
    },
    {
        "line": 13,
        "fullcodeline": "printf(\"   #%i: Type: [\", j);"
    },
    {
        "line": 53,
        "fullcodeline": "printf(\"]  Code: [\");"
    },
    {
        "line": 68,
        "fullcodeline": "printf(\"]\\n\");"
    },
    {
        "line": 14,
        "fullcodeline": "switch (PROP_TYPE(mapi->id)) {"
    },
    {
        "line": 54,
        "fullcodeline": "if (mapi->custom == 1) {"
    },
    {
        "line": 69,
        "fullcodeline": "if (mapi->namedproperty > 0) {"
    },
    {
        "line": 74,
        "fullcodeline": "for (i = 0; i < mapi->count; i++) {"
    },
    {
        "line": 16,
        "fullcodeline": "printf(\"  NONE   \"); break;"
    },
    {
        "line": 18,
        "fullcodeline": "printf(\"  NULL   \"); break;"
    },
    {
        "line": 20,
        "fullcodeline": "printf(\"   I2    \"); break;"
    },
    {
        "line": 22,
        "fullcodeline": "printf(\"  LONG   \"); break;"
    },
    {
        "line": 24,
        "fullcodeline": "printf(\"   R4    \"); break;"
    },
    {
        "line": 26,
        "fullcodeline": "printf(\" DOUBLE  \"); break;"
    },
    {
        "line": 28,
        "fullcodeline": "printf(\"CURRENCY \"); break;"
    },
    {
        "line": 30,
        "fullcodeline": "printf(\"APP TIME \"); break;"
    },
    {
        "line": 32,
        "fullcodeline": "printf(\"  ERROR  \"); break;"
    },
    {
        "line": 34,
        "fullcodeline": "printf(\" BOOLEAN \"); break;"
    },
    {
        "line": 36,
        "fullcodeline": "printf(\" OBJECT  \"); break;"
    },
    {
        "line": 38,
        "fullcodeline": "printf(\"   I8    \"); break;"
    },
    {
        "line": 40,
        "fullcodeline": "printf(\" STRING8 \"); break;"
    },
    {
        "line": 42,
        "fullcodeline": "printf(\" UNICODE \"); break;"
    },
    {
        "line": 44,
        "fullcodeline": "printf(\"SYS TIME \"); break;"
    },
    {
        "line": 46,
        "fullcodeline": "printf(\"OLE GUID \"); break;"
    },
    {
        "line": 48,
        "fullcodeline": "printf(\" BINARY  \"); break;"
    },
    {
        "line": 50,
        "fullcodeline": "printf(\"<%x>\", PROP_TYPE(mapi->id)); break;"
    },
    {
        "line": 55,
        "fullcodeline": "printf(\"UD:x%04x\", PROP_ID(mapi->id));"
    },
    {
        "line": 81,
        "fullcodeline": "printf(\"Size: %i\", mapidata->size);"
    },
    {
        "line": 57,
        "fullcodeline": "found = 0;"
    },
    {
        "line": 70,
        "fullcodeline": "for (i = 0; i < mapi->namedproperty; i++) {"
    },
    {
        "line": 76,
        "fullcodeline": "if (mapi->count > 1) {"
    },
    {
        "line": 82,
        "fullcodeline": "switch (PROP_TYPE(mapi->id)) {"
    },
    {
        "line": 58,
        "fullcodeline": "for (index = 0; index < sizeof(MPList) / sizeof(MAPIPropertyTagList); index++) {"
    },
    {
        "line": 64,
        "fullcodeline": "if (found == 0) {"
    },
    {
        "line": 71,
        "fullcodeline": "printf(\"    Name: %s\\n\", mapi->propnames[i].data);"
    },
    {
        "line": 77,
        "fullcodeline": "printf(\"    [%i/%u] \", i, mapi->count);"
    },
    {
        "line": 84,
        "fullcodeline": "MAPISysTimetoDTR(mapidata->data, &thedate);"
    },
    {
        "line": 85,
        "fullcodeline": "printf(\"    Value: \");"
    },
    {
        "line": 87,
        "fullcodeline": "TNEFPrintDate(thedate);"
    },
    {
        "line": 88,
        "fullcodeline": "printf(\" [HEX: \");"
    },
    {
        "line": 92,
        "fullcodeline": "printf(\"] (%llu)\\n\", ddword_tmp);"
    },
    {
        "line": 95,
        "fullcodeline": "printf(\"    Value: %li\\n\", *((long*)mapidata->data));"
    },
    {
        "line": 98,
        "fullcodeline": "printf(\"    Value: %hi\\n\", *((short int*)mapidata->data));"
    },
    {
        "line": 108,
        "fullcodeline": "printf(\"\\n\");"
    },
    {
        "line": 134,
        "fullcodeline": "printf(\"    Value: [%s]\\n\", mapidata->data);"
    },
    {
        "line": 149,
        "fullcodeline": "printf(\"    Value: \");"
    },
    {
        "line": 150,
        "fullcodeline": "printf(\"[HEX: \");"
    },
    {
        "line": 154,
        "fullcodeline": "printf(\"]\\n\");"
    },
    {
        "line": 157,
        "fullcodeline": "printf(\"    Value: [%s]\\n\", mapidata->data);"
    },
    {
        "line": 65,
        "fullcodeline": "printf(\"0x%04x\", PROP_ID(mapi->id));"
    },
    {
        "line": 79,
        "fullcodeline": "printf(\"    \");"
    },
    {
        "line": 89,
        "fullcodeline": "for (x = 0; x < sizeof(ddword_tmp); x++) {"
    },
    {
        "line": 101,
        "fullcodeline": "if (mapi->data->data[0] != 0) {"
    },
    {
        "line": 111,
        "fullcodeline": "if (IsCompressedRTF(mapidata) == 1) {"
    },
    {
        "line": 135,
        "fullcodeline": "if (strlen((char*)mapidata->data) != mapidata->size - 1) {"
    },
    {
        "line": 151,
        "fullcodeline": "for(x=0; x< 16; x++) {"
    },
    {
        "line": 59,
        "fullcodeline": "if ((MPList[index].id == PROP_ID(mapi->id)) && (found == 0)) {"
    },
    {
        "line": 86,
        "fullcodeline": "ddword_tmp = *((DDWORD *)mapidata->data);"
    },
    {
        "line": 90,
        "fullcodeline": "printf(\" %02x\", (BYTE)mapidata->data[x]);"
    },
    {
        "line": 102,
        "fullcodeline": "printf(\"    Value: True\\n\");"
    },
    {
        "line": 112,
        "fullcodeline": "printf(\"    Detected Compressed RTF. \");"
    },
    {
        "line": 113,
        "fullcodeline": "printf(\"Decompressed text follows\\n\");"
    },
    {
        "line": 114,
        "fullcodeline": "printf(\"-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\\n\");"
    },
    {
        "line": 119,
        "fullcodeline": "printf(\"-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\\n\");"
    },
    {
        "line": 136,
        "fullcodeline": "printf(\"Detected Hidden data: [\");"
    },
    {
        "line": 145,
        "fullcodeline": "printf(\"]\\n\");"
    },
    {
        "line": 152,
        "fullcodeline": "printf(\" %02x\", (BYTE)mapidata->data[x]);"
    },
    {
        "line": 60,
        "fullcodeline": "printf(\"%s\", MPList[index].name);"
    },
    {
        "line": 61,
        "fullcodeline": "found = 1;"
    },
    {
        "line": 104,
        "fullcodeline": "printf(\"    Value: False\\n\");"
    },
    {
        "line": 115,
        "fullcodeline": "if ((vlTemp.data = (BYTE*)DecompressRTF(mapidata, &(vlTemp.size))) != NULL) {"
    },
    {
        "line": 121,
        "fullcodeline": "printf(\"    Value: [\");"
    },
    {
        "line": 130,
        "fullcodeline": "printf(\"]\\n\");"
    },
    {
        "line": 137,
        "fullcodeline": "for (h = 0; h < mapidata->size; h++) {"
    },
    {
        "line": 116,
        "fullcodeline": "printf(\"%s\\n\", vlTemp.data);"
    },
    {
        "line": 117,
        "fullcodeline": "free(vlTemp.data);"
    },
    {
        "line": 122,
        "fullcodeline": "for (h = 0; h < mapidata->size; h++) {"
    },
    {
        "line": 138,
        "fullcodeline": "if (isprint(mapidata->data[h])) {"
    },
    {
        "line": 123,
        "fullcodeline": "if (isprint(mapidata->data[h])) {"
    },
    {
        "line": 139,
        "fullcodeline": "printf(\"%c\", mapidata->data[h]);"
    },
    {
        "line": 124,
        "fullcodeline": "printf(\"%c\", mapidata->data[h]);"
    },
    {
        "line": 141,
        "fullcodeline": "printf(\".\");"
    },
    {
        "line": 126,
        "fullcodeline": "printf(\".\");"
    }
]