[
    {
        "line": 4,
        "fullcodeline": "head.delete_if { |_, value| value.nil? }"
    },
    {
        "line": 5,
        "fullcodeline": "uri = base_uri + uri"
    },
    {
        "line": 12,
        "fullcodeline": "self.validate_uri!(uri)"
    },
    {
        "line": 13,
        "fullcodeline": "request = METHODS[method].new uri.request_uri, head"
    },
    {
        "line": 14,
        "fullcodeline": "request.basic_auth(*[Recurly.api_key, nil].flatten[0, 2])"
    },
    {
        "line": 28,
        "fullcodeline": "http = ::Net::HTTP.new uri.host, uri.port"
    },
    {
        "line": 29,
        "fullcodeline": "http.use_ssl = uri.scheme == 'https'"
    },
    {
        "line": 30,
        "fullcodeline": "net_http.each_pair { |key, value| http.send \"#{key}=\", value }"
    },
    {
        "line": 43,
        "fullcodeline": "response = http.start { http.request request }"
    },
    {
        "line": 6,
        "fullcodeline": "if options[:params] && !options[:params].empty?"
    },
    {
        "line": 65,
        "fullcodeline": "case code"
    },
    {
        "line": 3,
        "fullcodeline": "head.update options[:head] if options[:head]"
    },
    {
        "line": 7,
        "fullcodeline": "pairs = options[:params].map { |key, value|"
    },
    {
        "line": 10,
        "fullcodeline": "uri += \"?#{pairs.join '&'}\""
    },
    {
        "line": 16,
        "fullcodeline": "request['Content-Type'] = content_type"
    },
    {
        "line": 17,
        "fullcodeline": "request.body = options[:body]"
    },
    {
        "line": 20,
        "fullcodeline": "request['If-None-Match'] = options[:etag]"
    },
    {
        "line": 26,
        "fullcodeline": "request['Accept-Language'] = options[:locale]"
    },
    {
        "line": 33,
        "fullcodeline": "Recurly.log :info, \"===> %s %s\" % [request.method, uri]"
    },
    {
        "line": 34,
        "fullcodeline": "headers = request.to_hash"
    },
    {
        "line": 36,
        "fullcodeline": "Recurly.log :debug, headers.inspect"
    },
    {
        "line": 44,
        "fullcodeline": "code = response.code.to_i"
    },
    {
        "line": 47,
        "fullcodeline": "latency = (Time.now - start_time) * 1_000"
    },
    {
        "line": 54,
        "fullcodeline": "Recurly.log level, \"<=== %d %s (%.1fms)\" % ["
    },
    {
        "line": 61,
        "fullcodeline": "Recurly.log :debug, response.to_hash.inspect"
    },
    {
        "line": 66,
        "fullcodeline": "when 200...300 then response"
    },
    {
        "line": 37,
        "fullcodeline": "if request.body && !request.body.empty?"
    },
    {
        "line": 35,
        "fullcodeline": "headers['authorization'] &&= ['Basic [FILTERED]']"
    },
    {
        "line": 38,
        "fullcodeline": "Recurly.log :debug, XML.filter(request.body)"
    },
    {
        "line": 48,
        "fullcodeline": "level = case code"
    },
    {
        "line": 62,
        "fullcodeline": "Recurly.log :debug, response.body if response.body"
    },
    {
        "line": 49,
        "fullcodeline": "when 200...300 then :info"
    },
    {
        "line": 56,
        "fullcodeline": "response.class.name[9, response.class.name.length].gsub("
    },
    {
        "line": 67,
        "fullcodeline": "else                raise ERRORS[code].new request, response"
    },
    {
        "line": 50,
        "fullcodeline": "when 300...400 then :warn"
    },
    {
        "line": 51,
        "fullcodeline": "when 400...500 then :error"
    },
    {
        "line": 52,
        "fullcodeline": "else                :fatal"
    }
]