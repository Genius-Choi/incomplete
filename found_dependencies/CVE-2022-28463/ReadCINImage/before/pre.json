[
    {
        "line": 7,
        "fullcodeline": "property[MaxTextExtent];"
    },
    {
        "line": 42,
        "fullcodeline": "magick[4],"
    },
    {
        "line": 48,
        "fullcodeline": "assert(image_info != (const ImageInfo *) NULL);"
    },
    {
        "line": 49,
        "fullcodeline": "assert(image_info->signature == MagickCoreSignature);"
    },
    {
        "line": 53,
        "fullcodeline": "assert(exception != (ExceptionInfo *) NULL);"
    },
    {
        "line": 54,
        "fullcodeline": "assert(exception->signature == MagickCoreSignature);"
    },
    {
        "line": 55,
        "fullcodeline": "image=AcquireImage(image_info);"
    },
    {
        "line": 56,
        "fullcodeline": "status=OpenBlob(image_info,image,ReadBinaryBlobMode,exception);"
    },
    {
        "line": 65,
        "fullcodeline": "offset=0;"
    },
    {
        "line": 66,
        "fullcodeline": "count=ReadBlob(image,4,magick);"
    },
    {
        "line": 67,
        "fullcodeline": "offset+=count;"
    },
    {
        "line": 72,
        "fullcodeline": "image->endian=(magick[0] == 0x80) && (magick[1] == 0x2a) &&"
    },
    {
        "line": 74,
        "fullcodeline": "cin.file.image_offset=ReadBlobLong(image);"
    },
    {
        "line": 75,
        "fullcodeline": "offset+=4;"
    },
    {
        "line": 77,
        "fullcodeline": "offset+=4;"
    },
    {
        "line": 79,
        "fullcodeline": "offset+=4;"
    },
    {
        "line": 80,
        "fullcodeline": "cin.file.user_length=ReadBlobLong(image);"
    },
    {
        "line": 81,
        "fullcodeline": "offset+=4;"
    },
    {
        "line": 83,
        "fullcodeline": "offset+=4;"
    },
    {
        "line": 84,
        "fullcodeline": "offset+=ReadBlob(image,sizeof(cin.file.version),(unsigned char *)"
    },
    {
        "line": 88,
        "fullcodeline": "offset+=ReadBlob(image,sizeof(cin.file.filename),(unsigned char *)"
    },
    {
        "line": 92,
        "fullcodeline": "offset+=ReadBlob(image,sizeof(cin.file.create_date),(unsigned char *)"
    },
    {
        "line": 97,
        "fullcodeline": "offset+=ReadBlob(image,sizeof(cin.file.create_time),(unsigned char *)"
    },
    {
        "line": 102,
        "fullcodeline": "offset+=ReadBlob(image,sizeof(cin.file.reserve),(unsigned char *)"
    },
    {
        "line": 107,
        "fullcodeline": "cin.image.orientation=(unsigned char) ReadBlobByte(image);"
    },
    {
        "line": 108,
        "fullcodeline": "offset++;"
    },
    {
        "line": 124,
        "fullcodeline": "cin.image.number_channels=(unsigned char) ReadBlobByte(image);"
    },
    {
        "line": 125,
        "fullcodeline": "offset++;"
    },
    {
        "line": 126,
        "fullcodeline": "offset+=ReadBlob(image,sizeof(cin.image.reserve1),(unsigned char *)"
    },
    {
        "line": 151,
        "fullcodeline": "cin.image.white_point[0]=ReadBlobFloat(image);"
    },
    {
        "line": 152,
        "fullcodeline": "offset+=4;"
    },
    {
        "line": 155,
        "fullcodeline": "cin.image.white_point[1]=ReadBlobFloat(image);"
    },
    {
        "line": 156,
        "fullcodeline": "offset+=4;"
    },
    {
        "line": 159,
        "fullcodeline": "cin.image.red_primary_chromaticity[0]=ReadBlobFloat(image);"
    },
    {
        "line": 160,
        "fullcodeline": "offset+=4;"
    },
    {
        "line": 163,
        "fullcodeline": "cin.image.red_primary_chromaticity[1]=ReadBlobFloat(image);"
    },
    {
        "line": 164,
        "fullcodeline": "offset+=4;"
    },
    {
        "line": 167,
        "fullcodeline": "cin.image.green_primary_chromaticity[0]=ReadBlobFloat(image);"
    },
    {
        "line": 168,
        "fullcodeline": "offset+=4;"
    },
    {
        "line": 171,
        "fullcodeline": "cin.image.green_primary_chromaticity[1]=ReadBlobFloat(image);"
    },
    {
        "line": 172,
        "fullcodeline": "offset+=4;"
    },
    {
        "line": 175,
        "fullcodeline": "cin.image.blue_primary_chromaticity[0]=ReadBlobFloat(image);"
    },
    {
        "line": 176,
        "fullcodeline": "offset+=4;"
    },
    {
        "line": 179,
        "fullcodeline": "cin.image.blue_primary_chromaticity[1]=ReadBlobFloat(image);"
    },
    {
        "line": 180,
        "fullcodeline": "offset+=4;"
    },
    {
        "line": 183,
        "fullcodeline": "offset+=ReadBlob(image,sizeof(cin.image.label),(unsigned char *)"
    },
    {
        "line": 187,
        "fullcodeline": "offset+=ReadBlob(image,sizeof(cin.image.reserve),(unsigned char *)"
    },
    {
        "line": 193,
        "fullcodeline": "offset++;"
    },
    {
        "line": 195,
        "fullcodeline": "offset++;"
    },
    {
        "line": 197,
        "fullcodeline": "offset++;"
    },
    {
        "line": 199,
        "fullcodeline": "offset++;"
    },
    {
        "line": 201,
        "fullcodeline": "offset+=4;"
    },
    {
        "line": 203,
        "fullcodeline": "offset+=4;"
    },
    {
        "line": 204,
        "fullcodeline": "offset+=ReadBlob(image,sizeof(cin.data_format.reserve),(unsigned char *)"
    },
    {
        "line": 209,
        "fullcodeline": "cin.origination.x_offset=ReadBlobSignedLong(image);"
    },
    {
        "line": 210,
        "fullcodeline": "offset+=4;"
    },
    {
        "line": 214,
        "fullcodeline": "cin.origination.y_offset=(ssize_t) ReadBlobLong(image);"
    },
    {
        "line": 215,
        "fullcodeline": "offset+=4;"
    },
    {
        "line": 219,
        "fullcodeline": "offset+=ReadBlob(image,sizeof(cin.origination.filename),(unsigned char *)"
    },
    {
        "line": 224,
        "fullcodeline": "offset+=ReadBlob(image,sizeof(cin.origination.create_date),(unsigned char *)"
    },
    {
        "line": 229,
        "fullcodeline": "offset+=ReadBlob(image,sizeof(cin.origination.create_time),(unsigned char *)"
    },
    {
        "line": 234,
        "fullcodeline": "offset+=ReadBlob(image,sizeof(cin.origination.device),(unsigned char *)"
    },
    {
        "line": 239,
        "fullcodeline": "offset+=ReadBlob(image,sizeof(cin.origination.model),(unsigned char *)"
    },
    {
        "line": 246,
        "fullcodeline": "offset+=ReadBlob(image,sizeof(cin.origination.serial),(unsigned char *)"
    },
    {
        "line": 252,
        "fullcodeline": "offset+=4;"
    },
    {
        "line": 254,
        "fullcodeline": "offset+=4;"
    },
    {
        "line": 255,
        "fullcodeline": "cin.origination.gamma=ReadBlobFloat(image);"
    },
    {
        "line": 256,
        "fullcodeline": "offset+=4;"
    },
    {
        "line": 259,
        "fullcodeline": "offset+=ReadBlob(image,sizeof(cin.origination.reserve),(unsigned char *)"
    },
    {
        "line": 340,
        "fullcodeline": "image->depth=cin.image.channel[0].bits_per_pixel;"
    },
    {
        "line": 341,
        "fullcodeline": "image->columns=cin.image.channel[0].pixels_per_line;"
    },
    {
        "line": 342,
        "fullcodeline": "image->rows=cin.image.channel[0].lines_per_image;"
    },
    {
        "line": 361,
        "fullcodeline": "status=SetImageExtent(image,image->columns,image->rows);"
    },
    {
        "line": 371,
        "fullcodeline": "quantum_info=AcquireQuantumInfo(image_info,image);"
    },
    {
        "line": 374,
        "fullcodeline": "SetQuantumQuantum(quantum_info,32);"
    },
    {
        "line": 375,
        "fullcodeline": "SetQuantumPack(quantum_info,MagickFalse);"
    },
    {
        "line": 376,
        "fullcodeline": "quantum_type=RGBQuantum;"
    },
    {
        "line": 377,
        "fullcodeline": "extent=GetQuantumExtent(image,quantum_info,quantum_type);"
    },
    {
        "line": 379,
        "fullcodeline": "length=GetBytesPerRow(image->columns,3,image->depth,MagickTrue);"
    },
    {
        "line": 386,
        "fullcodeline": "pixels=GetQuantumPixels(quantum_info);"
    },
    {
        "line": 410,
        "fullcodeline": "SetQuantumImageType(image,quantum_type);"
    },
    {
        "line": 415,
        "fullcodeline": "SetImageColorspace(image,LogColorspace);"
    },
    {
        "line": 50,
        "fullcodeline": "if (image_info->debug != MagickFalse)"
    },
    {
        "line": 57,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 76,
        "fullcodeline": "cin.file.generic_length=ReadBlobLong(image);"
    },
    {
        "line": 78,
        "fullcodeline": "cin.file.industry_length=ReadBlobLong(image);"
    },
    {
        "line": 82,
        "fullcodeline": "cin.file.file_size=ReadBlobLong(image);"
    },
    {
        "line": 86,
        "fullcodeline": "(void) CopyMagickString(property,cin.file.version,sizeof(cin.file.version));"
    },
    {
        "line": 87,
        "fullcodeline": "(void) SetImageProperty(image,\"dpx:file.version\",property);"
    },
    {
        "line": 90,
        "fullcodeline": "(void) CopyMagickString(property,cin.file.filename,sizeof(cin.file.filename));"
    },
    {
        "line": 91,
        "fullcodeline": "(void) SetImageProperty(image,\"dpx:file.filename\",property);"
    },
    {
        "line": 94,
        "fullcodeline": "(void) CopyMagickString(property,cin.file.create_date,"
    },
    {
        "line": 96,
        "fullcodeline": "(void) SetImageProperty(image,\"dpx:file.create_date\",property);"
    },
    {
        "line": 99,
        "fullcodeline": "(void) CopyMagickString(property,cin.file.create_time,"
    },
    {
        "line": 101,
        "fullcodeline": "(void) SetImageProperty(image,\"dpx:file.create_time\",property);"
    },
    {
        "line": 109,
        "fullcodeline": "if (cin.image.orientation != (unsigned char) (~0))"
    },
    {
        "line": 128,
        "fullcodeline": "for (i=0; i < 8; i++)"
    },
    {
        "line": 153,
        "fullcodeline": "if (IsFloatDefined(cin.image.white_point[0]) != MagickFalse)"
    },
    {
        "line": 157,
        "fullcodeline": "if (IsFloatDefined(cin.image.white_point[1]) != MagickFalse)"
    },
    {
        "line": 161,
        "fullcodeline": "if (IsFloatDefined(cin.image.red_primary_chromaticity[0]) != MagickFalse)"
    },
    {
        "line": 165,
        "fullcodeline": "if (IsFloatDefined(cin.image.red_primary_chromaticity[1]) != MagickFalse)"
    },
    {
        "line": 169,
        "fullcodeline": "if (IsFloatDefined(cin.image.green_primary_chromaticity[0]) != MagickFalse)"
    },
    {
        "line": 173,
        "fullcodeline": "if (IsFloatDefined(cin.image.green_primary_chromaticity[1]) != MagickFalse)"
    },
    {
        "line": 177,
        "fullcodeline": "if (IsFloatDefined(cin.image.blue_primary_chromaticity[0]) != MagickFalse)"
    },
    {
        "line": 181,
        "fullcodeline": "if (IsFloatDefined(cin.image.blue_primary_chromaticity[1]) != MagickFalse)"
    },
    {
        "line": 185,
        "fullcodeline": "(void) CopyMagickString(property,cin.image.label,sizeof(cin.image.label));"
    },
    {
        "line": 186,
        "fullcodeline": "(void) SetImageProperty(image,\"dpx:image.label\",property);"
    },
    {
        "line": 200,
        "fullcodeline": "cin.data_format.line_pad=ReadBlobLong(image);"
    },
    {
        "line": 202,
        "fullcodeline": "cin.data_format.channel_pad=ReadBlobLong(image);"
    },
    {
        "line": 221,
        "fullcodeline": "(void) CopyMagickString(property,cin.origination.filename,"
    },
    {
        "line": 223,
        "fullcodeline": "(void) SetImageProperty(image,\"dpx:origination.filename\",property);"
    },
    {
        "line": 226,
        "fullcodeline": "(void) CopyMagickString(property,cin.origination.create_date,"
    },
    {
        "line": 228,
        "fullcodeline": "(void) SetImageProperty(image,\"dpx:origination.create_date\",property);"
    },
    {
        "line": 231,
        "fullcodeline": "(void) CopyMagickString(property,cin.origination.create_time,"
    },
    {
        "line": 233,
        "fullcodeline": "(void) SetImageProperty(image,\"dpx:origination.create_time\",property);"
    },
    {
        "line": 236,
        "fullcodeline": "(void) CopyMagickString(property,cin.origination.device,"
    },
    {
        "line": 238,
        "fullcodeline": "(void) SetImageProperty(image,\"dpx:origination.device\",property);"
    },
    {
        "line": 241,
        "fullcodeline": "(void) CopyMagickString(property,cin.origination.model,"
    },
    {
        "line": 243,
        "fullcodeline": "(void) SetImageProperty(image,\"dpx:origination.model\",property);"
    },
    {
        "line": 244,
        "fullcodeline": "(void) memset(cin.origination.serial,0,"
    },
    {
        "line": 248,
        "fullcodeline": "(void) CopyMagickString(property,cin.origination.serial,"
    },
    {
        "line": 250,
        "fullcodeline": "(void) SetImageProperty(image,\"dpx:origination.serial\",property);"
    },
    {
        "line": 251,
        "fullcodeline": "cin.origination.x_pitch=ReadBlobFloat(image);"
    },
    {
        "line": 253,
        "fullcodeline": "cin.origination.y_pitch=ReadBlobFloat(image);"
    },
    {
        "line": 257,
        "fullcodeline": "if (IsFloatDefined(cin.origination.gamma) != MagickFalse)"
    },
    {
        "line": 261,
        "fullcodeline": "if ((cin.file.image_offset > 2048) && (cin.file.user_length != 0))"
    },
    {
        "line": 343,
        "fullcodeline": "if (image_info->ping != MagickFalse)"
    },
    {
        "line": 350,
        "fullcodeline": "for ( ; offset < (MagickOffsetType) cin.file.image_offset; offset++)"
    },
    {
        "line": 362,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 367,
        "fullcodeline": "(void) SetImageBackgroundColor(image);"
    },
    {
        "line": 372,
        "fullcodeline": "if (quantum_info == (QuantumInfo *) NULL)"
    },
    {
        "line": 385,
        "fullcodeline": "status=SetQuantumPad(image,quantum_info,0);"
    },
    {
        "line": 387,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 411,
        "fullcodeline": "quantum_info=DestroyQuantumInfo(quantum_info);"
    },
    {
        "line": 416,
        "fullcodeline": "(void) CloseBlob(image);"
    },
    {
        "line": 417,
        "fullcodeline": "return(GetFirstImageInList(image));"
    },
    {
        "line": 51,
        "fullcodeline": "(void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\","
    },
    {
        "line": 59,
        "fullcodeline": "image=DestroyImageList(image);"
    },
    {
        "line": 68,
        "fullcodeline": "if ((count != 4) ||"
    },
    {
        "line": 69,
        "fullcodeline": "((LocaleNCompare((char *) magick,\"\\200\\052\\137\\327\",4) != 0)))"
    },
    {
        "line": 70,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 115,
        "fullcodeline": "case 0: image->orientation=TopLeftOrientation; break;"
    },
    {
        "line": 116,
        "fullcodeline": "case 1: image->orientation=TopRightOrientation; break;"
    },
    {
        "line": 117,
        "fullcodeline": "case 2: image->orientation=BottomLeftOrientation; break;"
    },
    {
        "line": 118,
        "fullcodeline": "case 3: image->orientation=BottomRightOrientation; break;"
    },
    {
        "line": 119,
        "fullcodeline": "case 4: image->orientation=LeftTopOrientation; break;"
    },
    {
        "line": 120,
        "fullcodeline": "case 5: image->orientation=RightTopOrientation; break;"
    },
    {
        "line": 121,
        "fullcodeline": "case 6: image->orientation=LeftBottomOrientation; break;"
    },
    {
        "line": 122,
        "fullcodeline": "case 7: image->orientation=RightBottomOrientation; break;"
    },
    {
        "line": 131,
        "fullcodeline": "offset++;"
    },
    {
        "line": 133,
        "fullcodeline": "offset++;"
    },
    {
        "line": 135,
        "fullcodeline": "offset++;"
    },
    {
        "line": 137,
        "fullcodeline": "offset++;"
    },
    {
        "line": 139,
        "fullcodeline": "offset+=4;"
    },
    {
        "line": 141,
        "fullcodeline": "offset+=4;"
    },
    {
        "line": 143,
        "fullcodeline": "offset+=4;"
    },
    {
        "line": 145,
        "fullcodeline": "offset+=4;"
    },
    {
        "line": 147,
        "fullcodeline": "offset+=4;"
    },
    {
        "line": 149,
        "fullcodeline": "offset+=4;"
    },
    {
        "line": 192,
        "fullcodeline": "cin.data_format.interleave=(unsigned char) ReadBlobByte(image);"
    },
    {
        "line": 194,
        "fullcodeline": "cin.data_format.packing=(unsigned char) ReadBlobByte(image);"
    },
    {
        "line": 196,
        "fullcodeline": "cin.data_format.sign=(unsigned char) ReadBlobByte(image);"
    },
    {
        "line": 198,
        "fullcodeline": "cin.data_format.sense=(unsigned char) ReadBlobByte(image);"
    },
    {
        "line": 211,
        "fullcodeline": "if ((size_t) cin.origination.x_offset != ~0UL)"
    },
    {
        "line": 216,
        "fullcodeline": "if ((size_t) cin.origination.y_offset != ~0UL)"
    },
    {
        "line": 258,
        "fullcodeline": "image->gamma=cin.origination.gamma;"
    },
    {
        "line": 269,
        "fullcodeline": "cin.film.id=ReadBlobByte(image);"
    },
    {
        "line": 270,
        "fullcodeline": "offset++;"
    },
    {
        "line": 271,
        "fullcodeline": "c=cin.film.id;"
    },
    {
        "line": 274,
        "fullcodeline": "cin.film.type=ReadBlobByte(image);"
    },
    {
        "line": 275,
        "fullcodeline": "offset++;"
    },
    {
        "line": 276,
        "fullcodeline": "c=cin.film.type;"
    },
    {
        "line": 279,
        "fullcodeline": "cin.film.offset=ReadBlobByte(image);"
    },
    {
        "line": 280,
        "fullcodeline": "offset++;"
    },
    {
        "line": 281,
        "fullcodeline": "c=cin.film.offset;"
    },
    {
        "line": 286,
        "fullcodeline": "offset++;"
    },
    {
        "line": 287,
        "fullcodeline": "cin.film.prefix=ReadBlobLong(image);"
    },
    {
        "line": 288,
        "fullcodeline": "offset+=4;"
    },
    {
        "line": 293,
        "fullcodeline": "offset+=4;"
    },
    {
        "line": 294,
        "fullcodeline": "offset+=ReadBlob(image,sizeof(cin.film.format),(unsigned char *)"
    },
    {
        "line": 299,
        "fullcodeline": "cin.film.frame_position=ReadBlobLong(image);"
    },
    {
        "line": 300,
        "fullcodeline": "offset+=4;"
    },
    {
        "line": 304,
        "fullcodeline": "cin.film.frame_rate=ReadBlobFloat(image);"
    },
    {
        "line": 305,
        "fullcodeline": "offset+=4;"
    },
    {
        "line": 309,
        "fullcodeline": "offset+=ReadBlob(image,sizeof(cin.film.frame_id),(unsigned char *)"
    },
    {
        "line": 314,
        "fullcodeline": "offset+=ReadBlob(image,sizeof(cin.film.slate_info),(unsigned char *)"
    },
    {
        "line": 319,
        "fullcodeline": "offset+=ReadBlob(image,sizeof(cin.film.reserve),(unsigned char *)"
    },
    {
        "line": 322,
        "fullcodeline": "if ((cin.file.image_offset > 2048) && (cin.file.user_length != 0))"
    },
    {
        "line": 332,
        "fullcodeline": "profile=BlobToStringInfo((const void *) NULL,cin.file.user_length);"
    },
    {
        "line": 335,
        "fullcodeline": "offset+=ReadBlob(image,GetStringInfoLength(profile),"
    },
    {
        "line": 348,
        "fullcodeline": "if (((MagickSizeType) image->columns*image->rows/8) > GetBlobSize(image))"
    },
    {
        "line": 349,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"InsufficientImageDataInFile\");"
    },
    {
        "line": 355,
        "fullcodeline": "c=ReadBlobByte(image);"
    },
    {
        "line": 360,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 382,
        "fullcodeline": "quantum_type=GrayQuantum;"
    },
    {
        "line": 383,
        "fullcodeline": "length=GetBytesPerRow(image->columns,1,image->depth,MagickTrue);"
    },
    {
        "line": 392,
        "fullcodeline": "q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 395,
        "fullcodeline": "stream=ReadBlobStream(image,length,pixels,&count);"
    },
    {
        "line": 412,
        "fullcodeline": "if (EOFBlob(image) != MagickFalse)"
    },
    {
        "line": 413,
        "fullcodeline": "ThrowFileException(exception,CorruptImageError,\"UnexpectedEndOfFile\","
    },
    {
        "line": 60,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 73,
        "fullcodeline": "(magick[2] == 0x5f) && (magick[3] == 0xd7) ? MSBEndian : LSBEndian;"
    },
    {
        "line": 110,
        "fullcodeline": "(void) FormatImageProperty(image,\"dpx:image.orientation\",\"%d\","
    },
    {
        "line": 138,
        "fullcodeline": "cin.image.channel[i].pixels_per_line=ReadBlobLong(image);"
    },
    {
        "line": 140,
        "fullcodeline": "cin.image.channel[i].lines_per_image=ReadBlobLong(image);"
    },
    {
        "line": 142,
        "fullcodeline": "cin.image.channel[i].min_data=ReadBlobFloat(image);"
    },
    {
        "line": 144,
        "fullcodeline": "cin.image.channel[i].min_quantity=ReadBlobFloat(image);"
    },
    {
        "line": 146,
        "fullcodeline": "cin.image.channel[i].max_data=ReadBlobFloat(image);"
    },
    {
        "line": 148,
        "fullcodeline": "cin.image.channel[i].max_quantity=ReadBlobFloat(image);"
    },
    {
        "line": 212,
        "fullcodeline": "(void) FormatImageProperty(image,\"dpx:origination.x_offset\",\"%.20g\","
    },
    {
        "line": 217,
        "fullcodeline": "(void) FormatImageProperty(image,\"dpx:origination.y_offset\",\"%.20g\","
    },
    {
        "line": 285,
        "fullcodeline": "cin.film.reserve1=ReadBlobByte(image);"
    },
    {
        "line": 289,
        "fullcodeline": "if (cin.film.prefix != ~0UL)"
    },
    {
        "line": 292,
        "fullcodeline": "cin.film.count=ReadBlobLong(image);"
    },
    {
        "line": 296,
        "fullcodeline": "(void) CopyMagickString(property,cin.film.format,"
    },
    {
        "line": 298,
        "fullcodeline": "(void) SetImageProperty(image,\"dpx:film.format\",property);"
    },
    {
        "line": 301,
        "fullcodeline": "if (cin.film.frame_position != ~0UL)"
    },
    {
        "line": 306,
        "fullcodeline": "if (IsFloatDefined(cin.film.frame_rate) != MagickFalse)"
    },
    {
        "line": 311,
        "fullcodeline": "(void) CopyMagickString(property,cin.film.frame_id,"
    },
    {
        "line": 313,
        "fullcodeline": "(void) SetImageProperty(image,\"dpx:film.frame_id\",property);"
    },
    {
        "line": 316,
        "fullcodeline": "(void) CopyMagickString(property,cin.film.slate_info,"
    },
    {
        "line": 318,
        "fullcodeline": "(void) SetImageProperty(image,\"dpx:film.slate_info\",property);"
    },
    {
        "line": 330,
        "fullcodeline": "if (cin.file.user_length > GetBlobSize(image))"
    },
    {
        "line": 333,
        "fullcodeline": "if (profile == (StringInfo *) NULL)"
    },
    {
        "line": 337,
        "fullcodeline": "(void) SetImageProfile(image,\"dpx:user.data\",profile);"
    },
    {
        "line": 338,
        "fullcodeline": "profile=DestroyStringInfo(profile);"
    },
    {
        "line": 345,
        "fullcodeline": "(void) CloseBlob(image);"
    },
    {
        "line": 356,
        "fullcodeline": "if (c == EOF)"
    },
    {
        "line": 365,
        "fullcodeline": "return(DestroyImageList(image));"
    },
    {
        "line": 396,
        "fullcodeline": "if (count != (ssize_t) length)"
    },
    {
        "line": 398,
        "fullcodeline": "(void) ImportQuantumPixels(image,(CacheView *) NULL,quantum_info,"
    },
    {
        "line": 400,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 402,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 130,
        "fullcodeline": "cin.image.channel[i].designator[0]=(unsigned char) ReadBlobByte(image);"
    },
    {
        "line": 132,
        "fullcodeline": "cin.image.channel[i].designator[1]=(unsigned char) ReadBlobByte(image);"
    },
    {
        "line": 134,
        "fullcodeline": "cin.image.channel[i].bits_per_pixel=(unsigned char) ReadBlobByte(image);"
    },
    {
        "line": 136,
        "fullcodeline": "cin.image.channel[i].reserve=(unsigned char) ReadBlobByte(image);"
    },
    {
        "line": 272,
        "fullcodeline": "if (c != ~0)"
    },
    {
        "line": 277,
        "fullcodeline": "if (c != ~0)"
    },
    {
        "line": 282,
        "fullcodeline": "if (c != ~0)"
    },
    {
        "line": 331,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"InsufficientImageDataInFile\");"
    },
    {
        "line": 334,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 336,
        "fullcodeline": "GetStringInfoDatum(profile));"
    },
    {
        "line": 404,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 273,
        "fullcodeline": "(void) FormatImageProperty(image,\"dpx:film.id\",\"%d\",cin.film.id);"
    },
    {
        "line": 278,
        "fullcodeline": "(void) FormatImageProperty(image,\"dpx:film.type\",\"%d\",cin.film.type);"
    },
    {
        "line": 283,
        "fullcodeline": "(void) FormatImageProperty(image,\"dpx:film.offset\",\"%d\","
    },
    {
        "line": 290,
        "fullcodeline": "(void) FormatImageProperty(image,\"dpx:film.prefix\",\"%.20g\",(double)"
    },
    {
        "line": 302,
        "fullcodeline": "(void) FormatImageProperty(image,\"dpx:film.frame_position\",\"%.20g\","
    },
    {
        "line": 307,
        "fullcodeline": "(void) FormatImageProperty(image,\"dpx:film.frame_rate\",\"%g\","
    },
    {
        "line": 406,
        "fullcodeline": "if (status == MagickFalse)"
    }
]