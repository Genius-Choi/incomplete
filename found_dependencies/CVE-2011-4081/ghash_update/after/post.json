[
    {
        "line": 4,
        "fullcodeline": "struct ghash_desc_ctx *dctx = shash_desc_ctx(desc);"
    },
    {
        "line": 5,
        "fullcodeline": "struct ghash_ctx *ctx = crypto_shash_ctx(desc->tfm);"
    },
    {
        "line": 6,
        "fullcodeline": "u8 *dst = dctx->buffer;"
    },
    {
        "line": 8,
        "fullcodeline": "if (!ctx->gf128)"
    },
    {
        "line": 25,
        "fullcodeline": "while (srclen >= GHASH_BLOCK_SIZE) {"
    },
    {
        "line": 12,
        "fullcodeline": "int n = min(srclen, dctx->bytes);"
    },
    {
        "line": 13,
        "fullcodeline": "u8 *pos = dst + (GHASH_BLOCK_SIZE - dctx->bytes);"
    },
    {
        "line": 15,
        "fullcodeline": "dctx->bytes -= n;"
    },
    {
        "line": 16,
        "fullcodeline": "srclen -= n;"
    },
    {
        "line": 26,
        "fullcodeline": "crypto_xor(dst, src, GHASH_BLOCK_SIZE);"
    },
    {
        "line": 27,
        "fullcodeline": "gf128mul_4k_lle((be128 *)dst, ctx->gf128);"
    },
    {
        "line": 28,
        "fullcodeline": "src += GHASH_BLOCK_SIZE;"
    },
    {
        "line": 29,
        "fullcodeline": "srclen -= GHASH_BLOCK_SIZE;"
    },
    {
        "line": 33,
        "fullcodeline": "dctx->bytes = GHASH_BLOCK_SIZE - srclen;"
    },
    {
        "line": 9,
        "fullcodeline": "return -ENOKEY;"
    },
    {
        "line": 18,
        "fullcodeline": "while (n--)"
    },
    {
        "line": 21,
        "fullcodeline": "if (!dctx->bytes)"
    },
    {
        "line": 34,
        "fullcodeline": "while (srclen--)"
    },
    {
        "line": 22,
        "fullcodeline": "gf128mul_4k_lle((be128 *)dst, ctx->gf128);"
    },
    {
        "line": 19,
        "fullcodeline": "*pos++ ^= *src++;"
    },
    {
        "line": 35,
        "fullcodeline": "*dst++ ^= *src++;"
    }
]