[
    {
        "line": 10,
        "fullcodeline": "black[CompositePixelChannel+1],"
    },
    {
        "line": 14,
        "fullcodeline": "white[CompositePixelChannel+1];"
    },
    {
        "line": 31,
        "fullcodeline": "assert(image != (Image *) NULL);"
    },
    {
        "line": 32,
        "fullcodeline": "assert(image->signature == MagickCoreSignature);"
    },
    {
        "line": 41,
        "fullcodeline": "equalize_map=(double *) AcquireQuantumMemory(MaxMap+1UL,"
    },
    {
        "line": 43,
        "fullcodeline": "histogram=(double *) AcquireQuantumMemory(MaxMap+1UL,GetPixelChannels(image)*"
    },
    {
        "line": 45,
        "fullcodeline": "map=(double *) AcquireQuantumMemory(MaxMap+1UL,GetPixelChannels(image)*"
    },
    {
        "line": 62,
        "fullcodeline": "status=MagickTrue;"
    },
    {
        "line": 63,
        "fullcodeline": "(void) ResetMagickMemory(histogram,0,(MaxMap+1)*GetPixelChannels(image)*"
    },
    {
        "line": 65,
        "fullcodeline": "image_view=AcquireVirtualCacheView(image,exception);"
    },
    {
        "line": 97,
        "fullcodeline": "image_view=DestroyCacheView(image_view);"
    },
    {
        "line": 116,
        "fullcodeline": "(void) ResetMagickMemory(equalize_map,0,(MaxMap+1)*GetPixelChannels(image)*"
    },
    {
        "line": 118,
        "fullcodeline": "(void) ResetMagickMemory(black,0,sizeof(*black));"
    },
    {
        "line": 119,
        "fullcodeline": "(void) ResetMagickMemory(white,0,sizeof(*white));"
    },
    {
        "line": 133,
        "fullcodeline": "histogram=(double *) RelinquishMagickMemory(histogram);"
    },
    {
        "line": 134,
        "fullcodeline": "map=(double *) RelinquishMagickMemory(map);"
    },
    {
        "line": 184,
        "fullcodeline": "progress=0;"
    },
    {
        "line": 185,
        "fullcodeline": "image_view=AcquireAuthenticCacheView(image,exception);"
    },
    {
        "line": 242,
        "fullcodeline": "image_view=DestroyCacheView(image_view);"
    },
    {
        "line": 243,
        "fullcodeline": "equalize_map=(double *) RelinquishMagickMemory(equalize_map);"
    },
    {
        "line": 37,
        "fullcodeline": "if (image->debug != MagickFalse)"
    },
    {
        "line": 39,
        "fullcodeline": "if (SyncImagePixelCache(image,exception) == MagickFalse)"
    },
    {
        "line": 47,
        "fullcodeline": "if ((equalize_map == (double *) NULL) || (histogram == (double *) NULL) ||"
    },
    {
        "line": 66,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 101,
        "fullcodeline": "for (i=0; i < (ssize_t) GetPixelChannels(image); i++)"
    },
    {
        "line": 120,
        "fullcodeline": "for (i=0; i < (ssize_t) GetPixelChannels(image); i++)"
    },
    {
        "line": 135,
        "fullcodeline": "if (image->storage_class == PseudoClass)"
    },
    {
        "line": 190,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 38,
        "fullcodeline": "(void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",image->filename);"
    },
    {
        "line": 48,
        "fullcodeline": "(map == (double *) NULL))"
    },
    {
        "line": 56,
        "fullcodeline": "ThrowBinaryException(ResourceLimitError,\"MemoryAllocationFailed\","
    },
    {
        "line": 76,
        "fullcodeline": "p=GetCacheViewVirtualPixels(image_view,0,y,image->columns,1,exception);"
    },
    {
        "line": 109,
        "fullcodeline": "intensity=0.0;"
    },
    {
        "line": 125,
        "fullcodeline": "black[i]=map[i];"
    },
    {
        "line": 126,
        "fullcodeline": "white[i]=map[GetPixelChannels(image)*MaxMap+i];"
    },
    {
        "line": 200,
        "fullcodeline": "q=GetCacheViewAuthenticPixels(image_view,0,y,image->columns,1,exception);"
    },
    {
        "line": 42,
        "fullcodeline": "GetPixelChannels(image)*sizeof(*equalize_map));"
    },
    {
        "line": 50,
        "fullcodeline": "if (map != (double *) NULL)"
    },
    {
        "line": 52,
        "fullcodeline": "if (histogram != (double *) NULL)"
    },
    {
        "line": 54,
        "fullcodeline": "if (equalize_map != (double *) NULL)"
    },
    {
        "line": 74,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 77,
        "fullcodeline": "if (p == (const Quantum *) NULL)"
    },
    {
        "line": 82,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 110,
        "fullcodeline": "for (j=0; j <= (ssize_t) MaxMap; j++)"
    },
    {
        "line": 127,
        "fullcodeline": "if (black[i] != white[i])"
    },
    {
        "line": 143,
        "fullcodeline": "for (j=0; j < (ssize_t) image->colors; j++)"
    },
    {
        "line": 198,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 201,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 206,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 227,
        "fullcodeline": "if (SyncCacheViewAuthenticPixels(image_view,exception) == MagickFalse)"
    },
    {
        "line": 229,
        "fullcodeline": "if (image->progress_monitor != (MagickProgressMonitor) NULL)"
    },
    {
        "line": 51,
        "fullcodeline": "map=(double *) RelinquishMagickMemory(map);"
    },
    {
        "line": 53,
        "fullcodeline": "histogram=(double *) RelinquishMagickMemory(histogram);"
    },
    {
        "line": 55,
        "fullcodeline": "equalize_map=(double *) RelinquishMagickMemory(equalize_map);"
    },
    {
        "line": 79,
        "fullcodeline": "status=MagickFalse;"
    },
    {
        "line": 94,
        "fullcodeline": "p+=GetPixelChannels(image);"
    },
    {
        "line": 112,
        "fullcodeline": "intensity+=histogram[GetPixelChannels(image)*j+i];"
    },
    {
        "line": 113,
        "fullcodeline": "map[GetPixelChannels(image)*j+i]=intensity;"
    },
    {
        "line": 203,
        "fullcodeline": "status=MagickFalse;"
    },
    {
        "line": 225,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 228,
        "fullcodeline": "status=MagickFalse;"
    },
    {
        "line": 237,
        "fullcodeline": "proceed=SetImageProgress(image,EqualizeImageTag,progress++,image->rows);"
    },
    {
        "line": 84,
        "fullcodeline": "for (i=0; i < (ssize_t) GetPixelChannels(image); i++)"
    },
    {
        "line": 128,
        "fullcodeline": "for (j=0; j <= (ssize_t) MaxMap; j++)"
    },
    {
        "line": 129,
        "fullcodeline": "equalize_map[GetPixelChannels(image)*j+i]=(double)"
    },
    {
        "line": 145,
        "fullcodeline": "if ((GetPixelRedTraits(image) & UpdatePixelTrait) != 0)"
    },
    {
        "line": 153,
        "fullcodeline": "if ((GetPixelGreenTraits(image) & UpdatePixelTrait) != 0)"
    },
    {
        "line": 162,
        "fullcodeline": "if ((GetPixelBlueTraits(image) & UpdatePixelTrait) != 0)"
    },
    {
        "line": 170,
        "fullcodeline": "if ((GetPixelAlphaTraits(image) & UpdatePixelTrait) != 0)"
    },
    {
        "line": 211,
        "fullcodeline": "if (GetPixelReadMask(image,q) == 0)"
    },
    {
        "line": 216,
        "fullcodeline": "for (j=0; j < (ssize_t) GetPixelChannels(image); j++)"
    },
    {
        "line": 238,
        "fullcodeline": "if (proceed == MagickFalse)"
    },
    {
        "line": 89,
        "fullcodeline": "intensity=p[i];"
    },
    {
        "line": 92,
        "fullcodeline": "histogram[GetPixelChannels(image)*ScaleQuantumToMap(intensity)+i]++;"
    },
    {
        "line": 147,
        "fullcodeline": "PixelChannel channel=GetPixelChannelChannel(image,RedPixelChannel);"
    },
    {
        "line": 155,
        "fullcodeline": "PixelChannel channel=GetPixelChannelChannel(image,"
    },
    {
        "line": 164,
        "fullcodeline": "PixelChannel channel=GetPixelChannelChannel(image,BluePixelChannel);"
    },
    {
        "line": 172,
        "fullcodeline": "PixelChannel channel=GetPixelChannelChannel(image,"
    },
    {
        "line": 213,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 218,
        "fullcodeline": "PixelChannel channel=GetPixelChannelChannel(image,j);"
    },
    {
        "line": 219,
        "fullcodeline": "PixelTrait traits=GetPixelChannelTraits(image,channel);"
    },
    {
        "line": 222,
        "fullcodeline": "q[j]=ClampToQuantum(equalize_map[GetPixelChannels(image)*"
    },
    {
        "line": 239,
        "fullcodeline": "status=MagickFalse;"
    },
    {
        "line": 90,
        "fullcodeline": "if ((image->channel_mask & SyncChannels) != 0)"
    },
    {
        "line": 130,
        "fullcodeline": "ScaleMapToQuantum((double) ((MaxMap*(map["
    },
    {
        "line": 148,
        "fullcodeline": "if (black[channel] != white[channel])"
    },
    {
        "line": 157,
        "fullcodeline": "if (black[channel] != white[channel])"
    },
    {
        "line": 165,
        "fullcodeline": "if (black[channel] != white[channel])"
    },
    {
        "line": 174,
        "fullcodeline": "if (black[channel] != white[channel])"
    },
    {
        "line": 220,
        "fullcodeline": "if (((traits & UpdatePixelTrait) == 0) || (black[j] == white[j]))"
    },
    {
        "line": 91,
        "fullcodeline": "intensity=GetPixelIntensity(image,p);"
    },
    {
        "line": 149,
        "fullcodeline": "image->colormap[j].red=equalize_map[GetPixelChannels(image)*"
    },
    {
        "line": 158,
        "fullcodeline": "image->colormap[j].green=equalize_map[GetPixelChannels(image)*"
    },
    {
        "line": 166,
        "fullcodeline": "image->colormap[j].blue=equalize_map[GetPixelChannels(image)*"
    },
    {
        "line": 175,
        "fullcodeline": "image->colormap[j].alpha=equalize_map[GetPixelChannels(image)*"
    },
    {
        "line": 131,
        "fullcodeline": "GetPixelChannels(image)*j+i]-black[i]))/(white[i]-black[i])));"
    },
    {
        "line": 223,
        "fullcodeline": "ScaleQuantumToMap(q[j])+j]);"
    },
    {
        "line": 150,
        "fullcodeline": "ScaleQuantumToMap(ClampToQuantum(image->colormap[j].red))+"
    },
    {
        "line": 159,
        "fullcodeline": "ScaleQuantumToMap(ClampToQuantum(image->colormap[j].green))+"
    },
    {
        "line": 167,
        "fullcodeline": "ScaleQuantumToMap(ClampToQuantum(image->colormap[j].blue))+"
    },
    {
        "line": 176,
        "fullcodeline": "ScaleQuantumToMap(ClampToQuantum(image->colormap[j].alpha))+"
    }
]