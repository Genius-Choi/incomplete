[
    {
        "line": 31,
        "fullcodeline": "assert(image != (Image *) NULL);"
    },
    {
        "line": 32,
        "fullcodeline": "assert(image->signature == MagickCoreSignature);"
    },
    {
        "line": 37,
        "fullcodeline": "black=(double *) AcquireQuantumMemory(GetPixelChannels(image),sizeof(*black));"
    },
    {
        "line": 38,
        "fullcodeline": "white=(double *) AcquireQuantumMemory(GetPixelChannels(image),sizeof(*white));"
    },
    {
        "line": 39,
        "fullcodeline": "histogram=(double *) AcquireQuantumMemory(MaxMap+1UL,GetPixelChannels(image)*"
    },
    {
        "line": 41,
        "fullcodeline": "stretch_map=(double *) AcquireQuantumMemory(MaxMap+1UL,"
    },
    {
        "line": 60,
        "fullcodeline": "status=MagickTrue;"
    },
    {
        "line": 61,
        "fullcodeline": "(void) ResetMagickMemory(histogram,0,(MaxMap+1)*GetPixelChannels(image)*"
    },
    {
        "line": 63,
        "fullcodeline": "image_view=AcquireVirtualCacheView(image,exception);"
    },
    {
        "line": 127,
        "fullcodeline": "histogram=(double *) RelinquishMagickMemory(histogram);"
    },
    {
        "line": 131,
        "fullcodeline": "(void) ResetMagickMemory(stretch_map,0,(MaxMap+1)*GetPixelChannels(image)*"
    },
    {
        "line": 193,
        "fullcodeline": "status=MagickTrue;"
    },
    {
        "line": 194,
        "fullcodeline": "progress=0;"
    },
    {
        "line": 195,
        "fullcodeline": "image_view=AcquireAuthenticCacheView(image,exception);"
    },
    {
        "line": 253,
        "fullcodeline": "image_view=DestroyCacheView(image_view);"
    },
    {
        "line": 254,
        "fullcodeline": "stretch_map=(double *) RelinquishMagickMemory(stretch_map);"
    },
    {
        "line": 255,
        "fullcodeline": "white=(double *) RelinquishMagickMemory(white);"
    },
    {
        "line": 256,
        "fullcodeline": "black=(double *) RelinquishMagickMemory(black);"
    },
    {
        "line": 33,
        "fullcodeline": "if (image->debug != MagickFalse)"
    },
    {
        "line": 35,
        "fullcodeline": "if (SetImageGray(image,exception) != MagickFalse)"
    },
    {
        "line": 43,
        "fullcodeline": "if ((black == (double *) NULL) || (white == (double *) NULL) ||"
    },
    {
        "line": 64,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 96,
        "fullcodeline": "image_view=DestroyCacheView(image_view);"
    },
    {
        "line": 100,
        "fullcodeline": "for (i=0; i < (ssize_t) GetPixelChannels(image); i++)"
    },
    {
        "line": 133,
        "fullcodeline": "for (i=0; i < (ssize_t) GetPixelChannels(image); i++)"
    },
    {
        "line": 154,
        "fullcodeline": "if (image->storage_class == PseudoClass)"
    },
    {
        "line": 200,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 34,
        "fullcodeline": "(void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",image->filename);"
    },
    {
        "line": 36,
        "fullcodeline": "(void) SetImageColorspace(image,GRAYColorspace,exception);"
    },
    {
        "line": 44,
        "fullcodeline": "(histogram == (double *) NULL) || (stretch_map == (double *) NULL))"
    },
    {
        "line": 54,
        "fullcodeline": "ThrowBinaryException(ResourceLimitError,\"MemoryAllocationFailed\","
    },
    {
        "line": 74,
        "fullcodeline": "p=GetCacheViewVirtualPixels(image_view,0,y,image->columns,1,exception);"
    },
    {
        "line": 108,
        "fullcodeline": "black[i]=0.0;"
    },
    {
        "line": 109,
        "fullcodeline": "white[i]=MaxRange(QuantumRange);"
    },
    {
        "line": 110,
        "fullcodeline": "intensity=0.0;"
    },
    {
        "line": 117,
        "fullcodeline": "black[i]=(double) j;"
    },
    {
        "line": 118,
        "fullcodeline": "intensity=0.0;"
    },
    {
        "line": 125,
        "fullcodeline": "white[i]=(double) j;"
    },
    {
        "line": 210,
        "fullcodeline": "q=GetCacheViewAuthenticPixels(image_view,0,y,image->columns,1,exception);"
    },
    {
        "line": 42,
        "fullcodeline": "GetPixelChannels(image)*sizeof(*stretch_map));"
    },
    {
        "line": 46,
        "fullcodeline": "if (stretch_map != (double *) NULL)"
    },
    {
        "line": 48,
        "fullcodeline": "if (histogram != (double *) NULL)"
    },
    {
        "line": 50,
        "fullcodeline": "if (white != (double *) NULL)"
    },
    {
        "line": 52,
        "fullcodeline": "if (black != (double *) NULL)"
    },
    {
        "line": 62,
        "fullcodeline": "sizeof(*histogram));"
    },
    {
        "line": 72,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 75,
        "fullcodeline": "if (p == (const Quantum *) NULL)"
    },
    {
        "line": 80,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 111,
        "fullcodeline": "for (j=0; j <= (ssize_t) MaxMap; j++)"
    },
    {
        "line": 119,
        "fullcodeline": "for (j=(ssize_t) MaxMap; j != 0; j--)"
    },
    {
        "line": 132,
        "fullcodeline": "sizeof(*stretch_map));"
    },
    {
        "line": 138,
        "fullcodeline": "for (j=0; j <= (ssize_t) MaxMap; j++)"
    },
    {
        "line": 162,
        "fullcodeline": "for (j=0; j < (ssize_t) image->colors; j++)"
    },
    {
        "line": 208,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 211,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 216,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 237,
        "fullcodeline": "if (SyncCacheViewAuthenticPixels(image_view,exception) == MagickFalse)"
    },
    {
        "line": 239,
        "fullcodeline": "if (image->progress_monitor != (MagickProgressMonitor) NULL)"
    },
    {
        "line": 47,
        "fullcodeline": "stretch_map=(double *) RelinquishMagickMemory(stretch_map);"
    },
    {
        "line": 49,
        "fullcodeline": "histogram=(double *) RelinquishMagickMemory(histogram);"
    },
    {
        "line": 51,
        "fullcodeline": "white=(double *) RelinquishMagickMemory(white);"
    },
    {
        "line": 53,
        "fullcodeline": "black=(double *) RelinquishMagickMemory(black);"
    },
    {
        "line": 77,
        "fullcodeline": "status=MagickFalse;"
    },
    {
        "line": 85,
        "fullcodeline": "pixel=GetPixelIntensity(image,p);"
    },
    {
        "line": 93,
        "fullcodeline": "p+=GetPixelChannels(image);"
    },
    {
        "line": 113,
        "fullcodeline": "intensity+=histogram[GetPixelChannels(image)*j+i];"
    },
    {
        "line": 121,
        "fullcodeline": "intensity+=histogram[GetPixelChannels(image)*j+i];"
    },
    {
        "line": 143,
        "fullcodeline": "gamma=PerceptibleReciprocal(white[i]-black[i]);"
    },
    {
        "line": 213,
        "fullcodeline": "status=MagickFalse;"
    },
    {
        "line": 235,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 238,
        "fullcodeline": "status=MagickFalse;"
    },
    {
        "line": 247,
        "fullcodeline": "proceed=SetImageProgress(image,ContrastStretchImageTag,progress++,"
    },
    {
        "line": 86,
        "fullcodeline": "for (i=0; i < (ssize_t) GetPixelChannels(image); i++)"
    },
    {
        "line": 114,
        "fullcodeline": "if (intensity > black_point)"
    },
    {
        "line": 122,
        "fullcodeline": "if (intensity > ((double) image->columns*image->rows-white_point))"
    },
    {
        "line": 144,
        "fullcodeline": "if (j < (ssize_t) black[i])"
    },
    {
        "line": 164,
        "fullcodeline": "if ((GetPixelRedTraits(image) & UpdatePixelTrait) != 0)"
    },
    {
        "line": 170,
        "fullcodeline": "if ((GetPixelGreenTraits(image) & UpdatePixelTrait) != 0)"
    },
    {
        "line": 176,
        "fullcodeline": "if ((GetPixelBlueTraits(image) & UpdatePixelTrait) != 0)"
    },
    {
        "line": 182,
        "fullcodeline": "if ((GetPixelAlphaTraits(image) & UpdatePixelTrait) != 0)"
    },
    {
        "line": 221,
        "fullcodeline": "if (GetPixelReadMask(image,q) == 0)"
    },
    {
        "line": 226,
        "fullcodeline": "for (j=0; j < (ssize_t) GetPixelChannels(image); j++)"
    },
    {
        "line": 249,
        "fullcodeline": "if (proceed == MagickFalse)"
    },
    {
        "line": 90,
        "fullcodeline": "histogram[GetPixelChannels(image)*ScaleQuantumToMap("
    },
    {
        "line": 145,
        "fullcodeline": "stretch_map[GetPixelChannels(image)*j+i]=0.0;"
    },
    {
        "line": 166,
        "fullcodeline": "i=GetPixelChannelOffset(image,RedPixelChannel);"
    },
    {
        "line": 167,
        "fullcodeline": "image->colormap[j].red=stretch_map[GetPixelChannels(image)*"
    },
    {
        "line": 172,
        "fullcodeline": "i=GetPixelChannelOffset(image,GreenPixelChannel);"
    },
    {
        "line": 173,
        "fullcodeline": "image->colormap[j].green=stretch_map[GetPixelChannels(image)*"
    },
    {
        "line": 178,
        "fullcodeline": "i=GetPixelChannelOffset(image,BluePixelChannel);"
    },
    {
        "line": 179,
        "fullcodeline": "image->colormap[j].blue=stretch_map[GetPixelChannels(image)*"
    },
    {
        "line": 184,
        "fullcodeline": "i=GetPixelChannelOffset(image,AlphaPixelChannel);"
    },
    {
        "line": 185,
        "fullcodeline": "image->colormap[j].alpha=stretch_map[GetPixelChannels(image)*"
    },
    {
        "line": 223,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 228,
        "fullcodeline": "PixelChannel channel=GetPixelChannelChannel(image,j);"
    },
    {
        "line": 229,
        "fullcodeline": "PixelTrait traits=GetPixelChannelTraits(image,channel);"
    },
    {
        "line": 232,
        "fullcodeline": "q[j]=ClampToQuantum(stretch_map[GetPixelChannels(image)*"
    },
    {
        "line": 250,
        "fullcodeline": "status=MagickFalse;"
    },
    {
        "line": 88,
        "fullcodeline": "if (image->channel_mask != DefaultChannels)"
    },
    {
        "line": 230,
        "fullcodeline": "if ((traits & UpdatePixelTrait) == 0)"
    },
    {
        "line": 89,
        "fullcodeline": "pixel=(double) p[i];"
    },
    {
        "line": 147,
        "fullcodeline": "if (j > (ssize_t) white[i])"
    },
    {
        "line": 148,
        "fullcodeline": "stretch_map[GetPixelChannels(image)*j+i]=(double) QuantumRange;"
    },
    {
        "line": 150,
        "fullcodeline": "stretch_map[GetPixelChannels(image)*j+i]=(double) ScaleMapToQuantum("
    },
    {
        "line": 168,
        "fullcodeline": "ScaleQuantumToMap(ClampToQuantum(image->colormap[j].red))+i];"
    },
    {
        "line": 174,
        "fullcodeline": "ScaleQuantumToMap(ClampToQuantum(image->colormap[j].green))+i];"
    },
    {
        "line": 180,
        "fullcodeline": "ScaleQuantumToMap(ClampToQuantum(image->colormap[j].blue))+i];"
    },
    {
        "line": 186,
        "fullcodeline": "ScaleQuantumToMap(ClampToQuantum(image->colormap[j].alpha))+i];"
    },
    {
        "line": 91,
        "fullcodeline": "ClampToQuantum(pixel))+i]++;"
    },
    {
        "line": 233,
        "fullcodeline": "ScaleQuantumToMap(q[j])+j]);"
    },
    {
        "line": 151,
        "fullcodeline": "(double) (MaxMap*gamma*(j-black[i])));"
    }
]