[
    {
        "line": 3,
        "fullcodeline": "static char ports[256], ssl_cert_path[MAX_PATH] = { 0 }, access_log_path[MAX_PATH] = { 0 };"
    },
    {
        "line": 4,
        "fullcodeline": "const char *http_binding_addr = ntop->getPrefs()->get_http_binding_address();"
    },
    {
        "line": 5,
        "fullcodeline": "const char *https_binding_addr = ntop->getPrefs()->get_https_binding_address();"
    },
    {
        "line": 6,
        "fullcodeline": "char tmpBuf[8];"
    },
    {
        "line": 7,
        "fullcodeline": "bool use_ssl = false;"
    },
    {
        "line": 8,
        "fullcodeline": "bool use_http = true;"
    },
    {
        "line": 14,
        "fullcodeline": "gettimeofday(&tv, NULL);"
    },
    {
        "line": 15,
        "fullcodeline": "srand(tv.tv_sec + tv.tv_usec);"
    },
    {
        "line": 17,
        "fullcodeline": "static char *http_options[] = {"
    },
    {
        "line": 27,
        "fullcodeline": "docs_dir = strdup(_docs_dir), scripts_dir = strdup(_scripts_dir);"
    },
    {
        "line": 28,
        "fullcodeline": "httpserver = this;"
    },
    {
        "line": 38,
        "fullcodeline": "snprintf(ssl_cert_path, sizeof(ssl_cert_path), \"%s/ssl/%s\","
    },
    {
        "line": 41,
        "fullcodeline": "stat_rc = stat(ssl_cert_path, &statsBuf);"
    },
    {
        "line": 94,
        "fullcodeline": "ntop->getRedis()->get((char*)SPLASH_HTTP_PORT, tmpBuf, sizeof(tmpBuf), true);"
    },
    {
        "line": 124,
        "fullcodeline": "memset(&callbacks, 0, sizeof(callbacks));"
    },
    {
        "line": 125,
        "fullcodeline": "callbacks.begin_request = handle_lua_request;"
    },
    {
        "line": 126,
        "fullcodeline": "callbacks.log_message = handle_http_message;"
    },
    {
        "line": 129,
        "fullcodeline": "http_prefix = ntop->getPrefs()->get_http_prefix(),"
    },
    {
        "line": 132,
        "fullcodeline": "httpd_v4 = mg_start(&callbacks, NULL, (const char**)http_options);"
    },
    {
        "line": 143,
        "fullcodeline": "ntop->getTrace()->traceEvent(TRACE_NORMAL, \"Web server dirs [%s][%s]\", docs_dir, scripts_dir);"
    },
    {
        "line": 29,
        "fullcodeline": "if(ntop->getPrefs()->get_http_port() == 0) use_http = false;"
    },
    {
        "line": 43,
        "fullcodeline": "if((ntop->getPrefs()->get_https_port() > 0) && (stat_rc == 0)) {"
    },
    {
        "line": 77,
        "fullcodeline": "if(use_http && ntop->getPrefs()->get_alt_http_port()) {"
    },
    {
        "line": 84,
        "fullcodeline": "if((!use_http) && (!use_ssl) & (!ssl_enabled)) {"
    },
    {
        "line": 95,
        "fullcodeline": "if(tmpBuf[0] != '\\0') {"
    },
    {
        "line": 111,
        "fullcodeline": "if(ntop->getPrefs()->is_access_log_enabled()) {"
    },
    {
        "line": 130,
        "fullcodeline": "http_prefix_len = strlen(ntop->getPrefs()->get_http_prefix());"
    },
    {
        "line": 134,
        "fullcodeline": "if(httpd_v4 == NULL) {"
    },
    {
        "line": 149,
        "fullcodeline": "if(use_ssl & ssl_enabled)"
    },
    {
        "line": 18,
        "fullcodeline": "(char*)\"listening_ports\", ports,"
    },
    {
        "line": 19,
        "fullcodeline": "(char*)\"enable_directory_listing\", (char*)\"no\","
    },
    {
        "line": 20,
        "fullcodeline": "(char*)\"document_root\",  (char*)_docs_dir,"
    },
    {
        "line": 22,
        "fullcodeline": "(char*)\"num_threads\", (char*)\"5\","
    },
    {
        "line": 32,
        "fullcodeline": "snprintf(ports, sizeof(ports), \"%s%s%d\","
    },
    {
        "line": 46,
        "fullcodeline": "use_ssl = true;"
    },
    {
        "line": 61,
        "fullcodeline": "ntop->getTrace()->traceEvent(TRACE_INFO, \"Found SSL certificate %s\", ssl_cert_path);"
    },
    {
        "line": 65,
        "fullcodeline": "http_options[i] = (char*)\"ssl_certificate\", http_options[i+1] = ssl_cert_path;"
    },
    {
        "line": 66,
        "fullcodeline": "ssl_enabled = true;"
    },
    {
        "line": 78,
        "fullcodeline": "snprintf(&ports[strlen(ports)], sizeof(ports) - strlen(ports) - 1, \",%s%s%d\","
    },
    {
        "line": 88,
        "fullcodeline": "ntop->getTrace()->traceEvent(TRACE_WARNING,"
    },
    {
        "line": 90,
        "fullcodeline": "snprintf(ports, sizeof(ports), \"%d\", ntop->getPrefs()->get_http_port());"
    },
    {
        "line": 91,
        "fullcodeline": "use_http = true;"
    },
    {
        "line": 96,
        "fullcodeline": "http_splash_port = atoi(tmpBuf);"
    },
    {
        "line": 114,
        "fullcodeline": "snprintf(access_log_path, sizeof(access_log_path), \"%s/ntopng_access.log\","
    },
    {
        "line": 120,
        "fullcodeline": "http_options[i] = (char*)\"access_log_file\", http_options[i+1] = access_log_path;"
    },
    {
        "line": 121,
        "fullcodeline": "ntop->getTrace()->traceEvent(TRACE_NORMAL, \"HTTP logs will be stored on %s\", access_log_path);"
    },
    {
        "line": 135,
        "fullcodeline": "ntop->getTrace()->traceEvent(TRACE_ERROR, \"Unable to start HTTP server (IPv4) on ports %s\", ports);"
    },
    {
        "line": 138,
        "fullcodeline": "exit(-1);"
    },
    {
        "line": 146,
        "fullcodeline": "ntop->getTrace()->traceEvent(TRACE_NORMAL, \"HTTP server listening on port(s) %s\","
    },
    {
        "line": 150,
        "fullcodeline": "ntop->getTrace()->traceEvent(TRACE_NORMAL, \"HTTPS server listening on port %d\","
    },
    {
        "line": 34,
        "fullcodeline": "(http_binding_addr[0] == '\\0') ? \"\" : \":\","
    },
    {
        "line": 35,
        "fullcodeline": "ntop->getPrefs()->get_http_port());"
    },
    {
        "line": 63,
        "fullcodeline": "for(i=0; http_options[i] != NULL; i++) ;"
    },
    {
        "line": 71,
        "fullcodeline": "ntop->getTrace()->traceEvent(TRACE_NORMAL,"
    },
    {
        "line": 73,
        "fullcodeline": "ssl_enabled = false;"
    },
    {
        "line": 80,
        "fullcodeline": "(http_binding_addr[0] == '\\0') ? \"\" : \":\","
    },
    {
        "line": 81,
        "fullcodeline": "ntop->getPrefs()->get_alt_http_port());"
    },
    {
        "line": 85,
        "fullcodeline": "if(stat_rc != 0)"
    },
    {
        "line": 98,
        "fullcodeline": "if(http_splash_port > 0) {"
    },
    {
        "line": 109,
        "fullcodeline": "http_splash_port = 0;"
    },
    {
        "line": 115,
        "fullcodeline": "ntop->get_working_dir());"
    },
    {
        "line": 117,
        "fullcodeline": "for(i=0; http_options[i] != NULL; i++)"
    },
    {
        "line": 151,
        "fullcodeline": "ntop->getPrefs()->get_https_port());"
    },
    {
        "line": 48,
        "fullcodeline": "snprintf(ports, sizeof(ports), \"%s%s%d,%s%s%ds\","
    },
    {
        "line": 68,
        "fullcodeline": "if(stat_rc != 0)"
    },
    {
        "line": 86,
        "fullcodeline": "ntop->getTrace()->traceEvent(TRACE_WARNING,"
    },
    {
        "line": 99,
        "fullcodeline": "snprintf(&ports[strlen(ports)], sizeof(ports) - strlen(ports) - 1, \",%s%s%d\","
    },
    {
        "line": 105,
        "fullcodeline": "http_splash_port = ntohs(http_splash_port);"
    },
    {
        "line": 137,
        "fullcodeline": "ntop->getTrace()->traceEvent(TRACE_ERROR, \"%s\", strerror(errno));"
    },
    {
        "line": 50,
        "fullcodeline": "(http_binding_addr[0] == '\\0') ? \"\" : \":\","
    },
    {
        "line": 51,
        "fullcodeline": "ntop->getPrefs()->get_http_port(),"
    },
    {
        "line": 53,
        "fullcodeline": "(https_binding_addr[0] == '\\0') ? \"\" : \":\","
    },
    {
        "line": 54,
        "fullcodeline": "ntop->getPrefs()->get_https_port());"
    },
    {
        "line": 56,
        "fullcodeline": "snprintf(ports, sizeof(ports), \"%s%s%ds\","
    },
    {
        "line": 69,
        "fullcodeline": "ntop->getTrace()->traceEvent(TRACE_NORMAL,"
    },
    {
        "line": 101,
        "fullcodeline": "(http_binding_addr[0] == '\\0') ? \"\" : \":\","
    },
    {
        "line": 107,
        "fullcodeline": "ntop->getTrace()->traceEvent(TRACE_WARNING, \"Ignoring HTTP splash port (%s)\", tmpBuf);"
    },
    {
        "line": 58,
        "fullcodeline": "(https_binding_addr[0] == '\\0') ? \"\" : \":\","
    },
    {
        "line": 59,
        "fullcodeline": "ntop->getPrefs()->get_https_port());"
    }
]