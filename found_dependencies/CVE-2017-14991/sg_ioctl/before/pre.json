[
    {
        "line": 4,
        "fullcodeline": "int __user *ip = p;"
    },
    {
        "line": 16,
        "fullcodeline": "read_only = (O_RDWR != (filp->f_flags & O_ACCMODE));"
    },
    {
        "line": 249,
        "fullcodeline": "result = scsi_ioctl_block_when_processing_errors(sdp->device,"
    },
    {
        "line": 11,
        "fullcodeline": "if ((!(sfp = (Sg_fd *) filp->private_data)) || (!(sdp = sfp->parentdp)))"
    },
    {
        "line": 14,
        "fullcodeline": "SCSI_LOG_TIMEOUT(3, sg_printk(KERN_INFO, sdp,"
    },
    {
        "line": 253,
        "fullcodeline": "return scsi_ioctl(sdp->device, cmd_in, p);"
    },
    {
        "line": 26,
        "fullcodeline": "result = sg_new_write(sfp, filp, p, SZ_SG_IO_HDR,"
    },
    {
        "line": 30,
        "fullcodeline": "result = wait_event_interruptible(sfp->read_wait,"
    },
    {
        "line": 34,
        "fullcodeline": "write_lock_irq(&sfp->rq_list_lock);"
    },
    {
        "line": 45,
        "fullcodeline": "result = get_user(val, ip);"
    },
    {
        "line": 93,
        "fullcodeline": "result = get_user(val, ip);"
    },
    {
        "line": 101,
        "fullcodeline": "read_lock_irqsave(&sfp->rq_list_lock, iflags);"
    },
    {
        "line": 102,
        "fullcodeline": "list_for_each_entry(srp, &sfp->rq_list, entry) {"
    },
    {
        "line": 114,
        "fullcodeline": "read_lock_irqsave(&sfp->rq_list_lock, iflags);"
    },
    {
        "line": 115,
        "fullcodeline": "val = 0;"
    },
    {
        "line": 116,
        "fullcodeline": "list_for_each_entry(srp, &sfp->rq_list, entry) {"
    },
    {
        "line": 125,
        "fullcodeline": "result = get_user(val, ip);"
    },
    {
        "line": 132,
        "fullcodeline": "mutex_lock(&sfp->f_mutex);"
    },
    {
        "line": 150,
        "fullcodeline": "result = get_user(val, ip);"
    },
    {
        "line": 158,
        "fullcodeline": "result = get_user(val, ip);"
    },
    {
        "line": 166,
        "fullcodeline": "result = get_user(val, ip);"
    },
    {
        "line": 177,
        "fullcodeline": "val = (sdp->device ? 1 : 0);"
    },
    {
        "line": 216,
        "fullcodeline": "result = get_user(val, ip);"
    },
    {
        "line": 250,
        "fullcodeline": "cmd_in, filp->f_flags & O_NDELAY);"
    },
    {
        "line": 12,
        "fullcodeline": "return -ENXIO;"
    },
    {
        "line": 20,
        "fullcodeline": "if (atomic_read(&sdp->detaching))"
    },
    {
        "line": 28,
        "fullcodeline": "if (result < 0)"
    },
    {
        "line": 48,
        "fullcodeline": "if (val < 0)"
    },
    {
        "line": 50,
        "fullcodeline": "if (val >= mult_frac((s64)INT_MAX, USER_HZ, HZ))"
    },
    {
        "line": 54,
        "fullcodeline": "sfp->timeout = mult_frac(val, HZ, USER_HZ);"
    },
    {
        "line": 68,
        "fullcodeline": "return put_user((int) sdp->device->host->unchecked_isa_dma, ip);"
    },
    {
        "line": 111,
        "fullcodeline": "__put_user(-1, ip);"
    },
    {
        "line": 121,
        "fullcodeline": "return put_user(val, ip);"
    },
    {
        "line": 123,
        "fullcodeline": "return put_user(sdp->sg_tablesize, ip);"
    },
    {
        "line": 128,
        "fullcodeline": "if (val < 0)"
    },
    {
        "line": 133,
        "fullcodeline": "if (val != sfp->reserve.bufflen) {"
    },
    {
        "line": 148,
        "fullcodeline": "return put_user(val, ip);"
    },
    {
        "line": 156,
        "fullcodeline": "return put_user((int) sfp->cmd_q, ip);"
    },
    {
        "line": 164,
        "fullcodeline": "return put_user((int) sfp->keep_orphan, ip);"
    },
    {
        "line": 169,
        "fullcodeline": "if (val > SG_MAX_CDB_SIZE)"
    },
    {
        "line": 174,
        "fullcodeline": "return put_user(sg_version_num, ip);"
    },
    {
        "line": 178,
        "fullcodeline": "return put_user(val, ip);"
    },
    {
        "line": 201,
        "fullcodeline": "return put_user(sdp->device->host->hostt->emulated, ip);"
    },
    {
        "line": 214,
        "fullcodeline": "return sg_scsi_ioctl(sdp->device->request_queue, NULL, filp->f_mode, p);"
    },
    {
        "line": 222,
        "fullcodeline": "return put_user(max_sectors_bytes(sdp->device->request_queue),"
    },
    {
        "line": 225,
        "fullcodeline": "return blk_trace_setup(sdp->device->request_queue,"
    },
    {
        "line": 230,
        "fullcodeline": "return blk_trace_startstop(sdp->device->request_queue, 1);"
    },
    {
        "line": 232,
        "fullcodeline": "return blk_trace_startstop(sdp->device->request_queue, 0);"
    },
    {
        "line": 234,
        "fullcodeline": "return blk_trace_remove(sdp->device->request_queue);"
    },
    {
        "line": 22,
        "fullcodeline": "if (!scsi_block_when_processing_errors(sdp->device))"
    },
    {
        "line": 24,
        "fullcodeline": "if (!access_ok(VERIFY_WRITE, p, SZ_SG_IO_HDR))"
    },
    {
        "line": 31,
        "fullcodeline": "(srp_done(sfp, srp) || atomic_read(&sdp->detaching)));"
    },
    {
        "line": 36,
        "fullcodeline": "srp->done = 2;"
    },
    {
        "line": 38,
        "fullcodeline": "result = sg_new_read(sfp, p, SZ_SG_IO_HDR, srp);"
    },
    {
        "line": 51,
        "fullcodeline": "val = min_t(s64, mult_frac((s64)INT_MAX, USER_HZ, HZ),"
    },
    {
        "line": 70,
        "fullcodeline": "if (!access_ok(VERIFY_WRITE, p, sizeof (sg_scsi_id_t)))"
    },
    {
        "line": 99,
        "fullcodeline": "if (!access_ok(VERIFY_WRITE, ip, sizeof (int)))"
    },
    {
        "line": 140,
        "fullcodeline": "sg_remove_scat(sfp, &sfp->reserve);"
    },
    {
        "line": 141,
        "fullcodeline": "sg_build_reserve(sfp, val);"
    },
    {
        "line": 171,
        "fullcodeline": "sfp->next_cmd_len = (val > 0) ? val : 0;"
    },
    {
        "line": 180,
        "fullcodeline": "if (!access_ok(VERIFY_WRITE, p, SZ_SG_REQ_INFO * SG_MAX_QUEUE))"
    },
    {
        "line": 206,
        "fullcodeline": "unsigned char opcode = WRITE_6;"
    },
    {
        "line": 227,
        "fullcodeline": "MKDEV(SCSI_GENERIC_MAJOR, sdp->index),"
    },
    {
        "line": 21,
        "fullcodeline": "return -ENODEV;"
    },
    {
        "line": 23,
        "fullcodeline": "return -ENXIO;"
    },
    {
        "line": 25,
        "fullcodeline": "return -EFAULT;"
    },
    {
        "line": 33,
        "fullcodeline": "return -ENODEV;"
    },
    {
        "line": 39,
        "fullcodeline": "return (result < 0) ? result : 0;"
    },
    {
        "line": 49,
        "fullcodeline": "return -EIO;"
    },
    {
        "line": 71,
        "fullcodeline": "return -EFAULT;"
    },
    {
        "line": 88,
        "fullcodeline": "__put_user(0, &sg_idp->unused[0]);"
    },
    {
        "line": 100,
        "fullcodeline": "return -EFAULT;"
    },
    {
        "line": 103,
        "fullcodeline": "if ((1 == srp->done) && (!srp->sg_io_owned)) {"
    },
    {
        "line": 117,
        "fullcodeline": "if ((1 == srp->done) && (!srp->sg_io_owned))"
    },
    {
        "line": 118,
        "fullcodeline": "++val;"
    },
    {
        "line": 129,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 134,
        "fullcodeline": "if (sfp->mmap_called ||"
    },
    {
        "line": 170,
        "fullcodeline": "return -ENOMEM;"
    },
    {
        "line": 181,
        "fullcodeline": "return -EFAULT;"
    },
    {
        "line": 185,
        "fullcodeline": "rinfo = kmalloc(SZ_SG_REQ_INFO * SG_MAX_QUEUE,"
    },
    {
        "line": 189,
        "fullcodeline": "read_lock_irqsave(&sfp->rq_list_lock, iflags);"
    },
    {
        "line": 190,
        "fullcodeline": "sg_fill_request_table(sfp, rinfo);"
    },
    {
        "line": 194,
        "fullcodeline": "result = result ? -EFAULT : 0;"
    },
    {
        "line": 200,
        "fullcodeline": "return -ENODEV;"
    },
    {
        "line": 204,
        "fullcodeline": "return -ENODEV;"
    },
    {
        "line": 209,
        "fullcodeline": "if (copy_from_user(&opcode, siocp->data, 1))"
    },
    {
        "line": 211,
        "fullcodeline": "if (sg_allow_access(filp, &opcode))"
    },
    {
        "line": 241,
        "fullcodeline": "return -ENODEV;"
    },
    {
        "line": 245,
        "fullcodeline": "return -EPERM;\t/* don't know so take safe approach */"
    },
    {
        "line": 187,
        "fullcodeline": "if (!rinfo)"
    },
    {
        "line": 192,
        "fullcodeline": "result = __copy_to_user(p, rinfo,"
    },
    {
        "line": 137,
        "fullcodeline": "return -EBUSY;"
    },
    {
        "line": 193,
        "fullcodeline": "SZ_SG_REQ_INFO * SG_MAX_QUEUE);"
    },
    {
        "line": 210,
        "fullcodeline": "return -EFAULT;"
    },
    {
        "line": 212,
        "fullcodeline": "return -EPERM;"
    },
    {
        "line": 76,
        "fullcodeline": "return -ENODEV;"
    },
    {
        "line": 188,
        "fullcodeline": "return -ENOMEM;"
    }
]