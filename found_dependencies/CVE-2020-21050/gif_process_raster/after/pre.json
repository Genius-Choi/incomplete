[
    {
        "line": 6,
        "fullcodeline": "SIXELSTATUS status = SIXEL_FALSE;"
    },
    {
        "line": 14,
        "fullcodeline": "lzw_cs = gif_get8(s);"
    },
    {
        "line": 22,
        "fullcodeline": "clear = 1 << lzw_cs;"
    },
    {
        "line": 23,
        "fullcodeline": "first = 1;"
    },
    {
        "line": 24,
        "fullcodeline": "codesize = lzw_cs + 1;"
    },
    {
        "line": 25,
        "fullcodeline": "codemask = (1 << codesize) - 1;"
    },
    {
        "line": 26,
        "fullcodeline": "bits = 0;"
    },
    {
        "line": 27,
        "fullcodeline": "valid_bits = 0;"
    },
    {
        "line": 35,
        "fullcodeline": "avail = clear + 2;"
    },
    {
        "line": 36,
        "fullcodeline": "oldcode = (-1);"
    },
    {
        "line": 38,
        "fullcodeline": "len = 0;"
    },
    {
        "line": 105,
        "fullcodeline": "status = SIXEL_OK;"
    },
    {
        "line": 15,
        "fullcodeline": "if (lzw_cs > gif_lzw_max_code_size) {"
    },
    {
        "line": 28,
        "fullcodeline": "for (code = 0; code < clear; code++) {"
    },
    {
        "line": 18,
        "fullcodeline": "status = SIXEL_RUNTIME_ERROR;"
    },
    {
        "line": 29,
        "fullcodeline": "g->codes[code].prefix = -1;"
    },
    {
        "line": 30,
        "fullcodeline": "g->codes[code].first = (unsigned char) code;"
    },
    {
        "line": 31,
        "fullcodeline": "g->codes[code].suffix = (unsigned char) code;"
    },
    {
        "line": 40,
        "fullcodeline": "if (valid_bits < codesize) {"
    },
    {
        "line": 47,
        "fullcodeline": "--len;"
    },
    {
        "line": 48,
        "fullcodeline": "bits |= (signed int) gif_get8(s) << valid_bits;"
    },
    {
        "line": 49,
        "fullcodeline": "valid_bits += 8;"
    },
    {
        "line": 41,
        "fullcodeline": "if (len == 0) {"
    },
    {
        "line": 51,
        "fullcodeline": "code = bits & codemask;"
    },
    {
        "line": 52,
        "fullcodeline": "bits >>= codesize;"
    },
    {
        "line": 53,
        "fullcodeline": "valid_bits -= codesize;"
    },
    {
        "line": 42,
        "fullcodeline": "len = gif_get8(s); /* start new block */"
    },
    {
        "line": 55,
        "fullcodeline": "if (code == clear) {  /* clear code */"
    },
    {
        "line": 43,
        "fullcodeline": "if (len == 0) {"
    },
    {
        "line": 56,
        "fullcodeline": "codesize = lzw_cs + 1;"
    },
    {
        "line": 57,
        "fullcodeline": "codemask = (1 << codesize) - 1;"
    },
    {
        "line": 58,
        "fullcodeline": "avail = clear + 2;"
    },
    {
        "line": 59,
        "fullcodeline": "oldcode = -1;"
    },
    {
        "line": 60,
        "fullcodeline": "first = 0;"
    },
    {
        "line": 61,
        "fullcodeline": "} else if (code == clear + 1) { /* end of stream code */"
    },
    {
        "line": 62,
        "fullcodeline": "s->img_buffer += len;"
    },
    {
        "line": 63,
        "fullcodeline": "while ((len = gif_get8(s)) > 0) {"
    },
    {
        "line": 64,
        "fullcodeline": "s->img_buffer += len;"
    },
    {
        "line": 67,
        "fullcodeline": "} else if (code <= avail) {"
    },
    {
        "line": 88,
        "fullcodeline": "gif_out_code(g, (unsigned short) code);"
    },
    {
        "line": 95,
        "fullcodeline": "oldcode = code;"
    },
    {
        "line": 74,
        "fullcodeline": "if (oldcode >= 0) {"
    },
    {
        "line": 90,
        "fullcodeline": "if ((avail & codemask) == 0 && avail <= 0x0FFF) {"
    },
    {
        "line": 99,
        "fullcodeline": "status = SIXEL_RUNTIME_ERROR;"
    },
    {
        "line": 71,
        "fullcodeline": "status = SIXEL_RUNTIME_ERROR;"
    },
    {
        "line": 91,
        "fullcodeline": "codesize++;"
    },
    {
        "line": 92,
        "fullcodeline": "codemask = (1 << codesize) - 1;"
    },
    {
        "line": 75,
        "fullcodeline": "if (avail < (1 << gif_lzw_max_code_size)) {"
    },
    {
        "line": 76,
        "fullcodeline": "p = &g->codes[avail++];"
    },
    {
        "line": 77,
        "fullcodeline": "p->prefix = (signed short) oldcode;"
    },
    {
        "line": 78,
        "fullcodeline": "p->first = g->codes[oldcode].first;"
    },
    {
        "line": 79,
        "fullcodeline": "p->suffix = (code == avail) ? p->first : g->codes[code].first;"
    },
    {
        "line": 81,
        "fullcodeline": "} else if (code == avail) {"
    },
    {
        "line": 84,
        "fullcodeline": "status = SIXEL_RUNTIME_ERROR;"
    }
]