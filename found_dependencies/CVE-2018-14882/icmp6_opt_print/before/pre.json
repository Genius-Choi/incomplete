[
    {
        "line": 19,
        "fullcodeline": "cp = bp;"
    },
    {
        "line": 21,
        "fullcodeline": "ep = ndo->ndo_snapend;"
    },
    {
        "line": 23,
        "fullcodeline": "while (cp < ep) {"
    },
    {
        "line": 148,
        "fullcodeline": "ND_PRINT((ndo, \"[ndp opt]\"));"
    },
    {
        "line": 24,
        "fullcodeline": "op = (const struct nd_opt_hdr *)cp;"
    },
    {
        "line": 26,
        "fullcodeline": "ECHECK(op->nd_opt_len);"
    },
    {
        "line": 34,
        "fullcodeline": "ND_PRINT((ndo,\"\\n\\t  %s option (%u), length %u (%u): \","
    },
    {
        "line": 142,
        "fullcodeline": "cp += op->nd_opt_len << 3;"
    },
    {
        "line": 143,
        "fullcodeline": "resid -= op->nd_opt_len << 3;"
    },
    {
        "line": 27,
        "fullcodeline": "if (resid <= 0)"
    },
    {
        "line": 29,
        "fullcodeline": "if (op->nd_opt_len == 0)"
    },
    {
        "line": 31,
        "fullcodeline": "if (cp + (op->nd_opt_len << 3) > ep)"
    },
    {
        "line": 139,
        "fullcodeline": "if (ndo->ndo_vflag> 1)"
    },
    {
        "line": 42,
        "fullcodeline": "l = (op->nd_opt_len << 3) - 2;"
    },
    {
        "line": 43,
        "fullcodeline": "print_lladdr(ndo, cp + 2, l);"
    },
    {
        "line": 46,
        "fullcodeline": "l = (op->nd_opt_len << 3) - 2;"
    },
    {
        "line": 47,
        "fullcodeline": "print_lladdr(ndo, cp + 2, l);"
    },
    {
        "line": 50,
        "fullcodeline": "opp = (const struct nd_opt_prefix_info *)op;"
    },
    {
        "line": 51,
        "fullcodeline": "ND_TCHECK(opp->nd_opt_pi_prefix);"
    },
    {
        "line": 52,
        "fullcodeline": "ND_PRINT((ndo,\"%s/%u%s, Flags [%s], valid time %s\","
    },
    {
        "line": 58,
        "fullcodeline": "ND_PRINT((ndo,\", pref. time %s\", get_lifetime(EXTRACT_32BITS(&opp->nd_opt_pi_preferred_time))));"
    },
    {
        "line": 61,
        "fullcodeline": "print_unknown_data(ndo, bp,\"\\n\\t    \",op->nd_opt_len<<3);"
    },
    {
        "line": 65,
        "fullcodeline": "opm = (const struct nd_opt_mtu *)op;"
    },
    {
        "line": 66,
        "fullcodeline": "ND_TCHECK(opm->nd_opt_mtu_mtu);"
    },
    {
        "line": 67,
        "fullcodeline": "ND_PRINT((ndo,\" %u%s\","
    },
    {
        "line": 72,
        "fullcodeline": "oprd = (const struct nd_opt_rdnss *)op;"
    },
    {
        "line": 73,
        "fullcodeline": "l = (op->nd_opt_len - 1) / 2;"
    },
    {
        "line": 74,
        "fullcodeline": "ND_PRINT((ndo,\" lifetime %us,\","
    },
    {
        "line": 83,
        "fullcodeline": "opds = (const struct nd_opt_dnssl *)op;"
    },
    {
        "line": 84,
        "fullcodeline": "ND_PRINT((ndo,\" lifetime %us, domain(s):\","
    },
    {
        "line": 86,
        "fullcodeline": "domp = cp + 8; /* domain names, variable-sized, RFC1035-encoded */"
    },
    {
        "line": 95,
        "fullcodeline": "opa = (const struct nd_opt_advinterval *)op;"
    },
    {
        "line": 96,
        "fullcodeline": "ND_TCHECK(opa->nd_opt_adv_interval);"
    },
    {
        "line": 97,
        "fullcodeline": "ND_PRINT((ndo,\" %ums\", EXTRACT_32BITS(&opa->nd_opt_adv_interval)));"
    },
    {
        "line": 100,
        "fullcodeline": "oph = (const struct nd_opt_homeagent_info *)op;"
    },
    {
        "line": 101,
        "fullcodeline": "ND_TCHECK(oph->nd_opt_hai_lifetime);"
    },
    {
        "line": 102,
        "fullcodeline": "ND_PRINT((ndo,\" preference %u, lifetime %u\","
    },
    {
        "line": 107,
        "fullcodeline": "opri = (const struct nd_opt_route_info *)op;"
    },
    {
        "line": 108,
        "fullcodeline": "ND_TCHECK(opri->nd_opt_rti_lifetime);"
    },
    {
        "line": 109,
        "fullcodeline": "memset(&in6, 0, sizeof(in6));"
    },
    {
        "line": 110,
        "fullcodeline": "in6p = (const struct in6_addr *)(opri + 1);"
    },
    {
        "line": 125,
        "fullcodeline": "ND_PRINT((ndo,\" %s/%u\", ip6addr_string(ndo, &in6),"
    },
    {
        "line": 127,
        "fullcodeline": "ND_PRINT((ndo,\", pref=%s\", get_rtpref(opri->nd_opt_rti_flags)));"
    },
    {
        "line": 128,
        "fullcodeline": "ND_PRINT((ndo,\", lifetime=%s\","
    },
    {
        "line": 140,
        "fullcodeline": "print_unknown_data(ndo, cp+2,\"\\n\\t    \", (op->nd_opt_len << 3) - 2); /* skip option header */"
    },
    {
        "line": 35,
        "fullcodeline": "tok2str(icmp6_opt_values, \"unknown\", op->nd_opt_type),"
    },
    {
        "line": 37,
        "fullcodeline": "op->nd_opt_len << 3,"
    },
    {
        "line": 76,
        "fullcodeline": "for (i = 0; i < l; i++) {"
    },
    {
        "line": 87,
        "fullcodeline": "while (domp < cp + (op->nd_opt_len << 3) && *domp != '\\0')"
    },
    {
        "line": 132,
        "fullcodeline": "if (ndo->ndo_vflag <= 1) {"
    },
    {
        "line": 77,
        "fullcodeline": "ND_TCHECK(oprd->nd_opt_rdnss_addr[i]);"
    },
    {
        "line": 78,
        "fullcodeline": "ND_PRINT((ndo,\" addr: %s\","
    },
    {
        "line": 89,
        "fullcodeline": "ND_PRINT((ndo, \" \"));"
    },
    {
        "line": 115,
        "fullcodeline": "ND_TCHECK2(*in6p, 8);"
    },
    {
        "line": 116,
        "fullcodeline": "memcpy(&in6, opri + 1, 8);"
    },
    {
        "line": 119,
        "fullcodeline": "ND_TCHECK(*in6p);"
    },
    {
        "line": 120,
        "fullcodeline": "memcpy(&in6, opri + 1, sizeof(in6));"
    },
    {
        "line": 53,
        "fullcodeline": "ip6addr_string(ndo, &opp->nd_opt_pi_prefix),"
    },
    {
        "line": 55,
        "fullcodeline": "(op->nd_opt_len != 4) ? \"badlen\" : \"\","
    },
    {
        "line": 56,
        "fullcodeline": "bittok2str(icmp6_opt_pi_flag_values, \"none\", opp->nd_opt_pi_flags_reserved),"
    },
    {
        "line": 57,
        "fullcodeline": "get_lifetime(EXTRACT_32BITS(&opp->nd_opt_pi_valid_time))));"
    },
    {
        "line": 68,
        "fullcodeline": "EXTRACT_32BITS(&opm->nd_opt_mtu_mtu),"
    },
    {
        "line": 69,
        "fullcodeline": "(op->nd_opt_len != 1) ? \"bad option length\" : \"\" ));"
    },
    {
        "line": 75,
        "fullcodeline": "EXTRACT_32BITS(&oprd->nd_opt_rdnss_lifetime)));"
    },
    {
        "line": 85,
        "fullcodeline": "EXTRACT_32BITS(&opds->nd_opt_dnssl_lifetime)));"
    },
    {
        "line": 90,
        "fullcodeline": "if ((domp = ns_nprint (ndo, domp, bp)) == NULL)"
    },
    {
        "line": 103,
        "fullcodeline": "EXTRACT_16BITS(&oph->nd_opt_hai_preference),"
    },
    {
        "line": 104,
        "fullcodeline": "EXTRACT_16BITS(&oph->nd_opt_hai_lifetime)));"
    },
    {
        "line": 129,
        "fullcodeline": "get_lifetime(EXTRACT_32BITS(&opri->nd_opt_rti_lifetime))));"
    },
    {
        "line": 133,
        "fullcodeline": "print_unknown_data(ndo,cp+2,\"\\n\\t  \", (op->nd_opt_len << 3) - 2); /* skip option header */"
    },
    {
        "line": 79,
        "fullcodeline": "ip6addr_string(ndo, &oprd->nd_opt_rdnss_addr[i])));"
    }
]