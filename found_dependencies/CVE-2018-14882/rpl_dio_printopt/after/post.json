[
    {
        "line": 6,
        "fullcodeline": "length -= RPL_DIO_GENOPTION_LEN;"
    },
    {
        "line": 8,
        "fullcodeline": "ND_TCHECK(opt->rpl_dio_len);"
    },
    {
        "line": 5,
        "fullcodeline": "if(length < RPL_DIO_GENOPTION_LEN) return;"
    },
    {
        "line": 10,
        "fullcodeline": "while((opt->rpl_dio_type == RPL_OPT_PAD0 &&"
    },
    {
        "line": 12,
        "fullcodeline": "ND_TTEST2(*opt,(opt->rpl_dio_len+2))) {"
    },
    {
        "line": 14,
        "fullcodeline": "unsigned int optlen = opt->rpl_dio_len+2;"
    },
    {
        "line": 31,
        "fullcodeline": "opt = (const struct rpl_dio_genoption *)(((const char *)opt) + optlen);"
    },
    {
        "line": 32,
        "fullcodeline": "length -= optlen;"
    },
    {
        "line": 33,
        "fullcodeline": "ND_TCHECK(opt->rpl_dio_len);"
    },
    {
        "line": 11,
        "fullcodeline": "(const u_char *)opt < ndo->ndo_snapend) ||"
    },
    {
        "line": 15,
        "fullcodeline": "if(opt->rpl_dio_type == RPL_OPT_PAD0) {"
    },
    {
        "line": 16,
        "fullcodeline": "optlen = 1;"
    },
    {
        "line": 17,
        "fullcodeline": "ND_PRINT((ndo, \" opt:pad0\"));"
    },
    {
        "line": 19,
        "fullcodeline": "ND_PRINT((ndo, \" opt:%s len:%u \","
    },
    {
        "line": 22,
        "fullcodeline": "if(ndo->ndo_vflag > 2) {"
    },
    {
        "line": 23,
        "fullcodeline": "unsigned int paylen = opt->rpl_dio_len;"
    },
    {
        "line": 25,
        "fullcodeline": "hex_print(ndo,"
    },
    {
        "line": 20,
        "fullcodeline": "tok2str(rpl_subopt_values, \"subopt:%u\", opt->rpl_dio_type),"
    },
    {
        "line": 24,
        "fullcodeline": "if(paylen > length) paylen = length;"
    },
    {
        "line": 27,
        "fullcodeline": "((const uint8_t *)opt) + RPL_DIO_GENOPTION_LEN,  /* content of DIO option */"
    }
]