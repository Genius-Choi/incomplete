[
    {
        "line": 3,
        "fullcodeline": "const struct icmp6_hdr *icp = (const struct icmp6_hdr *) bp;"
    },
    {
        "line": 15,
        "fullcodeline": "mrc = EXTRACT_16BITS(&icp->icmp6_data16[0]);"
    },
    {
        "line": 24,
        "fullcodeline": "ND_TCHECK2(bp[8], sizeof(struct in6_addr));"
    },
    {
        "line": 25,
        "fullcodeline": "ND_PRINT((ndo,\" [gaddr %s\", ip6addr_string(ndo, &bp[8])));"
    },
    {
        "line": 43,
        "fullcodeline": "ND_TCHECK2(bp[26], 2);"
    },
    {
        "line": 44,
        "fullcodeline": "nsrcs = EXTRACT_16BITS(&bp[26]);"
    },
    {
        "line": 59,
        "fullcodeline": "ND_PRINT((ndo,\"]\"));"
    },
    {
        "line": 10,
        "fullcodeline": "if (len < 28) {"
    },
    {
        "line": 16,
        "fullcodeline": "if (mrc < 32768) {"
    },
    {
        "line": 45,
        "fullcodeline": "if (nsrcs > 0) {"
    },
    {
        "line": 11,
        "fullcodeline": "ND_PRINT((ndo,\" [invalid len %d]\", len));"
    },
    {
        "line": 17,
        "fullcodeline": "mrt = mrc;"
    },
    {
        "line": 22,
        "fullcodeline": "ND_PRINT((ndo,\" [max resp delay=%d]\", mrt));"
    },
    {
        "line": 28,
        "fullcodeline": "ND_TCHECK(bp[25]);"
    },
    {
        "line": 40,
        "fullcodeline": "ND_PRINT((ndo,\" qqi=%d\", qqi));"
    },
    {
        "line": 19,
        "fullcodeline": "mrt = ((mrc & 0x0fff) | 0x1000) << (((mrc & 0x7000) >> 12) + 3);"
    },
    {
        "line": 29,
        "fullcodeline": "if (bp[24] & 0x08) {"
    },
    {
        "line": 32,
        "fullcodeline": "if (bp[24] & 0x07) {"
    },
    {
        "line": 35,
        "fullcodeline": "if (bp[25] < 128) {"
    },
    {
        "line": 46,
        "fullcodeline": "if (len < 28 + nsrcs * sizeof(struct in6_addr))"
    },
    {
        "line": 30,
        "fullcodeline": "ND_PRINT((ndo,\" sflag\"));"
    },
    {
        "line": 33,
        "fullcodeline": "ND_PRINT((ndo,\" robustness=%d\", bp[24] & 0x07));"
    },
    {
        "line": 36,
        "fullcodeline": "qqi = bp[25];"
    },
    {
        "line": 47,
        "fullcodeline": "ND_PRINT((ndo,\" [invalid number of sources]\"));"
    },
    {
        "line": 38,
        "fullcodeline": "qqi = ((bp[25] & 0x0f) | 0x10) << (((bp[25] & 0x70) >> 4) + 3);"
    },
    {
        "line": 48,
        "fullcodeline": "else if (ndo->ndo_vflag > 1) {"
    },
    {
        "line": 49,
        "fullcodeline": "ND_PRINT((ndo,\" {\"));"
    },
    {
        "line": 55,
        "fullcodeline": "ND_PRINT((ndo,\" }\"));"
    },
    {
        "line": 50,
        "fullcodeline": "for (i = 0; i < nsrcs; i++) {"
    },
    {
        "line": 57,
        "fullcodeline": "ND_PRINT((ndo,\", %d source(s)\", nsrcs));"
    },
    {
        "line": 51,
        "fullcodeline": "ND_TCHECK2(bp[28 + i * sizeof(struct in6_addr)],"
    },
    {
        "line": 53,
        "fullcodeline": "ND_PRINT((ndo,\" %s\", ip6addr_string(ndo, &bp[28 + i * sizeof(struct in6_addr)])));"
    }
]