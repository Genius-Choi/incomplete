[
    {
        "line": 8,
        "fullcodeline": "char flag[4];"
    },
    {
        "line": 10,
        "fullcodeline": "MODE = get_elf_class(elf);"
    },
    {
        "line": 12,
        "fullcodeline": "fd = open(elf, O_RDONLY);"
    },
    {
        "line": 23,
        "fullcodeline": "elf_map = mmap(0, st.st_size, PROT_READ | PROT_WRITE, MAP_PRIVATE, fd, 0);"
    },
    {
        "line": 13,
        "fullcodeline": "if (fd < 0) {"
    },
    {
        "line": 18,
        "fullcodeline": "if (fstat(fd, &st) < 0) {"
    },
    {
        "line": 24,
        "fullcodeline": "if (elf_map == MAP_FAILED) {"
    },
    {
        "line": 30,
        "fullcodeline": "if (MODE == ELFCLASS32) {"
    },
    {
        "line": 676,
        "fullcodeline": "if (MODE == ELFCLASS64) {"
    },
    {
        "line": 14,
        "fullcodeline": "perror(\"open\");"
    },
    {
        "line": 19,
        "fullcodeline": "perror(\"fstat\");"
    },
    {
        "line": 25,
        "fullcodeline": "perror(\"mmap\");"
    },
    {
        "line": 33,
        "fullcodeline": "ehdr = (Elf32_Ehdr *)elf_map;"
    },
    {
        "line": 35,
        "fullcodeline": "INFO(\"ELF Header\\n\");"
    },
    {
        "line": 61,
        "fullcodeline": "PRINT_HEADER_EXP(\"e_type:\", ehdr->e_type, tmp);"
    },
    {
        "line": 144,
        "fullcodeline": "PRINT_HEADER_EXP(\"e_machine:\", ehdr->e_machine, tmp);"
    },
    {
        "line": 159,
        "fullcodeline": "PRINT_HEADER_EXP(\"e_version:\", ehdr->e_version, tmp);"
    },
    {
        "line": 160,
        "fullcodeline": "PRINT_HEADER(\"e_entry:\", ehdr->e_entry);"
    },
    {
        "line": 161,
        "fullcodeline": "PRINT_HEADER(\"e_phoff:\", ehdr->e_phoff);"
    },
    {
        "line": 162,
        "fullcodeline": "PRINT_HEADER(\"e_shoff:\", ehdr->e_shoff);"
    },
    {
        "line": 163,
        "fullcodeline": "PRINT_HEADER(\"e_flags:\", ehdr->e_flags);"
    },
    {
        "line": 164,
        "fullcodeline": "PRINT_HEADER(\"e_ehsize:\", ehdr->e_ehsize);"
    },
    {
        "line": 165,
        "fullcodeline": "PRINT_HEADER(\"e_phentsize:\", ehdr->e_phentsize);"
    },
    {
        "line": 166,
        "fullcodeline": "PRINT_HEADER(\"e_phnum:\", ehdr->e_phnum);"
    },
    {
        "line": 167,
        "fullcodeline": "PRINT_HEADER(\"e_shentsize:\", ehdr->e_shentsize);"
    },
    {
        "line": 168,
        "fullcodeline": "PRINT_HEADER(\"e_shentsize:\", ehdr->e_shentsize);"
    },
    {
        "line": 169,
        "fullcodeline": "PRINT_HEADER(\"e_shstrndx:\", ehdr->e_shstrndx);"
    },
    {
        "line": 176,
        "fullcodeline": "shdr = (Elf32_Shdr *)&elf_map[ehdr->e_shoff];"
    },
    {
        "line": 177,
        "fullcodeline": "phdr = (Elf32_Phdr *)&elf_map[ehdr->e_phoff];"
    },
    {
        "line": 178,
        "fullcodeline": "shstrtab = shdr[ehdr->e_shstrndx];"
    },
    {
        "line": 180,
        "fullcodeline": "INFO(\"Section Header Table\\n\");"
    },
    {
        "line": 181,
        "fullcodeline": "PRINT_SECTION_TITLE(\"Nr\", \"Name\", \"Type\", \"Addr\", \"Off\", \"Size\", \"Es\", \"Flg\", \"Lk\", \"Inf\", \"Al\");"
    },
    {
        "line": 263,
        "fullcodeline": "INFO(\"Program Header Table\\n\");"
    },
    {
        "line": 264,
        "fullcodeline": "PRINT_PROGRAM_TITLE(\"Nr\", \"Type\", \"Offset\", \"Virtaddr\", \"Physaddr\", \"Filesiz\", \"Memsiz\", \"Flg\", \"Align\");"
    },
    {
        "line": 315,
        "fullcodeline": "INFO(\"Section to segment mapping\\n\");"
    },
    {
        "line": 329,
        "fullcodeline": "INFO(\"Dynamic link information\\n\");"
    },
    {
        "line": 343,
        "fullcodeline": "char value[50];"
    },
    {
        "line": 344,
        "fullcodeline": "name = \"\";"
    },
    {
        "line": 345,
        "fullcodeline": "dyn = (Elf32_Dyn *)&elf_map[shdr[dynamic].sh_offset];"
    },
    {
        "line": 346,
        "fullcodeline": "count = shdr[dynamic].sh_size / sizeof(Elf32_Dyn);"
    },
    {
        "line": 347,
        "fullcodeline": "INFO(\"Dynamic section at offset 0x%x contains %d entries\\n\", shdr[dynamic].sh_offset, count);"
    },
    {
        "line": 348,
        "fullcodeline": "PRINT_DYN_TITLE(\"Tag\", \"Type\", \"Name/Value\");"
    },
    {
        "line": 679,
        "fullcodeline": "ehdr = (Elf64_Ehdr *)elf_map;"
    },
    {
        "line": 681,
        "fullcodeline": "INFO(\"ELF Header\\n\");"
    },
    {
        "line": 707,
        "fullcodeline": "PRINT_HEADER_EXP(\"e_type:\", ehdr->e_type, tmp);"
    },
    {
        "line": 790,
        "fullcodeline": "PRINT_HEADER_EXP(\"e_machine:\", ehdr->e_machine, tmp);"
    },
    {
        "line": 805,
        "fullcodeline": "PRINT_HEADER_EXP(\"e_version:\", ehdr->e_version, tmp);"
    },
    {
        "line": 806,
        "fullcodeline": "PRINT_HEADER(\"e_entry:\", ehdr->e_entry);"
    },
    {
        "line": 807,
        "fullcodeline": "PRINT_HEADER(\"e_phoff:\", ehdr->e_phoff);"
    },
    {
        "line": 808,
        "fullcodeline": "PRINT_HEADER(\"e_shoff:\", ehdr->e_shoff);"
    },
    {
        "line": 809,
        "fullcodeline": "PRINT_HEADER(\"e_flags:\", ehdr->e_flags);"
    },
    {
        "line": 810,
        "fullcodeline": "PRINT_HEADER(\"e_ehsize:\", ehdr->e_ehsize);"
    },
    {
        "line": 811,
        "fullcodeline": "PRINT_HEADER(\"e_phentsize:\", ehdr->e_phentsize);"
    },
    {
        "line": 812,
        "fullcodeline": "PRINT_HEADER(\"e_phnum:\", ehdr->e_phnum);"
    },
    {
        "line": 813,
        "fullcodeline": "PRINT_HEADER(\"e_shentsize:\", ehdr->e_shentsize);"
    },
    {
        "line": 814,
        "fullcodeline": "PRINT_HEADER(\"e_shentsize:\", ehdr->e_shentsize);"
    },
    {
        "line": 815,
        "fullcodeline": "PRINT_HEADER(\"e_shstrndx:\", ehdr->e_shstrndx);"
    },
    {
        "line": 822,
        "fullcodeline": "shdr = (Elf64_Shdr *)&elf_map[ehdr->e_shoff];"
    },
    {
        "line": 823,
        "fullcodeline": "phdr = (Elf64_Phdr *)&elf_map[ehdr->e_phoff];"
    },
    {
        "line": 824,
        "fullcodeline": "shstrtab = shdr[ehdr->e_shstrndx];"
    },
    {
        "line": 826,
        "fullcodeline": "INFO(\"Section Header Table\\n\");"
    },
    {
        "line": 827,
        "fullcodeline": "PRINT_SECTION_TITLE(\"Nr\", \"Name\", \"Type\", \"Addr\", \"Off\", \"Size\", \"Es\", \"Flg\", \"Lk\", \"Inf\", \"Al\");"
    },
    {
        "line": 909,
        "fullcodeline": "INFO(\"Program Header Table\\n\");"
    },
    {
        "line": 910,
        "fullcodeline": "PRINT_PROGRAM_TITLE(\"Nr\", \"Type\", \"Offset\", \"Virtaddr\", \"Physaddr\", \"Filesiz\", \"Memsiz\", \"Flg\", \"Align\");"
    },
    {
        "line": 961,
        "fullcodeline": "INFO(\"Section to segment mapping\\n\");"
    },
    {
        "line": 975,
        "fullcodeline": "INFO(\"Dynamic link information\\n\");"
    },
    {
        "line": 989,
        "fullcodeline": "char value[50];"
    },
    {
        "line": 990,
        "fullcodeline": "name = \"\";"
    },
    {
        "line": 991,
        "fullcodeline": "dyn = (Elf64_Dyn *)&elf_map[shdr[dynamic].sh_offset];"
    },
    {
        "line": 992,
        "fullcodeline": "count = shdr[dynamic].sh_size / sizeof(Elf64_Dyn);"
    },
    {
        "line": 993,
        "fullcodeline": "INFO(\"Dynamic section at offset 0x%x contains %d entries\\n\", shdr[dynamic].sh_offset, count);"
    },
    {
        "line": 994,
        "fullcodeline": "PRINT_DYN_TITLE(\"Tag\", \"Type\", \"Name/Value\");"
    },
    {
        "line": 15,
        "fullcodeline": "return -1;"
    },
    {
        "line": 20,
        "fullcodeline": "return -1;"
    },
    {
        "line": 26,
        "fullcodeline": "return -1;"
    },
    {
        "line": 182,
        "fullcodeline": "for (int i = 0; i < ehdr->e_shnum; i++) {"
    },
    {
        "line": 265,
        "fullcodeline": "for (int i = 0; i < ehdr->e_phnum; i++) {"
    },
    {
        "line": 316,
        "fullcodeline": "for (int i = 0; i < ehdr->e_phnum; i++) {"
    },
    {
        "line": 333,
        "fullcodeline": "for (int i = 0; i < ehdr->e_shnum; i++) {"
    },
    {
        "line": 350,
        "fullcodeline": "for(int i = 0; i < count; i++) {"
    },
    {
        "line": 828,
        "fullcodeline": "for (int i = 0; i < ehdr->e_shnum; i++) {"
    },
    {
        "line": 911,
        "fullcodeline": "for (int i = 0; i < ehdr->e_phnum; i++) {"
    },
    {
        "line": 962,
        "fullcodeline": "for (int i = 0; i < ehdr->e_phnum; i++) {"
    },
    {
        "line": 979,
        "fullcodeline": "for (int i = 0; i < ehdr->e_shnum; i++) {"
    },
    {
        "line": 996,
        "fullcodeline": "for(int i = 0; i < count; i++) {"
    },
    {
        "line": 38,
        "fullcodeline": "tmp = \"An unknown type\";"
    },
    {
        "line": 42,
        "fullcodeline": "tmp = \"A relocatable file\";"
    },
    {
        "line": 46,
        "fullcodeline": "tmp = \"An executable file\";"
    },
    {
        "line": 50,
        "fullcodeline": "tmp = \"A shared object\";"
    },
    {
        "line": 54,
        "fullcodeline": "tmp = \"A core file\";"
    },
    {
        "line": 58,
        "fullcodeline": "tmp = \"An unknown type\";"
    },
    {
        "line": 65,
        "fullcodeline": "tmp = \"An unknown machine\";"
    },
    {
        "line": 69,
        "fullcodeline": "tmp = \"AT&T WE 32100\";"
    },
    {
        "line": 73,
        "fullcodeline": "tmp = \"Sun Microsystems SPARC\";"
    },
    {
        "line": 77,
        "fullcodeline": "tmp = \"Intel 80386\";"
    },
    {
        "line": 81,
        "fullcodeline": "tmp = \"Motorola 68000\";"
    },
    {
        "line": 85,
        "fullcodeline": "tmp = \"Motorola 88000\";"
    },
    {
        "line": 89,
        "fullcodeline": "tmp = \"Intel 80860\";"
    },
    {
        "line": 93,
        "fullcodeline": "tmp = \"MIPS RS3000 (big-endian only)\";"
    },
    {
        "line": 97,
        "fullcodeline": "tmp = \"HP/PA\";"
    },
    {
        "line": 101,
        "fullcodeline": "tmp = \"SPARC with enhanced instruction set\";"
    },
    {
        "line": 105,
        "fullcodeline": "tmp = \"PowerPC\";"
    },
    {
        "line": 109,
        "fullcodeline": "tmp = \"PowerPC 64-bit\";"
    },
    {
        "line": 113,
        "fullcodeline": "tmp = \"IBM S/390\";"
    },
    {
        "line": 117,
        "fullcodeline": "tmp = \"Advanced RISC Machines\";"
    },
    {
        "line": 121,
        "fullcodeline": "tmp = \"Renesas SuperH\";"
    },
    {
        "line": 125,
        "fullcodeline": "tmp = \"SPARC v9 64-bit\";"
    },
    {
        "line": 129,
        "fullcodeline": "tmp = \"Intel Itanium\";"
    },
    {
        "line": 133,
        "fullcodeline": "tmp = \"AMD x86-64\";"
    },
    {
        "line": 137,
        "fullcodeline": "tmp = \"DEC Vax\";"
    },
    {
        "line": 141,
        "fullcodeline": "tmp = \"An unknown machine\";"
    },
    {
        "line": 148,
        "fullcodeline": "tmp = \"Invalid version\";"
    },
    {
        "line": 152,
        "fullcodeline": "tmp = \"Current version\";"
    },
    {
        "line": 156,
        "fullcodeline": "tmp = \"Known version\";"
    },
    {
        "line": 183,
        "fullcodeline": "name = elf_map + shstrtab.sh_offset + shdr[i].sh_name;"
    },
    {
        "line": 257,
        "fullcodeline": "strcpy(flag, \"   \");"
    },
    {
        "line": 258,
        "fullcodeline": "flag2str_sh(shdr[i].sh_flags, flag);"
    },
    {
        "line": 259,
        "fullcodeline": "PRINT_SECTION(i, name, tmp, shdr[i].sh_addr, shdr[i].sh_offset, shdr[i].sh_size, shdr[i].sh_entsize, \\"
    },
    {
        "line": 310,
        "fullcodeline": "strcpy(flag, \"   \");"
    },
    {
        "line": 311,
        "fullcodeline": "flag2str(phdr[i].p_flags, flag);"
    },
    {
        "line": 312,
        "fullcodeline": "PRINT_PROGRAM(i, tmp, phdr[i].p_offset, phdr[i].p_vaddr, phdr[i].p_paddr, phdr[i].p_filesz, phdr[i].p_memsz, flag, phdr[i].p_align);"
    },
    {
        "line": 317,
        "fullcodeline": "printf(\"     [%2d]\", i);"
    },
    {
        "line": 326,
        "fullcodeline": "printf(\"\\n\");"
    },
    {
        "line": 334,
        "fullcodeline": "name = elf_map + shstrtab.sh_offset + shdr[i].sh_name;"
    },
    {
        "line": 351,
        "fullcodeline": "tmp = \"\";"
    },
    {
        "line": 352,
        "fullcodeline": "memset(value, 0, 50);"
    },
    {
        "line": 353,
        "fullcodeline": "snprintf(value, 50, \"0x%x\", dyn[i].d_un.d_val);"
    },
    {
        "line": 671,
        "fullcodeline": "PRINT_DYN(dyn[i].d_tag, tmp, value);"
    },
    {
        "line": 684,
        "fullcodeline": "tmp = \"An unknown type\";"
    },
    {
        "line": 688,
        "fullcodeline": "tmp = \"A relocatable file\";"
    },
    {
        "line": 692,
        "fullcodeline": "tmp = \"An executable file\";"
    },
    {
        "line": 696,
        "fullcodeline": "tmp = \"A shared object\";"
    },
    {
        "line": 700,
        "fullcodeline": "tmp = \"A core file\";"
    },
    {
        "line": 704,
        "fullcodeline": "tmp = \"An unknown type\";"
    },
    {
        "line": 711,
        "fullcodeline": "tmp = \"An unknown machine\";"
    },
    {
        "line": 715,
        "fullcodeline": "tmp = \"AT&T WE 32100\";"
    },
    {
        "line": 719,
        "fullcodeline": "tmp = \"Sun Microsystems SPARC\";"
    },
    {
        "line": 723,
        "fullcodeline": "tmp = \"Intel 80386\";"
    },
    {
        "line": 727,
        "fullcodeline": "tmp = \"Motorola 68000\";"
    },
    {
        "line": 731,
        "fullcodeline": "tmp = \"Motorola 88000\";"
    },
    {
        "line": 735,
        "fullcodeline": "tmp = \"Intel 80860\";"
    },
    {
        "line": 739,
        "fullcodeline": "tmp = \"MIPS RS3000 (big-endian only)\";"
    },
    {
        "line": 743,
        "fullcodeline": "tmp = \"HP/PA\";"
    },
    {
        "line": 747,
        "fullcodeline": "tmp = \"SPARC with enhanced instruction set\";"
    },
    {
        "line": 751,
        "fullcodeline": "tmp = \"PowerPC\";"
    },
    {
        "line": 755,
        "fullcodeline": "tmp = \"PowerPC 64-bit\";"
    },
    {
        "line": 759,
        "fullcodeline": "tmp = \"IBM S/390\";"
    },
    {
        "line": 763,
        "fullcodeline": "tmp = \"Advanced RISC Machines\";"
    },
    {
        "line": 767,
        "fullcodeline": "tmp = \"Renesas SuperH\";"
    },
    {
        "line": 771,
        "fullcodeline": "tmp = \"SPARC v9 64-bit\";"
    },
    {
        "line": 775,
        "fullcodeline": "tmp = \"Intel Itanium\";"
    },
    {
        "line": 779,
        "fullcodeline": "tmp = \"AMD x86-64\";"
    },
    {
        "line": 783,
        "fullcodeline": "tmp = \"DEC Vax\";"
    },
    {
        "line": 787,
        "fullcodeline": "tmp = \"An unknown machine\";"
    },
    {
        "line": 794,
        "fullcodeline": "tmp = \"Invalid version\";"
    },
    {
        "line": 798,
        "fullcodeline": "tmp = \"Current version\";"
    },
    {
        "line": 802,
        "fullcodeline": "tmp = \"Known version\";"
    },
    {
        "line": 829,
        "fullcodeline": "name = elf_map + shstrtab.sh_offset + shdr[i].sh_name;"
    },
    {
        "line": 903,
        "fullcodeline": "strcpy(flag, \"   \");"
    },
    {
        "line": 904,
        "fullcodeline": "flag2str_sh(shdr[i].sh_flags, flag);"
    },
    {
        "line": 905,
        "fullcodeline": "PRINT_SECTION(i, name, tmp, shdr[i].sh_addr, shdr[i].sh_offset, shdr[i].sh_size, shdr[i].sh_entsize, \\"
    },
    {
        "line": 956,
        "fullcodeline": "strcpy(flag, \"   \");"
    },
    {
        "line": 957,
        "fullcodeline": "flag2str(phdr[i].p_flags, flag);"
    },
    {
        "line": 958,
        "fullcodeline": "PRINT_PROGRAM(i, tmp, phdr[i].p_offset, phdr[i].p_vaddr, phdr[i].p_paddr, phdr[i].p_filesz, phdr[i].p_memsz, flag, phdr[i].p_align);"
    },
    {
        "line": 963,
        "fullcodeline": "printf(\"     [%2d]\", i);"
    },
    {
        "line": 972,
        "fullcodeline": "printf(\"\\n\");"
    },
    {
        "line": 980,
        "fullcodeline": "name = elf_map + shstrtab.sh_offset + shdr[i].sh_name;"
    },
    {
        "line": 997,
        "fullcodeline": "tmp = \"\";"
    },
    {
        "line": 998,
        "fullcodeline": "memset(value, 0, 50);"
    },
    {
        "line": 999,
        "fullcodeline": "snprintf(value, 50, \"0x%x\", dyn[i].d_un.d_val);"
    },
    {
        "line": 1317,
        "fullcodeline": "PRINT_DYN(dyn[i].d_tag, tmp, value);"
    },
    {
        "line": 254,
        "fullcodeline": "if (strlen(name) > 15) {"
    },
    {
        "line": 318,
        "fullcodeline": "for (int j = 0; j < ehdr->e_shnum; j++) {"
    },
    {
        "line": 335,
        "fullcodeline": "if (!strcmp(name, \".dynstr\")) {"
    },
    {
        "line": 338,
        "fullcodeline": "if (!strcmp(name, \".dynamic\")) {"
    },
    {
        "line": 900,
        "fullcodeline": "if (strlen(name) > 15) {"
    },
    {
        "line": 964,
        "fullcodeline": "for (int j = 0; j < ehdr->e_shnum; j++) {"
    },
    {
        "line": 981,
        "fullcodeline": "if (!strcmp(name, \".dynstr\")) {"
    },
    {
        "line": 984,
        "fullcodeline": "if (!strcmp(name, \".dynamic\")) {"
    },
    {
        "line": 187,
        "fullcodeline": "tmp = \"SHT_NULL\";"
    },
    {
        "line": 191,
        "fullcodeline": "tmp = \"SHT_PROGBITS\";"
    },
    {
        "line": 195,
        "fullcodeline": "tmp = \"SHT_SYMTAB\";"
    },
    {
        "line": 199,
        "fullcodeline": "tmp = \"SHT_STRTAB\";"
    },
    {
        "line": 203,
        "fullcodeline": "tmp = \"SHT_RELA\";"
    },
    {
        "line": 207,
        "fullcodeline": "tmp = \"SHT_HASH\";"
    },
    {
        "line": 211,
        "fullcodeline": "tmp = \"SHT_DYNAMIC\";"
    },
    {
        "line": 215,
        "fullcodeline": "tmp = \"SHT_NOTE\";"
    },
    {
        "line": 219,
        "fullcodeline": "tmp = \"SHT_NOBITS\";"
    },
    {
        "line": 223,
        "fullcodeline": "tmp = \"SHT_REL\";"
    },
    {
        "line": 227,
        "fullcodeline": "tmp = \"SHT_SHLIB\";"
    },
    {
        "line": 231,
        "fullcodeline": "tmp = \"SHT_DYNSYM\";"
    },
    {
        "line": 235,
        "fullcodeline": "tmp = \"SHT_LOPROC\";"
    },
    {
        "line": 239,
        "fullcodeline": "tmp = \"SHT_HIPROC\";"
    },
    {
        "line": 243,
        "fullcodeline": "tmp = \"SHT_LOUSER\";"
    },
    {
        "line": 247,
        "fullcodeline": "tmp = \"SHT_HIUSER\";"
    },
    {
        "line": 255,
        "fullcodeline": "strcpy(&name[15 - 6], \"[...]\");"
    },
    {
        "line": 268,
        "fullcodeline": "tmp = \"PT_NULL\";"
    },
    {
        "line": 272,
        "fullcodeline": "tmp = \"PT_LOAD\";"
    },
    {
        "line": 276,
        "fullcodeline": "tmp = \"PT_DYNAMIC\";"
    },
    {
        "line": 280,
        "fullcodeline": "tmp = \"PT_INTERP\";"
    },
    {
        "line": 284,
        "fullcodeline": "tmp = \"PT_NOTE\";"
    },
    {
        "line": 288,
        "fullcodeline": "tmp = \"PT_SHLIB\";"
    },
    {
        "line": 292,
        "fullcodeline": "tmp = \"PT_PHDR\";"
    },
    {
        "line": 296,
        "fullcodeline": "tmp = \"PT_LOPROC\";"
    },
    {
        "line": 300,
        "fullcodeline": "tmp = \"PT_HIPROC\";"
    },
    {
        "line": 304,
        "fullcodeline": "tmp = \"PT_GNU_STACK\";"
    },
    {
        "line": 319,
        "fullcodeline": "name = elf_map + shstrtab.sh_offset + shdr[j].sh_name;"
    },
    {
        "line": 336,
        "fullcodeline": "dynstr = i;"
    },
    {
        "line": 339,
        "fullcodeline": "dynamic = i;"
    },
    {
        "line": 357,
        "fullcodeline": "tmp = \"DT_NULL\";"
    },
    {
        "line": 361,
        "fullcodeline": "tmp = \"DT_NEEDED\";"
    },
    {
        "line": 362,
        "fullcodeline": "name = elf_map + shdr[dynstr].sh_offset + dyn[i].d_un.d_val;"
    },
    {
        "line": 363,
        "fullcodeline": "snprintf(value, 50, \"Shared library: [%s]\", name);"
    },
    {
        "line": 367,
        "fullcodeline": "tmp = \"DT_PLTRELSZ\";"
    },
    {
        "line": 371,
        "fullcodeline": "tmp = \"DT_PLTGOT\";"
    },
    {
        "line": 375,
        "fullcodeline": "tmp = \"DT_HASH\";"
    },
    {
        "line": 379,
        "fullcodeline": "tmp = \"DT_STRTAB\";"
    },
    {
        "line": 383,
        "fullcodeline": "tmp = \"DT_SYMTAB\";"
    },
    {
        "line": 387,
        "fullcodeline": "tmp = \"DT_RELA\";"
    },
    {
        "line": 391,
        "fullcodeline": "tmp = \"DT_RELASZ\";"
    },
    {
        "line": 395,
        "fullcodeline": "tmp = \"DT_RELAENT\";"
    },
    {
        "line": 399,
        "fullcodeline": "tmp = \"DT_STRSZ\";"
    },
    {
        "line": 403,
        "fullcodeline": "tmp = \"DT_SYMENT\";"
    },
    {
        "line": 407,
        "fullcodeline": "tmp = \"DT_INIT\";"
    },
    {
        "line": 411,
        "fullcodeline": "tmp = \"DT_FINI\";"
    },
    {
        "line": 415,
        "fullcodeline": "tmp = \"DT_SONAME\";"
    },
    {
        "line": 419,
        "fullcodeline": "tmp = \"DT_RPATH\";"
    },
    {
        "line": 423,
        "fullcodeline": "tmp = \"DT_SYMBOLIC\";"
    },
    {
        "line": 427,
        "fullcodeline": "tmp = \"DT_REL\";"
    },
    {
        "line": 431,
        "fullcodeline": "tmp = \"DT_RELSZ\";"
    },
    {
        "line": 435,
        "fullcodeline": "tmp = \"DT_RELENT\";"
    },
    {
        "line": 439,
        "fullcodeline": "tmp = \"DT_PLTREL\";"
    },
    {
        "line": 443,
        "fullcodeline": "tmp = \"DT_DEBUG\";"
    },
    {
        "line": 447,
        "fullcodeline": "tmp = \"DT_TEXTREL\";"
    },
    {
        "line": 451,
        "fullcodeline": "tmp = \"DT_JMPREL\";"
    },
    {
        "line": 455,
        "fullcodeline": "tmp = \"DT_BIND_NOW\";"
    },
    {
        "line": 459,
        "fullcodeline": "tmp = \"DT_INIT_ARRAY\";"
    },
    {
        "line": 463,
        "fullcodeline": "tmp = \"DT_FINI_ARRAY\";"
    },
    {
        "line": 467,
        "fullcodeline": "tmp = \"DT_INIT_ARRAYSZ\";"
    },
    {
        "line": 471,
        "fullcodeline": "tmp = \"DT_FINI_ARRAYSZ\";"
    },
    {
        "line": 475,
        "fullcodeline": "tmp = \"DT_RUNPATH\";"
    },
    {
        "line": 479,
        "fullcodeline": "tmp = \"DT_FLAGS\";"
    },
    {
        "line": 480,
        "fullcodeline": "snprintf(value, 50, \"Flags: %d\", dyn[i].d_un.d_val);"
    },
    {
        "line": 484,
        "fullcodeline": "tmp = \"DT_ENCODING\";"
    },
    {
        "line": 488,
        "fullcodeline": "tmp = \"DT_PREINIT_ARRAYSZ\";"
    },
    {
        "line": 492,
        "fullcodeline": "tmp = \"DT_SYMTAB_SHNDX\";"
    },
    {
        "line": 496,
        "fullcodeline": "tmp = \"DT_NUM\";"
    },
    {
        "line": 500,
        "fullcodeline": "tmp = \"DT_LOOS\";"
    },
    {
        "line": 504,
        "fullcodeline": "tmp = \"DT_HIOS\";"
    },
    {
        "line": 508,
        "fullcodeline": "tmp = \"DT_LOPROC\";"
    },
    {
        "line": 512,
        "fullcodeline": "tmp = \"DT_HIPROC\";"
    },
    {
        "line": 516,
        "fullcodeline": "tmp = \"DT_LOPROC\";"
    },
    {
        "line": 524,
        "fullcodeline": "tmp = \"DT_VALRNGLO\";"
    },
    {
        "line": 528,
        "fullcodeline": "tmp = \"DT_GNU_PRELINKED\";"
    },
    {
        "line": 532,
        "fullcodeline": "tmp = \"DT_GNU_CONFLICTSZ\";"
    },
    {
        "line": 536,
        "fullcodeline": "tmp = \"DT_GNU_LIBLISTSZ\";"
    },
    {
        "line": 540,
        "fullcodeline": "tmp = \"DT_CHECKSUM\";"
    },
    {
        "line": 544,
        "fullcodeline": "tmp = \"DT_PLTPADSZ\";"
    },
    {
        "line": 548,
        "fullcodeline": "tmp = \"DT_MOVEENT\";"
    },
    {
        "line": 552,
        "fullcodeline": "tmp = \"DT_MOVESZ\";"
    },
    {
        "line": 556,
        "fullcodeline": "tmp = \"DT_FEATURE_1\";"
    },
    {
        "line": 560,
        "fullcodeline": "tmp = \"DT_POSFLAG_1\";"
    },
    {
        "line": 564,
        "fullcodeline": "tmp = \"DT_SYMINSZ\";"
    },
    {
        "line": 568,
        "fullcodeline": "tmp = \"DT_SYMINENT\";"
    },
    {
        "line": 576,
        "fullcodeline": "tmp = \"DT_ADDRRNGLO\";"
    },
    {
        "line": 580,
        "fullcodeline": "tmp = \"DT_GNU_HASH\";"
    },
    {
        "line": 584,
        "fullcodeline": "tmp = \"DT_TLSDESC_PLT\";"
    },
    {
        "line": 588,
        "fullcodeline": "tmp = \"DT_TLSDESC_GOT\";"
    },
    {
        "line": 592,
        "fullcodeline": "tmp = \"DT_GNU_CONFLICT\";"
    },
    {
        "line": 596,
        "fullcodeline": "tmp = \"DT_GNU_LIBLIST\";"
    },
    {
        "line": 600,
        "fullcodeline": "tmp = \"DT_CONFIG\";"
    },
    {
        "line": 604,
        "fullcodeline": "tmp = \"DT_DEPAUDIT\";"
    },
    {
        "line": 608,
        "fullcodeline": "tmp = \"DT_AUDIT\";"
    },
    {
        "line": 612,
        "fullcodeline": "tmp = \"DT_PLTPAD\";"
    },
    {
        "line": 616,
        "fullcodeline": "tmp = \"DT_MOVETAB\";"
    },
    {
        "line": 620,
        "fullcodeline": "tmp = \"DT_SYMINFO\";"
    },
    {
        "line": 626,
        "fullcodeline": "tmp = \"DT_VERSYM\";"
    },
    {
        "line": 630,
        "fullcodeline": "tmp = \"DT_RELACOUNT\";"
    },
    {
        "line": 634,
        "fullcodeline": "tmp = \"DT_RELCOUNT\";"
    },
    {
        "line": 639,
        "fullcodeline": "tmp = \"DT_FLAGS_1\";"
    },
    {
        "line": 653,
        "fullcodeline": "tmp = \"DT_VERDEF\";"
    },
    {
        "line": 657,
        "fullcodeline": "tmp = \"DT_VERDEFNUM\";"
    },
    {
        "line": 661,
        "fullcodeline": "tmp = \"DT_VERNEED\";"
    },
    {
        "line": 665,
        "fullcodeline": "tmp = \"DT_VERNEEDNUM\";"
    },
    {
        "line": 833,
        "fullcodeline": "tmp = \"SHT_NULL\";"
    },
    {
        "line": 837,
        "fullcodeline": "tmp = \"SHT_PROGBITS\";"
    },
    {
        "line": 841,
        "fullcodeline": "tmp = \"SHT_SYMTAB\";"
    },
    {
        "line": 845,
        "fullcodeline": "tmp = \"SHT_STRTAB\";"
    },
    {
        "line": 849,
        "fullcodeline": "tmp = \"SHT_RELA\";"
    },
    {
        "line": 853,
        "fullcodeline": "tmp = \"SHT_HASH\";"
    },
    {
        "line": 857,
        "fullcodeline": "tmp = \"SHT_DYNAMIC\";"
    },
    {
        "line": 861,
        "fullcodeline": "tmp = \"SHT_NOTE\";"
    },
    {
        "line": 865,
        "fullcodeline": "tmp = \"SHT_NOBITS\";"
    },
    {
        "line": 869,
        "fullcodeline": "tmp = \"SHT_REL\";"
    },
    {
        "line": 873,
        "fullcodeline": "tmp = \"SHT_SHLIB\";"
    },
    {
        "line": 877,
        "fullcodeline": "tmp = \"SHT_DYNSYM\";"
    },
    {
        "line": 881,
        "fullcodeline": "tmp = \"SHT_LOPROC\";"
    },
    {
        "line": 885,
        "fullcodeline": "tmp = \"SHT_HIPROC\";"
    },
    {
        "line": 889,
        "fullcodeline": "tmp = \"SHT_LOUSER\";"
    },
    {
        "line": 893,
        "fullcodeline": "tmp = \"SHT_HIUSER\";"
    },
    {
        "line": 901,
        "fullcodeline": "strcpy(&name[15 - 6], \"[...]\");"
    },
    {
        "line": 914,
        "fullcodeline": "tmp = \"PT_NULL\";"
    },
    {
        "line": 918,
        "fullcodeline": "tmp = \"PT_LOAD\";"
    },
    {
        "line": 922,
        "fullcodeline": "tmp = \"PT_DYNAMIC\";"
    },
    {
        "line": 926,
        "fullcodeline": "tmp = \"PT_INTERP\";"
    },
    {
        "line": 930,
        "fullcodeline": "tmp = \"PT_NOTE\";"
    },
    {
        "line": 934,
        "fullcodeline": "tmp = \"PT_SHLIB\";"
    },
    {
        "line": 938,
        "fullcodeline": "tmp = \"PT_PHDR\";"
    },
    {
        "line": 942,
        "fullcodeline": "tmp = \"PT_LOPROC\";"
    },
    {
        "line": 946,
        "fullcodeline": "tmp = \"PT_HIPROC\";"
    },
    {
        "line": 950,
        "fullcodeline": "tmp = \"PT_GNU_STACK\";"
    },
    {
        "line": 965,
        "fullcodeline": "name = elf_map + shstrtab.sh_offset + shdr[j].sh_name;"
    },
    {
        "line": 982,
        "fullcodeline": "dynstr = i;"
    },
    {
        "line": 985,
        "fullcodeline": "dynamic = i;"
    },
    {
        "line": 1003,
        "fullcodeline": "tmp = \"DT_NULL\";"
    },
    {
        "line": 1007,
        "fullcodeline": "tmp = \"DT_NEEDED\";"
    },
    {
        "line": 1008,
        "fullcodeline": "name = elf_map + shdr[dynstr].sh_offset + dyn[i].d_un.d_val;"
    },
    {
        "line": 1009,
        "fullcodeline": "snprintf(value, 50, \"Shared library: [%s]\", name);"
    },
    {
        "line": 1013,
        "fullcodeline": "tmp = \"DT_PLTRELSZ\";"
    },
    {
        "line": 1017,
        "fullcodeline": "tmp = \"DT_PLTGOT\";"
    },
    {
        "line": 1021,
        "fullcodeline": "tmp = \"DT_HASH\";"
    },
    {
        "line": 1025,
        "fullcodeline": "tmp = \"DT_STRTAB\";"
    },
    {
        "line": 1029,
        "fullcodeline": "tmp = \"DT_SYMTAB\";"
    },
    {
        "line": 1033,
        "fullcodeline": "tmp = \"DT_RELA\";"
    },
    {
        "line": 1037,
        "fullcodeline": "tmp = \"DT_RELASZ\";"
    },
    {
        "line": 1041,
        "fullcodeline": "tmp = \"DT_RELAENT\";"
    },
    {
        "line": 1045,
        "fullcodeline": "tmp = \"DT_STRSZ\";"
    },
    {
        "line": 1049,
        "fullcodeline": "tmp = \"DT_SYMENT\";"
    },
    {
        "line": 1053,
        "fullcodeline": "tmp = \"DT_INIT\";"
    },
    {
        "line": 1057,
        "fullcodeline": "tmp = \"DT_FINI\";"
    },
    {
        "line": 1061,
        "fullcodeline": "tmp = \"DT_SONAME\";"
    },
    {
        "line": 1065,
        "fullcodeline": "tmp = \"DT_RPATH\";"
    },
    {
        "line": 1069,
        "fullcodeline": "tmp = \"DT_SYMBOLIC\";"
    },
    {
        "line": 1073,
        "fullcodeline": "tmp = \"DT_REL\";"
    },
    {
        "line": 1077,
        "fullcodeline": "tmp = \"DT_RELSZ\";"
    },
    {
        "line": 1081,
        "fullcodeline": "tmp = \"DT_RELENT\";"
    },
    {
        "line": 1085,
        "fullcodeline": "tmp = \"DT_PLTREL\";"
    },
    {
        "line": 1089,
        "fullcodeline": "tmp = \"DT_DEBUG\";"
    },
    {
        "line": 1093,
        "fullcodeline": "tmp = \"DT_TEXTREL\";"
    },
    {
        "line": 1097,
        "fullcodeline": "tmp = \"DT_JMPREL\";"
    },
    {
        "line": 1101,
        "fullcodeline": "tmp = \"DT_BIND_NOW\";"
    },
    {
        "line": 1105,
        "fullcodeline": "tmp = \"DT_INIT_ARRAY\";"
    },
    {
        "line": 1109,
        "fullcodeline": "tmp = \"DT_FINI_ARRAY\";"
    },
    {
        "line": 1113,
        "fullcodeline": "tmp = \"DT_INIT_ARRAYSZ\";"
    },
    {
        "line": 1117,
        "fullcodeline": "tmp = \"DT_FINI_ARRAYSZ\";"
    },
    {
        "line": 1121,
        "fullcodeline": "tmp = \"DT_RUNPATH\";"
    },
    {
        "line": 1125,
        "fullcodeline": "tmp = \"DT_FLAGS\";"
    },
    {
        "line": 1126,
        "fullcodeline": "snprintf(value, 50, \"Flags: %d\", dyn[i].d_un.d_val);"
    },
    {
        "line": 1130,
        "fullcodeline": "tmp = \"DT_ENCODING\";"
    },
    {
        "line": 1134,
        "fullcodeline": "tmp = \"DT_PREINIT_ARRAYSZ\";"
    },
    {
        "line": 1138,
        "fullcodeline": "tmp = \"DT_SYMTAB_SHNDX\";"
    },
    {
        "line": 1142,
        "fullcodeline": "tmp = \"DT_NUM\";"
    },
    {
        "line": 1146,
        "fullcodeline": "tmp = \"DT_LOOS\";"
    },
    {
        "line": 1150,
        "fullcodeline": "tmp = \"DT_HIOS\";"
    },
    {
        "line": 1154,
        "fullcodeline": "tmp = \"DT_LOPROC\";"
    },
    {
        "line": 1158,
        "fullcodeline": "tmp = \"DT_HIPROC\";"
    },
    {
        "line": 1162,
        "fullcodeline": "tmp = \"DT_LOPROC\";"
    },
    {
        "line": 1170,
        "fullcodeline": "tmp = \"DT_VALRNGLO\";"
    },
    {
        "line": 1174,
        "fullcodeline": "tmp = \"DT_GNU_PRELINKED\";"
    },
    {
        "line": 1178,
        "fullcodeline": "tmp = \"DT_GNU_CONFLICTSZ\";"
    },
    {
        "line": 1182,
        "fullcodeline": "tmp = \"DT_GNU_LIBLISTSZ\";"
    },
    {
        "line": 1186,
        "fullcodeline": "tmp = \"DT_CHECKSUM\";"
    },
    {
        "line": 1190,
        "fullcodeline": "tmp = \"DT_PLTPADSZ\";"
    },
    {
        "line": 1194,
        "fullcodeline": "tmp = \"DT_MOVEENT\";"
    },
    {
        "line": 1198,
        "fullcodeline": "tmp = \"DT_MOVESZ\";"
    },
    {
        "line": 1202,
        "fullcodeline": "tmp = \"DT_FEATURE_1\";"
    },
    {
        "line": 1206,
        "fullcodeline": "tmp = \"DT_POSFLAG_1\";"
    },
    {
        "line": 1210,
        "fullcodeline": "tmp = \"DT_SYMINSZ\";"
    },
    {
        "line": 1214,
        "fullcodeline": "tmp = \"DT_SYMINENT\";"
    },
    {
        "line": 1222,
        "fullcodeline": "tmp = \"DT_ADDRRNGLO\";"
    },
    {
        "line": 1226,
        "fullcodeline": "tmp = \"DT_GNU_HASH\";"
    },
    {
        "line": 1230,
        "fullcodeline": "tmp = \"DT_TLSDESC_PLT\";"
    },
    {
        "line": 1234,
        "fullcodeline": "tmp = \"DT_TLSDESC_GOT\";"
    },
    {
        "line": 1238,
        "fullcodeline": "tmp = \"DT_GNU_CONFLICT\";"
    },
    {
        "line": 1242,
        "fullcodeline": "tmp = \"DT_GNU_LIBLIST\";"
    },
    {
        "line": 1246,
        "fullcodeline": "tmp = \"DT_CONFIG\";"
    },
    {
        "line": 1250,
        "fullcodeline": "tmp = \"DT_DEPAUDIT\";"
    },
    {
        "line": 1254,
        "fullcodeline": "tmp = \"DT_AUDIT\";"
    },
    {
        "line": 1258,
        "fullcodeline": "tmp = \"DT_PLTPAD\";"
    },
    {
        "line": 1262,
        "fullcodeline": "tmp = \"DT_MOVETAB\";"
    },
    {
        "line": 1266,
        "fullcodeline": "tmp = \"DT_SYMINFO\";"
    },
    {
        "line": 1272,
        "fullcodeline": "tmp = \"DT_VERSYM\";"
    },
    {
        "line": 1276,
        "fullcodeline": "tmp = \"DT_RELACOUNT\";"
    },
    {
        "line": 1280,
        "fullcodeline": "tmp = \"DT_RELCOUNT\";"
    },
    {
        "line": 1285,
        "fullcodeline": "tmp = \"DT_FLAGS_1\";"
    },
    {
        "line": 1299,
        "fullcodeline": "tmp = \"DT_VERDEF\";"
    },
    {
        "line": 1303,
        "fullcodeline": "tmp = \"DT_VERDEFNUM\";"
    },
    {
        "line": 1307,
        "fullcodeline": "tmp = \"DT_VERNEED\";"
    },
    {
        "line": 1311,
        "fullcodeline": "tmp = \"DT_VERNEEDNUM\";"
    },
    {
        "line": 320,
        "fullcodeline": "if (shdr[j].sh_addr >= phdr[i].p_vaddr && shdr[j].sh_addr + shdr[j].sh_size <= phdr[i].p_vaddr + phdr[i].p_memsz && shdr[j].sh_type != SHT_NULL) {"
    },
    {
        "line": 966,
        "fullcodeline": "if (shdr[j].sh_addr >= phdr[i].p_vaddr && shdr[j].sh_addr + shdr[j].sh_size <= phdr[i].p_vaddr + phdr[i].p_memsz && shdr[j].sh_type != SHT_NULL) {"
    },
    {
        "line": 642,
        "fullcodeline": "snprintf(value, 50, \"Flags: %s\", \"PIE\");"
    },
    {
        "line": 646,
        "fullcodeline": "snprintf(value, 50, \"Flags: %d\", dyn[i].d_un.d_val);"
    },
    {
        "line": 1288,
        "fullcodeline": "snprintf(value, 50, \"Flags: %s\", \"PIE\");"
    },
    {
        "line": 1292,
        "fullcodeline": "snprintf(value, 50, \"Flags: %d\", dyn[i].d_un.d_val);"
    },
    {
        "line": 321,
        "fullcodeline": "if (shdr[j].sh_flags >> 1 & 0x1) {"
    },
    {
        "line": 967,
        "fullcodeline": "if (shdr[j].sh_flags >> 1 & 0x1) {"
    },
    {
        "line": 322,
        "fullcodeline": "printf(\" %s\", name);"
    },
    {
        "line": 968,
        "fullcodeline": "printf(\" %s\", name);"
    }
]