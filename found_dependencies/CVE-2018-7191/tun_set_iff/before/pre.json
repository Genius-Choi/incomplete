[
    {
        "line": 4,
        "fullcodeline": "struct tun_file *tfile = file->private_data;"
    },
    {
        "line": 11,
        "fullcodeline": "dev = __dev_get_by_name(net, ifr->ifr_name);"
    },
    {
        "line": 130,
        "fullcodeline": "netif_carrier_on(tun->dev);"
    },
    {
        "line": 132,
        "fullcodeline": "tun_debug(KERN_INFO, tun, \"tun_set_iff\\n\");"
    },
    {
        "line": 147,
        "fullcodeline": "tun_detach_all(dev);"
    },
    {
        "line": 152,
        "fullcodeline": "tun_flow_uninit(tun);"
    },
    {
        "line": 134,
        "fullcodeline": "tun->flags = (tun->flags & ~TUN_FEATURES) |"
    },
    {
        "line": 140,
        "fullcodeline": "if (netif_running(tun->dev))"
    },
    {
        "line": 28,
        "fullcodeline": "err = security_tun_dev_open(tun->security);"
    },
    {
        "line": 32,
        "fullcodeline": "err = tun_attach(tun, file, ifr->ifr_flags & IFF_NOFILTER);"
    },
    {
        "line": 135,
        "fullcodeline": "(ifr->ifr_flags & TUN_FEATURES);"
    },
    {
        "line": 9,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 13,
        "fullcodeline": "if (ifr->ifr_flags & IFF_TUN_EXCL)"
    },
    {
        "line": 26,
        "fullcodeline": "if (tun_not_capable(tun))"
    },
    {
        "line": 29,
        "fullcodeline": "if (err < 0)"
    },
    {
        "line": 33,
        "fullcodeline": "if (err < 0)"
    },
    {
        "line": 46,
        "fullcodeline": "unsigned long flags = 0;"
    },
    {
        "line": 47,
        "fullcodeline": "int queues = ifr->ifr_flags & IFF_MULTI_QUEUE ?"
    },
    {
        "line": 52,
        "fullcodeline": "err = security_tun_dev_create();"
    },
    {
        "line": 71,
        "fullcodeline": "dev = alloc_netdev_mqs(sizeof(struct tun_struct), name,"
    },
    {
        "line": 77,
        "fullcodeline": "err = dev_get_valid_name(net, dev, name);"
    },
    {
        "line": 81,
        "fullcodeline": "dev_net_set(dev, net);"
    },
    {
        "line": 82,
        "fullcodeline": "dev->rtnl_link_ops = &tun_link_ops;"
    },
    {
        "line": 83,
        "fullcodeline": "dev->ifindex = tfile->ifindex;"
    },
    {
        "line": 86,
        "fullcodeline": "tun = netdev_priv(dev);"
    },
    {
        "line": 87,
        "fullcodeline": "tun->dev = dev;"
    },
    {
        "line": 88,
        "fullcodeline": "tun->flags = flags;"
    },
    {
        "line": 90,
        "fullcodeline": "tun->vnet_hdr_sz = sizeof(struct virtio_net_hdr);"
    },
    {
        "line": 92,
        "fullcodeline": "tun->align = NET_SKB_PAD;"
    },
    {
        "line": 93,
        "fullcodeline": "tun->filter_attached = false;"
    },
    {
        "line": 94,
        "fullcodeline": "tun->sndbuf = tfile->socket.sk->sk_sndbuf;"
    },
    {
        "line": 95,
        "fullcodeline": "tun->rx_batched = 0;"
    },
    {
        "line": 105,
        "fullcodeline": "err = security_tun_dev_alloc_security(&tun->security);"
    },
    {
        "line": 109,
        "fullcodeline": "tun_net_init(dev);"
    },
    {
        "line": 110,
        "fullcodeline": "tun_flow_init(tun);"
    },
    {
        "line": 112,
        "fullcodeline": "dev->hw_features = NETIF_F_SG | NETIF_F_FRAGLIST |"
    },
    {
        "line": 115,
        "fullcodeline": "dev->features = dev->hw_features | NETIF_F_LLTX;"
    },
    {
        "line": 116,
        "fullcodeline": "dev->vlan_features = dev->features &"
    },
    {
        "line": 121,
        "fullcodeline": "err = tun_attach(tun, file, false);"
    },
    {
        "line": 125,
        "fullcodeline": "err = register_netdevice(tun->dev);"
    },
    {
        "line": 15,
        "fullcodeline": "if ((ifr->ifr_flags & IFF_TUN) && dev->netdev_ops == &tun_netdev_ops)"
    },
    {
        "line": 16,
        "fullcodeline": "tun = netdev_priv(dev);"
    },
    {
        "line": 22,
        "fullcodeline": "if (!!(ifr->ifr_flags & IFF_MULTI_QUEUE) !="
    },
    {
        "line": 23,
        "fullcodeline": "!!(tun->flags & IFF_MULTI_QUEUE))"
    },
    {
        "line": 36,
        "fullcodeline": "if (tun->flags & IFF_MULTI_QUEUE &&"
    },
    {
        "line": 37,
        "fullcodeline": "(tun->numqueues + tun->numdisabled > 1)) {"
    },
    {
        "line": 53,
        "fullcodeline": "if (err < 0)"
    },
    {
        "line": 57,
        "fullcodeline": "if (ifr->ifr_flags & IFF_TUN) {"
    },
    {
        "line": 75,
        "fullcodeline": "if (!dev)"
    },
    {
        "line": 98,
        "fullcodeline": "if (!tun->pcpu_stats) {"
    },
    {
        "line": 106,
        "fullcodeline": "if (err < 0)"
    },
    {
        "line": 122,
        "fullcodeline": "if (err < 0)"
    },
    {
        "line": 126,
        "fullcodeline": "if (err < 0)"
    },
    {
        "line": 14,
        "fullcodeline": "return -EBUSY;"
    },
    {
        "line": 24,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 27,
        "fullcodeline": "return -EPERM;"
    },
    {
        "line": 50,
        "fullcodeline": "if (!ns_capable(net->user_ns, CAP_NET_ADMIN))"
    },
    {
        "line": 59,
        "fullcodeline": "flags |= IFF_TUN;"
    },
    {
        "line": 60,
        "fullcodeline": "name = \"tun%d\";"
    },
    {
        "line": 69,
        "fullcodeline": "name = ifr->ifr_name;"
    },
    {
        "line": 99,
        "fullcodeline": "err = -ENOMEM;"
    },
    {
        "line": 117,
        "fullcodeline": "~(NETIF_F_HW_VLAN_CTAG_TX |"
    },
    {
        "line": 51,
        "fullcodeline": "return -EPERM;"
    },
    {
        "line": 76,
        "fullcodeline": "return -ENOMEM;"
    },
    {
        "line": 17,
        "fullcodeline": "else if ((ifr->ifr_flags & IFF_TAP) && dev->netdev_ops == &tap_netdev_ops)"
    },
    {
        "line": 18,
        "fullcodeline": "tun = netdev_priv(dev);"
    },
    {
        "line": 61,
        "fullcodeline": "} else if (ifr->ifr_flags & IFF_TAP) {"
    },
    {
        "line": 63,
        "fullcodeline": "flags |= IFF_TAP;"
    },
    {
        "line": 64,
        "fullcodeline": "name = \"tap%d\";"
    },
    {
        "line": 20,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 66,
        "fullcodeline": "return -EINVAL;"
    }
]