[
    {
        "line": 12,
        "fullcodeline": "g_autoptr(GError) my_error = NULL;"
    },
    {
        "line": 13,
        "fullcodeline": "g_autoptr(FlatpakExports) exports = NULL;"
    },
    {
        "line": 14,
        "fullcodeline": "g_autoptr(FlatpakBwrap) proxy_arg_bwrap = flatpak_bwrap_new (flatpak_bwrap_empty_env);"
    },
    {
        "line": 15,
        "fullcodeline": "gboolean has_wayland = FALSE;"
    },
    {
        "line": 16,
        "fullcodeline": "gboolean allow_x11 = FALSE;"
    },
    {
        "line": 123,
        "fullcodeline": "flatpak_context_append_bwrap_filesystem (context, bwrap, app_id, app_id_dir, previous_app_id_dirs, &exports);"
    },
    {
        "line": 136,
        "fullcodeline": "flatpak_run_add_x11_args (bwrap, allow_x11);"
    },
    {
        "line": 159,
        "fullcodeline": "flatpak_run_add_session_dbus_args (bwrap, proxy_arg_bwrap, context, flags, app_id);"
    },
    {
        "line": 160,
        "fullcodeline": "flatpak_run_add_system_dbus_args (bwrap, proxy_arg_bwrap, context, flags);"
    },
    {
        "line": 161,
        "fullcodeline": "flatpak_run_add_a11y_dbus_args (bwrap, proxy_arg_bwrap, context, flags);"
    },
    {
        "line": 18,
        "fullcodeline": "if ((context->shares & FLATPAK_CONTEXT_SHARED_IPC) == 0)"
    },
    {
        "line": 24,
        "fullcodeline": "if ((context->shares & FLATPAK_CONTEXT_SHARED_NETWORK) == 0)"
    },
    {
        "line": 30,
        "fullcodeline": "if (context->devices & FLATPAK_CONTEXT_DEVICE_ALL)"
    },
    {
        "line": 125,
        "fullcodeline": "if (context->sockets & FLATPAK_CONTEXT_SOCKET_WAYLAND)"
    },
    {
        "line": 131,
        "fullcodeline": "if ((context->sockets & FLATPAK_CONTEXT_SOCKET_FALLBACK_X11) != 0)"
    },
    {
        "line": 138,
        "fullcodeline": "if (context->sockets & FLATPAK_CONTEXT_SOCKET_SSH_AUTH)"
    },
    {
        "line": 143,
        "fullcodeline": "if (context->sockets & FLATPAK_CONTEXT_SOCKET_PULSEAUDIO)"
    },
    {
        "line": 149,
        "fullcodeline": "if (context->sockets & FLATPAK_CONTEXT_SOCKET_PCSC)"
    },
    {
        "line": 154,
        "fullcodeline": "if (context->sockets & FLATPAK_CONTEXT_SOCKET_CUPS)"
    },
    {
        "line": 165,
        "fullcodeline": "if (!flatpak_run_in_transient_unit (app_id, &my_error))"
    },
    {
        "line": 173,
        "fullcodeline": "if (!flatpak_bwrap_is_empty (proxy_arg_bwrap) &&"
    },
    {
        "line": 20,
        "fullcodeline": "g_debug (\"Disallowing ipc access\");"
    },
    {
        "line": 21,
        "fullcodeline": "flatpak_bwrap_add_args (bwrap, \"--unshare-ipc\", NULL);"
    },
    {
        "line": 26,
        "fullcodeline": "g_debug (\"Disallowing network access\");"
    },
    {
        "line": 27,
        "fullcodeline": "flatpak_bwrap_add_args (bwrap, \"--unshare-net\", NULL);"
    },
    {
        "line": 32,
        "fullcodeline": "flatpak_bwrap_add_args (bwrap,"
    },
    {
        "line": 127,
        "fullcodeline": "g_debug (\"Allowing wayland access\");"
    },
    {
        "line": 128,
        "fullcodeline": "has_wayland = flatpak_run_add_wayland_args (bwrap);"
    },
    {
        "line": 132,
        "fullcodeline": "allow_x11 = !has_wayland;"
    },
    {
        "line": 140,
        "fullcodeline": "flatpak_run_add_ssh_args (bwrap);"
    },
    {
        "line": 145,
        "fullcodeline": "g_debug (\"Allowing pulseaudio access\");"
    },
    {
        "line": 146,
        "fullcodeline": "flatpak_run_add_pulseaudio_args (bwrap);"
    },
    {
        "line": 151,
        "fullcodeline": "flatpak_run_add_pcsc_args (bwrap);"
    },
    {
        "line": 156,
        "fullcodeline": "flatpak_run_add_cups_args (bwrap);"
    },
    {
        "line": 169,
        "fullcodeline": "g_debug (\"Failed to run in transient scope: %s\", my_error->message);"
    },
    {
        "line": 170,
        "fullcodeline": "g_clear_error (&my_error);"
    },
    {
        "line": 174,
        "fullcodeline": "!start_dbus_proxy (bwrap, proxy_arg_bwrap, app_info_path, error))"
    },
    {
        "line": 36,
        "fullcodeline": "if (g_file_test (\"/dev/shm\", G_FILE_TEST_IS_DIR))"
    },
    {
        "line": 67,
        "fullcodeline": "flatpak_bwrap_add_args (bwrap,"
    },
    {
        "line": 134,
        "fullcodeline": "allow_x11 = (context->sockets & FLATPAK_CONTEXT_SOCKET_X11) != 0;"
    },
    {
        "line": 178,
        "fullcodeline": "*exports_out = g_steal_pointer (&exports);"
    },
    {
        "line": 70,
        "fullcodeline": "if (context->devices & FLATPAK_CONTEXT_DEVICE_DRI)"
    },
    {
        "line": 105,
        "fullcodeline": "if (context->devices & FLATPAK_CONTEXT_DEVICE_KVM)"
    },
    {
        "line": 112,
        "fullcodeline": "if (context->devices & FLATPAK_CONTEXT_DEVICE_SHM)"
    },
    {
        "line": 38,
        "fullcodeline": "if ((context->devices & FLATPAK_CONTEXT_DEVICE_SHM) == 0)"
    },
    {
        "line": 72,
        "fullcodeline": "g_debug (\"Allowing dri access\");"
    },
    {
        "line": 74,
        "fullcodeline": "char *dri_devices[] = {"
    },
    {
        "line": 96,
        "fullcodeline": "char nvidia_dev[14]; /* /dev/nvidia plus up to 2 digits */"
    },
    {
        "line": 107,
        "fullcodeline": "g_debug (\"Allowing kvm access\");"
    },
    {
        "line": 115,
        "fullcodeline": "g_autofree char *real_dev_shm = realpath (\"/dev/shm\", NULL);"
    },
    {
        "line": 117,
        "fullcodeline": "g_debug (\"Allowing /dev/shm access (as %s)\", real_dev_shm);"
    },
    {
        "line": 39,
        "fullcodeline": "flatpak_bwrap_add_args (bwrap,"
    },
    {
        "line": 43,
        "fullcodeline": "else if (g_file_test (\"/dev/shm\", G_FILE_TEST_IS_SYMLINK))"
    },
    {
        "line": 88,
        "fullcodeline": "for (i = 0; i < G_N_ELEMENTS (dri_devices); i++)"
    },
    {
        "line": 97,
        "fullcodeline": "for (i = 0; i < 20; i++)"
    },
    {
        "line": 108,
        "fullcodeline": "if (g_file_test (\"/dev/kvm\", G_FILE_TEST_EXISTS))"
    },
    {
        "line": 118,
        "fullcodeline": "if (real_dev_shm != NULL)"
    },
    {
        "line": 45,
        "fullcodeline": "g_autofree char *link = flatpak_readlink (\"/dev/shm\", NULL);"
    },
    {
        "line": 99,
        "fullcodeline": "g_snprintf (nvidia_dev, sizeof (nvidia_dev), \"/dev/nvidia%d\", i);"
    },
    {
        "line": 109,
        "fullcodeline": "flatpak_bwrap_add_args (bwrap, \"--dev-bind\", \"/dev/kvm\", \"/dev/kvm\", NULL);"
    },
    {
        "line": 119,
        "fullcodeline": "flatpak_bwrap_add_args (bwrap, \"--bind\", real_dev_shm, \"/dev/shm\", NULL);"
    },
    {
        "line": 49,
        "fullcodeline": "if (g_strcmp0 (link, \"/run/shm\") == 0)"
    },
    {
        "line": 90,
        "fullcodeline": "if (g_file_test (dri_devices[i], G_FILE_TEST_EXISTS))"
    },
    {
        "line": 100,
        "fullcodeline": "if (g_file_test (nvidia_dev, G_FILE_TEST_EXISTS))"
    },
    {
        "line": 91,
        "fullcodeline": "flatpak_bwrap_add_args (bwrap, \"--dev-bind\", dri_devices[i], dri_devices[i], NULL);"
    },
    {
        "line": 101,
        "fullcodeline": "flatpak_bwrap_add_args (bwrap, \"--dev-bind\", nvidia_dev, nvidia_dev, NULL);"
    },
    {
        "line": 51,
        "fullcodeline": "if (context->devices & FLATPAK_CONTEXT_DEVICE_SHM &&"
    },
    {
        "line": 62,
        "fullcodeline": "g_warning (\"Unexpected /dev/shm symlink %s\", link);"
    },
    {
        "line": 52,
        "fullcodeline": "g_file_test (\"/run/shm\", G_FILE_TEST_IS_DIR))"
    },
    {
        "line": 53,
        "fullcodeline": "flatpak_bwrap_add_args (bwrap,"
    },
    {
        "line": 57,
        "fullcodeline": "flatpak_bwrap_add_args (bwrap,"
    }
]