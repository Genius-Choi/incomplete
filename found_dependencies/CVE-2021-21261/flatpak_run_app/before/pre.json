[
    {
        "line": 18,
        "fullcodeline": "g_autoptr(FlatpakDeploy) runtime_deploy = NULL;"
    },
    {
        "line": 19,
        "fullcodeline": "g_autoptr(GBytes) runtime_deploy_data = NULL;"
    },
    {
        "line": 20,
        "fullcodeline": "g_autoptr(GBytes) app_deploy_data = NULL;"
    },
    {
        "line": 21,
        "fullcodeline": "g_autoptr(GFile) app_files = NULL;"
    },
    {
        "line": 22,
        "fullcodeline": "g_autoptr(GFile) runtime_files = NULL;"
    },
    {
        "line": 23,
        "fullcodeline": "g_autoptr(GFile) bin_ldconfig = NULL;"
    },
    {
        "line": 24,
        "fullcodeline": "g_autoptr(GFile) app_id_dir = NULL;"
    },
    {
        "line": 25,
        "fullcodeline": "g_autoptr(GFile) real_app_id_dir = NULL;"
    },
    {
        "line": 26,
        "fullcodeline": "g_autofree char *default_runtime_pref = NULL;"
    },
    {
        "line": 27,
        "fullcodeline": "g_autoptr(FlatpakDecomposed) default_runtime = NULL;"
    },
    {
        "line": 28,
        "fullcodeline": "g_autofree char *default_command = NULL;"
    },
    {
        "line": 29,
        "fullcodeline": "g_autoptr(GKeyFile) metakey = NULL;"
    },
    {
        "line": 30,
        "fullcodeline": "g_autoptr(GKeyFile) runtime_metakey = NULL;"
    },
    {
        "line": 31,
        "fullcodeline": "g_autoptr(FlatpakBwrap) bwrap = NULL;"
    },
    {
        "line": 32,
        "fullcodeline": "const char *command = \"/bin/sh\";"
    },
    {
        "line": 33,
        "fullcodeline": "g_autoptr(GError) my_error = NULL;"
    },
    {
        "line": 34,
        "fullcodeline": "g_autoptr(FlatpakDecomposed) runtime_ref = NULL;"
    },
    {
        "line": 36,
        "fullcodeline": "g_autoptr(GPtrArray) previous_app_id_dirs = NULL;"
    },
    {
        "line": 37,
        "fullcodeline": "g_autofree char *app_id = NULL;"
    },
    {
        "line": 38,
        "fullcodeline": "g_autofree char *app_arch = NULL;"
    },
    {
        "line": 39,
        "fullcodeline": "g_autofree char *app_info_path = NULL;"
    },
    {
        "line": 40,
        "fullcodeline": "g_autofree char *instance_id_host_dir = NULL;"
    },
    {
        "line": 41,
        "fullcodeline": "g_autoptr(FlatpakContext) app_context = NULL;"
    },
    {
        "line": 42,
        "fullcodeline": "g_autoptr(FlatpakContext) overrides = NULL;"
    },
    {
        "line": 43,
        "fullcodeline": "g_autoptr(FlatpakExports) exports = NULL;"
    },
    {
        "line": 44,
        "fullcodeline": "g_autofree char *commandline = NULL;"
    },
    {
        "line": 45,
        "fullcodeline": "g_autofree char *doc_mount_path = NULL;"
    },
    {
        "line": 46,
        "fullcodeline": "g_autofree char *app_extensions = NULL;"
    },
    {
        "line": 47,
        "fullcodeline": "g_autofree char *runtime_extensions = NULL;"
    },
    {
        "line": 48,
        "fullcodeline": "g_autofree char *checksum = NULL;"
    },
    {
        "line": 49,
        "fullcodeline": "int ld_so_fd = -1;"
    },
    {
        "line": 50,
        "fullcodeline": "g_autoptr(GFile) runtime_ld_so_conf = NULL;"
    },
    {
        "line": 51,
        "fullcodeline": "gboolean generate_ld_so_conf = TRUE;"
    },
    {
        "line": 52,
        "fullcodeline": "gboolean use_ld_so_cache = TRUE;"
    },
    {
        "line": 53,
        "fullcodeline": "gboolean sandboxed = (flags & FLATPAK_RUN_FLAG_SANDBOX) != 0;"
    },
    {
        "line": 54,
        "fullcodeline": "gboolean parent_expose_pids = (flags & FLATPAK_RUN_FLAG_PARENT_EXPOSE_PIDS) != 0;"
    },
    {
        "line": 55,
        "fullcodeline": "gboolean parent_share_pids = (flags & FLATPAK_RUN_FLAG_PARENT_SHARE_PIDS) != 0;"
    },
    {
        "line": 61,
        "fullcodeline": "app_id = flatpak_decomposed_dup_id (app_ref);"
    },
    {
        "line": 62,
        "fullcodeline": "app_arch = flatpak_decomposed_dup_arch (app_ref);"
    },
    {
        "line": 69,
        "fullcodeline": "bwrap = flatpak_bwrap_new (NULL);"
    },
    {
        "line": 70,
        "fullcodeline": "flatpak_bwrap_add_arg (bwrap, flatpak_get_bwrap ());"
    },
    {
        "line": 101,
        "fullcodeline": "default_runtime = flatpak_decomposed_new_from_pref (FLATPAK_KINDS_RUNTIME, default_runtime_pref, error);"
    },
    {
        "line": 141,
        "fullcodeline": "runtime_deploy = flatpak_find_deploy_for_ref (flatpak_decomposed_get_ref (runtime_ref), custom_runtime_commit, NULL, cancellable, error);"
    },
    {
        "line": 145,
        "fullcodeline": "runtime_deploy_data = flatpak_deploy_get_deploy_data (runtime_deploy, FLATPAK_DEPLOY_VERSION_ANY, cancellable, error);"
    },
    {
        "line": 149,
        "fullcodeline": "runtime_metakey = flatpak_deploy_get_metadata (runtime_deploy);"
    },
    {
        "line": 151,
        "fullcodeline": "app_context = flatpak_app_compute_permissions (metakey, runtime_metakey, error);"
    },
    {
        "line": 167,
        "fullcodeline": "runtime_files = flatpak_deploy_get_files (runtime_deploy);"
    },
    {
        "line": 168,
        "fullcodeline": "bin_ldconfig = g_file_resolve_relative_path (runtime_files, \"bin/ldconfig\");"
    },
    {
        "line": 260,
        "fullcodeline": "flatpak_run_apply_env_default (bwrap, use_ld_so_cache);"
    },
    {
        "line": 261,
        "fullcodeline": "flatpak_run_apply_env_vars (bwrap, app_context);"
    },
    {
        "line": 262,
        "fullcodeline": "flatpak_run_apply_env_prompt (bwrap, app_id);"
    },
    {
        "line": 270,
        "fullcodeline": "flatpak_bwrap_add_args (bwrap,"
    },
    {
        "line": 292,
        "fullcodeline": "runtime_ld_so_conf = g_file_resolve_relative_path (runtime_files, \"etc/ld.so.conf\");"
    },
    {
        "line": 314,
        "fullcodeline": "flags |= flatpak_context_get_run_flags (app_context);"
    },
    {
        "line": 357,
        "fullcodeline": "flatpak_run_add_journal_args (bwrap);"
    },
    {
        "line": 358,
        "fullcodeline": "add_font_path_args (bwrap);"
    },
    {
        "line": 359,
        "fullcodeline": "add_icon_path_args (bwrap);"
    },
    {
        "line": 361,
        "fullcodeline": "flatpak_bwrap_add_args (bwrap,"
    },
    {
        "line": 420,
        "fullcodeline": "flatpak_bwrap_add_arg (bwrap, command);"
    },
    {
        "line": 428,
        "fullcodeline": "flatpak_bwrap_finish (bwrap);"
    },
    {
        "line": 430,
        "fullcodeline": "commandline = flatpak_quote_argv ((const char **) bwrap->argv->pdata, -1);"
    },
    {
        "line": 58,
        "fullcodeline": "if (!check_sudo (error))"
    },
    {
        "line": 72,
        "fullcodeline": "if (app_deploy == NULL)"
    },
    {
        "line": 102,
        "fullcodeline": "if (default_runtime == NULL)"
    },
    {
        "line": 142,
        "fullcodeline": "if (runtime_deploy == NULL)"
    },
    {
        "line": 146,
        "fullcodeline": "if (runtime_deploy_data == NULL)"
    },
    {
        "line": 152,
        "fullcodeline": "if (app_context == NULL)"
    },
    {
        "line": 155,
        "fullcodeline": "if (app_deploy != NULL)"
    },
    {
        "line": 172,
        "fullcodeline": "if (app_deploy != NULL)"
    },
    {
        "line": 271,
        "fullcodeline": "\"--ro-bind\", flatpak_file_get_path_cached (runtime_files), \"/usr\","
    },
    {
        "line": 275,
        "fullcodeline": "if (app_files != NULL)"
    },
    {
        "line": 325,
        "fullcodeline": "if (ld_so_fd != -1)"
    },
    {
        "line": 65,
        "fullcodeline": "if (!check_parental_controls (app_ref, app_deploy, cancellable, error))"
    },
    {
        "line": 75,
        "fullcodeline": "default_runtime_pref = flatpak_decomposed_dup_pref (app_ref);"
    },
    {
        "line": 105,
        "fullcodeline": "if (custom_runtime != NULL || custom_runtime_version != NULL)"
    },
    {
        "line": 108,
        "fullcodeline": "const char *custom_runtime_id = NULL;"
    },
    {
        "line": 109,
        "fullcodeline": "const char *custom_runtime_arch = NULL;"
    },
    {
        "line": 129,
        "fullcodeline": "runtime_ref = flatpak_decomposed_new_from_decomposed (default_runtime,"
    },
    {
        "line": 157,
        "fullcodeline": "overrides = flatpak_deploy_get_overrides (app_deploy);"
    },
    {
        "line": 158,
        "fullcodeline": "flatpak_context_merge (app_context, overrides);"
    },
    {
        "line": 162,
        "fullcodeline": "flatpak_context_make_sandboxed (app_context);"
    },
    {
        "line": 165,
        "fullcodeline": "flatpak_context_merge (app_context, extra_context);"
    },
    {
        "line": 169,
        "fullcodeline": "if (!g_file_query_exists (bin_ldconfig, NULL))"
    },
    {
        "line": 170,
        "fullcodeline": "use_ld_so_cache = FALSE;"
    },
    {
        "line": 175,
        "fullcodeline": "gsize len = 0;"
    },
    {
        "line": 178,
        "fullcodeline": "real_app_id_dir = flatpak_get_data_dir (app_id);"
    },
    {
        "line": 179,
        "fullcodeline": "app_files = flatpak_deploy_get_files (app_deploy);"
    },
    {
        "line": 181,
        "fullcodeline": "previous_app_id_dirs = g_ptr_array_new_with_free_func (g_object_unref);"
    },
    {
        "line": 182,
        "fullcodeline": "previous_ids = flatpak_deploy_data_get_previous_ids (app_deploy_data, &len);"
    },
    {
        "line": 184,
        "fullcodeline": "do_migrate = !g_file_query_exists (real_app_id_dir, cancellable);"
    },
    {
        "line": 266,
        "fullcodeline": "g_autoptr(GFile) sandbox_dir = g_file_get_child (real_app_id_dir, \"sandbox\");"
    },
    {
        "line": 267,
        "fullcodeline": "flatpak_bwrap_set_env (bwrap, \"FLATPAK_SANDBOX_DIR\", flatpak_file_get_path_cached (sandbox_dir), TRUE);"
    },
    {
        "line": 276,
        "fullcodeline": "flatpak_bwrap_add_args (bwrap,"
    },
    {
        "line": 285,
        "fullcodeline": "if (metakey != NULL &&"
    },
    {
        "line": 286,
        "fullcodeline": "!flatpak_run_add_extension_args (bwrap, metakey, app_ref, use_ld_so_cache, &app_extensions, cancellable, error))"
    },
    {
        "line": 289,
        "fullcodeline": "if (!flatpak_run_add_extension_args (bwrap, runtime_metakey, runtime_ref, use_ld_so_cache, &runtime_extensions, cancellable, error))"
    },
    {
        "line": 293,
        "fullcodeline": "if (lstat (flatpak_file_get_path_cached (runtime_ld_so_conf), &s) == 0)"
    },
    {
        "line": 294,
        "fullcodeline": "generate_ld_so_conf = S_ISREG (s.st_mode) && s.st_size == 0;"
    },
    {
        "line": 300,
        "fullcodeline": "checksum = calculate_ld_cache_checksum (app_deploy_data, runtime_deploy_data,"
    },
    {
        "line": 302,
        "fullcodeline": "ld_so_fd = regenerate_ld_cache (bwrap->argv,"
    },
    {
        "line": 311,
        "fullcodeline": "flatpak_bwrap_add_fd (bwrap, ld_so_fd);"
    },
    {
        "line": 316,
        "fullcodeline": "if (!flatpak_run_setup_base_argv (bwrap, runtime_files, app_id_dir, app_arch, flags, error))"
    },
    {
        "line": 328,
        "fullcodeline": "flatpak_bwrap_add_arg (bwrap, \"--ro-bind-data\");"
    },
    {
        "line": 329,
        "fullcodeline": "flatpak_bwrap_add_arg_printf (bwrap, \"%d\", ld_so_fd);"
    },
    {
        "line": 330,
        "fullcodeline": "flatpak_bwrap_add_arg (bwrap, \"/etc/ld.so.cache\");"
    },
    {
        "line": 333,
        "fullcodeline": "if (!flatpak_run_add_app_info_args (bwrap,"
    },
    {
        "line": 343,
        "fullcodeline": "if (!flatpak_run_add_dconf_args (bwrap, app_id, metakey, error))"
    },
    {
        "line": 346,
        "fullcodeline": "if (!sandboxed && !(flags & FLATPAK_RUN_FLAG_NO_DOCUMENTS_PORTAL))"
    },
    {
        "line": 347,
        "fullcodeline": "add_document_portal_args (bwrap, app_id, &doc_mount_path);"
    },
    {
        "line": 349,
        "fullcodeline": "if (!flatpak_run_add_environment_args (bwrap, app_info_path, flags,"
    },
    {
        "line": 354,
        "fullcodeline": "if ((app_context->shares & FLATPAK_CONTEXT_SHARED_NETWORK) != 0)"
    },
    {
        "line": 355,
        "fullcodeline": "flatpak_run_add_resolved_args (bwrap);"
    },
    {
        "line": 368,
        "fullcodeline": "flatpak_bwrap_add_args (bwrap, \"--chdir\", cwd, NULL);"
    },
    {
        "line": 380,
        "fullcodeline": "userns_path = g_strdup_printf (\"/proc/%d/root/run/.userns\", parent_pid);"
    },
    {
        "line": 382,
        "fullcodeline": "userns_fd = open_namespace_fd_if_needed (userns_path, \"/proc/self/ns/user\");"
    },
    {
        "line": 393,
        "fullcodeline": "pidns_path = g_strdup_printf (\"/proc/%d/ns/pid\", parent_pid);"
    },
    {
        "line": 394,
        "fullcodeline": "pidns_fd = open (pidns_path, O_RDONLY|O_CLOEXEC);"
    },
    {
        "line": 401,
        "fullcodeline": "command = custom_command;"
    },
    {
        "line": 417,
        "fullcodeline": "if (!flatpak_bwrap_bundle_args (bwrap, 1, -1, FALSE, error))"
    },
    {
        "line": 422,
        "fullcodeline": "if (!add_rest_args (bwrap, app_id,"
    },
    {
        "line": 433,
        "fullcodeline": "if ((flags & FLATPAK_RUN_FLAG_BACKGROUND) != 0)"
    },
    {
        "line": 440,
        "fullcodeline": "spawn_flags = G_SPAWN_SEARCH_PATH;"
    },
    {
        "line": 445,
        "fullcodeline": "spawn_flags |= G_SPAWN_LEAVE_DESCRIPTORS_OPEN;"
    },
    {
        "line": 456,
        "fullcodeline": "g_snprintf (pid_str, sizeof (pid_str), \"%d\", child_pid);"
    },
    {
        "line": 457,
        "fullcodeline": "pid_path = g_build_filename (instance_id_host_dir, \"pid\", NULL);"
    },
    {
        "line": 74,
        "fullcodeline": "g_assert (flatpak_decomposed_is_runtime (app_ref));"
    },
    {
        "line": 81,
        "fullcodeline": "app_deploy_data = flatpak_deploy_get_deploy_data (app_deploy, FLATPAK_DEPLOY_VERSION_ANY, cancellable, error);"
    },
    {
        "line": 90,
        "fullcodeline": "metakey = flatpak_deploy_get_metadata (app_deploy);"
    },
    {
        "line": 91,
        "fullcodeline": "default_runtime_pref = g_key_file_get_string (metakey,"
    },
    {
        "line": 135,
        "fullcodeline": "if (runtime_ref == NULL)"
    },
    {
        "line": 139,
        "fullcodeline": "runtime_ref = flatpak_decomposed_ref (default_runtime);"
    },
    {
        "line": 200,
        "fullcodeline": "for (i = len - 1; i >= 0; i--)"
    },
    {
        "line": 256,
        "fullcodeline": "if (!sandboxed)"
    },
    {
        "line": 277,
        "fullcodeline": "\"--ro-bind\", flatpak_file_get_path_cached (app_files), \"/app\","
    },
    {
        "line": 281,
        "fullcodeline": "flatpak_bwrap_add_args (bwrap,"
    },
    {
        "line": 309,
        "fullcodeline": "if (ld_so_fd == -1)"
    },
    {
        "line": 336,
        "fullcodeline": "app_id, flatpak_decomposed_get_branch (app_ref),"
    },
    {
        "line": 338,
        "fullcodeline": "sandboxed, FALSE, flags & FLATPAK_RUN_FLAG_DEVEL,"
    },
    {
        "line": 377,
        "fullcodeline": "if (parent_pid == 0)"
    },
    {
        "line": 383,
        "fullcodeline": "if (userns_fd != -1)"
    },
    {
        "line": 395,
        "fullcodeline": "if (pidns_fd != -1)"
    },
    {
        "line": 423,
        "fullcodeline": "exports, (flags & FLATPAK_RUN_FLAG_FILE_FORWARDING) != 0,"
    },
    {
        "line": 436,
        "fullcodeline": "char pid_str[64];"
    },
    {
        "line": 441,
        "fullcodeline": "if (flags & FLATPAK_RUN_FLAG_DO_NOT_REAP)"
    },
    {
        "line": 458,
        "fullcodeline": "g_file_set_contents (pid_path, pid_str, -1, NULL);"
    },
    {
        "line": 465,
        "fullcodeline": "g_snprintf (pid_str, sizeof (pid_str), \"%d\", getpid ());"
    },
    {
        "line": 466,
        "fullcodeline": "pid_path = g_build_filename (instance_id_host_dir, \"pid\", NULL);"
    },
    {
        "line": 472,
        "fullcodeline": "flatpak_bwrap_child_setup (bwrap->fds, FALSE);"
    },
    {
        "line": 484,
        "fullcodeline": "*instance_dir_out = g_steal_pointer (&instance_id_host_dir);"
    },
    {
        "line": 82,
        "fullcodeline": "if (app_deploy_data == NULL)"
    },
    {
        "line": 113,
        "fullcodeline": "custom_runtime_parts = g_strsplit (custom_runtime, \"/\", 0);"
    },
    {
        "line": 203,
        "fullcodeline": "g_autoptr(GFileInfo) previous_app_id_dir_info = NULL;"
    },
    {
        "line": 204,
        "fullcodeline": "g_autoptr(GError) local_error = NULL;"
    },
    {
        "line": 206,
        "fullcodeline": "previous_app_id_dir = flatpak_get_data_dir (previous_ids[i]);"
    },
    {
        "line": 250,
        "fullcodeline": "g_ptr_array_add (previous_app_id_dirs, g_steal_pointer (&previous_app_id_dir));"
    },
    {
        "line": 253,
        "fullcodeline": "if (!flatpak_ensure_data_dir (real_app_id_dir, cancellable, error))"
    },
    {
        "line": 257,
        "fullcodeline": "app_id_dir = g_object_ref (real_app_id_dir);"
    },
    {
        "line": 321,
        "fullcodeline": "if (!add_ld_so_conf (bwrap, error))"
    },
    {
        "line": 385,
        "fullcodeline": "flatpak_bwrap_add_args_data_fd (bwrap, \"--userns\", userns_fd, NULL);"
    },
    {
        "line": 387,
        "fullcodeline": "userns2_path = g_strdup_printf (\"/proc/%d/ns/user\", parent_pid);"
    },
    {
        "line": 388,
        "fullcodeline": "userns2_fd = open_namespace_fd_if_needed (userns2_path, userns_path);"
    },
    {
        "line": 396,
        "fullcodeline": "flatpak_bwrap_add_args_data_fd (bwrap, \"--pidns\", pidns_fd, NULL);"
    },
    {
        "line": 442,
        "fullcodeline": "spawn_flags |= G_SPAWN_DO_NOT_REAP_CHILD;"
    },
    {
        "line": 447,
        "fullcodeline": "if (!g_spawn_async (NULL,"
    },
    {
        "line": 462,
        "fullcodeline": "char pid_str[64];"
    },
    {
        "line": 467,
        "fullcodeline": "g_file_set_contents (pid_path, pid_str, -1, NULL);"
    },
    {
        "line": 85,
        "fullcodeline": "if ((flags & FLATPAK_RUN_FLAG_DEVEL) != 0)"
    },
    {
        "line": 86,
        "fullcodeline": "key = FLATPAK_METADATA_KEY_SDK;"
    },
    {
        "line": 114,
        "fullcodeline": "for (i = 0; i < 3 && custom_runtime_parts[i] != NULL; i++)"
    },
    {
        "line": 214,
        "fullcodeline": "if (previous_app_id_dir_info == NULL)"
    },
    {
        "line": 378,
        "fullcodeline": "return flatpak_fail (error, \"No parent pid specified\");"
    },
    {
        "line": 389,
        "fullcodeline": "if (userns2_fd != -1)"
    },
    {
        "line": 405,
        "fullcodeline": "default_command = g_key_file_get_string (metakey,"
    },
    {
        "line": 414,
        "fullcodeline": "command = default_command;"
    },
    {
        "line": 474,
        "fullcodeline": "if (execvpe (flatpak_get_bwrap (), (char **) bwrap->argv->pdata, bwrap->envp) == -1)"
    },
    {
        "line": 88,
        "fullcodeline": "key = FLATPAK_METADATA_KEY_RUNTIME;"
    },
    {
        "line": 96,
        "fullcodeline": "g_propagate_error (error, g_steal_pointer (&my_error));"
    },
    {
        "line": 223,
        "fullcodeline": "g_clear_error (&local_error);"
    },
    {
        "line": 229,
        "fullcodeline": "do_migrate = FALSE; /* Don't migrate older things, they are likely symlinks to this dir */"
    },
    {
        "line": 390,
        "fullcodeline": "flatpak_bwrap_add_args_data_fd (bwrap, \"--userns2\", userns2_fd, NULL);"
    },
    {
        "line": 476,
        "fullcodeline": "g_set_error_literal (error, G_IO_ERROR, g_io_error_from_errno (errno),"
    },
    {
        "line": 477,
        "fullcodeline": "_(\"Unable to start app\"));"
    },
    {
        "line": 116,
        "fullcodeline": "if (strlen (custom_runtime_parts[i]) > 0)"
    },
    {
        "line": 216,
        "fullcodeline": "if  (!g_error_matches (local_error, G_IO_ERROR, G_IO_ERROR_NOT_FOUND) && do_migrate)"
    },
    {
        "line": 218,
        "fullcodeline": "g_warning (_(\"Failed to migrate from %s: %s\"), flatpak_file_get_path_cached (previous_app_id_dir),"
    },
    {
        "line": 220,
        "fullcodeline": "do_migrate = FALSE; /* Don't migrate older things, they are likely symlinks to the thing that we failed on */"
    },
    {
        "line": 231,
        "fullcodeline": "if (!flatpak_file_rename (previous_app_id_dir, real_app_id_dir, cancellable, &local_error))"
    },
    {
        "line": 233,
        "fullcodeline": "g_warning (_(\"Failed to migrate old app data directory %s to new name %s: %s\"),"
    },
    {
        "line": 411,
        "fullcodeline": "g_propagate_error (error, g_steal_pointer (&my_error));"
    },
    {
        "line": 118,
        "fullcodeline": "if (i == 0)"
    },
    {
        "line": 120,
        "fullcodeline": "if (i == 1)"
    },
    {
        "line": 234,
        "fullcodeline": "flatpak_file_get_path_cached (previous_app_id_dir), app_id,"
    },
    {
        "line": 119,
        "fullcodeline": "custom_runtime_id = custom_runtime_parts[i];"
    },
    {
        "line": 121,
        "fullcodeline": "custom_runtime_arch = custom_runtime_parts[i];"
    },
    {
        "line": 123,
        "fullcodeline": "if (i == 2 && custom_runtime_version == NULL)"
    },
    {
        "line": 124,
        "fullcodeline": "custom_runtime_version = custom_runtime_parts[i];"
    },
    {
        "line": 240,
        "fullcodeline": "if (!g_file_make_symbolic_link (previous_app_id_dir, app_id, cancellable, &local_error))"
    },
    {
        "line": 242,
        "fullcodeline": "g_warning (_(\"Failed to create symlink while migrating %s: %s\"),"
    },
    {
        "line": 243,
        "fullcodeline": "flatpak_file_get_path_cached (previous_app_id_dir),"
    }
]