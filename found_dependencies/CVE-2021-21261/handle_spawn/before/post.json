[
    {
        "line": 11,
        "fullcodeline": "g_autoptr(GError) error = NULL;"
    },
    {
        "line": 12,
        "fullcodeline": "ChildSetupData child_setup_data = { NULL };"
    },
    {
        "line": 15,
        "fullcodeline": "InstanceIdReadData *instance_id_read_data = NULL;"
    },
    {
        "line": 17,
        "fullcodeline": "const gint *fds = NULL;"
    },
    {
        "line": 18,
        "fullcodeline": "gint fds_len = 0;"
    },
    {
        "line": 19,
        "fullcodeline": "g_autofree FdMapEntry *fd_map = NULL;"
    },
    {
        "line": 23,
        "fullcodeline": "g_autoptr(GPtrArray) flatpak_argv = g_ptr_array_new_with_free_func (g_free);"
    },
    {
        "line": 24,
        "fullcodeline": "g_autofree char *app_id = NULL;"
    },
    {
        "line": 25,
        "fullcodeline": "g_autofree char *branch = NULL;"
    },
    {
        "line": 26,
        "fullcodeline": "g_autofree char *arch = NULL;"
    },
    {
        "line": 27,
        "fullcodeline": "g_autofree char *app_commit = NULL;"
    },
    {
        "line": 28,
        "fullcodeline": "g_autofree char *runtime_ref = NULL;"
    },
    {
        "line": 29,
        "fullcodeline": "g_auto(GStrv) runtime_parts = NULL;"
    },
    {
        "line": 30,
        "fullcodeline": "g_autofree char *runtime_commit = NULL;"
    },
    {
        "line": 31,
        "fullcodeline": "g_autofree char *instance_path = NULL;"
    },
    {
        "line": 32,
        "fullcodeline": "g_auto(GStrv) extra_args = NULL;"
    },
    {
        "line": 33,
        "fullcodeline": "g_auto(GStrv) shares = NULL;"
    },
    {
        "line": 34,
        "fullcodeline": "g_auto(GStrv) sockets = NULL;"
    },
    {
        "line": 35,
        "fullcodeline": "g_auto(GStrv) devices = NULL;"
    },
    {
        "line": 36,
        "fullcodeline": "g_auto(GStrv) sandbox_expose = NULL;"
    },
    {
        "line": 37,
        "fullcodeline": "g_auto(GStrv) sandbox_expose_ro = NULL;"
    },
    {
        "line": 38,
        "fullcodeline": "g_autoptr(GVariant) sandbox_expose_fd = NULL;"
    },
    {
        "line": 39,
        "fullcodeline": "g_autoptr(GVariant) sandbox_expose_fd_ro = NULL;"
    },
    {
        "line": 40,
        "fullcodeline": "g_autoptr(GOutputStream) instance_id_out_stream = NULL;"
    },
    {
        "line": 41,
        "fullcodeline": "guint sandbox_flags = 0;"
    },
    {
        "line": 48,
        "fullcodeline": "child_setup_data.instance_id_fd = -1;"
    },
    {
        "line": 53,
        "fullcodeline": "app_info = g_object_get_data (G_OBJECT (invocation), \"app-info\");"
    },
    {
        "line": 54,
        "fullcodeline": "g_assert (app_info != NULL);"
    },
    {
        "line": 56,
        "fullcodeline": "app_id = g_key_file_get_string (app_info,"
    },
    {
        "line": 59,
        "fullcodeline": "g_assert (app_id != NULL);"
    },
    {
        "line": 61,
        "fullcodeline": "g_debug (\"spawn() called from app: '%s'\", app_id);"
    },
    {
        "line": 88,
        "fullcodeline": "runtime_ref = g_key_file_get_string (app_info,"
    },
    {
        "line": 98,
        "fullcodeline": "runtime_parts = g_strsplit (runtime_ref, \"/\", -1);"
    },
    {
        "line": 100,
        "fullcodeline": "branch = g_key_file_get_string (app_info,"
    },
    {
        "line": 103,
        "fullcodeline": "instance_path = g_key_file_get_string (app_info,"
    },
    {
        "line": 106,
        "fullcodeline": "arch = g_key_file_get_string (app_info,"
    },
    {
        "line": 109,
        "fullcodeline": "extra_args = g_key_file_get_string_list (app_info,"
    },
    {
        "line": 112,
        "fullcodeline": "app_commit = g_key_file_get_string (app_info,"
    },
    {
        "line": 115,
        "fullcodeline": "runtime_commit = g_key_file_get_string (app_info,"
    },
    {
        "line": 118,
        "fullcodeline": "shares = g_key_file_get_string_list (app_info, FLATPAK_METADATA_GROUP_CONTEXT,"
    },
    {
        "line": 120,
        "fullcodeline": "sockets = g_key_file_get_string_list (app_info, FLATPAK_METADATA_GROUP_CONTEXT,"
    },
    {
        "line": 122,
        "fullcodeline": "devices = g_key_file_get_string_list (app_info, FLATPAK_METADATA_GROUP_CONTEXT,"
    },
    {
        "line": 125,
        "fullcodeline": "devel = g_key_file_get_boolean (app_info, FLATPAK_METADATA_GROUP_INSTANCE,"
    },
    {
        "line": 128,
        "fullcodeline": "g_variant_lookup (arg_options, \"sandbox-expose\", \"^as\", &sandbox_expose);"
    },
    {
        "line": 129,
        "fullcodeline": "g_variant_lookup (arg_options, \"sandbox-expose-ro\", \"^as\", &sandbox_expose_ro);"
    },
    {
        "line": 130,
        "fullcodeline": "g_variant_lookup (arg_options, \"sandbox-flags\", \"u\", &sandbox_flags);"
    },
    {
        "line": 131,
        "fullcodeline": "sandbox_expose_fd = g_variant_lookup_value (arg_options, \"sandbox-expose-fd\", G_VARIANT_TYPE (\"ah\"));"
    },
    {
        "line": 132,
        "fullcodeline": "sandbox_expose_fd_ro = g_variant_lookup_value (arg_options, \"sandbox-expose-fd-ro\", G_VARIANT_TYPE (\"ah\"));"
    },
    {
        "line": 174,
        "fullcodeline": "g_debug (\"Running spawn command %s\", arg_argv[0]);"
    },
    {
        "line": 176,
        "fullcodeline": "n_fds = 0;"
    },
    {
        "line": 179,
        "fullcodeline": "fd_map = g_new0 (FdMapEntry, n_fds);"
    },
    {
        "line": 181,
        "fullcodeline": "child_setup_data.fd_map = fd_map;"
    },
    {
        "line": 182,
        "fullcodeline": "child_setup_data.fd_map_len = n_fds;"
    },
    {
        "line": 184,
        "fullcodeline": "max_fd = -1;"
    },
    {
        "line": 257,
        "fullcodeline": "n_envs = g_variant_n_children (arg_envs);"
    },
    {
        "line": 267,
        "fullcodeline": "g_ptr_array_add (flatpak_argv, g_strdup (\"flatpak\"));"
    },
    {
        "line": 268,
        "fullcodeline": "g_ptr_array_add (flatpak_argv, g_strdup (\"run\"));"
    },
    {
        "line": 270,
        "fullcodeline": "sandboxed = (arg_flags & FLATPAK_SPAWN_FLAGS_SANDBOX) != 0;"
    },
    {
        "line": 312,
        "fullcodeline": "expose_pids = (arg_flags & FLATPAK_SPAWN_FLAGS_EXPOSE_PIDS) != 0;"
    },
    {
        "line": 313,
        "fullcodeline": "share_pids = (arg_flags & FLATPAK_SPAWN_FLAGS_SHARE_PIDS) != 0;"
    },
    {
        "line": 354,
        "fullcodeline": "notify_start = (arg_flags & FLATPAK_SPAWN_FLAGS_NOTIFY_START) != 0;"
    },
    {
        "line": 484,
        "fullcodeline": "g_ptr_array_add (flatpak_argv, g_strdup_printf (\"--runtime=%s\", runtime_parts[1]));"
    },
    {
        "line": 485,
        "fullcodeline": "g_ptr_array_add (flatpak_argv, g_strdup_printf (\"--runtime-version=%s\", runtime_parts[3]));"
    },
    {
        "line": 501,
        "fullcodeline": "g_ptr_array_add (flatpak_argv, g_strdup_printf (\"%s/%s/%s\", app_id, arch ? arch : \"\", branch ? branch : \"\"));"
    },
    {
        "line": 504,
        "fullcodeline": "g_ptr_array_add (flatpak_argv, NULL);"
    },
    {
        "line": 546,
        "fullcodeline": "pid_data = g_new0 (PidData, 1);"
    },
    {
        "line": 547,
        "fullcodeline": "pid_data->pid = pid;"
    },
    {
        "line": 548,
        "fullcodeline": "pid_data->client = g_strdup (g_dbus_method_invocation_get_sender (invocation));"
    },
    {
        "line": 549,
        "fullcodeline": "pid_data->watch_bus = (arg_flags & FLATPAK_SPAWN_FLAGS_WATCH_BUS) != 0;"
    },
    {
        "line": 550,
        "fullcodeline": "pid_data->expose_or_share_pids = (expose_pids || share_pids);"
    },
    {
        "line": 551,
        "fullcodeline": "pid_data->child_watch = g_child_watch_add_full (G_PRIORITY_DEFAULT,"
    },
    {
        "line": 557,
        "fullcodeline": "g_debug (\"Client Pid is %d\", pid_data->pid);"
    },
    {
        "line": 559,
        "fullcodeline": "g_hash_table_replace (client_pid_data_hash, GUINT_TO_POINTER (pid_data->pid),"
    },
    {
        "line": 562,
        "fullcodeline": "portal_flatpak_complete_spawn (object, invocation, NULL, pid);"
    },
    {
        "line": 50,
        "fullcodeline": "if (fd_list != NULL)"
    },
    {
        "line": 62,
        "fullcodeline": "if (*app_id == 0)"
    },
    {
        "line": 70,
        "fullcodeline": "if (*arg_cwd_path == 0)"
    },
    {
        "line": 73,
        "fullcodeline": "if (arg_argv == NULL || *arg_argv == NULL)"
    },
    {
        "line": 81,
        "fullcodeline": "if ((arg_flags & ~FLATPAK_SPAWN_FLAGS_ALL) != 0)"
    },
    {
        "line": 91,
        "fullcodeline": "if (runtime_ref == NULL)"
    },
    {
        "line": 134,
        "fullcodeline": "if ((sandbox_flags & ~FLATPAK_SPAWN_SANDBOX_FLAGS_ALL) != 0)"
    },
    {
        "line": 141,
        "fullcodeline": "if (instance_path == NULL &&"
    },
    {
        "line": 151,
        "fullcodeline": "for (i = 0; sandbox_expose != NULL && sandbox_expose[i] != NULL; i++)"
    },
    {
        "line": 163,
        "fullcodeline": "for (i = 0; sandbox_expose_ro != NULL && sandbox_expose_ro[i] != NULL; i++)"
    },
    {
        "line": 177,
        "fullcodeline": "if (fds != NULL)"
    },
    {
        "line": 185,
        "fullcodeline": "for (i = 0; i < n_fds; i++)"
    },
    {
        "line": 225,
        "fullcodeline": "for (i = 0; i < n_fds; i++)"
    },
    {
        "line": 249,
        "fullcodeline": "if (arg_flags & FLATPAK_SPAWN_FLAGS_CLEAR_ENV)"
    },
    {
        "line": 258,
        "fullcodeline": "for (i = 0; i < n_envs; i++)"
    },
    {
        "line": 315,
        "fullcodeline": "if (expose_pids || share_pids)"
    },
    {
        "line": 387,
        "fullcodeline": "if (shares != NULL && g_strv_contains ((const char * const *) shares, \"network\") &&"
    },
    {
        "line": 404,
        "fullcodeline": "for (i = 0; sandbox_expose_ro != NULL && sandbox_expose_ro[i] != NULL; i++)"
    },
    {
        "line": 410,
        "fullcodeline": "if (sandbox_expose_fd != NULL)"
    },
    {
        "line": 447,
        "fullcodeline": "if (sandbox_expose_fd_ro != NULL)"
    },
    {
        "line": 487,
        "fullcodeline": "if ((arg_flags & FLATPAK_SPAWN_FLAGS_LATEST_VERSION) == 0)"
    },
    {
        "line": 495,
        "fullcodeline": "if (arg_cwd_path != NULL)"
    },
    {
        "line": 498,
        "fullcodeline": "if (arg_argv[0][0] != 0)"
    },
    {
        "line": 502,
        "fullcodeline": "for (i = 1; arg_argv[i] != NULL; i++)"
    },
    {
        "line": 503,
        "fullcodeline": "g_ptr_array_add (flatpak_argv, g_strdup (arg_argv[i]));"
    },
    {
        "line": 521,
        "fullcodeline": "if (!g_spawn_async_with_pipes (NULL,"
    },
    {
        "line": 51,
        "fullcodeline": "fds = g_unix_fd_list_peek_fds (fd_list, &fds_len);"
    },
    {
        "line": 64,
        "fullcodeline": "g_dbus_method_invocation_return_error (invocation, G_DBUS_ERROR,"
    },
    {
        "line": 71,
        "fullcodeline": "arg_cwd_path = NULL;"
    },
    {
        "line": 75,
        "fullcodeline": "g_dbus_method_invocation_return_error (invocation, G_DBUS_ERROR,"
    },
    {
        "line": 83,
        "fullcodeline": "g_dbus_method_invocation_return_error (invocation, G_DBUS_ERROR, G_DBUS_ERROR_INVALID_ARGS,"
    },
    {
        "line": 93,
        "fullcodeline": "g_dbus_method_invocation_return_error (invocation, G_DBUS_ERROR, G_DBUS_ERROR_INVALID_ARGS,"
    },
    {
        "line": 136,
        "fullcodeline": "g_dbus_method_invocation_return_error (invocation, G_DBUS_ERROR, G_DBUS_ERROR_INVALID_ARGS,"
    },
    {
        "line": 142,
        "fullcodeline": "((sandbox_expose != NULL && sandbox_expose[0] != NULL) ||"
    },
    {
        "line": 145,
        "fullcodeline": "g_dbus_method_invocation_return_error (invocation, G_DBUS_ERROR,"
    },
    {
        "line": 153,
        "fullcodeline": "const char *expose = sandbox_expose[i];"
    },
    {
        "line": 155,
        "fullcodeline": "g_debug (\"exposing %s\", expose);"
    },
    {
        "line": 165,
        "fullcodeline": "const char *expose = sandbox_expose_ro[i];"
    },
    {
        "line": 166,
        "fullcodeline": "g_debug (\"exposing %s\", expose);"
    },
    {
        "line": 178,
        "fullcodeline": "n_fds = g_variant_n_children (arg_fds);"
    },
    {
        "line": 190,
        "fullcodeline": "g_variant_get_child (arg_fds, i, \"{uh}\", &dest_fd, &handle);"
    },
    {
        "line": 201,
        "fullcodeline": "handle_fd = fds[handle];"
    },
    {
        "line": 203,
        "fullcodeline": "fd_map[i].to = dest_fd;"
    },
    {
        "line": 204,
        "fullcodeline": "fd_map[i].from = handle_fd;"
    },
    {
        "line": 205,
        "fullcodeline": "fd_map[i].final = fd_map[i].to;"
    },
    {
        "line": 217,
        "fullcodeline": "max_fd = MAX (max_fd, fd_map[i].to);"
    },
    {
        "line": 218,
        "fullcodeline": "max_fd = MAX (max_fd, fd_map[i].from);"
    },
    {
        "line": 228,
        "fullcodeline": "gboolean conflict = FALSE;"
    },
    {
        "line": 251,
        "fullcodeline": "char *empty[] = { NULL };"
    },
    {
        "line": 252,
        "fullcodeline": "env = g_strdupv (empty);"
    },
    {
        "line": 260,
        "fullcodeline": "const char *var = NULL;"
    },
    {
        "line": 261,
        "fullcodeline": "const char *val = NULL;"
    },
    {
        "line": 262,
        "fullcodeline": "g_variant_get_child (arg_envs, i, \"{&s&s}\", &var, &val);"
    },
    {
        "line": 264,
        "fullcodeline": "env = g_environ_setenv (env, var, val, TRUE);"
    },
    {
        "line": 274,
        "fullcodeline": "g_ptr_array_add (flatpak_argv, g_strdup (\"--sandbox\"));"
    },
    {
        "line": 317,
        "fullcodeline": "g_autofree char *instance_id = NULL;"
    },
    {
        "line": 318,
        "fullcodeline": "int sender_pid1 = 0;"
    },
    {
        "line": 328,
        "fullcodeline": "instance_id = g_key_file_get_string (app_info,"
    },
    {
        "line": 346,
        "fullcodeline": "g_ptr_array_add (flatpak_argv, g_strdup_printf (\"--parent-pid=%d\", sender_pid1));"
    },
    {
        "line": 357,
        "fullcodeline": "int pipe_fds[2];"
    },
    {
        "line": 368,
        "fullcodeline": "GInputStream *in_stream = G_INPUT_STREAM (g_unix_input_stream_new (pipe_fds[0], TRUE));"
    },
    {
        "line": 370,
        "fullcodeline": "instance_id_out_stream = G_OUTPUT_STREAM (g_unix_output_stream_new (pipe_fds[1], TRUE));"
    },
    {
        "line": 372,
        "fullcodeline": "instance_id_read_data = g_new0 (InstanceIdReadData, 1);"
    },
    {
        "line": 374,
        "fullcodeline": "g_input_stream_read_async (in_stream, instance_id_read_data->buffer,"
    },
    {
        "line": 378,
        "fullcodeline": "g_ptr_array_add (flatpak_argv, g_strdup_printf (\"--instance-id-fd=%d\", pipe_fds[1]));"
    },
    {
        "line": 379,
        "fullcodeline": "child_setup_data.instance_id_fd = pipe_fds[1];"
    },
    {
        "line": 383,
        "fullcodeline": "g_ptr_array_add (flatpak_argv, g_strdup (\"--devel\"));"
    },
    {
        "line": 388,
        "fullcodeline": "!(arg_flags & FLATPAK_SPAWN_FLAGS_NO_NETWORK))"
    },
    {
        "line": 389,
        "fullcodeline": "g_ptr_array_add (flatpak_argv, g_strdup (\"--share=network\"));"
    },
    {
        "line": 406,
        "fullcodeline": "const char *expose = sandbox_expose_ro[i];"
    },
    {
        "line": 407,
        "fullcodeline": "g_debug (\"exposing %s\", expose);"
    },
    {
        "line": 412,
        "fullcodeline": "gsize len = g_variant_n_children (sandbox_expose_fd);"
    },
    {
        "line": 449,
        "fullcodeline": "gsize len = g_variant_n_children (sandbox_expose_fd_ro);"
    },
    {
        "line": 496,
        "fullcodeline": "g_ptr_array_add (flatpak_argv, g_strdup_printf (\"--cwd=%s\", arg_cwd_path));"
    },
    {
        "line": 499,
        "fullcodeline": "g_ptr_array_add (flatpak_argv, g_strdup_printf (\"--command=%s\", arg_argv[0]));"
    },
    {
        "line": 508,
        "fullcodeline": "g_autoptr(GString) cmd = g_string_new (\"\");"
    },
    {
        "line": 517,
        "fullcodeline": "g_debug (\"Starting: %s\\n\", cmd->str);"
    },
    {
        "line": 532,
        "fullcodeline": "gint code = G_DBUS_ERROR_FAILED;"
    },
    {
        "line": 537,
        "fullcodeline": "g_dbus_method_invocation_return_error (invocation, G_DBUS_ERROR, code,"
    },
    {
        "line": 544,
        "fullcodeline": "instance_id_read_data->pid = pid;"
    },
    {
        "line": 84,
        "fullcodeline": "\"Unsupported flags enabled: 0x%x\", arg_flags & ~FLATPAK_SPAWN_FLAGS_ALL);"
    },
    {
        "line": 137,
        "fullcodeline": "\"Unsupported sandbox flags enabled: 0x%x\", arg_flags & ~FLATPAK_SPAWN_SANDBOX_FLAGS_ALL);"
    },
    {
        "line": 143,
        "fullcodeline": "(sandbox_expose_ro != NULL && sandbox_expose_ro[0] != NULL)))"
    },
    {
        "line": 156,
        "fullcodeline": "if (!is_valid_expose (expose, &error))"
    },
    {
        "line": 167,
        "fullcodeline": "if (!is_valid_expose (expose, &error))"
    },
    {
        "line": 192,
        "fullcodeline": "if (handle >= fds_len || handle < 0)"
    },
    {
        "line": 209,
        "fullcodeline": "if ((dest_fd == 0 || dest_fd == 1 || dest_fd == 2) &&"
    },
    {
        "line": 235,
        "fullcodeline": "for (j = i + 1; j < n_fds; j++)"
    },
    {
        "line": 255,
        "fullcodeline": "env = g_get_environ ();"
    },
    {
        "line": 276,
        "fullcodeline": "if (sandbox_flags & FLATPAK_SPAWN_SANDBOX_FLAGS_SHARE_DISPLAY)"
    },
    {
        "line": 289,
        "fullcodeline": "if (sandbox_flags & FLATPAK_SPAWN_SANDBOX_FLAGS_SHARE_SOUND)"
    },
    {
        "line": 294,
        "fullcodeline": "if (sandbox_flags & FLATPAK_SPAWN_SANDBOX_FLAGS_SHARE_GPU)"
    },
    {
        "line": 301,
        "fullcodeline": "if (sandbox_flags & FLATPAK_SPAWN_SANDBOX_FLAGS_ALLOW_DBUS)"
    },
    {
        "line": 303,
        "fullcodeline": "if (sandbox_flags & FLATPAK_SPAWN_SANDBOX_FLAGS_ALLOW_A11Y)"
    },
    {
        "line": 320,
        "fullcodeline": "if (!(supports & FLATPAK_SPAWN_SUPPORT_FLAGS_EXPOSE_PIDS))"
    },
    {
        "line": 338,
        "fullcodeline": "if (sender_pid1 == 0)"
    },
    {
        "line": 358,
        "fullcodeline": "if (pipe (pipe_fds) == -1)"
    },
    {
        "line": 375,
        "fullcodeline": "INSTANCE_ID_BUFFER_SIZE - 1, G_PRIORITY_DEFAULT, NULL,"
    },
    {
        "line": 391,
        "fullcodeline": "g_ptr_array_add (flatpak_argv, g_strdup (\"--unshare=network\"));"
    },
    {
        "line": 396,
        "fullcodeline": "for (i = 0; sandbox_expose != NULL && sandbox_expose[i] != NULL; i++)"
    },
    {
        "line": 397,
        "fullcodeline": "g_ptr_array_add (flatpak_argv,"
    },
    {
        "line": 399,
        "fullcodeline": "for (i = 0; sandbox_expose_ro != NULL && sandbox_expose_ro[i] != NULL; i++)"
    },
    {
        "line": 400,
        "fullcodeline": "g_ptr_array_add (flatpak_argv,"
    },
    {
        "line": 413,
        "fullcodeline": "for (i = 0; i < len; i++)"
    },
    {
        "line": 450,
        "fullcodeline": "for (i = 0; i < len; i++)"
    },
    {
        "line": 510,
        "fullcodeline": "for (i = 0; flatpak_argv->pdata[i] != NULL; i++)"
    },
    {
        "line": 522,
        "fullcodeline": "(char **) flatpak_argv->pdata,"
    },
    {
        "line": 524,
        "fullcodeline": "G_SPAWN_SEARCH_PATH | G_SPAWN_DO_NOT_REAP_CHILD | G_SPAWN_LEAVE_DESCRIPTORS_OPEN,"
    },
    {
        "line": 533,
        "fullcodeline": "if (g_error_matches (error, G_SPAWN_ERROR, G_SPAWN_ERROR_ACCES))"
    },
    {
        "line": 158,
        "fullcodeline": "g_dbus_method_invocation_return_gerror (invocation, error);"
    },
    {
        "line": 169,
        "fullcodeline": "g_dbus_method_invocation_return_gerror (invocation, error);"
    },
    {
        "line": 194,
        "fullcodeline": "g_dbus_method_invocation_return_error (invocation, G_DBUS_ERROR,"
    },
    {
        "line": 211,
        "fullcodeline": "isatty (handle_fd))"
    },
    {
        "line": 213,
        "fullcodeline": "child_setup_data.set_tty = TRUE;"
    },
    {
        "line": 214,
        "fullcodeline": "child_setup_data.tty = handle_fd;"
    },
    {
        "line": 246,
        "fullcodeline": "fd_map[i].to = ++max_fd;"
    },
    {
        "line": 302,
        "fullcodeline": "g_ptr_array_add (flatpak_argv, g_strdup (\"--session-bus\"));"
    },
    {
        "line": 304,
        "fullcodeline": "g_ptr_array_add (flatpak_argv, g_strdup (\"--a11y-bus\"));"
    },
    {
        "line": 308,
        "fullcodeline": "for (i = 0; extra_args != NULL && extra_args[i] != NULL; i++)"
    },
    {
        "line": 309,
        "fullcodeline": "g_ptr_array_add (flatpak_argv, g_strdup (extra_args[i]));"
    },
    {
        "line": 322,
        "fullcodeline": "g_dbus_method_invocation_return_error (invocation, G_DBUS_ERROR,"
    },
    {
        "line": 334,
        "fullcodeline": "g_autoptr(FlatpakInstance) instance = flatpak_instance_new_for_id (instance_id);"
    },
    {
        "line": 335,
        "fullcodeline": "sender_pid1 = flatpak_instance_get_child_pid (instance);"
    },
    {
        "line": 340,
        "fullcodeline": "g_dbus_method_invocation_return_error (invocation, G_DBUS_ERROR,"
    },
    {
        "line": 349,
        "fullcodeline": "g_ptr_array_add (flatpak_argv, g_strdup (\"--parent-share-pids\"));"
    },
    {
        "line": 360,
        "fullcodeline": "int errsv = errno;"
    },
    {
        "line": 361,
        "fullcodeline": "g_dbus_method_invocation_return_error (invocation, G_IO_ERROR,"
    },
    {
        "line": 398,
        "fullcodeline": "filesystem_sandbox_arg (instance_path, sandbox_expose[i], FALSE));"
    },
    {
        "line": 401,
        "fullcodeline": "filesystem_sandbox_arg (instance_path, sandbox_expose_ro[i], TRUE));"
    },
    {
        "line": 416,
        "fullcodeline": "g_variant_get_child (sandbox_expose_fd, i, \"h\", &handle);"
    },
    {
        "line": 453,
        "fullcodeline": "g_variant_get_child (sandbox_expose_fd_ro, i, \"h\", &handle);"
    },
    {
        "line": 490,
        "fullcodeline": "g_ptr_array_add (flatpak_argv, g_strdup_printf (\"--commit=%s\", app_commit));"
    },
    {
        "line": 492,
        "fullcodeline": "g_ptr_array_add (flatpak_argv, g_strdup_printf (\"--runtime-commit=%s\", runtime_commit));"
    },
    {
        "line": 514,
        "fullcodeline": "g_string_append (cmd, flatpak_argv->pdata[i]);"
    },
    {
        "line": 534,
        "fullcodeline": "code = G_DBUS_ERROR_ACCESS_DENIED;"
    },
    {
        "line": 210,
        "fullcodeline": "!child_setup_data.set_tty &&"
    },
    {
        "line": 238,
        "fullcodeline": "if (from_fd == to_fd)"
    },
    {
        "line": 278,
        "fullcodeline": "if (sockets != NULL && g_strv_contains ((const char * const *) sockets, \"wayland\"))"
    },
    {
        "line": 280,
        "fullcodeline": "if (sockets != NULL && g_strv_contains ((const char * const *) sockets, \"fallback-x11\"))"
    },
    {
        "line": 282,
        "fullcodeline": "if (sockets != NULL && g_strv_contains ((const char * const *) sockets, \"x11\"))"
    },
    {
        "line": 284,
        "fullcodeline": "if (shares != NULL && g_strv_contains ((const char * const *) shares, \"ipc\") &&"
    },
    {
        "line": 291,
        "fullcodeline": "if (sockets != NULL && g_strv_contains ((const char * const *) sockets, \"pulseaudio\"))"
    },
    {
        "line": 296,
        "fullcodeline": "if (devices != NULL &&"
    },
    {
        "line": 351,
        "fullcodeline": "g_ptr_array_add (flatpak_argv, g_strdup (\"--parent-expose-pids\"));"
    },
    {
        "line": 362,
        "fullcodeline": "g_io_error_from_errno (errsv),"
    },
    {
        "line": 364,
        "fullcodeline": "g_strerror (errsv));"
    },
    {
        "line": 417,
        "fullcodeline": "if (handle >= 0 && handle < fds_len)"
    },
    {
        "line": 454,
        "fullcodeline": "if (handle >= 0 && handle < fds_len)"
    },
    {
        "line": 512,
        "fullcodeline": "if (i > 0)"
    },
    {
        "line": 240,
        "fullcodeline": "conflict = TRUE;"
    },
    {
        "line": 279,
        "fullcodeline": "g_ptr_array_add (flatpak_argv, g_strdup (\"--socket=wayland\"));"
    },
    {
        "line": 281,
        "fullcodeline": "g_ptr_array_add (flatpak_argv, g_strdup (\"--socket=fallback-x11\"));"
    },
    {
        "line": 283,
        "fullcodeline": "g_ptr_array_add (flatpak_argv, g_strdup (\"--socket=x11\"));"
    },
    {
        "line": 285,
        "fullcodeline": "sockets != NULL && (g_strv_contains ((const char * const *) sockets, \"fallback-x11\") ||"
    },
    {
        "line": 287,
        "fullcodeline": "g_ptr_array_add (flatpak_argv, g_strdup (\"--share=ipc\"));"
    },
    {
        "line": 292,
        "fullcodeline": "g_ptr_array_add (flatpak_argv, g_strdup (\"--socket=pulseaudio\"));"
    },
    {
        "line": 297,
        "fullcodeline": "(g_strv_contains ((const char * const *) devices, \"dri\") ||"
    },
    {
        "line": 299,
        "fullcodeline": "g_ptr_array_add (flatpak_argv, g_strdup (\"--device=dri\"));"
    },
    {
        "line": 419,
        "fullcodeline": "int handle_fd = fds[handle];"
    },
    {
        "line": 420,
        "fullcodeline": "g_autofree char *path = NULL;"
    },
    {
        "line": 421,
        "fullcodeline": "gboolean writable = FALSE;"
    },
    {
        "line": 423,
        "fullcodeline": "path = get_path_for_fd (handle_fd, &writable, &error);"
    },
    {
        "line": 456,
        "fullcodeline": "int handle_fd = fds[handle];"
    },
    {
        "line": 457,
        "fullcodeline": "g_autofree char *path = NULL;"
    },
    {
        "line": 458,
        "fullcodeline": "gboolean writable = FALSE;"
    },
    {
        "line": 460,
        "fullcodeline": "path = get_path_for_fd (handle_fd, &writable, &error);"
    },
    {
        "line": 513,
        "fullcodeline": "g_string_append (cmd, \" \");"
    },
    {
        "line": 535,
        "fullcodeline": "else if (g_error_matches (error, G_SPAWN_ERROR, G_SPAWN_ERROR_NOENT))"
    },
    {
        "line": 286,
        "fullcodeline": "g_strv_contains ((const char * const *) sockets, \"x11\")))"
    },
    {
        "line": 298,
        "fullcodeline": "g_strv_contains ((const char * const *) devices, \"all\")))"
    },
    {
        "line": 438,
        "fullcodeline": "g_dbus_method_invocation_return_error (invocation, G_DBUS_ERROR,"
    },
    {
        "line": 475,
        "fullcodeline": "g_dbus_method_invocation_return_error (invocation, G_DBUS_ERROR,"
    },
    {
        "line": 536,
        "fullcodeline": "code = G_DBUS_ERROR_FILE_NOT_FOUND;"
    },
    {
        "line": 427,
        "fullcodeline": "g_ptr_array_add (flatpak_argv, filesystem_arg (path, !writable));"
    },
    {
        "line": 464,
        "fullcodeline": "g_ptr_array_add (flatpak_argv, filesystem_arg (path, TRUE));"
    },
    {
        "line": 431,
        "fullcodeline": "g_debug (\"unable to get path for sandbox-exposed fd %d, ignoring: %s\","
    },
    {
        "line": 433,
        "fullcodeline": "g_clear_error (&error);"
    },
    {
        "line": 468,
        "fullcodeline": "g_debug (\"unable to get path for sandbox-exposed fd %d, ignoring: %s\","
    },
    {
        "line": 470,
        "fullcodeline": "g_clear_error (&error);"
    }
]