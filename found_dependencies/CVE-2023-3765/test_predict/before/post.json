[
    {
        "line": 2,
        "fullcodeline": "with TempDir(chdr=True) as tmp:"
    },
    {
        "line": 6,
        "fullcodeline": "model_registry_uri = \"models:/{name}/{stage}\".format(name=\"impredicting\", stage=\"None\")"
    },
    {
        "line": 7,
        "fullcodeline": "input_json_path = tmp.path(\"input.json\")"
    },
    {
        "line": 8,
        "fullcodeline": "input_csv_path = tmp.path(\"input.csv\")"
    },
    {
        "line": 9,
        "fullcodeline": "output_json_path = tmp.path(\"output.json\")"
    },
    {
        "line": 17,
        "fullcodeline": "subprocess.run("
    },
    {
        "line": 36,
        "fullcodeline": "actual = pd.read_json(output_json_path, orient=\"records\")"
    },
    {
        "line": 38,
        "fullcodeline": "expected = sk_model.predict(x)"
    },
    {
        "line": 39,
        "fullcodeline": "assert all(expected == actual)"
    },
    {
        "line": 42,
        "fullcodeline": "subprocess.run("
    },
    {
        "line": 58,
        "fullcodeline": "actual = pd.read_json(output_json_path, orient=\"records\")"
    },
    {
        "line": 60,
        "fullcodeline": "expected = sk_model.predict(x)"
    },
    {
        "line": 61,
        "fullcodeline": "assert all(expected == actual)"
    },
    {
        "line": 64,
        "fullcodeline": "subprocess.run("
    },
    {
        "line": 83,
        "fullcodeline": "actual = pd.read_json(output_json_path, orient=\"records\")"
    },
    {
        "line": 85,
        "fullcodeline": "expected = sk_model.predict(x)"
    },
    {
        "line": 86,
        "fullcodeline": "assert all(expected == actual)"
    },
    {
        "line": 89,
        "fullcodeline": "subprocess.run("
    },
    {
        "line": 107,
        "fullcodeline": "actual = pd.read_json(output_json_path, orient=\"records\")"
    },
    {
        "line": 109,
        "fullcodeline": "expected = sk_model.predict(x)"
    },
    {
        "line": 110,
        "fullcodeline": "assert all(expected == actual)"
    },
    {
        "line": 113,
        "fullcodeline": "prc = subprocess.run("
    },
    {
        "line": 130,
        "fullcodeline": "actual = pd.read_json(prc.stdout, orient=\"records\")"
    },
    {
        "line": 132,
        "fullcodeline": "expected = sk_model.predict(x)"
    },
    {
        "line": 133,
        "fullcodeline": "assert all(expected == actual)"
    },
    {
        "line": 139,
        "fullcodeline": "subprocess.run("
    },
    {
        "line": 157,
        "fullcodeline": "actual = pd.read_json(output_json_path, orient=\"records\")"
    },
    {
        "line": 159,
        "fullcodeline": "expected = sk_model.predict(x)"
    },
    {
        "line": 160,
        "fullcodeline": "assert all(expected == actual)"
    },
    {
        "line": 3,
        "fullcodeline": "with mlflow.start_run() as active_run:"
    },
    {
        "line": 10,
        "fullcodeline": "x, _ = iris_data"
    },
    {
        "line": 11,
        "fullcodeline": "with open(input_json_path, \"w\") as f:"
    },
    {
        "line": 14,
        "fullcodeline": "pd.DataFrame(x).to_csv(input_csv_path, index=False)"
    },
    {
        "line": 18,
        "fullcodeline": "["
    },
    {
        "line": 43,
        "fullcodeline": "["
    },
    {
        "line": 65,
        "fullcodeline": "["
    },
    {
        "line": 90,
        "fullcodeline": "["
    },
    {
        "line": 140,
        "fullcodeline": "["
    },
    {
        "line": 53,
        "fullcodeline": "*extra_options,"
    },
    {
        "line": 77,
        "fullcodeline": "*extra_options,"
    },
    {
        "line": 102,
        "fullcodeline": "*extra_options,"
    },
    {
        "line": 114,
        "fullcodeline": "["
    },
    {
        "line": 152,
        "fullcodeline": "*extra_options,"
    },
    {
        "line": 5,
        "fullcodeline": "model_uri = f\"runs:/{active_run.info.run_id}/model\""
    },
    {
        "line": 12,
        "fullcodeline": "json.dump({\"dataframe_split\": pd.DataFrame(x).to_dict(orient=\"split\")}, f)"
    },
    {
        "line": 122,
        "fullcodeline": "*extra_options,"
    },
    {
        "line": 124,
        "fullcodeline": "input=Path(input_json_path).read_text(),"
    },
    {
        "line": 4,
        "fullcodeline": "mlflow.sklearn.log_model(sk_model, \"model\", registered_model_name=\"impredicting\")"
    }
]