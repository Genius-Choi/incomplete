[
    {
        "line": 4,
        "fullcodeline": "local_uri = path_to_local_file_uri(model_uri)"
    },
    {
        "line": 5,
        "fullcodeline": "timeout = timeout or MLFLOW_SCORING_SERVER_REQUEST_TIMEOUT.get()"
    },
    {
        "line": 35,
        "fullcodeline": "command_env = os.environ.copy()"
    },
    {
        "line": 36,
        "fullcodeline": "command_env[_SERVER_MODEL_PATH] = local_uri"
    },
    {
        "line": 8,
        "fullcodeline": "if os.name != \"nt\":"
    },
    {
        "line": 38,
        "fullcodeline": "return command, command_env"
    },
    {
        "line": 9,
        "fullcodeline": "args = [f\"--timeout={timeout}\"]"
    },
    {
        "line": 18,
        "fullcodeline": "command = ("
    },
    {
        "line": 23,
        "fullcodeline": "args = []"
    },
    {
        "line": 30,
        "fullcodeline": "command = ("
    },
    {
        "line": 10,
        "fullcodeline": "if port and host:"
    },
    {
        "line": 19,
        "fullcodeline": "f\"gunicorn {' '.join(args)} ${{GUNICORN_CMD_ARGS}}\""
    },
    {
        "line": 31,
        "fullcodeline": "f\"waitress-serve {' '.join(args)} \""
    },
    {
        "line": 11,
        "fullcodeline": "args.append(f\"-b {host}:{port}\")"
    },
    {
        "line": 16,
        "fullcodeline": "args.append(f\"-w {nworkers}\")"
    },
    {
        "line": 25,
        "fullcodeline": "args.append(f\"--host={host}\")"
    },
    {
        "line": 28,
        "fullcodeline": "args.append(f\"--port={port}\")"
    },
    {
        "line": 13,
        "fullcodeline": "args.append(f\"-b {host}\")"
    }
]