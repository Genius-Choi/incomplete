[
    {
        "line": 5,
        "fullcodeline": "int maxModes = network()->support(\"MODES\").toInt(&isNumber);"
    },
    {
        "line": 6,
        "fullcodeline": "if (!isNumber || maxModes == 0) maxModes = 1;"
    },
    {
        "line": 9,
        "fullcodeline": "if (nicks == \"*\") { // All users in channel"
    },
    {
        "line": 20,
        "fullcodeline": "if (nickList.count() == 0) return;"
    },
    {
        "line": 10,
        "fullcodeline": "const QList<IrcUser*> users = network()->ircChannel(bufferInfo.bufferName())->ircUsers();"
    },
    {
        "line": 11,
        "fullcodeline": "foreach(IrcUser *user, users) {"
    },
    {
        "line": 22,
        "fullcodeline": "while (!nickList.isEmpty()) {"
    },
    {
        "line": 23,
        "fullcodeline": "int amount = qMin(nickList.count(), maxModes);"
    },
    {
        "line": 24,
        "fullcodeline": "QString m = addOrRemove; for(int i = 0; i < amount; i++) m += mode;"
    },
    {
        "line": 17,
        "fullcodeline": "nickList = nicks.split(' ', QString::SkipEmptyParts);"
    },
    {
        "line": 26,
        "fullcodeline": "params << bufferInfo.bufferName() << m;"
    },
    {
        "line": 27,
        "fullcodeline": "for(int i = 0; i < amount; i++) params << nickList.takeFirst();"
    },
    {
        "line": 28,
        "fullcodeline": "emit putCmd(\"MODE\", serverEncode(params));"
    },
    {
        "line": 12,
        "fullcodeline": "if ((addOrRemove == '+' && !network()->ircChannel(bufferInfo.bufferName())->userModes(user).contains(mode))"
    },
    {
        "line": 13,
        "fullcodeline": "|| (addOrRemove == '-' && network()->ircChannel(bufferInfo.bufferName())->userModes(user).contains(mode)))"
    },
    {
        "line": 14,
        "fullcodeline": "nickList.append(user->nick());"
    }
]