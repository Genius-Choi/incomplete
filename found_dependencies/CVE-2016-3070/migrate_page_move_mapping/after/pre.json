[
    {
        "line": 8,
        "fullcodeline": "int expected_count = 1 + extra_count;"
    },
    {
        "line": 26,
        "fullcodeline": "oldzone = page_zone(page);"
    },
    {
        "line": 27,
        "fullcodeline": "newzone = page_zone(newpage);"
    },
    {
        "line": 29,
        "fullcodeline": "spin_lock_irq(&mapping->tree_lock);"
    },
    {
        "line": 31,
        "fullcodeline": "pslot = radix_tree_lookup_slot(&mapping->page_tree,"
    },
    {
        "line": 34,
        "fullcodeline": "expected_count += 1 + page_has_private(page);"
    },
    {
        "line": 64,
        "fullcodeline": "set_page_memcg(newpage, page_memcg(page));"
    },
    {
        "line": 65,
        "fullcodeline": "newpage->index = page->index;"
    },
    {
        "line": 66,
        "fullcodeline": "newpage->mapping = page->mapping;"
    },
    {
        "line": 70,
        "fullcodeline": "get_page(newpage);\t/* add cache reference */"
    },
    {
        "line": 77,
        "fullcodeline": "dirty = PageDirty(page);"
    },
    {
        "line": 90,
        "fullcodeline": "page_unfreeze_refs(page, expected_count - 1);"
    },
    {
        "line": 11,
        "fullcodeline": "if (!mapping) {"
    },
    {
        "line": 67,
        "fullcodeline": "if (PageSwapBacked(page))"
    },
    {
        "line": 71,
        "fullcodeline": "if (PageSwapCache(page)) {"
    },
    {
        "line": 105,
        "fullcodeline": "if (newzone != oldzone) {"
    },
    {
        "line": 17,
        "fullcodeline": "set_page_memcg(newpage, page_memcg(page));"
    },
    {
        "line": 18,
        "fullcodeline": "newpage->index = page->index;"
    },
    {
        "line": 19,
        "fullcodeline": "newpage->mapping = page->mapping;"
    },
    {
        "line": 32,
        "fullcodeline": "page_index(page));"
    },
    {
        "line": 35,
        "fullcodeline": "if (page_count(page) != expected_count ||"
    },
    {
        "line": 36,
        "fullcodeline": "radix_tree_deref_slot_protected(pslot, &mapping->tree_lock) != page) {"
    },
    {
        "line": 41,
        "fullcodeline": "if (!page_freeze_refs(page, expected_count)) {"
    },
    {
        "line": 53,
        "fullcodeline": "if (mode == MIGRATE_ASYNC && head &&"
    },
    {
        "line": 54,
        "fullcodeline": "!buffer_migrate_lock_buffers(head, mode)) {"
    },
    {
        "line": 68,
        "fullcodeline": "SetPageSwapBacked(newpage);"
    },
    {
        "line": 72,
        "fullcodeline": "SetPageSwapCache(newpage);"
    },
    {
        "line": 73,
        "fullcodeline": "set_page_private(newpage, page_private(page));"
    },
    {
        "line": 79,
        "fullcodeline": "ClearPageDirty(page);"
    },
    {
        "line": 80,
        "fullcodeline": "SetPageDirty(newpage);"
    },
    {
        "line": 106,
        "fullcodeline": "__dec_zone_state(oldzone, NR_FILE_PAGES);"
    },
    {
        "line": 107,
        "fullcodeline": "__inc_zone_state(newzone, NR_FILE_PAGES);"
    },
    {
        "line": 13,
        "fullcodeline": "if (page_count(page) != expected_count)"
    },
    {
        "line": 38,
        "fullcodeline": "return -EAGAIN;"
    },
    {
        "line": 43,
        "fullcodeline": "return -EAGAIN;"
    },
    {
        "line": 57,
        "fullcodeline": "return -EAGAIN;"
    },
    {
        "line": 108,
        "fullcodeline": "if (PageSwapBacked(page) && !PageSwapCache(page)) {"
    },
    {
        "line": 109,
        "fullcodeline": "__dec_zone_state(oldzone, NR_SHMEM);"
    },
    {
        "line": 110,
        "fullcodeline": "__inc_zone_state(newzone, NR_SHMEM);"
    },
    {
        "line": 112,
        "fullcodeline": "if (dirty && mapping_cap_account_dirty(mapping)) {"
    },
    {
        "line": 113,
        "fullcodeline": "__dec_zone_state(oldzone, NR_FILE_DIRTY);"
    },
    {
        "line": 14,
        "fullcodeline": "return -EAGAIN;"
    }
]