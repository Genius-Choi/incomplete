[
    {
        "line": 11,
        "fullcodeline": "char ha1[PJSIP_MD5STRLEN];"
    },
    {
        "line": 12,
        "fullcodeline": "char ha2[PJSIP_MD5STRLEN];"
    },
    {
        "line": 13,
        "fullcodeline": "unsigned char digest[16];"
    },
    {
        "line": 16,
        "fullcodeline": "pj_assert(result->slen >= PJSIP_MD5STRLEN);"
    },
    {
        "line": 18,
        "fullcodeline": "AUTH_TRACE_((THIS_FILE, \"Begin creating digest\"));"
    },
    {
        "line": 41,
        "fullcodeline": "AUTH_TRACE_((THIS_FILE, \"  ha1=%.32s\", ha1));"
    },
    {
        "line": 46,
        "fullcodeline": "pj_md5_init(&pms);"
    },
    {
        "line": 47,
        "fullcodeline": "MD5_APPEND( &pms, method->ptr, method->slen);"
    },
    {
        "line": 48,
        "fullcodeline": "MD5_APPEND( &pms, \":\", 1);"
    },
    {
        "line": 49,
        "fullcodeline": "MD5_APPEND( &pms, uri->ptr, uri->slen);"
    },
    {
        "line": 50,
        "fullcodeline": "pj_md5_final(&pms, digest);"
    },
    {
        "line": 51,
        "fullcodeline": "digestNtoStr(digest, 16, ha2);"
    },
    {
        "line": 53,
        "fullcodeline": "AUTH_TRACE_((THIS_FILE, \"  ha2=%.32s\", ha2));"
    },
    {
        "line": 62,
        "fullcodeline": "pj_md5_init(&pms);"
    },
    {
        "line": 63,
        "fullcodeline": "MD5_APPEND( &pms, ha1, PJSIP_MD5STRLEN);"
    },
    {
        "line": 64,
        "fullcodeline": "MD5_APPEND( &pms, \":\", 1);"
    },
    {
        "line": 65,
        "fullcodeline": "MD5_APPEND( &pms, nonce->ptr, nonce->slen);"
    },
    {
        "line": 74,
        "fullcodeline": "MD5_APPEND( &pms, \":\", 1);"
    },
    {
        "line": 75,
        "fullcodeline": "MD5_APPEND( &pms, ha2, PJSIP_MD5STRLEN);"
    },
    {
        "line": 78,
        "fullcodeline": "pj_md5_final(&pms, digest);"
    },
    {
        "line": 81,
        "fullcodeline": "result->slen = PJSIP_MD5STRLEN;"
    },
    {
        "line": 82,
        "fullcodeline": "digestNtoStr(digest, 16, result->ptr);"
    },
    {
        "line": 84,
        "fullcodeline": "AUTH_TRACE_((THIS_FILE, \"  digest=%.32s\", result->ptr));"
    },
    {
        "line": 85,
        "fullcodeline": "AUTH_TRACE_((THIS_FILE, \"Digest created\"));"
    },
    {
        "line": 20,
        "fullcodeline": "if ((cred_info->data_type & PASSWD_MASK) == PJSIP_CRED_DATA_PLAIN_PASSWD) {"
    },
    {
        "line": 66,
        "fullcodeline": "if (qop && qop->slen != 0) {"
    },
    {
        "line": 24,
        "fullcodeline": "pj_md5_init(&pms);"
    },
    {
        "line": 25,
        "fullcodeline": "MD5_APPEND( &pms, cred_info->username.ptr, cred_info->username.slen);"
    },
    {
        "line": 26,
        "fullcodeline": "MD5_APPEND( &pms, \":\", 1);"
    },
    {
        "line": 27,
        "fullcodeline": "MD5_APPEND( &pms, realm->ptr, realm->slen);"
    },
    {
        "line": 28,
        "fullcodeline": "MD5_APPEND( &pms, \":\", 1);"
    },
    {
        "line": 29,
        "fullcodeline": "MD5_APPEND( &pms, cred_info->data.ptr, cred_info->data.slen);"
    },
    {
        "line": 30,
        "fullcodeline": "pj_md5_final(&pms, digest);"
    },
    {
        "line": 32,
        "fullcodeline": "digestNtoStr(digest, 16, ha1);"
    },
    {
        "line": 67,
        "fullcodeline": "MD5_APPEND( &pms, \":\", 1);"
    },
    {
        "line": 68,
        "fullcodeline": "MD5_APPEND( &pms, nc->ptr, nc->slen);"
    },
    {
        "line": 69,
        "fullcodeline": "MD5_APPEND( &pms, \":\", 1);"
    },
    {
        "line": 70,
        "fullcodeline": "MD5_APPEND( &pms, cnonce->ptr, cnonce->slen);"
    },
    {
        "line": 71,
        "fullcodeline": "MD5_APPEND( &pms, \":\", 1);"
    },
    {
        "line": 72,
        "fullcodeline": "MD5_APPEND( &pms, qop->ptr, qop->slen);"
    },
    {
        "line": 34,
        "fullcodeline": "} else if ((cred_info->data_type & PASSWD_MASK) == PJSIP_CRED_DATA_DIGEST) {"
    },
    {
        "line": 35,
        "fullcodeline": "pj_assert(cred_info->data.slen == 32);"
    },
    {
        "line": 36,
        "fullcodeline": "pj_memcpy( ha1, cred_info->data.ptr, cred_info->data.slen );"
    },
    {
        "line": 38,
        "fullcodeline": "pj_assert(!\"Invalid data_type\");"
    }
]