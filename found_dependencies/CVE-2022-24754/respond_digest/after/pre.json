[
    {
        "line": 10,
        "fullcodeline": "const pj_str_t pjsip_AKAv1_MD5_STR = { \"AKAv1-MD5\", 9 };"
    },
    {
        "line": 11,
        "fullcodeline": "pj_bool_t algo_sha256 = PJ_FALSE;"
    },
    {
        "line": 12,
        "fullcodeline": "pj_status_t status = PJ_SUCCESS;"
    },
    {
        "line": 35,
        "fullcodeline": "pj_strdup(pool, &cred->username, &cred_info->username);"
    },
    {
        "line": 36,
        "fullcodeline": "pj_strdup(pool, &cred->realm, &chal->realm);"
    },
    {
        "line": 37,
        "fullcodeline": "pj_strdup(pool, &cred->nonce, &chal->nonce);"
    },
    {
        "line": 38,
        "fullcodeline": "pj_strdup(pool, &cred->uri, uri);"
    },
    {
        "line": 39,
        "fullcodeline": "pj_strdup(pool, &cred->algorithm, &chal->algorithm);"
    },
    {
        "line": 40,
        "fullcodeline": "pj_strdup(pool, &cred->opaque, &chal->opaque);"
    },
    {
        "line": 43,
        "fullcodeline": "cred->response.slen = algo_sha256? PJSIP_SHA256STRLEN : PJSIP_MD5STRLEN;"
    },
    {
        "line": 44,
        "fullcodeline": "cred->response.ptr = (char*) pj_pool_alloc(pool, cred->response.slen);"
    },
    {
        "line": 20,
        "fullcodeline": "if (chal->algorithm.slen==0 ||"
    },
    {
        "line": 46,
        "fullcodeline": "if (chal->qop.slen == 0) {"
    },
    {
        "line": 21,
        "fullcodeline": "(algo_sha256 ||"
    },
    {
        "line": 23,
        "fullcodeline": "pj_stricmp(&chal->algorithm, &pjsip_AKAv1_MD5_STR)==0))"
    },
    {
        "line": 25,
        "fullcodeline": "PJ_LOG(4,(THIS_FILE, \"Digest algorithm is \\\"%.*s\\\"\","
    },
    {
        "line": 29,
        "fullcodeline": "PJ_LOG(4,(THIS_FILE, \"Unsupported digest algorithm \\\"%.*s\\\"\","
    },
    {
        "line": 22,
        "fullcodeline": "pj_stricmp(&chal->algorithm, &pjsip_MD5_STR)==0 ||"
    },
    {
        "line": 49,
        "fullcodeline": "if ((cred_info->data_type & EXT_MASK) == PJSIP_CRED_DATA_EXT_AKA) {"
    },
    {
        "line": 68,
        "fullcodeline": "} else if (has_auth_qop(pool, &chal->qop)) {"
    },
    {
        "line": 51,
        "fullcodeline": "return (*cred_info->ext.aka.cb)(pool, chal, cred_info,"
    },
    {
        "line": 72,
        "fullcodeline": "cred->qop = pjsip_AUTH_STR;"
    },
    {
        "line": 73,
        "fullcodeline": "cred->nc.ptr = (char*) pj_pool_alloc(pool, 16);"
    },
    {
        "line": 74,
        "fullcodeline": "cred->nc.slen = pj_ansi_snprintf(cred->nc.ptr, 16, \"%08u\", nc);"
    },
    {
        "line": 76,
        "fullcodeline": "if (cnonce && cnonce->slen) {"
    },
    {
        "line": 57,
        "fullcodeline": "status = pjsip_auth_create_digestSHA256("
    },
    {
        "line": 77,
        "fullcodeline": "pj_strdup(pool, &cred->cnonce, cnonce);"
    },
    {
        "line": 83,
        "fullcodeline": "if ((cred_info->data_type & EXT_MASK) == PJSIP_CRED_DATA_EXT_AKA) {"
    },
    {
        "line": 108,
        "fullcodeline": "PJ_LOG(4,(THIS_FILE, \"Unsupported qop offer %.*s\","
    },
    {
        "line": 62,
        "fullcodeline": "status = pjsip_auth_create_digest( &cred->response,"
    },
    {
        "line": 79,
        "fullcodeline": "pj_str_t dummy_cnonce = { \"b39971\", 6};"
    },
    {
        "line": 80,
        "fullcodeline": "pj_strdup(pool, &cred->cnonce, &dummy_cnonce);"
    },
    {
        "line": 85,
        "fullcodeline": "return (*cred_info->ext.aka.cb)(pool, chal, cred_info,"
    },
    {
        "line": 91,
        "fullcodeline": "status = pjsip_auth_create_digestSHA256("
    },
    {
        "line": 98,
        "fullcodeline": "status = pjsip_auth_create_digest( &cred->response,"
    }
]