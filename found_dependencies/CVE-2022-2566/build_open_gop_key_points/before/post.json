[
    {
        "line": 4,
        "fullcodeline": "int sample_id = 0;"
    },
    {
        "line": 6,
        "fullcodeline": "MOVStreamContext *sc = st->priv_data;"
    },
    {
        "line": 12,
        "fullcodeline": "sc->sample_offsets_count = 0;"
    },
    {
        "line": 15,
        "fullcodeline": "av_freep(&sc->sample_offsets);"
    },
    {
        "line": 16,
        "fullcodeline": "sc->sample_offsets = av_calloc(sc->sample_offsets_count, sizeof(*sc->sample_offsets));"
    },
    {
        "line": 19,
        "fullcodeline": "k = 0;"
    },
    {
        "line": 26,
        "fullcodeline": "cra_index = get_sgpd_sync_index(sc, HEVC_NAL_CRA_NUT); /* Clean Random Access */"
    },
    {
        "line": 31,
        "fullcodeline": "sc->open_key_samples_count = 0;"
    },
    {
        "line": 35,
        "fullcodeline": "av_freep(&sc->open_key_samples);"
    },
    {
        "line": 36,
        "fullcodeline": "sc->open_key_samples = av_calloc(sc->open_key_samples_count, sizeof(*sc->open_key_samples));"
    },
    {
        "line": 39,
        "fullcodeline": "k = 0;"
    },
    {
        "line": 49,
        "fullcodeline": "sc->min_sample_duration = UINT_MAX;"
    },
    {
        "line": 8,
        "fullcodeline": "if (st->codecpar->codec_id != AV_CODEC_ID_HEVC || !sc->sync_group_count)"
    },
    {
        "line": 13,
        "fullcodeline": "for (uint32_t i = 0; i < sc->ctts_count; i++)"
    },
    {
        "line": 14,
        "fullcodeline": "sc->sample_offsets_count += sc->ctts_data[i].count;"
    },
    {
        "line": 17,
        "fullcodeline": "if (!sc->sample_offsets)"
    },
    {
        "line": 20,
        "fullcodeline": "for (uint32_t i = 0; i < sc->ctts_count; i++)"
    },
    {
        "line": 27,
        "fullcodeline": "if (!cra_index)"
    },
    {
        "line": 32,
        "fullcodeline": "for (uint32_t i = 0; i < sc->sync_group_count; i++)"
    },
    {
        "line": 37,
        "fullcodeline": "if (!sc->open_key_samples)"
    },
    {
        "line": 40,
        "fullcodeline": "for (uint32_t i = 0; i < sc->sync_group_count; i++) {"
    },
    {
        "line": 50,
        "fullcodeline": "for (uint32_t i = 0; i < sc->stts_count; i++)"
    },
    {
        "line": 51,
        "fullcodeline": "sc->min_sample_duration = FFMIN(sc->min_sample_duration, sc->stts_data[i].duration);"
    },
    {
        "line": 21,
        "fullcodeline": "for (int j = 0; j < sc->ctts_data[i].count; j++)"
    },
    {
        "line": 33,
        "fullcodeline": "if (sc->sync_group[i].index == cra_index)"
    },
    {
        "line": 45,
        "fullcodeline": "sample_id += sg->count;"
    },
    {
        "line": 18,
        "fullcodeline": "return AVERROR(ENOMEM);"
    },
    {
        "line": 34,
        "fullcodeline": "sc->open_key_samples_count += sc->sync_group[i].count;"
    },
    {
        "line": 38,
        "fullcodeline": "return AVERROR(ENOMEM);"
    },
    {
        "line": 42,
        "fullcodeline": "if (sg->index == cra_index)"
    },
    {
        "line": 22,
        "fullcodeline": "sc->sample_offsets[k++] = sc->ctts_data[i].duration;"
    },
    {
        "line": 43,
        "fullcodeline": "for (uint32_t j = 0; j < sg->count; j++)"
    },
    {
        "line": 44,
        "fullcodeline": "sc->open_key_samples[k++] = sample_id;"
    }
]