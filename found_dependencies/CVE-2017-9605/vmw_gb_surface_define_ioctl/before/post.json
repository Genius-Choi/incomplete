[
    {
        "line": 4,
        "fullcodeline": "struct vmw_private *dev_priv = vmw_priv(dev);"
    },
    {
        "line": 9,
        "fullcodeline": "union drm_vmw_gb_surface_create_arg *arg ="
    },
    {
        "line": 11,
        "fullcodeline": "struct drm_vmw_gb_surface_create_req *req = &arg->req;"
    },
    {
        "line": 12,
        "fullcodeline": "struct drm_vmw_gb_surface_create_rep *rep = &arg->rep;"
    },
    {
        "line": 28,
        "fullcodeline": "size = vmw_user_surface_size + 128;"
    },
    {
        "line": 31,
        "fullcodeline": "ret = vmw_surface_gb_priv_define(dev,"
    },
    {
        "line": 48,
        "fullcodeline": "ret = ttm_read_lock(&dev_priv->reservation_sem, true);"
    },
    {
        "line": 80,
        "fullcodeline": "tmp = vmw_resource_reference(res);"
    },
    {
        "line": 81,
        "fullcodeline": "ret = ttm_prime_object_init(tfile, res->backup_size, &user_srf->prime,"
    },
    {
        "line": 94,
        "fullcodeline": "rep->backup_size = res->backup_size;"
    },
    {
        "line": 106,
        "fullcodeline": "vmw_resource_unreference(&res);"
    },
    {
        "line": 109,
        "fullcodeline": "ttm_read_unlock(&dev_priv->reservation_sem);"
    },
    {
        "line": 10,
        "fullcodeline": "(union drm_vmw_gb_surface_create_arg *)data;"
    },
    {
        "line": 18,
        "fullcodeline": "if (req->multisample_count != 0)"
    },
    {
        "line": 21,
        "fullcodeline": "if (req->mip_levels > DRM_VMW_MAX_MIP_LEVELS)"
    },
    {
        "line": 24,
        "fullcodeline": "if (unlikely(vmw_user_surface_size == 0))"
    },
    {
        "line": 41,
        "fullcodeline": "if (unlikely(ret != 0))"
    },
    {
        "line": 45,
        "fullcodeline": "if (drm_is_primary_client(file_priv))"
    },
    {
        "line": 49,
        "fullcodeline": "if (unlikely(ret != 0))"
    },
    {
        "line": 55,
        "fullcodeline": "if (req->buffer_handle != SVGA3D_INVALID_ID) {"
    },
    {
        "line": 75,
        "fullcodeline": "if (unlikely(ret != 0)) {"
    },
    {
        "line": 87,
        "fullcodeline": "if (unlikely(ret != 0)) {"
    },
    {
        "line": 13,
        "fullcodeline": "struct ttm_object_file *tfile = vmw_fpriv(file_priv)->tfile;"
    },
    {
        "line": 25,
        "fullcodeline": "vmw_user_surface_size = ttm_round_pot(sizeof(*user_srf)) +"
    },
    {
        "line": 35,
        "fullcodeline": "req->drm_surface_flags & drm_vmw_surface_flag_scanout,"
    },
    {
        "line": 46,
        "fullcodeline": "user_srf->master = drm_master_get(file_priv->master);"
    },
    {
        "line": 56,
        "fullcodeline": "ret = vmw_user_dmabuf_lookup(tfile, req->buffer_handle,"
    },
    {
        "line": 76,
        "fullcodeline": "vmw_resource_unreference(&res);"
    },
    {
        "line": 82,
        "fullcodeline": "req->drm_surface_flags &"
    },
    {
        "line": 88,
        "fullcodeline": "vmw_resource_unreference(&tmp);"
    },
    {
        "line": 89,
        "fullcodeline": "vmw_resource_unreference(&res);"
    },
    {
        "line": 96,
        "fullcodeline": "rep->buffer_map_handle ="
    },
    {
        "line": 98,
        "fullcodeline": "rep->buffer_size = res->backup->base.num_pages * PAGE_SIZE;"
    },
    {
        "line": 99,
        "fullcodeline": "rep->buffer_handle = backup_handle;"
    },
    {
        "line": 19,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 22,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 59,
        "fullcodeline": "if (ret == 0 && res->backup->base.num_pages * PAGE_SIZE <"
    },
    {
        "line": 101,
        "fullcodeline": "rep->buffer_map_handle = 0;"
    },
    {
        "line": 102,
        "fullcodeline": "rep->buffer_size = 0;"
    },
    {
        "line": 103,
        "fullcodeline": "rep->buffer_handle = SVGA3D_INVALID_ID;"
    },
    {
        "line": 61,
        "fullcodeline": "DRM_ERROR(\"Surface backup buffer is too small.\\n\");"
    },
    {
        "line": 62,
        "fullcodeline": "vmw_dmabuf_unreference(&res->backup);"
    },
    {
        "line": 63,
        "fullcodeline": "ret = -EINVAL;"
    },
    {
        "line": 66,
        "fullcodeline": "} else if (req->drm_surface_flags & drm_vmw_surface_flag_create_buffer)"
    },
    {
        "line": 67,
        "fullcodeline": "ret = vmw_user_dmabuf_alloc(dev_priv, tfile,"
    },
    {
        "line": 69,
        "fullcodeline": "req->drm_surface_flags &"
    }
]