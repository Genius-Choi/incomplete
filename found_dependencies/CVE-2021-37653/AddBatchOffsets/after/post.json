[
    {
        "line": 3,
        "fullcodeline": "int64_t batch_size = 1;  // The size of all batch dimensions."
    },
    {
        "line": 7,
        "fullcodeline": "OP_REQUIRES("
    },
    {
        "line": 13,
        "fullcodeline": "auto indices_flat = indices->flat<Index>();"
    },
    {
        "line": 14,
        "fullcodeline": "int64_t const index_inner_size = indices->NumElements() / batch_size;"
    },
    {
        "line": 15,
        "fullcodeline": "int64_t const batch_offset = params.dim_size(batch_dims_);"
    },
    {
        "line": 4,
        "fullcodeline": "for (int idx = 0; idx < batch_dims_; ++idx) {"
    },
    {
        "line": 8,
        "fullcodeline": "ctx, batch_size != 0,"
    },
    {
        "line": 9,
        "fullcodeline": "errors::InvalidArgument("
    },
    {
        "line": 16,
        "fullcodeline": "for (int64_t batch_idx = 0, dest_idx = 0; batch_idx < batch_size;"
    },
    {
        "line": 17,
        "fullcodeline": "++batch_idx) {"
    },
    {
        "line": 5,
        "fullcodeline": "batch_size *= params.dim_size(idx);"
    },
    {
        "line": 18,
        "fullcodeline": "for (int64_t idx = 0; idx < index_inner_size; ++idx) {"
    },
    {
        "line": 19,
        "fullcodeline": "indices_flat(dest_idx++) += batch_offset * batch_idx;"
    }
]