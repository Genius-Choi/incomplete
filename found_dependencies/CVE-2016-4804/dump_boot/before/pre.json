[
    {
        "line": 5,
        "fullcodeline": "printf(\"Boot sector contents:\\n\");"
    },
    {
        "line": 18,
        "fullcodeline": "printf(\"Media byte 0x%02x (%s)\\n\", b->media, get_media_descr(b->media));"
    },
    {
        "line": 19,
        "fullcodeline": "printf(\"%10d bytes per logical sector\\n\", GET_UNALIGNED_W(b->sector_size));"
    },
    {
        "line": 20,
        "fullcodeline": "printf(\"%10d bytes per cluster\\n\", fs->cluster_size);"
    },
    {
        "line": 21,
        "fullcodeline": "printf(\"%10d reserved sector%s\\n\", le16toh(b->reserved),"
    },
    {
        "line": 23,
        "fullcodeline": "printf(\"First FAT starts at byte %llu (sector %llu)\\n\","
    },
    {
        "line": 26,
        "fullcodeline": "printf(\"%10d FATs, %d bit entries\\n\", b->fats, fs->fat_bits);"
    },
    {
        "line": 27,
        "fullcodeline": "printf(\"%10d bytes per FAT (= %u sectors)\\n\", fs->fat_size,"
    },
    {
        "line": 38,
        "fullcodeline": "printf(\"Data area starts at byte %llu (sector %llu)\\n\","
    },
    {
        "line": 41,
        "fullcodeline": "printf(\"%10lu data clusters (%llu bytes)\\n\","
    },
    {
        "line": 44,
        "fullcodeline": "printf(\"%u sectors/track, %u heads\\n\", le16toh(b->secs_track),"
    },
    {
        "line": 46,
        "fullcodeline": "printf(\"%10u hidden sectors\\n\", atari_format ?"
    },
    {
        "line": 50,
        "fullcodeline": "sectors = GET_UNALIGNED_W(b->sectors);"
    },
    {
        "line": 51,
        "fullcodeline": "printf(\"%10u sectors total\\n\", sectors ? sectors : le32toh(b->total_sect));"
    },
    {
        "line": 6,
        "fullcodeline": "if (!atari_format) {"
    },
    {
        "line": 22,
        "fullcodeline": "le16toh(b->reserved) == 1 ? \"\" : \"s\");"
    },
    {
        "line": 25,
        "fullcodeline": "(unsigned long long)fs->fat_start / lss);"
    },
    {
        "line": 28,
        "fullcodeline": "fs->fat_size / lss);"
    },
    {
        "line": 29,
        "fullcodeline": "if (!fs->root_cluster) {"
    },
    {
        "line": 40,
        "fullcodeline": "(unsigned long long)fs->data_start / lss);"
    },
    {
        "line": 43,
        "fullcodeline": "(unsigned long long)fs->data_clusters * fs->cluster_size);"
    },
    {
        "line": 45,
        "fullcodeline": "le16toh(b->heads));"
    },
    {
        "line": 7,
        "fullcodeline": "char id[9];"
    },
    {
        "line": 8,
        "fullcodeline": "strncpy(id, (const char *)b->system_id, 8);"
    },
    {
        "line": 9,
        "fullcodeline": "id[8] = 0;"
    },
    {
        "line": 10,
        "fullcodeline": "printf(\"System ID \\\"%s\\\"\\n\", id);"
    },
    {
        "line": 30,
        "fullcodeline": "printf(\"Root directory starts at byte %llu (sector %llu)\\n\","
    },
    {
        "line": 33,
        "fullcodeline": "printf(\"%10d root directory entries\\n\", fs->root_entries);"
    },
    {
        "line": 48,
        "fullcodeline": "(((unsigned char *)&b->hidden)[0] |"
    },
    {
        "line": 49,
        "fullcodeline": "((unsigned char *)&b->hidden)[1] << 8) : le32toh(b->hidden));"
    },
    {
        "line": 14,
        "fullcodeline": "printf(\"Serial number 0x%x\\n\","
    },
    {
        "line": 32,
        "fullcodeline": "(unsigned long long)fs->root_start / lss);"
    },
    {
        "line": 35,
        "fullcodeline": "printf(\"Root directory start at cluster %lu (arbitrary size)\\n\","
    },
    {
        "line": 15,
        "fullcodeline": "b->system_id[5] | (b->system_id[6] << 8) | (b->"
    },
    {
        "line": 36,
        "fullcodeline": "(unsigned long)fs->root_cluster);"
    }
]