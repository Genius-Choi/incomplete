[
    {
        "line": 10,
        "fullcodeline": "fs_read(0, sizeof(b), &b);"
    },
    {
        "line": 11,
        "fullcodeline": "logical_sector_size = GET_UNALIGNED_W(b.sector_size);"
    },
    {
        "line": 22,
        "fullcodeline": "fs->cluster_size = b.cluster_size * logical_sector_size;"
    },
    {
        "line": 27,
        "fullcodeline": "fs->nfats = b.fats;"
    },
    {
        "line": 28,
        "fullcodeline": "sectors = GET_UNALIGNED_W(b.sectors);"
    },
    {
        "line": 29,
        "fullcodeline": "total_sectors = sectors ? sectors : le32toh(b.total_sect);"
    },
    {
        "line": 33,
        "fullcodeline": "fs_test((off_t)((total_sectors & ~1) - 1) * logical_sector_size,"
    },
    {
        "line": 35,
        "fullcodeline": "fat_length = le16toh(b.fat_length) ?"
    },
    {
        "line": 37,
        "fullcodeline": "fs->fat_start = (off_t)le16toh(b.reserved) * logical_sector_size;"
    },
    {
        "line": 38,
        "fullcodeline": "fs->root_start = ((off_t)le16toh(b.reserved) + b.fats * fat_length) *"
    },
    {
        "line": 40,
        "fullcodeline": "fs->root_entries = GET_UNALIGNED_W(b.dir_entries);"
    },
    {
        "line": 41,
        "fullcodeline": "fs->data_start = fs->root_start + ROUND_TO_MULTIPLE(fs->root_entries <<"
    },
    {
        "line": 44,
        "fullcodeline": "data_size = (off_t)total_sectors * logical_sector_size - fs->data_start;"
    },
    {
        "line": 45,
        "fullcodeline": "fs->data_clusters = data_size / fs->cluster_size;"
    },
    {
        "line": 46,
        "fullcodeline": "fs->root_cluster = 0;\t/* indicates standard, pre-FAT32 root dir */"
    },
    {
        "line": 47,
        "fullcodeline": "fs->fsinfo_start = 0;\t/* no FSINFO structure */"
    },
    {
        "line": 48,
        "fullcodeline": "fs->free_clusters = -1;\t/* unknown */"
    },
    {
        "line": 99,
        "fullcodeline": "fs->eff_fat_bits = (fs->fat_bits == 32) ? 28 : fs->fat_bits;"
    },
    {
        "line": 100,
        "fullcodeline": "fs->fat_size = fat_length * logical_sector_size;"
    },
    {
        "line": 102,
        "fullcodeline": "fs->label = calloc(12, sizeof(uint8_t));"
    },
    {
        "line": 116,
        "fullcodeline": "total_fat_entries = (uint64_t)fs->fat_size * 8 / fs->fat_bits;"
    },
    {
        "line": 12,
        "fullcodeline": "if (!logical_sector_size)"
    },
    {
        "line": 18,
        "fullcodeline": "if (logical_sector_size & (SECTOR_SIZE - 1))"
    },
    {
        "line": 23,
        "fullcodeline": "if (!fs->cluster_size)"
    },
    {
        "line": 25,
        "fullcodeline": "if (b.fats != 2 && b.fats != 1)"
    },
    {
        "line": 49,
        "fullcodeline": "if (!b.fat_length && b.fat32_length) {"
    },
    {
        "line": 103,
        "fullcodeline": "if (fs->fat_bits == 12 || fs->fat_bits == 16) {"
    },
    {
        "line": 117,
        "fullcodeline": "if (fs->data_clusters > total_fat_entries - 2)"
    },
    {
        "line": 120,
        "fullcodeline": "if (!fs->root_entries && !fs->root_cluster)"
    },
    {
        "line": 122,
        "fullcodeline": "if (fs->root_entries & (MSDOS_DPS - 1))"
    },
    {
        "line": 125,
        "fullcodeline": "if (logical_sector_size & (SECTOR_SIZE - 1))"
    },
    {
        "line": 13,
        "fullcodeline": "die(\"Logical sector size is zero.\");"
    },
    {
        "line": 19,
        "fullcodeline": "die(\"Logical sector size (%d bytes) is not a multiple of the physical \""
    },
    {
        "line": 24,
        "fullcodeline": "die(\"Cluster size is zero.\");"
    },
    {
        "line": 26,
        "fullcodeline": "die(\"Currently, only 1 or 2 FATs are supported, not %d.\\n\", b.fats);"
    },
    {
        "line": 31,
        "fullcodeline": "printf(\"Checking we can access the last sector of the filesystem\\n\");"
    },
    {
        "line": 36,
        "fullcodeline": "le16toh(b.fat_length) : le32toh(b.fat32_length);"
    },
    {
        "line": 50,
        "fullcodeline": "fs->fat_bits = 32;"
    },
    {
        "line": 51,
        "fullcodeline": "fs->root_cluster = le32toh(b.root_cluster);"
    },
    {
        "line": 74,
        "fullcodeline": "check_fat_state_bit(fs, &b);"
    },
    {
        "line": 75,
        "fullcodeline": "fs->backupboot_start = le16toh(b.backup_boot) * logical_sector_size;"
    },
    {
        "line": 76,
        "fullcodeline": "check_backup_boot(fs, &b, logical_sector_size);"
    },
    {
        "line": 78,
        "fullcodeline": "read_fsinfo(fs, &b, logical_sector_size);"
    },
    {
        "line": 104,
        "fullcodeline": "struct boot_sector_16 *b16 = (struct boot_sector_16 *)&b;"
    },
    {
        "line": 118,
        "fullcodeline": "die(\"Filesystem has %u clusters but only space for %u FAT entries.\","
    },
    {
        "line": 121,
        "fullcodeline": "die(\"Root directory has zero size.\");"
    },
    {
        "line": 123,
        "fullcodeline": "die(\"Root directory (%d entries) doesn't span an integral number of \""
    },
    {
        "line": 126,
        "fullcodeline": "die(\"Logical sector size (%d bytes) is not a multiple of the physical \""
    },
    {
        "line": 134,
        "fullcodeline": "dump_boot(fs, &b, logical_sector_size);"
    },
    {
        "line": 52,
        "fullcodeline": "if (!fs->root_cluster && fs->root_entries)"
    },
    {
        "line": 66,
        "fullcodeline": "if (fs->data_clusters < FAT16_THRESHOLD)"
    },
    {
        "line": 105,
        "fullcodeline": "if (b16->extended_sig == 0x29)"
    },
    {
        "line": 119,
        "fullcodeline": "fs->data_clusters, total_fat_entries - 2);"
    },
    {
        "line": 58,
        "fullcodeline": "printf(\"Warning: FAT32 root dir not in cluster chain! \""
    },
    {
        "line": 67,
        "fullcodeline": "printf(\"Warning: Filesystem is FAT32 according to fat_length \""
    },
    {
        "line": 79,
        "fullcodeline": "} else if (!atari_format) {"
    },
    {
        "line": 106,
        "fullcodeline": "memmove(fs->label, b16->label, 11);"
    },
    {
        "line": 109,
        "fullcodeline": "} else if (fs->fat_bits == 32) {"
    },
    {
        "line": 82,
        "fullcodeline": "fs->fat_bits = (fs->data_clusters >= FAT12_THRESHOLD) ? 16 : 12;"
    },
    {
        "line": 85,
        "fullcodeline": "check_fat_state_bit(fs, &b);"
    },
    {
        "line": 108,
        "fullcodeline": "fs->label = NULL;"
    },
    {
        "line": 60,
        "fullcodeline": "else if (!fs->root_cluster && !fs->root_entries)"
    },
    {
        "line": 83,
        "fullcodeline": "if (fs->data_clusters >= FAT16_THRESHOLD)"
    },
    {
        "line": 89,
        "fullcodeline": "fs->fat_bits = 16;\t/* assume 16 bit FAT for now */"
    },
    {
        "line": 110,
        "fullcodeline": "if (b.extended_sig == 0x29)"
    },
    {
        "line": 61,
        "fullcodeline": "die(\"No root directory!\");"
    },
    {
        "line": 84,
        "fullcodeline": "die(\"Too many clusters (%lu) for FAT16 filesystem.\", fs->data_clusters);"
    },
    {
        "line": 92,
        "fullcodeline": "if (fs->data_clusters + 2 > fat_length * logical_sector_size * 8 / 16 ||"
    },
    {
        "line": 111,
        "fullcodeline": "memmove(fs->label, &b.label, 11);"
    },
    {
        "line": 94,
        "fullcodeline": "(total_sectors == 720 || total_sectors == 1440 ||"
    },
    {
        "line": 96,
        "fullcodeline": "fs->fat_bits = 12;"
    },
    {
        "line": 113,
        "fullcodeline": "fs->label = NULL;"
    },
    {
        "line": 62,
        "fullcodeline": "else if (fs->root_cluster && fs->root_entries)"
    },
    {
        "line": 95,
        "fullcodeline": "total_sectors == 2880))"
    },
    {
        "line": 63,
        "fullcodeline": "printf(\"Warning: FAT32 root dir is in a cluster chain, but \""
    }
]