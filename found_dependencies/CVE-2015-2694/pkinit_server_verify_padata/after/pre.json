[
    {
        "line": 12,
        "fullcodeline": "krb5_error_code retval = 0;"
    },
    {
        "line": 13,
        "fullcodeline": "krb5_data authp_data = {0, 0, NULL}, krb5_authz = {0, 0, NULL};"
    },
    {
        "line": 14,
        "fullcodeline": "krb5_pa_pk_as_req *reqp = NULL;"
    },
    {
        "line": 15,
        "fullcodeline": "krb5_pa_pk_as_req_draft9 *reqp9 = NULL;"
    },
    {
        "line": 16,
        "fullcodeline": "krb5_auth_pack *auth_pack = NULL;"
    },
    {
        "line": 17,
        "fullcodeline": "krb5_auth_pack_draft9 *auth_pack9 = NULL;"
    },
    {
        "line": 18,
        "fullcodeline": "pkinit_kdc_context plgctx = NULL;"
    },
    {
        "line": 19,
        "fullcodeline": "pkinit_kdc_req_context reqctx = NULL;"
    },
    {
        "line": 20,
        "fullcodeline": "krb5_checksum cksum = {0, 0, 0, NULL};"
    },
    {
        "line": 21,
        "fullcodeline": "krb5_data *der_req = NULL;"
    },
    {
        "line": 22,
        "fullcodeline": "int valid_eku = 0, valid_san = 0;"
    },
    {
        "line": 24,
        "fullcodeline": "int is_signed = 1;"
    },
    {
        "line": 25,
        "fullcodeline": "krb5_pa_data **e_data = NULL;"
    },
    {
        "line": 26,
        "fullcodeline": "krb5_kdcpreauth_modreq modreq = NULL;"
    },
    {
        "line": 28,
        "fullcodeline": "pkiDebug(\"pkinit_verify_padata: entered!\\n\");"
    },
    {
        "line": 40,
        "fullcodeline": "plgctx = pkinit_find_realm_context(context, moddata, request->server);"
    },
    {
        "line": 50,
        "fullcodeline": "retval = pkinit_init_kdc_req_context(context, &reqctx);"
    },
    {
        "line": 53,
        "fullcodeline": "reqctx->pa_type = data->pa_type;"
    },
    {
        "line": 55,
        "fullcodeline": "PADATA_TO_KRB5DATA(data, &k5data);"
    },
    {
        "line": 149,
        "fullcodeline": "OCTETDATA_TO_KRB5DATA(&authp_data, &k5data);"
    },
    {
        "line": 255,
        "fullcodeline": "enc_tkt_reply->flags |= TKT_FLG_PRE_AUTH;"
    },
    {
        "line": 256,
        "fullcodeline": "modreq = (krb5_kdcpreauth_modreq)reqctx;"
    },
    {
        "line": 257,
        "fullcodeline": "reqctx = NULL;"
    },
    {
        "line": 29,
        "fullcodeline": "if (data == NULL || data->length <= 0 || data->contents == NULL) {"
    },
    {
        "line": 35,
        "fullcodeline": "if (moddata == NULL) {"
    },
    {
        "line": 41,
        "fullcodeline": "if (plgctx == NULL) {"
    },
    {
        "line": 260,
        "fullcodeline": "if (retval && data->pa_type == KRB5_PADATA_PK_AS_REQ) {"
    },
    {
        "line": 278,
        "fullcodeline": "if (reqctx != NULL)"
    },
    {
        "line": 30,
        "fullcodeline": "(*respond)(arg, EINVAL, NULL, NULL, NULL);"
    },
    {
        "line": 60,
        "fullcodeline": "retval = k5int_decode_krb5_pa_pk_as_req(&k5data, &reqp);"
    },
    {
        "line": 70,
        "fullcodeline": "retval = cms_signeddata_verify(context, plgctx->cryptoctx,"
    },
    {
        "line": 83,
        "fullcodeline": "retval = k5int_decode_krb5_pa_pk_as_req_draft9(&k5data, &reqp9);"
    },
    {
        "line": 94,
        "fullcodeline": "retval = cms_signeddata_verify(context, plgctx->cryptoctx,"
    },
    {
        "line": 105,
        "fullcodeline": "pkiDebug(\"unrecognized pa_type = %d\\n\", data->pa_type);"
    },
    {
        "line": 106,
        "fullcodeline": "retval = EINVAL;"
    },
    {
        "line": 115,
        "fullcodeline": "retval = verify_client_san(context, plgctx, reqctx, request->client,"
    },
    {
        "line": 125,
        "fullcodeline": "retval = verify_client_eku(context, plgctx, reqctx, &valid_eku);"
    },
    {
        "line": 152,
        "fullcodeline": "retval = k5int_decode_krb5_auth_pack(&k5data, &auth_pack);"
    },
    {
        "line": 158,
        "fullcodeline": "retval = krb5_check_clockskew(context,"
    },
    {
        "line": 182,
        "fullcodeline": "der_req = cb->request_body(context, rock);"
    },
    {
        "line": 183,
        "fullcodeline": "retval = krb5_c_make_checksum(context, CKSUMTYPE_NIST_SHA, NULL,"
    },
    {
        "line": 227,
        "fullcodeline": "reqctx->rcv_auth_pack = auth_pack;"
    },
    {
        "line": 228,
        "fullcodeline": "auth_pack = NULL;"
    },
    {
        "line": 232,
        "fullcodeline": "retval = k5int_decode_krb5_auth_pack_draft9(&k5data, &auth_pack9);"
    },
    {
        "line": 249,
        "fullcodeline": "reqctx->rcv_auth_pack9 = auth_pack9;"
    },
    {
        "line": 250,
        "fullcodeline": "auth_pack9 = NULL;"
    },
    {
        "line": 279,
        "fullcodeline": "pkinit_fini_kdc_req_context(context, reqctx);"
    },
    {
        "line": 164,
        "fullcodeline": "if (auth_pack->clientPublicValue != NULL) {"
    },
    {
        "line": 213,
        "fullcodeline": "if (reqp->kdcPkId.data != NULL) {"
    },
    {
        "line": 237,
        "fullcodeline": "if (auth_pack9->clientPublicValue != NULL) {"
    },
    {
        "line": 262,
        "fullcodeline": "if (pkinit_create_edata(context, plgctx->cryptoctx, reqctx->cryptoctx,"
    },
    {
        "line": 122,
        "fullcodeline": "retval = KRB5KDC_ERR_CLIENT_NAME_MISMATCH;"
    },
    {
        "line": 132,
        "fullcodeline": "retval = KRB5KDC_ERR_INCONSISTENT_KEY_PURPOSE;"
    },
    {
        "line": 165,
        "fullcodeline": "retval = server_check_dh(context, plgctx->cryptoctx,"
    },
    {
        "line": 189,
        "fullcodeline": "if (cksum.length != auth_pack->pkAuthenticator.paChecksum.length ||"
    },
    {
        "line": 190,
        "fullcodeline": "k5_bcmp(cksum.contents,"
    },
    {
        "line": 208,
        "fullcodeline": "retval = KRB5KDC_ERR_PA_CHECKSUM_MUST_BE_INCLUDED;"
    },
    {
        "line": 214,
        "fullcodeline": "int valid_kdcPkId = 0;"
    },
    {
        "line": 215,
        "fullcodeline": "retval = pkinit_check_kdc_pkid(context, plgctx->cryptoctx,"
    },
    {
        "line": 238,
        "fullcodeline": "retval = server_check_dh(context, plgctx->cryptoctx,"
    },
    {
        "line": 136,
        "fullcodeline": "if (!krb5_principal_compare(context, request->client,"
    },
    {
        "line": 138,
        "fullcodeline": "retval = KRB5KDC_ERR_PREAUTH_FAILED;"
    },
    {
        "line": 139,
        "fullcodeline": "krb5_set_error_message(context, retval,"
    },
    {
        "line": 140,
        "fullcodeline": "_(\"Pkinit request not signed, but client \""
    },
    {
        "line": 176,
        "fullcodeline": "retval = KRB5KDC_ERR_PREAUTH_FAILED;"
    },
    {
        "line": 177,
        "fullcodeline": "krb5_set_error_message(context, retval,"
    },
    {
        "line": 178,
        "fullcodeline": "_(\"Anonymous pkinit without DH public \""
    }
]