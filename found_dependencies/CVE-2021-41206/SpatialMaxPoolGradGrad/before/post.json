[
    {
        "line": 11,
        "fullcodeline": "ConstEigenMatrixMap in_mat("
    },
    {
        "line": 14,
        "fullcodeline": "ConstEigenMatrixMap out_mat("
    },
    {
        "line": 17,
        "fullcodeline": "ConstEigenMatrixMap top_diff_mat("
    },
    {
        "line": 20,
        "fullcodeline": "EigenMatrixMap bottom_diff_mat("
    },
    {
        "line": 44,
        "fullcodeline": "auto shard = [&params, &in_mat, &out_mat, &top_diff_mat, &bottom_diff_mat]("
    },
    {
        "line": 100,
        "fullcodeline": "const int64_t shard_cost = params.out_width * params.out_height *"
    },
    {
        "line": 103,
        "fullcodeline": "Shard(worker_threads.num_threads, worker_threads.workers,"
    },
    {
        "line": 12,
        "fullcodeline": "tensor_in.flat<T>().data(), params.depth,"
    },
    {
        "line": 13,
        "fullcodeline": "params.tensor_in_cols * params.tensor_in_rows * params.tensor_in_batch);"
    },
    {
        "line": 15,
        "fullcodeline": "tensor_out.flat<T>().data(), params.depth,"
    },
    {
        "line": 16,
        "fullcodeline": "params.out_width * params.out_height * params.tensor_in_batch);"
    },
    {
        "line": 18,
        "fullcodeline": "top_diff.flat<T>().data(), params.depth,"
    },
    {
        "line": 19,
        "fullcodeline": "params.tensor_in_cols * params.tensor_in_rows * params.tensor_in_batch);"
    },
    {
        "line": 21,
        "fullcodeline": "bottom_diff->flat<T>().data(), params.depth,"
    },
    {
        "line": 22,
        "fullcodeline": "params.out_width * params.out_height * params.tensor_in_batch);"
    },
    {
        "line": 25,
        "fullcodeline": "*(context->device()->tensorflow_cpu_worker_threads());"
    }
]