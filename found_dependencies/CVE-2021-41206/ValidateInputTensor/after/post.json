[
    {
        "line": 4,
        "fullcodeline": "const int ndims = rhs.dims();"
    },
    {
        "line": 5,
        "fullcodeline": "if (tensor.dims() != ndims) {"
    },
    {
        "line": 10,
        "fullcodeline": "for (int i = 0; i < ndims - 2; i++) {"
    },
    {
        "line": 18,
        "fullcodeline": "if (tensor.dim_size(ndims - 2) != 1) {"
    },
    {
        "line": 23,
        "fullcodeline": "if (tensor.dim_size(ndims - 1) != rhs.dim_size(ndims - 2)) {"
    },
    {
        "line": 30,
        "fullcodeline": "return Status::OK();"
    },
    {
        "line": 6,
        "fullcodeline": "return errors::InvalidArgument(tensor_name,"
    },
    {
        "line": 11,
        "fullcodeline": "if (tensor.dim_size(i) != rhs.dim_size(i)) {"
    },
    {
        "line": 19,
        "fullcodeline": "return errors::InvalidArgument("
    },
    {
        "line": 24,
        "fullcodeline": "return errors::InvalidArgument(tensor_name,"
    },
    {
        "line": 8,
        "fullcodeline": "tensor.dims(), \" and \", ndims);"
    },
    {
        "line": 21,
        "fullcodeline": "tensor.dim_size(ndims - 2));"
    },
    {
        "line": 27,
        "fullcodeline": "tensor.dim_size(ndims - 1), \" and \","
    },
    {
        "line": 28,
        "fullcodeline": "rhs.dim_size(ndims - 2));"
    },
    {
        "line": 12,
        "fullcodeline": "return errors::InvalidArgument("
    },
    {
        "line": 15,
        "fullcodeline": "\", got \", tensor.dim_size(i), \" and \", rhs.dim_size(i));"
    }
]