[
    {
        "line": 2,
        "fullcodeline": "Tensor tensor = ctx->input(0);"
    },
    {
        "line": 3,
        "fullcodeline": "const Variant& variant = tensor.scalar<Variant>()();"
    },
    {
        "line": 4,
        "fullcodeline": "const CompressedElement* compressed = variant.get<CompressedElement>();"
    },
    {
        "line": 5,
        "fullcodeline": "OP_REQUIRES("
    },
    {
        "line": 11,
        "fullcodeline": "std::vector<Tensor> components;"
    },
    {
        "line": 12,
        "fullcodeline": "OP_REQUIRES_OK(ctx, UncompressElement(*compressed, &components));"
    },
    {
        "line": 13,
        "fullcodeline": "OP_REQUIRES(ctx, components.size() == output_types_.size(),"
    },
    {
        "line": 6,
        "fullcodeline": "ctx, compressed != nullptr,"
    },
    {
        "line": 7,
        "fullcodeline": "errors::InvalidArgument("
    },
    {
        "line": 14,
        "fullcodeline": "errors::FailedPrecondition(\"Expected \", output_types_.size(),"
    },
    {
        "line": 17,
        "fullcodeline": "for (int i = 0; i < components.size(); ++i) {"
    },
    {
        "line": 9,
        "fullcodeline": "tensor.DebugString()));"
    },
    {
        "line": 16,
        "fullcodeline": "components.size()));"
    },
    {
        "line": 18,
        "fullcodeline": "OP_REQUIRES("
    },
    {
        "line": 24,
        "fullcodeline": "ctx->set_output(i, components[i]);"
    },
    {
        "line": 19,
        "fullcodeline": "ctx, components[i].dtype() == output_types_[i],"
    },
    {
        "line": 20,
        "fullcodeline": "errors::FailedPrecondition(\"Expected a tensor of type \","
    },
    {
        "line": 21,
        "fullcodeline": "DataTypeString(output_types_[i]),"
    },
    {
        "line": 23,
        "fullcodeline": "DataTypeString(components[i].dtype())));"
    }
]