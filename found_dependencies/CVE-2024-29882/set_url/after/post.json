[
    {
        "line": 3,
        "fullcodeline": "srs_error_t err = srs_success;"
    },
    {
        "line": 5,
        "fullcodeline": "_url = url;"
    },
    {
        "line": 8,
        "fullcodeline": "std::string uri = _url;"
    },
    {
        "line": 35,
        "fullcodeline": "_ext = srs_path_filext(_uri->get_path());"
    },
    {
        "line": 38,
        "fullcodeline": "srs_parse_query_string(_uri->get_query(), _query);"
    },
    {
        "line": 10,
        "fullcodeline": "if (!srs_string_contains(uri, \"://\")) {"
    },
    {
        "line": 30,
        "fullcodeline": "if ((err = _uri->initialize(uri)) != srs_success) {"
    },
    {
        "line": 13,
        "fullcodeline": "std::string host = _header.get(\"Host\");"
    },
    {
        "line": 42,
        "fullcodeline": "string callback= query_get(\"callback\");"
    },
    {
        "line": 43,
        "fullcodeline": "jsonp = !callback.empty();"
    },
    {
        "line": 16,
        "fullcodeline": "if (host.empty()) {"
    },
    {
        "line": 21,
        "fullcodeline": "if (!host.empty() && !srs_string_starts_with(_url, \"/\")) {"
    },
    {
        "line": 25,
        "fullcodeline": "if (!host.empty()) {"
    },
    {
        "line": 31,
        "fullcodeline": "return srs_error_wrap(err, \"init uri %s\", uri.c_str());"
    },
    {
        "line": 49,
        "fullcodeline": "if (!srs_is_valid_jsonp_callback(callback)) {"
    },
    {
        "line": 17,
        "fullcodeline": "host = srs_get_public_internet_address(true);"
    },
    {
        "line": 22,
        "fullcodeline": "host += \"/\";"
    },
    {
        "line": 26,
        "fullcodeline": "uri = \"http://\" + host + _url;"
    },
    {
        "line": 46,
        "fullcodeline": "jsonp_method = query_get(\"method\");"
    },
    {
        "line": 50,
        "fullcodeline": "return srs_error_new(ERROR_HTTP_JSONP, \"invalid callback=%s\", callback.c_str());"
    }
]