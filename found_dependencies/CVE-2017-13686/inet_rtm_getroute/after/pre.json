[
    {
        "line": 4,
        "fullcodeline": "struct net *net = sock_net(in_skb->sk);"
    },
    {
        "line": 6,
        "fullcodeline": "struct nlattr *tb[RTA_MAX+1];"
    },
    {
        "line": 7,
        "fullcodeline": "struct fib_result res = {};"
    },
    {
        "line": 8,
        "fullcodeline": "struct rtable *rt = NULL;"
    },
    {
        "line": 10,
        "fullcodeline": "__be32 dst = 0;"
    },
    {
        "line": 11,
        "fullcodeline": "__be32 src = 0;"
    },
    {
        "line": 16,
        "fullcodeline": "u32 table_id = RT_TABLE_MAIN;"
    },
    {
        "line": 19,
        "fullcodeline": "err = nlmsg_parse(nlh, sizeof(*rtm), tb, RTA_MAX, rtm_ipv4_policy,"
    },
    {
        "line": 24,
        "fullcodeline": "rtm = nlmsg_data(nlh);"
    },
    {
        "line": 26,
        "fullcodeline": "skb = alloc_skb(NLMSG_GOODSIZE, GFP_KERNEL);"
    },
    {
        "line": 35,
        "fullcodeline": "skb_reset_mac_header(skb);"
    },
    {
        "line": 36,
        "fullcodeline": "skb_reset_network_header(skb);"
    },
    {
        "line": 38,
        "fullcodeline": "src = tb[RTA_SRC] ? nla_get_in_addr(tb[RTA_SRC]) : 0;"
    },
    {
        "line": 39,
        "fullcodeline": "dst = tb[RTA_DST] ? nla_get_in_addr(tb[RTA_DST]) : 0;"
    },
    {
        "line": 40,
        "fullcodeline": "iif = tb[RTA_IIF] ? nla_get_u32(tb[RTA_IIF]) : 0;"
    },
    {
        "line": 41,
        "fullcodeline": "mark = tb[RTA_MARK] ? nla_get_u32(tb[RTA_MARK]) : 0;"
    },
    {
        "line": 50,
        "fullcodeline": "ip_hdr(skb)->protocol = IPPROTO_UDP;"
    },
    {
        "line": 51,
        "fullcodeline": "ip_hdr(skb)->saddr = src;"
    },
    {
        "line": 52,
        "fullcodeline": "ip_hdr(skb)->daddr = dst;"
    },
    {
        "line": 54,
        "fullcodeline": "skb_reserve(skb, MAX_HEADER + sizeof(struct iphdr));"
    },
    {
        "line": 56,
        "fullcodeline": "memset(&fl4, 0, sizeof(fl4));"
    },
    {
        "line": 57,
        "fullcodeline": "fl4.daddr = dst;"
    },
    {
        "line": 58,
        "fullcodeline": "fl4.saddr = src;"
    },
    {
        "line": 59,
        "fullcodeline": "fl4.flowi4_tos = rtm->rtm_tos;"
    },
    {
        "line": 60,
        "fullcodeline": "fl4.flowi4_oif = tb[RTA_OIF] ? nla_get_u32(tb[RTA_OIF]) : 0;"
    },
    {
        "line": 61,
        "fullcodeline": "fl4.flowi4_mark = mark;"
    },
    {
        "line": 62,
        "fullcodeline": "fl4.flowi4_uid = uid;"
    },
    {
        "line": 64,
        "fullcodeline": "rcu_read_lock();"
    },
    {
        "line": 120,
        "fullcodeline": "rcu_read_unlock();"
    },
    {
        "line": 122,
        "fullcodeline": "err = rtnl_unicast(skb, net, NETLINK_CB(in_skb).portid);"
    },
    {
        "line": 127,
        "fullcodeline": "rcu_read_unlock();"
    },
    {
        "line": 128,
        "fullcodeline": "kfree_skb(skb);"
    },
    {
        "line": 21,
        "fullcodeline": "if (err < 0)"
    },
    {
        "line": 27,
        "fullcodeline": "if (!skb) {"
    },
    {
        "line": 96,
        "fullcodeline": "if (rtm->rtm_flags & RTM_F_NOTIFY)"
    },
    {
        "line": 99,
        "fullcodeline": "if (rtm->rtm_flags & RTM_F_LOOKUP_TABLE)"
    },
    {
        "line": 102,
        "fullcodeline": "if (rtm->rtm_flags & RTM_F_FIB_MATCH) {"
    },
    {
        "line": 117,
        "fullcodeline": "if (err < 0)"
    },
    {
        "line": 28,
        "fullcodeline": "err = -ENOBUFS;"
    },
    {
        "line": 43,
        "fullcodeline": "uid = make_kuid(current_user_ns(), nla_get_u32(tb[RTA_UID]));"
    },
    {
        "line": 69,
        "fullcodeline": "dev = dev_get_by_index_rcu(net, iif);"
    },
    {
        "line": 75,
        "fullcodeline": "skb->protocol\t= htons(ETH_P_IP);"
    },
    {
        "line": 76,
        "fullcodeline": "skb->dev\t= dev;"
    },
    {
        "line": 77,
        "fullcodeline": "skb->mark\t= mark;"
    },
    {
        "line": 78,
        "fullcodeline": "err = ip_route_input_rcu(skb, dst, src, rtm->rtm_tos,"
    },
    {
        "line": 81,
        "fullcodeline": "rt = skb_rtable(skb);"
    },
    {
        "line": 97,
        "fullcodeline": "rt->rt_flags |= RTCF_NOTIFY;"
    },
    {
        "line": 100,
        "fullcodeline": "table_id = rt->rt_table_id;"
    },
    {
        "line": 109,
        "fullcodeline": "err = fib_dump_info(skb, NETLINK_CB(in_skb).portid,"
    },
    {
        "line": 45,
        "fullcodeline": "uid = (iif ? INVALID_UID : current_uid());"
    },
    {
        "line": 70,
        "fullcodeline": "if (!dev) {"
    },
    {
        "line": 82,
        "fullcodeline": "if (err == 0 && rt->dst.error)"
    },
    {
        "line": 85,
        "fullcodeline": "rt = ip_route_output_key_hash_rcu(net, &fl4, &res, skb);"
    },
    {
        "line": 86,
        "fullcodeline": "err = 0;"
    },
    {
        "line": 103,
        "fullcodeline": "if (!res.fi) {"
    },
    {
        "line": 114,
        "fullcodeline": "err = rt_fill_info(net, dst, src, table_id, &fl4, skb,"
    },
    {
        "line": 71,
        "fullcodeline": "err = -ENODEV;"
    },
    {
        "line": 83,
        "fullcodeline": "err = -rt->dst.error;"
    },
    {
        "line": 87,
        "fullcodeline": "if (IS_ERR(rt))"
    },
    {
        "line": 104,
        "fullcodeline": "err = fib_props[res.type].error;"
    },
    {
        "line": 88,
        "fullcodeline": "err = PTR_ERR(rt);"
    },
    {
        "line": 105,
        "fullcodeline": "if (!err)"
    },
    {
        "line": 90,
        "fullcodeline": "skb_dst_set(skb, &rt->dst);"
    },
    {
        "line": 106,
        "fullcodeline": "err = -EHOSTUNREACH;"
    },
    {
        "line": 115,
        "fullcodeline": "NETLINK_CB(in_skb).portid, nlh->nlmsg_seq);"
    }
]