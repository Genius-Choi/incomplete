[
    {
        "line": 13,
        "fullcodeline": "int setimes, targisdir, wrerrno = 0;"
    },
    {
        "line": 14,
        "fullcodeline": "char ch, *cp, *np, *targ, *why, *vect[1], buf[2048];"
    },
    {
        "line": 15,
        "fullcodeline": "struct timeval tv[2];"
    },
    {
        "line": 21,
        "fullcodeline": "setimes = targisdir = 0;"
    },
    {
        "line": 22,
        "fullcodeline": "mask = umask(0);"
    },
    {
        "line": 33,
        "fullcodeline": "(void) atomicio(vwrite, remout, \"\", 1);"
    },
    {
        "line": 281,
        "fullcodeline": "run_err(\"protocol error: %s\", why);"
    },
    {
        "line": 282,
        "fullcodeline": "exit(1);"
    },
    {
        "line": 23,
        "fullcodeline": "if (!pflag)"
    },
    {
        "line": 25,
        "fullcodeline": "if (argc != 1) {"
    },
    {
        "line": 34,
        "fullcodeline": "if (stat(targ, &stb) == 0 && S_ISDIR(stb.st_mode))"
    },
    {
        "line": 36,
        "fullcodeline": "for (first = 1;; first = 0) {"
    },
    {
        "line": 24,
        "fullcodeline": "(void) umask(mask);"
    },
    {
        "line": 26,
        "fullcodeline": "run_err(\"ambiguous target\");"
    },
    {
        "line": 27,
        "fullcodeline": "exit(1);"
    },
    {
        "line": 31,
        "fullcodeline": "verifydir(targ);"
    },
    {
        "line": 35,
        "fullcodeline": "targisdir = 1;"
    },
    {
        "line": 37,
        "fullcodeline": "cp = buf;"
    },
    {
        "line": 47,
        "fullcodeline": "*cp = 0;"
    },
    {
        "line": 67,
        "fullcodeline": "cp = buf;"
    },
    {
        "line": 100,
        "fullcodeline": "mode = 0;"
    },
    {
        "line": 134,
        "fullcodeline": "curfile = cp;"
    },
    {
        "line": 135,
        "fullcodeline": "exists = stat(np, &stb) == 0;"
    },
    {
        "line": 168,
        "fullcodeline": "omode = mode;"
    },
    {
        "line": 169,
        "fullcodeline": "mode |= S_IWUSR;"
    },
    {
        "line": 174,
        "fullcodeline": "(void) atomicio(vwrite, remout, \"\", 1);"
    },
    {
        "line": 179,
        "fullcodeline": "cp = bp->buf;"
    },
    {
        "line": 180,
        "fullcodeline": "wrerr = NO;"
    },
    {
        "line": 182,
        "fullcodeline": "statbytes = 0;"
    },
    {
        "line": 260,
        "fullcodeline": "(void) response();"
    },
    {
        "line": 38,
        "fullcodeline": "if (atomicio(read, remin, cp, 1) != 1)"
    },
    {
        "line": 40,
        "fullcodeline": "if (*cp++ == '\\n')"
    },
    {
        "line": 46,
        "fullcodeline": "} while (cp < &buf[sizeof(buf) - 1] && ch != '\\n');"
    },
    {
        "line": 51,
        "fullcodeline": "if (buf[0] == '\\01' || buf[0] == '\\02') {"
    },
    {
        "line": 60,
        "fullcodeline": "if (buf[0] == 'E') {"
    },
    {
        "line": 64,
        "fullcodeline": "if (ch == '\\n')"
    },
    {
        "line": 68,
        "fullcodeline": "if (*cp == 'T') {"
    },
    {
        "line": 86,
        "fullcodeline": "if (*cp != 'C' && *cp != 'D') {"
    },
    {
        "line": 101,
        "fullcodeline": "for (++cp; cp < buf + 5; cp++) {"
    },
    {
        "line": 106,
        "fullcodeline": "if (*cp++ != ' ')"
    },
    {
        "line": 109,
        "fullcodeline": "for (size = 0; isdigit(*cp);)"
    },
    {
        "line": 110,
        "fullcodeline": "size = size * 10 + (*cp++ - '0');"
    },
    {
        "line": 111,
        "fullcodeline": "if (*cp++ != ' ')"
    },
    {
        "line": 113,
        "fullcodeline": "if ((strchr(cp, '/') != NULL) || (strcmp(cp, \"..\") == 0)) {"
    },
    {
        "line": 136,
        "fullcodeline": "if (buf[0] == 'D') {"
    },
    {
        "line": 170,
        "fullcodeline": "if ((ofd = open(np, O_WRONLY|O_CREAT, mode)) < 0) {"
    },
    {
        "line": 175,
        "fullcodeline": "if ((bp = allocbuf(&buffer, ofd, 4096)) == NULL) {"
    },
    {
        "line": 187,
        "fullcodeline": "for (count = i = 0; i < size; i += 4096) {"
    },
    {
        "line": 224,
        "fullcodeline": "if (count != 0 && wrerr == NO &&"
    },
    {
        "line": 229,
        "fullcodeline": "if (wrerr == NO && ftruncate(ofd, size) != 0) {"
    },
    {
        "line": 256,
        "fullcodeline": "if (close(ofd) == -1) {"
    },
    {
        "line": 261,
        "fullcodeline": "if (setimes && wrerr == NO) {"
    },
    {
        "line": 41,
        "fullcodeline": "SCREWUP(\"unexpected <newline>\");"
    },
    {
        "line": 45,
        "fullcodeline": "*cp++ = ch;"
    },
    {
        "line": 49,
        "fullcodeline": "fprintf(stderr, \"Sink: %s\", buf);"
    },
    {
        "line": 57,
        "fullcodeline": "++errs;"
    },
    {
        "line": 61,
        "fullcodeline": "(void) atomicio(vwrite, remout, \"\", 1);"
    },
    {
        "line": 65,
        "fullcodeline": "*--cp = 0;"
    },
    {
        "line": 69,
        "fullcodeline": "setimes++;"
    },
    {
        "line": 70,
        "fullcodeline": "cp++;"
    },
    {
        "line": 71,
        "fullcodeline": "mtime.tv_sec = strtol(cp, &cp, 10);"
    },
    {
        "line": 74,
        "fullcodeline": "mtime.tv_usec = strtol(cp, &cp, 10);"
    },
    {
        "line": 77,
        "fullcodeline": "atime.tv_sec = strtol(cp, &cp, 10);"
    },
    {
        "line": 80,
        "fullcodeline": "atime.tv_usec = strtol(cp, &cp, 10);"
    },
    {
        "line": 83,
        "fullcodeline": "(void) atomicio(vwrite, remout, \"\", 1);"
    },
    {
        "line": 98,
        "fullcodeline": "SCREWUP(\"expected control record\");"
    },
    {
        "line": 104,
        "fullcodeline": "mode = (mode << 3) | (*cp - '0');"
    },
    {
        "line": 107,
        "fullcodeline": "SCREWUP(\"mode not delimited\");"
    },
    {
        "line": 112,
        "fullcodeline": "SCREWUP(\"size not delimited\");"
    },
    {
        "line": 114,
        "fullcodeline": "run_err(\"error: unexpected filename: %s\", cp);"
    },
    {
        "line": 115,
        "fullcodeline": "exit(1);"
    },
    {
        "line": 118,
        "fullcodeline": "static char *namebuf = NULL;"
    },
    {
        "line": 119,
        "fullcodeline": "static size_t cursize = 0;"
    },
    {
        "line": 122,
        "fullcodeline": "need = strlen(targ) + strlen(cp) + 250;"
    },
    {
        "line": 129,
        "fullcodeline": "(void) snprintf(namebuf, need, \"%s%s%s\", targ,"
    },
    {
        "line": 131,
        "fullcodeline": "np = namebuf;"
    },
    {
        "line": 137,
        "fullcodeline": "int mod_flag = pflag;"
    },
    {
        "line": 154,
        "fullcodeline": "vect[0] = xstrdup(np);"
    },
    {
        "line": 155,
        "fullcodeline": "sink(1, vect);"
    },
    {
        "line": 171,
        "fullcodeline": "bad:\t\t\trun_err(\"%s: %s\", np, strerror(errno));"
    },
    {
        "line": 176,
        "fullcodeline": "(void) close(ofd);"
    },
    {
        "line": 188,
        "fullcodeline": "amt = 4096;"
    },
    {
        "line": 191,
        "fullcodeline": "count += amt;"
    },
    {
        "line": 225,
        "fullcodeline": "atomicio(vwrite, ofd, bp->buf, count) != count) {"
    },
    {
        "line": 226,
        "fullcodeline": "wrerr = YES;"
    },
    {
        "line": 227,
        "fullcodeline": "wrerrno = errno;"
    },
    {
        "line": 230,
        "fullcodeline": "run_err(\"%s: truncate: %s\", np, strerror(errno));"
    },
    {
        "line": 231,
        "fullcodeline": "wrerr = DISPLAYED;"
    },
    {
        "line": 257,
        "fullcodeline": "wrerr = YES;"
    },
    {
        "line": 258,
        "fullcodeline": "wrerrno = errno;"
    },
    {
        "line": 262,
        "fullcodeline": "setimes = 0;"
    },
    {
        "line": 271,
        "fullcodeline": "run_err(\"%s: %s\", np, strerror(wrerrno));"
    },
    {
        "line": 274,
        "fullcodeline": "(void) atomicio(vwrite, remout, \"\", 1);"
    },
    {
        "line": 43,
        "fullcodeline": "if (atomicio(read, remin, &ch, sizeof(ch)) != sizeof(ch))"
    },
    {
        "line": 52,
        "fullcodeline": "if (iamremote == 0)"
    },
    {
        "line": 55,
        "fullcodeline": "if (buf[0] == '\\02')"
    },
    {
        "line": 72,
        "fullcodeline": "if (!cp || *cp++ != ' ')"
    },
    {
        "line": 75,
        "fullcodeline": "if (!cp || *cp++ != ' ')"
    },
    {
        "line": 78,
        "fullcodeline": "if (!cp || *cp++ != ' ')"
    },
    {
        "line": 81,
        "fullcodeline": "if (!cp || *cp++ != '\\0')"
    },
    {
        "line": 102,
        "fullcodeline": "if (*cp < '0' || *cp > '7')"
    },
    {
        "line": 123,
        "fullcodeline": "if (need > cursize) {"
    },
    {
        "line": 133,
        "fullcodeline": "np = targ;"
    },
    {
        "line": 138,
        "fullcodeline": "if (!iamrecursive)"
    },
    {
        "line": 189,
        "fullcodeline": "if (i + amt > size)"
    },
    {
        "line": 202,
        "fullcodeline": "} while (amt > 0);"
    },
    {
        "line": 207,
        "fullcodeline": "if (count == bp->cnt) {"
    },
    {
        "line": 234,
        "fullcodeline": "if (exists || omode != mode)"
    },
    {
        "line": 263,
        "fullcodeline": "if (utimes(np, tv) < 0) {"
    },
    {
        "line": 44,
        "fullcodeline": "SCREWUP(\"lost connection\");"
    },
    {
        "line": 53,
        "fullcodeline": "(void) atomicio(vwrite, STDERR_FILENO,"
    },
    {
        "line": 56,
        "fullcodeline": "exit(1);"
    },
    {
        "line": 73,
        "fullcodeline": "SCREWUP(\"mtime.sec not delimited\");"
    },
    {
        "line": 76,
        "fullcodeline": "SCREWUP(\"mtime.usec not delimited\");"
    },
    {
        "line": 79,
        "fullcodeline": "SCREWUP(\"atime.sec not delimited\");"
    },
    {
        "line": 82,
        "fullcodeline": "SCREWUP(\"atime.usec not delimited\");"
    },
    {
        "line": 95,
        "fullcodeline": "run_err(\"%s\", cp);"
    },
    {
        "line": 96,
        "fullcodeline": "exit(1);"
    },
    {
        "line": 103,
        "fullcodeline": "SCREWUP(\"bad mode\");"
    },
    {
        "line": 126,
        "fullcodeline": "namebuf = xmalloc(need);"
    },
    {
        "line": 127,
        "fullcodeline": "cursize = need;"
    },
    {
        "line": 130,
        "fullcodeline": "strcmp(targ, \"/\") ? \"/\" : \"\", cp);"
    },
    {
        "line": 139,
        "fullcodeline": "SCREWUP(\"received directory without -r\");"
    },
    {
        "line": 157,
        "fullcodeline": "setimes = 0;"
    },
    {
        "line": 163,
        "fullcodeline": "(void) chmod(vect[0], mode);"
    },
    {
        "line": 165,
        "fullcodeline": "xfree(vect[0]);"
    },
    {
        "line": 190,
        "fullcodeline": "amt = size - i;"
    },
    {
        "line": 193,
        "fullcodeline": "j = atomicio(read, remin, cp, amt);"
    },
    {
        "line": 199,
        "fullcodeline": "amt -= j;"
    },
    {
        "line": 200,
        "fullcodeline": "cp += j;"
    },
    {
        "line": 201,
        "fullcodeline": "statbytes += j;"
    },
    {
        "line": 205,
        "fullcodeline": "bwlimit(4096);"
    },
    {
        "line": 216,
        "fullcodeline": "count = 0;"
    },
    {
        "line": 217,
        "fullcodeline": "cp = bp->buf;"
    },
    {
        "line": 245,
        "fullcodeline": "if (!exists && omode != mode)"
    },
    {
        "line": 264,
        "fullcodeline": "run_err(\"%s: set times: %s\","
    },
    {
        "line": 266,
        "fullcodeline": "wrerr = DISPLAYED;"
    },
    {
        "line": 141,
        "fullcodeline": "if (!S_ISDIR(stb.st_mode)) {"
    },
    {
        "line": 150,
        "fullcodeline": "mod_flag = 1;"
    },
    {
        "line": 158,
        "fullcodeline": "if (utimes(vect[0], tv) < 0)"
    },
    {
        "line": 194,
        "fullcodeline": "if (j == 0) {"
    },
    {
        "line": 209,
        "fullcodeline": "if (wrerr == NO) {"
    },
    {
        "line": 238,
        "fullcodeline": "if (chmod(np, omode)) {"
    },
    {
        "line": 265,
        "fullcodeline": "np, strerror(errno));"
    },
    {
        "line": 54,
        "fullcodeline": "buf + 1, strlen(buf + 1));"
    },
    {
        "line": 125,
        "fullcodeline": "xfree(namebuf);"
    },
    {
        "line": 142,
        "fullcodeline": "errno = ENOTDIR;"
    },
    {
        "line": 146,
        "fullcodeline": "(void) chmod(np, mode);"
    },
    {
        "line": 151,
        "fullcodeline": "if (mkdir(np, mode | S_IRWXU) < 0)"
    },
    {
        "line": 159,
        "fullcodeline": "run_err(\"%s: set times: %s\","
    },
    {
        "line": 195,
        "fullcodeline": "run_err(\"%s\", j ? strerror(errno) :"
    },
    {
        "line": 197,
        "fullcodeline": "exit(1);"
    },
    {
        "line": 240,
        "fullcodeline": "run_err(\"%s: set mode: %s\","
    },
    {
        "line": 242,
        "fullcodeline": "wrerr = DISPLAYED;"
    },
    {
        "line": 249,
        "fullcodeline": "if (chmod(np, omode & ~mask)) {"
    },
    {
        "line": 160,
        "fullcodeline": "vect[0], strerror(errno));"
    },
    {
        "line": 210,
        "fullcodeline": "if (atomicio(vwrite, ofd, bp->buf,"
    },
    {
        "line": 241,
        "fullcodeline": "np, strerror(errno));"
    },
    {
        "line": 251,
        "fullcodeline": "run_err(\"%s: set mode: %s\","
    },
    {
        "line": 253,
        "fullcodeline": "wrerr = DISPLAYED;"
    },
    {
        "line": 212,
        "fullcodeline": "wrerr = YES;"
    },
    {
        "line": 213,
        "fullcodeline": "wrerrno = errno;"
    },
    {
        "line": 252,
        "fullcodeline": "np, strerror(errno));"
    }
]