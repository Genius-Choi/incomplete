[
    {
        "line": 41,
        "fullcodeline": "assert(image_info != (const ImageInfo *) NULL);"
    },
    {
        "line": 42,
        "fullcodeline": "assert(image_info->signature == MagickCoreSignature);"
    },
    {
        "line": 43,
        "fullcodeline": "assert(image != (Image *) NULL);"
    },
    {
        "line": 44,
        "fullcodeline": "assert(image->signature == MagickCoreSignature);"
    },
    {
        "line": 47,
        "fullcodeline": "assert(exception != (ExceptionInfo *) NULL);"
    },
    {
        "line": 48,
        "fullcodeline": "assert(exception->signature == MagickCoreSignature);"
    },
    {
        "line": 49,
        "fullcodeline": "status=OpenBlob(image_info,image,WriteBinaryBlobMode,exception);"
    },
    {
        "line": 52,
        "fullcodeline": "(void) TransformImageColorspace(image,sRGBColorspace,exception);"
    },
    {
        "line": 53,
        "fullcodeline": "page_table=(MagickOffsetType *) NULL;"
    },
    {
        "line": 69,
        "fullcodeline": "scene=0;"
    },
    {
        "line": 338,
        "fullcodeline": "(void) CloseBlob(image);"
    },
    {
        "line": 45,
        "fullcodeline": "if (image->debug != MagickFalse)"
    },
    {
        "line": 50,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 54,
        "fullcodeline": "if ((LocaleCompare(image_info->magick,\"DCX\") == 0) ||"
    },
    {
        "line": 313,
        "fullcodeline": "} while (image_info->adjoin != MagickFalse);"
    },
    {
        "line": 314,
        "fullcodeline": "if (page_table != (MagickOffsetType *) NULL)"
    },
    {
        "line": 328,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 46,
        "fullcodeline": "(void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",image->filename);"
    },
    {
        "line": 55,
        "fullcodeline": "((GetNextImageInList(image) != (Image *) NULL) &&"
    },
    {
        "line": 61,
        "fullcodeline": "(void) WriteBlobLSBLong(image,0x3ADE68B1L);"
    },
    {
        "line": 62,
        "fullcodeline": "page_table=(MagickOffsetType *) AcquireQuantumMemory(1024UL,"
    },
    {
        "line": 77,
        "fullcodeline": "pcx_info.identifier=0x0a;"
    },
    {
        "line": 78,
        "fullcodeline": "pcx_info.version=5;"
    },
    {
        "line": 79,
        "fullcodeline": "pcx_info.encoding=image_info->compression == NoCompression ? 0 : 1;"
    },
    {
        "line": 80,
        "fullcodeline": "pcx_info.bits_per_pixel=8;"
    },
    {
        "line": 84,
        "fullcodeline": "pcx_info.left=0;"
    },
    {
        "line": 85,
        "fullcodeline": "pcx_info.top=0;"
    },
    {
        "line": 86,
        "fullcodeline": "pcx_info.right=(unsigned short) (image->columns-1);"
    },
    {
        "line": 87,
        "fullcodeline": "pcx_info.bottom=(unsigned short) (image->rows-1);"
    },
    {
        "line": 107,
        "fullcodeline": "pcx_info.reserved=0;"
    },
    {
        "line": 108,
        "fullcodeline": "pcx_info.planes=1;"
    },
    {
        "line": 115,
        "fullcodeline": "pcx_info.bytes_per_line=(unsigned short) (((size_t) image->columns*"
    },
    {
        "line": 117,
        "fullcodeline": "pcx_info.palette_info=1;"
    },
    {
        "line": 118,
        "fullcodeline": "pcx_info.colormap_signature=0x0c;"
    },
    {
        "line": 122,
        "fullcodeline": "(void) WriteBlobByte(image,pcx_info.identifier);"
    },
    {
        "line": 123,
        "fullcodeline": "(void) WriteBlobByte(image,pcx_info.version);"
    },
    {
        "line": 124,
        "fullcodeline": "(void) WriteBlobByte(image,pcx_info.encoding);"
    },
    {
        "line": 125,
        "fullcodeline": "(void) WriteBlobByte(image,pcx_info.bits_per_pixel);"
    },
    {
        "line": 126,
        "fullcodeline": "(void) WriteBlobLSBShort(image,pcx_info.left);"
    },
    {
        "line": 127,
        "fullcodeline": "(void) WriteBlobLSBShort(image,pcx_info.top);"
    },
    {
        "line": 128,
        "fullcodeline": "(void) WriteBlobLSBShort(image,pcx_info.right);"
    },
    {
        "line": 129,
        "fullcodeline": "(void) WriteBlobLSBShort(image,pcx_info.bottom);"
    },
    {
        "line": 130,
        "fullcodeline": "(void) WriteBlobLSBShort(image,pcx_info.horizontal_resolution);"
    },
    {
        "line": 131,
        "fullcodeline": "(void) WriteBlobLSBShort(image,pcx_info.vertical_resolution);"
    },
    {
        "line": 135,
        "fullcodeline": "pcx_colormap=(unsigned char *) AcquireQuantumMemory(256UL,"
    },
    {
        "line": 139,
        "fullcodeline": "(void) memset(pcx_colormap,0,3*256*sizeof(*pcx_colormap));"
    },
    {
        "line": 140,
        "fullcodeline": "q=pcx_colormap;"
    },
    {
        "line": 148,
        "fullcodeline": "(void) WriteBlob(image,3*16,(const unsigned char *) pcx_colormap);"
    },
    {
        "line": 149,
        "fullcodeline": "(void) WriteBlobByte(image,pcx_info.reserved);"
    },
    {
        "line": 150,
        "fullcodeline": "(void) WriteBlobByte(image,pcx_info.planes);"
    },
    {
        "line": 151,
        "fullcodeline": "(void) WriteBlobLSBShort(image,pcx_info.bytes_per_line);"
    },
    {
        "line": 152,
        "fullcodeline": "(void) WriteBlobLSBShort(image,pcx_info.palette_info);"
    },
    {
        "line": 155,
        "fullcodeline": "length=(size_t) pcx_info.bytes_per_line;"
    },
    {
        "line": 156,
        "fullcodeline": "pixel_info=AcquireVirtualMemory(length,pcx_info.planes*sizeof(*pixels));"
    },
    {
        "line": 162,
        "fullcodeline": "pixels=(unsigned char *) GetVirtualMemoryBlob(pixel_info);"
    },
    {
        "line": 163,
        "fullcodeline": "q=pixels;"
    },
    {
        "line": 300,
        "fullcodeline": "pixel_info=RelinquishVirtualMemory(pixel_info);"
    },
    {
        "line": 301,
        "fullcodeline": "pcx_colormap=(unsigned char *) RelinquishMagickMemory(pcx_colormap);"
    },
    {
        "line": 308,
        "fullcodeline": "image=SyncNextImageInList(image);"
    },
    {
        "line": 309,
        "fullcodeline": "status=SetImageProgress(image,SaveImagesTag,scene++,"
    },
    {
        "line": 319,
        "fullcodeline": "page_table[scene+1]=0;"
    },
    {
        "line": 320,
        "fullcodeline": "offset=SeekBlob(image,0L,SEEK_SET);"
    },
    {
        "line": 323,
        "fullcodeline": "(void) WriteBlobLSBLong(image,0x3ADE68B1L);"
    },
    {
        "line": 326,
        "fullcodeline": "page_table=(MagickOffsetType *) RelinquishMagickMemory(page_table);"
    },
    {
        "line": 333,
        "fullcodeline": "message=GetExceptionMessage(errno);"
    },
    {
        "line": 334,
        "fullcodeline": "(void) ThrowMagickException(exception,GetMagickModule(),FileOpenError,"
    },
    {
        "line": 336,
        "fullcodeline": "message=DestroyString(message);"
    },
    {
        "line": 56,
        "fullcodeline": "(image_info->adjoin != MagickFalse)))"
    },
    {
        "line": 64,
        "fullcodeline": "if (page_table == (MagickOffsetType *) NULL)"
    },
    {
        "line": 66,
        "fullcodeline": "for (scene=0; scene < 1024; scene++)"
    },
    {
        "line": 67,
        "fullcodeline": "(void) WriteBlobLSBLong(image,0x00000000L);"
    },
    {
        "line": 72,
        "fullcodeline": "if (page_table != (MagickOffsetType *) NULL)"
    },
    {
        "line": 81,
        "fullcodeline": "if ((image->storage_class == PseudoClass) &&"
    },
    {
        "line": 109,
        "fullcodeline": "if ((image->storage_class == DirectClass) || (image->colors > 256))"
    },
    {
        "line": 137,
        "fullcodeline": "if (pcx_colormap == (unsigned char *) NULL)"
    },
    {
        "line": 141,
        "fullcodeline": "if ((image->storage_class == PseudoClass) && (image->colors <= 256))"
    },
    {
        "line": 153,
        "fullcodeline": "for (i=0; i < 58; i++)"
    },
    {
        "line": 154,
        "fullcodeline": "(void) WriteBlobByte(image,'\\0');"
    },
    {
        "line": 157,
        "fullcodeline": "if (pixel_info == (MemoryInfo *) NULL)"
    },
    {
        "line": 164,
        "fullcodeline": "if ((image->storage_class == DirectClass) || (image->colors > 256))"
    },
    {
        "line": 302,
        "fullcodeline": "if (page_table == (MagickOffsetType *) NULL)"
    },
    {
        "line": 304,
        "fullcodeline": "if (scene >= 1023)"
    },
    {
        "line": 306,
        "fullcodeline": "if (GetNextImageInList(image) == (Image *) NULL)"
    },
    {
        "line": 311,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 321,
        "fullcodeline": "if (offset < 0)"
    },
    {
        "line": 324,
        "fullcodeline": "for (i=0; i <= (ssize_t) scene; i++)"
    },
    {
        "line": 325,
        "fullcodeline": "(void) WriteBlobLSBLong(image,(unsigned int) page_table[i]);"
    },
    {
        "line": 65,
        "fullcodeline": "ThrowWriterException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 73,
        "fullcodeline": "page_table[scene]=TellBlob(image);"
    },
    {
        "line": 82,
        "fullcodeline": "(SetImageMonochrome(image,exception) != MagickFalse))"
    },
    {
        "line": 83,
        "fullcodeline": "pcx_info.bits_per_pixel=1;"
    },
    {
        "line": 111,
        "fullcodeline": "pcx_info.planes=3;"
    },
    {
        "line": 138,
        "fullcodeline": "ThrowWriterException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 159,
        "fullcodeline": "pcx_colormap=(unsigned char *) RelinquishMagickMemory(pcx_colormap);"
    },
    {
        "line": 160,
        "fullcodeline": "ThrowWriterException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 310,
        "fullcodeline": "GetImageListLength(image));"
    },
    {
        "line": 322,
        "fullcodeline": "ThrowWriterException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 100,
        "fullcodeline": "pcx_info.horizontal_resolution=(unsigned short)"
    },
    {
        "line": 102,
        "fullcodeline": "pcx_info.vertical_resolution=(unsigned short)"
    },
    {
        "line": 112,
        "fullcodeline": "if (image->alpha_trait != UndefinedPixelTrait)"
    },
    {
        "line": 136,
        "fullcodeline": "3*sizeof(*pcx_colormap));"
    },
    {
        "line": 142,
        "fullcodeline": "for (i=0; i < (ssize_t) image->colors; i++)"
    },
    {
        "line": 169,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 297,
        "fullcodeline": "(void) WriteBlobByte(image,pcx_info.colormap_signature);"
    },
    {
        "line": 298,
        "fullcodeline": "(void) WriteBlob(image,3*256,pcx_colormap);"
    },
    {
        "line": 113,
        "fullcodeline": "pcx_info.planes++;"
    },
    {
        "line": 144,
        "fullcodeline": "*q++=ScaleQuantumToChar(image->colormap[i].red);"
    },
    {
        "line": 145,
        "fullcodeline": "*q++=ScaleQuantumToChar(image->colormap[i].green);"
    },
    {
        "line": 146,
        "fullcodeline": "*q++=ScaleQuantumToChar(image->colormap[i].blue);"
    },
    {
        "line": 171,
        "fullcodeline": "q=pixels;"
    },
    {
        "line": 231,
        "fullcodeline": "if (pcx_info.bits_per_pixel > 1)"
    },
    {
        "line": 101,
        "fullcodeline": "(2.54*image->resolution.x+0.5);"
    },
    {
        "line": 103,
        "fullcodeline": "(2.54*image->resolution.y+0.5);"
    },
    {
        "line": 172,
        "fullcodeline": "for (i=0; i < pcx_info.planes; i++)"
    },
    {
        "line": 218,
        "fullcodeline": "if (PCXWritePixels(&pcx_info,pixels,image) == MagickFalse)"
    },
    {
        "line": 220,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 174,
        "fullcodeline": "p=GetVirtualPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 222,
        "fullcodeline": "status=SetImageProgress(image,SaveImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 232,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 175,
        "fullcodeline": "if (p == (const Quantum *) NULL)"
    },
    {
        "line": 177,
        "fullcodeline": "switch ((int) i)"
    },
    {
        "line": 224,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 234,
        "fullcodeline": "p=GetVirtualPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 237,
        "fullcodeline": "q=pixels;"
    },
    {
        "line": 262,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 235,
        "fullcodeline": "if (p == (const Quantum *) NULL)"
    },
    {
        "line": 238,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 243,
        "fullcodeline": "if (PCXWritePixels(&pcx_info,pixels,image) == MagickFalse)"
    },
    {
        "line": 245,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 264,
        "fullcodeline": "p=GetVirtualPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 267,
        "fullcodeline": "bit=0;"
    },
    {
        "line": 268,
        "fullcodeline": "byte=0;"
    },
    {
        "line": 269,
        "fullcodeline": "q=pixels;"
    },
    {
        "line": 240,
        "fullcodeline": "*q++=(unsigned char) GetPixelIndex(image,p);"
    },
    {
        "line": 241,
        "fullcodeline": "p+=GetPixelChannels(image);"
    },
    {
        "line": 247,
        "fullcodeline": "status=SetImageProgress(image,SaveImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 265,
        "fullcodeline": "if (p == (const Quantum *) NULL)"
    },
    {
        "line": 270,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 284,
        "fullcodeline": "if (bit != 0)"
    },
    {
        "line": 286,
        "fullcodeline": "if (PCXWritePixels(&pcx_info,pixels,image) == MagickFalse)"
    },
    {
        "line": 288,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 181,
        "fullcodeline": "for (x=0; x < (ssize_t) pcx_info.bytes_per_line; x++)"
    },
    {
        "line": 190,
        "fullcodeline": "for (x=0; x < (ssize_t) pcx_info.bytes_per_line; x++)"
    },
    {
        "line": 199,
        "fullcodeline": "for (x=0; x < (ssize_t) pcx_info.bytes_per_line; x++)"
    },
    {
        "line": 209,
        "fullcodeline": "for (x=(ssize_t) pcx_info.bytes_per_line; x != 0; x--)"
    },
    {
        "line": 249,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 272,
        "fullcodeline": "byte<<=1;"
    },
    {
        "line": 275,
        "fullcodeline": "bit++;"
    },
    {
        "line": 282,
        "fullcodeline": "p+=GetPixelChannels(image);"
    },
    {
        "line": 285,
        "fullcodeline": "*q++=byte << (8-bit);"
    },
    {
        "line": 290,
        "fullcodeline": "status=SetImageProgress(image,SaveImageTag,(MagickOffsetType)"
    },
    {
        "line": 183,
        "fullcodeline": "*q++=ScaleQuantumToChar(GetPixelRed(image,p));"
    },
    {
        "line": 184,
        "fullcodeline": "p+=GetPixelChannels(image);"
    },
    {
        "line": 192,
        "fullcodeline": "*q++=ScaleQuantumToChar(GetPixelGreen(image,p));"
    },
    {
        "line": 193,
        "fullcodeline": "p+=GetPixelChannels(image);"
    },
    {
        "line": 201,
        "fullcodeline": "*q++=ScaleQuantumToChar(GetPixelBlue(image,p));"
    },
    {
        "line": 202,
        "fullcodeline": "p+=GetPixelChannels(image);"
    },
    {
        "line": 211,
        "fullcodeline": "*q++=ScaleQuantumToChar((Quantum) (GetPixelAlpha(image,p)));"
    },
    {
        "line": 212,
        "fullcodeline": "p+=GetPixelChannels(image);"
    },
    {
        "line": 273,
        "fullcodeline": "if (GetPixelLuma(image,p) >= (QuantumRange/2.0))"
    },
    {
        "line": 276,
        "fullcodeline": "if (bit == 8)"
    },
    {
        "line": 292,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 274,
        "fullcodeline": "byte|=0x01;"
    },
    {
        "line": 278,
        "fullcodeline": "*q++=byte;"
    },
    {
        "line": 279,
        "fullcodeline": "bit=0;"
    },
    {
        "line": 280,
        "fullcodeline": "byte=0;"
    }
]