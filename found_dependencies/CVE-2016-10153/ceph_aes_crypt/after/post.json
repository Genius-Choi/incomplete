[
    {
        "line": 4,
        "fullcodeline": "struct crypto_skcipher *tfm = ceph_crypto_alloc_cipher();"
    },
    {
        "line": 5,
        "fullcodeline": "SKCIPHER_REQUEST_ON_STACK(req, tfm);"
    },
    {
        "line": 8,
        "fullcodeline": "char iv[AES_BLOCK_SIZE];"
    },
    {
        "line": 9,
        "fullcodeline": "int pad_byte = AES_BLOCK_SIZE - (in_len & (AES_BLOCK_SIZE - 1));"
    },
    {
        "line": 10,
        "fullcodeline": "int crypt_len = encrypt ? in_len + pad_byte : in_len;"
    },
    {
        "line": 16,
        "fullcodeline": "WARN_ON(crypt_len > buf_len);"
    },
    {
        "line": 19,
        "fullcodeline": "ret = setup_sgtable(&sgt, &prealloc_sg, buf, crypt_len);"
    },
    {
        "line": 23,
        "fullcodeline": "crypto_skcipher_setkey((void *)tfm, key->key, key->len);"
    },
    {
        "line": 24,
        "fullcodeline": "memcpy(iv, aes_iv, AES_BLOCK_SIZE);"
    },
    {
        "line": 26,
        "fullcodeline": "skcipher_request_set_tfm(req, tfm);"
    },
    {
        "line": 27,
        "fullcodeline": "skcipher_request_set_callback(req, 0, NULL, NULL);"
    },
    {
        "line": 28,
        "fullcodeline": "skcipher_request_set_crypt(req, sgt.sgl, sgt.sgl, crypt_len, iv);"
    },
    {
        "line": 40,
        "fullcodeline": "skcipher_request_zero(req);"
    },
    {
        "line": 67,
        "fullcodeline": "teardown_sgtable(&sgt);"
    },
    {
        "line": 69,
        "fullcodeline": "crypto_free_skcipher(tfm);"
    },
    {
        "line": 13,
        "fullcodeline": "if (IS_ERR(tfm))"
    },
    {
        "line": 18,
        "fullcodeline": "memset(buf + in_len, pad_byte, pad_byte);"
    },
    {
        "line": 37,
        "fullcodeline": "ret = crypto_skcipher_encrypt(req);"
    },
    {
        "line": 42,
        "fullcodeline": "pr_err(\"%s %scrypt failed: %d\\n\", __func__,"
    },
    {
        "line": 52,
        "fullcodeline": "*pout_len = crypt_len;"
    },
    {
        "line": 14,
        "fullcodeline": "return PTR_ERR(tfm);"
    },
    {
        "line": 39,
        "fullcodeline": "ret = crypto_skcipher_decrypt(req);"
    },
    {
        "line": 43,
        "fullcodeline": "encrypt ? \"en\" : \"de\", ret);"
    },
    {
        "line": 55,
        "fullcodeline": "if (pad_byte > 0 && pad_byte <= AES_BLOCK_SIZE &&"
    },
    {
        "line": 54,
        "fullcodeline": "pad_byte = *(char *)(buf + in_len - 1);"
    },
    {
        "line": 56,
        "fullcodeline": "in_len >= pad_byte) {"
    },
    {
        "line": 57,
        "fullcodeline": "*pout_len = in_len - pad_byte;"
    },
    {
        "line": 59,
        "fullcodeline": "pr_err(\"%s got bad padding %d on in_len %d\\n\","
    },
    {
        "line": 61,
        "fullcodeline": "ret = -EPERM;"
    }
]