[
    {
        "line": 13,
        "fullcodeline": "gboolean ret = FALSE;"
    },
    {
        "line": 14,
        "fullcodeline": "glnx_autofd int desktop_fd = -1;"
    },
    {
        "line": 15,
        "fullcodeline": "g_autofree char *tmpfile_name = g_strdup_printf (\"export-desktop-XXXXXX\");"
    },
    {
        "line": 16,
        "fullcodeline": "g_autoptr(GOutputStream) out_stream = NULL;"
    },
    {
        "line": 17,
        "fullcodeline": "g_autofree gchar *data = NULL;"
    },
    {
        "line": 19,
        "fullcodeline": "g_autofree gchar *new_data = NULL;"
    },
    {
        "line": 21,
        "fullcodeline": "g_autoptr(GKeyFile) keyfile = NULL;"
    },
    {
        "line": 22,
        "fullcodeline": "g_autofree gchar *old_exec = NULL;"
    },
    {
        "line": 24,
        "fullcodeline": "g_auto(GStrv) old_argv = NULL;"
    },
    {
        "line": 25,
        "fullcodeline": "g_auto(GStrv) groups = NULL;"
    },
    {
        "line": 26,
        "fullcodeline": "GString *new_exec = NULL;"
    },
    {
        "line": 27,
        "fullcodeline": "g_autofree char *escaped_app = maybe_quote (app);"
    },
    {
        "line": 28,
        "fullcodeline": "g_autofree char *escaped_branch = maybe_quote (branch);"
    },
    {
        "line": 29,
        "fullcodeline": "g_autofree char *escaped_arch = maybe_quote (arch);"
    },
    {
        "line": 38,
        "fullcodeline": "keyfile = g_key_file_new ();"
    },
    {
        "line": 136,
        "fullcodeline": "groups = g_key_file_get_groups (keyfile, NULL);"
    },
    {
        "line": 202,
        "fullcodeline": "new_data = g_key_file_to_data (keyfile, &new_data_len, error);"
    },
    {
        "line": 218,
        "fullcodeline": "ret = TRUE;"
    },
    {
        "line": 32,
        "fullcodeline": "if (!flatpak_openat_noatime (parent_fd, name, &desktop_fd, cancellable, error))"
    },
    {
        "line": 35,
        "fullcodeline": "if (!read_fd (desktop_fd, stat_buf, &data, &data_len, error))"
    },
    {
        "line": 39,
        "fullcodeline": "if (!g_key_file_load_from_data (keyfile, data, data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error))"
    },
    {
        "line": 42,
        "fullcodeline": "if (g_str_has_suffix (name, \".service\"))"
    },
    {
        "line": 56,
        "fullcodeline": "if (g_str_has_suffix (name, \".desktop\"))"
    },
    {
        "line": 138,
        "fullcodeline": "for (i = 0; groups[i] != NULL; i++)"
    },
    {
        "line": 203,
        "fullcodeline": "if (new_data == NULL)"
    },
    {
        "line": 221,
        "fullcodeline": "if (new_exec != NULL)"
    },
    {
        "line": 44,
        "fullcodeline": "g_autofree gchar *dbus_name = NULL;"
    },
    {
        "line": 45,
        "fullcodeline": "g_autofree gchar *expected_dbus_name = g_strndup (name, strlen (name) - strlen (\".service\"));"
    },
    {
        "line": 47,
        "fullcodeline": "dbus_name = g_key_file_get_string (keyfile, \"D-BUS Service\", \"Name\", NULL);"
    },
    {
        "line": 59,
        "fullcodeline": "g_auto(GStrv) tags = g_key_file_get_string_list (metadata,"
    },
    {
        "line": 73,
        "fullcodeline": "g_key_file_set_string (keyfile, G_KEY_FILE_DESKTOP_GROUP, \"X-Flatpak\", app);"
    },
    {
        "line": 140,
        "fullcodeline": "g_auto(GStrv) flatpak_run_opts = g_key_file_get_string_list (keyfile, groups[i], \"X-Flatpak-RunOptions\", NULL, NULL);"
    },
    {
        "line": 141,
        "fullcodeline": "g_autofree char *flatpak_run_args = format_flatpak_run_args_from_run_opts (flatpak_run_opts);"
    },
    {
        "line": 143,
        "fullcodeline": "g_key_file_remove_key (keyfile, groups[i], \"X-Flatpak-RunOptions\", NULL);"
    },
    {
        "line": 144,
        "fullcodeline": "g_key_file_remove_key (keyfile, groups[i], \"TryExec\", NULL);"
    },
    {
        "line": 147,
        "fullcodeline": "g_key_file_remove_key (keyfile, groups[i], \"X-GNOME-Bugzilla-ExtraInfoScript\", NULL);"
    },
    {
        "line": 149,
        "fullcodeline": "new_exec = g_string_new (\"\");"
    },
    {
        "line": 158,
        "fullcodeline": "old_exec = g_key_file_get_string (keyfile, groups[i], \"Exec\", NULL);"
    },
    {
        "line": 199,
        "fullcodeline": "g_key_file_set_string (keyfile, groups[i], G_KEY_FILE_DESKTOP_KEY_EXEC, new_exec->str);"
    },
    {
        "line": 206,
        "fullcodeline": "if (!flatpak_open_in_tmpdir_at (parent_fd, 0755, tmpfile_name, &out_stream, cancellable, error))"
    },
    {
        "line": 209,
        "fullcodeline": "if (!g_output_stream_write_all (out_stream, new_data, new_data_len, NULL, cancellable, error))"
    },
    {
        "line": 212,
        "fullcodeline": "if (!g_output_stream_close (out_stream, cancellable, error))"
    },
    {
        "line": 49,
        "fullcodeline": "if (dbus_name == NULL || strcmp (dbus_name, expected_dbus_name) != 0)"
    },
    {
        "line": 64,
        "fullcodeline": "if (tags != NULL)"
    },
    {
        "line": 79,
        "fullcodeline": "if (previous_ids != NULL)"
    },
    {
        "line": 155,
        "fullcodeline": "if (flatpak_run_args != NULL)"
    },
    {
        "line": 216,
        "fullcodeline": "*target = g_steal_pointer (&tmpfile_name);"
    },
    {
        "line": 66,
        "fullcodeline": "g_key_file_set_string_list (keyfile,"
    },
    {
        "line": 81,
        "fullcodeline": "const char *X_FLATPAK_RENAMED_FROM = \"X-Flatpak-RenamedFrom\";"
    },
    {
        "line": 82,
        "fullcodeline": "g_auto(GStrv) renamed_from = g_key_file_get_string_list (keyfile,"
    },
    {
        "line": 86,
        "fullcodeline": "g_autoptr(GPtrArray) merged = g_ptr_array_new_with_free_func (g_free);"
    },
    {
        "line": 87,
        "fullcodeline": "g_autoptr(GHashTable) seen = g_hash_table_new (g_str_hash, g_str_equal);"
    },
    {
        "line": 112,
        "fullcodeline": "new_suffix = name + strlen (app);"
    },
    {
        "line": 156,
        "fullcodeline": "g_string_append_printf (new_exec, \"%s\", flatpak_run_args);"
    },
    {
        "line": 159,
        "fullcodeline": "if (old_exec && g_shell_parse_argv (old_exec, &old_argc, &old_argv, NULL) && old_argc >= 1)"
    },
    {
        "line": 162,
        "fullcodeline": "g_autofree char *command = maybe_quote (old_argv[0]);"
    },
    {
        "line": 164,
        "fullcodeline": "g_string_append_printf (new_exec, \" --command=%s\", command);"
    },
    {
        "line": 176,
        "fullcodeline": "g_string_append (new_exec, \" \");"
    },
    {
        "line": 177,
        "fullcodeline": "g_string_append (new_exec, escaped_app);"
    },
    {
        "line": 51,
        "fullcodeline": "return flatpak_fail_error (error, FLATPAK_ERROR_EXPORT_FAILED,"
    },
    {
        "line": 108,
        "fullcodeline": "g_assert (g_str_has_prefix (name, app));"
    },
    {
        "line": 114,
        "fullcodeline": "for (i = 0; previous_ids[i] != NULL; i++)"
    },
    {
        "line": 124,
        "fullcodeline": "if (merged->len > 0)"
    },
    {
        "line": 166,
        "fullcodeline": "for (j = 1; j < old_argc; j++)"
    },
    {
        "line": 179,
        "fullcodeline": "for (j = 1; j < old_argc; j++)"
    },
    {
        "line": 195,
        "fullcodeline": "g_string_append (new_exec, \" \");"
    },
    {
        "line": 196,
        "fullcodeline": "g_string_append (new_exec, escaped_app);"
    },
    {
        "line": 52,
        "fullcodeline": "_(\"D-Bus service file '%s' has wrong name\"), name);"
    },
    {
        "line": 90,
        "fullcodeline": "for (i = 0; renamed_from != NULL && renamed_from[i] != NULL; i++)"
    },
    {
        "line": 116,
        "fullcodeline": "g_autofree gchar *previous_desktop = g_strconcat (previous_ids[i], new_suffix, NULL);"
    },
    {
        "line": 126,
        "fullcodeline": "g_ptr_array_add (merged, NULL);"
    },
    {
        "line": 127,
        "fullcodeline": "g_key_file_set_string_list (keyfile,"
    },
    {
        "line": 181,
        "fullcodeline": "g_autofree char *arg = maybe_quote (old_argv[j]);"
    },
    {
        "line": 131,
        "fullcodeline": "merged->len - 1);"
    },
    {
        "line": 92,
        "fullcodeline": "if (!g_hash_table_contains (seen, renamed_from[i]))"
    },
    {
        "line": 94,
        "fullcodeline": "gchar *copy = g_strdup (renamed_from[i]);"
    },
    {
        "line": 95,
        "fullcodeline": "g_hash_table_insert (seen, copy, copy);"
    },
    {
        "line": 96,
        "fullcodeline": "g_ptr_array_add (merged, g_steal_pointer (&copy));"
    },
    {
        "line": 117,
        "fullcodeline": "if (!g_hash_table_contains (seen, previous_desktop))"
    },
    {
        "line": 119,
        "fullcodeline": "g_hash_table_insert (seen, previous_desktop, previous_desktop);"
    },
    {
        "line": 120,
        "fullcodeline": "g_ptr_array_add (merged, g_steal_pointer (&previous_desktop));"
    },
    {
        "line": 168,
        "fullcodeline": "if (strcasecmp (old_argv[j], \"%f\") == 0 ||"
    },
    {
        "line": 169,
        "fullcodeline": "strcasecmp (old_argv[j], \"%u\") == 0)"
    },
    {
        "line": 171,
        "fullcodeline": "g_string_append (new_exec, \" --file-forwarding\");"
    },
    {
        "line": 183,
        "fullcodeline": "if (strcasecmp (arg, \"%f\") == 0)"
    },
    {
        "line": 184,
        "fullcodeline": "g_string_append_printf (new_exec, \" @@ %s @@\", arg);"
    },
    {
        "line": 185,
        "fullcodeline": "else if (strcasecmp (arg, \"%u\") == 0)"
    },
    {
        "line": 186,
        "fullcodeline": "g_string_append_printf (new_exec, \" @@u %s @@\", arg);"
    },
    {
        "line": 187,
        "fullcodeline": "else if (strcmp (arg, \"@@\") == 0 || strcmp (arg, \"@@u\") == 0)"
    },
    {
        "line": 188,
        "fullcodeline": "g_print (_(\"Skipping invalid Exec argument %s\\n\"), arg);"
    },
    {
        "line": 190,
        "fullcodeline": "g_string_append_printf (new_exec, \" %s\", arg);"
    }
]