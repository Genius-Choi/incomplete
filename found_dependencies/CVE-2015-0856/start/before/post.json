[
    {
        "line": 6,
        "fullcodeline": "if (daemonApp->testing()) {"
    },
    {
        "line": 8,
        "fullcodeline": "m_process = new QProcess(this);"
    },
    {
        "line": 13,
        "fullcodeline": "connect(m_process, SIGNAL(readyReadStandardOutput()), SLOT(onReadyReadStandardOutput()));"
    },
    {
        "line": 14,
        "fullcodeline": "connect(m_process, SIGNAL(readyReadStandardError()), SLOT(onReadyReadStandardError()));"
    },
    {
        "line": 17,
        "fullcodeline": "qDebug() << \"Greeter starting...\";"
    },
    {
        "line": 20,
        "fullcodeline": "QProcessEnvironment env = QProcessEnvironment::systemEnvironment();"
    },
    {
        "line": 21,
        "fullcodeline": "env.insert(QStringLiteral(\"DISPLAY\"), m_display->name());"
    },
    {
        "line": 22,
        "fullcodeline": "env.insert(QStringLiteral(\"XAUTHORITY\"), m_authPath);"
    },
    {
        "line": 23,
        "fullcodeline": "env.insert(QStringLiteral(\"XCURSOR_THEME\"), mainConfig.Theme.CursorTheme.get());"
    },
    {
        "line": 24,
        "fullcodeline": "m_process->setProcessEnvironment(env);"
    },
    {
        "line": 30,
        "fullcodeline": "args << QStringLiteral(\"--socket\") << m_socket"
    },
    {
        "line": 32,
        "fullcodeline": "m_process->start(QStringLiteral(\"%1/sddm-greeter\").arg(QStringLiteral(BIN_INSTALL_DIR)), args);"
    },
    {
        "line": 49,
        "fullcodeline": "qDebug() << \"Greeter started.\";"
    },
    {
        "line": 52,
        "fullcodeline": "m_started = true;"
    },
    {
        "line": 28,
        "fullcodeline": "if (daemonApp->testing())"
    },
    {
        "line": 35,
        "fullcodeline": "if (m_process->state() == QProcess::NotRunning) {"
    },
    {
        "line": 40,
        "fullcodeline": "if (!m_process->waitForStarted()) {"
    },
    {
        "line": 55,
        "fullcodeline": "m_auth = new Auth(this);"
    },
    {
        "line": 56,
        "fullcodeline": "m_auth->setVerbose(true);"
    },
    {
        "line": 57,
        "fullcodeline": "connect(m_auth, SIGNAL(requestChanged()), this, SLOT(onRequestChanged()));"
    },
    {
        "line": 59,
        "fullcodeline": "connect(m_auth, SIGNAL(finished(Auth::HelperExitStatus)), this, SLOT(onHelperFinished(Auth::HelperExitStatus)));"
    },
    {
        "line": 60,
        "fullcodeline": "connect(m_auth, SIGNAL(info(QString,Auth::Info)), this, SLOT(authInfo(QString,Auth::Info)));"
    },
    {
        "line": 61,
        "fullcodeline": "connect(m_auth, SIGNAL(error(QString,Auth::Error)), this, SLOT(authError(QString,Auth::Error)));"
    },
    {
        "line": 65,
        "fullcodeline": "args << QStringLiteral(\"%1/sddm-greeter\").arg(QStringLiteral(BIN_INSTALL_DIR));"
    },
    {
        "line": 66,
        "fullcodeline": "args << QStringLiteral(\"--socket\") << m_socket"
    },
    {
        "line": 71,
        "fullcodeline": "QProcessEnvironment sysenv = QProcessEnvironment::systemEnvironment();"
    },
    {
        "line": 73,
        "fullcodeline": "insertEnvironmentList({QStringLiteral(\"LANG\"), QStringLiteral(\"LANGUAGE\"),"
    },
    {
        "line": 83,
        "fullcodeline": "env.insert(QStringLiteral(\"PATH\"), mainConfig.Users.DefaultPath.get());"
    },
    {
        "line": 84,
        "fullcodeline": "env.insert(QStringLiteral(\"DISPLAY\"), m_display->name());"
    },
    {
        "line": 85,
        "fullcodeline": "env.insert(QStringLiteral(\"XAUTHORITY\"), m_authPath);"
    },
    {
        "line": 86,
        "fullcodeline": "env.insert(QStringLiteral(\"XCURSOR_THEME\"), mainConfig.Theme.CursorTheme.get());"
    },
    {
        "line": 87,
        "fullcodeline": "env.insert(QStringLiteral(\"XDG_SEAT\"), m_display->seat()->name());"
    },
    {
        "line": 88,
        "fullcodeline": "env.insert(QStringLiteral(\"XDG_SEAT_PATH\"), daemonApp->displayManager()->seatPath(m_display->seat()->name()));"
    },
    {
        "line": 89,
        "fullcodeline": "env.insert(QStringLiteral(\"XDG_SESSION_PATH\"), daemonApp->displayManager()->sessionPath(QStringLiteral(\"Session%1\").arg(daemonApp->newSessionId())));"
    },
    {
        "line": 90,
        "fullcodeline": "env.insert(QStringLiteral(\"XDG_VTNR\"), QString::number(m_display->terminalId()));"
    },
    {
        "line": 91,
        "fullcodeline": "env.insert(QStringLiteral(\"XDG_SESSION_CLASS\"), QStringLiteral(\"greeter\"));"
    },
    {
        "line": 92,
        "fullcodeline": "env.insert(QStringLiteral(\"XDG_SESSION_TYPE\"), m_display->sessionType());"
    },
    {
        "line": 93,
        "fullcodeline": "m_auth->insertEnvironment(env);"
    },
    {
        "line": 96,
        "fullcodeline": "qDebug() << \"Greeter starting...\";"
    },
    {
        "line": 99,
        "fullcodeline": "m_auth->setUser(QStringLiteral(\"sddm\"));"
    },
    {
        "line": 100,
        "fullcodeline": "m_auth->setGreeter(true);"
    },
    {
        "line": 101,
        "fullcodeline": "m_auth->setSession(args.join(QLatin1Char(' ')));"
    },
    {
        "line": 102,
        "fullcodeline": "m_auth->start();"
    },
    {
        "line": 29,
        "fullcodeline": "args << QStringLiteral(\"--test-mode\");"
    },
    {
        "line": 31,
        "fullcodeline": "<< QStringLiteral(\"--theme\") << m_theme;"
    },
    {
        "line": 36,
        "fullcodeline": "qCritical() << \"Greeter failed to launch.\";"
    },
    {
        "line": 42,
        "fullcodeline": "qCritical() << \"Failed to start greeter.\";"
    },
    {
        "line": 67,
        "fullcodeline": "<< QStringLiteral(\"--theme\") << m_theme;"
    },
    {
        "line": 74,
        "fullcodeline": "QStringLiteral(\"LC_CTYPE\"), QStringLiteral(\"LC_NUMERIC\"), QStringLiteral(\"LC_TIME\"), QStringLiteral(\"LC_COLLATE\"),"
    },
    {
        "line": 75,
        "fullcodeline": "QStringLiteral(\"LC_MONETARY\"), QStringLiteral(\"LC_MESSAGES\"), QStringLiteral(\"LC_PAPER\"), QStringLiteral(\"LC_NAME\"),"
    },
    {
        "line": 76,
        "fullcodeline": "QStringLiteral(\"LC_ADDRESS\"), QStringLiteral(\"LC_TELEPHONE\"), QStringLiteral(\"LC_MEASUREMENT\"), QStringLiteral(\"LC_IDENTIFICATION\"),"
    },
    {
        "line": 77,
        "fullcodeline": "QStringLiteral(\"LD_LIBRARY_PATH\"),"
    },
    {
        "line": 78,
        "fullcodeline": "QStringLiteral(\"QML2_IMPORT_PATH\"),"
    },
    {
        "line": 79,
        "fullcodeline": "QStringLiteral(\"QT_PLUGIN_PATH\"),"
    },
    {
        "line": 80,
        "fullcodeline": "QStringLiteral(\"XDG_DATA_DIRS\")"
    }
]