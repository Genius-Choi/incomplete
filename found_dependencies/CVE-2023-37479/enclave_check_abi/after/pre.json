[
    {
        "line": 3,
        "fullcodeline": "double retval = NAN;"
    },
    {
        "line": 4,
        "fullcodeline": "oe_result_t result = OE_UNEXPECTED;"
    },
    {
        "line": 5,
        "fullcodeline": "abi_state_t before_ocall_state = {};"
    },
    {
        "line": 6,
        "fullcodeline": "abi_state_t after_ocall_state = {};"
    },
    {
        "line": 28,
        "fullcodeline": "static const size_t abi_fcn_id_host_check_abi = 0;"
    },
    {
        "line": 29,
        "fullcodeline": "const flat_ocall_args_t args_template = {"
    },
    {
        "line": 42,
        "fullcodeline": "flat_ocall_args_t* args = NULL;"
    },
    {
        "line": 45,
        "fullcodeline": "uint64_t flags = 0xffffffff;"
    },
    {
        "line": 60,
        "fullcodeline": "args = (flat_ocall_args_t*)oe_allocate_ocall_buffer(sizeof(args_template));"
    },
    {
        "line": 67,
        "fullcodeline": "memcpy(args, &args_template, sizeof(args_template));"
    },
    {
        "line": 68,
        "fullcodeline": "args->host_function_args.input_buffer = &args->check_abi_args;"
    },
    {
        "line": 69,
        "fullcodeline": "args->host_function_args.output_buffer = &args->check_abi_args;"
    },
    {
        "line": 72,
        "fullcodeline": "set_test_abi_state();"
    },
    {
        "line": 73,
        "fullcodeline": "read_abi_state(&before_ocall_state);"
    },
    {
        "line": 76,
        "fullcodeline": "result = oe_ocall(OE_OCALL_CALL_HOST_FUNCTION, (uint64_t)args, NULL);"
    },
    {
        "line": 79,
        "fullcodeline": "read_abi_state(&after_ocall_state);"
    },
    {
        "line": 80,
        "fullcodeline": "reset_test_abi_state();"
    },
    {
        "line": 102,
        "fullcodeline": "retval = args->check_abi_args._retval;"
    },
    {
        "line": 56,
        "fullcodeline": "if (flags & 0xffff0400)"
    },
    {
        "line": 61,
        "fullcodeline": "if (!args)"
    },
    {
        "line": 83,
        "fullcodeline": "if (result != OE_OK)"
    },
    {
        "line": 87,
        "fullcodeline": "if (args->host_function_args.result != OE_OK)"
    },
    {
        "line": 90,
        "fullcodeline": "if (args->host_function_args.output_bytes_written !="
    },
    {
        "line": 95,
        "fullcodeline": "if (args->check_abi_args._retval != EXPECTED_CHECK_ABI_RETURN_VALUE)"
    },
    {
        "line": 99,
        "fullcodeline": "if (!is_same_abi_state(&before_ocall_state, &after_ocall_state))"
    },
    {
        "line": 30,
        "fullcodeline": "{.function_id = abi_fcn_id_host_check_abi,"
    },
    {
        "line": 37,
        "fullcodeline": "{._result = OE_UNEXPECTED,"
    },
    {
        "line": 91,
        "fullcodeline": "sizeof(args_template.check_abi_args))"
    },
    {
        "line": 31,
        "fullcodeline": ".input_buffer = NULL,"
    },
    {
        "line": 32,
        "fullcodeline": ".input_buffer_size = sizeof(args_template.check_abi_args),"
    },
    {
        "line": 33,
        "fullcodeline": ".output_buffer = NULL,"
    },
    {
        "line": 34,
        "fullcodeline": ".output_buffer_size = sizeof(args_template.check_abi_args),"
    },
    {
        "line": 35,
        "fullcodeline": ".output_bytes_written = 0,"
    },
    {
        "line": 36,
        "fullcodeline": ".result = OE_UNEXPECTED},"
    },
    {
        "line": 38,
        "fullcodeline": ".deepcopy_out_buffer = NULL,"
    },
    {
        "line": 39,
        "fullcodeline": ".deepcopy_out_buffer_size = 0,"
    },
    {
        "line": 40,
        "fullcodeline": "._retval = 0}};"
    }
]