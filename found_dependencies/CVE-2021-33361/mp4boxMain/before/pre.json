[
    {
        "line": 4,
        "fullcodeline": "const char *gpac_profile = \"0\";"
    },
    {
        "line": 5,
        "fullcodeline": "GF_Err e = GF_OK;"
    },
    {
        "line": 38,
        "fullcodeline": "gf_sys_init(mem_track, gpac_profile);"
    },
    {
        "line": 47,
        "fullcodeline": "helpout = stdout;"
    },
    {
        "line": 49,
        "fullcodeline": "i = mp4box_parse_args(argc, argv);"
    },
    {
        "line": 112,
        "fullcodeline": "GF_LOG_Level level = verbose ? GF_LOG_DEBUG : GF_LOG_INFO;"
    },
    {
        "line": 113,
        "fullcodeline": "gf_log_set_tool_level(GF_LOG_CONTAINER, level);"
    },
    {
        "line": 114,
        "fullcodeline": "gf_log_set_tool_level(GF_LOG_SCENE, level);"
    },
    {
        "line": 115,
        "fullcodeline": "gf_log_set_tool_level(GF_LOG_PARSER, level);"
    },
    {
        "line": 116,
        "fullcodeline": "gf_log_set_tool_level(GF_LOG_AUTHOR, level);"
    },
    {
        "line": 117,
        "fullcodeline": "gf_log_set_tool_level(GF_LOG_CODING, level);"
    },
    {
        "line": 118,
        "fullcodeline": "gf_log_set_tool_level(GF_LOG_DASH, level);"
    },
    {
        "line": 124,
        "fullcodeline": "e = gf_sys_set_args(argc, (const char **) argv);"
    },
    {
        "line": 422,
        "fullcodeline": "char *szExt = gf_file_ext_start(outfile);"
    },
    {
        "line": 559,
        "fullcodeline": "e = do_meta_act();"
    },
    {
        "line": 576,
        "fullcodeline": "e = do_tsel_act();"
    },
    {
        "line": 671,
        "fullcodeline": "e = do_track_act();"
    },
    {
        "line": 812,
        "fullcodeline": "Bool is_inplace = gf_isom_is_inplace_rewrite(file);"
    },
    {
        "line": 12,
        "fullcodeline": "for (i = 1; i < (u32) argc ; i++) {"
    },
    {
        "line": 39,
        "fullcodeline": "if (argc < 2) {"
    },
    {
        "line": 60,
        "fullcodeline": "if (!dash_duration && interleaving_time && do_frag)"
    },
    {
        "line": 65,
        "fullcodeline": "if (import_flags & GF_IMPORT_FORCE_MPEG4)"
    },
    {
        "line": 68,
        "fullcodeline": "if (!inName && dump_std)"
    },
    {
        "line": 71,
        "fullcodeline": "if (!dash_duration && cprt)"
    },
    {
        "line": 74,
        "fullcodeline": "if (!inName) {"
    },
    {
        "line": 88,
        "fullcodeline": "if (!interleaving_time) {"
    },
    {
        "line": 100,
        "fullcodeline": "if (dump_std==2) {"
    },
    {
        "line": 150,
        "fullcodeline": "if (do_wget != NULL) {"
    },
    {
        "line": 172,
        "fullcodeline": "if (do_saf && !encode) {"
    },
    {
        "line": 188,
        "fullcodeline": "if (dump_mode == GF_SM_DUMP_SVG) {"
    },
    {
        "line": 198,
        "fullcodeline": "if (nb_add || nb_cat) {"
    },
    {
        "line": 252,
        "fullcodeline": "if (split_duration || split_size || split_range_str) {"
    },
    {
        "line": 413,
        "fullcodeline": "if (file && keep_utc) {"
    },
    {
        "line": 456,
        "fullcodeline": "if (dump_mode != GF_SM_DUMP_NONE) {"
    },
    {
        "line": 467,
        "fullcodeline": "if (!do_hint && print_sdp) dump_isom_sdp(file, dump_std ? NULL : (outName ? outName : outfile), outName ? GF_TRUE : GF_FALSE);"
    },
    {
        "line": 486,
        "fullcodeline": "if ((dump_ttxt || dump_srt) && trackID) {"
    },
    {
        "line": 534,
        "fullcodeline": "if (split_duration || split_size || split_range_str) {"
    },
    {
        "line": 604,
        "fullcodeline": "if (timescale && (timescale != gf_isom_get_timescale(file))) {"
    },
    {
        "line": 609,
        "fullcodeline": "if (!encode) {"
    },
    {
        "line": 684,
        "fullcodeline": "if (chap_file || chap_file_qt) {"
    },
    {
        "line": 704,
        "fullcodeline": "for (i=0; i<nb_alt_brand_add; i++) {"
    },
    {
        "line": 708,
        "fullcodeline": "for (i=0; i<nb_alt_brand_rem; i++) {"
    },
    {
        "line": 892,
        "fullcodeline": "M4_LOG(GF_LOG_ERROR, (\"\\n\\tError: %s\\n\", gf_error_to_string(e)));"
    },
    {
        "line": 893,
        "fullcodeline": "return mp4box_cleanup(1);"
    },
    {
        "line": 55,
        "fullcodeline": "int ret = live_session(argc, argv);"
    },
    {
        "line": 61,
        "fullcodeline": "interleaving_time /= 1000;"
    },
    {
        "line": 63,
        "fullcodeline": "if (do_mpd_conv) inName = do_mpd_conv;"
    },
    {
        "line": 66,
        "fullcodeline": "hint_flags |= GP_RTP_PCK_FORCE_MPEG4;"
    },
    {
        "line": 69,
        "fullcodeline": "inName = \"std\";"
    },
    {
        "line": 72,
        "fullcodeline": "open_edit = GF_TRUE;"
    },
    {
        "line": 82,
        "fullcodeline": "if (!strcmp(inName, \"std\")) dump_std = 2;"
    },
    {
        "line": 83,
        "fullcodeline": "if (!strcmp(inName, \"stdb\")) {"
    },
    {
        "line": 84,
        "fullcodeline": "inName = \"std\";"
    },
    {
        "line": 85,
        "fullcodeline": "dump_std = 1;"
    },
    {
        "line": 98,
        "fullcodeline": "outName = \"std\";"
    },
    {
        "line": 151,
        "fullcodeline": "e = gf_dm_wget(do_wget, inName, 0, 0, NULL);"
    },
    {
        "line": 168,
        "fullcodeline": "if (dash_duration && !nb_dash_inputs) {"
    },
    {
        "line": 193,
        "fullcodeline": "if (import_subtitle && !trackID)"
    },
    {
        "line": 199,
        "fullcodeline": "u32 res = do_add_cat(argc, argv);"
    },
    {
        "line": 263,
        "fullcodeline": "if (!file && !do_hash) {"
    },
    {
        "line": 264,
        "fullcodeline": "FILE *st = gf_fopen(inName, \"rb\");"
    },
    {
        "line": 265,
        "fullcodeline": "Bool file_exists = 0;"
    },
    {
        "line": 409,
        "fullcodeline": "e = parse_high_dynamc_range_xml_desc(file, high_dynamc_range_filename);"
    },
    {
        "line": 414,
        "fullcodeline": "gf_isom_keep_utc_times(file, 1);"
    },
    {
        "line": 417,
        "fullcodeline": "if ( gf_strlcpy(outfile, outName ? outName : inName, sizeof(outfile)) >= sizeof(outfile) ) {"
    },
    {
        "line": 418,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_CORE, (\"Filename too long (limit is %d)\\n\", GF_MAX_PATH));"
    },
    {
        "line": 439,
        "fullcodeline": "if (!open_edit && track_dump_type && !gf_isom_probe_file(inName)) {"
    },
    {
        "line": 440,
        "fullcodeline": "e = do_export_tracks_non_isobmf();"
    },
    {
        "line": 445,
        "fullcodeline": "e = do_remux_file();"
    },
    {
        "line": 457,
        "fullcodeline": "e = dump_isom_scene(inName, dump_std ? NULL : (outName ? outName : outfile), outName ? GF_TRUE : GF_FALSE, dump_mode, do_scene_log, no_odf_conf);"
    },
    {
        "line": 463,
        "fullcodeline": "if (stat_level) dump_isom_scene_stats(inName, dump_std ? NULL : (outName ? outName : outfile), outName ? GF_TRUE : GF_FALSE, stat_level);"
    },
    {
        "line": 482,
        "fullcodeline": "e = dump_isom_xml(file, dump_std ? NULL : (outName ? outName : outfile), outName ? GF_TRUE : GF_FALSE, (dump_isom==2) ? GF_TRUE : GF_FALSE, merge_vtt_cues, use_init_seg ? GF_TRUE : GF_FALSE, (dump_isom==3) ? GF_TRUE : GF_FALSE);"
    },
    {
        "line": 485,
        "fullcodeline": "if (dump_cr) dump_isom_ismacryp(file, dump_std ? NULL : (outName ? outName : outfile), outName ? GF_TRUE : GF_FALSE);"
    },
    {
        "line": 503,
        "fullcodeline": "if (dump_rtp) dump_isom_rtp(file, dump_std ? NULL : (outName ? outName : outfile), outName ? GF_TRUE : GF_FALSE);"
    },
    {
        "line": 508,
        "fullcodeline": "if (dump_timestamps) dump_isom_timestamps(file, dump_std ? NULL : (outName ? outName : outfile), outName ? GF_TRUE : GF_FALSE, dump_timestamps);"
    },
    {
        "line": 509,
        "fullcodeline": "if (dump_nal) dump_isom_nal(file, dump_nal, dump_std ? NULL : (outName ? outName : outfile), outName ? GF_TRUE : GF_FALSE, dump_nal_type);"
    },
    {
        "line": 510,
        "fullcodeline": "if (dump_saps) dump_isom_saps(file, dump_saps, dump_saps_mode, dump_std ? NULL : (outName ? outName : outfile), outName ? GF_TRUE : GF_FALSE);"
    },
    {
        "line": 513,
        "fullcodeline": "e = hash_file(inName, dump_std);"
    },
    {
        "line": 518,
        "fullcodeline": "e = xml_bs_to_bin(inName, outName, dump_std);"
    },
    {
        "line": 523,
        "fullcodeline": "if (dump_chunk) dump_isom_chunks(file, dump_std ? NULL : (outName ? outName : outfile), outName ? GF_TRUE : GF_FALSE);"
    },
    {
        "line": 524,
        "fullcodeline": "if (dump_cart) dump_isom_cover_art(file, dump_std ? NULL : (outName ? outName : outfile), outName ? GF_TRUE : GF_FALSE);"
    },
    {
        "line": 525,
        "fullcodeline": "if (dump_chap) dump_isom_chapters(file, dump_std ? NULL : (outName ? outName : outfile), outName ? GF_TRUE : GF_FALSE, dump_chap);"
    },
    {
        "line": 526,
        "fullcodeline": "if (dump_udta_type) dump_isom_udta(file, dump_std ? NULL : (outName ? outName : outfile), outName ? GF_TRUE : GF_FALSE, dump_udta_type, dump_udta_track);"
    },
    {
        "line": 529,
        "fullcodeline": "e = do_dump_iod();"
    },
    {
        "line": 535,
        "fullcodeline": "split_isomedia_file(file, split_duration, split_size, inName, interleaving_time, split_start, adjust_split_end, outName, seg_at_rap, split_range_str, fs_dump_flags);"
    },
    {
        "line": 538,
        "fullcodeline": "open_edit = GF_FALSE;"
    },
    {
        "line": 539,
        "fullcodeline": "do_save = GF_FALSE;"
    },
    {
        "line": 545,
        "fullcodeline": "e = do_export_tracks();"
    },
    {
        "line": 562,
        "fullcodeline": "if (!open_edit && !do_save) {"
    },
    {
        "line": 570,
        "fullcodeline": "e = gf_isom_reset_switch_parameters(file);"
    },
    {
        "line": 581,
        "fullcodeline": "remove_systems_tracks(file);"
    },
    {
        "line": 587,
        "fullcodeline": "gf_isom_remove_root_od(file);"
    },
    {
        "line": 599,
        "fullcodeline": "gf_isom_sdp_clean(file);"
    },
    {
        "line": 605,
        "fullcodeline": "gf_isom_set_timescale(file, timescale);"
    },
    {
        "line": 675,
        "fullcodeline": "e = do_itunes_tag();"
    },
    {
        "line": 680,
        "fullcodeline": "e = gf_isom_set_copyright(file, \"und\", cprt);"
    },
    {
        "line": 686,
        "fullcodeline": "Bool chap_qt = GF_FALSE;"
    },
    {
        "line": 691,
        "fullcodeline": "e = gf_media_import_chapters(file, chap_file, import_fps, chap_qt);"
    },
    {
        "line": 701,
        "fullcodeline": "gf_isom_set_brand_info(file, major_brand, minor_version);"
    },
    {
        "line": 705,
        "fullcodeline": "gf_isom_modify_alternate_brand(file, brand_add[i], GF_TRUE);"
    },
    {
        "line": 709,
        "fullcodeline": "gf_isom_modify_alternate_brand(file, brand_rem[i], GF_FALSE);"
    },
    {
        "line": 713,
        "fullcodeline": "e = gf_isom_apply_box_patch(file, box_patch_trackID, box_patch_filename, GF_FALSE);"
    },
    {
        "line": 762,
        "fullcodeline": "M4_LOG(GF_LOG_INFO, (\"Fragmenting file (%.3f seconds fragments)\\n\", interleaving_time));"
    },
    {
        "line": 763,
        "fullcodeline": "e = gf_media_fragment_file(file, outfile, interleaving_time, use_mfra);"
    },
    {
        "line": 782,
        "fullcodeline": "MTUSize -= 12;"
    },
    {
        "line": 783,
        "fullcodeline": "e = HintFile(file, MTUSize, max_ptime, rtp_rate, hint_flags, HintCopy, hint_interleave, regular_iod, single_group, hint_no_offset);"
    },
    {
        "line": 795,
        "fullcodeline": "gf_isom_force_64bit_chunk_offset(file, GF_TRUE);"
    },
    {
        "line": 798,
        "fullcodeline": "gf_isom_enable_compression(file, GF_ISOM_COMP_ALL, (compress_moov==2) ? GF_ISOM_COMP_WRAP_FTYPE : 0);"
    },
    {
        "line": 801,
        "fullcodeline": "gf_isom_disable_inplace_rewrite(file);"
    },
    {
        "line": 804,
        "fullcodeline": "gf_isom_set_inplace_padding(file, moov_pading);"
    },
    {
        "line": 807,
        "fullcodeline": "gf_isom_set_final_name(file, outfile);"
    },
    {
        "line": 817,
        "fullcodeline": "e = gf_isom_set_storage_mode(file, GF_ISOM_STORE_TIGHT);"
    },
    {
        "line": 855,
        "fullcodeline": "e = gf_isom_close(file);"
    },
    {
        "line": 856,
        "fullcodeline": "file = NULL;"
    },
    {
        "line": 876,
        "fullcodeline": "M4_LOG(GF_LOG_ERROR, (\"Error: %s\\n\", gf_error_to_string(e)));"
    },
    {
        "line": 13,
        "fullcodeline": "if (!strcmp(argv[i], \"-mem-track\") || !strcmp(argv[i], \"-mem-track-stack\")) {"
    },
    {
        "line": 41,
        "fullcodeline": "M4_LOG(GF_LOG_INFO, (\"MP4Box - GPAC version %s\\n\""
    },
    {
        "line": 51,
        "fullcodeline": "return mp4box_cleanup(i - 1);"
    },
    {
        "line": 56,
        "fullcodeline": "return mp4box_cleanup(ret);"
    },
    {
        "line": 80,
        "fullcodeline": "return mp4box_cleanup(1);"
    },
    {
        "line": 104,
        "fullcodeline": "if ( freopen(NULL, \"wb\", stdout) == NULL)"
    },
    {
        "line": 126,
        "fullcodeline": "M4_LOG(GF_LOG_ERROR, (\"Error assigning libgpac arguments: %s\\n\", gf_error_to_string(e) ));"
    },
    {
        "line": 127,
        "fullcodeline": "return mp4box_cleanup(1);"
    },
    {
        "line": 131,
        "fullcodeline": "return do_raw_cat();"
    },
    {
        "line": 145,
        "fullcodeline": "e = rip_mpd(inName, outName);"
    },
    {
        "line": 146,
        "fullcodeline": "return mp4box_cleanup(e ? 1 : 0);"
    },
    {
        "line": 152,
        "fullcodeline": "if (e != GF_OK) {"
    },
    {
        "line": 156,
        "fullcodeline": "return mp4box_cleanup(0);"
    },
    {
        "line": 161,
        "fullcodeline": "return do_write_udp();"
    },
    {
        "line": 165,
        "fullcodeline": "return convert_mpd();"
    },
    {
        "line": 169,
        "fullcodeline": "dash_inputs = set_dash_input(dash_inputs, inName, &nb_dash_inputs);"
    },
    {
        "line": 173,
        "fullcodeline": "switch (get_file_type_by_ext(inName)) {"
    },
    {
        "line": 194,
        "fullcodeline": "return do_import_sub();"
    },
    {
        "line": 253,
        "fullcodeline": "if (force_new==2) {"
    },
    {
        "line": 271,
        "fullcodeline": "switch (get_file_type_by_ext(inName)) {"
    },
    {
        "line": 419,
        "fullcodeline": "return mp4box_cleanup(1);"
    },
    {
        "line": 470,
        "fullcodeline": "fprintf(stdout, \"%d\\n\", gf_isom_get_track_count(file));"
    },
    {
        "line": 473,
        "fullcodeline": "if (!file) {"
    },
    {
        "line": 488,
        "fullcodeline": "if (trackID == (u32)-1) {"
    },
    {
        "line": 584,
        "fullcodeline": "if (conv_type < GF_ISOM_CONV_TYPE_ISMA_EX) conv_type = 0;"
    },
    {
        "line": 592,
        "fullcodeline": "for (i=0; i<gf_isom_get_track_count(file); i++) {"
    },
    {
        "line": 610,
        "fullcodeline": "if (!file) {"
    },
    {
        "line": 644,
        "fullcodeline": "if (conv_type == GF_ISOM_CONV_TYPE_3GPP) {"
    },
    {
        "line": 650,
        "fullcodeline": "if (conv_type == GF_ISOM_CONV_TYPE_PSP) {"
    },
    {
        "line": 656,
        "fullcodeline": "if (conv_type == GF_ISOM_CONV_TYPE_MOV) {"
    },
    {
        "line": 728,
        "fullcodeline": "if (crypt == 1) {"
    },
    {
        "line": 760,
        "fullcodeline": "if (!interleaving_time) interleaving_time = DEFAULT_INTERLEAVING_IN_SEC;"
    },
    {
        "line": 872,
        "fullcodeline": "gf_isom_delete(file);"
    },
    {
        "line": 17,
        "fullcodeline": "M4_LOG(GF_LOG_WARNING, (\"WARNING - GPAC not compiled with Memory Tracker - ignoring \\\"%s\\\"\\n\", argv[i]));"
    },
    {
        "line": 91,
        "fullcodeline": "interleaving_time = dash_duration;"
    },
    {
        "line": 177,
        "fullcodeline": "encode = GF_TRUE;"
    },
    {
        "line": 189,
        "fullcodeline": "if (strstr(inName, \".srt\") || strstr(inName, \".ttxt\")) import_subtitle = 2;"
    },
    {
        "line": 254,
        "fullcodeline": "do_flat = 3;"
    },
    {
        "line": 255,
        "fullcodeline": "force_new = 0;"
    },
    {
        "line": 268,
        "fullcodeline": "file_exists = 1;"
    },
    {
        "line": 273,
        "fullcodeline": "omode =  (u8) (force_new ? GF_ISOM_WRITE_EDIT : (open_edit ? GF_ISOM_OPEN_EDIT : ( ((dump_isom>0) || print_info) ? GF_ISOM_OPEN_READ_DUMP : GF_ISOM_OPEN_READ) ) );"
    },
    {
        "line": 425,
        "fullcodeline": "if (!stricmp(szExt, \".3gp\") || !stricmp(szExt, \".3gpp\") || !stricmp(szExt, \".3g2\"))"
    },
    {
        "line": 426,
        "fullcodeline": "conv_type = GF_ISOM_CONV_TYPE_3GPP;"
    },
    {
        "line": 474,
        "fullcodeline": "M4_LOG(GF_LOG_ERROR, (\"Cannot print info on a non ISOM file (%s)\\n\", inName));"
    },
    {
        "line": 615,
        "fullcodeline": "strcpy(outfile, outName);"
    },
    {
        "line": 637,
        "fullcodeline": "if ((conv_type == GF_ISOM_CONV_TYPE_ISMA) || (conv_type == GF_ISOM_CONV_TYPE_ISMA_EX)) {"
    },
    {
        "line": 638,
        "fullcodeline": "M4_LOG(GF_LOG_INFO, (\"Converting to ISMA Audio-Video MP4 file\\n\"));"
    },
    {
        "line": 640,
        "fullcodeline": "e = gf_media_make_isma(file, crypt ? 1 : 0, GF_FALSE, (conv_type==GF_ISOM_CONV_TYPE_ISMA_EX) ? 1 : 0);"
    },
    {
        "line": 645,
        "fullcodeline": "M4_LOG(GF_LOG_INFO, (\"Converting to 3GP file\\n\"));"
    },
    {
        "line": 646,
        "fullcodeline": "e = gf_media_make_3gpp(file);"
    },
    {
        "line": 651,
        "fullcodeline": "M4_LOG(GF_LOG_INFO, (\"Converting to PSP file\\n\"));"
    },
    {
        "line": 652,
        "fullcodeline": "e = gf_media_make_psp(file);"
    },
    {
        "line": 657,
        "fullcodeline": "e = gf_media_check_qt_prores(file);"
    },
    {
        "line": 688,
        "fullcodeline": "chap_file = chap_file_qt;"
    },
    {
        "line": 689,
        "fullcodeline": "chap_qt = GF_TRUE;"
    },
    {
        "line": 715,
        "fullcodeline": "M4_LOG(GF_LOG_ERROR, (\"Failed to apply box patch %s: %s\\n\", box_patch_filename, gf_error_to_string(e) ));"
    },
    {
        "line": 723,
        "fullcodeline": "if (!drm_file && (crypt==1) ) {"
    },
    {
        "line": 724,
        "fullcodeline": "M4_LOG(GF_LOG_ERROR, (\"Missing DRM file location - usage '-%s drm_file input_file\\n\", (crypt==1) ? \"crypt\" : \"decrypt\"));"
    },
    {
        "line": 725,
        "fullcodeline": "e = GF_BAD_PARAM;"
    },
    {
        "line": 744,
        "fullcodeline": "if (!do_frag && !do_hint && !full_interleave && !force_co64) {"
    },
    {
        "line": 745,
        "fullcodeline": "char szName[GF_MAX_PATH];"
    },
    {
        "line": 746,
        "fullcodeline": "strcpy(szName, gf_isom_get_filename(file) );"
    },
    {
        "line": 748,
        "fullcodeline": "file = NULL;"
    },
    {
        "line": 764,
        "fullcodeline": "if (e) M4_LOG(GF_LOG_ERROR, (\"Error while fragmenting file: %s\\n\", gf_error_to_string(e)));"
    },
    {
        "line": 765,
        "fullcodeline": "if (!e && !outName) {"
    },
    {
        "line": 781,
        "fullcodeline": "if (force_ocr) SetupClockReferences(file);"
    },
    {
        "line": 786,
        "fullcodeline": "if (print_sdp) dump_isom_sdp(file, dump_std ? NULL : (outName ? outName : outfile), outName ? GF_TRUE : GF_FALSE);"
    },
    {
        "line": 858,
        "fullcodeline": "if (!e && !outName && !encode && !force_new && !pack_file && !is_inplace) {"
    },
    {
        "line": 866,
        "fullcodeline": "e = gf_file_move(outfile, inName);"
    },
    {
        "line": 108,
        "fullcodeline": "return mp4box_cleanup(1);"
    },
    {
        "line": 135,
        "fullcodeline": "u64 top_size = do_size_top_boxes(inName, compress_top_boxes, size_top_box);"
    },
    {
        "line": 137,
        "fullcodeline": "return mp4box_cleanup(e ? 1 : 0);"
    },
    {
        "line": 153,
        "fullcodeline": "M4_LOG(GF_LOG_ERROR, (\"Cannot retrieve %s: %s\\n\", do_wget, gf_error_to_string(e) ));"
    },
    {
        "line": 154,
        "fullcodeline": "return mp4box_cleanup(1);"
    },
    {
        "line": 210,
        "fullcodeline": "e = EncodeFileChunk(inName, outName ? outName : inName, input_ctx, output_ctx);"
    },
    {
        "line": 248,
        "fullcodeline": "if (e) return mp4box_cleanup(1);"
    },
    {
        "line": 259,
        "fullcodeline": "open_edit = GF_TRUE;"
    },
    {
        "line": 281,
        "fullcodeline": "if (!crypt && use_init_seg) {"
    },
    {
        "line": 294,
        "fullcodeline": "if (!file)"
    },
    {
        "line": 304,
        "fullcodeline": "if (!file) {"
    },
    {
        "line": 335,
        "fullcodeline": "if (!open_edit && file_exists && !gf_isom_probe_file(inName) && track_dump_type) {"
    },
    {
        "line": 489,
        "fullcodeline": "for (j=0; j<gf_isom_get_track_count(file); j++) {"
    },
    {
        "line": 497,
        "fullcodeline": "dump_isom_timed_text(file, trackID, dump_std ? NULL : (outName ? outName : outfile), outName ? GF_TRUE : GF_FALSE,"
    },
    {
        "line": 549,
        "fullcodeline": "memset(&mdump, 0, sizeof(mdump));"
    },
    {
        "line": 550,
        "fullcodeline": "mdump.file = file;"
    },
    {
        "line": 551,
        "fullcodeline": "mdump.flags = GF_EXPORT_SAF;"
    },
    {
        "line": 552,
        "fullcodeline": "mdump.out_name = outfile;"
    },
    {
        "line": 553,
        "fullcodeline": "mdump.print_stats_graph = fs_dump_flags;"
    },
    {
        "line": 554,
        "fullcodeline": "e = gf_media_export(&mdump);"
    },
    {
        "line": 593,
        "fullcodeline": "if (gf_isom_get_media_type(file, i+1) == GF_ISOM_MEDIA_HINT) {"
    },
    {
        "line": 617,
        "fullcodeline": "const char *tmp_dir = gf_opts_get_key(\"core\", \"tmp\");"
    },
    {
        "line": 618,
        "fullcodeline": "char *rel_name = strrchr(inName, GF_PATH_SEPARATOR);"
    },
    {
        "line": 621,
        "fullcodeline": "strcpy(outfile, \"\");"
    },
    {
        "line": 627,
        "fullcodeline": "strcat(outfile, rel_name ? rel_name + 1 : inName);"
    },
    {
        "line": 668,
        "fullcodeline": "strcpy(outfile, outName);"
    },
    {
        "line": 808,
        "fullcodeline": "} else if (!encode && !force_new && !gf_isom_is_inplace_rewrite(file)) {"
    },
    {
        "line": 809,
        "fullcodeline": "gf_isom_set_final_name(file, outfile);"
    },
    {
        "line": 819,
        "fullcodeline": "e = gf_isom_set_storage_mode(file, (do_flat==1) ? GF_ISOM_STORE_FLAT : GF_ISOM_STORE_STREAMABLE);"
    },
    {
        "line": 859,
        "fullcodeline": "if (gf_file_exists(inName)) {"
    },
    {
        "line": 21,
        "fullcodeline": "else if (!strcmp(argv[i], \"-p\")) {"
    },
    {
        "line": 139,
        "fullcodeline": "e = do_compress_top_boxes(inName, outName);"
    },
    {
        "line": 140,
        "fullcodeline": "return mp4box_cleanup(e ? 1 : 0);"
    },
    {
        "line": 206,
        "fullcodeline": "if (!inName) {"
    },
    {
        "line": 277,
        "fullcodeline": "omode = GF_ISOM_OPEN_READ;"
    },
    {
        "line": 282,
        "fullcodeline": "file = gf_isom_open(use_init_seg, GF_ISOM_OPEN_READ_DUMP, NULL);"
    },
    {
        "line": 295,
        "fullcodeline": "file = gf_isom_open(inName, omode, NULL);"
    },
    {
        "line": 297,
        "fullcodeline": "if (!file && (gf_isom_last_error(NULL) == GF_ISOM_INCOMPLETE_FILE) && !open_edit) {"
    },
    {
        "line": 299,
        "fullcodeline": "gf_isom_open_progressive(inName, 0, 0, GF_FALSE, &file, &missing_bytes);"
    },
    {
        "line": 316,
        "fullcodeline": "gf_isom_freeze_order(file);"
    },
    {
        "line": 329,
        "fullcodeline": "if ((dump_mode==GF_SM_DUMP_LASER) || (dump_mode==GF_SM_DUMP_SVG)) {"
    },
    {
        "line": 490,
        "fullcodeline": "trackID = gf_isom_get_track_id(file, j+1);"
    },
    {
        "line": 491,
        "fullcodeline": "dump_isom_timed_text(file, trackID, dump_std ? NULL : (outName ? outName : outfile), outName ? GF_TRUE : GF_FALSE,"
    },
    {
        "line": 594,
        "fullcodeline": "M4_LOG(GF_LOG_INFO, (\"Removing hint track ID %d\\n\", gf_isom_get_track_id(file, i+1)));"
    },
    {
        "line": 595,
        "fullcodeline": "gf_isom_remove_track(file, i+1);"
    },
    {
        "line": 596,
        "fullcodeline": "i--;"
    },
    {
        "line": 619,
        "fullcodeline": "if (!rel_name) rel_name = strrchr(inName, '/');"
    },
    {
        "line": 626,
        "fullcodeline": "if (!pack_file) strcat(outfile, \"out_\");"
    },
    {
        "line": 660,
        "fullcodeline": "if (interleaving_time) interleaving_time = 0.5;"
    },
    {
        "line": 730,
        "fullcodeline": "e = gf_crypt_fragment(file, drm_file, outfile, inName, fs_dump_flags);"
    },
    {
        "line": 750,
        "fullcodeline": "e = gf_file_move(outfile, szName);"
    },
    {
        "line": 766,
        "fullcodeline": "if (gf_file_exists(inName) && gf_file_delete(inName)) {"
    },
    {
        "line": 868,
        "fullcodeline": "M4_LOG(GF_LOG_ERROR, (\"Error renaming file %s to %s\\n\", outfile, inName));"
    },
    {
        "line": 92,
        "fullcodeline": "else if (!do_flat && !(split_duration || split_size || split_range_str)) {"
    },
    {
        "line": 93,
        "fullcodeline": "interleaving_time = DEFAULT_INTERLEAVING_IN_SEC;"
    },
    {
        "line": 305,
        "fullcodeline": "if (open_edit && nb_meta_act) {"
    },
    {
        "line": 310,
        "fullcodeline": "if (!file) {"
    },
    {
        "line": 427,
        "fullcodeline": "else if (!stricmp(szExt, \".m4a\") || !stricmp(szExt, \".m4v\"))"
    },
    {
        "line": 428,
        "fullcodeline": "conv_type = GF_ISOM_CONV_TYPE_IPOD;"
    },
    {
        "line": 476,
        "fullcodeline": "if (info_track_id) DumpTrackInfo(file, info_track_id, 1, (print_info==2) ? GF_TRUE : GF_FALSE, GF_FALSE);"
    },
    {
        "line": 623,
        "fullcodeline": "strcpy(outfile, tmp_dir);"
    },
    {
        "line": 630,
        "fullcodeline": "strcpy(outfile, rel_name ? rel_name + 1 : inName);"
    },
    {
        "line": 633,
        "fullcodeline": "strcat(outfile, \".m21\");"
    },
    {
        "line": 732,
        "fullcodeline": "e = gf_crypt_file(file, drm_file, outfile, interleaving_time, fs_dump_flags);"
    },
    {
        "line": 767,
        "fullcodeline": "M4_LOG(GF_LOG_INFO, (\"Error removing file %s\\n\", inName));"
    },
    {
        "line": 823,
        "fullcodeline": "else if (!is_inplace) {"
    },
    {
        "line": 860,
        "fullcodeline": "e = gf_file_delete(inName);"
    },
    {
        "line": 22,
        "fullcodeline": "if (i+1<(u32) argc)"
    },
    {
        "line": 208,
        "fullcodeline": "return mp4box_cleanup(1);"
    },
    {
        "line": 212,
        "fullcodeline": "M4_LOG(GF_LOG_ERROR, (\"Error encoding chunk file %s\\n\", gf_error_to_string(e)));"
    },
    {
        "line": 213,
        "fullcodeline": "return mp4box_cleanup(1);"
    },
    {
        "line": 221,
        "fullcodeline": "e = do_scene_encode();"
    },
    {
        "line": 279,
        "fullcodeline": "file = gf_isom_open(use_init_seg, GF_ISOM_OPEN_READ, NULL);"
    },
    {
        "line": 284,
        "fullcodeline": "e = gf_isom_open_segment(file, inName, 0, 0, 0);"
    },
    {
        "line": 306,
        "fullcodeline": "file = gf_isom_open(inName, GF_ISOM_WRITE_EDIT, NULL);"
    },
    {
        "line": 477,
        "fullcodeline": "else DumpMovieInfo(file);"
    },
    {
        "line": 631,
        "fullcodeline": "rel_name = strrchr(outfile, '.');"
    },
    {
        "line": 769,
        "fullcodeline": "else if (gf_file_move(outfile, inName)) {"
    },
    {
        "line": 824,
        "fullcodeline": "e = gf_isom_make_interleave(file, interleaving_time);"
    },
    {
        "line": 835,
        "fullcodeline": "} else if (encode || pack_file) {"
    },
    {
        "line": 862,
        "fullcodeline": "M4_LOG(GF_LOG_ERROR, (\"Error removing file %s\\n\", inName));"
    },
    {
        "line": 23,
        "fullcodeline": "gpac_profile = argv[i+1];"
    },
    {
        "line": 29,
        "fullcodeline": "else if (!strncmp(argv[i], \"-p=\", 3))"
    },
    {
        "line": 285,
        "fullcodeline": "if (e==GF_ISOM_INCOMPLETE_FILE) {"
    },
    {
        "line": 307,
        "fullcodeline": "if (!outName && file) outName = inName;"
    },
    {
        "line": 311,
        "fullcodeline": "M4_LOG(GF_LOG_ERROR, (\"Error opening file %s: %s\\n\", inName, gf_error_to_string(gf_isom_last_error(NULL))));"
    },
    {
        "line": 312,
        "fullcodeline": "return mp4box_cleanup(1);"
    },
    {
        "line": 338,
        "fullcodeline": "else if (!open_edit && file_exists /* && !gf_isom_probe_file(inName) */"
    },
    {
        "line": 340,
        "fullcodeline": "&& dump_mode == GF_SM_DUMP_NONE"
    },
    {
        "line": 624,
        "fullcodeline": "if (!strchr(\"\\\\/\", tmp_dir[strlen(tmp_dir)-1])) strcat(outfile, \"/\");"
    },
    {
        "line": 736,
        "fullcodeline": "e = gf_decrypt_fragment(file, drm_file, outfile, inName, fs_dump_flags);"
    },
    {
        "line": 836,
        "fullcodeline": "M4_LOG(GF_LOG_INFO, (\"Saving to %s: \", gf_isom_get_filename(file) ));"
    },
    {
        "line": 25,
        "fullcodeline": "M4_LOG(GF_LOG_ERROR, (\"Bad argument for -p, expecting profile name but no more args\\n\"));"
    },
    {
        "line": 30,
        "fullcodeline": "gpac_profile = argv[i]+3;"
    },
    {
        "line": 286,
        "fullcodeline": "M4_LOG(GF_LOG_WARNING, (\"Segment %s: %s\\n\", inName, gf_error_to_string(e) ));"
    },
    {
        "line": 429,
        "fullcodeline": "else if (!stricmp(szExt, \".psp\"))"
    },
    {
        "line": 430,
        "fullcodeline": "conv_type = GF_ISOM_CONV_TYPE_PSP;"
    },
    {
        "line": 738,
        "fullcodeline": "e = gf_decrypt_file(file, drm_file, outfile, interleaving_time, fs_dump_flags);"
    },
    {
        "line": 770,
        "fullcodeline": "M4_LOG(GF_LOG_INFO, (\"Error renaming file %s to %s\\n\", outfile, inName));"
    },
    {
        "line": 825,
        "fullcodeline": "if (!e && old_interleave) e = gf_isom_set_storage_mode(file, GF_ISOM_STORE_INTERLEAVED);"
    },
    {
        "line": 838,
        "fullcodeline": "M4_LOG(GF_LOG_INFO, (\"Saving %s: \", inName));"
    },
    {
        "line": 228,
        "fullcodeline": "char *fileName = gf_url_colon_suffix(pack_file);"
    },
    {
        "line": 241,
        "fullcodeline": "do_save = GF_TRUE;"
    },
    {
        "line": 242,
        "fullcodeline": "open_edit = GF_TRUE;"
    },
    {
        "line": 348,
        "fullcodeline": "file = gf_isom_open(\"ttxt_convert\", GF_ISOM_OPEN_WRITE, NULL);"
    },
    {
        "line": 349,
        "fullcodeline": "memset(&import, 0, sizeof(GF_MediaImporter));"
    },
    {
        "line": 350,
        "fullcodeline": "import.dest = file;"
    },
    {
        "line": 351,
        "fullcodeline": "import.in_name = inName;"
    },
    {
        "line": 352,
        "fullcodeline": "import.flags = GF_IMPORT_MPE_DEMUX;"
    },
    {
        "line": 353,
        "fullcodeline": "e = gf_media_import(&import);"
    },
    {
        "line": 229,
        "fullcodeline": "if (fileName && ((fileName - pack_file)==4)) {"
    },
    {
        "line": 240,
        "fullcodeline": "if (!outName) outName = inName;"
    },
    {
        "line": 396,
        "fullcodeline": "file = gf_isom_open(inName, GF_ISOM_WRITE_EDIT, NULL);"
    },
    {
        "line": 230,
        "fullcodeline": "fileName[0] = 0;"
    },
    {
        "line": 231,
        "fullcodeline": "file = package_file(fileName + 1, pack_file, pack_wgt);"
    },
    {
        "line": 288,
        "fullcodeline": "M4_LOG(GF_LOG_ERROR, (\"Error opening segment %s: %s\\n\", inName, gf_error_to_string(e) ));"
    },
    {
        "line": 290,
        "fullcodeline": "file = NULL;"
    },
    {
        "line": 397,
        "fullcodeline": "if (!outName && file) outName = inName;"
    },
    {
        "line": 431,
        "fullcodeline": "else if (!stricmp(szExt, \".mov\") || !stricmp(szExt, \".qt\"))"
    },
    {
        "line": 432,
        "fullcodeline": "conv_type = GF_ISOM_CONV_TYPE_MOV;"
    },
    {
        "line": 234,
        "fullcodeline": "file = package_file(pack_file, NULL, pack_wgt);"
    },
    {
        "line": 355,
        "fullcodeline": "M4_LOG(GF_LOG_ERROR, (\"Error importing %s: %s\\n\", inName, gf_error_to_string(e)));"
    },
    {
        "line": 358,
        "fullcodeline": "return mp4box_cleanup(1);"
    },
    {
        "line": 846,
        "fullcodeline": "} else if ((force_new==2) && interleaving_time) {"
    },
    {
        "line": 235,
        "fullcodeline": "if (!file) {"
    },
    {
        "line": 399,
        "fullcodeline": "M4_LOG(GF_LOG_ERROR, (\"Error %s file %s: %s\\n\", force_new ? \"creating\" : \"opening\", inName, gf_error_to_string(GF_URL_ERROR)));"
    },
    {
        "line": 400,
        "fullcodeline": "return mp4box_cleanup(1);"
    },
    {
        "line": 237,
        "fullcodeline": "return mp4box_cleanup(1);"
    },
    {
        "line": 402,
        "fullcodeline": "M4_LOG(GF_LOG_ERROR, (\"Cannot open %s - extension not supported\\n\", inName));"
    },
    {
        "line": 403,
        "fullcodeline": "return mp4box_cleanup(1);"
    },
    {
        "line": 848,
        "fullcodeline": "} else if (do_flat || !interleaving_time) {"
    },
    {
        "line": 851,
        "fullcodeline": "M4_LOG(GF_LOG_INFO, (\"%.3f secs Interleaving%s\\n\", interleaving_time, old_interleave ? \" - no drift control\" : \"\"));"
    },
    {
        "line": 383,
        "fullcodeline": "e = do_remux_file();"
    },
    {
        "line": 388,
        "fullcodeline": "M4_LOG(GF_LOG_ERROR, (\"Input %s is not an MP4 file, operation not allowed\\n\", inName));"
    },
    {
        "line": 389,
        "fullcodeline": "return mp4box_cleanup(1);"
    }
]