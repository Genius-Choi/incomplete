[
    {
        "line": 6,
        "fullcodeline": "int readby = ini.getReadBy ();"
    },
    {
        "line": 25,
        "fullcodeline": "ci = ini.getContainerBegin (),"
    },
    {
        "line": 26,
        "fullcodeline": "ce = ini.getContainerEnd ();"
    },
    {
        "line": 58,
        "fullcodeline": "ini.clean();"
    },
    {
        "line": 7,
        "fullcodeline": "if (!subindent.empty ())"
    },
    {
        "line": 17,
        "fullcodeline": "if (readby>=0 && readby < (int)sections.size ())"
    },
    {
        "line": 28,
        "fullcodeline": "for (;ci != ce; ++ci)"
    },
    {
        "line": 52,
        "fullcodeline": "if (readby>=0 && readby < (int) sections.size () && sections[readby].end_valid)"
    },
    {
        "line": 15,
        "fullcodeline": "if (ini.getComment ()[0])"
    },
    {
        "line": 16,
        "fullcodeline": "of << ini.getComment();"
    },
    {
        "line": 19,
        "fullcodeline": "asprintf (&out_buffer, sections[readby].begin.out.c_str (), ini.getName());"
    },
    {
        "line": 20,
        "fullcodeline": "of << indent << out_buffer << \"\\n\";"
    },
    {
        "line": 21,
        "fullcodeline": "free (out_buffer);"
    },
    {
        "line": 50,
        "fullcodeline": "if (ini.getEndComment ()[0])"
    },
    {
        "line": 51,
        "fullcodeline": "of << indent << ini.getEndComment();"
    },
    {
        "line": 54,
        "fullcodeline": "asprintf (&out_buffer, sections[readby].end.out.c_str (), ini.getName());"
    },
    {
        "line": 55,
        "fullcodeline": "of << indent << out_buffer << \"\\n\";"
    },
    {
        "line": 56,
        "fullcodeline": "free(out_buffer);"
    },
    {
        "line": 9,
        "fullcodeline": "for (int ii = 0; ii<depth - 1;ii++)"
    },
    {
        "line": 10,
        "fullcodeline": "indent = indent + subindent;"
    },
    {
        "line": 30,
        "fullcodeline": "if (ci->t () == SECTION)"
    },
    {
        "line": 12,
        "fullcodeline": "indent2 = indent + subindent;"
    },
    {
        "line": 32,
        "fullcodeline": "write_helper (ci->s (), of, depth + 1);"
    },
    {
        "line": 33,
        "fullcodeline": "ci->s ().clean();"
    },
    {
        "line": 37,
        "fullcodeline": "IniEntry&e = ci->e ();"
    },
    {
        "line": 46,
        "fullcodeline": "e.clean();"
    },
    {
        "line": 40,
        "fullcodeline": "if (e.getReadBy()>=0 && e.getReadBy() < (int)params.size ()) {"
    },
    {
        "line": 38,
        "fullcodeline": "if (e.getComment ()[0])"
    },
    {
        "line": 39,
        "fullcodeline": "of << e.getComment();"
    },
    {
        "line": 42,
        "fullcodeline": "asprintf (&out_buffer, params[e.getReadBy ()].line.out.c_str (), e.getName(), e.getValue());"
    },
    {
        "line": 43,
        "fullcodeline": "of << indent2 << out_buffer << \"\\n\";"
    },
    {
        "line": 44,
        "fullcodeline": "free(out_buffer);"
    }
]