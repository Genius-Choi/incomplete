[
    {
        "line": 2,
        "fullcodeline": "op->len = 1;"
    },
    {
        "line": 3,
        "fullcodeline": "op->op = buf[0];"
    },
    {
        "line": 8,
        "fullcodeline": "WasmOpDef *opdef = &opcodes[op->op];"
    },
    {
        "line": 4,
        "fullcodeline": "if (op->op > 0xbf) {"
    },
    {
        "line": 148,
        "fullcodeline": "st32 val = 0;"
    },
    {
        "line": 149,
        "fullcodeline": "size_t n = read_i32_leb128 (buf + 1, buf + buf_len, &val);"
    },
    {
        "line": 178,
        "fullcodeline": "ut32 val = 0;"
    },
    {
        "line": 179,
        "fullcodeline": "size_t n = read_u32_leb128 (buf + 1, buf + buf_len, &val);"
    },
    {
        "line": 187,
        "fullcodeline": "ut32 count = 0, *table = NULL, def = 0;"
    },
    {
        "line": 188,
        "fullcodeline": "size_t n = read_u32_leb128 (buf + 1, buf + buf_len, &count);"
    },
    {
        "line": 196,
        "fullcodeline": "op->len += n;"
    },
    {
        "line": 204,
        "fullcodeline": "n = read_u32_leb128 (buf + op->len, buf + buf_len, &def);"
    },
    {
        "line": 209,
        "fullcodeline": "snprintf (op->txt, R_ASM_BUFSIZE, \"%s %d \", opdef->txt, count);"
    },
    {
        "line": 224,
        "fullcodeline": "ut32 val = 0, reserved = 0;"
    },
    {
        "line": 225,
        "fullcodeline": "size_t n = read_u32_leb128 (buf + 1, buf + buf_len, &val);"
    },
    {
        "line": 227,
        "fullcodeline": "op->len += n;"
    },
    {
        "line": 228,
        "fullcodeline": "n = read_u32_leb128 (buf + op->len, buf + buf_len, &reserved);"
    },
    {
        "line": 230,
        "fullcodeline": "reserved &= 0x1;"
    },
    {
        "line": 241,
        "fullcodeline": "ut32 val = 0;"
    },
    {
        "line": 242,
        "fullcodeline": "size_t n = read_u32_leb128 (buf + 1, buf + buf_len, &val);"
    },
    {
        "line": 272,
        "fullcodeline": "ut32 flag = 0, offset = 0;"
    },
    {
        "line": 273,
        "fullcodeline": "size_t n = read_u32_leb128 (buf + 1, buf + buf_len, &flag);"
    },
    {
        "line": 275,
        "fullcodeline": "op->len += n;"
    },
    {
        "line": 276,
        "fullcodeline": "n = read_u32_leb128 (buf + op->len, buf + buf_len, &offset);"
    },
    {
        "line": 285,
        "fullcodeline": "ut32 reserved = 0;"
    },
    {
        "line": 286,
        "fullcodeline": "size_t n = read_u32_leb128 (buf + 1, buf + buf_len, &reserved);"
    },
    {
        "line": 288,
        "fullcodeline": "reserved &= 0x1;"
    },
    {
        "line": 296,
        "fullcodeline": "st32 val = 0;"
    },
    {
        "line": 297,
        "fullcodeline": "size_t n = read_i32_leb128 (buf + 1, buf + buf_len, &val);"
    },
    {
        "line": 305,
        "fullcodeline": "st64 val = 0;"
    },
    {
        "line": 306,
        "fullcodeline": "size_t n = read_i64_leb128 (buf + 1, buf + buf_len, &val);"
    },
    {
        "line": 314,
        "fullcodeline": "ut32 val = 0;"
    },
    {
        "line": 315,
        "fullcodeline": "size_t n = read_u32_leb128 (buf + 1, buf + buf_len, &val);"
    },
    {
        "line": 324,
        "fullcodeline": "ut64 val = 0;"
    },
    {
        "line": 325,
        "fullcodeline": "size_t n = read_u64_leb128 (buf + 1, buf + buf_len, &val);"
    },
    {
        "line": 197,
        "fullcodeline": "for (i = 0; i < count; i++) {"
    },
    {
        "line": 210,
        "fullcodeline": "for (i = 0; i < count && strlen (op->txt) + 10 < R_ASM_BUFSIZE; i++) {"
    },
    {
        "line": 150,
        "fullcodeline": "if (!(n > 0 && n < buf_len)) goto err;"
    },
    {
        "line": 180,
        "fullcodeline": "if (!(n > 0 && n < buf_len)) goto err;"
    },
    {
        "line": 189,
        "fullcodeline": "if (!(n > 0 && n < buf_len)) {"
    },
    {
        "line": 192,
        "fullcodeline": "if (!(table = calloc (count, sizeof (ut32)))) {"
    },
    {
        "line": 198,
        "fullcodeline": "n = read_u32_leb128 (buf + op->len, buf + buf_len, &table[i]);"
    },
    {
        "line": 202,
        "fullcodeline": "op->len += n;"
    },
    {
        "line": 205,
        "fullcodeline": "if (!(n > 0 && n + op->len < buf_len)) {"
    },
    {
        "line": 211,
        "fullcodeline": "int optxtlen = strlen (op->txt);"
    },
    {
        "line": 212,
        "fullcodeline": "snprintf (op->txt + optxtlen, R_ASM_BUFSIZE - optxtlen, \"%d \", table[i]);"
    },
    {
        "line": 214,
        "fullcodeline": "snprintf (op->txt + strlen (op->txt), R_ASM_BUFSIZE, \"%d\", def);"
    },
    {
        "line": 226,
        "fullcodeline": "if (!(n > 0 && n < buf_len)) goto err;"
    },
    {
        "line": 229,
        "fullcodeline": "if (!(n == 1 && op->len + n <= buf_len)) goto err;"
    },
    {
        "line": 243,
        "fullcodeline": "if (!(n > 0 && n < buf_len)) goto err;"
    },
    {
        "line": 274,
        "fullcodeline": "if (!(n > 0 && n < buf_len)) goto err;"
    },
    {
        "line": 277,
        "fullcodeline": "if (!(n > 0 && op->len + n <= buf_len)) goto err;"
    },
    {
        "line": 287,
        "fullcodeline": "if (!(n == 1 && n < buf_len)) goto err;"
    },
    {
        "line": 298,
        "fullcodeline": "if (!(n > 0 && n < buf_len)) goto err;"
    },
    {
        "line": 307,
        "fullcodeline": "if (!(n > 0 && n < buf_len)) goto err;"
    },
    {
        "line": 316,
        "fullcodeline": "if (!(n > 0 && n < buf_len)) goto err;"
    },
    {
        "line": 326,
        "fullcodeline": "if (!(n > 0 && n < buf_len)) goto err;"
    },
    {
        "line": 199,
        "fullcodeline": "if (!(op->len + n <= buf_len)) {"
    }
]