[
    {
        "line": 4,
        "fullcodeline": "int len = 0;"
    },
    {
        "line": 5,
        "fullcodeline": "int tag_len = 0;"
    },
    {
        "line": 6,
        "fullcodeline": "int decode_len = 0;"
    },
    {
        "line": 7,
        "fullcodeline": "uint8_t tag_number = 0;"
    },
    {
        "line": 8,
        "fullcodeline": "uint32_t len_value_type = 0;"
    },
    {
        "line": 10,
        "fullcodeline": "if (apdu && value && apdu_size && !IS_CONTEXT_SPECIFIC(*apdu)) {"
    },
    {
        "line": 11,
        "fullcodeline": "value->context_specific = false;"
    },
    {
        "line": 12,
        "fullcodeline": "tag_len = bacnet_tag_number_and_value_decode("
    },
    {
        "line": 35,
        "fullcodeline": "value->next = NULL;"
    },
    {
        "line": 14,
        "fullcodeline": "if (tag_len > 0) {"
    },
    {
        "line": 15,
        "fullcodeline": "len += tag_len;"
    },
    {
        "line": 16,
        "fullcodeline": "value->tag = tag_number;"
    },
    {
        "line": 17,
        "fullcodeline": "if ((unsigned)len <= apdu_size) {"
    },
    {
        "line": 18,
        "fullcodeline": "decode_len ="
    },
    {
        "line": 19,
        "fullcodeline": "bacapp_decode_data_len(NULL, tag_number, len_value_type);"
    },
    {
        "line": 20,
        "fullcodeline": "if ((unsigned)decode_len <= (apdu_size - len)) {"
    },
    {
        "line": 32,
        "fullcodeline": "len = BACNET_STATUS_ERROR;"
    },
    {
        "line": 21,
        "fullcodeline": "decode_len = bacapp_decode_data("
    },
    {
        "line": 23,
        "fullcodeline": "if (value->tag != MAX_BACNET_APPLICATION_TAG) {"
    },
    {
        "line": 29,
        "fullcodeline": "len = BACNET_STATUS_ERROR;"
    },
    {
        "line": 24,
        "fullcodeline": "len += decode_len;"
    },
    {
        "line": 26,
        "fullcodeline": "len = BACNET_STATUS_ERROR;"
    }
]