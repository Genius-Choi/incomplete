[
    {
        "line": 20,
        "fullcodeline": "options = {}"
    },
    {
        "line": 6,
        "fullcodeline": "if not value:"
    },
    {
        "line": 11,
        "fullcodeline": "if isinstance(value, str):            # pragma: no cover"
    },
    {
        "line": 15,
        "fullcodeline": "if b';' not in value:"
    },
    {
        "line": 19,
        "fullcodeline": "ctype, rest = value.split(b';', 1)"
    },
    {
        "line": 23,
        "fullcodeline": "for match in OPTION_RE.finditer(rest):"
    },
    {
        "line": 39,
        "fullcodeline": "return ctype, options"
    },
    {
        "line": 12,
        "fullcodeline": "value = value.encode('latin-1')"
    },
    {
        "line": 7,
        "fullcodeline": "return (b'', {})"
    },
    {
        "line": 16,
        "fullcodeline": "return (value.lower().strip(), {})"
    },
    {
        "line": 24,
        "fullcodeline": "key = match.group(1).lower()"
    },
    {
        "line": 25,
        "fullcodeline": "value = match.group(2)"
    },
    {
        "line": 37,
        "fullcodeline": "options[key] = value"
    },
    {
        "line": 26,
        "fullcodeline": "if value[0] == QUOTE and value[-1] == QUOTE:"
    },
    {
        "line": 28,
        "fullcodeline": "value = value[1:-1]"
    },
    {
        "line": 29,
        "fullcodeline": "value = value.replace(b'\\\\\\\\', b'\\\\').replace(b'\\\\\"', b'\"')"
    },
    {
        "line": 34,
        "fullcodeline": "if value[1:3] == b':\\\\' or value[:2] == b'\\\\\\\\':"
    },
    {
        "line": 35,
        "fullcodeline": "value = value.split(b'\\\\')[-1]"
    }
]