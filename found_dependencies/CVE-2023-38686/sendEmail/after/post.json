[
    {
        "line": 22,
        "fullcodeline": "midRandom = \"\".join([random.choice(string.ascii_letters) for _ in range(16)])"
    },
    {
        "line": 23,
        "fullcodeline": "messageid = \"<%d%s@%s>\" % (time_msec(), midRandom, myHostname)"
    },
    {
        "line": 25,
        "fullcodeline": "substitutions.update("
    },
    {
        "line": 58,
        "fullcodeline": "mailPort = int(sydent.config.email.smtp_port)"
    },
    {
        "line": 63,
        "fullcodeline": "logger.info("
    },
    {
        "line": 35,
        "fullcodeline": "if templateFile.endswith(\".j2\"):"
    },
    {
        "line": 64,
        "fullcodeline": "\"Sending mail to %s with mail server: %s\""
    },
    {
        "line": 26,
        "fullcodeline": "{"
    },
    {
        "line": 38,
        "fullcodeline": "substitutions[\"multipart_boundary\"] = generateAlphanumericTokenOfLength(32)"
    },
    {
        "line": 39,
        "fullcodeline": "template = sydent.config.general.template_environment.get_template(templateFile)"
    },
    {
        "line": 40,
        "fullcodeline": "mailString = template.render(substitutions)"
    },
    {
        "line": 42,
        "fullcodeline": "allSubstitutions = {}"
    },
    {
        "line": 47,
        "fullcodeline": "allSubstitutions[\"multipart_boundary\"] = generateAlphanumericTokenOfLength(32)"
    },
    {
        "line": 52,
        "fullcodeline": "check_valid_email_address(mailTo, allow_description=False)"
    },
    {
        "line": 65,
        "fullcodeline": "% ("
    },
    {
        "line": 74,
        "fullcodeline": "ctx = ssl.create_default_context(purpose=ssl.Purpose.SERVER_AUTH)"
    },
    {
        "line": 85,
        "fullcodeline": "email_counter.inc()"
    },
    {
        "line": 91,
        "fullcodeline": "smtp.sendmail(mailFrom, mailTo, mailString.encode(\"utf-8\"))"
    },
    {
        "line": 92,
        "fullcodeline": "smtp.quit()"
    },
    {
        "line": 43,
        "fullcodeline": "for k, v in substitutions.items():"
    },
    {
        "line": 48,
        "fullcodeline": "with open(templateFile) as template_file:"
    },
    {
        "line": 75,
        "fullcodeline": "if mailTLSMode == \"SSL\" or mailTLSMode == \"TLS\":"
    },
    {
        "line": 82,
        "fullcodeline": "if mailUsername != \"\":"
    },
    {
        "line": 28,
        "fullcodeline": "\"date\": email.utils.formatdate(localtime=False),"
    },
    {
        "line": 54,
        "fullcodeline": "logger.warning(\"Invalid email address %s\", mailTo)"
    },
    {
        "line": 55,
        "fullcodeline": "raise"
    },
    {
        "line": 76,
        "fullcodeline": "smtp = smtplib.SMTP_SSL(mailServer, mailPort, myHostname, context=ctx)"
    },
    {
        "line": 83,
        "fullcodeline": "smtp.login(mailUsername, mailPassword)"
    },
    {
        "line": 96,
        "fullcodeline": "raise EmailSendException() from origException"
    },
    {
        "line": 44,
        "fullcodeline": "allSubstitutions[k] = v"
    },
    {
        "line": 45,
        "fullcodeline": "allSubstitutions[k + \"_forhtml\"] = escape(v)"
    },
    {
        "line": 46,
        "fullcodeline": "allSubstitutions[k + \"_forurl\"] = urllib.parse.quote(v)"
    },
    {
        "line": 49,
        "fullcodeline": "mailString = template_file.read() % allSubstitutions"
    },
    {
        "line": 77,
        "fullcodeline": "elif mailTLSMode == \"STARTTLS\":"
    },
    {
        "line": 78,
        "fullcodeline": "smtp = smtplib.SMTP(mailServer, mailPort, myHostname)"
    },
    {
        "line": 79,
        "fullcodeline": "smtp.starttls(context=ctx)"
    },
    {
        "line": 81,
        "fullcodeline": "smtp = smtplib.SMTP(mailServer, mailPort, myHostname)"
    },
    {
        "line": 95,
        "fullcodeline": "twisted.python.log.err()"
    }
]