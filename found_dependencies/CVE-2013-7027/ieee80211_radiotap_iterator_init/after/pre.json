[
    {
        "line": 18,
        "fullcodeline": "iterator->_rtheader = radiotap_header;"
    },
    {
        "line": 19,
        "fullcodeline": "iterator->_max_length = get_unaligned_le16(&radiotap_header->it_len);"
    },
    {
        "line": 21,
        "fullcodeline": "iterator->_bitmap_shifter = get_unaligned_le32(&radiotap_header->it_present);"
    },
    {
        "line": 22,
        "fullcodeline": "iterator->_arg = (uint8_t *)radiotap_header + sizeof(*radiotap_header);"
    },
    {
        "line": 24,
        "fullcodeline": "iterator->_next_bitmap = &radiotap_header->it_present;"
    },
    {
        "line": 7,
        "fullcodeline": "if (max_length < sizeof(struct ieee80211_radiotap_header))"
    },
    {
        "line": 15,
        "fullcodeline": "if (max_length < get_unaligned_le16(&radiotap_header->it_len))"
    },
    {
        "line": 32,
        "fullcodeline": "if (iterator->_bitmap_shifter & (1<<IEEE80211_RADIOTAP_EXT)) {"
    },
    {
        "line": 50,
        "fullcodeline": "iterator->_arg += sizeof(uint32_t);"
    },
    {
        "line": 8,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 12,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 16,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 33,
        "fullcodeline": "while (get_unaligned_le32(iterator->_arg) &"
    },
    {
        "line": 34,
        "fullcodeline": "(1 << IEEE80211_RADIOTAP_EXT)) {"
    },
    {
        "line": 35,
        "fullcodeline": "iterator->_arg += sizeof(uint32_t);"
    },
    {
        "line": 43,
        "fullcodeline": "if ((unsigned long)iterator->_arg -"
    },
    {
        "line": 47,
        "fullcodeline": "return -EINVAL;"
    }
]