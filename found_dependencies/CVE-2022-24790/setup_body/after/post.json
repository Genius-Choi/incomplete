[
    {
        "line": 2,
        "fullcodeline": "@body_read_start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :millisecond)"
    },
    {
        "line": 11,
        "fullcodeline": "@read_header = false"
    },
    {
        "line": 40,
        "fullcodeline": "@chunked_body = false"
    },
    {
        "line": 56,
        "fullcodeline": "remain = cl.to_i - body.bytesize"
    },
    {
        "line": 76,
        "fullcodeline": "@body.write body"
    },
    {
        "line": 78,
        "fullcodeline": "@body_remain = remain"
    },
    {
        "line": 4,
        "fullcodeline": "if @env[HTTP_EXPECT] == CONTINUE"
    },
    {
        "line": 58,
        "fullcodeline": "if remain <= 0"
    },
    {
        "line": 65,
        "fullcodeline": "if remain > MAX_BODY"
    },
    {
        "line": 7,
        "fullcodeline": "@io << HTTP_11_100"
    },
    {
        "line": 13,
        "fullcodeline": "body = @parser.body"
    },
    {
        "line": 17,
        "fullcodeline": "te_lwr = te.downcase"
    },
    {
        "line": 50,
        "fullcodeline": "@buffer = body.empty? ? nil : body"
    },
    {
        "line": 51,
        "fullcodeline": "@body = EmptyBody"
    },
    {
        "line": 59,
        "fullcodeline": "@body = StringIO.new(body)"
    },
    {
        "line": 60,
        "fullcodeline": "@buffer = nil"
    },
    {
        "line": 66,
        "fullcodeline": "@body = Tempfile.new(Const::PUMA_TMP_BASE)"
    },
    {
        "line": 69,
        "fullcodeline": "@tempfile = @body"
    },
    {
        "line": 73,
        "fullcodeline": "@body = StringIO.new body[0,0]"
    },
    {
        "line": 8,
        "fullcodeline": "@io.flush"
    },
    {
        "line": 18,
        "fullcodeline": "if te.include? ','"
    },
    {
        "line": 46,
        "fullcodeline": "if cl =~ CONTENT_LENGTH_VALUE_INVALID"
    },
    {
        "line": 67,
        "fullcodeline": "@body.unlink"
    },
    {
        "line": 68,
        "fullcodeline": "@body.binmode"
    },
    {
        "line": 19,
        "fullcodeline": "te_ary = te_lwr.split ','"
    },
    {
        "line": 20,
        "fullcodeline": "te_count = te_ary.count CHUNKED"
    },
    {
        "line": 21,
        "fullcodeline": "te_valid = te_ary[0..-2].all? { |e| ALLOWED_TRANSFER_ENCODING.include? e }"
    },
    {
        "line": 22,
        "fullcodeline": "if te_ary.last == CHUNKED && te_count == 1 && te_valid"
    },
    {
        "line": 30,
        "fullcodeline": "elsif te_lwr == CHUNKED"
    },
    {
        "line": 23,
        "fullcodeline": "@env.delete TRANSFER_ENCODING2"
    },
    {
        "line": 31,
        "fullcodeline": "@env.delete TRANSFER_ENCODING2"
    },
    {
        "line": 24,
        "fullcodeline": "return setup_chunked_body body"
    },
    {
        "line": 25,
        "fullcodeline": "elsif te_count >= 1"
    },
    {
        "line": 32,
        "fullcodeline": "return setup_chunked_body body"
    },
    {
        "line": 33,
        "fullcodeline": "elsif ALLOWED_TRANSFER_ENCODING.include? te_lwr"
    },
    {
        "line": 27,
        "fullcodeline": "elsif !te_valid"
    }
]