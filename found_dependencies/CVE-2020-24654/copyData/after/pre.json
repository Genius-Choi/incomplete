[
    {
        "line": 3,
        "fullcodeline": "char buff[10240];"
    },
    {
        "line": 4,
        "fullcodeline": "QFile file(filename);"
    },
    {
        "line": 10,
        "fullcodeline": "auto readBytes = file.read(buff, sizeof(buff));"
    },
    {
        "line": 6,
        "fullcodeline": "if (!file.open(QIODevice::ReadOnly)) {"
    },
    {
        "line": 11,
        "fullcodeline": "while (readBytes > 0 && !QThread::currentThread()->isInterruptionRequested()) {"
    },
    {
        "line": 12,
        "fullcodeline": "archive_write_data(dest, buff, static_cast<size_t>(readBytes));"
    },
    {
        "line": 24,
        "fullcodeline": "readBytes = file.read(buff, sizeof(buff));"
    },
    {
        "line": 13,
        "fullcodeline": "if (archive_errno(dest) != ARCHIVE_OK) {"
    },
    {
        "line": 20,
        "fullcodeline": "m_currentExtractedFilesSize += readBytes;"
    },
    {
        "line": 14,
        "fullcodeline": "qCCritical(ARK) << \"Error while writing\" << filename << \":\" << archive_error_string(dest)"
    },
    {
        "line": 21,
        "fullcodeline": "emit progress(float(m_currentExtractedFilesSize) / m_extractedFilesSize);"
    },
    {
        "line": 15,
        "fullcodeline": "<< \"(error no =\" << archive_errno(dest) << ')';"
    }
]