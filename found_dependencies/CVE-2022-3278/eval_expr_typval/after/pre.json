[
    {
        "line": 4,
        "fullcodeline": "char_u\tbuf[NUMBUFLEN];"
    },
    {
        "line": 7,
        "fullcodeline": "if (expr->v_type == VAR_FUNC)"
    },
    {
        "line": 9,
        "fullcodeline": "s = expr->vval.v_string;"
    },
    {
        "line": 12,
        "fullcodeline": "CLEAR_FIELD(funcexe);"
    },
    {
        "line": 13,
        "fullcodeline": "funcexe.fe_evaluate = TRUE;"
    },
    {
        "line": 10,
        "fullcodeline": "if (s == NULL || *s == NUL)"
    },
    {
        "line": 14,
        "fullcodeline": "if (call_func(s, -1, rettv, argc, argv, &funcexe) == FAIL)"
    },
    {
        "line": 17,
        "fullcodeline": "else if (expr->v_type == VAR_PARTIAL)"
    },
    {
        "line": 19,
        "fullcodeline": "partial_T   *partial = expr->vval.v_partial;"
    },
    {
        "line": 21,
        "fullcodeline": "if (partial == NULL)"
    },
    {
        "line": 24,
        "fullcodeline": "if (partial->pt_func != NULL"
    },
    {
        "line": 25,
        "fullcodeline": "&& partial->pt_func->uf_def_status != UF_NOT_COMPILED)"
    },
    {
        "line": 27,
        "fullcodeline": "funccall_T\t*fc = create_funccal(partial->pt_func, rettv);"
    },
    {
        "line": 34,
        "fullcodeline": "r = call_def_function(partial->pt_func, argc, argv,"
    },
    {
        "line": 52,
        "fullcodeline": "else if (expr->v_type == VAR_INSTR)"
    },
    {
        "line": 30,
        "fullcodeline": "if (fc == NULL)"
    },
    {
        "line": 37,
        "fullcodeline": "if (r == FAIL)"
    },
    {
        "line": 42,
        "fullcodeline": "s = partial_name(partial);"
    },
    {
        "line": 45,
        "fullcodeline": "CLEAR_FIELD(funcexe);"
    },
    {
        "line": 46,
        "fullcodeline": "funcexe.fe_evaluate = TRUE;"
    },
    {
        "line": 47,
        "fullcodeline": "funcexe.fe_partial = partial;"
    },
    {
        "line": 48,
        "fullcodeline": "if (call_func(s, -1, rettv, argc, argv, &funcexe) == FAIL)"
    },
    {
        "line": 54,
        "fullcodeline": "return exe_typval_instr(expr, rettv);"
    },
    {
        "line": 58,
        "fullcodeline": "s = tv_get_string_buf_chk_strict(expr, buf, in_vim9script());"
    },
    {
        "line": 61,
        "fullcodeline": "s = skipwhite(s);"
    },
    {
        "line": 43,
        "fullcodeline": "if (s == NULL || *s == NUL)"
    },
    {
        "line": 59,
        "fullcodeline": "if (s == NULL)"
    },
    {
        "line": 62,
        "fullcodeline": "if (eval1_emsg(&s, rettv, NULL) == FAIL)"
    },
    {
        "line": 64,
        "fullcodeline": "if (*skipwhite(s) != NUL)  // check for trailing chars after expr"
    },
    {
        "line": 67,
        "fullcodeline": "semsg(_(e_invalid_expression_str), s);"
    }
]