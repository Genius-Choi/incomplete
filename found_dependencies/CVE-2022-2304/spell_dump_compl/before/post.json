[
    {
        "line": 9,
        "fullcodeline": "idx_T\tarridx[MAXWLEN];"
    },
    {
        "line": 10,
        "fullcodeline": "int\t\tcuri[MAXWLEN];"
    },
    {
        "line": 11,
        "fullcodeline": "char_u\tword[MAXWLEN];"
    },
    {
        "line": 15,
        "fullcodeline": "linenr_T\tlnum = 0;"
    },
    {
        "line": 20,
        "fullcodeline": "char_u\t*region_names = NULL;\t    // region names being used"
    },
    {
        "line": 21,
        "fullcodeline": "int\t\tdo_region = TRUE;\t    // dump region names and numbers"
    },
    {
        "line": 24,
        "fullcodeline": "int\t\tdumpflags = dumpflags_arg;"
    },
    {
        "line": 29,
        "fullcodeline": "if (pat != NULL)"
    },
    {
        "line": 45,
        "fullcodeline": "for (lpi = 0; lpi < curwin->w_s->b_langp.ga_len; ++lpi)"
    },
    {
        "line": 61,
        "fullcodeline": "if (do_region && region_names != NULL)"
    },
    {
        "line": 75,
        "fullcodeline": "for (lpi = 0; lpi < curwin->w_s->b_langp.ga_len; ++lpi)"
    },
    {
        "line": 47,
        "fullcodeline": "lp = LANGP_ENTRY(curwin->w_s->b_langp, lpi);"
    },
    {
        "line": 77,
        "fullcodeline": "lp = LANGP_ENTRY(curwin->w_s->b_langp, lpi);"
    },
    {
        "line": 78,
        "fullcodeline": "slang = lp->lp_slang;"
    },
    {
        "line": 49,
        "fullcodeline": "if (p[0] != 0)"
    },
    {
        "line": 63,
        "fullcodeline": "if (pat == NULL)"
    },
    {
        "line": 70,
        "fullcodeline": "do_region = FALSE;"
    },
    {
        "line": 79,
        "fullcodeline": "if (slang->sl_fbyts == NULL)\t    // reloading failed"
    },
    {
        "line": 82,
        "fullcodeline": "if (pat == NULL)"
    },
    {
        "line": 90,
        "fullcodeline": "if (pat != NULL && slang->sl_pbyts == NULL)"
    },
    {
        "line": 97,
        "fullcodeline": "for (round = 1; round <= 2; ++round)"
    },
    {
        "line": 32,
        "fullcodeline": "dumpflags |= DUMPFLAG_ICASE;"
    },
    {
        "line": 65,
        "fullcodeline": "vim_snprintf((char *)IObuff, IOSIZE, \"/regions=%s\", region_names);"
    },
    {
        "line": 66,
        "fullcodeline": "ml_append(lnum++, IObuff, (colnr_T)0, FALSE);"
    },
    {
        "line": 84,
        "fullcodeline": "vim_snprintf((char *)IObuff, IOSIZE, \"# file: %s\", slang->sl_fname);"
    },
    {
        "line": 85,
        "fullcodeline": "ml_append(lnum++, IObuff, (colnr_T)0, FALSE);"
    },
    {
        "line": 91,
        "fullcodeline": "patlen = (int)STRLEN(pat);"
    },
    {
        "line": 114,
        "fullcodeline": "depth = 0;"
    },
    {
        "line": 115,
        "fullcodeline": "arridx[0] = 0;"
    },
    {
        "line": 116,
        "fullcodeline": "curi[0] = 1;"
    },
    {
        "line": 35,
        "fullcodeline": "n = captype(pat, NULL);"
    },
    {
        "line": 51,
        "fullcodeline": "if (region_names == NULL)\t    // first language with regions"
    },
    {
        "line": 93,
        "fullcodeline": "patlen = -1;"
    },
    {
        "line": 99,
        "fullcodeline": "if (round == 1)"
    },
    {
        "line": 111,
        "fullcodeline": "if (byts == NULL)"
    },
    {
        "line": 117,
        "fullcodeline": "while (depth >= 0 && !got_int"
    },
    {
        "line": 36,
        "fullcodeline": "if (n == WF_ONECAP)"
    },
    {
        "line": 52,
        "fullcodeline": "region_names = p;"
    },
    {
        "line": 101,
        "fullcodeline": "dumpflags &= ~DUMPFLAG_KEEPCASE;"
    },
    {
        "line": 102,
        "fullcodeline": "byts = slang->sl_fbyts;"
    },
    {
        "line": 103,
        "fullcodeline": "idxs = slang->sl_fidxs;"
    },
    {
        "line": 118,
        "fullcodeline": "&& (pat == NULL || !ins_compl_interrupted()))"
    },
    {
        "line": 37,
        "fullcodeline": "dumpflags |= DUMPFLAG_ONECAP;"
    },
    {
        "line": 107,
        "fullcodeline": "dumpflags |= DUMPFLAG_KEEPCASE;"
    },
    {
        "line": 108,
        "fullcodeline": "byts = slang->sl_kbyts;"
    },
    {
        "line": 109,
        "fullcodeline": "idxs = slang->sl_kidxs;"
    },
    {
        "line": 120,
        "fullcodeline": "if (curi[depth] > byts[arridx[depth]])"
    },
    {
        "line": 53,
        "fullcodeline": "else if (STRCMP(region_names, p) != 0)"
    },
    {
        "line": 123,
        "fullcodeline": "--depth;"
    },
    {
        "line": 124,
        "fullcodeline": "line_breakcheck();"
    },
    {
        "line": 125,
        "fullcodeline": "ins_compl_check_keys(50, FALSE);"
    },
    {
        "line": 38,
        "fullcodeline": "else if (n == WF_ALLCAP && (int)STRLEN(pat) > mb_ptr2len(pat))"
    },
    {
        "line": 55,
        "fullcodeline": "do_region = FALSE;\t    // region names are different"
    },
    {
        "line": 130,
        "fullcodeline": "n = arridx[depth] + curi[depth];"
    },
    {
        "line": 131,
        "fullcodeline": "++curi[depth];"
    },
    {
        "line": 132,
        "fullcodeline": "c = byts[n];"
    },
    {
        "line": 39,
        "fullcodeline": "dumpflags |= DUMPFLAG_ALLCAP;"
    },
    {
        "line": 133,
        "fullcodeline": "if (c == 0)"
    },
    {
        "line": 139,
        "fullcodeline": "flags = (int)idxs[n];"
    },
    {
        "line": 140,
        "fullcodeline": "if ((round == 2 || (flags & WF_KEEPCAP) == 0)"
    },
    {
        "line": 171,
        "fullcodeline": "word[depth++] = c;"
    },
    {
        "line": 172,
        "fullcodeline": "arridx[depth] = idxs[n];"
    },
    {
        "line": 173,
        "fullcodeline": "curi[depth] = 1;"
    },
    {
        "line": 142,
        "fullcodeline": "&& (do_region"
    },
    {
        "line": 147,
        "fullcodeline": "word[depth] = NUL;"
    },
    {
        "line": 153,
        "fullcodeline": "c = (unsigned)flags >> 24;"
    },
    {
        "line": 181,
        "fullcodeline": "if (depth <= patlen"
    },
    {
        "line": 141,
        "fullcodeline": "&& (flags & WF_NEEDCOMP) == 0"
    },
    {
        "line": 144,
        "fullcodeline": "|| (((unsigned)flags >> 16)"
    },
    {
        "line": 148,
        "fullcodeline": "if (!do_region)"
    },
    {
        "line": 154,
        "fullcodeline": "if (c == 0 || curi[depth] == 2)"
    },
    {
        "line": 163,
        "fullcodeline": "if (c != 0)"
    },
    {
        "line": 182,
        "fullcodeline": "&& MB_STRNICMP(word, pat, depth) != 0)"
    },
    {
        "line": 183,
        "fullcodeline": "--depth;"
    },
    {
        "line": 143,
        "fullcodeline": "|| (flags & WF_REGION) == 0"
    },
    {
        "line": 149,
        "fullcodeline": "flags &= ~WF_REGION;"
    },
    {
        "line": 156,
        "fullcodeline": "dump_word(slang, word, pat, dir,"
    },
    {
        "line": 164,
        "fullcodeline": "lnum = dump_prefixes(slang, word, pat, dir,"
    },
    {
        "line": 158,
        "fullcodeline": "if (pat == NULL)"
    },
    {
        "line": 159,
        "fullcodeline": "++lnum;"
    }
]