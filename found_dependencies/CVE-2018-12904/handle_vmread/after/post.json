[
    {
        "line": 5,
        "fullcodeline": "unsigned long exit_qualification = vmcs_readl(EXIT_QUALIFICATION);"
    },
    {
        "line": 6,
        "fullcodeline": "u32 vmx_instruction_info = vmcs_read32(VMX_INSTRUCTION_INFO);"
    },
    {
        "line": 7,
        "fullcodeline": "gva_t gva = 0;"
    },
    {
        "line": 16,
        "fullcodeline": "field = kvm_register_readl(vcpu, (((vmx_instruction_info) >> 28) & 0xf));"
    },
    {
        "line": 39,
        "fullcodeline": "nested_vmx_succeed(vcpu);"
    },
    {
        "line": 9,
        "fullcodeline": "if (!nested_vmx_check_permission(vcpu))"
    },
    {
        "line": 12,
        "fullcodeline": "if (!nested_vmx_check_vmcs12(vcpu))"
    },
    {
        "line": 18,
        "fullcodeline": "if (vmcs12_read_any(vcpu, field, &field_value) < 0) {"
    },
    {
        "line": 27,
        "fullcodeline": "if (vmx_instruction_info & (1u << 10)) {"
    },
    {
        "line": 40,
        "fullcodeline": "return kvm_skip_emulated_instruction(vcpu);"
    },
    {
        "line": 19,
        "fullcodeline": "nested_vmx_failValid(vcpu, VMXERR_UNSUPPORTED_VMCS_COMPONENT);"
    },
    {
        "line": 28,
        "fullcodeline": "kvm_register_writel(vcpu, (((vmx_instruction_info) >> 3) & 0xf),"
    },
    {
        "line": 13,
        "fullcodeline": "return kvm_skip_emulated_instruction(vcpu);"
    },
    {
        "line": 20,
        "fullcodeline": "return kvm_skip_emulated_instruction(vcpu);"
    },
    {
        "line": 35,
        "fullcodeline": "kvm_write_guest_virt_system(&vcpu->arch.emulate_ctxt, gva,"
    },
    {
        "line": 31,
        "fullcodeline": "if (get_vmx_mem_address(vcpu, exit_qualification,"
    },
    {
        "line": 36,
        "fullcodeline": "&field_value, (is_long_mode(vcpu) ? 8 : 4), NULL);"
    }
]