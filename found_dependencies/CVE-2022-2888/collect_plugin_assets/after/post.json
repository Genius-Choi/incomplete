[
    {
        "line": 2,
        "fullcodeline": "logger = logging.getLogger(__name__ + \".collect_plugin_assets\")"
    },
    {
        "line": 4,
        "fullcodeline": "supported_stylesheets = (\"css\", \"less\")"
    },
    {
        "line": 5,
        "fullcodeline": "assets = {"
    },
    {
        "line": 20,
        "fullcodeline": "asset_plugins = octoprint.plugin.plugin_manager().get_implementations("
    },
    {
        "line": 23,
        "fullcodeline": "for implementation in asset_plugins:"
    },
    {
        "line": 24,
        "fullcodeline": "name = implementation._identifier"
    },
    {
        "line": 27,
        "fullcodeline": "asset_key = \"bundled\" if is_bundled else \"external\""
    },
    {
        "line": 41,
        "fullcodeline": "def asset_exists(category, asset):"
    },
    {
        "line": 6,
        "fullcodeline": "\"bundled\": {"
    },
    {
        "line": 12,
        "fullcodeline": "\"external\": {"
    },
    {
        "line": 51,
        "fullcodeline": "if \"js\" in all_assets:"
    },
    {
        "line": 57,
        "fullcodeline": "if \"clientjs\" in all_assets:"
    },
    {
        "line": 63,
        "fullcodeline": "if preferred_stylesheet in all_assets:"
    },
    {
        "line": 7,
        "fullcodeline": "\"js\": DefaultOrderedDict(list),"
    },
    {
        "line": 8,
        "fullcodeline": "\"clientjs\": DefaultOrderedDict(list),"
    },
    {
        "line": 9,
        "fullcodeline": "\"css\": DefaultOrderedDict(list),"
    },
    {
        "line": 10,
        "fullcodeline": "\"less\": DefaultOrderedDict(list),"
    },
    {
        "line": 13,
        "fullcodeline": "\"js\": DefaultOrderedDict(list),"
    },
    {
        "line": 14,
        "fullcodeline": "\"clientjs\": DefaultOrderedDict(list),"
    },
    {
        "line": 15,
        "fullcodeline": "\"css\": DefaultOrderedDict(list),"
    },
    {
        "line": 16,
        "fullcodeline": "\"less\": DefaultOrderedDict(list),"
    },
    {
        "line": 30,
        "fullcodeline": "all_assets = implementation.get_assets()"
    },
    {
        "line": 31,
        "fullcodeline": "basefolder = implementation.get_asset_folder()"
    },
    {
        "line": 52,
        "fullcodeline": "for asset in all_assets[\"js\"]:"
    },
    {
        "line": 58,
        "fullcodeline": "for asset in all_assets[\"clientjs\"]:"
    },
    {
        "line": 64,
        "fullcodeline": "for asset in all_assets[preferred_stylesheet]:"
    },
    {
        "line": 71,
        "fullcodeline": "for stylesheet in supported_stylesheets:"
    },
    {
        "line": 33,
        "fullcodeline": "logger.exception("
    },
    {
        "line": 34,
        "fullcodeline": "\"Got an error while trying to collect assets from {}, ignoring assets from the plugin\".format("
    },
    {
        "line": 37,
        "fullcodeline": "extra={\"plugin\": name},"
    },
    {
        "line": 53,
        "fullcodeline": "if not asset_exists(\"js\", asset):"
    },
    {
        "line": 55,
        "fullcodeline": "assets[asset_key][\"js\"][name].append(f\"plugin/{name}/{asset}\")"
    },
    {
        "line": 59,
        "fullcodeline": "if not asset_exists(\"clientjs\", asset):"
    },
    {
        "line": 61,
        "fullcodeline": "assets[asset_key][\"clientjs\"][name].append(f\"plugin/{name}/{asset}\")"
    },
    {
        "line": 65,
        "fullcodeline": "if not asset_exists(preferred_stylesheet, asset):"
    },
    {
        "line": 67,
        "fullcodeline": "assets[asset_key][preferred_stylesheet][name].append("
    },
    {
        "line": 72,
        "fullcodeline": "if stylesheet not in all_assets:"
    },
    {
        "line": 75,
        "fullcodeline": "for asset in all_assets[stylesheet]:"
    },
    {
        "line": 68,
        "fullcodeline": "f\"plugin/{name}/{asset}\""
    },
    {
        "line": 76,
        "fullcodeline": "if not asset_exists(stylesheet, asset):"
    },
    {
        "line": 78,
        "fullcodeline": "assets[asset_key][stylesheet][name].append(f\"plugin/{name}/{asset}\")"
    }
]