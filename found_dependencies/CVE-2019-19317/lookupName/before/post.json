[
    {
        "line": 10,
        "fullcodeline": "int cnt = 0;                      /* Number of matching column names */"
    },
    {
        "line": 11,
        "fullcodeline": "int cntTab = 0;                   /* Number of matching table names */"
    },
    {
        "line": 12,
        "fullcodeline": "int nSubquery = 0;                /* How many levels of subquery */"
    },
    {
        "line": 13,
        "fullcodeline": "sqlite3 *db = pParse->db;         /* The database connection */"
    },
    {
        "line": 15,
        "fullcodeline": "struct SrcList_item *pMatch = 0;  /* The matching pSrcList item */"
    },
    {
        "line": 16,
        "fullcodeline": "NameContext *pTopNC = pNC;        /* First namecontext in the list */"
    },
    {
        "line": 17,
        "fullcodeline": "Schema *pSchema = 0;              /* Schema of the expression */"
    },
    {
        "line": 18,
        "fullcodeline": "int eNewExprOp = TK_COLUMN;       /* New value for pExpr->op on success */"
    },
    {
        "line": 19,
        "fullcodeline": "Table *pTab = 0;                  /* Table hold the row */"
    },
    {
        "line": 22,
        "fullcodeline": "assert( pNC );     /* the name context cannot be NULL. */"
    },
    {
        "line": 23,
        "fullcodeline": "assert( zCol );    /* The Z in X.Y.Z cannot be NULL */"
    },
    {
        "line": 24,
        "fullcodeline": "assert( !ExprHasProperty(pExpr, EP_TokenOnly|EP_Reduced) );"
    },
    {
        "line": 27,
        "fullcodeline": "pExpr->iTable = -1;"
    },
    {
        "line": 28,
        "fullcodeline": "ExprSetVVAProperty(pExpr, EP_NoReduce);"
    },
    {
        "line": 55,
        "fullcodeline": "assert( pNC && cnt==0 );"
    },
    {
        "line": 369,
        "fullcodeline": "sqlite3ExprDelete(db, pExpr->pLeft);"
    },
    {
        "line": 370,
        "fullcodeline": "pExpr->pLeft = 0;"
    },
    {
        "line": 371,
        "fullcodeline": "sqlite3ExprDelete(db, pExpr->pRight);"
    },
    {
        "line": 372,
        "fullcodeline": "pExpr->pRight = 0;"
    },
    {
        "line": 373,
        "fullcodeline": "pExpr->op = eNewExprOp;"
    },
    {
        "line": 374,
        "fullcodeline": "ExprSetProperty(pExpr, EP_Leaf);"
    },
    {
        "line": 300,
        "fullcodeline": "if( cnt==0 && zTab==0 ){"
    },
    {
        "line": 337,
        "fullcodeline": "if( cnt!=1 ){"
    },
    {
        "line": 357,
        "fullcodeline": "if( pExpr->iColumn>=0 && pMatch!=0 ){"
    },
    {
        "line": 376,
        "fullcodeline": "if( cnt==1 ){"
    },
    {
        "line": 35,
        "fullcodeline": "testcase( pNC->ncFlags & NC_PartIdx );"
    },
    {
        "line": 36,
        "fullcodeline": "testcase( pNC->ncFlags & NC_IsCheck );"
    },
    {
        "line": 58,
        "fullcodeline": "SrcList *pSrcList = pNC->pSrcList;"
    },
    {
        "line": 285,
        "fullcodeline": "pNC = pNC->pNext;"
    },
    {
        "line": 286,
        "fullcodeline": "nSubquery++;"
    },
    {
        "line": 301,
        "fullcodeline": "assert( pExpr->op==TK_ID );"
    },
    {
        "line": 339,
        "fullcodeline": "zErr = cnt==0 ? \"no such column\" : \"ambiguous column name\";"
    },
    {
        "line": 347,
        "fullcodeline": "pParse->checkSchema = 1;"
    },
    {
        "line": 348,
        "fullcodeline": "pTopNC->nErr++;"
    },
    {
        "line": 358,
        "fullcodeline": "int n = pExpr->iColumn;"
    },
    {
        "line": 359,
        "fullcodeline": "testcase( n==BMS-1 );"
    },
    {
        "line": 363,
        "fullcodeline": "assert( pMatch->iCursor==pExpr->iTable );"
    },
    {
        "line": 364,
        "fullcodeline": "pMatch->colUsed |= ((Bitmask)1)<<n;"
    },
    {
        "line": 377,
        "fullcodeline": "assert( pNC!=0 );"
    },
    {
        "line": 37,
        "fullcodeline": "if( (pNC->ncFlags & (NC_PartIdx|NC_IsCheck))!=0 ){"
    },
    {
        "line": 130,
        "fullcodeline": "if( zDb==0 && zTab!=0 && cntTab==0 ){"
    },
    {
        "line": 213,
        "fullcodeline": "if( cnt==0"
    },
    {
        "line": 243,
        "fullcodeline": "if( (pNC->ncFlags & NC_UEList)!=0"
    },
    {
        "line": 302,
        "fullcodeline": "if( ExprHasProperty(pExpr,EP_DblQuoted)"
    },
    {
        "line": 328,
        "fullcodeline": "if( sqlite3ExprIdToTrueFalse(pExpr) ){"
    },
    {
        "line": 360,
        "fullcodeline": "if( n>=BMS ){"
    },
    {
        "line": 378,
        "fullcodeline": "if( !ExprHasProperty(pExpr, EP_Alias) ){"
    },
    {
        "line": 42,
        "fullcodeline": "zDb = 0;"
    },
    {
        "line": 131,
        "fullcodeline": "pTab = 0;"
    },
    {
        "line": 218,
        "fullcodeline": "&& VisibleRowid(pMatch->pTab)"
    },
    {
        "line": 220,
        "fullcodeline": "cnt = 1;"
    },
    {
        "line": 221,
        "fullcodeline": "pExpr->iColumn = -1;"
    },
    {
        "line": 222,
        "fullcodeline": "pExpr->affExpr = SQLITE_AFF_INTEGER;"
    },
    {
        "line": 245,
        "fullcodeline": "&& zTab==0"
    },
    {
        "line": 248,
        "fullcodeline": "assert( pEList!=0 );"
    },
    {
        "line": 303,
        "fullcodeline": "&& areDoubleQuotedStringsEnabled(db, pTopNC)"
    },
    {
        "line": 319,
        "fullcodeline": "sqlite3_log(SQLITE_WARNING,"
    },
    {
        "line": 324,
        "fullcodeline": "pExpr->op = TK_STRING;"
    },
    {
        "line": 325,
        "fullcodeline": "pExpr->y.pTab = 0;"
    },
    {
        "line": 341,
        "fullcodeline": "sqlite3ErrorMsg(pParse, \"%s: %s.%s.%s\", zErr, zDb, zTab, zCol);"
    },
    {
        "line": 361,
        "fullcodeline": "n = BMS-1;"
    },
    {
        "line": 379,
        "fullcodeline": "sqlite3AuthRead(pParse, pExpr, pSchema, pNC->pSrcList);"
    },
    {
        "line": 384,
        "fullcodeline": "assert( pTopNC!=0 );"
    },
    {
        "line": 385,
        "fullcodeline": "pTopNC->nRef++;"
    },
    {
        "line": 387,
        "fullcodeline": "pTopNC = pTopNC->pNext;"
    },
    {
        "line": 61,
        "fullcodeline": "for(i=0, pItem=pSrcList->a; i<pSrcList->nSrc; i++, pItem++){"
    },
    {
        "line": 133,
        "fullcodeline": "if( pParse->pTriggerTab!=0 ){"
    },
    {
        "line": 146,
        "fullcodeline": "if( (pNC->ncFlags & NC_UUpsert)!=0 ){"
    },
    {
        "line": 217,
        "fullcodeline": "&& sqlite3IsRowid(zCol)"
    },
    {
        "line": 244,
        "fullcodeline": "&& cnt==0"
    },
    {
        "line": 249,
        "fullcodeline": "for(j=0; j<pEList->nExpr; j++){"
    },
    {
        "line": 386,
        "fullcodeline": "if( pTopNC==pNC ) break;"
    },
    {
        "line": 44,
        "fullcodeline": "for(i=0; i<db->nDb; i++){"
    },
    {
        "line": 62,
        "fullcodeline": "pTab = pItem->pTab;"
    },
    {
        "line": 63,
        "fullcodeline": "assert( pTab!=0 && pTab->zName!=0 );"
    },
    {
        "line": 64,
        "fullcodeline": "assert( pTab->nCol>0 );"
    },
    {
        "line": 114,
        "fullcodeline": "pExpr->iTable = pMatch->iCursor;"
    },
    {
        "line": 115,
        "fullcodeline": "pExpr->y.pTab = pMatch->pTab;"
    },
    {
        "line": 117,
        "fullcodeline": "assert( (pMatch->fg.jointype & JT_RIGHT)==0 );"
    },
    {
        "line": 134,
        "fullcodeline": "int op = pParse->eTriggerOp;"
    },
    {
        "line": 135,
        "fullcodeline": "assert( op==TK_DELETE || op==TK_UPDATE || op==TK_INSERT );"
    },
    {
        "line": 157,
        "fullcodeline": "pSchema = pTab->pSchema;"
    },
    {
        "line": 158,
        "fullcodeline": "cntTab++;"
    },
    {
        "line": 216,
        "fullcodeline": "&& (pNC->ncFlags & (NC_IdxExpr|NC_GenCol))==0"
    },
    {
        "line": 65,
        "fullcodeline": "if( pItem->pSelect && (pItem->pSelect->selFlags & SF_NestedFrom)!=0 ){"
    },
    {
        "line": 79,
        "fullcodeline": "if( zDb && pTab->pSchema!=pSchema ){"
    },
    {
        "line": 92,
        "fullcodeline": "if( 0==(cntTab++) ){"
    },
    {
        "line": 95,
        "fullcodeline": "for(j=0, pCol=pTab->aCol; j<pTab->nCol; j++, pCol++){"
    },
    {
        "line": 118,
        "fullcodeline": "if( (pMatch->fg.jointype & JT_LEFT)!=0 ){"
    },
    {
        "line": 136,
        "fullcodeline": "if( op!=TK_DELETE && sqlite3StrICmp(\"new\",zTab) == 0 ){"
    },
    {
        "line": 148,
        "fullcodeline": "if( pUpsert && sqlite3StrICmp(\"excluded\",zTab)==0 ){"
    },
    {
        "line": 159,
        "fullcodeline": "for(iCol=0, pCol=pTab->aCol; iCol<pTab->nCol; iCol++, pCol++){"
    },
    {
        "line": 167,
        "fullcodeline": "if( iCol>=pTab->nCol && sqlite3IsRowid(zCol) && VisibleRowid(pTab) ){"
    },
    {
        "line": 171,
        "fullcodeline": "if( iCol<pTab->nCol ){"
    },
    {
        "line": 251,
        "fullcodeline": "if( zAs!=0 && sqlite3StrICmp(zAs, zCol)==0 ){"
    },
    {
        "line": 343,
        "fullcodeline": "sqlite3ErrorMsg(pParse, \"%s: %s.%s\", zErr, zTab, zCol);"
    },
    {
        "line": 46,
        "fullcodeline": "if( sqlite3StrICmp(db->aDb[i].zDbSName,zDb)==0 ){"
    },
    {
        "line": 66,
        "fullcodeline": "int hit = 0;"
    },
    {
        "line": 83,
        "fullcodeline": "const char *zTabName = pItem->zAlias ? pItem->zAlias : pTab->zName;"
    },
    {
        "line": 84,
        "fullcodeline": "assert( zTabName!=0 );"
    },
    {
        "line": 93,
        "fullcodeline": "pMatch = pItem;"
    },
    {
        "line": 119,
        "fullcodeline": "ExprSetProperty(pExpr, EP_CanBeNull);"
    },
    {
        "line": 137,
        "fullcodeline": "pExpr->iTable = 1;"
    },
    {
        "line": 138,
        "fullcodeline": "pTab = pParse->pTriggerTab;"
    },
    {
        "line": 150,
        "fullcodeline": "pExpr->iTable = 2;"
    },
    {
        "line": 169,
        "fullcodeline": "iCol = -1;"
    },
    {
        "line": 172,
        "fullcodeline": "cnt++;"
    },
    {
        "line": 214,
        "fullcodeline": "&& cntTab==1"
    },
    {
        "line": 253,
        "fullcodeline": "assert( pExpr->pLeft==0 && pExpr->pRight==0 );"
    },
    {
        "line": 254,
        "fullcodeline": "assert( pExpr->x.pList==0 );"
    },
    {
        "line": 255,
        "fullcodeline": "assert( pExpr->x.pSelect==0 );"
    },
    {
        "line": 269,
        "fullcodeline": "resolveAlias(pParse, pEList, j, pExpr, \"\", nSubquery);"
    },
    {
        "line": 270,
        "fullcodeline": "cnt = 1;"
    },
    {
        "line": 271,
        "fullcodeline": "pMatch = 0;"
    },
    {
        "line": 272,
        "fullcodeline": "assert( zTab==0 && zDb==0 );"
    },
    {
        "line": 345,
        "fullcodeline": "sqlite3ErrorMsg(pParse, \"%s: %s\", zErr, zCol);"
    },
    {
        "line": 68,
        "fullcodeline": "for(j=0; j<pEList->nExpr; j++){"
    },
    {
        "line": 77,
        "fullcodeline": "if( hit || zTab==0 ) continue;"
    },
    {
        "line": 85,
        "fullcodeline": "if( sqlite3StrICmp(zTabName, zTab)!=0 ){"
    },
    {
        "line": 88,
        "fullcodeline": "if( IN_RENAME_OBJECT && pItem->zAlias ){"
    },
    {
        "line": 96,
        "fullcodeline": "if( sqlite3StrICmp(pCol->zName, zCol)==0 ){"
    },
    {
        "line": 160,
        "fullcodeline": "if( sqlite3StrICmp(pCol->zName, zCol)==0 ){"
    },
    {
        "line": 174,
        "fullcodeline": "if( pExpr->iTable==2 ){"
    },
    {
        "line": 257,
        "fullcodeline": "if( (pNC->ncFlags&NC_AllowAgg)==0 && ExprHasProperty(pOrig, EP_Agg) ){"
    },
    {
        "line": 261,
        "fullcodeline": "if( (pNC->ncFlags&NC_AllowWin)==0 && ExprHasProperty(pOrig, EP_Win) ){"
    },
    {
        "line": 265,
        "fullcodeline": "if( sqlite3ExprVectorSize(pOrig)!=1 ){"
    },
    {
        "line": 89,
        "fullcodeline": "sqlite3RenameTokenRemap(pParse, 0, (void*)&pExpr->y.pTab);"
    },
    {
        "line": 105,
        "fullcodeline": "cnt++;"
    },
    {
        "line": 106,
        "fullcodeline": "pMatch = pItem;"
    },
    {
        "line": 108,
        "fullcodeline": "pExpr->iColumn = j==pTab->iPKey ? -1 : (i16)j;"
    },
    {
        "line": 139,
        "fullcodeline": "}else if( op!=TK_INSERT && sqlite3StrICmp(\"old\",zTab)==0 ){"
    },
    {
        "line": 175,
        "fullcodeline": "testcase( iCol==(-1) );"
    },
    {
        "line": 258,
        "fullcodeline": "sqlite3ErrorMsg(pParse, \"misuse of aliased aggregate %s\", zAs);"
    },
    {
        "line": 262,
        "fullcodeline": "sqlite3ErrorMsg(pParse, \"misuse of aliased window function %s\",zAs);"
    },
    {
        "line": 266,
        "fullcodeline": "sqlite3ErrorMsg(pParse, \"row value misused\");"
    },
    {
        "line": 274,
        "fullcodeline": "sqlite3RenameTokenRemap(pParse, 0, (void*)pExpr);"
    },
    {
        "line": 69,
        "fullcodeline": "if( sqlite3MatchSpanName(pEList->a[j].zSpan, zCol, zTab, zDb) ){"
    },
    {
        "line": 101,
        "fullcodeline": "if( cnt==1 ){"
    },
    {
        "line": 140,
        "fullcodeline": "pExpr->iTable = 0;"
    },
    {
        "line": 141,
        "fullcodeline": "pTab = pParse->pTriggerTab;"
    },
    {
        "line": 161,
        "fullcodeline": "if( iCol==pTab->iPKey ){"
    },
    {
        "line": 200,
        "fullcodeline": "pExpr->y.pTab = pTab;"
    },
    {
        "line": 201,
        "fullcodeline": "pExpr->iColumn = (i16)iCol;"
    },
    {
        "line": 202,
        "fullcodeline": "eNewExprOp = TK_TRIGGER;"
    },
    {
        "line": 70,
        "fullcodeline": "cnt++;"
    },
    {
        "line": 71,
        "fullcodeline": "cntTab = 2;"
    },
    {
        "line": 72,
        "fullcodeline": "pMatch = pItem;"
    },
    {
        "line": 73,
        "fullcodeline": "pExpr->iColumn = j;"
    },
    {
        "line": 74,
        "fullcodeline": "hit = 1;"
    },
    {
        "line": 162,
        "fullcodeline": "iCol = -1;"
    },
    {
        "line": 177,
        "fullcodeline": "pExpr->iColumn = iCol;"
    },
    {
        "line": 178,
        "fullcodeline": "pExpr->y.pTab = pTab;"
    },
    {
        "line": 179,
        "fullcodeline": "eNewExprOp = TK_COLUMN;"
    },
    {
        "line": 189,
        "fullcodeline": "if( iCol<0 ){"
    },
    {
        "line": 102,
        "fullcodeline": "if( pItem->fg.jointype & JT_NATURAL ) continue;"
    },
    {
        "line": 103,
        "fullcodeline": "if( nameInUsingClause(pItem->pUsing, zCol) ) continue;"
    },
    {
        "line": 181,
        "fullcodeline": "pExpr->iTable = pNC->uNC.pUpsert->regData + iCol;"
    },
    {
        "line": 182,
        "fullcodeline": "eNewExprOp = TK_REGISTER;"
    },
    {
        "line": 183,
        "fullcodeline": "ExprSetProperty(pExpr, EP_Alias);"
    },
    {
        "line": 190,
        "fullcodeline": "pExpr->affExpr = SQLITE_AFF_INTEGER;"
    },
    {
        "line": 191,
        "fullcodeline": "}else if( pExpr->iTable==0 ){"
    },
    {
        "line": 192,
        "fullcodeline": "testcase( iCol==31 );"
    },
    {
        "line": 193,
        "fullcodeline": "testcase( iCol==32 );"
    },
    {
        "line": 194,
        "fullcodeline": "pParse->oldmask |= (iCol>=32 ? 0xffffffff : (((u32)1)<<iCol));"
    },
    {
        "line": 196,
        "fullcodeline": "testcase( iCol==31 );"
    },
    {
        "line": 197,
        "fullcodeline": "testcase( iCol==32 );"
    },
    {
        "line": 198,
        "fullcodeline": "pParse->newmask |= (iCol>=32 ? 0xffffffff : (((u32)1)<<iCol));"
    }
]