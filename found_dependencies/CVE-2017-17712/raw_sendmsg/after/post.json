[
    {
        "line": 3,
        "fullcodeline": "struct inet_sock *inet = inet_sk(sk);"
    },
    {
        "line": 4,
        "fullcodeline": "struct net *net = sock_net(sk);"
    },
    {
        "line": 6,
        "fullcodeline": "struct rtable *rt = NULL;"
    },
    {
        "line": 8,
        "fullcodeline": "int free = 0;"
    },
    {
        "line": 17,
        "fullcodeline": "err = -EMSGSIZE;"
    },
    {
        "line": 24,
        "fullcodeline": "hdrincl = inet->hdrincl;"
    },
    {
        "line": 29,
        "fullcodeline": "err = -EOPNOTSUPP;"
    },
    {
        "line": 61,
        "fullcodeline": "ipc.sockc.tsflags = sk->sk_tsflags;"
    },
    {
        "line": 62,
        "fullcodeline": "ipc.addr = inet->inet_saddr;"
    },
    {
        "line": 63,
        "fullcodeline": "ipc.opt = NULL;"
    },
    {
        "line": 64,
        "fullcodeline": "ipc.tx_flags = 0;"
    },
    {
        "line": 65,
        "fullcodeline": "ipc.ttl = 0;"
    },
    {
        "line": 66,
        "fullcodeline": "ipc.tos = -1;"
    },
    {
        "line": 67,
        "fullcodeline": "ipc.oif = sk->sk_bound_dev_if;"
    },
    {
        "line": 79,
        "fullcodeline": "saddr = ipc.addr;"
    },
    {
        "line": 80,
        "fullcodeline": "ipc.addr = daddr;"
    },
    {
        "line": 108,
        "fullcodeline": "tos = get_rtconn_flags(&ipc, sk);"
    },
    {
        "line": 120,
        "fullcodeline": "flowi4_init_output(&fl4, ipc.oif, sk->sk_mark, tos,"
    },
    {
        "line": 136,
        "fullcodeline": "security_sk_classify_flow(sk, flowi4_to_flowi(&fl4));"
    },
    {
        "line": 137,
        "fullcodeline": "rt = ip_route_output_flow(net, &fl4, sk);"
    },
    {
        "line": 144,
        "fullcodeline": "err = -EACCES;"
    },
    {
        "line": 177,
        "fullcodeline": "ip_rt_put(rt);"
    },
    {
        "line": 189,
        "fullcodeline": "err = 0;"
    },
    {
        "line": 18,
        "fullcodeline": "if (len > 0xFFFF)"
    },
    {
        "line": 30,
        "fullcodeline": "if (msg->msg_flags & MSG_OOB)\t/* Mirror BSD error message */"
    },
    {
        "line": 82,
        "fullcodeline": "if (!ipc.opt) {"
    },
    {
        "line": 109,
        "fullcodeline": "if (msg->msg_flags & MSG_DONTROUTE)"
    },
    {
        "line": 112,
        "fullcodeline": "if (ipv4_is_multicast(daddr)) {"
    },
    {
        "line": 122,
        "fullcodeline": "hdrincl ? IPPROTO_RAW : sk->sk_protocol,"
    },
    {
        "line": 123,
        "fullcodeline": "inet_sk_flowi_flags(sk) |"
    },
    {
        "line": 127,
        "fullcodeline": "if (!hdrincl) {"
    },
    {
        "line": 138,
        "fullcodeline": "if (IS_ERR(rt)) {"
    },
    {
        "line": 145,
        "fullcodeline": "if (rt->rt_flags & RTCF_BROADCAST && !sock_flag(sk, SOCK_BROADCAST))"
    },
    {
        "line": 148,
        "fullcodeline": "if (msg->msg_flags & MSG_CONFIRM)"
    },
    {
        "line": 180,
        "fullcodeline": "if (err < 0)"
    },
    {
        "line": 185,
        "fullcodeline": "if (msg->msg_flags & MSG_PROBE)"
    },
    {
        "line": 187,
        "fullcodeline": "if (!(msg->msg_flags & MSG_PROBE) || len)"
    },
    {
        "line": 39,
        "fullcodeline": "err = -EINVAL;"
    },
    {
        "line": 70,
        "fullcodeline": "err = ip_cmsg_send(sk, msg, &ipc, false);"
    },
    {
        "line": 85,
        "fullcodeline": "rcu_read_lock();"
    },
    {
        "line": 86,
        "fullcodeline": "inet_opt = rcu_dereference(inet->inet_opt);"
    },
    {
        "line": 92,
        "fullcodeline": "rcu_read_unlock();"
    },
    {
        "line": 96,
        "fullcodeline": "err = -EINVAL;"
    },
    {
        "line": 110,
        "fullcodeline": "tos |= RTO_ONLINK;"
    },
    {
        "line": 124,
        "fullcodeline": "(hdrincl ? FLOWI_FLAG_KNOWN_NH : 0),"
    },
    {
        "line": 128,
        "fullcodeline": "rfv.msg = msg;"
    },
    {
        "line": 129,
        "fullcodeline": "rfv.hlen = 0;"
    },
    {
        "line": 131,
        "fullcodeline": "err = raw_probe_proto_opt(&rfv, &fl4);"
    },
    {
        "line": 139,
        "fullcodeline": "err = PTR_ERR(rt);"
    },
    {
        "line": 140,
        "fullcodeline": "rt = NULL;"
    },
    {
        "line": 153,
        "fullcodeline": "err = raw_send_hdrinc(sk, &fl4, msg, len,"
    },
    {
        "line": 176,
        "fullcodeline": "kfree(ipc.opt);"
    },
    {
        "line": 186,
        "fullcodeline": "dst_confirm_neigh(&rt->dst, &fl4.daddr);"
    },
    {
        "line": 40,
        "fullcodeline": "if (msg->msg_namelen < sizeof(*usin))"
    },
    {
        "line": 42,
        "fullcodeline": "if (usin->sin_family != AF_INET) {"
    },
    {
        "line": 55,
        "fullcodeline": "err = -EDESTADDRREQ;"
    },
    {
        "line": 58,
        "fullcodeline": "daddr = inet->inet_daddr;"
    },
    {
        "line": 71,
        "fullcodeline": "if (unlikely(err)) {"
    },
    {
        "line": 113,
        "fullcodeline": "if (!ipc.oif)"
    },
    {
        "line": 115,
        "fullcodeline": "if (!saddr)"
    },
    {
        "line": 157,
        "fullcodeline": "sock_tx_timestamp(sk, ipc.sockc.tsflags, &ipc.tx_flags);"
    },
    {
        "line": 161,
        "fullcodeline": "lock_sock(sk);"
    },
    {
        "line": 162,
        "fullcodeline": "err = ip_append_data(sk, &fl4, raw_getfrag,"
    },
    {
        "line": 172,
        "fullcodeline": "release_sock(sk);"
    },
    {
        "line": 43,
        "fullcodeline": "pr_info_once(\"%s: %s forgot to set AF_INET. Fix it!\\n\","
    },
    {
        "line": 45,
        "fullcodeline": "err = -EAFNOSUPPORT;"
    },
    {
        "line": 56,
        "fullcodeline": "if (sk->sk_state != TCP_ESTABLISHED)"
    },
    {
        "line": 72,
        "fullcodeline": "kfree(ipc.opt);"
    },
    {
        "line": 76,
        "fullcodeline": "free = 1;"
    },
    {
        "line": 88,
        "fullcodeline": "memcpy(&opt_copy, inet_opt,"
    },
    {
        "line": 90,
        "fullcodeline": "ipc.opt = &opt_copy.opt;"
    },
    {
        "line": 114,
        "fullcodeline": "ipc.oif = inet->mc_index;"
    },
    {
        "line": 116,
        "fullcodeline": "saddr = inet->mc_addr;"
    },
    {
        "line": 117,
        "fullcodeline": "} else if (!ipc.oif)"
    },
    {
        "line": 159,
        "fullcodeline": "if (!ipc.addr)"
    },
    {
        "line": 103,
        "fullcodeline": "if (!daddr)"
    },
    {
        "line": 118,
        "fullcodeline": "ipc.oif = inet->uc_index;"
    },
    {
        "line": 160,
        "fullcodeline": "ipc.addr = fl4.daddr;"
    },
    {
        "line": 166,
        "fullcodeline": "ip_flush_pending_frames(sk);"
    },
    {
        "line": 167,
        "fullcodeline": "else if (!(msg->msg_flags & MSG_MORE)) {"
    },
    {
        "line": 168,
        "fullcodeline": "err = ip_push_pending_frames(sk, &fl4);"
    },
    {
        "line": 169,
        "fullcodeline": "if (err == -ENOBUFS && !inet->recverr)"
    },
    {
        "line": 170,
        "fullcodeline": "err = 0;"
    }
]