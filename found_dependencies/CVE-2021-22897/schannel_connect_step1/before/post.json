[
    {
        "line": 4,
        "fullcodeline": "ssize_t written = -1;"
    },
    {
        "line": 14,
        "fullcodeline": "PCCERT_CONTEXT client_certs[1] = { NULL };"
    },
    {
        "line": 15,
        "fullcodeline": "SECURITY_STATUS sspi_status = SEC_E_OK;"
    },
    {
        "line": 16,
        "fullcodeline": "struct Curl_schannel_cred *old_cred = NULL;"
    },
    {
        "line": 23,
        "fullcodeline": "char * const hostname = SSL_HOST_NAME();"
    },
    {
        "line": 25,
        "fullcodeline": "DEBUGF(infof(data,"
    },
    {
        "line": 46,
        "fullcodeline": "BACKEND->use_alpn = false;"
    },
    {
        "line": 80,
        "fullcodeline": "BACKEND->cred = NULL;"
    },
    {
        "line": 481,
        "fullcodeline": "InitSecBuffer(&inbuf, SECBUFFER_EMPTY, NULL, 0);"
    },
    {
        "line": 482,
        "fullcodeline": "InitSecBufferDesc(&inbuf_desc, &inbuf, 1);"
    },
    {
        "line": 486,
        "fullcodeline": "InitSecBuffer(&outbuf, SECBUFFER_EMPTY, NULL, 0);"
    },
    {
        "line": 487,
        "fullcodeline": "InitSecBufferDesc(&outbuf_desc, &outbuf, 1);"
    },
    {
        "line": 490,
        "fullcodeline": "BACKEND->req_flags = ISC_REQ_SEQUENCE_DETECT | ISC_REQ_REPLAY_DETECT |"
    },
    {
        "line": 499,
        "fullcodeline": "BACKEND->ctxt = (struct Curl_schannel_ctxt *)"
    },
    {
        "line": 506,
        "fullcodeline": "host_name = curlx_convert_UTF8_to_tchar(hostname);"
    },
    {
        "line": 517,
        "fullcodeline": "sspi_status = s_pSecFn->InitializeSecurityContext("
    },
    {
        "line": 523,
        "fullcodeline": "curlx_unicodefree(host_name);"
    },
    {
        "line": 555,
        "fullcodeline": "DEBUGF(infof(data, \"schannel: sending initial handshake data: \""
    },
    {
        "line": 559,
        "fullcodeline": "result = Curl_write_plain(data, conn->sock[sockindex], outbuf.pvBuffer,"
    },
    {
        "line": 561,
        "fullcodeline": "s_pSecFn->FreeContextBuffer(outbuf.pvBuffer);"
    },
    {
        "line": 568,
        "fullcodeline": "DEBUGF(infof(data, \"schannel: sent initial handshake data: \""
    },
    {
        "line": 571,
        "fullcodeline": "BACKEND->recv_unrecoverable_err = CURLE_OK;"
    },
    {
        "line": 572,
        "fullcodeline": "BACKEND->recv_sspi_close_notify = false;"
    },
    {
        "line": 573,
        "fullcodeline": "BACKEND->recv_connection_closed = false;"
    },
    {
        "line": 574,
        "fullcodeline": "BACKEND->encdata_is_incomplete = false;"
    },
    {
        "line": 577,
        "fullcodeline": "connssl->connecting_state = ssl_connect_2;"
    },
    {
        "line": 29,
        "fullcodeline": "if(curlx_verify_windows_version(5, 1, PLATFORM_WINNT,"
    },
    {
        "line": 73,
        "fullcodeline": "if(SSL_CONN_CONFIG(CAfile) || SSL_CONN_CONFIG(ca_info_blob)) {"
    },
    {
        "line": 100,
        "fullcodeline": "if(!BACKEND->cred) {"
    },
    {
        "line": 424,
        "fullcodeline": "if(Curl_inet_pton(AF_INET, hostname, &addr)"
    },
    {
        "line": 494,
        "fullcodeline": "if(!SSL_SET_OPTION(auto_client_cert)) {"
    },
    {
        "line": 501,
        "fullcodeline": "if(!BACKEND->ctxt) {"
    },
    {
        "line": 507,
        "fullcodeline": "if(!host_name)"
    },
    {
        "line": 525,
        "fullcodeline": "if(sspi_status != SEC_I_CONTINUE_NEEDED) {"
    },
    {
        "line": 562,
        "fullcodeline": "if((result != CURLE_OK) || (outbuf.cbBuffer != (size_t) written)) {"
    },
    {
        "line": 33,
        "fullcodeline": "infof(data, \"schannel: Windows version is old and may not be able to \""
    },
    {
        "line": 74,
        "fullcodeline": "failf(data, \"schannel: CA cert support not built in\");"
    },
    {
        "line": 84,
        "fullcodeline": "Curl_ssl_sessionid_lock(data);"
    },
    {
        "line": 97,
        "fullcodeline": "Curl_ssl_sessionid_unlock(data);"
    },
    {
        "line": 102,
        "fullcodeline": "memset(&schannel_cred, 0, sizeof(schannel_cred));"
    },
    {
        "line": 103,
        "fullcodeline": "schannel_cred.dwVersion = SCHANNEL_CRED_VERSION;"
    },
    {
        "line": 380,
        "fullcodeline": "BACKEND->cred = (struct Curl_schannel_cred *)"
    },
    {
        "line": 390,
        "fullcodeline": "BACKEND->cred->refcount = 1;"
    },
    {
        "line": 394,
        "fullcodeline": "sspi_status ="
    },
    {
        "line": 429,
        "fullcodeline": "infof(data, \"schannel: using IP address, SNI is not supported by OS.\\n\");"
    },
    {
        "line": 495,
        "fullcodeline": "BACKEND->req_flags |= ISC_REQ_USE_SUPPLIED_CREDS;"
    },
    {
        "line": 500,
        "fullcodeline": "calloc(1, sizeof(struct Curl_schannel_ctxt));"
    },
    {
        "line": 502,
        "fullcodeline": "failf(data, \"schannel: unable to allocate memory\");"
    },
    {
        "line": 519,
        "fullcodeline": "(BACKEND->use_alpn ? &inbuf_desc : NULL),"
    },
    {
        "line": 526,
        "fullcodeline": "char buffer[STRERROR_LEN];"
    },
    {
        "line": 527,
        "fullcodeline": "Curl_safefree(BACKEND->ctxt);"
    },
    {
        "line": 563,
        "fullcodeline": "failf(data, \"schannel: failed to send initial handshake data: \""
    },
    {
        "line": 85,
        "fullcodeline": "if(!Curl_ssl_getsessionid(data, conn,"
    },
    {
        "line": 148,
        "fullcodeline": "if(!SSL_SET_OPTION(auto_client_cert)) {"
    },
    {
        "line": 178,
        "fullcodeline": "if(SSL_CONN_CONFIG(cipher_list)) {"
    },
    {
        "line": 382,
        "fullcodeline": "if(!BACKEND->cred) {"
    },
    {
        "line": 395,
        "fullcodeline": "s_pSecFn->AcquireCredentialsHandle(NULL, (TCHAR *)UNISP_NAME,"
    },
    {
        "line": 404,
        "fullcodeline": "if(sspi_status != SEC_E_OK) {"
    },
    {
        "line": 88,
        "fullcodeline": "BACKEND->cred = old_cred;"
    },
    {
        "line": 89,
        "fullcodeline": "DEBUGF(infof(data, \"schannel: re-using existing credential handle\\n\"));"
    },
    {
        "line": 93,
        "fullcodeline": "DEBUGF(infof(data,"
    },
    {
        "line": 111,
        "fullcodeline": "schannel_cred.dwFlags = SCH_CRED_AUTO_CRED_VALIDATION;"
    },
    {
        "line": 142,
        "fullcodeline": "schannel_cred.dwFlags |= SCH_CRED_NO_SERVERNAME_CHECK;"
    },
    {
        "line": 143,
        "fullcodeline": "DEBUGF(infof(data, \"schannel: verifyhost setting prevents Schannel from \""
    },
    {
        "line": 149,
        "fullcodeline": "schannel_cred.dwFlags &= ~SCH_CRED_USE_DEFAULT_CREDS;"
    },
    {
        "line": 150,
        "fullcodeline": "schannel_cred.dwFlags |= SCH_CRED_NO_DEFAULT_CREDS;"
    },
    {
        "line": 151,
        "fullcodeline": "infof(data, \"schannel: disabled automatic use of client certificate\\n\");"
    },
    {
        "line": 171,
        "fullcodeline": "failf(data, \"SSL versions not supported\");"
    },
    {
        "line": 174,
        "fullcodeline": "failf(data, \"Unrecognized parameter passed via CURLOPT_SSLVERSION\");"
    },
    {
        "line": 179,
        "fullcodeline": "result = set_ssl_ciphers(&schannel_cred, SSL_CONN_CONFIG(cipher_list));"
    },
    {
        "line": 374,
        "fullcodeline": "failf(data, \"schannel: client cert support not built in\");"
    },
    {
        "line": 381,
        "fullcodeline": "calloc(1, sizeof(struct Curl_schannel_cred));"
    },
    {
        "line": 383,
        "fullcodeline": "failf(data, \"schannel: unable to allocate memory\");"
    },
    {
        "line": 402,
        "fullcodeline": "CertFreeCertificateContext(client_certs[0]);"
    },
    {
        "line": 405,
        "fullcodeline": "char buffer[STRERROR_LEN];"
    },
    {
        "line": 406,
        "fullcodeline": "failf(data, \"schannel: AcquireCredentialsHandle failed: %s\","
    },
    {
        "line": 408,
        "fullcodeline": "Curl_safefree(BACKEND->cred);"
    },
    {
        "line": 530,
        "fullcodeline": "failf(data, \"schannel: initial InitializeSecurityContext failed: %s\","
    },
    {
        "line": 534,
        "fullcodeline": "failf(data, \"schannel: SNI or certificate check failed: %s\","
    },
    {
        "line": 549,
        "fullcodeline": "failf(data, \"schannel: initial InitializeSecurityContext failed: %s\","
    },
    {
        "line": 86,
        "fullcodeline": "SSL_IS_PROXY() ? TRUE : FALSE,"
    },
    {
        "line": 87,
        "fullcodeline": "(void **)&old_cred, NULL, sockindex)) {"
    },
    {
        "line": 113,
        "fullcodeline": "if(SSL_SET_OPTION(no_revoke)) {"
    },
    {
        "line": 134,
        "fullcodeline": "schannel_cred.dwFlags = SCH_CRED_MANUAL_CRED_VALIDATION |"
    },
    {
        "line": 137,
        "fullcodeline": "DEBUGF(infof(data,"
    },
    {
        "line": 154,
        "fullcodeline": "infof(data, \"schannel: enabled automatic use of client certificate\\n\");"
    },
    {
        "line": 164,
        "fullcodeline": "result = set_ssl_version_min_max(&schannel_cred, data, conn);"
    },
    {
        "line": 180,
        "fullcodeline": "if(CURLE_OK != result) {"
    },
    {
        "line": 407,
        "fullcodeline": "Curl_sspi_strerror(sspi_status, buffer, sizeof(buffer)));"
    },
    {
        "line": 531,
        "fullcodeline": "Curl_sspi_strerror(sspi_status, buffer, sizeof(buffer)));"
    },
    {
        "line": 535,
        "fullcodeline": "Curl_sspi_strerror(sspi_status, buffer, sizeof(buffer)));"
    },
    {
        "line": 550,
        "fullcodeline": "Curl_sspi_strerror(sspi_status, buffer, sizeof(buffer)));"
    },
    {
        "line": 114,
        "fullcodeline": "schannel_cred.dwFlags |= SCH_CRED_IGNORE_NO_REVOCATION_CHECK |"
    },
    {
        "line": 117,
        "fullcodeline": "DEBUGF(infof(data, \"schannel: disabled server certificate revocation \""
    },
    {
        "line": 165,
        "fullcodeline": "if(result != CURLE_OK)"
    },
    {
        "line": 181,
        "fullcodeline": "failf(data, \"Unable to set ciphers to passed via SSL_CONN_CONFIG\");"
    },
    {
        "line": 386,
        "fullcodeline": "CertFreeCertificateContext(client_certs[0]);"
    },
    {
        "line": 120,
        "fullcodeline": "else if(SSL_SET_OPTION(revoke_best_effort)) {"
    },
    {
        "line": 121,
        "fullcodeline": "schannel_cred.dwFlags |= SCH_CRED_IGNORE_NO_REVOCATION_CHECK |"
    },
    {
        "line": 124,
        "fullcodeline": "DEBUGF(infof(data, \"schannel: ignore revocation offline errors\"));"
    },
    {
        "line": 127,
        "fullcodeline": "schannel_cred.dwFlags |= SCH_CRED_REVOCATION_CHECK_CHAIN;"
    },
    {
        "line": 129,
        "fullcodeline": "DEBUGF(infof(data,"
    }
]