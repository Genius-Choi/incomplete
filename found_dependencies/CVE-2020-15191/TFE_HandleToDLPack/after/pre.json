[
    {
        "line": 2,
        "fullcodeline": "auto tf_dlm_context = GetDlContext(h, status);"
    },
    {
        "line": 7,
        "fullcodeline": "auto* tf_dlm_data = TFE_TensorHandleDevicePointer(h, status);"
    },
    {
        "line": 12,
        "fullcodeline": "const Tensor* tensor = GetTensorFromHandle(h, status);"
    },
    {
        "line": 13,
        "fullcodeline": "TF_DataType data_type = static_cast<TF_DataType>(tensor->dtype());"
    },
    {
        "line": 15,
        "fullcodeline": "auto tf_dlm_type = GetDlDataType(data_type, status);"
    },
    {
        "line": 20,
        "fullcodeline": "TensorReference tensor_ref(*tensor);  // This will call buf_->Ref()"
    },
    {
        "line": 21,
        "fullcodeline": "auto* tf_dlm_tensor_ctx = new TfDlManagedTensorCtx(tensor_ref);"
    },
    {
        "line": 22,
        "fullcodeline": "tf_dlm_tensor_ctx->reference = tensor_ref;"
    },
    {
        "line": 24,
        "fullcodeline": "DLManagedTensor* dlm_tensor = &tf_dlm_tensor_ctx->tensor;"
    },
    {
        "line": 25,
        "fullcodeline": "dlm_tensor->manager_ctx = tf_dlm_tensor_ctx;"
    },
    {
        "line": 26,
        "fullcodeline": "dlm_tensor->deleter = &DLManagedTensorDeleter;"
    },
    {
        "line": 28,
        "fullcodeline": "int ndim = tensor->dims();"
    },
    {
        "line": 35,
        "fullcodeline": "shape_arr->resize(ndim);"
    },
    {
        "line": 36,
        "fullcodeline": "stride_arr->resize(ndim, 1);"
    },
    {
        "line": 3,
        "fullcodeline": "if (!status->status.ok()) {"
    },
    {
        "line": 33,
        "fullcodeline": "std::vector<int64_t>* shape_arr = &tf_dlm_tensor_ctx->shape;"
    },
    {
        "line": 34,
        "fullcodeline": "std::vector<int64_t>* stride_arr = &tf_dlm_tensor_ctx->strides;"
    },
    {
        "line": 37,
        "fullcodeline": "for (int i = 0; i < ndim; i++) {"
    },
    {
        "line": 40,
        "fullcodeline": "for (int i = ndim - 2; i >= 0; --i) {"
    },
    {
        "line": 44,
        "fullcodeline": "dlm_tensor->dl_tensor.shape = shape_arr->data();"
    },
    {
        "line": 50,
        "fullcodeline": "dlm_tensor->dl_tensor.strides = stride_arr->data();"
    },
    {
        "line": 54,
        "fullcodeline": "return static_cast<void*>(dlm_tensor);"
    },
    {
        "line": 8,
        "fullcodeline": "if (!status->status.ok()) {"
    },
    {
        "line": 16,
        "fullcodeline": "if (!status->status.ok()) {"
    },
    {
        "line": 38,
        "fullcodeline": "(*shape_arr)[i] = tensor->dim_size(i);"
    },
    {
        "line": 41,
        "fullcodeline": "(*stride_arr)[i] = (*shape_arr)[i + 1] * (*stride_arr)[i + 1];"
    }
]