[
    {
        "line": 9,
        "fullcodeline": "sqlite3 *db = pParse->db; /* The database connection */"
    },
    {
        "line": 16,
        "fullcodeline": "assert( !db->mallocFailed );"
    },
    {
        "line": 17,
        "fullcodeline": "p = pParse->pNewTable;"
    },
    {
        "line": 42,
        "fullcodeline": "assert( (p->tabFlags & TF_HasPrimaryKey)==0"
    },
    {
        "line": 44,
        "fullcodeline": "assert( (p->tabFlags & TF_HasPrimaryKey)!=0"
    },
    {
        "line": 61,
        "fullcodeline": "iDb = sqlite3SchemaToIndex(db, p->pSchema);"
    },
    {
        "line": 94,
        "fullcodeline": "estimateTableWidth(p);"
    },
    {
        "line": 13,
        "fullcodeline": "if( pEnd==0 && pSelect==0 ){"
    },
    {
        "line": 18,
        "fullcodeline": "if( p==0 ) return;"
    },
    {
        "line": 20,
        "fullcodeline": "if( pSelect==0 && sqlite3ShadowTableName(db, p->zName) ){"
    },
    {
        "line": 48,
        "fullcodeline": "if( tabOpts & TF_WithoutRowid ){"
    },
    {
        "line": 71,
        "fullcodeline": "if( p->tabFlags & TF_HasGenerated ){"
    },
    {
        "line": 95,
        "fullcodeline": "for(pIdx=p->pIndex; pIdx; pIdx=pIdx->pNext){"
    },
    {
        "line": 21,
        "fullcodeline": "p->tabFlags |= TF_Shadow;"
    },
    {
        "line": 43,
        "fullcodeline": "|| p->iPKey>=0 || sqlite3PrimaryKeyIndex(p)!=0 );"
    },
    {
        "line": 45,
        "fullcodeline": "|| (p->iPKey<0 && sqlite3PrimaryKeyIndex(p)==0) );"
    },
    {
        "line": 58,
        "fullcodeline": "p->tabFlags |= TF_WithoutRowid | TF_NoVisibleRowid;"
    },
    {
        "line": 59,
        "fullcodeline": "convertToWithoutRowidTable(pParse, p);"
    },
    {
        "line": 67,
        "fullcodeline": "sqlite3ResolveSelfReference(pParse, p, NC_IsCheck, 0, p->pCheck);"
    },
    {
        "line": 72,
        "fullcodeline": "int ii, nNG = 0;"
    },
    {
        "line": 73,
        "fullcodeline": "testcase( p->tabFlags & TF_HasVirtual );"
    },
    {
        "line": 74,
        "fullcodeline": "testcase( p->tabFlags & TF_HasStored );"
    },
    {
        "line": 96,
        "fullcodeline": "estimateIndexWidth(pIdx);"
    },
    {
        "line": 112,
        "fullcodeline": "v = sqlite3GetVdbe(pParse);"
    },
    {
        "line": 115,
        "fullcodeline": "sqlite3VdbeAddOp1(v, OP_Close, 0);"
    },
    {
        "line": 205,
        "fullcodeline": "sqlite3NestedParse(pParse,"
    },
    {
        "line": 217,
        "fullcodeline": "sqlite3DbFree(db, zStmt);"
    },
    {
        "line": 218,
        "fullcodeline": "sqlite3ChangeCookie(pParse, iDb);"
    },
    {
        "line": 237,
        "fullcodeline": "sqlite3VdbeAddParseSchemaOp(v, iDb,"
    },
    {
        "line": 245,
        "fullcodeline": "Schema *pSchema = p->pSchema;"
    },
    {
        "line": 246,
        "fullcodeline": "assert( sqlite3SchemaMutexHeld(db, iDb, 0) );"
    },
    {
        "line": 247,
        "fullcodeline": "pOld = sqlite3HashInsert(&pSchema->tblHash, p->zName, p);"
    },
    {
        "line": 253,
        "fullcodeline": "pParse->pNewTable = 0;"
    },
    {
        "line": 254,
        "fullcodeline": "db->mDbFlags |= DBFLAG_SchemaChange;"
    },
    {
        "line": 39,
        "fullcodeline": "if( p->tnum==1 ) p->tabFlags |= TF_Readonly;"
    },
    {
        "line": 49,
        "fullcodeline": "if( (p->tabFlags & TF_Autoincrement) ){"
    },
    {
        "line": 54,
        "fullcodeline": "if( (p->tabFlags & TF_HasPrimaryKey)==0 ){"
    },
    {
        "line": 75,
        "fullcodeline": "for(ii=0; ii<p->nCol; ii++){"
    },
    {
        "line": 86,
        "fullcodeline": "if( nNG==0 ){"
    },
    {
        "line": 113,
        "fullcodeline": "if( NEVER(v==0) ) return;"
    },
    {
        "line": 120,
        "fullcodeline": "if( p->pSelect==0 ){"
    },
    {
        "line": 224,
        "fullcodeline": "if( (p->tabFlags & TF_Autoincrement)!=0 ){"
    },
    {
        "line": 238,
        "fullcodeline": "sqlite3MPrintf(db, \"tbl_name='%q' AND type!='trigger'\", p->zName));"
    },
    {
        "line": 257,
        "fullcodeline": "if( !p->pSelect ){"
    },
    {
        "line": 35,
        "fullcodeline": "sqlite3ErrorMsg(pParse, \"\");"
    },
    {
        "line": 50,
        "fullcodeline": "sqlite3ErrorMsg(pParse,"
    },
    {
        "line": 55,
        "fullcodeline": "sqlite3ErrorMsg(pParse, \"PRIMARY KEY missing on table %s\", p->zName);"
    },
    {
        "line": 87,
        "fullcodeline": "sqlite3ErrorMsg(pParse, \"must have at least one non-generated column\");"
    },
    {
        "line": 122,
        "fullcodeline": "zType = \"table\";"
    },
    {
        "line": 123,
        "fullcodeline": "zType2 = \"TABLE\";"
    },
    {
        "line": 154,
        "fullcodeline": "regYield = ++pParse->nMem;"
    },
    {
        "line": 155,
        "fullcodeline": "regRec = ++pParse->nMem;"
    },
    {
        "line": 156,
        "fullcodeline": "regRowid = ++pParse->nMem;"
    },
    {
        "line": 157,
        "fullcodeline": "assert(pParse->nTab==1);"
    },
    {
        "line": 158,
        "fullcodeline": "sqlite3MayAbort(pParse);"
    },
    {
        "line": 159,
        "fullcodeline": "sqlite3VdbeAddOp3(v, OP_OpenWrite, 1, pParse->regRoot, iDb);"
    },
    {
        "line": 160,
        "fullcodeline": "sqlite3VdbeChangeP5(v, OPFLAG_P2ISREG);"
    },
    {
        "line": 161,
        "fullcodeline": "pParse->nTab = 2;"
    },
    {
        "line": 162,
        "fullcodeline": "addrTop = sqlite3VdbeCurrentAddr(v) + 1;"
    },
    {
        "line": 163,
        "fullcodeline": "sqlite3VdbeAddOp3(v, OP_InitCoroutine, regYield, 0, addrTop);"
    },
    {
        "line": 165,
        "fullcodeline": "pSelTab = sqlite3ResultSetOfSelect(pParse, pSelect, SQLITE_AFF_BLOB);"
    },
    {
        "line": 167,
        "fullcodeline": "assert( p->aCol==0 );"
    },
    {
        "line": 168,
        "fullcodeline": "p->nCol = p->nNVCol = pSelTab->nCol;"
    },
    {
        "line": 169,
        "fullcodeline": "p->aCol = pSelTab->aCol;"
    },
    {
        "line": 170,
        "fullcodeline": "pSelTab->nCol = 0;"
    },
    {
        "line": 171,
        "fullcodeline": "pSelTab->aCol = 0;"
    },
    {
        "line": 172,
        "fullcodeline": "sqlite3DeleteTable(db, pSelTab);"
    },
    {
        "line": 173,
        "fullcodeline": "sqlite3SelectDestInit(&dest, SRT_Coroutine, regYield);"
    },
    {
        "line": 174,
        "fullcodeline": "sqlite3Select(pParse, pSelect, &dest);"
    },
    {
        "line": 176,
        "fullcodeline": "sqlite3VdbeEndCoroutine(v, regYield);"
    },
    {
        "line": 177,
        "fullcodeline": "sqlite3VdbeJumpHere(v, addrTop - 1);"
    },
    {
        "line": 178,
        "fullcodeline": "addrInsLoop = sqlite3VdbeAddOp1(v, OP_Yield, dest.iSDParm);"
    },
    {
        "line": 179,
        "fullcodeline": "VdbeCoverage(v);"
    },
    {
        "line": 180,
        "fullcodeline": "sqlite3VdbeAddOp3(v, OP_MakeRecord, dest.iSdst, dest.nSdst, regRec);"
    },
    {
        "line": 181,
        "fullcodeline": "sqlite3TableAffinity(v, p, 0);"
    },
    {
        "line": 182,
        "fullcodeline": "sqlite3VdbeAddOp2(v, OP_NewRowid, 1, regRowid);"
    },
    {
        "line": 183,
        "fullcodeline": "sqlite3VdbeAddOp3(v, OP_Insert, 1, regRec, regRowid);"
    },
    {
        "line": 184,
        "fullcodeline": "sqlite3VdbeGoto(v, addrInsLoop);"
    },
    {
        "line": 185,
        "fullcodeline": "sqlite3VdbeJumpHere(v, addrInsLoop);"
    },
    {
        "line": 186,
        "fullcodeline": "sqlite3VdbeAddOp1(v, OP_Close, 1);"
    },
    {
        "line": 191,
        "fullcodeline": "zStmt = createTableStmt(db, p);"
    },
    {
        "line": 226,
        "fullcodeline": "assert( sqlite3SchemaMutexHeld(db, iDb, 0) );"
    },
    {
        "line": 249,
        "fullcodeline": "assert( p==pOld );  /* Malloc must have failed inside HashInsert() */"
    },
    {
        "line": 250,
        "fullcodeline": "sqlite3OomFault(db);"
    },
    {
        "line": 260,
        "fullcodeline": "assert( !pSelect && pCons && pEnd );"
    },
    {
        "line": 264,
        "fullcodeline": "nName = (int)((const char *)pCons->z - zName);"
    },
    {
        "line": 265,
        "fullcodeline": "p->addColOffset = 13 + sqlite3Utf8CharLen(zName, nName);"
    },
    {
        "line": 77,
        "fullcodeline": "if( (colFlags & COLFLAG_GENERATED)!=0 ){"
    },
    {
        "line": 127,
        "fullcodeline": "zType = \"view\";"
    },
    {
        "line": 128,
        "fullcodeline": "zType2 = \"VIEW\";"
    },
    {
        "line": 166,
        "fullcodeline": "if( pSelTab==0 ) return;"
    },
    {
        "line": 193,
        "fullcodeline": "Token *pEnd2 = tabOpts ? &pParse->sLastToken : pEnd;"
    },
    {
        "line": 194,
        "fullcodeline": "n = (int)(pEnd2->z - pParse->sNameToken.z);"
    },
    {
        "line": 196,
        "fullcodeline": "zStmt = sqlite3MPrintf(db,"
    },
    {
        "line": 227,
        "fullcodeline": "if( pDb->pSchema->pSeqTab==0 ){"
    },
    {
        "line": 261,
        "fullcodeline": "if( pCons->z==0 ){"
    },
    {
        "line": 78,
        "fullcodeline": "testcase( colFlags & COLFLAG_VIRTUAL );"
    },
    {
        "line": 79,
        "fullcodeline": "testcase( colFlags & COLFLAG_STORED );"
    },
    {
        "line": 80,
        "fullcodeline": "sqlite3ResolveSelfReference(pParse, p, NC_GenCol,"
    },
    {
        "line": 195,
        "fullcodeline": "if( pEnd2->z[0]!=';' ) n += pEnd2->n;"
    },
    {
        "line": 228,
        "fullcodeline": "sqlite3NestedParse(pParse,"
    },
    {
        "line": 262,
        "fullcodeline": "pCons = pEnd;"
    },
    {
        "line": 83,
        "fullcodeline": "nNG++;"
    }
]