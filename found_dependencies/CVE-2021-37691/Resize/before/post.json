[
    {
        "line": 2,
        "fullcodeline": "auto* params ="
    },
    {
        "line": 4,
        "fullcodeline": "TF_LITE_ENSURE(context, NumInputs(node) == 2 || NumInputs(node) == 3);"
    },
    {
        "line": 5,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);"
    },
    {
        "line": 8,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &hash));"
    },
    {
        "line": 9,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, NumDimensions(hash), 2);"
    },
    {
        "line": 11,
        "fullcodeline": "TF_LITE_ENSURE(context, SizeOfDimension(hash, 1) <= 32);"
    },
    {
        "line": 14,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 1, &input));"
    },
    {
        "line": 15,
        "fullcodeline": "TF_LITE_ENSURE(context, NumDimensions(input) >= 1);"
    },
    {
        "line": 26,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output));"
    },
    {
        "line": 27,
        "fullcodeline": "TfLiteIntArray* outputSize = TfLiteIntArrayCreate(1);"
    },
    {
        "line": 3,
        "fullcodeline": "reinterpret_cast<TfLiteLSHProjectionParams*>(node->builtin_data);"
    },
    {
        "line": 17,
        "fullcodeline": "if (NumInputs(node) == 3) {"
    },
    {
        "line": 38,
        "fullcodeline": "return context->ResizeTensor(context, output, outputSize);"
    },
    {
        "line": 19,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 2, &weight));"
    },
    {
        "line": 20,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, NumDimensions(weight), 1);"
    },
    {
        "line": 21,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, SizeOfDimension(weight, 0),"
    },
    {
        "line": 30,
        "fullcodeline": "outputSize->data[0] = SizeOfDimension(hash, 0);"
    },
    {
        "line": 33,
        "fullcodeline": "outputSize->data[0] = SizeOfDimension(hash, 0) * SizeOfDimension(hash, 1);"
    },
    {
        "line": 22,
        "fullcodeline": "SizeOfDimension(input, 0));"
    }
]