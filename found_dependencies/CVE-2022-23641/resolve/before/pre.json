[
    {
        "line": 31,
        "fullcodeline": "headers = request_headers"
    },
    {
        "line": 32,
        "fullcodeline": "middlewares = Excon.defaults[:middlewares]"
    },
    {
        "line": 35,
        "fullcodeline": "response = Excon.public_send(@http_verb,"
    },
    {
        "line": 43,
        "fullcodeline": "location = nil"
    },
    {
        "line": 44,
        "fullcodeline": "response_headers = nil"
    },
    {
        "line": 45,
        "fullcodeline": "response_status = response.status.to_i"
    },
    {
        "line": 126,
        "fullcodeline": "@status = :failure"
    },
    {
        "line": 127,
        "fullcodeline": "@status_code = response.status"
    },
    {
        "line": 2,
        "fullcodeline": "if @uri && @uri.port == 80 && FinalDestination.is_https_domain?(@uri.hostname)"
    },
    {
        "line": 7,
        "fullcodeline": "if @limit < 0"
    },
    {
        "line": 13,
        "fullcodeline": "unless validate_uri"
    },
    {
        "line": 33,
        "fullcodeline": "middlewares << Excon::Middleware::Decompress if @http_verb == :get"
    },
    {
        "line": 47,
        "fullcodeline": "case response.status"
    },
    {
        "line": 89,
        "fullcodeline": "unless response_headers"
    },
    {
        "line": 100,
        "fullcodeline": "if cookies = response_headers[:cookies]"
    },
    {
        "line": 3,
        "fullcodeline": "@uri.scheme = \"https\""
    },
    {
        "line": 4,
        "fullcodeline": "@uri = URI(@uri.to_s)"
    },
    {
        "line": 8,
        "fullcodeline": "@status = :too_many_redirects"
    },
    {
        "line": 14,
        "fullcodeline": "@status = :invalid_address"
    },
    {
        "line": 19,
        "fullcodeline": "@ignored.each do |host|"
    },
    {
        "line": 27,
        "fullcodeline": "@status = :resolved"
    },
    {
        "line": 48,
        "fullcodeline": "when 200"
    },
    {
        "line": 90,
        "fullcodeline": "response_headers = {"
    },
    {
        "line": 97,
        "fullcodeline": "location = response_headers[:location]"
    },
    {
        "line": 101,
        "fullcodeline": "@cookie = Array.wrap(cookies).map { |c| c.split(';').first.strip }.join('; ')"
    },
    {
        "line": 105,
        "fullcodeline": "redirect_uri = uri(location)"
    },
    {
        "line": 111,
        "fullcodeline": "old_port = @uri.port"
    },
    {
        "line": 114,
        "fullcodeline": "@uri = uri(location)"
    },
    {
        "line": 115,
        "fullcodeline": "@limit -= 1"
    },
    {
        "line": 129,
        "fullcodeline": "log(:warn, \"FinalDestination could not resolve URL (status #{response.status}): #{@uri}\") if @verbose"
    },
    {
        "line": 26,
        "fullcodeline": "if Oneboxer.cached_response_body_exists?(@uri.to_s)"
    },
    {
        "line": 69,
        "fullcodeline": "@status = :resolved"
    },
    {
        "line": 96,
        "fullcodeline": "if (300..399).include?(response_status)"
    },
    {
        "line": 112,
        "fullcodeline": "location = \"#{location}##{@uri.fragment}\" if @preserve_fragment_url && @uri.fragment.present?"
    },
    {
        "line": 113,
        "fullcodeline": "location = \"#{@uri.scheme}://#{@uri.host}#{location}\" if location[0] == \"/\""
    },
    {
        "line": 122,
        "fullcodeline": "return resolve"
    },
    {
        "line": 9,
        "fullcodeline": "log(:warn, \"FinalDestination could not resolve URL (too many redirects): #{@uri}\") if @verbose"
    },
    {
        "line": 15,
        "fullcodeline": "log(:warn, \"FinalDestination could not resolve URL (invalid URI): #{@uri}\") if @verbose"
    },
    {
        "line": 50,
        "fullcodeline": "if @http_verb == :get"
    },
    {
        "line": 91,
        "fullcodeline": "cookies: response.data[:cookies] || response.headers[:\"set-cookie\"],"
    },
    {
        "line": 92,
        "fullcodeline": "location: response.headers[:location]"
    },
    {
        "line": 106,
        "fullcodeline": "if @uri.host == redirect_uri.host && (redirect_uri.path =~ /\\/login/ || redirect_uri.path =~ /\\/session/)"
    },
    {
        "line": 107,
        "fullcodeline": "@status = :resolved"
    },
    {
        "line": 118,
        "fullcodeline": "if old_port == 80 && @uri.port == 443 && (URI::HTTPS === @uri)"
    },
    {
        "line": 132,
        "fullcodeline": "log(:warn, \"FinalDestination could not resolve URL (timeout): #{@uri}\") if @verbose"
    },
    {
        "line": 57,
        "fullcodeline": "next_url = fetch_canonical_url(response.body)"
    },
    {
        "line": 68,
        "fullcodeline": "@content_type = response.headers['Content-Type'] if response.headers.has_key?('Content-Type')"
    },
    {
        "line": 71,
        "fullcodeline": "when 103, 400, 405, 406, 409, 500, 501"
    },
    {
        "line": 72,
        "fullcodeline": "response_status, small_headers = small_get(request_headers)"
    },
    {
        "line": 79,
        "fullcodeline": "response_headers = {}"
    },
    {
        "line": 51,
        "fullcodeline": "if Oneboxer.cache_response_body?(@uri)"
    },
    {
        "line": 74,
        "fullcodeline": "if response_status == 200"
    },
    {
        "line": 80,
        "fullcodeline": "if cookie_val = small_headers['set-cookie']"
    },
    {
        "line": 84,
        "fullcodeline": "if location_val = small_headers['location']"
    },
    {
        "line": 119,
        "fullcodeline": "FinalDestination.cache_https_domain(@uri.hostname)"
    },
    {
        "line": 52,
        "fullcodeline": "Oneboxer.cache_response_body(@uri.to_s, response.body)"
    },
    {
        "line": 59,
        "fullcodeline": "if next_url.to_s.present? && next_url != @uri"
    },
    {
        "line": 60,
        "fullcodeline": "@follow_canonical = false"
    },
    {
        "line": 61,
        "fullcodeline": "@uri = next_url"
    },
    {
        "line": 62,
        "fullcodeline": "@http_verb = http_verb(@force_get_hosts, @follow_canonical)"
    },
    {
        "line": 75,
        "fullcodeline": "@status = :resolved"
    },
    {
        "line": 81,
        "fullcodeline": "response_headers[:cookies] = cookie_val"
    },
    {
        "line": 85,
        "fullcodeline": "response_headers[:location] = location_val.join"
    },
    {
        "line": 64,
        "fullcodeline": "return resolve"
    }
]