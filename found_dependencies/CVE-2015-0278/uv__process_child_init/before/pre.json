[
    {
        "line": 75,
        "fullcodeline": "execvp(options->file, options->args);"
    },
    {
        "line": 76,
        "fullcodeline": "uv__write_int(error_fd, -errno);"
    },
    {
        "line": 77,
        "fullcodeline": "perror(\"execvp()\");"
    },
    {
        "line": 78,
        "fullcodeline": "_exit(127);"
    },
    {
        "line": 9,
        "fullcodeline": "if (options->flags & UV_PROCESS_DETACHED)"
    },
    {
        "line": 12,
        "fullcodeline": "for (fd = 0; fd < stdio_count; fd++) {"
    },
    {
        "line": 46,
        "fullcodeline": "for (fd = 0; fd < stdio_count; fd++) {"
    },
    {
        "line": 53,
        "fullcodeline": "if (options->cwd != NULL && chdir(options->cwd)) {"
    },
    {
        "line": 59,
        "fullcodeline": "if ((options->flags & UV_PROCESS_SETGID) && setgid(options->gid)) {"
    },
    {
        "line": 65,
        "fullcodeline": "if ((options->flags & UV_PROCESS_SETUID) && setuid(options->uid)) {"
    },
    {
        "line": 71,
        "fullcodeline": "if (options->env != NULL) {"
    },
    {
        "line": 10,
        "fullcodeline": "setsid();"
    },
    {
        "line": 13,
        "fullcodeline": "close_fd = pipes[fd][0];"
    },
    {
        "line": 14,
        "fullcodeline": "use_fd = pipes[fd][1];"
    },
    {
        "line": 47,
        "fullcodeline": "use_fd = pipes[fd][1];"
    },
    {
        "line": 54,
        "fullcodeline": "uv__write_int(error_fd, -errno);"
    },
    {
        "line": 55,
        "fullcodeline": "perror(\"chdir()\");"
    },
    {
        "line": 60,
        "fullcodeline": "uv__write_int(error_fd, -errno);"
    },
    {
        "line": 61,
        "fullcodeline": "perror(\"setgid()\");"
    },
    {
        "line": 66,
        "fullcodeline": "uv__write_int(error_fd, -errno);"
    },
    {
        "line": 67,
        "fullcodeline": "perror(\"setuid()\");"
    },
    {
        "line": 72,
        "fullcodeline": "environ = options->env;"
    },
    {
        "line": 16,
        "fullcodeline": "if (use_fd < 0) {"
    },
    {
        "line": 34,
        "fullcodeline": "if (fd == use_fd)"
    },
    {
        "line": 39,
        "fullcodeline": "if (fd <= 2)"
    },
    {
        "line": 42,
        "fullcodeline": "if (close_fd != -1)"
    },
    {
        "line": 49,
        "fullcodeline": "if (use_fd >= 0 && fd != use_fd)"
    },
    {
        "line": 35,
        "fullcodeline": "uv__cloexec(use_fd, 0);"
    },
    {
        "line": 40,
        "fullcodeline": "uv__nonblock(fd, 0);"
    },
    {
        "line": 43,
        "fullcodeline": "uv__close(close_fd);"
    },
    {
        "line": 50,
        "fullcodeline": "close(use_fd);"
    },
    {
        "line": 17,
        "fullcodeline": "if (fd >= 3)"
    },
    {
        "line": 37,
        "fullcodeline": "dup2(use_fd, fd);"
    },
    {
        "line": 23,
        "fullcodeline": "use_fd = open(\"/dev/null\", fd == 0 ? O_RDONLY : O_RDWR);"
    },
    {
        "line": 24,
        "fullcodeline": "close_fd = use_fd;"
    },
    {
        "line": 26,
        "fullcodeline": "if (use_fd == -1) {"
    },
    {
        "line": 27,
        "fullcodeline": "uv__write_int(error_fd, -errno);"
    },
    {
        "line": 28,
        "fullcodeline": "perror(\"failed to open stdio\");"
    }
]