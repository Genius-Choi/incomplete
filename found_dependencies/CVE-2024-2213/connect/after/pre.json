[
    {
        "line": 28,
        "fullcodeline": "from zenml.config.store_config import StoreConfiguration"
    },
    {
        "line": 29,
        "fullcodeline": "from zenml.zen_stores.base_zen_store import BaseZenStore"
    },
    {
        "line": 39,
        "fullcodeline": "active_deployment = get_active_deployment(local=True)"
    },
    {
        "line": 52,
        "fullcodeline": "store_dict: Dict[str, Any] = {}"
    },
    {
        "line": 53,
        "fullcodeline": "verify_ssl: Union[str, bool] = ("
    },
    {
        "line": 103,
        "fullcodeline": "store_dict[\"url\"] = url"
    },
    {
        "line": 104,
        "fullcodeline": "store_type = BaseZenStore.get_store_type(url)"
    },
    {
        "line": 137,
        "fullcodeline": "store_config_class = BaseZenStore.get_store_config_class(store_type)"
    },
    {
        "line": 140,
        "fullcodeline": "store_config = store_config_class.parse_obj(store_dict)"
    },
    {
        "line": 31,
        "fullcodeline": "if password is not None:"
    },
    {
        "line": 41,
        "fullcodeline": "active_deployment"
    },
    {
        "line": 54,
        "fullcodeline": "ssl_ca_cert if ssl_ca_cert is not None else not no_verify_ssl"
    },
    {
        "line": 97,
        "fullcodeline": "if not url:"
    },
    {
        "line": 101,
        "fullcodeline": "assert url is not None"
    },
    {
        "line": 105,
        "fullcodeline": "if store_type == StoreType.REST:"
    },
    {
        "line": 138,
        "fullcodeline": "assert store_config_class is not None"
    },
    {
        "line": 32,
        "fullcodeline": "cli_utils.warning("
    },
    {
        "line": 45,
        "fullcodeline": "cli_utils.error("
    },
    {
        "line": 73,
        "fullcodeline": "url = store_dict.get(\"url\", url)"
    },
    {
        "line": 74,
        "fullcodeline": "username = username or store_dict.get(\"username\")"
    },
    {
        "line": 75,
        "fullcodeline": "password = password or store_dict.get(\"password\")"
    },
    {
        "line": 76,
        "fullcodeline": "api_key = api_key or store_dict.get(\"api_key\")"
    },
    {
        "line": 77,
        "fullcodeline": "verify_ssl = store_dict.get(\"verify_ssl\", verify_ssl)"
    },
    {
        "line": 98,
        "fullcodeline": "url = click.prompt(\"ZenML server URL\", type=str)"
    },
    {
        "line": 100,
        "fullcodeline": "cli_utils.declare(f\"Connecting to: '{url}'...\")"
    },
    {
        "line": 106,
        "fullcodeline": "store_dict[\"verify_ssl\"] = verify_ssl"
    },
    {
        "line": 108,
        "fullcodeline": "if not username and not api_key:"
    },
    {
        "line": 115,
        "fullcodeline": "cli_utils.warning("
    },
    {
        "line": 125,
        "fullcodeline": "store_dict[\"username\"] = username"
    },
    {
        "line": 133,
        "fullcodeline": "store_dict[\"password\"] = password"
    },
    {
        "line": 33,
        "fullcodeline": "\"Supplying password values in the command line is not safe. \""
    },
    {
        "line": 46,
        "fullcodeline": "\"You're trying to connect to a remote ZenML server but already \""
    },
    {
        "line": 62,
        "fullcodeline": "if not isinstance(store_dict, dict):"
    },
    {
        "line": 79,
        "fullcodeline": "elif url is None:"
    },
    {
        "line": 109,
        "fullcodeline": "if store_type == StoreType.REST:"
    },
    {
        "line": 116,
        "fullcodeline": "\"Connecting to a ZenML server using a username and password is \""
    },
    {
        "line": 127,
        "fullcodeline": "if password is None:"
    },
    {
        "line": 142,
        "fullcodeline": "GlobalConfiguration().set_store(store_config)"
    },
    {
        "line": 58,
        "fullcodeline": "if os.path.isfile(config):"
    },
    {
        "line": 59,
        "fullcodeline": "store_dict = yaml_utils.read_yaml(config)"
    },
    {
        "line": 61,
        "fullcodeline": "store_dict = yaml.safe_load(config)"
    },
    {
        "line": 63,
        "fullcodeline": "cli_utils.error("
    },
    {
        "line": 69,
        "fullcodeline": "store_config = StoreConfiguration.parse_obj(store_dict)"
    },
    {
        "line": 80,
        "fullcodeline": "server = get_active_deployment(local=False)"
    },
    {
        "line": 93,
        "fullcodeline": "url = server.status.url"
    },
    {
        "line": 110,
        "fullcodeline": "store_dict[\"api_token\"] = web_login(url=url, verify_ssl=verify_ssl)"
    },
    {
        "line": 112,
        "fullcodeline": "username = click.prompt(\"Username\", type=str)"
    },
    {
        "line": 128,
        "fullcodeline": "password = click.prompt("
    },
    {
        "line": 135,
        "fullcodeline": "store_dict[\"api_key\"] = api_key"
    },
    {
        "line": 64,
        "fullcodeline": "\"The configuration argument must be JSON/YAML content or \""
    },
    {
        "line": 70,
        "fullcodeline": "GlobalConfiguration().set_store(store_config)"
    },
    {
        "line": 145,
        "fullcodeline": "f\"User '{username}' does not have sufficient permissions to \""
    },
    {
        "line": 149,
        "fullcodeline": "cli_utils.warning(f\"Authorization error: {e}\")"
    },
    {
        "line": 82,
        "fullcodeline": "if server is None or not server.status or not server.status.url:"
    },
    {
        "line": 95,
        "fullcodeline": "verify_ssl = server.status.ca_crt"
    },
    {
        "line": 129,
        "fullcodeline": "f\"Password for user {username} (press ENTER for empty password)\","
    },
    {
        "line": 146,
        "fullcodeline": "f\"access the server at '{url}'.\""
    },
    {
        "line": 84,
        "fullcodeline": "\"Running `zenml connect` without arguments can only be used to \""
    }
]