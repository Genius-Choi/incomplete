[
    {
        "line": 3,
        "fullcodeline": "m_processStandardOutput.clear();"
    },
    {
        "line": 4,
        "fullcodeline": "m_processStandardError.clear();"
    },
    {
        "line": 9,
        "fullcodeline": "timer.setSingleShot(true);"
    },
    {
        "line": 10,
        "fullcodeline": "timer.setInterval(timeout);"
    },
    {
        "line": 12,
        "fullcodeline": "timer.connect(&timer, &QTimer::timeout, &loop, &QEventLoop::quit);"
    },
    {
        "line": 13,
        "fullcodeline": "loop.connect(process, static_cast<void(QProcess::*)(int)>(&QProcess::finished), &loop, &QEventLoop::exit);"
    },
    {
        "line": 16,
        "fullcodeline": "process->connect(process, &QProcess::readyReadStandardError, process, [process] {"
    },
    {
        "line": 19,
        "fullcodeline": "process->connect(process, &QProcess::readyReadStandardOutput, process, [process] {"
    },
    {
        "line": 36,
        "fullcodeline": "process->start(command, mode);"
    },
    {
        "line": 37,
        "fullcodeline": "process->waitForStarted();"
    },
    {
        "line": 60,
        "fullcodeline": "m_processStandardOutput.append(process->readAllStandardOutput());"
    },
    {
        "line": 61,
        "fullcodeline": "m_processStandardError.append(process->readAllStandardError());"
    },
    {
        "line": 23,
        "fullcodeline": "if (timeout > 0) {"
    },
    {
        "line": 33,
        "fullcodeline": "if (Global::debugLevel > 1)"
    },
    {
        "line": 39,
        "fullcodeline": "if (process->error() != QProcess::UnknownError) {"
    },
    {
        "line": 71,
        "fullcodeline": "return process->exitCode();"
    },
    {
        "line": 24,
        "fullcodeline": "timer.start();"
    },
    {
        "line": 34,
        "fullcodeline": "dCDebug(\"Exec: \\\"%s\\\", timeout: %d\", qPrintable(command), timeout);"
    },
    {
        "line": 40,
        "fullcodeline": "dCError(process->errorString());"
    },
    {
        "line": 45,
        "fullcodeline": "if (process->state() == QProcess::Running) {"
    },
    {
        "line": 49,
        "fullcodeline": "if (process->state() != QProcess::NotRunning) {"
    },
    {
        "line": 26,
        "fullcodeline": "QTimer::singleShot(10000, process, [process] {"
    },
    {
        "line": 42,
        "fullcodeline": "return -1;"
    },
    {
        "line": 50,
        "fullcodeline": "dCDebug(\"The \\\"%s\\\" timeout, timeout: %d\", qPrintable(command), timeout);"
    },
    {
        "line": 64,
        "fullcodeline": "dCDebug(\"Done: \\\"%s\\\", exit code: %d\", qPrintable(command), process->exitCode());"
    },
    {
        "line": 52,
        "fullcodeline": "if (QFile::exists(QString(\"/proc/%1\").arg(process->pid()))) {"
    },
    {
        "line": 53,
        "fullcodeline": "process->terminate();"
    },
    {
        "line": 54,
        "fullcodeline": "process->waitForFinished();"
    },
    {
        "line": 66,
        "fullcodeline": "if (process->exitCode() != 0) {"
    },
    {
        "line": 67,
        "fullcodeline": "dCError(\"error: \\\"%s\\\"\\nstdout: \\\"%s\\\"\", qPrintable(m_processStandardError), qPrintable(m_processStandardOutput));"
    }
]