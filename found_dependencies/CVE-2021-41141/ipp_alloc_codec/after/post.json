[
    {
        "line": 11,
        "fullcodeline": "PJ_ASSERT_RETURN(factory && id && p_codec, PJ_EINVAL);"
    },
    {
        "line": 12,
        "fullcodeline": "PJ_ASSERT_RETURN(factory == &ipp_factory.base, PJ_EINVAL);"
    },
    {
        "line": 17,
        "fullcodeline": "idx = -1;"
    },
    {
        "line": 36,
        "fullcodeline": "pool = pjmedia_endpt_create_pool(ipp_factory.endpt, \"IPPcodec\", 512, 512);"
    },
    {
        "line": 37,
        "fullcodeline": "codec = PJ_POOL_ZALLOC_T(pool, pjmedia_codec);"
    },
    {
        "line": 38,
        "fullcodeline": "PJ_ASSERT_RETURN(codec != NULL, PJ_ENOMEM);"
    },
    {
        "line": 39,
        "fullcodeline": "codec->op = &ipp_op;"
    },
    {
        "line": 40,
        "fullcodeline": "codec->factory = factory;"
    },
    {
        "line": 41,
        "fullcodeline": "codec->codec_data = PJ_POOL_ZALLOC_T(pool, ipp_private_t);"
    },
    {
        "line": 42,
        "fullcodeline": "codec_data = (ipp_private_t*) codec->codec_data;"
    },
    {
        "line": 71,
        "fullcodeline": "codec_data->pool = pool;"
    },
    {
        "line": 72,
        "fullcodeline": "codec_data->codec_idx = idx;"
    },
    {
        "line": 74,
        "fullcodeline": "pj_mutex_unlock(ipp_factory.mutex);"
    },
    {
        "line": 76,
        "fullcodeline": "*p_codec = codec;"
    },
    {
        "line": 18,
        "fullcodeline": "for (i = 0; i < PJ_ARRAY_SIZE(ipp_codec); ++i) {"
    },
    {
        "line": 29,
        "fullcodeline": "if (idx == -1) {"
    },
    {
        "line": 19,
        "fullcodeline": "pj_str_t name = pj_str((char*)ipp_codec[i].name);"
    },
    {
        "line": 30,
        "fullcodeline": "*p_codec = NULL;"
    },
    {
        "line": 31,
        "fullcodeline": "pj_mutex_unlock(ipp_factory.mutex);"
    },
    {
        "line": 47,
        "fullcodeline": "status = pjmedia_plc_create(pool, ipp_codec[idx].clock_rate,"
    },
    {
        "line": 60,
        "fullcodeline": "status = pjmedia_silence_det_create(pool,"
    },
    {
        "line": 20,
        "fullcodeline": "if ((pj_stricmp(&id->encoding_name, &name) == 0) &&"
    },
    {
        "line": 50,
        "fullcodeline": "if (status != PJ_SUCCESS) {"
    },
    {
        "line": 64,
        "fullcodeline": "if (status != PJ_SUCCESS) {"
    },
    {
        "line": 25,
        "fullcodeline": "idx = i;"
    },
    {
        "line": 51,
        "fullcodeline": "pj_pool_release(pool);"
    },
    {
        "line": 52,
        "fullcodeline": "pj_mutex_unlock(ipp_factory.mutex);"
    },
    {
        "line": 65,
        "fullcodeline": "pj_pool_release(pool);"
    },
    {
        "line": 66,
        "fullcodeline": "pj_mutex_unlock(ipp_factory.mutex);"
    },
    {
        "line": 22,
        "fullcodeline": "(id->channel_cnt == (unsigned)ipp_codec[i].channel_count) &&"
    },
    {
        "line": 21,
        "fullcodeline": "(id->clock_rate == (unsigned)ipp_codec[i].clock_rate) &&"
    }
]