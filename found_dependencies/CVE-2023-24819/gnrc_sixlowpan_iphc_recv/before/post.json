[
    {
        "line": 4,
        "fullcodeline": "assert(sixlo != NULL);"
    },
    {
        "line": 8,
        "fullcodeline": "uint8_t *iphc_hdr = sixlo->data;"
    },
    {
        "line": 11,
        "fullcodeline": "gnrc_sixlowpan_frag_rb_t *rbuf = rbuf_ptr;"
    },
    {
        "line": 29,
        "fullcodeline": "assert(ipv6->size >= sizeof(ipv6_hdr_t));"
    },
    {
        "line": 31,
        "fullcodeline": "netif = gnrc_pktsnip_search_type(sixlo, GNRC_NETTYPE_NETIF);"
    },
    {
        "line": 32,
        "fullcodeline": "assert(netif != NULL);"
    },
    {
        "line": 33,
        "fullcodeline": "iface = gnrc_netif_hdr_get_netif(netif->data);"
    },
    {
        "line": 34,
        "fullcodeline": "payload_offset = _iphc_ipv6_decode(iphc_hdr, netif->data, iface,"
    },
    {
        "line": 162,
        "fullcodeline": "ipv6_hdr = ipv6->data;"
    },
    {
        "line": 163,
        "fullcodeline": "ipv6_hdr->len = byteorder_htons(payload_len);"
    },
    {
        "line": 164,
        "fullcodeline": "memcpy(((uint8_t *)ipv6->data) + uncomp_hdr_len,"
    },
    {
        "line": 215,
        "fullcodeline": "gnrc_pktbuf_release(sixlo);"
    },
    {
        "line": 16,
        "fullcodeline": "if (rbuf != NULL) {"
    },
    {
        "line": 36,
        "fullcodeline": "if (payload_offset == 0) {"
    },
    {
        "line": 88,
        "fullcodeline": "if (rbuf != NULL) {"
    },
    {
        "line": 154,
        "fullcodeline": "if ((rbuf == NULL) &&"
    },
    {
        "line": 165,
        "fullcodeline": "((uint8_t *)sixlo->data) + payload_offset,"
    },
    {
        "line": 166,
        "fullcodeline": "sixlo->size - payload_offset);"
    },
    {
        "line": 167,
        "fullcodeline": "if (rbuf != NULL) {"
    },
    {
        "line": 17,
        "fullcodeline": "ipv6 = rbuf->pkt;"
    },
    {
        "line": 18,
        "fullcodeline": "assert(ipv6 != NULL);"
    },
    {
        "line": 38,
        "fullcodeline": "_recv_error_release(sixlo, ipv6, rbuf);"
    },
    {
        "line": 156,
        "fullcodeline": "(gnrc_pktbuf_realloc_data(ipv6, uncomp_hdr_len + payload_len) != 0)) {"
    },
    {
        "line": 157,
        "fullcodeline": "DEBUG(\"6lo iphc: no space left to copy payload\\n\");"
    },
    {
        "line": 158,
        "fullcodeline": "_recv_error_release(sixlo, ipv6, rbuf);"
    },
    {
        "line": 168,
        "fullcodeline": "rbuf->super.current_size += (uncomp_hdr_len - payload_offset);"
    },
    {
        "line": 21,
        "fullcodeline": "ipv6 = gnrc_pktbuf_add(NULL, NULL, sizeof(ipv6_hdr_t),"
    },
    {
        "line": 90,
        "fullcodeline": "if (_is_rfrag(sixlo)) {"
    },
    {
        "line": 151,
        "fullcodeline": "payload_len = (sixlo->size + uncomp_hdr_len -"
    },
    {
        "line": 211,
        "fullcodeline": "sixlo = gnrc_pkt_delete(sixlo, netif);"
    },
    {
        "line": 212,
        "fullcodeline": "ipv6 = gnrc_pkt_append(ipv6, netif);"
    },
    {
        "line": 213,
        "fullcodeline": "gnrc_sixlowpan_dispatch_recv(ipv6, NULL, page);"
    },
    {
        "line": 23,
        "fullcodeline": "if (ipv6 == NULL) {"
    },
    {
        "line": 91,
        "fullcodeline": "DEBUG(\"6lo iphc: calculating payload length for SFR\\n\");"
    },
    {
        "line": 92,
        "fullcodeline": "DEBUG(\" - rbuf->super.datagram_size: %u\\n\","
    },
    {
        "line": 94,
        "fullcodeline": "DEBUG(\" - payload_offset: %u\\n\", (unsigned)payload_offset);"
    },
    {
        "line": 95,
        "fullcodeline": "DEBUG(\" - uncomp_hdr_len: %u\\n\", (unsigned)uncomp_hdr_len);"
    },
    {
        "line": 99,
        "fullcodeline": "payload_len = (rbuf->super.datagram_size - payload_offset) +"
    },
    {
        "line": 101,
        "fullcodeline": "DEBUG(\"   => %u\\n\", payload_len);"
    },
    {
        "line": 24,
        "fullcodeline": "gnrc_pktbuf_release(sixlo);"
    },
    {
        "line": 111,
        "fullcodeline": "payload_len = (uint16_t)(rbuf->super.datagram_size - sizeof(ipv6_hdr_t));"
    },
    {
        "line": 100,
        "fullcodeline": "(uncomp_hdr_len - sizeof(ipv6_hdr_t));"
    }
]