[
    {
        "line": 8,
        "fullcodeline": "uint8_t rsp[MAX_MESSAGE_LENGTH];"
    },
    {
        "line": 9,
        "fullcodeline": "int rsp_length = 0;"
    },
    {
        "line": 18,
        "fullcodeline": "slave = req[offset - 1];"
    },
    {
        "line": 19,
        "fullcodeline": "function = req[offset];"
    },
    {
        "line": 20,
        "fullcodeline": "address = (req[offset + 1] << 8) + req[offset + 2];"
    },
    {
        "line": 22,
        "fullcodeline": "sft.slave = slave;"
    },
    {
        "line": 23,
        "fullcodeline": "sft.function = function;"
    },
    {
        "line": 24,
        "fullcodeline": "sft.t_id = ctx->backend->prepare_response_tid(req, &req_length);"
    },
    {
        "line": 12,
        "fullcodeline": "if (ctx == NULL) {"
    },
    {
        "line": 295,
        "fullcodeline": "return (ctx->backend->backend_type == _MODBUS_BACKEND_TYPE_RTU &&"
    },
    {
        "line": 13,
        "fullcodeline": "errno = EINVAL;"
    },
    {
        "line": 218,
        "fullcodeline": "errno = ENOPROTOOPT;"
    },
    {
        "line": 288,
        "fullcodeline": "rsp_length = response_exception("
    },
    {
        "line": 296,
        "fullcodeline": "slave == MODBUS_BROADCAST_ADDRESS) ? 0 : send_msg(ctx, rsp, rsp_length);"
    },
    {
        "line": 14,
        "fullcodeline": "return -1;"
    },
    {
        "line": 30,
        "fullcodeline": "unsigned int is_input = (function == MODBUS_FC_READ_DISCRETE_INPUTS);"
    },
    {
        "line": 31,
        "fullcodeline": "int start_bits = is_input ? mb_mapping->start_input_bits : mb_mapping->start_bits;"
    },
    {
        "line": 32,
        "fullcodeline": "int nb_bits = is_input ? mb_mapping->nb_input_bits : mb_mapping->nb_bits;"
    },
    {
        "line": 33,
        "fullcodeline": "uint8_t *tab_bits = is_input ? mb_mapping->tab_input_bits : mb_mapping->tab_bits;"
    },
    {
        "line": 34,
        "fullcodeline": "const char * const name = is_input ? \"read_input_bits\" : \"read_bits\";"
    },
    {
        "line": 35,
        "fullcodeline": "int nb = (req[offset + 3] << 8) + req[offset + 4];"
    },
    {
        "line": 38,
        "fullcodeline": "int mapping_address = address - start_bits;"
    },
    {
        "line": 61,
        "fullcodeline": "unsigned int is_input = (function == MODBUS_FC_READ_INPUT_REGISTERS);"
    },
    {
        "line": 62,
        "fullcodeline": "int start_registers = is_input ? mb_mapping->start_input_registers : mb_mapping->start_registers;"
    },
    {
        "line": 63,
        "fullcodeline": "int nb_registers = is_input ? mb_mapping->nb_input_registers : mb_mapping->nb_registers;"
    },
    {
        "line": 64,
        "fullcodeline": "uint16_t *tab_registers = is_input ? mb_mapping->tab_input_registers : mb_mapping->tab_registers;"
    },
    {
        "line": 65,
        "fullcodeline": "const char * const name = is_input ? \"read_input_registers\" : \"read_registers\";"
    },
    {
        "line": 66,
        "fullcodeline": "int nb = (req[offset + 3] << 8) + req[offset + 4];"
    },
    {
        "line": 69,
        "fullcodeline": "int mapping_address = address - start_registers;"
    },
    {
        "line": 94,
        "fullcodeline": "int mapping_address = address - mb_mapping->start_bits;"
    },
    {
        "line": 119,
        "fullcodeline": "int mapping_address = address - mb_mapping->start_registers;"
    },
    {
        "line": 137,
        "fullcodeline": "int nb = (req[offset + 3] << 8) + req[offset + 4];"
    },
    {
        "line": 138,
        "fullcodeline": "int mapping_address = address - mb_mapping->start_bits;"
    },
    {
        "line": 168,
        "fullcodeline": "int nb = (req[offset + 3] << 8) + req[offset + 4];"
    },
    {
        "line": 169,
        "fullcodeline": "int mapping_address = address - mb_mapping->start_registers;"
    },
    {
        "line": 201,
        "fullcodeline": "rsp_length = ctx->backend->build_response_basis(&sft, rsp);"
    },
    {
        "line": 203,
        "fullcodeline": "byte_count_pos = rsp_length++;"
    },
    {
        "line": 204,
        "fullcodeline": "rsp[rsp_length++] = _REPORT_SLAVE_ID;"
    },
    {
        "line": 206,
        "fullcodeline": "rsp[rsp_length++] = 0xFF;"
    },
    {
        "line": 208,
        "fullcodeline": "str_len = 3 + strlen(LIBMODBUS_VERSION_STRING);"
    },
    {
        "line": 210,
        "fullcodeline": "rsp_length += str_len;"
    },
    {
        "line": 211,
        "fullcodeline": "rsp[byte_count_pos] = rsp_length - byte_count_pos - 1;"
    },
    {
        "line": 219,
        "fullcodeline": "return -1;"
    },
    {
        "line": 222,
        "fullcodeline": "int mapping_address = address - mb_mapping->start_registers;"
    },
    {
        "line": 242,
        "fullcodeline": "int nb = (req[offset + 3] << 8) + req[offset + 4];"
    },
    {
        "line": 243,
        "fullcodeline": "uint16_t address_write = (req[offset + 5] << 8) + req[offset + 6];"
    },
    {
        "line": 244,
        "fullcodeline": "int nb_write = (req[offset + 7] << 8) + req[offset + 8];"
    },
    {
        "line": 245,
        "fullcodeline": "int nb_write_bytes = req[offset + 9];"
    },
    {
        "line": 246,
        "fullcodeline": "int mapping_address = address - mb_mapping->start_registers;"
    },
    {
        "line": 247,
        "fullcodeline": "int mapping_address_write = address_write - mb_mapping->start_registers;"
    },
    {
        "line": 40,
        "fullcodeline": "if (nb < 1 || MODBUS_MAX_READ_BITS < nb) {"
    },
    {
        "line": 71,
        "fullcodeline": "if (nb < 1 || MODBUS_MAX_READ_REGISTERS < nb) {"
    },
    {
        "line": 96,
        "fullcodeline": "if (mapping_address < 0 || mapping_address >= mb_mapping->nb_bits) {"
    },
    {
        "line": 121,
        "fullcodeline": "if (mapping_address < 0 || mapping_address >= mb_mapping->nb_registers) {"
    },
    {
        "line": 140,
        "fullcodeline": "if (nb < 1 || MODBUS_MAX_WRITE_BITS < nb) {"
    },
    {
        "line": 171,
        "fullcodeline": "if (nb < 1 || MODBUS_MAX_WRITE_REGISTERS < nb) {"
    },
    {
        "line": 216,
        "fullcodeline": "fprintf(stderr, \"FIXME Not implemented\\n\");"
    },
    {
        "line": 224,
        "fullcodeline": "if (mapping_address < 0 || mapping_address >= mb_mapping->nb_registers) {"
    },
    {
        "line": 249,
        "fullcodeline": "if (nb_write < 1 || MODBUS_MAX_WR_WRITE_REGISTERS < nb_write ||"
    },
    {
        "line": 41,
        "fullcodeline": "rsp_length = response_exception("
    },
    {
        "line": 72,
        "fullcodeline": "rsp_length = response_exception("
    },
    {
        "line": 97,
        "fullcodeline": "rsp_length = response_exception("
    },
    {
        "line": 122,
        "fullcodeline": "rsp_length = response_exception("
    },
    {
        "line": 144,
        "fullcodeline": "rsp_length = response_exception("
    },
    {
        "line": 172,
        "fullcodeline": "rsp_length = response_exception("
    },
    {
        "line": 225,
        "fullcodeline": "rsp_length = response_exception("
    },
    {
        "line": 251,
        "fullcodeline": "nb_write_bytes != nb_write * 2) {"
    },
    {
        "line": 252,
        "fullcodeline": "rsp_length = response_exception("
    },
    {
        "line": 102,
        "fullcodeline": "int data = (req[offset + 3] << 8) + req[offset + 4];"
    },
    {
        "line": 128,
        "fullcodeline": "int data = (req[offset + 3] << 8) + req[offset + 4];"
    },
    {
        "line": 130,
        "fullcodeline": "mb_mapping->tab_registers[mapping_address] = data;"
    },
    {
        "line": 131,
        "fullcodeline": "memcpy(rsp, req, req_length);"
    },
    {
        "line": 132,
        "fullcodeline": "rsp_length = req_length;"
    },
    {
        "line": 231,
        "fullcodeline": "uint16_t and = (req[offset + 3] << 8) + req[offset + 4];"
    },
    {
        "line": 232,
        "fullcodeline": "uint16_t or = (req[offset + 5] << 8) + req[offset + 6];"
    },
    {
        "line": 234,
        "fullcodeline": "data = (data & and) | (or & (~and));"
    },
    {
        "line": 235,
        "fullcodeline": "mb_mapping->tab_registers[mapping_address] = data;"
    },
    {
        "line": 236,
        "fullcodeline": "memcpy(rsp, req, req_length);"
    },
    {
        "line": 237,
        "fullcodeline": "rsp_length = req_length;"
    },
    {
        "line": 250,
        "fullcodeline": "nb < 1 || MODBUS_MAX_WR_READ_REGISTERS < nb ||"
    },
    {
        "line": 45,
        "fullcodeline": "} else if (mapping_address < 0 || (mapping_address + nb) > nb_bits) {"
    },
    {
        "line": 76,
        "fullcodeline": "} else if (mapping_address < 0 || (mapping_address + nb) > nb_registers) {"
    },
    {
        "line": 104,
        "fullcodeline": "if (data == 0xFF00 || data == 0x0) {"
    },
    {
        "line": 148,
        "fullcodeline": "} else if (mapping_address < 0 ||"
    },
    {
        "line": 176,
        "fullcodeline": "} else if (mapping_address < 0 ||"
    },
    {
        "line": 256,
        "fullcodeline": "} else if (mapping_address < 0 ||"
    },
    {
        "line": 46,
        "fullcodeline": "rsp_length = response_exception("
    },
    {
        "line": 77,
        "fullcodeline": "rsp_length = response_exception("
    },
    {
        "line": 105,
        "fullcodeline": "mb_mapping->tab_bits[mapping_address] = data ? ON : OFF;"
    },
    {
        "line": 106,
        "fullcodeline": "memcpy(rsp, req, req_length);"
    },
    {
        "line": 107,
        "fullcodeline": "rsp_length = req_length;"
    },
    {
        "line": 149,
        "fullcodeline": "(mapping_address + nb) > mb_mapping->nb_bits) {"
    },
    {
        "line": 150,
        "fullcodeline": "rsp_length = response_exception("
    },
    {
        "line": 177,
        "fullcodeline": "(mapping_address + nb) > mb_mapping->nb_registers) {"
    },
    {
        "line": 178,
        "fullcodeline": "rsp_length = response_exception("
    },
    {
        "line": 259,
        "fullcodeline": "(mapping_address_write + nb_write) > mb_mapping->nb_registers) {"
    },
    {
        "line": 260,
        "fullcodeline": "rsp_length = response_exception("
    },
    {
        "line": 52,
        "fullcodeline": "rsp_length = ctx->backend->build_response_basis(&sft, rsp);"
    },
    {
        "line": 53,
        "fullcodeline": "rsp[rsp_length++] = (nb / 8) + ((nb % 8) ? 1 : 0);"
    },
    {
        "line": 54,
        "fullcodeline": "rsp_length = response_io_status(tab_bits, mapping_address, nb,"
    },
    {
        "line": 84,
        "fullcodeline": "rsp_length = ctx->backend->build_response_basis(&sft, rsp);"
    },
    {
        "line": 85,
        "fullcodeline": "rsp[rsp_length++] = nb << 1;"
    },
    {
        "line": 109,
        "fullcodeline": "rsp_length = response_exception("
    },
    {
        "line": 157,
        "fullcodeline": "modbus_set_bits_from_bytes(mb_mapping->tab_bits, mapping_address, nb,"
    },
    {
        "line": 160,
        "fullcodeline": "rsp_length = ctx->backend->build_response_basis(&sft, rsp);"
    },
    {
        "line": 162,
        "fullcodeline": "memcpy(rsp + rsp_length, req + rsp_length, 4);"
    },
    {
        "line": 163,
        "fullcodeline": "rsp_length += 4;"
    },
    {
        "line": 190,
        "fullcodeline": "rsp_length = ctx->backend->build_response_basis(&sft, rsp);"
    },
    {
        "line": 192,
        "fullcodeline": "memcpy(rsp + rsp_length, req + rsp_length, 4);"
    },
    {
        "line": 193,
        "fullcodeline": "rsp_length += 4;"
    },
    {
        "line": 258,
        "fullcodeline": "mapping_address < 0 ||"
    },
    {
        "line": 267,
        "fullcodeline": "rsp_length = ctx->backend->build_response_basis(&sft, rsp);"
    },
    {
        "line": 268,
        "fullcodeline": "rsp[rsp_length++] = nb << 1;"
    },
    {
        "line": 50,
        "fullcodeline": "mapping_address < 0 ? address : address + nb, name);"
    },
    {
        "line": 80,
        "fullcodeline": "mapping_address < 0 ? address : address + nb, name);"
    },
    {
        "line": 86,
        "fullcodeline": "for (i = mapping_address; i < mapping_address + nb; i++) {"
    },
    {
        "line": 154,
        "fullcodeline": "mapping_address < 0 ? address : address + nb);"
    },
    {
        "line": 181,
        "fullcodeline": "mapping_address < 0 ? address : address + nb);"
    },
    {
        "line": 184,
        "fullcodeline": "for (i = mapping_address, j = 6; i < mapping_address + nb; i++, j += 2) {"
    },
    {
        "line": 257,
        "fullcodeline": "(mapping_address + nb) > mb_mapping->nb_registers ||"
    },
    {
        "line": 263,
        "fullcodeline": "mapping_address < 0 ? address : address + nb,"
    },
    {
        "line": 264,
        "fullcodeline": "mapping_address_write < 0 ? address_write : address_write + nb_write);"
    },
    {
        "line": 273,
        "fullcodeline": "i < mapping_address_write + nb_write; i++, j += 2) {"
    },
    {
        "line": 279,
        "fullcodeline": "for (i = mapping_address; i < mapping_address + nb; i++) {"
    },
    {
        "line": 87,
        "fullcodeline": "rsp[rsp_length++] = tab_registers[i] >> 8;"
    },
    {
        "line": 88,
        "fullcodeline": "rsp[rsp_length++] = tab_registers[i] & 0xFF;"
    },
    {
        "line": 186,
        "fullcodeline": "mb_mapping->tab_registers[i] ="
    },
    {
        "line": 272,
        "fullcodeline": "for (i = mapping_address_write, j = 10;"
    },
    {
        "line": 274,
        "fullcodeline": "mb_mapping->tab_registers[i] ="
    },
    {
        "line": 280,
        "fullcodeline": "rsp[rsp_length++] = mb_mapping->tab_registers[i] >> 8;"
    },
    {
        "line": 281,
        "fullcodeline": "rsp[rsp_length++] = mb_mapping->tab_registers[i] & 0xFF;"
    },
    {
        "line": 158,
        "fullcodeline": "&req[offset + 6]);"
    },
    {
        "line": 187,
        "fullcodeline": "(req[offset + j] << 8) + req[offset + j + 1];"
    },
    {
        "line": 275,
        "fullcodeline": "(req[offset + j] << 8) + req[offset + j + 1];"
    }
]