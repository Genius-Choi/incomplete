[
    {
        "line": 3,
        "fullcodeline": "const ceph_msg_header& header = m->get_header();"
    },
    {
        "line": 4,
        "fullcodeline": "const ceph_msg_footer& footer = m->get_footer();"
    },
    {
        "line": 89,
        "fullcodeline": "ldout(cct, 10) << __func__ << \" seq \" << m->get_seq()"
    },
    {
        "line": 6,
        "fullcodeline": "if (!HAVE_FEATURE(features, CEPHX_V2)) {"
    },
    {
        "line": 20,
        "fullcodeline": "} __attribute__ ((packed)) sigblock = {"
    },
    {
        "line": 26,
        "fullcodeline": "char exp_buf[CryptoKey::get_max_outbuf_size(sizeof(sigblock))];"
    },
    {
        "line": 55,
        "fullcodeline": "} __attribute__ ((packed)) sigblock = {"
    },
    {
        "line": 66,
        "fullcodeline": "char exp_buf[CryptoKey::get_max_outbuf_size(sizeof(sigblock))];"
    },
    {
        "line": 85,
        "fullcodeline": "} *penc = reinterpret_cast<enc*>(exp_buf);"
    },
    {
        "line": 86,
        "fullcodeline": "*psig = penc->a ^ penc->b ^ penc->c ^ penc->d;"
    },
    {
        "line": 21,
        "fullcodeline": "1, mswab(AUTH_ENC_MAGIC), mswab<uint32_t>(4*4),"
    },
    {
        "line": 22,
        "fullcodeline": "mswab<uint32_t>(header.crc), mswab<uint32_t>(footer.front_crc),"
    },
    {
        "line": 23,
        "fullcodeline": "mswab<uint32_t>(footer.middle_crc), mswab<uint32_t>(footer.data_crc)"
    },
    {
        "line": 29,
        "fullcodeline": "const CryptoKey::in_slice_t in {"
    },
    {
        "line": 33,
        "fullcodeline": "const CryptoKey::out_slice_t out {"
    },
    {
        "line": 37,
        "fullcodeline": "key.encrypt(cct, in, out);"
    },
    {
        "line": 43,
        "fullcodeline": "*psig = *reinterpret_cast<__le64*>(exp_buf);"
    },
    {
        "line": 39,
        "fullcodeline": "lderr(cct) << __func__ << \" failed to encrypt signature block\" << dendl;"
    },
    {
        "line": 56,
        "fullcodeline": "mswab<uint32_t>(header.crc),"
    },
    {
        "line": 57,
        "fullcodeline": "mswab<uint32_t>(footer.front_crc),"
    },
    {
        "line": 58,
        "fullcodeline": "mswab<uint32_t>(header.front_len),"
    },
    {
        "line": 59,
        "fullcodeline": "mswab<uint32_t>(footer.middle_crc),"
    },
    {
        "line": 60,
        "fullcodeline": "mswab<uint32_t>(header.middle_len),"
    },
    {
        "line": 61,
        "fullcodeline": "mswab<uint32_t>(footer.data_crc),"
    },
    {
        "line": 62,
        "fullcodeline": "mswab<uint32_t>(header.data_len),"
    },
    {
        "line": 63,
        "fullcodeline": "mswab<uint32_t>(header.seq)"
    },
    {
        "line": 69,
        "fullcodeline": "const CryptoKey::in_slice_t in {"
    },
    {
        "line": 73,
        "fullcodeline": "const CryptoKey::out_slice_t out {"
    },
    {
        "line": 77,
        "fullcodeline": "key.encrypt(cct, in, out);"
    },
    {
        "line": 31,
        "fullcodeline": "reinterpret_cast<const unsigned char*>(&sigblock)"
    },
    {
        "line": 35,
        "fullcodeline": "reinterpret_cast<unsigned char*>(&exp_buf)"
    },
    {
        "line": 40,
        "fullcodeline": "return -1;"
    },
    {
        "line": 79,
        "fullcodeline": "lderr(cct) << __func__ << \" failed to encrypt signature block\" << dendl;"
    },
    {
        "line": 71,
        "fullcodeline": "reinterpret_cast<const unsigned char*>(&sigblock)"
    },
    {
        "line": 75,
        "fullcodeline": "reinterpret_cast<unsigned char*>(&exp_buf)"
    },
    {
        "line": 80,
        "fullcodeline": "return -1;"
    }
]