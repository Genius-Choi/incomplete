[
    {
        "line": 3,
        "fullcodeline": "const ceph_msg_header& header = m->get_header();"
    },
    {
        "line": 4,
        "fullcodeline": "const ceph_msg_footer& footer = m->get_footer();"
    },
    {
        "line": 17,
        "fullcodeline": "} __attribute__ ((packed)) sigblock = {"
    },
    {
        "line": 23,
        "fullcodeline": "char exp_buf[CryptoKey::get_max_outbuf_size(sizeof(sigblock))];"
    },
    {
        "line": 43,
        "fullcodeline": "ldout(cct, 10) << __func__ << \" seq \" << m->get_seq()"
    },
    {
        "line": 18,
        "fullcodeline": "1, mswab(AUTH_ENC_MAGIC), mswab<uint32_t>(4*4),"
    },
    {
        "line": 19,
        "fullcodeline": "mswab<uint32_t>(header.crc), mswab<uint32_t>(footer.front_crc),"
    },
    {
        "line": 20,
        "fullcodeline": "mswab<uint32_t>(footer.middle_crc), mswab<uint32_t>(footer.data_crc)"
    },
    {
        "line": 26,
        "fullcodeline": "const CryptoKey::in_slice_t in {"
    },
    {
        "line": 30,
        "fullcodeline": "const CryptoKey::out_slice_t out {"
    },
    {
        "line": 35,
        "fullcodeline": "key.encrypt(cct, in, out);"
    },
    {
        "line": 41,
        "fullcodeline": "*psig = *reinterpret_cast<__le64*>(exp_buf);"
    },
    {
        "line": 37,
        "fullcodeline": "lderr(cct) << __func__ << \" failed to encrypt signature block\" << dendl;"
    },
    {
        "line": 28,
        "fullcodeline": "reinterpret_cast<const unsigned char*>(&sigblock)"
    },
    {
        "line": 32,
        "fullcodeline": "reinterpret_cast<unsigned char*>(&exp_buf)"
    },
    {
        "line": 38,
        "fullcodeline": "return -1;"
    }
]