[
    {
        "line": 5,
        "fullcodeline": "bool strip = false;"
    },
    {
        "line": 6,
        "fullcodeline": "bool tag_open = false;"
    },
    {
        "line": 7,
        "fullcodeline": "int tag_open_idx = 0; //Are we within < > ?"
    },
    {
        "line": 8,
        "fullcodeline": "bool closing_tag_open = false; //Are we within </ > ?"
    },
    {
        "line": 9,
        "fullcodeline": "int orig_tag_open_idx = 0;"
    },
    {
        "line": 10,
        "fullcodeline": "bool proprietary_tag = false; //Are we within a proprietary element?"
    },
    {
        "line": 11,
        "fullcodeline": "bool proprietary_closing_tag = false;"
    },
    {
        "line": 12,
        "fullcodeline": "int crop_end_idx = 0;"
    },
    {
        "line": 13,
        "fullcodeline": "char buffer[READ_BUFFER_SIZE] = \"\";"
    },
    {
        "line": 14,
        "fullcodeline": "char tagname[READ_BUFFER_SIZE] = \"\";"
    },
    {
        "line": 15,
        "fullcodeline": "int tagname_idx = 0;"
    },
    {
        "line": 16,
        "fullcodeline": "char close_tagname[READ_BUFFER_SIZE] = \"\";"
    },
    {
        "line": 25,
        "fullcodeline": "input_string_size = input_string.size();"
    },
    {
        "line": 18,
        "fullcodeline": "for (i = 0; i < READ_BUFFER_SIZE; i++)"
    },
    {
        "line": 27,
        "fullcodeline": "for (i = 0; i < input_string_size; i++)"
    },
    {
        "line": 100,
        "fullcodeline": "if (proprietary_tag == true && orig_tag_open_idx < input_string.size())"
    },
    {
        "line": 20,
        "fullcodeline": "buffer[i] = 0;"
    },
    {
        "line": 21,
        "fullcodeline": "tagname[i] = 0;"
    },
    {
        "line": 22,
        "fullcodeline": "close_tagname[i] = 0;"
    },
    {
        "line": 106,
        "fullcodeline": "input_string.copy(buffer, (crop_end_idx - orig_tag_open_idx) + 1, orig_tag_open_idx);"
    },
    {
        "line": 107,
        "fullcodeline": "message_out(INFO, \"sanitize_proprietary_tags() (end of line) removed: \" + string(buffer));"
    },
    {
        "line": 108,
        "fullcodeline": "input_string.erase(orig_tag_open_idx, (crop_end_idx - orig_tag_open_idx) + 1);"
    },
    {
        "line": 109,
        "fullcodeline": "input_string_size = input_string.size();"
    },
    {
        "line": 29,
        "fullcodeline": "if (input_string.c_str()[i] == '<')"
    },
    {
        "line": 84,
        "fullcodeline": "if (strip == true && orig_tag_open_idx < input_string.size())"
    },
    {
        "line": 102,
        "fullcodeline": "if (crop_end_idx == 0)   //no closing tag"
    },
    {
        "line": 31,
        "fullcodeline": "tag_open = true;"
    },
    {
        "line": 32,
        "fullcodeline": "tag_open_idx = i;"
    },
    {
        "line": 86,
        "fullcodeline": "input_string.copy(buffer, (crop_end_idx - orig_tag_open_idx) + 1, orig_tag_open_idx);"
    },
    {
        "line": 87,
        "fullcodeline": "message_out(INFO, \"sanitize_proprietary_tags() (end tag or new tag) removed: \" + string(buffer));"
    },
    {
        "line": 88,
        "fullcodeline": "input_string.erase(orig_tag_open_idx, (crop_end_idx - orig_tag_open_idx) + 1);"
    },
    {
        "line": 89,
        "fullcodeline": "i = orig_tag_open_idx - 1;"
    },
    {
        "line": 90,
        "fullcodeline": "proprietary_tag = false;"
    },
    {
        "line": 91,
        "fullcodeline": "proprietary_closing_tag = false;"
    },
    {
        "line": 92,
        "fullcodeline": "closing_tag_open = false;"
    },
    {
        "line": 93,
        "fullcodeline": "tag_open = false;"
    },
    {
        "line": 94,
        "fullcodeline": "strip = false;"
    },
    {
        "line": 96,
        "fullcodeline": "input_string_size = input_string.size();"
    },
    {
        "line": 104,
        "fullcodeline": "crop_end_idx = input_string.size() - 1;"
    },
    {
        "line": 33,
        "fullcodeline": "if (proprietary_tag == true && input_string.c_str()[i+1] == '/')"
    },
    {
        "line": 36,
        "fullcodeline": "closing_tag_open = true;"
    },
    {
        "line": 58,
        "fullcodeline": "else if (input_string.c_str()[i] == '>')"
    },
    {
        "line": 38,
        "fullcodeline": "if (strncmp(tagname, &(input_string.c_str()[i+2]), strlen(tagname)) != 0)"
    },
    {
        "line": 60,
        "fullcodeline": "tag_open = false;"
    },
    {
        "line": 61,
        "fullcodeline": "closing_tag_open = false;"
    },
    {
        "line": 62,
        "fullcodeline": "tagname[tagname_idx] = 0;"
    },
    {
        "line": 63,
        "fullcodeline": "tagname_idx = 0;"
    },
    {
        "line": 42,
        "fullcodeline": "crop_end_idx = i - 1;"
    },
    {
        "line": 43,
        "fullcodeline": "strip = true;"
    },
    {
        "line": 51,
        "fullcodeline": "else if (proprietary_tag == true)"
    },
    {
        "line": 64,
        "fullcodeline": "if (proprietary_closing_tag == true)"
    },
    {
        "line": 48,
        "fullcodeline": "proprietary_closing_tag = true;"
    },
    {
        "line": 54,
        "fullcodeline": "crop_end_idx = i - 1;"
    },
    {
        "line": 55,
        "fullcodeline": "strip = true;"
    },
    {
        "line": 66,
        "fullcodeline": "crop_end_idx = i;"
    },
    {
        "line": 67,
        "fullcodeline": "strip = true;"
    },
    {
        "line": 70,
        "fullcodeline": "else if (tag_open == true && closing_tag_open == false)"
    },
    {
        "line": 80,
        "fullcodeline": "tagname[tagname_idx] = input_string.c_str()[i];"
    },
    {
        "line": 81,
        "fullcodeline": "tagname_idx++;"
    },
    {
        "line": 72,
        "fullcodeline": "if (input_string.c_str()[i] == '.')"
    },
    {
        "line": 74,
        "fullcodeline": "if (proprietary_tag != true)"
    },
    {
        "line": 76,
        "fullcodeline": "orig_tag_open_idx = tag_open_idx;"
    },
    {
        "line": 77,
        "fullcodeline": "proprietary_tag = true;"
    }
]