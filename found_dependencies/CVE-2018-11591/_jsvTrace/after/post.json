[
    {
        "line": 13,
        "fullcodeline": "jsvTraceLockInfo(var);"
    },
    {
        "line": 15,
        "fullcodeline": "int lowestLevel = _jsvTraceGetLowestLevel(baseVar, var);"
    },
    {
        "line": 26,
        "fullcodeline": "char endBracket = ' ';"
    },
    {
        "line": 86,
        "fullcodeline": "jsiConsolePrintf(\"%c\", endBracket);"
    },
    {
        "line": 6,
        "fullcodeline": "for (i=0;i<indent;i++) jsiConsolePrint(\" \");"
    },
    {
        "line": 8,
        "fullcodeline": "if (!var) {"
    },
    {
        "line": 16,
        "fullcodeline": "if (lowestLevel < level) {"
    },
    {
        "line": 24,
        "fullcodeline": "if (jsvIsName(var)) jsiConsolePrint(\"Name \");"
    },
    {
        "line": 27,
        "fullcodeline": "if (jsvIsObject(var)) { jsiConsolePrint(\"Object { \"); endBracket = '}'; }"
    },
    {
        "line": 57,
        "fullcodeline": "if (jsvIsNameInt(var)) {"
    },
    {
        "line": 65,
        "fullcodeline": "if (jsvHasSingleChild(var)) {"
    },
    {
        "line": 9,
        "fullcodeline": "jsiConsolePrint(\"undefined\");"
    },
    {
        "line": 20,
        "fullcodeline": "jsiConsolePrint(\"...\\n\");"
    },
    {
        "line": 58,
        "fullcodeline": "jsiConsolePrintf(\"= int %d\\n\", (int)jsvGetFirstChildSigned(var));"
    },
    {
        "line": 66,
        "fullcodeline": "JsVar *child = jsvGetFirstChild(var) ? jsvLock(jsvGetFirstChild(var)) : 0;"
    },
    {
        "line": 67,
        "fullcodeline": "_jsvTrace(child, indent+2, baseVar, level+1);"
    },
    {
        "line": 68,
        "fullcodeline": "jsvUnLock(child);"
    },
    {
        "line": 28,
        "fullcodeline": "else if (jsvIsArray(var)) { jsiConsolePrintf(\"Array(%d) [ \", var->varData.integer); endBracket = ']'; }"
    },
    {
        "line": 60,
        "fullcodeline": "} else if (jsvIsNameIntBool(var)) {"
    },
    {
        "line": 69,
        "fullcodeline": "} else if (jsvHasChildren(var)) {"
    },
    {
        "line": 61,
        "fullcodeline": "jsiConsolePrintf(\"= bool %s\\n\", jsvGetFirstChild(var)?\"true\":\"false\");"
    },
    {
        "line": 71,
        "fullcodeline": "jsvIteratorNew(&it, var, JSIF_DEFINED_ARRAY_ElEMENTS);"
    },
    {
        "line": 72,
        "fullcodeline": "bool first = true;"
    },
    {
        "line": 82,
        "fullcodeline": "jsvIteratorFree(&it);"
    },
    {
        "line": 73,
        "fullcodeline": "while (jsvIteratorHasElement(&it) && !jspIsInterrupted()) {"
    },
    {
        "line": 83,
        "fullcodeline": "if (!first)"
    },
    {
        "line": 29,
        "fullcodeline": "else if (jsvIsNativeFunction(var)) { jsiConsolePrintf(\"NativeFunction 0x%x (%d) { \", var->varData.native.ptr, var->varData.native.argTypes); endBracket = '}'; }"
    },
    {
        "line": 75,
        "fullcodeline": "first = false;"
    },
    {
        "line": 76,
        "fullcodeline": "JsVar *child = jsvIteratorGetKey(&it);"
    },
    {
        "line": 77,
        "fullcodeline": "_jsvTrace(child, indent+2, baseVar, level+1);"
    },
    {
        "line": 78,
        "fullcodeline": "jsvUnLock(child);"
    },
    {
        "line": 79,
        "fullcodeline": "jsiConsolePrintf(\"\\n\");"
    },
    {
        "line": 80,
        "fullcodeline": "jsvIteratorNext(&it);"
    },
    {
        "line": 84,
        "fullcodeline": "for (i=0;i<indent;i++) jsiConsolePrint(\" \");"
    },
    {
        "line": 74,
        "fullcodeline": "if (first) jsiConsolePrintf(\"\\n\");"
    },
    {
        "line": 30,
        "fullcodeline": "else if (jsvIsFunction(var)) {"
    },
    {
        "line": 31,
        "fullcodeline": "jsiConsolePrint(\"Function { \");"
    },
    {
        "line": 33,
        "fullcodeline": "endBracket = '}';"
    },
    {
        "line": 32,
        "fullcodeline": "if (jsvIsFunctionReturn(var)) jsiConsolePrint(\"return \");"
    },
    {
        "line": 34,
        "fullcodeline": "} else if (jsvIsPin(var)) jsiConsolePrintf(\"Pin %d\", jsvGetInteger(var));"
    },
    {
        "line": 35,
        "fullcodeline": "else if (jsvIsInt(var)) jsiConsolePrintf(\"Integer %d\", jsvGetInteger(var));"
    },
    {
        "line": 36,
        "fullcodeline": "else if (jsvIsBoolean(var)) jsiConsolePrintf(\"Bool %s\", jsvGetBool(var)?\"true\":\"false\");"
    },
    {
        "line": 37,
        "fullcodeline": "else if (jsvIsFloat(var)) jsiConsolePrintf(\"Double %f\", jsvGetFloat(var));"
    },
    {
        "line": 38,
        "fullcodeline": "else if (jsvIsFunctionParameter(var)) jsiConsolePrintf(\"Param %q \", var);"
    },
    {
        "line": 39,
        "fullcodeline": "else if (jsvIsArrayBufferName(var)) jsiConsolePrintf(\"ArrayBufferName[%d] \", jsvGetInteger(var));"
    },
    {
        "line": 40,
        "fullcodeline": "else if (jsvIsArrayBuffer(var)) jsiConsolePrintf(\"%s \", jswGetBasicObjectName(var)?jswGetBasicObjectName(var):\"unknown ArrayBuffer\"); // way to get nice name"
    },
    {
        "line": 41,
        "fullcodeline": "else if (jsvIsString(var)) {"
    },
    {
        "line": 42,
        "fullcodeline": "size_t blocks = 1;"
    },
    {
        "line": 51,
        "fullcodeline": "jsiConsolePrintf(\"%sString [%d blocks] %q\", jsvIsFlatString(var)?\"Flat\":(jsvIsNativeString(var)?\"Native\":\"\"), blocks, var);"
    },
    {
        "line": 43,
        "fullcodeline": "if (jsvGetLastChild(var)) {"
    },
    {
        "line": 48,
        "fullcodeline": "if (jsvIsFlatString(var)) {"
    },
    {
        "line": 53,
        "fullcodeline": "jsiConsolePrintf(\"Unknown %d\", var->flags & (JsVarFlags)~(JSV_LOCK_MASK));"
    },
    {
        "line": 44,
        "fullcodeline": "JsVar *v = jsvLock(jsvGetLastChild(var));"
    },
    {
        "line": 45,
        "fullcodeline": "blocks += jsvCountJsVarsUsed(v);"
    },
    {
        "line": 46,
        "fullcodeline": "jsvUnLock(v);"
    },
    {
        "line": 49,
        "fullcodeline": "blocks += jsvGetFlatStringBlocks(var);"
    }
]