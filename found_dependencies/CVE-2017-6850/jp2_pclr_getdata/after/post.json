[
    {
        "line": 9,
        "fullcodeline": "pclr->lutdata = 0;"
    },
    {
        "line": 10,
        "fullcodeline": "pclr->bpc = 0;"
    },
    {
        "line": 16,
        "fullcodeline": "lutsize = pclr->numlutents * pclr->numchans;"
    },
    {
        "line": 12,
        "fullcodeline": "if (jp2_getuint16(in, &pclr->numlutents) ||"
    },
    {
        "line": 17,
        "fullcodeline": "if (!(pclr->lutdata = jas_alloc2(lutsize, sizeof(int_fast32_t)))) {"
    },
    {
        "line": 20,
        "fullcodeline": "if (!(pclr->bpc = jas_alloc2(pclr->numchans, sizeof(uint_fast8_t)))) {"
    },
    {
        "line": 23,
        "fullcodeline": "for (i = 0; i < pclr->numchans; ++i) {"
    },
    {
        "line": 28,
        "fullcodeline": "for (i = 0; i < pclr->numlutents; ++i) {"
    },
    {
        "line": 13,
        "fullcodeline": "jp2_getuint8(in, &pclr->numchans)) {"
    },
    {
        "line": 14,
        "fullcodeline": "return -1;"
    },
    {
        "line": 18,
        "fullcodeline": "return -1;"
    },
    {
        "line": 21,
        "fullcodeline": "return -1;"
    },
    {
        "line": 24,
        "fullcodeline": "if (jp2_getuint8(in, &pclr->bpc[i])) {"
    },
    {
        "line": 29,
        "fullcodeline": "for (j = 0; j < pclr->numchans; ++j) {"
    },
    {
        "line": 34,
        "fullcodeline": "pclr->lutdata[i * pclr->numchans + j] = x;"
    },
    {
        "line": 25,
        "fullcodeline": "return -1;"
    },
    {
        "line": 30,
        "fullcodeline": "if (jp2_getint(in, (pclr->bpc[j] & 0x80) != 0,"
    },
    {
        "line": 31,
        "fullcodeline": "(pclr->bpc[j] & 0x7f) + 1, &x)) {"
    },
    {
        "line": 32,
        "fullcodeline": "return -1;"
    }
]