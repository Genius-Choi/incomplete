[
    {
        "line": 4,
        "fullcodeline": "struct snd_msndmidi *mpu = mpuv;"
    },
    {
        "line": 5,
        "fullcodeline": "void *pwMIDQData = mpu->dev->mappedbase + MIDQ_DATA_BUFF;"
    },
    {
        "line": 7,
        "fullcodeline": "spin_lock_irqsave(&mpu->input_lock, flags);"
    },
    {
        "line": 24,
        "fullcodeline": "spin_unlock_irqrestore(&mpu->input_lock, flags);"
    },
    {
        "line": 8,
        "fullcodeline": "while (readw(mpu->dev->MIDQ + JQS_wTail) !="
    },
    {
        "line": 9,
        "fullcodeline": "readw(mpu->dev->MIDQ + JQS_wHead)) {"
    },
    {
        "line": 11,
        "fullcodeline": "val = readw(pwMIDQData + 2 * readw(mpu->dev->MIDQ + JQS_wHead));"
    },
    {
        "line": 18,
        "fullcodeline": "wTmp = readw(mpu->dev->MIDQ + JQS_wHead) + 1;"
    },
    {
        "line": 13,
        "fullcodeline": "if (test_bit(MSNDMIDI_MODE_BIT_INPUT_TRIGGER,"
    },
    {
        "line": 19,
        "fullcodeline": "if (wTmp > readw(mpu->dev->MIDQ + JQS_wSize))"
    },
    {
        "line": 15,
        "fullcodeline": "snd_rawmidi_receive(mpu->substream_input,"
    },
    {
        "line": 20,
        "fullcodeline": "writew(0,  mpu->dev->MIDQ + JQS_wHead);"
    },
    {
        "line": 16,
        "fullcodeline": "(unsigned char *)&val, 1);"
    },
    {
        "line": 22,
        "fullcodeline": "writew(wTmp,  mpu->dev->MIDQ + JQS_wHead);"
    }
]