[
    {
        "line": 7,
        "fullcodeline": "int reading_from_buf = data_pkt_buf->size > 0;"
    },
    {
        "line": 47,
        "fullcodeline": "error = 0;"
    },
    {
        "line": 21,
        "fullcodeline": "while (line_len > 0) {"
    },
    {
        "line": 12,
        "fullcodeline": "git_buf_put(data_pkt_buf, data_pkt->data, data_pkt->len);"
    },
    {
        "line": 13,
        "fullcodeline": "line = data_pkt_buf->ptr;"
    },
    {
        "line": 14,
        "fullcodeline": "line_len = data_pkt_buf->size;"
    },
    {
        "line": 22,
        "fullcodeline": "error = git_pkt_parse_line(&pkt, line, &line_end, line_len);"
    },
    {
        "line": 36,
        "fullcodeline": "line_len -= (line_end - line);"
    },
    {
        "line": 37,
        "fullcodeline": "line = line_end;"
    },
    {
        "line": 39,
        "fullcodeline": "error = add_push_report_pkt(push, pkt);"
    },
    {
        "line": 41,
        "fullcodeline": "git_pkt_free(pkt);"
    },
    {
        "line": 51,
        "fullcodeline": "git_buf_consume(data_pkt_buf, line_end);"
    },
    {
        "line": 17,
        "fullcodeline": "line = data_pkt->data;"
    },
    {
        "line": 18,
        "fullcodeline": "line_len = data_pkt->len;"
    },
    {
        "line": 24,
        "fullcodeline": "if (error == GIT_EBUFS) {"
    },
    {
        "line": 43,
        "fullcodeline": "if (error < 0 && error != GIT_ITEROVER)"
    },
    {
        "line": 29,
        "fullcodeline": "error = 0;"
    },
    {
        "line": 27,
        "fullcodeline": "if (!reading_from_buf)"
    },
    {
        "line": 28,
        "fullcodeline": "git_buf_put(data_pkt_buf, line, line_len);"
    },
    {
        "line": 32,
        "fullcodeline": "else if (error < 0)"
    }
]