[
    {
        "line": 27,
        "fullcodeline": "source_url = url"
    },
    {
        "line": 23,
        "fullcodeline": "if not url:"
    },
    {
        "line": 71,
        "fullcodeline": "if not path:"
    },
    {
        "line": 87,
        "fullcodeline": "return Url("
    },
    {
        "line": 28,
        "fullcodeline": "if not SCHEME_RE.search(url):"
    },
    {
        "line": 29,
        "fullcodeline": "url = \"//\" + url"
    },
    {
        "line": 33,
        "fullcodeline": "normalize_uri = scheme is None or scheme.lower() in NORMALIZABLE_SCHEMES"
    },
    {
        "line": 54,
        "fullcodeline": "host = _normalize_host(host, scheme)"
    },
    {
        "line": 88,
        "fullcodeline": "scheme=ensure_type(scheme),"
    },
    {
        "line": 89,
        "fullcodeline": "auth=ensure_type(auth),"
    },
    {
        "line": 90,
        "fullcodeline": "host=ensure_type(host),"
    },
    {
        "line": 92,
        "fullcodeline": "path=ensure_type(path),"
    },
    {
        "line": 93,
        "fullcodeline": "query=ensure_type(query),"
    },
    {
        "line": 94,
        "fullcodeline": "fragment=ensure_type(fragment),"
    },
    {
        "line": 25,
        "fullcodeline": "return Url()"
    },
    {
        "line": 32,
        "fullcodeline": "scheme, authority, path, query, fragment = URI_RE.match(url).groups()"
    },
    {
        "line": 49,
        "fullcodeline": "if port is not None:"
    },
    {
        "line": 56,
        "fullcodeline": "if normalize_uri and path:"
    },
    {
        "line": 59,
        "fullcodeline": "if normalize_uri and query:"
    },
    {
        "line": 61,
        "fullcodeline": "if normalize_uri and fragment:"
    },
    {
        "line": 36,
        "fullcodeline": "scheme = scheme.lower()"
    },
    {
        "line": 40,
        "fullcodeline": "auth = auth or None"
    },
    {
        "line": 50,
        "fullcodeline": "port = int(port)"
    },
    {
        "line": 57,
        "fullcodeline": "path = _remove_path_dot_segments(path)"
    },
    {
        "line": 58,
        "fullcodeline": "path = _encode_invalid_chars(path, PATH_CHARS)"
    },
    {
        "line": 60,
        "fullcodeline": "query = _encode_invalid_chars(query, QUERY_CHARS)"
    },
    {
        "line": 62,
        "fullcodeline": "fragment = _encode_invalid_chars(fragment, FRAGMENT_CHARS)"
    },
    {
        "line": 72,
        "fullcodeline": "if query is not None or fragment is not None:"
    },
    {
        "line": 73,
        "fullcodeline": "path = \"\""
    },
    {
        "line": 75,
        "fullcodeline": "path = None"
    },
    {
        "line": 39,
        "fullcodeline": "auth, _, host_port = authority.rpartition(\"@\")"
    },
    {
        "line": 41,
        "fullcodeline": "host, port = _HOST_PORT_RE.match(host_port).groups()"
    },
    {
        "line": 42,
        "fullcodeline": "if auth and normalize_uri:"
    },
    {
        "line": 44,
        "fullcodeline": "if port == \"\":"
    },
    {
        "line": 47,
        "fullcodeline": "auth, host, port = None, None, None"
    },
    {
        "line": 65,
        "fullcodeline": "return six.raise_from(LocationParseError(source_url), None)"
    },
    {
        "line": 43,
        "fullcodeline": "auth = _encode_invalid_chars(auth, USERINFO_CHARS)"
    },
    {
        "line": 45,
        "fullcodeline": "port = None"
    },
    {
        "line": 51,
        "fullcodeline": "if not (0 <= port <= 65535):"
    },
    {
        "line": 52,
        "fullcodeline": "raise LocationParseError(url)"
    }
]