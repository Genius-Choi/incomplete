[
    {
        "line": 2,
        "fullcodeline": "VP9_COMMON *const cm = &cpi->common;"
    },
    {
        "line": 3,
        "fullcodeline": "RATE_CONTROL *const rc = &cpi->rc;"
    },
    {
        "line": 4,
        "fullcodeline": "int last_w = cpi->oxcf.width;"
    },
    {
        "line": 5,
        "fullcodeline": "int last_h = cpi->oxcf.height;"
    },
    {
        "line": 7,
        "fullcodeline": "vp9_init_quantizer(cpi);"
    },
    {
        "line": 9,
        "fullcodeline": "cm->bit_depth = oxcf->bit_depth;"
    },
    {
        "line": 10,
        "fullcodeline": "cm->color_space = oxcf->color_space;"
    },
    {
        "line": 11,
        "fullcodeline": "cm->color_range = oxcf->color_range;"
    },
    {
        "line": 13,
        "fullcodeline": "cpi->target_level = oxcf->target_level;"
    },
    {
        "line": 14,
        "fullcodeline": "cpi->keep_level_stats = oxcf->target_level != LEVEL_MAX;"
    },
    {
        "line": 15,
        "fullcodeline": "set_level_constraint(&cpi->level_constraint,"
    },
    {
        "line": 23,
        "fullcodeline": "cpi->oxcf = *oxcf;"
    },
    {
        "line": 34,
        "fullcodeline": "cpi->refresh_golden_frame = 0;"
    },
    {
        "line": 35,
        "fullcodeline": "cpi->refresh_last_frame = 1;"
    },
    {
        "line": 36,
        "fullcodeline": "cm->refresh_frame_context = 1;"
    },
    {
        "line": 37,
        "fullcodeline": "cm->reset_frame_context = 0;"
    },
    {
        "line": 39,
        "fullcodeline": "vp9_reset_segment_features(&cm->seg);"
    },
    {
        "line": 40,
        "fullcodeline": "vp9_set_high_precision_mv(cpi, 0);"
    },
    {
        "line": 48,
        "fullcodeline": "cpi->encode_breakout = cpi->oxcf.encode_breakout;"
    },
    {
        "line": 50,
        "fullcodeline": "vp9_set_rc_buffer_sizes(cpi);"
    },
    {
        "line": 53,
        "fullcodeline": "vp9_new_framerate(cpi, cpi->framerate);"
    },
    {
        "line": 56,
        "fullcodeline": "rc->worst_quality = cpi->oxcf.worst_allowed_q;"
    },
    {
        "line": 57,
        "fullcodeline": "rc->best_quality = cpi->oxcf.best_allowed_q;"
    },
    {
        "line": 59,
        "fullcodeline": "cm->interp_filter = cpi->sf.default_interp_filter;"
    },
    {
        "line": 114,
        "fullcodeline": "vp9_check_reset_rc_flag(cpi);"
    },
    {
        "line": 116,
        "fullcodeline": "cpi->alt_ref_source = NULL;"
    },
    {
        "line": 117,
        "fullcodeline": "rc->is_src_frame_alt_ref = 0;"
    },
    {
        "line": 125,
        "fullcodeline": "set_tile_limits(cpi);"
    },
    {
        "line": 127,
        "fullcodeline": "cpi->ext_refresh_frame_flags_pending = 0;"
    },
    {
        "line": 128,
        "fullcodeline": "cpi->ext_refresh_frame_context_pending = 0;"
    },
    {
        "line": 134,
        "fullcodeline": "vp9_set_row_mt(cpi);"
    },
    {
        "line": 8,
        "fullcodeline": "if (cm->profile != oxcf->profile) cm->profile = oxcf->profile;"
    },
    {
        "line": 16,
        "fullcodeline": "get_level_index(cpi->target_level));"
    },
    {
        "line": 18,
        "fullcodeline": "if (cm->profile <= PROFILE_1)"
    },
    {
        "line": 28,
        "fullcodeline": "if ((oxcf->pass == 0) && (oxcf->rc_mode == VPX_Q)) {"
    },
    {
        "line": 61,
        "fullcodeline": "if (cpi->oxcf.render_width > 0 && cpi->oxcf.render_height > 0) {"
    },
    {
        "line": 68,
        "fullcodeline": "if (last_w != cpi->oxcf.width || last_h != cpi->oxcf.height) {"
    },
    {
        "line": 93,
        "fullcodeline": "if (cm->current_video_frame == 0 || last_w != cpi->oxcf.width ||"
    },
    {
        "line": 97,
        "fullcodeline": "if (last_w != cpi->oxcf.width || last_h != cpi->oxcf.height) {"
    },
    {
        "line": 106,
        "fullcodeline": "if ((cpi->svc.number_temporal_layers > 1) ||"
    },
    {
        "line": 19,
        "fullcodeline": "assert(cm->bit_depth == VPX_BITS_8);"
    },
    {
        "line": 29,
        "fullcodeline": "rc->baseline_gf_interval = FIXED_GF_INTERVAL;"
    },
    {
        "line": 45,
        "fullcodeline": "for (i = 0; i < MAX_SEGMENTS; i++)"
    },
    {
        "line": 46,
        "fullcodeline": "cpi->segment_encode_breakout[i] = cpi->oxcf.encode_breakout;"
    },
    {
        "line": 62,
        "fullcodeline": "cm->render_width = cpi->oxcf.render_width;"
    },
    {
        "line": 63,
        "fullcodeline": "cm->render_height = cpi->oxcf.render_height;"
    },
    {
        "line": 69,
        "fullcodeline": "cm->width = cpi->oxcf.width;"
    },
    {
        "line": 70,
        "fullcodeline": "cm->height = cpi->oxcf.height;"
    },
    {
        "line": 71,
        "fullcodeline": "cpi->external_resize = 1;"
    },
    {
        "line": 75,
        "fullcodeline": "int new_mi_size = 0;"
    },
    {
        "line": 76,
        "fullcodeline": "vp9_set_mb_mi(cm, cm->width, cm->height);"
    },
    {
        "line": 77,
        "fullcodeline": "new_mi_size = cm->mi_stride * calc_mi_size(cm->mi_rows);"
    },
    {
        "line": 94,
        "fullcodeline": "last_h != cpi->oxcf.height)"
    },
    {
        "line": 95,
        "fullcodeline": "update_frame_size(cpi);"
    },
    {
        "line": 98,
        "fullcodeline": "memset(cpi->consec_zero_mv, 0,"
    },
    {
        "line": 102,
        "fullcodeline": "rc->rc_1_frame = 0;"
    },
    {
        "line": 103,
        "fullcodeline": "rc->rc_2_frame = 0;"
    },
    {
        "line": 107,
        "fullcodeline": "((cpi->svc.number_temporal_layers > 1 ||"
    },
    {
        "line": 110,
        "fullcodeline": "vp9_update_layer_context_change_config(cpi,"
    },
    {
        "line": 21,
        "fullcodeline": "assert(cm->bit_depth > VPX_BITS_8);"
    },
    {
        "line": 31,
        "fullcodeline": "rc->baseline_gf_interval = (MIN_GF_INTERVAL + MAX_GF_INTERVAL) / 2;"
    },
    {
        "line": 65,
        "fullcodeline": "cm->render_width = cpi->oxcf.width;"
    },
    {
        "line": 66,
        "fullcodeline": "cm->render_height = cpi->oxcf.height;"
    },
    {
        "line": 78,
        "fullcodeline": "if (cm->mi_alloc_size < new_mi_size) {"
    },
    {
        "line": 99,
        "fullcodeline": "cm->mi_rows * cm->mi_cols * sizeof(*cpi->consec_zero_mv));"
    },
    {
        "line": 100,
        "fullcodeline": "if (cpi->oxcf.aq_mode == CYCLIC_REFRESH_AQ)"
    },
    {
        "line": 109,
        "fullcodeline": "cpi->oxcf.pass != 1)) {"
    },
    {
        "line": 79,
        "fullcodeline": "vp9_free_context_buffers(cm);"
    },
    {
        "line": 80,
        "fullcodeline": "alloc_compressor_data(cpi);"
    },
    {
        "line": 81,
        "fullcodeline": "realloc_segmentation_maps(cpi);"
    },
    {
        "line": 82,
        "fullcodeline": "cpi->initial_width = cpi->initial_height = 0;"
    },
    {
        "line": 83,
        "fullcodeline": "cpi->external_resize = 0;"
    },
    {
        "line": 101,
        "fullcodeline": "vp9_cyclic_refresh_reset_resize(cpi);"
    },
    {
        "line": 108,
        "fullcodeline": "cpi->svc.number_spatial_layers > 1) &&"
    },
    {
        "line": 84,
        "fullcodeline": "} else if (cm->mi_alloc_size == new_mi_size &&"
    },
    {
        "line": 85,
        "fullcodeline": "(cpi->oxcf.width > last_w || cpi->oxcf.height > last_h)) {"
    },
    {
        "line": 86,
        "fullcodeline": "if (vp9_alloc_loop_filter(cm)) {"
    },
    {
        "line": 87,
        "fullcodeline": "vpx_internal_error(&cm->error, VPX_CODEC_MEM_ERROR,"
    }
]