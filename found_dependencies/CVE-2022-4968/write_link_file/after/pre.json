[
    {
        "line": 3,
        "fullcodeline": "GString* s = NULL;"
    },
    {
        "line": 26,
        "fullcodeline": "s = g_string_sized_new(200);"
    },
    {
        "line": 27,
        "fullcodeline": "append_match_section(def, s, FALSE);"
    },
    {
        "line": 29,
        "fullcodeline": "g_string_append(s, \"\\n[Link]\\n\");"
    },
    {
        "line": 33,
        "fullcodeline": "g_string_append_printf(s, \"WakeOnLan=%s\\n\", def->wake_on_lan ? \"magic\" : \"off\");"
    },
    {
        "line": 8,
        "fullcodeline": "if (def->type >= NETPLAN_DEF_TYPE_VIRTUAL || def->type == NETPLAN_DEF_TYPE_MODEM)"
    },
    {
        "line": 47,
        "fullcodeline": "if (def->receive_checksum_offload != NETPLAN_TRISTATE_UNSET)"
    },
    {
        "line": 51,
        "fullcodeline": "if (def->transmit_checksum_offload != NETPLAN_TRISTATE_UNSET)"
    },
    {
        "line": 55,
        "fullcodeline": "if (def->tcp_segmentation_offload != NETPLAN_TRISTATE_UNSET)"
    },
    {
        "line": 59,
        "fullcodeline": "if (def->tcp6_segmentation_offload != NETPLAN_TRISTATE_UNSET)"
    },
    {
        "line": 63,
        "fullcodeline": "if (def->generic_segmentation_offload != NETPLAN_TRISTATE_UNSET)"
    },
    {
        "line": 67,
        "fullcodeline": "if (def->generic_receive_offload != NETPLAN_TRISTATE_UNSET)"
    },
    {
        "line": 12,
        "fullcodeline": "if (!def->set_name &&"
    },
    {
        "line": 22,
        "fullcodeline": "(def->large_receive_offload == NETPLAN_TRISTATE_UNSET))"
    },
    {
        "line": 31,
        "fullcodeline": "g_string_append_printf(s, \"Name=%s\\n\", def->set_name);"
    },
    {
        "line": 35,
        "fullcodeline": "g_string_append_printf(s, \"MTUBytes=%u\\n\", def->mtubytes);"
    },
    {
        "line": 37,
        "fullcodeline": "if (_is_macaddress_special_nd_option(def->set_mac) && def->backend == NETPLAN_BACKEND_NETWORKD) {"
    },
    {
        "line": 48,
        "fullcodeline": "g_string_append_printf(s, \"ReceiveChecksumOffload=%s\\n\","
    },
    {
        "line": 52,
        "fullcodeline": "g_string_append_printf(s, \"TransmitChecksumOffload=%s\\n\","
    },
    {
        "line": 56,
        "fullcodeline": "g_string_append_printf(s, \"TCPSegmentationOffload=%s\\n\","
    },
    {
        "line": 60,
        "fullcodeline": "g_string_append_printf(s, \"TCP6SegmentationOffload=%s\\n\","
    },
    {
        "line": 64,
        "fullcodeline": "g_string_append_printf(s, \"GenericSegmentationOffload=%s\\n\","
    },
    {
        "line": 68,
        "fullcodeline": "g_string_append_printf(s, \"GenericReceiveOffload=%s\\n\","
    },
    {
        "line": 72,
        "fullcodeline": "g_string_append_printf(s, \"LargeReceiveOffload=%s\\n\","
    },
    {
        "line": 21,
        "fullcodeline": "(def->generic_receive_offload == NETPLAN_TRISTATE_UNSET) &&"
    },
    {
        "line": 20,
        "fullcodeline": "(def->generic_segmentation_offload == NETPLAN_TRISTATE_UNSET) &&"
    },
    {
        "line": 38,
        "fullcodeline": "if (!g_strcmp0(def->set_mac, \"permanent\")) {"
    },
    {
        "line": 40,
        "fullcodeline": "g_string_append_printf(s, \"MACAddressPolicy=persistent\\n\");"
    },
    {
        "line": 19,
        "fullcodeline": "(def->tcp6_segmentation_offload == NETPLAN_TRISTATE_UNSET) &&"
    },
    {
        "line": 42,
        "fullcodeline": "g_string_append_printf(s, \"MACAddressPolicy=%s\\n\", def->set_mac);"
    },
    {
        "line": 18,
        "fullcodeline": "(def->tcp_segmentation_offload == NETPLAN_TRISTATE_UNSET) &&"
    },
    {
        "line": 17,
        "fullcodeline": "(def->transmit_checksum_offload == NETPLAN_TRISTATE_UNSET) &&"
    },
    {
        "line": 16,
        "fullcodeline": "(def->receive_checksum_offload == NETPLAN_TRISTATE_UNSET) &&"
    },
    {
        "line": 15,
        "fullcodeline": "!(_is_macaddress_special_nd_option(def->set_mac) && def->backend == NETPLAN_BACKEND_NETWORKD) &&"
    },
    {
        "line": 14,
        "fullcodeline": "!def->mtubytes &&"
    },
    {
        "line": 13,
        "fullcodeline": "!def->wake_on_lan &&"
    }
]