[
    {
        "line": 3,
        "fullcodeline": "GString* s = NULL;"
    },
    {
        "line": 5,
        "fullcodeline": "g_assert(def->type >= NETPLAN_DEF_TYPE_VIRTUAL);"
    },
    {
        "line": 13,
        "fullcodeline": "s = g_string_sized_new(200);"
    },
    {
        "line": 14,
        "fullcodeline": "g_string_append_printf(s, \"[NetDev]\\nName=%s\\n\", def->id);"
    },
    {
        "line": 102,
        "fullcodeline": "_netplan_g_string_free_to_file_with_permissions(s, rootdir, path, \".netdev\", \"root\", NETWORKD_GROUP, 0640);"
    },
    {
        "line": 7,
        "fullcodeline": "if (def->type == NETPLAN_DEF_TYPE_VLAN && def->sriov_vlan_filter) {"
    },
    {
        "line": 16,
        "fullcodeline": "if (def->set_mac && _is_valid_macaddress(def->set_mac))"
    },
    {
        "line": 8,
        "fullcodeline": "g_debug(\"%s is defined as a hardware SR-IOV filtered VLAN, postponing creation\", def->id);"
    },
    {
        "line": 17,
        "fullcodeline": "g_string_append_printf(s, \"MACAddress=%s\\n\", def->set_mac);"
    },
    {
        "line": 19,
        "fullcodeline": "g_string_append_printf(s, \"MTUBytes=%u\\n\", def->mtubytes);"
    },
    {
        "line": 23,
        "fullcodeline": "g_string_append(s, \"Kind=bridge\\n\");"
    },
    {
        "line": 24,
        "fullcodeline": "write_bridge_params_networkd(s, def);"
    },
    {
        "line": 28,
        "fullcodeline": "g_string_append(s, \"Kind=bond\\n\");"
    },
    {
        "line": 29,
        "fullcodeline": "write_bond_parameters(def, s);"
    },
    {
        "line": 33,
        "fullcodeline": "g_string_append_printf(s, \"Kind=vlan\\n\\n[VLAN]\\nId=%u\\n\", def->vlan_id);"
    },
    {
        "line": 37,
        "fullcodeline": "g_string_append_printf(s, \"Kind=vrf\\n\\n[VRF]\\nTable=%u\\n\", def->vrf_table);"
    },
    {
        "line": 41,
        "fullcodeline": "g_string_append_printf(s, \"Kind=dummy\\n\");      /* wokeignore:rule=dummy */"
    },
    {
        "line": 51,
        "fullcodeline": "g_string_append_printf(s, \"Kind=veth\\n\");"
    },
    {
        "line": 91,
        "fullcodeline": "if (def->tunnel.mode == NETPLAN_TUNNEL_MODE_WIREGUARD)"
    },
    {
        "line": 53,
        "fullcodeline": "gchar* first = g_strcmp0(def->id, def->veth_peer_link->id) < 0 ? def->id : def->veth_peer_link->id;"
    },
    {
        "line": 58,
        "fullcodeline": "g_string_append_printf(s, \"\\n[Peer]\\nName=%s\\n\", def->veth_peer_link->id);"
    },
    {
        "line": 73,
        "fullcodeline": "g_string_append_printf(s, \"Kind=%s\\n\","
    },
    {
        "line": 78,
        "fullcodeline": "g_string_append_printf(s, \"Kind=vxlan\\n\\n[VXLAN]\\nVNI=%u\", def->vxlan->vni);"
    },
    {
        "line": 83,
        "fullcodeline": "g_string_append(s, \"Kind=ip6tnl\\n\");"
    },
    {
        "line": 92,
        "fullcodeline": "write_wireguard_params(s, def);"
    },
    {
        "line": 74,
        "fullcodeline": "netplan_tunnel_mode_name(def->tunnel.mode));"
    },
    {
        "line": 55,
        "fullcodeline": "g_string_free(s, TRUE);"
    },
    {
        "line": 93,
        "fullcodeline": "else if (def->tunnel.mode == NETPLAN_TUNNEL_MODE_VXLAN)"
    },
    {
        "line": 94,
        "fullcodeline": "write_vxlan_parameters(def, s);"
    },
    {
        "line": 96,
        "fullcodeline": "write_tunnel_params(s, def);"
    }
]