[
    {
        "line": 9,
        "fullcodeline": "g_autofree char* path_base = g_strjoin(NULL, \"run/systemd/network/10-netplan-\", def->id, NULL);"
    },
    {
        "line": 10,
        "fullcodeline": "SET_OPT_OUT_PTR(has_been_written, FALSE);"
    },
    {
        "line": 15,
        "fullcodeline": "write_link_file(def, rootdir, path_base);"
    },
    {
        "line": 16,
        "fullcodeline": "write_rules_file(def, rootdir);"
    },
    {
        "line": 70,
        "fullcodeline": "SET_OPT_OUT_PTR(has_been_written, TRUE);"
    },
    {
        "line": 20,
        "fullcodeline": "if (def->backend != NETPLAN_BACKEND_NETWORKD) {"
    },
    {
        "line": 25,
        "fullcodeline": "if (def->type == NETPLAN_DEF_TYPE_MODEM) {"
    },
    {
        "line": 30,
        "fullcodeline": "if (def->type == NETPLAN_DEF_TYPE_WIFI || def->has_auth) {"
    },
    {
        "line": 66,
        "fullcodeline": "if (def->type >= NETPLAN_DEF_TYPE_VIRTUAL)"
    },
    {
        "line": 18,
        "fullcodeline": "write_regdom(def, rootdir, NULL); /* overwrites global regdom */"
    },
    {
        "line": 21,
        "fullcodeline": "g_debug(\"networkd: definition %s is not for us (backend %i)\", def->id, def->backend);"
    },
    {
        "line": 31,
        "fullcodeline": "g_autofree char* link = g_strjoin(NULL, rootdir ?: \"\", \"/run/systemd/system/systemd-networkd.service.wants/netplan-wpa-\", def->id, \".service\", NULL);"
    },
    {
        "line": 32,
        "fullcodeline": "g_autofree char* slink = g_strjoin(NULL, \"/run/systemd/system/netplan-wpa-\", def->id, \".service\", NULL);"
    },
    {
        "line": 42,
        "fullcodeline": "g_debug(\"Creating wpa_supplicant unit %s\", slink);"
    },
    {
        "line": 43,
        "fullcodeline": "write_wpa_unit(def, rootdir);"
    },
    {
        "line": 45,
        "fullcodeline": "g_debug(\"Creating wpa_supplicant service enablement link %s\", link);"
    },
    {
        "line": 46,
        "fullcodeline": "_netplan_safe_mkdir_p_dir(link);"
    },
    {
        "line": 57,
        "fullcodeline": "if (def->set_mac &&"
    },
    {
        "line": 59,
        "fullcodeline": "!_is_macaddress_special_nd_option(def->set_mac)) {"
    },
    {
        "line": 67,
        "fullcodeline": "write_netdev_file(def, rootdir, path_base);"
    },
    {
        "line": 68,
        "fullcodeline": "if (!_netplan_netdef_write_network_file(np_state, def, rootdir, path_base, has_been_written, error))"
    },
    {
        "line": 33,
        "fullcodeline": "if (def->type == NETPLAN_DEF_TYPE_WIFI && def->has_match) {"
    },
    {
        "line": 58,
        "fullcodeline": "!_is_valid_macaddress(def->set_mac) &&"
    },
    {
        "line": 39,
        "fullcodeline": "if (!write_wpa_conf(def, rootdir, error))"
    },
    {
        "line": 48,
        "fullcodeline": "if (symlink(slink, link) < 0 && errno != EEXIST) {"
    },
    {
        "line": 50,
        "fullcodeline": "g_set_error(error, NETPLAN_FILE_ERROR, errno, \"failed to create enablement symlink: %m\\n\");"
    }
]