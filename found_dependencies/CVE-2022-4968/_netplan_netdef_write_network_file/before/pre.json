[
    {
        "line": 9,
        "fullcodeline": "g_autoptr(GString) network = NULL;"
    },
    {
        "line": 10,
        "fullcodeline": "g_autoptr(GString) link = NULL;"
    },
    {
        "line": 11,
        "fullcodeline": "GString* s = NULL;"
    },
    {
        "line": 14,
        "fullcodeline": "SET_OPT_OUT_PTR(has_been_written, FALSE);"
    },
    {
        "line": 22,
        "fullcodeline": "link = g_string_sized_new(200);"
    },
    {
        "line": 25,
        "fullcodeline": "network = g_string_sized_new(200);"
    },
    {
        "line": 285,
        "fullcodeline": "SET_OPT_OUT_PTR(has_been_written, TRUE);"
    },
    {
        "line": 16,
        "fullcodeline": "if (def->type == NETPLAN_DEF_TYPE_VLAN && def->sriov_vlan_filter) {"
    },
    {
        "line": 47,
        "fullcodeline": "if (def->set_mac && _is_valid_macaddress(def->set_mac))"
    },
    {
        "line": 53,
        "fullcodeline": "if (def->dhcp4 && def->dhcp6)"
    },
    {
        "line": 89,
        "fullcodeline": "if (def->accept_ra == NETPLAN_RA_MODE_ENABLED)"
    },
    {
        "line": 116,
        "fullcodeline": "if (def->type >= NETPLAN_DEF_TYPE_VIRTUAL || def->ignore_carrier)"
    },
    {
        "line": 122,
        "fullcodeline": "if (def->bridge && def->backend != NETPLAN_BACKEND_OVS) {"
    },
    {
        "line": 143,
        "fullcodeline": "if (def->bond && def->backend != NETPLAN_BACKEND_OVS) {"
    },
    {
        "line": 150,
        "fullcodeline": "if (def->has_vlans && def->backend != NETPLAN_BACKEND_OVS) {"
    },
    {
        "line": 179,
        "fullcodeline": "if (def->routes != NULL) {"
    },
    {
        "line": 185,
        "fullcodeline": "if (def->ip_rules != NULL) {"
    },
    {
        "line": 199,
        "fullcodeline": "if (def->dhcp4 || def->dhcp6) {"
    },
    {
        "line": 204,
        "fullcodeline": "if (def->dhcp4 || def->dhcp6) {"
    },
    {
        "line": 246,
        "fullcodeline": "if (def->ib_mode != NETPLAN_IB_MODE_KERNEL) {"
    },
    {
        "line": 17,
        "fullcodeline": "g_debug(\"%s is defined as a hardware SR-IOV filtered VLAN, postponing creation\", def->id);"
    },
    {
        "line": 34,
        "fullcodeline": "g_string_append_printf(link, \"ActivationPolicy=%s\\n\", mode);"
    },
    {
        "line": 46,
        "fullcodeline": "g_string_append_printf(link, \"MTUBytes=%u\\n\", def->mtubytes);"
    },
    {
        "line": 48,
        "fullcodeline": "g_string_append_printf(link, \"MACAddress=%s\\n\", def->set_mac);"
    },
    {
        "line": 51,
        "fullcodeline": "g_string_append(network, \"EmitLLDP=true\\n\");"
    },
    {
        "line": 54,
        "fullcodeline": "g_string_append(network, \"DHCP=yes\\n\");"
    },
    {
        "line": 63,
        "fullcodeline": "if (!def->bond && !def->bridge && (def->linklocal.ipv4 || def->linklocal.ipv6)) {"
    },
    {
        "line": 81,
        "fullcodeline": "g_string_append_printf(network, \"IPv6Token=static:%s\\n\", def->ip6_addr_gen_token);"
    },
    {
        "line": 90,
        "fullcodeline": "g_string_append_printf(network, \"IPv6AcceptRA=yes\\n\");"
    },
    {
        "line": 94,
        "fullcodeline": "g_string_append(network, \"IPv6PrivacyExtensions=yes\\n\");"
    },
    {
        "line": 96,
        "fullcodeline": "g_string_append_printf(network, \"Gateway=%s\\n\", def->gateway4);"
    },
    {
        "line": 98,
        "fullcodeline": "g_string_append_printf(network, \"Gateway=%s\\n\", def->gateway6);"
    },
    {
        "line": 109,
        "fullcodeline": "g_string_append(network, \"\\n\");"
    },
    {
        "line": 113,
        "fullcodeline": "g_string_append_printf(network, \"IPv6MTUBytes=%d\\n\", def->ipv6_mtubytes);"
    },
    {
        "line": 117,
        "fullcodeline": "g_string_append(network, \"ConfigureWithoutCarrier=yes\\n\");"
    },
    {
        "line": 120,
        "fullcodeline": "g_string_append_printf(network, \"KeepConfiguration=true\\n\");"
    },
    {
        "line": 123,
        "fullcodeline": "g_string_append_printf(network, \"Bridge=%s\\n\", def->bridge);"
    },
    {
        "line": 144,
        "fullcodeline": "g_string_append_printf(network, \"Bond=%s\\n\", def->bond);"
    },
    {
        "line": 152,
        "fullcodeline": "GList *l = np_state->netdefs_ordered;"
    },
    {
        "line": 163,
        "fullcodeline": "g_string_append_printf(network, \"VRF=%s\\n\", def->vrf_link->id);"
    },
    {
        "line": 168,
        "fullcodeline": "GList *l = np_state->netdefs_ordered;"
    },
    {
        "line": 201,
        "fullcodeline": "g_string_append(network, \"\\n[DHCP]\\n\");"
    },
    {
        "line": 247,
        "fullcodeline": "g_string_append_printf(network, \"\\n[IPoIB]\\nMode=%s\\n\", netplan_infiniband_mode_name(def->ib_mode));"
    },
    {
        "line": 252,
        "fullcodeline": "g_string_append(network, \"\\n[IPv6AcceptRA]\\n\");"
    },
    {
        "line": 269,
        "fullcodeline": "if (network->len > 0 || link->len > 0) {"
    },
    {
        "line": 270,
        "fullcodeline": "s = g_string_sized_new(200);"
    },
    {
        "line": 271,
        "fullcodeline": "append_match_section(def, s, TRUE);"
    },
    {
        "line": 280,
        "fullcodeline": "orig_umask = umask(022);"
    },
    {
        "line": 38,
        "fullcodeline": "for (unsigned i = 0; NETPLAN_OPTIONAL_ADDRESS_TYPES[i].name != NULL; ++i) {"
    },
    {
        "line": 71,
        "fullcodeline": "g_string_append(network, \"LinkLocalAddressing=no\\n\");"
    },
    {
        "line": 135,
        "fullcodeline": "if (def->bridge_hairpin != NETPLAN_TRISTATE_UNSET)"
    },
    {
        "line": 137,
        "fullcodeline": "if (def->bridge_learning != NETPLAN_TRISTATE_UNSET)"
    },
    {
        "line": 139,
        "fullcodeline": "if (def->bridge_neigh_suppress != NETPLAN_TRISTATE_UNSET)"
    },
    {
        "line": 154,
        "fullcodeline": "for (; l != NULL; l = l->next) {"
    },
    {
        "line": 170,
        "fullcodeline": "for (; l != NULL; l = l->next) {"
    },
    {
        "line": 180,
        "fullcodeline": "for (unsigned i = 0; i < def->routes->len; ++i) {"
    },
    {
        "line": 186,
        "fullcodeline": "for (unsigned i = 0; i < def->ip_rules->len; ++i) {"
    },
    {
        "line": 193,
        "fullcodeline": "for (unsigned i = 0; i < def->address_options->len; ++i) {"
    },
    {
        "line": 212,
        "fullcodeline": "if (combined_dhcp_overrides.metric == NETPLAN_METRIC_UNSPEC) {"
    },
    {
        "line": 257,
        "fullcodeline": "if (def->ra_overrides.use_domains == NETPLAN_USE_DOMAIN_MODE_FALSE) {"
    },
    {
        "line": 264,
        "fullcodeline": "if (def->ra_overrides.table != NETPLAN_ROUTE_TABLE_UNSPEC) {"
    },
    {
        "line": 30,
        "fullcodeline": "if (g_strcmp0(def->activation_mode, \"manual\") == 0)"
    },
    {
        "line": 31,
        "fullcodeline": "mode = \"manual\";"
    },
    {
        "line": 65,
        "fullcodeline": "g_string_append(network, \"LinkLocalAddressing=yes\\n\");"
    },
    {
        "line": 82,
        "fullcodeline": "} else if (def->ip6_addr_gen_mode > NETPLAN_ADDRGEN_EUI64) {"
    },
    {
        "line": 91,
        "fullcodeline": "else if (def->accept_ra == NETPLAN_RA_MODE_DISABLED)"
    },
    {
        "line": 125,
        "fullcodeline": "if (   def->bridge_params.path_cost"
    },
    {
        "line": 129,
        "fullcodeline": "|| def->bridge_neigh_suppress != NETPLAN_TRISTATE_UNSET)"
    },
    {
        "line": 130,
        "fullcodeline": "g_string_append_printf(network, \"\\n[Bridge]\\n\");"
    },
    {
        "line": 132,
        "fullcodeline": "g_string_append_printf(network, \"Cost=%u\\n\", def->bridge_params.path_cost);"
    },
    {
        "line": 134,
        "fullcodeline": "g_string_append_printf(network, \"Priority=%u\\n\", def->bridge_params.port_priority);"
    },
    {
        "line": 136,
        "fullcodeline": "g_string_append_printf(network, \"HairPin=%s\\n\", def->bridge_hairpin ? \"true\" : \"false\");"
    },
    {
        "line": 138,
        "fullcodeline": "g_string_append_printf(network, \"Learning=%s\\n\", def->bridge_learning ? \"true\" : \"false\");"
    },
    {
        "line": 140,
        "fullcodeline": "g_string_append_printf(network, \"NeighborSuppression=%s\\n\", def->bridge_neigh_suppress ? \"true\" : \"false\");"
    },
    {
        "line": 147,
        "fullcodeline": "g_string_append_printf(network, \"PrimarySlave=true\\n\"); /* wokeignore:rule=slave */"
    },
    {
        "line": 155,
        "fullcodeline": "nd = l->data;"
    },
    {
        "line": 171,
        "fullcodeline": "nd = l->data;"
    },
    {
        "line": 182,
        "fullcodeline": "write_route(cur_route, network);"
    },
    {
        "line": 188,
        "fullcodeline": "write_ip_rule(cur_rule, network);"
    },
    {
        "line": 195,
        "fullcodeline": "write_addr_option(opts, network);"
    },
    {
        "line": 206,
        "fullcodeline": "g_string_append_printf(network, \"ClientIdentifier=%s\\n\", def->dhcp_identifier);"
    },
    {
        "line": 209,
        "fullcodeline": "if (!combine_dhcp_overrides(def, &combined_dhcp_overrides, error))"
    },
    {
        "line": 213,
        "fullcodeline": "g_string_append_printf(network, \"RouteMetric=%i\\n\", (def->type == NETPLAN_DEF_TYPE_WIFI ? 600 : 100));"
    },
    {
        "line": 223,
        "fullcodeline": "g_string_append_printf(network, \"UseMTU=false\\n\");"
    },
    {
        "line": 230,
        "fullcodeline": "g_string_append_printf(network, \"UseRoutes=false\\n\");"
    },
    {
        "line": 232,
        "fullcodeline": "g_string_append_printf(network, \"UseDNS=false\\n\");"
    },
    {
        "line": 234,
        "fullcodeline": "g_string_append_printf(network, \"UseDomains=%s\\n\", combined_dhcp_overrides.use_domains);"
    },
    {
        "line": 236,
        "fullcodeline": "g_string_append_printf(network, \"UseNTP=false\\n\");"
    },
    {
        "line": 238,
        "fullcodeline": "g_string_append_printf(network, \"SendHostname=false\\n\");"
    },
    {
        "line": 240,
        "fullcodeline": "g_string_append_printf(network, \"UseHostname=false\\n\");"
    },
    {
        "line": 242,
        "fullcodeline": "g_string_append_printf(network, \"Hostname=%s\\n\", combined_dhcp_overrides.hostname);"
    },
    {
        "line": 255,
        "fullcodeline": "g_string_append_printf(network, \"UseDNS=%s\\n\", def->ra_overrides.use_dns ? \"true\" : \"false\");"
    },
    {
        "line": 258,
        "fullcodeline": "g_string_append_printf(network, \"UseDomains=%s\\n\", \"false\");"
    },
    {
        "line": 265,
        "fullcodeline": "g_string_append_printf(network, \"RouteTable=%d\\n\", def->ra_overrides.table);"
    },
    {
        "line": 274,
        "fullcodeline": "g_string_append_printf(s, \"\\n[Link]\\n%s\", link->str);"
    },
    {
        "line": 276,
        "fullcodeline": "g_string_append_printf(s, \"\\n[Network]\\n%s\", network->str);"
    },
    {
        "line": 33,
        "fullcodeline": "mode = \"always-down\";"
    },
    {
        "line": 39,
        "fullcodeline": "if (def->optional_addresses & NETPLAN_OPTIONAL_ADDRESS_TYPES[i].flag) {"
    },
    {
        "line": 56,
        "fullcodeline": "g_string_append(network, \"DHCP=ipv4\\n\");"
    },
    {
        "line": 86,
        "fullcodeline": "g_set_error(error, NETPLAN_BACKEND_ERROR, NETPLAN_ERROR_UNSUPPORTED, \"ERROR: %s: ipv6-address-generation mode is not supported by networkd\\n\", def->id);"
    },
    {
        "line": 92,
        "fullcodeline": "g_string_append_printf(network, \"IPv6AcceptRA=no\\n\");"
    },
    {
        "line": 128,
        "fullcodeline": "|| def->bridge_learning != NETPLAN_TRISTATE_UNSET"
    },
    {
        "line": 215,
        "fullcodeline": "g_string_append_printf(network, \"RouteMetric=%u\\n\","
    },
    {
        "line": 225,
        "fullcodeline": "g_string_append_printf(network, \"UseMTU=true\\n\");"
    },
    {
        "line": 40,
        "fullcodeline": "g_string_append_printf(link, \"OptionalAddresses=%s\\n\", NETPLAN_OPTIONAL_ADDRESS_TYPES[i].name);"
    },
    {
        "line": 127,
        "fullcodeline": "|| def->bridge_hairpin != NETPLAN_TRISTATE_UNSET"
    },
    {
        "line": 156,
        "fullcodeline": "if (nd->vlan_link == def && !nd->sriov_vlan_filter)"
    },
    {
        "line": 157,
        "fullcodeline": "g_string_append_printf(network, \"VLAN=%s\\n\", nd->id);"
    },
    {
        "line": 172,
        "fullcodeline": "if (nd->vxlan && nd->vxlan->link == def &&"
    },
    {
        "line": 174,
        "fullcodeline": "nd->tunnel.mode == NETPLAN_TUNNEL_MODE_VXLAN)"
    },
    {
        "line": 175,
        "fullcodeline": "g_string_append_printf(network, \"VXLAN=%s\\n\", nd->id);"
    },
    {
        "line": 259,
        "fullcodeline": "} else if (def->ra_overrides.use_domains == NETPLAN_USE_DOMAIN_MODE_TRUE) {"
    },
    {
        "line": 67,
        "fullcodeline": "g_string_append(network, \"LinkLocalAddressing=ipv4\\n\");"
    },
    {
        "line": 173,
        "fullcodeline": "nd->type == NETPLAN_DEF_TYPE_TUNNEL &&"
    },
    {
        "line": 260,
        "fullcodeline": "g_string_append_printf(network, \"UseDomains=%s\\n\", \"true\");"
    },
    {
        "line": 58,
        "fullcodeline": "g_string_append(network, \"DHCP=ipv6\\n\");"
    },
    {
        "line": 261,
        "fullcodeline": "} else if (def->ra_overrides.use_domains == NETPLAN_USE_DOMAIN_MODE_ROUTE) {"
    },
    {
        "line": 69,
        "fullcodeline": "g_string_append(network, \"LinkLocalAddressing=ipv6\\n\");"
    },
    {
        "line": 262,
        "fullcodeline": "g_string_append_printf(network, \"UseDomains=%s\\n\", \"route\");"
    }
]