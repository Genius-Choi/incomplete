[
    {
        "line": 5,
        "fullcodeline": "FirstFrameLocation = input.getFilePointer(); // will be updated accordingly below"
    },
    {
        "line": 7,
        "fullcodeline": "SetValueIsSet(false);"
    },
    {
        "line": 10,
        "fullcodeline": "if (ReadFully == SCOPE_ALL_DATA) {"
    },
    {
        "line": 261,
        "fullcodeline": "Timecode           = 0;"
    },
    {
        "line": 11,
        "fullcodeline": "Result = EbmlBinary::ReadData(input, ReadFully);"
    },
    {
        "line": 15,
        "fullcodeline": "binary *BufferStart = EbmlBinary::GetBuffer();"
    },
    {
        "line": 17,
        "fullcodeline": "SafeReadIOCallback Mem(*this);"
    },
    {
        "line": 18,
        "fullcodeline": "uint8 BlockHeadSize = 4;"
    },
    {
        "line": 21,
        "fullcodeline": "TrackNumber = Mem.GetUInt8();"
    },
    {
        "line": 38,
        "fullcodeline": "uint8 Flags = Mem.GetUInt8();"
    },
    {
        "line": 44,
        "fullcodeline": "mLacing = LacingType((Flags & 0x06) >> 1);"
    },
    {
        "line": 122,
        "fullcodeline": "binary *BufferEnd = BufferStart + GetSize();"
    },
    {
        "line": 123,
        "fullcodeline": "size_t NumFrames  = myBuffers.size();"
    },
    {
        "line": 12,
        "fullcodeline": "if (Result != GetSize())"
    },
    {
        "line": 35,
        "fullcodeline": "LocalTimecode = int16(Mem.GetUInt16BE());"
    },
    {
        "line": 43,
        "fullcodeline": "mInvisible = (Flags & 0x08) >> 3;"
    },
    {
        "line": 126,
        "fullcodeline": "for (size_t Index = 0; Index < NumFrames; ++Index) {"
    },
    {
        "line": 22,
        "fullcodeline": "if ((TrackNumber & 0x80) == 0) {"
    },
    {
        "line": 28,
        "fullcodeline": "TrackNumber = (TrackNumber & 0x3F) << 8;"
    },
    {
        "line": 30,
        "fullcodeline": "BlockHeadSize++;"
    },
    {
        "line": 39,
        "fullcodeline": "if (EbmlId(*this) == EBML_ID(KaxSimpleBlock)) {"
    },
    {
        "line": 49,
        "fullcodeline": "DataBuffer * soloFrame = new DataBuffer(BufferStart + Mem.GetPosition(), GetSize() - BlockHeadSize);"
    },
    {
        "line": 50,
        "fullcodeline": "myBuffers.push_back(soloFrame);"
    },
    {
        "line": 51,
        "fullcodeline": "SizeList.resize(1);"
    },
    {
        "line": 52,
        "fullcodeline": "SizeList[0] = GetSize() - BlockHeadSize;"
    },
    {
        "line": 127,
        "fullcodeline": "binary *FrameStart  = myBuffers[Index]->Buffer();"
    },
    {
        "line": 128,
        "fullcodeline": "binary *FrameEnd    = FrameStart + myBuffers[Index]->Size();"
    },
    {
        "line": 129,
        "fullcodeline": "binary *ExpectedEnd = (Index + 1) < NumFrames ? myBuffers[Index + 1]->Buffer() : BufferEnd;"
    },
    {
        "line": 136,
        "fullcodeline": "} else if (ReadFully == SCOPE_PARTIAL_DATA) {"
    },
    {
        "line": 13,
        "fullcodeline": "throw SafeReadIOCallback::EndOfStreamX(GetSize() - Result);"
    },
    {
        "line": 29,
        "fullcodeline": "TrackNumber += Mem.GetUInt8();"
    },
    {
        "line": 40,
        "fullcodeline": "bIsKeyframe = (Flags & 0x80) != 0;"
    },
    {
        "line": 41,
        "fullcodeline": "bIsDiscardable = (Flags & 0x01) != 0;"
    },
    {
        "line": 48,
        "fullcodeline": "FirstFrameLocation += Mem.GetPosition();"
    },
    {
        "line": 55,
        "fullcodeline": "uint32 LastBufferSize = GetSize() - BlockHeadSize - 1; // 1 for number of frame"
    },
    {
        "line": 56,
        "fullcodeline": "uint8 FrameNum = Mem.GetUInt8(); // number of frames in the lace - 1"
    },
    {
        "line": 63,
        "fullcodeline": "SizeList.resize(FrameNum + 1);"
    },
    {
        "line": 137,
        "fullcodeline": "binary _TempHead[5];"
    },
    {
        "line": 138,
        "fullcodeline": "Result = input.read(_TempHead, 5);"
    },
    {
        "line": 141,
        "fullcodeline": "binary *cursor = _TempHead;"
    },
    {
        "line": 143,
        "fullcodeline": "uint8 BlockHeadSize = 4;"
    },
    {
        "line": 146,
        "fullcodeline": "TrackNumber = *cursor++;"
    },
    {
        "line": 161,
        "fullcodeline": "b16.Eval(cursor);"
    },
    {
        "line": 164,
        "fullcodeline": "cursor += 2;"
    },
    {
        "line": 171,
        "fullcodeline": "mLacing = LacingType((*cursor++ & 0x06) >> 1);"
    },
    {
        "line": 178,
        "fullcodeline": "FirstFrameLocation += cursor - _TempHead;"
    },
    {
        "line": 249,
        "fullcodeline": "Result = GetSize();"
    },
    {
        "line": 24,
        "fullcodeline": "if ((TrackNumber & 0x40) == 0) {"
    },
    {
        "line": 113,
        "fullcodeline": "FirstFrameLocation += Mem.GetPosition();"
    },
    {
        "line": 115,
        "fullcodeline": "for (Index=0; Index<=FrameNum; Index++) {"
    },
    {
        "line": 131,
        "fullcodeline": "if ((FrameStart < BufferStart) || (FrameEnd > BufferEnd) || (FrameEnd != ExpectedEnd))"
    },
    {
        "line": 139,
        "fullcodeline": "if (Result != 5)"
    },
    {
        "line": 162,
        "fullcodeline": "LocalTimecode = int16(b16);"
    },
    {
        "line": 170,
        "fullcodeline": "mInvisible = (*cursor & 0x08) >> 3;"
    },
    {
        "line": 172,
        "fullcodeline": "if (cursor == &_TempHead[4]) {"
    },
    {
        "line": 252,
        "fullcodeline": "Result = GetSize();"
    },
    {
        "line": 79,
        "fullcodeline": "SizeList[Index] = LastBufferSize;"
    },
    {
        "line": 82,
        "fullcodeline": "SizeRead = LastBufferSize;"
    },
    {
        "line": 83,
        "fullcodeline": "FrameSize = ReadCodedSizeValue(BufferStart + Mem.GetPosition(), SizeRead, SizeUnknown);"
    },
    {
        "line": 86,
        "fullcodeline": "SizeList[0] = FrameSize;"
    },
    {
        "line": 87,
        "fullcodeline": "Mem.Skip(SizeRead);"
    },
    {
        "line": 88,
        "fullcodeline": "LastBufferSize -= FrameSize + SizeRead;"
    },
    {
        "line": 116,
        "fullcodeline": "DataBuffer * lacedFrame = new DataBuffer(BufferStart + Mem.GetPosition(), SizeList[Index]);"
    },
    {
        "line": 117,
        "fullcodeline": "myBuffers.push_back(lacedFrame);"
    },
    {
        "line": 118,
        "fullcodeline": "Mem.Skip(SizeList[Index]);"
    },
    {
        "line": 147,
        "fullcodeline": "if ((TrackNumber & 0x80) == 0) {"
    },
    {
        "line": 153,
        "fullcodeline": "TrackNumber = (TrackNumber & 0x3F) << 8;"
    },
    {
        "line": 155,
        "fullcodeline": "BlockHeadSize++;"
    },
    {
        "line": 166,
        "fullcodeline": "if (EbmlId(*this) == EBML_ID(KaxSimpleBlock)) {"
    },
    {
        "line": 173,
        "fullcodeline": "_TempHead[0] = _TempHead[4];"
    },
    {
        "line": 183,
        "fullcodeline": "uint32 LastBufferSize = GetSize() - BlockHeadSize - 1; // 1 for number of frame"
    },
    {
        "line": 184,
        "fullcodeline": "uint8 FrameNum = _TempHead[0]; // number of frames in the lace - 1"
    },
    {
        "line": 191,
        "fullcodeline": "SizeList.resize(FrameNum + 1);"
    },
    {
        "line": 67,
        "fullcodeline": "for (Index=0; Index<FrameNum; Index++) {"
    },
    {
        "line": 84,
        "fullcodeline": "if (!FrameSize || (static_cast<uint32>(FrameSize + SizeRead) > LastBufferSize))"
    },
    {
        "line": 90,
        "fullcodeline": "for (Index=1; Index<FrameNum; Index++) {"
    },
    {
        "line": 100,
        "fullcodeline": "if (Index <= FrameNum) // Safety check if FrameNum == 0"
    },
    {
        "line": 104,
        "fullcodeline": "for (Index=0; Index<=FrameNum; Index++) {"
    },
    {
        "line": 167,
        "fullcodeline": "bIsKeyframe = (*cursor & 0x80) != 0;"
    },
    {
        "line": 168,
        "fullcodeline": "bIsDiscardable = (*cursor & 0x01) != 0;"
    },
    {
        "line": 175,
        "fullcodeline": "Result += input.read(_TempHead, 1);"
    },
    {
        "line": 245,
        "fullcodeline": "SizeList.resize(1);"
    },
    {
        "line": 246,
        "fullcodeline": "SizeList[0] = GetSize() - BlockHeadSize;"
    },
    {
        "line": 69,
        "fullcodeline": "FrameSize = 0;"
    },
    {
        "line": 77,
        "fullcodeline": "LastBufferSize -= FrameSize;"
    },
    {
        "line": 92,
        "fullcodeline": "SizeRead = LastBufferSize;"
    },
    {
        "line": 93,
        "fullcodeline": "FrameSize += ReadCodedSizeSignedValue(BufferStart + Mem.GetPosition(), SizeRead, SizeUnknown);"
    },
    {
        "line": 96,
        "fullcodeline": "SizeList[Index] = FrameSize;"
    },
    {
        "line": 97,
        "fullcodeline": "Mem.Skip(SizeRead);"
    },
    {
        "line": 98,
        "fullcodeline": "LastBufferSize -= FrameSize + SizeRead;"
    },
    {
        "line": 101,
        "fullcodeline": "SizeList[Index] = LastBufferSize;"
    },
    {
        "line": 106,
        "fullcodeline": "SizeList[Index] = LastBufferSize / (FrameNum + 1);"
    },
    {
        "line": 149,
        "fullcodeline": "if ((TrackNumber & 0x40) == 0) {"
    },
    {
        "line": 154,
        "fullcodeline": "TrackNumber += *cursor++;"
    },
    {
        "line": 210,
        "fullcodeline": "SizeList[Index] = LastBufferSize;"
    },
    {
        "line": 213,
        "fullcodeline": "SizeRead = LastBufferSize;"
    },
    {
        "line": 214,
        "fullcodeline": "cursor = _tmpBuf = new binary[FrameNum*4]; /// \\warning assume the mean size will be coded in less than 4 bytes"
    },
    {
        "line": 216,
        "fullcodeline": "FrameSize = ReadCodedSizeValue(cursor, SizeRead, SizeUnknown);"
    },
    {
        "line": 217,
        "fullcodeline": "SizeList[0] = FrameSize;"
    },
    {
        "line": 218,
        "fullcodeline": "cursor += SizeRead;"
    },
    {
        "line": 219,
        "fullcodeline": "LastBufferSize -= FrameSize + SizeRead;"
    },
    {
        "line": 232,
        "fullcodeline": "SizeList[Index] = LastBufferSize;"
    },
    {
        "line": 195,
        "fullcodeline": "for (Index=0; Index<FrameNum; Index++) {"
    },
    {
        "line": 215,
        "fullcodeline": "Result += input.read(cursor, FrameNum*4);"
    },
    {
        "line": 221,
        "fullcodeline": "for (Index=1; Index<FrameNum; Index++) {"
    },
    {
        "line": 230,
        "fullcodeline": "FirstFrameLocation += cursor - _tmpBuf;"
    },
    {
        "line": 236,
        "fullcodeline": "for (Index=0; Index<=FrameNum; Index++) {"
    },
    {
        "line": 72,
        "fullcodeline": "Value = Mem.GetUInt8();"
    },
    {
        "line": 73,
        "fullcodeline": "FrameSize += Value;"
    },
    {
        "line": 74,
        "fullcodeline": "LastBufferSize--;"
    },
    {
        "line": 94,
        "fullcodeline": "if (!FrameSize || (static_cast<uint32>(FrameSize + SizeRead) > LastBufferSize))"
    },
    {
        "line": 197,
        "fullcodeline": "FrameSize = 0;"
    },
    {
        "line": 206,
        "fullcodeline": "FirstFrameLocation++;"
    },
    {
        "line": 208,
        "fullcodeline": "LastBufferSize -= FrameSize;"
    },
    {
        "line": 223,
        "fullcodeline": "SizeRead = LastBufferSize;"
    },
    {
        "line": 224,
        "fullcodeline": "FrameSize += ReadCodedSizeSignedValue(cursor, SizeRead, SizeUnknown);"
    },
    {
        "line": 226,
        "fullcodeline": "cursor += SizeRead;"
    },
    {
        "line": 227,
        "fullcodeline": "LastBufferSize -= FrameSize + SizeRead;"
    },
    {
        "line": 238,
        "fullcodeline": "SizeList[Index] = LastBufferSize / (FrameNum + 1);"
    },
    {
        "line": 204,
        "fullcodeline": "} while (_TempHead[0] == 0xFF);"
    },
    {
        "line": 200,
        "fullcodeline": "FrameSize += uint8(_TempHead[0]);"
    },
    {
        "line": 201,
        "fullcodeline": "LastBufferSize--;"
    },
    {
        "line": 203,
        "fullcodeline": "FirstFrameLocation++;"
    },
    {
        "line": 199,
        "fullcodeline": "Result += input.read(_TempHead, 1);"
    }
]