[
    {
        "line": 2,
        "fullcodeline": "assert(key);"
    },
    {
        "line": 3,
        "fullcodeline": "assert(salt);"
    },
    {
        "line": 5,
        "fullcodeline": "char random_salt[12];"
    },
    {
        "line": 13,
        "fullcodeline": "if ((strlen(salt) > sizeof(\"$2X$00$\")) &&"
    },
    {
        "line": 42,
        "fullcodeline": "return ((salt[0] == '*') && (salt[1] == '0'))"
    },
    {
        "line": 7,
        "fullcodeline": "memcpy(random_salt,\"$1$\",3);"
    },
    {
        "line": 8,
        "fullcodeline": "ito64(random_salt+3,rand(),8);"
    },
    {
        "line": 9,
        "fullcodeline": "random_salt[11] = '\\0';"
    },
    {
        "line": 20,
        "fullcodeline": "(salt[6] == '$')) {"
    },
    {
        "line": 22,
        "fullcodeline": "char output[61];"
    },
    {
        "line": 43,
        "fullcodeline": "? strdup(\"*1\") : strdup(\"*0\");"
    },
    {
        "line": 10,
        "fullcodeline": "return string_crypt(key, random_salt);"
    },
    {
        "line": 19,
        "fullcodeline": "(salt[5] >= '0') && (salt[5] <= '9') &&"
    },
    {
        "line": 23,
        "fullcodeline": "if (php_crypt_blowfish_rn(key, salt, output, sizeof(output))) {"
    },
    {
        "line": 33,
        "fullcodeline": "Lock lock(mutex);"
    },
    {
        "line": 34,
        "fullcodeline": "char *crypt_res = crypt(key,salt);"
    },
    {
        "line": 18,
        "fullcodeline": "(salt[4] >= '0') && (salt[4] <= '3') &&"
    },
    {
        "line": 24,
        "fullcodeline": "return strdup(output);"
    },
    {
        "line": 37,
        "fullcodeline": "return strdup(crypt_res);"
    },
    {
        "line": 17,
        "fullcodeline": "(salt[3] == '$') &&"
    },
    {
        "line": 16,
        "fullcodeline": "(salt[2] >= 'a') && (salt[2] <= 'z') &&"
    },
    {
        "line": 15,
        "fullcodeline": "(salt[1] == '2') &&"
    },
    {
        "line": 14,
        "fullcodeline": "(salt[0] == '$') &&"
    }
]