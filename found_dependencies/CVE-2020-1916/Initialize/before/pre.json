[
    {
        "line": 4,
        "fullcodeline": "s_trackProcessTimes = trackProcessTimes;"
    },
    {
        "line": 15,
        "fullcodeline": "g_procs.reset(new LightProcess[count]);"
    },
    {
        "line": 18,
        "fullcodeline": "auto afdt_filename = folly::sformat(\"{}.{}\", prefix, getpid());"
    },
    {
        "line": 23,
        "fullcodeline": "afdt_error_t err = AFDT_ERROR_T_INIT;"
    },
    {
        "line": 24,
        "fullcodeline": "auto afdt_lid = afdt_listen(afdt_filename.c_str(), &err);"
    },
    {
        "line": 6,
        "fullcodeline": "if (prefix.empty() || count <= 0) {"
    },
    {
        "line": 21,
        "fullcodeline": "remove(afdt_filename.c_str());"
    },
    {
        "line": 25,
        "fullcodeline": "if (afdt_lid < 0) {"
    },
    {
        "line": 37,
        "fullcodeline": "for (int i = 0; i < count; i++) {"
    },
    {
        "line": 49,
        "fullcodeline": "struct sigaction sa = {};"
    },
    {
        "line": 50,
        "fullcodeline": "sa.sa_sigaction = &LightProcess::SigChldHandler;"
    },
    {
        "line": 51,
        "fullcodeline": "sa.sa_flags = SA_SIGINFO | SA_NOCLDSTOP;"
    },
    {
        "line": 27,
        "fullcodeline": "afdt_filename.c_str(),"
    },
    {
        "line": 28,
        "fullcodeline": "errno, folly::errnoStr(errno).c_str());"
    },
    {
        "line": 38,
        "fullcodeline": "if (!g_procs[i].initShadow(afdt_lid, afdt_filename, i, inherited_fds)) {"
    },
    {
        "line": 52,
        "fullcodeline": "if (sigaction(SIGCHLD, &sa, nullptr) != 0) {"
    },
    {
        "line": 39,
        "fullcodeline": "for (int j = 0; j < i; j++) {"
    },
    {
        "line": 40,
        "fullcodeline": "g_procs[j].closeShadow();"
    }
]