[
    {
        "line": 5,
        "fullcodeline": "message[MagickPathExtent];"
    },
    {
        "line": 28,
        "fullcodeline": "assert(image_info != (const ImageInfo *) NULL);"
    },
    {
        "line": 29,
        "fullcodeline": "assert(image_info->signature == MagickCoreSignature);"
    },
    {
        "line": 33,
        "fullcodeline": "assert(image != (Image **) NULL);"
    },
    {
        "line": 34,
        "fullcodeline": "msl_image=AcquireImage(image_info,exception);"
    },
    {
        "line": 35,
        "fullcodeline": "status=OpenBlob(image_info,msl_image,ReadBinaryBlobMode,exception);"
    },
    {
        "line": 43,
        "fullcodeline": "msl_image->columns=1;"
    },
    {
        "line": 44,
        "fullcodeline": "msl_image->rows=1;"
    },
    {
        "line": 48,
        "fullcodeline": "(void) ResetMagickMemory(&msl_info,0,sizeof(msl_info));"
    },
    {
        "line": 49,
        "fullcodeline": "msl_info.exception=exception;"
    },
    {
        "line": 65,
        "fullcodeline": "*msl_info.image_info=CloneImageInfo(image_info);"
    },
    {
        "line": 66,
        "fullcodeline": "*msl_info.draw_info=CloneDrawInfo(image_info,(DrawInfo *) NULL);"
    },
    {
        "line": 67,
        "fullcodeline": "*msl_info.attributes=AcquireImage(image_info,exception);"
    },
    {
        "line": 68,
        "fullcodeline": "msl_info.group_info[0].numImages=0;"
    },
    {
        "line": 70,
        "fullcodeline": "*msl_info.image=msl_image;"
    },
    {
        "line": 73,
        "fullcodeline": "(void) xmlSubstituteEntitiesDefault(1);"
    },
    {
        "line": 74,
        "fullcodeline": "(void) ResetMagickMemory(&sax_modules,0,sizeof(sax_modules));"
    },
    {
        "line": 75,
        "fullcodeline": "sax_modules.internalSubset=MSLInternalSubset;"
    },
    {
        "line": 76,
        "fullcodeline": "sax_modules.isStandalone=MSLIsStandalone;"
    },
    {
        "line": 77,
        "fullcodeline": "sax_modules.hasInternalSubset=MSLHasInternalSubset;"
    },
    {
        "line": 78,
        "fullcodeline": "sax_modules.hasExternalSubset=MSLHasExternalSubset;"
    },
    {
        "line": 79,
        "fullcodeline": "sax_modules.resolveEntity=MSLResolveEntity;"
    },
    {
        "line": 80,
        "fullcodeline": "sax_modules.getEntity=MSLGetEntity;"
    },
    {
        "line": 81,
        "fullcodeline": "sax_modules.entityDecl=MSLEntityDeclaration;"
    },
    {
        "line": 82,
        "fullcodeline": "sax_modules.notationDecl=MSLNotationDeclaration;"
    },
    {
        "line": 83,
        "fullcodeline": "sax_modules.attributeDecl=MSLAttributeDeclaration;"
    },
    {
        "line": 84,
        "fullcodeline": "sax_modules.elementDecl=MSLElementDeclaration;"
    },
    {
        "line": 85,
        "fullcodeline": "sax_modules.unparsedEntityDecl=MSLUnparsedEntityDeclaration;"
    },
    {
        "line": 86,
        "fullcodeline": "sax_modules.setDocumentLocator=MSLSetDocumentLocator;"
    },
    {
        "line": 87,
        "fullcodeline": "sax_modules.startDocument=MSLStartDocument;"
    },
    {
        "line": 88,
        "fullcodeline": "sax_modules.endDocument=MSLEndDocument;"
    },
    {
        "line": 89,
        "fullcodeline": "sax_modules.startElement=MSLStartElement;"
    },
    {
        "line": 90,
        "fullcodeline": "sax_modules.endElement=MSLEndElement;"
    },
    {
        "line": 91,
        "fullcodeline": "sax_modules.reference=MSLReference;"
    },
    {
        "line": 92,
        "fullcodeline": "sax_modules.characters=MSLCharacters;"
    },
    {
        "line": 93,
        "fullcodeline": "sax_modules.ignorableWhitespace=MSLIgnorableWhitespace;"
    },
    {
        "line": 94,
        "fullcodeline": "sax_modules.processingInstruction=MSLProcessingInstructions;"
    },
    {
        "line": 95,
        "fullcodeline": "sax_modules.comment=MSLComment;"
    },
    {
        "line": 96,
        "fullcodeline": "sax_modules.warning=MSLWarning;"
    },
    {
        "line": 97,
        "fullcodeline": "sax_modules.error=MSLError;"
    },
    {
        "line": 98,
        "fullcodeline": "sax_modules.fatalError=MSLError;"
    },
    {
        "line": 99,
        "fullcodeline": "sax_modules.getParameterEntity=MSLGetParameterEntity;"
    },
    {
        "line": 100,
        "fullcodeline": "sax_modules.cdataBlock=MSLCDataBlock;"
    },
    {
        "line": 101,
        "fullcodeline": "sax_modules.externalSubset=MSLExternalSubset;"
    },
    {
        "line": 102,
        "fullcodeline": "sax_handler=(&sax_modules);"
    },
    {
        "line": 103,
        "fullcodeline": "msl_info.parser=xmlCreatePushParserCtxt(sax_handler,&msl_info,(char *) NULL,0,"
    },
    {
        "line": 119,
        "fullcodeline": "xmlFreeParserCtxt(msl_info.parser);"
    },
    {
        "line": 120,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),\"end SAX\");"
    },
    {
        "line": 121,
        "fullcodeline": "msl_info.group_info=(MSLGroupInfo *) RelinquishMagickMemory("
    },
    {
        "line": 30,
        "fullcodeline": "if (image_info->debug != MagickFalse)"
    },
    {
        "line": 36,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 60,
        "fullcodeline": "if ((msl_info.image_info == (ImageInfo **) NULL) ||"
    },
    {
        "line": 71,
        "fullcodeline": "if (*image != (Image *) NULL)"
    },
    {
        "line": 105,
        "fullcodeline": "while (ReadBlobString(msl_image,message) != (char *) NULL)"
    },
    {
        "line": 117,
        "fullcodeline": "if (msl_info.exception->severity == UndefinedException)"
    },
    {
        "line": 123,
        "fullcodeline": "if (*image == (Image *) NULL)"
    },
    {
        "line": 125,
        "fullcodeline": "if (msl_info.exception->severity != UndefinedException)"
    },
    {
        "line": 31,
        "fullcodeline": "(void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\","
    },
    {
        "line": 38,
        "fullcodeline": "ThrowFileException(exception,FileOpenError,\"UnableToOpenFile\","
    },
    {
        "line": 40,
        "fullcodeline": "msl_image=DestroyImageList(msl_image);"
    },
    {
        "line": 63,
        "fullcodeline": "(msl_info.group_info == (MSLGroupInfo *) NULL))"
    },
    {
        "line": 64,
        "fullcodeline": "ThrowFatalException(ResourceLimitFatalError,\"UnableToInterpretMSLImage\");"
    },
    {
        "line": 72,
        "fullcodeline": "MSLPushImage(&msl_info,*image);"
    },
    {
        "line": 107,
        "fullcodeline": "n=(ssize_t) strlen(message);"
    },
    {
        "line": 110,
        "fullcodeline": "status=xmlParseChunk(msl_info.parser,message,(int) n,MagickFalse);"
    },
    {
        "line": 113,
        "fullcodeline": "(void) xmlParseChunk(msl_info.parser,\" \",1,MagickFalse);"
    },
    {
        "line": 118,
        "fullcodeline": "(void) xmlParseChunk(msl_info.parser,\" \",1,MagickTrue);"
    },
    {
        "line": 124,
        "fullcodeline": "*image=(*msl_info.image);"
    },
    {
        "line": 62,
        "fullcodeline": "(msl_info.attributes == (Image **) NULL) ||"
    },
    {
        "line": 108,
        "fullcodeline": "if (n == 0)"
    },
    {
        "line": 111,
        "fullcodeline": "if (status != 0)"
    },
    {
        "line": 114,
        "fullcodeline": "if (msl_info.exception->severity >= ErrorException)"
    },
    {
        "line": 61,
        "fullcodeline": "(msl_info.image == (Image **) NULL) ||"
    }
]