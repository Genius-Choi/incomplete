[
    {
        "line": 2,
        "fullcodeline": "from pipenv.patched.notpip._vendor import requests as pip_requests"
    },
    {
        "line": 3,
        "fullcodeline": "from pipenv.patched.notpip._internal.req.constructors import install_req_from_parsed_requirement"
    },
    {
        "line": 4,
        "fullcodeline": "from pipenv.vendor.pip_shims.shims import parse_requirements"
    },
    {
        "line": 16,
        "fullcodeline": "indexes = []"
    },
    {
        "line": 17,
        "fullcodeline": "trusted_hosts = []"
    },
    {
        "line": 27,
        "fullcodeline": "indexes = sorted(set(indexes))"
    },
    {
        "line": 28,
        "fullcodeline": "trusted_hosts = sorted(set(trusted_hosts))"
    },
    {
        "line": 29,
        "fullcodeline": "reqs = [install_req_from_parsed_requirement(f) for f in parse_requirements(r, session=pip_requests)]"
    },
    {
        "line": 49,
        "fullcodeline": "project.recase_pipfile()"
    },
    {
        "line": 12,
        "fullcodeline": "if r is None:"
    },
    {
        "line": 14,
        "fullcodeline": "with open(r) as f:"
    },
    {
        "line": 19,
        "fullcodeline": "for line in contents.split(\"\\n\"):"
    },
    {
        "line": 30,
        "fullcodeline": "for package in reqs:"
    },
    {
        "line": 41,
        "fullcodeline": "for index in indexes:"
    },
    {
        "line": 10,
        "fullcodeline": "assert os.path.isfile(r)"
    },
    {
        "line": 13,
        "fullcodeline": "r = project.requirements_location"
    },
    {
        "line": 15,
        "fullcodeline": "contents = f.read()"
    },
    {
        "line": 43,
        "fullcodeline": "host_and_port = get_host_and_port(index)"
    },
    {
        "line": 44,
        "fullcodeline": "require_valid_https = not any((v in trusted_hosts for v in ("
    },
    {
        "line": 48,
        "fullcodeline": "project.add_index_to_pipfile(index, verify_ssl=require_valid_https)"
    },
    {
        "line": 20,
        "fullcodeline": "index, extra_index, trusted_host, _ = parse_indexes(line.strip(), strict=True)"
    },
    {
        "line": 31,
        "fullcodeline": "if package.name not in BAD_PACKAGES:"
    },
    {
        "line": 22,
        "fullcodeline": "indexes = [index]"
    },
    {
        "line": 24,
        "fullcodeline": "indexes.append(extra_index)"
    },
    {
        "line": 26,
        "fullcodeline": "trusted_hosts.append(get_host_and_port(trusted_host))"
    },
    {
        "line": 32,
        "fullcodeline": "if package.link is not None:"
    },
    {
        "line": 33,
        "fullcodeline": "package_string = ("
    },
    {
        "line": 38,
        "fullcodeline": "project.add_package_to_pipfile(package_string, dev=dev)"
    },
    {
        "line": 40,
        "fullcodeline": "project.add_package_to_pipfile(str(package.req), dev=dev)"
    },
    {
        "line": 34,
        "fullcodeline": "f\"-e {package.link}\""
    },
    {
        "line": 36,
        "fullcodeline": "else str(package.link)"
    },
    {
        "line": 46,
        "fullcodeline": "host_and_port.partition(':')[0],  # also check if hostname without port is in trusted_hosts"
    }
]