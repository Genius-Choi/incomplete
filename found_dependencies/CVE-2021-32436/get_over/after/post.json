[
    {
        "line": 5,
        "fullcodeline": "static char tx_wrong_dur[] = \"Wrong duration in voice overlay\";"
    },
    {
        "line": 6,
        "fullcodeline": "static char txt_no_note[] = \"No note in voice overlay\";"
    },
    {
        "line": 9,
        "fullcodeline": "p_voice = curvoice;"
    },
    {
        "line": 51,
        "fullcodeline": "p_voice->last_sym->sflags |= S_BEAM_END;"
    },
    {
        "line": 107,
        "fullcodeline": "voice = p_voice - voice_tb;"
    },
    {
        "line": 136,
        "fullcodeline": "p_voice2->time = over_time;"
    },
    {
        "line": 137,
        "fullcodeline": "curvoice = p_voice2;"
    },
    {
        "line": 12,
        "fullcodeline": "if (s->abc_type == ABC_T_BAR"
    },
    {
        "line": 39,
        "fullcodeline": "if (s->u.v_over.type == V_OVER_S) {"
    },
    {
        "line": 47,
        "fullcodeline": "if (!p_voice->last_sym) {"
    },
    {
        "line": 54,
        "fullcodeline": "if (parsys->voice[voice2].range < 0) {"
    },
    {
        "line": 117,
        "fullcodeline": "if (over_time < 0) {\t\t\t/* first '&' in a measure */"
    },
    {
        "line": 13,
        "fullcodeline": "|| s->u.v_over.type == V_OVER_E)  {"
    },
    {
        "line": 18,
        "fullcodeline": "p_voice->last_sym->sflags |= S_BEAM_END;"
    },
    {
        "line": 19,
        "fullcodeline": "over_bar = 0;"
    },
    {
        "line": 32,
        "fullcodeline": "over_mxtime = 0;"
    },
    {
        "line": 33,
        "fullcodeline": "over_voice = -1;"
    },
    {
        "line": 34,
        "fullcodeline": "over_time = -1;"
    },
    {
        "line": 40,
        "fullcodeline": "over_voice = p_voice - voice_tb;"
    },
    {
        "line": 41,
        "fullcodeline": "over_time = p_voice->time;"
    },
    {
        "line": 48,
        "fullcodeline": "error(1, s, txt_no_note);"
    },
    {
        "line": 61,
        "fullcodeline": "clone = p_voice->clone >= 0;"
    },
    {
        "line": 62,
        "fullcodeline": "p_voice2->id[0] = '&';"
    },
    {
        "line": 63,
        "fullcodeline": "p_voice2->id[1] = '\\0';"
    },
    {
        "line": 64,
        "fullcodeline": "p_voice2->second = 1;"
    },
    {
        "line": 65,
        "fullcodeline": "parsys->voice[voice2].second = 1;"
    },
    {
        "line": 66,
        "fullcodeline": "p_voice2->scale = p_voice->scale;"
    },
    {
        "line": 67,
        "fullcodeline": "p_voice2->octave = p_voice->octave;"
    },
    {
        "line": 68,
        "fullcodeline": "p_voice2->transpose = p_voice->transpose;"
    },
    {
        "line": 69,
        "fullcodeline": "memcpy(&p_voice2->key, &p_voice->key,"
    },
    {
        "line": 71,
        "fullcodeline": "memcpy(&p_voice2->ckey, &p_voice->ckey,"
    },
    {
        "line": 73,
        "fullcodeline": "memcpy(&p_voice2->okey, &p_voice->okey,"
    },
    {
        "line": 75,
        "fullcodeline": "p_voice2->posit = p_voice->posit;"
    },
    {
        "line": 76,
        "fullcodeline": "p_voice2->staff = p_voice->staff;"
    },
    {
        "line": 77,
        "fullcodeline": "p_voice2->cstaff = p_voice->cstaff;"
    },
    {
        "line": 78,
        "fullcodeline": "p_voice2->color = p_voice->color;"
    },
    {
        "line": 79,
        "fullcodeline": "p_voice2->map_name = p_voice->map_name;"
    },
    {
        "line": 85,
        "fullcodeline": "parsys->voice[voice2].range = range + 1;"
    },
    {
        "line": 86,
        "fullcodeline": "voice_link(p_voice2);"
    },
    {
        "line": 120,
        "fullcodeline": "over_bar = 1;"
    },
    {
        "line": 121,
        "fullcodeline": "over_mxtime = p_voice->time;"
    },
    {
        "line": 122,
        "fullcodeline": "over_voice = voice;"
    },
    {
        "line": 123,
        "fullcodeline": "time = p_voice2->time;"
    },
    {
        "line": 129,
        "fullcodeline": "over_time = s->time;"
    },
    {
        "line": 14,
        "fullcodeline": "if (!p_voice->last_sym) {"
    },
    {
        "line": 20,
        "fullcodeline": "if (over_time < 0) {"
    },
    {
        "line": 25,
        "fullcodeline": "if (p_voice->time != over_mxtime) {"
    },
    {
        "line": 81,
        "fullcodeline": "for (voice = 0; voice < MAXVOICE; voice++) {"
    },
    {
        "line": 124,
        "fullcodeline": "for (s = p_voice->last_sym; /*s*/; s = s->prev) {"
    },
    {
        "line": 15,
        "fullcodeline": "error(1, s, txt_no_note);"
    },
    {
        "line": 21,
        "fullcodeline": "error(1, s, \"Erroneous end of voice overlap\");"
    },
    {
        "line": 26,
        "fullcodeline": "error(1, s, tx_wrong_dur);"
    },
    {
        "line": 58,
        "fullcodeline": "error(1, s, \"Cannot have %%%%abc2pscompat\");"
    },
    {
        "line": 59,
        "fullcodeline": "cfmt.abc2pscompat = 0;"
    },
    {
        "line": 131,
        "fullcodeline": "if (over_mxtime == 0)"
    },
    {
        "line": 27,
        "fullcodeline": "if (p_voice->time > over_mxtime)"
    },
    {
        "line": 80,
        "fullcodeline": "range = parsys->voice[p_voice - voice_tb].range;"
    },
    {
        "line": 82,
        "fullcodeline": "if (parsys->voice[voice].range > range)"
    },
    {
        "line": 88,
        "fullcodeline": "for (voice3 = MAXVOICE; --voice3 >= 0; ) {"
    },
    {
        "line": 92,
        "fullcodeline": "if (voice3 > 0) {"
    },
    {
        "line": 125,
        "fullcodeline": "if (s->type == BAR"
    },
    {
        "line": 132,
        "fullcodeline": "over_mxtime = p_voice->time;"
    },
    {
        "line": 28,
        "fullcodeline": "curvoice->time = p_voice->time;"
    },
    {
        "line": 83,
        "fullcodeline": "parsys->voice[voice].range += clone + 1;"
    },
    {
        "line": 93,
        "fullcodeline": "p_voice3 = &voice_tb[voice3];"
    },
    {
        "line": 94,
        "fullcodeline": "strcpy(p_voice3->id, p_voice2->id);"
    },
    {
        "line": 95,
        "fullcodeline": "p_voice3->second = 1;"
    },
    {
        "line": 96,
        "fullcodeline": "parsys->voice[voice3].second = 1;"
    },
    {
        "line": 98,
        "fullcodeline": "parsys->voice[voice3].range = range + 2;"
    },
    {
        "line": 99,
        "fullcodeline": "voice_link(p_voice3);"
    },
    {
        "line": 100,
        "fullcodeline": "p_voice2->clone = voice3;"
    },
    {
        "line": 126,
        "fullcodeline": "|| s->time <= time)\t/* (if start of tune) */"
    },
    {
        "line": 30,
        "fullcodeline": "p_voice->time = curvoice->time;"
    },
    {
        "line": 89,
        "fullcodeline": "if (parsys->voice[voice3].range < 0)"
    },
    {
        "line": 102,
        "fullcodeline": "error(1, s,"
    },
    {
        "line": 133,
        "fullcodeline": "else if (p_voice->time != over_mxtime)"
    },
    {
        "line": 134,
        "fullcodeline": "error(1, s, tx_wrong_dur);"
    }
]