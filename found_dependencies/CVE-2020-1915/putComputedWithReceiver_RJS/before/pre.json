[
    {
        "line": 8,
        "fullcodeline": "assert("
    },
    {
        "line": 39,
        "fullcodeline": "auto converted = toPropertyKeyIfObject(runtime, nameValHandle);"
    },
    {
        "line": 43,
        "fullcodeline": "auto nameValPrimitiveHandle = *converted;"
    },
    {
        "line": 270,
        "fullcodeline": "SymbolID id{};"
    },
    {
        "line": 271,
        "fullcodeline": "LAZY_TO_IDENTIFIER(runtime, nameValPrimitiveHandle, id);"
    },
    {
        "line": 9,
        "fullcodeline": "!opFlags.getMustExist() &&"
    },
    {
        "line": 48,
        "fullcodeline": "MutableHandle<JSObject> propObj{runtime};"
    },
    {
        "line": 156,
        "fullcodeline": "MutableHandle<JSObject> receiverHandle{runtime, *selfHandle};"
    },
    {
        "line": 157,
        "fullcodeline": "if (selfHandle.getHermesValue().getRaw() != receiver->getRaw() ||"
    },
    {
        "line": 274,
        "fullcodeline": "return addOwnProperty("
    },
    {
        "line": 40,
        "fullcodeline": "if (LLVM_UNLIKELY(converted == ExecutionStatus::EXCEPTION)) {"
    },
    {
        "line": 50,
        "fullcodeline": "getComputedPrimitiveDescriptor("
    },
    {
        "line": 158,
        "fullcodeline": "receiverHandle->isHostObject() || receiverHandle->isProxyObject()) {"
    },
    {
        "line": 165,
        "fullcodeline": "CallResult<bool> descDefinedRes = getOwnComputedPrimitiveDescriptor("
    },
    {
        "line": 223,
        "fullcodeline": "if (LLVM_UNLIKELY(!receiverHandle->isExtensible())) {"
    },
    {
        "line": 234,
        "fullcodeline": "OptValue<uint32_t> arrayIndex;"
    },
    {
        "line": 236,
        "fullcodeline": "TO_ARRAY_INDEX(runtime, nameValPrimitiveHandle, strPrim, arrayIndex);"
    },
    {
        "line": 126,
        "fullcodeline": "if (LLVM_UNLIKELY(!desc.flags.writable)) {"
    },
    {
        "line": 162,
        "fullcodeline": "if (!receiverHandle) {"
    },
    {
        "line": 235,
        "fullcodeline": "MutableHandle<StringPrimitive> strPrim{runtime};"
    },
    {
        "line": 16,
        "fullcodeline": "if (auto arrayIndex = toArrayIndexFastPath(*nameValHandle)) {"
    },
    {
        "line": 66,
        "fullcodeline": "selfHandle == propObj &&"
    },
    {
        "line": 81,
        "fullcodeline": "auto *accessor = vmcast<PropertyAccessor>("
    },
    {
        "line": 110,
        "fullcodeline": "CallResult<Handle<>> key = toPropertyKey(runtime, nameValPrimitiveHandle);"
    },
    {
        "line": 113,
        "fullcodeline": "CallResult<bool> setRes ="
    },
    {
        "line": 140,
        "fullcodeline": "if (selfHandle == propObj && desc.flags.internalSetter) {"
    },
    {
        "line": 141,
        "fullcodeline": "SymbolID id{};"
    },
    {
        "line": 142,
        "fullcodeline": "LAZY_TO_IDENTIFIER(runtime, nameValPrimitiveHandle, id);"
    },
    {
        "line": 159,
        "fullcodeline": "if (selfHandle.getHermesValue().getRaw() != receiver->getRaw()) {"
    },
    {
        "line": 160,
        "fullcodeline": "receiverHandle = dyn_vmcast<JSObject>(*receiver);"
    },
    {
        "line": 167,
        "fullcodeline": "if (LLVM_UNLIKELY(descDefinedRes == ExecutionStatus::EXCEPTION)) {"
    },
    {
        "line": 190,
        "fullcodeline": "desc.flags.internalSetter || receiverHandle->isHostObject() ||"
    },
    {
        "line": 192,
        "fullcodeline": "SymbolID id{};"
    },
    {
        "line": 193,
        "fullcodeline": "LAZY_TO_IDENTIFIER(runtime, nameValPrimitiveHandle, id);"
    },
    {
        "line": 255,
        "fullcodeline": "auto result ="
    },
    {
        "line": 17,
        "fullcodeline": "if (selfHandle.getHermesValue().getRaw() == receiver->getRaw()) {"
    },
    {
        "line": 85,
        "fullcodeline": "if (!accessor->setter) {"
    },
    {
        "line": 108,
        "fullcodeline": "!opFlags.getMustExist() &&"
    },
    {
        "line": 111,
        "fullcodeline": "if (key == ExecutionStatus::EXCEPTION)"
    },
    {
        "line": 114,
        "fullcodeline": "JSProxy::setComputed(propObj, runtime, *key, valueHandle, receiver);"
    },
    {
        "line": 143,
        "fullcodeline": "return internalSetter("
    },
    {
        "line": 191,
        "fullcodeline": "receiverHandle->isProxyObject())) {"
    },
    {
        "line": 206,
        "fullcodeline": "receiverHandle->isProxyObject() && \"descriptor flags are impossible\");"
    },
    {
        "line": 212,
        "fullcodeline": "return JSProxy::defineOwnProperty("
    },
    {
        "line": 225,
        "fullcodeline": "return runtime->raiseTypeError("
    },
    {
        "line": 256,
        "fullcodeline": "setOwnIndexed(receiverHandle, runtime, *arrayIndex, valueHandle);"
    },
    {
        "line": 69,
        "fullcodeline": "!desc.flags.hostObject && !desc.flags.proxyObject &&"
    },
    {
        "line": 72,
        "fullcodeline": "setComputedSlotValue(selfHandle, runtime, desc, valueHandle) =="
    },
    {
        "line": 82,
        "fullcodeline": "getComputedSlotValue(propObj.get(), runtime, desc));"
    },
    {
        "line": 96,
        "fullcodeline": "if (accessor->setter.get(runtime)->executeCall1("
    },
    {
        "line": 115,
        "fullcodeline": "if (LLVM_UNLIKELY(setRes == ExecutionStatus::EXCEPTION)) {"
    },
    {
        "line": 118,
        "fullcodeline": "if (!*setRes && opFlags.getThrowOnError()) {"
    },
    {
        "line": 128,
        "fullcodeline": "SymbolID id{};"
    },
    {
        "line": 129,
        "fullcodeline": "LAZY_TO_IDENTIFIER(runtime, nameValPrimitiveHandle, id);"
    },
    {
        "line": 147,
        "fullcodeline": "desc.castToNamedPropertyDescriptorRef(),"
    },
    {
        "line": 172,
        "fullcodeline": "if (LLVM_UNLIKELY(desc.flags.accessor || !desc.flags.writable)) {"
    },
    {
        "line": 177,
        "fullcodeline": "!desc.flags.internalSetter && !receiverHandle->isHostObject() &&"
    },
    {
        "line": 208,
        "fullcodeline": "dpf.setValue = 1;"
    },
    {
        "line": 239,
        "fullcodeline": "if (auto *array = dyn_vmcast<JSArray>(receiverHandle.get())) {"
    },
    {
        "line": 257,
        "fullcodeline": "if (LLVM_UNLIKELY(result == ExecutionStatus::EXCEPTION))"
    },
    {
        "line": 18,
        "fullcodeline": "if (haveOwnIndexed(selfHandle.get(), runtime, *arrayIndex)) {"
    },
    {
        "line": 97,
        "fullcodeline": "runtime->makeHandle(accessor->setter),"
    },
    {
        "line": 100,
        "fullcodeline": "valueHandle.get()) == ExecutionStatus::EXCEPTION) {"
    },
    {
        "line": 120,
        "fullcodeline": "return runtime->raiseTypeError("
    },
    {
        "line": 130,
        "fullcodeline": "return raiseErrorForOverridingStaticBuiltin("
    },
    {
        "line": 134,
        "fullcodeline": "return runtime->raiseTypeErrorForValue("
    },
    {
        "line": 178,
        "fullcodeline": "!receiverHandle->isProxyObject())) {"
    },
    {
        "line": 195,
        "fullcodeline": "return internalSetter("
    },
    {
        "line": 210,
        "fullcodeline": "dpf = DefinePropertyFlags::getDefaultNewPropertyFlags();"
    },
    {
        "line": 264,
        "fullcodeline": "return runtime->raiseTypeError(\"Cannot assign to read-only property\");"
    },
    {
        "line": 19,
        "fullcodeline": "auto result ="
    },
    {
        "line": 68,
        "fullcodeline": "!desc.flags.accessor && !desc.flags.internalSetter &&"
    },
    {
        "line": 121,
        "fullcodeline": "TwineChar16(\"Proxy trap returned false for property\"));"
    },
    {
        "line": 131,
        "fullcodeline": "selfHandle, runtime, runtime->makeHandle(id));"
    },
    {
        "line": 180,
        "fullcodeline": "setComputedSlotValue("
    },
    {
        "line": 199,
        "fullcodeline": "desc.castToNamedPropertyDescriptorRef(),"
    },
    {
        "line": 202,
        "fullcodeline": "} else if (receiverHandle->isHostObject()) {"
    },
    {
        "line": 240,
        "fullcodeline": "if (LLVM_UNLIKELY(*arrayIndex >= JSArray::getLength(array))) {"
    },
    {
        "line": 241,
        "fullcodeline": "auto cr = putNamed_RJS("
    },
    {
        "line": 20,
        "fullcodeline": "setOwnIndexed(selfHandle, runtime, *arrayIndex, valueHandle);"
    },
    {
        "line": 21,
        "fullcodeline": "if (LLVM_UNLIKELY(result == ExecutionStatus::EXCEPTION))"
    },
    {
        "line": 87,
        "fullcodeline": "return runtime->raiseTypeErrorForValue("
    },
    {
        "line": 67,
        "fullcodeline": "selfHandle.getHermesValue().getRaw() == receiver->getRaw() &&"
    },
    {
        "line": 203,
        "fullcodeline": "return vmcast<HostObject>(receiverHandle.get())->set(id, *valueHandle);"
    },
    {
        "line": 244,
        "fullcodeline": "Predefined::getSymbolID(Predefined::length),"
    },
    {
        "line": 245,
        "fullcodeline": "runtime->makeHandle("
    },
    {
        "line": 248,
        "fullcodeline": "if (LLVM_UNLIKELY(cr == ExecutionStatus::EXCEPTION))"
    },
    {
        "line": 250,
        "fullcodeline": "if (LLVM_UNLIKELY(!*cr))"
    },
    {
        "line": 27,
        "fullcodeline": "return runtime->raiseTypeError("
    },
    {
        "line": 246,
        "fullcodeline": "HermesValue::encodeNumberValue(*arrayIndex + 1)),"
    }
]