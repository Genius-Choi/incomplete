[
    {
        "line": 5,
        "fullcodeline": "struct sock *sk = sock->sk;"
    },
    {
        "line": 6,
        "fullcodeline": "struct llc_sock *llc = llc_sk(sk);"
    },
    {
        "line": 7,
        "fullcodeline": "int rc = 0;"
    },
    {
        "line": 9,
        "fullcodeline": "memset(&sllc, 0, sizeof(sllc));"
    },
    {
        "line": 10,
        "fullcodeline": "lock_sock(sk);"
    },
    {
        "line": 13,
        "fullcodeline": "*uaddrlen = sizeof(sllc);"
    },
    {
        "line": 14,
        "fullcodeline": "memset(uaddr, 0, *uaddrlen);"
    },
    {
        "line": 35,
        "fullcodeline": "rc = 0;"
    },
    {
        "line": 36,
        "fullcodeline": "sllc.sllc_family = AF_LLC;"
    },
    {
        "line": 37,
        "fullcodeline": "memcpy(uaddr, &sllc, sizeof(sllc));"
    },
    {
        "line": 39,
        "fullcodeline": "release_sock(sk);"
    },
    {
        "line": 11,
        "fullcodeline": "if (sock_flag(sk, SOCK_ZAPPED))"
    },
    {
        "line": 16,
        "fullcodeline": "rc = -ENOTCONN;"
    },
    {
        "line": 21,
        "fullcodeline": "sllc.sllc_sap = llc->daddr.lsap;"
    },
    {
        "line": 22,
        "fullcodeline": "memcpy(&sllc.sllc_mac, &llc->daddr.mac, IFHWADDRLEN);"
    },
    {
        "line": 17,
        "fullcodeline": "if (sk->sk_state != TCP_ESTABLISHED)"
    },
    {
        "line": 24,
        "fullcodeline": "rc = -EINVAL;"
    },
    {
        "line": 27,
        "fullcodeline": "sllc.sllc_sap = llc->sap->laddr.lsap;"
    },
    {
        "line": 20,
        "fullcodeline": "sllc.sllc_arphrd = llc->dev->type;"
    },
    {
        "line": 25,
        "fullcodeline": "if (!llc->sap)"
    },
    {
        "line": 30,
        "fullcodeline": "sllc.sllc_arphrd = llc->dev->type;"
    },
    {
        "line": 31,
        "fullcodeline": "memcpy(&sllc.sllc_mac, llc->dev->dev_addr,"
    }
]