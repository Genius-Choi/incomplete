[
    {
        "line": 23,
        "fullcodeline": "row_size=GetPSDRowSize(image);"
    },
    {
        "line": 24,
        "fullcodeline": "pixels=(unsigned char *) AcquireQuantumMemory(row_size,sizeof(*pixels));"
    },
    {
        "line": 29,
        "fullcodeline": "length=0;"
    },
    {
        "line": 40,
        "fullcodeline": "compact_pixels=(unsigned char *) AcquireQuantumMemory(length,sizeof(*pixels));"
    },
    {
        "line": 48,
        "fullcodeline": "(void) ResetMagickMemory(compact_pixels,0,length*sizeof(*compact_pixels));"
    },
    {
        "line": 50,
        "fullcodeline": "status=MagickTrue;"
    },
    {
        "line": 70,
        "fullcodeline": "compact_pixels=(unsigned char *) RelinquishMagickMemory(compact_pixels);"
    },
    {
        "line": 71,
        "fullcodeline": "pixels=(unsigned char *) RelinquishMagickMemory(pixels);"
    },
    {
        "line": 19,
        "fullcodeline": "if (image->debug != MagickFalse)"
    },
    {
        "line": 25,
        "fullcodeline": "if (pixels == (unsigned char *) NULL)"
    },
    {
        "line": 30,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 34,
        "fullcodeline": "if (length > row_size + 256) // arbitrary number"
    },
    {
        "line": 41,
        "fullcodeline": "if (compact_pixels == (unsigned char *) NULL)"
    },
    {
        "line": 51,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 20,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 26,
        "fullcodeline": "ThrowBinaryException(ResourceLimitError,\"MemoryAllocationFailed\","
    },
    {
        "line": 31,
        "fullcodeline": "if ((MagickOffsetType) length < sizes[y])"
    },
    {
        "line": 36,
        "fullcodeline": "pixels=(unsigned char *) RelinquishMagickMemory(pixels);"
    },
    {
        "line": 37,
        "fullcodeline": "ThrowBinaryException(ResourceLimitError,\"InvalidLength\",image->filename);"
    },
    {
        "line": 43,
        "fullcodeline": "pixels=(unsigned char *) RelinquishMagickMemory(pixels);"
    },
    {
        "line": 44,
        "fullcodeline": "ThrowBinaryException(ResourceLimitError,\"MemoryAllocationFailed\","
    },
    {
        "line": 53,
        "fullcodeline": "status=MagickFalse;"
    },
    {
        "line": 55,
        "fullcodeline": "count=ReadBlob(image,(size_t) sizes[y],compact_pixels);"
    },
    {
        "line": 59,
        "fullcodeline": "count=DecodePSDPixels((size_t) sizes[y],compact_pixels,"
    },
    {
        "line": 64,
        "fullcodeline": "status=ReadPSDChannelPixels(image,psd_info->channels,y,type,pixels,"
    },
    {
        "line": 32,
        "fullcodeline": "length=(size_t) sizes[y];"
    },
    {
        "line": 56,
        "fullcodeline": "if (count != (ssize_t) sizes[y])"
    },
    {
        "line": 61,
        "fullcodeline": "if (count != (ssize_t) row_size)"
    },
    {
        "line": 66,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 60,
        "fullcodeline": "(ssize_t) (image->depth == 1 ? 123456 : image->depth),row_size,pixels);"
    }
]