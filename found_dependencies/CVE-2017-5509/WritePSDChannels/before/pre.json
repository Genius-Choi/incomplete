[
    {
        "line": 21,
        "fullcodeline": "count=0;"
    },
    {
        "line": 22,
        "fullcodeline": "offset_length=0;"
    },
    {
        "line": 23,
        "fullcodeline": "rows_offset=0;"
    },
    {
        "line": 24,
        "fullcodeline": "compact_pixels=(unsigned char *) NULL;"
    },
    {
        "line": 31,
        "fullcodeline": "channels=1;"
    },
    {
        "line": 45,
        "fullcodeline": "size_offset+=2;"
    },
    {
        "line": 119,
        "fullcodeline": "compact_pixels=(unsigned char *) RelinquishMagickMemory(compact_pixels);"
    },
    {
        "line": 25,
        "fullcodeline": "if (next_image->compression == RLECompression)"
    },
    {
        "line": 32,
        "fullcodeline": "if (separate == MagickFalse)"
    },
    {
        "line": 46,
        "fullcodeline": "if (next_image->storage_class == PseudoClass)"
    },
    {
        "line": 120,
        "fullcodeline": "if (next_image->colorspace == CMYKColorspace)"
    },
    {
        "line": 27,
        "fullcodeline": "compact_pixels=AcquireCompactPixels(image,exception);"
    },
    {
        "line": 41,
        "fullcodeline": "rows_offset=TellBlob(image)+2;"
    },
    {
        "line": 42,
        "fullcodeline": "count+=WriteCompressionStart(psd_info,image,next_image,channels);"
    },
    {
        "line": 43,
        "fullcodeline": "offset_length=(next_image->rows*(psd_info->version == 1 ? 2 : 4));"
    },
    {
        "line": 48,
        "fullcodeline": "length=WritePSDChannel(psd_info,image_info,image,next_image,"
    },
    {
        "line": 54,
        "fullcodeline": "count+=length;"
    },
    {
        "line": 127,
        "fullcodeline": "property=GetImageArtifact(next_image,\"psd:opacity-mask\");"
    },
    {
        "line": 28,
        "fullcodeline": "if (compact_pixels == (unsigned char *) NULL)"
    },
    {
        "line": 34,
        "fullcodeline": "if (next_image->storage_class != PseudoClass)"
    },
    {
        "line": 50,
        "fullcodeline": "if (separate != MagickFalse)"
    },
    {
        "line": 121,
        "fullcodeline": "(void) NegateCMYK(next_image,exception);"
    },
    {
        "line": 128,
        "fullcodeline": "if (property != (const char *) NULL)"
    },
    {
        "line": 51,
        "fullcodeline": "size_offset+=WritePSDSize(psd_info,image,length,size_offset)+2;"
    },
    {
        "line": 58,
        "fullcodeline": "if (IsImageGray(next_image) != MagickFalse)"
    },
    {
        "line": 108,
        "fullcodeline": "if (next_image->alpha_trait != UndefinedPixelTrait)"
    },
    {
        "line": 130,
        "fullcodeline": "mask=(Image *) GetImageRegistry(ImageRegistryType,property,"
    },
    {
        "line": 36,
        "fullcodeline": "if (IsImageGray(next_image) == MagickFalse)"
    },
    {
        "line": 38,
        "fullcodeline": "if (next_image->alpha_trait != UndefinedPixelTrait)"
    },
    {
        "line": 53,
        "fullcodeline": "rows_offset+=offset_length;"
    },
    {
        "line": 60,
        "fullcodeline": "length=WritePSDChannel(psd_info,image_info,image,next_image,"
    },
    {
        "line": 66,
        "fullcodeline": "count+=length;"
    },
    {
        "line": 110,
        "fullcodeline": "length=WritePSDChannel(psd_info,image_info,image,next_image,"
    },
    {
        "line": 116,
        "fullcodeline": "count+=length;"
    },
    {
        "line": 132,
        "fullcodeline": "if (mask != (Image *) NULL)"
    },
    {
        "line": 37,
        "fullcodeline": "channels=next_image->colorspace == CMYKColorspace ? 4 : 3;"
    },
    {
        "line": 39,
        "fullcodeline": "channels++;"
    },
    {
        "line": 62,
        "fullcodeline": "if (separate != MagickFalse)"
    },
    {
        "line": 73,
        "fullcodeline": "length=WritePSDChannel(psd_info,image_info,image,next_image,"
    },
    {
        "line": 79,
        "fullcodeline": "count+=length;"
    },
    {
        "line": 81,
        "fullcodeline": "length=WritePSDChannel(psd_info,image_info,image,next_image,"
    },
    {
        "line": 87,
        "fullcodeline": "count+=length;"
    },
    {
        "line": 89,
        "fullcodeline": "length=WritePSDChannel(psd_info,image_info,image,next_image,"
    },
    {
        "line": 95,
        "fullcodeline": "count+=length;"
    },
    {
        "line": 112,
        "fullcodeline": "if (separate != MagickFalse)"
    },
    {
        "line": 140,
        "fullcodeline": "length=WritePSDChannel(psd_info,image_info,image,mask,"
    },
    {
        "line": 143,
        "fullcodeline": "count+=length;"
    },
    {
        "line": 63,
        "fullcodeline": "size_offset+=WritePSDSize(psd_info,image,length,size_offset)+2;"
    },
    {
        "line": 70,
        "fullcodeline": "if (next_image->colorspace == CMYKColorspace)"
    },
    {
        "line": 75,
        "fullcodeline": "if (separate != MagickFalse)"
    },
    {
        "line": 83,
        "fullcodeline": "if (separate != MagickFalse)"
    },
    {
        "line": 91,
        "fullcodeline": "if (separate != MagickFalse)"
    },
    {
        "line": 97,
        "fullcodeline": "if (next_image->colorspace == CMYKColorspace)"
    },
    {
        "line": 113,
        "fullcodeline": "size_offset+=WritePSDSize(psd_info,image,length,size_offset)+2;"
    },
    {
        "line": 134,
        "fullcodeline": "if (mask->compression == RLECompression)"
    },
    {
        "line": 142,
        "fullcodeline": "(void) WritePSDSize(psd_info,image,length,size_offset);"
    },
    {
        "line": 65,
        "fullcodeline": "rows_offset+=offset_length;"
    },
    {
        "line": 76,
        "fullcodeline": "size_offset+=WritePSDSize(psd_info,image,length,size_offset)+2;"
    },
    {
        "line": 84,
        "fullcodeline": "size_offset+=WritePSDSize(psd_info,image,length,size_offset)+2;"
    },
    {
        "line": 92,
        "fullcodeline": "size_offset+=WritePSDSize(psd_info,image,length,size_offset)+2;"
    },
    {
        "line": 99,
        "fullcodeline": "length=WritePSDChannel(psd_info,image_info,image,next_image,"
    },
    {
        "line": 105,
        "fullcodeline": "count+=length;"
    },
    {
        "line": 115,
        "fullcodeline": "rows_offset+=offset_length;"
    },
    {
        "line": 136,
        "fullcodeline": "compact_pixels=AcquireCompactPixels(mask,exception);"
    },
    {
        "line": 144,
        "fullcodeline": "compact_pixels=(unsigned char *) RelinquishMagickMemory("
    },
    {
        "line": 71,
        "fullcodeline": "(void) NegateCMYK(next_image,exception);"
    },
    {
        "line": 78,
        "fullcodeline": "rows_offset+=offset_length;"
    },
    {
        "line": 86,
        "fullcodeline": "rows_offset+=offset_length;"
    },
    {
        "line": 94,
        "fullcodeline": "rows_offset+=offset_length;"
    },
    {
        "line": 101,
        "fullcodeline": "if (separate != MagickFalse)"
    },
    {
        "line": 137,
        "fullcodeline": "if (compact_pixels == (unsigned char *) NULL)"
    },
    {
        "line": 102,
        "fullcodeline": "size_offset+=WritePSDSize(psd_info,image,length,size_offset)+2;"
    },
    {
        "line": 104,
        "fullcodeline": "rows_offset+=offset_length;"
    }
]