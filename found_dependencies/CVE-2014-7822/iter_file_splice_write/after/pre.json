[
    {
        "line": 4,
        "fullcodeline": "struct splice_desc sd = {"
    },
    {
        "line": 10,
        "fullcodeline": "int nbufs = pipe->buffers;"
    },
    {
        "line": 11,
        "fullcodeline": "struct bio_vec *array = kcalloc(nbufs, sizeof(struct bio_vec),"
    },
    {
        "line": 18,
        "fullcodeline": "pipe_lock(pipe);"
    },
    {
        "line": 20,
        "fullcodeline": "splice_from_pipe_begin(&sd);"
    },
    {
        "line": 113,
        "fullcodeline": "splice_from_pipe_end(pipe, &sd);"
    },
    {
        "line": 15,
        "fullcodeline": "if (unlikely(!array))"
    },
    {
        "line": 27,
        "fullcodeline": "ret = splice_from_pipe_next(pipe, &sd);"
    },
    {
        "line": 43,
        "fullcodeline": "left = sd.total_len;"
    },
    {
        "line": 68,
        "fullcodeline": "from.type = ITER_BVEC | WRITE;"
    },
    {
        "line": 69,
        "fullcodeline": "from.bvec = array;"
    },
    {
        "line": 70,
        "fullcodeline": "from.nr_segs = n;"
    },
    {
        "line": 71,
        "fullcodeline": "from.count = sd.total_len - left;"
    },
    {
        "line": 72,
        "fullcodeline": "from.iov_offset = 0;"
    },
    {
        "line": 75,
        "fullcodeline": "init_sync_kiocb(&kiocb, out);"
    },
    {
        "line": 76,
        "fullcodeline": "kiocb.ki_pos = sd.pos;"
    },
    {
        "line": 77,
        "fullcodeline": "kiocb.ki_nbytes = sd.total_len - left;"
    },
    {
        "line": 80,
        "fullcodeline": "ret = out->f_op->write_iter(&kiocb, &from);"
    },
    {
        "line": 87,
        "fullcodeline": "sd.num_spliced += ret;"
    },
    {
        "line": 88,
        "fullcodeline": "sd.total_len -= ret;"
    },
    {
        "line": 118,
        "fullcodeline": "ret = sd.num_spliced;"
    },
    {
        "line": 5,
        "fullcodeline": ".total_len = len,"
    },
    {
        "line": 6,
        "fullcodeline": ".flags = flags,"
    },
    {
        "line": 7,
        "fullcodeline": ".pos = *ppos,"
    },
    {
        "line": 8,
        "fullcodeline": ".u.file = out,"
    },
    {
        "line": 16,
        "fullcodeline": "return -ENOMEM;"
    },
    {
        "line": 28,
        "fullcodeline": "if (ret <= 0)"
    },
    {
        "line": 44,
        "fullcodeline": "for (n = 0, idx = pipe->curbuf; left && n < pipe->nrbufs; n++, idx++) {"
    },
    {
        "line": 81,
        "fullcodeline": "if (-EIOCBQUEUED == ret)"
    },
    {
        "line": 84,
        "fullcodeline": "if (ret <= 0)"
    },
    {
        "line": 89,
        "fullcodeline": "*ppos = sd.pos = kiocb.ki_pos;"
    },
    {
        "line": 31,
        "fullcodeline": "if (unlikely(nbufs < pipe->buffers)) {"
    },
    {
        "line": 33,
        "fullcodeline": "nbufs = pipe->buffers;"
    },
    {
        "line": 34,
        "fullcodeline": "array = kcalloc(nbufs, sizeof(struct bio_vec),"
    },
    {
        "line": 45,
        "fullcodeline": "struct pipe_buffer *buf = pipe->bufs + idx;"
    },
    {
        "line": 46,
        "fullcodeline": "size_t this_len = buf->len;"
    },
    {
        "line": 54,
        "fullcodeline": "ret = buf->ops->confirm(pipe, buf);"
    },
    {
        "line": 64,
        "fullcodeline": "left -= this_len;"
    },
    {
        "line": 82,
        "fullcodeline": "ret = wait_on_sync_kiocb(&kiocb);"
    },
    {
        "line": 93,
        "fullcodeline": "struct pipe_buffer *buf = pipe->bufs + pipe->curbuf;"
    },
    {
        "line": 36,
        "fullcodeline": "if (!array) {"
    },
    {
        "line": 48,
        "fullcodeline": "if (this_len > left)"
    },
    {
        "line": 51,
        "fullcodeline": "if (idx == pipe->buffers - 1)"
    },
    {
        "line": 55,
        "fullcodeline": "if (unlikely(ret)) {"
    },
    {
        "line": 94,
        "fullcodeline": "if (ret >= buf->len) {"
    },
    {
        "line": 37,
        "fullcodeline": "ret = -ENOMEM;"
    },
    {
        "line": 49,
        "fullcodeline": "this_len = left;"
    },
    {
        "line": 52,
        "fullcodeline": "idx = -1;"
    },
    {
        "line": 96,
        "fullcodeline": "ret -= buf->len;"
    },
    {
        "line": 97,
        "fullcodeline": "buf->len = 0;"
    },
    {
        "line": 98,
        "fullcodeline": "buf->ops = NULL;"
    },
    {
        "line": 99,
        "fullcodeline": "ops->release(pipe, buf);"
    },
    {
        "line": 100,
        "fullcodeline": "pipe->curbuf = (pipe->curbuf + 1) & (pipe->buffers - 1);"
    },
    {
        "line": 101,
        "fullcodeline": "pipe->nrbufs--;"
    },
    {
        "line": 56,
        "fullcodeline": "if (ret == -ENODATA)"
    },
    {
        "line": 105,
        "fullcodeline": "buf->offset += ret;"
    },
    {
        "line": 106,
        "fullcodeline": "buf->len -= ret;"
    },
    {
        "line": 107,
        "fullcodeline": "ret = 0;"
    },
    {
        "line": 57,
        "fullcodeline": "ret = 0;"
    },
    {
        "line": 103,
        "fullcodeline": "sd.need_wakeup = true;"
    }
]