[
    {
        "line": 4,
        "fullcodeline": "const uint8_t *buf = avpkt->data;"
    },
    {
        "line": 5,
        "fullcodeline": "int buf_size       = avpkt->size;"
    },
    {
        "line": 6,
        "fullcodeline": "MpegEncContext *s  = avctx->priv_data;"
    },
    {
        "line": 8,
        "fullcodeline": "int slice_ret = 0;"
    },
    {
        "line": 9,
        "fullcodeline": "AVFrame *pict = data;"
    },
    {
        "line": 65,
        "fullcodeline": "s->bitstream_buffer_size = 0;"
    },
    {
        "line": 124,
        "fullcodeline": "avctx->has_b_frames = !s->low_delay;"
    },
    {
        "line": 165,
        "fullcodeline": "s->current_picture.f->pict_type = s->pict_type;"
    },
    {
        "line": 166,
        "fullcodeline": "s->current_picture.f->key_frame = s->pict_type == AV_PICTURE_TYPE_I;"
    },
    {
        "line": 207,
        "fullcodeline": "ff_mpeg_er_frame_start(s);"
    },
    {
        "line": 221,
        "fullcodeline": "s->mb_x = 0;"
    },
    {
        "line": 222,
        "fullcodeline": "s->mb_y = 0;"
    },
    {
        "line": 224,
        "fullcodeline": "slice_ret = decode_slice(s);"
    },
    {
        "line": 251,
        "fullcodeline": "av_assert1(s->bitstream_buffer_size == 0);"
    },
    {
        "line": 253,
        "fullcodeline": "ff_er_frame_end(&s->er);"
    },
    {
        "line": 261,
        "fullcodeline": "ff_mpv_frame_end(s);"
    },
    {
        "line": 269,
        "fullcodeline": "av_assert1(s->current_picture.f->pict_type == s->current_picture_ptr->f->pict_type);"
    },
    {
        "line": 270,
        "fullcodeline": "av_assert1(s->current_picture.f->pict_type == s->pict_type);"
    },
    {
        "line": 12,
        "fullcodeline": "if (buf_size == 0) {"
    },
    {
        "line": 25,
        "fullcodeline": "if (s->avctx->flags & AV_CODEC_FLAG_TRUNCATED) {"
    },
    {
        "line": 46,
        "fullcodeline": "if (s->divx_packed && s->bitstream_buffer_size) {"
    },
    {
        "line": 59,
        "fullcodeline": "if (s->bitstream_buffer_size && (s->divx_packed || buf_size <= MAX_NVOP_SIZE)) // divx 5.01+/xvid frame reorder"
    },
    {
        "line": 66,
        "fullcodeline": "if (ret < 0)"
    },
    {
        "line": 69,
        "fullcodeline": "if (!s->context_initialized)"
    },
    {
        "line": 74,
        "fullcodeline": "if (CONFIG_WMV2_DECODER && s->msmpeg4_version == 5) {"
    },
    {
        "line": 94,
        "fullcodeline": "if (ret < 0 || ret == FRAME_SKIPPED) {"
    },
    {
        "line": 102,
        "fullcodeline": "if (ret == FRAME_SKIPPED)"
    },
    {
        "line": 106,
        "fullcodeline": "if (ret < 0) {"
    },
    {
        "line": 111,
        "fullcodeline": "if (!s->context_initialized) {"
    },
    {
        "line": 117,
        "fullcodeline": "if (!s->current_picture_ptr || s->current_picture_ptr->f->data[0]) {"
    },
    {
        "line": 126,
        "fullcodeline": "if (CONFIG_MPEG4_DECODER && avctx->codec_id == AV_CODEC_ID_MPEG4) {"
    },
    {
        "line": 137,
        "fullcodeline": "if (s->width  != avctx->coded_width  ||"
    },
    {
        "line": 159,
        "fullcodeline": "if (s->codec_id == AV_CODEC_ID_H263  ||"
    },
    {
        "line": 169,
        "fullcodeline": "if (!s->last_picture_ptr &&"
    },
    {
        "line": 172,
        "fullcodeline": "if ((avctx->skip_frame >= AVDISCARD_NONREF &&"
    },
    {
        "line": 186,
        "fullcodeline": "if ((!s->no_rounding) || s->pict_type == AV_PICTURE_TYPE_B) {"
    },
    {
        "line": 194,
        "fullcodeline": "if ((ret = ff_mpv_frame_start(s, avctx)) < 0)"
    },
    {
        "line": 197,
        "fullcodeline": "if (!s->divx_packed)"
    },
    {
        "line": 212,
        "fullcodeline": "if (CONFIG_WMV2_DECODER && s->msmpeg4_version == 5) {"
    },
    {
        "line": 225,
        "fullcodeline": "while (s->mb_y < s->mb_height) {"
    },
    {
        "line": 245,
        "fullcodeline": "if (s->msmpeg4_version && s->msmpeg4_version < 4 &&"
    },
    {
        "line": 263,
        "fullcodeline": "if (CONFIG_MPEG4_DECODER && avctx->codec_id == AV_CODEC_ID_MPEG4)"
    },
    {
        "line": 266,
        "fullcodeline": "if (!s->divx_packed && avctx->hwaccel)"
    },
    {
        "line": 271,
        "fullcodeline": "if (s->pict_type == AV_PICTURE_TYPE_B || s->low_delay) {"
    },
    {
        "line": 283,
        "fullcodeline": "if (s->last_picture_ptr || s->low_delay) {"
    },
    {
        "line": 302,
        "fullcodeline": "if (slice_ret < 0 && (avctx->err_recognition & AV_EF_EXPLODE))"
    },
    {
        "line": 60,
        "fullcodeline": "ret = init_get_bits8(&s->gb, s->bitstream_buffer,"
    },
    {
        "line": 71,
        "fullcodeline": "ff_mpv_idct_init(s);"
    },
    {
        "line": 75,
        "fullcodeline": "ret = ff_wmv2_decode_picture_header(s);"
    },
    {
        "line": 107,
        "fullcodeline": "av_log(s->avctx, AV_LOG_ERROR, \"header damaged\\n\");"
    },
    {
        "line": 112,
        "fullcodeline": "avctx->pix_fmt = h263_get_format(avctx);"
    },
    {
        "line": 118,
        "fullcodeline": "int i = ff_find_unused_picture(s->avctx, s->picture, 0);"
    },
    {
        "line": 121,
        "fullcodeline": "s->current_picture_ptr = &s->picture[i];"
    },
    {
        "line": 141,
        "fullcodeline": "s->context_reinit = 0;"
    },
    {
        "line": 143,
        "fullcodeline": "ret = ff_set_dimensions(avctx, s->width, s->height);"
    },
    {
        "line": 147,
        "fullcodeline": "ff_set_sar(avctx, avctx->sample_aspect_ratio);"
    },
    {
        "line": 161,
        "fullcodeline": "s->codec_id == AV_CODEC_ID_H263I)"
    },
    {
        "line": 162,
        "fullcodeline": "s->gob_index = H263_GOB_HEIGHT(s->height);"
    },
    {
        "line": 170,
        "fullcodeline": "(s->pict_type == AV_PICTURE_TYPE_B || s->droppable))"
    },
    {
        "line": 176,
        "fullcodeline": "avctx->skip_frame >= AVDISCARD_ALL)"
    },
    {
        "line": 198,
        "fullcodeline": "ff_thread_finish_setup(avctx);"
    },
    {
        "line": 201,
        "fullcodeline": "ret = avctx->hwaccel->start_frame(avctx, s->gb.buffer,"
    },
    {
        "line": 213,
        "fullcodeline": "ret = ff_wmv2_decode_secondary_picture_header(s);"
    },
    {
        "line": 246,
        "fullcodeline": "s->pict_type == AV_PICTURE_TYPE_I)"
    },
    {
        "line": 256,
        "fullcodeline": "ret = avctx->hwaccel->end_frame(avctx);"
    },
    {
        "line": 264,
        "fullcodeline": "ff_mpeg4_frame_end(avctx, buf, buf_size);"
    },
    {
        "line": 267,
        "fullcodeline": "ff_thread_finish_setup(avctx);"
    },
    {
        "line": 274,
        "fullcodeline": "ff_print_debug_info(s, s->current_picture_ptr, pict);"
    },
    {
        "line": 275,
        "fullcodeline": "ff_mpv_export_qp_table(s, pict, s->current_picture_ptr, FF_QSCALE_TYPE_MPEG1);"
    },
    {
        "line": 299,
        "fullcodeline": "*got_frame = 1;"
    },
    {
        "line": 14,
        "fullcodeline": "if (s->low_delay == 0 && s->next_picture_ptr) {"
    },
    {
        "line": 28,
        "fullcodeline": "if (CONFIG_MPEG4_DECODER && s->codec_id == AV_CODEC_ID_MPEG4) {"
    },
    {
        "line": 40,
        "fullcodeline": "if (ff_combine_frame(&s->parse_context, next, (const uint8_t **)&buf,"
    },
    {
        "line": 48,
        "fullcodeline": "for(i=0; i < buf_size-3; i++) {"
    },
    {
        "line": 63,
        "fullcodeline": "ret = init_get_bits8(&s->gb, buf, buf_size);"
    },
    {
        "line": 95,
        "fullcodeline": "if (   s->width  != avctx->coded_width"
    },
    {
        "line": 103,
        "fullcodeline": "return get_consumed_bytes(s, buf_size);"
    },
    {
        "line": 113,
        "fullcodeline": "if ((ret = ff_mpv_common_init(s)) < 0)"
    },
    {
        "line": 119,
        "fullcodeline": "if (i < 0)"
    },
    {
        "line": 127,
        "fullcodeline": "if (ff_mpeg4_workaround_bugs(avctx) == 1)"
    },
    {
        "line": 129,
        "fullcodeline": "if (s->studio_profile != (s->idsp.idct == NULL))"
    },
    {
        "line": 138,
        "fullcodeline": "s->height != avctx->coded_height ||"
    },
    {
        "line": 144,
        "fullcodeline": "if (ret < 0)"
    },
    {
        "line": 149,
        "fullcodeline": "if ((ret = ff_mpv_common_frame_size_change(s)))"
    },
    {
        "line": 152,
        "fullcodeline": "if (avctx->pix_fmt != h263_get_format(avctx)) {"
    },
    {
        "line": 160,
        "fullcodeline": "s->codec_id == AV_CODEC_ID_H263P ||"
    },
    {
        "line": 171,
        "fullcodeline": "return get_consumed_bytes(s, buf_size);"
    },
    {
        "line": 174,
        "fullcodeline": "(avctx->skip_frame >= AVDISCARD_NONKEY &&"
    },
    {
        "line": 177,
        "fullcodeline": "return get_consumed_bytes(s, buf_size);"
    },
    {
        "line": 180,
        "fullcodeline": "if (s->pict_type == AV_PICTURE_TYPE_B)"
    },
    {
        "line": 203,
        "fullcodeline": "if (ret < 0 )"
    },
    {
        "line": 214,
        "fullcodeline": "if (ret < 0)"
    },
    {
        "line": 216,
        "fullcodeline": "if (ret == 1)"
    },
    {
        "line": 238,
        "fullcodeline": "if (s->msmpeg4_version < 4 && s->h263_pred)"
    },
    {
        "line": 241,
        "fullcodeline": "if (decode_slice(s) < 0)"
    },
    {
        "line": 247,
        "fullcodeline": "if (!CONFIG_MSMPEG4_DECODER ||"
    },
    {
        "line": 257,
        "fullcodeline": "if (ret < 0)"
    },
    {
        "line": 272,
        "fullcodeline": "if ((ret = av_frame_ref(pict, s->current_picture_ptr->f)) < 0)"
    },
    {
        "line": 284,
        "fullcodeline": "if (   pict->format == AV_PIX_FMT_YUV420P"
    },
    {
        "line": 17,
        "fullcodeline": "s->next_picture_ptr = NULL;"
    },
    {
        "line": 19,
        "fullcodeline": "*got_frame = 1;"
    },
    {
        "line": 29,
        "fullcodeline": "next = ff_mpeg4_find_frame_end(&s->parse_context, buf, buf_size);"
    },
    {
        "line": 76,
        "fullcodeline": "} else if (CONFIG_MSMPEG4_DECODER && s->msmpeg4_version) {"
    },
    {
        "line": 96,
        "fullcodeline": "|| s->height != avctx->coded_height) {"
    },
    {
        "line": 97,
        "fullcodeline": "av_log(s->avctx, AV_LOG_WARNING, \"Reverting picture dimensions change due to header decoding failure\\n\");"
    },
    {
        "line": 98,
        "fullcodeline": "s->width = avctx->coded_width;"
    },
    {
        "line": 99,
        "fullcodeline": "s->height= avctx->coded_height;"
    },
    {
        "line": 130,
        "fullcodeline": "ff_mpv_idct_init(s);"
    },
    {
        "line": 153,
        "fullcodeline": "av_log(avctx, AV_LOG_ERROR, \"format change not supported\\n\");"
    },
    {
        "line": 154,
        "fullcodeline": "avctx->pix_fmt = AV_PIX_FMT_NONE;"
    },
    {
        "line": 173,
        "fullcodeline": "s->pict_type == AV_PICTURE_TYPE_B)    ||"
    },
    {
        "line": 175,
        "fullcodeline": "s->pict_type != AV_PICTURE_TYPE_I)    ||"
    },
    {
        "line": 239,
        "fullcodeline": "ff_mpeg4_clean_buffers(s);"
    },
    {
        "line": 242,
        "fullcodeline": "slice_ret = AVERROR_INVALIDDATA;"
    },
    {
        "line": 248,
        "fullcodeline": "ff_msmpeg4_decode_ext_header(s, buf_size) < 0)"
    },
    {
        "line": 249,
        "fullcodeline": "s->er.error_status_table[s->mb_num - 1] = ER_MB_ERROR;"
    },
    {
        "line": 285,
        "fullcodeline": "&& (s->codec_tag == AV_RL32(\"GEOV\") || s->codec_tag == AV_RL32(\"GEOX\"))) {"
    },
    {
        "line": 287,
        "fullcodeline": "av_frame_make_writable(pict);"
    },
    {
        "line": 305,
        "fullcodeline": "return get_consumed_bytes(s, buf_size);"
    },
    {
        "line": 15,
        "fullcodeline": "if ((ret = av_frame_ref(pict, s->next_picture_ptr->f)) < 0)"
    },
    {
        "line": 49,
        "fullcodeline": "if (buf[i]==0 && buf[i+1]==0 && buf[i+2]==1) {"
    },
    {
        "line": 77,
        "fullcodeline": "ret = ff_msmpeg4_decode_picture_header(s);"
    },
    {
        "line": 181,
        "fullcodeline": "return get_consumed_bytes(s, buf_size);"
    },
    {
        "line": 183,
        "fullcodeline": "s->next_p_frame_damaged = 0;"
    },
    {
        "line": 227,
        "fullcodeline": "if (s->slice_height == 0 || s->mb_x != 0 || slice_ret < 0 ||"
    },
    {
        "line": 231,
        "fullcodeline": "int prev_x = s->mb_x, prev_y = s->mb_y;"
    },
    {
        "line": 279,
        "fullcodeline": "ff_print_debug_info(s, s->last_picture_ptr, pict);"
    },
    {
        "line": 280,
        "fullcodeline": "ff_mpv_export_qp_table(s, pict, s->last_picture_ptr, FF_QSCALE_TYPE_MPEG1);"
    },
    {
        "line": 288,
        "fullcodeline": "for (p=0; p<3; p++) {"
    },
    {
        "line": 30,
        "fullcodeline": "} else if (CONFIG_H263_DECODER && s->codec_id == AV_CODEC_ID_H263) {"
    },
    {
        "line": 228,
        "fullcodeline": "(s->mb_y % s->slice_height) != 0 || get_bits_left(&s->gb) < 0)"
    },
    {
        "line": 232,
        "fullcodeline": "if (ff_h263_resync(s) < 0)"
    },
    {
        "line": 234,
        "fullcodeline": "if (prev_y * s->mb_width + prev_x < s->mb_y * s->mb_width + s->mb_x)"
    },
    {
        "line": 277,
        "fullcodeline": "if ((ret = av_frame_ref(pict, s->last_picture_ptr->f)) < 0)"
    },
    {
        "line": 289,
        "fullcodeline": "int w = AV_CEIL_RSHIFT(pict-> width, !!p);"
    },
    {
        "line": 290,
        "fullcodeline": "int h = AV_CEIL_RSHIFT(pict->height, !!p);"
    },
    {
        "line": 31,
        "fullcodeline": "next = ff_h263_find_frame_end(&s->parse_context, buf, buf_size);"
    },
    {
        "line": 50,
        "fullcodeline": "if (buf[i+3]==0xB0) {"
    },
    {
        "line": 78,
        "fullcodeline": "} else if (CONFIG_MPEG4_DECODER && avctx->codec_id == AV_CODEC_ID_MPEG4) {"
    },
    {
        "line": 235,
        "fullcodeline": "s->er.error_occurred = 1;"
    },
    {
        "line": 51,
        "fullcodeline": "av_log(s->avctx, AV_LOG_WARNING, \"Discarding excessive bitstream in packed xvid\\n\");"
    },
    {
        "line": 52,
        "fullcodeline": "s->bitstream_buffer_size = 0;"
    },
    {
        "line": 85,
        "fullcodeline": "ret = ff_mpeg4_decode_picture_header(avctx->priv_data, &s->gb);"
    },
    {
        "line": 32,
        "fullcodeline": "} else if (CONFIG_H263P_DECODER && s->codec_id == AV_CODEC_ID_H263P) {"
    },
    {
        "line": 79,
        "fullcodeline": "if (s->avctx->extradata_size && s->picture_number == 0) {"
    },
    {
        "line": 33,
        "fullcodeline": "next = ff_h263_find_frame_end(&s->parse_context, buf, buf_size);"
    },
    {
        "line": 86,
        "fullcodeline": "} else if (CONFIG_H263I_DECODER && s->codec_id == AV_CODEC_ID_H263I) {"
    },
    {
        "line": 35,
        "fullcodeline": "av_log(s->avctx, AV_LOG_ERROR,"
    },
    {
        "line": 82,
        "fullcodeline": "if (init_get_bits8(&gb, s->avctx->extradata, s->avctx->extradata_size) >= 0 )"
    },
    {
        "line": 87,
        "fullcodeline": "ret = ff_intel_h263_decode_picture_header(s);"
    },
    {
        "line": 37,
        "fullcodeline": "return AVERROR(ENOSYS);"
    },
    {
        "line": 83,
        "fullcodeline": "ff_mpeg4_decode_picture_header(avctx->priv_data, &gb);"
    },
    {
        "line": 88,
        "fullcodeline": "} else if (CONFIG_FLV_DECODER && s->h263_flv) {"
    },
    {
        "line": 89,
        "fullcodeline": "ret = ff_flv_decode_picture_header(s);"
    },
    {
        "line": 91,
        "fullcodeline": "ret = ff_h263_decode_picture_header(s);"
    }
]