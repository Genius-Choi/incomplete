[
    {
        "line": 30,
        "fullcodeline": "gboolean content3D = FALSE;"
    },
    {
        "line": 36,
        "fullcodeline": "} stereoscopic_layout_map[] = {"
    },
    {
        "line": 44,
        "fullcodeline": "GST_INFO_OBJECT (demux, \"object is an extended content description\");"
    },
    {
        "line": 46,
        "fullcodeline": "taglist = gst_tag_list_new_empty ();"
    },
    {
        "line": 52,
        "fullcodeline": "blockcount = gst_asf_demux_get_uint16 (&data, &size);"
    },
    {
        "line": 254,
        "fullcodeline": "gst_asf_demux_add_global_tags (demux, taglist);"
    },
    {
        "line": 49,
        "fullcodeline": "if (size < 2)"
    },
    {
        "line": 54,
        "fullcodeline": "for (i = 1; i <= blockcount; ++i) {"
    },
    {
        "line": 37,
        "fullcodeline": "{"
    },
    {
        "line": 38,
        "fullcodeline": "\"SideBySideRF\", GST_ASF_3D_SIDE_BY_SIDE_HALF_RL}, {"
    },
    {
        "line": 39,
        "fullcodeline": "\"SideBySideLF\", GST_ASF_3D_SIDE_BY_SIDE_HALF_LR}, {"
    },
    {
        "line": 40,
        "fullcodeline": "\"OverUnderRT\", GST_ASF_3D_TOP_AND_BOTTOM_HALF_RL}, {"
    },
    {
        "line": 41,
        "fullcodeline": "\"OverUnderLT\", GST_ASF_3D_TOP_AND_BOTTOM_HALF_LR}, {"
    },
    {
        "line": 59,
        "fullcodeline": "GValue tag_value = { 0, };"
    },
    {
        "line": 62,
        "fullcodeline": "gchar *name_utf8 = NULL;"
    },
    {
        "line": 74,
        "fullcodeline": "datatype = gst_asf_demux_get_uint16 (&data, &size);"
    },
    {
        "line": 82,
        "fullcodeline": "name_utf8 ="
    },
    {
        "line": 249,
        "fullcodeline": "g_free (name);"
    },
    {
        "line": 250,
        "fullcodeline": "g_free (value);"
    },
    {
        "line": 251,
        "fullcodeline": "g_free (name_utf8);"
    },
    {
        "line": 66,
        "fullcodeline": "if (!gst_asf_demux_get_string (&name, &name_len, &data, &size))"
    },
    {
        "line": 69,
        "fullcodeline": "if (size < 2) {"
    },
    {
        "line": 77,
        "fullcodeline": "if (!gst_asf_demux_get_string (&value, &value_len, &data, &size)) {"
    },
    {
        "line": 83,
        "fullcodeline": "g_convert (name, name_len, \"UTF-8\", \"UTF-16LE\", &in, &out, NULL);"
    },
    {
        "line": 85,
        "fullcodeline": "if (name_utf8 != NULL) {"
    },
    {
        "line": 86,
        "fullcodeline": "GST_DEBUG (\"Found tag/metadata %s\", name_utf8);"
    },
    {
        "line": 88,
        "fullcodeline": "gst_tag_name = gst_asf_demux_get_gst_tag_from_tag_name (name_utf8);"
    },
    {
        "line": 89,
        "fullcodeline": "GST_DEBUG (\"gst_tag_name %s\", GST_STR_NULL (gst_tag_name));"
    },
    {
        "line": 225,
        "fullcodeline": "if (G_IS_VALUE (&tag_value)) {"
    },
    {
        "line": 245,
        "fullcodeline": "g_value_unset (&tag_value);"
    },
    {
        "line": 95,
        "fullcodeline": "value_utf8 = g_convert (value, value_len, \"UTF-8\", \"UTF-16LE\","
    },
    {
        "line": 174,
        "fullcodeline": "g_free (value_utf8);"
    },
    {
        "line": 191,
        "fullcodeline": "guint uint_val = GST_READ_UINT32_LE (value);"
    },
    {
        "line": 194,
        "fullcodeline": "g_value_init (&tag_value, G_TYPE_UINT);"
    },
    {
        "line": 200,
        "fullcodeline": "g_value_set_uint (&tag_value, uint_val);"
    },
    {
        "line": 205,
        "fullcodeline": "gboolean bool_val = GST_READ_UINT32_LE (value);"
    },
    {
        "line": 220,
        "fullcodeline": "GST_DEBUG (\"Skipping tag %s of type %d\", gst_tag_name, datatype);"
    },
    {
        "line": 99,
        "fullcodeline": "if (value_utf8 != NULL && *value_utf8 != '\\0') {"
    },
    {
        "line": 197,
        "fullcodeline": "if (!strcmp (name_utf8, \"WM/Track\"))"
    },
    {
        "line": 207,
        "fullcodeline": "if (strncmp (\"Stereoscopic\", name_utf8, strlen (name_utf8)) == 0) {"
    },
    {
        "line": 227,
        "fullcodeline": "GstTagMergeMode merge_mode = GST_TAG_MERGE_APPEND;"
    },
    {
        "line": 237,
        "fullcodeline": "gst_tag_list_add_values (taglist, merge_mode, gst_tag_name,"
    },
    {
        "line": 100,
        "fullcodeline": "GST_DEBUG (\"string value %s\", value_utf8);"
    },
    {
        "line": 102,
        "fullcodeline": "value_utf8[out] = '\\0';"
    },
    {
        "line": 198,
        "fullcodeline": "++uint_val;"
    },
    {
        "line": 234,
        "fullcodeline": "if (strcmp (name_utf8, \"WM/TrackNumber\") == 0)"
    },
    {
        "line": 240,
        "fullcodeline": "GST_DEBUG (\"Setting global metadata %s\", name_utf8);"
    },
    {
        "line": 241,
        "fullcodeline": "gst_structure_set_value (demux->global_metadata, name_utf8,"
    },
    {
        "line": 104,
        "fullcodeline": "if (gst_tag_name != NULL) {"
    },
    {
        "line": 179,
        "fullcodeline": "if (!g_str_equal (gst_tag_name, GST_TAG_IMAGE)) {"
    },
    {
        "line": 235,
        "fullcodeline": "merge_mode = GST_TAG_MERGE_REPLACE;"
    },
    {
        "line": 168,
        "fullcodeline": "} else if (value_utf8 == NULL) {"
    },
    {
        "line": 180,
        "fullcodeline": "GST_FIXME (\"Unhandled byte array tag %s\","
    },
    {
        "line": 209,
        "fullcodeline": "GST_INFO_OBJECT (demux, \"This is 3D contents\");"
    },
    {
        "line": 210,
        "fullcodeline": "content3D = TRUE;"
    },
    {
        "line": 105,
        "fullcodeline": "if (strcmp (gst_tag_name, GST_TAG_DATE_TIME) == 0) {"
    },
    {
        "line": 144,
        "fullcodeline": "GST_DEBUG (\"Setting metadata\");"
    },
    {
        "line": 145,
        "fullcodeline": "g_value_init (&tag_value, G_TYPE_STRING);"
    },
    {
        "line": 146,
        "fullcodeline": "g_value_set_string (&tag_value, value_utf8);"
    },
    {
        "line": 169,
        "fullcodeline": "GST_WARNING (\"Failed to convert string value to UTF8, skipping\");"
    },
    {
        "line": 181,
        "fullcodeline": "GST_STR_NULL (gst_tag_name));"
    },
    {
        "line": 184,
        "fullcodeline": "asf_demux_parse_picture_tag (taglist, (guint8 *) value,"
    },
    {
        "line": 212,
        "fullcodeline": "GST_INFO_OBJECT (demux, \"This is not 3D contenst\");"
    },
    {
        "line": 213,
        "fullcodeline": "content3D = FALSE;"
    },
    {
        "line": 106,
        "fullcodeline": "guint year = atoi (value_utf8);"
    },
    {
        "line": 171,
        "fullcodeline": "GST_DEBUG (\"Skipping empty string value for %s\","
    },
    {
        "line": 108,
        "fullcodeline": "if (year > 0) {"
    },
    {
        "line": 162,
        "fullcodeline": "GST_INFO_OBJECT (demux, \"3d type is %u\", demux->asf_3D_mode);"
    },
    {
        "line": 172,
        "fullcodeline": "GST_STR_NULL (gst_tag_name));"
    },
    {
        "line": 109,
        "fullcodeline": "g_value_init (&tag_value, GST_TYPE_DATE_TIME);"
    },
    {
        "line": 110,
        "fullcodeline": "g_value_take_boxed (&tag_value, gst_date_time_new_y (year));"
    },
    {
        "line": 112,
        "fullcodeline": "} else if (strcmp (gst_tag_name, GST_TAG_GENRE) == 0) {"
    },
    {
        "line": 151,
        "fullcodeline": "if (strncmp (\"StereoscopicLayout\", name_utf8,"
    },
    {
        "line": 164,
        "fullcodeline": "demux->asf_3D_mode = GST_ASF_3D_NONE;"
    },
    {
        "line": 165,
        "fullcodeline": "GST_INFO_OBJECT (demux, \"None 3d type\");"
    },
    {
        "line": 116,
        "fullcodeline": "if (sscanf (value_utf8, \"(%u)\", &id3v1_genre_id) == 1 &&"
    },
    {
        "line": 126,
        "fullcodeline": "tag_type = gst_tag_get_type (gst_tag_name);"
    },
    {
        "line": 127,
        "fullcodeline": "g_value_init (&tag_value, tag_type);"
    },
    {
        "line": 152,
        "fullcodeline": "strlen (name_utf8)) == 0) {"
    },
    {
        "line": 153,
        "fullcodeline": "for (i = 0; i < G_N_ELEMENTS (stereoscopic_layout_map); i++) {"
    },
    {
        "line": 117,
        "fullcodeline": "((genre_str = gst_tag_id3_genre_get (id3v1_genre_id)))) {"
    },
    {
        "line": 118,
        "fullcodeline": "GST_DEBUG (\"Genre: %s -> %s\", value_utf8, genre_str);"
    },
    {
        "line": 120,
        "fullcodeline": "value_utf8 = g_strdup (genre_str);"
    },
    {
        "line": 128,
        "fullcodeline": "if (!gst_value_deserialize (&tag_value, value_utf8)) {"
    },
    {
        "line": 129,
        "fullcodeline": "GValue from_val = { 0, };"
    },
    {
        "line": 131,
        "fullcodeline": "g_value_init (&from_val, G_TYPE_STRING);"
    },
    {
        "line": 132,
        "fullcodeline": "g_value_set_string (&from_val, value_utf8);"
    },
    {
        "line": 139,
        "fullcodeline": "g_value_unset (&from_val);"
    },
    {
        "line": 154,
        "fullcodeline": "if (g_str_equal (stereoscopic_layout_map[i].interleave_name,"
    },
    {
        "line": 133,
        "fullcodeline": "if (!g_value_transform (&from_val, &tag_value)) {"
    },
    {
        "line": 156,
        "fullcodeline": "demux->asf_3D_mode ="
    },
    {
        "line": 158,
        "fullcodeline": "GST_INFO (\"find interleave type %u\", demux->asf_3D_mode);"
    },
    {
        "line": 134,
        "fullcodeline": "GST_WARNING_OBJECT (demux,"
    },
    {
        "line": 137,
        "fullcodeline": "g_value_unset (&tag_value);"
    },
    {
        "line": 136,
        "fullcodeline": "gst_tag_name, g_type_name (tag_type));"
    }
]