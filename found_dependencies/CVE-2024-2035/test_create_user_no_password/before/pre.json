[
    {
        "line": 3,
        "fullcodeline": "client = Client()"
    },
    {
        "line": 4,
        "fullcodeline": "store = client.zen_store"
    },
    {
        "line": 6,
        "fullcodeline": "if store.type == StoreType.SQL:"
    },
    {
        "line": 9,
        "fullcodeline": "with UserContext(inactive=True) as user:"
    },
    {
        "line": 7,
        "fullcodeline": "pytest.skip(\"SQL Zen Stores do not support user activation\")"
    },
    {
        "line": 10,
        "fullcodeline": "assert not user.active"
    },
    {
        "line": 11,
        "fullcodeline": "assert user.activation_token is not None"
    },
    {
        "line": 31,
        "fullcodeline": "response_body = store.put("
    },
    {
        "line": 37,
        "fullcodeline": "activated_user = UserResponse.parse_obj(response_body)"
    },
    {
        "line": 38,
        "fullcodeline": "assert activated_user.active"
    },
    {
        "line": 39,
        "fullcodeline": "assert activated_user.name == user.name"
    },
    {
        "line": 40,
        "fullcodeline": "assert activated_user.id == user.id"
    },
    {
        "line": 13,
        "fullcodeline": "with pytest.raises(AuthorizationException):"
    },
    {
        "line": 17,
        "fullcodeline": "with pytest.raises(AuthorizationException):"
    },
    {
        "line": 21,
        "fullcodeline": "with pytest.raises(AuthorizationException):"
    },
    {
        "line": 27,
        "fullcodeline": "with pytest.raises(AuthorizationException):"
    },
    {
        "line": 42,
        "fullcodeline": "with LoginContext(user_name=user.name, password=\"password\"):"
    },
    {
        "line": 32,
        "fullcodeline": "f\"{USERS}/{str(user.id)}{ACTIVATE}\","
    },
    {
        "line": 33,
        "fullcodeline": "body=UserUpdate("
    },
    {
        "line": 22,
        "fullcodeline": "response_body = store.put("
    },
    {
        "line": 43,
        "fullcodeline": "new_store = Client().zen_store"
    },
    {
        "line": 44,
        "fullcodeline": "assert new_store.get_user().id == user.id"
    },
    {
        "line": 14,
        "fullcodeline": "with LoginContext(user_name=user.name, password=\"\"):"
    },
    {
        "line": 18,
        "fullcodeline": "with LoginContext(user_name=user.name, password=\"password\"):"
    },
    {
        "line": 28,
        "fullcodeline": "with LoginContext(user_name=user.name, password=\"password\"):"
    },
    {
        "line": 23,
        "fullcodeline": "f\"{USERS}/{str(user.id)}{ACTIVATE}\","
    },
    {
        "line": 24,
        "fullcodeline": "body=UserUpdate(password=\"password\"),"
    },
    {
        "line": 29,
        "fullcodeline": "pass"
    }
]