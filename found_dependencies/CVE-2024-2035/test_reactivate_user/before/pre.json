[
    {
        "line": 3,
        "fullcodeline": "client = Client()"
    },
    {
        "line": 4,
        "fullcodeline": "store = client.zen_store"
    },
    {
        "line": 6,
        "fullcodeline": "if store.type == StoreType.SQL:"
    },
    {
        "line": 9,
        "fullcodeline": "with UserContext(password=\"password\") as user:"
    },
    {
        "line": 7,
        "fullcodeline": "pytest.skip(\"SQL Zen Stores do not support user activation\")"
    },
    {
        "line": 10,
        "fullcodeline": "assert user.active"
    },
    {
        "line": 11,
        "fullcodeline": "assert user.activation_token is None"
    },
    {
        "line": 17,
        "fullcodeline": "response_body = store.put("
    },
    {
        "line": 20,
        "fullcodeline": "deactivated_user = UserResponse.parse_obj(response_body)"
    },
    {
        "line": 21,
        "fullcodeline": "assert not deactivated_user.active"
    },
    {
        "line": 22,
        "fullcodeline": "assert deactivated_user.activation_token is not None"
    },
    {
        "line": 42,
        "fullcodeline": "response_body = store.put("
    },
    {
        "line": 49,
        "fullcodeline": "activated_user = UserResponse.parse_obj(response_body)"
    },
    {
        "line": 50,
        "fullcodeline": "assert activated_user.active"
    },
    {
        "line": 51,
        "fullcodeline": "assert activated_user.name == user.name"
    },
    {
        "line": 52,
        "fullcodeline": "assert activated_user.id == user.id"
    },
    {
        "line": 13,
        "fullcodeline": "with LoginContext(user_name=user.name, password=\"password\"):"
    },
    {
        "line": 24,
        "fullcodeline": "with pytest.raises(AuthorizationException):"
    },
    {
        "line": 28,
        "fullcodeline": "with pytest.raises(AuthorizationException):"
    },
    {
        "line": 34,
        "fullcodeline": "with pytest.raises(AuthorizationException):"
    },
    {
        "line": 38,
        "fullcodeline": "with pytest.raises(AuthorizationException):"
    },
    {
        "line": 54,
        "fullcodeline": "with pytest.raises(AuthorizationException):"
    },
    {
        "line": 58,
        "fullcodeline": "with LoginContext(user_name=user.name, password=\"newpassword\"):"
    },
    {
        "line": 18,
        "fullcodeline": "f\"{USERS}/{str(user.id)}{DEACTIVATE}\","
    },
    {
        "line": 43,
        "fullcodeline": "f\"{USERS}/{str(user.id)}{ACTIVATE}\","
    },
    {
        "line": 44,
        "fullcodeline": "body=UserUpdate("
    },
    {
        "line": 14,
        "fullcodeline": "new_store = Client().zen_store"
    },
    {
        "line": 29,
        "fullcodeline": "response_body = store.put("
    },
    {
        "line": 59,
        "fullcodeline": "new_store = Client().zen_store"
    },
    {
        "line": 60,
        "fullcodeline": "assert new_store.get_user().id == user.id"
    },
    {
        "line": 15,
        "fullcodeline": "assert new_store.get_user().id == user.id"
    },
    {
        "line": 25,
        "fullcodeline": "with LoginContext(user_name=user.name, password=\"password\"):"
    },
    {
        "line": 35,
        "fullcodeline": "with LoginContext(user_name=user.name, password=\"password\"):"
    },
    {
        "line": 39,
        "fullcodeline": "with LoginContext(user_name=user.name, password=\"newpassword\"):"
    },
    {
        "line": 55,
        "fullcodeline": "with LoginContext(user_name=user.name, password=\"password\"):"
    },
    {
        "line": 30,
        "fullcodeline": "f\"{USERS}/{str(user.id)}{ACTIVATE}\","
    },
    {
        "line": 31,
        "fullcodeline": "body=UserUpdate(password=\"newpassword\"),"
    },
    {
        "line": 56,
        "fullcodeline": "pass"
    }
]