[
    {
        "line": 57,
        "fullcodeline": "jng_alpha_compression_method=0;"
    },
    {
        "line": 58,
        "fullcodeline": "jng_alpha_sample_depth=8;"
    },
    {
        "line": 59,
        "fullcodeline": "jng_color_type=0;"
    },
    {
        "line": 60,
        "fullcodeline": "jng_height=0;"
    },
    {
        "line": 61,
        "fullcodeline": "jng_width=0;"
    },
    {
        "line": 62,
        "fullcodeline": "alpha_image=(Image *) NULL;"
    },
    {
        "line": 63,
        "fullcodeline": "color_image=(Image *) NULL;"
    },
    {
        "line": 64,
        "fullcodeline": "alpha_image_info=(ImageInfo *) NULL;"
    },
    {
        "line": 65,
        "fullcodeline": "color_image_info=(ImageInfo *) NULL;"
    },
    {
        "line": 67,
        "fullcodeline": "logging=LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 70,
        "fullcodeline": "image=mng_info->image;"
    },
    {
        "line": 88,
        "fullcodeline": "mng_info->image=image;"
    },
    {
        "line": 94,
        "fullcodeline": "read_JSEP=MagickFalse;"
    },
    {
        "line": 95,
        "fullcodeline": "reading_idat=MagickFalse;"
    },
    {
        "line": 562,
        "fullcodeline": "(void) SeekBlob(color_image,0,SEEK_SET);"
    },
    {
        "line": 568,
        "fullcodeline": "assert(color_image_info != (ImageInfo *) NULL);"
    },
    {
        "line": 569,
        "fullcodeline": "(void) FormatLocaleString(color_image_info->filename,MagickPathExtent,\"%s\","
    },
    {
        "line": 572,
        "fullcodeline": "color_image_info->ping=MagickFalse;   /* To do: avoid this */"
    },
    {
        "line": 573,
        "fullcodeline": "jng_image=ReadImage(color_image_info,exception);"
    },
    {
        "line": 575,
        "fullcodeline": "(void) RelinquishUniqueFileResource(color_image->filename);"
    },
    {
        "line": 576,
        "fullcodeline": "color_image=DestroyImage(color_image);"
    },
    {
        "line": 577,
        "fullcodeline": "color_image_info=DestroyImageInfo(color_image_info);"
    },
    {
        "line": 586,
        "fullcodeline": "image->rows=jng_height;"
    },
    {
        "line": 587,
        "fullcodeline": "image->columns=jng_width;"
    },
    {
        "line": 589,
        "fullcodeline": "status=SetImageExtent(image,image->columns,image->rows,exception);"
    },
    {
        "line": 610,
        "fullcodeline": "jng_image=DestroyImage(jng_image);"
    },
    {
        "line": 699,
        "fullcodeline": "mng_info->image_found++;"
    },
    {
        "line": 700,
        "fullcodeline": "status=SetImageProgress(image,LoadImagesTag,2*TellBlob(image),"
    },
    {
        "line": 72,
        "fullcodeline": "if (GetAuthenticPixelQueue(image) != (Quantum *) NULL)"
    },
    {
        "line": 549,
        "fullcodeline": "if (color_image_info == (ImageInfo *) NULL)"
    },
    {
        "line": 556,
        "fullcodeline": "if (color_image == (Image *) NULL)"
    },
    {
        "line": 564,
        "fullcodeline": "if (logging != MagickFalse)"
    },
    {
        "line": 579,
        "fullcodeline": "if (jng_image == (Image *) NULL)"
    },
    {
        "line": 582,
        "fullcodeline": "if (logging != MagickFalse)"
    },
    {
        "line": 590,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 593,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 612,
        "fullcodeline": "if (image_info->ping == MagickFalse)"
    },
    {
        "line": 676,
        "fullcodeline": "if (mng_info->mng_type == 0)"
    },
    {
        "line": 682,
        "fullcodeline": "if (image->page.width == 0 && image->page.height == 0)"
    },
    {
        "line": 688,
        "fullcodeline": "if (image->page.x == 0 && image->page.y == 0)"
    },
    {
        "line": 703,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 706,
        "fullcodeline": "if (logging != MagickFalse)"
    },
    {
        "line": 81,
        "fullcodeline": "AcquireNextImage(image_info,image,exception);"
    },
    {
        "line": 86,
        "fullcodeline": "image=SyncNextImageInList(image);"
    },
    {
        "line": 99,
        "fullcodeline": "type[MagickPathExtent];"
    },
    {
        "line": 110,
        "fullcodeline": "status=SetImageProgress(image,LoadImagesTag,TellBlob(image),"
    },
    {
        "line": 116,
        "fullcodeline": "type[0]='\\0';"
    },
    {
        "line": 117,
        "fullcodeline": "(void) ConcatenateMagickString(type,\"errr\",MagickPathExtent);"
    },
    {
        "line": 118,
        "fullcodeline": "length=ReadBlobMSBLong(image);"
    },
    {
        "line": 119,
        "fullcodeline": "count=(unsigned int) ReadBlob(image,4,(unsigned char *) type);"
    },
    {
        "line": 135,
        "fullcodeline": "p=NULL;"
    },
    {
        "line": 136,
        "fullcodeline": "chunk=(unsigned char *) NULL;"
    },
    {
        "line": 162,
        "fullcodeline": "(void) ReadBlobMSBLong(image);  /* read crc word */"
    },
    {
        "line": 551,
        "fullcodeline": "assert(color_image == (Image *) NULL);"
    },
    {
        "line": 552,
        "fullcodeline": "assert(alpha_image == (Image *) NULL);"
    },
    {
        "line": 558,
        "fullcodeline": "assert(alpha_image == (Image *) NULL);"
    },
    {
        "line": 565,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 583,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 595,
        "fullcodeline": "s=GetVirtualPixels(jng_image,0,y,image->columns,1,exception);"
    },
    {
        "line": 596,
        "fullcodeline": "q=GetAuthenticPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 678,
        "fullcodeline": "mng_info->mng_width=jng_width;"
    },
    {
        "line": 679,
        "fullcodeline": "mng_info->mng_height=jng_height;"
    },
    {
        "line": 684,
        "fullcodeline": "image->page.width=jng_width;"
    },
    {
        "line": 685,
        "fullcodeline": "image->page.height=jng_height;"
    },
    {
        "line": 701,
        "fullcodeline": "2*GetBlobSize(image));"
    },
    {
        "line": 707,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 77,
        "fullcodeline": "if (logging != MagickFalse)"
    },
    {
        "line": 83,
        "fullcodeline": "if (GetNextImageInList(image) == (Image *) NULL)"
    },
    {
        "line": 113,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 121,
        "fullcodeline": "if (logging != MagickFalse)"
    },
    {
        "line": 126,
        "fullcodeline": "if (length > PNG_UINT_31_MAX || count == 0)"
    },
    {
        "line": 138,
        "fullcodeline": "if (length != 0)"
    },
    {
        "line": 164,
        "fullcodeline": "if (memcmp(type,mng_JHDR,4) == 0)"
    },
    {
        "line": 221,
        "fullcodeline": "if ((reading_idat == MagickFalse) && (read_JSEP == MagickFalse) &&"
    },
    {
        "line": 325,
        "fullcodeline": "if (memcmp(type,mng_JDAT,4) == 0)"
    },
    {
        "line": 342,
        "fullcodeline": "if (memcmp(type,mng_IDAT,4) == 0)"
    },
    {
        "line": 370,
        "fullcodeline": "if ((memcmp(type,mng_JDAA,4) == 0) || (memcmp(type,mng_JdAA,4) == 0))"
    },
    {
        "line": 389,
        "fullcodeline": "if (memcmp(type,mng_JSEP,4) == 0)"
    },
    {
        "line": 399,
        "fullcodeline": "if (memcmp(type,mng_bKGD,4) == 0)"
    },
    {
        "line": 419,
        "fullcodeline": "if (memcmp(type,mng_gAMA,4) == 0)"
    },
    {
        "line": 428,
        "fullcodeline": "if (memcmp(type,mng_cHRM,4) == 0)"
    },
    {
        "line": 446,
        "fullcodeline": "if (memcmp(type,mng_sRGB,4) == 0)"
    },
    {
        "line": 467,
        "fullcodeline": "if (memcmp(type,mng_oFFs,4) == 0)"
    },
    {
        "line": 487,
        "fullcodeline": "if (memcmp(type,mng_pHYs,4) == 0)"
    },
    {
        "line": 516,
        "fullcodeline": "if (length != 0)"
    },
    {
        "line": 519,
        "fullcodeline": "if (memcmp(type,mng_IEND,4))"
    },
    {
        "line": 553,
        "fullcodeline": "return(DestroyImageList(image));"
    },
    {
        "line": 559,
        "fullcodeline": "return(DestroyImageList(image));"
    },
    {
        "line": 580,
        "fullcodeline": "return(DestroyImageList(image));"
    },
    {
        "line": 591,
        "fullcodeline": "return(DestroyImageList(image));"
    },
    {
        "line": 597,
        "fullcodeline": "for (x=(ssize_t) image->columns; x != 0; x--)"
    },
    {
        "line": 606,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 614,
        "fullcodeline": "if (jng_color_type >= 12)"
    },
    {
        "line": 704,
        "fullcodeline": "return(DestroyImageList(image));"
    },
    {
        "line": 78,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 111,
        "fullcodeline": "2*GetBlobSize(image));"
    },
    {
        "line": 122,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 132,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"CorruptImage\");"
    },
    {
        "line": 142,
        "fullcodeline": "chunk=(unsigned char *) AcquireQuantumMemory(length+MagickPathExtent,"
    },
    {
        "line": 159,
        "fullcodeline": "p=chunk;"
    },
    {
        "line": 222,
        "fullcodeline": "((memcmp(type,mng_JDAT,4) == 0) || (memcmp(type,mng_JdAA,4) == 0) ||"
    },
    {
        "line": 237,
        "fullcodeline": "GetImageInfo(color_image_info);"
    },
    {
        "line": 238,
        "fullcodeline": "color_image=AcquireImage(color_image_info,exception);"
    },
    {
        "line": 247,
        "fullcodeline": "(void) AcquireUniqueFilename(color_image->filename);"
    },
    {
        "line": 248,
        "fullcodeline": "status=OpenBlob(color_image_info,color_image,WriteBinaryBlobMode,"
    },
    {
        "line": 322,
        "fullcodeline": "reading_idat=MagickTrue;"
    },
    {
        "line": 345,
        "fullcodeline": "data[5];"
    },
    {
        "line": 391,
        "fullcodeline": "read_JSEP=MagickTrue;"
    },
    {
        "line": 415,
        "fullcodeline": "chunk=(unsigned char *) RelinquishMagickMemory(chunk);"
    },
    {
        "line": 424,
        "fullcodeline": "chunk=(unsigned char *) RelinquishMagickMemory(chunk);"
    },
    {
        "line": 442,
        "fullcodeline": "chunk=(unsigned char *) RelinquishMagickMemory(chunk);"
    },
    {
        "line": 463,
        "fullcodeline": "chunk=(unsigned char *) RelinquishMagickMemory(chunk);"
    },
    {
        "line": 501,
        "fullcodeline": "chunk=(unsigned char *) RelinquishMagickMemory(chunk);"
    },
    {
        "line": 517,
        "fullcodeline": "chunk=(unsigned char *) RelinquishMagickMemory(chunk);"
    },
    {
        "line": 599,
        "fullcodeline": "SetPixelRed(image,GetPixelRed(jng_image,s),q);"
    },
    {
        "line": 600,
        "fullcodeline": "SetPixelGreen(image,GetPixelGreen(jng_image,s),q);"
    },
    {
        "line": 601,
        "fullcodeline": "SetPixelBlue(image,GetPixelBlue(jng_image,s),q);"
    },
    {
        "line": 602,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 603,
        "fullcodeline": "s+=GetPixelChannels(jng_image);"
    },
    {
        "line": 627,
        "fullcodeline": "(void) CloseBlob(alpha_image);"
    },
    {
        "line": 633,
        "fullcodeline": "(void) FormatLocaleString(alpha_image_info->filename,MagickPathExtent,"
    },
    {
        "line": 636,
        "fullcodeline": "jng_image=ReadImage(alpha_image_info,exception);"
    },
    {
        "line": 666,
        "fullcodeline": "(void) RelinquishUniqueFileResource(alpha_image->filename);"
    },
    {
        "line": 667,
        "fullcodeline": "alpha_image=DestroyImage(alpha_image);"
    },
    {
        "line": 668,
        "fullcodeline": "alpha_image_info=DestroyImageInfo(alpha_image_info);"
    },
    {
        "line": 84,
        "fullcodeline": "return(DestroyImageList(image));"
    },
    {
        "line": 128,
        "fullcodeline": "if (color_image != (Image *) NULL)"
    },
    {
        "line": 130,
        "fullcodeline": "if (color_image_info != (Image *) NULL)"
    },
    {
        "line": 140,
        "fullcodeline": "if (length > GetBlobSize(image))"
    },
    {
        "line": 145,
        "fullcodeline": "if (chunk == (unsigned char *) NULL)"
    },
    {
        "line": 148,
        "fullcodeline": "for (i=0; i < (ssize_t) length; i++)"
    },
    {
        "line": 166,
        "fullcodeline": "if (length == 16)"
    },
    {
        "line": 214,
        "fullcodeline": "if (length != 0)"
    },
    {
        "line": 223,
        "fullcodeline": "(memcmp(type,mng_IDAT,4) == 0) || (memcmp(type,mng_JDAA,4) == 0)))"
    },
    {
        "line": 234,
        "fullcodeline": "if (color_image_info == (ImageInfo *) NULL)"
    },
    {
        "line": 240,
        "fullcodeline": "if (color_image == (Image *) NULL)"
    },
    {
        "line": 243,
        "fullcodeline": "if (logging != MagickFalse)"
    },
    {
        "line": 251,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 257,
        "fullcodeline": "if ((image_info->ping == MagickFalse) && (jng_color_type >= 12))"
    },
    {
        "line": 329,
        "fullcodeline": "if (logging != MagickFalse)"
    },
    {
        "line": 333,
        "fullcodeline": "if (length != 0)"
    },
    {
        "line": 349,
        "fullcodeline": "if (alpha_image != NULL && image_info->ping == MagickFalse)"
    },
    {
        "line": 364,
        "fullcodeline": "if (length != 0)"
    },
    {
        "line": 374,
        "fullcodeline": "if (alpha_image != NULL && image_info->ping == MagickFalse)"
    },
    {
        "line": 383,
        "fullcodeline": "if (length != 0)"
    },
    {
        "line": 393,
        "fullcodeline": "if (length != 0)"
    },
    {
        "line": 401,
        "fullcodeline": "if (length == 2)"
    },
    {
        "line": 408,
        "fullcodeline": "if (length == 6)"
    },
    {
        "line": 421,
        "fullcodeline": "if (length == 4)"
    },
    {
        "line": 430,
        "fullcodeline": "if (length == 32)"
    },
    {
        "line": 448,
        "fullcodeline": "if (length == 1)"
    },
    {
        "line": 469,
        "fullcodeline": "if (length > 8)"
    },
    {
        "line": 481,
        "fullcodeline": "if (length != 0)"
    },
    {
        "line": 489,
        "fullcodeline": "if (length > 8)"
    },
    {
        "line": 616,
        "fullcodeline": "if (jng_alpha_compression_method == 0)"
    },
    {
        "line": 629,
        "fullcodeline": "if (logging != MagickFalse)"
    },
    {
        "line": 638,
        "fullcodeline": "if (jng_image != (Image *) NULL)"
    },
    {
        "line": 669,
        "fullcodeline": "if (jng_image != (Image *) NULL)"
    },
    {
        "line": 124,
        "fullcodeline": "type[0],type[1],type[2],type[3],(double) length);"
    },
    {
        "line": 129,
        "fullcodeline": "color_image=DestroyImage(color_image);"
    },
    {
        "line": 131,
        "fullcodeline": "color_image_info=DestroyImageInfo(color_image_info);"
    },
    {
        "line": 141,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"InsufficientImageDataInFile\");"
    },
    {
        "line": 146,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 153,
        "fullcodeline": "c=ReadBlobByte(image);"
    },
    {
        "line": 156,
        "fullcodeline": "chunk[i]=(unsigned char) c;"
    },
    {
        "line": 168,
        "fullcodeline": "jng_width=(size_t) ((p[0] << 24) | (p[1] << 16) |"
    },
    {
        "line": 170,
        "fullcodeline": "jng_height=(size_t) ((p[4] << 24) | (p[5] << 16) |"
    },
    {
        "line": 175,
        "fullcodeline": "jng_color_type=p[8];"
    },
    {
        "line": 176,
        "fullcodeline": "jng_image_sample_depth=p[9];"
    },
    {
        "line": 177,
        "fullcodeline": "jng_image_compression_method=p[10];"
    },
    {
        "line": 178,
        "fullcodeline": "jng_image_interlace_method=p[11];"
    },
    {
        "line": 180,
        "fullcodeline": "image->interlace=jng_image_interlace_method != 0 ? PNGInterlace :"
    },
    {
        "line": 183,
        "fullcodeline": "jng_alpha_sample_depth=p[12];"
    },
    {
        "line": 184,
        "fullcodeline": "jng_alpha_compression_method=p[13];"
    },
    {
        "line": 185,
        "fullcodeline": "jng_alpha_filter_method=p[14];"
    },
    {
        "line": 186,
        "fullcodeline": "jng_alpha_interlace_method=p[15];"
    },
    {
        "line": 215,
        "fullcodeline": "chunk=(unsigned char *) RelinquishMagickMemory(chunk);"
    },
    {
        "line": 235,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 241,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 244,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 253,
        "fullcodeline": "color_image=DestroyImage(color_image);"
    },
    {
        "line": 269,
        "fullcodeline": "GetImageInfo(alpha_image_info);"
    },
    {
        "line": 270,
        "fullcodeline": "alpha_image=AcquireImage(alpha_image_info,exception);"
    },
    {
        "line": 284,
        "fullcodeline": "(void) AcquireUniqueFilename(alpha_image->filename);"
    },
    {
        "line": 285,
        "fullcodeline": "status=OpenBlob(alpha_image_info,alpha_image,WriteBinaryBlobMode,"
    },
    {
        "line": 330,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 335,
        "fullcodeline": "(void) WriteBlob(color_image,length,chunk);"
    },
    {
        "line": 336,
        "fullcodeline": "chunk=(unsigned char *) RelinquishMagickMemory(chunk);"
    },
    {
        "line": 355,
        "fullcodeline": "(void) WriteBlobMSBULong(alpha_image,(size_t) length);"
    },
    {
        "line": 356,
        "fullcodeline": "PNGType(data,mng_IDAT);"
    },
    {
        "line": 357,
        "fullcodeline": "LogPNGChunk(logging,mng_IDAT,length);"
    },
    {
        "line": 358,
        "fullcodeline": "(void) WriteBlob(alpha_image,4,data);"
    },
    {
        "line": 359,
        "fullcodeline": "(void) WriteBlob(alpha_image,length,chunk);"
    },
    {
        "line": 360,
        "fullcodeline": "(void) WriteBlobMSBULong(alpha_image,"
    },
    {
        "line": 365,
        "fullcodeline": "chunk=(unsigned char *) RelinquishMagickMemory(chunk);"
    },
    {
        "line": 380,
        "fullcodeline": "(void) WriteBlob(alpha_image,length,chunk);"
    },
    {
        "line": 384,
        "fullcodeline": "chunk=(unsigned char *) RelinquishMagickMemory(chunk);"
    },
    {
        "line": 394,
        "fullcodeline": "chunk=(unsigned char *) RelinquishMagickMemory(chunk);"
    },
    {
        "line": 403,
        "fullcodeline": "image->background_color.red=ScaleCharToQuantum(p[1]);"
    },
    {
        "line": 404,
        "fullcodeline": "image->background_color.green=image->background_color.red;"
    },
    {
        "line": 405,
        "fullcodeline": "image->background_color.blue=image->background_color.red;"
    },
    {
        "line": 410,
        "fullcodeline": "image->background_color.red=ScaleCharToQuantum(p[1]);"
    },
    {
        "line": 411,
        "fullcodeline": "image->background_color.green=ScaleCharToQuantum(p[3]);"
    },
    {
        "line": 412,
        "fullcodeline": "image->background_color.blue=ScaleCharToQuantum(p[5]);"
    },
    {
        "line": 422,
        "fullcodeline": "image->gamma=((float) mng_get_long(p))*0.00001;"
    },
    {
        "line": 432,
        "fullcodeline": "image->chromaticity.white_point.x=0.00001*mng_get_long(p);"
    },
    {
        "line": 433,
        "fullcodeline": "image->chromaticity.white_point.y=0.00001*mng_get_long(&p[4]);"
    },
    {
        "line": 434,
        "fullcodeline": "image->chromaticity.red_primary.x=0.00001*mng_get_long(&p[8]);"
    },
    {
        "line": 435,
        "fullcodeline": "image->chromaticity.red_primary.y=0.00001*mng_get_long(&p[12]);"
    },
    {
        "line": 436,
        "fullcodeline": "image->chromaticity.green_primary.x=0.00001*mng_get_long(&p[16]);"
    },
    {
        "line": 437,
        "fullcodeline": "image->chromaticity.green_primary.y=0.00001*mng_get_long(&p[20]);"
    },
    {
        "line": 438,
        "fullcodeline": "image->chromaticity.blue_primary.x=0.00001*mng_get_long(&p[24]);"
    },
    {
        "line": 439,
        "fullcodeline": "image->chromaticity.blue_primary.y=0.00001*mng_get_long(&p[28]);"
    },
    {
        "line": 450,
        "fullcodeline": "image->rendering_intent="
    },
    {
        "line": 452,
        "fullcodeline": "image->gamma=1.000f/2.200f;"
    },
    {
        "line": 453,
        "fullcodeline": "image->chromaticity.red_primary.x=0.6400f;"
    },
    {
        "line": 454,
        "fullcodeline": "image->chromaticity.red_primary.y=0.3300f;"
    },
    {
        "line": 455,
        "fullcodeline": "image->chromaticity.green_primary.x=0.3000f;"
    },
    {
        "line": 456,
        "fullcodeline": "image->chromaticity.green_primary.y=0.6000f;"
    },
    {
        "line": 457,
        "fullcodeline": "image->chromaticity.blue_primary.x=0.1500f;"
    },
    {
        "line": 458,
        "fullcodeline": "image->chromaticity.blue_primary.y=0.0600f;"
    },
    {
        "line": 459,
        "fullcodeline": "image->chromaticity.white_point.x=0.3127f;"
    },
    {
        "line": 460,
        "fullcodeline": "image->chromaticity.white_point.y=0.3290f;"
    },
    {
        "line": 471,
        "fullcodeline": "image->page.x=(ssize_t) mng_get_long(p);"
    },
    {
        "line": 472,
        "fullcodeline": "image->page.y=(ssize_t) mng_get_long(&p[4]);"
    },
    {
        "line": 482,
        "fullcodeline": "chunk=(unsigned char *) RelinquishMagickMemory(chunk);"
    },
    {
        "line": 491,
        "fullcodeline": "image->resolution.x=(double) mng_get_long(p);"
    },
    {
        "line": 492,
        "fullcodeline": "image->resolution.y=(double) mng_get_long(&p[4]);"
    },
    {
        "line": 619,
        "fullcodeline": "data[5];"
    },
    {
        "line": 620,
        "fullcodeline": "(void) WriteBlobMSBULong(alpha_image,0x00000000L);"
    },
    {
        "line": 621,
        "fullcodeline": "PNGType(data,mng_IEND);"
    },
    {
        "line": 622,
        "fullcodeline": "LogPNGChunk(logging,mng_IEND,0L);"
    },
    {
        "line": 623,
        "fullcodeline": "(void) WriteBlob(alpha_image,4,data);"
    },
    {
        "line": 624,
        "fullcodeline": "(void) WriteBlobMSBULong(alpha_image,crc32(0,data,4));"
    },
    {
        "line": 630,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 670,
        "fullcodeline": "jng_image=DestroyImage(jng_image);"
    },
    {
        "line": 154,
        "fullcodeline": "if (c == EOF)"
    },
    {
        "line": 172,
        "fullcodeline": "if ((jng_width == 0) || (jng_height == 0))"
    },
    {
        "line": 188,
        "fullcodeline": "if (logging != MagickFalse)"
    },
    {
        "line": 254,
        "fullcodeline": "return(DestroyImageList(image));"
    },
    {
        "line": 262,
        "fullcodeline": "if (alpha_image_info == (ImageInfo *) NULL)"
    },
    {
        "line": 272,
        "fullcodeline": "if (alpha_image == (Image *) NULL)"
    },
    {
        "line": 280,
        "fullcodeline": "if (logging != MagickFalse)"
    },
    {
        "line": 288,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 296,
        "fullcodeline": "if (jng_alpha_compression_method == 0)"
    },
    {
        "line": 351,
        "fullcodeline": "if (logging != MagickFalse)"
    },
    {
        "line": 376,
        "fullcodeline": "if (logging != MagickFalse)"
    },
    {
        "line": 451,
        "fullcodeline": "Magick_RenderingIntent_from_PNG_RenderingIntent(p[0]);"
    },
    {
        "line": 474,
        "fullcodeline": "if ((int) p[8] != 0)"
    },
    {
        "line": 493,
        "fullcodeline": "if ((int) p[8] == PNG_RESOLUTION_METER)"
    },
    {
        "line": 639,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 173,
        "fullcodeline": "ThrowReaderException(CorruptImageError,"
    },
    {
        "line": 190,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 198,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 204,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 264,
        "fullcodeline": "color_image=DestroyImage(color_image);"
    },
    {
        "line": 265,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,"
    },
    {
        "line": 274,
        "fullcodeline": "alpha_image_info=DestroyImageInfo(alpha_image_info);"
    },
    {
        "line": 275,
        "fullcodeline": "color_image=DestroyImage(color_image);"
    },
    {
        "line": 276,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,"
    },
    {
        "line": 281,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 290,
        "fullcodeline": "alpha_image=DestroyImage(alpha_image);"
    },
    {
        "line": 291,
        "fullcodeline": "alpha_image_info=DestroyImageInfo(alpha_image_info);"
    },
    {
        "line": 292,
        "fullcodeline": "color_image=DestroyImage(color_image);"
    },
    {
        "line": 299,
        "fullcodeline": "data[18];"
    },
    {
        "line": 305,
        "fullcodeline": "(void) WriteBlob(alpha_image,8,(const unsigned char *)"
    },
    {
        "line": 308,
        "fullcodeline": "(void) WriteBlobMSBULong(alpha_image,13L);"
    },
    {
        "line": 309,
        "fullcodeline": "PNGType(data,mng_IHDR);"
    },
    {
        "line": 310,
        "fullcodeline": "LogPNGChunk(logging,mng_IHDR,13L);"
    },
    {
        "line": 311,
        "fullcodeline": "PNGLong(data+4,jng_width);"
    },
    {
        "line": 312,
        "fullcodeline": "PNGLong(data+8,jng_height);"
    },
    {
        "line": 313,
        "fullcodeline": "data[12]=jng_alpha_sample_depth;"
    },
    {
        "line": 314,
        "fullcodeline": "data[13]=0; /* color_type gray */"
    },
    {
        "line": 315,
        "fullcodeline": "data[14]=0; /* compression method 0 */"
    },
    {
        "line": 316,
        "fullcodeline": "data[15]=0; /* filter_method 0 */"
    },
    {
        "line": 317,
        "fullcodeline": "data[16]=0; /* interlace_method 0 */"
    },
    {
        "line": 318,
        "fullcodeline": "(void) WriteBlob(alpha_image,17,data);"
    },
    {
        "line": 319,
        "fullcodeline": "(void) WriteBlobMSBULong(alpha_image,crc32(0,data,17));"
    },
    {
        "line": 352,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 361,
        "fullcodeline": "crc32(crc32(0,data,4),chunk,(uInt) length));"
    },
    {
        "line": 377,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 476,
        "fullcodeline": "image->page.x/=10000;"
    },
    {
        "line": 477,
        "fullcodeline": "image->page.y/=10000;"
    },
    {
        "line": 495,
        "fullcodeline": "image->units=PixelsPerCentimeterResolution;"
    },
    {
        "line": 496,
        "fullcodeline": "image->resolution.x=image->resolution.x/100.0f;"
    },
    {
        "line": 497,
        "fullcodeline": "image->resolution.y=image->resolution.y/100.0f;"
    },
    {
        "line": 641,
        "fullcodeline": "s=GetVirtualPixels(jng_image,0,y,image->columns,1,"
    },
    {
        "line": 643,
        "fullcodeline": "q=GetAuthenticPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 293,
        "fullcodeline": "return(DestroyImageList(image));"
    },
    {
        "line": 301,
        "fullcodeline": "if (logging != MagickFalse)"
    },
    {
        "line": 645,
        "fullcodeline": "if (image->alpha_trait != UndefinedPixelTrait)"
    },
    {
        "line": 663,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 169,
        "fullcodeline": "(p[2] << 8) | p[3]);"
    },
    {
        "line": 171,
        "fullcodeline": "(p[6] << 8) | p[7]);"
    },
    {
        "line": 194,
        "fullcodeline": "(unsigned long) jng_width, (unsigned long) jng_height,"
    },
    {
        "line": 302,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 646,
        "fullcodeline": "for (x=(ssize_t) image->columns; x != 0; x--)"
    },
    {
        "line": 648,
        "fullcodeline": "SetPixelAlpha(image,GetPixelRed(jng_image,s),q);"
    },
    {
        "line": 649,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 650,
        "fullcodeline": "s+=GetPixelChannels(jng_image);"
    },
    {
        "line": 654,
        "fullcodeline": "for (x=(ssize_t) image->columns; x != 0; x--)"
    },
    {
        "line": 656,
        "fullcodeline": "SetPixelAlpha(image,GetPixelRed(jng_image,s),q);"
    },
    {
        "line": 659,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 660,
        "fullcodeline": "s+=GetPixelChannels(jng_image);"
    },
    {
        "line": 657,
        "fullcodeline": "if (GetPixelAlpha(image,q) != OpaqueAlpha)"
    },
    {
        "line": 658,
        "fullcodeline": "image->alpha_trait=BlendPixelTrait;"
    }
]