[
    {
        "line": 3,
        "fullcodeline": "assert(op->is_type_command());"
    },
    {
        "line": 4,
        "fullcodeline": "MMonCommand *m = static_cast<MMonCommand*>(op->get_req());"
    },
    {
        "line": 11,
        "fullcodeline": "MonSession *session = static_cast<MonSession *>("
    },
    {
        "line": 28,
        "fullcodeline": "vector<string> fullcmd;"
    },
    {
        "line": 33,
        "fullcodeline": "int r = -EINVAL;"
    },
    {
        "line": 34,
        "fullcodeline": "rs = \"unrecognized command\";"
    },
    {
        "line": 45,
        "fullcodeline": "cmd_getval(g_ceph_context, cmdmap, \"prefix\", prefix);"
    },
    {
        "line": 59,
        "fullcodeline": "dout(0) << \"handle_command \" << *m << dendl;"
    },
    {
        "line": 62,
        "fullcodeline": "cmd_getval(g_ceph_context, cmdmap, \"format\", format, string(\"plain\"));"
    },
    {
        "line": 65,
        "fullcodeline": "get_str_vec(prefix, fullcmd);"
    },
    {
        "line": 66,
        "fullcodeline": "module = fullcmd[0];"
    },
    {
        "line": 71,
        "fullcodeline": "leader_cmd = _get_moncommand(prefix,"
    },
    {
        "line": 80,
        "fullcodeline": "const MonCommand *mon_cmd = _get_moncommand(prefix, mon_commands,"
    },
    {
        "line": 124,
        "fullcodeline": "string service(mon_cmd->module);"
    },
    {
        "line": 126,
        "fullcodeline": "dout(25) << __func__ << \" prefix='\" << prefix"
    },
    {
        "line": 135,
        "fullcodeline": "_generate_command_map(cmdmap, param_str_map);"
    },
    {
        "line": 5,
        "fullcodeline": "if (m->fsid != monmap->fsid) {"
    },
    {
        "line": 13,
        "fullcodeline": "if (!session) {"
    },
    {
        "line": 21,
        "fullcodeline": "if (m->cmd.empty()) {"
    },
    {
        "line": 29,
        "fullcodeline": "map<string, cmd_vartype> cmdmap;"
    },
    {
        "line": 46,
        "fullcodeline": "if (prefix == \"get_command_descriptions\") {"
    },
    {
        "line": 63,
        "fullcodeline": "boost::scoped_ptr<Formatter> f(Formatter::create(format));"
    },
    {
        "line": 75,
        "fullcodeline": "if (!leader_cmd) {"
    },
    {
        "line": 117,
        "fullcodeline": "if (session->proxy_con && mon_cmd->is_noforward()) {"
    },
    {
        "line": 131,
        "fullcodeline": "(mon_cmd->requires_perm('w') || mon_cmd->requires_perm('x'));"
    },
    {
        "line": 134,
        "fullcodeline": "map<string,string> param_str_map;"
    },
    {
        "line": 147,
        "fullcodeline": "(cmd_is_rw ? audit_clog->info() : audit_clog->debug())"
    },
    {
        "line": 156,
        "fullcodeline": "if (module == \"osd\") {"
    },
    {
        "line": 161,
        "fullcodeline": "if (module == \"pg\") {"
    },
    {
        "line": 178,
        "fullcodeline": "if (module == \"auth\") {"
    },
    {
        "line": 182,
        "fullcodeline": "if (module == \"log\") {"
    },
    {
        "line": 192,
        "fullcodeline": "if (prefix == \"fsid\") {"
    },
    {
        "line": 6,
        "fullcodeline": "dout(0) << \"handle_command on fsid \" << m->fsid << \" != \" << monmap->fsid << dendl;"
    },
    {
        "line": 7,
        "fullcodeline": "reply_command(op, -EPERM, \"wrong fsid\", 0);"
    },
    {
        "line": 12,
        "fullcodeline": "m->get_connection()->get_priv());"
    },
    {
        "line": 22,
        "fullcodeline": "string rs = \"No command supplied\";"
    },
    {
        "line": 36,
        "fullcodeline": "if (!cmdmap_from_json(m->cmd, &cmdmap, ss)) {"
    },
    {
        "line": 38,
        "fullcodeline": "r = -EINVAL;"
    },
    {
        "line": 39,
        "fullcodeline": "rs = ss.str();"
    },
    {
        "line": 48,
        "fullcodeline": "Formatter *f = Formatter::create(\"json\");"
    },
    {
        "line": 49,
        "fullcodeline": "format_command_descriptions(leader_supported_mon_commands,"
    },
    {
        "line": 81,
        "fullcodeline": "ARRAY_SIZE(mon_commands));"
    },
    {
        "line": 108,
        "fullcodeline": "if (mon_cmd->is_obsolete() ||"
    },
    {
        "line": 109,
        "fullcodeline": "(cct->_conf->mon_debug_deprecated_as_obsolete"
    },
    {
        "line": 136,
        "fullcodeline": "if (!_allowed_command(session, service, prefix, cmdmap,"
    },
    {
        "line": 152,
        "fullcodeline": "if (module == \"mds\" || module == \"fs\") {"
    },
    {
        "line": 165,
        "fullcodeline": "if (module == \"mon\" &&"
    },
    {
        "line": 174,
        "fullcodeline": "prefix != \"mon metadata\") {"
    },
    {
        "line": 188,
        "fullcodeline": "config_key_service->dispatch(op);"
    },
    {
        "line": 206,
        "fullcodeline": "if (prefix == \"scrub\" || prefix == \"mon scrub\") {"
    },
    {
        "line": 219,
        "fullcodeline": "if (prefix == \"compact\" || prefix == \"mon compact\") {"
    },
    {
        "line": 220,
        "fullcodeline": "dout(1) << \"triggering manual compaction\" << dendl;"
    },
    {
        "line": 221,
        "fullcodeline": "utime_t start = ceph_clock_now(g_ceph_context);"
    },
    {
        "line": 222,
        "fullcodeline": "store->compact();"
    },
    {
        "line": 223,
        "fullcodeline": "utime_t end = ceph_clock_now(g_ceph_context);"
    },
    {
        "line": 224,
        "fullcodeline": "end -= start;"
    },
    {
        "line": 228,
        "fullcodeline": "rs = oss.str();"
    },
    {
        "line": 229,
        "fullcodeline": "r = 0;"
    },
    {
        "line": 485,
        "fullcodeline": "if (!m->get_source().is_mon())  // don't reply to mon->mon commands"
    },
    {
        "line": 14,
        "fullcodeline": "dout(5) << __func__ << \" dropping stray message \" << *m << dendl;"
    },
    {
        "line": 23,
        "fullcodeline": "reply_command(op, -EINVAL, rs, 0);"
    },
    {
        "line": 76,
        "fullcodeline": "reply_command(op, -EINVAL, \"command not known\", 0);"
    },
    {
        "line": 83,
        "fullcodeline": "if (!mon_cmd) {"
    },
    {
        "line": 110,
        "fullcodeline": "&& mon_cmd->is_deprecated())) {"
    },
    {
        "line": 111,
        "fullcodeline": "reply_command(op, -ENOTSUP,"
    },
    {
        "line": 118,
        "fullcodeline": "dout(10) << \"Got forward for noforward command \" << m << dendl;"
    },
    {
        "line": 119,
        "fullcodeline": "reply_command(op, -EINVAL, \"forward for noforward command\", rdata, 0);"
    },
    {
        "line": 138,
        "fullcodeline": "dout(1) << __func__ << \" access denied\" << dendl;"
    },
    {
        "line": 139,
        "fullcodeline": "(cmd_is_rw ? audit_clog->info() : audit_clog->debug())"
    },
    {
        "line": 143,
        "fullcodeline": "reply_command(op, -EACCES, \"access denied\", 0);"
    },
    {
        "line": 173,
        "fullcodeline": "prefix != \"mon sync force\" &&"
    },
    {
        "line": 225,
        "fullcodeline": "dout(1) << \"finished manual compaction in \" << end << \" seconds\" << dendl;"
    },
    {
        "line": 227,
        "fullcodeline": "oss << \"compacted leveldb in \" << end;"
    },
    {
        "line": 40,
        "fullcodeline": "if (!m->get_source().is_mon())  // don't reply to mon->mon commands"
    },
    {
        "line": 172,
        "fullcodeline": "prefix != \"mon scrub\" &&"
    },
    {
        "line": 194,
        "fullcodeline": "f->open_object_section(\"fsid\");"
    },
    {
        "line": 196,
        "fullcodeline": "f->close_section();"
    },
    {
        "line": 197,
        "fullcodeline": "f->flush(rdata);"
    },
    {
        "line": 209,
        "fullcodeline": "int r = scrub_start();"
    },
    {
        "line": 231,
        "fullcodeline": "else if (prefix == \"injectargs\") {"
    },
    {
        "line": 90,
        "fullcodeline": "dout(10) << \"Command not locally supported, forwarding request \""
    },
    {
        "line": 171,
        "fullcodeline": "prefix != \"mon compact\" &&"
    },
    {
        "line": 195,
        "fullcodeline": "f->dump_stream(\"fsid\") << monmap->fsid;"
    },
    {
        "line": 199,
        "fullcodeline": "ds << monmap->fsid;"
    },
    {
        "line": 200,
        "fullcodeline": "rdata.append(ds);"
    },
    {
        "line": 232,
        "fullcodeline": "vector<string> injected_args;"
    },
    {
        "line": 233,
        "fullcodeline": "cmd_getval(g_ceph_context, cmdmap, \"injected_args\", injected_args);"
    },
    {
        "line": 85,
        "fullcodeline": "reply_command(op, -EINVAL,"
    },
    {
        "line": 94,
        "fullcodeline": "} else if (!mon_cmd->is_compat(leader_cmd)) {"
    },
    {
        "line": 234,
        "fullcodeline": "if (!injected_args.empty()) {"
    },
    {
        "line": 237,
        "fullcodeline": "r = g_conf->injectargs(str_join(injected_args, \" \"), &oss);"
    },
    {
        "line": 239,
        "fullcodeline": "rs = ss.str();"
    },
    {
        "line": 101,
        "fullcodeline": "dout(10) << \"Command not compatible with leader, forwarding request \""
    },
    {
        "line": 235,
        "fullcodeline": "dout(0) << \"parsing injected options '\" << injected_args << \"'\" << dendl;"
    },
    {
        "line": 238,
        "fullcodeline": "ss << \"injectargs:\"  << oss.str();"
    },
    {
        "line": 242,
        "fullcodeline": "rs = \"must supply options to be parsed in a single string\";"
    },
    {
        "line": 243,
        "fullcodeline": "r = -EINVAL;"
    },
    {
        "line": 245,
        "fullcodeline": "} else if (prefix == \"status\" ||"
    },
    {
        "line": 247,
        "fullcodeline": "prefix == \"df\") {"
    },
    {
        "line": 249,
        "fullcodeline": "cmd_getval(g_ceph_context, cmdmap, \"detail\", detail);"
    },
    {
        "line": 300,
        "fullcodeline": "rdata.append(ds);"
    },
    {
        "line": 301,
        "fullcodeline": "rs = \"\";"
    },
    {
        "line": 302,
        "fullcodeline": "r = 0;"
    },
    {
        "line": 214,
        "fullcodeline": "reply_command(op, -EAGAIN, \"no quorum\", rdata, 0);"
    },
    {
        "line": 246,
        "fullcodeline": "prefix == \"health\" ||"
    },
    {
        "line": 251,
        "fullcodeline": "if (prefix == \"status\") {"
    },
    {
        "line": 96,
        "fullcodeline": "reply_command(op, -EINVAL,"
    },
    {
        "line": 253,
        "fullcodeline": "get_cluster_status(ds, f.get());"
    },
    {
        "line": 259,
        "fullcodeline": "rdata.append(ds);"
    },
    {
        "line": 303,
        "fullcodeline": "} else if (prefix == \"report\") {"
    },
    {
        "line": 308,
        "fullcodeline": "f->open_object_section(\"report\");"
    },
    {
        "line": 309,
        "fullcodeline": "f->dump_stream(\"cluster_fingerprint\") << fingerprint;"
    },
    {
        "line": 310,
        "fullcodeline": "f->dump_string(\"version\", ceph_version_to_str());"
    },
    {
        "line": 311,
        "fullcodeline": "f->dump_string(\"commit\", git_version_to_str());"
    },
    {
        "line": 314,
        "fullcodeline": "vector<string> tagsvec;"
    },
    {
        "line": 315,
        "fullcodeline": "cmd_getval(g_ceph_context, cmdmap, \"tags\", tagsvec);"
    },
    {
        "line": 316,
        "fullcodeline": "string tagstr = str_join(tagsvec, \" \");"
    },
    {
        "line": 319,
        "fullcodeline": "f->dump_string(\"tag\", tagstr);"
    },
    {
        "line": 321,
        "fullcodeline": "list<string> hs;"
    },
    {
        "line": 330,
        "fullcodeline": "paxos->dump_info(f.get());"
    },
    {
        "line": 332,
        "fullcodeline": "f->close_section();"
    },
    {
        "line": 333,
        "fullcodeline": "f->flush(rdata);"
    },
    {
        "line": 337,
        "fullcodeline": "rs = ss2.str();"
    },
    {
        "line": 338,
        "fullcodeline": "r = 0;"
    },
    {
        "line": 256,
        "fullcodeline": "f->flush(ds);"
    },
    {
        "line": 257,
        "fullcodeline": "ds << '\\n';"
    },
    {
        "line": 260,
        "fullcodeline": "} else if (prefix == \"health\") {"
    },
    {
        "line": 306,
        "fullcodeline": "if (!f)"
    },
    {
        "line": 312,
        "fullcodeline": "f->dump_stream(\"timestamp\") << ceph_clock_now(NULL);"
    },
    {
        "line": 322,
        "fullcodeline": "get_health(hs, NULL, f.get());"
    },
    {
        "line": 324,
        "fullcodeline": "monmon()->dump_info(f.get());"
    },
    {
        "line": 325,
        "fullcodeline": "osdmon()->dump_info(f.get());"
    },
    {
        "line": 326,
        "fullcodeline": "mdsmon()->dump_info(f.get());"
    },
    {
        "line": 327,
        "fullcodeline": "pgmon()->dump_info(f.get());"
    },
    {
        "line": 328,
        "fullcodeline": "authmon()->dump_info(f.get());"
    },
    {
        "line": 336,
        "fullcodeline": "ss2 << \"report \" << rdata.crc32c(CEPH_MON_PORT);"
    },
    {
        "line": 261,
        "fullcodeline": "list<string> health_str;"
    },
    {
        "line": 262,
        "fullcodeline": "get_health(health_str, detail == \"detail\" ? &rdata : NULL, f.get());"
    },
    {
        "line": 276,
        "fullcodeline": "comb.append(ds);"
    },
    {
        "line": 279,
        "fullcodeline": "rdata = comb;"
    },
    {
        "line": 307,
        "fullcodeline": "f.reset(Formatter::create(\"json-pretty\"));"
    },
    {
        "line": 317,
        "fullcodeline": "if (!tagstr.empty())"
    },
    {
        "line": 318,
        "fullcodeline": "tagstr = tagstr.substr(0, tagstr.find_last_of(' '));"
    },
    {
        "line": 339,
        "fullcodeline": "} else if (prefix == \"node ls\") {"
    },
    {
        "line": 341,
        "fullcodeline": "cmd_getval(g_ceph_context, cmdmap, \"type\", node_type);"
    },
    {
        "line": 357,
        "fullcodeline": "f->flush(ds);"
    },
    {
        "line": 358,
        "fullcodeline": "rdata.append(ds);"
    },
    {
        "line": 359,
        "fullcodeline": "rs = \"\";"
    },
    {
        "line": 360,
        "fullcodeline": "r = 0;"
    },
    {
        "line": 264,
        "fullcodeline": "f->flush(ds);"
    },
    {
        "line": 265,
        "fullcodeline": "ds << '\\n';"
    },
    {
        "line": 278,
        "fullcodeline": "comb.append(rdata);"
    },
    {
        "line": 342,
        "fullcodeline": "if (!f)"
    },
    {
        "line": 344,
        "fullcodeline": "if (node_type == \"all\") {"
    },
    {
        "line": 268,
        "fullcodeline": "ds << health_str.front();"
    },
    {
        "line": 269,
        "fullcodeline": "health_str.pop_front();"
    },
    {
        "line": 282,
        "fullcodeline": "bool verbose = (detail == \"detail\");"
    },
    {
        "line": 286,
        "fullcodeline": "pgmon()->dump_fs_stats(ds, f.get(), verbose);"
    },
    {
        "line": 289,
        "fullcodeline": "pgmon()->dump_pool_stats(ds, f.get(), verbose);"
    },
    {
        "line": 343,
        "fullcodeline": "f.reset(Formatter::create(\"json-pretty\"));"
    },
    {
        "line": 345,
        "fullcodeline": "f->open_object_section(\"nodes\");"
    },
    {
        "line": 346,
        "fullcodeline": "print_nodes(f.get(), ds);"
    },
    {
        "line": 349,
        "fullcodeline": "f->close_section();"
    },
    {
        "line": 361,
        "fullcodeline": "} else if (prefix == \"mon metadata\") {"
    },
    {
        "line": 267,
        "fullcodeline": "assert(!health_str.empty());"
    },
    {
        "line": 287,
        "fullcodeline": "if (!f)"
    },
    {
        "line": 347,
        "fullcodeline": "osdmon()->print_nodes(f.get());"
    },
    {
        "line": 348,
        "fullcodeline": "mdsmon()->print_nodes(f.get());"
    },
    {
        "line": 366,
        "fullcodeline": "bool all = !cmd_getval(g_ceph_context, cmdmap, \"id\", name);"
    },
    {
        "line": 402,
        "fullcodeline": "f->flush(ds);"
    },
    {
        "line": 403,
        "fullcodeline": "rdata.append(ds);"
    },
    {
        "line": 404,
        "fullcodeline": "rs = \"\";"
    },
    {
        "line": 270,
        "fullcodeline": "if (!health_str.empty()) {"
    },
    {
        "line": 271,
        "fullcodeline": "ds << ' ';"
    },
    {
        "line": 272,
        "fullcodeline": "ds << joinify(health_str.begin(), health_str.end(), string(\"; \"));"
    },
    {
        "line": 284,
        "fullcodeline": "f->open_object_section(\"stats\");"
    },
    {
        "line": 288,
        "fullcodeline": "ds << '\\n';"
    },
    {
        "line": 292,
        "fullcodeline": "f->close_section();"
    },
    {
        "line": 293,
        "fullcodeline": "f->flush(ds);"
    },
    {
        "line": 294,
        "fullcodeline": "ds << '\\n';"
    },
    {
        "line": 297,
        "fullcodeline": "assert(0 == \"We should never get here!\");"
    },
    {
        "line": 350,
        "fullcodeline": "} else if (node_type == \"mon\") {"
    },
    {
        "line": 362,
        "fullcodeline": "if (!f)"
    },
    {
        "line": 351,
        "fullcodeline": "print_nodes(f.get(), ds);"
    },
    {
        "line": 363,
        "fullcodeline": "f.reset(Formatter::create(\"json-pretty\"));"
    },
    {
        "line": 369,
        "fullcodeline": "int mon = monmap->get_rank(name);"
    },
    {
        "line": 375,
        "fullcodeline": "f->open_object_section(\"mon_metadata\");"
    },
    {
        "line": 376,
        "fullcodeline": "r = get_mon_metadata(mon, f.get(), ds);"
    },
    {
        "line": 377,
        "fullcodeline": "f->close_section();"
    },
    {
        "line": 405,
        "fullcodeline": "} else if (prefix == \"quorum_status\") {"
    },
    {
        "line": 370,
        "fullcodeline": "if (mon < 0) {"
    },
    {
        "line": 380,
        "fullcodeline": "r = 0;"
    },
    {
        "line": 381,
        "fullcodeline": "f->open_array_section(\"mon_metadata\");"
    },
    {
        "line": 399,
        "fullcodeline": "f->close_section();"
    },
    {
        "line": 412,
        "fullcodeline": "_quorum_status(f.get(), ds);"
    },
    {
        "line": 413,
        "fullcodeline": "rdata.append(ds);"
    },
    {
        "line": 414,
        "fullcodeline": "rs = \"\";"
    },
    {
        "line": 415,
        "fullcodeline": "r = 0;"
    },
    {
        "line": 352,
        "fullcodeline": "} else if (node_type == \"osd\") {"
    },
    {
        "line": 371,
        "fullcodeline": "rs = \"requested mon not found\";"
    },
    {
        "line": 372,
        "fullcodeline": "r = -ENOENT;"
    },
    {
        "line": 382,
        "fullcodeline": "for (unsigned int rank = 0; rank < monmap->size(); ++rank) {"
    },
    {
        "line": 384,
        "fullcodeline": "f->open_object_section(\"mon\");"
    },
    {
        "line": 385,
        "fullcodeline": "f->dump_string(\"name\", monmap->get_name(rank));"
    },
    {
        "line": 386,
        "fullcodeline": "r = get_mon_metadata(rank, f.get(), get_err);"
    },
    {
        "line": 387,
        "fullcodeline": "f->close_section();"
    },
    {
        "line": 407,
        "fullcodeline": "if (!is_leader() && !is_peon()) {"
    },
    {
        "line": 409,
        "fullcodeline": "waitfor_quorum.push_back(new C_RetryMessage(this, op));"
    },
    {
        "line": 416,
        "fullcodeline": "} else if (prefix == \"mon_status\") {"
    },
    {
        "line": 353,
        "fullcodeline": "osdmon()->print_nodes(f.get());"
    },
    {
        "line": 408,
        "fullcodeline": "dout(10) << \" waiting for quorum\" << dendl;"
    },
    {
        "line": 417,
        "fullcodeline": "get_mon_status(f.get(), ds);"
    },
    {
        "line": 420,
        "fullcodeline": "rdata.append(ds);"
    },
    {
        "line": 421,
        "fullcodeline": "rs = \"\";"
    },
    {
        "line": 422,
        "fullcodeline": "r = 0;"
    },
    {
        "line": 388,
        "fullcodeline": "if (r == -ENOENT || r == -EINVAL) {"
    },
    {
        "line": 389,
        "fullcodeline": "dout(1) << get_err.str() << dendl;"
    },
    {
        "line": 391,
        "fullcodeline": "r = 0;"
    },
    {
        "line": 419,
        "fullcodeline": "f->flush(ds);"
    },
    {
        "line": 355,
        "fullcodeline": "mdsmon()->print_nodes(f.get());"
    },
    {
        "line": 392,
        "fullcodeline": "} else if (r != 0) {"
    },
    {
        "line": 423,
        "fullcodeline": "} else if (prefix == \"sync force\" ||"
    },
    {
        "line": 424,
        "fullcodeline": "prefix == \"mon sync force\") {"
    },
    {
        "line": 426,
        "fullcodeline": "cmd_getval(g_ceph_context, cmdmap, \"validate1\", validate1);"
    },
    {
        "line": 427,
        "fullcodeline": "cmd_getval(g_ceph_context, cmdmap, \"validate2\", validate2);"
    },
    {
        "line": 436,
        "fullcodeline": "sync_force(f.get(), ds);"
    },
    {
        "line": 437,
        "fullcodeline": "rs = ds.str();"
    },
    {
        "line": 438,
        "fullcodeline": "r = 0;"
    },
    {
        "line": 395,
        "fullcodeline": "ds << get_err.str();"
    },
    {
        "line": 393,
        "fullcodeline": "derr << \"Unexpected error from get_mon_metadata: \""
    },
    {
        "line": 428,
        "fullcodeline": "if (validate1 != \"--yes-i-really-mean-it\" ||"
    },
    {
        "line": 429,
        "fullcodeline": "validate2 != \"--i-know-what-i-am-doing\") {"
    },
    {
        "line": 430,
        "fullcodeline": "r = -EINVAL;"
    },
    {
        "line": 431,
        "fullcodeline": "rs = \"are you SURE? this will mean the monitor store will be \""
    },
    {
        "line": 439,
        "fullcodeline": "} else if (prefix == \"heap\") {"
    },
    {
        "line": 394,
        "fullcodeline": "<< cpp_strerror(r) << dendl;"
    },
    {
        "line": 441,
        "fullcodeline": "rs = \"tcmalloc not enabled, can't use heap profiler commands\\n\";"
    },
    {
        "line": 453,
        "fullcodeline": "} else if (prefix == \"quorum\") {"
    },
    {
        "line": 444,
        "fullcodeline": "cmd_getval(g_ceph_context, cmdmap, \"heapcmd\", heapcmd);"
    },
    {
        "line": 446,
        "fullcodeline": "vector<string> heapcmd_vec;"
    },
    {
        "line": 447,
        "fullcodeline": "get_str_vec(heapcmd, heapcmd_vec);"
    },
    {
        "line": 448,
        "fullcodeline": "ceph_heap_profiler_handle_command(heapcmd_vec, ds);"
    },
    {
        "line": 449,
        "fullcodeline": "rdata.append(ds);"
    },
    {
        "line": 450,
        "fullcodeline": "rs = \"\";"
    },
    {
        "line": 451,
        "fullcodeline": "r = 0;"
    },
    {
        "line": 455,
        "fullcodeline": "cmd_getval(g_ceph_context, cmdmap, \"quorumcmd\", quorumcmd);"
    },
    {
        "line": 456,
        "fullcodeline": "if (quorumcmd == \"exit\") {"
    },
    {
        "line": 459,
        "fullcodeline": "rs = \"stopped responding to quorum, initiated new election\";"
    },
    {
        "line": 460,
        "fullcodeline": "r = 0;"
    },
    {
        "line": 479,
        "fullcodeline": "rdata.append(ds);"
    },
    {
        "line": 480,
        "fullcodeline": "rs = \"\";"
    },
    {
        "line": 481,
        "fullcodeline": "r = 0;"
    },
    {
        "line": 464,
        "fullcodeline": "rs = \"started responding to quorum, initiated new election\";"
    },
    {
        "line": 465,
        "fullcodeline": "r = 0;"
    },
    {
        "line": 472,
        "fullcodeline": "f->open_object_section(\"version\");"
    },
    {
        "line": 473,
        "fullcodeline": "f->dump_string(\"version\", pretty_version_to_str());"
    },
    {
        "line": 474,
        "fullcodeline": "f->close_section();"
    },
    {
        "line": 475,
        "fullcodeline": "f->flush(ds);"
    },
    {
        "line": 467,
        "fullcodeline": "rs = \"needs a valid 'quorum' command\";"
    },
    {
        "line": 468,
        "fullcodeline": "r = -EINVAL;"
    },
    {
        "line": 477,
        "fullcodeline": "ds << pretty_version_to_str();"
    }
]