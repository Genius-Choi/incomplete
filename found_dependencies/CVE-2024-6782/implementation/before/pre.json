[
    {
        "line": 4,
        "fullcodeline": "is_remote = notify_changes is not None"
    },
    {
        "line": 5,
        "fullcodeline": "formatter = None"
    },
    {
        "line": 6,
        "fullcodeline": "with db.safe_read_lock:"
    },
    {
        "line": 57,
        "fullcodeline": "return {'book_ids': book_ids, \"data\": data, 'metadata': metadata, 'fields':fields}"
    },
    {
        "line": 7,
        "fullcodeline": "fm = db.field_metadata"
    },
    {
        "line": 8,
        "fullcodeline": "afields = set(FIELDS) | {'id'}"
    },
    {
        "line": 13,
        "fullcodeline": "sort_by = sort_by or 'id'"
    },
    {
        "line": 14,
        "fullcodeline": "sort_fields = sort_by.split(',')"
    },
    {
        "line": 18,
        "fullcodeline": "sort_spec = [(sf, ascending) for sf in sort_fields]"
    },
    {
        "line": 27,
        "fullcodeline": "data = {}"
    },
    {
        "line": 28,
        "fullcodeline": "metadata = {}"
    },
    {
        "line": 9,
        "fullcodeline": "for k in fm.custom_field_keys():"
    },
    {
        "line": 11,
        "fullcodeline": "if 'all' in fields:"
    },
    {
        "line": 15,
        "fullcodeline": "for sf in sort_fields:"
    },
    {
        "line": 25,
        "fullcodeline": "if limit > -1:"
    },
    {
        "line": 29,
        "fullcodeline": "for field in fields:"
    },
    {
        "line": 12,
        "fullcodeline": "fields = sorted(afields if template else (afields - {'template'}))"
    },
    {
        "line": 22,
        "fullcodeline": "book_ids = db.multisort(sort_spec, ids_to_sort=db.search(search_text))"
    },
    {
        "line": 24,
        "fullcodeline": "book_ids = db.multisort(sort_spec)"
    },
    {
        "line": 26,
        "fullcodeline": "book_ids = book_ids[:limit]"
    },
    {
        "line": 10,
        "fullcodeline": "afields.add('*' + k[1:])"
    },
    {
        "line": 19,
        "fullcodeline": "if not set(fields).issubset(afields):"
    },
    {
        "line": 47,
        "fullcodeline": "field = field.replace('*', '#')"
    },
    {
        "line": 48,
        "fullcodeline": "metadata[field] = fm[field]"
    },
    {
        "line": 56,
        "fullcodeline": "data[field] = db.all_field_for(field, book_ids)"
    },
    {
        "line": 16,
        "fullcodeline": "if sf not in afields:"
    },
    {
        "line": 20,
        "fullcodeline": "return 'Unknown fields: {}'.format(', '.join(set(fields) - afields))"
    },
    {
        "line": 30,
        "fullcodeline": "if field in 'id':"
    },
    {
        "line": 32,
        "fullcodeline": "if field == 'isbn':"
    },
    {
        "line": 36,
        "fullcodeline": "if field == 'template':"
    },
    {
        "line": 33,
        "fullcodeline": "x = db.all_field_for('identifiers', book_ids, default_value={})"
    },
    {
        "line": 34,
        "fullcodeline": "data[field] = {k: v.get('isbn') or '' for k, v in iteritems(x)}"
    },
    {
        "line": 37,
        "fullcodeline": "vals = {}"
    },
    {
        "line": 38,
        "fullcodeline": "global_vars = {}"
    },
    {
        "line": 45,
        "fullcodeline": "data['template'] = vals"
    },
    {
        "line": 17,
        "fullcodeline": "return f'Unknown sort field: {sf}'"
    },
    {
        "line": 39,
        "fullcodeline": "if formatter is None:"
    },
    {
        "line": 42,
        "fullcodeline": "for book_id in book_ids:"
    },
    {
        "line": 50,
        "fullcodeline": "if field == 'formats':"
    },
    {
        "line": 53,
        "fullcodeline": "if field == 'cover':"
    },
    {
        "line": 40,
        "fullcodeline": "from calibre.ebooks.metadata.book.formatter import SafeFormat"
    },
    {
        "line": 41,
        "fullcodeline": "formatter = SafeFormat()"
    },
    {
        "line": 51,
        "fullcodeline": "data[field] = {k: list(formats(db, k)) for k in book_ids}"
    },
    {
        "line": 54,
        "fullcodeline": "data[field] = {k: cover(db, k) for k in book_ids}"
    },
    {
        "line": 43,
        "fullcodeline": "mi = db.get_proxy_metadata(book_id)"
    },
    {
        "line": 44,
        "fullcodeline": "vals[book_id] = formatter.safe_format(template, {}, 'TEMPLATE ERROR', mi, global_vars=global_vars)"
    }
]