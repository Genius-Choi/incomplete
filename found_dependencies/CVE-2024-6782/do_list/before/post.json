[
    {
        "line": 32,
        "fullcodeline": "fields = list(ans['fields'])"
    },
    {
        "line": 37,
        "fullcodeline": "fields = ['id'] + fields"
    },
    {
        "line": 38,
        "fullcodeline": "stringify(data, metadata, for_machine)"
    },
    {
        "line": 51,
        "fullcodeline": "output_table = prepare_output_table(fields, book_ids, data, metadata)"
    },
    {
        "line": 52,
        "fullcodeline": "widths = list(map(lambda x: 0, fields))"
    },
    {
        "line": 58,
        "fullcodeline": "screen_width = geometry()[0] if line_width < 0 else line_width"
    },
    {
        "line": 61,
        "fullcodeline": "field_width = screen_width // len(fields)"
    },
    {
        "line": 62,
        "fullcodeline": "base_widths = list(map(lambda x: min(x + 1, field_width), widths))"
    },
    {
        "line": 76,
        "fullcodeline": "widths = list(base_widths)"
    },
    {
        "line": 77,
        "fullcodeline": "titles = map("
    },
    {
        "line": 83,
        "fullcodeline": "stdout = getattr(sys.stdout, 'buffer', sys.stdout)"
    },
    {
        "line": 84,
        "fullcodeline": "linesep = as_bytes(os.linesep)"
    },
    {
        "line": 86,
        "fullcodeline": "wrappers = [TextWrapper(x - 1).wrap if x > 1 else lambda y: y for x in widths]"
    },
    {
        "line": 17,
        "fullcodeline": "if sort_by is None:"
    },
    {
        "line": 19,
        "fullcodeline": "if 'template' in (f.strip() for f in fields):"
    },
    {
        "line": 49,
        "fullcodeline": "from calibre.utils.terminal import ColoredStream, geometry"
    },
    {
        "line": 54,
        "fullcodeline": "for record in output_table:"
    },
    {
        "line": 59,
        "fullcodeline": "if not screen_width:"
    },
    {
        "line": 64,
        "fullcodeline": "while sum(base_widths) < screen_width:"
    },
    {
        "line": 81,
        "fullcodeline": "with ColoredStream(sys.stdout, fg='green'):"
    },
    {
        "line": 88,
        "fullcodeline": "for record in output_table:"
    },
    {
        "line": 18,
        "fullcodeline": "ascending = True"
    },
    {
        "line": 25,
        "fullcodeline": "ans = dbctx.run('list', fields, sort_by, ascending, search_text, limit, template)"
    },
    {
        "line": 27,
        "fullcodeline": "ans = dbctx.run('list', fields, sort_by, ascending, search_text, limit)"
    },
    {
        "line": 34,
        "fullcodeline": "fields.remove('id')"
    },
    {
        "line": 40,
        "fullcodeline": "raw = json.dumps("
    },
    {
        "line": 60,
        "fullcodeline": "screen_width = 80"
    },
    {
        "line": 65,
        "fullcodeline": "adjusted = False"
    },
    {
        "line": 23,
        "fullcodeline": "if not template:"
    },
    {
        "line": 29,
        "fullcodeline": "book_ids, data, metadata = ans['book_ids'], ans['data'], ans['metadata']"
    },
    {
        "line": 45,
        "fullcodeline": "if not isinstance(raw, bytes):"
    },
    {
        "line": 47,
        "fullcodeline": "getattr(sys.stdout, 'buffer', sys.stdout).write(raw)"
    },
    {
        "line": 66,
        "fullcodeline": "for i in range(len(widths)):"
    },
    {
        "line": 73,
        "fullcodeline": "if not adjusted:"
    },
    {
        "line": 79,
        "fullcodeline": "[template_title if v == 'template' else v for v in fields]"
    },
    {
        "line": 82,
        "fullcodeline": "print(''.join(titles), flush=True)"
    },
    {
        "line": 89,
        "fullcodeline": "text = ["
    },
    {
        "line": 92,
        "fullcodeline": "lines = max(map(len, text))"
    },
    {
        "line": 24,
        "fullcodeline": "raise SystemExit(_('You must provide a template'))"
    },
    {
        "line": 31,
        "fullcodeline": "raise SystemExit(ans)"
    },
    {
        "line": 36,
        "fullcodeline": "pass"
    },
    {
        "line": 41,
        "fullcodeline": "list(as_machine_data(book_ids, data, metadata)),"
    },
    {
        "line": 46,
        "fullcodeline": "raw = raw.encode('utf-8')"
    },
    {
        "line": 55,
        "fullcodeline": "for j in range(len(fields)):"
    },
    {
        "line": 93,
        "fullcodeline": "for l in range(lines):"
    },
    {
        "line": 21,
        "fullcodeline": "with open(template_file, 'rb') as f:"
    },
    {
        "line": 56,
        "fullcodeline": "widths[j] = max(widths[j], str_width(record[j]))"
    },
    {
        "line": 67,
        "fullcodeline": "if base_widths[i] < widths[i]:"
    },
    {
        "line": 100,
        "fullcodeline": "stdout.write(linesep)"
    },
    {
        "line": 22,
        "fullcodeline": "template = f.read().decode('utf-8')"
    },
    {
        "line": 68,
        "fullcodeline": "base_widths[i] += min("
    },
    {
        "line": 71,
        "fullcodeline": "adjusted = True"
    },
    {
        "line": 94,
        "fullcodeline": "for i in range(len(text)):"
    },
    {
        "line": 69,
        "fullcodeline": "screen_width - sum(base_widths), widths[i] - base_widths[i]"
    },
    {
        "line": 90,
        "fullcodeline": "wrappers[i](record[i]) for i in range(len(fields))"
    },
    {
        "line": 95,
        "fullcodeline": "ft = text[i][l] if l < len(text[i]) else ''"
    },
    {
        "line": 96,
        "fullcodeline": "stdout.write(ft.encode('utf-8'))"
    },
    {
        "line": 97,
        "fullcodeline": "if i < len(text) - 1:"
    },
    {
        "line": 98,
        "fullcodeline": "filler = ('%*s' % (widths[i] - str_width(ft) - 1, ''))"
    },
    {
        "line": 99,
        "fullcodeline": "stdout.write((filler + separator).encode('utf-8'))"
    }
]