[
    {
        "line": 2,
        "fullcodeline": "const CString sVar = sLine.Token(1).AsLower();"
    },
    {
        "line": 3,
        "fullcodeline": "CString sUserName = sLine.Token(2);"
    },
    {
        "line": 4,
        "fullcodeline": "CString sValue = sLine.Token(3, true);"
    },
    {
        "line": 11,
        "fullcodeline": "CUser* pUser = FindUser(sUserName);"
    },
    {
        "line": 6,
        "fullcodeline": "if (sValue.empty()) {"
    },
    {
        "line": 12,
        "fullcodeline": "if (!pUser) return;"
    },
    {
        "line": 14,
        "fullcodeline": "if (sVar == \"nick\") {"
    },
    {
        "line": 7,
        "fullcodeline": "PutModule(t_s(\"Usage: Set <variable> <username> <value>\"));"
    },
    {
        "line": 15,
        "fullcodeline": "pUser->SetNick(sValue);"
    },
    {
        "line": 17,
        "fullcodeline": "} else if (sVar == \"altnick\") {"
    },
    {
        "line": 18,
        "fullcodeline": "pUser->SetAltNick(sValue);"
    },
    {
        "line": 20,
        "fullcodeline": "} else if (sVar == \"ident\") {"
    },
    {
        "line": 21,
        "fullcodeline": "pUser->SetIdent(sValue);"
    },
    {
        "line": 23,
        "fullcodeline": "} else if (sVar == \"realname\") {"
    },
    {
        "line": 24,
        "fullcodeline": "pUser->SetRealName(sValue);"
    },
    {
        "line": 26,
        "fullcodeline": "} else if (sVar == \"bindhost\") {"
    },
    {
        "line": 27,
        "fullcodeline": "if (!pUser->DenySetBindHost() || GetUser()->IsAdmin()) {"
    },
    {
        "line": 33,
        "fullcodeline": "pUser->SetBindHost(sValue);"
    },
    {
        "line": 38,
        "fullcodeline": "} else if (sVar == \"multiclients\") {"
    },
    {
        "line": 28,
        "fullcodeline": "if (sValue.Equals(pUser->GetBindHost())) {"
    },
    {
        "line": 39,
        "fullcodeline": "bool b = sValue.ToBool();"
    },
    {
        "line": 40,
        "fullcodeline": "pUser->SetMultiClients(b);"
    },
    {
        "line": 36,
        "fullcodeline": "PutModule(t_s(\"Access denied!\"));"
    },
    {
        "line": 29,
        "fullcodeline": "PutModule(t_s(\"This bind host is already set!\"));"
    },
    {
        "line": 41,
        "fullcodeline": "PutModule(\"MultiClients = \" + CString(b));"
    },
    {
        "line": 42,
        "fullcodeline": "} else if (sVar == \"denyloadmod\") {"
    },
    {
        "line": 44,
        "fullcodeline": "bool b = sValue.ToBool();"
    },
    {
        "line": 45,
        "fullcodeline": "pUser->SetDenyLoadMod(b);"
    },
    {
        "line": 50,
        "fullcodeline": "} else if (sVar == \"denysetbindhost\") {"
    },
    {
        "line": 46,
        "fullcodeline": "PutModule(\"DenyLoadMod = \" + CString(b));"
    },
    {
        "line": 48,
        "fullcodeline": "PutModule(t_s(\"Access denied!\"));"
    },
    {
        "line": 52,
        "fullcodeline": "bool b = sValue.ToBool();"
    },
    {
        "line": 53,
        "fullcodeline": "pUser->SetDenySetBindHost(b);"
    },
    {
        "line": 58,
        "fullcodeline": "} else if (sVar == \"defaultchanmodes\") {"
    },
    {
        "line": 59,
        "fullcodeline": "pUser->SetDefaultChanModes(sValue);"
    },
    {
        "line": 54,
        "fullcodeline": "PutModule(\"DenySetBindHost = \" + CString(b));"
    },
    {
        "line": 56,
        "fullcodeline": "PutModule(t_s(\"Access denied!\"));"
    },
    {
        "line": 61,
        "fullcodeline": "} else if (sVar == \"quitmsg\") {"
    },
    {
        "line": 62,
        "fullcodeline": "pUser->SetQuitMsg(sValue);"
    },
    {
        "line": 64,
        "fullcodeline": "} else if (sVar == \"chanbuffersize\" || sVar == \"buffercount\") {"
    },
    {
        "line": 65,
        "fullcodeline": "unsigned int i = sValue.ToUInt();"
    },
    {
        "line": 67,
        "fullcodeline": "if (pUser->SetChanBufferSize(i, GetUser()->IsAdmin())) {"
    },
    {
        "line": 73,
        "fullcodeline": "} else if (sVar == \"querybuffersize\") {"
    },
    {
        "line": 74,
        "fullcodeline": "unsigned int i = sValue.ToUInt();"
    },
    {
        "line": 70,
        "fullcodeline": "PutModule(t_f(\"Setting failed, limit for buffer size is {1}\")("
    },
    {
        "line": 71,
        "fullcodeline": "CString(CZNC::Get().GetMaxBufferSize())));"
    },
    {
        "line": 76,
        "fullcodeline": "if (pUser->SetQueryBufferSize(i, GetUser()->IsAdmin())) {"
    },
    {
        "line": 82,
        "fullcodeline": "} else if (sVar == \"keepbuffer\") {"
    },
    {
        "line": 84,
        "fullcodeline": "bool b = !sValue.ToBool();"
    },
    {
        "line": 85,
        "fullcodeline": "pUser->SetAutoClearChanBuffer(b);"
    },
    {
        "line": 79,
        "fullcodeline": "PutModule(t_f(\"Setting failed, limit for buffer size is {1}\")("
    },
    {
        "line": 80,
        "fullcodeline": "CString(CZNC::Get().GetMaxBufferSize())));"
    },
    {
        "line": 86,
        "fullcodeline": "PutModule(\"AutoClearChanBuffer = \" + CString(b));"
    },
    {
        "line": 87,
        "fullcodeline": "} else if (sVar == \"autoclearchanbuffer\") {"
    },
    {
        "line": 88,
        "fullcodeline": "bool b = sValue.ToBool();"
    },
    {
        "line": 89,
        "fullcodeline": "pUser->SetAutoClearChanBuffer(b);"
    },
    {
        "line": 90,
        "fullcodeline": "PutModule(\"AutoClearChanBuffer = \" + CString(b));"
    },
    {
        "line": 91,
        "fullcodeline": "} else if (sVar == \"autoclearquerybuffer\") {"
    },
    {
        "line": 92,
        "fullcodeline": "bool b = sValue.ToBool();"
    },
    {
        "line": 93,
        "fullcodeline": "pUser->SetAutoClearQueryBuffer(b);"
    },
    {
        "line": 94,
        "fullcodeline": "PutModule(\"AutoClearQueryBuffer = \" + CString(b));"
    },
    {
        "line": 95,
        "fullcodeline": "} else if (sVar == \"password\") {"
    },
    {
        "line": 96,
        "fullcodeline": "const CString sSalt = CUtils::GetSalt();"
    },
    {
        "line": 97,
        "fullcodeline": "const CString sHash = CUser::SaltedHash(sValue, sSalt);"
    },
    {
        "line": 99,
        "fullcodeline": "PutModule(t_s(\"Password has been changed!\"));"
    },
    {
        "line": 100,
        "fullcodeline": "} else if (sVar == \"maxjoins\") {"
    },
    {
        "line": 101,
        "fullcodeline": "unsigned int i = sValue.ToUInt();"
    },
    {
        "line": 102,
        "fullcodeline": "pUser->SetMaxJoins(i);"
    },
    {
        "line": 103,
        "fullcodeline": "PutModule(\"MaxJoins = \" + CString(pUser->MaxJoins()));"
    },
    {
        "line": 104,
        "fullcodeline": "} else if (sVar == \"notraffictimeout\") {"
    },
    {
        "line": 105,
        "fullcodeline": "unsigned int i = sValue.ToUInt();"
    },
    {
        "line": 106,
        "fullcodeline": "if (i < 30) {"
    },
    {
        "line": 113,
        "fullcodeline": "} else if (sVar == \"maxnetworks\") {"
    },
    {
        "line": 107,
        "fullcodeline": "PutModule(t_s(\"Timeout can't be less than 30 seconds!\"));"
    },
    {
        "line": 109,
        "fullcodeline": "pUser->SetNoTrafficTimeout(i);"
    },
    {
        "line": 111,
        "fullcodeline": "CString(pUser->GetNoTrafficTimeout()));"
    },
    {
        "line": 115,
        "fullcodeline": "unsigned int i = sValue.ToUInt();"
    },
    {
        "line": 121,
        "fullcodeline": "} else if (sVar == \"maxquerybuffers\") {"
    },
    {
        "line": 122,
        "fullcodeline": "unsigned int i = sValue.ToUInt();"
    },
    {
        "line": 119,
        "fullcodeline": "PutModule(t_s(\"Access denied!\"));"
    },
    {
        "line": 125,
        "fullcodeline": "} else if (sVar == \"jointries\") {"
    },
    {
        "line": 126,
        "fullcodeline": "unsigned int i = sValue.ToUInt();"
    },
    {
        "line": 127,
        "fullcodeline": "pUser->SetJoinTries(i);"
    },
    {
        "line": 128,
        "fullcodeline": "PutModule(\"JoinTries = \" + CString(pUser->JoinTries()));"
    },
    {
        "line": 129,
        "fullcodeline": "} else if (sVar == \"timezone\") {"
    },
    {
        "line": 130,
        "fullcodeline": "pUser->SetTimezone(sValue);"
    },
    {
        "line": 131,
        "fullcodeline": "PutModule(\"Timezone = \" + pUser->GetTimezone());"
    },
    {
        "line": 132,
        "fullcodeline": "} else if (sVar == \"admin\") {"
    },
    {
        "line": 133,
        "fullcodeline": "if (GetUser()->IsAdmin() && pUser != GetUser()) {"
    },
    {
        "line": 134,
        "fullcodeline": "bool b = sValue.ToBool();"
    },
    {
        "line": 135,
        "fullcodeline": "pUser->SetAdmin(b);"
    },
    {
        "line": 140,
        "fullcodeline": "} else if (sVar == \"prependtimestamp\") {"
    },
    {
        "line": 141,
        "fullcodeline": "bool b = sValue.ToBool();"
    },
    {
        "line": 142,
        "fullcodeline": "pUser->SetTimestampPrepend(b);"
    },
    {
        "line": 136,
        "fullcodeline": "PutModule(\"Admin = \" + CString(pUser->IsAdmin()));"
    },
    {
        "line": 138,
        "fullcodeline": "PutModule(t_s(\"Access denied!\"));"
    },
    {
        "line": 143,
        "fullcodeline": "PutModule(\"PrependTimestamp = \" + CString(b));"
    },
    {
        "line": 144,
        "fullcodeline": "} else if (sVar == \"appendtimestamp\") {"
    },
    {
        "line": 145,
        "fullcodeline": "bool b = sValue.ToBool();"
    },
    {
        "line": 146,
        "fullcodeline": "pUser->SetTimestampAppend(b);"
    },
    {
        "line": 147,
        "fullcodeline": "PutModule(\"AppendTimestamp = \" + CString(b));"
    },
    {
        "line": 148,
        "fullcodeline": "} else if (sVar == \"authonlyviamodule\") {"
    },
    {
        "line": 150,
        "fullcodeline": "bool b = sValue.ToBool();"
    },
    {
        "line": 151,
        "fullcodeline": "pUser->SetAuthOnlyViaModule(b);"
    },
    {
        "line": 156,
        "fullcodeline": "} else if (sVar == \"timestampformat\") {"
    },
    {
        "line": 157,
        "fullcodeline": "pUser->SetTimestampFormat(sValue);"
    },
    {
        "line": 152,
        "fullcodeline": "PutModule(\"AuthOnlyViaModule = \" + CString(b));"
    },
    {
        "line": 154,
        "fullcodeline": "PutModule(t_s(\"Access denied!\"));"
    },
    {
        "line": 159,
        "fullcodeline": "} else if (sVar == \"dccbindhost\") {"
    },
    {
        "line": 160,
        "fullcodeline": "if (!pUser->DenySetBindHost() || GetUser()->IsAdmin()) {"
    },
    {
        "line": 161,
        "fullcodeline": "pUser->SetDCCBindHost(sValue);"
    },
    {
        "line": 166,
        "fullcodeline": "} else if (sVar == \"statusprefix\") {"
    },
    {
        "line": 164,
        "fullcodeline": "PutModule(t_s(\"Access denied!\"));"
    },
    {
        "line": 167,
        "fullcodeline": "if (sVar.find_first_of(\" \\t\\n\") == CString::npos) {"
    },
    {
        "line": 168,
        "fullcodeline": "pUser->SetStatusPrefix(sValue);"
    },
    {
        "line": 201,
        "fullcodeline": "PutModule(t_s(\"Error: Unknown variable\"));"
    },
    {
        "line": 171,
        "fullcodeline": "PutModule(t_s(\"That would be a bad idea!\"));"
    }
]