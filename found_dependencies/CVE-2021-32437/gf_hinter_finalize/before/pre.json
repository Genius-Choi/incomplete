[
    {
        "line": 9,
        "fullcodeline": "char buf64[5000], sdpLine[5100];"
    },
    {
        "line": 12,
        "fullcodeline": "gf_isom_sdp_clean(file);"
    },
    {
        "line": 24,
        "fullcodeline": "gf_isom_sdp_add_line(file, buf64);"
    },
    {
        "line": 28,
        "fullcodeline": "odT = sceneT = 0;"
    },
    {
        "line": 50,
        "fullcodeline": "iod = (GF_InitialObjectDescriptor *) gf_isom_get_root_od(file);"
    },
    {
        "line": 159,
        "fullcodeline": "buffer = NULL;"
    },
    {
        "line": 160,
        "fullcodeline": "size = 0;"
    },
    {
        "line": 161,
        "fullcodeline": "gf_odf_desc_write((GF_Descriptor *) iod, &buffer, &size);"
    },
    {
        "line": 166,
        "fullcodeline": "buf64[size64] = 0;"
    },
    {
        "line": 169,
        "fullcodeline": "sprintf(sdpLine, \"a=mpeg4-iod:\\\"data:application/mpeg4-iod;base64,%s\\\"\", buf64);"
    },
    {
        "line": 19,
        "fullcodeline": "if (gf_sys_is_test_mode()) {"
    },
    {
        "line": 26,
        "fullcodeline": "if (IOD_Profile == GF_SDP_IOD_NONE) return GF_OK;"
    },
    {
        "line": 29,
        "fullcodeline": "for (i=0; i<gf_isom_get_track_count(file); i++) {"
    },
    {
        "line": 41,
        "fullcodeline": "if (IOD_Profile == GF_SDP_IOD_ISMA_STRICT) {"
    },
    {
        "line": 51,
        "fullcodeline": "if (!iod) return GF_NOT_SUPPORTED;"
    },
    {
        "line": 165,
        "fullcodeline": "size64 = gf_base64_encode(buffer, size, buf64, 2000);"
    },
    {
        "line": 15,
        "fullcodeline": "sprintf(buf64, \"b=AS:%d\", bandwidth);"
    },
    {
        "line": 16,
        "fullcodeline": "gf_isom_sdp_add_line(file, buf64);"
    },
    {
        "line": 20,
        "fullcodeline": "sprintf(buf64, \"a=x-copyright: %s\", \"MP4/3GP File hinted with GPAC - (c) Telecom ParisTech (http://gpac.io)\");"
    },
    {
        "line": 42,
        "fullcodeline": "IOD_Profile = GF_SDP_IOD_ISMA;"
    },
    {
        "line": 47,
        "fullcodeline": "if ( (IOD_Profile == GF_SDP_IOD_ISMA) && !sceneT ) return GF_BAD_PARAM;"
    },
    {
        "line": 103,
        "fullcodeline": "esd = gf_isom_get_esd(file, sceneT, 1);"
    },
    {
        "line": 133,
        "fullcodeline": "gf_list_add(iod->ESDescriptors, esd);"
    },
    {
        "line": 22,
        "fullcodeline": "sprintf(buf64, \"a=x-copyright: MP4/3GP File hinted with GPAC %s - %s\", gf_gpac_version(), gf_gpac_copyright() );"
    },
    {
        "line": 31,
        "fullcodeline": "switch (gf_isom_get_media_type(file,i+1)) {"
    },
    {
        "line": 57,
        "fullcodeline": "while (gf_list_count(iod->ESDescriptors)) {"
    },
    {
        "line": 30,
        "fullcodeline": "if (!gf_isom_is_track_in_root_od(file, i+1)) continue;"
    },
    {
        "line": 33,
        "fullcodeline": "odT = i+1;"
    },
    {
        "line": 36,
        "fullcodeline": "sceneT = i+1;"
    },
    {
        "line": 58,
        "fullcodeline": "esd = (GF_ESD*)gf_list_get(iod->ESDescriptors, 0);"
    },
    {
        "line": 60,
        "fullcodeline": "gf_list_rem(iod->ESDescriptors, 0);"
    },
    {
        "line": 66,
        "fullcodeline": "esd = gf_isom_get_esd(file, odT, 1);"
    },
    {
        "line": 100,
        "fullcodeline": "gf_list_add(iod->ESDescriptors, esd);"
    },
    {
        "line": 104,
        "fullcodeline": "if (gf_isom_get_sample_count(file, sceneT)==1) {"
    },
    {
        "line": 105,
        "fullcodeline": "samp = gf_isom_get_sample(file, sceneT, 1, &descIndex);"
    },
    {
        "line": 130,
        "fullcodeline": "if (remove_ocr) esd->OCRESID = 0;"
    },
    {
        "line": 137,
        "fullcodeline": "has_a = has_v = has_i_a = has_i_v = 0;"
    },
    {
        "line": 106,
        "fullcodeline": "if (gf_hinter_can_embbed_data(samp->data, samp->dataLength, GF_STREAM_SCENE)) {"
    },
    {
        "line": 138,
        "fullcodeline": "for (i=0; i<gf_isom_get_track_count(file); i++) {"
    },
    {
        "line": 67,
        "fullcodeline": "if (gf_isom_get_sample_count(file, odT)==1) {"
    },
    {
        "line": 68,
        "fullcodeline": "samp = gf_isom_get_sample(file, odT, 1, &descIndex);"
    },
    {
        "line": 94,
        "fullcodeline": "gf_isom_sample_del(&samp);"
    },
    {
        "line": 96,
        "fullcodeline": "if (remove_ocr) esd->OCRESID = 0;"
    },
    {
        "line": 108,
        "fullcodeline": "slc.timeScale = slc.timestampResolution = gf_isom_get_media_timescale(file, sceneT);"
    },
    {
        "line": 109,
        "fullcodeline": "slc.OCRResolution = 1000;"
    },
    {
        "line": 110,
        "fullcodeline": "slc.startCTS = samp->DTS+samp->CTS_Offset;"
    },
    {
        "line": 111,
        "fullcodeline": "slc.startDTS = samp->DTS;"
    },
    {
        "line": 113,
        "fullcodeline": "gf_isom_set_extraction_slc(file, sceneT, 1, &slc);"
    },
    {
        "line": 116,
        "fullcodeline": "buf64[size64] = 0;"
    },
    {
        "line": 117,
        "fullcodeline": "sprintf(sdpLine, \"data:application/mpeg4-bifs-au;base64,%s\", buf64);"
    },
    {
        "line": 122,
        "fullcodeline": "esd->URLString = (char*)gf_malloc(sizeof(char) * (strlen(sdpLine)+1));"
    },
    {
        "line": 123,
        "fullcodeline": "strcpy(esd->URLString, sdpLine);"
    },
    {
        "line": 131,
        "fullcodeline": "else if (esd->OCRESID == esd->ESID) esd->OCRESID = 0;"
    },
    {
        "line": 139,
        "fullcodeline": "esd = gf_isom_get_esd(file, i+1, 1);"
    },
    {
        "line": 151,
        "fullcodeline": "if (!has_v && !has_a && (has_i_v<=1) && (has_i_a<=1)) {"
    },
    {
        "line": 152,
        "fullcodeline": "sprintf(sdpLine, \"a=isma-compliance:1,1.0,1\");"
    },
    {
        "line": 153,
        "fullcodeline": "gf_isom_sdp_add_line(file, sdpLine);"
    },
    {
        "line": 69,
        "fullcodeline": "if (samp && gf_hinter_can_embbed_data(samp->data, samp->dataLength, GF_STREAM_OD)) {"
    },
    {
        "line": 115,
        "fullcodeline": "size64 = gf_base64_encode(samp->data, samp->dataLength, buf64, 2000);"
    },
    {
        "line": 125,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_RTP, (\"[rtp hinter] Scene description sample too large to be embedded in IOD - ISMA disabled\\n\"));"
    },
    {
        "line": 140,
        "fullcodeline": "if (!esd) continue;"
    },
    {
        "line": 141,
        "fullcodeline": "if (esd->decoderConfig->streamType==GF_STREAM_VISUAL) {"
    },
    {
        "line": 70,
        "fullcodeline": "InitSL_NULL(&slc);"
    },
    {
        "line": 71,
        "fullcodeline": "slc.predefined = 0;"
    },
    {
        "line": 72,
        "fullcodeline": "slc.hasRandomAccessUnitsOnlyFlag = 1;"
    },
    {
        "line": 73,
        "fullcodeline": "slc.timeScale = slc.timestampResolution = gf_isom_get_media_timescale(file, odT);"
    },
    {
        "line": 74,
        "fullcodeline": "slc.OCRResolution = 1000;"
    },
    {
        "line": 75,
        "fullcodeline": "slc.startCTS = samp->DTS+samp->CTS_Offset;"
    },
    {
        "line": 76,
        "fullcodeline": "slc.startDTS = samp->DTS;"
    },
    {
        "line": 78,
        "fullcodeline": "gf_isom_set_extraction_slc(file, odT, 1, &slc);"
    },
    {
        "line": 81,
        "fullcodeline": "buf64[size64] = 0;"
    },
    {
        "line": 82,
        "fullcodeline": "sprintf(sdpLine, \"data:application/mpeg4-od-au;base64,%s\", buf64);"
    },
    {
        "line": 87,
        "fullcodeline": "size64 = (u32) strlen(sdpLine)+1;"
    },
    {
        "line": 88,
        "fullcodeline": "esd->URLString = (char*)gf_malloc(sizeof(char) * size64);"
    },
    {
        "line": 89,
        "fullcodeline": "strcpy(esd->URLString, sdpLine);"
    },
    {
        "line": 97,
        "fullcodeline": "else if (esd->OCRESID == esd->ESID) esd->OCRESID = 0;"
    },
    {
        "line": 80,
        "fullcodeline": "size64 = gf_base64_encode(samp->data, samp->dataLength, buf64, 2000);"
    },
    {
        "line": 91,
        "fullcodeline": "GF_LOG(GF_LOG_WARNING, GF_LOG_RTP, (\"[rtp hinter] OD sample too large to be embedded in IOD - ISMA disabled\\n\"));"
    },
    {
        "line": 142,
        "fullcodeline": "if (esd->decoderConfig->objectTypeIndication==GF_CODECID_MPEG4_PART2) has_i_v ++;"
    },
    {
        "line": 144,
        "fullcodeline": "} else if (esd->decoderConfig->streamType==GF_STREAM_AUDIO) {"
    },
    {
        "line": 143,
        "fullcodeline": "else has_v++;"
    },
    {
        "line": 145,
        "fullcodeline": "if (esd->decoderConfig->objectTypeIndication==GF_CODECID_AAC_MPEG4) has_i_a ++;"
    },
    {
        "line": 146,
        "fullcodeline": "else has_a++;"
    }
]