[
    {
        "line": 13,
        "fullcodeline": "explicit_vr[MagickPathExtent],"
    },
    {
        "line": 14,
        "fullcodeline": "implicit_vr[MagickPathExtent],"
    },
    {
        "line": 15,
        "fullcodeline": "magick[MagickPathExtent],"
    },
    {
        "line": 16,
        "fullcodeline": "photometric[MagickPathExtent];"
    },
    {
        "line": 72,
        "fullcodeline": "assert(image_info != (const ImageInfo *) NULL);"
    },
    {
        "line": 73,
        "fullcodeline": "assert(image_info->signature == MagickCoreSignature);"
    },
    {
        "line": 77,
        "fullcodeline": "assert(exception != (ExceptionInfo *) NULL);"
    },
    {
        "line": 78,
        "fullcodeline": "assert(exception->signature == MagickCoreSignature);"
    },
    {
        "line": 79,
        "fullcodeline": "image=AcquireImage(image_info,exception);"
    },
    {
        "line": 80,
        "fullcodeline": "status=OpenBlob(image_info,image,ReadBinaryBlobMode,exception);"
    },
    {
        "line": 86,
        "fullcodeline": "image->depth=8UL;"
    },
    {
        "line": 87,
        "fullcodeline": "image->endian=LSBEndian;"
    },
    {
        "line": 91,
        "fullcodeline": "data=(unsigned char *) NULL;"
    },
    {
        "line": 92,
        "fullcodeline": "stream_info=(DCMStreamInfo *) AcquireMagickMemory(sizeof(*stream_info));"
    },
    {
        "line": 96,
        "fullcodeline": "count=ReadBlob(image,128,(unsigned char *) magick);"
    },
    {
        "line": 99,
        "fullcodeline": "count=ReadBlob(image,4,(unsigned char *) magick);"
    },
    {
        "line": 110,
        "fullcodeline": "info.polarity=MagickFalse;"
    },
    {
        "line": 111,
        "fullcodeline": "info.scale=(Quantum *) NULL;"
    },
    {
        "line": 112,
        "fullcodeline": "info.bits_allocated=8;"
    },
    {
        "line": 113,
        "fullcodeline": "info.bytes_per_pixel=1;"
    },
    {
        "line": 114,
        "fullcodeline": "info.depth=8;"
    },
    {
        "line": 115,
        "fullcodeline": "info.mask=0xffff;"
    },
    {
        "line": 116,
        "fullcodeline": "info.max_value=255UL;"
    },
    {
        "line": 117,
        "fullcodeline": "info.samples_per_pixel=1;"
    },
    {
        "line": 118,
        "fullcodeline": "info.signed_data=(~0UL);"
    },
    {
        "line": 119,
        "fullcodeline": "info.significant_bits=0;"
    },
    {
        "line": 120,
        "fullcodeline": "info.rescale=MagickFalse;"
    },
    {
        "line": 121,
        "fullcodeline": "info.rescale_intercept=0.0;"
    },
    {
        "line": 122,
        "fullcodeline": "info.rescale_slope=1.0;"
    },
    {
        "line": 123,
        "fullcodeline": "info.window_center=0.0;"
    },
    {
        "line": 124,
        "fullcodeline": "info.window_width=0.0;"
    },
    {
        "line": 125,
        "fullcodeline": "data=(unsigned char *) NULL;"
    },
    {
        "line": 126,
        "fullcodeline": "element=0;"
    },
    {
        "line": 127,
        "fullcodeline": "explicit_vr[2]='\\0';"
    },
    {
        "line": 128,
        "fullcodeline": "explicit_file=MagickFalse;"
    },
    {
        "line": 129,
        "fullcodeline": "colors=0;"
    },
    {
        "line": 130,
        "fullcodeline": "redmap=(int *) NULL;"
    },
    {
        "line": 131,
        "fullcodeline": "greenmap=(int *) NULL;"
    },
    {
        "line": 132,
        "fullcodeline": "bluemap=(int *) NULL;"
    },
    {
        "line": 133,
        "fullcodeline": "graymap=(int *) NULL;"
    },
    {
        "line": 134,
        "fullcodeline": "height=0;"
    },
    {
        "line": 135,
        "fullcodeline": "number_scenes=1;"
    },
    {
        "line": 136,
        "fullcodeline": "sequence=MagickFalse;"
    },
    {
        "line": 138,
        "fullcodeline": "explicit_retry = MagickFalse;"
    },
    {
        "line": 139,
        "fullcodeline": "width=0;"
    },
    {
        "line": 760,
        "fullcodeline": "image->columns=(size_t) width;"
    },
    {
        "line": 761,
        "fullcodeline": "image->rows=(size_t) height;"
    },
    {
        "line": 74,
        "fullcodeline": "if (image_info->debug != MagickFalse)"
    },
    {
        "line": 81,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 93,
        "fullcodeline": "if (stream_info == (DCMStreamInfo *) NULL)"
    },
    {
        "line": 95,
        "fullcodeline": "(void) ResetMagickMemory(stream_info,0,sizeof(*stream_info));"
    },
    {
        "line": 109,
        "fullcodeline": "(void) CopyMagickString(photometric,\"MONOCHROME1 \",MagickPathExtent);"
    },
    {
        "line": 762,
        "fullcodeline": "if (info.signed_data == 0xffff)"
    },
    {
        "line": 875,
        "fullcodeline": "if (info.depth != (1UL*MAGICKCORE_QUANTUM_DEPTH))"
    },
    {
        "line": 891,
        "fullcodeline": "if (image->compression == RLECompression)"
    },
    {
        "line": 918,
        "fullcodeline": "for (scene=0; scene < (ssize_t) number_scenes; scene++)"
    },
    {
        "line": 1156,
        "fullcodeline": "if (stream_info->offsets != (ssize_t *) NULL)"
    },
    {
        "line": 1160,
        "fullcodeline": "if (info.scale != (Quantum *) NULL)"
    },
    {
        "line": 1162,
        "fullcodeline": "if (graymap != (int *) NULL)"
    },
    {
        "line": 1164,
        "fullcodeline": "if (bluemap != (int *) NULL)"
    },
    {
        "line": 1166,
        "fullcodeline": "if (greenmap != (int *) NULL)"
    },
    {
        "line": 1168,
        "fullcodeline": "if (redmap != (int *) NULL)"
    },
    {
        "line": 1170,
        "fullcodeline": "(void) CloseBlob(image);"
    },
    {
        "line": 1171,
        "fullcodeline": "return(GetFirstImageInList(image));"
    },
    {
        "line": 75,
        "fullcodeline": "(void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\","
    },
    {
        "line": 83,
        "fullcodeline": "image=DestroyImageList(image);"
    },
    {
        "line": 94,
        "fullcodeline": "ThrowDCMException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 98,
        "fullcodeline": "ThrowDCMException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 100,
        "fullcodeline": "if ((count != 4) || (LocaleNCompare(magick,\"DICM\",4) != 0))"
    },
    {
        "line": 102,
        "fullcodeline": "offset=SeekBlob(image,0L,SEEK_SET);"
    },
    {
        "line": 140,
        "fullcodeline": "for (group=0; (group != 0x7FE0) || (element != 0x0010) ||"
    },
    {
        "line": 141,
        "fullcodeline": "(sequence != MagickFalse); )"
    },
    {
        "line": 146,
        "fullcodeline": "image->offset=(ssize_t) TellBlob(image);"
    },
    {
        "line": 147,
        "fullcodeline": "group=ReadBlobLSBShort(image);"
    },
    {
        "line": 148,
        "fullcodeline": "element=ReadBlobLSBShort(image);"
    },
    {
        "line": 162,
        "fullcodeline": "count=ReadBlob(image,2,(unsigned char *) explicit_vr);"
    },
    {
        "line": 172,
        "fullcodeline": "use_explicit=((group == 0x0002) && (explicit_retry == MagickFalse)) ||"
    },
    {
        "line": 198,
        "fullcodeline": "datum=0;"
    },
    {
        "line": 214,
        "fullcodeline": "quantum=0;"
    },
    {
        "line": 215,
        "fullcodeline": "length=1;"
    },
    {
        "line": 269,
        "fullcodeline": "data=(unsigned char *) NULL;"
    },
    {
        "line": 758,
        "fullcodeline": "if ((width == 0) || (height == 0))"
    },
    {
        "line": 759,
        "fullcodeline": "ThrowDCMException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 763,
        "fullcodeline": "info.signed_data=(size_t) (info.significant_bits == 16 ? 1 : 0);"
    },
    {
        "line": 764,
        "fullcodeline": "if ((image->compression == JPEGCompression) ||"
    },
    {
        "line": 765,
        "fullcodeline": "(image->compression == JPEG2000Compression))"
    },
    {
        "line": 782,
        "fullcodeline": "length=(size_t) ReadBlobLSBLong(image);"
    },
    {
        "line": 783,
        "fullcodeline": "stream_info->offset_count=length >> 2;"
    },
    {
        "line": 799,
        "fullcodeline": "read_info=CloneImageInfo(image_info);"
    },
    {
        "line": 800,
        "fullcodeline": "SetImageInfoBlob(read_info,(void *) NULL,0);"
    },
    {
        "line": 801,
        "fullcodeline": "images=NewImageList();"
    },
    {
        "line": 883,
        "fullcodeline": "length=(size_t) (GetQuantumRange(info.depth)+1);"
    },
    {
        "line": 884,
        "fullcodeline": "info.scale=(Quantum *) AcquireQuantumMemory(length,sizeof(*info.scale));"
    },
    {
        "line": 887,
        "fullcodeline": "range=GetQuantumRange(info.depth);"
    },
    {
        "line": 901,
        "fullcodeline": "tag=(ReadBlobLSBShort(image) << 16) | ReadBlobLSBShort(image);"
    },
    {
        "line": 903,
        "fullcodeline": "length=(size_t) ReadBlobLSBLong(image);"
    },
    {
        "line": 904,
        "fullcodeline": "stream_info->offset_count=length >> 2;"
    },
    {
        "line": 922,
        "fullcodeline": "image->columns=(size_t) width;"
    },
    {
        "line": 923,
        "fullcodeline": "image->rows=(size_t) height;"
    },
    {
        "line": 924,
        "fullcodeline": "image->depth=info.depth;"
    },
    {
        "line": 925,
        "fullcodeline": "status=SetImageExtent(image,image->columns,image->rows,exception);"
    },
    {
        "line": 928,
        "fullcodeline": "image->colorspace=RGBColorspace;"
    },
    {
        "line": 1157,
        "fullcodeline": "stream_info->offsets=(ssize_t *)"
    },
    {
        "line": 1159,
        "fullcodeline": "stream_info=(DCMStreamInfo *) RelinquishMagickMemory(stream_info);"
    },
    {
        "line": 84,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 149,
        "fullcodeline": "if ((group != 0x0002) && (image->endian == MSBEndian))"
    },
    {
        "line": 158,
        "fullcodeline": "for (i=0; dicom_info[i].group < 0xffff; i++)"
    },
    {
        "line": 161,
        "fullcodeline": "(void) CopyMagickString(implicit_vr,dicom_info[i].vr,MagickPathExtent);"
    },
    {
        "line": 199,
        "fullcodeline": "if (quantum == 4)"
    },
    {
        "line": 216,
        "fullcodeline": "if (datum != 0)"
    },
    {
        "line": 242,
        "fullcodeline": "if (image_info->verbose != MagickFalse)"
    },
    {
        "line": 326,
        "fullcodeline": "if (sequence != MagickFalse)"
    },
    {
        "line": 693,
        "fullcodeline": "if (data != (unsigned char *) NULL)"
    },
    {
        "line": 718,
        "fullcodeline": "if (image_info->verbose != MagickFalse)"
    },
    {
        "line": 749,
        "fullcodeline": "if (data != (unsigned char *) NULL)"
    },
    {
        "line": 751,
        "fullcodeline": "if (EOFBlob(image) != MagickFalse)"
    },
    {
        "line": 779,
        "fullcodeline": "for (i=0; i < (ssize_t) stream_info->remaining; i++)"
    },
    {
        "line": 781,
        "fullcodeline": "(void)((ReadBlobLSBShort(image) << 16) | ReadBlobLSBShort(image));"
    },
    {
        "line": 784,
        "fullcodeline": "if (stream_info->offset_count != 0)"
    },
    {
        "line": 802,
        "fullcodeline": "for (scene=0; scene < (ssize_t) number_scenes; scene++)"
    },
    {
        "line": 871,
        "fullcodeline": "read_info=DestroyImageInfo(read_info);"
    },
    {
        "line": 872,
        "fullcodeline": "image=DestroyImage(image);"
    },
    {
        "line": 873,
        "fullcodeline": "return(GetFirstImageInList(images));"
    },
    {
        "line": 885,
        "fullcodeline": "if (info.scale == (Quantum *) NULL)"
    },
    {
        "line": 888,
        "fullcodeline": "for (i=0; i <= (ssize_t) GetQuantumRange(info.depth); i++)"
    },
    {
        "line": 889,
        "fullcodeline": "info.scale[i]=ScaleAnyToQuantum((size_t) i,range);"
    },
    {
        "line": 899,
        "fullcodeline": "for (i=0; i < (ssize_t) stream_info->remaining; i++)"
    },
    {
        "line": 905,
        "fullcodeline": "if (stream_info->offset_count != 0)"
    },
    {
        "line": 920,
        "fullcodeline": "if (image_info->ping != MagickFalse)"
    },
    {
        "line": 926,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 982,
        "fullcodeline": "if (image->compression == RLECompression)"
    },
    {
        "line": 1121,
        "fullcodeline": "if (SetImageGray(image,exception) != MagickFalse)"
    },
    {
        "line": 1123,
        "fullcodeline": "if (EOFBlob(image) != MagickFalse)"
    },
    {
        "line": 1132,
        "fullcodeline": "if (image_info->number_scenes != 0)"
    },
    {
        "line": 1135,
        "fullcodeline": "if (scene < (ssize_t) (number_scenes-1))"
    },
    {
        "line": 104,
        "fullcodeline": "ThrowDCMException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 151,
        "fullcodeline": "group=(unsigned short) ((group << 8) | ((group >> 8) & 0xFF));"
    },
    {
        "line": 152,
        "fullcodeline": "element=(unsigned short) ((element << 8) | ((element >> 8) & 0xFF));"
    },
    {
        "line": 159,
        "fullcodeline": "if ((group == dicom_info[i].group) && (element == dicom_info[i].element))"
    },
    {
        "line": 164,
        "fullcodeline": "ThrowDCMException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 168,
        "fullcodeline": "if ((explicit_file == MagickFalse) && (group != 0x0002))"
    },
    {
        "line": 169,
        "fullcodeline": "explicit_file=(isupper((unsigned char) *explicit_vr) != MagickFalse) &&"
    },
    {
        "line": 174,
        "fullcodeline": "if ((use_explicit != MagickFalse) && (strncmp(implicit_vr,\"xs\",2) == 0))"
    },
    {
        "line": 176,
        "fullcodeline": "if ((use_explicit == MagickFalse) || (strncmp(implicit_vr,\"!!\",2) == 0))"
    },
    {
        "line": 178,
        "fullcodeline": "offset=SeekBlob(image,(MagickOffsetType) -2,SEEK_CUR);"
    },
    {
        "line": 181,
        "fullcodeline": "quantum=4;"
    },
    {
        "line": 260,
        "fullcodeline": "if ((sequence == MagickFalse) && (group == 0x7FE0) && (element == 0x0010))"
    },
    {
        "line": 270,
        "fullcodeline": "if ((length == 1) && (quantum == 1))"
    },
    {
        "line": 271,
        "fullcodeline": "datum=ReadBlobByte(image);"
    },
    {
        "line": 322,
        "fullcodeline": "sequence=MagickFalse;"
    },
    {
        "line": 750,
        "fullcodeline": "data=(unsigned char *) RelinquishMagickMemory(data);"
    },
    {
        "line": 753,
        "fullcodeline": "ThrowFileException(exception,CorruptImageError,\"UnexpectedEndOfFile\","
    },
    {
        "line": 780,
        "fullcodeline": "(void) ReadBlobByte(image);"
    },
    {
        "line": 786,
        "fullcodeline": "stream_info->offsets=(ssize_t *) AcquireQuantumMemory("
    },
    {
        "line": 792,
        "fullcodeline": "offset=TellBlob(image);"
    },
    {
        "line": 805,
        "fullcodeline": "filename[MagickPathExtent];"
    },
    {
        "line": 822,
        "fullcodeline": "tag=(ReadBlobLSBShort(image) << 16) | ReadBlobLSBShort(image);"
    },
    {
        "line": 823,
        "fullcodeline": "length=(size_t) ReadBlobLSBLong(image);"
    },
    {
        "line": 828,
        "fullcodeline": "file=(FILE *) NULL;"
    },
    {
        "line": 829,
        "fullcodeline": "unique_file=AcquireUniqueFileResource(filename);"
    },
    {
        "line": 856,
        "fullcodeline": "jpeg_image=ReadImage(read_info,exception);"
    },
    {
        "line": 886,
        "fullcodeline": "ThrowDCMException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 900,
        "fullcodeline": "(void) ReadBlobByte(image);"
    },
    {
        "line": 907,
        "fullcodeline": "stream_info->offsets=(ssize_t *) AcquireQuantumMemory("
    },
    {
        "line": 913,
        "fullcodeline": "offset=TellBlob(image)+8;"
    },
    {
        "line": 929,
        "fullcodeline": "if ((image->colormap == (PixelInfo *) NULL) &&"
    },
    {
        "line": 930,
        "fullcodeline": "(info.samples_per_pixel == 1))"
    },
    {
        "line": 938,
        "fullcodeline": "one=1;"
    },
    {
        "line": 992,
        "fullcodeline": "tag=(ReadBlobLSBShort(image) << 16) | ReadBlobLSBShort(image);"
    },
    {
        "line": 993,
        "fullcodeline": "stream_info->remaining=(size_t) ReadBlobLSBLong(image);"
    },
    {
        "line": 997,
        "fullcodeline": "stream_info->count=0;"
    },
    {
        "line": 998,
        "fullcodeline": "stream_info->segment_count=ReadBlobLSBLong(image);"
    },
    {
        "line": 1001,
        "fullcodeline": "stream_info->remaining-=64;"
    },
    {
        "line": 1011,
        "fullcodeline": "if ((info.samples_per_pixel > 1) && (image->interlace == PlaneInterlace))"
    },
    {
        "line": 1125,
        "fullcodeline": "ThrowFileException(exception,CorruptImageError,\"UnexpectedEndOfFile\","
    },
    {
        "line": 1140,
        "fullcodeline": "AcquireNextImage(image_info,image,exception);"
    },
    {
        "line": 1146,
        "fullcodeline": "image=SyncNextImageInList(image);"
    },
    {
        "line": 1147,
        "fullcodeline": "status=SetImageProgress(image,LoadImagesTag,TellBlob(image),"
    },
    {
        "line": 1158,
        "fullcodeline": "RelinquishMagickMemory(stream_info->offsets);"
    },
    {
        "line": 1161,
        "fullcodeline": "info.scale=(Quantum *) RelinquishMagickMemory(info.scale);"
    },
    {
        "line": 1163,
        "fullcodeline": "graymap=(int *) RelinquishMagickMemory(graymap);"
    },
    {
        "line": 1165,
        "fullcodeline": "bluemap=(int *) RelinquishMagickMemory(bluemap);"
    },
    {
        "line": 1167,
        "fullcodeline": "greenmap=(int *) RelinquishMagickMemory(greenmap);"
    },
    {
        "line": 1169,
        "fullcodeline": "redmap=(int *) RelinquishMagickMemory(redmap);"
    },
    {
        "line": 173,
        "fullcodeline": "(explicit_file != MagickFalse) ? MagickTrue : MagickFalse;"
    },
    {
        "line": 175,
        "fullcodeline": "(void) CopyMagickString(implicit_vr,explicit_vr,MagickPathExtent);"
    },
    {
        "line": 188,
        "fullcodeline": "quantum=2;"
    },
    {
        "line": 201,
        "fullcodeline": "if (group == 0x0002)"
    },
    {
        "line": 231,
        "fullcodeline": "if (datum != ~0)"
    },
    {
        "line": 247,
        "fullcodeline": "if (use_explicit == MagickFalse)"
    },
    {
        "line": 249,
        "fullcodeline": "for (i=0; dicom_info[i].description != (char *) NULL; i++)"
    },
    {
        "line": 253,
        "fullcodeline": "(void) FormatLocaleFile(stdout,\"0x%04lX %4ld %s-%s (0x%04lx,0x%04lx)\","
    },
    {
        "line": 256,
        "fullcodeline": "if (dicom_info[i].description != (char *) NULL)"
    },
    {
        "line": 258,
        "fullcodeline": "(void) FormatLocaleFile(stdout,\": \");"
    },
    {
        "line": 262,
        "fullcodeline": "if (image_info->verbose != MagickFalse)"
    },
    {
        "line": 318,
        "fullcodeline": "if ((unsigned int) ((group << 16) | element) == 0xFFFEE0DD)"
    },
    {
        "line": 320,
        "fullcodeline": "if (data != (unsigned char *) NULL)"
    },
    {
        "line": 328,
        "fullcodeline": "if (data != (unsigned char *) NULL)"
    },
    {
        "line": 698,
        "fullcodeline": "for (i=0; dicom_info[i].description != (char *) NULL; i++)"
    },
    {
        "line": 702,
        "fullcodeline": "if (dicom_info[i].description != (char *) NULL)"
    },
    {
        "line": 720,
        "fullcodeline": "if (data == (unsigned char *) NULL)"
    },
    {
        "line": 788,
        "fullcodeline": "if (stream_info->offsets == (ssize_t *) NULL)"
    },
    {
        "line": 790,
        "fullcodeline": "for (i=0; i < (ssize_t) stream_info->offset_count; i++)"
    },
    {
        "line": 791,
        "fullcodeline": "stream_info->offsets[i]=(ssize_t) ReadBlobLSBSignedLong(image);"
    },
    {
        "line": 793,
        "fullcodeline": "for (i=0; i < (ssize_t) stream_info->offset_count; i++)"
    },
    {
        "line": 824,
        "fullcodeline": "if (tag == 0xFFFEE0DD)"
    },
    {
        "line": 830,
        "fullcodeline": "if (unique_file != -1)"
    },
    {
        "line": 832,
        "fullcodeline": "if (file == (FILE *) NULL)"
    },
    {
        "line": 839,
        "fullcodeline": "for ( ; length != 0; length--)"
    },
    {
        "line": 850,
        "fullcodeline": "(void) fclose(file);"
    },
    {
        "line": 851,
        "fullcodeline": "(void) FormatLocaleString(read_info->filename,MagickPathExtent,"
    },
    {
        "line": 853,
        "fullcodeline": "if (image->compression == JPEG2000Compression)"
    },
    {
        "line": 857,
        "fullcodeline": "if (jpeg_image != (Image *) NULL)"
    },
    {
        "line": 869,
        "fullcodeline": "(void) RelinquishUniqueFileResource(filename);"
    },
    {
        "line": 909,
        "fullcodeline": "if (stream_info->offsets == (ssize_t *) NULL)"
    },
    {
        "line": 911,
        "fullcodeline": "for (i=0; i < (ssize_t) stream_info->offset_count; i++)"
    },
    {
        "line": 912,
        "fullcodeline": "stream_info->offsets[i]=(ssize_t) ReadBlobLSBSignedLong(image);"
    },
    {
        "line": 914,
        "fullcodeline": "for (i=0; i < (ssize_t) stream_info->offset_count; i++)"
    },
    {
        "line": 915,
        "fullcodeline": "stream_info->offsets[i]+=offset;"
    },
    {
        "line": 939,
        "fullcodeline": "if (colors == 0)"
    },
    {
        "line": 941,
        "fullcodeline": "if (AcquireImageColormap(image,colors,exception) == MagickFalse)"
    },
    {
        "line": 943,
        "fullcodeline": "if (redmap != (int *) NULL)"
    },
    {
        "line": 952,
        "fullcodeline": "if (greenmap != (int *) NULL)"
    },
    {
        "line": 961,
        "fullcodeline": "if (bluemap != (int *) NULL)"
    },
    {
        "line": 970,
        "fullcodeline": "if (graymap != (int *) NULL)"
    },
    {
        "line": 990,
        "fullcodeline": "for (i=0; i < (ssize_t) stream_info->remaining; i++)"
    },
    {
        "line": 999,
        "fullcodeline": "for (i=0; i < 15; i++)"
    },
    {
        "line": 1002,
        "fullcodeline": "if (stream_info->segment_count > 1)"
    },
    {
        "line": 1025,
        "fullcodeline": "for (i=0; i < (ssize_t) info.samples_per_pixel; i++)"
    },
    {
        "line": 1085,
        "fullcodeline": "option=GetImageOption(image_info,\"dcm:display-range\");"
    },
    {
        "line": 1091,
        "fullcodeline": "option=GetImageOption(image_info,\"dcm:window\");"
    },
    {
        "line": 1107,
        "fullcodeline": "option=GetImageOption(image_info,\"dcm:rescale\");"
    },
    {
        "line": 1112,
        "fullcodeline": "status=ReadDCMPixels(image,&info,stream_info,MagickTrue,exception);"
    },
    {
        "line": 1122,
        "fullcodeline": "(void) SetImageColorspace(image,GRAYColorspace,exception);"
    },
    {
        "line": 1133,
        "fullcodeline": "if (image->scene >= (image_info->scene+image_info->number_scenes-1))"
    },
    {
        "line": 1149,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 180,
        "fullcodeline": "ThrowDCMException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 202,
        "fullcodeline": "datum=ReadBlobLSBSignedLong(image);"
    },
    {
        "line": 207,
        "fullcodeline": "if (quantum == 2)"
    },
    {
        "line": 218,
        "fullcodeline": "if ((strncmp(implicit_vr,\"SS\",2) == 0) ||"
    },
    {
        "line": 219,
        "fullcodeline": "(strncmp(implicit_vr,\"US\",2) == 0))"
    },
    {
        "line": 220,
        "fullcodeline": "quantum=2;"
    },
    {
        "line": 232,
        "fullcodeline": "length=(size_t) datum/quantum;"
    },
    {
        "line": 248,
        "fullcodeline": "explicit_vr[0]='\\0';"
    },
    {
        "line": 250,
        "fullcodeline": "if ((group == dicom_info[i].group) &&"
    },
    {
        "line": 321,
        "fullcodeline": "data=(unsigned char *) RelinquishMagickMemory(data);"
    },
    {
        "line": 329,
        "fullcodeline": "data=(unsigned char *) RelinquishMagickMemory(data);"
    },
    {
        "line": 699,
        "fullcodeline": "if ((group == dicom_info[i].group) &&"
    },
    {
        "line": 704,
        "fullcodeline": "attribute=AcquireString(\"dcm:\");"
    },
    {
        "line": 827,
        "fullcodeline": "ThrowDCMException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 831,
        "fullcodeline": "file=fdopen(unique_file,\"wb\");"
    },
    {
        "line": 835,
        "fullcodeline": "ThrowFileException(exception,FileOpenError,"
    },
    {
        "line": 841,
        "fullcodeline": "c=ReadBlobByte(image);"
    },
    {
        "line": 859,
        "fullcodeline": "ResetImagePropertyIterator(image);"
    },
    {
        "line": 860,
        "fullcodeline": "property=GetNextImageProperty(image);"
    },
    {
        "line": 867,
        "fullcodeline": "AppendImageToList(&images,jpeg_image);"
    },
    {
        "line": 910,
        "fullcodeline": "ThrowDCMException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 940,
        "fullcodeline": "colors=one << info.depth;"
    },
    {
        "line": 991,
        "fullcodeline": "(void) ReadBlobByte(image);"
    },
    {
        "line": 994,
        "fullcodeline": "if ((tag != 0xFFFEE000) || (stream_info->remaining <= 64) ||"
    },
    {
        "line": 995,
        "fullcodeline": "(EOFBlob(image) != MagickFalse))"
    },
    {
        "line": 996,
        "fullcodeline": "ThrowDCMException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 1004,
        "fullcodeline": "info.bytes_per_pixel=1;"
    },
    {
        "line": 1005,
        "fullcodeline": "info.depth=8;"
    },
    {
        "line": 1086,
        "fullcodeline": "if (option != (const char *) NULL)"
    },
    {
        "line": 1092,
        "fullcodeline": "if (option != (char *) NULL)"
    },
    {
        "line": 1108,
        "fullcodeline": "if (option != (char *) NULL)"
    },
    {
        "line": 1141,
        "fullcodeline": "if (GetNextImageInList(image) == (Image *) NULL)"
    },
    {
        "line": 1148,
        "fullcodeline": "GetBlobSize(image));"
    },
    {
        "line": 170,
        "fullcodeline": "(isupper((unsigned char) *(explicit_vr+1)) != MagickFalse) ?"
    },
    {
        "line": 189,
        "fullcodeline": "if ((strncmp(explicit_vr,\"OB\",2) == 0) ||"
    },
    {
        "line": 192,
        "fullcodeline": "(strncmp(explicit_vr,\"SQ\",2) == 0))"
    },
    {
        "line": 195,
        "fullcodeline": "quantum=4;"
    },
    {
        "line": 204,
        "fullcodeline": "datum=ReadBlobSignedLong(image);"
    },
    {
        "line": 238,
        "fullcodeline": "quantum=0;"
    },
    {
        "line": 239,
        "fullcodeline": "length=0;"
    },
    {
        "line": 251,
        "fullcodeline": "(element == dicom_info[i].element))"
    },
    {
        "line": 257,
        "fullcodeline": "(void) FormatLocaleFile(stdout,\" %s\",dicom_info[i].description);"
    },
    {
        "line": 263,
        "fullcodeline": "(void) FormatLocaleFile(stdout,\"\\n\");"
    },
    {
        "line": 273,
        "fullcodeline": "if ((length == 1) && (quantum == 2))"
    },
    {
        "line": 700,
        "fullcodeline": "(element == dicom_info[i].element))"
    },
    {
        "line": 705,
        "fullcodeline": "(void) ConcatenateString(&attribute,dicom_info[i].description);"
    },
    {
        "line": 706,
        "fullcodeline": "for (i=0; i < (ssize_t) MagickMax(length,4); i++)"
    },
    {
        "line": 715,
        "fullcodeline": "attribute=DestroyString(attribute);"
    },
    {
        "line": 721,
        "fullcodeline": "(void) FormatLocaleFile(stdout,\"%d\\n\",datum);"
    },
    {
        "line": 789,
        "fullcodeline": "ThrowDCMException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 834,
        "fullcodeline": "(void) RelinquishUniqueFileResource(filename);"
    },
    {
        "line": 842,
        "fullcodeline": "if (c == EOF)"
    },
    {
        "line": 848,
        "fullcodeline": "(void) fputc(c,file);"
    },
    {
        "line": 854,
        "fullcodeline": "(void) FormatLocaleString(read_info->filename,MagickPathExtent,"
    },
    {
        "line": 861,
        "fullcodeline": "while (property != (const char *) NULL)"
    },
    {
        "line": 942,
        "fullcodeline": "ThrowDCMException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 944,
        "fullcodeline": "for (i=0; i < (ssize_t) colors; i++)"
    },
    {
        "line": 953,
        "fullcodeline": "for (i=0; i < (ssize_t) colors; i++)"
    },
    {
        "line": 962,
        "fullcodeline": "for (i=0; i < (ssize_t) colors; i++)"
    },
    {
        "line": 971,
        "fullcodeline": "for (i=0; i < (ssize_t) colors; i++)"
    },
    {
        "line": 1000,
        "fullcodeline": "stream_info->segments[i]=(ssize_t) ReadBlobLSBSignedLong(image);"
    },
    {
        "line": 1006,
        "fullcodeline": "if (stream_info->offset_count > 0)"
    },
    {
        "line": 1027,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 1100,
        "fullcodeline": "flags=ParseGeometry(option,&geometry_info);"
    },
    {
        "line": 1105,
        "fullcodeline": "info.rescale=MagickTrue;"
    },
    {
        "line": 1109,
        "fullcodeline": "info.rescale=IsStringTrue(option);"
    },
    {
        "line": 1110,
        "fullcodeline": "if ((info.window_center != 0) && (info.window_width == 0))"
    },
    {
        "line": 1111,
        "fullcodeline": "info.window_width=info.window_center;"
    },
    {
        "line": 1113,
        "fullcodeline": "if ((status != MagickFalse) && (stream_info->segment_count > 1))"
    },
    {
        "line": 1143,
        "fullcodeline": "image=DestroyImageList(image);"
    },
    {
        "line": 1144,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 191,
        "fullcodeline": "(strncmp(explicit_vr,\"OW\",2) == 0) ||"
    },
    {
        "line": 194,
        "fullcodeline": "(void) ReadBlobLSBShort(image);"
    },
    {
        "line": 209,
        "fullcodeline": "if (group == 0x0002)"
    },
    {
        "line": 275,
        "fullcodeline": "if (group == 0x0002)"
    },
    {
        "line": 342,
        "fullcodeline": "transfer_syntax[MagickPathExtent];"
    },
    {
        "line": 358,
        "fullcodeline": "*transfer_syntax='\\0';"
    },
    {
        "line": 427,
        "fullcodeline": "info.samples_per_pixel=(size_t) datum;"
    },
    {
        "line": 439,
        "fullcodeline": "photometric[i]='\\0';"
    },
    {
        "line": 440,
        "fullcodeline": "info.polarity=LocaleCompare(photometric,\"MONOCHROME1 \") == 0 ?"
    },
    {
        "line": 460,
        "fullcodeline": "number_scenes=StringToUnsignedLong((char *) data);"
    },
    {
        "line": 468,
        "fullcodeline": "height=(size_t) datum;"
    },
    {
        "line": 476,
        "fullcodeline": "width=(size_t) datum;"
    },
    {
        "line": 484,
        "fullcodeline": "info.bits_allocated=(size_t) datum;"
    },
    {
        "line": 485,
        "fullcodeline": "info.bytes_per_pixel=1;"
    },
    {
        "line": 488,
        "fullcodeline": "info.depth=info.bits_allocated;"
    },
    {
        "line": 491,
        "fullcodeline": "info.max_value=(1UL << info.bits_allocated)-1;"
    },
    {
        "line": 492,
        "fullcodeline": "image->depth=info.depth;"
    },
    {
        "line": 500,
        "fullcodeline": "info.significant_bits=(size_t) datum;"
    },
    {
        "line": 501,
        "fullcodeline": "info.bytes_per_pixel=1;"
    },
    {
        "line": 504,
        "fullcodeline": "info.depth=info.significant_bits;"
    },
    {
        "line": 507,
        "fullcodeline": "info.max_value=(1UL << info.significant_bits)-1;"
    },
    {
        "line": 508,
        "fullcodeline": "info.mask=(size_t) GetQuantumRange(info.significant_bits);"
    },
    {
        "line": 509,
        "fullcodeline": "image->depth=info.depth;"
    },
    {
        "line": 524,
        "fullcodeline": "info.signed_data=(size_t) datum;"
    },
    {
        "line": 572,
        "fullcodeline": "colors=(size_t) (length/info.bytes_per_pixel);"
    },
    {
        "line": 573,
        "fullcodeline": "datum=(int) colors;"
    },
    {
        "line": 574,
        "fullcodeline": "graymap=(int *) AcquireQuantumMemory((size_t) colors,"
    },
    {
        "line": 595,
        "fullcodeline": "colors=(size_t) (length/2);"
    },
    {
        "line": 596,
        "fullcodeline": "datum=(int) colors;"
    },
    {
        "line": 597,
        "fullcodeline": "redmap=(int *) AcquireQuantumMemory((size_t) colors,"
    },
    {
        "line": 601,
        "fullcodeline": "p=data;"
    },
    {
        "line": 623,
        "fullcodeline": "colors=(size_t) (length/2);"
    },
    {
        "line": 624,
        "fullcodeline": "datum=(int) colors;"
    },
    {
        "line": 625,
        "fullcodeline": "greenmap=(int *) AcquireQuantumMemory((size_t) colors,"
    },
    {
        "line": 629,
        "fullcodeline": "p=data;"
    },
    {
        "line": 651,
        "fullcodeline": "colors=(size_t) (length/2);"
    },
    {
        "line": 652,
        "fullcodeline": "datum=(int) colors;"
    },
    {
        "line": 653,
        "fullcodeline": "bluemap=(int *) AcquireQuantumMemory((size_t) colors,"
    },
    {
        "line": 657,
        "fullcodeline": "p=data;"
    },
    {
        "line": 707,
        "fullcodeline": "if (isprint((int) data[i]) == MagickFalse)"
    },
    {
        "line": 709,
        "fullcodeline": "if ((i == (ssize_t) length) || (length > 4))"
    },
    {
        "line": 727,
        "fullcodeline": "for (i=0; i < (ssize_t) MagickMax(length,4); i++)"
    },
    {
        "line": 746,
        "fullcodeline": "(void) FormatLocaleFile(stdout,\"\\n\");"
    },
    {
        "line": 844,
        "fullcodeline": "ThrowFileException(exception,CorruptImageError,"
    },
    {
        "line": 865,
        "fullcodeline": "property=GetNextImageProperty(image);"
    },
    {
        "line": 946,
        "fullcodeline": "index=redmap[i];"
    },
    {
        "line": 955,
        "fullcodeline": "index=greenmap[i];"
    },
    {
        "line": 964,
        "fullcodeline": "index=bluemap[i];"
    },
    {
        "line": 973,
        "fullcodeline": "index=graymap[i];"
    },
    {
        "line": 1029,
        "fullcodeline": "q=GetAuthenticPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 1101,
        "fullcodeline": "if (flags & RhoValue)"
    },
    {
        "line": 1103,
        "fullcodeline": "if (flags & SigmaValue)"
    },
    {
        "line": 1115,
        "fullcodeline": "if (stream_info->offset_count > 0)"
    },
    {
        "line": 1118,
        "fullcodeline": "(void) ReadDCMPixels(image,&info,stream_info,MagickFalse,exception);"
    },
    {
        "line": 190,
        "fullcodeline": "(strncmp(explicit_vr,\"UN\",2) == 0) ||"
    },
    {
        "line": 210,
        "fullcodeline": "datum=ReadBlobLSBSignedShort(image);"
    },
    {
        "line": 222,
        "fullcodeline": "if ((strncmp(implicit_vr,\"UL\",2) == 0) ||"
    },
    {
        "line": 224,
        "fullcodeline": "(strncmp(implicit_vr,\"FL\",2) == 0))"
    },
    {
        "line": 225,
        "fullcodeline": "quantum=4;"
    },
    {
        "line": 276,
        "fullcodeline": "datum=ReadBlobLSBSignedShort(image);"
    },
    {
        "line": 347,
        "fullcodeline": "if ((datum == 0) && (explicit_retry == MagickFalse))"
    },
    {
        "line": 359,
        "fullcodeline": "if (data != (unsigned char *) NULL)"
    },
    {
        "line": 362,
        "fullcodeline": "if (image_info->verbose != MagickFalse)"
    },
    {
        "line": 435,
        "fullcodeline": "if (data == (unsigned char *) NULL)"
    },
    {
        "line": 437,
        "fullcodeline": "for (i=0; i < (ssize_t) MagickMin(length,MagickPathExtent-1); i++)"
    },
    {
        "line": 449,
        "fullcodeline": "if (datum == 1)"
    },
    {
        "line": 458,
        "fullcodeline": "if (data == (unsigned char *) NULL)"
    },
    {
        "line": 486,
        "fullcodeline": "if (datum > 8)"
    },
    {
        "line": 489,
        "fullcodeline": "if (info.depth > 32)"
    },
    {
        "line": 502,
        "fullcodeline": "if (info.significant_bits > 8)"
    },
    {
        "line": 505,
        "fullcodeline": "if (info.depth > 32)"
    },
    {
        "line": 532,
        "fullcodeline": "if (data != (unsigned char *) NULL)"
    },
    {
        "line": 541,
        "fullcodeline": "if (data != (unsigned char *) NULL)"
    },
    {
        "line": 550,
        "fullcodeline": "if (data != (unsigned char *) NULL)"
    },
    {
        "line": 560,
        "fullcodeline": "if (data != (unsigned char *) NULL)"
    },
    {
        "line": 570,
        "fullcodeline": "if (data == (unsigned char *) NULL)"
    },
    {
        "line": 576,
        "fullcodeline": "if (graymap == (int *) NULL)"
    },
    {
        "line": 578,
        "fullcodeline": "for (i=0; i < (ssize_t) colors; i++)"
    },
    {
        "line": 593,
        "fullcodeline": "if (data == (unsigned char *) NULL)"
    },
    {
        "line": 599,
        "fullcodeline": "if (redmap == (int *) NULL)"
    },
    {
        "line": 602,
        "fullcodeline": "for (i=0; i < (ssize_t) colors; i++)"
    },
    {
        "line": 621,
        "fullcodeline": "if (data == (unsigned char *) NULL)"
    },
    {
        "line": 627,
        "fullcodeline": "if (greenmap == (int *) NULL)"
    },
    {
        "line": 630,
        "fullcodeline": "for (i=0; i < (ssize_t) colors; i++)"
    },
    {
        "line": 649,
        "fullcodeline": "if (data == (unsigned char *) NULL)"
    },
    {
        "line": 655,
        "fullcodeline": "if (bluemap == (int *) NULL)"
    },
    {
        "line": 658,
        "fullcodeline": "for (i=0; i < (ssize_t) colors; i++)"
    },
    {
        "line": 711,
        "fullcodeline": "(void) SubstituteString(&attribute,\" \",\"\");"
    },
    {
        "line": 712,
        "fullcodeline": "(void) SetImageProperty(image,attribute,(char *) data,"
    },
    {
        "line": 728,
        "fullcodeline": "if (isprint((int) data[i]) == MagickFalse)"
    },
    {
        "line": 730,
        "fullcodeline": "if ((i != (ssize_t) length) && (length <= 4))"
    },
    {
        "line": 735,
        "fullcodeline": "datum=0;"
    },
    {
        "line": 863,
        "fullcodeline": "(void) SetImageProperty(jpeg_image,property,"
    },
    {
        "line": 947,
        "fullcodeline": "if ((info.scale != (Quantum *) NULL) &&"
    },
    {
        "line": 956,
        "fullcodeline": "if ((info.scale != (Quantum *) NULL) &&"
    },
    {
        "line": 965,
        "fullcodeline": "if ((info.scale != (Quantum *) NULL) &&"
    },
    {
        "line": 974,
        "fullcodeline": "if ((info.scale != (Quantum *) NULL) &&"
    },
    {
        "line": 1007,
        "fullcodeline": "(void) SeekBlob(image,(MagickOffsetType) stream_info->offsets[0]+"
    },
    {
        "line": 1030,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 1032,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 1065,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 1067,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 1088,
        "fullcodeline": "if (LocaleCompare(option,\"reset\") == 0)"
    },
    {
        "line": 1089,
        "fullcodeline": "info.window_width=0;"
    },
    {
        "line": 1102,
        "fullcodeline": "info.window_center=geometry_info.rho;"
    },
    {
        "line": 1104,
        "fullcodeline": "info.window_width=geometry_info.sigma;"
    },
    {
        "line": 212,
        "fullcodeline": "datum=ReadBlobSignedShort(image);"
    },
    {
        "line": 223,
        "fullcodeline": "(strncmp(implicit_vr,\"SL\",2) == 0) ||"
    },
    {
        "line": 278,
        "fullcodeline": "datum=ReadBlobSignedShort(image);"
    },
    {
        "line": 281,
        "fullcodeline": "if ((length == 1) && (quantum == 4))"
    },
    {
        "line": 349,
        "fullcodeline": "explicit_retry=MagickTrue;"
    },
    {
        "line": 351,
        "fullcodeline": "group=0;"
    },
    {
        "line": 352,
        "fullcodeline": "element=0;"
    },
    {
        "line": 365,
        "fullcodeline": "if (strncmp(transfer_syntax,\"1.2.840.10008.1.2\",17) == 0)"
    },
    {
        "line": 371,
        "fullcodeline": "type=1;"
    },
    {
        "line": 372,
        "fullcodeline": "subtype=0;"
    },
    {
        "line": 450,
        "fullcodeline": "image->interlace=PlaneInterlace;"
    },
    {
        "line": 487,
        "fullcodeline": "info.bytes_per_pixel=2;"
    },
    {
        "line": 490,
        "fullcodeline": "ThrowDCMException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 503,
        "fullcodeline": "info.bytes_per_pixel=2;"
    },
    {
        "line": 506,
        "fullcodeline": "ThrowDCMException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 533,
        "fullcodeline": "info.window_center=StringToDouble((char *) data, (char **) NULL);"
    },
    {
        "line": 542,
        "fullcodeline": "info.window_width=StringToDouble((char *) data, (char **) NULL);"
    },
    {
        "line": 551,
        "fullcodeline": "info.rescale_intercept=StringToDouble((char *) data,"
    },
    {
        "line": 561,
        "fullcodeline": "info.rescale_slope=StringToDouble((char *) data, (char **) NULL);"
    },
    {
        "line": 577,
        "fullcodeline": "ThrowDCMException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 579,
        "fullcodeline": "if (info.bytes_per_pixel == 1)"
    },
    {
        "line": 600,
        "fullcodeline": "ThrowDCMException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 608,
        "fullcodeline": "redmap[i]=(int) index;"
    },
    {
        "line": 609,
        "fullcodeline": "p+=2;"
    },
    {
        "line": 628,
        "fullcodeline": "ThrowDCMException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 636,
        "fullcodeline": "greenmap[i]=(int) index;"
    },
    {
        "line": 637,
        "fullcodeline": "p+=2;"
    },
    {
        "line": 656,
        "fullcodeline": "ThrowDCMException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 664,
        "fullcodeline": "bluemap[i]=(int) index;"
    },
    {
        "line": 665,
        "fullcodeline": "p+=2;"
    },
    {
        "line": 680,
        "fullcodeline": "if ((data != (unsigned char *) NULL) &&"
    },
    {
        "line": 681,
        "fullcodeline": "(strncmp((char *) data,\"INVERSE\",7) == 0))"
    },
    {
        "line": 682,
        "fullcodeline": "info.polarity=MagickTrue;"
    },
    {
        "line": 736,
        "fullcodeline": "for (j=(ssize_t) length-1; j >= 0; j--)"
    },
    {
        "line": 737,
        "fullcodeline": "datum=(256*datum+data[j]);"
    },
    {
        "line": 738,
        "fullcodeline": "(void) FormatLocaleFile(stdout,\"%d\",datum);"
    },
    {
        "line": 864,
        "fullcodeline": "GetImageProperty(image,property,exception),exception);"
    },
    {
        "line": 948,
        "fullcodeline": "(index <= (int) info.max_value))"
    },
    {
        "line": 949,
        "fullcodeline": "index=(int) info.scale[index];"
    },
    {
        "line": 957,
        "fullcodeline": "(index <= (int) info.max_value))"
    },
    {
        "line": 958,
        "fullcodeline": "index=(int) info.scale[index];"
    },
    {
        "line": 966,
        "fullcodeline": "(index <= (int) info.max_value))"
    },
    {
        "line": 967,
        "fullcodeline": "index=(int) info.scale[index];"
    },
    {
        "line": 975,
        "fullcodeline": "(index <= (int) info.max_value))"
    },
    {
        "line": 976,
        "fullcodeline": "index=(int) info.scale[index];"
    },
    {
        "line": 1063,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 1069,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 1116,
        "fullcodeline": "(void) SeekBlob(image,(MagickOffsetType) stream_info->offsets[0]+"
    },
    {
        "line": 283,
        "fullcodeline": "if (group == 0x0002)"
    },
    {
        "line": 350,
        "fullcodeline": "(void) SeekBlob(image,(MagickOffsetType) 0,SEEK_SET);"
    },
    {
        "line": 353,
        "fullcodeline": "if (image_info->verbose != MagickFalse)"
    },
    {
        "line": 360,
        "fullcodeline": "(void) CopyMagickString(transfer_syntax,(char *) data,"
    },
    {
        "line": 363,
        "fullcodeline": "(void) FormatLocaleFile(stdout,\"transfer_syntax=%s\\n\","
    },
    {
        "line": 580,
        "fullcodeline": "graymap[i]=(int) data[i];"
    },
    {
        "line": 604,
        "fullcodeline": "if (image->endian == MSBEndian)"
    },
    {
        "line": 632,
        "fullcodeline": "if (image->endian == MSBEndian)"
    },
    {
        "line": 660,
        "fullcodeline": "if (image->endian == MSBEndian)"
    },
    {
        "line": 741,
        "fullcodeline": "for (i=0; i < (ssize_t) length; i++)"
    },
    {
        "line": 1071,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 227,
        "fullcodeline": "if (strncmp(implicit_vr,\"FD\",2) != 0)"
    },
    {
        "line": 228,
        "fullcodeline": "quantum=1;"
    },
    {
        "line": 284,
        "fullcodeline": "datum=ReadBlobLSBSignedLong(image);"
    },
    {
        "line": 373,
        "fullcodeline": "if (strlen(transfer_syntax) > 17)"
    },
    {
        "line": 375,
        "fullcodeline": "count=(ssize_t) sscanf(transfer_syntax+17,\".%d.%d\",&type,"
    },
    {
        "line": 582,
        "fullcodeline": "graymap[i]=(int) ((short *) data)[i];"
    },
    {
        "line": 605,
        "fullcodeline": "index=(unsigned short) ((*p << 8) | *(p+1));"
    },
    {
        "line": 633,
        "fullcodeline": "index=(unsigned short) ((*p << 8) | *(p+1));"
    },
    {
        "line": 661,
        "fullcodeline": "index=(unsigned short) ((*p << 8) | *(p+1));"
    },
    {
        "line": 742,
        "fullcodeline": "if (isprint((int) data[i]) != MagickFalse)"
    },
    {
        "line": 230,
        "fullcodeline": "quantum=8;"
    },
    {
        "line": 286,
        "fullcodeline": "datum=ReadBlobSignedLong(image);"
    },
    {
        "line": 289,
        "fullcodeline": "if ((quantum != 0) && (length != 0))"
    },
    {
        "line": 299,
        "fullcodeline": "count=ReadBlob(image,(size_t) quantum*length,data);"
    },
    {
        "line": 309,
        "fullcodeline": "data[length*quantum]='\\0';"
    },
    {
        "line": 354,
        "fullcodeline": "(void) FormatLocaleFile(stdout,"
    },
    {
        "line": 385,
        "fullcodeline": "image->endian=LSBEndian;"
    },
    {
        "line": 390,
        "fullcodeline": "image->endian=MSBEndian;"
    },
    {
        "line": 406,
        "fullcodeline": "image->compression=RLECompression;"
    },
    {
        "line": 607,
        "fullcodeline": "index=(unsigned short) (*p | (*(p+1) << 8));"
    },
    {
        "line": 635,
        "fullcodeline": "index=(unsigned short) (*p | (*(p+1) << 8));"
    },
    {
        "line": 663,
        "fullcodeline": "index=(unsigned short) (*p | (*(p+1) << 8));"
    },
    {
        "line": 1038,
        "fullcodeline": "SetPixelRed(image,ScaleCharToQuantum((unsigned char)"
    },
    {
        "line": 1044,
        "fullcodeline": "SetPixelGreen(image,ScaleCharToQuantum((unsigned char)"
    },
    {
        "line": 1050,
        "fullcodeline": "SetPixelBlue(image,ScaleCharToQuantum((unsigned char)"
    },
    {
        "line": 1056,
        "fullcodeline": "SetPixelAlpha(image,ScaleCharToQuantum((unsigned char)"
    },
    {
        "line": 291,
        "fullcodeline": "if (length > GetBlobSize(image))"
    },
    {
        "line": 297,
        "fullcodeline": "if (data == (unsigned char *) NULL)"
    },
    {
        "line": 300,
        "fullcodeline": "if (count != (ssize_t) (quantum*length))"
    },
    {
        "line": 378,
        "fullcodeline": "ThrowDCMException(CorruptImageError,"
    },
    {
        "line": 743,
        "fullcodeline": "(void) FormatLocaleFile(stdout,\"%c\",data[i]);"
    },
    {
        "line": 292,
        "fullcodeline": "ThrowReaderException(CorruptImageError,"
    },
    {
        "line": 294,
        "fullcodeline": "if (~length >= 1)"
    },
    {
        "line": 295,
        "fullcodeline": "data=(unsigned char *) AcquireQuantumMemory(length+1,quantum*"
    },
    {
        "line": 298,
        "fullcodeline": "ThrowDCMException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 306,
        "fullcodeline": "ThrowDCMException(CorruptImageError,"
    },
    {
        "line": 395,
        "fullcodeline": "if ((subtype >= 80) && (subtype <= 81))"
    },
    {
        "line": 396,
        "fullcodeline": "image->compression=JPEGCompression;"
    },
    {
        "line": 745,
        "fullcodeline": "(void) FormatLocaleFile(stdout,\"%c\",'.');"
    },
    {
        "line": 302,
        "fullcodeline": "if (image_info->verbose != MagickFalse)"
    },
    {
        "line": 314,
        "fullcodeline": "sequence=MagickTrue;"
    },
    {
        "line": 1039,
        "fullcodeline": "ReadDCMByte(stream_info,image)),q);"
    },
    {
        "line": 1045,
        "fullcodeline": "ReadDCMByte(stream_info,image)),q);"
    },
    {
        "line": 1051,
        "fullcodeline": "ReadDCMByte(stream_info,image)),q);"
    },
    {
        "line": 1057,
        "fullcodeline": "ReadDCMByte(stream_info,image)),q);"
    },
    {
        "line": 303,
        "fullcodeline": "(void) FormatLocaleFile(stdout,\"count=%d quantum=%d \""
    },
    {
        "line": 398,
        "fullcodeline": "if ((subtype >= 90) && (subtype <= 93))"
    },
    {
        "line": 399,
        "fullcodeline": "image->compression=JPEG2000Compression;"
    },
    {
        "line": 401,
        "fullcodeline": "image->compression=JPEGCompression;"
    }
]