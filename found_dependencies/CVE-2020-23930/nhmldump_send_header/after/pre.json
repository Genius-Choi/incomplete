[
    {
        "line": 4,
        "fullcodeline": "char nhml[1024];"
    },
    {
        "line": 9,
        "fullcodeline": "ctx->szRootName = \"NHNTStream\";"
    },
    {
        "line": 20,
        "fullcodeline": "sprintf(nhml, \"<%s version=\\\"1.0\\\" \", ctx->szRootName);"
    },
    {
        "line": 21,
        "fullcodeline": "gf_bs_write_data(ctx->bs_w, nhml, (u32) strlen(nhml));"
    },
    {
        "line": 24,
        "fullcodeline": "NHML_PRINT_UINT(GF_PROP_PID_ID, NULL, \"trackID\")"
    },
    {
        "line": 25,
        "fullcodeline": "NHML_PRINT_UINT(GF_PROP_PID_TIMESCALE, NULL, \"timeScale\")"
    },
    {
        "line": 27,
        "fullcodeline": "p = gf_filter_pid_get_property(ctx->ipid, GF_PROP_PID_IN_IOD);"
    },
    {
        "line": 71,
        "fullcodeline": "NHML_PRINT_4CC(0, \"codec_vendor\", \"codecVendor\")"
    },
    {
        "line": 72,
        "fullcodeline": "NHML_PRINT_UINT(0, \"codec_version\", \"codecVersion\")"
    },
    {
        "line": 73,
        "fullcodeline": "NHML_PRINT_UINT(0, \"codec_revision\", \"codecRevision\")"
    },
    {
        "line": 74,
        "fullcodeline": "NHML_PRINT_STRING(0, \"compressor_name\", \"compressorName\")"
    },
    {
        "line": 75,
        "fullcodeline": "NHML_PRINT_UINT(0, \"temporal_quality\", \"temporalQuality\")"
    },
    {
        "line": 76,
        "fullcodeline": "NHML_PRINT_UINT(0, \"spatial_quality\", \"spatialQuality\")"
    },
    {
        "line": 77,
        "fullcodeline": "NHML_PRINT_UINT(0, \"hres\", \"horizontalResolution\")"
    },
    {
        "line": 78,
        "fullcodeline": "NHML_PRINT_UINT(0, \"vres\", \"verticalResolution\")"
    },
    {
        "line": 79,
        "fullcodeline": "NHML_PRINT_UINT(GF_PROP_PID_BIT_DEPTH_Y, NULL, \"bitDepth\")"
    },
    {
        "line": 81,
        "fullcodeline": "NHML_PRINT_STRING(0, \"meta:xmlns\", \"xml_namespace\")"
    },
    {
        "line": 82,
        "fullcodeline": "NHML_PRINT_STRING(0, \"meta:schemaloc\", \"xml_schema_location\")"
    },
    {
        "line": 83,
        "fullcodeline": "NHML_PRINT_STRING(0, \"meta:mime\", \"mime_type\")"
    },
    {
        "line": 85,
        "fullcodeline": "NHML_PRINT_STRING(0, \"meta:config\", \"config\")"
    },
    {
        "line": 86,
        "fullcodeline": "NHML_PRINT_STRING(0, \"meta:aux_mimes\", \"aux_mime_type\")"
    },
    {
        "line": 127,
        "fullcodeline": "NHML_PRINT_STRING(0, \"meta:encoding\", \"encoding\")"
    },
    {
        "line": 128,
        "fullcodeline": "NHML_PRINT_STRING(0, \"meta:contentEncoding\", \"content_encoding\")"
    },
    {
        "line": 129,
        "fullcodeline": "ctx->uncompress = GF_FALSE;"
    },
    {
        "line": 141,
        "fullcodeline": "sprintf(nhml, \">\\n\");"
    },
    {
        "line": 142,
        "fullcodeline": "gf_bs_write_data(ctx->bs_w, nhml, (u32) strlen(nhml));"
    },
    {
        "line": 144,
        "fullcodeline": "gf_bs_get_content_no_truncate(ctx->bs_w, &ctx->nhml_buffer, &size, &ctx->nhml_buffer_size);"
    },
    {
        "line": 151,
        "fullcodeline": "dst_pck = gf_filter_pck_new_alloc(ctx->opid_nhml, size, &output);"
    },
    {
        "line": 153,
        "fullcodeline": "gf_filter_pck_set_framing(dst_pck, GF_TRUE, GF_FALSE);"
    },
    {
        "line": 14,
        "fullcodeline": "if (!ctx->filep) {"
    },
    {
        "line": 28,
        "fullcodeline": "if (p && p->value.boolean) {"
    },
    {
        "line": 33,
        "fullcodeline": "if (ctx->oti && (ctx->oti<GF_CODECID_LAST_MPEG4_MAPPING)) {"
    },
    {
        "line": 48,
        "fullcodeline": "if (ctx->w && ctx->h) {"
    },
    {
        "line": 88,
        "fullcodeline": "if (ctx->codecid == GF_CODECID_DIMS) {"
    },
    {
        "line": 11,
        "fullcodeline": "ctx->szRootName = \"DIMSStream\";"
    },
    {
        "line": 15,
        "fullcodeline": "sprintf(nhml, \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\\n\");"
    },
    {
        "line": 16,
        "fullcodeline": "gf_bs_write_data(ctx->bs_w, nhml, (u32) strlen(nhml));"
    },
    {
        "line": 29,
        "fullcodeline": "sprintf(nhml, \"inRootOD=\\\"yes\\\" \");"
    },
    {
        "line": 30,
        "fullcodeline": "gf_bs_write_data(ctx->bs_w, nhml, (u32) strlen(nhml));"
    },
    {
        "line": 34,
        "fullcodeline": "sprintf(nhml, \"streamType=\\\"%d\\\" objectTypeIndication=\\\"%d\\\" \", ctx->streamtype, ctx->oti);"
    },
    {
        "line": 35,
        "fullcodeline": "gf_bs_write_data(ctx->bs_w, nhml, (u32)strlen(nhml));"
    },
    {
        "line": 94,
        "fullcodeline": "NHML_PRINT_UINT(0, \"dims:profile\", \"profile\")"
    },
    {
        "line": 95,
        "fullcodeline": "NHML_PRINT_UINT(0, \"dims:level\", \"level\")"
    },
    {
        "line": 96,
        "fullcodeline": "NHML_PRINT_UINT(0, \"dims:pathComponents\", \"pathComponents\")"
    },
    {
        "line": 98,
        "fullcodeline": "p = gf_filter_pid_get_property_str(ctx->ipid, \"dims:fullRequestHost\");"
    },
    {
        "line": 103,
        "fullcodeline": "p = gf_filter_pid_get_property_str(ctx->ipid, \"dims:streamType\");"
    },
    {
        "line": 108,
        "fullcodeline": "p = gf_filter_pid_get_property_str(ctx->ipid, \"dims:redundant\");"
    },
    {
        "line": 113,
        "fullcodeline": "NHML_PRINT_UINT(0, \"dims:scriptTypes\", \"scriptTypes\")"
    },
    {
        "line": 118,
        "fullcodeline": "sprintf(nhml, \"specificInfoFile=\\\"%s\\\" \", gf_file_basename(ctx->info_file) );"
    },
    {
        "line": 119,
        "fullcodeline": "gf_bs_write_data(ctx->bs_w, nhml, (u32) strlen(nhml));"
    },
    {
        "line": 121,
        "fullcodeline": "dst_pck = gf_filter_pck_new_shared(ctx->opid_info, ctx->dcfg, ctx->dcfg_size, NULL);"
    },
    {
        "line": 122,
        "fullcodeline": "gf_filter_pck_set_framing(dst_pck, GF_TRUE, GF_TRUE);"
    },
    {
        "line": 123,
        "fullcodeline": "gf_filter_pck_set_readonly(dst_pck);"
    },
    {
        "line": 124,
        "fullcodeline": "gf_filter_pck_send(dst_pck);"
    },
    {
        "line": 138,
        "fullcodeline": "sprintf(nhml, \"baseMediaFile=\\\"%s\\\" \", gf_file_basename(ctx->media_file) );"
    },
    {
        "line": 139,
        "fullcodeline": "gf_bs_write_data(ctx->bs_w, nhml, (u32) strlen(nhml));"
    },
    {
        "line": 147,
        "fullcodeline": "gf_fwrite(ctx->nhml_buffer, size, ctx->filep);"
    },
    {
        "line": 37,
        "fullcodeline": "p = gf_filter_pid_get_property(ctx->ipid, GF_PROP_PID_SUBTYPE);"
    },
    {
        "line": 89,
        "fullcodeline": "if (gf_filter_pid_get_property_str(ctx->ipid, \"meta:xmlns\")==NULL) {"
    },
    {
        "line": 131,
        "fullcodeline": "if (!strcmp(p->value.string, \"deflate\")) ctx->uncompress = GF_TRUE;"
    },
    {
        "line": 53,
        "fullcodeline": "sprintf(nhml, \"width=\\\"%d\\\" height=\\\"%d\\\" \", ctx->w, ctx->h);"
    },
    {
        "line": 54,
        "fullcodeline": "gf_bs_write_data(ctx->bs_w, nhml, (u32) strlen(nhml));"
    },
    {
        "line": 60,
        "fullcodeline": "else if (ctx->sr && ctx->chan) {"
    },
    {
        "line": 90,
        "fullcodeline": "sprintf(nhml, \"xmlns=\\\"http://www.3gpp.org/richmedia\\\" \");"
    },
    {
        "line": 91,
        "fullcodeline": "gf_bs_write_data(ctx->bs_w, nhml, (u32) strlen(nhml));"
    },
    {
        "line": 100,
        "fullcodeline": "sprintf(nhml, \"useFullRequestHost=\\\"%s\\\" \", p->value.boolean ? \"yes\" : \"no\");"
    },
    {
        "line": 101,
        "fullcodeline": "gf_bs_write_data(ctx->bs_w, nhml, (u32) strlen(nhml));"
    },
    {
        "line": 105,
        "fullcodeline": "sprintf(nhml, \"stream_type=\\\"%s\\\" \", p->value.boolean ? \"primary\" : \"secondary\");"
    },
    {
        "line": 106,
        "fullcodeline": "gf_bs_write_data(ctx->bs_w, nhml, (u32) strlen(nhml));"
    },
    {
        "line": 110,
        "fullcodeline": "sprintf(nhml, \"contains_redundant=\\\"%s\\\" \", (p->value.uint==1) ? \"main\" : ((p->value.uint==1) ? \"redundant\" : \"main+redundant\") );"
    },
    {
        "line": 111,
        "fullcodeline": "gf_bs_write_data(ctx->bs_w, nhml, (u32) strlen(nhml));"
    },
    {
        "line": 39,
        "fullcodeline": "sprintf(nhml, \"%s=\\\"%s\\\" \", \"mediaType\", gf_4cc_to_str(p->value.uint));"
    },
    {
        "line": 40,
        "fullcodeline": "gf_bs_write_data(ctx->bs_w, nhml, (u32) strlen(nhml));"
    },
    {
        "line": 42,
        "fullcodeline": "NHML_PRINT_4CC(GF_PROP_PID_ISOM_SUBTYPE, \"mediaSubType\", \"mediaSubType\")"
    },
    {
        "line": 61,
        "fullcodeline": "sprintf(nhml, \"sampleRate=\\\"%d\\\" numChannels=\\\"%d\\\" \", ctx->sr, ctx->chan);"
    },
    {
        "line": 62,
        "fullcodeline": "gf_bs_write_data(ctx->bs_w, nhml, (u32) strlen(nhml));"
    },
    {
        "line": 63,
        "fullcodeline": "sprintf(nhml, \"sampleRate=\\\"%d\\\" numChannels=\\\"%d\\\" \", ctx->sr, ctx->chan);"
    },
    {
        "line": 64,
        "fullcodeline": "gf_bs_write_data(ctx->bs_w, nhml, (u32) strlen(nhml));"
    },
    {
        "line": 65,
        "fullcodeline": "p = gf_filter_pid_get_property(ctx->ipid, GF_PROP_PID_AUDIO_FORMAT);"
    },
    {
        "line": 68,
        "fullcodeline": "gf_bs_write_data(ctx->bs_w, nhml, (u32) strlen(nhml));"
    },
    {
        "line": 133,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_AUTHOR, (\"[NHMLMx] content_encoding %s not supported\\n\", p->value.string ));"
    },
    {
        "line": 44,
        "fullcodeline": "NHML_PRINT_4CC(GF_PROP_PID_CODECID, NULL, \"codecID\")"
    },
    {
        "line": 67,
        "fullcodeline": "sprintf(nhml, \"bitsPerSample=\\\"%d\\\" \", gf_audio_fmt_bit_depth(p->value.uint));"
    }
]