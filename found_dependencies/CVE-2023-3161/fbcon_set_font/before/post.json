[
    {
        "line": 4,
        "fullcodeline": "struct fb_info *info = fbcon_info_from_console(vc->vc_num);"
    },
    {
        "line": 5,
        "fullcodeline": "unsigned charcount = font->charcount;"
    },
    {
        "line": 6,
        "fullcodeline": "int w = font->width;"
    },
    {
        "line": 7,
        "fullcodeline": "int h = font->height;"
    },
    {
        "line": 10,
        "fullcodeline": "u8 *new_data, *data = font->data;"
    },
    {
        "line": 11,
        "fullcodeline": "int pitch = PITCH(font->width);"
    },
    {
        "line": 32,
        "fullcodeline": "size = CALC_FONTSZ(h, pitch, charcount);"
    },
    {
        "line": 34,
        "fullcodeline": "new_data = kmalloc(FONT_EXTRA_WORDS * sizeof(int) + size, GFP_USER);"
    },
    {
        "line": 39,
        "fullcodeline": "memset(new_data, 0, FONT_EXTRA_WORDS * sizeof(int));"
    },
    {
        "line": 41,
        "fullcodeline": "new_data += FONT_EXTRA_WORDS * sizeof(int);"
    },
    {
        "line": 42,
        "fullcodeline": "FNTSIZE(new_data) = size;"
    },
    {
        "line": 43,
        "fullcodeline": "REFCOUNT(new_data) = 0;\t/* usage counter */"
    },
    {
        "line": 50,
        "fullcodeline": "csum = crc32(0, new_data, size);"
    },
    {
        "line": 52,
        "fullcodeline": "FNTSUM(new_data) = csum;"
    },
    {
        "line": 15,
        "fullcodeline": "if (charcount != 256 && charcount != 512)"
    },
    {
        "line": 19,
        "fullcodeline": "if (w > FBCON_SWAP(info->var.rotate, info->var.xres, info->var.yres) ||"
    },
    {
        "line": 24,
        "fullcodeline": "if (!(info->pixmap.blit_x & (1 << (font->width - 1))) ||"
    },
    {
        "line": 29,
        "fullcodeline": "if (fbcon_invalid_charcount(info, charcount))"
    },
    {
        "line": 36,
        "fullcodeline": "if (!new_data)"
    },
    {
        "line": 44,
        "fullcodeline": "for (i=0; i< charcount; i++) {"
    },
    {
        "line": 54,
        "fullcodeline": "for (i = first_fb_vc; i <= last_fb_vc; i++) {"
    },
    {
        "line": 68,
        "fullcodeline": "return fbcon_do_set_font(vc, font->width, font->height, charcount, new_data, 1);"
    },
    {
        "line": 20,
        "fullcodeline": "h > FBCON_SWAP(info->var.rotate, info->var.yres, info->var.xres))"
    },
    {
        "line": 25,
        "fullcodeline": "!(info->pixmap.blit_y & (1 << (font->height - 1))))"
    },
    {
        "line": 45,
        "fullcodeline": "memcpy(new_data + i*h*pitch, data +  i*32*pitch, h*pitch);"
    },
    {
        "line": 16,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 21,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 26,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 30,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 37,
        "fullcodeline": "return -ENOMEM;"
    },
    {
        "line": 57,
        "fullcodeline": "if (fb_display[i].userfont &&"
    },
    {
        "line": 62,
        "fullcodeline": "!memcmp(fb_display[i].fontdata, new_data, size)) {"
    },
    {
        "line": 63,
        "fullcodeline": "kfree(new_data - FONT_EXTRA_WORDS * sizeof(int));"
    },
    {
        "line": 64,
        "fullcodeline": "new_data = (u8 *)fb_display[i].fontdata;"
    },
    {
        "line": 61,
        "fullcodeline": "tmp->vc_font.width == w &&"
    },
    {
        "line": 60,
        "fullcodeline": "FNTSIZE(fb_display[i].fontdata) == size &&"
    },
    {
        "line": 59,
        "fullcodeline": "FNTSUM(fb_display[i].fontdata) == csum &&"
    }
]