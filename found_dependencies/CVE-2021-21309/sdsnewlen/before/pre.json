[
    {
        "line": 4,
        "fullcodeline": "char type = sdsReqType(initlen);"
    },
    {
        "line": 8,
        "fullcodeline": "int hdrlen = sdsHdrSize(type);"
    },
    {
        "line": 11,
        "fullcodeline": "sh = s_malloc(hdrlen+initlen+1);"
    },
    {
        "line": 17,
        "fullcodeline": "s = (char*)sh+hdrlen;"
    },
    {
        "line": 55,
        "fullcodeline": "s[initlen] = '\\0';"
    },
    {
        "line": 7,
        "fullcodeline": "if (type == SDS_TYPE_5 && initlen == 0) type = SDS_TYPE_8;"
    },
    {
        "line": 12,
        "fullcodeline": "if (sh == NULL) return NULL;"
    },
    {
        "line": 13,
        "fullcodeline": "if (init==SDS_NOINIT)"
    },
    {
        "line": 18,
        "fullcodeline": "fp = ((unsigned char*)s)-1;"
    },
    {
        "line": 53,
        "fullcodeline": "if (initlen && init)"
    },
    {
        "line": 14,
        "fullcodeline": "init = NULL;"
    },
    {
        "line": 54,
        "fullcodeline": "memcpy(s, init, initlen);"
    },
    {
        "line": 25,
        "fullcodeline": "SDS_HDR_VAR(8,s);"
    },
    {
        "line": 32,
        "fullcodeline": "SDS_HDR_VAR(16,s);"
    },
    {
        "line": 39,
        "fullcodeline": "SDS_HDR_VAR(32,s);"
    },
    {
        "line": 46,
        "fullcodeline": "SDS_HDR_VAR(64,s);"
    },
    {
        "line": 15,
        "fullcodeline": "else if (!init)"
    },
    {
        "line": 21,
        "fullcodeline": "*fp = type | (initlen << SDS_TYPE_BITS);"
    },
    {
        "line": 16,
        "fullcodeline": "memset(sh, 0, hdrlen+initlen+1);"
    }
]