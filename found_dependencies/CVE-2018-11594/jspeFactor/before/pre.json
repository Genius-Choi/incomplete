[
    {
        "line": 155,
        "fullcodeline": "JSP_MATCH(LEX_EOF);"
    },
    {
        "line": 2,
        "fullcodeline": "if (lex->tk==LEX_ID) {"
    },
    {
        "line": 3,
        "fullcodeline": "JsVar *a = jspGetNamedVariable(jslGetTokenValueAsString(lex));"
    },
    {
        "line": 4,
        "fullcodeline": "JSP_ASSERT_MATCH(LEX_ID);"
    },
    {
        "line": 6,
        "fullcodeline": "if (lex->tk==LEX_TEMPLATE_LITERAL)"
    },
    {
        "line": 7,
        "fullcodeline": "jsExceptionHere(JSET_SYNTAXERROR, \"Tagged template literals not supported\");"
    },
    {
        "line": 15,
        "fullcodeline": "} else if (lex->tk==LEX_INT) {"
    },
    {
        "line": 16,
        "fullcodeline": "JsVar *v = 0;"
    },
    {
        "line": 8,
        "fullcodeline": "else if (lex->tk==LEX_ARROW_FUNCTION && jsvIsName(a)) {"
    },
    {
        "line": 9,
        "fullcodeline": "JsVar *funcVar = jspeArrowFunction(0,a);"
    },
    {
        "line": 10,
        "fullcodeline": "jsvUnLock(a);"
    },
    {
        "line": 11,
        "fullcodeline": "a=funcVar;"
    },
    {
        "line": 18,
        "fullcodeline": "v = jsvNewFromLongInteger(stringToInt(jslGetTokenValueAsString(lex)));"
    },
    {
        "line": 22,
        "fullcodeline": "} else if (lex->tk==LEX_FLOAT) {"
    },
    {
        "line": 23,
        "fullcodeline": "JsVar *v = 0;"
    },
    {
        "line": 25,
        "fullcodeline": "v = jsvNewFromFloat(stringToFloat(jslGetTokenValueAsString(lex)));"
    },
    {
        "line": 29,
        "fullcodeline": "} else if (lex->tk=='(') {"
    },
    {
        "line": 38,
        "fullcodeline": "return jspeExpressionOrArrowFunction();"
    },
    {
        "line": 41,
        "fullcodeline": "} else if (lex->tk==LEX_R_TRUE) {"
    },
    {
        "line": 43,
        "fullcodeline": "return JSP_SHOULD_EXECUTE ? jsvNewFromBool(true) : 0;"
    },
    {
        "line": 44,
        "fullcodeline": "} else if (lex->tk==LEX_R_FALSE) {"
    },
    {
        "line": 46,
        "fullcodeline": "return JSP_SHOULD_EXECUTE ? jsvNewFromBool(false) : 0;"
    },
    {
        "line": 47,
        "fullcodeline": "} else if (lex->tk==LEX_R_NULL) {"
    },
    {
        "line": 49,
        "fullcodeline": "return JSP_SHOULD_EXECUTE ? jsvNewWithFlags(JSV_NULL) : 0;"
    },
    {
        "line": 50,
        "fullcodeline": "} else if (lex->tk==LEX_R_UNDEFINED) {"
    },
    {
        "line": 53,
        "fullcodeline": "} else if (lex->tk==LEX_STR) {"
    },
    {
        "line": 54,
        "fullcodeline": "JsVar *a = 0;"
    },
    {
        "line": 56,
        "fullcodeline": "a = jslGetTokenValueAsVar(lex);"
    },
    {
        "line": 60,
        "fullcodeline": "} else if (lex->tk==LEX_TEMPLATE_LITERAL) {"
    },
    {
        "line": 61,
        "fullcodeline": "return jspeTemplateLiteral();"
    },
    {
        "line": 63,
        "fullcodeline": "} else if (lex->tk==LEX_REGEX) {"
    },
    {
        "line": 68,
        "fullcodeline": "JsVar *regex = jslGetTokenValueAsVar(lex);"
    },
    {
        "line": 69,
        "fullcodeline": "size_t regexEnd = 0, regexLen = 0;"
    },
    {
        "line": 71,
        "fullcodeline": "jsvStringIteratorNew(&it, regex, 0);"
    },
    {
        "line": 79,
        "fullcodeline": "JsVar *flags = 0;"
    },
    {
        "line": 82,
        "fullcodeline": "JsVar *regexSource = jsvNewFromStringVar(regex, 1, regexEnd-2);"
    },
    {
        "line": 83,
        "fullcodeline": "a = jswrap_regexp_constructor(regexSource, flags);"
    },
    {
        "line": 72,
        "fullcodeline": "while (jsvStringIteratorHasChar(&it)) {"
    },
    {
        "line": 80,
        "fullcodeline": "if (regexEnd < regexLen)"
    },
    {
        "line": 73,
        "fullcodeline": "regexLen++;"
    },
    {
        "line": 76,
        "fullcodeline": "jsvStringIteratorNext(&it);"
    },
    {
        "line": 81,
        "fullcodeline": "flags = jsvNewFromStringVar(regex, regexEnd, JSVAPPENDSTRINGVAR_MAXLENGTH);"
    },
    {
        "line": 88,
        "fullcodeline": "} else if (lex->tk=='{') {"
    },
    {
        "line": 74,
        "fullcodeline": "if (jsvStringIteratorGetChar(&it)=='/')"
    },
    {
        "line": 75,
        "fullcodeline": "regexEnd = regexLen;"
    },
    {
        "line": 90,
        "fullcodeline": "return jspeFactorObject();"
    },
    {
        "line": 91,
        "fullcodeline": "} else if (lex->tk=='[') {"
    },
    {
        "line": 93,
        "fullcodeline": "return jspeFactorArray();"
    },
    {
        "line": 94,
        "fullcodeline": "} else if (lex->tk==LEX_R_FUNCTION) {"
    },
    {
        "line": 97,
        "fullcodeline": "return jspeFunctionDefinition(true);"
    },
    {
        "line": 99,
        "fullcodeline": "} else if (lex->tk==LEX_R_CLASS) {"
    },
    {
        "line": 102,
        "fullcodeline": "return jspeClassDefinition(true);"
    },
    {
        "line": 103,
        "fullcodeline": "} else if (lex->tk==LEX_R_SUPER) {"
    },
    {
        "line": 113,
        "fullcodeline": "if (jsvIsObject(execInfo.thisVar)) {"
    },
    {
        "line": 115,
        "fullcodeline": "JsVar *proto1 = jsvObjectGetChild(execInfo.thisVar, JSPARSE_INHERITS_VAR, 0); // if we're in a method, get __proto__ first"
    },
    {
        "line": 116,
        "fullcodeline": "JsVar *proto2 = jsvIsObject(proto1) ? jsvObjectGetChild(proto1, JSPARSE_INHERITS_VAR, 0) : 0; // still in method, get __proto__.__proto__"
    },
    {
        "line": 124,
        "fullcodeline": "JsVar *proto3 = jsvIsFunction(proto2) ? jsvObjectGetChild(proto2, JSPARSE_PROTOTYPE_VAR, 0) : 0;"
    },
    {
        "line": 141,
        "fullcodeline": "} else if (lex->tk==LEX_R_THIS) {"
    },
    {
        "line": 118,
        "fullcodeline": "if (!proto2) {"
    },
    {
        "line": 127,
        "fullcodeline": "} else if (jsvIsFunction(execInfo.thisVar)) {"
    },
    {
        "line": 143,
        "fullcodeline": "return jsvLockAgain( execInfo.thisVar ? execInfo.thisVar : execInfo.root );"
    },
    {
        "line": 129,
        "fullcodeline": "JsVar *proto1 = jsvObjectGetChild(execInfo.thisVar, JSPARSE_PROTOTYPE_VAR, 0);"
    },
    {
        "line": 130,
        "fullcodeline": "JsVar *proto2 = jsvIsObject(proto1) ? jsvObjectGetChild(proto1, JSPARSE_INHERITS_VAR, 0) : 0;"
    },
    {
        "line": 144,
        "fullcodeline": "} else if (lex->tk==LEX_R_DELETE) {"
    },
    {
        "line": 132,
        "fullcodeline": "if (!proto2) {"
    },
    {
        "line": 146,
        "fullcodeline": "return jspeFactorDelete();"
    },
    {
        "line": 147,
        "fullcodeline": "} else if (lex->tk==LEX_R_TYPEOF) {"
    },
    {
        "line": 149,
        "fullcodeline": "return jspeFactorTypeOf();"
    },
    {
        "line": 150,
        "fullcodeline": "} else if (lex->tk==LEX_R_VOID) {"
    }
]