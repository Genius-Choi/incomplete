[
    {
        "line": 3,
        "fullcodeline": "result[\"status\"] = 0;"
    },
    {
        "line": 4,
        "fullcodeline": "result[\"errorMessage\"] = \"\";"
    },
    {
        "line": 17,
        "fullcodeline": "shared_ptr <string> encr_poly_ptr = readFromDb(_polyName);"
    },
    {
        "line": 19,
        "fullcodeline": "vector <string> pubKeysStrs;"
    },
    {
        "line": 27,
        "fullcodeline": "string s = trustedGetSecretShares(_polyName, encr_poly_ptr->c_str(), pubKeysStrs, _t, _n);"
    },
    {
        "line": 29,
        "fullcodeline": "result[\"secretShare\"] = s;"
    },
    {
        "line": 7,
        "fullcodeline": "if (_pubKeys.size() != (uint64_t) _n) {"
    },
    {
        "line": 10,
        "fullcodeline": "if (!checkName(_polyName, \"POLY\")) {"
    },
    {
        "line": 13,
        "fullcodeline": "if (!check_n_t(_t, _n)) {"
    },
    {
        "line": 20,
        "fullcodeline": "for (int i = 0; i < _n; i++) {"
    },
    {
        "line": 35,
        "fullcodeline": "result[\"secretShare\"] = \"\";"
    },
    {
        "line": 36,
        "fullcodeline": "result[\"SecretShare\"] = \"\";"
    },
    {
        "line": 24,
        "fullcodeline": "pubKeysStrs.push_back(_pubKeys[i].asString());"
    },
    {
        "line": 8,
        "fullcodeline": "throw SGXException(INVALID_DKG_PARAMS, \"invalid number of public keys\");"
    },
    {
        "line": 11,
        "fullcodeline": "throw SGXException(INVALID_POLY_NAME, \"Invalid polynomial name\");"
    },
    {
        "line": 14,
        "fullcodeline": "throw SGXException(INVALID_DKG_PARAMS, \"Invalid DKG parameters: n or t \");"
    },
    {
        "line": 21,
        "fullcodeline": "if (!checkHex(_pubKeys[i].asString(), 64)) {"
    },
    {
        "line": 22,
        "fullcodeline": "throw SGXException(INVALID_HEX, \"Invalid public key\");"
    }
]