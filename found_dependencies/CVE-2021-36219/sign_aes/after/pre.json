[
    {
        "line": 4,
        "fullcodeline": "auto keyStr = make_shared<string>(_encryptedKeyHex);"
    },
    {
        "line": 6,
        "fullcodeline": "auto hash = make_shared<array<uint8_t, 32>>();"
    },
    {
        "line": 24,
        "fullcodeline": "obj = make_shared<signatures::Bls>(signatures::Bls(_t, _n));"
    },
    {
        "line": 29,
        "fullcodeline": "int errStatus = 0;"
    },
    {
        "line": 32,
        "fullcodeline": "string *xStr = FqToString(&(hash_with_hint.first.X));"
    },
    {
        "line": 39,
        "fullcodeline": "string *yStr = FqToString(&(hash_with_hint.first.Y));"
    },
    {
        "line": 47,
        "fullcodeline": "char errMsg[BUF_LEN];"
    },
    {
        "line": 48,
        "fullcodeline": "memset(errMsg, 0, BUF_LEN);"
    },
    {
        "line": 50,
        "fullcodeline": "char xStrArg[BUF_LEN];"
    },
    {
        "line": 51,
        "fullcodeline": "char yStrArg[BUF_LEN];"
    },
    {
        "line": 52,
        "fullcodeline": "char signature[BUF_LEN];"
    },
    {
        "line": 54,
        "fullcodeline": "memset(xStrArg, 0, BUF_LEN);"
    },
    {
        "line": 55,
        "fullcodeline": "memset(yStrArg, 0, BUF_LEN);"
    },
    {
        "line": 57,
        "fullcodeline": "strncpy(xStrArg, xStr->c_str(), BUF_LEN);"
    },
    {
        "line": 58,
        "fullcodeline": "strncpy(yStrArg, yStr->c_str(), BUF_LEN);"
    },
    {
        "line": 60,
        "fullcodeline": "size_t sz = 0;"
    },
    {
        "line": 63,
        "fullcodeline": "uint8_t encryptedKey[BUF_LEN];"
    },
    {
        "line": 65,
        "fullcodeline": "bool result = hex2carray(_encryptedKeyHex, &sz, encryptedKey);"
    },
    {
        "line": 72,
        "fullcodeline": "sgx_status_t status ="
    },
    {
        "line": 83,
        "fullcodeline": "std::string hint = BLSutils::ConvertToString(hash_with_hint.first.Y) + \":\" +"
    },
    {
        "line": 87,
        "fullcodeline": "std::string sig = signature;"
    },
    {
        "line": 89,
        "fullcodeline": "sig.append(\":\");"
    },
    {
        "line": 90,
        "fullcodeline": "sig.append(hint);"
    },
    {
        "line": 10,
        "fullcodeline": "if (!hex2carray(_hashHex, &binLen, hash->data())) {"
    },
    {
        "line": 23,
        "fullcodeline": "shared_ptr<signatures::Bls> obj;"
    },
    {
        "line": 26,
        "fullcodeline": "std::pair<libff::alt_bn128_G1, std::string> hash_with_hint ="
    },
    {
        "line": 34,
        "fullcodeline": "if (xStr == nullptr) {"
    },
    {
        "line": 41,
        "fullcodeline": "if (yStr == nullptr) {"
    },
    {
        "line": 73,
        "fullcodeline": "trustedBlsSignMessageAES(eid, &errStatus, errMsg, encryptedKey,"
    },
    {
        "line": 77,
        "fullcodeline": "if (status != SGX_SUCCESS) {"
    },
    {
        "line": 92,
        "fullcodeline": "strncpy(_sig, sig.c_str(), BUF_LEN);"
    },
    {
        "line": 94,
        "fullcodeline": "printf(\"_sig is: %s\\n\", sig.c_str());"
    },
    {
        "line": 27,
        "fullcodeline": "obj->HashtoG1withHint(hash);"
    },
    {
        "line": 35,
        "fullcodeline": "std::cerr << \"Null xStr\" << std::endl;"
    },
    {
        "line": 42,
        "fullcodeline": "std::cerr << \"Null yStr\" << std::endl;"
    },
    {
        "line": 68,
        "fullcodeline": "cerr << \"Invalid hex encrypted key\" << endl;"
    },
    {
        "line": 11,
        "fullcodeline": "throw SGXException(INVALID_HEX, \"Invalid hash\");"
    },
    {
        "line": 36,
        "fullcodeline": "BOOST_THROW_EXCEPTION(runtime_error(\"Null xStr\"));"
    },
    {
        "line": 43,
        "fullcodeline": "BOOST_THROW_EXCEPTION(runtime_error(\"Null yStr\"));"
    },
    {
        "line": 69,
        "fullcodeline": "BOOST_THROW_EXCEPTION(std::invalid_argument(\"Invalid hex encrypted key\"));"
    },
    {
        "line": 78,
        "fullcodeline": "cerr << \"SGX enclave call  to trustedBlsSignMessage failed:\" << status << std::endl;"
    },
    {
        "line": 79,
        "fullcodeline": "BOOST_THROW_EXCEPTION(runtime_error(\"SGX enclave call  to trustedBlsSignMessage failed\"));"
    }
]