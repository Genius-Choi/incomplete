[
    {
        "line": 4,
        "fullcodeline": "result[\"status\"] = 0;"
    },
    {
        "line": 5,
        "fullcodeline": "result[\"errorMessage\"] = \"\";"
    },
    {
        "line": 7,
        "fullcodeline": "vector <vector<string>> verifVector;"
    },
    {
        "line": 18,
        "fullcodeline": "verifVector = get_verif_vect(encr_poly_ptr->c_str(), _t, _n);"
    },
    {
        "line": 9,
        "fullcodeline": "if (!checkName(_polyName, \"POLY\")) {"
    },
    {
        "line": 16,
        "fullcodeline": "shared_ptr <string> encr_poly_ptr = readFromDb(_polyName);"
    },
    {
        "line": 21,
        "fullcodeline": "for (int i = 0; i < _t; i++) {"
    },
    {
        "line": 30,
        "fullcodeline": "cerr << \" err str \" << _e.errString << endl;"
    },
    {
        "line": 31,
        "fullcodeline": "result[\"status\"] = _e.status;"
    },
    {
        "line": 32,
        "fullcodeline": "result[\"errorMessage\"] = _e.errString;"
    },
    {
        "line": 33,
        "fullcodeline": "result[\"verificationVector\"] = \"\";"
    },
    {
        "line": 34,
        "fullcodeline": "result[\"Verification Vector\"] = \"\";"
    },
    {
        "line": 12,
        "fullcodeline": "if (!check_n_t(_t, _n)) {"
    },
    {
        "line": 10,
        "fullcodeline": "throw SGXException(INVALID_POLY_NAME, \"Invalid polynomial name\");"
    },
    {
        "line": 13,
        "fullcodeline": "throw SGXException(INVALID_DKG_PARAMS, \"Invalid parameters: n or t \");"
    },
    {
        "line": 22,
        "fullcodeline": "vector <string> cur_coef = verifVector.at(i);"
    },
    {
        "line": 23,
        "fullcodeline": "for (int j = 0; j < 4; j++) {"
    },
    {
        "line": 24,
        "fullcodeline": "result[\"verificationVector\"][i][j] = cur_coef.at(j);"
    },
    {
        "line": 25,
        "fullcodeline": "result[\"Verification Vector\"][i][j] = cur_coef.at(j);"
    }
]