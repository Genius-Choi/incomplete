[
    {
        "line": 4,
        "fullcodeline": "libff::init_alt_bn128_params();"
    },
    {
        "line": 5,
        "fullcodeline": "char symbol = ':';"
    },
    {
        "line": 6,
        "fullcodeline": "vector<libff::alt_bn128_Fr> poly =  SplitStringToFr(decrypted_coeffs, symbol);"
    },
    {
        "line": 11,
        "fullcodeline": "libff::alt_bn128_Fr secret_share = PolynomialValue(poly, libff::alt_bn128_Fr(ind), _t);"
    },
    {
        "line": 12,
        "fullcodeline": "string cur_share = ConvertToString(secret_share, 16);"
    },
    {
        "line": 13,
        "fullcodeline": "int n_zeroes = 64 - cur_share.size();"
    },
    {
        "line": 14,
        "fullcodeline": "cur_share.insert(0, n_zeroes, '0');"
    },
    {
        "line": 16,
        "fullcodeline": "strncpy(s_share, cur_share.c_str(), cur_share.length() + 1);"
    },
    {
        "line": 7,
        "fullcodeline": "if ( poly.size() != _t){"
    }
]