[
    {
        "line": 4,
        "fullcodeline": "LOG_DEBUG (__FUNCTION__);"
    },
    {
        "line": 6,
        "fullcodeline": "char skey[ECDSA_SKEY_LEN];"
    },
    {
        "line": 7,
        "fullcodeline": "char pub_key_x[BUF_LEN];"
    },
    {
        "line": 8,
        "fullcodeline": "memset(pub_key_x, 0, BUF_LEN);"
    },
    {
        "line": 9,
        "fullcodeline": "char pub_key_y[BUF_LEN];"
    },
    {
        "line": 10,
        "fullcodeline": "memset(pub_key_y, 0, BUF_LEN);"
    },
    {
        "line": 16,
        "fullcodeline": "trustedGenerateEcdsaKey(errStatus, errString, encrypted_skey, &enc_len, pub_key_x, pub_key_y);"
    },
    {
        "line": 21,
        "fullcodeline": "*dec_len = enc_len;"
    },
    {
        "line": 23,
        "fullcodeline": "sgx_status_t status = sgx_unseal_data("
    },
    {
        "line": 31,
        "fullcodeline": "snprintf(errString, BUF_LEN, \"unsealed random skey is %s\\n\", skey);"
    },
    {
        "line": 33,
        "fullcodeline": "char *common_key[ECDSA_SKEY_LEN];"
    },
    {
        "line": 34,
        "fullcodeline": "gen_session_key(skey, pub_keyB, common_key);"
    },
    {
        "line": 35,
        "fullcodeline": "char *s_share[ECDSA_SKEY_LEN]; ;"
    },
    {
        "line": 43,
        "fullcodeline": "snprintf(errString + 88, BUF_LEN, \"\\nsecret share is %s\", s_share);"
    },
    {
        "line": 51,
        "fullcodeline": "char *cypher[ECDSA_SKEY_LEN];"
    },
    {
        "line": 52,
        "fullcodeline": "xor_encrypt(common_key, s_share, cypher);"
    },
    {
        "line": 60,
        "fullcodeline": "strncpy(result_str, cypher, strlen(cypher));"
    },
    {
        "line": 61,
        "fullcodeline": "strncpy(result_str + strlen(cypher), pub_key_x, strlen(pub_key_x));"
    },
    {
        "line": 62,
        "fullcodeline": "strncpy(result_str + strlen(pub_key_x) + strlen(pub_key_y), pub_key_y, strlen(pub_key_y));"
    },
    {
        "line": 17,
        "fullcodeline": "if (*errStatus != 0) {"
    },
    {
        "line": 26,
        "fullcodeline": "if (status != SGX_SUCCESS) {"
    },
    {
        "line": 38,
        "fullcodeline": "if (calc_secret_share(decryptedDkgPoly, s_share, _t, _n, ind) != 0) {"
    },
    {
        "line": 45,
        "fullcodeline": "if (calc_secret_shareG2(s_share, s_shareG2) != 0) {"
    },
    {
        "line": 53,
        "fullcodeline": "if (cypher == NULL) {"
    },
    {
        "line": 24,
        "fullcodeline": "(const sgx_sealed_data_t *) encrypted_skey, NULL, 0, (uint8_t *) skey, &enc_len);"
    },
    {
        "line": 27,
        "fullcodeline": "snprintf(errString, BUF_LEN, \"sgx_unseal_data failed - encrypted_skey with status %d\", status);"
    },
    {
        "line": 28,
        "fullcodeline": "*errStatus = status;"
    },
    {
        "line": 39,
        "fullcodeline": "*errStatus = -1;"
    },
    {
        "line": 40,
        "fullcodeline": "snprintf(errString, BUF_LEN, \"\\nt does not match poly degree\\n\");"
    },
    {
        "line": 46,
        "fullcodeline": "*errStatus = -1;"
    },
    {
        "line": 47,
        "fullcodeline": "snprintf(errString, BUF_LEN, \"invalid decr secret share\\n\");"
    },
    {
        "line": 54,
        "fullcodeline": "*errStatus = 1;"
    },
    {
        "line": 55,
        "fullcodeline": "snprintf(errString, BUF_LEN, \"invalid common_key\");"
    }
]