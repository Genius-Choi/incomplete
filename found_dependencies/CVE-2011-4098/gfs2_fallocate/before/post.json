[
    {
        "line": 5,
        "fullcodeline": "struct gfs2_sbd *sdp = GFS2_SB(inode);"
    },
    {
        "line": 6,
        "fullcodeline": "struct gfs2_inode *ip = GFS2_I(inode);"
    },
    {
        "line": 7,
        "fullcodeline": "unsigned int data_blocks = 0, ind_blocks = 0, rblocks;"
    },
    {
        "line": 11,
        "fullcodeline": "loff_t bsize_mask = ~((loff_t)sdp->sd_sb.sb_bsize - 1);"
    },
    {
        "line": 12,
        "fullcodeline": "loff_t next = (offset + len - 1) >> sdp->sd_sb.sb_bsize_shift;"
    },
    {
        "line": 13,
        "fullcodeline": "next = (next + 1) << sdp->sd_sb.sb_bsize_shift;"
    },
    {
        "line": 19,
        "fullcodeline": "offset &= bsize_mask;"
    },
    {
        "line": 21,
        "fullcodeline": "len = next - offset;"
    },
    {
        "line": 22,
        "fullcodeline": "bytes = sdp->sd_max_rg_data * sdp->sd_sb.sb_bsize / 2;"
    },
    {
        "line": 25,
        "fullcodeline": "bytes &= bsize_mask;"
    },
    {
        "line": 29,
        "fullcodeline": "gfs2_holder_init(ip->i_gl, LM_ST_EXCLUSIVE, 0, &ip->i_gh);"
    },
    {
        "line": 30,
        "fullcodeline": "error = gfs2_glock_nq(&ip->i_gh);"
    },
    {
        "line": 94,
        "fullcodeline": "gfs2_inplace_release(ip);"
    },
    {
        "line": 96,
        "fullcodeline": "gfs2_quota_unlock(ip);"
    },
    {
        "line": 98,
        "fullcodeline": "gfs2_alloc_put(ip);"
    },
    {
        "line": 100,
        "fullcodeline": "gfs2_glock_dq(&ip->i_gh);"
    },
    {
        "line": 102,
        "fullcodeline": "gfs2_holder_uninit(&ip->i_gh);"
    },
    {
        "line": 16,
        "fullcodeline": "if (mode & ~FALLOC_FL_KEEP_SIZE)"
    },
    {
        "line": 23,
        "fullcodeline": "if (!bytes)"
    },
    {
        "line": 26,
        "fullcodeline": "if (bytes == 0)"
    },
    {
        "line": 31,
        "fullcodeline": "if (unlikely(error))"
    },
    {
        "line": 34,
        "fullcodeline": "if (!gfs2_write_alloc_required(ip, offset, len))"
    },
    {
        "line": 37,
        "fullcodeline": "while (len > 0) {"
    },
    {
        "line": 24,
        "fullcodeline": "bytes = UINT_MAX;"
    },
    {
        "line": 27,
        "fullcodeline": "bytes = sdp->sd_sb.sb_bsize;"
    },
    {
        "line": 40,
        "fullcodeline": "al = gfs2_alloc_get(ip);"
    },
    {
        "line": 46,
        "fullcodeline": "error = gfs2_quota_lock_check(ip);"
    },
    {
        "line": 51,
        "fullcodeline": "gfs2_write_calc_reserv(ip, bytes, &data_blocks, &ind_blocks);"
    },
    {
        "line": 53,
        "fullcodeline": "al->al_requested = data_blocks + ind_blocks;"
    },
    {
        "line": 54,
        "fullcodeline": "error = gfs2_inplace_reserve(ip);"
    },
    {
        "line": 65,
        "fullcodeline": "max_bytes = bytes;"
    },
    {
        "line": 66,
        "fullcodeline": "calc_max_reserv(ip, len, &max_bytes, &data_blocks, &ind_blocks);"
    },
    {
        "line": 67,
        "fullcodeline": "al->al_requested = data_blocks + ind_blocks;"
    },
    {
        "line": 69,
        "fullcodeline": "rblocks = RES_DINODE + ind_blocks + RES_STATFS + RES_QUOTA +"
    },
    {
        "line": 74,
        "fullcodeline": "error = gfs2_trans_begin(sdp, rblocks,"
    },
    {
        "line": 79,
        "fullcodeline": "error = fallocate_chunk(inode, offset, max_bytes, mode);"
    },
    {
        "line": 80,
        "fullcodeline": "gfs2_trans_end(sdp);"
    },
    {
        "line": 85,
        "fullcodeline": "len -= max_bytes;"
    },
    {
        "line": 86,
        "fullcodeline": "offset += max_bytes;"
    },
    {
        "line": 87,
        "fullcodeline": "gfs2_inplace_release(ip);"
    },
    {
        "line": 88,
        "fullcodeline": "gfs2_quota_unlock(ip);"
    },
    {
        "line": 89,
        "fullcodeline": "gfs2_alloc_put(ip);"
    },
    {
        "line": 17,
        "fullcodeline": "return -EOPNOTSUPP;"
    },
    {
        "line": 38,
        "fullcodeline": "if (len < bytes)"
    },
    {
        "line": 41,
        "fullcodeline": "if (!al) {"
    },
    {
        "line": 71,
        "fullcodeline": "if (gfs2_is_jdata(ip))"
    },
    {
        "line": 39,
        "fullcodeline": "bytes = len;"
    },
    {
        "line": 42,
        "fullcodeline": "error = -ENOMEM;"
    },
    {
        "line": 70,
        "fullcodeline": "RES_RG_HDR + gfs2_rg_blocks(ip);"
    },
    {
        "line": 72,
        "fullcodeline": "rblocks += data_blocks ? data_blocks : 1;"
    },
    {
        "line": 75,
        "fullcodeline": "PAGE_CACHE_SIZE/sdp->sd_sb.sb_bsize);"
    },
    {
        "line": 56,
        "fullcodeline": "if (error == -ENOSPC && bytes > sdp->sd_sb.sb_bsize) {"
    },
    {
        "line": 57,
        "fullcodeline": "bytes >>= 1;"
    },
    {
        "line": 58,
        "fullcodeline": "bytes &= bsize_mask;"
    },
    {
        "line": 59,
        "fullcodeline": "if (bytes == 0)"
    },
    {
        "line": 60,
        "fullcodeline": "bytes = sdp->sd_sb.sb_bsize;"
    }
]