[
    {
        "line": 4,
        "fullcodeline": "struct gfs2_inode *ip = GFS2_I(inode);"
    },
    {
        "line": 7,
        "fullcodeline": "u64 start = offset >> PAGE_CACHE_SHIFT;"
    },
    {
        "line": 8,
        "fullcodeline": "unsigned int start_offset = offset & ~PAGE_CACHE_MASK;"
    },
    {
        "line": 9,
        "fullcodeline": "u64 end = (offset + len - 1) >> PAGE_CACHE_SHIFT;"
    },
    {
        "line": 12,
        "fullcodeline": "unsigned int end_offset = (offset + len) & ~PAGE_CACHE_MASK;"
    },
    {
        "line": 18,
        "fullcodeline": "error = gfs2_meta_inode_buffer(ip, &dibh);"
    },
    {
        "line": 22,
        "fullcodeline": "gfs2_trans_add_bh(ip->i_gl, dibh, 1);"
    },
    {
        "line": 30,
        "fullcodeline": "curr = start;"
    },
    {
        "line": 31,
        "fullcodeline": "offset = start << PAGE_CACHE_SHIFT;"
    },
    {
        "line": 32,
        "fullcodeline": "from = start_offset;"
    },
    {
        "line": 33,
        "fullcodeline": "to = PAGE_CACHE_SIZE;"
    },
    {
        "line": 58,
        "fullcodeline": "mark_inode_dirty(inode);"
    },
    {
        "line": 60,
        "fullcodeline": "brelse(dibh);"
    },
    {
        "line": 15,
        "fullcodeline": "if (!end_offset)"
    },
    {
        "line": 19,
        "fullcodeline": "if (unlikely(error))"
    },
    {
        "line": 24,
        "fullcodeline": "if (gfs2_is_stuffed(ip)) {"
    },
    {
        "line": 34,
        "fullcodeline": "while (curr <= end) {"
    },
    {
        "line": 16,
        "fullcodeline": "end_offset = PAGE_CACHE_SIZE;"
    },
    {
        "line": 25,
        "fullcodeline": "error = gfs2_unstuff_dinode(ip, NULL);"
    },
    {
        "line": 35,
        "fullcodeline": "page = grab_cache_page_write_begin(inode->i_mapping, curr,"
    },
    {
        "line": 44,
        "fullcodeline": "error = write_empty_blocks(page, from, to, mode);"
    },
    {
        "line": 49,
        "fullcodeline": "unlock_page(page);"
    },
    {
        "line": 50,
        "fullcodeline": "page_cache_release(page);"
    },
    {
        "line": 53,
        "fullcodeline": "curr++;"
    },
    {
        "line": 54,
        "fullcodeline": "offset += PAGE_CACHE_SIZE;"
    },
    {
        "line": 55,
        "fullcodeline": "from = 0;"
    },
    {
        "line": 26,
        "fullcodeline": "if (unlikely(error))"
    },
    {
        "line": 37,
        "fullcodeline": "if (unlikely(!page)) {"
    },
    {
        "line": 42,
        "fullcodeline": "if (curr == end)"
    },
    {
        "line": 45,
        "fullcodeline": "if (!error && offset + to > inode->i_size &&"
    },
    {
        "line": 38,
        "fullcodeline": "error = -ENOMEM;"
    },
    {
        "line": 43,
        "fullcodeline": "to = end_offset;"
    },
    {
        "line": 46,
        "fullcodeline": "!(mode & FALLOC_FL_KEEP_SIZE)) {"
    },
    {
        "line": 47,
        "fullcodeline": "i_size_write(inode, offset + to);"
    }
]