[
    {
        "line": 4,
        "fullcodeline": "struct gfs2_inode *ip = GFS2_I(inode);"
    },
    {
        "line": 8,
        "fullcodeline": "sector_t lblock = offset >> inode->i_blkbits;"
    },
    {
        "line": 10,
        "fullcodeline": "error = gfs2_meta_inode_buffer(ip, &dibh);"
    },
    {
        "line": 14,
        "fullcodeline": "gfs2_trans_add_bh(ip->i_gl, dibh, 1);"
    },
    {
        "line": 43,
        "fullcodeline": "mark_inode_dirty(inode);"
    },
    {
        "line": 46,
        "fullcodeline": "brelse(dibh);"
    },
    {
        "line": 11,
        "fullcodeline": "if (unlikely(error))"
    },
    {
        "line": 16,
        "fullcodeline": "if (gfs2_is_stuffed(ip)) {"
    },
    {
        "line": 40,
        "fullcodeline": "if (offset + len > inode->i_size && !(mode & FALLOC_FL_KEEP_SIZE))"
    },
    {
        "line": 17,
        "fullcodeline": "error = gfs2_unstuff_dinode(ip, NULL);"
    },
    {
        "line": 23,
        "fullcodeline": "struct buffer_head bh_map = { .b_state = 0, .b_blocknr = 0 };"
    },
    {
        "line": 24,
        "fullcodeline": "bh_map.b_size = len;"
    },
    {
        "line": 25,
        "fullcodeline": "set_buffer_zeronew(&bh_map);"
    },
    {
        "line": 27,
        "fullcodeline": "error = gfs2_block_map(inode, lblock, &bh_map, 1);"
    },
    {
        "line": 30,
        "fullcodeline": "len -= bh_map.b_size;"
    },
    {
        "line": 31,
        "fullcodeline": "nr_blks = bh_map.b_size >> inode->i_blkbits;"
    },
    {
        "line": 32,
        "fullcodeline": "lblock += nr_blks;"
    },
    {
        "line": 41,
        "fullcodeline": "i_size_write(inode, offset + len);"
    },
    {
        "line": 18,
        "fullcodeline": "if (unlikely(error))"
    },
    {
        "line": 28,
        "fullcodeline": "if (unlikely(error))"
    },
    {
        "line": 33,
        "fullcodeline": "if (!buffer_new(&bh_map))"
    },
    {
        "line": 35,
        "fullcodeline": "if (unlikely(!buffer_zeronew(&bh_map))) {"
    },
    {
        "line": 36,
        "fullcodeline": "error = -EIO;"
    }
]