[
    {
        "line": 3,
        "fullcodeline": "struct fs_struct *fs = current->fs;"
    },
    {
        "line": 4,
        "fullcodeline": "struct mnt_namespace *mnt_ns = ns;"
    },
    {
        "line": 15,
        "fullcodeline": "get_mnt_ns(mnt_ns);"
    },
    {
        "line": 20,
        "fullcodeline": "root.mnt    = &mnt_ns->root->mnt;"
    },
    {
        "line": 21,
        "fullcodeline": "root.dentry = mnt_ns->root->mnt.mnt_root;"
    },
    {
        "line": 22,
        "fullcodeline": "path_get(&root);"
    },
    {
        "line": 27,
        "fullcodeline": "set_fs_pwd(fs, &root);"
    },
    {
        "line": 28,
        "fullcodeline": "set_fs_root(fs, &root);"
    },
    {
        "line": 7,
        "fullcodeline": "if (!ns_capable(mnt_ns->user_ns, CAP_SYS_ADMIN) ||"
    },
    {
        "line": 12,
        "fullcodeline": "if (fs->users != 1)"
    },
    {
        "line": 9,
        "fullcodeline": "!nsown_capable(CAP_SYS_ADMIN))"
    },
    {
        "line": 23,
        "fullcodeline": "while(d_mountpoint(root.dentry) && follow_down_one(&root))"
    },
    {
        "line": 8,
        "fullcodeline": "!nsown_capable(CAP_SYS_CHROOT) ||"
    },
    {
        "line": 10,
        "fullcodeline": "return -EPERM;"
    },
    {
        "line": 13,
        "fullcodeline": "return -EINVAL;"
    }
]