[
    {
        "line": 3,
        "fullcodeline": "struct user_namespace *ns, *parent_ns = new->user_ns;"
    },
    {
        "line": 4,
        "fullcodeline": "kuid_t owner = new->euid;"
    },
    {
        "line": 5,
        "fullcodeline": "kgid_t group = new->egid;"
    },
    {
        "line": 16,
        "fullcodeline": "ns = kmem_cache_zalloc(user_ns_cachep, GFP_KERNEL);"
    },
    {
        "line": 20,
        "fullcodeline": "ret = proc_alloc_inum(&ns->proc_inum);"
    },
    {
        "line": 26,
        "fullcodeline": "atomic_set(&ns->count, 1);"
    },
    {
        "line": 28,
        "fullcodeline": "ns->parent = parent_ns;"
    },
    {
        "line": 29,
        "fullcodeline": "ns->owner = owner;"
    },
    {
        "line": 30,
        "fullcodeline": "ns->group = group;"
    },
    {
        "line": 32,
        "fullcodeline": "set_cred_user_ns(new, ns);"
    },
    {
        "line": 12,
        "fullcodeline": "if (!kuid_has_mapping(parent_ns, owner) ||"
    },
    {
        "line": 17,
        "fullcodeline": "if (!ns)"
    },
    {
        "line": 13,
        "fullcodeline": "!kgid_has_mapping(parent_ns, group))"
    },
    {
        "line": 22,
        "fullcodeline": "kmem_cache_free(user_ns_cachep, ns);"
    },
    {
        "line": 14,
        "fullcodeline": "return -EPERM;"
    },
    {
        "line": 18,
        "fullcodeline": "return -ENOMEM;"
    }
]