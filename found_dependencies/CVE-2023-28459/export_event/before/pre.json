[
    {
        "line": 2,
        "fullcodeline": "with override_settings("
    },
    {
        "line": 4,
        "fullcodeline": "), override_timezone(event.timezone):"
    },
    {
        "line": 5,
        "fullcodeline": "with fake_admin(event) as get:"
    },
    {
        "line": 6,
        "fullcodeline": "logging.info(\"Collecting URLs for export\")"
    },
    {
        "line": 7,
        "fullcodeline": "urls = [*event_urls(event)]"
    },
    {
        "line": 8,
        "fullcodeline": "assets = set()"
    },
    {
        "line": 10,
        "fullcodeline": "logging.info(f\"Exporting {len(urls)} pages\")"
    },
    {
        "line": 15,
        "fullcodeline": "css_assets = set()"
    },
    {
        "line": 17,
        "fullcodeline": "logging.info(f\"Exporting {len(assets)} static files from HTML links\")"
    },
    {
        "line": 24,
        "fullcodeline": "logging.info(f\"Exporting {len(css_assets)} files from CSS links\")"
    },
    {
        "line": 11,
        "fullcodeline": "for url in map(get_path, urls):"
    },
    {
        "line": 18,
        "fullcodeline": "for url in assets:"
    },
    {
        "line": 25,
        "fullcodeline": "for url_path in (get_path(urllib.parse.unquote(url)) for url in css_assets):"
    },
    {
        "line": 12,
        "fullcodeline": "content = dump_content(destination, url, get)"
    },
    {
        "line": 13,
        "fullcodeline": "assets |= set(map(get_path, find_assets(content)))"
    },
    {
        "line": 19,
        "fullcodeline": "content = dump_content(destination, url, get)"
    },
    {
        "line": 26,
        "fullcodeline": "dump_content(destination, url_path, get)"
    },
    {
        "line": 21,
        "fullcodeline": "if url.endswith(\".css\"):"
    },
    {
        "line": 22,
        "fullcodeline": "css_assets |= set(find_urls(content))"
    }
]