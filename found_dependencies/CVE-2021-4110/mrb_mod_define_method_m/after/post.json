[
    {
        "line": 6,
        "fullcodeline": "mrb_value proc = mrb_undef_value();"
    },
    {
        "line": 9,
        "fullcodeline": "mrb_get_args(mrb, \"n|o&\", &mid, &proc, &blk);"
    },
    {
        "line": 24,
        "fullcodeline": "p = MRB_OBJ_ALLOC(mrb, MRB_TT_PROC, mrb->proc_class);"
    },
    {
        "line": 25,
        "fullcodeline": "mrb_proc_copy(mrb, p, mrb_proc_ptr(blk));"
    },
    {
        "line": 26,
        "fullcodeline": "p->flags |= MRB_PROC_STRICT;"
    },
    {
        "line": 27,
        "fullcodeline": "MRB_METHOD_FROM_PROC(m, p);"
    },
    {
        "line": 28,
        "fullcodeline": "mrb_define_method_raw(mrb, c, mid, m);"
    },
    {
        "line": 29,
        "fullcodeline": "mrb_method_added(mrb, c, mid);"
    },
    {
        "line": 10,
        "fullcodeline": "switch (mrb_type(proc)) {"
    },
    {
        "line": 21,
        "fullcodeline": "if (mrb_nil_p(blk)) {"
    },
    {
        "line": 30,
        "fullcodeline": "return mrb_symbol_value(mid);"
    },
    {
        "line": 12,
        "fullcodeline": "blk = proc;"
    },
    {
        "line": 18,
        "fullcodeline": "mrb_raisef(mrb, E_TYPE_ERROR, \"wrong argument type %T (expected Proc)\", proc);"
    },
    {
        "line": 22,
        "fullcodeline": "mrb_raise(mrb, E_ARGUMENT_ERROR, \"no block given\");"
    }
]