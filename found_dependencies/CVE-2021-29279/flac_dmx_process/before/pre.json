[
    {
        "line": 3,
        "fullcodeline": "GF_FLACDmxCtx *ctx = gf_filter_get_udta(filter);"
    },
    {
        "line": 7,
        "fullcodeline": "Bool final_flush=GF_FALSE;"
    },
    {
        "line": 9,
        "fullcodeline": "u64 cts = GF_FILTER_NO_TS;"
    },
    {
        "line": 19,
        "fullcodeline": "pck = gf_filter_pid_get_packet(ctx->ipid);"
    },
    {
        "line": 35,
        "fullcodeline": "prev_pck_size = ctx->flac_buffer_size;"
    },
    {
        "line": 69,
        "fullcodeline": "remain = ctx->flac_buffer_size;"
    },
    {
        "line": 70,
        "fullcodeline": "start = ctx->flac_buffer;"
    },
    {
        "line": 13,
        "fullcodeline": "if (!ctx->duration.num)"
    },
    {
        "line": 16,
        "fullcodeline": "if (ctx->opid && !ctx->is_playing)"
    },
    {
        "line": 20,
        "fullcodeline": "if (!pck) {"
    },
    {
        "line": 36,
        "fullcodeline": "if (pck && !ctx->resume_from) {"
    },
    {
        "line": 60,
        "fullcodeline": "if (ctx->timescale && pck) {"
    },
    {
        "line": 64,
        "fullcodeline": "if (cts == GF_FILTER_NO_TS) {"
    },
    {
        "line": 78,
        "fullcodeline": "while (remain>2) {"
    },
    {
        "line": 14,
        "fullcodeline": "flac_dmx_check_dur(filter, ctx);"
    },
    {
        "line": 37,
        "fullcodeline": "u8 *data = (u8 *) gf_filter_pck_get_data(pck, &pck_size);"
    },
    {
        "line": 55,
        "fullcodeline": "memcpy(ctx->flac_buffer + ctx->flac_buffer_size, data, pck_size);"
    },
    {
        "line": 56,
        "fullcodeline": "ctx->flac_buffer_size += pck_size;"
    },
    {
        "line": 61,
        "fullcodeline": "cts = gf_filter_pck_get_cts(pck);"
    },
    {
        "line": 66,
        "fullcodeline": "prev_pck_size = 0;"
    },
    {
        "line": 73,
        "fullcodeline": "start += ctx->resume_from - 1;"
    },
    {
        "line": 74,
        "fullcodeline": "remain -= ctx->resume_from - 1;"
    },
    {
        "line": 75,
        "fullcodeline": "ctx->resume_from = 0;"
    },
    {
        "line": 79,
        "fullcodeline": "u32 next_frame=0, nb_samp;"
    },
    {
        "line": 80,
        "fullcodeline": "u32 cur_size = remain-2;"
    },
    {
        "line": 81,
        "fullcodeline": "u8 *cur_buf = start+2;"
    },
    {
        "line": 82,
        "fullcodeline": "u8 *hdr_start = NULL;"
    },
    {
        "line": 165,
        "fullcodeline": "flac_parse_header(ctx,start, next_frame, &hdr);"
    },
    {
        "line": 171,
        "fullcodeline": "nb_samp = hdr.block_size;"
    },
    {
        "line": 204,
        "fullcodeline": "flac_dmx_update_cts(ctx, nb_samp);"
    },
    {
        "line": 209,
        "fullcodeline": "start += next_frame;"
    },
    {
        "line": 211,
        "fullcodeline": "remain -= next_frame;"
    },
    {
        "line": 21,
        "fullcodeline": "if (gf_filter_pid_is_eos(ctx->ipid)) {"
    },
    {
        "line": 39,
        "fullcodeline": "if (ctx->byte_offset != GF_FILTER_NO_BO) {"
    },
    {
        "line": 51,
        "fullcodeline": "if (ctx->flac_buffer_size + pck_size > ctx->flac_buffer_alloc) {"
    },
    {
        "line": 111,
        "fullcodeline": "if (!ctx->initialized) {"
    },
    {
        "line": 166,
        "fullcodeline": "if (hdr.sample_rate != ctx->sample_rate) {"
    },
    {
        "line": 186,
        "fullcodeline": "if (!ctx->in_seek) {"
    },
    {
        "line": 206,
        "fullcodeline": "assert (start[0] == 0xFF);"
    },
    {
        "line": 207,
        "fullcodeline": "assert((start[1]&0xFC) == 0xF8);"
    },
    {
        "line": 210,
        "fullcodeline": "assert(remain >= next_frame);"
    },
    {
        "line": 217,
        "fullcodeline": "return flac_dmx_process(filter);"
    },
    {
        "line": 40,
        "fullcodeline": "u64 byte_offset = gf_filter_pck_get_byte_offset(pck);"
    },
    {
        "line": 52,
        "fullcodeline": "ctx->flac_buffer_alloc = ctx->flac_buffer_size + pck_size;"
    },
    {
        "line": 53,
        "fullcodeline": "ctx->flac_buffer = gf_realloc(ctx->flac_buffer, ctx->flac_buffer_alloc);"
    },
    {
        "line": 85,
        "fullcodeline": "next_frame = remain;"
    },
    {
        "line": 112,
        "fullcodeline": "u32 size = next_frame;"
    },
    {
        "line": 113,
        "fullcodeline": "u32 dsi_end = 0;"
    },
    {
        "line": 115,
        "fullcodeline": "gf_bs_reassign_buffer(ctx->bs, ctx->flac_buffer, size);"
    },
    {
        "line": 116,
        "fullcodeline": "u32 magic = gf_bs_read_u32(ctx->bs);"
    },
    {
        "line": 149,
        "fullcodeline": "flac_dmx_check_pid(filter, ctx, ctx->flac_buffer+4, dsi_end-4);"
    },
    {
        "line": 150,
        "fullcodeline": "remain -= size;"
    },
    {
        "line": 151,
        "fullcodeline": "start += size;"
    },
    {
        "line": 152,
        "fullcodeline": "ctx->initialized = GF_TRUE;"
    },
    {
        "line": 158,
        "fullcodeline": "if ((start[0] != 0xFF) && ((start[1]&0xFC) != 0xF8)) {"
    },
    {
        "line": 159,
        "fullcodeline": "GF_LOG(GF_LOG_WARNING, GF_LOG_PARSER, (\"[FLACDmx] invalid frame, droping %d bytes and resyncing\\n\", next_frame));"
    },
    {
        "line": 160,
        "fullcodeline": "start += next_frame;"
    },
    {
        "line": 161,
        "fullcodeline": "remain -= next_frame;"
    },
    {
        "line": 167,
        "fullcodeline": "ctx->sample_rate = hdr.sample_rate;"
    },
    {
        "line": 168,
        "fullcodeline": "gf_filter_pid_set_property(ctx->opid, GF_PROP_PID_SAMPLE_RATE, & PROP_UINT(ctx->sample_rate));"
    },
    {
        "line": 174,
        "fullcodeline": "u64 nb_samples_at_seek = (u64) (ctx->start_range * ctx->sample_rate);"
    },
    {
        "line": 181,
        "fullcodeline": "if (ctx->timescale && !prev_pck_size && (cts != GF_FILTER_NO_TS) ) {"
    },
    {
        "line": 182,
        "fullcodeline": "ctx->cts = cts;"
    },
    {
        "line": 183,
        "fullcodeline": "cts = GF_FILTER_NO_TS;"
    },
    {
        "line": 187,
        "fullcodeline": "dst_pck = gf_filter_pck_new_alloc(ctx->opid, next_frame, &output);"
    },
    {
        "line": 188,
        "fullcodeline": "memcpy(output, start, next_frame);"
    },
    {
        "line": 190,
        "fullcodeline": "gf_filter_pck_set_cts(dst_pck, ctx->cts);"
    },
    {
        "line": 196,
        "fullcodeline": "gf_filter_pck_set_sap(dst_pck, GF_FILTER_SAP_1);"
    },
    {
        "line": 197,
        "fullcodeline": "gf_filter_pck_set_framing(dst_pck, GF_TRUE, GF_TRUE);"
    },
    {
        "line": 219,
        "fullcodeline": "if (remain < ctx->flac_buffer_size) {"
    },
    {
        "line": 22,
        "fullcodeline": "if (!ctx->flac_buffer_size) {"
    },
    {
        "line": 41,
        "fullcodeline": "if (!ctx->flac_buffer_size) {"
    },
    {
        "line": 120,
        "fullcodeline": "while (gf_bs_available(ctx->bs)) {"
    },
    {
        "line": 153,
        "fullcodeline": "if (!ctx->is_playing) break;"
    },
    {
        "line": 199,
        "fullcodeline": "if (ctx->byte_offset != GF_FILTER_NO_BO) {"
    },
    {
        "line": 220,
        "fullcodeline": "memmove(ctx->flac_buffer, start, remain);"
    },
    {
        "line": 42,
        "fullcodeline": "ctx->byte_offset = byte_offset;"
    },
    {
        "line": 106,
        "fullcodeline": "if (next_frame == remain)"
    },
    {
        "line": 117,
        "fullcodeline": "if (magic != GF_4CC('f','L','a','C')) {"
    },
    {
        "line": 122,
        "fullcodeline": "u32 type = gf_bs_read_int(ctx->bs, 7);"
    },
    {
        "line": 123,
        "fullcodeline": "u32 len = gf_bs_read_int(ctx->bs, 24);"
    },
    {
        "line": 177,
        "fullcodeline": "ctx->in_seek = GF_FALSE;"
    },
    {
        "line": 191,
        "fullcodeline": "if (!ctx->timescale || (ctx->timescale==ctx->sample_rate) )"
    },
    {
        "line": 192,
        "fullcodeline": "gf_filter_pck_set_duration(dst_pck, nb_samp);"
    },
    {
        "line": 200,
        "fullcodeline": "gf_filter_pck_set_byte_offset(dst_pck, ctx->byte_offset);"
    },
    {
        "line": 89,
        "fullcodeline": "hdr_start = memchr(cur_buf, 0xFF, cur_size);"
    },
    {
        "line": 91,
        "fullcodeline": "next_frame = (u32) (hdr_start-start);"
    },
    {
        "line": 99,
        "fullcodeline": "cur_buf = hdr_start+1;"
    },
    {
        "line": 100,
        "fullcodeline": "cur_size = (u32) (cur_buf - start);"
    },
    {
        "line": 102,
        "fullcodeline": "cur_size = remain - cur_size;"
    },
    {
        "line": 103,
        "fullcodeline": "hdr_start = NULL;"
    },
    {
        "line": 121,
        "fullcodeline": "Bool last = gf_bs_read_int(ctx->bs, 1);"
    },
    {
        "line": 194,
        "fullcodeline": "gf_filter_pck_set_duration(dst_pck, (nb_samp * ctx->timescale) / ctx->sample_rate);"
    },
    {
        "line": 43,
        "fullcodeline": "} else if (ctx->byte_offset + ctx->flac_buffer_size != byte_offset) {"
    },
    {
        "line": 90,
        "fullcodeline": "if (!hdr_start) break;"
    },
    {
        "line": 92,
        "fullcodeline": "if (next_frame == remain)"
    },
    {
        "line": 101,
        "fullcodeline": "assert(cur_size<=remain);"
    },
    {
        "line": 126,
        "fullcodeline": "u16 min_block_size = gf_bs_read_u16(ctx->bs);"
    },
    {
        "line": 127,
        "fullcodeline": "u16 max_block_size = gf_bs_read_u16(ctx->bs);"
    },
    {
        "line": 128,
        "fullcodeline": "/*u32 min_frame_size = */gf_bs_read_u24(ctx->bs);"
    },
    {
        "line": 129,
        "fullcodeline": "/*u32 max_frame_size = */gf_bs_read_u24(ctx->bs);"
    },
    {
        "line": 130,
        "fullcodeline": "ctx->sample_rate = gf_bs_read_int(ctx->bs, 20);"
    },
    {
        "line": 131,
        "fullcodeline": "ctx->nb_channels = 1 + gf_bs_read_int(ctx->bs, 3);"
    },
    {
        "line": 132,
        "fullcodeline": "ctx->bits_per_sample = 1 + gf_bs_read_int(ctx->bs, 5);"
    },
    {
        "line": 139,
        "fullcodeline": "gf_bs_skip_bytes(ctx->bs, 16);"
    },
    {
        "line": 140,
        "fullcodeline": "dsi_end = (u32) gf_bs_get_position(ctx->bs);"
    },
    {
        "line": 44,
        "fullcodeline": "ctx->byte_offset = GF_FILTER_NO_BO;"
    },
    {
        "line": 95,
        "fullcodeline": "if ((hdr_start[1]&0xFC) == 0xF8) {"
    },
    {
        "line": 133,
        "fullcodeline": "if (min_block_size==max_block_size) ctx->block_size = min_block_size;"
    },
    {
        "line": 136,
        "fullcodeline": "ctx->duration.num = gf_bs_read_long_int(ctx->bs, 36);"
    },
    {
        "line": 145,
        "fullcodeline": "gf_bs_skip_bytes(ctx->bs, len);"
    },
    {
        "line": 96,
        "fullcodeline": "if (flac_parse_header(ctx, hdr_start, (u32) remain - next_frame, &hdr))"
    },
    {
        "line": 45,
        "fullcodeline": "if ((byte_offset != GF_FILTER_NO_BO) && (byte_offset>ctx->flac_buffer_size) ) {"
    },
    {
        "line": 46,
        "fullcodeline": "ctx->byte_offset = byte_offset - ctx->flac_buffer_size;"
    },
    {
        "line": 134,
        "fullcodeline": "else ctx->block_size = 0;"
    }
]