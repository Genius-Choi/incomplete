[
    {
        "line": 4,
        "fullcodeline": "def sanitize(item):"
    },
    {
        "line": 7,
        "fullcodeline": "unsafe_prefixes = (\"+\", \"=\", \"-\", \"@\")"
    },
    {
        "line": 8,
        "fullcodeline": "warning_message = \"Sanitizing flagged data by escaping cell contents that begin \""
    },
    {
        "line": 11,
        "fullcodeline": "if isinstance(data, str):"
    },
    {
        "line": 12,
        "fullcodeline": "if data.startswith(unsafe_prefixes):"
    },
    {
        "line": 16,
        "fullcodeline": "elif isinstance(data, list) and isinstance(data[0], str):"
    },
    {
        "line": 13,
        "fullcodeline": "warnings.warn(warning_message)"
    },
    {
        "line": 17,
        "fullcodeline": "sanitized_data = copy.deepcopy(data)"
    },
    {
        "line": 14,
        "fullcodeline": "return sanitize(data)"
    },
    {
        "line": 18,
        "fullcodeline": "for index, item in enumerate(data):"
    },
    {
        "line": 23,
        "fullcodeline": "elif isinstance(data[0], list) and isinstance(data[0][0], str):"
    },
    {
        "line": 24,
        "fullcodeline": "sanitized_data = copy.deepcopy(data)"
    },
    {
        "line": 32,
        "fullcodeline": "raise ValueError(\"Unsupported data type: \" + str(type(data)))"
    },
    {
        "line": 25,
        "fullcodeline": "for outer_index, sublist in enumerate(data):"
    },
    {
        "line": 19,
        "fullcodeline": "if item.startswith(unsafe_prefixes):"
    },
    {
        "line": 20,
        "fullcodeline": "warnings.warn(warning_message)"
    },
    {
        "line": 21,
        "fullcodeline": "sanitized_data[index] = sanitize(item)"
    },
    {
        "line": 26,
        "fullcodeline": "for inner_index, item in enumerate(sublist):"
    },
    {
        "line": 27,
        "fullcodeline": "if item.startswith(unsafe_prefixes):"
    },
    {
        "line": 28,
        "fullcodeline": "warnings.warn(warning_message)"
    },
    {
        "line": 29,
        "fullcodeline": "sanitized_data[outer_index][inner_index] = sanitize(item)"
    }
]