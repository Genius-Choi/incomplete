[
    {
        "line": 3,
        "fullcodeline": "SCPRContext *s = avctx->priv_data;"
    },
    {
        "line": 4,
        "fullcodeline": "GetByteContext *gb = &s->gb;"
    },
    {
        "line": 5,
        "fullcodeline": "int cx = 0, cx1 = 0, k = 0, clr = 0;"
    },
    {
        "line": 6,
        "fullcodeline": "int run, r, g, b, off, y = 0, x = 0, z, ret;"
    },
    {
        "line": 7,
        "fullcodeline": "unsigned backstep = linesize - avctx->width;"
    },
    {
        "line": 8,
        "fullcodeline": "const int cxshift = s->cxshift;"
    },
    {
        "line": 11,
        "fullcodeline": "reinit_tables(s);"
    },
    {
        "line": 12,
        "fullcodeline": "bytestream2_skip(gb, 2);"
    },
    {
        "line": 13,
        "fullcodeline": "init_rangecoder(&s->rc, gb);"
    },
    {
        "line": 55,
        "fullcodeline": "off = -linesize - 1;"
    },
    {
        "line": 56,
        "fullcodeline": "ptype = 0;"
    },
    {
        "line": 15,
        "fullcodeline": "while (k < avctx->width + 1) {"
    },
    {
        "line": 16,
        "fullcodeline": "ret = decode_unit(s, &s->pixel_model[0][cx + cx1], 400, &r);"
    },
    {
        "line": 20,
        "fullcodeline": "cx1 = (cx << 6) & 0xFC0;"
    },
    {
        "line": 21,
        "fullcodeline": "cx = r >> cxshift;"
    },
    {
        "line": 22,
        "fullcodeline": "ret = decode_unit(s, &s->pixel_model[1][cx + cx1], 400, &g);"
    },
    {
        "line": 26,
        "fullcodeline": "cx1 = (cx << 6) & 0xFC0;"
    },
    {
        "line": 27,
        "fullcodeline": "cx = g >> cxshift;"
    },
    {
        "line": 28,
        "fullcodeline": "ret = decode_unit(s, &s->pixel_model[2][cx + cx1], 400, &b);"
    },
    {
        "line": 32,
        "fullcodeline": "cx1 = (cx << 6) & 0xFC0;"
    },
    {
        "line": 33,
        "fullcodeline": "cx = b >> cxshift;"
    },
    {
        "line": 35,
        "fullcodeline": "ret = decode_value(s, s->run_model[0], 256, 400, &run);"
    },
    {
        "line": 39,
        "fullcodeline": "clr = (b << 16) + (g << 8) + r;"
    },
    {
        "line": 40,
        "fullcodeline": "k += run;"
    },
    {
        "line": 58,
        "fullcodeline": "while (x < avctx->width && y < avctx->height) {"
    },
    {
        "line": 59,
        "fullcodeline": "ret = decode_value(s, s->op_model[ptype], 6, 1000, &ptype);"
    },
    {
        "line": 83,
        "fullcodeline": "ret = decode_value(s, s->run_model[ptype], 256, 400, &run);"
    },
    {
        "line": 17,
        "fullcodeline": "if (ret < 0)"
    },
    {
        "line": 23,
        "fullcodeline": "if (ret < 0)"
    },
    {
        "line": 29,
        "fullcodeline": "if (ret < 0)"
    },
    {
        "line": 36,
        "fullcodeline": "if (ret < 0)"
    },
    {
        "line": 41,
        "fullcodeline": "while (run-- > 0) {"
    },
    {
        "line": 60,
        "fullcodeline": "if (ret < 0)"
    },
    {
        "line": 62,
        "fullcodeline": "if (ptype == 0) {"
    },
    {
        "line": 81,
        "fullcodeline": "if (ptype > 5)"
    },
    {
        "line": 84,
        "fullcodeline": "if (ret < 0)"
    },
    {
        "line": 45,
        "fullcodeline": "dst[y * linesize + x] = clr;"
    },
    {
        "line": 46,
        "fullcodeline": "lx = x;"
    },
    {
        "line": 47,
        "fullcodeline": "ly = y;"
    },
    {
        "line": 48,
        "fullcodeline": "x++;"
    },
    {
        "line": 63,
        "fullcodeline": "ret = decode_unit(s, &s->pixel_model[0][cx + cx1], 400, &r);"
    },
    {
        "line": 67,
        "fullcodeline": "cx1 = (cx << 6) & 0xFC0;"
    },
    {
        "line": 68,
        "fullcodeline": "cx = r >> cxshift;"
    },
    {
        "line": 69,
        "fullcodeline": "ret = decode_unit(s, &s->pixel_model[1][cx + cx1], 400, &g);"
    },
    {
        "line": 73,
        "fullcodeline": "cx1 = (cx << 6) & 0xFC0;"
    },
    {
        "line": 74,
        "fullcodeline": "cx = g >> cxshift;"
    },
    {
        "line": 75,
        "fullcodeline": "ret = decode_unit(s, &s->pixel_model[2][cx + cx1], 400, &b);"
    },
    {
        "line": 79,
        "fullcodeline": "clr = (b << 16) + (g << 8) + r;"
    },
    {
        "line": 117,
        "fullcodeline": "clr = dst[ly * linesize + lx];"
    },
    {
        "line": 195,
        "fullcodeline": "cx1 = (clr & 0x3F00) >> 2;"
    },
    {
        "line": 196,
        "fullcodeline": "cx = (clr & 0xFFFFFF) >> 16;"
    },
    {
        "line": 42,
        "fullcodeline": "if (y >= avctx->height)"
    },
    {
        "line": 49,
        "fullcodeline": "if (x >= avctx->width) {"
    },
    {
        "line": 64,
        "fullcodeline": "if (ret < 0)"
    },
    {
        "line": 70,
        "fullcodeline": "if (ret < 0)"
    },
    {
        "line": 76,
        "fullcodeline": "if (ret < 0)"
    },
    {
        "line": 198,
        "fullcodeline": "cx1 = (clr & 0xFC00) >> 4;"
    },
    {
        "line": 199,
        "fullcodeline": "cx = (clr & 0xFFFFFF) >> 18;"
    },
    {
        "line": 50,
        "fullcodeline": "x = 0;"
    },
    {
        "line": 51,
        "fullcodeline": "y++;"
    },
    {
        "line": 89,
        "fullcodeline": "while (run-- > 0) {"
    },
    {
        "line": 93,
        "fullcodeline": "dst[y * linesize + x] = clr;"
    },
    {
        "line": 94,
        "fullcodeline": "lx = x;"
    },
    {
        "line": 95,
        "fullcodeline": "ly = y;"
    },
    {
        "line": 96,
        "fullcodeline": "x++;"
    },
    {
        "line": 104,
        "fullcodeline": "while (run-- > 0) {"
    },
    {
        "line": 108,
        "fullcodeline": "dst[y * linesize + x] = dst[ly * linesize + lx];"
    },
    {
        "line": 109,
        "fullcodeline": "lx = x;"
    },
    {
        "line": 110,
        "fullcodeline": "ly = y;"
    },
    {
        "line": 111,
        "fullcodeline": "x++;"
    },
    {
        "line": 120,
        "fullcodeline": "while (run-- > 0) {"
    },
    {
        "line": 124,
        "fullcodeline": "clr = dst[y * linesize + x + off + 1];"
    },
    {
        "line": 125,
        "fullcodeline": "dst[y * linesize + x] = clr;"
    },
    {
        "line": 126,
        "fullcodeline": "lx = x;"
    },
    {
        "line": 127,
        "fullcodeline": "ly = y;"
    },
    {
        "line": 128,
        "fullcodeline": "x++;"
    },
    {
        "line": 136,
        "fullcodeline": "while (run-- > 0) {"
    },
    {
        "line": 137,
        "fullcodeline": "uint8_t *odst = (uint8_t *)dst;"
    },
    {
        "line": 149,
        "fullcodeline": "r = odst[(ly * linesize + lx) * 4] +"
    },
    {
        "line": 152,
        "fullcodeline": "g = odst[(ly * linesize + lx) * 4 + 1] +"
    },
    {
        "line": 155,
        "fullcodeline": "b = odst[(ly * linesize + lx) * 4 + 2] +"
    },
    {
        "line": 158,
        "fullcodeline": "clr = ((b & 0xFF) << 16) + ((g & 0xFF) << 8) + (r & 0xFF);"
    },
    {
        "line": 159,
        "fullcodeline": "dst[y * linesize + x] = clr;"
    },
    {
        "line": 160,
        "fullcodeline": "lx = x;"
    },
    {
        "line": 161,
        "fullcodeline": "ly = y;"
    },
    {
        "line": 162,
        "fullcodeline": "x++;"
    },
    {
        "line": 170,
        "fullcodeline": "while (run-- > 0) {"
    },
    {
        "line": 181,
        "fullcodeline": "clr = dst[y * linesize + x + off - z];"
    },
    {
        "line": 182,
        "fullcodeline": "dst[y * linesize + x] = clr;"
    },
    {
        "line": 183,
        "fullcodeline": "lx = x;"
    },
    {
        "line": 184,
        "fullcodeline": "ly = y;"
    },
    {
        "line": 185,
        "fullcodeline": "x++;"
    },
    {
        "line": 90,
        "fullcodeline": "if (y >= avctx->height)"
    },
    {
        "line": 97,
        "fullcodeline": "if (x >= avctx->width) {"
    },
    {
        "line": 105,
        "fullcodeline": "if (y >= avctx->height)"
    },
    {
        "line": 112,
        "fullcodeline": "if (x >= avctx->width) {"
    },
    {
        "line": 121,
        "fullcodeline": "if (y < 1 || y >= avctx->height)"
    },
    {
        "line": 129,
        "fullcodeline": "if (x >= avctx->width) {"
    },
    {
        "line": 139,
        "fullcodeline": "if (y < 1 || y >= avctx->height ||"
    },
    {
        "line": 143,
        "fullcodeline": "if (x == 0) {"
    },
    {
        "line": 163,
        "fullcodeline": "if (x >= avctx->width) {"
    },
    {
        "line": 171,
        "fullcodeline": "if (y < 1 || y >= avctx->height ||"
    },
    {
        "line": 175,
        "fullcodeline": "if (x == 0) {"
    },
    {
        "line": 186,
        "fullcodeline": "if (x >= avctx->width) {"
    },
    {
        "line": 98,
        "fullcodeline": "x = 0;"
    },
    {
        "line": 99,
        "fullcodeline": "y++;"
    },
    {
        "line": 113,
        "fullcodeline": "x = 0;"
    },
    {
        "line": 114,
        "fullcodeline": "y++;"
    },
    {
        "line": 130,
        "fullcodeline": "x = 0;"
    },
    {
        "line": 131,
        "fullcodeline": "y++;"
    },
    {
        "line": 140,
        "fullcodeline": "(y == 1 && x == 0))"
    },
    {
        "line": 144,
        "fullcodeline": "z = backstep;"
    },
    {
        "line": 164,
        "fullcodeline": "x = 0;"
    },
    {
        "line": 165,
        "fullcodeline": "y++;"
    },
    {
        "line": 172,
        "fullcodeline": "(y == 1 && x == 0))"
    },
    {
        "line": 176,
        "fullcodeline": "z = backstep;"
    },
    {
        "line": 187,
        "fullcodeline": "x = 0;"
    },
    {
        "line": 188,
        "fullcodeline": "y++;"
    },
    {
        "line": 146,
        "fullcodeline": "z = 0;"
    },
    {
        "line": 178,
        "fullcodeline": "z = 0;"
    },
    {
        "line": 151,
        "fullcodeline": "odst[((y * linesize + x) + off - z) * 4];"
    },
    {
        "line": 154,
        "fullcodeline": "odst[((y * linesize + x) + off - z) * 4 + 1];"
    },
    {
        "line": 157,
        "fullcodeline": "odst[((y * linesize + x) + off - z) * 4 + 2];"
    },
    {
        "line": 150,
        "fullcodeline": "odst[((y * linesize + x) + off - z) * 4 + 4] -"
    },
    {
        "line": 153,
        "fullcodeline": "odst[((y * linesize + x) + off - z) * 4 + 5] -"
    },
    {
        "line": 156,
        "fullcodeline": "odst[((y * linesize + x) + off - z) * 4 + 6] -"
    }
]