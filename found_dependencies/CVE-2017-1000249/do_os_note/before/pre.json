[
    {
        "line": 5,
        "fullcodeline": "if (namesz == 5 && strcmp((char *)&nbuf[noff], \"SuSE\") == 0 &&"
    },
    {
        "line": 67,
        "fullcodeline": "if (namesz == 8 && strcmp((char *)&nbuf[noff], \"OpenBSD\") == 0 &&"
    },
    {
        "line": 6,
        "fullcodeline": "type == NT_GNU_VERSION && descsz == 2) {"
    },
    {
        "line": 7,
        "fullcodeline": "*flags |= FLAGS_DID_OS_NOTE;"
    },
    {
        "line": 8,
        "fullcodeline": "file_printf(ms, \", for SuSE %d.%d\", nbuf[doff], nbuf[doff + 1]);"
    },
    {
        "line": 12,
        "fullcodeline": "if (namesz == 4 && strcmp((char *)&nbuf[noff], \"GNU\") == 0 &&"
    },
    {
        "line": 13,
        "fullcodeline": "type == NT_GNU_VERSION && descsz == 16) {"
    },
    {
        "line": 51,
        "fullcodeline": "if (namesz == 7 && strcmp((char *)&nbuf[noff], \"NetBSD\") == 0) {"
    },
    {
        "line": 59,
        "fullcodeline": "if (namesz == 8 && strcmp((char *)&nbuf[noff], \"FreeBSD\") == 0) {"
    },
    {
        "line": 68,
        "fullcodeline": "type == NT_OPENBSD_VERSION && descsz == 4) {"
    },
    {
        "line": 76,
        "fullcodeline": "if (namesz == 10 && strcmp((char *)&nbuf[noff], \"DragonFly\") == 0 &&"
    },
    {
        "line": 77,
        "fullcodeline": "type == NT_DRAGONFLY_VERSION && descsz == 4) {"
    },
    {
        "line": 83,
        "fullcodeline": "desc = elf_getu32(swap, desc);"
    },
    {
        "line": 14,
        "fullcodeline": "uint32_t desc[4];"
    },
    {
        "line": 15,
        "fullcodeline": "(void)memcpy(desc, &nbuf[doff], sizeof(desc));"
    },
    {
        "line": 20,
        "fullcodeline": "switch (elf_getu32(swap, desc[0])) {"
    },
    {
        "line": 52,
        "fullcodeline": "if (type == NT_NETBSD_VERSION && descsz == 4) {"
    },
    {
        "line": 60,
        "fullcodeline": "if (type == NT_FREEBSD_VERSION && descsz == 4) {"
    },
    {
        "line": 82,
        "fullcodeline": "(void)memcpy(&desc, &nbuf[doff], sizeof(desc));"
    },
    {
        "line": 18,
        "fullcodeline": "if (file_printf(ms, \", for GNU/\") == -1)"
    },
    {
        "line": 45,
        "fullcodeline": "if (file_printf(ms, \" %d.%d.%d\", elf_getu32(swap, desc[1]),"
    },
    {
        "line": 46,
        "fullcodeline": "elf_getu32(swap, desc[2]), elf_getu32(swap, desc[3])) == -1)"
    },
    {
        "line": 70,
        "fullcodeline": "if (file_printf(ms, \", for OpenBSD\") == -1)"
    },
    {
        "line": 80,
        "fullcodeline": "if (file_printf(ms, \", for DragonFly\") == -1)"
    },
    {
        "line": 84,
        "fullcodeline": "if (file_printf(ms, \" %d.%d.%d\", desc / 100000,"
    },
    {
        "line": 85,
        "fullcodeline": "desc / 10000 % 10, desc % 10000) == -1)"
    },
    {
        "line": 22,
        "fullcodeline": "if (file_printf(ms, \"Linux\") == -1)"
    },
    {
        "line": 26,
        "fullcodeline": "if (file_printf(ms, \"Hurd\") == -1)"
    },
    {
        "line": 30,
        "fullcodeline": "if (file_printf(ms, \"Solaris\") == -1)"
    },
    {
        "line": 34,
        "fullcodeline": "if (file_printf(ms, \"kFreeBSD\") == -1)"
    },
    {
        "line": 38,
        "fullcodeline": "if (file_printf(ms, \"kNetBSD\") == -1)"
    },
    {
        "line": 42,
        "fullcodeline": "if (file_printf(ms, \"<unknown>\") == -1)"
    }
]