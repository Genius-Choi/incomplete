[
    {
        "line": 8,
        "fullcodeline": "int type_num = -1;"
    },
    {
        "line": 9,
        "fullcodeline": "Status s ="
    },
    {
        "line": 21,
        "fullcodeline": "auto* np_array = reinterpret_cast<PyArrayObject*>("
    },
    {
        "line": 37,
        "fullcodeline": "PyArray_CLEARFLAGS(np_array, NPY_ARRAY_OWNDATA);"
    },
    {
        "line": 41,
        "fullcodeline": "auto* releaser = reinterpret_cast<TensorReleaser*>("
    },
    {
        "line": 43,
        "fullcodeline": "releaser->destructor = new std::function<void()>(std::move(destructor));"
    },
    {
        "line": 49,
        "fullcodeline": "*result = reinterpret_cast<PyObject*>(np_array);"
    },
    {
        "line": 3,
        "fullcodeline": "if (dtype == DT_STRING || dtype == DT_RESOURCE) {"
    },
    {
        "line": 10,
        "fullcodeline": "TF_DataType_to_PyArray_TYPE(static_cast<TF_DataType>(dtype), &type_num);"
    },
    {
        "line": 11,
        "fullcodeline": "if (!s.ok()) {"
    },
    {
        "line": 15,
        "fullcodeline": "if (dim_size > NPY_MAXDIMS) {"
    },
    {
        "line": 23,
        "fullcodeline": "if (np_array == nullptr) {"
    },
    {
        "line": 38,
        "fullcodeline": "if (PyType_Ready(&TensorReleaserType) == -1) {"
    },
    {
        "line": 44,
        "fullcodeline": "if (PyArray_SetBaseObject(np_array, reinterpret_cast<PyObject*>(releaser)) =="
    },
    {
        "line": 50,
        "fullcodeline": "return OkStatus();"
    },
    {
        "line": 22,
        "fullcodeline": "PyArray_SimpleNewFromData(dim_size, dims, type_num, data));"
    },
    {
        "line": 24,
        "fullcodeline": "string shape_str = absl::StrJoin("
    },
    {
        "line": 42,
        "fullcodeline": "TensorReleaserType.tp_alloc(&TensorReleaserType, 0));"
    },
    {
        "line": 45,
        "fullcodeline": "-1) {"
    },
    {
        "line": 46,
        "fullcodeline": "Py_DECREF(releaser);"
    },
    {
        "line": 4,
        "fullcodeline": "return errors::FailedPrecondition("
    },
    {
        "line": 16,
        "fullcodeline": "return errors::InvalidArgument("
    },
    {
        "line": 26,
        "fullcodeline": "if (PyErr_Occurred()) {"
    },
    {
        "line": 33,
        "fullcodeline": "return errors::Internal("
    },
    {
        "line": 39,
        "fullcodeline": "return errors::Unknown(\"Python type initialization failed.\");"
    },
    {
        "line": 47,
        "fullcodeline": "return errors::Unknown(\"Python array refused to use memory.\");"
    },
    {
        "line": 25,
        "fullcodeline": "absl::Span<npy_intp>{dims, static_cast<size_t>(dim_size)}, \", \");"
    },
    {
        "line": 27,
        "fullcodeline": "string exception_str = PyExceptionFetch();"
    },
    {
        "line": 28,
        "fullcodeline": "PyErr_Clear();"
    },
    {
        "line": 29,
        "fullcodeline": "return errors::InvalidArgument("
    }
]