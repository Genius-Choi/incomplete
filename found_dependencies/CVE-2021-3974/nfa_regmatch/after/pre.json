[
    {
        "line": 7,
        "fullcodeline": "int\t\tresult = FALSE;"
    },
    {
        "line": 8,
        "fullcodeline": "size_t\tsize = 0;"
    },
    {
        "line": 9,
        "fullcodeline": "int\t\tflag = 0;"
    },
    {
        "line": 10,
        "fullcodeline": "int\t\tgo_to_nextline = FALSE;"
    },
    {
        "line": 12,
        "fullcodeline": "nfa_list_T\tlist[2];"
    },
    {
        "line": 16,
        "fullcodeline": "int\t\t*listids = NULL;"
    },
    {
        "line": 17,
        "fullcodeline": "int\t\tlistids_len = 0;"
    },
    {
        "line": 21,
        "fullcodeline": "int\t\tadd_off = 0;"
    },
    {
        "line": 22,
        "fullcodeline": "int\t\ttoplevel = start->c == NFA_MOPEN;"
    },
    {
        "line": 30,
        "fullcodeline": "fast_breakcheck();"
    },
    {
        "line": 46,
        "fullcodeline": "nfa_match = FALSE;"
    },
    {
        "line": 49,
        "fullcodeline": "size = (prog->nstate + 1) * sizeof(nfa_thread_T);"
    },
    {
        "line": 51,
        "fullcodeline": "list[0].t = alloc(size);"
    },
    {
        "line": 52,
        "fullcodeline": "list[0].len = prog->nstate + 1;"
    },
    {
        "line": 53,
        "fullcodeline": "list[1].t = alloc(size);"
    },
    {
        "line": 54,
        "fullcodeline": "list[1].len = prog->nstate + 1;"
    },
    {
        "line": 75,
        "fullcodeline": "thislist = &list[0];"
    },
    {
        "line": 76,
        "fullcodeline": "thislist->n = 0;"
    },
    {
        "line": 77,
        "fullcodeline": "thislist->has_pim = FALSE;"
    },
    {
        "line": 84,
        "fullcodeline": "thislist->id = rex.nfa_listid + 1;"
    },
    {
        "line": 102,
        "fullcodeline": "if (r == NULL)"
    },
    {
        "line": 55,
        "fullcodeline": "if (list[0].t == NULL || list[1].t == NULL)"
    },
    {
        "line": 98,
        "fullcodeline": "r = addstate(thislist, start->out, m, NULL, 0);"
    },
    {
        "line": 104,
        "fullcodeline": "nfa_match = NFA_TOO_EXPENSIVE;"
    },
    {
        "line": 139,
        "fullcodeline": "thislist = &list[flag];"
    },
    {
        "line": 140,
        "fullcodeline": "nextlist = &list[flag ^= 1];"
    },
    {
        "line": 141,
        "fullcodeline": "nextlist->n = 0;\t    // clear nextlist"
    },
    {
        "line": 142,
        "fullcodeline": "nextlist->has_pim = FALSE;"
    },
    {
        "line": 143,
        "fullcodeline": "++rex.nfa_listid;"
    },
    {
        "line": 156,
        "fullcodeline": "thislist->id = rex.nfa_listid;"
    },
    {
        "line": 157,
        "fullcodeline": "nextlist->id = rex.nfa_listid + 1;"
    },
    {
        "line": 101,
        "fullcodeline": "r = addstate(thislist, start, m, NULL, 0);"
    },
    {
        "line": 132,
        "fullcodeline": "if (curc == NUL)"
    },
    {
        "line": 179,
        "fullcodeline": "if (thislist->n == 0)"
    },
    {
        "line": 183,
        "fullcodeline": "for (listidx = 0; listidx < thislist->n; ++listidx)"
    },
    {
        "line": 1426,
        "fullcodeline": "if (clen != 0)"
    },
    {
        "line": 124,
        "fullcodeline": "curc = (*mb_ptr2char)(rex.input);"
    },
    {
        "line": 125,
        "fullcodeline": "clen = (*mb_ptr2len)(rex.input);"
    },
    {
        "line": 134,
        "fullcodeline": "clen = 0;"
    },
    {
        "line": 135,
        "fullcodeline": "go_to_nextline = FALSE;"
    },
    {
        "line": 144,
        "fullcodeline": "if (prog->re_engine == AUTOMATIC_ENGINE"
    },
    {
        "line": 145,
        "fullcodeline": "&& (rex.nfa_listid >= NFA_MAX_STATES"
    },
    {
        "line": 152,
        "fullcodeline": "nfa_match = NFA_TOO_EXPENSIVE;"
    },
    {
        "line": 198,
        "fullcodeline": "t = &thislist->t[listidx];"
    },
    {
        "line": 225,
        "fullcodeline": "add_state = NULL;"
    },
    {
        "line": 227,
        "fullcodeline": "add_count = 0;"
    },
    {
        "line": 1332,
        "fullcodeline": "if (nfa_match == FALSE"
    },
    {
        "line": 1333,
        "fullcodeline": "&& ((toplevel"
    },
    {
        "line": 1427,
        "fullcodeline": "rex.input += clen;"
    },
    {
        "line": 93,
        "fullcodeline": "m->norm.list.multi[0].start_col = (colnr_T)(rex.input - rex.line);"
    },
    {
        "line": 129,
        "fullcodeline": "curc = *rex.input;"
    },
    {
        "line": 130,
        "fullcodeline": "clen = 1;"
    },
    {
        "line": 1220,
        "fullcodeline": "if (add_state != NULL)"
    },
    {
        "line": 1338,
        "fullcodeline": "|| (nfa_endp != NULL"
    },
    {
        "line": 308,
        "fullcodeline": "nfa_match = TRUE;"
    },
    {
        "line": 806,
        "fullcodeline": "add_state = t->state->out;"
    },
    {
        "line": 814,
        "fullcodeline": "ADD_STATE_IF_MATCH(t->state);"
    },
    {
        "line": 819,
        "fullcodeline": "ADD_STATE_IF_MATCH(t->state);"
    },
    {
        "line": 824,
        "fullcodeline": "ADD_STATE_IF_MATCH(t->state);"
    },
    {
        "line": 830,
        "fullcodeline": "ADD_STATE_IF_MATCH(t->state);"
    },
    {
        "line": 835,
        "fullcodeline": "ADD_STATE_IF_MATCH(t->state);"
    },
    {
        "line": 840,
        "fullcodeline": "ADD_STATE_IF_MATCH(t->state);"
    },
    {
        "line": 845,
        "fullcodeline": "ADD_STATE_IF_MATCH(t->state);"
    },
    {
        "line": 850,
        "fullcodeline": "ADD_STATE_IF_MATCH(t->state);"
    },
    {
        "line": 855,
        "fullcodeline": "ADD_STATE_IF_MATCH(t->state);"
    },
    {
        "line": 860,
        "fullcodeline": "ADD_STATE_IF_MATCH(t->state);"
    },
    {
        "line": 865,
        "fullcodeline": "ADD_STATE_IF_MATCH(t->state);"
    },
    {
        "line": 870,
        "fullcodeline": "ADD_STATE_IF_MATCH(t->state);"
    },
    {
        "line": 875,
        "fullcodeline": "ADD_STATE_IF_MATCH(t->state);"
    },
    {
        "line": 880,
        "fullcodeline": "ADD_STATE_IF_MATCH(t->state);"
    },
    {
        "line": 885,
        "fullcodeline": "ADD_STATE_IF_MATCH(t->state);"
    },
    {
        "line": 890,
        "fullcodeline": "ADD_STATE_IF_MATCH(t->state);"
    },
    {
        "line": 895,
        "fullcodeline": "ADD_STATE_IF_MATCH(t->state);"
    },
    {
        "line": 900,
        "fullcodeline": "ADD_STATE_IF_MATCH(t->state);"
    },
    {
        "line": 905,
        "fullcodeline": "ADD_STATE_IF_MATCH(t->state);"
    },
    {
        "line": 910,
        "fullcodeline": "ADD_STATE_IF_MATCH(t->state);"
    },
    {
        "line": 915,
        "fullcodeline": "ADD_STATE_IF_MATCH(t->state);"
    },
    {
        "line": 920,
        "fullcodeline": "ADD_STATE_IF_MATCH(t->state);"
    },
    {
        "line": 925,
        "fullcodeline": "ADD_STATE_IF_MATCH(t->state);"
    },
    {
        "line": 930,
        "fullcodeline": "ADD_STATE_IF_MATCH(t->state);"
    },
    {
        "line": 935,
        "fullcodeline": "ADD_STATE_IF_MATCH(t->state);"
    },
    {
        "line": 940,
        "fullcodeline": "ADD_STATE_IF_MATCH(t->state);"
    },
    {
        "line": 945,
        "fullcodeline": "ADD_STATE_IF_MATCH(t->state);"
    },
    {
        "line": 951,
        "fullcodeline": "ADD_STATE_IF_MATCH(t->state);"
    },
    {
        "line": 956,
        "fullcodeline": "ADD_STATE_IF_MATCH(t->state);"
    },
    {
        "line": 962,
        "fullcodeline": "ADD_STATE_IF_MATCH(t->state);"
    },
    {
        "line": 1336,
        "fullcodeline": "&& (rex.reg_maxcol == 0"
    },
    {
        "line": 239,
        "fullcodeline": "nfa_match = TRUE;"
    },
    {
        "line": 240,
        "fullcodeline": "copy_sub(&submatch->norm, &t->subs.norm);"
    },
    {
        "line": 296,
        "fullcodeline": "if (t->state->c != NFA_END_INVISIBLE_NEG)"
    },
    {
        "line": 424,
        "fullcodeline": "nfa_state_T *skip = NULL;"
    },
    {
        "line": 465,
        "fullcodeline": "copy_sub_off(&m->norm, &t->subs.norm);"
    },
    {
        "line": 472,
        "fullcodeline": "result = recursive_regmatch(t->state, NULL, prog,"
    },
    {
        "line": 533,
        "fullcodeline": "if (rex.input == rex.line)"
    },
    {
        "line": 541,
        "fullcodeline": "if (curc == NUL)"
    },
    {
        "line": 551,
        "fullcodeline": "if (curc == NUL)"
    },
    {
        "line": 577,
        "fullcodeline": "if (rex.input == rex.line)"
    },
    {
        "line": 620,
        "fullcodeline": "int\t    mc = curc;"
    },
    {
        "line": 624,
        "fullcodeline": "int\t    cchars[MAX_MCO];"
    },
    {
        "line": 625,
        "fullcodeline": "int\t    ccount = 0;"
    },
    {
        "line": 628,
        "fullcodeline": "sta = t->state->out;"
    },
    {
        "line": 629,
        "fullcodeline": "len = 0;"
    },
    {
        "line": 689,
        "fullcodeline": "end = t->state->out1;\t    // NFA_END_COMPOSING"
    },
    {
        "line": 690,
        "fullcodeline": "ADD_STATE_IF_MATCH(end);"
    },
    {
        "line": 726,
        "fullcodeline": "state = t->state->out;"
    },
    {
        "line": 727,
        "fullcodeline": "result_if_matched = (t->state->c == NFA_START_COLL);"
    },
    {
        "line": 787,
        "fullcodeline": "if (curc > 0)"
    },
    {
        "line": 797,
        "fullcodeline": "if (enc_utf8 && utf_iscomposing(curc))"
    },
    {
        "line": 813,
        "fullcodeline": "result = vim_isIDc(curc);"
    },
    {
        "line": 818,
        "fullcodeline": "result = !VIM_ISDIGIT(curc) && vim_isIDc(curc);"
    },
    {
        "line": 823,
        "fullcodeline": "result = vim_iswordp_buf(rex.input, rex.reg_buf);"
    },
    {
        "line": 828,
        "fullcodeline": "result = !VIM_ISDIGIT(curc)"
    },
    {
        "line": 834,
        "fullcodeline": "result = vim_isfilec(curc);"
    },
    {
        "line": 839,
        "fullcodeline": "result = !VIM_ISDIGIT(curc) && vim_isfilec(curc);"
    },
    {
        "line": 844,
        "fullcodeline": "result = vim_isprintc(PTR2CHAR(rex.input));"
    },
    {
        "line": 849,
        "fullcodeline": "result = !VIM_ISDIGIT(curc) && vim_isprintc(PTR2CHAR(rex.input));"
    },
    {
        "line": 854,
        "fullcodeline": "result = VIM_ISWHITE(curc);"
    },
    {
        "line": 859,
        "fullcodeline": "result = curc != NUL && !VIM_ISWHITE(curc);"
    },
    {
        "line": 864,
        "fullcodeline": "result = ri_digit(curc);"
    },
    {
        "line": 869,
        "fullcodeline": "result = curc != NUL && !ri_digit(curc);"
    },
    {
        "line": 874,
        "fullcodeline": "result = ri_hex(curc);"
    },
    {
        "line": 879,
        "fullcodeline": "result = curc != NUL && !ri_hex(curc);"
    },
    {
        "line": 884,
        "fullcodeline": "result = ri_octal(curc);"
    },
    {
        "line": 889,
        "fullcodeline": "result = curc != NUL && !ri_octal(curc);"
    },
    {
        "line": 894,
        "fullcodeline": "result = ri_word(curc);"
    },
    {
        "line": 899,
        "fullcodeline": "result = curc != NUL && !ri_word(curc);"
    },
    {
        "line": 904,
        "fullcodeline": "result = ri_head(curc);"
    },
    {
        "line": 909,
        "fullcodeline": "result = curc != NUL && !ri_head(curc);"
    },
    {
        "line": 914,
        "fullcodeline": "result = ri_alpha(curc);"
    },
    {
        "line": 919,
        "fullcodeline": "result = curc != NUL && !ri_alpha(curc);"
    },
    {
        "line": 924,
        "fullcodeline": "result = ri_lower(curc);"
    },
    {
        "line": 929,
        "fullcodeline": "result = curc != NUL && !ri_lower(curc);"
    },
    {
        "line": 934,
        "fullcodeline": "result = ri_upper(curc);"
    },
    {
        "line": 939,
        "fullcodeline": "result = curc != NUL && !ri_upper(curc);"
    },
    {
        "line": 944,
        "fullcodeline": "result = ri_lower(curc) || (rex.reg_ic && ri_upper(curc));"
    },
    {
        "line": 949,
        "fullcodeline": "result = curc != NUL"
    },
    {
        "line": 955,
        "fullcodeline": "result = ri_upper(curc) || (rex.reg_ic && ri_lower(curc));"
    },
    {
        "line": 960,
        "fullcodeline": "result = curc != NUL"
    },
    {
        "line": 1050,
        "fullcodeline": "result = (REG_MULTI &&"
    },
    {
        "line": 1063,
        "fullcodeline": "result = nfa_re_num_cmp(t->state->val, t->state->c - NFA_COL,"
    },
    {
        "line": 1076,
        "fullcodeline": "int     op = t->state->c - NFA_VCOL;"
    },
    {
        "line": 1077,
        "fullcodeline": "colnr_T col = (colnr_T)(rex.input - rex.line);"
    },
    {
        "line": 1078,
        "fullcodeline": "win_T   *wp = rex.reg_win == NULL ? curwin : rex.reg_win;"
    },
    {
        "line": 1085,
        "fullcodeline": "result = FALSE;"
    },
    {
        "line": 1111,
        "fullcodeline": "size_t\tcol = rex.input - rex.line;"
    },
    {
        "line": 1112,
        "fullcodeline": "pos_T\t*pos = getmark_buf(rex.reg_buf, t->state->val, FALSE);"
    },
    {
        "line": 1150,
        "fullcodeline": "result = (rex.reg_win != NULL"
    },
    {
        "line": 1200,
        "fullcodeline": "int c = t->state->c;"
    },
    {
        "line": 1206,
        "fullcodeline": "result = (c == curc);"
    },
    {
        "line": 1214,
        "fullcodeline": "ADD_STATE_IF_MATCH(t->state);"
    },
    {
        "line": 1225,
        "fullcodeline": "if (t->pim.result == NFA_PIM_UNUSED)"
    },
    {
        "line": 1300,
        "fullcodeline": "if (pim == &t->pim)"
    },
    {
        "line": 1315,
        "fullcodeline": "if (r == NULL)"
    },
    {
        "line": 1335,
        "fullcodeline": "&& clen != 0"
    },
    {
        "line": 1337,
        "fullcodeline": "|| (colnr_T)(rex.input - rex.line) < rex.reg_maxcol))"
    },
    {
        "line": 1340,
        "fullcodeline": "? (rex.lnum < nfa_endp->se_u.pos.lnum"
    },
    {
        "line": 1344,
        "fullcodeline": ": rex.input < nfa_endp->se_u.ptr))))"
    },
    {
        "line": 1428,
        "fullcodeline": "else if (go_to_nextline || (nfa_endp != NULL && REG_MULTI"
    },
    {
        "line": 235,
        "fullcodeline": "if (enc_utf8 && !rex.reg_icombine"
    },
    {
        "line": 288,
        "fullcodeline": "if (nfa_endp != NULL && (REG_MULTI"
    },
    {
        "line": 298,
        "fullcodeline": "copy_sub(&m->norm, &t->subs.norm);"
    },
    {
        "line": 311,
        "fullcodeline": "clen = 0;"
    },
    {
        "line": 431,
        "fullcodeline": "if (state_in_list(nextlist, t->state->out1->out, &t->subs))"
    },
    {
        "line": 454,
        "fullcodeline": "if (skip != NULL)"
    },
    {
        "line": 474,
        "fullcodeline": "if (result == NFA_TOO_EXPENSIVE)"
    },
    {
        "line": 536,
        "fullcodeline": "add_state = t->state->out;"
    },
    {
        "line": 544,
        "fullcodeline": "add_state = t->state->out;"
    },
    {
        "line": 571,
        "fullcodeline": "add_state = t->state->out;"
    },
    {
        "line": 597,
        "fullcodeline": "add_state = t->state->out;"
    },
    {
        "line": 602,
        "fullcodeline": "if (rex.lnum == 0 && rex.input == rex.line"
    },
    {
        "line": 603,
        "fullcodeline": "&& (!REG_MULTI || rex.reg_firstlnum == 1))"
    },
    {
        "line": 606,
        "fullcodeline": "add_state = t->state->out;"
    },
    {
        "line": 611,
        "fullcodeline": "if (rex.lnum == rex.reg_maxline && curc == NUL)"
    },
    {
        "line": 614,
        "fullcodeline": "add_state = t->state->out;"
    },
    {
        "line": 630,
        "fullcodeline": "if (utf_iscomposing(sta->c))"
    },
    {
        "line": 637,
        "fullcodeline": "if (rex.reg_icombine && len == 0)"
    },
    {
        "line": 695,
        "fullcodeline": "if (curc == NUL && !rex.reg_line_lbr && REG_MULTI"
    },
    {
        "line": 696,
        "fullcodeline": "&& rex.lnum <= rex.reg_maxline)"
    },
    {
        "line": 698,
        "fullcodeline": "go_to_nextline = TRUE;"
    },
    {
        "line": 701,
        "fullcodeline": "add_state = t->state->out;"
    },
    {
        "line": 702,
        "fullcodeline": "add_off = -1;"
    },
    {
        "line": 723,
        "fullcodeline": "if (curc == NUL)"
    },
    {
        "line": 789,
        "fullcodeline": "add_state = t->state->out;"
    },
    {
        "line": 790,
        "fullcodeline": "add_off = clen;"
    },
    {
        "line": 799,
        "fullcodeline": "add_off = clen;"
    },
    {
        "line": 829,
        "fullcodeline": "&& vim_iswordp_buf(rex.input, rex.reg_buf);"
    },
    {
        "line": 950,
        "fullcodeline": "&& !(ri_lower(curc) || (rex.reg_ic && ri_upper(curc)));"
    },
    {
        "line": 961,
        "fullcodeline": "&& !(ri_upper(curc) || (rex.reg_ic && ri_lower(curc)));"
    },
    {
        "line": 990,
        "fullcodeline": "if (t->state->c <= NFA_BACKREF9)"
    },
    {
        "line": 1032,
        "fullcodeline": "if (t->count - clen <= 0)"
    },
    {
        "line": 1035,
        "fullcodeline": "add_state = t->state->out;"
    },
    {
        "line": 1036,
        "fullcodeline": "add_off = clen;"
    },
    {
        "line": 1051,
        "fullcodeline": "nfa_re_num_cmp(t->state->val, t->state->c - NFA_LNUM,"
    },
    {
        "line": 1056,
        "fullcodeline": "add_state = t->state->out;"
    },
    {
        "line": 1068,
        "fullcodeline": "add_state = t->state->out;"
    },
    {
        "line": 1153,
        "fullcodeline": "&& ((colnr_T)(rex.input - rex.line)"
    },
    {
        "line": 1158,
        "fullcodeline": "add_state = t->state->out;"
    },
    {
        "line": 1167,
        "fullcodeline": "add_state = t->state->out;"
    },
    {
        "line": 1208,
        "fullcodeline": "if (!result && rex.reg_ic)"
    },
    {
        "line": 1212,
        "fullcodeline": "if (result && enc_utf8 && !rex.reg_icombine)"
    },
    {
        "line": 1226,
        "fullcodeline": "pim = NULL;"
    },
    {
        "line": 1232,
        "fullcodeline": "if (pim != NULL && (clen == 0 || match_follows(add_state, 0)))"
    },
    {
        "line": 1294,
        "fullcodeline": "pim = NULL;"
    },
    {
        "line": 1302,
        "fullcodeline": "copy_pim(&pim_copy, pim);"
    },
    {
        "line": 1303,
        "fullcodeline": "pim = &pim_copy;"
    },
    {
        "line": 1307,
        "fullcodeline": "r = addstate_here(thislist, add_state, &t->subs,"
    },
    {
        "line": 1317,
        "fullcodeline": "nfa_match = NFA_TOO_EXPENSIVE;"
    },
    {
        "line": 1334,
        "fullcodeline": "&& rex.lnum == 0"
    },
    {
        "line": 1341,
        "fullcodeline": "|| (rex.lnum == nfa_endp->se_u.pos.lnum"
    },
    {
        "line": 1356,
        "fullcodeline": "if (prog->regstart != NUL && clen != 0)"
    },
    {
        "line": 1404,
        "fullcodeline": "if (addstate(nextlist, start, m, NULL, clen) == NULL)"
    },
    {
        "line": 1429,
        "fullcodeline": "&& rex.lnum < nfa_endp->se_u.pos.lnum))"
    },
    {
        "line": 236,
        "fullcodeline": "&& rex.input != rex.line && utf_iscomposing(curc))"
    },
    {
        "line": 253,
        "fullcodeline": "clen = 0;"
    },
    {
        "line": 289,
        "fullcodeline": "? (rex.lnum != nfa_endp->se_u.pos.lnum"
    },
    {
        "line": 292,
        "fullcodeline": ": rex.input != nfa_endp->se_u.ptr))"
    },
    {
        "line": 330,
        "fullcodeline": "if (t->pim.result != NFA_PIM_UNUSED"
    },
    {
        "line": 334,
        "fullcodeline": "|| t->state->c == NFA_START_INVISIBLE_BEFORE_NEG_FIRST)"
    },
    {
        "line": 336,
        "fullcodeline": "int in_use = m->norm.in_use;"
    },
    {
        "line": 340,
        "fullcodeline": "copy_sub_off(&m->norm, &t->subs.norm);"
    },
    {
        "line": 350,
        "fullcodeline": "result = recursive_regmatch(t->state, NULL, prog,"
    },
    {
        "line": 383,
        "fullcodeline": "m->norm.in_use = in_use;"
    },
    {
        "line": 433,
        "fullcodeline": "skip = t->state->out1->out;"
    },
    {
        "line": 476,
        "fullcodeline": "nfa_match = result;"
    },
    {
        "line": 488,
        "fullcodeline": "copy_sub_off(&t->subs.norm, &m->norm);"
    },
    {
        "line": 635,
        "fullcodeline": "len += mb_char2len(mc);"
    },
    {
        "line": 773,
        "fullcodeline": "state = state->out;"
    },
    {
        "line": 779,
        "fullcodeline": "add_state = t->state->out1->out;"
    },
    {
        "line": 780,
        "fullcodeline": "add_off = clen;"
    },
    {
        "line": 804,
        "fullcodeline": "add_off = 0;"
    },
    {
        "line": 992,
        "fullcodeline": "subidx = t->state->c - NFA_BACKREF1 + 1;"
    },
    {
        "line": 1041,
        "fullcodeline": "add_state = t->state;"
    },
    {
        "line": 1042,
        "fullcodeline": "add_off = 0;"
    },
    {
        "line": 1043,
        "fullcodeline": "add_count = t->count - clen;"
    },
    {
        "line": 1052,
        "fullcodeline": "(long_u)(rex.lnum + rex.reg_firstlnum)));"
    },
    {
        "line": 1064,
        "fullcodeline": "(long_u)(rex.input - rex.line) + 1);"
    },
    {
        "line": 1082,
        "fullcodeline": "if (op != 1 && col > t->state->val"
    },
    {
        "line": 1086,
        "fullcodeline": "if (op == 1 && col - 1 > t->state->val && col > 100)"
    },
    {
        "line": 1088,
        "fullcodeline": "int ts = wp->w_buffer->b_p_ts;"
    },
    {
        "line": 1094,
        "fullcodeline": "result = col > t->state->val * ts;"
    },
    {
        "line": 1102,
        "fullcodeline": "add_state = t->state->out;"
    },
    {
        "line": 1117,
        "fullcodeline": "rex.line = reg_getline(rex.lnum);"
    },
    {
        "line": 1118,
        "fullcodeline": "rex.input = rex.line + col;"
    },
    {
        "line": 1123,
        "fullcodeline": "if (pos != NULL && pos->lnum > 0)"
    },
    {
        "line": 1125,
        "fullcodeline": "colnr_T pos_col = pos->lnum == rex.lnum + rex.reg_firstlnum"
    },
    {
        "line": 1151,
        "fullcodeline": "&& (rex.lnum + rex.reg_firstlnum"
    },
    {
        "line": 1209,
        "fullcodeline": "result = MB_CASEFOLD(c) == MB_CASEFOLD(curc);"
    },
    {
        "line": 1213,
        "fullcodeline": "clen = utf_ptr2len(rex.input);"
    },
    {
        "line": 1228,
        "fullcodeline": "pim = &t->pim;"
    },
    {
        "line": 1234,
        "fullcodeline": "if (pim->result == NFA_PIM_TODO)"
    },
    {
        "line": 1311,
        "fullcodeline": "r = addstate(nextlist, add_state, &t->subs, pim, add_off);"
    },
    {
        "line": 1342,
        "fullcodeline": "&& (int)(rex.input - rex.line)"
    },
    {
        "line": 1358,
        "fullcodeline": "if (nextlist->n == 0)"
    },
    {
        "line": 1395,
        "fullcodeline": "if (addstate(nextlist, start->out, m, NULL, clen) == NULL)"
    },
    {
        "line": 1406,
        "fullcodeline": "nfa_match = NFA_TOO_EXPENSIVE;"
    },
    {
        "line": 290,
        "fullcodeline": "|| (int)(rex.input - rex.line)"
    },
    {
        "line": 333,
        "fullcodeline": "|| t->state->c == NFA_START_INVISIBLE_BEFORE_FIRST"
    },
    {
        "line": 352,
        "fullcodeline": "if (result == NFA_TOO_EXPENSIVE)"
    },
    {
        "line": 395,
        "fullcodeline": "pim.state = t->state;"
    },
    {
        "line": 396,
        "fullcodeline": "pim.result = NFA_PIM_TODO;"
    },
    {
        "line": 505,
        "fullcodeline": "if (bytelen == 0)"
    },
    {
        "line": 641,
        "fullcodeline": "if (sta->c != curc)"
    },
    {
        "line": 645,
        "fullcodeline": "while (sta->c != NFA_END_COMPOSING)"
    },
    {
        "line": 646,
        "fullcodeline": "sta = sta->out;"
    },
    {
        "line": 704,
        "fullcodeline": "else if (curc == '\\n' && rex.reg_line_lbr)"
    },
    {
        "line": 730,
        "fullcodeline": "if (state->c == NFA_END_COLL)"
    },
    {
        "line": 735,
        "fullcodeline": "if (state->c == NFA_RANGE_MIN)"
    },
    {
        "line": 993,
        "fullcodeline": "result = match_backref(&t->subs.norm, subidx, &bytelen);"
    },
    {
        "line": 1005,
        "fullcodeline": "if (bytelen == 0)"
    },
    {
        "line": 1092,
        "fullcodeline": "if (ts < 4)"
    },
    {
        "line": 1097,
        "fullcodeline": "result = nfa_re_num_cmp(t->state->val, op,"
    },
    {
        "line": 1244,
        "fullcodeline": "pim->result = result ? NFA_PIM_MATCH : NFA_PIM_NOMATCH;"
    },
    {
        "line": 1274,
        "fullcodeline": "if (result != (pim->state->c == NFA_START_INVISIBLE_NEG"
    },
    {
        "line": 1282,
        "fullcodeline": "copy_sub_off(&t->subs.norm, &pim->subs.norm);"
    },
    {
        "line": 1312,
        "fullcodeline": "if (add_count > 0)"
    },
    {
        "line": 1360,
        "fullcodeline": "colnr_T col = (colnr_T)(rex.input - rex.line) + clen;"
    },
    {
        "line": 1370,
        "fullcodeline": "rex.input = rex.line + col - clen;"
    },
    {
        "line": 1397,
        "fullcodeline": "nfa_match = NFA_TOO_EXPENSIVE;"
    },
    {
        "line": 332,
        "fullcodeline": "|| t->state->c == NFA_START_INVISIBLE_NEG_FIRST"
    },
    {
        "line": 354,
        "fullcodeline": "nfa_match = result;"
    },
    {
        "line": 360,
        "fullcodeline": "if (result != (t->state->c == NFA_START_INVISIBLE_NEG"
    },
    {
        "line": 368,
        "fullcodeline": "copy_sub_off(&t->subs.norm, &m->norm);"
    },
    {
        "line": 375,
        "fullcodeline": "copy_ze_off(&t->subs.norm, &m->norm);"
    },
    {
        "line": 381,
        "fullcodeline": "add_state = t->state->out1->out;"
    },
    {
        "line": 412,
        "fullcodeline": "if (addstate_here(thislist, t->state->out1->out,"
    },
    {
        "line": 438,
        "fullcodeline": "else if (state_in_list(nextlist,"
    },
    {
        "line": 497,
        "fullcodeline": "bytelen = m->norm.list.multi[0].end_col"
    },
    {
        "line": 511,
        "fullcodeline": "add_state = t->state->out1->out->out;"
    },
    {
        "line": 558,
        "fullcodeline": "this_class = mb_get_class_buf(rex.input, rex.reg_buf);"
    },
    {
        "line": 584,
        "fullcodeline": "this_class = mb_get_class_buf(rex.input, rex.reg_buf);"
    },
    {
        "line": 585,
        "fullcodeline": "prev_class = reg_prev_class();"
    },
    {
        "line": 707,
        "fullcodeline": "add_state = t->state->out;"
    },
    {
        "line": 708,
        "fullcodeline": "add_off = 1;"
    },
    {
        "line": 737,
        "fullcodeline": "c1 = state->val;"
    },
    {
        "line": 738,
        "fullcodeline": "state = state->out; // advance to NFA_RANGE_MAX"
    },
    {
        "line": 739,
        "fullcodeline": "c2 = state->val;"
    },
    {
        "line": 1010,
        "fullcodeline": "add_state = t->state->out->out;"
    },
    {
        "line": 1083,
        "fullcodeline": "* (has_mbyte ? MB_MAXBYTES : 1))"
    },
    {
        "line": 1093,
        "fullcodeline": "ts = 4;"
    },
    {
        "line": 1131,
        "fullcodeline": "result = (pos->lnum == rex.lnum + rex.reg_firstlnum"
    },
    {
        "line": 1143,
        "fullcodeline": "add_state = t->state->out;"
    },
    {
        "line": 1242,
        "fullcodeline": "result = recursive_regmatch(pim->state, pim,"
    },
    {
        "line": 1247,
        "fullcodeline": "if (result != (pim->state->c == NFA_START_INVISIBLE_NEG"
    },
    {
        "line": 1264,
        "fullcodeline": "result = (pim->result == NFA_PIM_MATCH);"
    },
    {
        "line": 1278,
        "fullcodeline": "|| pim->state->c"
    },
    {
        "line": 1364,
        "fullcodeline": "if (skip_to_start(prog->regstart, &col) == FAIL)"
    },
    {
        "line": 1376,
        "fullcodeline": "c = PTR2CHAR(rex.input + clen);"
    },
    {
        "line": 331,
        "fullcodeline": "|| t->state->c == NFA_START_INVISIBLE_FIRST"
    },
    {
        "line": 364,
        "fullcodeline": "|| t->state->c"
    },
    {
        "line": 415,
        "fullcodeline": "nfa_match = NFA_TOO_EXPENSIVE;"
    },
    {
        "line": 441,
        "fullcodeline": "skip = t->state->out1->out->out;"
    },
    {
        "line": 500,
        "fullcodeline": "bytelen = (int)(m->norm.list.line[0].end - rex.input);"
    },
    {
        "line": 559,
        "fullcodeline": "if (this_class <= 1)"
    },
    {
        "line": 650,
        "fullcodeline": "else if (len > 0 || mc == sta->c)"
    },
    {
        "line": 732,
        "fullcodeline": "result = !result_if_matched;"
    },
    {
        "line": 1126,
        "fullcodeline": "&& pos->col == MAXCOL"
    },
    {
        "line": 1127,
        "fullcodeline": "? (colnr_T)STRLEN(reg_getline("
    },
    {
        "line": 1132,
        "fullcodeline": "? (pos_col == (colnr_T)(rex.input - rex.line)"
    },
    {
        "line": 1133,
        "fullcodeline": "? t->state->c == NFA_MARK"
    },
    {
        "line": 1137,
        "fullcodeline": ": (pos->lnum < rex.lnum + rex.reg_firstlnum"
    },
    {
        "line": 1138,
        "fullcodeline": "? t->state->c == NFA_MARK_GT"
    },
    {
        "line": 1139,
        "fullcodeline": ": t->state->c == NFA_MARK_LT));"
    },
    {
        "line": 1255,
        "fullcodeline": "copy_sub_off(&pim->subs.norm, &m->norm);"
    },
    {
        "line": 1276,
        "fullcodeline": "|| pim->state->c"
    },
    {
        "line": 1392,
        "fullcodeline": "(colnr_T)(rex.input - rex.line) + clen;"
    },
    {
        "line": 362,
        "fullcodeline": "|| t->state->c"
    },
    {
        "line": 513,
        "fullcodeline": "else if (bytelen <= clen)"
    },
    {
        "line": 586,
        "fullcodeline": "if (this_class == prev_class"
    },
    {
        "line": 587,
        "fullcodeline": "|| prev_class == 0 || prev_class == 1)"
    },
    {
        "line": 652,
        "fullcodeline": "if (len == 0)"
    },
    {
        "line": 660,
        "fullcodeline": "while (len < clen)"
    },
    {
        "line": 673,
        "fullcodeline": "while (sta->c != NFA_END_COMPOSING)"
    },
    {
        "line": 744,
        "fullcodeline": "if (curc >= c1 && curc <= c2)"
    },
    {
        "line": 751,
        "fullcodeline": "int curc_low = MB_CASEFOLD(curc);"
    },
    {
        "line": 1012,
        "fullcodeline": "else if (bytelen <= clen)"
    },
    {
        "line": 1098,
        "fullcodeline": "(long_u)win_linetabsize(wp, rex.line, col) + 1);"
    },
    {
        "line": 1135,
        "fullcodeline": "? t->state->c == NFA_MARK_GT"
    },
    {
        "line": 1136,
        "fullcodeline": ": t->state->c == NFA_MARK_LT))"
    },
    {
        "line": 1251,
        "fullcodeline": "|| pim->state->c"
    },
    {
        "line": 1275,
        "fullcodeline": "|| pim->state->c == NFA_START_INVISIBLE_NEG_FIRST"
    },
    {
        "line": 1377,
        "fullcodeline": "if (c != prog->regstart && (!rex.reg_ic"
    },
    {
        "line": 361,
        "fullcodeline": "|| t->state->c == NFA_START_INVISIBLE_NEG_FIRST"
    },
    {
        "line": 403,
        "fullcodeline": "pim.end.pos.col = (int)(rex.input - rex.line);"
    },
    {
        "line": 446,
        "fullcodeline": "else if (state_in_list(thislist,"
    },
    {
        "line": 498,
        "fullcodeline": "- (int)(rex.input - rex.line);"
    },
    {
        "line": 517,
        "fullcodeline": "add_state = t->state->out1->out->out;"
    },
    {
        "line": 518,
        "fullcodeline": "add_off = clen;"
    },
    {
        "line": 564,
        "fullcodeline": "else if (!vim_iswordc_buf(curc, rex.reg_buf)"
    },
    {
        "line": 565,
        "fullcodeline": "|| (rex.input > rex.line"
    },
    {
        "line": 590,
        "fullcodeline": "else if (!vim_iswordc_buf(rex.input[-1], rex.reg_buf)"
    },
    {
        "line": 591,
        "fullcodeline": "|| (rex.input[0] != NUL"
    },
    {
        "line": 654,
        "fullcodeline": "len += mb_char2len(mc);"
    },
    {
        "line": 655,
        "fullcodeline": "sta = sta->out;"
    },
    {
        "line": 662,
        "fullcodeline": "mc = mb_ptr2char(rex.input + len);"
    },
    {
        "line": 664,
        "fullcodeline": "len += mb_char2len(mc);"
    },
    {
        "line": 683,
        "fullcodeline": "sta = sta->out;"
    },
    {
        "line": 754,
        "fullcodeline": "for ( ; c1 <= c2; ++c1)"
    },
    {
        "line": 765,
        "fullcodeline": "else if (state->c < 0 ? check_char_class(state->c, curc)"
    },
    {
        "line": 766,
        "fullcodeline": ": (curc == state->c"
    },
    {
        "line": 1016,
        "fullcodeline": "add_state = t->state->out->out;"
    },
    {
        "line": 1017,
        "fullcodeline": "add_off = clen;"
    },
    {
        "line": 1128,
        "fullcodeline": "pos->lnum - rex.reg_firstlnum))"
    },
    {
        "line": 1134,
        "fullcodeline": ": (pos_col < (colnr_T)(rex.input - rex.line)"
    },
    {
        "line": 1249,
        "fullcodeline": "|| pim->state->c"
    },
    {
        "line": 1313,
        "fullcodeline": "nextlist->t[nextlist->n - 1].count = add_count;"
    },
    {
        "line": 1378,
        "fullcodeline": "|| MB_CASEFOLD(c) != MB_CASEFOLD(prog->regstart)))"
    },
    {
        "line": 449,
        "fullcodeline": "skip = t->state->out1->out->out;"
    },
    {
        "line": 524,
        "fullcodeline": "add_state = t->state->out1->out;"
    },
    {
        "line": 525,
        "fullcodeline": "add_off = bytelen;"
    },
    {
        "line": 526,
        "fullcodeline": "add_count = bytelen - clen;"
    },
    {
        "line": 566,
        "fullcodeline": "&& vim_iswordc_buf(rex.input[-1], rex.reg_buf)))"
    },
    {
        "line": 592,
        "fullcodeline": "&& vim_iswordc_buf(curc, rex.reg_buf)))"
    },
    {
        "line": 665,
        "fullcodeline": "if (ccount == MAX_MCO)"
    },
    {
        "line": 675,
        "fullcodeline": "for (j = 0; j < ccount; ++j)"
    },
    {
        "line": 678,
        "fullcodeline": "if (j == ccount)"
    },
    {
        "line": 767,
        "fullcodeline": "|| (rex.reg_ic && MB_CASEFOLD(curc)"
    },
    {
        "line": 1023,
        "fullcodeline": "add_state = t->state->out;"
    },
    {
        "line": 1024,
        "fullcodeline": "add_off = bytelen;"
    },
    {
        "line": 1025,
        "fullcodeline": "add_count = bytelen - clen;"
    },
    {
        "line": 1248,
        "fullcodeline": "|| pim->state->c == NFA_START_INVISIBLE_NEG_FIRST"
    },
    {
        "line": 663,
        "fullcodeline": "cchars[ccount++] = mc;"
    },
    {
        "line": 676,
        "fullcodeline": "if (cchars[j] == sta->c)"
    },
    {
        "line": 755,
        "fullcodeline": "if (MB_CASEFOLD(c1) == curc_low)"
    },
    {
        "line": 768,
        "fullcodeline": "== MB_CASEFOLD(state->c))))"
    }
]