[
    {
        "line": 6,
        "fullcodeline": "int rc = SQLITE_OK;   /* Success code from a subroutine */"
    },
    {
        "line": 10,
        "fullcodeline": "Select *pDelete = 0;  /* Chain of simple selects to delete */"
    },
    {
        "line": 16,
        "fullcodeline": "assert( p && p->pPrior );  /* Calling function guarantees this much */"
    },
    {
        "line": 17,
        "fullcodeline": "assert( (p->selFlags & SF_Recursive)==0 || p->op==TK_ALL || p->op==TK_UNION );"
    },
    {
        "line": 18,
        "fullcodeline": "assert( p->selFlags & SF_Compound );"
    },
    {
        "line": 19,
        "fullcodeline": "db = pParse->db;"
    },
    {
        "line": 20,
        "fullcodeline": "pPrior = p->pPrior;"
    },
    {
        "line": 21,
        "fullcodeline": "dest = *pDest;"
    },
    {
        "line": 29,
        "fullcodeline": "v = sqlite3GetVdbe(pParse);"
    },
    {
        "line": 30,
        "fullcodeline": "assert( v!=0 );  /* The VDBE already created by calling function */"
    },
    {
        "line": 51,
        "fullcodeline": "assert( p->pEList && pPrior->pEList );"
    },
    {
        "line": 52,
        "fullcodeline": "assert( p->pEList->nExpr==pPrior->pEList->nExpr );"
    },
    {
        "line": 22,
        "fullcodeline": "if( pPrior->pOrderBy || pPrior->pLimit ){"
    },
    {
        "line": 34,
        "fullcodeline": "if( dest.eDest==SRT_EphemTab ){"
    },
    {
        "line": 42,
        "fullcodeline": "if( p->selFlags & SF_MultiValue ){"
    },
    {
        "line": 55,
        "fullcodeline": "if( p->selFlags & SF_Recursive ){"
    },
    {
        "line": 298,
        "fullcodeline": "if( p->selFlags & SF_UsesEphemeral ){"
    },
    {
        "line": 25,
        "fullcodeline": "rc = 1;"
    },
    {
        "line": 35,
        "fullcodeline": "assert( p->pEList );"
    },
    {
        "line": 36,
        "fullcodeline": "sqlite3VdbeAddOp2(v, OP_OpenEphemeral, dest.iSDParm, p->pEList->nExpr);"
    },
    {
        "line": 37,
        "fullcodeline": "dest.eDest = SRT_Table;"
    },
    {
        "line": 43,
        "fullcodeline": "rc = multiSelectValues(pParse, p, &dest);"
    },
    {
        "line": 45,
        "fullcodeline": "rc = SQLITE_OK;"
    },
    {
        "line": 56,
        "fullcodeline": "generateWithRecursiveQuery(pParse, p, &dest);"
    },
    {
        "line": 306,
        "fullcodeline": "nCol = p->pEList->nExpr;"
    },
    {
        "line": 307,
        "fullcodeline": "pKeyInfo = sqlite3KeyInfoAlloc(db, nCol, 1);"
    },
    {
        "line": 24,
        "fullcodeline": "pPrior->pOrderBy!=0 ? \"ORDER BY\" : \"LIMIT\", selectOpName(p->op));"
    },
    {
        "line": 44,
        "fullcodeline": "if( rc>=0 ) goto multi_select_end;"
    },
    {
        "line": 305,
        "fullcodeline": "assert( p->pNext==0 );"
    },
    {
        "line": 308,
        "fullcodeline": "if( !pKeyInfo ){"
    },
    {
        "line": 312,
        "fullcodeline": "for(i=0, apColl=pKeyInfo->aColl; i<nCol; i++, apColl++){"
    },
    {
        "line": 309,
        "fullcodeline": "rc = SQLITE_NOMEM_BKPT;"
    },
    {
        "line": 313,
        "fullcodeline": "*apColl = multiSelectCollSeq(pParse, p, i);"
    },
    {
        "line": 319,
        "fullcodeline": "for(pLoop=p; pLoop; pLoop=pLoop->pPrior){"
    },
    {
        "line": 314,
        "fullcodeline": "if( 0==*apColl ){"
    },
    {
        "line": 320,
        "fullcodeline": "for(i=0; i<2; i++){"
    },
    {
        "line": 63,
        "fullcodeline": "return multiSelectOrderBy(pParse, p, pDest);"
    },
    {
        "line": 315,
        "fullcodeline": "*apColl = db->pDfltColl;"
    },
    {
        "line": 321,
        "fullcodeline": "int addr = pLoop->addrOpenEphm[i];"
    },
    {
        "line": 328,
        "fullcodeline": "sqlite3VdbeChangeP2(v, addr, nCol);"
    },
    {
        "line": 329,
        "fullcodeline": "sqlite3VdbeChangeP4(v, addr, (char*)sqlite3KeyInfoRef(pKeyInfo),"
    },
    {
        "line": 331,
        "fullcodeline": "pLoop->addrOpenEphm[i] = -1;"
    },
    {
        "line": 67,
        "fullcodeline": "if( pPrior->pPrior==0 ){"
    },
    {
        "line": 283,
        "fullcodeline": "if( p->pNext==0 ){"
    },
    {
        "line": 322,
        "fullcodeline": "if( addr<0 ){"
    },
    {
        "line": 284,
        "fullcodeline": "ExplainQueryPlanPop(pParse);"
    },
    {
        "line": 68,
        "fullcodeline": "ExplainQueryPlan((pParse, 1, \"COMPOUND QUERY\"));"
    },
    {
        "line": 69,
        "fullcodeline": "ExplainQueryPlan((pParse, 1, \"LEFT-MOST SUBQUERY\"));"
    },
    {
        "line": 77,
        "fullcodeline": "int addr = 0;"
    },
    {
        "line": 80,
        "fullcodeline": "pPrior->iLimit = p->iLimit;"
    },
    {
        "line": 81,
        "fullcodeline": "pPrior->iOffset = p->iOffset;"
    },
    {
        "line": 82,
        "fullcodeline": "pPrior->pLimit = p->pLimit;"
    },
    {
        "line": 83,
        "fullcodeline": "rc = sqlite3Select(pParse, pPrior, &dest);"
    },
    {
        "line": 84,
        "fullcodeline": "p->pLimit = 0;"
    },
    {
        "line": 88,
        "fullcodeline": "p->pPrior = 0;"
    },
    {
        "line": 89,
        "fullcodeline": "p->iLimit = pPrior->iLimit;"
    },
    {
        "line": 90,
        "fullcodeline": "p->iOffset = pPrior->iOffset;"
    },
    {
        "line": 100,
        "fullcodeline": "rc = sqlite3Select(pParse, p, &dest);"
    },
    {
        "line": 102,
        "fullcodeline": "pDelete = p->pPrior;"
    },
    {
        "line": 103,
        "fullcodeline": "p->pPrior = pPrior;"
    },
    {
        "line": 104,
        "fullcodeline": "p->nSelectRow = sqlite3LogEstAdd(p->nSelectRow, pPrior->nSelectRow);"
    },
    {
        "line": 127,
        "fullcodeline": "priorOp = SRT_Union;"
    },
    {
        "line": 150,
        "fullcodeline": "sqlite3SelectDestInit(&uniondest, priorOp, unionTab);"
    },
    {
        "line": 151,
        "fullcodeline": "rc = sqlite3Select(pParse, pPrior, &uniondest);"
    },
    {
        "line": 164,
        "fullcodeline": "p->pPrior = 0;"
    },
    {
        "line": 165,
        "fullcodeline": "pLimit = p->pLimit;"
    },
    {
        "line": 166,
        "fullcodeline": "p->pLimit = 0;"
    },
    {
        "line": 167,
        "fullcodeline": "uniondest.eDest = op;"
    },
    {
        "line": 170,
        "fullcodeline": "rc = sqlite3Select(pParse, p, &uniondest);"
    },
    {
        "line": 174,
        "fullcodeline": "sqlite3ExprListDelete(db, p->pOrderBy);"
    },
    {
        "line": 175,
        "fullcodeline": "pDelete = p->pPrior;"
    },
    {
        "line": 176,
        "fullcodeline": "p->pPrior = pPrior;"
    },
    {
        "line": 177,
        "fullcodeline": "p->pOrderBy = 0;"
    },
    {
        "line": 181,
        "fullcodeline": "sqlite3ExprDelete(db, p->pLimit);"
    },
    {
        "line": 182,
        "fullcodeline": "p->pLimit = pLimit;"
    },
    {
        "line": 183,
        "fullcodeline": "p->iLimit = 0;"
    },
    {
        "line": 184,
        "fullcodeline": "p->iOffset = 0;"
    },
    {
        "line": 207,
        "fullcodeline": "default: assert( p->op==TK_INTERSECT ); {"
    },
    {
        "line": 219,
        "fullcodeline": "tab1 = pParse->nTab++;"
    },
    {
        "line": 220,
        "fullcodeline": "tab2 = pParse->nTab++;"
    },
    {
        "line": 223,
        "fullcodeline": "addr = sqlite3VdbeAddOp2(v, OP_OpenEphemeral, tab1, 0);"
    },
    {
        "line": 227,
        "fullcodeline": "assert( p->pEList );"
    },
    {
        "line": 231,
        "fullcodeline": "sqlite3SelectDestInit(&intersectdest, SRT_Union, tab1);"
    },
    {
        "line": 232,
        "fullcodeline": "rc = sqlite3Select(pParse, pPrior, &intersectdest);"
    },
    {
        "line": 239,
        "fullcodeline": "addr = sqlite3VdbeAddOp2(v, OP_OpenEphemeral, tab2, 0);"
    },
    {
        "line": 242,
        "fullcodeline": "p->pPrior = 0;"
    },
    {
        "line": 243,
        "fullcodeline": "pLimit = p->pLimit;"
    },
    {
        "line": 244,
        "fullcodeline": "p->pLimit = 0;"
    },
    {
        "line": 245,
        "fullcodeline": "intersectdest.iSDParm = tab2;"
    },
    {
        "line": 248,
        "fullcodeline": "rc = sqlite3Select(pParse, p, &intersectdest);"
    },
    {
        "line": 250,
        "fullcodeline": "pDelete = p->pPrior;"
    },
    {
        "line": 251,
        "fullcodeline": "p->pPrior = pPrior;"
    },
    {
        "line": 255,
        "fullcodeline": "sqlite3ExprDelete(db, p->pLimit);"
    },
    {
        "line": 256,
        "fullcodeline": "p->pLimit = pLimit;"
    },
    {
        "line": 261,
        "fullcodeline": "assert( p->pEList );"
    },
    {
        "line": 262,
        "fullcodeline": "iBreak = sqlite3VdbeMakeLabel(pParse);"
    },
    {
        "line": 263,
        "fullcodeline": "iCont = sqlite3VdbeMakeLabel(pParse);"
    },
    {
        "line": 264,
        "fullcodeline": "computeLimitRegisters(pParse, p, iBreak);"
    },
    {
        "line": 265,
        "fullcodeline": "sqlite3VdbeAddOp2(v, OP_Rewind, tab1, iBreak); VdbeCoverage(v);"
    },
    {
        "line": 266,
        "fullcodeline": "r1 = sqlite3GetTempReg(pParse);"
    },
    {
        "line": 267,
        "fullcodeline": "iStart = sqlite3VdbeAddOp2(v, OP_RowData, tab1, r1);"
    },
    {
        "line": 268,
        "fullcodeline": "sqlite3VdbeAddOp4Int(v, OP_NotFound, tab2, iCont, r1, 0);"
    },
    {
        "line": 269,
        "fullcodeline": "VdbeCoverage(v);"
    },
    {
        "line": 270,
        "fullcodeline": "sqlite3ReleaseTempReg(pParse, r1);"
    },
    {
        "line": 271,
        "fullcodeline": "selectInnerLoop(pParse, p, tab1,"
    },
    {
        "line": 273,
        "fullcodeline": "sqlite3VdbeResolveLabel(v, iCont);"
    },
    {
        "line": 274,
        "fullcodeline": "sqlite3VdbeAddOp2(v, OP_Next, tab1, iStart); VdbeCoverage(v);"
    },
    {
        "line": 275,
        "fullcodeline": "sqlite3VdbeResolveLabel(v, iBreak);"
    },
    {
        "line": 276,
        "fullcodeline": "sqlite3VdbeAddOp2(v, OP_Close, tab2, 0);"
    },
    {
        "line": 277,
        "fullcodeline": "sqlite3VdbeAddOp2(v, OP_Close, tab1, 0);"
    },
    {
        "line": 325,
        "fullcodeline": "assert( pLoop->addrOpenEphm[1]<0 );"
    },
    {
        "line": 79,
        "fullcodeline": "assert( !pPrior->pLimit );"
    },
    {
        "line": 99,
        "fullcodeline": "ExplainQueryPlan((pParse, 1, \"UNION ALL\"));"
    },
    {
        "line": 101,
        "fullcodeline": "testcase( rc!=SQLITE_OK );"
    },
    {
        "line": 125,
        "fullcodeline": "testcase( p->op==TK_EXCEPT );"
    },
    {
        "line": 126,
        "fullcodeline": "testcase( p->op==TK_UNION );"
    },
    {
        "line": 128,
        "fullcodeline": "if( dest.eDest==priorOp ){"
    },
    {
        "line": 149,
        "fullcodeline": "assert( !pPrior->pOrderBy );"
    },
    {
        "line": 158,
        "fullcodeline": "if( p->op==TK_EXCEPT ){"
    },
    {
        "line": 168,
        "fullcodeline": "ExplainQueryPlan((pParse, 1, \"%s USING TEMP B-TREE\","
    },
    {
        "line": 171,
        "fullcodeline": "testcase( rc!=SQLITE_OK );"
    },
    {
        "line": 178,
        "fullcodeline": "if( p->op==TK_UNION ){"
    },
    {
        "line": 189,
        "fullcodeline": "assert( unionTab==dest.iSDParm || dest.eDest!=priorOp );"
    },
    {
        "line": 190,
        "fullcodeline": "if( dest.eDest!=priorOp ){"
    },
    {
        "line": 221,
        "fullcodeline": "assert( p->pOrderBy==0 );"
    },
    {
        "line": 224,
        "fullcodeline": "assert( p->addrOpenEphm[0] == -1 );"
    },
    {
        "line": 240,
        "fullcodeline": "assert( p->addrOpenEphm[1] == -1 );"
    },
    {
        "line": 246,
        "fullcodeline": "ExplainQueryPlan((pParse, 1, \"%s USING TEMP B-TREE\","
    },
    {
        "line": 249,
        "fullcodeline": "testcase( rc!=SQLITE_OK );"
    },
    {
        "line": 252,
        "fullcodeline": "if( p->nSelectRow>pPrior->nSelectRow ){"
    },
    {
        "line": 92,
        "fullcodeline": "addr = sqlite3VdbeAddOp1(v, OP_IfNot, p->iLimit); VdbeCoverage(v);"
    },
    {
        "line": 105,
        "fullcodeline": "if( pPrior->pLimit"
    },
    {
        "line": 107,
        "fullcodeline": "&& nLimit>0 && p->nSelectRow > sqlite3LogEst((u64)nLimit)"
    },
    {
        "line": 109,
        "fullcodeline": "p->nSelectRow = sqlite3LogEst((u64)nLimit);"
    },
    {
        "line": 112,
        "fullcodeline": "sqlite3VdbeJumpHere(v, addr);"
    },
    {
        "line": 133,
        "fullcodeline": "unionTab = dest.iSDParm;"
    },
    {
        "line": 159,
        "fullcodeline": "op = SRT_Except;"
    },
    {
        "line": 179,
        "fullcodeline": "p->nSelectRow = sqlite3LogEstAdd(p->nSelectRow, pPrior->nSelectRow);"
    },
    {
        "line": 192,
        "fullcodeline": "assert( p->pEList );"
    },
    {
        "line": 193,
        "fullcodeline": "iBreak = sqlite3VdbeMakeLabel(pParse);"
    },
    {
        "line": 194,
        "fullcodeline": "iCont = sqlite3VdbeMakeLabel(pParse);"
    },
    {
        "line": 195,
        "fullcodeline": "computeLimitRegisters(pParse, p, iBreak);"
    },
    {
        "line": 196,
        "fullcodeline": "sqlite3VdbeAddOp2(v, OP_Rewind, unionTab, iBreak); VdbeCoverage(v);"
    },
    {
        "line": 197,
        "fullcodeline": "iStart = sqlite3VdbeCurrentAddr(v);"
    },
    {
        "line": 198,
        "fullcodeline": "selectInnerLoop(pParse, p, unionTab,"
    },
    {
        "line": 200,
        "fullcodeline": "sqlite3VdbeResolveLabel(v, iCont);"
    },
    {
        "line": 201,
        "fullcodeline": "sqlite3VdbeAddOp2(v, OP_Next, unionTab, iStart); VdbeCoverage(v);"
    },
    {
        "line": 202,
        "fullcodeline": "sqlite3VdbeResolveLabel(v, iBreak);"
    },
    {
        "line": 203,
        "fullcodeline": "sqlite3VdbeAddOp2(v, OP_Close, unionTab, 0);"
    },
    {
        "line": 226,
        "fullcodeline": "findRightmost(p)->selFlags |= SF_UsesEphemeral;"
    },
    {
        "line": 253,
        "fullcodeline": "p->nSelectRow = pPrior->nSelectRow;"
    },
    {
        "line": 93,
        "fullcodeline": "VdbeComment((v, \"Jump ahead if LIMIT reached\"));"
    },
    {
        "line": 132,
        "fullcodeline": "assert( p->pLimit==0 );      /* Not allowed on leftward elements */"
    },
    {
        "line": 138,
        "fullcodeline": "unionTab = pParse->nTab++;"
    },
    {
        "line": 140,
        "fullcodeline": "addr = sqlite3VdbeAddOp2(v, OP_OpenEphemeral, unionTab, 0);"
    },
    {
        "line": 144,
        "fullcodeline": "assert( p->pEList );"
    },
    {
        "line": 162,
        "fullcodeline": "op = SRT_Union;"
    },
    {
        "line": 169,
        "fullcodeline": "selectOpName(p->op)));"
    },
    {
        "line": 247,
        "fullcodeline": "selectOpName(p->op)));"
    },
    {
        "line": 95,
        "fullcodeline": "sqlite3VdbeAddOp3(v, OP_OffsetLimit,"
    },
    {
        "line": 106,
        "fullcodeline": "&& sqlite3ExprIsInteger(pPrior->pLimit->pLeft, &nLimit)"
    },
    {
        "line": 139,
        "fullcodeline": "assert( p->pOrderBy==0 );"
    },
    {
        "line": 141,
        "fullcodeline": "assert( p->addrOpenEphm[0] == -1 );"
    },
    {
        "line": 161,
        "fullcodeline": "assert( p->op==TK_UNION );"
    },
    {
        "line": 143,
        "fullcodeline": "findRightmost(p)->selFlags |= SF_UsesEphemeral;"
    }
]