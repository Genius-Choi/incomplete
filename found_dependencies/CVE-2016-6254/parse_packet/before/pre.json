[
    {
        "line": 7,
        "fullcodeline": "value_list_t vl = VALUE_LIST_INIT;"
    },
    {
        "line": 17,
        "fullcodeline": "memset (&vl, '\\0', sizeof (vl));"
    },
    {
        "line": 18,
        "fullcodeline": "memset (&n, '\\0', sizeof (n));"
    },
    {
        "line": 19,
        "fullcodeline": "status = 0;"
    },
    {
        "line": 21,
        "fullcodeline": "while ((status == 0) && (0 < buffer_size)"
    },
    {
        "line": 237,
        "fullcodeline": "if (status == 0 && buffer_size > 0)"
    },
    {
        "line": 22,
        "fullcodeline": "&& ((unsigned int) buffer_size > sizeof (part_header_t)))"
    },
    {
        "line": 27,
        "fullcodeline": "memcpy ((void *) &pkg_type,"
    },
    {
        "line": 30,
        "fullcodeline": "memcpy ((void *) &pkg_length,"
    },
    {
        "line": 34,
        "fullcodeline": "pkg_length = ntohs (pkg_length);"
    },
    {
        "line": 35,
        "fullcodeline": "pkg_type = ntohs (pkg_type);"
    },
    {
        "line": 238,
        "fullcodeline": "WARNING (\"network plugin: parse_packet: Received truncated \""
    },
    {
        "line": 31,
        "fullcodeline": "(void *) (buffer + sizeof (pkg_type)),"
    },
    {
        "line": 37,
        "fullcodeline": "if (pkg_length > buffer_size)"
    },
    {
        "line": 40,
        "fullcodeline": "if (pkg_length < (2 * sizeof (uint16_t)))"
    },
    {
        "line": 43,
        "fullcodeline": "if (pkg_type == TYPE_ENCR_AES256)"
    },
    {
        "line": 45,
        "fullcodeline": "status = parse_part_encr_aes256 (se,"
    },
    {
        "line": 47,
        "fullcodeline": "if (status != 0)"
    },
    {
        "line": 49,
        "fullcodeline": "ERROR (\"network plugin: Decrypting AES256 \""
    },
    {
        "line": 69,
        "fullcodeline": "else if (pkg_type == TYPE_SIGN_SHA256)"
    },
    {
        "line": 71,
        "fullcodeline": "status = parse_part_sign_sha256 (se,"
    },
    {
        "line": 73,
        "fullcodeline": "if (status != 0)"
    },
    {
        "line": 75,
        "fullcodeline": "ERROR (\"network plugin: Verifying HMAC-SHA-256 \""
    },
    {
        "line": 96,
        "fullcodeline": "else if (pkg_type == TYPE_VALUES)"
    },
    {
        "line": 98,
        "fullcodeline": "status = parse_part_values (&buffer, &buffer_size,"
    },
    {
        "line": 103,
        "fullcodeline": "network_dispatch_values (&vl, username);"
    },
    {
        "line": 105,
        "fullcodeline": "sfree (vl.values);"
    },
    {
        "line": 100,
        "fullcodeline": "if (status != 0)"
    },
    {
        "line": 107,
        "fullcodeline": "else if (pkg_type == TYPE_TIME)"
    },
    {
        "line": 109,
        "fullcodeline": "uint64_t tmp = 0;"
    },
    {
        "line": 110,
        "fullcodeline": "status = parse_part_number (&buffer, &buffer_size,"
    },
    {
        "line": 112,
        "fullcodeline": "if (status == 0)"
    },
    {
        "line": 114,
        "fullcodeline": "vl.time = TIME_T_TO_CDTIME_T (tmp);"
    },
    {
        "line": 115,
        "fullcodeline": "n.time  = TIME_T_TO_CDTIME_T (tmp);"
    },
    {
        "line": 118,
        "fullcodeline": "else if (pkg_type == TYPE_TIME_HR)"
    },
    {
        "line": 120,
        "fullcodeline": "uint64_t tmp = 0;"
    },
    {
        "line": 121,
        "fullcodeline": "status = parse_part_number (&buffer, &buffer_size,"
    },
    {
        "line": 123,
        "fullcodeline": "if (status == 0)"
    },
    {
        "line": 125,
        "fullcodeline": "vl.time = (cdtime_t) tmp;"
    },
    {
        "line": 126,
        "fullcodeline": "n.time  = (cdtime_t) tmp;"
    },
    {
        "line": 129,
        "fullcodeline": "else if (pkg_type == TYPE_INTERVAL)"
    },
    {
        "line": 131,
        "fullcodeline": "uint64_t tmp = 0;"
    },
    {
        "line": 132,
        "fullcodeline": "status = parse_part_number (&buffer, &buffer_size,"
    },
    {
        "line": 134,
        "fullcodeline": "if (status == 0)"
    },
    {
        "line": 135,
        "fullcodeline": "vl.interval = TIME_T_TO_CDTIME_T (tmp);"
    },
    {
        "line": 137,
        "fullcodeline": "else if (pkg_type == TYPE_INTERVAL_HR)"
    },
    {
        "line": 139,
        "fullcodeline": "uint64_t tmp = 0;"
    },
    {
        "line": 140,
        "fullcodeline": "status = parse_part_number (&buffer, &buffer_size,"
    },
    {
        "line": 142,
        "fullcodeline": "if (status == 0)"
    },
    {
        "line": 143,
        "fullcodeline": "vl.interval = (cdtime_t) tmp;"
    },
    {
        "line": 145,
        "fullcodeline": "else if (pkg_type == TYPE_HOST)"
    },
    {
        "line": 147,
        "fullcodeline": "status = parse_part_string (&buffer, &buffer_size,"
    },
    {
        "line": 149,
        "fullcodeline": "if (status == 0)"
    },
    {
        "line": 150,
        "fullcodeline": "sstrncpy (n.host, vl.host, sizeof (n.host));"
    },
    {
        "line": 152,
        "fullcodeline": "else if (pkg_type == TYPE_PLUGIN)"
    },
    {
        "line": 154,
        "fullcodeline": "status = parse_part_string (&buffer, &buffer_size,"
    },
    {
        "line": 156,
        "fullcodeline": "if (status == 0)"
    },
    {
        "line": 157,
        "fullcodeline": "sstrncpy (n.plugin, vl.plugin,"
    },
    {
        "line": 160,
        "fullcodeline": "else if (pkg_type == TYPE_PLUGIN_INSTANCE)"
    },
    {
        "line": 162,
        "fullcodeline": "status = parse_part_string (&buffer, &buffer_size,"
    },
    {
        "line": 165,
        "fullcodeline": "if (status == 0)"
    },
    {
        "line": 166,
        "fullcodeline": "sstrncpy (n.plugin_instance,"
    },
    {
        "line": 170,
        "fullcodeline": "else if (pkg_type == TYPE_TYPE)"
    },
    {
        "line": 172,
        "fullcodeline": "status = parse_part_string (&buffer, &buffer_size,"
    },
    {
        "line": 174,
        "fullcodeline": "if (status == 0)"
    },
    {
        "line": 175,
        "fullcodeline": "sstrncpy (n.type, vl.type, sizeof (n.type));"
    },
    {
        "line": 177,
        "fullcodeline": "else if (pkg_type == TYPE_TYPE_INSTANCE)"
    },
    {
        "line": 179,
        "fullcodeline": "status = parse_part_string (&buffer, &buffer_size,"
    },
    {
        "line": 182,
        "fullcodeline": "if (status == 0)"
    },
    {
        "line": 183,
        "fullcodeline": "sstrncpy (n.type_instance, vl.type_instance,"
    },
    {
        "line": 186,
        "fullcodeline": "else if (pkg_type == TYPE_MESSAGE)"
    },
    {
        "line": 188,
        "fullcodeline": "status = parse_part_string (&buffer, &buffer_size,"
    },
    {
        "line": 191,
        "fullcodeline": "if (status != 0)"
    },
    {
        "line": 221,
        "fullcodeline": "else if (pkg_type == TYPE_SEVERITY)"
    },
    {
        "line": 223,
        "fullcodeline": "uint64_t tmp = 0;"
    },
    {
        "line": 224,
        "fullcodeline": "status = parse_part_number (&buffer, &buffer_size,"
    },
    {
        "line": 195,
        "fullcodeline": "else if ((n.severity != NOTIF_FAILURE)"
    },
    {
        "line": 226,
        "fullcodeline": "if (status == 0)"
    },
    {
        "line": 231,
        "fullcodeline": "DEBUG (\"network plugin: parse_packet: Unknown part\""
    },
    {
        "line": 233,
        "fullcodeline": "buffer = ((char *) buffer) + pkg_length;"
    },
    {
        "line": 197,
        "fullcodeline": "&& (n.severity != NOTIF_OKAY))"
    },
    {
        "line": 199,
        "fullcodeline": "INFO (\"network plugin: \""
    },
    {
        "line": 227,
        "fullcodeline": "n.severity = (int) tmp;"
    },
    {
        "line": 196,
        "fullcodeline": "&& (n.severity != NOTIF_WARNING)"
    },
    {
        "line": 204,
        "fullcodeline": "else if (n.time <= 0)"
    },
    {
        "line": 206,
        "fullcodeline": "INFO (\"network plugin: \""
    },
    {
        "line": 210,
        "fullcodeline": "else if (strlen (n.message) <= 0)"
    },
    {
        "line": 212,
        "fullcodeline": "INFO (\"network plugin: \""
    },
    {
        "line": 218,
        "fullcodeline": "network_dispatch_notification (&n);"
    }
]