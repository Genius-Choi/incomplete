[
    {
        "line": 3,
        "fullcodeline": "double mul2 = mul * mul, mul3 = mul2 * mul;"
    },
    {
        "line": 4,
        "fullcodeline": "double kernel[] = {"
    },
    {
        "line": 11,
        "fullcodeline": "double mat_freq[14];"
    },
    {
        "line": 12,
        "fullcodeline": "memcpy(mat_freq, kernel, sizeof(kernel));"
    },
    {
        "line": 13,
        "fullcodeline": "memset(mat_freq + 4, 0, sizeof(mat_freq) - sizeof(kernel));"
    },
    {
        "line": 14,
        "fullcodeline": "int n = 6;"
    },
    {
        "line": 15,
        "fullcodeline": "coeff_filter(mat_freq, n, kernel);"
    },
    {
        "line": 19,
        "fullcodeline": "double vec_freq[13];"
    },
    {
        "line": 20,
        "fullcodeline": "n = index[3] + prefilter + 3;"
    },
    {
        "line": 21,
        "fullcodeline": "calc_gauss(vec_freq, n, r2);"
    },
    {
        "line": 22,
        "fullcodeline": "memset(vec_freq + n + 1, 0, sizeof(vec_freq) - (n + 1) * sizeof(vec_freq[0]));"
    },
    {
        "line": 23,
        "fullcodeline": "n -= 3;"
    },
    {
        "line": 24,
        "fullcodeline": "coeff_filter(vec_freq, n, kernel);"
    },
    {
        "line": 28,
        "fullcodeline": "double mat[4][4];"
    },
    {
        "line": 29,
        "fullcodeline": "calc_matrix(mat, mat_freq, index);"
    },
    {
        "line": 31,
        "fullcodeline": "double vec[4];"
    },
    {
        "line": 16,
        "fullcodeline": "for (int k = 0; k < 2 * prefilter; ++k)"
    },
    {
        "line": 17,
        "fullcodeline": "coeff_blur121(mat_freq, ++n);"
    },
    {
        "line": 25,
        "fullcodeline": "for (int k = 0; k < prefilter; ++k)"
    },
    {
        "line": 26,
        "fullcodeline": "coeff_blur121(vec_freq, --n);"
    },
    {
        "line": 32,
        "fullcodeline": "for (int i = 0; i < 4; ++i)"
    },
    {
        "line": 33,
        "fullcodeline": "vec[i] = mat_freq[0] - mat_freq[index[i]] - vec_freq[0] + vec_freq[index[i]];"
    },
    {
        "line": 35,
        "fullcodeline": "for (int i = 0; i < 4; ++i) {"
    },
    {
        "line": 5,
        "fullcodeline": "(5204 + 2520 * mul + 1092 * mul2 + 3280 * mul3) / 12096,"
    },
    {
        "line": 6,
        "fullcodeline": "(2943 -  210 * mul -  273 * mul2 - 2460 * mul3) / 12096,"
    },
    {
        "line": 7,
        "fullcodeline": "( 486 -  924 * mul -  546 * mul2 +  984 * mul3) / 12096,"
    },
    {
        "line": 8,
        "fullcodeline": "(  17 -  126 * mul +  273 * mul2 -  164 * mul3) / 12096,"
    },
    {
        "line": 36,
        "fullcodeline": "double res = 0;"
    },
    {
        "line": 39,
        "fullcodeline": "mu[i] = FFMAX(0, res);"
    },
    {
        "line": 37,
        "fullcodeline": "for (int j = 0; j < 4; ++j)"
    },
    {
        "line": 38,
        "fullcodeline": "res += mat[i][j] * vec[j];"
    }
]