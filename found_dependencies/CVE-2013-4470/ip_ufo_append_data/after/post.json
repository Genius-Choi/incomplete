[
    {
        "line": 43,
        "fullcodeline": "skb->ip_summed = CHECKSUM_PARTIAL;"
    },
    {
        "line": 45,
        "fullcodeline": "skb_shinfo(skb)->gso_size = maxfraglen - fragheaderlen;"
    },
    {
        "line": 46,
        "fullcodeline": "skb_shinfo(skb)->gso_type = SKB_GSO_UDP;"
    },
    {
        "line": 15,
        "fullcodeline": "if ((skb = skb_peek_tail(queue)) == NULL) {"
    },
    {
        "line": 49,
        "fullcodeline": "return skb_append_datato_frags(sk, skb, getfrag, from,"
    },
    {
        "line": 16,
        "fullcodeline": "skb = sock_alloc_send_skb(sk,"
    },
    {
        "line": 24,
        "fullcodeline": "skb_reserve(skb, hh_len);"
    },
    {
        "line": 27,
        "fullcodeline": "skb_put(skb, fragheaderlen + transhdrlen);"
    },
    {
        "line": 30,
        "fullcodeline": "skb_reset_network_header(skb);"
    },
    {
        "line": 33,
        "fullcodeline": "skb->transport_header = skb->network_header + fragheaderlen;"
    },
    {
        "line": 35,
        "fullcodeline": "skb->csum = 0;"
    },
    {
        "line": 38,
        "fullcodeline": "__skb_queue_tail(queue, skb);"
    },
    {
        "line": 50,
        "fullcodeline": "(length - transhdrlen));"
    },
    {
        "line": 20,
        "fullcodeline": "if (skb == NULL)"
    },
    {
        "line": 17,
        "fullcodeline": "hh_len + fragheaderlen + transhdrlen + 20,"
    },
    {
        "line": 18,
        "fullcodeline": "(flags & MSG_DONTWAIT), &err);"
    },
    {
        "line": 39,
        "fullcodeline": "} else if (skb_is_gso(skb)) {"
    }
]