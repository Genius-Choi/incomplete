[
    {
        "line": 11,
        "fullcodeline": "struct inet_sock *inet = inet_sk(sk);"
    },
    {
        "line": 14,
        "fullcodeline": "struct ip_options *opt = cork->opt;"
    },
    {
        "line": 20,
        "fullcodeline": "int offset = 0;"
    },
    {
        "line": 22,
        "fullcodeline": "int csummode = CHECKSUM_NONE;"
    },
    {
        "line": 23,
        "fullcodeline": "struct rtable *rt = (struct rtable *)cork->dst;"
    },
    {
        "line": 25,
        "fullcodeline": "skb = skb_peek_tail(queue);"
    },
    {
        "line": 27,
        "fullcodeline": "exthdrlen = !skb ? rt->dst.header_len : 0;"
    },
    {
        "line": 28,
        "fullcodeline": "mtu = cork->fragsize;"
    },
    {
        "line": 30,
        "fullcodeline": "hh_len = LL_RESERVED_SPACE(rt->dst.dev);"
    },
    {
        "line": 32,
        "fullcodeline": "fragheaderlen = sizeof(struct iphdr) + (opt ? opt->optlen : 0);"
    },
    {
        "line": 33,
        "fullcodeline": "maxfraglen = ((mtu - fragheaderlen) & ~7) + fragheaderlen;"
    },
    {
        "line": 51,
        "fullcodeline": "cork->length += length;"
    },
    {
        "line": 236,
        "fullcodeline": "err = -EFAULT;"
    },
    {
        "line": 239,
        "fullcodeline": "IP_INC_STATS(sock_net(sk), IPSTATS_MIB_OUTDISCARDS);"
    },
    {
        "line": 35,
        "fullcodeline": "if (cork->length + length > 0xFFFF - fragheaderlen) {"
    },
    {
        "line": 70,
        "fullcodeline": "if (!skb)"
    },
    {
        "line": 73,
        "fullcodeline": "while (length > 0) {"
    },
    {
        "line": 36,
        "fullcodeline": "ip_local_error(sk, EMSGSIZE, fl4->daddr, inet->inet_dport,"
    },
    {
        "line": 45,
        "fullcodeline": "if (transhdrlen &&"
    },
    {
        "line": 48,
        "fullcodeline": "!exthdrlen)"
    },
    {
        "line": 49,
        "fullcodeline": "csummode = CHECKSUM_PARTIAL;"
    },
    {
        "line": 52,
        "fullcodeline": "if (((length > mtu) || (skb && skb_is_gso(skb))) &&"
    },
    {
        "line": 54,
        "fullcodeline": "(rt->dst.dev->features & NETIF_F_UFO) && !rt->dst.header_len) {"
    },
    {
        "line": 55,
        "fullcodeline": "err = ip_ufo_append_data(sk, queue, getfrag, from, length,"
    },
    {
        "line": 75,
        "fullcodeline": "copy = mtu - skb->len;"
    },
    {
        "line": 229,
        "fullcodeline": "offset += copy;"
    },
    {
        "line": 230,
        "fullcodeline": "length -= copy;"
    },
    {
        "line": 37,
        "fullcodeline": "mtu-exthdrlen);"
    },
    {
        "line": 38,
        "fullcodeline": "return -EMSGSIZE;"
    },
    {
        "line": 47,
        "fullcodeline": "rt->dst.dev->features & NETIF_F_V4_CSUM &&"
    },
    {
        "line": 76,
        "fullcodeline": "if (copy < length)"
    },
    {
        "line": 78,
        "fullcodeline": "if (copy <= 0) {"
    },
    {
        "line": 185,
        "fullcodeline": "if (copy > length)"
    },
    {
        "line": 188,
        "fullcodeline": "if (!(rt->dst.dev->features&NETIF_F_SG)) {"
    },
    {
        "line": 46,
        "fullcodeline": "length + fragheaderlen <= mtu &&"
    },
    {
        "line": 53,
        "fullcodeline": "(sk->sk_protocol == IPPROTO_UDP) &&"
    },
    {
        "line": 77,
        "fullcodeline": "copy = maxfraglen - skb->len;"
    },
    {
        "line": 86,
        "fullcodeline": "skb_prev = skb;"
    },
    {
        "line": 96,
        "fullcodeline": "datalen = length + fraggap;"
    },
    {
        "line": 99,
        "fullcodeline": "fraglen = datalen + fragheaderlen;"
    },
    {
        "line": 107,
        "fullcodeline": "alloclen += exthdrlen;"
    },
    {
        "line": 141,
        "fullcodeline": "skb->ip_summed = csummode;"
    },
    {
        "line": 142,
        "fullcodeline": "skb->csum = 0;"
    },
    {
        "line": 143,
        "fullcodeline": "skb_reserve(skb, hh_len);"
    },
    {
        "line": 149,
        "fullcodeline": "data = skb_put(skb, fraglen + exthdrlen);"
    },
    {
        "line": 150,
        "fullcodeline": "skb_set_network_header(skb, exthdrlen);"
    },
    {
        "line": 151,
        "fullcodeline": "skb->transport_header = (skb->network_header +"
    },
    {
        "line": 153,
        "fullcodeline": "data += fragheaderlen + exthdrlen;"
    },
    {
        "line": 165,
        "fullcodeline": "copy = datalen - transhdrlen - fraggap;"
    },
    {
        "line": 172,
        "fullcodeline": "offset += copy;"
    },
    {
        "line": 173,
        "fullcodeline": "length -= datalen - fraggap;"
    },
    {
        "line": 174,
        "fullcodeline": "transhdrlen = 0;"
    },
    {
        "line": 175,
        "fullcodeline": "exthdrlen = 0;"
    },
    {
        "line": 176,
        "fullcodeline": "csummode = CHECKSUM_NONE;"
    },
    {
        "line": 181,
        "fullcodeline": "__skb_queue_tail(queue, skb);"
    },
    {
        "line": 186,
        "fullcodeline": "copy = length;"
    },
    {
        "line": 191,
        "fullcodeline": "off = skb->len;"
    },
    {
        "line": 97,
        "fullcodeline": "if (datalen > mtu - fragheaderlen)"
    },
    {
        "line": 114,
        "fullcodeline": "if (datalen == length + fraggap)"
    },
    {
        "line": 135,
        "fullcodeline": "if (skb == NULL)"
    },
    {
        "line": 199,
        "fullcodeline": "int i = skb_shinfo(skb)->nr_frags;"
    },
    {
        "line": 201,
        "fullcodeline": "err = -ENOMEM;"
    },
    {
        "line": 222,
        "fullcodeline": "pfrag->offset += copy;"
    },
    {
        "line": 223,
        "fullcodeline": "skb_frag_size_add(&skb_shinfo(skb)->frags[i - 1], copy);"
    },
    {
        "line": 224,
        "fullcodeline": "skb->len += copy;"
    },
    {
        "line": 225,
        "fullcodeline": "skb->data_len += copy;"
    },
    {
        "line": 226,
        "fullcodeline": "skb->truesize += copy;"
    },
    {
        "line": 227,
        "fullcodeline": "atomic_add(copy, &sk->sk_wmem_alloc);"
    },
    {
        "line": 88,
        "fullcodeline": "fraggap = skb_prev->len - maxfraglen;"
    },
    {
        "line": 98,
        "fullcodeline": "datalen = maxfraglen - fragheaderlen;"
    },
    {
        "line": 101,
        "fullcodeline": "if ((flags & MSG_MORE) &&"
    },
    {
        "line": 102,
        "fullcodeline": "!(rt->dst.dev->features&NETIF_F_SG))"
    },
    {
        "line": 103,
        "fullcodeline": "alloclen = mtu;"
    },
    {
        "line": 115,
        "fullcodeline": "alloclen += rt->dst.trailer_len;"
    },
    {
        "line": 118,
        "fullcodeline": "skb = sock_alloc_send_skb(sk,"
    },
    {
        "line": 144,
        "fullcodeline": "skb_shinfo(skb)->tx_flags = cork->tx_flags;"
    },
    {
        "line": 156,
        "fullcodeline": "skb->csum = skb_copy_and_csum_bits("
    },
    {
        "line": 159,
        "fullcodeline": "skb_prev->csum = csum_sub(skb_prev->csum,"
    },
    {
        "line": 161,
        "fullcodeline": "data += fraggap;"
    },
    {
        "line": 162,
        "fullcodeline": "pskb_trim_unique(skb_prev, maxfraglen);"
    },
    {
        "line": 166,
        "fullcodeline": "if (copy > 0 && getfrag(from, data + transhdrlen, offset, copy, fraggap, skb) < 0) {"
    },
    {
        "line": 167,
        "fullcodeline": "err = -EFAULT;"
    },
    {
        "line": 192,
        "fullcodeline": "if (getfrag(from, skb_put(skb, copy),"
    },
    {
        "line": 195,
        "fullcodeline": "err = -EFAULT;"
    },
    {
        "line": 90,
        "fullcodeline": "fraggap = 0;"
    },
    {
        "line": 105,
        "fullcodeline": "alloclen = fraglen;"
    },
    {
        "line": 122,
        "fullcodeline": "skb = NULL;"
    },
    {
        "line": 202,
        "fullcodeline": "if (!sk_page_frag_refill(sk, pfrag))"
    },
    {
        "line": 205,
        "fullcodeline": "if (!skb_can_coalesce(skb, i, pfrag->page,"
    },
    {
        "line": 207,
        "fullcodeline": "err = -EMSGSIZE;"
    },
    {
        "line": 211,
        "fullcodeline": "__skb_fill_page_desc(skb, i, pfrag->page,"
    },
    {
        "line": 213,
        "fullcodeline": "skb_shinfo(skb)->nr_frags = ++i;"
    },
    {
        "line": 214,
        "fullcodeline": "get_page(pfrag->page);"
    },
    {
        "line": 217,
        "fullcodeline": "if (getfrag(from,"
    },
    {
        "line": 120,
        "fullcodeline": "(flags & MSG_DONTWAIT), &err);"
    },
    {
        "line": 208,
        "fullcodeline": "if (i == MAX_SKB_FRAGS)"
    },
    {
        "line": 123,
        "fullcodeline": "if (atomic_read(&sk->sk_wmem_alloc) <="
    },
    {
        "line": 124,
        "fullcodeline": "2 * sk->sk_sndbuf)"
    },
    {
        "line": 125,
        "fullcodeline": "skb = sock_wmalloc(sk,"
    },
    {
        "line": 128,
        "fullcodeline": "if (unlikely(skb == NULL))"
    },
    {
        "line": 129,
        "fullcodeline": "err = -ENOBUFS;"
    },
    {
        "line": 218,
        "fullcodeline": "page_address(pfrag->page) + pfrag->offset,"
    },
    {
        "line": 133,
        "fullcodeline": "cork->tx_flags = 0;"
    }
]