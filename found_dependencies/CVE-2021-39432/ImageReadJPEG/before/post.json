[
    {
        "line": 6,
        "fullcodeline": "JpegInput jpeg( filename );"
    },
    {
        "line": 9,
        "fullcodeline": "FileInformation info = GetJPEGInfo( jpeg );"
    },
    {
        "line": 13,
        "fullcodeline": "jpeg.cinfo().out_color_space = nchan > 1 ? JCS_RGB : JCS_GRAYSCALE;"
    },
    {
        "line": 14,
        "fullcodeline": "out.ReForge( info.sizes, info.tensorElements, DT_UINT8, Option::AcceptDataTypeChange::DONT_ALLOW );"
    },
    {
        "line": 15,
        "fullcodeline": "out.SetPixelSize( info.pixelSize );"
    },
    {
        "line": 16,
        "fullcodeline": "out.SetColorSpace( info.colorSpace );"
    },
    {
        "line": 19,
        "fullcodeline": "jpeg_start_decompress( jpeg.cinfoptr() );"
    },
    {
        "line": 20,
        "fullcodeline": "std::vector< JSAMPLE > buffer( info.sizes[ 0 ] * static_cast< unsigned >( nchan )); // casting to unsigned rather than dip::uint to shut up GCC warning."
    },
    {
        "line": 21,
        "fullcodeline": "dip::uint8* imagedata = static_cast< dip::uint8* >( out.Origin() );"
    },
    {
        "line": 22,
        "fullcodeline": "auto stride = out.Strides();"
    },
    {
        "line": 23,
        "fullcodeline": "auto tStride = out.TensorStride();"
    },
    {
        "line": 45,
        "fullcodeline": "jpeg_finish_decompress( jpeg.cinfoptr() );"
    },
    {
        "line": 24,
        "fullcodeline": "for( dip::uint ii = 0; ii < info.sizes[ 1 ]; ++ii ) {"
    },
    {
        "line": 12,
        "fullcodeline": "int nchan = jpeg.cinfo().num_components;"
    },
    {
        "line": 25,
        "fullcodeline": "JSAMPLE* indata = buffer.data();"
    },
    {
        "line": 26,
        "fullcodeline": "jpeg_read_scanlines( jpeg.cinfoptr(), &indata, 1 );"
    },
    {
        "line": 27,
        "fullcodeline": "dip::uint8* outdata = imagedata;"
    },
    {
        "line": 43,
        "fullcodeline": "imagedata += stride[ 1 ];"
    },
    {
        "line": 28,
        "fullcodeline": "if( nchan > 1 ) {"
    },
    {
        "line": 29,
        "fullcodeline": "for( dip::uint jj = 0; jj < info.sizes[ 0 ]; ++jj ) {"
    },
    {
        "line": 34,
        "fullcodeline": "outdata += stride[ 0 ];"
    },
    {
        "line": 37,
        "fullcodeline": "for( dip::uint jj = 0; jj < info.sizes[ 0 ]; ++jj ) {"
    },
    {
        "line": 30,
        "fullcodeline": "for( int kk = 0; kk < nchan; ++kk ) {"
    },
    {
        "line": 39,
        "fullcodeline": "++indata;"
    },
    {
        "line": 40,
        "fullcodeline": "outdata += stride[ 0 ];"
    },
    {
        "line": 32,
        "fullcodeline": "++indata;"
    },
    {
        "line": 31,
        "fullcodeline": "*( outdata + kk * tStride ) = *indata;"
    }
]