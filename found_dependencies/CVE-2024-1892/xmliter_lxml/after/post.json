[
    {
        "line": 7,
        "fullcodeline": "reader = _StreamReader(obj)"
    },
    {
        "line": 8,
        "fullcodeline": "tag = f\"{{{namespace}}}{nodename}\" if namespace else nodename"
    },
    {
        "line": 9,
        "fullcodeline": "iterable = etree.iterparse("
    },
    {
        "line": 15,
        "fullcodeline": "selxpath = \"//\" + (f\"{prefix}:{nodename}\" if namespace else nodename)"
    },
    {
        "line": 16,
        "fullcodeline": "needs_namespace_resolution = not namespace and \":\" in nodename"
    },
    {
        "line": 19,
        "fullcodeline": "for event, data in iterable:"
    },
    {
        "line": 10,
        "fullcodeline": "cast(\"SupportsReadClose[bytes]\", reader),"
    },
    {
        "line": 12,
        "fullcodeline": "events=(\"end\", \"start-ns\"),"
    },
    {
        "line": 18,
        "fullcodeline": "prefix, nodename = nodename.split(\":\", maxsplit=1)"
    },
    {
        "line": 31,
        "fullcodeline": "assert isinstance(data, etree._Element)"
    },
    {
        "line": 32,
        "fullcodeline": "node = data"
    },
    {
        "line": 35,
        "fullcodeline": "nodetext = etree.tostring(node, encoding=\"unicode\")"
    },
    {
        "line": 36,
        "fullcodeline": "node.clear()"
    },
    {
        "line": 37,
        "fullcodeline": "xs = Selector(text=nodetext, type=\"xml\")"
    },
    {
        "line": 20,
        "fullcodeline": "if event == \"start-ns\":"
    },
    {
        "line": 33,
        "fullcodeline": "if node.tag != tag:"
    },
    {
        "line": 21,
        "fullcodeline": "assert isinstance(data, tuple)"
    },
    {
        "line": 39,
        "fullcodeline": "xs.register_namespace(prefix, namespace)"
    },
    {
        "line": 26,
        "fullcodeline": "namespace = _namespace"
    },
    {
        "line": 27,
        "fullcodeline": "needs_namespace_resolution = False"
    },
    {
        "line": 28,
        "fullcodeline": "selxpath = f\"//{prefix}:{nodename}\""
    },
    {
        "line": 29,
        "fullcodeline": "tag = f\"{{{namespace}}}{nodename}\""
    },
    {
        "line": 23,
        "fullcodeline": "_prefix, _namespace = data"
    },
    {
        "line": 24,
        "fullcodeline": "if _prefix != prefix:"
    }
]