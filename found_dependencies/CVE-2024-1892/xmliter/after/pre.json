[
    {
        "line": 12,
        "fullcodeline": "warn("
    },
    {
        "line": 22,
        "fullcodeline": "nodename_patt = re.escape(nodename)"
    },
    {
        "line": 24,
        "fullcodeline": "DOCUMENT_HEADER_RE = re.compile(r\"<\\?xml[^>]+>\\s*\", re.S)"
    },
    {
        "line": 25,
        "fullcodeline": "HEADER_END_RE = re.compile(rf\"<\\s*/{nodename_patt}\\s*>\", re.S)"
    },
    {
        "line": 26,
        "fullcodeline": "END_TAG_RE = re.compile(r\"<\\s*/([^\\s>]+)\\s*>\", re.S)"
    },
    {
        "line": 27,
        "fullcodeline": "NAMESPACE_RE = re.compile(r\"((xmlns[:A-Za-z]*)=[^>\\s]+)\", re.S)"
    },
    {
        "line": 28,
        "fullcodeline": "text = _body_or_str(obj)"
    },
    {
        "line": 30,
        "fullcodeline": "document_header_match = re.search(DOCUMENT_HEADER_RE, text)"
    },
    {
        "line": 31,
        "fullcodeline": "document_header = ("
    },
    {
        "line": 34,
        "fullcodeline": "header_end_idx = re_rsearch(HEADER_END_RE, text)"
    },
    {
        "line": 35,
        "fullcodeline": "header_end = text[header_end_idx[1] :].strip() if header_end_idx else \"\""
    },
    {
        "line": 36,
        "fullcodeline": "namespaces: Dict[str, str] = {}"
    },
    {
        "line": 47,
        "fullcodeline": "r = re.compile(rf\"<{nodename_patt}[\\s>].*?</{nodename_patt}>\", re.DOTALL)"
    },
    {
        "line": 14,
        "fullcodeline": "\"xmliter is deprecated and its use strongly discouraged because \""
    },
    {
        "line": 32,
        "fullcodeline": "document_header_match.group().strip() if document_header_match else \"\""
    },
    {
        "line": 48,
        "fullcodeline": "for match in r.finditer(text):"
    },
    {
        "line": 38,
        "fullcodeline": "for tagname in reversed(re.findall(END_TAG_RE, header_end)):"
    },
    {
        "line": 49,
        "fullcodeline": "nodetext = ("
    },
    {
        "line": 50,
        "fullcodeline": "document_header"
    },
    {
        "line": 39,
        "fullcodeline": "assert header_end_idx"
    },
    {
        "line": 40,
        "fullcodeline": "tag = re.search("
    },
    {
        "line": 41,
        "fullcodeline": "rf\"<\\s*{tagname}.*?xmlns[:=][^>]*>\", text[: header_end_idx[1]], re.S"
    },
    {
        "line": 51,
        "fullcodeline": "+ match.group().replace("
    },
    {
        "line": 44,
        "fullcodeline": "for x in re.findall(NAMESPACE_RE, tag.group()):"
    },
    {
        "line": 52,
        "fullcodeline": "nodename, f'{nodename} {\" \".join(namespaces.values())}', 1"
    },
    {
        "line": 45,
        "fullcodeline": "namespaces[x[1]] = x[0]"
    }
]