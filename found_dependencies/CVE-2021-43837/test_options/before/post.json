[
    {
        "line": 3,
        "fullcodeline": "mocker.patch("
    },
    {
        "line": 6,
        "fullcodeline": "result = cli_runner.invoke("
    },
    {
        "line": 31,
        "fullcodeline": "assert result.exit_code == 0, result.output"
    },
    {
        "line": 33,
        "fullcodeline": "assert set(kwargs) == {"
    },
    {
        "line": 46,
        "fullcodeline": "assert kwargs[\"base_path\"] == \"bla\""
    },
    {
        "line": 47,
        "fullcodeline": "assert kwargs[\"ca_bundle\"] == \"yay\""
    },
    {
        "line": 48,
        "fullcodeline": "assert kwargs[\"login_cert\"] == \"puc\""
    },
    {
        "line": 49,
        "fullcodeline": "assert kwargs[\"login_cert_key\"] == \"prc\""
    },
    {
        "line": 50,
        "fullcodeline": "assert kwargs[\"password\"] == \"content of b\""
    },
    {
        "line": 51,
        "fullcodeline": "assert kwargs[\"token\"] == \"content of c\""
    },
    {
        "line": 52,
        "fullcodeline": "assert kwargs[\"url\"] == \"https://foo\""
    },
    {
        "line": 53,
        "fullcodeline": "assert kwargs[\"username\"] == \"user\""
    },
    {
        "line": 54,
        "fullcodeline": "assert kwargs[\"verify\"] is True"
    },
    {
        "line": 55,
        "fullcodeline": "assert kwargs[\"render\"] is False"
    },
    {
        "line": 32,
        "fullcodeline": "_, kwargs = client.call_args"
    },
    {
        "line": 2,
        "fullcodeline": "client = mocker.patch(\"vault_cli.client.get_client_class\").return_value"
    },
    {
        "line": 8,
        "fullcodeline": "["
    }
]