[
    {
        "line": 8,
        "fullcodeline": "*frame = *vm->active_frame;"
    },
    {
        "line": 10,
        "fullcodeline": "frame->previous_active_frame = NULL;"
    },
    {
        "line": 12,
        "fullcodeline": "native = &frame->native;"
    },
    {
        "line": 13,
        "fullcodeline": "native->size = 0;"
    },
    {
        "line": 14,
        "fullcodeline": "native->free = NULL;"
    },
    {
        "line": 15,
        "fullcodeline": "native->free_size = 0;"
    },
    {
        "line": 17,
        "fullcodeline": "active = &vm->active_frame->native;"
    },
    {
        "line": 18,
        "fullcodeline": "value_count = njs_function_frame_value_count(active);"
    },
    {
        "line": 20,
        "fullcodeline": "function = active->function;"
    },
    {
        "line": 22,
        "fullcodeline": "new = (njs_value_t **) ((u_char *) native + NJS_FRAME_SIZE);"
    },
    {
        "line": 23,
        "fullcodeline": "value = (njs_value_t *) (new + value_count"
    },
    {
        "line": 27,
        "fullcodeline": "native->arguments = value;"
    },
    {
        "line": 28,
        "fullcodeline": "native->arguments_offset = value + (function->args_offset - 1);"
    },
    {
        "line": 29,
        "fullcodeline": "native->local = new + njs_function_frame_args_count(active);"
    },
    {
        "line": 30,
        "fullcodeline": "native->temp = new + value_count;"
    },
    {
        "line": 31,
        "fullcodeline": "native->pc = pc;"
    },
    {
        "line": 33,
        "fullcodeline": "start = njs_function_frame_values(active, &end);"
    },
    {
        "line": 34,
        "fullcodeline": "p = native->arguments;"
    },
    {
        "line": 43,
        "fullcodeline": "p = native->arguments;"
    },
    {
        "line": 44,
        "fullcodeline": "local = native->local + function->args_offset;"
    },
    {
        "line": 36,
        "fullcodeline": "while (start < end) {"
    },
    {
        "line": 46,
        "fullcodeline": "for (n = 0; n < function->args_count; n++) {"
    },
    {
        "line": 37,
        "fullcodeline": "*p = *start++;"
    },
    {
        "line": 38,
        "fullcodeline": "*new++ = p++;"
    },
    {
        "line": 51,
        "fullcodeline": "*local++ = p++;"
    },
    {
        "line": 47,
        "fullcodeline": "if (!njs_is_valid(p)) {"
    },
    {
        "line": 48,
        "fullcodeline": "njs_set_undefined(p);"
    }
]