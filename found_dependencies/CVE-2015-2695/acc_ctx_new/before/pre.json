[
    {
        "line": 14,
        "fullcodeline": "spnego_gss_ctx_id_t sc = NULL;"
    },
    {
        "line": 16,
        "fullcodeline": "ret = GSS_S_DEFECTIVE_TOKEN;"
    },
    {
        "line": 17,
        "fullcodeline": "der_mechTypes.length = 0;"
    },
    {
        "line": 18,
        "fullcodeline": "der_mechTypes.value = NULL;"
    },
    {
        "line": 19,
        "fullcodeline": "*mechToken = *mechListMIC = GSS_C_NO_BUFFER;"
    },
    {
        "line": 20,
        "fullcodeline": "supported_mechSet = mechTypes = GSS_C_NO_OID_SET;"
    },
    {
        "line": 21,
        "fullcodeline": "*return_token = ERROR_TOKEN_SEND;"
    },
    {
        "line": 22,
        "fullcodeline": "*negState = REJECT;"
    },
    {
        "line": 23,
        "fullcodeline": "*minor_status = 0;"
    },
    {
        "line": 25,
        "fullcodeline": "ret = get_negTokenInit(minor_status, buf, &der_mechTypes,"
    },
    {
        "line": 31,
        "fullcodeline": "ret = get_negotiable_mechs(minor_status, spcred, GSS_C_ACCEPT,"
    },
    {
        "line": 42,
        "fullcodeline": "mech_wanted = negotiate_mech(supported_mechSet, mechTypes, negState);"
    },
    {
        "line": 47,
        "fullcodeline": "sc = (spnego_gss_ctx_id_t)*ctx;"
    },
    {
        "line": 58,
        "fullcodeline": "sc->mech_set = mechTypes;"
    },
    {
        "line": 59,
        "fullcodeline": "mechTypes = GSS_C_NO_OID_SET;"
    },
    {
        "line": 60,
        "fullcodeline": "sc->internal_mech = mech_wanted;"
    },
    {
        "line": 61,
        "fullcodeline": "sc->DER_mechTypes = der_mechTypes;"
    },
    {
        "line": 62,
        "fullcodeline": "der_mechTypes.length = 0;"
    },
    {
        "line": 63,
        "fullcodeline": "der_mechTypes.value = NULL;"
    },
    {
        "line": 68,
        "fullcodeline": "*return_token = INIT_TOKEN_SEND;"
    },
    {
        "line": 69,
        "fullcodeline": "sc->firstpass = 1;"
    },
    {
        "line": 70,
        "fullcodeline": "*ctx = (gss_ctx_id_t)sc;"
    },
    {
        "line": 71,
        "fullcodeline": "ret = GSS_S_COMPLETE;"
    },
    {
        "line": 73,
        "fullcodeline": "gss_release_oid_set(&tmpmin, &mechTypes);"
    },
    {
        "line": 74,
        "fullcodeline": "gss_release_oid_set(&tmpmin, &supported_mechSet);"
    },
    {
        "line": 28,
        "fullcodeline": "if (ret != GSS_S_COMPLETE) {"
    },
    {
        "line": 33,
        "fullcodeline": "if (ret != GSS_S_COMPLETE) {"
    },
    {
        "line": 43,
        "fullcodeline": "if (*negState == REJECT) {"
    },
    {
        "line": 48,
        "fullcodeline": "if (sc != NULL) {"
    },
    {
        "line": 53,
        "fullcodeline": "if (sc == NULL) {"
    },
    {
        "line": 65,
        "fullcodeline": "if (*negState == REQUEST_MIC)"
    },
    {
        "line": 75,
        "fullcodeline": "if (der_mechTypes.length != 0)"
    },
    {
        "line": 34,
        "fullcodeline": "*return_token = NO_TOKEN_SEND;"
    },
    {
        "line": 44,
        "fullcodeline": "ret = GSS_S_BAD_MECH;"
    },
    {
        "line": 49,
        "fullcodeline": "gss_release_buffer(&tmpmin, &sc->DER_mechTypes);"
    },
    {
        "line": 50,
        "fullcodeline": "assert(mech_wanted != GSS_C_NO_OID);"
    },
    {
        "line": 54,
        "fullcodeline": "ret = GSS_S_FAILURE;"
    },
    {
        "line": 55,
        "fullcodeline": "*return_token = NO_TOKEN_SEND;"
    },
    {
        "line": 66,
        "fullcodeline": "sc->mic_reqd = 1;"
    },
    {
        "line": 76,
        "fullcodeline": "gss_release_buffer(&tmpmin, &der_mechTypes);"
    },
    {
        "line": 52,
        "fullcodeline": "sc = create_spnego_ctx();"
    }
]