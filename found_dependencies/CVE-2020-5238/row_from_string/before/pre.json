[
    {
        "line": 4,
        "fullcodeline": "table_row *row = NULL;"
    },
    {
        "line": 5,
        "fullcodeline": "bufsize_t cell_matched = 1, pipe_matched = 1, offset;"
    },
    {
        "line": 8,
        "fullcodeline": "row = (table_row *)parser->mem->calloc(1, sizeof(table_row));"
    },
    {
        "line": 9,
        "fullcodeline": "row->n_columns = 0;"
    },
    {
        "line": 10,
        "fullcodeline": "row->cells = NULL;"
    },
    {
        "line": 12,
        "fullcodeline": "offset = scan_table_cell_end(string, len, 0);"
    },
    {
        "line": 16,
        "fullcodeline": "while (offset < len && (cell_matched || pipe_matched)) {"
    },
    {
        "line": 57,
        "fullcodeline": "if (offset != len || !row->n_columns) {"
    },
    {
        "line": 17,
        "fullcodeline": "cell_matched = scan_table_cell(string, len, offset);"
    },
    {
        "line": 18,
        "fullcodeline": "pipe_matched = scan_table_cell_end(string, len, offset + cell_matched);"
    },
    {
        "line": 49,
        "fullcodeline": "offset += cell_matched + pipe_matched;"
    },
    {
        "line": 58,
        "fullcodeline": "free_table_row(parser->mem, row);"
    },
    {
        "line": 59,
        "fullcodeline": "row = NULL;"
    },
    {
        "line": 20,
        "fullcodeline": "if (cell_matched || pipe_matched) {"
    },
    {
        "line": 51,
        "fullcodeline": "if (!pipe_matched) {"
    },
    {
        "line": 21,
        "fullcodeline": "cell_end_offset = offset + cell_matched - 1;"
    },
    {
        "line": 52,
        "fullcodeline": "pipe_matched = scan_table_row_end(string, len, offset);"
    },
    {
        "line": 53,
        "fullcodeline": "offset += pipe_matched;"
    },
    {
        "line": 23,
        "fullcodeline": "if (string[cell_end_offset] == '\\n' || string[cell_end_offset] == '\\r') {"
    },
    {
        "line": 24,
        "fullcodeline": "row->paragraph_offset = cell_end_offset;"
    },
    {
        "line": 26,
        "fullcodeline": "cmark_llist_free_full(parser->mem, row->cells, (cmark_free_func)free_table_cell);"
    },
    {
        "line": 27,
        "fullcodeline": "row->cells = NULL;"
    },
    {
        "line": 28,
        "fullcodeline": "row->n_columns = 0;"
    },
    {
        "line": 30,
        "fullcodeline": "cmark_strbuf *cell_buf = unescape_pipes(parser->mem, string + offset,"
    },
    {
        "line": 32,
        "fullcodeline": "cmark_strbuf_trim(cell_buf);"
    },
    {
        "line": 34,
        "fullcodeline": "node_cell *cell = (node_cell *)parser->mem->calloc(1, sizeof(*cell));"
    },
    {
        "line": 35,
        "fullcodeline": "cell->buf = cell_buf;"
    },
    {
        "line": 36,
        "fullcodeline": "cell->start_offset = offset;"
    },
    {
        "line": 37,
        "fullcodeline": "cell->end_offset = cell_end_offset;"
    },
    {
        "line": 44,
        "fullcodeline": "row->n_columns += 1;"
    },
    {
        "line": 45,
        "fullcodeline": "row->cells = cmark_llist_append(parser->mem, row->cells, cell);"
    },
    {
        "line": 39,
        "fullcodeline": "while (cell->start_offset > 0 && string[cell->start_offset - 1] != '|') {"
    },
    {
        "line": 40,
        "fullcodeline": "--cell->start_offset;"
    },
    {
        "line": 41,
        "fullcodeline": "++cell->internal_offset;"
    }
]