[
    {
        "line": 5,
        "fullcodeline": "bufsize_t matched ="
    },
    {
        "line": 8,
        "fullcodeline": "table_row *header_row = NULL;"
    },
    {
        "line": 9,
        "fullcodeline": "table_row *marker_row = NULL;"
    },
    {
        "line": 17,
        "fullcodeline": "parent_string = cmark_node_get_string_content(parent_container);"
    },
    {
        "line": 21,
        "fullcodeline": "header_row = row_from_string(self, parser, (unsigned char *)parent_string,"
    },
    {
        "line": 30,
        "fullcodeline": "marker_row = row_from_string(self, parser,"
    },
    {
        "line": 34,
        "fullcodeline": "assert(marker_row);"
    },
    {
        "line": 62,
        "fullcodeline": "cmark_node_set_syntax_extension(parent_container, self);"
    },
    {
        "line": 66,
        "fullcodeline": "set_n_table_columns(parent_container, header_row->n_columns);"
    },
    {
        "line": 68,
        "fullcodeline": "uint8_t *alignments ="
    },
    {
        "line": 70,
        "fullcodeline": "cmark_llist *it = marker_row->cells;"
    },
    {
        "line": 82,
        "fullcodeline": "set_table_alignments(parent_container, alignments);"
    },
    {
        "line": 84,
        "fullcodeline": "table_header ="
    },
    {
        "line": 87,
        "fullcodeline": "cmark_node_set_syntax_extension(table_header, self);"
    },
    {
        "line": 88,
        "fullcodeline": "table_header->end_column = parent_container->start_column + (int)strlen(parent_string) - 2;"
    },
    {
        "line": 89,
        "fullcodeline": "table_header->start_line = table_header->end_line = parent_container->start_line;"
    },
    {
        "line": 92,
        "fullcodeline": "ntr->is_header = true;"
    },
    {
        "line": 109,
        "fullcodeline": "cmark_parser_advance_offset("
    },
    {
        "line": 113,
        "fullcodeline": "free_table_row(parser->mem, header_row);"
    },
    {
        "line": 6,
        "fullcodeline": "scan_table_start(input, len, cmark_parser_get_first_nonspace(parser));"
    },
    {
        "line": 14,
        "fullcodeline": "if (!matched)"
    },
    {
        "line": 24,
        "fullcodeline": "if (!header_row) {"
    },
    {
        "line": 36,
        "fullcodeline": "if (header_row->n_columns != marker_row->n_columns) {"
    },
    {
        "line": 64,
        "fullcodeline": "parent_container->as.opaque = parser->mem->calloc(1, sizeof(node_table));"
    },
    {
        "line": 85,
        "fullcodeline": "cmark_parser_add_child(parser, parent_container, CMARK_NODE_TABLE_ROW,"
    },
    {
        "line": 91,
        "fullcodeline": "table_header->as.opaque = ntr = (node_table_row *)parser->mem->calloc(1, sizeof(node_table_row));"
    },
    {
        "line": 111,
        "fullcodeline": "(int)strlen((char *)input) - 1 - cmark_parser_get_offset(parser), false);"
    },
    {
        "line": 32,
        "fullcodeline": "len - cmark_parser_get_first_nonspace(parser));"
    },
    {
        "line": 37,
        "fullcodeline": "free_table_row(parser->mem, header_row);"
    },
    {
        "line": 44,
        "fullcodeline": "header_row = row_from_string(self, parser, (unsigned char *)parent_string,"
    },
    {
        "line": 46,
        "fullcodeline": "marker_row = row_from_string(self, parser,"
    },
    {
        "line": 51,
        "fullcodeline": "if (!cmark_node_set_type(parent_container, CMARK_NODE_TABLE)) {"
    },
    {
        "line": 52,
        "fullcodeline": "free_table_row(parser->mem, header_row);"
    },
    {
        "line": 58,
        "fullcodeline": "try_inserting_table_header_paragraph(parser, parent_container, (unsigned char *)parent_string,"
    },
    {
        "line": 69,
        "fullcodeline": "(uint8_t *)parser->mem->calloc(header_row->n_columns, sizeof(uint8_t));"
    },
    {
        "line": 71,
        "fullcodeline": "for (i = 0; it; it = it->next, ++i) {"
    },
    {
        "line": 73,
        "fullcodeline": "bool left = node->buf->ptr[0] == ':', right = node->buf->ptr[node->buf->size - 1] == ':';"
    },
    {
        "line": 97,
        "fullcodeline": "for (tmp = header_row->cells; tmp; tmp = tmp->next) {"
    },
    {
        "line": 22,
        "fullcodeline": "(int)strlen(parent_string));"
    },
    {
        "line": 31,
        "fullcodeline": "input + cmark_parser_get_first_nonspace(parser),"
    },
    {
        "line": 98,
        "fullcodeline": "node_cell *cell = (node_cell *) tmp->data;"
    },
    {
        "line": 99,
        "fullcodeline": "cmark_node *header_cell = cmark_parser_add_child(parser, table_header,"
    },
    {
        "line": 101,
        "fullcodeline": "header_cell->start_line = header_cell->end_line = parent_container->start_line;"
    },
    {
        "line": 102,
        "fullcodeline": "header_cell->internal_offset = cell->internal_offset;"
    },
    {
        "line": 103,
        "fullcodeline": "header_cell->end_column = parent_container->start_column + cell->end_offset;"
    },
    {
        "line": 104,
        "fullcodeline": "cmark_node_set_string_content(header_cell, (char *) cell->buf->ptr);"
    },
    {
        "line": 48,
        "fullcodeline": "len - cmark_parser_get_first_nonspace(parser));"
    },
    {
        "line": 76,
        "fullcodeline": "alignments[i] = 'c';"
    },
    {
        "line": 45,
        "fullcodeline": "(int)strlen(parent_string));"
    },
    {
        "line": 47,
        "fullcodeline": "input + cmark_parser_get_first_nonspace(parser),"
    },
    {
        "line": 78,
        "fullcodeline": "alignments[i] = 'l';"
    },
    {
        "line": 80,
        "fullcodeline": "alignments[i] = 'r';"
    }
]