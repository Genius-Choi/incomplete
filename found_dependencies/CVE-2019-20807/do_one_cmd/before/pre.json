[
    {
        "line": 13,
        "fullcodeline": "char\t\t*errormsg = NULL;\t/* error message */"
    },
    {
        "line": 14,
        "fullcodeline": "char_u\t\t*after_modifier = NULL;"
    },
    {
        "line": 16,
        "fullcodeline": "int\t\t\tsave_msg_scroll = msg_scroll;"
    },
    {
        "line": 21,
        "fullcodeline": "vim_memset(&ea, 0, sizeof(ea));"
    },
    {
        "line": 22,
        "fullcodeline": "ea.line1 = 1;"
    },
    {
        "line": 23,
        "fullcodeline": "ea.line2 = 1;"
    },
    {
        "line": 42,
        "fullcodeline": "save_cmdmod = cmdmod;"
    },
    {
        "line": 53,
        "fullcodeline": "ea.cmd = *cmdlinep;"
    },
    {
        "line": 54,
        "fullcodeline": "ea.cmdlinep = cmdlinep;"
    },
    {
        "line": 55,
        "fullcodeline": "ea.getline = fgetline;"
    },
    {
        "line": 56,
        "fullcodeline": "ea.cookie = cookie;"
    },
    {
        "line": 63,
        "fullcodeline": "after_modifier = ea.cmd;"
    },
    {
        "line": 69,
        "fullcodeline": "ea.skip = (if_level > 0);"
    },
    {
        "line": 77,
        "fullcodeline": "cmd = ea.cmd;"
    },
    {
        "line": 78,
        "fullcodeline": "ea.cmd = skip_range(ea.cmd, NULL);"
    },
    {
        "line": 81,
        "fullcodeline": "p = find_command(&ea, NULL);"
    },
    {
        "line": 158,
        "fullcodeline": "ea.cmd = cmd;"
    },
    {
        "line": 169,
        "fullcodeline": "ea.cmd = skipwhite(ea.cmd);"
    },
    {
        "line": 282,
        "fullcodeline": "ni = (!IS_USER_CMDIDX(ea.cmdidx)"
    },
    {
        "line": 407,
        "fullcodeline": "correct_range(&ea);"
    },
    {
        "line": 891,
        "fullcodeline": "free_cmdmod();"
    },
    {
        "line": 892,
        "fullcodeline": "cmdmod = save_cmdmod;"
    },
    {
        "line": 29,
        "fullcodeline": "if (quitmore"
    },
    {
        "line": 45,
        "fullcodeline": "if ((*cmdlinep)[0] == '#' && (*cmdlinep)[1] == '!')"
    },
    {
        "line": 60,
        "fullcodeline": "if (parse_command_modifiers(&ea, &errormsg, FALSE) == FAIL)"
    },
    {
        "line": 79,
        "fullcodeline": "if (*ea.cmd == '*' && vim_strchr(p_cpo, CPO_STAR) == NULL)"
    },
    {
        "line": 146,
        "fullcodeline": "if (!IS_USER_CMDIDX(ea.cmdidx))"
    },
    {
        "line": 159,
        "fullcodeline": "if (parse_cmd_address(&ea, &errormsg, FALSE) == FAIL)"
    },
    {
        "line": 170,
        "fullcodeline": "while (*ea.cmd == ':')"
    },
    {
        "line": 171,
        "fullcodeline": "ea.cmd = skipwhite(ea.cmd + 1);"
    },
    {
        "line": 177,
        "fullcodeline": "if (*ea.cmd == NUL || *ea.cmd == '\"'"
    },
    {
        "line": 226,
        "fullcodeline": "if (p != NULL && ea.cmdidx == CMD_SIZE && !ea.skip"
    },
    {
        "line": 262,
        "fullcodeline": "if (ea.cmdidx == CMD_SIZE)"
    },
    {
        "line": 294,
        "fullcodeline": "if (ea.cmdidx == CMD_if)"
    },
    {
        "line": 306,
        "fullcodeline": "if (*p == '!' && ea.cmdidx != CMD_substitute"
    },
    {
        "line": 318,
        "fullcodeline": "if (!IS_USER_CMDIDX(ea.cmdidx))"
    },
    {
        "line": 321,
        "fullcodeline": "if (!ea.skip)"
    },
    {
        "line": 366,
        "fullcodeline": "if (!ni && !(ea.argt & BANG) && ea.forceit)\t/* no <!> allowed */"
    },
    {
        "line": 376,
        "fullcodeline": "if (!ea.skip && !ni)"
    },
    {
        "line": 404,
        "fullcodeline": "if ((ea.argt & NOTADR) && ea.addr_count == 0) /* default is 1, not cursor */"
    },
    {
        "line": 434,
        "fullcodeline": "if (ea.cmdidx == CMD_bang)"
    },
    {
        "line": 440,
        "fullcodeline": "if (ea.cmdidx == CMD_file && *ea.arg != NUL && curbuf_locked())"
    },
    {
        "line": 447,
        "fullcodeline": "if (ea.argt & ARGOPT)"
    },
    {
        "line": 455,
        "fullcodeline": "if (ea.cmdidx == CMD_write || ea.cmdidx == CMD_update)"
    },
    {
        "line": 474,
        "fullcodeline": "if (ea.cmdidx == CMD_read)"
    },
    {
        "line": 488,
        "fullcodeline": "if (ea.cmdidx == CMD_lshift || ea.cmdidx == CMD_rshift)"
    },
    {
        "line": 503,
        "fullcodeline": "if ((ea.argt & EDITCMD) && !ea.usefilter)"
    },
    {
        "line": 510,
        "fullcodeline": "if ((ea.argt & TRLBAR) && !ea.usefilter)"
    },
    {
        "line": 543,
        "fullcodeline": "if ((ea.argt & DFLALL) && ea.addr_count == 0)"
    },
    {
        "line": 593,
        "fullcodeline": "if (       (ea.argt & REGSTR)"
    },
    {
        "line": 627,
        "fullcodeline": "if ((ea.argt & COUNT) && VIM_ISDIGIT(*ea.arg)"
    },
    {
        "line": 661,
        "fullcodeline": "if (ea.argt & EXFLAGS)"
    },
    {
        "line": 664,
        "fullcodeline": "if (!ni && !(ea.argt & EXTRA) && *ea.arg != NUL"
    },
    {
        "line": 671,
        "fullcodeline": "if (!ni && (ea.argt & NEEDARG) && *ea.arg == NUL)"
    },
    {
        "line": 772,
        "fullcodeline": "if (ea.argt & XFILE)"
    },
    {
        "line": 782,
        "fullcodeline": "if ((ea.argt & BUFNAME) && *ea.arg != NUL && ea.addr_count == 0"
    },
    {
        "line": 809,
        "fullcodeline": "if (ea.cmdidx == CMD_try && ea.did_esilent > 0)"
    },
    {
        "line": 835,
        "fullcodeline": "ea.errmsg = NULL;"
    },
    {
        "line": 836,
        "fullcodeline": "(cmdnames[ea.cmdidx].cmd_func)(&ea);"
    },
    {
        "line": 863,
        "fullcodeline": "if (curwin->w_cursor.lnum == 0)\t/* can happen with zero line number */"
    },
    {
        "line": 869,
        "fullcodeline": "if (errormsg != NULL && *errormsg != NUL && !did_emsg)"
    },
    {
        "line": 888,
        "fullcodeline": "if (ea.verbose_save >= 0)"
    },
    {
        "line": 894,
        "fullcodeline": "if (ea.save_msg_silent != -1)"
    },
    {
        "line": 918,
        "fullcodeline": "if (ea.nextcmd && *ea.nextcmd == NUL)\t/* not really a next command */"
    },
    {
        "line": 35,
        "fullcodeline": "&& !getline_equal(fgetline, cookie, getnextac))"
    },
    {
        "line": 36,
        "fullcodeline": "--quitmore;"
    },
    {
        "line": 80,
        "fullcodeline": "ea.cmd = skipwhite(ea.cmd + 1);"
    },
    {
        "line": 178,
        "fullcodeline": "|| (ea.nextcmd = check_nextcmd(ea.cmd)) != NULL)"
    },
    {
        "line": 232,
        "fullcodeline": "p = ea.cmd;"
    },
    {
        "line": 235,
        "fullcodeline": "p = vim_strnsave(ea.cmd, (int)(p - ea.cmd));"
    },
    {
        "line": 236,
        "fullcodeline": "ret = apply_autocmds(EVENT_CMDUNDEFINED, p, p, TRUE, NULL);"
    },
    {
        "line": 237,
        "fullcodeline": "vim_free(p);"
    },
    {
        "line": 240,
        "fullcodeline": "p = (ret"
    },
    {
        "line": 283,
        "fullcodeline": "&& (cmdnames[ea.cmdidx].cmd_func == ex_ni"
    },
    {
        "line": 295,
        "fullcodeline": "++if_level;"
    },
    {
        "line": 307,
        "fullcodeline": "&& ea.cmdidx != CMD_smagic && ea.cmdidx != CMD_snomagic)"
    },
    {
        "line": 309,
        "fullcodeline": "++p;"
    },
    {
        "line": 310,
        "fullcodeline": "ea.forceit = TRUE;"
    },
    {
        "line": 319,
        "fullcodeline": "ea.argt = (long)cmdnames[(int)ea.cmdidx].cmd_argt;"
    },
    {
        "line": 368,
        "fullcodeline": "errormsg = _(e_nobang);"
    },
    {
        "line": 405,
        "fullcodeline": "ea.line2 = 1;"
    },
    {
        "line": 435,
        "fullcodeline": "ea.arg = p;"
    },
    {
        "line": 490,
        "fullcodeline": "ea.amount = 1;"
    },
    {
        "line": 496,
        "fullcodeline": "ea.arg = skipwhite(ea.arg);"
    },
    {
        "line": 504,
        "fullcodeline": "ea.do_ecmd_cmd = getargcmd(&ea.arg);"
    },
    {
        "line": 511,
        "fullcodeline": "separate_nextcmd(&ea);"
    },
    {
        "line": 547,
        "fullcodeline": "ea.line1 = 1;"
    },
    {
        "line": 597,
        "fullcodeline": "&& !((ea.argt & COUNT) && VIM_ISDIGIT(*ea.arg)))"
    },
    {
        "line": 628,
        "fullcodeline": "&& (!(ea.argt & BUFNAME) || *(p = skipdigits(ea.arg)) == NUL"
    },
    {
        "line": 631,
        "fullcodeline": "n = getdigits(&ea.arg);"
    },
    {
        "line": 632,
        "fullcodeline": "ea.arg = skipwhite(ea.arg);"
    },
    {
        "line": 662,
        "fullcodeline": "get_flags(&ea);"
    },
    {
        "line": 665,
        "fullcodeline": "&& *ea.arg != '\"' && (*ea.arg != '|' || (ea.argt & TRLBAR) == 0))"
    },
    {
        "line": 667,
        "fullcodeline": "errormsg = _(e_trailing);"
    },
    {
        "line": 673,
        "fullcodeline": "errormsg = _(e_argreq);"
    },
    {
        "line": 783,
        "fullcodeline": "&& !IS_USER_CMDIDX(ea.cmdidx))"
    },
    {
        "line": 799,
        "fullcodeline": "ea.line2 = buflist_findpat(ea.arg, p, (ea.argt & BUFUNL) != 0,"
    },
    {
        "line": 803,
        "fullcodeline": "ea.addr_count = 1;"
    },
    {
        "line": 804,
        "fullcodeline": "ea.arg = skipwhite(p);"
    },
    {
        "line": 811,
        "fullcodeline": "emsg_silent -= ea.did_esilent;"
    },
    {
        "line": 814,
        "fullcodeline": "ea.did_esilent = 0;"
    },
    {
        "line": 837,
        "fullcodeline": "if (ea.errmsg != NULL)"
    },
    {
        "line": 865,
        "fullcodeline": "curwin->w_cursor.lnum = 1;"
    },
    {
        "line": 866,
        "fullcodeline": "curwin->w_cursor.col = 0;"
    },
    {
        "line": 880,
        "fullcodeline": "emsg(errormsg);"
    },
    {
        "line": 889,
        "fullcodeline": "p_verbose = ea.verbose_save;"
    },
    {
        "line": 900,
        "fullcodeline": "emsg_silent -= ea.did_esilent;"
    },
    {
        "line": 905,
        "fullcodeline": "msg_scroll = save_msg_scroll;"
    },
    {
        "line": 919,
        "fullcodeline": "ea.nextcmd = NULL;"
    },
    {
        "line": 148,
        "fullcodeline": "if (ea.cmdidx != CMD_SIZE)"
    },
    {
        "line": 154,
        "fullcodeline": "if (ea.cmdidx == CMD_wincmd && p != NULL)"
    },
    {
        "line": 188,
        "fullcodeline": "if (*ea.cmd == '|' || (exmode_active && ea.line1 != ea.line2))"
    },
    {
        "line": 227,
        "fullcodeline": "&& ASCII_ISUPPER(*ea.cmd)"
    },
    {
        "line": 233,
        "fullcodeline": "while (ASCII_ISALNUM(*p))"
    },
    {
        "line": 234,
        "fullcodeline": "++p;"
    },
    {
        "line": 264,
        "fullcodeline": "if (!ea.skip)"
    },
    {
        "line": 298,
        "fullcodeline": "if (ea.cmdidx == CMD_endif)"
    },
    {
        "line": 313,
        "fullcodeline": "ea.forceit = FALSE;"
    },
    {
        "line": 331,
        "fullcodeline": "if (!curbuf->b_p_ma && (ea.argt & MODIFY))"
    },
    {
        "line": 338,
        "fullcodeline": "if (text_locked() && !(ea.argt & CMDWIN)"
    },
    {
        "line": 350,
        "fullcodeline": "if (!(ea.argt & CMDWIN)"
    },
    {
        "line": 358,
        "fullcodeline": "if (!ni && !(ea.argt & RANGE) && ea.addr_count > 0)"
    },
    {
        "line": 383,
        "fullcodeline": "if (!global_busy && ea.line1 > ea.line2)"
    },
    {
        "line": 400,
        "fullcodeline": "if ((errormsg = invalid_range(&ea)) != NULL)"
    },
    {
        "line": 437,
        "fullcodeline": "ea.arg = skipwhite(p);"
    },
    {
        "line": 448,
        "fullcodeline": "while (ea.arg[0] == '+' && ea.arg[1] == '+')"
    },
    {
        "line": 457,
        "fullcodeline": "if (*ea.arg == '>')\t\t\t/* append */"
    },
    {
        "line": 491,
        "fullcodeline": "while (*ea.arg == *ea.cmd)\t\t/* count number of '>' or '<' */"
    },
    {
        "line": 596,
        "fullcodeline": "&& (!IS_USER_CMDIDX(ea.cmdidx) || *ea.arg != '=')"
    },
    {
        "line": 601,
        "fullcodeline": "if (*ea.arg == '*' || *ea.arg == '+')"
    },
    {
        "line": 607,
        "fullcodeline": "if (valid_yank_reg(*ea.arg, (ea.cmdidx != CMD_put"
    },
    {
        "line": 629,
        "fullcodeline": "|| VIM_ISWHITE(*p)))"
    },
    {
        "line": 633,
        "fullcodeline": "if (n <= 0 && !ni && (ea.argt & ZEROR) == 0)"
    },
    {
        "line": 638,
        "fullcodeline": "if (ea.argt & NOTADR)\t/* e.g. :buffer 2, :sleep 3 */"
    },
    {
        "line": 774,
        "fullcodeline": "if (expand_filename(&ea, cmdlinep, &errormsg) == FAIL)"
    },
    {
        "line": 790,
        "fullcodeline": "if (ea.cmdidx == CMD_bdelete || ea.cmdidx == CMD_bwipeout"
    },
    {
        "line": 801,
        "fullcodeline": "if (ea.line2 < 0)\t    /* failed */"
    },
    {
        "line": 812,
        "fullcodeline": "if (emsg_silent < 0)"
    },
    {
        "line": 838,
        "fullcodeline": "errormsg = _(ea.errmsg);"
    },
    {
        "line": 898,
        "fullcodeline": "if (!did_emsg || msg_silent > ea.save_msg_silent)"
    },
    {
        "line": 901,
        "fullcodeline": "if (emsg_silent < 0)"
    },
    {
        "line": 909,
        "fullcodeline": "if (redirecting())"
    },
    {
        "line": 149,
        "fullcodeline": "ea.addr_type = cmdnames[(int)ea.cmdidx].cmd_addr_type;"
    },
    {
        "line": 155,
        "fullcodeline": "get_wincmd_addr_type(skipwhite(p), &ea);"
    },
    {
        "line": 190,
        "fullcodeline": "ea.cmdidx = CMD_print;"
    },
    {
        "line": 191,
        "fullcodeline": "ea.argt = RANGE+COUNT+TRLBAR;"
    },
    {
        "line": 244,
        "fullcodeline": ") ? find_command(&ea, NULL) : ea.cmd;"
    },
    {
        "line": 266,
        "fullcodeline": "STRCPY(IObuff, _(\"E492: Not an editor command\"));"
    },
    {
        "line": 276,
        "fullcodeline": "errormsg = (char *)IObuff;"
    },
    {
        "line": 277,
        "fullcodeline": "did_emsg_syntax = TRUE;"
    },
    {
        "line": 299,
        "fullcodeline": "--if_level;"
    },
    {
        "line": 334,
        "fullcodeline": "errormsg = _(e_modifiable);"
    },
    {
        "line": 339,
        "fullcodeline": "&& !IS_USER_CMDIDX(ea.cmdidx))"
    },
    {
        "line": 342,
        "fullcodeline": "errormsg = _(get_text_locked_msg());"
    },
    {
        "line": 361,
        "fullcodeline": "errormsg = _(e_norange);"
    },
    {
        "line": 396,
        "fullcodeline": "lnum = ea.line1;"
    },
    {
        "line": 397,
        "fullcodeline": "ea.line1 = ea.line2;"
    },
    {
        "line": 398,
        "fullcodeline": "ea.line2 = lnum;"
    },
    {
        "line": 449,
        "fullcodeline": "if (getargopt(&ea) == FAIL && !ni)"
    },
    {
        "line": 464,
        "fullcodeline": "ea.arg = skipwhite(ea.arg + 1);"
    },
    {
        "line": 465,
        "fullcodeline": "ea.append = TRUE;"
    },
    {
        "line": 478,
        "fullcodeline": "ea.usefilter = TRUE;\t\t/* :r! filter if ea.forceit */"
    },
    {
        "line": 479,
        "fullcodeline": "ea.forceit = FALSE;"
    },
    {
        "line": 493,
        "fullcodeline": "++ea.arg;"
    },
    {
        "line": 494,
        "fullcodeline": "++ea.amount;"
    },
    {
        "line": 518,
        "fullcodeline": "else if (ea.cmdidx == CMD_bang"
    },
    {
        "line": 551,
        "fullcodeline": "ea.line2 = curbuf->b_ml.ml_line_count;"
    },
    {
        "line": 554,
        "fullcodeline": "buf = firstbuf;"
    },
    {
        "line": 557,
        "fullcodeline": "ea.line1 = buf->b_fnum;"
    },
    {
        "line": 558,
        "fullcodeline": "buf = lastbuf;"
    },
    {
        "line": 561,
        "fullcodeline": "ea.line2 = buf->b_fnum;"
    },
    {
        "line": 564,
        "fullcodeline": "ea.line1 = firstbuf->b_fnum;"
    },
    {
        "line": 565,
        "fullcodeline": "ea.line2 = lastbuf->b_fnum;"
    },
    {
        "line": 568,
        "fullcodeline": "ea.line2 = LAST_WIN_NR;"
    },
    {
        "line": 571,
        "fullcodeline": "ea.line2 = LAST_TAB_NR;"
    },
    {
        "line": 574,
        "fullcodeline": "ea.line2 = 1;"
    },
    {
        "line": 594,
        "fullcodeline": "&& *ea.arg != NUL"
    },
    {
        "line": 603,
        "fullcodeline": "errormsg = _(e_invalidreg);"
    },
    {
        "line": 610,
        "fullcodeline": "ea.regname = *ea.arg++;"
    },
    {
        "line": 619,
        "fullcodeline": "ea.arg = skipwhite(ea.arg);"
    },
    {
        "line": 635,
        "fullcodeline": "errormsg = _(e_zerocount);"
    },
    {
        "line": 640,
        "fullcodeline": "ea.line2 = n;"
    },
    {
        "line": 791,
        "fullcodeline": "|| ea.cmdidx == CMD_bunload)"
    },
    {
        "line": 792,
        "fullcodeline": "p = skiptowhite_esc(ea.arg);"
    },
    {
        "line": 813,
        "fullcodeline": "emsg_silent = 0;"
    },
    {
        "line": 878,
        "fullcodeline": "append_command(*cmdlinep);"
    },
    {
        "line": 899,
        "fullcodeline": "msg_silent = ea.save_msg_silent;"
    },
    {
        "line": 902,
        "fullcodeline": "emsg_silent = 0;"
    },
    {
        "line": 910,
        "fullcodeline": "msg_col = 0;"
    },
    {
        "line": 151,
        "fullcodeline": "ea.addr_type = ADDR_LINES;"
    },
    {
        "line": 192,
        "fullcodeline": "if ((errormsg = invalid_range(&ea)) == NULL)"
    },
    {
        "line": 267,
        "fullcodeline": "if (!sourcing)"
    },
    {
        "line": 354,
        "fullcodeline": "&& !IS_USER_CMDIDX(ea.cmdidx)"
    },
    {
        "line": 385,
        "fullcodeline": "if (msg_silent == 0)"
    },
    {
        "line": 451,
        "fullcodeline": "errormsg = _(e_invarg);"
    },
    {
        "line": 459,
        "fullcodeline": "if (*++ea.arg != '>')\t\t/* typed wrong */"
    },
    {
        "line": 555,
        "fullcodeline": "while (buf->b_next != NULL && buf->b_ml.ml_mfp == NULL)"
    },
    {
        "line": 556,
        "fullcodeline": "buf = buf->b_next;"
    },
    {
        "line": 559,
        "fullcodeline": "while (buf->b_prev != NULL && buf->b_ml.ml_mfp == NULL)"
    },
    {
        "line": 560,
        "fullcodeline": "buf = buf->b_prev;"
    },
    {
        "line": 577,
        "fullcodeline": "if (ARGCOUNT == 0)"
    },
    {
        "line": 608,
        "fullcodeline": "&& !IS_USER_CMDIDX(ea.cmdidx))))"
    },
    {
        "line": 641,
        "fullcodeline": "if (ea.addr_count == 0)"
    },
    {
        "line": 646,
        "fullcodeline": "ea.line1 = ea.line2;"
    },
    {
        "line": 647,
        "fullcodeline": "ea.line2 += n - 1;"
    },
    {
        "line": 648,
        "fullcodeline": "++ea.addr_count;"
    },
    {
        "line": 795,
        "fullcodeline": "p = ea.arg + STRLEN(ea.arg);"
    },
    {
        "line": 873,
        "fullcodeline": "if (errormsg != (char *)IObuff)"
    },
    {
        "line": 194,
        "fullcodeline": "correct_range(&ea);"
    },
    {
        "line": 195,
        "fullcodeline": "ex_print(&ea);"
    },
    {
        "line": 198,
        "fullcodeline": "else if (ea.addr_count != 0)"
    },
    {
        "line": 353,
        "fullcodeline": "&& ea.cmdidx != CMD_file"
    },
    {
        "line": 461,
        "fullcodeline": "errormsg = _(\"E494: Use w or w>>\");"
    },
    {
        "line": 467,
        "fullcodeline": "else if (*ea.arg == '!' && ea.cmdidx == CMD_write)  /* :w !filter */"
    },
    {
        "line": 481,
        "fullcodeline": "else if (*ea.arg == '!')\t\t/* :r !filter */"
    },
    {
        "line": 521,
        "fullcodeline": "|| ea.cmdidx == CMD_vglobal"
    },
    {
        "line": 524,
        "fullcodeline": "for (p = ea.arg; *p; ++p)"
    },
    {
        "line": 578,
        "fullcodeline": "ea.line1 = ea.line2 = 0;"
    },
    {
        "line": 642,
        "fullcodeline": "ea.addr_count = 1;"
    },
    {
        "line": 652,
        "fullcodeline": "if (ea.addr_type == ADDR_LINES"
    },
    {
        "line": 796,
        "fullcodeline": "while (p > ea.arg && VIM_ISWHITE(p[-1]))"
    },
    {
        "line": 797,
        "fullcodeline": "--p;"
    },
    {
        "line": 875,
        "fullcodeline": "STRCPY(IObuff, errormsg);"
    },
    {
        "line": 876,
        "fullcodeline": "errormsg = (char *)IObuff;"
    },
    {
        "line": 271,
        "fullcodeline": "if (after_modifier != NULL)"
    },
    {
        "line": 352,
        "fullcodeline": "&& ea.cmdidx != CMD_edit"
    },
    {
        "line": 387,
        "fullcodeline": "if (sourcing || exmode_active)"
    },
    {
        "line": 392,
        "fullcodeline": "if (ask_yesno((char_u *)"
    },
    {
        "line": 469,
        "fullcodeline": "++ea.arg;"
    },
    {
        "line": 470,
        "fullcodeline": "ea.usefilter = TRUE;"
    },
    {
        "line": 483,
        "fullcodeline": "++ea.arg;"
    },
    {
        "line": 484,
        "fullcodeline": "ea.usefilter = TRUE;"
    },
    {
        "line": 520,
        "fullcodeline": "|| ea.cmdidx == CMD_global"
    },
    {
        "line": 580,
        "fullcodeline": "ea.line2 = ARGCOUNT;"
    },
    {
        "line": 653,
        "fullcodeline": "&& ea.line2 > curbuf->b_ml.ml_line_count)"
    },
    {
        "line": 654,
        "fullcodeline": "ea.line2 = curbuf->b_ml.ml_line_count;"
    },
    {
        "line": 200,
        "fullcodeline": "if (ea.line2 > curbuf->b_ml.ml_line_count)"
    },
    {
        "line": 210,
        "fullcodeline": "if (ea.line2 < 0)"
    },
    {
        "line": 272,
        "fullcodeline": "append_command(after_modifier);"
    },
    {
        "line": 351,
        "fullcodeline": "&& ea.cmdidx != CMD_checktime"
    },
    {
        "line": 389,
        "fullcodeline": "errormsg = _(\"E493: Backwards range given\");"
    },
    {
        "line": 519,
        "fullcodeline": "|| ea.cmdidx == CMD_terminal"
    },
    {
        "line": 532,
        "fullcodeline": "if (*p == '\\\\' && p[1] == '\\n')"
    },
    {
        "line": 211,
        "fullcodeline": "errormsg = _(e_invrange);"
    },
    {
        "line": 274,
        "fullcodeline": "append_command(*cmdlinep);"
    },
    {
        "line": 533,
        "fullcodeline": "STRMOVE(p, p + 1);"
    },
    {
        "line": 204,
        "fullcodeline": "if (vim_strchr(p_cpo, CPO_MINUS) != NULL)"
    },
    {
        "line": 218,
        "fullcodeline": "beginline(BL_SOL | BL_FIX);"
    },
    {
        "line": 393,
        "fullcodeline": "_(\"Backwards range given, OK to swap\"), FALSE) != 'y')"
    },
    {
        "line": 205,
        "fullcodeline": "ea.line2 = -1;"
    },
    {
        "line": 214,
        "fullcodeline": "if (ea.line2 == 0)"
    },
    {
        "line": 534,
        "fullcodeline": "else if (*p == '\\n')"
    },
    {
        "line": 207,
        "fullcodeline": "ea.line2 = curbuf->b_ml.ml_line_count;"
    },
    {
        "line": 215,
        "fullcodeline": "curwin->w_cursor.lnum = 1;"
    },
    {
        "line": 536,
        "fullcodeline": "ea.nextcmd = p + 1;"
    },
    {
        "line": 537,
        "fullcodeline": "*p = NUL;"
    },
    {
        "line": 217,
        "fullcodeline": "curwin->w_cursor.lnum = ea.line2;"
    }
]