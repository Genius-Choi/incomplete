[
    {
        "line": 23,
        "fullcodeline": "presentation_result = await ld_proofs_verify("
    },
    {
        "line": 30,
        "fullcodeline": "credential_results = None"
    },
    {
        "line": 32,
        "fullcodeline": "credentials = JsonLdProcessor.get_values(presentation, \"verifiableCredential\")"
    },
    {
        "line": 33,
        "fullcodeline": "credential_results = await asyncio.gather("
    },
    {
        "line": 48,
        "fullcodeline": "credentials_verified = all(result.verified for result in credential_results)"
    },
    {
        "line": 49,
        "fullcodeline": "verified = credentials_verified and presentation_result.verified"
    },
    {
        "line": 12,
        "fullcodeline": "if not purpose and not challenge:"
    },
    {
        "line": 20,
        "fullcodeline": "if \"proof\" not in presentation:"
    },
    {
        "line": 51,
        "fullcodeline": "return PresentationVerificationResult("
    },
    {
        "line": 13,
        "fullcodeline": "raise LinkedDataProofException("
    },
    {
        "line": 21,
        "fullcodeline": "raise LinkedDataProofException('presentation must contain \"proof\"')"
    },
    {
        "line": 34,
        "fullcodeline": "*["
    },
    {
        "line": 16,
        "fullcodeline": "elif not purpose:"
    },
    {
        "line": 17,
        "fullcodeline": "purpose = AuthenticationProofPurpose(challenge=challenge, domain=domain)"
    },
    {
        "line": 35,
        "fullcodeline": "verify_credential("
    }
]