[
    {
        "line": 9,
        "fullcodeline": "uint32_t width = p_header.image_width;"
    },
    {
        "line": 10,
        "fullcodeline": "uint32_t height = p_header.image_height;"
    },
    {
        "line": 11,
        "fullcodeline": "tga_origin_e origin = static_cast<tga_origin_e>((p_header.image_descriptor & TGA_ORIGIN_MASK) >> TGA_ORIGIN_SHIFT);"
    },
    {
        "line": 40,
        "fullcodeline": "Vector<uint8_t> image_data;"
    },
    {
        "line": 41,
        "fullcodeline": "image_data.resize(width * height * sizeof(uint32_t));"
    },
    {
        "line": 42,
        "fullcodeline": "uint8_t *image_data_w = image_data.ptrw();"
    },
    {
        "line": 44,
        "fullcodeline": "size_t i = 0;"
    },
    {
        "line": 45,
        "fullcodeline": "uint32_t x = x_start;"
    },
    {
        "line": 46,
        "fullcodeline": "uint32_t y = y_start;"
    },
    {
        "line": 20,
        "fullcodeline": "if (origin == TGA_ORIGIN_TOP_LEFT || origin == TGA_ORIGIN_TOP_RIGHT) {"
    },
    {
        "line": 30,
        "fullcodeline": "if (origin == TGA_ORIGIN_TOP_LEFT || origin == TGA_ORIGIN_BOTTOM_LEFT) {"
    },
    {
        "line": 48,
        "fullcodeline": "if (p_header.pixel_depth == 8) {"
    },
    {
        "line": 21,
        "fullcodeline": "y_start = 0;"
    },
    {
        "line": 22,
        "fullcodeline": "y_step = 1;"
    },
    {
        "line": 23,
        "fullcodeline": "y_end = height;"
    },
    {
        "line": 31,
        "fullcodeline": "x_start = 0;"
    },
    {
        "line": 32,
        "fullcodeline": "x_step = 1;"
    },
    {
        "line": 33,
        "fullcodeline": "x_end = width;"
    },
    {
        "line": 25,
        "fullcodeline": "y_start = height - 1;"
    },
    {
        "line": 26,
        "fullcodeline": "y_step = -1;"
    },
    {
        "line": 27,
        "fullcodeline": "y_end = -1;"
    },
    {
        "line": 35,
        "fullcodeline": "x_start = width - 1;"
    },
    {
        "line": 36,
        "fullcodeline": "x_step = -1;"
    },
    {
        "line": 37,
        "fullcodeline": "x_end = -1;"
    },
    {
        "line": 96,
        "fullcodeline": "} else if (p_header.pixel_depth == 24) {"
    },
    {
        "line": 50,
        "fullcodeline": "while (y != y_end) {"
    },
    {
        "line": 62,
        "fullcodeline": "x = x_start;"
    },
    {
        "line": 63,
        "fullcodeline": "y += y_step;"
    },
    {
        "line": 66,
        "fullcodeline": "while (y != y_end) {"
    },
    {
        "line": 97,
        "fullcodeline": "while (y != y_end) {"
    },
    {
        "line": 51,
        "fullcodeline": "while (x != x_end) {"
    },
    {
        "line": 92,
        "fullcodeline": "x = x_start;"
    },
    {
        "line": 93,
        "fullcodeline": "y += y_step;"
    },
    {
        "line": 112,
        "fullcodeline": "x = x_start;"
    },
    {
        "line": 113,
        "fullcodeline": "y += y_step;"
    },
    {
        "line": 55,
        "fullcodeline": "uint8_t shade = p_buffer[i];"
    },
    {
        "line": 57,
        "fullcodeline": "TGA_PUT_PIXEL(shade, shade, shade, 0xff)"
    },
    {
        "line": 59,
        "fullcodeline": "x += x_step;"
    },
    {
        "line": 60,
        "fullcodeline": "i += 1;"
    },
    {
        "line": 67,
        "fullcodeline": "while (x != x_end) {"
    },
    {
        "line": 98,
        "fullcodeline": "while (x != x_end) {"
    },
    {
        "line": 52,
        "fullcodeline": "if (i > p_output_size) {"
    },
    {
        "line": 71,
        "fullcodeline": "uint8_t index = p_buffer[i];"
    },
    {
        "line": 75,
        "fullcodeline": "uint8_t a = 0xff;"
    },
    {
        "line": 89,
        "fullcodeline": "x += x_step;"
    },
    {
        "line": 90,
        "fullcodeline": "i += 1;"
    },
    {
        "line": 103,
        "fullcodeline": "uint8_t r = p_buffer[i + 2];"
    },
    {
        "line": 104,
        "fullcodeline": "uint8_t g = p_buffer[i + 1];"
    },
    {
        "line": 105,
        "fullcodeline": "uint8_t b = p_buffer[i + 0];"
    },
    {
        "line": 109,
        "fullcodeline": "x += x_step;"
    },
    {
        "line": 110,
        "fullcodeline": "i += 3;"
    },
    {
        "line": 116,
        "fullcodeline": "while (y != y_end) {"
    },
    {
        "line": 68,
        "fullcodeline": "if (i > p_output_size) {"
    },
    {
        "line": 132,
        "fullcodeline": "x = x_start;"
    },
    {
        "line": 133,
        "fullcodeline": "y += y_step;"
    },
    {
        "line": 80,
        "fullcodeline": "r = (p_palette[(index * 3) + 2]);"
    },
    {
        "line": 81,
        "fullcodeline": "g = (p_palette[(index * 3) + 1]);"
    },
    {
        "line": 82,
        "fullcodeline": "b = (p_palette[(index * 3) + 0]);"
    },
    {
        "line": 107,
        "fullcodeline": "TGA_PUT_PIXEL(r, g, b, 0xff)"
    },
    {
        "line": 117,
        "fullcodeline": "while (x != x_end) {"
    },
    {
        "line": 87,
        "fullcodeline": "TGA_PUT_PIXEL(r, g, b, a)"
    },
    {
        "line": 122,
        "fullcodeline": "uint8_t a = p_buffer[i + 3];"
    },
    {
        "line": 123,
        "fullcodeline": "uint8_t r = p_buffer[i + 2];"
    },
    {
        "line": 124,
        "fullcodeline": "uint8_t g = p_buffer[i + 1];"
    },
    {
        "line": 125,
        "fullcodeline": "uint8_t b = p_buffer[i + 0];"
    },
    {
        "line": 129,
        "fullcodeline": "x += x_step;"
    },
    {
        "line": 130,
        "fullcodeline": "i += 4;"
    },
    {
        "line": 127,
        "fullcodeline": "TGA_PUT_PIXEL(r, g, b, a)"
    }
]