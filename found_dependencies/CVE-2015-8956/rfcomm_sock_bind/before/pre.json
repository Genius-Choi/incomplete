[
    {
        "line": 3,
        "fullcodeline": "struct sockaddr_rc *sa = (struct sockaddr_rc *) addr;"
    },
    {
        "line": 4,
        "fullcodeline": "struct sock *sk = sock->sk;"
    },
    {
        "line": 5,
        "fullcodeline": "int chan = sa->rc_channel;"
    },
    {
        "line": 6,
        "fullcodeline": "int err = 0;"
    },
    {
        "line": 8,
        "fullcodeline": "BT_DBG(\"sk %p %pMR\", sk, &sa->rc_bdaddr);"
    },
    {
        "line": 13,
        "fullcodeline": "lock_sock(sk);"
    },
    {
        "line": 25,
        "fullcodeline": "write_lock(&rfcomm_sk_list.lock);"
    },
    {
        "line": 10,
        "fullcodeline": "if (!addr || addr->sa_family != AF_BLUETOOTH)"
    },
    {
        "line": 15,
        "fullcodeline": "if (sk->sk_state != BT_OPEN) {"
    },
    {
        "line": 20,
        "fullcodeline": "if (sk->sk_type != SOCK_STREAM) {"
    },
    {
        "line": 27,
        "fullcodeline": "if (chan && __rfcomm_get_listen_sock_by_addr(chan, &sa->rc_bdaddr)) {"
    },
    {
        "line": 16,
        "fullcodeline": "err = -EBADFD;"
    },
    {
        "line": 21,
        "fullcodeline": "err = -EINVAL;"
    },
    {
        "line": 28,
        "fullcodeline": "err = -EADDRINUSE;"
    },
    {
        "line": 11,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 33,
        "fullcodeline": "sk->sk_state = BT_BOUND;"
    },
    {
        "line": 32,
        "fullcodeline": "rfcomm_pi(sk)->channel = chan;"
    },
    {
        "line": 31,
        "fullcodeline": "bacpy(&rfcomm_pi(sk)->src, &sa->rc_bdaddr);"
    }
]