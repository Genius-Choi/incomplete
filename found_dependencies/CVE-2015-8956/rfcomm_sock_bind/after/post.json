[
    {
        "line": 4,
        "fullcodeline": "struct sock *sk = sock->sk;"
    },
    {
        "line": 5,
        "fullcodeline": "int len, err = 0;"
    },
    {
        "line": 10,
        "fullcodeline": "memset(&sa, 0, sizeof(sa));"
    },
    {
        "line": 12,
        "fullcodeline": "memcpy(&sa, addr, len);"
    },
    {
        "line": 14,
        "fullcodeline": "BT_DBG(\"sk %p %pMR\", sk, &sa.rc_bdaddr);"
    },
    {
        "line": 16,
        "fullcodeline": "lock_sock(sk);"
    },
    {
        "line": 40,
        "fullcodeline": "write_unlock(&rfcomm_sk_list.lock);"
    },
    {
        "line": 43,
        "fullcodeline": "release_sock(sk);"
    },
    {
        "line": 7,
        "fullcodeline": "if (!addr || addr->sa_family != AF_BLUETOOTH)"
    },
    {
        "line": 18,
        "fullcodeline": "if (sk->sk_state != BT_OPEN) {"
    },
    {
        "line": 23,
        "fullcodeline": "if (sk->sk_type != SOCK_STREAM) {"
    },
    {
        "line": 30,
        "fullcodeline": "if (sa.rc_channel &&"
    },
    {
        "line": 19,
        "fullcodeline": "err = -EBADFD;"
    },
    {
        "line": 24,
        "fullcodeline": "err = -EINVAL;"
    },
    {
        "line": 31,
        "fullcodeline": "__rfcomm_get_listen_sock_by_addr(sa.rc_channel, &sa.rc_bdaddr)) {"
    },
    {
        "line": 32,
        "fullcodeline": "err = -EADDRINUSE;"
    },
    {
        "line": 8,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 35,
        "fullcodeline": "bacpy(&rfcomm_pi(sk)->src, &sa.rc_bdaddr);"
    },
    {
        "line": 36,
        "fullcodeline": "rfcomm_pi(sk)->channel = sa.rc_channel;"
    },
    {
        "line": 37,
        "fullcodeline": "sk->sk_state = BT_BOUND;"
    }
]