[
    {
        "line": 14,
        "fullcodeline": "int\t\tmustend = FALSE;"
    },
    {
        "line": 18,
        "fullcodeline": "int\t\tany_default = FALSE;"
    },
    {
        "line": 20,
        "fullcodeline": "char_u\t*whitep = *argp;"
    },
    {
        "line": 35,
        "fullcodeline": "arg = skipwhite(*argp);"
    },
    {
        "line": 36,
        "fullcodeline": "p = arg;"
    },
    {
        "line": 181,
        "fullcodeline": "++p;\t// skip \"endchar\""
    },
    {
        "line": 183,
        "fullcodeline": "*argp = p;"
    },
    {
        "line": 22,
        "fullcodeline": "if (newargs != NULL)"
    },
    {
        "line": 24,
        "fullcodeline": "if (argtypes != NULL)"
    },
    {
        "line": 26,
        "fullcodeline": "if (!skip && default_args != NULL)"
    },
    {
        "line": 29,
        "fullcodeline": "if (varargs != NULL)"
    },
    {
        "line": 37,
        "fullcodeline": "while (*p != endchar)"
    },
    {
        "line": 179,
        "fullcodeline": "if (*p != endchar)"
    },
    {
        "line": 187,
        "fullcodeline": "if (newargs != NULL)"
    },
    {
        "line": 23,
        "fullcodeline": "ga_init2(newargs, (int)sizeof(char_u *), 3);"
    },
    {
        "line": 25,
        "fullcodeline": "ga_init2(argtypes, (int)sizeof(char_u *), 3);"
    },
    {
        "line": 27,
        "fullcodeline": "ga_init2(default_args, (int)sizeof(char_u *), 3);"
    },
    {
        "line": 30,
        "fullcodeline": "*varargs = FALSE;"
    },
    {
        "line": 175,
        "fullcodeline": "whitep = p;"
    },
    {
        "line": 176,
        "fullcodeline": "p = skipwhite(p);"
    },
    {
        "line": 189,
        "fullcodeline": "if (!skip && default_args != NULL)"
    },
    {
        "line": 39,
        "fullcodeline": "while (eap != NULL && eap->getline != NULL"
    },
    {
        "line": 54,
        "fullcodeline": "if (mustend && *p != endchar)"
    },
    {
        "line": 60,
        "fullcodeline": "if (*p == endchar)"
    },
    {
        "line": 63,
        "fullcodeline": "if (p[0] == '.' && p[1] == '.' && p[2] == '.')"
    },
    {
        "line": 40,
        "fullcodeline": "&& (*p == NUL || (VIM_ISWHITE(*whitep) && *p == '#')))"
    },
    {
        "line": 45,
        "fullcodeline": "theline = eap->getline(':', eap->cookie, 0, TRUE);"
    },
    {
        "line": 48,
        "fullcodeline": "vim_free(*line_to_free);"
    },
    {
        "line": 49,
        "fullcodeline": "*line_to_free = theline;"
    },
    {
        "line": 50,
        "fullcodeline": "whitep = (char_u *)\" \";"
    },
    {
        "line": 51,
        "fullcodeline": "p = skipwhite(theline);"
    },
    {
        "line": 67,
        "fullcodeline": "p += 3;"
    },
    {
        "line": 68,
        "fullcodeline": "mustend = TRUE;"
    },
    {
        "line": 46,
        "fullcodeline": "if (theline == NULL)"
    },
    {
        "line": 56,
        "fullcodeline": "if (!skip)"
    },
    {
        "line": 65,
        "fullcodeline": "if (varargs != NULL)"
    },
    {
        "line": 70,
        "fullcodeline": "if (argtypes != NULL)"
    },
    {
        "line": 96,
        "fullcodeline": "arg = p;"
    },
    {
        "line": 97,
        "fullcodeline": "p = one_function_arg(p, newargs, argtypes, types_optional,"
    },
    {
        "line": 104,
        "fullcodeline": "np = skipwhite(p);"
    },
    {
        "line": 66,
        "fullcodeline": "*varargs = TRUE;"
    },
    {
        "line": 80,
        "fullcodeline": "arg = p;"
    },
    {
        "line": 81,
        "fullcodeline": "p = one_function_arg(p, newargs, argtypes, types_optional,"
    },
    {
        "line": 99,
        "fullcodeline": "if (p == arg)"
    },
    {
        "line": 105,
        "fullcodeline": "if (*np == '=' && np[1] != '=' && np[1] != '~'"
    },
    {
        "line": 149,
        "fullcodeline": "if (VIM_ISWHITE(*p) && *skipwhite(p) == ',')"
    },
    {
        "line": 159,
        "fullcodeline": "if (*p == ',')"
    },
    {
        "line": 57,
        "fullcodeline": "semsg(_(e_invarg2), *argp);"
    },
    {
        "line": 73,
        "fullcodeline": "if (!eval_isnamec1(*p))"
    },
    {
        "line": 83,
        "fullcodeline": "if (p == arg)"
    },
    {
        "line": 85,
        "fullcodeline": "if (*skipwhite(p) == '=')"
    },
    {
        "line": 106,
        "fullcodeline": "&& default_args != NULL)"
    },
    {
        "line": 111,
        "fullcodeline": "any_default = TRUE;"
    },
    {
        "line": 112,
        "fullcodeline": "p = skipwhite(p) + 1;"
    },
    {
        "line": 114,
        "fullcodeline": "p = skipwhite(p);"
    },
    {
        "line": 115,
        "fullcodeline": "expr = p;"
    },
    {
        "line": 157,
        "fullcodeline": "p = skipwhite(p);"
    },
    {
        "line": 161,
        "fullcodeline": "++p;"
    },
    {
        "line": 87,
        "fullcodeline": "emsg(_(e_cannot_use_default_for_variable_arguments));"
    },
    {
        "line": 116,
        "fullcodeline": "if (eval1(&p, &rettv, NULL) != FAIL)"
    },
    {
        "line": 152,
        "fullcodeline": "if (!skip)"
    },
    {
        "line": 165,
        "fullcodeline": "if (!skip && argtypes != NULL"
    },
    {
        "line": 173,
        "fullcodeline": "mustend = TRUE;"
    },
    {
        "line": 75,
        "fullcodeline": "if (!skip)"
    },
    {
        "line": 166,
        "fullcodeline": "&& !IS_WHITE_OR_NUL(*p) && *p != endchar)"
    },
    {
        "line": 118,
        "fullcodeline": "if (!skip)"
    },
    {
        "line": 141,
        "fullcodeline": "mustend = TRUE;"
    },
    {
        "line": 154,
        "fullcodeline": "semsg(_(e_no_white_space_allowed_before_str_str), \",\", p);"
    },
    {
        "line": 168,
        "fullcodeline": "semsg(_(e_white_space_required_after_str_str), \",\", p - 1);"
    },
    {
        "line": 76,
        "fullcodeline": "emsg(_(e_missing_name_after_dots));"
    },
    {
        "line": 126,
        "fullcodeline": "c = *p;"
    },
    {
        "line": 127,
        "fullcodeline": "*p = NUL;"
    },
    {
        "line": 128,
        "fullcodeline": "expr = vim_strsave(expr);"
    },
    {
        "line": 134,
        "fullcodeline": "((char_u **)(default_args->ga_data))"
    },
    {
        "line": 136,
        "fullcodeline": "default_args->ga_len++;"
    },
    {
        "line": 137,
        "fullcodeline": "*p = c;"
    },
    {
        "line": 145,
        "fullcodeline": "emsg(_(\"E989: Non-default argument follows default argument\"));"
    },
    {
        "line": 120,
        "fullcodeline": "if (ga_grow(default_args, 1) == FAIL)"
    },
    {
        "line": 124,
        "fullcodeline": "while (p > expr && VIM_ISWHITE(p[-1]))"
    },
    {
        "line": 125,
        "fullcodeline": "p--;"
    },
    {
        "line": 129,
        "fullcodeline": "if (expr == NULL)"
    }
]