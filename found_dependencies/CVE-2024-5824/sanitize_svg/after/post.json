[
    {
        "line": 3,
        "fullcodeline": "parser = ET.XMLParser(remove_comments=True, remove_pis=True)"
    },
    {
        "line": 4,
        "fullcodeline": "tree = ET.fromstring(svg_content, parser=parser)"
    },
    {
        "line": 19,
        "fullcodeline": "sanitized_svg = ET.tostring(tree, encoding='unicode', method='xml')"
    },
    {
        "line": 7,
        "fullcodeline": "for script in tree.xpath('//svg:script', namespaces={'svg': 'http://www.w3.org/2000/svg'}):"
    },
    {
        "line": 13,
        "fullcodeline": "for element in tree.xpath('//*[@*[starts-with(name(), \"on\")]]'):"
    },
    {
        "line": 22,
        "fullcodeline": "raise ValueError(\"Invalid SVG content\") from e"
    },
    {
        "line": 8,
        "fullcodeline": "parent = script.getparent()"
    },
    {
        "line": 9,
        "fullcodeline": "if parent is not None:"
    },
    {
        "line": 14,
        "fullcodeline": "for attr in list(element.attrib):"
    },
    {
        "line": 10,
        "fullcodeline": "parent.remove(script)"
    },
    {
        "line": 15,
        "fullcodeline": "if attr.startswith('on'):"
    }
]