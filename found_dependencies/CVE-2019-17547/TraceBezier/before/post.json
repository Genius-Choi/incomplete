[
    {
        "line": 31,
        "fullcodeline": "primitive_info=(*mvg_info->primitive_info)+mvg_info->offset;"
    },
    {
        "line": 32,
        "fullcodeline": "quantum=number_coordinates;"
    },
    {
        "line": 57,
        "fullcodeline": "quantum=MagickMin(quantum/number_coordinates,BezierQuantum);"
    },
    {
        "line": 58,
        "fullcodeline": "primitive_info=(*mvg_info->primitive_info)+mvg_info->offset;"
    },
    {
        "line": 59,
        "fullcodeline": "coefficients=(double *) AcquireQuantumMemory(number_coordinates,"
    },
    {
        "line": 61,
        "fullcodeline": "points=(PointInfo *) AcquireQuantumMemory(quantum,number_coordinates*"
    },
    {
        "line": 73,
        "fullcodeline": "control_points=quantum*number_coordinates;"
    },
    {
        "line": 86,
        "fullcodeline": "weight=0.0;"
    },
    {
        "line": 106,
        "fullcodeline": "p=primitive_info;"
    },
    {
        "line": 123,
        "fullcodeline": "p+=p->coordinates;"
    },
    {
        "line": 124,
        "fullcodeline": "primitive_info->coordinates=(size_t) (p-primitive_info);"
    },
    {
        "line": 125,
        "fullcodeline": "primitive_info->closed_subpath=MagickFalse;"
    },
    {
        "line": 131,
        "fullcodeline": "points=(PointInfo *) RelinquishMagickMemory(points);"
    },
    {
        "line": 132,
        "fullcodeline": "coefficients=(double *) RelinquishMagickMemory(coefficients);"
    },
    {
        "line": 33,
        "fullcodeline": "for (i=0; i < (ssize_t) number_coordinates; i++)"
    },
    {
        "line": 63,
        "fullcodeline": "if ((coefficients == (double *) NULL) || (points == (PointInfo *) NULL))"
    },
    {
        "line": 74,
        "fullcodeline": "if (CheckPrimitiveExtent(mvg_info,control_points+1) == MagickFalse)"
    },
    {
        "line": 84,
        "fullcodeline": "for (i=0; i < (ssize_t) number_coordinates; i++)"
    },
    {
        "line": 85,
        "fullcodeline": "coefficients[i]=Permutate((ssize_t) number_coordinates-1,i);"
    },
    {
        "line": 87,
        "fullcodeline": "for (i=0; i < (ssize_t) control_points; i++)"
    },
    {
        "line": 107,
        "fullcodeline": "for (i=0; i < (ssize_t) control_points; i++)"
    },
    {
        "line": 117,
        "fullcodeline": "if (TracePoint(p,end) == MagickFalse)"
    },
    {
        "line": 126,
        "fullcodeline": "for (i=0; i < (ssize_t) primitive_info->coordinates; i++)"
    },
    {
        "line": 69,
        "fullcodeline": "(void) ThrowMagickException(mvg_info->exception,GetMagickModule(),"
    },
    {
        "line": 76,
        "fullcodeline": "points=(PointInfo *) RelinquishMagickMemory(points);"
    },
    {
        "line": 77,
        "fullcodeline": "coefficients=(double *) RelinquishMagickMemory(coefficients);"
    },
    {
        "line": 89,
        "fullcodeline": "p=primitive_info;"
    },
    {
        "line": 90,
        "fullcodeline": "point.x=0.0;"
    },
    {
        "line": 91,
        "fullcodeline": "point.y=0.0;"
    },
    {
        "line": 92,
        "fullcodeline": "alpha=pow((double) (1.0-weight),(double) number_coordinates-1.0);"
    },
    {
        "line": 100,
        "fullcodeline": "points[i]=point;"
    },
    {
        "line": 101,
        "fullcodeline": "weight+=1.0/control_points;"
    },
    {
        "line": 115,
        "fullcodeline": "p+=p->coordinates;"
    },
    {
        "line": 119,
        "fullcodeline": "points=(PointInfo *) RelinquishMagickMemory(points);"
    },
    {
        "line": 120,
        "fullcodeline": "coefficients=(double *) RelinquishMagickMemory(coefficients);"
    },
    {
        "line": 128,
        "fullcodeline": "p->primitive=primitive_info->primitive;"
    },
    {
        "line": 129,
        "fullcodeline": "p--;"
    },
    {
        "line": 35,
        "fullcodeline": "for (j=i+1; j < (ssize_t) number_coordinates; j++)"
    },
    {
        "line": 65,
        "fullcodeline": "if (points != (PointInfo *) NULL)"
    },
    {
        "line": 67,
        "fullcodeline": "if (coefficients != (double *) NULL)"
    },
    {
        "line": 83,
        "fullcodeline": "end=primitive_info[number_coordinates-1].point;"
    },
    {
        "line": 93,
        "fullcodeline": "for (j=0; j < (ssize_t) number_coordinates; j++)"
    },
    {
        "line": 109,
        "fullcodeline": "if (TracePoint(p,points[i]) == MagickFalse)"
    },
    {
        "line": 37,
        "fullcodeline": "alpha=fabs(primitive_info[j].point.x-primitive_info[i].point.x);"
    },
    {
        "line": 46,
        "fullcodeline": "alpha=fabs(primitive_info[j].point.y-primitive_info[i].point.y);"
    },
    {
        "line": 66,
        "fullcodeline": "points=(PointInfo *) RelinquishMagickMemory(points);"
    },
    {
        "line": 68,
        "fullcodeline": "coefficients=(double *) RelinquishMagickMemory(coefficients);"
    },
    {
        "line": 95,
        "fullcodeline": "point.x+=alpha*coefficients[j]*p->point.x;"
    },
    {
        "line": 96,
        "fullcodeline": "point.y+=alpha*coefficients[j]*p->point.y;"
    },
    {
        "line": 97,
        "fullcodeline": "alpha*=weight/(1.0-weight);"
    },
    {
        "line": 98,
        "fullcodeline": "p++;"
    },
    {
        "line": 111,
        "fullcodeline": "points=(PointInfo *) RelinquishMagickMemory(points);"
    },
    {
        "line": 112,
        "fullcodeline": "coefficients=(double *) RelinquishMagickMemory(coefficients);"
    },
    {
        "line": 38,
        "fullcodeline": "if (alpha > (double) SSIZE_MAX)"
    },
    {
        "line": 44,
        "fullcodeline": "if (alpha > (double) quantum)"
    },
    {
        "line": 47,
        "fullcodeline": "if (alpha > (double) SSIZE_MAX)"
    },
    {
        "line": 53,
        "fullcodeline": "if (alpha > (double) quantum)"
    },
    {
        "line": 40,
        "fullcodeline": "(void) ThrowMagickException(mvg_info->exception,GetMagickModule(),"
    },
    {
        "line": 45,
        "fullcodeline": "quantum=(size_t) alpha;"
    },
    {
        "line": 49,
        "fullcodeline": "(void) ThrowMagickException(mvg_info->exception,GetMagickModule(),"
    },
    {
        "line": 54,
        "fullcodeline": "quantum=(size_t) alpha;"
    }
]