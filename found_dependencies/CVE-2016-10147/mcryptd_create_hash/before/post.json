[
    {
        "line": 8,
        "fullcodeline": "u32 type = 0;"
    },
    {
        "line": 9,
        "fullcodeline": "u32 mask = 0;"
    },
    {
        "line": 12,
        "fullcodeline": "mcryptd_check_internal(tb, &type, &mask);"
    },
    {
        "line": 14,
        "fullcodeline": "halg = ahash_attr_alg(tb[1], type, mask);"
    },
    {
        "line": 18,
        "fullcodeline": "alg = &halg->base;"
    },
    {
        "line": 19,
        "fullcodeline": "pr_debug(\"crypto: mcryptd hash alg: %s\\n\", alg->cra_name);"
    },
    {
        "line": 20,
        "fullcodeline": "inst = mcryptd_alloc_instance(alg, ahash_instance_headroom(),"
    },
    {
        "line": 22,
        "fullcodeline": "err = PTR_ERR(inst);"
    },
    {
        "line": 26,
        "fullcodeline": "ctx = ahash_instance_ctx(inst);"
    },
    {
        "line": 27,
        "fullcodeline": "ctx->queue = queue;"
    },
    {
        "line": 29,
        "fullcodeline": "err = crypto_init_ahash_spawn(&ctx->spawn, halg,"
    },
    {
        "line": 34,
        "fullcodeline": "type = CRYPTO_ALG_ASYNC;"
    },
    {
        "line": 37,
        "fullcodeline": "inst->alg.halg.base.cra_flags = type;"
    },
    {
        "line": 39,
        "fullcodeline": "inst->alg.halg.digestsize = halg->digestsize;"
    },
    {
        "line": 40,
        "fullcodeline": "inst->alg.halg.statesize = halg->statesize;"
    },
    {
        "line": 43,
        "fullcodeline": "inst->alg.halg.base.cra_init = mcryptd_hash_init_tfm;"
    },
    {
        "line": 44,
        "fullcodeline": "inst->alg.halg.base.cra_exit = mcryptd_hash_exit_tfm;"
    },
    {
        "line": 46,
        "fullcodeline": "inst->alg.init   = mcryptd_hash_init_enqueue;"
    },
    {
        "line": 47,
        "fullcodeline": "inst->alg.update = mcryptd_hash_update_enqueue;"
    },
    {
        "line": 48,
        "fullcodeline": "inst->alg.final  = mcryptd_hash_final_enqueue;"
    },
    {
        "line": 49,
        "fullcodeline": "inst->alg.finup  = mcryptd_hash_finup_enqueue;"
    },
    {
        "line": 50,
        "fullcodeline": "inst->alg.export = mcryptd_hash_export;"
    },
    {
        "line": 51,
        "fullcodeline": "inst->alg.import = mcryptd_hash_import;"
    },
    {
        "line": 52,
        "fullcodeline": "inst->alg.setkey = mcryptd_hash_setkey;"
    },
    {
        "line": 53,
        "fullcodeline": "inst->alg.digest = mcryptd_hash_digest_enqueue;"
    },
    {
        "line": 55,
        "fullcodeline": "err = ahash_register_instance(tmpl, inst);"
    },
    {
        "line": 63,
        "fullcodeline": "crypto_mod_put(alg);"
    },
    {
        "line": 15,
        "fullcodeline": "if (IS_ERR(halg))"
    },
    {
        "line": 23,
        "fullcodeline": "if (IS_ERR(inst))"
    },
    {
        "line": 35,
        "fullcodeline": "if (alg->cra_flags & CRYPTO_ALG_INTERNAL)"
    },
    {
        "line": 30,
        "fullcodeline": "ahash_crypto_instance(inst));"
    },
    {
        "line": 36,
        "fullcodeline": "type |= CRYPTO_ALG_INTERNAL;"
    },
    {
        "line": 57,
        "fullcodeline": "crypto_drop_ahash(&ctx->spawn);"
    },
    {
        "line": 59,
        "fullcodeline": "kfree(inst);"
    },
    {
        "line": 16,
        "fullcodeline": "return PTR_ERR(halg);"
    }
]