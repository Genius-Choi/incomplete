[
    {
        "line": 3,
        "fullcodeline": "while ((curr = *p) != NULL) {"
    },
    {
        "line": 34,
        "fullcodeline": "default: lua_assert(0);  /* nothing more could be gray here */"
    },
    {
        "line": 6,
        "fullcodeline": "GCObject **next = getgclist(curr);"
    },
    {
        "line": 26,
        "fullcodeline": "lua_State *th = gco2th(curr);"
    },
    {
        "line": 27,
        "fullcodeline": "lua_assert(!isblack(th));"
    },
    {
        "line": 7,
        "fullcodeline": "if (getage(curr) == G_TOUCHED1) {  /* touched in this cycle? */"
    },
    {
        "line": 28,
        "fullcodeline": "if (iswhite(th))  /* new object? */"
    },
    {
        "line": 8,
        "fullcodeline": "lua_assert(isgray(curr));"
    },
    {
        "line": 9,
        "fullcodeline": "gray2black(curr);  /* make it black, for next barrier */"
    },
    {
        "line": 10,
        "fullcodeline": "changeage(curr, G_TOUCHED1, G_TOUCHED2);"
    },
    {
        "line": 11,
        "fullcodeline": "p = next;  /* go to next element */"
    },
    {
        "line": 29,
        "fullcodeline": "*p = th->gclist;  /* remove from gray list */"
    },
    {
        "line": 31,
        "fullcodeline": "p = &th->gclist;  /* go to next element */"
    },
    {
        "line": 14,
        "fullcodeline": "if (!iswhite(curr)) {  /* not white? */"
    },
    {
        "line": 15,
        "fullcodeline": "lua_assert(isold(curr));"
    },
    {
        "line": 18,
        "fullcodeline": "gray2black(curr);  /* make it black */"
    },
    {
        "line": 16,
        "fullcodeline": "if (getage(curr) == G_TOUCHED2)  /* advance from G_TOUCHED2... */"
    },
    {
        "line": 17,
        "fullcodeline": "changeage(curr, G_TOUCHED2, G_OLD);  /* ... to G_OLD */"
    }
]