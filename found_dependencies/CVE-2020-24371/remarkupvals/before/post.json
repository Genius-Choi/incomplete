[
    {
        "line": 3,
        "fullcodeline": "lua_State **p = &g->twups;"
    },
    {
        "line": 4,
        "fullcodeline": "int work = 0;"
    },
    {
        "line": 5,
        "fullcodeline": "while ((thread = *p) != NULL) {"
    },
    {
        "line": 6,
        "fullcodeline": "work++;"
    },
    {
        "line": 7,
        "fullcodeline": "lua_assert(!isblack(thread));  /* threads are never black */"
    },
    {
        "line": 8,
        "fullcodeline": "if (isgray(thread) && thread->openupval != NULL)"
    },
    {
        "line": 9,
        "fullcodeline": "p = &thread->twups;  /* keep marked thread with upvalues in the list */"
    },
    {
        "line": 12,
        "fullcodeline": "*p = thread->twups;  /* remove thread from the list */"
    },
    {
        "line": 13,
        "fullcodeline": "thread->twups = thread;  /* mark that it is out of list */"
    },
    {
        "line": 14,
        "fullcodeline": "for (uv = thread->openupval; uv != NULL; uv = uv->u.open.next) {"
    },
    {
        "line": 15,
        "fullcodeline": "work++;"
    },
    {
        "line": 16,
        "fullcodeline": "if (!iswhite(uv))  /* upvalue already visited? */"
    },
    {
        "line": 17,
        "fullcodeline": "markvalue(g, uv->v);  /* mark its value */"
    }
]