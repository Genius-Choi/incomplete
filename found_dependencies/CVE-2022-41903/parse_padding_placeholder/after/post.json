[
    {
        "line": 4,
        "fullcodeline": "const char *ch = placeholder;"
    },
    {
        "line": 6,
        "fullcodeline": "int to_column = 0;"
    },
    {
        "line": 27,
        "fullcodeline": "if (*ch == '|') {"
    },
    {
        "line": 32,
        "fullcodeline": "if (*ch == '(') {"
    },
    {
        "line": 8,
        "fullcodeline": "switch (*ch++) {"
    },
    {
        "line": 10,
        "fullcodeline": "flush_type = flush_right;"
    },
    {
        "line": 28,
        "fullcodeline": "to_column = 1;"
    },
    {
        "line": 29,
        "fullcodeline": "ch++;"
    },
    {
        "line": 33,
        "fullcodeline": "const char *start = ch + 1;"
    },
    {
        "line": 34,
        "fullcodeline": "const char *end = start + strcspn(start, \",)\");"
    },
    {
        "line": 39,
        "fullcodeline": "width = strtol(start, &next, 10);"
    },
    {
        "line": 57,
        "fullcodeline": "c->padding = to_column ? -width : width;"
    },
    {
        "line": 58,
        "fullcodeline": "c->flush_type = flush_type;"
    },
    {
        "line": 13,
        "fullcodeline": "if (*ch == '<') {"
    },
    {
        "line": 37,
        "fullcodeline": "if (!*end || end == start)"
    },
    {
        "line": 46,
        "fullcodeline": "if (width < -FORMATTING_LIMIT || width > FORMATTING_LIMIT)"
    },
    {
        "line": 49,
        "fullcodeline": "if (next == start || width == 0)"
    },
    {
        "line": 51,
        "fullcodeline": "if (width < 0) {"
    },
    {
        "line": 60,
        "fullcodeline": "if (*end == ',') {"
    },
    {
        "line": 76,
        "fullcodeline": "return end - placeholder + 1;"
    },
    {
        "line": 14,
        "fullcodeline": "flush_type = flush_both;"
    },
    {
        "line": 15,
        "fullcodeline": "ch++;"
    },
    {
        "line": 61,
        "fullcodeline": "start = end + 1;"
    },
    {
        "line": 62,
        "fullcodeline": "end = strchr(start, ')');"
    },
    {
        "line": 54,
        "fullcodeline": "if (width < 0)"
    },
    {
        "line": 63,
        "fullcodeline": "if (!end || end == start)"
    },
    {
        "line": 65,
        "fullcodeline": "if (starts_with(start, \"trunc)\"))"
    },
    {
        "line": 74,
        "fullcodeline": "c->truncate = trunc_none;"
    },
    {
        "line": 16,
        "fullcodeline": "} else if (*ch == '>') {"
    },
    {
        "line": 53,
        "fullcodeline": "width += term_columns();"
    },
    {
        "line": 66,
        "fullcodeline": "c->truncate = trunc_right;"
    },
    {
        "line": 17,
        "fullcodeline": "flush_type = flush_left_and_steal;"
    },
    {
        "line": 18,
        "fullcodeline": "ch++;"
    },
    {
        "line": 20,
        "fullcodeline": "flush_type = flush_left;"
    },
    {
        "line": 67,
        "fullcodeline": "else if (starts_with(start, \"ltrunc)\"))"
    },
    {
        "line": 68,
        "fullcodeline": "c->truncate = trunc_left;"
    },
    {
        "line": 69,
        "fullcodeline": "else if (starts_with(start, \"mtrunc)\"))"
    },
    {
        "line": 70,
        "fullcodeline": "c->truncate = trunc_middle;"
    }
]