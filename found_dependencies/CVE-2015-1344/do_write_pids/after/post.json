[
    {
        "line": 4,
        "fullcodeline": "int sock[2] = {-1, -1};"
    },
    {
        "line": 5,
        "fullcodeline": "pid_t qpid, cpid = -1;"
    },
    {
        "line": 6,
        "fullcodeline": "FILE *pids_file = NULL;"
    },
    {
        "line": 7,
        "fullcodeline": "bool answer = false, fail = false;"
    },
    {
        "line": 9,
        "fullcodeline": "pids_file = open_pids_file(contrl, cg);"
    },
    {
        "line": 22,
        "fullcodeline": "cpid = fork();"
    },
    {
        "line": 31,
        "fullcodeline": "const char *ptr = buf;"
    },
    {
        "line": 60,
        "fullcodeline": "qpid = -1;"
    },
    {
        "line": 10,
        "fullcodeline": "if (!pids_file)"
    },
    {
        "line": 17,
        "fullcodeline": "if (socketpair(AF_UNIX, SOCK_DGRAM, 0, sock) < 0) {"
    },
    {
        "line": 23,
        "fullcodeline": "if (cpid == -1)"
    },
    {
        "line": 26,
        "fullcodeline": "if (!cpid) { // child"
    },
    {
        "line": 32,
        "fullcodeline": "while (sscanf(ptr, \"%d\", &qpid) == 1) {"
    },
    {
        "line": 61,
        "fullcodeline": "if (write(sock[0], &qpid ,sizeof(qpid)) != sizeof(qpid))"
    },
    {
        "line": 64,
        "fullcodeline": "if (!fail)"
    },
    {
        "line": 68,
        "fullcodeline": "if (cpid != -1)"
    },
    {
        "line": 70,
        "fullcodeline": "if (sock[0] != -1) {"
    },
    {
        "line": 18,
        "fullcodeline": "perror(\"socketpair\");"
    },
    {
        "line": 27,
        "fullcodeline": "fclose(pids_file);"
    },
    {
        "line": 28,
        "fullcodeline": "pid_from_ns_wrapper(sock[1], tpid);"
    },
    {
        "line": 53,
        "fullcodeline": "ptr = strchr(ptr, '\\n');"
    },
    {
        "line": 56,
        "fullcodeline": "ptr++;"
    },
    {
        "line": 62,
        "fullcodeline": "fprintf(stderr, \"Warning: failed to ask child to exit\\n\");"
    },
    {
        "line": 65,
        "fullcodeline": "answer = true;"
    },
    {
        "line": 69,
        "fullcodeline": "wait_for_pid(cpid);"
    },
    {
        "line": 71,
        "fullcodeline": "close(sock[0]);"
    },
    {
        "line": 72,
        "fullcodeline": "close(sock[1]);"
    },
    {
        "line": 36,
        "fullcodeline": "if (write(sock[0], &qpid, sizeof(qpid)) != sizeof(qpid)) {"
    },
    {
        "line": 42,
        "fullcodeline": "if (recv_creds(sock[0], &cred, &v)) {"
    },
    {
        "line": 54,
        "fullcodeline": "if (!ptr)"
    },
    {
        "line": 75,
        "fullcodeline": "if (fclose(pids_file) != 0)"
    },
    {
        "line": 37,
        "fullcodeline": "fprintf(stderr, \"%s: error writing pid to child: %s\\n\","
    },
    {
        "line": 76,
        "fullcodeline": "answer = false;"
    },
    {
        "line": 38,
        "fullcodeline": "__func__, strerror(errno));"
    },
    {
        "line": 43,
        "fullcodeline": "if (v == '0') {"
    },
    {
        "line": 44,
        "fullcodeline": "if (!may_move_pid(tpid, tuid, cred.pid)) {"
    },
    {
        "line": 48,
        "fullcodeline": "if (fprintf(pids_file, \"%d\", (int) cred.pid) < 0)"
    },
    {
        "line": 45,
        "fullcodeline": "fail = true;"
    },
    {
        "line": 49,
        "fullcodeline": "fail = true;"
    }
]