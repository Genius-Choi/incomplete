[
    {
        "line": 7,
        "fullcodeline": "const int dc_w = td->xsize >> 3;"
    },
    {
        "line": 8,
        "fullcodeline": "const int dc_h = td->ysize >> 3;"
    },
    {
        "line": 15,
        "fullcodeline": "version = AV_RL64(src + 0);"
    },
    {
        "line": 19,
        "fullcodeline": "lo_usize = AV_RL64(src + 8);"
    },
    {
        "line": 20,
        "fullcodeline": "lo_size = AV_RL64(src + 16);"
    },
    {
        "line": 21,
        "fullcodeline": "ac_size = AV_RL64(src + 24);"
    },
    {
        "line": 22,
        "fullcodeline": "dc_size = AV_RL64(src + 32);"
    },
    {
        "line": 23,
        "fullcodeline": "rle_csize = AV_RL64(src + 40);"
    },
    {
        "line": 24,
        "fullcodeline": "rle_usize = AV_RL64(src + 48);"
    },
    {
        "line": 25,
        "fullcodeline": "rle_raw_size = AV_RL64(src + 56);"
    },
    {
        "line": 26,
        "fullcodeline": "ac_count = AV_RL64(src + 64);"
    },
    {
        "line": 27,
        "fullcodeline": "dc_count = AV_RL64(src + 72);"
    },
    {
        "line": 28,
        "fullcodeline": "ac_compression = AV_RL64(src + 80);"
    },
    {
        "line": 33,
        "fullcodeline": "bytestream2_init(&gb, src + 88, compressed_size - 88);"
    },
    {
        "line": 34,
        "fullcodeline": "skip = bytestream2_get_le16(&gb);"
    },
    {
        "line": 38,
        "fullcodeline": "bytestream2_skip(&gb, skip - 2);"
    },
    {
        "line": 117,
        "fullcodeline": "bytestream2_init(&agb, td->ac_data, ac_count * 2);"
    },
    {
        "line": 12,
        "fullcodeline": "if (compressed_size <= 88)"
    },
    {
        "line": 16,
        "fullcodeline": "if (version != 2)"
    },
    {
        "line": 30,
        "fullcodeline": "if (compressed_size < 88LL + lo_size + ac_size + dc_size + rle_csize)"
    },
    {
        "line": 35,
        "fullcodeline": "if (skip < 2)"
    },
    {
        "line": 40,
        "fullcodeline": "if (lo_size > 0) {"
    },
    {
        "line": 46,
        "fullcodeline": "if (ac_size > 0) {"
    },
    {
        "line": 76,
        "fullcodeline": "unsigned long dest_len = dc_count * 2LL;"
    },
    {
        "line": 77,
        "fullcodeline": "GetByteContext agb = gb;"
    },
    {
        "line": 82,
        "fullcodeline": "av_fast_padded_malloc(&td->dc_data, &td->dc_size, FFALIGN(dest_len, 64) * 2);"
    },
    {
        "line": 90,
        "fullcodeline": "s->dsp.predictor(td->dc_data + FFALIGN(dest_len, 64), dest_len);"
    },
    {
        "line": 91,
        "fullcodeline": "s->dsp.reorder_pixels(td->dc_data, td->dc_data + FFALIGN(dest_len, 64), dest_len);"
    },
    {
        "line": 93,
        "fullcodeline": "bytestream2_skip(&gb, dc_size);"
    },
    {
        "line": 96,
        "fullcodeline": "if (rle_raw_size > 0 && rle_csize > 0 && rle_usize > 0) {"
    },
    {
        "line": 119,
        "fullcodeline": "for (int y = 0; y < td->ysize; y += 8) {"
    },
    {
        "line": 169,
        "fullcodeline": "if (s->nb_channels < 4)"
    },
    {
        "line": 172,
        "fullcodeline": "for (int y = 0; y < td->ysize && td->rle_raw_data; y++) {"
    },
    {
        "line": 43,
        "fullcodeline": "bytestream2_skip(&gb, lo_size);"
    },
    {
        "line": 47,
        "fullcodeline": "unsigned long dest_len = ac_count * 2LL;"
    },
    {
        "line": 48,
        "fullcodeline": "GetByteContext agb = gb;"
    },
    {
        "line": 53,
        "fullcodeline": "av_fast_padded_malloc(&td->ac_data, &td->ac_size, dest_len);"
    },
    {
        "line": 72,
        "fullcodeline": "bytestream2_skip(&gb, ac_size);"
    },
    {
        "line": 79,
        "fullcodeline": "if (dc_count != dc_w * dc_h * 3)"
    },
    {
        "line": 83,
        "fullcodeline": "if (!td->dc_data)"
    },
    {
        "line": 86,
        "fullcodeline": "if (uncompress(td->dc_data + FFALIGN(dest_len, 64), &dest_len, agb.buffer, dc_size) != Z_OK ||"
    },
    {
        "line": 97,
        "fullcodeline": "unsigned long dest_len = rle_usize;"
    },
    {
        "line": 99,
        "fullcodeline": "av_fast_padded_malloc(&td->rle_data, &td->rle_size, rle_usize);"
    },
    {
        "line": 103,
        "fullcodeline": "av_fast_padded_malloc(&td->rle_raw_data, &td->rle_raw_size, rle_raw_size);"
    },
    {
        "line": 111,
        "fullcodeline": "ret = rle(td->rle_raw_data, td->rle_data, rle_usize, rle_raw_size);"
    },
    {
        "line": 114,
        "fullcodeline": "bytestream2_skip(&gb, rle_csize);"
    },
    {
        "line": 173,
        "fullcodeline": "uint32_t *ao = ((uint32_t *)td->uncompressed_data) + y * td->xsize * s->nb_channels;"
    },
    {
        "line": 174,
        "fullcodeline": "uint8_t *ai0 = td->rle_raw_data + y * td->xsize;"
    },
    {
        "line": 175,
        "fullcodeline": "uint8_t *ai1 = td->rle_raw_data + y * td->xsize + rle_raw_size / 2;"
    },
    {
        "line": 41,
        "fullcodeline": "if (lo_usize > uncompressed_size)"
    },
    {
        "line": 50,
        "fullcodeline": "if (ac_count > 3LL * td->xsize * s->scan_lines_per_block)"
    },
    {
        "line": 54,
        "fullcodeline": "if (!td->ac_data)"
    },
    {
        "line": 87,
        "fullcodeline": "(dest_len != dc_count * 2LL))"
    },
    {
        "line": 100,
        "fullcodeline": "if (!td->rle_data)"
    },
    {
        "line": 104,
        "fullcodeline": "if (!td->rle_raw_data)"
    },
    {
        "line": 107,
        "fullcodeline": "if (uncompress(td->rle_data, &dest_len, gb.buffer, rle_csize) != Z_OK ||"
    },
    {
        "line": 112,
        "fullcodeline": "if (ret < 0)"
    },
    {
        "line": 120,
        "fullcodeline": "for (int x = 0; x < td->xsize; x += 8) {"
    },
    {
        "line": 177,
        "fullcodeline": "for (int x = 0; x < td->xsize; x++) {"
    },
    {
        "line": 59,
        "fullcodeline": "ret = huf_uncompress(s, td, &agb, (int16_t *)td->ac_data, ac_count);"
    },
    {
        "line": 84,
        "fullcodeline": "return AVERROR(ENOMEM);"
    },
    {
        "line": 108,
        "fullcodeline": "(dest_len != rle_usize))"
    },
    {
        "line": 121,
        "fullcodeline": "memset(td->block, 0, sizeof(td->block));"
    },
    {
        "line": 178,
        "fullcodeline": "uint16_t ha = ai0[x] | (ai1[x] << 8);"
    },
    {
        "line": 180,
        "fullcodeline": "ao[x] = half2float(ha, s->mantissatable, s->exponenttable, s->offsettable);"
    },
    {
        "line": 55,
        "fullcodeline": "return AVERROR(ENOMEM);"
    },
    {
        "line": 60,
        "fullcodeline": "if (ret < 0)"
    },
    {
        "line": 64,
        "fullcodeline": "if (uncompress(td->ac_data, &dest_len, agb.buffer, ac_size) != Z_OK ||"
    },
    {
        "line": 101,
        "fullcodeline": "return AVERROR(ENOMEM);"
    },
    {
        "line": 105,
        "fullcodeline": "return AVERROR(ENOMEM);"
    },
    {
        "line": 123,
        "fullcodeline": "for (int j = 0; j < 3; j++) {"
    },
    {
        "line": 138,
        "fullcodeline": "const float scale = s->pixel_type == EXR_FLOAT ? 2.f : 1.f;"
    },
    {
        "line": 139,
        "fullcodeline": "const int o = s->nb_channels == 4;"
    },
    {
        "line": 140,
        "fullcodeline": "float *bo = ((float *)td->uncompressed_data) +"
    },
    {
        "line": 142,
        "fullcodeline": "float *go = ((float *)td->uncompressed_data) +"
    },
    {
        "line": 144,
        "fullcodeline": "float *ro = ((float *)td->uncompressed_data) +"
    },
    {
        "line": 65,
        "fullcodeline": "dest_len != ac_count * 2LL)"
    },
    {
        "line": 125,
        "fullcodeline": "const int idx = (x >> 3) + (y >> 3) * dc_w + dc_w * dc_h * j;"
    },
    {
        "line": 126,
        "fullcodeline": "uint16_t *dc = (uint16_t *)td->dc_data;"
    },
    {
        "line": 129,
        "fullcodeline": "dc_val.i = half2float(dc[idx], s->mantissatable,"
    },
    {
        "line": 133,
        "fullcodeline": "ac_uncompress(s, &agb, block);"
    },
    {
        "line": 134,
        "fullcodeline": "dct_inverse(block);"
    },
    {
        "line": 150,
        "fullcodeline": "for (int yy = 0; yy < 8; yy++) {"
    },
    {
        "line": 161,
        "fullcodeline": "bo += td->xsize * s->nb_channels;"
    },
    {
        "line": 162,
        "fullcodeline": "go += td->xsize * s->nb_channels;"
    },
    {
        "line": 163,
        "fullcodeline": "ro += td->xsize * s->nb_channels;"
    },
    {
        "line": 141,
        "fullcodeline": "y * td->xsize * s->nb_channels + td->xsize * (o + 0) + x;"
    },
    {
        "line": 143,
        "fullcodeline": "y * td->xsize * s->nb_channels + td->xsize * (o + 1) + x;"
    },
    {
        "line": 145,
        "fullcodeline": "y * td->xsize * s->nb_channels + td->xsize * (o + 2) + x;"
    },
    {
        "line": 151,
        "fullcodeline": "for (int xx = 0; xx < 8; xx++) {"
    },
    {
        "line": 152,
        "fullcodeline": "const int idx = xx + yy * 8;"
    },
    {
        "line": 154,
        "fullcodeline": "convert(yb[idx], ub[idx], vb[idx], &bo[xx], &go[xx], &ro[xx]);"
    },
    {
        "line": 156,
        "fullcodeline": "bo[xx] = to_linear(bo[xx], scale);"
    },
    {
        "line": 157,
        "fullcodeline": "go[xx] = to_linear(go[xx], scale);"
    },
    {
        "line": 158,
        "fullcodeline": "ro[xx] = to_linear(ro[xx], scale);"
    }
]