[
    {
        "line": 13,
        "fullcodeline": "user_agent_string = request.user_agent.string"
    },
    {
        "line": 14,
        "fullcodeline": "user_agent_obj = user_agents.parse(user_agent_string)"
    },
    {
        "line": 15,
        "fullcodeline": "browser_ok = True"
    },
    {
        "line": 16,
        "fullcodeline": "browser_exclude_rule = CONFIG.get('Task Parameters', 'browser_exclude_rule')"
    },
    {
        "line": 40,
        "fullcodeline": "hit_id = request.args['hitId']"
    },
    {
        "line": 41,
        "fullcodeline": "assignment_id = request.args['assignmentId']"
    },
    {
        "line": 42,
        "fullcodeline": "mode = request.args['mode']"
    },
    {
        "line": 47,
        "fullcodeline": "already_in_db = False"
    },
    {
        "line": 70,
        "fullcodeline": "allow_repeats = CONFIG.getboolean('Task Parameters', 'allow_repeats')"
    },
    {
        "line": 17,
        "fullcodeline": "for rule in browser_exclude_rule.split(','):"
    },
    {
        "line": 34,
        "fullcodeline": "if not browser_ok:"
    },
    {
        "line": 38,
        "fullcodeline": "if not ('hitId' in request.args and 'assignmentId' in request.args):"
    },
    {
        "line": 43,
        "fullcodeline": "if hit_id[:5] == \"debug\":"
    },
    {
        "line": 48,
        "fullcodeline": "if 'workerId' in request.args:"
    },
    {
        "line": 71,
        "fullcodeline": "if (status == STARTED or status == QUITEARLY) and not debug_mode:"
    },
    {
        "line": 36,
        "fullcodeline": "raise ExperimentError('browser_type_not_allowed')"
    },
    {
        "line": 39,
        "fullcodeline": "raise ExperimentError('hit_assign_worker_id_not_set_in_mturk')"
    },
    {
        "line": 44,
        "fullcodeline": "debug_mode = True"
    },
    {
        "line": 46,
        "fullcodeline": "debug_mode = False"
    },
    {
        "line": 49,
        "fullcodeline": "worker_id = request.args['workerId']"
    },
    {
        "line": 51,
        "fullcodeline": "nrecords = Participant.query.\\"
    },
    {
        "line": 59,
        "fullcodeline": "worker_id = None"
    },
    {
        "line": 61,
        "fullcodeline": "part = Participant.query.\\"
    },
    {
        "line": 66,
        "fullcodeline": "status = part.status"
    },
    {
        "line": 18,
        "fullcodeline": "myrule = rule.strip()"
    },
    {
        "line": 56,
        "fullcodeline": "if nrecords > 0:  # Already completed task"
    },
    {
        "line": 74,
        "fullcodeline": "raise ExperimentError('already_started_exp_mturk')"
    },
    {
        "line": 75,
        "fullcodeline": "elif status == COMPLETED or (status == SUBMITTED and not already_in_db):"
    },
    {
        "line": 19,
        "fullcodeline": "if myrule in [\"mobile\", \"tablet\", \"touchcapable\", \"pc\", \"bot\"]:"
    },
    {
        "line": 57,
        "fullcodeline": "already_in_db = True"
    },
    {
        "line": 68,
        "fullcodeline": "status = None"
    },
    {
        "line": 83,
        "fullcodeline": "return render_template("
    },
    {
        "line": 20,
        "fullcodeline": "if (myrule == \"mobile\" and user_agent_obj.is_mobile) or\\"
    },
    {
        "line": 26,
        "fullcodeline": "elif myrule == \"Safari\" or myrule == \"safari\":"
    },
    {
        "line": 85,
        "fullcodeline": "using_sandbox=(mode == \"sandbox\"),"
    },
    {
        "line": 90,
        "fullcodeline": "elif already_in_db and not (debug_mode or allow_repeats):"
    },
    {
        "line": 21,
        "fullcodeline": "(myrule == \"tablet\" and user_agent_obj.is_tablet) or\\"
    },
    {
        "line": 25,
        "fullcodeline": "browser_ok = False"
    },
    {
        "line": 53,
        "fullcodeline": "filter(Participant.workerid == worker_id).\\"
    },
    {
        "line": 64,
        "fullcodeline": "filter(Participant.workerid == worker_id).\\"
    },
    {
        "line": 91,
        "fullcodeline": "raise ExperimentError('already_did_exp_hit')"
    },
    {
        "line": 27,
        "fullcodeline": "if \"Chrome\" in user_agent_string and \"Safari\" in user_agent_string:"
    },
    {
        "line": 31,
        "fullcodeline": "elif myrule in user_agent_string:"
    },
    {
        "line": 92,
        "fullcodeline": "elif status == ALLOCATED or not status or debug_mode:"
    },
    {
        "line": 97,
        "fullcodeline": "ad_string = insert_mode(ad_string)"
    },
    {
        "line": 28,
        "fullcodeline": "pass"
    },
    {
        "line": 32,
        "fullcodeline": "browser_ok = False"
    },
    {
        "line": 52,
        "fullcodeline": "filter(Participant.assignmentid != assignment_id).\\"
    },
    {
        "line": 63,
        "fullcodeline": "filter(Participant.assignmentid == assignment_id).\\"
    },
    {
        "line": 95,
        "fullcodeline": "with open('templates/ad.html', 'r') as temp_file:"
    },
    {
        "line": 98,
        "fullcodeline": "return render_template_string("
    },
    {
        "line": 106,
        "fullcodeline": "raise ExperimentError('status_incorrectly_set')"
    },
    {
        "line": 29,
        "fullcodeline": "elif \"Safari\" in user_agent_string:"
    },
    {
        "line": 30,
        "fullcodeline": "browser_ok = False"
    },
    {
        "line": 62,
        "fullcodeline": "filter(Participant.hitid == hit_id).\\"
    },
    {
        "line": 96,
        "fullcodeline": "ad_string = temp_file.read()"
    }
]