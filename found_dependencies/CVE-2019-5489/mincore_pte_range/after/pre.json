[
    {
        "line": 5,
        "fullcodeline": "struct vm_area_struct *vma = walk->vma;"
    },
    {
        "line": 7,
        "fullcodeline": "unsigned char *vec = walk->private;"
    },
    {
        "line": 8,
        "fullcodeline": "int nr = (end - addr) >> PAGE_SHIFT;"
    },
    {
        "line": 10,
        "fullcodeline": "ptl = pmd_trans_huge_lock(pmd, vma);"
    },
    {
        "line": 23,
        "fullcodeline": "ptep = pte_offset_map_lock(walk->mm, pmd, addr, &ptl);"
    },
    {
        "line": 42,
        "fullcodeline": "pte_unmap_unlock(ptep - 1, ptl);"
    },
    {
        "line": 44,
        "fullcodeline": "walk->private += nr;"
    },
    {
        "line": 45,
        "fullcodeline": "cond_resched();"
    },
    {
        "line": 18,
        "fullcodeline": "if (pmd_trans_unstable(pmd)) {"
    },
    {
        "line": 24,
        "fullcodeline": "for (; addr != end; ptep++, addr += PAGE_SIZE) {"
    },
    {
        "line": 12,
        "fullcodeline": "memset(vec, 1, nr);"
    },
    {
        "line": 13,
        "fullcodeline": "spin_unlock(ptl);"
    },
    {
        "line": 19,
        "fullcodeline": "memset(vec, 1, nr);"
    },
    {
        "line": 25,
        "fullcodeline": "pte_t pte = *ptep;"
    },
    {
        "line": 40,
        "fullcodeline": "vec++;"
    },
    {
        "line": 27,
        "fullcodeline": "if (pte_none(pte))"
    },
    {
        "line": 28,
        "fullcodeline": "*vec = 0;"
    },
    {
        "line": 29,
        "fullcodeline": "else if (pte_present(pte))"
    },
    {
        "line": 30,
        "fullcodeline": "*vec = 1;"
    },
    {
        "line": 32,
        "fullcodeline": "swp_entry_t entry = pte_to_swp_entry(pte);"
    },
    {
        "line": 38,
        "fullcodeline": "*vec = !!non_swap_entry(entry);"
    }
]