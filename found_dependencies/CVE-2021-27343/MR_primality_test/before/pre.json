[
    {
        "line": 5,
        "fullcodeline": "ASSERT(!(n < 4));"
    },
    {
        "line": 6,
        "fullcodeline": "auto predecessor = n.minus({ 1 });"
    },
    {
        "line": 7,
        "fullcodeline": "auto d = predecessor;"
    },
    {
        "line": 8,
        "fullcodeline": "size_t r = 0;"
    },
    {
        "line": 11,
        "fullcodeline": "auto div_result = d.divided_by(2);"
    },
    {
        "line": 18,
        "fullcodeline": "if (r == 0) {"
    },
    {
        "line": 12,
        "fullcodeline": "while (div_result.remainder == 0) {"
    },
    {
        "line": 26,
        "fullcodeline": "auto x = ModularPower(a, d, n);"
    },
    {
        "line": 13,
        "fullcodeline": "d = div_result.quotient;"
    },
    {
        "line": 14,
        "fullcodeline": "div_result = d.divided_by(2);"
    },
    {
        "line": 15,
        "fullcodeline": "++r;"
    },
    {
        "line": 20,
        "fullcodeline": "return n == 2;"
    },
    {
        "line": 25,
        "fullcodeline": "ASSERT(a < n);"
    },
    {
        "line": 31,
        "fullcodeline": "for (size_t i = 0; i < r - 1; ++i) {"
    },
    {
        "line": 27,
        "fullcodeline": "if (x == 1 || x == predecessor)"
    },
    {
        "line": 32,
        "fullcodeline": "x = ModularPower(x, 2, n);"
    },
    {
        "line": 33,
        "fullcodeline": "if (x == predecessor) {"
    }
]