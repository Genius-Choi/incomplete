[
    {
        "line": 34,
        "fullcodeline": "assert(image_info != (const ImageInfo *) NULL);"
    },
    {
        "line": 35,
        "fullcodeline": "assert(image_info->signature == MagickCoreSignature);"
    },
    {
        "line": 39,
        "fullcodeline": "assert(exception != (ExceptionInfo *) NULL);"
    },
    {
        "line": 40,
        "fullcodeline": "assert(exception->signature == MagickCoreSignature);"
    },
    {
        "line": 42,
        "fullcodeline": "image=AcquireImage(image_info,exception);"
    },
    {
        "line": 43,
        "fullcodeline": "status=OpenBlob(image_info,image,ReadBinaryBlobMode,exception);"
    },
    {
        "line": 52,
        "fullcodeline": "image->endian=MSBEndian;"
    },
    {
        "line": 53,
        "fullcodeline": "count=ReadBlob(image,4,(unsigned char *) psd_info.signature);"
    },
    {
        "line": 54,
        "fullcodeline": "psd_info.version=ReadBlobMSBShort(image);"
    },
    {
        "line": 59,
        "fullcodeline": "psd_info.channels=ReadBlobMSBShort(image);"
    },
    {
        "line": 62,
        "fullcodeline": "psd_info.rows=ReadBlobMSBLong(image);"
    },
    {
        "line": 63,
        "fullcodeline": "psd_info.columns=ReadBlobMSBLong(image);"
    },
    {
        "line": 67,
        "fullcodeline": "psd_info.depth=ReadBlobMSBShort(image);"
    },
    {
        "line": 70,
        "fullcodeline": "psd_info.mode=ReadBlobMSBShort(image);"
    },
    {
        "line": 80,
        "fullcodeline": "image->depth=psd_info.depth;"
    },
    {
        "line": 81,
        "fullcodeline": "image->columns=psd_info.columns;"
    },
    {
        "line": 82,
        "fullcodeline": "image->rows=psd_info.rows;"
    },
    {
        "line": 83,
        "fullcodeline": "status=SetImageExtent(image,image->columns,image->rows,exception);"
    },
    {
        "line": 119,
        "fullcodeline": "length=ReadBlobMSBLong(image);"
    },
    {
        "line": 164,
        "fullcodeline": "has_merged_image=MagickTrue;"
    },
    {
        "line": 165,
        "fullcodeline": "length=ReadBlobMSBLong(image);"
    },
    {
        "line": 196,
        "fullcodeline": "length=GetPSDSize(&psd_info,image);"
    },
    {
        "line": 202,
        "fullcodeline": "offset=TellBlob(image);"
    },
    {
        "line": 203,
        "fullcodeline": "skip_layers=MagickFalse;"
    },
    {
        "line": 36,
        "fullcodeline": "if (image_info->debug != MagickFalse)"
    },
    {
        "line": 44,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 58,
        "fullcodeline": "(void) ReadBlob(image,6,psd_info.reserved);"
    },
    {
        "line": 60,
        "fullcodeline": "if (psd_info.channels > MaxPSDChannels)"
    },
    {
        "line": 71,
        "fullcodeline": "if (image->debug != MagickFalse)"
    },
    {
        "line": 84,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 86,
        "fullcodeline": "if (SetImageBackgroundColor(image,exception) == MagickFalse)"
    },
    {
        "line": 91,
        "fullcodeline": "if (psd_info.mode == LabMode)"
    },
    {
        "line": 93,
        "fullcodeline": "if (psd_info.mode == CMYKMode)"
    },
    {
        "line": 120,
        "fullcodeline": "if (length != 0)"
    },
    {
        "line": 166,
        "fullcodeline": "if (length != 0)"
    },
    {
        "line": 197,
        "fullcodeline": "if (length == 8)"
    },
    {
        "line": 212,
        "fullcodeline": "if (length == 0)"
    },
    {
        "line": 236,
        "fullcodeline": "if (image_info->ping != MagickFalse)"
    },
    {
        "line": 244,
        "fullcodeline": "if (image->debug != MagickFalse)"
    },
    {
        "line": 247,
        "fullcodeline": "if ((has_merged_image != MagickFalse) || (GetImageListLength(image) == 1))"
    },
    {
        "line": 273,
        "fullcodeline": "(void) CloseBlob(image);"
    },
    {
        "line": 274,
        "fullcodeline": "return(GetFirstImageInList(image));"
    },
    {
        "line": 37,
        "fullcodeline": "(void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\","
    },
    {
        "line": 46,
        "fullcodeline": "image=DestroyImageList(image);"
    },
    {
        "line": 55,
        "fullcodeline": "if ((count == 0) || (LocaleNCompare(psd_info.signature,\"8BPS\",4) != 0) ||"
    },
    {
        "line": 56,
        "fullcodeline": "((psd_info.version != 1) && (psd_info.version != 2)))"
    },
    {
        "line": 57,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 61,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"MaximumChannelsExceeded\");"
    },
    {
        "line": 64,
        "fullcodeline": "if ((psd_info.version == 1) && ((psd_info.rows > 30000) ||"
    },
    {
        "line": 66,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 68,
        "fullcodeline": "if ((psd_info.depth != 1) && (psd_info.depth != 8) && (psd_info.depth != 16))"
    },
    {
        "line": 69,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 92,
        "fullcodeline": "SetImageColorspace(image,LabColorspace,exception);"
    },
    {
        "line": 95,
        "fullcodeline": "SetImageColorspace(image,CMYKColorspace,exception);"
    },
    {
        "line": 96,
        "fullcodeline": "image->alpha_trait=psd_info.channels > 4 ? BlendPixelTrait :"
    },
    {
        "line": 162,
        "fullcodeline": "if ((image->depth == 1) && (image->storage_class != PseudoClass))"
    },
    {
        "line": 163,
        "fullcodeline": "ThrowReaderException(CorruptImageError, \"ImproperImageHeader\");"
    },
    {
        "line": 178,
        "fullcodeline": "blocks=(unsigned char *) AcquireQuantumMemory((size_t) length,"
    },
    {
        "line": 182,
        "fullcodeline": "count=ReadBlob(image,(size_t) length,blocks);"
    },
    {
        "line": 189,
        "fullcodeline": "ParseImageResourceBlocks(image,blocks,(size_t) length,&has_merged_image,"
    },
    {
        "line": 200,
        "fullcodeline": "length=ReadBlobMSBLong(image);"
    },
    {
        "line": 204,
        "fullcodeline": "if ((image_info->number_scenes == 1) && (image_info->scene == 0) &&"
    },
    {
        "line": 205,
        "fullcodeline": "(has_merged_image != MagickFalse))"
    },
    {
        "line": 210,
        "fullcodeline": "skip_layers=MagickTrue;"
    },
    {
        "line": 248,
        "fullcodeline": "has_merged_image=(MagickBooleanType) ReadPSDMergedImage(image_info,image,"
    },
    {
        "line": 250,
        "fullcodeline": "if ((has_merged_image == MagickFalse) && (GetImageListLength(image) == 1) &&"
    },
    {
        "line": 251,
        "fullcodeline": "(length != 0))"
    },
    {
        "line": 253,
        "fullcodeline": "SeekBlob(image,offset,SEEK_SET);"
    },
    {
        "line": 254,
        "fullcodeline": "status=ReadPSDLayers(image,image_info,&psd_info,MagickFalse,exception);"
    },
    {
        "line": 262,
        "fullcodeline": "if ((has_merged_image == MagickFalse) && (GetImageListLength(image) > 1))"
    },
    {
        "line": 267,
        "fullcodeline": "SetImageAlphaChannel(image,TransparentAlphaChannel,exception);"
    },
    {
        "line": 268,
        "fullcodeline": "image->background_color.alpha=TransparentAlpha;"
    },
    {
        "line": 270,
        "fullcodeline": "merged=MergeImageLayers(image,FlattenLayer,exception);"
    },
    {
        "line": 271,
        "fullcodeline": "ReplaceImageInList(&image,merged);"
    },
    {
        "line": 47,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 65,
        "fullcodeline": "(psd_info.columns > 30000)))"
    },
    {
        "line": 72,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 85,
        "fullcodeline": "return(DestroyImageList(image));"
    },
    {
        "line": 88,
        "fullcodeline": "image=DestroyImageList(image);"
    },
    {
        "line": 89,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 122,
        "fullcodeline": "if (image->debug != MagickFalse)"
    },
    {
        "line": 125,
        "fullcodeline": "if (psd_info.mode == DuotoneMode)"
    },
    {
        "line": 174,
        "fullcodeline": "if (image->debug != MagickFalse)"
    },
    {
        "line": 180,
        "fullcodeline": "if (blocks == (unsigned char *) NULL)"
    },
    {
        "line": 199,
        "fullcodeline": "length=ReadBlobMSBLong(image);"
    },
    {
        "line": 207,
        "fullcodeline": "if (image->debug != MagickFalse)"
    },
    {
        "line": 214,
        "fullcodeline": "if (image->debug != MagickFalse)"
    },
    {
        "line": 231,
        "fullcodeline": "SeekBlob(image,offset+length,SEEK_SET);"
    },
    {
        "line": 238,
        "fullcodeline": "(void) CloseBlob(image);"
    },
    {
        "line": 239,
        "fullcodeline": "return(GetFirstImageInList(image));"
    },
    {
        "line": 245,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 75,
        "fullcodeline": "psd_info.channels,(double) psd_info.depth,ModeToString((PSDImageType)"
    },
    {
        "line": 130,
        "fullcodeline": "data=(unsigned char *) AcquireQuantumMemory((size_t) length,"
    },
    {
        "line": 183,
        "fullcodeline": "if ((count != (ssize_t) length) ||"
    },
    {
        "line": 184,
        "fullcodeline": "(LocaleNCompare((char *) blocks,\"8BIM\",4) != 0))"
    },
    {
        "line": 186,
        "fullcodeline": "blocks=(unsigned char *) RelinquishMagickMemory(blocks);"
    },
    {
        "line": 191,
        "fullcodeline": "blocks=(unsigned char *) RelinquishMagickMemory(blocks);"
    },
    {
        "line": 220,
        "fullcodeline": "if (ReadPSDLayers(image,image_info,&psd_info,skip_layers,exception) !="
    },
    {
        "line": 99,
        "fullcodeline": "else if ((psd_info.mode == BitmapMode) || (psd_info.mode == GrayscaleMode) ||"
    },
    {
        "line": 100,
        "fullcodeline": "(psd_info.mode == DuotoneMode))"
    },
    {
        "line": 102,
        "fullcodeline": "status=AcquireImageColormap(image,psd_info.depth != 16 ? 256 : 65536,"
    },
    {
        "line": 109,
        "fullcodeline": "SetImageColorspace(image,GRAYColorspace,exception);"
    },
    {
        "line": 110,
        "fullcodeline": "image->alpha_trait=psd_info.channels > 1 ? BlendPixelTrait :"
    },
    {
        "line": 123,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 132,
        "fullcodeline": "if (data == (unsigned char *) NULL)"
    },
    {
        "line": 134,
        "fullcodeline": "(void) ReadBlob(image,(size_t) length,data);"
    },
    {
        "line": 145,
        "fullcodeline": "number_colors=length/3;"
    },
    {
        "line": 159,
        "fullcodeline": "image->alpha_trait=UndefinedPixelTrait;"
    },
    {
        "line": 175,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 208,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 215,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 257,
        "fullcodeline": "(void) CloseBlob(image);"
    },
    {
        "line": 258,
        "fullcodeline": "image=DestroyImageList(image);"
    },
    {
        "line": 259,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 104,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 106,
        "fullcodeline": "if (image->debug != MagickFalse)"
    },
    {
        "line": 114,
        "fullcodeline": "image->alpha_trait=psd_info.channels > 3 ? BlendPixelTrait :"
    },
    {
        "line": 133,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 135,
        "fullcodeline": "data=(unsigned char *) RelinquishMagickMemory(data);"
    },
    {
        "line": 146,
        "fullcodeline": "if (number_colors > 65536)"
    },
    {
        "line": 148,
        "fullcodeline": "if (AcquireImageColormap(image,number_colors,exception) == MagickFalse)"
    },
    {
        "line": 150,
        "fullcodeline": "for (i=0; i < (ssize_t) image->colors; i++)"
    },
    {
        "line": 153,
        "fullcodeline": "for (i=0; i < (ssize_t) image->colors; i++)"
    },
    {
        "line": 156,
        "fullcodeline": "for (i=0; i < (ssize_t) image->colors; i++)"
    },
    {
        "line": 223,
        "fullcodeline": "(void) CloseBlob(image);"
    },
    {
        "line": 224,
        "fullcodeline": "image=DestroyImageList(image);"
    },
    {
        "line": 225,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 105,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 147,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 149,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 151,
        "fullcodeline": "image->colormap[i].red=ScaleCharToQuantum((unsigned char)"
    },
    {
        "line": 154,
        "fullcodeline": "image->colormap[i].green=ScaleCharToQuantum((unsigned char)"
    },
    {
        "line": 157,
        "fullcodeline": "image->colormap[i].blue=ScaleCharToQuantum((unsigned char)"
    },
    {
        "line": 107,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 152,
        "fullcodeline": "ReadBlobByte(image));"
    },
    {
        "line": 155,
        "fullcodeline": "ReadBlobByte(image));"
    },
    {
        "line": 158,
        "fullcodeline": "ReadBlobByte(image));"
    }
]