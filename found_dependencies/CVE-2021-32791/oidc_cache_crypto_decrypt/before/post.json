[
    {
        "line": 4,
        "fullcodeline": "int len = -1;"
    },
    {
        "line": 7,
        "fullcodeline": "char *encoded_tag = strstr(cache_value, \".\");"
    },
    {
        "line": 15,
        "fullcodeline": "cache_value = apr_pstrmemdup(r->pool, cache_value,"
    },
    {
        "line": 17,
        "fullcodeline": "encoded_tag++;"
    },
    {
        "line": 20,
        "fullcodeline": "char *d_bytes = NULL;"
    },
    {
        "line": 21,
        "fullcodeline": "int d_len = oidc_base64url_decode(r->pool, &d_bytes, cache_value);"
    },
    {
        "line": 24,
        "fullcodeline": "char *t_bytes = NULL;"
    },
    {
        "line": 25,
        "fullcodeline": "int t_len = oidc_base64url_decode(r->pool, &t_bytes, encoded_tag);"
    },
    {
        "line": 8,
        "fullcodeline": "if (encoded_tag == NULL) {"
    },
    {
        "line": 28,
        "fullcodeline": "if ((d_len > 0) && (t_len > 0)) {"
    },
    {
        "line": 9,
        "fullcodeline": "oidc_error(r,"
    },
    {
        "line": 16,
        "fullcodeline": "strlen(cache_value) - strlen(encoded_tag));"
    },
    {
        "line": 31,
        "fullcodeline": "*plaintext = apr_pcalloc(r->pool,"
    },
    {
        "line": 36,
        "fullcodeline": "len = oidc_cache_crypto_decrypt_impl(r, (unsigned char *) d_bytes,"
    },
    {
        "line": 43,
        "fullcodeline": "if (len > -1) {"
    },
    {
        "line": 32,
        "fullcodeline": "(d_len + EVP_CIPHER_block_size(OIDC_CACHE_CIPHER) - 1));"
    },
    {
        "line": 38,
        "fullcodeline": "sizeof(OIDC_CACHE_CRYPTO_GCM_AAD), (unsigned char *) t_bytes,"
    },
    {
        "line": 44,
        "fullcodeline": "(*plaintext)[len] = '\\0';"
    },
    {
        "line": 46,
        "fullcodeline": "*plaintext = NULL;"
    }
]