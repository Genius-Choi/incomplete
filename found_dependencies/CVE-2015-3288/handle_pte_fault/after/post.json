[
    {
        "line": 17,
        "fullcodeline": "barrier();"
    },
    {
        "line": 34,
        "fullcodeline": "ptl = pte_lockptr(mm, pmd);"
    },
    {
        "line": 35,
        "fullcodeline": "spin_lock(ptl);"
    },
    {
        "line": 44,
        "fullcodeline": "entry = pte_mkyoung(entry);"
    },
    {
        "line": 58,
        "fullcodeline": "pte_unmap_unlock(pte, ptl);"
    },
    {
        "line": 18,
        "fullcodeline": "if (!pte_present(entry)) {"
    },
    {
        "line": 31,
        "fullcodeline": "if (pte_protnone(entry))"
    },
    {
        "line": 36,
        "fullcodeline": "if (unlikely(!pte_same(*pte, entry)))"
    },
    {
        "line": 38,
        "fullcodeline": "if (flags & FAULT_FLAG_WRITE) {"
    },
    {
        "line": 45,
        "fullcodeline": "if (ptep_set_access_flags(vma, address, pte, entry, flags & FAULT_FLAG_WRITE)) {"
    },
    {
        "line": 42,
        "fullcodeline": "entry = pte_mkdirty(entry);"
    },
    {
        "line": 46,
        "fullcodeline": "update_mmu_cache(vma, address, pte);"
    },
    {
        "line": 19,
        "fullcodeline": "if (pte_none(entry)) {"
    },
    {
        "line": 27,
        "fullcodeline": "return do_swap_page(mm, vma, address,"
    },
    {
        "line": 32,
        "fullcodeline": "return do_numa_page(mm, vma, address, entry, pte, pmd);"
    },
    {
        "line": 39,
        "fullcodeline": "if (!pte_write(entry))"
    },
    {
        "line": 54,
        "fullcodeline": "if (flags & FAULT_FLAG_WRITE)"
    },
    {
        "line": 24,
        "fullcodeline": "return do_anonymous_page(mm, vma, address, pte, pmd,"
    },
    {
        "line": 40,
        "fullcodeline": "return do_wp_page(mm, vma, address,"
    },
    {
        "line": 55,
        "fullcodeline": "flush_tlb_fix_spurious_fault(vma, address);"
    },
    {
        "line": 21,
        "fullcodeline": "return do_fault(mm, vma, address, pte, pmd,"
    }
]