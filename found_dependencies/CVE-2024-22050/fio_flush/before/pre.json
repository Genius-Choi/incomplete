[
    {
        "line": 4,
        "fullcodeline": "errno = 0;"
    },
    {
        "line": 5,
        "fullcodeline": "ssize_t flushed = 0;"
    },
    {
        "line": 14,
        "fullcodeline": "const fio_packet_s *old_packet = uuid_data(uuid).packet;"
    },
    {
        "line": 15,
        "fullcodeline": "const size_t old_sent = uuid_data(uuid).sent;"
    },
    {
        "line": 17,
        "fullcodeline": "tmp = uuid_data(uuid).packet->write_func(fio_uuid2fd(uuid),"
    },
    {
        "line": 32,
        "fullcodeline": "fio_unlock(&uuid_data(uuid).sock_lock);"
    },
    {
        "line": 42,
        "fullcodeline": "errno = EWOULDBLOCK;"
    },
    {
        "line": 50,
        "fullcodeline": "flushed = uuid_data(uuid).rw_hooks->flush(uuid, uuid_data(uuid).rw_udata);"
    },
    {
        "line": 51,
        "fullcodeline": "fio_unlock(&uuid_data(uuid).sock_lock);"
    },
    {
        "line": 85,
        "fullcodeline": "fprintf(stderr, \"UUID error: %p (%d)\\n\", (void *)uuid, errno);"
    },
    {
        "line": 91,
        "fullcodeline": "errno = EBADF;"
    },
    {
        "line": 2,
        "fullcodeline": "if (!uuid_is_valid(uuid))"
    },
    {
        "line": 8,
        "fullcodeline": "if (fio_trylock(&uuid_data(uuid).sock_lock))"
    },
    {
        "line": 19,
        "fullcodeline": "if (tmp <= 0) {"
    },
    {
        "line": 23,
        "fullcodeline": "if (uuid_data(uuid).packet_count >= 1024 &&"
    },
    {
        "line": 35,
        "fullcodeline": "if (!uuid_data(uuid).packet && uuid_data(uuid).close)"
    },
    {
        "line": 39,
        "fullcodeline": "return uuid_data(uuid).open && uuid_data(uuid).packet != NULL;"
    },
    {
        "line": 43,
        "fullcodeline": "return -1;"
    },
    {
        "line": 47,
        "fullcodeline": "return -1;"
    },
    {
        "line": 52,
        "fullcodeline": "if (!flushed)"
    },
    {
        "line": 57,
        "fullcodeline": "touchfd(fio_uuid2fd(uuid));"
    },
    {
        "line": 92,
        "fullcodeline": "return -1;"
    },
    {
        "line": 99,
        "fullcodeline": "fio_clear_fd(fio_uuid2fd(uuid), 0);"
    },
    {
        "line": 100,
        "fullcodeline": "return -1;"
    },
    {
        "line": 26,
        "fullcodeline": "(uuid_data(uuid).sent - old_sent) < 32768) {"
    },
    {
        "line": 97,
        "fullcodeline": "(int)fio_peer_addr(uuid).len, fio_peer_addr(uuid).data);"
    },
    {
        "line": 11,
        "fullcodeline": "if (!uuid_data(uuid).packet)"
    },
    {
        "line": 18,
        "fullcodeline": "uuid_data(uuid).packet);"
    },
    {
        "line": 25,
        "fullcodeline": "uuid_data(uuid).sent >= old_sent &&"
    },
    {
        "line": 61,
        "fullcodeline": "fio_unlock(&uuid_data(uuid).sock_lock);"
    },
    {
        "line": 83,
        "fullcodeline": "return -1;"
    },
    {
        "line": 98,
        "fullcodeline": "fio_unlock(&uuid_data(uuid).sock_lock);"
    },
    {
        "line": 24,
        "fullcodeline": "uuid_data(uuid).packet == old_packet &&"
    },
    {
        "line": 81,
        "fullcodeline": "uuid_data(uuid).close = 1;"
    }
]