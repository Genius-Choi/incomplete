[
    {
        "line": 5,
        "fullcodeline": "struct stat file_data = {.st_size = 0};"
    },
    {
        "line": 6,
        "fullcodeline": "static uint64_t accept_enc_hash = 0;"
    },
    {
        "line": 9,
        "fullcodeline": "static uint64_t range_hash = 0;"
    },
    {
        "line": 14,
        "fullcodeline": "FIOBJ filename = fiobj_str_tmp();"
    },
    {
        "line": 52,
        "fullcodeline": "int file = -1;"
    },
    {
        "line": 53,
        "fullcodeline": "uint8_t is_gz = 0;"
    },
    {
        "line": 55,
        "fullcodeline": "fio_str_info_s s = fiobj_obj2cstr(filename);"
    },
    {
        "line": 88,
        "fullcodeline": "http_set_header(h, HTTP_HEADER_CACHE_CONTROL, fiobj_dup(HTTP_HVALUE_MAX_AGE));"
    },
    {
        "line": 90,
        "fullcodeline": "uint64_t etag = (uint64_t)file_data.st_size;"
    },
    {
        "line": 91,
        "fullcodeline": "etag ^= (uint64_t)file_data.st_mtime;"
    },
    {
        "line": 92,
        "fullcodeline": "etag = fiobj_hash_string(&etag, sizeof(uint64_t));"
    },
    {
        "line": 93,
        "fullcodeline": "FIOBJ etag_str = fiobj_str_buf(32);"
    },
    {
        "line": 94,
        "fullcodeline": "fiobj_str_resize(etag_str,"
    },
    {
        "line": 98,
        "fullcodeline": "http_set_header(h, HTTP_HEADER_ETAG, etag_str);"
    },
    {
        "line": 112,
        "fullcodeline": "int64_t offset = 0;"
    },
    {
        "line": 113,
        "fullcodeline": "int64_t length = file_data.st_size;"
    },
    {
        "line": 172,
        "fullcodeline": "s = fiobj_obj2cstr(h->method);"
    },
    {
        "line": 195,
        "fullcodeline": "http_send_error(h, 403);"
    },
    {
        "line": 198,
        "fullcodeline": "s = fiobj_obj2cstr(filename);"
    },
    {
        "line": 199,
        "fullcodeline": "file = open(s.data, O_RDONLY);"
    },
    {
        "line": 229,
        "fullcodeline": "http_sendfile(h, file, length, offset);"
    },
    {
        "line": 3,
        "fullcodeline": "if (HTTP_INVALID_HANDLE(h))"
    },
    {
        "line": 7,
        "fullcodeline": "if (!accept_enc_hash)"
    },
    {
        "line": 10,
        "fullcodeline": "if (!range_hash)"
    },
    {
        "line": 15,
        "fullcodeline": "if (prefix && prefix_len) {"
    },
    {
        "line": 24,
        "fullcodeline": "fio_str_info_s tmp = fiobj_obj2cstr(filename);"
    },
    {
        "line": 57,
        "fullcodeline": "FIOBJ tmp = fiobj_hash_get2(h->headers, accept_enc_hash);"
    },
    {
        "line": 60,
        "fullcodeline": "fio_str_info_s ac_str = fiobj_obj2cstr(tmp);"
    },
    {
        "line": 76,
        "fullcodeline": "if (stat(s.data, &file_data) ||"
    },
    {
        "line": 82,
        "fullcodeline": "FIOBJ tmp = fiobj_str_buf(32);"
    },
    {
        "line": 83,
        "fullcodeline": "fiobj_str_resize("
    },
    {
        "line": 85,
        "fullcodeline": "http_set_header(h, HTTP_HEADER_LAST_MODIFIED, tmp);"
    },
    {
        "line": 95,
        "fullcodeline": "fio_base64_encode(fiobj_obj2cstr(etag_str).data,"
    },
    {
        "line": 101,
        "fullcodeline": "static uint64_t none_match_hash = 0;"
    },
    {
        "line": 104,
        "fullcodeline": "FIOBJ tmp2 = fiobj_hash_get2(h->headers, none_match_hash);"
    },
    {
        "line": 115,
        "fullcodeline": "static uint64_t ifrange_hash = 0;"
    },
    {
        "line": 118,
        "fullcodeline": "FIOBJ tmp = fiobj_hash_get2(h->headers, ifrange_hash);"
    },
    {
        "line": 200,
        "fullcodeline": "if (file == -1) {"
    },
    {
        "line": 207,
        "fullcodeline": "FIOBJ tmp = 0;"
    },
    {
        "line": 208,
        "fullcodeline": "uintptr_t pos = 0;"
    },
    {
        "line": 8,
        "fullcodeline": "accept_enc_hash = fiobj_hash_string(\"accept-encoding\", 15);"
    },
    {
        "line": 11,
        "fullcodeline": "range_hash = fiobj_hash_string(\"range\", 5);"
    },
    {
        "line": 19,
        "fullcodeline": "fiobj_str_capa_assert(filename, prefix_len + encoded_len + 4);"
    },
    {
        "line": 20,
        "fullcodeline": "fiobj_str_write(filename, prefix, prefix_len);"
    },
    {
        "line": 47,
        "fullcodeline": "if (tmp.data[tmp.len - 1] == '/')"
    },
    {
        "line": 58,
        "fullcodeline": "if (!tmp)"
    },
    {
        "line": 61,
        "fullcodeline": "if (!ac_str.data || !strstr(ac_str.data, \"gzip\"))"
    },
    {
        "line": 63,
        "fullcodeline": "if (s.data[s.len - 3] != '.' || s.data[s.len - 2] != 'g' ||"
    },
    {
        "line": 77,
        "fullcodeline": "!(S_ISREG(file_data.st_mode) || S_ISLNK(file_data.st_mode)))"
    },
    {
        "line": 84,
        "fullcodeline": "tmp, http_time2str(fiobj_obj2cstr(tmp).data, file_data.st_mtime));"
    },
    {
        "line": 96,
        "fullcodeline": "(void *)&etag, sizeof(uint64_t)));"
    },
    {
        "line": 102,
        "fullcodeline": "if (!none_match_hash)"
    },
    {
        "line": 105,
        "fullcodeline": "if (tmp2 && fiobj_iseq(tmp2, etag_str)) {"
    },
    {
        "line": 116,
        "fullcodeline": "if (!ifrange_hash)"
    },
    {
        "line": 119,
        "fullcodeline": "if (tmp && fiobj_iseq(tmp, etag_str)) {"
    },
    {
        "line": 201,
        "fullcodeline": "FIO_LOG_ERROR(\"(HTTP) couldn't open file %s!\\n\", s.data);"
    },
    {
        "line": 202,
        "fullcodeline": "perror(\"     \");"
    },
    {
        "line": 203,
        "fullcodeline": "http_send_error(h, 500);"
    },
    {
        "line": 4,
        "fullcodeline": "return -1;"
    },
    {
        "line": 17,
        "fullcodeline": "if (encoded && prefix[prefix_len - 1] == '/' && encoded[0] == '/')"
    },
    {
        "line": 26,
        "fullcodeline": "char *pos = (char *)encoded;"
    },
    {
        "line": 27,
        "fullcodeline": "const char *end = encoded + encoded_len;"
    },
    {
        "line": 44,
        "fullcodeline": "tmp.data[tmp.len] = 0;"
    },
    {
        "line": 45,
        "fullcodeline": "fiobj_str_resize(filename, tmp.len);"
    },
    {
        "line": 48,
        "fullcodeline": "fiobj_str_write(filename, \"index.html\", 10);"
    },
    {
        "line": 64,
        "fullcodeline": "s.data[s.len - 1] != 'z') {"
    },
    {
        "line": 65,
        "fullcodeline": "fiobj_str_write(filename, \".gz\", 3);"
    },
    {
        "line": 66,
        "fullcodeline": "s = fiobj_obj2cstr(filename);"
    },
    {
        "line": 72,
        "fullcodeline": "fiobj_str_resize(filename, s.len - 3);"
    },
    {
        "line": 78,
        "fullcodeline": "return -1;"
    },
    {
        "line": 103,
        "fullcodeline": "none_match_hash = fiobj_hash_string(\"if-none-match\", 13);"
    },
    {
        "line": 106,
        "fullcodeline": "h->status = 304;"
    },
    {
        "line": 107,
        "fullcodeline": "http_finish(h);"
    },
    {
        "line": 117,
        "fullcodeline": "ifrange_hash = fiobj_hash_string(\"if-range\", 8);"
    },
    {
        "line": 120,
        "fullcodeline": "fiobj_hash_delete2(h->headers, range_hash);"
    },
    {
        "line": 175,
        "fullcodeline": "if (!strncasecmp(\"options\", s.data, 7)) {"
    },
    {
        "line": 184,
        "fullcodeline": "if (!strncasecmp(\"get\", s.data, 3))"
    },
    {
        "line": 188,
        "fullcodeline": "if (!strncasecmp(\"head\", s.data, 4)) {"
    },
    {
        "line": 210,
        "fullcodeline": "http_set_header(h, HTTP_HEADER_CONTENT_ENCODING,"
    },
    {
        "line": 213,
        "fullcodeline": "pos = s.len - 4;"
    },
    {
        "line": 216,
        "fullcodeline": "pos++; /* assuming, but that's fine. */"
    },
    {
        "line": 217,
        "fullcodeline": "tmp = http_mimetype_find(s.data + pos, s.len - pos - 3);"
    },
    {
        "line": 227,
        "fullcodeline": "http_set_header(h, HTTP_HEADER_CONTENT_TYPE, tmp);"
    },
    {
        "line": 18,
        "fullcodeline": "--prefix_len;"
    },
    {
        "line": 28,
        "fullcodeline": "while (pos < end) {"
    },
    {
        "line": 67,
        "fullcodeline": "if (!stat(s.data, &file_data) &&"
    },
    {
        "line": 122,
        "fullcodeline": "tmp = fiobj_hash_get2(h->headers, range_hash);"
    },
    {
        "line": 176,
        "fullcodeline": "http_set_header2(h, (fio_str_info_s){.data = (char *)\"allow\", .len = 5},"
    },
    {
        "line": 178,
        "fullcodeline": "h->status = 200;"
    },
    {
        "line": 179,
        "fullcodeline": "http_finish(h);"
    },
    {
        "line": 189,
        "fullcodeline": "http_set_header(h, HTTP_HEADER_CONTENT_LENGTH, fiobj_num_new(length));"
    },
    {
        "line": 190,
        "fullcodeline": "http_finish(h);"
    },
    {
        "line": 211,
        "fullcodeline": "fiobj_dup(HTTP_HVALUE_GZIP));"
    },
    {
        "line": 214,
        "fullcodeline": "while (pos && s.data[pos] != '.')"
    },
    {
        "line": 215,
        "fullcodeline": "pos--;"
    },
    {
        "line": 220,
        "fullcodeline": "pos = s.len - 1;"
    },
    {
        "line": 223,
        "fullcodeline": "pos++; /* assuming, but that's fine. */"
    },
    {
        "line": 224,
        "fullcodeline": "tmp = http_mimetype_find(s.data + pos, s.len - pos);"
    },
    {
        "line": 68,
        "fullcodeline": "(S_ISREG(file_data.st_mode) || S_ISLNK(file_data.st_mode))) {"
    },
    {
        "line": 69,
        "fullcodeline": "is_gz = 1;"
    },
    {
        "line": 177,
        "fullcodeline": "(fio_str_info_s){.data = (char *)\"GET, HEAD\", .len = 9});"
    },
    {
        "line": 221,
        "fullcodeline": "while (pos && s.data[pos] != '.')"
    },
    {
        "line": 222,
        "fullcodeline": "pos--;"
    },
    {
        "line": 30,
        "fullcodeline": "if (*pos == '/' && (pos[1] == '/' ||"
    },
    {
        "line": 34,
        "fullcodeline": "if (*pos == '%') {"
    },
    {
        "line": 127,
        "fullcodeline": "fio_str_info_s range = fiobj_obj2cstr(tmp);"
    },
    {
        "line": 130,
        "fullcodeline": "char *pos = range.data + 6;"
    },
    {
        "line": 131,
        "fullcodeline": "int64_t start_at = 0, end_at = 0;"
    },
    {
        "line": 132,
        "fullcodeline": "start_at = fio_atol(&pos);"
    },
    {
        "line": 156,
        "fullcodeline": "h->status = 206;"
    },
    {
        "line": 166,
        "fullcodeline": "http_set_header(h, HTTP_HEADER_ACCEPT_RANGES,"
    },
    {
        "line": 39,
        "fullcodeline": "tmp.len++;"
    },
    {
        "line": 40,
        "fullcodeline": "pos += 3;"
    },
    {
        "line": 125,
        "fullcodeline": "if (FIOBJ_TYPE_IS(tmp, FIOBJ_T_ARRAY))"
    },
    {
        "line": 128,
        "fullcodeline": "if (!range.data || memcmp(\"bytes=\", range.data, 6))"
    },
    {
        "line": 133,
        "fullcodeline": "if (start_at >= file_data.st_size)"
    },
    {
        "line": 135,
        "fullcodeline": "if (start_at >= 0) {"
    },
    {
        "line": 142,
        "fullcodeline": "if (start_at < 0) {"
    },
    {
        "line": 159,
        "fullcodeline": "FIOBJ cranges = fiobj_str_buf(1);"
    },
    {
        "line": 160,
        "fullcodeline": "fiobj_str_printf(cranges, \"bytes %lu-%lu/%lu\","
    },
    {
        "line": 164,
        "fullcodeline": "http_set_header(h, HTTP_HEADER_CONTENT_RANGE, cranges);"
    },
    {
        "line": 167,
        "fullcodeline": "fiobj_dup(HTTP_HVALUE_BYTES));"
    },
    {
        "line": 31,
        "fullcodeline": "(((uintptr_t)end - (uintptr_t)pos >= 4) &&"
    },
    {
        "line": 33,
        "fullcodeline": "return -1;"
    },
    {
        "line": 37,
        "fullcodeline": "if (hex2byte((uint8_t *)tmp.data + tmp.len, (uint8_t *)pos + 1))"
    },
    {
        "line": 126,
        "fullcodeline": "tmp = fiobj_ary_index(tmp, 0);"
    },
    {
        "line": 136,
        "fullcodeline": "pos++;"
    },
    {
        "line": 137,
        "fullcodeline": "end_at = fio_atol(&pos);"
    },
    {
        "line": 161,
        "fullcodeline": "(unsigned long)start_at,"
    },
    {
        "line": 162,
        "fullcodeline": "(unsigned long)(start_at + length - 1),"
    },
    {
        "line": 163,
        "fullcodeline": "(unsigned long)file_data.st_size);"
    },
    {
        "line": 32,
        "fullcodeline": "pos[1] == '.' && pos[2] == '.' && pos[3] == '/')))"
    },
    {
        "line": 138,
        "fullcodeline": "if (end_at <= 0)"
    },
    {
        "line": 143,
        "fullcodeline": "if (0 - start_at < file_data.st_size) {"
    },
    {
        "line": 38,
        "fullcodeline": "return -1;"
    },
    {
        "line": 42,
        "fullcodeline": "tmp.data[tmp.len++] = *(pos++);"
    },
    {
        "line": 144,
        "fullcodeline": "offset = file_data.st_size - start_at;"
    },
    {
        "line": 145,
        "fullcodeline": "length = 0 - start_at;"
    },
    {
        "line": 148,
        "fullcodeline": "offset = start_at;"
    },
    {
        "line": 149,
        "fullcodeline": "length = end_at - start_at + 1;"
    },
    {
        "line": 150,
        "fullcodeline": "if (length + start_at > file_data.st_size || length <= 0)"
    },
    {
        "line": 153,
        "fullcodeline": "offset = start_at;"
    },
    {
        "line": 154,
        "fullcodeline": "length = length - start_at;"
    },
    {
        "line": 151,
        "fullcodeline": "length = length - start_at;"
    }
]