[
    {
        "line": 11,
        "fullcodeline": "int ret = 0;"
    },
    {
        "line": 22,
        "fullcodeline": "chip = hextoul(argv[1], NULL);"
    },
    {
        "line": 27,
        "fullcodeline": "addr = hextoul(argv[2], NULL);"
    },
    {
        "line": 28,
        "fullcodeline": "alen = get_alen(argv[2], DEFAULT_ADDR_LEN);"
    },
    {
        "line": 42,
        "fullcodeline": "count = hextoul(argv[3], NULL);"
    },
    {
        "line": 44,
        "fullcodeline": "printf (\"CRC32 for %08lx ... %08lx ==> \", addr, addr + count - 1);"
    },
    {
        "line": 49,
        "fullcodeline": "crc = 0;"
    },
    {
        "line": 50,
        "fullcodeline": "err = 0;"
    },
    {
        "line": 16,
        "fullcodeline": "if (argc < 4)"
    },
    {
        "line": 29,
        "fullcodeline": "if (alen > 3)"
    },
    {
        "line": 51,
        "fullcodeline": "while (count-- > 0) {"
    },
    {
        "line": 55,
        "fullcodeline": "ret = i2c_read(chip, addr, alen, &byte, 1);"
    },
    {
        "line": 59,
        "fullcodeline": "crc = crc32(crc, &byte, 1);"
    },
    {
        "line": 60,
        "fullcodeline": "addr++;"
    },
    {
        "line": 63,
        "fullcodeline": "i2c_report_err(ret, I2C_ERR_READ);"
    },
    {
        "line": 58,
        "fullcodeline": "err++;"
    }
]