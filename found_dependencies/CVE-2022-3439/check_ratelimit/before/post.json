[
    {
        "line": 13,
        "fullcodeline": "datastore = getattr(cherrypy, '_ratelimit_datastore', None)"
    },
    {
        "line": 21,
        "fullcodeline": "token = cherrypy.request.login or cherrypy.request.remote.ip"
    },
    {
        "line": 24,
        "fullcodeline": "limit = registered_limit if cherrypy.request.login else anonymous_limit"
    },
    {
        "line": 29,
        "fullcodeline": "hits = datastore.get_and_increment(token, delay)"
    },
    {
        "line": 14,
        "fullcodeline": "if datastore is None:"
    },
    {
        "line": 25,
        "fullcodeline": "if limit is None or limit <= 0:"
    },
    {
        "line": 36,
        "fullcodeline": "if limit <= hits:"
    },
    {
        "line": 16,
        "fullcodeline": "storage_class = conf.get('storage_class', RamRateLimit)"
    },
    {
        "line": 17,
        "fullcodeline": "datastore = storage_class(**conf)"
    },
    {
        "line": 18,
        "fullcodeline": "cherrypy._ratelimit_datastore = datastore"
    },
    {
        "line": 31,
        "fullcodeline": "cherrypy.log("
    },
    {
        "line": 37,
        "fullcodeline": "raise cherrypy.HTTPError(rate_exceed_status)"
    },
    {
        "line": 32,
        "fullcodeline": "'check and increase rate limit for token %s, limit %s, hits %s' % (token, limit, hits), 'TOOLS.RATELIMIT'"
    }
]