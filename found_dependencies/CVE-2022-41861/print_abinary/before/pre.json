[
    {
        "line": 7,
        "fullcodeline": "static char const *action[] = {\"drop\", \"forward\"};"
    },
    {
        "line": 8,
        "fullcodeline": "static char const *direction[] = {\"out\", \"in\"};"
    },
    {
        "line": 10,
        "fullcodeline": "p = out;"
    },
    {
        "line": 32,
        "fullcodeline": "filter = (ascend_filter_t const *) data;"
    },
    {
        "line": 33,
        "fullcodeline": "i = snprintf(p, outlen, \"%s %s %s\", fr_int2str(filterType, filter->type, \"??\"),"
    },
    {
        "line": 36,
        "fullcodeline": "p += i;"
    },
    {
        "line": 37,
        "fullcodeline": "outlen -= i;"
    },
    {
        "line": 15,
        "fullcodeline": "if (len != sizeof(*filter)) {"
    },
    {
        "line": 27,
        "fullcodeline": "if (quote > 0) {"
    },
    {
        "line": 42,
        "fullcodeline": "if (filter->type == RAD_FILTER_IP) {"
    },
    {
        "line": 165,
        "fullcodeline": "if (quote > 0) {"
    },
    {
        "line": 16,
        "fullcodeline": "strcpy(p, \"0x\");"
    },
    {
        "line": 17,
        "fullcodeline": "p += 2;"
    },
    {
        "line": 18,
        "fullcodeline": "outlen -= 2;"
    },
    {
        "line": 29,
        "fullcodeline": "outlen -= 3;\t\t\t/* account for leading & trailing quotes */"
    },
    {
        "line": 66,
        "fullcodeline": "i = snprintf(p, outlen, \" %s\", fr_int2str(filterProtoName, filter->u.ip.proto, \"??\"));"
    },
    {
        "line": 67,
        "fullcodeline": "p += i;"
    },
    {
        "line": 68,
        "fullcodeline": "outlen -= i;"
    },
    {
        "line": 19,
        "fullcodeline": "for (i = 0; i < len; i++) {"
    },
    {
        "line": 70,
        "fullcodeline": "if (filter->u.ip.srcPortComp > RAD_NO_COMPARE) {"
    },
    {
        "line": 78,
        "fullcodeline": "if (filter->u.ip.dstPortComp > RAD_NO_COMPARE) {"
    },
    {
        "line": 20,
        "fullcodeline": "snprintf(p, outlen, \"%02x\", data[i]);"
    },
    {
        "line": 21,
        "fullcodeline": "p += 2;"
    },
    {
        "line": 22,
        "fullcodeline": "outlen -= 2;"
    },
    {
        "line": 28,
        "fullcodeline": "*(p++) = (char) quote;"
    },
    {
        "line": 45,
        "fullcodeline": "i = snprintf(p, outlen, \" srcip %d.%d.%d.%d/%d\","
    },
    {
        "line": 51,
        "fullcodeline": "p += i;"
    },
    {
        "line": 52,
        "fullcodeline": "outlen -= i;"
    },
    {
        "line": 56,
        "fullcodeline": "i = snprintf(p, outlen, \" dstip %d.%d.%d.%d/%d\","
    },
    {
        "line": 62,
        "fullcodeline": "p += i;"
    },
    {
        "line": 63,
        "fullcodeline": "outlen -= i;"
    },
    {
        "line": 71,
        "fullcodeline": "i = snprintf(p, outlen, \" srcport %s %d\","
    },
    {
        "line": 74,
        "fullcodeline": "p += i;"
    },
    {
        "line": 75,
        "fullcodeline": "outlen -= i;"
    },
    {
        "line": 79,
        "fullcodeline": "i = snprintf(p, outlen, \" dstport %s %d\","
    },
    {
        "line": 82,
        "fullcodeline": "p += i;"
    },
    {
        "line": 83,
        "fullcodeline": "outlen -= i;"
    },
    {
        "line": 87,
        "fullcodeline": "i = snprintf(p, outlen, \" est\");"
    },
    {
        "line": 88,
        "fullcodeline": "p += i;"
    },
    {
        "line": 94,
        "fullcodeline": "} else if (filter->type == RAD_FILTER_IPX) {"
    },
    {
        "line": 72,
        "fullcodeline": "fr_int2str(filterCompare, filter->u.ip.srcPortComp, \"??\"),"
    },
    {
        "line": 73,
        "fullcodeline": "ntohs(filter->u.ip.srcport));"
    },
    {
        "line": 80,
        "fullcodeline": "fr_int2str(filterCompare, filter->u.ip.dstPortComp, \"??\"),"
    },
    {
        "line": 81,
        "fullcodeline": "ntohs(filter->u.ip.dstport));"
    },
    {
        "line": 97,
        "fullcodeline": "i = snprintf(p, outlen, \" srcipxnet 0x%04x srcipxnode 0x%02x%02x%02x%02x%02x%02x\","
    },
    {
        "line": 102,
        "fullcodeline": "p += i;"
    },
    {
        "line": 103,
        "fullcodeline": "outlen -= i;"
    },
    {
        "line": 116,
        "fullcodeline": "i = snprintf(p, outlen, \" dstipxnet 0x%04x dstipxnode 0x%02x%02x%02x%02x%02x%02x\","
    },
    {
        "line": 121,
        "fullcodeline": "p += i;"
    },
    {
        "line": 122,
        "fullcodeline": "outlen -= i;"
    },
    {
        "line": 131,
        "fullcodeline": "} else if (filter->type == RAD_FILTER_GENERIC) {"
    },
    {
        "line": 105,
        "fullcodeline": "if (filter->u.ipx.srcSocComp > RAD_NO_COMPARE) {"
    },
    {
        "line": 124,
        "fullcodeline": "if (filter->u.ipx.dstSocComp > RAD_NO_COMPARE) {"
    },
    {
        "line": 134,
        "fullcodeline": "i = snprintf(p, outlen, \" %u \", (unsigned int) ntohs(filter->u.generic.offset));"
    },
    {
        "line": 135,
        "fullcodeline": "p += i;"
    },
    {
        "line": 144,
        "fullcodeline": "strcpy(p, \" \");"
    },
    {
        "line": 145,
        "fullcodeline": "p++;"
    },
    {
        "line": 146,
        "fullcodeline": "outlen--;"
    },
    {
        "line": 155,
        "fullcodeline": "i = snprintf(p, outlen, \" %s\", (filter->u.generic.compNeq) ? \"!=\" : \"==\");"
    },
    {
        "line": 156,
        "fullcodeline": "p += i;"
    },
    {
        "line": 157,
        "fullcodeline": "outlen -= i;"
    },
    {
        "line": 106,
        "fullcodeline": "i = snprintf(p, outlen, \" srcipxsock %s 0x%04x\","
    },
    {
        "line": 109,
        "fullcodeline": "p += i;"
    },
    {
        "line": 110,
        "fullcodeline": "outlen -= i;"
    },
    {
        "line": 125,
        "fullcodeline": "i = snprintf(p, outlen, \" dstipxsock %s 0x%04x\","
    },
    {
        "line": 128,
        "fullcodeline": "p += i;"
    },
    {
        "line": 138,
        "fullcodeline": "for (count = 0; count < ntohs(filter->u.generic.len); count++) {"
    },
    {
        "line": 149,
        "fullcodeline": "for (count = 0; count < ntohs(filter->u.generic.len); count++) {"
    },
    {
        "line": 98,
        "fullcodeline": "(unsigned int)ntohl(filter->u.ipx.src.net),"
    },
    {
        "line": 117,
        "fullcodeline": "(unsigned int)ntohl(filter->u.ipx.dst.net),"
    },
    {
        "line": 139,
        "fullcodeline": "i = snprintf(p, outlen, \"%02x\", filter->u.generic.mask[count]);"
    },
    {
        "line": 140,
        "fullcodeline": "p += i;"
    },
    {
        "line": 141,
        "fullcodeline": "outlen -= i;"
    },
    {
        "line": 150,
        "fullcodeline": "i = snprintf(p, outlen, \"%02x\", filter->u.generic.value[count]);"
    },
    {
        "line": 151,
        "fullcodeline": "p += i;"
    },
    {
        "line": 152,
        "fullcodeline": "outlen -= i;"
    },
    {
        "line": 160,
        "fullcodeline": "i = snprintf(p, outlen, \" more\");"
    },
    {
        "line": 161,
        "fullcodeline": "p += i;"
    },
    {
        "line": 107,
        "fullcodeline": "fr_int2str(filterCompare, filter->u.ipx.srcSocComp, \"??\"),"
    },
    {
        "line": 108,
        "fullcodeline": "ntohs(filter->u.ipx.src.socket));"
    },
    {
        "line": 126,
        "fullcodeline": "fr_int2str(filterCompare, filter->u.ipx.dstSocComp, \"??\"),"
    },
    {
        "line": 127,
        "fullcodeline": "ntohs(filter->u.ipx.dst.socket));"
    }
]