[
    {
        "line": 4,
        "fullcodeline": "video_conv_info_t *video_conv_info = NULL;"
    },
    {
        "line": 5,
        "fullcodeline": "video_entity_t    *entity          = NULL;"
    },
    {
        "line": 6,
        "fullcodeline": "proto_item *item          = NULL;"
    },
    {
        "line": 7,
        "fullcodeline": "proto_item *subtype_item  = NULL;"
    },
    {
        "line": 8,
        "fullcodeline": "proto_tree *tree          = NULL;"
    },
    {
        "line": 9,
        "fullcodeline": "guint8      entity_id     = 0;"
    },
    {
        "line": 10,
        "fullcodeline": "guint16     terminal_type = 0;"
    },
    {
        "line": 11,
        "fullcodeline": "int         offset        = 0;"
    },
    {
        "line": 14,
        "fullcodeline": "subtype = tvb_get_guint8(tvb, offset+2);"
    },
    {
        "line": 28,
        "fullcodeline": "dissect_usb_descriptor_header(tree, tvb, offset, &vid_descriptor_type_vals_ext);"
    },
    {
        "line": 29,
        "fullcodeline": "subtype_item = proto_tree_add_item(tree, hf_usb_vid_control_ifdesc_subtype, tvb, offset+2, 1, ENC_LITTLE_ENDIAN);"
    },
    {
        "line": 30,
        "fullcodeline": "offset += 3;"
    },
    {
        "line": 32,
        "fullcodeline": "if (subtype == VC_HEADER)"
    },
    {
        "line": 121,
        "fullcodeline": "if (offset < descriptor_len)"
    },
    {
        "line": 127,
        "fullcodeline": "if (entity_id != 0)"
    },
    {
        "line": 130,
        "fullcodeline": "if (subtype != VC_HEADER && usb_conv_info)"
    },
    {
        "line": 20,
        "fullcodeline": "subtype_str = val_to_str_ext(subtype, &vc_if_descriptor_subtypes_ext, \"Unknown (0x%x)\");"
    },
    {
        "line": 22,
        "fullcodeline": "tree = proto_tree_add_subtree_format(parent_tree, tvb, offset, descriptor_len,"
    },
    {
        "line": 36,
        "fullcodeline": "proto_tree_add_item(tree, hf_usb_vid_control_ifdesc_bcdUVC,            tvb, offset,   2, ENC_LITTLE_ENDIAN);"
    },
    {
        "line": 37,
        "fullcodeline": "proto_tree_add_item(tree, hf_usb_vid_ifdesc_wTotalLength,              tvb, offset+2, 2, ENC_LITTLE_ENDIAN);"
    },
    {
        "line": 38,
        "fullcodeline": "proto_tree_add_item(tree, hf_usb_vid_control_ifdesc_dwClockFrequency,  tvb, offset+4, 4, ENC_LITTLE_ENDIAN);"
    },
    {
        "line": 40,
        "fullcodeline": "num_vs_interfaces = tvb_get_guint8(tvb, offset+8);"
    },
    {
        "line": 41,
        "fullcodeline": "proto_tree_add_item(tree, hf_usb_vid_control_ifdesc_bInCollection,     tvb, offset+8, 1, ENC_LITTLE_ENDIAN);"
    },
    {
        "line": 48,
        "fullcodeline": "offset += 9 + num_vs_interfaces;"
    },
    {
        "line": 123,
        "fullcodeline": "proto_tree_add_item(tree, hf_usb_vid_descriptor_data, tvb, offset, descriptor_len-offset, ENC_NA);"
    },
    {
        "line": 128,
        "fullcodeline": "proto_item_append_text(item, \" (Entity %d)\", entity_id);"
    },
    {
        "line": 133,
        "fullcodeline": "usb_conv_info = get_usb_iface_conv_info(pinfo, usb_conv_info->interfaceNum);"
    },
    {
        "line": 134,
        "fullcodeline": "video_conv_info = (video_conv_info_t *)usb_conv_info->class_data;"
    },
    {
        "line": 143,
        "fullcodeline": "entity = (video_entity_t*) wmem_tree_lookup32(video_conv_info->entities, entity_id);"
    },
    {
        "line": 43,
        "fullcodeline": "if (num_vs_interfaces > 0)"
    },
    {
        "line": 136,
        "fullcodeline": "if (!video_conv_info)"
    },
    {
        "line": 144,
        "fullcodeline": "if (!entity)"
    },
    {
        "line": 45,
        "fullcodeline": "proto_tree_add_item(tree, hf_usb_vid_control_ifdesc_baInterfaceNr, tvb, offset+9, num_vs_interfaces, ENC_NA);"
    },
    {
        "line": 50,
        "fullcodeline": "else if ((subtype == VC_INPUT_TERMINAL) || (subtype == VC_OUTPUT_TERMINAL))"
    },
    {
        "line": 138,
        "fullcodeline": "video_conv_info = wmem_new(wmem_file_scope(), video_conv_info_t);"
    },
    {
        "line": 139,
        "fullcodeline": "video_conv_info->entities = wmem_tree_new(wmem_file_scope());"
    },
    {
        "line": 140,
        "fullcodeline": "usb_conv_info->class_data = video_conv_info;"
    },
    {
        "line": 146,
        "fullcodeline": "entity = wmem_new(wmem_file_scope(), video_entity_t);"
    },
    {
        "line": 147,
        "fullcodeline": "entity->entityID     = entity_id;"
    },
    {
        "line": 148,
        "fullcodeline": "entity->subtype      = subtype;"
    },
    {
        "line": 149,
        "fullcodeline": "entity->terminalType = terminal_type;"
    },
    {
        "line": 151,
        "fullcodeline": "wmem_tree_insert32(video_conv_info->entities, entity_id, entity);"
    },
    {
        "line": 53,
        "fullcodeline": "entity_id     = tvb_get_guint8(tvb, offset);"
    },
    {
        "line": 54,
        "fullcodeline": "terminal_type = tvb_get_letohs(tvb, offset+1);"
    },
    {
        "line": 56,
        "fullcodeline": "proto_tree_add_item(tree, hf_usb_vid_control_ifdesc_terminal_id,    tvb, offset,   1, ENC_LITTLE_ENDIAN);"
    },
    {
        "line": 57,
        "fullcodeline": "proto_tree_add_item(tree, hf_usb_vid_control_ifdesc_terminal_type,  tvb, offset+1, 2, ENC_LITTLE_ENDIAN);"
    },
    {
        "line": 58,
        "fullcodeline": "proto_tree_add_item(tree, hf_usb_vid_control_ifdesc_assoc_terminal, tvb, offset+3, 1, ENC_LITTLE_ENDIAN);"
    },
    {
        "line": 59,
        "fullcodeline": "offset += 4;"
    },
    {
        "line": 67,
        "fullcodeline": "proto_tree_add_item(tree, hf_usb_vid_control_ifdesc_iTerminal, tvb, offset, 1, ENC_LITTLE_ENDIAN);"
    },
    {
        "line": 68,
        "fullcodeline": "++offset;"
    },
    {
        "line": 61,
        "fullcodeline": "if (subtype == VC_OUTPUT_TERMINAL)"
    },
    {
        "line": 70,
        "fullcodeline": "if (subtype == VC_INPUT_TERMINAL)"
    },
    {
        "line": 82,
        "fullcodeline": "if (subtype == VC_OUTPUT_TERMINAL)"
    },
    {
        "line": 93,
        "fullcodeline": "entity_id = tvb_get_guint8(tvb, offset);"
    },
    {
        "line": 94,
        "fullcodeline": "proto_tree_add_item(tree, hf_usb_vid_control_ifdesc_unit_id, tvb, offset, 1, ENC_LITTLE_ENDIAN);"
    },
    {
        "line": 95,
        "fullcodeline": "++offset;"
    },
    {
        "line": 63,
        "fullcodeline": "proto_tree_add_item(tree, hf_usb_vid_control_ifdesc_src_id, tvb, offset, 1, ENC_LITTLE_ENDIAN);"
    },
    {
        "line": 64,
        "fullcodeline": "++offset;"
    },
    {
        "line": 97,
        "fullcodeline": "if (subtype == VC_PROCESSING_UNIT)"
    },
    {
        "line": 72,
        "fullcodeline": "if (terminal_type == ITT_CAMERA)"
    },
    {
        "line": 84,
        "fullcodeline": "if (terminal_type == OTT_MEDIA_TRANSPORT_OUTPUT)"
    },
    {
        "line": 99,
        "fullcodeline": "offset = dissect_usb_video_processing_unit(tree, tvb, offset);"
    },
    {
        "line": 74,
        "fullcodeline": "offset = dissect_usb_video_camera_terminal(tree, tvb, offset);"
    },
    {
        "line": 101,
        "fullcodeline": "else if (subtype == VC_SELECTOR_UNIT)"
    },
    {
        "line": 76,
        "fullcodeline": "else if (terminal_type == ITT_MEDIA_TRANSPORT_INPUT)"
    },
    {
        "line": 103,
        "fullcodeline": "offset = dissect_usb_video_selector_unit(tree, tvb, offset);"
    },
    {
        "line": 105,
        "fullcodeline": "else if (subtype == VC_EXTENSION_UNIT)"
    },
    {
        "line": 107,
        "fullcodeline": "offset = dissect_usb_video_extension_unit(tree, tvb, offset);"
    },
    {
        "line": 109,
        "fullcodeline": "else if (subtype == VC_ENCODING_UNIT)"
    },
    {
        "line": 115,
        "fullcodeline": "expert_add_info_format(pinfo, subtype_item, &ei_usb_vid_subtype_unknown,"
    }
]