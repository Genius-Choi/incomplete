[
    {
        "line": 4,
        "fullcodeline": "struct host_query *hquery = (struct host_query*)arg;"
    },
    {
        "line": 5,
        "fullcodeline": "int addinfostatus = ARES_SUCCESS;"
    },
    {
        "line": 6,
        "fullcodeline": "hquery->timeouts += timeouts;"
    },
    {
        "line": 7,
        "fullcodeline": "hquery->remaining--;"
    },
    {
        "line": 9,
        "fullcodeline": "if (status == ARES_SUCCESS)"
    },
    {
        "line": 18,
        "fullcodeline": "if (!hquery->remaining)"
    },
    {
        "line": 11,
        "fullcodeline": "addinfostatus = ares__parse_into_addrinfo(abuf, alen, hquery->ai);"
    },
    {
        "line": 20,
        "fullcodeline": "if (addinfostatus != ARES_SUCCESS)"
    },
    {
        "line": 13,
        "fullcodeline": "else if (status == ARES_EDESTRUCTION)"
    },
    {
        "line": 23,
        "fullcodeline": "end_hquery(hquery, addinfostatus);"
    },
    {
        "line": 15,
        "fullcodeline": "end_hquery(hquery, status);"
    },
    {
        "line": 28,
        "fullcodeline": "end_hquery(hquery, ARES_SUCCESS);"
    },
    {
        "line": 30,
        "fullcodeline": "else if (status == ARES_ENOTFOUND)"
    },
    {
        "line": 32,
        "fullcodeline": "next_lookup(hquery, status);"
    },
    {
        "line": 36,
        "fullcodeline": "end_hquery(hquery, status);"
    }
]