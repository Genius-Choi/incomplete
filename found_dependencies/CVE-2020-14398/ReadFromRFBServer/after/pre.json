[
    {
        "line": 3,
        "fullcodeline": "const int USECS_WAIT_PER_RETRY = 100000;"
    },
    {
        "line": 4,
        "fullcodeline": "int retries = 0;"
    },
    {
        "line": 63,
        "fullcodeline": "memcpy(out, client->bufoutptr, client->buffered);"
    },
    {
        "line": 65,
        "fullcodeline": "out += client->buffered;"
    },
    {
        "line": 66,
        "fullcodeline": "n -= client->buffered;"
    },
    {
        "line": 68,
        "fullcodeline": "client->bufoutptr = client->buf;"
    },
    {
        "line": 69,
        "fullcodeline": "client->buffered = 0;"
    },
    {
        "line": 15,
        "fullcodeline": "if(!out)"
    },
    {
        "line": 18,
        "fullcodeline": "if (client->serverPort==-1) {"
    },
    {
        "line": 53,
        "fullcodeline": "if (n <= client->buffered) {"
    },
    {
        "line": 71,
        "fullcodeline": "if (n <= RFB_BUF_SIZE) {"
    },
    {
        "line": 20,
        "fullcodeline": "rfbVNCRec* rec = client->vncRec;"
    },
    {
        "line": 54,
        "fullcodeline": "memcpy(out, client->bufoutptr, n);"
    },
    {
        "line": 119,
        "fullcodeline": "memcpy(out, client->bufoutptr, n);"
    },
    {
        "line": 50,
        "fullcodeline": "return (fread(out,1,n,rec->file) != n ? FALSE : TRUE);"
    },
    {
        "line": 73,
        "fullcodeline": "while (client->buffered < n) {"
    },
    {
        "line": 28,
        "fullcodeline": "tv.tv_sec = rfbClientSwap32IfLE (tv.tv_sec);"
    },
    {
        "line": 29,
        "fullcodeline": "tv.tv_usec = rfbClientSwap32IfLE (tv.tv_usec);"
    },
    {
        "line": 116,
        "fullcodeline": "client->buffered += i;"
    },
    {
        "line": 125,
        "fullcodeline": "while (n > 0) {"
    },
    {
        "line": 91,
        "fullcodeline": "if (i <= 0) {"
    },
    {
        "line": 165,
        "fullcodeline": "out += i;"
    },
    {
        "line": 166,
        "fullcodeline": "n -= i;"
    },
    {
        "line": 25,
        "fullcodeline": "if (!fread(&tv,sizeof(struct timeval),1,rec->file))"
    },
    {
        "line": 31,
        "fullcodeline": "if (rec->tv.tv_sec!=0 && !rec->doNotSleep) {"
    },
    {
        "line": 33,
        "fullcodeline": "diff.tv_sec = tv.tv_sec - rec->tv.tv_sec;"
    },
    {
        "line": 34,
        "fullcodeline": "diff.tv_usec = tv.tv_usec - rec->tv.tv_usec;"
    },
    {
        "line": 76,
        "fullcodeline": "i = ReadFromTLS(client, client->buf + client->buffered, RFB_BUF_SIZE - client->buffered);"
    },
    {
        "line": 137,
        "fullcodeline": "if (i <= 0) {"
    },
    {
        "line": 35,
        "fullcodeline": "if(diff.tv_usec<0) {"
    },
    {
        "line": 83,
        "fullcodeline": "i = read(client->sock, client->buf + client->buffered, RFB_BUF_SIZE - client->buffered);"
    },
    {
        "line": 128,
        "fullcodeline": "i = ReadFromTLS(client, out, n);"
    },
    {
        "line": 36,
        "fullcodeline": "diff.tv_sec--;"
    },
    {
        "line": 37,
        "fullcodeline": "diff.tv_usec+=1000000;"
    },
    {
        "line": 135,
        "fullcodeline": "i = read(client->sock, out, n);"
    },
    {
        "line": 93,
        "fullcodeline": "if (errno == EWOULDBLOCK || errno == EAGAIN) {"
    },
    {
        "line": 103,
        "fullcodeline": "WaitForMessage(client, USECS_WAIT_PER_RETRY);"
    },
    {
        "line": 104,
        "fullcodeline": "i = 0;"
    },
    {
        "line": 142,
        "fullcodeline": "if (errno == EWOULDBLOCK || errno == EAGAIN) {"
    },
    {
        "line": 152,
        "fullcodeline": "WaitForMessage(client, USECS_WAIT_PER_RETRY);"
    },
    {
        "line": 153,
        "fullcodeline": "i = 0;"
    },
    {
        "line": 94,
        "fullcodeline": "if (client->readTimeout > 0 &&"
    },
    {
        "line": 95,
        "fullcodeline": "++retries > (client->readTimeout * 1000 * 1000 / USECS_WAIT_PER_RETRY))"
    },
    {
        "line": 106,
        "fullcodeline": "rfbClientErr(\"read (%d: %s)\\n\",errno,strerror(errno));"
    },
    {
        "line": 143,
        "fullcodeline": "if (client->readTimeout > 0 &&"
    },
    {
        "line": 144,
        "fullcodeline": "++retries > (client->readTimeout * 1000 * 1000 / USECS_WAIT_PER_RETRY))"
    },
    {
        "line": 155,
        "fullcodeline": "rfbClientErr(\"read (%s)\\n\",strerror(errno));"
    }
]