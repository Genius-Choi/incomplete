[
    {
        "line": 3,
        "fullcodeline": "class ColorTrafo *ctrafo = ColorTrafoOf(false,!rr->rr_bColorTrafo);"
    },
    {
        "line": 6,
        "fullcodeline": "if (m_bSubsampling && rr->rr_bUpsampling) {"
    },
    {
        "line": 7,
        "fullcodeline": "for(i = rr->rr_usFirstComponent;i <= rr->rr_usLastComponent;i++) {"
    },
    {
        "line": 50,
        "fullcodeline": "RectAngle<LONG> r;"
    },
    {
        "line": 51,
        "fullcodeline": "ULONG minx   = orgregion.ra_MinX >> 3;"
    },
    {
        "line": 52,
        "fullcodeline": "ULONG maxx   = orgregion.ra_MaxX >> 3;"
    },
    {
        "line": 53,
        "fullcodeline": "ULONG miny   = orgregion.ra_MinY >> 3;"
    },
    {
        "line": 54,
        "fullcodeline": "ULONG maxy   = orgregion.ra_MaxY >> 3;"
    },
    {
        "line": 99,
        "fullcodeline": "RectAngle<LONG> r;"
    },
    {
        "line": 101,
        "fullcodeline": "SubsampledRegion(region,rr);"
    },
    {
        "line": 102,
        "fullcodeline": "ULONG minx   = region.ra_MinX >> 3;"
    },
    {
        "line": 103,
        "fullcodeline": "ULONG maxx   = region.ra_MaxX >> 3;"
    },
    {
        "line": 104,
        "fullcodeline": "ULONG miny   = region.ra_MinY >> 3;"
    },
    {
        "line": 105,
        "fullcodeline": "ULONG maxy   = region.ra_MaxY >> 3;"
    },
    {
        "line": 8,
        "fullcodeline": "class Component *comp = m_pFrame->ComponentOf(i);"
    },
    {
        "line": 9,
        "fullcodeline": "UBYTE subx            = comp->SubXOf();"
    },
    {
        "line": 10,
        "fullcodeline": "UBYTE suby            = comp->SubYOf();"
    },
    {
        "line": 13,
        "fullcodeline": "RectAngle<LONG> blocks;"
    },
    {
        "line": 16,
        "fullcodeline": "assert(subx > 0 && suby > 0);"
    },
    {
        "line": 57,
        "fullcodeline": "if (maxy > m_ulMaxMCU)"
    },
    {
        "line": 60,
        "fullcodeline": "for(y = miny,r.ra_MinY = orgregion.ra_MinY;y <= maxy;y++,r.ra_MinY = r.ra_MaxY + 1) {"
    },
    {
        "line": 100,
        "fullcodeline": "RectAngle<LONG> region = orgregion;"
    },
    {
        "line": 108,
        "fullcodeline": "if (maxy > m_ulMaxMCU)"
    },
    {
        "line": 111,
        "fullcodeline": "for(y = miny,r.ra_MinY = region.ra_MinY;y <= maxy;y++,r.ra_MinY = r.ra_MaxY + 1) {"
    },
    {
        "line": 17,
        "fullcodeline": "if ((up = m_ppUpsampler[i])) {"
    },
    {
        "line": 58,
        "fullcodeline": "maxy = m_ulMaxMCU;"
    },
    {
        "line": 61,
        "fullcodeline": "r.ra_MaxY = (r.ra_MinY & -8) + 7;"
    },
    {
        "line": 109,
        "fullcodeline": "maxy = m_ulMaxMCU;"
    },
    {
        "line": 112,
        "fullcodeline": "r.ra_MaxY = (r.ra_MinY & -8) + 7;"
    },
    {
        "line": 18,
        "fullcodeline": "LONG bwidth           = ((m_ulPixelWidth  + subx - 1) / subx + 7) >> 3;"
    },
    {
        "line": 19,
        "fullcodeline": "LONG bheight          = ((m_ulPixelHeight + suby - 1) / suby + 7) >> 3;"
    },
    {
        "line": 20,
        "fullcodeline": "LONG rx               = (subx > 1)?(1):(0);"
    },
    {
        "line": 21,
        "fullcodeline": "LONG ry               = (suby > 1)?(1):(0);"
    },
    {
        "line": 23,
        "fullcodeline": "blocks.ra_MinX        = ((orgregion.ra_MinX / subx - rx) >> 3);"
    },
    {
        "line": 24,
        "fullcodeline": "blocks.ra_MaxX        = ((orgregion.ra_MaxX / subx + rx) >> 3);"
    },
    {
        "line": 25,
        "fullcodeline": "blocks.ra_MinY        = ((orgregion.ra_MinY / suby - ry) >> 3);"
    },
    {
        "line": 26,
        "fullcodeline": "blocks.ra_MaxY        = ((orgregion.ra_MaxY / suby + ry) >> 3);"
    },
    {
        "line": 32,
        "fullcodeline": "up->SetBufferedRegion(blocks); // also removes the rectangle of blocks already buffered."
    },
    {
        "line": 62,
        "fullcodeline": "if (r.ra_MaxY > orgregion.ra_MaxY)"
    },
    {
        "line": 65,
        "fullcodeline": "for(x = minx,r.ra_MinX = orgregion.ra_MinX;x <= maxx;x++,r.ra_MinX = r.ra_MaxX + 1) {"
    },
    {
        "line": 92,
        "fullcodeline": "for(i = rr->rr_usFirstComponent;i <= rr->rr_usLastComponent;i++) {"
    },
    {
        "line": 113,
        "fullcodeline": "if (r.ra_MaxY > region.ra_MaxY)"
    },
    {
        "line": 116,
        "fullcodeline": "for(x = minx,r.ra_MinX = region.ra_MinX;x <= maxx;x++,r.ra_MinX = r.ra_MaxX + 1) {"
    },
    {
        "line": 140,
        "fullcodeline": "for(i = rr->rr_usFirstComponent;i <= rr->rr_usLastComponent;i++) {"
    },
    {
        "line": 28,
        "fullcodeline": "if (blocks.ra_MinX < 0)        blocks.ra_MinX = 0;"
    },
    {
        "line": 29,
        "fullcodeline": "if (blocks.ra_MaxX >= bwidth)  blocks.ra_MaxX = bwidth - 1;"
    },
    {
        "line": 30,
        "fullcodeline": "if (blocks.ra_MinY < 0)        blocks.ra_MinY = 0;"
    },
    {
        "line": 31,
        "fullcodeline": "if (blocks.ra_MaxY >= bheight) blocks.ra_MaxY = bheight - 1;"
    },
    {
        "line": 34,
        "fullcodeline": "for(by = blocks.ra_MinY;by <= blocks.ra_MaxY;by++) {"
    },
    {
        "line": 63,
        "fullcodeline": "r.ra_MaxY = orgregion.ra_MaxY;"
    },
    {
        "line": 66,
        "fullcodeline": "r.ra_MaxX = (r.ra_MinX & -8) + 7;"
    },
    {
        "line": 87,
        "fullcodeline": "ctrafo->YCbCr2RGB(r,m_ppTempIBM,m_ppCTemp,NULL);"
    },
    {
        "line": 114,
        "fullcodeline": "r.ra_MaxY = region.ra_MaxY;"
    },
    {
        "line": 117,
        "fullcodeline": "r.ra_MaxX = (r.ra_MinX & -8) + 7;"
    },
    {
        "line": 136,
        "fullcodeline": "ctrafo->YCbCr2RGB(r,m_ppTempIBM,m_ppCTemp,NULL);"
    },
    {
        "line": 141,
        "fullcodeline": "Next8Lines(i);"
    },
    {
        "line": 44,
        "fullcodeline": "Next8Lines(i);"
    },
    {
        "line": 67,
        "fullcodeline": "if (r.ra_MaxX > orgregion.ra_MaxX)"
    },
    {
        "line": 70,
        "fullcodeline": "for(i = 0;i < m_ucCount;i++) {"
    },
    {
        "line": 93,
        "fullcodeline": "if (m_ppUpsampler[i] == NULL)"
    },
    {
        "line": 118,
        "fullcodeline": "if (r.ra_MaxX > region.ra_MaxX)"
    },
    {
        "line": 121,
        "fullcodeline": "for(i = 0;i < m_ucCount;i++) {"
    },
    {
        "line": 35,
        "fullcodeline": "for(bx = blocks.ra_MinX;bx <= blocks.ra_MaxX;bx++) {"
    },
    {
        "line": 68,
        "fullcodeline": "r.ra_MaxX = orgregion.ra_MaxX;"
    },
    {
        "line": 94,
        "fullcodeline": "Next8Lines(i);"
    },
    {
        "line": 119,
        "fullcodeline": "r.ra_MaxX = region.ra_MaxX;"
    },
    {
        "line": 122,
        "fullcodeline": "LONG *dst = m_ppCTemp[i];"
    },
    {
        "line": 36,
        "fullcodeline": "LONG dst[64];"
    },
    {
        "line": 42,
        "fullcodeline": "up->DefineRegion(bx,by,dst);"
    },
    {
        "line": 71,
        "fullcodeline": "if (i >= rr->rr_usFirstComponent && i <= rr->rr_usLastComponent) {"
    },
    {
        "line": 72,
        "fullcodeline": "ExtractBitmap(m_ppTempIBM[i],r,i);"
    },
    {
        "line": 123,
        "fullcodeline": "if (i >= rr->rr_usFirstComponent && i <= rr->rr_usLastComponent) {"
    },
    {
        "line": 124,
        "fullcodeline": "ExtractBitmap(m_ppTempIBM[i],r,i);"
    },
    {
        "line": 38,
        "fullcodeline": "FetchRegion(bx,*m_pppImage[i],dst);"
    },
    {
        "line": 84,
        "fullcodeline": "memset(m_ppCTemp[i],0,sizeof(LONG) * 64);"
    },
    {
        "line": 40,
        "fullcodeline": "memset(dst,0,sizeof(dst));"
    },
    {
        "line": 76,
        "fullcodeline": "m_ppUpsampler[i]->UpsampleRegion(r,m_ppCTemp[i]);"
    },
    {
        "line": 126,
        "fullcodeline": "FetchRegion(x,*m_pppImage[i],dst);"
    },
    {
        "line": 131,
        "fullcodeline": "memset(dst,0,sizeof(LONG) * 64);"
    },
    {
        "line": 128,
        "fullcodeline": "memset(dst,0,sizeof(LONG) * 64);"
    },
    {
        "line": 78,
        "fullcodeline": "FetchRegion(x,*m_pppImage[i],m_ppCTemp[i]);"
    },
    {
        "line": 80,
        "fullcodeline": "memset(m_ppCTemp[0],0,sizeof(LONG) * 64);"
    }
]