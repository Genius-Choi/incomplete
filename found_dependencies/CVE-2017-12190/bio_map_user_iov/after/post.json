[
    {
        "line": 6,
        "fullcodeline": "int nr_pages = 0;"
    },
    {
        "line": 9,
        "fullcodeline": "int cur_page = 0;"
    },
    {
        "line": 14,
        "fullcodeline": "iov_for_each(iov, i, *iter) {"
    },
    {
        "line": 37,
        "fullcodeline": "bio = bio_kmalloc(gfp_mask, nr_pages);"
    },
    {
        "line": 41,
        "fullcodeline": "ret = -ENOMEM;"
    },
    {
        "line": 42,
        "fullcodeline": "pages = kcalloc(nr_pages, sizeof(struct page *), gfp_mask);"
    },
    {
        "line": 46,
        "fullcodeline": "iov_for_each(iov, i, *iter) {"
    },
    {
        "line": 99,
        "fullcodeline": "kfree(pages);"
    },
    {
        "line": 101,
        "fullcodeline": "bio_set_flag(bio, BIO_USER_MAPPED);"
    },
    {
        "line": 109,
        "fullcodeline": "bio_get(bio);"
    },
    {
        "line": 119,
        "fullcodeline": "kfree(pages);"
    },
    {
        "line": 120,
        "fullcodeline": "bio_put(bio);"
    },
    {
        "line": 15,
        "fullcodeline": "unsigned long uaddr = (unsigned long) iov.iov_base;"
    },
    {
        "line": 16,
        "fullcodeline": "unsigned long len = iov.iov_len;"
    },
    {
        "line": 17,
        "fullcodeline": "unsigned long end = (uaddr + len + PAGE_SIZE - 1) >> PAGE_SHIFT;"
    },
    {
        "line": 18,
        "fullcodeline": "unsigned long start = uaddr >> PAGE_SHIFT;"
    },
    {
        "line": 26,
        "fullcodeline": "nr_pages += end - start;"
    },
    {
        "line": 34,
        "fullcodeline": "if (!nr_pages)"
    },
    {
        "line": 38,
        "fullcodeline": "if (!bio)"
    },
    {
        "line": 43,
        "fullcodeline": "if (!pages)"
    },
    {
        "line": 47,
        "fullcodeline": "unsigned long uaddr = (unsigned long) iov.iov_base;"
    },
    {
        "line": 48,
        "fullcodeline": "unsigned long len = iov.iov_len;"
    },
    {
        "line": 49,
        "fullcodeline": "unsigned long end = (uaddr + len + PAGE_SIZE - 1) >> PAGE_SHIFT;"
    },
    {
        "line": 50,
        "fullcodeline": "unsigned long start = uaddr >> PAGE_SHIFT;"
    },
    {
        "line": 51,
        "fullcodeline": "const int local_nr_pages = end - start;"
    },
    {
        "line": 52,
        "fullcodeline": "const int page_limit = cur_page + local_nr_pages;"
    },
    {
        "line": 54,
        "fullcodeline": "ret = get_user_pages_fast(uaddr, local_nr_pages,"
    },
    {
        "line": 62,
        "fullcodeline": "offset = offset_in_page(uaddr);"
    },
    {
        "line": 91,
        "fullcodeline": "cur_page = j;"
    },
    {
        "line": 113,
        "fullcodeline": "for (j = 0; j < nr_pages; j++) {"
    },
    {
        "line": 121,
        "fullcodeline": "return ERR_PTR(ret);"
    },
    {
        "line": 23,
        "fullcodeline": "if (end < start)"
    },
    {
        "line": 30,
        "fullcodeline": "if (uaddr & queue_dma_alignment(q))"
    },
    {
        "line": 57,
        "fullcodeline": "if (ret < local_nr_pages) {"
    },
    {
        "line": 63,
        "fullcodeline": "for (j = cur_page; j < page_limit; j++) {"
    },
    {
        "line": 95,
        "fullcodeline": "while (j < page_limit)"
    },
    {
        "line": 96,
        "fullcodeline": "put_page(pages[j++]);"
    },
    {
        "line": 116,
        "fullcodeline": "put_page(pages[j]);"
    },
    {
        "line": 35,
        "fullcodeline": "return ERR_PTR(-EINVAL);"
    },
    {
        "line": 39,
        "fullcodeline": "return ERR_PTR(-ENOMEM);"
    },
    {
        "line": 55,
        "fullcodeline": "(iter->type & WRITE) != WRITE,"
    },
    {
        "line": 58,
        "fullcodeline": "ret = -EFAULT;"
    },
    {
        "line": 64,
        "fullcodeline": "unsigned int bytes = PAGE_SIZE - offset;"
    },
    {
        "line": 65,
        "fullcodeline": "unsigned short prev_bi_vcnt = bio->bi_vcnt;"
    },
    {
        "line": 87,
        "fullcodeline": "len -= bytes;"
    },
    {
        "line": 88,
        "fullcodeline": "offset = 0;"
    },
    {
        "line": 114,
        "fullcodeline": "if (!pages[j])"
    },
    {
        "line": 24,
        "fullcodeline": "return ERR_PTR(-EINVAL);"
    },
    {
        "line": 31,
        "fullcodeline": "return ERR_PTR(-EINVAL);"
    },
    {
        "line": 67,
        "fullcodeline": "if (len <= 0)"
    },
    {
        "line": 70,
        "fullcodeline": "if (bytes > len)"
    },
    {
        "line": 76,
        "fullcodeline": "if (bio_add_pc_page(q, bio, pages[j], bytes, offset) <"
    },
    {
        "line": 84,
        "fullcodeline": "if (bio->bi_vcnt == prev_bi_vcnt)"
    },
    {
        "line": 71,
        "fullcodeline": "bytes = len;"
    },
    {
        "line": 85,
        "fullcodeline": "put_page(pages[j]);"
    }
]