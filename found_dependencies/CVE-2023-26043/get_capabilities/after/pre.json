[
    {
        "line": 8,
        "fullcodeline": "rootdoc = None"
    },
    {
        "line": 9,
        "fullcodeline": "layers = None"
    },
    {
        "line": 10,
        "fullcodeline": "cap_name = ' Capabilities - '"
    },
    {
        "line": 11,
        "fullcodeline": "if layerid is not None:"
    },
    {
        "line": 30,
        "fullcodeline": "for layer in layers:"
    },
    {
        "line": 78,
        "fullcodeline": "if rootdoc is not None:"
    },
    {
        "line": 85,
        "fullcodeline": "return HttpResponse(status=200)"
    },
    {
        "line": 12,
        "fullcodeline": "dataset_obj = Dataset.objects.get(id=layerid)"
    },
    {
        "line": 13,
        "fullcodeline": "cap_name += dataset_obj.title"
    },
    {
        "line": 14,
        "fullcodeline": "layers = Dataset.objects.filter(id=layerid)"
    },
    {
        "line": 79,
        "fullcodeline": "capabilities = etree.tostring("
    },
    {
        "line": 15,
        "fullcodeline": "elif user is not None:"
    },
    {
        "line": 84,
        "fullcodeline": "return HttpResponse(capabilities, content_type=\"text/xml\")"
    },
    {
        "line": 16,
        "fullcodeline": "layers = Dataset.objects.filter(owner__username=user)"
    },
    {
        "line": 17,
        "fullcodeline": "cap_name += user"
    },
    {
        "line": 18,
        "fullcodeline": "elif category is not None:"
    },
    {
        "line": 31,
        "fullcodeline": "if request.user.has_perm('view_resourcebase',"
    },
    {
        "line": 33,
        "fullcodeline": "access_token = get_or_create_token(request.user)"
    },
    {
        "line": 19,
        "fullcodeline": "layers = Dataset.objects.filter(category__identifier=category)"
    },
    {
        "line": 20,
        "fullcodeline": "cap_name += category"
    },
    {
        "line": 32,
        "fullcodeline": "layer.get_self_resource()):"
    },
    {
        "line": 34,
        "fullcodeline": "if access_token and not access_token.is_expired():"
    },
    {
        "line": 21,
        "fullcodeline": "elif mapid is not None:"
    },
    {
        "line": 35,
        "fullcodeline": "access_token = access_token.token"
    },
    {
        "line": 37,
        "fullcodeline": "access_token = None"
    },
    {
        "line": 40,
        "fullcodeline": "layercap = get_dataset_capabilities(layer, access_token=access_token, tolerant=tolerant)"
    },
    {
        "line": 22,
        "fullcodeline": "map_obj = Map.objects.get(id=mapid)"
    },
    {
        "line": 23,
        "fullcodeline": "cap_name += map_obj.title"
    },
    {
        "line": 24,
        "fullcodeline": "alternates = []"
    },
    {
        "line": 28,
        "fullcodeline": "layers = Dataset.objects.filter(alternate__in=alternates)"
    },
    {
        "line": 39,
        "fullcodeline": "workspace, layername = layer.alternate.split(\":\") if \":\" in layer.alternate else (None, layer.alternate)"
    },
    {
        "line": 41,
        "fullcodeline": "if layercap is not None:  # 1st one, seed with real GetCapabilities doc"
    },
    {
        "line": 59,
        "fullcodeline": "if layercap is None or not len(layercap) or rootdoc is None or not len(rootdoc):"
    },
    {
        "line": 25,
        "fullcodeline": "for layer in map_obj.maplayers.iterator():"
    },
    {
        "line": 62,
        "fullcodeline": "tpl = get_template(\"geoserver/layer.xml\")"
    },
    {
        "line": 63,
        "fullcodeline": "ctx = {"
    },
    {
        "line": 68,
        "fullcodeline": "gc_str = tpl.render(ctx)"
    },
    {
        "line": 69,
        "fullcodeline": "gc_str = gc_str.encode(\"utf-8\", \"replace\")"
    },
    {
        "line": 70,
        "fullcodeline": "layerelem = etree.XML(gc_str, parser=etree.XMLParser(resolve_entities=False))"
    },
    {
        "line": 71,
        "fullcodeline": "rootdoc = etree.ElementTree(layerelem)"
    },
    {
        "line": 73,
        "fullcodeline": "import traceback"
    },
    {
        "line": 74,
        "fullcodeline": "traceback.print_exc()"
    },
    {
        "line": 75,
        "fullcodeline": "logger.error("
    },
    {
        "line": 77,
        "fullcodeline": "rootdoc = None"
    },
    {
        "line": 76,
        "fullcodeline": "f\"Error occurred creating GetCapabilities for {layer.typename}:{str(e)}\")"
    },
    {
        "line": 43,
        "fullcodeline": "namespaces = {'wms': 'http://www.opengis.net/wms',"
    },
    {
        "line": 46,
        "fullcodeline": "layercap = dlxml.fromstring(layercap)"
    },
    {
        "line": 47,
        "fullcodeline": "rootdoc = etree.ElementTree(layercap)"
    },
    {
        "line": 48,
        "fullcodeline": "format_online_resource(workspace, layername, rootdoc, namespaces)"
    },
    {
        "line": 49,
        "fullcodeline": "service_name = rootdoc.find('.//wms:Service/wms:Name', namespaces)"
    },
    {
        "line": 52,
        "fullcodeline": "rootdoc = rootdoc.find('.//wms:Capability/wms:Layer/wms:Layer', namespaces)"
    },
    {
        "line": 50,
        "fullcodeline": "if service_name is not None:"
    },
    {
        "line": 27,
        "fullcodeline": "alternates.append(layer.name)"
    },
    {
        "line": 51,
        "fullcodeline": "service_name.text = cap_name"
    },
    {
        "line": 54,
        "fullcodeline": "import traceback"
    },
    {
        "line": 55,
        "fullcodeline": "traceback.print_exc()"
    },
    {
        "line": 56,
        "fullcodeline": "logger.error("
    },
    {
        "line": 58,
        "fullcodeline": "rootdoc = None"
    },
    {
        "line": 57,
        "fullcodeline": "f\"Error occurred creating GetCapabilities for {layer.typename}: {str(e)}\")"
    }
]