[
    {
        "line": 4,
        "fullcodeline": "BER_Decoder ber(bits, len);"
    },
    {
        "line": 5,
        "fullcodeline": "BER_Object obj = ber.get_next_object();"
    },
    {
        "line": 7,
        "fullcodeline": "if(obj.type() == ASN1_Type::ObjectId) {"
    },
    {
        "line": 13,
        "fullcodeline": "if(obj.type() == ASN1_Type::Sequence) {"
    },
    {
        "line": 67,
        "fullcodeline": "if(obj.type() == ASN1_Type::Null) {"
    },
    {
        "line": 9,
        "fullcodeline": "BER_Decoder(bits, len).decode(dom_par_oid);"
    },
    {
        "line": 15,
        "fullcodeline": "std::vector<uint8_t> base_pt;"
    },
    {
        "line": 16,
        "fullcodeline": "std::vector<uint8_t> seed;"
    },
    {
        "line": 18,
        "fullcodeline": "BER_Decoder(bits, len)"
    },
    {
        "line": 60,
        "fullcodeline": "std::pair<BigInt, BigInt> base_xy = Botan::OS2ECP(base_pt.data(), base_pt.size(), p, a, b);"
    },
    {
        "line": 62,
        "fullcodeline": "auto data ="
    },
    {
        "line": 10,
        "fullcodeline": "return std::make_pair(ec_group_data().lookup(dom_par_oid), false);"
    },
    {
        "line": 20,
        "fullcodeline": ".decode_and_check<size_t>(1, \"Unknown ECC param version code\")"
    },
    {
        "line": 36,
        "fullcodeline": "if(p.bits() < 112 || p.bits() > 1024) {"
    },
    {
        "line": 40,
        "fullcodeline": "if(p.is_negative() || !is_bailie_psw_probable_prime(p)) {"
    },
    {
        "line": 44,
        "fullcodeline": "if(a.is_negative() || a >= p) {"
    },
    {
        "line": 48,
        "fullcodeline": "if(b <= 0 || b >= p) {"
    },
    {
        "line": 52,
        "fullcodeline": "if(order <= 0 || !is_bailie_psw_probable_prime(order)) {"
    },
    {
        "line": 56,
        "fullcodeline": "if(cofactor <= 0 || cofactor >= 16) {"
    },
    {
        "line": 63,
        "fullcodeline": "ec_group_data().lookup_or_create(p, a, b, base_xy.first, base_xy.second, order, cofactor, OID(), source);"
    },
    {
        "line": 64,
        "fullcodeline": "return std::make_pair(data, true);"
    },
    {
        "line": 68,
        "fullcodeline": "throw Decoding_Error(\"Cannot handle ImplicitCA ECC parameters\");"
    },
    {
        "line": 70,
        "fullcodeline": "throw Decoding_Error(fmt(\"Unexpected tag {} while decoding ECC domain params\", asn1_tag_to_string(obj.type())));"
    },
    {
        "line": 37,
        "fullcodeline": "throw Decoding_Error(\"ECC p parameter is invalid size\");"
    },
    {
        "line": 41,
        "fullcodeline": "throw Decoding_Error(\"ECC p parameter is not a prime\");"
    },
    {
        "line": 45,
        "fullcodeline": "throw Decoding_Error(\"Invalid ECC a parameter\");"
    },
    {
        "line": 49,
        "fullcodeline": "throw Decoding_Error(\"Invalid ECC b parameter\");"
    },
    {
        "line": 53,
        "fullcodeline": "throw Decoding_Error(\"Invalid ECC order parameter\");"
    },
    {
        "line": 57,
        "fullcodeline": "throw Decoding_Error(\"Invalid ECC cofactor parameter\");"
    },
    {
        "line": 22,
        "fullcodeline": ".decode_and_check(OID(\"1.2.840.10045.1.1\"), \"Only prime ECC fields supported\")"
    }
]