[
    {
        "line": 5,
        "fullcodeline": "u32 i, count = gf_list_count(ctx->tracks);"
    },
    {
        "line": 6,
        "fullcodeline": "TrackWriter *ref_tkw = NULL;"
    },
    {
        "line": 7,
        "fullcodeline": "u64 min_dts = 0;"
    },
    {
        "line": 8,
        "fullcodeline": "u32 min_dts_scale=0;"
    },
    {
        "line": 9,
        "fullcodeline": "u32 def_fake_dur=0;"
    },
    {
        "line": 10,
        "fullcodeline": "u32 def_fake_scale=0;"
    },
    {
        "line": 14,
        "fullcodeline": "u32 nb_segments=0;"
    },
    {
        "line": 16,
        "fullcodeline": "ctx->single_file = GF_TRUE;"
    },
    {
        "line": 17,
        "fullcodeline": "ctx->current_offset = ctx->current_size = 0;"
    },
    {
        "line": 18,
        "fullcodeline": "max_dur.den = 1;"
    },
    {
        "line": 19,
        "fullcodeline": "max_dur.num = 0;"
    },
    {
        "line": 263,
        "fullcodeline": "ctx->ref_tkw = gf_list_get(ctx->tracks, 0);"
    },
    {
        "line": 315,
        "fullcodeline": "e = gf_isom_finalize_for_fragment(ctx->file, ctx->dash_mode ? 1 : 0, ctx->mvex);"
    },
    {
        "line": 320,
        "fullcodeline": "ctx->init_movie_done = GF_TRUE;"
    },
    {
        "line": 326,
        "fullcodeline": "ctx->next_frag_start += ctx->cdur.num;"
    },
    {
        "line": 327,
        "fullcodeline": "ctx->adjusted_next_frag_start = ctx->next_frag_start;"
    },
    {
        "line": 328,
        "fullcodeline": "ctx->fragment_started = GF_FALSE;"
    },
    {
        "line": 21,
        "fullcodeline": "if (ctx->sseg && ctx->noinit)"
    },
    {
        "line": 24,
        "fullcodeline": "if (ctx->dur.num && ctx->dur.den) {"
    },
    {
        "line": 31,
        "fullcodeline": "for (i=0; i<count; i++) {"
    },
    {
        "line": 87,
        "fullcodeline": "for (i=0; i<count; i++) {"
    },
    {
        "line": 243,
        "fullcodeline": "if (max_dur.num && max_dur.den) {"
    },
    {
        "line": 265,
        "fullcodeline": "if (!ctx->abs_offset) {"
    },
    {
        "line": 307,
        "fullcodeline": "if (ctx->boxpatch && !ctx->box_patched) {"
    },
    {
        "line": 338,
        "fullcodeline": "assert(!ctx->dst_pck);"
    },
    {
        "line": 341,
        "fullcodeline": "if (ctx->styp && (strlen(ctx->styp)>=4)) {"
    },
    {
        "line": 349,
        "fullcodeline": "if (ctx->dash_mode==MP4MX_DASH_VOD) {"
    },
    {
        "line": 22,
        "fullcodeline": "ctx->single_file = GF_FALSE;"
    },
    {
        "line": 25,
        "fullcodeline": "max_dur.num = ctx->dur.num;"
    },
    {
        "line": 26,
        "fullcodeline": "max_dur.den = ctx->dur.den;"
    },
    {
        "line": 33,
        "fullcodeline": "TrackWriter *tkw = gf_list_get(ctx->tracks, i);"
    },
    {
        "line": 37,
        "fullcodeline": "pck = gf_filter_pid_get_packet(tkw->ipid);"
    },
    {
        "line": 66,
        "fullcodeline": "p = gf_filter_pck_get_property(pck, GF_PROP_PCK_FILENAME);"
    },
    {
        "line": 69,
        "fullcodeline": "def_fake_dur = gf_filter_pck_get_duration(pck);"
    },
    {
        "line": 70,
        "fullcodeline": "def_fake_scale = tkw->src_timescale;"
    },
    {
        "line": 72,
        "fullcodeline": "p = gf_filter_pid_get_property(tkw->ipid, GF_PROP_PID_DURATION);"
    },
    {
        "line": 89,
        "fullcodeline": "u32 def_samp_size=0;"
    },
    {
        "line": 97,
        "fullcodeline": "TrackWriter *tkw = gf_list_get(ctx->tracks, i);"
    },
    {
        "line": 183,
        "fullcodeline": "mp4_mux_set_hevc_groups(ctx, tkw);"
    },
    {
        "line": 187,
        "fullcodeline": "e = gf_isom_setup_track_fragment(ctx->file, tkw->track_id, tkw->stsd_idx, def_pck_dur, def_samp_size, def_is_rap, 0, 0, ctx->nofragdef ? GF_TRUE : GF_FALSE);"
    },
    {
        "line": 235,
        "fullcodeline": "p = gf_filter_pid_get_property(tkw->ipid, GF_PROP_PID_DASH_SEGMENTS);"
    },
    {
        "line": 244,
        "fullcodeline": "u64 mdur = max_dur.num;"
    },
    {
        "line": 249,
        "fullcodeline": "gf_isom_set_movie_duration(ctx->file, mdur, GF_FALSE);"
    },
    {
        "line": 260,
        "fullcodeline": "gf_list_del_item(ctx->tracks, ref_tkw);"
    },
    {
        "line": 261,
        "fullcodeline": "gf_list_insert(ctx->tracks, ref_tkw, 0);"
    },
    {
        "line": 266,
        "fullcodeline": "u32 mval = ctx->dash_mode ? '6' : '5';"
    },
    {
        "line": 267,
        "fullcodeline": "u32 mbrand, mcount, found=0;"
    },
    {
        "line": 268,
        "fullcodeline": "u8 szB[GF_4CC_MSIZE];"
    },
    {
        "line": 269,
        "fullcodeline": "gf_isom_set_fragment_option(ctx->file, 0, GF_ISOM_TFHD_FORCE_MOOF_BASE_OFFSET, 1);"
    },
    {
        "line": 271,
        "fullcodeline": "gf_isom_get_brand_info(ctx->file, &mbrand, NULL, &mcount);"
    },
    {
        "line": 272,
        "fullcodeline": "strcpy(szB, gf_4cc_to_str(mbrand));"
    },
    {
        "line": 274,
        "fullcodeline": "i=0;"
    },
    {
        "line": 287,
        "fullcodeline": "gf_isom_modify_alternate_brand(ctx->file, GF_ISOM_BRAND_ISOM, GF_FALSE);"
    },
    {
        "line": 288,
        "fullcodeline": "gf_isom_modify_alternate_brand(ctx->file, GF_ISOM_BRAND_ISO1, GF_FALSE);"
    },
    {
        "line": 289,
        "fullcodeline": "gf_isom_modify_alternate_brand(ctx->file, GF_ISOM_BRAND_ISO2, GF_FALSE);"
    },
    {
        "line": 290,
        "fullcodeline": "gf_isom_modify_alternate_brand(ctx->file, GF_ISOM_BRAND_ISO3, GF_FALSE);"
    },
    {
        "line": 291,
        "fullcodeline": "gf_isom_modify_alternate_brand(ctx->file, GF_ISOM_BRAND_ISO4, GF_FALSE);"
    },
    {
        "line": 292,
        "fullcodeline": "gf_isom_modify_alternate_brand(ctx->file, GF_ISOM_BRAND_AVC1, GF_FALSE);"
    },
    {
        "line": 293,
        "fullcodeline": "gf_isom_modify_alternate_brand(ctx->file, GF_ISOM_BRAND_MP41, GF_FALSE);"
    },
    {
        "line": 294,
        "fullcodeline": "gf_isom_modify_alternate_brand(ctx->file, GF_ISOM_BRAND_MP42, GF_FALSE);"
    },
    {
        "line": 304,
        "fullcodeline": "gf_isom_modify_alternate_brand(ctx->file, GF_ISOM_BRAND_MSIX, ((ctx->dash_mode==MP4MX_DASH_VOD) && (ctx->subs_sidx>=0)) ? GF_TRUE : GF_FALSE);"
    },
    {
        "line": 308,
        "fullcodeline": "e = gf_isom_apply_box_patch(ctx->file, 0, ctx->boxpatch, GF_FALSE);"
    },
    {
        "line": 312,
        "fullcodeline": "ctx->box_patched = GF_TRUE;"
    },
    {
        "line": 323,
        "fullcodeline": "u64 rs_dts = gf_timestamp_rescale(min_dts, min_dts_scale, ctx->cdur.den);"
    },
    {
        "line": 324,
        "fullcodeline": "ctx->next_frag_start = rs_dts;"
    },
    {
        "line": 332,
        "fullcodeline": "ctx->dst_pck = NULL;"
    },
    {
        "line": 333,
        "fullcodeline": "ctx->current_size = ctx->current_offset = 0;"
    },
    {
        "line": 334,
        "fullcodeline": "ctx->first_pck_sent = GF_FALSE;"
    },
    {
        "line": 342,
        "fullcodeline": "u32 styp_brand = GF_4CC(ctx->styp[0], ctx->styp[1], ctx->styp[2], ctx->styp[3]);"
    },
    {
        "line": 343,
        "fullcodeline": "u32 version = 0;"
    },
    {
        "line": 344,
        "fullcodeline": "char *sep = strchr(ctx->styp, '.');"
    },
    {
        "line": 346,
        "fullcodeline": "gf_isom_set_brand_info(ctx->file, styp_brand, version);"
    },
    {
        "line": 38,
        "fullcodeline": "if (!pck) {"
    },
    {
        "line": 50,
        "fullcodeline": "if (!ctx->dash_mode && !ctx->cur_file_idx_plus_one) {"
    },
    {
        "line": 62,
        "fullcodeline": "if (tkw->cenc_state==CENC_NEED_SETUP) {"
    },
    {
        "line": 67,
        "fullcodeline": "if (p && strlen(p->value.string)) ctx->single_file = GF_FALSE;"
    },
    {
        "line": 73,
        "fullcodeline": "if (p && p->value.lfrac.den) {"
    },
    {
        "line": 140,
        "fullcodeline": "if (tkw->src_timescale != tkw->tk_timescale) {"
    },
    {
        "line": 179,
        "fullcodeline": "if (ctx->cmaf && !def_is_rap) {"
    },
    {
        "line": 205,
        "fullcodeline": "if (ctx->tfdt.den && ctx->tfdt.num) {"
    },
    {
        "line": 223,
        "fullcodeline": "if (!tkw->box_patched) {"
    },
    {
        "line": 239,
        "fullcodeline": "if (!ctx->dash_mode)"
    },
    {
        "line": 245,
        "fullcodeline": "if (ctx->moovts != max_dur.den) {"
    },
    {
        "line": 273,
        "fullcodeline": "if (!strncmp(szB, \"iso\", 3) && (szB[3] >= mval) && (szB[3] <= 'F') ) found = 1;"
    },
    {
        "line": 299,
        "fullcodeline": "if (ctx->dash_mode==MP4MX_DASH_VOD) {"
    },
    {
        "line": 317,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[MP4Mux] Unable to finalize moov for fragmentation: %s\\n\", gf_error_to_string(e) ));"
    },
    {
        "line": 336,
        "fullcodeline": "mp4_mux_flush_seg(ctx, GF_TRUE, 0, 0, GF_TRUE);"
    },
    {
        "line": 357,
        "fullcodeline": "if (ctx->vodcache==MP4MX_VODCACHE_REPLACE) {"
    },
    {
        "line": 51,
        "fullcodeline": "p = gf_filter_pck_get_property(pck, GF_PROP_PCK_FILENUM);"
    },
    {
        "line": 63,
        "fullcodeline": "mp4_mux_cenc_update(ctx, tkw, pck, CENC_CONFIG, 0, 0);"
    },
    {
        "line": 74,
        "fullcodeline": "tkw->pid_dur = p->value.lfrac;"
    },
    {
        "line": 141,
        "fullcodeline": "def_pck_dur *= tkw->tk_timescale;"
    },
    {
        "line": 142,
        "fullcodeline": "def_pck_dur /= tkw->src_timescale;"
    },
    {
        "line": 150,
        "fullcodeline": "def_is_rap = GF_ISOM_FRAG_DEF_IS_SYNC;"
    },
    {
        "line": 151,
        "fullcodeline": "p = gf_filter_pid_get_property(tkw->ipid, GF_PROP_PID_HAS_SYNC);"
    },
    {
        "line": 171,
        "fullcodeline": "def_is_rap = 0;"
    },
    {
        "line": 175,
        "fullcodeline": "def_is_rap = 0;"
    },
    {
        "line": 180,
        "fullcodeline": "def_is_rap |= GF_ISOM_FRAG_USE_SYNC_TABLE;"
    },
    {
        "line": 206,
        "fullcodeline": "tkw->tfdt_offset = gf_timestamp_rescale(ctx->tfdt.num, ctx->tfdt.den, tkw->tk_timescale);"
    },
    {
        "line": 210,
        "fullcodeline": "gf_list_del_item(ctx->tracks, tkw);"
    },
    {
        "line": 213,
        "fullcodeline": "i--;"
    },
    {
        "line": 214,
        "fullcodeline": "count--;"
    },
    {
        "line": 224,
        "fullcodeline": "p = gf_filter_pid_get_property_str(tkw->ipid, \"boxpatch\");"
    },
    {
        "line": 232,
        "fullcodeline": "tkw->box_patched = GF_TRUE;"
    },
    {
        "line": 236,
        "fullcodeline": "if (p && (p->value.uint>nb_segments))"
    },
    {
        "line": 237,
        "fullcodeline": "nb_segments = p->value.uint;"
    },
    {
        "line": 240,
        "fullcodeline": "gf_isom_purge_track_reference(ctx->file, tkw->track_num);"
    },
    {
        "line": 246,
        "fullcodeline": "mdur *= (u32) ctx->moovts;"
    },
    {
        "line": 247,
        "fullcodeline": "mdur /= max_dur.den;"
    },
    {
        "line": 275,
        "fullcodeline": "while (!found && (i<mcount)) {"
    },
    {
        "line": 276,
        "fullcodeline": "i++;"
    },
    {
        "line": 277,
        "fullcodeline": "gf_isom_get_alternate_brand(ctx->file, i, &mbrand);"
    },
    {
        "line": 278,
        "fullcodeline": "strcpy(szB, gf_4cc_to_str(mbrand));"
    },
    {
        "line": 284,
        "fullcodeline": "gf_isom_set_brand_info(ctx->file, ctx->dash_mode ? GF_ISOM_BRAND_ISO6 : GF_ISOM_BRAND_ISO5, 1);"
    },
    {
        "line": 300,
        "fullcodeline": "gf_isom_modify_alternate_brand(ctx->file, GF_ISOM_BRAND_DSMS, GF_TRUE);"
    },
    {
        "line": 310,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[MP4Mux] Unable to apply box patch %s: %s\\n\", ctx->boxpatch, gf_error_to_string(e) ));"
    },
    {
        "line": 345,
        "fullcodeline": "if (sep) version = atoi(sep+1);"
    },
    {
        "line": 350,
        "fullcodeline": "if ((ctx->vodcache==MP4MX_VODCACHE_REPLACE) && !nb_segments && (!ctx->media_dur || !ctx->dash_dur.num) ) {"
    },
    {
        "line": 352,
        "fullcodeline": "ctx->vodcache = MP4MX_VODCACHE_ON;"
    },
    {
        "line": 353,
        "fullcodeline": "e = mp4mx_setup_dash_vod(ctx, NULL);"
    },
    {
        "line": 363,
        "fullcodeline": "Bool exact_sidx = GF_TRUE;"
    },
    {
        "line": 378,
        "fullcodeline": "ctx->sidx_max_size = 12 + (12 + 16) + 12 * nb_segments;"
    },
    {
        "line": 394,
        "fullcodeline": "pck = gf_filter_pck_new_alloc(ctx->opid, ctx->sidx_max_size, &output);"
    },
    {
        "line": 397,
        "fullcodeline": "gf_filter_pck_set_framing(pck, GF_FALSE, GF_FALSE);"
    },
    {
        "line": 399,
        "fullcodeline": "bs = gf_bs_new(output, ctx->sidx_max_size, GF_BITSTREAM_WRITE);"
    },
    {
        "line": 400,
        "fullcodeline": "gf_bs_write_u32(bs, ctx->sidx_max_size);"
    },
    {
        "line": 401,
        "fullcodeline": "gf_bs_write_u32(bs, GF_ISOM_BOX_TYPE_FREE);"
    },
    {
        "line": 402,
        "fullcodeline": "msg = \"GPAC \" GPAC_VERSION\" SIDX placeholder\";"
    },
    {
        "line": 403,
        "fullcodeline": "len = (u32) strlen(msg);"
    },
    {
        "line": 405,
        "fullcodeline": "gf_bs_write_data(bs, msg, len );"
    },
    {
        "line": 40,
        "fullcodeline": "if (gf_filter_pid_is_eos(tkw->ipid)) {"
    },
    {
        "line": 75,
        "fullcodeline": "if (tkw->pid_dur.num<0) tkw->pid_dur.num = -tkw->pid_dur.num;"
    },
    {
        "line": 76,
        "fullcodeline": "if (gf_timestamp_less(max_dur.num, max_dur.den, tkw->pid_dur.num, tkw->pid_dur.den)) {"
    },
    {
        "line": 108,
        "fullcodeline": "GF_FilterPacket *pck = gf_filter_pid_get_packet(tkw->ipid);"
    },
    {
        "line": 189,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[MP4Mux] Unable to setup fragmentation for track ID %d: %s\\n\", tkw->track_id, gf_error_to_string(e) ));"
    },
    {
        "line": 195,
        "fullcodeline": "p = gf_filter_pid_get_property(tkw->ipid, GF_PROP_PID_ISOM_TREX_TEMPLATE);"
    },
    {
        "line": 211,
        "fullcodeline": "if (ref_tkw==tkw) ref_tkw=NULL;"
    },
    {
        "line": 225,
        "fullcodeline": "if (p && p->value.string) {"
    },
    {
        "line": 255,
        "fullcodeline": "gf_isom_set_movie_duration(ctx->file, 0, GF_TRUE);"
    },
    {
        "line": 302,
        "fullcodeline": "gf_isom_modify_alternate_brand(ctx->file, GF_ISOM_BRAND_DASH, GF_TRUE);"
    },
    {
        "line": 365,
        "fullcodeline": "if (!nb_segments) {"
    },
    {
        "line": 392,
        "fullcodeline": "ctx->sidx_chunk_offset = (u32) (ctx->current_offset + ctx->current_size);"
    },
    {
        "line": 395,
        "fullcodeline": "if (!pck) return GF_OUT_OF_MEM;"
    },
    {
        "line": 404,
        "fullcodeline": "if (len+8>ctx->sidx_max_size) len = ctx->sidx_max_size - 8;"
    },
    {
        "line": 53,
        "fullcodeline": "ctx->cur_file_idx_plus_one = p->value.uint + 1;"
    },
    {
        "line": 58,
        "fullcodeline": "ctx->notify_filename = GF_TRUE;"
    },
    {
        "line": 77,
        "fullcodeline": "max_dur.num = tkw->pid_dur.num;"
    },
    {
        "line": 78,
        "fullcodeline": "max_dur.den = tkw->pid_dur.den;"
    },
    {
        "line": 101,
        "fullcodeline": "def_pck_dur = def_fake_dur;"
    },
    {
        "line": 102,
        "fullcodeline": "def_pck_dur *= tkw->src_timescale;"
    },
    {
        "line": 103,
        "fullcodeline": "def_pck_dur /= def_fake_scale;"
    },
    {
        "line": 153,
        "fullcodeline": "def_is_rap = 0;"
    },
    {
        "line": 197,
        "fullcodeline": "gf_isom_setup_track_fragment_template(ctx->file, tkw->track_id, p->value.data.ptr, p->value.data.size, ctx->nofragdef);"
    },
    {
        "line": 226,
        "fullcodeline": "e = gf_isom_apply_box_patch(ctx->file, tkw->track_id, p->value.string, GF_FALSE);"
    },
    {
        "line": 279,
        "fullcodeline": "if (!strncmp(szB, \"iso\", 3) && (szB[3] >= mval) && (szB[3] <= 'F') ) found = 1;"
    },
    {
        "line": 366,
        "fullcodeline": "exact_sidx = GF_FALSE;"
    },
    {
        "line": 367,
        "fullcodeline": "nb_segments = (u32) ( ctx->media_dur * ctx->dash_dur.den / ctx->dash_dur.num);"
    },
    {
        "line": 369,
        "fullcodeline": "nb_segments ++;"
    },
    {
        "line": 382,
        "fullcodeline": "ctx->sidx_max_size += 12 + 4 + nb_segments * 12;"
    },
    {
        "line": 387,
        "fullcodeline": "ctx->sidx_max_size += 8;"
    },
    {
        "line": 54,
        "fullcodeline": "if (!ctx->cur_file_suffix) {"
    },
    {
        "line": 105,
        "fullcodeline": "def_pck_dur = 0;"
    },
    {
        "line": 114,
        "fullcodeline": "def_pck_dur = gf_filter_pck_get_duration(pck);"
    },
    {
        "line": 116,
        "fullcodeline": "dts = gf_filter_pck_get_dts(pck);"
    },
    {
        "line": 119,
        "fullcodeline": "tscale = gf_filter_pck_get_timescale(pck);"
    },
    {
        "line": 138,
        "fullcodeline": "def_samp_size = tkw->raw_audio_bytes_per_sample;"
    },
    {
        "line": 168,
        "fullcodeline": "if (!ref_tkw) ref_tkw = tkw;"
    },
    {
        "line": 371,
        "fullcodeline": "if (nb_segments>10)"
    },
    {
        "line": 42,
        "fullcodeline": "gf_filter_pck_discard(tkw->dgl_copy);"
    },
    {
        "line": 43,
        "fullcodeline": "tkw->dgl_copy = NULL;"
    },
    {
        "line": 55,
        "fullcodeline": "p = gf_filter_pck_get_property(pck, GF_PROP_PCK_FILESUF);"
    },
    {
        "line": 117,
        "fullcodeline": "if (dts == GF_FILTER_NO_TS)"
    },
    {
        "line": 135,
        "fullcodeline": "def_pck_dur = p ? p->value.uint : 0;"
    },
    {
        "line": 198,
        "fullcodeline": "} else if (!ctx->nofragdef) {"
    },
    {
        "line": 228,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[MP4Mux] Unable to apply box patch %s to track %d: %s\\n\","
    },
    {
        "line": 372,
        "fullcodeline": "nb_segments += 10*nb_segments/100;"
    },
    {
        "line": 56,
        "fullcodeline": "if (p && p->value.string) ctx->cur_file_suffix = gf_strdup(p->value.string);"
    },
    {
        "line": 118,
        "fullcodeline": "dts = gf_filter_pck_get_cts(pck);"
    },
    {
        "line": 121,
        "fullcodeline": "if (!min_dts || gf_timestamp_greater(min_dts, min_dts_scale, dts, tscale)) {"
    },
    {
        "line": 122,
        "fullcodeline": "min_dts = dts;"
    },
    {
        "line": 123,
        "fullcodeline": "min_dts_scale = tscale;"
    },
    {
        "line": 127,
        "fullcodeline": "gf_filter_pck_get_data(pck, &pck_size);"
    },
    {
        "line": 128,
        "fullcodeline": "pck_size /= tkw->raw_audio_bytes_per_sample;"
    },
    {
        "line": 134,
        "fullcodeline": "p = gf_filter_pid_get_property(tkw->ipid, GF_PROP_PID_CONSTANT_DURATION);"
    },
    {
        "line": 199,
        "fullcodeline": "GF_LOG(GF_LOG_WARNING, GF_LOG_CONTAINER, (\"[MP4Mux] Refragmentation with default track fragment flags signaling but no TREX found in source track %d, using defaults computed from PID, result might be broken\\n\", tkw->track_id));"
    },
    {
        "line": 374,
        "fullcodeline": "nb_segments ++;"
    },
    {
        "line": 414,
        "fullcodeline": "ctx->sidx_chunk_offset = (u32) (ctx->current_offset + ctx->current_size);"
    },
    {
        "line": 130,
        "fullcodeline": "def_pck_dur /= pck_size;"
    },
    {
        "line": 229,
        "fullcodeline": "p->value.string, tkw->track_id, gf_error_to_string(e) ));"
    }
]