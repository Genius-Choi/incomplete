[
    {
        "line": 26,
        "fullcodeline": "nb_sections = gf_list_count(sections);"
    },
    {
        "line": 31,
        "fullcodeline": "section = (GF_M2TS_Section *)gf_list_get(sections, 0);"
    },
    {
        "line": 32,
        "fullcodeline": "data = section->data;"
    },
    {
        "line": 33,
        "fullcodeline": "data_size = section->data_size;"
    },
    {
        "line": 39,
        "fullcodeline": "GF_SAFEALLOC(time_table, GF_M2TS_TDT_TOT);"
    },
    {
        "line": 53,
        "fullcodeline": "date = data[0]*256 + data[1];"
    },
    {
        "line": 54,
        "fullcodeline": "yp = (u32)((date - 15078.2)/365.25);"
    },
    {
        "line": 55,
        "fullcodeline": "mp = (u32)((date - 14956.1 - (u32)(yp * 365.25))/30.6001);"
    },
    {
        "line": 56,
        "fullcodeline": "time_table->day = (u32)(date - 14956 - (u32)(yp * 365.25) - (u32)(mp * 30.6001));"
    },
    {
        "line": 59,
        "fullcodeline": "time_table->year = yp + k + 1900;"
    },
    {
        "line": 60,
        "fullcodeline": "time_table->month = mp - 1 - k*12;"
    },
    {
        "line": 62,
        "fullcodeline": "time_table->hour   = 10*((data[2]&0xf0)>>4) + (data[2]&0x0f);"
    },
    {
        "line": 63,
        "fullcodeline": "time_table->minute = 10*((data[3]&0xf0)>>4) + (data[3]&0x0f);"
    },
    {
        "line": 64,
        "fullcodeline": "time_table->second = 10*((data[4]&0xf0)>>4) + (data[4]&0x0f);"
    },
    {
        "line": 66,
        "fullcodeline": "GF_LOG(GF_LOG_DEBUG, GF_LOG_CONTAINER, (\"[MPEG-2 TS] Stream UTC time is %u/%02u/%02u %02u:%02u:%02u\\n\", time_table->year, time_table->month, time_table->day, time_table->hour, time_table->minute, time_table->second));"
    },
    {
        "line": 11,
        "fullcodeline": "if ( !(status & GF_M2TS_TABLE_END) )"
    },
    {
        "line": 40,
        "fullcodeline": "if (!time_table) {"
    },
    {
        "line": 45,
        "fullcodeline": "if (data_size < 5) {"
    },
    {
        "line": 65,
        "fullcodeline": "assert(time_table->hour<24 && time_table->minute<60 && time_table->second<60);"
    },
    {
        "line": 16,
        "fullcodeline": "table_name = \"TDT\";"
    },
    {
        "line": 19,
        "fullcodeline": "table_name = \"TOT\";"
    },
    {
        "line": 28,
        "fullcodeline": "GF_LOG(GF_LOG_WARNING, GF_LOG_CONTAINER, (\"[MPEG-2 TS] %s on multiple sections not supported\\n\", table_name));"
    },
    {
        "line": 36,
        "fullcodeline": "if ((table_id==GF_M2TS_TABLE_ID_TDT) && (data_size != 5)) {"
    },
    {
        "line": 37,
        "fullcodeline": "GF_LOG(GF_LOG_WARNING, GF_LOG_CONTAINER, (\"[MPEG-2 TS] Corrupted TDT size\\n\", table_name));"
    },
    {
        "line": 57,
        "fullcodeline": "if (mp == 14 || mp == 15) k = 1;"
    },
    {
        "line": 71,
        "fullcodeline": "ts->TDT_time = time_table;"
    },
    {
        "line": 124,
        "fullcodeline": "ts->TDT_time = time_table;"
    },
    {
        "line": 22,
        "fullcodeline": "GF_LOG(GF_LOG_DEBUG, GF_LOG_CONTAINER, (\"[MPEG-2 TS] Unimplemented table_id %u for PID %u\\n\", table_id, GF_M2TS_PID_TDT_TOT_ST));"
    },
    {
        "line": 46,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[MPEG-2 TS] Section data size too small to read date (len: %u)\\n\", data_size));"
    },
    {
        "line": 58,
        "fullcodeline": "else k = 0;"
    },
    {
        "line": 115,
        "fullcodeline": "if (ts->tdt_tot->length<4) {"
    },
    {
        "line": 72,
        "fullcodeline": "if (ts->on_event) ts->on_event(ts, GF_M2TS_EVT_TDT, time_table);"
    },
    {
        "line": 119,
        "fullcodeline": "if (!gf_m2ts_crc32_check(ts->tdt_tot->section, ts->tdt_tot->length-4)) {"
    },
    {
        "line": 125,
        "fullcodeline": "if (ts->on_event) ts->on_event(ts, GF_M2TS_EVT_TOT, time_table);"
    },
    {
        "line": 116,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[MPEG-2 TS] corrupted %s table (less than 4 bytes but CRC32 should be present\\n\", table_name));"
    },
    {
        "line": 120,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[MPEG-2 TS] corrupted %s table (CRC32 failed)\\n\", table_name));"
    }
]