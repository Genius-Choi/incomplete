[
    {
        "line": 4,
        "fullcodeline": "bool ret = false;"
    },
    {
        "line": 5,
        "fullcodeline": "debug_decl(iolog_parse_json_object, SUDO_DEBUG_UTIL);"
    },
    {
        "line": 8,
        "fullcodeline": "item = TAILQ_FIRST(&object->items);"
    },
    {
        "line": 19,
        "fullcodeline": "TAILQ_FOREACH(item, &object->items, entries) {"
    },
    {
        "line": 92,
        "fullcodeline": "ret = true;"
    },
    {
        "line": 95,
        "fullcodeline": "debug_return_bool(ret);"
    },
    {
        "line": 9,
        "fullcodeline": "if (item == NULL) {"
    },
    {
        "line": 13,
        "fullcodeline": "if (item->type != JSON_OBJECT) {"
    },
    {
        "line": 54,
        "fullcodeline": "if (evlog->command != NULL && evlog->argv != NULL && evlog->argv[0] != NULL) {"
    },
    {
        "line": 10,
        "fullcodeline": "sudo_warnx(\"%s\", U_(\"missing JSON_OBJECT\"));"
    },
    {
        "line": 14,
        "fullcodeline": "sudo_warnx(U_(\"expected JSON_OBJECT, got %d\"), item->type);"
    },
    {
        "line": 23,
        "fullcodeline": "if (item->name == NULL) {"
    },
    {
        "line": 30,
        "fullcodeline": "for (key = iolog_json_keys; key->name != NULL; key++) {"
    },
    {
        "line": 34,
        "fullcodeline": "if (key->name == NULL) {"
    },
    {
        "line": 55,
        "fullcodeline": "size_t len, bufsize = strlen(evlog->command) + 1;"
    },
    {
        "line": 67,
        "fullcodeline": "cp = buf;"
    },
    {
        "line": 69,
        "fullcodeline": "len = strlcpy(cp, evlog->command, bufsize);"
    },
    {
        "line": 72,
        "fullcodeline": "cp += len;"
    },
    {
        "line": 73,
        "fullcodeline": "bufsize -= len;"
    },
    {
        "line": 88,
        "fullcodeline": "free(evlog->command);"
    },
    {
        "line": 89,
        "fullcodeline": "evlog->command = buf;"
    },
    {
        "line": 24,
        "fullcodeline": "sudo_debug_printf(SUDO_DEBUG_WARN|SUDO_DEBUG_LINENO,"
    },
    {
        "line": 35,
        "fullcodeline": "sudo_debug_printf(SUDO_DEBUG_WARN|SUDO_DEBUG_LINENO,"
    },
    {
        "line": 60,
        "fullcodeline": "for (ac = 1; evlog->argv[ac] != NULL; ac++)"
    },
    {
        "line": 61,
        "fullcodeline": "bufsize += strlen(evlog->argv[ac]) + 1;"
    },
    {
        "line": 63,
        "fullcodeline": "if ((buf = malloc(bufsize)) == NULL) {"
    },
    {
        "line": 70,
        "fullcodeline": "if (len >= bufsize)"
    },
    {
        "line": 75,
        "fullcodeline": "for (ac = 1; evlog->argv[ac] != NULL; ac++) {"
    },
    {
        "line": 31,
        "fullcodeline": "if (strcmp(item->name, key->name) == 0)"
    },
    {
        "line": 64,
        "fullcodeline": "sudo_warnx(U_(\"%s: %s\"), __func__, U_(\"unable to allocate memory\"));"
    },
    {
        "line": 71,
        "fullcodeline": "sudo_fatalx(U_(\"internal error, %s overflow\"), __func__);"
    },
    {
        "line": 78,
        "fullcodeline": "*cp++ = ' ';"
    },
    {
        "line": 79,
        "fullcodeline": "bufsize--;"
    },
    {
        "line": 81,
        "fullcodeline": "len = strlcpy(cp, evlog->argv[ac], bufsize);"
    },
    {
        "line": 84,
        "fullcodeline": "cp += len;"
    },
    {
        "line": 85,
        "fullcodeline": "bufsize -= len;"
    },
    {
        "line": 37,
        "fullcodeline": "} else if (key->type != item->type &&"
    },
    {
        "line": 76,
        "fullcodeline": "if (bufsize < 2)"
    },
    {
        "line": 82,
        "fullcodeline": "if (len >= bufsize)"
    },
    {
        "line": 38,
        "fullcodeline": "(key->type != JSON_ID || item->type != JSON_NUMBER)) {"
    },
    {
        "line": 39,
        "fullcodeline": "sudo_debug_printf(SUDO_DEBUG_WARN|SUDO_DEBUG_LINENO,"
    },
    {
        "line": 77,
        "fullcodeline": "sudo_fatalx(U_(\"internal error, %s overflow\"), __func__);"
    },
    {
        "line": 83,
        "fullcodeline": "sudo_fatalx(U_(\"internal error, %s overflow\"), __func__);"
    },
    {
        "line": 45,
        "fullcodeline": "if (!key->setter(item, evlog)) {"
    },
    {
        "line": 46,
        "fullcodeline": "sudo_debug_printf(SUDO_DEBUG_ERROR|SUDO_DEBUG_LINENO,"
    }
]