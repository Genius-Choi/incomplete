[
    {
        "line": 4,
        "fullcodeline": "struct x25_sock *x25 = x25_sk(sk);"
    },
    {
        "line": 5,
        "fullcodeline": "struct x25_facilities *ours = &x25->facilities;"
    },
    {
        "line": 9,
        "fullcodeline": "memset(&theirs, 0, sizeof(theirs));"
    },
    {
        "line": 10,
        "fullcodeline": "memcpy(new, ours, sizeof(*new));"
    },
    {
        "line": 11,
        "fullcodeline": "memset(dte, 0, sizeof(*dte));"
    },
    {
        "line": 13,
        "fullcodeline": "len = x25_parse_facilities(skb, &theirs, dte, &x25->vc_facil_mask);"
    },
    {
        "line": 25,
        "fullcodeline": "new->reverse = theirs.reverse;"
    },
    {
        "line": 14,
        "fullcodeline": "if (len < 0)"
    },
    {
        "line": 20,
        "fullcodeline": "if ((theirs.reverse & 0x01 ) && (ours->reverse & 0x01)) {"
    },
    {
        "line": 43,
        "fullcodeline": "if (theirs.pacsize_in && theirs.pacsize_out) {"
    },
    {
        "line": 54,
        "fullcodeline": "if (theirs.winsize_in && theirs.winsize_out) {"
    },
    {
        "line": 21,
        "fullcodeline": "SOCK_DEBUG(sk, \"X.25: rejecting reverse charging request\\n\");"
    },
    {
        "line": 28,
        "fullcodeline": "int theirs_in =  theirs.throughput & 0x0f;"
    },
    {
        "line": 29,
        "fullcodeline": "int theirs_out = theirs.throughput & 0xf0;"
    },
    {
        "line": 30,
        "fullcodeline": "int ours_in  = ours->throughput & 0x0f;"
    },
    {
        "line": 31,
        "fullcodeline": "int ours_out = ours->throughput & 0xf0;"
    },
    {
        "line": 22,
        "fullcodeline": "return -1;"
    },
    {
        "line": 32,
        "fullcodeline": "if (!ours_in || theirs_in < ours_in) {"
    },
    {
        "line": 36,
        "fullcodeline": "if (!ours_out || theirs_out < ours_out) {"
    },
    {
        "line": 44,
        "fullcodeline": "if (theirs.pacsize_in < ours->pacsize_in) {"
    },
    {
        "line": 48,
        "fullcodeline": "if (theirs.pacsize_out < ours->pacsize_out) {"
    },
    {
        "line": 55,
        "fullcodeline": "if (theirs.winsize_in < ours->winsize_in) {"
    },
    {
        "line": 59,
        "fullcodeline": "if (theirs.winsize_out < ours->winsize_out) {"
    },
    {
        "line": 33,
        "fullcodeline": "SOCK_DEBUG(sk, \"X.25: inbound throughput negotiated\\n\");"
    },
    {
        "line": 34,
        "fullcodeline": "new->throughput = (new->throughput & 0xf0) | theirs_in;"
    },
    {
        "line": 37,
        "fullcodeline": "SOCK_DEBUG(sk,"
    },
    {
        "line": 39,
        "fullcodeline": "new->throughput = (new->throughput & 0x0f) | theirs_out;"
    },
    {
        "line": 45,
        "fullcodeline": "SOCK_DEBUG(sk, \"X.25: packet size inwards negotiated down\\n\");"
    },
    {
        "line": 46,
        "fullcodeline": "new->pacsize_in = theirs.pacsize_in;"
    },
    {
        "line": 49,
        "fullcodeline": "SOCK_DEBUG(sk, \"X.25: packet size outwards negotiated down\\n\");"
    },
    {
        "line": 50,
        "fullcodeline": "new->pacsize_out = theirs.pacsize_out;"
    },
    {
        "line": 56,
        "fullcodeline": "SOCK_DEBUG(sk, \"X.25: window size inwards negotiated down\\n\");"
    },
    {
        "line": 57,
        "fullcodeline": "new->winsize_in = theirs.winsize_in;"
    },
    {
        "line": 60,
        "fullcodeline": "SOCK_DEBUG(sk, \"X.25: window size outwards negotiated down\\n\");"
    },
    {
        "line": 61,
        "fullcodeline": "new->winsize_out = theirs.winsize_out;"
    }
]