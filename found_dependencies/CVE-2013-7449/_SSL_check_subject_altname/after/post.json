[
    {
        "line": 3,
        "fullcodeline": "STACK_OF(GENERAL_NAME) *altname_stack = NULL;"
    },
    {
        "line": 6,
        "fullcodeline": "int type = GEN_DNS;"
    },
    {
        "line": 8,
        "fullcodeline": "int rv = -1;"
    },
    {
        "line": 10,
        "fullcodeline": "altname_stack = X509_get_ext_d2i (cert, NID_subject_alt_name, NULL, NULL);"
    },
    {
        "line": 14,
        "fullcodeline": "addr = g_inet_address_new_from_string (host);"
    },
    {
        "line": 22,
        "fullcodeline": "count = sk_GENERAL_NAME_num(altname_stack);"
    },
    {
        "line": 81,
        "fullcodeline": "sk_GENERAL_NAME_free (altname_stack);"
    },
    {
        "line": 11,
        "fullcodeline": "if (altname_stack == NULL)"
    },
    {
        "line": 15,
        "fullcodeline": "if (addr != NULL)"
    },
    {
        "line": 23,
        "fullcodeline": "for (i = 0; i < count; i++)"
    },
    {
        "line": 79,
        "fullcodeline": "if (addr != NULL)"
    },
    {
        "line": 17,
        "fullcodeline": "family = g_inet_address_get_family (addr);"
    },
    {
        "line": 27,
        "fullcodeline": "altname = sk_GENERAL_NAME_value (altname_stack, i);"
    },
    {
        "line": 80,
        "fullcodeline": "g_object_unref (addr);"
    },
    {
        "line": 12,
        "fullcodeline": "return -1;"
    },
    {
        "line": 18,
        "fullcodeline": "if (family == G_SOCKET_FAMILY_IPV4 || family == G_SOCKET_FAMILY_IPV6)"
    },
    {
        "line": 29,
        "fullcodeline": "if (altname->type != type)"
    },
    {
        "line": 32,
        "fullcodeline": "if (type == GEN_DNS)"
    },
    {
        "line": 19,
        "fullcodeline": "type = GEN_IPADD;"
    },
    {
        "line": 37,
        "fullcodeline": "format = ASN1_STRING_type (altname->d.dNSName);"
    },
    {
        "line": 38,
        "fullcodeline": "if (format == V_ASN1_IA5STRING)"
    },
    {
        "line": 40,
        "fullcodeline": "data = ASN1_STRING_data (altname->d.dNSName);"
    },
    {
        "line": 59,
        "fullcodeline": "else if (type == GEN_IPADD)"
    },
    {
        "line": 42,
        "fullcodeline": "if (ASN1_STRING_length (altname->d.dNSName) != (int)strlen(data))"
    },
    {
        "line": 49,
        "fullcodeline": "if (_SSL_match_hostname (data, host) == 0)"
    },
    {
        "line": 56,
        "fullcodeline": "g_warning (\"unhandled subjectAltName dNSName encoding (%d)\\n\", format);"
    },
    {
        "line": 65,
        "fullcodeline": "datalen = ASN1_STRING_length (altname->d.iPAddress);"
    },
    {
        "line": 66,
        "fullcodeline": "data = ASN1_STRING_data (altname->d.iPAddress);"
    },
    {
        "line": 68,
        "fullcodeline": "addr_bytes = g_inet_address_to_bytes (addr);"
    },
    {
        "line": 69,
        "fullcodeline": "addr_len = (int)g_inet_address_get_native_size (addr);"
    },
    {
        "line": 44,
        "fullcodeline": "g_warning(\"NUL byte in subjectAltName, probably a malicious certificate.\\n\");"
    },
    {
        "line": 45,
        "fullcodeline": "rv = -2;"
    },
    {
        "line": 51,
        "fullcodeline": "rv = 0;"
    },
    {
        "line": 71,
        "fullcodeline": "if (datalen == addr_len && memcmp (data, addr_bytes, addr_len) == 0)"
    },
    {
        "line": 73,
        "fullcodeline": "rv = 0;"
    }
]