[
    {
        "line": 3,
        "fullcodeline": "char buf[128];"
    },
    {
        "line": 5,
        "fullcodeline": "g_sess = serv->server_session;"
    },
    {
        "line": 6,
        "fullcodeline": "if (SSL_connect (serv->ssl) <= 0)"
    },
    {
        "line": 32,
        "fullcodeline": "if (SSL_is_init_finished (serv->ssl))"
    },
    {
        "line": 8,
        "fullcodeline": "char err_buf[128];"
    },
    {
        "line": 11,
        "fullcodeline": "g_sess = NULL;"
    },
    {
        "line": 89,
        "fullcodeline": "chiper_info = _SSL_get_cipher_info (serv->ssl);\t/* static buffer */"
    },
    {
        "line": 90,
        "fullcodeline": "snprintf (buf, sizeof (buf), \"* Cipher info:\");"
    },
    {
        "line": 91,
        "fullcodeline": "EMIT_SIGNAL (XP_TE_SSLMESSAGE, serv->server_session, buf, NULL, NULL, NULL,"
    },
    {
        "line": 93,
        "fullcodeline": "snprintf (buf, sizeof (buf), \"  Version: %s, cipher %s (%u bits)\","
    },
    {
        "line": 96,
        "fullcodeline": "EMIT_SIGNAL (XP_TE_SSLMESSAGE, serv->server_session, buf, NULL, NULL, NULL,"
    },
    {
        "line": 99,
        "fullcodeline": "verify_error = SSL_get_verify_result (serv->ssl);"
    },
    {
        "line": 132,
        "fullcodeline": "server_stopconnecting (serv);"
    },
    {
        "line": 12,
        "fullcodeline": "if ((err = ERR_get_error ()) > 0)"
    },
    {
        "line": 14,
        "fullcodeline": "ERR_error_string (err, err_buf);"
    },
    {
        "line": 15,
        "fullcodeline": "snprintf (buf, sizeof (buf), \"(%d) %s\", err, err_buf);"
    },
    {
        "line": 16,
        "fullcodeline": "EMIT_SIGNAL (XP_TE_CONNFAIL, serv->server_session, buf, NULL,"
    },
    {
        "line": 22,
        "fullcodeline": "server_cleanup (serv);"
    },
    {
        "line": 39,
        "fullcodeline": "if (!_SSL_get_cert_info (&cert_info, serv->ssl))"
    },
    {
        "line": 41,
        "fullcodeline": "snprintf (buf, sizeof (buf), \"* Certification info:\");"
    },
    {
        "line": 42,
        "fullcodeline": "EMIT_SIGNAL (XP_TE_SSLMESSAGE, serv->server_session, buf, NULL, NULL,"
    },
    {
        "line": 44,
        "fullcodeline": "snprintf (buf, sizeof (buf), \"  Subject:\");"
    },
    {
        "line": 45,
        "fullcodeline": "EMIT_SIGNAL (XP_TE_SSLMESSAGE, serv->server_session, buf, NULL, NULL,"
    },
    {
        "line": 53,
        "fullcodeline": "snprintf (buf, sizeof (buf), \"  Issuer:\");"
    },
    {
        "line": 54,
        "fullcodeline": "EMIT_SIGNAL (XP_TE_SSLMESSAGE, serv->server_session, buf, NULL, NULL,"
    },
    {
        "line": 62,
        "fullcodeline": "snprintf (buf, sizeof (buf), \"  Public key algorithm: %s (%d bits)\","
    },
    {
        "line": 64,
        "fullcodeline": "EMIT_SIGNAL (XP_TE_SSLMESSAGE, serv->server_session, buf, NULL, NULL,"
    },
    {
        "line": 74,
        "fullcodeline": "snprintf (buf, sizeof (buf), \"  Sign algorithm %s\","
    },
    {
        "line": 76,
        "fullcodeline": "EMIT_SIGNAL (XP_TE_SSLMESSAGE, serv->server_session, buf, NULL, NULL,"
    },
    {
        "line": 78,
        "fullcodeline": "snprintf (buf, sizeof (buf), \"  Valid since %s to %s\","
    },
    {
        "line": 80,
        "fullcodeline": "EMIT_SIGNAL (XP_TE_SSLMESSAGE, serv->server_session, buf, NULL, NULL,"
    },
    {
        "line": 121,
        "fullcodeline": "snprintf (buf, sizeof (buf), \"%s.? (%d)\","
    },
    {
        "line": 124,
        "fullcodeline": "EMIT_SIGNAL (XP_TE_CONNFAIL, serv->server_session, buf, NULL, NULL,"
    },
    {
        "line": 19,
        "fullcodeline": "if (ERR_GET_REASON (err) == SSL_R_WRONG_VERSION_NUMBER)"
    },
    {
        "line": 84,
        "fullcodeline": "snprintf (buf, sizeof (buf), \" * No Certificate\");"
    },
    {
        "line": 85,
        "fullcodeline": "EMIT_SIGNAL (XP_TE_SSLMESSAGE, serv->server_session, buf, NULL, NULL,"
    },
    {
        "line": 122,
        "fullcodeline": "X509_verify_cert_error_string (verify_error),"
    },
    {
        "line": 140,
        "fullcodeline": "if (serv->ssl->session && serv->ssl->session->time + SSLTMOUT < time (NULL))"
    },
    {
        "line": 142,
        "fullcodeline": "snprintf (buf, sizeof (buf), \"SSL handshake timed out\");"
    },
    {
        "line": 143,
        "fullcodeline": "EMIT_SIGNAL (XP_TE_CONNFAIL, serv->server_session, buf, NULL,"
    },
    {
        "line": 145,
        "fullcodeline": "server_cleanup (serv); /* ->connecting = FALSE */"
    },
    {
        "line": 20,
        "fullcodeline": "PrintText (serv->server_session, _(\"Are you sure this is a SSL capable server and port?\\n\"));"
    },
    {
        "line": 25,
        "fullcodeline": "auto_reconnect (serv, FALSE, -1);"
    },
    {
        "line": 47,
        "fullcodeline": "for (i = 0; cert_info.subject_word[i]; i++)"
    },
    {
        "line": 49,
        "fullcodeline": "snprintf (buf, sizeof (buf), \"    %s\", cert_info.subject_word[i]);"
    },
    {
        "line": 50,
        "fullcodeline": "EMIT_SIGNAL (XP_TE_SSLMESSAGE, serv->server_session, buf, NULL, NULL,"
    },
    {
        "line": 56,
        "fullcodeline": "for (i = 0; cert_info.issuer_word[i]; i++)"
    },
    {
        "line": 58,
        "fullcodeline": "snprintf (buf, sizeof (buf), \"    %s\", cert_info.issuer_word[i]);"
    },
    {
        "line": 59,
        "fullcodeline": "EMIT_SIGNAL (XP_TE_SSLMESSAGE, serv->server_session, buf, NULL, NULL,"
    },
    {
        "line": 113,
        "fullcodeline": "snprintf (buf, sizeof (buf), \"* Verify E: %s.? (%d) -- Ignored\","
    },
    {
        "line": 116,
        "fullcodeline": "EMIT_SIGNAL (XP_TE_SSLMESSAGE, serv->server_session, buf, NULL, NULL,"
    },
    {
        "line": 114,
        "fullcodeline": "X509_verify_cert_error_string (verify_error),"
    },
    {
        "line": 148,
        "fullcodeline": "auto_reconnect (serv, FALSE, -1);"
    }
]