[
    {
        "line": 7,
        "fullcodeline": "struct snd_usb_midi_endpoint_info endpoints[MIDI_MAX_ENDPOINTS];"
    },
    {
        "line": 11,
        "fullcodeline": "umidi = kzalloc(sizeof(*umidi), GFP_KERNEL);"
    },
    {
        "line": 14,
        "fullcodeline": "umidi->dev = interface_to_usbdev(iface);"
    },
    {
        "line": 15,
        "fullcodeline": "umidi->card = card;"
    },
    {
        "line": 16,
        "fullcodeline": "umidi->iface = iface;"
    },
    {
        "line": 17,
        "fullcodeline": "umidi->quirk = quirk;"
    },
    {
        "line": 18,
        "fullcodeline": "umidi->usb_protocol_ops = &snd_usbmidi_standard_ops;"
    },
    {
        "line": 19,
        "fullcodeline": "spin_lock_init(&umidi->disc_lock);"
    },
    {
        "line": 20,
        "fullcodeline": "init_rwsem(&umidi->disc_rwsem);"
    },
    {
        "line": 21,
        "fullcodeline": "mutex_init(&umidi->mutex);"
    },
    {
        "line": 22,
        "fullcodeline": "umidi->usb_id = USB_ID(le16_to_cpu(umidi->dev->descriptor.idVendor),"
    },
    {
        "line": 24,
        "fullcodeline": "setup_timer(&umidi->error_timer, snd_usbmidi_error_timer,"
    },
    {
        "line": 28,
        "fullcodeline": "memset(endpoints, 0, sizeof(endpoints));"
    },
    {
        "line": 118,
        "fullcodeline": "out_ports = 0;"
    },
    {
        "line": 119,
        "fullcodeline": "in_ports = 0;"
    },
    {
        "line": 124,
        "fullcodeline": "err = snd_usbmidi_create_rawmidi(umidi, out_ports, in_ports);"
    },
    {
        "line": 139,
        "fullcodeline": "usb_autopm_get_interface_no_resume(umidi->iface);"
    },
    {
        "line": 141,
        "fullcodeline": "list_add_tail(&umidi->list, midi_list);"
    },
    {
        "line": 12,
        "fullcodeline": "if (!umidi)"
    },
    {
        "line": 25,
        "fullcodeline": "(unsigned long)umidi);"
    },
    {
        "line": 29,
        "fullcodeline": "switch (quirk ? quirk->type : QUIRK_MIDI_STANDARD_INTERFACE) {"
    },
    {
        "line": 112,
        "fullcodeline": "if (err < 0) {"
    },
    {
        "line": 120,
        "fullcodeline": "for (i = 0; i < MIDI_MAX_ENDPOINTS; ++i) {"
    },
    {
        "line": 125,
        "fullcodeline": "if (err < 0) {"
    },
    {
        "line": 131,
        "fullcodeline": "if (quirk && quirk->type == QUIRK_MIDI_MIDIMAN)"
    },
    {
        "line": 135,
        "fullcodeline": "if (err < 0) {"
    },
    {
        "line": 31,
        "fullcodeline": "err = snd_usbmidi_get_ms_info(umidi, endpoints);"
    },
    {
        "line": 37,
        "fullcodeline": "umidi->usb_protocol_ops = &snd_usbmidi_122l_ops;"
    },
    {
        "line": 40,
        "fullcodeline": "memcpy(&endpoints[0], quirk->data,"
    },
    {
        "line": 42,
        "fullcodeline": "err = snd_usbmidi_detect_endpoints(umidi, &endpoints[0], 1);"
    },
    {
        "line": 45,
        "fullcodeline": "err = snd_usbmidi_detect_yamaha(umidi, &endpoints[0]);"
    },
    {
        "line": 48,
        "fullcodeline": "err = snd_usbmidi_detect_roland(umidi, &endpoints[0]);"
    },
    {
        "line": 51,
        "fullcodeline": "umidi->usb_protocol_ops = &snd_usbmidi_midiman_ops;"
    },
    {
        "line": 52,
        "fullcodeline": "memcpy(&endpoints[0], quirk->data,"
    },
    {
        "line": 54,
        "fullcodeline": "err = 0;"
    },
    {
        "line": 57,
        "fullcodeline": "umidi->usb_protocol_ops = &snd_usbmidi_novation_ops;"
    },
    {
        "line": 58,
        "fullcodeline": "err = snd_usbmidi_detect_per_port_endpoints(umidi, endpoints);"
    },
    {
        "line": 61,
        "fullcodeline": "umidi->usb_protocol_ops = &snd_usbmidi_raw_ops;"
    },
    {
        "line": 73,
        "fullcodeline": "err = snd_usbmidi_detect_per_port_endpoints(umidi, endpoints);"
    },
    {
        "line": 76,
        "fullcodeline": "umidi->usb_protocol_ops = &snd_usbmidi_emagic_ops;"
    },
    {
        "line": 77,
        "fullcodeline": "memcpy(&endpoints[0], quirk->data,"
    },
    {
        "line": 79,
        "fullcodeline": "err = snd_usbmidi_detect_endpoints(umidi, &endpoints[0], 1);"
    },
    {
        "line": 82,
        "fullcodeline": "umidi->usb_protocol_ops = &snd_usbmidi_cme_ops;"
    },
    {
        "line": 83,
        "fullcodeline": "err = snd_usbmidi_detect_per_port_endpoints(umidi, endpoints);"
    },
    {
        "line": 86,
        "fullcodeline": "umidi->usb_protocol_ops = &snd_usbmidi_akai_ops;"
    },
    {
        "line": 87,
        "fullcodeline": "err = snd_usbmidi_detect_per_port_endpoints(umidi, endpoints);"
    },
    {
        "line": 89,
        "fullcodeline": "endpoints[1].out_cables = 0;"
    },
    {
        "line": 92,
        "fullcodeline": "umidi->usb_protocol_ops = &snd_usbmidi_ftdi_ops;"
    },
    {
        "line": 95,
        "fullcodeline": "err = usb_control_msg(umidi->dev, usb_sndctrlpipe(umidi->dev, 0),"
    },
    {
        "line": 100,
        "fullcodeline": "err = snd_usbmidi_detect_per_port_endpoints(umidi, endpoints);"
    },
    {
        "line": 103,
        "fullcodeline": "umidi->usb_protocol_ops = &snd_usbmidi_ch345_broken_sysex_ops;"
    },
    {
        "line": 104,
        "fullcodeline": "err = snd_usbmidi_detect_per_port_endpoints(umidi, endpoints);"
    },
    {
        "line": 107,
        "fullcodeline": "dev_err(&umidi->dev->dev, \"invalid quirk type %d\\n\","
    },
    {
        "line": 109,
        "fullcodeline": "err = -ENXIO;"
    },
    {
        "line": 113,
        "fullcodeline": "kfree(umidi);"
    },
    {
        "line": 121,
        "fullcodeline": "out_ports += hweight16(endpoints[i].out_cables);"
    },
    {
        "line": 122,
        "fullcodeline": "in_ports += hweight16(endpoints[i].in_cables);"
    },
    {
        "line": 126,
        "fullcodeline": "kfree(umidi);"
    },
    {
        "line": 132,
        "fullcodeline": "err = snd_usbmidi_create_endpoints_midiman(umidi, &endpoints[0]);"
    },
    {
        "line": 13,
        "fullcodeline": "return -ENOMEM;"
    },
    {
        "line": 32,
        "fullcodeline": "if (umidi->usb_id == USB_ID(0x0763, 0x0150)) /* M-Audio Uno */"
    },
    {
        "line": 71,
        "fullcodeline": "if (umidi->usb_id == USB_ID(0x07fd, 0x0001)) /* MOTU Fastlane */"
    },
    {
        "line": 97,
        "fullcodeline": "if (err < 0)"
    },
    {
        "line": 134,
        "fullcodeline": "err = snd_usbmidi_create_endpoints(umidi, endpoints);"
    },
    {
        "line": 33,
        "fullcodeline": "umidi->usb_protocol_ops ="
    },
    {
        "line": 72,
        "fullcodeline": "usb_set_interface(umidi->dev, 0, 0);"
    }
]