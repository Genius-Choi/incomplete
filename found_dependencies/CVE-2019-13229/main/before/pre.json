[
    {
        "line": 71,
        "fullcodeline": "a->setApplicationName(\"deepin-clone\");"
    },
    {
        "line": 75,
        "fullcodeline": "a->setApplicationVersion(\"1.0.0.1\");"
    },
    {
        "line": 77,
        "fullcodeline": "a->setOrganizationName(\"deepin\");"
    },
    {
        "line": 81,
        "fullcodeline": "QFile arguments_file(\"/lib/live/mount/medium/.tmp/deepin-clone.arguments\");"
    },
    {
        "line": 84,
        "fullcodeline": "bool load_arg_from_file = arguments_file.exists() && !Global::isTUIMode && !a->arguments().contains(\"--tui\");"
    },
    {
        "line": 108,
        "fullcodeline": "parser.process(arguments);"
    },
    {
        "line": 110,
        "fullcodeline": "ConsoleAppender *consoleAppender = new ConsoleAppender;"
    },
    {
        "line": 111,
        "fullcodeline": "consoleAppender->setFormat(logFormat);"
    },
    {
        "line": 113,
        "fullcodeline": "RollingFileAppender *rollingFileAppender = new RollingFileAppender(parser.logFile());"
    },
    {
        "line": 114,
        "fullcodeline": "rollingFileAppender->setFormat(logFormat);"
    },
    {
        "line": 115,
        "fullcodeline": "rollingFileAppender->setLogFilesLimit(5);"
    },
    {
        "line": 116,
        "fullcodeline": "rollingFileAppender->setDatePattern(RollingFileAppender::DailyRollover);"
    },
    {
        "line": 118,
        "fullcodeline": "logger->registerCategoryAppender(\"deepin.ghost\", consoleAppender);"
    },
    {
        "line": 119,
        "fullcodeline": "logger->registerCategoryAppender(\"deepin.ghost\", rollingFileAppender);"
    },
    {
        "line": 121,
        "fullcodeline": "parser.parse();"
    },
    {
        "line": 127,
        "fullcodeline": "dCInfo(\"Application command line: %s\", qPrintable(arguments.join(' ')));"
    },
    {
        "line": 174,
        "fullcodeline": "int exitCode = Global::isTUIMode ? a->exec() : qApp->exec();"
    },
    {
        "line": 175,
        "fullcodeline": "QString log_backup_file = parser.logBackupFile();"
    },
    {
        "line": 5,
        "fullcodeline": "if (isTUIMode(argc, argv)) {"
    },
    {
        "line": 129,
        "fullcodeline": "if (Global::debugLevel == 0) {"
    },
    {
        "line": 177,
        "fullcodeline": "if (log_backup_file.startsWith(\"serial://\")) {"
    },
    {
        "line": 181,
        "fullcodeline": "if (log_backup_file.isEmpty()) {"
    },
    {
        "line": 6,
        "fullcodeline": "Global::isTUIMode = true;"
    },
    {
        "line": 8,
        "fullcodeline": "a = new QCoreApplication(argc, argv);"
    },
    {
        "line": 87,
        "fullcodeline": "arguments.append(a->arguments().first());"
    },
    {
        "line": 103,
        "fullcodeline": "qDebug() << arguments;"
    },
    {
        "line": 124,
        "fullcodeline": "dCDebug(\"Load arguments from \\\"%s\\\"\", qPrintable(arguments_file.fileName()));"
    },
    {
        "line": 130,
        "fullcodeline": "QLoggingCategory::setFilterRules(\"deepin.ghost.debug=false\");"
    },
    {
        "line": 178,
        "fullcodeline": "log_backup_file = Helper::parseSerialUrl(log_backup_file);"
    },
    {
        "line": 185,
        "fullcodeline": "if (!QFile::copy(parser.logFile(), log_backup_file)) {"
    },
    {
        "line": 89,
        "fullcodeline": "if (!arguments_file.open(QIODevice::ReadOnly)) {"
    },
    {
        "line": 105,
        "fullcodeline": "arguments = a->arguments();"
    },
    {
        "line": 134,
        "fullcodeline": "if (!parser.target().isEmpty()) {"
    },
    {
        "line": 186,
        "fullcodeline": "dCWarning(\"failed to copy log file to \\\"%s\\\"\", qPrintable(log_backup_file));"
    },
    {
        "line": 90,
        "fullcodeline": "qCritical() << \"Open \\\"/lib/live/mount/medium/.tmp/deepin-clone.arguments\\\" failed, error:\" << arguments_file.errorString();"
    },
    {
        "line": 135,
        "fullcodeline": "CloneJob *job = new CloneJob;"
    },
    {
        "line": 137,
        "fullcodeline": "QObject::connect(job, &QThread::finished, a, &QCoreApplication::quit);"
    },
    {
        "line": 139,
        "fullcodeline": "job->start(parser.source(), parser.target());"
    },
    {
        "line": 99,
        "fullcodeline": "arguments_file.close();"
    },
    {
        "line": 100,
        "fullcodeline": "arguments_file.remove();"
    },
    {
        "line": 92,
        "fullcodeline": "while (!arguments_file.atEnd()) {"
    },
    {
        "line": 93,
        "fullcodeline": "const QString &arg = QString::fromUtf8(arguments_file.readLine().trimmed());"
    },
    {
        "line": 95,
        "fullcodeline": "if (!arg.isEmpty())"
    },
    {
        "line": 96,
        "fullcodeline": "arguments.append(arg);"
    }
]