[
    {
        "line": 4,
        "fullcodeline": "ogs_assert(context_initialized == 0);"
    },
    {
        "line": 7,
        "fullcodeline": "memset(&self, 0, sizeof(ogs_pfcp_context_t));"
    },
    {
        "line": 9,
        "fullcodeline": "self.local_recovery = ogs_time_ntp32_now();"
    },
    {
        "line": 11,
        "fullcodeline": "ogs_log_install_domain(&__ogs_pfcp_domain, \"pfcp\", ogs_core()->log.level);"
    },
    {
        "line": 13,
        "fullcodeline": "ogs_pool_init(&ogs_pfcp_node_pool, ogs_app()->pool.nf);"
    },
    {
        "line": 15,
        "fullcodeline": "ogs_pool_init(&ogs_pfcp_sess_pool, ogs_app()->pool.sess);"
    },
    {
        "line": 17,
        "fullcodeline": "ogs_pool_init(&ogs_pfcp_far_pool,"
    },
    {
        "line": 19,
        "fullcodeline": "ogs_pool_init(&ogs_pfcp_urr_pool,"
    },
    {
        "line": 21,
        "fullcodeline": "ogs_pool_init(&ogs_pfcp_qer_pool,"
    },
    {
        "line": 23,
        "fullcodeline": "ogs_pool_init(&ogs_pfcp_bar_pool,"
    },
    {
        "line": 26,
        "fullcodeline": "ogs_pool_init(&ogs_pfcp_pdr_pool,"
    },
    {
        "line": 28,
        "fullcodeline": "ogs_pool_init(&ogs_pfcp_pdr_teid_pool, ogs_pfcp_pdr_pool.size);"
    },
    {
        "line": 29,
        "fullcodeline": "ogs_pool_random_id_generate(&ogs_pfcp_pdr_teid_pool);"
    },
    {
        "line": 31,
        "fullcodeline": "pdr_random_to_index = ogs_calloc("
    },
    {
        "line": 33,
        "fullcodeline": "ogs_assert(pdr_random_to_index);"
    },
    {
        "line": 37,
        "fullcodeline": "ogs_pool_init(&ogs_pfcp_rule_pool,"
    },
    {
        "line": 41,
        "fullcodeline": "ogs_pool_init(&ogs_pfcp_dev_pool, OGS_MAX_NUM_OF_DEV);"
    },
    {
        "line": 42,
        "fullcodeline": "ogs_pool_init(&ogs_pfcp_subnet_pool, OGS_MAX_NUM_OF_SUBNET);"
    },
    {
        "line": 44,
        "fullcodeline": "self.object_teid_hash = ogs_hash_make();"
    },
    {
        "line": 45,
        "fullcodeline": "ogs_assert(self.object_teid_hash);"
    },
    {
        "line": 46,
        "fullcodeline": "self.far_f_teid_hash = ogs_hash_make();"
    },
    {
        "line": 47,
        "fullcodeline": "ogs_assert(self.far_f_teid_hash);"
    },
    {
        "line": 48,
        "fullcodeline": "self.far_teid_hash = ogs_hash_make();"
    },
    {
        "line": 49,
        "fullcodeline": "ogs_assert(self.far_teid_hash);"
    },
    {
        "line": 51,
        "fullcodeline": "context_initialized = 1;"
    },
    {
        "line": 18,
        "fullcodeline": "ogs_app()->pool.sess * OGS_MAX_NUM_OF_FAR);"
    },
    {
        "line": 20,
        "fullcodeline": "ogs_app()->pool.sess * OGS_MAX_NUM_OF_URR);"
    },
    {
        "line": 22,
        "fullcodeline": "ogs_app()->pool.sess * OGS_MAX_NUM_OF_QER);"
    },
    {
        "line": 24,
        "fullcodeline": "ogs_app()->pool.sess * OGS_MAX_NUM_OF_BAR);"
    },
    {
        "line": 27,
        "fullcodeline": "ogs_app()->pool.sess * OGS_MAX_NUM_OF_PDR);"
    },
    {
        "line": 34,
        "fullcodeline": "for (i = 0; i < ogs_pfcp_pdr_pool.size; i++)"
    },
    {
        "line": 35,
        "fullcodeline": "pdr_random_to_index[ogs_pfcp_pdr_teid_pool.array[i]] = i;"
    },
    {
        "line": 38,
        "fullcodeline": "ogs_app()->pool.sess *"
    },
    {
        "line": 32,
        "fullcodeline": "sizeof(ogs_pool_id_t), ogs_pfcp_pdr_pool.size+1);"
    }
]