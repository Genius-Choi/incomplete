[
    {
        "line": 10,
        "fullcodeline": "BOOL useAlpha = FALSE;"
    },
    {
        "line": 17,
        "fullcodeline": "INT32 rleSizes[4] = { 0, 0, 0, 0 };"
    },
    {
        "line": 18,
        "fullcodeline": "UINT32 rawSizes[4];"
    },
    {
        "line": 19,
        "fullcodeline": "UINT32 rawWidths[4];"
    },
    {
        "line": 20,
        "fullcodeline": "UINT32 rawHeights[4];"
    },
    {
        "line": 22,
        "fullcodeline": "const BYTE* planes[4] = { 0 };"
    },
    {
        "line": 23,
        "fullcodeline": "const UINT32 w = MIN(nSrcWidth, nDstWidth);"
    },
    {
        "line": 24,
        "fullcodeline": "const UINT32 h = MIN(nSrcHeight, nDstHeight);"
    },
    {
        "line": 25,
        "fullcodeline": "const primitives_t* prims = primitives_get();"
    },
    {
        "line": 27,
        "fullcodeline": "WINPR_ASSERT(planar);"
    },
    {
        "line": 28,
        "fullcodeline": "WINPR_ASSERT(prims);"
    },
    {
        "line": 33,
        "fullcodeline": "srcp = pSrcData;"
    },
    {
        "line": 48,
        "fullcodeline": "cll = (FormatHeader & PLANAR_FORMAT_HEADER_CLL_MASK);"
    },
    {
        "line": 49,
        "fullcodeline": "cs = (FormatHeader & PLANAR_FORMAT_HEADER_CS) ? TRUE : FALSE;"
    },
    {
        "line": 50,
        "fullcodeline": "rle = (FormatHeader & PLANAR_FORMAT_HEADER_RLE) ? TRUE : FALSE;"
    },
    {
        "line": 51,
        "fullcodeline": "alpha = (FormatHeader & PLANAR_FORMAT_HEADER_NA) ? FALSE : TRUE;"
    },
    {
        "line": 53,
        "fullcodeline": "DstFormat = planar_invert_format(planar, alpha, DstFormat);"
    },
    {
        "line": 67,
        "fullcodeline": "subWidth = (nSrcWidth / 2) + (nSrcWidth % 2);"
    },
    {
        "line": 68,
        "fullcodeline": "subHeight = (nSrcHeight / 2) + (nSrcHeight % 2);"
    },
    {
        "line": 69,
        "fullcodeline": "planeSize = nSrcWidth * nSrcHeight;"
    },
    {
        "line": 70,
        "fullcodeline": "subSize = subWidth * subHeight;"
    },
    {
        "line": 388,
        "fullcodeline": "WINPR_UNUSED(srcp);"
    },
    {
        "line": 30,
        "fullcodeline": "if (nDstStep <= 0)"
    },
    {
        "line": 35,
        "fullcodeline": "if (!pSrcData)"
    },
    {
        "line": 41,
        "fullcodeline": "if (!pDstData)"
    },
    {
        "line": 61,
        "fullcodeline": "if (!cll && cs)"
    },
    {
        "line": 72,
        "fullcodeline": "if (!cs)"
    },
    {
        "line": 103,
        "fullcodeline": "if (!rle) /* RAW */"
    },
    {
        "line": 188,
        "fullcodeline": "if (!cll) /* RGB */"
    },
    {
        "line": 31,
        "fullcodeline": "nDstStep = nDstWidth * FreeRDPGetBytesPerPixel(DstFormat);"
    },
    {
        "line": 37,
        "fullcodeline": "WLog_ERR(TAG, \"Invalid argument pSrcData=NULL\");"
    },
    {
        "line": 43,
        "fullcodeline": "WLog_ERR(TAG, \"Invalid argument pDstData=NULL\");"
    },
    {
        "line": 47,
        "fullcodeline": "FormatHeader = *srcp++;"
    },
    {
        "line": 56,
        "fullcodeline": "useAlpha = FreeRDPColorHasAlpha(DstFormat);"
    },
    {
        "line": 63,
        "fullcodeline": "WLog_ERR(TAG, \"Chroma subsampling requires YCoCg and does not work with RGB data\");"
    },
    {
        "line": 74,
        "fullcodeline": "rawSizes[0] = planeSize; /* LumaOrRedPlane */"
    },
    {
        "line": 75,
        "fullcodeline": "rawWidths[0] = nSrcWidth;"
    },
    {
        "line": 76,
        "fullcodeline": "rawHeights[0] = nSrcHeight;"
    },
    {
        "line": 77,
        "fullcodeline": "rawSizes[1] = planeSize; /* OrangeChromaOrGreenPlane */"
    },
    {
        "line": 78,
        "fullcodeline": "rawWidths[1] = nSrcWidth;"
    },
    {
        "line": 79,
        "fullcodeline": "rawHeights[1] = nSrcHeight;"
    },
    {
        "line": 80,
        "fullcodeline": "rawSizes[2] = planeSize; /* GreenChromaOrBluePlane */"
    },
    {
        "line": 81,
        "fullcodeline": "rawWidths[2] = nSrcWidth;"
    },
    {
        "line": 82,
        "fullcodeline": "rawHeights[2] = nSrcHeight;"
    },
    {
        "line": 83,
        "fullcodeline": "rawSizes[3] = planeSize; /* AlphaPlane */"
    },
    {
        "line": 84,
        "fullcodeline": "rawWidths[3] = nSrcWidth;"
    },
    {
        "line": 85,
        "fullcodeline": "rawHeights[3] = nSrcHeight;"
    },
    {
        "line": 105,
        "fullcodeline": "UINT32 base = planeSize * 3;"
    },
    {
        "line": 191,
        "fullcodeline": "BYTE* pTempData = pDstData;"
    },
    {
        "line": 192,
        "fullcodeline": "UINT32 nTempStep = nDstStep;"
    },
    {
        "line": 193,
        "fullcodeline": "UINT32 nTotalHeight = nYDst + nDstHeight;"
    },
    {
        "line": 200,
        "fullcodeline": "TempFormat = planar_invert_format(planar, alpha, TempFormat);"
    },
    {
        "line": 89,
        "fullcodeline": "rawSizes[0] = planeSize; /* LumaOrRedPlane */"
    },
    {
        "line": 90,
        "fullcodeline": "rawWidths[0] = nSrcWidth;"
    },
    {
        "line": 91,
        "fullcodeline": "rawHeights[0] = nSrcHeight;"
    },
    {
        "line": 92,
        "fullcodeline": "rawSizes[1] = subSize; /* OrangeChromaOrGreenPlane */"
    },
    {
        "line": 93,
        "fullcodeline": "rawWidths[1] = subWidth;"
    },
    {
        "line": 94,
        "fullcodeline": "rawHeights[1] = subHeight;"
    },
    {
        "line": 95,
        "fullcodeline": "rawSizes[2] = subSize; /* GreenChromaOrBluePlane */"
    },
    {
        "line": 96,
        "fullcodeline": "rawWidths[2] = subWidth;"
    },
    {
        "line": 97,
        "fullcodeline": "rawHeights[2] = subHeight;"
    },
    {
        "line": 98,
        "fullcodeline": "rawSizes[3] = planeSize; /* AlphaPlane */"
    },
    {
        "line": 99,
        "fullcodeline": "rawWidths[3] = nSrcWidth;"
    },
    {
        "line": 100,
        "fullcodeline": "rawHeights[3] = nSrcHeight;"
    },
    {
        "line": 167,
        "fullcodeline": "rleSizes[0] = planar_skip_plane_rle(planes[0], SrcSize - (planes[0] - pSrcData),"
    },
    {
        "line": 173,
        "fullcodeline": "planes[1] = planes[0] + rleSizes[0];"
    },
    {
        "line": 174,
        "fullcodeline": "rleSizes[1] = planar_skip_plane_rle(planes[1], SrcSize - (planes[1] - pSrcData),"
    },
    {
        "line": 180,
        "fullcodeline": "planes[2] = planes[1] + rleSizes[1];"
    },
    {
        "line": 181,
        "fullcodeline": "rleSizes[2] = planar_skip_plane_rle(planes[2], SrcSize - (planes[2] - pSrcData),"
    },
    {
        "line": 202,
        "fullcodeline": "if ((TempFormat != DstFormat) || (nSrcWidth != nDstWidth) || (nSrcHeight != nDstHeight))"
    },
    {
        "line": 209,
        "fullcodeline": "if (!rle) /* RAW */"
    },
    {
        "line": 265,
        "fullcodeline": "if (pTempData != pDstData)"
    },
    {
        "line": 278,
        "fullcodeline": "BYTE* pTempData = planar->pTempData;"
    },
    {
        "line": 279,
        "fullcodeline": "UINT32 nTempStep = planar->nTempStep;"
    },
    {
        "line": 280,
        "fullcodeline": "UINT32 nTotalHeight = planar->maxHeight;"
    },
    {
        "line": 281,
        "fullcodeline": "BYTE* dst = &pDstData[nXDst * FreeRDPGetBytesPerPixel(DstFormat) + nYDst * nDstStep];"
    },
    {
        "line": 378,
        "fullcodeline": "WINPR_ASSERT(prims->YCoCgToRGB_8u_AC4R);"
    },
    {
        "line": 379,
        "fullcodeline": "int rc = prims->YCoCgToRGB_8u_AC4R(pTempData, nTempStep, dst, DstFormat, nDstStep, w, h,"
    },
    {
        "line": 107,
        "fullcodeline": "base = planeSize + planeSize / 2;"
    },
    {
        "line": 118,
        "fullcodeline": "planes[3] = srcp;                    /* AlphaPlane */"
    },
    {
        "line": 119,
        "fullcodeline": "planes[0] = planes[3] + rawSizes[3]; /* LumaOrRedPlane */"
    },
    {
        "line": 120,
        "fullcodeline": "planes[1] = planes[0] + rawSizes[0]; /* OrangeChromaOrGreenPlane */"
    },
    {
        "line": 121,
        "fullcodeline": "planes[2] = planes[1] + rawSizes[1]; /* GreenChromaOrBluePlane */"
    },
    {
        "line": 170,
        "fullcodeline": "if (rleSizes[0] < 0)"
    },
    {
        "line": 177,
        "fullcodeline": "if (rleSizes[1] < 1)"
    },
    {
        "line": 184,
        "fullcodeline": "if (rleSizes[2] < 1)"
    },
    {
        "line": 196,
        "fullcodeline": "TempFormat = PIXEL_FORMAT_BGRA32;"
    },
    {
        "line": 204,
        "fullcodeline": "pTempData = planar->pTempData;"
    },
    {
        "line": 205,
        "fullcodeline": "nTempStep = planar->nTempStep;"
    },
    {
        "line": 206,
        "fullcodeline": "nTotalHeight = planar->maxHeight;"
    },
    {
        "line": 288,
        "fullcodeline": "if (!pTempData)"
    },
    {
        "line": 381,
        "fullcodeline": "if (rc != PRIMITIVES_SUCCESS)"
    },
    {
        "line": 111,
        "fullcodeline": "if ((SrcSize - (srcp - pSrcData)) < (planeSize + base))"
    },
    {
        "line": 123,
        "fullcodeline": "if ((planes[2] + rawSizes[2]) > &pSrcData[SrcSize])"
    },
    {
        "line": 139,
        "fullcodeline": "planes[0] = srcp;                    /* LumaOrRedPlane */"
    },
    {
        "line": 140,
        "fullcodeline": "planes[1] = planes[0] + rawSizes[0]; /* OrangeChromaOrGreenPlane */"
    },
    {
        "line": 141,
        "fullcodeline": "planes[2] = planes[1] + rawSizes[1]; /* GreenChromaOrBluePlane */"
    },
    {
        "line": 155,
        "fullcodeline": "planes[3] = srcp;"
    },
    {
        "line": 156,
        "fullcodeline": "rleSizes[3] = planar_skip_plane_rle(planes[3], SrcSize - (planes[3] - pSrcData),"
    },
    {
        "line": 162,
        "fullcodeline": "planes[0] = planes[3] + rleSizes[3];"
    },
    {
        "line": 198,
        "fullcodeline": "TempFormat = PIXEL_FORMAT_BGRX32;"
    },
    {
        "line": 211,
        "fullcodeline": "if (!planar_decompress_planes_raw(planes, pTempData, TempFormat, nTempStep, nXDst,"
    },
    {
        "line": 220,
        "fullcodeline": "if ((SrcSize - (srcp - pSrcData)) == 1)"
    },
    {
        "line": 225,
        "fullcodeline": "status ="
    },
    {
        "line": 232,
        "fullcodeline": "status = planar_decompress_plane_rle(planes[1], rleSizes[1], pTempData, nTempStep,"
    },
    {
        "line": 239,
        "fullcodeline": "status ="
    },
    {
        "line": 246,
        "fullcodeline": "srcp += rleSizes[0] + rleSizes[1] + rleSizes[2];"
    },
    {
        "line": 267,
        "fullcodeline": "if (!freerdp_image_copy(pDstData, DstFormat, nDstStep, nXDst, nYDst, w, h, pTempData,"
    },
    {
        "line": 284,
        "fullcodeline": "TempFormat = PIXEL_FORMAT_BGRA32;"
    },
    {
        "line": 295,
        "fullcodeline": "BYTE* rleBuffer[4] = { 0 };"
    },
    {
        "line": 297,
        "fullcodeline": "rleBuffer[3] = planar->rlePlanesBuffer;  /* AlphaPlane */"
    },
    {
        "line": 298,
        "fullcodeline": "rleBuffer[0] = rleBuffer[3] + planeSize; /* LumaOrRedPlane */"
    },
    {
        "line": 299,
        "fullcodeline": "rleBuffer[1] = rleBuffer[0] + planeSize; /* OrangeChromaOrGreenPlane */"
    },
    {
        "line": 300,
        "fullcodeline": "rleBuffer[2] = rleBuffer[1] + planeSize; /* GreenChromaOrBluePlane */"
    },
    {
        "line": 314,
        "fullcodeline": "status = planar_decompress_plane_rle_only(planes[0], rleSizes[0], rleBuffer[0],"
    },
    {
        "line": 320,
        "fullcodeline": "status ="
    },
    {
        "line": 327,
        "fullcodeline": "status ="
    },
    {
        "line": 334,
        "fullcodeline": "planes[0] = rleBuffer[0];"
    },
    {
        "line": 335,
        "fullcodeline": "planes[1] = rleBuffer[1];"
    },
    {
        "line": 336,
        "fullcodeline": "planes[2] = rleBuffer[2];"
    },
    {
        "line": 337,
        "fullcodeline": "planes[3] = rleBuffer[3];"
    },
    {
        "line": 365,
        "fullcodeline": "if (!planar_decompress_planes_raw(planes, pTempData, TempFormat, nTempStep, nXDst,"
    },
    {
        "line": 374,
        "fullcodeline": "if ((SrcSize - (srcp - pSrcData)) == 1)"
    },
    {
        "line": 383,
        "fullcodeline": "WLog_ERR(TAG, \"YCoCgToRGB_8u_AC4R failed with %d\", rc);"
    },
    {
        "line": 132,
        "fullcodeline": "if ((SrcSize - (srcp - pSrcData)) < base)"
    },
    {
        "line": 143,
        "fullcodeline": "if ((planes[2] + rawSizes[2]) > &pSrcData[SrcSize])"
    },
    {
        "line": 159,
        "fullcodeline": "if (rleSizes[3] < 0)"
    },
    {
        "line": 165,
        "fullcodeline": "planes[0] = srcp;"
    },
    {
        "line": 216,
        "fullcodeline": "srcp += rawSizes[0] + rawSizes[1] + rawSizes[2] + rawSizes[3];"
    },
    {
        "line": 221,
        "fullcodeline": "srcp++; /* pad */"
    },
    {
        "line": 226,
        "fullcodeline": "planar_decompress_plane_rle(planes[0], rleSizes[0], pTempData, nTempStep, nXDst,"
    },
    {
        "line": 229,
        "fullcodeline": "if (status < 0)"
    },
    {
        "line": 236,
        "fullcodeline": "if (status < 0)"
    },
    {
        "line": 240,
        "fullcodeline": "planar_decompress_plane_rle(planes[2], rleSizes[2], pTempData, nTempStep, nXDst,"
    },
    {
        "line": 243,
        "fullcodeline": "if (status < 0)"
    },
    {
        "line": 258,
        "fullcodeline": "if (status < 0)"
    },
    {
        "line": 270,
        "fullcodeline": "WLog_ERR(TAG, \"planar image copy failed\");"
    },
    {
        "line": 286,
        "fullcodeline": "TempFormat = PIXEL_FORMAT_BGRX32;"
    },
    {
        "line": 317,
        "fullcodeline": "if (status < 0)"
    },
    {
        "line": 321,
        "fullcodeline": "planar_decompress_plane_rle_only(planes[1], rleSizes[1], rleBuffer[1], rawWidths[1],"
    },
    {
        "line": 324,
        "fullcodeline": "if (status < 0)"
    },
    {
        "line": 328,
        "fullcodeline": "planar_decompress_plane_rle_only(planes[2], rleSizes[2], rleBuffer[2], rawWidths[2],"
    },
    {
        "line": 331,
        "fullcodeline": "if (status < 0)"
    },
    {
        "line": 350,
        "fullcodeline": "planes[1] = planar->deltaPlanes[0];"
    },
    {
        "line": 351,
        "fullcodeline": "rawSizes[1] = planeSize; /* OrangeChromaOrGreenPlane */"
    },
    {
        "line": 352,
        "fullcodeline": "rawWidths[1] = nSrcWidth;"
    },
    {
        "line": 353,
        "fullcodeline": "rawHeights[1] = nSrcHeight;"
    },
    {
        "line": 359,
        "fullcodeline": "planes[2] = planar->deltaPlanes[1];"
    },
    {
        "line": 360,
        "fullcodeline": "rawSizes[2] = planeSize; /* GreenChromaOrBluePlane */"
    },
    {
        "line": 361,
        "fullcodeline": "rawWidths[2] = nSrcWidth;"
    },
    {
        "line": 362,
        "fullcodeline": "rawHeights[2] = nSrcHeight;"
    },
    {
        "line": 370,
        "fullcodeline": "srcp += rawSizes[0] + rawSizes[1] + rawSizes[2] + rawSizes[3];"
    },
    {
        "line": 375,
        "fullcodeline": "srcp++; /* pad */"
    },
    {
        "line": 218,
        "fullcodeline": "srcp += rawSizes[0] + rawSizes[1] + rawSizes[2];"
    },
    {
        "line": 250,
        "fullcodeline": "status = planar_decompress_plane_rle(planes[3], rleSizes[3], pTempData, nTempStep,"
    },
    {
        "line": 262,
        "fullcodeline": "srcp += rleSizes[3];"
    },
    {
        "line": 303,
        "fullcodeline": "status ="
    },
    {
        "line": 312,
        "fullcodeline": "srcp += rleSizes[3];"
    },
    {
        "line": 346,
        "fullcodeline": "if (!planar_subsample_expand(planes[1], rawSizes[1], nSrcWidth, nSrcHeight,"
    },
    {
        "line": 355,
        "fullcodeline": "if (!planar_subsample_expand(planes[2], rawSizes[2], nSrcWidth, nSrcHeight,"
    },
    {
        "line": 372,
        "fullcodeline": "srcp += rawSizes[0] + rawSizes[1] + rawSizes[2];"
    },
    {
        "line": 255,
        "fullcodeline": "status = planar_set_plane(0xFF, pTempData, nTempStep, nXDst, nYDst, nSrcWidth,"
    },
    {
        "line": 304,
        "fullcodeline": "planar_decompress_plane_rle_only(planes[3], rleSizes[3], rleBuffer[3],"
    },
    {
        "line": 307,
        "fullcodeline": "if (status < 0)"
    }
]