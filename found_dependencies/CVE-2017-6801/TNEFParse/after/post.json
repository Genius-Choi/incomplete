[
    {
        "line": 23,
        "fullcodeline": "DEBUG(TNEF->Debug, 2, \"Reading Signature\");"
    },
    {
        "line": 32,
        "fullcodeline": "DEBUG(TNEF->Debug, 2, \"Checking Signature\");"
    },
    {
        "line": 41,
        "fullcodeline": "DEBUG(TNEF->Debug, 2, \"Reading Key.\");"
    },
    {
        "line": 51,
        "fullcodeline": "DEBUG(TNEF->Debug, 2, \"Starting Full Processing.\");"
    },
    {
        "line": 10,
        "fullcodeline": "if (TNEF->IO.ReadProc == NULL) {"
    },
    {
        "line": 15,
        "fullcodeline": "if (TNEF->IO.InitProc != NULL) {"
    },
    {
        "line": 24,
        "fullcodeline": "if (TNEF->IO.ReadProc(&TNEF->IO, sizeof(DWORD), 1, &signature) < 1) {"
    },
    {
        "line": 33,
        "fullcodeline": "if (TNEFCheckForSignature(signature) < 0) {"
    },
    {
        "line": 43,
        "fullcodeline": "if (TNEFGetKey(TNEF, &key) < 0) {"
    },
    {
        "line": 53,
        "fullcodeline": "while (TNEFGetHeader(TNEF, &type, &size) == 0) {"
    },
    {
        "line": 110,
        "fullcodeline": "if (TNEF->IO.CloseProc != NULL) {"
    },
    {
        "line": 11,
        "fullcodeline": "printf(\"ERROR: Setup incorrectly: No ReadProc\\n\");"
    },
    {
        "line": 16,
        "fullcodeline": "DEBUG(TNEF->Debug, 2, \"About to initialize\");"
    },
    {
        "line": 20,
        "fullcodeline": "DEBUG(TNEF->Debug, 2, \"Initialization finished\");"
    },
    {
        "line": 25,
        "fullcodeline": "printf(\"ERROR: Error reading signature\\n\");"
    },
    {
        "line": 34,
        "fullcodeline": "printf(\"ERROR: Signature does not match. Not TNEF.\\n\");"
    },
    {
        "line": 44,
        "fullcodeline": "printf(\"ERROR: Unable to retrieve key.\\n\");"
    },
    {
        "line": 54,
        "fullcodeline": "DEBUG2(TNEF->Debug, 2, \"Header says type=0x%X, size=%u\", type, size);"
    },
    {
        "line": 55,
        "fullcodeline": "DEBUG2(TNEF->Debug, 2, \"Header says type=%u, size=%u\", type, size);"
    },
    {
        "line": 60,
        "fullcodeline": "data = calloc(size, sizeof(BYTE));"
    },
    {
        "line": 61,
        "fullcodeline": "ALLOCCHECK(data);"
    },
    {
        "line": 78,
        "fullcodeline": "checksum = SwapWord((BYTE *)&checksum, sizeof(WORD));"
    },
    {
        "line": 107,
        "fullcodeline": "free(data);"
    },
    {
        "line": 111,
        "fullcodeline": "TNEF->IO.CloseProc(&TNEF->IO);"
    },
    {
        "line": 17,
        "fullcodeline": "if (TNEF->IO.InitProc(&TNEF->IO) != 0) {"
    },
    {
        "line": 26,
        "fullcodeline": "if (TNEF->IO.CloseProc != NULL) {"
    },
    {
        "line": 35,
        "fullcodeline": "if (TNEF->IO.CloseProc != NULL) {"
    },
    {
        "line": 45,
        "fullcodeline": "if (TNEF->IO.CloseProc != NULL) {"
    },
    {
        "line": 56,
        "fullcodeline": "if(size == 0) {"
    },
    {
        "line": 62,
        "fullcodeline": "if (TNEFRawRead(TNEF, data, size, &header_checksum) < 0) {"
    },
    {
        "line": 70,
        "fullcodeline": "if (TNEFRawRead(TNEF, (BYTE *)&checksum, 2, NULL) < 0) {"
    },
    {
        "line": 79,
        "fullcodeline": "if (checksum != header_checksum) {"
    },
    {
        "line": 87,
        "fullcodeline": "for (i = 0; i < (sizeof(TNEFList) / sizeof(TNEFHandler)); i++) {"
    },
    {
        "line": 27,
        "fullcodeline": "TNEF->IO.CloseProc(&TNEF->IO);"
    },
    {
        "line": 36,
        "fullcodeline": "TNEF->IO.CloseProc(&TNEF->IO);"
    },
    {
        "line": 46,
        "fullcodeline": "TNEF->IO.CloseProc(&TNEF->IO);"
    },
    {
        "line": 57,
        "fullcodeline": "printf(\"ERROR: Field with size of 0\\n\");"
    },
    {
        "line": 63,
        "fullcodeline": "printf(\"ERROR: Unable to read data.\\n\");"
    },
    {
        "line": 67,
        "fullcodeline": "free(data);"
    },
    {
        "line": 71,
        "fullcodeline": "printf(\"ERROR: Unable to read checksum.\\n\");"
    },
    {
        "line": 75,
        "fullcodeline": "free(data);"
    },
    {
        "line": 80,
        "fullcodeline": "printf(\"ERROR: Checksum mismatch. Data corruption?:\\n\");"
    },
    {
        "line": 84,
        "fullcodeline": "free(data);"
    },
    {
        "line": 64,
        "fullcodeline": "if (TNEF->IO.CloseProc != NULL) {"
    },
    {
        "line": 72,
        "fullcodeline": "if (TNEF->IO.CloseProc != NULL) {"
    },
    {
        "line": 81,
        "fullcodeline": "if (TNEF->IO.CloseProc != NULL) {"
    },
    {
        "line": 88,
        "fullcodeline": "if (TNEFList[i].id == type) {"
    },
    {
        "line": 65,
        "fullcodeline": "TNEF->IO.CloseProc(&TNEF->IO);"
    },
    {
        "line": 73,
        "fullcodeline": "TNEF->IO.CloseProc(&TNEF->IO);"
    },
    {
        "line": 82,
        "fullcodeline": "TNEF->IO.CloseProc(&TNEF->IO);"
    },
    {
        "line": 89,
        "fullcodeline": "if (TNEFList[i].handler != NULL) {"
    },
    {
        "line": 90,
        "fullcodeline": "if (TNEFList[i].handler(TNEF, i, (char*)data, size) < 0) {"
    },
    {
        "line": 101,
        "fullcodeline": "DEBUG2(TNEF->Debug, 1, \"No handler for %s: %u bytes\","
    },
    {
        "line": 91,
        "fullcodeline": "free(data);"
    },
    {
        "line": 92,
        "fullcodeline": "if (TNEF->IO.CloseProc != NULL) {"
    },
    {
        "line": 93,
        "fullcodeline": "TNEF->IO.CloseProc(&TNEF->IO);"
    }
]