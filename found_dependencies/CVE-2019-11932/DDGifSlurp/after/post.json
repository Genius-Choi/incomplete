[
    {
        "line": 6,
        "fullcodeline": "gifFilePtr = info->gifFilePtr;"
    },
    {
        "line": 7,
        "fullcodeline": "uint_fast32_t lastAllocatedGCBIndex = 0;"
    },
    {
        "line": 139,
        "fullcodeline": "info->rewindFunction(info);"
    },
    {
        "line": 137,
        "fullcodeline": "} while (RecordType != TERMINATE_RECORD_TYPE);"
    },
    {
        "line": 12,
        "fullcodeline": "bool isInitialPass = !decode && !exitAfterFrame;"
    },
    {
        "line": 9,
        "fullcodeline": "if (DGifGetRecordType(gifFilePtr, &RecordType) == GIF_ERROR) {"
    },
    {
        "line": 16,
        "fullcodeline": "if (DGifGetImageDesc(gifFilePtr, isInitialPass) == GIF_ERROR) {"
    },
    {
        "line": 112,
        "fullcodeline": "if (DGifGetExtension(gifFilePtr, &ExtFunction, &ExtData) == GIF_ERROR) {"
    },
    {
        "line": 121,
        "fullcodeline": "while (ExtData != NULL) {"
    },
    {
        "line": 21,
        "fullcodeline": "int_fast32_t widthOverflow = gifFilePtr->Image.Width - gifFilePtr->SWidth;"
    },
    {
        "line": 22,
        "fullcodeline": "int_fast32_t heightOverflow = gifFilePtr->Image.Height - gifFilePtr->SHeight;"
    },
    {
        "line": 28,
        "fullcodeline": "int_fast32_t topOverflow = gifFilePtr->Image.Top + gifFilePtr->Image.Height - gifFilePtr->SHeight;"
    },
    {
        "line": 33,
        "fullcodeline": "int_fast32_t leftOverflow = gifFilePtr->Image.Left + gifFilePtr->Image.Width - gifFilePtr->SWidth;"
    },
    {
        "line": 43,
        "fullcodeline": "const uint_fast32_t newRasterSize = gifFilePtr->Image.Width * gifFilePtr->Image.Height;"
    },
    {
        "line": 50,
        "fullcodeline": "const int_fast32_t widthOverflow = gifFilePtr->Image.Width - info->originalWidth;"
    },
    {
        "line": 51,
        "fullcodeline": "const int_fast32_t heightOverflow = gifFilePtr->Image.Height - info->originalHeight;"
    },
    {
        "line": 116,
        "fullcodeline": "updateGCB(info, &lastAllocatedGCBIndex);"
    },
    {
        "line": 23,
        "fullcodeline": "if (widthOverflow > 0 || heightOverflow > 0) {"
    },
    {
        "line": 29,
        "fullcodeline": "if (topOverflow > 0) {"
    },
    {
        "line": 34,
        "fullcodeline": "if (leftOverflow > 0) {"
    },
    {
        "line": 37,
        "fullcodeline": "if (!updateGCB(info, &lastAllocatedGCBIndex)) {"
    },
    {
        "line": 44,
        "fullcodeline": "if (newRasterSize == 0) {"
    },
    {
        "line": 52,
        "fullcodeline": "if (newRasterSize > info->rasterSize || widthOverflow > 0 || heightOverflow > 0) {"
    },
    {
        "line": 81,
        "fullcodeline": "if (info->sampleSize > 1) {"
    },
    {
        "line": 117,
        "fullcodeline": "if (readExtensions(ExtFunction, ExtData, info) == GIF_ERROR) {"
    },
    {
        "line": 122,
        "fullcodeline": "if (DGifGetExtensionNext(gifFilePtr, &ExtData) == GIF_ERROR) {"
    },
    {
        "line": 125,
        "fullcodeline": "if (isInitialPass && readExtensions(ExtFunction, ExtData, info) == GIF_ERROR) {"
    },
    {
        "line": 24,
        "fullcodeline": "gifFilePtr->SWidth += widthOverflow;"
    },
    {
        "line": 25,
        "fullcodeline": "gifFilePtr->SHeight += heightOverflow;"
    },
    {
        "line": 30,
        "fullcodeline": "sp->ImageDesc.Top -= topOverflow;"
    },
    {
        "line": 35,
        "fullcodeline": "sp->ImageDesc.Left -= leftOverflow;"
    },
    {
        "line": 45,
        "fullcodeline": "free(info->rasterBits);"
    },
    {
        "line": 46,
        "fullcodeline": "info->rasterBits = NULL;"
    },
    {
        "line": 47,
        "fullcodeline": "info->rasterSize = newRasterSize;"
    },
    {
        "line": 53,
        "fullcodeline": "void *tmpRasterBits = reallocarray(info->rasterBits, newRasterSize, sizeof(GifPixelType));"
    },
    {
        "line": 58,
        "fullcodeline": "info->rasterBits = tmpRasterBits;"
    },
    {
        "line": 59,
        "fullcodeline": "info->rasterSize = newRasterSize;"
    },
    {
        "line": 67,
        "fullcodeline": "uint_fast8_t InterlacedOffset[] = {0, 4, 2, 1};"
    },
    {
        "line": 68,
        "fullcodeline": "uint_fast8_t InterlacedJumps[] = {8, 8, 4, 2};"
    },
    {
        "line": 82,
        "fullcodeline": "unsigned char *dst = info->rasterBits;"
    },
    {
        "line": 83,
        "fullcodeline": "unsigned char *src = info->rasterBits;"
    },
    {
        "line": 84,
        "fullcodeline": "unsigned char *const srcEndImage = info->rasterBits + gifFilePtr->Image.Width * gifFilePtr->Image.Height;"
    },
    {
        "line": 104,
        "fullcodeline": "} while (ExtData != NULL);"
    },
    {
        "line": 27,
        "fullcodeline": "SavedImage *sp = &gifFilePtr->SavedImages[gifFilePtr->ImageCount - 1];"
    },
    {
        "line": 54,
        "fullcodeline": "if (tmpRasterBits == NULL) {"
    },
    {
        "line": 70,
        "fullcodeline": "for (i = 0; i < 4; i++)"
    },
    {
        "line": 96,
        "fullcodeline": "} while (src < srcEndImage);"
    },
    {
        "line": 55,
        "fullcodeline": "gifFilePtr->Error = D_GIF_ERR_NOT_ENOUGH_MEM;"
    },
    {
        "line": 71,
        "fullcodeline": "for (j = InterlacedOffset[i]; j < gifFilePtr->Image.Height; j += InterlacedJumps[i]) {"
    },
    {
        "line": 76,
        "fullcodeline": "if (DGifGetLine(gifFilePtr, info->rasterBits, gifFilePtr->Image.Width * gifFilePtr->Image.Height) == GIF_ERROR) {"
    },
    {
        "line": 86,
        "fullcodeline": "unsigned char *srcNextLineStart = src + gifFilePtr->Image.Width * info->sampleSize;"
    },
    {
        "line": 87,
        "fullcodeline": "unsigned char *const srcEndLine = src + gifFilePtr->Image.Width;"
    },
    {
        "line": 88,
        "fullcodeline": "unsigned char *dstEndLine = dst + gifFilePtr->Image.Width / info->sampleSize;"
    },
    {
        "line": 94,
        "fullcodeline": "dst = dstEndLine;"
    },
    {
        "line": 95,
        "fullcodeline": "src = srcNextLineStart;"
    },
    {
        "line": 101,
        "fullcodeline": "if (DGifGetCodeNext(gifFilePtr, &ExtData) == GIF_ERROR) {"
    },
    {
        "line": 93,
        "fullcodeline": "} while (src < srcEndLine);"
    },
    {
        "line": 72,
        "fullcodeline": "if (DGifGetLine(gifFilePtr, info->rasterBits + j * gifFilePtr->Image.Width, gifFilePtr->Image.Width) == GIF_ERROR)"
    },
    {
        "line": 91,
        "fullcodeline": "dst++;"
    },
    {
        "line": 92,
        "fullcodeline": "src += info->sampleSize;"
    }
]