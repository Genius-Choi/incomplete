[
    {
        "line": 9,
        "fullcodeline": "valid_commands = {"
    },
    {
        "line": 22,
        "fullcodeline": "user = current_user.get_name()"
    },
    {
        "line": 2,
        "fullcodeline": "if target not in [FileDestinations.LOCAL, FileDestinations.SDCARD]:"
    },
    {
        "line": 5,
        "fullcodeline": "if not _validate(target, filename):"
    },
    {
        "line": 18,
        "fullcodeline": "command, data, response = get_json_command_from_request(request, valid_commands)"
    },
    {
        "line": 19,
        "fullcodeline": "if response is not None:"
    },
    {
        "line": 24,
        "fullcodeline": "if command == \"select\":"
    },
    {
        "line": 3,
        "fullcodeline": "abort(404)"
    },
    {
        "line": 6,
        "fullcodeline": "abort(404)"
    },
    {
        "line": 14,
        "fullcodeline": "\"copy\": [\"destination\"],"
    },
    {
        "line": 15,
        "fullcodeline": "\"move\": [\"destination\"],"
    },
    {
        "line": 25,
        "fullcodeline": "with Permissions.FILES_SELECT.require(403):"
    },
    {
        "line": 60,
        "fullcodeline": "elif command == \"unselect\":"
    },
    {
        "line": 42,
        "fullcodeline": "printAfterLoading = False"
    },
    {
        "line": 52,
        "fullcodeline": "sd = False"
    },
    {
        "line": 61,
        "fullcodeline": "with Permissions.FILES_SELECT.require(403):"
    },
    {
        "line": 80,
        "fullcodeline": "elif command == \"slice\":"
    },
    {
        "line": 53,
        "fullcodeline": "if target == FileDestinations.SDCARD:"
    },
    {
        "line": 26,
        "fullcodeline": "if not _verifyFileExists(target, filename):"
    },
    {
        "line": 36,
        "fullcodeline": "if not printer.is_ready():"
    },
    {
        "line": 43,
        "fullcodeline": "if \"print\" in data and data[\"print\"] in valid_boolean_trues:"
    },
    {
        "line": 54,
        "fullcodeline": "filenameToSelect = filename"
    },
    {
        "line": 55,
        "fullcodeline": "sd = True"
    },
    {
        "line": 57,
        "fullcodeline": "filenameToSelect = fileManager.path_on_disk(target, filename)"
    },
    {
        "line": 81,
        "fullcodeline": "with Permissions.SLICE.require(403):"
    },
    {
        "line": 275,
        "fullcodeline": "elif command == \"analyse\":"
    },
    {
        "line": 30,
        "fullcodeline": "if not octoprint.filemanager.valid_file_type(filename, type=\"machinecode\"):"
    },
    {
        "line": 44,
        "fullcodeline": "with Permissions.PRINT.require(403):"
    },
    {
        "line": 67,
        "fullcodeline": "_, currentFilename = _getCurrentFile()"
    },
    {
        "line": 68,
        "fullcodeline": "if currentFilename is None:"
    },
    {
        "line": 62,
        "fullcodeline": "if not printer.is_ready():"
    },
    {
        "line": 73,
        "fullcodeline": "if filename != currentFilename and filename != \"current\":"
    },
    {
        "line": 140,
        "fullcodeline": "full_path = destination"
    },
    {
        "line": 149,
        "fullcodeline": "sanitized_name = fileManager.sanitize_name(target, canon_name)"
    },
    {
        "line": 192,
        "fullcodeline": "select_after_slicing = False"
    },
    {
        "line": 201,
        "fullcodeline": "print_after_slicing = False"
    },
    {
        "line": 210,
        "fullcodeline": "override_keys = ["
    },
    {
        "line": 213,
        "fullcodeline": "overrides = {}"
    },
    {
        "line": 217,
        "fullcodeline": "def slicing_done(target, path, select_after_slicing, print_after_slicing):"
    },
    {
        "line": 250,
        "fullcodeline": "location = url_for("
    },
    {
        "line": 256,
        "fullcodeline": "result = {"
    },
    {
        "line": 271,
        "fullcodeline": "r = make_response(jsonify(result), 202)"
    },
    {
        "line": 276,
        "fullcodeline": "with Permissions.FILES_UPLOAD.require(403):"
    },
    {
        "line": 50,
        "fullcodeline": "printAfterLoading = True"
    },
    {
        "line": 63,
        "fullcodeline": "return make_response("
    },
    {
        "line": 69,
        "fullcodeline": "return make_response("
    },
    {
        "line": 74,
        "fullcodeline": "return make_response("
    },
    {
        "line": 110,
        "fullcodeline": "cores = psutil.cpu_count()"
    },
    {
        "line": 112,
        "fullcodeline": "slicer_instance.get_slicer_properties().get(\"same_device\", True)"
    },
    {
        "line": 122,
        "fullcodeline": "if \"destination\" in data and data[\"destination\"]:"
    },
    {
        "line": 141,
        "fullcodeline": "if \"path\" in data and data[\"path\"]:"
    },
    {
        "line": 148,
        "fullcodeline": "canon_path, canon_name = fileManager.canonicalize(target, full_path)"
    },
    {
        "line": 157,
        "fullcodeline": "currentOrigin, currentFilename = _getCurrentFile()"
    },
    {
        "line": 168,
        "fullcodeline": "if \"profile\" in data and data[\"profile\"]:"
    },
    {
        "line": 174,
        "fullcodeline": "if \"printerProfile\" in data and data[\"printerProfile\"]:"
    },
    {
        "line": 181,
        "fullcodeline": "\"position\" in data"
    },
    {
        "line": 214,
        "fullcodeline": "for key in override_keys:"
    },
    {
        "line": 289,
        "fullcodeline": "elif command == \"copy\" or command == \"move\":"
    },
    {
        "line": 82,
        "fullcodeline": "if not _verifyFileExists(target, filename):"
    },
    {
        "line": 100,
        "fullcodeline": "if not any("
    },
    {
        "line": 113,
        "fullcodeline": "and (printer.is_printing() or printer.is_paused())"
    },
    {
        "line": 123,
        "fullcodeline": "destination = data[\"destination\"]"
    },
    {
        "line": 124,
        "fullcodeline": "del data[\"destination\"]"
    },
    {
        "line": 142,
        "fullcodeline": "full_path = fileManager.join_path(target, data[\"path\"], destination)"
    },
    {
        "line": 152,
        "fullcodeline": "full_path = fileManager.join_path(target, canon_path, sanitized_name)"
    },
    {
        "line": 154,
        "fullcodeline": "full_path = sanitized_name"
    },
    {
        "line": 159,
        "fullcodeline": "currentFilename == full_path"
    },
    {
        "line": 160,
        "fullcodeline": "and currentOrigin == target"
    },
    {
        "line": 169,
        "fullcodeline": "profile = data[\"profile\"]"
    },
    {
        "line": 170,
        "fullcodeline": "del data[\"profile\"]"
    },
    {
        "line": 172,
        "fullcodeline": "profile = None"
    },
    {
        "line": 175,
        "fullcodeline": "printerProfile = data[\"printerProfile\"]"
    },
    {
        "line": 176,
        "fullcodeline": "del data[\"printerProfile\"]"
    },
    {
        "line": 178,
        "fullcodeline": "printerProfile = None"
    },
    {
        "line": 187,
        "fullcodeline": "position = data[\"position\"]"
    },
    {
        "line": 188,
        "fullcodeline": "del data[\"position\"]"
    },
    {
        "line": 190,
        "fullcodeline": "position = None"
    },
    {
        "line": 193,
        "fullcodeline": "if \"select\" in data and data[\"select\"] in valid_boolean_trues:"
    },
    {
        "line": 199,
        "fullcodeline": "select_after_slicing = True"
    },
    {
        "line": 202,
        "fullcodeline": "if \"print\" in data and data[\"print\"] in valid_boolean_trues:"
    },
    {
        "line": 228,
        "fullcodeline": "fileManager.slice("
    },
    {
        "line": 280,
        "fullcodeline": "printer_profile = None"
    },
    {
        "line": 290,
        "fullcodeline": "with Permissions.FILES_UPLOAD.require(403):"
    },
    {
        "line": 45,
        "fullcodeline": "if not printer.is_operational():"
    },
    {
        "line": 86,
        "fullcodeline": "if \"slicer\" in data:"
    },
    {
        "line": 125,
        "fullcodeline": "elif \"gcode\" in data and data[\"gcode\"]:"
    },
    {
        "line": 144,
        "fullcodeline": "path, _ = fileManager.split_path(target, filename)"
    },
    {
        "line": 208,
        "fullcodeline": "select_after_slicing = print_after_slicing = True"
    },
    {
        "line": 215,
        "fullcodeline": "overrides[key[len(\"profile.\") :]] = data[key]"
    },
    {
        "line": 240,
        "fullcodeline": "callback_args=("
    },
    {
        "line": 281,
        "fullcodeline": "if \"printerProfile\" in data and data[\"printerProfile\"]:"
    },
    {
        "line": 87,
        "fullcodeline": "slicer = data[\"slicer\"]"
    },
    {
        "line": 88,
        "fullcodeline": "del data[\"slicer\"]"
    },
    {
        "line": 89,
        "fullcodeline": "slicer_instance = slicingManager.get_slicer(slicer)"
    },
    {
        "line": 101,
        "fullcodeline": "["
    },
    {
        "line": 126,
        "fullcodeline": "destination = data[\"gcode\"]"
    },
    {
        "line": 127,
        "fullcodeline": "del data[\"gcode\"]"
    },
    {
        "line": 129,
        "fullcodeline": "import os"
    },
    {
        "line": 132,
        "fullcodeline": "destination = ("
    },
    {
        "line": 146,
        "fullcodeline": "full_path = fileManager.join_path(target, path, destination)"
    },
    {
        "line": 194,
        "fullcodeline": "if not printer.is_operational():"
    },
    {
        "line": 203,
        "fullcodeline": "if not printer.is_operational():"
    },
    {
        "line": 261,
        "fullcodeline": "\"refs\": {"
    },
    {
        "line": 277,
        "fullcodeline": "if not _verifyFileExists(target, filename):"
    },
    {
        "line": 282,
        "fullcodeline": "printer_profile = data[\"printerProfile\"]"
    },
    {
        "line": 284,
        "fullcodeline": "if not fileManager.analyse("
    },
    {
        "line": 302,
        "fullcodeline": "destination = data[\"destination\"]"
    },
    {
        "line": 304,
        "fullcodeline": "sanitized_destination = fileManager.join_path("
    },
    {
        "line": 328,
        "fullcodeline": "is_file = fileManager.file_exists(target, filename)"
    },
    {
        "line": 329,
        "fullcodeline": "is_folder = fileManager.folder_exists(target, filename)"
    },
    {
        "line": 371,
        "fullcodeline": "location = url_for("
    },
    {
        "line": 377,
        "fullcodeline": "result = {"
    },
    {
        "line": 392,
        "fullcodeline": "r = make_response(jsonify(result), 201)"
    },
    {
        "line": 91,
        "fullcodeline": "elif \"cura\" in slicingManager.registered_slicers:"
    },
    {
        "line": 131,
        "fullcodeline": "name, _ = os.path.splitext(filename)"
    },
    {
        "line": 292,
        "fullcodeline": "if target not in [FileDestinations.LOCAL]:"
    },
    {
        "line": 300,
        "fullcodeline": "path, name = fileManager.split_path(target, filename)"
    },
    {
        "line": 303,
        "fullcodeline": "dst_path, dst_name = fileManager.split_path(target, destination)"
    },
    {
        "line": 334,
        "fullcodeline": "if command == \"copy\":"
    },
    {
        "line": 92,
        "fullcodeline": "slicer = \"cura\""
    },
    {
        "line": 93,
        "fullcodeline": "slicer_instance = slicingManager.get_slicer(\"cura\")"
    },
    {
        "line": 267,
        "fullcodeline": "+ urlquote(full_path),"
    },
    {
        "line": 295,
        "fullcodeline": "if not _verifyFileExists(target, filename) and not _verifyFolderExists("
    },
    {
        "line": 305,
        "fullcodeline": "target, dst_path, fileManager.sanitize_name(target, dst_name)"
    },
    {
        "line": 331,
        "fullcodeline": "if not (is_file or is_folder):"
    },
    {
        "line": 211,
        "fullcodeline": "k for k in data if k.startswith(\"profile.\") and data[k] is not None"
    },
    {
        "line": 293,
        "fullcodeline": "abort(400, description=f\"Unsupported target for {command}\")"
    },
    {
        "line": 311,
        "fullcodeline": "_verifyFolderExists(target, destination)"
    },
    {
        "line": 318,
        "fullcodeline": "if _verifyFileExists(target, destination) or _verifyFolderExists("
    },
    {
        "line": 332,
        "fullcodeline": "abort(400, description=f\"Neither file nor folder, can't {command}\")"
    },
    {
        "line": 135,
        "fullcodeline": "+ slicer_instance.get_slicer_properties().get("
    },
    {
        "line": 312,
        "fullcodeline": "and sanitized_destination != filename"
    },
    {
        "line": 316,
        "fullcodeline": "destination = fileManager.join_path(target, destination, name)"
    },
    {
        "line": 336,
        "fullcodeline": "if _verifyFileExists(target, destination) or _verifyFolderExists("
    },
    {
        "line": 342,
        "fullcodeline": "fileManager.copy_file(target, filename, destination)"
    },
    {
        "line": 344,
        "fullcodeline": "fileManager.copy_folder(target, filename, destination)"
    },
    {
        "line": 381,
        "fullcodeline": "\"refs\": {\"resource\": location},"
    },
    {
        "line": 389,
        "fullcodeline": "+ urlquote(destination)"
    },
    {
        "line": 103,
        "fullcodeline": "for source_file_type in slicer_instance.get_slicer_properties().get("
    },
    {
        "line": 102,
        "fullcodeline": "octoprint.filemanager.valid_file_type(filename, type=source_file_type)"
    },
    {
        "line": 136,
        "fullcodeline": "\"destination_extensions\", [\"gco\", \"gcode\", \"g\"]"
    },
    {
        "line": 263,
        "fullcodeline": "\"download\": url_for(\"index\", _external=True)"
    },
    {
        "line": 347,
        "fullcodeline": "with Permissions.FILES_DELETE.require(403):"
    },
    {
        "line": 104,
        "fullcodeline": "\"source_file_types\", [\"model\"]"
    },
    {
        "line": 385,
        "fullcodeline": "url_for(\"index\", _external=True)"
    },
    {
        "line": 348,
        "fullcodeline": "if _isBusy(target, filename):"
    },
    {
        "line": 362,
        "fullcodeline": "currentOrigin, currentFilename = _getCurrentFile()"
    },
    {
        "line": 356,
        "fullcodeline": "_verifyFileExists(target, destination)"
    },
    {
        "line": 358,
        "fullcodeline": ") and sanitized_destination != filename:"
    },
    {
        "line": 363,
        "fullcodeline": "if currentFilename is not None and filename == currentFilename:"
    },
    {
        "line": 367,
        "fullcodeline": "fileManager.move_file(target, filename, destination)"
    },
    {
        "line": 369,
        "fullcodeline": "fileManager.move_folder(target, filename, destination)"
    },
    {
        "line": 357,
        "fullcodeline": "or _verifyFolderExists(target, destination)"
    }
]