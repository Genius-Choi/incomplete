[
    {
        "line": 4,
        "fullcodeline": "char ExecString[PATH_MAX*3];"
    },
    {
        "line": 5,
        "fullcodeline": "char TempName[PATH_MAX+10];"
    },
    {
        "line": 6,
        "fullcodeline": "int TempUsed = FALSE;"
    },
    {
        "line": 8,
        "fullcodeline": "e = 0;"
    },
    {
        "line": 12,
        "fullcodeline": "a = strlen(FileName)-1;"
    },
    {
        "line": 14,
        "fullcodeline": "memcpy(TempName, FileName, a);"
    },
    {
        "line": 15,
        "fullcodeline": "strcpy(TempName+a, \"XXXXXX\");"
    },
    {
        "line": 23,
        "fullcodeline": "mktemp(TempName);"
    },
    {
        "line": 54,
        "fullcodeline": "errno = 0;"
    },
    {
        "line": 55,
        "fullcodeline": "a = system(ExecString);"
    },
    {
        "line": 13,
        "fullcodeline": "while(a > 0 && FileName[a-1] != SLASH) a--;"
    },
    {
        "line": 26,
        "fullcodeline": "if(!TempName[0]) {"
    },
    {
        "line": 32,
        "fullcodeline": "for (a=0;;a++){"
    },
    {
        "line": 57,
        "fullcodeline": "if (a || errno){"
    },
    {
        "line": 27,
        "fullcodeline": "ErrFatal(\"Cannot find available temporary file name\");"
    },
    {
        "line": 48,
        "fullcodeline": "ExecString[e++] = ApplyCommand[a];"
    },
    {
        "line": 52,
        "fullcodeline": "if (ShowIt) printf(\"Cmd:%s\\n\",ExecString);"
    },
    {
        "line": 60,
        "fullcodeline": "ErrFatal(\"Problem executing specified command\");"
    },
    {
        "line": 33,
        "fullcodeline": "if (ApplyCommand[a] == '&'){"
    },
    {
        "line": 49,
        "fullcodeline": "if (ApplyCommand[a] == 0) break;"
    },
    {
        "line": 66,
        "fullcodeline": "if (stat(TempName, &dummy) == 0){"
    },
    {
        "line": 59,
        "fullcodeline": "if (errno) perror(\"system\");"
    },
    {
        "line": 68,
        "fullcodeline": "int stat_result = stat(FileName, &buf);"
    },
    {
        "line": 70,
        "fullcodeline": "unlink(FileName);"
    },
    {
        "line": 71,
        "fullcodeline": "rename(TempName, FileName);"
    },
    {
        "line": 34,
        "fullcodeline": "if (ApplyCommand[a+1] == 'i'){"
    },
    {
        "line": 40,
        "fullcodeline": "if (ApplyCommand[a+1] == 'o'){"
    },
    {
        "line": 72,
        "fullcodeline": "if (stat_result == 0){"
    },
    {
        "line": 83,
        "fullcodeline": "ErrFatal(\"specified command did not produce expected output file\");"
    },
    {
        "line": 36,
        "fullcodeline": "e += shellescape(ExecString+e, FileName);"
    },
    {
        "line": 37,
        "fullcodeline": "a += 1;"
    },
    {
        "line": 42,
        "fullcodeline": "e += shellescape(ExecString+e, TempName);"
    },
    {
        "line": 43,
        "fullcodeline": "a += 1;"
    },
    {
        "line": 44,
        "fullcodeline": "TempUsed = TRUE;"
    },
    {
        "line": 75,
        "fullcodeline": "chmod(FileName, buf.st_mode);"
    },
    {
        "line": 77,
        "fullcodeline": "mtime.actime = buf.st_atime;"
    },
    {
        "line": 78,
        "fullcodeline": "mtime.modtime = buf.st_mtime;"
    },
    {
        "line": 80,
        "fullcodeline": "utime(FileName, &mtime);"
    }
]