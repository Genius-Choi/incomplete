[
    {
        "line": 3,
        "fullcodeline": "struct pollfd fds = { 0, };"
    },
    {
        "line": 4,
        "fullcodeline": "int sock = 0;"
    },
    {
        "line": 5,
        "fullcodeline": "void *sock_ptr = NULL;"
    },
    {
        "line": 6,
        "fullcodeline": "int rc = 0;"
    },
    {
        "line": 20,
        "fullcodeline": "sock = GPOINTER_TO_INT(sock_ptr);"
    },
    {
        "line": 25,
        "fullcodeline": "start = time(NULL);"
    },
    {
        "line": 26,
        "fullcodeline": "errno = 0;"
    },
    {
        "line": 21,
        "fullcodeline": "if (sock <= 0) {"
    },
    {
        "line": 42,
        "fullcodeline": "} while (rc < 0 && errno == EINTR);"
    },
    {
        "line": 14,
        "fullcodeline": "CRM_ASSERT(encrypted == FALSE);"
    },
    {
        "line": 28,
        "fullcodeline": "fds.fd = sock;"
    },
    {
        "line": 29,
        "fullcodeline": "fds.events = POLLIN;"
    },
    {
        "line": 41,
        "fullcodeline": "rc = poll(&fds, 1, timeout);"
    },
    {
        "line": 17,
        "fullcodeline": "sock_ptr = session;"
    },
    {
        "line": 22,
        "fullcodeline": "return -ENOTCONN;"
    },
    {
        "line": 34,
        "fullcodeline": "if (errno == EINTR && (timeout > 0)) {"
    },
    {
        "line": 35,
        "fullcodeline": "timeout = timeout - ((time(NULL) - start) * 1000);"
    },
    {
        "line": 36,
        "fullcodeline": "if (timeout < 1000) {"
    },
    {
        "line": 37,
        "fullcodeline": "timeout = 1000;"
    }
]