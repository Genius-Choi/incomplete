[
    {
        "line": 4,
        "fullcodeline": "cib_remote_opaque_t *private = cib->variant_opaque;"
    },
    {
        "line": 6,
        "fullcodeline": "int rc = 0;"
    },
    {
        "line": 7,
        "fullcodeline": "char *server = private->server;"
    },
    {
        "line": 13,
        "fullcodeline": "xmlNode *answer = NULL;"
    },
    {
        "line": 14,
        "fullcodeline": "xmlNode *login = NULL;"
    },
    {
        "line": 16,
        "fullcodeline": "static struct mainloop_fd_callbacks cib_fd_callbacks ="
    },
    {
        "line": 22,
        "fullcodeline": "connection->socket = 0;"
    },
    {
        "line": 23,
        "fullcodeline": "connection->session = NULL;"
    },
    {
        "line": 26,
        "fullcodeline": "sock = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP);"
    },
    {
        "line": 33,
        "fullcodeline": "bzero(&hints, sizeof(struct addrinfo));"
    },
    {
        "line": 34,
        "fullcodeline": "hints.ai_flags = AI_CANONNAME;"
    },
    {
        "line": 35,
        "fullcodeline": "hints.ai_family = AF_INET;"
    },
    {
        "line": 36,
        "fullcodeline": "hints.ai_socktype = SOCK_RAW;"
    },
    {
        "line": 44,
        "fullcodeline": "crm_debug(\"Looking up %s\", server);"
    },
    {
        "line": 45,
        "fullcodeline": "ret_ga = getaddrinfo(server, NULL, &hints, &res);"
    },
    {
        "line": 56,
        "fullcodeline": "crm_debug(\"Got address %s for %s\", server, private->server);"
    },
    {
        "line": 63,
        "fullcodeline": "memcpy(&addr, res->ai_addr, res->ai_addrlen);"
    },
    {
        "line": 70,
        "fullcodeline": "addr.sin_port = htons(private->port);"
    },
    {
        "line": 100,
        "fullcodeline": "login = create_xml_node(NULL, \"cib_command\");"
    },
    {
        "line": 101,
        "fullcodeline": "crm_xml_add(login, \"op\", \"authenticate\");"
    },
    {
        "line": 102,
        "fullcodeline": "crm_xml_add(login, \"user\", private->user);"
    },
    {
        "line": 103,
        "fullcodeline": "crm_xml_add(login, \"password\", private->passwd);"
    },
    {
        "line": 104,
        "fullcodeline": "crm_xml_add(login, \"hidden\", \"password\");"
    },
    {
        "line": 106,
        "fullcodeline": "crm_send_remote_msg(connection->session, login, connection->encrypted);"
    },
    {
        "line": 107,
        "fullcodeline": "free_xml(login);"
    },
    {
        "line": 109,
        "fullcodeline": "answer = crm_recv_remote_msg(connection->session, connection->encrypted);"
    },
    {
        "line": 110,
        "fullcodeline": "crm_log_xml_trace(answer, \"Reply\");"
    },
    {
        "line": 135,
        "fullcodeline": "connection->socket = sock;"
    },
    {
        "line": 136,
        "fullcodeline": "connection->source = mainloop_add_fd(\"cib-remote\", G_PRIORITY_HIGH, connection->socket, cib, &cib_fd_callbacks);"
    },
    {
        "line": 17,
        "fullcodeline": "{"
    },
    {
        "line": 27,
        "fullcodeline": "if (sock == -1) {"
    },
    {
        "line": 38,
        "fullcodeline": "if (hints.ai_family == AF_INET6) {"
    },
    {
        "line": 58,
        "fullcodeline": "if (!res->ai_addr) {"
    },
    {
        "line": 72,
        "fullcodeline": "if (connect(sock, (struct sockaddr *)&addr, sizeof(addr)) == -1) {"
    },
    {
        "line": 111,
        "fullcodeline": "if (answer == NULL) {"
    },
    {
        "line": 131,
        "fullcodeline": "if (rc != 0) {"
    },
    {
        "line": 28,
        "fullcodeline": "crm_perror(LOG_ERR, \"Socket creation failed\");"
    },
    {
        "line": 39,
        "fullcodeline": "hints.ai_protocol = IPPROTO_ICMPV6;"
    },
    {
        "line": 47,
        "fullcodeline": "crm_err(\"getaddrinfo: %s\", gai_strerror(ret_ga));"
    },
    {
        "line": 48,
        "fullcodeline": "close(sock);"
    },
    {
        "line": 53,
        "fullcodeline": "server = res->ai_canonname;"
    },
    {
        "line": 59,
        "fullcodeline": "fprintf(stderr, \"getaddrinfo failed\");"
    },
    {
        "line": 60,
        "fullcodeline": "crm_exit(1);"
    },
    {
        "line": 73,
        "fullcodeline": "crm_perror(LOG_ERR, \"Connection to %s:%d failed\", server, private->port);"
    },
    {
        "line": 74,
        "fullcodeline": "close(sock);"
    },
    {
        "line": 112,
        "fullcodeline": "rc = -EPROTO;"
    },
    {
        "line": 132,
        "fullcodeline": "cib_tls_close(cib);"
    },
    {
        "line": 18,
        "fullcodeline": ".dispatch = cib_remote_dispatch,"
    },
    {
        "line": 19,
        "fullcodeline": ".destroy = cib_remote_connection_destroy,"
    },
    {
        "line": 29,
        "fullcodeline": "return -1;"
    },
    {
        "line": 41,
        "fullcodeline": "hints.ai_protocol = IPPROTO_ICMP;"
    },
    {
        "line": 49,
        "fullcodeline": "return -1;"
    },
    {
        "line": 75,
        "fullcodeline": "return -1;"
    },
    {
        "line": 93,
        "fullcodeline": "return -EPROTONOSUPPORT;"
    },
    {
        "line": 96,
        "fullcodeline": "connection->session = GUINT_TO_POINTER(sock);"
    },
    {
        "line": 116,
        "fullcodeline": "const char *msg_type = crm_element_value(answer, F_CIB_OPERATION);"
    },
    {
        "line": 117,
        "fullcodeline": "const char *tmp_ticket = crm_element_value(answer, F_CIB_CLIENTID);"
    },
    {
        "line": 119,
        "fullcodeline": "if (safe_str_neq(msg_type, CRM_OP_REGISTER)) {"
    },
    {
        "line": 120,
        "fullcodeline": "crm_err(\"Invalid registration message: %s\", msg_type);"
    },
    {
        "line": 121,
        "fullcodeline": "rc = -EPROTO;"
    },
    {
        "line": 123,
        "fullcodeline": "} else if (tmp_ticket == NULL) {"
    },
    {
        "line": 124,
        "fullcodeline": "rc = -EPROTO;"
    },
    {
        "line": 127,
        "fullcodeline": "connection->token = strdup(tmp_ticket);"
    }
]