[
    {
        "line": 7,
        "fullcodeline": "node *ch = CHILD(n, 0);"
    },
    {
        "line": 9,
        "fullcodeline": "switch (TYPE(ch)) {"
    },
    {
        "line": 83,
        "fullcodeline": "ch = CHILD(n, 1);"
    },
    {
        "line": 97,
        "fullcodeline": "ch = CHILD(n, 1);"
    },
    {
        "line": 102,
        "fullcodeline": "REQ(ch, testlist_comp);"
    },
    {
        "line": 158,
        "fullcodeline": "PyErr_Format(PyExc_SystemError, \"unhandled atom %d\", TYPE(ch));"
    },
    {
        "line": 12,
        "fullcodeline": "const char *s = STR(ch);"
    },
    {
        "line": 13,
        "fullcodeline": "size_t len = strlen(s);"
    },
    {
        "line": 22,
        "fullcodeline": "name = new_identifier(s, c);"
    },
    {
        "line": 29,
        "fullcodeline": "expr_ty str = parsestrplus(c, n);"
    },
    {
        "line": 62,
        "fullcodeline": "const char *s = STR(ch);"
    },
    {
        "line": 70,
        "fullcodeline": "pynum = parsenumber(c, s);"
    },
    {
        "line": 81,
        "fullcodeline": "return Ellipsis(LINENO(n), n->n_col_offset, c->c_arena);"
    },
    {
        "line": 85,
        "fullcodeline": "if (TYPE(ch) == RPAR)"
    },
    {
        "line": 88,
        "fullcodeline": "if (TYPE(ch) == yield_expr)"
    },
    {
        "line": 92,
        "fullcodeline": "if ((NCH(ch) > 1) && (TYPE(CHILD(ch, 1)) == comp_for))"
    },
    {
        "line": 95,
        "fullcodeline": "return ast_for_testlist(c, ch);"
    },
    {
        "line": 99,
        "fullcodeline": "if (TYPE(ch) == RSQB)"
    },
    {
        "line": 103,
        "fullcodeline": "if (NCH(ch) == 1 || TYPE(CHILD(ch, 1)) == COMMA) {"
    },
    {
        "line": 118,
        "fullcodeline": "ch = CHILD(n, 1);"
    },
    {
        "line": 14,
        "fullcodeline": "if (len >= 4 && len <= 5) {"
    },
    {
        "line": 23,
        "fullcodeline": "if (!name)"
    },
    {
        "line": 26,
        "fullcodeline": "return Name(name, Load, LINENO(n), n->n_col_offset, c->c_arena);"
    },
    {
        "line": 30,
        "fullcodeline": "if (!str) {"
    },
    {
        "line": 65,
        "fullcodeline": "if (c->c_feature_version < 6 && strchr(s, '_') != NULL) {"
    },
    {
        "line": 71,
        "fullcodeline": "if (!pynum)"
    },
    {
        "line": 74,
        "fullcodeline": "if (PyArena_AddPyObject(c->c_arena, pynum) < 0) {"
    },
    {
        "line": 78,
        "fullcodeline": "return Num(pynum, LINENO(n), n->n_col_offset, c->c_arena);"
    },
    {
        "line": 104,
        "fullcodeline": "asdl_seq *elts = seq_for_testlist(c, ch);"
    },
    {
        "line": 119,
        "fullcodeline": "if (TYPE(ch) == RBRACE) {"
    },
    {
        "line": 31,
        "fullcodeline": "const char *errtype = NULL;"
    },
    {
        "line": 66,
        "fullcodeline": "ast_error(c, ch,"
    },
    {
        "line": 75,
        "fullcodeline": "Py_DECREF(pynum);"
    },
    {
        "line": 86,
        "fullcodeline": "return Tuple(NULL, Load, LINENO(n), n->n_col_offset, c->c_arena);"
    },
    {
        "line": 89,
        "fullcodeline": "return ast_for_expr(c, ch);"
    },
    {
        "line": 93,
        "fullcodeline": "return ast_for_genexp(c, ch);"
    },
    {
        "line": 100,
        "fullcodeline": "return List(NULL, Load, LINENO(n), n->n_col_offset, c->c_arena);"
    },
    {
        "line": 105,
        "fullcodeline": "if (!elts)"
    },
    {
        "line": 108,
        "fullcodeline": "return List(elts, Load, LINENO(n), n->n_col_offset, c->c_arena);"
    },
    {
        "line": 15,
        "fullcodeline": "if (!strcmp(s, \"None\"))"
    },
    {
        "line": 17,
        "fullcodeline": "if (!strcmp(s, \"True\"))"
    },
    {
        "line": 19,
        "fullcodeline": "if (!strcmp(s, \"False\"))"
    },
    {
        "line": 32,
        "fullcodeline": "if (PyErr_ExceptionMatches(PyExc_UnicodeError))"
    },
    {
        "line": 111,
        "fullcodeline": "return ast_for_listcomp(c, ch);"
    },
    {
        "line": 121,
        "fullcodeline": "return Dict(NULL, NULL, LINENO(n), n->n_col_offset, c->c_arena);"
    },
    {
        "line": 124,
        "fullcodeline": "int is_dict = (TYPE(CHILD(ch, 0)) == DOUBLESTAR);"
    },
    {
        "line": 33,
        "fullcodeline": "errtype = \"unicode error\";"
    },
    {
        "line": 37,
        "fullcodeline": "char buf[128];"
    },
    {
        "line": 38,
        "fullcodeline": "const char *s = NULL;"
    },
    {
        "line": 40,
        "fullcodeline": "PyErr_Fetch(&type, &value, &tback);"
    },
    {
        "line": 41,
        "fullcodeline": "errstr = PyObject_Str(value);"
    },
    {
        "line": 50,
        "fullcodeline": "Py_XDECREF(errstr);"
    },
    {
        "line": 51,
        "fullcodeline": "ast_error(c, n, buf);"
    },
    {
        "line": 52,
        "fullcodeline": "Py_DECREF(type);"
    },
    {
        "line": 53,
        "fullcodeline": "Py_XDECREF(value);"
    },
    {
        "line": 54,
        "fullcodeline": "Py_XDECREF(tback);"
    },
    {
        "line": 125,
        "fullcodeline": "if (NCH(ch) == 1 ||"
    },
    {
        "line": 16,
        "fullcodeline": "return NameConstant(Py_None, LINENO(n), n->n_col_offset, c->c_arena);"
    },
    {
        "line": 18,
        "fullcodeline": "return NameConstant(Py_True, LINENO(n), n->n_col_offset, c->c_arena);"
    },
    {
        "line": 20,
        "fullcodeline": "return NameConstant(Py_False, LINENO(n), n->n_col_offset, c->c_arena);"
    },
    {
        "line": 126,
        "fullcodeline": "(NCH(ch) > 1 &&"
    },
    {
        "line": 129,
        "fullcodeline": "res = ast_for_setdisplay(c, ch);"
    },
    {
        "line": 151,
        "fullcodeline": "res->lineno = LINENO(n);"
    },
    {
        "line": 152,
        "fullcodeline": "res->col_offset = n->n_col_offset;"
    },
    {
        "line": 34,
        "fullcodeline": "else if (PyErr_ExceptionMatches(PyExc_ValueError))"
    },
    {
        "line": 43,
        "fullcodeline": "s = PyUnicode_AsUTF8(errstr);"
    },
    {
        "line": 45,
        "fullcodeline": "PyOS_snprintf(buf, sizeof(buf), \"(%s) %s\", errtype, s);"
    },
    {
        "line": 127,
        "fullcodeline": "TYPE(CHILD(ch, 1)) == COMMA)) {"
    },
    {
        "line": 35,
        "fullcodeline": "errtype = \"value error\";"
    },
    {
        "line": 47,
        "fullcodeline": "PyErr_Clear();"
    },
    {
        "line": 48,
        "fullcodeline": "PyOS_snprintf(buf, sizeof(buf), \"(%s) unknown error\", errtype);"
    },
    {
        "line": 131,
        "fullcodeline": "else if (NCH(ch) > 1 &&"
    },
    {
        "line": 132,
        "fullcodeline": "TYPE(CHILD(ch, 1)) == comp_for) {"
    },
    {
        "line": 134,
        "fullcodeline": "res = ast_for_setcomp(c, ch);"
    },
    {
        "line": 136,
        "fullcodeline": "else if (NCH(ch) > 3 - is_dict &&"
    },
    {
        "line": 137,
        "fullcodeline": "TYPE(CHILD(ch, 3 - is_dict)) == comp_for) {"
    },
    {
        "line": 144,
        "fullcodeline": "res = ast_for_dictcomp(c, ch);"
    },
    {
        "line": 148,
        "fullcodeline": "res = ast_for_dictdisplay(c, ch);"
    },
    {
        "line": 140,
        "fullcodeline": "ast_error(c, n, \"dict unpacking cannot be used in \""
    }
]