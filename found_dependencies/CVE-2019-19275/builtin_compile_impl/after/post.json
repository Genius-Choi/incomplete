[
    {
        "line": 8,
        "fullcodeline": "int compile_mode = -1;"
    },
    {
        "line": 11,
        "fullcodeline": "int start[] = {Py_file_input, Py_eval_input, Py_single_input, Py_func_type_input};"
    },
    {
        "line": 14,
        "fullcodeline": "cf.cf_flags = flags | PyCF_SOURCE_IS_UTF8;"
    },
    {
        "line": 59,
        "fullcodeline": "is_ast = PyAST_Check(source);"
    },
    {
        "line": 90,
        "fullcodeline": "str = source_as_string(source, \"compile\", \"string, bytes or AST\", &cf, &source_copy);"
    },
    {
        "line": 94,
        "fullcodeline": "result = Py_CompileStringObject(str, filename, start[compile_mode], &cf, optimize);"
    },
    {
        "line": 95,
        "fullcodeline": "Py_XDECREF(source_copy);"
    },
    {
        "line": 99,
        "fullcodeline": "result = NULL;"
    },
    {
        "line": 101,
        "fullcodeline": "Py_DECREF(filename);"
    },
    {
        "line": 16,
        "fullcodeline": "if (flags &"
    },
    {
        "line": 25,
        "fullcodeline": "if (optimize < -1 || optimize > 2) {"
    },
    {
        "line": 31,
        "fullcodeline": "if (!dont_inherit) {"
    },
    {
        "line": 35,
        "fullcodeline": "if (strcmp(mode, \"exec\") == 0)"
    },
    {
        "line": 60,
        "fullcodeline": "if (is_ast == -1)"
    },
    {
        "line": 91,
        "fullcodeline": "if (str == NULL)"
    },
    {
        "line": 17,
        "fullcodeline": "~(PyCF_MASK | PyCF_MASK_OBSOLETE | PyCF_DONT_IMPLY_DEDENT | PyCF_ONLY_AST | PyCF_TYPE_COMMENTS))"
    },
    {
        "line": 19,
        "fullcodeline": "PyErr_SetString(PyExc_ValueError,"
    },
    {
        "line": 26,
        "fullcodeline": "PyErr_SetString(PyExc_ValueError,"
    },
    {
        "line": 32,
        "fullcodeline": "PyEval_MergeCompilerFlags(&cf);"
    },
    {
        "line": 36,
        "fullcodeline": "compile_mode = 0;"
    },
    {
        "line": 63,
        "fullcodeline": "if (flags & PyCF_ONLY_AST) {"
    },
    {
        "line": 37,
        "fullcodeline": "else if (strcmp(mode, \"eval\") == 0)"
    },
    {
        "line": 64,
        "fullcodeline": "Py_INCREF(source);"
    },
    {
        "line": 65,
        "fullcodeline": "result = source;"
    },
    {
        "line": 38,
        "fullcodeline": "compile_mode = 1;"
    },
    {
        "line": 71,
        "fullcodeline": "arena = PyArena_New();"
    },
    {
        "line": 74,
        "fullcodeline": "mod = PyAST_obj2mod(source, arena, compile_mode);"
    },
    {
        "line": 83,
        "fullcodeline": "result = (PyObject*)PyAST_CompileObject(mod, filename,"
    },
    {
        "line": 85,
        "fullcodeline": "PyArena_Free(arena);"
    },
    {
        "line": 72,
        "fullcodeline": "if (arena == NULL)"
    },
    {
        "line": 75,
        "fullcodeline": "if (mod == NULL) {"
    },
    {
        "line": 79,
        "fullcodeline": "if (!PyAST_Validate(mod)) {"
    },
    {
        "line": 39,
        "fullcodeline": "else if (strcmp(mode, \"single\") == 0)"
    },
    {
        "line": 76,
        "fullcodeline": "PyArena_Free(arena);"
    },
    {
        "line": 80,
        "fullcodeline": "PyArena_Free(arena);"
    },
    {
        "line": 40,
        "fullcodeline": "compile_mode = 2;"
    },
    {
        "line": 41,
        "fullcodeline": "else if (strcmp(mode, \"func_type\") == 0) {"
    },
    {
        "line": 47,
        "fullcodeline": "compile_mode = 3;"
    },
    {
        "line": 42,
        "fullcodeline": "if (!(flags & PyCF_ONLY_AST)) {"
    },
    {
        "line": 55,
        "fullcodeline": "PyErr_SetString(PyExc_ValueError, msg);"
    },
    {
        "line": 43,
        "fullcodeline": "PyErr_SetString(PyExc_ValueError,"
    },
    {
        "line": 51,
        "fullcodeline": "if (flags & PyCF_ONLY_AST)"
    },
    {
        "line": 52,
        "fullcodeline": "msg = \"compile() mode must be 'exec', 'eval', 'single' or 'func_type'\";"
    },
    {
        "line": 54,
        "fullcodeline": "msg = \"compile() mode must be 'exec', 'eval' or 'single'\";"
    }
]