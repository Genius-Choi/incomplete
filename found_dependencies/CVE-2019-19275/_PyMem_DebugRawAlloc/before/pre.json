[
    {
        "line": 3,
        "fullcodeline": "debug_alloc_api_t *api = (debug_alloc_api_t *)ctx;"
    },
    {
        "line": 8,
        "fullcodeline": "bumpserialno();"
    },
    {
        "line": 9,
        "fullcodeline": "total = nbytes + 4*SST;"
    },
    {
        "line": 22,
        "fullcodeline": "write_size_t(p, nbytes);"
    },
    {
        "line": 23,
        "fullcodeline": "p[SST] = (uint8_t)api->api_id;"
    },
    {
        "line": 24,
        "fullcodeline": "memset(p + SST + 1, FORBIDDENBYTE, SST-1);"
    },
    {
        "line": 30,
        "fullcodeline": "tail = p + 2*SST + nbytes;"
    },
    {
        "line": 31,
        "fullcodeline": "memset(tail, FORBIDDENBYTE, SST);"
    },
    {
        "line": 32,
        "fullcodeline": "write_size_t(tail + SST, serialno);"
    },
    {
        "line": 10,
        "fullcodeline": "if (nbytes > PY_SSIZE_T_MAX - 4*SST)"
    },
    {
        "line": 18,
        "fullcodeline": "if (p == NULL)"
    },
    {
        "line": 34,
        "fullcodeline": "return p + 2*SST;"
    },
    {
        "line": 15,
        "fullcodeline": "p = (uint8_t *)api->alloc.calloc(api->alloc.ctx, 1, total);"
    },
    {
        "line": 26,
        "fullcodeline": "if (nbytes > 0 && !use_calloc)"
    },
    {
        "line": 27,
        "fullcodeline": "memset(p + 2*SST, CLEANBYTE, nbytes);"
    },
    {
        "line": 17,
        "fullcodeline": "p = (uint8_t *)api->alloc.malloc(api->alloc.ctx, total);"
    }
]