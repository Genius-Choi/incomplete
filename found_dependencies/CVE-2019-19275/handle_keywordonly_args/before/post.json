[
    {
        "line": 8,
        "fullcodeline": "int i = start;"
    },
    {
        "line": 9,
        "fullcodeline": "int j = 0; /* index for kwdefaults and kwonlyargs */"
    },
    {
        "line": 15,
        "fullcodeline": "assert(kwdefaults != NULL);"
    },
    {
        "line": 11,
        "fullcodeline": "if (kwonlyargs == NULL) {"
    },
    {
        "line": 16,
        "fullcodeline": "while (i < NCH(n)) {"
    },
    {
        "line": 69,
        "fullcodeline": "return -1;"
    },
    {
        "line": 12,
        "fullcodeline": "ast_error(c, CHILD(n, start), \"named arguments must follow bare *\");"
    },
    {
        "line": 17,
        "fullcodeline": "ch = CHILD(n, i);"
    },
    {
        "line": 13,
        "fullcodeline": "return -1;"
    },
    {
        "line": 18,
        "fullcodeline": "switch (TYPE(ch)) {"
    },
    {
        "line": 40,
        "fullcodeline": "ch = CHILD(ch, 0);"
    },
    {
        "line": 41,
        "fullcodeline": "argname = NEW_IDENTIFIER(ch);"
    },
    {
        "line": 46,
        "fullcodeline": "arg = arg(argname, annotation, NULL, LINENO(ch), ch->n_col_offset,"
    },
    {
        "line": 50,
        "fullcodeline": "asdl_seq_SET(kwonlyargs, j++, arg);"
    },
    {
        "line": 51,
        "fullcodeline": "i += 1; /* the name */"
    },
    {
        "line": 57,
        "fullcodeline": "arg->type_comment = NEW_TYPE_COMMENT(ch);"
    },
    {
        "line": 58,
        "fullcodeline": "i += 1;"
    },
    {
        "line": 63,
        "fullcodeline": "ast_error(c, ch, \"unexpected node\");"
    },
    {
        "line": 21,
        "fullcodeline": "if (i + 1 < NCH(n) && TYPE(CHILD(n, i + 1)) == EQUAL) {"
    },
    {
        "line": 31,
        "fullcodeline": "if (NCH(ch) == 3) {"
    },
    {
        "line": 42,
        "fullcodeline": "if (!argname)"
    },
    {
        "line": 44,
        "fullcodeline": "if (forbidden_name(c, argname, ch, 0))"
    },
    {
        "line": 48,
        "fullcodeline": "if (!arg)"
    },
    {
        "line": 52,
        "fullcodeline": "if (i < NCH(n) && TYPE(CHILD(n, i)) == COMMA)"
    },
    {
        "line": 22,
        "fullcodeline": "expression = ast_for_expr(c, CHILD(n, i + 2));"
    },
    {
        "line": 25,
        "fullcodeline": "asdl_seq_SET(kwdefaults, j, expression);"
    },
    {
        "line": 26,
        "fullcodeline": "i += 2; /* '=' and test */"
    },
    {
        "line": 33,
        "fullcodeline": "annotation = ast_for_expr(c, CHILD(ch, 2));"
    },
    {
        "line": 53,
        "fullcodeline": "i += 1; /* the comma, if present */"
    },
    {
        "line": 23,
        "fullcodeline": "if (!expression)"
    },
    {
        "line": 29,
        "fullcodeline": "asdl_seq_SET(kwdefaults, j, NULL);"
    },
    {
        "line": 34,
        "fullcodeline": "if (!annotation)"
    },
    {
        "line": 38,
        "fullcodeline": "annotation = NULL;"
    }
]