[
    {
        "line": 4,
        "fullcodeline": "if (tok->cur != tok->inp) {"
    },
    {
        "line": 7,
        "fullcodeline": "if (tok->done != E_OK)"
    },
    {
        "line": 9,
        "fullcodeline": "if (tok->fp == NULL) {"
    },
    {
        "line": 27,
        "fullcodeline": "if (tok->prompt != NULL) {"
    },
    {
        "line": 10,
        "fullcodeline": "char *end = strchr(tok->inp, '\\n');"
    },
    {
        "line": 28,
        "fullcodeline": "char *newtok = PyOS_Readline(stdin, stdout, tok->prompt);"
    },
    {
        "line": 5,
        "fullcodeline": "return Py_CHARMASK(*tok->cur++); /* Fast path */"
    },
    {
        "line": 11,
        "fullcodeline": "if (end != NULL)"
    },
    {
        "line": 25,
        "fullcodeline": "return Py_CHARMASK(*tok->cur++);"
    },
    {
        "line": 30,
        "fullcodeline": "if (newtok != NULL) {"
    },
    {
        "line": 37,
        "fullcodeline": "if (tok->encoding && newtok && *newtok) {"
    },
    {
        "line": 54,
        "fullcodeline": "if (tok->nextprompt != NULL)"
    },
    {
        "line": 56,
        "fullcodeline": "if (newtok == NULL)"
    },
    {
        "line": 97,
        "fullcodeline": "int done = 0;"
    },
    {
        "line": 98,
        "fullcodeline": "Py_ssize_t cur = 0;"
    },
    {
        "line": 131,
        "fullcodeline": "tok->lineno++;"
    },
    {
        "line": 12,
        "fullcodeline": "end++;"
    },
    {
        "line": 31,
        "fullcodeline": "char *translated = translate_newlines(newtok, 0, tok);"
    },
    {
        "line": 35,
        "fullcodeline": "newtok = translated;"
    },
    {
        "line": 41,
        "fullcodeline": "PyObject *u = translate_into_utf8(newtok, tok->encoding);"
    },
    {
        "line": 47,
        "fullcodeline": "buflen = PyBytes_GET_SIZE(u);"
    },
    {
        "line": 48,
        "fullcodeline": "buf = PyBytes_AS_STRING(u);"
    },
    {
        "line": 49,
        "fullcodeline": "newtok = PyMem_MALLOC(buflen+1);"
    },
    {
        "line": 50,
        "fullcodeline": "strcpy(newtok, buf);"
    },
    {
        "line": 55,
        "fullcodeline": "tok->prompt = tok->nextprompt;"
    },
    {
        "line": 57,
        "fullcodeline": "tok->done = E_INTR;"
    },
    {
        "line": 100,
        "fullcodeline": "if (tok->start == NULL) {"
    },
    {
        "line": 168,
        "fullcodeline": "if (tok->buf != NULL) {"
    },
    {
        "line": 14,
        "fullcodeline": "end = strchr(tok->inp, '\\0');"
    },
    {
        "line": 33,
        "fullcodeline": "if (translated == NULL)"
    },
    {
        "line": 43,
        "fullcodeline": "if (!u) {"
    },
    {
        "line": 134,
        "fullcodeline": "Py_ssize_t curstart = tok->start == NULL ? -1 :"
    },
    {
        "line": 136,
        "fullcodeline": "Py_ssize_t curvalid = tok->inp - tok->buf;"
    },
    {
        "line": 137,
        "fullcodeline": "Py_ssize_t newsize = curvalid + BUFSIZ;"
    },
    {
        "line": 138,
        "fullcodeline": "char *newbuf = tok->buf;"
    },
    {
        "line": 139,
        "fullcodeline": "newbuf = (char *)PyMem_REALLOC(newbuf,"
    },
    {
        "line": 146,
        "fullcodeline": "tok->buf = newbuf;"
    },
    {
        "line": 147,
        "fullcodeline": "tok->cur = tok->buf + cur;"
    },
    {
        "line": 148,
        "fullcodeline": "tok->line_start = tok->cur;"
    },
    {
        "line": 149,
        "fullcodeline": "tok->inp = tok->buf + curvalid;"
    },
    {
        "line": 150,
        "fullcodeline": "tok->end = tok->buf + newsize;"
    },
    {
        "line": 151,
        "fullcodeline": "tok->start = curstart < 0 ? NULL :"
    },
    {
        "line": 165,
        "fullcodeline": "tok->inp = strchr(tok->inp, '\\0');"
    },
    {
        "line": 166,
        "fullcodeline": "done = tok->inp[-1] == '\\n';"
    },
    {
        "line": 169,
        "fullcodeline": "tok->cur = tok->buf + cur;"
    },
    {
        "line": 173,
        "fullcodeline": "pt = tok->inp - 2;"
    },
    {
        "line": 15,
        "fullcodeline": "if (end == tok->inp) {"
    },
    {
        "line": 44,
        "fullcodeline": "tok->done = E_DECODE;"
    },
    {
        "line": 58,
        "fullcodeline": "else if (*newtok == '\\0') {"
    },
    {
        "line": 101,
        "fullcodeline": "if (tok->buf == NULL) {"
    },
    {
        "line": 110,
        "fullcodeline": "if (decoding_fgets(tok->buf, (int)(tok->end - tok->buf),"
    },
    {
        "line": 123,
        "fullcodeline": "cur = tok->cur - tok->buf;"
    },
    {
        "line": 141,
        "fullcodeline": "if (newbuf == NULL) {"
    },
    {
        "line": 153,
        "fullcodeline": "if (decoding_fgets(tok->inp,"
    },
    {
        "line": 60,
        "fullcodeline": "tok->done = E_EOF;"
    },
    {
        "line": 102,
        "fullcodeline": "tok->buf = (char *)"
    },
    {
        "line": 108,
        "fullcodeline": "tok->end = tok->buf + BUFSIZ;"
    },
    {
        "line": 114,
        "fullcodeline": "done = 1;"
    },
    {
        "line": 124,
        "fullcodeline": "if (decoding_feof(tok)) {"
    },
    {
        "line": 135,
        "fullcodeline": "tok->start - tok->buf;"
    },
    {
        "line": 163,
        "fullcodeline": "strcpy(tok->inp, \"\\n\");"
    },
    {
        "line": 174,
        "fullcodeline": "if (pt >= tok->buf && *pt == '\\r') {"
    },
    {
        "line": 176,
        "fullcodeline": "*pt = '\\0';"
    },
    {
        "line": 177,
        "fullcodeline": "tok->inp = pt;"
    },
    {
        "line": 104,
        "fullcodeline": "if (tok->buf == NULL) {"
    },
    {
        "line": 112,
        "fullcodeline": "if (!tok->decoding_erred)"
    },
    {
        "line": 117,
        "fullcodeline": "tok->done = E_OK;"
    },
    {
        "line": 118,
        "fullcodeline": "tok->inp = strchr(tok->buf, '\\0');"
    },
    {
        "line": 119,
        "fullcodeline": "done = tok->inp == tok->buf || tok->inp[-1] == '\\n';"
    },
    {
        "line": 125,
        "fullcodeline": "tok->done = E_EOF;"
    },
    {
        "line": 126,
        "fullcodeline": "done = 1;"
    },
    {
        "line": 62,
        "fullcodeline": "else if (tok->start != NULL) {"
    },
    {
        "line": 103,
        "fullcodeline": "PyMem_MALLOC(BUFSIZ);"
    },
    {
        "line": 113,
        "fullcodeline": "tok->done = E_EOF;"
    },
    {
        "line": 129,
        "fullcodeline": "tok->done = E_OK;"
    },
    {
        "line": 154,
        "fullcodeline": "(int)(tok->end - tok->inp),"
    },
    {
        "line": 175,
        "fullcodeline": "*pt++ = '\\n';"
    },
    {
        "line": 63,
        "fullcodeline": "size_t start = tok->start - tok->buf;"
    },
    {
        "line": 64,
        "fullcodeline": "size_t oldlen = tok->cur - tok->buf;"
    },
    {
        "line": 65,
        "fullcodeline": "size_t newlen = oldlen + strlen(newtok);"
    },
    {
        "line": 66,
        "fullcodeline": "char *buf = tok->buf;"
    },
    {
        "line": 67,
        "fullcodeline": "buf = (char *)PyMem_REALLOC(buf, newlen+1);"
    },
    {
        "line": 76,
        "fullcodeline": "tok->buf = buf;"
    },
    {
        "line": 77,
        "fullcodeline": "tok->cur = tok->buf + oldlen;"
    },
    {
        "line": 79,
        "fullcodeline": "strcpy(tok->buf + oldlen, newtok);"
    },
    {
        "line": 81,
        "fullcodeline": "tok->inp = tok->buf + newlen;"
    },
    {
        "line": 69,
        "fullcodeline": "if (buf == NULL) {"
    },
    {
        "line": 89,
        "fullcodeline": "tok->buf = newtok;"
    },
    {
        "line": 92,
        "fullcodeline": "tok->inp = strchr(tok->buf, '\\0');"
    },
    {
        "line": 87,
        "fullcodeline": "if (tok->buf != NULL)"
    }
]