[
    {
        "line": 7,
        "fullcodeline": "REQ(n, trailer);"
    },
    {
        "line": 8,
        "fullcodeline": "if (TYPE(CHILD(n, 0)) == LPAR) {"
    },
    {
        "line": 9,
        "fullcodeline": "if (NCH(n) == 2)"
    },
    {
        "line": 15,
        "fullcodeline": "else if (TYPE(CHILD(n, 0)) == DOT) {"
    },
    {
        "line": 10,
        "fullcodeline": "return Call(left_expr, NULL, NULL, LINENO(n),"
    },
    {
        "line": 16,
        "fullcodeline": "PyObject *attr_id = NEW_IDENTIFIER(CHILD(n, 1));"
    },
    {
        "line": 13,
        "fullcodeline": "return ast_for_call(c, CHILD(n, 1), left_expr);"
    },
    {
        "line": 17,
        "fullcodeline": "if (!attr_id)"
    },
    {
        "line": 19,
        "fullcodeline": "return Attribute(left_expr, attr_id, Load,"
    },
    {
        "line": 23,
        "fullcodeline": "REQ(CHILD(n, 0), LSQB);"
    },
    {
        "line": 24,
        "fullcodeline": "REQ(CHILD(n, 2), RSQB);"
    },
    {
        "line": 25,
        "fullcodeline": "n = CHILD(n, 1);"
    },
    {
        "line": 20,
        "fullcodeline": "LINENO(n), n->n_col_offset, c->c_arena);"
    },
    {
        "line": 26,
        "fullcodeline": "if (NCH(n) == 1) {"
    },
    {
        "line": 27,
        "fullcodeline": "slice_ty slc = ast_for_slice(c, CHILD(n, 0));"
    },
    {
        "line": 28,
        "fullcodeline": "if (!slc)"
    },
    {
        "line": 30,
        "fullcodeline": "return Subscript(left_expr, slc, Load, LINENO(n), n->n_col_offset,"
    },
    {
        "line": 41,
        "fullcodeline": "int simple = 1;"
    },
    {
        "line": 43,
        "fullcodeline": "slices = _Ta3_asdl_seq_new((NCH(n) + 1) / 2, c->c_arena);"
    },
    {
        "line": 59,
        "fullcodeline": "elts = _Ta3_asdl_seq_new(asdl_seq_LEN(slices), c->c_arena);"
    },
    {
        "line": 67,
        "fullcodeline": "e = Tuple(elts, Load, LINENO(n), n->n_col_offset, c->c_arena);"
    },
    {
        "line": 44,
        "fullcodeline": "if (!slices)"
    },
    {
        "line": 46,
        "fullcodeline": "for (j = 0; j < NCH(n); j += 2) {"
    },
    {
        "line": 60,
        "fullcodeline": "if (!elts)"
    },
    {
        "line": 62,
        "fullcodeline": "for (j = 0; j < asdl_seq_LEN(slices); ++j) {"
    },
    {
        "line": 68,
        "fullcodeline": "if (!e)"
    },
    {
        "line": 70,
        "fullcodeline": "return Subscript(left_expr, Index(e, c->c_arena),"
    },
    {
        "line": 47,
        "fullcodeline": "slc = ast_for_slice(c, CHILD(n, j));"
    },
    {
        "line": 52,
        "fullcodeline": "asdl_seq_SET(slices, j / 2, slc);"
    },
    {
        "line": 63,
        "fullcodeline": "slc = (slice_ty)asdl_seq_GET(slices, j);"
    },
    {
        "line": 65,
        "fullcodeline": "asdl_seq_SET(elts, j, slc->v.Index.value);"
    },
    {
        "line": 71,
        "fullcodeline": "Load, LINENO(n), n->n_col_offset, c->c_arena);"
    },
    {
        "line": 48,
        "fullcodeline": "if (!slc)"
    },
    {
        "line": 50,
        "fullcodeline": "if (slc->kind != Index_kind)"
    },
    {
        "line": 55,
        "fullcodeline": "return Subscript(left_expr, ExtSlice(slices, c->c_arena),"
    },
    {
        "line": 64,
        "fullcodeline": "assert(slc->kind == Index_kind  && slc->v.Index.value);"
    },
    {
        "line": 51,
        "fullcodeline": "simple = 0;"
    },
    {
        "line": 56,
        "fullcodeline": "Load, LINENO(n), n->n_col_offset, c->c_arena);"
    }
]