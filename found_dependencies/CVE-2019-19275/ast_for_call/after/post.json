[
    {
        "line": 13,
        "fullcodeline": "REQ(n, arglist);"
    },
    {
        "line": 15,
        "fullcodeline": "nargs = 0;"
    },
    {
        "line": 16,
        "fullcodeline": "nkeywords = 0;"
    },
    {
        "line": 41,
        "fullcodeline": "args = _Ta3_asdl_seq_new(nargs, c->c_arena);"
    },
    {
        "line": 44,
        "fullcodeline": "keywords = _Ta3_asdl_seq_new(nkeywords, c->c_arena);"
    },
    {
        "line": 48,
        "fullcodeline": "nargs = 0;  /* positional arguments + iterable argument unpackings */"
    },
    {
        "line": 49,
        "fullcodeline": "nkeywords = 0;  /* keyword arguments + keyword argument unpackings */"
    },
    {
        "line": 50,
        "fullcodeline": "ndoublestars = 0;  /* just keyword argument unpackings */"
    },
    {
        "line": 17,
        "fullcodeline": "for (i = 0; i < NCH(n); i++) {"
    },
    {
        "line": 42,
        "fullcodeline": "if (!args)"
    },
    {
        "line": 45,
        "fullcodeline": "if (!keywords)"
    },
    {
        "line": 51,
        "fullcodeline": "for (i = 0; i < NCH(n); i++) {"
    },
    {
        "line": 162,
        "fullcodeline": "return Call(func, args, keywords, func->lineno, func->col_offset, c->c_arena);"
    },
    {
        "line": 18,
        "fullcodeline": "node *ch = CHILD(n, i);"
    },
    {
        "line": 52,
        "fullcodeline": "node *ch = CHILD(n, i);"
    },
    {
        "line": 19,
        "fullcodeline": "if (TYPE(ch) == argument) {"
    },
    {
        "line": 53,
        "fullcodeline": "if (TYPE(ch) == argument) {"
    },
    {
        "line": 55,
        "fullcodeline": "node *chch = CHILD(ch, 0);"
    },
    {
        "line": 20,
        "fullcodeline": "if (NCH(ch) == 1)"
    },
    {
        "line": 56,
        "fullcodeline": "if (NCH(ch) == 1) {"
    },
    {
        "line": 21,
        "fullcodeline": "nargs++;"
    },
    {
        "line": 71,
        "fullcodeline": "e = ast_for_expr(c, chch);"
    },
    {
        "line": 74,
        "fullcodeline": "asdl_seq_SET(args, nargs++, e);"
    },
    {
        "line": 72,
        "fullcodeline": "if (!e)"
    },
    {
        "line": 22,
        "fullcodeline": "else if (TYPE(CHILD(ch, 1)) == comp_for) {"
    },
    {
        "line": 76,
        "fullcodeline": "else if (TYPE(chch) == STAR) {"
    },
    {
        "line": 23,
        "fullcodeline": "nargs++;"
    },
    {
        "line": 85,
        "fullcodeline": "e = ast_for_expr(c, CHILD(ch, 1));"
    },
    {
        "line": 88,
        "fullcodeline": "starred = Starred(e, Load, LINENO(chch),"
    },
    {
        "line": 93,
        "fullcodeline": "asdl_seq_SET(args, nargs++, starred);"
    },
    {
        "line": 24,
        "fullcodeline": "if (!allowgen) {"
    },
    {
        "line": 28,
        "fullcodeline": "if (NCH(n) > 1) {"
    },
    {
        "line": 60,
        "fullcodeline": "ast_error(c, chch,"
    },
    {
        "line": 86,
        "fullcodeline": "if (!e)"
    },
    {
        "line": 91,
        "fullcodeline": "if (!starred)"
    },
    {
        "line": 25,
        "fullcodeline": "ast_error(c, ch, \"invalid syntax\");"
    },
    {
        "line": 29,
        "fullcodeline": "ast_error(c, ch, \"Generator expression must be parenthesized\");"
    },
    {
        "line": 33,
        "fullcodeline": "else if (TYPE(CHILD(ch, 0)) == STAR)"
    },
    {
        "line": 65,
        "fullcodeline": "ast_error(c, chch,"
    },
    {
        "line": 80,
        "fullcodeline": "ast_error(c, chch,"
    },
    {
        "line": 96,
        "fullcodeline": "else if (TYPE(chch) == DOUBLESTAR) {"
    },
    {
        "line": 34,
        "fullcodeline": "nargs++;"
    },
    {
        "line": 99,
        "fullcodeline": "i++;"
    },
    {
        "line": 100,
        "fullcodeline": "e = ast_for_expr(c, CHILD(ch, 1));"
    },
    {
        "line": 103,
        "fullcodeline": "kw = keyword(NULL, e, c->c_arena);"
    },
    {
        "line": 104,
        "fullcodeline": "asdl_seq_SET(keywords, nkeywords++, kw);"
    },
    {
        "line": 105,
        "fullcodeline": "ndoublestars++;"
    },
    {
        "line": 37,
        "fullcodeline": "nkeywords++;"
    },
    {
        "line": 101,
        "fullcodeline": "if (!e)"
    },
    {
        "line": 107,
        "fullcodeline": "else if (TYPE(CHILD(ch, 1)) == comp_for) {"
    },
    {
        "line": 109,
        "fullcodeline": "e = ast_for_genexp(c, ch);"
    },
    {
        "line": 112,
        "fullcodeline": "asdl_seq_SET(args, nargs++, e);"
    },
    {
        "line": 110,
        "fullcodeline": "if (!e)"
    },
    {
        "line": 121,
        "fullcodeline": "e = ast_for_expr(c, chch);"
    },
    {
        "line": 142,
        "fullcodeline": "key = e->v.Name.id;"
    },
    {
        "line": 151,
        "fullcodeline": "e = ast_for_expr(c, CHILD(ch, 2));"
    },
    {
        "line": 154,
        "fullcodeline": "kw = keyword(key, e, c->c_arena);"
    },
    {
        "line": 157,
        "fullcodeline": "asdl_seq_SET(keywords, nkeywords++, kw);"
    },
    {
        "line": 122,
        "fullcodeline": "if (!e)"
    },
    {
        "line": 129,
        "fullcodeline": "if (e->kind == Lambda_kind) {"
    },
    {
        "line": 143,
        "fullcodeline": "for (k = 0; k < nkeywords; k++) {"
    },
    {
        "line": 152,
        "fullcodeline": "if (!e)"
    },
    {
        "line": 155,
        "fullcodeline": "if (!kw)"
    },
    {
        "line": 130,
        "fullcodeline": "ast_error(c, chch,"
    },
    {
        "line": 145,
        "fullcodeline": "if (tmp && !PyUnicode_Compare(tmp, key)) {"
    },
    {
        "line": 134,
        "fullcodeline": "else if (e->kind != Name_kind) {"
    },
    {
        "line": 144,
        "fullcodeline": "tmp = ((keyword_ty)asdl_seq_GET(keywords, k))->arg;"
    },
    {
        "line": 146,
        "fullcodeline": "ast_error(c, chch,"
    },
    {
        "line": 135,
        "fullcodeline": "ast_error(c, chch,"
    },
    {
        "line": 139,
        "fullcodeline": "else if (forbidden_name(c, e->v.Name.id, ch, 1)) {"
    }
]