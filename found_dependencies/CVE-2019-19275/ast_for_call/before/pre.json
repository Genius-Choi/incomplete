[
    {
        "line": 13,
        "fullcodeline": "REQ(n, arglist);"
    },
    {
        "line": 15,
        "fullcodeline": "nargs = 0;"
    },
    {
        "line": 16,
        "fullcodeline": "nkeywords = 0;"
    },
    {
        "line": 17,
        "fullcodeline": "ngens = 0;"
    },
    {
        "line": 43,
        "fullcodeline": "args = _Ta3_asdl_seq_new(nargs + ngens, c->c_arena);"
    },
    {
        "line": 46,
        "fullcodeline": "keywords = _Ta3_asdl_seq_new(nkeywords, c->c_arena);"
    },
    {
        "line": 50,
        "fullcodeline": "nargs = 0;  /* positional arguments + iterable argument unpackings */"
    },
    {
        "line": 51,
        "fullcodeline": "nkeywords = 0;  /* keyword arguments + keyword argument unpackings */"
    },
    {
        "line": 52,
        "fullcodeline": "ndoublestars = 0;  /* just keyword argument unpackings */"
    },
    {
        "line": 18,
        "fullcodeline": "for (i = 0; i < NCH(n); i++) {"
    },
    {
        "line": 32,
        "fullcodeline": "if (ngens > 1 || (ngens && (nargs || nkeywords))) {"
    },
    {
        "line": 44,
        "fullcodeline": "if (!args)"
    },
    {
        "line": 47,
        "fullcodeline": "if (!keywords)"
    },
    {
        "line": 53,
        "fullcodeline": "for (i = 0; i < NCH(n); i++) {"
    },
    {
        "line": 164,
        "fullcodeline": "return Call(func, args, keywords, func->lineno, func->col_offset, c->c_arena);"
    },
    {
        "line": 19,
        "fullcodeline": "node *ch = CHILD(n, i);"
    },
    {
        "line": 33,
        "fullcodeline": "ast_error(c, n, \"Generator expression must be parenthesized \""
    },
    {
        "line": 54,
        "fullcodeline": "node *ch = CHILD(n, i);"
    },
    {
        "line": 20,
        "fullcodeline": "if (TYPE(ch) == argument) {"
    },
    {
        "line": 55,
        "fullcodeline": "if (TYPE(ch) == argument) {"
    },
    {
        "line": 57,
        "fullcodeline": "node *chch = CHILD(ch, 0);"
    },
    {
        "line": 21,
        "fullcodeline": "if (NCH(ch) == 1)"
    },
    {
        "line": 22,
        "fullcodeline": "nargs++;"
    },
    {
        "line": 58,
        "fullcodeline": "if (NCH(ch) == 1) {"
    },
    {
        "line": 73,
        "fullcodeline": "e = ast_for_expr(c, chch);"
    },
    {
        "line": 76,
        "fullcodeline": "asdl_seq_SET(args, nargs++, e);"
    },
    {
        "line": 74,
        "fullcodeline": "if (!e)"
    },
    {
        "line": 23,
        "fullcodeline": "else if (TYPE(CHILD(ch, 1)) == comp_for)"
    },
    {
        "line": 24,
        "fullcodeline": "ngens++;"
    },
    {
        "line": 78,
        "fullcodeline": "else if (TYPE(chch) == STAR) {"
    },
    {
        "line": 87,
        "fullcodeline": "e = ast_for_expr(c, CHILD(ch, 1));"
    },
    {
        "line": 90,
        "fullcodeline": "starred = Starred(e, Load, LINENO(chch),"
    },
    {
        "line": 95,
        "fullcodeline": "asdl_seq_SET(args, nargs++, starred);"
    },
    {
        "line": 88,
        "fullcodeline": "if (!e)"
    },
    {
        "line": 93,
        "fullcodeline": "if (!starred)"
    },
    {
        "line": 25,
        "fullcodeline": "else if (TYPE(CHILD(ch, 0)) == STAR)"
    },
    {
        "line": 98,
        "fullcodeline": "else if (TYPE(chch) == DOUBLESTAR) {"
    },
    {
        "line": 26,
        "fullcodeline": "nargs++;"
    },
    {
        "line": 101,
        "fullcodeline": "i++;"
    },
    {
        "line": 102,
        "fullcodeline": "e = ast_for_expr(c, CHILD(ch, 1));"
    },
    {
        "line": 105,
        "fullcodeline": "kw = keyword(NULL, e, c->c_arena);"
    },
    {
        "line": 106,
        "fullcodeline": "asdl_seq_SET(keywords, nkeywords++, kw);"
    },
    {
        "line": 29,
        "fullcodeline": "nkeywords++;"
    },
    {
        "line": 103,
        "fullcodeline": "if (!e)"
    },
    {
        "line": 109,
        "fullcodeline": "else if (TYPE(CHILD(ch, 1)) == comp_for) {"
    },
    {
        "line": 111,
        "fullcodeline": "e = ast_for_genexp(c, ch);"
    },
    {
        "line": 114,
        "fullcodeline": "asdl_seq_SET(args, nargs++, e);"
    },
    {
        "line": 112,
        "fullcodeline": "if (!e)"
    },
    {
        "line": 123,
        "fullcodeline": "e = ast_for_expr(c, chch);"
    },
    {
        "line": 144,
        "fullcodeline": "key = e->v.Name.id;"
    },
    {
        "line": 153,
        "fullcodeline": "e = ast_for_expr(c, CHILD(ch, 2));"
    },
    {
        "line": 156,
        "fullcodeline": "kw = keyword(key, e, c->c_arena);"
    },
    {
        "line": 159,
        "fullcodeline": "asdl_seq_SET(keywords, nkeywords++, kw);"
    },
    {
        "line": 124,
        "fullcodeline": "if (!e)"
    },
    {
        "line": 131,
        "fullcodeline": "if (e->kind == Lambda_kind) {"
    },
    {
        "line": 145,
        "fullcodeline": "for (k = 0; k < nkeywords; k++) {"
    },
    {
        "line": 154,
        "fullcodeline": "if (!e)"
    },
    {
        "line": 157,
        "fullcodeline": "if (!kw)"
    },
    {
        "line": 146,
        "fullcodeline": "tmp = ((keyword_ty)asdl_seq_GET(keywords, k))->arg;"
    },
    {
        "line": 136,
        "fullcodeline": "else if (e->kind != Name_kind) {"
    },
    {
        "line": 147,
        "fullcodeline": "if (tmp && !PyUnicode_Compare(tmp, key)) {"
    },
    {
        "line": 141,
        "fullcodeline": "else if (forbidden_name(c, e->v.Name.id, ch, 1)) {"
    }
]