[
    {
        "line": 6,
        "fullcodeline": "*p_start = *p_end = NULL;"
    },
    {
        "line": 8,
        "fullcodeline": "tok->start = NULL;"
    },
    {
        "line": 9,
        "fullcodeline": "blankline = 0;"
    },
    {
        "line": 88,
        "fullcodeline": "tok->start = tok->cur;"
    },
    {
        "line": 103,
        "fullcodeline": "tok->start = NULL;"
    },
    {
        "line": 110,
        "fullcodeline": "tok->start = tok->cur - 1;"
    },
    {
        "line": 175,
        "fullcodeline": "nonascii = 0;"
    },
    {
        "line": 91,
        "fullcodeline": "if (tok->pendin != 0) {"
    },
    {
        "line": 107,
        "fullcodeline": "} while (c == ' ' || c == '\\t' || c == '\\014');"
    },
    {
        "line": 113,
        "fullcodeline": "if (c == '#') {"
    },
    {
        "line": 170,
        "fullcodeline": "if (c == EOF) {"
    },
    {
        "line": 176,
        "fullcodeline": "if (is_potential_identifier_start(c)) {"
    },
    {
        "line": 220,
        "fullcodeline": "if (c == '\\n') {"
    },
    {
        "line": 232,
        "fullcodeline": "if (c == '.') {"
    },
    {
        "line": 257,
        "fullcodeline": "if (isdigit(c)) {"
    },
    {
        "line": 431,
        "fullcodeline": "if (c == '\\'' || c == '\"') {"
    },
    {
        "line": 493,
        "fullcodeline": "if (c == '\\\\') {"
    },
    {
        "line": 506,
        "fullcodeline": "int c2 = tok_nextc(tok);"
    },
    {
        "line": 507,
        "fullcodeline": "int token = PyToken_TwoChars(c, c2);"
    },
    {
        "line": 521,
        "fullcodeline": "tok_backup(tok, c2);"
    },
    {
        "line": 573,
        "fullcodeline": "return PyToken_OneChar(c);"
    },
    {
        "line": 13,
        "fullcodeline": "int col = 0;"
    },
    {
        "line": 14,
        "fullcodeline": "int altcol = 0;"
    },
    {
        "line": 15,
        "fullcodeline": "tok->atbol = 0;"
    },
    {
        "line": 32,
        "fullcodeline": "tok_backup(tok, c);"
    },
    {
        "line": 106,
        "fullcodeline": "c = tok_nextc(tok);"
    },
    {
        "line": 178,
        "fullcodeline": "int saw_b = 0, saw_r = 0, saw_u = 0, saw_f = 0;"
    },
    {
        "line": 209,
        "fullcodeline": "tok_backup(tok, c);"
    },
    {
        "line": 221,
        "fullcodeline": "tok->atbol = 1;"
    },
    {
        "line": 233,
        "fullcodeline": "c = tok_nextc(tok);"
    },
    {
        "line": 423,
        "fullcodeline": "tok_backup(tok, c);"
    },
    {
        "line": 432,
        "fullcodeline": "int quote = c;"
    },
    {
        "line": 433,
        "fullcodeline": "int quote_size = 1;             /* 1 or 3 */"
    },
    {
        "line": 434,
        "fullcodeline": "int end_quote_size = 0;"
    },
    {
        "line": 440,
        "fullcodeline": "tok->first_lineno = tok->lineno;"
    },
    {
        "line": 441,
        "fullcodeline": "tok->multi_line_start = tok->line_start;"
    },
    {
        "line": 444,
        "fullcodeline": "c = tok_nextc(tok);"
    },
    {
        "line": 494,
        "fullcodeline": "c = tok_nextc(tok);"
    },
    {
        "line": 500,
        "fullcodeline": "tok->cont_line = 1;"
    },
    {
        "line": 508,
        "fullcodeline": "if (token != OP) {"
    },
    {
        "line": 546,
        "fullcodeline": "tok->level--;"
    },
    {
        "line": 548,
        "fullcodeline": "int opening = tok->parenstack[tok->level];"
    },
    {
        "line": 33,
        "fullcodeline": "if (c == '#' || c == '\\n') {"
    },
    {
        "line": 48,
        "fullcodeline": "if (!blankline && tok->level == 0) {"
    },
    {
        "line": 92,
        "fullcodeline": "if (tok->pendin < 0) {"
    },
    {
        "line": 116,
        "fullcodeline": "while (c != EOF && c != '\\n') {"
    },
    {
        "line": 171,
        "fullcodeline": "return tok->done == E_EOF ? ENDMARKER : ERRORTOKEN;"
    },
    {
        "line": 203,
        "fullcodeline": "while (is_potential_identifier_char(c)) {"
    },
    {
        "line": 222,
        "fullcodeline": "if (blankline || tok->level > 0) {"
    },
    {
        "line": 226,
        "fullcodeline": "*p_end = tok->cur - 1; /* Leave '\\n' out of the string */"
    },
    {
        "line": 234,
        "fullcodeline": "if (isdigit(c)) {"
    },
    {
        "line": 445,
        "fullcodeline": "if (c == quote) {"
    },
    {
        "line": 454,
        "fullcodeline": "if (c != quote) {"
    },
    {
        "line": 459,
        "fullcodeline": "while (end_quote_size != quote_size) {"
    },
    {
        "line": 495,
        "fullcodeline": "if (c != '\\n') {"
    },
    {
        "line": 509,
        "fullcodeline": "int c3 = tok_nextc(tok);"
    },
    {
        "line": 510,
        "fullcodeline": "int token3 = PyToken_ThreeChars(c, c2, c3);"
    },
    {
        "line": 530,
        "fullcodeline": "if (tok->level >= MAXLEVEL) {"
    },
    {
        "line": 542,
        "fullcodeline": "if (!tok->level) {"
    },
    {
        "line": 17,
        "fullcodeline": "c = tok_nextc(tok);"
    },
    {
        "line": 117,
        "fullcodeline": "c = tok_nextc(tok);"
    },
    {
        "line": 121,
        "fullcodeline": "p = tok->start;"
    },
    {
        "line": 122,
        "fullcodeline": "prefix = type_comment_prefix;"
    },
    {
        "line": 198,
        "fullcodeline": "c = tok_nextc(tok);"
    },
    {
        "line": 207,
        "fullcodeline": "c = tok_nextc(tok);"
    },
    {
        "line": 210,
        "fullcodeline": "if (nonascii && !verify_identifier(tok)) {"
    },
    {
        "line": 260,
        "fullcodeline": "c = tok_nextc(tok);"
    },
    {
        "line": 446,
        "fullcodeline": "c = tok_nextc(tok);"
    },
    {
        "line": 455,
        "fullcodeline": "tok_backup(tok, c);"
    },
    {
        "line": 460,
        "fullcodeline": "c = tok_nextc(tok);"
    },
    {
        "line": 496,
        "fullcodeline": "tok->done = E_LINECONT;"
    },
    {
        "line": 511,
        "fullcodeline": "if (token3 != OP) {"
    },
    {
        "line": 549,
        "fullcodeline": "if (!((opening == '(' && c == ')') ||"
    },
    {
        "line": 18,
        "fullcodeline": "if (c == ' ') {"
    },
    {
        "line": 39,
        "fullcodeline": "if (col == 0 && c == '\\n' && tok->prompt != NULL) {"
    },
    {
        "line": 49,
        "fullcodeline": "if (col == tok->indstack[tok->indent]) {"
    },
    {
        "line": 123,
        "fullcodeline": "while (*prefix && p < tok->cur) {"
    },
    {
        "line": 138,
        "fullcodeline": "if (!*prefix) {"
    },
    {
        "line": 180,
        "fullcodeline": "if (!(saw_b || saw_u || saw_f) && (c == 'b' || c == 'B'))"
    },
    {
        "line": 199,
        "fullcodeline": "if (c == '\"' || c == '\\'') {"
    },
    {
        "line": 375,
        "fullcodeline": "c = tok_decimal_tail(tok);"
    },
    {
        "line": 447,
        "fullcodeline": "if (c == quote) {"
    },
    {
        "line": 461,
        "fullcodeline": "if (c == EOF) {"
    },
    {
        "line": 476,
        "fullcodeline": "if (c == quote) {"
    },
    {
        "line": 512,
        "fullcodeline": "token = token3;"
    },
    {
        "line": 531,
        "fullcodeline": "return syntaxerror(tok, \"too many nested parentheses\");"
    },
    {
        "line": 543,
        "fullcodeline": "return syntaxerror(tok, \"unmatched '%c'\", c);"
    },
    {
        "line": 551,
        "fullcodeline": "(opening == '{' && c == '}')))"
    },
    {
        "line": 553,
        "fullcodeline": "if (tok->parenlinenostack[tok->level] != tok->lineno) {"
    },
    {
        "line": 19,
        "fullcodeline": "col++, altcol++;"
    },
    {
        "line": 40,
        "fullcodeline": "blankline = 0; /* Let it through */"
    },
    {
        "line": 134,
        "fullcodeline": "prefix++;"
    },
    {
        "line": 140,
        "fullcodeline": "tok_backup(tok, c);  /* don't eat the newline or EOF */"
    },
    {
        "line": 142,
        "fullcodeline": "type_start = p;"
    },
    {
        "line": 144,
        "fullcodeline": "is_type_ignore = tok->cur >= p + 6 && memcmp(p, \"ignore\", 6) == 0;"
    },
    {
        "line": 145,
        "fullcodeline": "p += 6;"
    },
    {
        "line": 181,
        "fullcodeline": "saw_b = 1;"
    },
    {
        "line": 205,
        "fullcodeline": "nonascii = 1;"
    },
    {
        "line": 236,
        "fullcodeline": "} else if (c == '.') {"
    },
    {
        "line": 261,
        "fullcodeline": "if (c == 'x' || c == 'X') {"
    },
    {
        "line": 263,
        "fullcodeline": "c = tok_nextc(tok);"
    },
    {
        "line": 376,
        "fullcodeline": "if (c == 0) {"
    },
    {
        "line": 448,
        "fullcodeline": "quote_size = 3;"
    },
    {
        "line": 471,
        "fullcodeline": "if (quote_size == 1 && c == '\\n') {"
    },
    {
        "line": 477,
        "fullcodeline": "end_quote_size += 1;"
    },
    {
        "line": 515,
        "fullcodeline": "tok_backup(tok, c3);"
    },
    {
        "line": 550,
        "fullcodeline": "(opening == '[' && c == ']') ||"
    },
    {
        "line": 43,
        "fullcodeline": "blankline = 1; /* Ignore completely */"
    },
    {
        "line": 51,
        "fullcodeline": "if (altcol != tok->altindstack[tok->indent]) {"
    },
    {
        "line": 124,
        "fullcodeline": "if (*prefix == ' ') {"
    },
    {
        "line": 146,
        "fullcodeline": "while (is_type_ignore && p < tok->cur) {"
    },
    {
        "line": 237,
        "fullcodeline": "c = tok_nextc(tok);"
    },
    {
        "line": 246,
        "fullcodeline": "tok_backup(tok, '.');"
    },
    {
        "line": 275,
        "fullcodeline": "} while (c == '_');"
    },
    {
        "line": 381,
        "fullcodeline": "if (c == '.') {"
    },
    {
        "line": 451,
        "fullcodeline": "end_quote_size = 1;     /* empty string found */"
    },
    {
        "line": 480,
        "fullcodeline": "end_quote_size = 0;"
    },
    {
        "line": 554,
        "fullcodeline": "return syntaxerror(tok,"
    },
    {
        "line": 21,
        "fullcodeline": "else if (c == '\\t') {"
    },
    {
        "line": 55,
        "fullcodeline": "else if (col > tok->indstack[tok->indent]) {"
    },
    {
        "line": 149,
        "fullcodeline": "is_type_ignore = is_type_ignore && (*p == ' ' || *p == '\\t');"
    },
    {
        "line": 150,
        "fullcodeline": "p++;"
    },
    {
        "line": 184,
        "fullcodeline": "else if (!(saw_b || saw_u || saw_r || saw_f)"
    },
    {
        "line": 238,
        "fullcodeline": "if (c == '.') {"
    },
    {
        "line": 249,
        "fullcodeline": "tok_backup(tok, c);"
    },
    {
        "line": 382,
        "fullcodeline": "c = tok_nextc(tok);"
    },
    {
        "line": 392,
        "fullcodeline": "if (c == 'e' || c == 'E') {"
    },
    {
        "line": 395,
        "fullcodeline": "e = c;"
    },
    {
        "line": 397,
        "fullcodeline": "c = tok_nextc(tok);"
    },
    {
        "line": 411,
        "fullcodeline": "c = tok_decimal_tail(tok);"
    },
    {
        "line": 416,
        "fullcodeline": "if (c == 'j' || c == 'J') {"
    },
    {
        "line": 419,
        "fullcodeline": "c = tok_nextc(tok);"
    },
    {
        "line": 463,
        "fullcodeline": "tok->done = E_EOFS;"
    },
    {
        "line": 560,
        "fullcodeline": "return syntaxerror(tok,"
    },
    {
        "line": 22,
        "fullcodeline": "col = (col / tok->tabsize + 1) * tok->tabsize;"
    },
    {
        "line": 23,
        "fullcodeline": "altcol = (altcol / ALTTABSIZE + 1) * ALTTABSIZE;"
    },
    {
        "line": 52,
        "fullcodeline": "return indenterror(tok);"
    },
    {
        "line": 65,
        "fullcodeline": "tok->pendin++;"
    },
    {
        "line": 66,
        "fullcodeline": "tok->indstack[++tok->indent] = col;"
    },
    {
        "line": 67,
        "fullcodeline": "tok->altindstack[tok->indent] = altcol;"
    },
    {
        "line": 125,
        "fullcodeline": "while (*p == ' ' || *p == '\\t') {"
    },
    {
        "line": 147,
        "fullcodeline": "if (*p == '#')"
    },
    {
        "line": 185,
        "fullcodeline": "&& (c == 'u'|| c == 'U')) {"
    },
    {
        "line": 186,
        "fullcodeline": "saw_u = 1;"
    },
    {
        "line": 265,
        "fullcodeline": "if (c == '_') {"
    },
    {
        "line": 274,
        "fullcodeline": "} while (isxdigit(c));"
    },
    {
        "line": 277,
        "fullcodeline": "else if (c == 'o' || c == 'O') {"
    },
    {
        "line": 279,
        "fullcodeline": "c = tok_nextc(tok);"
    },
    {
        "line": 385,
        "fullcodeline": "if (isdigit(c)) {"
    },
    {
        "line": 412,
        "fullcodeline": "if (c == 0) {"
    },
    {
        "line": 482,
        "fullcodeline": "tok_nextc(tok);  /* skip escaped char */"
    },
    {
        "line": 57,
        "fullcodeline": "if (tok->indent+1 >= MAXINDENT) {"
    },
    {
        "line": 62,
        "fullcodeline": "if (altcol <= tok->altindstack[tok->indent]) {"
    },
    {
        "line": 126,
        "fullcodeline": "p++;"
    },
    {
        "line": 128,
        "fullcodeline": "} else if (*prefix == *p) {"
    },
    {
        "line": 244,
        "fullcodeline": "tok_backup(tok, c);"
    },
    {
        "line": 266,
        "fullcodeline": "c = tok_nextc(tok);"
    },
    {
        "line": 268,
        "fullcodeline": "if (!isxdigit(c)) {"
    },
    {
        "line": 269,
        "fullcodeline": "tok_backup(tok, c);"
    },
    {
        "line": 273,
        "fullcodeline": "c = tok_nextc(tok);"
    },
    {
        "line": 297,
        "fullcodeline": "} while (c == '_');"
    },
    {
        "line": 298,
        "fullcodeline": "if (isdigit(c)) {"
    },
    {
        "line": 386,
        "fullcodeline": "c = tok_decimal_tail(tok);"
    },
    {
        "line": 398,
        "fullcodeline": "if (c == '+' || c == '-') {"
    },
    {
        "line": 399,
        "fullcodeline": "c = tok_nextc(tok);"
    },
    {
        "line": 25,
        "fullcodeline": "else if (c == '\\014')  {/* Control-L (formfeed) */"
    },
    {
        "line": 58,
        "fullcodeline": "tok->done = E_TOODEEP;"
    },
    {
        "line": 71,
        "fullcodeline": "while (tok->indent > 0 &&"
    },
    {
        "line": 76,
        "fullcodeline": "if (col != tok->indstack[tok->indent]) {"
    },
    {
        "line": 81,
        "fullcodeline": "if (altcol != tok->altindstack[tok->indent]) {"
    },
    {
        "line": 129,
        "fullcodeline": "p++;"
    },
    {
        "line": 189,
        "fullcodeline": "else if (!(saw_r || saw_u) && (c == 'r' || c == 'R')) {"
    },
    {
        "line": 270,
        "fullcodeline": "return syntaxerror(tok, \"invalid hexadecimal literal\");"
    },
    {
        "line": 387,
        "fullcodeline": "if (c == 0) {"
    },
    {
        "line": 26,
        "fullcodeline": "col = altcol = 0; /* For Emacs users */"
    },
    {
        "line": 63,
        "fullcodeline": "return indenterror(tok);"
    },
    {
        "line": 72,
        "fullcodeline": "col < tok->indstack[tok->indent]) {"
    },
    {
        "line": 73,
        "fullcodeline": "tok->pendin--;"
    },
    {
        "line": 74,
        "fullcodeline": "tok->indent--;"
    },
    {
        "line": 77,
        "fullcodeline": "tok->done = E_DEDENT;"
    },
    {
        "line": 190,
        "fullcodeline": "saw_r = 1;"
    },
    {
        "line": 281,
        "fullcodeline": "if (c == '_') {"
    },
    {
        "line": 299,
        "fullcodeline": "return syntaxerror(tok,"
    },
    {
        "line": 303,
        "fullcodeline": "else if (c == 'b' || c == 'B') {"
    },
    {
        "line": 305,
        "fullcodeline": "c = tok_nextc(tok);"
    },
    {
        "line": 400,
        "fullcodeline": "if (!isdigit(c)) {"
    },
    {
        "line": 401,
        "fullcodeline": "tok_backup(tok, c);"
    },
    {
        "line": 82,
        "fullcodeline": "return indenterror(tok);"
    },
    {
        "line": 282,
        "fullcodeline": "c = tok_nextc(tok);"
    },
    {
        "line": 284,
        "fullcodeline": "if (c < '0' || c >= '8') {"
    },
    {
        "line": 285,
        "fullcodeline": "tok_backup(tok, c);"
    },
    {
        "line": 295,
        "fullcodeline": "c = tok_nextc(tok);"
    },
    {
        "line": 296,
        "fullcodeline": "} while ('0' <= c && c < '8');"
    },
    {
        "line": 323,
        "fullcodeline": "} while (c == '_');"
    },
    {
        "line": 324,
        "fullcodeline": "if (isdigit(c)) {"
    },
    {
        "line": 402,
        "fullcodeline": "return syntaxerror(tok, \"invalid decimal literal\");"
    },
    {
        "line": 404,
        "fullcodeline": "} else if (!isdigit(c)) {"
    },
    {
        "line": 405,
        "fullcodeline": "tok_backup(tok, c);"
    },
    {
        "line": 406,
        "fullcodeline": "tok_backup(tok, e);"
    },
    {
        "line": 192,
        "fullcodeline": "else if (!(saw_f || saw_b || saw_u) && (c == 'f' || c == 'F')) {"
    },
    {
        "line": 286,
        "fullcodeline": "if (isdigit(c)) {"
    },
    {
        "line": 346,
        "fullcodeline": "if (isdigit(c)) {"
    },
    {
        "line": 353,
        "fullcodeline": "if (c == '.') {"
    },
    {
        "line": 193,
        "fullcodeline": "saw_f = 1;"
    },
    {
        "line": 307,
        "fullcodeline": "if (c == '_') {"
    },
    {
        "line": 325,
        "fullcodeline": "return syntaxerror(tok,"
    },
    {
        "line": 344,
        "fullcodeline": "c = tok_nextc(tok);"
    },
    {
        "line": 348,
        "fullcodeline": "c = tok_decimal_tail(tok);"
    },
    {
        "line": 354,
        "fullcodeline": "c = tok_nextc(tok);"
    },
    {
        "line": 287,
        "fullcodeline": "return syntaxerror(tok,"
    },
    {
        "line": 308,
        "fullcodeline": "c = tok_nextc(tok);"
    },
    {
        "line": 310,
        "fullcodeline": "if (c != '0' && c != '1') {"
    },
    {
        "line": 311,
        "fullcodeline": "tok_backup(tok, c);"
    },
    {
        "line": 321,
        "fullcodeline": "c = tok_nextc(tok);"
    },
    {
        "line": 322,
        "fullcodeline": "} while (c == '0' || c == '1');"
    },
    {
        "line": 334,
        "fullcodeline": "if (c == '_') {"
    },
    {
        "line": 341,
        "fullcodeline": "if (c != '0') {"
    },
    {
        "line": 349,
        "fullcodeline": "if (c == 0) {"
    },
    {
        "line": 291,
        "fullcodeline": "return syntaxerror(tok, \"invalid octal literal\");"
    },
    {
        "line": 312,
        "fullcodeline": "if (isdigit(c)) {"
    },
    {
        "line": 335,
        "fullcodeline": "c = tok_nextc(tok);"
    },
    {
        "line": 357,
        "fullcodeline": "else if (c == 'e' || c == 'E') {"
    },
    {
        "line": 313,
        "fullcodeline": "return syntaxerror(tok,"
    },
    {
        "line": 336,
        "fullcodeline": "if (!isdigit(c)) {"
    },
    {
        "line": 337,
        "fullcodeline": "tok_backup(tok, c);"
    },
    {
        "line": 317,
        "fullcodeline": "return syntaxerror(tok, \"invalid binary literal\");"
    },
    {
        "line": 338,
        "fullcodeline": "return syntaxerror(tok, \"invalid decimal literal\");"
    },
    {
        "line": 360,
        "fullcodeline": "else if (c == 'j' || c == 'J') {"
    },
    {
        "line": 365,
        "fullcodeline": "tok_backup(tok, c);"
    },
    {
        "line": 366,
        "fullcodeline": "return syntaxerror(tok,"
    }
]