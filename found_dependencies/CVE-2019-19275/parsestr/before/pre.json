[
    {
        "line": 5,
        "fullcodeline": "const char *s = STR(n);"
    },
    {
        "line": 6,
        "fullcodeline": "int quote = Py_CHARMASK(*s);"
    },
    {
        "line": 7,
        "fullcodeline": "int fmode = 0;"
    },
    {
        "line": 8,
        "fullcodeline": "*bytesmode = 0;"
    },
    {
        "line": 9,
        "fullcodeline": "*rawmode = 0;"
    },
    {
        "line": 10,
        "fullcodeline": "*result = NULL;"
    },
    {
        "line": 11,
        "fullcodeline": "*fstr = NULL;"
    },
    {
        "line": 43,
        "fullcodeline": "s++;"
    },
    {
        "line": 44,
        "fullcodeline": "len = strlen(s);"
    },
    {
        "line": 12,
        "fullcodeline": "if (Py_ISALPHA(quote)) {"
    },
    {
        "line": 34,
        "fullcodeline": "if (fmode && *bytesmode) {"
    },
    {
        "line": 45,
        "fullcodeline": "if (len > INT_MAX) {"
    },
    {
        "line": 50,
        "fullcodeline": "if (s[--len] != quote) {"
    },
    {
        "line": 78,
        "fullcodeline": "*rawmode = *rawmode || strchr(s, '\\\\') == NULL;"
    },
    {
        "line": 99,
        "fullcodeline": "return *result == NULL ? -1 : 0;"
    },
    {
        "line": 35,
        "fullcodeline": "PyErr_BadInternalCall();"
    },
    {
        "line": 38,
        "fullcodeline": "if (quote != '\\'' && quote != '\\\"') {"
    },
    {
        "line": 46,
        "fullcodeline": "PyErr_SetString(PyExc_OverflowError,"
    },
    {
        "line": 55,
        "fullcodeline": "if (len >= 4 && s[0] == quote && s[1] == quote) {"
    },
    {
        "line": 59,
        "fullcodeline": "s += 2;"
    },
    {
        "line": 60,
        "fullcodeline": "len -= 2;"
    },
    {
        "line": 13,
        "fullcodeline": "while (!*bytesmode || !*rawmode) {"
    },
    {
        "line": 36,
        "fullcodeline": "return -1;"
    },
    {
        "line": 40,
        "fullcodeline": "return -1;"
    },
    {
        "line": 48,
        "fullcodeline": "return -1;"
    },
    {
        "line": 53,
        "fullcodeline": "return -1;"
    },
    {
        "line": 62,
        "fullcodeline": "if (s[--len] != quote || s[--len] != quote) {"
    },
    {
        "line": 82,
        "fullcodeline": "for (ch = s; *ch; ch++) {"
    },
    {
        "line": 90,
        "fullcodeline": "*result = PyBytes_FromStringAndSize(s, len);"
    },
    {
        "line": 14,
        "fullcodeline": "if (quote == 'b' || quote == 'B') {"
    },
    {
        "line": 64,
        "fullcodeline": "return -1;"
    },
    {
        "line": 92,
        "fullcodeline": "*result = decode_bytes_with_escapes(c, n, s, len);"
    },
    {
        "line": 95,
        "fullcodeline": "*result = PyUnicode_DecodeUTF8Stateful(s, len, NULL, NULL);"
    },
    {
        "line": 15,
        "fullcodeline": "quote = *++s;"
    },
    {
        "line": 16,
        "fullcodeline": "*bytesmode = 1;"
    },
    {
        "line": 83,
        "fullcodeline": "if (Py_CHARMASK(*ch) >= 0x80) {"
    },
    {
        "line": 97,
        "fullcodeline": "*result = decode_unicode_with_escapes(c, n, s, len);"
    },
    {
        "line": 86,
        "fullcodeline": "return -1;"
    },
    {
        "line": 18,
        "fullcodeline": "else if (quote == 'u' || quote == 'U') {"
    },
    {
        "line": 19,
        "fullcodeline": "quote = *++s;"
    },
    {
        "line": 21,
        "fullcodeline": "else if (quote == 'r' || quote == 'R') {"
    },
    {
        "line": 22,
        "fullcodeline": "quote = *++s;"
    },
    {
        "line": 23,
        "fullcodeline": "*rawmode = 1;"
    },
    {
        "line": 25,
        "fullcodeline": "else if (quote == 'f' || quote == 'F') {"
    },
    {
        "line": 26,
        "fullcodeline": "quote = *++s;"
    },
    {
        "line": 27,
        "fullcodeline": "fmode = 1;"
    }
]