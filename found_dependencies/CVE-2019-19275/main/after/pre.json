[
    {
        "line": 2,
        "fullcodeline": "argv0 = sys.argv[0]"
    },
    {
        "line": 3,
        "fullcodeline": "components = argv0.split(os.sep)"
    },
    {
        "line": 4,
        "fullcodeline": "argv0 = os.sep.join(components[-2:])"
    },
    {
        "line": 5,
        "fullcodeline": "auto_gen_msg = common_msg % argv0"
    },
    {
        "line": 6,
        "fullcodeline": "mod = asdl.parse(srcfile)"
    },
    {
        "line": 10,
        "fullcodeline": "if not asdl.check(mod):"
    },
    {
        "line": 8,
        "fullcodeline": "print('Parsed Module:')"
    },
    {
        "line": 9,
        "fullcodeline": "print(mod)"
    },
    {
        "line": 11,
        "fullcodeline": "sys.exit(1)"
    },
    {
        "line": 13,
        "fullcodeline": "with open(H_FILE, \"w\") as f:"
    },
    {
        "line": 26,
        "fullcodeline": "with open(C_FILE, \"w\") as f:"
    },
    {
        "line": 14,
        "fullcodeline": "f.write(auto_gen_msg)"
    },
    {
        "line": 15,
        "fullcodeline": "f.write('#include \"asdl.h\"\\n\\n')"
    },
    {
        "line": 16,
        "fullcodeline": "c = ChainOfVisitors(TypeDefVisitor(f),"
    },
    {
        "line": 20,
        "fullcodeline": "c.visit(mod)"
    },
    {
        "line": 21,
        "fullcodeline": "f.write(\"PyObject* Ta3AST_mod2obj(mod_ty t);\\n\")"
    },
    {
        "line": 22,
        "fullcodeline": "f.write(\"mod_ty Ta3AST_obj2mod(PyObject* ast, PyArena* arena, int mode);\\n\")"
    },
    {
        "line": 23,
        "fullcodeline": "f.write(\"int Ta3AST_Check(PyObject* obj);\\n\")"
    },
    {
        "line": 27,
        "fullcodeline": "f.write(auto_gen_msg)"
    },
    {
        "line": 28,
        "fullcodeline": "f.write('#include <stddef.h>\\n')"
    },
    {
        "line": 29,
        "fullcodeline": "f.write('\\n')"
    },
    {
        "line": 30,
        "fullcodeline": "f.write('#include \"Python.h\"\\n')"
    },
    {
        "line": 31,
        "fullcodeline": "f.write('#include \"%s-ast.h\"\\n' % mod.name)"
    },
    {
        "line": 32,
        "fullcodeline": "f.write('\\n')"
    },
    {
        "line": 33,
        "fullcodeline": "f.write(\"static PyTypeObject AST_type;\\n\")"
    },
    {
        "line": 34,
        "fullcodeline": "v = ChainOfVisitors("
    },
    {
        "line": 44,
        "fullcodeline": "v.visit(mod)"
    },
    {
        "line": 17,
        "fullcodeline": "StructVisitor(f),"
    },
    {
        "line": 18,
        "fullcodeline": "PrototypeVisitor(f),"
    },
    {
        "line": 35,
        "fullcodeline": "PyTypesDeclareVisitor(f),"
    },
    {
        "line": 36,
        "fullcodeline": "PyTypesVisitor(f),"
    },
    {
        "line": 37,
        "fullcodeline": "Obj2ModPrototypeVisitor(f),"
    },
    {
        "line": 38,
        "fullcodeline": "FunctionVisitor(f),"
    },
    {
        "line": 39,
        "fullcodeline": "ObjVisitor(f),"
    },
    {
        "line": 40,
        "fullcodeline": "Obj2ModVisitor(f),"
    },
    {
        "line": 41,
        "fullcodeline": "ASTModuleVisitor(f),"
    },
    {
        "line": 42,
        "fullcodeline": "PartingShots(f),"
    }
]