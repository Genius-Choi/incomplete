[
    {
        "line": 8,
        "fullcodeline": "expr_ty returns = NULL;"
    },
    {
        "line": 9,
        "fullcodeline": "int name_i = 1;"
    },
    {
        "line": 11,
        "fullcodeline": "string type_comment = NULL;"
    },
    {
        "line": 19,
        "fullcodeline": "REQ(n, funcdef);"
    },
    {
        "line": 21,
        "fullcodeline": "name = NEW_IDENTIFIER(CHILD(n, name_i));"
    },
    {
        "line": 26,
        "fullcodeline": "args = ast_for_arguments(c, CHILD(n, name_i + 1));"
    },
    {
        "line": 39,
        "fullcodeline": "body = ast_for_suite(c, CHILD(n, name_i + 3));"
    },
    {
        "line": 13,
        "fullcodeline": "if (is_async && c->c_feature_version < 5) {"
    },
    {
        "line": 22,
        "fullcodeline": "if (!name)"
    },
    {
        "line": 24,
        "fullcodeline": "if (forbidden_name(c, name, CHILD(n, name_i), 0))"
    },
    {
        "line": 27,
        "fullcodeline": "if (!args)"
    },
    {
        "line": 29,
        "fullcodeline": "if (TYPE(CHILD(n, name_i+2)) == RARROW) {"
    },
    {
        "line": 35,
        "fullcodeline": "if (TYPE(CHILD(n, name_i + 3)) == TYPE_COMMENT) {"
    },
    {
        "line": 40,
        "fullcodeline": "if (!body)"
    },
    {
        "line": 14,
        "fullcodeline": "ast_error(c, n,"
    },
    {
        "line": 30,
        "fullcodeline": "returns = ast_for_expr(c, CHILD(n, name_i + 3));"
    },
    {
        "line": 33,
        "fullcodeline": "name_i += 2;"
    },
    {
        "line": 36,
        "fullcodeline": "type_comment = NEW_TYPE_COMMENT(CHILD(n, name_i + 3));"
    },
    {
        "line": 37,
        "fullcodeline": "name_i += 1;"
    },
    {
        "line": 43,
        "fullcodeline": "if (!type_comment && NCH(CHILD(n, name_i + 3)) > 1) {"
    },
    {
        "line": 46,
        "fullcodeline": "tc = CHILD(CHILD(n, name_i + 3), 1);"
    },
    {
        "line": 31,
        "fullcodeline": "if (!returns)"
    },
    {
        "line": 53,
        "fullcodeline": "return AsyncFunctionDef(name, args, body, decorator_seq, returns,"
    },
    {
        "line": 48,
        "fullcodeline": "if (TYPE(tc) == TYPE_COMMENT)"
    },
    {
        "line": 49,
        "fullcodeline": "type_comment = NEW_TYPE_COMMENT(tc);"
    },
    {
        "line": 54,
        "fullcodeline": "type_comment, LINENO(n),"
    },
    {
        "line": 57,
        "fullcodeline": "return FunctionDef(name, args, body, decorator_seq, returns,"
    },
    {
        "line": 58,
        "fullcodeline": "type_comment, LINENO(n),"
    }
]