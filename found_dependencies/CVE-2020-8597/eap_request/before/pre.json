[
    {
        "line": 10,
        "fullcodeline": "char secret[MAXWORDLEN];"
    },
    {
        "line": 11,
        "fullcodeline": "char rhostname[256];"
    },
    {
        "line": 13,
        "fullcodeline": "u_char hash[MD5_SIGNATURE_SIZE];"
    },
    {
        "line": 29,
        "fullcodeline": "esp->es_client.ea_requests++;"
    },
    {
        "line": 45,
        "fullcodeline": "GETCHAR(typenum, inp);"
    },
    {
        "line": 46,
        "fullcodeline": "len--;"
    },
    {
        "line": 30,
        "fullcodeline": "if (esp->es_client.ea_maxrequests != 0 &&"
    },
    {
        "line": 40,
        "fullcodeline": "if (len <= 0) {"
    },
    {
        "line": 31,
        "fullcodeline": "esp->es_client.ea_requests > esp->es_client.ea_maxrequests) {"
    },
    {
        "line": 32,
        "fullcodeline": "info(\"EAP: received too many Request messages\");"
    },
    {
        "line": 36,
        "fullcodeline": "auth_withpeer_fail(esp->es_unit, PPP_EAP);"
    },
    {
        "line": 79,
        "fullcodeline": "eap_send_response(esp, id, typenum, esp->es_client.ea_name,"
    },
    {
        "line": 86,
        "fullcodeline": "eap_send_response(esp, id, typenum, NULL, 0);"
    },
    {
        "line": 104,
        "fullcodeline": "GETCHAR(vallen, inp);"
    },
    {
        "line": 105,
        "fullcodeline": "len--;"
    },
    {
        "line": 139,
        "fullcodeline": "MD5_Init(&mdContext);"
    },
    {
        "line": 140,
        "fullcodeline": "typenum = id;"
    },
    {
        "line": 141,
        "fullcodeline": "MD5_Update(&mdContext, &typenum, 1);"
    },
    {
        "line": 142,
        "fullcodeline": "MD5_Update(&mdContext, (u_char *)secret, secret_len);"
    },
    {
        "line": 144,
        "fullcodeline": "MD5_Update(&mdContext, inp, vallen);"
    },
    {
        "line": 145,
        "fullcodeline": "MD5_Final(hash, &mdContext);"
    },
    {
        "line": 146,
        "fullcodeline": "eap_chap_response(esp, id, hash, esp->es_client.ea_name,"
    },
    {
        "line": 384,
        "fullcodeline": "eap_send_nak(esp, id, EAPT_SRP);"
    },
    {
        "line": 389,
        "fullcodeline": "UNTIMEOUT(eap_client_timeout, (void *)esp);"
    },
    {
        "line": 33,
        "fullcodeline": "if (esp->es_client.ea_timeout > 0) {"
    },
    {
        "line": 50,
        "fullcodeline": "if (len > 0)"
    },
    {
        "line": 84,
        "fullcodeline": "if (len > 0)"
    },
    {
        "line": 99,
        "fullcodeline": "if (len < 1) {"
    },
    {
        "line": 115,
        "fullcodeline": "if (vallen >= len + sizeof (rhostname)) {"
    },
    {
        "line": 125,
        "fullcodeline": "if (explicit_remote ||"
    },
    {
        "line": 34,
        "fullcodeline": "UNTIMEOUT(eap_client_timeout, (void *)esp);"
    },
    {
        "line": 106,
        "fullcodeline": "if (vallen < 8 || vallen > len) {"
    },
    {
        "line": 110,
        "fullcodeline": "eap_send_nak(esp, id, EAPT_SRP);"
    },
    {
        "line": 118,
        "fullcodeline": "rhostname[sizeof (rhostname) - 1] = '\\0';"
    },
    {
        "line": 126,
        "fullcodeline": "(remote_name[0] != '\\0' && vallen == len))"
    },
    {
        "line": 127,
        "fullcodeline": "strlcpy(rhostname, remote_name, sizeof (rhostname));"
    },
    {
        "line": 133,
        "fullcodeline": "if (!get_secret(esp->es_unit, esp->es_client.ea_name,"
    },
    {
        "line": 136,
        "fullcodeline": "eap_send_nak(esp, id, EAPT_SRP);"
    },
    {
        "line": 117,
        "fullcodeline": "BCOPY(inp + vallen, rhostname, sizeof (rhostname) - 1);"
    },
    {
        "line": 120,
        "fullcodeline": "BCOPY(inp + vallen, rhostname, len - vallen);"
    },
    {
        "line": 121,
        "fullcodeline": "rhostname[len - vallen] = '\\0';"
    }
]