[
    {
        "line": 10,
        "fullcodeline": "char secret[MAXSECRETLEN];"
    },
    {
        "line": 11,
        "fullcodeline": "char rhostname[256];"
    },
    {
        "line": 13,
        "fullcodeline": "u_char hash[MD5_SIGNATURE_SIZE];"
    },
    {
        "line": 34,
        "fullcodeline": "GETCHAR(typenum, inp);"
    },
    {
        "line": 35,
        "fullcodeline": "len--;"
    },
    {
        "line": 21,
        "fullcodeline": "if (esp->es_server.ea_id != id) {"
    },
    {
        "line": 29,
        "fullcodeline": "if (len <= 0) {"
    },
    {
        "line": 281,
        "fullcodeline": "if (esp->es_server.ea_timeout > 0) {"
    },
    {
        "line": 285,
        "fullcodeline": "if (esp->es_server.ea_state != eapBadAuth &&"
    },
    {
        "line": 22,
        "fullcodeline": "dbglog(\"EAP: discarding Response %d; expected ID %d\", id,"
    },
    {
        "line": 30,
        "fullcodeline": "error(\"EAP: empty Response message discarded\");"
    },
    {
        "line": 44,
        "fullcodeline": "info(\"EAP: unauthenticated peer name \\\"%.*q\\\"\", len, inp);"
    },
    {
        "line": 48,
        "fullcodeline": "esp->es_server.ea_peer = malloc(len + 1);"
    },
    {
        "line": 54,
        "fullcodeline": "BCOPY(inp, esp->es_server.ea_peer, len);"
    },
    {
        "line": 55,
        "fullcodeline": "esp->es_server.ea_peer[len] = '\\0';"
    },
    {
        "line": 56,
        "fullcodeline": "esp->es_server.ea_peerlen = len;"
    },
    {
        "line": 57,
        "fullcodeline": "eap_figure_next_state(esp, 0);"
    },
    {
        "line": 61,
        "fullcodeline": "dbglog(\"EAP unexpected Notification; response discarded\");"
    },
    {
        "line": 71,
        "fullcodeline": "GETCHAR(vallen, inp);"
    },
    {
        "line": 72,
        "fullcodeline": "len--;"
    },
    {
        "line": 122,
        "fullcodeline": "GETCHAR(vallen, inp);"
    },
    {
        "line": 123,
        "fullcodeline": "len--;"
    },
    {
        "line": 155,
        "fullcodeline": "MD5_Init(&mdContext);"
    },
    {
        "line": 156,
        "fullcodeline": "MD5_Update(&mdContext, &esp->es_server.ea_id, 1);"
    },
    {
        "line": 157,
        "fullcodeline": "MD5_Update(&mdContext, (u_char *)secret, secret_len);"
    },
    {
        "line": 158,
        "fullcodeline": "BZERO(secret, sizeof (secret));"
    },
    {
        "line": 159,
        "fullcodeline": "MD5_Update(&mdContext, esp->es_challenge, esp->es_challen);"
    },
    {
        "line": 160,
        "fullcodeline": "MD5_Final(hash, &mdContext);"
    },
    {
        "line": 165,
        "fullcodeline": "esp->es_server.ea_type = EAPT_MD5CHAP;"
    },
    {
        "line": 166,
        "fullcodeline": "eap_send_success(esp);"
    },
    {
        "line": 167,
        "fullcodeline": "eap_figure_next_state(esp, 0);"
    },
    {
        "line": 277,
        "fullcodeline": "error(\"EAP: unknown Response type %d; ignored\", typenum);"
    },
    {
        "line": 282,
        "fullcodeline": "UNTIMEOUT(eap_server_timeout, (void *)esp);"
    },
    {
        "line": 286,
        "fullcodeline": "esp->es_server.ea_state != eapOpen) {"
    },
    {
        "line": 287,
        "fullcodeline": "esp->es_server.ea_id++;"
    },
    {
        "line": 288,
        "fullcodeline": "eap_send_request(esp);"
    },
    {
        "line": 39,
        "fullcodeline": "if (esp->es_server.ea_state != eapIdentify) {"
    },
    {
        "line": 45,
        "fullcodeline": "if (esp->es_server.ea_peer != NULL &&"
    },
    {
        "line": 49,
        "fullcodeline": "if (esp->es_server.ea_peer == NULL) {"
    },
    {
        "line": 65,
        "fullcodeline": "if (len < 1) {"
    },
    {
        "line": 74,
        "fullcodeline": "if (!explicit_remote && esp->es_server.ea_state == eapIdentify){"
    },
    {
        "line": 112,
        "fullcodeline": "if (esp->es_server.ea_state != eapMD5Chall) {"
    },
    {
        "line": 117,
        "fullcodeline": "if (len < 1) {"
    },
    {
        "line": 124,
        "fullcodeline": "if (vallen != 16 || vallen > len) {"
    },
    {
        "line": 131,
        "fullcodeline": "if (vallen >= len + sizeof (rhostname)) {"
    },
    {
        "line": 141,
        "fullcodeline": "if (explicit_remote ||"
    },
    {
        "line": 149,
        "fullcodeline": "if (!get_secret(esp->es_unit, rhostname,"
    },
    {
        "line": 161,
        "fullcodeline": "if (BCMP(hash, inp, MD5_SIGNATURE_SIZE) != 0) {"
    },
    {
        "line": 168,
        "fullcodeline": "if (esp->es_rechallenge != 0)"
    },
    {
        "line": 40,
        "fullcodeline": "dbglog(\"EAP discarding unwanted Identify \\\"%.q\\\"\", len,"
    },
    {
        "line": 46,
        "fullcodeline": "esp->es_server.ea_peer != remote_name)"
    },
    {
        "line": 47,
        "fullcodeline": "free(esp->es_server.ea_peer);"
    },
    {
        "line": 50,
        "fullcodeline": "esp->es_server.ea_peerlen = 0;"
    },
    {
        "line": 51,
        "fullcodeline": "eap_figure_next_state(esp, 1);"
    },
    {
        "line": 66,
        "fullcodeline": "info(\"EAP: Nak Response with no suggested protocol\");"
    },
    {
        "line": 67,
        "fullcodeline": "eap_figure_next_state(esp, 1);"
    },
    {
        "line": 76,
        "fullcodeline": "eap_figure_next_state(esp, 1);"
    },
    {
        "line": 83,
        "fullcodeline": "esp->es_server.ea_state = eapIdentify;"
    },
    {
        "line": 84,
        "fullcodeline": "eap_figure_next_state(esp, 0);"
    },
    {
        "line": 88,
        "fullcodeline": "esp->es_server.ea_state = eapMD5Chall;"
    },
    {
        "line": 92,
        "fullcodeline": "dbglog(\"EAP: peer requesting unknown Type %d\", vallen);"
    },
    {
        "line": 113,
        "fullcodeline": "error(\"EAP: unexpected MD5-Response\");"
    },
    {
        "line": 114,
        "fullcodeline": "eap_figure_next_state(esp, 1);"
    },
    {
        "line": 118,
        "fullcodeline": "error(\"EAP: received MD5-Response with no data\");"
    },
    {
        "line": 119,
        "fullcodeline": "eap_figure_next_state(esp, 1);"
    },
    {
        "line": 125,
        "fullcodeline": "error(\"EAP: MD5-Response with bad length %d\", vallen);"
    },
    {
        "line": 126,
        "fullcodeline": "eap_figure_next_state(esp, 1);"
    },
    {
        "line": 132,
        "fullcodeline": "dbglog(\"EAP: trimming really long peer name down\");"
    },
    {
        "line": 133,
        "fullcodeline": "BCOPY(inp + vallen, rhostname, sizeof (rhostname) - 1);"
    },
    {
        "line": 134,
        "fullcodeline": "rhostname[sizeof (rhostname) - 1] = '\\0';"
    },
    {
        "line": 142,
        "fullcodeline": "(remote_name[0] != '\\0' && vallen == len))"
    },
    {
        "line": 143,
        "fullcodeline": "strlcpy(rhostname, remote_name, sizeof (rhostname));"
    },
    {
        "line": 151,
        "fullcodeline": "dbglog(\"EAP: no MD5 secret for auth of %q\", rhostname);"
    },
    {
        "line": 152,
        "fullcodeline": "eap_send_failure(esp);"
    },
    {
        "line": 162,
        "fullcodeline": "eap_send_failure(esp);"
    },
    {
        "line": 169,
        "fullcodeline": "TIMEOUT(eap_rechallenge, esp, esp->es_rechallenge);"
    },
    {
        "line": 136,
        "fullcodeline": "BCOPY(inp + vallen, rhostname, len - vallen);"
    },
    {
        "line": 137,
        "fullcodeline": "rhostname[len - vallen] = '\\0';"
    },
    {
        "line": 97,
        "fullcodeline": "esp->es_server.ea_state = eapMD5Chall;"
    },
    {
        "line": 101,
        "fullcodeline": "esp->es_server.ea_state = eapIdentify;"
    },
    {
        "line": 102,
        "fullcodeline": "eap_figure_next_state(esp, 0);"
    }
]