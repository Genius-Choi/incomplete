[
    {
        "line": 3,
        "fullcodeline": "L_END = L_EXTERNAL;"
    },
    {
        "line": 4,
        "fullcodeline": "bool isAllLaoded = true;"
    },
    {
        "line": 6,
        "fullcodeline": "_isx64 = sizeof(void *) == 8;"
    },
    {
        "line": 9,
        "fullcodeline": "generic_string localConfPath(_nppPath);"
    },
    {
        "line": 10,
        "fullcodeline": "pathAppend(localConfPath, localConfFile);"
    },
    {
        "line": 13,
        "fullcodeline": "_isLocal = (PathFileExists(localConfPath.c_str()) == TRUE);"
    },
    {
        "line": 32,
        "fullcodeline": "_pluginRootDir = _nppPath;"
    },
    {
        "line": 33,
        "fullcodeline": "pathAppend(_pluginRootDir, TEXT(\"plugins\"));"
    },
    {
        "line": 65,
        "fullcodeline": "_pluginConfDir = _pluginRootDir; // for plugin list home"
    },
    {
        "line": 66,
        "fullcodeline": "pathAppend(_pluginConfDir, TEXT(\"Config\"));"
    },
    {
        "line": 73,
        "fullcodeline": "_sessionPath = _userPath; // Session stock the absolute file path, it should never be on cloud"
    },
    {
        "line": 76,
        "fullcodeline": "generic_string cloudChoicePath{_userPath};"
    },
    {
        "line": 77,
        "fullcodeline": "cloudChoicePath += TEXT(\"\\\\cloud\\\\choice\");"
    },
    {
        "line": 121,
        "fullcodeline": "HMODULE hUser32 = ::GetModuleHandle(TEXT(\"User32\"));"
    },
    {
        "line": 128,
        "fullcodeline": "_hUXTheme = ::LoadLibraryEx(TEXT(\"uxtheme.dll\"), nullptr, LOAD_LIBRARY_SEARCH_SYSTEM32);"
    },
    {
        "line": 135,
        "fullcodeline": "generic_string langs_xml_path(_userPath);"
    },
    {
        "line": 136,
        "fullcodeline": "pathAppend(langs_xml_path, TEXT(\"langs.xml\"));"
    },
    {
        "line": 138,
        "fullcodeline": "BOOL doRecover = FALSE;"
    },
    {
        "line": 172,
        "fullcodeline": "_pXmlDoc = new TiXmlDocument(langs_xml_path);"
    },
    {
        "line": 175,
        "fullcodeline": "bool loadOkay = _pXmlDoc->LoadFile();"
    },
    {
        "line": 201,
        "fullcodeline": "generic_string configPath(_userPath);"
    },
    {
        "line": 202,
        "fullcodeline": "pathAppend(configPath, TEXT(\"config.xml\"));"
    },
    {
        "line": 204,
        "fullcodeline": "generic_string srcConfigPath(_nppPath);"
    },
    {
        "line": 205,
        "fullcodeline": "pathAppend(srcConfigPath, TEXT(\"config.model.xml\"));"
    },
    {
        "line": 210,
        "fullcodeline": "_pXmlUserDoc = new TiXmlDocument(configPath);"
    },
    {
        "line": 211,
        "fullcodeline": "loadOkay = _pXmlUserDoc->LoadFile();"
    },
    {
        "line": 227,
        "fullcodeline": "_stylerPath = _userPath;"
    },
    {
        "line": 228,
        "fullcodeline": "pathAppend(_stylerPath, TEXT(\"stylers.xml\"));"
    },
    {
        "line": 241,
        "fullcodeline": "_pXmlUserStylerDoc = new TiXmlDocument(_nppGUI._themeName.c_str());"
    },
    {
        "line": 243,
        "fullcodeline": "loadOkay = _pXmlUserStylerDoc->LoadFile();"
    },
    {
        "line": 267,
        "fullcodeline": "_themeSwitcher._stylesXmlPath = _stylerPath;"
    },
    {
        "line": 269,
        "fullcodeline": "_themeSwitcher.addDefaultThemeFromXml(_stylerPath);"
    },
    {
        "line": 274,
        "fullcodeline": "_userDefineLangsFolderPath = _userDefineLangPath = _userPath;"
    },
    {
        "line": 275,
        "fullcodeline": "pathAppend(_userDefineLangPath, TEXT(\"userDefineLang.xml\"));"
    },
    {
        "line": 276,
        "fullcodeline": "pathAppend(_userDefineLangsFolderPath, TEXT(\"userDefineLangs\"));"
    },
    {
        "line": 278,
        "fullcodeline": "std::vector<generic_string> udlFiles;"
    },
    {
        "line": 279,
        "fullcodeline": "getFilesInFolder(udlFiles, TEXT(\"*.xml\"), _userDefineLangsFolderPath);"
    },
    {
        "line": 281,
        "fullcodeline": "_pXmlUserLangDoc = new TiXmlDocument(_userDefineLangPath);"
    },
    {
        "line": 282,
        "fullcodeline": "loadOkay = _pXmlUserLangDoc->LoadFile();"
    },
    {
        "line": 319,
        "fullcodeline": "nativeLangPath = _userPath;"
    },
    {
        "line": 320,
        "fullcodeline": "pathAppend(nativeLangPath, TEXT(\"nativeLang.xml\"));"
    },
    {
        "line": 323,
        "fullcodeline": "_localizationSwitcher._nativeLangPath = nativeLangPath;"
    },
    {
        "line": 342,
        "fullcodeline": "_pXmlNativeLangDocA = new TiXmlDocumentA();"
    },
    {
        "line": 344,
        "fullcodeline": "loadOkay = _pXmlNativeLangDocA->LoadUnicodeFilePath(nativeLangPath.c_str());"
    },
    {
        "line": 355,
        "fullcodeline": "generic_string toolbarIconsPath(_userPath);"
    },
    {
        "line": 356,
        "fullcodeline": "pathAppend(toolbarIconsPath, TEXT(\"toolbarIcons.xml\"));"
    },
    {
        "line": 358,
        "fullcodeline": "_pXmlToolIconsDoc = new TiXmlDocument(toolbarIconsPath);"
    },
    {
        "line": 359,
        "fullcodeline": "loadOkay = _pXmlToolIconsDoc->LoadFile();"
    },
    {
        "line": 370,
        "fullcodeline": "_shortcutsPath = _userPath;"
    },
    {
        "line": 371,
        "fullcodeline": "pathAppend(_shortcutsPath, TEXT(\"shortcuts.xml\"));"
    },
    {
        "line": 381,
        "fullcodeline": "_pXmlShortcutDoc = new TiXmlDocument(_shortcutsPath);"
    },
    {
        "line": 382,
        "fullcodeline": "loadOkay = _pXmlShortcutDoc->LoadFile();"
    },
    {
        "line": 403,
        "fullcodeline": "_contextMenuPath = _userPath;"
    },
    {
        "line": 404,
        "fullcodeline": "pathAppend(_contextMenuPath, TEXT(\"contextMenu.xml\"));"
    },
    {
        "line": 414,
        "fullcodeline": "_pXmlContextMenuDocA = new TiXmlDocumentA();"
    },
    {
        "line": 415,
        "fullcodeline": "loadOkay = _pXmlContextMenuDocA->LoadUnicodeFilePath(_contextMenuPath.c_str());"
    },
    {
        "line": 427,
        "fullcodeline": "pathAppend(_sessionPath, TEXT(\"session.xml\"));"
    },
    {
        "line": 430,
        "fullcodeline": "const NppGUI & nppGUI = (NppParameters::getInstance()).getNppGUI();"
    },
    {
        "line": 453,
        "fullcodeline": "generic_string enableSelectFgColorPath = _userPath;"
    },
    {
        "line": 454,
        "fullcodeline": "pathAppend(enableSelectFgColorPath, TEXT(\"enableSelectFgColor.xml\"));"
    },
    {
        "line": 464,
        "fullcodeline": "filePath = _nppPath;"
    },
    {
        "line": 465,
        "fullcodeline": "issueFileName = nppLogNetworkDriveIssue;"
    },
    {
        "line": 466,
        "fullcodeline": "issueFileName += TEXT(\".xml\");"
    },
    {
        "line": 467,
        "fullcodeline": "pathAppend(filePath, issueFileName);"
    },
    {
        "line": 468,
        "fullcodeline": "_doNppLogNetworkDriveIssue = (PathFileExists(filePath.c_str()) == TRUE);"
    },
    {
        "line": 476,
        "fullcodeline": "filePath = _nppPath;"
    },
    {
        "line": 477,
        "fullcodeline": "issueFileName = nppLogNulContentCorruptionIssue;"
    },
    {
        "line": 478,
        "fullcodeline": "issueFileName += TEXT(\".xml\");"
    },
    {
        "line": 479,
        "fullcodeline": "pathAppend(filePath, issueFileName);"
    },
    {
        "line": 480,
        "fullcodeline": "_doNppLogNulContentCorruptionIssue = (PathFileExists(filePath.c_str()) == TRUE);"
    },
    {
        "line": 68,
        "fullcodeline": "if (!PathFileExists(nppPluginRootParent.c_str()))"
    },
    {
        "line": 70,
        "fullcodeline": "if (!PathFileExists(_pluginRootDir.c_str()))"
    },
    {
        "line": 82,
        "fullcodeline": "if (::PathFileExists(cloudChoicePath.c_str()))"
    },
    {
        "line": 100,
        "fullcodeline": "if (!_cmdSettingsDir.empty())"
    },
    {
        "line": 139,
        "fullcodeline": "if (::PathFileExists(langs_xml_path.c_str()))"
    },
    {
        "line": 207,
        "fullcodeline": "if (!::PathFileExists(configPath.c_str()))"
    },
    {
        "line": 230,
        "fullcodeline": "if (!PathFileExists(_stylerPath.c_str()))"
    },
    {
        "line": 238,
        "fullcodeline": "if (_nppGUI._themeName.empty() || (!PathFileExists(_nppGUI._themeName.c_str())))"
    },
    {
        "line": 325,
        "fullcodeline": "if (!_startWithLocFileName.empty()) // localization argument detected, use user wished localization"
    },
    {
        "line": 373,
        "fullcodeline": "if (!PathFileExists(_shortcutsPath.c_str()))"
    },
    {
        "line": 406,
        "fullcodeline": "if (!PathFileExists(_contextMenuPath.c_str()))"
    },
    {
        "line": 416,
        "fullcodeline": "if (!loadOkay)"
    },
    {
        "line": 456,
        "fullcodeline": "if (PathFileExists(enableSelectFgColorPath.c_str()))"
    },
    {
        "line": 469,
        "fullcodeline": "if (!_doNppLogNetworkDriveIssue)"
    },
    {
        "line": 481,
        "fullcodeline": "if (!_doNppLogNulContentCorruptionIssue)"
    },
    {
        "line": 41,
        "fullcodeline": "_userPath = nppPluginRootParent = _nppPath;"
    },
    {
        "line": 42,
        "fullcodeline": "_userPluginConfDir = _pluginRootDir;"
    },
    {
        "line": 43,
        "fullcodeline": "pathAppend(_userPluginConfDir, TEXT(\"Config\"));"
    },
    {
        "line": 69,
        "fullcodeline": "::CreateDirectory(nppPluginRootParent.c_str(), NULL);"
    },
    {
        "line": 71,
        "fullcodeline": "::CreateDirectory(_pluginRootDir.c_str(), NULL);"
    },
    {
        "line": 85,
        "fullcodeline": "std::string cloudChoiceStr = getFileContent(cloudChoicePath.c_str());"
    },
    {
        "line": 86,
        "fullcodeline": "WcharMbcsConvertor& wmc = WcharMbcsConvertor::getInstance();"
    },
    {
        "line": 87,
        "fullcodeline": "std::wstring cloudChoiceStrW = wmc.char2wchar(cloudChoiceStr.c_str(), SC_CP_UTF8);"
    },
    {
        "line": 123,
        "fullcodeline": "_transparentFuncAddr = (WNDPROC)::GetProcAddress(hUser32, \"SetLayeredWindowAttributes\");"
    },
    {
        "line": 130,
        "fullcodeline": "_enableThemeDialogTextureFuncAddr = (WNDPROC)::GetProcAddress(_hUXTheme, \"EnableThemeDialogTexture\");"
    },
    {
        "line": 167,
        "fullcodeline": "generic_string srcLangsPath(_nppPath);"
    },
    {
        "line": 168,
        "fullcodeline": "pathAppend(srcLangsPath, TEXT(\"langs.model.xml\"));"
    },
    {
        "line": 169,
        "fullcodeline": "::CopyFile(srcLangsPath.c_str(), langs_xml_path.c_str(), FALSE);"
    },
    {
        "line": 191,
        "fullcodeline": "delete _pXmlDoc;"
    },
    {
        "line": 192,
        "fullcodeline": "_pXmlDoc = nullptr;"
    },
    {
        "line": 193,
        "fullcodeline": "isAllLaoded = false;"
    },
    {
        "line": 208,
        "fullcodeline": "::CopyFile(srcConfigPath.c_str(), configPath.c_str(), FALSE);"
    },
    {
        "line": 215,
        "fullcodeline": "TiXmlDeclaration* decl = new TiXmlDeclaration(TEXT(\"1.0\"), TEXT(\"UTF-8\"), TEXT(\"\"));"
    },
    {
        "line": 216,
        "fullcodeline": "_pXmlUserDoc->LinkEndChild(decl);"
    },
    {
        "line": 232,
        "fullcodeline": "generic_string srcStylersPath(_nppPath);"
    },
    {
        "line": 233,
        "fullcodeline": "pathAppend(srcStylersPath, TEXT(\"stylers.model.xml\"));"
    },
    {
        "line": 235,
        "fullcodeline": "::CopyFile(srcStylersPath.c_str(), _stylerPath.c_str(), TRUE);"
    },
    {
        "line": 239,
        "fullcodeline": "_nppGUI._themeName.assign(_stylerPath);"
    },
    {
        "line": 260,
        "fullcodeline": "delete _pXmlUserStylerDoc;"
    },
    {
        "line": 261,
        "fullcodeline": "_pXmlUserStylerDoc = NULL;"
    },
    {
        "line": 262,
        "fullcodeline": "isAllLaoded = false;"
    },
    {
        "line": 285,
        "fullcodeline": "delete _pXmlUserLangDoc;"
    },
    {
        "line": 286,
        "fullcodeline": "_pXmlUserLangDoc = nullptr;"
    },
    {
        "line": 287,
        "fullcodeline": "isAllLaoded = false;"
    },
    {
        "line": 298,
        "fullcodeline": "auto udlDoc = new TiXmlDocument(i);"
    },
    {
        "line": 299,
        "fullcodeline": "loadOkay = udlDoc->LoadFile();"
    },
    {
        "line": 328,
        "fullcodeline": "nativeLangPath = _nppPath;"
    },
    {
        "line": 329,
        "fullcodeline": "pathAppend(nativeLangPath, TEXT(\"localization\\\\\"));"
    },
    {
        "line": 330,
        "fullcodeline": "pathAppend(nativeLangPath, _startWithLocFileName);"
    },
    {
        "line": 347,
        "fullcodeline": "delete _pXmlNativeLangDocA;"
    },
    {
        "line": 348,
        "fullcodeline": "_pXmlNativeLangDocA = nullptr;"
    },
    {
        "line": 349,
        "fullcodeline": "isAllLaoded = false;"
    },
    {
        "line": 362,
        "fullcodeline": "delete _pXmlToolIconsDoc;"
    },
    {
        "line": 363,
        "fullcodeline": "_pXmlToolIconsDoc = nullptr;"
    },
    {
        "line": 364,
        "fullcodeline": "isAllLaoded = false;"
    },
    {
        "line": 375,
        "fullcodeline": "generic_string srcShortcutsPath(_nppPath);"
    },
    {
        "line": 376,
        "fullcodeline": "pathAppend(srcShortcutsPath, TEXT(\"shortcuts.xml\"));"
    },
    {
        "line": 378,
        "fullcodeline": "::CopyFile(srcShortcutsPath.c_str(), _shortcutsPath.c_str(), TRUE);"
    },
    {
        "line": 385,
        "fullcodeline": "delete _pXmlShortcutDoc;"
    },
    {
        "line": 386,
        "fullcodeline": "_pXmlShortcutDoc = nullptr;"
    },
    {
        "line": 387,
        "fullcodeline": "isAllLaoded = false;"
    },
    {
        "line": 408,
        "fullcodeline": "generic_string srcContextMenuPath(_nppPath);"
    },
    {
        "line": 409,
        "fullcodeline": "pathAppend(srcContextMenuPath, TEXT(\"contextMenu.xml\"));"
    },
    {
        "line": 411,
        "fullcodeline": "::CopyFile(srcContextMenuPath.c_str(), _contextMenuPath.c_str(), TRUE);"
    },
    {
        "line": 418,
        "fullcodeline": "delete _pXmlContextMenuDocA;"
    },
    {
        "line": 419,
        "fullcodeline": "_pXmlContextMenuDocA = nullptr;"
    },
    {
        "line": 420,
        "fullcodeline": "isAllLaoded = false;"
    },
    {
        "line": 433,
        "fullcodeline": "TiXmlDocument* pXmlSessionDoc = new TiXmlDocument(_sessionPath);"
    },
    {
        "line": 435,
        "fullcodeline": "loadOkay = pXmlSessionDoc->LoadFile();"
    },
    {
        "line": 441,
        "fullcodeline": "delete pXmlSessionDoc;"
    },
    {
        "line": 458,
        "fullcodeline": "_isSelectFgColorEnabled = true;"
    },
    {
        "line": 471,
        "fullcodeline": "filePath2 = _userPath;"
    },
    {
        "line": 472,
        "fullcodeline": "pathAppend(filePath2, issueFileName);"
    },
    {
        "line": 473,
        "fullcodeline": "_doNppLogNetworkDriveIssue = (PathFileExists(filePath2.c_str()) == TRUE);"
    },
    {
        "line": 483,
        "fullcodeline": "filePath2 = _userPath;"
    },
    {
        "line": 484,
        "fullcodeline": "pathAppend(filePath2, issueFileName);"
    },
    {
        "line": 485,
        "fullcodeline": "_doNppLogNulContentCorruptionIssue = (PathFileExists(filePath2.c_str()) == TRUE);"
    },
    {
        "line": 20,
        "fullcodeline": "if (_winVersion >= WV_VISTA)"
    },
    {
        "line": 47,
        "fullcodeline": "_userPath = getSpecialFolderLocation(CSIDL_APPDATA);"
    },
    {
        "line": 49,
        "fullcodeline": "pathAppend(_userPath, TEXT(\"Notepad++\"));"
    },
    {
        "line": 53,
        "fullcodeline": "_appdataNppDir = _userPluginConfDir = _userPath;"
    },
    {
        "line": 54,
        "fullcodeline": "pathAppend(_userPluginConfDir, TEXT(\"plugins\"));"
    },
    {
        "line": 57,
        "fullcodeline": "pathAppend(_userPluginConfDir, TEXT(\"Config\"));"
    },
    {
        "line": 62,
        "fullcodeline": "setElevationRequired(true);"
    },
    {
        "line": 89,
        "fullcodeline": "if (!cloudChoiceStrW.empty() && ::PathFileExists(cloudChoiceStrW.c_str()))"
    },
    {
        "line": 102,
        "fullcodeline": "if (!::PathIsDirectory(_cmdSettingsDir.c_str()))"
    },
    {
        "line": 143,
        "fullcodeline": "if (GetFileAttributesEx(langs_xml_path.c_str(), GetFileExInfoStandard, &attributes) != 0)"
    },
    {
        "line": 163,
        "fullcodeline": "doRecover = true;"
    },
    {
        "line": 196,
        "fullcodeline": "getLangKeywordsFromXmlTree();"
    },
    {
        "line": 220,
        "fullcodeline": "getUserParametersFromXmlTree();"
    },
    {
        "line": 265,
        "fullcodeline": "getUserStylersFromXmlTree();"
    },
    {
        "line": 291,
        "fullcodeline": "auto r = addUserDefineLangsFromXmlTree(_pXmlUserLangDoc);"
    },
    {
        "line": 391,
        "fullcodeline": "getShortcutsFromXmlTree();"
    },
    {
        "line": 392,
        "fullcodeline": "getMacrosFromXmlTree();"
    },
    {
        "line": 393,
        "fullcodeline": "getUserCmdsFromXmlTree();"
    },
    {
        "line": 397,
        "fullcodeline": "getScintKeysFromXmlTree();"
    },
    {
        "line": 436,
        "fullcodeline": "if (!loadOkay)"
    },
    {
        "line": 443,
        "fullcodeline": "for (size_t i = 0, len = _pXmlExternalLexerDoc.size() ; i < len ; ++i)"
    },
    {
        "line": 22,
        "fullcodeline": "generic_string progPath = getSpecialFolderLocation(CSIDL_PROGRAM_FILES);"
    },
    {
        "line": 23,
        "fullcodeline": "TCHAR nppDirLocation[MAX_PATH];"
    },
    {
        "line": 24,
        "fullcodeline": "wcscpy_s(nppDirLocation, _nppPath.c_str());"
    },
    {
        "line": 25,
        "fullcodeline": "::PathRemoveFileSpec(nppDirLocation);"
    },
    {
        "line": 50,
        "fullcodeline": "if (!PathFileExists(_userPath.c_str()))"
    },
    {
        "line": 58,
        "fullcodeline": "if (!PathFileExists(_userPluginConfDir.c_str()))"
    },
    {
        "line": 91,
        "fullcodeline": "_userPath = cloudChoiceStrW;"
    },
    {
        "line": 92,
        "fullcodeline": "_nppGUI._cloudPath = cloudChoiceStrW;"
    },
    {
        "line": 93,
        "fullcodeline": "_initialCloudChoice = _nppGUI._cloudPath;"
    },
    {
        "line": 106,
        "fullcodeline": "generic_string errMsg = TEXT(\"The given path\\r\");"
    },
    {
        "line": 107,
        "fullcodeline": "errMsg += _cmdSettingsDir;"
    },
    {
        "line": 108,
        "fullcodeline": "errMsg += TEXT(\"\\nvia command line \\\"-settingsDir=\\\" is not a valid directory.\\rThis argument will be ignored.\");"
    },
    {
        "line": 109,
        "fullcodeline": "::MessageBox(NULL, errMsg.c_str(), TEXT(\"Invalid directory\"), MB_OK);"
    },
    {
        "line": 180,
        "fullcodeline": "_pNativeLangSpeaker->messageBox(\"LoadLangsFailedFinal\","
    },
    {
        "line": 248,
        "fullcodeline": "_pNativeLangSpeaker->messageBox(\"LoadStylersFailed\","
    },
    {
        "line": 292,
        "fullcodeline": "if (r.second - r.first > 0)"
    },
    {
        "line": 302,
        "fullcodeline": "delete udlDoc;"
    },
    {
        "line": 334,
        "fullcodeline": "if (!PathFileExists(nativeLangPath.c_str()))"
    },
    {
        "line": 437,
        "fullcodeline": "isAllLaoded = false;"
    },
    {
        "line": 27,
        "fullcodeline": "if  (progPath == nppDirLocation)"
    },
    {
        "line": 51,
        "fullcodeline": "::CreateDirectory(_userPath.c_str(), NULL);"
    },
    {
        "line": 55,
        "fullcodeline": "if (!PathFileExists(_userPluginConfDir.c_str()))"
    },
    {
        "line": 56,
        "fullcodeline": "::CreateDirectory(_userPluginConfDir.c_str(), NULL);"
    },
    {
        "line": 59,
        "fullcodeline": "::CreateDirectory(_userPluginConfDir.c_str(), NULL);"
    },
    {
        "line": 113,
        "fullcodeline": "_userPath = _cmdSettingsDir;"
    },
    {
        "line": 114,
        "fullcodeline": "_sessionPath = _userPath; // reset session path"
    },
    {
        "line": 145,
        "fullcodeline": "if (attributes.nFileSizeLow == 0 && attributes.nFileSizeHigh == 0)"
    },
    {
        "line": 182,
        "fullcodeline": "TEXT(\"Load langs.xml failed!\"),"
    },
    {
        "line": 183,
        "fullcodeline": "TEXT(\"Configurator\"),"
    },
    {
        "line": 188,
        "fullcodeline": "::MessageBox(NULL, TEXT(\"Load langs.xml failed!\"), TEXT(\"Configurator\"), MB_OK);"
    },
    {
        "line": 250,
        "fullcodeline": "TEXT(\"Load \\\"$STR_REPLACE$\\\" failed!\"),"
    },
    {
        "line": 251,
        "fullcodeline": "TEXT(\"Load stylers.xml failed\"),"
    },
    {
        "line": 254,
        "fullcodeline": "_stylerPath.c_str());"
    },
    {
        "line": 258,
        "fullcodeline": "::MessageBox(NULL, _stylerPath.c_str(), TEXT(\"Load stylers.xml failed\"), MB_OK);"
    },
    {
        "line": 293,
        "fullcodeline": "_pXmlUserLangsDoc.push_back(UdlXmlFileState(_pXmlUserLangDoc, false, r));"
    },
    {
        "line": 306,
        "fullcodeline": "auto r = addUserDefineLangsFromXmlTree(udlDoc);"
    },
    {
        "line": 336,
        "fullcodeline": "nativeLangPath = _nppPath;"
    },
    {
        "line": 337,
        "fullcodeline": "pathAppend(nativeLangPath, TEXT(\"nativeLang.xml\"));"
    },
    {
        "line": 439,
        "fullcodeline": "getSessionFromXmlTree(pXmlSessionDoc, _session);"
    },
    {
        "line": 445,
        "fullcodeline": "delete _pXmlExternalLexerDoc[i];"
    },
    {
        "line": 28,
        "fullcodeline": "_isLocal = false;"
    },
    {
        "line": 307,
        "fullcodeline": "if (r.second - r.first > 0)"
    },
    {
        "line": 308,
        "fullcodeline": "_pXmlUserLangsDoc.push_back(UdlXmlFileState(udlDoc, false, r));"
    },
    {
        "line": 149,
        "fullcodeline": "doRecover = _pNativeLangSpeaker->messageBox(\"LoadLangsFailed\","
    },
    {
        "line": 157,
        "fullcodeline": "doRecover = ::MessageBox(NULL, TEXT(\"Load langs.xml failed!\\rDo you want to recover your langs.xml?\"), TEXT(\"Configurator\"), MB_YESNO);"
    },
    {
        "line": 151,
        "fullcodeline": "TEXT(\"Load langs.xml failed!\\rDo you want to recover your langs.xml?\"),"
    },
    {
        "line": 152,
        "fullcodeline": "TEXT(\"Configurator\"),"
    }
]