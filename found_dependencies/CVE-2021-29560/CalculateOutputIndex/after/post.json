[
    {
        "line": 6,
        "fullcodeline": "const RowPartitionTensor row_partition_tensor ="
    },
    {
        "line": 8,
        "fullcodeline": "auto partition_type = GetRowPartitionTypeByDimension(dimension);"
    },
    {
        "line": 7,
        "fullcodeline": "GetRowPartitionTensor(context, dimension);"
    },
    {
        "line": 11,
        "fullcodeline": "CalculateOutputIndexValueRowID("
    },
    {
        "line": 22,
        "fullcodeline": "CalculateOutputIndexRowSplit("
    },
    {
        "line": 14,
        "fullcodeline": "return tensorflow::Status::OK();"
    },
    {
        "line": 16,
        "fullcodeline": "if (row_partition_tensor.size() - 1 > parent_output_index.size()) {"
    },
    {
        "line": 25,
        "fullcodeline": "return tensorflow::Status::OK();"
    },
    {
        "line": 27,
        "fullcodeline": "return errors::InvalidArgument("
    },
    {
        "line": 29,
        "fullcodeline": "RowPartitionTypeToString(partition_type));"
    },
    {
        "line": 17,
        "fullcodeline": "return errors::InvalidArgument("
    },
    {
        "line": 19,
        "fullcodeline": "row_partition_tensor.size() - 1, \" > \","
    },
    {
        "line": 20,
        "fullcodeline": "parent_output_index.size());"
    }
]