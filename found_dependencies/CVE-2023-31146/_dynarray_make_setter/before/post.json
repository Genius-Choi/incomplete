[
    {
        "line": 2,
        "fullcodeline": "assert isinstance(src.typ, DArrayT)"
    },
    {
        "line": 3,
        "fullcodeline": "assert isinstance(dst.typ, DArrayT)"
    },
    {
        "line": 5,
        "fullcodeline": "if src.value == \"~empty\":"
    },
    {
        "line": 8,
        "fullcodeline": "if src.value == \"multi\":"
    },
    {
        "line": 29,
        "fullcodeline": "with src.cache_when_complex(\"darray_src\") as (b1, src):"
    },
    {
        "line": 9,
        "fullcodeline": "ret = [\"seq\"]"
    },
    {
        "line": 13,
        "fullcodeline": "store_length = STORE(dst, len(src.args))"
    },
    {
        "line": 14,
        "fullcodeline": "ann = None"
    },
    {
        "line": 17,
        "fullcodeline": "store_length = IRnode.from_list(store_length, annotation=ann)"
    },
    {
        "line": 18,
        "fullcodeline": "ret.append(store_length)"
    },
    {
        "line": 20,
        "fullcodeline": "n_items = len(src.args)"
    },
    {
        "line": 6,
        "fullcodeline": "return IRnode.from_list(STORE(dst, 0))"
    },
    {
        "line": 15,
        "fullcodeline": "if src.annotation is not None:"
    },
    {
        "line": 21,
        "fullcodeline": "for i in range(n_items):"
    },
    {
        "line": 32,
        "fullcodeline": "should_loop = src.encoding == Encoding.ABI and src.typ.value_type.abi_type.is_dynamic()"
    },
    {
        "line": 35,
        "fullcodeline": "should_loop |= needs_clamp(src.typ.value_type, src.encoding)"
    },
    {
        "line": 45,
        "fullcodeline": "should_loop |= src.typ.value_type.abi_type.is_dynamic()"
    },
    {
        "line": 16,
        "fullcodeline": "ann = f\"len({src.annotation})\""
    },
    {
        "line": 47,
        "fullcodeline": "with get_dyn_array_count(src).cache_when_complex(\"darray_count\") as (b2, count):"
    },
    {
        "line": 22,
        "fullcodeline": "k = IRnode.from_list(i, typ=UINT256_T)"
    },
    {
        "line": 23,
        "fullcodeline": "dst_i = get_element_ptr(dst, k, array_bounds_check=False)"
    },
    {
        "line": 24,
        "fullcodeline": "src_i = get_element_ptr(src, k, array_bounds_check=False)"
    },
    {
        "line": 25,
        "fullcodeline": "ret.append(make_setter(dst_i, src_i))"
    },
    {
        "line": 48,
        "fullcodeline": "ret = [\"seq\"]"
    },
    {
        "line": 50,
        "fullcodeline": "ret.append(STORE(dst, count))"
    },
    {
        "line": 73,
        "fullcodeline": "return b1.resolve(b2.resolve(ret))"
    },
    {
        "line": 53,
        "fullcodeline": "i = IRnode.from_list(_freshname(\"copy_darray_ix\"), typ=UINT256_T)"
    },
    {
        "line": 55,
        "fullcodeline": "loop_body = make_setter("
    },
    {
        "line": 59,
        "fullcodeline": "loop_body.annotation = f\"{dst}[i] = {src}[i]\""
    },
    {
        "line": 61,
        "fullcodeline": "ret.append([\"repeat\", i, 0, count, src.typ.count, loop_body])"
    },
    {
        "line": 66,
        "fullcodeline": "n_bytes = _mul(count, element_size)"
    },
    {
        "line": 67,
        "fullcodeline": "max_bytes = src.typ.count * element_size"
    },
    {
        "line": 69,
        "fullcodeline": "src_ = dynarray_data_ptr(src)"
    },
    {
        "line": 70,
        "fullcodeline": "dst_ = dynarray_data_ptr(dst)"
    },
    {
        "line": 71,
        "fullcodeline": "ret.append(copy_bytes(dst_, src_, n_bytes, max_bytes))"
    },
    {
        "line": 56,
        "fullcodeline": "get_element_ptr(dst, i, array_bounds_check=False),"
    },
    {
        "line": 57,
        "fullcodeline": "get_element_ptr(src, i, array_bounds_check=False),"
    }
]