[
    {
        "line": 2,
        "fullcodeline": "assert isinstance(darray_node.typ, DArrayT)"
    },
    {
        "line": 4,
        "fullcodeline": "assert darray_node.typ.count > 0, \"jerk boy u r out\""
    },
    {
        "line": 6,
        "fullcodeline": "ret = [\"seq\"]"
    },
    {
        "line": 7,
        "fullcodeline": "with darray_node.cache_when_complex(\"darray\") as (b1, darray_node):"
    },
    {
        "line": 8,
        "fullcodeline": "len_ = get_dyn_array_count(darray_node)"
    },
    {
        "line": 9,
        "fullcodeline": "with len_.cache_when_complex(\"old_darray_len\") as (b2, len_):"
    },
    {
        "line": 10,
        "fullcodeline": "assertion = [\"assert\", [\"lt\", len_, darray_node.typ.count]]"
    },
    {
        "line": 11,
        "fullcodeline": "ret.append(IRnode.from_list(assertion, error_msg=f\"{darray_node.typ} bounds check\"))"
    },
    {
        "line": 14,
        "fullcodeline": "ret.append("
    },
    {
        "line": 19,
        "fullcodeline": "ret.append(STORE(darray_node, [\"add\", len_, 1]))"
    },
    {
        "line": 15,
        "fullcodeline": "make_setter(get_element_ptr(darray_node, len_, array_bounds_check=False), elem_node)"
    },
    {
        "line": 20,
        "fullcodeline": "return IRnode.from_list(b1.resolve(b2.resolve(ret)))"
    }
]