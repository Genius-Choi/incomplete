[
    {
        "line": 2,
        "fullcodeline": "enforce_has_field(tensor, data_type);"
    },
    {
        "line": 7,
        "fullcodeline": "int num_value_fields = 0;"
    },
    {
        "line": 9,
        "fullcodeline": "const char* value_field = nullptr;"
    },
    {
        "line": 18,
        "fullcodeline": "check_data_field(float_data);"
    },
    {
        "line": 19,
        "fullcodeline": "check_data_field(int32_data);"
    },
    {
        "line": 20,
        "fullcodeline": "check_data_field(string_data);"
    },
    {
        "line": 21,
        "fullcodeline": "check_data_field(int64_data);"
    },
    {
        "line": 22,
        "fullcodeline": "check_data_field(raw_data);"
    },
    {
        "line": 23,
        "fullcodeline": "check_data_field(double_data);"
    },
    {
        "line": 24,
        "fullcodeline": "check_data_field(uint64_data);"
    },
    {
        "line": 28,
        "fullcodeline": "bool stored_externally = tensor.has_data_location() && tensor.data_location() == TensorProto::EXTERNAL;"
    },
    {
        "line": 50,
        "fullcodeline": "int64_t nelem = 1;"
    },
    {
        "line": 3,
        "fullcodeline": "if (tensor.data_type() == TensorProto::UNDEFINED) {"
    },
    {
        "line": 4,
        "fullcodeline": "fail_check(\"setting data_type field (tensor name: \", tensor.name(), \") to UNDEFINED is not allowed\");"
    },
    {
        "line": 38,
        "fullcodeline": "bool has_location = false;"
    },
    {
        "line": 52,
        "fullcodeline": "nelem *= x;"
    },
    {
        "line": 54,
        "fullcodeline": "if (nelem == 0 && num_value_fields != 0) {"
    },
    {
        "line": 57,
        "fullcodeline": "if (nelem != 0 && num_value_fields != 1) {"
    },
    {
        "line": 30,
        "fullcodeline": "if (num_value_fields != 0) {"
    },
    {
        "line": 45,
        "fullcodeline": "if (!has_location) {"
    },
    {
        "line": 55,
        "fullcodeline": "fail_check(\"TensorProto (tensor name: \", tensor.name(), \") is 0-element but contains data!\");"
    },
    {
        "line": 58,
        "fullcodeline": "fail_check(\"TensorProto (tensor name: \", tensor.name(), \") should contain one and only one value field.\");"
    },
    {
        "line": 31,
        "fullcodeline": "fail_check("
    },
    {
        "line": 46,
        "fullcodeline": "fail_check(\"TensorProto ( tensor name: \", tensor.name(), \") is stored externally but doesn't have a location.\");"
    },
    {
        "line": 61,
        "fullcodeline": "if (tensor.data_type() == TensorProto::STRING) {"
    },
    {
        "line": 78,
        "fullcodeline": "switch (tensor.data_type()) {"
    },
    {
        "line": 33,
        "fullcodeline": "tensor.name(),"
    },
    {
        "line": 40,
        "fullcodeline": "if (entry.has_key() && entry.has_value() && entry.key() == \"location\") {"
    },
    {
        "line": 62,
        "fullcodeline": "fail_check(\"STRING data (tensor name: \", tensor.name(), \") should not be stored in raw_data field\");"
    },
    {
        "line": 41,
        "fullcodeline": "has_location = true;"
    },
    {
        "line": 42,
        "fullcodeline": "resolve_external_data_location(ctx.get_model_dir(), entry.value(), tensor.name());"
    },
    {
        "line": 120,
        "fullcodeline": "fail_check(\"Unrecognized data_type (tensor name: \", tensor.name(), \"): \", tensor.data_type());"
    },
    {
        "line": 81,
        "fullcodeline": "check_field(float_data);"
    },
    {
        "line": 86,
        "fullcodeline": "check_field(double_data);"
    },
    {
        "line": 103,
        "fullcodeline": "check_field(int32_data);"
    },
    {
        "line": 107,
        "fullcodeline": "check_field(int64_data);"
    },
    {
        "line": 112,
        "fullcodeline": "check_field(uint64_data);"
    },
    {
        "line": 116,
        "fullcodeline": "check_field(string_data);"
    }
]