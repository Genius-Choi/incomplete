[
    {
        "line": 5,
        "fullcodeline": "AVFrame     *frame  = data;"
    },
    {
        "line": 6,
        "fullcodeline": "const uint8_t *buf  = avpkt->data;"
    },
    {
        "line": 7,
        "fullcodeline": "int buf_size        = avpkt->size;"
    },
    {
        "line": 8,
        "fullcodeline": "Vp3DecodeContext *s = avctx->priv_data;"
    },
    {
        "line": 53,
        "fullcodeline": "s->keyframe = !get_bits1(&gb);"
    },
    {
        "line": 63,
        "fullcodeline": "s->nqps = 0;"
    },
    {
        "line": 74,
        "fullcodeline": "s->skip_loop_filter = !s->filter_limit_values[s->qps[0]] ||"
    },
    {
        "line": 90,
        "fullcodeline": "s->current_frame.f->pict_type = s->keyframe ? AV_PICTURE_TYPE_I"
    },
    {
        "line": 92,
        "fullcodeline": "s->current_frame.f->key_frame = s->keyframe;"
    },
    {
        "line": 164,
        "fullcodeline": "memset(s->all_fragments, 0, s->fragment_count * sizeof(Vp3Fragment));"
    },
    {
        "line": 165,
        "fullcodeline": "ff_thread_finish_setup(avctx);"
    },
    {
        "line": 215,
        "fullcodeline": "s->last_slice_end = 0;"
    },
    {
        "line": 225,
        "fullcodeline": "vp3_draw_horiz_band(s, s->height);"
    },
    {
        "line": 231,
        "fullcodeline": "frame->crop_left   = s->offset_x;"
    },
    {
        "line": 232,
        "fullcodeline": "frame->crop_right  = avctx->coded_width - avctx->width - s->offset_x;"
    },
    {
        "line": 233,
        "fullcodeline": "frame->crop_top    = s->offset_y;"
    },
    {
        "line": 234,
        "fullcodeline": "frame->crop_bottom = avctx->coded_height - avctx->height - s->offset_y;"
    },
    {
        "line": 236,
        "fullcodeline": "*got_frame = 1;"
    },
    {
        "line": 247,
        "fullcodeline": "ff_thread_report_progress(&s->current_frame, INT_MAX, 0);"
    },
    {
        "line": 12,
        "fullcodeline": "if ((ret = init_get_bits8(&gb, buf, buf_size)) < 0)"
    },
    {
        "line": 54,
        "fullcodeline": "if (!s->all_fragments) {"
    },
    {
        "line": 58,
        "fullcodeline": "if (!s->theora)"
    },
    {
        "line": 60,
        "fullcodeline": "for (i = 0; i < 3; i++)"
    },
    {
        "line": 66,
        "fullcodeline": "} while (s->theora >= 0x030200 && s->nqps < 3 && get_bits1(&gb));"
    },
    {
        "line": 67,
        "fullcodeline": "for (i = s->nqps; i < 3; i++)"
    },
    {
        "line": 68,
        "fullcodeline": "s->qps[i] = -1;"
    },
    {
        "line": 70,
        "fullcodeline": "if (s->avctx->debug & FF_DEBUG_PICT_INFO)"
    },
    {
        "line": 78,
        "fullcodeline": "if (s->qps[0] != s->last_qps[0])"
    },
    {
        "line": 81,
        "fullcodeline": "for (i = 0; i < s->nqps; i++)"
    },
    {
        "line": 87,
        "fullcodeline": "if (avctx->skip_frame >= AVDISCARD_NONKEY && !s->keyframe)"
    },
    {
        "line": 93,
        "fullcodeline": "if ((ret = ff_thread_get_ext_buffer(avctx, &s->current_frame,"
    },
    {
        "line": 97,
        "fullcodeline": "if (!s->edge_emu_buffer)"
    },
    {
        "line": 167,
        "fullcodeline": "if (s->version < 2) {"
    },
    {
        "line": 180,
        "fullcodeline": "if ((ret = unpack_modes(s, &gb)) < 0) {"
    },
    {
        "line": 184,
        "fullcodeline": "if (ret = unpack_vectors(s, &gb)) {"
    },
    {
        "line": 188,
        "fullcodeline": "if ((ret = unpack_block_qpis(s, &gb)) < 0) {"
    },
    {
        "line": 193,
        "fullcodeline": "if (s->version < 2) {"
    },
    {
        "line": 207,
        "fullcodeline": "for (i = 0; i < 3; i++) {"
    },
    {
        "line": 216,
        "fullcodeline": "for (i = 0; i < s->c_superblock_height; i++)"
    },
    {
        "line": 217,
        "fullcodeline": "render_slice(s, i);"
    },
    {
        "line": 220,
        "fullcodeline": "if (s->version < 2)"
    },
    {
        "line": 228,
        "fullcodeline": "if ((ret = av_frame_ref(data, s->current_frame.f)) < 0)"
    },
    {
        "line": 238,
        "fullcodeline": "if (!HAVE_THREADS || !(s->avctx->active_thread_type & FF_THREAD_FRAME)) {"
    },
    {
        "line": 249,
        "fullcodeline": "if (!HAVE_THREADS || !(s->avctx->active_thread_type & FF_THREAD_FRAME))"
    },
    {
        "line": 55,
        "fullcodeline": "av_log(avctx, AV_LOG_ERROR, \"Data packet without prior valid headers\\n\");"
    },
    {
        "line": 59,
        "fullcodeline": "skip_bits(&gb, 1);"
    },
    {
        "line": 65,
        "fullcodeline": "s->qps[s->nqps++] = get_bits(&gb, 6);"
    },
    {
        "line": 71,
        "fullcodeline": "av_log(s->avctx, AV_LOG_INFO, \" VP3 %sframe #%d: Q index = %d\\n\","
    },
    {
        "line": 75,
        "fullcodeline": "avctx->skip_loop_filter >= (s->keyframe ? AVDISCARD_ALL"
    },
    {
        "line": 79,
        "fullcodeline": "init_loop_filter(s);"
    },
    {
        "line": 84,
        "fullcodeline": "if (s->qps[i] != s->last_qps[i] || s->qps[0] != s->last_qps[0])"
    },
    {
        "line": 98,
        "fullcodeline": "s->edge_emu_buffer = av_malloc(9 * FFABS(s->current_frame.f->linesize[0]));"
    },
    {
        "line": 181,
        "fullcodeline": "av_log(s->avctx, AV_LOG_ERROR, \"error in unpack_modes\\n\");"
    },
    {
        "line": 185,
        "fullcodeline": "av_log(s->avctx, AV_LOG_ERROR, \"error in unpack_vectors\\n\");"
    },
    {
        "line": 189,
        "fullcodeline": "av_log(s->avctx, AV_LOG_ERROR, \"error in unpack_block_qpis\\n\");"
    },
    {
        "line": 208,
        "fullcodeline": "int height = s->height >> (i && s->chroma_y_shift);"
    },
    {
        "line": 239,
        "fullcodeline": "ret = update_frames(avctx);"
    },
    {
        "line": 250,
        "fullcodeline": "av_frame_unref(s->current_frame.f);"
    },
    {
        "line": 56,
        "fullcodeline": "return -1;"
    },
    {
        "line": 72,
        "fullcodeline": "s->keyframe ? \"key\" : \"\", avctx->frame_number + 1, s->qps[0]);"
    },
    {
        "line": 85,
        "fullcodeline": "init_dequantizer(s, i);"
    },
    {
        "line": 101,
        "fullcodeline": "if (!s->theora) {"
    },
    {
        "line": 118,
        "fullcodeline": "if (s->version || s->theora) {"
    },
    {
        "line": 168,
        "fullcodeline": "if ((ret = unpack_superblocks(s, &gb)) < 0) {"
    },
    {
        "line": 194,
        "fullcodeline": "if ((ret = unpack_dct_coeffs(s, &gb)) < 0) {"
    },
    {
        "line": 221,
        "fullcodeline": "for (i = 0; i < 3; i++) {"
    },
    {
        "line": 240,
        "fullcodeline": "if (ret < 0)"
    },
    {
        "line": 102,
        "fullcodeline": "skip_bits(&gb, 4); /* width code */"
    },
    {
        "line": 103,
        "fullcodeline": "skip_bits(&gb, 4); /* height code */"
    },
    {
        "line": 122,
        "fullcodeline": "skip_bits(&gb, 2); /* reserved? */"
    },
    {
        "line": 169,
        "fullcodeline": "av_log(s->avctx, AV_LOG_ERROR, \"error in unpack_superblocks\\n\");"
    },
    {
        "line": 195,
        "fullcodeline": "av_log(s->avctx, AV_LOG_ERROR, \"error in unpack_dct_coeffs\\n\");"
    },
    {
        "line": 210,
        "fullcodeline": "s->data_offset[i] = 0;"
    },
    {
        "line": 222,
        "fullcodeline": "int row = (s->height >> (3 + (i && s->chroma_y_shift))) - 1;"
    },
    {
        "line": 223,
        "fullcodeline": "apply_loop_filter(s, i, row, row + 1);"
    },
    {
        "line": 119,
        "fullcodeline": "if (get_bits1(&gb))"
    },
    {
        "line": 149,
        "fullcodeline": "av_log(s->avctx, AV_LOG_WARNING,"
    },
    {
        "line": 152,
        "fullcodeline": "s->golden_frame.f->pict_type = AV_PICTURE_TYPE_I;"
    },
    {
        "line": 156,
        "fullcodeline": "ff_thread_release_ext_buffer(avctx, &s->last_frame);"
    },
    {
        "line": 160,
        "fullcodeline": "ff_thread_report_progress(&s->last_frame, INT_MAX, 0);"
    },
    {
        "line": 212,
        "fullcodeline": "s->data_offset[i] = (height - 1) * s->current_frame.f->linesize[i];"
    },
    {
        "line": 105,
        "fullcodeline": "int version = get_bits(&gb, 5);"
    },
    {
        "line": 112,
        "fullcodeline": "s->version = version;"
    },
    {
        "line": 120,
        "fullcodeline": "av_log(s->avctx, AV_LOG_ERROR,"
    },
    {
        "line": 153,
        "fullcodeline": "if ((ret = ff_thread_get_ext_buffer(avctx, &s->golden_frame,"
    },
    {
        "line": 157,
        "fullcodeline": "if ((ret = ff_thread_ref_frame(&s->last_frame,"
    },
    {
        "line": 107,
        "fullcodeline": "if (version >= 2) {"
    },
    {
        "line": 113,
        "fullcodeline": "if (avctx->frame_number == 0)"
    },
    {
        "line": 108,
        "fullcodeline": "av_log(avctx, AV_LOG_ERROR, \"This build does not support decoding VP4.\\n\");"
    },
    {
        "line": 114,
        "fullcodeline": "av_log(s->avctx, AV_LOG_DEBUG,"
    }
]