[
    {
        "line": 10,
        "fullcodeline": "RUN_CALLBACK(LIBRAW_PROGRESS_LOAD_RAW,0,2);"
    },
    {
        "line": 38,
        "fullcodeline": "int save_iwidth = S.iwidth, save_iheight = S.iheight, save_shrink = IO.shrink;"
    },
    {
        "line": 40,
        "fullcodeline": "int rwidth = S.raw_width, rheight = S.raw_height;"
    },
    {
        "line": 170,
        "fullcodeline": "unsigned int i = C.cblack[3];"
    },
    {
        "line": 184,
        "fullcodeline": "SET_PROC_FLAG(LIBRAW_PROGRESS_LOAD_RAW);"
    },
    {
        "line": 7,
        "fullcodeline": "if(!libraw_internal_data.internal_data.input)"
    },
    {
        "line": 14,
        "fullcodeline": "if(!load_raw)"
    },
    {
        "line": 172,
        "fullcodeline": "for(c=0;c<3;c++)"
    },
    {
        "line": 174,
        "fullcodeline": "for (c=0;c<4;c++)"
    },
    {
        "line": 190,
        "fullcodeline": "EXCEPTION_HANDLER(err);"
    },
    {
        "line": 21,
        "fullcodeline": "imgdata.image = 0;"
    },
    {
        "line": 30,
        "fullcodeline": "libraw_internal_data.internal_data.meta_data ="
    },
    {
        "line": 128,
        "fullcodeline": "ID.input->seek(libraw_internal_data.unpacker_data.data_offset, SEEK_SET);"
    },
    {
        "line": 130,
        "fullcodeline": "unsigned m_save = C.maximum;"
    },
    {
        "line": 173,
        "fullcodeline": "if (i > C.cblack[c]) i = C.cblack[c];"
    },
    {
        "line": 44,
        "fullcodeline": "if(rwidth < S.width + S.left_margin)"
    },
    {
        "line": 46,
        "fullcodeline": "if(rheight < S.height + S.top_margin)"
    },
    {
        "line": 99,
        "fullcodeline": "if(decoder_info.decoder_flags &  LIBRAW_DECODER_OWNALLOC)"
    },
    {
        "line": 131,
        "fullcodeline": "if(load_raw == &LibRaw::unpacked_load_raw && !strcasecmp(imgdata.idata.make,\"Nikon\"))"
    },
    {
        "line": 31,
        "fullcodeline": "(char *) malloc (libraw_internal_data.unpacker_data.meta_length);"
    },
    {
        "line": 45,
        "fullcodeline": "rwidth = S.width + S.left_margin;"
    },
    {
        "line": 47,
        "fullcodeline": "rheight = S.height + S.top_margin;"
    },
    {
        "line": 136,
        "fullcodeline": "if(load_raw == &LibRaw::unpacked_load_raw && !strcasecmp(imgdata.idata.make,\"Nikon\"))"
    },
    {
        "line": 104,
        "fullcodeline": "else if(imgdata.idata.filters || P1.colors == 1) // Bayer image or single color -> decode to raw_image"
    },
    {
        "line": 106,
        "fullcodeline": "imgdata.rawdata.raw_alloc = malloc(rwidth*(rheight+8)*sizeof(imgdata.rawdata.raw_image[0]));"
    },
    {
        "line": 143,
        "fullcodeline": "else if (!(imgdata.idata.filters || P1.colors == 1) ) // legacy decoder, ownalloc handled above"
    },
    {
        "line": 146,
        "fullcodeline": "imgdata.rawdata.raw_alloc = imgdata.image;"
    },
    {
        "line": 121,
        "fullcodeline": "imgdata.image = (ushort (*)[4]) calloc(unsigned(S.raw_width)*unsigned(S.raw_height),sizeof(*imgdata.image));"
    },
    {
        "line": 151,
        "fullcodeline": "if(!(libraw_internal_data.unpacker_data.load_flags & 256))"
    },
    {
        "line": 109,
        "fullcodeline": "S.raw_pitch = S.raw_width*2; // Bayer case, not set before"
    },
    {
        "line": 122,
        "fullcodeline": "if(!(decoder_info.decoder_flags &  LIBRAW_DECODER_ADOBECOPYPIXEL))"
    },
    {
        "line": 118,
        "fullcodeline": "S.raw_pitch = (decoder_info.decoder_flags & LIBRAW_DECODER_LEGACY_WITH_MARGINS) ? S.raw_width*8 : S.width*8;"
    }
]