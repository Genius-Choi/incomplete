[
    {
        "line": 8,
        "fullcodeline": "helper = Helper.new(env)"
    },
    {
        "line": 9,
        "fullcodeline": "force_anon = false"
    },
    {
        "line": 40,
        "fullcodeline": "if helper.cacheable?"
    },
    {
        "line": 2,
        "fullcodeline": "if PAYLOAD_INVALID_REQUEST_METHODS.include?(env[Rack::REQUEST_METHOD]) &&"
    },
    {
        "line": 21,
        "fullcodeline": "if (env[\"HTTP_DISCOURSE_BACKGROUND\"] == \"true\") && (queue_time = env[\"REQUEST_QUEUE_SECONDS\"])"
    },
    {
        "line": 3,
        "fullcodeline": "env[Rack::RACK_INPUT].size > 0"
    },
    {
        "line": 12,
        "fullcodeline": "env[\"discourse.request_tracker.skip\"] = true"
    },
    {
        "line": 17,
        "fullcodeline": "force_anon = env[\"DISCOURSE_FORCE_ANON\"] = true"
    },
    {
        "line": 41,
        "fullcodeline": "helper.cached(env) || helper.cache(@app.call(env), env)"
    },
    {
        "line": 42,
        "fullcodeline": "else"
    },
    {
        "line": 47,
        "fullcodeline": "result[1][\"Set-Cookie\"] = \"dosp=1; Path=/\""
    },
    {
        "line": 5,
        "fullcodeline": "return [413, {}, []]"
    },
    {
        "line": 13,
        "fullcodeline": "return [403, {}, [\"Crawler is not allowed!\"]]"
    },
    {
        "line": 23,
        "fullcodeline": "if max_time > 0 && queue_time.to_f > max_time"
    },
    {
        "line": 43,
        "fullcodeline": "@app.call(env)"
    },
    {
        "line": 24,
        "fullcodeline": "return ["
    },
    {
        "line": 29,
        "fullcodeline": "[{"
    },
    {
        "line": 26,
        "fullcodeline": "{"
    },
    {
        "line": 27,
        "fullcodeline": "\"content-type\" => \"application/json; charset=utf-8\""
    },
    {
        "line": 30,
        "fullcodeline": "errors: I18n.t(\"rate_limiter.slow_down\"),"
    },
    {
        "line": 31,
        "fullcodeline": "extras: {"
    },
    {
        "line": 32,
        "fullcodeline": "wait_seconds: 5 + (5 * rand).round(2)"
    }
]