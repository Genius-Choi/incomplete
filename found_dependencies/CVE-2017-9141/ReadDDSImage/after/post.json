[
    {
        "line": 8,
        "fullcodeline": "cubemap = MagickFalse,"
    },
    {
        "line": 9,
        "fullcodeline": "volume = MagickFalse;"
    },
    {
        "line": 30,
        "fullcodeline": "assert(image_info != (const ImageInfo *) NULL);"
    },
    {
        "line": 31,
        "fullcodeline": "assert(image_info->signature == MagickCoreSignature);"
    },
    {
        "line": 35,
        "fullcodeline": "assert(exception != (ExceptionInfo *) NULL);"
    },
    {
        "line": 36,
        "fullcodeline": "assert(exception->signature == MagickCoreSignature);"
    },
    {
        "line": 37,
        "fullcodeline": "image=AcquireImage(image_info,exception);"
    },
    {
        "line": 38,
        "fullcodeline": "status=OpenBlob(image_info,image,ReadBinaryBlobMode,exception);"
    },
    {
        "line": 57,
        "fullcodeline": "(void) SeekBlob(image, 128, SEEK_SET);"
    },
    {
        "line": 128,
        "fullcodeline": "num_images = 1;"
    },
    {
        "line": 181,
        "fullcodeline": "(void) CloseBlob(image);"
    },
    {
        "line": 32,
        "fullcodeline": "if (image_info->debug != MagickFalse)"
    },
    {
        "line": 39,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 48,
        "fullcodeline": "if (ReadDDSInfo(image, &dds_info) != MagickTrue)"
    },
    {
        "line": 51,
        "fullcodeline": "if (dds_info.ddscaps2 & DDSCAPS2_CUBEMAP)"
    },
    {
        "line": 54,
        "fullcodeline": "if (dds_info.ddscaps2 & DDSCAPS2_VOLUME && dds_info.depth > 0)"
    },
    {
        "line": 62,
        "fullcodeline": "if (dds_info.pixelformat.flags & DDPF_RGB)"
    },
    {
        "line": 146,
        "fullcodeline": "if (num_images < 1)"
    },
    {
        "line": 149,
        "fullcodeline": "for (n = 0; n < num_images; n++)"
    },
    {
        "line": 182,
        "fullcodeline": "return(GetFirstImageInList(image));"
    },
    {
        "line": 33,
        "fullcodeline": "(void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\","
    },
    {
        "line": 41,
        "fullcodeline": "image=DestroyImageList(image);"
    },
    {
        "line": 49,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 52,
        "fullcodeline": "cubemap = MagickTrue;"
    },
    {
        "line": 55,
        "fullcodeline": "volume = MagickTrue;"
    },
    {
        "line": 64,
        "fullcodeline": "compression = NoCompression;"
    },
    {
        "line": 134,
        "fullcodeline": "num_images = 0;"
    },
    {
        "line": 144,
        "fullcodeline": "num_images = dds_info.depth;"
    },
    {
        "line": 147,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 160,
        "fullcodeline": "image->alpha_trait=alpha_trait;"
    },
    {
        "line": 161,
        "fullcodeline": "image->compression = compression;"
    },
    {
        "line": 162,
        "fullcodeline": "image->columns = dds_info.width;"
    },
    {
        "line": 163,
        "fullcodeline": "image->rows = dds_info.height;"
    },
    {
        "line": 164,
        "fullcodeline": "image->storage_class = DirectClass;"
    },
    {
        "line": 165,
        "fullcodeline": "image->endian = LSBEndian;"
    },
    {
        "line": 166,
        "fullcodeline": "image->depth = 8;"
    },
    {
        "line": 172,
        "fullcodeline": "status=SetImageExtent(image,image->columns,image->rows,exception);"
    },
    {
        "line": 42,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 65,
        "fullcodeline": "if (dds_info.pixelformat.flags & DDPF_ALPHAPIXELS)"
    },
    {
        "line": 135,
        "fullcodeline": "if (dds_info.ddscaps2 & DDSCAPS2_CUBEMAP_POSITIVEX) num_images++;"
    },
    {
        "line": 136,
        "fullcodeline": "if (dds_info.ddscaps2 & DDSCAPS2_CUBEMAP_NEGATIVEX) num_images++;"
    },
    {
        "line": 137,
        "fullcodeline": "if (dds_info.ddscaps2 & DDSCAPS2_CUBEMAP_POSITIVEY) num_images++;"
    },
    {
        "line": 138,
        "fullcodeline": "if (dds_info.ddscaps2 & DDSCAPS2_CUBEMAP_NEGATIVEY) num_images++;"
    },
    {
        "line": 139,
        "fullcodeline": "if (dds_info.ddscaps2 & DDSCAPS2_CUBEMAP_POSITIVEZ) num_images++;"
    },
    {
        "line": 140,
        "fullcodeline": "if (dds_info.ddscaps2 & DDSCAPS2_CUBEMAP_NEGATIVEZ) num_images++;"
    },
    {
        "line": 151,
        "fullcodeline": "if (n != 0)"
    },
    {
        "line": 167,
        "fullcodeline": "if (image_info->ping != MagickFalse)"
    },
    {
        "line": 173,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 175,
        "fullcodeline": "if ((decoder)(image, &dds_info, exception) != MagickTrue)"
    },
    {
        "line": 67,
        "fullcodeline": "alpha_trait = BlendPixelTrait;"
    },
    {
        "line": 68,
        "fullcodeline": "decoder = ReadUncompressedRGBA;"
    },
    {
        "line": 76,
        "fullcodeline": "else if (dds_info.pixelformat.flags & DDPF_LUMINANCE)"
    },
    {
        "line": 154,
        "fullcodeline": "AcquireNextImage(image_info,image,exception);"
    },
    {
        "line": 157,
        "fullcodeline": "image=SyncNextImageInList(image);"
    },
    {
        "line": 169,
        "fullcodeline": "(void) CloseBlob(image);"
    },
    {
        "line": 177,
        "fullcodeline": "(void) CloseBlob(image);"
    },
    {
        "line": 72,
        "fullcodeline": "alpha_trait = UndefinedPixelTrait;"
    },
    {
        "line": 73,
        "fullcodeline": "decoder = ReadUncompressedRGB;"
    },
    {
        "line": 78,
        "fullcodeline": "compression = NoCompression;"
    },
    {
        "line": 155,
        "fullcodeline": "if (GetNextImageInList(image) == (Image *) NULL)"
    },
    {
        "line": 170,
        "fullcodeline": "return(GetFirstImageInList(image));"
    },
    {
        "line": 174,
        "fullcodeline": "return(DestroyImageList(image));"
    },
    {
        "line": 178,
        "fullcodeline": "return(GetFirstImageInList(image));"
    },
    {
        "line": 79,
        "fullcodeline": "if (dds_info.pixelformat.flags & DDPF_ALPHAPIXELS)"
    },
    {
        "line": 82,
        "fullcodeline": "ThrowReaderException(CorruptImageError, \"ImageTypeNotSupported\");"
    },
    {
        "line": 90,
        "fullcodeline": "else if (dds_info.pixelformat.flags & DDPF_FOURCC)"
    },
    {
        "line": 156,
        "fullcodeline": "return(DestroyImageList(image));"
    },
    {
        "line": 86,
        "fullcodeline": "alpha_trait = UndefinedPixelTrait;"
    },
    {
        "line": 87,
        "fullcodeline": "decoder = ReadUncompressedRGB;"
    },
    {
        "line": 125,
        "fullcodeline": "ThrowReaderException(CorruptImageError, \"ImageTypeNotSupported\");"
    },
    {
        "line": 96,
        "fullcodeline": "alpha_trait = UndefinedPixelTrait;"
    },
    {
        "line": 97,
        "fullcodeline": "compression = DXT1Compression;"
    },
    {
        "line": 98,
        "fullcodeline": "decoder = ReadDXT1;"
    },
    {
        "line": 103,
        "fullcodeline": "alpha_trait = BlendPixelTrait;"
    },
    {
        "line": 104,
        "fullcodeline": "compression = DXT3Compression;"
    },
    {
        "line": 105,
        "fullcodeline": "decoder = ReadDXT3;"
    },
    {
        "line": 110,
        "fullcodeline": "alpha_trait = BlendPixelTrait;"
    },
    {
        "line": 111,
        "fullcodeline": "compression = DXT5Compression;"
    },
    {
        "line": 112,
        "fullcodeline": "decoder = ReadDXT5;"
    },
    {
        "line": 118,
        "fullcodeline": "ThrowReaderException(CorruptImageError, \"ImageTypeNotSupported\");"
    }
]