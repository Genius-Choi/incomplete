[
    {
        "line": 34,
        "fullcodeline": "rc = EVP_DigestUpdate(md.get(), &verify_trusted_ca_, sizeof(verify_trusted_ca_));"
    },
    {
        "line": 35,
        "fullcodeline": "RELEASE_ASSERT(rc == 1, Utility::getLastCryptoError().value_or(\"\"));"
    },
    {
        "line": 10,
        "fullcodeline": "if (ca_cert_ != nullptr) {"
    },
    {
        "line": 37,
        "fullcodeline": "if (config_ != nullptr) {"
    },
    {
        "line": 11,
        "fullcodeline": "rc = X509_digest(ca_cert_.get(), EVP_sha256(), hash_buffer, &hash_length);"
    },
    {
        "line": 12,
        "fullcodeline": "RELEASE_ASSERT(rc == 1, Utility::getLastCryptoError().value_or(\"\"));"
    },
    {
        "line": 13,
        "fullcodeline": "RELEASE_ASSERT(hash_length == SHA256_DIGEST_LENGTH,"
    },
    {
        "line": 16,
        "fullcodeline": "rc = EVP_DigestUpdate(md.get(), hash_buffer, hash_length);"
    },
    {
        "line": 17,
        "fullcodeline": "RELEASE_ASSERT(rc == 1, Utility::getLastCryptoError().value_or(\"\"));"
    },
    {
        "line": 21,
        "fullcodeline": "rc = EVP_DigestUpdate(md.get(), hash.data(),"
    },
    {
        "line": 24,
        "fullcodeline": "RELEASE_ASSERT(rc == 1, Utility::getLastCryptoError().value_or(\"\"));"
    },
    {
        "line": 28,
        "fullcodeline": "rc = EVP_DigestUpdate(md.get(), hash.data(),"
    },
    {
        "line": 31,
        "fullcodeline": "RELEASE_ASSERT(rc == 1, Utility::getLastCryptoError().value_or(\"\"));"
    },
    {
        "line": 44,
        "fullcodeline": "const std::string& crl = config_->certificateRevocationList();"
    },
    {
        "line": 50,
        "fullcodeline": "bool allow_expired = config_->allowExpiredCertificate();"
    },
    {
        "line": 51,
        "fullcodeline": "rc = EVP_DigestUpdate(md.get(), &allow_expired, sizeof(allow_expired));"
    },
    {
        "line": 52,
        "fullcodeline": "RELEASE_ASSERT(rc == 1, Utility::getLastCryptoError().value_or(\"\"));"
    },
    {
        "line": 54,
        "fullcodeline": "auto trust_chain_verification = config_->trustChainVerification();"
    },
    {
        "line": 55,
        "fullcodeline": "rc = EVP_DigestUpdate(md.get(), &trust_chain_verification, sizeof(trust_chain_verification));"
    },
    {
        "line": 56,
        "fullcodeline": "RELEASE_ASSERT(rc == 1, Utility::getLastCryptoError().value_or(\"\"));"
    },
    {
        "line": 58,
        "fullcodeline": "auto only_leaf_crl = config_->onlyVerifyLeafCertificateCrl();"
    },
    {
        "line": 59,
        "fullcodeline": "rc = EVP_DigestUpdate(md.get(), &only_leaf_crl, sizeof(only_leaf_crl));"
    },
    {
        "line": 60,
        "fullcodeline": "RELEASE_ASSERT(rc == 1, Utility::getLastCryptoError().value_or(\"\"));"
    },
    {
        "line": 14,
        "fullcodeline": "fmt::format(\"invalid SHA256 hash length {}\", hash_length));"
    },
    {
        "line": 45,
        "fullcodeline": "if (!crl.empty()) {"
    },
    {
        "line": 22,
        "fullcodeline": "hash.size() *"
    },
    {
        "line": 29,
        "fullcodeline": "hash.size() *"
    },
    {
        "line": 39,
        "fullcodeline": "size_t hash = MessageUtil::hash(matcher);"
    },
    {
        "line": 40,
        "fullcodeline": "rc = EVP_DigestUpdate(md.get(), &hash, sizeof(hash));"
    },
    {
        "line": 41,
        "fullcodeline": "RELEASE_ASSERT(rc == 1, Utility::getLastCryptoError().value_or(\"\"));"
    },
    {
        "line": 46,
        "fullcodeline": "rc = EVP_DigestUpdate(md.get(), crl.data(), crl.length());"
    },
    {
        "line": 47,
        "fullcodeline": "RELEASE_ASSERT(rc == 1, Utility::getLastCryptoError().value_or(\"\"));"
    }
]