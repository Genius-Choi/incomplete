[
    {
        "line": 10,
        "fullcodeline": "if (ca_cert_ != nullptr) {"
    },
    {
        "line": 11,
        "fullcodeline": "rc = X509_digest(ca_cert_.get(), EVP_sha256(), hash_buffer, &hash_length);"
    },
    {
        "line": 13,
        "fullcodeline": "RELEASE_ASSERT(hash_length == SHA256_DIGEST_LENGTH,"
    },
    {
        "line": 16,
        "fullcodeline": "rc = EVP_DigestUpdate(md.get(), hash_buffer, hash_length);"
    },
    {
        "line": 21,
        "fullcodeline": "rc = EVP_DigestUpdate(md.get(), hash.data(),"
    },
    {
        "line": 28,
        "fullcodeline": "rc = EVP_DigestUpdate(md.get(), hash.data(),"
    },
    {
        "line": 31,
        "fullcodeline": "RELEASE_ASSERT(rc == 1, Utility::getLastCryptoError().value_or(\"\"));"
    },
    {
        "line": 12,
        "fullcodeline": "RELEASE_ASSERT(rc == 1, Utility::getLastCryptoError().value_or(\"\"));"
    },
    {
        "line": 14,
        "fullcodeline": "fmt::format(\"invalid SHA256 hash length {}\", hash_length));"
    },
    {
        "line": 17,
        "fullcodeline": "RELEASE_ASSERT(rc == 1, Utility::getLastCryptoError().value_or(\"\"));"
    },
    {
        "line": 24,
        "fullcodeline": "RELEASE_ASSERT(rc == 1, Utility::getLastCryptoError().value_or(\"\"));"
    },
    {
        "line": 22,
        "fullcodeline": "hash.size() *"
    },
    {
        "line": 29,
        "fullcodeline": "hash.size() *"
    },
    {
        "line": 30,
        "fullcodeline": "sizeof(std::remove_reference<decltype(hash)>::type::value_type));"
    }
]