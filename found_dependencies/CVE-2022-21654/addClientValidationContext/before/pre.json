[
    {
        "line": 35,
        "fullcodeline": "const uint32_t err = ERR_peek_last_error();"
    },
    {
        "line": 42,
        "fullcodeline": "SSL_CTX_set_client_CA_list(ctx, list.release());"
    },
    {
        "line": 2,
        "fullcodeline": "if (config_ == nullptr || config_->caCert().empty()) {"
    },
    {
        "line": 6,
        "fullcodeline": "bssl::UniquePtr<BIO> bio("
    },
    {
        "line": 8,
        "fullcodeline": "RELEASE_ASSERT(bio != nullptr, \"\");"
    },
    {
        "line": 10,
        "fullcodeline": "bssl::UniquePtr<STACK_OF(X509_NAME)> list(sk_X509_NAME_new("
    },
    {
        "line": 12,
        "fullcodeline": "RELEASE_ASSERT(list != nullptr, \"\");"
    },
    {
        "line": 7,
        "fullcodeline": "BIO_new_mem_buf(const_cast<char*>(config_->caCert().data()), config_->caCert().size()));"
    },
    {
        "line": 18,
        "fullcodeline": "X509_NAME* name = X509_get_subject_name(cert.get());"
    },
    {
        "line": 36,
        "fullcodeline": "if (ERR_GET_LIB(err) == ERR_LIB_PEM && ERR_GET_REASON(err) == PEM_R_NO_START_LINE) {"
    },
    {
        "line": 14,
        "fullcodeline": "bssl::UniquePtr<X509> cert(PEM_read_bio_X509(bio.get(), nullptr, nullptr, nullptr));"
    },
    {
        "line": 15,
        "fullcodeline": "if (cert == nullptr) {"
    },
    {
        "line": 19,
        "fullcodeline": "if (name == nullptr) {"
    },
    {
        "line": 24,
        "fullcodeline": "if (sk_X509_NAME_find(list.get(), nullptr, name)) {"
    },
    {
        "line": 27,
        "fullcodeline": "bssl::UniquePtr<X509_NAME> name_dup(X509_NAME_dup(name));"
    },
    {
        "line": 45,
        "fullcodeline": "SSL_CTX_set_verify(ctx, SSL_VERIFY_PEER | SSL_VERIFY_FAIL_IF_NO_PEER_CERT, nullptr);"
    },
    {
        "line": 28,
        "fullcodeline": "if (name_dup == nullptr || !sk_X509_NAME_push(list.get(), name_dup.release())) {"
    },
    {
        "line": 40,
        "fullcodeline": "absl::StrCat(\"Failed to load trusted client CA certificates from \", config_->caCertPath()));"
    },
    {
        "line": 20,
        "fullcodeline": "throw EnvoyException(absl::StrCat(\"Failed to load trusted client CA certificates from \","
    },
    {
        "line": 29,
        "fullcodeline": "throw EnvoyException(absl::StrCat(\"Failed to load trusted client CA certificates from \","
    },
    {
        "line": 21,
        "fullcodeline": "config_->caCertPath()));"
    },
    {
        "line": 30,
        "fullcodeline": "config_->caCertPath()));"
    }
]