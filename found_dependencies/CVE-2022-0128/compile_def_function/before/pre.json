[
    {
        "line": 7,
        "fullcodeline": "char_u\t*line = NULL;"
    },
    {
        "line": 8,
        "fullcodeline": "char_u\t*line_to_free = NULL;"
    },
    {
        "line": 10,
        "fullcodeline": "char\t*errormsg = NULL;\t// error message"
    },
    {
        "line": 13,
        "fullcodeline": "int\t\tdid_emsg_before = did_emsg;"
    },
    {
        "line": 14,
        "fullcodeline": "int\t\tdid_emsg_silent_before = did_emsg_silent;"
    },
    {
        "line": 15,
        "fullcodeline": "int\t\tret = FAIL;"
    },
    {
        "line": 16,
        "fullcodeline": "sctx_T\tsave_current_sctx = current_sctx;"
    },
    {
        "line": 17,
        "fullcodeline": "int\t\tsave_estack_compiling = estack_compiling;"
    },
    {
        "line": 18,
        "fullcodeline": "int\t\tsave_cmod_flags = cmdmod.cmod_flags;"
    },
    {
        "line": 20,
        "fullcodeline": "int\t\tnew_def_function = FALSE;"
    },
    {
        "line": 24,
        "fullcodeline": "int\t\tdebug_lnum = -1;"
    },
    {
        "line": 55,
        "fullcodeline": "ufunc->uf_def_status = UF_COMPILING;"
    },
    {
        "line": 57,
        "fullcodeline": "CLEAR_FIELD(cctx);"
    },
    {
        "line": 59,
        "fullcodeline": "cctx.ctx_compile_type = compile_type;"
    },
    {
        "line": 60,
        "fullcodeline": "cctx.ctx_ufunc = ufunc;"
    },
    {
        "line": 61,
        "fullcodeline": "cctx.ctx_lnum = -1;"
    },
    {
        "line": 62,
        "fullcodeline": "cctx.ctx_outer = outer_cctx;"
    },
    {
        "line": 65,
        "fullcodeline": "ga_init2(&cctx.ctx_type_stack, sizeof(type2_T), 50);"
    },
    {
        "line": 67,
        "fullcodeline": "cctx.ctx_type_list = &ufunc->uf_type_list;"
    },
    {
        "line": 68,
        "fullcodeline": "ga_init2(&cctx.ctx_instr, sizeof(isn_T), 50);"
    },
    {
        "line": 69,
        "fullcodeline": "instr = &cctx.ctx_instr;"
    },
    {
        "line": 74,
        "fullcodeline": "current_sctx = ufunc->uf_script_ctx;"
    },
    {
        "line": 75,
        "fullcodeline": "current_sctx.sc_version = SCRIPT_VERSION_VIM9;"
    },
    {
        "line": 698,
        "fullcodeline": "ret = OK;"
    },
    {
        "line": 748,
        "fullcodeline": "free_imported(&cctx);"
    },
    {
        "line": 28,
        "fullcodeline": "if (ufunc->uf_dfunc_idx > 0)"
    },
    {
        "line": 63,
        "fullcodeline": "ga_init2(&cctx.ctx_locals, sizeof(lvar_T), 10);"
    },
    {
        "line": 66,
        "fullcodeline": "ga_init2(&cctx.ctx_imports, sizeof(imported_T), 10);"
    },
    {
        "line": 78,
        "fullcodeline": "cmdmod.cmod_flags &= ~CMOD_LEGACY;"
    },
    {
        "line": 81,
        "fullcodeline": "do_estack_push = !estack_top_is_ufunc(ufunc, 1);"
    },
    {
        "line": 86,
        "fullcodeline": "if (check_args_shadowing(ufunc, &cctx) == FAIL)"
    },
    {
        "line": 89,
        "fullcodeline": "if (ufunc->uf_def_args.ga_len > 0)"
    },
    {
        "line": 638,
        "fullcodeline": "if (cctx.ctx_scope != NULL)"
    },
    {
        "line": 651,
        "fullcodeline": "if (!cctx.ctx_had_return)"
    },
    {
        "line": 730,
        "fullcodeline": "if (cctx.ctx_redir_lhs.lhs_name != NULL)"
    },
    {
        "line": 30,
        "fullcodeline": "dfunc_T *dfunc = ((dfunc_T *)def_functions.ga_data)"
    },
    {
        "line": 32,
        "fullcodeline": "isn_T\t*instr_dest = NULL;"
    },
    {
        "line": 46,
        "fullcodeline": "ga_clear_strings(&dfunc->df_var_names);"
    },
    {
        "line": 83,
        "fullcodeline": "estack_push_ufunc(ufunc, 1);"
    },
    {
        "line": 91,
        "fullcodeline": "int\tcount = ufunc->uf_def_args.ga_len;"
    },
    {
        "line": 92,
        "fullcodeline": "int\tfirst_def_arg = ufunc->uf_args.ga_len - count;"
    },
    {
        "line": 95,
        "fullcodeline": "int\toff = STACK_FRAME_SIZE + (ufunc->uf_va_name != NULL ? 1 : 0);"
    },
    {
        "line": 99,
        "fullcodeline": "SOURCING_LNUM = 0;  // line number unknown"
    },
    {
        "line": 155,
        "fullcodeline": "int\t    starts_with_colon = FALSE;"
    },
    {
        "line": 198,
        "fullcodeline": "CLEAR_FIELD(ea);"
    },
    {
        "line": 199,
        "fullcodeline": "ea.cmdlinep = &line;"
    },
    {
        "line": 200,
        "fullcodeline": "ea.cmd = skipwhite(line);"
    },
    {
        "line": 225,
        "fullcodeline": "cctx.ctx_prev_lnum = cctx.ctx_lnum + 1;"
    },
    {
        "line": 265,
        "fullcodeline": "cctx.ctx_has_cmdmod = FALSE;"
    },
    {
        "line": 275,
        "fullcodeline": "generate_cmdmods(&cctx, &local_cmdmod);"
    },
    {
        "line": 276,
        "fullcodeline": "undo_cmdmod(&local_cmdmod);"
    },
    {
        "line": 289,
        "fullcodeline": "p = ea.cmd;"
    },
    {
        "line": 320,
        "fullcodeline": "cmd = ea.cmd;"
    },
    {
        "line": 345,
        "fullcodeline": "p = find_ex_command(&ea, NULL,"
    },
    {
        "line": 419,
        "fullcodeline": "p = skipwhite(p);"
    },
    {
        "line": 626,
        "fullcodeline": "line = skipwhite(line);"
    },
    {
        "line": 629,
        "fullcodeline": "generate_undo_cmdmods(&cctx);"
    },
    {
        "line": 662,
        "fullcodeline": "generate_instr(&cctx, ISN_RETURN_VOID);"
    },
    {
        "line": 667,
        "fullcodeline": "if (emsg_silent == 0 || did_emsg_silent == did_emsg_silent_before)"
    },
    {
        "line": 671,
        "fullcodeline": "dfunc->df_deleted = FALSE;"
    },
    {
        "line": 695,
        "fullcodeline": "ufunc->uf_def_status = UF_COMPILED;"
    },
    {
        "line": 703,
        "fullcodeline": "dfunc_T\t*dfunc = ((dfunc_T *)def_functions.ga_data)"
    },
    {
        "line": 719,
        "fullcodeline": "ufunc->uf_def_status = UF_COMPILE_ERROR;"
    },
    {
        "line": 43,
        "fullcodeline": "if (instr_dest != NULL)"
    },
    {
        "line": 52,
        "fullcodeline": "new_def_function = TRUE;"
    },
    {
        "line": 100,
        "fullcodeline": "for (i = 0; i < count; ++i)"
    },
    {
        "line": 161,
        "fullcodeline": "if (did_emsg_before != did_emsg)"
    },
    {
        "line": 202,
        "fullcodeline": "if (*ea.cmd == '#')"
    },
    {
        "line": 266,
        "fullcodeline": "if (parse_command_modifiers(&ea, &errormsg, &local_cmdmod, FALSE)"
    },
    {
        "line": 280,
        "fullcodeline": "for (p = ea.cmd; p >= line; --p)"
    },
    {
        "line": 290,
        "fullcodeline": "if (!(local_cmdmod.cmod_flags & CMOD_LEGACY))"
    },
    {
        "line": 349,
        "fullcodeline": "if (p == NULL)"
    },
    {
        "line": 357,
        "fullcodeline": "if (local_cmdmod.cmod_flags & CMOD_LEGACY)"
    },
    {
        "line": 624,
        "fullcodeline": "if (line == NULL)"
    },
    {
        "line": 631,
        "fullcodeline": "if (cctx.ctx_type_stack.ga_len < 0)"
    },
    {
        "line": 640,
        "fullcodeline": "if (cctx.ctx_scope->se_type == IF_SCOPE)"
    },
    {
        "line": 653,
        "fullcodeline": "if (ufunc->uf_ret_type->tt_type == VAR_UNKNOWN)"
    },
    {
        "line": 681,
        "fullcodeline": "if (cctx.ctx_compile_type == CT_DEBUG)"
    },
    {
        "line": 721,
        "fullcodeline": "while (cctx.ctx_scope != NULL)"
    },
    {
        "line": 722,
        "fullcodeline": "drop_scope(&cctx);"
    },
    {
        "line": 724,
        "fullcodeline": "if (errormsg != NULL)"
    },
    {
        "line": 732,
        "fullcodeline": "if (ret == OK)"
    },
    {
        "line": 40,
        "fullcodeline": "case CT_NONE:   instr_dest = dfunc->df_instr; break;"
    },
    {
        "line": 41,
        "fullcodeline": "case CT_DEBUG:  instr_dest = dfunc->df_instr_debug; break;"
    },
    {
        "line": 45,
        "fullcodeline": "delete_def_function_contents(dfunc, FALSE);"
    },
    {
        "line": 50,
        "fullcodeline": "if (add_def_function(ufunc) == FAIL)"
    },
    {
        "line": 103,
        "fullcodeline": "int\t\targ_idx = first_def_arg + i;"
    },
    {
        "line": 104,
        "fullcodeline": "where_T\twhere = WHERE_INIT;"
    },
    {
        "line": 106,
        "fullcodeline": "int\t\tjump_instr_idx = instr->ga_len;"
    },
    {
        "line": 114,
        "fullcodeline": "ufunc->uf_args_visible = arg_idx;"
    },
    {
        "line": 116,
        "fullcodeline": "arg = ((char_u **)(ufunc->uf_def_args.ga_data))[i];"
    },
    {
        "line": 117,
        "fullcodeline": "r = compile_expr0(&arg, &cctx);"
    },
    {
        "line": 125,
        "fullcodeline": "val_type = get_type_on_stack(&cctx, 0);"
    },
    {
        "line": 126,
        "fullcodeline": "where.wt_index = arg_idx + 1;"
    },
    {
        "line": 145,
        "fullcodeline": "set_function_type(ufunc);"
    },
    {
        "line": 164,
        "fullcodeline": "if (line != NULL && *line == '|')"
    },
    {
        "line": 166,
        "fullcodeline": "++line;"
    },
    {
        "line": 205,
        "fullcodeline": "line = (char_u *)\"\";"
    },
    {
        "line": 219,
        "fullcodeline": "if (cctx.ctx_compile_type == CT_DEBUG && cctx.ctx_lnum != debug_lnum"
    },
    {
        "line": 220,
        "fullcodeline": "&& cctx.ctx_skip != SKIP_YES)"
    },
    {
        "line": 222,
        "fullcodeline": "debug_lnum = cctx.ctx_lnum;"
    },
    {
        "line": 223,
        "fullcodeline": "generate_instr_debug(&cctx);"
    },
    {
        "line": 272,
        "fullcodeline": "line = (char_u *)\"\";"
    },
    {
        "line": 321,
        "fullcodeline": "if ((*cmd != '$' || starts_with_colon)"
    },
    {
        "line": 322,
        "fullcodeline": "&& (starts_with_colon || !(*cmd == '\\''"
    },
    {
        "line": 325,
        "fullcodeline": "ea.cmd = skip_range(ea.cmd, TRUE, NULL);"
    },
    {
        "line": 346,
        "fullcodeline": "starts_with_colon || (local_cmdmod.cmod_flags & CMOD_LEGACY)"
    },
    {
        "line": 359,
        "fullcodeline": "char_u *start = ea.cmd;"
    },
    {
        "line": 389,
        "fullcodeline": "if (p == ea.cmd && ea.cmdidx != CMD_SIZE)"
    },
    {
        "line": 405,
        "fullcodeline": "if (cctx.ctx_had_return"
    },
    {
        "line": 413,
        "fullcodeline": "&& ea.cmdidx != CMD_endtry)"
    },
    {
        "line": 420,
        "fullcodeline": "if (ea.cmdidx != CMD_SIZE"
    },
    {
        "line": 421,
        "fullcodeline": "&& ea.cmdidx != CMD_write && ea.cmdidx != CMD_read)"
    },
    {
        "line": 436,
        "fullcodeline": "ea.arg = p;"
    },
    {
        "line": 437,
        "fullcodeline": "line = compile_nested_function(&ea, &cctx, &line_to_free);"
    },
    {
        "line": 441,
        "fullcodeline": "line = compile_return(p, check_return_type,"
    },
    {
        "line": 443,
        "fullcodeline": "cctx.ctx_had_return = TRUE;"
    },
    {
        "line": 454,
        "fullcodeline": "line = compile_assignment(p, &ea, ea.cmdidx, &cctx);"
    },
    {
        "line": 462,
        "fullcodeline": "line = compile_unletlock(p, &ea, &cctx);"
    },
    {
        "line": 467,
        "fullcodeline": "line = NULL;"
    },
    {
        "line": 471,
        "fullcodeline": "line = compile_if(p, &cctx);"
    },
    {
        "line": 474,
        "fullcodeline": "line = compile_elseif(p, &cctx);"
    },
    {
        "line": 475,
        "fullcodeline": "cctx.ctx_had_return = FALSE;"
    },
    {
        "line": 478,
        "fullcodeline": "line = compile_else(p, &cctx);"
    },
    {
        "line": 479,
        "fullcodeline": "cctx.ctx_had_return = FALSE;"
    },
    {
        "line": 482,
        "fullcodeline": "line = compile_endif(p, &cctx);"
    },
    {
        "line": 486,
        "fullcodeline": "line = compile_while(p, &cctx);"
    },
    {
        "line": 489,
        "fullcodeline": "line = compile_endwhile(p, &cctx);"
    },
    {
        "line": 490,
        "fullcodeline": "cctx.ctx_had_return = FALSE;"
    },
    {
        "line": 494,
        "fullcodeline": "line = compile_for(p, &cctx);"
    },
    {
        "line": 497,
        "fullcodeline": "line = compile_endfor(p, &cctx);"
    },
    {
        "line": 498,
        "fullcodeline": "cctx.ctx_had_return = FALSE;"
    },
    {
        "line": 501,
        "fullcodeline": "line = compile_continue(p, &cctx);"
    },
    {
        "line": 504,
        "fullcodeline": "line = compile_break(p, &cctx);"
    },
    {
        "line": 508,
        "fullcodeline": "line = compile_try(p, &cctx);"
    },
    {
        "line": 511,
        "fullcodeline": "line = compile_catch(p, &cctx);"
    },
    {
        "line": 512,
        "fullcodeline": "cctx.ctx_had_return = FALSE;"
    },
    {
        "line": 515,
        "fullcodeline": "line = compile_finally(p, &cctx);"
    },
    {
        "line": 516,
        "fullcodeline": "cctx.ctx_had_return = FALSE;"
    },
    {
        "line": 519,
        "fullcodeline": "line = compile_endtry(p, &cctx);"
    },
    {
        "line": 520,
        "fullcodeline": "cctx.ctx_had_return = FALSE;"
    },
    {
        "line": 523,
        "fullcodeline": "line = compile_throw(p, &cctx);"
    },
    {
        "line": 527,
        "fullcodeline": "line = compile_eval(p, &cctx);"
    },
    {
        "line": 536,
        "fullcodeline": "line = compile_mult_expr(p, ea.cmdidx, &cctx);"
    },
    {
        "line": 540,
        "fullcodeline": "ea.cmd = cmd;"
    },
    {
        "line": 541,
        "fullcodeline": "line = compile_put(p, &ea, &cctx);"
    },
    {
        "line": 557,
        "fullcodeline": "ea.arg = p;"
    },
    {
        "line": 558,
        "fullcodeline": "line = compile_redir(line, &ea, &cctx);"
    },
    {
        "line": 571,
        "fullcodeline": "ex_ni(&ea);"
    },
    {
        "line": 572,
        "fullcodeline": "line = NULL;"
    },
    {
        "line": 592,
        "fullcodeline": "line = (char_u *)\"\";"
    },
    {
        "line": 604,
        "fullcodeline": "ea.arg = p;"
    },
    {
        "line": 619,
        "fullcodeline": "ea.arg = p;"
    },
    {
        "line": 620,
        "fullcodeline": "line = compile_exec(line, &ea, &cctx);"
    },
    {
        "line": 694,
        "fullcodeline": "ufunc->uf_flags |= FC_CLOSURE;"
    },
    {
        "line": 713,
        "fullcodeline": "if (!dfunc->df_deleted && new_def_function"
    },
    {
        "line": 714,
        "fullcodeline": "&& ufunc->uf_dfunc_idx == def_functions.ga_len - 1)"
    },
    {
        "line": 735,
        "fullcodeline": "ret = FAIL;"
    },
    {
        "line": 110,
        "fullcodeline": "if (generate_JUMP_IF_ARG_SET(&cctx, i - count - off) == FAIL)"
    },
    {
        "line": 119,
        "fullcodeline": "if (r == FAIL)"
    },
    {
        "line": 127,
        "fullcodeline": "if (ufunc->uf_arg_types[arg_idx] == &t_unknown)"
    },
    {
        "line": 136,
        "fullcodeline": "if (generate_STORE(&cctx, ISN_STORE, i - count - off, NULL) == FAIL)"
    },
    {
        "line": 233,
        "fullcodeline": "scopetype_T stype = cctx.ctx_scope == NULL"
    },
    {
        "line": 254,
        "fullcodeline": "if (ends_excmd(*skipwhite(ea.cmd + 1)))"
    },
    {
        "line": 269,
        "fullcodeline": "if (errormsg != NULL)"
    },
    {
        "line": 282,
        "fullcodeline": "if (*p == ':')"
    },
    {
        "line": 292,
        "fullcodeline": "if (checkforcmd(&ea.cmd, \"call\", 3))"
    },
    {
        "line": 301,
        "fullcodeline": "if (!starts_with_colon)"
    },
    {
        "line": 326,
        "fullcodeline": "if (ea.cmd > cmd)"
    },
    {
        "line": 351,
        "fullcodeline": "if (cctx.ctx_skip != SKIP_YES)"
    },
    {
        "line": 412,
        "fullcodeline": "&& ea.cmdidx != CMD_finally"
    },
    {
        "line": 415,
        "fullcodeline": "emsg(_(e_unreachable_code_after_return));"
    },
    {
        "line": 423,
        "fullcodeline": "if (ea.cmdidx >= 0)"
    },
    {
        "line": 447,
        "fullcodeline": "emsg(_(e_cannot_use_let_in_vim9_script));"
    },
    {
        "line": 455,
        "fullcodeline": "if (line == p)"
    },
    {
        "line": 466,
        "fullcodeline": "emsg(_(e_import_can_only_be_used_in_script));"
    },
    {
        "line": 545,
        "fullcodeline": "if (check_global_and_subst(ea.cmd, p) == FAIL)"
    },
    {
        "line": 547,
        "fullcodeline": "if (cctx.ctx_skip == SKIP_YES)"
    },
    {
        "line": 586,
        "fullcodeline": "if (cctx.ctx_skip != SKIP_YES)"
    },
    {
        "line": 605,
        "fullcodeline": "if (vim_strchr(line, '\\n') == NULL)"
    },
    {
        "line": 614,
        "fullcodeline": "if (check_global_and_subst(ea.cmd, p) == FAIL)"
    },
    {
        "line": 641,
        "fullcodeline": "emsg(_(e_missing_endif));"
    },
    {
        "line": 734,
        "fullcodeline": "emsg(_(e_missing_redir_end));"
    },
    {
        "line": 130,
        "fullcodeline": "ufunc->uf_arg_types[arg_idx] = val_type;"
    },
    {
        "line": 236,
        "fullcodeline": "if (stype == BLOCK_SCOPE)"
    },
    {
        "line": 246,
        "fullcodeline": "if (line != NULL)"
    },
    {
        "line": 256,
        "fullcodeline": "line = compile_block(ea.cmd, &cctx);"
    },
    {
        "line": 283,
        "fullcodeline": "starts_with_colon = TRUE;"
    },
    {
        "line": 284,
        "fullcodeline": "if (p < ea.cmd && !VIM_ISWHITE(*p))"
    },
    {
        "line": 306,
        "fullcodeline": "assign = may_compile_assignment(&ea, &line, &cctx);"
    },
    {
        "line": 334,
        "fullcodeline": "ea.addr_count = 1;"
    },
    {
        "line": 384,
        "fullcodeline": "ea.cmdidx = CMD_return;"
    },
    {
        "line": 391,
        "fullcodeline": "if (cctx.ctx_skip == SKIP_YES && ea.cmdidx != CMD_eval)"
    },
    {
        "line": 393,
        "fullcodeline": "line += STRLEN(line);"
    },
    {
        "line": 411,
        "fullcodeline": "&& ea.cmdidx != CMD_catch"
    },
    {
        "line": 424,
        "fullcodeline": "ea.argt = excmd_get_argt(ea.cmdidx);"
    },
    {
        "line": 425,
        "fullcodeline": "if ((ea.argt & EX_BANG) && *p == '!')"
    },
    {
        "line": 427,
        "fullcodeline": "ea.forceit = TRUE;"
    },
    {
        "line": 428,
        "fullcodeline": "p = skipwhite(p + 1);"
    },
    {
        "line": 442,
        "fullcodeline": "local_cmdmod.cmod_flags & CMOD_LEGACY, &cctx);"
    },
    {
        "line": 456,
        "fullcodeline": "line = NULL;"
    },
    {
        "line": 548,
        "fullcodeline": "line = (char_u *)\"\";"
    },
    {
        "line": 606,
        "fullcodeline": "line = compile_exec(line, &ea, &cctx);"
    },
    {
        "line": 642,
        "fullcodeline": "else if (cctx.ctx_scope->se_type == WHILE_SCOPE)"
    },
    {
        "line": 655,
        "fullcodeline": "else if (ufunc->uf_ret_type->tt_type != VAR_VOID)"
    },
    {
        "line": 167,
        "fullcodeline": "else if (line != NULL && *skipwhite(line) != NUL"
    },
    {
        "line": 168,
        "fullcodeline": "&& !(*line == '#' && (line == cctx.ctx_line_start"
    },
    {
        "line": 238,
        "fullcodeline": "compile_endblock(&cctx);"
    },
    {
        "line": 239,
        "fullcodeline": "line = ea.cmd;"
    },
    {
        "line": 247,
        "fullcodeline": "line = skipwhite(ea.cmd + 1);"
    },
    {
        "line": 294,
        "fullcodeline": "if (*ea.cmd == '(')"
    },
    {
        "line": 307,
        "fullcodeline": "if (assign == OK)"
    },
    {
        "line": 309,
        "fullcodeline": "if (assign == FAIL)"
    },
    {
        "line": 323,
        "fullcodeline": "|| (cmd[0] == cmd[1] && (*cmd == '+' || *cmd == '-')))))"
    },
    {
        "line": 335,
        "fullcodeline": "if (ends_excmd2(line, ea.cmd))"
    },
    {
        "line": 352,
        "fullcodeline": "emsg(_(e_ambiguous_use_of_user_defined_command));"
    },
    {
        "line": 377,
        "fullcodeline": "semsg(_(e_cannot_use_legacy_with_command_str), ea.cmd);"
    },
    {
        "line": 386,
        "fullcodeline": "ea.cmdidx = CMD_legacy;"
    },
    {
        "line": 410,
        "fullcodeline": "&& ea.cmdidx != CMD_endwhile"
    },
    {
        "line": 551,
        "fullcodeline": "ea.arg = p;"
    },
    {
        "line": 552,
        "fullcodeline": "line = compile_substitute(line, &ea, &cctx);"
    },
    {
        "line": 588,
        "fullcodeline": "semsg(_(e_invalid_command_str), ea.cmd);"
    },
    {
        "line": 610,
        "fullcodeline": "line = compile_script(line, &cctx);"
    },
    {
        "line": 132,
        "fullcodeline": "else if (need_type_where(val_type, ufunc->uf_arg_types[arg_idx],"
    },
    {
        "line": 171,
        "fullcodeline": "semsg(_(e_trailing_characters_str), line);"
    },
    {
        "line": 296,
        "fullcodeline": "ea.cmd = p;"
    },
    {
        "line": 328,
        "fullcodeline": "if (!starts_with_colon"
    },
    {
        "line": 329,
        "fullcodeline": "&& !(local_cmdmod.cmod_flags & CMOD_LEGACY))"
    },
    {
        "line": 338,
        "fullcodeline": "generate_EXEC(&cctx, ISN_EXECRANGE,"
    },
    {
        "line": 340,
        "fullcodeline": "line = ea.cmd;"
    },
    {
        "line": 396,
        "fullcodeline": "else if (ea.cmdidx != CMD_eval)"
    },
    {
        "line": 409,
        "fullcodeline": "&& ea.cmdidx != CMD_endfor"
    },
    {
        "line": 643,
        "fullcodeline": "emsg(_(e_missing_endwhile));"
    },
    {
        "line": 657,
        "fullcodeline": "emsg(_(e_missing_return_statement));"
    },
    {
        "line": 727,
        "fullcodeline": "emsg(_(e_compiling_def_function_failed));"
    },
    {
        "line": 243,
        "fullcodeline": "emsg(_(e_using_rcurly_outside_if_block_scope));"
    },
    {
        "line": 298,
        "fullcodeline": "ea.cmd = skipwhite(ea.cmd);"
    },
    {
        "line": 331,
        "fullcodeline": "semsg(_(e_colon_required_before_range_str), cmd);"
    },
    {
        "line": 339,
        "fullcodeline": "vim_strnsave(cmd, ea.cmd - cmd));"
    },
    {
        "line": 408,
        "fullcodeline": "&& ea.cmdidx != CMD_endif"
    },
    {
        "line": 644,
        "fullcodeline": "else if (cctx.ctx_scope->se_type == FOR_SCOPE)"
    },
    {
        "line": 133,
        "fullcodeline": "-1, where, &cctx, FALSE, FALSE) == FAIL)"
    },
    {
        "line": 169,
        "fullcodeline": "|| VIM_ISWHITE(line[-1]))))"
    },
    {
        "line": 174,
        "fullcodeline": "else if (line != NULL && vim9_bad_comment(skipwhite(line)))"
    },
    {
        "line": 400,
        "fullcodeline": "semsg(_(e_command_not_recognized_str), ea.cmd);"
    },
    {
        "line": 407,
        "fullcodeline": "&& ea.cmdidx != CMD_else"
    },
    {
        "line": 178,
        "fullcodeline": "line = next_line_from_context(&cctx, FALSE);"
    },
    {
        "line": 406,
        "fullcodeline": "&& ea.cmdidx != CMD_elseif"
    },
    {
        "line": 645,
        "fullcodeline": "emsg(_(e_missing_endfor));"
    },
    {
        "line": 179,
        "fullcodeline": "if (cctx.ctx_lnum >= ufunc->uf_lines.ga_len)"
    },
    {
        "line": 190,
        "fullcodeline": "if (line != NULL)"
    },
    {
        "line": 647,
        "fullcodeline": "emsg(_(e_missing_rcurly));"
    },
    {
        "line": 192,
        "fullcodeline": "line = vim_strsave(line);"
    },
    {
        "line": 194,
        "fullcodeline": "line_to_free = line;"
    }
]