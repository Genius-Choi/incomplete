[
    {
        "line": 3,
        "fullcodeline": "struct dwc3_qcom\t*qcom = platform_get_drvdata(pdev);"
    },
    {
        "line": 4,
        "fullcodeline": "struct device\t\t*dev = &pdev->dev;"
    },
    {
        "line": 5,
        "fullcodeline": "struct resource\t\t*res, *child_res = NULL;"
    },
    {
        "line": 6,
        "fullcodeline": "struct platform_device\t*pdev_irq = qcom->urs_usb ? qcom->urs_usb :"
    },
    {
        "line": 11,
        "fullcodeline": "qcom->dwc3 = platform_device_alloc(\"dwc3\", PLATFORM_DEVID_AUTO);"
    },
    {
        "line": 15,
        "fullcodeline": "qcom->dwc3->dev.parent = dev;"
    },
    {
        "line": 16,
        "fullcodeline": "qcom->dwc3->dev.type = dev->type;"
    },
    {
        "line": 17,
        "fullcodeline": "qcom->dwc3->dev.dma_mask = dev->dma_mask;"
    },
    {
        "line": 18,
        "fullcodeline": "qcom->dwc3->dev.dma_parms = dev->dma_parms;"
    },
    {
        "line": 19,
        "fullcodeline": "qcom->dwc3->dev.coherent_dma_mask = dev->coherent_dma_mask;"
    },
    {
        "line": 21,
        "fullcodeline": "child_res = kcalloc(2, sizeof(*child_res), GFP_KERNEL);"
    },
    {
        "line": 27,
        "fullcodeline": "res = platform_get_resource(pdev, IORESOURCE_MEM, 0);"
    },
    {
        "line": 34,
        "fullcodeline": "child_res[0].flags = res->flags;"
    },
    {
        "line": 35,
        "fullcodeline": "child_res[0].start = res->start;"
    },
    {
        "line": 36,
        "fullcodeline": "child_res[0].end = child_res[0].start +"
    },
    {
        "line": 39,
        "fullcodeline": "irq = platform_get_irq(pdev_irq, 0);"
    },
    {
        "line": 44,
        "fullcodeline": "child_res[1].flags = IORESOURCE_IRQ;"
    },
    {
        "line": 45,
        "fullcodeline": "child_res[1].start = child_res[1].end = irq;"
    },
    {
        "line": 47,
        "fullcodeline": "ret = platform_device_add_resources(qcom->dwc3, child_res, 2);"
    },
    {
        "line": 53,
        "fullcodeline": "ret = device_add_software_node(&qcom->dwc3->dev, &dwc3_qcom_swnode);"
    },
    {
        "line": 59,
        "fullcodeline": "ret = platform_device_add(qcom->dwc3);"
    },
    {
        "line": 65,
        "fullcodeline": "kfree(child_res);"
    },
    {
        "line": 69,
        "fullcodeline": "platform_device_put(qcom->dwc3);"
    },
    {
        "line": 70,
        "fullcodeline": "kfree(child_res);"
    },
    {
        "line": 12,
        "fullcodeline": "if (!qcom->dwc3)"
    },
    {
        "line": 22,
        "fullcodeline": "if (!child_res) {"
    },
    {
        "line": 28,
        "fullcodeline": "if (!res) {"
    },
    {
        "line": 40,
        "fullcodeline": "if (irq < 0) {"
    },
    {
        "line": 54,
        "fullcodeline": "if (ret < 0) {"
    },
    {
        "line": 23,
        "fullcodeline": "platform_device_put(qcom->dwc3);"
    },
    {
        "line": 29,
        "fullcodeline": "dev_err(&pdev->dev, \"failed to get memory resource\\n\");"
    },
    {
        "line": 30,
        "fullcodeline": "ret = -ENODEV;"
    },
    {
        "line": 41,
        "fullcodeline": "ret = irq;"
    },
    {
        "line": 49,
        "fullcodeline": "dev_err(&pdev->dev, \"failed to add resources\\n\");"
    },
    {
        "line": 55,
        "fullcodeline": "dev_err(&pdev->dev, \"failed to add properties\\n\");"
    },
    {
        "line": 61,
        "fullcodeline": "dev_err(&pdev->dev, \"failed to add device\\n\");"
    },
    {
        "line": 62,
        "fullcodeline": "device_remove_software_node(&qcom->dwc3->dev);"
    },
    {
        "line": 13,
        "fullcodeline": "return -ENOMEM;"
    },
    {
        "line": 24,
        "fullcodeline": "return -ENOMEM;"
    }
]