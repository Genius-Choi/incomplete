[
    {
        "line": 9,
        "fullcodeline": "i = GET_BE_U_4(lfp->int_part);"
    },
    {
        "line": 10,
        "fullcodeline": "uf = GET_BE_U_4(lfp->fraction);"
    },
    {
        "line": 11,
        "fullcodeline": "ff = uf;"
    },
    {
        "line": 14,
        "fullcodeline": "ff = ff / FMAXINT;\t\t\t/* shift radix point by 32 bits */"
    },
    {
        "line": 15,
        "fullcodeline": "f = (uint32_t)(ff * 1000000000.0);\t/* treat fraction as parts per billion */"
    },
    {
        "line": 16,
        "fullcodeline": "ND_PRINT(\"%u.%09u\", i, f);"
    },
    {
        "line": 12,
        "fullcodeline": "if (ff < 0.0)\t\t/* some compilers are buggy */"
    },
    {
        "line": 13,
        "fullcodeline": "ff += FMAXINT;"
    },
    {
        "line": 22,
        "fullcodeline": "int64_t seconds_64bit = (int64_t)i - JAN_1970;"
    },
    {
        "line": 25,
        "fullcodeline": "char time_buf[128];"
    },
    {
        "line": 27,
        "fullcodeline": "seconds = (time_t)seconds_64bit;"
    },
    {
        "line": 28,
        "fullcodeline": "if (seconds != seconds_64bit) {"
    },
    {
        "line": 33,
        "fullcodeline": "ND_PRINT(\" (unrepresentable)\");"
    },
    {
        "line": 35,
        "fullcodeline": "tm = gmtime(&seconds);"
    },
    {
        "line": 36,
        "fullcodeline": "if (tm == NULL) {"
    },
    {
        "line": 45,
        "fullcodeline": "strftime(time_buf, sizeof (time_buf), \"%Y-%m-%dT%H:%M:%SZ\", tm);"
    }
]