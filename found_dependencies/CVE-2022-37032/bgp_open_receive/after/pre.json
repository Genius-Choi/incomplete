[
    {
        "line": 12,
        "fullcodeline": "u_int8_t notify_data_remote_as[2];"
    },
    {
        "line": 13,
        "fullcodeline": "u_int8_t notify_data_remote_id[4];"
    },
    {
        "line": 15,
        "fullcodeline": "realpeer = NULL;"
    },
    {
        "line": 18,
        "fullcodeline": "version = stream_getc (peer->ibuf);"
    },
    {
        "line": 19,
        "fullcodeline": "memcpy (notify_data_remote_as, stream_pnt (peer->ibuf), 2);"
    },
    {
        "line": 20,
        "fullcodeline": "remote_as  = stream_getw (peer->ibuf);"
    },
    {
        "line": 21,
        "fullcodeline": "holdtime = stream_getw (peer->ibuf);"
    },
    {
        "line": 22,
        "fullcodeline": "memcpy (notify_data_remote_id, stream_pnt (peer->ibuf), 4);"
    },
    {
        "line": 23,
        "fullcodeline": "remote_id.s_addr = stream_get_ipv4 (peer->ibuf);"
    },
    {
        "line": 67,
        "fullcodeline": "ret = bgp_collision_detect (peer, remote_id);"
    },
    {
        "line": 143,
        "fullcodeline": "peer->remote_id = remote_id;"
    },
    {
        "line": 202,
        "fullcodeline": "peer->v_keepalive = peer->v_holdtime / 3;"
    },
    {
        "line": 205,
        "fullcodeline": "capability = 0;"
    },
    {
        "line": 206,
        "fullcodeline": "optlen = stream_getc (peer->ibuf);"
    },
    {
        "line": 230,
        "fullcodeline": "bgp_getsockname (peer);"
    },
    {
        "line": 232,
        "fullcodeline": "BGP_EVENT_ADD (peer, Receive_OPEN_message);"
    },
    {
        "line": 26,
        "fullcodeline": "if (BGP_DEBUG (normal, NORMAL))"
    },
    {
        "line": 32,
        "fullcodeline": "if (CHECK_FLAG (peer->sflags, PEER_STATUS_ACCEPT_PEER))"
    },
    {
        "line": 68,
        "fullcodeline": "if (ret < 0)"
    },
    {
        "line": 72,
        "fullcodeline": "if (CHECK_FLAG (peer->sflags, PEER_STATUS_ACCEPT_PEER))"
    },
    {
        "line": 146,
        "fullcodeline": "if (version != BGP_VERSION_4)"
    },
    {
        "line": 160,
        "fullcodeline": "if (remote_as != peer->as)"
    },
    {
        "line": 192,
        "fullcodeline": "if (CHECK_FLAG (peer->config, PEER_CONFIG_TIMER))"
    },
    {
        "line": 197,
        "fullcodeline": "if (holdtime < send_holdtime)"
    },
    {
        "line": 207,
        "fullcodeline": "if (optlen != 0)"
    },
    {
        "line": 27,
        "fullcodeline": "zlog_debug (\"%s rcv OPEN, version %d, remote-as %d, holdtime %d, id %s\","
    },
    {
        "line": 34,
        "fullcodeline": "int as = 0;"
    },
    {
        "line": 36,
        "fullcodeline": "realpeer = peer_lookup_with_open (&peer->su, remote_as, &remote_id, &as);"
    },
    {
        "line": 99,
        "fullcodeline": "bgp_stop (realpeer);"
    },
    {
        "line": 102,
        "fullcodeline": "realpeer->fd = peer->fd;"
    },
    {
        "line": 103,
        "fullcodeline": "peer->fd = -1;"
    },
    {
        "line": 107,
        "fullcodeline": "realpeer->ibuf = peer->ibuf;"
    },
    {
        "line": 108,
        "fullcodeline": "realpeer->packet_size = peer->packet_size;"
    },
    {
        "line": 109,
        "fullcodeline": "peer->ibuf = NULL;"
    },
    {
        "line": 112,
        "fullcodeline": "realpeer->status = peer->status;"
    },
    {
        "line": 116,
        "fullcodeline": "peer = realpeer;"
    },
    {
        "line": 117,
        "fullcodeline": "bgp_open_send (peer);"
    },
    {
        "line": 124,
        "fullcodeline": "BGP_READ_ON (peer->t_read, bgp_read, peer->fd);"
    },
    {
        "line": 128,
        "fullcodeline": "if (remote_id.s_addr == 0"
    },
    {
        "line": 130,
        "fullcodeline": "|| ntohl (peer->local_id.s_addr) == ntohl (remote_id.s_addr))"
    },
    {
        "line": 148,
        "fullcodeline": "u_int8_t maxver = BGP_VERSION_4;"
    },
    {
        "line": 152,
        "fullcodeline": "bgp_notify_send_with_data (peer,"
    },
    {
        "line": 178,
        "fullcodeline": "if (holdtime < 3 && holdtime != 0)"
    },
    {
        "line": 180,
        "fullcodeline": "bgp_notify_send (peer,"
    },
    {
        "line": 193,
        "fullcodeline": "send_holdtime = peer->holdtime;"
    },
    {
        "line": 198,
        "fullcodeline": "peer->v_holdtime = holdtime;"
    },
    {
        "line": 209,
        "fullcodeline": "ret = bgp_open_option_parse (peer, optlen, &capability);"
    },
    {
        "line": 221,
        "fullcodeline": "if (! capability || CHECK_FLAG (peer->flags, PEER_FLAG_OVERRIDE_CAPABILITY))"
    },
    {
        "line": 29,
        "fullcodeline": "inet_ntoa (remote_id));"
    },
    {
        "line": 38,
        "fullcodeline": "if (! realpeer)"
    },
    {
        "line": 118,
        "fullcodeline": "if (peer->fd < 0)"
    },
    {
        "line": 129,
        "fullcodeline": "|| ntohl (remote_id.s_addr) >= 0xe0000000"
    },
    {
        "line": 139,
        "fullcodeline": "return -1;"
    },
    {
        "line": 156,
        "fullcodeline": "return -1;"
    },
    {
        "line": 169,
        "fullcodeline": "return -1;"
    },
    {
        "line": 183,
        "fullcodeline": "return -1;"
    },
    {
        "line": 195,
        "fullcodeline": "send_holdtime = peer->bgp->default_holdtime;"
    },
    {
        "line": 200,
        "fullcodeline": "peer->v_holdtime = send_holdtime;"
    },
    {
        "line": 210,
        "fullcodeline": "if (ret < 0)"
    },
    {
        "line": 74,
        "fullcodeline": "if (realpeer->status == Established"
    },
    {
        "line": 75,
        "fullcodeline": "&& CHECK_FLAG (realpeer->sflags, PEER_STATUS_NSF_MODE))"
    },
    {
        "line": 77,
        "fullcodeline": "realpeer->last_reset = PEER_DOWN_NSF_CLOSE_SESSION;"
    },
    {
        "line": 78,
        "fullcodeline": "SET_FLAG (realpeer->sflags, PEER_STATUS_NSF_WAIT);"
    },
    {
        "line": 96,
        "fullcodeline": "zlog_debug (\"%s [Event] Transfer temporary BGP peer to existing one\","
    },
    {
        "line": 133,
        "fullcodeline": "zlog_debug (\"%s bad OPEN, wrong router identifier %s\","
    },
    {
        "line": 150,
        "fullcodeline": "zlog_debug (\"%s bad protocol version, remote requested %d, local request %d\","
    },
    {
        "line": 163,
        "fullcodeline": "zlog_debug (\"%s bad OPEN, remote AS is %d, expected %d\","
    },
    {
        "line": 61,
        "fullcodeline": "return -1;"
    },
    {
        "line": 122,
        "fullcodeline": "return -1;"
    },
    {
        "line": 134,
        "fullcodeline": "peer->host, inet_ntoa (remote_id));"
    },
    {
        "line": 216,
        "fullcodeline": "zlog_debug (\"%s rcvd OPEN w/ OPTION parameter len: 0\","
    },
    {
        "line": 48,
        "fullcodeline": "bgp_notify_send_with_data (peer, BGP_NOTIFY_OPEN_ERR,"
    },
    {
        "line": 45,
        "fullcodeline": "if (BGP_DEBUG (normal, NORMAL))"
    },
    {
        "line": 57,
        "fullcodeline": "bgp_notify_send_with_data (peer, BGP_NOTIFY_OPEN_ERR,"
    },
    {
        "line": 80,
        "fullcodeline": "else if (ret == 0 && realpeer->status != Active"
    },
    {
        "line": 82,
        "fullcodeline": "&& realpeer->status != OpenConfirm)"
    },
    {
        "line": 89,
        "fullcodeline": "bgp_notify_send (peer, BGP_NOTIFY_CEASE,"
    },
    {
        "line": 46,
        "fullcodeline": "zlog_debug (\"%s bad OPEN, wrong router identifier %s\","
    },
    {
        "line": 54,
        "fullcodeline": "if (BGP_DEBUG (normal, NORMAL))"
    },
    {
        "line": 81,
        "fullcodeline": "&& realpeer->status != OpenSent"
    },
    {
        "line": 92,
        "fullcodeline": "return -1;"
    },
    {
        "line": 47,
        "fullcodeline": "peer->host, inet_ntoa (remote_id));"
    },
    {
        "line": 55,
        "fullcodeline": "zlog_debug (\"%s bad OPEN, remote AS is %d, expected %d\","
    },
    {
        "line": 87,
        "fullcodeline": "realpeer->host, LOOKUP (bgp_status_msg,"
    }
]