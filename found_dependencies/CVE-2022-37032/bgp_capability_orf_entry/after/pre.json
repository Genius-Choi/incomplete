[
    {
        "line": 3,
        "fullcodeline": "struct stream *s = BGP_INPUT (peer);"
    },
    {
        "line": 9,
        "fullcodeline": "u_int16_t sm_cap = 0; /* capability send-mode receive */"
    },
    {
        "line": 10,
        "fullcodeline": "u_int16_t rm_cap = 0; /* capability receive-mode receive */"
    },
    {
        "line": 14,
        "fullcodeline": "bgp_capability_mp_data (s, &entry.mpc);"
    },
    {
        "line": 15,
        "fullcodeline": "entry.num = stream_getc (s);"
    },
    {
        "line": 16,
        "fullcodeline": "afi = entry.mpc.afi;"
    },
    {
        "line": 17,
        "fullcodeline": "safi = entry.mpc.safi;"
    },
    {
        "line": 19,
        "fullcodeline": "if (BGP_DEBUG (normal, NORMAL))"
    },
    {
        "line": 24,
        "fullcodeline": "if (!bgp_afi_safi_valid_indices (entry.mpc.afi, &safi))"
    },
    {
        "line": 33,
        "fullcodeline": "if (sizeof (struct capability_orf_entry) + (entry.num * 2) > hdr->length)"
    },
    {
        "line": 42,
        "fullcodeline": "for (i = 0 ; i < entry.num ; i++)"
    },
    {
        "line": 20,
        "fullcodeline": "zlog_debug (\"%s ORF Cap entry for afi/safi: %u/%u\","
    },
    {
        "line": 26,
        "fullcodeline": "zlog_info (\"%s Addr-family %d/%d not supported.\""
    },
    {
        "line": 35,
        "fullcodeline": "zlog_info (\"%s ORF Capability entry length error,\""
    },
    {
        "line": 38,
        "fullcodeline": "bgp_notify_send (peer, BGP_NOTIFY_CEASE, 0);"
    },
    {
        "line": 44,
        "fullcodeline": "type = stream_getc(s);"
    },
    {
        "line": 45,
        "fullcodeline": "mode = stream_getc(s);"
    },
    {
        "line": 39,
        "fullcodeline": "return -1;"
    },
    {
        "line": 103,
        "fullcodeline": "if (hdr->code == CAPABILITY_CODE_ORF)"
    },
    {
        "line": 55,
        "fullcodeline": "bgp_capability_orf_not_support (peer, afi, safi, type, mode);"
    },
    {
        "line": 83,
        "fullcodeline": "bgp_capability_orf_not_support (peer, afi, safi, type, mode);"
    },
    {
        "line": 88,
        "fullcodeline": "if (!((afi == AFI_IP && safi == SAFI_UNICAST)"
    },
    {
        "line": 92,
        "fullcodeline": "bgp_capability_orf_not_support (peer, afi, safi, type, mode);"
    },
    {
        "line": 97,
        "fullcodeline": "zlog_debug (\"%s OPEN has %s ORF capability\""
    },
    {
        "line": 105,
        "fullcodeline": "sm_cap = PEER_CAP_ORF_PREFIX_SM_RCV;"
    },
    {
        "line": 106,
        "fullcodeline": "rm_cap = PEER_CAP_ORF_PREFIX_RM_RCV;"
    },
    {
        "line": 122,
        "fullcodeline": "SET_FLAG (peer->af_cap[afi][safi], sm_cap);"
    },
    {
        "line": 123,
        "fullcodeline": "SET_FLAG (peer->af_cap[afi][safi], rm_cap);"
    },
    {
        "line": 126,
        "fullcodeline": "SET_FLAG (peer->af_cap[afi][safi], sm_cap);"
    },
    {
        "line": 129,
        "fullcodeline": "SET_FLAG (peer->af_cap[afi][safi], rm_cap);"
    },
    {
        "line": 90,
        "fullcodeline": "|| (afi == AFI_IP6 && safi == SAFI_UNICAST)))"
    },
    {
        "line": 99,
        "fullcodeline": "peer->host, LOOKUP (orf_type_str, type),"
    },
    {
        "line": 100,
        "fullcodeline": "LOOKUP (orf_mode_str, mode),"
    },
    {
        "line": 68,
        "fullcodeline": "bgp_capability_orf_not_support (peer, afi, safi, type, mode);"
    },
    {
        "line": 78,
        "fullcodeline": "bgp_capability_orf_not_support (peer, afi, safi, type, mode);"
    },
    {
        "line": 89,
        "fullcodeline": "|| (afi == AFI_IP && safi == SAFI_MULTICAST)"
    },
    {
        "line": 108,
        "fullcodeline": "else if (hdr->code == CAPABILITY_CODE_ORF_OLD)"
    },
    {
        "line": 110,
        "fullcodeline": "sm_cap = PEER_CAP_ORF_PREFIX_SM_OLD_RCV;"
    },
    {
        "line": 111,
        "fullcodeline": "rm_cap = PEER_CAP_ORF_PREFIX_RM_OLD_RCV;"
    },
    {
        "line": 115,
        "fullcodeline": "bgp_capability_orf_not_support (peer, afi, safi, type, mode);"
    }
]