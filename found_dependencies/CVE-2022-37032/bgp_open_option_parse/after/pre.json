[
    {
        "line": 5,
        "fullcodeline": "u_char error_data[BGP_MAX_PACKET_SIZE];"
    },
    {
        "line": 6,
        "fullcodeline": "struct stream *s = BGP_INPUT(peer);"
    },
    {
        "line": 7,
        "fullcodeline": "size_t end = stream_get_getp (s) + length;"
    },
    {
        "line": 9,
        "fullcodeline": "ret = 0;"
    },
    {
        "line": 10,
        "fullcodeline": "error = error_data;"
    },
    {
        "line": 12,
        "fullcodeline": "if (BGP_DEBUG (normal, NORMAL))"
    },
    {
        "line": 16,
        "fullcodeline": "while (stream_get_getp(s) < end)"
    },
    {
        "line": 75,
        "fullcodeline": "if (CHECK_FLAG (peer->flags, PEER_FLAG_STRICT_CAP_MATCH))"
    },
    {
        "line": 13,
        "fullcodeline": "zlog_debug (\"%s rcv OPEN w/ OPTION parameter len: %u\","
    },
    {
        "line": 30,
        "fullcodeline": "opt_type = stream_getc (s);"
    },
    {
        "line": 31,
        "fullcodeline": "opt_length = stream_getc (s);"
    },
    {
        "line": 100,
        "fullcodeline": "if (*capability && ! CHECK_FLAG (peer->flags, PEER_FLAG_OVERRIDE_CAPABILITY))"
    },
    {
        "line": 22,
        "fullcodeline": "if (STREAM_READABLE(s) < 2)"
    },
    {
        "line": 34,
        "fullcodeline": "if (STREAM_READABLE (s) < opt_length)"
    },
    {
        "line": 41,
        "fullcodeline": "if (BGP_DEBUG (normal, NORMAL))"
    },
    {
        "line": 69,
        "fullcodeline": "if (ret < 0)"
    },
    {
        "line": 78,
        "fullcodeline": "if (error != error_data)"
    },
    {
        "line": 24,
        "fullcodeline": "zlog_info (\"%s Option length error\", peer->host);"
    },
    {
        "line": 25,
        "fullcodeline": "bgp_notify_send (peer, BGP_NOTIFY_CEASE, 0);"
    },
    {
        "line": 36,
        "fullcodeline": "zlog_info (\"%s Option length error\", peer->host);"
    },
    {
        "line": 42,
        "fullcodeline": "zlog_debug (\"%s rcvd OPEN w/ optional parameter type %u (%s) len %u\","
    },
    {
        "line": 51,
        "fullcodeline": "ret = bgp_auth_parse (peer, opt_length);"
    },
    {
        "line": 54,
        "fullcodeline": "ret = bgp_capability_parse (peer, opt_length, &error);"
    },
    {
        "line": 55,
        "fullcodeline": "*capability = 1;"
    },
    {
        "line": 58,
        "fullcodeline": "bgp_notify_send (peer,"
    },
    {
        "line": 61,
        "fullcodeline": "ret = -1;"
    },
    {
        "line": 89,
        "fullcodeline": "if (! strict_capability_same (peer))"
    },
    {
        "line": 102,
        "fullcodeline": "if (! peer->afc_nego[AFI_IP][SAFI_UNICAST]"
    },
    {
        "line": 106,
        "fullcodeline": "&& ! peer->afc_nego[AFI_IP6][SAFI_MULTICAST])"
    },
    {
        "line": 108,
        "fullcodeline": "plog_err (peer->log, \"%s [Error] No common capability\", peer->host);"
    },
    {
        "line": 26,
        "fullcodeline": "return -1;"
    },
    {
        "line": 38,
        "fullcodeline": "return -1;"
    },
    {
        "line": 44,
        "fullcodeline": "opt_type == BGP_OPEN_OPT_AUTH ? \"Authentication\" :"
    },
    {
        "line": 70,
        "fullcodeline": "return -1;"
    },
    {
        "line": 83,
        "fullcodeline": "error_data, error - error_data);"
    },
    {
        "line": 84,
        "fullcodeline": "return -1;"
    },
    {
        "line": 94,
        "fullcodeline": "return -1;"
    },
    {
        "line": 105,
        "fullcodeline": "&& ! peer->afc_nego[AFI_IP6][SAFI_UNICAST]"
    },
    {
        "line": 110,
        "fullcodeline": "if (error != error_data)"
    },
    {
        "line": 120,
        "fullcodeline": "return -1;"
    },
    {
        "line": 45,
        "fullcodeline": "opt_type == BGP_OPEN_OPT_CAP ? \"Capability\" : \"Unknown\","
    },
    {
        "line": 104,
        "fullcodeline": "&& ! peer->afc_nego[AFI_IP][SAFI_MPLS_VPN]"
    },
    {
        "line": 103,
        "fullcodeline": "&& ! peer->afc_nego[AFI_IP][SAFI_MULTICAST]"
    },
    {
        "line": 115,
        "fullcodeline": "error_data, error - error_data);"
    }
]