[
    {
        "line": 9,
        "fullcodeline": "u_char error_data[BGP_MAX_PACKET_SIZE];"
    },
    {
        "line": 12,
        "fullcodeline": "pnt = stream_pnt (peer->ibuf);"
    },
    {
        "line": 14,
        "fullcodeline": "ret = 0;"
    },
    {
        "line": 15,
        "fullcodeline": "opt_type = 0;"
    },
    {
        "line": 16,
        "fullcodeline": "opt_length = 0;"
    },
    {
        "line": 17,
        "fullcodeline": "end = pnt + length;"
    },
    {
        "line": 18,
        "fullcodeline": "error = error_data;"
    },
    {
        "line": 20,
        "fullcodeline": "if (BGP_DEBUG (normal, NORMAL))"
    },
    {
        "line": 24,
        "fullcodeline": "while (pnt < end)"
    },
    {
        "line": 83,
        "fullcodeline": "if (CHECK_FLAG (peer->flags, PEER_FLAG_STRICT_CAP_MATCH))"
    },
    {
        "line": 108,
        "fullcodeline": "if (*capability && ! CHECK_FLAG (peer->flags, PEER_FLAG_OVERRIDE_CAPABILITY))"
    },
    {
        "line": 21,
        "fullcodeline": "zlog_debug (\"%s rcv OPEN w/ OPTION parameter len: %u\","
    },
    {
        "line": 78,
        "fullcodeline": "pnt += opt_length;"
    },
    {
        "line": 27,
        "fullcodeline": "if (pnt + 2 > end)"
    },
    {
        "line": 39,
        "fullcodeline": "if (pnt + opt_length > end)"
    },
    {
        "line": 46,
        "fullcodeline": "if (BGP_DEBUG (normal, NORMAL))"
    },
    {
        "line": 74,
        "fullcodeline": "if (ret < 0)"
    },
    {
        "line": 86,
        "fullcodeline": "if (error != error_data)"
    },
    {
        "line": 97,
        "fullcodeline": "if (! strict_capability_same (peer))"
    },
    {
        "line": 110,
        "fullcodeline": "if (! peer->afc_nego[AFI_IP][SAFI_UNICAST]"
    },
    {
        "line": 29,
        "fullcodeline": "zlog_info (\"%s Option length error\", peer->host);"
    },
    {
        "line": 30,
        "fullcodeline": "bgp_notify_send (peer, BGP_NOTIFY_CEASE, 0);"
    },
    {
        "line": 35,
        "fullcodeline": "opt_type = *pnt++;"
    },
    {
        "line": 36,
        "fullcodeline": "opt_length = *pnt++;"
    },
    {
        "line": 41,
        "fullcodeline": "zlog_info (\"%s Option length error\", peer->host);"
    },
    {
        "line": 42,
        "fullcodeline": "bgp_notify_send (peer, BGP_NOTIFY_CEASE, 0);"
    },
    {
        "line": 47,
        "fullcodeline": "zlog_debug (\"%s rcvd OPEN w/ optional parameter type %u (%s) len %u\","
    },
    {
        "line": 56,
        "fullcodeline": "ret = bgp_auth_parse (peer, pnt, opt_length);"
    },
    {
        "line": 59,
        "fullcodeline": "ret = bgp_capability_parse (peer, pnt, opt_length, &error);"
    },
    {
        "line": 60,
        "fullcodeline": "*capability = 1;"
    },
    {
        "line": 63,
        "fullcodeline": "bgp_notify_send (peer,"
    },
    {
        "line": 66,
        "fullcodeline": "ret = -1;"
    },
    {
        "line": 88,
        "fullcodeline": "bgp_notify_send_with_data (peer,"
    },
    {
        "line": 99,
        "fullcodeline": "bgp_notify_send (peer,"
    },
    {
        "line": 116,
        "fullcodeline": "plog_err (peer->log, \"%s [Error] No common capability\", peer->host);"
    },
    {
        "line": 31,
        "fullcodeline": "return -1;"
    },
    {
        "line": 43,
        "fullcodeline": "return -1;"
    },
    {
        "line": 49,
        "fullcodeline": "opt_type == BGP_OPEN_OPT_AUTH ? \"Authentication\" :"
    },
    {
        "line": 75,
        "fullcodeline": "return -1;"
    },
    {
        "line": 91,
        "fullcodeline": "error_data, error - error_data);"
    },
    {
        "line": 92,
        "fullcodeline": "return -1;"
    },
    {
        "line": 102,
        "fullcodeline": "return -1;"
    },
    {
        "line": 118,
        "fullcodeline": "if (error != error_data)"
    },
    {
        "line": 128,
        "fullcodeline": "return -1;"
    },
    {
        "line": 50,
        "fullcodeline": "opt_type == BGP_OPEN_OPT_CAP ? \"Capability\" : \"Unknown\","
    },
    {
        "line": 120,
        "fullcodeline": "bgp_notify_send_with_data (peer,"
    },
    {
        "line": 123,
        "fullcodeline": "error_data, error - error_data);"
    },
    {
        "line": 125,
        "fullcodeline": "bgp_notify_send (peer,"
    }
]