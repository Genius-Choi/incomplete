[
    {
        "line": 8,
        "fullcodeline": "end = pnt + length;"
    },
    {
        "line": 10,
        "fullcodeline": "while (pnt < end)"
    },
    {
        "line": 16,
        "fullcodeline": "memcpy (&cap, pnt, sizeof (struct capability));"
    },
    {
        "line": 18,
        "fullcodeline": "afi = ntohs(cap.mpc.afi);"
    },
    {
        "line": 19,
        "fullcodeline": "safi = cap.mpc.safi;"
    },
    {
        "line": 192,
        "fullcodeline": "pnt += cap.length + 2;"
    },
    {
        "line": 21,
        "fullcodeline": "if (BGP_DEBUG (normal, NORMAL))"
    },
    {
        "line": 26,
        "fullcodeline": "if (pnt + 2 > end)"
    },
    {
        "line": 34,
        "fullcodeline": "if (pnt + (cap.length + 2) > end)"
    },
    {
        "line": 42,
        "fullcodeline": "if (cap.code == CAPABILITY_CODE_MP)"
    },
    {
        "line": 22,
        "fullcodeline": "zlog_debug (\"%s OPEN has CAPABILITY code: %d, length %d\","
    },
    {
        "line": 28,
        "fullcodeline": "zlog_info (\"%s Capability length error\", peer->host);"
    },
    {
        "line": 29,
        "fullcodeline": "bgp_notify_send (peer, BGP_NOTIFY_CEASE, 0);"
    },
    {
        "line": 36,
        "fullcodeline": "zlog_info (\"%s Capability length error\", peer->host);"
    },
    {
        "line": 30,
        "fullcodeline": "return -1;"
    },
    {
        "line": 38,
        "fullcodeline": "return -1;"
    },
    {
        "line": 44,
        "fullcodeline": "if (BGP_DEBUG (normal, NORMAL))"
    },
    {
        "line": 49,
        "fullcodeline": "if (! CHECK_FLAG (peer->flags, PEER_FLAG_OVERRIDE_CAPABILITY))"
    },
    {
        "line": 45,
        "fullcodeline": "zlog_debug (\"%s OPEN has MP_EXT CAP for afi/safi: %u/%u\","
    },
    {
        "line": 52,
        "fullcodeline": "ret = bgp_capability_mp (peer, &cap);"
    },
    {
        "line": 63,
        "fullcodeline": "else if (cap.code == CAPABILITY_CODE_REFRESH"
    },
    {
        "line": 55,
        "fullcodeline": "if (ret < 0)"
    },
    {
        "line": 64,
        "fullcodeline": "|| cap.code == CAPABILITY_CODE_REFRESH_OLD)"
    },
    {
        "line": 58,
        "fullcodeline": "memcpy (*error, &cap, cap.length + 2);"
    },
    {
        "line": 59,
        "fullcodeline": "*error += cap.length + 2;"
    },
    {
        "line": 67,
        "fullcodeline": "if (cap.length != CAPABILITY_CODE_REFRESH_LEN)"
    },
    {
        "line": 75,
        "fullcodeline": "if (BGP_DEBUG (normal, NORMAL))"
    },
    {
        "line": 81,
        "fullcodeline": "if (cap.code == CAPABILITY_CODE_REFRESH_OLD)"
    },
    {
        "line": 69,
        "fullcodeline": "zlog_info (\"%s Route Refresh Capability length error %d\","
    },
    {
        "line": 76,
        "fullcodeline": "zlog_debug (\"%s OPEN has ROUTE-REFRESH capability(%s) for all address-families\","
    },
    {
        "line": 82,
        "fullcodeline": "SET_FLAG (peer->cap, PEER_CAP_REFRESH_OLD_RCV);"
    },
    {
        "line": 86,
        "fullcodeline": "else if (cap.code == CAPABILITY_CODE_ORF"
    },
    {
        "line": 72,
        "fullcodeline": "return -1;"
    },
    {
        "line": 84,
        "fullcodeline": "SET_FLAG (peer->cap, PEER_CAP_REFRESH_NEW_RCV);"
    },
    {
        "line": 87,
        "fullcodeline": "|| cap.code == CAPABILITY_CODE_ORF_OLD)"
    },
    {
        "line": 88,
        "fullcodeline": "bgp_capability_orf (peer, &cap, pnt + sizeof (struct capability));"
    },
    {
        "line": 78,
        "fullcodeline": "cap.code == CAPABILITY_CODE_REFRESH_OLD ? \"old\" : \"new\");"
    },
    {
        "line": 89,
        "fullcodeline": "else if (cap.code == CAPABILITY_CODE_RESTART)"
    },
    {
        "line": 93,
        "fullcodeline": "int restart_bit = 0;"
    },
    {
        "line": 106,
        "fullcodeline": "SET_FLAG (peer->cap, PEER_CAP_RESTART_RCV);"
    },
    {
        "line": 107,
        "fullcodeline": "restart_flag_time = ntohs(cap.mpc.afi);"
    },
    {
        "line": 110,
        "fullcodeline": "UNSET_FLAG (restart_flag_time, 0xF000);"
    },
    {
        "line": 111,
        "fullcodeline": "peer->v_gr_restart = restart_flag_time;"
    },
    {
        "line": 121,
        "fullcodeline": "restart_pnt = pnt + 4;"
    },
    {
        "line": 122,
        "fullcodeline": "restart_end = pnt + cap.length + 2;"
    },
    {
        "line": 98,
        "fullcodeline": "if (cap.length < CAPABILITY_CODE_RESTART_LEN)"
    },
    {
        "line": 108,
        "fullcodeline": "if (CHECK_FLAG (restart_flag_time, RESTART_R_BIT))"
    },
    {
        "line": 113,
        "fullcodeline": "if (BGP_DEBUG (normal, NORMAL))"
    },
    {
        "line": 124,
        "fullcodeline": "while (restart_pnt < restart_end)"
    },
    {
        "line": 100,
        "fullcodeline": "zlog_info (\"%s Graceful Restart Capability length error %d\","
    },
    {
        "line": 109,
        "fullcodeline": "restart_bit = 1;"
    },
    {
        "line": 115,
        "fullcodeline": "zlog_debug (\"%s OPEN has Graceful Restart capability\", peer->host);"
    },
    {
        "line": 116,
        "fullcodeline": "zlog_debug (\"%s Peer has%srestarted. Restart Time : %d\","
    },
    {
        "line": 126,
        "fullcodeline": "memcpy (&graf, restart_pnt, sizeof (struct graceful_restart_af));"
    },
    {
        "line": 128,
        "fullcodeline": "afi = ntohs(graf.afi);"
    },
    {
        "line": 129,
        "fullcodeline": "safi = graf.safi;"
    },
    {
        "line": 157,
        "fullcodeline": "restart_pnt += 4;"
    },
    {
        "line": 160,
        "fullcodeline": "else if (cap.code == CAPABILITY_CODE_DYNAMIC)"
    },
    {
        "line": 103,
        "fullcodeline": "return -1;"
    },
    {
        "line": 117,
        "fullcodeline": "peer->host, restart_bit ? \" \" : \" not \","
    },
    {
        "line": 131,
        "fullcodeline": "if (CHECK_FLAG (graf.flag, RESTART_F_BIT))"
    },
    {
        "line": 134,
        "fullcodeline": "if (strcmp (afi_safi_print (afi, safi), \"Unknown\") == 0)"
    },
    {
        "line": 174,
        "fullcodeline": "SET_FLAG (peer->cap, PEER_CAP_DYNAMIC_RCV);"
    },
    {
        "line": 132,
        "fullcodeline": "SET_FLAG (peer->af_cap[afi][safi], PEER_CAP_RESTART_AF_PRESERVE_RCV);"
    },
    {
        "line": 163,
        "fullcodeline": "if (cap.length != CAPABILITY_CODE_DYNAMIC_LEN)"
    },
    {
        "line": 171,
        "fullcodeline": "if (BGP_DEBUG (normal, NORMAL))"
    },
    {
        "line": 136,
        "fullcodeline": "if (BGP_DEBUG (normal, NORMAL))"
    },
    {
        "line": 165,
        "fullcodeline": "zlog_info (\"%s Dynamic Capability length error %d\","
    },
    {
        "line": 172,
        "fullcodeline": "zlog_debug (\"%s OPEN has DYNAMIC capability\", peer->host);"
    },
    {
        "line": 177,
        "fullcodeline": "else if (cap.code > 128)"
    },
    {
        "line": 137,
        "fullcodeline": "zlog_debug (\"%s Addr-family %d/%d(afi/safi) not supported. I gnore the Graceful Restart capability\","
    },
    {
        "line": 140,
        "fullcodeline": "else if (! peer->afc[afi][safi])"
    },
    {
        "line": 168,
        "fullcodeline": "return -1;"
    },
    {
        "line": 181,
        "fullcodeline": "zlog_warn (\"%s Vendor specific capability %d\","
    },
    {
        "line": 186,
        "fullcodeline": "zlog_warn (\"%s unrecognized capability code: %d - ignored\","
    },
    {
        "line": 188,
        "fullcodeline": "memcpy (*error, &cap, cap.length + 2);"
    },
    {
        "line": 189,
        "fullcodeline": "*error += cap.length + 2;"
    },
    {
        "line": 142,
        "fullcodeline": "if (BGP_DEBUG (normal, NORMAL))"
    },
    {
        "line": 155,
        "fullcodeline": "SET_FLAG (peer->af_cap[afi][safi], PEER_CAP_RESTART_AF_RCV);"
    },
    {
        "line": 143,
        "fullcodeline": "zlog_debug (\"%s Addr-family %d/%d(afi/safi) not enabled. Ignore the Graceful Restart capability\","
    },
    {
        "line": 148,
        "fullcodeline": "if (BGP_DEBUG (normal, NORMAL))"
    },
    {
        "line": 149,
        "fullcodeline": "zlog_debug (\"%s Address family %s is%spreserved\", peer->host,"
    },
    {
        "line": 150,
        "fullcodeline": "afi_safi_print (afi, safi),"
    },
    {
        "line": 151,
        "fullcodeline": "CHECK_FLAG (peer->af_cap[afi][safi],"
    }
]