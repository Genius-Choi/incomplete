[
    {
        "line": 11,
        "fullcodeline": "bgp = peer->bgp;"
    },
    {
        "line": 12,
        "fullcodeline": "end = pnt + length;"
    },
    {
        "line": 14,
        "fullcodeline": "while (pnt < end)"
    },
    {
        "line": 24,
        "fullcodeline": "hdr = (struct capability_header *)(pnt + 1);"
    },
    {
        "line": 49,
        "fullcodeline": "memcpy (&mpc, pnt + 3, sizeof (struct capability_mp_data));"
    },
    {
        "line": 102,
        "fullcodeline": "pnt += hdr->length + 3;"
    },
    {
        "line": 17,
        "fullcodeline": "if (pnt + 3 > end)"
    },
    {
        "line": 27,
        "fullcodeline": "if (action != CAPABILITY_ACTION_SET"
    },
    {
        "line": 36,
        "fullcodeline": "if (BGP_DEBUG (normal, NORMAL))"
    },
    {
        "line": 41,
        "fullcodeline": "if ((pnt + hdr->length + 3) > end)"
    },
    {
        "line": 52,
        "fullcodeline": "if (hdr->code == CAPABILITY_CODE_MP)"
    },
    {
        "line": 19,
        "fullcodeline": "zlog_info (\"%s Capability length error\", peer->host);"
    },
    {
        "line": 20,
        "fullcodeline": "bgp_notify_send (peer, BGP_NOTIFY_CEASE, 0);"
    },
    {
        "line": 28,
        "fullcodeline": "&& action != CAPABILITY_ACTION_UNSET)"
    },
    {
        "line": 30,
        "fullcodeline": "zlog_info (\"%s Capability Action Value error %d\","
    },
    {
        "line": 32,
        "fullcodeline": "bgp_notify_send (peer, BGP_NOTIFY_CEASE, 0);"
    },
    {
        "line": 37,
        "fullcodeline": "zlog_debug (\"%s CAPABILITY has action: %d, code: %u, length %u\","
    },
    {
        "line": 43,
        "fullcodeline": "zlog_info (\"%s Capability length error\", peer->host);"
    },
    {
        "line": 44,
        "fullcodeline": "bgp_notify_send (peer, BGP_NOTIFY_CEASE, 0);"
    },
    {
        "line": 54,
        "fullcodeline": "afi = ntohs (mpc.afi);"
    },
    {
        "line": 55,
        "fullcodeline": "safi = mpc.safi;"
    },
    {
        "line": 21,
        "fullcodeline": "return -1;"
    },
    {
        "line": 33,
        "fullcodeline": "return -1;"
    },
    {
        "line": 45,
        "fullcodeline": "return -1;"
    },
    {
        "line": 58,
        "fullcodeline": "if (CHECK_FLAG (peer->flags, PEER_FLAG_OVERRIDE_CAPABILITY))"
    },
    {
        "line": 61,
        "fullcodeline": "if (!bgp_afi_safi_valid_indices (afi, &safi))"
    },
    {
        "line": 70,
        "fullcodeline": "if (BGP_DEBUG (normal, NORMAL))"
    },
    {
        "line": 77,
        "fullcodeline": "if (action == CAPABILITY_ACTION_SET)"
    },
    {
        "line": 99,
        "fullcodeline": "zlog_warn (\"%s unrecognized capability code: %d - ignored\","
    },
    {
        "line": 71,
        "fullcodeline": "zlog_debug (\"%s CAPABILITY has %s MP_EXT CAP for afi/safi: %u/%u\","
    },
    {
        "line": 79,
        "fullcodeline": "peer->afc_recv[afi][safi] = 1;"
    },
    {
        "line": 63,
        "fullcodeline": "if (BGP_DEBUG (normal, NORMAL))"
    },
    {
        "line": 73,
        "fullcodeline": "action == CAPABILITY_ACTION_SET"
    },
    {
        "line": 75,
        "fullcodeline": "ntohs(mpc.afi) , mpc.safi);"
    },
    {
        "line": 88,
        "fullcodeline": "peer->afc_recv[afi][safi] = 0;"
    },
    {
        "line": 89,
        "fullcodeline": "peer->afc_nego[afi][safi] = 0;"
    },
    {
        "line": 64,
        "fullcodeline": "zlog_debug (\"%s Dynamic Capability MP_EXT afi/safi invalid\","
    },
    {
        "line": 82,
        "fullcodeline": "peer->afc_nego[afi][safi] = 1;"
    },
    {
        "line": 83,
        "fullcodeline": "bgp_announce_route (peer, afi, safi);"
    },
    {
        "line": 91,
        "fullcodeline": "if (peer_active_nego (peer))"
    },
    {
        "line": 92,
        "fullcodeline": "bgp_clear_route (peer, afi, safi);"
    },
    {
        "line": 94,
        "fullcodeline": "BGP_EVENT_ADD (peer, BGP_Stop);"
    }
]