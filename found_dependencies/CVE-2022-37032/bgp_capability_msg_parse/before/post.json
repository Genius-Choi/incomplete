[
    {
        "line": 10,
        "fullcodeline": "bgp = peer->bgp;"
    },
    {
        "line": 11,
        "fullcodeline": "end = pnt + length;"
    },
    {
        "line": 13,
        "fullcodeline": "while (pnt < end)"
    },
    {
        "line": 26,
        "fullcodeline": "memcpy (&cap, pnt + 1, sizeof (struct capability));"
    },
    {
        "line": 104,
        "fullcodeline": "pnt += cap.length + 3;"
    },
    {
        "line": 16,
        "fullcodeline": "if (pnt + 3 > end)"
    },
    {
        "line": 29,
        "fullcodeline": "if (action != CAPABILITY_ACTION_SET"
    },
    {
        "line": 38,
        "fullcodeline": "if (BGP_DEBUG (normal, NORMAL))"
    },
    {
        "line": 43,
        "fullcodeline": "if (pnt + (cap.length + 3) > end)"
    },
    {
        "line": 51,
        "fullcodeline": "if (cap.code == CAPABILITY_CODE_MP)"
    },
    {
        "line": 18,
        "fullcodeline": "zlog_info (\"%s Capability length error\", peer->host);"
    },
    {
        "line": 19,
        "fullcodeline": "bgp_notify_send (peer, BGP_NOTIFY_CEASE, 0);"
    },
    {
        "line": 30,
        "fullcodeline": "&& action != CAPABILITY_ACTION_UNSET)"
    },
    {
        "line": 32,
        "fullcodeline": "zlog_info (\"%s Capability Action Value error %d\","
    },
    {
        "line": 34,
        "fullcodeline": "bgp_notify_send (peer, BGP_NOTIFY_CEASE, 0);"
    },
    {
        "line": 39,
        "fullcodeline": "zlog_debug (\"%s CAPABILITY has action: %d, code: %u, length %u\","
    },
    {
        "line": 45,
        "fullcodeline": "zlog_info (\"%s Capability length error\", peer->host);"
    },
    {
        "line": 46,
        "fullcodeline": "bgp_notify_send (peer, BGP_NOTIFY_CEASE, 0);"
    },
    {
        "line": 53,
        "fullcodeline": "afi = ntohs (cap.mpc.afi);"
    },
    {
        "line": 54,
        "fullcodeline": "safi = cap.mpc.safi;"
    },
    {
        "line": 20,
        "fullcodeline": "return -1;"
    },
    {
        "line": 35,
        "fullcodeline": "return -1;"
    },
    {
        "line": 47,
        "fullcodeline": "return -1;"
    },
    {
        "line": 57,
        "fullcodeline": "if (CHECK_FLAG (peer->flags, PEER_FLAG_OVERRIDE_CAPABILITY))"
    },
    {
        "line": 61,
        "fullcodeline": "if ((afi == AFI_IP"
    },
    {
        "line": 101,
        "fullcodeline": "zlog_warn (\"%s unrecognized capability code: %d - ignored\","
    },
    {
        "line": 63,
        "fullcodeline": "&& (safi == SAFI_UNICAST"
    },
    {
        "line": 62,
        "fullcodeline": "|| afi == AFI_IP6)"
    },
    {
        "line": 65,
        "fullcodeline": "|| safi == BGP_SAFI_VPNV4))"
    },
    {
        "line": 67,
        "fullcodeline": "if (BGP_DEBUG (normal, NORMAL))"
    },
    {
        "line": 75,
        "fullcodeline": "if (safi == BGP_SAFI_VPNV4)"
    },
    {
        "line": 78,
        "fullcodeline": "if (action == CAPABILITY_ACTION_SET)"
    },
    {
        "line": 64,
        "fullcodeline": "|| safi == SAFI_MULTICAST"
    },
    {
        "line": 68,
        "fullcodeline": "zlog_debug (\"%s CAPABILITY has %s MP_EXT CAP for afi/safi: %u/%u\","
    },
    {
        "line": 76,
        "fullcodeline": "safi = SAFI_MPLS_VPN;"
    },
    {
        "line": 80,
        "fullcodeline": "peer->afc_recv[afi][safi] = 1;"
    },
    {
        "line": 70,
        "fullcodeline": "action == CAPABILITY_ACTION_SET"
    },
    {
        "line": 72,
        "fullcodeline": "ntohs(cap.mpc.afi) , cap.mpc.safi);"
    },
    {
        "line": 89,
        "fullcodeline": "peer->afc_recv[afi][safi] = 0;"
    },
    {
        "line": 90,
        "fullcodeline": "peer->afc_nego[afi][safi] = 0;"
    },
    {
        "line": 83,
        "fullcodeline": "peer->afc_nego[afi][safi] = 1;"
    },
    {
        "line": 84,
        "fullcodeline": "bgp_announce_route (peer, afi, safi);"
    },
    {
        "line": 92,
        "fullcodeline": "if (peer_active_nego (peer))"
    },
    {
        "line": 93,
        "fullcodeline": "bgp_clear_route (peer, afi, safi);"
    },
    {
        "line": 95,
        "fullcodeline": "BGP_EVENT_ADD (peer, BGP_Stop);"
    }
]