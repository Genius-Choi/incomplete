[
    {
        "line": 4,
        "fullcodeline": "SCEnter();"
    },
    {
        "line": 6,
        "fullcodeline": "DEBUG_ASSERT_FLOW_LOCKED(p->flow);"
    },
    {
        "line": 24,
        "fullcodeline": "TcpSession *ssn = (TcpSession *)p->flow->protoctx;"
    },
    {
        "line": 205,
        "fullcodeline": "SCReturnInt(0);"
    },
    {
        "line": 228,
        "fullcodeline": "SCReturnInt(-1);"
    },
    {
        "line": 11,
        "fullcodeline": "if (unlikely(p->flow->thread_id == 0)) {"
    },
    {
        "line": 27,
        "fullcodeline": "if (ssn != NULL) {"
    },
    {
        "line": 45,
        "fullcodeline": "if ((p->tcph->th_flags & (TH_SYN|TH_ACK)) == (TH_SYN|TH_ACK)) {"
    },
    {
        "line": 50,
        "fullcodeline": "if (p->tcph->th_flags & (TH_RST)) {"
    },
    {
        "line": 55,
        "fullcodeline": "if (!(p->tcph->th_flags & TH_ACK) && TCP_GET_ACK(p) != 0) {"
    },
    {
        "line": 63,
        "fullcodeline": "if (StreamTcpCheckFlowDrops(p) == 1) {"
    },
    {
        "line": 74,
        "fullcodeline": "if (ssn == NULL || ssn->state == TCP_NONE) {"
    },
    {
        "line": 137,
        "fullcodeline": "if (ssn != NULL) {"
    },
    {
        "line": 209,
        "fullcodeline": "while (stt->pseudo_queue.len > 0) {"
    },
    {
        "line": 217,
        "fullcodeline": "if (p->flags & PKT_STREAM_MODIFIED) {"
    },
    {
        "line": 221,
        "fullcodeline": "if (StreamTcpInlineDropInvalid()) {"
    },
    {
        "line": 12,
        "fullcodeline": "p->flow->thread_id = (FlowThreadId)tv->id;"
    },
    {
        "line": 28,
        "fullcodeline": "ssn->tcp_packet_flags |= p->tcph->th_flags;"
    },
    {
        "line": 46,
        "fullcodeline": "StatsIncr(tv, stt->counter_tcp_synack);"
    },
    {
        "line": 51,
        "fullcodeline": "StatsIncr(tv, stt->counter_tcp_rst);"
    },
    {
        "line": 56,
        "fullcodeline": "StreamTcpSetEvent(p, STREAM_PKT_BROKEN_ACK);"
    },
    {
        "line": 64,
        "fullcodeline": "SCLogDebug(\"This flow/stream triggered a drop rule\");"
    },
    {
        "line": 65,
        "fullcodeline": "FlowSetNoPacketInspectionFlag(p->flow);"
    },
    {
        "line": 66,
        "fullcodeline": "DecodeSetNoPacketInspectionFlag(p);"
    },
    {
        "line": 67,
        "fullcodeline": "StreamTcpDisableAppLayer(p->flow);"
    },
    {
        "line": 68,
        "fullcodeline": "PACKET_DROP(p);"
    },
    {
        "line": 70,
        "fullcodeline": "StreamTcpSessionPktFree(p);"
    },
    {
        "line": 71,
        "fullcodeline": "SCReturnInt(0);"
    },
    {
        "line": 210,
        "fullcodeline": "Packet *np = PacketDequeue(&stt->pseudo_queue);"
    },
    {
        "line": 218,
        "fullcodeline": "ReCalculateChecksum(p);"
    },
    {
        "line": 225,
        "fullcodeline": "DecodeSetNoPayloadInspectionFlag(p);"
    },
    {
        "line": 226,
        "fullcodeline": "PACKET_DROP(p);"
    },
    {
        "line": 29,
        "fullcodeline": "if (PKT_IS_TOSERVER(p))"
    },
    {
        "line": 35,
        "fullcodeline": "if (ssn->flags & STREAMTCP_FLAG_ASYNC &&"
    },
    {
        "line": 75,
        "fullcodeline": "if (StreamTcpPacketStateNone(tv, p, stt, ssn, &stt->pseudo_queue) == -1) {"
    },
    {
        "line": 111,
        "fullcodeline": "StreamTcpClearKeepAliveFlag(ssn, p);"
    },
    {
        "line": 125,
        "fullcodeline": "StreamTcpPacketCheckPostRst(ssn, p);"
    },
    {
        "line": 138,
        "fullcodeline": "while (stt->pseudo_queue.len > 0) {"
    },
    {
        "line": 160,
        "fullcodeline": "if (p->flags & PKT_STREAM_MODIFIED) {"
    },
    {
        "line": 166,
        "fullcodeline": "if ((ssn->client.flags & STREAMTCP_STREAM_FLAG_DEPTH_REACHED) &&"
    },
    {
        "line": 175,
        "fullcodeline": "if ((ssn->client.flags & STREAMTCP_STREAM_FLAG_DEPTH_REACHED) ||"
    },
    {
        "line": 182,
        "fullcodeline": "if ((PKT_IS_TOSERVER(p) && (ssn->client.flags & STREAMTCP_STREAM_FLAG_NOREASSEMBLY)) ||"
    },
    {
        "line": 188,
        "fullcodeline": "if (ssn->flags & STREAMTCP_FLAG_BYPASS) {"
    },
    {
        "line": 211,
        "fullcodeline": "if (np != NULL) {"
    },
    {
        "line": 13,
        "fullcodeline": "} else if (unlikely((FlowThreadId)tv->id != p->flow->thread_id)) {"
    },
    {
        "line": 30,
        "fullcodeline": "ssn->client.tcp_flags |= p->tcph->th_flags;"
    },
    {
        "line": 37,
        "fullcodeline": "ssn->server.tcp_flags != 0)"
    },
    {
        "line": 39,
        "fullcodeline": "SCLogDebug(\"ssn %p: removing ASYNC flag as we have packets on both sides\", ssn);"
    },
    {
        "line": 40,
        "fullcodeline": "ssn->flags &= ~STREAMTCP_FLAG_ASYNC;"
    },
    {
        "line": 47,
        "fullcodeline": "} else if (p->tcph->th_flags & (TH_SYN)) {"
    },
    {
        "line": 85,
        "fullcodeline": "if (p->flags & PKT_PSEUDO_STREAM_END) {"
    },
    {
        "line": 101,
        "fullcodeline": "if (ssn->flags & STREAMTCP_FLAG_MIDSTREAM_SYNACK)"
    },
    {
        "line": 104,
        "fullcodeline": "if (StreamTcpPacketIsKeepAlive(ssn, p) == 1) {"
    },
    {
        "line": 107,
        "fullcodeline": "if (StreamTcpPacketIsKeepAliveACK(ssn, p) == 1) {"
    },
    {
        "line": 115,
        "fullcodeline": "if (StreamTcpPacketIsFinShutdownAck(ssn, p) == 0)"
    },
    {
        "line": 121,
        "fullcodeline": "if (StreamTcpStateDispatch(tv, p, stt, ssn, &stt->pseudo_queue, ssn->state) < 0)"
    },
    {
        "line": 127,
        "fullcodeline": "if (ssn->state >= TCP_ESTABLISHED) {"
    },
    {
        "line": 139,
        "fullcodeline": "SCLogDebug(\"processing pseudo packet / stream end\");"
    },
    {
        "line": 140,
        "fullcodeline": "Packet *np = PacketDequeue(&stt->pseudo_queue);"
    },
    {
        "line": 156,
        "fullcodeline": "SCLogDebug(\"processing pseudo packet / stream end done\");"
    },
    {
        "line": 161,
        "fullcodeline": "ReCalculateChecksum(p);"
    },
    {
        "line": 167,
        "fullcodeline": "(ssn->server.flags & STREAMTCP_STREAM_FLAG_DEPTH_REACHED))"
    },
    {
        "line": 176,
        "fullcodeline": "(ssn->server.flags & STREAMTCP_STREAM_FLAG_DEPTH_REACHED))"
    },
    {
        "line": 178,
        "fullcodeline": "p->flags |= PKT_STREAM_NOPCAPLOG;"
    },
    {
        "line": 183,
        "fullcodeline": "(PKT_IS_TOCLIENT(p) && (ssn->server.flags & STREAMTCP_STREAM_FLAG_NOREASSEMBLY)))"
    },
    {
        "line": 185,
        "fullcodeline": "p->flags |= PKT_STREAM_NOPCAPLOG;"
    },
    {
        "line": 212,
        "fullcodeline": "PacketEnqueue(pq, np);"
    },
    {
        "line": 14,
        "fullcodeline": "SCLogDebug(\"wrong thread: flow has %u, we are %d\", p->flow->thread_id, tv->id);"
    },
    {
        "line": 36,
        "fullcodeline": "ssn->client.tcp_flags != 0 &&"
    },
    {
        "line": 48,
        "fullcodeline": "StatsIncr(tv, stt->counter_tcp_syn);"
    },
    {
        "line": 102,
        "fullcodeline": "StreamTcpPacketSwitchDir(ssn, p);"
    },
    {
        "line": 108,
        "fullcodeline": "StreamTcpClearKeepAliveFlag(ssn, p);"
    },
    {
        "line": 128,
        "fullcodeline": "p->flags |= PKT_STREAM_EST;"
    },
    {
        "line": 141,
        "fullcodeline": "if (np != NULL) {"
    },
    {
        "line": 170,
        "fullcodeline": "if (StreamTcpBypassEnabled()) {"
    },
    {
        "line": 190,
        "fullcodeline": "if (StreamTcpBypassEnabled()) {"
    },
    {
        "line": 15,
        "fullcodeline": "if (p->pkt_src == PKT_SRC_WIRE) {"
    },
    {
        "line": 31,
        "fullcodeline": "else if (PKT_IS_TOCLIENT(p))"
    },
    {
        "line": 86,
        "fullcodeline": "if (PKT_IS_TOCLIENT(p)) {"
    },
    {
        "line": 116,
        "fullcodeline": "if (StreamTcpPacketIsWindowUpdate(ssn, p) == 0)"
    },
    {
        "line": 154,
        "fullcodeline": "PacketEnqueue(pq, np);"
    },
    {
        "line": 171,
        "fullcodeline": "PacketBypassCallback(p);"
    },
    {
        "line": 191,
        "fullcodeline": "PacketBypassCallback(p);"
    },
    {
        "line": 195,
        "fullcodeline": "} else if (g_detect_disabled &&"
    },
    {
        "line": 16,
        "fullcodeline": "StatsIncr(tv, stt->counter_tcp_wrong_thread);"
    },
    {
        "line": 32,
        "fullcodeline": "ssn->server.tcp_flags |= p->tcph->th_flags;"
    },
    {
        "line": 87,
        "fullcodeline": "ssn->client.last_ack = TCP_GET_ACK(p);"
    },
    {
        "line": 88,
        "fullcodeline": "StreamTcpReassembleHandleSegment(tv, stt->ra_ctx, ssn,"
    },
    {
        "line": 143,
        "fullcodeline": "if (PKT_IS_TOSERVER(np)) {"
    },
    {
        "line": 200,
        "fullcodeline": "SCLogDebug(\"bypass as stream is dead and we have no rules\");"
    },
    {
        "line": 201,
        "fullcodeline": "PacketBypassCallback(p);"
    },
    {
        "line": 17,
        "fullcodeline": "if ((p->flow->flags & FLOW_WRONG_THREAD) == 0) {"
    },
    {
        "line": 91,
        "fullcodeline": "ssn->server.last_ack = TCP_GET_ACK(p);"
    },
    {
        "line": 92,
        "fullcodeline": "StreamTcpReassembleHandleSegment(tv, stt->ra_ctx, ssn,"
    },
    {
        "line": 117,
        "fullcodeline": "if (StreamTcpPacketIsBadWindowUpdate(ssn,p))"
    },
    {
        "line": 144,
        "fullcodeline": "SCLogDebug(\"pseudo packet is to server\");"
    },
    {
        "line": 145,
        "fullcodeline": "StreamTcpReassembleHandleSegment(tv, stt->ra_ctx, ssn,"
    },
    {
        "line": 197,
        "fullcodeline": "(ssn->server.flags & STREAMTCP_STREAM_FLAG_NOREASSEMBLY) &&"
    },
    {
        "line": 18,
        "fullcodeline": "p->flow->flags |= FLOW_WRONG_THREAD;"
    },
    {
        "line": 19,
        "fullcodeline": "StreamTcpSetEvent(p, STREAM_WRONG_THREAD);"
    },
    {
        "line": 148,
        "fullcodeline": "SCLogDebug(\"pseudo packet is to client\");"
    },
    {
        "line": 149,
        "fullcodeline": "StreamTcpReassembleHandleSegment(tv, stt->ra_ctx, ssn,"
    },
    {
        "line": 196,
        "fullcodeline": "(ssn->client.flags & STREAMTCP_STREAM_FLAG_NOREASSEMBLY) &&"
    }
]