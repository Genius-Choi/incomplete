[
    {
        "line": 21,
        "fullcodeline": "first_row = tokens[0][2][0]"
    },
    {
        "line": 22,
        "fullcodeline": "nrows = 1 + tokens[-1][2][0] - first_row"
    },
    {
        "line": 29,
        "fullcodeline": "rel_indent = [0] * nrows"
    },
    {
        "line": 30,
        "fullcodeline": "open_rows = [[0]]"
    },
    {
        "line": 31,
        "fullcodeline": "last_indent = tokens[0][2]"
    },
    {
        "line": 32,
        "fullcodeline": "indent = [last_indent[1]]"
    },
    {
        "line": 34,
        "fullcodeline": "last_token_multiline = False"
    },
    {
        "line": 23,
        "fullcodeline": "if noqa or nrows == 1:"
    },
    {
        "line": 26,
        "fullcodeline": "row = depth = 0"
    },
    {
        "line": 36,
        "fullcodeline": "if verbose >= 3:"
    },
    {
        "line": 39,
        "fullcodeline": "for token_type, text, start, end, line in tokens:"
    },
    {
        "line": 100,
        "fullcodeline": "last_token_multiline = (start[0] != end[0])"
    },
    {
        "line": 40,
        "fullcodeline": "newline = row < start[0] - first_row"
    },
    {
        "line": 80,
        "fullcodeline": "if token_type == tokenize.OP:"
    },
    {
        "line": 37,
        "fullcodeline": "print(\">>> \" + tokens[0][4].rstrip())"
    },
    {
        "line": 42,
        "fullcodeline": "row = start[0] - first_row"
    },
    {
        "line": 47,
        "fullcodeline": "last_indent = start"
    },
    {
        "line": 52,
        "fullcodeline": "rel_indent[row] = pep8.expand_indent(line) - indent_level"
    },
    {
        "line": 55,
        "fullcodeline": "close_bracket = (token_type == tokenize.OP and text in ']})')"
    },
    {
        "line": 43,
        "fullcodeline": "newline = not last_token_multiline and token_type not in pep8.NEWLINE"
    },
    {
        "line": 48,
        "fullcodeline": "if verbose >= 3:"
    },
    {
        "line": 58,
        "fullcodeline": "for open_row in reversed(open_rows[depth]):"
    },
    {
        "line": 81,
        "fullcodeline": "if text in '([{':"
    },
    {
        "line": 98,
        "fullcodeline": "assert len(indent) == depth + 1"
    },
    {
        "line": 61,
        "fullcodeline": "if not close_bracket and hang > 8:"
    },
    {
        "line": 64,
        "fullcodeline": "if close_bracket and hang > 4:"
    },
    {
        "line": 82,
        "fullcodeline": "depth += 1"
    },
    {
        "line": 83,
        "fullcodeline": "indent.append(0)"
    },
    {
        "line": 102,
        "fullcodeline": "rel_indent[end[0] - first_row] = rel_indent[row]"
    },
    {
        "line": 59,
        "fullcodeline": "hang = rel_indent[row] - rel_indent[open_row]"
    },
    {
        "line": 84,
        "fullcodeline": "if len(open_rows) == depth:"
    },
    {
        "line": 86,
        "fullcodeline": "open_rows[depth].append(row)"
    },
    {
        "line": 87,
        "fullcodeline": "if verbose >= 4:"
    },
    {
        "line": 49,
        "fullcodeline": "print(\"... \" + line.rstrip())"
    },
    {
        "line": 85,
        "fullcodeline": "open_rows.append([])"
    },
    {
        "line": 90,
        "fullcodeline": "elif text in ')]}' and depth > 0:"
    },
    {
        "line": 92,
        "fullcodeline": "prev_indent = indent.pop() or last_indent[1]"
    },
    {
        "line": 97,
        "fullcodeline": "depth -= 1"
    },
    {
        "line": 88,
        "fullcodeline": "print(\"bracket depth %s seen, col %s, visual min = %s\" %"
    },
    {
        "line": 93,
        "fullcodeline": "for d in range(depth):"
    },
    {
        "line": 96,
        "fullcodeline": "del open_rows[depth + 1:]"
    },
    {
        "line": 89,
        "fullcodeline": "(depth, start[1], indent[depth]))"
    },
    {
        "line": 94,
        "fullcodeline": "if indent[d] > prev_indent:"
    },
    {
        "line": 95,
        "fullcodeline": "indent[d] = 0"
    }
]