[
    {
        "line": 8,
        "fullcodeline": "struct hfi1_pportdata *ppd = dd->pport + port;"
    },
    {
        "line": 10,
        "fullcodeline": "uint idle_cnt = sdma_idle_cnt;"
    },
    {
        "line": 11,
        "fullcodeline": "size_t num_engines = chip_sdma_engines(dd);"
    },
    {
        "line": 12,
        "fullcodeline": "int ret = -ENOMEM;"
    },
    {
        "line": 25,
        "fullcodeline": "dd_dev_info(dd, \"SDMA mod_num_sdma: %u\\n\", mod_num_sdma);"
    },
    {
        "line": 26,
        "fullcodeline": "dd_dev_info(dd, \"SDMA chip_sdma_engines: %u\\n\", chip_sdma_engines(dd));"
    },
    {
        "line": 27,
        "fullcodeline": "dd_dev_info(dd, \"SDMA chip_sdma_mem_size: %u\\n\","
    },
    {
        "line": 30,
        "fullcodeline": "per_sdma_credits ="
    },
    {
        "line": 37,
        "fullcodeline": "descq_cnt = sdma_get_descq_cnt();"
    },
    {
        "line": 38,
        "fullcodeline": "dd_dev_info(dd, \"SDMA engines %zu descq_cnt %u\\n\","
    },
    {
        "line": 42,
        "fullcodeline": "dd->per_sdma = kcalloc_node(num_engines, sizeof(*dd->per_sdma),"
    },
    {
        "line": 47,
        "fullcodeline": "idle_cnt = ns_to_cclock(dd, idle_cnt);"
    },
    {
        "line": 126,
        "fullcodeline": "dd->sdma_heads_size = L1_CACHE_BYTES * num_engines;"
    },
    {
        "line": 128,
        "fullcodeline": "dd->sdma_heads_dma = dma_alloc_coherent(&dd->pcidev->dev,"
    },
    {
        "line": 138,
        "fullcodeline": "dd->sdma_pad_dma = dma_alloc_coherent(&dd->pcidev->dev, sizeof(u32),"
    },
    {
        "line": 146,
        "fullcodeline": "curr_head = (void *)dd->sdma_heads_dma;"
    },
    {
        "line": 159,
        "fullcodeline": "dd->flags |= HFI1_HAS_SEND_DMA;"
    },
    {
        "line": 160,
        "fullcodeline": "dd->flags |= idle_cnt ? HFI1_HAS_SDMA_TIMEOUT : 0;"
    },
    {
        "line": 161,
        "fullcodeline": "dd->num_sdma = num_engines;"
    },
    {
        "line": 162,
        "fullcodeline": "ret = sdma_map_init(dd, port, ppd->vls_operational, NULL);"
    },
    {
        "line": 166,
        "fullcodeline": "tmp_sdma_rht = kzalloc(sizeof(*tmp_sdma_rht), GFP_KERNEL);"
    },
    {
        "line": 172,
        "fullcodeline": "ret = rhashtable_init(tmp_sdma_rht, &sdma_rht_params);"
    },
    {
        "line": 178,
        "fullcodeline": "dd->sdma_rht = tmp_sdma_rht;"
    },
    {
        "line": 14,
        "fullcodeline": "if (!HFI1_CAP_IS_KSET(SDMA)) {"
    },
    {
        "line": 28,
        "fullcodeline": "chip_sdma_mem_size(dd));"
    },
    {
        "line": 31,
        "fullcodeline": "chip_sdma_mem_size(dd) / (num_engines * SDMA_BLOCK_SIZE);"
    },
    {
        "line": 44,
        "fullcodeline": "if (!dd->per_sdma)"
    },
    {
        "line": 59,
        "fullcodeline": "for (this_idx = 0; this_idx < num_engines; ++this_idx) {"
    },
    {
        "line": 132,
        "fullcodeline": "if (!dd->sdma_heads_dma) {"
    },
    {
        "line": 140,
        "fullcodeline": "if (!dd->sdma_pad_dma) {"
    },
    {
        "line": 147,
        "fullcodeline": "for (this_idx = 0; this_idx < num_engines; ++this_idx) {"
    },
    {
        "line": 163,
        "fullcodeline": "if (ret < 0)"
    },
    {
        "line": 167,
        "fullcodeline": "if (!tmp_sdma_rht) {"
    },
    {
        "line": 173,
        "fullcodeline": "if (ret < 0) {"
    },
    {
        "line": 15,
        "fullcodeline": "HFI1_CAP_CLEAR(SDMA_AHG);"
    },
    {
        "line": 18,
        "fullcodeline": "if (mod_num_sdma &&"
    },
    {
        "line": 22,
        "fullcodeline": "mod_num_sdma >= num_vls)"
    },
    {
        "line": 23,
        "fullcodeline": "num_engines = mod_num_sdma;"
    },
    {
        "line": 49,
        "fullcodeline": "dd->default_desc1 ="
    },
    {
        "line": 56,
        "fullcodeline": "sdma_desct_intr = SDMA_DESC_INTR;"
    },
    {
        "line": 60,
        "fullcodeline": "sde = &dd->per_sdma[this_idx];"
    },
    {
        "line": 61,
        "fullcodeline": "sde->dd = dd;"
    },
    {
        "line": 62,
        "fullcodeline": "sde->ppd = ppd;"
    },
    {
        "line": 63,
        "fullcodeline": "sde->this_idx = this_idx;"
    },
    {
        "line": 64,
        "fullcodeline": "sde->descq_cnt = descq_cnt;"
    },
    {
        "line": 65,
        "fullcodeline": "sde->desc_avail = sdma_descq_freecnt(sde);"
    },
    {
        "line": 66,
        "fullcodeline": "sde->sdma_shift = ilog2(descq_cnt);"
    },
    {
        "line": 67,
        "fullcodeline": "sde->sdma_mask = (1 << sde->sdma_shift) - 1;"
    },
    {
        "line": 70,
        "fullcodeline": "sde->int_mask = (u64)1 << (0 * TXE_NUM_SDMA_ENGINES +"
    },
    {
        "line": 72,
        "fullcodeline": "sde->progress_mask = (u64)1 << (1 * TXE_NUM_SDMA_ENGINES +"
    },
    {
        "line": 74,
        "fullcodeline": "sde->idle_mask = (u64)1 << (2 * TXE_NUM_SDMA_ENGINES +"
    },
    {
        "line": 77,
        "fullcodeline": "sde->imask = sde->int_mask | sde->progress_mask |"
    },
    {
        "line": 80,
        "fullcodeline": "spin_lock_init(&sde->tail_lock);"
    },
    {
        "line": 81,
        "fullcodeline": "seqlock_init(&sde->head_lock);"
    },
    {
        "line": 82,
        "fullcodeline": "spin_lock_init(&sde->senddmactrl_lock);"
    },
    {
        "line": 83,
        "fullcodeline": "spin_lock_init(&sde->flushlist_lock);"
    },
    {
        "line": 84,
        "fullcodeline": "seqlock_init(&sde->waitlock);"
    },
    {
        "line": 86,
        "fullcodeline": "sde->ahg_bits = 0xfffffffe00000000ULL;"
    },
    {
        "line": 88,
        "fullcodeline": "sdma_set_state(sde, sdma_state_s00_hw_down);"
    },
    {
        "line": 94,
        "fullcodeline": "INIT_LIST_HEAD(&sde->flushlist);"
    },
    {
        "line": 95,
        "fullcodeline": "INIT_LIST_HEAD(&sde->dmawait);"
    },
    {
        "line": 97,
        "fullcodeline": "sde->tail_csr ="
    },
    {
        "line": 100,
        "fullcodeline": "tasklet_init(&sde->sdma_hw_clean_up_task, sdma_hw_clean_up_task,"
    },
    {
        "line": 103,
        "fullcodeline": "tasklet_init(&sde->sdma_sw_clean_up_task, sdma_sw_clean_up_task,"
    },
    {
        "line": 105,
        "fullcodeline": "INIT_WORK(&sde->err_halt_worker, sdma_err_halt_wait);"
    },
    {
        "line": 106,
        "fullcodeline": "INIT_WORK(&sde->flush_worker, sdma_field_flush);"
    },
    {
        "line": 108,
        "fullcodeline": "sde->progress_check_head = 0;"
    },
    {
        "line": 110,
        "fullcodeline": "timer_setup(&sde->err_progress_check_timer,"
    },
    {
        "line": 113,
        "fullcodeline": "sde->descq = dma_alloc_coherent(&dd->pcidev->dev,"
    },
    {
        "line": 118,
        "fullcodeline": "sde->tx_ring ="
    },
    {
        "line": 133,
        "fullcodeline": "dd_dev_err(dd, \"failed to allocate SendDMA head memory\\n\");"
    },
    {
        "line": 141,
        "fullcodeline": "dd_dev_err(dd, \"failed to allocate SendDMA pad memory\\n\");"
    },
    {
        "line": 150,
        "fullcodeline": "sde = &dd->per_sdma[this_idx];"
    },
    {
        "line": 152,
        "fullcodeline": "sde->head_dma = curr_head;"
    },
    {
        "line": 153,
        "fullcodeline": "curr_head += L1_CACHE_BYTES;"
    },
    {
        "line": 154,
        "fullcodeline": "phys_offset = (unsigned long)sde->head_dma -"
    },
    {
        "line": 156,
        "fullcodeline": "sde->head_phys = dd->sdma_heads_phys + phys_offset;"
    },
    {
        "line": 168,
        "fullcodeline": "ret = -ENOMEM;"
    },
    {
        "line": 20,
        "fullcodeline": "mod_num_sdma <= chip_sdma_engines(dd) &&"
    },
    {
        "line": 52,
        "fullcodeline": "dd->default_desc1 ="
    },
    {
        "line": 98,
        "fullcodeline": "get_kctxt_csr_addr(dd, this_idx, SD(TAIL));"
    },
    {
        "line": 116,
        "fullcodeline": "if (!sde->descq)"
    },
    {
        "line": 119,
        "fullcodeline": "kvzalloc_node(array_size(descq_cnt,"
    },
    {
        "line": 122,
        "fullcodeline": "if (!sde->tx_ring)"
    },
    {
        "line": 114,
        "fullcodeline": "descq_cnt * sizeof(u64[2]),"
    },
    {
        "line": 120,
        "fullcodeline": "sizeof(struct sdma_txreq *)),"
    }
]