[
    {
        "line": 6,
        "fullcodeline": "newFncStarts.insert(splitBb);"
    },
    {
        "line": 8,
        "fullcodeline": "auto* f = splitBb->getParent();"
    },
    {
        "line": 9,
        "fullcodeline": "auto fAddr = getFunctionAddress(f);"
    },
    {
        "line": 11,
        "fullcodeline": "auto fSzIt = _fnc2sz.find(f);"
    },
    {
        "line": 21,
        "fullcodeline": "std::set<Address> fncStarts;"
    },
    {
        "line": 22,
        "fullcodeline": "fncStarts.insert(fAddr);"
    },
    {
        "line": 23,
        "fullcodeline": "fncStarts.insert(addr);"
    },
    {
        "line": 25,
        "fullcodeline": "LOG << \"\\t\\t\\t\\t\\t\" << \"CAN S: split @ \" << fAddr << std::endl;"
    },
    {
        "line": 26,
        "fullcodeline": "LOG << \"\\t\\t\\t\\t\\t\" << \"CAN S: split @ \" << addr << std::endl;"
    },
    {
        "line": 12,
        "fullcodeline": "if (fSzIt != _fnc2sz.end())"
    },
    {
        "line": 31,
        "fullcodeline": "changed = false;"
    },
    {
        "line": 14,
        "fullcodeline": "if (fAddr <= addr && addr < (fAddr+fSzIt->second))"
    },
    {
        "line": 16,
        "fullcodeline": "LOG << \"\\t\\t\\t\\t\\t\" << \"!CAN S: addr cond @ \" << addr << std::endl;"
    },
    {
        "line": 37,
        "fullcodeline": "BasicBlock* bPrev = &b;"
    },
    {
        "line": 47,
        "fullcodeline": "auto up = fncStarts.upper_bound(bAddr);"
    },
    {
        "line": 49,
        "fullcodeline": "Address bFnc = *up;"
    },
    {
        "line": 38,
        "fullcodeline": "while (bAddr.isUndefined() && bPrev)"
    },
    {
        "line": 43,
        "fullcodeline": "if (bAddr.isUndefined())"
    },
    {
        "line": 40,
        "fullcodeline": "bAddr = getBasicBlockAddress(bPrev);"
    },
    {
        "line": 41,
        "fullcodeline": "bPrev = bPrev->getPrevNode();"
    },
    {
        "line": 56,
        "fullcodeline": "BasicBlock* pPrev = p;"
    },
    {
        "line": 66,
        "fullcodeline": "auto up = fncStarts.upper_bound(pAddr);"
    },
    {
        "line": 68,
        "fullcodeline": "Address pFnc = *up;"
    },
    {
        "line": 57,
        "fullcodeline": "while (pAddr.isUndefined() && pPrev)"
    },
    {
        "line": 62,
        "fullcodeline": "if (pAddr.isUndefined())"
    },
    {
        "line": 59,
        "fullcodeline": "pAddr = getBasicBlockAddress(pPrev);"
    },
    {
        "line": 60,
        "fullcodeline": "pPrev = pPrev->getPrevNode();"
    },
    {
        "line": 77,
        "fullcodeline": "changed |= newFncStarts.insert(&b).second;"
    },
    {
        "line": 78,
        "fullcodeline": "changed |= fncStarts.insert(bAddr).second;"
    },
    {
        "line": 80,
        "fullcodeline": "LOG << \"\\t\\t\\t\\t\\t\" << \"CAN S: split @ \" << bAddr << std::endl;"
    },
    {
        "line": 72,
        "fullcodeline": "if (!canSplitFunctionOn(&b))"
    }
]