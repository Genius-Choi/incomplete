[
    {
        "line": 4,
        "fullcodeline": "uint8_t buf[4];"
    },
    {
        "line": 5,
        "fullcodeline": "uint8_t b1[COMPARE_BYTES], b2[COMPARE_BYTES];"
    },
    {
        "line": 6,
        "fullcodeline": "bitbuffer_t b = {0};"
    },
    {
        "line": 7,
        "fullcodeline": "double current[3];"
    },
    {
        "line": 13,
        "fullcodeline": "bitbuffer_extract_bytes(bitbuffer, 0, 0, buf, 32);"
    },
    {
        "line": 17,
        "fullcodeline": "start = 0;"
    },
    {
        "line": 18,
        "fullcodeline": "bit = 0;"
    },
    {
        "line": 19,
        "fullcodeline": "bitbuffer_clear(&b);"
    },
    {
        "line": 40,
        "fullcodeline": "bitbuffer_extract_bytes(&b, 0, 0, b1, COMPARE_BITS);"
    },
    {
        "line": 41,
        "fullcodeline": "bitbuffer_extract_bytes(&b, 0, COMPARE_BITS + 2, b2, COMPARE_BITS);"
    },
    {
        "line": 53,
        "fullcodeline": "data = data_make("
    },
    {
        "line": 10,
        "fullcodeline": "if ((bitbuffer->bits_per_row[0] < 350) || (bitbuffer->bits_per_row[0] > 450))"
    },
    {
        "line": 46,
        "fullcodeline": "for (int i = 0; i < 3; i++) {"
    },
    {
        "line": 14,
        "fullcodeline": "if ((buf[0] != 0xb0) || (buf[1] != 0x00) || (buf[2] != 0x00))"
    },
    {
        "line": 21,
        "fullcodeline": "bitbuffer_extract_bytes(bitbuffer, 0, start, buf, 3);"
    },
    {
        "line": 42,
        "fullcodeline": "if (memcmp(b1, b2, COMPARE_BYTES) != 0)"
    },
    {
        "line": 47,
        "fullcodeline": "bitbuffer_extract_bytes(&b, 0, 36 + i * 10, buf, 10);"
    },
    {
        "line": 48,
        "fullcodeline": "reflect_bytes(buf, 2);"
    },
    {
        "line": 36,
        "fullcodeline": "if (b.bits_per_row[0] < 2 * COMPARE_BITS + 2)"
    },
    {
        "line": 49,
        "fullcodeline": "current[i] = ((float)buf[0] + ((buf[1] & 0x3) << 8)) * 0.1;"
    },
    {
        "line": 22,
        "fullcodeline": "if ((buf[0] >> 6) == 0x00) { // top two bits are 0b00 = no toggle"
    },
    {
        "line": 23,
        "fullcodeline": "start += 2;"
    },
    {
        "line": 24,
        "fullcodeline": "bitbuffer_add_bit(&b, bit);"
    },
    {
        "line": 25,
        "fullcodeline": "} else if ((buf[0] >> 5) == 0x03) { // top two bits are 0b011 = toggle"
    },
    {
        "line": 26,
        "fullcodeline": "start += 3;"
    },
    {
        "line": 27,
        "fullcodeline": "bit = 1 - bit; // toggle"
    },
    {
        "line": 28,
        "fullcodeline": "bitbuffer_add_bit(&b, bit);"
    },
    {
        "line": 29,
        "fullcodeline": "} else if (start == 0)"
    },
    {
        "line": 30,
        "fullcodeline": "start += 1; // first bit doesn't decode"
    }
]