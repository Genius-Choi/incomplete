[
    {
        "line": 6,
        "fullcodeline": "api_endpoint = \"https://vulners.com/api/v3/burp/software/\""
    },
    {
        "line": 7,
        "fullcodeline": "header = {"
    },
    {
        "line": 11,
        "fullcodeline": "version_re = \":([d.-_]+)([^:]*)$\""
    },
    {
        "line": 12,
        "fullcodeline": "nmap = nmap3.Nmap()"
    },
    {
        "line": 13,
        "fullcodeline": "service_scans = nmap.nmap_version_detection(hostname)"
    },
    {
        "line": 14,
        "fullcodeline": "services = []"
    },
    {
        "line": 15,
        "fullcodeline": "vulnerabilities = []"
    },
    {
        "line": 16,
        "fullcodeline": "ip, service_scans = list(service_scans.items())[0]"
    },
    {
        "line": 17,
        "fullcodeline": "for port in service_scans[\"ports\"]:"
    },
    {
        "line": 3,
        "fullcodeline": "domain_name(hostname)"
    },
    {
        "line": 56,
        "fullcodeline": "return {\"services\": services, \"vulnerabilities\": vulnerabilities}"
    },
    {
        "line": 18,
        "fullcodeline": "if port[\"state\"] != \"closed\":"
    },
    {
        "line": 19,
        "fullcodeline": "services.append(port[\"service\"])"
    },
    {
        "line": 20,
        "fullcodeline": "cpe_list = port[\"cpe\"]"
    },
    {
        "line": 21,
        "fullcodeline": "vuln_list = []"
    },
    {
        "line": 55,
        "fullcodeline": "vulnerabilities.append({\"service\": service_name, \"vuln_list\": vuln_list})"
    },
    {
        "line": 5,
        "fullcodeline": "return {\"status\": False, \"statusmessage\": \"The given domain is invalid!\"}"
    },
    {
        "line": 22,
        "fullcodeline": "for item in cpe_list:"
    },
    {
        "line": 50,
        "fullcodeline": "service_name = ("
    },
    {
        "line": 23,
        "fullcodeline": "cpe = item[\"cpe\"]"
    },
    {
        "line": 24,
        "fullcodeline": "version_match = re.search(version_re, cpe)"
    },
    {
        "line": 51,
        "fullcodeline": "f\"{port['service']['product']} - {port['service']['name']}\""
    },
    {
        "line": 54,
        "fullcodeline": "service_name = f\"{port['service']['name']}\""
    },
    {
        "line": 27,
        "fullcodeline": "print(f\"Querying vulns for {cpe}, version {version}, of type cpe\")"
    },
    {
        "line": 28,
        "fullcodeline": "query_url = ("
    },
    {
        "line": 31,
        "fullcodeline": "response = requests.get(query_url, headers=header)"
    },
    {
        "line": 26,
        "fullcodeline": "version, patch = version_match.groups()"
    },
    {
        "line": 29,
        "fullcodeline": "api_endpoint + f\"?software={cpe}&version={version}&type=cpe\""
    },
    {
        "line": 34,
        "fullcodeline": "for search_result in data:"
    },
    {
        "line": 33,
        "fullcodeline": "data = response.json()[\"data\"][\"search\"]"
    },
    {
        "line": 35,
        "fullcodeline": "info = {"
    },
    {
        "line": 48,
        "fullcodeline": "vuln_list.append(info)"
    },
    {
        "line": 40,
        "fullcodeline": "if info[\"type\"] == \"cve\":"
    },
    {
        "line": 41,
        "fullcodeline": "info["
    },
    {
        "line": 45,
        "fullcodeline": "info["
    },
    {
        "line": 43,
        "fullcodeline": "] = f\"https://cvepremium.circl.lu/cve/{info['id']}\""
    },
    {
        "line": 47,
        "fullcodeline": "] = f\"https://vulners.com/{info['type']}/{info['id']}\""
    }
]