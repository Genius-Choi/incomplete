[
    {
        "line": 3,
        "fullcodeline": "char tmp[SHORT_STRING];"
    },
    {
        "line": 4,
        "fullcodeline": "char *ptmp = NULL;"
    },
    {
        "line": 6,
        "fullcodeline": "if (!s)"
    },
    {
        "line": 11,
        "fullcodeline": "SKIPWS(s);"
    },
    {
        "line": 7,
        "fullcodeline": "return -1;"
    },
    {
        "line": 13,
        "fullcodeline": "if (mutt_str_strncasecmp(\"FLAGS\", s, 5) == 0)"
    },
    {
        "line": 15,
        "fullcodeline": "s = msg_parse_flags(h, s);"
    },
    {
        "line": 16,
        "fullcodeline": "if (!s)"
    },
    {
        "line": 17,
        "fullcodeline": "return -1;"
    },
    {
        "line": 19,
        "fullcodeline": "else if (mutt_str_strncasecmp(\"UID\", s, 3) == 0)"
    },
    {
        "line": 21,
        "fullcodeline": "s += 3;"
    },
    {
        "line": 22,
        "fullcodeline": "SKIPWS(s);"
    },
    {
        "line": 26,
        "fullcodeline": "s = imap_next_word(s);"
    },
    {
        "line": 23,
        "fullcodeline": "if (mutt_str_atoui(s, &h->data->uid) < 0)"
    },
    {
        "line": 24,
        "fullcodeline": "return -1;"
    },
    {
        "line": 28,
        "fullcodeline": "else if (mutt_str_strncasecmp(\"INTERNALDATE\", s, 12) == 0)"
    },
    {
        "line": 30,
        "fullcodeline": "s += 12;"
    },
    {
        "line": 31,
        "fullcodeline": "SKIPWS(s);"
    },
    {
        "line": 37,
        "fullcodeline": "s++;"
    },
    {
        "line": 38,
        "fullcodeline": "ptmp = tmp;"
    },
    {
        "line": 43,
        "fullcodeline": "s++; /* skip past the trailing \" */"
    },
    {
        "line": 44,
        "fullcodeline": "*ptmp = '\\0';"
    },
    {
        "line": 45,
        "fullcodeline": "h->received = mutt_date_parse_imap(tmp);"
    },
    {
        "line": 32,
        "fullcodeline": "if (*s != '\\\"')"
    },
    {
        "line": 39,
        "fullcodeline": "while (*s && *s != '\\\"')"
    },
    {
        "line": 41,
        "fullcodeline": "if (*s != '\\\"')"
    },
    {
        "line": 35,
        "fullcodeline": "return -1;"
    },
    {
        "line": 40,
        "fullcodeline": "*ptmp++ = *s++;"
    },
    {
        "line": 42,
        "fullcodeline": "return -1;"
    },
    {
        "line": 47,
        "fullcodeline": "else if (mutt_str_strncasecmp(\"RFC822.SIZE\", s, 11) == 0)"
    },
    {
        "line": 49,
        "fullcodeline": "s += 11;"
    },
    {
        "line": 50,
        "fullcodeline": "SKIPWS(s);"
    },
    {
        "line": 51,
        "fullcodeline": "ptmp = tmp;"
    },
    {
        "line": 54,
        "fullcodeline": "*ptmp = '\\0';"
    },
    {
        "line": 55,
        "fullcodeline": "if (mutt_str_atol(tmp, &h->content_length) < 0)"
    },
    {
        "line": 53,
        "fullcodeline": "*ptmp++ = *s++;"
    },
    {
        "line": 56,
        "fullcodeline": "return -1;"
    },
    {
        "line": 58,
        "fullcodeline": "else if ((mutt_str_strncasecmp(\"BODY\", s, 4) == 0) ||"
    },
    {
        "line": 59,
        "fullcodeline": "(mutt_str_strncasecmp(\"RFC822.HEADER\", s, 13) == 0))"
    },
    {
        "line": 62,
        "fullcodeline": "return -2;"
    },
    {
        "line": 64,
        "fullcodeline": "else if (*s == ')')"
    },
    {
        "line": 65,
        "fullcodeline": "s++; /* end of request */"
    },
    {
        "line": 70,
        "fullcodeline": "return -1;"
    }
]