[
    {
        "line": 3,
        "fullcodeline": "Lock lock(m_procMutex);"
    },
    {
        "line": 6,
        "fullcodeline": "os << prefix << \".\" << getpid() << \".\" << id;"
    },
    {
        "line": 7,
        "fullcodeline": "m_afdtFilename = os.str();"
    },
    {
        "line": 10,
        "fullcodeline": "remove(m_afdtFilename.c_str());"
    },
    {
        "line": 13,
        "fullcodeline": "m_afdt_lfd = afdt_listen(m_afdtFilename.c_str(), &err);"
    },
    {
        "line": 28,
        "fullcodeline": "pid_t child = fork();"
    },
    {
        "line": 14,
        "fullcodeline": "if (m_afdt_lfd < 0) {"
    },
    {
        "line": 22,
        "fullcodeline": "if (!p1.open() || !p2.open()) {"
    },
    {
        "line": 29,
        "fullcodeline": "if (child == 0) {"
    },
    {
        "line": 15,
        "fullcodeline": "Logger::Warning(\"Unable to afdt_listen to %s: %d %s\","
    },
    {
        "line": 23,
        "fullcodeline": "Logger::Warning(\"Unable to create pipe: %d %s\", errno,"
    },
    {
        "line": 31,
        "fullcodeline": "pid_t sid = setsid();"
    },
    {
        "line": 36,
        "fullcodeline": "m_afdt_fd = afdt_connect(m_afdtFilename.c_str(), &err);"
    },
    {
        "line": 43,
        "fullcodeline": "int fd1 = p1.detachOut();"
    },
    {
        "line": 44,
        "fullcodeline": "int fd2 = p2.detachIn();"
    },
    {
        "line": 45,
        "fullcodeline": "p1.close();"
    },
    {
        "line": 46,
        "fullcodeline": "p2.close();"
    },
    {
        "line": 53,
        "fullcodeline": "close_fds(inherited_fds);"
    },
    {
        "line": 56,
        "fullcodeline": "runShadow(fd1, fd2);"
    },
    {
        "line": 16,
        "fullcodeline": "m_afdtFilename.c_str(),"
    },
    {
        "line": 17,
        "fullcodeline": "errno, folly::errnoStr(errno).c_str());"
    },
    {
        "line": 24,
        "fullcodeline": "folly::errnoStr(errno).c_str());"
    },
    {
        "line": 32,
        "fullcodeline": "if (sid < 0) {"
    },
    {
        "line": 37,
        "fullcodeline": "if (m_afdt_fd < 0) {"
    },
    {
        "line": 50,
        "fullcodeline": "for (int i = 0; i < id; i++) {"
    },
    {
        "line": 33,
        "fullcodeline": "Logger::Warning(\"Unable to setsid\");"
    },
    {
        "line": 34,
        "fullcodeline": "exit(-1);"
    },
    {
        "line": 38,
        "fullcodeline": "Logger::Warning(\"Unable to afdt_connect, filename %s: %d %s\","
    },
    {
        "line": 41,
        "fullcodeline": "exit(-1);"
    },
    {
        "line": 57,
        "fullcodeline": "} else if (child < 0) {"
    },
    {
        "line": 39,
        "fullcodeline": "m_afdtFilename.c_str(),"
    },
    {
        "line": 40,
        "fullcodeline": "errno, folly::errnoStr(errno).c_str());"
    },
    {
        "line": 59,
        "fullcodeline": "Logger::Warning(\"Unable to fork lightly: %d %s\", errno,"
    },
    {
        "line": 60,
        "fullcodeline": "folly::errnoStr(errno).c_str());"
    },
    {
        "line": 64,
        "fullcodeline": "m_fin = fdopen(p2.detachOut(), \"r\");"
    },
    {
        "line": 65,
        "fullcodeline": "m_fout = fdopen(p1.detachIn(), \"w\");"
    },
    {
        "line": 66,
        "fullcodeline": "m_shadowProcess = child;"
    },
    {
        "line": 70,
        "fullcodeline": "m_afdt_fd = accept(m_afdt_lfd, &addr, &addrlen);"
    },
    {
        "line": 71,
        "fullcodeline": "if (m_afdt_fd < 0) {"
    },
    {
        "line": 72,
        "fullcodeline": "Logger::Warning(\"Unable to establish afdt connection: %d %s\","
    },
    {
        "line": 74,
        "fullcodeline": "closeShadow();"
    },
    {
        "line": 73,
        "fullcodeline": "errno, folly::errnoStr(errno).c_str());"
    }
]