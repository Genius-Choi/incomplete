[
    {
        "line": 3,
        "fullcodeline": "lwp_read(fin, cmd);"
    },
    {
        "line": 6,
        "fullcodeline": "lwp_read(fin, cwd);"
    },
    {
        "line": 9,
        "fullcodeline": "int env_size = 0;"
    },
    {
        "line": 10,
        "fullcodeline": "std::vector<std::string> env;"
    },
    {
        "line": 11,
        "fullcodeline": "lwp_read_int32(fin, env_size);"
    },
    {
        "line": 17,
        "fullcodeline": "int pipe_size = 0;"
    },
    {
        "line": 18,
        "fullcodeline": "lwp_read_int32(fin, pipe_size);"
    },
    {
        "line": 47,
        "fullcodeline": "pid_t child = fork();"
    },
    {
        "line": 12,
        "fullcodeline": "for (int i = 0; i < env_size; i++) {"
    },
    {
        "line": 20,
        "fullcodeline": "for (int i = 0; i < pipe_size; i++) {"
    },
    {
        "line": 27,
        "fullcodeline": "for (int i = 0; i < pipe_size; i++) {"
    },
    {
        "line": 48,
        "fullcodeline": "if (child == 0) {"
    },
    {
        "line": 13,
        "fullcodeline": "lwp_read(fin, buf);"
    },
    {
        "line": 14,
        "fullcodeline": "env.push_back(buf);"
    },
    {
        "line": 22,
        "fullcodeline": "lwp_read_int32(fin, fd_value);"
    },
    {
        "line": 23,
        "fullcodeline": "pvals.push_back(fd_value);"
    },
    {
        "line": 28,
        "fullcodeline": "int fd = recv_fd(afdt_fd);"
    },
    {
        "line": 36,
        "fullcodeline": "pkeys.push_back(fd);"
    },
    {
        "line": 40,
        "fullcodeline": "if (cmd.length() == 0) {"
    },
    {
        "line": 41,
        "fullcodeline": "lwp_write(fout, \"error\");"
    },
    {
        "line": 42,
        "fullcodeline": "lwp_write_int32(fout, ENOENT);"
    },
    {
        "line": 29,
        "fullcodeline": "if (fd < 0) {"
    },
    {
        "line": 49,
        "fullcodeline": "for (int i = 0; i < pipe_size; i++) {"
    },
    {
        "line": 30,
        "fullcodeline": "lwp_write(fout, \"error\");"
    },
    {
        "line": 31,
        "fullcodeline": "lwp_write_int32(fout, EPROTO);"
    },
    {
        "line": 32,
        "fullcodeline": "fflush(fout);"
    },
    {
        "line": 33,
        "fullcodeline": "close_fds(pkeys);"
    },
    {
        "line": 50,
        "fullcodeline": "dup2(pkeys[i], pvals[i]);"
    },
    {
        "line": 52,
        "fullcodeline": "if (cwd.length() > 0 && chdir(cwd.c_str())) {"
    },
    {
        "line": 56,
        "fullcodeline": "if (!env.empty()) {"
    },
    {
        "line": 57,
        "fullcodeline": "char **envp = build_envp(env);"
    },
    {
        "line": 58,
        "fullcodeline": "execle(\"/bin/sh\", \"sh\", \"-c\", cmd.c_str(), nullptr, envp);"
    },
    {
        "line": 64,
        "fullcodeline": "} else if (child > 0) {"
    },
    {
        "line": 66,
        "fullcodeline": "lwp_write(fout, \"success\");"
    },
    {
        "line": 67,
        "fullcodeline": "lwp_write_int64(fout, (int64_t)child);"
    },
    {
        "line": 61,
        "fullcodeline": "execl(\"/bin/sh\", \"sh\", \"-c\", cmd.c_str(), nullptr);"
    },
    {
        "line": 71,
        "fullcodeline": "lwp_write(fout, \"error\");"
    },
    {
        "line": 72,
        "fullcodeline": "lwp_write_int32(fout, errno);"
    }
]