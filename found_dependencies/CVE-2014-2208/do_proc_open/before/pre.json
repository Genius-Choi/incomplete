[
    {
        "line": 2,
        "fullcodeline": "char cmd[BUFFER_SIZE];"
    },
    {
        "line": 3,
        "fullcodeline": "read_buf(fin, cmd);"
    },
    {
        "line": 10,
        "fullcodeline": "char cwd[BUFFER_SIZE];"
    },
    {
        "line": 11,
        "fullcodeline": "read_buf(fin, cwd);"
    },
    {
        "line": 13,
        "fullcodeline": "char buf[BUFFER_SIZE];"
    },
    {
        "line": 14,
        "fullcodeline": "int env_size = 0;"
    },
    {
        "line": 15,
        "fullcodeline": "std::vector<std::string> env;"
    },
    {
        "line": 16,
        "fullcodeline": "read_buf(fin, buf);"
    },
    {
        "line": 17,
        "fullcodeline": "sscanf(buf, \"%d\", &env_size);"
    },
    {
        "line": 23,
        "fullcodeline": "int pipe_size = 0;"
    },
    {
        "line": 24,
        "fullcodeline": "read_buf(fin, buf);"
    },
    {
        "line": 25,
        "fullcodeline": "sscanf(buf, \"%d\", &pipe_size);"
    },
    {
        "line": 47,
        "fullcodeline": "pid_t child = fork();"
    },
    {
        "line": 4,
        "fullcodeline": "if (strlen(cmd) == 0) {"
    },
    {
        "line": 18,
        "fullcodeline": "for (int i = 0; i < env_size; i++) {"
    },
    {
        "line": 27,
        "fullcodeline": "for (int i = 0; i < pipe_size; i++) {"
    },
    {
        "line": 35,
        "fullcodeline": "for (int i = 0; i < pipe_size; i++) {"
    },
    {
        "line": 48,
        "fullcodeline": "if (child == 0) {"
    },
    {
        "line": 5,
        "fullcodeline": "fprintf(fout, \"error\\n%d\\n\", ENOENT);"
    },
    {
        "line": 6,
        "fullcodeline": "fflush(fout);"
    },
    {
        "line": 19,
        "fullcodeline": "read_buf(fin, buf);"
    },
    {
        "line": 20,
        "fullcodeline": "env.push_back(buf);"
    },
    {
        "line": 29,
        "fullcodeline": "read_buf(fin, buf);"
    },
    {
        "line": 30,
        "fullcodeline": "sscanf(buf, \"%d\", &fd_value);"
    },
    {
        "line": 31,
        "fullcodeline": "pvals.push_back(fd_value);"
    },
    {
        "line": 36,
        "fullcodeline": "int fd = recv_fd(afdt_fd);"
    },
    {
        "line": 43,
        "fullcodeline": "pkeys.push_back(fd);"
    },
    {
        "line": 37,
        "fullcodeline": "if (fd < 0) {"
    },
    {
        "line": 49,
        "fullcodeline": "for (int i = 0; i < pipe_size; i++) {"
    },
    {
        "line": 38,
        "fullcodeline": "fprintf(fout, \"error\\n%d\\n\", EPROTO);"
    },
    {
        "line": 50,
        "fullcodeline": "dup2(pkeys[i], pvals[i]);"
    },
    {
        "line": 52,
        "fullcodeline": "if (strlen(cwd) > 0 && chdir(cwd)) {"
    },
    {
        "line": 56,
        "fullcodeline": "if (!env.empty()) {"
    },
    {
        "line": 57,
        "fullcodeline": "char **envp = build_envp(env);"
    },
    {
        "line": 58,
        "fullcodeline": "execle(\"/bin/sh\", \"sh\", \"-c\", cmd, nullptr, envp);"
    },
    {
        "line": 70,
        "fullcodeline": "fprintf(fout, \"error\\n%d\\n\", errno);"
    }
]