[
    {
        "line": 2,
        "fullcodeline": "int64_t p = -1;"
    },
    {
        "line": 3,
        "fullcodeline": "int options = 0;"
    },
    {
        "line": 4,
        "fullcodeline": "int timeout = 0;"
    },
    {
        "line": 5,
        "fullcodeline": "lwp_read_int64(fin, p);"
    },
    {
        "line": 6,
        "fullcodeline": "lwp_read_int32(fin, options);"
    },
    {
        "line": 7,
        "fullcodeline": "lwp_read_int32(fin, timeout);"
    },
    {
        "line": 9,
        "fullcodeline": "pid_t pid = (pid_t)p;"
    },
    {
        "line": 17,
        "fullcodeline": "pid_t ret = ::waitpid(pid, &stat, options);"
    },
    {
        "line": 18,
        "fullcodeline": "alarm(0); // cancel the previous alarm if not triggered yet"
    },
    {
        "line": 19,
        "fullcodeline": "waited = 0;"
    },
    {
        "line": 20,
        "fullcodeline": "lwp_write_int64(fout, ret);"
    },
    {
        "line": 21,
        "fullcodeline": "lwp_write_int32(fout, stat);"
    },
    {
        "line": 25,
        "fullcodeline": "fflush(fout);"
    },
    {
        "line": 11,
        "fullcodeline": "if (timeout > 0) {"
    },
    {
        "line": 22,
        "fullcodeline": "if (ret < 0) {"
    },
    {
        "line": 12,
        "fullcodeline": "waited = pid;"
    },
    {
        "line": 13,
        "fullcodeline": "signal(SIGALRM, kill_handler);"
    },
    {
        "line": 14,
        "fullcodeline": "alarm(timeout);"
    },
    {
        "line": 23,
        "fullcodeline": "lwp_write_int32(fout, errno);"
    }
]