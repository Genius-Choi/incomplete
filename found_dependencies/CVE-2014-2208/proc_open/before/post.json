[
    {
        "line": 5,
        "fullcodeline": "int id = GetId();"
    },
    {
        "line": 8,
        "fullcodeline": "always_assert(created.size() == desired.size());"
    },
    {
        "line": 14,
        "fullcodeline": "fprintf(g_procs[id].m_fout, \"%d\\n\", (int)env.size());"
    },
    {
        "line": 19,
        "fullcodeline": "fprintf(g_procs[id].m_fout, \"%d\\n\", (int)created.size());"
    },
    {
        "line": 24,
        "fullcodeline": "fflush(g_procs[id].m_fout);"
    },
    {
        "line": 25,
        "fullcodeline": "bool error_send = false;"
    },
    {
        "line": 26,
        "fullcodeline": "int save_errno = 0;"
    },
    {
        "line": 35,
        "fullcodeline": "char buf[BUFFER_SIZE];"
    },
    {
        "line": 36,
        "fullcodeline": "read_buf(g_procs[id].m_fin, buf);"
    },
    {
        "line": 47,
        "fullcodeline": "int64_t pid = -1;"
    },
    {
        "line": 49,
        "fullcodeline": "assert(pid);"
    },
    {
        "line": 10,
        "fullcodeline": "if (fprintf(g_procs[id].m_fout, \"proc_open\\n%s\\n%s\\n\", cmd, cwd) <= 0) {"
    },
    {
        "line": 15,
        "fullcodeline": "for (unsigned int i = 0; i < env.size(); i++) {"
    },
    {
        "line": 21,
        "fullcodeline": "for (unsigned int i = 0; i < desired.size(); i++) {"
    },
    {
        "line": 27,
        "fullcodeline": "for (unsigned int i = 0; i < created.size(); i++) {"
    },
    {
        "line": 37,
        "fullcodeline": "if (strncmp(buf, \"error\", 5) == 0) {"
    },
    {
        "line": 50,
        "fullcodeline": "return (pid_t)pid;"
    },
    {
        "line": 11,
        "fullcodeline": "Logger::Error(\"Failed to send command proc_open\");"
    },
    {
        "line": 16,
        "fullcodeline": "fprintf(g_procs[id].m_fout, \"%s\\n\", env[i].c_str());"
    },
    {
        "line": 22,
        "fullcodeline": "fprintf(g_procs[id].m_fout, \"%d\\n\", desired[i]);"
    },
    {
        "line": 38,
        "fullcodeline": "read_buf(g_procs[id].m_fin, buf);"
    },
    {
        "line": 39,
        "fullcodeline": "sscanf(buf, \"%d\", &errno);"
    },
    {
        "line": 12,
        "fullcodeline": "return -1;"
    },
    {
        "line": 28,
        "fullcodeline": "if (!send_fd(g_procs[id].m_afdt_fd, created[i])) {"
    },
    {
        "line": 45,
        "fullcodeline": "return -1;"
    },
    {
        "line": 29,
        "fullcodeline": "error_send = true;"
    },
    {
        "line": 30,
        "fullcodeline": "save_errno = errno;"
    },
    {
        "line": 43,
        "fullcodeline": "errno = save_errno;"
    }
]