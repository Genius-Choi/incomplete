[
    {
        "line": 4,
        "fullcodeline": "ws_ctx_t *wsctx = (ws_ctx_t *)cl->wsctx;"
    },
    {
        "line": 5,
        "fullcodeline": "char *headerDst = wsctx->codeBufDecode + wsctx->nReadRaw;"
    },
    {
        "line": 6,
        "fullcodeline": "int n = WSHLENMAX - wsctx->nReadRaw;"
    },
    {
        "line": 8,
        "fullcodeline": "rfbLog(\"header_read to %p with len=%d\\n\", headerDst, n);"
    },
    {
        "line": 9,
        "fullcodeline": "ret = ws_read(cl, headerDst, n);"
    },
    {
        "line": 10,
        "fullcodeline": "rfbLog(\"read %d bytes from socket\\n\", ret);"
    },
    {
        "line": 24,
        "fullcodeline": "wsctx->nReadRaw += ret;"
    },
    {
        "line": 33,
        "fullcodeline": "wsctx->header.data = (ws_header_t *)wsctx->codeBufDecode;"
    },
    {
        "line": 35,
        "fullcodeline": "wsctx->header.opcode = wsctx->header.data->b0 & 0x0f;"
    },
    {
        "line": 38,
        "fullcodeline": "wsctx->header.payloadLen = wsctx->header.data->b1 & 0x7f;"
    },
    {
        "line": 39,
        "fullcodeline": "rfbLog(\"first header bytes received; opcode=%d lenbyte=%d\\n\", wsctx->header.opcode, wsctx->header.payloadLen);"
    },
    {
        "line": 74,
        "fullcodeline": "wsctx->nToRead = wsctx->header.headerLen + wsctx->header.payloadLen;"
    },
    {
        "line": 77,
        "fullcodeline": "wsctx->writePos = wsctx->codeBufDecode + wsctx->nReadRaw;"
    },
    {
        "line": 79,
        "fullcodeline": "wsctx->readPos = (unsigned char *)(wsctx->codeBufDecode + wsctx->header.headerLen);"
    },
    {
        "line": 81,
        "fullcodeline": "rfbLog(\"header complete: state=%d flen=%d writeTo=%p\\n\", wsctx->hybiDecodeState, wsctx->nToRead, wsctx->writePos);"
    },
    {
        "line": 11,
        "fullcodeline": "if (ret <= 0) {"
    },
    {
        "line": 25,
        "fullcodeline": "if (wsctx->nReadRaw < 2) {"
    },
    {
        "line": 47,
        "fullcodeline": "if (!(wsctx->header.data->b1 & 0x80)) {"
    },
    {
        "line": 54,
        "fullcodeline": "if (wsctx->header.payloadLen < 126 && wsctx->nReadRaw >= 6) {"
    },
    {
        "line": 27,
        "fullcodeline": "errno = EAGAIN;"
    },
    {
        "line": 28,
        "fullcodeline": "*sockRet = -1;"
    },
    {
        "line": 48,
        "fullcodeline": "rfbErr(\"%s: got frame without mask ret=%d\\n\", __func__, ret);"
    },
    {
        "line": 49,
        "fullcodeline": "errno = EIO;"
    },
    {
        "line": 50,
        "fullcodeline": "*sockRet = -1;"
    },
    {
        "line": 55,
        "fullcodeline": "wsctx->header.headerLen = 2 + WS_HYBI_MASK_LEN;"
    },
    {
        "line": 12,
        "fullcodeline": "if (-1 == ret) {"
    },
    {
        "line": 14,
        "fullcodeline": "int olderrno = errno;"
    },
    {
        "line": 15,
        "fullcodeline": "rfbErr(\"%s: peek; %m\\n\", __func__);"
    },
    {
        "line": 16,
        "fullcodeline": "errno = olderrno;"
    },
    {
        "line": 17,
        "fullcodeline": "*sockRet = -1;"
    },
    {
        "line": 57,
        "fullcodeline": "} else if (wsctx->header.payloadLen == 126 && 8 <= wsctx->nReadRaw) {"
    },
    {
        "line": 19,
        "fullcodeline": "*sockRet = 0;"
    },
    {
        "line": 58,
        "fullcodeline": "wsctx->header.headerLen = 4 + WS_HYBI_MASK_LEN;"
    },
    {
        "line": 59,
        "fullcodeline": "wsctx->header.payloadLen = WS_NTOH16(wsctx->header.data->u.s16.l16);"
    },
    {
        "line": 61,
        "fullcodeline": "} else if (wsctx->header.payloadLen == 127 && 14 <= wsctx->nReadRaw) {"
    },
    {
        "line": 62,
        "fullcodeline": "wsctx->header.headerLen = 10 + WS_HYBI_MASK_LEN;"
    },
    {
        "line": 63,
        "fullcodeline": "wsctx->header.payloadLen = WS_NTOH64(wsctx->header.data->u.s64.l64);"
    },
    {
        "line": 67,
        "fullcodeline": "rfbErr(\"%s: incomplete frame header; ret=%d\\n\", __func__, ret);"
    },
    {
        "line": 68,
        "fullcodeline": "errno = EAGAIN;"
    },
    {
        "line": 69,
        "fullcodeline": "*sockRet = -1;"
    }
]