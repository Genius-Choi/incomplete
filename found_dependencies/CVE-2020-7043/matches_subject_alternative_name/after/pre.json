[
    {
        "line": 2,
        "fullcodeline": "HostnameValidationResult result = MatchNotFound;"
    },
    {
        "line": 4,
        "fullcodeline": "int san_names_nb = -1;"
    },
    {
        "line": 5,
        "fullcodeline": "STACK_OF(GENERAL_NAME) *san_names = NULL;"
    },
    {
        "line": 8,
        "fullcodeline": "san_names = X509_get_ext_d2i((X509 *) server_cert, NID_subject_alt_name, NULL, NULL);"
    },
    {
        "line": 12,
        "fullcodeline": "san_names_nb = sk_GENERAL_NAME_num(san_names);"
    },
    {
        "line": 35,
        "fullcodeline": "sk_GENERAL_NAME_pop_free(san_names, GENERAL_NAME_free);"
    },
    {
        "line": 9,
        "fullcodeline": "if (san_names == NULL) {"
    },
    {
        "line": 15,
        "fullcodeline": "for (i=0; i<san_names_nb; i++) {"
    },
    {
        "line": 16,
        "fullcodeline": "const GENERAL_NAME *current_name = sk_GENERAL_NAME_value(san_names, i);"
    },
    {
        "line": 18,
        "fullcodeline": "if (current_name->type == GEN_DNS) {"
    },
    {
        "line": 20,
        "fullcodeline": "char *dns_name = (char *) ASN1_STRING_data(current_name->d.dNSName);"
    },
    {
        "line": 23,
        "fullcodeline": "if (ASN1_STRING_length(current_name->d.dNSName) != strlen(dns_name)) {"
    },
    {
        "line": 24,
        "fullcodeline": "result = MalformedCertificate;"
    },
    {
        "line": 28,
        "fullcodeline": "if (strcasecmp(hostname, dns_name) == 0) {"
    },
    {
        "line": 29,
        "fullcodeline": "result = MatchFound;"
    }
]