[
    {
        "line": 3,
        "fullcodeline": "auto result = make_uniq<CSVSniffFunctionData>();"
    },
    {
        "line": 4,
        "fullcodeline": "result->path = input.inputs[0].ToString();"
    },
    {
        "line": 5,
        "fullcodeline": "auto it = input.named_parameters.find(\"auto_detect\");"
    },
    {
        "line": 13,
        "fullcodeline": "result->options.FromNamedParameters(input.named_parameters, context);"
    },
    {
        "line": 16,
        "fullcodeline": "return_types.emplace_back(LogicalType::VARCHAR);"
    },
    {
        "line": 17,
        "fullcodeline": "names.emplace_back(\"Delimiter\");"
    },
    {
        "line": 19,
        "fullcodeline": "return_types.emplace_back(LogicalType::VARCHAR);"
    },
    {
        "line": 20,
        "fullcodeline": "names.emplace_back(\"Quote\");"
    },
    {
        "line": 22,
        "fullcodeline": "return_types.emplace_back(LogicalType::VARCHAR);"
    },
    {
        "line": 23,
        "fullcodeline": "names.emplace_back(\"Escape\");"
    },
    {
        "line": 25,
        "fullcodeline": "return_types.emplace_back(LogicalType::VARCHAR);"
    },
    {
        "line": 26,
        "fullcodeline": "names.emplace_back(\"NewLineDelimiter\");"
    },
    {
        "line": 28,
        "fullcodeline": "return_types.emplace_back(LogicalType::UINTEGER);"
    },
    {
        "line": 29,
        "fullcodeline": "names.emplace_back(\"SkipRows\");"
    },
    {
        "line": 31,
        "fullcodeline": "return_types.emplace_back(LogicalType::BOOLEAN);"
    },
    {
        "line": 32,
        "fullcodeline": "names.emplace_back(\"HasHeader\");"
    },
    {
        "line": 35,
        "fullcodeline": "auto list_child = LogicalType::STRUCT(struct_children);"
    },
    {
        "line": 36,
        "fullcodeline": "return_types.emplace_back(LogicalType::LIST(list_child));"
    },
    {
        "line": 37,
        "fullcodeline": "names.emplace_back(\"Columns\");"
    },
    {
        "line": 39,
        "fullcodeline": "return_types.emplace_back(LogicalType::VARCHAR);"
    },
    {
        "line": 40,
        "fullcodeline": "names.emplace_back(\"DateFormat\");"
    },
    {
        "line": 42,
        "fullcodeline": "return_types.emplace_back(LogicalType::VARCHAR);"
    },
    {
        "line": 43,
        "fullcodeline": "names.emplace_back(\"TimestampFormat\");"
    },
    {
        "line": 45,
        "fullcodeline": "return_types.emplace_back(LogicalType::VARCHAR);"
    },
    {
        "line": 46,
        "fullcodeline": "names.emplace_back(\"UserArguments\");"
    },
    {
        "line": 6,
        "fullcodeline": "if (it != input.named_parameters.end()) {"
    },
    {
        "line": 34,
        "fullcodeline": "child_list_t<LogicalType> struct_children {{\"name\", LogicalType::VARCHAR}, {\"type\", LogicalType::VARCHAR}};"
    },
    {
        "line": 50,
        "fullcodeline": "return std::move(result);"
    },
    {
        "line": 11,
        "fullcodeline": "input.named_parameters.erase(\"auto_detect\");"
    },
    {
        "line": 7,
        "fullcodeline": "if (!it->second.GetValue<bool>()) {"
    },
    {
        "line": 8,
        "fullcodeline": "throw InvalidInputException(\"sniff_csv function does not accept auto_detect variable set to false\");"
    }
]