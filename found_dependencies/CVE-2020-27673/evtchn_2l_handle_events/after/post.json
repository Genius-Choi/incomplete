[
    {
        "line": 9,
        "fullcodeline": "struct shared_info *s = HYPERVISOR_shared_info;"
    },
    {
        "line": 10,
        "fullcodeline": "struct vcpu_info *vcpu_info = __this_cpu_read(xen_vcpu);"
    },
    {
        "line": 13,
        "fullcodeline": "irq = irq_from_virq(cpu, VIRQ_TIMER);"
    },
    {
        "line": 27,
        "fullcodeline": "pending_words = xchg_xen_ulong(&vcpu_info->evtchn_pending_sel, 0);"
    },
    {
        "line": 29,
        "fullcodeline": "start_word_idx = __this_cpu_read(current_word_idx);"
    },
    {
        "line": 30,
        "fullcodeline": "start_bit_idx = __this_cpu_read(current_bit_idx);"
    },
    {
        "line": 32,
        "fullcodeline": "word_idx = start_word_idx;"
    },
    {
        "line": 14,
        "fullcodeline": "if (irq != -1) {"
    },
    {
        "line": 34,
        "fullcodeline": "for (i = 0; pending_words != 0; i++) {"
    },
    {
        "line": 15,
        "fullcodeline": "evtchn_port_t evtchn = evtchn_from_irq(irq);"
    },
    {
        "line": 16,
        "fullcodeline": "word_idx = evtchn / BITS_PER_LONG;"
    },
    {
        "line": 17,
        "fullcodeline": "bit_idx = evtchn % BITS_PER_LONG;"
    },
    {
        "line": 37,
        "fullcodeline": "words = MASK_LSBS(pending_words, word_idx);"
    },
    {
        "line": 47,
        "fullcodeline": "word_idx = EVTCHN_FIRST_BIT(words);"
    },
    {
        "line": 49,
        "fullcodeline": "pending_bits = active_evtchns(cpu, s, word_idx);"
    },
    {
        "line": 50,
        "fullcodeline": "bit_idx = 0; /* usually scan entire word from start */"
    },
    {
        "line": 97,
        "fullcodeline": "word_idx = (word_idx + 1) % BITS_PER_EVTCHN_WORD;"
    },
    {
        "line": 18,
        "fullcodeline": "if (active_evtchns(cpu, s, word_idx) & (1ULL << bit_idx))"
    },
    {
        "line": 42,
        "fullcodeline": "if (words == 0) {"
    },
    {
        "line": 63,
        "fullcodeline": "if (word_idx == start_word_idx) {"
    },
    {
        "line": 91,
        "fullcodeline": "} while (bit_idx != 0);"
    },
    {
        "line": 94,
        "fullcodeline": "if ((word_idx != start_word_idx) || (i != 0))"
    },
    {
        "line": 19,
        "fullcodeline": "generic_handle_irq(irq);"
    },
    {
        "line": 43,
        "fullcodeline": "word_idx = 0;"
    },
    {
        "line": 44,
        "fullcodeline": "bit_idx = 0;"
    },
    {
        "line": 72,
        "fullcodeline": "bits = MASK_LSBS(pending_bits, bit_idx);"
    },
    {
        "line": 78,
        "fullcodeline": "bit_idx = EVTCHN_FIRST_BIT(bits);"
    },
    {
        "line": 81,
        "fullcodeline": "port = (word_idx * BITS_PER_EVTCHN_WORD) + bit_idx;"
    },
    {
        "line": 82,
        "fullcodeline": "handle_irq_for_port(port, ctrl);"
    },
    {
        "line": 84,
        "fullcodeline": "bit_idx = (bit_idx + 1) % BITS_PER_EVTCHN_WORD;"
    },
    {
        "line": 87,
        "fullcodeline": "__this_cpu_write(current_word_idx,"
    },
    {
        "line": 90,
        "fullcodeline": "__this_cpu_write(current_bit_idx, bit_idx);"
    },
    {
        "line": 95,
        "fullcodeline": "pending_words &= ~(1UL << word_idx);"
    },
    {
        "line": 64,
        "fullcodeline": "if (i == 0)"
    },
    {
        "line": 75,
        "fullcodeline": "if (bits == 0)"
    },
    {
        "line": 88,
        "fullcodeline": "bit_idx ? word_idx :"
    },
    {
        "line": 65,
        "fullcodeline": "bit_idx = start_bit_idx;"
    },
    {
        "line": 89,
        "fullcodeline": "(word_idx+1) % BITS_PER_EVTCHN_WORD);"
    }
]