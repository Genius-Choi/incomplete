[
    {
        "line": 3,
        "fullcodeline": "GF_OperatingPointsInformation* ptr = (GF_OperatingPointsInformation *)entry;"
    },
    {
        "line": 7,
        "fullcodeline": "ptr->scalability_mask = gf_bs_read_u16(bs);"
    },
    {
        "line": 8,
        "fullcodeline": "gf_bs_read_int(bs, 2);//reserved"
    },
    {
        "line": 9,
        "fullcodeline": "count = gf_bs_read_int(bs, 6);"
    },
    {
        "line": 22,
        "fullcodeline": "count = gf_bs_read_u16(bs);"
    },
    {
        "line": 58,
        "fullcodeline": "count = gf_bs_read_u8(bs);"
    },
    {
        "line": 6,
        "fullcodeline": "if (!ptr) return GF_BAD_PARAM;"
    },
    {
        "line": 10,
        "fullcodeline": "for (i = 0; i < count; i++) {"
    },
    {
        "line": 23,
        "fullcodeline": "for (i = 0; i < count; i++) {"
    },
    {
        "line": 59,
        "fullcodeline": "for (i = 0; i < count; i++) {"
    },
    {
        "line": 12,
        "fullcodeline": "GF_SAFEALLOC(ptl, LHEVC_ProfileTierLevel);"
    },
    {
        "line": 14,
        "fullcodeline": "ptl->general_profile_space = gf_bs_read_int(bs, 2);"
    },
    {
        "line": 15,
        "fullcodeline": "ptl->general_tier_flag= gf_bs_read_int(bs, 1);"
    },
    {
        "line": 16,
        "fullcodeline": "ptl->general_profile_idc = gf_bs_read_int(bs, 5);"
    },
    {
        "line": 17,
        "fullcodeline": "ptl->general_profile_compatibility_flags = gf_bs_read_u32(bs);"
    },
    {
        "line": 18,
        "fullcodeline": "ptl->general_constraint_indicator_flags = gf_bs_read_long_int(bs, 48);"
    },
    {
        "line": 19,
        "fullcodeline": "ptl->general_level_idc = gf_bs_read_u8(bs);"
    },
    {
        "line": 20,
        "fullcodeline": "gf_list_add(ptr->profile_tier_levels, ptl);"
    },
    {
        "line": 25,
        "fullcodeline": "GF_SAFEALLOC(op, LHEVC_OperatingPoint);"
    },
    {
        "line": 27,
        "fullcodeline": "op->output_layer_set_idx = gf_bs_read_u16(bs);"
    },
    {
        "line": 28,
        "fullcodeline": "op->max_temporal_id = gf_bs_read_u8(bs);"
    },
    {
        "line": 29,
        "fullcodeline": "op->layer_count = gf_bs_read_u8(bs);"
    },
    {
        "line": 38,
        "fullcodeline": "op->minPicWidth = gf_bs_read_u16(bs);"
    },
    {
        "line": 39,
        "fullcodeline": "op->minPicHeight = gf_bs_read_u16(bs);"
    },
    {
        "line": 40,
        "fullcodeline": "op->maxPicWidth = gf_bs_read_u16(bs);"
    },
    {
        "line": 41,
        "fullcodeline": "op->maxPicHeight = gf_bs_read_u16(bs);"
    },
    {
        "line": 42,
        "fullcodeline": "op->maxChromaFormat = gf_bs_read_int(bs, 2);"
    },
    {
        "line": 43,
        "fullcodeline": "op->maxBitDepth = gf_bs_read_int(bs, 3) + 8;"
    },
    {
        "line": 44,
        "fullcodeline": "gf_bs_read_int(bs, 1);//reserved"
    },
    {
        "line": 45,
        "fullcodeline": "op->frame_rate_info_flag = gf_bs_read_int(bs, 1) ? GF_TRUE : GF_FALSE;"
    },
    {
        "line": 46,
        "fullcodeline": "op->bit_rate_info_flag = gf_bs_read_int(bs, 1) ? GF_TRUE : GF_FALSE;"
    },
    {
        "line": 56,
        "fullcodeline": "gf_list_add(ptr->operating_points, op);"
    },
    {
        "line": 61,
        "fullcodeline": "GF_SAFEALLOC(dep, LHEVC_DependentLayer);"
    },
    {
        "line": 63,
        "fullcodeline": "dep->dependent_layerID = gf_bs_read_u8(bs);"
    },
    {
        "line": 64,
        "fullcodeline": "dep->num_layers_dependent_on = gf_bs_read_u8(bs);"
    },
    {
        "line": 75,
        "fullcodeline": "gf_list_add(ptr->dependency_layers, dep);"
    },
    {
        "line": 13,
        "fullcodeline": "if (!ptl) return GF_OUT_OF_MEM;"
    },
    {
        "line": 26,
        "fullcodeline": "if (!op) return GF_OUT_OF_MEM;"
    },
    {
        "line": 30,
        "fullcodeline": "if (op->layer_count > GF_ARRAY_LENGTH(op->layers_info))"
    },
    {
        "line": 32,
        "fullcodeline": "for (j = 0; j < op->layer_count; j++) {"
    },
    {
        "line": 62,
        "fullcodeline": "if (!dep) return GF_OUT_OF_MEM;"
    },
    {
        "line": 65,
        "fullcodeline": "if (dep->num_layers_dependent_on > GF_ARRAY_LENGTH(dep->dependent_on_layerID)) {"
    },
    {
        "line": 69,
        "fullcodeline": "for (j = 0; j < dep->num_layers_dependent_on; j++)"
    },
    {
        "line": 70,
        "fullcodeline": "dep->dependent_on_layerID[j] = gf_bs_read_u8(bs);"
    },
    {
        "line": 71,
        "fullcodeline": "for (j = 0; j < 16; j++) {"
    },
    {
        "line": 33,
        "fullcodeline": "op->layers_info[j].ptl_idx = gf_bs_read_u8(bs);"
    },
    {
        "line": 34,
        "fullcodeline": "op->layers_info[j].layer_id = gf_bs_read_int(bs, 6);"
    },
    {
        "line": 35,
        "fullcodeline": "op->layers_info[j].is_outputlayer = gf_bs_read_int(bs, 1) ? GF_TRUE : GF_FALSE;"
    },
    {
        "line": 36,
        "fullcodeline": "op->layers_info[j].is_alternate_outputlayer = gf_bs_read_int(bs, 1) ? GF_TRUE : GF_FALSE;"
    },
    {
        "line": 48,
        "fullcodeline": "op->avgFrameRate = gf_bs_read_u16(bs);"
    },
    {
        "line": 49,
        "fullcodeline": "gf_bs_read_int(bs, 6); //reserved"
    },
    {
        "line": 50,
        "fullcodeline": "op->constantFrameRate = gf_bs_read_int(bs, 2);"
    },
    {
        "line": 53,
        "fullcodeline": "op->maxBitRate = gf_bs_read_u32(bs);"
    },
    {
        "line": 54,
        "fullcodeline": "op->avgBitRate = gf_bs_read_u32(bs);"
    },
    {
        "line": 66,
        "fullcodeline": "gf_free(dep);"
    },
    {
        "line": 72,
        "fullcodeline": "if (ptr->scalability_mask & (1 << j))"
    },
    {
        "line": 73,
        "fullcodeline": "dep->dimension_identifier[j] = gf_bs_read_u8(bs);"
    }
]