[
    {
        "line": 14,
        "fullcodeline": "char buf[100];"
    },
    {
        "line": 17,
        "fullcodeline": "ldp_tlv_header = (const struct ldp_tlv_header *)tptr;"
    },
    {
        "line": 18,
        "fullcodeline": "ND_TCHECK(*ldp_tlv_header);"
    },
    {
        "line": 19,
        "fullcodeline": "tlv_len=EXTRACT_16BITS(ldp_tlv_header->length);"
    },
    {
        "line": 24,
        "fullcodeline": "tlv_tlen=tlv_len;"
    },
    {
        "line": 25,
        "fullcodeline": "tlv_type=LDP_MASK_TLV_TYPE(EXTRACT_16BITS(ldp_tlv_header->type));"
    },
    {
        "line": 37,
        "fullcodeline": "tptr+=sizeof(struct ldp_tlv_header);"
    },
    {
        "line": 20,
        "fullcodeline": "if (tlv_len + 4 > msg_tlen) {"
    },
    {
        "line": 28,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t    %s TLV (0x%04x), length: %u, Flags: [%s and %s forward if unknown]\","
    },
    {
        "line": 300,
        "fullcodeline": "return(tlv_len+4); /* Type & Length fields not included */"
    },
    {
        "line": 303,
        "fullcodeline": "ND_PRINT((ndo, \"%s\", tstr));"
    },
    {
        "line": 21,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t\\t TLV contents go past end of message\"));"
    },
    {
        "line": 63,
        "fullcodeline": "TLV_TCHECK(LDP_TLV_ADDRESS_LIST_AFNUM_LEN);"
    },
    {
        "line": 64,
        "fullcodeline": "af = EXTRACT_16BITS(tptr);"
    },
    {
        "line": 65,
        "fullcodeline": "tptr+=LDP_TLV_ADDRESS_LIST_AFNUM_LEN;"
    },
    {
        "line": 66,
        "fullcodeline": "tlv_tlen -= LDP_TLV_ADDRESS_LIST_AFNUM_LEN;"
    },
    {
        "line": 103,
        "fullcodeline": "fec_type = *tptr;"
    },
    {
        "line": 108,
        "fullcodeline": "tptr+=1;"
    },
    {
        "line": 109,
        "fullcodeline": "tlv_tlen-=1;"
    },
    {
        "line": 241,
        "fullcodeline": "ui = EXTRACT_32BITS(tptr);"
    },
    {
        "line": 242,
        "fullcodeline": "tptr+=4;"
    },
    {
        "line": 247,
        "fullcodeline": "ui = EXTRACT_32BITS(tptr);"
    },
    {
        "line": 255,
        "fullcodeline": "ft_flags = EXTRACT_16BITS(tptr);"
    },
    {
        "line": 263,
        "fullcodeline": "tptr+=4;"
    },
    {
        "line": 264,
        "fullcodeline": "ui = EXTRACT_32BITS(tptr);"
    },
    {
        "line": 267,
        "fullcodeline": "tptr+=4;"
    },
    {
        "line": 268,
        "fullcodeline": "ui = EXTRACT_32BITS(tptr);"
    },
    {
        "line": 29,
        "fullcodeline": "tok2str(ldp_tlv_values,"
    },
    {
        "line": 43,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t      Hold Time: %us, Flags: [%s Hello%s]\","
    },
    {
        "line": 51,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t      IPv4 Transport Address: %s\", ipaddr_string(ndo, tptr)));"
    },
    {
        "line": 55,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t      IPv6 Transport Address: %s\", ip6addr_string(ndo, tptr)));"
    },
    {
        "line": 59,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t      Sequence Number: %u\", EXTRACT_32BITS(tptr)));"
    },
    {
        "line": 67,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t      Address Family: %s, addresses\","
    },
    {
        "line": 94,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t      Version: %u, Keepalive: %us, Flags: [Downstream %s, Loop Detection %s]\","
    },
    {
        "line": 104,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t      %s FEC (0x%02x)\","
    },
    {
        "line": 236,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t      Label: %u\", EXTRACT_32BITS(tptr) & 0xfffff));"
    },
    {
        "line": 243,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t      Status: 0x%02x, Flags: [%s and %s forward]\","
    },
    {
        "line": 256,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t      Flags: [%sReconnect, %sSave State, %sAll-Label Protection, %s Checkpoint, %sRe-Learn State]\","
    },
    {
        "line": 275,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t      MTU: %u\", EXTRACT_16BITS(tptr)));"
    },
    {
        "line": 296,
        "fullcodeline": "if (ndo->ndo_vflag <= 1)"
    },
    {
        "line": 116,
        "fullcodeline": "af = EXTRACT_16BITS(tptr);"
    },
    {
        "line": 117,
        "fullcodeline": "tptr+=LDP_TLV_ADDRESS_LIST_AFNUM_LEN;"
    },
    {
        "line": 118,
        "fullcodeline": "tlv_tlen-=LDP_TLV_ADDRESS_LIST_AFNUM_LEN;"
    },
    {
        "line": 152,
        "fullcodeline": "vc_info_len = *(tptr+2);"
    },
    {
        "line": 181,
        "fullcodeline": "vc_info_len -= 4; /* subtract out the VC ID, giving the length of the interface parameters */"
    },
    {
        "line": 184,
        "fullcodeline": "tptr+=11;"
    },
    {
        "line": 186,
        "fullcodeline": "TLV_TCHECK(vc_info_len);"
    },
    {
        "line": 34,
        "fullcodeline": "LDP_MASK_U_BIT(EXTRACT_16BITS(&ldp_tlv_header->type)) ? \"continue processing\" : \"ignore\","
    },
    {
        "line": 35,
        "fullcodeline": "LDP_MASK_F_BIT(EXTRACT_16BITS(&ldp_tlv_header->type)) ? \"do\" : \"don't\"));"
    },
    {
        "line": 44,
        "fullcodeline": "EXTRACT_16BITS(tptr),"
    },
    {
        "line": 68,
        "fullcodeline": "tok2str(af_values, \"Unknown (%u)\", af)));"
    },
    {
        "line": 71,
        "fullcodeline": "while(tlv_tlen >= sizeof(struct in_addr)) {"
    },
    {
        "line": 79,
        "fullcodeline": "while(tlv_tlen >= sizeof(struct in6_addr)) {"
    },
    {
        "line": 95,
        "fullcodeline": "EXTRACT_16BITS(tptr), EXTRACT_16BITS(tptr+2),"
    },
    {
        "line": 105,
        "fullcodeline": "tok2str(ldp_fec_values, \"Unknown\", fec_type),"
    },
    {
        "line": 119,
        "fullcodeline": "if (af == AFNUM_INET) {"
    },
    {
        "line": 159,
        "fullcodeline": "if (vc_info_len == 0) {"
    },
    {
        "line": 170,
        "fullcodeline": "ND_PRINT((ndo, \": %s, %scontrol word, group-ID %u, VC-ID %u, VC-info-length: %u\","
    },
    {
        "line": 176,
        "fullcodeline": "if (vc_info_len < 4) {"
    },
    {
        "line": 188,
        "fullcodeline": "while (vc_info_len > 2) {"
    },
    {
        "line": 244,
        "fullcodeline": "ui&0x3fffffff,"
    },
    {
        "line": 250,
        "fullcodeline": "ND_PRINT((ndo, \", causing Message ID: 0x%08x\", ui));"
    },
    {
        "line": 266,
        "fullcodeline": "ND_PRINT((ndo, \", Reconnect Timeout: %ums\", ui));"
    },
    {
        "line": 270,
        "fullcodeline": "ND_PRINT((ndo, \", Recovery Time: %ums\", ui));"
    },
    {
        "line": 72,
        "fullcodeline": "ND_TCHECK2(*tptr, sizeof(struct in_addr));"
    },
    {
        "line": 74,
        "fullcodeline": "tlv_tlen-=sizeof(struct in_addr);"
    },
    {
        "line": 75,
        "fullcodeline": "tptr+=sizeof(struct in_addr);"
    },
    {
        "line": 80,
        "fullcodeline": "ND_TCHECK2(*tptr, sizeof(struct in6_addr));"
    },
    {
        "line": 82,
        "fullcodeline": "tlv_tlen-=sizeof(struct in6_addr);"
    },
    {
        "line": 83,
        "fullcodeline": "tptr+=sizeof(struct in6_addr);"
    },
    {
        "line": 120,
        "fullcodeline": "i=decode_prefix4(ndo, tptr, tlv_tlen, buf, sizeof(buf));"
    },
    {
        "line": 189,
        "fullcodeline": "vc_info_tlv_type = *tptr;"
    },
    {
        "line": 190,
        "fullcodeline": "vc_info_tlv_len = *(tptr+1);"
    },
    {
        "line": 226,
        "fullcodeline": "vc_info_len -= vc_info_tlv_len;"
    },
    {
        "line": 227,
        "fullcodeline": "tptr += vc_info_tlv_len;"
    },
    {
        "line": 245,
        "fullcodeline": "ui&0x80000000 ? \"Fatal error\" : \"Advisory Notification\","
    },
    {
        "line": 257,
        "fullcodeline": "ft_flags&0x8000 ? \"\" : \"No \","
    },
    {
        "line": 258,
        "fullcodeline": "ft_flags&0x8 ? \"\" : \"Don't \","
    },
    {
        "line": 259,
        "fullcodeline": "ft_flags&0x4 ? \"\" : \"No \","
    },
    {
        "line": 260,
        "fullcodeline": "ft_flags&0x2 ? \"Sequence Numbered Label\" : \"All Labels\","
    },
    {
        "line": 45,
        "fullcodeline": "(EXTRACT_16BITS(tptr+2)&0x8000) ? \"Targeted\" : \"Link\","
    },
    {
        "line": 46,
        "fullcodeline": "(EXTRACT_16BITS(tptr+2)&0x4000) ? \", Request for targeted Hellos\" : \"\"));"
    },
    {
        "line": 73,
        "fullcodeline": "ND_PRINT((ndo, \" %s\", ipaddr_string(ndo, tptr)));"
    },
    {
        "line": 81,
        "fullcodeline": "ND_PRINT((ndo, \" %s\", ip6addr_string(ndo, tptr)));"
    },
    {
        "line": 96,
        "fullcodeline": "(EXTRACT_16BITS(tptr+6)&0x8000) ? \"On Demand\" : \"Unsolicited\","
    },
    {
        "line": 97,
        "fullcodeline": "(EXTRACT_16BITS(tptr+6)&0x4000) ? \"Enabled\" : \"Disabled\""
    },
    {
        "line": 121,
        "fullcodeline": "if (i == -2)"
    },
    {
        "line": 123,
        "fullcodeline": "if (i == -3)"
    },
    {
        "line": 160,
        "fullcodeline": "ND_PRINT((ndo, \": %s, %scontrol word, group-ID %u, VC-info-length: %u\","
    },
    {
        "line": 171,
        "fullcodeline": "tok2str(mpls_pw_types_values, \"Unknown\", EXTRACT_16BITS(tptr)&0x7fff),"
    },
    {
        "line": 173,
        "fullcodeline": "EXTRACT_32BITS(tptr+3),"
    },
    {
        "line": 174,
        "fullcodeline": "EXTRACT_32BITS(tptr+7),"
    },
    {
        "line": 178,
        "fullcodeline": "ND_PRINT((ndo, \" (invalid, < 4\"));"
    },
    {
        "line": 179,
        "fullcodeline": "return(tlv_len+4); /* Type & Length fields not included */"
    },
    {
        "line": 191,
        "fullcodeline": "if (vc_info_tlv_len < 2)"
    },
    {
        "line": 193,
        "fullcodeline": "if (vc_info_len < vc_info_tlv_len)"
    },
    {
        "line": 196,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t\\tInterface Parameter: %s (0x%02x), len %u\","
    },
    {
        "line": 130,
        "fullcodeline": "else if (af == AFNUM_INET6) {"
    },
    {
        "line": 222,
        "fullcodeline": "print_unknown_data(ndo, tptr+2, \"\\n\\t\\t  \", vc_info_tlv_len-2);"
    },
    {
        "line": 124,
        "fullcodeline": "ND_PRINT((ndo, \": IPv4 prefix (goes past end of TLV)\"));"
    },
    {
        "line": 131,
        "fullcodeline": "i=decode_prefix6(ndo, tptr, tlv_tlen, buf, sizeof(buf));"
    },
    {
        "line": 161,
        "fullcodeline": "tok2str(mpls_pw_types_values, \"Unknown\", EXTRACT_16BITS(tptr)&0x7fff),"
    },
    {
        "line": 163,
        "fullcodeline": "EXTRACT_32BITS(tptr+3),"
    },
    {
        "line": 172,
        "fullcodeline": "EXTRACT_16BITS(tptr)&0x8000 ? \"\" : \"no \","
    },
    {
        "line": 197,
        "fullcodeline": "tok2str(ldp_fec_martini_ifparm_values,\"Unknown\",vc_info_tlv_type),"
    },
    {
        "line": 203,
        "fullcodeline": "ND_PRINT((ndo, \": %u\", EXTRACT_16BITS(tptr+2)));"
    },
    {
        "line": 207,
        "fullcodeline": "ND_PRINT((ndo, \": \"));"
    },
    {
        "line": 208,
        "fullcodeline": "for (idx = 2; idx < vc_info_tlv_len; idx++)"
    },
    {
        "line": 209,
        "fullcodeline": "safeputchar(ndo, *(tptr + idx));"
    },
    {
        "line": 213,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t\\t  Control Channels (0x%02x) = [%s]\","
    },
    {
        "line": 216,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t\\t  CV Types (0x%02x) = [%s]\","
    },
    {
        "line": 132,
        "fullcodeline": "if (i == -2)"
    },
    {
        "line": 134,
        "fullcodeline": "if (i == -3)"
    },
    {
        "line": 125,
        "fullcodeline": "else if (i == -1)"
    },
    {
        "line": 142,
        "fullcodeline": "ND_PRINT((ndo, \": Address family %u prefix\", af));"
    },
    {
        "line": 162,
        "fullcodeline": "EXTRACT_16BITS(tptr)&0x8000 ? \"\" : \"no \","
    },
    {
        "line": 215,
        "fullcodeline": "bittok2str(ldp_fec_martini_ifparm_vccv_cc_values, \"none\", *(tptr+2))));"
    },
    {
        "line": 218,
        "fullcodeline": "bittok2str(ldp_fec_martini_ifparm_vccv_cv_values, \"none\", *(tptr+3))));"
    },
    {
        "line": 126,
        "fullcodeline": "ND_PRINT((ndo, \": IPv4 prefix (invalid length)\"));"
    },
    {
        "line": 135,
        "fullcodeline": "ND_PRINT((ndo, \": IPv4 prefix (goes past end of TLV)\"));"
    },
    {
        "line": 128,
        "fullcodeline": "ND_PRINT((ndo, \": IPv4 prefix %s\", buf));"
    },
    {
        "line": 136,
        "fullcodeline": "else if (i == -1)"
    },
    {
        "line": 137,
        "fullcodeline": "ND_PRINT((ndo, \": IPv6 prefix (invalid length)\"));"
    },
    {
        "line": 139,
        "fullcodeline": "ND_PRINT((ndo, \": IPv6 prefix %s\", buf));"
    }
]