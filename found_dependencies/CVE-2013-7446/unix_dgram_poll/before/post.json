[
    {
        "line": 4,
        "fullcodeline": "struct sock *sk = sock->sk, *other;"
    },
    {
        "line": 7,
        "fullcodeline": "sock_poll_wait(file, sk_sleep(sk), wait);"
    },
    {
        "line": 8,
        "fullcodeline": "mask = 0;"
    },
    {
        "line": 37,
        "fullcodeline": "writable = unix_writable(sk);"
    },
    {
        "line": 38,
        "fullcodeline": "other = unix_peer_get(sk);"
    },
    {
        "line": 11,
        "fullcodeline": "if (sk->sk_err || !skb_queue_empty(&sk->sk_error_queue))"
    },
    {
        "line": 15,
        "fullcodeline": "if (sk->sk_shutdown & RCV_SHUTDOWN)"
    },
    {
        "line": 17,
        "fullcodeline": "if (sk->sk_shutdown == SHUTDOWN_MASK)"
    },
    {
        "line": 21,
        "fullcodeline": "if (!skb_queue_empty(&sk->sk_receive_queue))"
    },
    {
        "line": 25,
        "fullcodeline": "if (sk->sk_type == SOCK_SEQPACKET) {"
    },
    {
        "line": 34,
        "fullcodeline": "if (!(poll_requested_events(wait) & (POLLWRBAND|POLLWRNORM|POLLOUT)))"
    },
    {
        "line": 12,
        "fullcodeline": "mask |= POLLERR |"
    },
    {
        "line": 16,
        "fullcodeline": "mask |= POLLRDHUP | POLLIN | POLLRDNORM;"
    },
    {
        "line": 18,
        "fullcodeline": "mask |= POLLHUP;"
    },
    {
        "line": 22,
        "fullcodeline": "mask |= POLLIN | POLLRDNORM;"
    },
    {
        "line": 45,
        "fullcodeline": "sock_put(other);"
    },
    {
        "line": 49,
        "fullcodeline": "mask |= POLLOUT | POLLWRNORM | POLLWRBAND;"
    },
    {
        "line": 26,
        "fullcodeline": "if (sk->sk_state == TCP_CLOSE)"
    },
    {
        "line": 29,
        "fullcodeline": "if (sk->sk_state == TCP_SYN_SENT)"
    },
    {
        "line": 40,
        "fullcodeline": "if (unix_peer(other) != sk) {"
    },
    {
        "line": 51,
        "fullcodeline": "set_bit(SOCK_ASYNC_NOSPACE, &sk->sk_socket->flags);"
    },
    {
        "line": 13,
        "fullcodeline": "(sock_flag(sk, SOCK_SELECT_ERR_QUEUE) ? POLLPRI : 0);"
    },
    {
        "line": 27,
        "fullcodeline": "mask |= POLLHUP;"
    },
    {
        "line": 41,
        "fullcodeline": "sock_poll_wait(file, &unix_sk(other)->peer_wait, wait);"
    },
    {
        "line": 42,
        "fullcodeline": "if (unix_recvq_full(other))"
    },
    {
        "line": 43,
        "fullcodeline": "writable = 0;"
    }
]