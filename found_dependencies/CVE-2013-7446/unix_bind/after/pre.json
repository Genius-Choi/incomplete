[
    {
        "line": 3,
        "fullcodeline": "struct sock *sk = sock->sk;"
    },
    {
        "line": 4,
        "fullcodeline": "struct net *net = sock_net(sk);"
    },
    {
        "line": 5,
        "fullcodeline": "struct unix_sock *u = unix_sk(sk);"
    },
    {
        "line": 6,
        "fullcodeline": "struct sockaddr_un *sunaddr = (struct sockaddr_un *)uaddr;"
    },
    {
        "line": 7,
        "fullcodeline": "char *sun_path = sunaddr->sun_path;"
    },
    {
        "line": 13,
        "fullcodeline": "err = -EINVAL;"
    },
    {
        "line": 22,
        "fullcodeline": "err = unix_mkname(sunaddr, addr_len, &hash);"
    },
    {
        "line": 25,
        "fullcodeline": "addr_len = err;"
    },
    {
        "line": 27,
        "fullcodeline": "err = mutex_lock_interruptible(&u->readlock);"
    },
    {
        "line": 31,
        "fullcodeline": "err = -EINVAL;"
    },
    {
        "line": 35,
        "fullcodeline": "err = -ENOMEM;"
    },
    {
        "line": 36,
        "fullcodeline": "addr = kmalloc(sizeof(*addr)+addr_len, GFP_KERNEL);"
    },
    {
        "line": 40,
        "fullcodeline": "memcpy(addr->name, sunaddr, addr_len);"
    },
    {
        "line": 41,
        "fullcodeline": "addr->len = addr_len;"
    },
    {
        "line": 42,
        "fullcodeline": "addr->hash = hash ^ sk->sk_type;"
    },
    {
        "line": 43,
        "fullcodeline": "atomic_set(&addr->refcnt, 1);"
    },
    {
        "line": 73,
        "fullcodeline": "err = 0;"
    },
    {
        "line": 74,
        "fullcodeline": "__unix_remove_socket(sk);"
    },
    {
        "line": 75,
        "fullcodeline": "u->addr = addr;"
    },
    {
        "line": 76,
        "fullcodeline": "__unix_insert_socket(list, sk);"
    },
    {
        "line": 79,
        "fullcodeline": "spin_unlock(&unix_table_lock);"
    },
    {
        "line": 81,
        "fullcodeline": "mutex_unlock(&u->readlock);"
    },
    {
        "line": 14,
        "fullcodeline": "if (sunaddr->sun_family != AF_UNIX)"
    },
    {
        "line": 17,
        "fullcodeline": "if (addr_len == sizeof(short)) {"
    },
    {
        "line": 23,
        "fullcodeline": "if (err < 0)"
    },
    {
        "line": 37,
        "fullcodeline": "if (!addr)"
    },
    {
        "line": 18,
        "fullcodeline": "err = unix_autobind(sock);"
    },
    {
        "line": 47,
        "fullcodeline": "umode_t mode = S_IFSOCK |"
    },
    {
        "line": 49,
        "fullcodeline": "err = unix_mknod(sun_path, mode, &path);"
    },
    {
        "line": 56,
        "fullcodeline": "addr->hash = UNIX_HASH_SIZE;"
    },
    {
        "line": 57,
        "fullcodeline": "hash = d_backing_inode(path.dentry)->i_ino & (UNIX_HASH_SIZE-1);"
    },
    {
        "line": 58,
        "fullcodeline": "spin_lock(&unix_table_lock);"
    },
    {
        "line": 59,
        "fullcodeline": "u->path = path;"
    },
    {
        "line": 60,
        "fullcodeline": "list = &unix_socket_table[hash];"
    },
    {
        "line": 62,
        "fullcodeline": "spin_lock(&unix_table_lock);"
    },
    {
        "line": 63,
        "fullcodeline": "err = -EADDRINUSE;"
    },
    {
        "line": 70,
        "fullcodeline": "list = &unix_socket_table[addr->hash];"
    },
    {
        "line": 48,
        "fullcodeline": "(SOCK_INODE(sock)->i_mode & ~current_umask());"
    },
    {
        "line": 53,
        "fullcodeline": "unix_release_addr(addr);"
    },
    {
        "line": 64,
        "fullcodeline": "if (__unix_find_socket_byname(net, sunaddr, addr_len,"
    },
    {
        "line": 51,
        "fullcodeline": "if (err == -EEXIST)"
    },
    {
        "line": 66,
        "fullcodeline": "unix_release_addr(addr);"
    },
    {
        "line": 52,
        "fullcodeline": "err = -EADDRINUSE;"
    }
]