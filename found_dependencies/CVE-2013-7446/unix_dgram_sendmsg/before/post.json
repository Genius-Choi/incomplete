[
    {
        "line": 4,
        "fullcodeline": "struct sock *sk = sock->sk;"
    },
    {
        "line": 5,
        "fullcodeline": "struct net *net = sock_net(sk);"
    },
    {
        "line": 6,
        "fullcodeline": "struct unix_sock *u = unix_sk(sk);"
    },
    {
        "line": 8,
        "fullcodeline": "struct sock *other = NULL;"
    },
    {
        "line": 9,
        "fullcodeline": "int namelen = 0; /* fake GCC */"
    },
    {
        "line": 16,
        "fullcodeline": "int data_len = 0;"
    },
    {
        "line": 18,
        "fullcodeline": "wait_for_unix_gc();"
    },
    {
        "line": 19,
        "fullcodeline": "err = scm_send(sock, msg, &scm, false);"
    },
    {
        "line": 23,
        "fullcodeline": "err = -EOPNOTSUPP;"
    },
    {
        "line": 44,
        "fullcodeline": "err = -EMSGSIZE;"
    },
    {
        "line": 57,
        "fullcodeline": "skb = sock_alloc_send_pskb(sk, len - data_len, data_len,"
    },
    {
        "line": 63,
        "fullcodeline": "err = unix_scm_to_skb(&scm, skb, true);"
    },
    {
        "line": 66,
        "fullcodeline": "max_level = err + 1;"
    },
    {
        "line": 68,
        "fullcodeline": "skb_put(skb, len - data_len);"
    },
    {
        "line": 69,
        "fullcodeline": "skb->data_len = data_len;"
    },
    {
        "line": 70,
        "fullcodeline": "skb->len = len;"
    },
    {
        "line": 71,
        "fullcodeline": "err = skb_copy_datagram_from_iter(skb, 0, &msg->msg_iter, len);"
    },
    {
        "line": 75,
        "fullcodeline": "timeo = sock_sndtimeo(sk, msg->msg_flags & MSG_DONTWAIT);"
    },
    {
        "line": 95,
        "fullcodeline": "unix_state_lock(other);"
    },
    {
        "line": 96,
        "fullcodeline": "err = -EPERM;"
    },
    {
        "line": 127,
        "fullcodeline": "err = -EPIPE;"
    },
    {
        "line": 154,
        "fullcodeline": "maybe_add_creds(skb, sock, other);"
    },
    {
        "line": 155,
        "fullcodeline": "skb_queue_tail(&other->sk_receive_queue, skb);"
    },
    {
        "line": 158,
        "fullcodeline": "unix_state_unlock(other);"
    },
    {
        "line": 159,
        "fullcodeline": "other->sk_data_ready(other);"
    },
    {
        "line": 160,
        "fullcodeline": "sock_put(other);"
    },
    {
        "line": 161,
        "fullcodeline": "scm_destroy(&scm);"
    },
    {
        "line": 165,
        "fullcodeline": "unix_state_unlock(other);"
    },
    {
        "line": 167,
        "fullcodeline": "kfree_skb(skb);"
    },
    {
        "line": 171,
        "fullcodeline": "scm_destroy(&scm);"
    },
    {
        "line": 20,
        "fullcodeline": "if (err < 0)"
    },
    {
        "line": 24,
        "fullcodeline": "if (msg->msg_flags&MSG_OOB)"
    },
    {
        "line": 40,
        "fullcodeline": "if (test_bit(SOCK_PASSCRED, &sock->flags) && !u->addr"
    },
    {
        "line": 45,
        "fullcodeline": "if (len > sk->sk_sndbuf - 32)"
    },
    {
        "line": 48,
        "fullcodeline": "if (len > SKB_MAX_ALLOC) {"
    },
    {
        "line": 60,
        "fullcodeline": "if (skb == NULL)"
    },
    {
        "line": 64,
        "fullcodeline": "if (err < 0)"
    },
    {
        "line": 78,
        "fullcodeline": "if (!other) {"
    },
    {
        "line": 89,
        "fullcodeline": "if (sk_filter(other, skb) < 0) {"
    },
    {
        "line": 97,
        "fullcodeline": "if (!unix_may_send(sk, other))"
    },
    {
        "line": 100,
        "fullcodeline": "if (sock_flag(other, SOCK_DEAD)) {"
    },
    {
        "line": 128,
        "fullcodeline": "if (other->sk_shutdown & RCV_SHUTDOWN)"
    },
    {
        "line": 131,
        "fullcodeline": "if (sk->sk_type != SOCK_SEQPACKET) {"
    },
    {
        "line": 137,
        "fullcodeline": "if (unix_peer(other) != sk && unix_recvq_full(other)) {"
    },
    {
        "line": 152,
        "fullcodeline": "if (sock_flag(other, SOCK_RCVTSTAMP))"
    },
    {
        "line": 156,
        "fullcodeline": "if (max_level > unix_sk(other)->recursion_level)"
    },
    {
        "line": 28,
        "fullcodeline": "err = unix_mkname(sunaddr, msg->msg_namelen, &hash);"
    },
    {
        "line": 31,
        "fullcodeline": "namelen = err;"
    },
    {
        "line": 41,
        "fullcodeline": "&& (err = unix_autobind(sock)) != 0)"
    },
    {
        "line": 49,
        "fullcodeline": "data_len = min_t(size_t,"
    },
    {
        "line": 52,
        "fullcodeline": "data_len = PAGE_ALIGN(data_len);"
    },
    {
        "line": 54,
        "fullcodeline": "BUILD_BUG_ON(SKB_MAX_ALLOC < PAGE_SIZE);"
    },
    {
        "line": 58,
        "fullcodeline": "msg->msg_flags & MSG_DONTWAIT, &err,"
    },
    {
        "line": 79,
        "fullcodeline": "err = -ECONNRESET;"
    },
    {
        "line": 83,
        "fullcodeline": "other = unix_find_other(net, sunaddr, namelen, sk->sk_type,"
    },
    {
        "line": 91,
        "fullcodeline": "err = len;"
    },
    {
        "line": 105,
        "fullcodeline": "unix_state_unlock(other);"
    },
    {
        "line": 106,
        "fullcodeline": "sock_put(other);"
    },
    {
        "line": 108,
        "fullcodeline": "err = 0;"
    },
    {
        "line": 109,
        "fullcodeline": "unix_state_lock(sk);"
    },
    {
        "line": 121,
        "fullcodeline": "other = NULL;"
    },
    {
        "line": 132,
        "fullcodeline": "err = security_unix_may_send(sk->sk_socket, other->sk_socket);"
    },
    {
        "line": 143,
        "fullcodeline": "timeo = unix_wait_for_peer(other, timeo);"
    },
    {
        "line": 145,
        "fullcodeline": "err = sock_intr_errno(timeo);"
    },
    {
        "line": 153,
        "fullcodeline": "__net_timestamp(skb);"
    },
    {
        "line": 157,
        "fullcodeline": "unix_sk(other)->recursion_level = max_level;"
    },
    {
        "line": 170,
        "fullcodeline": "sock_put(other);"
    },
    {
        "line": 29,
        "fullcodeline": "if (err < 0)"
    },
    {
        "line": 33,
        "fullcodeline": "sunaddr = NULL;"
    },
    {
        "line": 34,
        "fullcodeline": "err = -ENOTCONN;"
    },
    {
        "line": 35,
        "fullcodeline": "other = unix_peer_get(sk);"
    },
    {
        "line": 80,
        "fullcodeline": "if (sunaddr == NULL)"
    },
    {
        "line": 85,
        "fullcodeline": "if (other == NULL)"
    },
    {
        "line": 110,
        "fullcodeline": "if (unix_peer(sk) == other) {"
    },
    {
        "line": 138,
        "fullcodeline": "if (!timeo) {"
    },
    {
        "line": 146,
        "fullcodeline": "if (signal_pending(current))"
    },
    {
        "line": 36,
        "fullcodeline": "if (!other)"
    },
    {
        "line": 50,
        "fullcodeline": "len - SKB_MAX_ALLOC,"
    },
    {
        "line": 51,
        "fullcodeline": "MAX_SKB_FRAGS * PAGE_SIZE);"
    },
    {
        "line": 111,
        "fullcodeline": "unix_peer(sk) = NULL;"
    },
    {
        "line": 112,
        "fullcodeline": "unix_state_unlock(sk);"
    },
    {
        "line": 114,
        "fullcodeline": "unix_dgram_disconnected(sk, other);"
    },
    {
        "line": 115,
        "fullcodeline": "sock_put(other);"
    },
    {
        "line": 116,
        "fullcodeline": "err = -ECONNREFUSED;"
    },
    {
        "line": 139,
        "fullcodeline": "err = -EAGAIN;"
    },
    {
        "line": 118,
        "fullcodeline": "unix_state_unlock(sk);"
    }
]