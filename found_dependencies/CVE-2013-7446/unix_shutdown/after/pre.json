[
    {
        "line": 3,
        "fullcodeline": "struct sock *sk = sock->sk;"
    },
    {
        "line": 13,
        "fullcodeline": "++mode;"
    },
    {
        "line": 15,
        "fullcodeline": "unix_state_lock(sk);"
    },
    {
        "line": 16,
        "fullcodeline": "sk->sk_shutdown |= mode;"
    },
    {
        "line": 17,
        "fullcodeline": "other = unix_peer(sk);"
    },
    {
        "line": 20,
        "fullcodeline": "unix_state_unlock(sk);"
    },
    {
        "line": 21,
        "fullcodeline": "sk->sk_state_change(sk);"
    },
    {
        "line": 6,
        "fullcodeline": "if (mode < SHUT_RD || mode > SHUT_RDWR)"
    },
    {
        "line": 23,
        "fullcodeline": "if (other &&"
    },
    {
        "line": 19,
        "fullcodeline": "sock_hold(other);"
    },
    {
        "line": 24,
        "fullcodeline": "(sk->sk_type == SOCK_STREAM || sk->sk_type == SOCK_SEQPACKET)) {"
    },
    {
        "line": 26,
        "fullcodeline": "int peer_mode = 0;"
    },
    {
        "line": 32,
        "fullcodeline": "unix_state_lock(other);"
    },
    {
        "line": 33,
        "fullcodeline": "other->sk_shutdown |= peer_mode;"
    },
    {
        "line": 34,
        "fullcodeline": "unix_state_unlock(other);"
    },
    {
        "line": 35,
        "fullcodeline": "other->sk_state_change(other);"
    },
    {
        "line": 7,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 28,
        "fullcodeline": "if (mode&RCV_SHUTDOWN)"
    },
    {
        "line": 36,
        "fullcodeline": "if (peer_mode == SHUTDOWN_MASK)"
    },
    {
        "line": 29,
        "fullcodeline": "peer_mode |= SEND_SHUTDOWN;"
    },
    {
        "line": 31,
        "fullcodeline": "peer_mode |= RCV_SHUTDOWN;"
    },
    {
        "line": 37,
        "fullcodeline": "sk_wake_async(other, SOCK_WAKE_WAITD, POLL_HUP);"
    },
    {
        "line": 39,
        "fullcodeline": "sk_wake_async(other, SOCK_WAKE_WAITD, POLL_IN);"
    }
]