[
    {
        "line": 5,
        "fullcodeline": "stats->num_types += dh->type_ids_size;"
    },
    {
        "line": 6,
        "fullcodeline": "stats->num_classes += dh->class_defs_size;"
    },
    {
        "line": 7,
        "fullcodeline": "stats->num_method_refs += dh->method_ids_size;"
    },
    {
        "line": 8,
        "fullcodeline": "stats->num_field_refs += dh->field_ids_size;"
    },
    {
        "line": 9,
        "fullcodeline": "stats->num_strings += dh->string_ids_size;"
    },
    {
        "line": 10,
        "fullcodeline": "stats->num_protos += dh->proto_ids_size;"
    },
    {
        "line": 11,
        "fullcodeline": "stats->num_bytes += dh->file_size;"
    },
    {
        "line": 13,
        "fullcodeline": "stats->num_callsites += 0;"
    },
    {
        "line": 14,
        "fullcodeline": "stats->num_methodhandles += 0;"
    },
    {
        "line": 19,
        "fullcodeline": "std::unordered_set<uint32_t> anno_offsets;"
    },
    {
        "line": 92,
        "fullcodeline": "stats->num_annotations += anno_offsets.size();"
    },
    {
        "line": 93,
        "fullcodeline": "stats->num_type_lists += type_lists.size();"
    },
    {
        "line": 100,
        "fullcodeline": "const dex_map_list* map_list ="
    },
    {
        "line": 102,
        "fullcodeline": "bool header_seen = false;"
    },
    {
        "line": 103,
        "fullcodeline": "uint32_t header_index = 0;"
    },
    {
        "line": 2,
        "fullcodeline": "if (!stats) {"
    },
    {
        "line": 21,
        "fullcodeline": "for (uint32_t cidx = 0; cidx < dh->class_defs_size; ++cidx) {"
    },
    {
        "line": 87,
        "fullcodeline": "for (uint32_t meth_idx = 0; meth_idx < dh->method_ids_size; ++meth_idx) {"
    },
    {
        "line": 95,
        "fullcodeline": "for (uint32_t sidx = 0; sidx < dh->string_ids_size; ++sidx) {"
    },
    {
        "line": 101,
        "fullcodeline": "reinterpret_cast<const dex_map_list*>(m_file->const_data() + dh->map_off);"
    },
    {
        "line": 104,
        "fullcodeline": "for (uint32_t i = 0; i < map_list->size; i++) {"
    },
    {
        "line": 22,
        "fullcodeline": "auto* clz = m_classes->at(cidx);"
    },
    {
        "line": 28,
        "fullcodeline": "auto anno_off = class_def->annotations_off;"
    },
    {
        "line": 62,
        "fullcodeline": "auto* interfaces_type_list = clz->get_interfaces();"
    },
    {
        "line": 63,
        "fullcodeline": "type_lists.insert(interfaces_type_list);"
    },
    {
        "line": 64,
        "fullcodeline": "auto deva = clz->get_static_values();"
    },
    {
        "line": 71,
        "fullcodeline": "stats->num_fields += clz->get_ifields().size() + clz->get_sfields().size();"
    },
    {
        "line": 72,
        "fullcodeline": "stats->num_methods +="
    },
    {
        "line": 88,
        "fullcodeline": "auto* meth = m_idx->get_methodidx(meth_idx);"
    },
    {
        "line": 89,
        "fullcodeline": "DexProto* proto = meth->get_proto();"
    },
    {
        "line": 90,
        "fullcodeline": "type_lists.insert(proto->get_args());"
    },
    {
        "line": 96,
        "fullcodeline": "auto str = m_idx->get_stringidx(sidx);"
    },
    {
        "line": 97,
        "fullcodeline": "stats->strings_total_size += str->get_entry_size();"
    },
    {
        "line": 107,
        "fullcodeline": "const uint8_t* encdata = m_idx->get_uleb_data(item.offset);"
    },
    {
        "line": 108,
        "fullcodeline": "const uint8_t* initial_encdata = encdata;"
    },
    {
        "line": 23,
        "fullcodeline": "if (clz == nullptr) {"
    },
    {
        "line": 73,
        "fullcodeline": "clz->get_vmethods().size() + clz->get_dmethods().size();"
    },
    {
        "line": 30,
        "fullcodeline": "const dex_annotations_directory_item* anno_dir ="
    },
    {
        "line": 32,
        "fullcodeline": "auto class_anno_off = anno_dir->class_annotations_off;"
    },
    {
        "line": 40,
        "fullcodeline": "const uint32_t* anno_data = (uint32_t*)(anno_dir + 1);"
    },
    {
        "line": 75,
        "fullcodeline": "DexCode* code = meth->get_dex_code();"
    },
    {
        "line": 81,
        "fullcodeline": "DexCode* code = meth->get_dex_code();"
    },
    {
        "line": 112,
        "fullcodeline": "always_assert_log("
    },
    {
        "line": 118,
        "fullcodeline": "header_seen = true;"
    },
    {
        "line": 119,
        "fullcodeline": "header_index = i;"
    },
    {
        "line": 120,
        "fullcodeline": "always_assert_log(1 == item.size,"
    },
    {
        "line": 124,
        "fullcodeline": "stats->header_item_count += item.size;"
    },
    {
        "line": 125,
        "fullcodeline": "stats->header_item_bytes += item.size * sizeof(dex_header);"
    },
    {
        "line": 128,
        "fullcodeline": "stats->string_id_count += item.size;"
    },
    {
        "line": 129,
        "fullcodeline": "stats->string_id_bytes += item.size * sizeof(dex_string_id);"
    },
    {
        "line": 132,
        "fullcodeline": "stats->type_id_count += item.size;"
    },
    {
        "line": 133,
        "fullcodeline": "stats->type_id_bytes += item.size * sizeof(dex_type_id);"
    },
    {
        "line": 136,
        "fullcodeline": "stats->proto_id_count += item.size;"
    },
    {
        "line": 137,
        "fullcodeline": "stats->proto_id_bytes += item.size * sizeof(dex_proto_id);"
    },
    {
        "line": 140,
        "fullcodeline": "stats->field_id_count += item.size;"
    },
    {
        "line": 141,
        "fullcodeline": "stats->field_id_bytes += item.size * sizeof(dex_field_id);"
    },
    {
        "line": 144,
        "fullcodeline": "stats->method_id_count += item.size;"
    },
    {
        "line": 145,
        "fullcodeline": "stats->method_id_bytes += item.size * sizeof(dex_method_id);"
    },
    {
        "line": 148,
        "fullcodeline": "stats->class_def_count += item.size;"
    },
    {
        "line": 149,
        "fullcodeline": "stats->class_def_bytes += item.size * sizeof(dex_class_def);"
    },
    {
        "line": 152,
        "fullcodeline": "stats->call_site_id_count += item.size;"
    },
    {
        "line": 153,
        "fullcodeline": "stats->call_site_id_bytes += item.size * sizeof(dex_callsite_id);"
    },
    {
        "line": 156,
        "fullcodeline": "stats->method_handle_count += item.size;"
    },
    {
        "line": 157,
        "fullcodeline": "stats->method_handle_bytes += item.size * sizeof(dex_methodhandle_id);"
    },
    {
        "line": 160,
        "fullcodeline": "stats->map_list_count += item.size;"
    },
    {
        "line": 170,
        "fullcodeline": "stats->type_list_count += item.size;"
    },
    {
        "line": 180,
        "fullcodeline": "stats->annotation_set_ref_list_count += item.size;"
    },
    {
        "line": 191,
        "fullcodeline": "stats->annotation_set_count += item.size;"
    },
    {
        "line": 202,
        "fullcodeline": "stats->class_data_count += item.size;"
    },
    {
        "line": 227,
        "fullcodeline": "stats->class_data_bytes += encdata - initial_encdata;"
    },
    {
        "line": 230,
        "fullcodeline": "stats->code_count += item.size;"
    },
    {
        "line": 263,
        "fullcodeline": "stats->code_bytes += encdata - initial_encdata;"
    },
    {
        "line": 266,
        "fullcodeline": "stats->string_data_count += item.size;"
    },
    {
        "line": 280,
        "fullcodeline": "stats->string_data_bytes += encdata - initial_encdata;"
    },
    {
        "line": 283,
        "fullcodeline": "stats->num_dbg_items += item.size;"
    },
    {
        "line": 346,
        "fullcodeline": "stats->dbg_total_size += encdata - initial_encdata;"
    },
    {
        "line": 355,
        "fullcodeline": "stats->annotations_directory_count += item.size;"
    },
    {
        "line": 371,
        "fullcodeline": "stats->annotations_directory_bytes += encdata - initial_encdata;"
    },
    {
        "line": 377,
        "fullcodeline": "fprintf("
    },
    {
        "line": 31,
        "fullcodeline": "(const dex_annotations_directory_item*)m_idx->get_uint_data(anno_off);"
    },
    {
        "line": 41,
        "fullcodeline": "for (uint32_t fidx = 0; fidx < anno_dir->fields_size; ++fidx) {"
    },
    {
        "line": 45,
        "fullcodeline": "for (uint32_t midx = 0; midx < anno_dir->methods_size; ++midx) {"
    },
    {
        "line": 49,
        "fullcodeline": "for (uint32_t pidx = 0; pidx < anno_dir->parameters_size; ++pidx) {"
    },
    {
        "line": 66,
        "fullcodeline": "if (!enc_arrays.count(*deva)) {"
    },
    {
        "line": 113,
        "fullcodeline": "!header_seen,"
    },
    {
        "line": 161,
        "fullcodeline": "for (uint32_t j = 0; j < item.size; j++) {"
    },
    {
        "line": 171,
        "fullcodeline": "for (uint32_t j = 0; j < item.size; j++) {"
    },
    {
        "line": 181,
        "fullcodeline": "for (uint32_t j = 0; j < item.size; j++) {"
    },
    {
        "line": 192,
        "fullcodeline": "for (uint32_t j = 0; j < item.size; j++) {"
    },
    {
        "line": 204,
        "fullcodeline": "for (uint32_t j = 0; j < item.size; j++) {"
    },
    {
        "line": 232,
        "fullcodeline": "for (uint32_t j = 0; j < item.size; j++) {"
    },
    {
        "line": 268,
        "fullcodeline": "for (uint32_t j = 0; j < item.size; j++) {"
    },
    {
        "line": 284,
        "fullcodeline": "for (uint32_t j = 0; j < item.size; j++) {"
    },
    {
        "line": 357,
        "fullcodeline": "for (uint32_t j = 0; j < item.size; ++j) {"
    },
    {
        "line": 34,
        "fullcodeline": "const uint32_t* anno_data = m_idx->get_uint_data(class_anno_off);"
    },
    {
        "line": 42,
        "fullcodeline": "anno_data++;"
    },
    {
        "line": 43,
        "fullcodeline": "anno_offsets.insert(*anno_data++);"
    },
    {
        "line": 46,
        "fullcodeline": "anno_data++;"
    },
    {
        "line": 47,
        "fullcodeline": "anno_offsets.insert(*anno_data++);"
    },
    {
        "line": 50,
        "fullcodeline": "anno_data++;"
    },
    {
        "line": 67,
        "fullcodeline": "enc_arrays.emplace(std::move(*deva));"
    },
    {
        "line": 68,
        "fullcodeline": "stats->num_static_values++;"
    },
    {
        "line": 77,
        "fullcodeline": "stats->num_instructions += code->get_instructions().size();"
    },
    {
        "line": 83,
        "fullcodeline": "stats->num_instructions += code->get_instructions().size();"
    },
    {
        "line": 162,
        "fullcodeline": "encdata = align_ptr(encdata, 4);"
    },
    {
        "line": 165,
        "fullcodeline": "stats->map_list_bytes +="
    },
    {
        "line": 172,
        "fullcodeline": "encdata = align_ptr(encdata, 4);"
    },
    {
        "line": 175,
        "fullcodeline": "stats->type_list_bytes +="
    },
    {
        "line": 182,
        "fullcodeline": "encdata = align_ptr(encdata, 4);"
    },
    {
        "line": 185,
        "fullcodeline": "stats->annotation_set_ref_list_bytes +="
    },
    {
        "line": 193,
        "fullcodeline": "encdata = align_ptr(encdata, 4);"
    },
    {
        "line": 196,
        "fullcodeline": "stats->annotation_set_bytes +="
    },
    {
        "line": 206,
        "fullcodeline": "uint32_t static_fields_size = read_uleb128(&encdata);"
    },
    {
        "line": 207,
        "fullcodeline": "uint32_t instance_fields_size = read_uleb128(&encdata);"
    },
    {
        "line": 208,
        "fullcodeline": "uint32_t direct_methods_size = read_uleb128(&encdata);"
    },
    {
        "line": 209,
        "fullcodeline": "uint32_t virtual_methods_size = read_uleb128(&encdata);"
    },
    {
        "line": 233,
        "fullcodeline": "encdata = align_ptr(encdata, 4);"
    },
    {
        "line": 235,
        "fullcodeline": "dex_code_item* code_item = (dex_code_item*)encdata;"
    },
    {
        "line": 237,
        "fullcodeline": "encdata += sizeof(dex_code_item);"
    },
    {
        "line": 238,
        "fullcodeline": "encdata += code_item->insns_size * sizeof(uint16_t);"
    },
    {
        "line": 244,
        "fullcodeline": "encdata += code_item->tries_size * sizeof(dex_tries_item);"
    },
    {
        "line": 270,
        "fullcodeline": "read_uleb128(&encdata);"
    },
    {
        "line": 286,
        "fullcodeline": "read_uleb128(&encdata);"
    },
    {
        "line": 288,
        "fullcodeline": "uint32_t param_count = read_uleb128(&encdata);"
    },
    {
        "line": 293,
        "fullcodeline": "bool running = true;"
    },
    {
        "line": 358,
        "fullcodeline": "encdata = align_ptr(encdata, 4);"
    },
    {
        "line": 359,
        "fullcodeline": "dex_annotations_directory_item* annotations_directory_item ="
    },
    {
        "line": 362,
        "fullcodeline": "encdata += sizeof(dex_annotations_directory_item);"
    },
    {
        "line": 363,
        "fullcodeline": "encdata += sizeof(dex_field_annotation) *"
    },
    {
        "line": 365,
        "fullcodeline": "encdata += sizeof(dex_method_annotation) *"
    },
    {
        "line": 367,
        "fullcodeline": "encdata += sizeof(dex_parameter_annotation) *"
    },
    {
        "line": 36,
        "fullcodeline": "for (uint32_t aidx = 0; aidx < count; ++aidx) {"
    },
    {
        "line": 52,
        "fullcodeline": "if (xrefoff != 0) {"
    },
    {
        "line": 166,
        "fullcodeline": "sizeof(uint32_t) + map_list_entries * sizeof(dex_map_item);"
    },
    {
        "line": 176,
        "fullcodeline": "sizeof(uint32_t) + type_list_entries * sizeof(dex_type_item);"
    },
    {
        "line": 186,
        "fullcodeline": "sizeof(uint32_t) + annotation_set_ref_list_entries *"
    },
    {
        "line": 197,
        "fullcodeline": "sizeof(uint32_t) +"
    },
    {
        "line": 211,
        "fullcodeline": "for (uint32_t k = 0; k < static_fields_size + instance_fields_size;"
    },
    {
        "line": 212,
        "fullcodeline": "++k) {"
    },
    {
        "line": 218,
        "fullcodeline": "for (uint32_t k = 0; k < direct_methods_size + virtual_methods_size;"
    },
    {
        "line": 219,
        "fullcodeline": "++k) {"
    },
    {
        "line": 240,
        "fullcodeline": "if (code_item->tries_size != 0 && code_item->insns_size % 2 == 1) {"
    },
    {
        "line": 246,
        "fullcodeline": "if (code_item->tries_size != 0) {"
    },
    {
        "line": 289,
        "fullcodeline": "while (param_count--) {"
    },
    {
        "line": 360,
        "fullcodeline": "(dex_annotations_directory_item*)encdata;"
    },
    {
        "line": 35,
        "fullcodeline": "uint32_t count = *anno_data++;"
    },
    {
        "line": 37,
        "fullcodeline": "anno_offsets.insert(anno_data[aidx]);"
    },
    {
        "line": 51,
        "fullcodeline": "uint32_t xrefoff = *anno_data++;"
    },
    {
        "line": 53,
        "fullcodeline": "const uint32_t* annoxref = m_idx->get_uint_data(xrefoff);"
    },
    {
        "line": 164,
        "fullcodeline": "uint32_t map_list_entries = *(uint32_t*)(encdata);"
    },
    {
        "line": 174,
        "fullcodeline": "uint32_t type_list_entries = *(uint32_t*)(encdata);"
    },
    {
        "line": 184,
        "fullcodeline": "uint32_t annotation_set_ref_list_entries = *(uint32_t*)(encdata);"
    },
    {
        "line": 195,
        "fullcodeline": "uint32_t annotation_set_entries = *(uint32_t*)(encdata);"
    },
    {
        "line": 198,
        "fullcodeline": "annotation_set_entries * sizeof(dex_annotation_off_item);"
    },
    {
        "line": 214,
        "fullcodeline": "read_uleb128(&encdata);"
    },
    {
        "line": 215,
        "fullcodeline": "read_uleb128(&encdata);"
    },
    {
        "line": 221,
        "fullcodeline": "read_uleb128(&encdata);"
    },
    {
        "line": 222,
        "fullcodeline": "read_uleb128(&encdata);"
    },
    {
        "line": 223,
        "fullcodeline": "read_uleb128(&encdata);"
    },
    {
        "line": 241,
        "fullcodeline": "encdata += sizeof(uint16_t);"
    },
    {
        "line": 247,
        "fullcodeline": "uint32_t catch_handler_list_size = read_uleb128(&encdata);"
    },
    {
        "line": 275,
        "fullcodeline": "encdata++;"
    },
    {
        "line": 291,
        "fullcodeline": "read_uleb128p1(&encdata);"
    },
    {
        "line": 55,
        "fullcodeline": "for (uint32_t j = 0; j < count; j++) {"
    },
    {
        "line": 248,
        "fullcodeline": "for (uint32_t k = 0; k < catch_handler_list_size; ++k) {"
    },
    {
        "line": 276,
        "fullcodeline": "if (byte == 0) break;"
    },
    {
        "line": 54,
        "fullcodeline": "uint32_t count = *annoxref++;"
    },
    {
        "line": 56,
        "fullcodeline": "uint32_t off = annoxref[j];"
    },
    {
        "line": 57,
        "fullcodeline": "anno_offsets.insert(off);"
    },
    {
        "line": 249,
        "fullcodeline": "int32_t catch_handler_size = read_sleb128(&encdata);"
    },
    {
        "line": 250,
        "fullcodeline": "uint32_t abs_size = (uint32_t)std::abs(catch_handler_size);"
    },
    {
        "line": 295,
        "fullcodeline": "uint8_t opcode = *encdata++;"
    },
    {
        "line": 298,
        "fullcodeline": "running = false;"
    },
    {
        "line": 307,
        "fullcodeline": "read_uleb128(&encdata);"
    },
    {
        "line": 311,
        "fullcodeline": "read_sleb128(&encdata);"
    },
    {
        "line": 315,
        "fullcodeline": "read_uleb128(&encdata);"
    },
    {
        "line": 317,
        "fullcodeline": "read_uleb128p1(&encdata);"
    },
    {
        "line": 319,
        "fullcodeline": "read_uleb128p1(&encdata);"
    },
    {
        "line": 323,
        "fullcodeline": "read_uleb128(&encdata);"
    },
    {
        "line": 325,
        "fullcodeline": "read_uleb128p1(&encdata);"
    },
    {
        "line": 327,
        "fullcodeline": "read_uleb128p1(&encdata);"
    },
    {
        "line": 329,
        "fullcodeline": "read_uleb128p1(&encdata);"
    },
    {
        "line": 333,
        "fullcodeline": "read_uleb128p1(&encdata);"
    },
    {
        "line": 251,
        "fullcodeline": "for (uint32_t l = 0; l < abs_size; ++l) {"
    },
    {
        "line": 257,
        "fullcodeline": "if (catch_handler_size <= 0) {"
    },
    {
        "line": 253,
        "fullcodeline": "read_uleb128(&encdata);"
    },
    {
        "line": 254,
        "fullcodeline": "read_uleb128(&encdata);"
    },
    {
        "line": 258,
        "fullcodeline": "read_uleb128(&encdata);"
    }
]