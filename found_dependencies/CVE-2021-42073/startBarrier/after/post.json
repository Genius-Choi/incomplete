[
    {
        "line": 3,
        "fullcodeline": "bool desktopMode = appConfig().processMode() == Desktop;"
    },
    {
        "line": 4,
        "fullcodeline": "bool serviceMode = appConfig().processMode() == Service;"
    },
    {
        "line": 6,
        "fullcodeline": "appendLogDebug(\"starting process\");"
    },
    {
        "line": 7,
        "fullcodeline": "m_ExpectedRunningState = kStarted;"
    },
    {
        "line": 13,
        "fullcodeline": "args << \"-f\" << \"--no-tray\" << \"--debug\" << appConfig().logLevelText();"
    },
    {
        "line": 16,
        "fullcodeline": "args << \"--name\" << getScreenName();"
    },
    {
        "line": 77,
        "fullcodeline": "m_pLogWindow->startNewInstance();"
    },
    {
        "line": 79,
        "fullcodeline": "appendLogInfo(\"starting \" + QString(barrier_type() == BarrierType::Server ? \"server\" : \"client\"));"
    },
    {
        "line": 81,
        "fullcodeline": "qDebug() << args;"
    },
    {
        "line": 83,
        "fullcodeline": "appendLogDebug(QString(\"command: %1 %2\").arg(app, args.join(\" \")));"
    },
    {
        "line": 85,
        "fullcodeline": "appendLogInfo(\"config file: \" + configFilename());"
    },
    {
        "line": 86,
        "fullcodeline": "appendLogInfo(\"log level: \" + appConfig().logLevelText());"
    },
    {
        "line": 45,
        "fullcodeline": "if (m_ServerConfig.enableDragAndDrop()) {"
    },
    {
        "line": 51,
        "fullcodeline": "if (!m_AppConfig->getCryptoEnabled()) {"
    },
    {
        "line": 63,
        "fullcodeline": "if ((barrier_type() == BarrierType::Client && !clientArgs(args, app))"
    },
    {
        "line": 88,
        "fullcodeline": "if (appConfig().logToFile())"
    },
    {
        "line": 20,
        "fullcodeline": "setBarrierProcess(new QProcess(this));"
    },
    {
        "line": 46,
        "fullcodeline": "args << \"--enable-drag-drop\";"
    },
    {
        "line": 52,
        "fullcodeline": "args << \"--disable-crypto\";"
    },
    {
        "line": 64,
        "fullcodeline": "|| (barrier_type() == BarrierType::Server && !serverArgs(args, app)))"
    },
    {
        "line": 66,
        "fullcodeline": "stopBarrier();"
    },
    {
        "line": 73,
        "fullcodeline": "connect(barrierProcess(), SIGNAL(readyReadStandardOutput()), this, SLOT(logOutput()));"
    },
    {
        "line": 74,
        "fullcodeline": "connect(barrierProcess(), SIGNAL(readyReadStandardError()), this, SLOT(logError()));"
    },
    {
        "line": 89,
        "fullcodeline": "appendLogInfo(\"log file: \" + appConfig().logFilename());"
    },
    {
        "line": 93,
        "fullcodeline": "barrierProcess()->start(app, args);"
    },
    {
        "line": 104,
        "fullcodeline": "QString command(app + \" \" + args.join(\" \"));"
    },
    {
        "line": 105,
        "fullcodeline": "m_IpcClient.sendCommand(command, appConfig().elevateMode());"
    },
    {
        "line": 25,
        "fullcodeline": "args << \"--ipc\";"
    },
    {
        "line": 94,
        "fullcodeline": "if (!barrierProcess()->waitForStarted())"
    },
    {
        "line": 96,
        "fullcodeline": "show();"
    },
    {
        "line": 97,
        "fullcodeline": "QMessageBox::warning(this, tr(\"Program can not be started\"), QString(tr(\"The executable<br><br>%1<br><br>could not be successfully started, although it does exist. Please check if you have sufficient permissions to run this program.\").arg(app)));"
    }
]