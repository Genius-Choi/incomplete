[
    {
        "line": 41,
        "fullcodeline": "assert(image_info != (const ImageInfo *) NULL);"
    },
    {
        "line": 42,
        "fullcodeline": "assert(image_info->signature == MagickSignature);"
    },
    {
        "line": 43,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),\"%s\",image_info->filename);"
    },
    {
        "line": 44,
        "fullcodeline": "assert(exception != (ExceptionInfo *) NULL);"
    },
    {
        "line": 45,
        "fullcodeline": "assert(exception->signature == MagickSignature);"
    },
    {
        "line": 46,
        "fullcodeline": "image=AcquireImage(image_info,exception);"
    },
    {
        "line": 47,
        "fullcodeline": "status=OpenBlob(image_info,image,ReadBinaryBlobMode,exception);"
    },
    {
        "line": 53,
        "fullcodeline": "icon_file.reserved=(short) ReadBlobLSBShort(image);"
    },
    {
        "line": 54,
        "fullcodeline": "icon_file.resource_type=(short) ReadBlobLSBShort(image);"
    },
    {
        "line": 55,
        "fullcodeline": "icon_file.count=(short) ReadBlobLSBShort(image);"
    },
    {
        "line": 78,
        "fullcodeline": "one=1;"
    },
    {
        "line": 499,
        "fullcodeline": "(void) CloseBlob(image);"
    },
    {
        "line": 48,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 56,
        "fullcodeline": "if ((icon_file.reserved != 0) ||"
    },
    {
        "line": 60,
        "fullcodeline": "for (i=0; i < icon_file.count; i++)"
    },
    {
        "line": 79,
        "fullcodeline": "for (i=0; i < icon_file.count; i++)"
    },
    {
        "line": 500,
        "fullcodeline": "return(GetFirstImageInList(image));"
    },
    {
        "line": 50,
        "fullcodeline": "image=DestroyImageList(image);"
    },
    {
        "line": 58,
        "fullcodeline": "(icon_file.count > MaxIcons))"
    },
    {
        "line": 59,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 62,
        "fullcodeline": "icon_file.directory[i].width=(unsigned char) ReadBlobByte(image);"
    },
    {
        "line": 63,
        "fullcodeline": "icon_file.directory[i].height=(unsigned char) ReadBlobByte(image);"
    },
    {
        "line": 64,
        "fullcodeline": "icon_file.directory[i].colors=(unsigned char) ReadBlobByte(image);"
    },
    {
        "line": 65,
        "fullcodeline": "icon_file.directory[i].reserved=(unsigned char) ReadBlobByte(image);"
    },
    {
        "line": 66,
        "fullcodeline": "icon_file.directory[i].planes=(unsigned short) ReadBlobLSBShort(image);"
    },
    {
        "line": 67,
        "fullcodeline": "icon_file.directory[i].bits_per_pixel=(unsigned short)"
    },
    {
        "line": 69,
        "fullcodeline": "icon_file.directory[i].size=ReadBlobLSBLong(image);"
    },
    {
        "line": 70,
        "fullcodeline": "icon_file.directory[i].offset=ReadBlobLSBLong(image);"
    },
    {
        "line": 84,
        "fullcodeline": "offset=(ssize_t) SeekBlob(image,(MagickOffsetType)"
    },
    {
        "line": 88,
        "fullcodeline": "icon_info.size=ReadBlobLSBLong(image);"
    },
    {
        "line": 89,
        "fullcodeline": "icon_info.width=(unsigned char) ((int) ReadBlobLSBLong(image));"
    },
    {
        "line": 90,
        "fullcodeline": "icon_info.height=(unsigned char) ((int) ReadBlobLSBLong(image)/2);"
    },
    {
        "line": 91,
        "fullcodeline": "icon_info.planes=ReadBlobLSBShort(image);"
    },
    {
        "line": 92,
        "fullcodeline": "icon_info.bits_per_pixel=ReadBlobLSBShort(image);"
    },
    {
        "line": 51,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 57,
        "fullcodeline": "((icon_file.resource_type != 1) && (icon_file.resource_type != 2)) ||"
    },
    {
        "line": 71,
        "fullcodeline": "if (EOFBlob(image) != MagickFalse)"
    },
    {
        "line": 86,
        "fullcodeline": "if (offset < 0)"
    },
    {
        "line": 93,
        "fullcodeline": "if (EOFBlob(image) != MagickFalse)"
    },
    {
        "line": 99,
        "fullcodeline": "if (((icon_info.planes == 18505) && (icon_info.bits_per_pixel == 21060)) ||"
    },
    {
        "line": 478,
        "fullcodeline": "if (image_info->number_scenes != 0)"
    },
    {
        "line": 481,
        "fullcodeline": "if (i < (ssize_t) (icon_file.count-1))"
    },
    {
        "line": 68,
        "fullcodeline": "ReadBlobLSBShort(image);"
    },
    {
        "line": 73,
        "fullcodeline": "ThrowFileException(exception,CorruptImageError,\"UnexpectedEndOfFile\","
    },
    {
        "line": 87,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 95,
        "fullcodeline": "ThrowFileException(exception,CorruptImageError,\"UnexpectedEndOfFile\","
    },
    {
        "line": 100,
        "fullcodeline": "(icon_info.size == 0x474e5089))"
    },
    {
        "line": 118,
        "fullcodeline": "png=(unsigned char *) AcquireQuantumMemory(length+16,sizeof(*png));"
    },
    {
        "line": 121,
        "fullcodeline": "(void) CopyMagickMemory(png,\"\\211PNG\\r\\n\\032\\n\\000\\000\\000\\015\",12);"
    },
    {
        "line": 122,
        "fullcodeline": "png[12]=(unsigned char) icon_info.planes;"
    },
    {
        "line": 123,
        "fullcodeline": "png[13]=(unsigned char) (icon_info.planes >> 8);"
    },
    {
        "line": 124,
        "fullcodeline": "png[14]=(unsigned char) icon_info.bits_per_pixel;"
    },
    {
        "line": 125,
        "fullcodeline": "png[15]=(unsigned char) (icon_info.bits_per_pixel >> 8);"
    },
    {
        "line": 126,
        "fullcodeline": "count=ReadBlob(image,length-16,png+16);"
    },
    {
        "line": 127,
        "fullcodeline": "icon_image=(Image *) NULL;"
    },
    {
        "line": 135,
        "fullcodeline": "png=(unsigned char *) RelinquishMagickMemory(png);"
    },
    {
        "line": 144,
        "fullcodeline": "DestroyBlob(icon_image);"
    },
    {
        "line": 145,
        "fullcodeline": "icon_image->blob=ReferenceBlob(image->blob);"
    },
    {
        "line": 146,
        "fullcodeline": "ReplaceImageInList(&image,icon_image);"
    },
    {
        "line": 486,
        "fullcodeline": "AcquireNextImage(image_info,image,exception);"
    },
    {
        "line": 492,
        "fullcodeline": "image=SyncNextImageInList(image);"
    },
    {
        "line": 493,
        "fullcodeline": "status=SetImageProgress(image,LoadImagesTag,TellBlob(image),"
    },
    {
        "line": 119,
        "fullcodeline": "if (png == (unsigned char *) NULL)"
    },
    {
        "line": 128,
        "fullcodeline": "if (count > 0)"
    },
    {
        "line": 136,
        "fullcodeline": "if (icon_image == (Image *) NULL)"
    },
    {
        "line": 152,
        "fullcodeline": "icon_info.compression=ReadBlobLSBLong(image);"
    },
    {
        "line": 153,
        "fullcodeline": "icon_info.image_size=ReadBlobLSBLong(image);"
    },
    {
        "line": 154,
        "fullcodeline": "icon_info.x_pixels=ReadBlobLSBLong(image);"
    },
    {
        "line": 155,
        "fullcodeline": "icon_info.y_pixels=ReadBlobLSBLong(image);"
    },
    {
        "line": 156,
        "fullcodeline": "icon_info.number_colors=ReadBlobLSBLong(image);"
    },
    {
        "line": 157,
        "fullcodeline": "icon_info.colors_important=ReadBlobLSBLong(image);"
    },
    {
        "line": 158,
        "fullcodeline": "image->alpha_trait=BlendPixelTrait;"
    },
    {
        "line": 169,
        "fullcodeline": "image->depth=icon_info.bits_per_pixel;"
    },
    {
        "line": 233,
        "fullcodeline": "status=SetImageExtent(image,image->columns,image->rows,exception);"
    },
    {
        "line": 236,
        "fullcodeline": "bytes_per_line=(((image->columns*icon_info.bits_per_pixel)+31) &"
    },
    {
        "line": 238,
        "fullcodeline": "(void) bytes_per_line;"
    },
    {
        "line": 239,
        "fullcodeline": "scanline_pad=((((image->columns*icon_info.bits_per_pixel)+31) & ~31)-"
    },
    {
        "line": 479,
        "fullcodeline": "if (image->scene >= (image_info->scene+image_info->number_scenes-1))"
    },
    {
        "line": 487,
        "fullcodeline": "if (GetNextImageInList(image) == (Image *) NULL)"
    },
    {
        "line": 495,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 120,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 130,
        "fullcodeline": "read_info=CloneImageInfo(image_info);"
    },
    {
        "line": 131,
        "fullcodeline": "(void) CopyMagickString(read_info->magick,\"PNG\",MagickPathExtent);"
    },
    {
        "line": 132,
        "fullcodeline": "icon_image=BlobToImage(read_info,png,length+16,exception);"
    },
    {
        "line": 133,
        "fullcodeline": "read_info=DestroyImageInfo(read_info);"
    },
    {
        "line": 141,
        "fullcodeline": "image=DestroyImageList(image);"
    },
    {
        "line": 150,
        "fullcodeline": "if (icon_info.bits_per_pixel > 32)"
    },
    {
        "line": 160,
        "fullcodeline": "if ((ssize_t) image->columns > icon_info.width)"
    },
    {
        "line": 162,
        "fullcodeline": "if (image->columns == 0)"
    },
    {
        "line": 165,
        "fullcodeline": "if ((ssize_t) image->rows > icon_info.height)"
    },
    {
        "line": 167,
        "fullcodeline": "if (image->rows == 0)"
    },
    {
        "line": 170,
        "fullcodeline": "if (image->debug != MagickFalse)"
    },
    {
        "line": 187,
        "fullcodeline": "if ((icon_info.number_colors != 0) || (icon_info.bits_per_pixel <= 16U))"
    },
    {
        "line": 194,
        "fullcodeline": "if (image->storage_class == PseudoClass)"
    },
    {
        "line": 229,
        "fullcodeline": "if ((image_info->ping != MagickFalse) &&"
    },
    {
        "line": 234,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 428,
        "fullcodeline": "if (image_info->ping == MagickFalse)"
    },
    {
        "line": 430,
        "fullcodeline": "if (icon_info.bits_per_pixel != 32)"
    },
    {
        "line": 468,
        "fullcodeline": "if (EOFBlob(image) != MagickFalse)"
    },
    {
        "line": 489,
        "fullcodeline": "image=DestroyImageList(image);"
    },
    {
        "line": 494,
        "fullcodeline": "GetBlobSize(image));"
    },
    {
        "line": 138,
        "fullcodeline": "if (count != (ssize_t) (length-16))"
    },
    {
        "line": 142,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 151,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 161,
        "fullcodeline": "image->columns=(size_t) icon_info.width;"
    },
    {
        "line": 163,
        "fullcodeline": "image->columns=256;"
    },
    {
        "line": 166,
        "fullcodeline": "image->rows=(size_t) icon_info.height;"
    },
    {
        "line": 168,
        "fullcodeline": "image->rows=256;"
    },
    {
        "line": 172,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 174,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 176,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 178,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 180,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 182,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 184,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 189,
        "fullcodeline": "image->storage_class=PseudoClass;"
    },
    {
        "line": 190,
        "fullcodeline": "image->colors=icon_info.number_colors;"
    },
    {
        "line": 208,
        "fullcodeline": "icon_colormap=(unsigned char *) AcquireQuantumMemory((size_t)"
    },
    {
        "line": 212,
        "fullcodeline": "count=ReadBlob(image,(size_t) (4*image->colors),icon_colormap);"
    },
    {
        "line": 216,
        "fullcodeline": "p=icon_colormap;"
    },
    {
        "line": 224,
        "fullcodeline": "icon_colormap=(unsigned char *) RelinquishMagickMemory(icon_colormap);"
    },
    {
        "line": 230,
        "fullcodeline": "(image_info->number_scenes != 0))"
    },
    {
        "line": 426,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 429,
        "fullcodeline": "(void) SyncImage(image,exception);"
    },
    {
        "line": 435,
        "fullcodeline": "image->storage_class=DirectClass;"
    },
    {
        "line": 470,
        "fullcodeline": "ThrowFileException(exception,CorruptImageError,"
    },
    {
        "line": 490,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 139,
        "fullcodeline": "ThrowReaderException(CorruptImageError,"
    },
    {
        "line": 191,
        "fullcodeline": "if (image->colors == 0)"
    },
    {
        "line": 205,
        "fullcodeline": "if (AcquireImageColormap(image,image->colors,exception) =="
    },
    {
        "line": 210,
        "fullcodeline": "if (icon_colormap == (unsigned char *) NULL)"
    },
    {
        "line": 213,
        "fullcodeline": "if (count != (ssize_t) (4*image->colors))"
    },
    {
        "line": 217,
        "fullcodeline": "for (i=0; i < (ssize_t) image->colors; i++)"
    },
    {
        "line": 231,
        "fullcodeline": "if (image->scene >= (image_info->scene+image_info->number_scenes-1))"
    },
    {
        "line": 235,
        "fullcodeline": "return(DestroyImageList(image));"
    },
    {
        "line": 237,
        "fullcodeline": "~31) >> 3;"
    },
    {
        "line": 240,
        "fullcodeline": "(image->columns*icon_info.bits_per_pixel)) >> 3;"
    },
    {
        "line": 436,
        "fullcodeline": "for (y=(ssize_t) image->rows-1; y >= 0; y--)"
    },
    {
        "line": 173,
        "fullcodeline": "\" scene    = %.20g\",(double) i);"
    },
    {
        "line": 175,
        "fullcodeline": "\"   size   = %.20g\",(double) icon_info.size);"
    },
    {
        "line": 181,
        "fullcodeline": "\"   colors = %.20g\",(double ) icon_info.number_colors);"
    },
    {
        "line": 183,
        "fullcodeline": "\"   planes = %.20g\",(double) icon_info.planes);"
    },
    {
        "line": 185,
        "fullcodeline": "\"   bpp    = %.20g\",(double) icon_info.bits_per_pixel);"
    },
    {
        "line": 192,
        "fullcodeline": "image->colors=one << icon_info.bits_per_pixel;"
    },
    {
        "line": 207,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 211,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 214,
        "fullcodeline": "ThrowReaderException(CorruptImageError,"
    },
    {
        "line": 219,
        "fullcodeline": "image->colormap[i].blue=(Quantum) ScaleCharToQuantum(*p++);"
    },
    {
        "line": 220,
        "fullcodeline": "image->colormap[i].green=(Quantum) ScaleCharToQuantum(*p++);"
    },
    {
        "line": 221,
        "fullcodeline": "image->colormap[i].red=(Quantum) ScaleCharToQuantum(*p++);"
    },
    {
        "line": 222,
        "fullcodeline": "p++;"
    },
    {
        "line": 248,
        "fullcodeline": "for (y=(ssize_t) image->rows-1; y >= 0; y--)"
    },
    {
        "line": 292,
        "fullcodeline": "for (y=(ssize_t) image->rows-1; y >= 0; y--)"
    },
    {
        "line": 330,
        "fullcodeline": "for (y=(ssize_t) image->rows-1; y >= 0; y--)"
    },
    {
        "line": 360,
        "fullcodeline": "for (y=(ssize_t) image->rows-1; y >= 0; y--)"
    },
    {
        "line": 392,
        "fullcodeline": "for (y=(ssize_t) image->rows-1; y >= 0; y--)"
    },
    {
        "line": 438,
        "fullcodeline": "q=GetAuthenticPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 209,
        "fullcodeline": "image->colors,4UL*sizeof(*icon_colormap));"
    },
    {
        "line": 250,
        "fullcodeline": "q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 294,
        "fullcodeline": "q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 332,
        "fullcodeline": "q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 362,
        "fullcodeline": "q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 394,
        "fullcodeline": "q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 439,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 441,
        "fullcodeline": "for (x=0; x < ((ssize_t) image->columns-7); x+=8)"
    },
    {
        "line": 451,
        "fullcodeline": "if ((image->columns % 8) != 0)"
    },
    {
        "line": 461,
        "fullcodeline": "if ((image->columns % 32) != 0)"
    },
    {
        "line": 464,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 251,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 253,
        "fullcodeline": "for (x=0; x < (ssize_t) (image->columns-7); x+=8)"
    },
    {
        "line": 263,
        "fullcodeline": "if ((image->columns % 8) != 0)"
    },
    {
        "line": 273,
        "fullcodeline": "for (x=0; x < (ssize_t) scanline_pad; x++)"
    },
    {
        "line": 274,
        "fullcodeline": "(void) ReadBlobByte(image);"
    },
    {
        "line": 275,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 277,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 295,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 297,
        "fullcodeline": "for (x=0; x < ((ssize_t) image->columns-1); x+=2)"
    },
    {
        "line": 305,
        "fullcodeline": "if ((image->columns % 2) != 0)"
    },
    {
        "line": 311,
        "fullcodeline": "for (x=0; x < (ssize_t) scanline_pad; x++)"
    },
    {
        "line": 312,
        "fullcodeline": "(void) ReadBlobByte(image);"
    },
    {
        "line": 313,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 315,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 333,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 335,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 341,
        "fullcodeline": "for (x=0; x < (ssize_t) scanline_pad; x++)"
    },
    {
        "line": 342,
        "fullcodeline": "(void) ReadBlobByte(image);"
    },
    {
        "line": 343,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 345,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 363,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 365,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 372,
        "fullcodeline": "for (x=0; x < (ssize_t) scanline_pad; x++)"
    },
    {
        "line": 373,
        "fullcodeline": "(void) ReadBlobByte(image);"
    },
    {
        "line": 374,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 376,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 395,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 397,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 410,
        "fullcodeline": "if (icon_info.bits_per_pixel == 24)"
    },
    {
        "line": 413,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 415,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 443,
        "fullcodeline": "byte=(size_t) ReadBlobByte(image);"
    },
    {
        "line": 453,
        "fullcodeline": "byte=(size_t) ReadBlobByte(image);"
    },
    {
        "line": 255,
        "fullcodeline": "byte=(size_t) ReadBlobByte(image);"
    },
    {
        "line": 265,
        "fullcodeline": "byte=(size_t) ReadBlobByte(image);"
    },
    {
        "line": 279,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,image->rows-y-1,"
    },
    {
        "line": 299,
        "fullcodeline": "byte=(size_t) ReadBlobByte(image);"
    },
    {
        "line": 300,
        "fullcodeline": "SetPixelIndex(image,((byte >> 4) & 0xf),q);"
    },
    {
        "line": 301,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 302,
        "fullcodeline": "SetPixelIndex(image,((byte) & 0xf),q);"
    },
    {
        "line": 303,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 307,
        "fullcodeline": "byte=(size_t) ReadBlobByte(image);"
    },
    {
        "line": 308,
        "fullcodeline": "SetPixelIndex(image,((byte >> 4) & 0xf),q);"
    },
    {
        "line": 309,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 317,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,image->rows-y-1,"
    },
    {
        "line": 337,
        "fullcodeline": "byte=(size_t) ReadBlobByte(image);"
    },
    {
        "line": 338,
        "fullcodeline": "SetPixelIndex(image,byte,q);"
    },
    {
        "line": 339,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 347,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,image->rows-y-1,"
    },
    {
        "line": 367,
        "fullcodeline": "byte=(size_t) ReadBlobByte(image);"
    },
    {
        "line": 368,
        "fullcodeline": "byte|=(size_t) (ReadBlobByte(image) << 8);"
    },
    {
        "line": 369,
        "fullcodeline": "SetPixelIndex(image,byte,q);"
    },
    {
        "line": 370,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 378,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,image->rows-y-1,"
    },
    {
        "line": 399,
        "fullcodeline": "SetPixelBlue(image,ScaleCharToQuantum((unsigned char)"
    },
    {
        "line": 401,
        "fullcodeline": "SetPixelGreen(image,ScaleCharToQuantum((unsigned char)"
    },
    {
        "line": 403,
        "fullcodeline": "SetPixelRed(image,ScaleCharToQuantum((unsigned char)"
    },
    {
        "line": 408,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 417,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,image->rows-y-1,"
    },
    {
        "line": 444,
        "fullcodeline": "for (bit=0; bit < 8; bit++)"
    },
    {
        "line": 454,
        "fullcodeline": "for (bit=0; bit < (image->columns % 8); bit++)"
    },
    {
        "line": 462,
        "fullcodeline": "for (x=0; x < (ssize_t) ((32-(image->columns % 32))/8); x++)"
    },
    {
        "line": 463,
        "fullcodeline": "(void) ReadBlobByte(image);"
    },
    {
        "line": 256,
        "fullcodeline": "for (bit=0; bit < 8; bit++)"
    },
    {
        "line": 266,
        "fullcodeline": "for (bit=0; bit < (image->columns % 8); bit++)"
    },
    {
        "line": 281,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 319,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 349,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 380,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 405,
        "fullcodeline": "if (icon_info.bits_per_pixel == 32)"
    },
    {
        "line": 411,
        "fullcodeline": "for (x=0; x < (ssize_t) scanline_pad; x++)"
    },
    {
        "line": 412,
        "fullcodeline": "(void) ReadBlobByte(image);"
    },
    {
        "line": 419,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 446,
        "fullcodeline": "SetPixelAlpha(image,(((byte & (0x80 >> bit)) != 0) ?"
    },
    {
        "line": 448,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 456,
        "fullcodeline": "SetPixelAlpha(image,(((byte & (0x80 >> bit)) != 0) ?"
    },
    {
        "line": 458,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 258,
        "fullcodeline": "SetPixelIndex(image,((byte & (0x80 >> bit)) != 0 ? 0x01 :"
    },
    {
        "line": 260,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 268,
        "fullcodeline": "SetPixelIndex(image,((byte & (0x80 >> bit)) != 0 ? 0x01 :"
    },
    {
        "line": 270,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 406,
        "fullcodeline": "SetPixelAlpha(image,ScaleCharToQuantum((unsigned char)"
    },
    {
        "line": 400,
        "fullcodeline": "ReadBlobByte(image)),q);"
    },
    {
        "line": 402,
        "fullcodeline": "ReadBlobByte(image)),q);"
    },
    {
        "line": 404,
        "fullcodeline": "ReadBlobByte(image)),q);"
    },
    {
        "line": 407,
        "fullcodeline": "ReadBlobByte(image)),q);"
    }
]