[
    {
        "line": 2,
        "fullcodeline": "sentry_init(integrations=[StdlibIntegration()], traces_sample_rate=1.0)"
    },
    {
        "line": 3,
        "fullcodeline": "events = capture_events()"
    },
    {
        "line": 19,
        "fullcodeline": "assert event[\"contexts\"][\"trace\"][\"origin\"] == \"manual\""
    },
    {
        "line": 21,
        "fullcodeline": "assert event[\"spans\"][0][\"op\"] == \"subprocess\""
    },
    {
        "line": 22,
        "fullcodeline": "assert event[\"spans\"][0][\"origin\"] == \"auto.subprocess.stdlib.subprocess\""
    },
    {
        "line": 24,
        "fullcodeline": "assert event[\"spans\"][1][\"op\"] == \"subprocess.communicate\""
    },
    {
        "line": 25,
        "fullcodeline": "assert event[\"spans\"][1][\"origin\"] == \"auto.subprocess.stdlib.subprocess\""
    },
    {
        "line": 27,
        "fullcodeline": "assert event[\"spans\"][2][\"op\"] == \"subprocess.wait\""
    },
    {
        "line": 28,
        "fullcodeline": "assert event[\"spans\"][2][\"origin\"] == \"auto.subprocess.stdlib.subprocess\""
    },
    {
        "line": 5,
        "fullcodeline": "with start_transaction(name=\"foo\"):"
    },
    {
        "line": 17,
        "fullcodeline": "(event,) = events"
    },
    {
        "line": 6,
        "fullcodeline": "args = ["
    },
    {
        "line": 11,
        "fullcodeline": "kw = {\"args\": args, \"stdout\": subprocess.PIPE}"
    },
    {
        "line": 13,
        "fullcodeline": "popen = subprocess.Popen(**kw)"
    },
    {
        "line": 14,
        "fullcodeline": "popen.communicate()"
    },
    {
        "line": 15,
        "fullcodeline": "popen.poll()"
    }
]