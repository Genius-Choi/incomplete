[
    {
        "line": 4,
        "fullcodeline": "struct vbg_session *session = filp->private_data;"
    },
    {
        "line": 8,
        "fullcodeline": "int ret = 0;"
    },
    {
        "line": 21,
        "fullcodeline": "size = max(hdr.size_in, hdr.size_out);"
    },
    {
        "line": 50,
        "fullcodeline": "ret = vbg_core_ioctl(session, req, buf);"
    },
    {
        "line": 54,
        "fullcodeline": "returned_size = ((struct vbg_ioctl_hdr *)buf)->size_out;"
    },
    {
        "line": 11,
        "fullcodeline": "if (copy_from_user(&hdr, (void *)arg, sizeof(hdr)))"
    },
    {
        "line": 14,
        "fullcodeline": "if (hdr.version != VBG_IOCTL_HDR_VERSION)"
    },
    {
        "line": 24,
        "fullcodeline": "if (size > SZ_16M)"
    },
    {
        "line": 31,
        "fullcodeline": "is_vmmdev_req = (req & ~IOCSIZE_MASK) == VBG_IOCTL_VMMDEV_REQUEST(0) ||"
    },
    {
        "line": 38,
        "fullcodeline": "if (!buf)"
    },
    {
        "line": 47,
        "fullcodeline": "if (hdr.size_in < size)"
    },
    {
        "line": 55,
        "fullcodeline": "if (returned_size > size) {"
    },
    {
        "line": 17,
        "fullcodeline": "if (hdr.size_in < sizeof(hdr) ||"
    },
    {
        "line": 18,
        "fullcodeline": "(hdr.size_out && hdr.size_out < sizeof(hdr)))"
    },
    {
        "line": 22,
        "fullcodeline": "if (_IOC_SIZE(req) && _IOC_SIZE(req) != size)"
    },
    {
        "line": 32,
        "fullcodeline": "req == VBG_IOCTL_VMMDEV_REQUEST_BIG;"
    },
    {
        "line": 35,
        "fullcodeline": "buf = vbg_req_alloc(size, VBG_IOCTL_HDR_TYPE_DEFAULT);"
    },
    {
        "line": 43,
        "fullcodeline": "hdr.size_in - sizeof(hdr))) {"
    },
    {
        "line": 44,
        "fullcodeline": "ret = -EFAULT;"
    },
    {
        "line": 56,
        "fullcodeline": "vbg_debug(\"%s: too much output data %zu > %zu\\n\","
    },
    {
        "line": 58,
        "fullcodeline": "returned_size = size;"
    },
    {
        "line": 60,
        "fullcodeline": "if (copy_to_user((void *)arg, buf, returned_size) != 0)"
    },
    {
        "line": 61,
        "fullcodeline": "ret = -EFAULT;"
    },
    {
        "line": 12,
        "fullcodeline": "return -EFAULT;"
    },
    {
        "line": 15,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 19,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 23,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 25,
        "fullcodeline": "return -E2BIG;"
    },
    {
        "line": 37,
        "fullcodeline": "buf = kmalloc(size, GFP_KERNEL);"
    },
    {
        "line": 39,
        "fullcodeline": "return -ENOMEM;"
    },
    {
        "line": 48,
        "fullcodeline": "memset(buf + hdr.size_in, 0, size -  hdr.size_in);"
    }
]