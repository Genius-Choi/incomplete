[
    {
        "line": 4,
        "fullcodeline": "long\ti = 0;"
    },
    {
        "line": 6,
        "fullcodeline": "static subflags_T subflags = {FALSE, FALSE, FALSE, TRUE, FALSE,"
    },
    {
        "line": 13,
        "fullcodeline": "char_u\t*pat = NULL, *sub = NULL;\t// init for GCC"
    },
    {
        "line": 14,
        "fullcodeline": "char_u\t*sub_copy = NULL;"
    },
    {
        "line": 17,
        "fullcodeline": "int\t\tgot_quit = FALSE;"
    },
    {
        "line": 18,
        "fullcodeline": "int\t\tgot_match = FALSE;"
    },
    {
        "line": 23,
        "fullcodeline": "linenr_T\tfirst_line = 0;\t\t// first changed line"
    },
    {
        "line": 24,
        "fullcodeline": "linenr_T\tlast_line= 0;\t\t// below last changed line AFTER the"
    },
    {
        "line": 26,
        "fullcodeline": "linenr_T\told_line_count = curbuf->b_ml.ml_line_count;"
    },
    {
        "line": 30,
        "fullcodeline": "int\t\tendcolumn = FALSE;\t// cursor in last column when done"
    },
    {
        "line": 31,
        "fullcodeline": "pos_T\told_cursor = curwin->w_cursor;"
    },
    {
        "line": 38,
        "fullcodeline": "cmd = eap->arg;"
    },
    {
        "line": 44,
        "fullcodeline": "start_nsubs = sub_nsubs;"
    },
    {
        "line": 253,
        "fullcodeline": "save_do_all = subflags.do_all;"
    },
    {
        "line": 254,
        "fullcodeline": "save_do_ask = subflags.do_ask;"
    },
    {
        "line": 259,
        "fullcodeline": "cmd = skipwhite(cmd);"
    },
    {
        "line": 277,
        "fullcodeline": "cmd = skipwhite(cmd);"
    },
    {
        "line": 311,
        "fullcodeline": "sub_firstline = NULL;"
    },
    {
        "line": 342,
        "fullcodeline": "line2 = eap->line2;"
    },
    {
        "line": 39,
        "fullcodeline": "if (!global_busy)"
    },
    {
        "line": 46,
        "fullcodeline": "if (eap->cmdidx == CMD_tilde)"
    },
    {
        "line": 52,
        "fullcodeline": "if (eap->cmd[0] == 's' && *cmd != NUL && !VIM_ISWHITE(*cmd)"
    },
    {
        "line": 186,
        "fullcodeline": "if (*cmd == '&')"
    },
    {
        "line": 260,
        "fullcodeline": "if (VIM_ISDIGIT(*cmd))"
    },
    {
        "line": 278,
        "fullcodeline": "if (*cmd && *cmd != '\"')\t    // if not end-of-line or comment"
    },
    {
        "line": 306,
        "fullcodeline": "if (subflags.do_ic == 'i')"
    },
    {
        "line": 347,
        "fullcodeline": "); ++lnum)"
    },
    {
        "line": 1101,
        "fullcodeline": "if (first_line != 0)"
    },
    {
        "line": 41,
        "fullcodeline": "sub_nsubs = 0;"
    },
    {
        "line": 42,
        "fullcodeline": "sub_nlines = 0;"
    },
    {
        "line": 47,
        "fullcodeline": "which_pat = RE_LAST;\t// use last used regexp"
    },
    {
        "line": 53,
        "fullcodeline": "&& vim_strchr((char_u *)\"0123456789cegriIp|\\\"\", *cmd) == NULL)"
    },
    {
        "line": 102,
        "fullcodeline": "sub = cmd;\t    // remember the start of the substitution"
    },
    {
        "line": 103,
        "fullcodeline": "cmd = skip_substitute(cmd, delimiter);"
    },
    {
        "line": 144,
        "fullcodeline": "if (pat != NULL && STRCMP(pat, \"\\\\n\") == 0"
    },
    {
        "line": 146,
        "fullcodeline": "&& (*cmd == NUL || (cmd[1] == NUL && (*cmd == 'g' || *cmd == 'l'"
    },
    {
        "line": 163,
        "fullcodeline": "joined_lines_count = eap->line2 - eap->line1 + 1;"
    },
    {
        "line": 178,
        "fullcodeline": "add_to_history(HIST_SEARCH, pat, TRUE, NUL);"
    },
    {
        "line": 187,
        "fullcodeline": "++cmd;"
    },
    {
        "line": 248,
        "fullcodeline": "++cmd;"
    },
    {
        "line": 251,
        "fullcodeline": "subflags.do_ask = FALSE;"
    },
    {
        "line": 262,
        "fullcodeline": "i = getdigits(&cmd);"
    },
    {
        "line": 268,
        "fullcodeline": "eap->line1 = eap->line2;"
    },
    {
        "line": 269,
        "fullcodeline": "eap->line2 += i - 1;"
    },
    {
        "line": 280,
        "fullcodeline": "set_nextcmd(eap, cmd);"
    },
    {
        "line": 291,
        "fullcodeline": "if (!subflags.do_count && !curbuf->b_p_ma)"
    },
    {
        "line": 298,
        "fullcodeline": "if (search_regcomp(pat, RE_SUBST, which_pat, SEARCH_HIS, &regmatch) == FAIL)"
    },
    {
        "line": 307,
        "fullcodeline": "regmatch.rmm_ic = TRUE;"
    },
    {
        "line": 320,
        "fullcodeline": "if (sub[0] == '\\\\' && sub[1] == '=')"
    },
    {
        "line": 322,
        "fullcodeline": "sub = vim_strsave(sub);"
    },
    {
        "line": 325,
        "fullcodeline": "sub_copy = sub;"
    },
    {
        "line": 343,
        "fullcodeline": "for (lnum = eap->line1; lnum <= line2 && !(got_quit"
    },
    {
        "line": 349,
        "fullcodeline": "nmatch = vim_regexec_multi(&regmatch, curwin, curbuf, lnum,"
    },
    {
        "line": 1106,
        "fullcodeline": "i = curbuf->b_ml.ml_line_count - old_line_count;"
    },
    {
        "line": 49,
        "fullcodeline": "which_pat = RE_SUBST;\t// use last substitute regexp"
    },
    {
        "line": 56,
        "fullcodeline": "if (check_regexp_delim(*cmd) == FAIL)"
    },
    {
        "line": 69,
        "fullcodeline": "if (*cmd == '\\\\')"
    },
    {
        "line": 105,
        "fullcodeline": "if (!eap->skip)"
    },
    {
        "line": 145,
        "fullcodeline": "&& *sub == NUL"
    },
    {
        "line": 154,
        "fullcodeline": "if (*cmd == 'l')"
    },
    {
        "line": 164,
        "fullcodeline": "if (eap->line2 < curbuf->b_ml.ml_line_count)"
    },
    {
        "line": 166,
        "fullcodeline": "if (joined_lines_count > 1)"
    },
    {
        "line": 207,
        "fullcodeline": "subflags.do_error = TRUE;"
    },
    {
        "line": 209,
        "fullcodeline": "subflags.do_list = FALSE;"
    },
    {
        "line": 210,
        "fullcodeline": "subflags.do_count = FALSE;"
    },
    {
        "line": 211,
        "fullcodeline": "subflags.do_number = FALSE;"
    },
    {
        "line": 212,
        "fullcodeline": "subflags.do_ic = 0;"
    },
    {
        "line": 220,
        "fullcodeline": "if (*cmd == 'g')"
    },
    {
        "line": 270,
        "fullcodeline": "if (eap->line2 > curbuf->b_ml.ml_line_count)"
    },
    {
        "line": 281,
        "fullcodeline": "if (eap->nextcmd == NULL)"
    },
    {
        "line": 294,
        "fullcodeline": "emsg(_(e_cannot_make_changes_modifiable_is_off));"
    },
    {
        "line": 323,
        "fullcodeline": "if (sub == NULL)"
    },
    {
        "line": 329,
        "fullcodeline": "char_u *newsub = regtilde(sub, magic_isset());"
    },
    {
        "line": 1107,
        "fullcodeline": "changed_lines(first_line, 0, last_line - i, i);"
    },
    {
        "line": 76,
        "fullcodeline": "++cmd;"
    },
    {
        "line": 84,
        "fullcodeline": "pat = (char_u *)\"\";\t\t    // empty search pattern"
    },
    {
        "line": 85,
        "fullcodeline": "delimiter = *cmd++;\t\t    // remember delimiter character"
    },
    {
        "line": 125,
        "fullcodeline": "else if (!eap->skip)\t// use previous pattern and substitution"
    },
    {
        "line": 155,
        "fullcodeline": "eap->flags = EXFLAG_LIST;"
    },
    {
        "line": 165,
        "fullcodeline": "++joined_lines_count;"
    },
    {
        "line": 175,
        "fullcodeline": "if ((cmdmod.cmod_flags & CMOD_KEEPPATTERNS) == 0)"
    },
    {
        "line": 176,
        "fullcodeline": "save_re_pat(RE_SUBST, pat, magic_isset());"
    },
    {
        "line": 199,
        "fullcodeline": "if (!p_ed)"
    },
    {
        "line": 221,
        "fullcodeline": "subflags.do_all = !subflags.do_all;"
    },
    {
        "line": 263,
        "fullcodeline": "if (i <= 0 && !eap->skip && subflags.do_error)"
    },
    {
        "line": 271,
        "fullcodeline": "eap->line2 = curbuf->b_ml.ml_line_count;"
    },
    {
        "line": 331,
        "fullcodeline": "if (newsub != sub)"
    },
    {
        "line": 355,
        "fullcodeline": "colnr_T\tprev_matchcol = MAXCOL;"
    },
    {
        "line": 356,
        "fullcodeline": "char_u\t*new_end, *new_start = NULL;"
    },
    {
        "line": 357,
        "fullcodeline": "unsigned\tnew_start_len = 0;"
    },
    {
        "line": 362,
        "fullcodeline": "long\tnmatch_tl = 0;\t// nr of lines matched below lnum"
    },
    {
        "line": 364,
        "fullcodeline": "int\t\tskip_match = FALSE;"
    },
    {
        "line": 416,
        "fullcodeline": "sub_firstlnum = lnum;"
    },
    {
        "line": 417,
        "fullcodeline": "copycol = 0;"
    },
    {
        "line": 418,
        "fullcodeline": "matchcol = 0;"
    },
    {
        "line": 1095,
        "fullcodeline": "VIM_CLEAR(sub_firstline);\t// free the copy of the original line"
    },
    {
        "line": 1119,
        "fullcodeline": "if ((cmdmod.cmod_flags & CMOD_LOCKMARKS) == 0)"
    },
    {
        "line": 77,
        "fullcodeline": "if (vim_strchr((char_u *)\"/?&\", *cmd) == NULL)"
    },
    {
        "line": 82,
        "fullcodeline": "if (*cmd != '&')"
    },
    {
        "line": 89,
        "fullcodeline": "which_pat = RE_LAST;\t    // use last used regexp"
    },
    {
        "line": 90,
        "fullcodeline": "delimiter = *cmd++;\t\t    // remember delimiter character"
    },
    {
        "line": 91,
        "fullcodeline": "pat = cmd;\t\t\t    // remember start of search pat"
    },
    {
        "line": 92,
        "fullcodeline": "cmd = skip_regexp_ex(cmd, delimiter, magic_isset(),"
    },
    {
        "line": 132,
        "fullcodeline": "pat = NULL;\t\t// search_regcomp() will use previous pattern"
    },
    {
        "line": 133,
        "fullcodeline": "sub = old_sub;"
    },
    {
        "line": 147,
        "fullcodeline": "|| *cmd == 'p' || *cmd == '#'))))"
    },
    {
        "line": 168,
        "fullcodeline": "(void)do_join(joined_lines_count, FALSE, TRUE, FALSE, TRUE);"
    },
    {
        "line": 169,
        "fullcodeline": "sub_nsubs = joined_lines_count - 1;"
    },
    {
        "line": 171,
        "fullcodeline": "(void)do_sub_msg(FALSE);"
    },
    {
        "line": 205,
        "fullcodeline": "subflags.do_ask = FALSE;"
    },
    {
        "line": 265,
        "fullcodeline": "emsg(_(e_positive_count_required));"
    },
    {
        "line": 283,
        "fullcodeline": "semsg(_(e_trailing_characters_str), cmd);"
    },
    {
        "line": 301,
        "fullcodeline": "emsg(_(e_invalid_command));"
    },
    {
        "line": 309,
        "fullcodeline": "regmatch.rmm_ic = FALSE;"
    },
    {
        "line": 334,
        "fullcodeline": "sub_copy = newsub;"
    },
    {
        "line": 335,
        "fullcodeline": "sub = newsub;"
    },
    {
        "line": 1124,
        "fullcodeline": "curbuf->b_op_start.col = curbuf->b_op_end.col = 0;"
    },
    {
        "line": 1130,
        "fullcodeline": "if (!subflags.do_ask)"
    },
    {
        "line": 1141,
        "fullcodeline": "global_need_beginline = TRUE;"
    },
    {
        "line": 83,
        "fullcodeline": "which_pat = RE_SEARCH;\t    // use last '/' pattern"
    },
    {
        "line": 94,
        "fullcodeline": "if (cmd[0] == delimiter)\t    // end delimiter found"
    },
    {
        "line": 108,
        "fullcodeline": "if (STRCMP(sub, \"%\") == 0"
    },
    {
        "line": 109,
        "fullcodeline": "&& vim_strchr(p_cpo, CPO_SUBPERCENT) != NULL)"
    },
    {
        "line": 116,
        "fullcodeline": "sub = old_sub;"
    },
    {
        "line": 127,
        "fullcodeline": "if (old_sub == NULL)\t// there is no previous command"
    },
    {
        "line": 137,
        "fullcodeline": "endcolumn = (curwin->w_curswant == MAXCOL);"
    },
    {
        "line": 156,
        "fullcodeline": "else if (*cmd == '#')"
    },
    {
        "line": 222,
        "fullcodeline": "else if (*cmd == 'c')"
    },
    {
        "line": 424,
        "fullcodeline": "got_match = TRUE;"
    },
    {
        "line": 465,
        "fullcodeline": "curwin->w_cursor.lnum = lnum;"
    },
    {
        "line": 466,
        "fullcodeline": "do_again = FALSE;"
    },
    {
        "line": 494,
        "fullcodeline": "matchcol = regmatch.endpos[0].col;"
    },
    {
        "line": 495,
        "fullcodeline": "prev_matchcol = matchcol;"
    },
    {
        "line": 763,
        "fullcodeline": "sublen = vim_regsub_multi(&regmatch,"
    },
    {
        "line": 824,
        "fullcodeline": "copy_len = regmatch.startpos[0].col - copycol;"
    },
    {
        "line": 825,
        "fullcodeline": "needed_len = copy_len + ((unsigned)STRLEN(p1)"
    },
    {
        "line": 867,
        "fullcodeline": "mch_memmove(new_end, sub_firstline + copycol, (size_t)copy_len);"
    },
    {
        "line": 868,
        "fullcodeline": "new_end += copy_len;"
    },
    {
        "line": 881,
        "fullcodeline": "sub_nsubs++;"
    },
    {
        "line": 903,
        "fullcodeline": "copycol = regmatch.endpos[0].col;"
    },
    {
        "line": 986,
        "fullcodeline": "lastone = (skip_match"
    },
    {
        "line": 993,
        "fullcodeline": "nmatch = -1;"
    },
    {
        "line": 1137,
        "fullcodeline": "if (!do_sub_msg(subflags.do_count) && subflags.do_ask)"
    },
    {
        "line": 73,
        "fullcodeline": "emsg(_(e_cannot_use_s_backslash_in_vim9_script));"
    },
    {
        "line": 79,
        "fullcodeline": "emsg(_(e_backslash_should_be_followed_by));"
    },
    {
        "line": 111,
        "fullcodeline": "if (old_sub == NULL)\t// there is no previous command"
    },
    {
        "line": 157,
        "fullcodeline": "eap->flags = EXFLAG_NR;"
    },
    {
        "line": 202,
        "fullcodeline": "subflags.do_all = TRUE;"
    },
    {
        "line": 223,
        "fullcodeline": "subflags.do_ask = !subflags.do_ask;"
    },
    {
        "line": 440,
        "fullcodeline": "if (regmatch.startpos[0].lnum > 0)"
    },
    {
        "line": 450,
        "fullcodeline": "if (lnum > curbuf->b_ml.ml_line_count)"
    },
    {
        "line": 453,
        "fullcodeline": "if (sub_firstline == NULL)"
    },
    {
        "line": 785,
        "fullcodeline": "if (nmatch > curbuf->b_ml.ml_line_count - sub_firstlnum + 1)"
    },
    {
        "line": 798,
        "fullcodeline": "if (nmatch == 1)"
    },
    {
        "line": 827,
        "fullcodeline": "if (new_start == NULL)"
    },
    {
        "line": 873,
        "fullcodeline": "(void)vim_regsub_multi(&regmatch,"
    },
    {
        "line": 890,
        "fullcodeline": "if (nmatch > 1)"
    },
    {
        "line": 922,
        "fullcodeline": "for (p1 = new_end; *p1; ++p1)"
    },
    {
        "line": 121,
        "fullcodeline": "old_sub = vim_strsave(sub);"
    },
    {
        "line": 129,
        "fullcodeline": "emsg(_(e_no_previous_substitute_regular_expression));"
    },
    {
        "line": 204,
        "fullcodeline": "subflags.do_all = FALSE;"
    },
    {
        "line": 442,
        "fullcodeline": "lnum += regmatch.startpos[0].lnum;"
    },
    {
        "line": 443,
        "fullcodeline": "sub_firstlnum += regmatch.startpos[0].lnum;"
    },
    {
        "line": 444,
        "fullcodeline": "nmatch -= regmatch.startpos[0].lnum;"
    },
    {
        "line": 445,
        "fullcodeline": "VIM_CLEAR(sub_firstline);"
    },
    {
        "line": 455,
        "fullcodeline": "sub_firstline = vim_strsave(ml_get(sub_firstlnum));"
    },
    {
        "line": 473,
        "fullcodeline": "if (matchcol == prev_matchcol"
    },
    {
        "line": 475,
        "fullcodeline": "&& matchcol == regmatch.endpos[0].col)"
    },
    {
        "line": 513,
        "fullcodeline": "sub_nsubs++;"
    },
    {
        "line": 525,
        "fullcodeline": "int typed = 0;"
    },
    {
        "line": 529,
        "fullcodeline": "save_State = State;"
    },
    {
        "line": 530,
        "fullcodeline": "State = MODE_CONFIRM;"
    },
    {
        "line": 532,
        "fullcodeline": "curwin->w_cursor.col = regmatch.startpos[0].col;"
    },
    {
        "line": 715,
        "fullcodeline": "State = save_State;"
    },
    {
        "line": 764,
        "fullcodeline": "sub_firstlnum - regmatch.startpos[0].lnum,"
    },
    {
        "line": 766,
        "fullcodeline": "REGSUB_BACKSLASH"
    },
    {
        "line": 787,
        "fullcodeline": "nmatch = curbuf->b_ml.ml_line_count - sub_firstlnum + 1;"
    },
    {
        "line": 788,
        "fullcodeline": "skip_match = TRUE;"
    },
    {
        "line": 800,
        "fullcodeline": "p1 = sub_firstline;"
    },
    {
        "line": 834,
        "fullcodeline": "new_start_len = needed_len + 50;"
    },
    {
        "line": 837,
        "fullcodeline": "*new_start = NUL;"
    },
    {
        "line": 838,
        "fullcodeline": "new_end = new_start;"
    },
    {
        "line": 874,
        "fullcodeline": "sub_firstlnum - regmatch.startpos[0].lnum,"
    },
    {
        "line": 876,
        "fullcodeline": "REGSUB_COPY | REGSUB_BACKSLASH"
    },
    {
        "line": 892,
        "fullcodeline": "sub_firstlnum += nmatch - 1;"
    },
    {
        "line": 894,
        "fullcodeline": "sub_firstline = vim_strsave(ml_get(sub_firstlnum));"
    },
    {
        "line": 910,
        "fullcodeline": "sub_firstline = vim_strsave((char_u *)\"\");"
    },
    {
        "line": 911,
        "fullcodeline": "copycol = 0;"
    },
    {
        "line": 991,
        "fullcodeline": "|| (sub_firstline[matchcol] == NUL && nmatch <= 1"
    },
    {
        "line": 1004,
        "fullcodeline": "if (lastone"
    },
    {
        "line": 1009,
        "fullcodeline": "|| regmatch.startpos[0].lnum > 0)"
    },
    {
        "line": 1149,
        "fullcodeline": "emsg(_(e_interrupted));"
    },
    {
        "line": 95,
        "fullcodeline": "*cmd++ = NUL;\t\t    // replace it with a NUL"
    },
    {
        "line": 113,
        "fullcodeline": "emsg(_(e_no_previous_substitute_regular_expression));"
    },
    {
        "line": 224,
        "fullcodeline": "else if (*cmd == 'n')"
    },
    {
        "line": 456,
        "fullcodeline": "if (sub_firstline == NULL)"
    },
    {
        "line": 474,
        "fullcodeline": "&& regmatch.endpos[0].lnum == 0"
    },
    {
        "line": 477,
        "fullcodeline": "if (sub_firstline[matchcol] == NUL)"
    },
    {
        "line": 507,
        "fullcodeline": "if (nmatch > 1)"
    },
    {
        "line": 538,
        "fullcodeline": "if (vim_strchr(p_cpo, CPO_UNDO) != NULL)"
    },
    {
        "line": 717,
        "fullcodeline": "if (vim_strchr(p_cpo, CPO_UNDO) != NULL)"
    },
    {
        "line": 821,
        "fullcodeline": "p1 = ml_get(sub_firstlnum + nmatch - 1);"
    },
    {
        "line": 822,
        "fullcodeline": "nmatch_tl += nmatch - 1;"
    },
    {
        "line": 835,
        "fullcodeline": "if ((new_start = alloc(new_start_len)) == NULL)"
    },
    {
        "line": 847,
        "fullcodeline": "len = (unsigned)STRLEN(new_start);"
    },
    {
        "line": 848,
        "fullcodeline": "needed_len += len;"
    },
    {
        "line": 861,
        "fullcodeline": "new_end = new_start + len;"
    },
    {
        "line": 896,
        "fullcodeline": "if (sub_firstlnum <= line2)"
    },
    {
        "line": 990,
        "fullcodeline": "|| !(subflags.do_all || do_again)"
    },
    {
        "line": 992,
        "fullcodeline": "&& !re_multiline(regmatch.regprog)));"
    },
    {
        "line": 1006,
        "fullcodeline": "|| (nmatch = vim_regexec_multi(&regmatch, curwin,"
    },
    {
        "line": 1011,
        "fullcodeline": "if (new_start != NULL)"
    },
    {
        "line": 1078,
        "fullcodeline": "if (nmatch <= 0)"
    },
    {
        "line": 159,
        "fullcodeline": "eap->flags = EXFLAG_PRINT;"
    },
    {
        "line": 225,
        "fullcodeline": "subflags.do_count = TRUE;"
    },
    {
        "line": 480,
        "fullcodeline": "skip_match = TRUE;"
    },
    {
        "line": 509,
        "fullcodeline": "matchcol = (colnr_T)STRLEN(sub_firstline);"
    },
    {
        "line": 510,
        "fullcodeline": "nmatch = 1;"
    },
    {
        "line": 511,
        "fullcodeline": "skip_match = TRUE;"
    },
    {
        "line": 539,
        "fullcodeline": "++no_u_sync;"
    },
    {
        "line": 684,
        "fullcodeline": "need_wait_return = FALSE; // no hit-return prompt"
    },
    {
        "line": 718,
        "fullcodeline": "--no_u_sync;"
    },
    {
        "line": 849,
        "fullcodeline": "if (needed_len > (int)new_start_len)"
    },
    {
        "line": 897,
        "fullcodeline": "do_again = TRUE;"
    },
    {
        "line": 924,
        "fullcodeline": "if (p1[0] == '\\\\' && p1[1] != NUL)  // remove backslash"
    },
    {
        "line": 926,
        "fullcodeline": "STRMOVE(p1, p1 + 1);"
    },
    {
        "line": 989,
        "fullcodeline": "|| lnum > line2"
    },
    {
        "line": 1005,
        "fullcodeline": "|| nmatch_tl > 0"
    },
    {
        "line": 1020,
        "fullcodeline": "STRCAT(new_start, sub_firstline + copycol);"
    },
    {
        "line": 1021,
        "fullcodeline": "matchcol = (colnr_T)STRLEN(sub_firstline) - matchcol;"
    },
    {
        "line": 1022,
        "fullcodeline": "prev_matchcol = (colnr_T)STRLEN(sub_firstline)"
    },
    {
        "line": 1027,
        "fullcodeline": "ml_replace(lnum, new_start, TRUE);"
    },
    {
        "line": 1062,
        "fullcodeline": "sub_firstlnum = lnum;"
    },
    {
        "line": 1064,
        "fullcodeline": "sub_firstline = new_start;"
    },
    {
        "line": 1065,
        "fullcodeline": "new_start = NULL;"
    },
    {
        "line": 1066,
        "fullcodeline": "matchcol = (colnr_T)STRLEN(sub_firstline) - matchcol;"
    },
    {
        "line": 1067,
        "fullcodeline": "prev_matchcol = (colnr_T)STRLEN(sub_firstline)"
    },
    {
        "line": 1069,
        "fullcodeline": "copycol = 0;"
    },
    {
        "line": 1071,
        "fullcodeline": "if (nmatch == -1 && !lastone)"
    },
    {
        "line": 1072,
        "fullcodeline": "nmatch = vim_regexec_multi(&regmatch, curwin, curbuf,"
    },
    {
        "line": 1135,
        "fullcodeline": "beginline(BL_WHITE | BL_FIX);"
    },
    {
        "line": 694,
        "fullcodeline": "if (typed == 'n')"
    },
    {
        "line": 696,
        "fullcodeline": "if (typed == 'y')"
    },
    {
        "line": 698,
        "fullcodeline": "if (typed == 'l')"
    },
    {
        "line": 705,
        "fullcodeline": "if (typed == 'a')"
    },
    {
        "line": 710,
        "fullcodeline": "if (typed == Ctrl_E)"
    },
    {
        "line": 727,
        "fullcodeline": "if (nmatch > 1)"
    },
    {
        "line": 851,
        "fullcodeline": "new_start_len = needed_len + 50;"
    },
    {
        "line": 857,
        "fullcodeline": "mch_memmove(p1, new_start, (size_t)(len + 1));"
    },
    {
        "line": 859,
        "fullcodeline": "new_start = p1;"
    },
    {
        "line": 899,
        "fullcodeline": "subflags.do_all = FALSE;"
    },
    {
        "line": 1025,
        "fullcodeline": "if (u_savesub(lnum) != OK)"
    },
    {
        "line": 1029,
        "fullcodeline": "if (nmatch_tl > 0)"
    },
    {
        "line": 226,
        "fullcodeline": "else if (*cmd == 'e')"
    },
    {
        "line": 551,
        "fullcodeline": "print_line_no_prefix(lnum,"
    },
    {
        "line": 554,
        "fullcodeline": "getvcol(curwin, &curwin->w_cursor, &sc, NULL, NULL);"
    },
    {
        "line": 555,
        "fullcodeline": "curwin->w_cursor.col = regmatch.endpos[0].col - 1;"
    },
    {
        "line": 558,
        "fullcodeline": "getvcol(curwin, &curwin->w_cursor, NULL, NULL, &ec);"
    },
    {
        "line": 559,
        "fullcodeline": "curwin->w_cursor.col = regmatch.startpos[0].col;"
    },
    {
        "line": 572,
        "fullcodeline": "resp = getexmodeline('?', NULL, 0, TRUE);"
    },
    {
        "line": 685,
        "fullcodeline": "if (typed == 'q' || typed == ESC || typed == Ctrl_C"
    },
    {
        "line": 691,
        "fullcodeline": "got_quit = TRUE;"
    },
    {
        "line": 701,
        "fullcodeline": "subflags.do_all = FALSE;"
    },
    {
        "line": 702,
        "fullcodeline": "line2 = lnum;"
    },
    {
        "line": 707,
        "fullcodeline": "subflags.do_ask = FALSE;"
    },
    {
        "line": 729,
        "fullcodeline": "matchcol = (colnr_T)STRLEN(sub_firstline);"
    },
    {
        "line": 730,
        "fullcodeline": "skip_match = TRUE;"
    },
    {
        "line": 852,
        "fullcodeline": "if ((p1 = alloc(new_start_len)) == NULL)"
    },
    {
        "line": 939,
        "fullcodeline": "else if (*p1 == CAR)"
    },
    {
        "line": 1037,
        "fullcodeline": "++lnum;"
    },
    {
        "line": 1042,
        "fullcodeline": "mark_adjust(lnum, lnum + nmatch_tl - 1,"
    },
    {
        "line": 1046,
        "fullcodeline": "--lnum;"
    },
    {
        "line": 1047,
        "fullcodeline": "line2 -= nmatch_tl; // nr of lines decreases"
    },
    {
        "line": 1048,
        "fullcodeline": "nmatch_tl = 0;"
    },
    {
        "line": 1054,
        "fullcodeline": "changed_bytes(lnum, 0);"
    },
    {
        "line": 1083,
        "fullcodeline": "if (nmatch == -1)"
    },
    {
        "line": 1084,
        "fullcodeline": "lnum -= regmatch.startpos[0].lnum;"
    },
    {
        "line": 227,
        "fullcodeline": "subflags.do_error = !subflags.do_error;"
    },
    {
        "line": 485,
        "fullcodeline": "matchcol += mb_ptr2len(sub_firstline + matchcol);"
    },
    {
        "line": 556,
        "fullcodeline": "if (curwin->w_cursor.col < 0)"
    },
    {
        "line": 560,
        "fullcodeline": "if (subflags.do_number || curwin->w_p_nu)"
    },
    {
        "line": 567,
        "fullcodeline": "for (i = 0; i < (long)sc; ++i)"
    },
    {
        "line": 569,
        "fullcodeline": "for ( ; i <= (long)ec; ++i)"
    },
    {
        "line": 573,
        "fullcodeline": "if (resp != NULL)"
    },
    {
        "line": 586,
        "fullcodeline": "char_u *orig_line = NULL;"
    },
    {
        "line": 587,
        "fullcodeline": "int    len_change = 0;"
    },
    {
        "line": 588,
        "fullcodeline": "int\t   save_p_lz = p_lz;"
    },
    {
        "line": 596,
        "fullcodeline": "temp = RedrawingDisabled;"
    },
    {
        "line": 632,
        "fullcodeline": "search_match_lines = regmatch.endpos[0].lnum"
    },
    {
        "line": 634,
        "fullcodeline": "search_match_endcol = regmatch.endpos[0].col"
    },
    {
        "line": 640,
        "fullcodeline": "update_screen(SOME_VALID);"
    },
    {
        "line": 642,
        "fullcodeline": "redraw_later(SOME_VALID);"
    },
    {
        "line": 650,
        "fullcodeline": "i = msg_scroll;"
    },
    {
        "line": 656,
        "fullcodeline": "smsg_attr(HL_ATTR(HLF_R),"
    },
    {
        "line": 659,
        "fullcodeline": "msg_scroll = i;"
    },
    {
        "line": 660,
        "fullcodeline": "showruler(TRUE);"
    },
    {
        "line": 661,
        "fullcodeline": "windgoto(msg_row, msg_col);"
    },
    {
        "line": 662,
        "fullcodeline": "RedrawingDisabled = temp;"
    },
    {
        "line": 667,
        "fullcodeline": "++no_mapping;\t// don't map this key"
    },
    {
        "line": 668,
        "fullcodeline": "++allow_keys;\t// allow special keys"
    },
    {
        "line": 669,
        "fullcodeline": "typed = plain_vgetc();"
    },
    {
        "line": 670,
        "fullcodeline": "--allow_keys;"
    },
    {
        "line": 671,
        "fullcodeline": "--no_mapping;"
    },
    {
        "line": 675,
        "fullcodeline": "msg_col = 0;"
    },
    {
        "line": 676,
        "fullcodeline": "gotocmdline(TRUE);"
    },
    {
        "line": 677,
        "fullcodeline": "p_lz = save_p_lz;"
    },
    {
        "line": 1038,
        "fullcodeline": "if (u_savedel(lnum, nmatch_tl) != OK)"
    },
    {
        "line": 1040,
        "fullcodeline": "for (i = 0; i < nmatch_tl; ++i)"
    },
    {
        "line": 1041,
        "fullcodeline": "ml_delete(lnum);"
    },
    {
        "line": 1043,
        "fullcodeline": "(long)MAXLNUM, -nmatch_tl);"
    },
    {
        "line": 1059,
        "fullcodeline": "last_line = lnum + 1;"
    },
    {
        "line": 487,
        "fullcodeline": "++matchcol;"
    },
    {
        "line": 557,
        "fullcodeline": "curwin->w_cursor.col = 0;"
    },
    {
        "line": 562,
        "fullcodeline": "int numw = number_width(curwin) + 1;"
    },
    {
        "line": 563,
        "fullcodeline": "sc += numw;"
    },
    {
        "line": 564,
        "fullcodeline": "ec += numw;"
    },
    {
        "line": 575,
        "fullcodeline": "typed = *resp;"
    },
    {
        "line": 602,
        "fullcodeline": "if (new_start != NULL)"
    },
    {
        "line": 647,
        "fullcodeline": "if (msg_row == Rows - 1)"
    },
    {
        "line": 657,
        "fullcodeline": "_(\"replace with %s (y/n/a/q/l/^E/^Y)?\"), sub);"
    },
    {
        "line": 680,
        "fullcodeline": "if (orig_line != NULL)"
    },
    {
        "line": 712,
        "fullcodeline": "else if (typed == Ctrl_Y)"
    },
    {
        "line": 941,
        "fullcodeline": "if (u_inssub(lnum) == OK)   // prepare for undo"
    },
    {
        "line": 1045,
        "fullcodeline": "deleted_lines(lnum, nmatch_tl);"
    },
    {
        "line": 1057,
        "fullcodeline": "if (first_line == 0)"
    },
    {
        "line": 1153,
        "fullcodeline": "semsg(_(e_pattern_not_found_str), get_search_pat());"
    },
    {
        "line": 228,
        "fullcodeline": "else if (*cmd == 'r')\t    // use last used regexp"
    },
    {
        "line": 580,
        "fullcodeline": "if (ex_normal_busy && typed == NUL)"
    },
    {
        "line": 609,
        "fullcodeline": "orig_line = vim_strsave(ml_get(lnum));"
    },
    {
        "line": 681,
        "fullcodeline": "ml_replace(lnum, orig_line, FALSE);"
    },
    {
        "line": 943,
        "fullcodeline": "colnr_T\tplen = (colnr_T)(p1 - new_start + 1);"
    },
    {
        "line": 945,
        "fullcodeline": "*p1 = NUL;\t\t    // truncate up to the CR"
    },
    {
        "line": 946,
        "fullcodeline": "ml_append(lnum - 1, new_start, plen, FALSE);"
    },
    {
        "line": 960,
        "fullcodeline": "++sub_firstlnum;"
    },
    {
        "line": 961,
        "fullcodeline": "++lnum;"
    },
    {
        "line": 962,
        "fullcodeline": "++line2;"
    },
    {
        "line": 964,
        "fullcodeline": "++curwin->w_cursor.lnum;"
    },
    {
        "line": 966,
        "fullcodeline": "STRMOVE(new_start, p1 + 1);"
    },
    {
        "line": 967,
        "fullcodeline": "p1 = new_start - 1;"
    },
    {
        "line": 1058,
        "fullcodeline": "first_line = lnum;"
    },
    {
        "line": 229,
        "fullcodeline": "which_pat = RE_LAST;"
    },
    {
        "line": 581,
        "fullcodeline": "typed = 'q';"
    },
    {
        "line": 610,
        "fullcodeline": "if (orig_line != NULL)"
    },
    {
        "line": 971,
        "fullcodeline": "p1 += (*mb_ptr2len)(p1) - 1;"
    },
    {
        "line": 612,
        "fullcodeline": "char_u *new_line = concat_str(new_start,"
    },
    {
        "line": 230,
        "fullcodeline": "else if (*cmd == 'p')"
    },
    {
        "line": 615,
        "fullcodeline": "if (new_line == NULL)"
    },
    {
        "line": 949,
        "fullcodeline": "appended_lines(lnum - 1, 1L);"
    },
    {
        "line": 954,
        "fullcodeline": "last_line = lnum + 1;"
    },
    {
        "line": 616,
        "fullcodeline": "VIM_CLEAR(orig_line);"
    },
    {
        "line": 952,
        "fullcodeline": "if (first_line == 0)"
    },
    {
        "line": 624,
        "fullcodeline": "len_change = (int)STRLEN(new_line)"
    },
    {
        "line": 626,
        "fullcodeline": "curwin->w_cursor.col += len_change;"
    },
    {
        "line": 627,
        "fullcodeline": "ml_replace(lnum, new_line, FALSE);"
    },
    {
        "line": 953,
        "fullcodeline": "first_line = lnum;"
    },
    {
        "line": 232,
        "fullcodeline": "else if (*cmd == '#')"
    },
    {
        "line": 235,
        "fullcodeline": "subflags.do_number = TRUE;"
    },
    {
        "line": 625,
        "fullcodeline": "- (int)STRLEN(orig_line);"
    },
    {
        "line": 237,
        "fullcodeline": "else if (*cmd == 'l')"
    },
    {
        "line": 240,
        "fullcodeline": "subflags.do_list = TRUE;"
    },
    {
        "line": 242,
        "fullcodeline": "else if (*cmd == 'i')\t    // ignore case"
    },
    {
        "line": 243,
        "fullcodeline": "subflags.do_ic = 'i';"
    },
    {
        "line": 244,
        "fullcodeline": "else if (*cmd == 'I')\t    // don't ignore case"
    },
    {
        "line": 245,
        "fullcodeline": "subflags.do_ic = 'I';"
    }
]