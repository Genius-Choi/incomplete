[
    {
        "line": 3,
        "fullcodeline": "struct rose_sock *rose = rose_sk(sk);"
    },
    {
        "line": 7,
        "fullcodeline": "char buffer[100];"
    },
    {
        "line": 8,
        "fullcodeline": "int len, faclen = 0;"
    },
    {
        "line": 10,
        "fullcodeline": "len = AX25_BPQ_HEADER_LEN + AX25_MAX_HEADER_LEN + ROSE_MIN_LEN + 1;"
    },
    {
        "line": 31,
        "fullcodeline": "skb_reserve(skb, AX25_BPQ_HEADER_LEN + AX25_MAX_HEADER_LEN + 1);"
    },
    {
        "line": 33,
        "fullcodeline": "dptr = skb_put(skb, skb_tailroom(skb));"
    },
    {
        "line": 35,
        "fullcodeline": "lci1 = (rose->lci >> 8) & 0x0F;"
    },
    {
        "line": 36,
        "fullcodeline": "lci2 = (rose->lci >> 0) & 0xFF;"
    },
    {
        "line": 25,
        "fullcodeline": "if ((skb = alloc_skb(len, GFP_ATOMIC)) == NULL)"
    },
    {
        "line": 14,
        "fullcodeline": "len   += 1 + ROSE_ADDR_LEN + ROSE_ADDR_LEN;"
    },
    {
        "line": 15,
        "fullcodeline": "faclen = rose_create_facilities(buffer, rose);"
    },
    {
        "line": 16,
        "fullcodeline": "len   += faclen;"
    },
    {
        "line": 21,
        "fullcodeline": "len   += 2;"
    },
    {
        "line": 44,
        "fullcodeline": "memcpy(dptr, &rose->dest_addr,  ROSE_ADDR_LEN);"
    },
    {
        "line": 45,
        "fullcodeline": "dptr   += ROSE_ADDR_LEN;"
    },
    {
        "line": 46,
        "fullcodeline": "memcpy(dptr, &rose->source_addr, ROSE_ADDR_LEN);"
    },
    {
        "line": 47,
        "fullcodeline": "dptr   += ROSE_ADDR_LEN;"
    },
    {
        "line": 48,
        "fullcodeline": "memcpy(dptr, buffer, faclen);"
    },
    {
        "line": 72,
        "fullcodeline": "*dptr++ = ROSE_DTE_ORIGINATED;"
    },
    {
        "line": 80,
        "fullcodeline": "*dptr   = frametype;"
    },
    {
        "line": 40,
        "fullcodeline": "*dptr++ = ROSE_GFI | lci1;"
    },
    {
        "line": 53,
        "fullcodeline": "*dptr++ = ROSE_GFI | lci1;"
    },
    {
        "line": 61,
        "fullcodeline": "*dptr++ = ROSE_GFI | lci1;"
    },
    {
        "line": 69,
        "fullcodeline": "*dptr++ = ROSE_GFI | lci1;"
    },
    {
        "line": 78,
        "fullcodeline": "*dptr++ = ROSE_GFI | lci1;"
    },
    {
        "line": 81,
        "fullcodeline": "*dptr++ |= (rose->vr << 5) & 0xE0;"
    },
    {
        "line": 86,
        "fullcodeline": "*dptr++ = ROSE_GFI | lci1;"
    },
    {
        "line": 41,
        "fullcodeline": "*dptr++ = lci2;"
    },
    {
        "line": 42,
        "fullcodeline": "*dptr++ = frametype;"
    },
    {
        "line": 43,
        "fullcodeline": "*dptr++ = 0xAA;"
    },
    {
        "line": 54,
        "fullcodeline": "*dptr++ = lci2;"
    },
    {
        "line": 55,
        "fullcodeline": "*dptr++ = frametype;"
    },
    {
        "line": 56,
        "fullcodeline": "*dptr++ = 0x00;\t\t/* Address length */"
    },
    {
        "line": 62,
        "fullcodeline": "*dptr++ = lci2;"
    },
    {
        "line": 63,
        "fullcodeline": "*dptr++ = frametype;"
    },
    {
        "line": 64,
        "fullcodeline": "*dptr++ = rose->cause;"
    },
    {
        "line": 70,
        "fullcodeline": "*dptr++ = lci2;"
    },
    {
        "line": 71,
        "fullcodeline": "*dptr++ = frametype;"
    },
    {
        "line": 79,
        "fullcodeline": "*dptr++ = lci2;"
    },
    {
        "line": 87,
        "fullcodeline": "*dptr++ = lci2;"
    }
]