[
    {
        "line": 17,
        "fullcodeline": "colnr_T\torig_col = 0;\t\t// init for GCC"
    },
    {
        "line": 18,
        "fullcodeline": "char_u\t*new_line, *orig_line = NULL;\t// init for GCC"
    },
    {
        "line": 28,
        "fullcodeline": "save_p_list = curwin->w_p_list;"
    },
    {
        "line": 29,
        "fullcodeline": "curwin->w_p_list = FALSE;"
    },
    {
        "line": 30,
        "fullcodeline": "vc = getvcol_nolist(&curwin->w_cursor);"
    },
    {
        "line": 31,
        "fullcodeline": "vcol = vc;"
    },
    {
        "line": 36,
        "fullcodeline": "start_col = curwin->w_cursor.col;"
    },
    {
        "line": 39,
        "fullcodeline": "new_cursor_col = curwin->w_cursor.col;"
    },
    {
        "line": 40,
        "fullcodeline": "beginline(BL_WHITE);"
    },
    {
        "line": 41,
        "fullcodeline": "new_cursor_col -= curwin->w_cursor.col;"
    },
    {
        "line": 43,
        "fullcodeline": "insstart_less = curwin->w_cursor.col;"
    },
    {
        "line": 66,
        "fullcodeline": "insstart_less -= curwin->w_cursor.col;"
    },
    {
        "line": 131,
        "fullcodeline": "curwin->w_p_list = save_p_list;"
    },
    {
        "line": 137,
        "fullcodeline": "curwin->w_set_curswant = TRUE;"
    },
    {
        "line": 138,
        "fullcodeline": "changed_cline_bef_curs();"
    },
    {
        "line": 21,
        "fullcodeline": "if (State & VREPLACE_FLAG)"
    },
    {
        "line": 47,
        "fullcodeline": "if (new_cursor_col < 0)"
    },
    {
        "line": 50,
        "fullcodeline": "if (new_cursor_col > 0)\t    // can't fix replace stack"
    },
    {
        "line": 54,
        "fullcodeline": "if (type == INDENT_SET)"
    },
    {
        "line": 75,
        "fullcodeline": "if (new_cursor_col >= 0)"
    },
    {
        "line": 133,
        "fullcodeline": "if (new_cursor_col <= 0)"
    },
    {
        "line": 141,
        "fullcodeline": "if (State & INSERT)"
    },
    {
        "line": 161,
        "fullcodeline": "if (REPLACE_NORMAL(State) && start_col >= 0)"
    },
    {
        "line": 183,
        "fullcodeline": "if (State & VREPLACE_FLAG)"
    },
    {
        "line": 23,
        "fullcodeline": "orig_line = vim_strsave(ml_get_curline());  // Deal with NULL below"
    },
    {
        "line": 24,
        "fullcodeline": "orig_col = curwin->w_cursor.col;"
    },
    {
        "line": 48,
        "fullcodeline": "vcol = get_indent() - vcol;"
    },
    {
        "line": 51,
        "fullcodeline": "start_col = -1;"
    },
    {
        "line": 55,
        "fullcodeline": "(void)set_indent(amount, call_changed_bytes ? SIN_CHANGED : 0);"
    },
    {
        "line": 81,
        "fullcodeline": "new_cursor_col += curwin->w_cursor.col;"
    },
    {
        "line": 134,
        "fullcodeline": "curwin->w_cursor.col = 0;"
    },
    {
        "line": 191,
        "fullcodeline": "new_line = vim_strsave(ml_get_curline());"
    },
    {
        "line": 196,
        "fullcodeline": "new_line[curwin->w_cursor.col] = NUL;"
    },
    {
        "line": 206,
        "fullcodeline": "ins_bytes(new_line);"
    },
    {
        "line": 58,
        "fullcodeline": "int\tsave_State = State;"
    },
    {
        "line": 63,
        "fullcodeline": "shift_line(type == INDENT_DEC, round, 1, call_changed_bytes);"
    },
    {
        "line": 64,
        "fullcodeline": "State = save_State;"
    },
    {
        "line": 79,
        "fullcodeline": "if (new_cursor_col == 0)"
    },
    {
        "line": 136,
        "fullcodeline": "curwin->w_cursor.col = (colnr_T)new_cursor_col;"
    },
    {
        "line": 143,
        "fullcodeline": "if (curwin->w_cursor.lnum == Insstart.lnum && Insstart.col != 0)"
    },
    {
        "line": 150,
        "fullcodeline": "if ((int)ai_col <= insstart_less)"
    },
    {
        "line": 163,
        "fullcodeline": "while (start_col > (int)curwin->w_cursor.col)"
    },
    {
        "line": 168,
        "fullcodeline": "while (start_col < (int)curwin->w_cursor.col || replaced)"
    },
    {
        "line": 187,
        "fullcodeline": "if (orig_line == NULL)"
    },
    {
        "line": 192,
        "fullcodeline": "if (new_line == NULL)"
    },
    {
        "line": 61,
        "fullcodeline": "if (State & VREPLACE_FLAG)"
    },
    {
        "line": 80,
        "fullcodeline": "insstart_less = MAXCOL;"
    },
    {
        "line": 83,
        "fullcodeline": "else if (!(State & INSERT))"
    },
    {
        "line": 151,
        "fullcodeline": "ai_col = 0;"
    },
    {
        "line": 165,
        "fullcodeline": "replace_join(0);\t    // remove a NUL from the replace stack"
    },
    {
        "line": 166,
        "fullcodeline": "--start_col;"
    },
    {
        "line": 170,
        "fullcodeline": "replace_push(NUL);"
    },
    {
        "line": 176,
        "fullcodeline": "++start_col;"
    },
    {
        "line": 62,
        "fullcodeline": "State = INSERT;"
    },
    {
        "line": 84,
        "fullcodeline": "new_cursor_col = curwin->w_cursor.col;"
    },
    {
        "line": 145,
        "fullcodeline": "if ((int)Insstart.col <= insstart_less)"
    },
    {
        "line": 153,
        "fullcodeline": "ai_col -= insstart_less;"
    },
    {
        "line": 88,
        "fullcodeline": "vcol = get_indent() - vcol;"
    },
    {
        "line": 89,
        "fullcodeline": "curwin->w_virtcol = (colnr_T)((vcol < 0) ? 0 : vcol);"
    },
    {
        "line": 92,
        "fullcodeline": "vcol = last_vcol = 0;"
    },
    {
        "line": 93,
        "fullcodeline": "new_cursor_col = -1;"
    },
    {
        "line": 94,
        "fullcodeline": "ptr = ml_get_curline();"
    },
    {
        "line": 106,
        "fullcodeline": "vcol = last_vcol;"
    },
    {
        "line": 128,
        "fullcodeline": "insstart_less = MAXCOL;"
    },
    {
        "line": 146,
        "fullcodeline": "Insstart.col = 0;"
    },
    {
        "line": 173,
        "fullcodeline": "replace_push(replaced);"
    },
    {
        "line": 174,
        "fullcodeline": "replaced = NUL;"
    },
    {
        "line": 95,
        "fullcodeline": "while (vcol <= (int)curwin->w_virtcol)"
    },
    {
        "line": 110,
        "fullcodeline": "if (vcol != (int)curwin->w_virtcol)"
    },
    {
        "line": 148,
        "fullcodeline": "Insstart.col -= insstart_less;"
    },
    {
        "line": 97,
        "fullcodeline": "last_vcol = vcol;"
    },
    {
        "line": 104,
        "fullcodeline": "vcol += lbr_chartabsize(ptr, ptr + new_cursor_col, (colnr_T)vcol);"
    },
    {
        "line": 112,
        "fullcodeline": "curwin->w_cursor.col = (colnr_T)new_cursor_col;"
    },
    {
        "line": 113,
        "fullcodeline": "i = (int)curwin->w_virtcol - vcol;"
    },
    {
        "line": 114,
        "fullcodeline": "ptr = alloc(i + 1);"
    },
    {
        "line": 98,
        "fullcodeline": "if (has_mbyte && new_cursor_col >= 0)"
    },
    {
        "line": 102,
        "fullcodeline": "if (ptr[new_cursor_col] == NUL)"
    },
    {
        "line": 115,
        "fullcodeline": "if (ptr != NULL)"
    },
    {
        "line": 99,
        "fullcodeline": "new_cursor_col += (*mb_ptr2len)(ptr + new_cursor_col);"
    },
    {
        "line": 117,
        "fullcodeline": "new_cursor_col += i;"
    },
    {
        "line": 118,
        "fullcodeline": "ptr[i] = NUL;"
    },
    {
        "line": 121,
        "fullcodeline": "ins_str(ptr);"
    },
    {
        "line": 122,
        "fullcodeline": "vim_free(ptr);"
    },
    {
        "line": 101,
        "fullcodeline": "++new_cursor_col;"
    },
    {
        "line": 119,
        "fullcodeline": "while (--i >= 0)"
    },
    {
        "line": 120,
        "fullcodeline": "ptr[i] = ' ';"
    }
]