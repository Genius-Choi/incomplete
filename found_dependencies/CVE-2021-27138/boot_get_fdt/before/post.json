[
    {
        "line": 11,
        "fullcodeline": "char\t\t*fdt_blob = NULL;"
    },
    {
        "line": 19,
        "fullcodeline": "const char *select = NULL;"
    },
    {
        "line": 21,
        "fullcodeline": "*of_flat_tree = NULL;"
    },
    {
        "line": 22,
        "fullcodeline": "*of_size = 0;"
    },
    {
        "line": 24,
        "fullcodeline": "img_addr = (argc == 0) ? image_load_addr :"
    },
    {
        "line": 26,
        "fullcodeline": "buf = map_sysmem(img_addr, 0);"
    },
    {
        "line": 240,
        "fullcodeline": "*of_flat_tree = fdt_blob;"
    },
    {
        "line": 241,
        "fullcodeline": "*of_size = fdt_totalsize(fdt_blob);"
    },
    {
        "line": 242,
        "fullcodeline": "debug(\"   of_flat_tree at 0x%08lx size 0x%08lx\\n\","
    },
    {
        "line": 248,
        "fullcodeline": "debug(\"Continuing to boot without FDT\\n\");"
    },
    {
        "line": 28,
        "fullcodeline": "if (argc > 2)"
    },
    {
        "line": 30,
        "fullcodeline": "if (select || genimg_has_config(images)) {"
    },
    {
        "line": 243,
        "fullcodeline": "(ulong)*of_flat_tree, *of_size);"
    },
    {
        "line": 25,
        "fullcodeline": "simple_strtoul(argv[0], NULL, 16);"
    },
    {
        "line": 29,
        "fullcodeline": "select = argv[2];"
    },
    {
        "line": 76,
        "fullcodeline": "debug(\"## Checking for 'FDT'/'FDT Image' at %08lx\\n\","
    },
    {
        "line": 84,
        "fullcodeline": "buf = map_sysmem(fdt_addr, 0);"
    },
    {
        "line": 168,
        "fullcodeline": "printf(\"   Booting using the fdt blob at %#08lx\\n\", fdt_addr);"
    },
    {
        "line": 169,
        "fullcodeline": "fdt_blob = map_sysmem(fdt_addr, 0);"
    },
    {
        "line": 57,
        "fullcodeline": "fdt_addr = simple_strtoul(select, NULL, 16);"
    },
    {
        "line": 58,
        "fullcodeline": "debug(\"*  fdt: cmdline image address = 0x%08lx\\n\","
    },
    {
        "line": 85,
        "fullcodeline": "switch (genimg_get_format(buf)) {"
    },
    {
        "line": 164,
        "fullcodeline": "puts(\"ERROR: Did not find a cmdline Flattened Device Tree\\n\");"
    },
    {
        "line": 170,
        "fullcodeline": "} else if (images->legacy_hdr_valid &&"
    },
    {
        "line": 158,
        "fullcodeline": "debug(\"*  fdt: raw FDT blob\\n\");"
    },
    {
        "line": 159,
        "fullcodeline": "printf(\"## Flattened Device Tree blob at %08lx\\n\","
    },
    {
        "line": 171,
        "fullcodeline": "image_check_type(&images->legacy_hdr_os_copy,"
    },
    {
        "line": 179,
        "fullcodeline": "printf(\"## Flattened Device Tree from multi component Image at %08lX\\n\","
    },
    {
        "line": 182,
        "fullcodeline": "image_multi_getimg(images->legacy_hdr_os, 2, &fdt_data,"
    },
    {
        "line": 160,
        "fullcodeline": "(long)fdt_addr);"
    },
    {
        "line": 180,
        "fullcodeline": "(ulong)images->legacy_hdr_os);"
    },
    {
        "line": 236,
        "fullcodeline": "debug(\"## No Flattened Device Tree\\n\");"
    },
    {
        "line": 185,
        "fullcodeline": "fdt_blob = (char *)fdt_data;"
    },
    {
        "line": 186,
        "fullcodeline": "printf(\"   Booting using the fdt at 0x%p\\n\", fdt_blob);"
    },
    {
        "line": 188,
        "fullcodeline": "if (fdt_check_header(fdt_blob) != 0) {"
    },
    {
        "line": 193,
        "fullcodeline": "if (fdt_totalsize(fdt_blob) != fdt_len) {"
    },
    {
        "line": 198,
        "fullcodeline": "debug(\"## No Flattened Device Tree\\n\");"
    },
    {
        "line": 189,
        "fullcodeline": "fdt_error(\"image is not a fdt\");"
    },
    {
        "line": 194,
        "fullcodeline": "fdt_error(\"fdt size != image size\");"
    }
]