[
    {
        "line": 6,
        "fullcodeline": "int stack[FDT_MAX_DEPTH] = { 0 };"
    },
    {
        "line": 8,
        "fullcodeline": "int nextoffset = 0;"
    },
    {
        "line": 10,
        "fullcodeline": "int count = 0;"
    },
    {
        "line": 11,
        "fullcodeline": "int start = -1;"
    },
    {
        "line": 12,
        "fullcodeline": "int depth = -1;"
    },
    {
        "line": 13,
        "fullcodeline": "int want = 0;"
    },
    {
        "line": 14,
        "fullcodeline": "int base = fdt_off_dt_struct(fdt);"
    },
    {
        "line": 16,
        "fullcodeline": "end = path;"
    },
    {
        "line": 17,
        "fullcodeline": "*end = '\\0';"
    },
    {
        "line": 117,
        "fullcodeline": "count++;"
    },
    {
        "line": 105,
        "fullcodeline": "} while (tag != FDT_END);"
    },
    {
        "line": 107,
        "fullcodeline": "if (nextoffset != fdt_size_dt_struct(fdt))"
    },
    {
        "line": 111,
        "fullcodeline": "if (count < max_regions) {"
    },
    {
        "line": 22,
        "fullcodeline": "int include = 0;"
    },
    {
        "line": 23,
        "fullcodeline": "int stop_at = 0;"
    },
    {
        "line": 27,
        "fullcodeline": "offset = nextoffset;"
    },
    {
        "line": 28,
        "fullcodeline": "tag = fdt_next_tag(fdt, offset, &nextoffset);"
    },
    {
        "line": 29,
        "fullcodeline": "stop_at = nextoffset;"
    },
    {
        "line": 112,
        "fullcodeline": "region[count].offset = base + start;"
    },
    {
        "line": 113,
        "fullcodeline": "region[count].size = nextoffset - start;"
    },
    {
        "line": 87,
        "fullcodeline": "if (include && start == -1) {"
    },
    {
        "line": 97,
        "fullcodeline": "if (!include && start != -1) {"
    },
    {
        "line": 108,
        "fullcodeline": "return -FDT_ERR_BADLAYOUT;"
    },
    {
        "line": 33,
        "fullcodeline": "include = want >= 2;"
    },
    {
        "line": 34,
        "fullcodeline": "stop_at = offset;"
    },
    {
        "line": 35,
        "fullcodeline": "prop = fdt_get_property_by_offset(fdt, offset, NULL);"
    },
    {
        "line": 36,
        "fullcodeline": "str = fdt_string(fdt, fdt32_to_cpu(prop->nameoff));"
    },
    {
        "line": 44,
        "fullcodeline": "include = want >= 2;"
    },
    {
        "line": 45,
        "fullcodeline": "stop_at = offset;"
    },
    {
        "line": 49,
        "fullcodeline": "depth++;"
    },
    {
        "line": 52,
        "fullcodeline": "name = fdt_get_name(fdt, offset, &len);"
    },
    {
        "line": 57,
        "fullcodeline": "strcpy(end, name);"
    },
    {
        "line": 58,
        "fullcodeline": "end += len;"
    },
    {
        "line": 59,
        "fullcodeline": "stack[depth] = want;"
    },
    {
        "line": 68,
        "fullcodeline": "include = want;"
    },
    {
        "line": 75,
        "fullcodeline": "include = want;"
    },
    {
        "line": 76,
        "fullcodeline": "want = stack[depth--];"
    },
    {
        "line": 79,
        "fullcodeline": "*end = '\\0';"
    },
    {
        "line": 83,
        "fullcodeline": "include = 1;"
    },
    {
        "line": 102,
        "fullcodeline": "count++;"
    },
    {
        "line": 103,
        "fullcodeline": "start = -1;"
    },
    {
        "line": 115,
        "fullcodeline": "region[count].size += fdt_size_dt_strings(fdt);"
    },
    {
        "line": 37,
        "fullcodeline": "if (!str)"
    },
    {
        "line": 39,
        "fullcodeline": "if (str_in_list(str, exc_prop, exc_prop_count))"
    },
    {
        "line": 50,
        "fullcodeline": "if (depth == FDT_MAX_DEPTH)"
    },
    {
        "line": 53,
        "fullcodeline": "if (end - path + 2 + len >= path_len)"
    },
    {
        "line": 55,
        "fullcodeline": "if (end != path + 1)"
    },
    {
        "line": 60,
        "fullcodeline": "if (want == 1)"
    },
    {
        "line": 62,
        "fullcodeline": "if (str_in_list(path, inc, inc_count))"
    },
    {
        "line": 73,
        "fullcodeline": "if (depth < 0)"
    },
    {
        "line": 77,
        "fullcodeline": "while (end > path && *--end != '/')"
    },
    {
        "line": 89,
        "fullcodeline": "if (count && count <= max_regions &&"
    },
    {
        "line": 98,
        "fullcodeline": "if (count < max_regions) {"
    },
    {
        "line": 40,
        "fullcodeline": "include = 0;"
    },
    {
        "line": 56,
        "fullcodeline": "*end++ = '/';"
    },
    {
        "line": 61,
        "fullcodeline": "stop_at = offset;"
    },
    {
        "line": 63,
        "fullcodeline": "want = 2;"
    },
    {
        "line": 90,
        "fullcodeline": "offset == region[count - 1].offset +"
    },
    {
        "line": 92,
        "fullcodeline": "start = region[--count].offset - base;"
    },
    {
        "line": 99,
        "fullcodeline": "region[count].offset = base + start;"
    },
    {
        "line": 100,
        "fullcodeline": "region[count].size = stop_at - start;"
    },
    {
        "line": 38,
        "fullcodeline": "return -FDT_ERR_BADSTRUCTURE;"
    },
    {
        "line": 51,
        "fullcodeline": "return -FDT_ERR_BADSTRUCTURE;"
    },
    {
        "line": 54,
        "fullcodeline": "return -FDT_ERR_NOSPACE;"
    },
    {
        "line": 74,
        "fullcodeline": "return -FDT_ERR_BADSTRUCTURE;"
    },
    {
        "line": 94,
        "fullcodeline": "start = offset;"
    },
    {
        "line": 65,
        "fullcodeline": "want--;"
    },
    {
        "line": 67,
        "fullcodeline": "stop_at = offset;"
    },
    {
        "line": 91,
        "fullcodeline": "region[count - 1].size - base)"
    }
]