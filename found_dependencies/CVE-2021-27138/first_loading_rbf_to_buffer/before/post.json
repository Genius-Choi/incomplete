[
    {
        "line": 6,
        "fullcodeline": "u32 *loadable = buffer_p;"
    },
    {
        "line": 10,
        "fullcodeline": "const char *fpga_node_name = NULL;"
    },
    {
        "line": 11,
        "fullcodeline": "const char *uname = NULL;"
    },
    {
        "line": 14,
        "fullcodeline": "ret = request_firmware_into_buf(dev,"
    },
    {
        "line": 28,
        "fullcodeline": "fit_size = fdt_totalsize(buffer_p);"
    },
    {
        "line": 37,
        "fullcodeline": "ret = request_firmware_into_buf(dev,"
    },
    {
        "line": 43,
        "fullcodeline": "ret = fit_check_format(buffer_p);"
    },
    {
        "line": 49,
        "fullcodeline": "confs_noffset = fdt_path_offset(buffer_p, FIT_CONFS_PATH);"
    },
    {
        "line": 50,
        "fullcodeline": "images_noffset = fdt_path_offset(buffer_p, FIT_IMAGES_PATH);"
    },
    {
        "line": 57,
        "fullcodeline": "confs_noffset = fit_conf_get_node(buffer_p, NULL);"
    },
    {
        "line": 63,
        "fullcodeline": "count = fit_conf_get_prop_node_count(buffer_p, confs_noffset,"
    },
    {
        "line": 69,
        "fullcodeline": "debug(\"FPGA: FPGA node count: %d\\n\", count);"
    },
    {
        "line": 103,
        "fullcodeline": "images_noffset = fit_image_get_node(buffer_p, fpga_node_name);"
    },
    {
        "line": 127,
        "fullcodeline": "ret = fit_image_get_data_size(buffer_p, images_noffset, &rbf_size);"
    },
    {
        "line": 152,
        "fullcodeline": "debug(\"FPGA: External data: offset = 0x%x, size = 0x%x.\\n\","
    },
    {
        "line": 155,
        "fullcodeline": "fpga_loadfs->remaining = rbf_size;"
    },
    {
        "line": 170,
        "fullcodeline": "fpga_loadfs->offset = rbf_offset;"
    },
    {
        "line": 172,
        "fullcodeline": "ret = request_firmware_into_buf(dev,"
    },
    {
        "line": 182,
        "fullcodeline": "get_rbf_image_info(&fpga_loadfs->rbfinfo, (u16 *)buffer_p);"
    },
    {
        "line": 185,
        "fullcodeline": "fpga_loadfs->offset += buffer_size;"
    },
    {
        "line": 188,
        "fullcodeline": "*buffer = (u32)buffer_p;"
    },
    {
        "line": 191,
        "fullcodeline": "*buffer_bsize = buffer_size;"
    },
    {
        "line": 18,
        "fullcodeline": "if (ret < 0) {"
    },
    {
        "line": 23,
        "fullcodeline": "if (image_get_magic((struct image_header *)buffer_p) != FDT_MAGIC) {"
    },
    {
        "line": 30,
        "fullcodeline": "if (fit_size > buffer_size) {"
    },
    {
        "line": 40,
        "fullcodeline": "if (ret < 0)"
    },
    {
        "line": 44,
        "fullcodeline": "if (!ret) {"
    },
    {
        "line": 51,
        "fullcodeline": "if (confs_noffset < 0 || images_noffset < 0) {"
    },
    {
        "line": 58,
        "fullcodeline": "if (confs_noffset < 0) {"
    },
    {
        "line": 65,
        "fullcodeline": "if (count < 0) {"
    },
    {
        "line": 71,
        "fullcodeline": "for (i = 0; i < count; i++) {"
    },
    {
        "line": 98,
        "fullcodeline": "if (!fpga_node_name) {"
    },
    {
        "line": 104,
        "fullcodeline": "if (images_noffset < 0) {"
    },
    {
        "line": 110,
        "fullcodeline": "if (!fit_image_get_data_position(buffer_p, images_noffset,"
    },
    {
        "line": 128,
        "fullcodeline": "if (ret < 0) {"
    },
    {
        "line": 133,
        "fullcodeline": "if (gd->ram_size < rbf_size) {"
    },
    {
        "line": 162,
        "fullcodeline": "if (rbf_size <= buffer_size) {"
    },
    {
        "line": 176,
        "fullcodeline": "if (ret < 0) {"
    },
    {
        "line": 19,
        "fullcodeline": "debug(\"FPGA: Failed to read image header from flash.\\n\");"
    },
    {
        "line": 24,
        "fullcodeline": "debug(\"FPGA: No FDT magic was found.\\n\");"
    },
    {
        "line": 31,
        "fullcodeline": "debug(\"FPGA: FIT image is larger than available buffer.\\n\");"
    },
    {
        "line": 32,
        "fullcodeline": "debug(\"Please use FIT external data or increasing buffer.\\n\");"
    },
    {
        "line": 45,
        "fullcodeline": "debug(\"FPGA: No valid FIT image was found.\\n\");"
    },
    {
        "line": 52,
        "fullcodeline": "debug(\"FPGA: No Configurations or images nodes were found.\\n\");"
    },
    {
        "line": 59,
        "fullcodeline": "debug(\"FPGA: No default configuration was found in config.\\n\");"
    },
    {
        "line": 66,
        "fullcodeline": "debug(\"FPGA: Invalid configuration format for FPGA node.\\n\");"
    },
    {
        "line": 72,
        "fullcodeline": "images_noffset = fit_conf_get_prop_node_index(buffer_p,"
    },
    {
        "line": 75,
        "fullcodeline": "uname = fit_get_name(buffer_p, images_noffset, NULL);"
    },
    {
        "line": 95,
        "fullcodeline": "WATCHDOG_RESET();"
    },
    {
        "line": 99,
        "fullcodeline": "debug(\"FPGA: No suitable bitstream was found, count: %d.\\n\", i);"
    },
    {
        "line": 105,
        "fullcodeline": "debug(\"FPGA: No node '%s' was found in FIT.\\n\","
    },
    {
        "line": 112,
        "fullcodeline": "debug(\"FPGA: Data position was found.\\n\");"
    },
    {
        "line": 129,
        "fullcodeline": "debug(\"FPGA: No data size was found (err=%d).\\n\", ret);"
    },
    {
        "line": 134,
        "fullcodeline": "debug(\"FPGA: Using default OCRAM buffer and size.\\n\");"
    },
    {
        "line": 164,
        "fullcodeline": "buffer_size = rbf_size;"
    },
    {
        "line": 165,
        "fullcodeline": "fpga_loadfs->remaining = 0;"
    },
    {
        "line": 177,
        "fullcodeline": "debug(\"FPGA: Failed to read bitstream from flash.\\n\");"
    },
    {
        "line": 20,
        "fullcodeline": "return -ENOENT;"
    },
    {
        "line": 25,
        "fullcodeline": "return -EBADF;"
    },
    {
        "line": 33,
        "fullcodeline": "return -ENOMEM;"
    },
    {
        "line": 46,
        "fullcodeline": "return -EBADF;"
    },
    {
        "line": 53,
        "fullcodeline": "return -ENOENT;"
    },
    {
        "line": 60,
        "fullcodeline": "return -ENOENT;"
    },
    {
        "line": 107,
        "fullcodeline": "return -ENOENT;"
    },
    {
        "line": 130,
        "fullcodeline": "return -ENOENT;"
    },
    {
        "line": 136,
        "fullcodeline": "ret = fit_image_get_load(buffer_p, images_noffset,"
    },
    {
        "line": 149,
        "fullcodeline": "buffer_size = rbf_size;"
    },
    {
        "line": 167,
        "fullcodeline": "fpga_loadfs->remaining -= buffer_size;"
    },
    {
        "line": 178,
        "fullcodeline": "return -ENOENT;"
    },
    {
        "line": 77,
        "fullcodeline": "debug(\"FPGA: %s\\n\", uname);"
    },
    {
        "line": 113,
        "fullcodeline": "} else if (!fit_image_get_data_offset(buffer_p, images_noffset,"
    },
    {
        "line": 138,
        "fullcodeline": "if (ret < 0) {"
    },
    {
        "line": 79,
        "fullcodeline": "if (strstr(uname, \"fpga-periph\") &&"
    },
    {
        "line": 120,
        "fullcodeline": "rbf_offset += ((fdt_totalsize(buffer_p) + 3) & ~3);"
    },
    {
        "line": 121,
        "fullcodeline": "debug(\"FPGA: Data offset was found.\\n\");"
    },
    {
        "line": 137,
        "fullcodeline": "(ulong *)loadable);"
    },
    {
        "line": 139,
        "fullcodeline": "buffer_p = (u32 *)DEFAULT_DDR_LOAD_ADDRESS;"
    },
    {
        "line": 140,
        "fullcodeline": "debug(\"FPGA: No loadable was found.\\n\");"
    },
    {
        "line": 141,
        "fullcodeline": "debug(\"FPGA: Using default DDR load address: 0x%x .\\n\","
    },
    {
        "line": 80,
        "fullcodeline": "(!is_fpgamgr_early_user_mode() ||"
    },
    {
        "line": 82,
        "fullcodeline": "fpga_node_name = uname;"
    },
    {
        "line": 83,
        "fullcodeline": "printf(\"FPGA: Start to program \");"
    },
    {
        "line": 84,
        "fullcodeline": "printf(\"peripheral/full bitstream ...\\n\");"
    },
    {
        "line": 123,
        "fullcodeline": "debug(\"FPGA: No data position/offset was found.\\n\");"
    },
    {
        "line": 145,
        "fullcodeline": "debug(\"FPGA: Found loadable address = 0x%x.\\n\","
    },
    {
        "line": 124,
        "fullcodeline": "return -ENOENT;"
    },
    {
        "line": 86,
        "fullcodeline": "} else if (strstr(uname, \"fpga-core\") &&"
    },
    {
        "line": 87,
        "fullcodeline": "(is_fpgamgr_early_user_mode() &&"
    },
    {
        "line": 89,
        "fullcodeline": "fpga_node_name = uname;"
    },
    {
        "line": 90,
        "fullcodeline": "printf(\"FPGA: Start to program core \");"
    },
    {
        "line": 91,
        "fullcodeline": "printf(\"bitstream ...\\n\");"
    },
    {
        "line": 88,
        "fullcodeline": "!is_fpgamgr_user_mode())) {"
    }
]