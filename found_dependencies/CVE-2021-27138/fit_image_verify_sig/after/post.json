[
    {
        "line": 6,
        "fullcodeline": "char *err_msg = \"\";"
    },
    {
        "line": 7,
        "fullcodeline": "int verified = 0;"
    },
    {
        "line": 11,
        "fullcodeline": "fdt_for_each_subnode(noffset, fit, image_noffset) {"
    },
    {
        "line": 44,
        "fullcodeline": "printf(\" error!\\n%s for '%s' hash node in '%s' image node\\n\","
    },
    {
        "line": 12,
        "fullcodeline": "const char *name = fit_get_name(fit, noffset, NULL);"
    },
    {
        "line": 36,
        "fullcodeline": "if (noffset == -FDT_ERR_TRUNCATED || noffset == -FDT_ERR_BADSTRUCTURE) {"
    },
    {
        "line": 41,
        "fullcodeline": "return verified ? 0 : -EPERM;"
    },
    {
        "line": 45,
        "fullcodeline": "err_msg, fit_get_name(fit, noffset, NULL),"
    },
    {
        "line": 46,
        "fullcodeline": "fit_get_name(fit, image_noffset, NULL));"
    },
    {
        "line": 47,
        "fullcodeline": "return -1;"
    },
    {
        "line": 18,
        "fullcodeline": "if (strchr(name, '@')) {"
    },
    {
        "line": 22,
        "fullcodeline": "if (!strncmp(name, FIT_SIG_NODENAME,"
    },
    {
        "line": 37,
        "fullcodeline": "err_msg = \"Corrupted or truncated tree\";"
    },
    {
        "line": 19,
        "fullcodeline": "err_msg = \"Node name contains @\";"
    },
    {
        "line": 24,
        "fullcodeline": "ret = fit_image_check_sig(fit, noffset, data,"
    },
    {
        "line": 23,
        "fullcodeline": "strlen(FIT_SIG_NODENAME))) {"
    },
    {
        "line": 25,
        "fullcodeline": "size, -1, &err_msg);"
    },
    {
        "line": 27,
        "fullcodeline": "puts(\"- \");"
    },
    {
        "line": 29,
        "fullcodeline": "puts(\"+ \");"
    },
    {
        "line": 30,
        "fullcodeline": "verified = 1;"
    }
]