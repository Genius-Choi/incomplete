[
    {
        "line": 3,
        "fullcodeline": "char *param, buffer[128], tmp[128];"
    },
    {
        "line": 4,
        "fullcodeline": "int len, tag_close, sptr = 1, line_start = 1, an = 0, end = 0;"
    },
    {
        "line": 5,
        "fullcodeline": "SrtStack stack[16];"
    },
    {
        "line": 6,
        "fullcodeline": "int closing_brace_missing = 0;"
    },
    {
        "line": 8,
        "fullcodeline": "stack[0].tag[0] = 0;"
    },
    {
        "line": 9,
        "fullcodeline": "strcpy(stack[0].param[PARAM_SIZE],  \"{\\\\fs}\");"
    },
    {
        "line": 10,
        "fullcodeline": "strcpy(stack[0].param[PARAM_COLOR], \"{\\\\c}\");"
    },
    {
        "line": 11,
        "fullcodeline": "strcpy(stack[0].param[PARAM_FACE],  \"{\\\\fn}\");"
    },
    {
        "line": 13,
        "fullcodeline": "for (; !end && *in; in++) {"
    },
    {
        "line": 130,
        "fullcodeline": "if (!av_bprint_is_complete(dst))"
    },
    {
        "line": 134,
        "fullcodeline": "dst->len -= 2;"
    },
    {
        "line": 133,
        "fullcodeline": "while (dst->len >= 2 && !strncmp(&dst->str[dst->len - 2], \"\\\\N\", 2))"
    },
    {
        "line": 126,
        "fullcodeline": "if (*in != ' ' && *in != '\\r' && *in != '\\n')"
    },
    {
        "line": 131,
        "fullcodeline": "return AVERROR(ENOMEM);"
    },
    {
        "line": 22,
        "fullcodeline": "rstrip_spaces_buf(dst);"
    },
    {
        "line": 23,
        "fullcodeline": "av_bprintf(dst, \"\\\\N\");"
    },
    {
        "line": 24,
        "fullcodeline": "line_start = 1;"
    },
    {
        "line": 32,
        "fullcodeline": "an += scanbraces(in);"
    },
    {
        "line": 45,
        "fullcodeline": "av_bprint_chars(dst, *in, 1);"
    },
    {
        "line": 48,
        "fullcodeline": "tag_close = in[1] == '/';"
    },
    {
        "line": 49,
        "fullcodeline": "len = 0;"
    },
    {
        "line": 123,
        "fullcodeline": "av_bprint_chars(dst, *in, 1);"
    },
    {
        "line": 127,
        "fullcodeline": "line_start = 0;"
    },
    {
        "line": 27,
        "fullcodeline": "if (!line_start)"
    },
    {
        "line": 33,
        "fullcodeline": "if (!closing_brace_missing) {"
    },
    {
        "line": 50,
        "fullcodeline": "if (scantag(in+tag_close+1, buffer, &len) && len > 0) {"
    },
    {
        "line": 19,
        "fullcodeline": "end = 1;"
    },
    {
        "line": 28,
        "fullcodeline": "av_bprint_chars(dst, *in, 1);"
    },
    {
        "line": 51,
        "fullcodeline": "const char *tagname = buffer;"
    },
    {
        "line": 34,
        "fullcodeline": "if (   (an != 1 && in[1] == '\\\\')"
    },
    {
        "line": 52,
        "fullcodeline": "while (*tagname == ' ')"
    },
    {
        "line": 53,
        "fullcodeline": "tagname++;"
    },
    {
        "line": 54,
        "fullcodeline": "if ((param = strchr(tagname, ' ')))"
    },
    {
        "line": 56,
        "fullcodeline": "if ((!tag_close && sptr < FF_ARRAY_ELEMS(stack) && *tagname) ||"
    },
    {
        "line": 35,
        "fullcodeline": "|| (in[1] && strchr(\"CcFfoPSsYy\", in[1]) && in[2] == ':')) {"
    },
    {
        "line": 36,
        "fullcodeline": "char *bracep = strchr(in+2, '}');"
    },
    {
        "line": 55,
        "fullcodeline": "*param++ = 0;"
    },
    {
        "line": 57,
        "fullcodeline": "( tag_close && sptr > 0 && !strcmp(stack[sptr-1].tag, tagname))) {"
    },
    {
        "line": 58,
        "fullcodeline": "int i, j, unknown = 0;"
    },
    {
        "line": 59,
        "fullcodeline": "in += len + tag_close;"
    },
    {
        "line": 60,
        "fullcodeline": "if (!tag_close)"
    },
    {
        "line": 62,
        "fullcodeline": "if (!strcmp(tagname, \"font\")) {"
    },
    {
        "line": 38,
        "fullcodeline": "in = bracep;"
    },
    {
        "line": 61,
        "fullcodeline": "memset(stack+sptr, 0, sizeof(*stack));"
    },
    {
        "line": 112,
        "fullcodeline": "sptr--;"
    },
    {
        "line": 41,
        "fullcodeline": "closing_brace_missing = 1;"
    },
    {
        "line": 105,
        "fullcodeline": "} else if (tagname[0] && !tagname[1] && strspn(tagname, \"bisu\") == 1) {"
    },
    {
        "line": 113,
        "fullcodeline": "} else if (unknown && !strstr(in, tmp)) {"
    },
    {
        "line": 64,
        "fullcodeline": "for (i=PARAM_NUMBER-1; i>=0; i--)"
    },
    {
        "line": 106,
        "fullcodeline": "av_bprintf(dst, \"{\\\\%c%d}\", tagname[0], !tag_close);"
    },
    {
        "line": 114,
        "fullcodeline": "in -= len + tag_close;"
    },
    {
        "line": 115,
        "fullcodeline": "av_bprint_chars(dst, *in, 1);"
    },
    {
        "line": 101,
        "fullcodeline": "for (i=0; i<PARAM_NUMBER; i++)"
    },
    {
        "line": 108,
        "fullcodeline": "unknown = 1;"
    },
    {
        "line": 109,
        "fullcodeline": "snprintf(tmp, sizeof(tmp), \"</%s>\", tagname);"
    },
    {
        "line": 117,
        "fullcodeline": "av_strlcpy(stack[sptr++].tag, tagname,"
    },
    {
        "line": 118,
        "fullcodeline": "sizeof(stack[0].tag));"
    },
    {
        "line": 66,
        "fullcodeline": "for (j=sptr-2; j>=0; j--)"
    },
    {
        "line": 73,
        "fullcodeline": "if (!strncmp(param, \"size=\", 5)) {"
    },
    {
        "line": 98,
        "fullcodeline": "if ((param = strchr(param, ' ')))"
    },
    {
        "line": 103,
        "fullcodeline": "av_bprintf(dst, \"%s\", stack[sptr].param[i]);"
    },
    {
        "line": 75,
        "fullcodeline": "param += 5 + (param[5] == '\"');"
    },
    {
        "line": 99,
        "fullcodeline": "param++;"
    },
    {
        "line": 65,
        "fullcodeline": "if (stack[sptr-1].param[i][0])"
    },
    {
        "line": 68,
        "fullcodeline": "av_bprintf(dst, \"%s\", stack[j].param[i]);"
    },
    {
        "line": 76,
        "fullcodeline": "if (sscanf(param, \"%u\", &font_size) == 1) {"
    },
    {
        "line": 77,
        "fullcodeline": "snprintf(stack[sptr].param[PARAM_SIZE],"
    },
    {
        "line": 81,
        "fullcodeline": "} else if (!strncmp(param, \"color=\", 6)) {"
    },
    {
        "line": 78,
        "fullcodeline": "sizeof(stack[0].param[PARAM_SIZE]),"
    },
    {
        "line": 82,
        "fullcodeline": "param += 6 + (param[6] == '\"');"
    },
    {
        "line": 83,
        "fullcodeline": "snprintf(stack[sptr].param[PARAM_COLOR],"
    },
    {
        "line": 84,
        "fullcodeline": "sizeof(stack[0].param[PARAM_COLOR]),"
    },
    {
        "line": 86,
        "fullcodeline": "html_color_parse(log_ctx, param));"
    },
    {
        "line": 87,
        "fullcodeline": "} else if (!strncmp(param, \"face=\", 5)) {"
    },
    {
        "line": 88,
        "fullcodeline": "param += 5 + (param[5] == '\"');"
    },
    {
        "line": 89,
        "fullcodeline": "len = strcspn(param,"
    },
    {
        "line": 91,
        "fullcodeline": "av_strlcpy(tmp, param,"
    },
    {
        "line": 93,
        "fullcodeline": "param += len;"
    },
    {
        "line": 94,
        "fullcodeline": "snprintf(stack[sptr].param[PARAM_FACE],"
    },
    {
        "line": 92,
        "fullcodeline": "FFMIN(sizeof(tmp), len+1));"
    },
    {
        "line": 95,
        "fullcodeline": "sizeof(stack[0].param[PARAM_FACE]),"
    },
    {
        "line": 90,
        "fullcodeline": "param[-1] == '\"' ? \"\\\"\" :\" \");"
    }
]