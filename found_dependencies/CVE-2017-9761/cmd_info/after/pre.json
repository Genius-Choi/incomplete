[
    {
        "line": 2,
        "fullcodeline": "RCore *core = (RCore *) data;"
    },
    {
        "line": 3,
        "fullcodeline": "bool newline = r_config_get_i (core->config, \"scr.interactive\");"
    },
    {
        "line": 4,
        "fullcodeline": "RBinObject *o = r_bin_cur_object (core->bin);"
    },
    {
        "line": 5,
        "fullcodeline": "RCoreFile *cf = core->file;"
    },
    {
        "line": 6,
        "fullcodeline": "int i, va = core->io->va || core->io->debug;"
    },
    {
        "line": 7,
        "fullcodeline": "int mode = 0; //R_CORE_BIN_SIMPLE;"
    },
    {
        "line": 8,
        "fullcodeline": "int is_array = 0;"
    },
    {
        "line": 36,
        "fullcodeline": "RBinObject *obj = r_bin_cur_object (core->bin);"
    },
    {
        "line": 11,
        "fullcodeline": "for (i = 0; input[i] && input[i] != ' '; i++)"
    },
    {
        "line": 13,
        "fullcodeline": "if (i > 0) {"
    },
    {
        "line": 21,
        "fullcodeline": "if (mode == R_CORE_BIN_JSON) {"
    },
    {
        "line": 29,
        "fullcodeline": "if (!*input) {"
    },
    {
        "line": 33,
        "fullcodeline": "if (!strcmp (input, \"*\")) {"
    },
    {
        "line": 27,
        "fullcodeline": "r_cons_printf (\"{\");"
    },
    {
        "line": 30,
        "fullcodeline": "cmd_info_bin (core, va, mode);"
    },
    {
        "line": 34,
        "fullcodeline": "input = \"I*\";"
    },
    {
        "line": 426,
        "fullcodeline": "input++;"
    },
    {
        "line": 22,
        "fullcodeline": "if (strlen (input + 1) > 1) {"
    },
    {
        "line": 427,
        "fullcodeline": "if ((*input == 'j' || *input == 'q') && !input[1]) {"
    },
    {
        "line": 14,
        "fullcodeline": "switch (input[i - 1]) {"
    },
    {
        "line": 15,
        "fullcodeline": "case '*': mode = R_CORE_BIN_RADARE; break;"
    },
    {
        "line": 16,
        "fullcodeline": "case 'j': mode = R_CORE_BIN_JSON; break;"
    },
    {
        "line": 17,
        "fullcodeline": "case 'q': mode = R_CORE_BIN_SIMPLE; break;"
    },
    {
        "line": 23,
        "fullcodeline": "is_array = 1;"
    },
    {
        "line": 55,
        "fullcodeline": "db = o? o->kv: NULL;"
    },
    {
        "line": 116,
        "fullcodeline": "newline = false;"
    },
    {
        "line": 125,
        "fullcodeline": "case 'E': RBININFO (\"exports\", R_CORE_BIN_ACC_EXPORTS, NULL, 0); break;"
    },
    {
        "line": 126,
        "fullcodeline": "case 'Z': RBININFO (\"size\", R_CORE_BIN_ACC_SIZE, NULL, 0); break;"
    },
    {
        "line": 152,
        "fullcodeline": "case 'h': RBININFO (\"fields\", R_CORE_BIN_ACC_FIELDS, NULL, 0); break;"
    },
    {
        "line": 203,
        "fullcodeline": "RBININFO (\"resources\", R_CORE_BIN_ACC_RESOURCES, NULL, 0);"
    },
    {
        "line": 205,
        "fullcodeline": "case 'r': RBININFO (\"relocs\", R_CORE_BIN_ACC_RELOCS, NULL, 0); break;"
    },
    {
        "line": 206,
        "fullcodeline": "case 'd': RBININFO (\"dwarf\", R_CORE_BIN_ACC_DWARF, NULL, -1); break;"
    },
    {
        "line": 213,
        "fullcodeline": "case 'I': RBININFO (\"info\", R_CORE_BIN_ACC_INFO, NULL, 0); break;"
    },
    {
        "line": 214,
        "fullcodeline": "case 'e': RBININFO (\"entries\", R_CORE_BIN_ACC_ENTRIES, NULL, 0); break;"
    },
    {
        "line": 215,
        "fullcodeline": "case 'M': RBININFO (\"main\", R_CORE_BIN_ACC_MAIN, NULL, 0); break;"
    },
    {
        "line": 216,
        "fullcodeline": "case 'm': RBININFO (\"memory\", R_CORE_BIN_ACC_MEM, NULL, 0); break;"
    },
    {
        "line": 217,
        "fullcodeline": "case 'V': RBININFO (\"versioninfo\", R_CORE_BIN_ACC_VERSIONINFO, NULL, 0); break;"
    },
    {
        "line": 218,
        "fullcodeline": "case 'C': RBININFO (\"signature\", R_CORE_BIN_ACC_SIGNATURE, NULL, 0); break;"
    },
    {
        "line": 412,
        "fullcodeline": "mode = R_CORE_BIN_SIMPLE;"
    },
    {
        "line": 416,
        "fullcodeline": "mode = R_CORE_BIN_JSON;"
    },
    {
        "line": 423,
        "fullcodeline": "cmd_info_bin (core, va, mode);"
    },
    {
        "line": 41,
        "fullcodeline": "ut64 baddr = r_config_get_i (core->config, \"bin.baddr\");"
    },
    {
        "line": 49,
        "fullcodeline": "r_core_bin_reload (core, NULL, baddr);"
    },
    {
        "line": 50,
        "fullcodeline": "r_core_block_read (core);"
    },
    {
        "line": 51,
        "fullcodeline": "newline = false;"
    },
    {
        "line": 102,
        "fullcodeline": "const char *fn = input[1] == ' '? input + 2: cf->desc->name;"
    },
    {
        "line": 103,
        "fullcodeline": "ut64 baddr = r_config_get_i (core->config, \"bin.baddr\");"
    },
    {
        "line": 104,
        "fullcodeline": "r_core_bin_load (core, fn, baddr);"
    },
    {
        "line": 117,
        "fullcodeline": "if (input[1] == 'j') {"
    },
    {
        "line": 129,
        "fullcodeline": "if ((input[1] == 'm' && input[2] == 'z') || !input[1]) {"
    },
    {
        "line": 148,
        "fullcodeline": "if (input[1] == 'H') { // \"iHH\""
    },
    {
        "line": 155,
        "fullcodeline": "RBinObject *obj = r_bin_cur_object (core->bin);"
    },
    {
        "line": 156,
        "fullcodeline": "RBININFO (\"libs\", R_CORE_BIN_ACC_LIBS, NULL, obj? r_list_length (obj->libs): 0);"
    },
    {
        "line": 161,
        "fullcodeline": "char *ptr = strchr (input, ' ');"
    },
    {
        "line": 162,
        "fullcodeline": "int json = input[1] == 'j'? 'j': 0;"
    },
    {
        "line": 180,
        "fullcodeline": "if (input[1] == '.') {"
    },
    {
        "line": 198,
        "fullcodeline": "if  (input[1] == '*') {"
    },
    {
        "line": 208,
        "fullcodeline": "RBinObject *obj = r_bin_cur_object (core->bin);"
    },
    {
        "line": 209,
        "fullcodeline": "RBININFO (\"imports\", R_CORE_BIN_ACC_IMPORTS, NULL,"
    },
    {
        "line": 220,
        "fullcodeline": "if (input[1] == 'z') { //izz"
    },
    {
        "line": 257,
        "fullcodeline": "if (input[1] == '?') {"
    },
    {
        "line": 368,
        "fullcodeline": "const char *help_message[] = {"
    },
    {
        "line": 42,
        "fullcodeline": "if (input[1] == ' ') {"
    },
    {
        "line": 98,
        "fullcodeline": "if (!cf) {"
    },
    {
        "line": 118,
        "fullcodeline": "r_cons_printf (\"{\");"
    },
    {
        "line": 119,
        "fullcodeline": "r_bin_list_archs (core->bin, 'j');"
    },
    {
        "line": 120,
        "fullcodeline": "r_cons_printf (\"}\\n\");"
    },
    {
        "line": 130,
        "fullcodeline": "RBININFO (\"sections\", R_CORE_BIN_ACC_SECTIONS, NULL, 0);"
    },
    {
        "line": 149,
        "fullcodeline": "RBININFO (\"header\", R_CORE_BIN_ACC_HEADER, NULL, -1);"
    },
    {
        "line": 164,
        "fullcodeline": "if (ptr && ptr[1]) {"
    },
    {
        "line": 181,
        "fullcodeline": "ut64 addr = core->offset + (core->print->cur_enabled? core->print->cur: 0);"
    },
    {
        "line": 182,
        "fullcodeline": "RFlagItem *f = r_flag_get_at (core->flags, addr, false);"
    },
    {
        "line": 190,
        "fullcodeline": "input++;"
    },
    {
        "line": 199,
        "fullcodeline": "mode = R_CORE_BIN_RADARE;"
    },
    {
        "line": 240,
        "fullcodeline": "input++;"
    },
    {
        "line": 241,
        "fullcodeline": "RBININFO (\"strings\", R_CORE_BIN_ACC_RAW_STRINGS, NULL, 0);"
    },
    {
        "line": 258,
        "fullcodeline": "eprintf (\"Usage: ic[ljq*] [class-index or name]\\n\");"
    },
    {
        "line": 355,
        "fullcodeline": "if (input[1] != ' ' || !demangle (core, input + 2)) {"
    },
    {
        "line": 361,
        "fullcodeline": "case R_CORE_BIN_RADARE: cmd_info (core, \"iIiecsSmz*\"); break;"
    },
    {
        "line": 362,
        "fullcodeline": "case R_CORE_BIN_JSON: cmd_info (core, \"iIiecsSmzj\"); break;"
    },
    {
        "line": 363,
        "fullcodeline": "case R_CORE_BIN_SIMPLE: cmd_info (core, \"iIiecsSmzq\"); break;"
    },
    {
        "line": 364,
        "fullcodeline": "default: cmd_info (core, \"IiEecsSmz\"); break;"
    },
    {
        "line": 418,
        "fullcodeline": "mode |= R_CORE_BIN_ARRAY;"
    },
    {
        "line": 43,
        "fullcodeline": "baddr = r_num_math (core->num, input + 1);"
    },
    {
        "line": 99,
        "fullcodeline": "eprintf (\"Core file not open\\n\");"
    },
    {
        "line": 122,
        "fullcodeline": "r_bin_list_archs (core->bin, 1);"
    },
    {
        "line": 132,
        "fullcodeline": "RBinObject *obj = r_bin_cur_object (core->bin);"
    },
    {
        "line": 144,
        "fullcodeline": "input--;"
    },
    {
        "line": 165,
        "fullcodeline": "const char *plugin_name = ptr + 1;"
    },
    {
        "line": 193,
        "fullcodeline": "RBinObject *obj = r_bin_cur_object (core->bin);"
    },
    {
        "line": 194,
        "fullcodeline": "RBININFO (\"symbols\", R_CORE_BIN_ACC_SYMBOLS, NULL, obj? r_list_length (obj->symbols): 0);"
    },
    {
        "line": 243,
        "fullcodeline": "RBinObject *obj = r_bin_cur_object (core->bin);"
    },
    {
        "line": 60,
        "fullcodeline": "char *o = sdb_querys (db, NULL, 0, input + 3);"
    },
    {
        "line": 73,
        "fullcodeline": "char *o = sdb_querys (db, NULL, 0, input + 2);"
    },
    {
        "line": 82,
        "fullcodeline": "char *o = sdb_querys (db, NULL, 0, \"*\");"
    },
    {
        "line": 133,
        "fullcodeline": "if (mode == R_CORE_BIN_RADARE || mode == R_CORE_BIN_JSON || mode == R_CORE_BIN_SIMPLE) {"
    },
    {
        "line": 200,
        "fullcodeline": "} else if (input[1] == 'j') {"
    },
    {
        "line": 223,
        "fullcodeline": "mode = R_CORE_BIN_RADARE;"
    },
    {
        "line": 226,
        "fullcodeline": "mode = R_CORE_BIN_JSON;"
    },
    {
        "line": 237,
        "fullcodeline": "mode = R_CORE_BIN_PRINT;"
    },
    {
        "line": 244,
        "fullcodeline": "if (input[1] == 'q') {"
    },
    {
        "line": 259,
        "fullcodeline": "} else if (input[1] == ' ' || input[1] == 'q' || input[1] == 'j' || input[1] == 'l') {"
    },
    {
        "line": 61,
        "fullcodeline": "if (o && *o) {"
    },
    {
        "line": 74,
        "fullcodeline": "if (o && *o) {"
    },
    {
        "line": 83,
        "fullcodeline": "if (o && *o) {"
    },
    {
        "line": 134,
        "fullcodeline": "RBININFO (\"sections\", R_CORE_BIN_ACC_SECTIONS, input + 2,"
    },
    {
        "line": 141,
        "fullcodeline": "while (*(++input)) ;"
    },
    {
        "line": 184,
        "fullcodeline": "if (f->offset == addr || !f->offset) {"
    },
    {
        "line": 201,
        "fullcodeline": "mode = R_CORE_BIN_JSON;"
    },
    {
        "line": 229,
        "fullcodeline": "if (input[3] == 'q') { //izzqq"
    },
    {
        "line": 245,
        "fullcodeline": "mode = (input[2] == 'q')"
    },
    {
        "line": 248,
        "fullcodeline": "input++;"
    },
    {
        "line": 251,
        "fullcodeline": "RBININFO (\"strings\", R_CORE_BIN_ACC_STRINGS, NULL,"
    },
    {
        "line": 263,
        "fullcodeline": "RBinObject *obj = r_bin_cur_object (core->bin);"
    },
    {
        "line": 62,
        "fullcodeline": "r_cons_print (o);"
    },
    {
        "line": 75,
        "fullcodeline": "r_cons_print (o);"
    },
    {
        "line": 84,
        "fullcodeline": "r_cons_print (o);"
    },
    {
        "line": 137,
        "fullcodeline": "RBININFO (\"sections\", R_CORE_BIN_ACC_SECTIONS, input + 1,"
    },
    {
        "line": 185,
        "fullcodeline": "r_cons_printf (\"%s\", f->name);"
    },
    {
        "line": 230,
        "fullcodeline": "mode = R_CORE_BIN_SIMPLEST;"
    },
    {
        "line": 231,
        "fullcodeline": "input++;"
    },
    {
        "line": 349,
        "fullcodeline": "RBinObject *obj = r_bin_cur_object (core->bin);"
    },
    {
        "line": 350,
        "fullcodeline": "int len = obj? r_list_length (obj->classes): 0;"
    },
    {
        "line": 351,
        "fullcodeline": "RBININFO (\"classes\", R_CORE_BIN_ACC_CLASSES, NULL, len);"
    },
    {
        "line": 187,
        "fullcodeline": "r_cons_printf (\"%s+%d\", f->name, (int) (addr - f->offset));"
    },
    {
        "line": 233,
        "fullcodeline": "mode = R_CORE_BIN_SIMPLE;"
    },
    {
        "line": 266,
        "fullcodeline": "int idx = -1;"
    },
    {
        "line": 267,
        "fullcodeline": "const char * cls_name = NULL;"
    },
    {
        "line": 277,
        "fullcodeline": "int count = 0;"
    },
    {
        "line": 278,
        "fullcodeline": "r_list_foreach (obj->classes, iter, cls) {"
    },
    {
        "line": 268,
        "fullcodeline": "if (r_num_is_valid_input (core->num, input + 2)) {"
    },
    {
        "line": 332,
        "fullcodeline": "playMsg (core, \"classes\", r_list_length (obj->classes));"
    },
    {
        "line": 269,
        "fullcodeline": "idx = r_num_math (core->num, input + 2);"
    },
    {
        "line": 279,
        "fullcodeline": "if ((idx >= 0 && idx != count++) ||"
    },
    {
        "line": 333,
        "fullcodeline": "if (input[1] == 'l' && obj) { // \"icl\""
    },
    {
        "line": 271,
        "fullcodeline": "const char * first_char = input + ((input[1] == ' ') ? 1 : 2);"
    },
    {
        "line": 272,
        "fullcodeline": "int not_space = strspn (first_char, \" \");"
    },
    {
        "line": 280,
        "fullcodeline": "(cls_name && strcmp (cls_name, cls->name) != 0)){"
    },
    {
        "line": 303,
        "fullcodeline": "r_list_foreach (cls->methods, iter2, sym) {"
    },
    {
        "line": 320,
        "fullcodeline": "r_list_foreach (cls->methods, iter2, sym) {"
    },
    {
        "line": 334,
        "fullcodeline": "r_list_foreach (obj->classes, iter, cls) {"
    },
    {
        "line": 321,
        "fullcodeline": "char *flags = r_core_bin_method_flags_str (sym, 0);"
    },
    {
        "line": 335,
        "fullcodeline": "r_list_foreach (cls->methods, iter2, sym) {"
    },
    {
        "line": 344,
        "fullcodeline": "RBININFO (\"classes\", R_CORE_BIN_ACC_CLASSES, NULL, r_list_length (obj->classes));"
    },
    {
        "line": 274,
        "fullcodeline": "cls_name = first_char + not_space;"
    },
    {
        "line": 336,
        "fullcodeline": "const char *comma = iter2->p? \" \": \"\";"
    },
    {
        "line": 339,
        "fullcodeline": "if (!r_list_empty (cls->methods)) {"
    },
    {
        "line": 307,
        "fullcodeline": "char *flags = r_core_bin_method_flags_str (sym, R_CORE_BIN_JSON);"
    },
    {
        "line": 340,
        "fullcodeline": "r_cons_newline ();"
    }
]