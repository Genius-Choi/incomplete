[
    {
        "line": 4,
        "fullcodeline": "char buf[sz_rfbSetEncodingsMsg + MAX_ENCODINGS * 4];"
    },
    {
        "line": 6,
        "fullcodeline": "rfbSetEncodingsMsg *se = (rfbSetEncodingsMsg *)buf;"
    },
    {
        "line": 7,
        "fullcodeline": "uint32_t *encs = (uint32_t *)(&buf[sz_rfbSetEncodingsMsg]);"
    },
    {
        "line": 8,
        "fullcodeline": "int len = 0;"
    },
    {
        "line": 9,
        "fullcodeline": "rfbBool requestCompressLevel = FALSE;"
    },
    {
        "line": 10,
        "fullcodeline": "rfbBool requestQualityLevel = FALSE;"
    },
    {
        "line": 11,
        "fullcodeline": "rfbBool requestLastRectEncoding = FALSE;"
    },
    {
        "line": 16,
        "fullcodeline": "spf.type = rfbSetPixelFormat;"
    },
    {
        "line": 17,
        "fullcodeline": "spf.pad1 = 0;"
    },
    {
        "line": 18,
        "fullcodeline": "spf.pad2 = 0;"
    },
    {
        "line": 19,
        "fullcodeline": "spf.format = client->format;"
    },
    {
        "line": 20,
        "fullcodeline": "spf.format.redMax = rfbClientSwap16IfLE(spf.format.redMax);"
    },
    {
        "line": 21,
        "fullcodeline": "spf.format.greenMax = rfbClientSwap16IfLE(spf.format.greenMax);"
    },
    {
        "line": 22,
        "fullcodeline": "spf.format.blueMax = rfbClientSwap16IfLE(spf.format.blueMax);"
    },
    {
        "line": 30,
        "fullcodeline": "se->type = rfbSetEncodings;"
    },
    {
        "line": 31,
        "fullcodeline": "se->pad = 0;"
    },
    {
        "line": 32,
        "fullcodeline": "se->nEncodings = 0;"
    },
    {
        "line": 203,
        "fullcodeline": "len = sz_rfbSetEncodingsMsg + se->nEncodings * 4;"
    },
    {
        "line": 205,
        "fullcodeline": "se->nEncodings = rfbClientSwap16IfLE(se->nEncodings);"
    },
    {
        "line": 14,
        "fullcodeline": "if (!SupportsClient2Server(client, rfbSetPixelFormat)) return TRUE;"
    },
    {
        "line": 24,
        "fullcodeline": "if (!WriteToRFBServer(client, (char *)&spf, sz_rfbSetPixelFormatMsg))"
    },
    {
        "line": 28,
        "fullcodeline": "if (!SupportsClient2Server(client, rfbSetEncodings)) return TRUE;"
    },
    {
        "line": 171,
        "fullcodeline": "if (se->nEncodings < MAX_ENCODINGS)"
    },
    {
        "line": 175,
        "fullcodeline": "if (se->nEncodings < MAX_ENCODINGS && client->canHandleNewFBSize)"
    },
    {
        "line": 179,
        "fullcodeline": "if (se->nEncodings < MAX_ENCODINGS && requestLastRectEncoding)"
    },
    {
        "line": 183,
        "fullcodeline": "if (se->nEncodings < MAX_ENCODINGS)"
    },
    {
        "line": 185,
        "fullcodeline": "if (se->nEncodings < MAX_ENCODINGS)"
    },
    {
        "line": 187,
        "fullcodeline": "if (se->nEncodings < MAX_ENCODINGS)"
    },
    {
        "line": 191,
        "fullcodeline": "if (se->nEncodings < MAX_ENCODINGS)"
    },
    {
        "line": 195,
        "fullcodeline": "for(e = rfbClientExtensions; e; e = e->next)"
    },
    {
        "line": 207,
        "fullcodeline": "if (!WriteToRFBServer(client, buf, len)) return FALSE;"
    },
    {
        "line": 172,
        "fullcodeline": "encs[se->nEncodings++] = rfbClientSwap32IfLE(rfbEncodingKeyboardLedState);"
    },
    {
        "line": 176,
        "fullcodeline": "encs[se->nEncodings++] = rfbClientSwap32IfLE(rfbEncodingNewFBSize);"
    },
    {
        "line": 180,
        "fullcodeline": "encs[se->nEncodings++] = rfbClientSwap32IfLE(rfbEncodingLastRect);"
    },
    {
        "line": 184,
        "fullcodeline": "encs[se->nEncodings++] = rfbClientSwap32IfLE(rfbEncodingSupportedMessages);"
    },
    {
        "line": 186,
        "fullcodeline": "encs[se->nEncodings++] = rfbClientSwap32IfLE(rfbEncodingSupportedEncodings);"
    },
    {
        "line": 188,
        "fullcodeline": "encs[se->nEncodings++] = rfbClientSwap32IfLE(rfbEncodingServerIdentity);"
    },
    {
        "line": 192,
        "fullcodeline": "encs[se->nEncodings++] = rfbClientSwap32IfLE(rfbEncodingXvp);"
    },
    {
        "line": 93,
        "fullcodeline": "} while (encStr && se->nEncodings < MAX_ENCODINGS);"
    },
    {
        "line": 95,
        "fullcodeline": "if (se->nEncodings < MAX_ENCODINGS && requestCompressLevel) {"
    },
    {
        "line": 100,
        "fullcodeline": "if (se->nEncodings < MAX_ENCODINGS && requestQualityLevel) {"
    },
    {
        "line": 121,
        "fullcodeline": "encs[se->nEncodings++] = rfbClientSwap32IfLE(rfbEncodingCopyRect);"
    },
    {
        "line": 128,
        "fullcodeline": "encs[se->nEncodings++] = rfbClientSwap32IfLE(rfbEncodingHextile);"
    },
    {
        "line": 134,
        "fullcodeline": "encs[se->nEncodings++] = rfbClientSwap32IfLE(rfbEncodingUltra);"
    },
    {
        "line": 135,
        "fullcodeline": "encs[se->nEncodings++] = rfbClientSwap32IfLE(rfbEncodingUltraZip);"
    },
    {
        "line": 136,
        "fullcodeline": "encs[se->nEncodings++] = rfbClientSwap32IfLE(rfbEncodingCoRRE);"
    },
    {
        "line": 137,
        "fullcodeline": "encs[se->nEncodings++] = rfbClientSwap32IfLE(rfbEncodingRRE);"
    },
    {
        "line": 162,
        "fullcodeline": "if (se->nEncodings < MAX_ENCODINGS)"
    },
    {
        "line": 164,
        "fullcodeline": "if (se->nEncodings < MAX_ENCODINGS)"
    },
    {
        "line": 166,
        "fullcodeline": "if (se->nEncodings < MAX_ENCODINGS)"
    },
    {
        "line": 38,
        "fullcodeline": "const char *nextEncStr = strchr(encStr, ' ');"
    },
    {
        "line": 92,
        "fullcodeline": "encStr = nextEncStr;"
    },
    {
        "line": 96,
        "fullcodeline": "encs[se->nEncodings++] = rfbClientSwap32IfLE(client->appData.compressLevel +"
    },
    {
        "line": 103,
        "fullcodeline": "encs[se->nEncodings++] = rfbClientSwap32IfLE(client->appData.qualityLevel +"
    },
    {
        "line": 108,
        "fullcodeline": "if (SameMachine(client->sock)) {"
    },
    {
        "line": 139,
        "fullcodeline": "if (client->appData.compressLevel >= 0 && client->appData.compressLevel <= 9) {"
    },
    {
        "line": 163,
        "fullcodeline": "encs[se->nEncodings++] = rfbClientSwap32IfLE(rfbEncodingXCursor);"
    },
    {
        "line": 165,
        "fullcodeline": "encs[se->nEncodings++] = rfbClientSwap32IfLE(rfbEncodingRichCursor);"
    },
    {
        "line": 167,
        "fullcodeline": "encs[se->nEncodings++] = rfbClientSwap32IfLE(rfbEncodingPointerPos);"
    },
    {
        "line": 198,
        "fullcodeline": "for(enc = e->encodings; *enc; enc++)"
    },
    {
        "line": 46,
        "fullcodeline": "if (strncasecmp(encStr,\"raw\",encStrLen) == 0) {"
    },
    {
        "line": 101,
        "fullcodeline": "if (client->appData.qualityLevel < 0 || client->appData.qualityLevel > 9)"
    },
    {
        "line": 112,
        "fullcodeline": "rfbClientLog(\"Same machine: preferring raw encoding\\n\");"
    },
    {
        "line": 113,
        "fullcodeline": "encs[se->nEncodings++] = rfbClientSwap32IfLE(rfbEncodingRaw);"
    },
    {
        "line": 140,
        "fullcodeline": "encs[se->nEncodings++] = rfbClientSwap32IfLE(client->appData.compressLevel +"
    },
    {
        "line": 153,
        "fullcodeline": "encs[se->nEncodings++] = rfbClientSwap32IfLE(client->appData.qualityLevel +"
    },
    {
        "line": 199,
        "fullcodeline": "if(se->nEncodings < MAX_ENCODINGS)"
    },
    {
        "line": 40,
        "fullcodeline": "encStrLen = nextEncStr - encStr;"
    },
    {
        "line": 41,
        "fullcodeline": "nextEncStr++;"
    },
    {
        "line": 47,
        "fullcodeline": "encs[se->nEncodings++] = rfbClientSwap32IfLE(rfbEncodingRaw);"
    },
    {
        "line": 102,
        "fullcodeline": "client->appData.qualityLevel = 5;"
    },
    {
        "line": 147,
        "fullcodeline": "encs[se->nEncodings++] = rfbClientSwap32IfLE(rfbEncodingCompressLevel1);"
    },
    {
        "line": 151,
        "fullcodeline": "if (client->appData.qualityLevel < 0 || client->appData.qualityLevel > 9)"
    },
    {
        "line": 200,
        "fullcodeline": "encs[se->nEncodings++] = rfbClientSwap32IfLE(*enc);"
    },
    {
        "line": 43,
        "fullcodeline": "encStrLen = strlen(encStr);"
    },
    {
        "line": 152,
        "fullcodeline": "client->appData.qualityLevel = 5;"
    },
    {
        "line": 48,
        "fullcodeline": "} else if (strncasecmp(encStr,\"copyrect\",encStrLen) == 0) {"
    },
    {
        "line": 49,
        "fullcodeline": "encs[se->nEncodings++] = rfbClientSwap32IfLE(rfbEncodingCopyRect);"
    },
    {
        "line": 61,
        "fullcodeline": "} else if (strncasecmp(encStr,\"hextile\",encStrLen) == 0) {"
    },
    {
        "line": 62,
        "fullcodeline": "encs[se->nEncodings++] = rfbClientSwap32IfLE(rfbEncodingHextile);"
    },
    {
        "line": 80,
        "fullcodeline": "} else if ((strncasecmp(encStr,\"ultra\",encStrLen) == 0) || (strncasecmp(encStr,\"ultrazip\",encStrLen) == 0)) {"
    },
    {
        "line": 82,
        "fullcodeline": "encs[se->nEncodings++] = rfbClientSwap32IfLE(rfbEncodingUltra);"
    },
    {
        "line": 83,
        "fullcodeline": "encs[se->nEncodings++] = rfbClientSwap32IfLE(rfbEncodingUltraZip);"
    },
    {
        "line": 84,
        "fullcodeline": "} else if (strncasecmp(encStr,\"corre\",encStrLen) == 0) {"
    },
    {
        "line": 85,
        "fullcodeline": "encs[se->nEncodings++] = rfbClientSwap32IfLE(rfbEncodingCoRRE);"
    },
    {
        "line": 86,
        "fullcodeline": "} else if (strncasecmp(encStr,\"rre\",encStrLen) == 0) {"
    },
    {
        "line": 87,
        "fullcodeline": "encs[se->nEncodings++] = rfbClientSwap32IfLE(rfbEncodingRRE);"
    },
    {
        "line": 89,
        "fullcodeline": "rfbClientLog(\"Unknown encoding '%.*s'\\n\",encStrLen,encStr);"
    }
]