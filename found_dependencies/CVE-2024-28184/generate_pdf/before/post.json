[
    {
        "line": 3,
        "fullcodeline": "scale = zoom * 0.75"
    },
    {
        "line": 5,
        "fullcodeline": "PROGRESS_LOGGER.info('Step 6 - Creating PDF')"
    },
    {
        "line": 8,
        "fullcodeline": "mark = False"
    },
    {
        "line": 17,
        "fullcodeline": "identifier = options['pdf_identifier']"
    },
    {
        "line": 18,
        "fullcodeline": "pdf = pydyf.PDF((version or '1.7'), identifier)"
    },
    {
        "line": 19,
        "fullcodeline": "states = pydyf.Dictionary()"
    },
    {
        "line": 20,
        "fullcodeline": "x_objects = pydyf.Dictionary()"
    },
    {
        "line": 21,
        "fullcodeline": "patterns = pydyf.Dictionary()"
    },
    {
        "line": 22,
        "fullcodeline": "shadings = pydyf.Dictionary()"
    },
    {
        "line": 23,
        "fullcodeline": "images = {}"
    },
    {
        "line": 24,
        "fullcodeline": "resources = pydyf.Dictionary({"
    },
    {
        "line": 30,
        "fullcodeline": "pdf.add_object(resources)"
    },
    {
        "line": 31,
        "fullcodeline": "pdf_names = []"
    },
    {
        "line": 34,
        "fullcodeline": "page_links_and_anchors = list(resolve_links(document.pages))"
    },
    {
        "line": 36,
        "fullcodeline": "annot_files = {}"
    },
    {
        "line": 38,
        "fullcodeline": "compress = not options['uncompressed_pdf']"
    },
    {
        "line": 106,
        "fullcodeline": "add_outlines(pdf, document.make_bookmark_tree(scale, transform_pages=True))"
    },
    {
        "line": 108,
        "fullcodeline": "PROGRESS_LOGGER.info('Step 7 - Adding PDF metadata')"
    },
    {
        "line": 111,
        "fullcodeline": "pdf.info['Producer'] = pydyf.String(f'WeasyPrint {VERSION}')"
    },
    {
        "line": 112,
        "fullcodeline": "metadata = document.metadata"
    },
    {
        "line": 139,
        "fullcodeline": "attachments = metadata.attachments.copy()"
    },
    {
        "line": 145,
        "fullcodeline": "pdf_attachments = []"
    },
    {
        "line": 161,
        "fullcodeline": "subset = not options['full_fonts']"
    },
    {
        "line": 162,
        "fullcodeline": "hinting = options['hinting']"
    },
    {
        "line": 163,
        "fullcodeline": "pdf_fonts = build_fonts_dictionary("
    },
    {
        "line": 165,
        "fullcodeline": "pdf.add_object(pdf_fonts)"
    },
    {
        "line": 175,
        "fullcodeline": "resources['Font'] = pdf_fonts.reference"
    },
    {
        "line": 176,
        "fullcodeline": "_use_references(pdf, resources, images)"
    },
    {
        "line": 9,
        "fullcodeline": "variant, version = options['pdf_variant'], options['pdf_version']"
    },
    {
        "line": 37,
        "fullcodeline": "pdf_pages, page_streams = [], []"
    },
    {
        "line": 39,
        "fullcodeline": "for page_number, (page, links_and_anchors) in enumerate("
    },
    {
        "line": 146,
        "fullcodeline": "for attachment in attachments:"
    },
    {
        "line": 166,
        "fullcodeline": "if 'AcroForm' in pdf.catalog:"
    },
    {
        "line": 114,
        "fullcodeline": "pdf.info['Title'] = pydyf.String(metadata.title)"
    },
    {
        "line": 116,
        "fullcodeline": "pdf.info['Author'] = pydyf.String(', '.join(metadata.authors))"
    },
    {
        "line": 118,
        "fullcodeline": "pdf.info['Subject'] = pydyf.String(metadata.description)"
    },
    {
        "line": 120,
        "fullcodeline": "pdf.info['Keywords'] = pydyf.String(', '.join(metadata.keywords))"
    },
    {
        "line": 122,
        "fullcodeline": "pdf.info['Creator'] = pydyf.String(metadata.generator)"
    },
    {
        "line": 124,
        "fullcodeline": "pdf.info['CreationDate'] = pydyf.String("
    },
    {
        "line": 127,
        "fullcodeline": "pdf.info['ModDate'] = pydyf.String("
    },
    {
        "line": 130,
        "fullcodeline": "pdf.catalog['Lang'] = pydyf.String(metadata.lang)"
    },
    {
        "line": 151,
        "fullcodeline": "content = pydyf.Dictionary({'Names': pydyf.Array()})"
    },
    {
        "line": 155,
        "fullcodeline": "pdf.add_object(content)"
    },
    {
        "line": 158,
        "fullcodeline": "pdf.catalog['Names']['EmbeddedFiles'] = content.reference"
    },
    {
        "line": 168,
        "fullcodeline": "dingbats = pydyf.Dictionary({"
    },
    {
        "line": 173,
        "fullcodeline": "pdf.add_object(dingbats)"
    },
    {
        "line": 174,
        "fullcodeline": "pdf_fonts['ZaDb'] = dingbats.reference"
    },
    {
        "line": 181,
        "fullcodeline": "name_array = pydyf.Array()"
    },
    {
        "line": 185,
        "fullcodeline": "dests = pydyf.Dictionary({'Names': name_array})"
    },
    {
        "line": 188,
        "fullcodeline": "pdf.catalog['Names']['Dests'] = dests"
    },
    {
        "line": 192,
        "fullcodeline": "variant_function("
    },
    {
        "line": 11,
        "fullcodeline": "variant_function, properties = VARIANTS[variant]"
    },
    {
        "line": 12,
        "fullcodeline": "if 'version' in properties:"
    },
    {
        "line": 14,
        "fullcodeline": "if 'mark' in properties:"
    },
    {
        "line": 42,
        "fullcodeline": "matrix = Matrix(scale, 0, 0, -scale, 0, page.height * scale)"
    },
    {
        "line": 44,
        "fullcodeline": "page_width = scale * ("
    },
    {
        "line": 46,
        "fullcodeline": "page_height = scale * ("
    },
    {
        "line": 48,
        "fullcodeline": "left = -scale * page.bleed['left']"
    },
    {
        "line": 49,
        "fullcodeline": "top = -scale * page.bleed['top']"
    },
    {
        "line": 50,
        "fullcodeline": "right = left + page_width"
    },
    {
        "line": 51,
        "fullcodeline": "bottom = top + page_height"
    },
    {
        "line": 53,
        "fullcodeline": "page_rectangle = ("
    },
    {
        "line": 56,
        "fullcodeline": "stream = Stream("
    },
    {
        "line": 59,
        "fullcodeline": "stream.transform(d=-1, f=(page.height * scale))"
    },
    {
        "line": 60,
        "fullcodeline": "pdf.add_object(stream)"
    },
    {
        "line": 61,
        "fullcodeline": "page_streams.append(stream)"
    },
    {
        "line": 63,
        "fullcodeline": "pdf_page = pydyf.Dictionary({"
    },
    {
        "line": 73,
        "fullcodeline": "pdf.add_page(pdf_page)"
    },
    {
        "line": 74,
        "fullcodeline": "pdf_pages.append(pdf_page)"
    },
    {
        "line": 76,
        "fullcodeline": "add_links(links_and_anchors, matrix, pdf, pdf_page, pdf_names, mark)"
    },
    {
        "line": 77,
        "fullcodeline": "add_annotations("
    },
    {
        "line": 80,
        "fullcodeline": "add_inputs("
    },
    {
        "line": 83,
        "fullcodeline": "page.paint(stream, scale)"
    },
    {
        "line": 86,
        "fullcodeline": "bleed = {key: value * 0.75 for key, value in page.bleed.items()}"
    },
    {
        "line": 88,
        "fullcodeline": "trim_left = left + bleed['left']"
    },
    {
        "line": 89,
        "fullcodeline": "trim_top = top + bleed['top']"
    },
    {
        "line": 90,
        "fullcodeline": "trim_right = right - bleed['right']"
    },
    {
        "line": 91,
        "fullcodeline": "trim_bottom = bottom - bleed['bottom']"
    },
    {
        "line": 95,
        "fullcodeline": "bleed_left = trim_left - min(10, bleed['left'])"
    },
    {
        "line": 96,
        "fullcodeline": "bleed_top = trim_top - min(10, bleed['top'])"
    },
    {
        "line": 97,
        "fullcodeline": "bleed_right = trim_right + min(10, bleed['right'])"
    },
    {
        "line": 98,
        "fullcodeline": "bleed_bottom = trim_bottom + min(10, bleed['bottom'])"
    },
    {
        "line": 100,
        "fullcodeline": "pdf_page['TrimBox'] = pydyf.Array(["
    },
    {
        "line": 102,
        "fullcodeline": "pdf_page['BleedBox'] = pydyf.Array(["
    },
    {
        "line": 132,
        "fullcodeline": "for key, value in metadata.custom.items():"
    },
    {
        "line": 141,
        "fullcodeline": "for attachment in options['attachments']:"
    },
    {
        "line": 147,
        "fullcodeline": "pdf_attachment = write_pdf_attachment(pdf, attachment, compress)"
    },
    {
        "line": 152,
        "fullcodeline": "for i, pdf_attachment in enumerate(pdf_attachments):"
    },
    {
        "line": 156,
        "fullcodeline": "if 'Names' not in pdf.catalog:"
    },
    {
        "line": 182,
        "fullcodeline": "for anchor in sorted(pdf_names):"
    },
    {
        "line": 186,
        "fullcodeline": "if 'Names' not in pdf.catalog:"
    },
    {
        "line": 13,
        "fullcodeline": "version = properties['version']"
    },
    {
        "line": 15,
        "fullcodeline": "mark = properties['mark']"
    },
    {
        "line": 125,
        "fullcodeline": "_w3c_date_to_pdf(metadata.created, 'created'))"
    },
    {
        "line": 128,
        "fullcodeline": "_w3c_date_to_pdf(metadata.modified, 'modified'))"
    },
    {
        "line": 148,
        "fullcodeline": "if pdf_attachment is not None:"
    },
    {
        "line": 157,
        "fullcodeline": "pdf.catalog['Names'] = pydyf.Dictionary()"
    },
    {
        "line": 187,
        "fullcodeline": "pdf.catalog['Names'] = pydyf.Dictionary()"
    },
    {
        "line": 40,
        "fullcodeline": "zip(document.pages, page_links_and_anchors)):"
    },
    {
        "line": 45,
        "fullcodeline": "page.width + page.bleed['left'] + page.bleed['right'])"
    },
    {
        "line": 47,
        "fullcodeline": "page.height + page.bleed['top'] + page.bleed['bottom'])"
    },
    {
        "line": 54,
        "fullcodeline": "left / scale, top / scale,"
    },
    {
        "line": 55,
        "fullcodeline": "(right - left) / scale, (bottom - top) / scale)"
    },
    {
        "line": 71,
        "fullcodeline": "pdf_page['Tabs'] = '/S'"
    },
    {
        "line": 72,
        "fullcodeline": "pdf_page['StructParents'] = page_number"
    },
    {
        "line": 133,
        "fullcodeline": "key = ''.join(char for char in key if char.isalnum())"
    },
    {
        "line": 134,
        "fullcodeline": "key = key.encode('ascii', errors='ignore').decode()"
    },
    {
        "line": 144,
        "fullcodeline": "attachments.append(attachment)"
    },
    {
        "line": 149,
        "fullcodeline": "pdf_attachments.append(pdf_attachment)"
    },
    {
        "line": 183,
        "fullcodeline": "name_array.append(pydyf.String(anchor[0]))"
    },
    {
        "line": 184,
        "fullcodeline": "name_array.append(anchor[1])"
    },
    {
        "line": 142,
        "fullcodeline": "if not isinstance(attachment, Attachment):"
    },
    {
        "line": 153,
        "fullcodeline": "content['Names'].append(pydyf.String(f'attachment{i}'))"
    },
    {
        "line": 154,
        "fullcodeline": "content['Names'].append(pdf_attachment.reference)"
    },
    {
        "line": 66,
        "fullcodeline": "'MediaBox': pydyf.Array([left, top, right, bottom]),"
    },
    {
        "line": 136,
        "fullcodeline": "pdf.info[key] = pydyf.String(value)"
    },
    {
        "line": 143,
        "fullcodeline": "attachment = Attachment(attachment)"
    }
]