[
    {
        "line": 12,
        "fullcodeline": "spkt.cnt = rpkt.cnt = 0;"
    },
    {
        "line": 13,
        "fullcodeline": "spkt.esc = rpkt.esc = 0;"
    },
    {
        "line": 14,
        "fullcodeline": "while ((c = getc(f)) != EOF) {"
    },
    {
        "line": 20,
        "fullcodeline": "dir = c==1? \"sent\": \"rcvd\";"
    },
    {
        "line": 21,
        "fullcodeline": "pkt = c==1? &spkt: &rpkt;"
    },
    {
        "line": 22,
        "fullcodeline": "n = getc(f);"
    },
    {
        "line": 23,
        "fullcodeline": "n = (n << 8) + getc(f);"
    },
    {
        "line": 156,
        "fullcodeline": "dir = c==3? \"send\": \"recv\";"
    },
    {
        "line": 157,
        "fullcodeline": "pkt = c==3? &spkt: &rpkt;"
    },
    {
        "line": 166,
        "fullcodeline": "show_time(f, c);"
    },
    {
        "line": 169,
        "fullcodeline": "printf(\"?%.2x\\n\", c);"
    },
    {
        "line": 25,
        "fullcodeline": "for (; n > 0; --n) {"
    },
    {
        "line": 159,
        "fullcodeline": "if (pkt->cnt > 0)"
    },
    {
        "line": 19,
        "fullcodeline": "c = 3 - c;"
    },
    {
        "line": 26,
        "fullcodeline": "c = getc(f);"
    },
    {
        "line": 155,
        "fullcodeline": "c = 7 - c;"
    },
    {
        "line": 160,
        "fullcodeline": "printf(\"  [%d bytes in incomplete packet]\", pkt->cnt);"
    },
    {
        "line": 147,
        "fullcodeline": "pkt->buf[pkt->cnt++] = c;"
    },
    {
        "line": 30,
        "fullcodeline": "if (spkt.cnt > 0)"
    },
    {
        "line": 33,
        "fullcodeline": "if (rpkt.cnt > 0)"
    },
    {
        "line": 38,
        "fullcodeline": "if (pkt->cnt > 0) {"
    },
    {
        "line": 31,
        "fullcodeline": "printf(\"[%d bytes in incomplete send packet]\\n\","
    },
    {
        "line": 34,
        "fullcodeline": "printf(\"[%d bytes in incomplete recv packet]\\n\","
    },
    {
        "line": 39,
        "fullcodeline": "q = dir;"
    },
    {
        "line": 44,
        "fullcodeline": "nb = pkt->cnt;"
    },
    {
        "line": 45,
        "fullcodeline": "p = pkt->buf;"
    },
    {
        "line": 46,
        "fullcodeline": "pkt->cnt = 0;"
    },
    {
        "line": 47,
        "fullcodeline": "pkt->esc = 0;"
    },
    {
        "line": 55,
        "fullcodeline": "fcs = PPP_INITFCS;"
    },
    {
        "line": 58,
        "fullcodeline": "fcs &= 0xFFFF;"
    },
    {
        "line": 59,
        "fullcodeline": "nb -= 2;"
    },
    {
        "line": 60,
        "fullcodeline": "endp = p + nb;"
    },
    {
        "line": 61,
        "fullcodeline": "r = p;"
    },
    {
        "line": 66,
        "fullcodeline": "++r;"
    },
    {
        "line": 138,
        "fullcodeline": "pkt->esc = 1;"
    },
    {
        "line": 144,
        "fullcodeline": "c ^= 0x20;"
    },
    {
        "line": 145,
        "fullcodeline": "pkt->esc = 0;"
    },
    {
        "line": 48,
        "fullcodeline": "if (nb <= 2) {"
    },
    {
        "line": 56,
        "fullcodeline": "for (k = 0; k < nb; ++k)"
    },
    {
        "line": 57,
        "fullcodeline": "fcs = PPP_FCS(fcs, p[k]);"
    },
    {
        "line": 62,
        "fullcodeline": "if (r[0] == 0xff && r[1] == 3)"
    },
    {
        "line": 67,
        "fullcodeline": "if (endp - r > mru)"
    },
    {
        "line": 70,
        "fullcodeline": "if (decompress && fcs == PPP_GOODFCS) {"
    },
    {
        "line": 131,
        "fullcodeline": "} while (nb > 0);"
    },
    {
        "line": 132,
        "fullcodeline": "if (fcs != PPP_GOODFCS)"
    },
    {
        "line": 41,
        "fullcodeline": "printf(\"%s aborted packet:\\n     \", dir);"
    },
    {
        "line": 42,
        "fullcodeline": "q = \"    \";"
    },
    {
        "line": 49,
        "fullcodeline": "printf(\"%s short packet [%d bytes]:\", q, nb);"
    },
    {
        "line": 63,
        "fullcodeline": "r += 2;"
    },
    {
        "line": 64,
        "fullcodeline": "if ((r[0] & 1) == 0)"
    },
    {
        "line": 65,
        "fullcodeline": "++r;"
    },
    {
        "line": 68,
        "fullcodeline": "printf(\"     ERROR: length (%zd) > MRU (%d)\\n\","
    },
    {
        "line": 72,
        "fullcodeline": "d = dbuf;"
    },
    {
        "line": 73,
        "fullcodeline": "r = p;"
    },
    {
        "line": 78,
        "fullcodeline": "proto = r[0];"
    },
    {
        "line": 116,
        "fullcodeline": "nl = nb < 16? nb: 16;"
    },
    {
        "line": 128,
        "fullcodeline": "q = \"    \";"
    },
    {
        "line": 129,
        "fullcodeline": "p += nl;"
    },
    {
        "line": 130,
        "fullcodeline": "nb -= nl;"
    },
    {
        "line": 50,
        "fullcodeline": "for (k = 0; k < nb; ++k)"
    },
    {
        "line": 51,
        "fullcodeline": "printf(\" %.2x\", p[k]);"
    },
    {
        "line": 69,
        "fullcodeline": "endp - r, mru);"
    },
    {
        "line": 74,
        "fullcodeline": "if (r[0] == 0xff && r[1] == 3) {"
    },
    {
        "line": 81,
        "fullcodeline": "if (proto == PPP_CCP) {"
    },
    {
        "line": 118,
        "fullcodeline": "for (k = 0; k < nl; ++k)"
    },
    {
        "line": 119,
        "fullcodeline": "printf(\" %.2x\", p[k]);"
    },
    {
        "line": 120,
        "fullcodeline": "for (; k < 16; ++k)"
    },
    {
        "line": 123,
        "fullcodeline": "for (k = 0; k < nl; ++k) {"
    },
    {
        "line": 79,
        "fullcodeline": "if ((proto & 1) == 0)"
    },
    {
        "line": 80,
        "fullcodeline": "proto = (proto << 8) + r[1];"
    },
    {
        "line": 82,
        "fullcodeline": "handle_ccp(pkt, r + 2, endp - r - 2);"
    },
    {
        "line": 124,
        "fullcodeline": "c = p[k];"
    },
    {
        "line": 75,
        "fullcodeline": "*d++ = *r++;"
    },
    {
        "line": 76,
        "fullcodeline": "*d++ = *r++;"
    },
    {
        "line": 83,
        "fullcodeline": "} else if (proto == PPP_COMP) {"
    },
    {
        "line": 125,
        "fullcodeline": "putchar((' ' <= c && c <= '~')? c: '.');"
    },
    {
        "line": 84,
        "fullcodeline": "if ((pkt->flags & CCP_ISUP)"
    },
    {
        "line": 87,
        "fullcodeline": "&& (pkt->flags & CCP_ERR) == 0) {"
    },
    {
        "line": 110,
        "fullcodeline": "} else if (pkt->state"
    },
    {
        "line": 88,
        "fullcodeline": "rv = pkt->comp->decompress(pkt->state, r,"
    },
    {
        "line": 111,
        "fullcodeline": "&& (pkt->flags & CCP_DECOMP_RUN)) {"
    },
    {
        "line": 112,
        "fullcodeline": "pkt->comp->incomp(pkt->state, r, endp - r);"
    },
    {
        "line": 85,
        "fullcodeline": "&& (pkt->flags & CCP_DECOMP_RUN)"
    },
    {
        "line": 89,
        "fullcodeline": "endp - r, d, &dn);"
    },
    {
        "line": 92,
        "fullcodeline": "p = dbuf;"
    },
    {
        "line": 93,
        "fullcodeline": "nb = d + dn - p;"
    },
    {
        "line": 96,
        "fullcodeline": "--dn;"
    },
    {
        "line": 102,
        "fullcodeline": "pkt->flags |= CCP_ERROR;"
    },
    {
        "line": 106,
        "fullcodeline": "pkt->flags |= CCP_FATALERROR;"
    },
    {
        "line": 97,
        "fullcodeline": "if (dn > mru)"
    },
    {
        "line": 94,
        "fullcodeline": "if ((d[0] & 1) == 0)"
    },
    {
        "line": 95,
        "fullcodeline": "--dn;"
    },
    {
        "line": 98,
        "fullcodeline": "printf(\"     ERROR: decompressed length (%d) > MRU (%d)\\n\", dn, mru);"
    }
]