[
    {
        "line": 8,
        "fullcodeline": "deepin_reader::Document *document = nullptr;"
    },
    {
        "line": 10,
        "fullcodeline": "qDebug() << \"\u9700\u8981\u8f6c\u6362\u7684\u6587\u6863: \" << filePath;"
    },
    {
        "line": 11,
        "fullcodeline": "if (Dr::PDF == fileType) {"
    },
    {
        "line": 12,
        "fullcodeline": "qDebug() << \"\u5f53\u524d\u6587\u6863\u7c7b\u578b\u4e3a: PDF\";"
    },
    {
        "line": 13,
        "fullcodeline": "document = deepin_reader::PDFDocument::loadDocument(filePath, password, error);"
    },
    {
        "line": 14,
        "fullcodeline": "} else if (Dr::DJVU == fileType) {"
    },
    {
        "line": 15,
        "fullcodeline": "qDebug() << \"\u5f53\u524d\u6587\u6863\u7c7b\u578b\u4e3a: DJVU\";"
    },
    {
        "line": 16,
        "fullcodeline": "document = deepin_reader::DjVuDocument::loadDocument(filePath, error);"
    },
    {
        "line": 17,
        "fullcodeline": "} else if (Dr::DOCX == fileType) {"
    },
    {
        "line": 18,
        "fullcodeline": "qDebug() << \"\u5f53\u524d\u6587\u6863\u7c7b\u578b\u4e3a: DOCX\";"
    },
    {
        "line": 23,
        "fullcodeline": "QString targetDoc = convertedFileDir + \"/temp.docx\";"
    },
    {
        "line": 24,
        "fullcodeline": "QString tmpHtmlFilePath = convertedFileDir + \"/word/temp.html\";"
    },
    {
        "line": 25,
        "fullcodeline": "QString realFilePath = convertedFileDir + \"/temp.pdf\";"
    },
    {
        "line": 27,
        "fullcodeline": "QFile file(filePath);"
    },
    {
        "line": 36,
        "fullcodeline": "*pprocess = &decompressor;"
    },
    {
        "line": 37,
        "fullcodeline": "decompressor.setWorkingDirectory(convertedFileDir);"
    },
    {
        "line": 38,
        "fullcodeline": "qDebug() << \"\u6b63\u5728\u89e3\u538b\u6587\u6863...\" << targetDoc;"
    },
    {
        "line": 39,
        "fullcodeline": "QString unzipCommand = \"unzip \" + targetDoc;"
    },
    {
        "line": 40,
        "fullcodeline": "qDebug() << \"\u6267\u884c\u547d\u4ee4: \" << unzipCommand;"
    },
    {
        "line": 41,
        "fullcodeline": "decompressor.start(unzipCommand);"
    },
    {
        "line": 62,
        "fullcodeline": "qDebug() << \"\u6587\u6863\u89e3\u538b\u5b8c\u6210\";"
    },
    {
        "line": 63,
        "fullcodeline": "QTemporaryFile tmpFile(convertedFileDir + \"/word/\" + QCoreApplication::applicationName() + \"_XXXXXX.html\");"
    },
    {
        "line": 69,
        "fullcodeline": "*pprocess = &converter;"
    },
    {
        "line": 70,
        "fullcodeline": "converter.setWorkingDirectory(convertedFileDir + \"/word\");"
    },
    {
        "line": 71,
        "fullcodeline": "qDebug() << \"\u6b63\u5728\u5c06docx\u6587\u6863\u8f6c\u6362\u6210html...\" << tmpHtmlFilePath;"
    },
    {
        "line": 72,
        "fullcodeline": "QString pandocCommand = \"pandoc \" +  targetDoc + \" -o \" + tmpHtmlFilePath;"
    },
    {
        "line": 73,
        "fullcodeline": "qDebug() << \"\u6267\u884c\u547d\u4ee4: \" << pandocCommand;"
    },
    {
        "line": 74,
        "fullcodeline": "converter.start(pandocCommand);"
    },
    {
        "line": 87,
        "fullcodeline": "QFile tmpHtmlFile(tmpHtmlFilePath);"
    },
    {
        "line": 97,
        "fullcodeline": "qDebug() << \"docx\u8f6chtml\u5b8c\u6210\";"
    },
    {
        "line": 101,
        "fullcodeline": "*pprocess = &converter2;"
    },
    {
        "line": 102,
        "fullcodeline": "converter2.setWorkingDirectory(convertedFileDir + \"/word\");"
    },
    {
        "line": 103,
        "fullcodeline": "qDebug() << \"\u6b63\u5728\u5c06html\u8f6c\u6362\u6210pdf...\" << realFilePath;"
    },
    {
        "line": 104,
        "fullcodeline": "QString htmltopdfCommand = \"/usr/lib/deepin-reader/htmltopdf \" +  tmpHtmlFilePath + \" \" + realFilePath;"
    },
    {
        "line": 105,
        "fullcodeline": "qDebug() << \"\u6267\u884c\u547d\u4ee4: \" << htmltopdfCommand;"
    },
    {
        "line": 106,
        "fullcodeline": "converter2.start(htmltopdfCommand);"
    },
    {
        "line": 120,
        "fullcodeline": "QFile realFile(realFilePath);"
    },
    {
        "line": 129,
        "fullcodeline": "qDebug() << \"html\u8f6cpdf\u5b8c\u6210\";"
    },
    {
        "line": 131,
        "fullcodeline": "*pprocess = nullptr;"
    },
    {
        "line": 132,
        "fullcodeline": "document = deepin_reader::PDFDocument::loadDocument(realFilePath, password, error);"
    },
    {
        "line": 19,
        "fullcodeline": "if (nullptr == pprocess) {"
    },
    {
        "line": 28,
        "fullcodeline": "if (!file.copy(targetDoc)) {"
    },
    {
        "line": 42,
        "fullcodeline": "if (!decompressor.waitForStarted()) {"
    },
    {
        "line": 48,
        "fullcodeline": "if (!decompressor.waitForFinished()) {"
    },
    {
        "line": 54,
        "fullcodeline": "if (!QDir(convertedFileDir + \"/word\").exists()) {"
    },
    {
        "line": 64,
        "fullcodeline": "if( tmpFile.open()) { //fix 232871"
    },
    {
        "line": 75,
        "fullcodeline": "if (!converter.waitForStarted()) {"
    },
    {
        "line": 81,
        "fullcodeline": "if (!converter.waitForFinished()) {"
    },
    {
        "line": 88,
        "fullcodeline": "if (!tmpHtmlFile.exists()) {"
    },
    {
        "line": 107,
        "fullcodeline": "if (!converter2.waitForStarted()) {"
    },
    {
        "line": 113,
        "fullcodeline": "if (!converter2.waitForFinished()) {"
    },
    {
        "line": 121,
        "fullcodeline": "if (!realFile.exists()) {"
    },
    {
        "line": 29,
        "fullcodeline": "qInfo() << QString(\"copy %1 failed.\").arg(filePath);"
    },
    {
        "line": 43,
        "fullcodeline": "qInfo() << \"start unzip failed\";"
    },
    {
        "line": 45,
        "fullcodeline": "*pprocess = nullptr;"
    },
    {
        "line": 49,
        "fullcodeline": "qInfo() << \"unzip failed\";"
    },
    {
        "line": 51,
        "fullcodeline": "*pprocess = nullptr;"
    },
    {
        "line": 55,
        "fullcodeline": "qInfo() << \"unzip failed! \" << (convertedFileDir + \"/word\") << \"is not exists!\";"
    },
    {
        "line": 65,
        "fullcodeline": "tmpHtmlFilePath = tmpFile.fileName(); // returns the unique file name"
    },
    {
        "line": 76,
        "fullcodeline": "qInfo() << \"start pandoc failed\";"
    },
    {
        "line": 78,
        "fullcodeline": "*pprocess = nullptr;"
    },
    {
        "line": 82,
        "fullcodeline": "qInfo() << \"pandoc failed\";"
    },
    {
        "line": 84,
        "fullcodeline": "*pprocess = nullptr;"
    },
    {
        "line": 89,
        "fullcodeline": "qInfo() <<  \"pandoc failed! \" << tmpHtmlFilePath << \" doesn't exist\";"
    },
    {
        "line": 108,
        "fullcodeline": "qInfo() << \"start htmltopdf failed\";"
    },
    {
        "line": 110,
        "fullcodeline": "*pprocess = nullptr;"
    },
    {
        "line": 114,
        "fullcodeline": "qInfo() << \"htmltopdf failed\";"
    },
    {
        "line": 116,
        "fullcodeline": "*pprocess = nullptr;"
    },
    {
        "line": 122,
        "fullcodeline": "qInfo() <<  \"htmltopdf failed! \" << realFilePath << \" doesn't exist\";"
    },
    {
        "line": 57,
        "fullcodeline": "if (!(QProcess::CrashExit == decompressor.exitStatus() && 9 == decompressor.exitCode())) {"
    },
    {
        "line": 92,
        "fullcodeline": "if (!(QProcess::CrashExit == converter.exitStatus() && 9 == converter.exitCode())) {"
    },
    {
        "line": 124,
        "fullcodeline": "if (!(QProcess::CrashExit == converter.exitStatus() && 9 == converter.exitCode())) {"
    },
    {
        "line": 58,
        "fullcodeline": "*pprocess = nullptr;"
    },
    {
        "line": 93,
        "fullcodeline": "*pprocess = nullptr;"
    },
    {
        "line": 125,
        "fullcodeline": "*pprocess = nullptr;"
    }
]