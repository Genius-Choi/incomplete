[
    {
        "line": 13,
        "fullcodeline": "memory_length    = qp->d_memory_end - qp->d_memory;"
    },
    {
        "line": 15,
        "fullcodeline": "q_length ="
    },
    {
        "line": 21,
        "fullcodeline": "available_length = memory_length - q_length - 1;"
    },
    {
        "line": 71,
        "fullcodeline": "begin_length = qp->d_read - qp->d_memory;   /* begin of the buffer      */"
    },
    {
        "line": 73,
        "fullcodeline": "n_begin = extra_length <= begin_length ?    /* determine # to write at  */"
    },
    {
        "line": 78,
        "fullcodeline": "memcpy                                      /* write trailing part of   */"
    },
    {
        "line": 10,
        "fullcodeline": "if (!extra_length)"
    },
    {
        "line": 16,
        "fullcodeline": "qp->d_read <= qp->d_write ?"
    },
    {
        "line": 25,
        "fullcodeline": "if (message_show(MSG_INFO))"
    },
    {
        "line": 28,
        "fullcodeline": "if (extra_length > available_length)"
    },
    {
        "line": 80,
        "fullcodeline": "qp->d_read -= n_begin,"
    },
    {
        "line": 81,
        "fullcodeline": "info + extra_length - n_begin,"
    },
    {
        "line": 85,
        "fullcodeline": "if (extra_length > begin_length)            /* not yet all chars written*/"
    },
    {
        "line": 17,
        "fullcodeline": "(size_t)(qp->d_write - qp->d_read)"
    },
    {
        "line": 19,
        "fullcodeline": "memory_length - (qp->d_read - qp->d_write);"
    },
    {
        "line": 26,
        "fullcodeline": "message(\"push_front %u bytes in `%s'\", (unsigned)extra_length, info);"
    },
    {
        "line": 31,
        "fullcodeline": "memory_length += extra_length - available_length + BLOCK_QUEUE;"
    },
    {
        "line": 32,
        "fullcodeline": "cp = new_memory(memory_length, sizeof(char));"
    },
    {
        "line": 54,
        "fullcodeline": "free(qp->d_memory);                         /* free old memory      */"
    },
    {
        "line": 55,
        "fullcodeline": "qp->d_memory_end = cp + memory_length;      /* update d_memory_end  */"
    },
    {
        "line": 56,
        "fullcodeline": "qp->d_memory = cp;                          /* update d_memory      */"
    },
    {
        "line": 90,
        "fullcodeline": "extra_length -= begin_length;           /* reduce # to write        */"
    },
    {
        "line": 93,
        "fullcodeline": "memcpy                                  /* d_read wraps to the end  */"
    },
    {
        "line": 34,
        "fullcodeline": "if (message_show(MSG_INFO))"
    },
    {
        "line": 37,
        "fullcodeline": "if (qp->d_read > qp->d_write)               /* q wraps around end   */"
    },
    {
        "line": 95,
        "fullcodeline": "qp->d_read = qp->d_memory_end - extra_length,"
    },
    {
        "line": 35,
        "fullcodeline": "message(\"Reallocating queue at %p to %p\", qp->d_memory, cp);"
    },
    {
        "line": 39,
        "fullcodeline": "size_t tail_len = qp->d_memory_end - qp->d_read;"
    },
    {
        "line": 40,
        "fullcodeline": "memcpy(cp, qp->d_read, tail_len);       /* first part -> begin  */"
    },
    {
        "line": 42,
        "fullcodeline": "memcpy(cp + tail_len, qp->d_memory,"
    },
    {
        "line": 44,
        "fullcodeline": "qp->d_write = cp + q_length;"
    },
    {
        "line": 45,
        "fullcodeline": "qp->d_read = cp;"
    },
    {
        "line": 43,
        "fullcodeline": "(size_t)(qp->d_write - qp->d_memory));"
    },
    {
        "line": 49,
        "fullcodeline": "memcpy(cp, qp->d_memory, memory_length);/* cp existing buffer   */"
    },
    {
        "line": 50,
        "fullcodeline": "qp->d_read = cp + (qp->d_read - qp->d_memory);"
    },
    {
        "line": 51,
        "fullcodeline": "qp->d_write = cp + (qp->d_write - qp->d_memory);"
    }
]