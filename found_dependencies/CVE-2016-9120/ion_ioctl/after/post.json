[
    {
        "line": 3,
        "fullcodeline": "struct ion_client *client = filp->private_data;"
    },
    {
        "line": 4,
        "fullcodeline": "struct ion_device *dev = client->dev;"
    },
    {
        "line": 5,
        "fullcodeline": "struct ion_handle *cleanup_handle = NULL;"
    },
    {
        "line": 6,
        "fullcodeline": "int ret = 0;"
    },
    {
        "line": 16,
        "fullcodeline": "dir = ion_ioctl_dir(cmd);"
    },
    {
        "line": 18,
        "fullcodeline": "if (_IOC_SIZE(cmd) > sizeof(data))"
    },
    {
        "line": 21,
        "fullcodeline": "if (dir & _IOC_WRITE)"
    },
    {
        "line": 99,
        "fullcodeline": "if (dir & _IOC_READ) {"
    },
    {
        "line": 19,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 30,
        "fullcodeline": "handle = ion_alloc(client, data.allocation.len,"
    },
    {
        "line": 37,
        "fullcodeline": "data.allocation.handle = handle->id;"
    },
    {
        "line": 39,
        "fullcodeline": "cleanup_handle = handle;"
    },
    {
        "line": 46,
        "fullcodeline": "mutex_lock(&client->lock);"
    },
    {
        "line": 47,
        "fullcodeline": "handle = ion_handle_get_by_id_nolock(client, data.handle.handle);"
    },
    {
        "line": 52,
        "fullcodeline": "ion_free_nolock(client, handle);"
    },
    {
        "line": 53,
        "fullcodeline": "ion_handle_put_nolock(handle);"
    },
    {
        "line": 54,
        "fullcodeline": "mutex_unlock(&client->lock);"
    },
    {
        "line": 62,
        "fullcodeline": "handle = ion_handle_get_by_id(client, data.handle.handle);"
    },
    {
        "line": 65,
        "fullcodeline": "data.fd.fd = ion_share_dma_buf_fd(client, handle);"
    },
    {
        "line": 66,
        "fullcodeline": "ion_handle_put(handle);"
    },
    {
        "line": 75,
        "fullcodeline": "handle = ion_import_dma_buf_fd(client, data.fd.fd);"
    },
    {
        "line": 84,
        "fullcodeline": "ret = ion_sync_for_device(client, data.fd.fd);"
    },
    {
        "line": 91,
        "fullcodeline": "ret = dev->custom_ioctl(client, data.custom.cmd,"
    },
    {
        "line": 96,
        "fullcodeline": "return -ENOTTY;"
    },
    {
        "line": 34,
        "fullcodeline": "if (IS_ERR(handle))"
    },
    {
        "line": 48,
        "fullcodeline": "if (IS_ERR(handle)) {"
    },
    {
        "line": 63,
        "fullcodeline": "if (IS_ERR(handle))"
    },
    {
        "line": 67,
        "fullcodeline": "if (data.fd.fd < 0)"
    },
    {
        "line": 76,
        "fullcodeline": "if (IS_ERR(handle))"
    },
    {
        "line": 89,
        "fullcodeline": "if (!dev->custom_ioctl)"
    },
    {
        "line": 23,
        "fullcodeline": "return -EFAULT;"
    },
    {
        "line": 49,
        "fullcodeline": "mutex_unlock(&client->lock);"
    },
    {
        "line": 68,
        "fullcodeline": "ret = data.fd.fd;"
    },
    {
        "line": 77,
        "fullcodeline": "ret = PTR_ERR(handle);"
    },
    {
        "line": 103,
        "fullcodeline": "return -EFAULT;"
    },
    {
        "line": 35,
        "fullcodeline": "return PTR_ERR(handle);"
    },
    {
        "line": 50,
        "fullcodeline": "return PTR_ERR(handle);"
    },
    {
        "line": 64,
        "fullcodeline": "return PTR_ERR(handle);"
    },
    {
        "line": 79,
        "fullcodeline": "data.handle.handle = handle->id;"
    },
    {
        "line": 90,
        "fullcodeline": "return -ENOTTY;"
    },
    {
        "line": 102,
        "fullcodeline": "ion_free(client, cleanup_handle);"
    }
]