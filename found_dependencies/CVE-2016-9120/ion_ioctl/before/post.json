[
    {
        "line": 3,
        "fullcodeline": "struct ion_client *client = filp->private_data;"
    },
    {
        "line": 4,
        "fullcodeline": "struct ion_device *dev = client->dev;"
    },
    {
        "line": 5,
        "fullcodeline": "struct ion_handle *cleanup_handle = NULL;"
    },
    {
        "line": 6,
        "fullcodeline": "int ret = 0;"
    },
    {
        "line": 16,
        "fullcodeline": "dir = ion_ioctl_dir(cmd);"
    },
    {
        "line": 18,
        "fullcodeline": "if (_IOC_SIZE(cmd) > sizeof(data))"
    },
    {
        "line": 21,
        "fullcodeline": "if (dir & _IOC_WRITE)"
    },
    {
        "line": 95,
        "fullcodeline": "if (dir & _IOC_READ) {"
    },
    {
        "line": 19,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 30,
        "fullcodeline": "handle = ion_alloc(client, data.allocation.len,"
    },
    {
        "line": 37,
        "fullcodeline": "data.allocation.handle = handle->id;"
    },
    {
        "line": 39,
        "fullcodeline": "cleanup_handle = handle;"
    },
    {
        "line": 46,
        "fullcodeline": "handle = ion_handle_get_by_id(client, data.handle.handle);"
    },
    {
        "line": 49,
        "fullcodeline": "ion_free(client, handle);"
    },
    {
        "line": 50,
        "fullcodeline": "ion_handle_put(handle);"
    },
    {
        "line": 58,
        "fullcodeline": "handle = ion_handle_get_by_id(client, data.handle.handle);"
    },
    {
        "line": 61,
        "fullcodeline": "data.fd.fd = ion_share_dma_buf_fd(client, handle);"
    },
    {
        "line": 62,
        "fullcodeline": "ion_handle_put(handle);"
    },
    {
        "line": 71,
        "fullcodeline": "handle = ion_import_dma_buf_fd(client, data.fd.fd);"
    },
    {
        "line": 80,
        "fullcodeline": "ret = ion_sync_for_device(client, data.fd.fd);"
    },
    {
        "line": 87,
        "fullcodeline": "ret = dev->custom_ioctl(client, data.custom.cmd,"
    },
    {
        "line": 92,
        "fullcodeline": "return -ENOTTY;"
    },
    {
        "line": 34,
        "fullcodeline": "if (IS_ERR(handle))"
    },
    {
        "line": 47,
        "fullcodeline": "if (IS_ERR(handle))"
    },
    {
        "line": 59,
        "fullcodeline": "if (IS_ERR(handle))"
    },
    {
        "line": 63,
        "fullcodeline": "if (data.fd.fd < 0)"
    },
    {
        "line": 72,
        "fullcodeline": "if (IS_ERR(handle))"
    },
    {
        "line": 85,
        "fullcodeline": "if (!dev->custom_ioctl)"
    },
    {
        "line": 23,
        "fullcodeline": "return -EFAULT;"
    },
    {
        "line": 64,
        "fullcodeline": "ret = data.fd.fd;"
    },
    {
        "line": 73,
        "fullcodeline": "ret = PTR_ERR(handle);"
    },
    {
        "line": 99,
        "fullcodeline": "return -EFAULT;"
    },
    {
        "line": 35,
        "fullcodeline": "return PTR_ERR(handle);"
    },
    {
        "line": 48,
        "fullcodeline": "return PTR_ERR(handle);"
    },
    {
        "line": 60,
        "fullcodeline": "return PTR_ERR(handle);"
    },
    {
        "line": 75,
        "fullcodeline": "data.handle.handle = handle->id;"
    },
    {
        "line": 86,
        "fullcodeline": "return -ENOTTY;"
    },
    {
        "line": 98,
        "fullcodeline": "ion_free(client, cleanup_handle);"
    }
]