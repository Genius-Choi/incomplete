[
    {
        "line": 6,
        "fullcodeline": "struct ion_device *dev = client->dev;"
    },
    {
        "line": 7,
        "fullcodeline": "struct ion_buffer *buffer = NULL;"
    },
    {
        "line": 11,
        "fullcodeline": "pr_debug(\"%s: len %zu align %zu heap_id_mask %u flags %x\\n\", __func__,"
    },
    {
        "line": 19,
        "fullcodeline": "len = PAGE_ALIGN(len);"
    },
    {
        "line": 24,
        "fullcodeline": "down_read(&dev->lock);"
    },
    {
        "line": 25,
        "fullcodeline": "plist_for_each_entry(heap, &dev->heaps, node) {"
    },
    {
        "line": 33,
        "fullcodeline": "up_read(&dev->lock);"
    },
    {
        "line": 41,
        "fullcodeline": "handle = ion_handle_create(client, buffer);"
    },
    {
        "line": 47,
        "fullcodeline": "ion_buffer_put(buffer);"
    },
    {
        "line": 52,
        "fullcodeline": "mutex_lock(&client->lock);"
    },
    {
        "line": 53,
        "fullcodeline": "ret = ion_handle_add(client, handle);"
    },
    {
        "line": 54,
        "fullcodeline": "mutex_unlock(&client->lock);"
    },
    {
        "line": 21,
        "fullcodeline": "if (!len)"
    },
    {
        "line": 29,
        "fullcodeline": "buffer = ion_buffer_create(heap, dev, len, align, flags);"
    },
    {
        "line": 35,
        "fullcodeline": "if (buffer == NULL)"
    },
    {
        "line": 38,
        "fullcodeline": "if (IS_ERR(buffer))"
    },
    {
        "line": 49,
        "fullcodeline": "if (IS_ERR(handle))"
    },
    {
        "line": 27,
        "fullcodeline": "if (!((1 << heap->id) & heap_id_mask))"
    },
    {
        "line": 30,
        "fullcodeline": "if (!IS_ERR(buffer))"
    },
    {
        "line": 56,
        "fullcodeline": "ion_handle_put(handle);"
    },
    {
        "line": 57,
        "fullcodeline": "handle = ERR_PTR(ret);"
    },
    {
        "line": 22,
        "fullcodeline": "return ERR_PTR(-EINVAL);"
    },
    {
        "line": 36,
        "fullcodeline": "return ERR_PTR(-ENODEV);"
    },
    {
        "line": 39,
        "fullcodeline": "return ERR_CAST(buffer);"
    }
]