[
    {
        "line": 5,
        "fullcodeline": "bool isArray = varVariant.isArray();"
    },
    {
        "line": 6,
        "fullcodeline": "bool isObject = varVariant.isObject();"
    },
    {
        "line": 80,
        "fullcodeline": "String varType = getDataTypeString(varVariant.getType());"
    },
    {
        "line": 8,
        "fullcodeline": "if (isArray || isObject) {"
    },
    {
        "line": 21,
        "fullcodeline": "assert(!ptr.isNull());"
    },
    {
        "line": 34,
        "fullcodeline": "int length = varAsArray.length();"
    },
    {
        "line": 81,
        "fullcodeline": "if (!getWddxEncoded(varType, \"\", varName, false).empty()) {"
    },
    {
        "line": 22,
        "fullcodeline": "if (!seen.emplace(ptr).second) {"
    },
    {
        "line": 35,
        "fullcodeline": "if (length > 0) {"
    },
    {
        "line": 91,
        "fullcodeline": "getWddxEncoded(varType, varValue, varName, hasVarTag));"
    },
    {
        "line": 13,
        "fullcodeline": "varAsArray = varVariant.toArray();"
    },
    {
        "line": 14,
        "fullcodeline": "ptr = varAsArray.get();"
    },
    {
        "line": 17,
        "fullcodeline": "varAsObject = varVariant.toObject();"
    },
    {
        "line": 18,
        "fullcodeline": "varAsArray = varAsObject.toArray();"
    },
    {
        "line": 19,
        "fullcodeline": "ptr = varAsObject.get();"
    },
    {
        "line": 23,
        "fullcodeline": "raise_warning(\"recursion detected\");"
    },
    {
        "line": 29,
        "fullcodeline": "m_packetString.append(\"<var name='\");"
    },
    {
        "line": 30,
        "fullcodeline": "m_packetString.append(varName.data());"
    },
    {
        "line": 31,
        "fullcodeline": "m_packetString.append(\"'>\");"
    },
    {
        "line": 36,
        "fullcodeline": "ArrayIter it = ArrayIter(varAsArray);"
    },
    {
        "line": 83,
        "fullcodeline": "if (varType.compare(\"boolean\") == 0) {"
    },
    {
        "line": 84,
        "fullcodeline": "varValue = varVariant.toBoolean() ? \"true\" : \"false\";"
    },
    {
        "line": 50,
        "fullcodeline": "for (ArrayIter it(varAsArray); it; ++it) {"
    },
    {
        "line": 86,
        "fullcodeline": "varValue = StringUtil::HtmlEncode(varVariant.toString(),"
    },
    {
        "line": 37,
        "fullcodeline": "if (it.first().isString()) isObject = true;"
    },
    {
        "line": 39,
        "fullcodeline": "m_packetString.append(\"<struct>\");"
    },
    {
        "line": 51,
        "fullcodeline": "auto key = it.first();"
    },
    {
        "line": 52,
        "fullcodeline": "auto const& value = it.secondRef();"
    },
    {
        "line": 56,
        "fullcodeline": "m_packetString.append(\"</struct>\");"
    },
    {
        "line": 46,
        "fullcodeline": "m_packetString.append(\"<array length='\");"
    },
    {
        "line": 47,
        "fullcodeline": "m_packetString.append(std::to_string(length));"
    },
    {
        "line": 48,
        "fullcodeline": "m_packetString.append(\"'>\");"
    },
    {
        "line": 53,
        "fullcodeline": "recursiveAddVarImpl(key.toString(), value, isObject, seen);"
    },
    {
        "line": 59,
        "fullcodeline": "m_packetString.append(\"</array>\");"
    },
    {
        "line": 65,
        "fullcodeline": "m_packetString.append(\"<struct>\");"
    },
    {
        "line": 71,
        "fullcodeline": "m_packetString.append(\"</struct>\");"
    },
    {
        "line": 41,
        "fullcodeline": "m_packetString.append(\"<var name='php_class_name'><string>\");"
    },
    {
        "line": 42,
        "fullcodeline": "m_packetString.append(varAsObject->getClassName());"
    },
    {
        "line": 43,
        "fullcodeline": "m_packetString.append(\"</string></var>\");"
    },
    {
        "line": 67,
        "fullcodeline": "m_packetString.append(\"<var name='php_class_name'><string>\");"
    },
    {
        "line": 68,
        "fullcodeline": "m_packetString.append(varAsObject->getClassName());"
    },
    {
        "line": 69,
        "fullcodeline": "m_packetString.append(\"</string></var>\");"
    }
]