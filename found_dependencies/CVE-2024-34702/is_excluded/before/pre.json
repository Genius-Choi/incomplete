[
    {
        "line": 6,
        "fullcodeline": "const auto& alt_name = cert.subject_alt_name();"
    },
    {
        "line": 2,
        "fullcodeline": "if(excluded().empty()) {"
    },
    {
        "line": 74,
        "fullcodeline": "if(is_excluded_dn(cert.subject_dn())) {"
    },
    {
        "line": 96,
        "fullcodeline": "if(alt_name.count() == 0) {"
    },
    {
        "line": 79,
        "fullcodeline": "if(is_excluded_dn(alt_dn)) {"
    },
    {
        "line": 85,
        "fullcodeline": "if(is_excluded_dns_name(alt_dns)) {"
    },
    {
        "line": 91,
        "fullcodeline": "if(is_excluded_ipv4(alt_ipv4)) {"
    },
    {
        "line": 11,
        "fullcodeline": "if(m_excluded_name_types.contains(GeneralName::NameType::Other) && !alt_name.other_names().empty()) {"
    },
    {
        "line": 14,
        "fullcodeline": "if(m_excluded_name_types.contains(GeneralName::NameType::URI) && !alt_name.uris().empty()) {"
    },
    {
        "line": 17,
        "fullcodeline": "if(m_excluded_name_types.contains(GeneralName::NameType::RFC822) && !alt_name.email().empty()) {"
    },
    {
        "line": 98,
        "fullcodeline": "if(cn.find(\".\") != std::string::npos) {"
    },
    {
        "line": 99,
        "fullcodeline": "if(auto ipv4 = string_to_ipv4(cn)) {"
    },
    {
        "line": 100,
        "fullcodeline": "if(is_excluded_ipv4(ipv4.value())) {"
    },
    {
        "line": 104,
        "fullcodeline": "if(is_excluded_dns_name(cn)) {"
    }
]