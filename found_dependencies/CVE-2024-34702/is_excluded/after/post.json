[
    {
        "line": 6,
        "fullcodeline": "const auto& alt_name = cert.subject_alt_name();"
    },
    {
        "line": 17,
        "fullcodeline": "auto is_excluded_dn = [&](const X509_DN& dn) {"
    },
    {
        "line": 37,
        "fullcodeline": "auto is_excluded_dns_name = [&](const std::string& name) {"
    },
    {
        "line": 57,
        "fullcodeline": "auto is_excluded_ipv4 = [&](const std::string& ipv4) {"
    },
    {
        "line": 2,
        "fullcodeline": "if(excluded().empty()) {"
    },
    {
        "line": 73,
        "fullcodeline": "if(is_excluded_dn(cert.subject_dn())) {"
    },
    {
        "line": 77,
        "fullcodeline": "if(is_excluded_dn(alt_name.dn())) {"
    },
    {
        "line": 93,
        "fullcodeline": "if(!alt_name.has_items())"
    },
    {
        "line": 9,
        "fullcodeline": "if(m_excluded_name_types.find(\"URI\") != m_excluded_name_types.end() && !alt_name.get_attribute(\"URI\").empty()) {"
    },
    {
        "line": 12,
        "fullcodeline": "if(m_excluded_name_types.find(\"RFC822\") != m_excluded_name_types.end() && !alt_name.get_attribute(\"RFC822\").empty()) {"
    },
    {
        "line": 82,
        "fullcodeline": "if(is_excluded_dns_name(alt_dns)) {"
    },
    {
        "line": 88,
        "fullcodeline": "if(is_excluded_ipv4(alt_ipv4)) {"
    },
    {
        "line": 97,
        "fullcodeline": "if(cn.find(\".\") != std::string::npos)"
    },
    {
        "line": 99,
        "fullcodeline": "if(looks_like_ipv4(cn))"
    },
    {
        "line": 101,
        "fullcodeline": "if(is_excluded_ipv4(cn))"
    },
    {
        "line": 108,
        "fullcodeline": "if(is_excluded_dns_name(cn))"
    }
]