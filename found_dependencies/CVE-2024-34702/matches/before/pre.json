[
    {
        "line": 2,
        "fullcodeline": "std::vector<std::string> nam;"
    },
    {
        "line": 5,
        "fullcodeline": "const X509_DN& dn = cert.subject_dn();"
    },
    {
        "line": 6,
        "fullcodeline": "const AlternativeName& alt_name = cert.subject_alt_name();"
    },
    {
        "line": 36,
        "fullcodeline": "bool some = false;"
    },
    {
        "line": 37,
        "fullcodeline": "bool all = true;"
    },
    {
        "line": 8,
        "fullcodeline": "if(type() == \"DNS\") {"
    },
    {
        "line": 11,
        "fullcodeline": "nam = alt_name.get_attribute(\"DNS\");"
    },
    {
        "line": 40,
        "fullcodeline": "bool m = match_fn(this, n);"
    },
    {
        "line": 9,
        "fullcodeline": "match_fn = std::mem_fn(&GeneralName::matches_dns);"
    },
    {
        "line": 13,
        "fullcodeline": "if(nam.empty()) {"
    },
    {
        "line": 14,
        "fullcodeline": "nam = dn.get_attribute(\"CN\");"
    },
    {
        "line": 16,
        "fullcodeline": "} else if(type() == \"DN\") {"
    },
    {
        "line": 19,
        "fullcodeline": "nam.push_back(dn.to_string());"
    },
    {
        "line": 21,
        "fullcodeline": "const auto alt_dn = alt_name.dn();"
    },
    {
        "line": 17,
        "fullcodeline": "match_fn = std::mem_fn(&GeneralName::matches_dn);"
    },
    {
        "line": 22,
        "fullcodeline": "if(!alt_dn.empty()) {"
    },
    {
        "line": 23,
        "fullcodeline": "nam.push_back(alt_dn.to_string());"
    },
    {
        "line": 25,
        "fullcodeline": "} else if(type() == \"IP\") {"
    },
    {
        "line": 27,
        "fullcodeline": "nam = alt_name.get_attribute(\"IP\");"
    },
    {
        "line": 26,
        "fullcodeline": "match_fn = std::mem_fn(&GeneralName::matches_ip);"
    }
]