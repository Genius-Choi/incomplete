[
    {
        "line": 30,
        "fullcodeline": "const X509_DN& dn = cert.subject_dn();"
    },
    {
        "line": 31,
        "fullcodeline": "const AlternativeName& alt_name = cert.subject_alt_name();"
    },
    {
        "line": 35,
        "fullcodeline": "if(m_type == NameType::DNS) {"
    },
    {
        "line": 69,
        "fullcodeline": "return score.result();"
    },
    {
        "line": 36,
        "fullcodeline": "const auto& constraint = std::get<1>(m_names);"
    },
    {
        "line": 38,
        "fullcodeline": "const auto& alt_names = alt_name.dns();"
    },
    {
        "line": 41,
        "fullcodeline": "score.add(matches_dns(dns, constraint));"
    },
    {
        "line": 50,
        "fullcodeline": "} else if(m_type == NameType::DN) {"
    },
    {
        "line": 51,
        "fullcodeline": "const X509_DN& constraint = std::get<3>(m_names);"
    },
    {
        "line": 52,
        "fullcodeline": "score.add(matches_dn(dn, constraint));"
    },
    {
        "line": 47,
        "fullcodeline": "score.add(matches_dns(cn, constraint));"
    },
    {
        "line": 55,
        "fullcodeline": "score.add(matches_dn(alt_dn, constraint));"
    },
    {
        "line": 57,
        "fullcodeline": "} else if(m_type == NameType::IPv4) {"
    },
    {
        "line": 61,
        "fullcodeline": "bool match = (ipv4 & mask) == net;"
    },
    {
        "line": 62,
        "fullcodeline": "score.add(match);"
    }
]