[
    {
        "line": 2,
        "fullcodeline": "auto data = std::make_unique<PKCS10_Data>();"
    },
    {
        "line": 4,
        "fullcodeline": "BER_Decoder cert_req_info(body);"
    },
    {
        "line": 7,
        "fullcodeline": "cert_req_info.decode(version);"
    },
    {
        "line": 12,
        "fullcodeline": "cert_req_info.decode(data->m_subject_dn);"
    },
    {
        "line": 14,
        "fullcodeline": "BER_Object public_key = cert_req_info.get_next_object();"
    },
    {
        "line": 19,
        "fullcodeline": "data->m_public_key_bits = ASN1::put_in_sequence(public_key.bits(), public_key.length());"
    },
    {
        "line": 21,
        "fullcodeline": "BER_Object attr_bits = cert_req_info.get_next_object();"
    },
    {
        "line": 23,
        "fullcodeline": "std::set<std::string> pkcs9_email;"
    },
    {
        "line": 8,
        "fullcodeline": "if(version != 0) {"
    },
    {
        "line": 25,
        "fullcodeline": "if(attr_bits.is_a(0, ASN1_Class::Constructed | ASN1_Class::ContextSpecific)) {"
    },
    {
        "line": 15,
        "fullcodeline": "if(public_key.is_a(ASN1_Type::Sequence, ASN1_Class::Constructed) == false) {"
    },
    {
        "line": 53,
        "fullcodeline": "if(auto ext = data->m_extensions.get_extension_object_as<Cert_Extension::Subject_Alternative_Name>()) {"
    },
    {
        "line": 54,
        "fullcodeline": "data->m_alt_name = ext->get_alt_name();"
    },
    {
        "line": 58,
        "fullcodeline": "data->m_alt_name.add_attribute(\"RFC882\", email);"
    },
    {
        "line": 9,
        "fullcodeline": "throw Decoding_Error(\"Unknown version code in PKCS #10 request: \" + std::to_string(version));"
    },
    {
        "line": 27,
        "fullcodeline": "while(attributes.more_items()) {"
    },
    {
        "line": 16,
        "fullcodeline": "throw BER_Bad_Tag(\"PKCS10_Request: Unexpected tag for public key\", public_key.tagging());"
    },
    {
        "line": 29,
        "fullcodeline": "attributes.decode(attr);"
    },
    {
        "line": 31,
        "fullcodeline": "const OID& oid = attr.object_identifier();"
    },
    {
        "line": 47,
        "fullcodeline": "} else if(attr_bits.is_set()) {"
    },
    {
        "line": 32,
        "fullcodeline": "BER_Decoder value(attr.get_parameters());"
    },
    {
        "line": 34,
        "fullcodeline": "if(oid == OID::from_string(\"PKCS9.EmailAddress\")) {"
    },
    {
        "line": 36,
        "fullcodeline": "value.decode(email);"
    },
    {
        "line": 37,
        "fullcodeline": "pkcs9_email.insert(email.value());"
    },
    {
        "line": 48,
        "fullcodeline": "throw BER_Bad_Tag(\"PKCS10_Request: Unexpected tag for attributes\", attr_bits.tagging());"
    },
    {
        "line": 38,
        "fullcodeline": "} else if(oid == OID::from_string(\"PKCS9.ChallengePassword\")) {"
    },
    {
        "line": 40,
        "fullcodeline": "value.decode(challenge_password);"
    },
    {
        "line": 41,
        "fullcodeline": "data->m_challenge = challenge_password.value();"
    },
    {
        "line": 42,
        "fullcodeline": "} else if(oid == OID::from_string(\"PKCS9.ExtensionRequest\")) {"
    },
    {
        "line": 43,
        "fullcodeline": "value.decode(data->m_extensions).verify_end();"
    }
]