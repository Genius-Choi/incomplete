[
    {
        "line": 6,
        "fullcodeline": "const auto& alt_name = cert.subject_alt_name();"
    },
    {
        "line": 24,
        "fullcodeline": "auto is_permitted_dn = [&](const X509_DN& dn) {"
    },
    {
        "line": 40,
        "fullcodeline": "auto is_permitted_dns_name = [&](const std::string& name) {"
    },
    {
        "line": 60,
        "fullcodeline": "auto is_permitted_ipv4 = [&](uint32_t ipv4) {"
    },
    {
        "line": 2,
        "fullcodeline": "if(permitted().empty()) {"
    },
    {
        "line": 8,
        "fullcodeline": "if(exceeds_limit(cert.subject_dn().count(), alt_name.count(), permitted().size())) {"
    },
    {
        "line": 76,
        "fullcodeline": "if(!is_permitted_dn(cert.subject_dn())) {"
    },
    {
        "line": 98,
        "fullcodeline": "if(alt_name.count() == 0) {"
    },
    {
        "line": 13,
        "fullcodeline": "if(m_permitted_name_types.contains(GeneralName::NameType::Other) && !alt_name.other_names().empty()) {"
    },
    {
        "line": 16,
        "fullcodeline": "if(m_permitted_name_types.contains(GeneralName::NameType::URI) && !alt_name.uris().empty()) {"
    },
    {
        "line": 19,
        "fullcodeline": "if(m_permitted_name_types.contains(GeneralName::NameType::RFC822) && !alt_name.email().empty()) {"
    },
    {
        "line": 81,
        "fullcodeline": "if(!is_permitted_dn(alt_dn)) {"
    },
    {
        "line": 87,
        "fullcodeline": "if(!is_permitted_dns_name(alt_dns)) {"
    },
    {
        "line": 93,
        "fullcodeline": "if(!is_permitted_ipv4(alt_ipv4)) {"
    },
    {
        "line": 100,
        "fullcodeline": "if(cn.find(\".\") != std::string::npos) {"
    },
    {
        "line": 101,
        "fullcodeline": "if(auto ipv4 = string_to_ipv4(cn)) {"
    },
    {
        "line": 102,
        "fullcodeline": "if(!is_permitted_ipv4(ipv4.value())) {"
    },
    {
        "line": 106,
        "fullcodeline": "if(!is_permitted_dns_name(cn)) {"
    }
]