[
    {
        "line": 5,
        "fullcodeline": "Test::Result result(\"PKCS10 extensions\");"
    },
    {
        "line": 9,
        "fullcodeline": "opts.dns = \"main.example.org\";"
    },
    {
        "line": 10,
        "fullcodeline": "opts.more_dns.push_back(\"more1.example.org\");"
    },
    {
        "line": 11,
        "fullcodeline": "opts.more_dns.push_back(\"more2.example.org\");"
    },
    {
        "line": 13,
        "fullcodeline": "opts.padding_scheme = sig_padding;"
    },
    {
        "line": 16,
        "fullcodeline": "alt_name.add_attribute(\"DNS\", \"bonus.example.org\");"
    },
    {
        "line": 18,
        "fullcodeline": "opts.extensions.add(std::make_unique<Botan::Cert_Extension::Subject_Alternative_Name>(alt_name));"
    },
    {
        "line": 20,
        "fullcodeline": "Botan::PKCS10_Request req = Botan::X509::create_cert_req(opts, key, hash_fn, rng);"
    },
    {
        "line": 22,
        "fullcodeline": "std::vector<std::string> alt_dns_names = req.subject_alt_name().get_attribute(\"DNS\");"
    },
    {
        "line": 24,
        "fullcodeline": "result.test_eq(\"Expected number of DNS names\", alt_dns_names.size(), 4);"
    },
    {
        "line": 27,
        "fullcodeline": "std::sort(alt_dns_names.begin(), alt_dns_names.end());"
    },
    {
        "line": 29,
        "fullcodeline": "if(alt_dns_names.size() == 4) {"
    },
    {
        "line": 30,
        "fullcodeline": "result.test_eq(\"Expected DNS name 1\", alt_dns_names.at(0), \"bonus.example.org\");"
    },
    {
        "line": 31,
        "fullcodeline": "result.test_eq(\"Expected DNS name 2\", alt_dns_names.at(1), \"main.example.org\");"
    },
    {
        "line": 32,
        "fullcodeline": "result.test_eq(\"Expected DNS name 3\", alt_dns_names.at(2), \"more1.example.org\");"
    },
    {
        "line": 33,
        "fullcodeline": "result.test_eq(\"Expected DNS name 3\", alt_dns_names.at(3), \"more2.example.org\");"
    }
]