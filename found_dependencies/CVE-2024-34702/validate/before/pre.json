[
    {
        "line": 6,
        "fullcodeline": "if(!m_name_constraints.permitted().empty() || !m_name_constraints.excluded().empty())"
    },
    {
        "line": 13,
        "fullcodeline": "const bool issuer_name_constraint_critical ="
    },
    {
        "line": 8,
        "fullcodeline": "if(!subject.is_CA_cert())"
    },
    {
        "line": 14,
        "fullcodeline": "issuer.is_critical(\"X509v3.NameConstraints\");"
    },
    {
        "line": 17,
        "fullcodeline": "for(size_t j = 0; j < pos; ++j)"
    },
    {
        "line": 10,
        "fullcodeline": "cert_status.at(pos).insert(Certificate_Status_Code::NAME_CONSTRAINT_ERROR);"
    },
    {
        "line": 19,
        "fullcodeline": "bool permitted = m_name_constraints.permitted().empty();"
    },
    {
        "line": 20,
        "fullcodeline": "bool failed = false;"
    },
    {
        "line": 55,
        "fullcodeline": "if(failed || !permitted)"
    },
    {
        "line": 57,
        "fullcodeline": "cert_status.at(j).insert(Certificate_Status_Code::NAME_CONSTRAINT_ERROR);"
    },
    {
        "line": 24,
        "fullcodeline": "switch(c.base().matches(*cert_path.at(j)))"
    },
    {
        "line": 28,
        "fullcodeline": "permitted = true;"
    },
    {
        "line": 31,
        "fullcodeline": "failed = issuer_name_constraint_critical;"
    },
    {
        "line": 32,
        "fullcodeline": "permitted = true;"
    },
    {
        "line": 41,
        "fullcodeline": "switch(c.base().matches(*cert_path.at(j)))"
    },
    {
        "line": 45,
        "fullcodeline": "failed = true;"
    },
    {
        "line": 48,
        "fullcodeline": "failed = issuer_name_constraint_critical;"
    }
]