[
    {
        "line": 4,
        "fullcodeline": "BER_Decoder ber(in);"
    },
    {
        "line": 5,
        "fullcodeline": "BER_Decoder ext = ber.start_cons(SEQUENCE);"
    },
    {
        "line": 6,
        "fullcodeline": "BER_Object per = ext.get_next_object();"
    },
    {
        "line": 8,
        "fullcodeline": "ext.push_back(per);"
    },
    {
        "line": 16,
        "fullcodeline": "BER_Object exc = ext.get_next_object();"
    },
    {
        "line": 17,
        "fullcodeline": "ext.push_back(exc);"
    },
    {
        "line": 25,
        "fullcodeline": "ext.end_cons();"
    },
    {
        "line": 30,
        "fullcodeline": "m_name_constraints = NameConstraints(std::move(permit),std::move(exclude));"
    },
    {
        "line": 9,
        "fullcodeline": "if(per.is_a(0, ASN1_Tag(CONSTRUCTED | CONTEXT_SPECIFIC)))"
    },
    {
        "line": 18,
        "fullcodeline": "if(per.is_a(1, ASN1_Tag(CONSTRUCTED | CONTEXT_SPECIFIC)))"
    },
    {
        "line": 27,
        "fullcodeline": "if(permit.empty() && exclude.empty())"
    },
    {
        "line": 11,
        "fullcodeline": "ext.decode_list(permit,ASN1_Tag(0),ASN1_Tag(CONSTRUCTED | CONTEXT_SPECIFIC));"
    },
    {
        "line": 20,
        "fullcodeline": "ext.decode_list(exclude,ASN1_Tag(1),ASN1_Tag(CONSTRUCTED | CONTEXT_SPECIFIC));"
    },
    {
        "line": 12,
        "fullcodeline": "if(permit.empty())"
    },
    {
        "line": 21,
        "fullcodeline": "if(exclude.empty())"
    },
    {
        "line": 28,
        "fullcodeline": "throw Encoding_Error(\"Empty Name Contraint extension\");"
    },
    {
        "line": 13,
        "fullcodeline": "throw Encoding_Error(\"Empty Name Contraint list\");"
    },
    {
        "line": 22,
        "fullcodeline": "throw Encoding_Error(\"Empty Name Contraint list\");"
    }
]