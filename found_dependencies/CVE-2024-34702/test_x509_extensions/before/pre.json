[
    {
        "line": 8,
        "fullcodeline": "Test::Result result(\"X509 Extensions\");"
    },
    {
        "line": 11,
        "fullcodeline": "Botan::X509_Certificate ca_cert = Botan::X509::create_self_signed_cert(ca_opts(sig_padding), ca_key, hash_fn, rng);"
    },
    {
        "line": 14,
        "fullcodeline": "Botan::X509_CA ca(ca_cert, ca_key, hash_fn, sig_padding, rng);"
    },
    {
        "line": 17,
        "fullcodeline": "std::vector<std::string> cdp_urls = {"
    },
    {
        "line": 21,
        "fullcodeline": "std::vector<Botan::Cert_Extension::CRL_Distribution_Points::Distribution_Point> dps;"
    },
    {
        "line": 30,
        "fullcodeline": "auto user_key = make_a_private_key(sig_algo, rng);"
    },
    {
        "line": 32,
        "fullcodeline": "Botan::X509_Cert_Options opts(\"Test User 1/US/Botan Project/Testing\");"
    },
    {
        "line": 33,
        "fullcodeline": "opts.constraints = Key_Constraints::DigitalSignature;"
    },
    {
        "line": 37,
        "fullcodeline": "const Botan::OID oid(\"1.2.3.4.5.6.7.8.9.1\");"
    },
    {
        "line": 38,
        "fullcodeline": "const Botan::OID ku_oid = Botan::OID::from_string(\"X509v3.KeyUsage\");"
    },
    {
        "line": 39,
        "fullcodeline": "req_extensions.add(std::make_unique<String_Extension>(\"AAAAAAAAAAAAAABCDEF\"), false);"
    },
    {
        "line": 40,
        "fullcodeline": "req_extensions.add(std::make_unique<Botan::Cert_Extension::CRL_Distribution_Points>(dps));"
    },
    {
        "line": 41,
        "fullcodeline": "opts.extensions = req_extensions;"
    },
    {
        "line": 42,
        "fullcodeline": "opts.set_padding_scheme(sig_padding);"
    },
    {
        "line": 45,
        "fullcodeline": "const Botan::X509_Certificate self_signed_cert = Botan::X509::create_self_signed_cert(opts, *user_key, hash_fn, rng);"
    },
    {
        "line": 47,
        "fullcodeline": "result.confirm(\"Extensions::extension_set true for Key_Usage\","
    },
    {
        "line": 51,
        "fullcodeline": "auto key_usage_ext = self_signed_cert.v3_extensions().get(ku_oid);"
    },
    {
        "line": 59,
        "fullcodeline": "auto string_ext = self_signed_cert.v3_extensions().get_raw<String_Extension>(oid);"
    },
    {
        "line": 66,
        "fullcodeline": "auto cert_cdps ="
    },
    {
        "line": 77,
        "fullcodeline": "const Botan::PKCS10_Request user_req = Botan::X509::create_cert_req(opts, *user_key, hash_fn, rng);"
    },
    {
        "line": 80,
        "fullcodeline": "const Botan::X509_Certificate ca_signed_cert ="
    },
    {
        "line": 84,
        "fullcodeline": "result.confirm(\"Extensions::extension_set true for Key_Usage\", ca_signed_cert.v3_extensions().extension_set(ku_oid));"
    },
    {
        "line": 86,
        "fullcodeline": "key_usage_ext = ca_signed_cert.v3_extensions().get(ku_oid);"
    },
    {
        "line": 94,
        "fullcodeline": "result.confirm(\"Extensions::extension_set true for String_Extension\","
    },
    {
        "line": 96,
        "fullcodeline": "string_ext = ca_signed_cert.v3_extensions().get_raw<String_Extension>(oid);"
    },
    {
        "line": 103,
        "fullcodeline": "cert_cdps = ca_signed_cert.v3_extensions().get_extension_object_as<Botan::Cert_Extension::CRL_Distribution_Points>();"
    },
    {
        "line": 48,
        "fullcodeline": "self_signed_cert.v3_extensions().extension_set(ku_oid));"
    },
    {
        "line": 52,
        "fullcodeline": "if(result.confirm(\"Key_Usage extension present in self-signed certificate\", key_usage_ext != nullptr)) {"
    },
    {
        "line": 60,
        "fullcodeline": "if(result.confirm(\"Custom extension present in self-signed certificate\", string_ext != nullptr)) {"
    },
    {
        "line": 67,
        "fullcodeline": "self_signed_cert.v3_extensions().get_extension_object_as<Botan::Cert_Extension::CRL_Distribution_Points>();"
    },
    {
        "line": 69,
        "fullcodeline": "if(result.confirm(\"CRL Distribution Points extension present in self-signed certificate\","
    },
    {
        "line": 81,
        "fullcodeline": "ca.sign_request(user_req, rng, from_date(-1, 01, 01), from_date(2, 01, 01));"
    },
    {
        "line": 87,
        "fullcodeline": "if(result.confirm(\"Key_Usage extension present in CA-signed certificate\", key_usage_ext != nullptr)) {"
    },
    {
        "line": 95,
        "fullcodeline": "ca_signed_cert.v3_extensions().extension_set(oid));"
    },
    {
        "line": 97,
        "fullcodeline": "if(result.confirm(\"Custom extension present in CA-signed certificate\", string_ext != nullptr)) {"
    },
    {
        "line": 105,
        "fullcodeline": "if(result.confirm(\"CRL Distribution Points extension present in self-signed certificate\","
    },
    {
        "line": 24,
        "fullcodeline": "Botan::AlternativeName cdp_alt_name(\"\", uri);"
    },
    {
        "line": 25,
        "fullcodeline": "Botan::Cert_Extension::CRL_Distribution_Points::Distribution_Point dp(cdp_alt_name);"
    },
    {
        "line": 27,
        "fullcodeline": "dps.emplace_back(dp);"
    },
    {
        "line": 53,
        "fullcodeline": "result.confirm("
    },
    {
        "line": 61,
        "fullcodeline": "result.test_eq("
    },
    {
        "line": 70,
        "fullcodeline": "!cert_cdps->crl_distribution_urls().empty())) {"
    },
    {
        "line": 88,
        "fullcodeline": "auto constraints = dynamic_cast<Botan::Cert_Extension::Key_Usage&>(*key_usage_ext).get_constraints();"
    },
    {
        "line": 89,
        "fullcodeline": "result.confirm(\"Key_Usage extension value matches in user certificate\","
    },
    {
        "line": 98,
        "fullcodeline": "result.test_eq("
    },
    {
        "line": 106,
        "fullcodeline": "!cert_cdps->crl_distribution_urls().empty())) {"
    },
    {
        "line": 55,
        "fullcodeline": "dynamic_cast<Botan::Cert_Extension::Key_Usage&>(*key_usage_ext).get_constraints() == opts.constraints);"
    },
    {
        "line": 62,
        "fullcodeline": "\"Custom extension value matches in self-signed certificate\", string_ext->value(), \"AAAAAAAAAAAAAABCDEF\");"
    },
    {
        "line": 90,
        "fullcodeline": "constraints == Botan::Key_Constraints::DigitalSignature);"
    },
    {
        "line": 99,
        "fullcodeline": "\"Custom extension value matches in CA-signed certificate\", string_ext->value(), \"AAAAAAAAAAAAAABCDEF\");"
    },
    {
        "line": 72,
        "fullcodeline": "result.confirm(\"CDP URI present in self-signed certificate\","
    },
    {
        "line": 108,
        "fullcodeline": "result.confirm(\"CDP URI present in self-signed certificate\","
    },
    {
        "line": 73,
        "fullcodeline": "std::ranges::find(cdp_urls, cdp.point().get_first_attribute(\"URI\")) != cdp_urls.end());"
    },
    {
        "line": 109,
        "fullcodeline": "std::ranges::find(cdp_urls, cdp.point().get_first_attribute(\"URI\")) != cdp_urls.end());"
    }
]