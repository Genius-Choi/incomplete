[
    {
        "line": 4,
        "fullcodeline": "if(m_pushed.is_set()) {"
    },
    {
        "line": 5,
        "fullcodeline": "std::swap(next, m_pushed);"
    },
    {
        "line": 12,
        "fullcodeline": "decode_tag(m_source, type_tag, class_tag);"
    },
    {
        "line": 13,
        "fullcodeline": "next.set_tagging(type_tag, class_tag);"
    },
    {
        "line": 19,
        "fullcodeline": "const size_t length = decode_length(m_source, field_size, ALLOWED_EOC_NESTINGS);"
    },
    {
        "line": 24,
        "fullcodeline": "uint8_t* out = next.mutable_bits(length);"
    },
    {
        "line": 14,
        "fullcodeline": "if(next.is_set() == false) {  // no more objects"
    },
    {
        "line": 20,
        "fullcodeline": "if(!m_source->check_available(length)) {"
    },
    {
        "line": 25,
        "fullcodeline": "if(m_source->read(out, length) != length) {"
    },
    {
        "line": 29,
        "fullcodeline": "if(next.tagging() == static_cast<uint32_t>(ASN1_Type::Eoc)) {"
    },
    {
        "line": 21,
        "fullcodeline": "throw BER_Decoding_Error(\"Value truncated\");"
    },
    {
        "line": 26,
        "fullcodeline": "throw BER_Decoding_Error(\"Value truncated\");"
    }
]