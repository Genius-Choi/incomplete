[
    {
        "line": 11,
        "fullcodeline": "bool update_status = false;"
    },
    {
        "line": 18,
        "fullcodeline": "UCHAR calced_hash[IKE_MAX_HASH_SIZE];"
    },
    {
        "line": 19,
        "fullcodeline": "bool is_tunnel_mode = false;"
    },
    {
        "line": 26,
        "fullcodeline": "src = (UCHAR *)p->Data;"
    },
    {
        "line": 27,
        "fullcodeline": "src_size = p->Size;"
    },
    {
        "line": 47,
        "fullcodeline": "spi = READ_UINT(src + 0);"
    },
    {
        "line": 58,
        "fullcodeline": "seq = READ_UINT(src + sizeof(UINT));"
    },
    {
        "line": 65,
        "fullcodeline": "ipsec_sa = SearchClientToServerIPsecSaBySpi(ike, spi);"
    },
    {
        "line": 73,
        "fullcodeline": "c = ipsec_sa->IkeClient;"
    },
    {
        "line": 79,
        "fullcodeline": "block_size = ipsec_sa->TransformSetting.Crypto->BlockSize;"
    },
    {
        "line": 80,
        "fullcodeline": "hash_size = IKE_ESP_HASH_SIZE;"
    },
    {
        "line": 87,
        "fullcodeline": "iv = src + sizeof(UINT) * 2;"
    },
    {
        "line": 90,
        "fullcodeline": "hash = src + src_size - hash_size;"
    },
    {
        "line": 93,
        "fullcodeline": "IkeHMac(ipsec_sa->TransformSetting.Hash, calced_hash, ipsec_sa->HashKey,"
    },
    {
        "line": 103,
        "fullcodeline": "encrypted_payload_data = src + sizeof(UINT) * 2 + block_size;"
    },
    {
        "line": 104,
        "fullcodeline": "size_of_payload_data = src_size - hash_size - block_size - sizeof(UINT) * 2;"
    },
    {
        "line": 112,
        "fullcodeline": "cp.Key = ipsec_sa->CryptoKey;"
    },
    {
        "line": 115,
        "fullcodeline": "dec = IkeDecrypt(encrypted_payload_data, size_of_payload_data, &cp);"
    },
    {
        "line": 21,
        "fullcodeline": "if (ike == NULL || p == NULL)"
    },
    {
        "line": 29,
        "fullcodeline": "if (p->DestPort == IPSEC_PORT_IPSEC_ESP_RAW)"
    },
    {
        "line": 42,
        "fullcodeline": "if (src_size < sizeof(UINT))"
    },
    {
        "line": 48,
        "fullcodeline": "if (spi == 0)"
    },
    {
        "line": 54,
        "fullcodeline": "if (src_size < (sizeof(UINT) * 2))"
    },
    {
        "line": 66,
        "fullcodeline": "if (ipsec_sa == NULL)"
    },
    {
        "line": 71,
        "fullcodeline": "is_tunnel_mode = IsIPsecSaTunnelMode(ipsec_sa);"
    },
    {
        "line": 74,
        "fullcodeline": "if (c == NULL)"
    },
    {
        "line": 83,
        "fullcodeline": "if (src_size < (sizeof(UINT) * 2 + block_size + hash_size + block_size))"
    },
    {
        "line": 94,
        "fullcodeline": "ipsec_sa->TransformSetting.Hash->HashSize, src, src_size - hash_size);"
    },
    {
        "line": 116,
        "fullcodeline": "if (dec != NULL)"
    },
    {
        "line": 96,
        "fullcodeline": "if (Cmp(calced_hash, hash, hash_size) != 0)"
    },
    {
        "line": 105,
        "fullcodeline": "if (size_of_payload_data == 0 || (size_of_payload_data % block_size) != 0)"
    },
    {
        "line": 118,
        "fullcodeline": "UCHAR *dec_data = dec->Buf;"
    },
    {
        "line": 119,
        "fullcodeline": "UINT dec_size = dec->Size;"
    },
    {
        "line": 120,
        "fullcodeline": "UCHAR size_of_padding = dec_data[dec_size - 2];"
    },
    {
        "line": 121,
        "fullcodeline": "UCHAR next_header = dec_data[dec_size - 1];"
    },
    {
        "line": 272,
        "fullcodeline": "c->CurrentIpSecSaRecv = ipsec_sa;"
    },
    {
        "line": 290,
        "fullcodeline": "c->LastCommTick = ike->Now;"
    },
    {
        "line": 31,
        "fullcodeline": "if (IsIP4(&p->DstIP))"
    },
    {
        "line": 122,
        "fullcodeline": "if ((dec_size - 2) >= size_of_padding)"
    },
    {
        "line": 273,
        "fullcodeline": "if (ipsec_sa->PairIPsecSa != NULL)"
    },
    {
        "line": 305,
        "fullcodeline": "if (ipsec_sa->TransformSetting.LifeKilobytes != 0)"
    },
    {
        "line": 34,
        "fullcodeline": "UINT ip_header_size = GetIpHeaderSize(src, src_size);"
    },
    {
        "line": 36,
        "fullcodeline": "src += ip_header_size;"
    },
    {
        "line": 37,
        "fullcodeline": "src_size -= ip_header_size;"
    },
    {
        "line": 126,
        "fullcodeline": "ipsec_sa->TotalSize += dec_size;"
    },
    {
        "line": 275,
        "fullcodeline": "c->CurrentIpSecSaSend = ipsec_sa->PairIPsecSa;"
    },
    {
        "line": 307,
        "fullcodeline": "UINT64 hard_size = (UINT64)ipsec_sa->TransformSetting.LifeKilobytes * (UINT64)1000;"
    },
    {
        "line": 308,
        "fullcodeline": "UINT64 soft_size = hard_size * (UINT64)2 / (UINT64)3;"
    },
    {
        "line": 124,
        "fullcodeline": "UINT orig_size = dec_size - 2 - size_of_padding;"
    },
    {
        "line": 277,
        "fullcodeline": "if (p->DestPort == IPSEC_PORT_IPSEC_ESP_UDP)"
    },
    {
        "line": 280,
        "fullcodeline": "if (send_sa->TransformSetting.CapsuleMode == IKE_P2_CAPSULE_TUNNEL)"
    },
    {
        "line": 131,
        "fullcodeline": "if (next_header == IKE_PROTOCOL_ID_IPV4 || next_header == IKE_PROTOCOL_ID_IPV6)"
    },
    {
        "line": 134,
        "fullcodeline": "BUF *b = NewBuf();"
    },
    {
        "line": 137,
        "fullcodeline": "USHORT tpid = Endian16(next_header == IKE_PROTOCOL_ID_IPV4 ? MAC_PROTO_IPV4 : MAC_PROTO_IPV6);"
    },
    {
        "line": 140,
        "fullcodeline": "WriteBuf(b, src_mac_dummy, sizeof(src_mac_dummy));"
    },
    {
        "line": 141,
        "fullcodeline": "WriteBuf(b, dst_mac_dummy, sizeof(dst_mac_dummy));"
    },
    {
        "line": 142,
        "fullcodeline": "WriteBuf(b, &tpid, sizeof(tpid));"
    },
    {
        "line": 144,
        "fullcodeline": "WriteBuf(b, dec_data, dec_size);"
    },
    {
        "line": 147,
        "fullcodeline": "pkt = ParsePacket(b->Buf, b->Size);"
    },
    {
        "line": 236,
        "fullcodeline": "if (next_header == IP_PROTO_UDP)"
    },
    {
        "line": 282,
        "fullcodeline": "send_sa->TransformSetting.CapsuleMode = IKE_P2_CAPSULE_NAT_TUNNEL_1;"
    },
    {
        "line": 135,
        "fullcodeline": "static UCHAR src_mac_dummy[6] = {0, 0, 0, 0, 0, 0, };"
    },
    {
        "line": 136,
        "fullcodeline": "static UCHAR dst_mac_dummy[6] = {0, 0, 0, 0, 0, 0, };"
    },
    {
        "line": 153,
        "fullcodeline": "if (pkt == NULL)"
    },
    {
        "line": 284,
        "fullcodeline": "else if (send_sa->TransformSetting.CapsuleMode == IKE_P2_CAPSULE_TRANSPORT)"
    },
    {
        "line": 241,
        "fullcodeline": "ProcIPsecUdpPacketRecv(ike, c, dec_data, dec_size);"
    },
    {
        "line": 244,
        "fullcodeline": "else if (next_header == IPSEC_IP_PROTO_ETHERIP)"
    },
    {
        "line": 286,
        "fullcodeline": "send_sa->TransformSetting.CapsuleMode = IKE_P2_CAPSULE_NAT_TRANSPORT_1;"
    },
    {
        "line": 166,
        "fullcodeline": "UINTToIP(&c->TunnelModeServerIP, pkt->L3.IPv4Header->DstIP);"
    },
    {
        "line": 167,
        "fullcodeline": "UINTToIP(&c->TunnelModeClientIP, pkt->L3.IPv4Header->SrcIP);"
    },
    {
        "line": 200,
        "fullcodeline": "if (pkt->IPv6HeaderPacketInfo.IsFragment == false)"
    },
    {
        "line": 249,
        "fullcodeline": "ProcIPsecEtherIPPacketRecv(ike, c, dec_data, dec_size, false);"
    },
    {
        "line": 169,
        "fullcodeline": "if (IPV4_GET_OFFSET(pkt->L3.IPv4Header) == 0)"
    },
    {
        "line": 171,
        "fullcodeline": "if ((IPV4_GET_FLAGS(pkt->L3.IPv4Header) & 0x01) == 0)"
    },
    {
        "line": 202,
        "fullcodeline": "if (pkt->IPv6HeaderPacketInfo.FragmentHeader == NULL || (IPV6_GET_FLAGS(pkt->IPv6HeaderPacketInfo.FragmentHeader) & IPV6_FRAGMENT_HEADER_FLAG_MORE_FRAGMENTS) == 0)"
    },
    {
        "line": 257,
        "fullcodeline": "ProcL2TPv3PacketRecv(ike, c, dec_data, dec_size, false);"
    },
    {
        "line": 173,
        "fullcodeline": "if (pkt->L3.IPv4Header->Protocol == IPSEC_IP_PROTO_ETHERIP)"
    },
    {
        "line": 204,
        "fullcodeline": "if (pkt->IPv6HeaderPacketInfo.Protocol == IPSEC_IP_PROTO_ETHERIP)"
    },
    {
        "line": 179,
        "fullcodeline": "ProcIPsecEtherIPPacketRecv(ike, c, pkt->IPv4PayloadData, pkt->IPv4PayloadSize, true);"
    },
    {
        "line": 210,
        "fullcodeline": "ProcIPsecEtherIPPacketRecv(ike, c, pkt->IPv6HeaderPacketInfo.Payload, pkt->IPv6HeaderPacketInfo.PayloadSize, true);"
    },
    {
        "line": 188,
        "fullcodeline": "ProcL2TPv3PacketRecv(ike, c, pkt->IPv4PayloadData, pkt->IPv4PayloadSize, true);"
    },
    {
        "line": 219,
        "fullcodeline": "ProcL2TPv3PacketRecv(ike, c, pkt->IPv6HeaderPacketInfo.Payload, pkt->IPv6HeaderPacketInfo.PayloadSize, true);"
    }
]