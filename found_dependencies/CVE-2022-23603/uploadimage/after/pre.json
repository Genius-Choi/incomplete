[
    {
        "line": 7,
        "fullcodeline": "im_b64 = request.json['image']"
    },
    {
        "line": 8,
        "fullcodeline": "img_bytes = base64.b64decode(im_b64.encode('utf-8'))"
    },
    {
        "line": 9,
        "fullcodeline": "img = Image.open(io.BytesIO(img_bytes))"
    },
    {
        "line": 11,
        "fullcodeline": "file_ending = img.format"
    },
    {
        "line": 12,
        "fullcodeline": "print(f\"File has filetype {file_ending}.\")"
    },
    {
        "line": 19,
        "fullcodeline": "one_hundred_million = 100000000"
    },
    {
        "line": 20,
        "fullcodeline": "lots_of_nine = 999999999"
    },
    {
        "line": 22,
        "fullcodeline": "file_name = None"
    },
    {
        "line": 24,
        "fullcodeline": "f = open(\"all_files\", \"r\")"
    },
    {
        "line": 25,
        "fullcodeline": "all_files = ast.literal_eval(f.read())"
    },
    {
        "line": 28,
        "fullcodeline": "attempt = 0"
    },
    {
        "line": 47,
        "fullcodeline": "print(f\"Successful file name: {file_name}\")"
    },
    {
        "line": 49,
        "fullcodeline": "title = request.json[\"title\"]"
    },
    {
        "line": 50,
        "fullcodeline": "print(\"First 9 chars of title: \"+str(title[:9]))"
    },
    {
        "line": 51,
        "fullcodeline": "print(\"Title from 10th char: \"+str(title[9::]))"
    },
    {
        "line": 55,
        "fullcodeline": "singer = request.json[\"singer\"]"
    },
    {
        "line": 56,
        "fullcodeline": "album = request.json[\"album\"]"
    },
    {
        "line": 58,
        "fullcodeline": "file_db_entry = [{\"title\": title, \"singer\": singer, \"album\": album}, file_name, file_ending]"
    },
    {
        "line": 59,
        "fullcodeline": "print(f\"New db entry: {file_db_entry}\")"
    },
    {
        "line": 61,
        "fullcodeline": "all_files.append(file_db_entry)"
    },
    {
        "line": 63,
        "fullcodeline": "f = open(\"all_files\", \"w\")"
    },
    {
        "line": 64,
        "fullcodeline": "f.write(str(all_files))"
    },
    {
        "line": 65,
        "fullcodeline": "f.close()"
    },
    {
        "line": 67,
        "fullcodeline": "file_name = file_name + file_ending"
    },
    {
        "line": 69,
        "fullcodeline": "image = img.save(file_name)"
    },
    {
        "line": 70,
        "fullcodeline": "print(f\"Saved {file_name} from {file_db_entry}.\")"
    },
    {
        "line": 71,
        "fullcodeline": "print(f\"Returning {file_db_entry}.\")"
    },
    {
        "line": 3,
        "fullcodeline": "if not request.json or 'image' not in request.json:"
    },
    {
        "line": 14,
        "fullcodeline": "if file_ending == \"JPEG\":"
    },
    {
        "line": 30,
        "fullcodeline": "while file_name == None or file_name in all_files:"
    },
    {
        "line": 52,
        "fullcodeline": "if title[:9] == \"[PAUSED] \":"
    },
    {
        "line": 4,
        "fullcodeline": "print(\"No data sent or no image provided. Aborting with 400.\")"
    },
    {
        "line": 5,
        "fullcodeline": "abort(400)"
    },
    {
        "line": 15,
        "fullcodeline": "file_ending = \".jpg\""
    },
    {
        "line": 17,
        "fullcodeline": "file_ending = \".png\""
    },
    {
        "line": 53,
        "fullcodeline": "title = title[9::]"
    },
    {
        "line": 72,
        "fullcodeline": "return {\"entry\": file_db_entry}"
    },
    {
        "line": 31,
        "fullcodeline": "if attempt <= 1000:"
    },
    {
        "line": 32,
        "fullcodeline": "file_name = random.randint(one_hundred_million, lots_of_nine)"
    },
    {
        "line": 34,
        "fullcodeline": "file_name = base64.b64encode(str(file_name).encode(\"utf-8\")).decode(\"utf-8\")"
    },
    {
        "line": 36,
        "fullcodeline": "print(f\"Trying new file name: {file_name}\")"
    },
    {
        "line": 38,
        "fullcodeline": "attempt = 0"
    },
    {
        "line": 39,
        "fullcodeline": "one_hundred_million += 100000"
    },
    {
        "line": 40,
        "fullcodeline": "lots_of_nine += 1000000"
    },
    {
        "line": 45,
        "fullcodeline": "one_hundred_million -= 10000"
    },
    {
        "line": 42,
        "fullcodeline": "while one_hundred_million >= lots_of_nine:"
    },
    {
        "line": 43,
        "fullcodeline": "one_hundred_million -= 10000"
    }
]