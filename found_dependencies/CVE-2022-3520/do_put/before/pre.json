[
    {
        "line": 11,
        "fullcodeline": "int\t\ttotlen = 0;\t\t// init for gcc"
    },
    {
        "line": 18,
        "fullcodeline": "long\ty_width = 0;"
    },
    {
        "line": 21,
        "fullcodeline": "int\t\tincr = 0;"
    },
    {
        "line": 24,
        "fullcodeline": "char_u\t**y_array = NULL;"
    },
    {
        "line": 25,
        "fullcodeline": "yankreg_T\t*y_current_used = NULL;"
    },
    {
        "line": 26,
        "fullcodeline": "long\tnr_lines = 0;"
    },
    {
        "line": 29,
        "fullcodeline": "int\t\torig_indent = 0;\t// init for gcc"
    },
    {
        "line": 30,
        "fullcodeline": "int\t\tindent_diff = 0;\t// init for gcc"
    },
    {
        "line": 31,
        "fullcodeline": "int\t\tfirst_indent = TRUE;"
    },
    {
        "line": 32,
        "fullcodeline": "int\t\tlendiff = 0;"
    },
    {
        "line": 34,
        "fullcodeline": "char_u\t*insert_string = NULL;"
    },
    {
        "line": 35,
        "fullcodeline": "int\t\tallocated = FALSE;"
    },
    {
        "line": 37,
        "fullcodeline": "pos_T\torig_start = curbuf->b_op_start;"
    },
    {
        "line": 38,
        "fullcodeline": "pos_T\torig_end = curbuf->b_op_end;"
    },
    {
        "line": 39,
        "fullcodeline": "unsigned int cur_ve_flags = get_ve_flags();"
    },
    {
        "line": 50,
        "fullcodeline": "curbuf->b_op_start = curwin->w_cursor;\t// default for '[ mark"
    },
    {
        "line": 51,
        "fullcodeline": "curbuf->b_op_end = curwin->w_cursor;\t// default for '] mark"
    },
    {
        "line": 225,
        "fullcodeline": "yanklen = (int)STRLEN(y_array[0]);"
    },
    {
        "line": 251,
        "fullcodeline": "lnum = curwin->w_cursor.lnum;"
    },
    {
        "line": 252,
        "fullcodeline": "col = curwin->w_cursor.col;"
    },
    {
        "line": 47,
        "fullcodeline": "if (flags & PUT_FIXINDENT)"
    },
    {
        "line": 55,
        "fullcodeline": "if (regname == '.')"
    },
    {
        "line": 79,
        "fullcodeline": "if (u_save(curwin->w_cursor.lnum, curwin->w_cursor.lnum + 1) == FAIL)"
    },
    {
        "line": 82,
        "fullcodeline": "if (insert_string != NULL)"
    },
    {
        "line": 139,
        "fullcodeline": "if (y_type == MLINE)"
    },
    {
        "line": 179,
        "fullcodeline": "if (flags & PUT_LINE)\t// :put command or \"p\" in Visual line mode."
    },
    {
        "line": 189,
        "fullcodeline": "if (y_type == MBLOCK)"
    },
    {
        "line": 255,
        "fullcodeline": "if (y_type == MBLOCK)"
    },
    {
        "line": 769,
        "fullcodeline": "if (cmdmod.cmod_flags & CMOD_LOCKMARKS)"
    },
    {
        "line": 48,
        "fullcodeline": "orig_indent = get_indent();"
    },
    {
        "line": 59,
        "fullcodeline": "(void)stuff_inserted((dir == FORWARD ? (count == -1 ? 'o' : 'a') :"
    },
    {
        "line": 71,
        "fullcodeline": "if (regname == '=' && expr_result != NULL)"
    },
    {
        "line": 72,
        "fullcodeline": "insert_string = expr_result;"
    },
    {
        "line": 84,
        "fullcodeline": "y_type = MCHAR;"
    },
    {
        "line": 176,
        "fullcodeline": "curbuf->b_op_end = curwin->w_cursor;\t// default for '] mark"
    },
    {
        "line": 180,
        "fullcodeline": "y_type = MLINE;"
    },
    {
        "line": 182,
        "fullcodeline": "if (y_size == 0 || y_array == NULL)"
    },
    {
        "line": 191,
        "fullcodeline": "lnum = curwin->w_cursor.lnum + y_size + 1;"
    },
    {
        "line": 227,
        "fullcodeline": "if (cur_ve_flags == VE_ALL && y_type == MCHAR)"
    },
    {
        "line": 257,
        "fullcodeline": "int\tc = gchar_cursor();"
    },
    {
        "line": 258,
        "fullcodeline": "colnr_T\tendcol2 = 0;"
    },
    {
        "line": 278,
        "fullcodeline": "col += curwin->w_cursor.coladd;"
    },
    {
        "line": 295,
        "fullcodeline": "curwin->w_cursor.coladd = 0;"
    },
    {
        "line": 296,
        "fullcodeline": "bd.textcol = 0;"
    },
    {
        "line": 429,
        "fullcodeline": "changed_lines(lnum, 0, curwin->w_cursor.lnum, nr_lines);"
    },
    {
        "line": 436,
        "fullcodeline": "curbuf->b_op_end.lnum = curwin->w_cursor.lnum - 1;"
    },
    {
        "line": 437,
        "fullcodeline": "curbuf->b_op_end.col = bd.textcol + totlen - 1;"
    },
    {
        "line": 438,
        "fullcodeline": "curbuf->b_op_end.coladd = 0;"
    },
    {
        "line": 63,
        "fullcodeline": "if ((flags & PUT_CURSEND) && gchar_cursor() != NUL)"
    },
    {
        "line": 124,
        "fullcodeline": "y_size = 1;\t\t// use fake one-line yank register"
    },
    {
        "line": 125,
        "fullcodeline": "y_array = &insert_string;"
    },
    {
        "line": 130,
        "fullcodeline": "get_yank_register(regname, FALSE);"
    },
    {
        "line": 132,
        "fullcodeline": "y_type = y_current->y_type;"
    },
    {
        "line": 133,
        "fullcodeline": "y_width = y_current->y_width;"
    },
    {
        "line": 134,
        "fullcodeline": "y_size = y_current->y_size;"
    },
    {
        "line": 135,
        "fullcodeline": "y_array = y_current->y_array;"
    },
    {
        "line": 136,
        "fullcodeline": "y_current_used = y_current;"
    },
    {
        "line": 141,
        "fullcodeline": "if (flags & PUT_LINE_SPLIT)"
    },
    {
        "line": 169,
        "fullcodeline": "if (flags & PUT_LINE_FORWARD)"
    },
    {
        "line": 184,
        "fullcodeline": "semsg(_(e_nothing_in_register_str),"
    },
    {
        "line": 192,
        "fullcodeline": "if (lnum > curbuf->b_ml.ml_line_count)"
    },
    {
        "line": 194,
        "fullcodeline": "if (u_save(curwin->w_cursor.lnum - 1, lnum) == FAIL)"
    },
    {
        "line": 229,
        "fullcodeline": "if (gchar_cursor() == TAB)"
    },
    {
        "line": 260,
        "fullcodeline": "if (dir == FORWARD && c != NUL)"
    },
    {
        "line": 297,
        "fullcodeline": "for (i = 0; i < y_size; ++i)"
    },
    {
        "line": 490,
        "fullcodeline": "new_cursor = curwin->w_cursor;"
    },
    {
        "line": 58,
        "fullcodeline": "stuffcharReadbuff(VIsual_mode);"
    },
    {
        "line": 64,
        "fullcodeline": "stuffcharReadbuff('l');"
    },
    {
        "line": 149,
        "fullcodeline": "p = ml_get_cursor();"
    },
    {
        "line": 152,
        "fullcodeline": "ptr = vim_strsave(p);"
    },
    {
        "line": 155,
        "fullcodeline": "ml_append(curwin->w_cursor.lnum, ptr, (colnr_T)0, FALSE);"
    },
    {
        "line": 158,
        "fullcodeline": "oldp = ml_get_curline();"
    },
    {
        "line": 159,
        "fullcodeline": "p = oldp + curwin->w_cursor.col;"
    },
    {
        "line": 162,
        "fullcodeline": "ptr = vim_strnsave(oldp, p - oldp);"
    },
    {
        "line": 165,
        "fullcodeline": "ml_replace(curwin->w_cursor.lnum, ptr, FALSE);"
    },
    {
        "line": 166,
        "fullcodeline": "++nr_lines;"
    },
    {
        "line": 167,
        "fullcodeline": "dir = FORWARD;"
    },
    {
        "line": 172,
        "fullcodeline": "curwin->w_cursor = curbuf->b_visual.vi_end;"
    },
    {
        "line": 173,
        "fullcodeline": "dir = FORWARD;"
    },
    {
        "line": 185,
        "fullcodeline": "regname == 0 ? (char_u *)\"\\\"\" : transchar(regname));"
    },
    {
        "line": 193,
        "fullcodeline": "lnum = curbuf->b_ml.ml_line_count + 1;"
    },
    {
        "line": 197,
        "fullcodeline": "else if (y_type == MLINE)"
    },
    {
        "line": 231,
        "fullcodeline": "int viscol = getviscol();"
    },
    {
        "line": 232,
        "fullcodeline": "int ts = curbuf->b_p_ts;"
    },
    {
        "line": 273,
        "fullcodeline": "++col;"
    },
    {
        "line": 279,
        "fullcodeline": "if (cur_ve_flags == VE_ALL"
    },
    {
        "line": 280,
        "fullcodeline": "&& (curwin->w_cursor.coladd > 0"
    },
    {
        "line": 299,
        "fullcodeline": "int\t\t    spaces = 0;"
    },
    {
        "line": 303,
        "fullcodeline": "bd.startspaces = 0;"
    },
    {
        "line": 304,
        "fullcodeline": "bd.endspaces = 0;"
    },
    {
        "line": 306,
        "fullcodeline": "delcount = 0;"
    },
    {
        "line": 317,
        "fullcodeline": "oldp = ml_get_curline();"
    },
    {
        "line": 318,
        "fullcodeline": "oldlen = (int)STRLEN(oldp);"
    },
    {
        "line": 319,
        "fullcodeline": "init_chartabsize_arg(&cts, curwin, curwin->w_cursor.lnum, 0,"
    },
    {
        "line": 328,
        "fullcodeline": "vcol = cts.cts_vcol;"
    },
    {
        "line": 329,
        "fullcodeline": "ptr = cts.cts_ptr;"
    },
    {
        "line": 330,
        "fullcodeline": "bd.textcol = (colnr_T)(ptr - oldp);"
    },
    {
        "line": 331,
        "fullcodeline": "clear_chartabsize_arg(&cts);"
    },
    {
        "line": 333,
        "fullcodeline": "shortline = (vcol < col) || (vcol == col && !*ptr) ;"
    },
    {
        "line": 355,
        "fullcodeline": "yanklen = (int)STRLEN(y_array[i]);"
    },
    {
        "line": 385,
        "fullcodeline": "totlen = count * (yanklen + spaces) + bd.startspaces + bd.endspaces;"
    },
    {
        "line": 386,
        "fullcodeline": "newp = alloc(totlen + oldlen + 1);"
    },
    {
        "line": 391,
        "fullcodeline": "ptr = newp;"
    },
    {
        "line": 392,
        "fullcodeline": "mch_memmove(ptr, oldp, (size_t)bd.textcol);"
    },
    {
        "line": 393,
        "fullcodeline": "ptr += bd.textcol;"
    },
    {
        "line": 396,
        "fullcodeline": "vim_memset(ptr, ' ', (size_t)bd.startspaces);"
    },
    {
        "line": 397,
        "fullcodeline": "ptr += bd.startspaces;"
    },
    {
        "line": 416,
        "fullcodeline": "vim_memset(ptr, ' ', (size_t)bd.endspaces);"
    },
    {
        "line": 417,
        "fullcodeline": "ptr += bd.endspaces;"
    },
    {
        "line": 422,
        "fullcodeline": "ml_replace(curwin->w_cursor.lnum, newp, FALSE);"
    },
    {
        "line": 424,
        "fullcodeline": "++curwin->w_cursor.lnum;"
    },
    {
        "line": 444,
        "fullcodeline": "curwin->w_cursor.col++;"
    },
    {
        "line": 447,
        "fullcodeline": "len = (colnr_T)STRLEN(ml_get_curline());"
    },
    {
        "line": 457,
        "fullcodeline": "if (y_type == MCHAR)"
    },
    {
        "line": 60,
        "fullcodeline": "(count == -1 ? 'O' : 'i')), count, FALSE);"
    },
    {
        "line": 73,
        "fullcodeline": "else if (get_spec_reg(regname, &insert_string, &allocated, TRUE)"
    },
    {
        "line": 74,
        "fullcodeline": "&& insert_string == NULL)"
    },
    {
        "line": 147,
        "fullcodeline": "if (u_save_cursor() == FAIL)"
    },
    {
        "line": 150,
        "fullcodeline": "if (dir == FORWARD && *p != NUL)"
    },
    {
        "line": 153,
        "fullcodeline": "if (ptr == NULL)"
    },
    {
        "line": 163,
        "fullcodeline": "if (ptr == NULL)"
    },
    {
        "line": 199,
        "fullcodeline": "lnum = curwin->w_cursor.lnum;"
    },
    {
        "line": 262,
        "fullcodeline": "if (cur_ve_flags == VE_ALL)"
    },
    {
        "line": 276,
        "fullcodeline": "getvcol(curwin, &curwin->w_cursor, &col, NULL, &endcol2);"
    },
    {
        "line": 281,
        "fullcodeline": "|| endcol2 == curwin->w_cursor.col))"
    },
    {
        "line": 287,
        "fullcodeline": "if (c == TAB)"
    },
    {
        "line": 309,
        "fullcodeline": "if (curwin->w_cursor.lnum > curbuf->b_ml.ml_line_count)"
    },
    {
        "line": 335,
        "fullcodeline": "if (vcol < col) // line too short, padd with spaces"
    },
    {
        "line": 387,
        "fullcodeline": "if (newp == NULL)"
    },
    {
        "line": 400,
        "fullcodeline": "for (j = 0; j < count; ++j)"
    },
    {
        "line": 421,
        "fullcodeline": "(size_t)(oldlen - bd.textcol - delcount + 1));"
    },
    {
        "line": 425,
        "fullcodeline": "if (i == 0)"
    },
    {
        "line": 448,
        "fullcodeline": "if (curwin->w_cursor.col > len)"
    },
    {
        "line": 493,
        "fullcodeline": "if (y_type == MCHAR && y_size == 1)"
    },
    {
        "line": 495,
        "fullcodeline": "linenr_T\tend_lnum = 0; // init for gcc"
    },
    {
        "line": 496,
        "fullcodeline": "linenr_T\tstart_lnum = lnum;"
    },
    {
        "line": 497,
        "fullcodeline": "int\t\tfirst_byte_off = 0;"
    },
    {
        "line": 151,
        "fullcodeline": "MB_PTR_ADV(p);"
    },
    {
        "line": 160,
        "fullcodeline": "if (dir == FORWARD && *p != NUL)"
    },
    {
        "line": 161,
        "fullcodeline": "MB_PTR_ADV(p);"
    },
    {
        "line": 208,
        "fullcodeline": "if (dir == FORWARD)"
    },
    {
        "line": 212,
        "fullcodeline": "if ((BUFEMPTY() ? u_save(0, 2) : u_save(lnum - 1, lnum)) == FAIL)"
    },
    {
        "line": 236,
        "fullcodeline": "if (dir == FORWARD ?"
    },
    {
        "line": 240,
        "fullcodeline": "ts - (viscol % ts) != 1"
    },
    {
        "line": 242,
        "fullcodeline": ": curwin->w_cursor.coladd > 0)"
    },
    {
        "line": 247,
        "fullcodeline": "else if (curwin->w_cursor.coladd > 0 || gchar_cursor() == NUL)"
    },
    {
        "line": 263,
        "fullcodeline": "getvcol(curwin, &curwin->w_cursor, &col, NULL, &endcol2);"
    },
    {
        "line": 269,
        "fullcodeline": "curwin->w_cursor.col += (*mb_ptr2len)(ml_get_cursor());"
    },
    {
        "line": 283,
        "fullcodeline": "if (dir == FORWARD && c == NUL)"
    },
    {
        "line": 284,
        "fullcodeline": "++col;"
    },
    {
        "line": 285,
        "fullcodeline": "if (dir != FORWARD && c != NUL && curwin->w_cursor.coladd > 0)"
    },
    {
        "line": 286,
        "fullcodeline": "++curwin->w_cursor.col;"
    },
    {
        "line": 314,
        "fullcodeline": "++nr_lines;"
    },
    {
        "line": 322,
        "fullcodeline": "while (cts.cts_vcol < col && *cts.cts_ptr != NUL)"
    },
    {
        "line": 325,
        "fullcodeline": "incr = lbr_chartabsize_adv(&cts);"
    },
    {
        "line": 326,
        "fullcodeline": "cts.cts_vcol += incr;"
    },
    {
        "line": 336,
        "fullcodeline": "bd.startspaces = col - vcol;"
    },
    {
        "line": 357,
        "fullcodeline": "if ((flags & PUT_BLOCK_INNER) == 0)"
    },
    {
        "line": 361,
        "fullcodeline": "spaces = y_width + 1;"
    },
    {
        "line": 362,
        "fullcodeline": "init_chartabsize_arg(&cts, curwin, 0, 0,"
    },
    {
        "line": 370,
        "fullcodeline": "clear_chartabsize_arg(&cts);"
    },
    {
        "line": 377,
        "fullcodeline": "if (yanklen + spaces != 0"
    },
    {
        "line": 378,
        "fullcodeline": "&& count > ((INT_MAX - (bd.startspaces + bd.endspaces))"
    },
    {
        "line": 402,
        "fullcodeline": "mch_memmove(ptr, y_array[i], (size_t)yanklen);"
    },
    {
        "line": 403,
        "fullcodeline": "ptr += yanklen;"
    },
    {
        "line": 426,
        "fullcodeline": "curwin->w_cursor.col += bd.startspaces;"
    },
    {
        "line": 594,
        "fullcodeline": "linenr_T\tnew_lnum = new_cursor.lnum;"
    },
    {
        "line": 714,
        "fullcodeline": "len = STRLEN(y_array[y_size - 1]);"
    },
    {
        "line": 715,
        "fullcodeline": "col = (colnr_T)len - lendiff;"
    },
    {
        "line": 209,
        "fullcodeline": "++lnum;"
    },
    {
        "line": 222,
        "fullcodeline": "else if (u_save_cursor() == FAIL)"
    },
    {
        "line": 245,
        "fullcodeline": "curwin->w_cursor.coladd = 0;"
    },
    {
        "line": 265,
        "fullcodeline": "getvcol(curwin, &curwin->w_cursor, NULL, NULL, &col);"
    },
    {
        "line": 289,
        "fullcodeline": "if (dir == BACKWARD && curwin->w_cursor.col)"
    },
    {
        "line": 364,
        "fullcodeline": "for (j = 0; j < yanklen; j++)"
    },
    {
        "line": 371,
        "fullcodeline": "if (spaces < 0)"
    },
    {
        "line": 381,
        "fullcodeline": "emsg(_(e_resulting_text_too_long));"
    },
    {
        "line": 406,
        "fullcodeline": "if ((j < count - 1 || !shortline) && spaces)"
    },
    {
        "line": 461,
        "fullcodeline": "if (dir == FORWARD && gchar_cursor() != NUL)"
    },
    {
        "line": 488,
        "fullcodeline": "else if (dir == BACKWARD)"
    },
    {
        "line": 501,
        "fullcodeline": "end_lnum = curbuf->b_visual.vi_end.lnum;"
    },
    {
        "line": 518,
        "fullcodeline": "if (count == 0 || yanklen == 0)"
    },
    {
        "line": 587,
        "fullcodeline": "if (totlen && (restart_edit != 0 || (flags & PUT_CURSEND)))"
    },
    {
        "line": 599,
        "fullcodeline": "for (cnt = 1; cnt <= count; ++cnt)"
    },
    {
        "line": 678,
        "fullcodeline": "if (y_type == MLINE)"
    },
    {
        "line": 686,
        "fullcodeline": "if (curbuf->b_op_start.lnum + (y_type == MCHAR) - 1 + nr_lines"
    },
    {
        "line": 696,
        "fullcodeline": "if (y_type == MCHAR)"
    },
    {
        "line": 716,
        "fullcodeline": "if (col > 1)"
    },
    {
        "line": 726,
        "fullcodeline": "if (flags & PUT_CURSLINE)"
    },
    {
        "line": 290,
        "fullcodeline": "curwin->w_cursor.col--;"
    },
    {
        "line": 291,
        "fullcodeline": "if (dir == FORWARD && col - 1 == endcol2)"
    },
    {
        "line": 292,
        "fullcodeline": "curwin->w_cursor.col++;"
    },
    {
        "line": 311,
        "fullcodeline": "if (ml_append(curbuf->b_ml.ml_line_count, (char_u *)\"\","
    },
    {
        "line": 337,
        "fullcodeline": "else if (vcol > col)"
    },
    {
        "line": 366,
        "fullcodeline": "spaces -= lbr_chartabsize(&cts);"
    },
    {
        "line": 367,
        "fullcodeline": "++cts.cts_ptr;"
    },
    {
        "line": 368,
        "fullcodeline": "cts.cts_vcol = 0;"
    },
    {
        "line": 372,
        "fullcodeline": "spaces = 0;"
    },
    {
        "line": 408,
        "fullcodeline": "vim_memset(ptr, ' ', (size_t)spaces);"
    },
    {
        "line": 409,
        "fullcodeline": "ptr += spaces;"
    },
    {
        "line": 489,
        "fullcodeline": "--lnum;"
    },
    {
        "line": 502,
        "fullcodeline": "if (end_lnum < curbuf->b_visual.vi_start.lnum)"
    },
    {
        "line": 504,
        "fullcodeline": "if (end_lnum > start_lnum)"
    },
    {
        "line": 601,
        "fullcodeline": "i = 0;"
    },
    {
        "line": 692,
        "fullcodeline": "mark_adjust(curbuf->b_op_start.lnum + (y_type == MCHAR),"
    },
    {
        "line": 697,
        "fullcodeline": "changed_lines(curwin->w_cursor.lnum, col,"
    },
    {
        "line": 702,
        "fullcodeline": "if (y_current_used != NULL && (y_current_used != y_current"
    },
    {
        "line": 718,
        "fullcodeline": "curbuf->b_op_end.col = col - 1;"
    },
    {
        "line": 248,
        "fullcodeline": "coladvance_force(getviscol() + (dir == FORWARD));"
    },
    {
        "line": 271,
        "fullcodeline": "if (c != TAB || cur_ve_flags != VE_ALL)"
    },
    {
        "line": 272,
        "fullcodeline": "++curwin->w_cursor.col;"
    },
    {
        "line": 339,
        "fullcodeline": "bd.endspaces = vcol - col;"
    },
    {
        "line": 340,
        "fullcodeline": "bd.startspaces = incr - bd.endspaces;"
    },
    {
        "line": 341,
        "fullcodeline": "--bd.textcol;"
    },
    {
        "line": 342,
        "fullcodeline": "delcount = 1;"
    },
    {
        "line": 412,
        "fullcodeline": "totlen -= spaces;  // didn't use these spaces"
    },
    {
        "line": 465,
        "fullcodeline": "int bytelen = (*mb_ptr2len)(ml_get_cursor());"
    },
    {
        "line": 468,
        "fullcodeline": "col += bytelen;"
    },
    {
        "line": 503,
        "fullcodeline": "end_lnum = curbuf->b_visual.vi_start.lnum;"
    },
    {
        "line": 511,
        "fullcodeline": "pos.lnum = lnum;"
    },
    {
        "line": 512,
        "fullcodeline": "pos.col = col;"
    },
    {
        "line": 513,
        "fullcodeline": "pos.coladd = 0;"
    },
    {
        "line": 514,
        "fullcodeline": "getvcol(curwin, &pos, NULL, &vcol, NULL);"
    },
    {
        "line": 523,
        "fullcodeline": "else if (count > INT_MAX / yanklen)"
    },
    {
        "line": 602,
        "fullcodeline": "if (y_type == MCHAR)"
    },
    {
        "line": 634,
        "fullcodeline": "for (; i < y_size; ++i)"
    },
    {
        "line": 672,
        "fullcodeline": "if (cnt == 1)"
    },
    {
        "line": 681,
        "fullcodeline": "if (dir == FORWARD)"
    },
    {
        "line": 693,
        "fullcodeline": "(linenr_T)MAXLNUM, nr_lines, 0L);"
    },
    {
        "line": 700,
        "fullcodeline": "changed_lines(curbuf->b_op_start.lnum, 0,"
    },
    {
        "line": 703,
        "fullcodeline": "|| y_current->y_array != y_array))"
    },
    {
        "line": 707,
        "fullcodeline": "emsg(_(e_yank_register_changed_while_using_it));"
    },
    {
        "line": 719,
        "fullcodeline": "if (len > 0)"
    },
    {
        "line": 730,
        "fullcodeline": "beginline(BL_WHITE | BL_FIX);"
    },
    {
        "line": 345,
        "fullcodeline": "if (oldp[bd.textcol] != TAB)"
    },
    {
        "line": 477,
        "fullcodeline": "++col;"
    },
    {
        "line": 607,
        "fullcodeline": "lnum = new_cursor.lnum;"
    },
    {
        "line": 608,
        "fullcodeline": "ptr = ml_get(lnum) + col;"
    },
    {
        "line": 609,
        "fullcodeline": "totlen = (int)STRLEN(y_array[y_size - 1]);"
    },
    {
        "line": 610,
        "fullcodeline": "newp = alloc(STRLEN(ptr) + totlen + 1);"
    },
    {
        "line": 613,
        "fullcodeline": "STRCPY(newp, y_array[y_size - 1]);"
    },
    {
        "line": 614,
        "fullcodeline": "STRCAT(newp, ptr);"
    },
    {
        "line": 616,
        "fullcodeline": "ml_append(lnum, newp, (colnr_T)0, FALSE);"
    },
    {
        "line": 617,
        "fullcodeline": "++new_lnum;"
    },
    {
        "line": 620,
        "fullcodeline": "oldp = ml_get(lnum);"
    },
    {
        "line": 621,
        "fullcodeline": "newp = alloc(col + yanklen + 1);"
    },
    {
        "line": 625,
        "fullcodeline": "mch_memmove(newp, oldp, (size_t)col);"
    },
    {
        "line": 627,
        "fullcodeline": "mch_memmove(newp + col, y_array[0], (size_t)(yanklen + 1));"
    },
    {
        "line": 628,
        "fullcodeline": "ml_replace(lnum, newp, FALSE);"
    },
    {
        "line": 630,
        "fullcodeline": "curwin->w_cursor.lnum = lnum;"
    },
    {
        "line": 631,
        "fullcodeline": "i = 1;"
    },
    {
        "line": 643,
        "fullcodeline": "lnum++;"
    },
    {
        "line": 644,
        "fullcodeline": "++nr_lines;"
    },
    {
        "line": 673,
        "fullcodeline": "new_lnum = lnum;"
    },
    {
        "line": 682,
        "fullcodeline": "curbuf->b_op_start.lnum++;"
    },
    {
        "line": 344,
        "fullcodeline": "bd.textcol -= (*mb_head_off)(oldp, oldp + bd.textcol);"
    },
    {
        "line": 350,
        "fullcodeline": "delcount = 0;"
    },
    {
        "line": 351,
        "fullcodeline": "bd.endspaces = 0;"
    },
    {
        "line": 471,
        "fullcodeline": "curwin->w_cursor.col += bytelen;"
    },
    {
        "line": 472,
        "fullcodeline": "curbuf->b_op_end.col += bytelen;"
    },
    {
        "line": 525,
        "fullcodeline": "emsg(_(e_resulting_text_too_long));"
    },
    {
        "line": 528,
        "fullcodeline": "totlen = count * yanklen;"
    },
    {
        "line": 611,
        "fullcodeline": "if (newp == NULL)"
    },
    {
        "line": 622,
        "fullcodeline": "if (newp == NULL)"
    },
    {
        "line": 645,
        "fullcodeline": "if (flags & PUT_FIXINDENT)"
    },
    {
        "line": 720,
        "fullcodeline": "curbuf->b_op_end.col -= mb_head_off(y_array[y_size - 1],"
    },
    {
        "line": 480,
        "fullcodeline": "++curwin->w_cursor.col;"
    },
    {
        "line": 481,
        "fullcodeline": "++curbuf->b_op_end.col;"
    },
    {
        "line": 576,
        "fullcodeline": "} while (VIsual_active && lnum <= end_lnum);"
    },
    {
        "line": 636,
        "fullcodeline": "if (y_type != MCHAR || i < y_size - 1)"
    },
    {
        "line": 641,
        "fullcodeline": "new_lnum++;"
    },
    {
        "line": 647,
        "fullcodeline": "old_pos = curwin->w_cursor;"
    },
    {
        "line": 648,
        "fullcodeline": "curwin->w_cursor.lnum = lnum;"
    },
    {
        "line": 649,
        "fullcodeline": "ptr = ml_get(lnum);"
    },
    {
        "line": 666,
        "fullcodeline": "curwin->w_cursor = old_pos;"
    },
    {
        "line": 721,
        "fullcodeline": "y_array[y_size - 1] + len - 1);"
    },
    {
        "line": 530,
        "fullcodeline": "oldp = ml_get(lnum);"
    },
    {
        "line": 531,
        "fullcodeline": "oldlen = (int)STRLEN(oldp);"
    },
    {
        "line": 547,
        "fullcodeline": "newp = alloc(totlen + oldlen + 1);"
    },
    {
        "line": 550,
        "fullcodeline": "mch_memmove(newp, oldp, (size_t)col);"
    },
    {
        "line": 551,
        "fullcodeline": "ptr = newp + col;"
    },
    {
        "line": 557,
        "fullcodeline": "STRMOVE(ptr, oldp + col);"
    },
    {
        "line": 560,
        "fullcodeline": "first_byte_off = mb_head_off(newp, ptr - 1);"
    },
    {
        "line": 563,
        "fullcodeline": "ml_replace(lnum, newp, FALSE);"
    },
    {
        "line": 565,
        "fullcodeline": "inserted_bytes(lnum, col, totlen);"
    },
    {
        "line": 650,
        "fullcodeline": "if (cnt == count && i == y_size - 1)"
    },
    {
        "line": 665,
        "fullcodeline": "(void)set_indent(indent, 0);"
    },
    {
        "line": 668,
        "fullcodeline": "if (cnt == count && i == y_size - 1)"
    },
    {
        "line": 532,
        "fullcodeline": "if (lnum > start_lnum)"
    },
    {
        "line": 542,
        "fullcodeline": "if (VIsual_active && col > oldlen)"
    },
    {
        "line": 548,
        "fullcodeline": "if (newp == NULL)"
    },
    {
        "line": 552,
        "fullcodeline": "for (i = 0; i < count; ++i)"
    },
    {
        "line": 568,
        "fullcodeline": "if (lnum == curwin->w_cursor.lnum)"
    },
    {
        "line": 638,
        "fullcodeline": "if (ml_append(lnum, y_array[i], (colnr_T)0, FALSE)"
    },
    {
        "line": 651,
        "fullcodeline": "lendiff = (int)STRLEN(ptr);"
    },
    {
        "line": 652,
        "fullcodeline": "if (*ptr == '#' && preprocs_left())"
    },
    {
        "line": 653,
        "fullcodeline": "indent = 0;     // Leave # lines at start"
    },
    {
        "line": 669,
        "fullcodeline": "lendiff -= (int)STRLEN(ml_get(lnum));"
    },
    {
        "line": 737,
        "fullcodeline": "if (lnum >= curbuf->b_ml.ml_line_count)"
    },
    {
        "line": 745,
        "fullcodeline": "curwin->w_cursor.lnum = new_lnum;"
    },
    {
        "line": 746,
        "fullcodeline": "curwin->w_cursor.col = col;"
    },
    {
        "line": 536,
        "fullcodeline": "pos.lnum = lnum;"
    },
    {
        "line": 544,
        "fullcodeline": "lnum++;"
    },
    {
        "line": 554,
        "fullcodeline": "mch_memmove(ptr, y_array[0], (size_t)yanklen);"
    },
    {
        "line": 555,
        "fullcodeline": "ptr += yanklen;"
    },
    {
        "line": 572,
        "fullcodeline": "curwin->w_cursor.col += (colnr_T)(totlen - 1);"
    },
    {
        "line": 575,
        "fullcodeline": "lnum++;"
    },
    {
        "line": 748,
        "fullcodeline": "if (col > 1)"
    },
    {
        "line": 758,
        "fullcodeline": "beginline(BL_WHITE | BL_FIX);"
    },
    {
        "line": 537,
        "fullcodeline": "if (getvpos(&pos, vcol) == OK)"
    },
    {
        "line": 655,
        "fullcodeline": "if (*ptr == NUL)"
    },
    {
        "line": 538,
        "fullcodeline": "col = pos.col;"
    },
    {
        "line": 656,
        "fullcodeline": "indent = 0;     // Ignore empty lines"
    },
    {
        "line": 749,
        "fullcodeline": "curbuf->b_op_end.col = col - 1;"
    },
    {
        "line": 540,
        "fullcodeline": "col = MAXCOL;"
    },
    {
        "line": 659,
        "fullcodeline": "indent_diff = orig_indent - get_indent();"
    },
    {
        "line": 660,
        "fullcodeline": "indent = orig_indent;"
    },
    {
        "line": 663,
        "fullcodeline": "else if ((indent = get_indent() + indent_diff) < 0)"
    },
    {
        "line": 664,
        "fullcodeline": "indent = 0;"
    }
]