[
    {
        "line": 13,
        "fullcodeline": "int t = lua_type(lua,-1);"
    },
    {
        "line": 141,
        "fullcodeline": "lua_pop(lua,1);"
    },
    {
        "line": 3,
        "fullcodeline": "if (!lua_checkstack(lua, 4)) {"
    },
    {
        "line": 8,
        "fullcodeline": "addReplyErrorFormat(c, \"reached lua stack limit\");"
    },
    {
        "line": 9,
        "fullcodeline": "lua_pop(lua,1); // pop the element from the stack"
    },
    {
        "line": 17,
        "fullcodeline": "addReplyBulkCBuffer(c,(char*)lua_tostring(lua,-1),lua_strlen(lua,-1));"
    },
    {
        "line": 27,
        "fullcodeline": "addReplyLongLong(c,(long long)lua_tonumber(lua,-1));"
    },
    {
        "line": 37,
        "fullcodeline": "lua_pushstring(lua,\"err\");"
    },
    {
        "line": 38,
        "fullcodeline": "lua_gettable(lua,-2);"
    },
    {
        "line": 39,
        "fullcodeline": "t = lua_type(lua,-1);"
    },
    {
        "line": 48,
        "fullcodeline": "lua_pop(lua,1); /* Discard field name pushed before. */"
    },
    {
        "line": 51,
        "fullcodeline": "lua_pushstring(lua,\"ok\");"
    },
    {
        "line": 52,
        "fullcodeline": "lua_gettable(lua,-2);"
    },
    {
        "line": 53,
        "fullcodeline": "t = lua_type(lua,-1);"
    },
    {
        "line": 62,
        "fullcodeline": "lua_pop(lua,1); /* Discard field name pushed before. */"
    },
    {
        "line": 65,
        "fullcodeline": "lua_pushstring(lua,\"double\");"
    },
    {
        "line": 66,
        "fullcodeline": "lua_gettable(lua,-2);"
    },
    {
        "line": 67,
        "fullcodeline": "t = lua_type(lua,-1);"
    },
    {
        "line": 73,
        "fullcodeline": "lua_pop(lua,1); /* Discard field name pushed before. */"
    },
    {
        "line": 76,
        "fullcodeline": "lua_pushstring(lua,\"map\");"
    },
    {
        "line": 77,
        "fullcodeline": "lua_gettable(lua,-2);"
    },
    {
        "line": 78,
        "fullcodeline": "t = lua_type(lua,-1);"
    },
    {
        "line": 96,
        "fullcodeline": "lua_pop(lua,1); /* Discard field name pushed before. */"
    },
    {
        "line": 99,
        "fullcodeline": "lua_pushstring(lua,\"set\");"
    },
    {
        "line": 100,
        "fullcodeline": "lua_gettable(lua,-2);"
    },
    {
        "line": 101,
        "fullcodeline": "t = lua_type(lua,-1);"
    },
    {
        "line": 119,
        "fullcodeline": "lua_pop(lua,1); /* Discard field name pushed before. */"
    },
    {
        "line": 122,
        "fullcodeline": "void *replylen = addReplyDeferredLen(c);"
    },
    {
        "line": 123,
        "fullcodeline": "int j = 1, mbulklen = 0;"
    },
    {
        "line": 136,
        "fullcodeline": "setDeferredArrayLen(c,replylen,mbulklen);"
    },
    {
        "line": 139,
        "fullcodeline": "addReplyNull(c);"
    },
    {
        "line": 20,
        "fullcodeline": "if (server.lua_client->resp == 2)"
    },
    {
        "line": 40,
        "fullcodeline": "if (t == LUA_TSTRING) {"
    },
    {
        "line": 54,
        "fullcodeline": "if (t == LUA_TSTRING) {"
    },
    {
        "line": 68,
        "fullcodeline": "if (t == LUA_TNUMBER) {"
    },
    {
        "line": 79,
        "fullcodeline": "if (t == LUA_TTABLE) {"
    },
    {
        "line": 102,
        "fullcodeline": "if (t == LUA_TTABLE) {"
    },
    {
        "line": 21,
        "fullcodeline": "addReply(c,lua_toboolean(lua,-1) ? shared.cone :"
    },
    {
        "line": 41,
        "fullcodeline": "sds err = sdsnew(lua_tostring(lua,-1));"
    },
    {
        "line": 42,
        "fullcodeline": "sdsmapchars(err,\"\\r\\n\",\"  \",2);"
    },
    {
        "line": 43,
        "fullcodeline": "addReplySds(c,sdscatprintf(sdsempty(),\"-%s\\r\\n\",err));"
    },
    {
        "line": 44,
        "fullcodeline": "sdsfree(err);"
    },
    {
        "line": 45,
        "fullcodeline": "lua_pop(lua,2);"
    },
    {
        "line": 55,
        "fullcodeline": "sds ok = sdsnew(lua_tostring(lua,-1));"
    },
    {
        "line": 56,
        "fullcodeline": "sdsmapchars(ok,\"\\r\\n\",\"  \",2);"
    },
    {
        "line": 57,
        "fullcodeline": "addReplySds(c,sdscatprintf(sdsempty(),\"+%s\\r\\n\",ok));"
    },
    {
        "line": 58,
        "fullcodeline": "sdsfree(ok);"
    },
    {
        "line": 59,
        "fullcodeline": "lua_pop(lua,2);"
    },
    {
        "line": 69,
        "fullcodeline": "addReplyDouble(c,lua_tonumber(lua,-1));"
    },
    {
        "line": 70,
        "fullcodeline": "lua_pop(lua,2);"
    },
    {
        "line": 80,
        "fullcodeline": "int maplen = 0;"
    },
    {
        "line": 81,
        "fullcodeline": "void *replylen = addReplyDeferredLen(c);"
    },
    {
        "line": 83,
        "fullcodeline": "lua_pushnil(lua); /* Use nil to start iteration. */"
    },
    {
        "line": 92,
        "fullcodeline": "setDeferredMapLen(c,replylen,maplen);"
    },
    {
        "line": 93,
        "fullcodeline": "lua_pop(lua,2);"
    },
    {
        "line": 103,
        "fullcodeline": "int setlen = 0;"
    },
    {
        "line": 104,
        "fullcodeline": "void *replylen = addReplyDeferredLen(c);"
    },
    {
        "line": 106,
        "fullcodeline": "lua_pushnil(lua); /* Use nil to start iteration. */"
    },
    {
        "line": 115,
        "fullcodeline": "setDeferredSetLen(c,replylen,setlen);"
    },
    {
        "line": 116,
        "fullcodeline": "lua_pop(lua,2);"
    },
    {
        "line": 126,
        "fullcodeline": "lua_pushnumber(lua,j++);"
    },
    {
        "line": 127,
        "fullcodeline": "lua_gettable(lua,-2);"
    },
    {
        "line": 128,
        "fullcodeline": "t = lua_type(lua,-1);"
    },
    {
        "line": 133,
        "fullcodeline": "luaReplyToRedisReply(c, lua);"
    },
    {
        "line": 134,
        "fullcodeline": "mbulklen++;"
    },
    {
        "line": 24,
        "fullcodeline": "addReplyBool(c,lua_toboolean(lua,-1));"
    },
    {
        "line": 84,
        "fullcodeline": "while (lua_next(lua,-2)) {"
    },
    {
        "line": 107,
        "fullcodeline": "while (lua_next(lua,-2)) {"
    },
    {
        "line": 129,
        "fullcodeline": "if (t == LUA_TNIL) {"
    },
    {
        "line": 86,
        "fullcodeline": "lua_pushvalue(lua,-2);        /* Dup key before consuming. */"
    },
    {
        "line": 87,
        "fullcodeline": "luaReplyToRedisReply(c, lua); /* Return key. */"
    },
    {
        "line": 88,
        "fullcodeline": "luaReplyToRedisReply(c, lua); /* Return value. */"
    },
    {
        "line": 90,
        "fullcodeline": "maplen++;"
    },
    {
        "line": 109,
        "fullcodeline": "lua_pop(lua,1);               /* Discard the boolean value. */"
    },
    {
        "line": 110,
        "fullcodeline": "lua_pushvalue(lua,-1);        /* Dup key before consuming. */"
    },
    {
        "line": 111,
        "fullcodeline": "luaReplyToRedisReply(c, lua); /* Return key. */"
    },
    {
        "line": 113,
        "fullcodeline": "setlen++;"
    },
    {
        "line": 130,
        "fullcodeline": "lua_pop(lua,1);"
    }
]