[
    {
        "line": 2,
        "fullcodeline": "check_assign(left, right)"
    },
    {
        "line": 5,
        "fullcodeline": "if isinstance(left.typ, BaseType):"
    },
    {
        "line": 6,
        "fullcodeline": "enc = right.encoding  # unwrap_location butchers encoding"
    },
    {
        "line": 7,
        "fullcodeline": "right = unwrap_location(right)"
    },
    {
        "line": 9,
        "fullcodeline": "if needs_clamp(right.typ, enc):"
    },
    {
        "line": 12,
        "fullcodeline": "return STORE(left, right)"
    },
    {
        "line": 15,
        "fullcodeline": "elif isinstance(left.typ, ByteArrayLike):"
    },
    {
        "line": 10,
        "fullcodeline": "right = clamp_basetype(right)"
    },
    {
        "line": 17,
        "fullcodeline": "if needs_clamp(right.typ, right.encoding):"
    },
    {
        "line": 24,
        "fullcodeline": "return IRnode.from_list(ret)"
    },
    {
        "line": 26,
        "fullcodeline": "elif isinstance(left.typ, DArrayType):"
    },
    {
        "line": 22,
        "fullcodeline": "ret = make_byte_array_copier(left, right)"
    },
    {
        "line": 18,
        "fullcodeline": "with right.cache_when_complex(\"bs_ptr\") as (b, right):"
    },
    {
        "line": 33,
        "fullcodeline": "if needs_clamp(right.typ, right.encoding):"
    },
    {
        "line": 40,
        "fullcodeline": "return IRnode.from_list(ret)"
    },
    {
        "line": 43,
        "fullcodeline": "elif isinstance(left.typ, (SArrayType, TupleLike)):"
    },
    {
        "line": 38,
        "fullcodeline": "ret = _dynarray_make_setter(left, right)"
    },
    {
        "line": 19,
        "fullcodeline": "copier = make_byte_array_copier(left, right)"
    },
    {
        "line": 20,
        "fullcodeline": "ret = b.resolve([\"seq\", clamp_bytestring(right), copier])"
    },
    {
        "line": 34,
        "fullcodeline": "with right.cache_when_complex(\"arr_ptr\") as (b, right):"
    },
    {
        "line": 44,
        "fullcodeline": "return _complex_make_setter(left, right)"
    },
    {
        "line": 35,
        "fullcodeline": "copier = _dynarray_make_setter(left, right)"
    },
    {
        "line": 36,
        "fullcodeline": "ret = b.resolve([\"seq\", clamp_dyn_array(right), copier])"
    }
]