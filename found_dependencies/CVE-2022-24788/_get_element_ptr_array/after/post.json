[
    {
        "line": 3,
        "fullcodeline": "assert isinstance(parent.typ, ArrayLike)"
    },
    {
        "line": 23,
        "fullcodeline": "ix = unwrap_location(key)"
    },
    {
        "line": 53,
        "fullcodeline": "ofst = _mul(ix, element_size)"
    },
    {
        "line": 5,
        "fullcodeline": "if not is_integer_type(key.typ):"
    },
    {
        "line": 10,
        "fullcodeline": "if parent.value == \"~empty\":"
    },
    {
        "line": 19,
        "fullcodeline": "if parent.value == \"multi\":"
    },
    {
        "line": 36,
        "fullcodeline": "if parent.encoding == Encoding.ABI:"
    },
    {
        "line": 55,
        "fullcodeline": "if has_length_word(parent.typ):"
    },
    {
        "line": 60,
        "fullcodeline": "return IRnode.from_list(add_ofst(data_ptr, ofst), typ=subtype, location=parent.location)"
    },
    {
        "line": 6,
        "fullcodeline": "raise TypeCheckFailure(f\"{key.typ} used as array index\")"
    },
    {
        "line": 20,
        "fullcodeline": "assert isinstance(key.value, int)"
    },
    {
        "line": 30,
        "fullcodeline": "clamp_op = \"uclamplt\""
    },
    {
        "line": 31,
        "fullcodeline": "is_darray = isinstance(parent.typ, DArrayType)"
    },
    {
        "line": 32,
        "fullcodeline": "bound = get_dyn_array_count(parent) if is_darray else parent.typ.count"
    },
    {
        "line": 34,
        "fullcodeline": "ix = IRnode.from_list([clamp_op, ix, bound], typ=ix.typ)"
    },
    {
        "line": 40,
        "fullcodeline": "member_abi_t = subtype.abi_type"
    },
    {
        "line": 42,
        "fullcodeline": "ofst = _mul(ix, member_abi_t.embedded_static_size())"
    },
    {
        "line": 47,
        "fullcodeline": "element_size = subtype.storage_size_in_words"
    },
    {
        "line": 56,
        "fullcodeline": "data_ptr = add_ofst(parent, parent.location.word_scale * DYNAMIC_ARRAY_OVERHEAD)"
    },
    {
        "line": 58,
        "fullcodeline": "data_ptr = parent"
    },
    {
        "line": 17,
        "fullcodeline": "return IRnode.from_list(\"~empty\", subtype)"
    },
    {
        "line": 37,
        "fullcodeline": "if parent.location == STORAGE:"
    },
    {
        "line": 44,
        "fullcodeline": "return _getelemptr_abi_helper(parent, subtype, ofst)"
    },
    {
        "line": 16,
        "fullcodeline": "raise TypeCheckFailure(\"indexing into zero array not allowed\")"
    },
    {
        "line": 38,
        "fullcodeline": "raise CompilerPanic(\"storage variables should not be abi encoded\")  # pragma: notest"
    },
    {
        "line": 49,
        "fullcodeline": "element_size = subtype.memory_bytes_required"
    },
    {
        "line": 51,
        "fullcodeline": "raise CompilerPanic(\"unreachable\")  # pragma: notest"
    }
]