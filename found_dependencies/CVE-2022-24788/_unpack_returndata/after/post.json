[
    {
        "line": 10,
        "fullcodeline": "return_t = new_type_to_old_type(ast_return_t)"
    },
    {
        "line": 11,
        "fullcodeline": "check_assign(dummy_node_for_type(return_t), dummy_node_for_type(contract_sig.return_type))"
    },
    {
        "line": 13,
        "fullcodeline": "return_t = calculate_type_for_external_return(return_t)"
    },
    {
        "line": 15,
        "fullcodeline": "abi_return_t = return_t.abi_type"
    },
    {
        "line": 17,
        "fullcodeline": "min_return_size = abi_return_t.min_size()"
    },
    {
        "line": 18,
        "fullcodeline": "max_return_size = abi_return_t.size_bound()"
    },
    {
        "line": 19,
        "fullcodeline": "assert 0 < min_return_size <= max_return_size"
    },
    {
        "line": 21,
        "fullcodeline": "ret_ofst = buf"
    },
    {
        "line": 22,
        "fullcodeline": "ret_len = max_return_size"
    },
    {
        "line": 25,
        "fullcodeline": "ret = []"
    },
    {
        "line": 32,
        "fullcodeline": "buf = IRnode.from_list("
    },
    {
        "line": 40,
        "fullcodeline": "assert isinstance(return_t, TupleType)"
    },
    {
        "line": 6,
        "fullcodeline": "if ast_return_t is None:"
    },
    {
        "line": 27,
        "fullcodeline": "if not skip_contract_check:"
    },
    {
        "line": 42,
        "fullcodeline": "if needs_clamp(return_t, encoding):"
    },
    {
        "line": 52,
        "fullcodeline": "return ret, ret_ofst, ret_len"
    },
    {
        "line": 28,
        "fullcodeline": "ret += [[\"assert\", [\"ge\", \"returndatasize\", min_return_size]]]"
    },
    {
        "line": 37,
        "fullcodeline": "annotation=f\"{expr.node_source_code} returndata buffer\","
    },
    {
        "line": 43,
        "fullcodeline": "buf2 = IRnode.from_list("
    },
    {
        "line": 47,
        "fullcodeline": "ret.append(make_setter(buf2, buf))"
    },
    {
        "line": 48,
        "fullcodeline": "ret.append(buf2)"
    },
    {
        "line": 50,
        "fullcodeline": "ret.append(buf)"
    },
    {
        "line": 7,
        "fullcodeline": "return [\"pass\"], 0, 0"
    },
    {
        "line": 44,
        "fullcodeline": "context.new_internal_variable(return_t), typ=return_t, location=MEMORY"
    }
]