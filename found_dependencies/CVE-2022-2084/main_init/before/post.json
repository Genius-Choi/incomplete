[
    {
        "line": 2,
        "fullcodeline": "deps = [sources.DEP_FILESYSTEM, sources.DEP_NETWORK]"
    },
    {
        "line": 6,
        "fullcodeline": "early_logs = ["
    },
    {
        "line": 32,
        "fullcodeline": "init = stages.Init(ds_deps=deps, reporter=args.reporter)"
    },
    {
        "line": 34,
        "fullcodeline": "init.read_cfg(extract_fns(args))"
    },
    {
        "line": 36,
        "fullcodeline": "outfmt = None"
    },
    {
        "line": 37,
        "fullcodeline": "errfmt = None"
    },
    {
        "line": 53,
        "fullcodeline": "logging.setupLogging(init.cfg)"
    },
    {
        "line": 54,
        "fullcodeline": "apply_reporting_cfg(init.cfg)"
    },
    {
        "line": 59,
        "fullcodeline": "welcome(name, msg=w_msg)"
    },
    {
        "line": 71,
        "fullcodeline": "path_helper = init.paths"
    },
    {
        "line": 72,
        "fullcodeline": "purge_cache_on_python_version_change(init)"
    },
    {
        "line": 93,
        "fullcodeline": "bring_up_interfaces = _should_bring_up_interfaces(init, args)"
    },
    {
        "line": 127,
        "fullcodeline": "_maybe_persist_instance_data(init)"
    },
    {
        "line": 129,
        "fullcodeline": "iid = init.instancify()"
    },
    {
        "line": 130,
        "fullcodeline": "LOG.debug("
    },
    {
        "line": 143,
        "fullcodeline": "init.apply_network_config(bring_up=bring_up_interfaces)"
    },
    {
        "line": 162,
        "fullcodeline": "init.setup_datasource()"
    },
    {
        "line": 164,
        "fullcodeline": "init.update()"
    },
    {
        "line": 165,
        "fullcodeline": "_maybe_set_hostname(init, stage=\"init-net\", retry_stage=\"modules:config\")"
    },
    {
        "line": 194,
        "fullcodeline": "apply_reporting_cfg(init.cfg)"
    },
    {
        "line": 197,
        "fullcodeline": "mods = Modules(init, extract_fns(args), reporter=args.reporter)"
    },
    {
        "line": 208,
        "fullcodeline": "logging.setupLogging(mods.cfg)"
    },
    {
        "line": 211,
        "fullcodeline": "init.activate_datasource()"
    },
    {
        "line": 213,
        "fullcodeline": "di_report_warn(datasource=init.datasource, cfg=init.cfg)"
    },
    {
        "line": 28,
        "fullcodeline": "if not args.local:"
    },
    {
        "line": 62,
        "fullcodeline": "for lvl, msg in early_logs:"
    },
    {
        "line": 75,
        "fullcodeline": "if mode == sources.DSMODE_NETWORK:"
    },
    {
        "line": 135,
        "fullcodeline": "init.is_new_instance(),"
    },
    {
        "line": 138,
        "fullcodeline": "if mode == sources.DSMODE_LOCAL:"
    },
    {
        "line": 145,
        "fullcodeline": "if mode == sources.DSMODE_LOCAL:"
    },
    {
        "line": 216,
        "fullcodeline": "return (init.datasource, run_module_section(mods, name, name))"
    },
    {
        "line": 4,
        "fullcodeline": "deps = [sources.DEP_FILESYSTEM]"
    },
    {
        "line": 7,
        "fullcodeline": "attempt_cmdline_url("
    },
    {
        "line": 29,
        "fullcodeline": "w_msg = welcome_format(name)"
    },
    {
        "line": 31,
        "fullcodeline": "w_msg = welcome_format(\"%s-local\" % (name))"
    },
    {
        "line": 39,
        "fullcodeline": "early_logs.append((logging.DEBUG, \"Closing stdin.\"))"
    },
    {
        "line": 40,
        "fullcodeline": "util.close_stdin()"
    },
    {
        "line": 49,
        "fullcodeline": "LOG.debug("
    },
    {
        "line": 52,
        "fullcodeline": "logging.resetLogging()"
    },
    {
        "line": 67,
        "fullcodeline": "init.initialize()"
    },
    {
        "line": 76,
        "fullcodeline": "existing = \"trust\""
    },
    {
        "line": 79,
        "fullcodeline": "existing = \"check\""
    },
    {
        "line": 80,
        "fullcodeline": "mcfg = util.get_cfg_option_bool(init.cfg, \"manual_cache_clean\", False)"
    },
    {
        "line": 90,
        "fullcodeline": "init.purge_cache()"
    },
    {
        "line": 95,
        "fullcodeline": "init.fetch(existing=existing)"
    },
    {
        "line": 142,
        "fullcodeline": "_maybe_set_hostname(init, stage=\"local\", retry_stage=\"network\")"
    },
    {
        "line": 189,
        "fullcodeline": "if os.path.exists(init.paths.get_ipath_cur(\"userdata_raw\")):"
    },
    {
        "line": 190,
        "fullcodeline": "validate_cloudconfig_schema(config=init.cfg, strict=False)"
    },
    {
        "line": 192,
        "fullcodeline": "LOG.debug(\"Skipping user-data validation. No user-data found.\")"
    },
    {
        "line": 200,
        "fullcodeline": "outfmt_orig = outfmt"
    },
    {
        "line": 201,
        "fullcodeline": "errfmt_orig = errfmt"
    },
    {
        "line": 11,
        "fullcodeline": "network=not args.local,"
    },
    {
        "line": 41,
        "fullcodeline": "(outfmt, errfmt) = util.fixup_output(init.cfg, name)"
    },
    {
        "line": 63,
        "fullcodeline": "LOG.log(lvl, msg)"
    },
    {
        "line": 77,
        "fullcodeline": "sys.stderr.write(\"%s\\n\" % (netinfo.debug_info()))"
    },
    {
        "line": 98,
        "fullcodeline": "if mode == sources.DSMODE_NETWORK and init.datasource.dsmode != mode:"
    },
    {
        "line": 146,
        "fullcodeline": "if init.datasource.dsmode != mode:"
    },
    {
        "line": 171,
        "fullcodeline": "(ran, _results) = init.cloudify().run("
    },
    {
        "line": 177,
        "fullcodeline": "if not ran:"
    },
    {
        "line": 202,
        "fullcodeline": "(outfmt, errfmt) = util.get_output_cfg(mods.cfg, name)"
    },
    {
        "line": 203,
        "fullcodeline": "if outfmt_orig != outfmt or errfmt_orig != errfmt:"
    },
    {
        "line": 8,
        "fullcodeline": "path=os.path.join("
    },
    {
        "line": 43,
        "fullcodeline": "msg = \"Failed to setup output redirection!\""
    },
    {
        "line": 44,
        "fullcodeline": "util.logexc(LOG, msg)"
    },
    {
        "line": 45,
        "fullcodeline": "print_exc(msg)"
    },
    {
        "line": 46,
        "fullcodeline": "early_logs.append((logging.WARN, msg))"
    },
    {
        "line": 69,
        "fullcodeline": "util.logexc(LOG, \"Failed to initialize, likely bad things to come!\")"
    },
    {
        "line": 82,
        "fullcodeline": "LOG.debug(\"manual cache clean set from config\")"
    },
    {
        "line": 83,
        "fullcodeline": "existing = \"trust\""
    },
    {
        "line": 85,
        "fullcodeline": "mfile = path_helper.get_ipath_cur(\"manual_clean_marker\")"
    },
    {
        "line": 99,
        "fullcodeline": "LOG.debug("
    },
    {
        "line": 147,
        "fullcodeline": "LOG.debug("
    },
    {
        "line": 154,
        "fullcodeline": "LOG.debug("
    },
    {
        "line": 183,
        "fullcodeline": "init.consume_data(PER_ALWAYS)"
    },
    {
        "line": 185,
        "fullcodeline": "util.logexc(LOG, \"Consuming user data failed!\")"
    },
    {
        "line": 204,
        "fullcodeline": "LOG.warning(\"Stdout, stderr changing to (%s, %s)\", outfmt, errfmt)"
    },
    {
        "line": 207,
        "fullcodeline": "util.logexc(LOG, \"Failed to re-adjust output redirection!\")"
    },
    {
        "line": 9,
        "fullcodeline": "\"%s.d\" % CLOUD_CONFIG, \"91_kernel_cmdline_url.cfg\""
    },
    {
        "line": 104,
        "fullcodeline": "return (None, [])"
    },
    {
        "line": 109,
        "fullcodeline": "if mode == sources.DSMODE_LOCAL:"
    },
    {
        "line": 115,
        "fullcodeline": "if not args.force:"
    },
    {
        "line": 152,
        "fullcodeline": "return (init.datasource, [])"
    },
    {
        "line": 186,
        "fullcodeline": "return (init.datasource, [\"Consuming user data failed!\"])"
    },
    {
        "line": 205,
        "fullcodeline": "(outfmt, errfmt) = util.fixup_output(mods.cfg, name)"
    },
    {
        "line": 86,
        "fullcodeline": "if os.path.exists(mfile):"
    },
    {
        "line": 87,
        "fullcodeline": "LOG.debug(\"manual cache clean found from marker: %s\", mfile)"
    },
    {
        "line": 88,
        "fullcodeline": "existing = \"trust\""
    },
    {
        "line": 110,
        "fullcodeline": "LOG.debug(\"No local datasource found\")"
    },
    {
        "line": 112,
        "fullcodeline": "util.logexc("
    },
    {
        "line": 116,
        "fullcodeline": "init.apply_network_config(bring_up=bring_up_interfaces)"
    },
    {
        "line": 117,
        "fullcodeline": "LOG.debug(\"[%s] Exiting without datasource\", mode)"
    },
    {
        "line": 123,
        "fullcodeline": "LOG.debug("
    },
    {
        "line": 174,
        "fullcodeline": "args=[PER_INSTANCE],"
    },
    {
        "line": 118,
        "fullcodeline": "if mode == sources.DSMODE_LOCAL:"
    },
    {
        "line": 119,
        "fullcodeline": "return (None, [])"
    },
    {
        "line": 121,
        "fullcodeline": "return (None, [\"No instance datasource found.\"])"
    }
]