[
    {
        "line": 39,
        "fullcodeline": "validator = cloudinitValidator(schema, format_checker=FormatChecker())"
    },
    {
        "line": 40,
        "fullcodeline": "errors: Tuple[Tuple[str, str], ...] = ()"
    },
    {
        "line": 27,
        "fullcodeline": "if schema is None:"
    },
    {
        "line": 41,
        "fullcodeline": "for error in sorted(validator.iter_errors(config), key=lambda e: e.path):"
    },
    {
        "line": 28,
        "fullcodeline": "schema = get_schema()"
    },
    {
        "line": 56,
        "fullcodeline": "LOG.warning(\"Invalid cloud-config provided: %s\", details)"
    },
    {
        "line": 30,
        "fullcodeline": "(cloudinitValidator, FormatChecker) = get_jsonschema_validator()"
    },
    {
        "line": 42,
        "fullcodeline": "path = \".\".join([str(p) for p in error.path])"
    },
    {
        "line": 43,
        "fullcodeline": "errors += ((path, error.message),)"
    },
    {
        "line": 32,
        "fullcodeline": "validate_cloudconfig_metaschema("
    },
    {
        "line": 36,
        "fullcodeline": "LOG.debug(\"Ignoring schema validation. jsonschema is not present\")"
    },
    {
        "line": 47,
        "fullcodeline": "raise SchemaValidationError(errors)"
    },
    {
        "line": 49,
        "fullcodeline": "messages = [\"{0}: {1}\".format(k, msg) for k, msg in errors]"
    },
    {
        "line": 50,
        "fullcodeline": "details = \"\\n\" + \"\\n\".join(messages)"
    },
    {
        "line": 52,
        "fullcodeline": "details = ("
    },
    {
        "line": 53,
        "fullcodeline": "\"Please run 'sudo cloud-init schema --system' to \""
    }
]