[
    {
        "line": 14,
        "fullcodeline": "errors_by_line = defaultdict(list)"
    },
    {
        "line": 15,
        "fullcodeline": "error_footer = []"
    },
    {
        "line": 16,
        "fullcodeline": "error_header = \"# Errors: -------------\\n{0}\\n\\n\""
    },
    {
        "line": 17,
        "fullcodeline": "annotated_content = []"
    },
    {
        "line": 18,
        "fullcodeline": "lines = original_content.decode().split(\"\\n\")"
    },
    {
        "line": 37,
        "fullcodeline": "error_index = 1"
    },
    {
        "line": 50,
        "fullcodeline": "annotated_content.append(error_header.format(\"\\n\".join(error_footer)))"
    },
    {
        "line": 12,
        "fullcodeline": "if not schema_errors:"
    },
    {
        "line": 19,
        "fullcodeline": "if not isinstance(cloudconfig, dict):"
    },
    {
        "line": 25,
        "fullcodeline": "for path, msg in schema_errors:"
    },
    {
        "line": 38,
        "fullcodeline": "for line_number, line in enumerate(lines, 1):"
    },
    {
        "line": 51,
        "fullcodeline": "return \"\\n\".join(annotated_content)"
    },
    {
        "line": 26,
        "fullcodeline": "match = re.match(r\"format-l(?P<line>\\d+)\\.c(?P<col>\\d+).*\", path)"
    },
    {
        "line": 39,
        "fullcodeline": "errors = errors_by_line[line_number]"
    },
    {
        "line": 21,
        "fullcodeline": "return \"\\n\".join("
    },
    {
        "line": 33,
        "fullcodeline": "if col is not None:"
    },
    {
        "line": 22,
        "fullcodeline": "lines"
    },
    {
        "line": 31,
        "fullcodeline": "col = None"
    },
    {
        "line": 34,
        "fullcodeline": "msg = \"Line {line} column {col}: {msg}\".format("
    },
    {
        "line": 41,
        "fullcodeline": "error_label = []"
    },
    {
        "line": 46,
        "fullcodeline": "annotated_content.append(line + \"\\t\\t# \" + \",\".join(error_label))"
    },
    {
        "line": 49,
        "fullcodeline": "annotated_content.append(line)"
    },
    {
        "line": 23,
        "fullcodeline": "+ [error_header.format(\"# E1: Cloud-config is not a YAML dict.\")]"
    },
    {
        "line": 28,
        "fullcodeline": "line, col = match.groups()"
    },
    {
        "line": 29,
        "fullcodeline": "errors_by_line[int(line)].append(msg)"
    },
    {
        "line": 32,
        "fullcodeline": "errors_by_line[schemamarks[path]].append(msg)"
    },
    {
        "line": 42,
        "fullcodeline": "for error in errors:"
    },
    {
        "line": 43,
        "fullcodeline": "error_label.append(\"E{0}\".format(error_index))"
    },
    {
        "line": 44,
        "fullcodeline": "error_footer.append(\"# E{0}: {1}\".format(error_index, error))"
    },
    {
        "line": 45,
        "fullcodeline": "error_index += 1"
    }
]