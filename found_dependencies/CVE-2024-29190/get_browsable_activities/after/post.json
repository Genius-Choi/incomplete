[
    {
        "line": 4,
        "fullcodeline": "browse_dic = {}"
    },
    {
        "line": 5,
        "fullcodeline": "schemes = []"
    },
    {
        "line": 6,
        "fullcodeline": "mime_types = []"
    },
    {
        "line": 7,
        "fullcodeline": "hosts = []"
    },
    {
        "line": 8,
        "fullcodeline": "ports = []"
    },
    {
        "line": 9,
        "fullcodeline": "paths = []"
    },
    {
        "line": 10,
        "fullcodeline": "path_prefixs = []"
    },
    {
        "line": 11,
        "fullcodeline": "path_patterns = []"
    },
    {
        "line": 12,
        "fullcodeline": "well_known = {}"
    },
    {
        "line": 13,
        "fullcodeline": "well_known_path = '/.well-known/assetlinks.json'"
    },
    {
        "line": 14,
        "fullcodeline": "catg = node.getElementsByTagName('category')"
    },
    {
        "line": 54,
        "fullcodeline": "schemes = [scheme + '://' for scheme in schemes]"
    },
    {
        "line": 55,
        "fullcodeline": "browse_dic['schemes'] = schemes"
    },
    {
        "line": 56,
        "fullcodeline": "browse_dic['mime_types'] = mime_types"
    },
    {
        "line": 57,
        "fullcodeline": "browse_dic['hosts'] = hosts"
    },
    {
        "line": 58,
        "fullcodeline": "browse_dic['ports'] = ports"
    },
    {
        "line": 59,
        "fullcodeline": "browse_dic['paths'] = paths"
    },
    {
        "line": 60,
        "fullcodeline": "browse_dic['path_prefixs'] = path_prefixs"
    },
    {
        "line": 61,
        "fullcodeline": "browse_dic['path_patterns'] = path_patterns"
    },
    {
        "line": 62,
        "fullcodeline": "browse_dic['browsable'] = bool(browse_dic['schemes'])"
    },
    {
        "line": 63,
        "fullcodeline": "browse_dic['well_known'] = well_known"
    },
    {
        "line": 15,
        "fullcodeline": "for cat in catg:"
    },
    {
        "line": 66,
        "fullcodeline": "logger.exception('Getting Browsable Activities')"
    },
    {
        "line": 16,
        "fullcodeline": "if cat.getAttribute(f'{ns}:name') == 'android.intent.category.BROWSABLE':"
    },
    {
        "line": 17,
        "fullcodeline": "data_tag = node.getElementsByTagName('data')"
    },
    {
        "line": 18,
        "fullcodeline": "for data in data_tag:"
    },
    {
        "line": 19,
        "fullcodeline": "scheme = data.getAttribute(f'{ns}:scheme')"
    },
    {
        "line": 22,
        "fullcodeline": "mime = data.getAttribute(f'{ns}:mimeType')"
    },
    {
        "line": 25,
        "fullcodeline": "host = data.getAttribute(f'{ns}:host')"
    },
    {
        "line": 28,
        "fullcodeline": "port = data.getAttribute(f'{ns}:port')"
    },
    {
        "line": 31,
        "fullcodeline": "path = data.getAttribute(f'{ns}:path')"
    },
    {
        "line": 34,
        "fullcodeline": "path_prefix = data.getAttribute(f'{ns}:pathPrefix')"
    },
    {
        "line": 37,
        "fullcodeline": "path_pattern = data.getAttribute(f'{ns}:pathPattern')"
    },
    {
        "line": 20,
        "fullcodeline": "if scheme and scheme not in schemes:"
    },
    {
        "line": 23,
        "fullcodeline": "if mime and mime not in mime_types:"
    },
    {
        "line": 26,
        "fullcodeline": "if host and host not in hosts:"
    },
    {
        "line": 29,
        "fullcodeline": "if port and port not in ports:"
    },
    {
        "line": 32,
        "fullcodeline": "if path and path not in paths:"
    },
    {
        "line": 35,
        "fullcodeline": "if path_prefix and path_prefix not in path_prefixs:"
    },
    {
        "line": 38,
        "fullcodeline": "if path_pattern and path_pattern not in path_patterns:"
    },
    {
        "line": 41,
        "fullcodeline": "if (scheme"
    },
    {
        "line": 21,
        "fullcodeline": "schemes.append(scheme)"
    },
    {
        "line": 24,
        "fullcodeline": "mime_types.append(mime)"
    },
    {
        "line": 27,
        "fullcodeline": "hosts.append(host)"
    },
    {
        "line": 30,
        "fullcodeline": "ports.append(port)"
    },
    {
        "line": 33,
        "fullcodeline": "paths.append(path)"
    },
    {
        "line": 36,
        "fullcodeline": "path_prefixs.append(path_prefix)"
    },
    {
        "line": 39,
        "fullcodeline": "path_patterns.append(path_pattern)"
    },
    {
        "line": 42,
        "fullcodeline": "and scheme in ('http', 'https')"
    },
    {
        "line": 45,
        "fullcodeline": "host = host.replace('*.', '').replace('#', '')"
    },
    {
        "line": 48,
        "fullcodeline": "shost = f'{scheme}://{host}'"
    },
    {
        "line": 53,
        "fullcodeline": "well_known[c_url] = shost"
    },
    {
        "line": 46,
        "fullcodeline": "if not valid_host(host):"
    },
    {
        "line": 49,
        "fullcodeline": "if port and is_number(port):"
    },
    {
        "line": 50,
        "fullcodeline": "c_url = f'{shost}:{port}{well_known_path}'"
    },
    {
        "line": 52,
        "fullcodeline": "c_url = f'{shost}{well_known_path}'"
    }
]