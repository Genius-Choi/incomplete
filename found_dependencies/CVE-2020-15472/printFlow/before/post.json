[
    {
        "line": 2,
        "fullcodeline": "FILE *out = results_file ? results_file : stdout;"
    },
    {
        "line": 4,
        "fullcodeline": "char buf[32], buf1[64];"
    },
    {
        "line": 162,
        "fullcodeline": "fprintf(out, \"[proto: \");"
    },
    {
        "line": 166,
        "fullcodeline": "fprintf(out, \"%s/%s]\","
    },
    {
        "line": 178,
        "fullcodeline": "fprintf(out, \"[%u pkts/%llu bytes \", flow->src2dst_packets, (long long unsigned int) flow->src2dst_bytes);"
    },
    {
        "line": 179,
        "fullcodeline": "fprintf(out, \"%s %u pkts/%llu bytes]\","
    },
    {
        "line": 183,
        "fullcodeline": "fprintf(out, \"[Goodput ratio: %.0f/%.0f]\","
    },
    {
        "line": 296,
        "fullcodeline": "fprintf(out, \"\\n\");"
    },
    {
        "line": 19,
        "fullcodeline": "if(csv_fp != NULL) {"
    },
    {
        "line": 122,
        "fullcodeline": "if((verbose != 1) && (verbose != 2)) {"
    },
    {
        "line": 132,
        "fullcodeline": "if(csv_fp || (verbose > 1)) {"
    },
    {
        "line": 163,
        "fullcodeline": "if(flow->tunnel_type != ndpi_no_tunnel)"
    },
    {
        "line": 167,
        "fullcodeline": "ndpi_protocol2id(ndpi_thread_info[thread_id].workflow->ndpi_struct,"
    },
    {
        "line": 169,
        "fullcodeline": "ndpi_protocol2name(ndpi_thread_info[thread_id].workflow->ndpi_struct,"
    },
    {
        "line": 172,
        "fullcodeline": "if(flow->detected_protocol.category != 0)"
    },
    {
        "line": 180,
        "fullcodeline": "(flow->dst2src_packets > 0) ? \"<->\" : \"->\","
    },
    {
        "line": 181,
        "fullcodeline": "flow->dst2src_packets, (long long unsigned int) flow->dst2src_bytes);"
    },
    {
        "line": 184,
        "fullcodeline": "100.0*((float)flow->src2dst_goodput_bytes / (float)(flow->src2dst_bytes+1)),"
    },
    {
        "line": 185,
        "fullcodeline": "100.0*((float)flow->dst2src_goodput_bytes / (float)(flow->dst2src_bytes+1)));"
    },
    {
        "line": 187,
        "fullcodeline": "if(flow->last_seen > flow->first_seen)"
    },
    {
        "line": 192,
        "fullcodeline": "if(flow->telnet.username[0] != '\\0')  fprintf(out, \"[Username: %s]\", flow->telnet.username);"
    },
    {
        "line": 193,
        "fullcodeline": "if(flow->telnet.password[0] != '\\0')  fprintf(out, \"[Password: %s]\", flow->telnet.password);"
    },
    {
        "line": 194,
        "fullcodeline": "if(flow->host_server_name[0] != '\\0') fprintf(out, \"[Host: %s]\", flow->host_server_name);"
    },
    {
        "line": 196,
        "fullcodeline": "if(flow->info[0] != '\\0') fprintf(out, \"[%s]\", flow->info);"
    },
    {
        "line": 197,
        "fullcodeline": "if(flow->flow_extra_info[0] != '\\0') fprintf(out, \"[%s]\", flow->flow_extra_info);"
    },
    {
        "line": 199,
        "fullcodeline": "if((flow->src2dst_packets+flow->dst2src_packets) > 5) {"
    },
    {
        "line": 221,
        "fullcodeline": "if(flow->http.url[0] != '\\0') {"
    },
    {
        "line": 249,
        "fullcodeline": "if(flow->ssh_tls.ssl_version != 0) fprintf(out, \"[%s]\", ndpi_ssl_version2str(flow->ssh_tls.ssl_version, &known_tls));"
    },
    {
        "line": 250,
        "fullcodeline": "if(flow->ssh_tls.client_requested_server_name[0] != '\\0') fprintf(out, \"[Client: %s]\", flow->ssh_tls.client_requested_server_name);"
    },
    {
        "line": 251,
        "fullcodeline": "if(flow->ssh_tls.client_hassh[0] != '\\0') fprintf(out, \"[HASSH-C: %s]\", flow->ssh_tls.client_hassh);"
    },
    {
        "line": 253,
        "fullcodeline": "if(flow->ssh_tls.ja3_client[0] != '\\0') fprintf(out, \"[JA3C: %s%s]\", flow->ssh_tls.ja3_client,"
    },
    {
        "line": 256,
        "fullcodeline": "if(flow->ssh_tls.server_info[0] != '\\0') fprintf(out, \"[Server: %s]\", flow->ssh_tls.server_info);"
    },
    {
        "line": 259,
        "fullcodeline": "if(flow->ssh_tls.server_hassh[0] != '\\0') fprintf(out, \"[HASSH-S: %s]\", flow->ssh_tls.server_hassh);"
    },
    {
        "line": 261,
        "fullcodeline": "if(flow->ssh_tls.ja3_server[0] != '\\0') fprintf(out, \"[JA3S: %s%s]\", flow->ssh_tls.ja3_server,"
    },
    {
        "line": 267,
        "fullcodeline": "if((flow->detected_protocol.master_protocol == NDPI_PROTOCOL_TLS)"
    },
    {
        "line": 290,
        "fullcodeline": "if(flow->ssh_tls.server_cipher != '\\0') fprintf(out, \"[Cipher: %s]\", ndpi_cipher2str(flow->ssh_tls.server_cipher));"
    },
    {
        "line": 291,
        "fullcodeline": "if(flow->bittorent_hash[0] != '\\0') fprintf(out, \"[BT Hash: %s]\", flow->bittorent_hash);"
    },
    {
        "line": 292,
        "fullcodeline": "if(flow->dhcp_fingerprint[0] != '\\0') fprintf(out, \"[DHCP Fingerprint: %s]\", flow->dhcp_fingerprint);"
    },
    {
        "line": 20,
        "fullcodeline": "float data_ratio = ndpi_data_ratio(flow->src2dst_bytes, flow->dst2src_bytes);"
    },
    {
        "line": 21,
        "fullcodeline": "double f = (double)flow->first_seen, l = (double)flow->last_seen;"
    },
    {
        "line": 24,
        "fullcodeline": "dos_ge_score = Dos_goldeneye_score(flow);"
    },
    {
        "line": 26,
        "fullcodeline": "dos_slow_score = Dos_slow_score(flow);"
    },
    {
        "line": 27,
        "fullcodeline": "dos_hulk_score = Dos_hulk_score(flow);"
    },
    {
        "line": 28,
        "fullcodeline": "ddos_score = Ddos_score(flow);"
    },
    {
        "line": 30,
        "fullcodeline": "hearthbleed_score = Hearthbleed_score(flow);"
    },
    {
        "line": 32,
        "fullcodeline": "ftp_patator_score = Ftp_patator_score(flow);"
    },
    {
        "line": 33,
        "fullcodeline": "ssh_patator_score = Ssh_patator_score(flow);"
    },
    {
        "line": 35,
        "fullcodeline": "inf_score = Infiltration_score(flow);"
    },
    {
        "line": 37,
        "fullcodeline": "double benign_score = dos_ge_score < 1 && dos_slow_score < 1 && \\"
    },
    {
        "line": 41,
        "fullcodeline": "fprintf(csv_fp, \"%u,%u,%.3f,%.3f,%.3f,%s,%u,%s,%u,\","
    },
    {
        "line": 50,
        "fullcodeline": "fprintf(csv_fp, \"%s,\","
    },
    {
        "line": 54,
        "fullcodeline": "fprintf(csv_fp, \"%s,%s,\","
    },
    {
        "line": 59,
        "fullcodeline": "fprintf(csv_fp, \"%.4lf,%.4lf,%.4lf,%.4lf,%.4lf,%.4lf,%.4lf,%.4lf,%.4lf,\", \\"
    },
    {
        "line": 64,
        "fullcodeline": "fprintf(csv_fp, \"%u,%llu,%llu,\", flow->src2dst_packets,"
    },
    {
        "line": 66,
        "fullcodeline": "fprintf(csv_fp, \"%u,%llu,%llu,\", flow->dst2src_packets,"
    },
    {
        "line": 68,
        "fullcodeline": "fprintf(csv_fp, \"%.3f,%s,\", data_ratio, ndpi_data_ratio2str(data_ratio));"
    },
    {
        "line": 69,
        "fullcodeline": "fprintf(csv_fp, \"%.1f,%.1f,\", 100.0*((float)flow->src2dst_goodput_bytes / (float)(flow->src2dst_bytes+1)),"
    },
    {
        "line": 73,
        "fullcodeline": "fprintf(csv_fp, \"%u,%.1f,%u,%.1f,\","
    },
    {
        "line": 76,
        "fullcodeline": "fprintf(csv_fp, \"%u,%.1f,%u,%.1f,%u,%.1f,%u,%.1f,\","
    },
    {
        "line": 81,
        "fullcodeline": "fprintf(csv_fp, \"%u,%.1f,%u,%.1f,%u,%.1f,%u,%.1f,\","
    },
    {
        "line": 86,
        "fullcodeline": "fprintf(csv_fp, \"%d,%d,%d,%d,%d,%d,%d,%d,\", flow->cwr_count, flow->ece_count, flow->urg_count, flow->ack_count, flow->psh_count, flow->rst_count, flow->syn_count, flow->fin_count);"
    },
    {
        "line": 88,
        "fullcodeline": "fprintf(csv_fp, \"%d,%d,%d,%d,%d,%d,%d,%d,\", flow->src2dst_cwr_count, flow->src2dst_ece_count, flow->src2dst_urg_count, flow->src2dst_ack_count, flow->src2dst_psh_count, flow->src2dst_rst_count, flow->src2dst_syn_count, flow->src2dst_fin_count);"
    },
    {
        "line": 90,
        "fullcodeline": "fprintf(csv_fp, \"%d,%d,%d,%d,%d,%d,%d,%d,\", flow->dst2src_cwr_count, flow->ece_count, flow->urg_count, flow->ack_count, flow->psh_count, flow->rst_count, flow->syn_count, flow->fin_count);"
    },
    {
        "line": 93,
        "fullcodeline": "fprintf(csv_fp, \"%u,%u,\", flow->c_to_s_init_win, flow->s_to_c_init_win);"
    },
    {
        "line": 95,
        "fullcodeline": "fprintf(csv_fp, \"%s,%s,\","
    },
    {
        "line": 99,
        "fullcodeline": "fprintf(csv_fp, \"%s,%s,%s,%s,%s,\","
    },
    {
        "line": 106,
        "fullcodeline": "fprintf(csv_fp, \"%s,%s,\","
    },
    {
        "line": 110,
        "fullcodeline": "fprintf(csv_fp, \"%s,%s,\","
    },
    {
        "line": 114,
        "fullcodeline": "fprintf(csv_fp, \"%s,%s\","
    },
    {
        "line": 119,
        "fullcodeline": "fprintf(csv_fp, \",%s\", flow->info);"
    },
    {
        "line": 134,
        "fullcodeline": "fprintf(out, \"\\t%u\", id);"
    },
    {
        "line": 139,
        "fullcodeline": "fprintf(out, \"\\t%s \", ipProto2Name(flow->protocol));"
    },
    {
        "line": 141,
        "fullcodeline": "fprintf(out, \"%s%s%s:%u %s %s%s%s:%u \","
    },
    {
        "line": 155,
        "fullcodeline": "flowGetBDMeanandVariance(flow);"
    },
    {
        "line": 156,
        "fullcodeline": "fflush(out);"
    },
    {
        "line": 157,
        "fullcodeline": "fprintf(out, \"[score: %.4f]\", flow->entropy.score);"
    },
    {
        "line": 160,
        "fullcodeline": "if(csv_fp) fprintf(csv_fp, \"\\n\");"
    },
    {
        "line": 164,
        "fullcodeline": "fprintf(out, \"%s:\", ndpi_tunnel2str(flow->tunnel_type));"
    },
    {
        "line": 173,
        "fullcodeline": "fprintf(out, \"[cat: %s/%u]\","
    },
    {
        "line": 188,
        "fullcodeline": "fprintf(out, \"[%.2f sec]\", ((float)(flow->last_seen - flow->first_seen))/(float)1000);"
    },
    {
        "line": 222,
        "fullcodeline": "ndpi_risk_enum risk = ndpi_validate_url(flow->http.url);"
    },
    {
        "line": 227,
        "fullcodeline": "fprintf(out, \"[URL: %s[StatusCode: %u]\","
    },
    {
        "line": 240,
        "fullcodeline": "fprintf(out, \"[Risk: \");"
    },
    {
        "line": 246,
        "fullcodeline": "fprintf(out, \"]\");"
    },
    {
        "line": 258,
        "fullcodeline": "if(flow->ssh_tls.server_names) fprintf(out, \"[ServerNames: %s]\", flow->ssh_tls.server_names);"
    },
    {
        "line": 264,
        "fullcodeline": "if(flow->ssh_tls.tls_issuerDN)  fprintf(out, \"[Issuer: %s]\", flow->ssh_tls.tls_issuerDN);"
    },
    {
        "line": 265,
        "fullcodeline": "if(flow->ssh_tls.tls_subjectDN) fprintf(out, \"[Subject: %s]\", flow->ssh_tls.tls_subjectDN);"
    },
    {
        "line": 268,
        "fullcodeline": "|| (flow->detected_protocol.app_protocol == NDPI_PROTOCOL_TLS)) {"
    },
    {
        "line": 279,
        "fullcodeline": "char notBefore[32], notAfter[32];"
    },
    {
        "line": 281,
        "fullcodeline": "struct tm *before = gmtime_r(&flow->ssh_tls.notBefore, &a);"
    },
    {
        "line": 282,
        "fullcodeline": "struct tm *after  = gmtime_r(&flow->ssh_tls.notAfter, &b);"
    },
    {
        "line": 284,
        "fullcodeline": "strftime(notBefore, sizeof(notBefore), \"%F %T\", before);"
    },
    {
        "line": 285,
        "fullcodeline": "strftime(notAfter, sizeof(notAfter), \"%F %T\", after);"
    },
    {
        "line": 287,
        "fullcodeline": "fprintf(out, \"[Validity: %s - %s]\", notBefore, notAfter);"
    },
    {
        "line": 294,
        "fullcodeline": "if(flow->has_human_readeable_strings) fprintf(out, \"[PLAIN TEXT (%s)]\", flow->human_readeable_string_buffer);"
    },
    {
        "line": 44,
        "fullcodeline": "f/1000.0, l/1000.0,"
    },
    {
        "line": 45,
        "fullcodeline": "(l-f)/1000.0,"
    },
    {
        "line": 46,
        "fullcodeline": "flow->src_name, ntohs(flow->src_port),"
    },
    {
        "line": 47,
        "fullcodeline": "flow->dst_name, ntohs(flow->dst_port)"
    },
    {
        "line": 51,
        "fullcodeline": "ndpi_protocol2id(ndpi_thread_info[thread_id].workflow->ndpi_struct,"
    },
    {
        "line": 55,
        "fullcodeline": "ndpi_protocol2name(ndpi_thread_info[thread_id].workflow->ndpi_struct,"
    },
    {
        "line": 65,
        "fullcodeline": "(long long unsigned int) flow->src2dst_bytes, (long long unsigned int) flow->src2dst_goodput_bytes);"
    },
    {
        "line": 67,
        "fullcodeline": "(long long unsigned int) flow->dst2src_bytes, (long long unsigned int) flow->dst2src_goodput_bytes);"
    },
    {
        "line": 70,
        "fullcodeline": "100.0*((float)flow->dst2src_goodput_bytes / (float)(flow->dst2src_bytes+1)));"
    },
    {
        "line": 74,
        "fullcodeline": "ndpi_data_min(flow->iat_flow), ndpi_data_average(flow->iat_flow), ndpi_data_max(flow->iat_flow), ndpi_data_stddev(flow->iat_flow));"
    },
    {
        "line": 77,
        "fullcodeline": "ndpi_data_min(flow->iat_c_to_s), ndpi_data_average(flow->iat_c_to_s), ndpi_data_max(flow->iat_c_to_s), ndpi_data_stddev(flow->iat_c_to_s),"
    },
    {
        "line": 78,
        "fullcodeline": "ndpi_data_min(flow->iat_s_to_c), ndpi_data_average(flow->iat_s_to_c), ndpi_data_max(flow->iat_s_to_c), ndpi_data_stddev(flow->iat_s_to_c));"
    },
    {
        "line": 82,
        "fullcodeline": "ndpi_data_min(flow->pktlen_c_to_s), ndpi_data_average(flow->pktlen_c_to_s), ndpi_data_max(flow->pktlen_c_to_s), ndpi_data_stddev(flow->pktlen_c_to_s),"
    },
    {
        "line": 83,
        "fullcodeline": "ndpi_data_min(flow->pktlen_s_to_c), ndpi_data_average(flow->pktlen_s_to_c), ndpi_data_max(flow->pktlen_s_to_c), ndpi_data_stddev(flow->pktlen_s_to_c));"
    },
    {
        "line": 96,
        "fullcodeline": "(flow->ssh_tls.client_requested_server_name[0] != '\\0')  ? flow->ssh_tls.client_requested_server_name : \"\","
    },
    {
        "line": 97,
        "fullcodeline": "(flow->ssh_tls.server_info[0] != '\\0')  ? flow->ssh_tls.server_info : \"\");"
    },
    {
        "line": 100,
        "fullcodeline": "(flow->ssh_tls.ssl_version != 0)        ? ndpi_ssl_version2str(flow->ssh_tls.ssl_version, &known_tls) : \"0\","
    },
    {
        "line": 101,
        "fullcodeline": "(flow->ssh_tls.ja3_client[0] != '\\0')   ? flow->ssh_tls.ja3_client : \"\","
    },
    {
        "line": 102,
        "fullcodeline": "(flow->ssh_tls.ja3_client[0] != '\\0')   ? is_unsafe_cipher(flow->ssh_tls.client_unsafe_cipher) : \"0\","
    },
    {
        "line": 103,
        "fullcodeline": "(flow->ssh_tls.ja3_server[0] != '\\0')   ? flow->ssh_tls.ja3_server : \"\","
    },
    {
        "line": 104,
        "fullcodeline": "(flow->ssh_tls.ja3_server[0] != '\\0')   ? is_unsafe_cipher(flow->ssh_tls.server_unsafe_cipher) : \"0\");"
    },
    {
        "line": 107,
        "fullcodeline": "flow->ssh_tls.tls_alpn                  ? flow->ssh_tls.tls_alpn : \"\","
    },
    {
        "line": 108,
        "fullcodeline": "flow->ssh_tls.tls_supported_versions    ? flow->ssh_tls.tls_supported_versions : \"\""
    },
    {
        "line": 111,
        "fullcodeline": "flow->ssh_tls.tls_issuerDN              ? flow->ssh_tls.tls_issuerDN : \"\","
    },
    {
        "line": 112,
        "fullcodeline": "flow->ssh_tls.tls_subjectDN             ? flow->ssh_tls.tls_subjectDN : \"\""
    },
    {
        "line": 115,
        "fullcodeline": "(flow->ssh_tls.client_hassh[0] != '\\0') ? flow->ssh_tls.client_hassh : \"\","
    },
    {
        "line": 116,
        "fullcodeline": "(flow->ssh_tls.server_hassh[0] != '\\0') ? flow->ssh_tls.server_hassh : \"\""
    },
    {
        "line": 123,
        "fullcodeline": "if(csv_fp && enable_joy_stats) {"
    },
    {
        "line": 142,
        "fullcodeline": "(flow->ip_version == 6) ? \"[\" : \"\","
    },
    {
        "line": 143,
        "fullcodeline": "flow->src_name, (flow->ip_version == 6) ? \"]\" : \"\", ntohs(flow->src_port),"
    },
    {
        "line": 144,
        "fullcodeline": "flow->bidirectional ? \"<->\" : \"->\","
    },
    {
        "line": 145,
        "fullcodeline": "(flow->ip_version == 6) ? \"[\" : \"\","
    },
    {
        "line": 146,
        "fullcodeline": "flow->dst_name, (flow->ip_version == 6) ? \"]\" : \"\", ntohs(flow->dst_port)"
    },
    {
        "line": 149,
        "fullcodeline": "if(flow->vlan_id > 0) fprintf(out, \"[VLAN: %u]\", flow->vlan_id);"
    },
    {
        "line": 174,
        "fullcodeline": "ndpi_category_get_name(ndpi_thread_info[thread_id].workflow->ndpi_struct,"
    },
    {
        "line": 176,
        "fullcodeline": "(unsigned int)flow->detected_protocol.category);"
    },
    {
        "line": 190,
        "fullcodeline": "fprintf(out, \"[< 1 sec]\");"
    },
    {
        "line": 200,
        "fullcodeline": "if(flow->iat_c_to_s && flow->iat_s_to_c) {"
    },
    {
        "line": 224,
        "fullcodeline": "if(risk != NDPI_NO_RISK)"
    },
    {
        "line": 230,
        "fullcodeline": "if(flow->http.content_type[0] != '\\0')"
    },
    {
        "line": 233,
        "fullcodeline": "if(flow->http.user_agent[0] != '\\0')"
    },
    {
        "line": 242,
        "fullcodeline": "for(i=0; i<NDPI_MAX_RISK; i++)"
    },
    {
        "line": 254,
        "fullcodeline": "print_cipher(flow->ssh_tls.client_unsafe_cipher));"
    },
    {
        "line": 262,
        "fullcodeline": "print_cipher(flow->ssh_tls.server_unsafe_cipher));"
    },
    {
        "line": 124,
        "fullcodeline": "flowGetBDMeanandVariance(flow);"
    },
    {
        "line": 128,
        "fullcodeline": "fprintf(csv_fp, \"\\n\");"
    },
    {
        "line": 150,
        "fullcodeline": "if(enable_payload_analyzer) fprintf(out, \"[flowId: %u]\", flow->flow_id);"
    },
    {
        "line": 201,
        "fullcodeline": "float data_ratio = ndpi_data_ratio(flow->src2dst_bytes, flow->dst2src_bytes);"
    },
    {
        "line": 203,
        "fullcodeline": "fprintf(out, \"[bytes ratio: %.3f (%s)]\", data_ratio, ndpi_data_ratio2str(data_ratio));"
    },
    {
        "line": 206,
        "fullcodeline": "fprintf(out, \"[IAT c2s/s2c min/avg/max/stddev: %u/%u %.0f/%.0f %u/%u %.0f/%.0f]\","
    },
    {
        "line": 213,
        "fullcodeline": "fprintf(out, \"[Pkt Len c2s/s2c min/avg/max/stddev: %u/%u %.0f/%.0f %u/%u %.0f/%.0f]\","
    },
    {
        "line": 225,
        "fullcodeline": "NDPI_SET_BIT(flow->risk, risk);"
    },
    {
        "line": 231,
        "fullcodeline": "fprintf(out, \"[ContentType: %s]\", flow->http.content_type);"
    },
    {
        "line": 234,
        "fullcodeline": "fprintf(out, \"[UserAgent: %s]\", flow->http.user_agent);"
    },
    {
        "line": 243,
        "fullcodeline": "if(NDPI_ISSET_BIT(flow->risk, i))"
    },
    {
        "line": 270,
        "fullcodeline": "fprintf(out, \"[Certificate SHA-1: \");"
    },
    {
        "line": 274,
        "fullcodeline": "fprintf(out, \"]\");"
    },
    {
        "line": 39,
        "fullcodeline": "ftp_patator_score < 1 && ssh_patator_score < 1 && inf_score < 1 ? 1.1 : 0;"
    },
    {
        "line": 207,
        "fullcodeline": "ndpi_data_min(flow->iat_c_to_s),     ndpi_data_min(flow->iat_s_to_c),"
    },
    {
        "line": 208,
        "fullcodeline": "(float)ndpi_data_average(flow->iat_c_to_s), (float)ndpi_data_average(flow->iat_s_to_c),"
    },
    {
        "line": 209,
        "fullcodeline": "ndpi_data_max(flow->iat_c_to_s),     ndpi_data_max(flow->iat_s_to_c),"
    },
    {
        "line": 210,
        "fullcodeline": "(float)ndpi_data_stddev(flow->iat_c_to_s),  (float)ndpi_data_stddev(flow->iat_s_to_c));"
    },
    {
        "line": 214,
        "fullcodeline": "ndpi_data_min(flow->pktlen_c_to_s), ndpi_data_min(flow->pktlen_s_to_c),"
    },
    {
        "line": 215,
        "fullcodeline": "ndpi_data_average(flow->pktlen_c_to_s), ndpi_data_average(flow->pktlen_s_to_c),"
    },
    {
        "line": 216,
        "fullcodeline": "ndpi_data_max(flow->pktlen_c_to_s), ndpi_data_max(flow->pktlen_s_to_c),"
    },
    {
        "line": 217,
        "fullcodeline": "ndpi_data_stddev(flow->pktlen_c_to_s),  ndpi_data_stddev(flow->pktlen_s_to_c));"
    },
    {
        "line": 244,
        "fullcodeline": "fprintf(out, \"** %s **\", ndpi_risk2str(i));"
    },
    {
        "line": 271,
        "fullcodeline": "for(i=0; i<20; i++)"
    },
    {
        "line": 272,
        "fullcodeline": "fprintf(out, \"%s%02X\", (i > 0) ? \":\" : \"\","
    },
    {
        "line": 273,
        "fullcodeline": "flow->ssh_tls.sha1_cert_fingerprint[i] & 0xFF);"
    },
    {
        "line": 38,
        "fullcodeline": "dos_hulk_score < 1 && ddos_score < 1 && hearthbleed_score < 1 && \\"
    }
]