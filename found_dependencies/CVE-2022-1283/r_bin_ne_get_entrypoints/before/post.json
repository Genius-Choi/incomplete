[
    {
        "line": 2,
        "fullcodeline": "RList *entries = r_list_newf (free);"
    },
    {
        "line": 6,
        "fullcodeline": "RList *segments = r_bin_ne_get_segments (bin);"
    },
    {
        "line": 24,
        "fullcodeline": "int off = 0;"
    },
    {
        "line": 25,
        "fullcodeline": "size_t tableat = bin->header_offset + bin->ne_header->EntryTableOffset;"
    },
    {
        "line": 70,
        "fullcodeline": "r_list_free (segments);"
    },
    {
        "line": 71,
        "fullcodeline": "bin->entries = entries;"
    },
    {
        "line": 3,
        "fullcodeline": "if (!entries) {"
    },
    {
        "line": 7,
        "fullcodeline": "if (!segments) {"
    },
    {
        "line": 26,
        "fullcodeline": "while (off < bin->ne_header->EntryTableLength) {"
    },
    {
        "line": 8,
        "fullcodeline": "r_list_free (entries);"
    },
    {
        "line": 12,
        "fullcodeline": "RBinAddr *entry = R_NEW0 (RBinAddr);"
    },
    {
        "line": 17,
        "fullcodeline": "entry->bits = 16;"
    },
    {
        "line": 19,
        "fullcodeline": "RBinSection *s = r_list_get_n (segments, entry_cs - 1);"
    },
    {
        "line": 20,
        "fullcodeline": "entry->paddr = bin->ne_header->ipEntryPoint + (s? s->paddr: 0);"
    },
    {
        "line": 22,
        "fullcodeline": "r_list_append (entries, entry);"
    },
    {
        "line": 34,
        "fullcodeline": "off++;"
    },
    {
        "line": 36,
        "fullcodeline": "off++;"
    },
    {
        "line": 13,
        "fullcodeline": "if (!entry) {"
    },
    {
        "line": 27,
        "fullcodeline": "if (tableat + off >= r_buf_size (bin->buf)) {"
    },
    {
        "line": 31,
        "fullcodeline": "if (!bundle_length) {"
    },
    {
        "line": 38,
        "fullcodeline": "for (i = 0; i < bundle_length; i++) {"
    },
    {
        "line": 14,
        "fullcodeline": "r_list_free (entries);"
    },
    {
        "line": 30,
        "fullcodeline": "ut8 bundle_length = *(ut8 *)(bin->entry_table + off);"
    },
    {
        "line": 35,
        "fullcodeline": "ut8 bundle_type = *(ut8 *)(bin->entry_table + off);"
    },
    {
        "line": 42,
        "fullcodeline": "RBinAddr *entry = R_NEW0 (RBinAddr);"
    },
    {
        "line": 47,
        "fullcodeline": "off++;"
    },
    {
        "line": 66,
        "fullcodeline": "off += 2;"
    },
    {
        "line": 67,
        "fullcodeline": "r_list_append (entries, entry);"
    },
    {
        "line": 39,
        "fullcodeline": "if (tableat + off + 4 >= r_buf_size (bin->buf)) {"
    },
    {
        "line": 43,
        "fullcodeline": "if (!entry) {"
    },
    {
        "line": 48,
        "fullcodeline": "if (!bundle_type) { // Skip"
    },
    {
        "line": 44,
        "fullcodeline": "r_list_free (entries);"
    },
    {
        "line": 49,
        "fullcodeline": "off--;"
    },
    {
        "line": 50,
        "fullcodeline": "free (entry);"
    },
    {
        "line": 52,
        "fullcodeline": "} else if (bundle_type == 0xff) { // moveable"
    },
    {
        "line": 53,
        "fullcodeline": "off += 2;"
    },
    {
        "line": 55,
        "fullcodeline": "off++;"
    },
    {
        "line": 57,
        "fullcodeline": "if (segnum > 0) {"
    },
    {
        "line": 54,
        "fullcodeline": "ut8 segnum = *(bin->entry_table + off);"
    },
    {
        "line": 56,
        "fullcodeline": "ut16 segoff = *(ut16 *)(bin->entry_table + off);"
    },
    {
        "line": 58,
        "fullcodeline": "entry->paddr = (ut64)bin->segment_entries[segnum - 1].offset * bin->alignment + segoff;"
    },
    {
        "line": 61,
        "fullcodeline": "if (bundle_type < bin->ne_header->SegCount) {"
    },
    {
        "line": 62,
        "fullcodeline": "entry->paddr = (ut64)bin->segment_entries[bundle_type - 1].offset"
    },
    {
        "line": 63,
        "fullcodeline": "* bin->alignment + *(ut16 *)(bin->entry_table + off);"
    }
]