[
    {
        "line": 15,
        "fullcodeline": "searchLocally = allowLocal and doc.md.localBoilerplate[name]"
    },
    {
        "line": 17,
        "fullcodeline": "def boilerplatePath(*segs):"
    },
    {
        "line": 20,
        "fullcodeline": "statusFile = f\"{name}-{status}.include\""
    },
    {
        "line": 21,
        "fullcodeline": "genericFile = f\"{name}.include\""
    },
    {
        "line": 22,
        "fullcodeline": "sources = []"
    },
    {
        "line": 44,
        "fullcodeline": "sources.append(InputSource(boilerplatePath(statusFile), chroot=False))"
    },
    {
        "line": 45,
        "fullcodeline": "sources.append(InputSource(boilerplatePath(genericFile), chroot=False))"
    },
    {
        "line": 49,
        "fullcodeline": "doc.recordDependencies(*sources)"
    },
    {
        "line": 6,
        "fullcodeline": "if group is None and doc.md.group is not None:"
    },
    {
        "line": 8,
        "fullcodeline": "if status is None:"
    },
    {
        "line": 13,
        "fullcodeline": "megaGroup, status = splitStatus(status)"
    },
    {
        "line": 51,
        "fullcodeline": "for source in sources:"
    },
    {
        "line": 7,
        "fullcodeline": "group = doc.md.group.lower()"
    },
    {
        "line": 24,
        "fullcodeline": "sources.append(doc.inputSource.relative(statusFile))  # Can be None."
    },
    {
        "line": 25,
        "fullcodeline": "sources.append(doc.inputSource.relative(genericFile))"
    },
    {
        "line": 39,
        "fullcodeline": "sources.append(InputSource(boilerplatePath(group, statusFile), chroot=False))"
    },
    {
        "line": 40,
        "fullcodeline": "sources.append(InputSource(boilerplatePath(group, genericFile), chroot=False))"
    },
    {
        "line": 42,
        "fullcodeline": "sources.append(InputSource(boilerplatePath(megaGroup, statusFile), chroot=False))"
    },
    {
        "line": 43,
        "fullcodeline": "sources.append(InputSource(boilerplatePath(megaGroup, genericFile), chroot=False))"
    },
    {
        "line": 9,
        "fullcodeline": "if doc.md.status is not None:"
    },
    {
        "line": 27,
        "fullcodeline": "for f in (statusFile, genericFile):"
    },
    {
        "line": 10,
        "fullcodeline": "status = doc.md.status"
    },
    {
        "line": 52,
        "fullcodeline": "if source is not None:"
    },
    {
        "line": 11,
        "fullcodeline": "elif doc.md.rawStatus is not None:"
    },
    {
        "line": 12,
        "fullcodeline": "status = doc.md.rawStatus"
    },
    {
        "line": 28,
        "fullcodeline": "if doc.inputSource.cheaplyExists(f):"
    },
    {
        "line": 29,
        "fullcodeline": "warn("
    },
    {
        "line": 37,
        "fullcodeline": "sources.append(doc.inputSource.relative(f))"
    },
    {
        "line": 31,
        "fullcodeline": "\"Found {0} next to the specification without a matching\\n\""
    },
    {
        "line": 54,
        "fullcodeline": "return source.read().content"
    },
    {
        "line": 57,
        "fullcodeline": "pass"
    }
]