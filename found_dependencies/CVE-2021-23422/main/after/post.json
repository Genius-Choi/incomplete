[
    {
        "line": 14,
        "fullcodeline": "argparser = argparse.ArgumentParser("
    },
    {
        "line": 17,
        "fullcodeline": "argparser.add_argument(\"--version\", action=\"version\", version=semver)"
    },
    {
        "line": 18,
        "fullcodeline": "argparser.add_argument("
    },
    {
        "line": 26,
        "fullcodeline": "argparser.add_argument("
    },
    {
        "line": 33,
        "fullcodeline": "argparser.add_argument("
    },
    {
        "line": 41,
        "fullcodeline": "argparser.add_argument("
    },
    {
        "line": 48,
        "fullcodeline": "argparser.add_argument("
    },
    {
        "line": 55,
        "fullcodeline": "argparser.add_argument("
    },
    {
        "line": 62,
        "fullcodeline": "argparser.add_argument("
    },
    {
        "line": 68,
        "fullcodeline": "argparser.add_argument("
    },
    {
        "line": 74,
        "fullcodeline": "argparser.add_argument("
    },
    {
        "line": 81,
        "fullcodeline": "subparsers = argparser.add_subparsers(title=\"Subcommands\", dest=\"subparserName\")"
    },
    {
        "line": 83,
        "fullcodeline": "specParser = subparsers.add_parser("
    },
    {
        "line": 86,
        "fullcodeline": "specParser.add_argument("
    },
    {
        "line": 89,
        "fullcodeline": "specParser.add_argument("
    },
    {
        "line": 92,
        "fullcodeline": "specParser.add_argument("
    },
    {
        "line": 98,
        "fullcodeline": "specParser.add_argument("
    },
    {
        "line": 104,
        "fullcodeline": "specParser.add_argument("
    },
    {
        "line": 110,
        "fullcodeline": "specParser.add_argument("
    },
    {
        "line": 118,
        "fullcodeline": "echidnaParser = subparsers.add_parser("
    },
    {
        "line": 122,
        "fullcodeline": "echidnaParser.add_argument("
    },
    {
        "line": 125,
        "fullcodeline": "echidnaParser.add_argument("
    },
    {
        "line": 131,
        "fullcodeline": "echidnaParser.add_argument("
    },
    {
        "line": 134,
        "fullcodeline": "echidnaParser.add_argument("
    },
    {
        "line": 137,
        "fullcodeline": "echidnaParser.add_argument("
    },
    {
        "line": 144,
        "fullcodeline": "echidnaParser.add_argument("
    },
    {
        "line": 151,
        "fullcodeline": "echidnaParser.add_argument("
    },
    {
        "line": 158,
        "fullcodeline": "echidnaParser.add_argument("
    },
    {
        "line": 165,
        "fullcodeline": "echidnaParser.add_argument("
    },
    {
        "line": 171,
        "fullcodeline": "echidnaParser.add_argument(\"--just-tar\", dest=\"justTar\", action=\"store_true\")"
    },
    {
        "line": 173,
        "fullcodeline": "watchParser = subparsers.add_parser("
    },
    {
        "line": 177,
        "fullcodeline": "watchParser.add_argument("
    },
    {
        "line": 180,
        "fullcodeline": "watchParser.add_argument("
    },
    {
        "line": 183,
        "fullcodeline": "watchParser.add_argument("
    },
    {
        "line": 189,
        "fullcodeline": "watchParser.add_argument("
    },
    {
        "line": 196,
        "fullcodeline": "serveParser = subparsers.add_parser("
    },
    {
        "line": 199,
        "fullcodeline": "serveParser.add_argument("
    },
    {
        "line": 202,
        "fullcodeline": "serveParser.add_argument("
    },
    {
        "line": 205,
        "fullcodeline": "serveParser.add_argument("
    },
    {
        "line": 212,
        "fullcodeline": "serveParser.add_argument("
    },
    {
        "line": 218,
        "fullcodeline": "serveParser.add_argument("
    },
    {
        "line": 224,
        "fullcodeline": "serveParser.add_argument("
    },
    {
        "line": 231,
        "fullcodeline": "updateParser = subparsers.add_parser("
    },
    {
        "line": 236,
        "fullcodeline": "updateParser.add_argument("
    },
    {
        "line": 242,
        "fullcodeline": "updateParser.add_argument("
    },
    {
        "line": 245,
        "fullcodeline": "updateParser.add_argument("
    },
    {
        "line": 248,
        "fullcodeline": "updateParser.add_argument("
    },
    {
        "line": 251,
        "fullcodeline": "updateParser.add_argument("
    },
    {
        "line": 254,
        "fullcodeline": "updateParser.add_argument("
    },
    {
        "line": 257,
        "fullcodeline": "updateParser.add_argument("
    },
    {
        "line": 263,
        "fullcodeline": "updateParser.add_argument("
    },
    {
        "line": 269,
        "fullcodeline": "updateParser.add_argument("
    },
    {
        "line": 275,
        "fullcodeline": "updateParser.add_argument("
    },
    {
        "line": 282,
        "fullcodeline": "issueParser = subparsers.add_parser("
    },
    {
        "line": 286,
        "fullcodeline": "issueParser.add_argument("
    },
    {
        "line": 292,
        "fullcodeline": "issueParser.add_argument("
    },
    {
        "line": 295,
        "fullcodeline": "issueParser.add_argument("
    },
    {
        "line": 302,
        "fullcodeline": "debugParser = subparsers.add_parser(\"debug\", help=\"Run various debugging commands.\")"
    },
    {
        "line": 303,
        "fullcodeline": "debugParser.add_argument("
    },
    {
        "line": 306,
        "fullcodeline": "debugCommands = debugParser.add_mutually_exclusive_group(required=True)"
    },
    {
        "line": 307,
        "fullcodeline": "debugCommands.add_argument("
    },
    {
        "line": 313,
        "fullcodeline": "debugCommands.add_argument("
    },
    {
        "line": 318,
        "fullcodeline": "debugCommands.add_argument("
    },
    {
        "line": 321,
        "fullcodeline": "debugCommands.add_argument("
    },
    {
        "line": 326,
        "fullcodeline": "debugCommands.add_argument("
    },
    {
        "line": 333,
        "fullcodeline": "refParser = subparsers.add_parser(\"refs\", help=\"Search Bikeshed's ref database.\")"
    },
    {
        "line": 334,
        "fullcodeline": "refParser.add_argument("
    },
    {
        "line": 337,
        "fullcodeline": "refParser.add_argument(\"--text\", dest=\"text\", default=None)"
    },
    {
        "line": 338,
        "fullcodeline": "refParser.add_argument(\"--type\", dest=\"linkType\", default=None)"
    },
    {
        "line": 339,
        "fullcodeline": "refParser.add_argument(\"--for\", dest=\"linkFor\", default=None)"
    },
    {
        "line": 340,
        "fullcodeline": "refParser.add_argument(\"--spec\", dest=\"spec\", default=None)"
    },
    {
        "line": 341,
        "fullcodeline": "refParser.add_argument(\"--status\", dest=\"status\", default=None)"
    },
    {
        "line": 342,
        "fullcodeline": "refParser.add_argument("
    },
    {
        "line": 348,
        "fullcodeline": "refParser.add_argument("
    },
    {
        "line": 355,
        "fullcodeline": "sourceParser = subparsers.add_parser("
    },
    {
        "line": 358,
        "fullcodeline": "sourceParser.add_argument("
    },
    {
        "line": 364,
        "fullcodeline": "sourceParser.add_argument("
    },
    {
        "line": 367,
        "fullcodeline": "sourceParser.add_argument("
    },
    {
        "line": 371,
        "fullcodeline": "testParser = subparsers.add_parser("
    },
    {
        "line": 374,
        "fullcodeline": "testParser.add_argument("
    },
    {
        "line": 380,
        "fullcodeline": "testParser.add_argument("
    },
    {
        "line": 387,
        "fullcodeline": "testParser.add_argument("
    },
    {
        "line": 395,
        "fullcodeline": "profileParser = subparsers.add_parser("
    },
    {
        "line": 399,
        "fullcodeline": "profileParser.add_argument("
    },
    {
        "line": 406,
        "fullcodeline": "profileParser.add_argument("
    },
    {
        "line": 413,
        "fullcodeline": "profileParser.add_argument("
    },
    {
        "line": 420,
        "fullcodeline": "subparsers.add_parser("
    },
    {
        "line": 424,
        "fullcodeline": "wptParser = subparsers.add_parser("
    },
    {
        "line": 427,
        "fullcodeline": "wptParser.add_argument("
    },
    {
        "line": 436,
        "fullcodeline": "constants.quiet = options.quiet"
    },
    {
        "line": 439,
        "fullcodeline": "constants.setErrorLevel(options.errorLevel)"
    },
    {
        "line": 440,
        "fullcodeline": "constants.dryRun = options.dryRun"
    },
    {
        "line": 441,
        "fullcodeline": "constants.asciiOnly = options.asciiOnly"
    },
    {
        "line": 449,
        "fullcodeline": "constants.chroot = not options.allowNonlocalFiles"
    },
    {
        "line": 450,
        "fullcodeline": "constants.executeCode = options.allowExecute"
    },
    {
        "line": 452,
        "fullcodeline": "update.fixupDataFiles()"
    },
    {
        "line": 3,
        "fullcodeline": "if len(sys.argv) == 1:"
    },
    {
        "line": 65,
        "fullcodeline": "choices=[\"nothing\", \"fatal\", \"link-error\", \"warning\", \"everything\"],"
    },
    {
        "line": 434,
        "fullcodeline": "options, extras = argparser.parse_known_args()"
    },
    {
        "line": 442,
        "fullcodeline": "if options.printMode is None:"
    },
    {
        "line": 453,
        "fullcodeline": "if options.subparserName == \"update\":"
    },
    {
        "line": 15,
        "fullcodeline": "description=f\"{semverText}Processes spec source files into valid HTML.\""
    },
    {
        "line": 438,
        "fullcodeline": "constants.quiet = float(\"infinity\")"
    },
    {
        "line": 448,
        "fullcodeline": "constants.printMode = options.printMode"
    },
    {
        "line": 454,
        "fullcodeline": "handleUpdate(options)"
    },
    {
        "line": 4,
        "fullcodeline": "sys.argv.append(\"spec\")"
    },
    {
        "line": 7,
        "fullcodeline": "with open(config.scriptPath(\"..\", \"semver.txt\")) as fh:"
    },
    {
        "line": 443,
        "fullcodeline": "if \"NO_COLOR\" in os.environ or os.environ.get(\"TERM\") == \"dumb\":"
    },
    {
        "line": 455,
        "fullcodeline": "elif options.subparserName == \"spec\":"
    },
    {
        "line": 11,
        "fullcodeline": "semver = \"???\""
    },
    {
        "line": 12,
        "fullcodeline": "semverText = \"\""
    },
    {
        "line": 444,
        "fullcodeline": "constants.printMode = \"plain\""
    },
    {
        "line": 446,
        "fullcodeline": "constants.printMode = \"console\""
    },
    {
        "line": 456,
        "fullcodeline": "handleSpec(options, extras)"
    },
    {
        "line": 8,
        "fullcodeline": "semver = fh.read().strip()"
    },
    {
        "line": 9,
        "fullcodeline": "semverText = f\"Bikeshed v{semver}: \""
    },
    {
        "line": 457,
        "fullcodeline": "elif options.subparserName == \"echidna\":"
    },
    {
        "line": 458,
        "fullcodeline": "handleEchidna(options, extras)"
    },
    {
        "line": 459,
        "fullcodeline": "elif options.subparserName == \"watch\":"
    },
    {
        "line": 460,
        "fullcodeline": "handleWatch(options, extras)"
    },
    {
        "line": 461,
        "fullcodeline": "elif options.subparserName == \"serve\":"
    },
    {
        "line": 462,
        "fullcodeline": "handleServe(options, extras)"
    },
    {
        "line": 463,
        "fullcodeline": "elif options.subparserName == \"debug\":"
    },
    {
        "line": 464,
        "fullcodeline": "handleDebug(options, extras)"
    },
    {
        "line": 465,
        "fullcodeline": "elif options.subparserName == \"refs\":"
    },
    {
        "line": 466,
        "fullcodeline": "handleRefs(options, extras)"
    },
    {
        "line": 467,
        "fullcodeline": "elif options.subparserName == \"issues-list\":"
    },
    {
        "line": 468,
        "fullcodeline": "handleIssuesList(options)"
    },
    {
        "line": 469,
        "fullcodeline": "elif options.subparserName == \"source\":"
    },
    {
        "line": 470,
        "fullcodeline": "handleSource(options)"
    },
    {
        "line": 471,
        "fullcodeline": "elif options.subparserName == \"test\":"
    },
    {
        "line": 472,
        "fullcodeline": "handleTest(options, extras)"
    },
    {
        "line": 473,
        "fullcodeline": "elif options.subparserName == \"profile\":"
    },
    {
        "line": 474,
        "fullcodeline": "handleProfile(options)"
    },
    {
        "line": 475,
        "fullcodeline": "elif options.subparserName == \"template\":"
    },
    {
        "line": 476,
        "fullcodeline": "handleTemplate()"
    },
    {
        "line": 477,
        "fullcodeline": "elif options.subparserName == \"wpt\":"
    },
    {
        "line": 478,
        "fullcodeline": "handleWpt(options)"
    }
]