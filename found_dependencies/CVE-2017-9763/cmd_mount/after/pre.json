[
    {
        "line": 2,
        "fullcodeline": "ut64 off = 0;"
    },
    {
        "line": 10,
        "fullcodeline": "RCore *core = (RCore *)data;"
    },
    {
        "line": 18,
        "fullcodeline": "input = oinput = strdup (_input);"
    },
    {
        "line": 12,
        "fullcodeline": "if (!strncmp (\"kdir\", _input, 4)) {"
    },
    {
        "line": 15,
        "fullcodeline": "if (!strncmp (\"v\", _input, 1)) {"
    },
    {
        "line": 22,
        "fullcodeline": "input++;"
    },
    {
        "line": 26,
        "fullcodeline": "ptr = strchr (input, ' ');"
    },
    {
        "line": 64,
        "fullcodeline": "r_list_foreach (core->fs->plugins, iter, plug) {"
    },
    {
        "line": 69,
        "fullcodeline": "input++;"
    },
    {
        "line": 72,
        "fullcodeline": "list = r_fs_dir (core->fs, input);"
    },
    {
        "line": 81,
        "fullcodeline": "input++;"
    },
    {
        "line": 84,
        "fullcodeline": "ptr = strchr (input, ' ');"
    },
    {
        "line": 89,
        "fullcodeline": "list = r_fs_partitions (core->fs, input, off);"
    },
    {
        "line": 100,
        "fullcodeline": "input++;"
    },
    {
        "line": 103,
        "fullcodeline": "file = r_fs_open (core->fs, input);"
    },
    {
        "line": 112,
        "fullcodeline": "input++;"
    },
    {
        "line": 115,
        "fullcodeline": "ptr = strchr (input, ' ');"
    },
    {
        "line": 120,
        "fullcodeline": "file = r_fs_open (core->fs, input);"
    },
    {
        "line": 130,
        "fullcodeline": "input++;"
    },
    {
        "line": 177,
        "fullcodeline": "input++;"
    },
    {
        "line": 13,
        "fullcodeline": "return cmd_mkdir (data, _input);"
    },
    {
        "line": 16,
        "fullcodeline": "return cmd_mv (data, _input);"
    },
    {
        "line": 23,
        "fullcodeline": "if (input[0]==' ') {"
    },
    {
        "line": 70,
        "fullcodeline": "if (input[0]==' ')"
    },
    {
        "line": 82,
        "fullcodeline": "if (*input == ' ')"
    },
    {
        "line": 101,
        "fullcodeline": "if (input[0]==' ')"
    },
    {
        "line": 113,
        "fullcodeline": "if (*input == ' ')"
    },
    {
        "line": 178,
        "fullcodeline": "if (input[0]==' ')"
    },
    {
        "line": 186,
        "fullcodeline": "const char* help_msg[] = {"
    },
    {
        "line": 24,
        "fullcodeline": "input++;"
    },
    {
        "line": 28,
        "fullcodeline": "*ptr = 0;"
    },
    {
        "line": 29,
        "fullcodeline": "ptr++;"
    },
    {
        "line": 30,
        "fullcodeline": "ptr2 = strchr (ptr, ' ');"
    },
    {
        "line": 71,
        "fullcodeline": "input++;"
    },
    {
        "line": 74,
        "fullcodeline": "r_list_foreach (list, iter, file) {"
    },
    {
        "line": 83,
        "fullcodeline": "input++;"
    },
    {
        "line": 86,
        "fullcodeline": "*ptr = 0;"
    },
    {
        "line": 87,
        "fullcodeline": "off = r_num_math (core->num, ptr+1);"
    },
    {
        "line": 91,
        "fullcodeline": "r_list_foreach (list, iter, part) {"
    },
    {
        "line": 102,
        "fullcodeline": "input++;"
    },
    {
        "line": 106,
        "fullcodeline": "r_fs_read (core->fs, file, 0, file->size);"
    },
    {
        "line": 114,
        "fullcodeline": "input++;"
    },
    {
        "line": 122,
        "fullcodeline": "r_fs_read (core->fs, file, 0, file->size);"
    },
    {
        "line": 123,
        "fullcodeline": "write (1, file->data, file->size);"
    },
    {
        "line": 140,
        "fullcodeline": "input++;"
    },
    {
        "line": 143,
        "fullcodeline": "ptr = strchr (input, ' ');"
    },
    {
        "line": 155,
        "fullcodeline": "input++;"
    },
    {
        "line": 158,
        "fullcodeline": "ptr = strchr (input, ' ');"
    },
    {
        "line": 179,
        "fullcodeline": "input++;"
    },
    {
        "line": 119,
        "fullcodeline": "ptr = \"./\";"
    },
    {
        "line": 141,
        "fullcodeline": "if (*input == ' ')"
    },
    {
        "line": 156,
        "fullcodeline": "if (*input == ' ')"
    },
    {
        "line": 32,
        "fullcodeline": "*ptr2 = 0;"
    },
    {
        "line": 33,
        "fullcodeline": "off = r_num_math (core->num, ptr2+1);"
    },
    {
        "line": 35,
        "fullcodeline": "if (!r_fs_mount (core->fs, ptr, input, off)) {"
    },
    {
        "line": 117,
        "fullcodeline": "*ptr++ = 0;"
    },
    {
        "line": 142,
        "fullcodeline": "input++;"
    },
    {
        "line": 146,
        "fullcodeline": "list = r_fs_find_name (core->fs, input, ptr);"
    },
    {
        "line": 147,
        "fullcodeline": "r_list_foreach (list, iter, ptr) {"
    },
    {
        "line": 157,
        "fullcodeline": "input++;"
    },
    {
        "line": 161,
        "fullcodeline": "ut64 off = r_num_math (core->num, ptr);"
    },
    {
        "line": 162,
        "fullcodeline": "list = r_fs_find_off (core->fs, input, off);"
    },
    {
        "line": 163,
        "fullcodeline": "r_list_foreach (list, iter, ptr) {"
    },
    {
        "line": 39,
        "fullcodeline": "if (!(ptr = r_fs_name (core->fs, core->offset))) {"
    },
    {
        "line": 126,
        "fullcodeline": "} else if (!r_fs_dir_dump (core->fs, input, ptr))"
    },
    {
        "line": 148,
        "fullcodeline": "r_str_chop_path (ptr);"
    },
    {
        "line": 164,
        "fullcodeline": "r_str_chop_path (ptr);"
    },
    {
        "line": 145,
        "fullcodeline": "*ptr++ = 0;"
    },
    {
        "line": 160,
        "fullcodeline": "*ptr++ = 0;"
    },
    {
        "line": 41,
        "fullcodeline": "} else if (!r_fs_mount (core->fs, ptr, input, core->offset)) {"
    }
]