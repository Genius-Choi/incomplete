[
    {
        "line": 6,
        "fullcodeline": "result = []"
    },
    {
        "line": 2,
        "fullcodeline": "if exclude is None:"
    },
    {
        "line": 7,
        "fullcodeline": "if (isinstance(data, abc.Iterable) and not isinstance(data, (str, dict)) and not (hasattr(data, 'elements') and isinstance(data.elements, dict))) or (hasattr(data, 'elements') and isinstance(data.elements, (list, set))):"
    },
    {
        "line": 3,
        "fullcodeline": "to_exclude = []"
    },
    {
        "line": 5,
        "fullcodeline": "to_exclude = unpack_list(exclude)"
    },
    {
        "line": 8,
        "fullcodeline": "for entry in data:"
    },
    {
        "line": 68,
        "fullcodeline": "elif isinstance(data, dict) or (hasattr(data, 'elements') and isinstance(data.elements, dict)):"
    },
    {
        "line": 82,
        "fullcodeline": "raise DASourceError(\"Unknown data type in choices selection: \" + re.sub(r'[<>]', '', repr(data)))"
    },
    {
        "line": 69,
        "fullcodeline": "if isinstance(data, OrderedDict) or (hasattr(data, 'elements') and isinstance(data.elements, OrderedDict)):"
    },
    {
        "line": 73,
        "fullcodeline": "for key, value in the_items:"
    },
    {
        "line": 9,
        "fullcodeline": "if isinstance(entry, dict) or (hasattr(entry, 'elements') and isinstance(entry.elements, dict)):"
    },
    {
        "line": 52,
        "fullcodeline": "if (isinstance(entry, (list, tuple)) or (hasattr(entry, 'elements') and isinstance(entry.elements, list))) and len(entry) > 0:"
    },
    {
        "line": 70,
        "fullcodeline": "the_items = data.items()"
    },
    {
        "line": 72,
        "fullcodeline": "the_items = sorted(data.items(), key=operator.itemgetter(1))"
    },
    {
        "line": 10,
        "fullcodeline": "the_item = {}"
    },
    {
        "line": 11,
        "fullcodeline": "for key in entry:"
    },
    {
        "line": 53,
        "fullcodeline": "if entry[0] not in to_exclude:"
    },
    {
        "line": 62,
        "fullcodeline": "elif isinstance(entry, (str, bool, int, float)):"
    },
    {
        "line": 74,
        "fullcodeline": "if key not in to_exclude:"
    },
    {
        "line": 54,
        "fullcodeline": "if len(entry) >= 4:"
    },
    {
        "line": 63,
        "fullcodeline": "if entry not in to_exclude:"
    },
    {
        "line": 65,
        "fullcodeline": "elif hasattr(entry, 'instanceName'):"
    },
    {
        "line": 75,
        "fullcodeline": "if isinstance(value, (str, bool, int, float)):"
    },
    {
        "line": 12,
        "fullcodeline": "if len(entry) > 1:"
    },
    {
        "line": 36,
        "fullcodeline": "if key == 'value' and 'label' in entry:"
    },
    {
        "line": 55,
        "fullcodeline": "result.append({'key': entry[0], 'label': entry[1], 'default': entry[2], 'help': entry[3]})"
    },
    {
        "line": 64,
        "fullcodeline": "result.append({'key': entry, 'label': entry})"
    },
    {
        "line": 76,
        "fullcodeline": "result.append({'key': key, 'label': value})"
    },
    {
        "line": 37,
        "fullcodeline": "the_item['key'] = entry[key]"
    },
    {
        "line": 38,
        "fullcodeline": "the_item['label'] = entry['label']"
    },
    {
        "line": 42,
        "fullcodeline": "the_item['key'] = key"
    },
    {
        "line": 43,
        "fullcodeline": "the_item['label'] = entry[key]"
    },
    {
        "line": 44,
        "fullcodeline": "is_not_boolean = False"
    },
    {
        "line": 56,
        "fullcodeline": "elif len(entry) == 3:"
    },
    {
        "line": 66,
        "fullcodeline": "if entry not in to_exclude:"
    },
    {
        "line": 77,
        "fullcodeline": "elif hasattr(value, 'instanceName'):"
    },
    {
        "line": 13,
        "fullcodeline": "if key in ('default', 'help', 'image', 'label', 'group', 'css class', 'color', 'show if'):"
    },
    {
        "line": 15,
        "fullcodeline": "for standard_key in ('css class', 'color', 'default', 'help', 'group'):"
    },
    {
        "line": 18,
        "fullcodeline": "if 'image' in entry:"
    },
    {
        "line": 39,
        "fullcodeline": "if entry.get('show if', True) and entry[key] not in to_exclude and ((not isinstance(entry['label'], bool)) or entry['label'] is True):"
    },
    {
        "line": 45,
        "fullcodeline": "for key, val in entry.items():"
    },
    {
        "line": 50,
        "fullcodeline": "if entry.get('show if', True) and key not in to_exclude and (is_not_boolean or entry[key] is True):"
    },
    {
        "line": 57,
        "fullcodeline": "result.append({'key': entry[0], 'label': entry[1], 'default': entry[2]})"
    },
    {
        "line": 67,
        "fullcodeline": "result.append({'key': str(entry), 'label': str(entry)})"
    },
    {
        "line": 78,
        "fullcodeline": "result.append({'key': key, 'label': str(value)})"
    },
    {
        "line": 80,
        "fullcodeline": "logmessage(\"process_selections: non-label passed as label in dictionary\")"
    },
    {
        "line": 40,
        "fullcodeline": "result.append(the_item)"
    },
    {
        "line": 51,
        "fullcodeline": "result.append(the_item)"
    },
    {
        "line": 58,
        "fullcodeline": "elif len(entry) == 1:"
    },
    {
        "line": 19,
        "fullcodeline": "if entry['image'].__class__.__name__ == 'DAFile':"
    },
    {
        "line": 59,
        "fullcodeline": "result.append({'key': entry[0], 'label': entry[0]})"
    },
    {
        "line": 61,
        "fullcodeline": "result.append({'key': entry[0], 'label': entry[1]})"
    },
    {
        "line": 16,
        "fullcodeline": "if standard_key in entry:"
    },
    {
        "line": 46,
        "fullcodeline": "if key in ('default', 'help', 'image', 'label', 'group', 'css class', 'color', 'show if'):"
    },
    {
        "line": 48,
        "fullcodeline": "if val not in (True, False):"
    },
    {
        "line": 17,
        "fullcodeline": "the_item[standard_key] = entry[standard_key]"
    },
    {
        "line": 20,
        "fullcodeline": "entry['image'].retrieve()"
    },
    {
        "line": 21,
        "fullcodeline": "if entry['image'].mimetype is not None and entry['image'].mimetype.startswith('image'):"
    },
    {
        "line": 23,
        "fullcodeline": "elif entry['image'].__class__.__name__ == 'DAFileList':"
    },
    {
        "line": 49,
        "fullcodeline": "is_not_boolean = True"
    },
    {
        "line": 22,
        "fullcodeline": "the_item['image'] = {'type': 'url', 'value': entry['image'].url_for()}"
    },
    {
        "line": 24,
        "fullcodeline": "entry['image'][0].retrieve()"
    },
    {
        "line": 25,
        "fullcodeline": "if entry['image'][0].mimetype is not None and entry['image'][0].mimetype.startswith('image'):"
    },
    {
        "line": 27,
        "fullcodeline": "elif entry['image'].__class__.__name__ == 'DAFileCollection':"
    },
    {
        "line": 26,
        "fullcodeline": "the_item['image'] = {'type': 'url', 'value': entry['image'][0].url_for()}"
    },
    {
        "line": 28,
        "fullcodeline": "the_file = entry['image']._first_file()"
    },
    {
        "line": 29,
        "fullcodeline": "the_file.retrieve()"
    },
    {
        "line": 30,
        "fullcodeline": "if the_file.mimetype is not None and the_file.mimetype.startswith('image'):"
    },
    {
        "line": 32,
        "fullcodeline": "elif entry['image'].__class__.__name__ == 'DAStaticFile':"
    },
    {
        "line": 31,
        "fullcodeline": "the_item['image'] = {'type': 'url', 'value': entry['image'][0].url_for()}"
    },
    {
        "line": 33,
        "fullcodeline": "the_item['image'] = {'type': 'url', 'value': entry['image'].url_for()}"
    },
    {
        "line": 35,
        "fullcodeline": "the_item['image'] = {'type': 'decoration', 'value': entry['image']}"
    }
]