[
    {
        "line": 2,
        "fullcodeline": "names = set()"
    },
    {
        "line": 19,
        "fullcodeline": "from docassemble.base.legal import __all__ as legal_all  # pylint: disable=import-outside-toplevel"
    },
    {
        "line": 3,
        "fullcodeline": "if not os.path.isfile(the_path):"
    },
    {
        "line": 16,
        "fullcodeline": "for key in jinja2meta.find_undeclared_variables(parsed_content):"
    },
    {
        "line": 20,
        "fullcodeline": "for name in legal_all:"
    },
    {
        "line": 23,
        "fullcodeline": "return sorted(list(names))"
    },
    {
        "line": 4,
        "fullcodeline": "raise DAError(\"Missing docx template file \" + os.path.basename(the_path))"
    },
    {
        "line": 6,
        "fullcodeline": "docx_template = DocxTemplate(the_path)"
    },
    {
        "line": 7,
        "fullcodeline": "docx_template.render_init()"
    },
    {
        "line": 8,
        "fullcodeline": "the_env = custom_jinja_env()"
    },
    {
        "line": 9,
        "fullcodeline": "the_xml = docx_template.get_xml()"
    },
    {
        "line": 10,
        "fullcodeline": "the_xml = re.sub(r'<w:p([ >])', r'\\n<w:p\\1', the_xml)"
    },
    {
        "line": 11,
        "fullcodeline": "the_xml = re.sub(r'({[\\%\\{].*?[\\%\\}]})', fix_quotes, the_xml)"
    },
    {
        "line": 12,
        "fullcodeline": "the_xml = docx_template.patch_xml(the_xml)"
    },
    {
        "line": 13,
        "fullcodeline": "parsed_content = the_env.parse(the_xml)"
    },
    {
        "line": 15,
        "fullcodeline": "raise DAError(\"There was an error parsing the docx file: \" + the_err.__class__.__name__ + \" \" + str(the_err))"
    },
    {
        "line": 17,
        "fullcodeline": "if not key.startswith('__'):"
    },
    {
        "line": 21,
        "fullcodeline": "if name in names:"
    },
    {
        "line": 18,
        "fullcodeline": "names.add(key)"
    },
    {
        "line": 22,
        "fullcodeline": "names.remove(name)"
    }
]