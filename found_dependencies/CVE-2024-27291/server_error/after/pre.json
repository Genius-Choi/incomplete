[
    {
        "line": 2,
        "fullcodeline": "setup_translation()"
    },
    {
        "line": 7,
        "fullcodeline": "the_vars = None"
    },
    {
        "line": 80,
        "fullcodeline": "flask_logtext = []"
    },
    {
        "line": 87,
        "fullcodeline": "orig_errmess = errmess"
    },
    {
        "line": 88,
        "fullcodeline": "errmess = noquote(errmess)"
    },
    {
        "line": 93,
        "fullcodeline": "script = \"\"\""
    },
    {
        "line": 262,
        "fullcodeline": "error_notification(the_error, message=errmess, history=the_history, trace=the_trace, the_request=request, the_vars=the_vars)"
    },
    {
        "line": 271,
        "fullcodeline": "show_debug = not bool((not (DEBUG and daconfig.get('development site is protected', False))) and isinstance(the_error, (DAError, DAInvalidFilename)))"
    },
    {
        "line": 282,
        "fullcodeline": "show_retry = request.path.endswith('/interview') or request.path.endswith('/start') or request.path.endswith('/run')"
    },
    {
        "line": 3,
        "fullcodeline": "if hasattr(the_error, 'interview') and the_error.interview.debug and hasattr(the_error, 'interview_status'):"
    },
    {
        "line": 8,
        "fullcodeline": "if isinstance(the_error, DASourceError):"
    },
    {
        "line": 50,
        "fullcodeline": "if isinstance(the_error, DAError):"
    },
    {
        "line": 52,
        "fullcodeline": "if isinstance(the_error, DANotFoundError):"
    },
    {
        "line": 58,
        "fullcodeline": "if hasattr(the_error, 'user_dict'):"
    },
    {
        "line": 60,
        "fullcodeline": "if hasattr(the_error, 'interview'):"
    },
    {
        "line": 74,
        "fullcodeline": "if special_error_markdown is None:"
    },
    {
        "line": 76,
        "fullcodeline": "if special_error_markdown is not None:"
    },
    {
        "line": 89,
        "fullcodeline": "if re.search(r'\\n', errmess):"
    },
    {
        "line": 263,
        "fullcodeline": "if (request.path.endswith('/interview') or request.path.endswith('/start') or request.path.endswith('/run')) and docassemble.base.functions.interview_path() is not None:"
    },
    {
        "line": 274,
        "fullcodeline": "if error_code == 404:"
    },
    {
        "line": 283,
        "fullcodeline": "return render_template(the_template, verbose=daconfig.get('verbose error messages', True), version_warning=None, tab_title=word(\"Error\"), page_title=word(\"Error\"), error=errmess, historytext=str(the_history), logtext=str(the_trace), extra_js=Markup(script), special_error=special_error_html, show_debug=show_debug, yaml_filename=yaml_filename, show_retry=show_retry), error_code"
    },
    {
        "line": 4,
        "fullcodeline": "the_history = get_history(the_error.interview, the_error.interview_status)"
    },
    {
        "line": 6,
        "fullcodeline": "the_history = None"
    },
    {
        "line": 13,
        "fullcodeline": "the_trace = None"
    },
    {
        "line": 14,
        "fullcodeline": "logmessage(str(the_error))"
    },
    {
        "line": 51,
        "fullcodeline": "error_code = the_error.error_code"
    },
    {
        "line": 53,
        "fullcodeline": "error_code = 404"
    },
    {
        "line": 59,
        "fullcodeline": "the_vars = the_error.user_dict"
    },
    {
        "line": 61,
        "fullcodeline": "special_error_markdown = the_error.interview.consolidated_metadata.get('error help', None)"
    },
    {
        "line": 73,
        "fullcodeline": "special_error_markdown = None"
    },
    {
        "line": 75,
        "fullcodeline": "special_error_markdown = daconfig.get('error help', None)"
    },
    {
        "line": 77,
        "fullcodeline": "special_error_html = docassemble.base.util.markdown_to_html(special_error_markdown)"
    },
    {
        "line": 79,
        "fullcodeline": "special_error_html = None"
    },
    {
        "line": 81,
        "fullcodeline": "if os.path.exists(LOGFILE):"
    },
    {
        "line": 90,
        "fullcodeline": "errmess = '<pre>' + errmess + '</pre>'"
    },
    {
        "line": 92,
        "fullcodeline": "errmess = '<blockquote class=\"blockquote\">' + errmess + '</blockquote>'"
    },
    {
        "line": 272,
        "fullcodeline": "if int(int(error_code)/100) == 4:"
    },
    {
        "line": 273,
        "fullcodeline": "show_debug = False"
    },
    {
        "line": 275,
        "fullcodeline": "the_template = 'pages/404.html'"
    },
    {
        "line": 277,
        "fullcodeline": "the_template = 'pages/501.html'"
    },
    {
        "line": 279,
        "fullcodeline": "yaml_filename = docassemble.base.functions.interview_path()"
    },
    {
        "line": 9,
        "fullcodeline": "if (DEBUG and daconfig.get('development site is protected', False)) or (current_user.is_authenticated and current_user.has_role('admin', 'developer')):"
    },
    {
        "line": 15,
        "fullcodeline": "elif isinstance(the_error, (DAError, DANotFoundError, DAInvalidFilename)):"
    },
    {
        "line": 54,
        "fullcodeline": "elif isinstance(the_error, werkzeug.exceptions.HTTPException):"
    },
    {
        "line": 62,
        "fullcodeline": "if isinstance(special_error_markdown, dict):"
    },
    {
        "line": 82,
        "fullcodeline": "with open(LOGFILE, encoding='utf-8') as the_file:"
    },
    {
        "line": 223,
        "fullcodeline": "$(\"body\").append(\"\"\" + json.dumps(NOTIFICATION_CONTAINER % ('',)) + \"\"\");"
    },
    {
        "line": 268,
        "fullcodeline": "if 'in error' not in session and docassemble.base.functions.this_thread.interview is not None and 'error action' in docassemble.base.functions.this_thread.interview.consolidated_metadata:"
    },
    {
        "line": 10,
        "fullcodeline": "errmess = str(the_error)"
    },
    {
        "line": 12,
        "fullcodeline": "errmess = word(\"There was an error. Please contact the system administrator.\")"
    },
    {
        "line": 16,
        "fullcodeline": "errmess = str(the_error)"
    },
    {
        "line": 17,
        "fullcodeline": "the_trace = None"
    },
    {
        "line": 18,
        "fullcodeline": "logmessage(errmess)"
    },
    {
        "line": 55,
        "fullcodeline": "error_code = the_error.code"
    },
    {
        "line": 57,
        "fullcodeline": "error_code = 501"
    },
    {
        "line": 63,
        "fullcodeline": "language = docassemble.base.functions.get_language()"
    },
    {
        "line": 265,
        "fullcodeline": "release_lock(docassemble.base.functions.this_thread.current_info['session'], docassemble.base.functions.this_thread.current_info['yaml_filename'])"
    },
    {
        "line": 269,
        "fullcodeline": "session['in error'] = True"
    },
    {
        "line": 281,
        "fullcodeline": "yaml_filename = None"
    },
    {
        "line": 19,
        "fullcodeline": "elif isinstance(the_error, TemplateError):"
    },
    {
        "line": 64,
        "fullcodeline": "if language in special_error_markdown:"
    },
    {
        "line": 97,
        "fullcodeline": "var daNotificationMessage = \"\"\" + json.dumps(NOTIFICATION_MESSAGE) + \"\"\";"
    },
    {
        "line": 270,
        "fullcodeline": "return index(action_argument={'action': docassemble.base.functions.this_thread.interview.consolidated_metadata['error action'], 'arguments': {'error_message': orig_errmess, 'error_history': the_history, 'error_trace': the_trace}}, refer=['error'])"
    },
    {
        "line": 20,
        "fullcodeline": "errmess = str(the_error)"
    },
    {
        "line": 27,
        "fullcodeline": "the_trace = traceback.format_exc()"
    },
    {
        "line": 49,
        "fullcodeline": "logmessage(the_trace)"
    },
    {
        "line": 65,
        "fullcodeline": "special_error_markdown = special_error_markdown[language]"
    },
    {
        "line": 83,
        "fullcodeline": "for line in the_file:"
    },
    {
        "line": 267,
        "fullcodeline": "pass"
    },
    {
        "line": 21,
        "fullcodeline": "if hasattr(the_error, 'name') and the_error.name is not None:"
    },
    {
        "line": 23,
        "fullcodeline": "if hasattr(the_error, 'filename') and the_error.filename is not None:"
    },
    {
        "line": 25,
        "fullcodeline": "if hasattr(the_error, 'docx_context'):"
    },
    {
        "line": 37,
        "fullcodeline": "if hasattr(the_error, 'traceback'):"
    },
    {
        "line": 41,
        "fullcodeline": "if hasattr(docassemble.base.functions.this_thread, 'misc') and 'current_field' in docassemble.base.functions.this_thread.misc:"
    },
    {
        "line": 43,
        "fullcodeline": "if hasattr(the_error, 'da_line_with_error'):"
    },
    {
        "line": 66,
        "fullcodeline": "elif '*' in special_error_markdown:"
    },
    {
        "line": 96,
        "fullcodeline": "var daMessageLog = JSON.parse(atob(\"\"\" + json.dumps(safeid(json.dumps(docassemble.base.functions.get_message_log()))) + \"\"\"));"
    },
    {
        "line": 22,
        "fullcodeline": "errmess += \"\\nName: \" + str(the_error.name)"
    },
    {
        "line": 24,
        "fullcodeline": "errmess += \"\\nFilename: \" + str(the_error.filename)"
    },
    {
        "line": 26,
        "fullcodeline": "errmess += \"\\n\\nContext:\\n\" + \"\\n\".join(map(lambda x: \"  \" + x, the_error.docx_context))"
    },
    {
        "line": 29,
        "fullcodeline": "logmessage(errmess)"
    },
    {
        "line": 34,
        "fullcodeline": "errmess = str(type(the_error).__name__) + \": \" + str(the_error)"
    },
    {
        "line": 38,
        "fullcodeline": "the_trace = the_error.traceback"
    },
    {
        "line": 40,
        "fullcodeline": "the_trace = traceback.format_exc()"
    },
    {
        "line": 42,
        "fullcodeline": "errmess += \"\\nIn field index number \" + str(docassemble.base.functions.this_thread.misc['current_field'])"
    },
    {
        "line": 44,
        "fullcodeline": "errmess += \"\\nIn line: \" + str(the_error.da_line_with_error)"
    },
    {
        "line": 46,
        "fullcodeline": "logmessage(errmess)"
    },
    {
        "line": 67,
        "fullcodeline": "special_error_markdown = special_error_markdown['*']"
    },
    {
        "line": 86,
        "fullcodeline": "flask_logtext.append(line)"
    },
    {
        "line": 68,
        "fullcodeline": "elif DEFAULT_LANGUAGE in special_error_markdown:"
    },
    {
        "line": 84,
        "fullcodeline": "if re.match('Exception', line):"
    },
    {
        "line": 31,
        "fullcodeline": "logmessage(\"Could not log the error message\")"
    },
    {
        "line": 36,
        "fullcodeline": "errmess = str(type(the_error).__name__)"
    },
    {
        "line": 48,
        "fullcodeline": "logmessage(\"Could not log the error message\")"
    },
    {
        "line": 69,
        "fullcodeline": "special_error_markdown = special_error_markdown[DEFAULT_LANGUAGE]"
    },
    {
        "line": 71,
        "fullcodeline": "special_error_markdown = None"
    },
    {
        "line": 85,
        "fullcodeline": "flask_logtext = []"
    }
]