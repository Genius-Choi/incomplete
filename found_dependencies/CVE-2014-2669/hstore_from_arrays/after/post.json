[
    {
        "line": 19,
        "fullcodeline": "key_array = PG_GETARG_ARRAYTYPE_P(0);"
    },
    {
        "line": 21,
        "fullcodeline": "Assert(ARR_ELEMTYPE(key_array) == TEXTOID);"
    },
    {
        "line": 33,
        "fullcodeline": "deconstruct_array(key_array,"
    },
    {
        "line": 79,
        "fullcodeline": "pairs = palloc(key_count * sizeof(Pairs));"
    },
    {
        "line": 108,
        "fullcodeline": "key_count = hstoreUniquePairs(pairs, key_count, &buflen);"
    },
    {
        "line": 110,
        "fullcodeline": "out = hstorePairs(pairs, key_count, buflen);"
    },
    {
        "line": 112,
        "fullcodeline": "PG_RETURN_POINTER(out);"
    },
    {
        "line": 16,
        "fullcodeline": "if (PG_ARGISNULL(0))"
    },
    {
        "line": 28,
        "fullcodeline": "if (ARR_NDIM(key_array) > 1)"
    },
    {
        "line": 34,
        "fullcodeline": "TEXTOID, -1, false, 'i',"
    },
    {
        "line": 38,
        "fullcodeline": "if (key_count > MaxAllocSize / sizeof(Pairs))"
    },
    {
        "line": 46,
        "fullcodeline": "if (PG_ARGISNULL(1))"
    },
    {
        "line": 81,
        "fullcodeline": "for (i = 0; i < key_count; ++i)"
    },
    {
        "line": 17,
        "fullcodeline": "PG_RETURN_NULL();"
    },
    {
        "line": 29,
        "fullcodeline": "ereport(ERROR,"
    },
    {
        "line": 39,
        "fullcodeline": "ereport(ERROR,"
    },
    {
        "line": 48,
        "fullcodeline": "value_array = NULL;"
    },
    {
        "line": 49,
        "fullcodeline": "value_count = key_count;"
    },
    {
        "line": 50,
        "fullcodeline": "value_datums = NULL;"
    },
    {
        "line": 51,
        "fullcodeline": "value_nulls = NULL;"
    },
    {
        "line": 30,
        "fullcodeline": "(errcode(ERRCODE_ARRAY_SUBSCRIPT_ERROR),"
    },
    {
        "line": 40,
        "fullcodeline": "(errcode(ERRCODE_PROGRAM_LIMIT_EXCEEDED),"
    },
    {
        "line": 55,
        "fullcodeline": "value_array = PG_GETARG_ARRAYTYPE_P(1);"
    },
    {
        "line": 57,
        "fullcodeline": "Assert(ARR_ELEMTYPE(value_array) == TEXTOID);"
    },
    {
        "line": 72,
        "fullcodeline": "deconstruct_array(value_array,"
    },
    {
        "line": 76,
        "fullcodeline": "Assert(key_count == value_count);"
    },
    {
        "line": 88,
        "fullcodeline": "if (!value_nulls || value_nulls[i])"
    },
    {
        "line": 59,
        "fullcodeline": "if (ARR_NDIM(value_array) > 1)"
    },
    {
        "line": 64,
        "fullcodeline": "if ((ARR_NDIM(key_array) > 0 || ARR_NDIM(value_array) > 0) &&"
    },
    {
        "line": 73,
        "fullcodeline": "TEXTOID, -1, false, 'i',"
    },
    {
        "line": 84,
        "fullcodeline": "ereport(ERROR,"
    },
    {
        "line": 90,
        "fullcodeline": "pairs[i].key = VARDATA_ANY(key_datums[i]);"
    },
    {
        "line": 91,
        "fullcodeline": "pairs[i].val = NULL;"
    },
    {
        "line": 92,
        "fullcodeline": "pairs[i].keylen = hstoreCheckKeyLen(VARSIZE_ANY_EXHDR(key_datums[i]));"
    },
    {
        "line": 93,
        "fullcodeline": "pairs[i].vallen = 4;"
    },
    {
        "line": 94,
        "fullcodeline": "pairs[i].isnull = true;"
    },
    {
        "line": 95,
        "fullcodeline": "pairs[i].needfree = false;"
    },
    {
        "line": 31,
        "fullcodeline": "errmsg(\"wrong number of array subscripts\")));"
    },
    {
        "line": 41,
        "fullcodeline": "errmsg(\"number of pairs (%d) exceeds the maximum allowed (%d)\","
    },
    {
        "line": 60,
        "fullcodeline": "ereport(ERROR,"
    },
    {
        "line": 65,
        "fullcodeline": "(ARR_NDIM(key_array) != ARR_NDIM(value_array) ||"
    },
    {
        "line": 68,
        "fullcodeline": "ereport(ERROR,"
    },
    {
        "line": 85,
        "fullcodeline": "(errcode(ERRCODE_NULL_VALUE_NOT_ALLOWED),"
    },
    {
        "line": 99,
        "fullcodeline": "pairs[i].key = VARDATA_ANY(key_datums[i]);"
    },
    {
        "line": 100,
        "fullcodeline": "pairs[i].val = VARDATA_ANY(value_datums[i]);"
    },
    {
        "line": 101,
        "fullcodeline": "pairs[i].keylen = hstoreCheckKeyLen(VARSIZE_ANY_EXHDR(key_datums[i]));"
    },
    {
        "line": 102,
        "fullcodeline": "pairs[i].vallen = hstoreCheckValLen(VARSIZE_ANY_EXHDR(value_datums[i]));"
    },
    {
        "line": 103,
        "fullcodeline": "pairs[i].isnull = false;"
    },
    {
        "line": 104,
        "fullcodeline": "pairs[i].needfree = false;"
    },
    {
        "line": 42,
        "fullcodeline": "key_count, (int) (MaxAllocSize / sizeof(Pairs)))));"
    },
    {
        "line": 61,
        "fullcodeline": "(errcode(ERRCODE_ARRAY_SUBSCRIPT_ERROR),"
    },
    {
        "line": 69,
        "fullcodeline": "(errcode(ERRCODE_ARRAY_SUBSCRIPT_ERROR),"
    },
    {
        "line": 86,
        "fullcodeline": "errmsg(\"null value not allowed for hstore key\")));"
    },
    {
        "line": 62,
        "fullcodeline": "errmsg(\"wrong number of array subscripts\")));"
    },
    {
        "line": 67,
        "fullcodeline": "ARR_LBOUND(key_array)[0] != ARR_LBOUND(value_array)[0]))"
    },
    {
        "line": 70,
        "fullcodeline": "errmsg(\"arrays must have same bounds\")));"
    },
    {
        "line": 66,
        "fullcodeline": "ARR_DIMS(key_array)[0] != ARR_DIMS(value_array)[0] ||"
    }
]