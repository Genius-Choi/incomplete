[
    {
        "line": 12,
        "fullcodeline": "bitlen1 = VARBITLEN(arg1);"
    },
    {
        "line": 13,
        "fullcodeline": "bitlen2 = VARBITLEN(arg2);"
    },
    {
        "line": 15,
        "fullcodeline": "bytelen = VARBITTOTALLEN(bitlen1 + bitlen2);"
    },
    {
        "line": 17,
        "fullcodeline": "result = (VarBit *) palloc(bytelen);"
    },
    {
        "line": 18,
        "fullcodeline": "SET_VARSIZE(result, bytelen);"
    },
    {
        "line": 19,
        "fullcodeline": "VARBITLEN(result) = bitlen1 + bitlen2;"
    },
    {
        "line": 22,
        "fullcodeline": "memcpy(VARBITS(result), VARBITS(arg1), VARBITBYTES(arg1));"
    },
    {
        "line": 25,
        "fullcodeline": "bit1pad = VARBITPAD(arg1);"
    },
    {
        "line": 26,
        "fullcodeline": "if (bit1pad == 0)"
    },
    {
        "line": 28,
        "fullcodeline": "memcpy(VARBITS(result) + VARBITBYTES(arg1), VARBITS(arg2),"
    },
    {
        "line": 29,
        "fullcodeline": "VARBITBYTES(arg2));"
    },
    {
        "line": 31,
        "fullcodeline": "else if (bitlen2 > 0)"
    },
    {
        "line": 34,
        "fullcodeline": "bit2shift = BITS_PER_BYTE - bit1pad;"
    },
    {
        "line": 35,
        "fullcodeline": "pr = VARBITS(result) + VARBITBYTES(arg1) - 1;"
    },
    {
        "line": 36,
        "fullcodeline": "for (pa = VARBITS(arg2); pa < VARBITEND(arg2); pa++)"
    },
    {
        "line": 38,
        "fullcodeline": "*pr |= ((*pa >> bit2shift) & BITMASK);"
    },
    {
        "line": 39,
        "fullcodeline": "pr++;"
    },
    {
        "line": 40,
        "fullcodeline": "if (pr < VARBITEND(result))"
    },
    {
        "line": 41,
        "fullcodeline": "*pr = (*pa << bit1pad) & BITMASK;"
    }
]