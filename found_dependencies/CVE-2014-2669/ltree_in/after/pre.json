[
    {
        "line": 3,
        "fullcodeline": "char\t   *buf = (char *) PG_GETARG_POINTER(0);"
    },
    {
        "line": 7,
        "fullcodeline": "int\t\t\tnum = 0,"
    },
    {
        "line": 8,
        "fullcodeline": "totallen = 0;"
    },
    {
        "line": 9,
        "fullcodeline": "int\t\t\tstate = LTPRS_WAITNAME;"
    },
    {
        "line": 13,
        "fullcodeline": "int\t\t\tpos = 0;"
    },
    {
        "line": 15,
        "fullcodeline": "ptr = buf;"
    },
    {
        "line": 29,
        "fullcodeline": "list = lptr = (nodeitem *) palloc(sizeof(nodeitem) * (num + 1));"
    },
    {
        "line": 30,
        "fullcodeline": "ptr = buf;"
    },
    {
        "line": 95,
        "fullcodeline": "result = (ltree *) palloc0(LTREE_HDRSIZE + totallen);"
    },
    {
        "line": 96,
        "fullcodeline": "SET_VARSIZE(result, LTREE_HDRSIZE + totallen);"
    },
    {
        "line": 97,
        "fullcodeline": "result->numlevel = lptr - list;"
    },
    {
        "line": 98,
        "fullcodeline": "curlevel = LTREE_FIRST(result);"
    },
    {
        "line": 99,
        "fullcodeline": "lptr = list;"
    },
    {
        "line": 108,
        "fullcodeline": "pfree(list);"
    },
    {
        "line": 109,
        "fullcodeline": "PG_RETURN_POINTER(result);"
    },
    {
        "line": 24,
        "fullcodeline": "if (num + 1 > MaxAllocSize / sizeof(nodeitem))"
    },
    {
        "line": 75,
        "fullcodeline": "if (state == LTPRS_WAITDELIM)"
    },
    {
        "line": 100,
        "fullcodeline": "while (lptr - list < result->numlevel)"
    },
    {
        "line": 18,
        "fullcodeline": "charlen = pg_mblen(ptr);"
    },
    {
        "line": 21,
        "fullcodeline": "ptr += charlen;"
    },
    {
        "line": 25,
        "fullcodeline": "ereport(ERROR,"
    },
    {
        "line": 33,
        "fullcodeline": "charlen = pg_mblen(ptr);"
    },
    {
        "line": 70,
        "fullcodeline": "ptr += charlen;"
    },
    {
        "line": 71,
        "fullcodeline": "lptr->wlen++;"
    },
    {
        "line": 72,
        "fullcodeline": "pos++;"
    },
    {
        "line": 77,
        "fullcodeline": "lptr->len = ptr - lptr->start;"
    },
    {
        "line": 86,
        "fullcodeline": "totallen += MAXALIGN(lptr->len + LEVEL_HDRSIZE);"
    },
    {
        "line": 87,
        "fullcodeline": "lptr++;"
    },
    {
        "line": 102,
        "fullcodeline": "curlevel->len = (uint16) lptr->len;"
    },
    {
        "line": 103,
        "fullcodeline": "memcpy(curlevel->name, lptr->start, lptr->len);"
    },
    {
        "line": 104,
        "fullcodeline": "curlevel = LEVEL_NEXT(curlevel);"
    },
    {
        "line": 105,
        "fullcodeline": "lptr++;"
    },
    {
        "line": 19,
        "fullcodeline": "if (charlen == 1 && t_iseq(ptr, '.'))"
    },
    {
        "line": 26,
        "fullcodeline": "(errcode(ERRCODE_PROGRAM_LIMIT_EXCEEDED),"
    },
    {
        "line": 35,
        "fullcodeline": "if (state == LTPRS_WAITNAME)"
    },
    {
        "line": 78,
        "fullcodeline": "if (lptr->wlen > 255)"
    },
    {
        "line": 20,
        "fullcodeline": "num++;"
    },
    {
        "line": 79,
        "fullcodeline": "ereport(ERROR,"
    },
    {
        "line": 89,
        "fullcodeline": "else if (!(state == LTPRS_WAITNAME && lptr == list))"
    },
    {
        "line": 27,
        "fullcodeline": "errmsg(\"number of levels (%d) exceeds the maximum allowed (%d)\","
    },
    {
        "line": 37,
        "fullcodeline": "if (ISALNUM(ptr))"
    },
    {
        "line": 80,
        "fullcodeline": "(errcode(ERRCODE_NAME_TOO_LONG),"
    },
    {
        "line": 90,
        "fullcodeline": "ereport(ERROR,"
    },
    {
        "line": 28,
        "fullcodeline": "num + 1, (int) (MaxAllocSize / sizeof(nodeitem)))));"
    },
    {
        "line": 39,
        "fullcodeline": "lptr->start = ptr;"
    },
    {
        "line": 40,
        "fullcodeline": "lptr->wlen = 0;"
    },
    {
        "line": 41,
        "fullcodeline": "state = LTPRS_WAITDELIM;"
    },
    {
        "line": 46,
        "fullcodeline": "else if (state == LTPRS_WAITDELIM)"
    },
    {
        "line": 91,
        "fullcodeline": "(errcode(ERRCODE_SYNTAX_ERROR),"
    },
    {
        "line": 81,
        "fullcodeline": "errmsg(\"name of level is too long\"),"
    },
    {
        "line": 82,
        "fullcodeline": "errdetail(\"Name length is %d, must \""
    },
    {
        "line": 48,
        "fullcodeline": "if (charlen == 1 && t_iseq(ptr, '.'))"
    },
    {
        "line": 68,
        "fullcodeline": "elog(ERROR, \"internal error in parser\");"
    },
    {
        "line": 92,
        "fullcodeline": "errmsg(\"syntax error\"),"
    },
    {
        "line": 93,
        "fullcodeline": "errdetail(\"Unexpected end of line.\")));"
    },
    {
        "line": 50,
        "fullcodeline": "lptr->len = ptr - lptr->start;"
    },
    {
        "line": 59,
        "fullcodeline": "totallen += MAXALIGN(lptr->len + LEVEL_HDRSIZE);"
    },
    {
        "line": 60,
        "fullcodeline": "lptr++;"
    },
    {
        "line": 61,
        "fullcodeline": "state = LTPRS_WAITNAME;"
    },
    {
        "line": 51,
        "fullcodeline": "if (lptr->wlen > 255)"
    },
    {
        "line": 52,
        "fullcodeline": "ereport(ERROR,"
    },
    {
        "line": 63,
        "fullcodeline": "else if (!ISALNUM(ptr))"
    },
    {
        "line": 53,
        "fullcodeline": "(errcode(ERRCODE_NAME_TOO_LONG),"
    },
    {
        "line": 54,
        "fullcodeline": "errmsg(\"name of level is too long\"),"
    },
    {
        "line": 55,
        "fullcodeline": "errdetail(\"Name length is %d, must \""
    }
]