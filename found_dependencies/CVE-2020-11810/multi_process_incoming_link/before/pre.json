[
    {
        "line": 3,
        "fullcodeline": "struct gc_arena gc = gc_new();"
    },
    {
        "line": 9,
        "fullcodeline": "bool ret = true;"
    },
    {
        "line": 10,
        "fullcodeline": "bool floated = false;"
    },
    {
        "line": 17,
        "fullcodeline": "if (!instance)"
    },
    {
        "line": 22,
        "fullcodeline": "multi_set_pending(m, multi_get_create_instance_udp(m, &floated));"
    },
    {
        "line": 31,
        "fullcodeline": "set_prefix(m->pending);"
    },
    {
        "line": 34,
        "fullcodeline": "c = &m->pending->context;"
    },
    {
        "line": 245,
        "fullcodeline": "ret = multi_process_post(m, m->pending, mpp_flags);"
    },
    {
        "line": 26,
        "fullcodeline": "multi_set_pending(m, instance);"
    },
    {
        "line": 39,
        "fullcodeline": "c->c2.buf = m->top.c2.buf;"
    },
    {
        "line": 48,
        "fullcodeline": "if (BLEN(&c->c2.buf) > 0)"
    },
    {
        "line": 55,
        "fullcodeline": "perf_push(PERF_PROC_IN_LINK);"
    },
    {
        "line": 56,
        "fullcodeline": "lsi = get_link_socket_info(c);"
    },
    {
        "line": 57,
        "fullcodeline": "orig_buf = c->c2.buf.data;"
    },
    {
        "line": 42,
        "fullcodeline": "if (!floated)"
    },
    {
        "line": 58,
        "fullcodeline": "if (process_incoming_link_part1(c, lsi, floated))"
    },
    {
        "line": 69,
        "fullcodeline": "if (TUNNEL_TYPE(m->top.c1.tuntap) == DEV_TYPE_TUN)"
    },
    {
        "line": 65,
        "fullcodeline": "process_incoming_link_part2(c, lsi, orig_buf);"
    },
    {
        "line": 72,
        "fullcodeline": "mroute_flags = mroute_extract_addr_from_packet(&src,"
    },
    {
        "line": 62,
        "fullcodeline": "multi_process_float(m, m->pending);"
    },
    {
        "line": 81,
        "fullcodeline": "if (!(mroute_flags & MROUTE_EXTRACT_SUCCEEDED))"
    },
    {
        "line": 147,
        "fullcodeline": "else if (TUNNEL_TYPE(m->top.c1.tuntap) == DEV_TYPE_TAP)"
    },
    {
        "line": 149,
        "fullcodeline": "uint16_t vid = 0;"
    },
    {
        "line": 169,
        "fullcodeline": "mroute_flags = mroute_extract_addr_from_packet(&src,"
    },
    {
        "line": 86,
        "fullcodeline": "else if (multi_get_instance_by_virtual_addr(m, &src, true) != m->pending)"
    },
    {
        "line": 181,
        "fullcodeline": "if (mroute_flags & MROUTE_EXTRACT_SUCCEEDED)"
    },
    {
        "line": 157,
        "fullcodeline": "if (vlan_is_tagged(&c->c2.to_tun))"
    },
    {
        "line": 183,
        "fullcodeline": "if (multi_learn_addr(m, m->pending, &src, 0) == m->pending)"
    },
    {
        "line": 89,
        "fullcodeline": "if ( (src.type & MR_ADDR_MASK) == MR_ADDR_IPV6"
    },
    {
        "line": 90,
        "fullcodeline": "&& IN6_IS_ADDR_LINKLOCAL(&src.v6.addr) )"
    },
    {
        "line": 160,
        "fullcodeline": "msg(D_VLAN_DEBUG, \"dropping incoming VLAN-tagged frame\");"
    },
    {
        "line": 161,
        "fullcodeline": "c->c2.to_tun.len = 0;"
    },
    {
        "line": 165,
        "fullcodeline": "vid = c->options.vlan_pvid;"
    },
    {
        "line": 97,
        "fullcodeline": "mroute_addr_print(&src, &gc));"
    },
    {
        "line": 105,
        "fullcodeline": "if (mroute_flags & MROUTE_EXTRACT_MCAST)"
    },
    {
        "line": 233,
        "fullcodeline": "mroute_addr_print(&src, &gc));"
    },
    {
        "line": 108,
        "fullcodeline": "multi_bcast(m, &c->c2.to_tun, m->pending, NULL, 0);"
    },
    {
        "line": 113,
        "fullcodeline": "mi = multi_get_instance_by_virtual_addr(m, &dest, true);"
    },
    {
        "line": 188,
        "fullcodeline": "if (mroute_flags & (MROUTE_EXTRACT_BCAST|MROUTE_EXTRACT_MCAST))"
    },
    {
        "line": 190,
        "fullcodeline": "multi_bcast(m, &c->c2.to_tun, m->pending, NULL,"
    },
    {
        "line": 112,
        "fullcodeline": "ASSERT(!(mroute_flags & MROUTE_EXTRACT_BCAST));"
    },
    {
        "line": 195,
        "fullcodeline": "mi = multi_get_instance_by_virtual_addr(m, &dest, false);"
    },
    {
        "line": 130,
        "fullcodeline": "multi_unicast(m, &c->c2.to_tun, mi);"
    },
    {
        "line": 131,
        "fullcodeline": "register_activity(c, BLEN(&c->c2.to_tun));"
    },
    {
        "line": 212,
        "fullcodeline": "multi_unicast(m, &c->c2.to_tun, mi);"
    },
    {
        "line": 213,
        "fullcodeline": "register_activity(c, BLEN(&c->c2.to_tun));"
    }
]