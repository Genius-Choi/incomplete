[
    {
        "line": 3,
        "fullcodeline": "struct gc_arena gc = gc_new();"
    },
    {
        "line": 9,
        "fullcodeline": "bool ret = true;"
    },
    {
        "line": 10,
        "fullcodeline": "bool floated = false;"
    },
    {
        "line": 251,
        "fullcodeline": "gc_free(&gc);"
    },
    {
        "line": 17,
        "fullcodeline": "if (!instance)"
    },
    {
        "line": 22,
        "fullcodeline": "multi_set_pending(m, multi_get_create_instance_udp(m, &floated));"
    },
    {
        "line": 31,
        "fullcodeline": "set_prefix(m->pending);"
    },
    {
        "line": 246,
        "fullcodeline": "ret = multi_process_post(m, m->pending, mpp_flags);"
    },
    {
        "line": 248,
        "fullcodeline": "clear_prefix();"
    },
    {
        "line": 26,
        "fullcodeline": "multi_set_pending(m, instance);"
    },
    {
        "line": 36,
        "fullcodeline": "if (!instance)"
    },
    {
        "line": 48,
        "fullcodeline": "if (BLEN(&c->c2.buf) > 0)"
    },
    {
        "line": 55,
        "fullcodeline": "perf_push(PERF_PROC_IN_LINK);"
    },
    {
        "line": 56,
        "fullcodeline": "lsi = get_link_socket_info(c);"
    },
    {
        "line": 68,
        "fullcodeline": "perf_pop();"
    },
    {
        "line": 42,
        "fullcodeline": "if (!floated)"
    },
    {
        "line": 58,
        "fullcodeline": "if (process_incoming_link_part1(c, lsi, floated))"
    },
    {
        "line": 70,
        "fullcodeline": "if (TUNNEL_TYPE(m->top.c1.tuntap) == DEV_TYPE_TUN)"
    },
    {
        "line": 66,
        "fullcodeline": "process_incoming_link_part2(c, lsi, orig_buf);"
    },
    {
        "line": 73,
        "fullcodeline": "mroute_flags = mroute_extract_addr_from_packet(&src,"
    },
    {
        "line": 61,
        "fullcodeline": "if (floated && c->c2.buf.len > 0)"
    },
    {
        "line": 82,
        "fullcodeline": "if (!(mroute_flags & MROUTE_EXTRACT_SUCCEEDED))"
    },
    {
        "line": 63,
        "fullcodeline": "multi_process_float(m, m->pending);"
    },
    {
        "line": 84,
        "fullcodeline": "c->c2.to_tun.len = 0;"
    },
    {
        "line": 148,
        "fullcodeline": "else if (TUNNEL_TYPE(m->top.c1.tuntap) == DEV_TYPE_TAP)"
    },
    {
        "line": 150,
        "fullcodeline": "uint16_t vid = 0;"
    },
    {
        "line": 170,
        "fullcodeline": "mroute_flags = mroute_extract_addr_from_packet(&src,"
    },
    {
        "line": 87,
        "fullcodeline": "else if (multi_get_instance_by_virtual_addr(m, &src, true) != m->pending)"
    },
    {
        "line": 182,
        "fullcodeline": "if (mroute_flags & MROUTE_EXTRACT_SUCCEEDED)"
    },
    {
        "line": 100,
        "fullcodeline": "c->c2.to_tun.len = 0;"
    },
    {
        "line": 90,
        "fullcodeline": "if ( (src.type & MR_ADDR_MASK) == MR_ADDR_IPV6"
    },
    {
        "line": 184,
        "fullcodeline": "if (multi_learn_addr(m, m->pending, &src, 0) == m->pending)"
    },
    {
        "line": 240,
        "fullcodeline": "c->c2.to_tun.len = 0;"
    },
    {
        "line": 161,
        "fullcodeline": "msg(D_VLAN_DEBUG, \"dropping incoming VLAN-tagged frame\");"
    },
    {
        "line": 162,
        "fullcodeline": "c->c2.to_tun.len = 0;"
    },
    {
        "line": 97,
        "fullcodeline": "msg(D_MULTI_DROPPED, \"MULTI: bad source address from client [%s], packet dropped\","
    },
    {
        "line": 233,
        "fullcodeline": "msg(D_MULTI_DROPPED, \"MULTI: bad source address from client [%s], packet dropped\","
    },
    {
        "line": 235,
        "fullcodeline": "c->c2.to_tun.len = 0;"
    },
    {
        "line": 98,
        "fullcodeline": "mroute_addr_print(&src, &gc));"
    },
    {
        "line": 106,
        "fullcodeline": "if (mroute_flags & MROUTE_EXTRACT_MCAST)"
    },
    {
        "line": 234,
        "fullcodeline": "mroute_addr_print(&src, &gc));"
    },
    {
        "line": 109,
        "fullcodeline": "multi_bcast(m, &c->c2.to_tun, m->pending, NULL, 0);"
    },
    {
        "line": 189,
        "fullcodeline": "if (mroute_flags & (MROUTE_EXTRACT_BCAST|MROUTE_EXTRACT_MCAST))"
    },
    {
        "line": 113,
        "fullcodeline": "ASSERT(!(mroute_flags & MROUTE_EXTRACT_BCAST));"
    },
    {
        "line": 114,
        "fullcodeline": "mi = multi_get_instance_by_virtual_addr(m, &dest, true);"
    },
    {
        "line": 191,
        "fullcodeline": "multi_bcast(m, &c->c2.to_tun, m->pending, NULL,"
    },
    {
        "line": 196,
        "fullcodeline": "mi = multi_get_instance_by_virtual_addr(m, &dest, false);"
    },
    {
        "line": 134,
        "fullcodeline": "c->c2.to_tun.len = 0;"
    },
    {
        "line": 131,
        "fullcodeline": "multi_unicast(m, &c->c2.to_tun, mi);"
    },
    {
        "line": 132,
        "fullcodeline": "register_activity(c, BLEN(&c->c2.to_tun));"
    },
    {
        "line": 216,
        "fullcodeline": "c->c2.to_tun.len = 0;"
    },
    {
        "line": 213,
        "fullcodeline": "multi_unicast(m, &c->c2.to_tun, mi);"
    },
    {
        "line": 214,
        "fullcodeline": "register_activity(c, BLEN(&c->c2.to_tun));"
    }
]