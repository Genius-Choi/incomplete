[
    {
        "line": 7,
        "fullcodeline": "struct udf_sb_info *sbi = UDF_SB(sb);"
    },
    {
        "line": 12,
        "fullcodeline": "int ret = 0;"
    },
    {
        "line": 14,
        "fullcodeline": "bh = udf_read_tagged(sb, block, block, &ident);"
    },
    {
        "line": 18,
        "fullcodeline": "lvd = (struct logicalVolDesc *)bh->b_data;"
    },
    {
        "line": 19,
        "fullcodeline": "table_len = le32_to_cpu(lvd->mapTableLength);"
    },
    {
        "line": 27,
        "fullcodeline": "ret = udf_sb_alloc_partition_maps(sb, le32_to_cpu(lvd->numPartitionMaps));"
    },
    {
        "line": 15,
        "fullcodeline": "if (!bh)"
    },
    {
        "line": 17,
        "fullcodeline": "BUG_ON(ident != TAG_IDENT_LVD);"
    },
    {
        "line": 20,
        "fullcodeline": "if (sizeof(*lvd) + table_len > sb->s_blocksize) {"
    },
    {
        "line": 32,
        "fullcodeline": "i < sbi->s_partitions && offset < table_len;"
    },
    {
        "line": 33,
        "fullcodeline": "i++, offset += gpm->partitionMapLength) {"
    },
    {
        "line": 34,
        "fullcodeline": "struct udf_part_map *map = &sbi->s_partmaps[i];"
    },
    {
        "line": 35,
        "fullcodeline": "gpm = (struct genericPartitionMap *)"
    },
    {
        "line": 37,
        "fullcodeline": "type = gpm->partitionMapType;"
    },
    {
        "line": 120,
        "fullcodeline": "udf_debug(\"Partition (%d:%d) type %d on volume %d\\n\","
    },
    {
        "line": 125,
        "fullcodeline": "struct long_ad *la = (struct long_ad *)&(lvd->logicalVolContentsUse[0]);"
    },
    {
        "line": 23,
        "fullcodeline": "sb->s_blocksize - sizeof(*lvd));"
    },
    {
        "line": 31,
        "fullcodeline": "for (i = 0, offset = 0;"
    },
    {
        "line": 38,
        "fullcodeline": "if (type == 1) {"
    },
    {
        "line": 127,
        "fullcodeline": "*fileset = lelb_to_cpu(la->extLocation);"
    },
    {
        "line": 133,
        "fullcodeline": "udf_load_logicalvolint(sb, leea_to_cpu(lvd->integritySeqExt));"
    },
    {
        "line": 39,
        "fullcodeline": "struct genericPartitionMap1 *gpm1 ="
    },
    {
        "line": 41,
        "fullcodeline": "map->s_partition_type = UDF_TYPE1_MAP15;"
    },
    {
        "line": 42,
        "fullcodeline": "map->s_volumeseqnum = le16_to_cpu(gpm1->volSeqNum);"
    },
    {
        "line": 43,
        "fullcodeline": "map->s_partition_num = le16_to_cpu(gpm1->partitionNum);"
    },
    {
        "line": 44,
        "fullcodeline": "map->s_partition_func = NULL;"
    },
    {
        "line": 45,
        "fullcodeline": "} else if (type == 2) {"
    },
    {
        "line": 46,
        "fullcodeline": "struct udfPartitionMap2 *upm2 ="
    },
    {
        "line": 117,
        "fullcodeline": "map->s_volumeseqnum = le16_to_cpu(upm2->volSeqNum);"
    },
    {
        "line": 118,
        "fullcodeline": "map->s_partition_num = le16_to_cpu(upm2->partitionNum);"
    },
    {
        "line": 48,
        "fullcodeline": "if (!strncmp(upm2->partIdent.ident, UDF_ID_VIRTUAL,"
    },
    {
        "line": 50,
        "fullcodeline": "u16 suf ="
    },
    {
        "line": 49,
        "fullcodeline": "strlen(UDF_ID_VIRTUAL))) {"
    },
    {
        "line": 51,
        "fullcodeline": "le16_to_cpu(((__le16 *)upm2->partIdent."
    },
    {
        "line": 54,
        "fullcodeline": "map->s_partition_type ="
    },
    {
        "line": 56,
        "fullcodeline": "map->s_partition_func ="
    },
    {
        "line": 59,
        "fullcodeline": "map->s_partition_type ="
    },
    {
        "line": 61,
        "fullcodeline": "map->s_partition_func ="
    },
    {
        "line": 64,
        "fullcodeline": "} else if (!strncmp(upm2->partIdent.ident,"
    },
    {
        "line": 66,
        "fullcodeline": "strlen(UDF_ID_SPARABLE))) {"
    },
    {
        "line": 67,
        "fullcodeline": "if (udf_load_sparable_map(sb, map,"
    },
    {
        "line": 70,
        "fullcodeline": "} else if (!strncmp(upm2->partIdent.ident,"
    },
    {
        "line": 73,
        "fullcodeline": "struct udf_meta_data *mdata ="
    },
    {
        "line": 75,
        "fullcodeline": "struct metadataPartitionMap *mdm ="
    },
    {
        "line": 78,
        "fullcodeline": "udf_debug(\"Parsing Logical vol part %d type %d  id=%s\\n\","
    },
    {
        "line": 81,
        "fullcodeline": "map->s_partition_type = UDF_METADATA_MAP25;"
    },
    {
        "line": 82,
        "fullcodeline": "map->s_partition_func = udf_get_pblock_meta25;"
    },
    {
        "line": 110,
        "fullcodeline": "udf_debug(\"Flags: %d %d\\n\","
    },
    {
        "line": 72,
        "fullcodeline": "strlen(UDF_ID_METADATA))) {"
    },
    {
        "line": 85,
        "fullcodeline": "le32_to_cpu(mdm->metadataFileLoc);"
    },
    {
        "line": 87,
        "fullcodeline": "le32_to_cpu(mdm->metadataMirrorFileLoc);"
    },
    {
        "line": 89,
        "fullcodeline": "le32_to_cpu(mdm->metadataBitmapFileLoc);"
    },
    {
        "line": 91,
        "fullcodeline": "le32_to_cpu(mdm->allocUnitSize);"
    },
    {
        "line": 93,
        "fullcodeline": "le16_to_cpu(mdm->alignUnitSize);"
    },
    {
        "line": 94,
        "fullcodeline": "if (mdm->flags & 0x01)"
    },
    {
        "line": 98,
        "fullcodeline": "le16_to_cpu(*(__le16 *)"
    },
    {
        "line": 101,
        "fullcodeline": "le16_to_cpu(mdm->partitionNum));"
    },
    {
        "line": 103,
        "fullcodeline": "le32_to_cpu(mdm->allocUnitSize));"
    },
    {
        "line": 105,
        "fullcodeline": "le32_to_cpu(mdm->metadataFileLoc));"
    },
    {
        "line": 107,
        "fullcodeline": "le32_to_cpu(mdm->metadataMirrorFileLoc));"
    },
    {
        "line": 109,
        "fullcodeline": "le32_to_cpu(mdm->metadataBitmapFileLoc));"
    },
    {
        "line": 95,
        "fullcodeline": "mdata->s_flags |= MF_DUPLICATE_MD;"
    }
]