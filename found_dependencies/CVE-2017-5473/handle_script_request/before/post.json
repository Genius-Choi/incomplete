[
    {
        "line": 4,
        "fullcodeline": "char buf[64], key[64], ifname[MAX_INTERFACE_NAME_LEN];"
    },
    {
        "line": 5,
        "fullcodeline": "char *_cookies, user[64] = { '\\0' }, outbuf[FILENAME_MAX];"
    },
    {
        "line": 12,
        "fullcodeline": "lua_register_classes(L, true); /* Load custom classes */"
    },
    {
        "line": 14,
        "fullcodeline": "lua_pushlightuserdata(L, (char*)conn);"
    },
    {
        "line": 15,
        "fullcodeline": "lua_setglobal(L, CONST_HTTP_CONN);"
    },
    {
        "line": 18,
        "fullcodeline": "lua_newtable(L);"
    },
    {
        "line": 105,
        "fullcodeline": "lua_setglobal(L, \"_GET\"); /* Like in php */"
    },
    {
        "line": 108,
        "fullcodeline": "lua_newtable(L);"
    },
    {
        "line": 109,
        "fullcodeline": "lua_push_str_table_entry(L, \"HTTP_REFERER\", (char*)mg_get_header(conn, \"Referer\"));"
    },
    {
        "line": 110,
        "fullcodeline": "lua_push_str_table_entry(L, \"HTTP_USER_AGENT\", (char*)mg_get_header(conn, \"User-Agent\"));"
    },
    {
        "line": 111,
        "fullcodeline": "lua_push_str_table_entry(L, \"SERVER_NAME\", (char*)mg_get_header(conn, \"Host\"));"
    },
    {
        "line": 112,
        "fullcodeline": "lua_setglobal(L, \"_SERVER\"); /* Like in php */"
    },
    {
        "line": 115,
        "fullcodeline": "lua_newtable(L);"
    },
    {
        "line": 138,
        "fullcodeline": "lua_setglobal(L, \"_COOKIE\"); /* Like in php */"
    },
    {
        "line": 141,
        "fullcodeline": "lua_newtable(L);"
    },
    {
        "line": 143,
        "fullcodeline": "mg_get_cookie(conn, \"user\", user, sizeof(user));"
    },
    {
        "line": 144,
        "fullcodeline": "lua_push_str_table_entry(L, \"user\", user);"
    },
    {
        "line": 145,
        "fullcodeline": "mg_get_cookie(conn, \"session\", buf, sizeof(buf));"
    },
    {
        "line": 146,
        "fullcodeline": "lua_push_str_table_entry(L, \"session\", buf);"
    },
    {
        "line": 149,
        "fullcodeline": "setInterface(user);"
    },
    {
        "line": 151,
        "fullcodeline": "lua_setglobal(L, \"_SESSION\"); /* Like in php */"
    },
    {
        "line": 177,
        "fullcodeline": "rc = luaL_dofile(L, script_path);"
    },
    {
        "line": 9,
        "fullcodeline": "if(!L) return(-1);"
    },
    {
        "line": 19,
        "fullcodeline": "if(request_info->query_string != NULL) {"
    },
    {
        "line": 116,
        "fullcodeline": "if((_cookies = (char*)mg_get_header(conn, \"Cookie\")) != NULL) {"
    },
    {
        "line": 153,
        "fullcodeline": "if(user[0] != '\\0') {"
    },
    {
        "line": 185,
        "fullcodeline": "if(rc != 0) {"
    },
    {
        "line": 20,
        "fullcodeline": "char *query_string = strdup(request_info->query_string);"
    },
    {
        "line": 117,
        "fullcodeline": "char *cookies = strdup(_cookies);"
    },
    {
        "line": 121,
        "fullcodeline": "tok = strtok_r(cookies, \"=\", &where);"
    },
    {
        "line": 136,
        "fullcodeline": "free(cookies);"
    },
    {
        "line": 154,
        "fullcodeline": "char val[255];"
    },
    {
        "line": 156,
        "fullcodeline": "lua_pushlightuserdata(L, user);"
    },
    {
        "line": 157,
        "fullcodeline": "lua_setglobal(L, \"user\");"
    },
    {
        "line": 159,
        "fullcodeline": "snprintf(key, sizeof(key), \"ntopng.user.%s.allowed_nets\", user);"
    },
    {
        "line": 168,
        "fullcodeline": "snprintf(key, sizeof(key), CONST_STR_USER_ALLOWED_IFNAME, user);"
    },
    {
        "line": 186,
        "fullcodeline": "const char *err = lua_tostring(L, -1);"
    },
    {
        "line": 188,
        "fullcodeline": "ntop->getTrace()->traceEvent(TRACE_WARNING, \"Script failure [%s][%s]\", script_path, err);"
    },
    {
        "line": 122,
        "fullcodeline": "while(tok != NULL) {"
    },
    {
        "line": 160,
        "fullcodeline": "if((ntop->getRedis()->get(key, val, sizeof(val)) != -1)"
    },
    {
        "line": 169,
        "fullcodeline": "if(snprintf(key, sizeof(key), CONST_STR_USER_ALLOWED_IFNAME, user)"
    },
    {
        "line": 189,
        "fullcodeline": "return(send_error(conn, 500 /* Internal server error */,"
    },
    {
        "line": 28,
        "fullcodeline": "tok = strtok_r(query_string, \"&\", &where);"
    },
    {
        "line": 101,
        "fullcodeline": "free(query_string);"
    },
    {
        "line": 133,
        "fullcodeline": "tok = strtok_r(NULL, \"=\", &where);"
    },
    {
        "line": 161,
        "fullcodeline": "&& (val[0] != '\\0')) {"
    },
    {
        "line": 162,
        "fullcodeline": "ptree.addAddresses(val);"
    },
    {
        "line": 163,
        "fullcodeline": "lua_pushlightuserdata(L, &ptree);"
    },
    {
        "line": 164,
        "fullcodeline": "lua_setglobal(L, CONST_ALLOWED_NETS);"
    },
    {
        "line": 170,
        "fullcodeline": "&& !ntop->getRedis()->get(key, ifname, sizeof(ifname))) {"
    },
    {
        "line": 171,
        "fullcodeline": "lua_pushlightuserdata(L, ifname);"
    },
    {
        "line": 172,
        "fullcodeline": "lua_setglobal(L, CONST_ALLOWED_IFNAME);"
    },
    {
        "line": 30,
        "fullcodeline": "while(tok != NULL) {"
    },
    {
        "line": 103,
        "fullcodeline": "ntop->getTrace()->traceEvent(TRACE_WARNING, \"Not enough memory\");"
    },
    {
        "line": 125,
        "fullcodeline": "while(tok[0] == ' ') tok++;"
    },
    {
        "line": 127,
        "fullcodeline": "if((val = strtok_r(NULL, \";\", &where)) != NULL) {"
    },
    {
        "line": 32,
        "fullcodeline": "char *_equal = strchr(tok, '=');"
    },
    {
        "line": 98,
        "fullcodeline": "tok = strtok_r(NULL, \"&\", &where);"
    },
    {
        "line": 128,
        "fullcodeline": "lua_push_str_table_entry(L, tok, val);"
    },
    {
        "line": 38,
        "fullcodeline": "_equal[0] = '\\0';"
    },
    {
        "line": 39,
        "fullcodeline": "_equal = &_equal[1];"
    },
    {
        "line": 40,
        "fullcodeline": "len = strlen(_equal);"
    },
    {
        "line": 42,
        "fullcodeline": "purifyHTTPParameter(tok), purifyHTTPParameter(_equal);"
    },
    {
        "line": 46,
        "fullcodeline": "if((equal = (char*)malloc(len+1)) != NULL) {"
    },
    {
        "line": 49,
        "fullcodeline": "Utils::urlDecode(_equal, equal, len+1);"
    },
    {
        "line": 93,
        "fullcodeline": "free(equal);"
    },
    {
        "line": 51,
        "fullcodeline": "if((decoded_buf = http_decode(equal)) != NULL) {"
    },
    {
        "line": 95,
        "fullcodeline": "ntop->getTrace()->traceEvent(TRACE_WARNING, \"Not enough memory\");"
    },
    {
        "line": 54,
        "fullcodeline": "Utils::purifyHTTPparam(tok, true, false);"
    },
    {
        "line": 55,
        "fullcodeline": "Utils::purifyHTTPparam(decoded_buf, false, false);"
    },
    {
        "line": 89,
        "fullcodeline": "lua_push_str_table_entry(L, tok, decoded_buf);"
    },
    {
        "line": 90,
        "fullcodeline": "free(decoded_buf);"
    },
    {
        "line": 58,
        "fullcodeline": "if((decoded_buf[0] == '.')"
    },
    {
        "line": 70,
        "fullcodeline": "if(strcmp(tok, \"csrf\") == 0) {"
    },
    {
        "line": 59,
        "fullcodeline": "&& ((fd = fopen(decoded_buf, \"r\"))"
    },
    {
        "line": 61,
        "fullcodeline": "ntop->getTrace()->traceEvent(TRACE_WARNING, \"Discarded '%s'='%s' as argument is a valid file path\","
    },
    {
        "line": 64,
        "fullcodeline": "decoded_buf[0] = '\\0';"
    },
    {
        "line": 65,
        "fullcodeline": "fclose(fd);"
    },
    {
        "line": 71,
        "fullcodeline": "char rsp[32], user[64] = { '\\0' };"
    },
    {
        "line": 73,
        "fullcodeline": "mg_get_cookie(conn, \"user\", user, sizeof(user));"
    },
    {
        "line": 60,
        "fullcodeline": "|| (fd = fopen(realpath(decoded_buf, outbuf), \"r\")))) {"
    },
    {
        "line": 75,
        "fullcodeline": "if((ntop->getRedis()->get(decoded_buf, rsp, sizeof(rsp)) == -1)"
    },
    {
        "line": 76,
        "fullcodeline": "|| (strcmp(rsp, user) != 0)) {"
    },
    {
        "line": 77,
        "fullcodeline": "const char *msg = \"The submitted form is expired. Please reload the page and try again\";"
    },
    {
        "line": 79,
        "fullcodeline": "ntop->getTrace()->traceEvent(TRACE_WARNING,"
    },
    {
        "line": 82,
        "fullcodeline": "free(equal);"
    },
    {
        "line": 83,
        "fullcodeline": "return(send_error(conn, 500 /* Internal server error */,"
    },
    {
        "line": 86,
        "fullcodeline": "ntop->getRedis()->delKey(decoded_buf);"
    }
]