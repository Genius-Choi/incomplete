[
    {
        "line": 3,
        "fullcodeline": "int rc = SEPOL_OK;"
    },
    {
        "line": 4,
        "fullcodeline": "struct cil_args_resolve *args = extra_args;"
    },
    {
        "line": 5,
        "fullcodeline": "enum cil_pass pass = args->pass;"
    },
    {
        "line": 6,
        "fullcodeline": "struct cil_tree_node *block = args->block;"
    },
    {
        "line": 7,
        "fullcodeline": "struct cil_tree_node *macro = args->macro;"
    },
    {
        "line": 8,
        "fullcodeline": "struct cil_tree_node *optional = args->optional;"
    },
    {
        "line": 9,
        "fullcodeline": "struct cil_tree_node *boolif = args->boolif;"
    },
    {
        "line": 83,
        "fullcodeline": "rc = __cil_resolve_ast_node(node, extra_args);"
    },
    {
        "line": 11,
        "fullcodeline": "if (node == NULL) {"
    },
    {
        "line": 15,
        "fullcodeline": "if (block != NULL) {"
    },
    {
        "line": 24,
        "fullcodeline": "if (macro != NULL) {"
    },
    {
        "line": 35,
        "fullcodeline": "if (optional != NULL) {"
    },
    {
        "line": 45,
        "fullcodeline": "if (boolif != NULL) {"
    },
    {
        "line": 69,
        "fullcodeline": "if (node->flavor == CIL_MACRO) {"
    },
    {
        "line": 77,
        "fullcodeline": "if (node->flavor == CIL_BLOCK && ((((struct cil_block*)node->data)->is_abstract == CIL_TRUE) && (pass > CIL_PASS_BLKABS))) {"
    },
    {
        "line": 84,
        "fullcodeline": "if (rc == SEPOL_ENOENT) {"
    },
    {
        "line": 78,
        "fullcodeline": "*finished = CIL_TREE_SKIP_HEAD;"
    },
    {
        "line": 79,
        "fullcodeline": "rc = SEPOL_OK;"
    },
    {
        "line": 85,
        "fullcodeline": "enum cil_log_level lvl = CIL_ERR;"
    },
    {
        "line": 100,
        "fullcodeline": "cil_tree_log(node, lvl, \"Failed to resolve %s statement\", cil_node_to_string(node));"
    },
    {
        "line": 16,
        "fullcodeline": "if (node->flavor == CIL_CAT ||"
    },
    {
        "line": 25,
        "fullcodeline": "if (node->flavor == CIL_BLOCK ||"
    },
    {
        "line": 36,
        "fullcodeline": "if (node->flavor == CIL_TUNABLE ||"
    },
    {
        "line": 46,
        "fullcodeline": "if (node->flavor != CIL_TUNABLEIF &&"
    },
    {
        "line": 59,
        "fullcodeline": "if (rc == SEPOL_ERR) {"
    },
    {
        "line": 70,
        "fullcodeline": "if (pass != CIL_PASS_TIF && pass != CIL_PASS_MACRO) {"
    },
    {
        "line": 87,
        "fullcodeline": "if (optional != NULL) {"
    },
    {
        "line": 17,
        "fullcodeline": "node->flavor == CIL_SENS) {"
    },
    {
        "line": 18,
        "fullcodeline": "cil_tree_log(node, CIL_ERR, \"%s statement is not allowed in blocks\", cil_node_to_string(node));"
    },
    {
        "line": 19,
        "fullcodeline": "rc = SEPOL_ERR;"
    },
    {
        "line": 28,
        "fullcodeline": "node->flavor == CIL_MACRO) {"
    },
    {
        "line": 29,
        "fullcodeline": "cil_tree_log(node, CIL_ERR, \"%s statement is not allowed in macros\", cil_node_to_string(node));"
    },
    {
        "line": 30,
        "fullcodeline": "rc = SEPOL_ERR;"
    },
    {
        "line": 37,
        "fullcodeline": "node->flavor == CIL_MACRO) {"
    },
    {
        "line": 39,
        "fullcodeline": "cil_tree_log(node, CIL_ERR, \"%s statement is not allowed in optionals\", cil_node_to_string(node));"
    },
    {
        "line": 40,
        "fullcodeline": "rc = SEPOL_ERR;"
    },
    {
        "line": 51,
        "fullcodeline": "node->flavor != CIL_NAMETYPETRANSITION) {"
    },
    {
        "line": 52,
        "fullcodeline": "rc = SEPOL_ERR;"
    },
    {
        "line": 71,
        "fullcodeline": "*finished = CIL_TREE_SKIP_HEAD;"
    },
    {
        "line": 72,
        "fullcodeline": "rc = SEPOL_OK;"
    },
    {
        "line": 88,
        "fullcodeline": "lvl = CIL_INFO;"
    },
    {
        "line": 90,
        "fullcodeline": "struct cil_optional *opt = (struct cil_optional *)optional->data;"
    },
    {
        "line": 91,
        "fullcodeline": "struct cil_tree_node *opt_node = NODE(opt);;"
    },
    {
        "line": 93,
        "fullcodeline": "opt->enabled = CIL_FALSE;"
    },
    {
        "line": 94,
        "fullcodeline": "cil_tree_log(node, lvl, \"Failed to resolve %s statement\", cil_node_to_string(node));"
    },
    {
        "line": 95,
        "fullcodeline": "cil_tree_log(opt_node, lvl, \"Disabling optional '%s'\", opt->datum.name);"
    },
    {
        "line": 96,
        "fullcodeline": "rc = SEPOL_OK;"
    },
    {
        "line": 27,
        "fullcodeline": "node->flavor == CIL_BLOCKABSTRACT ||"
    },
    {
        "line": 50,
        "fullcodeline": "node->flavor != CIL_TYPE_RULE &&"
    },
    {
        "line": 26,
        "fullcodeline": "node->flavor == CIL_BLOCKINHERIT ||"
    },
    {
        "line": 49,
        "fullcodeline": "node->flavor != CIL_AVRULE &&"
    },
    {
        "line": 53,
        "fullcodeline": "} else if (node->flavor == CIL_AVRULE) {"
    },
    {
        "line": 60,
        "fullcodeline": "if (((struct cil_booleanif*)boolif->data)->preserved_tunable) {"
    },
    {
        "line": 61,
        "fullcodeline": "cil_tree_log(node, CIL_ERR, \"%s statement is not allowed in booleanifs (tunableif treated as a booleanif)\", cil_node_to_string(node));"
    },
    {
        "line": 48,
        "fullcodeline": "node->flavor != CIL_CONDBLOCK &&"
    },
    {
        "line": 54,
        "fullcodeline": "struct cil_avrule *rule = node->data;"
    },
    {
        "line": 63,
        "fullcodeline": "cil_tree_log(node, CIL_ERR, \"%s statement is not allowed in booleanifs\", cil_node_to_string(node));"
    },
    {
        "line": 47,
        "fullcodeline": "node->flavor != CIL_CALL &&"
    },
    {
        "line": 55,
        "fullcodeline": "if (rule->rule_kind == CIL_AVRULE_NEVERALLOW) {"
    },
    {
        "line": 56,
        "fullcodeline": "rc = SEPOL_ERR;"
    }
]