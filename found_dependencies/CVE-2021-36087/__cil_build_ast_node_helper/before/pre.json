[
    {
        "line": 3,
        "fullcodeline": "struct cil_args_build *args = extra_args;"
    },
    {
        "line": 4,
        "fullcodeline": "struct cil_db *db = args->db;"
    },
    {
        "line": 5,
        "fullcodeline": "struct cil_tree_node *ast_current = args->ast;"
    },
    {
        "line": 6,
        "fullcodeline": "struct cil_tree_node *tunif = args->tunif;"
    },
    {
        "line": 7,
        "fullcodeline": "struct cil_tree_node *in = args->in;"
    },
    {
        "line": 8,
        "fullcodeline": "struct cil_tree_node *macro = args->macro;"
    },
    {
        "line": 9,
        "fullcodeline": "struct cil_tree_node *boolif = args->boolif;"
    },
    {
        "line": 10,
        "fullcodeline": "struct cil_tree_node *ast_node = NULL;"
    },
    {
        "line": 11,
        "fullcodeline": "int rc = SEPOL_ERR;"
    },
    {
        "line": 83,
        "fullcodeline": "cil_tree_node_init(&ast_node);"
    },
    {
        "line": 85,
        "fullcodeline": "ast_node->parent = ast_current;"
    },
    {
        "line": 86,
        "fullcodeline": "ast_node->line = parse_current->line;"
    },
    {
        "line": 87,
        "fullcodeline": "ast_node->hll_line = parse_current->hll_line;"
    },
    {
        "line": 13,
        "fullcodeline": "if (parse_current->parent->cl_head != parse_current) {"
    },
    {
        "line": 28,
        "fullcodeline": "if (tunif != NULL) {"
    },
    {
        "line": 37,
        "fullcodeline": "if (in != NULL) {"
    },
    {
        "line": 46,
        "fullcodeline": "if (macro != NULL) {"
    },
    {
        "line": 59,
        "fullcodeline": "if (boolif != NULL) {"
    },
    {
        "line": 89,
        "fullcodeline": "if (parse_current->data == CIL_KEY_BLOCK) {"
    },
    {
        "line": 366,
        "fullcodeline": "if (rc == SEPOL_OK) {"
    },
    {
        "line": 15,
        "fullcodeline": "rc = SEPOL_OK;"
    },
    {
        "line": 90,
        "fullcodeline": "rc = cil_gen_block(db, parse_current, ast_node, 0);"
    },
    {
        "line": 372,
        "fullcodeline": "ast_current->cl_tail = ast_node;"
    },
    {
        "line": 373,
        "fullcodeline": "ast_current = ast_node;"
    },
    {
        "line": 374,
        "fullcodeline": "args->ast = ast_current;"
    },
    {
        "line": 29,
        "fullcodeline": "if (parse_current->data == CIL_KEY_TUNABLE) {"
    },
    {
        "line": 38,
        "fullcodeline": "if (parse_current->data == CIL_KEY_IN) {"
    },
    {
        "line": 47,
        "fullcodeline": "if (parse_current->data == CIL_KEY_TUNABLE ||"
    },
    {
        "line": 60,
        "fullcodeline": "if (parse_current->data != CIL_KEY_TUNABLEIF &&"
    },
    {
        "line": 367,
        "fullcodeline": "if (ast_current->cl_head == NULL) {"
    },
    {
        "line": 376,
        "fullcodeline": "cil_tree_node_destroy(&ast_node);"
    },
    {
        "line": 17,
        "fullcodeline": "} else if (parse_current->data == NULL) {"
    },
    {
        "line": 30,
        "fullcodeline": "rc = SEPOL_ERR;"
    },
    {
        "line": 31,
        "fullcodeline": "cil_tree_log(parse_current, CIL_ERR, \"Found tunable\");"
    },
    {
        "line": 32,
        "fullcodeline": "cil_log(CIL_ERR, \"Tunables cannot be defined within tunableif statement\\n\");"
    },
    {
        "line": 39,
        "fullcodeline": "rc = SEPOL_ERR;"
    },
    {
        "line": 40,
        "fullcodeline": "cil_tree_log(parse_current, CIL_ERR, \"Found in-statement\");"
    },
    {
        "line": 41,
        "fullcodeline": "cil_log(CIL_ERR, \"in-statements cannot be defined within in-statements\\n\");"
    },
    {
        "line": 52,
        "fullcodeline": "parse_current->data == CIL_KEY_MACRO) {"
    },
    {
        "line": 53,
        "fullcodeline": "rc = SEPOL_ERR;"
    },
    {
        "line": 54,
        "fullcodeline": "cil_tree_log(parse_current, CIL_ERR, \"%s is not allowed in macros\", (char *)parse_current->data);"
    },
    {
        "line": 69,
        "fullcodeline": "parse_current->data != CIL_KEY_TYPEMEMBER) {"
    },
    {
        "line": 70,
        "fullcodeline": "rc = SEPOL_ERR;"
    },
    {
        "line": 71,
        "fullcodeline": "cil_tree_log(parse_current, CIL_ERR, \"Found %s\", (char*)parse_current->data);"
    },
    {
        "line": 91,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_BLOCKINHERIT) {"
    },
    {
        "line": 368,
        "fullcodeline": "ast_current->cl_head = ast_node;"
    },
    {
        "line": 51,
        "fullcodeline": "parse_current->data == CIL_KEY_BLOCKABSTRACT ||"
    },
    {
        "line": 68,
        "fullcodeline": "parse_current->data != CIL_KEY_TYPECHANGE &&"
    },
    {
        "line": 92,
        "fullcodeline": "rc = cil_gen_blockinherit(db, parse_current, ast_node);"
    },
    {
        "line": 370,
        "fullcodeline": "ast_current->cl_tail->next = ast_node;"
    },
    {
        "line": 20,
        "fullcodeline": "if (parse_current->parent->parent == NULL) {"
    },
    {
        "line": 50,
        "fullcodeline": "parse_current->data == CIL_KEY_BLOCKINHERIT ||"
    },
    {
        "line": 67,
        "fullcodeline": "parse_current->data != CIL_KEY_TYPETRANSITION &&"
    },
    {
        "line": 72,
        "fullcodeline": "if (((struct cil_booleanif*)boolif->data)->preserved_tunable) {"
    },
    {
        "line": 73,
        "fullcodeline": "cil_log(CIL_ERR, \"%s cannot be defined within tunableif statement (treated as a booleanif due to preserve-tunables)\\n\","
    },
    {
        "line": 21,
        "fullcodeline": "rc = SEPOL_OK;"
    },
    {
        "line": 49,
        "fullcodeline": "parse_current->data == CIL_KEY_BLOCK ||"
    },
    {
        "line": 66,
        "fullcodeline": "parse_current->data != CIL_KEY_AUDITALLOW &&"
    },
    {
        "line": 74,
        "fullcodeline": "(char*)parse_current->data);"
    },
    {
        "line": 76,
        "fullcodeline": "cil_log(CIL_ERR, \"%s cannot be defined within booleanif statement\\n\","
    },
    {
        "line": 93,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_BLOCKABSTRACT) {"
    },
    {
        "line": 23,
        "fullcodeline": "cil_tree_log(parse_current, CIL_ERR, \"Keyword expected after open parenthesis\");"
    },
    {
        "line": 48,
        "fullcodeline": "parse_current->data == CIL_KEY_IN ||"
    },
    {
        "line": 65,
        "fullcodeline": "parse_current->data != CIL_KEY_DONTAUDIT &&"
    },
    {
        "line": 77,
        "fullcodeline": "(char*)parse_current->data);"
    },
    {
        "line": 94,
        "fullcodeline": "rc = cil_gen_blockabstract(db, parse_current, ast_node);"
    },
    {
        "line": 64,
        "fullcodeline": "parse_current->data != CIL_KEY_ALLOW &&"
    },
    {
        "line": 63,
        "fullcodeline": "parse_current->data != CIL_KEY_CONDFALSE &&"
    },
    {
        "line": 95,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_IN) {"
    },
    {
        "line": 62,
        "fullcodeline": "parse_current->data != CIL_KEY_CONDTRUE &&"
    },
    {
        "line": 96,
        "fullcodeline": "rc = cil_gen_in(db, parse_current, ast_node);"
    },
    {
        "line": 61,
        "fullcodeline": "parse_current->data != CIL_KEY_CALL &&"
    },
    {
        "line": 97,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_CLASS) {"
    },
    {
        "line": 98,
        "fullcodeline": "rc = cil_gen_class(db, parse_current, ast_node);"
    },
    {
        "line": 100,
        "fullcodeline": "*finished = CIL_TREE_SKIP_NEXT;"
    },
    {
        "line": 101,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_CLASSORDER) {"
    },
    {
        "line": 102,
        "fullcodeline": "rc = cil_gen_classorder(db, parse_current, ast_node);"
    },
    {
        "line": 103,
        "fullcodeline": "*finished = CIL_TREE_SKIP_NEXT;"
    },
    {
        "line": 104,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_MAP_CLASS) {"
    },
    {
        "line": 105,
        "fullcodeline": "rc = cil_gen_map_class(db, parse_current, ast_node);"
    },
    {
        "line": 106,
        "fullcodeline": "*finished = CIL_TREE_SKIP_NEXT;"
    },
    {
        "line": 107,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_CLASSMAPPING) {"
    },
    {
        "line": 108,
        "fullcodeline": "rc = cil_gen_classmapping(db, parse_current, ast_node);"
    },
    {
        "line": 109,
        "fullcodeline": "*finished = CIL_TREE_SKIP_NEXT;"
    },
    {
        "line": 110,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_CLASSPERMISSION) {"
    },
    {
        "line": 111,
        "fullcodeline": "rc = cil_gen_classpermission(db, parse_current, ast_node);"
    },
    {
        "line": 112,
        "fullcodeline": "*finished = CIL_TREE_SKIP_NEXT;"
    },
    {
        "line": 113,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_CLASSPERMISSIONSET) {"
    },
    {
        "line": 114,
        "fullcodeline": "rc = cil_gen_classpermissionset(db, parse_current, ast_node);"
    },
    {
        "line": 115,
        "fullcodeline": "*finished = CIL_TREE_SKIP_NEXT;"
    },
    {
        "line": 116,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_COMMON) {"
    },
    {
        "line": 117,
        "fullcodeline": "rc = cil_gen_common(db, parse_current, ast_node);"
    },
    {
        "line": 118,
        "fullcodeline": "*finished = CIL_TREE_SKIP_NEXT;"
    },
    {
        "line": 119,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_CLASSCOMMON) {"
    },
    {
        "line": 120,
        "fullcodeline": "rc = cil_gen_classcommon(db, parse_current, ast_node);"
    },
    {
        "line": 121,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_SID) {"
    },
    {
        "line": 122,
        "fullcodeline": "rc = cil_gen_sid(db, parse_current, ast_node);"
    },
    {
        "line": 123,
        "fullcodeline": "*finished = CIL_TREE_SKIP_NEXT;"
    },
    {
        "line": 124,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_SIDCONTEXT) {"
    },
    {
        "line": 125,
        "fullcodeline": "rc = cil_gen_sidcontext(db, parse_current, ast_node);"
    },
    {
        "line": 126,
        "fullcodeline": "*finished = CIL_TREE_SKIP_NEXT;"
    },
    {
        "line": 127,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_SIDORDER) {"
    },
    {
        "line": 128,
        "fullcodeline": "rc = cil_gen_sidorder(db, parse_current, ast_node);"
    },
    {
        "line": 129,
        "fullcodeline": "*finished = CIL_TREE_SKIP_NEXT;"
    },
    {
        "line": 130,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_USER) {"
    },
    {
        "line": 131,
        "fullcodeline": "rc = cil_gen_user(db, parse_current, ast_node);"
    },
    {
        "line": 132,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_USERATTRIBUTE) {"
    },
    {
        "line": 133,
        "fullcodeline": "rc = cil_gen_userattribute(db, parse_current, ast_node);"
    },
    {
        "line": 134,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_USERATTRIBUTESET) {"
    },
    {
        "line": 135,
        "fullcodeline": "rc = cil_gen_userattributeset(db, parse_current, ast_node);"
    },
    {
        "line": 136,
        "fullcodeline": "*finished = CIL_TREE_SKIP_NEXT;"
    },
    {
        "line": 137,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_USERLEVEL) {"
    },
    {
        "line": 138,
        "fullcodeline": "rc = cil_gen_userlevel(db, parse_current, ast_node);"
    },
    {
        "line": 139,
        "fullcodeline": "*finished = CIL_TREE_SKIP_NEXT;"
    },
    {
        "line": 140,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_USERRANGE) {"
    },
    {
        "line": 141,
        "fullcodeline": "rc = cil_gen_userrange(db, parse_current, ast_node);"
    },
    {
        "line": 142,
        "fullcodeline": "*finished = CIL_TREE_SKIP_NEXT;"
    },
    {
        "line": 143,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_USERBOUNDS) {"
    },
    {
        "line": 144,
        "fullcodeline": "rc = cil_gen_bounds(db, parse_current, ast_node, CIL_USER);"
    },
    {
        "line": 145,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_USERPREFIX) {"
    },
    {
        "line": 146,
        "fullcodeline": "rc = cil_gen_userprefix(db, parse_current, ast_node);"
    },
    {
        "line": 147,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_SELINUXUSER) {"
    },
    {
        "line": 148,
        "fullcodeline": "rc = cil_gen_selinuxuser(db, parse_current, ast_node);"
    },
    {
        "line": 149,
        "fullcodeline": "*finished = CIL_TREE_SKIP_NEXT;"
    },
    {
        "line": 150,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_SELINUXUSERDEFAULT) {"
    },
    {
        "line": 151,
        "fullcodeline": "rc = cil_gen_selinuxuserdefault(db, parse_current, ast_node);"
    },
    {
        "line": 152,
        "fullcodeline": "*finished = CIL_TREE_SKIP_NEXT;"
    },
    {
        "line": 153,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_TYPE) {"
    },
    {
        "line": 154,
        "fullcodeline": "rc = cil_gen_type(db, parse_current, ast_node);"
    },
    {
        "line": 155,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_TYPEATTRIBUTE) {"
    },
    {
        "line": 156,
        "fullcodeline": "rc = cil_gen_typeattribute(db, parse_current, ast_node);"
    },
    {
        "line": 157,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_TYPEATTRIBUTESET) {"
    },
    {
        "line": 158,
        "fullcodeline": "rc = cil_gen_typeattributeset(db, parse_current, ast_node);"
    },
    {
        "line": 159,
        "fullcodeline": "*finished = CIL_TREE_SKIP_NEXT;"
    },
    {
        "line": 160,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_EXPANDTYPEATTRIBUTE) {"
    },
    {
        "line": 161,
        "fullcodeline": "rc = cil_gen_expandtypeattribute(db, parse_current, ast_node);"
    },
    {
        "line": 162,
        "fullcodeline": "*finished = CIL_TREE_SKIP_NEXT;"
    },
    {
        "line": 163,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_TYPEALIAS) {"
    },
    {
        "line": 164,
        "fullcodeline": "rc = cil_gen_alias(db, parse_current, ast_node, CIL_TYPEALIAS);"
    },
    {
        "line": 165,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_TYPEALIASACTUAL) {"
    },
    {
        "line": 166,
        "fullcodeline": "rc = cil_gen_aliasactual(db, parse_current, ast_node, CIL_TYPEALIASACTUAL);"
    },
    {
        "line": 167,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_TYPEBOUNDS) {"
    },
    {
        "line": 168,
        "fullcodeline": "rc = cil_gen_bounds(db, parse_current, ast_node, CIL_TYPE);"
    },
    {
        "line": 169,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_TYPEPERMISSIVE) {"
    },
    {
        "line": 170,
        "fullcodeline": "rc = cil_gen_typepermissive(db, parse_current, ast_node);"
    },
    {
        "line": 171,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_RANGETRANSITION) {"
    },
    {
        "line": 172,
        "fullcodeline": "rc = cil_gen_rangetransition(db, parse_current, ast_node);"
    },
    {
        "line": 173,
        "fullcodeline": "*finished = CIL_TREE_SKIP_NEXT;"
    },
    {
        "line": 174,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_ROLE) {"
    },
    {
        "line": 175,
        "fullcodeline": "rc = cil_gen_role(db, parse_current, ast_node);"
    },
    {
        "line": 176,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_USERROLE) {"
    },
    {
        "line": 177,
        "fullcodeline": "rc = cil_gen_userrole(db, parse_current, ast_node);"
    },
    {
        "line": 178,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_ROLETYPE) {"
    },
    {
        "line": 179,
        "fullcodeline": "rc = cil_gen_roletype(db, parse_current, ast_node);"
    },
    {
        "line": 180,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_ROLETRANSITION) {"
    },
    {
        "line": 181,
        "fullcodeline": "rc = cil_gen_roletransition(parse_current, ast_node);"
    },
    {
        "line": 182,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_ROLEALLOW) {"
    },
    {
        "line": 183,
        "fullcodeline": "rc = cil_gen_roleallow(db, parse_current, ast_node);"
    },
    {
        "line": 184,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_ROLEATTRIBUTE) {"
    },
    {
        "line": 185,
        "fullcodeline": "rc = cil_gen_roleattribute(db, parse_current, ast_node);"
    },
    {
        "line": 186,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_ROLEATTRIBUTESET) {"
    },
    {
        "line": 187,
        "fullcodeline": "rc = cil_gen_roleattributeset(db, parse_current, ast_node);"
    },
    {
        "line": 188,
        "fullcodeline": "*finished = CIL_TREE_SKIP_NEXT;"
    },
    {
        "line": 189,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_ROLEBOUNDS) {"
    },
    {
        "line": 190,
        "fullcodeline": "rc = cil_gen_bounds(db, parse_current, ast_node, CIL_ROLE);"
    },
    {
        "line": 191,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_BOOL) {"
    },
    {
        "line": 192,
        "fullcodeline": "rc = cil_gen_bool(db, parse_current, ast_node, CIL_FALSE);"
    },
    {
        "line": 193,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_BOOLEANIF) {"
    },
    {
        "line": 194,
        "fullcodeline": "rc = cil_gen_boolif(db, parse_current, ast_node, CIL_FALSE);"
    },
    {
        "line": 195,
        "fullcodeline": "} else if(parse_current->data == CIL_KEY_TUNABLE) {"
    },
    {
        "line": 197,
        "fullcodeline": "rc = cil_gen_bool(db, parse_current, ast_node, CIL_TRUE);"
    },
    {
        "line": 201,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_TUNABLEIF) {"
    },
    {
        "line": 199,
        "fullcodeline": "rc = cil_gen_tunable(db, parse_current, ast_node);"
    },
    {
        "line": 203,
        "fullcodeline": "rc = cil_gen_boolif(db, parse_current, ast_node, CIL_TRUE);"
    },
    {
        "line": 207,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_CONDTRUE) {"
    },
    {
        "line": 205,
        "fullcodeline": "rc = cil_gen_tunif(db, parse_current, ast_node);"
    },
    {
        "line": 208,
        "fullcodeline": "rc = cil_gen_condblock(db, parse_current, ast_node, CIL_CONDTRUE);"
    },
    {
        "line": 209,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_CONDFALSE) {"
    },
    {
        "line": 210,
        "fullcodeline": "rc = cil_gen_condblock(db, parse_current, ast_node, CIL_CONDFALSE);"
    },
    {
        "line": 211,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_ALLOW) {"
    },
    {
        "line": 212,
        "fullcodeline": "rc = cil_gen_avrule(parse_current, ast_node, CIL_AVRULE_ALLOWED);"
    },
    {
        "line": 214,
        "fullcodeline": "*finished = CIL_TREE_SKIP_NEXT;"
    },
    {
        "line": 215,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_AUDITALLOW) {"
    },
    {
        "line": 216,
        "fullcodeline": "rc = cil_gen_avrule(parse_current, ast_node, CIL_AVRULE_AUDITALLOW);"
    },
    {
        "line": 217,
        "fullcodeline": "*finished = CIL_TREE_SKIP_NEXT;"
    },
    {
        "line": 218,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_DONTAUDIT) {"
    },
    {
        "line": 219,
        "fullcodeline": "rc = cil_gen_avrule(parse_current, ast_node, CIL_AVRULE_DONTAUDIT);"
    },
    {
        "line": 220,
        "fullcodeline": "*finished = CIL_TREE_SKIP_NEXT;"
    },
    {
        "line": 221,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_NEVERALLOW) {"
    },
    {
        "line": 222,
        "fullcodeline": "rc = cil_gen_avrule(parse_current, ast_node, CIL_AVRULE_NEVERALLOW);"
    },
    {
        "line": 223,
        "fullcodeline": "*finished = CIL_TREE_SKIP_NEXT;"
    },
    {
        "line": 224,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_ALLOWX) {"
    },
    {
        "line": 225,
        "fullcodeline": "rc = cil_gen_avrulex(parse_current, ast_node, CIL_AVRULE_ALLOWED);"
    },
    {
        "line": 226,
        "fullcodeline": "*finished = CIL_TREE_SKIP_NEXT;"
    },
    {
        "line": 227,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_AUDITALLOWX) {"
    },
    {
        "line": 228,
        "fullcodeline": "rc = cil_gen_avrulex(parse_current, ast_node, CIL_AVRULE_AUDITALLOW);"
    },
    {
        "line": 229,
        "fullcodeline": "*finished = CIL_TREE_SKIP_NEXT;"
    },
    {
        "line": 230,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_DONTAUDITX) {"
    },
    {
        "line": 231,
        "fullcodeline": "rc = cil_gen_avrulex(parse_current, ast_node, CIL_AVRULE_DONTAUDIT);"
    },
    {
        "line": 232,
        "fullcodeline": "*finished = CIL_TREE_SKIP_NEXT;"
    },
    {
        "line": 233,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_NEVERALLOWX) {"
    },
    {
        "line": 234,
        "fullcodeline": "rc = cil_gen_avrulex(parse_current, ast_node, CIL_AVRULE_NEVERALLOW);"
    },
    {
        "line": 235,
        "fullcodeline": "*finished = CIL_TREE_SKIP_NEXT;"
    },
    {
        "line": 236,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_PERMISSIONX) {"
    },
    {
        "line": 237,
        "fullcodeline": "rc = cil_gen_permissionx(db, parse_current, ast_node);"
    },
    {
        "line": 238,
        "fullcodeline": "*finished = CIL_TREE_SKIP_NEXT;"
    },
    {
        "line": 239,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_TYPETRANSITION) {"
    },
    {
        "line": 240,
        "fullcodeline": "rc = cil_gen_typetransition(db, parse_current, ast_node);"
    },
    {
        "line": 241,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_TYPECHANGE) {"
    },
    {
        "line": 242,
        "fullcodeline": "rc = cil_gen_type_rule(parse_current, ast_node, CIL_TYPE_CHANGE);"
    },
    {
        "line": 243,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_TYPEMEMBER) {"
    },
    {
        "line": 244,
        "fullcodeline": "rc = cil_gen_type_rule(parse_current, ast_node, CIL_TYPE_MEMBER);"
    },
    {
        "line": 245,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_SENSITIVITY) {"
    },
    {
        "line": 246,
        "fullcodeline": "rc = cil_gen_sensitivity(db, parse_current, ast_node);"
    },
    {
        "line": 247,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_SENSALIAS) {"
    },
    {
        "line": 248,
        "fullcodeline": "rc = cil_gen_alias(db, parse_current, ast_node, CIL_SENSALIAS);"
    },
    {
        "line": 249,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_SENSALIASACTUAL) {"
    },
    {
        "line": 250,
        "fullcodeline": "rc = cil_gen_aliasactual(db, parse_current, ast_node, CIL_SENSALIASACTUAL);"
    },
    {
        "line": 251,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_CATEGORY) {"
    },
    {
        "line": 252,
        "fullcodeline": "rc = cil_gen_category(db, parse_current, ast_node);"
    },
    {
        "line": 253,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_CATALIAS) {"
    },
    {
        "line": 254,
        "fullcodeline": "rc = cil_gen_alias(db, parse_current, ast_node, CIL_CATALIAS);"
    },
    {
        "line": 255,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_CATALIASACTUAL) {"
    },
    {
        "line": 256,
        "fullcodeline": "rc = cil_gen_aliasactual(db, parse_current, ast_node, CIL_CATALIASACTUAL);"
    },
    {
        "line": 257,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_CATSET) {"
    },
    {
        "line": 258,
        "fullcodeline": "rc = cil_gen_catset(db, parse_current, ast_node);"
    },
    {
        "line": 259,
        "fullcodeline": "*finished = CIL_TREE_SKIP_NEXT;"
    },
    {
        "line": 260,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_CATORDER) {"
    },
    {
        "line": 261,
        "fullcodeline": "rc = cil_gen_catorder(db, parse_current, ast_node);"
    },
    {
        "line": 262,
        "fullcodeline": "*finished = CIL_TREE_SKIP_NEXT;"
    },
    {
        "line": 263,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_SENSITIVITYORDER) {"
    },
    {
        "line": 264,
        "fullcodeline": "rc = cil_gen_sensitivityorder(db, parse_current, ast_node);"
    },
    {
        "line": 265,
        "fullcodeline": "*finished = CIL_TREE_SKIP_NEXT;"
    },
    {
        "line": 266,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_SENSCAT) {"
    },
    {
        "line": 267,
        "fullcodeline": "rc = cil_gen_senscat(db, parse_current, ast_node);"
    },
    {
        "line": 268,
        "fullcodeline": "*finished = CIL_TREE_SKIP_NEXT;"
    },
    {
        "line": 269,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_LEVEL) {"
    },
    {
        "line": 270,
        "fullcodeline": "rc = cil_gen_level(db, parse_current, ast_node);"
    },
    {
        "line": 271,
        "fullcodeline": "*finished = CIL_TREE_SKIP_NEXT;"
    },
    {
        "line": 272,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_LEVELRANGE) {"
    },
    {
        "line": 273,
        "fullcodeline": "rc = cil_gen_levelrange(db, parse_current, ast_node);"
    },
    {
        "line": 274,
        "fullcodeline": "*finished = CIL_TREE_SKIP_NEXT;"
    },
    {
        "line": 275,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_CONSTRAIN) {"
    },
    {
        "line": 276,
        "fullcodeline": "rc = cil_gen_constrain(db, parse_current, ast_node, CIL_CONSTRAIN);"
    },
    {
        "line": 277,
        "fullcodeline": "*finished = CIL_TREE_SKIP_NEXT;"
    },
    {
        "line": 278,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_MLSCONSTRAIN) {"
    },
    {
        "line": 279,
        "fullcodeline": "rc = cil_gen_constrain(db, parse_current, ast_node, CIL_MLSCONSTRAIN);"
    },
    {
        "line": 280,
        "fullcodeline": "*finished = CIL_TREE_SKIP_NEXT;"
    },
    {
        "line": 281,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_VALIDATETRANS) {"
    },
    {
        "line": 282,
        "fullcodeline": "rc = cil_gen_validatetrans(db, parse_current, ast_node, CIL_VALIDATETRANS);"
    },
    {
        "line": 283,
        "fullcodeline": "*finished = CIL_TREE_SKIP_NEXT;"
    },
    {
        "line": 284,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_MLSVALIDATETRANS) {"
    },
    {
        "line": 285,
        "fullcodeline": "rc = cil_gen_validatetrans(db, parse_current, ast_node, CIL_MLSVALIDATETRANS);"
    },
    {
        "line": 286,
        "fullcodeline": "*finished = CIL_TREE_SKIP_NEXT;"
    },
    {
        "line": 287,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_CONTEXT) {"
    },
    {
        "line": 288,
        "fullcodeline": "rc = cil_gen_context(db, parse_current, ast_node);"
    },
    {
        "line": 289,
        "fullcodeline": "*finished = CIL_TREE_SKIP_NEXT;"
    },
    {
        "line": 290,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_FILECON) {"
    },
    {
        "line": 291,
        "fullcodeline": "rc = cil_gen_filecon(db, parse_current, ast_node);"
    },
    {
        "line": 292,
        "fullcodeline": "*finished = CIL_TREE_SKIP_NEXT;"
    },
    {
        "line": 293,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_IBPKEYCON) {"
    },
    {
        "line": 294,
        "fullcodeline": "rc = cil_gen_ibpkeycon(db, parse_current, ast_node);"
    },
    {
        "line": 295,
        "fullcodeline": "*finished = CIL_TREE_SKIP_NEXT;"
    },
    {
        "line": 296,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_IBENDPORTCON) {"
    },
    {
        "line": 297,
        "fullcodeline": "rc = cil_gen_ibendportcon(db, parse_current, ast_node);"
    },
    {
        "line": 298,
        "fullcodeline": "*finished = CIL_TREE_SKIP_NEXT;"
    },
    {
        "line": 299,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_PORTCON) {"
    },
    {
        "line": 300,
        "fullcodeline": "rc = cil_gen_portcon(db, parse_current, ast_node);"
    },
    {
        "line": 301,
        "fullcodeline": "*finished = CIL_TREE_SKIP_NEXT;"
    },
    {
        "line": 302,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_NODECON) {"
    },
    {
        "line": 303,
        "fullcodeline": "rc = cil_gen_nodecon(db, parse_current, ast_node);"
    },
    {
        "line": 304,
        "fullcodeline": "*finished = CIL_TREE_SKIP_NEXT;"
    },
    {
        "line": 305,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_GENFSCON) {"
    },
    {
        "line": 306,
        "fullcodeline": "rc = cil_gen_genfscon(db, parse_current, ast_node);"
    },
    {
        "line": 307,
        "fullcodeline": "*finished = CIL_TREE_SKIP_NEXT;"
    },
    {
        "line": 308,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_NETIFCON) {"
    },
    {
        "line": 309,
        "fullcodeline": "rc = cil_gen_netifcon(db, parse_current, ast_node);"
    },
    {
        "line": 310,
        "fullcodeline": "*finished = CIL_TREE_SKIP_NEXT;"
    },
    {
        "line": 311,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_PIRQCON) {"
    },
    {
        "line": 312,
        "fullcodeline": "rc = cil_gen_pirqcon(db, parse_current, ast_node);"
    },
    {
        "line": 313,
        "fullcodeline": "*finished = CIL_TREE_SKIP_NEXT;"
    },
    {
        "line": 314,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_IOMEMCON) {"
    },
    {
        "line": 315,
        "fullcodeline": "rc = cil_gen_iomemcon(db, parse_current, ast_node);"
    },
    {
        "line": 316,
        "fullcodeline": "*finished = CIL_TREE_SKIP_NEXT;"
    },
    {
        "line": 317,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_IOPORTCON) {"
    },
    {
        "line": 318,
        "fullcodeline": "rc = cil_gen_ioportcon(db, parse_current, ast_node);"
    },
    {
        "line": 319,
        "fullcodeline": "*finished = CIL_TREE_SKIP_NEXT;"
    },
    {
        "line": 320,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_PCIDEVICECON) {"
    },
    {
        "line": 321,
        "fullcodeline": "rc = cil_gen_pcidevicecon(db, parse_current, ast_node);"
    },
    {
        "line": 322,
        "fullcodeline": "*finished = CIL_TREE_SKIP_NEXT;"
    },
    {
        "line": 323,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_DEVICETREECON) {"
    },
    {
        "line": 324,
        "fullcodeline": "rc = cil_gen_devicetreecon(db, parse_current, ast_node);"
    },
    {
        "line": 325,
        "fullcodeline": "*finished = CIL_TREE_SKIP_NEXT;"
    },
    {
        "line": 326,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_FSUSE) {"
    },
    {
        "line": 327,
        "fullcodeline": "rc = cil_gen_fsuse(db, parse_current, ast_node);"
    },
    {
        "line": 328,
        "fullcodeline": "*finished = CIL_TREE_SKIP_NEXT;"
    },
    {
        "line": 329,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_MACRO) {"
    },
    {
        "line": 330,
        "fullcodeline": "rc = cil_gen_macro(db, parse_current, ast_node);"
    },
    {
        "line": 331,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_CALL) {"
    },
    {
        "line": 332,
        "fullcodeline": "rc = cil_gen_call(db, parse_current, ast_node);"
    },
    {
        "line": 333,
        "fullcodeline": "*finished = CIL_TREE_SKIP_NEXT;"
    },
    {
        "line": 334,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_POLICYCAP) {"
    },
    {
        "line": 335,
        "fullcodeline": "rc = cil_gen_policycap(db, parse_current, ast_node);"
    },
    {
        "line": 336,
        "fullcodeline": "*finished = CIL_TREE_SKIP_NEXT;"
    },
    {
        "line": 337,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_OPTIONAL) {"
    },
    {
        "line": 338,
        "fullcodeline": "rc = cil_gen_optional(db, parse_current, ast_node);"
    },
    {
        "line": 339,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_IPADDR) {"
    },
    {
        "line": 340,
        "fullcodeline": "rc = cil_gen_ipaddr(db, parse_current, ast_node);"
    },
    {
        "line": 341,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_DEFAULTUSER) {"
    },
    {
        "line": 342,
        "fullcodeline": "rc = cil_gen_default(parse_current, ast_node, CIL_DEFAULTUSER);"
    },
    {
        "line": 343,
        "fullcodeline": "*finished = CIL_TREE_SKIP_NEXT;"
    },
    {
        "line": 344,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_DEFAULTROLE) {"
    },
    {
        "line": 345,
        "fullcodeline": "rc = cil_gen_default(parse_current, ast_node, CIL_DEFAULTROLE);"
    },
    {
        "line": 346,
        "fullcodeline": "*finished = CIL_TREE_SKIP_NEXT;"
    },
    {
        "line": 347,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_DEFAULTTYPE) {"
    },
    {
        "line": 348,
        "fullcodeline": "rc = cil_gen_default(parse_current, ast_node, CIL_DEFAULTTYPE);"
    },
    {
        "line": 349,
        "fullcodeline": "*finished = CIL_TREE_SKIP_NEXT;"
    },
    {
        "line": 350,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_DEFAULTRANGE) {"
    },
    {
        "line": 351,
        "fullcodeline": "rc = cil_gen_defaultrange(parse_current, ast_node);"
    },
    {
        "line": 352,
        "fullcodeline": "*finished = CIL_TREE_SKIP_NEXT;"
    },
    {
        "line": 353,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_HANDLEUNKNOWN) {"
    },
    {
        "line": 354,
        "fullcodeline": "rc = cil_gen_handleunknown(parse_current, ast_node);"
    },
    {
        "line": 355,
        "fullcodeline": "*finished = CIL_TREE_SKIP_NEXT;"
    },
    {
        "line": 356,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_MLS) {"
    },
    {
        "line": 357,
        "fullcodeline": "rc = cil_gen_mls(parse_current, ast_node);"
    },
    {
        "line": 358,
        "fullcodeline": "*finished = CIL_TREE_SKIP_NEXT;"
    },
    {
        "line": 359,
        "fullcodeline": "} else if (parse_current->data == CIL_KEY_SRC_INFO) {"
    },
    {
        "line": 360,
        "fullcodeline": "rc = cil_gen_src_info(parse_current, ast_node);"
    },
    {
        "line": 362,
        "fullcodeline": "cil_log(CIL_ERR, \"Error: Unknown keyword %s\\n\", (char *)parse_current->data);"
    },
    {
        "line": 363,
        "fullcodeline": "rc = SEPOL_ERR;"
    }
]