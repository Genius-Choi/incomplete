[
    {
        "line": 5,
        "fullcodeline": "bool ProtocolDefined = false;"
    },
    {
        "line": 6,
        "fullcodeline": "bool PortNumberDefined = false;"
    },
    {
        "line": 9,
        "fullcodeline": "TFtps AFtps = ftpsNone;"
    },
    {
        "line": 10,
        "fullcodeline": "int ProtocolLen = 0;"
    },
    {
        "line": 96,
        "fullcodeline": "bool Unsafe = FLAGSET(Flags, pufUnsafe);"
    },
    {
        "line": 11,
        "fullcodeline": "if (IsProtocolUrl(Url, ScpProtocol, ProtocolLen))"
    },
    {
        "line": 86,
        "fullcodeline": "if (ProtocolDefined && (Url.SubString(1, 2) == L\"//\"))"
    },
    {
        "line": 91,
        "fullcodeline": "if (AProtocolDefined != NULL)"
    },
    {
        "line": 97,
        "fullcodeline": "if (!Url.IsEmpty())"
    },
    {
        "line": 335,
        "fullcodeline": "if (Options != NULL)"
    },
    {
        "line": 13,
        "fullcodeline": "AFSProtocol = fsSCPonly;"
    },
    {
        "line": 14,
        "fullcodeline": "APortNumber = SshPortNumber;"
    },
    {
        "line": 15,
        "fullcodeline": "MoveStr(Url, MaskedUrl, ProtocolLen);"
    },
    {
        "line": 16,
        "fullcodeline": "ProtocolDefined = true;"
    },
    {
        "line": 88,
        "fullcodeline": "MoveStr(Url, MaskedUrl, 2);"
    },
    {
        "line": 93,
        "fullcodeline": "*AProtocolDefined = ProtocolDefined;"
    },
    {
        "line": 99,
        "fullcodeline": "UnicodeString DecodedUrl = DecodeUrlChars(Url);"
    },
    {
        "line": 103,
        "fullcodeline": "TSessionData * Data = NULL;"
    },
    {
        "line": 317,
        "fullcodeline": "DefaultsOnly = false;"
    },
    {
        "line": 332,
        "fullcodeline": "FSProtocol = AFSProtocol;"
    },
    {
        "line": 372,
        "fullcodeline": "FtpPasvMode = Options->SwitchValue(L\"passive\", FtpPasvMode);"
    },
    {
        "line": 105,
        "fullcodeline": "if ((StoredSessions != NULL) &&"
    },
    {
        "line": 141,
        "fullcodeline": "if (Data != NULL)"
    },
    {
        "line": 306,
        "fullcodeline": "if (!ARemoteDirectory.IsEmpty() && (ARemoteDirectory != L\"/\"))"
    },
    {
        "line": 327,
        "fullcodeline": "DefaultsOnly = true;"
    },
    {
        "line": 341,
        "fullcodeline": "if (Options->FindSwitch(SESSIONNAME_SWICH, Value))"
    },
    {
        "line": 345,
        "fullcodeline": "if (Options->FindSwitch(NEWPASSWORD_SWITCH, Value))"
    },
    {
        "line": 350,
        "fullcodeline": "if (Options->FindSwitch(L\"privatekey\", Value))"
    },
    {
        "line": 354,
        "fullcodeline": "if (Options->FindSwitch(L\"clientcert\", Value))"
    },
    {
        "line": 358,
        "fullcodeline": "if (Options->FindSwitch(PassphraseOption, Value))"
    },
    {
        "line": 362,
        "fullcodeline": "if (Options->FindSwitch(L\"timeout\", Value))"
    },
    {
        "line": 366,
        "fullcodeline": "if (Options->FindSwitch(L\"hostkey\", Value) ||"
    },
    {
        "line": 373,
        "fullcodeline": "if (Options->FindSwitch(L\"implicit\"))"
    },
    {
        "line": 383,
        "fullcodeline": "if (Options->FindSwitch(L\"explicitssl\"))"
    },
    {
        "line": 392,
        "fullcodeline": "if (Options->FindSwitch(L\"explicit\") ||"
    },
    {
        "line": 405,
        "fullcodeline": "if (Options->FindSwitch(RawSettingsOption))"
    },
    {
        "line": 18,
        "fullcodeline": "else if (IsProtocolUrl(Url, SftpProtocol, ProtocolLen))"
    },
    {
        "line": 106,
        "fullcodeline": "(!ProtocolDefined || FLAGSET(Flags, pufAllowStoredSiteWithProtocol)))"
    },
    {
        "line": 143,
        "fullcodeline": "Assign(Data);"
    },
    {
        "line": 144,
        "fullcodeline": "int P = 1;"
    },
    {
        "line": 150,
        "fullcodeline": "ARemoteDirectory = Url.SubString(P + 1, Url.Length() - P);"
    },
    {
        "line": 314,
        "fullcodeline": "RemoteDirectory = DecodeUrlChars(ARemoteDirectory);"
    },
    {
        "line": 322,
        "fullcodeline": "if (StoredSessions != NULL)"
    },
    {
        "line": 343,
        "fullcodeline": "Name = Value;"
    },
    {
        "line": 347,
        "fullcodeline": "ChangePassword = true;"
    },
    {
        "line": 348,
        "fullcodeline": "NewPassword = Value;"
    },
    {
        "line": 352,
        "fullcodeline": "PublicKeyFile = Value;"
    },
    {
        "line": 356,
        "fullcodeline": "TlsCertificateFile = Value;"
    },
    {
        "line": 360,
        "fullcodeline": "Passphrase = Value;"
    },
    {
        "line": 364,
        "fullcodeline": "Timeout = StrToInt(Value);"
    },
    {
        "line": 367,
        "fullcodeline": "Options->FindSwitch(L\"certificate\", Value))"
    },
    {
        "line": 369,
        "fullcodeline": "HostKey = Value;"
    },
    {
        "line": 370,
        "fullcodeline": "FOverrideCachedHostKey = true;"
    },
    {
        "line": 375,
        "fullcodeline": "bool Enabled = Options->SwitchValue(L\"implicit\", true);"
    },
    {
        "line": 376,
        "fullcodeline": "Ftps = Enabled ? ftpsImplicit : ftpsNone;"
    },
    {
        "line": 385,
        "fullcodeline": "bool Enabled = Options->SwitchValue(L\"explicitssl\", true);"
    },
    {
        "line": 386,
        "fullcodeline": "Ftps = Enabled ? ftpsExplicitSsl : ftpsNone;"
    },
    {
        "line": 394,
        "fullcodeline": "Options->FindSwitch(L\"explicittls\"))"
    },
    {
        "line": 396,
        "fullcodeline": "UnicodeString SwitchName ="
    },
    {
        "line": 398,
        "fullcodeline": "bool Enabled = Options->SwitchValue(SwitchName, true);"
    },
    {
        "line": 399,
        "fullcodeline": "Ftps = Enabled ? ftpsExplicitTls : ftpsNone;"
    },
    {
        "line": 407,
        "fullcodeline": "std::unique_ptr<TStrings> RawSettings(new TStringList());"
    },
    {
        "line": 20,
        "fullcodeline": "AFSProtocol = fsSFTPonly;"
    },
    {
        "line": 21,
        "fullcodeline": "APortNumber = SshPortNumber;"
    },
    {
        "line": 22,
        "fullcodeline": "MoveStr(Url, MaskedUrl, ProtocolLen);"
    },
    {
        "line": 23,
        "fullcodeline": "ProtocolDefined = true;"
    },
    {
        "line": 109,
        "fullcodeline": "for (Integer Index = 0; Index < StoredSessions->CountIncludingHidden; Index++)"
    },
    {
        "line": 145,
        "fullcodeline": "while (!AnsiSameText(DecodeUrlChars(Url.SubString(1, P)), Data->Name))"
    },
    {
        "line": 160,
        "fullcodeline": "if (MaskedUrl != NULL)"
    },
    {
        "line": 172,
        "fullcodeline": "Name = L\"\";"
    },
    {
        "line": 174,
        "fullcodeline": "int PSlash = Url.Pos(L\"/\");"
    },
    {
        "line": 180,
        "fullcodeline": "UnicodeString ConnectInfo = Url.SubString(1, PSlash - 1);"
    },
    {
        "line": 182,
        "fullcodeline": "int P = ConnectInfo.LastDelimiter(L\"@\");"
    },
    {
        "line": 197,
        "fullcodeline": "UnicodeString OrigHostInfo = HostInfo;"
    },
    {
        "line": 228,
        "fullcodeline": "UnicodeString UserInfoWithoutConnectionParams = CutToChar(UserInfo, UrlParamSeparator, false);"
    },
    {
        "line": 229,
        "fullcodeline": "UnicodeString ConnectionParams = UserInfo;"
    },
    {
        "line": 230,
        "fullcodeline": "UserInfo = UserInfoWithoutConnectionParams;"
    },
    {
        "line": 232,
        "fullcodeline": "std::unique_ptr<TStrings> RawSettings(new TStringList());"
    },
    {
        "line": 264,
        "fullcodeline": "bool HasPassword = (UserInfo.Pos(L':') > 0);"
    },
    {
        "line": 265,
        "fullcodeline": "UnicodeString RawUserName = CutToChar(UserInfo, L':', false);"
    },
    {
        "line": 266,
        "fullcodeline": "UserName = DecodeUrlChars(RawUserName);"
    },
    {
        "line": 268,
        "fullcodeline": "Password = DecodeUrlChars(UserInfo);"
    },
    {
        "line": 274,
        "fullcodeline": "UnicodeString RemoteDirectoryWithSessionParams = Url.SubString(PSlash, Url.Length() - PSlash + 1);"
    },
    {
        "line": 275,
        "fullcodeline": "ARemoteDirectory = CutToChar(RemoteDirectoryWithSessionParams, UrlParamSeparator, false);"
    },
    {
        "line": 276,
        "fullcodeline": "UnicodeString SessionParams = RemoteDirectoryWithSessionParams;"
    },
    {
        "line": 308,
        "fullcodeline": "if ((ARemoteDirectory[ARemoteDirectory.Length()] != L'/') &&"
    },
    {
        "line": 324,
        "fullcodeline": "CopyData(StoredSessions->DefaultSettings);"
    },
    {
        "line": 377,
        "fullcodeline": "if (!PortNumberDefined && Enabled)"
    },
    {
        "line": 387,
        "fullcodeline": "if (!PortNumberDefined && Enabled)"
    },
    {
        "line": 397,
        "fullcodeline": "Options->FindSwitch(L\"explicit\") ? L\"explicit\" : L\"explicittls\";"
    },
    {
        "line": 400,
        "fullcodeline": "if (!PortNumberDefined && Enabled)"
    },
    {
        "line": 408,
        "fullcodeline": "if (Options->FindSwitch(RawSettingsOption, RawSettings.get()))"
    },
    {
        "line": 111,
        "fullcodeline": "TSessionData * AData = (TSessionData *)StoredSessions->Items[Index];"
    },
    {
        "line": 147,
        "fullcodeline": "P++;"
    },
    {
        "line": 148,
        "fullcodeline": "DebugAssert(P <= Url.Length());"
    },
    {
        "line": 154,
        "fullcodeline": "Data->Remove();"
    },
    {
        "line": 155,
        "fullcodeline": "StoredSessions->Remove(Data);"
    },
    {
        "line": 157,
        "fullcodeline": "StoredSessions->Save(false, false);"
    },
    {
        "line": 162,
        "fullcodeline": "(*MaskedUrl) += Url;"
    },
    {
        "line": 168,
        "fullcodeline": "if (StoredSessions != NULL)"
    },
    {
        "line": 175,
        "fullcodeline": "if (PSlash == 0)"
    },
    {
        "line": 187,
        "fullcodeline": "if (P > 0)"
    },
    {
        "line": 198,
        "fullcodeline": "if ((HostInfo.Length() >= 2) && (HostInfo[1] == L'[') && ((P = HostInfo.Pos(L\"]\")) > 0))"
    },
    {
        "line": 213,
        "fullcodeline": "if (!HostInfo.IsEmpty())"
    },
    {
        "line": 234,
        "fullcodeline": "while (!ConnectionParams.IsEmpty())"
    },
    {
        "line": 259,
        "fullcodeline": "if (RawSettings->Count > 0) // optimization"
    },
    {
        "line": 269,
        "fullcodeline": "if (HasPassword && Password.IsEmpty())"
    },
    {
        "line": 281,
        "fullcodeline": "while (!SessionParams.IsEmpty())"
    },
    {
        "line": 291,
        "fullcodeline": "if (MaskedUrl != NULL)"
    },
    {
        "line": 309,
        "fullcodeline": "(FileName != NULL))"
    },
    {
        "line": 311,
        "fullcodeline": "*FileName = DecodeUrlChars(UnixExtractFileName(ARemoteDirectory));"
    },
    {
        "line": 312,
        "fullcodeline": "ARemoteDirectory = UnixExtractFilePath(ARemoteDirectory);"
    },
    {
        "line": 379,
        "fullcodeline": "PortNumber = FtpsImplicitPortNumber;"
    },
    {
        "line": 389,
        "fullcodeline": "PortNumber = FtpPortNumber;"
    },
    {
        "line": 402,
        "fullcodeline": "PortNumber = FtpPortNumber;"
    },
    {
        "line": 410,
        "fullcodeline": "ApplyRawSettings(RawSettings.get(), Unsafe);"
    },
    {
        "line": 25,
        "fullcodeline": "else if (IsProtocolUrl(Url, FtpProtocol, ProtocolLen))"
    },
    {
        "line": 112,
        "fullcodeline": "if (!AData->IsWorkspace)"
    },
    {
        "line": 170,
        "fullcodeline": "CopyData(StoredSessions->DefaultSettings);"
    },
    {
        "line": 177,
        "fullcodeline": "PSlash = Url.Length() + 1;"
    },
    {
        "line": 189,
        "fullcodeline": "UserInfo = ConnectInfo.SubString(1, P - 1);"
    },
    {
        "line": 190,
        "fullcodeline": "HostInfo = ConnectInfo.SubString(P + 1, ConnectInfo.Length() - P);"
    },
    {
        "line": 200,
        "fullcodeline": "HostName = HostInfo.SubString(2, P - 2);"
    },
    {
        "line": 201,
        "fullcodeline": "HostInfo.Delete(1, P);"
    },
    {
        "line": 215,
        "fullcodeline": "PortNumber = StrToIntDef(DecodeUrlChars(HostInfo), -1);"
    },
    {
        "line": 216,
        "fullcodeline": "PortNumberDefined = true;"
    },
    {
        "line": 225,
        "fullcodeline": "Ftps = AFtps;"
    },
    {
        "line": 236,
        "fullcodeline": "UnicodeString ConnectionParam = CutToChar(ConnectionParams, UrlParamSeparator, false);"
    },
    {
        "line": 237,
        "fullcodeline": "UnicodeString ConnectionParamName = CutToChar(ConnectionParam, UrlParamValueSeparator, false);"
    },
    {
        "line": 261,
        "fullcodeline": "ApplyRawSettings(RawSettings.get(), FLAGSET(Flags, pufUnsafe));"
    },
    {
        "line": 271,
        "fullcodeline": "Password = EmptyString;"
    },
    {
        "line": 283,
        "fullcodeline": "UnicodeString SessionParam = CutToChar(SessionParams, UrlParamSeparator, false);"
    },
    {
        "line": 284,
        "fullcodeline": "UnicodeString SessionParamName = CutToChar(SessionParam, UrlParamValueSeparator, false);"
    },
    {
        "line": 293,
        "fullcodeline": "(*MaskedUrl) += RawUserName;"
    },
    {
        "line": 302,
        "fullcodeline": "(*MaskedUrl) += OrigHostInfo + ARemoteDirectory;"
    },
    {
        "line": 27,
        "fullcodeline": "AFSProtocol = fsFTP;"
    },
    {
        "line": 28,
        "fullcodeline": "Ftps = ftpsNone;"
    },
    {
        "line": 29,
        "fullcodeline": "APortNumber = FtpPortNumber;"
    },
    {
        "line": 30,
        "fullcodeline": "MoveStr(Url, MaskedUrl, ProtocolLen);"
    },
    {
        "line": 31,
        "fullcodeline": "ProtocolDefined = true;"
    },
    {
        "line": 114,
        "fullcodeline": "bool Match = false;"
    },
    {
        "line": 194,
        "fullcodeline": "HostInfo = ConnectInfo;"
    },
    {
        "line": 202,
        "fullcodeline": "if (!HostInfo.IsEmpty() && (HostInfo[1] == L':'))"
    },
    {
        "line": 209,
        "fullcodeline": "HostName = DecodeUrlChars(CutToChar(HostInfo, L':', true));"
    },
    {
        "line": 238,
        "fullcodeline": "if (SameText(ConnectionParamName, UrlHostKeyParamName))"
    },
    {
        "line": 285,
        "fullcodeline": "if (SameText(SessionParamName, UrlSaveParamName))"
    },
    {
        "line": 298,
        "fullcodeline": "if (!RawUserName.IsEmpty() || HasPassword)"
    },
    {
        "line": 117,
        "fullcodeline": "if ((AData->Name.Length() == DecodedUrl.Length()) &&"
    },
    {
        "line": 204,
        "fullcodeline": "HostInfo.Delete(1, 1);"
    },
    {
        "line": 240,
        "fullcodeline": "HostKey = DecodeUrlChars(ConnectionParam);"
    },
    {
        "line": 241,
        "fullcodeline": "FOverrideCachedHostKey = false;"
    },
    {
        "line": 287,
        "fullcodeline": "FSaveOnly = (StrToIntDef(SessionParam, 1) != 0);"
    },
    {
        "line": 296,
        "fullcodeline": "(*MaskedUrl) += L\":\" + PasswordMask;"
    },
    {
        "line": 300,
        "fullcodeline": "(*MaskedUrl) += L\"@\";"
    },
    {
        "line": 33,
        "fullcodeline": "else if (IsProtocolUrl(Url, FtpsProtocol, ProtocolLen))"
    },
    {
        "line": 118,
        "fullcodeline": "SameText(AData->Name, DecodedUrl))"
    },
    {
        "line": 120,
        "fullcodeline": "Match = true;"
    },
    {
        "line": 132,
        "fullcodeline": "Data = AData;"
    },
    {
        "line": 220,
        "fullcodeline": "PortNumber = APortNumber;"
    },
    {
        "line": 35,
        "fullcodeline": "AFSProtocol = fsFTP;"
    },
    {
        "line": 36,
        "fullcodeline": "AFtps = ftpsImplicit;"
    },
    {
        "line": 37,
        "fullcodeline": "APortNumber = FtpsImplicitPortNumber;"
    },
    {
        "line": 38,
        "fullcodeline": "MoveStr(Url, MaskedUrl, ProtocolLen);"
    },
    {
        "line": 39,
        "fullcodeline": "ProtocolDefined = true;"
    },
    {
        "line": 243,
        "fullcodeline": "else if (StartsText(UrlRawSettingsParamNamePrefix, ConnectionParamName))"
    },
    {
        "line": 122,
        "fullcodeline": "else if ((AData->Name.Length() < DecodedUrl.Length()) &&"
    },
    {
        "line": 245,
        "fullcodeline": "UnicodeString AName = RightStr(ConnectionParamName, ConnectionParamName.Length() - UrlRawSettingsParamNamePrefix.Length());"
    },
    {
        "line": 246,
        "fullcodeline": "AName = DecodeUrlChars(AName);"
    },
    {
        "line": 247,
        "fullcodeline": "UnicodeString Value = DecodeUrlChars(ConnectionParam);"
    },
    {
        "line": 41,
        "fullcodeline": "else if (IsProtocolUrl(Url, FtpesProtocol, ProtocolLen))"
    },
    {
        "line": 125,
        "fullcodeline": "(StrLIComp(AData->Name.c_str(), DecodedUrl.c_str(), AData->Name.Length()) == 0))"
    },
    {
        "line": 127,
        "fullcodeline": "Match = true;"
    },
    {
        "line": 248,
        "fullcodeline": "if (SameText(AName, L\"Name\"))"
    },
    {
        "line": 43,
        "fullcodeline": "AFSProtocol = fsFTP;"
    },
    {
        "line": 44,
        "fullcodeline": "AFtps = ftpsExplicitTls;"
    },
    {
        "line": 45,
        "fullcodeline": "APortNumber = FtpPortNumber;"
    },
    {
        "line": 46,
        "fullcodeline": "MoveStr(Url, MaskedUrl, ProtocolLen);"
    },
    {
        "line": 47,
        "fullcodeline": "ProtocolDefined = true;"
    },
    {
        "line": 123,
        "fullcodeline": "(DecodedUrl[AData->Name.Length() + 1] == L'/') &&"
    },
    {
        "line": 250,
        "fullcodeline": "Name = Value;"
    },
    {
        "line": 254,
        "fullcodeline": "RawSettings->Values[AName] = Value;"
    },
    {
        "line": 49,
        "fullcodeline": "else if (IsProtocolUrl(Url, WebDAVProtocol, ProtocolLen) ||"
    },
    {
        "line": 50,
        "fullcodeline": "IsProtocolUrl(Url, HttpProtocol, ProtocolLen))"
    },
    {
        "line": 52,
        "fullcodeline": "AFSProtocol = fsWebDAV;"
    },
    {
        "line": 53,
        "fullcodeline": "AFtps = ftpsNone;"
    },
    {
        "line": 54,
        "fullcodeline": "APortNumber = HTTPPortNumber;"
    },
    {
        "line": 55,
        "fullcodeline": "MoveStr(Url, MaskedUrl, ProtocolLen);"
    },
    {
        "line": 56,
        "fullcodeline": "ProtocolDefined = true;"
    },
    {
        "line": 58,
        "fullcodeline": "else if (IsProtocolUrl(Url, WebDAVSProtocol, ProtocolLen) ||"
    },
    {
        "line": 59,
        "fullcodeline": "IsProtocolUrl(Url, HttpsProtocol, ProtocolLen))"
    },
    {
        "line": 61,
        "fullcodeline": "AFSProtocol = fsWebDAV;"
    },
    {
        "line": 62,
        "fullcodeline": "AFtps = ftpsImplicit;"
    },
    {
        "line": 63,
        "fullcodeline": "APortNumber = HTTPSPortNumber;"
    },
    {
        "line": 64,
        "fullcodeline": "MoveStr(Url, MaskedUrl, ProtocolLen);"
    },
    {
        "line": 65,
        "fullcodeline": "ProtocolDefined = true;"
    },
    {
        "line": 67,
        "fullcodeline": "else if (IsProtocolUrl(Url, S3Protocol, ProtocolLen))"
    },
    {
        "line": 69,
        "fullcodeline": "AFSProtocol = fsS3;"
    },
    {
        "line": 70,
        "fullcodeline": "AFtps = ftpsImplicit;"
    },
    {
        "line": 71,
        "fullcodeline": "APortNumber = HTTPSPortNumber;"
    },
    {
        "line": 72,
        "fullcodeline": "MoveStr(Url, MaskedUrl, ProtocolLen);"
    },
    {
        "line": 73,
        "fullcodeline": "ProtocolDefined = true;"
    },
    {
        "line": 75,
        "fullcodeline": "else if (IsProtocolUrl(Url, SshProtocol, ProtocolLen))"
    },
    {
        "line": 79,
        "fullcodeline": "AFSProtocol = fsSFTPonly;"
    },
    {
        "line": 80,
        "fullcodeline": "PuttyProtocol = PuttySshProtocol;"
    },
    {
        "line": 81,
        "fullcodeline": "APortNumber = SshPortNumber;"
    },
    {
        "line": 82,
        "fullcodeline": "MoveStr(Url, MaskedUrl, ProtocolLen);"
    },
    {
        "line": 83,
        "fullcodeline": "ProtocolDefined = true;"
    }
]