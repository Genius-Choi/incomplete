[
    {
        "line": 5,
        "fullcodeline": "bool ProtocolDefined = false;"
    },
    {
        "line": 6,
        "fullcodeline": "bool PortNumberDefined = false;"
    },
    {
        "line": 9,
        "fullcodeline": "TFtps AFtps = ftpsNone;"
    },
    {
        "line": 10,
        "fullcodeline": "int ProtocolLen = 0;"
    },
    {
        "line": 11,
        "fullcodeline": "if (IsProtocolUrl(Url, ScpProtocol, ProtocolLen))"
    },
    {
        "line": 86,
        "fullcodeline": "if (ProtocolDefined && (Url.SubString(1, 2) == L\"//\"))"
    },
    {
        "line": 91,
        "fullcodeline": "if (AProtocolDefined != NULL)"
    },
    {
        "line": 96,
        "fullcodeline": "if (!Url.IsEmpty())"
    },
    {
        "line": 334,
        "fullcodeline": "if (Options != NULL)"
    },
    {
        "line": 13,
        "fullcodeline": "AFSProtocol = fsSCPonly;"
    },
    {
        "line": 14,
        "fullcodeline": "APortNumber = SshPortNumber;"
    },
    {
        "line": 15,
        "fullcodeline": "MoveStr(Url, MaskedUrl, ProtocolLen);"
    },
    {
        "line": 16,
        "fullcodeline": "ProtocolDefined = true;"
    },
    {
        "line": 88,
        "fullcodeline": "MoveStr(Url, MaskedUrl, 2);"
    },
    {
        "line": 93,
        "fullcodeline": "*AProtocolDefined = ProtocolDefined;"
    },
    {
        "line": 98,
        "fullcodeline": "UnicodeString DecodedUrl = DecodeUrlChars(Url);"
    },
    {
        "line": 102,
        "fullcodeline": "TSessionData * Data = NULL;"
    },
    {
        "line": 316,
        "fullcodeline": "DefaultsOnly = false;"
    },
    {
        "line": 331,
        "fullcodeline": "FSProtocol = AFSProtocol;"
    },
    {
        "line": 371,
        "fullcodeline": "FtpPasvMode = Options->SwitchValue(L\"passive\", FtpPasvMode);"
    },
    {
        "line": 104,
        "fullcodeline": "if ((StoredSessions != NULL) &&"
    },
    {
        "line": 140,
        "fullcodeline": "if (Data != NULL)"
    },
    {
        "line": 305,
        "fullcodeline": "if (!ARemoteDirectory.IsEmpty() && (ARemoteDirectory != L\"/\"))"
    },
    {
        "line": 326,
        "fullcodeline": "DefaultsOnly = true;"
    },
    {
        "line": 340,
        "fullcodeline": "if (Options->FindSwitch(SESSIONNAME_SWICH, Value))"
    },
    {
        "line": 344,
        "fullcodeline": "if (Options->FindSwitch(NEWPASSWORD_SWITCH, Value))"
    },
    {
        "line": 349,
        "fullcodeline": "if (Options->FindSwitch(L\"privatekey\", Value))"
    },
    {
        "line": 353,
        "fullcodeline": "if (Options->FindSwitch(L\"clientcert\", Value))"
    },
    {
        "line": 357,
        "fullcodeline": "if (Options->FindSwitch(PassphraseOption, Value))"
    },
    {
        "line": 361,
        "fullcodeline": "if (Options->FindSwitch(L\"timeout\", Value))"
    },
    {
        "line": 365,
        "fullcodeline": "if (Options->FindSwitch(L\"hostkey\", Value) ||"
    },
    {
        "line": 372,
        "fullcodeline": "if (Options->FindSwitch(L\"implicit\"))"
    },
    {
        "line": 382,
        "fullcodeline": "if (Options->FindSwitch(L\"explicitssl\"))"
    },
    {
        "line": 391,
        "fullcodeline": "if (Options->FindSwitch(L\"explicit\") ||"
    },
    {
        "line": 404,
        "fullcodeline": "if (Options->FindSwitch(RawSettingsOption))"
    },
    {
        "line": 18,
        "fullcodeline": "else if (IsProtocolUrl(Url, SftpProtocol, ProtocolLen))"
    },
    {
        "line": 105,
        "fullcodeline": "(!ProtocolDefined || FLAGSET(Flags, pufAllowStoredSiteWithProtocol)))"
    },
    {
        "line": 142,
        "fullcodeline": "Assign(Data);"
    },
    {
        "line": 143,
        "fullcodeline": "int P = 1;"
    },
    {
        "line": 149,
        "fullcodeline": "ARemoteDirectory = Url.SubString(P + 1, Url.Length() - P);"
    },
    {
        "line": 313,
        "fullcodeline": "RemoteDirectory = DecodeUrlChars(ARemoteDirectory);"
    },
    {
        "line": 321,
        "fullcodeline": "if (StoredSessions != NULL)"
    },
    {
        "line": 342,
        "fullcodeline": "Name = Value;"
    },
    {
        "line": 346,
        "fullcodeline": "ChangePassword = true;"
    },
    {
        "line": 347,
        "fullcodeline": "NewPassword = Value;"
    },
    {
        "line": 351,
        "fullcodeline": "PublicKeyFile = Value;"
    },
    {
        "line": 355,
        "fullcodeline": "TlsCertificateFile = Value;"
    },
    {
        "line": 359,
        "fullcodeline": "Passphrase = Value;"
    },
    {
        "line": 363,
        "fullcodeline": "Timeout = StrToInt(Value);"
    },
    {
        "line": 366,
        "fullcodeline": "Options->FindSwitch(L\"certificate\", Value))"
    },
    {
        "line": 368,
        "fullcodeline": "HostKey = Value;"
    },
    {
        "line": 369,
        "fullcodeline": "FOverrideCachedHostKey = true;"
    },
    {
        "line": 374,
        "fullcodeline": "bool Enabled = Options->SwitchValue(L\"implicit\", true);"
    },
    {
        "line": 375,
        "fullcodeline": "Ftps = Enabled ? ftpsImplicit : ftpsNone;"
    },
    {
        "line": 384,
        "fullcodeline": "bool Enabled = Options->SwitchValue(L\"explicitssl\", true);"
    },
    {
        "line": 385,
        "fullcodeline": "Ftps = Enabled ? ftpsExplicitSsl : ftpsNone;"
    },
    {
        "line": 393,
        "fullcodeline": "Options->FindSwitch(L\"explicittls\"))"
    },
    {
        "line": 395,
        "fullcodeline": "UnicodeString SwitchName ="
    },
    {
        "line": 397,
        "fullcodeline": "bool Enabled = Options->SwitchValue(SwitchName, true);"
    },
    {
        "line": 398,
        "fullcodeline": "Ftps = Enabled ? ftpsExplicitTls : ftpsNone;"
    },
    {
        "line": 406,
        "fullcodeline": "std::unique_ptr<TStrings> RawSettings(new TStringList());"
    },
    {
        "line": 20,
        "fullcodeline": "AFSProtocol = fsSFTPonly;"
    },
    {
        "line": 21,
        "fullcodeline": "APortNumber = SshPortNumber;"
    },
    {
        "line": 22,
        "fullcodeline": "MoveStr(Url, MaskedUrl, ProtocolLen);"
    },
    {
        "line": 23,
        "fullcodeline": "ProtocolDefined = true;"
    },
    {
        "line": 108,
        "fullcodeline": "for (Integer Index = 0; Index < StoredSessions->CountIncludingHidden; Index++)"
    },
    {
        "line": 144,
        "fullcodeline": "while (!AnsiSameText(DecodeUrlChars(Url.SubString(1, P)), Data->Name))"
    },
    {
        "line": 159,
        "fullcodeline": "if (MaskedUrl != NULL)"
    },
    {
        "line": 171,
        "fullcodeline": "Name = L\"\";"
    },
    {
        "line": 173,
        "fullcodeline": "int PSlash = Url.Pos(L\"/\");"
    },
    {
        "line": 179,
        "fullcodeline": "UnicodeString ConnectInfo = Url.SubString(1, PSlash - 1);"
    },
    {
        "line": 181,
        "fullcodeline": "int P = ConnectInfo.LastDelimiter(L\"@\");"
    },
    {
        "line": 196,
        "fullcodeline": "UnicodeString OrigHostInfo = HostInfo;"
    },
    {
        "line": 227,
        "fullcodeline": "UnicodeString UserInfoWithoutConnectionParams = CutToChar(UserInfo, UrlParamSeparator, false);"
    },
    {
        "line": 228,
        "fullcodeline": "UnicodeString ConnectionParams = UserInfo;"
    },
    {
        "line": 229,
        "fullcodeline": "UserInfo = UserInfoWithoutConnectionParams;"
    },
    {
        "line": 231,
        "fullcodeline": "std::unique_ptr<TStrings> RawSettings(new TStringList());"
    },
    {
        "line": 263,
        "fullcodeline": "bool HasPassword = (UserInfo.Pos(L':') > 0);"
    },
    {
        "line": 264,
        "fullcodeline": "UnicodeString RawUserName = CutToChar(UserInfo, L':', false);"
    },
    {
        "line": 265,
        "fullcodeline": "UserName = DecodeUrlChars(RawUserName);"
    },
    {
        "line": 267,
        "fullcodeline": "Password = DecodeUrlChars(UserInfo);"
    },
    {
        "line": 273,
        "fullcodeline": "UnicodeString RemoteDirectoryWithSessionParams = Url.SubString(PSlash, Url.Length() - PSlash + 1);"
    },
    {
        "line": 274,
        "fullcodeline": "ARemoteDirectory = CutToChar(RemoteDirectoryWithSessionParams, UrlParamSeparator, false);"
    },
    {
        "line": 275,
        "fullcodeline": "UnicodeString SessionParams = RemoteDirectoryWithSessionParams;"
    },
    {
        "line": 307,
        "fullcodeline": "if ((ARemoteDirectory[ARemoteDirectory.Length()] != L'/') &&"
    },
    {
        "line": 323,
        "fullcodeline": "CopyData(StoredSessions->DefaultSettings);"
    },
    {
        "line": 376,
        "fullcodeline": "if (!PortNumberDefined && Enabled)"
    },
    {
        "line": 386,
        "fullcodeline": "if (!PortNumberDefined && Enabled)"
    },
    {
        "line": 396,
        "fullcodeline": "Options->FindSwitch(L\"explicit\") ? L\"explicit\" : L\"explicittls\";"
    },
    {
        "line": 399,
        "fullcodeline": "if (!PortNumberDefined && Enabled)"
    },
    {
        "line": 407,
        "fullcodeline": "if (Options->FindSwitch(RawSettingsOption, RawSettings.get()))"
    },
    {
        "line": 110,
        "fullcodeline": "TSessionData * AData = (TSessionData *)StoredSessions->Items[Index];"
    },
    {
        "line": 146,
        "fullcodeline": "P++;"
    },
    {
        "line": 147,
        "fullcodeline": "DebugAssert(P <= Url.Length());"
    },
    {
        "line": 153,
        "fullcodeline": "Data->Remove();"
    },
    {
        "line": 154,
        "fullcodeline": "StoredSessions->Remove(Data);"
    },
    {
        "line": 156,
        "fullcodeline": "StoredSessions->Save(false, false);"
    },
    {
        "line": 161,
        "fullcodeline": "(*MaskedUrl) += Url;"
    },
    {
        "line": 167,
        "fullcodeline": "if (StoredSessions != NULL)"
    },
    {
        "line": 174,
        "fullcodeline": "if (PSlash == 0)"
    },
    {
        "line": 186,
        "fullcodeline": "if (P > 0)"
    },
    {
        "line": 197,
        "fullcodeline": "if ((HostInfo.Length() >= 2) && (HostInfo[1] == L'[') && ((P = HostInfo.Pos(L\"]\")) > 0))"
    },
    {
        "line": 212,
        "fullcodeline": "if (!HostInfo.IsEmpty())"
    },
    {
        "line": 233,
        "fullcodeline": "while (!ConnectionParams.IsEmpty())"
    },
    {
        "line": 258,
        "fullcodeline": "if (RawSettings->Count > 0) // optimization"
    },
    {
        "line": 268,
        "fullcodeline": "if (HasPassword && Password.IsEmpty())"
    },
    {
        "line": 280,
        "fullcodeline": "while (!SessionParams.IsEmpty())"
    },
    {
        "line": 290,
        "fullcodeline": "if (MaskedUrl != NULL)"
    },
    {
        "line": 308,
        "fullcodeline": "(FileName != NULL))"
    },
    {
        "line": 310,
        "fullcodeline": "*FileName = DecodeUrlChars(UnixExtractFileName(ARemoteDirectory));"
    },
    {
        "line": 311,
        "fullcodeline": "ARemoteDirectory = UnixExtractFilePath(ARemoteDirectory);"
    },
    {
        "line": 378,
        "fullcodeline": "PortNumber = FtpsImplicitPortNumber;"
    },
    {
        "line": 388,
        "fullcodeline": "PortNumber = FtpPortNumber;"
    },
    {
        "line": 401,
        "fullcodeline": "PortNumber = FtpPortNumber;"
    },
    {
        "line": 409,
        "fullcodeline": "ApplyRawSettings(RawSettings.get());"
    },
    {
        "line": 25,
        "fullcodeline": "else if (IsProtocolUrl(Url, FtpProtocol, ProtocolLen))"
    },
    {
        "line": 111,
        "fullcodeline": "if (!AData->IsWorkspace)"
    },
    {
        "line": 169,
        "fullcodeline": "CopyData(StoredSessions->DefaultSettings);"
    },
    {
        "line": 176,
        "fullcodeline": "PSlash = Url.Length() + 1;"
    },
    {
        "line": 188,
        "fullcodeline": "UserInfo = ConnectInfo.SubString(1, P - 1);"
    },
    {
        "line": 189,
        "fullcodeline": "HostInfo = ConnectInfo.SubString(P + 1, ConnectInfo.Length() - P);"
    },
    {
        "line": 199,
        "fullcodeline": "HostName = HostInfo.SubString(2, P - 2);"
    },
    {
        "line": 200,
        "fullcodeline": "HostInfo.Delete(1, P);"
    },
    {
        "line": 214,
        "fullcodeline": "PortNumber = StrToIntDef(DecodeUrlChars(HostInfo), -1);"
    },
    {
        "line": 215,
        "fullcodeline": "PortNumberDefined = true;"
    },
    {
        "line": 224,
        "fullcodeline": "Ftps = AFtps;"
    },
    {
        "line": 235,
        "fullcodeline": "UnicodeString ConnectionParam = CutToChar(ConnectionParams, UrlParamSeparator, false);"
    },
    {
        "line": 236,
        "fullcodeline": "UnicodeString ConnectionParamName = CutToChar(ConnectionParam, UrlParamValueSeparator, false);"
    },
    {
        "line": 260,
        "fullcodeline": "ApplyRawSettings(RawSettings.get());"
    },
    {
        "line": 270,
        "fullcodeline": "Password = EmptyString;"
    },
    {
        "line": 282,
        "fullcodeline": "UnicodeString SessionParam = CutToChar(SessionParams, UrlParamSeparator, false);"
    },
    {
        "line": 283,
        "fullcodeline": "UnicodeString SessionParamName = CutToChar(SessionParam, UrlParamValueSeparator, false);"
    },
    {
        "line": 292,
        "fullcodeline": "(*MaskedUrl) += RawUserName;"
    },
    {
        "line": 301,
        "fullcodeline": "(*MaskedUrl) += OrigHostInfo + ARemoteDirectory;"
    },
    {
        "line": 27,
        "fullcodeline": "AFSProtocol = fsFTP;"
    },
    {
        "line": 28,
        "fullcodeline": "Ftps = ftpsNone;"
    },
    {
        "line": 29,
        "fullcodeline": "APortNumber = FtpPortNumber;"
    },
    {
        "line": 30,
        "fullcodeline": "MoveStr(Url, MaskedUrl, ProtocolLen);"
    },
    {
        "line": 31,
        "fullcodeline": "ProtocolDefined = true;"
    },
    {
        "line": 113,
        "fullcodeline": "bool Match = false;"
    },
    {
        "line": 193,
        "fullcodeline": "HostInfo = ConnectInfo;"
    },
    {
        "line": 201,
        "fullcodeline": "if (!HostInfo.IsEmpty() && (HostInfo[1] == L':'))"
    },
    {
        "line": 208,
        "fullcodeline": "HostName = DecodeUrlChars(CutToChar(HostInfo, L':', true));"
    },
    {
        "line": 237,
        "fullcodeline": "if (SameText(ConnectionParamName, UrlHostKeyParamName))"
    },
    {
        "line": 284,
        "fullcodeline": "if (SameText(SessionParamName, UrlSaveParamName))"
    },
    {
        "line": 297,
        "fullcodeline": "if (!RawUserName.IsEmpty() || HasPassword)"
    },
    {
        "line": 116,
        "fullcodeline": "if ((AData->Name.Length() == DecodedUrl.Length()) &&"
    },
    {
        "line": 203,
        "fullcodeline": "HostInfo.Delete(1, 1);"
    },
    {
        "line": 239,
        "fullcodeline": "HostKey = DecodeUrlChars(ConnectionParam);"
    },
    {
        "line": 240,
        "fullcodeline": "FOverrideCachedHostKey = false;"
    },
    {
        "line": 286,
        "fullcodeline": "FSaveOnly = (StrToIntDef(SessionParam, 1) != 0);"
    },
    {
        "line": 295,
        "fullcodeline": "(*MaskedUrl) += L\":\" + PasswordMask;"
    },
    {
        "line": 299,
        "fullcodeline": "(*MaskedUrl) += L\"@\";"
    },
    {
        "line": 33,
        "fullcodeline": "else if (IsProtocolUrl(Url, FtpsProtocol, ProtocolLen))"
    },
    {
        "line": 117,
        "fullcodeline": "SameText(AData->Name, DecodedUrl))"
    },
    {
        "line": 119,
        "fullcodeline": "Match = true;"
    },
    {
        "line": 131,
        "fullcodeline": "Data = AData;"
    },
    {
        "line": 219,
        "fullcodeline": "PortNumber = APortNumber;"
    },
    {
        "line": 35,
        "fullcodeline": "AFSProtocol = fsFTP;"
    },
    {
        "line": 36,
        "fullcodeline": "AFtps = ftpsImplicit;"
    },
    {
        "line": 37,
        "fullcodeline": "APortNumber = FtpsImplicitPortNumber;"
    },
    {
        "line": 38,
        "fullcodeline": "MoveStr(Url, MaskedUrl, ProtocolLen);"
    },
    {
        "line": 39,
        "fullcodeline": "ProtocolDefined = true;"
    },
    {
        "line": 242,
        "fullcodeline": "else if (StartsText(UrlRawSettingsParamNamePrefix, ConnectionParamName))"
    },
    {
        "line": 121,
        "fullcodeline": "else if ((AData->Name.Length() < DecodedUrl.Length()) &&"
    },
    {
        "line": 244,
        "fullcodeline": "UnicodeString AName = RightStr(ConnectionParamName, ConnectionParamName.Length() - UrlRawSettingsParamNamePrefix.Length());"
    },
    {
        "line": 245,
        "fullcodeline": "AName = DecodeUrlChars(AName);"
    },
    {
        "line": 246,
        "fullcodeline": "UnicodeString Value = DecodeUrlChars(ConnectionParam);"
    },
    {
        "line": 41,
        "fullcodeline": "else if (IsProtocolUrl(Url, FtpesProtocol, ProtocolLen))"
    },
    {
        "line": 124,
        "fullcodeline": "(StrLIComp(AData->Name.c_str(), DecodedUrl.c_str(), AData->Name.Length()) == 0))"
    },
    {
        "line": 126,
        "fullcodeline": "Match = true;"
    },
    {
        "line": 247,
        "fullcodeline": "if (SameText(AName, L\"Name\"))"
    },
    {
        "line": 43,
        "fullcodeline": "AFSProtocol = fsFTP;"
    },
    {
        "line": 44,
        "fullcodeline": "AFtps = ftpsExplicitTls;"
    },
    {
        "line": 45,
        "fullcodeline": "APortNumber = FtpPortNumber;"
    },
    {
        "line": 46,
        "fullcodeline": "MoveStr(Url, MaskedUrl, ProtocolLen);"
    },
    {
        "line": 47,
        "fullcodeline": "ProtocolDefined = true;"
    },
    {
        "line": 122,
        "fullcodeline": "(DecodedUrl[AData->Name.Length() + 1] == L'/') &&"
    },
    {
        "line": 249,
        "fullcodeline": "Name = Value;"
    },
    {
        "line": 253,
        "fullcodeline": "RawSettings->Values[AName] = Value;"
    },
    {
        "line": 49,
        "fullcodeline": "else if (IsProtocolUrl(Url, WebDAVProtocol, ProtocolLen) ||"
    },
    {
        "line": 50,
        "fullcodeline": "IsProtocolUrl(Url, HttpProtocol, ProtocolLen))"
    },
    {
        "line": 52,
        "fullcodeline": "AFSProtocol = fsWebDAV;"
    },
    {
        "line": 53,
        "fullcodeline": "AFtps = ftpsNone;"
    },
    {
        "line": 54,
        "fullcodeline": "APortNumber = HTTPPortNumber;"
    },
    {
        "line": 55,
        "fullcodeline": "MoveStr(Url, MaskedUrl, ProtocolLen);"
    },
    {
        "line": 56,
        "fullcodeline": "ProtocolDefined = true;"
    },
    {
        "line": 58,
        "fullcodeline": "else if (IsProtocolUrl(Url, WebDAVSProtocol, ProtocolLen) ||"
    },
    {
        "line": 59,
        "fullcodeline": "IsProtocolUrl(Url, HttpsProtocol, ProtocolLen))"
    },
    {
        "line": 61,
        "fullcodeline": "AFSProtocol = fsWebDAV;"
    },
    {
        "line": 62,
        "fullcodeline": "AFtps = ftpsImplicit;"
    },
    {
        "line": 63,
        "fullcodeline": "APortNumber = HTTPSPortNumber;"
    },
    {
        "line": 64,
        "fullcodeline": "MoveStr(Url, MaskedUrl, ProtocolLen);"
    },
    {
        "line": 65,
        "fullcodeline": "ProtocolDefined = true;"
    },
    {
        "line": 67,
        "fullcodeline": "else if (IsProtocolUrl(Url, S3Protocol, ProtocolLen))"
    },
    {
        "line": 69,
        "fullcodeline": "AFSProtocol = fsS3;"
    },
    {
        "line": 70,
        "fullcodeline": "AFtps = ftpsImplicit;"
    },
    {
        "line": 71,
        "fullcodeline": "APortNumber = HTTPSPortNumber;"
    },
    {
        "line": 72,
        "fullcodeline": "MoveStr(Url, MaskedUrl, ProtocolLen);"
    },
    {
        "line": 73,
        "fullcodeline": "ProtocolDefined = true;"
    },
    {
        "line": 75,
        "fullcodeline": "else if (IsProtocolUrl(Url, SshProtocol, ProtocolLen))"
    },
    {
        "line": 79,
        "fullcodeline": "AFSProtocol = fsSFTPonly;"
    },
    {
        "line": 80,
        "fullcodeline": "PuttyProtocol = PuttySshProtocol;"
    },
    {
        "line": 81,
        "fullcodeline": "APortNumber = SshPortNumber;"
    },
    {
        "line": 82,
        "fullcodeline": "MoveStr(Url, MaskedUrl, ProtocolLen);"
    },
    {
        "line": 83,
        "fullcodeline": "ProtocolDefined = true;"
    }
]