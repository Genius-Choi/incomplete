[
    {
        "line": 6,
        "fullcodeline": "PortNumber = Storage->ReadInteger(L\"PortNumber\", PortNumber);"
    },
    {
        "line": 7,
        "fullcodeline": "UserName = Storage->ReadString(L\"UserName\", UserName);"
    },
    {
        "line": 9,
        "fullcodeline": "HostName = Storage->ReadString(L\"HostName\", HostName);"
    },
    {
        "line": 24,
        "fullcodeline": "HostKey = Storage->ReadString(L\"SshHostKey\", HostKey); // probably never used"
    },
    {
        "line": 25,
        "fullcodeline": "Note = Storage->ReadString(L\"Note\", Note);"
    },
    {
        "line": 27,
        "fullcodeline": "int PingIntervalSecs = Storage->ReadInteger(L\"PingIntervalSecs\", -1);"
    },
    {
        "line": 32,
        "fullcodeline": "PingInterval ="
    },
    {
        "line": 39,
        "fullcodeline": "PingType = static_cast<TPingType>(Storage->ReadInteger(L\"PingType\", PingType));"
    },
    {
        "line": 40,
        "fullcodeline": "Timeout = Storage->ReadInteger(L\"Timeout\", Timeout);"
    },
    {
        "line": 41,
        "fullcodeline": "TryAgent = Storage->ReadBool(L\"TryAgent\", TryAgent);"
    },
    {
        "line": 42,
        "fullcodeline": "AgentFwd = Storage->ReadBool(L\"AgentFwd\", AgentFwd);"
    },
    {
        "line": 43,
        "fullcodeline": "AuthTIS = Storage->ReadBool(L\"AuthTIS\", AuthTIS);"
    },
    {
        "line": 44,
        "fullcodeline": "AuthKI = Storage->ReadBool(L\"AuthKI\", AuthKI);"
    },
    {
        "line": 45,
        "fullcodeline": "AuthKIPassword = Storage->ReadBool(L\"AuthKIPassword\", AuthKIPassword);"
    },
    {
        "line": 50,
        "fullcodeline": "AuthGSSAPI = Storage->ReadBool(L\"AuthGSSAPI\", Storage->ReadBool(L\"AuthSSPI\", AuthGSSAPI));"
    },
    {
        "line": 51,
        "fullcodeline": "GSSAPIFwdTGT = Storage->ReadBool(L\"GSSAPIFwdTGT\", Storage->ReadBool(L\"GssapiFwd\", Storage->ReadBool(L\"SSPIFwdTGT\", GSSAPIFwdTGT)));"
    },
    {
        "line": 54,
        "fullcodeline": "LogicalHostName = Storage->ReadString(L\"LogicalHostName\", Storage->ReadString(L\"GSSAPIServerRealm\", Storage->ReadString(L\"KerbPrincipal\", LogicalHostName)));"
    },
    {
        "line": 55,
        "fullcodeline": "ChangeUsername = Storage->ReadBool(L\"ChangeUsername\", ChangeUsername);"
    },
    {
        "line": 56,
        "fullcodeline": "Compression = Storage->ReadBool(L\"Compression\", Compression);"
    },
    {
        "line": 57,
        "fullcodeline": "TSshProt ASshProt = (TSshProt)Storage->ReadInteger(L\"SshProt\", SshProt);"
    },
    {
        "line": 67,
        "fullcodeline": "SshProt = ASshProt;"
    },
    {
        "line": 68,
        "fullcodeline": "Ssh2DES = Storage->ReadBool(L\"Ssh2DES\", Ssh2DES);"
    },
    {
        "line": 69,
        "fullcodeline": "SshNoUserAuth = Storage->ReadBool(L\"SshNoUserAuth\", SshNoUserAuth);"
    },
    {
        "line": 70,
        "fullcodeline": "CipherList = Storage->ReadString(L\"Cipher\", CipherList);"
    },
    {
        "line": 71,
        "fullcodeline": "KexList = Storage->ReadString(L\"KEX\", KexList);"
    },
    {
        "line": 72,
        "fullcodeline": "HostKeyList = Storage->ReadString(L\"HostKey\", HostKeyList);"
    },
    {
        "line": 73,
        "fullcodeline": "GssLibList = Storage->ReadString(L\"GSSLibs\", GssLibList);"
    },
    {
        "line": 74,
        "fullcodeline": "GssLibCustom = Storage->ReadString(L\"GSSCustom\", GssLibCustom);"
    },
    {
        "line": 75,
        "fullcodeline": "PublicKeyFile = Storage->ReadString(L\"PublicKeyFile\", PublicKeyFile);"
    },
    {
        "line": 76,
        "fullcodeline": "AddressFamily = static_cast<TAddressFamily>"
    },
    {
        "line": 78,
        "fullcodeline": "RekeyData = Storage->ReadString(L\"RekeyBytes\", RekeyData);"
    },
    {
        "line": 79,
        "fullcodeline": "RekeyTime = Storage->ReadInteger(L\"RekeyTime\", RekeyTime);"
    },
    {
        "line": 81,
        "fullcodeline": "FSProtocol = (TFSProtocol)Storage->ReadInteger(L\"FSProtocol\", FSProtocol);"
    },
    {
        "line": 82,
        "fullcodeline": "LocalDirectory = Storage->ReadString(L\"LocalDirectory\", LocalDirectory);"
    },
    {
        "line": 83,
        "fullcodeline": "RemoteDirectory = Storage->ReadString(L\"RemoteDirectory\", RemoteDirectory);"
    },
    {
        "line": 84,
        "fullcodeline": "SynchronizeBrowsing = Storage->ReadBool(L\"SynchronizeBrowsing\", SynchronizeBrowsing);"
    },
    {
        "line": 85,
        "fullcodeline": "UpdateDirectories = Storage->ReadBool(L\"UpdateDirectories\", UpdateDirectories);"
    },
    {
        "line": 86,
        "fullcodeline": "CacheDirectories = Storage->ReadBool(L\"CacheDirectories\", CacheDirectories);"
    },
    {
        "line": 87,
        "fullcodeline": "CacheDirectoryChanges = Storage->ReadBool(L\"CacheDirectoryChanges\", CacheDirectoryChanges);"
    },
    {
        "line": 88,
        "fullcodeline": "PreserveDirectoryChanges = Storage->ReadBool(L\"PreserveDirectoryChanges\", PreserveDirectoryChanges);"
    },
    {
        "line": 90,
        "fullcodeline": "ResolveSymlinks = Storage->ReadBool(L\"ResolveSymlinks\", ResolveSymlinks);"
    },
    {
        "line": 91,
        "fullcodeline": "FollowDirectorySymlinks = Storage->ReadBool(L\"FollowDirectorySymlinks\", FollowDirectorySymlinks);"
    },
    {
        "line": 92,
        "fullcodeline": "DSTMode = (TDSTMode)Storage->ReadInteger(L\"ConsiderDST\", DSTMode);"
    },
    {
        "line": 93,
        "fullcodeline": "LockInHome = Storage->ReadBool(L\"LockInHome\", LockInHome);"
    },
    {
        "line": 94,
        "fullcodeline": "Special = Storage->ReadBool(L\"Special\", Special);"
    },
    {
        "line": 95,
        "fullcodeline": "Shell = Storage->ReadString(L\"Shell\", Shell);"
    },
    {
        "line": 96,
        "fullcodeline": "ClearAliases = Storage->ReadBool(L\"ClearAliases\", ClearAliases);"
    },
    {
        "line": 97,
        "fullcodeline": "UnsetNationalVars = Storage->ReadBool(L\"UnsetNationalVars\", UnsetNationalVars);"
    },
    {
        "line": 98,
        "fullcodeline": "ListingCommand = Storage->ReadString(L\"ListingCommand\","
    },
    {
        "line": 100,
        "fullcodeline": "IgnoreLsWarnings = Storage->ReadBool(L\"IgnoreLsWarnings\", IgnoreLsWarnings);"
    },
    {
        "line": 101,
        "fullcodeline": "SCPLsFullTime = TAutoSwitch(Storage->ReadInteger(L\"SCPLsFullTime\", SCPLsFullTime));"
    },
    {
        "line": 102,
        "fullcodeline": "Scp1Compatibility = Storage->ReadBool(L\"Scp1Compatibility\", Scp1Compatibility);"
    },
    {
        "line": 103,
        "fullcodeline": "TimeDifference = Storage->ReadFloat(L\"TimeDifference\", TimeDifference);"
    },
    {
        "line": 104,
        "fullcodeline": "TimeDifferenceAuto = Storage->ReadBool(L\"TimeDifferenceAuto\", (TimeDifference == TDateTime()));"
    },
    {
        "line": 105,
        "fullcodeline": "DeleteToRecycleBin = Storage->ReadBool(L\"DeleteToRecycleBin\", DeleteToRecycleBin);"
    },
    {
        "line": 106,
        "fullcodeline": "OverwrittenToRecycleBin = Storage->ReadBool(L\"OverwrittenToRecycleBin\", OverwrittenToRecycleBin);"
    },
    {
        "line": 107,
        "fullcodeline": "RecycleBinPath = Storage->ReadString(L\"RecycleBinPath\", RecycleBinPath);"
    },
    {
        "line": 108,
        "fullcodeline": "PostLoginCommands = Storage->ReadString(L\"PostLoginCommands\", PostLoginCommands);"
    },
    {
        "line": 110,
        "fullcodeline": "ReturnVar = Storage->ReadString(L\"ReturnVar\", ReturnVar);"
    },
    {
        "line": 111,
        "fullcodeline": "ExitCode1IsError = Storage->ReadBool(L\"ExitCode1IsError\", ExitCode1IsError);"
    },
    {
        "line": 112,
        "fullcodeline": "LookupUserGroups = TAutoSwitch(Storage->ReadInteger(L\"LookupUserGroups2\", LookupUserGroups));"
    },
    {
        "line": 113,
        "fullcodeline": "EOLType = (TEOLType)Storage->ReadInteger(L\"EOLType\", EOLType);"
    },
    {
        "line": 114,
        "fullcodeline": "TrimVMSVersions = Storage->ReadBool(L\"TrimVMSVersions\", TrimVMSVersions);"
    },
    {
        "line": 115,
        "fullcodeline": "NotUtf = TAutoSwitch(Storage->ReadInteger(L\"Utf\", Storage->ReadInteger(L\"SFTPUtfBug\", NotUtf)));"
    },
    {
        "line": 116,
        "fullcodeline": "InternalEditorEncoding = Storage->ReadInteger(L\"InternalEditorEncoding\", InternalEditorEncoding);"
    },
    {
        "line": 118,
        "fullcodeline": "S3DefaultRegion = Storage->ReadString(L\"S3DefaultRegion\", S3DefaultRegion);"
    },
    {
        "line": 119,
        "fullcodeline": "S3UrlStyle = (TS3UrlStyle)Storage->ReadInteger(L\"S3UrlStyle\", S3UrlStyle);"
    },
    {
        "line": 126,
        "fullcodeline": "SendBuf = Storage->ReadInteger(L\"SendBuf\", Storage->ReadInteger(\"SshSendBuf\", SendBuf));"
    },
    {
        "line": 127,
        "fullcodeline": "SourceAddress = Storage->ReadString(L\"SourceAddress\", SourceAddress);"
    },
    {
        "line": 128,
        "fullcodeline": "SshSimple = Storage->ReadBool(L\"SshSimple\", SshSimple);"
    },
    {
        "line": 130,
        "fullcodeline": "ProxyMethod = (TProxyMethod)Storage->ReadInteger(L\"ProxyMethod\", ProxyMethod);"
    },
    {
        "line": 131,
        "fullcodeline": "ProxyHost = Storage->ReadString(L\"ProxyHost\", ProxyHost);"
    },
    {
        "line": 132,
        "fullcodeline": "ProxyPort = Storage->ReadInteger(L\"ProxyPort\", ProxyPort);"
    },
    {
        "line": 133,
        "fullcodeline": "ProxyUsername = Storage->ReadString(L\"ProxyUsername\", ProxyUsername);"
    },
    {
        "line": 153,
        "fullcodeline": "ProxyDNS = TAutoSwitch((Storage->ReadInteger(L\"ProxyDNS\", (ProxyDNS + 2) % 3) + 1) % 3);"
    },
    {
        "line": 154,
        "fullcodeline": "ProxyLocalhost = Storage->ReadBool(L\"ProxyLocalhost\", ProxyLocalhost);"
    },
    {
        "line": 159,
        "fullcodeline": "READ_BUG(Ignore1);"
    },
    {
        "line": 160,
        "fullcodeline": "READ_BUG(PlainPW1);"
    },
    {
        "line": 161,
        "fullcodeline": "READ_BUG(RSA1);"
    },
    {
        "line": 162,
        "fullcodeline": "READ_BUG(HMAC2);"
    },
    {
        "line": 163,
        "fullcodeline": "READ_BUG(DeriveKey2);"
    },
    {
        "line": 164,
        "fullcodeline": "READ_BUG(RSAPad2);"
    },
    {
        "line": 165,
        "fullcodeline": "READ_BUG(PKSessID2);"
    },
    {
        "line": 166,
        "fullcodeline": "READ_BUG(Rekey2);"
    },
    {
        "line": 167,
        "fullcodeline": "READ_BUG(MaxPkt2);"
    },
    {
        "line": 168,
        "fullcodeline": "READ_BUG(Ignore2);"
    },
    {
        "line": 169,
        "fullcodeline": "READ_BUG(OldGex2);"
    },
    {
        "line": 170,
        "fullcodeline": "READ_BUG(WinAdj);"
    },
    {
        "line": 171,
        "fullcodeline": "READ_BUG(ChanReq);"
    },
    {
        "line": 180,
        "fullcodeline": "SftpServer = Storage->ReadString(L\"SftpServer\", SftpServer);"
    },
    {
        "line": 183,
        "fullcodeline": "READ_SFTP_BUG(Symlink);"
    },
    {
        "line": 184,
        "fullcodeline": "READ_SFTP_BUG(SignedTS);"
    },
    {
        "line": 187,
        "fullcodeline": "SFTPMaxVersion = Storage->ReadInteger(L\"SFTPMaxVersion\", SFTPMaxVersion);"
    },
    {
        "line": 188,
        "fullcodeline": "SFTPMaxPacketSize = Storage->ReadInteger(L\"SFTPMaxPacketSize\", SFTPMaxPacketSize);"
    },
    {
        "line": 189,
        "fullcodeline": "SFTPDownloadQueue = Storage->ReadInteger(L\"SFTPDownloadQueue\", SFTPDownloadQueue);"
    },
    {
        "line": 190,
        "fullcodeline": "SFTPUploadQueue = Storage->ReadInteger(L\"SFTPUploadQueue\", SFTPUploadQueue);"
    },
    {
        "line": 191,
        "fullcodeline": "SFTPListingQueue = Storage->ReadInteger(L\"SFTPListingQueue\", SFTPListingQueue);"
    },
    {
        "line": 193,
        "fullcodeline": "Color = Storage->ReadInteger(L\"Color\", Color);"
    },
    {
        "line": 195,
        "fullcodeline": "PuttyProtocol = Storage->ReadString(L\"Protocol\", PuttyProtocol);"
    },
    {
        "line": 197,
        "fullcodeline": "Tunnel = Storage->ReadBool(L\"Tunnel\", Tunnel);"
    },
    {
        "line": 198,
        "fullcodeline": "TunnelPortNumber = Storage->ReadInteger(L\"TunnelPortNumber\", TunnelPortNumber);"
    },
    {
        "line": 199,
        "fullcodeline": "TunnelUserName = Storage->ReadString(L\"TunnelUserName\", TunnelUserName);"
    },
    {
        "line": 202,
        "fullcodeline": "TunnelHostName = Storage->ReadString(L\"TunnelHostName\", TunnelHostName);"
    },
    {
        "line": 216,
        "fullcodeline": "TunnelPublicKeyFile = Storage->ReadString(L\"TunnelPublicKeyFile\", TunnelPublicKeyFile);"
    },
    {
        "line": 217,
        "fullcodeline": "TunnelLocalPortNumber = Storage->ReadInteger(L\"TunnelLocalPortNumber\", TunnelLocalPortNumber);"
    },
    {
        "line": 218,
        "fullcodeline": "TunnelHostKey = Storage->ReadString(L\"TunnelHostKey\", TunnelHostKey);"
    },
    {
        "line": 221,
        "fullcodeline": "FtpPasvMode = Storage->ReadBool(L\"FtpPasvMode\", FtpPasvMode);"
    },
    {
        "line": 222,
        "fullcodeline": "FtpForcePasvIp = TAutoSwitch(Storage->ReadInteger(L\"FtpForcePasvIp2\", FtpForcePasvIp));"
    },
    {
        "line": 223,
        "fullcodeline": "FtpUseMlsd = TAutoSwitch(Storage->ReadInteger(L\"FtpUseMlsd\", FtpUseMlsd));"
    },
    {
        "line": 224,
        "fullcodeline": "FtpAccount = Storage->ReadString(L\"FtpAccount\", FtpAccount);"
    },
    {
        "line": 225,
        "fullcodeline": "FtpPingInterval = Storage->ReadInteger(L\"FtpPingInterval\", FtpPingInterval);"
    },
    {
        "line": 226,
        "fullcodeline": "FtpPingType = static_cast<TPingType>(Storage->ReadInteger(L\"FtpPingType\", FtpPingType));"
    },
    {
        "line": 227,
        "fullcodeline": "FtpTransferActiveImmediately = static_cast<TAutoSwitch>(Storage->ReadInteger(L\"FtpTransferActiveImmediately2\", FtpTransferActiveImmediately));"
    },
    {
        "line": 228,
        "fullcodeline": "Ftps = static_cast<TFtps>(Storage->ReadInteger(L\"Ftps\", Ftps));"
    },
    {
        "line": 229,
        "fullcodeline": "FtpListAll = TAutoSwitch(Storage->ReadInteger(L\"FtpListAll\", FtpListAll));"
    },
    {
        "line": 230,
        "fullcodeline": "FtpHost = TAutoSwitch(Storage->ReadInteger(L\"FtpHost\", FtpHost));"
    },
    {
        "line": 231,
        "fullcodeline": "FtpDeleteFromCwd = TAutoSwitch(Storage->ReadInteger(L\"FtpDeleteFromCwd\", FtpDeleteFromCwd));"
    },
    {
        "line": 232,
        "fullcodeline": "SslSessionReuse = Storage->ReadBool(L\"SslSessionReuse\", SslSessionReuse);"
    },
    {
        "line": 233,
        "fullcodeline": "TlsCertificateFile = Storage->ReadString(L\"TlsCertificateFile\", TlsCertificateFile);"
    },
    {
        "line": 235,
        "fullcodeline": "FtpProxyLogonType = Storage->ReadInteger(L\"FtpProxyLogonType\", FtpProxyLogonType);"
    },
    {
        "line": 237,
        "fullcodeline": "MinTlsVersion = static_cast<TTlsVersion>(Storage->ReadInteger(L\"MinTlsVersion\", MinTlsVersion));"
    },
    {
        "line": 238,
        "fullcodeline": "MaxTlsVersion = static_cast<TTlsVersion>(Storage->ReadInteger(L\"MaxTlsVersion\", MaxTlsVersion));"
    },
    {
        "line": 251,
        "fullcodeline": "IsWorkspace = Storage->ReadBool(L\"IsWorkspace\", IsWorkspace);"
    },
    {
        "line": 252,
        "fullcodeline": "Link = Storage->ReadString(L\"Link\", Link);"
    },
    {
        "line": 253,
        "fullcodeline": "NameOverride = Storage->ReadString(L\"NameOverride\", NameOverride);"
    },
    {
        "line": 255,
        "fullcodeline": "PuttySettings = Storage->ReadString(L\"PuttySettings\", PuttySettings);"
    },
    {
        "line": 257,
        "fullcodeline": "CustomParam1 = Storage->ReadString(L\"CustomParam1\", CustomParam1);"
    },
    {
        "line": 258,
        "fullcodeline": "CustomParam2 = Storage->ReadString(L\"CustomParam2\", CustomParam2);"
    },
    {
        "line": 28,
        "fullcodeline": "if (PingIntervalSecs < 0)"
    },
    {
        "line": 33,
        "fullcodeline": "Storage->ReadInteger(L\"PingInterval\", PingInterval/SecsPerMin)*SecsPerMin +"
    },
    {
        "line": 35,
        "fullcodeline": "if (PingInterval == 0)"
    },
    {
        "line": 59,
        "fullcodeline": "if (ASshProt == ssh2deprecated)"
    },
    {
        "line": 122,
        "fullcodeline": "if (!PuttyImport)"
    },
    {
        "line": 134,
        "fullcodeline": "if (Storage->ValueExists(L\"ProxyPassword\"))"
    },
    {
        "line": 145,
        "fullcodeline": "if (ProxyMethod == pmCmd)"
    },
    {
        "line": 174,
        "fullcodeline": "if ((Bug[sbHMAC2] == asAuto) &&"
    },
    {
        "line": 203,
        "fullcodeline": "if (!Configuration->DisablePasswordStoring)"
    },
    {
        "line": 240,
        "fullcodeline": "if (Storage->ValueExists(L\"EncryptKeyPlain\"))"
    },
    {
        "line": 30,
        "fullcodeline": "PingIntervalSecs = Storage->ReadInteger(L\"PingIntervalSec\", PingInterval%SecsPerMin);"
    },
    {
        "line": 37,
        "fullcodeline": "PingInterval = 30;"
    },
    {
        "line": 61,
        "fullcodeline": "ASshProt = ssh2only;"
    },
    {
        "line": 77,
        "fullcodeline": "(Storage->ReadInteger(L\"AddressFamily\", AddressFamily));"
    },
    {
        "line": 99,
        "fullcodeline": "Storage->ReadBool(L\"AliasGroupList\", false) ? UnicodeString(L\"ls -gla\") : ListingCommand);"
    },
    {
        "line": 124,
        "fullcodeline": "TcpNoDelay = Storage->ReadBool(L\"TcpNoDelay\", TcpNoDelay);"
    },
    {
        "line": 137,
        "fullcodeline": "ProxyPassword = Storage->ReadString(L\"ProxyPassword\", L\"\");"
    },
    {
        "line": 147,
        "fullcodeline": "ProxyLocalCommand = Storage->ReadStringRaw(L\"ProxyTelnetCommand\", ProxyLocalCommand);"
    },
    {
        "line": 175,
        "fullcodeline": "Storage->ReadBool(L\"BuggyMAC\", false))"
    },
    {
        "line": 177,
        "fullcodeline": "Bug[sbHMAC2] = asOn;"
    },
    {
        "line": 242,
        "fullcodeline": "EncryptKey = Storage->ReadString(L\"EncryptKeyPlain\", EncryptKey);"
    },
    {
        "line": 243,
        "fullcodeline": "RewritePassword = true;"
    },
    {
        "line": 13,
        "fullcodeline": "if (Storage->ValueExists(L\"PasswordPlain\"))"
    },
    {
        "line": 142,
        "fullcodeline": "RawByteString AProxyPassword = Storage->ReadStringAsBinaryData(L\"ProxyPasswordEnc\", FProxyPassword);"
    },
    {
        "line": 143,
        "fullcodeline": "SET_SESSION_PROPERTY_FROM(ProxyPassword, AProxyPassword);"
    },
    {
        "line": 151,
        "fullcodeline": "ProxyTelnetCommand = Storage->ReadStringRaw(L\"ProxyTelnetCommand\", ProxyTelnetCommand);"
    },
    {
        "line": 205,
        "fullcodeline": "if (Storage->ValueExists(L\"TunnelPasswordPlain\"))"
    },
    {
        "line": 247,
        "fullcodeline": "RawByteString AEncryptKey = Storage->ReadStringAsBinaryData(L\"EncryptKey\", FEncryptKey);"
    },
    {
        "line": 248,
        "fullcodeline": "SET_SESSION_PROPERTY_FROM(EncryptKey, AEncryptKey);"
    },
    {
        "line": 15,
        "fullcodeline": "Password = Storage->ReadString(L\"PasswordPlain\", Password);"
    },
    {
        "line": 16,
        "fullcodeline": "RewritePassword = true;"
    },
    {
        "line": 63,
        "fullcodeline": "else if (ASshProt == ssh1deprecated)"
    },
    {
        "line": 207,
        "fullcodeline": "TunnelPassword = Storage->ReadString(L\"TunnelPasswordPlain\", TunnelPassword);"
    },
    {
        "line": 208,
        "fullcodeline": "RewritePassword = true;"
    },
    {
        "line": 20,
        "fullcodeline": "RawByteString APassword = Storage->ReadStringAsBinaryData(L\"Password\", FPassword);"
    },
    {
        "line": 21,
        "fullcodeline": "SET_SESSION_PROPERTY_FROM(Password, APassword);"
    },
    {
        "line": 65,
        "fullcodeline": "ASshProt = ssh1only;"
    },
    {
        "line": 212,
        "fullcodeline": "RawByteString ATunnelPassword = Storage->ReadStringAsBinaryData(L\"TunnelPassword\", FTunnelPassword);"
    },
    {
        "line": 213,
        "fullcodeline": "SET_SESSION_PROPERTY_FROM(TunnelPassword, ATunnelPassword);"
    }
]