[
    {
        "line": 7,
        "fullcodeline": "int i, j, x = 0, y, ymax;"
    },
    {
        "line": 18,
        "fullcodeline": "ptr = buf;"
    },
    {
        "line": 20,
        "fullcodeline": "framesize = I32(ptr);"
    },
    {
        "line": 32,
        "fullcodeline": "chunks = I16(ptr+6);"
    },
    {
        "line": 33,
        "fullcodeline": "ptr += 16;"
    },
    {
        "line": 11,
        "fullcodeline": "if (bytes < 4)"
    },
    {
        "line": 36,
        "fullcodeline": "for (c = 0; c < chunks; c++) {"
    },
    {
        "line": 176,
        "fullcodeline": "return -1; /* end of frame */"
    },
    {
        "line": 21,
        "fullcodeline": "if (framesize < I32(ptr))"
    },
    {
        "line": 27,
        "fullcodeline": "if (I16(ptr+4) != 0xF1FA) {"
    },
    {
        "line": 37,
        "fullcodeline": "UINT8 *data = ptr + 6;"
    },
    {
        "line": 173,
        "fullcodeline": "ptr += I32(ptr);"
    },
    {
        "line": 29,
        "fullcodeline": "return -1;"
    },
    {
        "line": 44,
        "fullcodeline": "lines = I16(data); data += 2;"
    },
    {
        "line": 95,
        "fullcodeline": "y = I16(data); ymax = y + I16(data+2); data += 4;"
    },
    {
        "line": 45,
        "fullcodeline": "for (l = y = 0; l < lines && y < state->ysize; l++, y++) {"
    },
    {
        "line": 96,
        "fullcodeline": "for (; y < ymax && y < state->ysize; y++) {"
    },
    {
        "line": 126,
        "fullcodeline": "for (y = 0; y < state->ysize; y++)"
    },
    {
        "line": 127,
        "fullcodeline": "memset(im->image[y], 0, state->xsize);"
    },
    {
        "line": 131,
        "fullcodeline": "for (y = 0; y < state->ysize; y++) {"
    },
    {
        "line": 158,
        "fullcodeline": "for (y = 0; y < state->ysize; y++) {"
    },
    {
        "line": 171,
        "fullcodeline": "return -1;"
    },
    {
        "line": 46,
        "fullcodeline": "UINT8* buf = (UINT8*) im->image[y];"
    },
    {
        "line": 48,
        "fullcodeline": "packets = I16(data); data += 2;"
    },
    {
        "line": 97,
        "fullcodeline": "UINT8* out = (UINT8*) im->image[y];"
    },
    {
        "line": 98,
        "fullcodeline": "int p, packets = *data++;"
    },
    {
        "line": 132,
        "fullcodeline": "UINT8* out = (UINT8*) im->image[y];"
    },
    {
        "line": 133,
        "fullcodeline": "data += 1; /* ignore packetcount byte */"
    },
    {
        "line": 159,
        "fullcodeline": "UINT8* buf = (UINT8*) im->image[y];"
    },
    {
        "line": 160,
        "fullcodeline": "memcpy(buf, data, state->xsize);"
    },
    {
        "line": 161,
        "fullcodeline": "data += state->xsize;"
    },
    {
        "line": 49,
        "fullcodeline": "while (packets & 0x8000) {"
    },
    {
        "line": 64,
        "fullcodeline": "for (p = x = 0; p < packets; p++) {"
    },
    {
        "line": 90,
        "fullcodeline": "return -1;"
    },
    {
        "line": 99,
        "fullcodeline": "for (p = x = 0; p < packets; p++, x += i) {"
    },
    {
        "line": 121,
        "fullcodeline": "return -1;"
    },
    {
        "line": 134,
        "fullcodeline": "for (x = 0; x < state->xsize; x += i) {"
    },
    {
        "line": 149,
        "fullcodeline": "if (x != state->xsize) {"
    },
    {
        "line": 62,
        "fullcodeline": "packets = I16(data); data += 2;"
    },
    {
        "line": 65,
        "fullcodeline": "x += data[0]; /* pixel skip */"
    },
    {
        "line": 100,
        "fullcodeline": "x += data[0]; /* skip pixels */"
    },
    {
        "line": 51,
        "fullcodeline": "if (packets & 0x4000) {"
    },
    {
        "line": 66,
        "fullcodeline": "if (data[1] >= 128) {"
    },
    {
        "line": 101,
        "fullcodeline": "if (data[1] & 0x80) {"
    },
    {
        "line": 135,
        "fullcodeline": "if (data[0] & 0x80) {"
    },
    {
        "line": 152,
        "fullcodeline": "return -1;"
    },
    {
        "line": 52,
        "fullcodeline": "y += 65536 - packets; /* skip lines */"
    },
    {
        "line": 57,
        "fullcodeline": "buf = (UINT8*) im->image[y];"
    },
    {
        "line": 67,
        "fullcodeline": "i = 256-data[1]; /* run */"
    },
    {
        "line": 74,
        "fullcodeline": "data += 2 + 2;"
    },
    {
        "line": 102,
        "fullcodeline": "i = 256-data[1]; /* run */"
    },
    {
        "line": 105,
        "fullcodeline": "memset(out + x, data[2], i);"
    },
    {
        "line": 106,
        "fullcodeline": "data += 3;"
    },
    {
        "line": 136,
        "fullcodeline": "i = 256 - data[0];"
    },
    {
        "line": 139,
        "fullcodeline": "memcpy(out + x, data + 1, i);"
    },
    {
        "line": 140,
        "fullcodeline": "data += i + 1;"
    },
    {
        "line": 53,
        "fullcodeline": "if (y >= state->ysize) {"
    },
    {
        "line": 60,
        "fullcodeline": "buf[state->xsize-1] = (UINT8) packets;"
    },
    {
        "line": 68,
        "fullcodeline": "if (x + i + i > state->xsize)"
    },
    {
        "line": 70,
        "fullcodeline": "for (j = 0; j < i; j++) {"
    },
    {
        "line": 76,
        "fullcodeline": "i = 2 * (int) data[1]; /* chunk */"
    },
    {
        "line": 79,
        "fullcodeline": "memcpy(buf + x, data + 2, i);"
    },
    {
        "line": 80,
        "fullcodeline": "data += 2 + i;"
    },
    {
        "line": 81,
        "fullcodeline": "x += i;"
    },
    {
        "line": 103,
        "fullcodeline": "if (x + i > state->xsize)"
    },
    {
        "line": 108,
        "fullcodeline": "i = data[1]; /* chunk */"
    },
    {
        "line": 111,
        "fullcodeline": "memcpy(out + x, data + 2, i);"
    },
    {
        "line": 112,
        "fullcodeline": "data += i + 2;"
    },
    {
        "line": 137,
        "fullcodeline": "if (x + i > state->xsize)"
    },
    {
        "line": 142,
        "fullcodeline": "i = data[0];"
    },
    {
        "line": 145,
        "fullcodeline": "memset(out + x, data[1], i);"
    },
    {
        "line": 146,
        "fullcodeline": "data += 2;"
    },
    {
        "line": 72,
        "fullcodeline": "buf[x++] = data[3];"
    },
    {
        "line": 77,
        "fullcodeline": "if (x + i > state->xsize)"
    },
    {
        "line": 109,
        "fullcodeline": "if (x + i > state->xsize)"
    },
    {
        "line": 143,
        "fullcodeline": "if (x + i > state->xsize)"
    },
    {
        "line": 55,
        "fullcodeline": "return -1;"
    },
    {
        "line": 71,
        "fullcodeline": "buf[x++] = data[2];"
    }
]