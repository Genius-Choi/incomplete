[
    {
        "line": 7,
        "fullcodeline": "opts = 0;"
    },
    {
        "line": 8,
        "fullcodeline": "if (re->flags & JS_REGEXP_G) {"
    },
    {
        "line": 20,
        "fullcodeline": "if (!js_regexec(re->prog, text, &m, opts)) {"
    },
    {
        "line": 21,
        "fullcodeline": "js_newarray(J);"
    },
    {
        "line": 22,
        "fullcodeline": "js_pushstring(J, text);"
    },
    {
        "line": 23,
        "fullcodeline": "js_setproperty(J, -2, \"input\");"
    },
    {
        "line": 24,
        "fullcodeline": "js_pushnumber(J, js_utfptrtoidx(text, m.sub[0].sp));"
    },
    {
        "line": 25,
        "fullcodeline": "js_setproperty(J, -2, \"index\");"
    },
    {
        "line": 9,
        "fullcodeline": "if (re->last > strlen(text)) {"
    },
    {
        "line": 14,
        "fullcodeline": "if (re->last > 0) {"
    },
    {
        "line": 26,
        "fullcodeline": "for (i = 0; i < m.nsub; ++i) {"
    },
    {
        "line": 10,
        "fullcodeline": "re->last = 0;"
    },
    {
        "line": 11,
        "fullcodeline": "js_pushnull(J);"
    },
    {
        "line": 15,
        "fullcodeline": "text += re->last;"
    },
    {
        "line": 16,
        "fullcodeline": "opts |= REG_NOTBOL;"
    },
    {
        "line": 27,
        "fullcodeline": "js_pushlstring(J, m.sub[i].sp, m.sub[i].ep - m.sub[i].sp);"
    },
    {
        "line": 28,
        "fullcodeline": "js_setindex(J, -2, i);"
    },
    {
        "line": 31,
        "fullcodeline": "re->last = re->last + (m.sub[0].ep - text);"
    }
]