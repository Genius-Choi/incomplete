[
    {
        "line": 9,
        "fullcodeline": "text = checkstring(J, 0);"
    },
    {
        "line": 18,
        "fullcodeline": "re = js_toregexp(J, -1);"
    },
    {
        "line": 26,
        "fullcodeline": "js_newarray(J);"
    },
    {
        "line": 28,
        "fullcodeline": "len = 0;"
    },
    {
        "line": 29,
        "fullcodeline": "a = text;"
    },
    {
        "line": 30,
        "fullcodeline": "e = text + strlen(text);"
    },
    {
        "line": 11,
        "fullcodeline": "if (js_isregexp(J, 1))"
    },
    {
        "line": 19,
        "fullcodeline": "if (!(re->flags & JS_REGEXP_G)) {"
    },
    {
        "line": 31,
        "fullcodeline": "while (a <= e) {"
    },
    {
        "line": 12,
        "fullcodeline": "js_copy(J, 1);"
    },
    {
        "line": 20,
        "fullcodeline": "js_RegExp_prototype_exec(J, re, text);"
    },
    {
        "line": 35,
        "fullcodeline": "b = m.sub[0].sp;"
    },
    {
        "line": 36,
        "fullcodeline": "c = m.sub[0].ep;"
    },
    {
        "line": 38,
        "fullcodeline": "js_pushlstring(J, b, c - b);"
    },
    {
        "line": 39,
        "fullcodeline": "js_setindex(J, -2, len++);"
    },
    {
        "line": 41,
        "fullcodeline": "a = c;"
    },
    {
        "line": 47,
        "fullcodeline": "js_pop(J, 1);"
    },
    {
        "line": 13,
        "fullcodeline": "else if (js_isundefined(J, 1))"
    },
    {
        "line": 32,
        "fullcodeline": "if (js_regexec(re->prog, a, &m, a > text ? REG_NOTBOL : 0))"
    },
    {
        "line": 42,
        "fullcodeline": "if (c - b == 0)"
    },
    {
        "line": 43,
        "fullcodeline": "++a;"
    },
    {
        "line": 14,
        "fullcodeline": "js_newregexp(J, \"\", 0);"
    },
    {
        "line": 16,
        "fullcodeline": "js_newregexp(J, js_tostring(J, 1), 0);"
    }
]