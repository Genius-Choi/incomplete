[
    {
        "line": 4,
        "fullcodeline": "char line[4096];"
    },
    {
        "line": 7,
        "fullcodeline": "f = fopen(filename, \"r\");"
    },
    {
        "line": 79,
        "fullcodeline": "fclose(f);"
    },
    {
        "line": 8,
        "fullcodeline": "if (f == NULL) {"
    },
    {
        "line": 12,
        "fullcodeline": "while (fgets(line, sizeof(line), f) != NULL) {"
    },
    {
        "line": 13,
        "fullcodeline": "char *ptr = line;"
    },
    {
        "line": 25,
        "fullcodeline": "cmd = ptr;"
    },
    {
        "line": 26,
        "fullcodeline": "arg = strchr(cmd, ' ');"
    },
    {
        "line": 38,
        "fullcodeline": "*arg = 0;"
    },
    {
        "line": 39,
        "fullcodeline": "arg++;"
    },
    {
        "line": 44,
        "fullcodeline": "argend = arg + strlen(arg);"
    },
    {
        "line": 48,
        "fullcodeline": "*argend = 0;"
    },
    {
        "line": 9,
        "fullcodeline": "return -1;"
    },
    {
        "line": 16,
        "fullcodeline": "while (isspace(*ptr)) {"
    },
    {
        "line": 21,
        "fullcodeline": "if (*ptr == '#' || *ptr == 0) {"
    },
    {
        "line": 27,
        "fullcodeline": "if (arg == NULL) {"
    },
    {
        "line": 31,
        "fullcodeline": "if (arg == NULL) {"
    },
    {
        "line": 40,
        "fullcodeline": "while (isspace(*arg)) {"
    },
    {
        "line": 45,
        "fullcodeline": "while (arg != argend && isspace(*(argend - 1))) {"
    },
    {
        "line": 50,
        "fullcodeline": "if (strcmp(cmd, \"deny\") == 0) {"
    },
    {
        "line": 17,
        "fullcodeline": "ptr++;"
    },
    {
        "line": 28,
        "fullcodeline": "arg = strchr(cmd, '\\t');"
    },
    {
        "line": 32,
        "fullcodeline": "fprintf(stderr, \"Invalid config line:\\n  %s\\n\", line);"
    },
    {
        "line": 33,
        "fullcodeline": "fclose(f);"
    },
    {
        "line": 34,
        "fullcodeline": "errno = EINVAL;"
    },
    {
        "line": 41,
        "fullcodeline": "arg++;"
    },
    {
        "line": 46,
        "fullcodeline": "argend--;"
    },
    {
        "line": 58,
        "fullcodeline": "QSIMPLEQ_INSERT_TAIL(acl_list, acl_rule, entry);"
    },
    {
        "line": 35,
        "fullcodeline": "return -1;"
    },
    {
        "line": 52,
        "fullcodeline": "if (strcmp(arg, \"all\") == 0) {"
    },
    {
        "line": 53,
        "fullcodeline": "acl_rule->type = ACL_DENY_ALL;"
    },
    {
        "line": 59,
        "fullcodeline": "} else if (strcmp(cmd, \"allow\") == 0) {"
    },
    {
        "line": 55,
        "fullcodeline": "acl_rule->type = ACL_DENY;"
    },
    {
        "line": 56,
        "fullcodeline": "snprintf(acl_rule->iface, IFNAMSIZ, \"%s\", arg);"
    },
    {
        "line": 67,
        "fullcodeline": "QSIMPLEQ_INSERT_TAIL(acl_list, acl_rule, entry);"
    },
    {
        "line": 61,
        "fullcodeline": "if (strcmp(arg, \"all\") == 0) {"
    },
    {
        "line": 62,
        "fullcodeline": "acl_rule->type = ACL_ALLOW_ALL;"
    },
    {
        "line": 68,
        "fullcodeline": "} else if (strcmp(cmd, \"include\") == 0) {"
    },
    {
        "line": 64,
        "fullcodeline": "acl_rule->type = ACL_ALLOW;"
    },
    {
        "line": 65,
        "fullcodeline": "snprintf(acl_rule->iface, IFNAMSIZ, \"%s\", arg);"
    },
    {
        "line": 70,
        "fullcodeline": "parse_acl_file(arg, acl_list);"
    },
    {
        "line": 72,
        "fullcodeline": "fprintf(stderr, \"Unknown command `%s'\\n\", cmd);"
    },
    {
        "line": 73,
        "fullcodeline": "fclose(f);"
    },
    {
        "line": 74,
        "fullcodeline": "errno = EINVAL;"
    },
    {
        "line": 75,
        "fullcodeline": "return -1;"
    }
]