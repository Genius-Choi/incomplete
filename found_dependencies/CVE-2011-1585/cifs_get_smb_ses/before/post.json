[
    {
        "line": 3,
        "fullcodeline": "int rc = -ENOMEM, xid;"
    },
    {
        "line": 6,
        "fullcodeline": "xid = GetXid();"
    },
    {
        "line": 8,
        "fullcodeline": "ses = cifs_find_smb_ses(server, volume_info->username);"
    },
    {
        "line": 41,
        "fullcodeline": "cFYI(1, \"Existing smb sess not found\");"
    },
    {
        "line": 42,
        "fullcodeline": "ses = sesInfoAlloc();"
    },
    {
        "line": 47,
        "fullcodeline": "ses->server = server;"
    },
    {
        "line": 71,
        "fullcodeline": "ses->linux_uid = volume_info->linux_uid;"
    },
    {
        "line": 72,
        "fullcodeline": "ses->overrideSecFlg = volume_info->secFlg;"
    },
    {
        "line": 74,
        "fullcodeline": "mutex_lock(&ses->session_mutex);"
    },
    {
        "line": 75,
        "fullcodeline": "rc = cifs_negotiate_protocol(xid, ses);"
    },
    {
        "line": 78,
        "fullcodeline": "mutex_unlock(&ses->session_mutex);"
    },
    {
        "line": 83,
        "fullcodeline": "write_lock(&cifs_tcp_ses_lock);"
    },
    {
        "line": 84,
        "fullcodeline": "list_add(&ses->smb_ses_list, &server->smb_ses_list);"
    },
    {
        "line": 85,
        "fullcodeline": "write_unlock(&cifs_tcp_ses_lock);"
    },
    {
        "line": 87,
        "fullcodeline": "FreeXid(xid);"
    },
    {
        "line": 91,
        "fullcodeline": "sesInfoFree(ses);"
    },
    {
        "line": 92,
        "fullcodeline": "FreeXid(xid);"
    },
    {
        "line": 43,
        "fullcodeline": "if (ses == NULL)"
    },
    {
        "line": 48,
        "fullcodeline": "if (server->addr.sockAddr6.sin6_family == AF_INET6)"
    },
    {
        "line": 76,
        "fullcodeline": "if (!rc)"
    },
    {
        "line": 93,
        "fullcodeline": "return ERR_PTR(rc);"
    },
    {
        "line": 10,
        "fullcodeline": "cFYI(1, \"Existing smb sess found (status=%d)\", ses->status);"
    },
    {
        "line": 13,
        "fullcodeline": "cifs_put_tcp_session(server);"
    },
    {
        "line": 15,
        "fullcodeline": "mutex_lock(&ses->session_mutex);"
    },
    {
        "line": 16,
        "fullcodeline": "rc = cifs_negotiate_protocol(xid, ses);"
    },
    {
        "line": 36,
        "fullcodeline": "mutex_unlock(&ses->session_mutex);"
    },
    {
        "line": 37,
        "fullcodeline": "FreeXid(xid);"
    },
    {
        "line": 49,
        "fullcodeline": "sprintf(ses->serverName, \"%pI6\","
    },
    {
        "line": 56,
        "fullcodeline": "strncpy(ses->userName, volume_info->username,"
    },
    {
        "line": 61,
        "fullcodeline": "ses->password = kstrdup(volume_info->password, GFP_KERNEL);"
    },
    {
        "line": 66,
        "fullcodeline": "int len = strlen(volume_info->domainname);"
    },
    {
        "line": 67,
        "fullcodeline": "ses->domainName = kmalloc(len + 1, GFP_KERNEL);"
    },
    {
        "line": 77,
        "fullcodeline": "rc = cifs_setup_session(xid, ses, volume_info->local_nls);"
    },
    {
        "line": 52,
        "fullcodeline": "sprintf(ses->serverName, \"%pI4\","
    },
    {
        "line": 62,
        "fullcodeline": "if (!ses->password)"
    },
    {
        "line": 18,
        "fullcodeline": "mutex_unlock(&ses->session_mutex);"
    },
    {
        "line": 20,
        "fullcodeline": "cifs_put_smb_ses(ses);"
    },
    {
        "line": 21,
        "fullcodeline": "FreeXid(xid);"
    },
    {
        "line": 25,
        "fullcodeline": "cFYI(1, \"Session needs reconnect\");"
    },
    {
        "line": 26,
        "fullcodeline": "rc = cifs_setup_session(xid, ses,"
    },
    {
        "line": 69,
        "fullcodeline": "strcpy(ses->domainName, volume_info->domainname);"
    },
    {
        "line": 22,
        "fullcodeline": "return ERR_PTR(rc);"
    },
    {
        "line": 29,
        "fullcodeline": "mutex_unlock(&ses->session_mutex);"
    },
    {
        "line": 31,
        "fullcodeline": "cifs_put_smb_ses(ses);"
    },
    {
        "line": 32,
        "fullcodeline": "FreeXid(xid);"
    },
    {
        "line": 33,
        "fullcodeline": "return ERR_PTR(rc);"
    }
]