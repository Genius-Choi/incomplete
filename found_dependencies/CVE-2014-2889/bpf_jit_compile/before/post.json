[
    {
        "line": 3,
        "fullcodeline": "u8 temp[64];"
    },
    {
        "line": 5,
        "fullcodeline": "unsigned int proglen, oldproglen = 0;"
    },
    {
        "line": 8,
        "fullcodeline": "u8 t_op, f_op, seen = 0, pass;"
    },
    {
        "line": 9,
        "fullcodeline": "u8 *image = NULL;"
    },
    {
        "line": 11,
        "fullcodeline": "int pc_ret0 = -1; /* bpf index of first RET #0 instruction (if any) */"
    },
    {
        "line": 14,
        "fullcodeline": "const struct sock_filter *filter = fp->insns;"
    },
    {
        "line": 15,
        "fullcodeline": "int flen = fp->len;"
    },
    {
        "line": 20,
        "fullcodeline": "addrs = kmalloc(flen * sizeof(*addrs), GFP_KERNEL);"
    },
    {
        "line": 31,
        "fullcodeline": "cleanup_addr = proglen; /* epilogue address */"
    },
    {
        "line": 514,
        "fullcodeline": "kfree(addrs);"
    },
    {
        "line": 17,
        "fullcodeline": "if (!bpf_jit_enable)"
    },
    {
        "line": 21,
        "fullcodeline": "if (addrs == NULL)"
    },
    {
        "line": 27,
        "fullcodeline": "for (proglen = 0, i = 0; i < flen; i++) {"
    },
    {
        "line": 33,
        "fullcodeline": "for (pass = 0; pass < 10; pass++) {"
    },
    {
        "line": 500,
        "fullcodeline": "if (bpf_jit_enable > 1)"
    },
    {
        "line": 28,
        "fullcodeline": "proglen += 64;"
    },
    {
        "line": 29,
        "fullcodeline": "addrs[i] = proglen;"
    },
    {
        "line": 35,
        "fullcodeline": "proglen = 0;"
    },
    {
        "line": 36,
        "fullcodeline": "prog = temp;"
    },
    {
        "line": 481,
        "fullcodeline": "cleanup_addr = proglen - 1; /* ret */"
    },
    {
        "line": 498,
        "fullcodeline": "oldproglen = proglen;"
    },
    {
        "line": 501,
        "fullcodeline": "pr_err(\"flen=%d proglen=%u pass=%d image=%p\\n\","
    },
    {
        "line": 509,
        "fullcodeline": "bpf_flush_icache(image, image + proglen);"
    },
    {
        "line": 511,
        "fullcodeline": "fp->bpf_func = (void *)image;"
    },
    {
        "line": 100,
        "fullcodeline": "for (i = 0; i < flen; i++) {"
    },
    {
        "line": 484,
        "fullcodeline": "if (seen & SEEN_XREG)"
    },
    {
        "line": 491,
        "fullcodeline": "if (proglen == oldproglen) {"
    },
    {
        "line": 505,
        "fullcodeline": "if (bpf_jit_enable > 1)"
    },
    {
        "line": 39,
        "fullcodeline": "EMIT4(0x55, 0x48, 0x89, 0xe5); /* push %rbp; mov %rsp,%rbp */"
    },
    {
        "line": 40,
        "fullcodeline": "EMIT4(0x48, 0x83, 0xec, 96);\t/* subq  $96,%rsp\t*/"
    },
    {
        "line": 97,
        "fullcodeline": "CLEAR_A(); /* A = 0 */"
    },
    {
        "line": 464,
        "fullcodeline": "ilen = prog - temp;"
    },
    {
        "line": 474,
        "fullcodeline": "proglen += ilen;"
    },
    {
        "line": 475,
        "fullcodeline": "addrs[i] = proglen;"
    },
    {
        "line": 476,
        "fullcodeline": "prog = temp;"
    },
    {
        "line": 483,
        "fullcodeline": "cleanup_addr -= 1; /* leaveq */"
    },
    {
        "line": 485,
        "fullcodeline": "cleanup_addr -= 4; /* mov  -8(%rbp),%rbx */"
    },
    {
        "line": 488,
        "fullcodeline": "WARN_ON(proglen != oldproglen);"
    },
    {
        "line": 506,
        "fullcodeline": "print_hex_dump(KERN_ERR, \"JIT code: \", DUMP_PREFIX_ADDRESS,"
    },
    {
        "line": 42,
        "fullcodeline": "if (seen & (SEEN_XREG | SEEN_DATAREF))"
    },
    {
        "line": 44,
        "fullcodeline": "if (seen & SEEN_XREG)"
    },
    {
        "line": 53,
        "fullcodeline": "if (seen & SEEN_DATAREF) {"
    },
    {
        "line": 495,
        "fullcodeline": "if (!image)"
    },
    {
        "line": 43,
        "fullcodeline": "EMIT4(0x48, 0x89, 0x5d, 0xf8); /* mov %rbx, -8(%rbp) */"
    },
    {
        "line": 45,
        "fullcodeline": "CLEAR_X(); /* make sure we dont leek kernel memory */"
    },
    {
        "line": 105,
        "fullcodeline": "seen |= SEEN_XREG;"
    },
    {
        "line": 106,
        "fullcodeline": "EMIT2(0x01, 0xd8);\t\t/* add %ebx,%eax */"
    },
    {
        "line": 117,
        "fullcodeline": "seen |= SEEN_XREG;"
    },
    {
        "line": 118,
        "fullcodeline": "EMIT2(0x29, 0xd8);\t\t/* sub    %ebx,%eax */"
    },
    {
        "line": 129,
        "fullcodeline": "seen |= SEEN_XREG;"
    },
    {
        "line": 130,
        "fullcodeline": "EMIT3(0x0f, 0xaf, 0xc3);\t/* imul %ebx,%eax */"
    },
    {
        "line": 141,
        "fullcodeline": "seen |= SEEN_XREG;"
    },
    {
        "line": 142,
        "fullcodeline": "EMIT2(0x85, 0xdb);\t/* test %ebx,%ebx */"
    },
    {
        "line": 150,
        "fullcodeline": "EMIT4(0x31, 0xd2, 0xf7, 0xf3); /* xor %edx,%edx; div %ebx */"
    },
    {
        "line": 153,
        "fullcodeline": "EMIT3(0x48, 0x69, 0xc0); /* imul imm32,%rax,%rax */"
    },
    {
        "line": 154,
        "fullcodeline": "EMIT(K, 4);"
    },
    {
        "line": 155,
        "fullcodeline": "EMIT4(0x48, 0xc1, 0xe8, 0x20); /* shr $0x20,%rax */"
    },
    {
        "line": 158,
        "fullcodeline": "seen |= SEEN_XREG;"
    },
    {
        "line": 159,
        "fullcodeline": "EMIT2(0x21, 0xd8);\t\t/* and %ebx,%eax */"
    },
    {
        "line": 172,
        "fullcodeline": "seen |= SEEN_XREG;"
    },
    {
        "line": 173,
        "fullcodeline": "EMIT2(0x09, 0xd8);\t\t/* or %ebx,%eax */"
    },
    {
        "line": 182,
        "fullcodeline": "seen |= SEEN_XREG;"
    },
    {
        "line": 183,
        "fullcodeline": "EMIT4(0x89, 0xd9, 0xd3, 0xe0);\t/* mov %ebx,%ecx; shl %cl,%eax */"
    },
    {
        "line": 194,
        "fullcodeline": "seen |= SEEN_XREG;"
    },
    {
        "line": 195,
        "fullcodeline": "EMIT4(0x89, 0xd9, 0xd3, 0xe8);\t/* mov %ebx,%ecx; shr %cl,%eax */"
    },
    {
        "line": 206,
        "fullcodeline": "EMIT2(0xf7, 0xd8);\t\t/* neg %eax */"
    },
    {
        "line": 227,
        "fullcodeline": "EMIT1(0xc3);\t\t/* ret */"
    },
    {
        "line": 230,
        "fullcodeline": "seen |= SEEN_XREG;"
    },
    {
        "line": 231,
        "fullcodeline": "EMIT2(0x89, 0xc3);\t/* mov    %eax,%ebx */"
    },
    {
        "line": 234,
        "fullcodeline": "seen |= SEEN_XREG;"
    },
    {
        "line": 235,
        "fullcodeline": "EMIT2(0x89, 0xd8);\t/* mov    %ebx,%eax */"
    },
    {
        "line": 244,
        "fullcodeline": "seen |= SEEN_XREG;"
    },
    {
        "line": 251,
        "fullcodeline": "seen |= SEEN_MEM;"
    },
    {
        "line": 252,
        "fullcodeline": "EMIT3(0x8b, 0x45, 0xf0 - K*4);"
    },
    {
        "line": 255,
        "fullcodeline": "seen |= SEEN_XREG | SEEN_MEM;"
    },
    {
        "line": 256,
        "fullcodeline": "EMIT3(0x8b, 0x5d, 0xf0 - K*4);"
    },
    {
        "line": 259,
        "fullcodeline": "seen |= SEEN_MEM;"
    },
    {
        "line": 260,
        "fullcodeline": "EMIT3(0x89, 0x45, 0xf0 - K*4);"
    },
    {
        "line": 263,
        "fullcodeline": "seen |= SEEN_XREG | SEEN_MEM;"
    },
    {
        "line": 264,
        "fullcodeline": "EMIT3(0x89, 0x5d, 0xf0 - K*4);"
    },
    {
        "line": 277,
        "fullcodeline": "seen |= SEEN_XREG;"
    },
    {
        "line": 295,
        "fullcodeline": "EMIT2(0x86, 0xc4); /* ntohs() : xchg   %al,%ah */"
    },
    {
        "line": 305,
        "fullcodeline": "EMIT3(0x48, 0x85, 0xc0);\t/* test %rax,%rax */"
    },
    {
        "line": 306,
        "fullcodeline": "EMIT_COND_JMP(X86_JE, cleanup_addr - (addrs[i] - 6));"
    },
    {
        "line": 308,
        "fullcodeline": "EMIT2(0x8b, 0x80);\t/* mov off32(%rax),%eax */"
    },
    {
        "line": 346,
        "fullcodeline": "CLEAR_A();"
    },
    {
        "line": 350,
        "fullcodeline": "func = sk_load_word;"
    },
    {
        "line": 351,
        "fullcodeline": "common_load:\t\t\tseen |= SEEN_DATAREF;"
    },
    {
        "line": 354,
        "fullcodeline": "t_offset = func - (image + addrs[i]);"
    },
    {
        "line": 355,
        "fullcodeline": "EMIT1_off32(0xbe, K); /* mov imm32,%esi */"
    },
    {
        "line": 356,
        "fullcodeline": "EMIT1_off32(0xe8, t_offset); /* call */"
    },
    {
        "line": 359,
        "fullcodeline": "func = sk_load_half;"
    },
    {
        "line": 362,
        "fullcodeline": "func = sk_load_byte;"
    },
    {
        "line": 374,
        "fullcodeline": "seen |= SEEN_DATAREF | SEEN_XREG;"
    },
    {
        "line": 375,
        "fullcodeline": "t_offset = sk_load_byte_msh - (image + addrs[i]);"
    },
    {
        "line": 376,
        "fullcodeline": "EMIT1_off32(0xbe, K);\t/* mov imm32,%esi */"
    },
    {
        "line": 377,
        "fullcodeline": "EMIT1_off32(0xe8, t_offset); /* call sk_load_byte_msh */"
    },
    {
        "line": 380,
        "fullcodeline": "func = sk_load_word_ind;"
    },
    {
        "line": 381,
        "fullcodeline": "common_load_ind:\t\tseen |= SEEN_DATAREF | SEEN_XREG;"
    },
    {
        "line": 382,
        "fullcodeline": "t_offset = func - (image + addrs[i]);"
    },
    {
        "line": 383,
        "fullcodeline": "EMIT1_off32(0xbe, K);\t/* mov imm32,%esi   */"
    },
    {
        "line": 384,
        "fullcodeline": "EMIT1_off32(0xe8, t_offset);\t/* call sk_load_xxx_ind */"
    },
    {
        "line": 387,
        "fullcodeline": "func = sk_load_half_ind;"
    },
    {
        "line": 390,
        "fullcodeline": "func = sk_load_byte_ind;"
    },
    {
        "line": 393,
        "fullcodeline": "t_offset = addrs[i + K] - addrs[i];"
    },
    {
        "line": 394,
        "fullcodeline": "EMIT_JMP(t_offset);"
    },
    {
        "line": 472,
        "fullcodeline": "memcpy(image + proglen, temp, ilen);"
    },
    {
        "line": 109,
        "fullcodeline": "if (!K)"
    },
    {
        "line": 111,
        "fullcodeline": "if (is_imm8(K))"
    },
    {
        "line": 121,
        "fullcodeline": "if (!K)"
    },
    {
        "line": 123,
        "fullcodeline": "if (is_imm8(K))"
    },
    {
        "line": 133,
        "fullcodeline": "if (is_imm8(K))"
    },
    {
        "line": 143,
        "fullcodeline": "if (pc_ret0 != -1)"
    },
    {
        "line": 162,
        "fullcodeline": "if (K >= 0xFFFFFF00) {"
    },
    {
        "line": 176,
        "fullcodeline": "if (is_imm8(K))"
    },
    {
        "line": 186,
        "fullcodeline": "if (K == 0)"
    },
    {
        "line": 198,
        "fullcodeline": "if (K == 0)"
    },
    {
        "line": 209,
        "fullcodeline": "if (!K) {"
    },
    {
        "line": 238,
        "fullcodeline": "if (!K)"
    },
    {
        "line": 245,
        "fullcodeline": "if (!K)"
    },
    {
        "line": 352,
        "fullcodeline": "if ((int)K < 0)"
    },
    {
        "line": 365,
        "fullcodeline": "if ((int)K < 0) {"
    },
    {
        "line": 466,
        "fullcodeline": "if (unlikely(proglen + ilen > oldproglen)) {"
    },
    {
        "line": 112,
        "fullcodeline": "EMIT3(0x83, 0xc0, K);\t/* add imm8,%eax */"
    },
    {
        "line": 124,
        "fullcodeline": "EMIT3(0x83, 0xe8, K); /* sub imm8,%eax */"
    },
    {
        "line": 134,
        "fullcodeline": "EMIT3(0x6b, 0xc0, K); /* imul imm8,%eax,%eax */"
    },
    {
        "line": 144,
        "fullcodeline": "EMIT_COND_JMP(X86_JE, addrs[pc_ret0] - (addrs[i] - 4));"
    },
    {
        "line": 163,
        "fullcodeline": "EMIT2(0x24, K & 0xFF); /* and imm8,%al */"
    },
    {
        "line": 177,
        "fullcodeline": "EMIT3(0x83, 0xc8, K); /* or imm8,%eax */"
    },
    {
        "line": 212,
        "fullcodeline": "CLEAR_A();"
    },
    {
        "line": 225,
        "fullcodeline": "EMIT1(0xc9);\t\t/* leaveq */"
    },
    {
        "line": 239,
        "fullcodeline": "CLEAR_A();"
    },
    {
        "line": 246,
        "fullcodeline": "CLEAR_X();"
    },
    {
        "line": 370,
        "fullcodeline": "CLEAR_A();"
    },
    {
        "line": 371,
        "fullcodeline": "EMIT_JMP(cleanup_addr - addrs[i]);"
    },
    {
        "line": 467,
        "fullcodeline": "pr_err(\"bpb_jit_compile fatal error\\n\");"
    },
    {
        "line": 468,
        "fullcodeline": "kfree(addrs);"
    },
    {
        "line": 469,
        "fullcodeline": "module_free(NULL, image);"
    },
    {
        "line": 114,
        "fullcodeline": "EMIT1_off32(0x05, K);\t/* add imm32,%eax */"
    },
    {
        "line": 126,
        "fullcodeline": "EMIT1_off32(0x2d, K); /* sub imm32,%eax */"
    },
    {
        "line": 136,
        "fullcodeline": "EMIT2(0x69, 0xc0);\t\t/* imul imm32,%eax */"
    },
    {
        "line": 137,
        "fullcodeline": "EMIT(K, 4);"
    },
    {
        "line": 146,
        "fullcodeline": "EMIT_COND_JMP(X86_JNE, 2 + 5);"
    },
    {
        "line": 147,
        "fullcodeline": "CLEAR_A();"
    },
    {
        "line": 148,
        "fullcodeline": "EMIT1_off32(0xe9, cleanup_addr - (addrs[i] - 4)); /* jmp .+off32 */"
    },
    {
        "line": 179,
        "fullcodeline": "EMIT1_off32(0x0d, K);\t/* or imm32,%eax */"
    },
    {
        "line": 210,
        "fullcodeline": "if (pc_ret0 == -1)"
    },
    {
        "line": 214,
        "fullcodeline": "EMIT1_off32(0xb8, K);\t/* mov $imm32,%eax */"
    },
    {
        "line": 219,
        "fullcodeline": "if (i != flen - 1) {"
    },
    {
        "line": 223,
        "fullcodeline": "if (seen & SEEN_XREG)"
    },
    {
        "line": 241,
        "fullcodeline": "EMIT1_off32(0xb8, K); /* mov $imm32,%eax */"
    },
    {
        "line": 248,
        "fullcodeline": "EMIT1_off32(0xbb, K); /* mov $imm32,%ebx */"
    },
    {
        "line": 292,
        "fullcodeline": "EMIT3(0x0f, 0xb7, 0x87); /* movzwl off32(%rdi),%eax */"
    },
    {
        "line": 302,
        "fullcodeline": "EMIT3(0x48, 0x8b, 0x87); /* movq off32(%rdi),%rax */"
    },
    {
        "line": 317,
        "fullcodeline": "EMIT2(0x8b, 0x87);"
    },
    {
        "line": 327,
        "fullcodeline": "EMIT2(0x8b, 0x87);"
    },
    {
        "line": 337,
        "fullcodeline": "EMIT3(0x0f, 0xb7, 0x87); /* movzwl off32(%rdi),%eax */"
    },
    {
        "line": 366,
        "fullcodeline": "if (pc_ret0 != -1) {"
    },
    {
        "line": 164,
        "fullcodeline": "} else if (K >= 0xFFFF0000) {"
    },
    {
        "line": 188,
        "fullcodeline": "else if (K == 1)"
    },
    {
        "line": 200,
        "fullcodeline": "else if (K == 1)"
    },
    {
        "line": 211,
        "fullcodeline": "pc_ret0 = i;"
    },
    {
        "line": 220,
        "fullcodeline": "EMIT_JMP(cleanup_addr - addrs[i]);"
    },
    {
        "line": 224,
        "fullcodeline": "EMIT4(0x48, 0x8b, 0x5d, 0xf8);  /* mov  -8(%rbp),%rbx */"
    },
    {
        "line": 367,
        "fullcodeline": "EMIT_JMP(addrs[pc_ret0] - addrs[i]);"
    },
    {
        "line": 165,
        "fullcodeline": "EMIT2(0x66, 0x25);\t/* and imm16,%ax */"
    },
    {
        "line": 166,
        "fullcodeline": "EMIT2(K, 2);"
    },
    {
        "line": 189,
        "fullcodeline": "EMIT2(0xd1, 0xe0); /* shl %eax */"
    },
    {
        "line": 201,
        "fullcodeline": "EMIT2(0xd1, 0xe8); /* shr %eax */"
    },
    {
        "line": 168,
        "fullcodeline": "EMIT1_off32(0x25, K);\t/* and imm32,%eax */"
    },
    {
        "line": 191,
        "fullcodeline": "EMIT3(0xc1, 0xe0, K);"
    },
    {
        "line": 203,
        "fullcodeline": "EMIT3(0xc1, 0xe8, K);"
    }
]