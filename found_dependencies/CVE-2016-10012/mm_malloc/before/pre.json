[
    {
        "line": 10,
        "fullcodeline": "size = ((size + (MM_MINSIZE - 1)) / MM_MINSIZE) * MM_MINSIZE;"
    },
    {
        "line": 12,
        "fullcodeline": "RB_FOREACH(mms, mmtree, &mm->rb_free) {"
    },
    {
        "line": 21,
        "fullcodeline": "memset(mms->address, 0xd0, size);"
    },
    {
        "line": 26,
        "fullcodeline": "mms->size -= size;"
    },
    {
        "line": 27,
        "fullcodeline": "mms->address = (char *)mms->address + size;"
    },
    {
        "line": 5,
        "fullcodeline": "if (size == 0)"
    },
    {
        "line": 7,
        "fullcodeline": "if (size > SIZE_MAX - MM_MINSIZE + 1)"
    },
    {
        "line": 17,
        "fullcodeline": "if (mms == NULL)"
    },
    {
        "line": 23,
        "fullcodeline": "tmp = mm_make_entry(mm, &mm->rb_allocated, mms->address, size);"
    },
    {
        "line": 29,
        "fullcodeline": "if (mms->size == 0) {"
    },
    {
        "line": 6,
        "fullcodeline": "fatal(\"mm_malloc: try to allocate 0 space\");"
    },
    {
        "line": 8,
        "fullcodeline": "fatal(\"mm_malloc: size too big\");"
    },
    {
        "line": 13,
        "fullcodeline": "if (mms->size >= size)"
    },
    {
        "line": 30,
        "fullcodeline": "RB_REMOVE(mmtree, &mm->rb_free, mms);"
    },
    {
        "line": 31,
        "fullcodeline": "if (mm->mmalloc == NULL)"
    }
]