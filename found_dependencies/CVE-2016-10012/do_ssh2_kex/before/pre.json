[
    {
        "line": 3,
        "fullcodeline": "char *myproposal[PROPOSAL_MAX] = { KEX_SERVER };"
    },
    {
        "line": 7,
        "fullcodeline": "myproposal[PROPOSAL_KEX_ALGS] = compat_kex_proposal("
    },
    {
        "line": 9,
        "fullcodeline": "myproposal[PROPOSAL_ENC_ALGS_CTOS] = compat_cipher_proposal("
    },
    {
        "line": 11,
        "fullcodeline": "myproposal[PROPOSAL_ENC_ALGS_STOC] = compat_cipher_proposal("
    },
    {
        "line": 13,
        "fullcodeline": "myproposal[PROPOSAL_MAC_ALGS_CTOS] ="
    },
    {
        "line": 29,
        "fullcodeline": "myproposal[PROPOSAL_SERVER_HOST_KEY_ALGS] = compat_pkalg_proposal("
    },
    {
        "line": 35,
        "fullcodeline": "kex = active_state->kex;"
    },
    {
        "line": 46,
        "fullcodeline": "kex->kex[KEX_C25519_SHA256] = kexc25519_server;"
    },
    {
        "line": 47,
        "fullcodeline": "kex->server = 1;"
    },
    {
        "line": 48,
        "fullcodeline": "kex->client_version_string=client_version_string;"
    },
    {
        "line": 49,
        "fullcodeline": "kex->server_version_string=server_version_string;"
    },
    {
        "line": 50,
        "fullcodeline": "kex->load_host_public_key=&get_hostkey_public_by_type;"
    },
    {
        "line": 51,
        "fullcodeline": "kex->load_host_private_key=&get_hostkey_private_by_type;"
    },
    {
        "line": 52,
        "fullcodeline": "kex->host_key_index=&get_hostkey_index;"
    },
    {
        "line": 53,
        "fullcodeline": "kex->sign = sshd_hostkey_sign;"
    },
    {
        "line": 55,
        "fullcodeline": "dispatch_run(DISPATCH_BLOCK, &kex->done, active_state);"
    },
    {
        "line": 57,
        "fullcodeline": "session_id2 = kex->session_id;"
    },
    {
        "line": 58,
        "fullcodeline": "session_id2_len = kex->session_id_len;"
    },
    {
        "line": 67,
        "fullcodeline": "debug(\"KEX done\");"
    },
    {
        "line": 14,
        "fullcodeline": "myproposal[PROPOSAL_MAC_ALGS_STOC] = options.macs;"
    },
    {
        "line": 16,
        "fullcodeline": "if (options.compression == COMP_NONE) {"
    },
    {
        "line": 25,
        "fullcodeline": "if (options.rekey_limit || options.rekey_interval)"
    },
    {
        "line": 33,
        "fullcodeline": "if ((r = kex_setup(active_state, myproposal)) != 0)"
    },
    {
        "line": 17,
        "fullcodeline": "myproposal[PROPOSAL_COMP_ALGS_CTOS] ="
    },
    {
        "line": 26,
        "fullcodeline": "packet_set_rekey_limits(options.rekey_limit,"
    },
    {
        "line": 34,
        "fullcodeline": "fatal(\"kex_setup: %s\", ssh_err(r));"
    },
    {
        "line": 18,
        "fullcodeline": "myproposal[PROPOSAL_COMP_ALGS_STOC] = \"none\";"
    },
    {
        "line": 27,
        "fullcodeline": "(time_t)options.rekey_interval);"
    },
    {
        "line": 19,
        "fullcodeline": "} else if (options.compression == COMP_DELAYED) {"
    },
    {
        "line": 20,
        "fullcodeline": "myproposal[PROPOSAL_COMP_ALGS_CTOS] ="
    },
    {
        "line": 21,
        "fullcodeline": "myproposal[PROPOSAL_COMP_ALGS_STOC] ="
    }
]