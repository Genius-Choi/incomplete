[
    {
        "line": 5,
        "fullcodeline": "tmp.address = address;"
    },
    {
        "line": 6,
        "fullcodeline": "mms = RB_FIND(mmtree, &mm->rb_allocated, &tmp);"
    },
    {
        "line": 11,
        "fullcodeline": "memset(mms->address, 0xd0, mms->size);"
    },
    {
        "line": 14,
        "fullcodeline": "RB_REMOVE(mmtree, &mm->rb_allocated, mms);"
    },
    {
        "line": 19,
        "fullcodeline": "prev = mms;"
    },
    {
        "line": 56,
        "fullcodeline": "mms = RB_NEXT(mmtree, &mm->rb_free, prev);"
    },
    {
        "line": 66,
        "fullcodeline": "prev->size += mms->size;"
    },
    {
        "line": 67,
        "fullcodeline": "RB_REMOVE(mmtree, &mm->rb_free, mms);"
    },
    {
        "line": 7,
        "fullcodeline": "if (mms == NULL)"
    },
    {
        "line": 15,
        "fullcodeline": "if (RB_INSERT(mmtree, &mm->rb_free, mms) != NULL)"
    },
    {
        "line": 20,
        "fullcodeline": "if (RB_LEFT(prev, next)) {"
    },
    {
        "line": 37,
        "fullcodeline": "if (prev != NULL && MM_ADDRESS_END(prev) > address)"
    },
    {
        "line": 42,
        "fullcodeline": "if (prev != NULL && MM_ADDRESS_END(prev) == address) {"
    },
    {
        "line": 52,
        "fullcodeline": "if (prev == NULL)"
    },
    {
        "line": 57,
        "fullcodeline": "if (mms == NULL)"
    },
    {
        "line": 60,
        "fullcodeline": "if (MM_ADDRESS_END(prev) > mms->address)"
    },
    {
        "line": 63,
        "fullcodeline": "if (MM_ADDRESS_END(prev) != mms->address)"
    },
    {
        "line": 69,
        "fullcodeline": "if (mm->mmalloc == NULL)"
    },
    {
        "line": 8,
        "fullcodeline": "fatal(\"mm_free(%p): can not find %p\", mm, address);"
    },
    {
        "line": 16,
        "fullcodeline": "fatal(\"mm_free(%p): double address %p\", mm, address);"
    },
    {
        "line": 21,
        "fullcodeline": "prev = RB_LEFT(prev, next);"
    },
    {
        "line": 38,
        "fullcodeline": "fatal(\"mm_free: memory corruption: %p(%zu) > %p\","
    },
    {
        "line": 43,
        "fullcodeline": "prev->size += mms->size;"
    },
    {
        "line": 44,
        "fullcodeline": "RB_REMOVE(mmtree, &mm->rb_free, mms);"
    },
    {
        "line": 61,
        "fullcodeline": "fatal(\"mm_free: memory corruption: %p < %p(%zu)\","
    },
    {
        "line": 70,
        "fullcodeline": "free(mms);"
    },
    {
        "line": 22,
        "fullcodeline": "while (RB_RIGHT(prev, next))"
    },
    {
        "line": 23,
        "fullcodeline": "prev = RB_RIGHT(prev, next);"
    },
    {
        "line": 45,
        "fullcodeline": "if (mm->mmalloc == NULL)"
    },
    {
        "line": 50,
        "fullcodeline": "prev = mms;"
    },
    {
        "line": 72,
        "fullcodeline": "mm_free(mm->mmalloc, mms);"
    },
    {
        "line": 25,
        "fullcodeline": "if (RB_PARENT(prev, next) &&"
    },
    {
        "line": 46,
        "fullcodeline": "free(mms);"
    },
    {
        "line": 26,
        "fullcodeline": "(prev == RB_RIGHT(RB_PARENT(prev, next), next)))"
    },
    {
        "line": 27,
        "fullcodeline": "prev = RB_PARENT(prev, next);"
    },
    {
        "line": 48,
        "fullcodeline": "mm_free(mm->mmalloc, mms);"
    },
    {
        "line": 32,
        "fullcodeline": "prev = RB_PARENT(prev, next);"
    },
    {
        "line": 29,
        "fullcodeline": "while (RB_PARENT(prev, next) &&"
    },
    {
        "line": 31,
        "fullcodeline": "prev = RB_PARENT(prev, next);"
    },
    {
        "line": 30,
        "fullcodeline": "(prev == RB_LEFT(RB_PARENT(prev, next), next)))"
    }
]