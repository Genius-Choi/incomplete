[
    {
        "line": 3,
        "fullcodeline": "bool orig = (endp == &orig_state);"
    },
    {
        "line": 4,
        "fullcodeline": "binpac::DNP3::DNP3_Flow* flow = orig ? interp->upflow() : interp->downflow();"
    },
    {
        "line": 6,
        "fullcodeline": "u_char* data = endp->buffer + PSEUDO_TRANSPORT_INDEX; // The transport layer byte counts as app-layer it seems."
    },
    {
        "line": 7,
        "fullcodeline": "int len = endp->pkt_length - 5;"
    },
    {
        "line": 15,
        "fullcodeline": "int is_first = (endp->tpflags & 0x40) >> 6; // Initial chunk of data in this packet."
    },
    {
        "line": 16,
        "fullcodeline": "int is_last = (endp->tpflags & 0x80) >> 7; // Last chunk of data in this packet."
    },
    {
        "line": 18,
        "fullcodeline": "int transport = PSEUDO_TRANSPORT_LEN;"
    },
    {
        "line": 20,
        "fullcodeline": "int i = 0;"
    },
    {
        "line": 21,
        "fullcodeline": "while ( len > 0 )"
    },
    {
        "line": 41,
        "fullcodeline": "if ( ! is_first && ! endp->encountered_first_chunk )"
    },
    {
        "line": 23,
        "fullcodeline": "int n = min(len, 16);"
    },
    {
        "line": 30,
        "fullcodeline": "assert(data + n < endp->buffer + endp->buffer_len);"
    },
    {
        "line": 31,
        "fullcodeline": "flow->flow_buffer()->BufferData(data + transport, data + n);"
    },
    {
        "line": 32,
        "fullcodeline": "transport = 0;"
    },
    {
        "line": 34,
        "fullcodeline": "data += n + 2;"
    },
    {
        "line": 35,
        "fullcodeline": "len -= n;"
    },
    {
        "line": 39,
        "fullcodeline": "endp->encountered_first_chunk = true;"
    },
    {
        "line": 44,
        "fullcodeline": "analyzer->Weird(\"dnp3_first_application_layer_chunk_missing\");"
    },
    {
        "line": 50,
        "fullcodeline": "flow->flow_buffer()->FinishBuffer();"
    },
    {
        "line": 51,
        "fullcodeline": "flow->FlowEOF();"
    },
    {
        "line": 52,
        "fullcodeline": "ClearEndpointState(orig);"
    },
    {
        "line": 26,
        "fullcodeline": "if ( ! CheckCRC(n, data, data + n, \"app_chunk\") )"
    }
]