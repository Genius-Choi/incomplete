[
    {
        "line": 4,
        "fullcodeline": "PySSLSocket *ssl_obj = NULL;  /* ssl._SSLSocket, borrowed ref */"
    },
    {
        "line": 6,
        "fullcodeline": "static PyThread_type_lock *lock = NULL;"
    },
    {
        "line": 8,
        "fullcodeline": "threadstate = PyGILState_Ensure();"
    },
    {
        "line": 10,
        "fullcodeline": "ssl_obj = (PySSLSocket *)SSL_get_app_data(ssl);"
    },
    {
        "line": 11,
        "fullcodeline": "assert(PySSLSocket_Check(ssl_obj));"
    },
    {
        "line": 33,
        "fullcodeline": "PyThread_acquire_lock(lock, 1);"
    },
    {
        "line": 34,
        "fullcodeline": "res = BIO_printf(ssl_obj->ctx->keylog_bio, \"%s\\n\", line);"
    },
    {
        "line": 35,
        "fullcodeline": "e = errno;"
    },
    {
        "line": 36,
        "fullcodeline": "(void)BIO_flush(ssl_obj->ctx->keylog_bio);"
    },
    {
        "line": 37,
        "fullcodeline": "PyThread_release_lock(lock);"
    },
    {
        "line": 46,
        "fullcodeline": "PyGILState_Release(threadstate);"
    },
    {
        "line": 12,
        "fullcodeline": "if (ssl_obj->ctx->keylog_bio == NULL) {"
    },
    {
        "line": 22,
        "fullcodeline": "if (lock == NULL) {"
    },
    {
        "line": 40,
        "fullcodeline": "if (res == -1) {"
    },
    {
        "line": 23,
        "fullcodeline": "lock = PyThread_allocate_lock();"
    },
    {
        "line": 41,
        "fullcodeline": "errno = e;"
    },
    {
        "line": 42,
        "fullcodeline": "PyErr_SetFromErrnoWithFilenameObject(PyExc_OSError,"
    },
    {
        "line": 44,
        "fullcodeline": "PyErr_Fetch(&ssl_obj->exc_type, &ssl_obj->exc_value, &ssl_obj->exc_tb);"
    },
    {
        "line": 24,
        "fullcodeline": "if (lock == NULL) {"
    },
    {
        "line": 25,
        "fullcodeline": "PyErr_SetString(PyExc_MemoryError, \"Unable to allocate lock\");"
    },
    {
        "line": 26,
        "fullcodeline": "PyErr_Fetch(&ssl_obj->exc_type, &ssl_obj->exc_value,"
    }
]