[
    {
        "line": 4,
        "fullcodeline": "BIO *biobuf = NULL;"
    },
    {
        "line": 6,
        "fullcodeline": "int retval = 0, err, loaded = 0;"
    },
    {
        "line": 8,
        "fullcodeline": "assert(filetype == SSL_FILETYPE_ASN1 || filetype == SSL_FILETYPE_PEM);"
    },
    {
        "line": 20,
        "fullcodeline": "biobuf = BIO_new_mem_buf(data, (int)len);"
    },
    {
        "line": 26,
        "fullcodeline": "store = SSL_CTX_get_cert_store(self->ctx);"
    },
    {
        "line": 27,
        "fullcodeline": "assert(store != NULL);"
    },
    {
        "line": 59,
        "fullcodeline": "err = ERR_peek_last_error();"
    },
    {
        "line": 79,
        "fullcodeline": "BIO_free(biobuf);"
    },
    {
        "line": 10,
        "fullcodeline": "if (len <= 0) {"
    },
    {
        "line": 21,
        "fullcodeline": "if (biobuf == NULL) {"
    },
    {
        "line": 60,
        "fullcodeline": "if ((filetype == SSL_FILETYPE_ASN1) &&"
    },
    {
        "line": 11,
        "fullcodeline": "PyErr_SetString(PyExc_ValueError,"
    },
    {
        "line": 22,
        "fullcodeline": "_setSSLError(\"Can't allocate buffer\", 0, __FILE__, __LINE__);"
    },
    {
        "line": 30,
        "fullcodeline": "X509 *cert = NULL;"
    },
    {
        "line": 44,
        "fullcodeline": "r = X509_STORE_add_cert(store, cert);"
    },
    {
        "line": 45,
        "fullcodeline": "X509_free(cert);"
    },
    {
        "line": 56,
        "fullcodeline": "loaded++;"
    },
    {
        "line": 63,
        "fullcodeline": "(ERR_GET_REASON(err) == ASN1_R_HEADER_TOO_LONG)) {"
    },
    {
        "line": 65,
        "fullcodeline": "ERR_clear_error();"
    },
    {
        "line": 66,
        "fullcodeline": "retval = 0;"
    },
    {
        "line": 13,
        "fullcodeline": "return -1;"
    },
    {
        "line": 23,
        "fullcodeline": "return -1;"
    },
    {
        "line": 33,
        "fullcodeline": "if (filetype == SSL_FILETYPE_ASN1) {"
    },
    {
        "line": 41,
        "fullcodeline": "if (cert == NULL) {"
    },
    {
        "line": 46,
        "fullcodeline": "if (!r) {"
    },
    {
        "line": 62,
        "fullcodeline": "(ERR_GET_LIB(err) == ERR_LIB_ASN1) &&"
    },
    {
        "line": 14,
        "fullcodeline": "} else if (len > INT_MAX) {"
    },
    {
        "line": 34,
        "fullcodeline": "cert = d2i_X509_bio(biobuf, NULL);"
    },
    {
        "line": 47,
        "fullcodeline": "err = ERR_peek_last_error();"
    },
    {
        "line": 61,
        "fullcodeline": "(loaded > 0) &&"
    },
    {
        "line": 67,
        "fullcodeline": "} else if ((filetype == SSL_FILETYPE_PEM) &&"
    },
    {
        "line": 15,
        "fullcodeline": "PyErr_SetString(PyExc_OverflowError,"
    },
    {
        "line": 36,
        "fullcodeline": "cert = PEM_read_bio_X509(biobuf, NULL,"
    },
    {
        "line": 48,
        "fullcodeline": "if ((ERR_GET_LIB(err) == ERR_LIB_X509) &&"
    },
    {
        "line": 70,
        "fullcodeline": "(ERR_GET_REASON(err) == PEM_R_NO_START_LINE)) {"
    },
    {
        "line": 72,
        "fullcodeline": "ERR_clear_error();"
    },
    {
        "line": 73,
        "fullcodeline": "retval = 0;"
    },
    {
        "line": 17,
        "fullcodeline": "return -1;"
    },
    {
        "line": 49,
        "fullcodeline": "(ERR_GET_REASON(err) == X509_R_CERT_ALREADY_IN_HASH_TABLE)) {"
    },
    {
        "line": 51,
        "fullcodeline": "ERR_clear_error();"
    },
    {
        "line": 69,
        "fullcodeline": "(ERR_GET_LIB(err) == ERR_LIB_PEM) &&"
    },
    {
        "line": 75,
        "fullcodeline": "_setSSLError(NULL, 0, __FILE__, __LINE__);"
    },
    {
        "line": 76,
        "fullcodeline": "retval = -1;"
    },
    {
        "line": 37,
        "fullcodeline": "SSL_CTX_get_default_passwd_cb(self->ctx),"
    },
    {
        "line": 38,
        "fullcodeline": "SSL_CTX_get_default_passwd_cb_userdata(self->ctx)"
    },
    {
        "line": 68,
        "fullcodeline": "(loaded > 0) &&"
    }
]