[
    {
        "line": 6,
        "fullcodeline": "SSL_CTX *ctx = NULL;"
    },
    {
        "line": 67,
        "fullcodeline": "self = (PySSLContext *) type->tp_alloc(type, 0);"
    },
    {
        "line": 72,
        "fullcodeline": "self->ctx = ctx;"
    },
    {
        "line": 73,
        "fullcodeline": "self->hostflags = X509_CHECK_FLAG_NO_PARTIAL_WILDCARDS;"
    },
    {
        "line": 74,
        "fullcodeline": "self->protocol = proto_version;"
    },
    {
        "line": 75,
        "fullcodeline": "self->msg_cb = NULL;"
    },
    {
        "line": 87,
        "fullcodeline": "self->set_sni_cb = NULL;"
    },
    {
        "line": 104,
        "fullcodeline": "options = SSL_OP_ALL & ~SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS;"
    },
    {
        "line": 127,
        "fullcodeline": "SSL_CTX_set_options(self->ctx, options);"
    },
    {
        "line": 183,
        "fullcodeline": "SSL_CTX_set_session_id_context(self->ctx, (const unsigned char *) SID_CTX,"
    },
    {
        "line": 187,
        "fullcodeline": "params = SSL_CTX_get0_param(self->ctx);"
    },
    {
        "line": 193,
        "fullcodeline": "X509_VERIFY_PARAM_set_hostflags(params, self->hostflags);"
    },
    {
        "line": 56,
        "fullcodeline": "if (proto_version == -1) {"
    },
    {
        "line": 61,
        "fullcodeline": "if (ctx == NULL) {"
    },
    {
        "line": 66,
        "fullcodeline": "assert(type != NULL && type->tp_alloc != NULL);"
    },
    {
        "line": 68,
        "fullcodeline": "if (self == NULL) {"
    },
    {
        "line": 90,
        "fullcodeline": "if (proto_version == PY_SSL_VERSION_TLS_CLIENT) {"
    },
    {
        "line": 105,
        "fullcodeline": "if (proto_version != PY_SSL_VERSION_SSL2)"
    },
    {
        "line": 107,
        "fullcodeline": "if (proto_version != PY_SSL_VERSION_SSL3)"
    },
    {
        "line": 175,
        "fullcodeline": "EC_KEY *key = EC_KEY_new_by_curve_name(NID_X9_62_prime256v1);"
    },
    {
        "line": 176,
        "fullcodeline": "SSL_CTX_set_tmp_ecdh(self->ctx, key);"
    },
    {
        "line": 200,
        "fullcodeline": "return (PyObject *)self;"
    },
    {
        "line": 43,
        "fullcodeline": "ctx = SSL_CTX_new(TLS_method());"
    },
    {
        "line": 46,
        "fullcodeline": "ctx = SSL_CTX_new(TLS_client_method());"
    },
    {
        "line": 49,
        "fullcodeline": "ctx = SSL_CTX_new(TLS_server_method());"
    },
    {
        "line": 52,
        "fullcodeline": "proto_version = -1;"
    },
    {
        "line": 57,
        "fullcodeline": "PyErr_SetString(PyExc_ValueError,"
    },
    {
        "line": 62,
        "fullcodeline": "_setSSLError(NULL, 0, __FILE__, __LINE__);"
    },
    {
        "line": 91,
        "fullcodeline": "self->check_hostname = 1;"
    },
    {
        "line": 106,
        "fullcodeline": "options |= SSL_OP_NO_SSLv2;"
    },
    {
        "line": 108,
        "fullcodeline": "options |= SSL_OP_NO_SSLv3;"
    },
    {
        "line": 136,
        "fullcodeline": "result = SSL_CTX_set_cipher_list(ctx, PY_SSL_DEFAULT_CIPHER_STRING);"
    },
    {
        "line": 145,
        "fullcodeline": "PyErr_SetString(PySSLErrorObject,"
    },
    {
        "line": 97,
        "fullcodeline": "self->check_hostname = 0;"
    },
    {
        "line": 140,
        "fullcodeline": "result = SSL_CTX_set_cipher_list(ctx, \"HIGH:!aNULL:!eNULL\");"
    },
    {
        "line": 92,
        "fullcodeline": "if (_set_verify_mode(self, PY_SSL_CERT_REQUIRED) == -1) {"
    },
    {
        "line": 98,
        "fullcodeline": "if (_set_verify_mode(self, PY_SSL_CERT_NONE) == -1) {"
    }
]