[
    {
        "line": 11,
        "fullcodeline": "len = parse_len(line);"
    },
    {
        "line": 33,
        "fullcodeline": "line += PKT_LEN_SIZE;"
    },
    {
        "line": 49,
        "fullcodeline": "len -= PKT_LEN_SIZE; /* the encoded length includes its own size */"
    },
    {
        "line": 8,
        "fullcodeline": "if (bufflen > 0 && bufflen < PKT_LEN_SIZE)"
    },
    {
        "line": 12,
        "fullcodeline": "if (len < 0) {"
    },
    {
        "line": 38,
        "fullcodeline": "if (len == PKT_LEN_SIZE) {"
    },
    {
        "line": 44,
        "fullcodeline": "if (len == 0) { /* Flush pkt */"
    },
    {
        "line": 51,
        "fullcodeline": "if (*line == GIT_SIDE_BAND_DATA)"
    },
    {
        "line": 30,
        "fullcodeline": "if (bufflen > 0 && bufflen < (size_t)len)"
    },
    {
        "line": 39,
        "fullcodeline": "*head = NULL;"
    },
    {
        "line": 52,
        "fullcodeline": "ret = data_pkt(head, line, len);"
    },
    {
        "line": 23,
        "fullcodeline": "return (int)len;"
    },
    {
        "line": 46,
        "fullcodeline": "return flush_pkt(head);"
    },
    {
        "line": 17,
        "fullcodeline": "if (bufflen >= 4 && !git__prefixcmp(line, \"PACK\")) {"
    },
    {
        "line": 53,
        "fullcodeline": "else if (*line == GIT_SIDE_BAND_PROGRESS)"
    },
    {
        "line": 20,
        "fullcodeline": "return pack_pkt(head);"
    },
    {
        "line": 54,
        "fullcodeline": "ret = sideband_progress_pkt(head, line, len);"
    },
    {
        "line": 55,
        "fullcodeline": "else if (*line == GIT_SIDE_BAND_ERROR)"
    },
    {
        "line": 56,
        "fullcodeline": "ret = sideband_error_pkt(head, line, len);"
    },
    {
        "line": 57,
        "fullcodeline": "else if (!git__prefixcmp(line, \"ACK\"))"
    },
    {
        "line": 58,
        "fullcodeline": "ret = ack_pkt(head, line, len);"
    },
    {
        "line": 59,
        "fullcodeline": "else if (!git__prefixcmp(line, \"NAK\"))"
    },
    {
        "line": 60,
        "fullcodeline": "ret = nak_pkt(head);"
    },
    {
        "line": 61,
        "fullcodeline": "else if (!git__prefixcmp(line, \"ERR \"))"
    },
    {
        "line": 62,
        "fullcodeline": "ret = err_pkt(head, line, len);"
    },
    {
        "line": 63,
        "fullcodeline": "else if (*line == '#')"
    },
    {
        "line": 64,
        "fullcodeline": "ret = comment_pkt(head, line, len);"
    },
    {
        "line": 65,
        "fullcodeline": "else if (!git__prefixcmp(line, \"ok\"))"
    },
    {
        "line": 66,
        "fullcodeline": "ret = ok_pkt(head, line, len);"
    },
    {
        "line": 67,
        "fullcodeline": "else if (!git__prefixcmp(line, \"ng\"))"
    },
    {
        "line": 68,
        "fullcodeline": "ret = ng_pkt(head, line, len);"
    },
    {
        "line": 69,
        "fullcodeline": "else if (!git__prefixcmp(line, \"unpack\"))"
    },
    {
        "line": 70,
        "fullcodeline": "ret = unpack_pkt(head, line, len);"
    },
    {
        "line": 72,
        "fullcodeline": "ret = ref_pkt(head, line, len);"
    }
]