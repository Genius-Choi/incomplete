[
    {
        "line": 7,
        "fullcodeline": "linenr_T\tsourcing_lnum_top = SOURCING_LNUM;"
    },
    {
        "line": 9,
        "fullcodeline": "int\t\tsaved_wait_return = need_wait_return;"
    },
    {
        "line": 10,
        "fullcodeline": "char_u\t*line_arg = line_arg_in;"
    },
    {
        "line": 11,
        "fullcodeline": "int\t\tvim9_function = eap->cmdidx == CMD_def"
    },
    {
        "line": 14,
        "fullcodeline": "char\tnesting_def[MAX_FUNC_NESTING];"
    },
    {
        "line": 15,
        "fullcodeline": "char\tnesting_inline[MAX_FUNC_NESTING];"
    },
    {
        "line": 16,
        "fullcodeline": "int\t\tnesting = 0;"
    },
    {
        "line": 18,
        "fullcodeline": "int\t\tindent = 2;"
    },
    {
        "line": 19,
        "fullcodeline": "char_u\t*skip_until = NULL;"
    },
    {
        "line": 20,
        "fullcodeline": "int\t\tret = FAIL;"
    },
    {
        "line": 21,
        "fullcodeline": "int\t\tis_heredoc = FALSE;"
    },
    {
        "line": 22,
        "fullcodeline": "int\t\theredoc_concat_len = 0;"
    },
    {
        "line": 24,
        "fullcodeline": "char_u\t*heredoc_trimmed = NULL;"
    },
    {
        "line": 26,
        "fullcodeline": "ga_init2(&heredoc_ga, 1, 500);"
    },
    {
        "line": 30,
        "fullcodeline": "sourcing_lnum_off = get_sourced_lnum(eap->getline, eap->cookie);"
    },
    {
        "line": 40,
        "fullcodeline": "nesting_def[0] = vim9_function;"
    },
    {
        "line": 41,
        "fullcodeline": "nesting_inline[0] = eap->cmdidx == CMD_block;"
    },
    {
        "line": 42,
        "fullcodeline": "getline_options = vim9_function"
    },
    {
        "line": 420,
        "fullcodeline": "vim_free(skip_until);"
    },
    {
        "line": 421,
        "fullcodeline": "vim_free(heredoc_trimmed);"
    },
    {
        "line": 422,
        "fullcodeline": "vim_free(heredoc_ga.ga_data);"
    },
    {
        "line": 423,
        "fullcodeline": "need_wait_return |= saved_wait_return;"
    },
    {
        "line": 31,
        "fullcodeline": "if (SOURCING_LNUM < sourcing_lnum_off)"
    },
    {
        "line": 416,
        "fullcodeline": "if (!did_emsg)"
    },
    {
        "line": 12,
        "fullcodeline": "|| eap->cmdidx == CMD_block;"
    },
    {
        "line": 33,
        "fullcodeline": "sourcing_lnum_off -= SOURCING_LNUM;"
    },
    {
        "line": 55,
        "fullcodeline": "need_wait_return = FALSE;"
    },
    {
        "line": 93,
        "fullcodeline": "sourcing_lnum_off = get_sourced_lnum(eap->getline, eap->cookie);"
    },
    {
        "line": 403,
        "fullcodeline": "((char_u **)(newlines->ga_data))[newlines->ga_len++] = p;"
    },
    {
        "line": 417,
        "fullcodeline": "ret = OK;"
    },
    {
        "line": 34,
        "fullcodeline": "if (ga_grow(newlines, sourcing_lnum_off) == FAIL)"
    },
    {
        "line": 36,
        "fullcodeline": "while (sourcing_lnum_off-- > 0)"
    },
    {
        "line": 37,
        "fullcodeline": "((char_u **)(newlines->ga_data))[newlines->ga_len++] = NULL;"
    },
    {
        "line": 57,
        "fullcodeline": "if (line_arg != NULL)"
    },
    {
        "line": 77,
        "fullcodeline": "if (theline == NULL)"
    },
    {
        "line": 94,
        "fullcodeline": "if (SOURCING_LNUM < sourcing_lnum_off)"
    },
    {
        "line": 99,
        "fullcodeline": "if (skip_until != NULL)"
    },
    {
        "line": 383,
        "fullcodeline": "if (ga_grow(newlines, 1 + sourcing_lnum_off) == FAIL)"
    },
    {
        "line": 386,
        "fullcodeline": "if (heredoc_concat_len > 0)"
    },
    {
        "line": 401,
        "fullcodeline": "if (p == NULL)"
    },
    {
        "line": 407,
        "fullcodeline": "while (sourcing_lnum_off-- > 0)"
    },
    {
        "line": 408,
        "fullcodeline": "((char_u **)(newlines->ga_data))[newlines->ga_len++] = NULL;"
    },
    {
        "line": 411,
        "fullcodeline": "if (line_arg != NULL && *line_arg == NUL)"
    },
    {
        "line": 52,
        "fullcodeline": "msg_scroll = TRUE;"
    },
    {
        "line": 53,
        "fullcodeline": "saved_wait_return = FALSE;"
    },
    {
        "line": 60,
        "fullcodeline": "theline = line_arg;"
    },
    {
        "line": 61,
        "fullcodeline": "p = vim_strchr(theline, '\\n');"
    },
    {
        "line": 76,
        "fullcodeline": "lines_left = Rows - 1;"
    },
    {
        "line": 80,
        "fullcodeline": "SOURCING_LNUM = sourcing_lnum_top;"
    },
    {
        "line": 95,
        "fullcodeline": "sourcing_lnum_off -= SOURCING_LNUM;"
    },
    {
        "line": 390,
        "fullcodeline": "ga_concat(&heredoc_ga, theline);"
    },
    {
        "line": 391,
        "fullcodeline": "ga_concat(&heredoc_ga, (char_u *)\"\\n\");"
    },
    {
        "line": 392,
        "fullcodeline": "p = vim_strsave((char_u *)\"\");"
    },
    {
        "line": 412,
        "fullcodeline": "line_arg = NULL;"
    },
    {
        "line": 62,
        "fullcodeline": "if (p == NULL)"
    },
    {
        "line": 72,
        "fullcodeline": "theline = get_function_line(eap, lines_to_free, indent,"
    },
    {
        "line": 81,
        "fullcodeline": "if (skip_until != NULL)"
    },
    {
        "line": 97,
        "fullcodeline": "sourcing_lnum_off = 0;"
    },
    {
        "line": 105,
        "fullcodeline": "if (heredoc_trimmed == NULL"
    },
    {
        "line": 228,
        "fullcodeline": "c = *p;"
    },
    {
        "line": 292,
        "fullcodeline": "p = skip_range(p, FALSE, NULL);"
    },
    {
        "line": 309,
        "fullcodeline": "arg = skipwhite(skiptowhite(p));"
    },
    {
        "line": 350,
        "fullcodeline": "arg = skipwhite(skiptowhite(p));"
    },
    {
        "line": 399,
        "fullcodeline": "p = vim_strsave(theline);"
    },
    {
        "line": 63,
        "fullcodeline": "line_arg += STRLEN(line_arg);"
    },
    {
        "line": 82,
        "fullcodeline": "semsg(_(e_missing_heredoc_end_marker_str), skip_until);"
    },
    {
        "line": 107,
        "fullcodeline": "|| STRNCMP(theline, heredoc_trimmed,"
    },
    {
        "line": 147,
        "fullcodeline": "for (p = theline; VIM_ISWHITE(*p) || *p == ':'; ++p)"
    },
    {
        "line": 152,
        "fullcodeline": "if (nesting_inline[nesting]"
    },
    {
        "line": 217,
        "fullcodeline": "if (indent > 2 && (*p == '}' || STRNCMP(p, \"end\", 3) == 0))"
    },
    {
        "line": 229,
        "fullcodeline": "if (is_function_cmd(&p)"
    },
    {
        "line": 251,
        "fullcodeline": "if (nesting_def[nesting] ? *p != '#' : *p != '\"')"
    },
    {
        "line": 293,
        "fullcodeline": "if (!vim9_function"
    },
    {
        "line": 310,
        "fullcodeline": "if (arg[0] == '<' && arg[1] =='<'"
    },
    {
        "line": 351,
        "fullcodeline": "if (*arg == '[')"
    },
    {
        "line": 353,
        "fullcodeline": "if (arg != NULL)"
    },
    {
        "line": 66,
        "fullcodeline": "*p = NUL;"
    },
    {
        "line": 67,
        "fullcodeline": "line_arg = p + 1;"
    },
    {
        "line": 106,
        "fullcodeline": "|| (is_heredoc && skipwhite(theline) == theline)"
    },
    {
        "line": 110,
        "fullcodeline": "if (heredoc_trimmed == NULL)"
    },
    {
        "line": 117,
        "fullcodeline": "if (STRCMP(p, skip_until) == 0)"
    },
    {
        "line": 153,
        "fullcodeline": "? *p == '}'"
    },
    {
        "line": 154,
        "fullcodeline": ": (checkforcmd(&p, nesting_def[nesting]"
    },
    {
        "line": 218,
        "fullcodeline": "indent -= 2;"
    },
    {
        "line": 230,
        "fullcodeline": "|| (eap->cmdidx == CMD_def && checkforcmd(&p, \"def\", 3)))"
    },
    {
        "line": 234,
        "fullcodeline": "p += eval_fname_script(p);"
    },
    {
        "line": 235,
        "fullcodeline": "vim_free(trans_function_name(&p, NULL, TRUE, 0, NULL,"
    },
    {
        "line": 254,
        "fullcodeline": "end = p + STRLEN(p) - 1;"
    },
    {
        "line": 294,
        "fullcodeline": "&& ((p[0] == 'a' && (!ASCII_ISALPHA(p[1]) || p[1] == 'p'))"
    },
    {
        "line": 306,
        "fullcodeline": "skip_until = vim_strsave((char_u *)\".\");"
    },
    {
        "line": 311,
        "fullcodeline": "&& ((p[0] == 'p' && p[1] == 'y'"
    },
    {
        "line": 328,
        "fullcodeline": "p = skipwhite(arg + 2);"
    },
    {
        "line": 340,
        "fullcodeline": "getline_options = GETLINE_NONE;"
    },
    {
        "line": 341,
        "fullcodeline": "is_heredoc = TRUE;"
    },
    {
        "line": 352,
        "fullcodeline": "arg = vim_strchr(arg, ']');"
    },
    {
        "line": 355,
        "fullcodeline": "int found = (eap->cmdidx == CMD_def && arg[0] == '='"
    },
    {
        "line": 108,
        "fullcodeline": "STRLEN(heredoc_trimmed)) == 0)"
    },
    {
        "line": 111,
        "fullcodeline": "p = theline;"
    },
    {
        "line": 119,
        "fullcodeline": "VIM_CLEAR(skip_until);"
    },
    {
        "line": 120,
        "fullcodeline": "VIM_CLEAR(heredoc_trimmed);"
    },
    {
        "line": 121,
        "fullcodeline": "getline_options = vim9_function"
    },
    {
        "line": 123,
        "fullcodeline": "is_heredoc = FALSE;"
    },
    {
        "line": 156,
        "fullcodeline": "&& *p != ':'))"
    },
    {
        "line": 158,
        "fullcodeline": "if (nesting-- == 0)"
    },
    {
        "line": 232,
        "fullcodeline": "if (*p == '!')"
    },
    {
        "line": 237,
        "fullcodeline": "if (*skipwhite(p) == '(')"
    },
    {
        "line": 255,
        "fullcodeline": "while (end > p && VIM_ISWHITE(*end))"
    },
    {
        "line": 256,
        "fullcodeline": "--end;"
    },
    {
        "line": 257,
        "fullcodeline": "if (end > p + 1 && *end == '{' && VIM_ISWHITE(end[-1]))"
    },
    {
        "line": 300,
        "fullcodeline": "|| (p[0] == 'i'"
    },
    {
        "line": 323,
        "fullcodeline": "|| (p[0] == 'm' && p[1] == 'z'"
    },
    {
        "line": 329,
        "fullcodeline": "if (STRNCMP(p, \"trim\", 4) == 0)"
    },
    {
        "line": 336,
        "fullcodeline": "if (*p == NUL)"
    },
    {
        "line": 342,
        "fullcodeline": "if (eap->cmdidx == CMD_def)"
    },
    {
        "line": 358,
        "fullcodeline": "if (!found)"
    },
    {
        "line": 361,
        "fullcodeline": "if (found || (arg[0] == '=' && arg[1] == '<' && arg[2] =='<'"
    },
    {
        "line": 84,
        "fullcodeline": "emsg(_(e_missing_end_block));"
    },
    {
        "line": 125,
        "fullcodeline": "if (heredoc_concat_len > 0)"
    },
    {
        "line": 160,
        "fullcodeline": "char_u *nextcmd = NULL;"
    },
    {
        "line": 219,
        "fullcodeline": "else if (STRNCMP(p, \"if\", 2) == 0"
    },
    {
        "line": 233,
        "fullcodeline": "p = skipwhite(p + 1);"
    },
    {
        "line": 262,
        "fullcodeline": "--end;"
    },
    {
        "line": 265,
        "fullcodeline": "is_block = end > p + 2 && end[-1] == '=' && end[0] == '>';"
    },
    {
        "line": 295,
        "fullcodeline": "|| (p[0] == 'c'"
    },
    {
        "line": 301,
        "fullcodeline": "&& (!ASCII_ISALPHA(p[1]) || (p[1] == 'n'"
    },
    {
        "line": 321,
        "fullcodeline": "|| (p[0] == 'r' && p[1] == 'u' && p[2] == 'b'"
    },
    {
        "line": 324,
        "fullcodeline": "&& (!ASCII_ISALPHA(p[2]) || p[2] == 's'))"
    },
    {
        "line": 332,
        "fullcodeline": "p = skipwhite(p + 4);"
    },
    {
        "line": 333,
        "fullcodeline": "heredoc_trimmed = vim_strnsave(theline,"
    },
    {
        "line": 337,
        "fullcodeline": "skip_until = vim_strsave((char_u *)\".\");"
    },
    {
        "line": 343,
        "fullcodeline": "heredoc_concat_len = newlines->ga_len + 1;"
    },
    {
        "line": 356,
        "fullcodeline": "&& arg[1] == '<' && arg[2] =='<');"
    },
    {
        "line": 360,
        "fullcodeline": "arg = skipwhite(skiptowhite(arg));"
    },
    {
        "line": 367,
        "fullcodeline": "p = skipwhite(arg + 3);"
    },
    {
        "line": 375,
        "fullcodeline": "skip_until = vim_strnsave(p, skiptowhite(p) - p);"
    },
    {
        "line": 376,
        "fullcodeline": "getline_options = GETLINE_NONE;"
    },
    {
        "line": 377,
        "fullcodeline": "is_heredoc = TRUE;"
    },
    {
        "line": 129,
        "fullcodeline": "ga_concat(&heredoc_ga, theline);"
    },
    {
        "line": 130,
        "fullcodeline": "vim_free(((char_u **)(newlines->ga_data))["
    },
    {
        "line": 132,
        "fullcodeline": "((char_u **)(newlines->ga_data))["
    },
    {
        "line": 134,
        "fullcodeline": "ga_init(&heredoc_ga);"
    },
    {
        "line": 135,
        "fullcodeline": "heredoc_concat_len = 0;"
    },
    {
        "line": 136,
        "fullcodeline": "theline += STRLEN(theline);  // skip the \"EOF\""
    },
    {
        "line": 162,
        "fullcodeline": "if (*p == '|' || *p == '}')"
    },
    {
        "line": 178,
        "fullcodeline": "if (nextcmd != NULL && *skipwhite(nextcmd) != NUL)"
    },
    {
        "line": 222,
        "fullcodeline": "|| STRNCMP(p, \"try\", 3) == 0)"
    },
    {
        "line": 223,
        "fullcodeline": "indent += 2;"
    },
    {
        "line": 239,
        "fullcodeline": "if (nesting == MAX_FUNC_NESTING - 1)"
    },
    {
        "line": 263,
        "fullcodeline": "while (end > p && VIM_ISWHITE(*end))"
    },
    {
        "line": 264,
        "fullcodeline": "--end;"
    },
    {
        "line": 266,
        "fullcodeline": "if (!is_block)"
    },
    {
        "line": 296,
        "fullcodeline": "&& (!ASCII_ISALPHA(p[1]) || (p[1] == 'h'"
    },
    {
        "line": 319,
        "fullcodeline": "|| (p[0] == 'l' && p[1] == 'u' && p[2] == 'a'"
    },
    {
        "line": 322,
        "fullcodeline": "&& (!ASCII_ISALPHA(p[3]) || p[3] == 'y'))"
    },
    {
        "line": 339,
        "fullcodeline": "skip_until = vim_strnsave(p, skiptowhite(p) - p);"
    },
    {
        "line": 362,
        "fullcodeline": "&& (checkforcmd(&p, \"let\", 2)"
    },
    {
        "line": 368,
        "fullcodeline": "if (STRNCMP(p, \"trim\", 4) == 0)"
    },
    {
        "line": 85,
        "fullcodeline": "else if (eap->cmdidx == CMD_def)"
    },
    {
        "line": 113,
        "fullcodeline": "p = skipwhite(theline) == theline"
    },
    {
        "line": 163,
        "fullcodeline": "nextcmd = p + 1;"
    },
    {
        "line": 184,
        "fullcodeline": "eap->nextcmd = nextcmd;"
    },
    {
        "line": 209,
        "fullcodeline": "if (checkforcmd(&p, \"endfunction\", 4) && *p != ':')"
    },
    {
        "line": 221,
        "fullcodeline": "|| STRNCMP(p, \"for\", 3) == 0"
    },
    {
        "line": 240,
        "fullcodeline": "emsg(_(e_function_nesting_too_deep));"
    },
    {
        "line": 268,
        "fullcodeline": "char_u *s = p;"
    },
    {
        "line": 272,
        "fullcodeline": "is_block = checkforcmd_noparen(&s, \"autocmd\", 2)"
    },
    {
        "line": 302,
        "fullcodeline": "&& (!ASCII_ISALPHA(p[2])"
    },
    {
        "line": 317,
        "fullcodeline": "|| (p[0] == 't' && p[1] == 'c'"
    },
    {
        "line": 320,
        "fullcodeline": "&& !ASCII_ISALPHA(p[3]))"
    },
    {
        "line": 334,
        "fullcodeline": "skipwhite(theline) - theline);"
    },
    {
        "line": 365,
        "fullcodeline": "|| checkforcmd(&p, \"const\", 5))))"
    },
    {
        "line": 371,
        "fullcodeline": "p = skipwhite(p + 4);"
    },
    {
        "line": 372,
        "fullcodeline": "heredoc_trimmed = vim_strnsave(theline,"
    },
    {
        "line": 86,
        "fullcodeline": "emsg(_(e_missing_enddef));"
    },
    {
        "line": 116,
        "fullcodeline": "p = theline + STRLEN(heredoc_trimmed);"
    },
    {
        "line": 131,
        "fullcodeline": "heredoc_concat_len - 1]);"
    },
    {
        "line": 185,
        "fullcodeline": "if (lines_to_free->ga_len > 0"
    },
    {
        "line": 210,
        "fullcodeline": "emsg(_(e_mismatched_endfunction));"
    },
    {
        "line": 212,
        "fullcodeline": "else if (eap->cmdidx == CMD_def && checkforcmd(&p, \"enddef\", 4))"
    },
    {
        "line": 220,
        "fullcodeline": "|| STRNCMP(p, \"wh\", 2) == 0"
    },
    {
        "line": 243,
        "fullcodeline": "++nesting;"
    },
    {
        "line": 244,
        "fullcodeline": "nesting_def[nesting] = (c == 'd');"
    },
    {
        "line": 245,
        "fullcodeline": "nesting_inline[nesting] = FALSE;"
    },
    {
        "line": 246,
        "fullcodeline": "indent += 2;"
    },
    {
        "line": 278,
        "fullcodeline": "if (nesting == MAX_FUNC_NESTING - 1)"
    },
    {
        "line": 297,
        "fullcodeline": "&& (!ASCII_ISALPHA(p[2]) || (p[2] == 'a'"
    },
    {
        "line": 303,
        "fullcodeline": "|| (p[2] == 's'"
    },
    {
        "line": 315,
        "fullcodeline": "|| (p[0] == 'p' && p[1] == 'e'"
    },
    {
        "line": 318,
        "fullcodeline": "&& (!ASCII_ISALPHA(p[2]) || p[2] == 'l'))"
    },
    {
        "line": 364,
        "fullcodeline": "|| checkforcmd(&p, \"final\", 5)"
    },
    {
        "line": 88,
        "fullcodeline": "emsg(_(e_missing_endfunction));"
    },
    {
        "line": 114,
        "fullcodeline": "? theline : theline + STRLEN(heredoc_trimmed);"
    },
    {
        "line": 164,
        "fullcodeline": "else if (line_arg != NULL && *skipwhite(line_arg) != NUL)"
    },
    {
        "line": 186,
        "fullcodeline": "&& *eap->cmdlinep !="
    },
    {
        "line": 192,
        "fullcodeline": "vim_free(*eap->cmdlinep);"
    },
    {
        "line": 193,
        "fullcodeline": "*eap->cmdlinep = ((char_u **)lines_to_free->ga_data)"
    },
    {
        "line": 195,
        "fullcodeline": "--lines_to_free->ga_len;"
    },
    {
        "line": 213,
        "fullcodeline": "emsg(_(e_mismatched_enddef));"
    },
    {
        "line": 273,
        "fullcodeline": "|| checkforcmd_noparen(&s, \"command\", 3);"
    },
    {
        "line": 279,
        "fullcodeline": "emsg(_(e_function_nesting_too_deep));"
    },
    {
        "line": 304,
        "fullcodeline": "&& (!ASCII_ISALPHA(p[3])"
    },
    {
        "line": 312,
        "fullcodeline": "&& (!ASCII_ISALNUM(p[2]) || p[2] == 't'"
    },
    {
        "line": 316,
        "fullcodeline": "&& (!ASCII_ISALPHA(p[2]) || p[2] == 'r'))"
    },
    {
        "line": 363,
        "fullcodeline": "|| checkforcmd(&p, \"var\", 3)"
    },
    {
        "line": 373,
        "fullcodeline": "skipwhite(theline) - theline);"
    },
    {
        "line": 165,
        "fullcodeline": "nextcmd = line_arg;"
    },
    {
        "line": 282,
        "fullcodeline": "++nesting;"
    },
    {
        "line": 283,
        "fullcodeline": "nesting_def[nesting] = TRUE;"
    },
    {
        "line": 284,
        "fullcodeline": "nesting_inline[nesting] = TRUE;"
    },
    {
        "line": 285,
        "fullcodeline": "indent += 2;"
    },
    {
        "line": 298,
        "fullcodeline": "&& (STRNCMP(&p[3], \"nge\", 3) != 0"
    },
    {
        "line": 305,
        "fullcodeline": "|| p[3] == 'e'))))))))"
    },
    {
        "line": 313,
        "fullcodeline": "|| ((p[2] == '3' || p[2] == 'x')"
    },
    {
        "line": 187,
        "fullcodeline": "((char_u **)lines_to_free->ga_data)"
    },
    {
        "line": 188,
        "fullcodeline": "[lines_to_free->ga_len - 1])"
    },
    {
        "line": 194,
        "fullcodeline": "[lines_to_free->ga_len - 1];"
    },
    {
        "line": 299,
        "fullcodeline": "|| !ASCII_ISALPHA(p[6])))))))"
    },
    {
        "line": 314,
        "fullcodeline": "&& !ASCII_ISALPHA(p[3]))))"
    },
    {
        "line": 166,
        "fullcodeline": "else if (*p != NUL && *p != (vim9_function ? '#' : '\"')"
    },
    {
        "line": 167,
        "fullcodeline": "&& (vim9_function || p_verbose > 0))"
    },
    {
        "line": 169,
        "fullcodeline": "SOURCING_LNUM = sourcing_lnum_top"
    },
    {
        "line": 171,
        "fullcodeline": "if (eap->cmdidx == CMD_def)"
    },
    {
        "line": 172,
        "fullcodeline": "semsg(_(e_text_found_after_str_str), \"enddef\", p);"
    },
    {
        "line": 174,
        "fullcodeline": "give_warning2((char_u *)"
    },
    {
        "line": 175,
        "fullcodeline": "_(\"W22: Text found after :endfunction: %s\"),"
    }
]