[
    {
        "line": 11,
        "fullcodeline": "int\t\tevaluate = (evalarg->eval_flags & EVAL_EVALUATE);"
    },
    {
        "line": 12,
        "fullcodeline": "garray_T\t*gap = &evalarg->eval_ga;"
    },
    {
        "line": 13,
        "fullcodeline": "garray_T\t*freegap = &evalarg->eval_freega;"
    },
    {
        "line": 14,
        "fullcodeline": "ufunc_T\t*ufunc = NULL;"
    },
    {
        "line": 17,
        "fullcodeline": "char_u\t*cmdline = NULL;"
    },
    {
        "line": 18,
        "fullcodeline": "int\t\tret = FAIL;"
    },
    {
        "line": 21,
        "fullcodeline": "int\t\tlnum_save = -1;"
    },
    {
        "line": 22,
        "fullcodeline": "linenr_T\tsourcing_lnum_top = SOURCING_LNUM;"
    },
    {
        "line": 30,
        "fullcodeline": "CLEAR_FIELD(eap);"
    },
    {
        "line": 31,
        "fullcodeline": "eap.cmdidx = CMD_block;"
    },
    {
        "line": 32,
        "fullcodeline": "eap.forceit = FALSE;"
    },
    {
        "line": 33,
        "fullcodeline": "eap.cmdlinep = &cmdline;"
    },
    {
        "line": 34,
        "fullcodeline": "eap.skip = !evaluate;"
    },
    {
        "line": 43,
        "fullcodeline": "ga_init2(&newlines, (int)sizeof(char_u *), 10);"
    },
    {
        "line": 116,
        "fullcodeline": "name = get_lambda_name();"
    },
    {
        "line": 117,
        "fullcodeline": "ufunc = alloc_clear(offsetof(ufunc_T, uf_name) + STRLEN(name) + 1);"
    },
    {
        "line": 120,
        "fullcodeline": "set_ufunc_name(ufunc, name);"
    },
    {
        "line": 123,
        "fullcodeline": "ufunc->uf_flags = FC_LAMBDA;"
    },
    {
        "line": 124,
        "fullcodeline": "ufunc->uf_refcount = 1;"
    },
    {
        "line": 125,
        "fullcodeline": "ufunc->uf_args = *newargs;"
    },
    {
        "line": 126,
        "fullcodeline": "newargs->ga_data = NULL;"
    },
    {
        "line": 127,
        "fullcodeline": "ufunc->uf_def_args = *default_args;"
    },
    {
        "line": 128,
        "fullcodeline": "default_args->ga_data = NULL;"
    },
    {
        "line": 129,
        "fullcodeline": "ufunc->uf_func_type = &t_func_any;"
    },
    {
        "line": 132,
        "fullcodeline": "lnum_save = SOURCING_LNUM;"
    },
    {
        "line": 146,
        "fullcodeline": "pt = ALLOC_CLEAR_ONE(partial_T);"
    },
    {
        "line": 149,
        "fullcodeline": "pt->pt_func = ufunc;"
    },
    {
        "line": 150,
        "fullcodeline": "pt->pt_refcount = 1;"
    },
    {
        "line": 152,
        "fullcodeline": "ufunc->uf_lines = newlines;"
    },
    {
        "line": 153,
        "fullcodeline": "newlines.ga_data = NULL;"
    },
    {
        "line": 158,
        "fullcodeline": "ufunc->uf_script_ctx = current_sctx;"
    },
    {
        "line": 159,
        "fullcodeline": "ufunc->uf_script_ctx_version = current_sctx.sc_version;"
    },
    {
        "line": 161,
        "fullcodeline": "set_function_type(ufunc);"
    },
    {
        "line": 166,
        "fullcodeline": "rettv->v_type = VAR_PARTIAL;"
    },
    {
        "line": 167,
        "fullcodeline": "ufunc = NULL;"
    },
    {
        "line": 168,
        "fullcodeline": "ret = OK;"
    },
    {
        "line": 24,
        "fullcodeline": "if (!ends_excmd2(*arg, skipwhite(*arg + 1)))"
    },
    {
        "line": 35,
        "fullcodeline": "if (evalarg->eval_cctx != NULL)"
    },
    {
        "line": 44,
        "fullcodeline": "if (get_function_body(&eap, &newlines, NULL,"
    },
    {
        "line": 50,
        "fullcodeline": "if (gap->ga_itemsize > 0)"
    },
    {
        "line": 93,
        "fullcodeline": "if (eap.nextcmd != NULL)"
    },
    {
        "line": 118,
        "fullcodeline": "if (ufunc == NULL)"
    },
    {
        "line": 121,
        "fullcodeline": "if (hash_add(&func_hashtab, UF2HIKEY(ufunc)) == FAIL)"
    },
    {
        "line": 136,
        "fullcodeline": "if (parse_argument_types(ufunc, argtypes, varargs) == FAIL)"
    },
    {
        "line": 147,
        "fullcodeline": "if (pt == NULL)"
    },
    {
        "line": 171,
        "fullcodeline": "if (lnum_save >= 0)"
    },
    {
        "line": 174,
        "fullcodeline": "if (newargs != NULL)"
    },
    {
        "line": 177,
        "fullcodeline": "if (ufunc != NULL)"
    },
    {
        "line": 26,
        "fullcodeline": "semsg(_(e_trailing_characters_str), *arg + 1);"
    },
    {
        "line": 36,
        "fullcodeline": "fill_exarg_from_cctx(&eap, evalarg->eval_cctx);"
    },
    {
        "line": 85,
        "fullcodeline": "plen = STRLEN(last);"
    },
    {
        "line": 86,
        "fullcodeline": "pnl = vim_strnsave((char_u *)\"\\n\", plen + 1);"
    },
    {
        "line": 95,
        "fullcodeline": "garray_T *tfgap = &evalarg->eval_tofree_ga;"
    },
    {
        "line": 112,
        "fullcodeline": "ret = OK;"
    },
    {
        "line": 143,
        "fullcodeline": "if (parse_return_type(ufunc, ret_type) == FAIL)"
    },
    {
        "line": 155,
        "fullcodeline": "ufunc->uf_flags |= FC_SANDBOX;"
    },
    {
        "line": 156,
        "fullcodeline": "if (!ASCII_ISUPPER(*ufunc->uf_name))"
    },
    {
        "line": 157,
        "fullcodeline": "ufunc->uf_flags |= FC_VIM9;"
    },
    {
        "line": 179,
        "fullcodeline": "func_clear(ufunc, TRUE);"
    },
    {
        "line": 39,
        "fullcodeline": "eap.getline = evalarg->eval_getline;"
    },
    {
        "line": 40,
        "fullcodeline": "eap.cookie = evalarg->eval_cookie;"
    },
    {
        "line": 57,
        "fullcodeline": "for (idx = 0; idx < newlines.ga_len; ++idx)"
    },
    {
        "line": 79,
        "fullcodeline": "if (eap.nextcmd != NULL)"
    },
    {
        "line": 87,
        "fullcodeline": "if (pnl != NULL)"
    },
    {
        "line": 101,
        "fullcodeline": "if (ga_grow(tfgap, 1) == OK)"
    },
    {
        "line": 59,
        "fullcodeline": "char_u  *p = skipwhite(((char_u **)newlines.ga_data)[idx]);"
    },
    {
        "line": 70,
        "fullcodeline": "plen = STRLEN(p);"
    },
    {
        "line": 71,
        "fullcodeline": "pnl = vim_strnsave((char_u *)\"\\n\", plen + 1);"
    },
    {
        "line": 77,
        "fullcodeline": "if (ga_grow(gap, 1) == FAIL || ga_grow(freegap, 1) == FAIL)"
    },
    {
        "line": 81,
        "fullcodeline": "last = cmdline;"
    },
    {
        "line": 61,
        "fullcodeline": "if (ga_grow(gap, 1) == FAIL || ga_grow(freegap, 1) == FAIL)"
    },
    {
        "line": 72,
        "fullcodeline": "if (pnl != NULL)"
    },
    {
        "line": 84,
        "fullcodeline": "last = (char_u *)\"}\";"
    },
    {
        "line": 68,
        "fullcodeline": "if (*p == NUL || vim9_comment_start(p))"
    },
    {
        "line": 69,
        "fullcodeline": "p = (char_u *)\"\";"
    },
    {
        "line": 74,
        "fullcodeline": "((char_u **)gap->ga_data)[gap->ga_len++] = pnl;"
    },
    {
        "line": 75,
        "fullcodeline": "((char_u **)freegap->ga_data)[freegap->ga_len++] = pnl;"
    }
]