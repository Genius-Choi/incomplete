[
    {
        "line": 3,
        "fullcodeline": "char_u\t*p = virp->vir_line + 1;"
    },
    {
        "line": 8,
        "fullcodeline": "int\t\tread_next = TRUE;"
    },
    {
        "line": 18,
        "fullcodeline": "if (*p == '<')"
    },
    {
        "line": 26,
        "fullcodeline": "ga_init2(&values, sizeof(bval_T), 20);"
    },
    {
        "line": 27,
        "fullcodeline": "bartype = getdigits(&p);"
    },
    {
        "line": 70,
        "fullcodeline": "ga_clear(&values);"
    },
    {
        "line": 74,
        "fullcodeline": "return viminfo_readline(virp);"
    },
    {
        "line": 22,
        "fullcodeline": "ga_add_string(&virp->vir_barlines, virp->vir_line);"
    },
    {
        "line": 63,
        "fullcodeline": "for (i = 0; i < values.ga_len; ++i)"
    },
    {
        "line": 44,
        "fullcodeline": "read_next = barline_parse(virp, p, &values);"
    },
    {
        "line": 45,
        "fullcodeline": "handle_viminfo_history(&values, writing);"
    },
    {
        "line": 49,
        "fullcodeline": "read_next = barline_parse(virp, p, &values);"
    },
    {
        "line": 50,
        "fullcodeline": "handle_viminfo_register(&values, force);"
    },
    {
        "line": 54,
        "fullcodeline": "read_next = barline_parse(virp, p, &values);"
    },
    {
        "line": 55,
        "fullcodeline": "handle_viminfo_mark(&values, force);"
    },
    {
        "line": 65,
        "fullcodeline": "vp = (bval_T *)values.ga_data + i;"
    },
    {
        "line": 68,
        "fullcodeline": "vim_free(vp->bv_tofree);"
    },
    {
        "line": 34,
        "fullcodeline": "if (!got_encoding)"
    },
    {
        "line": 66,
        "fullcodeline": "if (vp->bv_type == BVAL_STRING && vp->bv_allocated)"
    },
    {
        "line": 36,
        "fullcodeline": "read_next = barline_parse(virp, p, &values);"
    },
    {
        "line": 37,
        "fullcodeline": "vp = (bval_T *)values.ga_data;"
    },
    {
        "line": 61,
        "fullcodeline": "ga_add_string(&virp->vir_barlines, virp->vir_line);"
    },
    {
        "line": 67,
        "fullcodeline": "vim_free(vp->bv_string);"
    },
    {
        "line": 38,
        "fullcodeline": "if (values.ga_len > 0 && vp->bv_type == BVAL_NR)"
    },
    {
        "line": 39,
        "fullcodeline": "virp->vir_version = vp->bv_nr;"
    }
]