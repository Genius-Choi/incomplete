[
    {
        "line": 7,
        "fullcodeline": "char_u\t*line = NULL;"
    },
    {
        "line": 10,
        "fullcodeline": "char\t*errormsg = NULL;\t// error message"
    },
    {
        "line": 13,
        "fullcodeline": "int\t\tdid_emsg_before = did_emsg;"
    },
    {
        "line": 14,
        "fullcodeline": "int\t\tdid_emsg_silent_before = did_emsg_silent;"
    },
    {
        "line": 15,
        "fullcodeline": "int\t\tret = FAIL;"
    },
    {
        "line": 16,
        "fullcodeline": "sctx_T\tsave_current_sctx = current_sctx;"
    },
    {
        "line": 17,
        "fullcodeline": "int\t\tsave_estack_compiling = estack_compiling;"
    },
    {
        "line": 20,
        "fullcodeline": "int\t\tnew_def_function = FALSE;"
    },
    {
        "line": 24,
        "fullcodeline": "int\t\tdebug_lnum = -1;"
    },
    {
        "line": 27,
        "fullcodeline": "ga_init2(&lines_to_free, sizeof(char_u *), 50);"
    },
    {
        "line": 58,
        "fullcodeline": "ufunc->uf_def_status = UF_COMPILING;"
    },
    {
        "line": 60,
        "fullcodeline": "CLEAR_FIELD(cctx);"
    },
    {
        "line": 62,
        "fullcodeline": "cctx.ctx_compile_type = compile_type;"
    },
    {
        "line": 63,
        "fullcodeline": "cctx.ctx_ufunc = ufunc;"
    },
    {
        "line": 64,
        "fullcodeline": "cctx.ctx_lnum = -1;"
    },
    {
        "line": 65,
        "fullcodeline": "cctx.ctx_outer = outer_cctx;"
    },
    {
        "line": 66,
        "fullcodeline": "ga_init2(&cctx.ctx_locals, sizeof(lvar_T), 10);"
    },
    {
        "line": 68,
        "fullcodeline": "ga_init2(&cctx.ctx_type_stack, sizeof(type2_T), 50);"
    },
    {
        "line": 69,
        "fullcodeline": "ga_init2(&cctx.ctx_imports, sizeof(imported_T), 10);"
    },
    {
        "line": 70,
        "fullcodeline": "cctx.ctx_type_list = &ufunc->uf_type_list;"
    },
    {
        "line": 71,
        "fullcodeline": "ga_init2(&cctx.ctx_instr, sizeof(isn_T), 50);"
    },
    {
        "line": 72,
        "fullcodeline": "instr = &cctx.ctx_instr;"
    },
    {
        "line": 77,
        "fullcodeline": "current_sctx = ufunc->uf_script_ctx;"
    },
    {
        "line": 78,
        "fullcodeline": "current_sctx.sc_version = SCRIPT_VERSION_VIM9;"
    },
    {
        "line": 81,
        "fullcodeline": "cmdmod.cmod_flags &= ~CMOD_LEGACY;"
    },
    {
        "line": 84,
        "fullcodeline": "do_estack_push = !estack_top_is_ufunc(ufunc, 1);"
    },
    {
        "line": 87,
        "fullcodeline": "estack_compiling = TRUE;"
    },
    {
        "line": 150,
        "fullcodeline": "ufunc->uf_args_visible = ufunc->uf_args.ga_len;"
    },
    {
        "line": 702,
        "fullcodeline": "ret = OK;"
    },
    {
        "line": 745,
        "fullcodeline": "current_sctx = save_current_sctx;"
    },
    {
        "line": 746,
        "fullcodeline": "estack_compiling = save_estack_compiling;"
    },
    {
        "line": 747,
        "fullcodeline": "cmdmod.cmod_flags =\tsave_cmod_flags;"
    },
    {
        "line": 751,
        "fullcodeline": "ga_clear_strings(&lines_to_free);"
    },
    {
        "line": 752,
        "fullcodeline": "free_imported(&cctx);"
    },
    {
        "line": 753,
        "fullcodeline": "free_locals(&cctx);"
    },
    {
        "line": 754,
        "fullcodeline": "ga_clear(&cctx.ctx_type_stack);"
    },
    {
        "line": 31,
        "fullcodeline": "if (ufunc->uf_dfunc_idx > 0)"
    },
    {
        "line": 89,
        "fullcodeline": "if (check_args_shadowing(ufunc, &cctx) == FAIL)"
    },
    {
        "line": 92,
        "fullcodeline": "if (ufunc->uf_def_args.ga_len > 0)"
    },
    {
        "line": 642,
        "fullcodeline": "if (cctx.ctx_scope != NULL)"
    },
    {
        "line": 655,
        "fullcodeline": "if (!cctx.ctx_had_return)"
    },
    {
        "line": 671,
        "fullcodeline": "if (emsg_silent == 0 || did_emsg_silent == did_emsg_silent_before)"
    },
    {
        "line": 705,
        "fullcodeline": "if (ufunc->uf_def_status == UF_COMPILING)"
    },
    {
        "line": 734,
        "fullcodeline": "if (cctx.ctx_redir_lhs.lhs_name != NULL)"
    },
    {
        "line": 33,
        "fullcodeline": "dfunc_T *dfunc = ((dfunc_T *)def_functions.ga_data)"
    },
    {
        "line": 35,
        "fullcodeline": "isn_T\t*instr_dest = NULL;"
    },
    {
        "line": 49,
        "fullcodeline": "ga_clear_strings(&dfunc->df_var_names);"
    },
    {
        "line": 86,
        "fullcodeline": "estack_push_ufunc(ufunc, 1);"
    },
    {
        "line": 94,
        "fullcodeline": "int\tcount = ufunc->uf_def_args.ga_len;"
    },
    {
        "line": 95,
        "fullcodeline": "int\tfirst_def_arg = ufunc->uf_args.ga_len - count;"
    },
    {
        "line": 98,
        "fullcodeline": "int\toff = STACK_FRAME_SIZE + (ufunc->uf_va_name != NULL ? 1 : 0);"
    },
    {
        "line": 99,
        "fullcodeline": "int\tdid_set_arg_type = FALSE;"
    },
    {
        "line": 102,
        "fullcodeline": "SOURCING_LNUM = 0;  // line number unknown"
    },
    {
        "line": 158,
        "fullcodeline": "int\t    starts_with_colon = FALSE;"
    },
    {
        "line": 201,
        "fullcodeline": "CLEAR_FIELD(ea);"
    },
    {
        "line": 202,
        "fullcodeline": "ea.cmdlinep = &line;"
    },
    {
        "line": 203,
        "fullcodeline": "ea.cmd = skipwhite(line);"
    },
    {
        "line": 228,
        "fullcodeline": "cctx.ctx_prev_lnum = cctx.ctx_lnum + 1;"
    },
    {
        "line": 268,
        "fullcodeline": "cctx.ctx_has_cmdmod = FALSE;"
    },
    {
        "line": 278,
        "fullcodeline": "generate_cmdmods(&cctx, &local_cmdmod);"
    },
    {
        "line": 279,
        "fullcodeline": "undo_cmdmod(&local_cmdmod);"
    },
    {
        "line": 292,
        "fullcodeline": "p = ea.cmd;"
    },
    {
        "line": 323,
        "fullcodeline": "cmd = ea.cmd;"
    },
    {
        "line": 349,
        "fullcodeline": "p = find_ex_command(&ea, NULL,"
    },
    {
        "line": 423,
        "fullcodeline": "p = skipwhite(p);"
    },
    {
        "line": 630,
        "fullcodeline": "line = skipwhite(line);"
    },
    {
        "line": 633,
        "fullcodeline": "generate_undo_cmdmods(&cctx);"
    },
    {
        "line": 666,
        "fullcodeline": "generate_instr(&cctx, ISN_RETURN_VOID);"
    },
    {
        "line": 673,
        "fullcodeline": "dfunc_T\t*dfunc = ((dfunc_T *)def_functions.ga_data)"
    },
    {
        "line": 675,
        "fullcodeline": "dfunc->df_deleted = FALSE;"
    },
    {
        "line": 676,
        "fullcodeline": "dfunc->df_script_seq = current_sctx.sc_seq;"
    },
    {
        "line": 696,
        "fullcodeline": "dfunc->df_has_closure = cctx.ctx_has_closure;"
    },
    {
        "line": 699,
        "fullcodeline": "ufunc->uf_def_status = UF_COMPILED;"
    },
    {
        "line": 707,
        "fullcodeline": "dfunc_T\t*dfunc = ((dfunc_T *)def_functions.ga_data)"
    },
    {
        "line": 711,
        "fullcodeline": "clear_instr_ga(instr);"
    },
    {
        "line": 712,
        "fullcodeline": "VIM_CLEAR(dfunc->df_name);"
    },
    {
        "line": 713,
        "fullcodeline": "ga_clear_strings(&dfunc->df_var_names);"
    },
    {
        "line": 723,
        "fullcodeline": "ufunc->uf_def_status = UF_COMPILE_ERROR;"
    },
    {
        "line": 741,
        "fullcodeline": "vim_free(cctx.ctx_redir_lhs.lhs_name);"
    },
    {
        "line": 749,
        "fullcodeline": "estack_pop();"
    },
    {
        "line": 46,
        "fullcodeline": "if (instr_dest != NULL)"
    },
    {
        "line": 55,
        "fullcodeline": "new_def_function = TRUE;"
    },
    {
        "line": 103,
        "fullcodeline": "for (i = 0; i < count; ++i)"
    },
    {
        "line": 164,
        "fullcodeline": "if (did_emsg_before != did_emsg)"
    },
    {
        "line": 167,
        "fullcodeline": "if (line != NULL && *line == '|')"
    },
    {
        "line": 205,
        "fullcodeline": "if (*ea.cmd == '#')"
    },
    {
        "line": 222,
        "fullcodeline": "if (cctx.ctx_compile_type == CT_DEBUG && cctx.ctx_lnum != debug_lnum"
    },
    {
        "line": 269,
        "fullcodeline": "if (parse_command_modifiers(&ea, &errormsg, &local_cmdmod, FALSE)"
    },
    {
        "line": 283,
        "fullcodeline": "for (p = ea.cmd; p >= line; --p)"
    },
    {
        "line": 293,
        "fullcodeline": "if (!(local_cmdmod.cmod_flags & CMOD_LEGACY))"
    },
    {
        "line": 324,
        "fullcodeline": "if ((*cmd != '$' || starts_with_colon)"
    },
    {
        "line": 353,
        "fullcodeline": "if (p == NULL)"
    },
    {
        "line": 361,
        "fullcodeline": "if (local_cmdmod.cmod_flags & CMOD_LEGACY)"
    },
    {
        "line": 393,
        "fullcodeline": "if (p == ea.cmd && ea.cmdidx != CMD_SIZE)"
    },
    {
        "line": 409,
        "fullcodeline": "if (cctx.ctx_had_return"
    },
    {
        "line": 424,
        "fullcodeline": "if (ea.cmdidx != CMD_SIZE"
    },
    {
        "line": 628,
        "fullcodeline": "if (line == NULL)"
    },
    {
        "line": 635,
        "fullcodeline": "if (cctx.ctx_type_stack.ga_len < 0)"
    },
    {
        "line": 644,
        "fullcodeline": "if (cctx.ctx_scope->se_type == IF_SCOPE)"
    },
    {
        "line": 657,
        "fullcodeline": "if (ufunc->uf_ret_type->tt_type == VAR_UNKNOWN)"
    },
    {
        "line": 685,
        "fullcodeline": "if (cctx.ctx_compile_type == CT_DEBUG)"
    },
    {
        "line": 717,
        "fullcodeline": "if (!dfunc->df_deleted && new_def_function"
    },
    {
        "line": 725,
        "fullcodeline": "while (cctx.ctx_scope != NULL)"
    },
    {
        "line": 726,
        "fullcodeline": "drop_scope(&cctx);"
    },
    {
        "line": 728,
        "fullcodeline": "if (errormsg != NULL)"
    },
    {
        "line": 736,
        "fullcodeline": "if (ret == OK)"
    },
    {
        "line": 43,
        "fullcodeline": "case CT_NONE:   instr_dest = dfunc->df_instr; break;"
    },
    {
        "line": 44,
        "fullcodeline": "case CT_DEBUG:  instr_dest = dfunc->df_instr_debug; break;"
    },
    {
        "line": 48,
        "fullcodeline": "delete_def_function_contents(dfunc, FALSE);"
    },
    {
        "line": 53,
        "fullcodeline": "if (add_def_function(ufunc) == FAIL)"
    },
    {
        "line": 106,
        "fullcodeline": "int\t\targ_idx = first_def_arg + i;"
    },
    {
        "line": 107,
        "fullcodeline": "where_T\twhere = WHERE_INIT;"
    },
    {
        "line": 109,
        "fullcodeline": "int\t\tjump_instr_idx = instr->ga_len;"
    },
    {
        "line": 117,
        "fullcodeline": "ufunc->uf_args_visible = arg_idx;"
    },
    {
        "line": 120,
        "fullcodeline": "r = compile_expr0(&arg, &cctx);"
    },
    {
        "line": 128,
        "fullcodeline": "val_type = get_type_on_stack(&cctx, 0);"
    },
    {
        "line": 129,
        "fullcodeline": "where.wt_index = arg_idx + 1;"
    },
    {
        "line": 143,
        "fullcodeline": "isn = ((isn_T *)instr->ga_data) + jump_instr_idx;"
    },
    {
        "line": 144,
        "fullcodeline": "isn->isn_arg.jumparg.jump_where = instr->ga_len;"
    },
    {
        "line": 148,
        "fullcodeline": "set_function_type(ufunc);"
    },
    {
        "line": 169,
        "fullcodeline": "++line;"
    },
    {
        "line": 208,
        "fullcodeline": "line = (char_u *)\"\";"
    },
    {
        "line": 223,
        "fullcodeline": "&& cctx.ctx_skip != SKIP_YES)"
    },
    {
        "line": 225,
        "fullcodeline": "debug_lnum = cctx.ctx_lnum;"
    },
    {
        "line": 226,
        "fullcodeline": "generate_instr_debug(&cctx);"
    },
    {
        "line": 275,
        "fullcodeline": "line = (char_u *)\"\";"
    },
    {
        "line": 325,
        "fullcodeline": "&& (starts_with_colon || !(*cmd == '\\''"
    },
    {
        "line": 329,
        "fullcodeline": "ea.cmd = skip_range(ea.cmd, TRUE, NULL);"
    },
    {
        "line": 350,
        "fullcodeline": "starts_with_colon || (local_cmdmod.cmod_flags & CMOD_LEGACY)"
    },
    {
        "line": 363,
        "fullcodeline": "char_u *start = ea.cmd;"
    },
    {
        "line": 417,
        "fullcodeline": "&& ea.cmdidx != CMD_endtry)"
    },
    {
        "line": 419,
        "fullcodeline": "emsg(_(e_unreachable_code_after_return));"
    },
    {
        "line": 425,
        "fullcodeline": "&& ea.cmdidx != CMD_write && ea.cmdidx != CMD_read)"
    },
    {
        "line": 440,
        "fullcodeline": "ea.arg = p;"
    },
    {
        "line": 441,
        "fullcodeline": "line = compile_nested_function(&ea, &cctx, &lines_to_free);"
    },
    {
        "line": 445,
        "fullcodeline": "line = compile_return(p, check_return_type,"
    },
    {
        "line": 447,
        "fullcodeline": "cctx.ctx_had_return = TRUE;"
    },
    {
        "line": 451,
        "fullcodeline": "emsg(_(e_cannot_use_let_in_vim9_script));"
    },
    {
        "line": 458,
        "fullcodeline": "line = compile_assignment(p, &ea, ea.cmdidx, &cctx);"
    },
    {
        "line": 466,
        "fullcodeline": "line = compile_unletlock(p, &ea, &cctx);"
    },
    {
        "line": 470,
        "fullcodeline": "emsg(_(e_import_can_only_be_used_in_script));"
    },
    {
        "line": 471,
        "fullcodeline": "line = NULL;"
    },
    {
        "line": 475,
        "fullcodeline": "line = compile_if(p, &cctx);"
    },
    {
        "line": 478,
        "fullcodeline": "line = compile_elseif(p, &cctx);"
    },
    {
        "line": 479,
        "fullcodeline": "cctx.ctx_had_return = FALSE;"
    },
    {
        "line": 482,
        "fullcodeline": "line = compile_else(p, &cctx);"
    },
    {
        "line": 483,
        "fullcodeline": "cctx.ctx_had_return = FALSE;"
    },
    {
        "line": 486,
        "fullcodeline": "line = compile_endif(p, &cctx);"
    },
    {
        "line": 490,
        "fullcodeline": "line = compile_while(p, &cctx);"
    },
    {
        "line": 493,
        "fullcodeline": "line = compile_endwhile(p, &cctx);"
    },
    {
        "line": 494,
        "fullcodeline": "cctx.ctx_had_return = FALSE;"
    },
    {
        "line": 498,
        "fullcodeline": "line = compile_for(p, &cctx);"
    },
    {
        "line": 501,
        "fullcodeline": "line = compile_endfor(p, &cctx);"
    },
    {
        "line": 502,
        "fullcodeline": "cctx.ctx_had_return = FALSE;"
    },
    {
        "line": 505,
        "fullcodeline": "line = compile_continue(p, &cctx);"
    },
    {
        "line": 508,
        "fullcodeline": "line = compile_break(p, &cctx);"
    },
    {
        "line": 512,
        "fullcodeline": "line = compile_try(p, &cctx);"
    },
    {
        "line": 515,
        "fullcodeline": "line = compile_catch(p, &cctx);"
    },
    {
        "line": 516,
        "fullcodeline": "cctx.ctx_had_return = FALSE;"
    },
    {
        "line": 519,
        "fullcodeline": "line = compile_finally(p, &cctx);"
    },
    {
        "line": 520,
        "fullcodeline": "cctx.ctx_had_return = FALSE;"
    },
    {
        "line": 523,
        "fullcodeline": "line = compile_endtry(p, &cctx);"
    },
    {
        "line": 524,
        "fullcodeline": "cctx.ctx_had_return = FALSE;"
    },
    {
        "line": 527,
        "fullcodeline": "line = compile_throw(p, &cctx);"
    },
    {
        "line": 531,
        "fullcodeline": "line = compile_eval(p, &cctx);"
    },
    {
        "line": 540,
        "fullcodeline": "line = compile_mult_expr(p, ea.cmdidx, &cctx);"
    },
    {
        "line": 544,
        "fullcodeline": "ea.cmd = cmd;"
    },
    {
        "line": 545,
        "fullcodeline": "line = compile_put(p, &ea, &cctx);"
    },
    {
        "line": 561,
        "fullcodeline": "ea.arg = p;"
    },
    {
        "line": 562,
        "fullcodeline": "line = compile_redir(line, &ea, &cctx);"
    },
    {
        "line": 575,
        "fullcodeline": "ex_ni(&ea);"
    },
    {
        "line": 576,
        "fullcodeline": "line = NULL;"
    },
    {
        "line": 586,
        "fullcodeline": "not_in_vim9(&ea);"
    },
    {
        "line": 596,
        "fullcodeline": "line = (char_u *)\"\";"
    },
    {
        "line": 608,
        "fullcodeline": "ea.arg = p;"
    },
    {
        "line": 623,
        "fullcodeline": "ea.arg = p;"
    },
    {
        "line": 624,
        "fullcodeline": "line = compile_exec(line, &ea, &cctx);"
    },
    {
        "line": 637,
        "fullcodeline": "iemsg(\"Type stack underflow\");"
    },
    {
        "line": 645,
        "fullcodeline": "emsg(_(e_missing_endif));"
    },
    {
        "line": 658,
        "fullcodeline": "ufunc->uf_ret_type = &t_void;"
    },
    {
        "line": 687,
        "fullcodeline": "dfunc->df_instr_debug = instr->ga_data;"
    },
    {
        "line": 688,
        "fullcodeline": "dfunc->df_instr_debug_count = instr->ga_len;"
    },
    {
        "line": 698,
        "fullcodeline": "ufunc->uf_flags |= FC_CLOSURE;"
    },
    {
        "line": 718,
        "fullcodeline": "&& ufunc->uf_dfunc_idx == def_functions.ga_len - 1)"
    },
    {
        "line": 720,
        "fullcodeline": "--def_functions.ga_len;"
    },
    {
        "line": 721,
        "fullcodeline": "ufunc->uf_dfunc_idx = 0;"
    },
    {
        "line": 729,
        "fullcodeline": "emsg(errormsg);"
    },
    {
        "line": 738,
        "fullcodeline": "emsg(_(e_missing_redir_end));"
    },
    {
        "line": 739,
        "fullcodeline": "ret = FAIL;"
    },
    {
        "line": 113,
        "fullcodeline": "if (generate_JUMP_IF_ARG_SET(&cctx, i - count - off) == FAIL)"
    },
    {
        "line": 122,
        "fullcodeline": "if (r == FAIL)"
    },
    {
        "line": 130,
        "fullcodeline": "if (ufunc->uf_arg_types[arg_idx] == &t_unknown)"
    },
    {
        "line": 139,
        "fullcodeline": "if (generate_STORE(&cctx, ISN_STORE, i - count - off, NULL) == FAIL)"
    },
    {
        "line": 236,
        "fullcodeline": "scopetype_T stype = cctx.ctx_scope == NULL"
    },
    {
        "line": 272,
        "fullcodeline": "if (errormsg != NULL)"
    },
    {
        "line": 285,
        "fullcodeline": "if (*p == ':')"
    },
    {
        "line": 287,
        "fullcodeline": "if (p < ea.cmd && !VIM_ISWHITE(*p))"
    },
    {
        "line": 295,
        "fullcodeline": "if (checkforcmd(&ea.cmd, \"call\", 3))"
    },
    {
        "line": 304,
        "fullcodeline": "if (!starts_with_colon)"
    },
    {
        "line": 330,
        "fullcodeline": "if (ea.cmd > cmd)"
    },
    {
        "line": 355,
        "fullcodeline": "if (cctx.ctx_skip != SKIP_YES)"
    },
    {
        "line": 387,
        "fullcodeline": "if (checkforcmd(&start, \"return\", 4))"
    },
    {
        "line": 395,
        "fullcodeline": "if (cctx.ctx_skip == SKIP_YES && ea.cmdidx != CMD_eval)"
    },
    {
        "line": 416,
        "fullcodeline": "&& ea.cmdidx != CMD_finally"
    },
    {
        "line": 427,
        "fullcodeline": "if (ea.cmdidx >= 0)"
    },
    {
        "line": 429,
        "fullcodeline": "if ((ea.argt & EX_BANG) && *p == '!')"
    },
    {
        "line": 459,
        "fullcodeline": "if (line == p)"
    },
    {
        "line": 549,
        "fullcodeline": "if (check_global_and_subst(ea.cmd, p) == FAIL)"
    },
    {
        "line": 551,
        "fullcodeline": "if (cctx.ctx_skip == SKIP_YES)"
    },
    {
        "line": 590,
        "fullcodeline": "if (cctx.ctx_skip != SKIP_YES)"
    },
    {
        "line": 609,
        "fullcodeline": "if (vim_strchr(line, '\\n') == NULL)"
    },
    {
        "line": 618,
        "fullcodeline": "if (check_global_and_subst(ea.cmd, p) == FAIL)"
    },
    {
        "line": 692,
        "fullcodeline": "dfunc->df_instr = instr->ga_data;"
    },
    {
        "line": 693,
        "fullcodeline": "dfunc->df_instr_count = instr->ga_len;"
    },
    {
        "line": 132,
        "fullcodeline": "did_set_arg_type = TRUE;"
    },
    {
        "line": 133,
        "fullcodeline": "ufunc->uf_arg_types[arg_idx] = val_type;"
    },
    {
        "line": 170,
        "fullcodeline": "else if (line != NULL && *skipwhite(line) != NUL"
    },
    {
        "line": 239,
        "fullcodeline": "if (stype == BLOCK_SCOPE)"
    },
    {
        "line": 249,
        "fullcodeline": "if (line != NULL)"
    },
    {
        "line": 259,
        "fullcodeline": "line = compile_block(ea.cmd, &cctx);"
    },
    {
        "line": 286,
        "fullcodeline": "starts_with_colon = TRUE;"
    },
    {
        "line": 309,
        "fullcodeline": "assign = may_compile_assignment(&ea, &line, &cctx);"
    },
    {
        "line": 338,
        "fullcodeline": "ea.addr_count = 1;"
    },
    {
        "line": 356,
        "fullcodeline": "emsg(_(e_ambiguous_use_of_user_defined_command));"
    },
    {
        "line": 381,
        "fullcodeline": "semsg(_(e_cannot_use_legacy_with_command_str), ea.cmd);"
    },
    {
        "line": 388,
        "fullcodeline": "ea.cmdidx = CMD_return;"
    },
    {
        "line": 397,
        "fullcodeline": "line += STRLEN(line);"
    },
    {
        "line": 415,
        "fullcodeline": "&& ea.cmdidx != CMD_catch"
    },
    {
        "line": 428,
        "fullcodeline": "ea.argt = excmd_get_argt(ea.cmdidx);"
    },
    {
        "line": 431,
        "fullcodeline": "ea.forceit = TRUE;"
    },
    {
        "line": 432,
        "fullcodeline": "p = skipwhite(p + 1);"
    },
    {
        "line": 446,
        "fullcodeline": "local_cmdmod.cmod_flags & CMOD_LEGACY, &cctx);"
    },
    {
        "line": 460,
        "fullcodeline": "line = NULL;"
    },
    {
        "line": 552,
        "fullcodeline": "line = (char_u *)\"\";"
    },
    {
        "line": 592,
        "fullcodeline": "semsg(_(e_invalid_command_str), ea.cmd);"
    },
    {
        "line": 610,
        "fullcodeline": "line = compile_exec(line, &ea, &cctx);"
    },
    {
        "line": 646,
        "fullcodeline": "else if (cctx.ctx_scope->se_type == WHILE_SCOPE)"
    },
    {
        "line": 659,
        "fullcodeline": "else if (ufunc->uf_ret_type->tt_type != VAR_VOID)"
    },
    {
        "line": 730,
        "fullcodeline": "else if (did_emsg == did_emsg_before)"
    },
    {
        "line": 171,
        "fullcodeline": "&& !(*line == '#' && (line == cctx.ctx_line_start"
    },
    {
        "line": 174,
        "fullcodeline": "semsg(_(e_trailing_characters_str), line);"
    },
    {
        "line": 241,
        "fullcodeline": "compile_endblock(&cctx);"
    },
    {
        "line": 242,
        "fullcodeline": "line = ea.cmd;"
    },
    {
        "line": 250,
        "fullcodeline": "line = skipwhite(ea.cmd + 1);"
    },
    {
        "line": 257,
        "fullcodeline": "if (ends_excmd(*skipwhite(ea.cmd + 1)))"
    },
    {
        "line": 297,
        "fullcodeline": "if (*ea.cmd == '(')"
    },
    {
        "line": 310,
        "fullcodeline": "if (assign == OK)"
    },
    {
        "line": 312,
        "fullcodeline": "if (assign == FAIL)"
    },
    {
        "line": 326,
        "fullcodeline": "|| (cmd[0] != NUL && cmd[0] == cmd[1]"
    },
    {
        "line": 332,
        "fullcodeline": "if (!starts_with_colon"
    },
    {
        "line": 339,
        "fullcodeline": "if (ends_excmd2(line, ea.cmd))"
    },
    {
        "line": 390,
        "fullcodeline": "ea.cmdidx = CMD_legacy;"
    },
    {
        "line": 414,
        "fullcodeline": "&& ea.cmdidx != CMD_endwhile"
    },
    {
        "line": 555,
        "fullcodeline": "ea.arg = p;"
    },
    {
        "line": 556,
        "fullcodeline": "line = compile_substitute(line, &ea, &cctx);"
    },
    {
        "line": 614,
        "fullcodeline": "line = compile_script(line, &cctx);"
    },
    {
        "line": 647,
        "fullcodeline": "emsg(_(e_missing_endwhile));"
    },
    {
        "line": 661,
        "fullcodeline": "emsg(_(e_missing_return_statement));"
    },
    {
        "line": 731,
        "fullcodeline": "emsg(_(e_compiling_def_function_failed));"
    },
    {
        "line": 135,
        "fullcodeline": "else if (need_type_where(val_type, ufunc->uf_arg_types[arg_idx],"
    },
    {
        "line": 246,
        "fullcodeline": "emsg(_(e_using_rcurly_outside_if_block_scope));"
    },
    {
        "line": 299,
        "fullcodeline": "ea.cmd = p;"
    },
    {
        "line": 327,
        "fullcodeline": "&& (*cmd == '+' || *cmd == '-')))))"
    },
    {
        "line": 333,
        "fullcodeline": "&& !(local_cmdmod.cmod_flags & CMOD_LEGACY))"
    },
    {
        "line": 335,
        "fullcodeline": "semsg(_(e_colon_required_before_range_str), cmd);"
    },
    {
        "line": 342,
        "fullcodeline": "generate_EXEC(&cctx, ISN_EXECRANGE,"
    },
    {
        "line": 344,
        "fullcodeline": "line = ea.cmd;"
    },
    {
        "line": 400,
        "fullcodeline": "else if (ea.cmdidx != CMD_eval)"
    },
    {
        "line": 413,
        "fullcodeline": "&& ea.cmdidx != CMD_endfor"
    },
    {
        "line": 177,
        "fullcodeline": "else if (line != NULL && vim9_bad_comment(skipwhite(line)))"
    },
    {
        "line": 301,
        "fullcodeline": "ea.cmd = skipwhite(ea.cmd);"
    },
    {
        "line": 343,
        "fullcodeline": "vim_strnsave(cmd, ea.cmd - cmd));"
    },
    {
        "line": 404,
        "fullcodeline": "semsg(_(e_command_not_recognized_str), ea.cmd);"
    },
    {
        "line": 412,
        "fullcodeline": "&& ea.cmdidx != CMD_endif"
    },
    {
        "line": 648,
        "fullcodeline": "else if (cctx.ctx_scope->se_type == FOR_SCOPE)"
    },
    {
        "line": 136,
        "fullcodeline": "-1, where, &cctx, FALSE, FALSE) == FAIL)"
    },
    {
        "line": 172,
        "fullcodeline": "|| VIM_ISWHITE(line[-1]))))"
    },
    {
        "line": 411,
        "fullcodeline": "&& ea.cmdidx != CMD_else"
    },
    {
        "line": 649,
        "fullcodeline": "emsg(_(e_missing_endfor));"
    },
    {
        "line": 181,
        "fullcodeline": "line = next_line_from_context(&cctx, FALSE);"
    },
    {
        "line": 410,
        "fullcodeline": "&& ea.cmdidx != CMD_elseif"
    },
    {
        "line": 651,
        "fullcodeline": "emsg(_(e_missing_rcurly));"
    },
    {
        "line": 182,
        "fullcodeline": "if (cctx.ctx_lnum >= ufunc->uf_lines.ga_len)"
    },
    {
        "line": 193,
        "fullcodeline": "if (line != NULL)"
    },
    {
        "line": 195,
        "fullcodeline": "line = vim_strsave(line);"
    },
    {
        "line": 196,
        "fullcodeline": "if (ga_add_string(&lines_to_free, line) == FAIL)"
    }
]