[
    {
        "line": 8,
        "fullcodeline": "CalculateActivationRange(params->activation, &output_activation_min,"
    },
    {
        "line": 10,
        "fullcodeline": "const int input_size = NumElements(input) / SizeOfDimension(input, 0);"
    },
    {
        "line": 11,
        "fullcodeline": "const int batch_size = SizeOfDimension(input, 0);"
    },
    {
        "line": 13,
        "fullcodeline": "TF_LITE_ENSURE_OK(context,"
    },
    {
        "line": 16,
        "fullcodeline": "int8_t* quantized_input_ptr_batch = input_quantized->data.int8;"
    },
    {
        "line": 18,
        "fullcodeline": "TF_LITE_ENSURE_OK(context,"
    },
    {
        "line": 21,
        "fullcodeline": "float* scaling_factors_ptr = GetTensorData<float>(scaling_factors_tensor);"
    },
    {
        "line": 23,
        "fullcodeline": "TF_LITE_ENSURE_OK(context,"
    },
    {
        "line": 26,
        "fullcodeline": "int32_t* input_offset_ptr = GetTensorData<int32_t>(input_offset_tensor);"
    },
    {
        "line": 37,
        "fullcodeline": "op_params.padding_type = PaddingType::kSame;"
    },
    {
        "line": 38,
        "fullcodeline": "op_params.padding_values.width = data->padding.width;"
    },
    {
        "line": 39,
        "fullcodeline": "op_params.padding_values.height = data->padding.height;"
    },
    {
        "line": 40,
        "fullcodeline": "op_params.stride_width = params->stride_width;"
    },
    {
        "line": 41,
        "fullcodeline": "op_params.stride_height = params->stride_height;"
    },
    {
        "line": 42,
        "fullcodeline": "op_params.dilation_width_factor = params->dilation_width_factor;"
    },
    {
        "line": 43,
        "fullcodeline": "op_params.dilation_height_factor = params->dilation_height_factor;"
    },
    {
        "line": 44,
        "fullcodeline": "op_params.depth_multiplier = params->depth_multiplier;"
    },
    {
        "line": 46,
        "fullcodeline": "op_params.weights_offset = 0;"
    },
    {
        "line": 47,
        "fullcodeline": "op_params.float_activation_min = output_activation_min;"
    },
    {
        "line": 48,
        "fullcodeline": "op_params.float_activation_max = output_activation_max;"
    },
    {
        "line": 49,
        "fullcodeline": "const auto* affine_quantization ="
    },
    {
        "line": 14,
        "fullcodeline": "GetTemporarySafe(context, node, data->input_quantized_index,"
    },
    {
        "line": 19,
        "fullcodeline": "GetTemporarySafe(context, node, data->scaling_factors_index,"
    },
    {
        "line": 24,
        "fullcodeline": "GetTemporarySafe(context, node, data->input_offset_index,"
    },
    {
        "line": 28,
        "fullcodeline": "for (int b = 0; b < batch_size; ++b) {"
    },
    {
        "line": 51,
        "fullcodeline": "if (kernel_type == kReference) {"
    },
    {
        "line": 29,
        "fullcodeline": "const int offset = b * input_size;"
    },
    {
        "line": 30,
        "fullcodeline": "tensor_utils::AsymmetricQuantizeFloats("
    },
    {
        "line": 52,
        "fullcodeline": "reference_integer_ops::DepthwiseConvHybridPerChannel("
    },
    {
        "line": 31,
        "fullcodeline": "GetTensorData<float>(input) + offset, input_size,"
    },
    {
        "line": 32,
        "fullcodeline": "quantized_input_ptr_batch + offset, &scaling_factors_ptr[b],"
    },
    {
        "line": 53,
        "fullcodeline": "op_params, scaling_factors_ptr, GetTensorShape(input),"
    },
    {
        "line": 54,
        "fullcodeline": "quantized_input_ptr_batch, GetTensorShape(filter),"
    },
    {
        "line": 55,
        "fullcodeline": "GetTensorData<int8>(filter), GetTensorShape(bias),"
    },
    {
        "line": 56,
        "fullcodeline": "GetTensorData<float>(bias), GetTensorShape(output),"
    },
    {
        "line": 57,
        "fullcodeline": "GetTensorData<float>(output), affine_quantization->scale->data,"
    },
    {
        "line": 60,
        "fullcodeline": "optimized_integer_ops::DepthwiseConvHybridPerChannel("
    },
    {
        "line": 61,
        "fullcodeline": "op_params, scaling_factors_ptr, GetTensorShape(input),"
    },
    {
        "line": 62,
        "fullcodeline": "quantized_input_ptr_batch, GetTensorShape(filter),"
    },
    {
        "line": 63,
        "fullcodeline": "GetTensorData<int8>(filter), GetTensorShape(bias),"
    },
    {
        "line": 64,
        "fullcodeline": "GetTensorData<float>(bias), GetTensorShape(output),"
    },
    {
        "line": 65,
        "fullcodeline": "GetTensorData<float>(output), affine_quantization->scale->data,"
    },
    {
        "line": 66,
        "fullcodeline": "input_offset_ptr, CpuBackendContext::GetFromContext(context));"
    }
]