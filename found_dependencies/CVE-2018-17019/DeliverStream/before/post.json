[
    {
        "line": 3,
        "fullcodeline": "tcp::TCP_ApplicationAnalyzer::DeliverStream(length, line, orig);"
    },
    {
        "line": 18,
        "fullcodeline": "string myline = string((const char*) line, length);"
    },
    {
        "line": 19,
        "fullcodeline": "SkipLeadingWhitespace(myline);"
    },
    {
        "line": 28,
        "fullcodeline": "string prefix = \"\";"
    },
    {
        "line": 46,
        "fullcodeline": "int code = 0;"
    },
    {
        "line": 47,
        "fullcodeline": "string command = \"\";"
    },
    {
        "line": 95,
        "fullcodeline": "string params = myline;"
    },
    {
        "line": 12,
        "fullcodeline": "if ( length > 512 )"
    },
    {
        "line": 21,
        "fullcodeline": "if ( myline.length() < 3 )"
    },
    {
        "line": 29,
        "fullcodeline": "if ( myline[0] == ':' )"
    },
    {
        "line": 51,
        "fullcodeline": "if ( myline.length() < 3 )"
    },
    {
        "line": 59,
        "fullcodeline": "if ( isdigit(myline[0]) )"
    },
    {
        "line": 98,
        "fullcodeline": "if ( command == \"STARTTLS\" )"
    },
    {
        "line": 102,
        "fullcodeline": "if ( orig && orig_status == WAIT_FOR_REGISTRATION )"
    },
    {
        "line": 126,
        "fullcodeline": "if ( ! orig && resp_status == WAIT_FOR_REGISTRATION )"
    },
    {
        "line": 147,
        "fullcodeline": "if ( code > 0 )"
    },
    {
        "line": 565,
        "fullcodeline": "if ( command.size() > 20 )"
    },
    {
        "line": 1159,
        "fullcodeline": "if ( orig_status == REGISTERED && resp_status == REGISTERED &&"
    },
    {
        "line": 7,
        "fullcodeline": "ForwardStream(length, line, orig);"
    },
    {
        "line": 14,
        "fullcodeline": "Weird(\"irc_line_size_exceeded\");"
    },
    {
        "line": 23,
        "fullcodeline": "Weird(\"irc_line_too_short\");"
    },
    {
        "line": 31,
        "fullcodeline": "auto pos = myline.find(' ');"
    },
    {
        "line": 38,
        "fullcodeline": "prefix = myline.substr(1, pos - 1);"
    },
    {
        "line": 39,
        "fullcodeline": "myline = myline.substr(pos + 1);  // remove prefix from line"
    },
    {
        "line": 40,
        "fullcodeline": "SkipLeadingWhitespace(myline);"
    },
    {
        "line": 44,
        "fullcodeline": "ProtocolConfirmation();"
    },
    {
        "line": 53,
        "fullcodeline": "Weird(\"irc_invalid_line\");"
    },
    {
        "line": 54,
        "fullcodeline": "ProtocolViolation(\"line too short\");"
    },
    {
        "line": 567,
        "fullcodeline": "Weird(\"irc_invalid_command\");"
    },
    {
        "line": 1160,
        "fullcodeline": "orig_zip_status == ACCEPT_ZIP && resp_zip_status == ACCEPT_ZIP )"
    },
    {
        "line": 1162,
        "fullcodeline": "orig_zip_status = ZIP_LOADED;"
    },
    {
        "line": 1163,
        "fullcodeline": "resp_zip_status = ZIP_LOADED;"
    },
    {
        "line": 1164,
        "fullcodeline": "AddSupportAnalyzer(new zip::ZIP_Analyzer(Conn(), true));"
    },
    {
        "line": 1165,
        "fullcodeline": "AddSupportAnalyzer(new zip::ZIP_Analyzer(Conn(), false));"
    },
    {
        "line": 32,
        "fullcodeline": "if ( pos == string::npos )"
    },
    {
        "line": 61,
        "fullcodeline": "if ( isdigit(myline[1]) && isdigit(myline[2]) &&"
    },
    {
        "line": 77,
        "fullcodeline": "auto pos = myline.find(' ');"
    },
    {
        "line": 82,
        "fullcodeline": "command = myline.substr(0, pos);"
    },
    {
        "line": 90,
        "fullcodeline": "myline = myline.substr(pos + 1);"
    },
    {
        "line": 91,
        "fullcodeline": "SkipLeadingWhitespace(myline);"
    },
    {
        "line": 104,
        "fullcodeline": "if ( command == \"PASS\" )"
    },
    {
        "line": 120,
        "fullcodeline": "if ( command == \"SERVER\" && prefix == \"\")"
    },
    {
        "line": 128,
        "fullcodeline": "if ( command == \"PASS\" )"
    },
    {
        "line": 142,
        "fullcodeline": "if ( command == \"SERVER\" && prefix == \"\")"
    },
    {
        "line": 568,
        "fullcodeline": "if ( ++invalid_msg_count > invalid_msg_max_count )"
    },
    {
        "line": 34,
        "fullcodeline": "Weird(\"irc_invalid_line\");"
    },
    {
        "line": 62,
        "fullcodeline": "myline[3] == ' ')"
    },
    {
        "line": 64,
        "fullcodeline": "code = (myline[0] - '0') * 100 +"
    },
    {
        "line": 66,
        "fullcodeline": "myline = myline.substr(4);"
    },
    {
        "line": 79,
        "fullcodeline": "if ( pos == string::npos )"
    },
    {
        "line": 83,
        "fullcodeline": "for ( unsigned int i = 0; i < command.size(); ++i )"
    },
    {
        "line": 84,
        "fullcodeline": "command[i] = toupper(command[i]);"
    },
    {
        "line": 87,
        "fullcodeline": "if ( pos == myline.length() )"
    },
    {
        "line": 106,
        "fullcodeline": "vector<string> p = SplitWords(params,' ');"
    },
    {
        "line": 122,
        "fullcodeline": "orig_status = REGISTERED;"
    },
    {
        "line": 130,
        "fullcodeline": "vector<string> p = SplitWords(params,' ');"
    },
    {
        "line": 143,
        "fullcodeline": "resp_status = REGISTERED;"
    },
    {
        "line": 546,
        "fullcodeline": "StartTLS();"
    },
    {
        "line": 551,
        "fullcodeline": "val_list* vl = new val_list;"
    },
    {
        "line": 552,
        "fullcodeline": "vl->append(BuildConnVal());"
    },
    {
        "line": 553,
        "fullcodeline": "vl->append(new Val(orig, TYPE_BOOL));"
    },
    {
        "line": 554,
        "fullcodeline": "vl->append(new StringVal(prefix.c_str()));"
    },
    {
        "line": 555,
        "fullcodeline": "vl->append(new Val(code, TYPE_COUNT));"
    },
    {
        "line": 556,
        "fullcodeline": "vl->append(new StringVal(params.c_str()));"
    },
    {
        "line": 558,
        "fullcodeline": "ConnectionEvent(irc_reply, vl);"
    },
    {
        "line": 570,
        "fullcodeline": "Weird(\"irc_too_many_invalid\");"
    },
    {
        "line": 571,
        "fullcodeline": "ProtocolViolation(\"too many long lines\");"
    },
    {
        "line": 577,
        "fullcodeline": "else if ( ( irc_privmsg_message || irc_dcc_message ) && command == \"PRIVMSG\")"
    },
    {
        "line": 70,
        "fullcodeline": "Weird(\"irc_invalid_reply_number\");"
    },
    {
        "line": 71,
        "fullcodeline": "ProtocolViolation(\"invalid reply number\");"
    },
    {
        "line": 80,
        "fullcodeline": "pos = myline.length();"
    },
    {
        "line": 88,
        "fullcodeline": "pos--;"
    },
    {
        "line": 107,
        "fullcodeline": "if ( p.size() > 3 &&"
    },
    {
        "line": 131,
        "fullcodeline": "if ( p.size() > 3 &&"
    },
    {
        "line": 173,
        "fullcodeline": "if ( ! irc_network_info )"
    },
    {
        "line": 177,
        "fullcodeline": "vector<string> parts = SplitWords(params, ' ');"
    },
    {
        "line": 178,
        "fullcodeline": "int users = 0;"
    },
    {
        "line": 179,
        "fullcodeline": "int services = 0;"
    },
    {
        "line": 180,
        "fullcodeline": "int servers = 0;"
    },
    {
        "line": 193,
        "fullcodeline": "val_list* vl = new val_list;"
    },
    {
        "line": 194,
        "fullcodeline": "vl->append(BuildConnVal());"
    },
    {
        "line": 195,
        "fullcodeline": "vl->append(new Val(orig, TYPE_BOOL));"
    },
    {
        "line": 196,
        "fullcodeline": "vl->append(new Val(users, TYPE_INT));"
    },
    {
        "line": 197,
        "fullcodeline": "vl->append(new Val(services, TYPE_INT));"
    },
    {
        "line": 198,
        "fullcodeline": "vl->append(new Val(servers, TYPE_INT));"
    },
    {
        "line": 200,
        "fullcodeline": "ConnectionEvent(irc_network_info, vl);"
    },
    {
        "line": 206,
        "fullcodeline": "if ( ! irc_names_info )"
    },
    {
        "line": 210,
        "fullcodeline": "vector<string> parts = SplitWords(params, ' ');"
    },
    {
        "line": 213,
        "fullcodeline": "parts.erase(parts.begin());"
    },
    {
        "line": 220,
        "fullcodeline": "string type = parts[0];"
    },
    {
        "line": 221,
        "fullcodeline": "string channel = parts[1];"
    },
    {
        "line": 224,
        "fullcodeline": "parts.erase(parts.begin());"
    },
    {
        "line": 225,
        "fullcodeline": "parts.erase(parts.begin());"
    },
    {
        "line": 230,
        "fullcodeline": "val_list* vl = new val_list;"
    },
    {
        "line": 231,
        "fullcodeline": "vl->append(BuildConnVal());"
    },
    {
        "line": 232,
        "fullcodeline": "vl->append(new Val(orig, TYPE_BOOL));"
    },
    {
        "line": 233,
        "fullcodeline": "vl->append(new StringVal(type.c_str()));"
    },
    {
        "line": 234,
        "fullcodeline": "vl->append(new StringVal(channel.c_str()));"
    },
    {
        "line": 236,
        "fullcodeline": "TableVal* set = new TableVal(string_set);"
    },
    {
        "line": 245,
        "fullcodeline": "vl->append(set);"
    },
    {
        "line": 247,
        "fullcodeline": "ConnectionEvent(irc_names_info, vl);"
    },
    {
        "line": 253,
        "fullcodeline": "if ( ! irc_server_info )"
    },
    {
        "line": 257,
        "fullcodeline": "vector<string> parts = SplitWords(params, ' ');"
    },
    {
        "line": 258,
        "fullcodeline": "int users = 0;"
    },
    {
        "line": 259,
        "fullcodeline": "int services = 0;"
    },
    {
        "line": 260,
        "fullcodeline": "int servers = 0;"
    },
    {
        "line": 275,
        "fullcodeline": "val_list* vl = new val_list;"
    },
    {
        "line": 276,
        "fullcodeline": "vl->append(BuildConnVal());"
    },
    {
        "line": 277,
        "fullcodeline": "vl->append(new Val(orig, TYPE_BOOL));"
    },
    {
        "line": 278,
        "fullcodeline": "vl->append(new Val(users, TYPE_INT));"
    },
    {
        "line": 279,
        "fullcodeline": "vl->append(new Val(services, TYPE_INT));"
    },
    {
        "line": 280,
        "fullcodeline": "vl->append(new Val(servers, TYPE_INT));"
    },
    {
        "line": 282,
        "fullcodeline": "ConnectionEvent(irc_server_info, vl);"
    },
    {
        "line": 288,
        "fullcodeline": "if ( ! irc_channel_info )"
    },
    {
        "line": 292,
        "fullcodeline": "vector<string> parts = SplitWords(params, ' ');"
    },
    {
        "line": 293,
        "fullcodeline": "int channels = 0;"
    },
    {
        "line": 298,
        "fullcodeline": "val_list* vl = new val_list;"
    },
    {
        "line": 299,
        "fullcodeline": "vl->append(BuildConnVal());"
    },
    {
        "line": 300,
        "fullcodeline": "vl->append(new Val(orig, TYPE_BOOL));"
    },
    {
        "line": 301,
        "fullcodeline": "vl->append(new Val(channels, TYPE_INT));"
    },
    {
        "line": 303,
        "fullcodeline": "ConnectionEvent(irc_channel_info, vl);"
    },
    {
        "line": 315,
        "fullcodeline": "const char* prefix = params.c_str();"
    },
    {
        "line": 317,
        "fullcodeline": "const char* eop = strchr(prefix, ' ');"
    },
    {
        "line": 324,
        "fullcodeline": "const char *msg = strchr(++eop, ':');"
    },
    {
        "line": 331,
        "fullcodeline": "val_list* vl = new val_list;"
    },
    {
        "line": 332,
        "fullcodeline": "vl->append(BuildConnVal());"
    },
    {
        "line": 333,
        "fullcodeline": "vl->append(new Val(orig, TYPE_BOOL));"
    },
    {
        "line": 334,
        "fullcodeline": "vl->append(new StringVal(eop - prefix, prefix));"
    },
    {
        "line": 335,
        "fullcodeline": "vl->append(new StringVal(++msg));"
    },
    {
        "line": 336,
        "fullcodeline": "ConnectionEvent(irc_global_users, vl);"
    },
    {
        "line": 342,
        "fullcodeline": "if ( ! irc_whois_user_line )"
    },
    {
        "line": 346,
        "fullcodeline": "vector<string> parts = SplitWords(params, ' ');"
    },
    {
        "line": 356,
        "fullcodeline": "val_list* vl = new val_list;"
    },
    {
        "line": 357,
        "fullcodeline": "vl->append(BuildConnVal());"
    },
    {
        "line": 358,
        "fullcodeline": "vl->append(new Val(orig, TYPE_BOOL));"
    },
    {
        "line": 359,
        "fullcodeline": "vl->append(new StringVal(parts[0].c_str()));"
    },
    {
        "line": 360,
        "fullcodeline": "vl->append(new StringVal(parts[1].c_str()));"
    },
    {
        "line": 361,
        "fullcodeline": "vl->append(new StringVal(parts[2].c_str()));"
    },
    {
        "line": 363,
        "fullcodeline": "parts.erase(parts.begin(), parts.begin() + 4);"
    },
    {
        "line": 365,
        "fullcodeline": "string real_name = parts[0];"
    },
    {
        "line": 372,
        "fullcodeline": "vl->append(new StringVal(real_name.c_str()));"
    },
    {
        "line": 374,
        "fullcodeline": "ConnectionEvent(irc_whois_user_line, vl);"
    },
    {
        "line": 380,
        "fullcodeline": "if ( ! irc_whois_operator_line )"
    },
    {
        "line": 384,
        "fullcodeline": "vector<string> parts = SplitWords(params, ' ');"
    },
    {
        "line": 395,
        "fullcodeline": "val_list* vl = new val_list;"
    },
    {
        "line": 396,
        "fullcodeline": "vl->append(BuildConnVal());"
    },
    {
        "line": 397,
        "fullcodeline": "vl->append(new Val(orig, TYPE_BOOL));"
    },
    {
        "line": 398,
        "fullcodeline": "vl->append(new StringVal(parts[0].c_str()));"
    },
    {
        "line": 400,
        "fullcodeline": "ConnectionEvent(irc_whois_operator_line, vl);"
    },
    {
        "line": 406,
        "fullcodeline": "if ( ! irc_whois_channel_line )"
    },
    {
        "line": 410,
        "fullcodeline": "vector<string> parts = SplitWords(params, ' ');"
    },
    {
        "line": 413,
        "fullcodeline": "parts.erase(parts.begin());"
    },
    {
        "line": 420,
        "fullcodeline": "string nick = parts[0];"
    },
    {
        "line": 421,
        "fullcodeline": "parts.erase(parts.begin());"
    },
    {
        "line": 426,
        "fullcodeline": "val_list* vl = new val_list;"
    },
    {
        "line": 427,
        "fullcodeline": "vl->append(BuildConnVal());"
    },
    {
        "line": 428,
        "fullcodeline": "vl->append(new Val(orig, TYPE_BOOL));"
    },
    {
        "line": 429,
        "fullcodeline": "vl->append(new StringVal(nick.c_str()));"
    },
    {
        "line": 430,
        "fullcodeline": "TableVal* set = new TableVal(string_set);"
    },
    {
        "line": 438,
        "fullcodeline": "vl->append(set);"
    },
    {
        "line": 440,
        "fullcodeline": "ConnectionEvent(irc_whois_channel_line, vl);"
    },
    {
        "line": 450,
        "fullcodeline": "vector<string> parts = SplitWords(params, ' ');"
    },
    {
        "line": 457,
        "fullcodeline": "unsigned int pos = params.find(':');"
    },
    {
        "line": 485,
        "fullcodeline": "if ( ! irc_who_line )"
    },
    {
        "line": 489,
        "fullcodeline": "vector<string> parts = SplitWords(params, ' ');"
    },
    {
        "line": 496,
        "fullcodeline": "val_list* vl = new val_list;"
    },
    {
        "line": 497,
        "fullcodeline": "vl->append(BuildConnVal());"
    },
    {
        "line": 498,
        "fullcodeline": "vl->append(new Val(orig, TYPE_BOOL));"
    },
    {
        "line": 499,
        "fullcodeline": "vl->append(new StringVal(parts[0].c_str()));"
    },
    {
        "line": 500,
        "fullcodeline": "vl->append(new StringVal(parts[1].c_str()));"
    },
    {
        "line": 503,
        "fullcodeline": "vl->append(new StringVal(parts[2].c_str()));"
    },
    {
        "line": 504,
        "fullcodeline": "vl->append(new StringVal(parts[3].c_str()));"
    },
    {
        "line": 505,
        "fullcodeline": "vl->append(new StringVal(parts[4].c_str()));"
    },
    {
        "line": 506,
        "fullcodeline": "vl->append(new StringVal(parts[5].c_str()));"
    },
    {
        "line": 507,
        "fullcodeline": "vl->append(new StringVal(parts[6].c_str()));"
    },
    {
        "line": 510,
        "fullcodeline": "vl->append(new Val(atoi(parts[7].c_str()), TYPE_INT));"
    },
    {
        "line": 511,
        "fullcodeline": "vl->append(new StringVal(parts[8].c_str()));"
    },
    {
        "line": 513,
        "fullcodeline": "ConnectionEvent(irc_who_line, vl);"
    },
    {
        "line": 579,
        "fullcodeline": "unsigned int pos = params.find(' ');"
    },
    {
        "line": 586,
        "fullcodeline": "string target = params.substr(0, pos);"
    },
    {
        "line": 587,
        "fullcodeline": "string message = params.substr(pos + 1);"
    },
    {
        "line": 588,
        "fullcodeline": "SkipLeadingWhitespace(message);"
    },
    {
        "line": 65,
        "fullcodeline": "(myline[1] - '0') * 10 + (myline[2] - '0');"
    },
    {
        "line": 108,
        "fullcodeline": "(p[3].find('Z')<=p[3].size() ||"
    },
    {
        "line": 110,
        "fullcodeline": "orig_zip_status = ACCEPT_ZIP;"
    },
    {
        "line": 132,
        "fullcodeline": "(p[3].find('Z')<=p[3].size() ||"
    },
    {
        "line": 134,
        "fullcodeline": "resp_zip_status = ACCEPT_ZIP;"
    },
    {
        "line": 182,
        "fullcodeline": "for ( unsigned int i = 1; i < parts.size(); ++i )"
    },
    {
        "line": 214,
        "fullcodeline": "if ( parts.size() < 2 )"
    },
    {
        "line": 227,
        "fullcodeline": "if ( parts.size() > 0 && parts[0][0] == ':' )"
    },
    {
        "line": 237,
        "fullcodeline": "for ( unsigned int i = 0; i < parts.size(); ++i )"
    },
    {
        "line": 262,
        "fullcodeline": "for ( unsigned int i = 1; i < parts.size(); ++i )"
    },
    {
        "line": 294,
        "fullcodeline": "for ( unsigned int i = 1; i < parts.size(); ++i )"
    },
    {
        "line": 312,
        "fullcodeline": "if ( ! irc_global_users )"
    },
    {
        "line": 318,
        "fullcodeline": "if ( ! eop )"
    },
    {
        "line": 325,
        "fullcodeline": "if ( ! msg )"
    },
    {
        "line": 348,
        "fullcodeline": "if ( parts.size() > 1 )"
    },
    {
        "line": 350,
        "fullcodeline": "if ( parts.size() < 5 )"
    },
    {
        "line": 366,
        "fullcodeline": "for ( unsigned int i = 1; i < parts.size(); ++i )"
    },
    {
        "line": 367,
        "fullcodeline": "real_name = real_name + \" \" + parts[i];"
    },
    {
        "line": 369,
        "fullcodeline": "if ( real_name[0] == ':' )"
    },
    {
        "line": 386,
        "fullcodeline": "if ( parts.size() > 1 )"
    },
    {
        "line": 389,
        "fullcodeline": "if ( parts.size() < 2 )"
    },
    {
        "line": 414,
        "fullcodeline": "if ( parts.size() < 2 )"
    },
    {
        "line": 423,
        "fullcodeline": "if ( parts.size() > 0 && parts[0][0] == ':' )"
    },
    {
        "line": 431,
        "fullcodeline": "for ( unsigned int i = 0; i < parts.size(); ++i )"
    },
    {
        "line": 447,
        "fullcodeline": "if ( ! irc_channel_topic )"
    },
    {
        "line": 451,
        "fullcodeline": "if ( parts.size() < 4 )"
    },
    {
        "line": 458,
        "fullcodeline": "if ( pos < params.size() )"
    },
    {
        "line": 490,
        "fullcodeline": "if ( parts.size() < 9 )"
    },
    {
        "line": 501,
        "fullcodeline": "if ( parts[2][0] == '~' )"
    },
    {
        "line": 508,
        "fullcodeline": "if ( parts[7][0] == ':' )"
    },
    {
        "line": 524,
        "fullcodeline": "val_list* vl = new val_list;"
    },
    {
        "line": 525,
        "fullcodeline": "vl->append(BuildConnVal());"
    },
    {
        "line": 526,
        "fullcodeline": "vl->append(new Val(orig, TYPE_BOOL));"
    },
    {
        "line": 527,
        "fullcodeline": "ConnectionEvent(irc_invalid_nick, vl);"
    },
    {
        "line": 536,
        "fullcodeline": "val_list* vl = new val_list;"
    },
    {
        "line": 537,
        "fullcodeline": "vl->append(BuildConnVal());"
    },
    {
        "line": 538,
        "fullcodeline": "vl->append(new Val(orig, TYPE_BOOL));"
    },
    {
        "line": 539,
        "fullcodeline": "vl->append(new Val(code == 381, TYPE_BOOL));"
    },
    {
        "line": 540,
        "fullcodeline": "ConnectionEvent(irc_oper_response, vl);"
    },
    {
        "line": 580,
        "fullcodeline": "if ( pos >= params.size() )"
    },
    {
        "line": 590,
        "fullcodeline": "if ( message.size() > 0 && message[0] == ':' )"
    },
    {
        "line": 592,
        "fullcodeline": "if ( message.size() > 0 && message[0] == 1 )"
    },
    {
        "line": 596,
        "fullcodeline": "if ( message.size() > 3 && message.substr(0, 3) == \"DCC\" )"
    },
    {
        "line": 109,
        "fullcodeline": "p[3].find('z')<=p[3].size()) )"
    },
    {
        "line": 112,
        "fullcodeline": "orig_zip_status = NO_ZIP;"
    },
    {
        "line": 133,
        "fullcodeline": "p[3].find('z')<=p[3].size()) )"
    },
    {
        "line": 136,
        "fullcodeline": "resp_zip_status = NO_ZIP;"
    },
    {
        "line": 216,
        "fullcodeline": "Weird(\"irc_invalid_names_line\");"
    },
    {
        "line": 228,
        "fullcodeline": "parts[0] = parts[0].substr(1);"
    },
    {
        "line": 241,
        "fullcodeline": "Val* idx = new StringVal(parts[i].c_str());"
    },
    {
        "line": 242,
        "fullcodeline": "set->Assign(idx, 0);"
    },
    {
        "line": 243,
        "fullcodeline": "Unref(idx);"
    },
    {
        "line": 295,
        "fullcodeline": "if ( parts[i] == \":channels\" )"
    },
    {
        "line": 320,
        "fullcodeline": "Weird(\"invalid_irc_global_users_reply\");"
    },
    {
        "line": 327,
        "fullcodeline": "Weird(\"invalid_irc_global_users_reply\");"
    },
    {
        "line": 349,
        "fullcodeline": "parts.erase(parts.begin());"
    },
    {
        "line": 352,
        "fullcodeline": "Weird(\"irc_invalid_whois_user_line\");"
    },
    {
        "line": 370,
        "fullcodeline": "real_name = real_name.substr(1);"
    },
    {
        "line": 387,
        "fullcodeline": "parts.erase(parts.begin());"
    },
    {
        "line": 391,
        "fullcodeline": "Weird(\"irc_invalid_whois_operator_line\");"
    },
    {
        "line": 416,
        "fullcodeline": "Weird(\"irc_invalid_whois_channel_line\");"
    },
    {
        "line": 424,
        "fullcodeline": "parts[0] = parts[0].substr(1);"
    },
    {
        "line": 433,
        "fullcodeline": "Val* idx = new StringVal(parts[i].c_str());"
    },
    {
        "line": 434,
        "fullcodeline": "set->Assign(idx, 0);"
    },
    {
        "line": 435,
        "fullcodeline": "Unref(idx);"
    },
    {
        "line": 453,
        "fullcodeline": "Weird(\"irc_invalid_topic_reply\");"
    },
    {
        "line": 460,
        "fullcodeline": "string topic = params.substr(pos + 1);"
    },
    {
        "line": 461,
        "fullcodeline": "val_list* vl = new val_list;"
    },
    {
        "line": 463,
        "fullcodeline": "vl->append(BuildConnVal());"
    },
    {
        "line": 464,
        "fullcodeline": "vl->append(new Val(orig, TYPE_BOOL));"
    },
    {
        "line": 465,
        "fullcodeline": "vl->append(new StringVal(parts[1].c_str()));"
    },
    {
        "line": 467,
        "fullcodeline": "const char* t = topic.c_str();"
    },
    {
        "line": 471,
        "fullcodeline": "vl->append(new StringVal(t));"
    },
    {
        "line": 473,
        "fullcodeline": "ConnectionEvent(irc_channel_topic, vl);"
    },
    {
        "line": 492,
        "fullcodeline": "Weird(\"irc_invalid_who_line\");"
    },
    {
        "line": 502,
        "fullcodeline": "parts[2] = parts[2].substr(1);"
    },
    {
        "line": 509,
        "fullcodeline": "parts[7] = parts[7].substr(1);"
    },
    {
        "line": 582,
        "fullcodeline": "Weird(\"irc_invalid_privmsg_message_format\");"
    },
    {
        "line": 591,
        "fullcodeline": "message = message.substr(1);"
    },
    {
        "line": 593,
        "fullcodeline": "message = message.substr(1); // DCC"
    },
    {
        "line": 602,
        "fullcodeline": "vector<string> parts = SplitWords(message, ' ');"
    },
    {
        "line": 614,
        "fullcodeline": "uint32 raw_ip = 0;"
    },
    {
        "line": 621,
        "fullcodeline": "val_list* vl = new val_list;"
    },
    {
        "line": 622,
        "fullcodeline": "vl->append(BuildConnVal());"
    },
    {
        "line": 623,
        "fullcodeline": "vl->append(new Val(orig, TYPE_BOOL));"
    },
    {
        "line": 624,
        "fullcodeline": "vl->append(new StringVal(prefix.c_str()));"
    },
    {
        "line": 625,
        "fullcodeline": "vl->append(new StringVal(target.c_str()));"
    },
    {
        "line": 626,
        "fullcodeline": "vl->append(new StringVal(parts[1].c_str()));"
    },
    {
        "line": 627,
        "fullcodeline": "vl->append(new StringVal(parts[2].c_str()));"
    },
    {
        "line": 628,
        "fullcodeline": "vl->append(new AddrVal(htonl(raw_ip)));"
    },
    {
        "line": 629,
        "fullcodeline": "vl->append(new Val(atoi(parts[4].c_str()), TYPE_COUNT));"
    },
    {
        "line": 636,
        "fullcodeline": "ConnectionEvent(irc_dcc_message, vl);"
    },
    {
        "line": 652,
        "fullcodeline": "else if ( irc_notice_message && command == \"NOTICE\" )"
    },
    {
        "line": 184,
        "fullcodeline": "if ( parts[i] == \"users\" )"
    },
    {
        "line": 239,
        "fullcodeline": "if ( parts[i][0] == '@' )"
    },
    {
        "line": 264,
        "fullcodeline": "if ( parts[i] == \"users,\" )"
    },
    {
        "line": 296,
        "fullcodeline": "channels = atoi(parts[i - 1].c_str());"
    },
    {
        "line": 468,
        "fullcodeline": "if ( *t == ':' )"
    },
    {
        "line": 477,
        "fullcodeline": "Weird(\"irc_invalid_topic_reply\");"
    },
    {
        "line": 598,
        "fullcodeline": "if ( message.size() > 0 &&"
    },
    {
        "line": 603,
        "fullcodeline": "if ( parts.size() < 5 || parts.size() > 6 )"
    },
    {
        "line": 615,
        "fullcodeline": "for ( unsigned int i = 0; i < parts[3].size(); ++i )"
    },
    {
        "line": 630,
        "fullcodeline": "if ( parts.size() >= 6 )"
    },
    {
        "line": 641,
        "fullcodeline": "val_list* vl = new val_list;"
    },
    {
        "line": 642,
        "fullcodeline": "vl->append(BuildConnVal());"
    },
    {
        "line": 643,
        "fullcodeline": "vl->append(new Val(orig, TYPE_BOOL));"
    },
    {
        "line": 644,
        "fullcodeline": "vl->append(new StringVal(prefix.c_str()));"
    },
    {
        "line": 645,
        "fullcodeline": "vl->append(new StringVal(target.c_str()));"
    },
    {
        "line": 646,
        "fullcodeline": "vl->append(new StringVal(message.c_str()));"
    },
    {
        "line": 648,
        "fullcodeline": "ConnectionEvent(irc_privmsg_message, vl);"
    },
    {
        "line": 654,
        "fullcodeline": "unsigned int pos = params.find(' ');"
    },
    {
        "line": 661,
        "fullcodeline": "string target = params.substr(0, pos);"
    },
    {
        "line": 662,
        "fullcodeline": "string message = params.substr(pos + 1);"
    },
    {
        "line": 663,
        "fullcodeline": "SkipLeadingWhitespace(message);"
    },
    {
        "line": 667,
        "fullcodeline": "val_list* vl = new val_list;"
    },
    {
        "line": 668,
        "fullcodeline": "vl->append(BuildConnVal());"
    },
    {
        "line": 669,
        "fullcodeline": "vl->append(new Val(orig, TYPE_BOOL));"
    },
    {
        "line": 670,
        "fullcodeline": "vl->append(new StringVal(prefix.c_str()));"
    },
    {
        "line": 671,
        "fullcodeline": "vl->append(new StringVal(target.c_str()));"
    },
    {
        "line": 672,
        "fullcodeline": "vl->append(new StringVal(message.c_str()));"
    },
    {
        "line": 674,
        "fullcodeline": "ConnectionEvent(irc_notice_message, vl);"
    },
    {
        "line": 185,
        "fullcodeline": "users = atoi(parts[i-1].c_str());"
    },
    {
        "line": 240,
        "fullcodeline": "parts[i] = parts[i].substr(1);"
    },
    {
        "line": 265,
        "fullcodeline": "users = atoi(parts[i-1].c_str());"
    },
    {
        "line": 469,
        "fullcodeline": "++t;"
    },
    {
        "line": 599,
        "fullcodeline": "message[message.size() - 1] == 1 )"
    },
    {
        "line": 600,
        "fullcodeline": "message = message.substr(0, message.size() - 1);"
    },
    {
        "line": 617,
        "fullcodeline": "string s = parts[3].substr(i, 1);"
    },
    {
        "line": 618,
        "fullcodeline": "raw_ip = (10 * raw_ip) + atoi(s.c_str());"
    },
    {
        "line": 631,
        "fullcodeline": "vl->append(new Val(atoi(parts[5].c_str()),"
    },
    {
        "line": 655,
        "fullcodeline": "if ( pos >= params.size() )"
    },
    {
        "line": 664,
        "fullcodeline": "if ( message[0] == ':' )"
    },
    {
        "line": 606,
        "fullcodeline": "if ( ! (parts.size() == 7 && parts[6] == \"T\") )"
    },
    {
        "line": 634,
        "fullcodeline": "vl->append(new Val(0, TYPE_COUNT));"
    },
    {
        "line": 657,
        "fullcodeline": "Weird(\"irc_invalid_notice_message_format\");"
    },
    {
        "line": 665,
        "fullcodeline": "message = message.substr(1);"
    },
    {
        "line": 677,
        "fullcodeline": "else if ( irc_squery_message && command == \"SQUERY\" )"
    },
    {
        "line": 186,
        "fullcodeline": "else if ( parts[i] == \"services\" )"
    },
    {
        "line": 266,
        "fullcodeline": "else if ( parts[i] == \"clients\" )"
    },
    {
        "line": 608,
        "fullcodeline": "Weird(\"irc_invalid_dcc_message_format\");"
    },
    {
        "line": 679,
        "fullcodeline": "unsigned int pos = params.find(' ');"
    },
    {
        "line": 686,
        "fullcodeline": "string target = params.substr(0, pos);"
    },
    {
        "line": 687,
        "fullcodeline": "string message = params.substr(pos + 1);"
    },
    {
        "line": 688,
        "fullcodeline": "SkipLeadingWhitespace(message);"
    },
    {
        "line": 692,
        "fullcodeline": "val_list* vl = new val_list;"
    },
    {
        "line": 693,
        "fullcodeline": "vl->append(BuildConnVal());"
    },
    {
        "line": 694,
        "fullcodeline": "vl->append(new Val(orig, TYPE_BOOL));"
    },
    {
        "line": 695,
        "fullcodeline": "vl->append(new StringVal(prefix.c_str()));"
    },
    {
        "line": 696,
        "fullcodeline": "vl->append(new StringVal(target.c_str()));"
    },
    {
        "line": 697,
        "fullcodeline": "vl->append(new StringVal(message.c_str()));"
    },
    {
        "line": 699,
        "fullcodeline": "ConnectionEvent(irc_squery_message, vl);"
    },
    {
        "line": 187,
        "fullcodeline": "services = atoi(parts[i-1].c_str());"
    },
    {
        "line": 267,
        "fullcodeline": "users = atoi(parts[i-1].c_str());"
    },
    {
        "line": 680,
        "fullcodeline": "if ( pos >= params.size() )"
    },
    {
        "line": 689,
        "fullcodeline": "if ( message[0] == ':' )"
    },
    {
        "line": 682,
        "fullcodeline": "Weird(\"irc_invalid_squery_message_format\");"
    },
    {
        "line": 690,
        "fullcodeline": "message = message.substr(1);"
    },
    {
        "line": 702,
        "fullcodeline": "else if ( irc_user_message && command == \"USER\" )"
    },
    {
        "line": 188,
        "fullcodeline": "else if ( parts[i] == \"servers\" )"
    },
    {
        "line": 268,
        "fullcodeline": "else if ( parts[i] == \"services\" )"
    },
    {
        "line": 705,
        "fullcodeline": "vector<string> parts = SplitWords(params, ' ');"
    },
    {
        "line": 706,
        "fullcodeline": "val_list* vl = new val_list;"
    },
    {
        "line": 707,
        "fullcodeline": "vl->append(BuildConnVal());"
    },
    {
        "line": 708,
        "fullcodeline": "vl->append(new Val(orig, TYPE_BOOL));"
    },
    {
        "line": 730,
        "fullcodeline": "const char* name = realname.c_str();"
    },
    {
        "line": 731,
        "fullcodeline": "vl->append(new StringVal(*name == ':' ? name + 1 : name));"
    },
    {
        "line": 733,
        "fullcodeline": "ConnectionEvent(irc_user_message, vl);"
    },
    {
        "line": 189,
        "fullcodeline": "servers = atoi(parts[i-1].c_str());"
    },
    {
        "line": 269,
        "fullcodeline": "services = atoi(parts[i-1].c_str());"
    },
    {
        "line": 710,
        "fullcodeline": "if ( parts.size() > 0 )"
    },
    {
        "line": 714,
        "fullcodeline": "if ( parts.size() > 1 )"
    },
    {
        "line": 718,
        "fullcodeline": "if ( parts.size() > 2 )"
    },
    {
        "line": 723,
        "fullcodeline": "for ( unsigned int i = 3; i < parts.size(); i++ )"
    },
    {
        "line": 711,
        "fullcodeline": "vl->append(new StringVal(parts[0].c_str()));"
    },
    {
        "line": 715,
        "fullcodeline": "vl->append(new StringVal(parts[1].c_str()));"
    },
    {
        "line": 719,
        "fullcodeline": "vl->append(new StringVal(parts[2].c_str()));"
    },
    {
        "line": 725,
        "fullcodeline": "realname += parts[i];"
    },
    {
        "line": 736,
        "fullcodeline": "else if ( irc_oper_message && command == \"OPER\" )"
    },
    {
        "line": 270,
        "fullcodeline": "else if ( parts[i] == \"servers\" )"
    },
    {
        "line": 712,
        "fullcodeline": "else vl->append(new StringVal(\"\"));"
    },
    {
        "line": 716,
        "fullcodeline": "else vl->append(new StringVal(\"\"));"
    },
    {
        "line": 720,
        "fullcodeline": "else vl->append(new StringVal(\"\"));"
    },
    {
        "line": 726,
        "fullcodeline": "if ( i > 3 )"
    },
    {
        "line": 739,
        "fullcodeline": "vector<string> parts = SplitWords(params, ' ');"
    },
    {
        "line": 271,
        "fullcodeline": "servers = atoi(parts[i-1].c_str());"
    },
    {
        "line": 727,
        "fullcodeline": "realname += \" \";"
    },
    {
        "line": 740,
        "fullcodeline": "if ( parts.size() == 2 )"
    },
    {
        "line": 742,
        "fullcodeline": "val_list* vl = new val_list;"
    },
    {
        "line": 743,
        "fullcodeline": "vl->append(BuildConnVal());"
    },
    {
        "line": 744,
        "fullcodeline": "vl->append(new Val(orig, TYPE_BOOL));"
    },
    {
        "line": 745,
        "fullcodeline": "vl->append(new StringVal(parts[0].c_str()));"
    },
    {
        "line": 746,
        "fullcodeline": "vl->append(new StringVal(parts[1].c_str()));"
    },
    {
        "line": 748,
        "fullcodeline": "ConnectionEvent(irc_oper_message, vl);"
    },
    {
        "line": 755,
        "fullcodeline": "else if ( irc_kick_message && command == \"KICK\" )"
    },
    {
        "line": 752,
        "fullcodeline": "Weird(\"irc_invalid_oper_message_format\");"
    },
    {
        "line": 758,
        "fullcodeline": "vector<string> parts = SplitWords(params, ' ');"
    },
    {
        "line": 765,
        "fullcodeline": "val_list* vl = new val_list;"
    },
    {
        "line": 766,
        "fullcodeline": "vl->append(BuildConnVal());"
    },
    {
        "line": 767,
        "fullcodeline": "vl->append(new Val(orig, TYPE_BOOL));"
    },
    {
        "line": 768,
        "fullcodeline": "vl->append(new StringVal(prefix.c_str()));"
    },
    {
        "line": 769,
        "fullcodeline": "vl->append(new StringVal(parts[0].c_str()));"
    },
    {
        "line": 770,
        "fullcodeline": "vl->append(new StringVal(parts[1].c_str()));"
    },
    {
        "line": 785,
        "fullcodeline": "ConnectionEvent(irc_kick_message, vl);"
    },
    {
        "line": 759,
        "fullcodeline": "if ( parts.size() <= 1 )"
    },
    {
        "line": 771,
        "fullcodeline": "if ( parts.size() > 2 )"
    },
    {
        "line": 761,
        "fullcodeline": "Weird(\"irc_invalid_kick_message_format\");"
    },
    {
        "line": 773,
        "fullcodeline": "string comment = parts[2];"
    },
    {
        "line": 780,
        "fullcodeline": "vl->append(new StringVal(comment.c_str()));"
    },
    {
        "line": 788,
        "fullcodeline": "else if ( irc_join_message && command == \"JOIN\" )"
    },
    {
        "line": 774,
        "fullcodeline": "for ( unsigned int i = 3; i < parts.size(); ++i )"
    },
    {
        "line": 775,
        "fullcodeline": "comment += \" \" + parts[i];"
    },
    {
        "line": 777,
        "fullcodeline": "if ( comment[0] == ':' )"
    },
    {
        "line": 783,
        "fullcodeline": "vl->append(new StringVal(\"\"));"
    },
    {
        "line": 793,
        "fullcodeline": "vector<string> parts = SplitWords(params, ' ');"
    },
    {
        "line": 801,
        "fullcodeline": "string nickname = \"\";"
    },
    {
        "line": 809,
        "fullcodeline": "val_list* vl = new val_list;"
    },
    {
        "line": 810,
        "fullcodeline": "vl->append(BuildConnVal());"
    },
    {
        "line": 811,
        "fullcodeline": "vl->append(new Val(orig, TYPE_BOOL));"
    },
    {
        "line": 813,
        "fullcodeline": "TableVal* list = new TableVal(irc_join_list);"
    },
    {
        "line": 814,
        "fullcodeline": "vector<string> channels = SplitWords(parts[0], ',');"
    },
    {
        "line": 815,
        "fullcodeline": "vector<string> passwords;"
    },
    {
        "line": 820,
        "fullcodeline": "string empty_string = \"\";"
    },
    {
        "line": 836,
        "fullcodeline": "vl->append(list);"
    },
    {
        "line": 838,
        "fullcodeline": "ConnectionEvent(irc_join_message, vl);"
    },
    {
        "line": 778,
        "fullcodeline": "comment = comment.substr(1);"
    },
    {
        "line": 790,
        "fullcodeline": "if ( params[0] == ':' )"
    },
    {
        "line": 795,
        "fullcodeline": "if ( parts.size() < 1 )"
    },
    {
        "line": 802,
        "fullcodeline": "if ( prefix.size() > 0 )"
    },
    {
        "line": 817,
        "fullcodeline": "if ( parts.size() > 1 )"
    },
    {
        "line": 821,
        "fullcodeline": "for ( unsigned int i = 0; i < channels.size(); ++i )"
    },
    {
        "line": 791,
        "fullcodeline": "params = params.substr(1);"
    },
    {
        "line": 797,
        "fullcodeline": "Weird(\"irc_invalid_join_line\");"
    },
    {
        "line": 804,
        "fullcodeline": "unsigned int pos = prefix.find('!');"
    },
    {
        "line": 818,
        "fullcodeline": "passwords = SplitWords(parts[1], ',');"
    },
    {
        "line": 823,
        "fullcodeline": "RecordVal* info = new RecordVal(irc_join_info);"
    },
    {
        "line": 824,
        "fullcodeline": "info->Assign(0, new StringVal(nickname.c_str()));"
    },
    {
        "line": 825,
        "fullcodeline": "info->Assign(1, new StringVal(channels[i].c_str()));"
    },
    {
        "line": 831,
        "fullcodeline": "info->Assign(3, new StringVal(empty_string.c_str()));"
    },
    {
        "line": 832,
        "fullcodeline": "list->Assign(info, 0);"
    },
    {
        "line": 833,
        "fullcodeline": "Unref(info);"
    },
    {
        "line": 841,
        "fullcodeline": "else if ( irc_join_message && command == \"NJOIN\" )"
    },
    {
        "line": 805,
        "fullcodeline": "if ( pos < prefix.size() )"
    },
    {
        "line": 826,
        "fullcodeline": "if ( i < passwords.size() )"
    },
    {
        "line": 843,
        "fullcodeline": "vector<string> parts = SplitWords(params, ' ');"
    },
    {
        "line": 850,
        "fullcodeline": "string channel = parts[0];"
    },
    {
        "line": 854,
        "fullcodeline": "vector<string> users = SplitWords(parts[1], ',');"
    },
    {
        "line": 856,
        "fullcodeline": "val_list* vl = new val_list;"
    },
    {
        "line": 857,
        "fullcodeline": "vl->append(BuildConnVal());"
    },
    {
        "line": 858,
        "fullcodeline": "vl->append(new Val(orig, TYPE_BOOL));"
    },
    {
        "line": 860,
        "fullcodeline": "TableVal* list = new TableVal(irc_join_list);"
    },
    {
        "line": 861,
        "fullcodeline": "string empty_string = \"\";"
    },
    {
        "line": 899,
        "fullcodeline": "vl->append(list);"
    },
    {
        "line": 901,
        "fullcodeline": "ConnectionEvent(irc_join_message, vl);"
    },
    {
        "line": 806,
        "fullcodeline": "nickname = prefix.substr(0, pos);"
    },
    {
        "line": 827,
        "fullcodeline": "info->Assign(2, new StringVal(passwords[i].c_str()));"
    },
    {
        "line": 844,
        "fullcodeline": "if ( parts.size() != 2 )"
    },
    {
        "line": 851,
        "fullcodeline": "if ( parts[1][0] == ':' )"
    },
    {
        "line": 863,
        "fullcodeline": "for ( unsigned int i = 0; i < users.size(); ++i )"
    },
    {
        "line": 829,
        "fullcodeline": "info->Assign(2, new StringVal(empty_string.c_str()));"
    },
    {
        "line": 846,
        "fullcodeline": "Weird(\"irc_invalid_njoin_line\");"
    },
    {
        "line": 852,
        "fullcodeline": "parts[1] = parts[1].substr(1);"
    },
    {
        "line": 865,
        "fullcodeline": "RecordVal* info = new RecordVal(irc_join_info);"
    },
    {
        "line": 866,
        "fullcodeline": "string nick = users[i];"
    },
    {
        "line": 867,
        "fullcodeline": "string mode = \"none\";"
    },
    {
        "line": 889,
        "fullcodeline": "info->Assign(0, new StringVal(nick.c_str()));"
    },
    {
        "line": 890,
        "fullcodeline": "info->Assign(1, new StringVal(channel.c_str()));"
    },
    {
        "line": 892,
        "fullcodeline": "info->Assign(2, new StringVal(empty_string.c_str()));"
    },
    {
        "line": 894,
        "fullcodeline": "info->Assign(3, new StringVal(mode.c_str()));"
    },
    {
        "line": 895,
        "fullcodeline": "list->Assign(info, 0);"
    },
    {
        "line": 896,
        "fullcodeline": "Unref(info);"
    },
    {
        "line": 904,
        "fullcodeline": "else if ( irc_part_message && command == \"PART\" )"
    },
    {
        "line": 869,
        "fullcodeline": "if ( nick[0] == '@' )"
    },
    {
        "line": 906,
        "fullcodeline": "string channels = params;"
    },
    {
        "line": 907,
        "fullcodeline": "string message = \"\";"
    },
    {
        "line": 908,
        "fullcodeline": "unsigned int pos = params.find(' ');"
    },
    {
        "line": 922,
        "fullcodeline": "string nick = prefix;"
    },
    {
        "line": 923,
        "fullcodeline": "pos = nick.find('!');"
    },
    {
        "line": 927,
        "fullcodeline": "vector<string> channelList = SplitWords(channels, ',');"
    },
    {
        "line": 928,
        "fullcodeline": "TableVal* set = new TableVal(string_set);"
    },
    {
        "line": 937,
        "fullcodeline": "val_list* vl = new val_list;"
    },
    {
        "line": 938,
        "fullcodeline": "vl->append(BuildConnVal());"
    },
    {
        "line": 939,
        "fullcodeline": "vl->append(new Val(orig, TYPE_BOOL));"
    },
    {
        "line": 940,
        "fullcodeline": "vl->append(new StringVal(nick.c_str()));"
    },
    {
        "line": 941,
        "fullcodeline": "vl->append(set);"
    },
    {
        "line": 942,
        "fullcodeline": "vl->append(new StringVal(message.c_str()));"
    },
    {
        "line": 944,
        "fullcodeline": "ConnectionEvent(irc_part_message, vl);"
    },
    {
        "line": 910,
        "fullcodeline": "if ( pos < params.size() )"
    },
    {
        "line": 924,
        "fullcodeline": "if ( pos < nick.size() )"
    },
    {
        "line": 930,
        "fullcodeline": "for ( unsigned int i = 0; i < channelList.size(); ++i )"
    },
    {
        "line": 871,
        "fullcodeline": "if ( nick[1] == '@' )"
    },
    {
        "line": 912,
        "fullcodeline": "channels = params.substr(0, pos);"
    },
    {
        "line": 925,
        "fullcodeline": "nick = nick.substr(0, pos);"
    },
    {
        "line": 932,
        "fullcodeline": "Val* idx = new StringVal(channelList[i].c_str());"
    },
    {
        "line": 933,
        "fullcodeline": "set->Assign(idx, 0);"
    },
    {
        "line": 934,
        "fullcodeline": "Unref(idx);"
    },
    {
        "line": 947,
        "fullcodeline": "else if ( irc_quit_message && command == \"QUIT\" )"
    },
    {
        "line": 873,
        "fullcodeline": "nick = nick.substr(2);"
    },
    {
        "line": 874,
        "fullcodeline": "mode = \"creator\";"
    },
    {
        "line": 883,
        "fullcodeline": "else if ( nick[0] == '+' )"
    },
    {
        "line": 913,
        "fullcodeline": "if ( params.size() > pos + 1 )"
    },
    {
        "line": 918,
        "fullcodeline": "if ( message[0] == ':' )"
    },
    {
        "line": 949,
        "fullcodeline": "string message = params;"
    },
    {
        "line": 953,
        "fullcodeline": "string nickname = \"\";"
    },
    {
        "line": 961,
        "fullcodeline": "val_list* vl = new val_list;"
    },
    {
        "line": 962,
        "fullcodeline": "vl->append(BuildConnVal());"
    },
    {
        "line": 963,
        "fullcodeline": "vl->append(new Val(orig, TYPE_BOOL));"
    },
    {
        "line": 964,
        "fullcodeline": "vl->append(new StringVal(nickname.c_str()));"
    },
    {
        "line": 965,
        "fullcodeline": "vl->append(new StringVal(message.c_str()));"
    },
    {
        "line": 967,
        "fullcodeline": "ConnectionEvent(irc_quit_message, vl);"
    },
    {
        "line": 878,
        "fullcodeline": "nick = nick.substr(1);"
    },
    {
        "line": 879,
        "fullcodeline": "mode = \"operator\";"
    },
    {
        "line": 885,
        "fullcodeline": "nick = nick.substr(1);"
    },
    {
        "line": 886,
        "fullcodeline": "mode = \"voice\";"
    },
    {
        "line": 915,
        "fullcodeline": "message = params.substr(pos + 1);"
    },
    {
        "line": 916,
        "fullcodeline": "SkipLeadingWhitespace(message);"
    },
    {
        "line": 919,
        "fullcodeline": "message = message.substr(1);"
    },
    {
        "line": 950,
        "fullcodeline": "if ( message[0] == ':' )"
    },
    {
        "line": 954,
        "fullcodeline": "if ( prefix.size() > 0 )"
    },
    {
        "line": 951,
        "fullcodeline": "message = message.substr(1);"
    },
    {
        "line": 956,
        "fullcodeline": "unsigned int pos = prefix.find('!');"
    },
    {
        "line": 970,
        "fullcodeline": "else if ( irc_nick_message && command == \"NICK\" )"
    },
    {
        "line": 957,
        "fullcodeline": "if ( pos < prefix.size() )"
    },
    {
        "line": 972,
        "fullcodeline": "string nick = params;"
    },
    {
        "line": 976,
        "fullcodeline": "val_list* vl = new val_list;"
    },
    {
        "line": 977,
        "fullcodeline": "vl->append(BuildConnVal());"
    },
    {
        "line": 978,
        "fullcodeline": "vl->append(new Val(orig, TYPE_BOOL));"
    },
    {
        "line": 979,
        "fullcodeline": "vl->append(new StringVal(prefix.c_str()));"
    },
    {
        "line": 980,
        "fullcodeline": "vl->append(new StringVal(nick.c_str()));"
    },
    {
        "line": 982,
        "fullcodeline": "ConnectionEvent(irc_nick_message, vl);"
    },
    {
        "line": 958,
        "fullcodeline": "nickname = prefix.substr(0, pos);"
    },
    {
        "line": 973,
        "fullcodeline": "if ( nick[0] == ':' )"
    },
    {
        "line": 974,
        "fullcodeline": "nick = nick.substr(1);"
    },
    {
        "line": 985,
        "fullcodeline": "else if ( irc_who_message && command == \"WHO\" )"
    },
    {
        "line": 987,
        "fullcodeline": "vector<string> parts = SplitWords(params, ' ');"
    },
    {
        "line": 994,
        "fullcodeline": "bool oper = false;"
    },
    {
        "line": 1002,
        "fullcodeline": "val_list* vl = new val_list;"
    },
    {
        "line": 1003,
        "fullcodeline": "vl->append(BuildConnVal());"
    },
    {
        "line": 1004,
        "fullcodeline": "vl->append(new Val(orig, TYPE_BOOL));"
    },
    {
        "line": 1009,
        "fullcodeline": "vl->append(new Val(oper, TYPE_BOOL));"
    },
    {
        "line": 1011,
        "fullcodeline": "ConnectionEvent(irc_who_message, vl);"
    },
    {
        "line": 988,
        "fullcodeline": "if ( parts.size() > 2 )"
    },
    {
        "line": 995,
        "fullcodeline": "if ( parts.size() == 2 && parts[1] == \"o\" )"
    },
    {
        "line": 999,
        "fullcodeline": "if ( parts.size() > 0 && parts[0].size() > 0 && parts[0][0] == ':' )"
    },
    {
        "line": 1005,
        "fullcodeline": "if ( parts.size() > 0 )"
    },
    {
        "line": 990,
        "fullcodeline": "Weird(\"irc_invalid_who_message_format\");"
    },
    {
        "line": 996,
        "fullcodeline": "oper = true;"
    },
    {
        "line": 1000,
        "fullcodeline": "parts[0] = parts[0].substr(1);"
    },
    {
        "line": 1006,
        "fullcodeline": "vl->append(new StringVal(parts[0].c_str()));"
    },
    {
        "line": 1014,
        "fullcodeline": "else if ( irc_whois_message && command == \"WHOIS\" )"
    },
    {
        "line": 1008,
        "fullcodeline": "vl->append(new StringVal(\"\"));"
    },
    {
        "line": 1016,
        "fullcodeline": "vector<string> parts = SplitWords(params, ' ');"
    },
    {
        "line": 1023,
        "fullcodeline": "string server = \"\";"
    },
    {
        "line": 1024,
        "fullcodeline": "string users = \"\";"
    },
    {
        "line": 1034,
        "fullcodeline": "val_list* vl = new val_list;"
    },
    {
        "line": 1035,
        "fullcodeline": "vl->append(BuildConnVal());"
    },
    {
        "line": 1036,
        "fullcodeline": "vl->append(new Val(orig, TYPE_BOOL));"
    },
    {
        "line": 1037,
        "fullcodeline": "vl->append(new StringVal(server.c_str()));"
    },
    {
        "line": 1038,
        "fullcodeline": "vl->append(new StringVal(users.c_str()));"
    },
    {
        "line": 1040,
        "fullcodeline": "ConnectionEvent(irc_whois_message, vl);"
    },
    {
        "line": 1017,
        "fullcodeline": "if ( parts.size() < 1 || parts.size() > 2 )"
    },
    {
        "line": 1026,
        "fullcodeline": "if ( parts.size() == 2 )"
    },
    {
        "line": 1019,
        "fullcodeline": "Weird(\"irc_invalid_whois_message_format\");"
    },
    {
        "line": 1028,
        "fullcodeline": "server = parts[0];"
    },
    {
        "line": 1029,
        "fullcodeline": "users = parts[1];"
    },
    {
        "line": 1043,
        "fullcodeline": "else if ( irc_error_message && command == \"ERROR\" )"
    },
    {
        "line": 1032,
        "fullcodeline": "users = parts[0];"
    },
    {
        "line": 1045,
        "fullcodeline": "val_list* vl = new val_list;"
    },
    {
        "line": 1046,
        "fullcodeline": "vl->append(BuildConnVal());"
    },
    {
        "line": 1047,
        "fullcodeline": "vl->append(new Val(orig, TYPE_BOOL));"
    },
    {
        "line": 1048,
        "fullcodeline": "vl->append(new StringVal(prefix.c_str()));"
    },
    {
        "line": 1051,
        "fullcodeline": "vl->append(new StringVal(params.c_str()));"
    },
    {
        "line": 1053,
        "fullcodeline": "ConnectionEvent(irc_error_message, vl);"
    },
    {
        "line": 1049,
        "fullcodeline": "if ( params[0] == ':' )"
    },
    {
        "line": 1050,
        "fullcodeline": "params = params.substr(1);"
    },
    {
        "line": 1056,
        "fullcodeline": "else if ( irc_invite_message && command == \"INVITE\" )"
    },
    {
        "line": 1058,
        "fullcodeline": "vector<string> parts = SplitWords(params, ' ');"
    },
    {
        "line": 1059,
        "fullcodeline": "if ( parts.size() == 2 )"
    },
    {
        "line": 1064,
        "fullcodeline": "val_list* vl = new val_list;"
    },
    {
        "line": 1065,
        "fullcodeline": "vl->append(BuildConnVal());"
    },
    {
        "line": 1066,
        "fullcodeline": "vl->append(new Val(orig, TYPE_BOOL));"
    },
    {
        "line": 1067,
        "fullcodeline": "vl->append(new StringVal(prefix.c_str()));"
    },
    {
        "line": 1068,
        "fullcodeline": "vl->append(new StringVal(parts[0].c_str()));"
    },
    {
        "line": 1069,
        "fullcodeline": "vl->append(new StringVal(parts[1].c_str()));"
    },
    {
        "line": 1071,
        "fullcodeline": "ConnectionEvent(irc_invite_message, vl);"
    },
    {
        "line": 1077,
        "fullcodeline": "else if ( irc_mode_message && command == \"MODE\" )"
    },
    {
        "line": 1061,
        "fullcodeline": "if ( parts[1].size() > 0 && parts[1][0] == ':' )"
    },
    {
        "line": 1074,
        "fullcodeline": "Weird(\"irc_invalid_invite_message_format\");"
    },
    {
        "line": 1062,
        "fullcodeline": "parts[1] = parts[1].substr(1);"
    },
    {
        "line": 1079,
        "fullcodeline": "if ( params.size() > 0 )"
    },
    {
        "line": 1081,
        "fullcodeline": "val_list* vl = new val_list;"
    },
    {
        "line": 1082,
        "fullcodeline": "vl->append(BuildConnVal());"
    },
    {
        "line": 1083,
        "fullcodeline": "vl->append(new Val(orig, TYPE_BOOL));"
    },
    {
        "line": 1084,
        "fullcodeline": "vl->append(new StringVal(prefix.c_str()));"
    },
    {
        "line": 1085,
        "fullcodeline": "vl->append(new StringVal(params.c_str()));"
    },
    {
        "line": 1087,
        "fullcodeline": "ConnectionEvent(irc_mode_message, vl);"
    },
    {
        "line": 1094,
        "fullcodeline": "else if ( irc_password_message && command == \"PASS\" )"
    },
    {
        "line": 1091,
        "fullcodeline": "Weird(\"irc_invalid_mode_message_format\");"
    },
    {
        "line": 1096,
        "fullcodeline": "val_list* vl = new val_list;"
    },
    {
        "line": 1097,
        "fullcodeline": "vl->append(BuildConnVal());"
    },
    {
        "line": 1098,
        "fullcodeline": "vl->append(new Val(orig, TYPE_BOOL));"
    },
    {
        "line": 1099,
        "fullcodeline": "vl->append(new StringVal(params.c_str()));"
    },
    {
        "line": 1100,
        "fullcodeline": "ConnectionEvent(irc_password_message, vl);"
    },
    {
        "line": 1103,
        "fullcodeline": "else if ( irc_squit_message && command == \"SQUIT\" )"
    },
    {
        "line": 1105,
        "fullcodeline": "string server = params;"
    },
    {
        "line": 1106,
        "fullcodeline": "string message = \"\";"
    },
    {
        "line": 1108,
        "fullcodeline": "unsigned int pos = params.find(' ');"
    },
    {
        "line": 1118,
        "fullcodeline": "val_list* vl = new val_list;"
    },
    {
        "line": 1119,
        "fullcodeline": "vl->append(BuildConnVal());"
    },
    {
        "line": 1120,
        "fullcodeline": "vl->append(new Val(orig, TYPE_BOOL));"
    },
    {
        "line": 1121,
        "fullcodeline": "vl->append(new StringVal(prefix.c_str()));"
    },
    {
        "line": 1122,
        "fullcodeline": "vl->append(new StringVal(server.c_str()));"
    },
    {
        "line": 1123,
        "fullcodeline": "vl->append(new StringVal(message.c_str()));"
    },
    {
        "line": 1125,
        "fullcodeline": "ConnectionEvent(irc_squit_message, vl);"
    },
    {
        "line": 1109,
        "fullcodeline": "if ( pos < params.size() )"
    },
    {
        "line": 1111,
        "fullcodeline": "server = params.substr(0, pos);"
    },
    {
        "line": 1112,
        "fullcodeline": "message = params.substr(pos + 1);"
    },
    {
        "line": 1113,
        "fullcodeline": "SkipLeadingWhitespace(message);"
    },
    {
        "line": 1114,
        "fullcodeline": "if ( message[0] == ':' )"
    },
    {
        "line": 1115,
        "fullcodeline": "message = message.substr(1);"
    },
    {
        "line": 1133,
        "fullcodeline": "val_list* vl = new val_list;"
    },
    {
        "line": 1134,
        "fullcodeline": "vl->append(BuildConnVal());"
    },
    {
        "line": 1135,
        "fullcodeline": "vl->append(new Val(orig, TYPE_BOOL));"
    },
    {
        "line": 1136,
        "fullcodeline": "vl->append(new StringVal(prefix.c_str()));"
    },
    {
        "line": 1137,
        "fullcodeline": "vl->append(new StringVal(command.c_str()));"
    },
    {
        "line": 1138,
        "fullcodeline": "vl->append(new StringVal(params.c_str()));"
    },
    {
        "line": 1140,
        "fullcodeline": "ConnectionEvent(irc_request, vl);"
    },
    {
        "line": 1148,
        "fullcodeline": "val_list* vl = new val_list;"
    },
    {
        "line": 1149,
        "fullcodeline": "vl->append(BuildConnVal());"
    },
    {
        "line": 1150,
        "fullcodeline": "vl->append(new Val(orig, TYPE_BOOL));"
    },
    {
        "line": 1151,
        "fullcodeline": "vl->append(new StringVal(prefix.c_str()));"
    },
    {
        "line": 1152,
        "fullcodeline": "vl->append(new StringVal(command.c_str()));"
    },
    {
        "line": 1153,
        "fullcodeline": "vl->append(new StringVal(params.c_str()));"
    },
    {
        "line": 1155,
        "fullcodeline": "ConnectionEvent(irc_message, vl);"
    }
]