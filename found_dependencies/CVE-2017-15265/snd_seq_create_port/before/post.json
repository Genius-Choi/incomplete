[
    {
        "line": 6,
        "fullcodeline": "int num = -1;"
    },
    {
        "line": 18,
        "fullcodeline": "new_port = kzalloc(sizeof(*new_port), GFP_KERNEL);"
    },
    {
        "line": 22,
        "fullcodeline": "new_port->addr.client = client->number;"
    },
    {
        "line": 23,
        "fullcodeline": "new_port->addr.port = -1;"
    },
    {
        "line": 24,
        "fullcodeline": "new_port->owner = THIS_MODULE;"
    },
    {
        "line": 25,
        "fullcodeline": "sprintf(new_port->name, \"port-%d\", num);"
    },
    {
        "line": 26,
        "fullcodeline": "snd_use_lock_init(&new_port->use_lock);"
    },
    {
        "line": 27,
        "fullcodeline": "port_subs_info_init(&new_port->c_src);"
    },
    {
        "line": 28,
        "fullcodeline": "port_subs_info_init(&new_port->c_dest);"
    },
    {
        "line": 30,
        "fullcodeline": "num = port >= 0 ? port : 0;"
    },
    {
        "line": 31,
        "fullcodeline": "mutex_lock(&client->ports_mutex);"
    },
    {
        "line": 32,
        "fullcodeline": "write_lock_irqsave(&client->ports_lock, flags);"
    },
    {
        "line": 33,
        "fullcodeline": "list_for_each_entry(p, &client->ports_list_head, list) {"
    },
    {
        "line": 40,
        "fullcodeline": "list_add_tail(&new_port->list, &p->list);"
    },
    {
        "line": 41,
        "fullcodeline": "client->num_ports++;"
    },
    {
        "line": 42,
        "fullcodeline": "new_port->addr.port = num;\t/* store the port number in the port */"
    },
    {
        "line": 43,
        "fullcodeline": "write_unlock_irqrestore(&client->ports_lock, flags);"
    },
    {
        "line": 44,
        "fullcodeline": "mutex_unlock(&client->ports_mutex);"
    },
    {
        "line": 45,
        "fullcodeline": "sprintf(new_port->name, \"port-%d\", num);"
    },
    {
        "line": 9,
        "fullcodeline": "if (snd_BUG_ON(!client))"
    },
    {
        "line": 12,
        "fullcodeline": "if (client->num_ports >= SNDRV_SEQ_MAX_PORTS) {"
    },
    {
        "line": 19,
        "fullcodeline": "if (!new_port)"
    },
    {
        "line": 13,
        "fullcodeline": "pr_warn(\"ALSA: seq: too many ports for client %d\\n\", client->number);"
    },
    {
        "line": 34,
        "fullcodeline": "if (p->addr.port > num)"
    },
    {
        "line": 36,
        "fullcodeline": "if (port < 0) /* auto-probe mode */"
    },
    {
        "line": 37,
        "fullcodeline": "num = p->addr.port + 1;"
    }
]