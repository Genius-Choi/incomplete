[
    {
        "line": 2,
        "fullcodeline": "if (t.shape() == TensorShape({})) {"
    },
    {
        "line": 22,
        "fullcodeline": "return errors::InvalidArgument("
    },
    {
        "line": 15,
        "fullcodeline": "if (t.dtype() == DT_INT32) {"
    },
    {
        "line": 24,
        "fullcodeline": "DataTypeString(t.dtype()));"
    },
    {
        "line": 3,
        "fullcodeline": "if ((t.dtype() == DT_INT32 && t.scalar<int32>()() == -1) ||"
    },
    {
        "line": 8,
        "fullcodeline": "return errors::InvalidArgument("
    },
    {
        "line": 16,
        "fullcodeline": "return PartialTensorShape::MakePartialShape(t.vec<int32>().data(),"
    },
    {
        "line": 4,
        "fullcodeline": "(t.dtype() == DT_INT64 && t.scalar<int64_t>()() == -1)) {"
    },
    {
        "line": 5,
        "fullcodeline": "*out = PartialTensorShape();"
    },
    {
        "line": 17,
        "fullcodeline": "t.NumElements(), out);"
    },
    {
        "line": 6,
        "fullcodeline": "return OkStatus();"
    },
    {
        "line": 11,
        "fullcodeline": "} else if (t.shape().dims() != 1) {"
    },
    {
        "line": 18,
        "fullcodeline": "} else if (t.dtype() == DT_INT64) {"
    },
    {
        "line": 12,
        "fullcodeline": "return errors::InvalidArgument(\"Shape must be at most rank 1 but is rank \","
    },
    {
        "line": 19,
        "fullcodeline": "return PartialTensorShape::MakePartialShape(t.vec<int64_t>().data(),"
    },
    {
        "line": 13,
        "fullcodeline": "t.shape().dims());"
    },
    {
        "line": 20,
        "fullcodeline": "t.NumElements(), out);"
    }
]