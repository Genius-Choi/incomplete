[
    {
        "line": 8,
        "fullcodeline": "struct iscsi_param_list *param_list = conn->param_list;"
    },
    {
        "line": 9,
        "fullcodeline": "char *tmpbuf, *start = NULL, *end = NULL;"
    },
    {
        "line": 11,
        "fullcodeline": "tmpbuf = kzalloc(length + 1, GFP_KERNEL);"
    },
    {
        "line": 17,
        "fullcodeline": "memcpy(tmpbuf, textbuf, length);"
    },
    {
        "line": 18,
        "fullcodeline": "tmpbuf[length] = '\\0';"
    },
    {
        "line": 19,
        "fullcodeline": "start = tmpbuf;"
    },
    {
        "line": 20,
        "fullcodeline": "end = (start + length);"
    },
    {
        "line": 72,
        "fullcodeline": "kfree(tmpbuf);"
    },
    {
        "line": 12,
        "fullcodeline": "if (!tmpbuf) {"
    },
    {
        "line": 22,
        "fullcodeline": "while (start < end) {"
    },
    {
        "line": 13,
        "fullcodeline": "pr_err(\"Unable to allocate memory for tmpbuf.\\n\");"
    },
    {
        "line": 31,
        "fullcodeline": "pr_debug(\"Got key: %s=%s\\n\", key, value);"
    },
    {
        "line": 40,
        "fullcodeline": "param = iscsi_check_key(key, phase, sender, param_list);"
    },
    {
        "line": 55,
        "fullcodeline": "start += strlen(key) + strlen(value) + 2;"
    },
    {
        "line": 14,
        "fullcodeline": "return -1;"
    },
    {
        "line": 26,
        "fullcodeline": "if (iscsi_extract_key_value(start, &key, &value) < 0) {"
    },
    {
        "line": 33,
        "fullcodeline": "if (phase & PHASE_SECURITY) {"
    },
    {
        "line": 41,
        "fullcodeline": "if (!param) {"
    },
    {
        "line": 50,
        "fullcodeline": "if (iscsi_check_value(param, value) < 0) {"
    },
    {
        "line": 57,
        "fullcodeline": "if (IS_PSTATE_PROPOSER(param)) {"
    },
    {
        "line": 27,
        "fullcodeline": "kfree(tmpbuf);"
    },
    {
        "line": 47,
        "fullcodeline": "start += strlen(key) + strlen(value) + 2;"
    },
    {
        "line": 51,
        "fullcodeline": "kfree(tmpbuf);"
    },
    {
        "line": 62,
        "fullcodeline": "SET_PSTATE_RESPONSE_GOT(param);"
    },
    {
        "line": 28,
        "fullcodeline": "return -1;"
    },
    {
        "line": 34,
        "fullcodeline": "if (iscsi_check_for_auth_key(key) > 0) {"
    },
    {
        "line": 42,
        "fullcodeline": "if (iscsi_add_notunderstood_response(key,"
    },
    {
        "line": 52,
        "fullcodeline": "return -1;"
    },
    {
        "line": 58,
        "fullcodeline": "if (iscsi_check_proposer_state(param, value) < 0) {"
    },
    {
        "line": 68,
        "fullcodeline": "SET_PSTATE_ACCEPTOR(param);"
    },
    {
        "line": 35,
        "fullcodeline": "kfree(tmpbuf);"
    },
    {
        "line": 44,
        "fullcodeline": "kfree(tmpbuf);"
    },
    {
        "line": 59,
        "fullcodeline": "kfree(tmpbuf);"
    },
    {
        "line": 64,
        "fullcodeline": "if (iscsi_check_acceptor_state(param, value, conn) < 0) {"
    },
    {
        "line": 45,
        "fullcodeline": "return -1;"
    },
    {
        "line": 60,
        "fullcodeline": "return -1;"
    },
    {
        "line": 65,
        "fullcodeline": "kfree(tmpbuf);"
    },
    {
        "line": 66,
        "fullcodeline": "return -1;"
    }
]