[
    {
        "line": 4,
        "fullcodeline": "VP8Context *s = avctx->priv_data;"
    },
    {
        "line": 19,
        "fullcodeline": "referenced = s->update_last || s->update_golden == VP56_FRAME_CURRENT ||"
    },
    {
        "line": 22,
        "fullcodeline": "skip_thresh = !referenced ? AVDISCARD_NONREF"
    },
    {
        "line": 31,
        "fullcodeline": "s->deblock_filter = s->filter.level && avctx->skip_loop_filter < skip_thresh;"
    },
    {
        "line": 42,
        "fullcodeline": "curframe = s->framep[VP56_FRAME_CURRENT] = vp8_find_free_buffer(s);"
    },
    {
        "line": 64,
        "fullcodeline": "curframe->tf.f->key_frame = s->keyframe;"
    },
    {
        "line": 65,
        "fullcodeline": "curframe->tf.f->pict_type = s->keyframe ? AV_PICTURE_TYPE_I"
    },
    {
        "line": 86,
        "fullcodeline": "s->next_framep[VP56_FRAME_CURRENT] = curframe;"
    },
    {
        "line": 94,
        "fullcodeline": "memset(s->top_nnz, 0, s->mb_width * sizeof(*s->top_nnz));"
    },
    {
        "line": 103,
        "fullcodeline": "memset(s->ref_count, 0, sizeof(s->ref_count));"
    },
    {
        "line": 121,
        "fullcodeline": "s->num_jobs   = num_jobs;"
    },
    {
        "line": 122,
        "fullcodeline": "s->curframe   = curframe;"
    },
    {
        "line": 123,
        "fullcodeline": "s->prev_frame = prev_frame;"
    },
    {
        "line": 124,
        "fullcodeline": "s->mv_bounds.mv_min.y   = -MARGIN;"
    },
    {
        "line": 125,
        "fullcodeline": "s->mv_bounds.mv_max.y   = ((s->mb_height - 1) << 6) + MARGIN;"
    },
    {
        "line": 138,
        "fullcodeline": "ff_thread_report_progress(&curframe->tf, INT_MAX, 0);"
    },
    {
        "line": 139,
        "fullcodeline": "memcpy(&s->framep[0], &s->next_framep[0], sizeof(s->framep[0]) * 4);"
    },
    {
        "line": 155,
        "fullcodeline": "memcpy(&s->next_framep[0], &s->framep[0], sizeof(s->framep[0]) * 4);"
    },
    {
        "line": 14,
        "fullcodeline": "if (ret < 0)"
    },
    {
        "line": 26,
        "fullcodeline": "if (avctx->skip_frame >= skip_thresh) {"
    },
    {
        "line": 34,
        "fullcodeline": "for (i = 0; i < 5; i++)"
    },
    {
        "line": 44,
        "fullcodeline": "if (!s->colorspace)"
    },
    {
        "line": 55,
        "fullcodeline": "if (!s->keyframe && (!s->framep[VP56_FRAME_PREVIOUS] ||"
    },
    {
        "line": 67,
        "fullcodeline": "if ((ret = vp8_alloc_frame(s, curframe, referenced)) < 0)"
    },
    {
        "line": 71,
        "fullcodeline": "if (s->update_altref != VP56_FRAME_NONE)"
    },
    {
        "line": 76,
        "fullcodeline": "if (s->update_golden != VP56_FRAME_NONE)"
    },
    {
        "line": 97,
        "fullcodeline": "if (!s->mb_layout)"
    },
    {
        "line": 100,
        "fullcodeline": "if (!s->mb_layout && s->keyframe)"
    },
    {
        "line": 105,
        "fullcodeline": "if (s->mb_layout == 1) {"
    },
    {
        "line": 117,
        "fullcodeline": "if (avctx->active_thread_type == FF_THREAD_FRAME)"
    },
    {
        "line": 126,
        "fullcodeline": "for (i = 0; i < MAX_THREADS; i++) {"
    },
    {
        "line": 144,
        "fullcodeline": "if (!s->update_probabilities)"
    },
    {
        "line": 147,
        "fullcodeline": "if (!s->invisible) {"
    },
    {
        "line": 10,
        "fullcodeline": "ret = vp7_decode_frame_header(s, avpkt->data, avpkt->size);"
    },
    {
        "line": 20,
        "fullcodeline": "s->update_altref == VP56_FRAME_CURRENT;"
    },
    {
        "line": 23,
        "fullcodeline": ": !s->keyframe ? AVDISCARD_NONKEY"
    },
    {
        "line": 27,
        "fullcodeline": "s->invisible = 1;"
    },
    {
        "line": 28,
        "fullcodeline": "memcpy(&s->next_framep[0], &s->framep[0], sizeof(s->framep[0]) * 4);"
    },
    {
        "line": 35,
        "fullcodeline": "if (s->frames[i].tf.f->data[0] &&"
    },
    {
        "line": 45,
        "fullcodeline": "avctx->colorspace = AVCOL_SPC_BT470BG;"
    },
    {
        "line": 47,
        "fullcodeline": "avctx->color_range = AVCOL_RANGE_JPEG;"
    },
    {
        "line": 58,
        "fullcodeline": "av_log(avctx, AV_LOG_WARNING,"
    },
    {
        "line": 60,
        "fullcodeline": "ret = AVERROR_INVALIDDATA;"
    },
    {
        "line": 82,
        "fullcodeline": "s->next_framep[VP56_FRAME_PREVIOUS] = curframe;"
    },
    {
        "line": 89,
        "fullcodeline": "ff_thread_finish_setup(avctx);"
    },
    {
        "line": 98,
        "fullcodeline": "memset(s->macroblocks + s->mb_height * 2 - 1, 0,"
    },
    {
        "line": 101,
        "fullcodeline": "memset(s->intra4x4_pred_mode_top, DC_PRED, s->mb_width * 4);"
    },
    {
        "line": 118,
        "fullcodeline": "num_jobs = 1;"
    },
    {
        "line": 128,
        "fullcodeline": "atomic_init(&td->thread_mb_pos, 0);"
    },
    {
        "line": 129,
        "fullcodeline": "atomic_init(&td->wait_mb_pos, INT_MAX);"
    },
    {
        "line": 132,
        "fullcodeline": "avctx->execute2(avctx, vp7_decode_mb_row_sliced, s->thread_data, NULL,"
    },
    {
        "line": 150,
        "fullcodeline": "*got_frame = 1;"
    },
    {
        "line": 12,
        "fullcodeline": "ret = vp8_decode_frame_header(s, avpkt->data, avpkt->size);"
    },
    {
        "line": 39,
        "fullcodeline": "&s->frames[i] != s->framep[VP56_FRAME_GOLDEN2])"
    },
    {
        "line": 40,
        "fullcodeline": "vp8_release_frame(s, &s->frames[i]);"
    },
    {
        "line": 49,
        "fullcodeline": "avctx->color_range = AVCOL_RANGE_MPEG;"
    },
    {
        "line": 57,
        "fullcodeline": "!s->framep[VP56_FRAME_GOLDEN2])) {"
    },
    {
        "line": 74,
        "fullcodeline": "s->next_framep[VP56_FRAME_GOLDEN2] = s->framep[VP56_FRAME_GOLDEN2];"
    },
    {
        "line": 79,
        "fullcodeline": "s->next_framep[VP56_FRAME_GOLDEN] = s->framep[VP56_FRAME_GOLDEN];"
    },
    {
        "line": 84,
        "fullcodeline": "s->next_framep[VP56_FRAME_PREVIOUS] = s->framep[VP56_FRAME_PREVIOUS];"
    },
    {
        "line": 99,
        "fullcodeline": "(s->mb_width + 1) * sizeof(*s->macroblocks));"
    },
    {
        "line": 108,
        "fullcodeline": "if (prev_frame && s->segmentation.enabled &&"
    },
    {
        "line": 120,
        "fullcodeline": "num_jobs = FFMIN(s->num_coeff_partitions, avctx->thread_count);"
    },
    {
        "line": 135,
        "fullcodeline": "avctx->execute2(avctx, vp8_decode_mb_row_sliced, s->thread_data, NULL,"
    },
    {
        "line": 148,
        "fullcodeline": "if ((ret = av_frame_ref(data, curframe->tf.f)) < 0)"
    },
    {
        "line": 38,
        "fullcodeline": "&s->frames[i] != s->framep[VP56_FRAME_GOLDEN]   &&"
    },
    {
        "line": 56,
        "fullcodeline": "!s->framep[VP56_FRAME_GOLDEN]   ||"
    },
    {
        "line": 110,
        "fullcodeline": "ff_thread_await_progress(&prev_frame->tf, 1, 0);"
    },
    {
        "line": 112,
        "fullcodeline": "vp7_decode_mv_mb_modes(avctx, curframe, prev_frame);"
    },
    {
        "line": 37,
        "fullcodeline": "&s->frames[i] != s->framep[VP56_FRAME_PREVIOUS] &&"
    },
    {
        "line": 114,
        "fullcodeline": "vp8_decode_mv_mb_modes(avctx, curframe, prev_frame);"
    },
    {
        "line": 36,
        "fullcodeline": "&s->frames[i] != prev_frame &&"
    }
]