[
    {
        "line": 51,
        "fullcodeline": "parsed_header = json_decode(base64url_decode(header))"
    },
    {
        "line": 53,
        "fullcodeline": "alg = parsed_header.get('alg')"
    },
    {
        "line": 73,
        "fullcodeline": "parsed_claims = json_decode(base64url_decode(claims))"
    },
    {
        "line": 75,
        "fullcodeline": "utcnow = datetime.utcnow()"
    },
    {
        "line": 76,
        "fullcodeline": "now = timegm(utcnow.utctimetuple())"
    },
    {
        "line": 78,
        "fullcodeline": "typ = parsed_header.get('typ')"
    },
    {
        "line": 85,
        "fullcodeline": "iat = parsed_claims.get('iat')"
    },
    {
        "line": 92,
        "fullcodeline": "nbf = parsed_claims.get('nbf')"
    },
    {
        "line": 99,
        "fullcodeline": "exp = parsed_claims.get('exp')"
    },
    {
        "line": 42,
        "fullcodeline": "if allowed_algs is None:"
    },
    {
        "line": 45,
        "fullcodeline": "if not isinstance(allowed_algs, list):"
    },
    {
        "line": 49,
        "fullcodeline": "header, claims, _ = jwt.split('.')"
    },
    {
        "line": 54,
        "fullcodeline": "if alg is None:"
    },
    {
        "line": 56,
        "fullcodeline": "if alg not in allowed_algs:"
    },
    {
        "line": 59,
        "fullcodeline": "if not ignore_not_implemented:"
    },
    {
        "line": 79,
        "fullcodeline": "if typ is None:"
    },
    {
        "line": 86,
        "fullcodeline": "if iat is None:"
    },
    {
        "line": 93,
        "fullcodeline": "if nbf is None:"
    },
    {
        "line": 100,
        "fullcodeline": "if exp is None:"
    },
    {
        "line": 106,
        "fullcodeline": "return parsed_header, parsed_claims"
    },
    {
        "line": 43,
        "fullcodeline": "allowed_algs = []"
    },
    {
        "line": 47,
        "fullcodeline": "raise _JWTError('allowed_algs must be a list')"
    },
    {
        "line": 55,
        "fullcodeline": "raise _JWTError('alg header not present')"
    },
    {
        "line": 57,
        "fullcodeline": "raise _JWTError('algorithm not allowed: ' + alg)"
    },
    {
        "line": 67,
        "fullcodeline": "token = JWS()"
    },
    {
        "line": 68,
        "fullcodeline": "token.allowed_algs = allowed_algs"
    },
    {
        "line": 69,
        "fullcodeline": "token.deserialize(jwt, pub_key)"
    },
    {
        "line": 60,
        "fullcodeline": "for k in parsed_header:"
    },
    {
        "line": 70,
        "fullcodeline": "elif 'none' not in allowed_algs:"
    },
    {
        "line": 80,
        "fullcodeline": "if not checks_optional:"
    },
    {
        "line": 82,
        "fullcodeline": "elif typ != 'JWT':"
    },
    {
        "line": 87,
        "fullcodeline": "if not checks_optional:"
    },
    {
        "line": 89,
        "fullcodeline": "elif iat > timegm((utcnow + iat_skew).utctimetuple()):"
    },
    {
        "line": 94,
        "fullcodeline": "if not checks_optional:"
    },
    {
        "line": 96,
        "fullcodeline": "elif nbf > now:"
    },
    {
        "line": 101,
        "fullcodeline": "if not checks_optional:"
    },
    {
        "line": 103,
        "fullcodeline": "elif exp <= now:"
    },
    {
        "line": 71,
        "fullcodeline": "raise _JWTError('no key but none alg not allowed')"
    },
    {
        "line": 81,
        "fullcodeline": "raise _JWTError('typ header not present')"
    },
    {
        "line": 83,
        "fullcodeline": "raise _JWTError('typ header is not JWT')"
    },
    {
        "line": 88,
        "fullcodeline": "raise _JWTError('iat claim not present')"
    },
    {
        "line": 90,
        "fullcodeline": "raise _JWTError('issued in the future')"
    },
    {
        "line": 95,
        "fullcodeline": "raise _JWTError('nbf claim not present')"
    },
    {
        "line": 97,
        "fullcodeline": "raise _JWTError('not yet valid')"
    },
    {
        "line": 102,
        "fullcodeline": "raise _JWTError('exp claim not present')"
    },
    {
        "line": 104,
        "fullcodeline": "raise _JWTError('expired')"
    },
    {
        "line": 61,
        "fullcodeline": "if k not in JWSHeaderRegistry:"
    },
    {
        "line": 63,
        "fullcodeline": "if not JWSHeaderRegistry[k].supported:"
    },
    {
        "line": 62,
        "fullcodeline": "raise _JWTError('unknown header: ' + k)"
    },
    {
        "line": 64,
        "fullcodeline": "raise _JWTError('header not implemented: ' + k)"
    }
]