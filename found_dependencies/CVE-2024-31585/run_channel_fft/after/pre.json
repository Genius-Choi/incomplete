[
    {
        "line": 3,
        "fullcodeline": "ShowSpectrumContext *s = ctx->priv;"
    },
    {
        "line": 4,
        "fullcodeline": "AVFilterLink *inlink = ctx->inputs[0];"
    },
    {
        "line": 5,
        "fullcodeline": "const float *window_func_lut = s->window_func_lut;"
    },
    {
        "line": 6,
        "fullcodeline": "AVFrame *fin = arg;"
    },
    {
        "line": 7,
        "fullcodeline": "const int ch = jobnr;"
    },
    {
        "line": 11,
        "fullcodeline": "const float *p = (float *)fin->extended_data[ch];"
    },
    {
        "line": 12,
        "fullcodeline": "float *in_frame = (float *)s->in_frame->extended_data[ch];"
    },
    {
        "line": 14,
        "fullcodeline": "memmove(in_frame, in_frame + s->hop_size, (s->fft_size - s->hop_size) * sizeof(float));"
    },
    {
        "line": 15,
        "fullcodeline": "memcpy(in_frame + s->fft_size - s->hop_size, p, fin->nb_samples * sizeof(float));"
    },
    {
        "line": 17,
        "fullcodeline": "for (int i = fin->nb_samples; i < s->hop_size; i++)"
    },
    {
        "line": 18,
        "fullcodeline": "in_frame[i + s->fft_size - s->hop_size] = 0.f;"
    },
    {
        "line": 22,
        "fullcodeline": "AVComplexFloat *f = s->fft_in[ch];"
    },
    {
        "line": 23,
        "fullcodeline": "AVComplexFloat *g = s->fft_data[ch];"
    },
    {
        "line": 24,
        "fullcodeline": "AVComplexFloat *h = s->fft_scratch[ch];"
    },
    {
        "line": 25,
        "fullcodeline": "int L = s->buf_size;"
    },
    {
        "line": 26,
        "fullcodeline": "int N = s->win_size;"
    },
    {
        "line": 27,
        "fullcodeline": "int M = s->win_size / 2;"
    },
    {
        "line": 34,
        "fullcodeline": "phi = 2.f * M_PI * (s->stop - s->start) / (float)inlink->sample_rate / (M - 1);"
    },
    {
        "line": 35,
        "fullcodeline": "theta = 2.f * M_PI * s->start / (float)inlink->sample_rate;"
    },
    {
        "line": 67,
        "fullcodeline": "memcpy(f, h, s->buf_size * sizeof(*f));"
    },
    {
        "line": 68,
        "fullcodeline": "s->tx_fn(s->fft[ch], h, f, sizeof(float));"
    },
    {
        "line": 70,
        "fullcodeline": "memcpy(f, g, s->buf_size * sizeof(*f));"
    },
    {
        "line": 71,
        "fullcodeline": "s->tx_fn(s->fft[ch], g, f, sizeof(float));"
    },
    {
        "line": 83,
        "fullcodeline": "memcpy(f, g, s->buf_size * sizeof(*f));"
    },
    {
        "line": 84,
        "fullcodeline": "s->itx_fn(s->ifft[ch], g, f, sizeof(float));"
    },
    {
        "line": 29,
        "fullcodeline": "for (n = 0; n < s->win_size; n++) {"
    },
    {
        "line": 37,
        "fullcodeline": "for (int n = 0; n < M; n++) {"
    },
    {
        "line": 42,
        "fullcodeline": "for (int n = M; n < L; n++) {"
    },
    {
        "line": 47,
        "fullcodeline": "for (int n = L - N; n < L; n++) {"
    },
    {
        "line": 52,
        "fullcodeline": "for (int n = N; n < L; n++) {"
    },
    {
        "line": 57,
        "fullcodeline": "for (int n = 0; n < N; n++) {"
    },
    {
        "line": 73,
        "fullcodeline": "for (int n = 0; n < L; n++) {"
    },
    {
        "line": 86,
        "fullcodeline": "for (int k = 0; k < M; k++) {"
    },
    {
        "line": 102,
        "fullcodeline": "s->tx_fn(s->fft[ch], s->fft_data[ch], s->fft_in[ch], sizeof(float));"
    },
    {
        "line": 30,
        "fullcodeline": "s->fft_data[ch][n].re = in_frame[n] * window_func_lut[n];"
    },
    {
        "line": 31,
        "fullcodeline": "s->fft_data[ch][n].im = 0;"
    },
    {
        "line": 38,
        "fullcodeline": "h[n].re = cosf(n * n / 2.f * phi);"
    },
    {
        "line": 39,
        "fullcodeline": "h[n].im = sinf(n * n / 2.f * phi);"
    },
    {
        "line": 43,
        "fullcodeline": "h[n].re = 0.f;"
    },
    {
        "line": 44,
        "fullcodeline": "h[n].im = 0.f;"
    },
    {
        "line": 48,
        "fullcodeline": "h[n].re = cosf((L - n) * (L - n) / 2.f * phi);"
    },
    {
        "line": 49,
        "fullcodeline": "h[n].im = sinf((L - n) * (L - n) / 2.f * phi);"
    },
    {
        "line": 53,
        "fullcodeline": "g[n].re = 0.f;"
    },
    {
        "line": 54,
        "fullcodeline": "g[n].im = 0.f;"
    },
    {
        "line": 58,
        "fullcodeline": "psi = n * theta + n * n / 2.f * phi;"
    },
    {
        "line": 59,
        "fullcodeline": "c =  cosf(psi);"
    },
    {
        "line": 60,
        "fullcodeline": "S = -sinf(psi);"
    },
    {
        "line": 61,
        "fullcodeline": "a = c * g[n].re - S * g[n].im;"
    },
    {
        "line": 62,
        "fullcodeline": "b = S * g[n].re + c * g[n].im;"
    },
    {
        "line": 63,
        "fullcodeline": "g[n].re = a;"
    },
    {
        "line": 64,
        "fullcodeline": "g[n].im = b;"
    },
    {
        "line": 74,
        "fullcodeline": "c = g[n].re;"
    },
    {
        "line": 75,
        "fullcodeline": "S = g[n].im;"
    },
    {
        "line": 76,
        "fullcodeline": "a = c * h[n].re - S * h[n].im;"
    },
    {
        "line": 77,
        "fullcodeline": "b = S * h[n].re + c * h[n].im;"
    },
    {
        "line": 79,
        "fullcodeline": "g[n].re = a / L;"
    },
    {
        "line": 80,
        "fullcodeline": "g[n].im = b / L;"
    },
    {
        "line": 87,
        "fullcodeline": "psi = k * k / 2.f * phi;"
    },
    {
        "line": 88,
        "fullcodeline": "c =  cosf(psi);"
    },
    {
        "line": 89,
        "fullcodeline": "S = -sinf(psi);"
    },
    {
        "line": 90,
        "fullcodeline": "a = c * g[k].re - S * g[k].im;"
    },
    {
        "line": 91,
        "fullcodeline": "b = S * g[k].re + c * g[k].im;"
    },
    {
        "line": 92,
        "fullcodeline": "s->fft_data[ch][k].re = a;"
    },
    {
        "line": 93,
        "fullcodeline": "s->fft_data[ch][k].im = b;"
    },
    {
        "line": 96,
        "fullcodeline": "for (n = 0; n < s->win_size; n++) {"
    },
    {
        "line": 97,
        "fullcodeline": "s->fft_in[ch][n].re = in_frame[n] * window_func_lut[n];"
    },
    {
        "line": 98,
        "fullcodeline": "s->fft_in[ch][n].im = 0;"
    }
]