[
    {
        "line": 3,
        "fullcodeline": "ShowSpectrumContext *s = ctx->priv;"
    },
    {
        "line": 4,
        "fullcodeline": "AVFilterLink *inlink = ctx->inputs[0];"
    },
    {
        "line": 5,
        "fullcodeline": "AVFilterLink *outlink = ctx->outputs[0];"
    },
    {
        "line": 6,
        "fullcodeline": "int ch, y, x = 0, sz = s->orientation == VERTICAL ? s->w : s->h;"
    },
    {
        "line": 7,
        "fullcodeline": "int multi = (s->mode == SEPARATE && s->color_mode == CHANNEL);"
    },
    {
        "line": 8,
        "fullcodeline": "float spp = samples / (float)sz;"
    },
    {
        "line": 11,
        "fullcodeline": "char chlayout_str[128];"
    },
    {
        "line": 13,
        "fullcodeline": "av_get_channel_layout_string(chlayout_str, sizeof(chlayout_str), inlink->channels,"
    },
    {
        "line": 16,
        "fullcodeline": "text = av_asprintf(\"%d Hz | %s\", inlink->sample_rate, chlayout_str);"
    },
    {
        "line": 20,
        "fullcodeline": "drawtext(s->outpicref, 2, outlink->h - 10, \"CREATED BY LIBAVFILTER\", 0);"
    },
    {
        "line": 21,
        "fullcodeline": "drawtext(s->outpicref, outlink->w - 2 - strlen(text) * 10, outlink->h - 10, text, 0);"
    },
    {
        "line": 22,
        "fullcodeline": "av_freep(&text);"
    },
    {
        "line": 17,
        "fullcodeline": "if (!text)"
    },
    {
        "line": 31,
        "fullcodeline": "dst = s->outpicref->data[0] + (s->start_y - 1) * s->outpicref->linesize[0] + s->start_x - 1;"
    },
    {
        "line": 32,
        "fullcodeline": "for (x = 0; x < s->w + 1; x++)"
    },
    {
        "line": 34,
        "fullcodeline": "dst = s->outpicref->data[0] + (s->start_y + s->h) * s->outpicref->linesize[0] + s->start_x - 1;"
    },
    {
        "line": 35,
        "fullcodeline": "for (x = 0; x < s->w + 1; x++)"
    },
    {
        "line": 37,
        "fullcodeline": "for (y = 0; y < s->h + 2; y++) {"
    },
    {
        "line": 42,
        "fullcodeline": "if (s->orientation == VERTICAL) {"
    },
    {
        "line": 157,
        "fullcodeline": "for (ch = 0; ch < (multi ? s->nb_display_channels : 1); ch++) {"
    },
    {
        "line": 24,
        "fullcodeline": "text = av_asprintf(\"Zoom: %d Hz - %d Hz\", s->start, s->stop);"
    },
    {
        "line": 27,
        "fullcodeline": "drawtext(s->outpicref, outlink->w - 2 - strlen(text) * 10, 3, text, 0);"
    },
    {
        "line": 28,
        "fullcodeline": "av_freep(&text);"
    },
    {
        "line": 43,
        "fullcodeline": "int h = s->mode == SEPARATE ? s->h / s->nb_display_channels : s->h;"
    },
    {
        "line": 44,
        "fullcodeline": "int hh = s->mode == SEPARATE ? -(s->h % s->nb_display_channels) + 1 : 1;"
    },
    {
        "line": 98,
        "fullcodeline": "drawtext(s->outpicref, outlink->w / 2 - 4 * 4, outlink->h - s->start_y / 2, \"TIME\", 0);"
    },
    {
        "line": 99,
        "fullcodeline": "drawtext(s->outpicref, s->start_x / 7, outlink->h / 2 - 14 * 4, \"FREQUENCY (Hz)\", 1);"
    },
    {
        "line": 158,
        "fullcodeline": "int h = multi ? s->h / s->nb_display_channels : s->h;"
    },
    {
        "line": 18,
        "fullcodeline": "return AVERROR(ENOMEM);"
    },
    {
        "line": 25,
        "fullcodeline": "if (!text)"
    },
    {
        "line": 45,
        "fullcodeline": "for (ch = 0; ch < (s->mode == SEPARATE ? s->nb_display_channels : 1); ch++) {"
    },
    {
        "line": 87,
        "fullcodeline": "for (x = 0; x < s->w && s->single_pic; x+=80) {"
    },
    {
        "line": 101,
        "fullcodeline": "int w = s->mode == SEPARATE ? s->w / s->nb_display_channels : s->w;"
    },
    {
        "line": 153,
        "fullcodeline": "drawtext(s->outpicref, s->start_x / 7, outlink->h / 2 - 4 * 4, \"TIME\", 1);"
    },
    {
        "line": 154,
        "fullcodeline": "drawtext(s->outpicref, outlink->w / 2 - 14 * 4, outlink->h - s->start_y / 2, \"FREQUENCY (Hz)\", 0);"
    },
    {
        "line": 160,
        "fullcodeline": "for (y = 0; y < h; y++) {"
    },
    {
        "line": 180,
        "fullcodeline": "for (y = 0; ch == 0 && y < h + 5; y += 25) {"
    },
    {
        "line": 38,
        "fullcodeline": "dst = s->outpicref->data[0] + (y + s->start_y - 1) * s->outpicref->linesize[0];"
    },
    {
        "line": 39,
        "fullcodeline": "dst[s->start_x - 1] = 200;"
    },
    {
        "line": 88,
        "fullcodeline": "float seconds = x * spp / inlink->sample_rate;"
    },
    {
        "line": 89,
        "fullcodeline": "char *units = get_time(ctx, seconds, x);"
    },
    {
        "line": 93,
        "fullcodeline": "drawtext(s->outpicref, s->start_x + x - 4 * strlen(units), s->h + s->start_y + 6, units, 0);"
    },
    {
        "line": 94,
        "fullcodeline": "drawtext(s->outpicref, s->start_x + x - 4 * strlen(units), s->start_y - 12, units, 0);"
    },
    {
        "line": 102,
        "fullcodeline": "for (y = 0; y < s->h; y += 20) {"
    },
    {
        "line": 107,
        "fullcodeline": "for (y = 0; y < s->h; y += 40) {"
    },
    {
        "line": 112,
        "fullcodeline": "for (ch = 0; ch < (s->mode == SEPARATE ? s->nb_display_channels : 1); ch++) {"
    },
    {
        "line": 144,
        "fullcodeline": "for (y = 0; y < s->h && s->single_pic; y+=40) {"
    },
    {
        "line": 161,
        "fullcodeline": "float out[3] = { 0., 127.5, 127.5};"
    },
    {
        "line": 181,
        "fullcodeline": "static const char *log_fmt = \"%.0f\";"
    },
    {
        "line": 182,
        "fullcodeline": "static const char *lin_fmt = \"%.3f\";"
    },
    {
        "line": 183,
        "fullcodeline": "const float a = av_clipf(1.f - y / (float)(h - 1), 0.f, 1.f);"
    },
    {
        "line": 184,
        "fullcodeline": "const float value = s->scale == LOG ? log10f(get_iscale(ctx, s->scale, a)) * 20.f : get_iscale(ctx, s->scale, a);"
    },
    {
        "line": 187,
        "fullcodeline": "text = av_asprintf(s->scale == LOG ? log_fmt : lin_fmt, value);"
    },
    {
        "line": 190,
        "fullcodeline": "drawtext(s->outpicref, s->w + s->start_x + 35, s->start_y + y - 3, text, 0);"
    },
    {
        "line": 26,
        "fullcodeline": "return AVERROR(ENOMEM);"
    },
    {
        "line": 46,
        "fullcodeline": "for (y = 0; y < h; y += 20) {"
    },
    {
        "line": 51,
        "fullcodeline": "for (y = 0; y < h; y += 40) {"
    },
    {
        "line": 57,
        "fullcodeline": "for (x = 0; x < s->w; x+=40)"
    },
    {
        "line": 60,
        "fullcodeline": "for (x = 0; x < s->w; x+=80)"
    },
    {
        "line": 63,
        "fullcodeline": "for (x = 0; x < s->w; x+=40) {"
    },
    {
        "line": 67,
        "fullcodeline": "for (x = 0; x < s->w; x+=80) {"
    },
    {
        "line": 70,
        "fullcodeline": "for (y = 0; y < h; y += 40) {"
    },
    {
        "line": 90,
        "fullcodeline": "if (!units)"
    },
    {
        "line": 145,
        "fullcodeline": "float seconds = y * spp / inlink->sample_rate;"
    },
    {
        "line": 146,
        "fullcodeline": "char *units = get_time(ctx, seconds, x);"
    },
    {
        "line": 150,
        "fullcodeline": "drawtext(s->outpicref, s->start_x - 8 * strlen(units) - 4, s->start_y + y - 4, units, 0);"
    },
    {
        "line": 164,
        "fullcodeline": "for (chn = 0; chn < (s->mode == SEPARATE ? 1 : s->nb_display_channels); chn++) {"
    },
    {
        "line": 175,
        "fullcodeline": "memset(s->outpicref->data[0]+(s->start_y + h * (ch + 1) - y - 1) * s->outpicref->linesize[0] + s->w + s->start_x + 20, av_clip_uint8(out[0]), 10);"
    },
    {
        "line": 176,
        "fullcodeline": "memset(s->outpicref->data[1]+(s->start_y + h * (ch + 1) - y - 1) * s->outpicref->linesize[1] + s->w + s->start_x + 20, av_clip_uint8(out[1]), 10);"
    },
    {
        "line": 177,
        "fullcodeline": "memset(s->outpicref->data[2]+(s->start_y + h * (ch + 1) - y - 1) * s->outpicref->linesize[2] + s->w + s->start_x + 20, av_clip_uint8(out[2]), 10);"
    },
    {
        "line": 188,
        "fullcodeline": "if (!text)"
    },
    {
        "line": 71,
        "fullcodeline": "float range = s->stop ? s->stop - s->start : inlink->sample_rate / 2;"
    },
    {
        "line": 72,
        "fullcodeline": "float hertz = get_hz(y, h, s->start, s->start + range, s->fscale);"
    },
    {
        "line": 82,
        "fullcodeline": "drawtext(s->outpicref, s->start_x - 8 * strlen(units) - 4, h * (ch + 1) + s->start_y - y - 4 - hh, units, 0);"
    },
    {
        "line": 114,
        "fullcodeline": "for (x = 0; x < w; x+=40)"
    },
    {
        "line": 117,
        "fullcodeline": "for (x = 0; x < w; x+=80)"
    },
    {
        "line": 120,
        "fullcodeline": "for (x = 0; x < w; x+=40) {"
    },
    {
        "line": 124,
        "fullcodeline": "for (x = 0; x < w; x+=80) {"
    },
    {
        "line": 127,
        "fullcodeline": "for (x = 0; x < w - 79; x += 80) {"
    },
    {
        "line": 147,
        "fullcodeline": "if (!units)"
    },
    {
        "line": 166,
        "fullcodeline": "int channel = (multi) ? s->nb_display_channels - ch - 1 : chn;"
    },
    {
        "line": 167,
        "fullcodeline": "float lout[3];"
    },
    {
        "line": 169,
        "fullcodeline": "color_range(s, channel, &yf, &uf, &vf);"
    },
    {
        "line": 170,
        "fullcodeline": "pick_color(s, yf, uf, vf, y / (float)h, lout);"
    },
    {
        "line": 171,
        "fullcodeline": "out[0] += lout[0];"
    },
    {
        "line": 172,
        "fullcodeline": "out[1] += lout[1];"
    },
    {
        "line": 173,
        "fullcodeline": "out[2] += lout[2];"
    },
    {
        "line": 56,
        "fullcodeline": "dst = s->outpicref->data[0] + (s->start_y - 2) * s->outpicref->linesize[0] + s->start_x;"
    },
    {
        "line": 59,
        "fullcodeline": "dst = s->outpicref->data[0] + (s->start_y - 3) * s->outpicref->linesize[0] + s->start_x;"
    },
    {
        "line": 62,
        "fullcodeline": "dst = s->outpicref->data[0] + (s->h + s->start_y + 1) * s->outpicref->linesize[0] + s->start_x;"
    },
    {
        "line": 66,
        "fullcodeline": "dst = s->outpicref->data[0] + (s->h + s->start_y + 2) * s->outpicref->linesize[0] + s->start_x;"
    },
    {
        "line": 75,
        "fullcodeline": "if (hertz == 0)"
    },
    {
        "line": 79,
        "fullcodeline": "if (!units)"
    },
    {
        "line": 91,
        "fullcodeline": "return AVERROR(ENOMEM);"
    },
    {
        "line": 103,
        "fullcodeline": "dst = s->outpicref->data[0] + (s->start_y + y) * s->outpicref->linesize[0];"
    },
    {
        "line": 104,
        "fullcodeline": "dst[s->start_x - 2] = 200;"
    },
    {
        "line": 108,
        "fullcodeline": "dst = s->outpicref->data[0] + (s->start_y + y) * s->outpicref->linesize[0];"
    },
    {
        "line": 109,
        "fullcodeline": "dst[s->start_x - 3] = 200;"
    },
    {
        "line": 113,
        "fullcodeline": "dst = s->outpicref->data[0] + (s->start_y - 2) * s->outpicref->linesize[0] + s->start_x + w * ch;"
    },
    {
        "line": 116,
        "fullcodeline": "dst = s->outpicref->data[0] + (s->start_y - 3) * s->outpicref->linesize[0] + s->start_x + w * ch;"
    },
    {
        "line": 119,
        "fullcodeline": "dst = s->outpicref->data[0] + (s->h + s->start_y + 1) * s->outpicref->linesize[0] + s->start_x + w * ch;"
    },
    {
        "line": 123,
        "fullcodeline": "dst = s->outpicref->data[0] + (s->h + s->start_y + 2) * s->outpicref->linesize[0] + s->start_x + w * ch;"
    },
    {
        "line": 128,
        "fullcodeline": "float range = s->stop ? s->stop - s->start : inlink->sample_rate / 2;"
    },
    {
        "line": 129,
        "fullcodeline": "float hertz = get_hz(x, w, s->start, s->start + range, s->fscale);"
    },
    {
        "line": 139,
        "fullcodeline": "drawtext(s->outpicref, s->start_x - 4 * strlen(units) + x + w * ch, s->start_y - 12, units, 0);"
    },
    {
        "line": 140,
        "fullcodeline": "drawtext(s->outpicref, s->start_x - 4 * strlen(units) + x + w * ch, s->h + s->start_y + 6, units, 0);"
    },
    {
        "line": 47,
        "fullcodeline": "dst = s->outpicref->data[0] + (s->start_y + h * (ch + 1) - y - hh) * s->outpicref->linesize[0];"
    },
    {
        "line": 48,
        "fullcodeline": "dst[s->start_x - 2] = 200;"
    },
    {
        "line": 52,
        "fullcodeline": "dst = s->outpicref->data[0] + (s->start_y + h * (ch + 1) - y - hh) * s->outpicref->linesize[0];"
    },
    {
        "line": 53,
        "fullcodeline": "dst[s->start_x - 3] = 200;"
    },
    {
        "line": 76,
        "fullcodeline": "units = av_asprintf(\"DC\");"
    },
    {
        "line": 132,
        "fullcodeline": "if (hertz == 0)"
    },
    {
        "line": 136,
        "fullcodeline": "if (!units)"
    },
    {
        "line": 148,
        "fullcodeline": "return AVERROR(ENOMEM);"
    },
    {
        "line": 78,
        "fullcodeline": "units = av_asprintf(\"%.2f\", hertz);"
    },
    {
        "line": 80,
        "fullcodeline": "return AVERROR(ENOMEM);"
    },
    {
        "line": 133,
        "fullcodeline": "units = av_asprintf(\"DC\");"
    },
    {
        "line": 135,
        "fullcodeline": "units = av_asprintf(\"%.2f\", hertz);"
    },
    {
        "line": 137,
        "fullcodeline": "return AVERROR(ENOMEM);"
    }
]