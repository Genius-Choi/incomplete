[
    {
        "line": 3,
        "fullcodeline": "AVFilterContext *ctx = outlink->src;"
    },
    {
        "line": 4,
        "fullcodeline": "ShowSpectrumContext *s = ctx->priv;"
    },
    {
        "line": 8,
        "fullcodeline": "ret = ff_request_frame(inlink);"
    },
    {
        "line": 9,
        "fullcodeline": "if (ret == AVERROR_EOF && s->outpicref && s->samples > 0) {"
    },
    {
        "line": 10,
        "fullcodeline": "int consumed = 0;"
    },
    {
        "line": 11,
        "fullcodeline": "int x = 0, sz = s->orientation == VERTICAL ? s->w : s->h;"
    },
    {
        "line": 12,
        "fullcodeline": "unsigned int nb_frame = 0;"
    },
    {
        "line": 14,
        "fullcodeline": "int src_offset = 0;"
    },
    {
        "line": 17,
        "fullcodeline": "spf = s->win_size * (s->samples / ((s->win_size * sz) * ceil(s->samples / (float)(s->win_size * sz))));"
    },
    {
        "line": 18,
        "fullcodeline": "spf = FFMAX(1, spf);"
    },
    {
        "line": 19,
        "fullcodeline": "s->hop_size = spf;"
    },
    {
        "line": 21,
        "fullcodeline": "spb = (s->samples / (spf * sz)) * spf;"
    },
    {
        "line": 23,
        "fullcodeline": "fin = ff_get_audio_buffer(inlink, spf);"
    },
    {
        "line": 72,
        "fullcodeline": "av_frame_free(&fin);"
    },
    {
        "line": 73,
        "fullcodeline": "s->outpicref->pts = 0;"
    },
    {
        "line": 78,
        "fullcodeline": "ret = ff_filter_frame(outlink, s->outpicref);"
    },
    {
        "line": 79,
        "fullcodeline": "s->outpicref = NULL;"
    },
    {
        "line": 24,
        "fullcodeline": "if (!fin)"
    },
    {
        "line": 27,
        "fullcodeline": "while (x < sz) {"
    },
    {
        "line": 28,
        "fullcodeline": "int acc_samples = 0;"
    },
    {
        "line": 29,
        "fullcodeline": "int dst_offset = 0;"
    },
    {
        "line": 56,
        "fullcodeline": "ff_filter_execute(ctx, run_channel_fft, fin, NULL, s->nb_display_channels);"
    },
    {
        "line": 57,
        "fullcodeline": "acalc_magnitudes(s);"
    },
    {
        "line": 59,
        "fullcodeline": "consumed += spf;"
    },
    {
        "line": 76,
        "fullcodeline": "draw_legend(ctx, s->samples);"
    },
    {
        "line": 25,
        "fullcodeline": "return AVERROR(ENOMEM);"
    },
    {
        "line": 31,
        "fullcodeline": "while (nb_frame < s->nb_frames) {"
    },
    {
        "line": 60,
        "fullcodeline": "if (consumed >= spb) {"
    },
    {
        "line": 32,
        "fullcodeline": "AVFrame *cur_frame = s->frames[nb_frame];"
    },
    {
        "line": 33,
        "fullcodeline": "int cur_frame_samples = cur_frame->nb_samples;"
    },
    {
        "line": 34,
        "fullcodeline": "int nb_samples = 0;"
    },
    {
        "line": 44,
        "fullcodeline": "src_offset += nb_samples;"
    },
    {
        "line": 45,
        "fullcodeline": "dst_offset += nb_samples;"
    },
    {
        "line": 61,
        "fullcodeline": "int h = s->orientation == VERTICAL ? s->h : s->w;"
    },
    {
        "line": 63,
        "fullcodeline": "scale_magnitudes(s, 1.f / (consumed / spf));"
    },
    {
        "line": 64,
        "fullcodeline": "plot_spectrum_column(inlink, fin);"
    },
    {
        "line": 65,
        "fullcodeline": "consumed = 0;"
    },
    {
        "line": 66,
        "fullcodeline": "x++;"
    },
    {
        "line": 36,
        "fullcodeline": "if (acc_samples < spf) {"
    },
    {
        "line": 46,
        "fullcodeline": "if (cur_frame_samples <= src_offset) {"
    },
    {
        "line": 52,
        "fullcodeline": "if (acc_samples == spf)"
    },
    {
        "line": 67,
        "fullcodeline": "for (ch = 0; ch < s->nb_display_channels; ch++)"
    },
    {
        "line": 68,
        "fullcodeline": "memset(s->magnitudes[ch], 0, h * sizeof(float));"
    },
    {
        "line": 37,
        "fullcodeline": "nb_samples = FFMIN(spf - acc_samples, cur_frame_samples - src_offset);"
    },
    {
        "line": 38,
        "fullcodeline": "acc_samples += nb_samples;"
    },
    {
        "line": 39,
        "fullcodeline": "av_samples_copy(fin->extended_data, cur_frame->extended_data,"
    },
    {
        "line": 48,
        "fullcodeline": "nb_frame++;"
    },
    {
        "line": 49,
        "fullcodeline": "src_offset = 0;"
    }
]