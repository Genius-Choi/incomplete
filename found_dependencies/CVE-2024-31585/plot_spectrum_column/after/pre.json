[
    {
        "line": 3,
        "fullcodeline": "AVFilterContext *ctx = inlink->dst;"
    },
    {
        "line": 4,
        "fullcodeline": "AVFilterLink *outlink = ctx->outputs[0];"
    },
    {
        "line": 5,
        "fullcodeline": "ShowSpectrumContext *s = ctx->priv;"
    },
    {
        "line": 6,
        "fullcodeline": "AVFrame *outpicref = s->outpicref;"
    },
    {
        "line": 7,
        "fullcodeline": "int ret, plane, x, y, z = s->orientation == VERTICAL ? s->h : s->w;"
    },
    {
        "line": 11,
        "fullcodeline": "clear_combine_buffer(s, z);"
    },
    {
        "line": 13,
        "fullcodeline": "ff_filter_execute(ctx, s->plot_channel, NULL, NULL, s->nb_display_channels);"
    },
    {
        "line": 21,
        "fullcodeline": "av_frame_make_writable(s->outpicref);"
    },
    {
        "line": 15,
        "fullcodeline": "for (y = 0; y < z * 3; y++) {"
    },
    {
        "line": 23,
        "fullcodeline": "if (s->orientation == VERTICAL) {"
    },
    {
        "line": 82,
        "fullcodeline": "if (s->sliding != FULLFRAME || s->xpos == 0)"
    },
    {
        "line": 85,
        "fullcodeline": "if (s->sliding == LREPLACE) {"
    },
    {
        "line": 99,
        "fullcodeline": "if (!s->single_pic && (s->sliding != FULLFRAME || s->xpos == 0)) {"
    },
    {
        "line": 83,
        "fullcodeline": "s->pts = outpicref->pts = av_rescale_q(insamples->pts, inlink->time_base, outlink->time_base);"
    },
    {
        "line": 86,
        "fullcodeline": "s->xpos--;"
    },
    {
        "line": 16,
        "fullcodeline": "for (x = 0; x < s->nb_display_channels; x++) {"
    },
    {
        "line": 24,
        "fullcodeline": "if (s->sliding == SCROLL) {"
    },
    {
        "line": 43,
        "fullcodeline": "for (plane = 0; plane < 3; plane++) {"
    },
    {
        "line": 87,
        "fullcodeline": "if (s->orientation == VERTICAL && s->xpos < 0)"
    },
    {
        "line": 89,
        "fullcodeline": "if (s->orientation == HORIZONTAL && s->xpos < 0)"
    },
    {
        "line": 92,
        "fullcodeline": "s->xpos++;"
    },
    {
        "line": 100,
        "fullcodeline": "if (s->old_pts < outpicref->pts) {"
    },
    {
        "line": 17,
        "fullcodeline": "s->combine_buffer[y] += s->color_buffer[x][y];"
    },
    {
        "line": 32,
        "fullcodeline": "s->xpos = s->w - 1;"
    },
    {
        "line": 44,
        "fullcodeline": "uint8_t *p = outpicref->data[plane] + s->start_x +"
    },
    {
        "line": 53,
        "fullcodeline": "if (s->sliding == SCROLL) {"
    },
    {
        "line": 72,
        "fullcodeline": "for (plane = 0; plane < 3; plane++) {"
    },
    {
        "line": 88,
        "fullcodeline": "s->xpos = s->w - 1;"
    },
    {
        "line": 90,
        "fullcodeline": "s->xpos = s->h - 1;"
    },
    {
        "line": 93,
        "fullcodeline": "if (s->orientation == VERTICAL && s->xpos >= s->w)"
    },
    {
        "line": 95,
        "fullcodeline": "if (s->orientation == HORIZONTAL && s->xpos >= s->h)"
    },
    {
        "line": 131,
        "fullcodeline": "clone = av_frame_clone(s->outpicref);"
    },
    {
        "line": 134,
        "fullcodeline": "ret = ff_filter_frame(outlink, clone);"
    },
    {
        "line": 25,
        "fullcodeline": "for (plane = 0; plane < 3; plane++) {"
    },
    {
        "line": 47,
        "fullcodeline": "for (y = 0; y < s->h; y++) {"
    },
    {
        "line": 61,
        "fullcodeline": "s->xpos = s->h - 1;"
    },
    {
        "line": 73,
        "fullcodeline": "uint8_t *p = outpicref->data[plane] + s->start_x +"
    },
    {
        "line": 94,
        "fullcodeline": "s->xpos = 0;"
    },
    {
        "line": 96,
        "fullcodeline": "s->xpos = 0;"
    },
    {
        "line": 132,
        "fullcodeline": "if (!clone)"
    },
    {
        "line": 135,
        "fullcodeline": "if (ret < 0)"
    },
    {
        "line": 33,
        "fullcodeline": "} else if (s->sliding == RSCROLL) {"
    },
    {
        "line": 48,
        "fullcodeline": "*p = lrintf(av_clipf(s->combine_buffer[3 * y + plane], 0, 255));"
    },
    {
        "line": 49,
        "fullcodeline": "p -= outpicref->linesize[plane];"
    },
    {
        "line": 54,
        "fullcodeline": "for (plane = 0; plane < 3; plane++) {"
    },
    {
        "line": 75,
        "fullcodeline": "for (x = 0; x < s->w; x++) {"
    },
    {
        "line": 104,
        "fullcodeline": "char *units = get_time(ctx, insamples->pts /(float)inlink->sample_rate, x);"
    },
    {
        "line": 26,
        "fullcodeline": "for (y = 0; y < s->h; y++) {"
    },
    {
        "line": 41,
        "fullcodeline": "s->xpos = 0;"
    },
    {
        "line": 45,
        "fullcodeline": "(outlink->h - 1 - s->start_y) * outpicref->linesize[plane] +"
    },
    {
        "line": 62,
        "fullcodeline": "} else if (s->sliding == RSCROLL) {"
    },
    {
        "line": 74,
        "fullcodeline": "(s->xpos + s->start_y) * outpicref->linesize[plane];"
    },
    {
        "line": 76,
        "fullcodeline": "*p = lrintf(av_clipf(s->combine_buffer[3 * x + plane], 0, 255));"
    },
    {
        "line": 77,
        "fullcodeline": "p++;"
    },
    {
        "line": 105,
        "fullcodeline": "if (!units)"
    },
    {
        "line": 127,
        "fullcodeline": "s->old_len = strlen(units);"
    },
    {
        "line": 133,
        "fullcodeline": "return AVERROR(ENOMEM);"
    },
    {
        "line": 27,
        "fullcodeline": "uint8_t *p = outpicref->data[plane] + s->start_x +"
    },
    {
        "line": 29,
        "fullcodeline": "memmove(p, p + 1, s->w - 1);"
    },
    {
        "line": 34,
        "fullcodeline": "for (plane = 0; plane < 3; plane++) {"
    },
    {
        "line": 55,
        "fullcodeline": "for (y = 1; y < s->h; y++) {"
    },
    {
        "line": 70,
        "fullcodeline": "s->xpos = 0;"
    },
    {
        "line": 113,
        "fullcodeline": "drawtext(s->outpicref,"
    },
    {
        "line": 56,
        "fullcodeline": "memmove(outpicref->data[plane] + (y-1 + s->start_y) * outpicref->linesize[plane] + s->start_x,"
    },
    {
        "line": 63,
        "fullcodeline": "for (plane = 0; plane < 3; plane++) {"
    },
    {
        "line": 106,
        "fullcodeline": "return AVERROR(ENOMEM);"
    },
    {
        "line": 109,
        "fullcodeline": "for (y = 0; y < 10; y++) {"
    },
    {
        "line": 114,
        "fullcodeline": "outlink->w / 2 - 4 * strlen(units),"
    },
    {
        "line": 115,
        "fullcodeline": "outlink->h - s->start_y / 2 - 20,"
    },
    {
        "line": 122,
        "fullcodeline": "drawtext(s->outpicref,"
    },
    {
        "line": 28,
        "fullcodeline": "(y + s->start_y) * outpicref->linesize[plane];"
    },
    {
        "line": 35,
        "fullcodeline": "for (y = 0; y < s->h; y++) {"
    },
    {
        "line": 57,
        "fullcodeline": "outpicref->data[plane] + (y   + s->start_y) * outpicref->linesize[plane] + s->start_x,"
    },
    {
        "line": 118,
        "fullcodeline": "for (y = 0; y < 10 * s->old_len; y++) {"
    },
    {
        "line": 124,
        "fullcodeline": "outlink->h / 2 - 4 * strlen(units),"
    },
    {
        "line": 36,
        "fullcodeline": "uint8_t *p = outpicref->data[plane] + s->start_x +"
    },
    {
        "line": 38,
        "fullcodeline": "memmove(p + 1, p, s->w - 1);"
    },
    {
        "line": 64,
        "fullcodeline": "for (y = s->h - 1; y >= 1; y--) {"
    },
    {
        "line": 111,
        "fullcodeline": "(outlink->h - s->start_y / 2 - 20 + y) * s->outpicref->linesize[0], 0, 10 * s->old_len);"
    },
    {
        "line": 123,
        "fullcodeline": "s->start_x / 7 + 20,"
    },
    {
        "line": 65,
        "fullcodeline": "memmove(outpicref->data[plane] + (y   + s->start_y) * outpicref->linesize[plane] + s->start_x,"
    },
    {
        "line": 110,
        "fullcodeline": "memset(s->outpicref->data[0] + outlink->w / 2 - 4 * s->old_len +"
    },
    {
        "line": 37,
        "fullcodeline": "(y + s->start_y) * outpicref->linesize[plane];"
    },
    {
        "line": 66,
        "fullcodeline": "outpicref->data[plane] + (y-1 + s->start_y) * outpicref->linesize[plane] + s->start_x,"
    },
    {
        "line": 120,
        "fullcodeline": "(outlink->h / 2 - 4 * s->old_len + y) * s->outpicref->linesize[0], 0, 10);"
    },
    {
        "line": 119,
        "fullcodeline": "memset(s->outpicref->data[0] + s->start_x / 7 + 20 +"
    }
]