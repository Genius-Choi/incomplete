[
    {
        "line": 3,
        "fullcodeline": "AVFilterContext *ctx = outlink->src;"
    },
    {
        "line": 4,
        "fullcodeline": "AVFilterLink *inlink = ctx->inputs[0];"
    },
    {
        "line": 5,
        "fullcodeline": "ShowSpectrumContext *s = ctx->priv;"
    },
    {
        "line": 9,
        "fullcodeline": "s->dmax = expf(s->limit * M_LN10 / 20.f);"
    },
    {
        "line": 10,
        "fullcodeline": "s->dmin = expf((s->limit - s->drange) * M_LN10 / 20.f);"
    },
    {
        "line": 18,
        "fullcodeline": "s->stop = FFMIN(s->stop, inlink->sample_rate / 2);"
    },
    {
        "line": 27,
        "fullcodeline": "outlink->w = s->w;"
    },
    {
        "line": 28,
        "fullcodeline": "outlink->h = s->h;"
    },
    {
        "line": 29,
        "fullcodeline": "outlink->sample_aspect_ratio = (AVRational){1,1};"
    },
    {
        "line": 38,
        "fullcodeline": "h = (s->mode == COMBINED || s->orientation == HORIZONTAL) ? s->h : s->h / inlink->channels;"
    },
    {
        "line": 39,
        "fullcodeline": "w = (s->mode == COMBINED || s->orientation == VERTICAL)   ? s->w : s->w / inlink->channels;"
    },
    {
        "line": 51,
        "fullcodeline": "s->win_size = fft_size;"
    },
    {
        "line": 52,
        "fullcodeline": "s->buf_size = FFALIGN(s->win_size << (!!s->stop), av_cpu_max_align());"
    },
    {
        "line": 208,
        "fullcodeline": "s->auto_frame_rate = av_make_q(inlink->sample_rate, s->hop_size);"
    },
    {
        "line": 220,
        "fullcodeline": "outlink->frame_rate = s->frame_rate;"
    },
    {
        "line": 233,
        "fullcodeline": "av_log(ctx, AV_LOG_VERBOSE, \"s:%dx%d FFT window size:%d\\n\","
    },
    {
        "line": 237,
        "fullcodeline": "s->fifo = av_audio_fifo_alloc(inlink->format, inlink->channels, s->win_size);"
    },
    {
        "line": 43,
        "fullcodeline": "if (s->orientation == VERTICAL) {"
    },
    {
        "line": 54,
        "fullcodeline": "if (!s->fft) {"
    },
    {
        "line": 69,
        "fullcodeline": "if (fft_size != s->fft_size) {"
    },
    {
        "line": 201,
        "fullcodeline": "if (s->sliding == LREPLACE) {"
    },
    {
        "line": 209,
        "fullcodeline": "if (s->orientation == VERTICAL && s->sliding == FULLFRAME)"
    },
    {
        "line": 221,
        "fullcodeline": "outlink->time_base = av_inv_q(outlink->frame_rate);"
    },
    {
        "line": 13,
        "fullcodeline": "case F_LINEAR: s->plot_channel = plot_channel_lin; break;"
    },
    {
        "line": 14,
        "fullcodeline": "case F_LOG:    s->plot_channel = plot_channel_log; break;"
    },
    {
        "line": 19,
        "fullcodeline": "if ((s->stop || s->start) && s->stop <= s->start) {"
    },
    {
        "line": 24,
        "fullcodeline": "if (!strcmp(ctx->filter->name, \"showspectrumpic\"))"
    },
    {
        "line": 25,
        "fullcodeline": "s->single_pic = 1;"
    },
    {
        "line": 32,
        "fullcodeline": "s->start_x = (log10(inlink->sample_rate) + 1) * 25;"
    },
    {
        "line": 33,
        "fullcodeline": "s->start_y = 64;"
    },
    {
        "line": 34,
        "fullcodeline": "outlink->w += s->start_x * 2;"
    },
    {
        "line": 35,
        "fullcodeline": "outlink->h += s->start_y * 2;"
    },
    {
        "line": 45,
        "fullcodeline": "fft_size = h * 2;"
    },
    {
        "line": 55,
        "fullcodeline": "s->fft = av_calloc(inlink->channels, sizeof(*s->fft));"
    },
    {
        "line": 86,
        "fullcodeline": "av_freep(&s->fft_data);"
    },
    {
        "line": 88,
        "fullcodeline": "s->nb_display_channels = inlink->channels;"
    },
    {
        "line": 108,
        "fullcodeline": "s->magnitudes = av_calloc(s->nb_display_channels, sizeof(*s->magnitudes));"
    },
    {
        "line": 117,
        "fullcodeline": "s->phases = av_calloc(s->nb_display_channels, sizeof(*s->phases));"
    },
    {
        "line": 126,
        "fullcodeline": "av_freep(&s->color_buffer);"
    },
    {
        "line": 127,
        "fullcodeline": "s->color_buffer = av_calloc(s->nb_display_channels, sizeof(*s->color_buffer));"
    },
    {
        "line": 136,
        "fullcodeline": "s->fft_in = av_calloc(s->nb_display_channels, sizeof(*s->fft_in));"
    },
    {
        "line": 139,
        "fullcodeline": "s->fft_data = av_calloc(s->nb_display_channels, sizeof(*s->fft_data));"
    },
    {
        "line": 142,
        "fullcodeline": "s->fft_scratch = av_calloc(s->nb_display_channels, sizeof(*s->fft_scratch));"
    },
    {
        "line": 160,
        "fullcodeline": "s->window_func_lut ="
    },
    {
        "line": 165,
        "fullcodeline": "generate_window_func(s->window_func_lut, s->win_size, s->win_func, &overlap);"
    },
    {
        "line": 168,
        "fullcodeline": "s->hop_size = (1.f - s->overlap) * s->win_size;"
    },
    {
        "line": 191,
        "fullcodeline": "outpicref->color_range = AVCOL_RANGE_JPEG;"
    },
    {
        "line": 197,
        "fullcodeline": "if ((s->orientation == VERTICAL   && s->xpos >= s->w) ||"
    },
    {
        "line": 198,
        "fullcodeline": "(s->orientation == HORIZONTAL && s->xpos >= s->h))"
    },
    {
        "line": 210,
        "fullcodeline": "s->auto_frame_rate = av_mul_q(s->auto_frame_rate, av_make_q(1, s->w));"
    },
    {
        "line": 211,
        "fullcodeline": "if (s->orientation == HORIZONTAL && s->sliding == FULLFRAME)"
    },
    {
        "line": 212,
        "fullcodeline": "s->auto_frame_rate = av_mul_q(s->auto_frame_rate, av_make_q(1, s->h));"
    },
    {
        "line": 213,
        "fullcodeline": "if (!s->single_pic && strcmp(s->rate_str, \"auto\")) {"
    },
    {
        "line": 214,
        "fullcodeline": "int ret = av_parse_video_rate(&s->frame_rate, s->rate_str);"
    },
    {
        "line": 21,
        "fullcodeline": "return AVERROR(EINVAL);"
    },
    {
        "line": 48,
        "fullcodeline": "fft_size = w * 2;"
    },
    {
        "line": 56,
        "fullcodeline": "if (!s->fft)"
    },
    {
        "line": 61,
        "fullcodeline": "if (!s->ifft) {"
    },
    {
        "line": 77,
        "fullcodeline": "for (i = 0; i < s->nb_display_channels; i++) {"
    },
    {
        "line": 89,
        "fullcodeline": "for (i = 0; i < s->nb_display_channels; i++) {"
    },
    {
        "line": 111,
        "fullcodeline": "for (i = 0; i < s->nb_display_channels; i++) {"
    },
    {
        "line": 120,
        "fullcodeline": "for (i = 0; i < s->nb_display_channels; i++) {"
    },
    {
        "line": 130,
        "fullcodeline": "for (i = 0; i < s->nb_display_channels; i++) {"
    },
    {
        "line": 145,
        "fullcodeline": "for (i = 0; i < s->nb_display_channels; i++) {"
    },
    {
        "line": 161,
        "fullcodeline": "av_realloc_f(s->window_func_lut, s->win_size,"
    },
    {
        "line": 163,
        "fullcodeline": "if (!s->window_func_lut)"
    },
    {
        "line": 166,
        "fullcodeline": "if (s->overlap == 1)"
    },
    {
        "line": 169,
        "fullcodeline": "if (s->hop_size < 1) {"
    },
    {
        "line": 174,
        "fullcodeline": "for (s->win_scale = 0, i = 0; i < s->win_size; i++) {"
    },
    {
        "line": 177,
        "fullcodeline": "s->win_scale = 1.f / sqrtf(s->win_scale);"
    },
    {
        "line": 181,
        "fullcodeline": "s->outpicref = outpicref ="
    },
    {
        "line": 186,
        "fullcodeline": "for (i = 0; i < outlink->h; i++) {"
    },
    {
        "line": 202,
        "fullcodeline": "if (s->orientation == VERTICAL)"
    },
    {
        "line": 204,
        "fullcodeline": "if (s->orientation == HORIZONTAL)"
    },
    {
        "line": 215,
        "fullcodeline": "if (ret < 0)"
    },
    {
        "line": 218,
        "fullcodeline": "s->frame_rate = s->auto_frame_rate;"
    },
    {
        "line": 225,
        "fullcodeline": "av_realloc_f(s->combine_buffer, s->h * 3,"
    },
    {
        "line": 239,
        "fullcodeline": "return AVERROR(ENOMEM);"
    },
    {
        "line": 62,
        "fullcodeline": "s->ifft = av_calloc(inlink->channels, sizeof(*s->ifft));"
    },
    {
        "line": 82,
        "fullcodeline": "av_tx_uninit(&s->fft[i]);"
    },
    {
        "line": 83,
        "fullcodeline": "av_freep(&s->fft_in[i]);"
    },
    {
        "line": 84,
        "fullcodeline": "av_freep(&s->fft_data[i]);"
    },
    {
        "line": 92,
        "fullcodeline": "ret = av_tx_init(&s->fft[i], &s->tx_fn, AV_TX_FLOAT_FFT, 0, fft_size << (!!s->stop), &scale, 0);"
    },
    {
        "line": 112,
        "fullcodeline": "s->magnitudes[i] = av_calloc(s->orientation == VERTICAL ? s->h : s->w, sizeof(**s->magnitudes));"
    },
    {
        "line": 121,
        "fullcodeline": "s->phases[i] = av_calloc(s->orientation == VERTICAL ? s->h : s->w, sizeof(**s->phases));"
    },
    {
        "line": 131,
        "fullcodeline": "s->color_buffer[i] = av_calloc(s->orientation == VERTICAL ? s->h * 3 : s->w * 3, sizeof(**s->color_buffer));"
    },
    {
        "line": 146,
        "fullcodeline": "s->fft_in[i] = av_calloc(s->buf_size, sizeof(**s->fft_in));"
    },
    {
        "line": 150,
        "fullcodeline": "s->fft_data[i] = av_calloc(s->buf_size, sizeof(**s->fft_data));"
    },
    {
        "line": 154,
        "fullcodeline": "s->fft_scratch[i] = av_calloc(s->buf_size, sizeof(**s->fft_scratch));"
    },
    {
        "line": 167,
        "fullcodeline": "s->overlap = overlap;"
    },
    {
        "line": 175,
        "fullcodeline": "s->win_scale += s->window_func_lut[i] * s->window_func_lut[i];"
    },
    {
        "line": 182,
        "fullcodeline": "ff_get_video_buffer(outlink, outlink->w, outlink->h);"
    },
    {
        "line": 185,
        "fullcodeline": "outpicref->sample_aspect_ratio = (AVRational){1,1};"
    },
    {
        "line": 187,
        "fullcodeline": "memset(outpicref->data[0] + i * outpicref->linesize[0],   0, outlink->w);"
    },
    {
        "line": 188,
        "fullcodeline": "memset(outpicref->data[1] + i * outpicref->linesize[1], 128, outlink->w);"
    },
    {
        "line": 189,
        "fullcodeline": "memset(outpicref->data[2] + i * outpicref->linesize[2], 128, outlink->w);"
    },
    {
        "line": 193,
        "fullcodeline": "if (!s->single_pic && s->legend)"
    },
    {
        "line": 194,
        "fullcodeline": "draw_legend(ctx, 0);"
    },
    {
        "line": 229,
        "fullcodeline": "av_realloc_f(s->combine_buffer, s->w * 3,"
    },
    {
        "line": 57,
        "fullcodeline": "return AVERROR(ENOMEM);"
    },
    {
        "line": 63,
        "fullcodeline": "if (!s->ifft)"
    },
    {
        "line": 101,
        "fullcodeline": "if (ret < 0) {"
    },
    {
        "line": 110,
        "fullcodeline": "return AVERROR(ENOMEM);"
    },
    {
        "line": 119,
        "fullcodeline": "return AVERROR(ENOMEM);"
    },
    {
        "line": 129,
        "fullcodeline": "return AVERROR(ENOMEM);"
    },
    {
        "line": 138,
        "fullcodeline": "return AVERROR(ENOMEM);"
    },
    {
        "line": 141,
        "fullcodeline": "return AVERROR(ENOMEM);"
    },
    {
        "line": 144,
        "fullcodeline": "return AVERROR(ENOMEM);"
    },
    {
        "line": 164,
        "fullcodeline": "return AVERROR(ENOMEM);"
    },
    {
        "line": 171,
        "fullcodeline": "return AVERROR(EINVAL);"
    },
    {
        "line": 184,
        "fullcodeline": "return AVERROR(ENOMEM);"
    },
    {
        "line": 203,
        "fullcodeline": "s->xpos = s->w - 1;"
    },
    {
        "line": 205,
        "fullcodeline": "s->xpos = s->h - 1;"
    },
    {
        "line": 79,
        "fullcodeline": "av_tx_uninit(&s->ifft[i]);"
    },
    {
        "line": 80,
        "fullcodeline": "av_freep(&s->fft_scratch[i]);"
    },
    {
        "line": 94,
        "fullcodeline": "ret = av_tx_init(&s->ifft[i], &s->itx_fn, AV_TX_FLOAT_FFT, 1, fft_size << (!!s->stop), &scale, 0);"
    },
    {
        "line": 64,
        "fullcodeline": "return AVERROR(ENOMEM);"
    },
    {
        "line": 95,
        "fullcodeline": "if (ret < 0) {"
    },
    {
        "line": 114,
        "fullcodeline": "return AVERROR(ENOMEM);"
    },
    {
        "line": 123,
        "fullcodeline": "return AVERROR(ENOMEM);"
    },
    {
        "line": 133,
        "fullcodeline": "return AVERROR(ENOMEM);"
    },
    {
        "line": 148,
        "fullcodeline": "return AVERROR(ENOMEM);"
    },
    {
        "line": 152,
        "fullcodeline": "return AVERROR(ENOMEM);"
    },
    {
        "line": 156,
        "fullcodeline": "return AVERROR(ENOMEM);"
    }
]