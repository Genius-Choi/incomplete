[
    {
        "line": 5,
        "fullcodeline": "ShowSpectrumContext *s = ctx->priv;"
    },
    {
        "line": 8,
        "fullcodeline": "FF_FILTER_FORWARD_STATUS_BACK(outlink, inlink);"
    },
    {
        "line": 87,
        "fullcodeline": "FF_FILTER_FORWARD_STATUS(inlink, outlink);"
    },
    {
        "line": 10,
        "fullcodeline": "if (av_audio_fifo_size(s->fifo) < s->win_size) {"
    },
    {
        "line": 25,
        "fullcodeline": "if (s->outpicref && (av_audio_fifo_size(s->fifo) >= s->win_size ||"
    },
    {
        "line": 61,
        "fullcodeline": "if (ff_outlink_get_status(inlink) == AVERROR_EOF &&"
    },
    {
        "line": 88,
        "fullcodeline": "if (av_audio_fifo_size(s->fifo) >= s->win_size ||"
    },
    {
        "line": 95,
        "fullcodeline": "if (ff_outlink_frame_wanted(outlink) && av_audio_fifo_size(s->fifo) < s->win_size &&"
    },
    {
        "line": 11,
        "fullcodeline": "AVFrame *frame = NULL;"
    },
    {
        "line": 13,
        "fullcodeline": "ret = ff_inlink_consume_frame(inlink, &frame);"
    },
    {
        "line": 27,
        "fullcodeline": "AVFrame *fin = ff_get_audio_buffer(inlink, s->win_size);"
    },
    {
        "line": 31,
        "fullcodeline": "fin->pts = s->pts + s->consumed;"
    },
    {
        "line": 32,
        "fullcodeline": "s->consumed += s->hop_size;"
    },
    {
        "line": 33,
        "fullcodeline": "ret = av_audio_fifo_peek(s->fifo, (void **)fin->extended_data,"
    },
    {
        "line": 40,
        "fullcodeline": "av_assert0(fin->nb_samples == s->win_size);"
    },
    {
        "line": 42,
        "fullcodeline": "ff_filter_execute(ctx, run_channel_fft, fin, NULL, s->nb_display_channels);"
    },
    {
        "line": 53,
        "fullcodeline": "ret = plot_spectrum_column(inlink, fin);"
    },
    {
        "line": 55,
        "fullcodeline": "av_frame_free(&fin);"
    },
    {
        "line": 56,
        "fullcodeline": "av_audio_fifo_drain(s->fifo, s->hop_size);"
    },
    {
        "line": 79,
        "fullcodeline": "s->outpicref->pts += av_rescale_q(s->consumed, inlink->time_base, outlink->time_base);"
    },
    {
        "line": 80,
        "fullcodeline": "pts = s->outpicref->pts;"
    },
    {
        "line": 81,
        "fullcodeline": "ret = ff_filter_frame(outlink, s->outpicref);"
    },
    {
        "line": 82,
        "fullcodeline": "s->outpicref = NULL;"
    },
    {
        "line": 83,
        "fullcodeline": "ff_outlink_set_status(outlink, AVERROR_EOF, pts);"
    },
    {
        "line": 90,
        "fullcodeline": "ff_outlink_get_status(inlink) == AVERROR_EOF) {"
    },
    {
        "line": 91,
        "fullcodeline": "ff_filter_set_ready(ctx, 10);"
    },
    {
        "line": 97,
        "fullcodeline": "ff_outlink_get_status(inlink) != AVERROR_EOF) {"
    },
    {
        "line": 98,
        "fullcodeline": "ff_inlink_request_frame(inlink);"
    },
    {
        "line": 14,
        "fullcodeline": "if (ret < 0)"
    },
    {
        "line": 16,
        "fullcodeline": "if (ret > 0) {"
    },
    {
        "line": 26,
        "fullcodeline": "ff_outlink_get_status(inlink))) {"
    },
    {
        "line": 28,
        "fullcodeline": "if (!fin)"
    },
    {
        "line": 35,
        "fullcodeline": "if (ret < 0) {"
    },
    {
        "line": 44,
        "fullcodeline": "if (s->data == D_MAGNITUDE)"
    },
    {
        "line": 47,
        "fullcodeline": "if (s->data == D_PHASE)"
    },
    {
        "line": 50,
        "fullcodeline": "if (s->data == D_UPHASE)"
    },
    {
        "line": 57,
        "fullcodeline": "if (ret <= 0 && !ff_outlink_get_status(inlink))"
    },
    {
        "line": 63,
        "fullcodeline": "s->xpos > 0 && s->outpicref) {"
    },
    {
        "line": 66,
        "fullcodeline": "if (s->orientation == VERTICAL) {"
    },
    {
        "line": 89,
        "fullcodeline": "ff_inlink_queued_frames(inlink) > 0 ||"
    },
    {
        "line": 96,
        "fullcodeline": "ff_inlink_queued_frames(inlink) == 0 &&"
    },
    {
        "line": 17,
        "fullcodeline": "s->pts = frame->pts;"
    },
    {
        "line": 18,
        "fullcodeline": "s->consumed = 0;"
    },
    {
        "line": 20,
        "fullcodeline": "av_audio_fifo_write(s->fifo, (void **)frame->extended_data, frame->nb_samples);"
    },
    {
        "line": 21,
        "fullcodeline": "av_frame_free(&frame);"
    },
    {
        "line": 34,
        "fullcodeline": "FFMIN(s->win_size, av_audio_fifo_size(s->fifo)));"
    },
    {
        "line": 36,
        "fullcodeline": "av_frame_free(&fin);"
    },
    {
        "line": 45,
        "fullcodeline": "ff_filter_execute(ctx, calc_channel_magnitudes, NULL, NULL, s->nb_display_channels);"
    },
    {
        "line": 48,
        "fullcodeline": "ff_filter_execute(ctx, calc_channel_phases, NULL, NULL, s->nb_display_channels);"
    },
    {
        "line": 51,
        "fullcodeline": "ff_filter_execute(ctx, calc_channel_uphases, NULL, NULL, s->nb_display_channels);"
    },
    {
        "line": 62,
        "fullcodeline": "s->sliding == FULLFRAME &&"
    },
    {
        "line": 29,
        "fullcodeline": "return AVERROR(ENOMEM);"
    },
    {
        "line": 67,
        "fullcodeline": "for (int i = 0; i < outlink->h; i++) {"
    },
    {
        "line": 68,
        "fullcodeline": "memset(s->outpicref->data[0] + i * s->outpicref->linesize[0] + s->xpos,   0, outlink->w - s->xpos);"
    },
    {
        "line": 69,
        "fullcodeline": "memset(s->outpicref->data[1] + i * s->outpicref->linesize[1] + s->xpos, 128, outlink->w - s->xpos);"
    },
    {
        "line": 70,
        "fullcodeline": "memset(s->outpicref->data[2] + i * s->outpicref->linesize[2] + s->xpos, 128, outlink->w - s->xpos);"
    },
    {
        "line": 73,
        "fullcodeline": "for (int i = s->xpos; i < outlink->h; i++) {"
    },
    {
        "line": 74,
        "fullcodeline": "memset(s->outpicref->data[0] + i * s->outpicref->linesize[0],   0, outlink->w);"
    },
    {
        "line": 75,
        "fullcodeline": "memset(s->outpicref->data[1] + i * s->outpicref->linesize[1], 128, outlink->w);"
    },
    {
        "line": 76,
        "fullcodeline": "memset(s->outpicref->data[2] + i * s->outpicref->linesize[2], 128, outlink->w);"
    }
]