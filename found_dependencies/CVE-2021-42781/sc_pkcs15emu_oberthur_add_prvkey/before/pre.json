[
    {
        "line": 4,
        "fullcodeline": "struct sc_context *ctx = p15card->card->ctx;"
    },
    {
        "line": 8,
        "fullcodeline": "unsigned char *info_blob = NULL;"
    },
    {
        "line": 9,
        "fullcodeline": "size_t info_len = 0;"
    },
    {
        "line": 12,
        "fullcodeline": "char ch_tmp[0x100];"
    },
    {
        "line": 15,
        "fullcodeline": "LOG_FUNC_CALLED(ctx);"
    },
    {
        "line": 16,
        "fullcodeline": "sc_log(ctx, \"add private key(file-id:%04X,size:%04X)\", file_id, size);"
    },
    {
        "line": 18,
        "fullcodeline": "memset(&kinfo, 0, sizeof(kinfo));"
    },
    {
        "line": 19,
        "fullcodeline": "memset(&kobj, 0, sizeof(kobj));"
    },
    {
        "line": 20,
        "fullcodeline": "memset(&ccont, 0, sizeof(ccont));"
    },
    {
        "line": 22,
        "fullcodeline": "rv = sc_oberthur_get_friends (file_id, &ccont);"
    },
    {
        "line": 23,
        "fullcodeline": "LOG_TEST_RET(ctx, rv, \"Failed to add private key: get friends error\");"
    },
    {
        "line": 48,
        "fullcodeline": "snprintf(ch_tmp, sizeof(ch_tmp), \"%s%04X\", AWP_OBJECTS_DF_PRV, file_id | 0x100);"
    },
    {
        "line": 49,
        "fullcodeline": "rv = sc_oberthur_read_file(p15card, ch_tmp, &info_blob, &info_len, 1);"
    },
    {
        "line": 50,
        "fullcodeline": "LOG_TEST_RET(ctx, rv, \"Failed to add private key: read oberthur file error\");"
    },
    {
        "line": 54,
        "fullcodeline": "flags = *(info_blob + 0) * 0x100 + *(info_blob + 1);"
    },
    {
        "line": 55,
        "fullcodeline": "offs = 2;"
    },
    {
        "line": 60,
        "fullcodeline": "len = *(info_blob + offs + 1) + *(info_blob + offs) * 0x100;"
    },
    {
        "line": 66,
        "fullcodeline": "offs += 2 + len;"
    },
    {
        "line": 71,
        "fullcodeline": "len = *(info_blob + offs + 1) + *(info_blob + offs) * 0x100;"
    },
    {
        "line": 76,
        "fullcodeline": "memcpy(kinfo.id.value, info_blob + offs + 2, len);"
    },
    {
        "line": 77,
        "fullcodeline": "kinfo.id.len = len;"
    },
    {
        "line": 78,
        "fullcodeline": "offs += 2 + len;"
    },
    {
        "line": 81,
        "fullcodeline": "offs += 16;"
    },
    {
        "line": 86,
        "fullcodeline": "len = *(info_blob + offs + 1) + *(info_blob + offs) * 0x100;"
    },
    {
        "line": 97,
        "fullcodeline": "snprintf(ch_tmp, sizeof(ch_tmp), \"%s%04X\", AWP_OBJECTS_DF_PRV, file_id);"
    },
    {
        "line": 98,
        "fullcodeline": "sc_format_path(ch_tmp, &kinfo.path);"
    },
    {
        "line": 99,
        "fullcodeline": "sc_log(ctx, \"Private key info path %s\", ch_tmp);"
    },
    {
        "line": 101,
        "fullcodeline": "kinfo.modulus_length\t= size;"
    },
    {
        "line": 102,
        "fullcodeline": "kinfo.native\t\t= 1;"
    },
    {
        "line": 103,
        "fullcodeline": "kinfo.key_reference\t = file_id & 0xFF;"
    },
    {
        "line": 105,
        "fullcodeline": "kinfo.usage = sc_oberthur_decode_usage(flags);"
    },
    {
        "line": 106,
        "fullcodeline": "kobj.flags = SC_PKCS15_CO_FLAG_PRIVATE;"
    },
    {
        "line": 110,
        "fullcodeline": "kobj.auth_id.len = sizeof(PinDomainID) > sizeof(kobj.auth_id.value)"
    },
    {
        "line": 114,
        "fullcodeline": "sc_log(ctx, \"Parsed private key(reference:%i,usage:%X,flags:%X)\", kinfo.key_reference, kinfo.usage, kobj.flags);"
    },
    {
        "line": 116,
        "fullcodeline": "rv = sc_pkcs15emu_add_rsa_prkey(p15card, &kobj, &kinfo);"
    },
    {
        "line": 52,
        "fullcodeline": "if (info_len < 2)"
    },
    {
        "line": 58,
        "fullcodeline": "if (offs > info_len)"
    },
    {
        "line": 61,
        "fullcodeline": "if (len && !strlen(kobj.label))   {"
    },
    {
        "line": 69,
        "fullcodeline": "if (offs > info_len)"
    },
    {
        "line": 72,
        "fullcodeline": "if (!len)"
    },
    {
        "line": 84,
        "fullcodeline": "if (offs > info_len)"
    },
    {
        "line": 107,
        "fullcodeline": "if (flags & OBERTHUR_ATTR_MODIFIABLE)"
    },
    {
        "line": 26,
        "fullcodeline": "struct sc_pkcs15_object *objs[32];"
    },
    {
        "line": 29,
        "fullcodeline": "sc_log(ctx, \"friend certificate %04X\", ccont.id_cert);"
    },
    {
        "line": 30,
        "fullcodeline": "rv = sc_pkcs15_get_objects(p15card, SC_PKCS15_TYPE_CERT_X509, objs, 32);"
    },
    {
        "line": 31,
        "fullcodeline": "LOG_TEST_RET(ctx, rv, \"Failed to add private key: get certificates error\");"
    },
    {
        "line": 53,
        "fullcodeline": "LOG_TEST_RET(ctx, SC_ERROR_UNKNOWN_DATA_RECEIVED, \"Failed to add private key: no 'tag'\");"
    },
    {
        "line": 59,
        "fullcodeline": "LOG_TEST_RET(ctx, SC_ERROR_UNKNOWN_DATA_RECEIVED, \"Failed to add private key: no 'CN'\");"
    },
    {
        "line": 64,
        "fullcodeline": "strncpy(kobj.label, (char *)(info_blob + offs + 2), len);"
    },
    {
        "line": 70,
        "fullcodeline": "LOG_TEST_RET(ctx, SC_ERROR_UNKNOWN_DATA_RECEIVED, \"Failed to add private key: no 'ID'\");"
    },
    {
        "line": 73,
        "fullcodeline": "LOG_TEST_RET(ctx, SC_ERROR_UNKNOWN_DATA_RECEIVED, \"Failed to add private key: zero length ID\");"
    },
    {
        "line": 88,
        "fullcodeline": "kinfo.subject.value = malloc(len);"
    },
    {
        "line": 108,
        "fullcodeline": "kobj.flags |= SC_PKCS15_CO_FLAG_MODIFIABLE;"
    },
    {
        "line": 33,
        "fullcodeline": "for (ii=0; ii<rv; ii++) {"
    },
    {
        "line": 44,
        "fullcodeline": "if (ii == rv)"
    },
    {
        "line": 62,
        "fullcodeline": "if (len > sizeof(kobj.label) - 1)"
    },
    {
        "line": 89,
        "fullcodeline": "if (!kinfo.subject.value)"
    },
    {
        "line": 34,
        "fullcodeline": "struct sc_pkcs15_cert_info *cert = (struct sc_pkcs15_cert_info *)objs[ii]->data;"
    },
    {
        "line": 35,
        "fullcodeline": "struct sc_path path = cert->path;"
    },
    {
        "line": 36,
        "fullcodeline": "unsigned int id = path.value[path.len - 2] * 0x100 + path.value[path.len - 1];"
    },
    {
        "line": 45,
        "fullcodeline": "LOG_TEST_RET(ctx, SC_ERROR_INCONSISTENT_PROFILE, \"Failed to add private key: friend not found\");"
    },
    {
        "line": 63,
        "fullcodeline": "len = sizeof(kobj.label) - 1;"
    },
    {
        "line": 74,
        "fullcodeline": "else if (len > sizeof(kinfo.id.value))"
    },
    {
        "line": 90,
        "fullcodeline": "LOG_TEST_RET(ctx, SC_ERROR_OUT_OF_MEMORY, \"Failed to add private key: memory allocation error\");"
    },
    {
        "line": 38,
        "fullcodeline": "if (id == ccont.id_cert)   {"
    },
    {
        "line": 75,
        "fullcodeline": "LOG_TEST_RET(ctx, SC_ERROR_INVALID_DATA, \"Failed to add private key: invalid ID length\");"
    },
    {
        "line": 39,
        "fullcodeline": "strlcpy(kobj.label, objs[ii]->label, sizeof(kobj.label));"
    }
]