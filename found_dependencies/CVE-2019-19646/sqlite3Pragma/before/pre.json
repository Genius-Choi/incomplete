[
    {
        "line": 8,
        "fullcodeline": "char *zLeft = 0;       /* Nul-terminated UTF-8 string <id> */"
    },
    {
        "line": 9,
        "fullcodeline": "char *zRight = 0;      /* Nul-terminated UTF-8 string <value>, or NULL */"
    },
    {
        "line": 10,
        "fullcodeline": "const char *zDb = 0;   /* The database name */"
    },
    {
        "line": 12,
        "fullcodeline": "char *aFcntl[4];       /* Argument to SQLITE_FCNTL_PRAGMA */"
    },
    {
        "line": 15,
        "fullcodeline": "sqlite3 *db = pParse->db;    /* The database connection */"
    },
    {
        "line": 17,
        "fullcodeline": "Vdbe *v = sqlite3GetVdbe(pParse);  /* Prepared statement */"
    },
    {
        "line": 21,
        "fullcodeline": "sqlite3VdbeRunOnlyOnce(v);"
    },
    {
        "line": 22,
        "fullcodeline": "pParse->nMem = 2;"
    },
    {
        "line": 26,
        "fullcodeline": "iDb = sqlite3TwoPartName(pParse, pId1, pId2, &pId);"
    },
    {
        "line": 28,
        "fullcodeline": "pDb = &db->aDb[iDb];"
    },
    {
        "line": 37,
        "fullcodeline": "zLeft = sqlite3NameFromToken(db, pId);"
    },
    {
        "line": 45,
        "fullcodeline": "assert( pId2 );"
    },
    {
        "line": 46,
        "fullcodeline": "zDb = pId2->n>0 ? pDb->zDbSName : 0;"
    },
    {
        "line": 66,
        "fullcodeline": "aFcntl[0] = 0;"
    },
    {
        "line": 67,
        "fullcodeline": "aFcntl[1] = zLeft;"
    },
    {
        "line": 68,
        "fullcodeline": "aFcntl[2] = zRight;"
    },
    {
        "line": 69,
        "fullcodeline": "aFcntl[3] = 0;"
    },
    {
        "line": 71,
        "fullcodeline": "rc = sqlite3_file_control(db, zDb, SQLITE_FCNTL_PRAGMA, (void*)aFcntl);"
    },
    {
        "line": 90,
        "fullcodeline": "pPragma = pragmaLocate(zLeft);"
    },
    {
        "line": 1901,
        "fullcodeline": "sqlite3DbFree(db, zLeft);"
    },
    {
        "line": 20,
        "fullcodeline": "if( v==0 ) return;"
    },
    {
        "line": 27,
        "fullcodeline": "if( iDb<0 ) return;"
    },
    {
        "line": 38,
        "fullcodeline": "if( !zLeft ) return;"
    },
    {
        "line": 47,
        "fullcodeline": "if( sqlite3AuthCheck(pParse, SQLITE_PRAGMA, zLeft, zRight, zDb) ){"
    },
    {
        "line": 72,
        "fullcodeline": "if( rc==SQLITE_OK ){"
    },
    {
        "line": 79,
        "fullcodeline": "if( rc!=SQLITE_NOTFOUND ){"
    },
    {
        "line": 91,
        "fullcodeline": "if( pPragma==0 ) goto pragma_out;"
    },
    {
        "line": 1896,
        "fullcodeline": "if( (pPragma->mPragFlg & PragFlg_NoColumns1) && zRight ){"
    },
    {
        "line": 33,
        "fullcodeline": "if( iDb==1 && sqlite3OpenTempDatabase(pParse) ){"
    },
    {
        "line": 40,
        "fullcodeline": "zRight = sqlite3MPrintf(db, \"-%T\", pValue);"
    },
    {
        "line": 73,
        "fullcodeline": "sqlite3VdbeSetNumCols(v, 1);"
    },
    {
        "line": 74,
        "fullcodeline": "sqlite3VdbeSetColName(v, 0, COLNAME_NAME, aFcntl[0], SQLITE_TRANSIENT);"
    },
    {
        "line": 75,
        "fullcodeline": "returnSingleText(v, aFcntl[0]);"
    },
    {
        "line": 94,
        "fullcodeline": "if( (pPragma->mPragFlg & PragFlg_NeedSchema)!=0 ){"
    },
    {
        "line": 99,
        "fullcodeline": "if( (pPragma->mPragFlg & PragFlg_NoColumns)==0"
    },
    {
        "line": 100,
        "fullcodeline": "&& ((pPragma->mPragFlg & PragFlg_NoColumns1)==0 || zRight==0)"
    },
    {
        "line": 102,
        "fullcodeline": "setPragmaResultColumnNames(v, pPragma);"
    },
    {
        "line": 42,
        "fullcodeline": "zRight = sqlite3NameFromToken(db, pValue);"
    },
    {
        "line": 95,
        "fullcodeline": "if( sqlite3ReadSchema(pParse) ) goto pragma_out;"
    },
    {
        "line": 126,
        "fullcodeline": "static const int iLn = VDBE_OFFSET_LINENO(2);"
    },
    {
        "line": 127,
        "fullcodeline": "static const VdbeOpList getCacheSize[] = {"
    },
    {
        "line": 139,
        "fullcodeline": "sqlite3VdbeUsesBtree(v, iDb);"
    },
    {
        "line": 171,
        "fullcodeline": "Btree *pBt = pDb->pBt;"
    },
    {
        "line": 197,
        "fullcodeline": "Btree *pBt = pDb->pBt;"
    },
    {
        "line": 198,
        "fullcodeline": "int b = -1;"
    },
    {
        "line": 213,
        "fullcodeline": "b = sqlite3BtreeSecureDelete(pBt, b);"
    },
    {
        "line": 214,
        "fullcodeline": "returnSingleInt(v, b);"
    },
    {
        "line": 237,
        "fullcodeline": "sqlite3CodeVerifySchema(pParse, iDb);"
    },
    {
        "line": 238,
        "fullcodeline": "iReg = ++pParse->nMem;"
    },
    {
        "line": 245,
        "fullcodeline": "sqlite3VdbeAddOp2(v, OP_ResultRow, iReg, 1);"
    },
    {
        "line": 254,
        "fullcodeline": "const char *zRet = \"normal\";"
    },
    {
        "line": 255,
        "fullcodeline": "int eMode = getLockingMode(zRight);"
    },
    {
        "line": 291,
        "fullcodeline": "returnSingleText(v, zRet);"
    },
    {
        "line": 336,
        "fullcodeline": "sqlite3VdbeAddOp2(v, OP_ResultRow, 1, 1);"
    },
    {
        "line": 347,
        "fullcodeline": "Pager *pPager = sqlite3BtreePager(pDb->pBt);"
    },
    {
        "line": 348,
        "fullcodeline": "i64 iLimit = -2;"
    },
    {
        "line": 353,
        "fullcodeline": "iLimit = sqlite3PagerJournalSizeLimit(pPager, iLimit);"
    },
    {
        "line": 354,
        "fullcodeline": "returnSingleInt(v, iLimit);"
    },
    {
        "line": 369,
        "fullcodeline": "Btree *pBt = pDb->pBt;"
    },
    {
        "line": 425,
        "fullcodeline": "sqlite3BeginWriteOperation(pParse, 0, iDb);"
    },
    {
        "line": 426,
        "fullcodeline": "sqlite3VdbeAddOp2(v, OP_Integer, iLimit, 1);"
    },
    {
        "line": 427,
        "fullcodeline": "addr = sqlite3VdbeAddOp1(v, OP_IncrVacuum, iDb); VdbeCoverage(v);"
    },
    {
        "line": 428,
        "fullcodeline": "sqlite3VdbeAddOp1(v, OP_ResultRow, 1);"
    },
    {
        "line": 429,
        "fullcodeline": "sqlite3VdbeAddOp2(v, OP_AddImm, 1, -1);"
    },
    {
        "line": 430,
        "fullcodeline": "sqlite3VdbeAddOp2(v, OP_IfPos, 1, addr); VdbeCoverage(v);"
    },
    {
        "line": 431,
        "fullcodeline": "sqlite3VdbeJumpHere(v, addr);"
    },
    {
        "line": 535,
        "fullcodeline": "sz = 0;"
    },
    {
        "line": 536,
        "fullcodeline": "rc = SQLITE_OK;"
    },
    {
        "line": 919,
        "fullcodeline": "int i = 0;"
    },
    {
        "line": 1023,
        "fullcodeline": "regResult = pParse->nMem+1;"
    },
    {
        "line": 1024,
        "fullcodeline": "pParse->nMem += 4;"
    },
    {
        "line": 1025,
        "fullcodeline": "regKey = ++pParse->nMem;"
    },
    {
        "line": 1026,
        "fullcodeline": "regRow = ++pParse->nMem;"
    },
    {
        "line": 1027,
        "fullcodeline": "k = sqliteHashFirst(&db->aDb[iDb].pSchema->tblHash);"
    },
    {
        "line": 1151,
        "fullcodeline": "int isQuick = (sqlite3Tolower(zLeft[0])=='q');"
    },
    {
        "line": 1167,
        "fullcodeline": "pParse->nMem = 6;"
    },
    {
        "line": 1170,
        "fullcodeline": "mxErr = SQLITE_INTEGRITY_CHECK_ERROR_MAX;"
    },
    {
        "line": 1177,
        "fullcodeline": "sqlite3VdbeAddOp2(v, OP_Integer, mxErr-1, 1); /* reg[1] holds errors left */"
    },
    {
        "line": 1424,
        "fullcodeline": "} encnames[] = {"
    },
    {
        "line": 1502,
        "fullcodeline": "int iCookie = pPragma->iArg;  /* Which cookie to read or write */"
    },
    {
        "line": 1503,
        "fullcodeline": "sqlite3VdbeUsesBtree(v, iDb);"
    },
    {
        "line": 1546,
        "fullcodeline": "int i = 0;"
    },
    {
        "line": 1553,
        "fullcodeline": "sqlite3VdbeReusable(v);"
    },
    {
        "line": 1565,
        "fullcodeline": "int iBt = (pId2->z?iDb:SQLITE_MAX_ATTACHED);"
    },
    {
        "line": 1566,
        "fullcodeline": "int eMode = SQLITE_CHECKPOINT_PASSIVE;"
    },
    {
        "line": 1577,
        "fullcodeline": "sqlite3VdbeAddOp3(v, OP_Checkpoint, iBt, eMode, 1);"
    },
    {
        "line": 1578,
        "fullcodeline": "sqlite3VdbeAddOp2(v, OP_ResultRow, 1, 3);"
    },
    {
        "line": 1594,
        "fullcodeline": "returnSingleInt(v,"
    },
    {
        "line": 1609,
        "fullcodeline": "sqlite3_db_release_memory(db);"
    },
    {
        "line": 1684,
        "fullcodeline": "iTabCur = pParse->nTab++;"
    },
    {
        "line": 1722,
        "fullcodeline": "sqlite3VdbeAddOp0(v, OP_Expire);"
    },
    {
        "line": 1740,
        "fullcodeline": "returnSingleInt(v, db->busyTimeout);"
    },
    {
        "line": 1760,
        "fullcodeline": "returnSingleInt(v, sqlite3_soft_heap_limit64(-1));"
    },
    {
        "line": 1781,
        "fullcodeline": "returnSingleInt(v, sqlite3_hard_heap_limit64(-1));"
    },
    {
        "line": 1800,
        "fullcodeline": "returnSingleInt(v, sqlite3_limit(db, SQLITE_LIMIT_WORKER_THREADS, -1));"
    },
    {
        "line": 81,
        "fullcodeline": "sqlite3ErrorMsg(pParse, \"%s\", aFcntl[0]);"
    },
    {
        "line": 140,
        "fullcodeline": "if( !zRight ){"
    },
    {
        "line": 172,
        "fullcodeline": "assert( pBt!=0 );"
    },
    {
        "line": 173,
        "fullcodeline": "if( !zRight ){"
    },
    {
        "line": 199,
        "fullcodeline": "assert( pBt!=0 );"
    },
    {
        "line": 286,
        "fullcodeline": "assert( eMode==PAGER_LOCKINGMODE_NORMAL"
    },
    {
        "line": 304,
        "fullcodeline": "if( zRight==0 ){"
    },
    {
        "line": 325,
        "fullcodeline": "if( eMode==PAGER_JOURNALMODE_QUERY && pId2->n==0 ){"
    },
    {
        "line": 330,
        "fullcodeline": "for(ii=db->nDb-1; ii>=0; ii--){"
    },
    {
        "line": 370,
        "fullcodeline": "assert( pBt!=0 );"
    },
    {
        "line": 371,
        "fullcodeline": "if( !zRight ){"
    },
    {
        "line": 449,
        "fullcodeline": "assert( sqlite3SchemaMutexHeld(db, iDb, 0) );"
    },
    {
        "line": 450,
        "fullcodeline": "if( !zRight ){"
    },
    {
        "line": 483,
        "fullcodeline": "assert( sqlite3SchemaMutexHeld(db, iDb, 0) );"
    },
    {
        "line": 484,
        "fullcodeline": "if( !zRight ){"
    },
    {
        "line": 538,
        "fullcodeline": "if( rc==SQLITE_OK ){"
    },
    {
        "line": 559,
        "fullcodeline": "if( !zRight ){"
    },
    {
        "line": 578,
        "fullcodeline": "if( !zRight ){"
    },
    {
        "line": 693,
        "fullcodeline": "if( !zRight ){"
    },
    {
        "line": 713,
        "fullcodeline": "if( zRight==0 ){"
    },
    {
        "line": 764,
        "fullcodeline": "pTab = sqlite3LocateTable(pParse, LOCATE_NOERR, zRight, zDb);"
    },
    {
        "line": 840,
        "fullcodeline": "pIdx = sqlite3FindIndex(db, zRight, zDb);"
    },
    {
        "line": 886,
        "fullcodeline": "pTab = sqlite3FindTable(db, zRight, zDb);"
    },
    {
        "line": 907,
        "fullcodeline": "for(i=0; i<db->nDb; i++){"
    },
    {
        "line": 922,
        "fullcodeline": "for(p=sqliteHashFirst(&db->aCollSeq); p; p=sqliteHashNext(p)){"
    },
    {
        "line": 935,
        "fullcodeline": "for(i=0; i<SQLITE_FUNC_HASH_SZ; i++){"
    },
    {
        "line": 941,
        "fullcodeline": "for(j=sqliteHashFirst(&db->aFunc); j; j=sqliteHashNext(j)){"
    },
    {
        "line": 952,
        "fullcodeline": "for(j=sqliteHashFirst(&db->aModule); j; j=sqliteHashNext(j)){"
    },
    {
        "line": 962,
        "fullcodeline": "for(i=0; i<ArraySize(aPragmaName); i++){"
    },
    {
        "line": 975,
        "fullcodeline": "pTab = sqlite3FindTable(db, zRight, zDb);"
    },
    {
        "line": 1162,
        "fullcodeline": "assert( iDb>=0 );"
    },
    {
        "line": 1163,
        "fullcodeline": "assert( iDb==0 || pId2->z );"
    },
    {
        "line": 1180,
        "fullcodeline": "for(i=0; i<db->nDb; i++){"
    },
    {
        "line": 1371,
        "fullcodeline": "static const int iLn = VDBE_OFFSET_LINENO(2);"
    },
    {
        "line": 1372,
        "fullcodeline": "static const VdbeOpList endCode[] = {"
    },
    {
        "line": 1391,
        "fullcodeline": "sqlite3VdbeChangeP3(v, 0, sqlite3VdbeCurrentAddr(v)-2);"
    },
    {
        "line": 1436,
        "fullcodeline": "if( !zRight ){    /* \"PRAGMA encoding\" */"
    },
    {
        "line": 1504,
        "fullcodeline": "if( zRight && (pPragma->mPragFlg & PragFlg_ReadOnly)==0 ){"
    },
    {
        "line": 1685,
        "fullcodeline": "for(iDbLast = zDb?iDb:db->nDb-1; iDb<=iDbLast; iDb++){"
    },
    {
        "line": 1736,
        "fullcodeline": "assert( pPragma->ePragTyp==PragTyp_BUSY_TIMEOUT );"
    },
    {
        "line": 1757,
        "fullcodeline": "if( zRight && sqlite3DecOrHexToI64(zRight, &N)==SQLITE_OK ){"
    },
    {
        "line": 1777,
        "fullcodeline": "if( zRight && sqlite3DecOrHexToI64(zRight, &N)==SQLITE_OK ){"
    },
    {
        "line": 128,
        "fullcodeline": "{ OP_Transaction, 0, 0,        0},                         /* 0 */"
    },
    {
        "line": 129,
        "fullcodeline": "{ OP_ReadCookie,  0, 1,        BTREE_DEFAULT_CACHE_SIZE},  /* 1 */"
    },
    {
        "line": 130,
        "fullcodeline": "{ OP_IfPos,       1, 8,        0},"
    },
    {
        "line": 131,
        "fullcodeline": "{ OP_Integer,     0, 2,        0},"
    },
    {
        "line": 132,
        "fullcodeline": "{ OP_Subtract,    1, 2,        1},"
    },
    {
        "line": 133,
        "fullcodeline": "{ OP_IfPos,       1, 8,        0},"
    },
    {
        "line": 134,
        "fullcodeline": "{ OP_Integer,     0, 1,        0},                         /* 6 */"
    },
    {
        "line": 135,
        "fullcodeline": "{ OP_Noop,        0, 0,        0},"
    },
    {
        "line": 136,
        "fullcodeline": "{ OP_ResultRow,   1, 1,        0},"
    },
    {
        "line": 142,
        "fullcodeline": "sqlite3VdbeVerifyNoMallocRequired(v, ArraySize(getCacheSize));"
    },
    {
        "line": 143,
        "fullcodeline": "aOp = sqlite3VdbeAddOpList(v, ArraySize(getCacheSize), getCacheSize, iLn);"
    },
    {
        "line": 147,
        "fullcodeline": "aOp[6].p1 = SQLITE_DEFAULT_CACHE_SIZE;"
    },
    {
        "line": 174,
        "fullcodeline": "int size = ALWAYS(pBt) ? sqlite3BtreeGetPageSize(pBt) : 0;"
    },
    {
        "line": 175,
        "fullcodeline": "returnSingleInt(v, size);"
    },
    {
        "line": 207,
        "fullcodeline": "if( pId2->n==0 && b>=0 ){"
    },
    {
        "line": 239,
        "fullcodeline": "if( sqlite3Tolower(zLeft[0])=='p' ){"
    },
    {
        "line": 240,
        "fullcodeline": "sqlite3VdbeAddOp2(v, OP_Pagecount, iDb, iReg);"
    },
    {
        "line": 257,
        "fullcodeline": "if( pId2->n==0 && eMode==PAGER_LOCKINGMODE_QUERY ){"
    },
    {
        "line": 262,
        "fullcodeline": "eMode = db->dfltLockMode;"
    },
    {
        "line": 287,
        "fullcodeline": "|| eMode==PAGER_LOCKINGMODE_EXCLUSIVE );"
    },
    {
        "line": 289,
        "fullcodeline": "zRet = \"exclusive\";"
    },
    {
        "line": 307,
        "fullcodeline": "eMode = PAGER_JOURNALMODE_QUERY;"
    },
    {
        "line": 327,
        "fullcodeline": "iDb = 0;"
    },
    {
        "line": 328,
        "fullcodeline": "pId2->n = 1;"
    },
    {
        "line": 350,
        "fullcodeline": "sqlite3DecOrHexToI64(zRight, &iLimit);"
    },
    {
        "line": 372,
        "fullcodeline": "returnSingleInt(v, sqlite3BtreeGetAutoVacuum(pBt));"
    },
    {
        "line": 422,
        "fullcodeline": "if( zRight==0 || !sqlite3GetInt32(zRight, &iLimit) || iLimit<=0 ){"
    },
    {
        "line": 423,
        "fullcodeline": "iLimit = 0x7fffffff;"
    },
    {
        "line": 451,
        "fullcodeline": "returnSingleInt(v, pDb->pSchema->cache_size);"
    },
    {
        "line": 485,
        "fullcodeline": "returnSingleInt(v,"
    },
    {
        "line": 539,
        "fullcodeline": "returnSingleInt(v, sz);"
    },
    {
        "line": 560,
        "fullcodeline": "returnSingleInt(v, db->temp_store);"
    },
    {
        "line": 579,
        "fullcodeline": "returnSingleText(v, sqlite3_temp_directory);"
    },
    {
        "line": 694,
        "fullcodeline": "returnSingleInt(v, pDb->safety_level-1);"
    },
    {
        "line": 714,
        "fullcodeline": "setPragmaResultColumnNames(v, pPragma);"
    },
    {
        "line": 715,
        "fullcodeline": "returnSingleInt(v, (db->flags & pPragma->iArg)!=0 );"
    },
    {
        "line": 841,
        "fullcodeline": "if( pIdx==0 ){"
    },
    {
        "line": 910,
        "fullcodeline": "sqlite3VdbeMultiLoad(v, 1, \"iss\","
    },
    {
        "line": 923,
        "fullcodeline": "CollSeq *pColl = (CollSeq *)sqliteHashData(p);"
    },
    {
        "line": 924,
        "fullcodeline": "sqlite3VdbeMultiLoad(v, 1, \"is\", i++, pColl->zName);"
    },
    {
        "line": 942,
        "fullcodeline": "p = (FuncDef*)sqliteHashData(j);"
    },
    {
        "line": 943,
        "fullcodeline": "sqlite3VdbeMultiLoad(v, 1, \"si\", p->zName, 0);"
    },
    {
        "line": 953,
        "fullcodeline": "Module *pMod = (Module*)sqliteHashData(j);"
    },
    {
        "line": 954,
        "fullcodeline": "sqlite3VdbeMultiLoad(v, 1, \"s\", pMod->zName);"
    },
    {
        "line": 963,
        "fullcodeline": "sqlite3VdbeMultiLoad(v, 1, \"s\", aPragmaName[i].zName);"
    },
    {
        "line": 1038,
        "fullcodeline": "iTabDb = sqlite3SchemaToIndex(db, pTab->pSchema);"
    },
    {
        "line": 1039,
        "fullcodeline": "sqlite3CodeVerifySchema(pParse, iTabDb);"
    },
    {
        "line": 1040,
        "fullcodeline": "sqlite3TableLock(pParse, iTabDb, pTab->tnum, 0, pTab->zName);"
    },
    {
        "line": 1042,
        "fullcodeline": "sqlite3OpenTable(pParse, 0, iTabDb, pTab, OP_OpenRead);"
    },
    {
        "line": 1043,
        "fullcodeline": "sqlite3VdbeLoadString(v, regResult, pTab->zName);"
    },
    {
        "line": 1065,
        "fullcodeline": "addrTop = sqlite3VdbeAddOp1(v, OP_Rewind, 0); VdbeCoverage(v);"
    },
    {
        "line": 1111,
        "fullcodeline": "sqlite3VdbeAddOp2(v, OP_Next, 0, addrTop+1); VdbeCoverage(v);"
    },
    {
        "line": 1112,
        "fullcodeline": "sqlite3VdbeJumpHere(v, addrTop);"
    },
    {
        "line": 1125,
        "fullcodeline": "sqlite3RegisterLikeFunctions(db, sqlite3GetBoolean(zRight, 0));"
    },
    {
        "line": 1164,
        "fullcodeline": "if( pId2->z==0 ) iDb = -1;"
    },
    {
        "line": 1172,
        "fullcodeline": "sqlite3GetInt32(zRight, &mxErr);"
    },
    {
        "line": 1185,
        "fullcodeline": "int mxIdx = 0;   /* Maximum number of indexes for any table */"
    },
    {
        "line": 1190,
        "fullcodeline": "sqlite3CodeVerifySchema(pParse, i);"
    },
    {
        "line": 1198,
        "fullcodeline": "pTbls = &db->aDb[i].pSchema->tblHash;"
    },
    {
        "line": 1207,
        "fullcodeline": "aRoot = sqlite3DbMallocRawNN(db, sizeof(int)*(cnt+1));"
    },
    {
        "line": 1217,
        "fullcodeline": "aRoot[0] = cnt;"
    },
    {
        "line": 1220,
        "fullcodeline": "pParse->nMem = MAX( pParse->nMem, 8+mxIdx );"
    },
    {
        "line": 1221,
        "fullcodeline": "sqlite3ClearTempRegCache(pParse);"
    },
    {
        "line": 1224,
        "fullcodeline": "sqlite3VdbeAddOp4(v, OP_IntegrityCk, 2, cnt, 1, (char*)aRoot,P4_INTARRAY);"
    },
    {
        "line": 1225,
        "fullcodeline": "sqlite3VdbeChangeP5(v, (u8)i);"
    },
    {
        "line": 1226,
        "fullcodeline": "addr = sqlite3VdbeAddOp1(v, OP_IsNull, 2); VdbeCoverage(v);"
    },
    {
        "line": 1227,
        "fullcodeline": "sqlite3VdbeAddOp4(v, OP_String8, 0, 3, 0,"
    },
    {
        "line": 1230,
        "fullcodeline": "sqlite3VdbeAddOp3(v, OP_Concat, 2, 3, 3);"
    },
    {
        "line": 1231,
        "fullcodeline": "integrityCheckResultRow(v);"
    },
    {
        "line": 1232,
        "fullcodeline": "sqlite3VdbeJumpHere(v, addr);"
    },
    {
        "line": 1383,
        "fullcodeline": "aOp = sqlite3VdbeAddOpList(v, ArraySize(endCode), endCode, iLn);"
    },
    {
        "line": 1425,
        "fullcodeline": "{ \"UTF8\",     SQLITE_UTF8        },"
    },
    {
        "line": 1426,
        "fullcodeline": "{ \"UTF-8\",    SQLITE_UTF8        },  /* Must be element [1] */"
    },
    {
        "line": 1427,
        "fullcodeline": "{ \"UTF-16le\", SQLITE_UTF16LE     },  /* Must be element [2] */"
    },
    {
        "line": 1428,
        "fullcodeline": "{ \"UTF-16be\", SQLITE_UTF16BE     },  /* Must be element [3] */"
    },
    {
        "line": 1429,
        "fullcodeline": "{ \"UTF16le\",  SQLITE_UTF16LE     },"
    },
    {
        "line": 1430,
        "fullcodeline": "{ \"UTF16be\",  SQLITE_UTF16BE     },"
    },
    {
        "line": 1431,
        "fullcodeline": "{ \"UTF-16\",   0                  }, /* SQLITE_UTF16NATIVE */"
    },
    {
        "line": 1432,
        "fullcodeline": "{ \"UTF16\",    0                  }, /* SQLITE_UTF16NATIVE */"
    },
    {
        "line": 1433,
        "fullcodeline": "{ 0, 0 }"
    },
    {
        "line": 1441,
        "fullcodeline": "returnSingleText(v, encnames[ENC(pParse->db)].zName);"
    },
    {
        "line": 1506,
        "fullcodeline": "static const VdbeOpList setCookie[] = {"
    },
    {
        "line": 1511,
        "fullcodeline": "sqlite3VdbeVerifyNoMallocRequired(v, ArraySize(setCookie));"
    },
    {
        "line": 1512,
        "fullcodeline": "aOp = sqlite3VdbeAddOpList(v, ArraySize(setCookie), setCookie, 0);"
    },
    {
        "line": 1549,
        "fullcodeline": "while( (zOpt = sqlite3_compileoption_get(i++))!=0 ){"
    },
    {
        "line": 1550,
        "fullcodeline": "sqlite3VdbeLoadString(v, 1, zOpt);"
    },
    {
        "line": 1551,
        "fullcodeline": "sqlite3VdbeAddOp2(v, OP_ResultRow, 1, 1);"
    },
    {
        "line": 1592,
        "fullcodeline": "sqlite3_wal_autocheckpoint(db, sqlite3Atoi(zRight));"
    },
    {
        "line": 1595,
        "fullcodeline": "db->xWalCallback==sqlite3WalDefaultHook ?"
    },
    {
        "line": 1596,
        "fullcodeline": "SQLITE_PTR_TO_INT(db->pWalArg) : 0);"
    },
    {
        "line": 1679,
        "fullcodeline": "opMask = (u32)sqlite3Atoi(zRight);"
    },
    {
        "line": 1687,
        "fullcodeline": "sqlite3CodeVerifySchema(pParse, iDb);"
    },
    {
        "line": 1688,
        "fullcodeline": "pSchema = db->aDb[iDb].pSchema;"
    },
    {
        "line": 1738,
        "fullcodeline": "sqlite3_busy_timeout(db, sqlite3Atoi(zRight));"
    },
    {
        "line": 1778,
        "fullcodeline": "sqlite3_int64 iPrior = sqlite3_hard_heap_limit64(-1);"
    },
    {
        "line": 1794,
        "fullcodeline": "if( zRight"
    },
    {
        "line": 1796,
        "fullcodeline": "&& N>=0"
    },
    {
        "line": 1798,
        "fullcodeline": "sqlite3_limit(db, SQLITE_LIMIT_WORKER_THREADS, (int)(N&0x7fffffff));"
    },
    {
        "line": 149,
        "fullcodeline": "int size = sqlite3AbsInt32(sqlite3Atoi(zRight));"
    },
    {
        "line": 150,
        "fullcodeline": "sqlite3BeginWriteOperation(pParse, 0, iDb);"
    },
    {
        "line": 151,
        "fullcodeline": "sqlite3VdbeAddOp3(v, OP_SetCookie, iDb, BTREE_DEFAULT_CACHE_SIZE, size);"
    },
    {
        "line": 153,
        "fullcodeline": "pDb->pSchema->cache_size = size;"
    },
    {
        "line": 180,
        "fullcodeline": "db->nextPagesize = sqlite3Atoi(zRight);"
    },
    {
        "line": 209,
        "fullcodeline": "for(ii=0; ii<db->nDb; ii++){"
    },
    {
        "line": 242,
        "fullcodeline": "sqlite3VdbeAddOp3(v, OP_MaxPgcnt, iDb, iReg,"
    },
    {
        "line": 282,
        "fullcodeline": "pPager = sqlite3BtreePager(pDb->pBt);"
    },
    {
        "line": 283,
        "fullcodeline": "eMode = sqlite3PagerLockingMode(pPager, eMode);"
    },
    {
        "line": 310,
        "fullcodeline": "int n = sqlite3Strlen30(zRight);"
    },
    {
        "line": 351,
        "fullcodeline": "if( iLimit<-1 ) iLimit = -1;"
    },
    {
        "line": 374,
        "fullcodeline": "int eAuto = getAutoVacuum(zRight);"
    },
    {
        "line": 376,
        "fullcodeline": "db->nextAutovac = (u8)eAuto;"
    },
    {
        "line": 382,
        "fullcodeline": "rc = sqlite3BtreeSetAutoVacuum(pBt, eAuto);"
    },
    {
        "line": 453,
        "fullcodeline": "int size = sqlite3Atoi(zRight);"
    },
    {
        "line": 454,
        "fullcodeline": "pDb->pSchema->cache_size = size;"
    },
    {
        "line": 489,
        "fullcodeline": "int size = 1;"
    },
    {
        "line": 498,
        "fullcodeline": "setAllPagerFlags(db);"
    },
    {
        "line": 562,
        "fullcodeline": "changeTempStorage(pParse, zRight);"
    },
    {
        "line": 717,
        "fullcodeline": "u64 mask = pPragma->iArg;    /* Mask of bits to set or clear. */"
    },
    {
        "line": 741,
        "fullcodeline": "sqlite3VdbeAddOp0(v, OP_Expire);"
    },
    {
        "line": 742,
        "fullcodeline": "setAllPagerFlags(db);"
    },
    {
        "line": 766,
        "fullcodeline": "int iTabDb = sqlite3SchemaToIndex(db, pTab->pSchema);"
    },
    {
        "line": 768,
        "fullcodeline": "int nHidden = 0;"
    },
    {
        "line": 770,
        "fullcodeline": "Index *pPk = sqlite3PrimaryKeyIndex(pTab);"
    },
    {
        "line": 771,
        "fullcodeline": "pParse->nMem = 7;"
    },
    {
        "line": 772,
        "fullcodeline": "sqlite3CodeVerifySchema(pParse, iTabDb);"
    },
    {
        "line": 773,
        "fullcodeline": "sqlite3ViewGetColumnNames(pParse, pTab);"
    },
    {
        "line": 845,
        "fullcodeline": "pTab = sqlite3LocateTable(pParse, LOCATE_NOERR, zRight, zDb);"
    },
    {
        "line": 851,
        "fullcodeline": "int iIdxDb = sqlite3SchemaToIndex(db, pIdx->pSchema);"
    },
    {
        "line": 864,
        "fullcodeline": "sqlite3CodeVerifySchema(pParse, iIdxDb);"
    },
    {
        "line": 888,
        "fullcodeline": "int iTabDb = sqlite3SchemaToIndex(db, pTab->pSchema);"
    },
    {
        "line": 889,
        "fullcodeline": "pParse->nMem = 5;"
    },
    {
        "line": 908,
        "fullcodeline": "if( db->aDb[i].pBt==0 ) continue;"
    },
    {
        "line": 909,
        "fullcodeline": "assert( db->aDb[i].zDbSName!=0 );"
    },
    {
        "line": 913,
        "fullcodeline": "sqlite3BtreeGetFilename(db->aDb[i].pBt));"
    },
    {
        "line": 936,
        "fullcodeline": "for(p=sqlite3BuiltinFunctions.a[i]; p; p=p->u.pHash ){"
    },
    {
        "line": 977,
        "fullcodeline": "pFK = pTab->pFKey;"
    },
    {
        "line": 1041,
        "fullcodeline": "if( pTab->nCol+regRow>pParse->nMem ) pParse->nMem = pTab->nCol + regRow;"
    },
    {
        "line": 1062,
        "fullcodeline": "assert( pParse->nErr>0 || pFK==0 );"
    },
    {
        "line": 1064,
        "fullcodeline": "if( pParse->nTab<i ) pParse->nTab = i;"
    },
    {
        "line": 1173,
        "fullcodeline": "if( mxErr<=0 ){"
    },
    {
        "line": 1187,
        "fullcodeline": "if( OMIT_TEMPDB && i==1 ) continue;"
    },
    {
        "line": 1197,
        "fullcodeline": "assert( sqlite3SchemaMutexHeld(db, i, 0) );"
    },
    {
        "line": 1199,
        "fullcodeline": "for(cnt=0, x=sqliteHashFirst(pTbls); x; x=sqliteHashNext(x)){"
    },
    {
        "line": 1208,
        "fullcodeline": "if( aRoot==0 ) break;"
    },
    {
        "line": 1209,
        "fullcodeline": "for(cnt=0, x=sqliteHashFirst(pTbls); x; x=sqliteHashNext(x)){"
    },
    {
        "line": 1228,
        "fullcodeline": "sqlite3MPrintf(db, \"*** in database %s ***\\n\", db->aDb[i].zDbSName),"
    },
    {
        "line": 1236,
        "fullcodeline": "for(x=sqliteHashFirst(pTbls); x; x=sqliteHashNext(x)){"
    },
    {
        "line": 1373,
        "fullcodeline": "{ OP_AddImm,      1, 0,        0},    /* 0 */"
    },
    {
        "line": 1374,
        "fullcodeline": "{ OP_IfNotZero,   1, 4,        0},    /* 1 */"
    },
    {
        "line": 1375,
        "fullcodeline": "{ OP_String8,     0, 3,        0},    /* 2 */"
    },
    {
        "line": 1376,
        "fullcodeline": "{ OP_ResultRow,   3, 1,        0},    /* 3 */"
    },
    {
        "line": 1377,
        "fullcodeline": "{ OP_Halt,        0, 0,        0},    /* 4 */"
    },
    {
        "line": 1378,
        "fullcodeline": "{ OP_String8,     0, 3,        0},    /* 5 */"
    },
    {
        "line": 1379,
        "fullcodeline": "{ OP_Goto,        0, 3,        0},    /* 6 */"
    },
    {
        "line": 1437,
        "fullcodeline": "if( sqlite3ReadSchema(pParse) ) goto pragma_out;"
    },
    {
        "line": 1438,
        "fullcodeline": "assert( encnames[SQLITE_UTF8].enc==SQLITE_UTF8 );"
    },
    {
        "line": 1439,
        "fullcodeline": "assert( encnames[SQLITE_UTF16LE].enc==SQLITE_UTF16LE );"
    },
    {
        "line": 1440,
        "fullcodeline": "assert( encnames[SQLITE_UTF16BE].enc==SQLITE_UTF16BE );"
    },
    {
        "line": 1517,
        "fullcodeline": "aOp[1].p3 = sqlite3Atoi(zRight);"
    },
    {
        "line": 1520,
        "fullcodeline": "static const VdbeOpList readCookie[] = {"
    },
    {
        "line": 1526,
        "fullcodeline": "sqlite3VdbeVerifyNoMallocRequired(v, ArraySize(readCookie));"
    },
    {
        "line": 1527,
        "fullcodeline": "aOp = sqlite3VdbeAddOpList(v, ArraySize(readCookie),readCookie,0);"
    },
    {
        "line": 1532,
        "fullcodeline": "sqlite3VdbeReusable(v);"
    },
    {
        "line": 1682,
        "fullcodeline": "opMask = 0xfffe;"
    },
    {
        "line": 1686,
        "fullcodeline": "if( iDb==1 ) continue;"
    },
    {
        "line": 1689,
        "fullcodeline": "for(k=sqliteHashFirst(&pSchema->tblHash); k; k=sqliteHashNext(k)){"
    },
    {
        "line": 1795,
        "fullcodeline": "&& sqlite3DecOrHexToI64(zRight, &N)==SQLITE_OK"
    },
    {
        "line": 144,
        "fullcodeline": "if( ONLY_IF_REALLOC_STRESS(aOp==0) ) break;"
    },
    {
        "line": 152,
        "fullcodeline": "assert( sqlite3SchemaMutexHeld(db, iDb, 0) );"
    },
    {
        "line": 181,
        "fullcodeline": "if( SQLITE_NOMEM==sqlite3BtreeSetPageSize(pBt, db->nextPagesize,-1,0) ){"
    },
    {
        "line": 201,
        "fullcodeline": "if( sqlite3_stricmp(zRight, \"fast\")==0 ){"
    },
    {
        "line": 202,
        "fullcodeline": "b = 2;"
    },
    {
        "line": 210,
        "fullcodeline": "sqlite3BtreeSecureDelete(db->aDb[ii].pBt, b);"
    },
    {
        "line": 243,
        "fullcodeline": "sqlite3AbsInt32(sqlite3Atoi(zRight)));"
    },
    {
        "line": 311,
        "fullcodeline": "for(eMode=0; (zMode = sqlite3JournalModename(eMode))!=0; eMode++){"
    },
    {
        "line": 331,
        "fullcodeline": "if( db->aDb[ii].pBt && (ii==iDb || pId2->n==0) ){"
    },
    {
        "line": 332,
        "fullcodeline": "sqlite3VdbeUsesBtree(v, ii);"
    },
    {
        "line": 333,
        "fullcodeline": "sqlite3VdbeAddOp3(v, OP_JournalMode, ii, 1, eMode);"
    },
    {
        "line": 375,
        "fullcodeline": "assert( eAuto>=0 && eAuto<=2 );"
    },
    {
        "line": 487,
        "fullcodeline": "sqlite3BtreeSetSpillSize(pDb->pBt,0));"
    },
    {
        "line": 490,
        "fullcodeline": "if( sqlite3GetInt32(zRight, &size) ){"
    },
    {
        "line": 493,
        "fullcodeline": "if( sqlite3GetBoolean(zRight, size!=0) ){"
    },
    {
        "line": 540,
        "fullcodeline": "}else if( rc!=SQLITE_NOTFOUND ){"
    },
    {
        "line": 696,
        "fullcodeline": "if( !db->autoCommit ){"
    },
    {
        "line": 718,
        "fullcodeline": "if( db->autoCommit==0 ){"
    },
    {
        "line": 730,
        "fullcodeline": "if( sqlite3GetBoolean(zRight, 0) ){"
    },
    {
        "line": 774,
        "fullcodeline": "for(i=0, pCol=pTab->aCol; i<pTab->nCol; i++, pCol++){"
    },
    {
        "line": 846,
        "fullcodeline": "if( pTab && !HasRowid(pTab) ){"
    },
    {
        "line": 865,
        "fullcodeline": "assert( pParse->nMem<=pPragma->nPragCName );"
    },
    {
        "line": 866,
        "fullcodeline": "for(i=0; i<mx; i++){"
    },
    {
        "line": 938,
        "fullcodeline": "sqlite3VdbeMultiLoad(v, 1, \"si\", p->zName, 1);"
    },
    {
        "line": 1031,
        "fullcodeline": "pTab = sqlite3LocateTable(pParse, 0, zRight, zDb);"
    },
    {
        "line": 1032,
        "fullcodeline": "k = 0;"
    },
    {
        "line": 1037,
        "fullcodeline": "if( pTab==0 || pTab->pFKey==0 ) continue;"
    },
    {
        "line": 1044,
        "fullcodeline": "for(i=1, pFK=pTab->pFKey; pFK; i++, pFK=pFK->pNextFrom){"
    },
    {
        "line": 1045,
        "fullcodeline": "pParent = sqlite3FindTable(db, pFK->zTo, zDb);"
    },
    {
        "line": 1047,
        "fullcodeline": "pIdx = 0;"
    },
    {
        "line": 1048,
        "fullcodeline": "sqlite3TableLock(pParse, iTabDb, pParent->tnum, 0, pParent->zName);"
    },
    {
        "line": 1049,
        "fullcodeline": "x = sqlite3FkLocateIndex(pParse, pParent, pFK, &pIdx, 0);"
    },
    {
        "line": 1066,
        "fullcodeline": "for(i=1, pFK=pTab->pFKey; pFK; i++, pFK=pFK->pNextFrom){"
    },
    {
        "line": 1067,
        "fullcodeline": "pParent = sqlite3FindTable(db, pFK->zTo, zDb);"
    },
    {
        "line": 1068,
        "fullcodeline": "pIdx = 0;"
    },
    {
        "line": 1069,
        "fullcodeline": "aiCols = 0;"
    },
    {
        "line": 1074,
        "fullcodeline": "addrOk = sqlite3VdbeMakeLabel(pParse);"
    },
    {
        "line": 1106,
        "fullcodeline": "sqlite3VdbeMultiLoad(v, regResult+2, \"siX\", pFK->zTo, i-1);"
    },
    {
        "line": 1107,
        "fullcodeline": "sqlite3VdbeAddOp2(v, OP_ResultRow, regResult, 4);"
    },
    {
        "line": 1108,
        "fullcodeline": "sqlite3VdbeResolveLabel(v, addrOk);"
    },
    {
        "line": 1109,
        "fullcodeline": "sqlite3DbFree(db, aiCols);"
    },
    {
        "line": 1174,
        "fullcodeline": "mxErr = SQLITE_INTEGRITY_CHECK_ERROR_MAX;"
    },
    {
        "line": 1188,
        "fullcodeline": "if( iDb>=0 && i!=iDb ) continue;"
    },
    {
        "line": 1200,
        "fullcodeline": "Table *pTab = sqliteHashData(x);  /* Current table */"
    },
    {
        "line": 1210,
        "fullcodeline": "Table *pTab = sqliteHashData(x);"
    },
    {
        "line": 1237,
        "fullcodeline": "Table *pTab = sqliteHashData(x);"
    },
    {
        "line": 1239,
        "fullcodeline": "Index *pPrior = 0;"
    },
    {
        "line": 1242,
        "fullcodeline": "int r1 = -1;"
    },
    {
        "line": 1245,
        "fullcodeline": "pPk = HasRowid(pTab) ? 0 : sqlite3PrimaryKeyIndex(pTab);"
    },
    {
        "line": 1246,
        "fullcodeline": "sqlite3OpenTableAndIndices(pParse, pTab, OP_OpenRead, 0,"
    },
    {
        "line": 1251,
        "fullcodeline": "sqlite3VdbeAddOp2(v, OP_Integer, 0, 7);"
    },
    {
        "line": 1257,
        "fullcodeline": "sqlite3VdbeAddOp2(v, OP_Rewind, iDataCur, 0); VdbeCoverage(v);"
    },
    {
        "line": 1258,
        "fullcodeline": "loopTop = sqlite3VdbeAddOp2(v, OP_AddImm, 7, 1);"
    },
    {
        "line": 1351,
        "fullcodeline": "sqlite3VdbeAddOp2(v, OP_Next, iDataCur, loopTop); VdbeCoverage(v);"
    },
    {
        "line": 1352,
        "fullcodeline": "sqlite3VdbeJumpHere(v, loopTop-1);"
    },
    {
        "line": 1385,
        "fullcodeline": "aOp[0].p2 = 1-mxErr;"
    },
    {
        "line": 1507,
        "fullcodeline": "{ OP_Transaction,    0,  1,  0},    /* 0 */"
    },
    {
        "line": 1508,
        "fullcodeline": "{ OP_SetCookie,      0,  0,  0},    /* 1 */"
    },
    {
        "line": 1513,
        "fullcodeline": "if( ONLY_IF_REALLOC_STRESS(aOp==0) ) break;"
    },
    {
        "line": 1568,
        "fullcodeline": "if( sqlite3StrICmp(zRight, \"full\")==0 ){"
    },
    {
        "line": 1569,
        "fullcodeline": "eMode = SQLITE_CHECKPOINT_FULL;"
    },
    {
        "line": 1680,
        "fullcodeline": "if( (opMask & 0x02)==0 ) break;"
    },
    {
        "line": 1690,
        "fullcodeline": "pTab = (Table*)sqliteHashData(k);"
    },
    {
        "line": 1698,
        "fullcodeline": "szThreshold = pTab->nRowLogEst + 46; assert( sqlite3LogEst(25)==46 );"
    },
    {
        "line": 1711,
        "fullcodeline": "zSubSql = sqlite3MPrintf(db, \"ANALYZE \\\"%w\\\".\\\"%w\\\"\","
    },
    {
        "line": 1779,
        "fullcodeline": "if( N>0 && (iPrior==0 || iPrior>N) ) sqlite3_hard_heap_limit64(N);"
    },
    {
        "line": 182,
        "fullcodeline": "sqlite3OomFault(db);"
    },
    {
        "line": 204,
        "fullcodeline": "b = sqlite3GetBoolean(zRight, 0);"
    },
    {
        "line": 280,
        "fullcodeline": "db->dfltLockMode = (u8)eMode;"
    },
    {
        "line": 317,
        "fullcodeline": "eMode = PAGER_JOURNALMODE_QUERY;"
    },
    {
        "line": 319,
        "fullcodeline": "if( eMode==PAGER_JOURNALMODE_OFF && (db->flags & SQLITE_Defensive)!=0 ){"
    },
    {
        "line": 322,
        "fullcodeline": "eMode = PAGER_JOURNALMODE_QUERY;"
    },
    {
        "line": 383,
        "fullcodeline": "if( rc==SQLITE_OK && (eAuto==1 || eAuto==2) ){"
    },
    {
        "line": 389,
        "fullcodeline": "static const int iLn = VDBE_OFFSET_LINENO(2);"
    },
    {
        "line": 390,
        "fullcodeline": "static const VdbeOpList setMeta6[] = {"
    },
    {
        "line": 398,
        "fullcodeline": "int iAddr = sqlite3VdbeCurrentAddr(v);"
    },
    {
        "line": 399,
        "fullcodeline": "sqlite3VdbeVerifyNoMallocRequired(v, ArraySize(setMeta6));"
    },
    {
        "line": 400,
        "fullcodeline": "aOp = sqlite3VdbeAddOpList(v, ArraySize(setMeta6), setMeta6, iLn);"
    },
    {
        "line": 407,
        "fullcodeline": "sqlite3VdbeUsesBtree(v, iDb);"
    },
    {
        "line": 486,
        "fullcodeline": "(db->flags & SQLITE_CacheSpill)==0 ? 0 :"
    },
    {
        "line": 491,
        "fullcodeline": "sqlite3BtreeSetSpillSize(pDb->pBt, size);"
    },
    {
        "line": 494,
        "fullcodeline": "db->flags |= SQLITE_CacheSpill;"
    },
    {
        "line": 584,
        "fullcodeline": "rc = sqlite3OsAccess(db->pVfs, zRight, SQLITE_ACCESS_READWRITE, &res);"
    },
    {
        "line": 590,
        "fullcodeline": "if( SQLITE_TEMP_STORE==0"
    },
    {
        "line": 592,
        "fullcodeline": "|| (SQLITE_TEMP_STORE==2 && db->temp_store==1)"
    },
    {
        "line": 721,
        "fullcodeline": "mask &= ~(SQLITE_ForeignKeys);"
    },
    {
        "line": 731,
        "fullcodeline": "db->flags |= mask;"
    },
    {
        "line": 775,
        "fullcodeline": "int isHidden = 0;"
    },
    {
        "line": 797,
        "fullcodeline": "sqlite3VdbeMultiLoad(v, 1, pPragma->iArg ? \"issisii\" : \"issisi\","
    },
    {
        "line": 847,
        "fullcodeline": "pIdx = sqlite3PrimaryKeyIndex(pTab);"
    },
    {
        "line": 856,
        "fullcodeline": "mx = pIdx->nColumn;"
    },
    {
        "line": 857,
        "fullcodeline": "pParse->nMem = 6;"
    },
    {
        "line": 867,
        "fullcodeline": "i16 cnum = pIdx->aiColumn[i];"
    },
    {
        "line": 868,
        "fullcodeline": "sqlite3VdbeMultiLoad(v, 1, \"iisX\", i, cnum,"
    },
    {
        "line": 876,
        "fullcodeline": "sqlite3VdbeAddOp2(v, OP_ResultRow, 1, pParse->nMem);"
    },
    {
        "line": 891,
        "fullcodeline": "for(pIdx=pTab->pIndex, i=0; pIdx; pIdx=pIdx->pNext, i++){"
    },
    {
        "line": 892,
        "fullcodeline": "const char *azOrigin[] = { \"c\", \"u\", \"pk\" };"
    },
    {
        "line": 893,
        "fullcodeline": "sqlite3VdbeMultiLoad(v, 1, \"isisi\","
    },
    {
        "line": 937,
        "fullcodeline": "if( p->funcFlags & SQLITE_FUNC_INTERNAL ) continue;"
    },
    {
        "line": 979,
        "fullcodeline": "int iTabDb = sqlite3SchemaToIndex(db, pTab->pSchema);"
    },
    {
        "line": 980,
        "fullcodeline": "int i = 0;"
    },
    {
        "line": 981,
        "fullcodeline": "pParse->nMem = 8;"
    },
    {
        "line": 1034,
        "fullcodeline": "pTab = (Table*)sqliteHashData(k);"
    },
    {
        "line": 1035,
        "fullcodeline": "k = sqliteHashNext(k);"
    },
    {
        "line": 1046,
        "fullcodeline": "if( pParent==0 ) continue;"
    },
    {
        "line": 1080,
        "fullcodeline": "for(j=0; j<pFK->nCol; j++){"
    },
    {
        "line": 1101,
        "fullcodeline": "if( HasRowid(pTab) ){"
    },
    {
        "line": 1203,
        "fullcodeline": "if( HasRowid(pTab) ) cnt++;"
    },
    {
        "line": 1205,
        "fullcodeline": "if( nIdx>mxIdx ) mxIdx = nIdx;"
    },
    {
        "line": 1212,
        "fullcodeline": "if( HasRowid(pTab) ) aRoot[++cnt] = pTab->tnum;"
    },
    {
        "line": 1213,
        "fullcodeline": "for(pIdx=pTab->pIndex; pIdx; pIdx=pIdx->pNext){"
    },
    {
        "line": 1244,
        "fullcodeline": "if( pTab->tnum<1 ) continue;  /* Skip VIEWs or VIRTUAL TABLEs */"
    },
    {
        "line": 1255,
        "fullcodeline": "assert( pParse->nMem>=8+j );"
    },
    {
        "line": 1256,
        "fullcodeline": "assert( sqlite3NoTempsInRange(pParse,1,7+j) );"
    },
    {
        "line": 1259,
        "fullcodeline": "if( !isQuick ){"
    },
    {
        "line": 1265,
        "fullcodeline": "for(j=0; j<pTab->nCol; j++){"
    },
    {
        "line": 1280,
        "fullcodeline": "if( pTab->pCheck && (db->flags & SQLITE_IgnoreChecks)==0 ){"
    },
    {
        "line": 1303,
        "fullcodeline": "if( !isQuick ){ /* Omit the remaining tests for quick_check */"
    },
    {
        "line": 1354,
        "fullcodeline": "if( !isQuick ){"
    },
    {
        "line": 1389,
        "fullcodeline": "aOp[5].p4.z = (char*)sqlite3ErrStr(SQLITE_CORRUPT);"
    },
    {
        "line": 1449,
        "fullcodeline": "!(DbHasProperty(db, 0, DB_SchemaLoaded)) ||"
    },
    {
        "line": 1450,
        "fullcodeline": "DbHasProperty(db, 0, DB_Empty)"
    },
    {
        "line": 1521,
        "fullcodeline": "{ OP_Transaction,     0,  0,  0},    /* 0 */"
    },
    {
        "line": 1522,
        "fullcodeline": "{ OP_ReadCookie,      0,  1,  0},    /* 1 */"
    },
    {
        "line": 1523,
        "fullcodeline": "{ OP_ResultRow,       1,  1,  0}"
    },
    {
        "line": 1528,
        "fullcodeline": "if( ONLY_IF_REALLOC_STRESS(aOp==0) ) break;"
    },
    {
        "line": 1699,
        "fullcodeline": "for(pIdx=pTab->pIndex; pIdx; pIdx=pIdx->pNext){"
    },
    {
        "line": 1713,
        "fullcodeline": "if( opMask & 0x01 ){"
    },
    {
        "line": 275,
        "fullcodeline": "assert(pDb==&db->aDb[0]);"
    },
    {
        "line": 276,
        "fullcodeline": "for(ii=2; ii<db->nDb; ii++){"
    },
    {
        "line": 406,
        "fullcodeline": "aOp[4].p3 = eAuto - 1;"
    },
    {
        "line": 496,
        "fullcodeline": "db->flags &= ~(u64)SQLITE_CacheSpill;"
    },
    {
        "line": 591,
        "fullcodeline": "|| (SQLITE_TEMP_STORE==1 && db->temp_store<=1)"
    },
    {
        "line": 598,
        "fullcodeline": "sqlite3_temp_directory = sqlite3_mprintf(\"%s\", zRight);"
    },
    {
        "line": 733,
        "fullcodeline": "db->flags &= ~mask;"
    },
    {
        "line": 776,
        "fullcodeline": "if( pCol->colFlags & COLFLAG_NOINSERT ){"
    },
    {
        "line": 796,
        "fullcodeline": "assert( pCol->pDflt==0 || pCol->pDflt->op==TK_SPAN || isHidden>=2 );"
    },
    {
        "line": 798,
        "fullcodeline": "i-nHidden,"
    },
    {
        "line": 800,
        "fullcodeline": "sqlite3ColumnType(pCol,\"\"),"
    },
    {
        "line": 860,
        "fullcodeline": "mx = pIdx->nKeyCol;"
    },
    {
        "line": 861,
        "fullcodeline": "pParse->nMem = 3;"
    },
    {
        "line": 896,
        "fullcodeline": "IsUniqueIndex(pIdx),"
    },
    {
        "line": 898,
        "fullcodeline": "pIdx->pPartIdxWhere!=0);"
    },
    {
        "line": 1071,
        "fullcodeline": "x = sqlite3FkLocateIndex(pParse, pParent, pFK, &pIdx, &aiCols);"
    },
    {
        "line": 1081,
        "fullcodeline": "int iCol = aiCols ? aiCols[j] : pFK->aCol[j].iFrom;"
    },
    {
        "line": 1082,
        "fullcodeline": "sqlite3ExprCodeGetColumnOfTable(v, pTab, 0, iCol, regRow+j);"
    },
    {
        "line": 1083,
        "fullcodeline": "sqlite3VdbeAddOp2(v, OP_IsNull, regRow+j, addrOk); VdbeCoverage(v);"
    },
    {
        "line": 1089,
        "fullcodeline": "sqlite3VdbeAddOp4(v, OP_MakeRecord, regRow, pFK->nCol, regKey,"
    },
    {
        "line": 1091,
        "fullcodeline": "sqlite3VdbeAddOp4Int(v, OP_Found, i, addrOk, regKey, 0);"
    },
    {
        "line": 1092,
        "fullcodeline": "VdbeCoverage(v);"
    },
    {
        "line": 1102,
        "fullcodeline": "sqlite3VdbeAddOp2(v, OP_Rowid, 0, regResult+1);"
    },
    {
        "line": 1204,
        "fullcodeline": "for(nIdx=0, pIdx=pTab->pIndex; pIdx; pIdx=pIdx->pNext, nIdx++){ cnt++; }"
    },
    {
        "line": 1214,
        "fullcodeline": "aRoot[++cnt] = pIdx->tnum;"
    },
    {
        "line": 1252,
        "fullcodeline": "for(j=0, pIdx=pTab->pIndex; pIdx; pIdx=pIdx->pNext, j++){"
    },
    {
        "line": 1253,
        "fullcodeline": "sqlite3VdbeAddOp2(v, OP_Integer, 0, 8+j); /* index entries counter */"
    },
    {
        "line": 1261,
        "fullcodeline": "sqlite3VdbeAddOp3(v, OP_Column, iDataCur, pTab->nNVCol-1,3);"
    },
    {
        "line": 1262,
        "fullcodeline": "sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);"
    },
    {
        "line": 1270,
        "fullcodeline": "sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);"
    },
    {
        "line": 1271,
        "fullcodeline": "sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);"
    },
    {
        "line": 1272,
        "fullcodeline": "jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);"
    },
    {
        "line": 1273,
        "fullcodeline": "zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,"
    },
    {
        "line": 1275,
        "fullcodeline": "sqlite3VdbeAddOp4(v, OP_String8, 0, 3, 0, zErr, P4_DYNAMIC);"
    },
    {
        "line": 1276,
        "fullcodeline": "integrityCheckResultRow(v);"
    },
    {
        "line": 1277,
        "fullcodeline": "sqlite3VdbeJumpHere(v, jmp2);"
    },
    {
        "line": 1281,
        "fullcodeline": "ExprList *pCheck = sqlite3ExprListDup(db, pTab->pCheck, 0);"
    },
    {
        "line": 1301,
        "fullcodeline": "sqlite3ExprListDelete(db, pCheck);"
    },
    {
        "line": 1355,
        "fullcodeline": "sqlite3VdbeLoadString(v, 2, \"wrong # of entries in index \");"
    },
    {
        "line": 1452,
        "fullcodeline": "for(pEnc=&encnames[0]; pEnc->zName; pEnc++){"
    },
    {
        "line": 1695,
        "fullcodeline": "if( (pTab->tabFlags & TF_StatsUsed)==0 ) continue;"
    },
    {
        "line": 1706,
        "fullcodeline": "sqlite3OpenTable(pParse, iTabCur, iDb, pTab, OP_OpenRead);"
    },
    {
        "line": 1707,
        "fullcodeline": "sqlite3VdbeAddOp3(v, OP_IfSmaller, iTabCur,"
    },
    {
        "line": 1709,
        "fullcodeline": "VdbeCoverage(v);"
    },
    {
        "line": 1714,
        "fullcodeline": "int r1 = sqlite3GetTempReg(pParse);"
    },
    {
        "line": 1715,
        "fullcodeline": "sqlite3VdbeAddOp4(v, OP_String8, 0, r1, 0, zSubSql, P4_DYNAMIC);"
    },
    {
        "line": 1716,
        "fullcodeline": "sqlite3VdbeAddOp2(v, OP_ResultRow, r1, 1);"
    },
    {
        "line": 277,
        "fullcodeline": "pPager = sqlite3BtreePager(db->aDb[ii].pBt);"
    },
    {
        "line": 278,
        "fullcodeline": "sqlite3PagerLockingMode(pPager, eMode);"
    },
    {
        "line": 312,
        "fullcodeline": "if( sqlite3StrNICmp(zRight, zMode, n)==0 ) break;"
    },
    {
        "line": 391,
        "fullcodeline": "{ OP_Transaction,    0,         1,                 0},    /* 0 */"
    },
    {
        "line": 392,
        "fullcodeline": "{ OP_ReadCookie,     0,         1,         BTREE_LARGEST_ROOT_PAGE},"
    },
    {
        "line": 393,
        "fullcodeline": "{ OP_If,             1,         0,                 0},    /* 2 */"
    },
    {
        "line": 394,
        "fullcodeline": "{ OP_Halt,           SQLITE_OK, OE_Abort,          0},    /* 3 */"
    },
    {
        "line": 395,
        "fullcodeline": "{ OP_SetCookie,      0,         BTREE_INCR_VACUUM, 0},    /* 4 */"
    },
    {
        "line": 401,
        "fullcodeline": "if( ONLY_IF_REALLOC_STRESS(aOp==0) ) break;"
    },
    {
        "line": 585,
        "fullcodeline": "if( rc!=SQLITE_OK || res==0 ){"
    },
    {
        "line": 734,
        "fullcodeline": "if( mask==SQLITE_DeferFKs ) db->nDeferredImmCons = 0;"
    },
    {
        "line": 789,
        "fullcodeline": "if( (pCol->colFlags & COLFLAG_PRIMKEY)==0 ){"
    },
    {
        "line": 790,
        "fullcodeline": "k = 0;"
    },
    {
        "line": 802,
        "fullcodeline": "pCol->pDflt && isHidden<2 ? pCol->pDflt->u.zToken : 0,"
    },
    {
        "line": 869,
        "fullcodeline": "cnum<0 ? 0 : pTab->aCol[cnum].zName);"
    },
    {
        "line": 871,
        "fullcodeline": "sqlite3VdbeMultiLoad(v, 4, \"isiX\","
    },
    {
        "line": 996,
        "fullcodeline": "++i;"
    },
    {
        "line": 997,
        "fullcodeline": "pFK = pFK->pNextFrom;"
    },
    {
        "line": 1051,
        "fullcodeline": "if( pIdx==0 ){"
    },
    {
        "line": 1058,
        "fullcodeline": "k = 0;"
    },
    {
        "line": 1072,
        "fullcodeline": "assert( x==0 );"
    },
    {
        "line": 1090,
        "fullcodeline": "sqlite3IndexAffinityStr(db,pIdx), pFK->nCol);"
    },
    {
        "line": 1104,
        "fullcodeline": "sqlite3VdbeAddOp2(v, OP_Null, 0, regResult+1);"
    },
    {
        "line": 1268,
        "fullcodeline": "if( j==pTab->iPKey ) continue;"
    },
    {
        "line": 1282,
        "fullcodeline": "if( db->mallocFailed==0 ){"
    },
    {
        "line": 1460,
        "fullcodeline": "sqlite3ErrorMsg(pParse, \"unsupported encoding: %s\", zRight);"
    },
    {
        "line": 1570,
        "fullcodeline": "}else if( sqlite3StrICmp(zRight, \"restart\")==0 ){"
    },
    {
        "line": 1571,
        "fullcodeline": "eMode = SQLITE_CHECKPOINT_RESTART;"
    },
    {
        "line": 1718,
        "fullcodeline": "sqlite3VdbeAddOp4(v, OP_SqlExec, 0, 0, 0, zSubSql, P4_DYNAMIC);"
    },
    {
        "line": 700,
        "fullcodeline": "int iLevel = (getSafetyLevel(zRight,0,1)+1) & PAGER_SYNCHRONOUS_MASK;"
    },
    {
        "line": 704,
        "fullcodeline": "setAllPagerFlags(db);"
    },
    {
        "line": 781,
        "fullcodeline": "if( pCol->colFlags & COLFLAG_VIRTUAL ){"
    },
    {
        "line": 874,
        "fullcodeline": "i<pIdx->nKeyCol);"
    },
    {
        "line": 985,
        "fullcodeline": "for(j=0; j<pFK->nCol; j++){"
    },
    {
        "line": 1052,
        "fullcodeline": "sqlite3OpenTable(pParse, i, iTabDb, pParent, OP_OpenRead);"
    },
    {
        "line": 1283,
        "fullcodeline": "int addrCkFault = sqlite3VdbeMakeLabel(pParse);"
    },
    {
        "line": 1284,
        "fullcodeline": "int addrCkOk = sqlite3VdbeMakeLabel(pParse);"
    },
    {
        "line": 1287,
        "fullcodeline": "pParse->iSelfTab = iDataCur + 1;"
    },
    {
        "line": 1291,
        "fullcodeline": "sqlite3ExprIfTrue(pParse, pCheck->a[0].pExpr, addrCkOk,"
    },
    {
        "line": 1293,
        "fullcodeline": "sqlite3VdbeResolveLabel(v, addrCkFault);"
    },
    {
        "line": 1294,
        "fullcodeline": "pParse->iSelfTab = 0;"
    },
    {
        "line": 1295,
        "fullcodeline": "zErr = sqlite3MPrintf(db, \"CHECK constraint failed in %s\","
    },
    {
        "line": 1297,
        "fullcodeline": "sqlite3VdbeAddOp4(v, OP_String8, 0, 3, 0, zErr, P4_DYNAMIC);"
    },
    {
        "line": 1298,
        "fullcodeline": "integrityCheckResultRow(v);"
    },
    {
        "line": 1299,
        "fullcodeline": "sqlite3VdbeResolveLabel(v, addrCkOk);"
    },
    {
        "line": 1305,
        "fullcodeline": "for(j=0, pIdx=pTab->pIndex; pIdx; pIdx=pIdx->pNext, j++){"
    },
    {
        "line": 1307,
        "fullcodeline": "int ckUniq = sqlite3VdbeMakeLabel(pParse);"
    },
    {
        "line": 1309,
        "fullcodeline": "r1 = sqlite3GenerateIndexKey(pParse, pIdx, iDataCur, 0, 0, &jmp3,"
    },
    {
        "line": 1311,
        "fullcodeline": "pPrior = pIdx;"
    },
    {
        "line": 1312,
        "fullcodeline": "sqlite3VdbeAddOp2(v, OP_AddImm, 8+j, 1);/* increment entry count */"
    },
    {
        "line": 1314,
        "fullcodeline": "jmp2 = sqlite3VdbeAddOp4Int(v, OP_Found, iIdxCur+j, ckUniq, r1,"
    },
    {
        "line": 1315,
        "fullcodeline": "pIdx->nColumn); VdbeCoverage(v);"
    },
    {
        "line": 1316,
        "fullcodeline": "sqlite3VdbeLoadString(v, 3, \"row \");"
    },
    {
        "line": 1317,
        "fullcodeline": "sqlite3VdbeAddOp3(v, OP_Concat, 7, 3, 3);"
    },
    {
        "line": 1318,
        "fullcodeline": "sqlite3VdbeLoadString(v, 4, \" missing from index \");"
    },
    {
        "line": 1319,
        "fullcodeline": "sqlite3VdbeAddOp3(v, OP_Concat, 4, 3, 3);"
    },
    {
        "line": 1320,
        "fullcodeline": "jmp5 = sqlite3VdbeLoadString(v, 4, pIdx->zName);"
    },
    {
        "line": 1321,
        "fullcodeline": "sqlite3VdbeAddOp3(v, OP_Concat, 4, 3, 3);"
    },
    {
        "line": 1322,
        "fullcodeline": "jmp4 = integrityCheckResultRow(v);"
    },
    {
        "line": 1323,
        "fullcodeline": "sqlite3VdbeJumpHere(v, jmp2);"
    },
    {
        "line": 1347,
        "fullcodeline": "sqlite3VdbeJumpHere(v, jmp4);"
    },
    {
        "line": 1348,
        "fullcodeline": "sqlite3ResolvePartIdxLabel(pParse, jmp3);"
    },
    {
        "line": 1356,
        "fullcodeline": "for(j=0, pIdx=pTab->pIndex; pIdx; pIdx=pIdx->pNext, j++){"
    },
    {
        "line": 1358,
        "fullcodeline": "sqlite3VdbeAddOp2(v, OP_Count, iIdxCur+j, 3);"
    },
    {
        "line": 1359,
        "fullcodeline": "addr = sqlite3VdbeAddOp3(v, OP_Eq, 8+j, 0, 3); VdbeCoverage(v);"
    },
    {
        "line": 1360,
        "fullcodeline": "sqlite3VdbeChangeP5(v, SQLITE_NOTNULL);"
    },
    {
        "line": 1361,
        "fullcodeline": "sqlite3VdbeLoadString(v, 4, pIdx->zName);"
    },
    {
        "line": 1362,
        "fullcodeline": "sqlite3VdbeAddOp3(v, OP_Concat, 4, 2, 3);"
    },
    {
        "line": 1363,
        "fullcodeline": "integrityCheckResultRow(v);"
    },
    {
        "line": 1364,
        "fullcodeline": "sqlite3VdbeJumpHere(v, addr);"
    },
    {
        "line": 1701,
        "fullcodeline": "szThreshold = 0; /* Always analyze if any index lacks statistics */"
    },
    {
        "line": 1708,
        "fullcodeline": "sqlite3VdbeCurrentAddr(v)+2+(opMask&1), szThreshold);"
    },
    {
        "line": 701,
        "fullcodeline": "if( iLevel==0 ) iLevel = 1;"
    },
    {
        "line": 778,
        "fullcodeline": "nHidden++;"
    },
    {
        "line": 782,
        "fullcodeline": "isHidden = 2;  /* GENERATED ALWAYS AS ... VIRTUAL */"
    },
    {
        "line": 986,
        "fullcodeline": "sqlite3VdbeMultiLoad(v, 1, \"iissssss\","
    },
    {
        "line": 1054,
        "fullcodeline": "sqlite3VdbeAddOp3(v, OP_OpenRead, i, pIdx->tnum, iTabDb);"
    },
    {
        "line": 1055,
        "fullcodeline": "sqlite3VdbeSetP4KeyInfo(pParse, pIdx);"
    },
    {
        "line": 1094,
        "fullcodeline": "int jmp = sqlite3VdbeCurrentAddr(v)+2;"
    },
    {
        "line": 1095,
        "fullcodeline": "sqlite3VdbeAddOp3(v, OP_SeekRowid, i, jmp, regRow); VdbeCoverage(v);"
    },
    {
        "line": 1096,
        "fullcodeline": "sqlite3VdbeGoto(v, addrOk);"
    },
    {
        "line": 1288,
        "fullcodeline": "for(k=pCheck->nExpr-1; k>0; k--){"
    },
    {
        "line": 1308,
        "fullcodeline": "if( pPk==pIdx ) continue;"
    },
    {
        "line": 1327,
        "fullcodeline": "if( IsUniqueIndex(pIdx) ){"
    },
    {
        "line": 1357,
        "fullcodeline": "if( pPk==pIdx ) continue;"
    },
    {
        "line": 1453,
        "fullcodeline": "if( 0==sqlite3StrICmp(zRight, pEnc->zName) ){"
    },
    {
        "line": 1454,
        "fullcodeline": "SCHEMA_ENC(db) = ENC(db) ="
    },
    {
        "line": 792,
        "fullcodeline": "k = 1;"
    },
    {
        "line": 992,
        "fullcodeline": "actionName(pFK->aAction[1]),  /* ON UPDATE */"
    },
    {
        "line": 993,
        "fullcodeline": "actionName(pFK->aAction[0]),  /* ON DELETE */"
    },
    {
        "line": 1097,
        "fullcodeline": "assert( pFK->nCol==1 );"
    },
    {
        "line": 1289,
        "fullcodeline": "sqlite3ExprIfFalse(pParse, pCheck->a[k].pExpr, addrCkFault, 0);"
    },
    {
        "line": 1328,
        "fullcodeline": "int uniqOk = sqlite3VdbeMakeLabel(pParse);"
    },
    {
        "line": 1338,
        "fullcodeline": "jmp6 = sqlite3VdbeAddOp1(v, OP_Next, iIdxCur+j); VdbeCoverage(v);"
    },
    {
        "line": 1339,
        "fullcodeline": "sqlite3VdbeGoto(v, uniqOk);"
    },
    {
        "line": 1340,
        "fullcodeline": "sqlite3VdbeJumpHere(v, jmp6);"
    },
    {
        "line": 1341,
        "fullcodeline": "sqlite3VdbeAddOp4Int(v, OP_IdxGT, iIdxCur+j, uniqOk, r1,"
    },
    {
        "line": 1342,
        "fullcodeline": "pIdx->nKeyCol); VdbeCoverage(v);"
    },
    {
        "line": 1343,
        "fullcodeline": "sqlite3VdbeLoadString(v, 3, \"non-unique entry in index \");"
    },
    {
        "line": 1344,
        "fullcodeline": "sqlite3VdbeGoto(v, jmp5);"
    },
    {
        "line": 1345,
        "fullcodeline": "sqlite3VdbeResolveLabel(v, uniqOk);"
    },
    {
        "line": 1572,
        "fullcodeline": "}else if( sqlite3StrICmp(zRight, \"truncate\")==0 ){"
    },
    {
        "line": 1573,
        "fullcodeline": "eMode = SQLITE_CHECKPOINT_TRUNCATE;"
    },
    {
        "line": 783,
        "fullcodeline": "}else if( pCol->colFlags & COLFLAG_STORED ){"
    },
    {
        "line": 1331,
        "fullcodeline": "for(kk=0; kk<pIdx->nKeyCol; kk++){"
    },
    {
        "line": 1455,
        "fullcodeline": "pEnc->enc ? pEnc->enc : SQLITE_UTF16NATIVE;"
    },
    {
        "line": 784,
        "fullcodeline": "isHidden = 3;  /* GENERATED ALWAYS AS ... STORED */"
    },
    {
        "line": 794,
        "fullcodeline": "for(k=1; k<=pTab->nCol && pPk->aiColumn[k-1]!=i; k++){}"
    },
    {
        "line": 1332,
        "fullcodeline": "int iCol = pIdx->aiColumn[kk];"
    },
    {
        "line": 1335,
        "fullcodeline": "sqlite3VdbeAddOp2(v, OP_IsNull, r1+kk, uniqOk);"
    },
    {
        "line": 1336,
        "fullcodeline": "VdbeCoverage(v);"
    },
    {
        "line": 786,
        "fullcodeline": "isHidden = 1;  /* HIDDEN */"
    },
    {
        "line": 1333,
        "fullcodeline": "assert( iCol!=XN_ROWID && iCol<pTab->nCol );"
    },
    {
        "line": 785,
        "fullcodeline": "}else{ assert( pCol->colFlags & COLFLAG_HIDDEN );"
    },
    {
        "line": 1334,
        "fullcodeline": "if( iCol>=0 && pTab->aCol[iCol].notNull ) continue;"
    }
]