[
    {
        "line": 4,
        "fullcodeline": "CDXLVideoContext *c = avctx->priv_data;"
    },
    {
        "line": 5,
        "fullcodeline": "AVFrame * const p = data;"
    },
    {
        "line": 6,
        "fullcodeline": "int ret, w, h, encoding, aligned_width, buf_size = pkt->size;"
    },
    {
        "line": 7,
        "fullcodeline": "const uint8_t *buf = pkt->data;"
    },
    {
        "line": 11,
        "fullcodeline": "encoding        = buf[1] & 7;"
    },
    {
        "line": 12,
        "fullcodeline": "c->format       = buf[1] & 0xE0;"
    },
    {
        "line": 13,
        "fullcodeline": "w               = AV_RB16(&buf[14]);"
    },
    {
        "line": 14,
        "fullcodeline": "h               = AV_RB16(&buf[16]);"
    },
    {
        "line": 15,
        "fullcodeline": "c->bpp          = buf[19];"
    },
    {
        "line": 16,
        "fullcodeline": "c->palette_size = AV_RB16(&buf[20]);"
    },
    {
        "line": 17,
        "fullcodeline": "c->palette      = buf + 32;"
    },
    {
        "line": 18,
        "fullcodeline": "c->video        = c->palette + c->palette_size;"
    },
    {
        "line": 19,
        "fullcodeline": "c->video_size   = buf_size - c->palette_size - 32;"
    },
    {
        "line": 39,
        "fullcodeline": "c->padded_bits  = aligned_width - c->avctx->width;"
    },
    {
        "line": 59,
        "fullcodeline": "p->pict_type = AV_PICTURE_TYPE_I;"
    },
    {
        "line": 9,
        "fullcodeline": "if (buf_size < 32)"
    },
    {
        "line": 21,
        "fullcodeline": "if (c->palette_size > 512)"
    },
    {
        "line": 23,
        "fullcodeline": "if (buf_size < c->palette_size + 32)"
    },
    {
        "line": 25,
        "fullcodeline": "if (c->bpp < 1)"
    },
    {
        "line": 27,
        "fullcodeline": "if (c->format != BIT_PLANAR && c->format != BIT_LINE && c->format != CHUNKY) {"
    },
    {
        "line": 35,
        "fullcodeline": "if (c->format == CHUNKY)"
    },
    {
        "line": 40,
        "fullcodeline": "if (c->video_size < aligned_width * avctx->height * (int64_t)c->bpp / 8)"
    },
    {
        "line": 32,
        "fullcodeline": "if ((ret = ff_set_dimensions(avctx, w, h)) < 0)"
    },
    {
        "line": 36,
        "fullcodeline": "aligned_width = avctx->width;"
    },
    {
        "line": 42,
        "fullcodeline": "if (!encoding && c->palette_size && c->bpp <= 8 && c->format != CHUNKY) {"
    },
    {
        "line": 43,
        "fullcodeline": "avctx->pix_fmt = AV_PIX_FMT_PAL8;"
    },
    {
        "line": 57,
        "fullcodeline": "if ((ret = ff_get_buffer(avctx, p, 0)) < 0)"
    },
    {
        "line": 62,
        "fullcodeline": "av_fast_padded_malloc(&c->new_video, &c->new_video_size,"
    },
    {
        "line": 38,
        "fullcodeline": "aligned_width = FFALIGN(c->avctx->width, 16);"
    },
    {
        "line": 63,
        "fullcodeline": "h * w + AV_INPUT_BUFFER_PADDING_SIZE);"
    },
    {
        "line": 64,
        "fullcodeline": "if (!c->new_video)"
    },
    {
        "line": 66,
        "fullcodeline": "if (c->bpp == 8)"
    },
    {
        "line": 44,
        "fullcodeline": "} else if (encoding == 1 && (c->bpp == 6 || c->bpp == 8)) {"
    },
    {
        "line": 47,
        "fullcodeline": "avctx->pix_fmt = AV_PIX_FMT_BGR24;"
    },
    {
        "line": 65,
        "fullcodeline": "return AVERROR(ENOMEM);"
    },
    {
        "line": 45,
        "fullcodeline": "if (c->palette_size != (1 << (c->bpp - 1)))"
    },
    {
        "line": 48,
        "fullcodeline": "} else if (!encoding && c->bpp == 24 && c->format == CHUNKY &&"
    },
    {
        "line": 49,
        "fullcodeline": "!c->palette_size) {"
    },
    {
        "line": 50,
        "fullcodeline": "avctx->pix_fmt = AV_PIX_FMT_RGB24;"
    }
]