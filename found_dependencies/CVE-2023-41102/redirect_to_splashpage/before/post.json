[
    {
        "line": 6,
        "fullcodeline": "int ret = 0;"
    },
    {
        "line": 7,
        "fullcodeline": "const char *separator = \"&\";"
    },
    {
        "line": 10,
        "fullcodeline": "query = safe_calloc(QUERYMAXLEN);"
    },
    {
        "line": 18,
        "fullcodeline": "querystr = safe_calloc(QUERYMAXLEN);"
    },
    {
        "line": 26,
        "fullcodeline": "originurl_raw = safe_calloc(MID_BUF);"
    },
    {
        "line": 34,
        "fullcodeline": "originurl = safe_calloc(CUSTOM_ENC);"
    },
    {
        "line": 42,
        "fullcodeline": "get_query(connection, &query, separator);"
    },
    {
        "line": 51,
        "fullcodeline": "debug(LOG_DEBUG, \"Query string is [ %s ]\", query);"
    },
    {
        "line": 53,
        "fullcodeline": "safe_asprintf(&originurl_raw, \"http://%s%s%s\", host, url, query);"
    },
    {
        "line": 54,
        "fullcodeline": "uh_urlencode(originurl, CUSTOM_ENC, originurl_raw, strlen(originurl_raw));"
    },
    {
        "line": 63,
        "fullcodeline": "debug(LOG_DEBUG, \"originurl_raw: %s\", originurl_raw);"
    },
    {
        "line": 64,
        "fullcodeline": "debug(LOG_DEBUG, \"originurl: %s\", originurl);"
    },
    {
        "line": 66,
        "fullcodeline": "querystr=construct_querystring(connection, client, originurl, querystr);"
    },
    {
        "line": 67,
        "fullcodeline": "ret = encode_and_redirect_to_splashpage(connection, client, originurl, querystr);"
    },
    {
        "line": 68,
        "fullcodeline": "free(originurl_raw);"
    },
    {
        "line": 69,
        "fullcodeline": "free(originurl);"
    },
    {
        "line": 70,
        "fullcodeline": "free(query);"
    },
    {
        "line": 71,
        "fullcodeline": "free(querystr);"
    },
    {
        "line": 12,
        "fullcodeline": "if (!query) {"
    },
    {
        "line": 20,
        "fullcodeline": "if (!querystr) {"
    },
    {
        "line": 28,
        "fullcodeline": "if (!originurl_raw) {"
    },
    {
        "line": 36,
        "fullcodeline": "if (!originurl) {"
    },
    {
        "line": 44,
        "fullcodeline": "if (!query) {"
    },
    {
        "line": 56,
        "fullcodeline": "if (strcmp(url, \"/login\") == 0) {"
    },
    {
        "line": 13,
        "fullcodeline": "ret = send_error(connection, 503);"
    },
    {
        "line": 14,
        "fullcodeline": "free(query);"
    },
    {
        "line": 21,
        "fullcodeline": "ret = send_error(connection, 503);"
    },
    {
        "line": 22,
        "fullcodeline": "free(querystr);"
    },
    {
        "line": 29,
        "fullcodeline": "ret = send_error(connection, 503);"
    },
    {
        "line": 30,
        "fullcodeline": "free(originurl_raw);"
    },
    {
        "line": 37,
        "fullcodeline": "ret = send_error(connection, 503);"
    },
    {
        "line": 38,
        "fullcodeline": "free(originurl);"
    },
    {
        "line": 45,
        "fullcodeline": "debug(LOG_DEBUG, \"Unable to get query string - error 503\");"
    },
    {
        "line": 46,
        "fullcodeline": "free(query);"
    },
    {
        "line": 57,
        "fullcodeline": "client->cpi_query = safe_strdup(originurl);"
    },
    {
        "line": 58,
        "fullcodeline": "debug(LOG_DEBUG, \"RFC8910 request: %s\", client->cpi_query);"
    },
    {
        "line": 48,
        "fullcodeline": "return send_error(connection, 503);"
    },
    {
        "line": 60,
        "fullcodeline": "client->cpi_query = \"none\";"
    }
]