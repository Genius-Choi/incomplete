[
    {
        "line": 4,
        "fullcodeline": "Bool set_name=GF_FALSE;"
    },
    {
        "line": 6,
        "fullcodeline": "memset(stats, 0, sizeof(GF_FilterStats));"
    },
    {
        "line": 21,
        "fullcodeline": "stats->name = f->name;"
    },
    {
        "line": 22,
        "fullcodeline": "stats->reg_name = f->freg->name;"
    },
    {
        "line": 35,
        "fullcodeline": "stats->nb_pid_out = f->num_output_pids;"
    },
    {
        "line": 57,
        "fullcodeline": "gf_mx_p(f->tasks_mx);"
    },
    {
        "line": 58,
        "fullcodeline": "stats->nb_pid_in = f->num_input_pids;"
    },
    {
        "line": 5,
        "fullcodeline": "if (!stats || !f) return GF_BAD_PARAM;"
    },
    {
        "line": 24,
        "fullcodeline": "stats->done = f->removed || f->finalized;"
    },
    {
        "line": 32,
        "fullcodeline": "if (!stats->nb_pid_out && stats->nb_pid_in) stats->type = GF_FS_STATS_FILTER_RAWOUT;"
    },
    {
        "line": 36,
        "fullcodeline": "for (i=0; i<f->num_output_pids; i++) {"
    },
    {
        "line": 59,
        "fullcodeline": "for (i=0; i<f->num_input_pids; i++) {"
    },
    {
        "line": 11,
        "fullcodeline": "stats->percent = f->status_percent>10000 ? -1 : (s32) f->status_percent;"
    },
    {
        "line": 25,
        "fullcodeline": "if (stats->name && !strcmp(stats->name, stats->reg_name)) {"
    },
    {
        "line": 26,
        "fullcodeline": "set_name=GF_TRUE;"
    },
    {
        "line": 37,
        "fullcodeline": "GF_FilterPid *pid = gf_list_get(f->output_pids, i);"
    },
    {
        "line": 60,
        "fullcodeline": "GF_FilterPidInst *pidi = gf_list_get(f->input_pids, i);"
    },
    {
        "line": 90,
        "fullcodeline": "if (!stats->type && stats->codecid) {"
    },
    {
        "line": 44,
        "fullcodeline": "if (f->num_output_pids!=1) continue;"
    },
    {
        "line": 46,
        "fullcodeline": "if (!stats->codecid)"
    },
    {
        "line": 48,
        "fullcodeline": "if (!stats->stream_type)"
    },
    {
        "line": 67,
        "fullcodeline": "if (pidi->pid && (pidi->pid->stream_type==GF_STREAM_FILE))"
    },
    {
        "line": 76,
        "fullcodeline": "if (!pidi->pid)"
    },
    {
        "line": 79,
        "fullcodeline": "if (!stats->codecid)"
    },
    {
        "line": 41,
        "fullcodeline": "if (pid->last_ts_sent.num * stats->last_ts_sent.den >= stats->last_ts_sent.num * pid->last_ts_sent.den)"
    },
    {
        "line": 47,
        "fullcodeline": "stats->codecid = pid->codecid;"
    },
    {
        "line": 49,
        "fullcodeline": "stats->stream_type = pid->stream_type;"
    },
    {
        "line": 52,
        "fullcodeline": "if (set_name && strncmp(pid->name, \"PID\", 3)) {"
    },
    {
        "line": 54,
        "fullcodeline": "set_name = GF_FALSE;"
    },
    {
        "line": 64,
        "fullcodeline": "if (pidi->is_decoder_input) stats->type = GF_FS_STATS_FILTER_DECODE;"
    },
    {
        "line": 68,
        "fullcodeline": "stats->type = GF_FS_STATS_FILTER_DEMUX;"
    },
    {
        "line": 70,
        "fullcodeline": "if (pidi->last_ts_drop.num * stats->last_ts_drop.den >= stats->last_ts_drop.num * pidi->last_ts_drop.den)"
    },
    {
        "line": 73,
        "fullcodeline": "if ((f->num_input_pids!=1) && f->num_output_pids)"
    },
    {
        "line": 80,
        "fullcodeline": "stats->codecid = pidi->pid->codecid;"
    },
    {
        "line": 82,
        "fullcodeline": "stats->stream_type = pidi->pid->stream_type;"
    },
    {
        "line": 92,
        "fullcodeline": "stats->type = GF_FS_STATS_FILTER_MEDIA_SINK;"
    },
    {
        "line": 33,
        "fullcodeline": "else if (!stats->nb_pid_in && stats->nb_pid_out) stats->type = GF_FS_STATS_FILTER_RAWIN;"
    },
    {
        "line": 65,
        "fullcodeline": "else if (pidi->is_encoder_input) stats->type = GF_FS_STATS_FILTER_ENCODE;"
    },
    {
        "line": 94,
        "fullcodeline": "stats->type = GF_FS_STATS_FILTER_MEDIA_SOURCE;"
    }
]