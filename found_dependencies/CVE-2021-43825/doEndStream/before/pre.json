[
    {
        "line": 8,
        "fullcodeline": "bool reset_stream = false;"
    },
    {
        "line": 52,
        "fullcodeline": "bool http_10_sans_cl = (codec_->protocol() == Protocol::Http10) &&"
    },
    {
        "line": 56,
        "fullcodeline": "bool connection_close = stream.state_.saw_connection_close_;"
    },
    {
        "line": 57,
        "fullcodeline": "bool request_complete = stream.filter_manager_.remoteComplete();"
    },
    {
        "line": 59,
        "fullcodeline": "checkForDeferredClose(connection_close && (request_complete || http_10_sans_cl));"
    },
    {
        "line": 13,
        "fullcodeline": "if (stream.response_encoder_ != nullptr &&"
    },
    {
        "line": 42,
        "fullcodeline": "if (!reset_stream) {"
    },
    {
        "line": 46,
        "fullcodeline": "if (reset_stream && codec_->protocol() < Protocol::Http2) {"
    },
    {
        "line": 14,
        "fullcodeline": "(!stream.filter_manager_.remoteComplete() || !stream.state_.codec_saw_local_complete_)) {"
    },
    {
        "line": 17,
        "fullcodeline": "ENVOY_STREAM_LOG(debug, \"doEndStream() resetting stream\", stream);"
    },
    {
        "line": 19,
        "fullcodeline": "stream.filter_manager_.setLocalComplete();"
    },
    {
        "line": 20,
        "fullcodeline": "stream.state_.codec_saw_local_complete_ = true;"
    },
    {
        "line": 39,
        "fullcodeline": "reset_stream = true;"
    },
    {
        "line": 43,
        "fullcodeline": "doDeferredStreamDestroy(stream);"
    },
    {
        "line": 47,
        "fullcodeline": "drain_state_ = DrainState::Closing;"
    },
    {
        "line": 53,
        "fullcodeline": "(!stream.response_headers_ || !stream.response_headers_->ContentLength());"
    },
    {
        "line": 25,
        "fullcodeline": "if (requestWasConnect(stream.request_headers_, codec_->protocol()) &&"
    },
    {
        "line": 26,
        "fullcodeline": "(stream.filter_manager_.streamInfo().hasResponseFlag("
    },
    {
        "line": 30,
        "fullcodeline": "stream.response_encoder_->getStream().resetStream(StreamResetReason::ConnectError);"
    },
    {
        "line": 28,
        "fullcodeline": "stream.filter_manager_.streamInfo().hasResponseFlag("
    },
    {
        "line": 32,
        "fullcodeline": "if (stream.filter_manager_.streamInfo().hasResponseFlag("
    },
    {
        "line": 34,
        "fullcodeline": "stream.response_encoder_->getStream().resetStream(StreamResetReason::ProtocolError);"
    },
    {
        "line": 36,
        "fullcodeline": "stream.response_encoder_->getStream().resetStream(StreamResetReason::LocalReset);"
    }
]