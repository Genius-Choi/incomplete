[
    {
        "line": 3,
        "fullcodeline": "struct bpf_reg_state *regs = cur_regs(env);"
    },
    {
        "line": 4,
        "fullcodeline": "u8 opcode = BPF_OP(insn->code);"
    },
    {
        "line": 7,
        "fullcodeline": "if (opcode == BPF_END || opcode == BPF_NEG) {"
    },
    {
        "line": 25,
        "fullcodeline": "err = check_reg_arg(env, insn->dst_reg, SRC_OP);"
    },
    {
        "line": 36,
        "fullcodeline": "err = check_reg_arg(env, insn->dst_reg, DST_OP);"
    },
    {
        "line": 8,
        "fullcodeline": "if (opcode == BPF_NEG) {"
    },
    {
        "line": 29,
        "fullcodeline": "if (is_pointer_value(env, insn->dst_reg)) {"
    },
    {
        "line": 40,
        "fullcodeline": "} else if (opcode == BPF_MOV) {"
    },
    {
        "line": 9,
        "fullcodeline": "if (BPF_SRC(insn->code) != 0 ||"
    },
    {
        "line": 32,
        "fullcodeline": "return -EACCES;"
    },
    {
        "line": 60,
        "fullcodeline": "err = check_reg_arg(env, insn->dst_reg, DST_OP);"
    },
    {
        "line": 11,
        "fullcodeline": "insn->off != 0 || insn->imm != 0) {"
    },
    {
        "line": 12,
        "fullcodeline": "verbose(env, \"BPF_NEG uses reserved fields\\n\");"
    },
    {
        "line": 42,
        "fullcodeline": "if (BPF_SRC(insn->code) == BPF_X) {"
    },
    {
        "line": 13,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 16,
        "fullcodeline": "if (insn->src_reg != BPF_REG_0 || insn->off != 0 ||"
    },
    {
        "line": 18,
        "fullcodeline": "BPF_CLASS(insn->code) == BPF_ALU64) {"
    },
    {
        "line": 49,
        "fullcodeline": "err = check_reg_arg(env, insn->src_reg, SRC_OP);"
    },
    {
        "line": 64,
        "fullcodeline": "if (BPF_SRC(insn->code) == BPF_X) {"
    },
    {
        "line": 93,
        "fullcodeline": "} else if (opcode > BPF_END) {"
    },
    {
        "line": 10,
        "fullcodeline": "insn->src_reg != BPF_REG_0 ||"
    },
    {
        "line": 17,
        "fullcodeline": "(insn->imm != 16 && insn->imm != 32 && insn->imm != 64) ||"
    },
    {
        "line": 20,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 89,
        "fullcodeline": "regs[insn->dst_reg].type = SCALAR_VALUE;"
    },
    {
        "line": 43,
        "fullcodeline": "if (insn->imm != 0 || insn->off != 0) {"
    },
    {
        "line": 65,
        "fullcodeline": "if (BPF_CLASS(insn->code) == BPF_ALU64) {"
    },
    {
        "line": 70,
        "fullcodeline": "regs[insn->dst_reg].live |= REG_LIVE_WRITTEN;"
    },
    {
        "line": 95,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 116,
        "fullcodeline": "err = check_reg_arg(env, insn->dst_reg, SRC_OP);"
    },
    {
        "line": 137,
        "fullcodeline": "err = check_reg_arg(env, insn->dst_reg, DST_OP_NO_MARK);"
    },
    {
        "line": 45,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 53,
        "fullcodeline": "if (insn->src_reg != BPF_REG_0 || insn->off != 0) {"
    },
    {
        "line": 79,
        "fullcodeline": "mark_reg_unknown(env, regs, insn->dst_reg);"
    },
    {
        "line": 81,
        "fullcodeline": "regs[insn->dst_reg].var_off = tnum_cast("
    },
    {
        "line": 141,
        "fullcodeline": "return adjust_reg_min_max_vals(env, insn);"
    },
    {
        "line": 55,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 73,
        "fullcodeline": "if (is_pointer_value(env, insn->src_reg)) {"
    },
    {
        "line": 99,
        "fullcodeline": "if (BPF_SRC(insn->code) == BPF_X) {"
    },
    {
        "line": 105,
        "fullcodeline": "err = check_reg_arg(env, insn->src_reg, SRC_OP);"
    },
    {
        "line": 120,
        "fullcodeline": "if ((opcode == BPF_MOD || opcode == BPF_DIV) &&"
    },
    {
        "line": 121,
        "fullcodeline": "BPF_SRC(insn->code) == BPF_K && insn->imm == 0) {"
    },
    {
        "line": 126,
        "fullcodeline": "if ((opcode == BPF_LSH || opcode == BPF_RSH ||"
    },
    {
        "line": 127,
        "fullcodeline": "opcode == BPF_ARSH) && BPF_SRC(insn->code) == BPF_K) {"
    },
    {
        "line": 128,
        "fullcodeline": "int size = BPF_CLASS(insn->code) == BPF_ALU64 ? 64 : 32;"
    },
    {
        "line": 123,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 77,
        "fullcodeline": "return -EACCES;"
    },
    {
        "line": 100,
        "fullcodeline": "if (insn->imm != 0 || insn->off != 0) {"
    },
    {
        "line": 130,
        "fullcodeline": "if (insn->imm < 0 || insn->imm >= size) {"
    },
    {
        "line": 102,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 109,
        "fullcodeline": "if (insn->src_reg != BPF_REG_0 || insn->off != 0) {"
    },
    {
        "line": 132,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 111,
        "fullcodeline": "return -EINVAL;"
    }
]