[
    {
        "line": 3,
        "fullcodeline": "opj_image_cmptparm_t cmptparm[4];\t/* maximum of 4 components */"
    },
    {
        "line": 4,
        "fullcodeline": "OPJ_UINT8 lut_R[256], lut_G[256], lut_B[256];"
    },
    {
        "line": 5,
        "fullcodeline": "OPJ_UINT8 const* pLUT[3];"
    },
    {
        "line": 6,
        "fullcodeline": "opj_image_t * image = NULL;"
    },
    {
        "line": 10,
        "fullcodeline": "OPJ_UINT32 i, palette_len, numcmpts = 1U;"
    },
    {
        "line": 11,
        "fullcodeline": "OPJ_BOOL l_result = OPJ_FALSE;"
    },
    {
        "line": 12,
        "fullcodeline": "OPJ_UINT8* pData = NULL;"
    },
    {
        "line": 15,
        "fullcodeline": "pLUT[0] = lut_R; pLUT[1] = lut_G; pLUT[2] = lut_B;"
    },
    {
        "line": 17,
        "fullcodeline": "IN = fopen(filename, \"rb\");"
    },
    {
        "line": 67,
        "fullcodeline": "stride = ((Info_h.biWidth * Info_h.biBitCount + 31U) / 32U) * 4U; /* rows are aligned on 32bits */"
    },
    {
        "line": 71,
        "fullcodeline": "pData = (OPJ_UINT8 *) calloc(1, stride * Info_h.biHeight * sizeof(OPJ_UINT8));"
    },
    {
        "line": 77,
        "fullcodeline": "fseek(IN, 0, SEEK_SET);"
    },
    {
        "line": 78,
        "fullcodeline": "fseek(IN, (long)File_h.bfOffBits, SEEK_SET);"
    },
    {
        "line": 106,
        "fullcodeline": "memset(&cmptparm[0], 0, sizeof(cmptparm));"
    },
    {
        "line": 118,
        "fullcodeline": "image = opj_image_create(numcmpts, &cmptparm[0], (numcmpts == 1U) ? OPJ_CLRSPC_GRAY : OPJ_CLRSPC_SRGB);"
    },
    {
        "line": 129,
        "fullcodeline": "image->x0 = (OPJ_UINT32)parameters->image_offset_x0;"
    },
    {
        "line": 130,
        "fullcodeline": "image->y0 = (OPJ_UINT32)parameters->image_offset_y0;"
    },
    {
        "line": 131,
        "fullcodeline": "image->x1 =\timage->x0 + (Info_h.biWidth  - 1U) * (OPJ_UINT32)parameters->subsampling_dx + 1U;"
    },
    {
        "line": 132,
        "fullcodeline": "image->y1 = image->y0 + (Info_h.biHeight - 1U) * (OPJ_UINT32)parameters->subsampling_dy + 1U;"
    },
    {
        "line": 169,
        "fullcodeline": "free(pData);"
    },
    {
        "line": 170,
        "fullcodeline": "fclose(IN);"
    },
    {
        "line": 18,
        "fullcodeline": "if (!IN)"
    },
    {
        "line": 24,
        "fullcodeline": "if (!bmp_read_file_header(IN, &File_h)) {"
    },
    {
        "line": 28,
        "fullcodeline": "if (!bmp_read_info_header(IN, &Info_h)) {"
    },
    {
        "line": 34,
        "fullcodeline": "if (Info_h.biBitCount <= 8U)"
    },
    {
        "line": 68,
        "fullcodeline": "if (Info_h.biBitCount == 4 && Info_h.biCompression == 2) { /* RLE 4 gets decoded as 8 bits data for now... */"
    },
    {
        "line": 72,
        "fullcodeline": "if (pData == NULL) {"
    },
    {
        "line": 99,
        "fullcodeline": "if (!l_result) {"
    },
    {
        "line": 107,
        "fullcodeline": "for(i = 0; i < 4U; i++)"
    },
    {
        "line": 119,
        "fullcodeline": "if(!image) {"
    },
    {
        "line": 124,
        "fullcodeline": "if (numcmpts == 4U) {"
    },
    {
        "line": 135,
        "fullcodeline": "if (Info_h.biBitCount == 24 && Info_h.biCompression == 0) { /*RGB */"
    },
    {
        "line": 20,
        "fullcodeline": "fprintf(stderr, \"Failed to open %s for reading !!\\n\", filename);"
    },
    {
        "line": 25,
        "fullcodeline": "fclose(IN);"
    },
    {
        "line": 29,
        "fullcodeline": "fclose(IN);"
    },
    {
        "line": 36,
        "fullcodeline": "memset(&lut_R[0], 0, sizeof(lut_R));"
    },
    {
        "line": 37,
        "fullcodeline": "memset(&lut_G[0], 0, sizeof(lut_G));"
    },
    {
        "line": 38,
        "fullcodeline": "memset(&lut_B[0], 0, sizeof(lut_B));"
    },
    {
        "line": 40,
        "fullcodeline": "palette_len = Info_h.biClrUsed;"
    },
    {
        "line": 69,
        "fullcodeline": "stride = ((Info_h.biWidth * 8U + 31U) / 32U) * 4U;"
    },
    {
        "line": 73,
        "fullcodeline": "fclose(IN);"
    },
    {
        "line": 84,
        "fullcodeline": "l_result = bmp_read_raw_data(IN, pData, stride, Info_h.biWidth, Info_h.biHeight);"
    },
    {
        "line": 88,
        "fullcodeline": "l_result = bmp_read_rle8_data(IN, pData, stride, Info_h.biWidth, Info_h.biHeight);"
    },
    {
        "line": 92,
        "fullcodeline": "l_result = bmp_read_rle4_data(IN, pData, stride, Info_h.biWidth, Info_h.biHeight);"
    },
    {
        "line": 95,
        "fullcodeline": "fprintf(stderr, \"Unsupported BMP compression\\n\");"
    },
    {
        "line": 96,
        "fullcodeline": "l_result = OPJ_FALSE;"
    },
    {
        "line": 100,
        "fullcodeline": "free(pData);"
    },
    {
        "line": 101,
        "fullcodeline": "fclose(IN);"
    },
    {
        "line": 109,
        "fullcodeline": "cmptparm[i].prec = 8;"
    },
    {
        "line": 110,
        "fullcodeline": "cmptparm[i].bpp  = 8;"
    },
    {
        "line": 111,
        "fullcodeline": "cmptparm[i].sgnd = 0;"
    },
    {
        "line": 112,
        "fullcodeline": "cmptparm[i].dx   = (OPJ_UINT32)parameters->subsampling_dx;"
    },
    {
        "line": 113,
        "fullcodeline": "cmptparm[i].dy   = (OPJ_UINT32)parameters->subsampling_dy;"
    },
    {
        "line": 114,
        "fullcodeline": "cmptparm[i].w    = Info_h.biWidth;"
    },
    {
        "line": 115,
        "fullcodeline": "cmptparm[i].h    = Info_h.biHeight;"
    },
    {
        "line": 120,
        "fullcodeline": "fclose(IN);"
    },
    {
        "line": 121,
        "fullcodeline": "free(pData);"
    },
    {
        "line": 125,
        "fullcodeline": "image->comps[3].alpha = 1;"
    },
    {
        "line": 136,
        "fullcodeline": "bmp24toimage(pData, stride, image);"
    },
    {
        "line": 41,
        "fullcodeline": "if((palette_len == 0U) && (Info_h.biBitCount <= 8U)) {"
    },
    {
        "line": 44,
        "fullcodeline": "if (palette_len > 256U) {"
    },
    {
        "line": 47,
        "fullcodeline": "if (palette_len > 0U) {"
    },
    {
        "line": 61,
        "fullcodeline": "numcmpts = 3U;"
    },
    {
        "line": 42,
        "fullcodeline": "palette_len = (1U << Info_h.biBitCount);"
    },
    {
        "line": 45,
        "fullcodeline": "palette_len = 256U;"
    },
    {
        "line": 48,
        "fullcodeline": "OPJ_UINT8 has_color = 0U;"
    },
    {
        "line": 62,
        "fullcodeline": "if ((Info_h.biCompression == 3) && (Info_h.biAlphaMask != 0U)) {"
    },
    {
        "line": 138,
        "fullcodeline": "else if (Info_h.biBitCount == 8 && Info_h.biCompression == 0) { /* RGB 8bpp Indexed */"
    },
    {
        "line": 49,
        "fullcodeline": "for (i = 0U; i < palette_len; i++) {"
    },
    {
        "line": 63,
        "fullcodeline": "numcmpts++;"
    },
    {
        "line": 139,
        "fullcodeline": "bmp8toimage(pData, stride, image, pLUT);"
    },
    {
        "line": 54,
        "fullcodeline": "has_color |= (lut_B[i] ^ lut_G[i]) | (lut_G[i] ^ lut_R[i]);"
    },
    {
        "line": 57,
        "fullcodeline": "numcmpts = 3U;"
    },
    {
        "line": 53,
        "fullcodeline": "(void)getc(IN); /* padding */"
    },
    {
        "line": 141,
        "fullcodeline": "else if (Info_h.biBitCount == 8 && Info_h.biCompression == 1) { /*RLE8*/"
    },
    {
        "line": 50,
        "fullcodeline": "lut_B[i] = (OPJ_UINT8)getc(IN);"
    },
    {
        "line": 51,
        "fullcodeline": "lut_G[i] = (OPJ_UINT8)getc(IN);"
    },
    {
        "line": 52,
        "fullcodeline": "lut_R[i] = (OPJ_UINT8)getc(IN);"
    },
    {
        "line": 142,
        "fullcodeline": "bmp8toimage(pData, stride, image, pLUT);"
    },
    {
        "line": 144,
        "fullcodeline": "else if (Info_h.biBitCount == 4 && Info_h.biCompression == 2) { /*RLE4*/"
    },
    {
        "line": 145,
        "fullcodeline": "bmp8toimage(pData, stride, image, pLUT); /* RLE 4 gets decoded as 8 bits data for now */"
    },
    {
        "line": 147,
        "fullcodeline": "else if (Info_h.biBitCount == 32 && Info_h.biCompression == 0) { /* RGBX */"
    },
    {
        "line": 148,
        "fullcodeline": "bmpmask32toimage(pData, stride, image, 0x00FF0000U, 0x0000FF00U, 0x000000FFU, 0x00000000U);"
    },
    {
        "line": 150,
        "fullcodeline": "else if (Info_h.biBitCount == 32 && Info_h.biCompression == 3) { /* bitmask */"
    },
    {
        "line": 151,
        "fullcodeline": "bmpmask32toimage(pData, stride, image, Info_h.biRedMask, Info_h.biGreenMask, Info_h.biBlueMask, Info_h.biAlphaMask);"
    },
    {
        "line": 153,
        "fullcodeline": "else if (Info_h.biBitCount == 16 && Info_h.biCompression == 0) { /* RGBX */"
    },
    {
        "line": 154,
        "fullcodeline": "bmpmask16toimage(pData, stride, image, 0x7C00U, 0x03E0U, 0x001FU, 0x0000U);"
    },
    {
        "line": 156,
        "fullcodeline": "else if (Info_h.biBitCount == 16 && Info_h.biCompression == 3) { /* bitmask */"
    },
    {
        "line": 162,
        "fullcodeline": "bmpmask16toimage(pData, stride, image, Info_h.biRedMask, Info_h.biGreenMask, Info_h.biBlueMask, Info_h.biAlphaMask);"
    },
    {
        "line": 157,
        "fullcodeline": "if ((Info_h.biRedMask == 0U) && (Info_h.biGreenMask == 0U) && (Info_h.biBlueMask == 0U)) {"
    },
    {
        "line": 165,
        "fullcodeline": "opj_image_destroy(image);"
    },
    {
        "line": 166,
        "fullcodeline": "image = NULL;"
    },
    {
        "line": 167,
        "fullcodeline": "fprintf(stderr, \"Other system than 24 bits/pixels or 8 bits (no RLE coding) is not yet implemented [%d]\\n\", Info_h.biBitCount);"
    },
    {
        "line": 158,
        "fullcodeline": "Info_h.biRedMask   = 0xF800U;"
    },
    {
        "line": 159,
        "fullcodeline": "Info_h.biGreenMask = 0x07E0U;"
    },
    {
        "line": 160,
        "fullcodeline": "Info_h.biBlueMask  = 0x001FU;"
    }
]