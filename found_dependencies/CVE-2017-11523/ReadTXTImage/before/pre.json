[
    {
        "line": 4,
        "fullcodeline": "colorspace[MagickPathExtent],"
    },
    {
        "line": 5,
        "fullcodeline": "text[MagickPathExtent];"
    },
    {
        "line": 44,
        "fullcodeline": "assert(image_info != (const ImageInfo *) NULL);"
    },
    {
        "line": 45,
        "fullcodeline": "assert(image_info->signature == MagickCoreSignature);"
    },
    {
        "line": 49,
        "fullcodeline": "assert(exception != (ExceptionInfo *) NULL);"
    },
    {
        "line": 50,
        "fullcodeline": "assert(exception->signature == MagickCoreSignature);"
    },
    {
        "line": 51,
        "fullcodeline": "image=AcquireImage(image_info,exception);"
    },
    {
        "line": 52,
        "fullcodeline": "status=OpenBlob(image_info,image,ReadBinaryBlobMode,exception);"
    },
    {
        "line": 46,
        "fullcodeline": "if (image_info->debug != MagickFalse)"
    },
    {
        "line": 53,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 58,
        "fullcodeline": "(void) ResetMagickMemory(text,0,sizeof(text));"
    },
    {
        "line": 59,
        "fullcodeline": "(void) ReadBlobString(image,text);"
    },
    {
        "line": 210,
        "fullcodeline": "(void) CloseBlob(image);"
    },
    {
        "line": 211,
        "fullcodeline": "return(GetFirstImageInList(image));"
    },
    {
        "line": 47,
        "fullcodeline": "(void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\","
    },
    {
        "line": 55,
        "fullcodeline": "image=DestroyImageList(image);"
    },
    {
        "line": 60,
        "fullcodeline": "if (LocaleNCompare((char *) text,MagickID,strlen(MagickID)) != 0)"
    },
    {
        "line": 61,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 64,
        "fullcodeline": "width=0;"
    },
    {
        "line": 65,
        "fullcodeline": "height=0;"
    },
    {
        "line": 66,
        "fullcodeline": "max_value=0;"
    },
    {
        "line": 67,
        "fullcodeline": "*colorspace='\\0';"
    },
    {
        "line": 68,
        "fullcodeline": "count=(ssize_t) sscanf(text+32,\"%lu,%lu,%lu,%s\",&width,&height,&max_value,"
    },
    {
        "line": 72,
        "fullcodeline": "image->columns=width;"
    },
    {
        "line": 73,
        "fullcodeline": "image->rows=height;"
    },
    {
        "line": 75,
        "fullcodeline": "image->depth=depth;"
    },
    {
        "line": 76,
        "fullcodeline": "status=SetImageExtent(image,image->columns,image->rows,exception);"
    },
    {
        "line": 79,
        "fullcodeline": "LocaleLower(colorspace);"
    },
    {
        "line": 80,
        "fullcodeline": "i=(ssize_t) strlen(colorspace)-1;"
    },
    {
        "line": 81,
        "fullcodeline": "image->alpha_trait=UndefinedPixelTrait;"
    },
    {
        "line": 87,
        "fullcodeline": "type=ParseCommandOption(MagickColorspaceOptions,MagickFalse,colorspace);"
    },
    {
        "line": 92,
        "fullcodeline": "GetPixelInfo(image,&pixel);"
    },
    {
        "line": 93,
        "fullcodeline": "range=GetQuantumRange(image->depth);"
    },
    {
        "line": 209,
        "fullcodeline": "} while (LocaleNCompare((char *) text,MagickID,strlen(MagickID)) == 0);"
    },
    {
        "line": 56,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 74,
        "fullcodeline": "for (depth=1; (GetQuantumRange(depth)+1) < max_value; depth++) ;"
    },
    {
        "line": 77,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 88,
        "fullcodeline": "if (type < 0)"
    },
    {
        "line": 90,
        "fullcodeline": "(void) SetImageBackgroundColor(image,exception);"
    },
    {
        "line": 91,
        "fullcodeline": "(void) SetImageColorspace(image,(ColorspaceType) type,exception);"
    },
    {
        "line": 94,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 191,
        "fullcodeline": "(void) ReadBlobString(image,text);"
    },
    {
        "line": 70,
        "fullcodeline": "if ((count != 4) || (width == 0) || (height == 0) || (max_value == 0))"
    },
    {
        "line": 71,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 82,
        "fullcodeline": "if ((i > 0) && (colorspace[i] == 'a'))"
    },
    {
        "line": 84,
        "fullcodeline": "colorspace[i]='\\0';"
    },
    {
        "line": 85,
        "fullcodeline": "image->alpha_trait=BlendPixelTrait;"
    },
    {
        "line": 89,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 103,
        "fullcodeline": "red=0.0;"
    },
    {
        "line": 104,
        "fullcodeline": "green=0.0;"
    },
    {
        "line": 105,
        "fullcodeline": "blue=0.0;"
    },
    {
        "line": 106,
        "fullcodeline": "black=0.0;"
    },
    {
        "line": 107,
        "fullcodeline": "alpha=0.0;"
    },
    {
        "line": 192,
        "fullcodeline": "if (LocaleNCompare((char *) text,MagickID,strlen(MagickID)) == 0)"
    },
    {
        "line": 197,
        "fullcodeline": "AcquireNextImage(image_info,image,exception);"
    },
    {
        "line": 203,
        "fullcodeline": "image=SyncNextImageInList(image);"
    },
    {
        "line": 204,
        "fullcodeline": "status=SetImageProgress(image,LoadImagesTag,TellBlob(image),"
    },
    {
        "line": 78,
        "fullcodeline": "return(DestroyImageList(image));"
    },
    {
        "line": 108,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 206,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 172,
        "fullcodeline": "pixel.red=(MagickRealType) ScaleAnyToQuantum((QuantumAny) (red+0.5),"
    },
    {
        "line": 174,
        "fullcodeline": "pixel.green=(MagickRealType) ScaleAnyToQuantum((QuantumAny) (green+0.5),"
    },
    {
        "line": 176,
        "fullcodeline": "pixel.blue=(MagickRealType) ScaleAnyToQuantum((QuantumAny) (blue+0.5),"
    },
    {
        "line": 178,
        "fullcodeline": "pixel.black=(MagickRealType) ScaleAnyToQuantum((QuantumAny) (black+0.5),"
    },
    {
        "line": 180,
        "fullcodeline": "pixel.alpha=(MagickRealType) ScaleAnyToQuantum((QuantumAny) (alpha+0.5),"
    },
    {
        "line": 182,
        "fullcodeline": "q=GetAuthenticPixels(image,(ssize_t) x_offset,(ssize_t) y_offset,1,1,"
    },
    {
        "line": 186,
        "fullcodeline": "SetPixelViaPixelInfo(image,&pixel,q);"
    },
    {
        "line": 198,
        "fullcodeline": "if (GetNextImageInList(image) == (Image *) NULL)"
    },
    {
        "line": 205,
        "fullcodeline": "GetBlobSize(image));"
    },
    {
        "line": 167,
        "fullcodeline": "if (image->colorspace == LabColorspace)"
    },
    {
        "line": 184,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 187,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 200,
        "fullcodeline": "image=DestroyImageList(image);"
    },
    {
        "line": 201,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 110,
        "fullcodeline": "if (ReadBlobString(image,text) == (char *) NULL)"
    },
    {
        "line": 159,
        "fullcodeline": "if (strchr(text,'%') != (char *) NULL)"
    },
    {
        "line": 161,
        "fullcodeline": "red*=0.01*range;"
    },
    {
        "line": 162,
        "fullcodeline": "green*=0.01*range;"
    },
    {
        "line": 163,
        "fullcodeline": "blue*=0.01*range;"
    },
    {
        "line": 164,
        "fullcodeline": "black*=0.01*range;"
    },
    {
        "line": 165,
        "fullcodeline": "alpha*=0.01*range;"
    },
    {
        "line": 169,
        "fullcodeline": "green+=(range+1)/2.0;"
    },
    {
        "line": 170,
        "fullcodeline": "blue+=(range+1)/2.0;"
    },
    {
        "line": 126,
        "fullcodeline": "green=red;"
    },
    {
        "line": 127,
        "fullcodeline": "blue=red;"
    },
    {
        "line": 116,
        "fullcodeline": "if (image->alpha_trait != UndefinedPixelTrait)"
    },
    {
        "line": 132,
        "fullcodeline": "if (image->alpha_trait != UndefinedPixelTrait)"
    },
    {
        "line": 146,
        "fullcodeline": "if (image->alpha_trait != UndefinedPixelTrait)"
    },
    {
        "line": 120,
        "fullcodeline": "green=red;"
    },
    {
        "line": 121,
        "fullcodeline": "blue=red;"
    },
    {
        "line": 124,
        "fullcodeline": "count=(ssize_t) sscanf(text,\"%ld,%ld: (%lf%*[%,]\",&x_offset,"
    },
    {
        "line": 139,
        "fullcodeline": "count=(ssize_t) sscanf(text,"
    },
    {
        "line": 153,
        "fullcodeline": "count=(ssize_t) sscanf(text,"
    },
    {
        "line": 118,
        "fullcodeline": "count=(ssize_t) sscanf(text,\"%ld,%ld: (%lf%*[%,]%lf%*[%,]\","
    },
    {
        "line": 134,
        "fullcodeline": "count=(ssize_t) sscanf(text,"
    },
    {
        "line": 148,
        "fullcodeline": "count=(ssize_t) sscanf(text,"
    }
]