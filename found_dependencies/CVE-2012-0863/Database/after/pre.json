[
    {
        "line": 2,
        "fullcodeline": "QSqlDatabase db = QSqlDatabase::addDatabase(QLatin1String(\"QSQLITE\"));"
    },
    {
        "line": 7,
        "fullcodeline": "datapaths << g.qdBasePath.absolutePath();"
    },
    {
        "line": 8,
        "fullcodeline": "datapaths << QDesktopServices::storageLocation(QDesktopServices::DataLocation);"
    },
    {
        "line": 12,
        "fullcodeline": "datapaths << QDir::homePath();"
    },
    {
        "line": 13,
        "fullcodeline": "datapaths << QDir::currentPath();"
    },
    {
        "line": 14,
        "fullcodeline": "datapaths << qApp->applicationDirPath();"
    },
    {
        "line": 15,
        "fullcodeline": "datapaths << qs.value(QLatin1String(\"InstPath\")).toString();"
    },
    {
        "line": 16,
        "fullcodeline": "bool found = false;"
    },
    {
        "line": 54,
        "fullcodeline": "QFileInfo fi(db.databaseName());"
    },
    {
        "line": 69,
        "fullcodeline": "query.exec(QLatin1String(\"ALTER TABLE `servers` ADD COLUMN `url` TEXT\"));"
    },
    {
        "line": 71,
        "fullcodeline": "query.exec(QLatin1String(\"CREATE TABLE IF NOT EXISTS `comments` (`who` TEXT, `comment` BLOB, `seen` DATE)\"));"
    },
    {
        "line": 72,
        "fullcodeline": "query.exec(QLatin1String(\"CREATE UNIQUE INDEX IF NOT EXISTS `comments_comment` ON `comments`(`who`, `comment`)\"));"
    },
    {
        "line": 73,
        "fullcodeline": "query.exec(QLatin1String(\"CREATE INDEX IF NOT EXISTS `comments_seen` ON `comments`(`seen`)\"));"
    },
    {
        "line": 75,
        "fullcodeline": "query.exec(QLatin1String(\"CREATE TABLE IF NOT EXISTS `blobs` (`hash` TEXT, `data` BLOB, `seen` DATE)\"));"
    },
    {
        "line": 76,
        "fullcodeline": "query.exec(QLatin1String(\"CREATE UNIQUE INDEX IF NOT EXISTS `blobs_hash` ON `blobs`(`hash`)\"));"
    },
    {
        "line": 77,
        "fullcodeline": "query.exec(QLatin1String(\"CREATE INDEX IF NOT EXISTS `blobs_seen` ON `blobs`(`seen`)\"));"
    },
    {
        "line": 79,
        "fullcodeline": "query.exec(QLatin1String(\"CREATE TABLE IF NOT EXISTS `tokens` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `digest` BLOB, `token` TEXT)\"));"
    },
    {
        "line": 80,
        "fullcodeline": "query.exec(QLatin1String(\"CREATE INDEX IF NOT EXISTS `tokens_host_port` ON `tokens`(`digest`)\"));"
    },
    {
        "line": 82,
        "fullcodeline": "query.exec(QLatin1String(\"CREATE TABLE IF NOT EXISTS `shortcut` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `digest` BLOB, `shortcut` BLOB, `target` BLOB, `suppress` INTEGER)\"));"
    },
    {
        "line": 83,
        "fullcodeline": "query.exec(QLatin1String(\"CREATE INDEX IF NOT EXISTS `shortcut_host_port` ON `shortcut`(`digest`)\"));"
    },
    {
        "line": 85,
        "fullcodeline": "query.exec(QLatin1String(\"CREATE TABLE IF NOT EXISTS `udp` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `digest` BLOB)\"));"
    },
    {
        "line": 86,
        "fullcodeline": "query.exec(QLatin1String(\"CREATE UNIQUE INDEX IF NOT EXISTS `udp_host_port` ON `udp`(`digest`)\"));"
    },
    {
        "line": 88,
        "fullcodeline": "query.exec(QLatin1String(\"CREATE TABLE IF NOT EXISTS `cert` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `hostname` TEXT, `port` INTEGER, `digest` TEXT)\"));"
    },
    {
        "line": 89,
        "fullcodeline": "query.exec(QLatin1String(\"CREATE UNIQUE INDEX IF NOT EXISTS `cert_host_port` ON `cert`(`hostname`,`port`)\"));"
    },
    {
        "line": 91,
        "fullcodeline": "query.exec(QLatin1String(\"CREATE TABLE IF NOT EXISTS `friends` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `name` TEXT, `hash` TEXT)\"));"
    },
    {
        "line": 92,
        "fullcodeline": "query.exec(QLatin1String(\"CREATE UNIQUE INDEX IF NOT EXISTS `friends_name` ON `friends`(`name`)\"));"
    },
    {
        "line": 93,
        "fullcodeline": "query.exec(QLatin1String(\"CREATE UNIQUE INDEX IF NOT EXISTS `friends_hash` ON `friends`(`hash`)\"));"
    },
    {
        "line": 95,
        "fullcodeline": "query.exec(QLatin1String(\"CREATE TABLE IF NOT EXISTS `muted` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `hash` TEXT)\"));"
    },
    {
        "line": 96,
        "fullcodeline": "query.exec(QLatin1String(\"CREATE UNIQUE INDEX IF NOT EXISTS `muted_hash` ON `muted`(`hash`)\"));"
    },
    {
        "line": 98,
        "fullcodeline": "query.exec(QLatin1String(\"CREATE TABLE IF NOT EXISTS `pingcache` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `hostname` TEXT, `port` INTEGER, `ping` INTEGER)\"));"
    },
    {
        "line": 99,
        "fullcodeline": "query.exec(QLatin1String(\"CREATE UNIQUE INDEX IF NOT EXISTS `pingcache_host_port` ON `pingcache`(`hostname`,`port`)\"));"
    },
    {
        "line": 101,
        "fullcodeline": "query.exec(QLatin1String(\"DELETE FROM `comments` WHERE `seen` < datetime('now', '-1 years')\"));"
    },
    {
        "line": 102,
        "fullcodeline": "query.exec(QLatin1String(\"DELETE FROM `blobs` WHERE `seen` < datetime('now', '-1 months')\"));"
    },
    {
        "line": 104,
        "fullcodeline": "query.exec(QLatin1String(\"VACUUM\"));"
    },
    {
        "line": 106,
        "fullcodeline": "query.exec(QLatin1String(\"PRAGMA synchronous = OFF\"));"
    },
    {
        "line": 107,
        "fullcodeline": "query.exec(QLatin1String(\"PRAGMA journal_mode = TRUNCATE\"));"
    },
    {
        "line": 109,
        "fullcodeline": "query.exec(QLatin1String(\"SELECT sqlite_version()\"));"
    },
    {
        "line": 18,
        "fullcodeline": "for (i = 0; (i < datapaths.size()) && ! found; i++) {"
    },
    {
        "line": 34,
        "fullcodeline": "if (! found) {"
    },
    {
        "line": 49,
        "fullcodeline": "if (! found) {"
    },
    {
        "line": 56,
        "fullcodeline": "if (! fi.isWritable()) {"
    },
    {
        "line": 62,
        "fullcodeline": "QFile f(db.databaseName());"
    },
    {
        "line": 63,
        "fullcodeline": "f.setPermissions(f.permissions() & ~(QFile::ReadGroup | QFile::WriteGroup | QFile::ExeGroup | QFile::ReadOther | QFile::WriteOther | QFile::ExeOther));"
    },
    {
        "line": 110,
        "fullcodeline": "while (query.next())"
    },
    {
        "line": 111,
        "fullcodeline": "qWarning() << \"Database SQLite:\" << query.value(0).toString();"
    },
    {
        "line": 50,
        "fullcodeline": "QMessageBox::critical(NULL, QLatin1String(\"Mumble\"), tr(\"Mumble failed to initialize a database in any\\nof the possible locations.\"), QMessageBox::Ok | QMessageBox::Default, QMessageBox::NoButton);"
    },
    {
        "line": 51,
        "fullcodeline": "qFatal(\"Database: Failed initialization\");"
    },
    {
        "line": 57,
        "fullcodeline": "QMessageBox::critical(NULL, QLatin1String(\"Mumble\"), tr(\"The database '%1' is read-only. Mumble cannot store server settings (i.e. SSL certificates) until you fix this problem.\").arg(fi.filePath()), QMessageBox::Ok | QMessageBox::Default, QMessageBox::NoButton);"
    },
    {
        "line": 58,
        "fullcodeline": "qWarning(\"Database: Database is read-only\");"
    },
    {
        "line": 19,
        "fullcodeline": "if (!datapaths[i].isEmpty()) {"
    },
    {
        "line": 35,
        "fullcodeline": "for (i = 0; (i < datapaths.size()) && ! found; i++) {"
    },
    {
        "line": 20,
        "fullcodeline": "QFile f(datapaths[i] + QLatin1String(\"/mumble.sqlite\"));"
    },
    {
        "line": 26,
        "fullcodeline": "QFile f2(datapaths[i] + QLatin1String(\"/.mumble.sqlite\"));"
    },
    {
        "line": 21,
        "fullcodeline": "if (f.exists()) {"
    },
    {
        "line": 27,
        "fullcodeline": "if (f2.exists()) {"
    },
    {
        "line": 36,
        "fullcodeline": "if (!datapaths[i].isEmpty()) {"
    },
    {
        "line": 22,
        "fullcodeline": "db.setDatabaseName(f.fileName());"
    },
    {
        "line": 23,
        "fullcodeline": "found = db.open();"
    },
    {
        "line": 28,
        "fullcodeline": "db.setDatabaseName(f2.fileName());"
    },
    {
        "line": 29,
        "fullcodeline": "found = db.open();"
    },
    {
        "line": 37,
        "fullcodeline": "QDir::root().mkpath(datapaths[i]);"
    },
    {
        "line": 41,
        "fullcodeline": "QFile f(datapaths[i] + QLatin1String(\"/.mumble.sqlite\"));"
    },
    {
        "line": 43,
        "fullcodeline": "db.setDatabaseName(f.fileName());"
    },
    {
        "line": 44,
        "fullcodeline": "found = db.open();"
    }
]