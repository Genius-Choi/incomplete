[
    {
        "line": 7,
        "fullcodeline": "const char *zSavedAuthContext = pParse->zAuthContext;"
    },
    {
        "line": 14,
        "fullcodeline": "int iNewParent = -1;/* Replacement table for iParent */"
    },
    {
        "line": 15,
        "fullcodeline": "int isLeftJoin = 0; /* True if pSub is the right side of a LEFT JOIN */"
    },
    {
        "line": 19,
        "fullcodeline": "sqlite3 *db = pParse->db;"
    },
    {
        "line": 23,
        "fullcodeline": "assert( p!=0 );"
    },
    {
        "line": 24,
        "fullcodeline": "assert( p->pPrior==0 );"
    },
    {
        "line": 26,
        "fullcodeline": "pSrc = p->pSrc;"
    },
    {
        "line": 27,
        "fullcodeline": "assert( pSrc && iFrom>=0 && iFrom<pSrc->nSrc );"
    },
    {
        "line": 29,
        "fullcodeline": "iParent = pSubitem->iCursor;"
    },
    {
        "line": 30,
        "fullcodeline": "pSub = pSubitem->pSelect;"
    },
    {
        "line": 31,
        "fullcodeline": "assert( pSub!=0 );"
    },
    {
        "line": 37,
        "fullcodeline": "pSubSrc = pSub->pSrc;"
    },
    {
        "line": 38,
        "fullcodeline": "assert( pSubSrc );"
    },
    {
        "line": 144,
        "fullcodeline": "assert( (p->selFlags & SF_Recursive)==0 || pSub->pPrior==0 );"
    },
    {
        "line": 147,
        "fullcodeline": "SELECTTRACE(1,pParse,p,(\"flatten %u.%p from term %d\\n\","
    },
    {
        "line": 151,
        "fullcodeline": "pParse->zAuthContext = pSubitem->zName;"
    },
    {
        "line": 153,
        "fullcodeline": "testcase( i==SQLITE_DENY );"
    },
    {
        "line": 154,
        "fullcodeline": "pParse->zAuthContext = zSavedAuthContext;"
    },
    {
        "line": 219,
        "fullcodeline": "pSub = pSub1 = pSubitem->pSelect;"
    },
    {
        "line": 224,
        "fullcodeline": "sqlite3DbFree(db, pSubitem->zDatabase);"
    },
    {
        "line": 225,
        "fullcodeline": "sqlite3DbFree(db, pSubitem->zName);"
    },
    {
        "line": 226,
        "fullcodeline": "sqlite3DbFree(db, pSubitem->zAlias);"
    },
    {
        "line": 227,
        "fullcodeline": "pSubitem->zDatabase = 0;"
    },
    {
        "line": 228,
        "fullcodeline": "pSubitem->zName = 0;"
    },
    {
        "line": 229,
        "fullcodeline": "pSubitem->zAlias = 0;"
    },
    {
        "line": 230,
        "fullcodeline": "pSubitem->pSelect = 0;"
    },
    {
        "line": 382,
        "fullcodeline": "sqlite3SelectDelete(db, pSub1);"
    },
    {
        "line": 25,
        "fullcodeline": "if( OptimizationDisabled(db, SQLITE_QueryFlattener) ) return 0;"
    },
    {
        "line": 34,
        "fullcodeline": "if( p->pWin || pSub->pWin ) return 0;                  /* Restriction (25) */"
    },
    {
        "line": 44,
        "fullcodeline": "if( pSub->pLimit && p->pLimit ) return 0;              /* Restriction (13) */"
    },
    {
        "line": 45,
        "fullcodeline": "if( pSub->pLimit && pSub->pLimit->pRight ) return 0;   /* Restriction (14) */"
    },
    {
        "line": 46,
        "fullcodeline": "if( (p->selFlags & SF_Compound)!=0 && pSub->pLimit ){"
    },
    {
        "line": 49,
        "fullcodeline": "if( pSubSrc->nSrc==0 ) return 0;                       /* Restriction (7)  */"
    },
    {
        "line": 50,
        "fullcodeline": "if( pSub->selFlags & SF_Distinct ) return 0;           /* Restriction (4)  */"
    },
    {
        "line": 51,
        "fullcodeline": "if( pSub->pLimit && (pSrc->nSrc>1 || isAgg) ){"
    },
    {
        "line": 54,
        "fullcodeline": "if( p->pOrderBy && pSub->pOrderBy ){"
    },
    {
        "line": 57,
        "fullcodeline": "if( isAgg && pSub->pOrderBy ) return 0;                /* Restriction (16) */"
    },
    {
        "line": 58,
        "fullcodeline": "if( pSub->pLimit && p->pWhere ) return 0;              /* Restriction (19) */"
    },
    {
        "line": 59,
        "fullcodeline": "if( pSub->pLimit && (p->selFlags & SF_Distinct)!=0 ){"
    },
    {
        "line": 62,
        "fullcodeline": "if( pSub->selFlags & (SF_Recursive) ){"
    },
    {
        "line": 86,
        "fullcodeline": "if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){"
    },
    {
        "line": 189,
        "fullcodeline": "for(pSub=pSub->pPrior; pSub; pSub=pSub->pPrior){"
    },
    {
        "line": 239,
        "fullcodeline": "if( ALWAYS(pSubitem->pTab!=0) ){"
    },
    {
        "line": 264,
        "fullcodeline": "for(pParent=p; pParent; pParent=pParent->pPrior, pSub=pSub->pPrior){"
    },
    {
        "line": 87,
        "fullcodeline": "isLeftJoin = 1;"
    },
    {
        "line": 191,
        "fullcodeline": "ExprList *pOrderBy = p->pOrderBy;"
    },
    {
        "line": 192,
        "fullcodeline": "Expr *pLimit = p->pLimit;"
    },
    {
        "line": 193,
        "fullcodeline": "Select *pPrior = p->pPrior;"
    },
    {
        "line": 194,
        "fullcodeline": "p->pOrderBy = 0;"
    },
    {
        "line": 195,
        "fullcodeline": "p->pSrc = 0;"
    },
    {
        "line": 196,
        "fullcodeline": "p->pPrior = 0;"
    },
    {
        "line": 197,
        "fullcodeline": "p->pLimit = 0;"
    },
    {
        "line": 198,
        "fullcodeline": "pNew = sqlite3SelectDup(db, p, 0);"
    },
    {
        "line": 199,
        "fullcodeline": "p->pLimit = pLimit;"
    },
    {
        "line": 200,
        "fullcodeline": "p->pOrderBy = pOrderBy;"
    },
    {
        "line": 201,
        "fullcodeline": "p->pSrc = pSrc;"
    },
    {
        "line": 202,
        "fullcodeline": "p->op = TK_ALL;"
    },
    {
        "line": 240,
        "fullcodeline": "Table *pTabToDel = pSubitem->pTab;"
    },
    {
        "line": 248,
        "fullcodeline": "pSubitem->pTab = 0;"
    },
    {
        "line": 266,
        "fullcodeline": "u8 jointype = 0;"
    },
    {
        "line": 267,
        "fullcodeline": "assert( pSub!=0 );"
    },
    {
        "line": 268,
        "fullcodeline": "pSubSrc = pSub->pSrc;     /* FROM clause of subquery */"
    },
    {
        "line": 269,
        "fullcodeline": "nSubSrc = pSubSrc->nSrc;  /* Number of terms in subquery FROM clause */"
    },
    {
        "line": 270,
        "fullcodeline": "pSrc = pParent->pSrc;     /* FROM clause of the outer query */"
    },
    {
        "line": 313,
        "fullcodeline": "pSrc->a[iFrom].fg.jointype = jointype;"
    },
    {
        "line": 346,
        "fullcodeline": "pWhere = pSub->pWhere;"
    },
    {
        "line": 347,
        "fullcodeline": "pSub->pWhere = 0;"
    },
    {
        "line": 351,
        "fullcodeline": "pParent->pWhere = sqlite3ExprAnd(pParse, pWhere, pParent->pWhere);"
    },
    {
        "line": 364,
        "fullcodeline": "pParent->selFlags |= pSub->selFlags & SF_Compound;"
    },
    {
        "line": 365,
        "fullcodeline": "assert( (pSub->selFlags & SF_Distinct)==0 ); /* restriction (17b) */"
    },
    {
        "line": 88,
        "fullcodeline": "if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){"
    },
    {
        "line": 112,
        "fullcodeline": "if( isAgg || (p->selFlags & SF_Distinct)!=0 || pSrc->nSrc!=1 ){"
    },
    {
        "line": 115,
        "fullcodeline": "for(pSub1=pSub; pSub1; pSub1=pSub1->pPrior){"
    },
    {
        "line": 203,
        "fullcodeline": "if( pNew==0 ){"
    },
    {
        "line": 241,
        "fullcodeline": "if( pTabToDel->nTabRef==1 ){"
    },
    {
        "line": 297,
        "fullcodeline": "if( nSubSrc>1 ){"
    },
    {
        "line": 306,
        "fullcodeline": "for(i=0; i<nSubSrc; i++){"
    },
    {
        "line": 348,
        "fullcodeline": "if( isLeftJoin>0 ){"
    },
    {
        "line": 352,
        "fullcodeline": "if( db->mallocFailed==0 ){"
    },
    {
        "line": 116,
        "fullcodeline": "testcase( (pSub1->selFlags & (SF_Distinct|SF_Aggregate))==SF_Distinct );"
    },
    {
        "line": 117,
        "fullcodeline": "testcase( (pSub1->selFlags & (SF_Distinct|SF_Aggregate))==SF_Aggregate );"
    },
    {
        "line": 118,
        "fullcodeline": "assert( pSub->pSrc!=0 );"
    },
    {
        "line": 119,
        "fullcodeline": "assert( pSub->pEList->nExpr==pSub1->pEList->nExpr );"
    },
    {
        "line": 126,
        "fullcodeline": "testcase( pSub1->pSrc->nSrc>1 );"
    },
    {
        "line": 204,
        "fullcodeline": "p->pPrior = pPrior;"
    },
    {
        "line": 242,
        "fullcodeline": "Parse *pToplevel = sqlite3ParseToplevel(pParse);"
    },
    {
        "line": 243,
        "fullcodeline": "pTabToDel->pNextZombie = pToplevel->pZombieTab;"
    },
    {
        "line": 244,
        "fullcodeline": "pToplevel->pZombieTab = pTabToDel;"
    },
    {
        "line": 273,
        "fullcodeline": "assert( pParent==p );  /* First time through the loop */"
    },
    {
        "line": 274,
        "fullcodeline": "jointype = pSubitem->fg.jointype;"
    },
    {
        "line": 298,
        "fullcodeline": "pSrc = sqlite3SrcListEnlarge(pParse, pSrc, nSubSrc-1,iFrom+1);"
    },
    {
        "line": 300,
        "fullcodeline": "pParent->pSrc = pSrc;"
    },
    {
        "line": 307,
        "fullcodeline": "sqlite3IdListDelete(db, pSrc->a[i+iFrom].pUsing);"
    },
    {
        "line": 308,
        "fullcodeline": "assert( pSrc->a[i+iFrom].fg.isTabFunc==0 );"
    },
    {
        "line": 309,
        "fullcodeline": "pSrc->a[i+iFrom] = pSubSrc->a[i];"
    },
    {
        "line": 311,
        "fullcodeline": "memset(&pSubSrc->a[i], 0, sizeof(pSubSrc->a[i]));"
    },
    {
        "line": 338,
        "fullcodeline": "ExprList *pOrderBy = pSub->pOrderBy;"
    },
    {
        "line": 342,
        "fullcodeline": "assert( pParent->pOrderBy==0 );"
    },
    {
        "line": 343,
        "fullcodeline": "pParent->pOrderBy = pOrderBy;"
    },
    {
        "line": 344,
        "fullcodeline": "pSub->pOrderBy = 0;"
    },
    {
        "line": 349,
        "fullcodeline": "sqlite3SetJoinExpr(pWhere, iNewParent);"
    },
    {
        "line": 354,
        "fullcodeline": "x.pParse = pParse;"
    },
    {
        "line": 355,
        "fullcodeline": "x.iTable = iParent;"
    },
    {
        "line": 356,
        "fullcodeline": "x.iNewTable = iNewParent;"
    },
    {
        "line": 357,
        "fullcodeline": "x.isLeftJoin = isLeftJoin;"
    },
    {
        "line": 358,
        "fullcodeline": "x.pEList = pSub->pEList;"
    },
    {
        "line": 359,
        "fullcodeline": "substSelect(&x, pParent, 0);"
    },
    {
        "line": 374,
        "fullcodeline": "pParent->pLimit = pSub->pLimit;"
    },
    {
        "line": 375,
        "fullcodeline": "pSub->pLimit = 0;"
    },
    {
        "line": 120,
        "fullcodeline": "if( (pSub1->selFlags & (SF_Distinct|SF_Aggregate))!=0    /* (17b) */"
    },
    {
        "line": 132,
        "fullcodeline": "for(ii=0; ii<p->pOrderBy->nExpr; ii++){"
    },
    {
        "line": 206,
        "fullcodeline": "pNew->pPrior = pPrior;"
    },
    {
        "line": 208,
        "fullcodeline": "pNew->pNext = p;"
    },
    {
        "line": 209,
        "fullcodeline": "p->pPrior = pNew;"
    },
    {
        "line": 210,
        "fullcodeline": "SELECTTRACE(2,pParse,p,(\"compound-subquery flattener\""
    },
    {
        "line": 246,
        "fullcodeline": "pTabToDel->nTabRef--;"
    },
    {
        "line": 276,
        "fullcodeline": "assert( pParent!=p );  /* 2nd and subsequent times through the loop */"
    },
    {
        "line": 277,
        "fullcodeline": "pSrc = sqlite3SrcListAppend(pParse, 0, 0, 0);"
    },
    {
        "line": 279,
        "fullcodeline": "pParent->pSrc = pSrc;"
    },
    {
        "line": 299,
        "fullcodeline": "if( pSrc==0 ) break;"
    },
    {
        "line": 339,
        "fullcodeline": "for(i=0; i<pOrderBy->nExpr; i++){"
    },
    {
        "line": 122,
        "fullcodeline": "|| pSub1->pSrc->nSrc<1                                  /* (17c) */"
    },
    {
        "line": 278,
        "fullcodeline": "if( pSrc==0 ) break;"
    },
    {
        "line": 340,
        "fullcodeline": "pOrderBy->a[i].u.x.iOrderByCol = 0;"
    },
    {
        "line": 121,
        "fullcodeline": "|| (pSub1->pPrior && pSub1->op!=TK_ALL)                 /* (17a) */"
    },
    {
        "line": 133,
        "fullcodeline": "if( p->pOrderBy->a[ii].u.x.iOrderByCol==0 ) return 0;"
    },
    {
        "line": 207,
        "fullcodeline": "if( pPrior ) pPrior->pNext = pNew;"
    }
]