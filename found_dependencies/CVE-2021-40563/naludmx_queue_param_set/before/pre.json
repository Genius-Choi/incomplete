[
    {
        "line": 3,
        "fullcodeline": "GF_List *list = NULL, *alt_list = NULL;"
    },
    {
        "line": 6,
        "fullcodeline": "u32 crc = gf_crc_32(data, size);"
    },
    {
        "line": 67,
        "fullcodeline": "sl = NULL;"
    },
    {
        "line": 68,
        "fullcodeline": "count = gf_list_count(list);"
    },
    {
        "line": 105,
        "fullcodeline": "GF_SAFEALLOC(sl, GF_NALUFFParam);"
    },
    {
        "line": 107,
        "fullcodeline": "sl->data = gf_malloc(sizeof(char) * size);"
    },
    {
        "line": 112,
        "fullcodeline": "memcpy(sl->data, data, size);"
    },
    {
        "line": 113,
        "fullcodeline": "sl->size = size;"
    },
    {
        "line": 114,
        "fullcodeline": "sl->id = ps_id;"
    },
    {
        "line": 115,
        "fullcodeline": "sl->crc = crc;"
    },
    {
        "line": 8,
        "fullcodeline": "if (ctx->codecid==GF_CODECID_HEVC) {"
    },
    {
        "line": 69,
        "fullcodeline": "for (i=0; i<count; i++) {"
    },
    {
        "line": 80,
        "fullcodeline": "if (!sl && alt_list) {"
    },
    {
        "line": 106,
        "fullcodeline": "if (!sl) return;"
    },
    {
        "line": 108,
        "fullcodeline": "if (!sl->data) {"
    },
    {
        "line": 70,
        "fullcodeline": "sl = gf_list_get(list, i);"
    },
    {
        "line": 81,
        "fullcodeline": "count = gf_list_count(alt_list);"
    },
    {
        "line": 96,
        "fullcodeline": "sl->data = gf_realloc(sl->data, size);"
    },
    {
        "line": 97,
        "fullcodeline": "memcpy(sl->data, data, size);"
    },
    {
        "line": 71,
        "fullcodeline": "if (sl->id != ps_id) {"
    },
    {
        "line": 76,
        "fullcodeline": "if (sl->crc == crc) return;"
    },
    {
        "line": 82,
        "fullcodeline": "for (i=0; i<count; i++) {"
    },
    {
        "line": 12,
        "fullcodeline": "list = ctx->vps;"
    },
    {
        "line": 15,
        "fullcodeline": "list = ctx->sps;"
    },
    {
        "line": 18,
        "fullcodeline": "list = ctx->pps;"
    },
    {
        "line": 21,
        "fullcodeline": "assert(0);"
    },
    {
        "line": 24,
        "fullcodeline": "} else if (ctx->codecid==GF_CODECID_VVC) {"
    },
    {
        "line": 72,
        "fullcodeline": "sl = NULL;"
    },
    {
        "line": 83,
        "fullcodeline": "sl = gf_list_get(alt_list, i);"
    },
    {
        "line": 11,
        "fullcodeline": "if (!ctx->vps) ctx->vps = gf_list_new();"
    },
    {
        "line": 84,
        "fullcodeline": "if (sl->id != ps_id) {"
    },
    {
        "line": 89,
        "fullcodeline": "if (sl->crc == crc) return;"
    },
    {
        "line": 85,
        "fullcodeline": "sl = NULL;"
    },
    {
        "line": 28,
        "fullcodeline": "list = ctx->vps;"
    },
    {
        "line": 31,
        "fullcodeline": "list = ctx->sps;"
    },
    {
        "line": 34,
        "fullcodeline": "list = ctx->pps;"
    },
    {
        "line": 38,
        "fullcodeline": "list = ctx->vvc_dci;"
    },
    {
        "line": 42,
        "fullcodeline": "list = ctx->vvc_aps_pre;"
    },
    {
        "line": 27,
        "fullcodeline": "if (!ctx->vps) ctx->vps = gf_list_new();"
    },
    {
        "line": 37,
        "fullcodeline": "if (!ctx->vvc_dci) ctx->vvc_dci = gf_list_new();"
    },
    {
        "line": 41,
        "fullcodeline": "if (!ctx->vvc_aps_pre) ctx->vvc_aps_pre = gf_list_new();"
    },
    {
        "line": 52,
        "fullcodeline": "list = ctx->sps;"
    },
    {
        "line": 55,
        "fullcodeline": "list = ctx->pps;"
    },
    {
        "line": 56,
        "fullcodeline": "alt_list = ctx->pps_svc;"
    },
    {
        "line": 60,
        "fullcodeline": "list = ctx->sps_ext;"
    },
    {
        "line": 59,
        "fullcodeline": "if (!ctx->sps_ext) ctx->sps_ext = gf_list_new();"
    }
]