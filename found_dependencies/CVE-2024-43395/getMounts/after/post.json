[
    {
        "line": 2,
        "fullcodeline": "comp_path.erase(std::remove_if(comp_path.begin(), comp_path.end(), [](char c)->bool {return c == '\"' || c == '*' || c == ':' || c == '<' || c == '>' || c == '?' || c == '|' || c < 32; }), comp_path.end());"
    },
    {
        "line": 3,
        "fullcodeline": "std::vector<std::string> elems = split(comp_path, \"/\\\\\");"
    },
    {
        "line": 4,
        "fullcodeline": "std::list<std::string> pathc;"
    },
    {
        "line": 5,
        "fullcodeline": "std::set<std::string> retval;"
    },
    {
        "line": 13,
        "fullcodeline": "if (pathc.size() + 1 == std::get<0>(m).size() && std::equal(pathc.begin(), pathc.end(), std::get<0>(m).begin()))"
    },
    {
        "line": 7,
        "fullcodeline": "if (s == \"..\") { if (pathc.empty()) return retval; else pathc.pop_back(); }"
    },
    {
        "line": 14,
        "fullcodeline": "retval.insert(std::get<0>(m).back());"
    },
    {
        "line": 8,
        "fullcodeline": "else if (!s.empty() && !std::all_of(s.begin(), s.end(), [](const char c)->bool{return c == '.';})) {"
    },
    {
        "line": 9,
        "fullcodeline": "pathc.push_back(s);"
    }
]