[
    {
        "line": 2,
        "fullcodeline": "lastCFunction = __func__;"
    },
    {
        "line": 3,
        "fullcodeline": "std::string str = checkstring(L, 1);"
    },
    {
        "line": 5,
        "fullcodeline": "ws_handle * ws = *(ws_handle**)lua_touserdata(L, lua_upvalueindex(1));"
    },
    {
        "line": 7,
        "fullcodeline": "std::lock_guard<std::mutex> lock(ws->lock);"
    },
    {
        "line": 4,
        "fullcodeline": "if (config.http_max_websocket_message > 0 && str.size() > (unsigned)config.http_max_websocket_message) luaL_error(L, \"Message is too large\");"
    },
    {
        "line": 6,
        "fullcodeline": "if (ws == NULL) luaL_error(L, \"attempt to use a closed file\");"
    },
    {
        "line": 8,
        "fullcodeline": "if (ws->ws == NULL) return luaL_error(L, \"attempt to use a closed file\");"
    },
    {
        "line": 9,
        "fullcodeline": "if (ws->ws->sendFrame(str.c_str(), str.size(), (int)WebSocket::FRAME_FLAG_FIN | (int)(lua_toboolean(L, 2) ? WebSocket::FRAME_BINARY : WebSocket::FRAME_TEXT)) < 1)"
    }
]