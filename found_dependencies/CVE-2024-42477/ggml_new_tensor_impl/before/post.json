[
    {
        "line": 9,
        "fullcodeline": "assert(n_dims >= 1 && n_dims <= GGML_MAX_DIMS);"
    },
    {
        "line": 17,
        "fullcodeline": "size_t data_size = ggml_row_size(type, ne[0]);"
    },
    {
        "line": 22,
        "fullcodeline": "GGML_ASSERT(view_src == NULL || data_size == 0 || data_size + view_offs <= ggml_nbytes(view_src));"
    },
    {
        "line": 24,
        "fullcodeline": "void * data = view_src != NULL ? view_src->data : NULL;"
    },
    {
        "line": 29,
        "fullcodeline": "size_t obj_alloc_size = 0;"
    },
    {
        "line": 50,
        "fullcodeline": "struct ggml_object * const obj_new = ggml_new_object(ctx, GGML_OBJECT_TYPE_TENSOR, GGML_TENSOR_SIZE + obj_alloc_size);"
    },
    {
        "line": 54,
        "fullcodeline": "struct ggml_tensor * const result = (struct ggml_tensor *)((char *)ctx->mem_buffer + obj_new->offs);"
    },
    {
        "line": 62,
        "fullcodeline": "*result = (struct ggml_tensor) {"
    },
    {
        "line": 92,
        "fullcodeline": "result->nb[0] = ggml_type_size(type);"
    },
    {
        "line": 93,
        "fullcodeline": "result->nb[1] = result->nb[0]*(result->ne[0]/ggml_blck_size(type));"
    },
    {
        "line": 98,
        "fullcodeline": "ctx->n_objects++;"
    },
    {
        "line": 12,
        "fullcodeline": "if (view_src != NULL && view_src->view_src != NULL) {"
    },
    {
        "line": 18,
        "fullcodeline": "for (int i = 1; i < n_dims; i++) {"
    },
    {
        "line": 25,
        "fullcodeline": "if (data != NULL) {"
    },
    {
        "line": 31,
        "fullcodeline": "if (view_src == NULL && !ctx->no_alloc) {"
    },
    {
        "line": 88,
        "fullcodeline": "for (int i = 0; i < n_dims; i++) {"
    },
    {
        "line": 94,
        "fullcodeline": "for (int i = 2; i < GGML_MAX_DIMS; i++) {"
    },
    {
        "line": 13,
        "fullcodeline": "view_offs += view_src->view_offs;"
    },
    {
        "line": 14,
        "fullcodeline": "view_src   = view_src->view_src;"
    },
    {
        "line": 19,
        "fullcodeline": "data_size *= ne[i];"
    },
    {
        "line": 26,
        "fullcodeline": "data = (char *) data + view_offs;"
    },
    {
        "line": 89,
        "fullcodeline": "result->ne[i] = ne[i];"
    },
    {
        "line": 95,
        "fullcodeline": "result->nb[i] = result->nb[i - 1]*result->ne[i - 1];"
    },
    {
        "line": 32,
        "fullcodeline": "if (ctx->scratch.data != NULL) {"
    },
    {
        "line": 66,
        "fullcodeline": "/*.ne           =*/ { 1, 1, 1, 1 },"
    },
    {
        "line": 67,
        "fullcodeline": "/*.nb           =*/ { 0, 0, 0, 0 },"
    },
    {
        "line": 69,
        "fullcodeline": "/*.op_params    =*/ { 0 },"
    },
    {
        "line": 72,
        "fullcodeline": "/*.src          =*/ { NULL },"
    },
    {
        "line": 75,
        "fullcodeline": "/*.data         =*/ obj_alloc_size > 0 ? (void *)(result + 1) : data,"
    },
    {
        "line": 76,
        "fullcodeline": "/*.name         =*/ { 0 },"
    },
    {
        "line": 41,
        "fullcodeline": "data = (char * const) ctx->scratch.data + ctx->scratch.offs;"
    },
    {
        "line": 43,
        "fullcodeline": "ctx->scratch.offs += data_size;"
    },
    {
        "line": 34,
        "fullcodeline": "if (ctx->scratch.offs + data_size > ctx->scratch.size) {"
    },
    {
        "line": 46,
        "fullcodeline": "obj_alloc_size = data_size;"
    },
    {
        "line": 35,
        "fullcodeline": "GGML_PRINT(\"%s: not enough space in the scratch memory pool (needed %zu, available %zu)\\n\","
    },
    {
        "line": 37,
        "fullcodeline": "assert(false);"
    },
    {
        "line": 36,
        "fullcodeline": "__func__, ctx->scratch.offs + data_size, ctx->scratch.size);"
    }
]