[
    {
        "line": 9,
        "fullcodeline": "bool entering = (ev_type == CMARK_EVENT_ENTER);"
    },
    {
        "line": 11,
        "fullcodeline": "char fencechar[2] = {'\\0', '\\0'};"
    },
    {
        "line": 13,
        "fullcodeline": "char listmarker[LISTMARKER_SIZE];"
    },
    {
        "line": 17,
        "fullcodeline": "bool allow_wrap = renderer->width > 0 && !(CMARK_OPT_NOBREAKS & options) &&"
    },
    {
        "line": 23,
        "fullcodeline": "if (!(node->type == CMARK_NODE_ITEM && node->prev == NULL && entering)) {"
    },
    {
        "line": 33,
        "fullcodeline": "if (node->extension && node->extension->commonmark_render_func) {"
    },
    {
        "line": 18,
        "fullcodeline": "!(CMARK_OPT_HARDBREAKS & options);"
    },
    {
        "line": 24,
        "fullcodeline": "tmp = get_containing_block(node);"
    },
    {
        "line": 25,
        "fullcodeline": "renderer->in_tight_list_item ="
    },
    {
        "line": 34,
        "fullcodeline": "node->extension->commonmark_render_func(node->extension, renderer, node, ev_type, options);"
    },
    {
        "line": 116,
        "fullcodeline": "first_in_list_item = node->prev == NULL && node->parent &&"
    },
    {
        "line": 122,
        "fullcodeline": "info = cmark_node_get_fence_info(node);"
    },
    {
        "line": 123,
        "fullcodeline": "info_len = strlen(info);"
    },
    {
        "line": 124,
        "fullcodeline": "fencechar[0] = strchr(info, '`') == NULL ? '`' : '~';"
    },
    {
        "line": 125,
        "fullcodeline": "code = cmark_node_get_literal(node);"
    },
    {
        "line": 126,
        "fullcodeline": "code_len = strlen(code);"
    },
    {
        "line": 155,
        "fullcodeline": "BLANKLINE();"
    },
    {
        "line": 159,
        "fullcodeline": "BLANKLINE();"
    },
    {
        "line": 160,
        "fullcodeline": "OUT(cmark_node_get_literal(node), false, LITERAL);"
    },
    {
        "line": 161,
        "fullcodeline": "BLANKLINE();"
    },
    {
        "line": 165,
        "fullcodeline": "BLANKLINE();"
    },
    {
        "line": 166,
        "fullcodeline": "OUT(entering ? cmark_node_get_on_enter(node) : cmark_node_get_on_exit(node),"
    },
    {
        "line": 168,
        "fullcodeline": "BLANKLINE();"
    },
    {
        "line": 172,
        "fullcodeline": "BLANKLINE();"
    },
    {
        "line": 173,
        "fullcodeline": "LIT(\"-----\");"
    },
    {
        "line": 174,
        "fullcodeline": "BLANKLINE();"
    },
    {
        "line": 184,
        "fullcodeline": "OUT(cmark_node_get_literal(node), allow_wrap, NORMAL);"
    },
    {
        "line": 191,
        "fullcodeline": "CR();"
    },
    {
        "line": 208,
        "fullcodeline": "code = cmark_node_get_literal(node);"
    },
    {
        "line": 209,
        "fullcodeline": "code_len = strlen(code);"
    },
    {
        "line": 210,
        "fullcodeline": "numticks = shortest_unused_backtick_sequence(code);"
    },
    {
        "line": 211,
        "fullcodeline": "extra_spaces = code_len == 0 ||"
    },
    {
        "line": 220,
        "fullcodeline": "OUT(cmark_node_get_literal(node), allow_wrap, LITERAL);"
    },
    {
        "line": 230,
        "fullcodeline": "OUT(cmark_node_get_literal(node), false, LITERAL);"
    },
    {
        "line": 234,
        "fullcodeline": "OUT(entering ? cmark_node_get_on_enter(node) : cmark_node_get_on_exit(node),"
    },
    {
        "line": 342,
        "fullcodeline": "assert(false);"
    },
    {
        "line": 26,
        "fullcodeline": "tmp && // tmp might be NULL if there is no containing block"
    },
    {
        "line": 54,
        "fullcodeline": "if (!entering && node->next && (node->next->type == CMARK_NODE_CODE_BLOCK ||"
    },
    {
        "line": 65,
        "fullcodeline": "if (cmark_node_get_list_type(node->parent) == CMARK_BULLET_LIST) {"
    },
    {
        "line": 119,
        "fullcodeline": "if (!first_in_list_item) {"
    },
    {
        "line": 130,
        "fullcodeline": "if (info_len == 0 && (code_len > 2 && !cmark_isspace(code[0]) &&"
    },
    {
        "line": 178,
        "fullcodeline": "if (!entering) {"
    },
    {
        "line": 188,
        "fullcodeline": "if (!(CMARK_OPT_HARDBREAKS & options)) {"
    },
    {
        "line": 195,
        "fullcodeline": "if (CMARK_OPT_HARDBREAKS & options) {"
    },
    {
        "line": 214,
        "fullcodeline": "for (i = 0; i < numticks; i++) {"
    },
    {
        "line": 224,
        "fullcodeline": "for (i = 0; i < numticks; i++) {"
    },
    {
        "line": 249,
        "fullcodeline": "if (node->parent && node->parent->type == CMARK_NODE_EMPH &&"
    },
    {
        "line": 263,
        "fullcodeline": "if (is_autolink(node)) {"
    },
    {
        "line": 27,
        "fullcodeline": "((tmp->type == CMARK_NODE_ITEM &&"
    },
    {
        "line": 44,
        "fullcodeline": "LIT(\"> \");"
    },
    {
        "line": 45,
        "fullcodeline": "renderer->begin_content = true;"
    },
    {
        "line": 46,
        "fullcodeline": "cmark_strbuf_puts(renderer->prefix, \"> \");"
    },
    {
        "line": 58,
        "fullcodeline": "CR();"
    },
    {
        "line": 59,
        "fullcodeline": "LIT(\"<!-- end list -->\");"
    },
    {
        "line": 60,
        "fullcodeline": "BLANKLINE();"
    },
    {
        "line": 66,
        "fullcodeline": "marker_width = 4;"
    },
    {
        "line": 106,
        "fullcodeline": "LIT(\" \");"
    },
    {
        "line": 107,
        "fullcodeline": "renderer->begin_content = true;"
    },
    {
        "line": 108,
        "fullcodeline": "renderer->no_linebreaks = true;"
    },
    {
        "line": 117,
        "fullcodeline": "node->parent->type == CMARK_NODE_ITEM;"
    },
    {
        "line": 120,
        "fullcodeline": "BLANKLINE();"
    },
    {
        "line": 133,
        "fullcodeline": "!first_in_list_item) {"
    },
    {
        "line": 134,
        "fullcodeline": "LIT(\"    \");"
    },
    {
        "line": 135,
        "fullcodeline": "cmark_strbuf_puts(renderer->prefix, \"    \");"
    },
    {
        "line": 136,
        "fullcodeline": "OUT(cmark_node_get_literal(node), false, LITERAL);"
    },
    {
        "line": 137,
        "fullcodeline": "cmark_strbuf_truncate(renderer->prefix, renderer->prefix->size - 4);"
    },
    {
        "line": 179,
        "fullcodeline": "BLANKLINE();"
    },
    {
        "line": 189,
        "fullcodeline": "LIT(\"  \");"
    },
    {
        "line": 196,
        "fullcodeline": "LIT(\"  \");"
    },
    {
        "line": 197,
        "fullcodeline": "CR();"
    },
    {
        "line": 213,
        "fullcodeline": "code[0] == ' ' || code[code_len - 1] == ' ';"
    },
    {
        "line": 215,
        "fullcodeline": "LIT(\"`\");"
    },
    {
        "line": 218,
        "fullcodeline": "LIT(\" \");"
    },
    {
        "line": 222,
        "fullcodeline": "LIT(\" \");"
    },
    {
        "line": 225,
        "fullcodeline": "LIT(\"`\");"
    },
    {
        "line": 240,
        "fullcodeline": "LIT(\"**\");"
    },
    {
        "line": 250,
        "fullcodeline": "node->next == NULL && node->prev == NULL) {"
    },
    {
        "line": 251,
        "fullcodeline": "emph_delim = \"_\";"
    },
    {
        "line": 256,
        "fullcodeline": "LIT(emph_delim);"
    },
    {
        "line": 294,
        "fullcodeline": "LIT(\"![\");"
    },
    {
        "line": 310,
        "fullcodeline": "LIT(\"[^\");"
    },
    {
        "line": 312,
        "fullcodeline": "char *footnote_label = renderer->mem->calloc(node->parent_footnote_def->as.literal.len + 1, sizeof(char));"
    },
    {
        "line": 313,
        "fullcodeline": "memmove(footnote_label, node->parent_footnote_def->as.literal.data, node->parent_footnote_def->as.literal.len);"
    },
    {
        "line": 315,
        "fullcodeline": "OUT(footnote_label, false, LITERAL);"
    },
    {
        "line": 316,
        "fullcodeline": "renderer->mem->free(footnote_label);"
    },
    {
        "line": 318,
        "fullcodeline": "LIT(\"]\");"
    },
    {
        "line": 324,
        "fullcodeline": "renderer->footnote_ix += 1;"
    },
    {
        "line": 325,
        "fullcodeline": "LIT(\"[^\");"
    },
    {
        "line": 327,
        "fullcodeline": "char *footnote_label = renderer->mem->calloc(node->as.literal.len + 1, sizeof(char));"
    },
    {
        "line": 328,
        "fullcodeline": "memmove(footnote_label, node->as.literal.data, node->as.literal.len);"
    },
    {
        "line": 330,
        "fullcodeline": "OUT(footnote_label, false, LITERAL);"
    },
    {
        "line": 331,
        "fullcodeline": "renderer->mem->free(footnote_label);"
    },
    {
        "line": 333,
        "fullcodeline": "LIT(\"]:\\n\");"
    },
    {
        "line": 335,
        "fullcodeline": "cmark_strbuf_puts(renderer->prefix, \"    \");"
    },
    {
        "line": 29,
        "fullcodeline": "(tmp && tmp->parent && tmp->parent->type == CMARK_NODE_ITEM &&"
    },
    {
        "line": 48,
        "fullcodeline": "cmark_strbuf_truncate(renderer->prefix, renderer->prefix->size - 2);"
    },
    {
        "line": 49,
        "fullcodeline": "BLANKLINE();"
    },
    {
        "line": 55,
        "fullcodeline": "node->next->type == CMARK_NODE_LIST)) {"
    },
    {
        "line": 68,
        "fullcodeline": "list_number = cmark_node_get_list_start(node->parent);"
    },
    {
        "line": 69,
        "fullcodeline": "list_delim = cmark_node_get_list_delim(node->parent);"
    },
    {
        "line": 70,
        "fullcodeline": "tmp = node;"
    },
    {
        "line": 78,
        "fullcodeline": "snprintf(listmarker, LISTMARKER_SIZE, \"%d%s%s\", list_number,"
    },
    {
        "line": 81,
        "fullcodeline": "marker_width = (bufsize_t)strlen(listmarker);"
    },
    {
        "line": 84,
        "fullcodeline": "if (cmark_node_get_list_type(node->parent) == CMARK_BULLET_LIST) {"
    },
    {
        "line": 91,
        "fullcodeline": "for (i = marker_width; i--;) {"
    },
    {
        "line": 95,
        "fullcodeline": "cmark_strbuf_truncate(renderer->prefix,"
    },
    {
        "line": 97,
        "fullcodeline": "CR();"
    },
    {
        "line": 103,
        "fullcodeline": "for (i = cmark_node_get_heading_level(node); i > 0; i--) {"
    },
    {
        "line": 110,
        "fullcodeline": "renderer->no_linebreaks = false;"
    },
    {
        "line": 111,
        "fullcodeline": "BLANKLINE();"
    },
    {
        "line": 139,
        "fullcodeline": "numticks = longest_backtick_sequence(code) + 1;"
    },
    {
        "line": 146,
        "fullcodeline": "LIT(\" \");"
    },
    {
        "line": 147,
        "fullcodeline": "OUT(info, false, LITERAL);"
    },
    {
        "line": 148,
        "fullcodeline": "CR();"
    },
    {
        "line": 149,
        "fullcodeline": "OUT(cmark_node_get_literal(node), false, LITERAL);"
    },
    {
        "line": 150,
        "fullcodeline": "CR();"
    },
    {
        "line": 242,
        "fullcodeline": "LIT(\"**\");"
    },
    {
        "line": 253,
        "fullcodeline": "emph_delim = \"*\";"
    },
    {
        "line": 258,
        "fullcodeline": "LIT(emph_delim);"
    },
    {
        "line": 296,
        "fullcodeline": "LIT(\"](\");"
    },
    {
        "line": 297,
        "fullcodeline": "OUT(cmark_node_get_url(node), false, URL);"
    },
    {
        "line": 298,
        "fullcodeline": "title = cmark_node_get_title(node);"
    },
    {
        "line": 304,
        "fullcodeline": "LIT(\")\");"
    },
    {
        "line": 337,
        "fullcodeline": "cmark_strbuf_truncate(renderer->prefix, renderer->prefix->size - 4);"
    },
    {
        "line": 28,
        "fullcodeline": "cmark_node_get_list_tight(tmp->parent)) ||"
    },
    {
        "line": 79,
        "fullcodeline": "list_delim == CMARK_PAREN_DELIM ? \")\" : \".\","
    },
    {
        "line": 80,
        "fullcodeline": "list_number < 10 ? \"  \" : \" \");"
    },
    {
        "line": 85,
        "fullcodeline": "LIT(\"  - \");"
    },
    {
        "line": 86,
        "fullcodeline": "renderer->begin_content = true;"
    },
    {
        "line": 92,
        "fullcodeline": "cmark_strbuf_putc(renderer->prefix, ' ');"
    },
    {
        "line": 96,
        "fullcodeline": "renderer->prefix->size - marker_width);"
    },
    {
        "line": 104,
        "fullcodeline": "LIT(\"#\");"
    },
    {
        "line": 131,
        "fullcodeline": "!(cmark_isspace(code[code_len - 1]) &&"
    },
    {
        "line": 140,
        "fullcodeline": "if (numticks < 3) {"
    },
    {
        "line": 143,
        "fullcodeline": "for (i = 0; i < numticks; i++) {"
    },
    {
        "line": 151,
        "fullcodeline": "for (i = 0; i < numticks; i++) {"
    },
    {
        "line": 198,
        "fullcodeline": "} else if (!renderer->no_linebreaks && renderer->width == 0 &&"
    },
    {
        "line": 212,
        "fullcodeline": "code[0] == '`' || code[code_len - 1] == '`' ||"
    },
    {
        "line": 265,
        "fullcodeline": "LIT(\"<\");"
    },
    {
        "line": 271,
        "fullcodeline": "LIT(\">\");"
    },
    {
        "line": 299,
        "fullcodeline": "if (strlen(title) > 0) {"
    },
    {
        "line": 72,
        "fullcodeline": "tmp = tmp->prev;"
    },
    {
        "line": 73,
        "fullcodeline": "list_number += 1;"
    },
    {
        "line": 88,
        "fullcodeline": "LIT(listmarker);"
    },
    {
        "line": 89,
        "fullcodeline": "renderer->begin_content = true;"
    },
    {
        "line": 141,
        "fullcodeline": "numticks = 3;"
    },
    {
        "line": 144,
        "fullcodeline": "LIT(fencechar);"
    },
    {
        "line": 152,
        "fullcodeline": "LIT(fencechar);"
    },
    {
        "line": 200,
        "fullcodeline": "!(CMARK_OPT_NOBREAKS & options)) {"
    },
    {
        "line": 201,
        "fullcodeline": "CR();"
    },
    {
        "line": 266,
        "fullcodeline": "if (strncmp(cmark_node_get_url(node), \"mailto:\", 7) == 0) {"
    },
    {
        "line": 277,
        "fullcodeline": "LIT(\"[\");"
    },
    {
        "line": 300,
        "fullcodeline": "OUT(\" \\\"\", allow_wrap, LITERAL);"
    },
    {
        "line": 301,
        "fullcodeline": "OUT(title, false, TITLE);"
    },
    {
        "line": 302,
        "fullcodeline": "LIT(\"\\\"\");"
    },
    {
        "line": 132,
        "fullcodeline": "cmark_isspace(code[code_len - 2]))) &&"
    },
    {
        "line": 199,
        "fullcodeline": "!(CMARK_OPT_HARDBREAKS & options) &&"
    },
    {
        "line": 203,
        "fullcodeline": "OUT(\" \", allow_wrap, LITERAL);"
    },
    {
        "line": 267,
        "fullcodeline": "LIT((const char *)cmark_node_get_url(node) + 7);"
    },
    {
        "line": 279,
        "fullcodeline": "LIT(\"](\");"
    },
    {
        "line": 280,
        "fullcodeline": "OUT(cmark_node_get_url(node), false, URL);"
    },
    {
        "line": 281,
        "fullcodeline": "title = cmark_node_get_title(node);"
    },
    {
        "line": 287,
        "fullcodeline": "LIT(\")\");"
    },
    {
        "line": 269,
        "fullcodeline": "LIT((const char *)cmark_node_get_url(node));"
    },
    {
        "line": 282,
        "fullcodeline": "if (strlen(title) > 0) {"
    },
    {
        "line": 283,
        "fullcodeline": "LIT(\" \\\"\");"
    },
    {
        "line": 284,
        "fullcodeline": "OUT(title, false, TITLE);"
    },
    {
        "line": 285,
        "fullcodeline": "LIT(\"\\\"\");"
    }
]