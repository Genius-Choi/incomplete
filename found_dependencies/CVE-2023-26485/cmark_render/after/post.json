[
    {
        "line": 8,
        "fullcodeline": "cmark_strbuf pref = CMARK_BUF_INIT(mem);"
    },
    {
        "line": 9,
        "fullcodeline": "cmark_strbuf buf = CMARK_BUF_INIT(mem);"
    },
    {
        "line": 13,
        "fullcodeline": "cmark_iter *iter = cmark_iter_new(root);"
    },
    {
        "line": 15,
        "fullcodeline": "cmark_renderer renderer = {mem,   &buf, &pref, 0,           width,"
    },
    {
        "line": 40,
        "fullcodeline": "result = (char *)cmark_strbuf_detach(renderer.buffer);"
    },
    {
        "line": 42,
        "fullcodeline": "cmark_iter_free(iter);"
    },
    {
        "line": 43,
        "fullcodeline": "cmark_strbuf_free(renderer.prefix);"
    },
    {
        "line": 44,
        "fullcodeline": "cmark_strbuf_free(renderer.buffer);"
    },
    {
        "line": 20,
        "fullcodeline": "while ((ev_type = cmark_iter_next(iter)) != CMARK_EVENT_DONE) {"
    },
    {
        "line": 36,
        "fullcodeline": "if (renderer.buffer->size == 0 || renderer.buffer->ptr[renderer.buffer->size - 1] != '\\n') {"
    },
    {
        "line": 21,
        "fullcodeline": "cur = cmark_iter_get_node(iter);"
    },
    {
        "line": 37,
        "fullcodeline": "cmark_strbuf_putc(renderer.buffer, '\\n');"
    },
    {
        "line": 27,
        "fullcodeline": "if (!render_node(&renderer, cur, ev_type, options)) {"
    },
    {
        "line": 23,
        "fullcodeline": "cur->ancestor_extension = cur->extension;"
    },
    {
        "line": 31,
        "fullcodeline": "cmark_iter_reset(iter, cur, CMARK_EVENT_EXIT);"
    }
]