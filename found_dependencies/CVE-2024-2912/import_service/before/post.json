[
    {
        "line": 9,
        "fullcodeline": "from _bentoml_sdk import Service"
    },
    {
        "line": 11,
        "fullcodeline": "if bento_path is None:"
    },
    {
        "line": 15,
        "fullcodeline": "if bento_path != pathlib.Path(\".\"):"
    },
    {
        "line": 25,
        "fullcodeline": "bento_path.parent.joinpath(BENTO_YAML_FILENAME).exists()"
    },
    {
        "line": 12,
        "fullcodeline": "bento_path = pathlib.Path(\".\").absolute()"
    },
    {
        "line": 17,
        "fullcodeline": "extra_python_path = str(bento_path.absolute())"
    },
    {
        "line": 21,
        "fullcodeline": "extra_python_path = None"
    },
    {
        "line": 28,
        "fullcodeline": "from bentoml._internal.configuration.containers import BentoMLContainer"
    },
    {
        "line": 29,
        "fullcodeline": "from bentoml._internal.models import ModelStore"
    },
    {
        "line": 31,
        "fullcodeline": "original_model_store = BentoMLContainer.model_store.get()"
    },
    {
        "line": 37,
        "fullcodeline": "original_model_store = None"
    },
    {
        "line": 42,
        "fullcodeline": "assert ("
    },
    {
        "line": 46,
        "fullcodeline": "module = importlib.import_module(module_name)"
    },
    {
        "line": 48,
        "fullcodeline": "root_service = getattr(module, root_service_name)"
    },
    {
        "line": 50,
        "fullcodeline": "assert isinstance("
    },
    {
        "line": 18,
        "fullcodeline": "sys.path.insert(0, extra_python_path)"
    },
    {
        "line": 26,
        "fullcodeline": "and bento_path.parent.joinpath(\"models\").exists()"
    },
    {
        "line": 33,
        "fullcodeline": "BentoMLContainer.model_store.set("
    },
    {
        "line": 40,
        "fullcodeline": "module_name, _, attrs_str = service_identifier.partition(\":\")"
    },
    {
        "line": 43,
        "fullcodeline": "module_name and attrs_str"
    },
    {
        "line": 44,
        "fullcodeline": "), f'Invalid import target \"{service_identifier}\", must format as \"<module>:<attribute>\"'"
    },
    {
        "line": 47,
        "fullcodeline": "root_service_name, _, depend_path = attrs_str.partition(\".\")"
    },
    {
        "line": 52,
        "fullcodeline": "), f'import target \"{module_name}:{attrs_str}\" is not a bentoml.Service instance'"
    },
    {
        "line": 54,
        "fullcodeline": "if not depend_path:"
    },
    {
        "line": 34,
        "fullcodeline": "ModelStore((bento_path.parent.joinpath(\"models\").absolute()))"
    },
    {
        "line": 60,
        "fullcodeline": "sys_path = sys.path.copy()"
    },
    {
        "line": 68,
        "fullcodeline": "from bentoml.exceptions import ImportServiceError"
    },
    {
        "line": 70,
        "fullcodeline": "raise ImportServiceError("
    },
    {
        "line": 57,
        "fullcodeline": "return root_service.find_dependent(depend_path)"
    },
    {
        "line": 61,
        "fullcodeline": "if extra_python_path is not None:"
    },
    {
        "line": 64,
        "fullcodeline": "if original_model_store is not None:"
    },
    {
        "line": 65,
        "fullcodeline": "from bentoml._internal.configuration.containers import BentoMLContainer"
    },
    {
        "line": 71,
        "fullcodeline": "f'Failed to import service \"{service_identifier}\": {e}, sys.path: {sys_path}, cwd: {pathlib.Path.cwd()}'"
    },
    {
        "line": 62,
        "fullcodeline": "sys.path.remove(extra_python_path)"
    },
    {
        "line": 67,
        "fullcodeline": "BentoMLContainer.model_store.set(original_model_store)"
    }
]