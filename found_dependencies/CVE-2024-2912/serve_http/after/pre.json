[
    {
        "line": 21,
        "fullcodeline": "from circus.sockets import CircusSocket"
    },
    {
        "line": 23,
        "fullcodeline": "from bentoml._internal.log import SERVER_LOGGING_CONFIG"
    },
    {
        "line": 24,
        "fullcodeline": "from bentoml._internal.utils import reserve_free_port"
    },
    {
        "line": 25,
        "fullcodeline": "from bentoml._internal.utils.analytics.usage_stats import track_serve"
    },
    {
        "line": 26,
        "fullcodeline": "from bentoml._internal.utils.circus import create_standalone_arbiter"
    },
    {
        "line": 27,
        "fullcodeline": "from bentoml.serve import construct_ssl_args"
    },
    {
        "line": 28,
        "fullcodeline": "from bentoml.serve import create_watcher"
    },
    {
        "line": 29,
        "fullcodeline": "from bentoml.serve import ensure_prometheus_dir"
    },
    {
        "line": 30,
        "fullcodeline": "from bentoml.serve import make_reload_plugin"
    },
    {
        "line": 32,
        "fullcodeline": "from ..loader import import_service"
    },
    {
        "line": 33,
        "fullcodeline": "from ..loader import normalize_identifier"
    },
    {
        "line": 34,
        "fullcodeline": "from .allocator import ResourceAllocator"
    },
    {
        "line": 36,
        "fullcodeline": "prometheus_dir = ensure_prometheus_dir()"
    },
    {
        "line": 52,
        "fullcodeline": "watchers: list[Watcher] = []"
    },
    {
        "line": 53,
        "fullcodeline": "sockets: list[CircusSocket] = []"
    },
    {
        "line": 54,
        "fullcodeline": "allocator = ResourceAllocator()"
    },
    {
        "line": 37,
        "fullcodeline": "if isinstance(bento_identifier, Service):"
    },
    {
        "line": 55,
        "fullcodeline": "if dependency_map is None:"
    },
    {
        "line": 59,
        "fullcodeline": "num_workers, worker_envs = allocator.get_worker_env(svc)"
    },
    {
        "line": 60,
        "fullcodeline": "with tempfile.TemporaryDirectory(prefix=\"bentoml-uds-\") as uds_path:"
    },
    {
        "line": 38,
        "fullcodeline": "svc = bento_identifier"
    },
    {
        "line": 39,
        "fullcodeline": "bento_identifier = svc.import_string"
    },
    {
        "line": 40,
        "fullcodeline": "assert ("
    },
    {
        "line": 44,
        "fullcodeline": "bento_path = pathlib.Path(\".\")"
    },
    {
        "line": 50,
        "fullcodeline": "svc = import_service(bento_identifier, bento_path)"
    },
    {
        "line": 56,
        "fullcodeline": "dependency_map = {}"
    },
    {
        "line": 58,
        "fullcodeline": "svc = svc.find_dependent(service_name)"
    },
    {
        "line": 41,
        "fullcodeline": "working_dir is None"
    },
    {
        "line": 46,
        "fullcodeline": "bento_identifier, bento_path = normalize_identifier("
    },
    {
        "line": 97,
        "fullcodeline": "sockets.append("
    },
    {
        "line": 107,
        "fullcodeline": "ssl_args = construct_ssl_args("
    },
    {
        "line": 116,
        "fullcodeline": "timeout_args = [\"--timeout\", str(timeout)] if timeout else []"
    },
    {
        "line": 118,
        "fullcodeline": "server_args = ["
    },
    {
        "line": 140,
        "fullcodeline": "scheme = \"https\" if BentoMLContainer.ssl.enabled.get() else \"http\""
    },
    {
        "line": 141,
        "fullcodeline": "watchers.append("
    },
    {
        "line": 151,
        "fullcodeline": "log_host = \"localhost\" if host in [\"0.0.0.0\", \"::\"] else host"
    },
    {
        "line": 154,
        "fullcodeline": "inject_env = {\"BENTOML_RUNNER_MAP\": json.dumps(dependency_map)}"
    },
    {
        "line": 161,
        "fullcodeline": "arbiter_kwargs: dict[str, t.Any] = {\"watchers\": watchers, \"sockets\": sockets}"
    },
    {
        "line": 172,
        "fullcodeline": "arbiter = create_standalone_arbiter(**arbiter_kwargs)"
    },
    {
        "line": 61,
        "fullcodeline": "if not service_name and not development_mode:"
    },
    {
        "line": 98,
        "fullcodeline": "CircusSocket("
    },
    {
        "line": 142,
        "fullcodeline": "create_watcher("
    },
    {
        "line": 155,
        "fullcodeline": "for watcher in watchers:"
    },
    {
        "line": 173,
        "fullcodeline": "with track_serve(svc, production=not development_mode):"
    },
    {
        "line": 85,
        "fullcodeline": "ipaddr = ipaddress.ip_address(host)"
    },
    {
        "line": 123,
        "fullcodeline": "f\"$(circus.sockets.{API_SERVER_NAME})\","
    },
    {
        "line": 127,
        "fullcodeline": "str(backlog),"
    },
    {
        "line": 132,
        "fullcodeline": "*ssl_args,"
    },
    {
        "line": 133,
        "fullcodeline": "*timeout_args,"
    },
    {
        "line": 136,
        "fullcodeline": "server_args.extend([\"--worker-env\", json.dumps(worker_envs)])"
    },
    {
        "line": 138,
        "fullcodeline": "server_args.append(\"--development-mode\")"
    },
    {
        "line": 145,
        "fullcodeline": "working_dir=str(bento_path.absolute()),"
    },
    {
        "line": 147,
        "fullcodeline": "close_child_stdin=not development_mode,"
    },
    {
        "line": 164,
        "fullcodeline": "reload_plugin = make_reload_plugin(str(bento_path.absolute()), bentoml_home)"
    },
    {
        "line": 165,
        "fullcodeline": "arbiter_kwargs[\"plugins\"] = [reload_plugin]"
    },
    {
        "line": 168,
        "fullcodeline": "arbiter_kwargs[\"debug\"] = True"
    },
    {
        "line": 169,
        "fullcodeline": "arbiter_kwargs[\"loggerconfig\"] = SERVER_LOGGING_CONFIG"
    },
    {
        "line": 170,
        "fullcodeline": "arbiter_kwargs[\"loglevel\"] = \"WARNING\""
    },
    {
        "line": 62,
        "fullcodeline": "with contextlib.ExitStack() as port_stack:"
    },
    {
        "line": 86,
        "fullcodeline": "if ipaddr.version == 4:"
    },
    {
        "line": 174,
        "fullcodeline": "arbiter.start("
    },
    {
        "line": 87,
        "fullcodeline": "family = socket.AF_INET"
    },
    {
        "line": 95,
        "fullcodeline": "raise BentoMLConfigException(f\"Invalid host IP address: {host}\") from e"
    },
    {
        "line": 156,
        "fullcodeline": "if watcher.env is None:"
    },
    {
        "line": 82,
        "fullcodeline": "port_stack.enter_context(reserve_free_port())"
    },
    {
        "line": 88,
        "fullcodeline": "elif ipaddr.version == 6:"
    },
    {
        "line": 157,
        "fullcodeline": "watcher.env = inject_env"
    },
    {
        "line": 63,
        "fullcodeline": "for name, dep_svc in svc.all_services().items():"
    },
    {
        "line": 89,
        "fullcodeline": "family = socket.AF_INET6"
    },
    {
        "line": 91,
        "fullcodeline": "raise BentoMLConfigException("
    },
    {
        "line": 159,
        "fullcodeline": "watcher.env.update(inject_env)"
    },
    {
        "line": 78,
        "fullcodeline": "watchers.append(new_watcher)"
    },
    {
        "line": 79,
        "fullcodeline": "sockets.append(new_socket)"
    },
    {
        "line": 80,
        "fullcodeline": "dependency_map[name] = uri"
    },
    {
        "line": 92,
        "fullcodeline": "f\"Unsupported host IP address version: {ipaddr.version}\""
    },
    {
        "line": 64,
        "fullcodeline": "if name == svc.name:"
    },
    {
        "line": 66,
        "fullcodeline": "if name in dependency_map:"
    },
    {
        "line": 68,
        "fullcodeline": "new_watcher, new_socket, uri = create_dependency_watcher("
    },
    {
        "line": 76,
        "fullcodeline": "str(bento_path.absolute()),"
    }
]