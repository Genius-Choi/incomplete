[
    {
        "line": 24,
        "fullcodeline": "import psutil"
    },
    {
        "line": 25,
        "fullcodeline": "import uvicorn"
    },
    {
        "line": 39,
        "fullcodeline": "from _bentoml_impl.loader import import_service"
    },
    {
        "line": 40,
        "fullcodeline": "from bentoml._internal.container import BentoMLContainer"
    },
    {
        "line": 41,
        "fullcodeline": "from bentoml._internal.context import component_context"
    },
    {
        "line": 42,
        "fullcodeline": "from bentoml._internal.log import configure_server_logging"
    },
    {
        "line": 44,
        "fullcodeline": "from ..server.app import ServiceAppFactory"
    },
    {
        "line": 51,
        "fullcodeline": "service = import_service(bento_identifier)"
    },
    {
        "line": 52,
        "fullcodeline": "service.inject_config()"
    },
    {
        "line": 63,
        "fullcodeline": "configure_server_logging()"
    },
    {
        "line": 68,
        "fullcodeline": "component_context.component_name = service.name"
    },
    {
        "line": 70,
        "fullcodeline": "app_factory = ServiceAppFactory(service)"
    },
    {
        "line": 71,
        "fullcodeline": "asgi_app = app_factory(is_main=is_main)"
    },
    {
        "line": 72,
        "fullcodeline": "uvicorn_extra_options: dict[str, t.Any] = {}"
    },
    {
        "line": 90,
        "fullcodeline": "uvicorn.run("
    },
    {
        "line": 54,
        "fullcodeline": "if service_name and service_name != service.name:"
    },
    {
        "line": 60,
        "fullcodeline": "if worker_id is not None:"
    },
    {
        "line": 64,
        "fullcodeline": "BentoMLContainer.development_mode.set(development_mode)"
    },
    {
        "line": 66,
        "fullcodeline": "if prometheus_dir is not None:"
    },
    {
        "line": 73,
        "fullcodeline": "if ssl_version is not None:"
    },
    {
        "line": 75,
        "fullcodeline": "if ssl_cert_reqs is not None:"
    },
    {
        "line": 77,
        "fullcodeline": "if ssl_ciphers is not None:"
    },
    {
        "line": 28,
        "fullcodeline": "env_list: list[dict[str, t.Any]] = json.loads(worker_env)"
    },
    {
        "line": 55,
        "fullcodeline": "service = service.find_dependent(service_name)"
    },
    {
        "line": 56,
        "fullcodeline": "component_context.component_type = \"service\""
    },
    {
        "line": 58,
        "fullcodeline": "component_context.component_type = \"entry_service\""
    },
    {
        "line": 61,
        "fullcodeline": "component_context.component_index = worker_id"
    },
    {
        "line": 74,
        "fullcodeline": "uvicorn_extra_options[\"ssl_version\"] = ssl_version"
    },
    {
        "line": 76,
        "fullcodeline": "uvicorn_extra_options[\"ssl_cert_reqs\"] = ssl_cert_reqs"
    },
    {
        "line": 78,
        "fullcodeline": "uvicorn_extra_options[\"ssl_ciphers\"] = ssl_ciphers"
    },
    {
        "line": 85,
        "fullcodeline": "uvicorn_extra_options[\"loop\"] = \"asyncio\""
    },
    {
        "line": 86,
        "fullcodeline": "import asyncio"
    },
    {
        "line": 88,
        "fullcodeline": "asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())  # type: ignore"
    },
    {
        "line": 29,
        "fullcodeline": "if worker_id is not None:"
    },
    {
        "line": 47,
        "fullcodeline": "BentoMLContainer.remote_runner_mapping.set("
    },
    {
        "line": 67,
        "fullcodeline": "BentoMLContainer.prometheus_multiproc_dir.set(prometheus_dir)"
    },
    {
        "line": 31,
        "fullcodeline": "worker_key = worker_id - 1"
    },
    {
        "line": 48,
        "fullcodeline": "t.cast(t.Dict[str, str], json.loads(runner_map))"
    },
    {
        "line": 32,
        "fullcodeline": "if worker_key >= len(env_list):"
    },
    {
        "line": 37,
        "fullcodeline": "os.environ.update(env_list[worker_key])"
    },
    {
        "line": 33,
        "fullcodeline": "raise IndexError("
    },
    {
        "line": 34,
        "fullcodeline": "f\"Worker ID {worker_id} is out of range, \""
    },
    {
        "line": 35,
        "fullcodeline": "f\"the maximum worker ID is {len(env_list)}\""
    }
]