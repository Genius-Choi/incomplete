[
    {
        "line": 4,
        "fullcodeline": "char buf[128];"
    },
    {
        "line": 15,
        "fullcodeline": "cp = strchr(ip_as_string, ':');"
    },
    {
        "line": 16,
        "fullcodeline": "if (*ip_as_string == '[') {"
    },
    {
        "line": 52,
        "fullcodeline": "if (port_part == NULL) {"
    },
    {
        "line": 61,
        "fullcodeline": "if (!addr_part)"
    },
    {
        "line": 86,
        "fullcodeline": "memset(&sin, 0, sizeof(sin));"
    },
    {
        "line": 96,
        "fullcodeline": "memset(out, 0, *outlen);"
    },
    {
        "line": 21,
        "fullcodeline": "len = ( cp-(ip_as_string + 1) );"
    },
    {
        "line": 25,
        "fullcodeline": "memcpy(buf, ip_as_string+1, len);"
    },
    {
        "line": 26,
        "fullcodeline": "buf[len] = '\\0';"
    },
    {
        "line": 27,
        "fullcodeline": "addr_part = buf;"
    },
    {
        "line": 53,
        "fullcodeline": "port = 0;"
    },
    {
        "line": 91,
        "fullcodeline": "sin.sin_port = htons(port);"
    },
    {
        "line": 94,
        "fullcodeline": "if ((int)sizeof(sin) > *outlen)"
    },
    {
        "line": 18,
        "fullcodeline": "if (!(cp = strchr(ip_as_string, ']'))) {"
    },
    {
        "line": 22,
        "fullcodeline": "if (len > sizeof(buf)-1) {"
    },
    {
        "line": 28,
        "fullcodeline": "if (cp[1] == ':')"
    },
    {
        "line": 55,
        "fullcodeline": "port = atoi(port_part);"
    },
    {
        "line": 62,
        "fullcodeline": "return -1; /* Should be impossible. */"
    },
    {
        "line": 92,
        "fullcodeline": "if (1 != evutil_inet_pton(AF_INET, addr_part, &sin.sin_addr))"
    },
    {
        "line": 29,
        "fullcodeline": "port_part = cp+2;"
    },
    {
        "line": 33,
        "fullcodeline": "} else if (cp && strchr(cp+1, ':')) {"
    },
    {
        "line": 93,
        "fullcodeline": "return -1;"
    },
    {
        "line": 95,
        "fullcodeline": "return -1;"
    },
    {
        "line": 19,
        "fullcodeline": "return -1;"
    },
    {
        "line": 23,
        "fullcodeline": "return -1;"
    },
    {
        "line": 31,
        "fullcodeline": "port_part = NULL;"
    },
    {
        "line": 35,
        "fullcodeline": "addr_part = ip_as_string;"
    },
    {
        "line": 36,
        "fullcodeline": "port_part = NULL;"
    },
    {
        "line": 56,
        "fullcodeline": "if (port <= 0 || port > 65535) {"
    },
    {
        "line": 57,
        "fullcodeline": "return -1;"
    },
    {
        "line": 42,
        "fullcodeline": "memcpy(buf, ip_as_string, cp-ip_as_string);"
    },
    {
        "line": 43,
        "fullcodeline": "buf[cp-ip_as_string] = '\\0';"
    },
    {
        "line": 44,
        "fullcodeline": "addr_part = buf;"
    },
    {
        "line": 45,
        "fullcodeline": "port_part = cp+1;"
    },
    {
        "line": 47,
        "fullcodeline": "addr_part = ip_as_string;"
    },
    {
        "line": 48,
        "fullcodeline": "port_part = NULL;"
    },
    {
        "line": 39,
        "fullcodeline": "if (cp - ip_as_string > (int)sizeof(buf)-1) {"
    },
    {
        "line": 40,
        "fullcodeline": "return -1;"
    }
]