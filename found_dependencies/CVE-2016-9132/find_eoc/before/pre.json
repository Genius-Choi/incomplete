[
    {
        "line": 3,
        "fullcodeline": "secure_vector<byte> buffer(DEFAULT_BUFFERSIZE), data;"
    },
    {
        "line": 14,
        "fullcodeline": "DataSource_Memory source(data);"
    },
    {
        "line": 15,
        "fullcodeline": "data.clear();"
    },
    {
        "line": 17,
        "fullcodeline": "size_t length = 0;"
    },
    {
        "line": 7,
        "fullcodeline": "const size_t got = ber->peek(buffer.data(), buffer.size(), data.size());"
    },
    {
        "line": 11,
        "fullcodeline": "data += std::make_pair(buffer.data(), got);"
    },
    {
        "line": 21,
        "fullcodeline": "size_t tag_size = decode_tag(&source, type_tag, class_tag);"
    },
    {
        "line": 25,
        "fullcodeline": "size_t length_size = 0;"
    },
    {
        "line": 26,
        "fullcodeline": "size_t item_size = decode_length(&source, length_size);"
    },
    {
        "line": 27,
        "fullcodeline": "source.discard_next(item_size);"
    },
    {
        "line": 29,
        "fullcodeline": "length += item_size + length_size + tag_size;"
    },
    {
        "line": 8,
        "fullcodeline": "if(got == 0)"
    },
    {
        "line": 22,
        "fullcodeline": "if(type_tag == NO_OBJECT)"
    },
    {
        "line": 31,
        "fullcodeline": "if(type_tag == EOC && class_tag == UNIVERSAL)"
    }
]