[
    {
        "line": 4,
        "fullcodeline": "x3f_directory_entry_header_t *DEH = &DE->header;"
    },
    {
        "line": 6,
        "fullcodeline": "x3f_true_t *TRU = new_true(&ID->tru);"
    },
    {
        "line": 7,
        "fullcodeline": "x3f_quattro_t *Q = NULL;"
    },
    {
        "line": 35,
        "fullcodeline": "GET2(TRU->unknown);"
    },
    {
        "line": 36,
        "fullcodeline": "GET_TRUE_HUFF_TABLE(TRU->table);"
    },
    {
        "line": 46,
        "fullcodeline": "GET_TABLE(TRU->plane_size, GET4, TRUE_PLANES,uint32_t);"
    },
    {
        "line": 53,
        "fullcodeline": "new_huffman_tree(&TRU->tree, 8);"
    },
    {
        "line": 55,
        "fullcodeline": "populate_true_huffman_tree(&TRU->tree, &TRU->table);"
    },
    {
        "line": 61,
        "fullcodeline": "TRU->plane_address[0] = (uint8_t*)ID->data;"
    },
    {
        "line": 108,
        "fullcodeline": "true_decode(I, DE);"
    },
    {
        "line": 10,
        "fullcodeline": "if (ID->type_format == X3F_IMAGE_RAW_QUATTRO"
    },
    {
        "line": 38,
        "fullcodeline": "if (ID->type_format == X3F_IMAGE_RAW_QUATTRO"
    },
    {
        "line": 49,
        "fullcodeline": "if (!ID->data_size)"
    },
    {
        "line": 62,
        "fullcodeline": "for (i=1; i<TRUE_PLANES; i++)"
    },
    {
        "line": 63,
        "fullcodeline": "TRU->plane_address[i] ="
    },
    {
        "line": 67,
        "fullcodeline": "if ( (ID->type_format == X3F_IMAGE_RAW_QUATTRO"
    },
    {
        "line": 13,
        "fullcodeline": "||\tID->type_format == X3F_IMAGE_RAW_SDQH2"
    },
    {
        "line": 15,
        "fullcodeline": "Q = new_quattro(&ID->quattro);"
    },
    {
        "line": 41,
        "fullcodeline": "||ID->type_format == X3F_IMAGE_RAW_SDQH2"
    },
    {
        "line": 43,
        "fullcodeline": "GET4(Q->unknown);"
    },
    {
        "line": 50,
        "fullcodeline": "ID->data_size = read_data_block(&ID->data, I, DE, 0);"
    },
    {
        "line": 64,
        "fullcodeline": "TRU->plane_address[i-1] +"
    },
    {
        "line": 74,
        "fullcodeline": "uint32_t rows = Q->plane[0].rows;"
    },
    {
        "line": 75,
        "fullcodeline": "uint32_t channels = 3;"
    },
    {
        "line": 76,
        "fullcodeline": "uint32_t size = columns * rows * channels;"
    },
    {
        "line": 78,
        "fullcodeline": "TRU->x3rgb16.columns = columns;"
    },
    {
        "line": 79,
        "fullcodeline": "TRU->x3rgb16.rows = rows;"
    },
    {
        "line": 80,
        "fullcodeline": "TRU->x3rgb16.channels = channels;"
    },
    {
        "line": 81,
        "fullcodeline": "TRU->x3rgb16.row_stride = columns * channels;"
    },
    {
        "line": 82,
        "fullcodeline": "TRU->x3rgb16.buf = malloc(sizeof(uint16_t)*size);"
    },
    {
        "line": 83,
        "fullcodeline": "TRU->x3rgb16.data = (uint16_t *) TRU->x3rgb16.buf;"
    },
    {
        "line": 87,
        "fullcodeline": "channels = 1;"
    },
    {
        "line": 88,
        "fullcodeline": "size = columns * rows * channels;"
    },
    {
        "line": 90,
        "fullcodeline": "Q->top16.columns = columns;"
    },
    {
        "line": 91,
        "fullcodeline": "Q->top16.rows = rows;"
    },
    {
        "line": 92,
        "fullcodeline": "Q->top16.channels = channels;"
    },
    {
        "line": 93,
        "fullcodeline": "Q->top16.row_stride = columns * channels;"
    },
    {
        "line": 94,
        "fullcodeline": "Q->top16.buf = malloc(sizeof(uint16_t)*size);"
    },
    {
        "line": 95,
        "fullcodeline": "Q->top16.data = (uint16_t *)Q->top16.buf;"
    },
    {
        "line": 12,
        "fullcodeline": "||\tID->type_format == X3F_IMAGE_RAW_SDQH"
    },
    {
        "line": 17,
        "fullcodeline": "for (i=0; i<TRUE_PLANES; i++) {"
    },
    {
        "line": 22,
        "fullcodeline": "if (Q->plane[0].rows == ID->rows/2) {"
    },
    {
        "line": 40,
        "fullcodeline": "||ID->type_format == X3F_IMAGE_RAW_SDQH"
    },
    {
        "line": 65,
        "fullcodeline": "(((TRU->plane_size.element[i-1] + 15) / 16) * 16);"
    },
    {
        "line": 70,
        "fullcodeline": "|| ID->type_format == X3F_IMAGE_RAW_SDQH2"
    },
    {
        "line": 98,
        "fullcodeline": "uint32_t size = ID->columns * ID->rows * 3;"
    },
    {
        "line": 100,
        "fullcodeline": "TRU->x3rgb16.columns = ID->columns;"
    },
    {
        "line": 101,
        "fullcodeline": "TRU->x3rgb16.rows = ID->rows;"
    },
    {
        "line": 102,
        "fullcodeline": "TRU->x3rgb16.channels = 3;"
    },
    {
        "line": 103,
        "fullcodeline": "TRU->x3rgb16.row_stride = ID->columns * 3;"
    },
    {
        "line": 104,
        "fullcodeline": "TRU->x3rgb16.buf =malloc(sizeof(uint16_t)*size);"
    },
    {
        "line": 105,
        "fullcodeline": "TRU->x3rgb16.data = (uint16_t *)TRU->x3rgb16.buf;"
    },
    {
        "line": 11,
        "fullcodeline": "||\tID->type_format == X3F_IMAGE_RAW_SDQ"
    },
    {
        "line": 23,
        "fullcodeline": "Q->quattro_layout = 1;"
    },
    {
        "line": 39,
        "fullcodeline": "||ID->type_format == X3F_IMAGE_RAW_SDQ"
    },
    {
        "line": 69,
        "fullcodeline": "|| ID->type_format == X3F_IMAGE_RAW_SDQH"
    },
    {
        "line": 68,
        "fullcodeline": "|| ID->type_format == X3F_IMAGE_RAW_SDQ"
    },
    {
        "line": 24,
        "fullcodeline": "} else if (Q->plane[0].rows == ID->rows) {"
    },
    {
        "line": 25,
        "fullcodeline": "Q->quattro_layout = 0;"
    }
]