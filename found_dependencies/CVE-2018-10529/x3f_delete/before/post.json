[
    {
        "line": 9,
        "fullcodeline": "DS = &x3f->directory_section;"
    },
    {
        "line": 60,
        "fullcodeline": "FREE(DS->directory_entry);"
    },
    {
        "line": 61,
        "fullcodeline": "FREE(x3f);"
    },
    {
        "line": 6,
        "fullcodeline": "if (x3f == NULL)"
    },
    {
        "line": 10,
        "fullcodeline": "if (DS->num_directory_entries > 50)"
    },
    {
        "line": 13,
        "fullcodeline": "for (d=0; d<DS->num_directory_entries; d++) {"
    },
    {
        "line": 15,
        "fullcodeline": "x3f_directory_entry_header_t *DEH = &DE->header;"
    },
    {
        "line": 16,
        "fullcodeline": "if (DEH->identifier == X3F_SECp) {"
    },
    {
        "line": 31,
        "fullcodeline": "if (DEH->identifier == X3F_SECi) {"
    },
    {
        "line": 43,
        "fullcodeline": "if (DEH->identifier == X3F_SECc) {"
    },
    {
        "line": 28,
        "fullcodeline": "FREE(PL->data);"
    },
    {
        "line": 56,
        "fullcodeline": "FREE(CAMF->entry_table.element);"
    },
    {
        "line": 36,
        "fullcodeline": "cleanup_huffman(&ID->huffman);"
    },
    {
        "line": 37,
        "fullcodeline": "cleanup_true(&ID->tru);"
    },
    {
        "line": 38,
        "fullcodeline": "cleanup_quattro(&ID->quattro);"
    },
    {
        "line": 39,
        "fullcodeline": "FREE(ID->data);"
    },
    {
        "line": 48,
        "fullcodeline": "FREE(CAMF->data);"
    },
    {
        "line": 50,
        "fullcodeline": "cleanup_huffman_tree(&CAMF->tree);"
    },
    {
        "line": 51,
        "fullcodeline": "FREE(CAMF->decoded_data);"
    },
    {
        "line": 22,
        "fullcodeline": "for (i = 0; i < PL->property_table.size; i++) {"
    },
    {
        "line": 52,
        "fullcodeline": "for (i = 0; i < CAMF->entry_table.size; i++) {"
    }
]