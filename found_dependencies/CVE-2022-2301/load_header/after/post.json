[
    {
        "line": 3,
        "fullcodeline": "XwdHeader *h = &loader->header;"
    },
    {
        "line": 10,
        "fullcodeline": "inp = &in;"
    },
    {
        "line": 12,
        "fullcodeline": "UNPACK_FIELD_U32 (h, inp, header_size);"
    },
    {
        "line": 13,
        "fullcodeline": "UNPACK_FIELD_U32 (h, inp, file_version);"
    },
    {
        "line": 14,
        "fullcodeline": "UNPACK_FIELD_U32 (h, inp, pixmap_format);"
    },
    {
        "line": 15,
        "fullcodeline": "UNPACK_FIELD_U32 (h, inp, pixmap_depth);"
    },
    {
        "line": 16,
        "fullcodeline": "UNPACK_FIELD_U32 (h, inp, pixmap_width);"
    },
    {
        "line": 17,
        "fullcodeline": "UNPACK_FIELD_U32 (h, inp, pixmap_height);"
    },
    {
        "line": 18,
        "fullcodeline": "UNPACK_FIELD_U32 (h, inp, x_offset);"
    },
    {
        "line": 19,
        "fullcodeline": "UNPACK_FIELD_U32 (h, inp, byte_order);"
    },
    {
        "line": 20,
        "fullcodeline": "UNPACK_FIELD_U32 (h, inp, bitmap_unit);"
    },
    {
        "line": 21,
        "fullcodeline": "UNPACK_FIELD_U32 (h, inp, bitmap_bit_order);"
    },
    {
        "line": 22,
        "fullcodeline": "UNPACK_FIELD_U32 (h, inp, bitmap_pad);"
    },
    {
        "line": 23,
        "fullcodeline": "UNPACK_FIELD_U32 (h, inp, bits_per_pixel);"
    },
    {
        "line": 24,
        "fullcodeline": "UNPACK_FIELD_U32 (h, inp, bytes_per_line);"
    },
    {
        "line": 25,
        "fullcodeline": "UNPACK_FIELD_U32 (h, inp, visual_class);"
    },
    {
        "line": 26,
        "fullcodeline": "UNPACK_FIELD_U32 (h, inp, red_mask);"
    },
    {
        "line": 27,
        "fullcodeline": "UNPACK_FIELD_U32 (h, inp, green_mask);"
    },
    {
        "line": 28,
        "fullcodeline": "UNPACK_FIELD_U32 (h, inp, blue_mask);"
    },
    {
        "line": 29,
        "fullcodeline": "UNPACK_FIELD_U32 (h, inp, bits_per_rgb);"
    },
    {
        "line": 30,
        "fullcodeline": "UNPACK_FIELD_U32 (h, inp, color_map_entries);"
    },
    {
        "line": 31,
        "fullcodeline": "UNPACK_FIELD_U32 (h, inp, n_colors);"
    },
    {
        "line": 32,
        "fullcodeline": "UNPACK_FIELD_U32 (h, inp, window_width);"
    },
    {
        "line": 33,
        "fullcodeline": "UNPACK_FIELD_U32 (h, inp, window_height);"
    },
    {
        "line": 34,
        "fullcodeline": "UNPACK_FIELD_S32 (h, inp, window_x);"
    },
    {
        "line": 35,
        "fullcodeline": "UNPACK_FIELD_S32 (h, inp, window_y);"
    },
    {
        "line": 36,
        "fullcodeline": "UNPACK_FIELD_U32 (h, inp, window_border_width);"
    },
    {
        "line": 43,
        "fullcodeline": "ASSERT_HEADER (h->header_size >= sizeof (XwdHeader));"
    },
    {
        "line": 44,
        "fullcodeline": "ASSERT_HEADER (h->header_size <= 65535);"
    },
    {
        "line": 45,
        "fullcodeline": "ASSERT_HEADER (h->file_version == 7);"
    },
    {
        "line": 46,
        "fullcodeline": "ASSERT_HEADER (h->pixmap_depth == 24);"
    },
    {
        "line": 49,
        "fullcodeline": "ASSERT_HEADER (h->color_map_entries <= 256);"
    },
    {
        "line": 53,
        "fullcodeline": "ASSERT_HEADER (h->bits_per_rgb == 8 || h->bits_per_rgb == 24);"
    },
    {
        "line": 56,
        "fullcodeline": "ASSERT_HEADER (h->bits_per_pixel == 24 || h->bits_per_pixel == 32);"
    },
    {
        "line": 59,
        "fullcodeline": "ASSERT_HEADER (h->pixmap_width >= 1 && h->pixmap_width <= 65535);"
    },
    {
        "line": 60,
        "fullcodeline": "ASSERT_HEADER (h->pixmap_height >= 1 && h->pixmap_height <= 65535);"
    },
    {
        "line": 64,
        "fullcodeline": "ASSERT_HEADER (h->bytes_per_line >= h->pixmap_width * (h->bits_per_pixel / 8));"
    },
    {
        "line": 65,
        "fullcodeline": "ASSERT_HEADER (h->bytes_per_line <= h->pixmap_width * (h->bits_per_pixel / 8) + 1024);"
    },
    {
        "line": 68,
        "fullcodeline": "ASSERT_HEADER (h->bytes_per_line * h->pixmap_height < (1UL << 31) - 65536 - 256 * 32);"
    },
    {
        "line": 70,
        "fullcodeline": "ASSERT_HEADER (compute_pixel_type (loader) < CHAFA_PIXEL_MAX);"
    },
    {
        "line": 72,
        "fullcodeline": "loader->file_data = file_mapping_get_data (loader->mapping, &loader->file_data_len);"
    },
    {
        "line": 76,
        "fullcodeline": "ASSERT_HEADER (loader->file_data_len >= h->header_size"
    },
    {
        "line": 80,
        "fullcodeline": "loader->image_data = (const guint8 *) loader->file_data"
    },
    {
        "line": 7,
        "fullcodeline": "if (!file_mapping_taste (loader->mapping, &in, 0, sizeof (in)))"
    },
    {
        "line": 73,
        "fullcodeline": "if (!loader->file_data)"
    },
    {
        "line": 81,
        "fullcodeline": "+ h->header_size + h->color_map_entries * sizeof (XwdColor);"
    },
    {
        "line": 78,
        "fullcodeline": "+ h->pixmap_height * (gsize) h->bytes_per_line);"
    },
    {
        "line": 77,
        "fullcodeline": "+ h->color_map_entries * sizeof (XwdColor)"
    }
]