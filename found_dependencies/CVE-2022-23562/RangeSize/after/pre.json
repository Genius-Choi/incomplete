[
    {
        "line": 3,
        "fullcodeline": "T start = start_t->scalar<T>()();"
    },
    {
        "line": 4,
        "fullcodeline": "T limit = limit_t->scalar<T>()();"
    },
    {
        "line": 5,
        "fullcodeline": "T delta = delta_t->scalar<T>()();"
    },
    {
        "line": 18,
        "fullcodeline": "auto size = (std::is_integral<T>::value"
    },
    {
        "line": 6,
        "fullcodeline": "if (start > limit && delta > T(0)) {"
    },
    {
        "line": 14,
        "fullcodeline": "if (delta == T(0)) {"
    },
    {
        "line": 31,
        "fullcodeline": "c->set_output(0, c->Vector(static_cast<int64_t>(size)));"
    },
    {
        "line": 32,
        "fullcodeline": "return Status::OK();"
    },
    {
        "line": 10,
        "fullcodeline": "if (start < limit && delta < T(0)) {"
    },
    {
        "line": 19,
        "fullcodeline": "? ((Eigen::numext::abs(limit - start) +"
    },
    {
        "line": 22,
        "fullcodeline": ": (Eigen::numext::ceil("
    },
    {
        "line": 26,
        "fullcodeline": "if (size > std::numeric_limits<int64_t>::max()) {"
    },
    {
        "line": 7,
        "fullcodeline": "return errors::InvalidArgument("
    },
    {
        "line": 11,
        "fullcodeline": "return errors::InvalidArgument("
    },
    {
        "line": 15,
        "fullcodeline": "return errors::InvalidArgument(\"Requires delta != 0\");"
    },
    {
        "line": 21,
        "fullcodeline": "Eigen::numext::abs(delta))"
    },
    {
        "line": 23,
        "fullcodeline": "Eigen::numext::abs((limit - start) / delta))));"
    },
    {
        "line": 27,
        "fullcodeline": "return errors::InvalidArgument(\"Requires ((limit - start) / delta) <= \","
    },
    {
        "line": 20,
        "fullcodeline": "Eigen::numext::abs(delta) - T(1)) /"
    },
    {
        "line": 28,
        "fullcodeline": "std::numeric_limits<int64_t>::max());"
    }
]