[
    {
        "line": 6,
        "fullcodeline": "const Tensor& shape_tensor = ctx->input(base_index + 2);"
    },
    {
        "line": 12,
        "fullcodeline": "CheckRankAtLeast2(ctx, shape);"
    },
    {
        "line": 16,
        "fullcodeline": "Status status = sparse::SparseTensor::Create("
    },
    {
        "line": 7,
        "fullcodeline": "if (shape_tensor.dims() != 1) {"
    },
    {
        "line": 11,
        "fullcodeline": "TensorShape::BuildTensorShape(shape_tensor.vec<int64_t>(), &shape));"
    },
    {
        "line": 13,
        "fullcodeline": "std::vector<int64_t> order(shape.dims());"
    },
    {
        "line": 14,
        "fullcodeline": "std::iota(order.begin(), order.end(), 0);"
    },
    {
        "line": 20,
        "fullcodeline": "return tensor->IndicesValid();"
    },
    {
        "line": 17,
        "fullcodeline": "ctx->input(base_index), ctx->input(base_index + 1), shape, order, tensor);"
    },
    {
        "line": 19,
        "fullcodeline": "if (!validate_indices || !status.ok()) return status;"
    },
    {
        "line": 8,
        "fullcodeline": "return errors::InvalidArgument(\"Shape must be a 1D tensor.\");"
    }
]