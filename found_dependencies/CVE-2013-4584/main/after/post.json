[
    {
        "line": 2,
        "fullcodeline": "STRUCT_AUTH(auth);"
    },
    {
        "line": 3,
        "fullcodeline": "char *server_resp_buf = NULL;"
    },
    {
        "line": 5,
        "fullcodeline": "user_server_port_t *usp=NULL;"
    },
    {
        "line": 6,
        "fullcodeline": "protocol_t *protocol=NULL;"
    },
    {
        "line": 7,
        "fullcodeline": "token_t *our_tag=NULL;"
    },
    {
        "line": 8,
        "fullcodeline": "token_t *client_tag=NULL;"
    },
    {
        "line": 9,
        "fullcodeline": "size_t server_resp_buf_size=0;"
    },
    {
        "line": 10,
        "fullcodeline": "flag_t tls_state = 0;"
    },
    {
        "line": 12,
        "fullcodeline": "char from_to_host_str[((NI_MAXHOST+NI_MAXSERV)*2)+2];"
    },
    {
        "line": 13,
        "fullcodeline": "char from_host_str[NI_MAXHOST];"
    },
    {
        "line": 14,
        "fullcodeline": "char to_host_str[NI_MAXHOST];"
    },
    {
        "line": 15,
        "fullcodeline": "char from_serv_str[NI_MAXSERV];"
    },
    {
        "line": 16,
        "fullcodeline": "char to_serv_str[NI_MAXSERV];"
    },
    {
        "line": 17,
        "fullcodeline": "char *servername=NULL;"
    },
    {
        "line": 18,
        "fullcodeline": "char *port=NULL;"
    },
    {
        "line": 19,
        "fullcodeline": "io_t *client_io=NULL;"
    },
    {
        "line": 20,
        "fullcodeline": "io_t *server_io=NULL;"
    },
    {
        "line": 22,
        "fullcodeline": "size_t bytes_written = 0;"
    },
    {
        "line": 23,
        "fullcodeline": "size_t bytes_read = 0;"
    },
    {
        "line": 25,
        "fullcodeline": "int round_robin_server=0;"
    },
    {
        "line": 27,
        "fullcodeline": "int s=-1;"
    },
    {
        "line": 28,
        "fullcodeline": "int *g = NULL;"
    },
    {
        "line": 37,
        "fullcodeline": "progname = argv[0];"
    },
    {
        "line": 38,
        "fullcodeline": "logger_init();"
    },
    {
        "line": 41,
        "fullcodeline": "options(argc, argv, OPT_FIRST_CALL);"
    },
    {
        "line": 49,
        "fullcodeline": "init_set_proc_title(argc, argv, envp);"
    },
    {
        "line": 50,
        "fullcodeline": "progname = strdup(get_progname(argv[0]));"
    },
    {
        "line": 56,
        "fullcodeline": "set_proc_title(\"%s: daemon\", progname);"
    },
    {
        "line": 73,
        "fullcodeline": "signal(SIGHUP,    perdition_reread_handler);"
    },
    {
        "line": 74,
        "fullcodeline": "signal(SIGINT,    perdition_exit_cleanly);"
    },
    {
        "line": 75,
        "fullcodeline": "signal(SIGQUIT,   perdition_exit_cleanly);"
    },
    {
        "line": 76,
        "fullcodeline": "signal(SIGILL,    perdition_exit_cleanly);"
    },
    {
        "line": 77,
        "fullcodeline": "signal(SIGTRAP,   perdition_exit_cleanly);"
    },
    {
        "line": 78,
        "fullcodeline": "signal(SIGIOT,    perdition_exit_cleanly);"
    },
    {
        "line": 79,
        "fullcodeline": "signal(SIGBUS,    perdition_exit_cleanly);"
    },
    {
        "line": 80,
        "fullcodeline": "signal(SIGFPE,    perdition_exit_cleanly);"
    },
    {
        "line": 81,
        "fullcodeline": "signal(SIGUSR1,   vanessa_socket_handler_noop);"
    },
    {
        "line": 82,
        "fullcodeline": "signal(SIGSEGV,   perdition_exit_cleanly);"
    },
    {
        "line": 83,
        "fullcodeline": "signal(SIGUSR2,   vanessa_socket_handler_noop);"
    },
    {
        "line": 84,
        "fullcodeline": "signal(SIGPIPE,   SIG_IGN);"
    },
    {
        "line": 85,
        "fullcodeline": "signal(SIGALRM,   perdition_exit_cleanly);"
    },
    {
        "line": 86,
        "fullcodeline": "signal(SIGTERM,   perdition_exit_cleanly);"
    },
    {
        "line": 87,
        "fullcodeline": "signal(SIGCHLD,   vanessa_socket_handler_reaper);"
    },
    {
        "line": 88,
        "fullcodeline": "signal(SIGURG,    perdition_exit_cleanly);"
    },
    {
        "line": 89,
        "fullcodeline": "signal(SIGXCPU,   perdition_exit_cleanly);"
    },
    {
        "line": 90,
        "fullcodeline": "signal(SIGXFSZ,   perdition_exit_cleanly);"
    },
    {
        "line": 91,
        "fullcodeline": "signal(SIGVTALRM, perdition_exit_cleanly);"
    },
    {
        "line": 92,
        "fullcodeline": "signal(SIGPROF,   perdition_exit_cleanly);"
    },
    {
        "line": 93,
        "fullcodeline": "signal(SIGWINCH,  perdition_exit_cleanly);"
    },
    {
        "line": 94,
        "fullcodeline": "signal(SIGIO,     perdition_exit_cleanly);"
    },
    {
        "line": 97,
        "fullcodeline": "fh = NULL;"
    },
    {
        "line": 111,
        "fullcodeline": "logger_reopen(fh);"
    },
    {
        "line": 359,
        "fullcodeline": "signal(SIGPIPE,   perdition_exit_cleanly);"
    },
    {
        "line": 394,
        "fullcodeline": "*from_to_host_str='\\0';"
    },
    {
        "line": 407,
        "fullcodeline": "srand(time(NULL)*getpid());"
    },
    {
        "line": 408,
        "fullcodeline": "rnd=rand();"
    },
    {
        "line": 418,
        "fullcodeline": "set_proc_title(\"%s: connect (%s)\", progname, from_to_host_str);"
    },
    {
        "line": 749,
        "fullcodeline": "PERDITION_LOG_AUTH(\"ok\");"
    },
    {
        "line": 756,
        "fullcodeline": "buffer = malloc(BUFFER_SIZE);"
    },
    {
        "line": 764,
        "fullcodeline": "io_set_timeout(client_io, opt.timeout);"
    },
    {
        "line": 765,
        "fullcodeline": "io_set_timeout(server_io, opt.timeout);"
    },
    {
        "line": 783,
        "fullcodeline": "perdition_log_close(from_to_host_str, &auth, bytes_read, bytes_written);"
    },
    {
        "line": 784,
        "fullcodeline": "set_proc_title(\"%s: close (%s)\", progname,"
    },
    {
        "line": 787,
        "fullcodeline": "getserver_closelib(handle);"
    },
    {
        "line": 788,
        "fullcodeline": "perdition_exit_cleanly(0);"
    },
    {
        "line": 44,
        "fullcodeline": "if(opt.config_file!=NULL){"
    },
    {
        "line": 51,
        "fullcodeline": "if (!progname) {"
    },
    {
        "line": 64,
        "fullcodeline": "if(getserver_openlib(opt.map_library, opt.map_library_opt,"
    },
    {
        "line": 98,
        "fullcodeline": "if(opt.log_facility!=NULL) {"
    },
    {
        "line": 114,
        "fullcodeline": "if((system_uname=(struct utsname *)malloc(sizeof(struct utsname)))==NULL){"
    },
    {
        "line": 119,
        "fullcodeline": "if(uname(system_uname)<0){"
    },
    {
        "line": 126,
        "fullcodeline": "if((protocol=protocol_initialise(opt.protocol, protocol))==NULL){"
    },
    {
        "line": 133,
        "fullcodeline": "if((opt.listen_port=protocol->port(opt.listen_port))==NULL){"
    },
    {
        "line": 138,
        "fullcodeline": "if((opt.outgoing_port=protocol->port(opt.outgoing_port))==NULL){"
    },
    {
        "line": 149,
        "fullcodeline": "if(opt.protocol == PROTOCOL_IMAP4 || opt.protocol == PROTOCOL_IMAP4S) {"
    },
    {
        "line": 166,
        "fullcodeline": "if ((!opt.quiet && !opt.inetd_mode && !opt.no_daemon && !fh) || opt.debug) {"
    },
    {
        "line": 192,
        "fullcodeline": "if (opt.inetd_mode || opt.no_daemon || fh != NULL)"
    },
    {
        "line": 203,
        "fullcodeline": "if (!opt.inetd_mode && opt.pid_file && *opt.pid_file) {"
    },
    {
        "line": 228,
        "fullcodeline": "if (!sockname) {"
    },
    {
        "line": 234,
        "fullcodeline": "if (!peername) {"
    },
    {
        "line": 242,
        "fullcodeline": "if(!opt.inetd_mode) {"
    },
    {
        "line": 362,
        "fullcodeline": "if (peername!=NULL) {"
    },
    {
        "line": 378,
        "fullcodeline": "if (sockname!=NULL) {"
    },
    {
        "line": 395,
        "fullcodeline": "if(peername!=NULL && sockname!=NULL){"
    },
    {
        "line": 432,
        "fullcodeline": "if(protocol->greeting(client_io, GREETING_ADD_NODENAME)){"
    },
    {
        "line": 757,
        "fullcodeline": "if (!buffer) {"
    },
    {
        "line": 766,
        "fullcodeline": "if(io_pipe(server_io, client_io, buffer, BUFFER_SIZE,"
    },
    {
        "line": 785,
        "fullcodeline": "str_null_safe(auth_get_authorisation_id(&auth)));"
    },
    {
        "line": 45,
        "fullcodeline": "config_file_to_opt(opt.config_file);"
    },
    {
        "line": 52,
        "fullcodeline": "VANESSA_LOGGER_DEBUG_ERRNO(\"strdup\");"
    },
    {
        "line": 53,
        "fullcodeline": "VANESSA_LOGGER_ERR(\"Error initialising process title\\n\");"
    },
    {
        "line": 54,
        "fullcodeline": "perdition_exit_cleanly(-1);"
    },
    {
        "line": 60,
        "fullcodeline": "vanessa_logger_change_max_priority(vanessa_logger_get(),"
    },
    {
        "line": 66,
        "fullcodeline": "VANESSA_LOGGER_ERR_UNSAFE(\"dlopen of \\\"%s\\\" failed\","
    },
    {
        "line": 68,
        "fullcodeline": "usage(-1);"
    },
    {
        "line": 69,
        "fullcodeline": "perdition_exit_cleanly(-1);"
    },
    {
        "line": 115,
        "fullcodeline": "VANESSA_LOGGER_DEBUG_ERRNO(\"malloc system_uname\");"
    },
    {
        "line": 116,
        "fullcodeline": "VANESSA_LOGGER_ERR(\"Fatal error allocating memory. Exiting.\");"
    },
    {
        "line": 117,
        "fullcodeline": "perdition_exit_cleanly(-1);"
    },
    {
        "line": 120,
        "fullcodeline": "VANESSA_LOGGER_DEBUG(\"uname\");"
    },
    {
        "line": 121,
        "fullcodeline": "VANESSA_LOGGER_ERR(\"Fatal error finding uname for system. Exiting\");"
    },
    {
        "line": 122,
        "fullcodeline": "perdition_exit_cleanly(-1);"
    },
    {
        "line": 127,
        "fullcodeline": "VANESSA_LOGGER_DEBUG(\"protocol_initialise\");"
    },
    {
        "line": 128,
        "fullcodeline": "VANESSA_LOGGER_ERR(\"Fatal error initialising protocol. Exiting.\");"
    },
    {
        "line": 129,
        "fullcodeline": "perdition_exit_cleanly(-1);"
    },
    {
        "line": 134,
        "fullcodeline": "VANESSA_LOGGER_DEBUG(\"protocol->port 1\");"
    },
    {
        "line": 135,
        "fullcodeline": "VANESSA_LOGGER_ERR(\"Fatal error finding port to listen on. Exiting.\");"
    },
    {
        "line": 136,
        "fullcodeline": "perdition_exit_cleanly(-1);"
    },
    {
        "line": 139,
        "fullcodeline": "VANESSA_LOGGER_DEBUG(\"protocol->port 2\");"
    },
    {
        "line": 140,
        "fullcodeline": "VANESSA_LOGGER_ERR(\"Fatal error finding port to connect to. Exiting.\");"
    },
    {
        "line": 141,
        "fullcodeline": "perdition_exit_cleanly(-1);"
    },
    {
        "line": 150,
        "fullcodeline": "our_tag = imap4_tag_create();"
    },
    {
        "line": 193,
        "fullcodeline": "vanessa_socket_daemon_inetd_process();"
    },
    {
        "line": 209,
        "fullcodeline": "pid_file = opt.pid_file;"
    },
    {
        "line": 216,
        "fullcodeline": "server_resp_buf = malloc(MAX_LINE_LENGTH);"
    },
    {
        "line": 229,
        "fullcodeline": "VANESSA_LOGGER_DEBUG_ERRNO(\"malloc sockname\");"
    },
    {
        "line": 230,
        "fullcodeline": "VANESSA_LOGGER_ERR(\"Fatal error allocating memory. Exiting.\");"
    },
    {
        "line": 231,
        "fullcodeline": "perdition_exit_cleanly(-1);"
    },
    {
        "line": 235,
        "fullcodeline": "VANESSA_LOGGER_DEBUG_ERRNO(\"malloc peername\");"
    },
    {
        "line": 236,
        "fullcodeline": "VANESSA_LOGGER_ERR(\"Fatal error allocating memory. Exiting.\");"
    },
    {
        "line": 237,
        "fullcodeline": "perdition_exit_cleanly(-1);"
    },
    {
        "line": 251,
        "fullcodeline": "fromv = malloc(sizeof(*fromv) * ((nfrom * 2) + 1));"
    },
    {
        "line": 275,
        "fullcodeline": "fromv[nfrom * 2] = NULL;"
    },
    {
        "line": 276,
        "fullcodeline": "flag = 0;"
    },
    {
        "line": 281,
        "fullcodeline": "g = vanessa_socket_server_bindv(fromv, flag);"
    },
    {
        "line": 282,
        "fullcodeline": "free(fromv);"
    },
    {
        "line": 315,
        "fullcodeline": "io_set_timeout(client_io, opt.authenticate_timeout);"
    },
    {
        "line": 363,
        "fullcodeline": "rc = getnameinfo((struct sockaddr *)peername,"
    },
    {
        "line": 379,
        "fullcodeline": "rc = getnameinfo((struct sockaddr *)sockname,"
    },
    {
        "line": 396,
        "fullcodeline": "strcat(from_to_host_str, \" \");"
    },
    {
        "line": 397,
        "fullcodeline": "strcat(from_to_host_str, from_host_str);"
    },
    {
        "line": 398,
        "fullcodeline": "strcat(from_to_host_str, \":\");"
    },
    {
        "line": 399,
        "fullcodeline": "strcat(from_to_host_str, from_serv_str);"
    },
    {
        "line": 400,
        "fullcodeline": "strcat(from_to_host_str, \"->\");"
    },
    {
        "line": 401,
        "fullcodeline": "strcat(from_to_host_str, to_host_str);"
    },
    {
        "line": 402,
        "fullcodeline": "strcat(from_to_host_str, \":\");"
    },
    {
        "line": 403,
        "fullcodeline": "strcat(from_to_host_str, to_serv_str);"
    },
    {
        "line": 412,
        "fullcodeline": "VANESSA_LOGGER_INFO_UNSAFE(\"Connect: %s inetd_pid=%d\","
    },
    {
        "line": 433,
        "fullcodeline": "VANESSA_LOGGER_DEBUG(\"greeting\");"
    },
    {
        "line": 434,
        "fullcodeline": "VANESSA_LOGGER_ERR_UNSAFE(\"Fatal error writing to client %s.\""
    },
    {
        "line": 436,
        "fullcodeline": "perdition_exit_cleanly(-1);"
    },
    {
        "line": 442,
        "fullcodeline": "status = (*(protocol->in_get_auth))(client_io, opt.ssl_mode, tls_state,"
    },
    {
        "line": 444,
        "fullcodeline": "token_flush();"
    },
    {
        "line": 589,
        "fullcodeline": "flag = 0;"
    },
    {
        "line": 594,
        "fullcodeline": "s = vanessa_socket_client_src_open(NULL, NULL, servername, port, flag);"
    },
    {
        "line": 607,
        "fullcodeline": "io_set_timeout(server_io, opt.authenticate_timeout);"
    },
    {
        "line": 752,
        "fullcodeline": "free(server_resp_buf);"
    },
    {
        "line": 758,
        "fullcodeline": "VANESSA_LOGGER_DEBUG_ERRNO(\"malloc\");"
    },
    {
        "line": 759,
        "fullcodeline": "VANESSA_LOGGER_ERR(\"Fatal error allocating memory. Exiting child.\");"
    },
    {
        "line": 760,
        "fullcodeline": "perdition_exit_cleanly(-1);"
    },
    {
        "line": 61,
        "fullcodeline": "opt.quiet?LOG_ERR:LOG_INFO);"
    },
    {
        "line": 67,
        "fullcodeline": "str_null_safe(opt.map_library));"
    },
    {
        "line": 99,
        "fullcodeline": "if(*(opt.log_facility) == '-') {"
    },
    {
        "line": 151,
        "fullcodeline": "if(!our_tag) {"
    },
    {
        "line": 158,
        "fullcodeline": "our_tag = NULL;"
    },
    {
        "line": 167,
        "fullcodeline": "if (log_options()) {"
    },
    {
        "line": 195,
        "fullcodeline": "vanessa_socket_daemon_process();"
    },
    {
        "line": 204,
        "fullcodeline": "if(write_pid_file(opt.pid_file, opt.username, opt.group) < 0) {"
    },
    {
        "line": 217,
        "fullcodeline": "if (!server_resp_buf) {"
    },
    {
        "line": 252,
        "fullcodeline": "if (!fromv) {"
    },
    {
        "line": 283,
        "fullcodeline": "if(!g) {"
    },
    {
        "line": 310,
        "fullcodeline": "if((client_io=io_create_fd(0, 1, PERDITION_LOG_STR_CLIENT))==NULL){"
    },
    {
        "line": 318,
        "fullcodeline": "if (getpeername(0, (struct sockaddr *)peername, &namelen)) {"
    },
    {
        "line": 324,
        "fullcodeline": "if (getsockname(1, (struct sockaddr *)sockname, &namelen)) {"
    },
    {
        "line": 330,
        "fullcodeline": "flag = 0;"
    },
    {
        "line": 333,
        "fullcodeline": "s = vanessa_socket_server_acceptv(g, opt.connection_limit,"
    },
    {
        "line": 343,
        "fullcodeline": "pid_file = NULL;"
    },
    {
        "line": 346,
        "fullcodeline": "vanessa_logger_reopen(vanessa_logger_get());"
    },
    {
        "line": 353,
        "fullcodeline": "io_set_timeout(client_io, opt.authenticate_timeout);"
    },
    {
        "line": 375,
        "fullcodeline": "*from_host_str='\\0';"
    },
    {
        "line": 376,
        "fullcodeline": "*from_serv_str='\\0';"
    },
    {
        "line": 391,
        "fullcodeline": "*to_host_str='\\0';"
    },
    {
        "line": 392,
        "fullcodeline": "*to_serv_str='\\0';"
    },
    {
        "line": 416,
        "fullcodeline": "VANESSA_LOGGER_INFO_UNSAFE(\"Connect: %s\", from_to_host_str);"
    },
    {
        "line": 445,
        "fullcodeline": "if(status<0){"
    },
    {
        "line": 486,
        "fullcodeline": "id = username_mangle(auth_get_authorisation_id(&auth), STATE_GET_SERVER);"
    },
    {
        "line": 524,
        "fullcodeline": "if((!servername || !*servername || round_robin_server) &&"
    },
    {
        "line": 534,
        "fullcodeline": "if(!port || !*port) {"
    },
    {
        "line": 539,
        "fullcodeline": "if(!servername || !*servername) {"
    },
    {
        "line": 595,
        "fullcodeline": "if(s < 0) {"
    },
    {
        "line": 602,
        "fullcodeline": "if((server_io=io_create_fd(s, s, PERDITION_LOG_STR_REAL))==NULL){"
    },
    {
        "line": 622,
        "fullcodeline": "struct auth auth2 = auth;"
    },
    {
        "line": 624,
        "fullcodeline": "int sasl_mech = 0;"
    },
    {
        "line": 627,
        "fullcodeline": "id = username_mangle(auth_get_authorisation_id(&auth), STATE_REMOTE_LOGIN);"
    },
    {
        "line": 635,
        "fullcodeline": "auth_set_authorisation_id(&auth2, id);"
    },
    {
        "line": 637,
        "fullcodeline": "status = (*(protocol->out_setup))(server_io, client_io, &auth2, our_tag);"
    },
    {
        "line": 638,
        "fullcodeline": "sasl_mech = status & PROTOCOL_S_SASL_MASK;"
    },
    {
        "line": 680,
        "fullcodeline": "token_flush();"
    },
    {
        "line": 681,
        "fullcodeline": "status = (*(protocol->out_authenticate))(server_io, client_io, tls_state,"
    },
    {
        "line": 768,
        "fullcodeline": "if (io_get_err(client_io) == io_err_timeout) {"
    },
    {
        "line": 100,
        "fullcodeline": "fh = stdout;"
    },
    {
        "line": 152,
        "fullcodeline": "VANESSA_LOGGER_DEBUG(\"imap4_tag_create\");"
    },
    {
        "line": 153,
        "fullcodeline": "VANESSA_LOGGER_ERR(\"Fatal error allocating memory. Exiting.\");"
    },
    {
        "line": 154,
        "fullcodeline": "perdition_exit_cleanly(-1);"
    },
    {
        "line": 168,
        "fullcodeline": "VANESSA_LOGGER_DEBUG(\"log_options\");"
    },
    {
        "line": 169,
        "fullcodeline": "VANESSA_LOGGER_ERR(\"Fatal error logging options. Exiting.\");"
    },
    {
        "line": 170,
        "fullcodeline": "perdition_exit_cleanly(-1);"
    },
    {
        "line": 196,
        "fullcodeline": "if (vanessa_logger_reopen(vanessa_logger_get()) < 0) {"
    },
    {
        "line": 205,
        "fullcodeline": "VANESSA_LOGGER_DEBUG(\"write_pid_file\");"
    },
    {
        "line": 206,
        "fullcodeline": "VANESSA_LOGGER_ERR(\"Could not write pid file\");"
    },
    {
        "line": 207,
        "fullcodeline": "perdition_exit_cleanly(1);"
    },
    {
        "line": 218,
        "fullcodeline": "VANESSA_LOGGER_DEBUG_ERRNO(\"malloc server_resp_buf\");"
    },
    {
        "line": 219,
        "fullcodeline": "VANESSA_LOGGER_ERR(\"Fatal error allocating memory. Exiting.\");"
    },
    {
        "line": 220,
        "fullcodeline": "perdition_exit_cleanly(-1);"
    },
    {
        "line": 247,
        "fullcodeline": "nfrom = vanessa_dynamic_array_get_count(opt.bind_address);"
    },
    {
        "line": 253,
        "fullcodeline": "VANESSA_LOGGER_DEBUG_ERRNO(\"malloc fromv\");"
    },
    {
        "line": 254,
        "fullcodeline": "VANESSA_LOGGER_ERR(\"Fatal error allocating memory. Exiting.\");"
    },
    {
        "line": 255,
        "fullcodeline": "perdition_exit_cleanly(-1);"
    },
    {
        "line": 278,
        "fullcodeline": "flag |= VANESSA_SOCKET_NO_LOOKUP;"
    },
    {
        "line": 280,
        "fullcodeline": "flag |= VANESSA_SOCKET_TCP_KEEPALIVE;"
    },
    {
        "line": 284,
        "fullcodeline": "VANESSA_LOGGER_DEBUG(\"vanessa_socket_server_bindv\");"
    },
    {
        "line": 285,
        "fullcodeline": "VANESSA_LOGGER_ERR(\"Fatal error listening for connections.\""
    },
    {
        "line": 287,
        "fullcodeline": "perdition_exit_cleanly(-1);"
    },
    {
        "line": 311,
        "fullcodeline": "VANESSA_LOGGER_DEBUG(\"io_create_fd 1\");"
    },
    {
        "line": 312,
        "fullcodeline": "VANESSA_LOGGER_ERR(\"Fatal error setting IO. Exiting.\");"
    },
    {
        "line": 313,
        "fullcodeline": "perdition_exit_cleanly(-1);"
    },
    {
        "line": 319,
        "fullcodeline": "free(peername);"
    },
    {
        "line": 320,
        "fullcodeline": "peername=NULL;"
    },
    {
        "line": 325,
        "fullcodeline": "free(sockname);"
    },
    {
        "line": 326,
        "fullcodeline": "sockname=NULL;"
    },
    {
        "line": 336,
        "fullcodeline": "if(s < 0){"
    },
    {
        "line": 348,
        "fullcodeline": "if((client_io=io_create_fd(s, s, PERDITION_LOG_STR_CLIENT))==NULL){"
    },
    {
        "line": 364,
        "fullcodeline": "perdition_get_salen((struct sockaddr *)peername),"
    },
    {
        "line": 366,
        "fullcodeline": "NI_NUMERICHOST|NI_NUMERICSERV);"
    },
    {
        "line": 368,
        "fullcodeline": "VANESSA_LOGGER_DEBUG_UNSAFE(\"getnameinfo peername: %s\","
    },
    {
        "line": 370,
        "fullcodeline": "VANESSA_LOGGER_ERR(\"Fatal error formatting peername\");"
    },
    {
        "line": 371,
        "fullcodeline": "perdition_exit_cleanly(-1);"
    },
    {
        "line": 380,
        "fullcodeline": "perdition_get_salen((struct sockaddr *)sockname),"
    },
    {
        "line": 382,
        "fullcodeline": "NI_NUMERICHOST|NI_NUMERICSERV);"
    },
    {
        "line": 384,
        "fullcodeline": "VANESSA_LOGGER_DEBUG_UNSAFE(\"getnameinfo sockname: %s\","
    },
    {
        "line": 386,
        "fullcodeline": "VANESSA_LOGGER_ERR(\"Fatal error formatting sockname\");"
    },
    {
        "line": 387,
        "fullcodeline": "perdition_exit_cleanly(-1);"
    },
    {
        "line": 446,
        "fullcodeline": "VANESSA_LOGGER_DEBUG(\"protocol->in_get_auth\");"
    },
    {
        "line": 456,
        "fullcodeline": "perdition_exit_cleanly(-1);"
    },
    {
        "line": 487,
        "fullcodeline": "if (!id) {"
    },
    {
        "line": 496,
        "fullcodeline": "if(dbserver_get || dbserver_get2 || opt.client_server_specification) {"
    },
    {
        "line": 502,
        "fullcodeline": "if (id != auth_get_authorisation_id(&auth))"
    },
    {
        "line": 507,
        "fullcodeline": "port = usp->port;"
    },
    {
        "line": 508,
        "fullcodeline": "servername = usp->server;"
    },
    {
        "line": 525,
        "fullcodeline": "opt.outgoing_server!=NULL){"
    },
    {
        "line": 526,
        "fullcodeline": "round_robin_server=1;"
    },
    {
        "line": 527,
        "fullcodeline": "rnd=(rnd+1)%vanessa_dynamic_array_get_count(opt.outgoing_server);"
    },
    {
        "line": 528,
        "fullcodeline": "usp=vanessa_dynamic_array_get_element(opt.outgoing_server,rnd);"
    },
    {
        "line": 529,
        "fullcodeline": "servername=user_server_port_get_server(usp);"
    },
    {
        "line": 530,
        "fullcodeline": "port=user_server_port_get_port(usp);"
    },
    {
        "line": 535,
        "fullcodeline": "port=opt.outgoing_port;"
    },
    {
        "line": 540,
        "fullcodeline": "LOGIN_FAILED_PROTOCOL(PROTOCOL_ERR, \"Could not determine server\");"
    },
    {
        "line": 591,
        "fullcodeline": "flag |= VANESSA_SOCKET_NO_LOOKUP;"
    },
    {
        "line": 593,
        "fullcodeline": "flag |= VANESSA_SOCKET_TCP_KEEPALIVE;"
    },
    {
        "line": 596,
        "fullcodeline": "VANESSA_LOGGER_DEBUG(\"vanessa_socket_client_open\");"
    },
    {
        "line": 597,
        "fullcodeline": "LOGIN_FAILED_PROTOCOL(PROTOCOL_ERR, \"Could not connect to server\");"
    },
    {
        "line": 603,
        "fullcodeline": "VANESSA_LOGGER_DEBUG(\"io_create_fd 3\");"
    },
    {
        "line": 604,
        "fullcodeline": "VANESSA_LOGGER_ERR(\"Fatal error setting IO. Exiting.\");"
    },
    {
        "line": 605,
        "fullcodeline": "perdition_exit_cleanly(-1);"
    },
    {
        "line": 628,
        "fullcodeline": "if (!id) {"
    },
    {
        "line": 639,
        "fullcodeline": "if(status==0){"
    },
    {
        "line": 685,
        "fullcodeline": "if (id != auth_get_authorisation_id(&auth))"
    },
    {
        "line": 687,
        "fullcodeline": "if(status==0) {"
    },
    {
        "line": 705,
        "fullcodeline": "if(status==2){"
    },
    {
        "line": 711,
        "fullcodeline": "if (status==3) {"
    },
    {
        "line": 769,
        "fullcodeline": "VANESSA_LOGGER_INFO(\"Timeout piping data.\");"
    },
    {
        "line": 197,
        "fullcodeline": "fprintf(stderr, \"Fatal error reopening logger. Exiting.\");"
    },
    {
        "line": 198,
        "fullcodeline": "perdition_exit_cleanly(-1);"
    },
    {
        "line": 249,
        "fullcodeline": "nfrom = 1;"
    },
    {
        "line": 261,
        "fullcodeline": "for (i = 0; i < nfrom; i++) {"
    },
    {
        "line": 272,
        "fullcodeline": "fromv[0] = \"0.0.0.0\";"
    },
    {
        "line": 273,
        "fullcodeline": "fromv[1] = opt.listen_port;"
    },
    {
        "line": 332,
        "fullcodeline": "flag |= VANESSA_SOCKET_TCP_KEEPALIVE;"
    },
    {
        "line": 334,
        "fullcodeline": "(struct sockaddr *) peername,"
    },
    {
        "line": 335,
        "fullcodeline": "(struct sockaddr *) sockname, flag);"
    },
    {
        "line": 337,
        "fullcodeline": "VANESSA_LOGGER_DEBUG(\"vanessa_socket_server_accept\");"
    },
    {
        "line": 338,
        "fullcodeline": "VANESSA_LOGGER_ERR(\"Fatal error accepting child connection. Exiting.\");"
    },
    {
        "line": 339,
        "fullcodeline": "perdition_exit_cleanly(-1);"
    },
    {
        "line": 349,
        "fullcodeline": "VANESSA_LOGGER_DEBUG(\"io_create_fd 2\");"
    },
    {
        "line": 350,
        "fullcodeline": "VANESSA_LOGGER_ERR(\"Fatal error setting IO. Exiting.\");"
    },
    {
        "line": 351,
        "fullcodeline": "perdition_exit_cleanly(-1);"
    },
    {
        "line": 369,
        "fullcodeline": "gai_strerror(rc));"
    },
    {
        "line": 385,
        "fullcodeline": "gai_strerror(rc));"
    },
    {
        "line": 447,
        "fullcodeline": "if (io_get_err(client_io) == io_err_timeout)"
    },
    {
        "line": 488,
        "fullcodeline": "VANESSA_LOGGER_DEBUG(\"username_mangle STATE_GET_SERVER\");"
    },
    {
        "line": 489,
        "fullcodeline": "VANESSA_LOGGER_ERR_UNSAFE(\"Fatal error manipulating username \""
    },
    {
        "line": 492,
        "fullcodeline": "perdition_exit_cleanly(-1);"
    },
    {
        "line": 497,
        "fullcodeline": "usp = getserver(id, from_host_str, to_host_str,"
    },
    {
        "line": 503,
        "fullcodeline": "free(id);"
    },
    {
        "line": 510,
        "fullcodeline": "if(opt.username_from_database && usp->user){"
    },
    {
        "line": 629,
        "fullcodeline": "VANESSA_LOGGER_DEBUG(\"username_mangle STATE_REMOTE_LOGIN\");"
    },
    {
        "line": 630,
        "fullcodeline": "VANESSA_LOGGER_ERR_UNSAFE(\"Fatal error manipulating username \""
    },
    {
        "line": 633,
        "fullcodeline": "perdition_exit_cleanly(-1);"
    },
    {
        "line": 640,
        "fullcodeline": "quit(server_io, protocol, our_tag);"
    },
    {
        "line": 641,
        "fullcodeline": "LOGIN_FAILED_PROTOCOL(PROTOCOL_NO, \"Connection Negotiation Failure\");"
    },
    {
        "line": 678,
        "fullcodeline": "server_resp_buf_size=MAX_LINE_LENGTH-1;"
    },
    {
        "line": 686,
        "fullcodeline": "free(id);"
    },
    {
        "line": 688,
        "fullcodeline": "quit(server_io, protocol, our_tag);"
    },
    {
        "line": 706,
        "fullcodeline": "sleep(VANESSA_LOGGER_ERR_SLEEP);"
    },
    {
        "line": 707,
        "fullcodeline": "LOGIN_FAILED_PROTOCOL(PROTOCOL_NO, \"Login Disabled\");"
    },
    {
        "line": 712,
        "fullcodeline": "sleep(VANESSA_LOGGER_ERR_SLEEP);"
    },
    {
        "line": 713,
        "fullcodeline": "LOGIN_FAILED_PROTOCOL(PROTOCOL_NO, \"SASL mechanism unavailable\");"
    },
    {
        "line": 728,
        "fullcodeline": "*(server_resp_buf+server_resp_buf_size)='\\0';"
    },
    {
        "line": 770,
        "fullcodeline": "if (protocol->bye && protocol->bye(client_io, \"Timeout\") < 0) {"
    },
    {
        "line": 776,
        "fullcodeline": "VANESSA_LOGGER_DEBUG(\"vanessa_socket_pipe\");"
    },
    {
        "line": 777,
        "fullcodeline": "VANESSA_LOGGER_ERR(\"Fatal error piping data. Exiting child.\");"
    },
    {
        "line": 778,
        "fullcodeline": "perdition_exit_cleanly(-1);"
    },
    {
        "line": 102,
        "fullcodeline": "else if(*(opt.log_facility) == '+') {"
    },
    {
        "line": 262,
        "fullcodeline": "from_usp = vanessa_dynamic_array_get_element("
    },
    {
        "line": 264,
        "fullcodeline": "fromv[i * 2] = user_server_port_get_server(from_usp);"
    },
    {
        "line": 265,
        "fullcodeline": "fromv[(i * 2) + 1] = user_server_port_get_port("
    },
    {
        "line": 448,
        "fullcodeline": "VANESSA_LOGGER_ERR_UNSAFE(\"Fatal Error: Timeout reading \""
    },
    {
        "line": 458,
        "fullcodeline": "else if(status == 1){"
    },
    {
        "line": 511,
        "fullcodeline": "char * new_id = strdup(usp->user);"
    },
    {
        "line": 518,
        "fullcodeline": "free(auth_get_authorisation_id(&auth));"
    },
    {
        "line": 519,
        "fullcodeline": "auth_set_authorisation_id(&auth, new_id);"
    },
    {
        "line": 642,
        "fullcodeline": "if (id != auth_get_authorisation_id(&auth))"
    },
    {
        "line": 729,
        "fullcodeline": "if (protocol->write_str(client_io, WRITE_STR_NO_CLLF, client_tag,"
    },
    {
        "line": 771,
        "fullcodeline": "VANESSA_LOGGER_DEBUG(\"protocol->bye timeout\");"
    },
    {
        "line": 772,
        "fullcodeline": "VANESSA_LOGGER_ERR(\"Fatal error writing to client. Exiting child.\");"
    },
    {
        "line": 773,
        "fullcodeline": "perdition_exit_cleanly(-1);"
    },
    {
        "line": 103,
        "fullcodeline": "fh = stderr;"
    },
    {
        "line": 267,
        "fullcodeline": "if (!fromv[(i * 2) + 1])"
    },
    {
        "line": 453,
        "fullcodeline": "VANESSA_LOGGER_ERR_UNSAFE(\"Fatal Error reading authentication \""
    },
    {
        "line": 459,
        "fullcodeline": "perdition_log_close_early(from_to_host_str, &auth);"
    },
    {
        "line": 460,
        "fullcodeline": "perdition_exit_cleanly(0);"
    },
    {
        "line": 512,
        "fullcodeline": "if (!new_id) {"
    },
    {
        "line": 643,
        "fullcodeline": "free(id);"
    },
    {
        "line": 647,
        "fullcodeline": "else if(status<0){"
    },
    {
        "line": 690,
        "fullcodeline": "sleep(PERDITION_AUTH_FAIL_SLEEP);"
    },
    {
        "line": 691,
        "fullcodeline": "*(server_resp_buf+server_resp_buf_size)='\\0';"
    },
    {
        "line": 698,
        "fullcodeline": "PERDITION_LOG_AUTH(\"failed: Re-Authentication Failure\");"
    },
    {
        "line": 717,
        "fullcodeline": "else if(status<0){"
    },
    {
        "line": 731,
        "fullcodeline": "VANESSA_LOGGER_DEBUG(\"protocol->write_str logged in, server_resp\");"
    },
    {
        "line": 732,
        "fullcodeline": "VANESSA_LOGGER_ERR(\"Fatal error writing to client. Exiting child.\");"
    },
    {
        "line": 733,
        "fullcodeline": "perdition_exit_cleanly(-1);"
    },
    {
        "line": 737,
        "fullcodeline": "if (protocol->write_str(client_io, NULL_FLAG, client_tag,"
    },
    {
        "line": 268,
        "fullcodeline": "fromv[(i * 2) + 1] = opt.listen_port;"
    },
    {
        "line": 513,
        "fullcodeline": "VANESSA_LOGGER_DEBUG_ERRNO(\"strdup\");"
    },
    {
        "line": 514,
        "fullcodeline": "VANESSA_LOGGER_ERR_UNSAFE(\"Fatal error manipulating username \""
    },
    {
        "line": 648,
        "fullcodeline": "VANESSA_LOGGER_DEBUG_UNSAFE(\"protocol->out_setup %d\", status);"
    },
    {
        "line": 649,
        "fullcodeline": "VANESSA_LOGGER_ERR(\"Fatal error negotiating setup. Exiting child.\");"
    },
    {
        "line": 650,
        "fullcodeline": "perdition_exit_cleanly(-1);"
    },
    {
        "line": 692,
        "fullcodeline": "if (protocol->write_str(client_io, WRITE_STR_NO_CLLF, client_tag,"
    },
    {
        "line": 701,
        "fullcodeline": "LOGIN_FAILED_PROTOCOL(PROTOCOL_NO, \"Re-Authentication Failure\");"
    },
    {
        "line": 718,
        "fullcodeline": "VANESSA_LOGGER_DEBUG_UNSAFE(\"protocol->out_authenticate %d\", status);"
    },
    {
        "line": 724,
        "fullcodeline": "perdition_exit_cleanly(-1);"
    },
    {
        "line": 739,
        "fullcodeline": "VANESSA_LOGGER_DEBUG(\"protocol->write_str logged in\");"
    },
    {
        "line": 740,
        "fullcodeline": "VANESSA_LOGGER_ERR(\"Fatal error writing to client. Exiting child.\");"
    },
    {
        "line": 741,
        "fullcodeline": "perdition_exit_cleanly(-1);"
    },
    {
        "line": 694,
        "fullcodeline": "VANESSA_LOGGER_DEBUG(\"protocol->write_str quit\");"
    },
    {
        "line": 695,
        "fullcodeline": "VANESSA_LOGGER_ERR(\"Fatal error writing to client. Exiting child.\");"
    },
    {
        "line": 696,
        "fullcodeline": "perdition_exit_cleanly(-1);"
    },
    {
        "line": 719,
        "fullcodeline": "if (io_get_err(client_io) == io_err_timeout)"
    },
    {
        "line": 720,
        "fullcodeline": "VANESSA_LOGGER_ERR(\"Fatal error: Timeout authenticating user. \""
    },
    {
        "line": 723,
        "fullcodeline": "VANESSA_LOGGER_ERR(\"Fatal error authenticating user. Exiting child.\");"
    }
]