[
    {
        "line": 46,
        "fullcodeline": "from zenml.materializers.materializer_registry import ("
    },
    {
        "line": 49,
        "fullcodeline": "from zenml.utils import source_utils"
    },
    {
        "line": 51,
        "fullcodeline": "client = Client()"
    },
    {
        "line": 73,
        "fullcodeline": "artifact_store = client.active_stack.artifact_store"
    },
    {
        "line": 91,
        "fullcodeline": "fileio.makedirs(uri)"
    },
    {
        "line": 102,
        "fullcodeline": "materializer_object = materializer_class(uri)"
    },
    {
        "line": 105,
        "fullcodeline": "materializer_object.uri = materializer_object.uri.replace(\"\\\\\", \"/\")"
    },
    {
        "line": 108,
        "fullcodeline": "data_type = type(data)"
    },
    {
        "line": 109,
        "fullcodeline": "materializer_object.validate_type_compatibility(data_type)"
    },
    {
        "line": 110,
        "fullcodeline": "materializer_object.save(data)"
    },
    {
        "line": 113,
        "fullcodeline": "visualizations: List[ArtifactVisualizationRequest] = []"
    },
    {
        "line": 130,
        "fullcodeline": "artifact_metadata: Dict[str, \"MetadataType\"] = {}"
    },
    {
        "line": 141,
        "fullcodeline": "def _create_version() -> Optional[ArtifactVersionResponse]:"
    },
    {
        "line": 163,
        "fullcodeline": "response = None"
    },
    {
        "line": 76,
        "fullcodeline": "if not uri:"
    },
    {
        "line": 78,
        "fullcodeline": "if not uri.startswith(artifact_store.path):"
    },
    {
        "line": 81,
        "fullcodeline": "if manual_save and fileio.exists(uri):"
    },
    {
        "line": 94,
        "fullcodeline": "if isinstance(materializer, type):"
    },
    {
        "line": 164,
        "fullcodeline": "if not version:"
    },
    {
        "line": 55,
        "fullcodeline": "artifact = client.list_artifacts(name=name)[0]"
    },
    {
        "line": 77,
        "fullcodeline": "uri = os.path.join(\"custom_artifacts\", name, str(uuid4()))"
    },
    {
        "line": 79,
        "fullcodeline": "uri = os.path.join(artifact_store.path, uri)"
    },
    {
        "line": 84,
        "fullcodeline": "other_artifacts = client.list_artifact_versions(uri=uri, size=1)"
    },
    {
        "line": 95,
        "fullcodeline": "materializer_class = materializer"
    },
    {
        "line": 165,
        "fullcodeline": "retries_made = 0"
    },
    {
        "line": 188,
        "fullcodeline": "response = _create_version()"
    },
    {
        "line": 195,
        "fullcodeline": "client.create_run_metadata("
    },
    {
        "line": 56,
        "fullcodeline": "if artifact.has_custom_name != has_custom_name:"
    },
    {
        "line": 85,
        "fullcodeline": "if other_artifacts and (other_artifact := other_artifacts[0]):"
    },
    {
        "line": 166,
        "fullcodeline": "for i in range(MAX_RETRIES_FOR_VERSIONED_ENTITY_CREATION):"
    },
    {
        "line": 180,
        "fullcodeline": "if not response:"
    },
    {
        "line": 189,
        "fullcodeline": "if not response:"
    },
    {
        "line": 57,
        "fullcodeline": "client.update_artifact("
    },
    {
        "line": 86,
        "fullcodeline": "raise RuntimeError("
    },
    {
        "line": 97,
        "fullcodeline": "materializer_class = source_utils.load_and_validate_class("
    },
    {
        "line": 101,
        "fullcodeline": "materializer_class = materializer_registry[type(data)]"
    },
    {
        "line": 116,
        "fullcodeline": "vis_data = materializer_object.save_visualizations(data)"
    },
    {
        "line": 133,
        "fullcodeline": "artifact_metadata = materializer_object.extract_full_metadata(data)"
    },
    {
        "line": 134,
        "fullcodeline": "artifact_metadata.update(user_metadata or {})"
    },
    {
        "line": 181,
        "fullcodeline": "raise EntityExistsError("
    },
    {
        "line": 190,
        "fullcodeline": "raise EntityExistsError("
    },
    {
        "line": 203,
        "fullcodeline": "error_message = \"step run\""
    },
    {
        "line": 204,
        "fullcodeline": "step_context = get_step_context()"
    },
    {
        "line": 205,
        "fullcodeline": "step_run = step_context.step_run"
    },
    {
        "line": 212,
        "fullcodeline": "error_message = \"model\""
    },
    {
        "line": 213,
        "fullcodeline": "model = step_context.model"
    },
    {
        "line": 117,
        "fullcodeline": "for vis_uri, vis_type in vis_data.items():"
    },
    {
        "line": 168,
        "fullcodeline": "version = _get_new_artifact_version(name)"
    },
    {
        "line": 173,
        "fullcodeline": "sleep = 0.2 * 1.5**i"
    },
    {
        "line": 174,
        "fullcodeline": "logger.debug("
    },
    {
        "line": 178,
        "fullcodeline": "time.sleep(sleep)"
    },
    {
        "line": 179,
        "fullcodeline": "retries_made += 1"
    },
    {
        "line": 206,
        "fullcodeline": "client.zen_store.update_run_step("
    },
    {
        "line": 62,
        "fullcodeline": "artifact = client.zen_store.create_artifact("
    },
    {
        "line": 87,
        "fullcodeline": "f\"Cannot save new artifact {name} version to URI \""
    },
    {
        "line": 124,
        "fullcodeline": "logger.warning("
    },
    {
        "line": 136,
        "fullcodeline": "logger.warning("
    },
    {
        "line": 169,
        "fullcodeline": "if response := _create_version():"
    },
    {
        "line": 175,
        "fullcodeline": "f\"Failed to create artifact version `{version}` for \""
    },
    {
        "line": 182,
        "fullcodeline": "f\"Failed to create new artifact version for artifact \""
    },
    {
        "line": 191,
        "fullcodeline": "f\"Failed to create artifact version `{version}` for artifact \""
    },
    {
        "line": 208,
        "fullcodeline": "step_run_update=StepRunUpdate("
    },
    {
        "line": 215,
        "fullcodeline": "from zenml.model.utils import link_artifact_to_model"
    },
    {
        "line": 217,
        "fullcodeline": "link_artifact_to_model("
    },
    {
        "line": 224,
        "fullcodeline": "logger.debug(f\"Unable to link saved artifact to {error_message}.\")"
    },
    {
        "line": 88,
        "fullcodeline": "f\"{uri} because the URI is already used by artifact \""
    },
    {
        "line": 89,
        "fullcodeline": "f\"{other_artifact.name} (version {other_artifact.version}).\""
    },
    {
        "line": 118,
        "fullcodeline": "vis_model = ArtifactVisualizationRequest("
    },
    {
        "line": 122,
        "fullcodeline": "visualizations.append(vis_model)"
    },
    {
        "line": 125,
        "fullcodeline": "f\"Failed to save visualization for output artifact '{name}': \""
    },
    {
        "line": 137,
        "fullcodeline": "f\"Failed to extract metadata for output artifact '{name}': {e}\""
    },
    {
        "line": 176,
        "fullcodeline": "f\"artifact `{name}`. Retrying in {sleep}...\""
    },
    {
        "line": 183,
        "fullcodeline": "f\"`{name}`. Retried {retries_made} times. \""
    },
    {
        "line": 192,
        "fullcodeline": "f\"`{name}`. Given version already exists.\""
    },
    {
        "line": 70,
        "fullcodeline": "artifact = client.list_artifacts(name=name)[0]"
    },
    {
        "line": 126,
        "fullcodeline": "f\"{e}\""
    },
    {
        "line": 209,
        "fullcodeline": "saved_artifact_versions={name: response.id}"
    },
    {
        "line": 63,
        "fullcodeline": "ArtifactRequest("
    }
]