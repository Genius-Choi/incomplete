[
    {
        "line": 49,
        "fullcodeline": "artifact_store_uri = Client().active_stack.artifact_store.path"
    },
    {
        "line": 43,
        "fullcodeline": "if step_output_type is None:"
    },
    {
        "line": 46,
        "fullcodeline": "if materializer_class is None:"
    },
    {
        "line": 50,
        "fullcodeline": "with TemporaryDirectory(dir=artifact_store_uri) as artifact_uri:"
    },
    {
        "line": 44,
        "fullcodeline": "step_output_type = type(step_output)"
    },
    {
        "line": 47,
        "fullcodeline": "materializer_class = materializer_registry[step_output_type]"
    },
    {
        "line": 51,
        "fullcodeline": "materializer = materializer_class(uri=artifact_uri)"
    },
    {
        "line": 52,
        "fullcodeline": "existing_files = os.listdir(artifact_uri)"
    },
    {
        "line": 55,
        "fullcodeline": "materializer.save(step_output)"
    },
    {
        "line": 61,
        "fullcodeline": "visualizations = materializer.save_visualizations(step_output)"
    },
    {
        "line": 62,
        "fullcodeline": "assert isinstance(visualizations, dict)"
    },
    {
        "line": 72,
        "fullcodeline": "metadata = materializer.extract_full_metadata(step_output)"
    },
    {
        "line": 73,
        "fullcodeline": "assert isinstance(metadata, dict)"
    },
    {
        "line": 81,
        "fullcodeline": "loaded_data = materializer.load(step_output_type)"
    },
    {
        "line": 65,
        "fullcodeline": "for uri, value in visualizations.items():"
    },
    {
        "line": 74,
        "fullcodeline": "if expected_metadata_size is not None:"
    },
    {
        "line": 76,
        "fullcodeline": "for key, value in metadata.items():"
    },
    {
        "line": 57,
        "fullcodeline": "new_files = os.listdir(artifact_uri)"
    },
    {
        "line": 58,
        "fullcodeline": "assert len(new_files) > len(existing_files)"
    },
    {
        "line": 64,
        "fullcodeline": "assert len(visualizations) > 0"
    },
    {
        "line": 75,
        "fullcodeline": "assert len(metadata) == expected_metadata_size"
    },
    {
        "line": 83,
        "fullcodeline": "assert isinstance(loaded_data, step_output_type)  # correct type"
    },
    {
        "line": 87,
        "fullcodeline": "validation_function(artifact_uri)"
    },
    {
        "line": 66,
        "fullcodeline": "assert isinstance(uri, str)"
    },
    {
        "line": 67,
        "fullcodeline": "assert \"\\\\\" not in uri"
    },
    {
        "line": 68,
        "fullcodeline": "assert isinstance(value, VisualizationType)"
    },
    {
        "line": 69,
        "fullcodeline": "assert os.path.exists(uri)"
    },
    {
        "line": 77,
        "fullcodeline": "assert isinstance(key, str)"
    },
    {
        "line": 78,
        "fullcodeline": "assert isinstance(value, MetadataTypeTuple)"
    },
    {
        "line": 91,
        "fullcodeline": "return loaded_data, metadata"
    }
]