[
    {
        "line": 4,
        "fullcodeline": "struct net *net = dev_net(skb->dev);"
    },
    {
        "line": 5,
        "fullcodeline": "struct inet6_dev *idev = NULL;"
    },
    {
        "line": 6,
        "fullcodeline": "struct ipv6hdr *hdr = ipv6_hdr(skb);"
    },
    {
        "line": 9,
        "fullcodeline": "const struct in6_addr *saddr = NULL;"
    },
    {
        "line": 14,
        "fullcodeline": "struct sockcm_cookie sockc_unused = {0};"
    },
    {
        "line": 16,
        "fullcodeline": "int iif = 0;"
    },
    {
        "line": 17,
        "fullcodeline": "int addr_type = 0;"
    },
    {
        "line": 19,
        "fullcodeline": "int err = 0;"
    },
    {
        "line": 20,
        "fullcodeline": "u32 mark = IP6_REPLY_MARK(net, skb->mark);"
    },
    {
        "line": 32,
        "fullcodeline": "addr_type = ipv6_addr_type(&hdr->daddr);"
    },
    {
        "line": 52,
        "fullcodeline": "addr_type = ipv6_addr_type(&hdr->saddr);"
    },
    {
        "line": 86,
        "fullcodeline": "mip6_addr_swap(skb);"
    },
    {
        "line": 88,
        "fullcodeline": "memset(&fl6, 0, sizeof(fl6));"
    },
    {
        "line": 89,
        "fullcodeline": "fl6.flowi6_proto = IPPROTO_ICMPV6;"
    },
    {
        "line": 90,
        "fullcodeline": "fl6.daddr = hdr->saddr;"
    },
    {
        "line": 95,
        "fullcodeline": "fl6.flowi6_mark = mark;"
    },
    {
        "line": 96,
        "fullcodeline": "fl6.flowi6_oif = iif;"
    },
    {
        "line": 97,
        "fullcodeline": "fl6.fl6_icmp_type = type;"
    },
    {
        "line": 98,
        "fullcodeline": "fl6.fl6_icmp_code = code;"
    },
    {
        "line": 99,
        "fullcodeline": "security_skb_classify_flow(skb, flowi6_to_flowi(&fl6));"
    },
    {
        "line": 101,
        "fullcodeline": "sk = icmpv6_xmit_lock(net);"
    },
    {
        "line": 104,
        "fullcodeline": "sk->sk_mark = mark;"
    },
    {
        "line": 105,
        "fullcodeline": "np = inet6_sk(sk);"
    },
    {
        "line": 110,
        "fullcodeline": "tmp_hdr.icmp6_type = type;"
    },
    {
        "line": 111,
        "fullcodeline": "tmp_hdr.icmp6_code = code;"
    },
    {
        "line": 112,
        "fullcodeline": "tmp_hdr.icmp6_cksum = 0;"
    },
    {
        "line": 113,
        "fullcodeline": "tmp_hdr.icmp6_pointer = htonl(info);"
    },
    {
        "line": 120,
        "fullcodeline": "ipc6.tclass = np->tclass;"
    },
    {
        "line": 121,
        "fullcodeline": "fl6.flowlabel = ip6_make_flowinfo(ipc6.tclass, fl6.flowlabel);"
    },
    {
        "line": 123,
        "fullcodeline": "dst = icmpv6_route_lookup(net, skb, sk, &fl6);"
    },
    {
        "line": 127,
        "fullcodeline": "ipc6.hlimit = ip6_sk_dst_hoplimit(np, &fl6, dst);"
    },
    {
        "line": 128,
        "fullcodeline": "ipc6.dontfrag = np->dontfrag;"
    },
    {
        "line": 129,
        "fullcodeline": "ipc6.opt = NULL;"
    },
    {
        "line": 131,
        "fullcodeline": "msg.skb = skb;"
    },
    {
        "line": 132,
        "fullcodeline": "msg.offset = skb_network_offset(skb);"
    },
    {
        "line": 133,
        "fullcodeline": "msg.type = type;"
    },
    {
        "line": 135,
        "fullcodeline": "len = skb->len - msg.offset;"
    },
    {
        "line": 144,
        "fullcodeline": "idev = __in6_dev_get(skb->dev);"
    },
    {
        "line": 22,
        "fullcodeline": "if ((u8 *)hdr < skb->head ||"
    },
    {
        "line": 42,
        "fullcodeline": "if (addr_type & IPV6_ADDR_MULTICAST || skb->pkt_type != PACKET_HOST) {"
    },
    {
        "line": 58,
        "fullcodeline": "if (__ipv6_addr_needs_scope_id(addr_type))"
    },
    {
        "line": 80,
        "fullcodeline": "if (is_ineligible(skb)) {"
    },
    {
        "line": 102,
        "fullcodeline": "if (!sk)"
    },
    {
        "line": 124,
        "fullcodeline": "if (IS_ERR(dst))"
    },
    {
        "line": 137,
        "fullcodeline": "if (len < 0) {"
    },
    {
        "line": 146,
        "fullcodeline": "err = ip6_append_data(sk, icmpv6_getfrag, &msg,"
    },
    {
        "line": 23,
        "fullcodeline": "(skb_network_header(skb) + sizeof(*hdr)) > skb_tail_pointer(skb))"
    },
    {
        "line": 34,
        "fullcodeline": "if (ipv6_chk_addr(net, &hdr->daddr, skb->dev, 0) ||"
    },
    {
        "line": 35,
        "fullcodeline": "ipv6_chk_acast_addr_src(net, skb->dev, &hdr->daddr))"
    },
    {
        "line": 59,
        "fullcodeline": "iif = skb->dev->ifindex;"
    },
    {
        "line": 71,
        "fullcodeline": "if ((addr_type == IPV6_ADDR_ANY) || (addr_type & IPV6_ADDR_MULTICAST)) {"
    },
    {
        "line": 94,
        "fullcodeline": "fl6.saddr = *saddr;"
    },
    {
        "line": 107,
        "fullcodeline": "if (!icmpv6_xrlim_allow(sk, type, &fl6))"
    },
    {
        "line": 115,
        "fullcodeline": "if (!fl6.flowi6_oif && ipv6_addr_is_multicast(&fl6.daddr))"
    },
    {
        "line": 116,
        "fullcodeline": "fl6.flowi6_oif = np->mcast_oif;"
    },
    {
        "line": 152,
        "fullcodeline": "ICMP6_INC_STATS(net, idev, ICMP6_MIB_OUTERRORS);"
    },
    {
        "line": 153,
        "fullcodeline": "ip6_flush_pending_frames(sk);"
    },
    {
        "line": 61,
        "fullcodeline": "dst = skb_dst(skb);"
    },
    {
        "line": 62,
        "fullcodeline": "iif = l3mdev_master_ifindex(dst ? dst->dev : skb->dev);"
    },
    {
        "line": 43,
        "fullcodeline": "if (type != ICMPV6_PKT_TOOBIG &&"
    },
    {
        "line": 44,
        "fullcodeline": "!(type == ICMPV6_PARAMPROB &&"
    },
    {
        "line": 117,
        "fullcodeline": "else if (!fl6.flowi6_oif)"
    },
    {
        "line": 155,
        "fullcodeline": "err = icmpv6_push_pending_frames(sk, &fl6, &tmp_hdr,"
    },
    {
        "line": 118,
        "fullcodeline": "fl6.flowi6_oif = np->ucast_oif;"
    },
    {
        "line": 46,
        "fullcodeline": "(opt_unrec(skb, info))))"
    },
    {
        "line": 45,
        "fullcodeline": "code == ICMPV6_UNK_OPTION &&"
    }
]