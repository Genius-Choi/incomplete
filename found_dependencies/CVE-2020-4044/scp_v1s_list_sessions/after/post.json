[
    {
        "line": 3,
        "fullcodeline": "tui32 version = 1;"
    },
    {
        "line": 4,
        "fullcodeline": "tui32 size = 12;"
    },
    {
        "line": 5,
        "fullcodeline": "tui16 cmd = 40;"
    },
    {
        "line": 13,
        "fullcodeline": "init_stream(c->out_s, c->out_s->size);"
    },
    {
        "line": 15,
        "fullcodeline": "out_uint32_be(c->out_s, version);                 /* version */"
    },
    {
        "line": 16,
        "fullcodeline": "out_uint32_be(c->out_s, size);                    /* size    */"
    },
    {
        "line": 17,
        "fullcodeline": "out_uint16_be(c->out_s, SCP_COMMAND_SET_DEFAULT); /* cmdset  */"
    },
    {
        "line": 18,
        "fullcodeline": "out_uint16_be(c->out_s, cmd);                     /* cmd     */"
    },
    {
        "line": 32,
        "fullcodeline": "init_stream(c->in_s, c->in_s->size);"
    },
    {
        "line": 40,
        "fullcodeline": "in_uint32_be(c->in_s, version);"
    },
    {
        "line": 48,
        "fullcodeline": "in_uint32_be(c->in_s, size);"
    },
    {
        "line": 58,
        "fullcodeline": "init_stream(c->in_s, size - 8);"
    },
    {
        "line": 66,
        "fullcodeline": "c->in_s->end = c->in_s->data + (size - 8);"
    },
    {
        "line": 68,
        "fullcodeline": "in_uint16_be(c->in_s, cmd);"
    },
    {
        "line": 76,
        "fullcodeline": "in_uint16_be(c->in_s, cmd);"
    },
    {
        "line": 85,
        "fullcodeline": "pktcnt = sescnt / SCP_SERVER_MAX_LIST_SIZE;"
    },
    {
        "line": 174,
        "fullcodeline": "init_stream(c->in_s, c->in_s->size);"
    },
    {
        "line": 182,
        "fullcodeline": "in_uint32_be(c->in_s, version);"
    },
    {
        "line": 190,
        "fullcodeline": "in_uint32_be(c->in_s, size);"
    },
    {
        "line": 201,
        "fullcodeline": "init_stream(c->in_s, size - 8);"
    },
    {
        "line": 209,
        "fullcodeline": "c->in_s->end = c->in_s->data + (size - 8);"
    },
    {
        "line": 211,
        "fullcodeline": "in_uint16_be(c->in_s, cmd);"
    },
    {
        "line": 219,
        "fullcodeline": "in_uint16_be(c->in_s, cmd);"
    },
    {
        "line": 20,
        "fullcodeline": "if (0 != scp_tcp_force_send(c->in_sck, c->out_s->data, size))"
    },
    {
        "line": 34,
        "fullcodeline": "if (0 != scp_tcp_force_recv(c->in_sck, c->in_s->data, 8))"
    },
    {
        "line": 42,
        "fullcodeline": "if (version != 1)"
    },
    {
        "line": 52,
        "fullcodeline": "if (size < (8 + 2 + 2) || size > SCP_MAX_MESSAGE_SIZE)"
    },
    {
        "line": 60,
        "fullcodeline": "if (0 != scp_tcp_force_recv(c->in_sck, c->in_s->data, (size - 8)))"
    },
    {
        "line": 70,
        "fullcodeline": "if (cmd != SCP_COMMAND_SET_DEFAULT)"
    },
    {
        "line": 78,
        "fullcodeline": "if (cmd != 41)"
    },
    {
        "line": 87,
        "fullcodeline": "if ((sescnt % SCP_SERVER_MAX_LIST_SIZE) != 0)"
    },
    {
        "line": 92,
        "fullcodeline": "for (idx = 0; idx < pktcnt; idx++)"
    },
    {
        "line": 176,
        "fullcodeline": "if (0 != scp_tcp_force_recv(c->in_sck, c->in_s->data, (8)))"
    },
    {
        "line": 184,
        "fullcodeline": "if (version != 1)"
    },
    {
        "line": 194,
        "fullcodeline": "if (size < (8 + 2 + 2) || size > SCP_MAX_MESSAGE_SIZE)"
    },
    {
        "line": 203,
        "fullcodeline": "if (0 != scp_tcp_force_recv(c->in_sck, c->in_s->data, (size - 8)))"
    },
    {
        "line": 213,
        "fullcodeline": "if (cmd != SCP_COMMAND_SET_DEFAULT)"
    },
    {
        "line": 221,
        "fullcodeline": "if (cmd == 43)"
    },
    {
        "line": 22,
        "fullcodeline": "log_message(LOG_LEVEL_WARNING, \"[v1s:%d] connection aborted: network error\", __LINE__);"
    },
    {
        "line": 36,
        "fullcodeline": "log_message(LOG_LEVEL_WARNING, \"[v1s:%d] connection aborted: network error\", __LINE__);"
    },
    {
        "line": 44,
        "fullcodeline": "log_message(LOG_LEVEL_WARNING, \"[v1s:%d] connection aborted: version error\", __LINE__);"
    },
    {
        "line": 54,
        "fullcodeline": "log_message(LOG_LEVEL_WARNING, \"[v1s:%d] connection aborted: size error\", __LINE__);"
    },
    {
        "line": 62,
        "fullcodeline": "log_message(LOG_LEVEL_WARNING, \"[v1s:%d] connection aborted: network error\", __LINE__);"
    },
    {
        "line": 72,
        "fullcodeline": "log_message(LOG_LEVEL_WARNING, \"[v1s:%d] connection aborted: sequence error\", __LINE__);"
    },
    {
        "line": 80,
        "fullcodeline": "log_message(LOG_LEVEL_WARNING, \"[v1s:%d] connection aborted: sequence error\", __LINE__);"
    },
    {
        "line": 89,
        "fullcodeline": "pktcnt++;"
    },
    {
        "line": 95,
        "fullcodeline": "init_stream(c->out_s, c->out_s->size);"
    },
    {
        "line": 98,
        "fullcodeline": "size = 4 + 4 + 2 + 2 + 4 + 1 + 1;"
    },
    {
        "line": 101,
        "fullcodeline": "cmd = 42;"
    },
    {
        "line": 102,
        "fullcodeline": "s_push_layer(c->out_s, channel_hdr, 8);"
    },
    {
        "line": 103,
        "fullcodeline": "out_uint16_be(c->out_s, SCP_COMMAND_SET_DEFAULT);"
    },
    {
        "line": 104,
        "fullcodeline": "out_uint16_be(c->out_s, cmd);"
    },
    {
        "line": 107,
        "fullcodeline": "out_uint32_be(c->out_s, sescnt);"
    },
    {
        "line": 162,
        "fullcodeline": "s_pop_layer(c->out_s, channel_hdr);"
    },
    {
        "line": 163,
        "fullcodeline": "out_uint32_be(c->out_s, version);"
    },
    {
        "line": 164,
        "fullcodeline": "out_uint32_be(c->out_s, size);"
    },
    {
        "line": 178,
        "fullcodeline": "log_message(LOG_LEVEL_WARNING, \"[v1s:%d] connection aborted: network error\", __LINE__);"
    },
    {
        "line": 186,
        "fullcodeline": "log_message(LOG_LEVEL_WARNING, \"[v1s:%d] connection aborted: version error\", __LINE__);"
    },
    {
        "line": 196,
        "fullcodeline": "log_message(LOG_LEVEL_WARNING, \"[v1s:%d] connection aborted: size error\", __LINE__);"
    },
    {
        "line": 205,
        "fullcodeline": "log_message(LOG_LEVEL_WARNING, \"[v1s:%d] connection aborted: network error\", __LINE__);"
    },
    {
        "line": 215,
        "fullcodeline": "log_message(LOG_LEVEL_WARNING, \"[v1s:%d] connection aborted: sequence error\", __LINE__);"
    },
    {
        "line": 229,
        "fullcodeline": "in_uint32_be(c->in_s, (*sid));"
    },
    {
        "line": 244,
        "fullcodeline": "log_message(LOG_LEVEL_WARNING, \"[v1s:%d] connection aborted: internal error (no such session in list)\", __LINE__);"
    },
    {
        "line": 110,
        "fullcodeline": "if ((idx + 1)*SCP_SERVER_MAX_LIST_SIZE >= sescnt)"
    },
    {
        "line": 126,
        "fullcodeline": "for (sidx = 0; sidx < pidx; sidx++)"
    },
    {
        "line": 166,
        "fullcodeline": "if (0 != scp_tcp_force_send(c->in_sck, c->out_s->data, size))"
    },
    {
        "line": 223,
        "fullcodeline": "if (!s_check_rem(c->in_s, 4))"
    },
    {
        "line": 232,
        "fullcodeline": "for (idx = 0; idx < sescnt; idx++)"
    },
    {
        "line": 112,
        "fullcodeline": "out_uint8(c->out_s, 0);"
    },
    {
        "line": 114,
        "fullcodeline": "pidx = sescnt - (idx * SCP_SERVER_MAX_LIST_SIZE);"
    },
    {
        "line": 115,
        "fullcodeline": "out_uint8(c->out_s, pidx);"
    },
    {
        "line": 129,
        "fullcodeline": "cds = ds + ((idx) * SCP_SERVER_MAX_LIST_SIZE) + sidx;"
    },
    {
        "line": 132,
        "fullcodeline": "out_uint32_be(c->out_s, cds->SID); /* session id */"
    },
    {
        "line": 133,
        "fullcodeline": "out_uint8(c->out_s, cds->type);"
    },
    {
        "line": 134,
        "fullcodeline": "out_uint16_be(c->out_s, cds->height);"
    },
    {
        "line": 135,
        "fullcodeline": "out_uint16_be(c->out_s, cds->width);"
    },
    {
        "line": 136,
        "fullcodeline": "out_uint8(c->out_s, cds->bpp);"
    },
    {
        "line": 137,
        "fullcodeline": "out_uint8(c->out_s, cds->idle_days);"
    },
    {
        "line": 138,
        "fullcodeline": "out_uint8(c->out_s, cds->idle_hours);"
    },
    {
        "line": 139,
        "fullcodeline": "out_uint8(c->out_s, cds->idle_minutes);"
    },
    {
        "line": 140,
        "fullcodeline": "size += 13;"
    },
    {
        "line": 142,
        "fullcodeline": "out_uint16_be(c->out_s, cds->conn_year);"
    },
    {
        "line": 143,
        "fullcodeline": "out_uint8(c->out_s, cds->conn_month);"
    },
    {
        "line": 144,
        "fullcodeline": "out_uint8(c->out_s, cds->conn_day);"
    },
    {
        "line": 145,
        "fullcodeline": "out_uint8(c->out_s, cds->conn_hour);"
    },
    {
        "line": 146,
        "fullcodeline": "out_uint8(c->out_s, cds->conn_minute);"
    },
    {
        "line": 147,
        "fullcodeline": "out_uint8(c->out_s, cds->addr_type);"
    },
    {
        "line": 148,
        "fullcodeline": "size += 7;"
    },
    {
        "line": 168,
        "fullcodeline": "log_message(LOG_LEVEL_WARNING, \"[v1s:%d] connection aborted: network error\", __LINE__);"
    },
    {
        "line": 225,
        "fullcodeline": "log_message(LOG_LEVEL_WARNING, \"[v1s:%d] connection aborted: missing session\", __LINE__);"
    },
    {
        "line": 247,
        "fullcodeline": "else if (cmd == 44)"
    },
    {
        "line": 119,
        "fullcodeline": "out_uint8(c->out_s, 1);"
    },
    {
        "line": 121,
        "fullcodeline": "pidx = SCP_SERVER_MAX_LIST_SIZE;"
    },
    {
        "line": 122,
        "fullcodeline": "out_uint8(c->out_s, pidx);"
    },
    {
        "line": 150,
        "fullcodeline": "if (cds->addr_type == SCP_ADDRESS_TYPE_IPV4)"
    },
    {
        "line": 235,
        "fullcodeline": "if (ds[idx].SID == (*sid))"
    },
    {
        "line": 152,
        "fullcodeline": "in_uint32_be(c->out_s, cds->ipv4addr);"
    },
    {
        "line": 153,
        "fullcodeline": "size += 4;"
    },
    {
        "line": 260,
        "fullcodeline": "log_message(LOG_LEVEL_WARNING, \"[v1s:%d] connection aborted: sequence error\", __LINE__);"
    },
    {
        "line": 155,
        "fullcodeline": "else if (cds->addr_type == SCP_ADDRESS_TYPE_IPV6)"
    },
    {
        "line": 157,
        "fullcodeline": "in_uint8a(c->out_s, cds->ipv6addr, 16);"
    },
    {
        "line": 158,
        "fullcodeline": "size += 16;"
    }
]