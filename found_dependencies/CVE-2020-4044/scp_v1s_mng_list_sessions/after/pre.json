[
    {
        "line": 4,
        "fullcodeline": "tui32 version = 1;"
    },
    {
        "line": 5,
        "fullcodeline": "tui32 size = 12;"
    },
    {
        "line": 6,
        "fullcodeline": "tui16 cmd = SCP_CMD_MNG_LIST;"
    },
    {
        "line": 14,
        "fullcodeline": "if (sescnt == 0)"
    },
    {
        "line": 28,
        "fullcodeline": "for (idx = 0; idx < pktcnt; idx++)"
    },
    {
        "line": 108,
        "fullcodeline": "return _scp_v1s_mng_check_response(c, s);"
    },
    {
        "line": 16,
        "fullcodeline": "pktcnt = 1;"
    },
    {
        "line": 31,
        "fullcodeline": "init_stream(c->out_s, c->out_s->size);"
    },
    {
        "line": 34,
        "fullcodeline": "size = 4 + 4 + 2 + 2 + 4 + 1 + 1;"
    },
    {
        "line": 37,
        "fullcodeline": "s_push_layer(c->out_s, channel_hdr, 8);"
    },
    {
        "line": 38,
        "fullcodeline": "out_uint16_be(c->out_s, SCP_COMMAND_SET_MANAGE);"
    },
    {
        "line": 39,
        "fullcodeline": "out_uint16_be(c->out_s, cmd);"
    },
    {
        "line": 42,
        "fullcodeline": "out_uint32_be(c->out_s, sescnt);"
    },
    {
        "line": 97,
        "fullcodeline": "s_pop_layer(c->out_s, channel_hdr);"
    },
    {
        "line": 98,
        "fullcodeline": "out_uint32_be(c->out_s, version);"
    },
    {
        "line": 99,
        "fullcodeline": "out_uint32_be(c->out_s, size);"
    },
    {
        "line": 20,
        "fullcodeline": "pktcnt = sescnt / SCP_SERVER_MAX_LIST_SIZE;"
    },
    {
        "line": 45,
        "fullcodeline": "if ((idx + 1)*SCP_SERVER_MAX_LIST_SIZE >= sescnt)"
    },
    {
        "line": 61,
        "fullcodeline": "for (sidx = 0; sidx < pidx; sidx++)"
    },
    {
        "line": 101,
        "fullcodeline": "if (0 != scp_tcp_force_send(c->in_sck, c->out_s->data, size))"
    },
    {
        "line": 22,
        "fullcodeline": "if ((sescnt % SCP_SERVER_MAX_LIST_SIZE) != 0)"
    },
    {
        "line": 47,
        "fullcodeline": "out_uint8(c->out_s, 0);"
    },
    {
        "line": 49,
        "fullcodeline": "pidx = sescnt - (idx * SCP_SERVER_MAX_LIST_SIZE);"
    },
    {
        "line": 50,
        "fullcodeline": "out_uint8(c->out_s, pidx);"
    },
    {
        "line": 64,
        "fullcodeline": "cds = ds + ((idx) * SCP_SERVER_MAX_LIST_SIZE) + sidx;"
    },
    {
        "line": 67,
        "fullcodeline": "out_uint32_be(c->out_s, cds->SID); /* session id */"
    },
    {
        "line": 68,
        "fullcodeline": "out_uint8(c->out_s, cds->type);"
    },
    {
        "line": 69,
        "fullcodeline": "out_uint16_be(c->out_s, cds->height);"
    },
    {
        "line": 70,
        "fullcodeline": "out_uint16_be(c->out_s, cds->width);"
    },
    {
        "line": 71,
        "fullcodeline": "out_uint8(c->out_s, cds->bpp);"
    },
    {
        "line": 72,
        "fullcodeline": "out_uint8(c->out_s, cds->idle_days);"
    },
    {
        "line": 73,
        "fullcodeline": "out_uint8(c->out_s, cds->idle_hours);"
    },
    {
        "line": 74,
        "fullcodeline": "out_uint8(c->out_s, cds->idle_minutes);"
    },
    {
        "line": 75,
        "fullcodeline": "size += 13;"
    },
    {
        "line": 77,
        "fullcodeline": "out_uint16_be(c->out_s, cds->conn_year);"
    },
    {
        "line": 78,
        "fullcodeline": "out_uint8(c->out_s, cds->conn_month);"
    },
    {
        "line": 79,
        "fullcodeline": "out_uint8(c->out_s, cds->conn_day);"
    },
    {
        "line": 80,
        "fullcodeline": "out_uint8(c->out_s, cds->conn_hour);"
    },
    {
        "line": 81,
        "fullcodeline": "out_uint8(c->out_s, cds->conn_minute);"
    },
    {
        "line": 82,
        "fullcodeline": "out_uint8(c->out_s, cds->addr_type);"
    },
    {
        "line": 83,
        "fullcodeline": "size += 7;"
    },
    {
        "line": 103,
        "fullcodeline": "log_message(LOG_LEVEL_WARNING, \"[v1s_mng:%d] connection aborted: network error\", __LINE__);"
    },
    {
        "line": 24,
        "fullcodeline": "pktcnt++;"
    },
    {
        "line": 54,
        "fullcodeline": "out_uint8(c->out_s, 1);"
    },
    {
        "line": 56,
        "fullcodeline": "pidx = SCP_SERVER_MAX_LIST_SIZE;"
    },
    {
        "line": 57,
        "fullcodeline": "out_uint8(c->out_s, pidx);"
    },
    {
        "line": 85,
        "fullcodeline": "if (cds->addr_type == SCP_ADDRESS_TYPE_IPV4)"
    },
    {
        "line": 87,
        "fullcodeline": "in_uint32_be(c->out_s, cds->ipv4addr);"
    },
    {
        "line": 88,
        "fullcodeline": "size += 4;"
    },
    {
        "line": 90,
        "fullcodeline": "else if (cds->addr_type == SCP_ADDRESS_TYPE_IPV6)"
    },
    {
        "line": 92,
        "fullcodeline": "in_uint8a(c->out_s, cds->ipv6addr, 16);"
    },
    {
        "line": 93,
        "fullcodeline": "size += 16;"
    }
]