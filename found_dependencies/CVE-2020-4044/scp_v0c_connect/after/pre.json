[
    {
        "line": 7,
        "fullcodeline": "init_stream(c->in_s, c->in_s->size);"
    },
    {
        "line": 8,
        "fullcodeline": "init_stream(c->out_s, c->in_s->size);"
    },
    {
        "line": 10,
        "fullcodeline": "LOG_DBG(\"[v0:%d] starting connection\", __LINE__);"
    },
    {
        "line": 11,
        "fullcodeline": "g_tcp_set_non_blocking(c->in_sck);"
    },
    {
        "line": 12,
        "fullcodeline": "g_tcp_set_no_delay(c->in_sck);"
    },
    {
        "line": 13,
        "fullcodeline": "s_push_layer(c->out_s, channel_hdr, 8);"
    },
    {
        "line": 34,
        "fullcodeline": "sz = g_strlen(s->username);"
    },
    {
        "line": 42,
        "fullcodeline": "out_uint16_be(c->out_s, sz);"
    },
    {
        "line": 43,
        "fullcodeline": "out_uint8a(c->out_s, s->username, sz);"
    },
    {
        "line": 45,
        "fullcodeline": "sz = g_strlen(s->password);"
    },
    {
        "line": 53,
        "fullcodeline": "out_uint16_be(c->out_s, sz);"
    },
    {
        "line": 54,
        "fullcodeline": "out_uint8a(c->out_s, s->password, sz);"
    },
    {
        "line": 55,
        "fullcodeline": "out_uint16_be(c->out_s, s->width);"
    },
    {
        "line": 56,
        "fullcodeline": "out_uint16_be(c->out_s, s->height);"
    },
    {
        "line": 57,
        "fullcodeline": "out_uint16_be(c->out_s, s->bpp);"
    },
    {
        "line": 59,
        "fullcodeline": "s_mark_end(c->out_s);"
    },
    {
        "line": 60,
        "fullcodeline": "s_pop_layer(c->out_s, channel_hdr);"
    },
    {
        "line": 63,
        "fullcodeline": "out_uint32_be(c->out_s, 0);"
    },
    {
        "line": 79,
        "fullcodeline": "in_uint32_be(c->in_s, version);"
    },
    {
        "line": 87,
        "fullcodeline": "in_uint32_be(c->in_s, size);"
    },
    {
        "line": 98,
        "fullcodeline": "init_stream(c->in_s, size - 8);"
    },
    {
        "line": 106,
        "fullcodeline": "c->in_s->end = c->in_s->data + (size - 8);"
    },
    {
        "line": 109,
        "fullcodeline": "in_uint16_be(c->in_s, sz);"
    },
    {
        "line": 118,
        "fullcodeline": "in_uint16_be(c->in_s, sz);"
    },
    {
        "line": 126,
        "fullcodeline": "in_uint16_be(c->in_s, sz);"
    },
    {
        "line": 16,
        "fullcodeline": "if (s->type == SCP_SESSION_TYPE_XVNC)"
    },
    {
        "line": 35,
        "fullcodeline": "if (sz > STRING16_MAX_LEN)"
    },
    {
        "line": 46,
        "fullcodeline": "if (sz > STRING16_MAX_LEN)"
    },
    {
        "line": 65,
        "fullcodeline": "out_uint32_be(c->out_s, c->out_s->end - c->out_s->data);"
    },
    {
        "line": 111,
        "fullcodeline": "if (3 != sz)"
    },
    {
        "line": 120,
        "fullcodeline": "if (1 != sz)"
    },
    {
        "line": 18,
        "fullcodeline": "out_uint16_be(c->out_s, 0);"
    },
    {
        "line": 67,
        "fullcodeline": "if (0 != scp_tcp_force_send(c->in_sck, c->out_s->data, c->out_s->end - c->out_s->data))"
    },
    {
        "line": 73,
        "fullcodeline": "if (0 != scp_tcp_force_recv(c->in_sck, c->in_s->data, 8))"
    },
    {
        "line": 89,
        "fullcodeline": "if (size < (8 + 2 + 2 + 2) || size > SCP_MAX_MESSAGE_SIZE)"
    },
    {
        "line": 100,
        "fullcodeline": "if (0 != scp_tcp_force_recv(c->in_sck, c->in_s->data, size - 8))"
    },
    {
        "line": 20,
        "fullcodeline": "else if (s->type == SCP_SESSION_TYPE_XRDP)"
    },
    {
        "line": 22,
        "fullcodeline": "out_uint16_be(c->out_s, 10);"
    },
    {
        "line": 24,
        "fullcodeline": "else if (s->type == SCP_SESSION_TYPE_XORG)"
    },
    {
        "line": 26,
        "fullcodeline": "out_uint16_be(c->out_s, 20);"
    },
    {
        "line": 30,
        "fullcodeline": "log_message(LOG_LEVEL_WARNING, \"[v0:%d] connection aborted: network error\", __LINE__);"
    }
]