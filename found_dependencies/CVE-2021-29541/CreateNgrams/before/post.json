[
    {
        "line": 3,
        "fullcodeline": "for (int ngram_index = 0; ngram_index < num_ngrams; ++ngram_index) {"
    },
    {
        "line": 4,
        "fullcodeline": "int pad_width = get_pad_width(ngram_width);"
    },
    {
        "line": 5,
        "fullcodeline": "int left_padding = std::max(0, pad_width - ngram_index);"
    },
    {
        "line": 6,
        "fullcodeline": "int right_padding ="
    },
    {
        "line": 8,
        "fullcodeline": "int num_tokens = ngram_width - (left_padding + right_padding);"
    },
    {
        "line": 9,
        "fullcodeline": "int data_start_index = left_padding > 0 ? 0 : ngram_index - pad_width;"
    },
    {
        "line": 13,
        "fullcodeline": "int ngram_size = 0;"
    },
    {
        "line": 15,
        "fullcodeline": "ngram_size += left_padding * left_pad_.length();"
    },
    {
        "line": 21,
        "fullcodeline": "ngram_size += right_padding * right_pad_.length();"
    },
    {
        "line": 23,
        "fullcodeline": "int num_separators = left_padding + right_padding + num_tokens - 1;"
    },
    {
        "line": 24,
        "fullcodeline": "ngram_size += num_separators * separator_.length();"
    },
    {
        "line": 27,
        "fullcodeline": "tstring* ngram = &output[ngram_index];"
    },
    {
        "line": 28,
        "fullcodeline": "ngram->reserve(ngram_size);"
    },
    {
        "line": 37,
        "fullcodeline": "ngram->append(data[data_start_index + num_tokens - 1]);"
    },
    {
        "line": 45,
        "fullcodeline": "DCHECK_EQ(ngram_size, ngram->size());"
    },
    {
        "line": 7,
        "fullcodeline": "std::max(0, pad_width - (num_ngrams - (ngram_index + 1)));"
    },
    {
        "line": 17,
        "fullcodeline": "for (int n = 0; n < num_tokens; ++n) {"
    },
    {
        "line": 29,
        "fullcodeline": "for (int n = 0; n < left_padding; ++n) {"
    },
    {
        "line": 33,
        "fullcodeline": "for (int n = 0; n < num_tokens - 1; ++n) {"
    },
    {
        "line": 38,
        "fullcodeline": "for (int n = 0; n < right_padding; ++n) {"
    },
    {
        "line": 18,
        "fullcodeline": "ngram_size += data[data_start_index + n].length();"
    },
    {
        "line": 30,
        "fullcodeline": "ngram->append(left_pad_);"
    },
    {
        "line": 31,
        "fullcodeline": "ngram->append(separator_);"
    },
    {
        "line": 34,
        "fullcodeline": "ngram->append(data[data_start_index + n]);"
    },
    {
        "line": 35,
        "fullcodeline": "ngram->append(separator_);"
    },
    {
        "line": 39,
        "fullcodeline": "ngram->append(separator_);"
    },
    {
        "line": 40,
        "fullcodeline": "ngram->append(right_pad_);"
    }
]