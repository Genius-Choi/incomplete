[
    {
        "line": 3,
        "fullcodeline": "struct page *pages[NFS4ACL_MAXPAGES] = {NULL, };"
    },
    {
        "line": 4,
        "fullcodeline": "struct nfs_getaclargs args = {"
    },
    {
        "line": 9,
        "fullcodeline": "struct nfs_getaclres res = {"
    },
    {
        "line": 12,
        "fullcodeline": "struct rpc_message msg = {"
    },
    {
        "line": 17,
        "fullcodeline": "unsigned int npages = DIV_ROUND_UP(buflen, PAGE_SIZE);"
    },
    {
        "line": 18,
        "fullcodeline": "int ret = -ENOMEM, i;"
    },
    {
        "line": 34,
        "fullcodeline": "res.acl_scratch = alloc_page(GFP_KERNEL);"
    },
    {
        "line": 38,
        "fullcodeline": "args.acl_len = npages * PAGE_SIZE;"
    },
    {
        "line": 39,
        "fullcodeline": "args.acl_pgbase = 0;"
    },
    {
        "line": 41,
        "fullcodeline": "dprintk(\"%s  buf %p buflen %zu npages %d args.acl_len %zu\\n\","
    },
    {
        "line": 43,
        "fullcodeline": "ret = nfs4_call_sync(NFS_SERVER(inode)->client, NFS_SERVER(inode),"
    },
    {
        "line": 56,
        "fullcodeline": "nfs4_write_cached_acl(inode, pages, res.acl_data_offset, res.acl_len);"
    },
    {
        "line": 60,
        "fullcodeline": "ret = res.acl_len;"
    },
    {
        "line": 22,
        "fullcodeline": "if (npages == 0)"
    },
    {
        "line": 24,
        "fullcodeline": "if (npages > ARRAY_SIZE(pages))"
    },
    {
        "line": 27,
        "fullcodeline": "for (i = 0; i < npages; i++) {"
    },
    {
        "line": 35,
        "fullcodeline": "if (!res.acl_scratch)"
    },
    {
        "line": 49,
        "fullcodeline": "if (res.acl_flags & NFS4_ACL_TRUNC) {"
    },
    {
        "line": 62,
        "fullcodeline": "for (i = 0; i < npages; i++)"
    },
    {
        "line": 23,
        "fullcodeline": "npages = 1;"
    },
    {
        "line": 28,
        "fullcodeline": "pages[i] = alloc_page(GFP_KERNEL);"
    },
    {
        "line": 53,
        "fullcodeline": "ret = -ERANGE;"
    },
    {
        "line": 58,
        "fullcodeline": "_copy_from_pages(buf, pages, res.acl_data_offset, res.acl_len);"
    },
    {
        "line": 66,
        "fullcodeline": "__free_page(res.acl_scratch);"
    },
    {
        "line": 5,
        "fullcodeline": ".fh = NFS_FH(inode),"
    },
    {
        "line": 6,
        "fullcodeline": ".acl_pages = pages,"
    },
    {
        "line": 7,
        "fullcodeline": ".acl_len = buflen,"
    },
    {
        "line": 10,
        "fullcodeline": ".acl_len = buflen,"
    },
    {
        "line": 14,
        "fullcodeline": ".rpc_argp = &args,"
    },
    {
        "line": 15,
        "fullcodeline": ".rpc_resp = &res,"
    },
    {
        "line": 25,
        "fullcodeline": "return -ERANGE;"
    },
    {
        "line": 29,
        "fullcodeline": "if (!pages[i])"
    },
    {
        "line": 51,
        "fullcodeline": "if (buf == NULL)"
    },
    {
        "line": 64,
        "fullcodeline": "__free_page(pages[i]);"
    }
]