[
    {
        "line": 2,
        "fullcodeline": "int j, loops = server.cronloops++;"
    },
    {
        "line": 3,
        "fullcodeline": "REDIS_NOTUSED(eventLoop);"
    },
    {
        "line": 4,
        "fullcodeline": "REDIS_NOTUSED(id);"
    },
    {
        "line": 5,
        "fullcodeline": "REDIS_NOTUSED(clientData);"
    },
    {
        "line": 11,
        "fullcodeline": "server.unixtime = time(NULL);"
    },
    {
        "line": 24,
        "fullcodeline": "updateLRUClock();"
    },
    {
        "line": 34,
        "fullcodeline": "for (j = 0; j < server.dbnum; j++) {"
    },
    {
        "line": 52,
        "fullcodeline": "if (server.bgsavechildpid == -1 && server.bgrewritechildpid == -1) {"
    },
    {
        "line": 58,
        "fullcodeline": "if (!(loops % 50)) {"
    },
    {
        "line": 66,
        "fullcodeline": "if ((server.maxidletime && !(loops % 100)) || server.bpop_blocked_clients)"
    },
    {
        "line": 70,
        "fullcodeline": "if (server.bgsavechildpid != -1 || server.bgrewritechildpid != -1) {"
    },
    {
        "line": 102,
        "fullcodeline": "if (server.masterhost == NULL) activeExpireCycle();"
    },
    {
        "line": 106,
        "fullcodeline": "if (vmCanSwapOut()) {"
    },
    {
        "line": 129,
        "fullcodeline": "if (!(loops % 10)) replicationCron();"
    },
    {
        "line": 30,
        "fullcodeline": "redisLog(REDIS_WARNING,\"SIGTERM received but errors trying to shut down the server, check the logs for more information\");"
    },
    {
        "line": 37,
        "fullcodeline": "size = dictSlots(server.db[j].dict);"
    },
    {
        "line": 38,
        "fullcodeline": "used = dictSize(server.db[j].dict);"
    },
    {
        "line": 39,
        "fullcodeline": "vkeys = dictSize(server.db[j].expires);"
    },
    {
        "line": 59,
        "fullcodeline": "redisLog(REDIS_VERBOSE,\"%d clients connected (%d slaves), %zu bytes in use\","
    },
    {
        "line": 67,
        "fullcodeline": "closeTimedoutClients();"
    },
    {
        "line": 29,
        "fullcodeline": "if (prepareForShutdown() == REDIS_OK) exit(0);"
    },
    {
        "line": 40,
        "fullcodeline": "if (!(loops % 50) && (used || vkeys)) {"
    },
    {
        "line": 53,
        "fullcodeline": "if (!(loops % 10)) tryResizeHashTables();"
    },
    {
        "line": 60,
        "fullcodeline": "listLength(server.clients)-listLength(server.slaves),"
    },
    {
        "line": 61,
        "fullcodeline": "listLength(server.slaves),"
    },
    {
        "line": 74,
        "fullcodeline": "if ((pid = wait3(&statloc,WNOHANG,NULL)) != 0) {"
    },
    {
        "line": 85,
        "fullcodeline": "time_t now = time(NULL);"
    },
    {
        "line": 107,
        "fullcodeline": "while (server.vm_enabled && zmalloc_used_memory() >"
    },
    {
        "line": 41,
        "fullcodeline": "redisLog(REDIS_VERBOSE,\"DB %d: %lld keys (%lld volatile) in %lld slots HT.\",j,used,vkeys,size);"
    },
    {
        "line": 54,
        "fullcodeline": "if (server.activerehashing) incrementallyRehash();"
    },
    {
        "line": 80,
        "fullcodeline": "updateDictResizePolicy();"
    },
    {
        "line": 86,
        "fullcodeline": "for (j = 0; j < server.saveparamslen; j++) {"
    },
    {
        "line": 110,
        "fullcodeline": "int retval = (server.vm_max_threads == 0) ?"
    },
    {
        "line": 75,
        "fullcodeline": "if (pid == server.bgsavechildpid) {"
    },
    {
        "line": 87,
        "fullcodeline": "struct saveparam *sp = server.saveparams+j;"
    },
    {
        "line": 113,
        "fullcodeline": "if (retval == REDIS_ERR && !(loops % 300) &&"
    },
    {
        "line": 123,
        "fullcodeline": "if (retval == REDIS_ERR || server.vm_max_threads > 0) break;"
    },
    {
        "line": 76,
        "fullcodeline": "backgroundSaveDoneHandler(statloc);"
    },
    {
        "line": 89,
        "fullcodeline": "if (server.dirty >= sp->changes &&"
    },
    {
        "line": 114,
        "fullcodeline": "zmalloc_used_memory() >"
    },
    {
        "line": 117,
        "fullcodeline": "redisLog(REDIS_WARNING,\"WARNING: vm-max-memory limit exceeded by more than 10%% but unable to swap more objects out!\");"
    },
    {
        "line": 78,
        "fullcodeline": "backgroundRewriteDoneHandler(statloc);"
    },
    {
        "line": 90,
        "fullcodeline": "now-server.lastsave > sp->seconds) {"
    },
    {
        "line": 91,
        "fullcodeline": "redisLog(REDIS_NOTICE,\"%d changes in %d seconds. Saving...\","
    },
    {
        "line": 115,
        "fullcodeline": "(server.vm_max_memory+server.vm_max_memory/10))"
    }
]