[
    {
        "line": 15,
        "fullcodeline": "OM_uint32 major_status = GSS_S_FAILURE;"
    },
    {
        "line": 20,
        "fullcodeline": "krb5_boolean cred_locked = FALSE;"
    },
    {
        "line": 21,
        "fullcodeline": "int initialContextToken = (*context_handle == GSS_C_NO_CONTEXT);"
    },
    {
        "line": 45,
        "fullcodeline": "kname = (krb5_gss_name_t)target_name;"
    },
    {
        "line": 47,
        "fullcodeline": "major_status = kg_cred_resolve(minor_status, ctx->k5c,"
    },
    {
        "line": 51,
        "fullcodeline": "cred_locked = TRUE;"
    },
    {
        "line": 52,
        "fullcodeline": "kcred = (krb5_gss_cred_id_t)claimant_cred_handle;"
    },
    {
        "line": 54,
        "fullcodeline": "major_status = GSS_S_FAILURE;"
    },
    {
        "line": 49,
        "fullcodeline": "if (GSS_ERROR(major_status))"
    },
    {
        "line": 66,
        "fullcodeline": "if (ctx->state != IAKERB_AP_REQ) {"
    },
    {
        "line": 82,
        "fullcodeline": "if (ctx->state == IAKERB_AP_REQ) {"
    },
    {
        "line": 127,
        "fullcodeline": "if (initialContextToken && GSS_ERROR(major_status)) {"
    },
    {
        "line": 24,
        "fullcodeline": "code = iakerb_alloc_context(&ctx, 1);"
    },
    {
        "line": 57,
        "fullcodeline": "code = iakerb_get_initial_state(ctx, kcred, kname, time_req,"
    },
    {
        "line": 63,
        "fullcodeline": "*context_handle = (gss_ctx_id_t)ctx;"
    },
    {
        "line": 68,
        "fullcodeline": "code = iakerb_initiator_step(ctx,"
    },
    {
        "line": 90,
        "fullcodeline": "iakerb_make_exts(ctx, &exts);"
    },
    {
        "line": 96,
        "fullcodeline": "major_status = krb5_gss_init_sec_context_ext(minor_status,"
    },
    {
        "line": 126,
        "fullcodeline": "k5_mutex_unlock(&kcred->lock);"
    },
    {
        "line": 128,
        "fullcodeline": "iakerb_release_context(ctx);"
    },
    {
        "line": 129,
        "fullcodeline": "*context_handle = GSS_C_NO_CONTEXT;"
    },
    {
        "line": 25,
        "fullcodeline": "if (code != 0) {"
    },
    {
        "line": 29,
        "fullcodeline": "if (claimant_cred_handle == GSS_C_NO_CREDENTIAL) {"
    },
    {
        "line": 40,
        "fullcodeline": "ctx = (iakerb_ctx_id_t)*context_handle;"
    },
    {
        "line": 59,
        "fullcodeline": "if (code != 0) {"
    },
    {
        "line": 74,
        "fullcodeline": "if (code == KRB5_BAD_MSIZE)"
    },
    {
        "line": 76,
        "fullcodeline": "if (code != 0) {"
    },
    {
        "line": 92,
        "fullcodeline": "if (ctx->gssc == GSS_C_NO_CONTEXT)"
    },
    {
        "line": 110,
        "fullcodeline": "if (major_status == GSS_S_COMPLETE)"
    },
    {
        "line": 112,
        "fullcodeline": "if (actual_mech_type != NULL)"
    },
    {
        "line": 121,
        "fullcodeline": "major_status = GSS_S_CONTINUE_NEEDED;"
    },
    {
        "line": 26,
        "fullcodeline": "*minor_status = code;"
    },
    {
        "line": 30,
        "fullcodeline": "major_status = iakerb_gss_acquire_cred(minor_status, NULL,"
    },
    {
        "line": 37,
        "fullcodeline": "claimant_cred_handle = ctx->defcred;"
    },
    {
        "line": 41,
        "fullcodeline": "if (claimant_cred_handle == GSS_C_NO_CREDENTIAL)"
    },
    {
        "line": 60,
        "fullcodeline": "*minor_status = code;"
    },
    {
        "line": 75,
        "fullcodeline": "major_status = GSS_S_DEFECTIVE_TOKEN;"
    },
    {
        "line": 77,
        "fullcodeline": "*minor_status = code;"
    },
    {
        "line": 86,
        "fullcodeline": "k5_mutex_unlock(&kcred->lock);"
    },
    {
        "line": 87,
        "fullcodeline": "cred_locked = FALSE;"
    },
    {
        "line": 93,
        "fullcodeline": "input_token = GSS_C_NO_BUFFER;"
    },
    {
        "line": 97,
        "fullcodeline": "(gss_cred_id_t) kcred,"
    },
    {
        "line": 100,
        "fullcodeline": "(gss_OID)gss_mech_iakerb,"
    },
    {
        "line": 111,
        "fullcodeline": "ctx->established = 1;"
    },
    {
        "line": 113,
        "fullcodeline": "*actual_mech_type = (gss_OID)gss_mech_krb5;"
    },
    {
        "line": 115,
        "fullcodeline": "if (actual_mech_type != NULL)"
    },
    {
        "line": 117,
        "fullcodeline": "if (ret_flags != NULL)"
    },
    {
        "line": 119,
        "fullcodeline": "if (time_rec != NULL)"
    },
    {
        "line": 35,
        "fullcodeline": "if (GSS_ERROR(major_status))"
    },
    {
        "line": 42,
        "fullcodeline": "claimant_cred_handle = ctx->defcred;"
    },
    {
        "line": 116,
        "fullcodeline": "*actual_mech_type = (gss_OID)gss_mech_iakerb;"
    },
    {
        "line": 118,
        "fullcodeline": "*ret_flags = 0;"
    },
    {
        "line": 120,
        "fullcodeline": "*time_rec = 0;"
    }
]