[
    {
        "line": 4,
        "fullcodeline": "struct mem_size_stats *mss = walk->private;"
    },
    {
        "line": 5,
        "fullcodeline": "struct vm_area_struct *vma = mss->vma;"
    },
    {
        "line": 32,
        "fullcodeline": "pte = pte_offset_map_lock(vma->vm_mm, pmd, addr, &ptl);"
    },
    {
        "line": 35,
        "fullcodeline": "pte_unmap_unlock(pte - 1, ptl);"
    },
    {
        "line": 36,
        "fullcodeline": "cond_resched();"
    },
    {
        "line": 25,
        "fullcodeline": "if (pmd_trans_unstable(pmd))"
    },
    {
        "line": 33,
        "fullcodeline": "for (; addr != end; pte++, addr += PAGE_SIZE)"
    },
    {
        "line": 34,
        "fullcodeline": "smaps_pte_entry(*pte, addr, PAGE_SIZE, walk);"
    },
    {
        "line": 11,
        "fullcodeline": "if (pmd_trans_splitting(*pmd)) {"
    },
    {
        "line": 22,
        "fullcodeline": "spin_unlock(&walk->mm->page_table_lock);"
    },
    {
        "line": 12,
        "fullcodeline": "spin_unlock(&walk->mm->page_table_lock);"
    },
    {
        "line": 13,
        "fullcodeline": "wait_split_huge_page(vma->anon_vma, pmd);"
    },
    {
        "line": 15,
        "fullcodeline": "smaps_pte_entry(*(pte_t *)pmd, addr,"
    },
    {
        "line": 17,
        "fullcodeline": "spin_unlock(&walk->mm->page_table_lock);"
    },
    {
        "line": 18,
        "fullcodeline": "mss->anonymous_thp += HPAGE_PMD_SIZE;"
    }
]