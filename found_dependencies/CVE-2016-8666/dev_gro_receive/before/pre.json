[
    {
        "line": 3,
        "fullcodeline": "struct sk_buff **pp = NULL;"
    },
    {
        "line": 5,
        "fullcodeline": "__be16 type = skb->protocol;"
    },
    {
        "line": 6,
        "fullcodeline": "struct list_head *head = &offload_base;"
    },
    {
        "line": 17,
        "fullcodeline": "gro_list_prepare(napi, skb);"
    },
    {
        "line": 20,
        "fullcodeline": "list_for_each_entry_rcu(ptype, head, list) {"
    },
    {
        "line": 89,
        "fullcodeline": "NAPI_GRO_CB(skb)->age = jiffies;"
    },
    {
        "line": 94,
        "fullcodeline": "ret = GRO_HELD;"
    },
    {
        "line": 97,
        "fullcodeline": "grow = skb_gro_offset(skb) - skb_headlen(skb);"
    },
    {
        "line": 104,
        "fullcodeline": "ret = GRO_NORMAL;"
    },
    {
        "line": 11,
        "fullcodeline": "if (!(skb->dev->features & NETIF_F_GRO))"
    },
    {
        "line": 14,
        "fullcodeline": "if (skb_is_gso(skb) || skb_has_frag_list(skb) || skb->csum_bad)"
    },
    {
        "line": 24,
        "fullcodeline": "skb_set_network_header(skb, skb_gro_offset(skb));"
    },
    {
        "line": 25,
        "fullcodeline": "skb_reset_mac_len(skb);"
    },
    {
        "line": 57,
        "fullcodeline": "ret = NAPI_GRO_CB(skb)->free ? GRO_MERGED_FREE : GRO_MERGED;"
    },
    {
        "line": 98,
        "fullcodeline": "if (grow > 0)"
    },
    {
        "line": 48,
        "fullcodeline": "pp = ptype->callbacks.gro_receive(&napi->gro_list, skb);"
    },
    {
        "line": 74,
        "fullcodeline": "if (unlikely(napi->gro_count >= MAX_GRO_SKBS)) {"
    },
    {
        "line": 99,
        "fullcodeline": "gro_pull_from_frag0(skb, grow);"
    },
    {
        "line": 21,
        "fullcodeline": "if (ptype->type != type || !ptype->callbacks.gro_receive)"
    },
    {
        "line": 26,
        "fullcodeline": "NAPI_GRO_CB(skb)->same_flow = 0;"
    },
    {
        "line": 27,
        "fullcodeline": "NAPI_GRO_CB(skb)->flush = 0;"
    },
    {
        "line": 28,
        "fullcodeline": "NAPI_GRO_CB(skb)->free = 0;"
    },
    {
        "line": 29,
        "fullcodeline": "NAPI_GRO_CB(skb)->udp_mark = 0;"
    },
    {
        "line": 30,
        "fullcodeline": "NAPI_GRO_CB(skb)->gro_remcsum_start = 0;"
    },
    {
        "line": 35,
        "fullcodeline": "NAPI_GRO_CB(skb)->csum = skb->csum;"
    },
    {
        "line": 36,
        "fullcodeline": "NAPI_GRO_CB(skb)->csum_valid = 1;"
    },
    {
        "line": 37,
        "fullcodeline": "NAPI_GRO_CB(skb)->csum_cnt = 0;"
    },
    {
        "line": 40,
        "fullcodeline": "NAPI_GRO_CB(skb)->csum_cnt = skb->csum_level + 1;"
    },
    {
        "line": 41,
        "fullcodeline": "NAPI_GRO_CB(skb)->csum_valid = 0;"
    },
    {
        "line": 44,
        "fullcodeline": "NAPI_GRO_CB(skb)->csum_cnt = 0;"
    },
    {
        "line": 45,
        "fullcodeline": "NAPI_GRO_CB(skb)->csum_valid = 0;"
    }
]