[
    {
        "line": 4,
        "fullcodeline": "struct sk_buff **pp = NULL;"
    },
    {
        "line": 9,
        "fullcodeline": "int flush = 1;"
    },
    {
        "line": 16,
        "fullcodeline": "NAPI_GRO_CB(skb)->encap_mark = 1;"
    },
    {
        "line": 18,
        "fullcodeline": "off = skb_gro_offset(skb);"
    },
    {
        "line": 19,
        "fullcodeline": "hlen = off + sizeof(*greh);"
    },
    {
        "line": 20,
        "fullcodeline": "greh = skb_gro_header_fast(skb, off);"
    },
    {
        "line": 36,
        "fullcodeline": "type = greh->protocol;"
    },
    {
        "line": 38,
        "fullcodeline": "rcu_read_lock();"
    },
    {
        "line": 39,
        "fullcodeline": "ptype = gro_find_receive_by_type(type);"
    },
    {
        "line": 43,
        "fullcodeline": "grehlen = GRE_HEADER_SECTION;"
    },
    {
        "line": 51,
        "fullcodeline": "hlen = off + grehlen;"
    },
    {
        "line": 97,
        "fullcodeline": "skb_gro_pull(skb, grehlen);"
    },
    {
        "line": 100,
        "fullcodeline": "skb_gro_postpull_rcsum(skb, greh, grehlen);"
    },
    {
        "line": 102,
        "fullcodeline": "pp = ptype->callbacks.gro_receive(head, skb);"
    },
    {
        "line": 103,
        "fullcodeline": "flush = 0;"
    },
    {
        "line": 106,
        "fullcodeline": "rcu_read_unlock();"
    },
    {
        "line": 108,
        "fullcodeline": "NAPI_GRO_CB(skb)->flush |= flush;"
    },
    {
        "line": 21,
        "fullcodeline": "if (skb_gro_header_hard(skb, hlen)) {"
    },
    {
        "line": 33,
        "fullcodeline": "if ((greh->flags & ~(GRE_KEY|GRE_CSUM)) != 0)"
    },
    {
        "line": 40,
        "fullcodeline": "if (!ptype)"
    },
    {
        "line": 45,
        "fullcodeline": "if (greh->flags & GRE_KEY)"
    },
    {
        "line": 48,
        "fullcodeline": "if (greh->flags & GRE_CSUM)"
    },
    {
        "line": 52,
        "fullcodeline": "if (skb_gro_header_hard(skb, hlen)) {"
    },
    {
        "line": 59,
        "fullcodeline": "if ((greh->flags & GRE_CSUM) && !NAPI_GRO_CB(skb)->flush) {"
    },
    {
        "line": 67,
        "fullcodeline": "for (p = *head; p; p = p->next) {"
    },
    {
        "line": 13,
        "fullcodeline": "if (NAPI_GRO_CB(skb)->encap_mark)"
    },
    {
        "line": 22,
        "fullcodeline": "greh = skb_gro_header_slow(skb, hlen, off);"
    },
    {
        "line": 46,
        "fullcodeline": "grehlen += GRE_HEADER_SECTION;"
    },
    {
        "line": 49,
        "fullcodeline": "grehlen += GRE_HEADER_SECTION;"
    },
    {
        "line": 53,
        "fullcodeline": "greh = skb_gro_header_slow(skb, hlen, off);"
    },
    {
        "line": 63,
        "fullcodeline": "skb_gro_checksum_try_convert(skb, IPPROTO_GRE, 0,"
    },
    {
        "line": 81,
        "fullcodeline": "greh2 = (struct gre_base_hdr *)(p->data + off);"
    },
    {
        "line": 23,
        "fullcodeline": "if (unlikely(!greh))"
    },
    {
        "line": 54,
        "fullcodeline": "if (unlikely(!greh))"
    },
    {
        "line": 60,
        "fullcodeline": "if (skb_gro_checksum_simple_validate(skb))"
    },
    {
        "line": 70,
        "fullcodeline": "if (!NAPI_GRO_CB(p)->same_flow)"
    },
    {
        "line": 83,
        "fullcodeline": "if (greh2->flags != greh->flags ||"
    },
    {
        "line": 88,
        "fullcodeline": "if (greh->flags & GRE_KEY) {"
    },
    {
        "line": 84,
        "fullcodeline": "greh2->protocol != greh->protocol) {"
    },
    {
        "line": 85,
        "fullcodeline": "NAPI_GRO_CB(p)->same_flow = 0;"
    },
    {
        "line": 91,
        "fullcodeline": "NAPI_GRO_CB(p)->same_flow = 0;"
    },
    {
        "line": 90,
        "fullcodeline": "if (*(__be32 *)(greh2+1) != *(__be32 *)(greh+1)) {"
    }
]