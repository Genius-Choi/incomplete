[
    {
        "line": 2,
        "fullcodeline": "import gradio as gr"
    },
    {
        "line": 4,
        "fullcodeline": "from request_llm.bridge_all import predict"
    },
    {
        "line": 11,
        "fullcodeline": "PORT = find_free_port() if WEB_PORT <= 0 else WEB_PORT"
    },
    {
        "line": 14,
        "fullcodeline": "from check_proxy import get_current_version"
    },
    {
        "line": 15,
        "fullcodeline": "initial_prompt = \"Serve me as a writing and programming assistant.\""
    },
    {
        "line": 16,
        "fullcodeline": "title_html = f\"<h1 align=\\\"center\\\">ChatGPT \u5b66\u672f\u4f18\u5316 {get_current_version()}</h1>\""
    },
    {
        "line": 17,
        "fullcodeline": "description =  \"\"\"\u4ee3\u7801\u5f00\u6e90\u548c\u66f4\u65b0[\u5730\u5740\ud83d\ude80](https://github.com/binary-husky/chatgpt_academic)\uff0c\u611f\u8c22\u70ed\u60c5\u7684[\u5f00\u53d1\u8005\u4eec\u2764\ufe0f](https://github.com/binary-husky/chatgpt_academic/graphs/contributors)\"\"\""
    },
    {
        "line": 20,
        "fullcodeline": "import logging"
    },
    {
        "line": 21,
        "fullcodeline": "os.makedirs(\"gpt_log\", exist_ok=True)"
    },
    {
        "line": 24,
        "fullcodeline": "print(\"\u6240\u6709\u95ee\u8be2\u8bb0\u5f55\u5c06\u81ea\u52a8\u4fdd\u5b58\u5728\u672c\u5730\u76ee\u5f55./gpt_log/chat_secrets.log, \u8bf7\u6ce8\u610f\u81ea\u6211\u9690\u79c1\u4fdd\u62a4\u54e6\uff01\")"
    },
    {
        "line": 27,
        "fullcodeline": "from core_functional import get_core_functions"
    },
    {
        "line": 28,
        "fullcodeline": "functional = get_core_functions()"
    },
    {
        "line": 31,
        "fullcodeline": "from crazy_functional import get_crazy_functions"
    },
    {
        "line": 32,
        "fullcodeline": "crazy_fns = get_crazy_functions()"
    },
    {
        "line": 35,
        "fullcodeline": "gr.Chatbot.postprocess = format_io"
    },
    {
        "line": 39,
        "fullcodeline": "set_theme = adjust_theme()"
    },
    {
        "line": 43,
        "fullcodeline": "proxy_info = check_proxy(proxies)"
    },
    {
        "line": 45,
        "fullcodeline": "gr_L1 = lambda: gr.Row().style()"
    },
    {
        "line": 46,
        "fullcodeline": "gr_L2 = lambda scale: gr.Column(scale=scale)"
    },
    {
        "line": 52,
        "fullcodeline": "cancel_handles = []"
    },
    {
        "line": 183,
        "fullcodeline": "def auto_opentab_delay():"
    },
    {
        "line": 197,
        "fullcodeline": "auto_opentab_delay()"
    },
    {
        "line": 3,
        "fullcodeline": "if gr.__version__ not in ['3.28.3','3.32.2']: assert False, \"\u8bf7\u7528 pip install -r requirements.txt \u5b89\u88c5\u4f9d\u8d56\""
    },
    {
        "line": 5,
        "fullcodeline": "from toolbox import format_io, find_free_port, on_file_uploaded, on_report_generated, get_conf, ArgsGeneralWrapper, DummyWith"
    },
    {
        "line": 7,
        "fullcodeline": "proxies, WEB_PORT, LLM_MODEL, CONCURRENT_COUNT, AUTHENTICATION, CHATBOT_HEIGHT, LAYOUT, API_KEY, AVAIL_LLM_MODELS = \\"
    },
    {
        "line": 12,
        "fullcodeline": "if not AUTHENTICATION: AUTHENTICATION = None"
    },
    {
        "line": 38,
        "fullcodeline": "from theme import adjust_theme, advanced_css"
    },
    {
        "line": 42,
        "fullcodeline": "from check_proxy import check_proxy, auto_update, warm_up_modules"
    },
    {
        "line": 47,
        "fullcodeline": "if LAYOUT == \"TOP-DOWN\":"
    },
    {
        "line": 53,
        "fullcodeline": "with gr.Blocks(title=\"ChatGPT \u5b66\u672f\u4f18\u5316\", theme=set_theme, analytics_enabled=False, css=advanced_css) as demo:"
    },
    {
        "line": 198,
        "fullcodeline": "demo.queue(concurrency_count=CONCURRENT_COUNT).launch("
    },
    {
        "line": 8,
        "fullcodeline": "get_conf('proxies', 'WEB_PORT', 'LLM_MODEL', 'CONCURRENT_COUNT', 'AUTHENTICATION', 'CHATBOT_HEIGHT', 'LAYOUT', 'API_KEY', 'AVAIL_LLM_MODELS')"
    },
    {
        "line": 22,
        "fullcodeline": "try:logging.basicConfig(filename=\"gpt_log/chat_secrets.log\", level=logging.INFO, encoding=\"utf-8\")"
    },
    {
        "line": 48,
        "fullcodeline": "gr_L1 = lambda: DummyWith()"
    },
    {
        "line": 49,
        "fullcodeline": "gr_L2 = lambda scale: gr.Row()"
    },
    {
        "line": 50,
        "fullcodeline": "CHATBOT_HEIGHT /= 2"
    },
    {
        "line": 200,
        "fullcodeline": "favicon_path=\"docs/logo.png\", blocked_paths=[\"config.py\",\"config_private.py\",\"docker-compose.yml\",\"Dockerfile\"])"
    },
    {
        "line": 54,
        "fullcodeline": "gr.HTML(title_html)"
    },
    {
        "line": 55,
        "fullcodeline": "cookies = gr.State({'api_key': API_KEY, 'llm_model': LLM_MODEL})"
    },
    {
        "line": 120,
        "fullcodeline": "def fn_area_visibility(a):"
    },
    {
        "line": 131,
        "fullcodeline": "checkboxes.select(fn_area_visibility, [checkboxes], [area_basic_fn, area_crazy_fn, area_input_primary, area_input_secondary, txt, txt2, clearBtn, clearBtn2, plugin_advanced_arg] )"
    },
    {
        "line": 133,
        "fullcodeline": "input_combo = [cookies, max_length_sl, md_dropdown, txt, txt2, top_p, temperature, chatbot, history, system_prompt, plugin_advanced_arg]"
    },
    {
        "line": 134,
        "fullcodeline": "output_combo = [cookies, chatbot, history, status]"
    },
    {
        "line": 135,
        "fullcodeline": "predict_args = dict(fn=ArgsGeneralWrapper(predict), inputs=input_combo, outputs=output_combo)"
    },
    {
        "line": 137,
        "fullcodeline": "cancel_handles.append(txt.submit(**predict_args))"
    },
    {
        "line": 138,
        "fullcodeline": "cancel_handles.append(txt2.submit(**predict_args))"
    },
    {
        "line": 139,
        "fullcodeline": "cancel_handles.append(submitBtn.click(**predict_args))"
    },
    {
        "line": 140,
        "fullcodeline": "cancel_handles.append(submitBtn2.click(**predict_args))"
    },
    {
        "line": 141,
        "fullcodeline": "resetBtn.click(lambda: ([], [], \"\u5df2\u91cd\u7f6e\"), None, [chatbot, history, status])"
    },
    {
        "line": 142,
        "fullcodeline": "resetBtn2.click(lambda: ([], [], \"\u5df2\u91cd\u7f6e\"), None, [chatbot, history, status])"
    },
    {
        "line": 143,
        "fullcodeline": "clearBtn.click(lambda: (\"\",\"\"), None, [txt, txt2])"
    },
    {
        "line": 144,
        "fullcodeline": "clearBtn2.click(lambda: (\"\",\"\"), None, [txt, txt2])"
    },
    {
        "line": 151,
        "fullcodeline": "file_upload.upload(on_file_uploaded, [file_upload, chatbot, txt, txt2, checkboxes], [chatbot, txt, txt2])"
    },
    {
        "line": 159,
        "fullcodeline": "def on_dropdown_changed(k):"
    },
    {
        "line": 167,
        "fullcodeline": "dropdown.select(on_dropdown_changed, [dropdown], [switchy_bt, plugin_advanced_arg] )"
    },
    {
        "line": 168,
        "fullcodeline": "def on_md_dropdown_changed(k):"
    },
    {
        "line": 170,
        "fullcodeline": "md_dropdown.select(on_md_dropdown_changed, [md_dropdown], [chatbot] )"
    },
    {
        "line": 172,
        "fullcodeline": "def route(k, *args, **kwargs):"
    },
    {
        "line": 175,
        "fullcodeline": "click_handle = switchy_bt.click(route,[switchy_bt, *input_combo, gr.State(PORT)], output_combo)"
    },
    {
        "line": 176,
        "fullcodeline": "click_handle.then(on_report_generated, [file_upload, chatbot], [file_upload, chatbot])"
    },
    {
        "line": 177,
        "fullcodeline": "cancel_handles.append(click_handle)"
    },
    {
        "line": 179,
        "fullcodeline": "stopBtn.click(fn=None, inputs=None, outputs=None, cancels=cancel_handles)"
    },
    {
        "line": 180,
        "fullcodeline": "stopBtn2.click(fn=None, inputs=None, outputs=None, cancels=cancel_handles)"
    },
    {
        "line": 23,
        "fullcodeline": "except:logging.basicConfig(filename=\"gpt_log/chat_secrets.log\", level=logging.INFO)"
    },
    {
        "line": 56,
        "fullcodeline": "with gr_L1():"
    },
    {
        "line": 146,
        "fullcodeline": "for k in functional:"
    },
    {
        "line": 153,
        "fullcodeline": "for k in crazy_fns:"
    },
    {
        "line": 148,
        "fullcodeline": "click_handle = functional[k][\"Button\"].click(fn=ArgsGeneralWrapper(predict), inputs=[*input_combo, gr.State(True), gr.State(k)], outputs=output_combo)"
    },
    {
        "line": 149,
        "fullcodeline": "cancel_handles.append(click_handle)"
    },
    {
        "line": 155,
        "fullcodeline": "click_handle = crazy_fns[k][\"Button\"].click(ArgsGeneralWrapper(crazy_fns[k][\"Function\"]), [*input_combo, gr.State(PORT)], output_combo)"
    },
    {
        "line": 156,
        "fullcodeline": "click_handle.then(on_report_generated, [file_upload, chatbot], [file_upload, chatbot])"
    },
    {
        "line": 157,
        "fullcodeline": "cancel_handles.append(click_handle)"
    },
    {
        "line": 57,
        "fullcodeline": "with gr_L2(scale=2):"
    },
    {
        "line": 61,
        "fullcodeline": "with gr_L2(scale=1):"
    },
    {
        "line": 147,
        "fullcodeline": "if (\"Visible\" in functional[k]) and (not functional[k][\"Visible\"]): continue"
    },
    {
        "line": 154,
        "fullcodeline": "if not crazy_fns[k].get(\"AsButton\", True): continue"
    },
    {
        "line": 58,
        "fullcodeline": "chatbot = gr.Chatbot(label=f\"\u5f53\u524d\u6a21\u578b\uff1a{LLM_MODEL}\")"
    },
    {
        "line": 59,
        "fullcodeline": "chatbot.style(height=CHATBOT_HEIGHT)"
    },
    {
        "line": 60,
        "fullcodeline": "history = gr.State([])"
    },
    {
        "line": 62,
        "fullcodeline": "with gr.Accordion(\"\u8f93\u5165\u533a\", open=True) as area_input_primary:"
    },
    {
        "line": 73,
        "fullcodeline": "with gr.Accordion(\"\u57fa\u7840\u529f\u80fd\u533a\", open=True) as area_basic_fn:"
    },
    {
        "line": 79,
        "fullcodeline": "with gr.Accordion(\"\u51fd\u6570\u63d2\u4ef6\u533a\", open=True) as area_crazy_fn:"
    },
    {
        "line": 101,
        "fullcodeline": "with gr.Accordion(\"\u66f4\u6362\u6a21\u578b & SysPrompt & \u4ea4\u4e92\u754c\u9762\u5e03\u5c40\", open=(LAYOUT == \"TOP-DOWN\")):"
    },
    {
        "line": 110,
        "fullcodeline": "with gr.Accordion(\"\u5907\u9009\u8f93\u5165\u533a\", open=True, visible=False) as area_input_secondary:"
    },
    {
        "line": 102,
        "fullcodeline": "system_prompt = gr.Textbox(show_label=True, placeholder=f\"System Prompt\", label=\"System prompt\", value=initial_prompt)"
    },
    {
        "line": 103,
        "fullcodeline": "top_p = gr.Slider(minimum=-0, maximum=1.0, value=1.0, step=0.01,interactive=True, label=\"Top-p (nucleus sampling)\",)"
    },
    {
        "line": 104,
        "fullcodeline": "temperature = gr.Slider(minimum=-0, maximum=2.0, value=1.0, step=0.01, interactive=True, label=\"Temperature\",)"
    },
    {
        "line": 105,
        "fullcodeline": "max_length_sl = gr.Slider(minimum=256, maximum=4096, value=512, step=1, interactive=True, label=\"Local LLM MaxLength\",)"
    },
    {
        "line": 106,
        "fullcodeline": "checkboxes = gr.CheckboxGroup([\"\u57fa\u7840\u529f\u80fd\u533a\", \"\u51fd\u6570\u63d2\u4ef6\u533a\", \"\u5e95\u90e8\u8f93\u5165\u533a\", \"\u8f93\u5165\u6e05\u9664\u952e\", \"\u63d2\u4ef6\u53c2\u6570\u533a\"], value=[\"\u57fa\u7840\u529f\u80fd\u533a\", \"\u51fd\u6570\u63d2\u4ef6\u533a\"], label=\"\u663e\u793a/\u9690\u85cf\u529f\u80fd\u533a\")"
    },
    {
        "line": 107,
        "fullcodeline": "md_dropdown = gr.Dropdown(AVAIL_LLM_MODELS, value=LLM_MODEL, label=\"\u66f4\u6362LLM\u6a21\u578b/\u8bf7\u6c42\u6e90\").style(container=False)"
    },
    {
        "line": 109,
        "fullcodeline": "gr.Markdown(description)"
    },
    {
        "line": 63,
        "fullcodeline": "with gr.Row():"
    },
    {
        "line": 65,
        "fullcodeline": "with gr.Row():"
    },
    {
        "line": 67,
        "fullcodeline": "with gr.Row():"
    },
    {
        "line": 71,
        "fullcodeline": "with gr.Row():"
    },
    {
        "line": 74,
        "fullcodeline": "with gr.Row():"
    },
    {
        "line": 80,
        "fullcodeline": "with gr.Row():"
    },
    {
        "line": 82,
        "fullcodeline": "with gr.Row():"
    },
    {
        "line": 88,
        "fullcodeline": "with gr.Row():"
    },
    {
        "line": 98,
        "fullcodeline": "with gr.Row():"
    },
    {
        "line": 111,
        "fullcodeline": "with gr.Row():"
    },
    {
        "line": 113,
        "fullcodeline": "with gr.Row():"
    },
    {
        "line": 115,
        "fullcodeline": "with gr.Row():"
    },
    {
        "line": 64,
        "fullcodeline": "txt = gr.Textbox(show_label=False, placeholder=\"Input question here.\").style(container=False)"
    },
    {
        "line": 66,
        "fullcodeline": "submitBtn = gr.Button(\"\u63d0\u4ea4\", variant=\"primary\")"
    },
    {
        "line": 68,
        "fullcodeline": "resetBtn = gr.Button(\"\u91cd\u7f6e\", variant=\"secondary\"); resetBtn.style(size=\"sm\")"
    },
    {
        "line": 69,
        "fullcodeline": "stopBtn = gr.Button(\"\u505c\u6b62\", variant=\"secondary\"); stopBtn.style(size=\"sm\")"
    },
    {
        "line": 70,
        "fullcodeline": "clearBtn = gr.Button(\"\u6e05\u9664\", variant=\"secondary\", visible=False); clearBtn.style(size=\"sm\")"
    },
    {
        "line": 72,
        "fullcodeline": "status = gr.Markdown(f\"Tip: \u6309Enter\u63d0\u4ea4, \u6309Shift+Enter\u6362\u884c\u3002\u5f53\u524d\u6a21\u578b: {LLM_MODEL} \\n {proxy_info}\")"
    },
    {
        "line": 81,
        "fullcodeline": "gr.Markdown(\"\u6ce8\u610f\uff1a\u4ee5\u4e0b\u201c\u7ea2\u989c\u8272\u201d\u6807\u8bc6\u7684\u51fd\u6570\u63d2\u4ef6\u9700\u4ece\u8f93\u5165\u533a\u8bfb\u53d6\u8def\u5f84\u4f5c\u4e3a\u53c2\u6570.\")"
    },
    {
        "line": 112,
        "fullcodeline": "txt2 = gr.Textbox(show_label=False, placeholder=\"Input question here.\", label=\"\u8f93\u5165\u533a2\").style(container=False)"
    },
    {
        "line": 114,
        "fullcodeline": "submitBtn2 = gr.Button(\"\u63d0\u4ea4\", variant=\"primary\")"
    },
    {
        "line": 116,
        "fullcodeline": "resetBtn2 = gr.Button(\"\u91cd\u7f6e\", variant=\"secondary\"); resetBtn2.style(size=\"sm\")"
    },
    {
        "line": 117,
        "fullcodeline": "stopBtn2 = gr.Button(\"\u505c\u6b62\", variant=\"secondary\"); stopBtn2.style(size=\"sm\")"
    },
    {
        "line": 118,
        "fullcodeline": "clearBtn2 = gr.Button(\"\u6e05\u9664\", variant=\"secondary\", visible=False); clearBtn2.style(size=\"sm\")"
    },
    {
        "line": 75,
        "fullcodeline": "for k in functional:"
    },
    {
        "line": 83,
        "fullcodeline": "for k in crazy_fns:"
    },
    {
        "line": 89,
        "fullcodeline": "with gr.Accordion(\"\u66f4\u591a\u51fd\u6570\u63d2\u4ef6\", open=True):"
    },
    {
        "line": 99,
        "fullcodeline": "with gr.Accordion(\"\u70b9\u51fb\u5c55\u5f00\u201c\u6587\u4ef6\u4e0a\u4f20\u533a\u201d\u3002\u4e0a\u4f20\u672c\u5730\u6587\u4ef6\u53ef\u4f9b\u7ea2\u8272\u51fd\u6570\u63d2\u4ef6\u8c03\u7528\u3002\", open=False) as area_file_up:"
    },
    {
        "line": 77,
        "fullcodeline": "variant = functional[k][\"Color\"] if \"Color\" in functional[k] else \"secondary\""
    },
    {
        "line": 78,
        "fullcodeline": "functional[k][\"Button\"] = gr.Button(k, variant=variant)"
    },
    {
        "line": 85,
        "fullcodeline": "variant = crazy_fns[k][\"Color\"] if \"Color\" in crazy_fns[k] else \"secondary\""
    },
    {
        "line": 86,
        "fullcodeline": "crazy_fns[k][\"Button\"] = gr.Button(k, variant=variant)"
    },
    {
        "line": 90,
        "fullcodeline": "dropdown_fn_list = [k for k in crazy_fns.keys() if not crazy_fns[k].get(\"AsButton\", True)]"
    },
    {
        "line": 100,
        "fullcodeline": "file_upload = gr.Files(label=\"\u4efb\u4f55\u6587\u4ef6, \u4f46\u63a8\u8350\u4e0a\u4f20\u538b\u7f29\u6587\u4ef6(zip, tar)\", file_count=\"multiple\")"
    },
    {
        "line": 76,
        "fullcodeline": "if (\"Visible\" in functional[k]) and (not functional[k][\"Visible\"]): continue"
    },
    {
        "line": 84,
        "fullcodeline": "if not crazy_fns[k].get(\"AsButton\", True): continue"
    },
    {
        "line": 87,
        "fullcodeline": "crazy_fns[k][\"Button\"].style(size=\"sm\")"
    },
    {
        "line": 91,
        "fullcodeline": "with gr.Row():"
    },
    {
        "line": 93,
        "fullcodeline": "with gr.Row():"
    },
    {
        "line": 96,
        "fullcodeline": "with gr.Row():"
    },
    {
        "line": 92,
        "fullcodeline": "dropdown = gr.Dropdown(dropdown_fn_list, value=r\"\u6253\u5f00\u63d2\u4ef6\u5217\u8868\", label=\"\").style(container=False)"
    },
    {
        "line": 94,
        "fullcodeline": "plugin_advanced_arg = gr.Textbox(show_label=True, label=\"\u9ad8\u7ea7\u53c2\u6570\u8f93\u5165\u533a\", visible=False,"
    },
    {
        "line": 97,
        "fullcodeline": "switchy_bt = gr.Button(r\"\u8bf7\u5148\u4ece\u63d2\u4ef6\u5217\u8868\u4e2d\u9009\u62e9\", variant=\"secondary\")"
    }
]