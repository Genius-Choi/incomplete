[
    {
        "line": 14,
        "fullcodeline": "bus->owner = owner;"
    },
    {
        "line": 15,
        "fullcodeline": "bus->dev.parent = bus->parent;"
    },
    {
        "line": 16,
        "fullcodeline": "bus->dev.class = &mdio_bus_class;"
    },
    {
        "line": 17,
        "fullcodeline": "bus->dev.groups = NULL;"
    },
    {
        "line": 18,
        "fullcodeline": "dev_set_name(&bus->dev, \"%s\", bus->id);"
    },
    {
        "line": 29,
        "fullcodeline": "gpiod = devm_gpiod_get_optional(&bus->dev, \"reset\", GPIOD_OUT_LOW);"
    },
    {
        "line": 58,
        "fullcodeline": "mdiobus_setup_mdiodev_from_board_info(bus, mdiobus_create_device);"
    },
    {
        "line": 60,
        "fullcodeline": "bus->state = MDIOBUS_REGISTERED;"
    },
    {
        "line": 7,
        "fullcodeline": "if (NULL == bus || NULL == bus->name ||"
    },
    {
        "line": 11,
        "fullcodeline": "BUG_ON(bus->state != MDIOBUS_ALLOCATED &&"
    },
    {
        "line": 20,
        "fullcodeline": "err = device_register(&bus->dev);"
    },
    {
        "line": 30,
        "fullcodeline": "if (IS_ERR(gpiod)) {"
    },
    {
        "line": 46,
        "fullcodeline": "for (i = 0; i < PHY_MAX_ADDR; i++) {"
    },
    {
        "line": 8,
        "fullcodeline": "NULL == bus->read || NULL == bus->write)"
    },
    {
        "line": 12,
        "fullcodeline": "bus->state != MDIOBUS_UNREGISTERED);"
    },
    {
        "line": 31,
        "fullcodeline": "dev_err(&bus->dev, \"mii_bus %s couldn't get reset GPIO\\n\","
    },
    {
        "line": 44,
        "fullcodeline": "bus->reset(bus);"
    },
    {
        "line": 65,
        "fullcodeline": "while (--i >= 0) {"
    },
    {
        "line": 66,
        "fullcodeline": "mdiodev = bus->mdio_map[i];"
    },
    {
        "line": 70,
        "fullcodeline": "mdiodev->device_remove(mdiodev);"
    },
    {
        "line": 9,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 23,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 34,
        "fullcodeline": "return PTR_ERR(gpiod);"
    },
    {
        "line": 67,
        "fullcodeline": "if (!mdiodev)"
    },
    {
        "line": 47,
        "fullcodeline": "if ((bus->phy_mask & (1 << i)) == 0) {"
    },
    {
        "line": 50,
        "fullcodeline": "phydev = mdiobus_scan(bus, i);"
    },
    {
        "line": 36,
        "fullcodeline": "bus->reset_gpiod = gpiod;"
    },
    {
        "line": 38,
        "fullcodeline": "gpiod_set_value_cansleep(gpiod, 1);"
    },
    {
        "line": 39,
        "fullcodeline": "udelay(bus->reset_delay_us);"
    },
    {
        "line": 51,
        "fullcodeline": "if (IS_ERR(phydev) && (PTR_ERR(phydev) != -ENODEV)) {"
    },
    {
        "line": 52,
        "fullcodeline": "err = PTR_ERR(phydev);"
    }
]