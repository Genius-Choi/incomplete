[
    {
        "line": 4,
        "fullcodeline": "cache_filename[MagickPathExtent],"
    },
    {
        "line": 5,
        "fullcodeline": "id[MagickPathExtent],"
    },
    {
        "line": 6,
        "fullcodeline": "keyword[MagickPathExtent],"
    },
    {
        "line": 52,
        "fullcodeline": "assert(image_info != (const ImageInfo *) NULL);"
    },
    {
        "line": 53,
        "fullcodeline": "assert(image_info->signature == MagickCoreSignature);"
    },
    {
        "line": 57,
        "fullcodeline": "assert(exception != (ExceptionInfo *) NULL);"
    },
    {
        "line": 58,
        "fullcodeline": "assert(exception->signature == MagickCoreSignature);"
    },
    {
        "line": 59,
        "fullcodeline": "image=AcquireImage(image_info,exception);"
    },
    {
        "line": 60,
        "fullcodeline": "status=OpenBlob(image_info,image,ReadBinaryBlobMode,exception);"
    },
    {
        "line": 67,
        "fullcodeline": "AppendImageFormat(\"cache\",cache_filename);"
    },
    {
        "line": 68,
        "fullcodeline": "c=ReadBlobByte(image);"
    },
    {
        "line": 74,
        "fullcodeline": "*id='\\0';"
    },
    {
        "line": 76,
        "fullcodeline": "offset=0;"
    },
    {
        "line": 54,
        "fullcodeline": "if (image_info->debug != MagickFalse)"
    },
    {
        "line": 61,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 66,
        "fullcodeline": "(void) CopyMagickString(cache_filename,image->filename,MagickPathExtent);"
    },
    {
        "line": 69,
        "fullcodeline": "if (c == EOF)"
    },
    {
        "line": 75,
        "fullcodeline": "(void) ResetMagickMemory(keyword,0,sizeof(keyword));"
    },
    {
        "line": 840,
        "fullcodeline": "} while (c != EOF);"
    },
    {
        "line": 841,
        "fullcodeline": "(void) CloseBlob(image);"
    },
    {
        "line": 842,
        "fullcodeline": "return(GetFirstImageInList(image));"
    },
    {
        "line": 55,
        "fullcodeline": "(void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\","
    },
    {
        "line": 63,
        "fullcodeline": "image=DestroyImageList(image);"
    },
    {
        "line": 82,
        "fullcodeline": "profiles=(LinkedListInfo *) NULL;"
    },
    {
        "line": 84,
        "fullcodeline": "options=AcquireString((char *) NULL);"
    },
    {
        "line": 85,
        "fullcodeline": "signature=GetMagickSignature((const StringInfo *) NULL);"
    },
    {
        "line": 86,
        "fullcodeline": "image->depth=8;"
    },
    {
        "line": 87,
        "fullcodeline": "image->compression=NoCompression;"
    },
    {
        "line": 706,
        "fullcodeline": "depth=GetImageQuantumDepth(image,MagickFalse);"
    },
    {
        "line": 813,
        "fullcodeline": "status=PersistPixelCache(image,cache_filename,MagickTrue,&offset,exception);"
    },
    {
        "line": 64,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 71,
        "fullcodeline": "image=DestroyImage(image);"
    },
    {
        "line": 72,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 636,
        "fullcodeline": "options=DestroyString(options);"
    },
    {
        "line": 637,
        "fullcodeline": "(void) ReadBlobByte(image);"
    },
    {
        "line": 648,
        "fullcodeline": "if (image->montage != (char *) NULL)"
    },
    {
        "line": 678,
        "fullcodeline": "if (profiles != (LinkedListInfo *) NULL)"
    },
    {
        "line": 707,
        "fullcodeline": "if (image->storage_class == PseudoClass)"
    },
    {
        "line": 798,
        "fullcodeline": "if (EOFBlob(image) != MagickFalse)"
    },
    {
        "line": 814,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 823,
        "fullcodeline": "if (c != EOF)"
    },
    {
        "line": 88,
        "fullcodeline": "while ((isgraph(c) != MagickFalse) && (c != (int) ':'))"
    },
    {
        "line": 641,
        "fullcodeline": "if ((LocaleCompare(id,\"MagickCache\") != 0) ||"
    },
    {
        "line": 644,
        "fullcodeline": "(image->rows == 0))"
    },
    {
        "line": 645,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 646,
        "fullcodeline": "if (signature != GetMagickSignature((const StringInfo *) NULL))"
    },
    {
        "line": 647,
        "fullcodeline": "ThrowReaderException(CacheError,\"IncompatibleAPI\");"
    },
    {
        "line": 656,
        "fullcodeline": "length=MagickPathExtent;"
    },
    {
        "line": 657,
        "fullcodeline": "image->directory=AcquireString((char *) NULL);"
    },
    {
        "line": 658,
        "fullcodeline": "p=image->directory;"
    },
    {
        "line": 692,
        "fullcodeline": "ResetLinkedListIterator(profiles);"
    },
    {
        "line": 693,
        "fullcodeline": "name=(const char *) GetNextValueInLinkedList(profiles);"
    },
    {
        "line": 712,
        "fullcodeline": "image->colormap=(PixelInfo *) AcquireQuantumMemory(image->colors+1,"
    },
    {
        "line": 800,
        "fullcodeline": "ThrowFileException(exception,CorruptImageError,\"UnexpectedEndOfFile\","
    },
    {
        "line": 804,
        "fullcodeline": "if ((image_info->ping != MagickFalse) && (image_info->number_scenes != 0))"
    },
    {
        "line": 807,
        "fullcodeline": "if ((AcquireMagickResource(WidthResource,image->columns) == MagickFalse) ||"
    },
    {
        "line": 808,
        "fullcodeline": "(AcquireMagickResource(HeightResource,image->rows) == MagickFalse))"
    },
    {
        "line": 809,
        "fullcodeline": "ThrowReaderException(ImageError,\"WidthOrHeightExceedsLimit\");"
    },
    {
        "line": 815,
        "fullcodeline": "ThrowReaderException(CacheError,\"UnableToPersistPixelCache\");"
    },
    {
        "line": 821,
        "fullcodeline": "c=ReadBlobByte(image);"
    },
    {
        "line": 822,
        "fullcodeline": "} while ((isgraph(c) == MagickFalse) && (c != EOF));"
    },
    {
        "line": 828,
        "fullcodeline": "AcquireNextImage(image_info,image,exception);"
    },
    {
        "line": 834,
        "fullcodeline": "image=SyncNextImageInList(image);"
    },
    {
        "line": 835,
        "fullcodeline": "status=SetImageProgress(image,LoadImagesTag,TellBlob(image),"
    },
    {
        "line": 93,
        "fullcodeline": "if (c == (int) '{')"
    },
    {
        "line": 634,
        "fullcodeline": "c=ReadBlobByte(image);"
    },
    {
        "line": 643,
        "fullcodeline": "(image->compression == UndefinedCompression) || (image->columns == 0) ||"
    },
    {
        "line": 694,
        "fullcodeline": "while (name != (const char *) NULL)"
    },
    {
        "line": 704,
        "fullcodeline": "profiles=DestroyLinkedList(profiles,RelinquishMagickMemory);"
    },
    {
        "line": 714,
        "fullcodeline": "if (image->colormap == (PixelInfo *) NULL)"
    },
    {
        "line": 716,
        "fullcodeline": "if (image->colors != 0)"
    },
    {
        "line": 805,
        "fullcodeline": "if (image->scene >= (image_info->scene+image_info->number_scenes-1))"
    },
    {
        "line": 837,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 101,
        "fullcodeline": "length=MagickPathExtent;"
    },
    {
        "line": 102,
        "fullcodeline": "comment=AcquireString((char *) NULL);"
    },
    {
        "line": 125,
        "fullcodeline": "*p='\\0';"
    },
    {
        "line": 128,
        "fullcodeline": "c=ReadBlobByte(image);"
    },
    {
        "line": 633,
        "fullcodeline": "while (isspace((int) ((unsigned char) c)) != 0)"
    },
    {
        "line": 661,
        "fullcodeline": "*p='\\0';"
    },
    {
        "line": 674,
        "fullcodeline": "c=ReadBlobByte(image);"
    },
    {
        "line": 696,
        "fullcodeline": "profile=GetImageProfile(image,name);"
    },
    {
        "line": 702,
        "fullcodeline": "name=(const char *) GetNextValueInLinkedList(profiles);"
    },
    {
        "line": 715,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 727,
        "fullcodeline": "packet_size=(size_t) (3UL*depth/8UL);"
    },
    {
        "line": 728,
        "fullcodeline": "colormap=(unsigned char *) AcquireQuantumMemory(image->colors,"
    },
    {
        "line": 732,
        "fullcodeline": "count=ReadBlob(image,packet_size*image->colors,colormap);"
    },
    {
        "line": 739,
        "fullcodeline": "p=colormap;"
    },
    {
        "line": 829,
        "fullcodeline": "if (GetNextImageInList(image) == (Image *) NULL)"
    },
    {
        "line": 836,
        "fullcodeline": "GetBlobSize(image));"
    },
    {
        "line": 103,
        "fullcodeline": "for (p=comment; comment != (char *) NULL; p++)"
    },
    {
        "line": 123,
        "fullcodeline": "if (comment == (char *) NULL)"
    },
    {
        "line": 126,
        "fullcodeline": "(void) SetImageProperty(image,\"comment\",comment,exception);"
    },
    {
        "line": 127,
        "fullcodeline": "comment=DestroyString(comment);"
    },
    {
        "line": 642,
        "fullcodeline": "(image->storage_class == UndefinedClass) ||"
    },
    {
        "line": 662,
        "fullcodeline": "if ((strlen(image->directory)+MagickPathExtent) >= length)"
    },
    {
        "line": 697,
        "fullcodeline": "if (profile != (StringInfo *) NULL)"
    },
    {
        "line": 730,
        "fullcodeline": "if (colormap == (unsigned char *) NULL)"
    },
    {
        "line": 831,
        "fullcodeline": "image=DestroyImageList(image);"
    },
    {
        "line": 832,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 105,
        "fullcodeline": "c=ReadBlobByte(image);"
    },
    {
        "line": 121,
        "fullcodeline": "*p=(char) c;"
    },
    {
        "line": 124,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 131,
        "fullcodeline": "if (isalnum(c) != MagickFalse)"
    },
    {
        "line": 667,
        "fullcodeline": "length<<=1;"
    },
    {
        "line": 668,
        "fullcodeline": "image->directory=(char *) ResizeQuantumMemory(image->directory,"
    },
    {
        "line": 672,
        "fullcodeline": "p=image->directory+strlen(image->directory);"
    },
    {
        "line": 699,
        "fullcodeline": "p=GetStringInfoDatum(profile);"
    },
    {
        "line": 731,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 733,
        "fullcodeline": "if (count != (ssize_t) (packet_size*image->colors))"
    },
    {
        "line": 735,
        "fullcodeline": "colormap=(unsigned char *) RelinquishMagickMemory(colormap);"
    },
    {
        "line": 736,
        "fullcodeline": "ThrowReaderException(CorruptImageError,"
    },
    {
        "line": 743,
        "fullcodeline": "colormap=(unsigned char *) RelinquishMagickMemory(colormap);"
    },
    {
        "line": 744,
        "fullcodeline": "ThrowReaderException(CorruptImageError,"
    },
    {
        "line": 795,
        "fullcodeline": "colormap=(unsigned char *) RelinquishMagickMemory(colormap);"
    },
    {
        "line": 106,
        "fullcodeline": "if (c == (int) '\\\\')"
    },
    {
        "line": 111,
        "fullcodeline": "if ((size_t) (p-comment+1) >= length)"
    },
    {
        "line": 136,
        "fullcodeline": "length=MagickPathExtent;"
    },
    {
        "line": 137,
        "fullcodeline": "p=keyword;"
    },
    {
        "line": 146,
        "fullcodeline": "*p='\\0';"
    },
    {
        "line": 147,
        "fullcodeline": "p=options;"
    },
    {
        "line": 187,
        "fullcodeline": "*p='\\0';"
    },
    {
        "line": 670,
        "fullcodeline": "if (image->directory == (char *) NULL)"
    },
    {
        "line": 700,
        "fullcodeline": "count=ReadBlob(image,GetStringInfoLength(profile),p);"
    },
    {
        "line": 729,
        "fullcodeline": "packet_size*sizeof(*colormap));"
    },
    {
        "line": 107,
        "fullcodeline": "c=ReadBlobByte(image);"
    },
    {
        "line": 114,
        "fullcodeline": "length<<=1;"
    },
    {
        "line": 115,
        "fullcodeline": "comment=(char *) ResizeQuantumMemory(comment,length+"
    },
    {
        "line": 119,
        "fullcodeline": "p=comment+strlen(comment);"
    },
    {
        "line": 145,
        "fullcodeline": "} while (c != EOF);"
    },
    {
        "line": 149,
        "fullcodeline": "c=ReadBlobByte(image);"
    },
    {
        "line": 150,
        "fullcodeline": "if (c == (int) '=')"
    },
    {
        "line": 188,
        "fullcodeline": "if (*options == '{')"
    },
    {
        "line": 632,
        "fullcodeline": "c=ReadBlobByte(image);"
    },
    {
        "line": 671,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"UnableToReadImageData\");"
    },
    {
        "line": 751,
        "fullcodeline": "for (i=0; i < (ssize_t) image->colors; i++)"
    },
    {
        "line": 767,
        "fullcodeline": "for (i=0; i < (ssize_t) image->colors; i++)"
    },
    {
        "line": 783,
        "fullcodeline": "for (i=0; i < (ssize_t) image->colors; i++)"
    },
    {
        "line": 117,
        "fullcodeline": "if (comment == (char *) NULL)"
    },
    {
        "line": 144,
        "fullcodeline": "c=ReadBlobByte(image);"
    },
    {
        "line": 148,
        "fullcodeline": "while (isspace((int) ((unsigned char) c)) != 0)"
    },
    {
        "line": 155,
        "fullcodeline": "c=ReadBlobByte(image);"
    },
    {
        "line": 753,
        "fullcodeline": "p=PushCharPixel(p,&pixel);"
    },
    {
        "line": 755,
        "fullcodeline": "p=PushCharPixel(p,&pixel);"
    },
    {
        "line": 757,
        "fullcodeline": "p=PushCharPixel(p,&pixel);"
    },
    {
        "line": 769,
        "fullcodeline": "p=PushShortPixel(MSBEndian,p,&pixel);"
    },
    {
        "line": 771,
        "fullcodeline": "p=PushShortPixel(MSBEndian,p,&pixel);"
    },
    {
        "line": 773,
        "fullcodeline": "p=PushShortPixel(MSBEndian,p,&pixel);"
    },
    {
        "line": 785,
        "fullcodeline": "p=PushLongPixel(MSBEndian,p,&pixel);"
    },
    {
        "line": 787,
        "fullcodeline": "p=PushLongPixel(MSBEndian,p,&pixel);"
    },
    {
        "line": 789,
        "fullcodeline": "p=PushLongPixel(MSBEndian,p,&pixel);"
    },
    {
        "line": 140,
        "fullcodeline": "if (c == (int) '=')"
    },
    {
        "line": 156,
        "fullcodeline": "while ((c != (int) '}') && (c != EOF))"
    },
    {
        "line": 183,
        "fullcodeline": "if (options == (char *) NULL)"
    },
    {
        "line": 189,
        "fullcodeline": "(void) CopyMagickString(options,options+1,strlen(options));"
    },
    {
        "line": 754,
        "fullcodeline": "image->colormap[i].red=ScaleCharToQuantum(pixel);"
    },
    {
        "line": 756,
        "fullcodeline": "image->colormap[i].green=ScaleCharToQuantum(pixel);"
    },
    {
        "line": 758,
        "fullcodeline": "image->colormap[i].blue=ScaleCharToQuantum(pixel);"
    },
    {
        "line": 770,
        "fullcodeline": "image->colormap[i].red=ScaleShortToQuantum(pixel);"
    },
    {
        "line": 772,
        "fullcodeline": "image->colormap[i].green=ScaleShortToQuantum(pixel);"
    },
    {
        "line": 774,
        "fullcodeline": "image->colormap[i].blue=ScaleShortToQuantum(pixel);"
    },
    {
        "line": 786,
        "fullcodeline": "image->colormap[i].red=ScaleLongToQuantum(pixel);"
    },
    {
        "line": 788,
        "fullcodeline": "image->colormap[i].green=ScaleLongToQuantum(pixel);"
    },
    {
        "line": 790,
        "fullcodeline": "image->colormap[i].blue=ScaleLongToQuantum(pixel);"
    },
    {
        "line": 109,
        "fullcodeline": "if ((c == EOF) || (c == (int) '}'))"
    },
    {
        "line": 142,
        "fullcodeline": "if ((size_t) (p-keyword) < (MagickPathExtent-1))"
    },
    {
        "line": 169,
        "fullcodeline": "c=ReadBlobByte(image);"
    },
    {
        "line": 184,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,"
    },
    {
        "line": 210,
        "fullcodeline": "(void) SetImageProperty(image,keyword,options,exception);"
    },
    {
        "line": 238,
        "fullcodeline": "(void) SetImageProperty(image,keyword,options,exception);"
    },
    {
        "line": 290,
        "fullcodeline": "(void) SetImageProperty(image,keyword,options,exception);"
    },
    {
        "line": 318,
        "fullcodeline": "(void) SetImageProperty(image,keyword,options,exception);"
    },
    {
        "line": 342,
        "fullcodeline": "(void) SetImageProperty(image,keyword,options,exception);"
    },
    {
        "line": 363,
        "fullcodeline": "(void) SetImageProperty(image,keyword,options,exception);"
    },
    {
        "line": 379,
        "fullcodeline": "(void) SetImageProperty(image,keyword,options,exception);"
    },
    {
        "line": 413,
        "fullcodeline": "(void) SetImageProperty(image,keyword,options,exception);"
    },
    {
        "line": 449,
        "fullcodeline": "(void) SetImageProperty(image,keyword,options,exception);"
    },
    {
        "line": 493,
        "fullcodeline": "(void) SetImageProperty(image,keyword,options,exception);"
    },
    {
        "line": 504,
        "fullcodeline": "(void) SetImageProperty(image,keyword,options,exception);"
    },
    {
        "line": 544,
        "fullcodeline": "(void) SetImageProperty(image,keyword,options,exception);"
    },
    {
        "line": 555,
        "fullcodeline": "(void) SetImageProperty(image,keyword,options,exception);"
    },
    {
        "line": 587,
        "fullcodeline": "(void) SetImageProperty(image,keyword,options,exception);"
    },
    {
        "line": 605,
        "fullcodeline": "(void) SetImageProperty(image,keyword,options,exception);"
    },
    {
        "line": 621,
        "fullcodeline": "(void) SetImageProperty(image,keyword,options,exception);"
    },
    {
        "line": 626,
        "fullcodeline": "(void) SetImageProperty(image,keyword,options,exception);"
    },
    {
        "line": 158,
        "fullcodeline": "if ((size_t) (p-options+1) >= length)"
    },
    {
        "line": 170,
        "fullcodeline": "if (c == '\\\\')"
    },
    {
        "line": 179,
        "fullcodeline": "if (*options != '{')"
    },
    {
        "line": 198,
        "fullcodeline": "if (LocaleCompare(keyword,\"alpha-trait\") == 0)"
    },
    {
        "line": 203,
        "fullcodeline": "alpha_trait=ParseCommandOption(MagickPixelTraitOptions,"
    },
    {
        "line": 207,
        "fullcodeline": "image->alpha_trait=(PixelTrait) alpha_trait;"
    },
    {
        "line": 216,
        "fullcodeline": "if (LocaleCompare(keyword,\"background-color\") == 0)"
    },
    {
        "line": 222,
        "fullcodeline": "if (LocaleCompare(keyword,\"blue-primary\") == 0)"
    },
    {
        "line": 224,
        "fullcodeline": "flags=ParseGeometry(options,&geometry_info);"
    },
    {
        "line": 225,
        "fullcodeline": "image->chromaticity.blue_primary.x=geometry_info.rho;"
    },
    {
        "line": 232,
        "fullcodeline": "if (LocaleCompare(keyword,\"border-color\") == 0)"
    },
    {
        "line": 244,
        "fullcodeline": "if (LocaleCompare(keyword,\"class\") == 0)"
    },
    {
        "line": 249,
        "fullcodeline": "storage_class=ParseCommandOption(MagickClassOptions,"
    },
    {
        "line": 253,
        "fullcodeline": "image->storage_class=(ClassType) storage_class;"
    },
    {
        "line": 256,
        "fullcodeline": "if (LocaleCompare(keyword,\"colors\") == 0)"
    },
    {
        "line": 258,
        "fullcodeline": "image->colors=StringToUnsignedLong(options);"
    },
    {
        "line": 261,
        "fullcodeline": "if (LocaleCompare(keyword,\"colorspace\") == 0)"
    },
    {
        "line": 266,
        "fullcodeline": "colorspace=ParseCommandOption(MagickColorspaceOptions,"
    },
    {
        "line": 270,
        "fullcodeline": "image->colorspace=(ColorspaceType) colorspace;"
    },
    {
        "line": 273,
        "fullcodeline": "if (LocaleCompare(keyword,\"compression\") == 0)"
    },
    {
        "line": 278,
        "fullcodeline": "compression=ParseCommandOption(MagickCompressOptions,"
    },
    {
        "line": 282,
        "fullcodeline": "image->compression=(CompressionType) compression;"
    },
    {
        "line": 285,
        "fullcodeline": "if (LocaleCompare(keyword,\"columns\") == 0)"
    },
    {
        "line": 287,
        "fullcodeline": "image->columns=StringToUnsignedLong(options);"
    },
    {
        "line": 296,
        "fullcodeline": "if (LocaleCompare(keyword,\"delay\") == 0)"
    },
    {
        "line": 298,
        "fullcodeline": "image->delay=StringToUnsignedLong(options);"
    },
    {
        "line": 301,
        "fullcodeline": "if (LocaleCompare(keyword,\"depth\") == 0)"
    },
    {
        "line": 303,
        "fullcodeline": "image->depth=StringToUnsignedLong(options);"
    },
    {
        "line": 306,
        "fullcodeline": "if (LocaleCompare(keyword,\"dispose\") == 0)"
    },
    {
        "line": 311,
        "fullcodeline": "dispose=ParseCommandOption(MagickDisposeOptions,MagickFalse,"
    },
    {
        "line": 315,
        "fullcodeline": "image->dispose=(DisposeType) dispose;"
    },
    {
        "line": 324,
        "fullcodeline": "if (LocaleCompare(keyword,\"endian\") == 0)"
    },
    {
        "line": 329,
        "fullcodeline": "endian=ParseCommandOption(MagickEndianOptions,MagickFalse,"
    },
    {
        "line": 333,
        "fullcodeline": "image->endian=(EndianType) endian;"
    },
    {
        "line": 336,
        "fullcodeline": "if (LocaleCompare(keyword,\"error\") == 0)"
    },
    {
        "line": 348,
        "fullcodeline": "if (LocaleCompare(keyword,\"gamma\") == 0)"
    },
    {
        "line": 350,
        "fullcodeline": "image->gamma=StringToDouble(options,(char **) NULL);"
    },
    {
        "line": 353,
        "fullcodeline": "if (LocaleCompare(keyword,\"green-primary\") == 0)"
    },
    {
        "line": 355,
        "fullcodeline": "flags=ParseGeometry(options,&geometry_info);"
    },
    {
        "line": 356,
        "fullcodeline": "image->chromaticity.green_primary.x=geometry_info.rho;"
    },
    {
        "line": 369,
        "fullcodeline": "if (LocaleCompare(keyword,\"id\") == 0)"
    },
    {
        "line": 374,
        "fullcodeline": "if (LocaleCompare(keyword,\"iterations\") == 0)"
    },
    {
        "line": 376,
        "fullcodeline": "image->iterations=StringToUnsignedLong(options);"
    },
    {
        "line": 385,
        "fullcodeline": "if (LocaleCompare(keyword,\"magick-signature\") == 0)"
    },
    {
        "line": 387,
        "fullcodeline": "signature=(unsigned int) StringToUnsignedLong(options);"
    },
    {
        "line": 390,
        "fullcodeline": "if (LocaleCompare(keyword,\"mattecolor\") == 0)"
    },
    {
        "line": 396,
        "fullcodeline": "if (LocaleCompare(keyword,\"maximum-error\") == 0)"
    },
    {
        "line": 402,
        "fullcodeline": "if (LocaleCompare(keyword,\"mean-error\") == 0)"
    },
    {
        "line": 408,
        "fullcodeline": "if (LocaleCompare(keyword,\"montage\") == 0)"
    },
    {
        "line": 419,
        "fullcodeline": "if (LocaleCompare(keyword,\"number-channels\") == 0)"
    },
    {
        "line": 421,
        "fullcodeline": "image->number_channels=StringToUnsignedLong(options);"
    },
    {
        "line": 424,
        "fullcodeline": "if (LocaleCompare(keyword,\"number-meta-channels\") == 0)"
    },
    {
        "line": 426,
        "fullcodeline": "image->number_meta_channels=StringToUnsignedLong(options);"
    },
    {
        "line": 437,
        "fullcodeline": "if (LocaleCompare(keyword,\"orientation\") == 0)"
    },
    {
        "line": 442,
        "fullcodeline": "orientation=ParseCommandOption(MagickOrientationOptions,"
    },
    {
        "line": 446,
        "fullcodeline": "image->orientation=(OrientationType) orientation;"
    },
    {
        "line": 455,
        "fullcodeline": "if (LocaleCompare(keyword,\"page\") == 0)"
    },
    {
        "line": 460,
        "fullcodeline": "geometry=GetPageGeometry(options);"
    },
    {
        "line": 465,
        "fullcodeline": "if (LocaleCompare(keyword,\"pixel-intensity\") == 0)"
    },
    {
        "line": 470,
        "fullcodeline": "intensity=ParseCommandOption(MagickPixelIntensityOptions,"
    },
    {
        "line": 474,
        "fullcodeline": "image->intensity=(PixelIntensityMethod) intensity;"
    },
    {
        "line": 477,
        "fullcodeline": "if ((LocaleNCompare(keyword,\"profile:\",8) == 0) ||"
    },
    {
        "line": 478,
        "fullcodeline": "(LocaleNCompare(keyword,\"profile-\",8) == 0))"
    },
    {
        "line": 484,
        "fullcodeline": "profile=BlobToStringInfo((const void *) NULL,(size_t)"
    },
    {
        "line": 499,
        "fullcodeline": "if (LocaleCompare(keyword,\"quality\") == 0)"
    },
    {
        "line": 501,
        "fullcodeline": "image->quality=StringToUnsignedLong(options);"
    },
    {
        "line": 510,
        "fullcodeline": "if (LocaleCompare(keyword,\"red-primary\") == 0)"
    },
    {
        "line": 512,
        "fullcodeline": "flags=ParseGeometry(options,&geometry_info);"
    },
    {
        "line": 518,
        "fullcodeline": "if (LocaleCompare(keyword,\"rendering-intent\") == 0)"
    },
    {
        "line": 523,
        "fullcodeline": "rendering_intent=ParseCommandOption(MagickIntentOptions,"
    },
    {
        "line": 527,
        "fullcodeline": "image->rendering_intent=(RenderingIntent) rendering_intent;"
    },
    {
        "line": 530,
        "fullcodeline": "if (LocaleCompare(keyword,\"resolution\") == 0)"
    },
    {
        "line": 532,
        "fullcodeline": "flags=ParseGeometry(options,&geometry_info);"
    },
    {
        "line": 533,
        "fullcodeline": "image->resolution.x=geometry_info.rho;"
    },
    {
        "line": 539,
        "fullcodeline": "if (LocaleCompare(keyword,\"rows\") == 0)"
    },
    {
        "line": 541,
        "fullcodeline": "image->rows=StringToUnsignedLong(options);"
    },
    {
        "line": 550,
        "fullcodeline": "if (LocaleCompare(keyword,\"scene\") == 0)"
    },
    {
        "line": 552,
        "fullcodeline": "image->scene=StringToUnsignedLong(options);"
    },
    {
        "line": 561,
        "fullcodeline": "if (LocaleCompare(keyword,\"ticks-per-second\") == 0)"
    },
    {
        "line": 563,
        "fullcodeline": "image->ticks_per_second=(ssize_t) StringToLong(options);"
    },
    {
        "line": 566,
        "fullcodeline": "if (LocaleCompare(keyword,\"tile-offset\") == 0)"
    },
    {
        "line": 571,
        "fullcodeline": "geometry=GetPageGeometry(options);"
    },
    {
        "line": 575,
        "fullcodeline": "if (LocaleCompare(keyword,\"type\") == 0)"
    },
    {
        "line": 580,
        "fullcodeline": "type=ParseCommandOption(MagickTypeOptions,MagickFalse,"
    },
    {
        "line": 584,
        "fullcodeline": "image->type=(ImageType) type;"
    },
    {
        "line": 593,
        "fullcodeline": "if (LocaleCompare(keyword,\"units\") == 0)"
    },
    {
        "line": 598,
        "fullcodeline": "units=ParseCommandOption(MagickResolutionOptions,"
    },
    {
        "line": 602,
        "fullcodeline": "image->units=(ResolutionType) units;"
    },
    {
        "line": 611,
        "fullcodeline": "if (LocaleCompare(keyword,\"white-point\") == 0)"
    },
    {
        "line": 613,
        "fullcodeline": "flags=ParseGeometry(options,&geometry_info);"
    },
    {
        "line": 614,
        "fullcodeline": "image->chromaticity.white_point.x=geometry_info.rho;"
    },
    {
        "line": 143,
        "fullcodeline": "*p++=(char) c;"
    },
    {
        "line": 160,
        "fullcodeline": "*p='\\0';"
    },
    {
        "line": 161,
        "fullcodeline": "length<<=1;"
    },
    {
        "line": 162,
        "fullcodeline": "options=(char *) ResizeQuantumMemory(options,length+"
    },
    {
        "line": 166,
        "fullcodeline": "p=options+strlen(options);"
    },
    {
        "line": 168,
        "fullcodeline": "*p++=(char) c;"
    },
    {
        "line": 172,
        "fullcodeline": "c=ReadBlobByte(image);"
    },
    {
        "line": 205,
        "fullcodeline": "if (alpha_trait < 0)"
    },
    {
        "line": 218,
        "fullcodeline": "(void) QueryColorCompliance(options,AllCompliance,"
    },
    {
        "line": 234,
        "fullcodeline": "(void) QueryColorCompliance(options,AllCompliance,"
    },
    {
        "line": 251,
        "fullcodeline": "if (storage_class < 0)"
    },
    {
        "line": 268,
        "fullcodeline": "if (colorspace < 0)"
    },
    {
        "line": 280,
        "fullcodeline": "if (compression < 0)"
    },
    {
        "line": 313,
        "fullcodeline": "if (dispose < 0)"
    },
    {
        "line": 331,
        "fullcodeline": "if (endian < 0)"
    },
    {
        "line": 338,
        "fullcodeline": "image->error.mean_error_per_pixel=StringToDouble(options,"
    },
    {
        "line": 371,
        "fullcodeline": "(void) CopyMagickString(id,options,MagickPathExtent);"
    },
    {
        "line": 392,
        "fullcodeline": "(void) QueryColorCompliance(options,AllCompliance,"
    },
    {
        "line": 398,
        "fullcodeline": "image->error.normalized_maximum_error=StringToDouble("
    },
    {
        "line": 404,
        "fullcodeline": "image->error.normalized_mean_error=StringToDouble(options,"
    },
    {
        "line": 410,
        "fullcodeline": "(void) CloneString(&image->montage,options);"
    },
    {
        "line": 427,
        "fullcodeline": "if (image->number_meta_channels > MaxPixelChannels)"
    },
    {
        "line": 444,
        "fullcodeline": "if (orientation < 0)"
    },
    {
        "line": 461,
        "fullcodeline": "(void) ParseAbsoluteGeometry(geometry,&image->page);"
    },
    {
        "line": 462,
        "fullcodeline": "geometry=DestroyString(geometry);"
    },
    {
        "line": 472,
        "fullcodeline": "if (intensity < 0)"
    },
    {
        "line": 480,
        "fullcodeline": "if (profiles == (LinkedListInfo *) NULL)"
    },
    {
        "line": 482,
        "fullcodeline": "(void) AppendValueToLinkedList(profiles,"
    },
    {
        "line": 486,
        "fullcodeline": "if (profile == (StringInfo *) NULL)"
    },
    {
        "line": 489,
        "fullcodeline": "(void) SetImageProfile(image,keyword+8,profile,exception);"
    },
    {
        "line": 490,
        "fullcodeline": "profile=DestroyStringInfo(profile);"
    },
    {
        "line": 525,
        "fullcodeline": "if (rendering_intent < 0)"
    },
    {
        "line": 572,
        "fullcodeline": "(void) ParseAbsoluteGeometry(geometry,&image->tile_offset);"
    },
    {
        "line": 573,
        "fullcodeline": "geometry=DestroyString(geometry);"
    },
    {
        "line": 582,
        "fullcodeline": "if (type < 0)"
    },
    {
        "line": 600,
        "fullcodeline": "if (units < 0)"
    },
    {
        "line": 164,
        "fullcodeline": "if (options == (char *) NULL)"
    },
    {
        "line": 173,
        "fullcodeline": "if (c == (int) '}')"
    },
    {
        "line": 227,
        "fullcodeline": "if ((flags & SigmaValue) == 0)"
    },
    {
        "line": 358,
        "fullcodeline": "if ((flags & SigmaValue) == 0)"
    },
    {
        "line": 428,
        "fullcodeline": "ThrowReaderException(CorruptImageError,"
    },
    {
        "line": 481,
        "fullcodeline": "profiles=NewLinkedList(0);"
    },
    {
        "line": 483,
        "fullcodeline": "AcquireString(keyword+8));"
    },
    {
        "line": 487,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,"
    },
    {
        "line": 514,
        "fullcodeline": "if ((flags & SigmaValue) != 0)"
    },
    {
        "line": 535,
        "fullcodeline": "if ((flags & SigmaValue) == 0)"
    },
    {
        "line": 616,
        "fullcodeline": "if ((flags & SigmaValue) == 0)"
    },
    {
        "line": 176,
        "fullcodeline": "c=ReadBlobByte(image);"
    },
    {
        "line": 180,
        "fullcodeline": "if (isspace((int) ((unsigned char) c)) != 0)"
    },
    {
        "line": 485,
        "fullcodeline": "StringToLong(options));"
    },
    {
        "line": 175,
        "fullcodeline": "*p++=(char) c;"
    }
]