[
    {
        "line": 5,
        "fullcodeline": "const char  *spacestr = \" \";"
    },
    {
        "line": 6,
        "fullcodeline": "char         buf[L_BUF_SIZE];"
    },
    {
        "line": 12,
        "fullcodeline": "static char  mainName[] = \"xtractprotos\";"
    },
    {
        "line": 27,
        "fullcodeline": "prestring = outprotos = NULL;"
    },
    {
        "line": 28,
        "fullcodeline": "in_line = FALSE;"
    },
    {
        "line": 29,
        "fullcodeline": "nflags = 0;"
    },
    {
        "line": 30,
        "fullcodeline": "maxindex = L_MIN(3, argc);"
    },
    {
        "line": 70,
        "fullcodeline": "ba = l_byteaCreate(500);"
    },
    {
        "line": 73,
        "fullcodeline": "sa = sarrayCreate(0);"
    },
    {
        "line": 74,
        "fullcodeline": "sarrayAddString(sa, (char *)\"/*\", L_COPY);"
    },
    {
        "line": 75,
        "fullcodeline": "snprintf(buf, L_BUF_SIZE,"
    },
    {
        "line": 78,
        "fullcodeline": "sarrayAddString(sa, buf, L_COPY);"
    },
    {
        "line": 79,
        "fullcodeline": "sarrayAddString(sa, (char *)\" */\", L_COPY);"
    },
    {
        "line": 80,
        "fullcodeline": "sarrayAddString(sa, (char *)\"#ifdef __cplusplus\", L_COPY);"
    },
    {
        "line": 81,
        "fullcodeline": "sarrayAddString(sa, (char *)\"extern \\\"C\\\" {\", L_COPY);"
    },
    {
        "line": 82,
        "fullcodeline": "sarrayAddString(sa, (char *)\"#endif  /* __cplusplus */\\n\", L_COPY);"
    },
    {
        "line": 83,
        "fullcodeline": "str = sarrayToString(sa, 1);"
    },
    {
        "line": 84,
        "fullcodeline": "l_byteaAppendString(ba, str);"
    },
    {
        "line": 85,
        "fullcodeline": "lept_free(str);"
    },
    {
        "line": 86,
        "fullcodeline": "sarrayDestroy(&sa);"
    },
    {
        "line": 89,
        "fullcodeline": "firstfile = 1 + nflags;"
    },
    {
        "line": 90,
        "fullcodeline": "protos_added = FALSE;"
    },
    {
        "line": 118,
        "fullcodeline": "lept_rmfile(tempfile);"
    },
    {
        "line": 119,
        "fullcodeline": "lept_free(tempfile);"
    },
    {
        "line": 122,
        "fullcodeline": "sa = sarrayCreate(0);"
    },
    {
        "line": 123,
        "fullcodeline": "sarrayAddString(sa, (char *)\"\\n#ifdef __cplusplus\", L_COPY);"
    },
    {
        "line": 124,
        "fullcodeline": "sarrayAddString(sa, (char *)\"}\", L_COPY);"
    },
    {
        "line": 125,
        "fullcodeline": "sarrayAddString(sa, (char *)\"#endif  /* __cplusplus */\", L_COPY);"
    },
    {
        "line": 126,
        "fullcodeline": "str = sarrayToString(sa, 1);"
    },
    {
        "line": 127,
        "fullcodeline": "l_byteaAppendString(ba, str);"
    },
    {
        "line": 128,
        "fullcodeline": "lept_free(str);"
    },
    {
        "line": 129,
        "fullcodeline": "sarrayDestroy(&sa);"
    },
    {
        "line": 131,
        "fullcodeline": "protostr = (char *)l_byteaCopyData(ba, &nbytes);"
    },
    {
        "line": 132,
        "fullcodeline": "l_byteaDestroy(&ba);"
    },
    {
        "line": 152,
        "fullcodeline": "ba = l_byteaInitFromFile(\"allheaders_top.txt\");"
    },
    {
        "line": 160,
        "fullcodeline": "ba2 = l_byteaInitFromFile(\"allheaders_bot.txt\");"
    },
    {
        "line": 161,
        "fullcodeline": "l_byteaJoin(ba, &ba2);"
    },
    {
        "line": 162,
        "fullcodeline": "l_byteaWrite(\"allheaders.h\", ba, 0, 0);"
    },
    {
        "line": 163,
        "fullcodeline": "l_byteaDestroy(&ba);"
    },
    {
        "line": 164,
        "fullcodeline": "lept_free(protostr);"
    },
    {
        "line": 14,
        "fullcodeline": "if (argc == 1) {"
    },
    {
        "line": 31,
        "fullcodeline": "for (i = 1; i < maxindex; i++) {"
    },
    {
        "line": 61,
        "fullcodeline": "if (argc - nflags < 2) {"
    },
    {
        "line": 91,
        "fullcodeline": "if ((tempfile = l_makeTempFilename()) == NULL) {"
    },
    {
        "line": 95,
        "fullcodeline": "for (i = firstfile; i < argc; i++) {"
    },
    {
        "line": 138,
        "fullcodeline": "if (!outprotos) {  /* just write to stdout */"
    },
    {
        "line": 145,
        "fullcodeline": "if (!protos_added) {"
    },
    {
        "line": 153,
        "fullcodeline": "if (!in_line) {"
    },
    {
        "line": 15,
        "fullcodeline": "fprintf(stderr,"
    },
    {
        "line": 62,
        "fullcodeline": "fprintf(stderr, \"no files specified!\\n\");"
    },
    {
        "line": 92,
        "fullcodeline": "fprintf(stderr, \"failure to make a writeable temp file\\n\");"
    },
    {
        "line": 96,
        "fullcodeline": "filein = argv[i];"
    },
    {
        "line": 97,
        "fullcodeline": "len = strlen(filein);"
    },
    {
        "line": 100,
        "fullcodeline": "snprintf(buf, L_BUF_SIZE, \"cpp -ansi -DNO_PROTOS %s %s\","
    },
    {
        "line": 102,
        "fullcodeline": "ret = system(buf);  /* cpp */"
    },
    {
        "line": 116,
        "fullcodeline": "lept_free(str);"
    },
    {
        "line": 139,
        "fullcodeline": "fprintf(stderr, \"%s\\n\", protostr);"
    },
    {
        "line": 140,
        "fullcodeline": "lept_free(protostr);"
    },
    {
        "line": 146,
        "fullcodeline": "fprintf(stderr, \"No protos found\\n\");"
    },
    {
        "line": 147,
        "fullcodeline": "lept_free(protostr);"
    },
    {
        "line": 154,
        "fullcodeline": "snprintf(buf, sizeof(buf), \"#include \\\"%s\\\"\\n\", outprotos);"
    },
    {
        "line": 155,
        "fullcodeline": "l_byteaAppendString(ba, buf);"
    },
    {
        "line": 156,
        "fullcodeline": "l_binaryWrite(outprotos, \"w\", protostr, nbytes);"
    },
    {
        "line": 32,
        "fullcodeline": "if (argv[i][0] == '-') {"
    },
    {
        "line": 98,
        "fullcodeline": "if (filein[len - 1] == 'h')  /* skip .h files */"
    },
    {
        "line": 108,
        "fullcodeline": "if ((str = parseForProtos(tempfile, prestring)) == NULL) {"
    },
    {
        "line": 112,
        "fullcodeline": "if (strlen(str) > 1) {  /* strlen(str) == 1 is a file without protos */"
    },
    {
        "line": 158,
        "fullcodeline": "l_byteaAppendString(ba, protostr);"
    },
    {
        "line": 104,
        "fullcodeline": "fprintf(stderr, \"cpp failure for %s; continuing\\n\", filein);"
    },
    {
        "line": 109,
        "fullcodeline": "fprintf(stderr, \"parse failure for %s; continuing\\n\", filein);"
    },
    {
        "line": 113,
        "fullcodeline": "l_byteaAppendString(ba, str);"
    },
    {
        "line": 114,
        "fullcodeline": "protos_added = TRUE;"
    },
    {
        "line": 33,
        "fullcodeline": "if (!strncmp(argv[i], \"-prestring\", 10)) {"
    },
    {
        "line": 34,
        "fullcodeline": "nflags++;"
    },
    {
        "line": 35,
        "fullcodeline": "ret = sscanf(argv[i] + 1, \"prestring=%s\", buf);"
    },
    {
        "line": 36,
        "fullcodeline": "if (ret != 1) {"
    },
    {
        "line": 40,
        "fullcodeline": "if ((len = strlen(buf)) > L_BUF_SIZE - 3) {"
    },
    {
        "line": 37,
        "fullcodeline": "fprintf(stderr, \"parse failure for prestring\\n\");"
    },
    {
        "line": 41,
        "fullcodeline": "L_WARNING(\"prestring too large; omitting!\\n\", mainName);"
    },
    {
        "line": 47,
        "fullcodeline": "} else if (!strncmp(argv[i], \"-protos\", 7)) {"
    },
    {
        "line": 43,
        "fullcodeline": "buf[len] = ' ';"
    },
    {
        "line": 44,
        "fullcodeline": "buf[len + 1] = '\\0';"
    },
    {
        "line": 45,
        "fullcodeline": "prestring = stringNew(buf);"
    },
    {
        "line": 48,
        "fullcodeline": "nflags++;"
    },
    {
        "line": 49,
        "fullcodeline": "ret = sscanf(argv[i] + 1, \"protos=%s\", buf);"
    },
    {
        "line": 54,
        "fullcodeline": "outprotos = stringNew(buf);"
    },
    {
        "line": 50,
        "fullcodeline": "if (ret != 1) {"
    },
    {
        "line": 55,
        "fullcodeline": "if (!strncmp(outprotos, \"inline\", 7))"
    },
    {
        "line": 51,
        "fullcodeline": "fprintf(stderr, \"parse failure for protos\\n\");"
    },
    {
        "line": 56,
        "fullcodeline": "in_line = TRUE;"
    }
]