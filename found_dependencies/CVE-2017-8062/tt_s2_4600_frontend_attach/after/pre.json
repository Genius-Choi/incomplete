[
    {
        "line": 3,
        "fullcodeline": "struct dvb_usb_device *d = adap->dev;"
    },
    {
        "line": 4,
        "fullcodeline": "struct dw2102_state *state = d->priv;"
    },
    {
        "line": 8,
        "fullcodeline": "struct m88ds3103_platform_data m88ds3103_pdata = {};"
    },
    {
        "line": 9,
        "fullcodeline": "struct ts2020_config ts2020_config = {};"
    },
    {
        "line": 11,
        "fullcodeline": "mutex_lock(&d->data_mutex);"
    },
    {
        "line": 13,
        "fullcodeline": "state->data[0] = 0xe;"
    },
    {
        "line": 14,
        "fullcodeline": "state->data[1] = 0x80;"
    },
    {
        "line": 15,
        "fullcodeline": "state->data[2] = 0x0;"
    },
    {
        "line": 20,
        "fullcodeline": "state->data[0] = 0xe;"
    },
    {
        "line": 21,
        "fullcodeline": "state->data[1] = 0x02;"
    },
    {
        "line": 22,
        "fullcodeline": "state->data[2] = 1;"
    },
    {
        "line": 26,
        "fullcodeline": "msleep(300);"
    },
    {
        "line": 28,
        "fullcodeline": "state->data[0] = 0xe;"
    },
    {
        "line": 29,
        "fullcodeline": "state->data[1] = 0x83;"
    },
    {
        "line": 30,
        "fullcodeline": "state->data[2] = 0;"
    },
    {
        "line": 35,
        "fullcodeline": "state->data[0] = 0xe;"
    },
    {
        "line": 36,
        "fullcodeline": "state->data[1] = 0x83;"
    },
    {
        "line": 37,
        "fullcodeline": "state->data[2] = 1;"
    },
    {
        "line": 42,
        "fullcodeline": "state->data[0] = 0x51;"
    },
    {
        "line": 47,
        "fullcodeline": "mutex_unlock(&d->data_mutex);"
    },
    {
        "line": 50,
        "fullcodeline": "m88ds3103_pdata.clk = 27000000;"
    },
    {
        "line": 51,
        "fullcodeline": "m88ds3103_pdata.i2c_wr_max = 33;"
    },
    {
        "line": 52,
        "fullcodeline": "m88ds3103_pdata.ts_mode = M88DS3103_TS_CI;"
    },
    {
        "line": 53,
        "fullcodeline": "m88ds3103_pdata.ts_clk = 16000;"
    },
    {
        "line": 54,
        "fullcodeline": "m88ds3103_pdata.ts_clk_pol = 0;"
    },
    {
        "line": 55,
        "fullcodeline": "m88ds3103_pdata.spec_inv = 0;"
    },
    {
        "line": 56,
        "fullcodeline": "m88ds3103_pdata.agc = 0x99;"
    },
    {
        "line": 57,
        "fullcodeline": "m88ds3103_pdata.agc_inv = 0;"
    },
    {
        "line": 58,
        "fullcodeline": "m88ds3103_pdata.clk_out = M88DS3103_CLOCK_OUT_ENABLED;"
    },
    {
        "line": 59,
        "fullcodeline": "m88ds3103_pdata.envelope_mode = 0;"
    },
    {
        "line": 60,
        "fullcodeline": "m88ds3103_pdata.lnb_hv_pol = 1;"
    },
    {
        "line": 61,
        "fullcodeline": "m88ds3103_pdata.lnb_en_pol = 0;"
    },
    {
        "line": 62,
        "fullcodeline": "memset(&board_info, 0, sizeof(board_info));"
    },
    {
        "line": 63,
        "fullcodeline": "strlcpy(board_info.type, \"m88ds3103\", I2C_NAME_SIZE);"
    },
    {
        "line": 64,
        "fullcodeline": "board_info.addr = 0x68;"
    },
    {
        "line": 65,
        "fullcodeline": "board_info.platform_data = &m88ds3103_pdata;"
    },
    {
        "line": 66,
        "fullcodeline": "request_module(\"m88ds3103\");"
    },
    {
        "line": 67,
        "fullcodeline": "client = i2c_new_device(&d->i2c_adap, &board_info);"
    },
    {
        "line": 74,
        "fullcodeline": "adap->fe_adap[0].fe = m88ds3103_pdata.get_dvb_frontend(client);"
    },
    {
        "line": 75,
        "fullcodeline": "i2c_adapter = m88ds3103_pdata.get_i2c_adapter(client);"
    },
    {
        "line": 80,
        "fullcodeline": "ts2020_config.fe = adap->fe_adap[0].fe;"
    },
    {
        "line": 81,
        "fullcodeline": "memset(&board_info, 0, sizeof(board_info));"
    },
    {
        "line": 82,
        "fullcodeline": "strlcpy(board_info.type, \"ts2022\", I2C_NAME_SIZE);"
    },
    {
        "line": 83,
        "fullcodeline": "board_info.addr = 0x60;"
    },
    {
        "line": 84,
        "fullcodeline": "board_info.platform_data = &ts2020_config;"
    },
    {
        "line": 86,
        "fullcodeline": "client = i2c_new_device(i2c_adapter, &board_info);"
    },
    {
        "line": 107,
        "fullcodeline": "adap->fe_adap[0].fe->ops.read_status = tt_s2_4600_read_status;"
    },
    {
        "line": 39,
        "fullcodeline": "if (dvb_usb_generic_rw(d, state->data, 3, state->data, 1, 0) < 0)"
    },
    {
        "line": 44,
        "fullcodeline": "if (dvb_usb_generic_rw(d, state->data, 1, state->data, 1, 0) < 0)"
    },
    {
        "line": 68,
        "fullcodeline": "if (client == NULL || client->dev.driver == NULL)"
    },
    {
        "line": 17,
        "fullcodeline": "if (dvb_usb_generic_rw(d, state->data, 3, state->data, 1, 0) < 0)"
    },
    {
        "line": 18,
        "fullcodeline": "err(\"command 0x0e transfer failed.\");"
    },
    {
        "line": 24,
        "fullcodeline": "if (dvb_usb_generic_rw(d, state->data, 3, state->data, 1, 0) < 0)"
    },
    {
        "line": 25,
        "fullcodeline": "err(\"command 0x0e transfer failed.\");"
    },
    {
        "line": 32,
        "fullcodeline": "if (dvb_usb_generic_rw(d, state->data, 3, state->data, 1, 0) < 0)"
    },
    {
        "line": 33,
        "fullcodeline": "err(\"command 0x0e transfer failed.\");"
    },
    {
        "line": 40,
        "fullcodeline": "err(\"command 0x0e transfer failed.\");"
    },
    {
        "line": 45,
        "fullcodeline": "err(\"command 0x51 transfer failed.\");"
    },
    {
        "line": 70,
        "fullcodeline": "if (!try_module_get(client->dev.driver->owner)) {"
    },
    {
        "line": 88,
        "fullcodeline": "if (client == NULL || client->dev.driver == NULL) {"
    },
    {
        "line": 93,
        "fullcodeline": "if (!try_module_get(client->dev.driver->owner)) {"
    },
    {
        "line": 69,
        "fullcodeline": "return -ENODEV;"
    },
    {
        "line": 72,
        "fullcodeline": "return -ENODEV;"
    },
    {
        "line": 90,
        "fullcodeline": "return -ENODEV;"
    },
    {
        "line": 96,
        "fullcodeline": "return -ENODEV;"
    }
]