[
    {
        "line": 5,
        "fullcodeline": "status = _(\"Configuring NixOS\")"
    },
    {
        "line": 9,
        "fullcodeline": "cfg = cfghead"
    },
    {
        "line": 11,
        "fullcodeline": "variables = dict()"
    },
    {
        "line": 14,
        "fullcodeline": "root_mount_point = gs.value(\"rootMountPoint\")"
    },
    {
        "line": 15,
        "fullcodeline": "config = os.path.join(root_mount_point, \"etc/nixos/configuration.nix\")"
    },
    {
        "line": 16,
        "fullcodeline": "fw_type = gs.value(\"firmwareType\")"
    },
    {
        "line": 17,
        "fullcodeline": "bootdev = \"nodev\" if gs.value(\"bootLoader\") is None else gs.value("
    },
    {
        "line": 73,
        "fullcodeline": "status = _(\"Configuring NixOS\")"
    },
    {
        "line": 76,
        "fullcodeline": "cfg += cfgnetwork"
    },
    {
        "line": 204,
        "fullcodeline": "free = True"
    },
    {
        "line": 210,
        "fullcodeline": "cfg += cfgpkgs"
    },
    {
        "line": 219,
        "fullcodeline": "cfg += cfgtail"
    },
    {
        "line": 220,
        "fullcodeline": "version = \".\".join(subprocess.getoutput("
    },
    {
        "line": 222,
        "fullcodeline": "catenate(variables, \"nixosversion\", version)"
    },
    {
        "line": 232,
        "fullcodeline": "variable_pattern = re.compile(\"@@\\w+@@\")"
    },
    {
        "line": 267,
        "fullcodeline": "status = _(\"Generating NixOS configuration\")"
    },
    {
        "line": 280,
        "fullcodeline": "hf = open(root_mount_point + \"/etc/nixos/hardware-configuration.nix\", \"r\")"
    },
    {
        "line": 281,
        "fullcodeline": "htxt = hf.read()"
    },
    {
        "line": 282,
        "fullcodeline": "search = re.search(\"boot\\.extraModulePackages = \\[ (.*) \\];\", htxt)"
    },
    {
        "line": 306,
        "fullcodeline": "status = _(\"Installing NixOS\")"
    },
    {
        "line": 6,
        "fullcodeline": "libcalamares.job.setprogress(0.1)"
    },
    {
        "line": 23,
        "fullcodeline": "if (fw_type == \"efi\"):"
    },
    {
        "line": 32,
        "fullcodeline": "for part in gs.value(\"partitions\"):"
    },
    {
        "line": 53,
        "fullcodeline": "for part in gs.value(\"partitions\"):"
    },
    {
        "line": 74,
        "fullcodeline": "libcalamares.job.setprogress(0.18)"
    },
    {
        "line": 77,
        "fullcodeline": "if gs.value(\"packagechooser_packagechooser\") == \"enlightenment\":"
    },
    {
        "line": 82,
        "fullcodeline": "if (gs.value(\"packagechooser_packagechooser\") == \"mate\") | (gs.value(\"packagechooser_packagechooser\") == \"lxqt\") | (gs.value(\"packagechooser_packagechooser\") == \"lumina\"):"
    },
    {
        "line": 85,
        "fullcodeline": "if (gs.value(\"hostname\") is None):"
    },
    {
        "line": 90,
        "fullcodeline": "if (gs.value(\"locationRegion\") is not None and gs.value(\"locationZone\") is not None):"
    },
    {
        "line": 95,
        "fullcodeline": "if (gs.value(\"localeConf\") is not None):"
    },
    {
        "line": 106,
        "fullcodeline": "if gs.value(\"packagechooser_packagechooser\") == \"gnome\":"
    },
    {
        "line": 127,
        "fullcodeline": "if (gs.value(\"keyboardLayout\") is not None and gs.value(\"keyboardVariant\") is not None):"
    },
    {
        "line": 184,
        "fullcodeline": "if gs.value(\"packagechooser_packagechooser\") is not None and gs.value(\"packagechooser_packagechooser\") != \"\":"
    },
    {
        "line": 187,
        "fullcodeline": "if (gs.value(\"username\") is not None):"
    },
    {
        "line": 205,
        "fullcodeline": "if gs.value(\"packagechooser_unfree\") is not None:"
    },
    {
        "line": 212,
        "fullcodeline": "if gs.value(\"packagechooser_packagechooser\") == \"plasma\":"
    },
    {
        "line": 221,
        "fullcodeline": "[\"nixos-version\"]).split(\".\")[:2])[:5]"
    },
    {
        "line": 225,
        "fullcodeline": "for key in variables.keys():"
    },
    {
        "line": 233,
        "fullcodeline": "for match in variable_pattern.finditer(cfg):"
    },
    {
        "line": 240,
        "fullcodeline": "for key in variables.keys():"
    },
    {
        "line": 245,
        "fullcodeline": "for part in gs.value(\"partitions\"):"
    },
    {
        "line": 268,
        "fullcodeline": "libcalamares.job.setprogress(0.25)"
    },
    {
        "line": 285,
        "fullcodeline": "if search is not None and free:"
    },
    {
        "line": 303,
        "fullcodeline": "libcalamares.utils.host_env_process_output("
    },
    {
        "line": 307,
        "fullcodeline": "libcalamares.job.setprogress(0.3)"
    },
    {
        "line": 24,
        "fullcodeline": "cfg += cfgbootefi"
    },
    {
        "line": 78,
        "fullcodeline": "cfg += cfgconnman"
    },
    {
        "line": 80,
        "fullcodeline": "cfg += cfgnetworkmanager"
    },
    {
        "line": 83,
        "fullcodeline": "cfg += cfgnmapplet"
    },
    {
        "line": 86,
        "fullcodeline": "catenate(variables, \"hostname\", \"nixos\")"
    },
    {
        "line": 88,
        "fullcodeline": "catenate(variables, \"hostname\", gs.value(\"hostname\"))"
    },
    {
        "line": 91,
        "fullcodeline": "cfg += cfgtime"
    },
    {
        "line": 92,
        "fullcodeline": "catenate(variables, \"timezone\", gs.value("
    },
    {
        "line": 96,
        "fullcodeline": "localeconf = gs.value(\"localeConf\")"
    },
    {
        "line": 97,
        "fullcodeline": "locale = localeconf.pop(\"LANG\").split(\"/\")[0]"
    },
    {
        "line": 98,
        "fullcodeline": "cfg += cfglocale"
    },
    {
        "line": 99,
        "fullcodeline": "catenate(variables, \"LANG\", locale)"
    },
    {
        "line": 107,
        "fullcodeline": "cfg += cfggnome"
    },
    {
        "line": 128,
        "fullcodeline": "cfg += cfgkeymap"
    },
    {
        "line": 129,
        "fullcodeline": "catenate(variables, \"kblayout\", gs.value(\"keyboardLayout\"))"
    },
    {
        "line": 130,
        "fullcodeline": "catenate(variables, \"kbvariant\", gs.value(\"keyboardVariant\"))"
    },
    {
        "line": 185,
        "fullcodeline": "cfg += cfgmisc"
    },
    {
        "line": 188,
        "fullcodeline": "fullname = gs.value(\"fullname\")"
    },
    {
        "line": 189,
        "fullcodeline": "groups = [\"networkmanager\", \"wheel\"]"
    },
    {
        "line": 191,
        "fullcodeline": "cfg += cfgusers"
    },
    {
        "line": 192,
        "fullcodeline": "catenate(variables, \"username\", gs.value(\"username\"))"
    },
    {
        "line": 193,
        "fullcodeline": "catenate(variables, \"fullname\", fullname)"
    },
    {
        "line": 194,
        "fullcodeline": "catenate(variables, \"groups\", (\" \").join("
    },
    {
        "line": 213,
        "fullcodeline": "catenate(variables, \"pkgs\", \"\\n      firefox\\n      kate\\n    #  thunderbird\\n    \")"
    },
    {
        "line": 272,
        "fullcodeline": "subprocess.check_output("
    },
    {
        "line": 286,
        "fullcodeline": "expkgs = search.group(1).split(\" \")"
    },
    {
        "line": 296,
        "fullcodeline": "hardwareout = re.sub("
    },
    {
        "line": 304,
        "fullcodeline": "[\"cp\", \"/dev/stdin\", config], None, cfg)"
    },
    {
        "line": 311,
        "fullcodeline": "output = \"\""
    },
    {
        "line": 312,
        "fullcodeline": "proc = subprocess.Popen([\"pkexec\", \"nixos-install\", \"--no-root-passwd\", \"--root\", root_mount_point], stdout=subprocess.PIPE, stderr=subprocess.STDOUT)"
    },
    {
        "line": 319,
        "fullcodeline": "exit = proc.wait()"
    },
    {
        "line": 25,
        "fullcodeline": "elif (bootdev != \"nodev\"):"
    },
    {
        "line": 93,
        "fullcodeline": "\"locationRegion\"), \"/\", gs.value(\"locationZone\"))"
    },
    {
        "line": 100,
        "fullcodeline": "if (len(set(localeconf.values())) != 1 or list(set(localeconf.values()))[0] != locale):"
    },
    {
        "line": 108,
        "fullcodeline": "elif gs.value(\"packagechooser_packagechooser\") == \"plasma\":"
    },
    {
        "line": 132,
        "fullcodeline": "if (gs.value(\"keyboardVConsoleKeymap\") is not None):"
    },
    {
        "line": 196,
        "fullcodeline": "if (gs.value(\"autoLoginUser\") is not None and gs.value(\"packagechooser_packagechooser\") is not None and gs.value(\"packagechooser_packagechooser\") != \"\"):"
    },
    {
        "line": 206,
        "fullcodeline": "if gs.value(\"packagechooser_unfree\") == \"unfree\":"
    },
    {
        "line": 214,
        "fullcodeline": "elif gs.value(\"packagechooser_packagechooser\") != \"\":"
    },
    {
        "line": 226,
        "fullcodeline": "pattern = \"@@{key}@@\".format(key=key)"
    },
    {
        "line": 234,
        "fullcodeline": "variable_name = cfg[match.start()+2:match.end()-2]"
    },
    {
        "line": 241,
        "fullcodeline": "pattern = \"@@{key}@@\".format(key=key)"
    },
    {
        "line": 242,
        "fullcodeline": "cfg = cfg.replace(pattern, str(variables[key]))"
    },
    {
        "line": 273,
        "fullcodeline": "[\"pkexec\", \"nixos-generate-config\", \"--root\", root_mount_point], stderr=subprocess.STDOUT)"
    },
    {
        "line": 287,
        "fullcodeline": "for pkg in expkgs:"
    },
    {
        "line": 299,
        "fullcodeline": "libcalamares.utils.host_env_process_output([\"cp\", \"/dev/stdin\","
    },
    {
        "line": 320,
        "fullcodeline": "if exit != 0:"
    },
    {
        "line": 26,
        "fullcodeline": "cfg += cfgbootbios"
    },
    {
        "line": 27,
        "fullcodeline": "catenate(variables, \"bootdev\", bootdev)"
    },
    {
        "line": 29,
        "fullcodeline": "cfg += cfgbootnone"
    },
    {
        "line": 33,
        "fullcodeline": "if part[\"claimed\"] == True and part[\"fsName\"] == \"luks\":"
    },
    {
        "line": 54,
        "fullcodeline": "if part[\"claimed\"] == True and part[\"fsName\"] == \"luks\" and part[\"device\"] is not None and not (fw_type == \"efi\" and part[\"mountPoint\"] == \"/\"):"
    },
    {
        "line": 101,
        "fullcodeline": "cfg += cfglocaleextra"
    },
    {
        "line": 109,
        "fullcodeline": "cfg += cfgplasma"
    },
    {
        "line": 144,
        "fullcodeline": "kbdmodelmap = open("
    },
    {
        "line": 146,
        "fullcodeline": "kbd = kbdmodelmap.readlines()"
    },
    {
        "line": 147,
        "fullcodeline": "out = []"
    },
    {
        "line": 153,
        "fullcodeline": "find = []"
    },
    {
        "line": 197,
        "fullcodeline": "cfg += cfgautologin"
    },
    {
        "line": 207,
        "fullcodeline": "free = False"
    },
    {
        "line": 208,
        "fullcodeline": "cfg += cfgunfree"
    },
    {
        "line": 215,
        "fullcodeline": "catenate(variables, \"pkgs\", \"\\n      firefox\\n    #  thunderbird\\n    \")"
    },
    {
        "line": 217,
        "fullcodeline": "catenate(variables, \"pkgs\", \"\")"
    },
    {
        "line": 227,
        "fullcodeline": "if not pattern in cfg:"
    },
    {
        "line": 235,
        "fullcodeline": "if not variable_name in variables:"
    },
    {
        "line": 246,
        "fullcodeline": "if part[\"claimed\"] == True and part[\"fs\"] == \"linuxswap\":"
    },
    {
        "line": 314,
        "fullcodeline": "line = proc.stdout.readline().decode(\"utf-8\")"
    },
    {
        "line": 315,
        "fullcodeline": "output += line"
    },
    {
        "line": 34,
        "fullcodeline": "cfg += cfgbootcrypt"
    },
    {
        "line": 37,
        "fullcodeline": "status = _(\"Setting up LUKS\")"
    },
    {
        "line": 102,
        "fullcodeline": "for conf in localeconf:"
    },
    {
        "line": 110,
        "fullcodeline": "elif gs.value(\"packagechooser_packagechooser\") == \"xfce\":"
    },
    {
        "line": 148,
        "fullcodeline": "for line in kbd:"
    },
    {
        "line": 154,
        "fullcodeline": "for row in out:"
    },
    {
        "line": 157,
        "fullcodeline": "if find != []:"
    },
    {
        "line": 161,
        "fullcodeline": "if gs.value(\"keyboardVariant\") is not None:"
    },
    {
        "line": 166,
        "fullcodeline": "for row in find:"
    },
    {
        "line": 171,
        "fullcodeline": "if vconsole != \"\" and vconsole != \"us\" and vconsole is not None:"
    },
    {
        "line": 198,
        "fullcodeline": "if (gs.value(\"packagechooser_packagechooser\") == \"gnome\"):"
    },
    {
        "line": 200,
        "fullcodeline": "elif (gs.value(\"autoLoginUser\") is not None):"
    },
    {
        "line": 247,
        "fullcodeline": "status = _(\"Mounting swap\")"
    },
    {
        "line": 275,
        "fullcodeline": "if e.output != None:"
    },
    {
        "line": 277,
        "fullcodeline": "return (_(\"nixos-generate-config failed\"), _(e.output.decode(\"utf8\")))"
    },
    {
        "line": 288,
        "fullcodeline": "p = \".\".join(pkg.split(\".\")[3:])"
    },
    {
        "line": 290,
        "fullcodeline": "isunfree = subprocess.check_output([\"nix-instantiate\", \"--eval\", \"--strict\", \"-E\","
    },
    {
        "line": 297,
        "fullcodeline": "\"boot\\.extraModulePackages = \\[ (.*) \\];\", \"boot.extraModulePackages = [ {}];\".format(\"\".join(map(lambda x: x+\" \", expkgs))), htxt)"
    },
    {
        "line": 300,
        "fullcodeline": "root_mount_point+\"/etc/nixos/hardware-configuration.nix\"], None, hardwareout)"
    },
    {
        "line": 316,
        "fullcodeline": "libcalamares.utils.debug(\"nixos-install: {}\".format(line.strip()))"
    },
    {
        "line": 317,
        "fullcodeline": "if not line:"
    },
    {
        "line": 321,
        "fullcodeline": "return (_(\"nixos-install failed\"), _(output))"
    },
    {
        "line": 323,
        "fullcodeline": "return (_(\"nixos-install failed\"), _(\"Installation failed to complete\"))"
    },
    {
        "line": 35,
        "fullcodeline": "if fw_type != \"efi\":"
    },
    {
        "line": 38,
        "fullcodeline": "libcalamares.job.setprogress(0.15)"
    },
    {
        "line": 55,
        "fullcodeline": "if part[\"fs\"] == \"linuxswap\":"
    },
    {
        "line": 111,
        "fullcodeline": "cfg += cfgxfce"
    },
    {
        "line": 134,
        "fullcodeline": "subprocess.check_output([\"pkexec\", \"loadkeys\", gs.value("
    },
    {
        "line": 136,
        "fullcodeline": "cfg += cfgconsole"
    },
    {
        "line": 137,
        "fullcodeline": "catenate(variables, \"vconsole\", gs.value("
    },
    {
        "line": 160,
        "fullcodeline": "vconsole = \"\""
    },
    {
        "line": 162,
        "fullcodeline": "variant = gs.value(\"keyboardVariant\")"
    },
    {
        "line": 164,
        "fullcodeline": "variant = \"-\""
    },
    {
        "line": 195,
        "fullcodeline": "[\"\\\"\" + s + \"\\\"\" for s in groups]))"
    },
    {
        "line": 199,
        "fullcodeline": "cfg += cfgautologingdm"
    },
    {
        "line": 201,
        "fullcodeline": "cfg += cfgautologintty"
    },
    {
        "line": 228,
        "fullcodeline": "libcalamares.utils.warning("
    },
    {
        "line": 236,
        "fullcodeline": "libcalamares.utils.warning("
    },
    {
        "line": 248,
        "fullcodeline": "libcalamares.job.setprogress(0.2)"
    },
    {
        "line": 249,
        "fullcodeline": "if part[\"fsName\"] == \"luks\":"
    },
    {
        "line": 292,
        "fullcodeline": "if isunfree == b'true':"
    },
    {
        "line": 36,
        "fullcodeline": "cfg += cfgbootgrubcrypt"
    },
    {
        "line": 56,
        "fullcodeline": "cfg += cfgswapcrypt"
    },
    {
        "line": 57,
        "fullcodeline": "catenate(variables, \"swapdev\", part[\"luksMapperName\"])"
    },
    {
        "line": 58,
        "fullcodeline": "uuid = part[\"uuid\"]"
    },
    {
        "line": 59,
        "fullcodeline": "catenate(variables, \"swapuuid\", uuid)"
    },
    {
        "line": 61,
        "fullcodeline": "cfg += \"\"\"  boot.initrd.luks.devices.\"{}\".keyFile = \"/crypto_keyfile.bin\";\\n\"\"\".format("
    },
    {
        "line": 103,
        "fullcodeline": "catenate(variables, conf, localeconf.get(conf).split(\"/\")[0])"
    },
    {
        "line": 112,
        "fullcodeline": "elif gs.value(\"packagechooser_packagechooser\") == \"pantheon\":"
    },
    {
        "line": 151,
        "fullcodeline": "out.append(line.split())"
    },
    {
        "line": 276,
        "fullcodeline": "libcalamares.utils.error(e.output.decode(\"utf8\"))"
    },
    {
        "line": 295,
        "fullcodeline": "expkgs.remove(pkg)"
    },
    {
        "line": 41,
        "fullcodeline": "libcalamares.utils.host_env_process_output("
    },
    {
        "line": 43,
        "fullcodeline": "libcalamares.utils.host_env_process_output("
    },
    {
        "line": 66,
        "fullcodeline": "libcalamares.utils.host_env_process_output("
    },
    {
        "line": 113,
        "fullcodeline": "cfg += cfgpantheon"
    },
    {
        "line": 149,
        "fullcodeline": "if line.startswith(\"#\"):"
    },
    {
        "line": 155,
        "fullcodeline": "if gs.value(\"keyboardLayout\") == row[1]:"
    },
    {
        "line": 167,
        "fullcodeline": "if variant in row[3]:"
    },
    {
        "line": 173,
        "fullcodeline": "subprocess.check_output("
    },
    {
        "line": 175,
        "fullcodeline": "cfg += cfgconsole"
    },
    {
        "line": 176,
        "fullcodeline": "catenate(variables, \"vconsole\", vconsole)"
    },
    {
        "line": 229,
        "fullcodeline": "\"Variable '{key}' is not used.\".format(key=key))"
    },
    {
        "line": 237,
        "fullcodeline": "\"Variable '{key}' is used but not defined.\".format(key=variable_name))"
    },
    {
        "line": 293,
        "fullcodeline": "libcalamares.utils.warning("
    },
    {
        "line": 42,
        "fullcodeline": "[\"dd\", \"bs=512\", \"count=4\", \"if=/dev/random\", \"of=\"+root_mount_point+\"/crypto_keyfile.bin\", \"iflag=fullblock\"], None)"
    },
    {
        "line": 44,
        "fullcodeline": "[\"chmod\", \"600\", root_mount_point+\"/crypto_keyfile.bin\"], None)"
    },
    {
        "line": 67,
        "fullcodeline": "[\"cryptsetup\", \"luksAddKey\", part[\"device\"], root_mount_point+\"/crypto_keyfile.bin\"], None, part[\"luksPassphrase\"])"
    },
    {
        "line": 114,
        "fullcodeline": "elif gs.value(\"packagechooser_packagechooser\") == \"cinnamon\":"
    },
    {
        "line": 140,
        "fullcodeline": "libcalamares.utils.error(\"loadkeys: {}\".format(e.output))"
    },
    {
        "line": 141,
        "fullcodeline": "libcalamares.utils.error(\"Setting vconsole keymap to {} will fail, using default\".format("
    },
    {
        "line": 156,
        "fullcodeline": "find.append(row)"
    },
    {
        "line": 168,
        "fullcodeline": "vconsole = row[0]"
    },
    {
        "line": 174,
        "fullcodeline": "[\"pkexec\", \"loadkeys\", vconsole], stderr=subprocess.STDOUT)"
    },
    {
        "line": 291,
        "fullcodeline": "\"with import <nixpkgs> {{}}; pkgs.linuxKernel.packageAliases.linux_default.{}.meta.unfree\".format(p), \"--json\"], stderr=subprocess.STDOUT)"
    },
    {
        "line": 46,
        "fullcodeline": "libcalamares.utils.error("
    },
    {
        "line": 48,
        "fullcodeline": "return (_(\"Failed to create /crypto_keyfile.bin\"), _(\"Check if you have enough free space on your partition.\"))"
    },
    {
        "line": 69,
        "fullcodeline": "libcalamares.utils.error("
    },
    {
        "line": 71,
        "fullcodeline": "return (_(\"cryptsetup failed\"), _(\"Failed to add {} to /crypto_keyfile.bin\".format(part[\"luksMapperName\"])))"
    },
    {
        "line": 115,
        "fullcodeline": "cfg += cfgcinnamon"
    },
    {
        "line": 251,
        "fullcodeline": "libcalamares.utils.host_env_process_output("
    },
    {
        "line": 259,
        "fullcodeline": "libcalamares.utils.host_env_process_output("
    },
    {
        "line": 294,
        "fullcodeline": "\"{} is marked as unfree, removing from hardware-configuration.nix\".format(p))"
    },
    {
        "line": 116,
        "fullcodeline": "elif gs.value(\"packagechooser_packagechooser\") == \"mate\":"
    },
    {
        "line": 178,
        "fullcodeline": "libcalamares.utils.error(\"loadkeys: {}\".format(e.output))"
    },
    {
        "line": 179,
        "fullcodeline": "libcalamares.utils.error("
    },
    {
        "line": 181,
        "fullcodeline": "libcalamares.utils.error(\"Setting vconsole keymap to {} will fail, using default\".format("
    },
    {
        "line": 252,
        "fullcodeline": "[\"swapon\", \"/dev/mapper/\" + part[\"luksMapperName\"]], None)"
    },
    {
        "line": 260,
        "fullcodeline": "[\"swapon\", part[\"device\"]], None)"
    },
    {
        "line": 70,
        "fullcodeline": "\"Failed to add {} to /crypto_keyfile.bin\".format(part[\"luksMapperName\"]))"
    },
    {
        "line": 117,
        "fullcodeline": "cfg += cfgmate"
    },
    {
        "line": 254,
        "fullcodeline": "libcalamares.utils.error("
    },
    {
        "line": 256,
        "fullcodeline": "return (_(\"swapon failed to activate swap\"), _(\"failed while activating:\" + \"/dev/mapper/\" + part[\"luksMapperName\"]))"
    },
    {
        "line": 262,
        "fullcodeline": "libcalamares.utils.error("
    },
    {
        "line": 264,
        "fullcodeline": "return (_(\"swapon failed to activate swap \" + part[\"device\"]), _(\"failed while activating:\" + \"/dev/mapper/\" + part[\"device\"]))"
    },
    {
        "line": 118,
        "fullcodeline": "elif gs.value(\"packagechooser_packagechooser\") == \"enlightenment\":"
    },
    {
        "line": 142,
        "fullcodeline": "gs.value(\"keyboardVConsoleKeymap\").strip()))"
    },
    {
        "line": 180,
        "fullcodeline": "\"vconsole value: {}\".format(vconsole))"
    },
    {
        "line": 255,
        "fullcodeline": "\"Failed to activate swap: \" + \"/dev/mapper/\" + part[\"luksMapperName\"])"
    },
    {
        "line": 263,
        "fullcodeline": "\"Failed to activate swap: \" + \"/dev/mapper/\" + part[\"device\"])"
    },
    {
        "line": 119,
        "fullcodeline": "cfg += cfgenlightenment"
    },
    {
        "line": 182,
        "fullcodeline": "gs.value(\"keyboardVConsoleKeymap\")))"
    },
    {
        "line": 120,
        "fullcodeline": "elif gs.value(\"packagechooser_packagechooser\") == \"lxqt\":"
    },
    {
        "line": 121,
        "fullcodeline": "cfg += cfglxqt"
    },
    {
        "line": 122,
        "fullcodeline": "elif gs.value(\"packagechooser_packagechooser\") == \"lumina\":"
    },
    {
        "line": 123,
        "fullcodeline": "cfg += cfglumina"
    },
    {
        "line": 124,
        "fullcodeline": "elif gs.value(\"packagechooser_packagechooser\") == \"budgie\":"
    },
    {
        "line": 125,
        "fullcodeline": "cfg += cfgbudgie"
    }
]