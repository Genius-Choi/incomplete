[
    {
        "line": 4,
        "fullcodeline": "format[MaxTextExtent],"
    },
    {
        "line": 5,
        "fullcodeline": "keyword[MaxTextExtent],"
    },
    {
        "line": 6,
        "fullcodeline": "tag[MaxTextExtent],"
    },
    {
        "line": 7,
        "fullcodeline": "value[MaxTextExtent];"
    },
    {
        "line": 38,
        "fullcodeline": "pixel[4],"
    },
    {
        "line": 44,
        "fullcodeline": "assert(image_info != (const ImageInfo *) NULL);"
    },
    {
        "line": 45,
        "fullcodeline": "assert(image_info->signature == MagickSignature);"
    },
    {
        "line": 49,
        "fullcodeline": "assert(exception != (ExceptionInfo *) NULL);"
    },
    {
        "line": 50,
        "fullcodeline": "assert(exception->signature == MagickSignature);"
    },
    {
        "line": 51,
        "fullcodeline": "image=AcquireImage(image_info,exception);"
    },
    {
        "line": 52,
        "fullcodeline": "status=OpenBlob(image_info,image,ReadBinaryBlobMode,exception);"
    },
    {
        "line": 61,
        "fullcodeline": "image->columns=0;"
    },
    {
        "line": 62,
        "fullcodeline": "image->rows=0;"
    },
    {
        "line": 63,
        "fullcodeline": "*format='\\0';"
    },
    {
        "line": 64,
        "fullcodeline": "c=ReadBlobByte(image);"
    },
    {
        "line": 251,
        "fullcodeline": "image->compression=(image->columns < 8) || (image->columns > 0x7ffff) ?"
    },
    {
        "line": 258,
        "fullcodeline": "status=SetImageExtent(image,image->columns,image->rows,exception);"
    },
    {
        "line": 264,
        "fullcodeline": "pixels=(unsigned char *) AcquireQuantumMemory(image->columns,4*"
    },
    {
        "line": 46,
        "fullcodeline": "if (image_info->debug != MagickFalse)"
    },
    {
        "line": 53,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 65,
        "fullcodeline": "if (c == EOF)"
    },
    {
        "line": 70,
        "fullcodeline": "while (isgraph(c) && (image->columns == 0) && (image->rows == 0))"
    },
    {
        "line": 248,
        "fullcodeline": "(void) SetImageColorspace(image,RGBColorspace,exception);"
    },
    {
        "line": 253,
        "fullcodeline": "if (image_info->ping != MagickFalse)"
    },
    {
        "line": 259,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 266,
        "fullcodeline": "if (pixels == (unsigned char *) NULL)"
    },
    {
        "line": 268,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 367,
        "fullcodeline": "(void) CloseBlob(image);"
    },
    {
        "line": 368,
        "fullcodeline": "return(GetFirstImageInList(image));"
    },
    {
        "line": 47,
        "fullcodeline": "(void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\","
    },
    {
        "line": 55,
        "fullcodeline": "image=DestroyImageList(image);"
    },
    {
        "line": 243,
        "fullcodeline": "if ((LocaleCompare(format,\"32-bit_rle_rgbe\") != 0) &&"
    },
    {
        "line": 244,
        "fullcodeline": "(LocaleCompare(format,\"32-bit_rle_xyze\") != 0))"
    },
    {
        "line": 245,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 246,
        "fullcodeline": "if ((image->columns == 0) || (image->rows == 0))"
    },
    {
        "line": 247,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"NegativeOrZeroImageSize\");"
    },
    {
        "line": 249,
        "fullcodeline": "if (LocaleCompare(format,\"32-bit_rle_xyze\") == 0)"
    },
    {
        "line": 324,
        "fullcodeline": "q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 327,
        "fullcodeline": "i=0;"
    },
    {
        "line": 358,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 363,
        "fullcodeline": "pixels=(unsigned char *) RelinquishMagickMemory(pixels);"
    },
    {
        "line": 364,
        "fullcodeline": "if (EOFBlob(image) != MagickFalse)"
    },
    {
        "line": 365,
        "fullcodeline": "ThrowFileException(exception,CorruptImageError,\"UnexpectedEndOfFile\","
    },
    {
        "line": 56,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 67,
        "fullcodeline": "image=DestroyImage(image);"
    },
    {
        "line": 68,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 72,
        "fullcodeline": "if (c == (int) '#')"
    },
    {
        "line": 239,
        "fullcodeline": "if ((image->columns == 0) && (image->rows == 0))"
    },
    {
        "line": 250,
        "fullcodeline": "(void) SetImageColorspace(image,XYZColorspace,exception);"
    },
    {
        "line": 255,
        "fullcodeline": "(void) CloseBlob(image);"
    },
    {
        "line": 256,
        "fullcodeline": "return(GetFirstImageInList(image));"
    },
    {
        "line": 260,
        "fullcodeline": "return(DestroyImageList(image));"
    },
    {
        "line": 270,
        "fullcodeline": "if (image->compression != RLECompression)"
    },
    {
        "line": 325,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 328,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 356,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 360,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 86,
        "fullcodeline": "length=MaxTextExtent;"
    },
    {
        "line": 87,
        "fullcodeline": "comment=AcquireString((char *) NULL);"
    },
    {
        "line": 107,
        "fullcodeline": "*p='\\0';"
    },
    {
        "line": 110,
        "fullcodeline": "c=ReadBlobByte(image);"
    },
    {
        "line": 272,
        "fullcodeline": "count=ReadBlob(image,4*image->columns*sizeof(*pixels),pixels);"
    },
    {
        "line": 344,
        "fullcodeline": "SetPixelRed(image,0,q);"
    },
    {
        "line": 345,
        "fullcodeline": "SetPixelGreen(image,0,q);"
    },
    {
        "line": 346,
        "fullcodeline": "SetPixelBlue(image,0,q);"
    },
    {
        "line": 354,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 88,
        "fullcodeline": "for (p=comment; comment != (char *) NULL; p++)"
    },
    {
        "line": 105,
        "fullcodeline": "if (comment == (char *) NULL)"
    },
    {
        "line": 108,
        "fullcodeline": "(void) SetImageProperty(image,\"comment\",comment,exception);"
    },
    {
        "line": 109,
        "fullcodeline": "comment=DestroyString(comment);"
    },
    {
        "line": 241,
        "fullcodeline": "c=ReadBlobByte(image);"
    },
    {
        "line": 278,
        "fullcodeline": "count=ReadBlob(image,4*sizeof(*pixel),pixel);"
    },
    {
        "line": 330,
        "fullcodeline": "if (image->compression == RLECompression)"
    },
    {
        "line": 347,
        "fullcodeline": "if (pixel[3] != 0)"
    },
    {
        "line": 90,
        "fullcodeline": "c=ReadBlobByte(image);"
    },
    {
        "line": 103,
        "fullcodeline": "*p=(char) c;"
    },
    {
        "line": 106,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 113,
        "fullcodeline": "if (isalnum(c) == MagickFalse)"
    },
    {
        "line": 240,
        "fullcodeline": "while (isspace((int) ((unsigned char) c)) != 0)"
    },
    {
        "line": 273,
        "fullcodeline": "if (count != (ssize_t) (4*image->columns*sizeof(*pixels)))"
    },
    {
        "line": 281,
        "fullcodeline": "if ((size_t) ((((size_t) pixel[2]) << 8) | pixel[3]) != image->columns)"
    },
    {
        "line": 332,
        "fullcodeline": "pixel[0]=pixels[x];"
    },
    {
        "line": 333,
        "fullcodeline": "pixel[1]=pixels[x+image->columns];"
    },
    {
        "line": 334,
        "fullcodeline": "pixel[2]=pixels[x+2*image->columns];"
    },
    {
        "line": 335,
        "fullcodeline": "pixel[3]=pixels[x+3*image->columns];"
    },
    {
        "line": 349,
        "fullcodeline": "gamma=pow(2.0,pixel[3]-(128.0+8.0));"
    },
    {
        "line": 350,
        "fullcodeline": "SetPixelRed(image,ClampToQuantum(QuantumRange*gamma*pixel[0]),q);"
    },
    {
        "line": 351,
        "fullcodeline": "SetPixelGreen(image,ClampToQuantum(QuantumRange*gamma*pixel[1]),q);"
    },
    {
        "line": 352,
        "fullcodeline": "SetPixelBlue(image,ClampToQuantum(QuantumRange*gamma*pixel[2]),q);"
    },
    {
        "line": 93,
        "fullcodeline": "if ((size_t) (p-comment+1) >= length)"
    },
    {
        "line": 114,
        "fullcodeline": "c=ReadBlobByte(image);"
    },
    {
        "line": 285,
        "fullcodeline": "image->compression=NoCompression;"
    },
    {
        "line": 339,
        "fullcodeline": "pixel[0]=pixels[i++];"
    },
    {
        "line": 340,
        "fullcodeline": "pixel[1]=pixels[i++];"
    },
    {
        "line": 341,
        "fullcodeline": "pixel[2]=pixels[i++];"
    },
    {
        "line": 342,
        "fullcodeline": "pixel[3]=pixels[i++];"
    },
    {
        "line": 91,
        "fullcodeline": "if ((c == EOF) || (c == (int) '\\n'))"
    },
    {
        "line": 96,
        "fullcodeline": "length<<=1;"
    },
    {
        "line": 97,
        "fullcodeline": "comment=(char *) ResizeQuantumMemory(comment,length+"
    },
    {
        "line": 101,
        "fullcodeline": "p=comment+strlen(comment);"
    },
    {
        "line": 123,
        "fullcodeline": "p=keyword;"
    },
    {
        "line": 130,
        "fullcodeline": "*p='\\0';"
    },
    {
        "line": 131,
        "fullcodeline": "value_expected=MagickFalse;"
    },
    {
        "line": 142,
        "fullcodeline": "p=value;"
    },
    {
        "line": 149,
        "fullcodeline": "*p='\\0';"
    },
    {
        "line": 283,
        "fullcodeline": "(void) memcpy(pixels,pixel,4*sizeof(*pixel));"
    },
    {
        "line": 284,
        "fullcodeline": "count=ReadBlob(image,4*(image->columns-1)*sizeof(*pixels),pixels+4);"
    },
    {
        "line": 289,
        "fullcodeline": "p=pixels;"
    },
    {
        "line": 99,
        "fullcodeline": "if (comment == (char *) NULL)"
    },
    {
        "line": 140,
        "fullcodeline": "if (value_expected == MagickFalse)"
    },
    {
        "line": 290,
        "fullcodeline": "for (i=0; i < 4; i++)"
    },
    {
        "line": 128,
        "fullcodeline": "c=ReadBlobByte(image);"
    },
    {
        "line": 129,
        "fullcodeline": "} while (isalnum(c) || (c == '_'));"
    },
    {
        "line": 132,
        "fullcodeline": "while ((isspace((int) ((unsigned char) c)) != 0) || (c == '='))"
    },
    {
        "line": 136,
        "fullcodeline": "c=ReadBlobByte(image);"
    },
    {
        "line": 138,
        "fullcodeline": "if (LocaleCompare(keyword,\"Y\") == 0)"
    },
    {
        "line": 139,
        "fullcodeline": "value_expected=MagickTrue;"
    },
    {
        "line": 143,
        "fullcodeline": "while ((c != '\\n') && (c != '\\0') && (c != EOF))"
    },
    {
        "line": 147,
        "fullcodeline": "c=ReadBlobByte(image);"
    },
    {
        "line": 292,
        "fullcodeline": "end=&pixels[(i+1)*image->columns];"
    },
    {
        "line": 134,
        "fullcodeline": "if (c == '=')"
    },
    {
        "line": 212,
        "fullcodeline": "target[] = \"Y\";"
    },
    {
        "line": 293,
        "fullcodeline": "while (p < end)"
    },
    {
        "line": 126,
        "fullcodeline": "if ((size_t) (p-keyword) < (MaxTextExtent-1))"
    },
    {
        "line": 135,
        "fullcodeline": "value_expected=MagickTrue;"
    },
    {
        "line": 145,
        "fullcodeline": "if ((size_t) (p-value) < (MaxTextExtent-1))"
    },
    {
        "line": 163,
        "fullcodeline": "(void) FormatLocaleString(tag,MaxTextExtent,\"hdr:%s\",keyword);"
    },
    {
        "line": 164,
        "fullcodeline": "(void) SetImageProperty(image,tag,value,exception);"
    },
    {
        "line": 175,
        "fullcodeline": "(void) FormatLocaleString(tag,MaxTextExtent,\"hdr:%s\",keyword);"
    },
    {
        "line": 176,
        "fullcodeline": "(void) SetImageProperty(image,tag,value,exception);"
    },
    {
        "line": 204,
        "fullcodeline": "(void) FormatLocaleString(tag,MaxTextExtent,\"hdr:%s\",keyword);"
    },
    {
        "line": 205,
        "fullcodeline": "(void) SetImageProperty(image,tag,value,exception);"
    },
    {
        "line": 227,
        "fullcodeline": "(void) FormatLocaleString(tag,MaxTextExtent,\"hdr:%s\",keyword);"
    },
    {
        "line": 228,
        "fullcodeline": "(void) SetImageProperty(image,tag,value,exception);"
    },
    {
        "line": 233,
        "fullcodeline": "(void) FormatLocaleString(tag,MaxTextExtent,\"hdr:%s\",keyword);"
    },
    {
        "line": 234,
        "fullcodeline": "(void) SetImageProperty(image,tag,value,exception);"
    },
    {
        "line": 295,
        "fullcodeline": "count=ReadBlob(image,2*sizeof(*pixel),pixel);"
    },
    {
        "line": 158,
        "fullcodeline": "if (LocaleCompare(keyword,\"format\") == 0)"
    },
    {
        "line": 170,
        "fullcodeline": "if (LocaleCompare(keyword,\"gamma\") == 0)"
    },
    {
        "line": 172,
        "fullcodeline": "image->gamma=StringToDouble(value,(char **) NULL);"
    },
    {
        "line": 182,
        "fullcodeline": "if (LocaleCompare(keyword,\"primaries\") == 0)"
    },
    {
        "line": 185,
        "fullcodeline": "chromaticity[6],"
    },
    {
        "line": 186,
        "fullcodeline": "white_point[2];"
    },
    {
        "line": 214,
        "fullcodeline": "if (strcmp(keyword,target) == 0)"
    },
    {
        "line": 298,
        "fullcodeline": "if (pixel[0] > 128)"
    },
    {
        "line": 127,
        "fullcodeline": "*p++=c;"
    },
    {
        "line": 146,
        "fullcodeline": "*p++=c;"
    },
    {
        "line": 160,
        "fullcodeline": "(void) CopyMagickString(format,value,MaxTextExtent);"
    },
    {
        "line": 300,
        "fullcodeline": "count=(ssize_t) pixel[0]-128;"
    },
    {
        "line": 188,
        "fullcodeline": "if (sscanf(value,\"%g %g %g %g %g %g %g %g\",&chromaticity[0],"
    },
    {
        "line": 220,
        "fullcodeline": "if (sscanf(value,\"%d +X %d\",&height,&width) == 2)"
    },
    {
        "line": 222,
        "fullcodeline": "image->columns=(size_t) width;"
    },
    {
        "line": 223,
        "fullcodeline": "image->rows=(size_t) height;"
    },
    {
        "line": 301,
        "fullcodeline": "if ((count == 0) || (count > (ssize_t) (end-p)))"
    },
    {
        "line": 308,
        "fullcodeline": "count=(ssize_t) pixel[0];"
    },
    {
        "line": 199,
        "fullcodeline": "image->chromaticity.white_point.x=white_point[0],"
    },
    {
        "line": 200,
        "fullcodeline": "image->chromaticity.white_point.y=white_point[1];"
    },
    {
        "line": 303,
        "fullcodeline": "while (count-- > 0)"
    },
    {
        "line": 309,
        "fullcodeline": "if ((count == 0) || (count > (ssize_t) (end-p)))"
    },
    {
        "line": 304,
        "fullcodeline": "*p++=pixel[1];"
    },
    {
        "line": 311,
        "fullcodeline": "*p++=pixel[1];"
    },
    {
        "line": 312,
        "fullcodeline": "if (--count > 0)"
    },
    {
        "line": 314,
        "fullcodeline": "count=ReadBlob(image,(size_t) count*sizeof(*p),p);"
    },
    {
        "line": 317,
        "fullcodeline": "p+=count;"
    },
    {
        "line": 315,
        "fullcodeline": "if (count < 1)"
    }
]