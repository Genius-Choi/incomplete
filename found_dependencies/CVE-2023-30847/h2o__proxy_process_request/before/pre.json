[
    {
        "line": 3,
        "fullcodeline": "h2o_req_overrides_t *overrides = req->overrides;"
    },
    {
        "line": 4,
        "fullcodeline": "h2o_httpclient_ctx_t *client_ctx = get_client_ctx(req);"
    },
    {
        "line": 5,
        "fullcodeline": "h2o_url_t target_buf, *target = &target_buf;"
    },
    {
        "line": 7,
        "fullcodeline": "h2o_httpclient_connection_pool_t *connpool = &req->conn->ctx->proxy.connpool;"
    },
    {
        "line": 16,
        "fullcodeline": "const char *upgrade_to = NULL;"
    },
    {
        "line": 33,
        "fullcodeline": "struct rp_generator_t *self = proxy_send_prepare(req);"
    },
    {
        "line": 48,
        "fullcodeline": "h2o_httpclient_connect(&self->client, &req->pool, self, client_ctx, connpool, target, upgrade_to, on_connect);"
    },
    {
        "line": 8,
        "fullcodeline": "if (overrides != NULL && overrides->connpool != NULL) {"
    },
    {
        "line": 13,
        "fullcodeline": "if (target == &target_buf)"
    },
    {
        "line": 9,
        "fullcodeline": "connpool = overrides->connpool;"
    },
    {
        "line": 14,
        "fullcodeline": "h2o_url_init(&target_buf, req->scheme, req->authority, h2o_iovec_init(H2O_STRLIT(\"/\")));"
    },
    {
        "line": 10,
        "fullcodeline": "if (!overrides->proxy_preserve_host)"
    },
    {
        "line": 18,
        "fullcodeline": "if (req->upgrade.base != NULL) {"
    },
    {
        "line": 11,
        "fullcodeline": "target = NULL;"
    },
    {
        "line": 22,
        "fullcodeline": "upgrade_to = h2o_strdup(&req->pool, req->upgrade.base, req->upgrade.len).base;"
    },
    {
        "line": 26,
        "fullcodeline": "upgrade_to = h2o_httpclient_upgrade_to_connect;"
    },
    {
        "line": 28,
        "fullcodeline": "h2o_send_error_405(req, \"Method Not Allowed\", \"refusing CONNECT\", H2O_SEND_ERROR_HTTP1_CLOSE_CONNECTION);"
    }
]