[
    {
        "line": 5,
        "fullcodeline": "size_t remote_addr_len = SIZE_MAX;"
    },
    {
        "line": 6,
        "fullcodeline": "char remote_addr[NI_MAXHOST];"
    },
    {
        "line": 9,
        "fullcodeline": "h2o_iovec_t xff_buf = {NULL}, via_buf = {NULL};"
    },
    {
        "line": 24,
        "fullcodeline": "*method = h2o_strdup(&req->pool, req->method.base, req->method.len);"
    },
    {
        "line": 60,
        "fullcodeline": "h2o_iovec_vector_t cookie_values = {NULL};"
    },
    {
        "line": 61,
        "fullcodeline": "int found_early_data = 0;"
    },
    {
        "line": 15,
        "fullcodeline": "if ((sslen = req->conn->callbacks->get_peername(req->conn, (void *)&ss)) != 0)"
    },
    {
        "line": 18,
        "fullcodeline": "if (props->proxy_protocol != NULL && use_proxy_protocol) {"
    },
    {
        "line": 27,
        "fullcodeline": "if (h2o_url_init(url, origin->scheme, req->authority, h2o_strdup(&req->pool, req->path.base, req->path.len)) != 0)"
    },
    {
        "line": 30,
        "fullcodeline": "if (props->connection_header != NULL) {"
    },
    {
        "line": 42,
        "fullcodeline": "if (!req->is_tunnel_req) {"
    },
    {
        "line": 62,
        "fullcodeline": "if (H2O_LIKELY(req->headers.size != 0)) {"
    },
    {
        "line": 107,
        "fullcodeline": "if (cookie_values.size == 1) {"
    },
    {
        "line": 146,
        "fullcodeline": "if (req->overrides != NULL && req->overrides->headers_cmds != NULL) {"
    },
    {
        "line": 16,
        "fullcodeline": "remote_addr_len = h2o_socket_getnumerichost((void *)&ss, sslen, remote_addr);"
    },
    {
        "line": 20,
        "fullcodeline": "props->proxy_protocol->len = h2o_stringify_proxy_header(req->conn, props->proxy_protocol->base);"
    },
    {
        "line": 28,
        "fullcodeline": "h2o_fatal(\"h2o_url_init failed\");"
    },
    {
        "line": 102,
        "fullcodeline": "*reprocess_if_too_early = 0;"
    },
    {
        "line": 109,
        "fullcodeline": "h2o_add_header(&req->pool, headers, H2O_TOKEN_COOKIE, NULL, cookie_values.entries[0].base, cookie_values.entries[0].len);"
    },
    {
        "line": 128,
        "fullcodeline": "added.len = 0;"
    },
    {
        "line": 137,
        "fullcodeline": "added.base[added.len++] = ' ';"
    },
    {
        "line": 138,
        "fullcodeline": "memcpy(added.base + added.len, req->input.authority.base, req->input.authority.len);"
    },
    {
        "line": 139,
        "fullcodeline": "added.len += req->input.authority.len;"
    },
    {
        "line": 141,
        "fullcodeline": "via_buf = build_request_merge_headers(&req->pool, via_buf, added, ',');"
    },
    {
        "line": 142,
        "fullcodeline": "h2o_add_header(&req->pool, headers, H2O_TOKEN_VIA, NULL, via_buf.base, via_buf.len);"
    },
    {
        "line": 31,
        "fullcodeline": "if (upgrade_to != NULL && upgrade_to != h2o_httpclient_upgrade_to_connect) {"
    },
    {
        "line": 43,
        "fullcodeline": "if (req->proceed_req == NULL) {"
    },
    {
        "line": 63,
        "fullcodeline": "for (const h2o_header_t *h = req->headers.entries, *h_end = h + req->headers.size; h != h_end; ++h) {"
    },
    {
        "line": 117,
        "fullcodeline": "if (!preserve_x_forwarded_proto)"
    },
    {
        "line": 120,
        "fullcodeline": "if (remote_addr_len != SIZE_MAX)"
    },
    {
        "line": 122,
        "fullcodeline": "if (xff_buf.len != 0)"
    },
    {
        "line": 130,
        "fullcodeline": "if (req->version < 0x200) {"
    },
    {
        "line": 148,
        "fullcodeline": "for (cmd = req->overrides->headers_cmds; cmd->cmd != H2O_HEADERS_CMD_NULL; ++cmd)"
    },
    {
        "line": 149,
        "fullcodeline": "h2o_rewrite_headers(&req->pool, headers, cmd);"
    },
    {
        "line": 32,
        "fullcodeline": "*props->connection_header = h2o_iovec_init(H2O_STRLIT(\"upgrade\"));"
    },
    {
        "line": 33,
        "fullcodeline": "h2o_add_header(&req->pool, headers, H2O_TOKEN_UPGRADE, NULL, upgrade_to, strlen(upgrade_to));"
    },
    {
        "line": 110,
        "fullcodeline": "} else if (cookie_values.size > 1) {"
    },
    {
        "line": 118,
        "fullcodeline": "h2o_add_header_by_str(&req->pool, headers, H2O_STRLIT(\"x-forwarded-proto\"), 0, NULL, req->input.scheme->name.base,"
    },
    {
        "line": 121,
        "fullcodeline": "xff_buf = build_request_merge_headers(&req->pool, xff_buf, h2o_strdup(&req->pool, remote_addr, remote_addr_len), ',');"
    },
    {
        "line": 123,
        "fullcodeline": "h2o_add_header(&req->pool, headers, H2O_TOKEN_X_FORWARDED_FOR, NULL, xff_buf.base, xff_buf.len);"
    },
    {
        "line": 131,
        "fullcodeline": "added.base[added.len++] = '1';"
    },
    {
        "line": 132,
        "fullcodeline": "added.base[added.len++] = '.';"
    },
    {
        "line": 133,
        "fullcodeline": "added.base[added.len++] = '0' + (0x100 <= req->version && req->version <= 0x109 ? req->version - 0x100 : 0);"
    },
    {
        "line": 44,
        "fullcodeline": "if (req->entity.base != NULL || req_requires_content_length(req)) {"
    },
    {
        "line": 64,
        "fullcodeline": "if (h2o_iovec_is_token(h->name)) {"
    },
    {
        "line": 89,
        "fullcodeline": "if (!preserve_x_forwarded_proto && h2o_lcstris(h->name->base, h->name->len, H2O_STRLIT(\"x-forwarded-proto\")))"
    },
    {
        "line": 92,
        "fullcodeline": "if (h2o_iovec_is_token(h->name)) {"
    },
    {
        "line": 104,
        "fullcodeline": "h2o_add_header(&req->pool, headers, H2O_TOKEN_EARLY_DATA, NULL, H2O_STRLIT(\"1\"));"
    },
    {
        "line": 112,
        "fullcodeline": "h2o_iovec_t cookie_buf ="
    },
    {
        "line": 114,
        "fullcodeline": "h2o_add_header(&req->pool, headers, H2O_TOKEN_COOKIE, NULL, cookie_buf.base, cookie_buf.len);"
    },
    {
        "line": 135,
        "fullcodeline": "added.base[added.len++] = '0' + req->version / 0x100;"
    },
    {
        "line": 45,
        "fullcodeline": "h2o_iovec_t cl_buf = build_content_length(&req->pool, req->entity.len);"
    },
    {
        "line": 46,
        "fullcodeline": "h2o_add_header(&req->pool, headers, H2O_TOKEN_CONTENT_LENGTH, NULL, cl_buf.base, cl_buf.len);"
    },
    {
        "line": 49,
        "fullcodeline": "if (req->content_length != SIZE_MAX) {"
    },
    {
        "line": 65,
        "fullcodeline": "const h2o_token_t *token = (void *)h->name;"
    },
    {
        "line": 93,
        "fullcodeline": "const h2o_token_t *token = (void *)h->name;"
    },
    {
        "line": 94,
        "fullcodeline": "h2o_add_header(&req->pool, headers, token, h->orig_name, h->value.base, h->value.len);"
    },
    {
        "line": 113,
        "fullcodeline": "h2o_join_list(&req->pool, cookie_values.entries, cookie_values.size, h2o_iovec_init(H2O_STRLIT(\"; \")));"
    },
    {
        "line": 35,
        "fullcodeline": "*props->connection_header = h2o_iovec_init(H2O_STRLIT(\"keep-alive\"));"
    },
    {
        "line": 50,
        "fullcodeline": "h2o_iovec_t cl_buf = build_content_length(&req->pool, req->content_length);"
    },
    {
        "line": 51,
        "fullcodeline": "h2o_add_header(&req->pool, headers, H2O_TOKEN_CONTENT_LENGTH, NULL, cl_buf.base, cl_buf.len);"
    },
    {
        "line": 68,
        "fullcodeline": "if (token == H2O_TOKEN_COOKIE) {"
    },
    {
        "line": 96,
        "fullcodeline": "h2o_add_header_by_str(&req->pool, headers, h->name->base, h->name->len, 0, h->orig_name, h->value.base,"
    },
    {
        "line": 37,
        "fullcodeline": "*props->connection_header = h2o_iovec_init(H2O_STRLIT(\"close\"));"
    },
    {
        "line": 69,
        "fullcodeline": "h2o_vector_reserve(&req->pool, &cookie_values, cookie_values.size + 1);"
    },
    {
        "line": 70,
        "fullcodeline": "cookie_values.entries[cookie_values.size++] = h->value;"
    },
    {
        "line": 52,
        "fullcodeline": "} else if (props->chunked != NULL) {"
    },
    {
        "line": 53,
        "fullcodeline": "*props->chunked = 1;"
    },
    {
        "line": 54,
        "fullcodeline": "h2o_add_header(&req->pool, headers, H2O_TOKEN_TRANSFER_ENCODING, NULL, H2O_STRLIT(\"chunked\"));"
    },
    {
        "line": 72,
        "fullcodeline": "} else if (token == H2O_TOKEN_VIA) {"
    },
    {
        "line": 76,
        "fullcodeline": "via_buf = build_request_merge_headers(&req->pool, via_buf, h->value, ',');"
    },
    {
        "line": 73,
        "fullcodeline": "if (!emit_via_header) {"
    },
    {
        "line": 78,
        "fullcodeline": "} else if (token == H2O_TOKEN_X_FORWARDED_FOR) {"
    },
    {
        "line": 82,
        "fullcodeline": "xff_buf = build_request_merge_headers(&req->pool, xff_buf, h->value, ',');"
    },
    {
        "line": 79,
        "fullcodeline": "if (!emit_x_forwarded_headers) {"
    },
    {
        "line": 84,
        "fullcodeline": "} else if (token == H2O_TOKEN_EARLY_DATA) {"
    },
    {
        "line": 85,
        "fullcodeline": "found_early_data = 1;"
    }
]