[
    {
        "line": 2,
        "fullcodeline": "uint8_t in[64], k[16];"
    },
    {
        "line": 4,
        "fullcodeline": "int fails = 0;"
    },
    {
        "line": 22,
        "fullcodeline": "h1 = siphash((uint8_t*)\"hello world\",11,(uint8_t*)\"1234567812345678\");"
    },
    {
        "line": 23,
        "fullcodeline": "h2 = siphash_nocase((uint8_t*)\"hello world\",11,(uint8_t*)\"1234567812345678\");"
    },
    {
        "line": 26,
        "fullcodeline": "h1 = siphash((uint8_t*)\"hello world\",11,(uint8_t*)\"1234567812345678\");"
    },
    {
        "line": 27,
        "fullcodeline": "h2 = siphash_nocase((uint8_t*)\"HELLO world\",11,(uint8_t*)\"1234567812345678\");"
    },
    {
        "line": 30,
        "fullcodeline": "h1 = siphash((uint8_t*)\"HELLO world\",11,(uint8_t*)\"1234567812345678\");"
    },
    {
        "line": 31,
        "fullcodeline": "h2 = siphash_nocase((uint8_t*)\"HELLO world\",11,(uint8_t*)\"1234567812345678\");"
    },
    {
        "line": 6,
        "fullcodeline": "for (i = 0; i < 16; ++i)"
    },
    {
        "line": 7,
        "fullcodeline": "k[i] = i;"
    },
    {
        "line": 9,
        "fullcodeline": "for (i = 0; i < 64; ++i) {"
    },
    {
        "line": 28,
        "fullcodeline": "if (h1 != h2) fails++;"
    },
    {
        "line": 32,
        "fullcodeline": "if (h1 == h2) fails++;"
    },
    {
        "line": 34,
        "fullcodeline": "if (!fails) return 0;"
    },
    {
        "line": 10,
        "fullcodeline": "in[i] = i;"
    },
    {
        "line": 11,
        "fullcodeline": "uint64_t hash = siphash(in, i, k);"
    },
    {
        "line": 12,
        "fullcodeline": "const uint8_t *v = NULL;"
    },
    {
        "line": 13,
        "fullcodeline": "v = (uint8_t *)vectors_sip64;"
    },
    {
        "line": 24,
        "fullcodeline": "if (h1 != h2) fails++;"
    },
    {
        "line": 14,
        "fullcodeline": "if (memcmp(&hash, v + (i * 8), 8)) {"
    },
    {
        "line": 16,
        "fullcodeline": "fails++;"
    }
]