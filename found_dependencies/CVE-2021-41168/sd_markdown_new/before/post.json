[
    {
        "line": 8,
        "fullcodeline": "struct sd_markdown *md = NULL;"
    },
    {
        "line": 10,
        "fullcodeline": "assert(max_nesting > 0 && max_table_cols > 0 && callbacks);"
    },
    {
        "line": 16,
        "fullcodeline": "memcpy(&md->cb, callbacks, sizeof(struct sd_callbacks));"
    },
    {
        "line": 18,
        "fullcodeline": "stack_init(&md->work_bufs[BUFFER_BLOCK], 4);"
    },
    {
        "line": 19,
        "fullcodeline": "stack_init(&md->work_bufs[BUFFER_SPAN], 8);"
    },
    {
        "line": 21,
        "fullcodeline": "memset(md->active_char, 0x0, 256);"
    },
    {
        "line": 40,
        "fullcodeline": "md->active_char['<'] = MD_CHAR_LANGLE;"
    },
    {
        "line": 41,
        "fullcodeline": "md->active_char['\\\\'] = MD_CHAR_ESCAPE;"
    },
    {
        "line": 42,
        "fullcodeline": "md->active_char['&'] = MD_CHAR_ENTITITY;"
    },
    {
        "line": 56,
        "fullcodeline": "md->ext_flags = extensions;"
    },
    {
        "line": 57,
        "fullcodeline": "md->opaque = opaque;"
    },
    {
        "line": 58,
        "fullcodeline": "md->max_nesting = max_nesting;"
    },
    {
        "line": 59,
        "fullcodeline": "md->max_table_cols = max_table_cols;"
    },
    {
        "line": 60,
        "fullcodeline": "md->in_link_body = 0;"
    },
    {
        "line": 13,
        "fullcodeline": "if (!md)"
    },
    {
        "line": 23,
        "fullcodeline": "if (md->cb.emphasis || md->cb.double_emphasis || md->cb.triple_emphasis) {"
    },
    {
        "line": 44,
        "fullcodeline": "if (extensions & MKDEXT_AUTOLINK) {"
    },
    {
        "line": 52,
        "fullcodeline": "if (extensions & MKDEXT_SUPERSCRIPT)"
    },
    {
        "line": 24,
        "fullcodeline": "md->active_char['*'] = MD_CHAR_EMPHASIS;"
    },
    {
        "line": 25,
        "fullcodeline": "md->active_char['_'] = MD_CHAR_EMPHASIS;"
    },
    {
        "line": 26,
        "fullcodeline": "md->active_char['>'] = MD_CHAR_EMPHASIS;"
    },
    {
        "line": 32,
        "fullcodeline": "md->active_char['`'] = MD_CHAR_CODESPAN;"
    },
    {
        "line": 35,
        "fullcodeline": "md->active_char['\\n'] = MD_CHAR_LINEBREAK;"
    },
    {
        "line": 38,
        "fullcodeline": "md->active_char['['] = MD_CHAR_LINK;"
    },
    {
        "line": 47,
        "fullcodeline": "md->active_char[':'] = MD_CHAR_AUTOLINK_URL;"
    },
    {
        "line": 48,
        "fullcodeline": "md->active_char['w'] = MD_CHAR_AUTOLINK_WWW;"
    },
    {
        "line": 49,
        "fullcodeline": "md->active_char['/'] = MD_CHAR_AUTOLINK_SUBREDDIT_OR_USERNAME;"
    },
    {
        "line": 53,
        "fullcodeline": "md->active_char['^'] = MD_CHAR_SUPERSCRIPT;"
    },
    {
        "line": 27,
        "fullcodeline": "if (extensions & MKDEXT_STRIKETHROUGH)"
    },
    {
        "line": 45,
        "fullcodeline": "if (!(extensions & MKDEXT_NO_EMAIL_AUTOLINK))"
    },
    {
        "line": 28,
        "fullcodeline": "md->active_char['~'] = MD_CHAR_EMPHASIS;"
    },
    {
        "line": 46,
        "fullcodeline": "md->active_char['@'] = MD_CHAR_AUTOLINK_EMAIL;"
    }
]