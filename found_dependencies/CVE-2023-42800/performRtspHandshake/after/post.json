[
    {
        "line": 4,
        "fullcodeline": "LC_ASSERT(RtspPortNumber != 0);"
    },
    {
        "line": 7,
        "fullcodeline": "useEnet = (AppVersionQuad[0] >= 5) && (AppVersionQuad[0] <= 7) && (AppVersionQuad[2] < 404);"
    },
    {
        "line": 8,
        "fullcodeline": "currentSeqNumber = 1;"
    },
    {
        "line": 9,
        "fullcodeline": "hasSessionId = false;"
    },
    {
        "line": 10,
        "fullcodeline": "controlStreamId = APP_VERSION_AT_LEAST(7, 1, 431) ? \"streamid=control/13/0\" : \"streamid=control/1/0\";"
    },
    {
        "line": 11,
        "fullcodeline": "AudioEncryptionEnabled = false;"
    },
    {
        "line": 22,
        "fullcodeline": "LC_ASSERT(StreamConfig.streamingRemotely != STREAM_CFG_AUTO);"
    },
    {
        "line": 433,
        "fullcodeline": "ret = 0;"
    },
    {
        "line": 23,
        "fullcodeline": "if (OriginalVideoBitrate >= HIGH_AUDIO_BITRATE_THRESHOLD &&"
    },
    {
        "line": 105,
        "fullcodeline": "int error = -1;"
    },
    {
        "line": 120,
        "fullcodeline": "freeMessage(&response);"
    },
    {
        "line": 125,
        "fullcodeline": "int error = -1;"
    },
    {
        "line": 184,
        "fullcodeline": "ReferenceFrameInvalidationSupported = strstr(response.payload, \"x-nv-video[0].refPicInvalidation\") != NULL;"
    },
    {
        "line": 195,
        "fullcodeline": "ret = parseOpusConfigurations(&response);"
    },
    {
        "line": 200,
        "fullcodeline": "freeMessage(&response);"
    },
    {
        "line": 207,
        "fullcodeline": "int error = -1;"
    },
    {
        "line": 208,
        "fullcodeline": "char* strtokCtx = NULL;"
    },
    {
        "line": 226,
        "fullcodeline": "LC_ASSERT(AudioPortNumber == 0);"
    },
    {
        "line": 238,
        "fullcodeline": "memset(&AudioPingPayload, 0, sizeof(AudioPingPayload));"
    },
    {
        "line": 239,
        "fullcodeline": "pingPayload = getOptionContent(response.options, \"X-SS-Ping-Payload\");"
    },
    {
        "line": 247,
        "fullcodeline": "notifyAudioPortNegotiationComplete();"
    },
    {
        "line": 249,
        "fullcodeline": "sessionId = getOptionContent(response.options, \"Session\");"
    },
    {
        "line": 262,
        "fullcodeline": "sessionIdString = strdup(strtok_r(sessionId, \";\", &strtokCtx));"
    },
    {
        "line": 269,
        "fullcodeline": "hasSessionId = true;"
    },
    {
        "line": 271,
        "fullcodeline": "freeMessage(&response);"
    },
    {
        "line": 276,
        "fullcodeline": "int error = -1;"
    },
    {
        "line": 295,
        "fullcodeline": "memset(&VideoPingPayload, 0, sizeof(VideoPingPayload));"
    },
    {
        "line": 296,
        "fullcodeline": "pingPayload = getOptionContent(response.options, \"X-SS-Ping-Payload\");"
    },
    {
        "line": 302,
        "fullcodeline": "LC_ASSERT(VideoPortNumber == 0);"
    },
    {
        "line": 313,
        "fullcodeline": "freeMessage(&response);"
    },
    {
        "line": 316,
        "fullcodeline": "if (AppVersionQuad[0] >= 5) {"
    },
    {
        "line": 352,
        "fullcodeline": "int error = -1;"
    },
    {
        "line": 367,
        "fullcodeline": "freeMessage(&response);"
    },
    {
        "line": 371,
        "fullcodeline": "if (APP_VERSION_AT_LEAST(7, 1, 431)) {"
    },
    {
        "line": 449,
        "fullcodeline": "if (sessionIdString != NULL) {"
    },
    {
        "line": 25,
        "fullcodeline": "(StreamConfig.streamingRemotely != STREAM_CFG_REMOTE || CHANNEL_COUNT_FROM_AUDIO_CONFIGURATION(StreamConfig.audioConfiguration) <= 2)) {"
    },
    {
        "line": 48,
        "fullcodeline": "rtspClientVersion = 10;"
    },
    {
        "line": 51,
        "fullcodeline": "rtspClientVersion = 11;"
    },
    {
        "line": 54,
        "fullcodeline": "rtspClientVersion = 12;"
    },
    {
        "line": 58,
        "fullcodeline": "rtspClientVersion = 13;"
    },
    {
        "line": 62,
        "fullcodeline": "rtspClientVersion = 14;"
    },
    {
        "line": 71,
        "fullcodeline": "enet_address_set_address(&address, (struct sockaddr *)&RemoteAddr, RemoteAddrLen);"
    },
    {
        "line": 72,
        "fullcodeline": "enet_address_set_port(&address, RtspPortNumber);"
    },
    {
        "line": 75,
        "fullcodeline": "client = enet_host_create(RemoteAddr.ss_family, NULL, 1, 1, 0, 0);"
    },
    {
        "line": 81,
        "fullcodeline": "peer = enet_host_connect(client, &address, 1, 0);"
    },
    {
        "line": 100,
        "fullcodeline": "enet_host_flush(client);"
    },
    {
        "line": 107,
        "fullcodeline": "if (!requestOptions(&response, &error)) {"
    },
    {
        "line": 113,
        "fullcodeline": "if (response.message.response.statusCode != 200) {"
    },
    {
        "line": 127,
        "fullcodeline": "if (!requestDescribe(&response, &error)) {"
    },
    {
        "line": 133,
        "fullcodeline": "if (response.message.response.statusCode != 200) {"
    },
    {
        "line": 140,
        "fullcodeline": "if ((StreamConfig.supportedVideoFormats & VIDEO_FORMAT_MASK_AV1) && strstr(response.payload, \"AV1/90000\")) {"
    },
    {
        "line": 185,
        "fullcodeline": "if (!ReferenceFrameInvalidationSupported) {"
    },
    {
        "line": 190,
        "fullcodeline": "if (!parseSdpAttributeToUInt(response.payload, \"x-ss-general.featureFlags\", &SunshineFeatureFlags)) {"
    },
    {
        "line": 196,
        "fullcodeline": "if (ret != 0) {"
    },
    {
        "line": 210,
        "fullcodeline": "if (!setupStream(&response,"
    },
    {
        "line": 218,
        "fullcodeline": "if (response.message.response.statusCode != 200) {"
    },
    {
        "line": 227,
        "fullcodeline": "if (!parseServerPortFromTransport(&response, &AudioPortNumber)) {"
    },
    {
        "line": 240,
        "fullcodeline": "if (pingPayload != NULL && strlen(pingPayload) == sizeof(AudioPingPayload.payload)) {"
    },
    {
        "line": 251,
        "fullcodeline": "if (sessionId == NULL) {"
    },
    {
        "line": 263,
        "fullcodeline": "if (sessionIdString == NULL) {"
    },
    {
        "line": 279,
        "fullcodeline": "if (!setupStream(&response,"
    },
    {
        "line": 287,
        "fullcodeline": "if (response.message.response.statusCode != 200) {"
    },
    {
        "line": 297,
        "fullcodeline": "if (pingPayload != NULL && strlen(pingPayload) == sizeof(VideoPingPayload.payload)) {"
    },
    {
        "line": 303,
        "fullcodeline": "if (!parseServerPortFromTransport(&response, &VideoPortNumber)) {"
    },
    {
        "line": 318,
        "fullcodeline": "int error = -1;"
    },
    {
        "line": 336,
        "fullcodeline": "LC_ASSERT(ControlPortNumber == 0);"
    },
    {
        "line": 347,
        "fullcodeline": "freeMessage(&response);"
    },
    {
        "line": 354,
        "fullcodeline": "if (!sendVideoAnnounce(&response, &error)) {"
    },
    {
        "line": 360,
        "fullcodeline": "if (response.message.response.statusCode != 200) {"
    },
    {
        "line": 373,
        "fullcodeline": "int error = -1;"
    },
    {
        "line": 388,
        "fullcodeline": "freeMessage(&response);"
    },
    {
        "line": 450,
        "fullcodeline": "free(sessionIdString);"
    },
    {
        "line": 451,
        "fullcodeline": "sessionIdString = NULL;"
    },
    {
        "line": 24,
        "fullcodeline": "(AudioCallbacks.capabilities & CAPABILITY_SLOW_OPUS_DECODER) == 0 &&"
    },
    {
        "line": 27,
        "fullcodeline": "if (serverInfo->rtspSessionUrl != NULL && parseUrlAddrFromRtspUrlString(serverInfo->rtspSessionUrl, urlAddr, sizeof(urlAddr))) {"
    },
    {
        "line": 42,
        "fullcodeline": "PltSafeStrcpy(urlAddr, sizeof(urlAddr), \"0.0.0.0\");"
    },
    {
        "line": 43,
        "fullcodeline": "snprintf(rtspTargetUrl, sizeof(rtspTargetUrl), \"rtsp%s://%s:%u\", useEnet ? \"ru\" : \"\", urlAddr, RtspPortNumber);"
    },
    {
        "line": 76,
        "fullcodeline": "if (client == NULL) {"
    },
    {
        "line": 82,
        "fullcodeline": "if (peer == NULL) {"
    },
    {
        "line": 89,
        "fullcodeline": "if (serviceEnetHost(client, &event, RTSP_CONNECT_TIMEOUT_SEC * 1000) <= 0 ||"
    },
    {
        "line": 108,
        "fullcodeline": "Limelog(\"RTSP OPTIONS request failed: %d\\n\", error);"
    },
    {
        "line": 109,
        "fullcodeline": "ret = error;"
    },
    {
        "line": 114,
        "fullcodeline": "Limelog(\"RTSP OPTIONS request failed: %d\\n\","
    },
    {
        "line": 116,
        "fullcodeline": "ret = response.message.response.statusCode;"
    },
    {
        "line": 128,
        "fullcodeline": "Limelog(\"RTSP DESCRIBE request failed: %d\\n\", error);"
    },
    {
        "line": 129,
        "fullcodeline": "ret = error;"
    },
    {
        "line": 134,
        "fullcodeline": "Limelog(\"RTSP DESCRIBE request failed: %d\\n\","
    },
    {
        "line": 136,
        "fullcodeline": "ret = response.message.response.statusCode;"
    },
    {
        "line": 186,
        "fullcodeline": "Limelog(\"Reference frame invalidation is not supported by this host\\n\");"
    },
    {
        "line": 191,
        "fullcodeline": "SunshineFeatureFlags = 0;"
    },
    {
        "line": 213,
        "fullcodeline": "Limelog(\"RTSP SETUP streamid=audio request failed: %d\\n\", error);"
    },
    {
        "line": 214,
        "fullcodeline": "ret = error;"
    },
    {
        "line": 219,
        "fullcodeline": "Limelog(\"RTSP SETUP streamid=audio request failed: %d\\n\","
    },
    {
        "line": 221,
        "fullcodeline": "ret = response.message.response.statusCode;"
    },
    {
        "line": 229,
        "fullcodeline": "AudioPortNumber = 48000;"
    },
    {
        "line": 231,
        "fullcodeline": "Limelog(\"Audio port: %u (RTSP parsing failed)\\n\", AudioPortNumber);"
    },
    {
        "line": 241,
        "fullcodeline": "memcpy(AudioPingPayload.payload, pingPayload, sizeof(AudioPingPayload.payload));"
    },
    {
        "line": 252,
        "fullcodeline": "Limelog(\"RTSP SETUP streamid=audio is missing session attribute\\n\");"
    },
    {
        "line": 253,
        "fullcodeline": "ret = -1;"
    },
    {
        "line": 264,
        "fullcodeline": "Limelog(\"Failed to duplicate session ID string\\n\");"
    },
    {
        "line": 265,
        "fullcodeline": "ret = -1;"
    },
    {
        "line": 282,
        "fullcodeline": "Limelog(\"RTSP SETUP streamid=video request failed: %d\\n\", error);"
    },
    {
        "line": 283,
        "fullcodeline": "ret = error;"
    },
    {
        "line": 288,
        "fullcodeline": "Limelog(\"RTSP SETUP streamid=video request failed: %d\\n\","
    },
    {
        "line": 290,
        "fullcodeline": "ret = response.message.response.statusCode;"
    },
    {
        "line": 298,
        "fullcodeline": "memcpy(VideoPingPayload.payload, pingPayload, sizeof(VideoPingPayload.payload));"
    },
    {
        "line": 305,
        "fullcodeline": "VideoPortNumber = 47998;"
    },
    {
        "line": 307,
        "fullcodeline": "Limelog(\"Video port: %u (RTSP parsing failed)\\n\", VideoPortNumber);"
    },
    {
        "line": 320,
        "fullcodeline": "if (!setupStream(&response,"
    },
    {
        "line": 328,
        "fullcodeline": "if (response.message.response.statusCode != 200) {"
    },
    {
        "line": 337,
        "fullcodeline": "if (!parseServerPortFromTransport(&response, &ControlPortNumber)) {"
    },
    {
        "line": 355,
        "fullcodeline": "Limelog(\"RTSP ANNOUNCE request failed: %d\\n\", error);"
    },
    {
        "line": 356,
        "fullcodeline": "ret = error;"
    },
    {
        "line": 361,
        "fullcodeline": "Limelog(\"RTSP ANNOUNCE request failed: %d\\n\","
    },
    {
        "line": 363,
        "fullcodeline": "ret = response.message.response.statusCode;"
    },
    {
        "line": 375,
        "fullcodeline": "if (!playStream(&response, \"/\", &error)) {"
    },
    {
        "line": 381,
        "fullcodeline": "if (response.message.response.statusCode != 200) {"
    },
    {
        "line": 438,
        "fullcodeline": "if (peer != NULL) {"
    },
    {
        "line": 443,
        "fullcodeline": "if (client != NULL) {"
    },
    {
        "line": 28,
        "fullcodeline": "PltSafeStrcpy(rtspTargetUrl, sizeof(rtspTargetUrl), serverInfo->rtspSessionUrl);"
    },
    {
        "line": 29,
        "fullcodeline": "rtspTargetUrl[sizeof(rtspTargetUrl) - 1] = '\\0';"
    },
    {
        "line": 83,
        "fullcodeline": "enet_host_destroy(client);"
    },
    {
        "line": 84,
        "fullcodeline": "client = NULL;"
    },
    {
        "line": 90,
        "fullcodeline": "event.type != ENET_EVENT_TYPE_CONNECT) {"
    },
    {
        "line": 91,
        "fullcodeline": "Limelog(\"RTSP: Failed to connect to UDP port %u\\n\", RtspPortNumber);"
    },
    {
        "line": 92,
        "fullcodeline": "enet_peer_reset(peer);"
    },
    {
        "line": 93,
        "fullcodeline": "peer = NULL;"
    },
    {
        "line": 94,
        "fullcodeline": "enet_host_destroy(client);"
    },
    {
        "line": 95,
        "fullcodeline": "client = NULL;"
    },
    {
        "line": 141,
        "fullcodeline": "if ((serverInfo->serverCodecModeSupport & SCM_AV1_MAIN10) && (StreamConfig.supportedVideoFormats & VIDEO_FORMAT_AV1_MAIN10)) {"
    },
    {
        "line": 211,
        "fullcodeline": "AppVersionQuad[0] >= 5 ? \"streamid=audio/0/0\" : \"streamid=audio\","
    },
    {
        "line": 234,
        "fullcodeline": "Limelog(\"Audio port: %u\\n\", AudioPortNumber);"
    },
    {
        "line": 280,
        "fullcodeline": "AppVersionQuad[0] >= 5 ? \"streamid=video/0/0\" : \"streamid=video\","
    },
    {
        "line": 310,
        "fullcodeline": "Limelog(\"Video port: %u\\n\", VideoPortNumber);"
    },
    {
        "line": 323,
        "fullcodeline": "Limelog(\"RTSP SETUP streamid=control request failed: %d\\n\", error);"
    },
    {
        "line": 324,
        "fullcodeline": "ret = error;"
    },
    {
        "line": 329,
        "fullcodeline": "Limelog(\"RTSP SETUP streamid=control request failed: %d\\n\","
    },
    {
        "line": 331,
        "fullcodeline": "ret = response.message.response.statusCode;"
    },
    {
        "line": 339,
        "fullcodeline": "ControlPortNumber = 47999;"
    },
    {
        "line": 341,
        "fullcodeline": "Limelog(\"Control port: %u (RTSP parsing failed)\\n\", ControlPortNumber);"
    },
    {
        "line": 376,
        "fullcodeline": "Limelog(\"RTSP PLAY request failed: %d\\n\", error);"
    },
    {
        "line": 377,
        "fullcodeline": "ret = error;"
    },
    {
        "line": 382,
        "fullcodeline": "Limelog(\"RTSP PLAY failed: %d\\n\","
    },
    {
        "line": 384,
        "fullcodeline": "ret = response.message.response.statusCode;"
    },
    {
        "line": 393,
        "fullcodeline": "int error = -1;"
    },
    {
        "line": 408,
        "fullcodeline": "freeMessage(&response);"
    },
    {
        "line": 413,
        "fullcodeline": "int error = -1;"
    },
    {
        "line": 428,
        "fullcodeline": "freeMessage(&response);"
    },
    {
        "line": 439,
        "fullcodeline": "enet_peer_disconnect_now(peer, 0);"
    },
    {
        "line": 440,
        "fullcodeline": "peer = NULL;"
    },
    {
        "line": 444,
        "fullcodeline": "enet_host_destroy(client);"
    },
    {
        "line": 445,
        "fullcodeline": "client = NULL;"
    },
    {
        "line": 37,
        "fullcodeline": "addrToUrlSafeString(&RemoteAddr, urlAddr, sizeof(urlAddr));"
    },
    {
        "line": 38,
        "fullcodeline": "snprintf(rtspTargetUrl, sizeof(rtspTargetUrl), \"rtsp%s://%s:%u\", useEnet ? \"ru\" : \"\", urlAddr, RtspPortNumber);"
    },
    {
        "line": 77,
        "fullcodeline": "return -1;"
    },
    {
        "line": 85,
        "fullcodeline": "return -1;"
    },
    {
        "line": 96,
        "fullcodeline": "return -1;"
    },
    {
        "line": 142,
        "fullcodeline": "NegotiatedVideoFormat = VIDEO_FORMAT_AV1_MAIN10;"
    },
    {
        "line": 154,
        "fullcodeline": "else if ((StreamConfig.supportedVideoFormats & VIDEO_FORMAT_MASK_H265) && strstr(response.payload, \"sprop-parameter-sets=AAAAAU\")) {"
    },
    {
        "line": 344,
        "fullcodeline": "Limelog(\"Control port: %u\\n\", ControlPortNumber);"
    },
    {
        "line": 395,
        "fullcodeline": "if (!playStream(&response, \"streamid=video\", &error)) {"
    },
    {
        "line": 401,
        "fullcodeline": "if (response.message.response.statusCode != 200) {"
    },
    {
        "line": 415,
        "fullcodeline": "if (!playStream(&response, \"streamid=audio\", &error)) {"
    },
    {
        "line": 421,
        "fullcodeline": "if (response.message.response.statusCode != 200) {"
    },
    {
        "line": 145,
        "fullcodeline": "NegotiatedVideoFormat = VIDEO_FORMAT_AV1_MAIN8;"
    },
    {
        "line": 396,
        "fullcodeline": "Limelog(\"RTSP PLAY streamid=video request failed: %d\\n\", error);"
    },
    {
        "line": 397,
        "fullcodeline": "ret = error;"
    },
    {
        "line": 402,
        "fullcodeline": "Limelog(\"RTSP PLAY streamid=video failed: %d\\n\","
    },
    {
        "line": 404,
        "fullcodeline": "ret = response.message.response.statusCode;"
    },
    {
        "line": 416,
        "fullcodeline": "Limelog(\"RTSP PLAY streamid=audio request failed: %d\\n\", error);"
    },
    {
        "line": 417,
        "fullcodeline": "ret = error;"
    },
    {
        "line": 422,
        "fullcodeline": "Limelog(\"RTSP PLAY streamid=audio failed: %d\\n\","
    },
    {
        "line": 424,
        "fullcodeline": "ret = response.message.response.statusCode;"
    },
    {
        "line": 148,
        "fullcodeline": "if (StreamConfig.av1BitratePercentageMultiplier != 0) {"
    },
    {
        "line": 161,
        "fullcodeline": "if ((serverInfo->serverCodecModeSupport & SCM_HEVC_MAIN10) && (StreamConfig.supportedVideoFormats & VIDEO_FORMAT_H265_MAIN10)) {"
    },
    {
        "line": 175,
        "fullcodeline": "NegotiatedVideoFormat = VIDEO_FORMAT_H264;"
    },
    {
        "line": 149,
        "fullcodeline": "StreamConfig.bitrate *= StreamConfig.av1BitratePercentageMultiplier;"
    },
    {
        "line": 150,
        "fullcodeline": "StreamConfig.bitrate /= 100;"
    },
    {
        "line": 162,
        "fullcodeline": "NegotiatedVideoFormat = VIDEO_FORMAT_H265_MAIN10;"
    },
    {
        "line": 178,
        "fullcodeline": "if (StreamConfig.width > 4096 || StreamConfig.height > 4096) {"
    },
    {
        "line": 165,
        "fullcodeline": "NegotiatedVideoFormat = VIDEO_FORMAT_H265;"
    },
    {
        "line": 179,
        "fullcodeline": "Limelog(\"WARNING: Host PC doesn't support HEVC. Streaming at resolutions above 4K using H.264 will likely fail!\\n\");"
    },
    {
        "line": 168,
        "fullcodeline": "if (StreamConfig.hevcBitratePercentageMultiplier != 0) {"
    },
    {
        "line": 169,
        "fullcodeline": "StreamConfig.bitrate *= StreamConfig.hevcBitratePercentageMultiplier;"
    },
    {
        "line": 170,
        "fullcodeline": "StreamConfig.bitrate /= 100;"
    }
]