[
    {
        "line": 10,
        "fullcodeline": "*card_ret = NULL;"
    },
    {
        "line": 14,
        "fullcodeline": "card = kzalloc(sizeof(*card) + extra_size, GFP_KERNEL);"
    },
    {
        "line": 21,
        "fullcodeline": "err = 0;"
    },
    {
        "line": 22,
        "fullcodeline": "mutex_lock(&snd_card_mutex);"
    },
    {
        "line": 41,
        "fullcodeline": "set_bit(idx, snd_cards_lock);\t\t/* lock it */"
    },
    {
        "line": 44,
        "fullcodeline": "mutex_unlock(&snd_card_mutex);"
    },
    {
        "line": 45,
        "fullcodeline": "card->dev = parent;"
    },
    {
        "line": 46,
        "fullcodeline": "card->number = idx;"
    },
    {
        "line": 47,
        "fullcodeline": "card->module = module;"
    },
    {
        "line": 48,
        "fullcodeline": "INIT_LIST_HEAD(&card->devices);"
    },
    {
        "line": 49,
        "fullcodeline": "init_rwsem(&card->controls_rwsem);"
    },
    {
        "line": 50,
        "fullcodeline": "rwlock_init(&card->ctl_files_rwlock);"
    },
    {
        "line": 51,
        "fullcodeline": "mutex_init(&card->user_ctl_lock);"
    },
    {
        "line": 52,
        "fullcodeline": "INIT_LIST_HEAD(&card->controls);"
    },
    {
        "line": 53,
        "fullcodeline": "INIT_LIST_HEAD(&card->ctl_files);"
    },
    {
        "line": 54,
        "fullcodeline": "spin_lock_init(&card->files_lock);"
    },
    {
        "line": 55,
        "fullcodeline": "INIT_LIST_HEAD(&card->files_list);"
    },
    {
        "line": 61,
        "fullcodeline": "device_initialize(&card->card_dev);"
    },
    {
        "line": 62,
        "fullcodeline": "card->card_dev.parent = parent;"
    },
    {
        "line": 63,
        "fullcodeline": "card->card_dev.class = sound_class;"
    },
    {
        "line": 64,
        "fullcodeline": "card->card_dev.release = release_card_device;"
    },
    {
        "line": 65,
        "fullcodeline": "card->card_dev.groups = card_dev_attr_groups;"
    },
    {
        "line": 66,
        "fullcodeline": "err = kobject_set_name(&card->card_dev.kobj, \"card%d\", idx);"
    },
    {
        "line": 72,
        "fullcodeline": "err = snd_ctl_create(card);"
    },
    {
        "line": 77,
        "fullcodeline": "err = snd_info_card_create(card);"
    },
    {
        "line": 82,
        "fullcodeline": "*card_ret = card;"
    },
    {
        "line": 86,
        "fullcodeline": "snd_device_free_all(card);"
    },
    {
        "line": 88,
        "fullcodeline": "put_device(&card->card_dev);"
    },
    {
        "line": 8,
        "fullcodeline": "if (snd_BUG_ON(!card_ret))"
    },
    {
        "line": 12,
        "fullcodeline": "if (extra_size < 0)"
    },
    {
        "line": 15,
        "fullcodeline": "if (!card)"
    },
    {
        "line": 17,
        "fullcodeline": "if (extra_size > 0)"
    },
    {
        "line": 23,
        "fullcodeline": "if (idx < 0) /* first check the matching module-name slot */"
    },
    {
        "line": 25,
        "fullcodeline": "if (idx < 0) /* if not matched, assign an empty slot */"
    },
    {
        "line": 27,
        "fullcodeline": "if (idx < 0)"
    },
    {
        "line": 34,
        "fullcodeline": "if (err < 0) {"
    },
    {
        "line": 42,
        "fullcodeline": "if (idx >= snd_ecards_limit)"
    },
    {
        "line": 67,
        "fullcodeline": "if (err < 0)"
    },
    {
        "line": 73,
        "fullcodeline": "if (err < 0) {"
    },
    {
        "line": 78,
        "fullcodeline": "if (err < 0) {"
    },
    {
        "line": 13,
        "fullcodeline": "extra_size = 0;"
    },
    {
        "line": 18,
        "fullcodeline": "card->private_data = (char *)card + sizeof(struct snd_card);"
    },
    {
        "line": 20,
        "fullcodeline": "strlcpy(card->id, xid, sizeof(card->id));"
    },
    {
        "line": 24,
        "fullcodeline": "idx = get_slot_from_bitmask(idx, module_slot_match, module);"
    },
    {
        "line": 26,
        "fullcodeline": "idx = get_slot_from_bitmask(idx, check_empty_slot, module);"
    },
    {
        "line": 28,
        "fullcodeline": "err = -ENODEV;"
    },
    {
        "line": 35,
        "fullcodeline": "mutex_unlock(&snd_card_mutex);"
    },
    {
        "line": 36,
        "fullcodeline": "dev_err(parent, \"cannot find the slot for index %d (range 0-%i), error: %d\\n\","
    },
    {
        "line": 38,
        "fullcodeline": "kfree(card);"
    },
    {
        "line": 43,
        "fullcodeline": "snd_ecards_limit = idx + 1; /* increase the limit */"
    },
    {
        "line": 74,
        "fullcodeline": "dev_err(parent, \"unable to register control minors\\n\");"
    },
    {
        "line": 79,
        "fullcodeline": "dev_err(parent, \"unable to create card info\\n\");"
    },
    {
        "line": 9,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 16,
        "fullcodeline": "return -ENOMEM;"
    },
    {
        "line": 37,
        "fullcodeline": "idx, snd_ecards_limit - 1, err);"
    },
    {
        "line": 29,
        "fullcodeline": "else if (idx < snd_ecards_limit) {"
    },
    {
        "line": 30,
        "fullcodeline": "if (test_bit(idx, snd_cards_lock))"
    },
    {
        "line": 31,
        "fullcodeline": "err = -EBUSY;\t/* invalid */"
    },
    {
        "line": 32,
        "fullcodeline": "} else if (idx >= SNDRV_CARDS)"
    },
    {
        "line": 33,
        "fullcodeline": "err = -ENODEV;"
    }
]