[
    {
        "line": 5,
        "fullcodeline": "struct ksmbd_file *fp = NULL;"
    },
    {
        "line": 10,
        "fullcodeline": "bool writethrough = false;"
    },
    {
        "line": 11,
        "fullcodeline": "int err = 0;"
    },
    {
        "line": 13,
        "fullcodeline": "WORK_BUFFERS(work, req, rsp);"
    },
    {
        "line": 45,
        "fullcodeline": "fp = ksmbd_lookup_fd_slow(work, req->VolatileFileId, req->PersistentFileId);"
    },
    {
        "line": 57,
        "fullcodeline": "offset = le64_to_cpu(req->Offset);"
    },
    {
        "line": 58,
        "fullcodeline": "length = le32_to_cpu(req->Length);"
    },
    {
        "line": 112,
        "fullcodeline": "rsp->StructureSize = cpu_to_le16(17);"
    },
    {
        "line": 113,
        "fullcodeline": "rsp->DataOffset = 0;"
    },
    {
        "line": 114,
        "fullcodeline": "rsp->Reserved = 0;"
    },
    {
        "line": 115,
        "fullcodeline": "rsp->DataLength = cpu_to_le32(nbytes);"
    },
    {
        "line": 116,
        "fullcodeline": "rsp->DataRemaining = 0;"
    },
    {
        "line": 117,
        "fullcodeline": "rsp->Reserved2 = 0;"
    },
    {
        "line": 118,
        "fullcodeline": "inc_rfc1001_len(work->response_buf, 16);"
    },
    {
        "line": 119,
        "fullcodeline": "ksmbd_fd_put(work, fp);"
    },
    {
        "line": 138,
        "fullcodeline": "smb2_set_err_rsp(work);"
    },
    {
        "line": 139,
        "fullcodeline": "ksmbd_fd_put(work, fp);"
    },
    {
        "line": 15,
        "fullcodeline": "if (test_share_config_flag(work->tcon->share_conf, KSMBD_SHARE_FLAG_PIPE)) {"
    },
    {
        "line": 20,
        "fullcodeline": "if (req->Channel == SMB2_CHANNEL_RDMA_V1 ||"
    },
    {
        "line": 39,
        "fullcodeline": "if (!test_tree_conn_flag(work->tcon, KSMBD_TREE_CONN_FLAG_WRITABLE)) {"
    },
    {
        "line": 46,
        "fullcodeline": "if (!fp) {"
    },
    {
        "line": 51,
        "fullcodeline": "if (!(fp->daccess & (FILE_WRITE_DATA_LE | FILE_READ_ATTRIBUTES_LE))) {"
    },
    {
        "line": 60,
        "fullcodeline": "if (length > work->conn->vals->max_write_size) {"
    },
    {
        "line": 67,
        "fullcodeline": "if (le32_to_cpu(req->Flags) & SMB2_WRITEFLAG_WRITE_THROUGH)"
    },
    {
        "line": 70,
        "fullcodeline": "if (req->Channel != SMB2_CHANNEL_RDMA_V1 &&"
    },
    {
        "line": 123,
        "fullcodeline": "if (err == -EAGAIN)"
    },
    {
        "line": 16,
        "fullcodeline": "ksmbd_debug(SMB, \"IPC pipe write request\\n\");"
    },
    {
        "line": 21,
        "fullcodeline": "req->Channel == SMB2_CHANNEL_RDMA_V1_INVALIDATE) {"
    },
    {
        "line": 22,
        "fullcodeline": "unsigned int ch_offset = le16_to_cpu(req->WriteChannelInfoOffset);"
    },
    {
        "line": 29,
        "fullcodeline": "err = smb2_set_remote_key_for_rdma(work,"
    },
    {
        "line": 40,
        "fullcodeline": "ksmbd_debug(SMB, \"User does not have write permission\\n\");"
    },
    {
        "line": 41,
        "fullcodeline": "err = -EACCES;"
    },
    {
        "line": 47,
        "fullcodeline": "err = -ENOENT;"
    },
    {
        "line": 52,
        "fullcodeline": "pr_err(\"Not permitted to write : 0x%x\\n\", fp->daccess);"
    },
    {
        "line": 53,
        "fullcodeline": "err = -EACCES;"
    },
    {
        "line": 61,
        "fullcodeline": "ksmbd_debug(SMB, \"limiting write size to max size(%u)\\n\","
    },
    {
        "line": 63,
        "fullcodeline": "err = -EINVAL;"
    },
    {
        "line": 68,
        "fullcodeline": "writethrough = true;"
    },
    {
        "line": 71,
        "fullcodeline": "req->Channel != SMB2_CHANNEL_RDMA_V1_INVALIDATE) {"
    },
    {
        "line": 89,
        "fullcodeline": "ksmbd_debug(SMB, \"flags %u\\n\", le32_to_cpu(req->Flags));"
    },
    {
        "line": 93,
        "fullcodeline": "ksmbd_debug(SMB, \"filename %pd, offset %lld, len %zu\\n\","
    },
    {
        "line": 95,
        "fullcodeline": "err = ksmbd_vfs_write(work, fp, data_buf, length, &offset,"
    },
    {
        "line": 124,
        "fullcodeline": "rsp->hdr.Status = STATUS_FILE_LOCK_CONFLICT;"
    },
    {
        "line": 17,
        "fullcodeline": "return smb2_write_pipe(work);"
    },
    {
        "line": 90,
        "fullcodeline": "if (le32_to_cpu(req->Flags) & SMB2_WRITEFLAG_WRITE_THROUGH)"
    },
    {
        "line": 97,
        "fullcodeline": "if (err < 0)"
    },
    {
        "line": 103,
        "fullcodeline": "nbytes = smb2_write_rdma_channel(work, req, fp, offset,"
    },
    {
        "line": 26,
        "fullcodeline": "err = -EINVAL;"
    },
    {
        "line": 30,
        "fullcodeline": "(struct smb2_buffer_desc_v1 *)"
    },
    {
        "line": 91,
        "fullcodeline": "writethrough = true;"
    },
    {
        "line": 106,
        "fullcodeline": "if (nbytes < 0) {"
    },
    {
        "line": 125,
        "fullcodeline": "else if (err == -ENOSPC || err == -EFBIG)"
    },
    {
        "line": 31,
        "fullcodeline": "((char *)req + ch_offset),"
    },
    {
        "line": 85,
        "fullcodeline": "data_buf = (char *)(((char *)&req->hdr.ProtocolId) +"
    },
    {
        "line": 104,
        "fullcodeline": "le32_to_cpu(req->RemainingBytes),"
    },
    {
        "line": 107,
        "fullcodeline": "err = (int)nbytes;"
    },
    {
        "line": 126,
        "fullcodeline": "rsp->hdr.Status = STATUS_DISK_FULL;"
    },
    {
        "line": 76,
        "fullcodeline": "if ((u64)le16_to_cpu(req->DataOffset) + length >"
    },
    {
        "line": 77,
        "fullcodeline": "get_rfc1002_len(work->request_buf)) {"
    },
    {
        "line": 78,
        "fullcodeline": "pr_err(\"invalid write data offset %u, smb_len %u\\n\","
    },
    {
        "line": 81,
        "fullcodeline": "err = -EINVAL;"
    },
    {
        "line": 127,
        "fullcodeline": "else if (err == -ENOENT)"
    },
    {
        "line": 79,
        "fullcodeline": "le16_to_cpu(req->DataOffset),"
    },
    {
        "line": 80,
        "fullcodeline": "get_rfc1002_len(work->request_buf));"
    },
    {
        "line": 86,
        "fullcodeline": "le16_to_cpu(req->DataOffset));"
    },
    {
        "line": 128,
        "fullcodeline": "rsp->hdr.Status = STATUS_FILE_CLOSED;"
    },
    {
        "line": 129,
        "fullcodeline": "else if (err == -EACCES)"
    },
    {
        "line": 130,
        "fullcodeline": "rsp->hdr.Status = STATUS_ACCESS_DENIED;"
    },
    {
        "line": 131,
        "fullcodeline": "else if (err == -ESHARE)"
    },
    {
        "line": 132,
        "fullcodeline": "rsp->hdr.Status = STATUS_SHARING_VIOLATION;"
    },
    {
        "line": 133,
        "fullcodeline": "else if (err == -EINVAL)"
    },
    {
        "line": 134,
        "fullcodeline": "rsp->hdr.Status = STATUS_INVALID_PARAMETER;"
    },
    {
        "line": 136,
        "fullcodeline": "rsp->hdr.Status = STATUS_INVALID_HANDLE;"
    }
]