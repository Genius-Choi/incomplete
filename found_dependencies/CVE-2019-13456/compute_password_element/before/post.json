[
    {
        "line": 7,
        "fullcodeline": "BIGNUM *x_candidate = NULL, *rnd = NULL, *cofactor = NULL;"
    },
    {
        "line": 8,
        "fullcodeline": "HMAC_CTX *ctx = NULL;"
    },
    {
        "line": 9,
        "fullcodeline": "uint8_t pwe_digest[SHA256_DIGEST_LENGTH], *prfbuf = NULL, ctr;"
    },
    {
        "line": 10,
        "fullcodeline": "int nid, is_odd, primebitlen, primebytelen, ret = 0;"
    },
    {
        "line": 12,
        "fullcodeline": "ctx = HMAC_CTX_new();"
    },
    {
        "line": 44,
        "fullcodeline": "session->pwe = NULL;"
    },
    {
        "line": 45,
        "fullcodeline": "session->order = NULL;"
    },
    {
        "line": 46,
        "fullcodeline": "session->prime = NULL;"
    },
    {
        "line": 78,
        "fullcodeline": "primebitlen = BN_num_bits(session->prime);"
    },
    {
        "line": 79,
        "fullcodeline": "primebytelen = BN_num_bytes(session->prime);"
    },
    {
        "line": 84,
        "fullcodeline": "ctr = 0;"
    },
    {
        "line": 165,
        "fullcodeline": "session->group_num = grp_num;"
    },
    {
        "line": 172,
        "fullcodeline": "BN_clear_free(cofactor);"
    },
    {
        "line": 173,
        "fullcodeline": "BN_clear_free(x_candidate);"
    },
    {
        "line": 174,
        "fullcodeline": "BN_clear_free(rnd);"
    },
    {
        "line": 175,
        "fullcodeline": "talloc_free(prfbuf);"
    },
    {
        "line": 176,
        "fullcodeline": "HMAC_CTX_free(ctx);"
    },
    {
        "line": 13,
        "fullcodeline": "if (ctx == NULL) {"
    },
    {
        "line": 48,
        "fullcodeline": "if ((session->group = EC_GROUP_new_by_curve_name(nid)) == NULL) {"
    },
    {
        "line": 53,
        "fullcodeline": "if (((rnd = BN_new()) == NULL) ||"
    },
    {
        "line": 63,
        "fullcodeline": "if (!EC_GROUP_get_curve_GFp(session->group, session->prime, NULL, NULL, NULL)) {"
    },
    {
        "line": 68,
        "fullcodeline": "if (!EC_GROUP_get_order(session->group, session->order, NULL)) {"
    },
    {
        "line": 73,
        "fullcodeline": "if (!EC_GROUP_get_cofactor(session->group, cofactor, NULL)) {"
    },
    {
        "line": 80,
        "fullcodeline": "if ((prfbuf = talloc_zero_array(session, uint8_t, primebytelen)) == NULL) {"
    },
    {
        "line": 14,
        "fullcodeline": "DEBUG(\"failed allocating HMAC context\");"
    },
    {
        "line": 20,
        "fullcodeline": "nid = NID_X9_62_prime256v1;"
    },
    {
        "line": 24,
        "fullcodeline": "nid = NID_secp384r1;"
    },
    {
        "line": 28,
        "fullcodeline": "nid = NID_secp521r1;"
    },
    {
        "line": 32,
        "fullcodeline": "nid = NID_X9_62_prime192v1;"
    },
    {
        "line": 36,
        "fullcodeline": "nid = NID_secp224r1;"
    },
    {
        "line": 40,
        "fullcodeline": "DEBUG(\"unknown group %d\", grp_num);"
    },
    {
        "line": 49,
        "fullcodeline": "DEBUG(\"unable to create EC_GROUP\");"
    },
    {
        "line": 58,
        "fullcodeline": "((x_candidate = BN_new()) == NULL)) {"
    },
    {
        "line": 59,
        "fullcodeline": "DEBUG(\"unable to create bignums\");"
    },
    {
        "line": 64,
        "fullcodeline": "DEBUG(\"unable to get prime for GFp curve\");"
    },
    {
        "line": 69,
        "fullcodeline": "DEBUG(\"unable to get order for curve\");"
    },
    {
        "line": 74,
        "fullcodeline": "DEBUG(\"unable to get cofactor for curve\");"
    },
    {
        "line": 81,
        "fullcodeline": "DEBUG(\"unable to alloc space for prf buffer\");"
    },
    {
        "line": 90,
        "fullcodeline": "ctr++;"
    },
    {
        "line": 97,
        "fullcodeline": "H_Init(ctx);"
    },
    {
        "line": 98,
        "fullcodeline": "H_Update(ctx, (uint8_t *)token, sizeof(*token));"
    },
    {
        "line": 99,
        "fullcodeline": "H_Update(ctx, (uint8_t const *)id_peer, id_peer_len);"
    },
    {
        "line": 100,
        "fullcodeline": "H_Update(ctx, (uint8_t const *)id_server, id_server_len);"
    },
    {
        "line": 101,
        "fullcodeline": "H_Update(ctx, (uint8_t const *)password, password_len);"
    },
    {
        "line": 102,
        "fullcodeline": "H_Update(ctx, (uint8_t *)&ctr, sizeof(ctr));"
    },
    {
        "line": 103,
        "fullcodeline": "H_Final(ctx, pwe_digest);"
    },
    {
        "line": 105,
        "fullcodeline": "BN_bin2bn(pwe_digest, SHA256_DIGEST_LENGTH, rnd);"
    },
    {
        "line": 112,
        "fullcodeline": "BN_bin2bn(prfbuf, primebytelen, x_candidate);"
    },
    {
        "line": 127,
        "fullcodeline": "is_odd = BN_is_odd(rnd) ? 1 : 0;"
    },
    {
        "line": 168,
        "fullcodeline": "ret = -1;"
    },
    {
        "line": 57,
        "fullcodeline": "((session->prime = BN_new()) == NULL) ||"
    },
    {
        "line": 86,
        "fullcodeline": "if (ctr > 10) {"
    },
    {
        "line": 106,
        "fullcodeline": "if (eap_pwd_kdf(pwe_digest, SHA256_DIGEST_LENGTH, \"EAP-pwd Hunting And Pecking\","
    },
    {
        "line": 120,
        "fullcodeline": "if (primebitlen % 8) BN_rshift(x_candidate, x_candidate, (8 - (primebitlen % 8)));"
    },
    {
        "line": 121,
        "fullcodeline": "if (BN_ucmp(x_candidate, session->prime) >= 0) continue;"
    },
    {
        "line": 133,
        "fullcodeline": "if (!EC_POINT_set_compressed_coordinates_GFp(session->group, session->pwe, x_candidate, is_odd, NULL)) {"
    },
    {
        "line": 143,
        "fullcodeline": "if (!EC_POINT_is_on_curve(session->group, session->pwe, NULL)) {"
    },
    {
        "line": 148,
        "fullcodeline": "if (BN_cmp(cofactor, BN_value_one())) {"
    },
    {
        "line": 56,
        "fullcodeline": "((session->order = BN_new()) == NULL) ||"
    },
    {
        "line": 87,
        "fullcodeline": "DEBUG(\"unable to find random point on curve for group %d, something's fishy\", grp_num);"
    },
    {
        "line": 108,
        "fullcodeline": "DEBUG(\"key derivation function failed\");"
    },
    {
        "line": 144,
        "fullcodeline": "DEBUG(\"EAP-pwd: point is not on curve\");"
    },
    {
        "line": 55,
        "fullcodeline": "((session->pwe = EC_POINT_new(session->group)) == NULL) ||"
    },
    {
        "line": 107,
        "fullcodeline": "strlen(\"EAP-pwd Hunting And Pecking\"), prfbuf, primebitlen) != 0) {"
    },
    {
        "line": 150,
        "fullcodeline": "if (!EC_POINT_mul(session->group, session->pwe, NULL, session->pwe,"
    },
    {
        "line": 156,
        "fullcodeline": "if (EC_POINT_is_at_infinity(session->group, session->pwe)) {"
    },
    {
        "line": 54,
        "fullcodeline": "((cofactor = BN_new()) == NULL) ||"
    },
    {
        "line": 152,
        "fullcodeline": "DEBUG(\"EAP-pwd: cannot multiply generator by order\");"
    },
    {
        "line": 157,
        "fullcodeline": "DEBUG(\"EAP-pwd: point is at infinity\");"
    }
]