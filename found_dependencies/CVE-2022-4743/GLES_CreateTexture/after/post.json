[
    {
        "line": 3,
        "fullcodeline": "GLES_RenderData *renderdata = (GLES_RenderData *) renderer->driverdata;"
    },
    {
        "line": 11,
        "fullcodeline": "GLES_ActivateRenderer(renderer);"
    },
    {
        "line": 23,
        "fullcodeline": "data = (GLES_TextureData *) SDL_calloc(1, sizeof(*data));"
    },
    {
        "line": 49,
        "fullcodeline": "renderdata->glGetError();"
    },
    {
        "line": 50,
        "fullcodeline": "renderdata->glEnable(GL_TEXTURE_2D);"
    },
    {
        "line": 51,
        "fullcodeline": "renderdata->glGenTextures(1, &data->texture);"
    },
    {
        "line": 52,
        "fullcodeline": "result = renderdata->glGetError();"
    },
    {
        "line": 61,
        "fullcodeline": "data->type = GL_TEXTURE_2D;"
    },
    {
        "line": 63,
        "fullcodeline": "texture_w = SDL_powerof2(texture->w);"
    },
    {
        "line": 64,
        "fullcodeline": "texture_h = SDL_powerof2(texture->h);"
    },
    {
        "line": 65,
        "fullcodeline": "data->texw = (GLfloat) texture->w / texture_w;"
    },
    {
        "line": 66,
        "fullcodeline": "data->texh = (GLfloat) texture->h / texture_h;"
    },
    {
        "line": 68,
        "fullcodeline": "data->format = format;"
    },
    {
        "line": 69,
        "fullcodeline": "data->formattype = type;"
    },
    {
        "line": 70,
        "fullcodeline": "scaleMode = (texture->scaleMode == SDL_ScaleModeNearest) ? GL_NEAREST : GL_LINEAR;"
    },
    {
        "line": 71,
        "fullcodeline": "renderdata->glBindTexture(data->type, data->texture);"
    },
    {
        "line": 72,
        "fullcodeline": "renderdata->glTexParameteri(data->type, GL_TEXTURE_MIN_FILTER, scaleMode);"
    },
    {
        "line": 73,
        "fullcodeline": "renderdata->glTexParameteri(data->type, GL_TEXTURE_MAG_FILTER, scaleMode);"
    },
    {
        "line": 74,
        "fullcodeline": "renderdata->glTexParameteri(data->type, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);"
    },
    {
        "line": 75,
        "fullcodeline": "renderdata->glTexParameteri(data->type, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);"
    },
    {
        "line": 77,
        "fullcodeline": "renderdata->glTexImage2D(data->type, 0, internalFormat, texture_w,"
    },
    {
        "line": 79,
        "fullcodeline": "renderdata->glDisable(GL_TEXTURE_2D);"
    },
    {
        "line": 80,
        "fullcodeline": "renderdata->drawstate.texture = texture;"
    },
    {
        "line": 81,
        "fullcodeline": "renderdata->drawstate.texturing = SDL_FALSE;"
    },
    {
        "line": 83,
        "fullcodeline": "result = renderdata->glGetError();"
    },
    {
        "line": 92,
        "fullcodeline": "texture->driverdata = data;"
    },
    {
        "line": 24,
        "fullcodeline": "if (!data) {"
    },
    {
        "line": 28,
        "fullcodeline": "if (texture->access == SDL_TEXTUREACCESS_STREAMING) {"
    },
    {
        "line": 38,
        "fullcodeline": "if (texture->access == SDL_TEXTUREACCESS_TARGET) {"
    },
    {
        "line": 53,
        "fullcodeline": "if (result != GL_NO_ERROR) {"
    },
    {
        "line": 84,
        "fullcodeline": "if (result != GL_NO_ERROR) {"
    },
    {
        "line": 15,
        "fullcodeline": "internalFormat = GL_RGBA;"
    },
    {
        "line": 16,
        "fullcodeline": "format = GL_RGBA;"
    },
    {
        "line": 17,
        "fullcodeline": "type = GL_UNSIGNED_BYTE;"
    },
    {
        "line": 29,
        "fullcodeline": "data->pitch = texture->w * SDL_BYTESPERPIXEL(texture->format);"
    },
    {
        "line": 30,
        "fullcodeline": "data->pixels = SDL_calloc(1, texture->h * data->pitch);"
    },
    {
        "line": 43,
        "fullcodeline": "data->fbo = GLES_GetFBO(renderer->driverdata, texture->w, texture->h);"
    },
    {
        "line": 57,
        "fullcodeline": "SDL_free(data);"
    },
    {
        "line": 88,
        "fullcodeline": "SDL_free(data);"
    },
    {
        "line": 20,
        "fullcodeline": "return SDL_SetError(\"Texture format not supported\");"
    },
    {
        "line": 25,
        "fullcodeline": "return SDL_OutOfMemory();"
    },
    {
        "line": 31,
        "fullcodeline": "if (!data->pixels) {"
    },
    {
        "line": 39,
        "fullcodeline": "if (!renderdata->GL_OES_framebuffer_object_supported) {"
    },
    {
        "line": 45,
        "fullcodeline": "data->fbo = NULL;"
    },
    {
        "line": 54,
        "fullcodeline": "if (texture->access == SDL_TEXTUREACCESS_STREAMING) {"
    },
    {
        "line": 58,
        "fullcodeline": "return GLES_SetError(\"glGenTextures()\", result);"
    },
    {
        "line": 85,
        "fullcodeline": "if (texture->access == SDL_TEXTUREACCESS_STREAMING) {"
    },
    {
        "line": 89,
        "fullcodeline": "return GLES_SetError(\"glTexImage2D()\", result);"
    },
    {
        "line": 32,
        "fullcodeline": "SDL_free(data);"
    },
    {
        "line": 40,
        "fullcodeline": "SDL_free(data);"
    },
    {
        "line": 55,
        "fullcodeline": "SDL_free(data->pixels);"
    },
    {
        "line": 86,
        "fullcodeline": "SDL_free(data->pixels);"
    },
    {
        "line": 33,
        "fullcodeline": "return SDL_OutOfMemory();"
    },
    {
        "line": 41,
        "fullcodeline": "return SDL_SetError(\"GL_OES_framebuffer_object not supported\");"
    }
]