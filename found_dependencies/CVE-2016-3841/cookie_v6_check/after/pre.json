[
    {
        "line": 6,
        "fullcodeline": "struct ipv6_pinfo *np = inet6_sk(sk);"
    },
    {
        "line": 7,
        "fullcodeline": "struct tcp_sock *tp = tcp_sk(sk);"
    },
    {
        "line": 8,
        "fullcodeline": "const struct tcphdr *th = tcp_hdr(skb);"
    },
    {
        "line": 9,
        "fullcodeline": "__u32 cookie = ntohl(th->ack_seq) - 1;"
    },
    {
        "line": 10,
        "fullcodeline": "struct sock *ret = sk;"
    },
    {
        "line": 22,
        "fullcodeline": "mss = __cookie_v6_check(ipv6_hdr(skb), th, cookie);"
    },
    {
        "line": 28,
        "fullcodeline": "NET_INC_STATS_BH(sock_net(sk), LINUX_MIB_SYNCOOKIESRECV);"
    },
    {
        "line": 31,
        "fullcodeline": "memset(&tcp_opt, 0, sizeof(tcp_opt));"
    },
    {
        "line": 32,
        "fullcodeline": "tcp_parse_options(skb, &tcp_opt, 0, NULL);"
    },
    {
        "line": 37,
        "fullcodeline": "ret = NULL;"
    },
    {
        "line": 38,
        "fullcodeline": "req = inet_reqsk_alloc(&tcp6_request_sock_ops, sk, false);"
    },
    {
        "line": 42,
        "fullcodeline": "ireq = inet_rsk(req);"
    },
    {
        "line": 43,
        "fullcodeline": "treq = tcp_rsk(req);"
    },
    {
        "line": 44,
        "fullcodeline": "treq->tfo_listener = false;"
    },
    {
        "line": 49,
        "fullcodeline": "req->mss = mss;"
    },
    {
        "line": 50,
        "fullcodeline": "ireq->ir_rmt_port = th->source;"
    },
    {
        "line": 51,
        "fullcodeline": "ireq->ir_num = ntohs(th->dest);"
    },
    {
        "line": 52,
        "fullcodeline": "ireq->ir_v6_rmt_addr = ipv6_hdr(skb)->saddr;"
    },
    {
        "line": 53,
        "fullcodeline": "ireq->ir_v6_loc_addr = ipv6_hdr(skb)->daddr;"
    },
    {
        "line": 61,
        "fullcodeline": "ireq->ir_iif = sk->sk_bound_dev_if;"
    },
    {
        "line": 67,
        "fullcodeline": "ireq->ir_mark = inet_request_mark(sk, skb);"
    },
    {
        "line": 69,
        "fullcodeline": "req->num_retrans = 0;"
    },
    {
        "line": 70,
        "fullcodeline": "ireq->snd_wscale\t= tcp_opt.snd_wscale;"
    },
    {
        "line": 71,
        "fullcodeline": "ireq->sack_ok\t\t= tcp_opt.sack_ok;"
    },
    {
        "line": 72,
        "fullcodeline": "ireq->wscale_ok\t\t= tcp_opt.wscale_ok;"
    },
    {
        "line": 73,
        "fullcodeline": "ireq->tstamp_ok\t\t= tcp_opt.saw_tstamp;"
    },
    {
        "line": 74,
        "fullcodeline": "req->ts_recent\t\t= tcp_opt.saw_tstamp ? tcp_opt.rcv_tsval : 0;"
    },
    {
        "line": 75,
        "fullcodeline": "treq->snt_synack.v64\t= 0;"
    },
    {
        "line": 76,
        "fullcodeline": "treq->rcv_isn = ntohl(th->seq) - 1;"
    },
    {
        "line": 77,
        "fullcodeline": "treq->snt_isn = cookie;"
    },
    {
        "line": 103,
        "fullcodeline": "req->rsk_window_clamp = tp->window_clamp ? :dst_metric(dst, RTAX_WINDOW);"
    },
    {
        "line": 104,
        "fullcodeline": "tcp_select_initial_window(tcp_full_space(sk), req->mss,"
    },
    {
        "line": 109,
        "fullcodeline": "ireq->rcv_wscale = rcv_wscale;"
    },
    {
        "line": 110,
        "fullcodeline": "ireq->ecn_ok = cookie_ecn_ok(&tcp_opt, sock_net(sk), dst);"
    },
    {
        "line": 112,
        "fullcodeline": "ret = tcp_get_cookie_sock(sk, skb, req, dst);"
    },
    {
        "line": 16,
        "fullcodeline": "if (!sysctl_tcp_syncookies || !th->ack || th->rst)"
    },
    {
        "line": 19,
        "fullcodeline": "if (tcp_synq_no_recent_overflow(sk))"
    },
    {
        "line": 23,
        "fullcodeline": "if (mss == 0) {"
    },
    {
        "line": 34,
        "fullcodeline": "if (!cookie_timestamp_decode(&tcp_opt))"
    },
    {
        "line": 39,
        "fullcodeline": "if (!req)"
    },
    {
        "line": 46,
        "fullcodeline": "if (security_inet_conn_request(sk, skb, req))"
    },
    {
        "line": 54,
        "fullcodeline": "if (ipv6_opt_accepted(sk, skb, &TCP_SKB_CB(skb)->header.h6) ||"
    },
    {
        "line": 63,
        "fullcodeline": "if (!sk->sk_bound_dev_if &&"
    },
    {
        "line": 87,
        "fullcodeline": "memset(&fl6, 0, sizeof(fl6));"
    },
    {
        "line": 88,
        "fullcodeline": "fl6.flowi6_proto = IPPROTO_TCP;"
    },
    {
        "line": 89,
        "fullcodeline": "fl6.daddr = ireq->ir_v6_rmt_addr;"
    },
    {
        "line": 90,
        "fullcodeline": "final_p = fl6_update_dst(&fl6, rcu_dereference(np->opt), &final);"
    },
    {
        "line": 91,
        "fullcodeline": "fl6.saddr = ireq->ir_v6_loc_addr;"
    },
    {
        "line": 92,
        "fullcodeline": "fl6.flowi6_oif = sk->sk_bound_dev_if;"
    },
    {
        "line": 93,
        "fullcodeline": "fl6.flowi6_mark = ireq->ir_mark;"
    },
    {
        "line": 94,
        "fullcodeline": "fl6.fl6_dport = ireq->ir_rmt_port;"
    },
    {
        "line": 95,
        "fullcodeline": "fl6.fl6_sport = inet_sk(sk)->inet_sport;"
    },
    {
        "line": 96,
        "fullcodeline": "security_req_classify_flow(req, flowi6_to_flowi(&fl6));"
    },
    {
        "line": 98,
        "fullcodeline": "dst = ip6_dst_lookup_flow(sk, &fl6, final_p);"
    },
    {
        "line": 107,
        "fullcodeline": "dst_metric(dst, RTAX_INITRWND));"
    },
    {
        "line": 24,
        "fullcodeline": "NET_INC_STATS_BH(sock_net(sk), LINUX_MIB_SYNCOOKIESFAILED);"
    },
    {
        "line": 57,
        "fullcodeline": "atomic_inc(&skb->users);"
    },
    {
        "line": 58,
        "fullcodeline": "ireq->pktopts = skb;"
    },
    {
        "line": 64,
        "fullcodeline": "ipv6_addr_type(&ireq->ir_v6_rmt_addr) & IPV6_ADDR_LINKLOCAL)"
    },
    {
        "line": 65,
        "fullcodeline": "ireq->ir_iif = tcp_v6_iif(skb);"
    },
    {
        "line": 99,
        "fullcodeline": "if (IS_ERR(dst))"
    }
]