[
    {
        "line": 4,
        "fullcodeline": "struct inet_sock *inet = inet_sk(sk);"
    },
    {
        "line": 5,
        "fullcodeline": "struct ipv6_pinfo *np = inet6_sk(sk);"
    },
    {
        "line": 9,
        "fullcodeline": "memset(fl6, 0, sizeof(*fl6));"
    },
    {
        "line": 10,
        "fullcodeline": "fl6->flowi6_proto = sk->sk_protocol;"
    },
    {
        "line": 11,
        "fullcodeline": "fl6->daddr = sk->sk_v6_daddr;"
    },
    {
        "line": 12,
        "fullcodeline": "fl6->saddr = np->saddr;"
    },
    {
        "line": 13,
        "fullcodeline": "fl6->flowlabel = np->flow_label;"
    },
    {
        "line": 14,
        "fullcodeline": "IP6_ECN_flow_xmit(sk, fl6->flowlabel);"
    },
    {
        "line": 15,
        "fullcodeline": "fl6->flowi6_oif = sk->sk_bound_dev_if;"
    },
    {
        "line": 16,
        "fullcodeline": "fl6->flowi6_mark = sk->sk_mark;"
    },
    {
        "line": 17,
        "fullcodeline": "fl6->fl6_sport = inet->inet_sport;"
    },
    {
        "line": 18,
        "fullcodeline": "fl6->fl6_dport = inet->inet_dport;"
    },
    {
        "line": 19,
        "fullcodeline": "security_sk_classify_flow(sk, flowi6_to_flowi(fl6));"
    },
    {
        "line": 21,
        "fullcodeline": "final_p = fl6_update_dst(fl6, np->opt, &final);"
    },
    {
        "line": 23,
        "fullcodeline": "dst = __inet6_csk_dst_check(sk, np->dst_cookie);"
    },
    {
        "line": 24,
        "fullcodeline": "if (!dst) {"
    },
    {
        "line": 25,
        "fullcodeline": "dst = ip6_dst_lookup_flow(sk, fl6, final_p);"
    },
    {
        "line": 27,
        "fullcodeline": "if (!IS_ERR(dst))"
    },
    {
        "line": 28,
        "fullcodeline": "__inet6_csk_dst_store(sk, dst, NULL, NULL);"
    }
]