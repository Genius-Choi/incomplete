[
    {
        "line": 3,
        "fullcodeline": "struct ipv6_pinfo *np = inet6_sk(sk);"
    },
    {
        "line": 6,
        "fullcodeline": "dst = __sk_dst_check(sk, np->dst_cookie);"
    },
    {
        "line": 8,
        "fullcodeline": "if (!dst) {"
    },
    {
        "line": 9,
        "fullcodeline": "struct inet_sock *inet = inet_sk(sk);"
    },
    {
        "line": 13,
        "fullcodeline": "memset(&fl6, 0, sizeof(fl6));"
    },
    {
        "line": 14,
        "fullcodeline": "fl6.flowi6_proto = sk->sk_protocol;"
    },
    {
        "line": 15,
        "fullcodeline": "fl6.daddr = sk->sk_v6_daddr;"
    },
    {
        "line": 16,
        "fullcodeline": "fl6.saddr = np->saddr;"
    },
    {
        "line": 17,
        "fullcodeline": "fl6.flowlabel = np->flow_label;"
    },
    {
        "line": 18,
        "fullcodeline": "fl6.flowi6_oif = sk->sk_bound_dev_if;"
    },
    {
        "line": 19,
        "fullcodeline": "fl6.flowi6_mark = sk->sk_mark;"
    },
    {
        "line": 20,
        "fullcodeline": "fl6.fl6_dport = inet->inet_dport;"
    },
    {
        "line": 21,
        "fullcodeline": "fl6.fl6_sport = inet->inet_sport;"
    },
    {
        "line": 22,
        "fullcodeline": "security_sk_classify_flow(sk, flowi6_to_flowi(&fl6));"
    },
    {
        "line": 24,
        "fullcodeline": "final_p = fl6_update_dst(&fl6, np->opt, &final);"
    },
    {
        "line": 26,
        "fullcodeline": "dst = ip6_dst_lookup_flow(sk, &fl6, final_p);"
    },
    {
        "line": 33,
        "fullcodeline": "__ip6_dst_store(sk, dst, NULL, NULL);"
    },
    {
        "line": 27,
        "fullcodeline": "if (IS_ERR(dst)) {"
    },
    {
        "line": 28,
        "fullcodeline": "sk->sk_route_caps = 0;"
    },
    {
        "line": 29,
        "fullcodeline": "sk->sk_err_soft = -PTR_ERR(dst);"
    },
    {
        "line": 30,
        "fullcodeline": "return PTR_ERR(dst);"
    }
]