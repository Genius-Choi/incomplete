[
    {
        "line": 3,
        "fullcodeline": "struct sockaddr_in6\t*usin = (struct sockaddr_in6 *) uaddr;"
    },
    {
        "line": 4,
        "fullcodeline": "struct inet_sock\t*inet = inet_sk(sk);"
    },
    {
        "line": 5,
        "fullcodeline": "struct ipv6_pinfo\t*np = inet6_sk(sk);"
    },
    {
        "line": 9,
        "fullcodeline": "struct ip6_flowlabel\t*flowlabel = NULL;"
    },
    {
        "line": 27,
        "fullcodeline": "memset(&fl6, 0, sizeof(fl6));"
    },
    {
        "line": 37,
        "fullcodeline": "addr_type = ipv6_addr_type(&usin->sin6_addr);"
    },
    {
        "line": 105,
        "fullcodeline": "sk->sk_v6_daddr = *daddr;"
    },
    {
        "line": 108,
        "fullcodeline": "inet->inet_dport = usin->sin6_port;"
    },
    {
        "line": 115,
        "fullcodeline": "fl6.flowi6_proto = sk->sk_protocol;"
    },
    {
        "line": 116,
        "fullcodeline": "fl6.daddr = sk->sk_v6_daddr;"
    },
    {
        "line": 117,
        "fullcodeline": "fl6.saddr = np->saddr;"
    },
    {
        "line": 118,
        "fullcodeline": "fl6.flowi6_oif = sk->sk_bound_dev_if;"
    },
    {
        "line": 119,
        "fullcodeline": "fl6.flowi6_mark = sk->sk_mark;"
    },
    {
        "line": 120,
        "fullcodeline": "fl6.fl6_dport = inet->inet_dport;"
    },
    {
        "line": 121,
        "fullcodeline": "fl6.fl6_sport = inet->inet_sport;"
    },
    {
        "line": 126,
        "fullcodeline": "security_sk_classify_flow(sk, flowi6_to_flowi(&fl6));"
    },
    {
        "line": 128,
        "fullcodeline": "opt = flowlabel ? flowlabel->opt : np->opt;"
    },
    {
        "line": 129,
        "fullcodeline": "final_p = fl6_update_dst(&fl6, opt, &final);"
    },
    {
        "line": 131,
        "fullcodeline": "dst = ip6_dst_lookup_flow(sk, &fl6, final_p);"
    },
    {
        "line": 132,
        "fullcodeline": "err = 0;"
    },
    {
        "line": 150,
        "fullcodeline": "ip6_dst_store(sk, dst,"
    },
    {
        "line": 159,
        "fullcodeline": "sk->sk_state = TCP_ESTABLISHED;"
    },
    {
        "line": 14,
        "fullcodeline": "if (usin->sin6_family == AF_INET) {"
    },
    {
        "line": 21,
        "fullcodeline": "if (addr_len < SIN6_LEN_RFC2133)"
    },
    {
        "line": 24,
        "fullcodeline": "if (usin->sin6_family != AF_INET6)"
    },
    {
        "line": 39,
        "fullcodeline": "if (addr_type == IPV6_ADDR_ANY) {"
    },
    {
        "line": 48,
        "fullcodeline": "if (addr_type == IPV6_ADDR_MAPPED) {"
    },
    {
        "line": 84,
        "fullcodeline": "if (__ipv6_addr_needs_scope_id(addr_type)) {"
    },
    {
        "line": 133,
        "fullcodeline": "if (IS_ERR(dst)) {"
    },
    {
        "line": 17,
        "fullcodeline": "err = __ip4_datagram_connect(sk, uaddr, addr_len);"
    },
    {
        "line": 29,
        "fullcodeline": "fl6.flowlabel = usin->sin6_flowinfo&IPV6_FLOWINFO_MASK;"
    },
    {
        "line": 55,
        "fullcodeline": "sin.sin_family = AF_INET;"
    },
    {
        "line": 57,
        "fullcodeline": "sin.sin_port = usin->sin6_port;"
    },
    {
        "line": 59,
        "fullcodeline": "err = __ip4_datagram_connect(sk,"
    },
    {
        "line": 123,
        "fullcodeline": "if (!fl6.flowi6_oif && (addr_type&IPV6_ADDR_MULTICAST))"
    },
    {
        "line": 124,
        "fullcodeline": "fl6.flowi6_oif = np->mcast_oif;"
    },
    {
        "line": 134,
        "fullcodeline": "err = PTR_ERR(dst);"
    },
    {
        "line": 144,
        "fullcodeline": "sk->sk_v6_rcv_saddr = fl6.saddr;"
    },
    {
        "line": 145,
        "fullcodeline": "inet->inet_rcv_saddr = LOOPBACK4_IPV6;"
    },
    {
        "line": 151,
        "fullcodeline": "ipv6_addr_equal(&fl6.daddr, &sk->sk_v6_daddr) ?"
    },
    {
        "line": 15,
        "fullcodeline": "if (__ipv6_only_sock(sk))"
    },
    {
        "line": 22,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 25,
        "fullcodeline": "return -EAFNOSUPPORT;"
    },
    {
        "line": 30,
        "fullcodeline": "if (fl6.flowlabel&IPV6_FLOWLABEL_MASK) {"
    },
    {
        "line": 51,
        "fullcodeline": "if (__ipv6_only_sock(sk)) {"
    },
    {
        "line": 85,
        "fullcodeline": "if (addr_len >= sizeof(struct sockaddr_in6) &&"
    },
    {
        "line": 99,
        "fullcodeline": "if (!sk->sk_bound_dev_if) {"
    },
    {
        "line": 31,
        "fullcodeline": "flowlabel = fl6_sock_lookup(sk, fl6.flowlabel);"
    },
    {
        "line": 52,
        "fullcodeline": "err = -ENETUNREACH;"
    },
    {
        "line": 69,
        "fullcodeline": "if (ipv6_addr_any(&np->saddr) ||"
    },
    {
        "line": 70,
        "fullcodeline": "ipv6_mapped_addr_any(&np->saddr))"
    },
    {
        "line": 73,
        "fullcodeline": "if (ipv6_addr_any(&sk->sk_v6_rcv_saddr) ||"
    },
    {
        "line": 74,
        "fullcodeline": "ipv6_mapped_addr_any(&sk->sk_v6_rcv_saddr)) {"
    },
    {
        "line": 92,
        "fullcodeline": "sk->sk_bound_dev_if = usin->sin6_scope_id;"
    },
    {
        "line": 95,
        "fullcodeline": "if (!sk->sk_bound_dev_if && (addr_type & IPV6_ADDR_MULTICAST))"
    },
    {
        "line": 96,
        "fullcodeline": "sk->sk_bound_dev_if = np->mcast_oif;"
    },
    {
        "line": 100,
        "fullcodeline": "err = -EINVAL;"
    },
    {
        "line": 147,
        "fullcodeline": "sk->sk_prot->rehash(sk);"
    },
    {
        "line": 16,
        "fullcodeline": "return -EAFNOSUPPORT;"
    },
    {
        "line": 32,
        "fullcodeline": "if (!flowlabel)"
    },
    {
        "line": 88,
        "fullcodeline": "sk->sk_bound_dev_if != usin->sin6_scope_id) {"
    },
    {
        "line": 89,
        "fullcodeline": "err = -EINVAL;"
    },
    {
        "line": 33,
        "fullcodeline": "return -EINVAL;"
    }
]