[
    {
        "line": 6,
        "fullcodeline": "struct ipv6_pinfo *np = inet6_sk(sk);"
    },
    {
        "line": 7,
        "fullcodeline": "struct ipv6_txoptions *opt = NULL;"
    },
    {
        "line": 8,
        "fullcodeline": "struct ip6_flowlabel *flowlabel = NULL;"
    },
    {
        "line": 9,
        "fullcodeline": "struct dst_entry *dst = NULL;"
    },
    {
        "line": 11,
        "fullcodeline": "int addr_len = msg->msg_namelen;"
    },
    {
        "line": 12,
        "fullcodeline": "int hlimit = -1;"
    },
    {
        "line": 13,
        "fullcodeline": "int tclass = -1;"
    },
    {
        "line": 14,
        "fullcodeline": "int dontfrag = -1;"
    },
    {
        "line": 15,
        "fullcodeline": "int transhdrlen = 4; /* zero session-id */"
    },
    {
        "line": 16,
        "fullcodeline": "int ulen = len + transhdrlen;"
    },
    {
        "line": 32,
        "fullcodeline": "memset(&fl6, 0, sizeof(fl6));"
    },
    {
        "line": 34,
        "fullcodeline": "fl6.flowi6_mark = sk->sk_mark;"
    },
    {
        "line": 100,
        "fullcodeline": "opt = ipv6_fixup_options(&opt_space, opt);"
    },
    {
        "line": 102,
        "fullcodeline": "fl6.flowi6_proto = sk->sk_protocol;"
    },
    {
        "line": 110,
        "fullcodeline": "final_p = fl6_update_dst(&fl6, opt, &final);"
    },
    {
        "line": 117,
        "fullcodeline": "security_sk_classify_flow(sk, flowi6_to_flowi(&fl6));"
    },
    {
        "line": 119,
        "fullcodeline": "dst = ip6_dst_lookup_flow(sk, &fl6, final_p);"
    },
    {
        "line": 138,
        "fullcodeline": "lock_sock(sk);"
    },
    {
        "line": 139,
        "fullcodeline": "err = ip6_append_data(sk, ip_generic_getfrag, msg,"
    },
    {
        "line": 156,
        "fullcodeline": "dst_confirm(dst);"
    },
    {
        "line": 159,
        "fullcodeline": "err = 0;"
    },
    {
        "line": 22,
        "fullcodeline": "if (len > INT_MAX)"
    },
    {
        "line": 26,
        "fullcodeline": "if (msg->msg_flags & MSG_OOB)"
    },
    {
        "line": 73,
        "fullcodeline": "if (fl6.flowi6_oif == 0)"
    },
    {
        "line": 96,
        "fullcodeline": "if (opt == NULL)"
    },
    {
        "line": 120,
        "fullcodeline": "if (IS_ERR(dst)) {"
    },
    {
        "line": 125,
        "fullcodeline": "if (hlimit < 0)"
    },
    {
        "line": 128,
        "fullcodeline": "if (tclass < 0)"
    },
    {
        "line": 131,
        "fullcodeline": "if (dontfrag < 0)"
    },
    {
        "line": 134,
        "fullcodeline": "if (msg->msg_flags & MSG_CONFIRM)"
    },
    {
        "line": 153,
        "fullcodeline": "return err < 0 ? err : len;"
    },
    {
        "line": 157,
        "fullcodeline": "if (!(msg->msg_flags & MSG_PROBE) || len)"
    },
    {
        "line": 43,
        "fullcodeline": "daddr = &lsa->l2tp_addr;"
    },
    {
        "line": 74,
        "fullcodeline": "fl6.flowi6_oif = sk->sk_bound_dev_if;"
    },
    {
        "line": 77,
        "fullcodeline": "opt = &opt_space;"
    },
    {
        "line": 78,
        "fullcodeline": "memset(opt, 0, sizeof(struct ipv6_txoptions));"
    },
    {
        "line": 79,
        "fullcodeline": "opt->tot_len = sizeof(struct ipv6_txoptions);"
    },
    {
        "line": 81,
        "fullcodeline": "err = ip6_datagram_send_ctl(sock_net(sk), sk, msg, &fl6, opt,"
    },
    {
        "line": 97,
        "fullcodeline": "opt = np->opt;"
    },
    {
        "line": 99,
        "fullcodeline": "opt = fl6_merge_options(&opt_space, flowlabel, opt);"
    },
    {
        "line": 103,
        "fullcodeline": "if (!ipv6_addr_any(daddr))"
    },
    {
        "line": 104,
        "fullcodeline": "fl6.daddr = *daddr;"
    },
    {
        "line": 107,
        "fullcodeline": "if (ipv6_addr_any(&fl6.saddr) && !ipv6_addr_any(&np->saddr))"
    },
    {
        "line": 108,
        "fullcodeline": "fl6.saddr = np->saddr;"
    },
    {
        "line": 112,
        "fullcodeline": "if (!fl6.flowi6_oif && ipv6_addr_is_multicast(&fl6.daddr))"
    },
    {
        "line": 113,
        "fullcodeline": "fl6.flowi6_oif = np->mcast_oif;"
    },
    {
        "line": 121,
        "fullcodeline": "err = PTR_ERR(dst);"
    },
    {
        "line": 126,
        "fullcodeline": "hlimit = ip6_sk_dst_hoplimit(np, &fl6, dst);"
    },
    {
        "line": 129,
        "fullcodeline": "tclass = np->tclass;"
    },
    {
        "line": 132,
        "fullcodeline": "dontfrag = np->dontfrag;"
    },
    {
        "line": 144,
        "fullcodeline": "ip6_flush_pending_frames(sk);"
    },
    {
        "line": 23,
        "fullcodeline": "return -EMSGSIZE;"
    },
    {
        "line": 27,
        "fullcodeline": "return -EOPNOTSUPP;"
    },
    {
        "line": 37,
        "fullcodeline": "if (addr_len < SIN6_LEN_RFC2133)"
    },
    {
        "line": 69,
        "fullcodeline": "daddr = &sk->sk_v6_daddr;"
    },
    {
        "line": 70,
        "fullcodeline": "fl6.flowlabel = np->flow_label;"
    },
    {
        "line": 83,
        "fullcodeline": "if (err < 0) {"
    },
    {
        "line": 40,
        "fullcodeline": "if (lsa->l2tp_family && lsa->l2tp_family != AF_INET6)"
    },
    {
        "line": 45,
        "fullcodeline": "fl6.flowlabel = lsa->l2tp_flowinfo & IPV6_FLOWINFO_MASK;"
    },
    {
        "line": 57,
        "fullcodeline": "if (sk->sk_state == TCP_ESTABLISHED &&"
    },
    {
        "line": 58,
        "fullcodeline": "ipv6_addr_equal(daddr, &sk->sk_v6_daddr))"
    },
    {
        "line": 59,
        "fullcodeline": "daddr = &sk->sk_v6_daddr;"
    },
    {
        "line": 61,
        "fullcodeline": "if (addr_len >= sizeof(struct sockaddr_in6) &&"
    },
    {
        "line": 63,
        "fullcodeline": "ipv6_addr_type(daddr) & IPV6_ADDR_LINKLOCAL)"
    },
    {
        "line": 64,
        "fullcodeline": "fl6.flowi6_oif = lsa->l2tp_scope_id;"
    },
    {
        "line": 66,
        "fullcodeline": "if (sk->sk_state != TCP_ESTABLISHED)"
    },
    {
        "line": 87,
        "fullcodeline": "if ((fl6.flowlabel & IPV6_FLOWLABEL_MASK) && !flowlabel) {"
    },
    {
        "line": 88,
        "fullcodeline": "flowlabel = fl6_sock_lookup(sk, fl6.flowlabel);"
    },
    {
        "line": 92,
        "fullcodeline": "if (!(opt->opt_nflen|opt->opt_flen))"
    },
    {
        "line": 93,
        "fullcodeline": "opt = NULL;"
    },
    {
        "line": 114,
        "fullcodeline": "else if (!fl6.flowi6_oif)"
    },
    {
        "line": 38,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 41,
        "fullcodeline": "return -EAFNOSUPPORT;"
    },
    {
        "line": 46,
        "fullcodeline": "if (fl6.flowlabel&IPV6_FLOWLABEL_MASK) {"
    },
    {
        "line": 89,
        "fullcodeline": "if (flowlabel == NULL)"
    },
    {
        "line": 115,
        "fullcodeline": "fl6.flowi6_oif = np->ucast_oif;"
    },
    {
        "line": 145,
        "fullcodeline": "else if (!(msg->msg_flags & MSG_MORE))"
    },
    {
        "line": 146,
        "fullcodeline": "err = l2tp_ip6_push_pending_frames(sk);"
    },
    {
        "line": 47,
        "fullcodeline": "flowlabel = fl6_sock_lookup(sk, fl6.flowlabel);"
    },
    {
        "line": 67,
        "fullcodeline": "return -EDESTADDRREQ;"
    },
    {
        "line": 48,
        "fullcodeline": "if (flowlabel == NULL)"
    },
    {
        "line": 90,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 49,
        "fullcodeline": "return -EINVAL;"
    }
]