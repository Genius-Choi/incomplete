[
    {
        "line": 7,
        "fullcodeline": "check_docker_running()"
    },
    {
        "line": 8,
        "fullcodeline": "info(\"Starting node...\")"
    },
    {
        "line": 9,
        "fullcodeline": "info(\"Finding Docker daemon\")"
    },
    {
        "line": 10,
        "fullcodeline": "docker_client = docker.from_env()"
    },
    {
        "line": 11,
        "fullcodeline": "NodeContext.LOGGING_ENABLED = False"
    },
    {
        "line": 36,
        "fullcodeline": "check_config_name_allowed(ctx.name)"
    },
    {
        "line": 39,
        "fullcodeline": "running_nodes = docker_client.containers.list("
    },
    {
        "line": 43,
        "fullcodeline": "suffix = \"system\" if system_folders else \"user\""
    },
    {
        "line": 50,
        "fullcodeline": "info(\"Checking that data and log dirs exist\")"
    },
    {
        "line": 93,
        "fullcodeline": "info(f\"Pulling latest node image '{image}'\")"
    },
    {
        "line": 104,
        "fullcodeline": "info(\"Creating Docker data volume\")"
    },
    {
        "line": 106,
        "fullcodeline": "data_volume = docker_client.volumes.create(ctx.docker_volume_name)"
    },
    {
        "line": 107,
        "fullcodeline": "vpn_volume = docker_client.volumes.create(ctx.docker_vpn_volume_name)"
    },
    {
        "line": 108,
        "fullcodeline": "ssh_volume = docker_client.volumes.create(ctx.docker_ssh_volume_name)"
    },
    {
        "line": 109,
        "fullcodeline": "squid_volume = docker_client.volumes.create(ctx.docker_squid_volume_name)"
    },
    {
        "line": 111,
        "fullcodeline": "info(\"Creating file & folder mounts\")"
    },
    {
        "line": 113,
        "fullcodeline": "mounts = ["
    },
    {
        "line": 132,
        "fullcodeline": "filename = ctx.config.get(\"encryption\", {}).get(\"private_key\")"
    },
    {
        "line": 138,
        "fullcodeline": "filename = os.environ.get('PRIVATE_KEY', filename)"
    },
    {
        "line": 141,
        "fullcodeline": "fullpath = Path(ctx.get_data_file(filename))"
    },
    {
        "line": 150,
        "fullcodeline": "ssh_tunnels = ctx.config.get(\"ssh-tunnels\", [])"
    },
    {
        "line": 171,
        "fullcodeline": "env = {"
    },
    {
        "line": 178,
        "fullcodeline": "info(\"Setting up databases\")"
    },
    {
        "line": 179,
        "fullcodeline": "db_labels = [db['label'] for db in ctx.databases]"
    },
    {
        "line": 208,
        "fullcodeline": "system_folders_option = \"--system\" if system_folders else \"--user\""
    },
    {
        "line": 209,
        "fullcodeline": "cmd = f'vnode-local start -c /mnt/config/{name}.yaml -n {name} '\\"
    },
    {
        "line": 212,
        "fullcodeline": "info(\"Running Docker container\")"
    },
    {
        "line": 213,
        "fullcodeline": "volumes = []"
    },
    {
        "line": 217,
        "fullcodeline": "remove_container_if_exists("
    },
    {
        "line": 221,
        "fullcodeline": "container = docker_client.containers.run("
    },
    {
        "line": 237,
        "fullcodeline": "info(f\"Success! container id = {container}\")"
    },
    {
        "line": 44,
        "fullcodeline": "for node in running_nodes:"
    },
    {
        "line": 51,
        "fullcodeline": "ctx.data_dir.mkdir(parents=True, exist_ok=True)"
    },
    {
        "line": 52,
        "fullcodeline": "ctx.log_dir.mkdir(parents=True, exist_ok=True)"
    },
    {
        "line": 57,
        "fullcodeline": "if not image:"
    },
    {
        "line": 134,
        "fullcodeline": "if not filename:"
    },
    {
        "line": 151,
        "fullcodeline": "for ssh_tunnel in ssh_tunnels:"
    },
    {
        "line": 180,
        "fullcodeline": "for label in db_labels:"
    },
    {
        "line": 214,
        "fullcodeline": "for mount in mounts:"
    },
    {
        "line": 13,
        "fullcodeline": "name = Path(config).stem"
    },
    {
        "line": 14,
        "fullcodeline": "ctx = NodeContext(name, system_folders, config)"
    },
    {
        "line": 33,
        "fullcodeline": "ctx = NodeContext(name, system_folders)"
    },
    {
        "line": 58,
        "fullcodeline": "custom_images: dict = ctx.config.get('images')"
    },
    {
        "line": 96,
        "fullcodeline": "pull_if_newer(docker.from_env(), image)"
    },
    {
        "line": 115,
        "fullcodeline": "(f\"/mnt/log/{name}\", str(ctx.log_dir)),"
    },
    {
        "line": 116,
        "fullcodeline": "(\"/mnt/data\", data_volume.name),"
    },
    {
        "line": 117,
        "fullcodeline": "(\"/mnt/vpn\", vpn_volume.name),"
    },
    {
        "line": 118,
        "fullcodeline": "(\"/mnt/ssh\", ssh_volume.name),"
    },
    {
        "line": 119,
        "fullcodeline": "(\"/mnt/squid\", squid_volume.name),"
    },
    {
        "line": 120,
        "fullcodeline": "(\"/mnt/config\", str(ctx.config_dir)),"
    },
    {
        "line": 121,
        "fullcodeline": "(\"/var/run/docker.sock\", \"/var/run/docker.sock\"),"
    },
    {
        "line": 126,
        "fullcodeline": "mount_src = os.path.abspath(mount_src)"
    },
    {
        "line": 127,
        "fullcodeline": "mounts.append(('/vantage6', mount_src))"
    },
    {
        "line": 135,
        "fullcodeline": "filename = 'private_key.pem'"
    },
    {
        "line": 210,
        "fullcodeline": "f' --dockerized {system_folders_option}'"
    },
    {
        "line": 240,
        "fullcodeline": "logs = container.attach(stream=True, logs=True)"
    },
    {
        "line": 18,
        "fullcodeline": "if not name:"
    },
    {
        "line": 22,
        "fullcodeline": "if not NodeContext.config_exists(name, system_folders):"
    },
    {
        "line": 90,
        "fullcodeline": "if not image:"
    },
    {
        "line": 102,
        "fullcodeline": "info(\" ... success!\")"
    },
    {
        "line": 152,
        "fullcodeline": "hostname = ssh_tunnel.get(\"hostname\")"
    },
    {
        "line": 153,
        "fullcodeline": "key_path = ssh_tunnel.get(\"ssh\", {}).get(\"identity\", {}).get(\"key\")"
    },
    {
        "line": 157,
        "fullcodeline": "key_path = Path(key_path)"
    },
    {
        "line": 169,
        "fullcodeline": "mounts.append((f\"/mnt/ssh/{hostname}.pem.tmp\", str(key_path)))"
    },
    {
        "line": 182,
        "fullcodeline": "db_config = get_database_config(ctx.databases, label)"
    },
    {
        "line": 183,
        "fullcodeline": "uri = db_config['uri']"
    },
    {
        "line": 184,
        "fullcodeline": "db_type = db_config['type']"
    },
    {
        "line": 188,
        "fullcodeline": "label_capitals = label.upper()"
    },
    {
        "line": 215,
        "fullcodeline": "volumes.append(f'{mount[1]}:{mount[0]}')"
    },
    {
        "line": 233,
        "fullcodeline": "auto_remove=not keep,"
    },
    {
        "line": 241,
        "fullcodeline": "Thread(target=print_log_worker, args=(logs,), daemon=True).start()"
    },
    {
        "line": 19,
        "fullcodeline": "name = select_configuration_questionaire(\"node\", system_folders)"
    },
    {
        "line": 23,
        "fullcodeline": "warning(f\"Configuration {Fore.RED}{name}{Style.RESET_ALL} does not\""
    },
    {
        "line": 40,
        "fullcodeline": "filters={\"label\": f\"{APPNAME}-type=node\"}"
    },
    {
        "line": 45,
        "fullcodeline": "if node.name == f\"{APPNAME}-{name}-{suffix}\":"
    },
    {
        "line": 60,
        "fullcodeline": "image = custom_images.get(\"node\")"
    },
    {
        "line": 64,
        "fullcodeline": "client = create_client(ctx)"
    },
    {
        "line": 65,
        "fullcodeline": "major_minor = None"
    },
    {
        "line": 91,
        "fullcodeline": "image = f\"{DEFAULT_DOCKER_REGISTRY}/{DEFAULT_NODE_IMAGE}\""
    },
    {
        "line": 99,
        "fullcodeline": "warning(' ... Getting latest node image failed:')"
    },
    {
        "line": 100,
        "fullcodeline": "warning(f\"     {e}\")"
    },
    {
        "line": 143,
        "fullcodeline": "if Path(fullpath).exists():"
    },
    {
        "line": 144,
        "fullcodeline": "mounts.append((\"/mnt/private_key.pem\", str(fullpath)))"
    },
    {
        "line": 146,
        "fullcodeline": "warning(f\"private key file provided {fullpath}, \""
    },
    {
        "line": 154,
        "fullcodeline": "if not key_path:"
    },
    {
        "line": 163,
        "fullcodeline": "info(f\"  Mounting private key for {hostname} at {key_path}\")"
    },
    {
        "line": 186,
        "fullcodeline": "info(f\"  Processing {Fore.GREEN}{db_type}{Style.RESET_ALL} database \""
    },
    {
        "line": 226,
        "fullcodeline": "labels={"
    },
    {
        "line": 47,
        "fullcodeline": "exit(1)"
    },
    {
        "line": 79,
        "fullcodeline": "if major_minor and not __version__.startswith(major_minor):"
    },
    {
        "line": 158,
        "fullcodeline": "if not key_path.exists():"
    },
    {
        "line": 187,
        "fullcodeline": "f\"{Fore.GREEN}{label}:{uri}{Style.RESET_ALL}\")"
    },
    {
        "line": 191,
        "fullcodeline": "file_based = Path(uri).exists()"
    },
    {
        "line": 199,
        "fullcodeline": "if not file_based and not force_db_mount:"
    },
    {
        "line": 201,
        "fullcodeline": "env[f'{label_capitals}_DATABASE_URI'] = uri"
    },
    {
        "line": 204,
        "fullcodeline": "suffix = Path(uri).suffix"
    },
    {
        "line": 205,
        "fullcodeline": "env[f'{label_capitals}_DATABASE_URI'] = f'{label}{suffix}'"
    },
    {
        "line": 206,
        "fullcodeline": "mounts.append((f'/mnt/{label}{suffix}', str(uri)))"
    },
    {
        "line": 228,
        "fullcodeline": "\"system\": str(system_folders),"
    },
    {
        "line": 26,
        "fullcodeline": "if q.confirm(\"Create this configuration now?\").ask():"
    },
    {
        "line": 27,
        "fullcodeline": "configuration_wizard(\"node\", name, system_folders)"
    },
    {
        "line": 30,
        "fullcodeline": "error(\"Config file couldn't be loaded\")"
    },
    {
        "line": 31,
        "fullcodeline": "sys.exit(0)"
    },
    {
        "line": 46,
        "fullcodeline": "error(f\"Node {Fore.RED}{name}{Style.RESET_ALL} is already running\")"
    },
    {
        "line": 68,
        "fullcodeline": "version = client.util.get_server_version("
    },
    {
        "line": 71,
        "fullcodeline": "major_minor = '.'.join(version.split('.')[:2])"
    },
    {
        "line": 72,
        "fullcodeline": "image = (f\"{DEFAULT_DOCKER_REGISTRY}/\""
    },
    {
        "line": 80,
        "fullcodeline": "warning("
    },
    {
        "line": 155,
        "fullcodeline": "error(f\"SSH tunnel identity {Fore.RED}{hostname}{Style.RESET_ALL} \""
    },
    {
        "line": 159,
        "fullcodeline": "error(f\"SSH tunnel identity {Fore.RED}{hostname}{Style.RESET_ALL} \""
    },
    {
        "line": 227,
        "fullcodeline": "f\"{APPNAME}-type\": \"node\","
    },
    {
        "line": 244,
        "fullcodeline": "time.sleep(1)"
    },
    {
        "line": 81,
        "fullcodeline": "\"Version mismatch between CLI and server/node. CLI is \""
    },
    {
        "line": 197,
        "fullcodeline": "file_based = False"
    },
    {
        "line": 73,
        "fullcodeline": "f\"{DEFAULT_NODE_IMAGE_WO_TAG}\""
    },
    {
        "line": 74,
        "fullcodeline": "f\":{major_minor}\")"
    },
    {
        "line": 76,
        "fullcodeline": "warning(\"Could not determine server version. Using default \""
    },
    {
        "line": 82,
        "fullcodeline": "f\"running on version {__version__}, while node and server \""
    },
    {
        "line": 83,
        "fullcodeline": "f\"are on version {major_minor}. This might cause \""
    },
    {
        "line": 84,
        "fullcodeline": "f\"unexpected issues; changing to {major_minor}.<latest> \""
    },
    {
        "line": 247,
        "fullcodeline": "info(\"Note that your node is still running! Shut it down with \""
    },
    {
        "line": 248,
        "fullcodeline": "f\"'{Fore.RED}v6 node stop{Style.RESET_ALL}'\")"
    }
]