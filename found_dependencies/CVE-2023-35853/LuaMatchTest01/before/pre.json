[
    {
        "line": 3,
        "fullcodeline": "const char script[] ="
    },
    {
        "line": 31,
        "fullcodeline": "char sig[] = \"alert http any any -> any any (flow:to_server; lua:unittest; sid:1;)\";"
    },
    {
        "line": 32,
        "fullcodeline": "int result = 0;"
    },
    {
        "line": 33,
        "fullcodeline": "uint8_t httpbuf1[] ="
    },
    {
        "line": 36,
        "fullcodeline": "uint8_t httpbuf2[] ="
    },
    {
        "line": 39,
        "fullcodeline": "uint32_t httplen1 = sizeof(httpbuf1) - 1; /* minus the \\0 */"
    },
    {
        "line": 40,
        "fullcodeline": "uint32_t httplen2 = sizeof(httpbuf2) - 1; /* minus the \\0 */"
    },
    {
        "line": 42,
        "fullcodeline": "Packet *p1 = NULL;"
    },
    {
        "line": 43,
        "fullcodeline": "Packet *p2 = NULL;"
    },
    {
        "line": 45,
        "fullcodeline": "Signature *s = NULL;"
    },
    {
        "line": 49,
        "fullcodeline": "AppLayerParserThreadCtx *alp_tctx = AppLayerParserThreadCtxAlloc();"
    },
    {
        "line": 51,
        "fullcodeline": "ut_script = script;"
    },
    {
        "line": 53,
        "fullcodeline": "memset(&th_v, 0, sizeof(th_v));"
    },
    {
        "line": 54,
        "fullcodeline": "memset(&f, 0, sizeof(f));"
    },
    {
        "line": 55,
        "fullcodeline": "memset(&ssn, 0, sizeof(ssn));"
    },
    {
        "line": 57,
        "fullcodeline": "p1 = UTHBuildPacket(NULL, 0, IPPROTO_TCP);"
    },
    {
        "line": 58,
        "fullcodeline": "p2 = UTHBuildPacket(NULL, 0, IPPROTO_TCP);"
    },
    {
        "line": 60,
        "fullcodeline": "FLOW_INITIALIZE(&f);"
    },
    {
        "line": 61,
        "fullcodeline": "f.protoctx = (void *)&ssn;"
    },
    {
        "line": 62,
        "fullcodeline": "f.proto = IPPROTO_TCP;"
    },
    {
        "line": 63,
        "fullcodeline": "f.flags |= FLOW_IPV4;"
    },
    {
        "line": 64,
        "fullcodeline": "f.alproto = ALPROTO_HTTP;"
    },
    {
        "line": 66,
        "fullcodeline": "p1->flow = &f;"
    },
    {
        "line": 67,
        "fullcodeline": "p1->flowflags |= FLOW_PKT_TOSERVER;"
    },
    {
        "line": 68,
        "fullcodeline": "p1->flowflags |= FLOW_PKT_ESTABLISHED;"
    },
    {
        "line": 69,
        "fullcodeline": "p1->flags |= PKT_HAS_FLOW|PKT_STREAM_EST;"
    },
    {
        "line": 70,
        "fullcodeline": "p2->flow = &f;"
    },
    {
        "line": 71,
        "fullcodeline": "p2->flowflags |= FLOW_PKT_TOSERVER;"
    },
    {
        "line": 72,
        "fullcodeline": "p2->flowflags |= FLOW_PKT_ESTABLISHED;"
    },
    {
        "line": 73,
        "fullcodeline": "p2->flags |= PKT_HAS_FLOW|PKT_STREAM_EST;"
    },
    {
        "line": 75,
        "fullcodeline": "StreamTcpInitConfig(TRUE);"
    },
    {
        "line": 77,
        "fullcodeline": "DetectEngineCtx *de_ctx = DetectEngineCtxInit();"
    },
    {
        "line": 81,
        "fullcodeline": "de_ctx->flags |= DE_QUIET;"
    },
    {
        "line": 83,
        "fullcodeline": "s = DetectEngineAppendSig(de_ctx, sig);"
    },
    {
        "line": 89,
        "fullcodeline": "SigGroupBuild(de_ctx);"
    },
    {
        "line": 90,
        "fullcodeline": "DetectEngineThreadCtxInit(&th_v, (void *)de_ctx, (void *)&det_ctx);"
    },
    {
        "line": 92,
        "fullcodeline": "FLOWLOCK_WRLOCK(&f);"
    },
    {
        "line": 93,
        "fullcodeline": "int r = AppLayerParserParse(NULL, alp_tctx, &f, ALPROTO_HTTP,"
    },
    {
        "line": 100,
        "fullcodeline": "FLOWLOCK_UNLOCK(&f);"
    },
    {
        "line": 101,
        "fullcodeline": "HtpState *http_state = f.alstate;"
    },
    {
        "line": 108,
        "fullcodeline": "SCLogDebug(\"inspecting p1\");"
    },
    {
        "line": 109,
        "fullcodeline": "SigMatchSignatures(&th_v, de_ctx, det_ctx, p1);"
    },
    {
        "line": 116,
        "fullcodeline": "FLOWLOCK_WRLOCK(&f);"
    },
    {
        "line": 117,
        "fullcodeline": "r = AppLayerParserParse(NULL, alp_tctx, &f, ALPROTO_HTTP,"
    },
    {
        "line": 124,
        "fullcodeline": "FLOWLOCK_UNLOCK(&f);"
    },
    {
        "line": 126,
        "fullcodeline": "SCLogDebug(\"inspecting p2\");"
    },
    {
        "line": 127,
        "fullcodeline": "SigMatchSignatures(&th_v, de_ctx, det_ctx, p2);"
    },
    {
        "line": 134,
        "fullcodeline": "FlowVar *fv = FlowVarGet(&f, 1);"
    },
    {
        "line": 152,
        "fullcodeline": "result = 1;"
    },
    {
        "line": 159,
        "fullcodeline": "StreamTcpFreeConfig(TRUE);"
    },
    {
        "line": 160,
        "fullcodeline": "FLOW_DESTROY(&f);"
    },
    {
        "line": 161,
        "fullcodeline": "UTHFreePackets(&p1, 1);"
    },
    {
        "line": 162,
        "fullcodeline": "UTHFreePackets(&p2, 1);"
    },
    {
        "line": 78,
        "fullcodeline": "if (de_ctx == NULL) {"
    },
    {
        "line": 84,
        "fullcodeline": "if (s == NULL) {"
    },
    {
        "line": 95,
        "fullcodeline": "if (r != 0) {"
    },
    {
        "line": 102,
        "fullcodeline": "if (http_state == NULL) {"
    },
    {
        "line": 111,
        "fullcodeline": "if ((PacketAlertCheck(p1, 1))) {"
    },
    {
        "line": 119,
        "fullcodeline": "if (r != 0) {"
    },
    {
        "line": 129,
        "fullcodeline": "if (!(PacketAlertCheck(p2, 1))) {"
    },
    {
        "line": 135,
        "fullcodeline": "if (fv == NULL) {"
    },
    {
        "line": 140,
        "fullcodeline": "if (fv->data.fv_str.value_len != 1) {"
    },
    {
        "line": 145,
        "fullcodeline": "if (memcmp(fv->data.fv_str.value, \"2\", 1) != 0) {"
    },
    {
        "line": 154,
        "fullcodeline": "if (alp_tctx != NULL)"
    },
    {
        "line": 156,
        "fullcodeline": "if (de_ctx != NULL)"
    },
    {
        "line": 85,
        "fullcodeline": "printf(\"sig parse failed: \");"
    },
    {
        "line": 97,
        "fullcodeline": "FLOWLOCK_UNLOCK(&f);"
    },
    {
        "line": 103,
        "fullcodeline": "printf(\"no http state: \");"
    },
    {
        "line": 112,
        "fullcodeline": "printf(\"sid 1 didn't match on p1 but should have: \");"
    },
    {
        "line": 121,
        "fullcodeline": "FLOWLOCK_UNLOCK(&f);"
    },
    {
        "line": 130,
        "fullcodeline": "printf(\"sid 1 didn't match on p2 but should have: \");"
    },
    {
        "line": 136,
        "fullcodeline": "printf(\"no flowvar: \");"
    },
    {
        "line": 141,
        "fullcodeline": "printf(\"%u != %u: \", fv->data.fv_str.value_len, 1);"
    },
    {
        "line": 146,
        "fullcodeline": "PrintRawDataFp(stdout, fv->data.fv_str.value, fv->data.fv_str.value_len);"
    },
    {
        "line": 148,
        "fullcodeline": "printf(\"buffer mismatch: \");"
    },
    {
        "line": 155,
        "fullcodeline": "AppLayerParserThreadCtxFree(alp_tctx);"
    },
    {
        "line": 157,
        "fullcodeline": "DetectEngineCtxFree(de_ctx);"
    }
]