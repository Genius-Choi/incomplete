[
    {
        "line": 3,
        "fullcodeline": "DetectLuaData *lua = NULL;"
    },
    {
        "line": 4,
        "fullcodeline": "SigMatch *sm = NULL;"
    },
    {
        "line": 6,
        "fullcodeline": "lua = DetectLuaParse(de_ctx, str);"
    },
    {
        "line": 14,
        "fullcodeline": "lua->thread_ctx_id = DetectRegisterThreadCtxFuncs(de_ctx, \"lua\","
    },
    {
        "line": 29,
        "fullcodeline": "sm = SigMatchAlloc();"
    },
    {
        "line": 33,
        "fullcodeline": "sm->type = DETECT_LUA;"
    },
    {
        "line": 34,
        "fullcodeline": "sm->ctx = (SigMatchCtx *)lua;"
    },
    {
        "line": 36,
        "fullcodeline": "int list = -1;"
    },
    {
        "line": 102,
        "fullcodeline": "SigMatchAppendSMToList(s, sm, list);"
    },
    {
        "line": 7,
        "fullcodeline": "if (lua == NULL)"
    },
    {
        "line": 10,
        "fullcodeline": "if (DetectLuaSetupPrime(de_ctx, lua) == -1) {"
    },
    {
        "line": 17,
        "fullcodeline": "if (lua->thread_ctx_id == -1)"
    },
    {
        "line": 20,
        "fullcodeline": "if (lua->alproto != ALPROTO_UNKNOWN) {"
    },
    {
        "line": 30,
        "fullcodeline": "if (sm == NULL)"
    },
    {
        "line": 37,
        "fullcodeline": "if (lua->alproto == ALPROTO_UNKNOWN) {"
    },
    {
        "line": 96,
        "fullcodeline": "if (list == -1) {"
    },
    {
        "line": 107,
        "fullcodeline": "if (lua != NULL)"
    },
    {
        "line": 109,
        "fullcodeline": "if (sm != NULL)"
    },
    {
        "line": 111,
        "fullcodeline": "return -1;"
    },
    {
        "line": 24,
        "fullcodeline": "s->alproto = lua->alproto;"
    },
    {
        "line": 21,
        "fullcodeline": "if (s->alproto != ALPROTO_UNKNOWN && !AppProtoEquals(s->alproto, lua->alproto)) {"
    },
    {
        "line": 38,
        "fullcodeline": "if (lua->flags & DATATYPE_STREAM)"
    },
    {
        "line": 98,
        "fullcodeline": "AppLayerGetProtoName(lua->alproto));"
    },
    {
        "line": 39,
        "fullcodeline": "list = DETECT_SM_LIST_PMATCH;"
    },
    {
        "line": 52,
        "fullcodeline": "} else if (lua->alproto == ALPROTO_HTTP) {"
    },
    {
        "line": 41,
        "fullcodeline": "if (lua->flags & DATATYPE_BUFFER) {"
    },
    {
        "line": 53,
        "fullcodeline": "if (lua->flags & DATATYPE_HTTP_RESPONSE_BODY) {"
    },
    {
        "line": 54,
        "fullcodeline": "list = DetectBufferTypeGetByName(\"file_data\");"
    },
    {
        "line": 74,
        "fullcodeline": "} else if (lua->alproto == ALPROTO_DNS) {"
    },
    {
        "line": 42,
        "fullcodeline": "if (DetectBufferGetActiveList(de_ctx, s) != -1) {"
    },
    {
        "line": 49,
        "fullcodeline": "list = DETECT_SM_LIST_MATCH;"
    },
    {
        "line": 43,
        "fullcodeline": "list = s->init_data->list;"
    },
    {
        "line": 55,
        "fullcodeline": "} else if (lua->flags & DATATYPE_HTTP_REQUEST_BODY) {"
    },
    {
        "line": 75,
        "fullcodeline": "if (lua->flags & DATATYPE_DNS_RRNAME) {"
    },
    {
        "line": 56,
        "fullcodeline": "list = DetectBufferTypeGetByName(\"http_client_body\");"
    },
    {
        "line": 76,
        "fullcodeline": "list = DetectBufferTypeGetByName(\"dns_query\");"
    },
    {
        "line": 82,
        "fullcodeline": "} else if (lua->alproto == ALPROTO_TLS) {"
    },
    {
        "line": 83,
        "fullcodeline": "list = DetectBufferTypeGetByName(\"tls_generic\");"
    },
    {
        "line": 57,
        "fullcodeline": "} else if (lua->flags & DATATYPE_HTTP_URI) {"
    },
    {
        "line": 77,
        "fullcodeline": "} else if (lua->flags & DATATYPE_DNS_REQUEST) {"
    },
    {
        "line": 58,
        "fullcodeline": "list = DetectBufferTypeGetByName(\"http_uri\");"
    },
    {
        "line": 78,
        "fullcodeline": "list = DetectBufferTypeGetByName(\"dns_request\");"
    },
    {
        "line": 84,
        "fullcodeline": "} else if (lua->alproto == ALPROTO_SSH) {"
    },
    {
        "line": 85,
        "fullcodeline": "list = DetectBufferTypeGetByName(\"ssh_banner\");"
    },
    {
        "line": 59,
        "fullcodeline": "} else if (lua->flags & DATATYPE_HTTP_URI_RAW) {"
    },
    {
        "line": 79,
        "fullcodeline": "} else if (lua->flags & DATATYPE_DNS_RESPONSE) {"
    },
    {
        "line": 60,
        "fullcodeline": "list = DetectBufferTypeGetByName(\"http_raw_uri\");"
    },
    {
        "line": 80,
        "fullcodeline": "list = DetectBufferTypeGetByName(\"dns_response\");"
    },
    {
        "line": 86,
        "fullcodeline": "} else if (lua->alproto == ALPROTO_SMTP) {"
    },
    {
        "line": 87,
        "fullcodeline": "list = g_smtp_generic_list_id;"
    },
    {
        "line": 61,
        "fullcodeline": "} else if (lua->flags & DATATYPE_HTTP_REQUEST_COOKIE ||"
    },
    {
        "line": 62,
        "fullcodeline": "lua->flags & DATATYPE_HTTP_RESPONSE_COOKIE)"
    },
    {
        "line": 64,
        "fullcodeline": "list = DetectBufferTypeGetByName(\"http_cookie\");"
    },
    {
        "line": 88,
        "fullcodeline": "} else if (lua->alproto == ALPROTO_DNP3) {"
    },
    {
        "line": 89,
        "fullcodeline": "list = DetectBufferTypeGetByName(\"dnp3\");"
    },
    {
        "line": 65,
        "fullcodeline": "} else if (lua->flags & DATATYPE_HTTP_REQUEST_UA) {"
    },
    {
        "line": 66,
        "fullcodeline": "list = DetectBufferTypeGetByName(\"http_user_agent\");"
    },
    {
        "line": 92,
        "fullcodeline": "AppLayerGetProtoName(lua->alproto));"
    },
    {
        "line": 67,
        "fullcodeline": "} else if (lua->flags & (DATATYPE_HTTP_REQUEST_HEADERS|DATATYPE_HTTP_RESPONSE_HEADERS)) {"
    },
    {
        "line": 68,
        "fullcodeline": "list = DetectBufferTypeGetByName(\"http_header\");"
    },
    {
        "line": 69,
        "fullcodeline": "} else if (lua->flags & (DATATYPE_HTTP_REQUEST_HEADERS_RAW|DATATYPE_HTTP_RESPONSE_HEADERS_RAW)) {"
    },
    {
        "line": 70,
        "fullcodeline": "list = DetectBufferTypeGetByName(\"http_raw_header\");"
    },
    {
        "line": 72,
        "fullcodeline": "list = DetectBufferTypeGetByName(\"http_request_line\");"
    }
]