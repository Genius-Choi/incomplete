[
    {
        "line": 5,
        "fullcodeline": "u32 val = 0;"
    },
    {
        "line": 6,
        "fullcodeline": "u32 count = 0;"
    },
    {
        "line": 8,
        "fullcodeline": "struct i2s_platform_data *i2s_pdata = NULL;"
    },
    {
        "line": 10,
        "fullcodeline": "struct amdgpu_device *adev = (struct amdgpu_device *)handle;"
    },
    {
        "line": 12,
        "fullcodeline": "const struct amdgpu_ip_block *ip_block ="
    },
    {
        "line": 18,
        "fullcodeline": "r = amd_acp_hw_init(adev->acp.cgs_device,"
    },
    {
        "line": 31,
        "fullcodeline": "acp_base = adev->rmmio_base;"
    },
    {
        "line": 34,
        "fullcodeline": "adev->acp.acp_genpd = kzalloc(sizeof(struct acp_pm_domain), GFP_KERNEL);"
    },
    {
        "line": 38,
        "fullcodeline": "adev->acp.acp_genpd->gpd.name = \"ACP_AUDIO\";"
    },
    {
        "line": 39,
        "fullcodeline": "adev->acp.acp_genpd->gpd.power_off = acp_poweroff;"
    },
    {
        "line": 40,
        "fullcodeline": "adev->acp.acp_genpd->gpd.power_on = acp_poweron;"
    },
    {
        "line": 43,
        "fullcodeline": "adev->acp.acp_genpd->adev = adev;"
    },
    {
        "line": 45,
        "fullcodeline": "pm_genpd_init(&adev->acp.acp_genpd->gpd, NULL, false);"
    },
    {
        "line": 47,
        "fullcodeline": "adev->acp.acp_cell = kcalloc(ACP_DEVS, sizeof(struct mfd_cell),"
    },
    {
        "line": 55,
        "fullcodeline": "adev->acp.acp_res = kcalloc(5, sizeof(struct resource), GFP_KERNEL);"
    },
    {
        "line": 61,
        "fullcodeline": "i2s_pdata = kcalloc(3, sizeof(struct i2s_platform_data), GFP_KERNEL);"
    },
    {
        "line": 75,
        "fullcodeline": "i2s_pdata[0].cap = DWC_I2S_PLAY;"
    },
    {
        "line": 76,
        "fullcodeline": "i2s_pdata[0].snd_rates = SNDRV_PCM_RATE_8000_96000;"
    },
    {
        "line": 77,
        "fullcodeline": "i2s_pdata[0].i2s_reg_comp1 = ACP_I2S_COMP1_PLAY_REG_OFFSET;"
    },
    {
        "line": 78,
        "fullcodeline": "i2s_pdata[0].i2s_reg_comp2 = ACP_I2S_COMP2_PLAY_REG_OFFSET;"
    },
    {
        "line": 90,
        "fullcodeline": "i2s_pdata[1].cap = DWC_I2S_RECORD;"
    },
    {
        "line": 91,
        "fullcodeline": "i2s_pdata[1].snd_rates = SNDRV_PCM_RATE_8000_96000;"
    },
    {
        "line": 92,
        "fullcodeline": "i2s_pdata[1].i2s_reg_comp1 = ACP_I2S_COMP1_CAP_REG_OFFSET;"
    },
    {
        "line": 93,
        "fullcodeline": "i2s_pdata[1].i2s_reg_comp2 = ACP_I2S_COMP2_CAP_REG_OFFSET;"
    },
    {
        "line": 95,
        "fullcodeline": "i2s_pdata[2].quirks = DW_I2S_QUIRK_COMP_REG_OFFSET;"
    },
    {
        "line": 104,
        "fullcodeline": "i2s_pdata[2].cap = DWC_I2S_PLAY | DWC_I2S_RECORD;"
    },
    {
        "line": 105,
        "fullcodeline": "i2s_pdata[2].snd_rates = SNDRV_PCM_RATE_8000_96000;"
    },
    {
        "line": 106,
        "fullcodeline": "i2s_pdata[2].i2s_reg_comp1 = ACP_BT_COMP1_REG_OFFSET;"
    },
    {
        "line": 107,
        "fullcodeline": "i2s_pdata[2].i2s_reg_comp2 = ACP_BT_COMP2_REG_OFFSET;"
    },
    {
        "line": 109,
        "fullcodeline": "adev->acp.acp_res[0].name = \"acp2x_dma\";"
    },
    {
        "line": 110,
        "fullcodeline": "adev->acp.acp_res[0].flags = IORESOURCE_MEM;"
    },
    {
        "line": 111,
        "fullcodeline": "adev->acp.acp_res[0].start = acp_base;"
    },
    {
        "line": 112,
        "fullcodeline": "adev->acp.acp_res[0].end = acp_base + ACP_DMA_REGS_END;"
    },
    {
        "line": 114,
        "fullcodeline": "adev->acp.acp_res[1].name = \"acp2x_dw_i2s_play\";"
    },
    {
        "line": 115,
        "fullcodeline": "adev->acp.acp_res[1].flags = IORESOURCE_MEM;"
    },
    {
        "line": 116,
        "fullcodeline": "adev->acp.acp_res[1].start = acp_base + ACP_I2S_PLAY_REGS_START;"
    },
    {
        "line": 117,
        "fullcodeline": "adev->acp.acp_res[1].end = acp_base + ACP_I2S_PLAY_REGS_END;"
    },
    {
        "line": 119,
        "fullcodeline": "adev->acp.acp_res[2].name = \"acp2x_dw_i2s_cap\";"
    },
    {
        "line": 120,
        "fullcodeline": "adev->acp.acp_res[2].flags = IORESOURCE_MEM;"
    },
    {
        "line": 121,
        "fullcodeline": "adev->acp.acp_res[2].start = acp_base + ACP_I2S_CAP_REGS_START;"
    },
    {
        "line": 122,
        "fullcodeline": "adev->acp.acp_res[2].end = acp_base + ACP_I2S_CAP_REGS_END;"
    },
    {
        "line": 124,
        "fullcodeline": "adev->acp.acp_res[3].name = \"acp2x_dw_bt_i2s_play_cap\";"
    },
    {
        "line": 125,
        "fullcodeline": "adev->acp.acp_res[3].flags = IORESOURCE_MEM;"
    },
    {
        "line": 126,
        "fullcodeline": "adev->acp.acp_res[3].start = acp_base + ACP_BT_PLAY_REGS_START;"
    },
    {
        "line": 127,
        "fullcodeline": "adev->acp.acp_res[3].end = acp_base + ACP_BT_PLAY_REGS_END;"
    },
    {
        "line": 129,
        "fullcodeline": "adev->acp.acp_res[4].name = \"acp2x_dma_irq\";"
    },
    {
        "line": 130,
        "fullcodeline": "adev->acp.acp_res[4].flags = IORESOURCE_IRQ;"
    },
    {
        "line": 131,
        "fullcodeline": "adev->acp.acp_res[4].start = amdgpu_irq_create_mapping(adev, 162);"
    },
    {
        "line": 132,
        "fullcodeline": "adev->acp.acp_res[4].end = adev->acp.acp_res[4].start;"
    },
    {
        "line": 134,
        "fullcodeline": "adev->acp.acp_cell[0].name = \"acp_audio_dma\";"
    },
    {
        "line": 135,
        "fullcodeline": "adev->acp.acp_cell[0].num_resources = 5;"
    },
    {
        "line": 137,
        "fullcodeline": "adev->acp.acp_cell[0].platform_data = &adev->asic_type;"
    },
    {
        "line": 140,
        "fullcodeline": "adev->acp.acp_cell[1].name = \"designware-i2s\";"
    },
    {
        "line": 141,
        "fullcodeline": "adev->acp.acp_cell[1].num_resources = 1;"
    },
    {
        "line": 143,
        "fullcodeline": "adev->acp.acp_cell[1].platform_data = &i2s_pdata[0];"
    },
    {
        "line": 146,
        "fullcodeline": "adev->acp.acp_cell[2].name = \"designware-i2s\";"
    },
    {
        "line": 147,
        "fullcodeline": "adev->acp.acp_cell[2].num_resources = 1;"
    },
    {
        "line": 149,
        "fullcodeline": "adev->acp.acp_cell[2].platform_data = &i2s_pdata[1];"
    },
    {
        "line": 152,
        "fullcodeline": "adev->acp.acp_cell[3].name = \"designware-i2s\";"
    },
    {
        "line": 153,
        "fullcodeline": "adev->acp.acp_cell[3].num_resources = 1;"
    },
    {
        "line": 155,
        "fullcodeline": "adev->acp.acp_cell[3].platform_data = &i2s_pdata[2];"
    },
    {
        "line": 158,
        "fullcodeline": "r = mfd_add_hotplug_devices(adev->acp.parent, adev->acp.acp_cell,"
    },
    {
        "line": 174,
        "fullcodeline": "val = cgs_read_register(adev->acp.cgs_device, mmACP_SOFT_RESET);"
    },
    {
        "line": 176,
        "fullcodeline": "val |= ACP_SOFT_RESET__SoftResetAud_MASK;"
    },
    {
        "line": 177,
        "fullcodeline": "cgs_write_register(adev->acp.cgs_device, mmACP_SOFT_RESET, val);"
    },
    {
        "line": 179,
        "fullcodeline": "count = ACP_SOFT_RESET_DONE_TIME_OUT_VALUE;"
    },
    {
        "line": 193,
        "fullcodeline": "val = cgs_read_register(adev->acp.cgs_device, mmACP_CONTROL);"
    },
    {
        "line": 194,
        "fullcodeline": "val = val | ACP_CONTROL__ClkEn_MASK;"
    },
    {
        "line": 195,
        "fullcodeline": "cgs_write_register(adev->acp.cgs_device, mmACP_CONTROL, val);"
    },
    {
        "line": 197,
        "fullcodeline": "count = ACP_CLOCK_EN_TIME_OUT_VALUE;"
    },
    {
        "line": 211,
        "fullcodeline": "val = cgs_read_register(adev->acp.cgs_device, mmACP_SOFT_RESET);"
    },
    {
        "line": 212,
        "fullcodeline": "val &= ~ACP_SOFT_RESET__SoftResetAud_MASK;"
    },
    {
        "line": 213,
        "fullcodeline": "cgs_write_register(adev->acp.cgs_device, mmACP_SOFT_RESET, val);"
    },
    {
        "line": 217,
        "fullcodeline": "kfree(i2s_pdata);"
    },
    {
        "line": 218,
        "fullcodeline": "kfree(adev->acp.acp_res);"
    },
    {
        "line": 219,
        "fullcodeline": "kfree(adev->acp.acp_cell);"
    },
    {
        "line": 220,
        "fullcodeline": "kfree(adev->acp.acp_genpd);"
    },
    {
        "line": 13,
        "fullcodeline": "amdgpu_device_ip_get_ip_block(adev, AMD_IP_BLOCK_TYPE_ACP);"
    },
    {
        "line": 15,
        "fullcodeline": "if (!ip_block)"
    },
    {
        "line": 21,
        "fullcodeline": "if (r == -ENODEV) {"
    },
    {
        "line": 28,
        "fullcodeline": "if (adev->rmmio_size == 0 || adev->rmmio_size < 0x5289)"
    },
    {
        "line": 35,
        "fullcodeline": "if (adev->acp.acp_genpd == NULL)"
    },
    {
        "line": 50,
        "fullcodeline": "if (adev->acp.acp_cell == NULL) {"
    },
    {
        "line": 56,
        "fullcodeline": "if (adev->acp.acp_res == NULL) {"
    },
    {
        "line": 62,
        "fullcodeline": "if (i2s_pdata == NULL) {"
    },
    {
        "line": 163,
        "fullcodeline": "for (i = 0; i < ACP_DEVS ; i++) {"
    },
    {
        "line": 22,
        "fullcodeline": "amdgpu_dpm_set_powergating_by_smu(adev, AMD_IP_BLOCK_TYPE_ACP, true);"
    },
    {
        "line": 51,
        "fullcodeline": "r = -ENOMEM;"
    },
    {
        "line": 57,
        "fullcodeline": "r = -ENOMEM;"
    },
    {
        "line": 63,
        "fullcodeline": "r = -ENOMEM;"
    },
    {
        "line": 69,
        "fullcodeline": "i2s_pdata[0].quirks = DW_I2S_QUIRK_COMP_REG_OFFSET |"
    },
    {
        "line": 73,
        "fullcodeline": "i2s_pdata[0].quirks = DW_I2S_QUIRK_COMP_REG_OFFSET;"
    },
    {
        "line": 81,
        "fullcodeline": "i2s_pdata[1].quirks = DW_I2S_QUIRK_COMP_REG_OFFSET |"
    },
    {
        "line": 86,
        "fullcodeline": "i2s_pdata[1].quirks = DW_I2S_QUIRK_COMP_REG_OFFSET |"
    },
    {
        "line": 98,
        "fullcodeline": "i2s_pdata[2].quirks |= DW_I2S_QUIRK_16BIT_IDX_OVERRIDE;"
    },
    {
        "line": 164,
        "fullcodeline": "dev = get_mfd_cell_dev(adev->acp.acp_cell[i].name, i);"
    },
    {
        "line": 165,
        "fullcodeline": "r = pm_genpd_add_device(&adev->acp.acp_genpd->gpd, dev);"
    },
    {
        "line": 181,
        "fullcodeline": "val = cgs_read_register(adev->acp.cgs_device, mmACP_SOFT_RESET);"
    },
    {
        "line": 190,
        "fullcodeline": "udelay(100);"
    },
    {
        "line": 200,
        "fullcodeline": "val = cgs_read_register(adev->acp.cgs_device, mmACP_STATUS);"
    },
    {
        "line": 208,
        "fullcodeline": "udelay(100);"
    },
    {
        "line": 16,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 29,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 36,
        "fullcodeline": "return -ENOMEM;"
    },
    {
        "line": 182,
        "fullcodeline": "if (ACP_SOFT_RESET__SoftResetAudDone_MASK =="
    },
    {
        "line": 185,
        "fullcodeline": "if (--count == 0) {"
    },
    {
        "line": 201,
        "fullcodeline": "if (val & (u32) 0x1)"
    },
    {
        "line": 203,
        "fullcodeline": "if (--count == 0) {"
    },
    {
        "line": 167,
        "fullcodeline": "dev_err(dev, \"Failed to add dev to genpd\\n\");"
    },
    {
        "line": 183,
        "fullcodeline": "(val & ACP_SOFT_RESET__SoftResetAudDone_MASK))"
    },
    {
        "line": 186,
        "fullcodeline": "dev_err(&adev->pdev->dev, \"Failed to reset ACP\\n\");"
    },
    {
        "line": 187,
        "fullcodeline": "r = -ETIMEDOUT;"
    },
    {
        "line": 204,
        "fullcodeline": "dev_err(&adev->pdev->dev, \"Failed to reset ACP\\n\");"
    },
    {
        "line": 205,
        "fullcodeline": "r = -ETIMEDOUT;"
    }
]