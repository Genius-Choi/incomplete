[
    {
        "line": 3,
        "fullcodeline": "PCIDevice *d = PCI_DEVICE(s);"
    },
    {
        "line": 4,
        "fullcodeline": "uint32_t txd_lower = le32_to_cpu(dp->lower.data);"
    },
    {
        "line": 5,
        "fullcodeline": "uint32_t dtype = txd_lower & (E1000_TXD_CMD_DEXT | E1000_TXD_DTYP_D);"
    },
    {
        "line": 6,
        "fullcodeline": "unsigned int split_size = txd_lower & 0xffff, bytes, sz;"
    },
    {
        "line": 7,
        "fullcodeline": "unsigned int msh = 0xfffff;"
    },
    {
        "line": 9,
        "fullcodeline": "struct e1000_context_desc *xp = (struct e1000_context_desc *)dp;"
    },
    {
        "line": 10,
        "fullcodeline": "struct e1000_tx *tp = &s->tx;"
    },
    {
        "line": 12,
        "fullcodeline": "s->mit_ide |= (txd_lower & E1000_TXD_CMD_IDE);"
    },
    {
        "line": 44,
        "fullcodeline": "addr = le64_to_cpu(dp->buffer_addr);"
    },
    {
        "line": 13,
        "fullcodeline": "if (dtype == E1000_TXD_CMD_DEXT) {    /* context descriptor */"
    },
    {
        "line": 34,
        "fullcodeline": "if (e1000x_vlan_enabled(s->mac_reg) &&"
    },
    {
        "line": 36,
        "fullcodeline": "(tp->cptse || txd_lower & E1000_TXD_CMD_EOP)) {"
    },
    {
        "line": 38,
        "fullcodeline": "stw_be_p(tp->vlan_header,"
    },
    {
        "line": 46,
        "fullcodeline": "msh = tp->tso_props.hdr_len + tp->tso_props.mss;"
    },
    {
        "line": 74,
        "fullcodeline": "if (!(txd_lower & E1000_TXD_CMD_EOP))"
    },
    {
        "line": 76,
        "fullcodeline": "if (!(tp->cptse && tp->size < tp->tso_props.hdr_len)) {"
    },
    {
        "line": 14,
        "fullcodeline": "if (le32_to_cpu(xp->cmd_and_length) & E1000_TXD_CMD_TSE) {"
    },
    {
        "line": 35,
        "fullcodeline": "e1000x_is_vlan_txd(txd_lower) &&"
    },
    {
        "line": 39,
        "fullcodeline": "le16_to_cpu(s->mac_reg[VET]));"
    },
    {
        "line": 41,
        "fullcodeline": "le16_to_cpu(dp->upper.fields.special));"
    },
    {
        "line": 67,
        "fullcodeline": "} while (bytes && split_size);"
    },
    {
        "line": 69,
        "fullcodeline": "split_size = MIN(sizeof(tp->data) - tp->size, split_size);"
    },
    {
        "line": 70,
        "fullcodeline": "pci_dma_read(d, addr, tp->data + tp->size, split_size);"
    },
    {
        "line": 71,
        "fullcodeline": "tp->size += split_size;"
    },
    {
        "line": 15,
        "fullcodeline": "e1000x_read_tx_ctx_descr(xp, &tp->tso_props);"
    },
    {
        "line": 16,
        "fullcodeline": "s->use_tso_for_migration = 1;"
    },
    {
        "line": 17,
        "fullcodeline": "tp->tso_frames = 0;"
    },
    {
        "line": 48,
        "fullcodeline": "bytes = split_size;"
    },
    {
        "line": 52,
        "fullcodeline": "bytes = MIN(sizeof(tp->data) - tp->size, bytes);"
    },
    {
        "line": 53,
        "fullcodeline": "pci_dma_read(d, addr, tp->data + tp->size, bytes);"
    },
    {
        "line": 54,
        "fullcodeline": "sz = tp->size + bytes;"
    },
    {
        "line": 59,
        "fullcodeline": "tp->size = sz;"
    },
    {
        "line": 60,
        "fullcodeline": "addr += bytes;"
    },
    {
        "line": 66,
        "fullcodeline": "split_size -= bytes;"
    },
    {
        "line": 19,
        "fullcodeline": "e1000x_read_tx_ctx_descr(xp, &tp->props);"
    },
    {
        "line": 20,
        "fullcodeline": "s->use_tso_for_migration = 0;"
    },
    {
        "line": 23,
        "fullcodeline": "} else if (dtype == (E1000_TXD_CMD_DEXT | E1000_TXD_DTYP_D)) {"
    },
    {
        "line": 28,
        "fullcodeline": "tp->cptse = (txd_lower & E1000_TXD_CMD_TSE) ? 1 : 0;"
    },
    {
        "line": 49,
        "fullcodeline": "if (tp->size + bytes > msh)"
    },
    {
        "line": 55,
        "fullcodeline": "if (sz >= tp->tso_props.hdr_len"
    },
    {
        "line": 61,
        "fullcodeline": "if (sz == msh) {"
    },
    {
        "line": 25,
        "fullcodeline": "if (tp->size == 0) {"
    },
    {
        "line": 31,
        "fullcodeline": "tp->cptse = 0;"
    },
    {
        "line": 50,
        "fullcodeline": "bytes = msh - tp->size;"
    },
    {
        "line": 56,
        "fullcodeline": "&& tp->size < tp->tso_props.hdr_len) {"
    },
    {
        "line": 57,
        "fullcodeline": "memmove(tp->header, tp->data, tp->tso_props.hdr_len);"
    },
    {
        "line": 62,
        "fullcodeline": "xmit_seg(s);"
    },
    {
        "line": 63,
        "fullcodeline": "memmove(tp->data, tp->header, tp->tso_props.hdr_len);"
    },
    {
        "line": 64,
        "fullcodeline": "tp->size = tp->tso_props.hdr_len;"
    },
    {
        "line": 26,
        "fullcodeline": "tp->sum_needed = le32_to_cpu(dp->upper.data) >> 8;"
    }
]