[
    {
        "line": 7,
        "fullcodeline": "int       graphelement = 0;"
    },
    {
        "line": 10,
        "fullcodeline": "double    magfact = -1;"
    },
    {
        "line": 11,
        "fullcodeline": "char     *si_symb = \"\";"
    },
    {
        "line": 13,
        "fullcodeline": "int       prline_cnt = 0;"
    },
    {
        "line": 16,
        "fullcodeline": "time_t    now = time(NULL);"
    },
    {
        "line": 18,
        "fullcodeline": "localtime_r(&now, &tmvdef);"
    },
    {
        "line": 19,
        "fullcodeline": "for (i = 0; i < im->gdes_c; i++) {"
    },
    {
        "line": 138,
        "fullcodeline": "graphelement = 1;"
    },
    {
        "line": 144,
        "fullcodeline": "graphelement = 1;"
    },
    {
        "line": 150,
        "fullcodeline": "graphelement = 1;"
    },
    {
        "line": 164,
        "fullcodeline": "rrd_set_error"
    },
    {
        "line": 28,
        "fullcodeline": "if (im->gdes[vidx].gf == GF_VDEF) { /* simply use vals */"
    },
    {
        "line": 74,
        "fullcodeline": "if (!im->gdes[i].strftm && (percent_s = strstr(im->gdes[i].format, \"%S\")) != NULL) {"
    },
    {
        "line": 92,
        "fullcodeline": "if (im->gdes[i].gf == GF_PRINT) {"
    },
    {
        "line": 147,
        "fullcodeline": "if (im->gdes[i].xrule == 0) {   /* again ... the legend printer needs it */"
    },
    {
        "line": 166,
        "fullcodeline": "return -1;"
    },
    {
        "line": 30,
        "fullcodeline": "localtime_r(&im->gdes[vidx].vf.when, &tmvdef);"
    },
    {
        "line": 87,
        "fullcodeline": "*(++percent_s) = 's';"
    },
    {
        "line": 109,
        "fullcodeline": "grinfo_push(im,"
    },
    {
        "line": 112,
        "fullcodeline": "free(prline.u_str);"
    },
    {
        "line": 148,
        "fullcodeline": "im->gdes[i].xrule = im->gdes[vidx].vf.when;"
    },
    {
        "line": 32,
        "fullcodeline": "max_ii = ((im->gdes[vidx].end - im->gdes[vidx].start)"
    },
    {
        "line": 34,
        "fullcodeline": "printval = DNAN;"
    },
    {
        "line": 35,
        "fullcodeline": "validsteps = 0;"
    },
    {
        "line": 80,
        "fullcodeline": "if (magfact < 0.0) {"
    },
    {
        "line": 110,
        "fullcodeline": "sprintf_alloc"
    },
    {
        "line": 131,
        "fullcodeline": "graphelement = 1;"
    },
    {
        "line": 37,
        "fullcodeline": "ii < max_ii; ii += im->gdes[vidx].ds_cnt) {"
    },
    {
        "line": 67,
        "fullcodeline": "if (im->gdes[i].cf == CF_AVERAGE || im->gdes[i].cf > CF_LAST) {"
    },
    {
        "line": 81,
        "fullcodeline": "auto_scale(im, &printval, &si_symb, &magfact);"
    },
    {
        "line": 88,
        "fullcodeline": "} else if (!im->gdes[i].strftm && strstr(im->gdes[i].format, \"%s\") != NULL) {"
    },
    {
        "line": 96,
        "fullcodeline": "prline.u_str = (char*)malloc((FMT_LEG_LEN + 2) * sizeof(char));"
    },
    {
        "line": 111,
        "fullcodeline": "(\"print[%ld]\", prline_cnt++), RD_I_STR, prline);"
    },
    {
        "line": 82,
        "fullcodeline": "if (printval == 0.0)"
    },
    {
        "line": 85,
        "fullcodeline": "printval /= magfact;"
    },
    {
        "line": 89,
        "fullcodeline": "auto_scale(im, &printval, &si_symb, &magfact);"
    },
    {
        "line": 97,
        "fullcodeline": "if (im->gdes[vidx].vf.never == 1) {"
    },
    {
        "line": 38,
        "fullcodeline": "if (!finite(im->gdes[vidx].data[ii]))"
    },
    {
        "line": 40,
        "fullcodeline": "if (isnan(printval)) {"
    },
    {
        "line": 68,
        "fullcodeline": "if (validsteps > 1) {"
    },
    {
        "line": 83,
        "fullcodeline": "magfact = -1.0;"
    },
    {
        "line": 98,
        "fullcodeline": "time_clean(prline.u_str, im->gdes[i].format);"
    },
    {
        "line": 103,
        "fullcodeline": "} else if (bad_format_print(im->gdes[i].format)) {"
    },
    {
        "line": 117,
        "fullcodeline": "if (im->gdes[vidx].vf.never == 1) {"
    },
    {
        "line": 127,
        "fullcodeline": "snprintf(im->gdes[i].legend,"
    },
    {
        "line": 41,
        "fullcodeline": "printval = im->gdes[vidx].data[ii];"
    },
    {
        "line": 42,
        "fullcodeline": "validsteps++;"
    },
    {
        "line": 53,
        "fullcodeline": "validsteps++;"
    },
    {
        "line": 54,
        "fullcodeline": "printval += im->gdes[vidx].data[ii];"
    },
    {
        "line": 57,
        "fullcodeline": "printval = min(printval, im->gdes[vidx].data[ii]);"
    },
    {
        "line": 61,
        "fullcodeline": "printval = max(printval, im->gdes[vidx].data[ii]);"
    },
    {
        "line": 64,
        "fullcodeline": "printval = im->gdes[vidx].data[ii];"
    },
    {
        "line": 69,
        "fullcodeline": "printval = (printval / validsteps);"
    },
    {
        "line": 100,
        "fullcodeline": "strftime(prline.u_str,"
    },
    {
        "line": 118,
        "fullcodeline": "time_clean(im->gdes[i].legend, im->gdes[i].format);"
    },
    {
        "line": 124,
        "fullcodeline": "if (bad_format_print(im->gdes[i].format)) {"
    },
    {
        "line": 128,
        "fullcodeline": "FMT_LEG_LEN - 2,"
    },
    {
        "line": 104,
        "fullcodeline": "return -1;"
    },
    {
        "line": 106,
        "fullcodeline": "prline.u_str ="
    },
    {
        "line": 120,
        "fullcodeline": "strftime(im->gdes[i].legend,"
    },
    {
        "line": 107,
        "fullcodeline": "sprintf_alloc(im->gdes[i].format, printval, si_symb);"
    },
    {
        "line": 125,
        "fullcodeline": "return -1;"
    }
]