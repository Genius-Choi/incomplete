[
    {
        "line": 4,
        "fullcodeline": "HTTPContext *s = h->priv_data;"
    },
    {
        "line": 5,
        "fullcodeline": "const char *auto_method =  h->flags & AVIO_FLAG_READ ? \"POST\" : \"GET\";"
    },
    {
        "line": 15,
        "fullcodeline": "p = line;"
    },
    {
        "line": 10,
        "fullcodeline": "if (line[0] == '\\0') {"
    },
    {
        "line": 11,
        "fullcodeline": "s->end_header = 1;"
    },
    {
        "line": 83,
        "fullcodeline": "*p  = '\\0';"
    },
    {
        "line": 84,
        "fullcodeline": "tag = line;"
    },
    {
        "line": 85,
        "fullcodeline": "p++;"
    },
    {
        "line": 19,
        "fullcodeline": "method = p;"
    },
    {
        "line": 23,
        "fullcodeline": "av_log(h, AV_LOG_TRACE, \"Received method: %s\\n\", method);"
    },
    {
        "line": 45,
        "fullcodeline": "resource = p;"
    },
    {
        "line": 49,
        "fullcodeline": "av_log(h, AV_LOG_TRACE, \"Requested resource: %s\\n\", resource);"
    },
    {
        "line": 56,
        "fullcodeline": "version = p;"
    },
    {
        "line": 79,
        "fullcodeline": "p++;"
    },
    {
        "line": 86,
        "fullcodeline": "while (av_isspace(*p))"
    },
    {
        "line": 87,
        "fullcodeline": "p++;"
    },
    {
        "line": 20,
        "fullcodeline": "while (*p && !av_isspace(*p))"
    },
    {
        "line": 21,
        "fullcodeline": "p++;"
    },
    {
        "line": 43,
        "fullcodeline": "while (av_isspace(*p))"
    },
    {
        "line": 44,
        "fullcodeline": "p++;"
    },
    {
        "line": 46,
        "fullcodeline": "while (!av_isspace(*p))"
    },
    {
        "line": 47,
        "fullcodeline": "p++;"
    },
    {
        "line": 54,
        "fullcodeline": "while (av_isspace(*p))"
    },
    {
        "line": 55,
        "fullcodeline": "p++;"
    },
    {
        "line": 57,
        "fullcodeline": "while (*p && !av_isspace(*p))"
    },
    {
        "line": 60,
        "fullcodeline": "if (av_strncasecmp(version, \"HTTP/\", 5)) {"
    },
    {
        "line": 70,
        "fullcodeline": "s->http_code = strtol(p, &end, 10);"
    },
    {
        "line": 72,
        "fullcodeline": "av_log(h, AV_LOG_TRACE, \"http_code=%d\\n\", s->http_code);"
    },
    {
        "line": 78,
        "fullcodeline": "while (*p != '\\0' && *p != ':')"
    },
    {
        "line": 88,
        "fullcodeline": "if (!av_strcasecmp(tag, \"Location\")) {"
    },
    {
        "line": 22,
        "fullcodeline": "*(p++) = '\\0';"
    },
    {
        "line": 48,
        "fullcodeline": "*(p++) = '\\0';"
    },
    {
        "line": 50,
        "fullcodeline": "if (!(s->resource = av_strdup(resource)))"
    },
    {
        "line": 67,
        "fullcodeline": "p++;"
    },
    {
        "line": 68,
        "fullcodeline": "while (av_isspace(*p))"
    },
    {
        "line": 69,
        "fullcodeline": "p++;"
    },
    {
        "line": 25,
        "fullcodeline": "if (av_strcasecmp(s->method, method)) {"
    },
    {
        "line": 32,
        "fullcodeline": "av_log(h, AV_LOG_TRACE, \"Autodetected %s HTTP method\\n\", auto_method);"
    },
    {
        "line": 51,
        "fullcodeline": "return AVERROR(ENOMEM);"
    },
    {
        "line": 62,
        "fullcodeline": "return ff_http_averror(400, AVERROR(EIO));"
    },
    {
        "line": 66,
        "fullcodeline": "while (!av_isspace(*p) && *p != '\\0')"
    },
    {
        "line": 74,
        "fullcodeline": "if ((ret = check_http_code(h, s->http_code, end)) < 0)"
    },
    {
        "line": 89,
        "fullcodeline": "if ((ret = parse_location(s, p)) < 0)"
    },
    {
        "line": 33,
        "fullcodeline": "if (av_strcasecmp(auto_method, method)) {"
    },
    {
        "line": 92,
        "fullcodeline": "} else if (!av_strcasecmp(tag, \"Content-Length\") &&"
    },
    {
        "line": 93,
        "fullcodeline": "s->filesize == UINT64_MAX) {"
    },
    {
        "line": 28,
        "fullcodeline": "return ff_http_averror(400, AVERROR(EIO));"
    },
    {
        "line": 38,
        "fullcodeline": "if (!(s->method = av_strdup(method)))"
    },
    {
        "line": 94,
        "fullcodeline": "s->filesize = strtoull(p, NULL, 10);"
    },
    {
        "line": 36,
        "fullcodeline": "return ff_http_averror(400, AVERROR(EIO));"
    },
    {
        "line": 39,
        "fullcodeline": "return AVERROR(ENOMEM);"
    },
    {
        "line": 95,
        "fullcodeline": "} else if (!av_strcasecmp(tag, \"Content-Range\")) {"
    },
    {
        "line": 97,
        "fullcodeline": "} else if (!av_strcasecmp(tag, \"Accept-Ranges\") &&"
    },
    {
        "line": 99,
        "fullcodeline": "s->seekable == -1) {"
    },
    {
        "line": 98,
        "fullcodeline": "!strncmp(p, \"bytes\", 5) &&"
    },
    {
        "line": 101,
        "fullcodeline": "} else if (!av_strcasecmp(tag, \"Transfer-Encoding\") &&"
    },
    {
        "line": 102,
        "fullcodeline": "!av_strncasecmp(p, \"chunked\", 7)) {"
    },
    {
        "line": 105,
        "fullcodeline": "} else if (!av_strcasecmp(tag, \"WWW-Authenticate\")) {"
    },
    {
        "line": 107,
        "fullcodeline": "} else if (!av_strcasecmp(tag, \"Authentication-Info\")) {"
    },
    {
        "line": 109,
        "fullcodeline": "} else if (!av_strcasecmp(tag, \"Proxy-Authenticate\")) {"
    },
    {
        "line": 111,
        "fullcodeline": "} else if (!av_strcasecmp(tag, \"Connection\")) {"
    },
    {
        "line": 112,
        "fullcodeline": "if (!strcmp(p, \"close\"))"
    },
    {
        "line": 114,
        "fullcodeline": "} else if (!av_strcasecmp(tag, \"Server\")) {"
    },
    {
        "line": 115,
        "fullcodeline": "if (!av_strcasecmp(p, \"AkamaiGHost\")) {"
    },
    {
        "line": 120,
        "fullcodeline": "} else if (!av_strcasecmp(tag, \"Content-Type\")) {"
    },
    {
        "line": 122,
        "fullcodeline": "s->mime_type = av_strdup(p);"
    },
    {
        "line": 117,
        "fullcodeline": "} else if (!av_strncasecmp(p, \"MediaGateway\", 12)) {"
    },
    {
        "line": 123,
        "fullcodeline": "} else if (!av_strcasecmp(tag, \"Set-Cookie\")) {"
    },
    {
        "line": 124,
        "fullcodeline": "if (parse_cookie(s, p, &s->cookie_dict))"
    },
    {
        "line": 125,
        "fullcodeline": "av_log(h, AV_LOG_WARNING, \"Unable to parse '%s'\\n\", p);"
    },
    {
        "line": 126,
        "fullcodeline": "} else if (!av_strcasecmp(tag, \"Icy-MetaInt\")) {"
    },
    {
        "line": 127,
        "fullcodeline": "s->icy_metaint = strtoull(p, NULL, 10);"
    },
    {
        "line": 128,
        "fullcodeline": "} else if (!av_strncasecmp(tag, \"Icy-\", 4)) {"
    },
    {
        "line": 129,
        "fullcodeline": "if ((ret = parse_icy(s, tag, p)) < 0)"
    },
    {
        "line": 131,
        "fullcodeline": "} else if (!av_strcasecmp(tag, \"Content-Encoding\")) {"
    },
    {
        "line": 132,
        "fullcodeline": "if ((ret = parse_content_encoding(h, p)) < 0)"
    }
]