[
    {
        "line": 10,
        "fullcodeline": "PROCNAME(\"pixFillMapHoles\");"
    },
    {
        "line": 18,
        "fullcodeline": "pixGetDimensions(pix, &w, &h, NULL);"
    },
    {
        "line": 19,
        "fullcodeline": "na = numaCreate(0);  /* holds flag for which columns have data */"
    },
    {
        "line": 20,
        "fullcodeline": "nmiss = 0;"
    },
    {
        "line": 21,
        "fullcodeline": "valtest = (filltype == L_FILL_WHITE) ? 255 : 0;"
    },
    {
        "line": 50,
        "fullcodeline": "numaAddNumber(na, 0);  /* last column */"
    },
    {
        "line": 88,
        "fullcodeline": "numaDestroy(&na);"
    },
    {
        "line": 12,
        "fullcodeline": "if (!pix || pixGetDepth(pix) != 8)"
    },
    {
        "line": 14,
        "fullcodeline": "if (pixGetColormap(pix))"
    },
    {
        "line": 22,
        "fullcodeline": "for (j = 0; j < nx; j++) {  /* do it by columns */"
    },
    {
        "line": 52,
        "fullcodeline": "if (nmiss == nx) {  /* no data in any column! */"
    },
    {
        "line": 59,
        "fullcodeline": "if (nmiss > 0) {  /* replicate columns */"
    },
    {
        "line": 81,
        "fullcodeline": "if (w > nx) {  /* replicate the last column */"
    },
    {
        "line": 23,
        "fullcodeline": "found = FALSE;"
    },
    {
        "line": 53,
        "fullcodeline": "numaDestroy(&na);"
    },
    {
        "line": 54,
        "fullcodeline": "L_WARNING(\"no bg found; no data in any column\\n\", procName);"
    },
    {
        "line": 61,
        "fullcodeline": "goodcol = 0;"
    },
    {
        "line": 13,
        "fullcodeline": "return ERROR_INT(\"pix not defined or not 8 bpp\", procName, 1);"
    },
    {
        "line": 15,
        "fullcodeline": "return ERROR_INT(\"pix is colormapped\", procName, 1);"
    },
    {
        "line": 24,
        "fullcodeline": "for (i = 0; i < ny; i++) {"
    },
    {
        "line": 32,
        "fullcodeline": "if (found == FALSE) {"
    },
    {
        "line": 62,
        "fullcodeline": "for (j = 0; j < w; j++) {"
    },
    {
        "line": 69,
        "fullcodeline": "if (goodcol > 0) {  /* copy cols backward */"
    },
    {
        "line": 73,
        "fullcodeline": "for (j = goodcol + 1; j < w; j++) {   /* copy cols forward */"
    },
    {
        "line": 82,
        "fullcodeline": "for (i = 0; i < h; i++) {"
    },
    {
        "line": 25,
        "fullcodeline": "pixGetPixel(pix, j, i, &val);"
    },
    {
        "line": 33,
        "fullcodeline": "numaAddNumber(na, 0);  /* no data in the column */"
    },
    {
        "line": 34,
        "fullcodeline": "nmiss++;"
    },
    {
        "line": 63,
        "fullcodeline": "numaGetIValue(na, j, &ival);"
    },
    {
        "line": 74,
        "fullcodeline": "numaGetIValue(na, j, &ival);"
    },
    {
        "line": 83,
        "fullcodeline": "pixGetPixel(pix, w - 2, i, &val);"
    },
    {
        "line": 84,
        "fullcodeline": "pixSetPixel(pix, w - 1, i, val);"
    },
    {
        "line": 26,
        "fullcodeline": "if (val != valtest) {"
    },
    {
        "line": 37,
        "fullcodeline": "numaAddNumber(na, 1);  /* data in the column */"
    },
    {
        "line": 40,
        "fullcodeline": "pixGetPixel(pix, j, 0, &lastval);"
    },
    {
        "line": 64,
        "fullcodeline": "if (ival == 1) {"
    },
    {
        "line": 70,
        "fullcodeline": "for (j = goodcol - 1; j >= 0; j--)"
    },
    {
        "line": 71,
        "fullcodeline": "pixRasterop(pix, j, 0, 1, h, PIX_SRC, pix, j + 1, 0);"
    },
    {
        "line": 75,
        "fullcodeline": "if (ival == 0) {"
    },
    {
        "line": 27,
        "fullcodeline": "y = i;"
    },
    {
        "line": 28,
        "fullcodeline": "found = TRUE;"
    },
    {
        "line": 38,
        "fullcodeline": "for (i = y - 1; i >= 0; i--)  /* replicate upwards to top */"
    },
    {
        "line": 39,
        "fullcodeline": "pixSetPixel(pix, j, i, val);"
    },
    {
        "line": 41,
        "fullcodeline": "for (i = 1; i < h; i++) {  /* set going down to bottom */"
    },
    {
        "line": 65,
        "fullcodeline": "goodcol = j;"
    },
    {
        "line": 77,
        "fullcodeline": "pixRasterop(pix, j, 0, 1, h, PIX_SRC, pix, j - 1, 0);"
    },
    {
        "line": 42,
        "fullcodeline": "pixGetPixel(pix, j, i, &val);"
    },
    {
        "line": 43,
        "fullcodeline": "if (val == valtest)"
    },
    {
        "line": 44,
        "fullcodeline": "pixSetPixel(pix, j, i, lastval);"
    },
    {
        "line": 46,
        "fullcodeline": "lastval = val;"
    }
]