[
    {
        "line": 13,
        "fullcodeline": "lept_mkdir(\"lept/adapt\");  // REMOVE?"
    },
    {
        "line": 15,
        "fullcodeline": "pixs = pixRead(\"wet-day.jpg\");"
    },
    {
        "line": 16,
        "fullcodeline": "pixa = pixaCreate(0);"
    },
    {
        "line": 17,
        "fullcodeline": "pixg = pixConvertRGBToGray(pixs, 0.33, 0.34, 0.33);"
    },
    {
        "line": 18,
        "fullcodeline": "pixaAddPix(pixa, pixs, L_INSERT);"
    },
    {
        "line": 19,
        "fullcodeline": "pixaAddPix(pixa, pixg, L_INSERT);"
    },
    {
        "line": 20,
        "fullcodeline": "pixGetDimensions(pixs, &w, &h, NULL);"
    },
    {
        "line": 23,
        "fullcodeline": "startTimer();"
    },
    {
        "line": 24,
        "fullcodeline": "pixim = pixCreate(w, h, 1);"
    },
    {
        "line": 25,
        "fullcodeline": "pixRasterop(pixim, XS, YS, WS, HS, PIX_SET, NULL, 0, 0);"
    },
    {
        "line": 26,
        "fullcodeline": "pixGetBackgroundGrayMap(pixg, pixim, SIZE_X, SIZE_Y,"
    },
    {
        "line": 28,
        "fullcodeline": "fprintf(stderr, \"Time for gray adaptmap gen: %7.3f\\n\", stopTimer());"
    },
    {
        "line": 29,
        "fullcodeline": "regTestWritePixAndCheck(rp, pixgm, IFF_PNG);  /* 0 */"
    },
    {
        "line": 30,
        "fullcodeline": "pixaAddPix(pixa, pixgm, L_INSERT);"
    },
    {
        "line": 32,
        "fullcodeline": "startTimer();"
    },
    {
        "line": 33,
        "fullcodeline": "pixmi = pixGetInvBackgroundMap(pixgm, BGVAL, SMOOTH_X, SMOOTH_Y);"
    },
    {
        "line": 34,
        "fullcodeline": "fprintf(stderr, \"Time for gray inv map generation: %7.3f\\n\", stopTimer());"
    },
    {
        "line": 35,
        "fullcodeline": "regTestWritePixAndCheck(rp, pixmi, IFF_PNG);  /* 1 */"
    },
    {
        "line": 36,
        "fullcodeline": "pixaAddPix(pixa, pixmi, L_INSERT);"
    },
    {
        "line": 38,
        "fullcodeline": "startTimer();"
    },
    {
        "line": 39,
        "fullcodeline": "pix1 = pixApplyInvBackgroundGrayMap(pixg, pixmi, SIZE_X, SIZE_Y);"
    },
    {
        "line": 40,
        "fullcodeline": "fprintf(stderr, \"Time to apply gray inv map: %7.3f\\n\", stopTimer());"
    },
    {
        "line": 41,
        "fullcodeline": "regTestWritePixAndCheck(rp, pix1, IFF_JFIF_JPEG);  /* 2 */"
    },
    {
        "line": 42,
        "fullcodeline": "pixaAddPix(pixa, pix1, L_INSERT);"
    },
    {
        "line": 44,
        "fullcodeline": "pix2 = pixGammaTRCMasked(NULL, pix1, pixim, 1.0, 0, 190);"
    },
    {
        "line": 45,
        "fullcodeline": "pixInvert(pixim, pixim);"
    },
    {
        "line": 46,
        "fullcodeline": "pixGammaTRCMasked(pix2, pix2, pixim, 1.0, 60, 190);"
    },
    {
        "line": 47,
        "fullcodeline": "regTestWritePixAndCheck(rp, pix2, IFF_JFIF_JPEG);  /* 3 */"
    },
    {
        "line": 48,
        "fullcodeline": "pixaAddPix(pixa, pix2, L_INSERT);"
    },
    {
        "line": 49,
        "fullcodeline": "pixDestroy(&pixim);"
    },
    {
        "line": 52,
        "fullcodeline": "startTimer();"
    },
    {
        "line": 53,
        "fullcodeline": "pixim = pixCreate(w, h, 1);"
    },
    {
        "line": 54,
        "fullcodeline": "pixRasterop(pixim, XS, YS, WS, HS, PIX_SET, NULL, 0, 0);"
    },
    {
        "line": 55,
        "fullcodeline": "pixGetBackgroundRGBMap(pixs, pixim, NULL, SIZE_X, SIZE_Y,"
    },
    {
        "line": 58,
        "fullcodeline": "fprintf(stderr, \"Time for color adaptmap gen: %7.3f\\n\", stopTimer());"
    },
    {
        "line": 59,
        "fullcodeline": "regTestWritePixAndCheck(rp, pixmr, IFF_PNG);  /* 4 */"
    },
    {
        "line": 60,
        "fullcodeline": "regTestWritePixAndCheck(rp, pixmg, IFF_PNG);  /* 5 */"
    },
    {
        "line": 61,
        "fullcodeline": "regTestWritePixAndCheck(rp, pixmb, IFF_PNG);  /* 6 */"
    },
    {
        "line": 62,
        "fullcodeline": "pixaAddPix(pixa, pixmr, L_INSERT);"
    },
    {
        "line": 63,
        "fullcodeline": "pixaAddPix(pixa, pixmg, L_INSERT);"
    },
    {
        "line": 64,
        "fullcodeline": "pixaAddPix(pixa, pixmb, L_INSERT);"
    },
    {
        "line": 66,
        "fullcodeline": "startTimer();"
    },
    {
        "line": 67,
        "fullcodeline": "pixmri = pixGetInvBackgroundMap(pixmr, BGVAL, SMOOTH_X, SMOOTH_Y);"
    },
    {
        "line": 68,
        "fullcodeline": "pixmgi = pixGetInvBackgroundMap(pixmg, BGVAL, SMOOTH_X, SMOOTH_Y);"
    },
    {
        "line": 69,
        "fullcodeline": "pixmbi = pixGetInvBackgroundMap(pixmb, BGVAL, SMOOTH_X, SMOOTH_Y);"
    },
    {
        "line": 70,
        "fullcodeline": "fprintf(stderr, \"Time for color inv map generation: %7.3f\\n\", stopTimer());"
    },
    {
        "line": 71,
        "fullcodeline": "regTestWritePixAndCheck(rp, pixmri, IFF_PNG);  /* 7 */"
    },
    {
        "line": 72,
        "fullcodeline": "regTestWritePixAndCheck(rp, pixmgi, IFF_PNG);  /* 8 */"
    },
    {
        "line": 73,
        "fullcodeline": "regTestWritePixAndCheck(rp, pixmbi, IFF_PNG);  /* 9 */"
    },
    {
        "line": 74,
        "fullcodeline": "pixaAddPix(pixa, pixmri, L_INSERT);"
    },
    {
        "line": 75,
        "fullcodeline": "pixaAddPix(pixa, pixmgi, L_INSERT);"
    },
    {
        "line": 76,
        "fullcodeline": "pixaAddPix(pixa, pixmbi, L_INSERT);"
    },
    {
        "line": 78,
        "fullcodeline": "startTimer();"
    },
    {
        "line": 79,
        "fullcodeline": "pix1 = pixApplyInvBackgroundRGBMap(pixs, pixmri, pixmgi, pixmbi,"
    },
    {
        "line": 81,
        "fullcodeline": "fprintf(stderr, \"Time to apply color inv maps: %7.3f\\n\", stopTimer());"
    },
    {
        "line": 82,
        "fullcodeline": "regTestWritePixAndCheck(rp, pix1, IFF_JFIF_JPEG);  /* 10 */"
    },
    {
        "line": 83,
        "fullcodeline": "pixaAddPix(pixa, pix1, L_INSERT);"
    },
    {
        "line": 85,
        "fullcodeline": "pix2 = pixGammaTRCMasked(NULL, pix1, pixim, 1.0, 0, 190);"
    },
    {
        "line": 86,
        "fullcodeline": "pixInvert(pixim, pixim);"
    },
    {
        "line": 87,
        "fullcodeline": "pixGammaTRCMasked(pix2, pix2, pixim, 1.0, 60, 190);"
    },
    {
        "line": 88,
        "fullcodeline": "regTestWritePixAndCheck(rp, pix2, IFF_JFIF_JPEG);  /* 11 */"
    },
    {
        "line": 89,
        "fullcodeline": "pixaAddPix(pixa, pix2, L_INSERT);"
    },
    {
        "line": 90,
        "fullcodeline": "pixDestroy(&pixim);"
    },
    {
        "line": 93,
        "fullcodeline": "startTimer();"
    },
    {
        "line": 94,
        "fullcodeline": "pixim = pixCreate(w, h, 1);"
    },
    {
        "line": 95,
        "fullcodeline": "pixRasterop(pixim, XS, YS, WS, HS, PIX_SET, NULL, 0, 0);"
    },
    {
        "line": 96,
        "fullcodeline": "pix1 = pixBackgroundNorm(pixs, pixim, NULL, 5, 10, BINTHRESH, 20,"
    },
    {
        "line": 98,
        "fullcodeline": "fprintf(stderr, \"Time for bg normalization: %7.3f\\n\", stopTimer());"
    },
    {
        "line": 99,
        "fullcodeline": "regTestWritePixAndCheck(rp, pix1, IFF_JFIF_JPEG);  /* 12 */"
    },
    {
        "line": 100,
        "fullcodeline": "pixaAddPix(pixa, pix1, L_INSERT);"
    },
    {
        "line": 102,
        "fullcodeline": "pix2 = pixGammaTRCMasked(NULL, pix1, pixim, 1.0, 0, 190);"
    },
    {
        "line": 103,
        "fullcodeline": "pixInvert(pixim, pixim);"
    },
    {
        "line": 104,
        "fullcodeline": "pixGammaTRCMasked(pix2, pix2, pixim, 1.0, 60, 190);"
    },
    {
        "line": 105,
        "fullcodeline": "regTestWritePixAndCheck(rp, pix2, IFF_JFIF_JPEG);  /* 13 */"
    },
    {
        "line": 106,
        "fullcodeline": "pixaAddPix(pixa, pix2, L_INSERT);"
    },
    {
        "line": 107,
        "fullcodeline": "pixDestroy(&pixim);"
    },
    {
        "line": 110,
        "fullcodeline": "pixa2 = pixaCreate(3);"
    },
    {
        "line": 111,
        "fullcodeline": "pix1 = pixRead(\"weasel8.png\");  /* use this as the map */"
    },
    {
        "line": 112,
        "fullcodeline": "pixGammaTRC(pix1, pix1, 1.0, 0, 270);  /* darken white pixels */"
    },
    {
        "line": 113,
        "fullcodeline": "pixaAddPix(pixa2, pix1, L_COPY);"
    },
    {
        "line": 114,
        "fullcodeline": "pixGetDimensions(pix1, &w, &h, NULL);"
    },
    {
        "line": 115,
        "fullcodeline": "pixRasterop(pix1, 0, 0, 5, h, PIX_SET, NULL, 0, 0);  /* add white holes */"
    },
    {
        "line": 116,
        "fullcodeline": "pixRasterop(pix1, 20, 0, 2, h, PIX_SET, NULL, 0, 0);"
    },
    {
        "line": 117,
        "fullcodeline": "pixRasterop(pix1, 40, 0, 3, h, PIX_SET, NULL, 0, 0);"
    },
    {
        "line": 118,
        "fullcodeline": "pixRasterop(pix1, 0, 0, w, 3, PIX_SET, NULL, 0, 0);"
    },
    {
        "line": 119,
        "fullcodeline": "pixRasterop(pix1, 0, 15, w, 3, PIX_SET, NULL, 0, 0);"
    },
    {
        "line": 120,
        "fullcodeline": "pixRasterop(pix1, 0, 35, w, 2, PIX_SET, NULL, 0, 0);"
    },
    {
        "line": 121,
        "fullcodeline": "pixaAddPix(pixa2, pix1, L_COPY);"
    },
    {
        "line": 122,
        "fullcodeline": "pixFillMapHoles(pix1, w, h, L_FILL_WHITE);"
    },
    {
        "line": 123,
        "fullcodeline": "pixaAddPix(pixa2, pix1, L_INSERT);"
    },
    {
        "line": 124,
        "fullcodeline": "pix2 = pixaDisplayTiledInColumns(pixa2, 3, 1.0, 20, 1);"
    },
    {
        "line": 125,
        "fullcodeline": "regTestWritePixAndCheck(rp, pix2, IFF_PNG);  /* 14 */"
    },
    {
        "line": 126,
        "fullcodeline": "pixDisplayWithTitle(pix2, 50, 850, NULL, rp->display);"
    },
    {
        "line": 127,
        "fullcodeline": "pixaDestroy(&pixa2);"
    },
    {
        "line": 128,
        "fullcodeline": "pixDestroy(&pix2);"
    },
    {
        "line": 131,
        "fullcodeline": "pix1 = pixaDisplayTiledAndScaled(pixa, 32, 400, 4, 0, 20, 2);"
    },
    {
        "line": 132,
        "fullcodeline": "pixWrite(\"/tmp/lept/adapt/results.jpg\", pix1, IFF_JFIF_JPEG);"
    },
    {
        "line": 133,
        "fullcodeline": "pixDisplayWithTitle(pix1, 50, 0, NULL, rp->display);"
    },
    {
        "line": 134,
        "fullcodeline": "pixDestroy(&pix1);"
    },
    {
        "line": 135,
        "fullcodeline": "pixaDestroy(&pixa);"
    },
    {
        "line": 10,
        "fullcodeline": "if (regTestSetup(argc, argv, &rp))"
    },
    {
        "line": 137,
        "fullcodeline": "return regTestCleanup(rp);"
    }
]