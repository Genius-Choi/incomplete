[
    {
        "line": 2,
        "fullcodeline": "u_int ret = 0, len, idx = in_len, out_idx = 0;"
    },
    {
        "line": 4,
        "fullcodeline": "len = (*in++)/2;"
    },
    {
        "line": 5,
        "fullcodeline": "out_len--;"
    },
    {
        "line": 6,
        "fullcodeline": "out[out_idx] = 0;"
    },
    {
        "line": 8,
        "fullcodeline": "if((len > out_len) || (len < 1) || ((2*len) > in_len))"
    },
    {
        "line": 11,
        "fullcodeline": "while((len--) && (out_idx < out_len)) {"
    },
    {
        "line": 25,
        "fullcodeline": "if(out_idx > 0) {"
    },
    {
        "line": 17,
        "fullcodeline": "out[out_idx] = ((in[0] - 'A') << 4) + (in[1] - 'A');"
    },
    {
        "line": 18,
        "fullcodeline": "in += 2, idx -= 2;"
    },
    {
        "line": 26,
        "fullcodeline": "out[out_idx] = 0;"
    },
    {
        "line": 27,
        "fullcodeline": "out_idx--;"
    },
    {
        "line": 9,
        "fullcodeline": "return(-1);"
    },
    {
        "line": 12,
        "fullcodeline": "if((idx < 2) || (in[0] < 'A') || (in[0] > 'P') || (in[1] < 'A') || (in[1] > 'P')) {"
    },
    {
        "line": 20,
        "fullcodeline": "if(isprint(out[out_idx]))"
    },
    {
        "line": 29,
        "fullcodeline": "while((out_idx > 0) && (out[out_idx] == ' ')) {"
    },
    {
        "line": 13,
        "fullcodeline": "out[out_idx] = 0;"
    },
    {
        "line": 21,
        "fullcodeline": "out_idx++, ret++;"
    },
    {
        "line": 30,
        "fullcodeline": "out[out_idx] = 0;"
    },
    {
        "line": 31,
        "fullcodeline": "out_idx--;"
    }
]