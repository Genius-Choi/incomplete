[
    {
        "line": 6,
        "fullcodeline": "with warnings.catch_warnings():"
    },
    {
        "line": 7,
        "fullcodeline": "warnings.simplefilter('ignore')"
    },
    {
        "line": 8,
        "fullcodeline": "ret = []"
    },
    {
        "line": 9,
        "fullcodeline": "if 'dst_binary' in diff:"
    },
    {
        "line": 11,
        "fullcodeline": "if 'src_binary' in diff:"
    },
    {
        "line": 13,
        "fullcodeline": "if 'dst_larger' in diff:"
    },
    {
        "line": 15,
        "fullcodeline": "if 'src_larger' in diff:"
    },
    {
        "line": 17,
        "fullcodeline": "if 'before' in diff and 'after' in diff:"
    },
    {
        "line": 10,
        "fullcodeline": "ret.append(\"diff skipped: destination file appears to be binary\\n\")"
    },
    {
        "line": 12,
        "fullcodeline": "ret.append(\"diff skipped: source file appears to be binary\\n\")"
    },
    {
        "line": 14,
        "fullcodeline": "ret.append(\"diff skipped: destination file size is greater than %d\\n\" % diff['dst_larger'])"
    },
    {
        "line": 16,
        "fullcodeline": "ret.append(\"diff skipped: source file size is greater than %d\\n\" % diff['src_larger'])"
    },
    {
        "line": 26,
        "fullcodeline": "differ = difflib.unified_diff(to_unicode(diff['before']).splitlines(True), to_unicode(diff['after']).splitlines(True), before_header, after_header, '', '', 10)"
    },
    {
        "line": 29,
        "fullcodeline": "return u\"\".join(ret)"
    },
    {
        "line": 18,
        "fullcodeline": "if 'before_header' in diff:"
    },
    {
        "line": 22,
        "fullcodeline": "if 'after_header' in diff:"
    },
    {
        "line": 27,
        "fullcodeline": "for line in list(differ):"
    },
    {
        "line": 19,
        "fullcodeline": "before_header = \"before: %s\" % diff['before_header']"
    },
    {
        "line": 21,
        "fullcodeline": "before_header = 'before'"
    },
    {
        "line": 23,
        "fullcodeline": "after_header = \"after: %s\" % diff['after_header']"
    },
    {
        "line": 25,
        "fullcodeline": "after_header = 'after'"
    },
    {
        "line": 28,
        "fullcodeline": "ret.append(line)"
    }
]