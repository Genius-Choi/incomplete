[
    {
        "line": 6,
        "fullcodeline": "if not from_remote and not from_inventory:"
    },
    {
        "line": 8,
        "fullcodeline": "if isinstance(orig_data, dict):"
    },
    {
        "line": 7,
        "fullcodeline": "raise errors.AnsibleErrors(\"when cleaning data, you must specify either from_remote or from_inventory\")"
    },
    {
        "line": 9,
        "fullcodeline": "data = orig_data.copy()"
    },
    {
        "line": 10,
        "fullcodeline": "for key in data:"
    },
    {
        "line": 16,
        "fullcodeline": "elif isinstance(orig_data, list):"
    },
    {
        "line": 17,
        "fullcodeline": "data = orig_data[:]"
    },
    {
        "line": 11,
        "fullcodeline": "new_key = _clean_data_struct(key, from_remote, from_inventory)"
    },
    {
        "line": 12,
        "fullcodeline": "new_val = _clean_data_struct(data[key], from_remote, from_inventory)"
    },
    {
        "line": 15,
        "fullcodeline": "data[new_key] = new_val"
    },
    {
        "line": 18,
        "fullcodeline": "for i in range(0, len(data)):"
    },
    {
        "line": 20,
        "fullcodeline": "elif isinstance(orig_data, basestring):"
    },
    {
        "line": 13,
        "fullcodeline": "if key != new_key:"
    },
    {
        "line": 21,
        "fullcodeline": "data = _clean_data(orig_data, from_remote, from_inventory)"
    },
    {
        "line": 23,
        "fullcodeline": "data = orig_data"
    },
    {
        "line": 14,
        "fullcodeline": "del data[key]"
    },
    {
        "line": 19,
        "fullcodeline": "data[i] = _clean_data_struct(data[i], from_remote, from_inventory)"
    }
]