[
    {
        "line": 3,
        "fullcodeline": "struct strbuf buf = STRBUF_INIT;"
    },
    {
        "line": 7,
        "fullcodeline": "int lineno = 0;"
    },
    {
        "line": 19,
        "fullcodeline": "fp = xfdopen(fd, \"r\");"
    },
    {
        "line": 31,
        "fullcodeline": "CALLOC_ARRAY(res, 1);"
    },
    {
        "line": 38,
        "fullcodeline": "fclose(fp);"
    },
    {
        "line": 39,
        "fullcodeline": "strbuf_release(&buf);"
    },
    {
        "line": 10,
        "fullcodeline": "if (flags & READ_ATTR_NOFOLLOW)"
    },
    {
        "line": 15,
        "fullcodeline": "if (fd < 0) {"
    },
    {
        "line": 20,
        "fullcodeline": "if (fstat(fd, &st)) {"
    },
    {
        "line": 25,
        "fullcodeline": "if (st.st_size >= ATTR_MAX_FILE_SIZE) {"
    },
    {
        "line": 32,
        "fullcodeline": "while (strbuf_getline(&buf, fp) != EOF) {"
    },
    {
        "line": 11,
        "fullcodeline": "fd = open_nofollow(path, O_RDONLY);"
    },
    {
        "line": 16,
        "fullcodeline": "warn_on_fopen_errors(path);"
    },
    {
        "line": 21,
        "fullcodeline": "warning_errno(_(\"cannot fstat gitattributes file '%s'\"), path);"
    },
    {
        "line": 22,
        "fullcodeline": "fclose(fp);"
    },
    {
        "line": 26,
        "fullcodeline": "warning(_(\"ignoring overly large gitattributes file '%s'\"), path);"
    },
    {
        "line": 27,
        "fullcodeline": "fclose(fp);"
    },
    {
        "line": 35,
        "fullcodeline": "handle_attr_line(res, buf.buf, path, ++lineno, flags);"
    },
    {
        "line": 13,
        "fullcodeline": "fd = open(path, O_RDONLY);"
    },
    {
        "line": 33,
        "fullcodeline": "if (!lineno && starts_with(buf.buf, utf8_bom))"
    },
    {
        "line": 34,
        "fullcodeline": "strbuf_remove(&buf, 0, strlen(utf8_bom));"
    }
]