[
    {
        "line": 5,
        "fullcodeline": "struct strbuf local_sb = STRBUF_INIT;"
    },
    {
        "line": 6,
        "fullcodeline": "size_t total_consumed = 0;"
    },
    {
        "line": 7,
        "fullcodeline": "int len, padding = c->padding;"
    },
    {
        "line": 32,
        "fullcodeline": "len = utf8_strnwidth(local_sb.buf, local_sb.len, 1);"
    },
    {
        "line": 100,
        "fullcodeline": "strbuf_release(&local_sb);"
    },
    {
        "line": 101,
        "fullcodeline": "c->flush_type = no_flush;"
    },
    {
        "line": 9,
        "fullcodeline": "if (padding < 0) {"
    },
    {
        "line": 34,
        "fullcodeline": "if (c->flush_type == flush_left_and_steal) {"
    },
    {
        "line": 63,
        "fullcodeline": "if (len > padding) {"
    },
    {
        "line": 10,
        "fullcodeline": "const char *start = strrchr(sb->buf, '\\n');"
    },
    {
        "line": 14,
        "fullcodeline": "occupied = utf8_strnwidth(start, strlen(start), 1);"
    },
    {
        "line": 15,
        "fullcodeline": "occupied += c->pretty_ctx->graph_width;"
    },
    {
        "line": 16,
        "fullcodeline": "padding = (-padding) - occupied;"
    },
    {
        "line": 19,
        "fullcodeline": "int modifier = *placeholder == 'C';"
    },
    {
        "line": 20,
        "fullcodeline": "size_t consumed = format_commit_one(&local_sb, placeholder, c);"
    },
    {
        "line": 21,
        "fullcodeline": "total_consumed += consumed;"
    },
    {
        "line": 26,
        "fullcodeline": "placeholder += consumed;"
    },
    {
        "line": 29,
        "fullcodeline": "placeholder++;"
    },
    {
        "line": 30,
        "fullcodeline": "total_consumed++;"
    },
    {
        "line": 35,
        "fullcodeline": "const char *ch = sb->buf + sb->len - 1;"
    },
    {
        "line": 59,
        "fullcodeline": "strbuf_setlen(sb, ch + 1 - sb->buf);"
    },
    {
        "line": 60,
        "fullcodeline": "c->flush_type = flush_left;"
    },
    {
        "line": 84,
        "fullcodeline": "strbuf_addbuf(sb, &local_sb);"
    },
    {
        "line": 12,
        "fullcodeline": "if (!start)"
    },
    {
        "line": 23,
        "fullcodeline": "if (!modifier)"
    },
    {
        "line": 27,
        "fullcodeline": "if (*placeholder != '%')"
    },
    {
        "line": 36,
        "fullcodeline": "while (len > padding && ch > sb->buf) {"
    },
    {
        "line": 86,
        "fullcodeline": "size_t sb_len = sb->len, offset = 0;"
    },
    {
        "line": 95,
        "fullcodeline": "padding = padding - len + local_sb.len;"
    },
    {
        "line": 96,
        "fullcodeline": "strbuf_addchars(sb, ' ', padding);"
    },
    {
        "line": 97,
        "fullcodeline": "memcpy(sb->buf + sb_len + offset, local_sb.buf,"
    },
    {
        "line": 13,
        "fullcodeline": "start = sb->buf;"
    },
    {
        "line": 46,
        "fullcodeline": "p = ch - 1;"
    },
    {
        "line": 56,
        "fullcodeline": "strbuf_insert(&local_sb, 0, p, ch + 1 - p);"
    },
    {
        "line": 57,
        "fullcodeline": "ch = p - 1;"
    },
    {
        "line": 66,
        "fullcodeline": "strbuf_utf8_replace(&local_sb,"
    },
    {
        "line": 71,
        "fullcodeline": "strbuf_utf8_replace(&local_sb,"
    },
    {
        "line": 77,
        "fullcodeline": "strbuf_utf8_replace(&local_sb,"
    },
    {
        "line": 87,
        "fullcodeline": "if (c->flush_type == flush_left)"
    },
    {
        "line": 38,
        "fullcodeline": "if (*ch == ' ') {"
    },
    {
        "line": 44,
        "fullcodeline": "if (*ch != 'm')"
    },
    {
        "line": 47,
        "fullcodeline": "while (p > sb->buf && ch - p < 10 && *p != '\\033')"
    },
    {
        "line": 48,
        "fullcodeline": "p--;"
    },
    {
        "line": 49,
        "fullcodeline": "if (*p != '\\033' ||"
    },
    {
        "line": 67,
        "fullcodeline": "0, len - (padding - 2),"
    },
    {
        "line": 72,
        "fullcodeline": "padding / 2 - 1,"
    },
    {
        "line": 73,
        "fullcodeline": "len - (padding - 2),"
    },
    {
        "line": 78,
        "fullcodeline": "padding - 2, len - (padding - 2),"
    },
    {
        "line": 88,
        "fullcodeline": "offset = padding - len;"
    },
    {
        "line": 39,
        "fullcodeline": "ch--;"
    },
    {
        "line": 40,
        "fullcodeline": "padding++;"
    },
    {
        "line": 50,
        "fullcodeline": "ch + 1 - p != display_mode_esc_sequence_len(p))"
    },
    {
        "line": 89,
        "fullcodeline": "else if (c->flush_type == flush_both)"
    },
    {
        "line": 90,
        "fullcodeline": "offset = (padding - len) / 2;"
    }
]