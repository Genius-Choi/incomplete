[
    {
        "line": 3,
        "fullcodeline": "struct snmp_pdu *res = NULL;"
    },
    {
        "line": 8,
        "fullcodeline": "size_t oid_list_len = data->values_len + 1;"
    },
    {
        "line": 11,
        "fullcodeline": "oid_t oid_list[oid_list_len];"
    },
    {
        "line": 14,
        "fullcodeline": "_Bool oid_list_todo[oid_list_len];"
    },
    {
        "line": 28,
        "fullcodeline": "DEBUG(\"snmp plugin: csnmp_read_table (host = %s, data = %s)\", host->name,"
    },
    {
        "line": 36,
        "fullcodeline": "ds = plugin_get_ds(data->type);"
    },
    {
        "line": 48,
        "fullcodeline": "assert(data->values_len > 0);"
    },
    {
        "line": 51,
        "fullcodeline": "memcpy(oid_list, data->values, data->values_len * sizeof(oid_t));"
    },
    {
        "line": 63,
        "fullcodeline": "value_list_head = calloc(data->values_len, sizeof(*value_list_head));"
    },
    {
        "line": 64,
        "fullcodeline": "value_list_tail = calloc(data->values_len, sizeof(*value_list_tail));"
    },
    {
        "line": 72,
        "fullcodeline": "instance_list_head = NULL;"
    },
    {
        "line": 73,
        "fullcodeline": "instance_list_tail = NULL;"
    },
    {
        "line": 75,
        "fullcodeline": "status = 0;"
    },
    {
        "line": 231,
        "fullcodeline": "res = NULL;"
    },
    {
        "line": 235,
        "fullcodeline": "req = NULL;"
    },
    {
        "line": 255,
        "fullcodeline": "sfree(value_list_head);"
    },
    {
        "line": 256,
        "fullcodeline": "sfree(value_list_tail);"
    },
    {
        "line": 31,
        "fullcodeline": "if (host->sess_handle == NULL) {"
    },
    {
        "line": 37,
        "fullcodeline": "if (!ds) {"
    },
    {
        "line": 42,
        "fullcodeline": "if (ds->ds_num != data->values_len) {"
    },
    {
        "line": 52,
        "fullcodeline": "if (data->instance.oid.oid_len > 0)"
    },
    {
        "line": 57,
        "fullcodeline": "for (i = 0; i < oid_list_len; i++)"
    },
    {
        "line": 58,
        "fullcodeline": "oid_list_todo[i] = 1;"
    },
    {
        "line": 65,
        "fullcodeline": "if ((value_list_head == NULL) || (value_list_tail == NULL)) {"
    },
    {
        "line": 76,
        "fullcodeline": "while (status == 0) {"
    },
    {
        "line": 229,
        "fullcodeline": "if (res != NULL)"
    },
    {
        "line": 233,
        "fullcodeline": "if (req != NULL)"
    },
    {
        "line": 237,
        "fullcodeline": "if (status == 0)"
    },
    {
        "line": 241,
        "fullcodeline": "while (instance_list_head != NULL) {"
    },
    {
        "line": 247,
        "fullcodeline": "for (i = 0; i < data->values_len; i++) {"
    },
    {
        "line": 32,
        "fullcodeline": "DEBUG(\"snmp plugin: csnmp_read_table: host->sess_handle == NULL\");"
    },
    {
        "line": 38,
        "fullcodeline": "ERROR(\"snmp plugin: DataSet `%s' not defined.\", data->type);"
    },
    {
        "line": 43,
        "fullcodeline": "ERROR(\"snmp plugin: DataSet `%s' requires %zu values, but config talks \""
    },
    {
        "line": 53,
        "fullcodeline": "memcpy(oid_list + data->values_len, &data->instance.oid, sizeof(oid_t));"
    },
    {
        "line": 66,
        "fullcodeline": "ERROR(\"snmp plugin: csnmp_read_table: calloc failed.\");"
    },
    {
        "line": 67,
        "fullcodeline": "sfree(value_list_head);"
    },
    {
        "line": 68,
        "fullcodeline": "sfree(value_list_tail);"
    },
    {
        "line": 79,
        "fullcodeline": "req = snmp_pdu_create(SNMP_MSG_GETNEXT);"
    },
    {
        "line": 86,
        "fullcodeline": "oid_list_todo_num = 0;"
    },
    {
        "line": 102,
        "fullcodeline": "res = NULL;"
    },
    {
        "line": 103,
        "fullcodeline": "status = snmp_sess_synch_response(host->sess_handle, req, &res);"
    },
    {
        "line": 126,
        "fullcodeline": "status = 0;"
    },
    {
        "line": 127,
        "fullcodeline": "assert(res != NULL);"
    },
    {
        "line": 128,
        "fullcodeline": "c_release(LOG_INFO, &host->complaint,"
    },
    {
        "line": 132,
        "fullcodeline": "vb = res->variables;"
    },
    {
        "line": 226,
        "fullcodeline": "res = NULL;"
    },
    {
        "line": 230,
        "fullcodeline": "snmp_free_pdu(res);"
    },
    {
        "line": 234,
        "fullcodeline": "snmp_free_pdu(req);"
    },
    {
        "line": 238,
        "fullcodeline": "csnmp_dispatch_table(host, data, instance_list_head, value_list_head);"
    },
    {
        "line": 242,
        "fullcodeline": "csnmp_list_instances_t *next = instance_list_head->next;"
    },
    {
        "line": 243,
        "fullcodeline": "sfree(instance_list_head);"
    },
    {
        "line": 244,
        "fullcodeline": "instance_list_head = next;"
    },
    {
        "line": 33,
        "fullcodeline": "return (-1);"
    },
    {
        "line": 39,
        "fullcodeline": "return (-1);"
    },
    {
        "line": 46,
        "fullcodeline": "return (-1);"
    },
    {
        "line": 55,
        "fullcodeline": "oid_list_len--;"
    },
    {
        "line": 69,
        "fullcodeline": "return (-1);"
    },
    {
        "line": 80,
        "fullcodeline": "if (req == NULL) {"
    },
    {
        "line": 87,
        "fullcodeline": "for (i = 0; i < oid_list_len; i++) {"
    },
    {
        "line": 95,
        "fullcodeline": "if (oid_list_todo_num == 0) {"
    },
    {
        "line": 104,
        "fullcodeline": "if ((status != STAT_SUCCESS) || (res == NULL)) {"
    },
    {
        "line": 133,
        "fullcodeline": "if (vb == NULL) {"
    },
    {
        "line": 138,
        "fullcodeline": "for (vb = res->variables, i = 0; (vb != NULL);"
    },
    {
        "line": 139,
        "fullcodeline": "vb = vb->next_variable, i++) {"
    },
    {
        "line": 224,
        "fullcodeline": "if (res != NULL)"
    },
    {
        "line": 248,
        "fullcodeline": "while (value_list_head[i] != NULL) {"
    },
    {
        "line": 81,
        "fullcodeline": "ERROR(\"snmp plugin: snmp_pdu_create failed.\");"
    },
    {
        "line": 82,
        "fullcodeline": "status = -1;"
    },
    {
        "line": 91,
        "fullcodeline": "oid_list_todo_num++;"
    },
    {
        "line": 92,
        "fullcodeline": "snmp_add_null_var(req, oid_list[i].oid, oid_list[i].oid_len);"
    },
    {
        "line": 97,
        "fullcodeline": "DEBUG(\"snmp plugin: all variables have left their subtree\");"
    },
    {
        "line": 98,
        "fullcodeline": "status = 0;"
    },
    {
        "line": 105,
        "fullcodeline": "char *errstr = NULL;"
    },
    {
        "line": 107,
        "fullcodeline": "snmp_sess_error(host->sess_handle, NULL, NULL, &errstr);"
    },
    {
        "line": 109,
        "fullcodeline": "c_complain(LOG_ERR, &host->complaint,"
    },
    {
        "line": 115,
        "fullcodeline": "res = NULL;"
    },
    {
        "line": 118,
        "fullcodeline": "req = NULL;"
    },
    {
        "line": 119,
        "fullcodeline": "sfree(errstr);"
    },
    {
        "line": 120,
        "fullcodeline": "csnmp_host_close_session(host);"
    },
    {
        "line": 122,
        "fullcodeline": "status = -1;"
    },
    {
        "line": 134,
        "fullcodeline": "status = -1;"
    },
    {
        "line": 219,
        "fullcodeline": "memcpy(oid_list[i].oid, vb->name, sizeof(oid) * vb->name_length);"
    },
    {
        "line": 220,
        "fullcodeline": "oid_list[i].oid_len = vb->name_length;"
    },
    {
        "line": 225,
        "fullcodeline": "snmp_free_pdu(res);"
    },
    {
        "line": 250,
        "fullcodeline": "sfree(value_list_head[i]);"
    },
    {
        "line": 251,
        "fullcodeline": "value_list_head[i] = next;"
    },
    {
        "line": 89,
        "fullcodeline": "if (!oid_list_todo[i])"
    },
    {
        "line": 111,
        "fullcodeline": "host->name, (errstr == NULL) ? \"Unknown problem\" : errstr);"
    },
    {
        "line": 113,
        "fullcodeline": "if (res != NULL)"
    },
    {
        "line": 141,
        "fullcodeline": "while ((i < oid_list_len) && !oid_list_todo[i])"
    },
    {
        "line": 142,
        "fullcodeline": "i++;"
    },
    {
        "line": 146,
        "fullcodeline": "if ((data->instance.oid.oid_len > 0) && (i == data->values_len)) {"
    },
    {
        "line": 114,
        "fullcodeline": "snmp_free_pdu(res);"
    },
    {
        "line": 147,
        "fullcodeline": "if ((vb->type == SNMP_ENDOFMIBVIEW) ||"
    },
    {
        "line": 159,
        "fullcodeline": "if (csnmp_instance_list_add(&instance_list_head, &instance_list_tail,"
    },
    {
        "line": 173,
        "fullcodeline": "csnmp_oid_init(&vb_name, vb->name, vb->name_length);"
    },
    {
        "line": 177,
        "fullcodeline": "ret = csnmp_oid_suffix(&suffix, &vb_name, data->values + i);"
    },
    {
        "line": 198,
        "fullcodeline": "vt = calloc(1, sizeof(*vt));"
    },
    {
        "line": 205,
        "fullcodeline": "vt->value ="
    },
    {
        "line": 208,
        "fullcodeline": "memcpy(&vt->suffix, &suffix, sizeof(vt->suffix));"
    },
    {
        "line": 209,
        "fullcodeline": "vt->next = NULL;"
    },
    {
        "line": 215,
        "fullcodeline": "value_list_tail[i] = vt;"
    },
    {
        "line": 148,
        "fullcodeline": "(snmp_oid_ncompare("
    },
    {
        "line": 151,
        "fullcodeline": "DEBUG(\"snmp plugin: host = %s; data = %s; Instance left its subtree.\","
    },
    {
        "line": 153,
        "fullcodeline": "oid_list_todo[i] = 0;"
    },
    {
        "line": 161,
        "fullcodeline": "ERROR(\"snmp plugin: host %s: csnmp_instance_list_add failed.\","
    },
    {
        "line": 163,
        "fullcodeline": "status = -1;"
    },
    {
        "line": 178,
        "fullcodeline": "if (ret != 0) {"
    },
    {
        "line": 189,
        "fullcodeline": "if ((value_list_tail[i] != NULL) &&"
    },
    {
        "line": 199,
        "fullcodeline": "if (vt == NULL) {"
    },
    {
        "line": 206,
        "fullcodeline": "csnmp_value_list_to_value(vb, ds->ds[i].type, data->scale,"
    },
    {
        "line": 211,
        "fullcodeline": "if (value_list_tail[i] == NULL)"
    },
    {
        "line": 179,
        "fullcodeline": "DEBUG(\"snmp plugin: host = %s; data = %s; i = %zu; \""
    },
    {
        "line": 182,
        "fullcodeline": "oid_list_todo[i] = 0;"
    },
    {
        "line": 190,
        "fullcodeline": "(csnmp_oid_compare(&suffix, &value_list_tail[i]->suffix) <= 0)) {"
    },
    {
        "line": 191,
        "fullcodeline": "DEBUG(\"snmp plugin: host = %s; data = %s; i = %zu; \""
    },
    {
        "line": 194,
        "fullcodeline": "oid_list_todo[i] = 0;"
    },
    {
        "line": 200,
        "fullcodeline": "ERROR(\"snmp plugin: calloc failed.\");"
    },
    {
        "line": 201,
        "fullcodeline": "status = -1;"
    },
    {
        "line": 212,
        "fullcodeline": "value_list_head[i] = vt;"
    },
    {
        "line": 214,
        "fullcodeline": "value_list_tail[i]->next = vt;"
    }
]