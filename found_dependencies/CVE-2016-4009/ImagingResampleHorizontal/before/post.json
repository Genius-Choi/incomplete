[
    {
        "line": 30,
        "fullcodeline": "filterscale = scale = (float) imIn->xsize / xsize;"
    },
    {
        "line": 33,
        "fullcodeline": "support = filterp->support;"
    },
    {
        "line": 39,
        "fullcodeline": "support = support * filterscale;"
    },
    {
        "line": 42,
        "fullcodeline": "kmax = (int) ceil(support) * 2 + 1;"
    },
    {
        "line": 45,
        "fullcodeline": "kk = malloc(xsize * kmax * sizeof(float));"
    },
    {
        "line": 49,
        "fullcodeline": "xbounds = malloc(xsize * 2 * sizeof(int));"
    },
    {
        "line": 79,
        "fullcodeline": "imOut = ImagingNew(imIn->mode, xsize, imIn->ysize);"
    },
    {
        "line": 86,
        "fullcodeline": "ImagingSectionEnter(&cookie);"
    },
    {
        "line": 178,
        "fullcodeline": "ImagingSectionLeave(&cookie);"
    },
    {
        "line": 179,
        "fullcodeline": "free(kk);"
    },
    {
        "line": 180,
        "fullcodeline": "free(xbounds);"
    },
    {
        "line": 35,
        "fullcodeline": "if (filterscale < 1.0) {"
    },
    {
        "line": 46,
        "fullcodeline": "if ( ! kk)"
    },
    {
        "line": 50,
        "fullcodeline": "if ( ! xbounds) {"
    },
    {
        "line": 55,
        "fullcodeline": "for (xx = 0; xx < xsize; xx++) {"
    },
    {
        "line": 80,
        "fullcodeline": "if ( ! imOut) {"
    },
    {
        "line": 88,
        "fullcodeline": "for (yy = 0; yy < imOut->ysize; yy++) {"
    },
    {
        "line": 15,
        "fullcodeline": "filterp = &LANCZOS;"
    },
    {
        "line": 18,
        "fullcodeline": "filterp = &BILINEAR;"
    },
    {
        "line": 21,
        "fullcodeline": "filterp = &BICUBIC;"
    },
    {
        "line": 36,
        "fullcodeline": "filterscale = 1.0;"
    },
    {
        "line": 51,
        "fullcodeline": "free(kk);"
    },
    {
        "line": 57,
        "fullcodeline": "center = (xx + 0.5) * scale;"
    },
    {
        "line": 58,
        "fullcodeline": "ww = 0.0;"
    },
    {
        "line": 59,
        "fullcodeline": "ss = 1.0 / filterscale;"
    },
    {
        "line": 60,
        "fullcodeline": "xmin = (int) floor(center - support);"
    },
    {
        "line": 75,
        "fullcodeline": "xbounds[xx * 2 + 0] = xmin;"
    },
    {
        "line": 76,
        "fullcodeline": "xbounds[xx * 2 + 1] = xmax;"
    },
    {
        "line": 81,
        "fullcodeline": "free(kk);"
    },
    {
        "line": 82,
        "fullcodeline": "free(xbounds);"
    },
    {
        "line": 24,
        "fullcodeline": "return (Imaging) ImagingError_ValueError("
    },
    {
        "line": 47,
        "fullcodeline": "return (Imaging) ImagingError_MemoryError();"
    },
    {
        "line": 52,
        "fullcodeline": "return (Imaging) ImagingError_MemoryError();"
    },
    {
        "line": 61,
        "fullcodeline": "if (xmin < 0)"
    },
    {
        "line": 64,
        "fullcodeline": "if (xmax > imIn->xsize)"
    },
    {
        "line": 66,
        "fullcodeline": "for (x = xmin; x < xmax; x++) {"
    },
    {
        "line": 71,
        "fullcodeline": "for (x = 0; x < xmax - xmin; x++) {"
    },
    {
        "line": 62,
        "fullcodeline": "xmin = 0;"
    },
    {
        "line": 63,
        "fullcodeline": "xmax = (int) ceil(center + support);"
    },
    {
        "line": 65,
        "fullcodeline": "xmax = imIn->xsize;"
    },
    {
        "line": 67,
        "fullcodeline": "float w = filterp->filter((x - center + 0.5) * ss) * ss;"
    },
    {
        "line": 68,
        "fullcodeline": "k[x - xmin] = w;"
    },
    {
        "line": 69,
        "fullcodeline": "ww += w;"
    },
    {
        "line": 56,
        "fullcodeline": "k = &kk[xx * kmax];"
    },
    {
        "line": 72,
        "fullcodeline": "if (ww != 0.0)"
    },
    {
        "line": 91,
        "fullcodeline": "for (xx = 0; xx < xsize; xx++) {"
    },
    {
        "line": 73,
        "fullcodeline": "k[x] /= ww;"
    },
    {
        "line": 92,
        "fullcodeline": "xmin = xbounds[xx * 2 + 0];"
    },
    {
        "line": 93,
        "fullcodeline": "xmax = xbounds[xx * 2 + 1];"
    },
    {
        "line": 95,
        "fullcodeline": "ss = 0.5;"
    },
    {
        "line": 98,
        "fullcodeline": "imOut->image8[yy][xx] = clip8(ss);"
    },
    {
        "line": 96,
        "fullcodeline": "for (x = xmin; x < xmax; x++)"
    },
    {
        "line": 97,
        "fullcodeline": "ss += i2f(imIn->image8[yy][x]) * k[x - xmin];"
    },
    {
        "line": 104,
        "fullcodeline": "if (imIn->bands == 2) {"
    },
    {
        "line": 153,
        "fullcodeline": "for (xx = 0; xx < xsize; xx++) {"
    },
    {
        "line": 165,
        "fullcodeline": "for (xx = 0; xx < xsize; xx++) {"
    },
    {
        "line": 94,
        "fullcodeline": "k = &kk[xx * kmax];"
    },
    {
        "line": 154,
        "fullcodeline": "xmin = xbounds[xx * 2 + 0];"
    },
    {
        "line": 155,
        "fullcodeline": "xmax = xbounds[xx * 2 + 1];"
    },
    {
        "line": 157,
        "fullcodeline": "ss = 0.0;"
    },
    {
        "line": 160,
        "fullcodeline": "IMAGING_PIXEL_I(imOut, xx, yy) = (int) ss;"
    },
    {
        "line": 166,
        "fullcodeline": "xmin = xbounds[xx * 2 + 0];"
    },
    {
        "line": 167,
        "fullcodeline": "xmax = xbounds[xx * 2 + 1];"
    },
    {
        "line": 169,
        "fullcodeline": "ss = 0.0;"
    },
    {
        "line": 172,
        "fullcodeline": "IMAGING_PIXEL_F(imOut, xx, yy) = ss;"
    },
    {
        "line": 105,
        "fullcodeline": "for (xx = 0; xx < xsize; xx++) {"
    },
    {
        "line": 158,
        "fullcodeline": "for (x = xmin; x < xmax; x++)"
    },
    {
        "line": 159,
        "fullcodeline": "ss += i2f(IMAGING_PIXEL_I(imIn, x, yy)) * k[x - xmin];"
    },
    {
        "line": 170,
        "fullcodeline": "for (x = xmin; x < xmax; x++)"
    },
    {
        "line": 171,
        "fullcodeline": "ss += IMAGING_PIXEL_F(imIn, x, yy) * k[x - xmin];"
    },
    {
        "line": 106,
        "fullcodeline": "xmin = xbounds[xx * 2 + 0];"
    },
    {
        "line": 107,
        "fullcodeline": "xmax = xbounds[xx * 2 + 1];"
    },
    {
        "line": 109,
        "fullcodeline": "ss0 = ss1 = 0.5;"
    },
    {
        "line": 114,
        "fullcodeline": "imOut->image[yy][xx*4 + 0] = clip8(ss0);"
    },
    {
        "line": 115,
        "fullcodeline": "imOut->image[yy][xx*4 + 3] = clip8(ss1);"
    },
    {
        "line": 117,
        "fullcodeline": "} else if (imIn->bands == 3) {"
    },
    {
        "line": 110,
        "fullcodeline": "for (x = xmin; x < xmax; x++) {"
    },
    {
        "line": 156,
        "fullcodeline": "k = &kk[xx * kmax];"
    },
    {
        "line": 168,
        "fullcodeline": "k = &kk[xx * kmax];"
    },
    {
        "line": 111,
        "fullcodeline": "ss0 += i2f((UINT8) imIn->image[yy][x*4 + 0]) * k[x - xmin];"
    },
    {
        "line": 112,
        "fullcodeline": "ss1 += i2f((UINT8) imIn->image[yy][x*4 + 3]) * k[x - xmin];"
    },
    {
        "line": 118,
        "fullcodeline": "for (xx = 0; xx < xsize; xx++) {"
    },
    {
        "line": 108,
        "fullcodeline": "k = &kk[xx * kmax];"
    },
    {
        "line": 119,
        "fullcodeline": "xmin = xbounds[xx * 2 + 0];"
    },
    {
        "line": 120,
        "fullcodeline": "xmax = xbounds[xx * 2 + 1];"
    },
    {
        "line": 122,
        "fullcodeline": "ss0 = ss1 = ss2 = 0.5;"
    },
    {
        "line": 128,
        "fullcodeline": "imOut->image[yy][xx*4 + 0] = clip8(ss0);"
    },
    {
        "line": 129,
        "fullcodeline": "imOut->image[yy][xx*4 + 1] = clip8(ss1);"
    },
    {
        "line": 130,
        "fullcodeline": "imOut->image[yy][xx*4 + 2] = clip8(ss2);"
    },
    {
        "line": 133,
        "fullcodeline": "for (xx = 0; xx < xsize; xx++) {"
    },
    {
        "line": 123,
        "fullcodeline": "for (x = xmin; x < xmax; x++) {"
    },
    {
        "line": 134,
        "fullcodeline": "xmin = xbounds[xx * 2 + 0];"
    },
    {
        "line": 135,
        "fullcodeline": "xmax = xbounds[xx * 2 + 1];"
    },
    {
        "line": 137,
        "fullcodeline": "ss0 = ss1 = ss2 = ss3 = 0.5;"
    },
    {
        "line": 144,
        "fullcodeline": "imOut->image[yy][xx*4 + 0] = clip8(ss0);"
    },
    {
        "line": 145,
        "fullcodeline": "imOut->image[yy][xx*4 + 1] = clip8(ss1);"
    },
    {
        "line": 146,
        "fullcodeline": "imOut->image[yy][xx*4 + 2] = clip8(ss2);"
    },
    {
        "line": 147,
        "fullcodeline": "imOut->image[yy][xx*4 + 3] = clip8(ss3);"
    },
    {
        "line": 124,
        "fullcodeline": "ss0 += i2f((UINT8) imIn->image[yy][x*4 + 0]) * k[x - xmin];"
    },
    {
        "line": 125,
        "fullcodeline": "ss1 += i2f((UINT8) imIn->image[yy][x*4 + 1]) * k[x - xmin];"
    },
    {
        "line": 126,
        "fullcodeline": "ss2 += i2f((UINT8) imIn->image[yy][x*4 + 2]) * k[x - xmin];"
    },
    {
        "line": 138,
        "fullcodeline": "for (x = xmin; x < xmax; x++) {"
    },
    {
        "line": 121,
        "fullcodeline": "k = &kk[xx * kmax];"
    },
    {
        "line": 139,
        "fullcodeline": "ss0 += i2f((UINT8) imIn->image[yy][x*4 + 0]) * k[x - xmin];"
    },
    {
        "line": 140,
        "fullcodeline": "ss1 += i2f((UINT8) imIn->image[yy][x*4 + 1]) * k[x - xmin];"
    },
    {
        "line": 141,
        "fullcodeline": "ss2 += i2f((UINT8) imIn->image[yy][x*4 + 2]) * k[x - xmin];"
    },
    {
        "line": 142,
        "fullcodeline": "ss3 += i2f((UINT8) imIn->image[yy][x*4 + 3]) * k[x - xmin];"
    },
    {
        "line": 136,
        "fullcodeline": "k = &kk[xx * kmax];"
    }
]