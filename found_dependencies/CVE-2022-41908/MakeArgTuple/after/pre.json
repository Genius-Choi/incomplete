[
    {
        "line": 2,
        "fullcodeline": "int64_t n = call->ins.size();"
    },
    {
        "line": 3,
        "fullcodeline": "PyObject* lst = PyList_New(n);"
    },
    {
        "line": 4,
        "fullcodeline": "CHECK(lst);"
    },
    {
        "line": 8,
        "fullcodeline": "const char* device_name = nullptr;"
    },
    {
        "line": 34,
        "fullcodeline": "*tuple = Py_BuildValue(\"(ssN)\", call->token.c_str(), device_name, lst);"
    },
    {
        "line": 10,
        "fullcodeline": "if (call->device != nullptr && !IsCPUDevice(call->device))"
    },
    {
        "line": 13,
        "fullcodeline": "for (int64_t i = 0; i < n; ++i) {"
    },
    {
        "line": 40,
        "fullcodeline": "return OkStatus();"
    },
    {
        "line": 11,
        "fullcodeline": "device_name = call->device->name().c_str();"
    },
    {
        "line": 14,
        "fullcodeline": "PyObject* arg = nullptr;"
    },
    {
        "line": 32,
        "fullcodeline": "PyList_SetItem(lst, i, arg);"
    },
    {
        "line": 36,
        "fullcodeline": "return errors::Internal("
    },
    {
        "line": 16,
        "fullcodeline": "Tensor t = call->ins[i];"
    },
    {
        "line": 17,
        "fullcodeline": "arg = EagerTensorFromHandle(tensorflow::wrap("
    },
    {
        "line": 20,
        "fullcodeline": "if (arg == nullptr) {"
    },
    {
        "line": 25,
        "fullcodeline": "Status s = TensorToNdarray(call->ins[i], &arg);"
    },
    {
        "line": 30,
        "fullcodeline": "arg = PyArray_Return(reinterpret_cast<PyArrayObject*>(arg));"
    },
    {
        "line": 21,
        "fullcodeline": "Py_DECREF(lst);"
    },
    {
        "line": 26,
        "fullcodeline": "if (!s.ok()) {"
    },
    {
        "line": 18,
        "fullcodeline": "tensorflow::unwrap(ctx)->CreateLocalHandleFromTFTensor(t,"
    },
    {
        "line": 22,
        "fullcodeline": "return errors::Internal(\"Unable to procure EagerTensor from Tensor.\");"
    }
]