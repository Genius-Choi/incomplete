[
    {
        "line": 8,
        "fullcodeline": "Stream_Read_UINT16(s, inputFlags); /* inputFlags (2 bytes) */"
    },
    {
        "line": 9,
        "fullcodeline": "Stream_Seek_UINT16(s);             /* pad2OctetsA (2 bytes) */"
    },
    {
        "line": 5,
        "fullcodeline": "if (Stream_GetRemainingLength(s) < 84)"
    },
    {
        "line": 13,
        "fullcodeline": "Stream_Read_UINT32(s, settings->KeyboardLayout);      /* keyboardLayout (4 bytes) */"
    },
    {
        "line": 14,
        "fullcodeline": "Stream_Read_UINT32(s, settings->KeyboardType);        /* keyboardType (4 bytes) */"
    },
    {
        "line": 15,
        "fullcodeline": "Stream_Read_UINT32(s, settings->KeyboardSubType);     /* keyboardSubType (4 bytes) */"
    },
    {
        "line": 16,
        "fullcodeline": "Stream_Read_UINT32(s, settings->KeyboardFunctionKey); /* keyboardFunctionKeys (4 bytes) */"
    },
    {
        "line": 20,
        "fullcodeline": "Stream_Seek_UINT32(s); /* keyboardLayout (4 bytes) */"
    },
    {
        "line": 21,
        "fullcodeline": "Stream_Seek_UINT32(s); /* keyboardType (4 bytes) */"
    },
    {
        "line": 22,
        "fullcodeline": "Stream_Seek_UINT32(s); /* keyboardSubType (4 bytes) */"
    },
    {
        "line": 23,
        "fullcodeline": "Stream_Seek_UINT32(s); /* keyboardFunctionKeys (4 bytes) */"
    },
    {
        "line": 30,
        "fullcodeline": "if (inputFlags & INPUT_FLAG_FASTPATH_INPUT)"
    },
    {
        "line": 44,
        "fullcodeline": "if (inputFlags & TS_INPUT_FLAG_MOUSE_HWHEEL)"
    },
    {
        "line": 47,
        "fullcodeline": "if (inputFlags & INPUT_FLAG_UNICODE)"
    },
    {
        "line": 50,
        "fullcodeline": "if (inputFlags & INPUT_FLAG_MOUSEX)"
    },
    {
        "line": 34,
        "fullcodeline": "else if (inputFlags & INPUT_FLAG_FASTPATH_INPUT2)"
    }
]