[
    {
        "line": 9,
        "fullcodeline": "header = rdp_capability_set_start(s);"
    },
    {
        "line": 12,
        "fullcodeline": "inputFlags = INPUT_FLAG_SCANCODES;"
    },
    {
        "line": 29,
        "fullcodeline": "Stream_Write_UINT16(s, inputFlags);                    /* inputFlags (2 bytes) */"
    },
    {
        "line": 30,
        "fullcodeline": "Stream_Write_UINT16(s, 0);                             /* pad2OctetsA (2 bytes) */"
    },
    {
        "line": 31,
        "fullcodeline": "Stream_Write_UINT32(s, settings->KeyboardLayout);      /* keyboardLayout (4 bytes) */"
    },
    {
        "line": 32,
        "fullcodeline": "Stream_Write_UINT32(s, settings->KeyboardType);        /* keyboardType (4 bytes) */"
    },
    {
        "line": 33,
        "fullcodeline": "Stream_Write_UINT32(s, settings->KeyboardSubType);     /* keyboardSubType (4 bytes) */"
    },
    {
        "line": 34,
        "fullcodeline": "Stream_Write_UINT32(s, settings->KeyboardFunctionKey); /* keyboardFunctionKeys (4 bytes) */"
    },
    {
        "line": 35,
        "fullcodeline": "Stream_Zero(s, 64);                                    /* imeFileName (64 bytes) */"
    },
    {
        "line": 36,
        "fullcodeline": "rdp_capability_set_finish(s, (UINT16)header, CAPSET_TYPE_INPUT);"
    },
    {
        "line": 6,
        "fullcodeline": "if (!Stream_EnsureRemainingCapacity(s, 128))"
    },
    {
        "line": 10,
        "fullcodeline": "if (header > UINT16_MAX)"
    },
    {
        "line": 16,
        "fullcodeline": "inputFlags |= INPUT_FLAG_FASTPATH_INPUT;"
    },
    {
        "line": 17,
        "fullcodeline": "inputFlags |= INPUT_FLAG_FASTPATH_INPUT2;"
    },
    {
        "line": 21,
        "fullcodeline": "inputFlags |= TS_INPUT_FLAG_MOUSE_HWHEEL;"
    },
    {
        "line": 24,
        "fullcodeline": "inputFlags |= INPUT_FLAG_UNICODE;"
    },
    {
        "line": 27,
        "fullcodeline": "inputFlags |= INPUT_FLAG_MOUSEX;"
    }
]