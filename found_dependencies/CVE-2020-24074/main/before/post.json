[
    {
        "line": 9,
        "fullcodeline": "SKP_uint8 payload[    MAX_BYTES_PER_FRAME * MAX_INPUT_FRAMES * ( MAX_LBRR_DELAY + 1 ) ];"
    },
    {
        "line": 10,
        "fullcodeline": "SKP_uint8 *payloadEnd = NULL, *payloadToDec = NULL;"
    },
    {
        "line": 11,
        "fullcodeline": "SKP_uint8 FECpayload[ MAX_BYTES_PER_FRAME * MAX_INPUT_FRAMES ], *payloadPtr;"
    },
    {
        "line": 13,
        "fullcodeline": "SKP_int16 nBytesPerPacket[ MAX_LBRR_DELAY + 1 ], totBytes;"
    },
    {
        "line": 14,
        "fullcodeline": "SKP_int16 out[ ( ( FRAME_LENGTH_MS * MAX_API_FS_KHZ ) << 1 ) * MAX_INPUT_FRAMES ], *outPtr;"
    },
    {
        "line": 15,
        "fullcodeline": "char      speechOutFileName[ 150 ], bitInFileName[ 150 ];"
    },
    {
        "line": 17,
        "fullcodeline": "SKP_int32 packetSize_ms=0, API_Fs_Hz = 0;"
    },
    {
        "line": 30,
        "fullcodeline": "quiet     = 0;"
    },
    {
        "line": 31,
        "fullcodeline": "loss_prob = 0.0f;"
    },
    {
        "line": 34,
        "fullcodeline": "args = 1;"
    },
    {
        "line": 35,
        "fullcodeline": "strcpy( bitInFileName, argv[ args ] );"
    },
    {
        "line": 36,
        "fullcodeline": "args++;"
    },
    {
        "line": 37,
        "fullcodeline": "strcpy( speechOutFileName, argv[ args ] );"
    },
    {
        "line": 38,
        "fullcodeline": "args++;"
    },
    {
        "line": 64,
        "fullcodeline": "bitInFile = fopen( bitInFileName, \"rb\" );"
    },
    {
        "line": 94,
        "fullcodeline": "speechOutFile = fopen( speechOutFileName, \"wb\" );"
    },
    {
        "line": 108,
        "fullcodeline": "DecControl.framesPerPacket = 1;"
    },
    {
        "line": 111,
        "fullcodeline": "ret = SKP_Silk_SDK_Get_Decoder_Size( &decSizeBytes );"
    },
    {
        "line": 115,
        "fullcodeline": "psDec = malloc( decSizeBytes );"
    },
    {
        "line": 118,
        "fullcodeline": "ret = SKP_Silk_SDK_InitDecoder( psDec );"
    },
    {
        "line": 123,
        "fullcodeline": "totPackets = 0;"
    },
    {
        "line": 124,
        "fullcodeline": "tottime    = 0;"
    },
    {
        "line": 125,
        "fullcodeline": "payloadEnd = payload;"
    },
    {
        "line": 356,
        "fullcodeline": "free( psDec );"
    },
    {
        "line": 359,
        "fullcodeline": "fclose( speechOutFile );"
    },
    {
        "line": 360,
        "fullcodeline": "fclose( bitInFile );"
    },
    {
        "line": 362,
        "fullcodeline": "filetime = totPackets * 1e-3 * packetSize_ms;"
    },
    {
        "line": 24,
        "fullcodeline": "if( argc < 3 ) {"
    },
    {
        "line": 39,
        "fullcodeline": "while( args < argc ) {"
    },
    {
        "line": 56,
        "fullcodeline": "if( !quiet ) {"
    },
    {
        "line": 65,
        "fullcodeline": "if( bitInFile == NULL ) {"
    },
    {
        "line": 72,
        "fullcodeline": "char header_buf[ 50 ];"
    },
    {
        "line": 73,
        "fullcodeline": "fread(header_buf, sizeof(char), 1, bitInFile);"
    },
    {
        "line": 74,
        "fullcodeline": "header_buf[ strlen( \"\u0002\" ) ] = '\\0'; /* Terminate with a null character */"
    },
    {
        "line": 95,
        "fullcodeline": "if( speechOutFile == NULL ) {"
    },
    {
        "line": 101,
        "fullcodeline": "if( API_Fs_Hz == 0 ) {"
    },
    {
        "line": 128,
        "fullcodeline": "for( i = 0; i < MAX_LBRR_DELAY; i++ ) {"
    },
    {
        "line": 260,
        "fullcodeline": "for( k = 0; k < MAX_LBRR_DELAY; k++ ) {"
    },
    {
        "line": 351,
        "fullcodeline": "if( !quiet ) {"
    },
    {
        "line": 363,
        "fullcodeline": "if( !quiet ) {"
    },
    {
        "line": 25,
        "fullcodeline": "print_usage( argv );"
    },
    {
        "line": 26,
        "fullcodeline": "exit( 0 );"
    },
    {
        "line": 57,
        "fullcodeline": "printf(\"********** Silk Decoder (Fixed Point) v %s ********************\\n\", SKP_Silk_SDK_get_version());"
    },
    {
        "line": 58,
        "fullcodeline": "printf(\"********** Compiled for %d bit cpu *******************************\\n\", (int)sizeof(void*) * 8 );"
    },
    {
        "line": 59,
        "fullcodeline": "printf( \"Input:                       %s\\n\", bitInFileName );"
    },
    {
        "line": 60,
        "fullcodeline": "printf( \"Output:                      %s\\n\", speechOutFileName );"
    },
    {
        "line": 66,
        "fullcodeline": "printf( \"Error: could not open input file %s\\n\", bitInFileName );"
    },
    {
        "line": 67,
        "fullcodeline": "exit( 0 );"
    },
    {
        "line": 75,
        "fullcodeline": "if( strcmp( header_buf, \"\u0002\" ) != 0 ) {"
    },
    {
        "line": 96,
        "fullcodeline": "printf( \"Error: could not open output file %s\\n\", speechOutFileName );"
    },
    {
        "line": 97,
        "fullcodeline": "exit( 0 );"
    },
    {
        "line": 102,
        "fullcodeline": "DecControl.API_sampleRate = 24000;"
    },
    {
        "line": 113,
        "fullcodeline": "printf( \"\\nSKP_Silk_SDK_Get_Decoder_Size returned %d\", ret );"
    },
    {
        "line": 120,
        "fullcodeline": "printf( \"\\nSKP_Silk_InitDecoder returned %d\", ret );"
    },
    {
        "line": 130,
        "fullcodeline": "counter = fread( &nBytes, sizeof( SKP_int16 ), 1, bitInFile );"
    },
    {
        "line": 135,
        "fullcodeline": "counter = fread( payloadEnd, sizeof( SKP_uint8 ), nBytes, bitInFile );"
    },
    {
        "line": 140,
        "fullcodeline": "nBytesPerPacket[ i ] = nBytes;"
    },
    {
        "line": 141,
        "fullcodeline": "payloadEnd          += nBytes;"
    },
    {
        "line": 142,
        "fullcodeline": "totPackets++;"
    },
    {
        "line": 147,
        "fullcodeline": "counter = fread( &nBytes, sizeof( SKP_int16 ), 1, bitInFile );"
    },
    {
        "line": 156,
        "fullcodeline": "counter = fread( payloadEnd, sizeof( SKP_uint8 ), nBytes, bitInFile );"
    },
    {
        "line": 162,
        "fullcodeline": "rand_seed = SKP_RAND( rand_seed );"
    },
    {
        "line": 197,
        "fullcodeline": "outPtr = out;"
    },
    {
        "line": 198,
        "fullcodeline": "tot_len = 0;"
    },
    {
        "line": 199,
        "fullcodeline": "starttime = GetHighResolutionTime();"
    },
    {
        "line": 235,
        "fullcodeline": "packetSize_ms = tot_len / ( DecControl.API_sampleRate / 1000 );"
    },
    {
        "line": 236,
        "fullcodeline": "tottime += GetHighResolutionTime() - starttime;"
    },
    {
        "line": 237,
        "fullcodeline": "totPackets++;"
    },
    {
        "line": 243,
        "fullcodeline": "fwrite( out, sizeof( SKP_int16 ), tot_len, speechOutFile );"
    },
    {
        "line": 246,
        "fullcodeline": "totBytes = 0;"
    },
    {
        "line": 250,
        "fullcodeline": "SKP_memmove( payload, &payload[ nBytesPerPacket[ 0 ] ], totBytes * sizeof( SKP_uint8 ) );"
    },
    {
        "line": 251,
        "fullcodeline": "payloadEnd -= nBytesPerPacket[ 0 ];"
    },
    {
        "line": 252,
        "fullcodeline": "SKP_memmove( nBytesPerPacket, &nBytesPerPacket[ 1 ], MAX_LBRR_DELAY * sizeof( SKP_int16 ) );"
    },
    {
        "line": 288,
        "fullcodeline": "outPtr  = out;"
    },
    {
        "line": 289,
        "fullcodeline": "tot_len = 0;"
    },
    {
        "line": 290,
        "fullcodeline": "starttime = GetHighResolutionTime();"
    },
    {
        "line": 327,
        "fullcodeline": "packetSize_ms = tot_len / ( DecControl.API_sampleRate / 1000 );"
    },
    {
        "line": 328,
        "fullcodeline": "tottime += GetHighResolutionTime() - starttime;"
    },
    {
        "line": 329,
        "fullcodeline": "totPackets++;"
    },
    {
        "line": 335,
        "fullcodeline": "fwrite( out, sizeof( SKP_int16 ), tot_len, speechOutFile );"
    },
    {
        "line": 338,
        "fullcodeline": "totBytes = 0;"
    },
    {
        "line": 342,
        "fullcodeline": "SKP_memmove( payload, &payload[ nBytesPerPacket[ 0 ] ], totBytes * sizeof( SKP_uint8 ) );"
    },
    {
        "line": 343,
        "fullcodeline": "payloadEnd -= nBytesPerPacket[ 0 ];"
    },
    {
        "line": 344,
        "fullcodeline": "SKP_memmove( nBytesPerPacket, &nBytesPerPacket[ 1 ], MAX_LBRR_DELAY * sizeof( SKP_int16 ) );"
    },
    {
        "line": 352,
        "fullcodeline": "printf( \"\\nDecoding Finished \\n\" );"
    },
    {
        "line": 364,
        "fullcodeline": "printf(\"\\nFile length:                 %.3f s\", filetime);"
    },
    {
        "line": 365,
        "fullcodeline": "printf(\"\\nTime for decoding:           %.3f s (%.3f%% of realtime)\", 1e-6 * tottime, 1e-4 * tottime / filetime);"
    },
    {
        "line": 366,
        "fullcodeline": "printf(\"\\n\\n\");"
    },
    {
        "line": 40,
        "fullcodeline": "if( SKP_STR_CASEINSENSITIVE_COMPARE( argv[ args ], \"-loss\" ) == 0 ) {"
    },
    {
        "line": 76,
        "fullcodeline": "counter = fread( header_buf, sizeof( char ), strlen( \"!SILK_V3\" ), bitInFile );"
    },
    {
        "line": 77,
        "fullcodeline": "header_buf[ strlen( \"!SILK_V3\" ) ] = '\\0'; /* Terminate with a null character */"
    },
    {
        "line": 104,
        "fullcodeline": "DecControl.API_sampleRate = API_Fs_Hz;"
    },
    {
        "line": 137,
        "fullcodeline": "if( ( SKP_int16 )counter < nBytes ) {"
    },
    {
        "line": 151,
        "fullcodeline": "if( nBytes < 0 || counter < 1 ) {"
    },
    {
        "line": 157,
        "fullcodeline": "if( ( SKP_int16 )counter < nBytes ) {"
    },
    {
        "line": 163,
        "fullcodeline": "if( ( ( ( float )( ( rand_seed >> 16 ) + ( 1 << 15 ) ) ) / 65535.0f >= ( loss_prob / 100.0f ) ) && ( counter > 0 ) ) {"
    },
    {
        "line": 170,
        "fullcodeline": "if( nBytesPerPacket[ 0 ] == 0 ) {"
    },
    {
        "line": 201,
        "fullcodeline": "if( lost == 0 ) {"
    },
    {
        "line": 247,
        "fullcodeline": "for( i = 0; i < MAX_LBRR_DELAY; i++ ) {"
    },
    {
        "line": 254,
        "fullcodeline": "if( !quiet ) {"
    },
    {
        "line": 261,
        "fullcodeline": "if( nBytesPerPacket[ 0 ] == 0 ) {"
    },
    {
        "line": 292,
        "fullcodeline": "if( lost == 0 ) {"
    },
    {
        "line": 339,
        "fullcodeline": "for( i = 0; i < MAX_LBRR_DELAY; i++ ) {"
    },
    {
        "line": 346,
        "fullcodeline": "if( !quiet ) {"
    },
    {
        "line": 369,
        "fullcodeline": "printf( \"%.3f %.3f %d\\n\", 1e-6 * tottime, 1e-4 * tottime / filetime, totPackets );"
    },
    {
        "line": 41,
        "fullcodeline": "sscanf( argv[ args + 1 ], \"%f\", &loss_prob );"
    },
    {
        "line": 42,
        "fullcodeline": "args += 2;"
    },
    {
        "line": 78,
        "fullcodeline": "if( strcmp( header_buf, \"!SILK_V3\" ) != 0 ) {"
    },
    {
        "line": 84,
        "fullcodeline": "counter = fread( header_buf, sizeof( char ), strlen( \"#!SILK_V3\" ), bitInFile );"
    },
    {
        "line": 85,
        "fullcodeline": "header_buf[ strlen( \"#!SILK_V3\" ) ] = '\\0'; /* Terminate with a null character */"
    },
    {
        "line": 164,
        "fullcodeline": "nBytesPerPacket[ MAX_LBRR_DELAY ] = nBytes;"
    },
    {
        "line": 165,
        "fullcodeline": "payloadEnd                       += nBytes;"
    },
    {
        "line": 172,
        "fullcodeline": "lost = 1;"
    },
    {
        "line": 175,
        "fullcodeline": "payloadPtr = payload;"
    },
    {
        "line": 203,
        "fullcodeline": "frames = 0;"
    },
    {
        "line": 248,
        "fullcodeline": "totBytes += nBytesPerPacket[ i + 1 ];"
    },
    {
        "line": 255,
        "fullcodeline": "fprintf( stderr, \"\\rPackets decoded:             %d\", totPackets );"
    },
    {
        "line": 263,
        "fullcodeline": "lost = 1;"
    },
    {
        "line": 266,
        "fullcodeline": "payloadPtr = payload;"
    },
    {
        "line": 294,
        "fullcodeline": "frames = 0;"
    },
    {
        "line": 340,
        "fullcodeline": "totBytes += nBytesPerPacket[ i + 1 ];"
    },
    {
        "line": 347,
        "fullcodeline": "fprintf( stderr, \"\\rPackets decoded:              %d\", totPackets );"
    },
    {
        "line": 80,
        "fullcodeline": "printf( \"Error: Wrong Header %s\\n\", header_buf );"
    },
    {
        "line": 81,
        "fullcodeline": "exit( 0 );"
    },
    {
        "line": 86,
        "fullcodeline": "if( strcmp( header_buf, \"#!SILK_V3\" ) != 0 ) {"
    },
    {
        "line": 167,
        "fullcodeline": "nBytesPerPacket[ MAX_LBRR_DELAY ] = 0;"
    },
    {
        "line": 176,
        "fullcodeline": "for( i = 0; i < MAX_LBRR_DELAY; i++ ) {"
    },
    {
        "line": 191,
        "fullcodeline": "lost = 0;"
    },
    {
        "line": 192,
        "fullcodeline": "nBytes = nBytesPerPacket[ 0 ];"
    },
    {
        "line": 193,
        "fullcodeline": "payloadToDec = payload;"
    },
    {
        "line": 267,
        "fullcodeline": "for( i = 0; i < MAX_LBRR_DELAY; i++ ) {"
    },
    {
        "line": 282,
        "fullcodeline": "lost = 0;"
    },
    {
        "line": 283,
        "fullcodeline": "nBytes = nBytesPerPacket[ 0 ];"
    },
    {
        "line": 284,
        "fullcodeline": "payloadToDec = payload;"
    },
    {
        "line": 43,
        "fullcodeline": "} else if( SKP_STR_CASEINSENSITIVE_COMPARE( argv[ args ], \"-Fs_API\" ) == 0 ) {"
    },
    {
        "line": 88,
        "fullcodeline": "printf( \"Error: Wrong Header %s\\n\", header_buf );"
    },
    {
        "line": 89,
        "fullcodeline": "exit( 0 );"
    },
    {
        "line": 188,
        "fullcodeline": "payloadPtr += nBytesPerPacket[ i + 1 ];"
    },
    {
        "line": 206,
        "fullcodeline": "ret = SKP_Silk_SDK_Decode( psDec, &DecControl, 0, payloadToDec, nBytes, outPtr, &len );"
    },
    {
        "line": 211,
        "fullcodeline": "frames++;"
    },
    {
        "line": 212,
        "fullcodeline": "outPtr  += len;"
    },
    {
        "line": 213,
        "fullcodeline": "tot_len += len;"
    },
    {
        "line": 224,
        "fullcodeline": "for( i = 0; i < DecControl.framesPerPacket; i++ ) {"
    },
    {
        "line": 279,
        "fullcodeline": "payloadPtr += nBytesPerPacket[ i + 1 ];"
    },
    {
        "line": 297,
        "fullcodeline": "ret = SKP_Silk_SDK_Decode( psDec, &DecControl, 0, payloadToDec, nBytes, outPtr, &len );"
    },
    {
        "line": 302,
        "fullcodeline": "frames++;"
    },
    {
        "line": 303,
        "fullcodeline": "outPtr  += len;"
    },
    {
        "line": 304,
        "fullcodeline": "tot_len += len;"
    },
    {
        "line": 317,
        "fullcodeline": "for( i = 0; i < DecControl.framesPerPacket; i++ ) {"
    },
    {
        "line": 44,
        "fullcodeline": "sscanf( argv[ args + 1 ], \"%d\", &API_Fs_Hz );"
    },
    {
        "line": 45,
        "fullcodeline": "args += 2;"
    },
    {
        "line": 177,
        "fullcodeline": "if( nBytesPerPacket[ i + 1 ] > 0 ) {"
    },
    {
        "line": 214,
        "fullcodeline": "if( frames > MAX_INPUT_FRAMES ) {"
    },
    {
        "line": 226,
        "fullcodeline": "ret = SKP_Silk_SDK_Decode( psDec, &DecControl, 1, payloadToDec, nBytes, outPtr, &len );"
    },
    {
        "line": 230,
        "fullcodeline": "outPtr  += len;"
    },
    {
        "line": 231,
        "fullcodeline": "tot_len += len;"
    },
    {
        "line": 268,
        "fullcodeline": "if( nBytesPerPacket[ i + 1 ] > 0 ) {"
    },
    {
        "line": 305,
        "fullcodeline": "if( frames > MAX_INPUT_FRAMES ) {"
    },
    {
        "line": 318,
        "fullcodeline": "ret = SKP_Silk_SDK_Decode( psDec, &DecControl, 1, payloadToDec, nBytes, outPtr, &len );"
    },
    {
        "line": 322,
        "fullcodeline": "outPtr  += len;"
    },
    {
        "line": 323,
        "fullcodeline": "tot_len += len;"
    },
    {
        "line": 178,
        "fullcodeline": "starttime = GetHighResolutionTime();"
    },
    {
        "line": 179,
        "fullcodeline": "SKP_Silk_SDK_search_for_LBRR( payloadPtr, nBytesPerPacket[ i + 1 ], ( i + 1 ), FECpayload, &nBytesFEC );"
    },
    {
        "line": 180,
        "fullcodeline": "tottime += GetHighResolutionTime() - starttime;"
    },
    {
        "line": 208,
        "fullcodeline": "printf( \"\\nSKP_Silk_SDK_Decode returned %d\", ret );"
    },
    {
        "line": 216,
        "fullcodeline": "outPtr  = out;"
    },
    {
        "line": 217,
        "fullcodeline": "tot_len = 0;"
    },
    {
        "line": 218,
        "fullcodeline": "frames  = 0;"
    },
    {
        "line": 269,
        "fullcodeline": "starttime = GetHighResolutionTime();"
    },
    {
        "line": 270,
        "fullcodeline": "SKP_Silk_SDK_search_for_LBRR( payloadPtr, nBytesPerPacket[ i + 1 ], ( i + 1 ), FECpayload, &nBytesFEC );"
    },
    {
        "line": 271,
        "fullcodeline": "tottime += GetHighResolutionTime() - starttime;"
    },
    {
        "line": 299,
        "fullcodeline": "printf( \"\\nSKP_Silk_SDK_Decode returned %d\", ret );"
    },
    {
        "line": 307,
        "fullcodeline": "outPtr  = out;"
    },
    {
        "line": 308,
        "fullcodeline": "tot_len = 0;"
    },
    {
        "line": 309,
        "fullcodeline": "frames  = 0;"
    },
    {
        "line": 46,
        "fullcodeline": "} else if( SKP_STR_CASEINSENSITIVE_COMPARE( argv[ args ], \"-quiet\" ) == 0 ) {"
    },
    {
        "line": 181,
        "fullcodeline": "if( nBytesFEC > 0 ) {"
    },
    {
        "line": 228,
        "fullcodeline": "printf( \"\\nSKP_Silk_Decode returned %d\", ret );"
    },
    {
        "line": 272,
        "fullcodeline": "if( nBytesFEC > 0 ) {"
    },
    {
        "line": 320,
        "fullcodeline": "printf( \"\\nSKP_Silk_Decode returned %d\", ret );"
    },
    {
        "line": 47,
        "fullcodeline": "quiet = 1;"
    },
    {
        "line": 48,
        "fullcodeline": "args++;"
    },
    {
        "line": 182,
        "fullcodeline": "payloadToDec = FECpayload;"
    },
    {
        "line": 183,
        "fullcodeline": "nBytes = nBytesFEC;"
    },
    {
        "line": 184,
        "fullcodeline": "lost = 0;"
    },
    {
        "line": 273,
        "fullcodeline": "payloadToDec = FECpayload;"
    },
    {
        "line": 274,
        "fullcodeline": "nBytes = nBytesFEC;"
    },
    {
        "line": 275,
        "fullcodeline": "lost = 0;"
    },
    {
        "line": 50,
        "fullcodeline": "printf( \"Error: unrecognized setting: %s\\n\\n\", argv[ args ] );"
    },
    {
        "line": 51,
        "fullcodeline": "print_usage( argv );"
    },
    {
        "line": 52,
        "fullcodeline": "exit( 0 );"
    }
]