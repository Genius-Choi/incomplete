[
    {
        "line": 5,
        "fullcodeline": "int axis_value = GetTensorData<int>(axis)[0];"
    },
    {
        "line": 10,
        "fullcodeline": "std::vector<int64_t> size_splits_vector;"
    },
    {
        "line": 20,
        "fullcodeline": "int minus_one_index = -1;"
    },
    {
        "line": 21,
        "fullcodeline": "int64_t size_splits_sum = 0;"
    },
    {
        "line": 36,
        "fullcodeline": "TF_LITE_ENSURE(context, axis_value >= 0);"
    },
    {
        "line": 37,
        "fullcodeline": "TF_LITE_ENSURE(context, axis_value < NumDimensions(input));"
    },
    {
        "line": 38,
        "fullcodeline": "const int input_size = SizeOfDimension(input, axis_value);"
    },
    {
        "line": 6,
        "fullcodeline": "if (axis_value < 0) {"
    },
    {
        "line": 11,
        "fullcodeline": "if (size_splits->type == kTfLiteInt32) {"
    },
    {
        "line": 23,
        "fullcodeline": "for (int i = 0; i < size_splits_vector.size(); ++i) {"
    },
    {
        "line": 54,
        "fullcodeline": "for (int i = 0; i < NumOutputs(node); ++i) {"
    },
    {
        "line": 7,
        "fullcodeline": "axis_value += NumDimensions(input);"
    },
    {
        "line": 40,
        "fullcodeline": "if (minus_one_index != -1) {"
    },
    {
        "line": 55,
        "fullcodeline": "TfLiteIntArray* output_dims = TfLiteIntArrayCopy(input->dims);"
    },
    {
        "line": 58,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, i, &output));"
    },
    {
        "line": 12,
        "fullcodeline": "GetSizeSplitsVector<int32_t>(size_splits, &size_splits_vector);"
    },
    {
        "line": 41,
        "fullcodeline": "if (size_splits_sum > input_size) {"
    },
    {
        "line": 56,
        "fullcodeline": "output_dims->data[axis_value] = size_splits_vector.at(i);"
    },
    {
        "line": 59,
        "fullcodeline": "TF_LITE_ENSURE_STATUS(context->ResizeTensor(context, output, output_dims));"
    },
    {
        "line": 13,
        "fullcodeline": "} else if (size_splits->type == kTfLiteInt64) {"
    },
    {
        "line": 24,
        "fullcodeline": "if (size_splits_vector.at(i) == -1) {"
    },
    {
        "line": 42,
        "fullcodeline": "context->ReportError("
    },
    {
        "line": 25,
        "fullcodeline": "if (minus_one_index == -1) {"
    },
    {
        "line": 32,
        "fullcodeline": "size_splits_sum += size_splits_vector.at(i);"
    },
    {
        "line": 46,
        "fullcodeline": "size_splits_vector[minus_one_index] = input_size - size_splits_sum;"
    },
    {
        "line": 49,
        "fullcodeline": "context->ReportError("
    },
    {
        "line": 14,
        "fullcodeline": "GetSizeSplitsVector<int64_t>(size_splits, &size_splits_vector);"
    },
    {
        "line": 16,
        "fullcodeline": "context->ReportError(context, \"size_splits only support type int32|int64.\");"
    },
    {
        "line": 26,
        "fullcodeline": "minus_one_index = i;"
    },
    {
        "line": 28,
        "fullcodeline": "context->ReportError(context,"
    }
]