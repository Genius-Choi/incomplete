[
    {
        "line": 49,
        "fullcodeline": "tensor_key_feed_dict = {}"
    },
    {
        "line": 51,
        "fullcodeline": "inputs = preprocess_inputs_arg_string(inputs_str)"
    },
    {
        "line": 52,
        "fullcodeline": "input_exprs = preprocess_input_exprs_arg_string(input_exprs_str)"
    },
    {
        "line": 53,
        "fullcodeline": "input_examples = preprocess_input_examples_arg_string(input_examples_str)"
    },
    {
        "line": 55,
        "fullcodeline": "for input_tensor_key, (filename, variable_name) in inputs.items():"
    },
    {
        "line": 87,
        "fullcodeline": "for input_tensor_key, py_expr_evaluated in input_exprs.items():"
    },
    {
        "line": 95,
        "fullcodeline": "for input_tensor_key, example in input_examples.items():"
    },
    {
        "line": 56,
        "fullcodeline": "data = np.load(file_io.FileIO(filename, mode='rb'), allow_pickle=True)  # pylint: disable=unexpected-keyword-arg"
    },
    {
        "line": 92,
        "fullcodeline": "tensor_key_feed_dict[input_tensor_key] = py_expr_evaluated"
    },
    {
        "line": 100,
        "fullcodeline": "tensor_key_feed_dict[input_tensor_key] = example"
    },
    {
        "line": 88,
        "fullcodeline": "if input_tensor_key in tensor_key_feed_dict:"
    },
    {
        "line": 96,
        "fullcodeline": "if input_tensor_key in tensor_key_feed_dict:"
    },
    {
        "line": 89,
        "fullcodeline": "logging.warn("
    },
    {
        "line": 97,
        "fullcodeline": "logging.warn("
    },
    {
        "line": 61,
        "fullcodeline": "if isinstance(data, np.ndarray):"
    },
    {
        "line": 76,
        "fullcodeline": "if isinstance(data, np.lib.npyio.NpzFile):"
    },
    {
        "line": 90,
        "fullcodeline": "'input_key %s has been specified with both --inputs and --input_exprs'"
    },
    {
        "line": 98,
        "fullcodeline": "'input_key %s has been specified in multiple options. Value in '"
    },
    {
        "line": 62,
        "fullcodeline": "logging.warn("
    },
    {
        "line": 65,
        "fullcodeline": "tensor_key_feed_dict[input_tensor_key] = data"
    },
    {
        "line": 77,
        "fullcodeline": "variable_name_list = data.files"
    },
    {
        "line": 82,
        "fullcodeline": "tensor_key_feed_dict[input_tensor_key] = data[variable_name_list[0]]"
    },
    {
        "line": 84,
        "fullcodeline": "tensor_key_feed_dict[input_tensor_key] = data"
    },
    {
        "line": 63,
        "fullcodeline": "'Input file %s contains a single ndarray. Name key \\\"%s\\\" ignored.'"
    },
    {
        "line": 67,
        "fullcodeline": "if variable_name in data:"
    },
    {
        "line": 78,
        "fullcodeline": "if len(variable_name_list) != 1:"
    },
    {
        "line": 64,
        "fullcodeline": "% (filename, variable_name))"
    },
    {
        "line": 68,
        "fullcodeline": "tensor_key_feed_dict[input_tensor_key] = data[variable_name]"
    },
    {
        "line": 70,
        "fullcodeline": "raise RuntimeError("
    },
    {
        "line": 79,
        "fullcodeline": "raise RuntimeError("
    },
    {
        "line": 71,
        "fullcodeline": "'Input file %s does not contain variable with name \\\"%s\\\".' %"
    },
    {
        "line": 80,
        "fullcodeline": "'Input file %s contains more than one ndarrays. Please specify '"
    },
    {
        "line": 72,
        "fullcodeline": "(filename, variable_name))"
    }
]