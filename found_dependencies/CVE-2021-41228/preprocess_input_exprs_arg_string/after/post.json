[
    {
        "line": 20,
        "fullcodeline": "input_dict = {}"
    },
    {
        "line": 22,
        "fullcodeline": "for input_raw in filter(bool, input_exprs_str.split(';')):"
    },
    {
        "line": 23,
        "fullcodeline": "if '=' not in input_exprs_str:"
    },
    {
        "line": 26,
        "fullcodeline": "input_key, expr = input_raw.split('=', 1)"
    },
    {
        "line": 24,
        "fullcodeline": "raise RuntimeError('--input_exprs \"%s\" format is incorrect. Please follow'"
    },
    {
        "line": 35,
        "fullcodeline": "input_dict[input_key] = eval(expr)  # pylint: disable=eval-used"
    },
    {
        "line": 29,
        "fullcodeline": "input_dict[input_key] = ast.literal_eval(expr)"
    },
    {
        "line": 31,
        "fullcodeline": "raise RuntimeError("
    },
    {
        "line": 32,
        "fullcodeline": "f'Expression \"{expr}\" is not a valid python literal.')"
    }
]