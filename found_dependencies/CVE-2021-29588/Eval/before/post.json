[
    {
        "line": 4,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 7,
        "fullcodeline": "TF_LITE_ENSURE_OK(context,"
    },
    {
        "line": 10,
        "fullcodeline": "TF_LITE_ENSURE_OK(context,"
    },
    {
        "line": 12,
        "fullcodeline": "const TfLiteTensor* bias ="
    },
    {
        "line": 17,
        "fullcodeline": "TF_LITE_ENSURE_OK(context,"
    },
    {
        "line": 19,
        "fullcodeline": "OpData* data = reinterpret_cast<OpData*>(node->user_data);"
    },
    {
        "line": 20,
        "fullcodeline": "TfLiteTensor* col2im = data->has_col2im"
    },
    {
        "line": 23,
        "fullcodeline": "TfLiteTensor* transposed_weights ="
    },
    {
        "line": 27,
        "fullcodeline": "const auto* params ="
    },
    {
        "line": 40,
        "fullcodeline": "const int width = SizeOfDimension(output, 2);"
    },
    {
        "line": 41,
        "fullcodeline": "const int height = SizeOfDimension(output, 1);"
    },
    {
        "line": 42,
        "fullcodeline": "const int filter_width = SizeOfDimension(weights, 2);"
    },
    {
        "line": 43,
        "fullcodeline": "const int filter_height = SizeOfDimension(weights, 1);"
    },
    {
        "line": 46,
        "fullcodeline": "data->padding = ComputePaddingHeightWidth("
    },
    {
        "line": 5,
        "fullcodeline": "context, GetInputSafe(context, node, kOutputShapeTensor, &output_shape));"
    },
    {
        "line": 8,
        "fullcodeline": "GetInputSafe(context, node, kWeightsTensor, &weights));"
    },
    {
        "line": 11,
        "fullcodeline": "GetInputSafe(context, node, kDataInputTensor, &input));"
    },
    {
        "line": 13,
        "fullcodeline": "(NumInputs(node) == 4)"
    },
    {
        "line": 18,
        "fullcodeline": "GetOutputSafe(context, node, kOutputTensor, &output));"
    },
    {
        "line": 24,
        "fullcodeline": "data->weights_are_transposed"
    },
    {
        "line": 28,
        "fullcodeline": "reinterpret_cast<TfLiteTransposeConvParams*>(node->builtin_data);"
    },
    {
        "line": 31,
        "fullcodeline": "if (IsDynamicTensor(output)) {"
    },
    {
        "line": 34,
        "fullcodeline": "if (data->has_col2im && IsDynamicTensor(col2im)) {"
    },
    {
        "line": 14,
        "fullcodeline": "? GetOptionalInputTensor(context, node, kBiasTensor)"
    },
    {
        "line": 21,
        "fullcodeline": "? GetTemporary(context, node, data->col2im_index)"
    },
    {
        "line": 25,
        "fullcodeline": "? GetTemporary(context, node, data->transposed_weights_index)"
    },
    {
        "line": 32,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, ResizeTensor(context, output_shape, output));"
    },
    {
        "line": 35,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, ResizeCol2ImTensor(context, output_shape,"
    },
    {
        "line": 118,
        "fullcodeline": "context->ReportError(context, \"Type '%s' is not currently supported.\","
    },
    {
        "line": 60,
        "fullcodeline": "EvalFloat<kernel_type>(context, params, data, input, weights, bias,"
    },
    {
        "line": 66,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 78,
        "fullcodeline": "EvalQuantized<kernel_type>(context, params, data, input, weights,"
    },
    {
        "line": 85,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 95,
        "fullcodeline": "EvalQuantizedPerChannel<kernel_type>(context, params, data, input,"
    },
    {
        "line": 102,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 112,
        "fullcodeline": "EvalQuantizedPerChannel16x8(context, params, data, input, weights,"
    },
    {
        "line": 119,
        "fullcodeline": "TfLiteTypeGetName(input->type));"
    },
    {
        "line": 67,
        "fullcodeline": "context, GetTemporarySafe(context, node, data->scratch_tensor_index,"
    },
    {
        "line": 69,
        "fullcodeline": "if (IsDynamicTensor(scratch_buffer)) {"
    },
    {
        "line": 86,
        "fullcodeline": "context, GetTemporarySafe(context, node, data->scratch_tensor_index,"
    },
    {
        "line": 88,
        "fullcodeline": "if (IsDynamicTensor(scratch_buffer)) {"
    },
    {
        "line": 92,
        "fullcodeline": "if (data->weights_are_transposed && !IsConstantTensor(weights)) {"
    },
    {
        "line": 103,
        "fullcodeline": "context, GetTemporarySafe(context, node, data->scratch_tensor_index,"
    },
    {
        "line": 105,
        "fullcodeline": "if (IsDynamicTensor(scratch_buffer)) {"
    },
    {
        "line": 109,
        "fullcodeline": "if (data->weights_are_transposed && !IsConstantTensor(weights)) {"
    },
    {
        "line": 70,
        "fullcodeline": "TF_LITE_ENSURE_OK(context,"
    },
    {
        "line": 89,
        "fullcodeline": "TF_LITE_ENSURE_OK(context,"
    },
    {
        "line": 93,
        "fullcodeline": "ResizeAndTransposeWeights(context, weights, transposed_weights);"
    },
    {
        "line": 106,
        "fullcodeline": "TF_LITE_ENSURE_OK(context,"
    },
    {
        "line": 110,
        "fullcodeline": "ResizeAndTransposeWeights(context, weights, transposed_weights);"
    },
    {
        "line": 56,
        "fullcodeline": "if (!IsConstantTensor(weights)) {"
    },
    {
        "line": 71,
        "fullcodeline": "ResizeTensor(context, output_shape, scratch_buffer));"
    },
    {
        "line": 74,
        "fullcodeline": "if (!IsConstantTensor(weights)) {"
    },
    {
        "line": 90,
        "fullcodeline": "ResizeTensor(context, output_shape, scratch_buffer));"
    },
    {
        "line": 107,
        "fullcodeline": "ResizeTensor(context, output_shape, scratch_buffer));"
    },
    {
        "line": 57,
        "fullcodeline": "ResizeAndTransposeWeights(context, weights, transposed_weights);"
    },
    {
        "line": 75,
        "fullcodeline": "ResizeAndTransposeWeights(context, weights, transposed_weights);"
    }
]