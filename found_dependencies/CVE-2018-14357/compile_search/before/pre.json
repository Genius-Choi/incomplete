[
    {
        "line": 3,
        "fullcodeline": "if (do_search(pat, 0) == 0)"
    },
    {
        "line": 7,
        "fullcodeline": "mutt_buffer_addstr(buf, \"NOT \");"
    },
    {
        "line": 13,
        "fullcodeline": "clauses = do_search(pat->child, 1);"
    },
    {
        "line": 14,
        "fullcodeline": "if (clauses > 0)"
    },
    {
        "line": 43,
        "fullcodeline": "char *delim = NULL;"
    },
    {
        "line": 16,
        "fullcodeline": "const struct Pattern *clause = pat->child;"
    },
    {
        "line": 18,
        "fullcodeline": "mutt_buffer_addch(buf, '(');"
    },
    {
        "line": 42,
        "fullcodeline": "char term[STRING];"
    },
    {
        "line": 48,
        "fullcodeline": "mutt_buffer_addstr(buf, \"HEADER \");"
    },
    {
        "line": 51,
        "fullcodeline": "delim = strchr(pat->p.str, ':');"
    },
    {
        "line": 58,
        "fullcodeline": "imap_quote_string(term, sizeof(term), pat->p.str);"
    },
    {
        "line": 59,
        "fullcodeline": "mutt_buffer_addstr(buf, term);"
    },
    {
        "line": 60,
        "fullcodeline": "mutt_buffer_addch(buf, ' ');"
    },
    {
        "line": 63,
        "fullcodeline": "*delim = ':';"
    },
    {
        "line": 64,
        "fullcodeline": "delim++;"
    },
    {
        "line": 65,
        "fullcodeline": "SKIPWS(delim);"
    },
    {
        "line": 66,
        "fullcodeline": "imap_quote_string(term, sizeof(term), delim);"
    },
    {
        "line": 70,
        "fullcodeline": "mutt_buffer_addstr(buf, \"BODY \");"
    },
    {
        "line": 71,
        "fullcodeline": "imap_quote_string(term, sizeof(term), pat->p.str);"
    },
    {
        "line": 75,
        "fullcodeline": "mutt_buffer_addstr(buf, \"TEXT \");"
    },
    {
        "line": 76,
        "fullcodeline": "imap_quote_string(term, sizeof(term), pat->p.str);"
    },
    {
        "line": 88,
        "fullcodeline": "mutt_buffer_addstr(buf, \"X-GM-RAW \");"
    },
    {
        "line": 89,
        "fullcodeline": "imap_quote_string(term, sizeof(term), pat->p.str);"
    },
    {
        "line": 34,
        "fullcodeline": "clause = clause->next;"
    },
    {
        "line": 52,
        "fullcodeline": "if (!delim)"
    },
    {
        "line": 81,
        "fullcodeline": "struct ImapData *idata = ctx->data;"
    },
    {
        "line": 22,
        "fullcodeline": "if (do_search(clause, 0))"
    },
    {
        "line": 26,
        "fullcodeline": "clauses--;"
    },
    {
        "line": 54,
        "fullcodeline": "mutt_error(_(\"Header search without header name: %s\"), pat->p.str);"
    },
    {
        "line": 55,
        "fullcodeline": "return -1;"
    },
    {
        "line": 82,
        "fullcodeline": "if (!mutt_bit_isset(idata->capabilities, X_GM_EXT1))"
    },
    {
        "line": 84,
        "fullcodeline": "mutt_error(_(\"Server-side custom search not supported: %s\"), pat->p.str);"
    },
    {
        "line": 85,
        "fullcodeline": "return -1;"
    },
    {
        "line": 24,
        "fullcodeline": "if (pat->op == MUTT_OR && clauses > 1)"
    },
    {
        "line": 25,
        "fullcodeline": "mutt_buffer_addstr(buf, \"OR \");"
    },
    {
        "line": 28,
        "fullcodeline": "if (compile_search(ctx, clause, buf) < 0)"
    },
    {
        "line": 32,
        "fullcodeline": "mutt_buffer_addch(buf, ' ');"
    },
    {
        "line": 29,
        "fullcodeline": "return -1;"
    }
]