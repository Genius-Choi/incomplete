[
    {
        "line": 3,
        "fullcodeline": "UMat I0Mat = I0.getUMat();"
    },
    {
        "line": 4,
        "fullcodeline": "UMat I1Mat = I1.getUMat();"
    },
    {
        "line": 5,
        "fullcodeline": "bool use_input_flow = false;"
    },
    {
        "line": 10,
        "fullcodeline": "UMat &u_flowMat = flow.getUMatRef();"
    },
    {
        "line": 11,
        "fullcodeline": "coarsest_scale = min((int)(log(max(I0Mat.cols, I0Mat.rows) / (4.0 * patch_size)) / log(2.0) + 0.5), /* Original code serach for maximal movement of width/4 */"
    },
    {
        "line": 14,
        "fullcodeline": "ocl_prepareBuffers(I0Mat, I1Mat, u_flowMat, use_input_flow);"
    },
    {
        "line": 15,
        "fullcodeline": "u_Ux[coarsest_scale].setTo(0.0f);"
    },
    {
        "line": 16,
        "fullcodeline": "u_Uy[coarsest_scale].setTo(0.0f);"
    },
    {
        "line": 48,
        "fullcodeline": "uxy[0] = u_Ux[finest_scale];"
    },
    {
        "line": 49,
        "fullcodeline": "uxy[1] = u_Uy[finest_scale];"
    },
    {
        "line": 50,
        "fullcodeline": "merge(uxy, u_U);"
    },
    {
        "line": 51,
        "fullcodeline": "resize(u_U, u_flowMat, u_flowMat.size());"
    },
    {
        "line": 6,
        "fullcodeline": "if (flow.sameSize(I0) && flow.depth() == CV_32F && flow.channels() == 2)"
    },
    {
        "line": 18,
        "fullcodeline": "for (int i = coarsest_scale; i >= finest_scale; i--)"
    },
    {
        "line": 47,
        "fullcodeline": "vector<UMat> uxy(2);"
    },
    {
        "line": 52,
        "fullcodeline": "multiply(u_flowMat, 1 << finest_scale, u_flowMat);"
    },
    {
        "line": 7,
        "fullcodeline": "use_input_flow = true;"
    },
    {
        "line": 12,
        "fullcodeline": "(int)(log(min(I0Mat.cols, I0Mat.rows) / patch_size) / log(2.0)));              /* Deepest pyramid level greater or equal than patch*/"
    },
    {
        "line": 20,
        "fullcodeline": "w = u_I0s[i].cols;"
    },
    {
        "line": 21,
        "fullcodeline": "h = u_I0s[i].rows;"
    },
    {
        "line": 22,
        "fullcodeline": "ws = 1 + (w - patch_size) / patch_stride;"
    },
    {
        "line": 23,
        "fullcodeline": "hs = 1 + (h - patch_size) / patch_stride;"
    },
    {
        "line": 9,
        "fullcodeline": "flow.create(I1Mat.size(), CV_32FC2);"
    },
    {
        "line": 25,
        "fullcodeline": "if (!ocl_precomputeStructureTensor(u_I0xx_buf, u_I0yy_buf, u_I0xy_buf,"
    },
    {
        "line": 29,
        "fullcodeline": "if (!ocl_PatchInverseSearch(u_Ux[i], u_Uy[i], u_I0s[i], u_I1s_ext[i], u_I0xs[i], u_I0ys[i], 2, i))"
    },
    {
        "line": 32,
        "fullcodeline": "if (!ocl_Densification(u_Ux[i], u_Uy[i], u_Sx, u_Sy, u_I0s[i], u_I1s[i]))"
    },
    {
        "line": 35,
        "fullcodeline": "if (variational_refinement_iter > 0)"
    },
    {
        "line": 39,
        "fullcodeline": "if (i > finest_scale)"
    },
    {
        "line": 36,
        "fullcodeline": "variational_refinement_processors[i]->calcUV(u_I0s[i], u_I1s[i],"
    },
    {
        "line": 41,
        "fullcodeline": "resize(u_Ux[i], u_Ux[i - 1], u_Ux[i - 1].size());"
    },
    {
        "line": 42,
        "fullcodeline": "resize(u_Uy[i], u_Uy[i - 1], u_Uy[i - 1].size());"
    },
    {
        "line": 43,
        "fullcodeline": "multiply(u_Ux[i - 1], 2, u_Ux[i - 1]);"
    },
    {
        "line": 44,
        "fullcodeline": "multiply(u_Uy[i - 1], 2, u_Uy[i - 1]);"
    },
    {
        "line": 37,
        "fullcodeline": "u_Ux[i].getMat(ACCESS_WRITE), u_Uy[i].getMat(ACCESS_WRITE));"
    }
]