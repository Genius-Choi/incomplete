[
    {
        "line": 3,
        "fullcodeline": "CV_Assert(!I0.empty() && I0.depth() == CV_8U && I0.channels() == 1);"
    },
    {
        "line": 4,
        "fullcodeline": "CV_Assert(!I1.empty() && I1.depth() == CV_8U && I1.channels() == 1);"
    },
    {
        "line": 5,
        "fullcodeline": "CV_Assert(I0.sameSize(I1));"
    },
    {
        "line": 6,
        "fullcodeline": "CV_Assert(I0.isContinuous());"
    },
    {
        "line": 7,
        "fullcodeline": "CV_Assert(I1.isContinuous());"
    },
    {
        "line": 9,
        "fullcodeline": "CV_OCL_RUN(flow.isUMat() &&"
    },
    {
        "line": 13,
        "fullcodeline": "Mat I0Mat = I0.getMat();"
    },
    {
        "line": 14,
        "fullcodeline": "Mat I1Mat = I1.getMat();"
    },
    {
        "line": 15,
        "fullcodeline": "bool use_input_flow = false;"
    },
    {
        "line": 20,
        "fullcodeline": "Mat flowMat = flow.getMat();"
    },
    {
        "line": 21,
        "fullcodeline": "coarsest_scale = min((int)(log(max(I0Mat.cols, I0Mat.rows) / (4.0 * patch_size)) / log(2.0) + 0.5), /* Original code serach for maximal movement of width/4 */"
    },
    {
        "line": 23,
        "fullcodeline": "int num_stripes = getNumThreads();"
    },
    {
        "line": 25,
        "fullcodeline": "prepareBuffers(I0Mat, I1Mat, flowMat, use_input_flow);"
    },
    {
        "line": 26,
        "fullcodeline": "Ux[coarsest_scale].setTo(0.0f);"
    },
    {
        "line": 27,
        "fullcodeline": "Uy[coarsest_scale].setTo(0.0f);"
    },
    {
        "line": 65,
        "fullcodeline": "Mat uxy[] = {Ux[finest_scale], Uy[finest_scale]};"
    },
    {
        "line": 66,
        "fullcodeline": "merge(uxy, 2, U);"
    },
    {
        "line": 67,
        "fullcodeline": "resize(U, flowMat, flowMat.size());"
    },
    {
        "line": 68,
        "fullcodeline": "flowMat *= 1 << finest_scale;"
    },
    {
        "line": 11,
        "fullcodeline": "ocl_calc(I0, I1, flow));"
    },
    {
        "line": 16,
        "fullcodeline": "if (flow.sameSize(I0) && flow.depth() == CV_32F && flow.channels() == 2)"
    },
    {
        "line": 29,
        "fullcodeline": "for (int i = coarsest_scale; i >= finest_scale; i--)"
    },
    {
        "line": 10,
        "fullcodeline": "(patch_size == 8) && (use_spatial_propagation == true),"
    },
    {
        "line": 17,
        "fullcodeline": "use_input_flow = true;"
    },
    {
        "line": 22,
        "fullcodeline": "(int)(log(min(I0Mat.cols, I0Mat.rows) / patch_size) / log(2.0)));              /* Deepest pyramid level greater or equal than patch*/"
    },
    {
        "line": 33,
        "fullcodeline": "ws = 1 + (w - patch_size) / patch_stride;"
    },
    {
        "line": 34,
        "fullcodeline": "hs = 1 + (h - patch_size) / patch_stride;"
    },
    {
        "line": 36,
        "fullcodeline": "precomputeStructureTensor(I0xx_buf, I0yy_buf, I0xy_buf, I0x_buf, I0y_buf, I0xs[i], I0ys[i]);"
    },
    {
        "line": 52,
        "fullcodeline": "parallel_for_(Range(0, num_stripes),"
    },
    {
        "line": 19,
        "fullcodeline": "flow.create(I1Mat.size(), CV_32FC2);"
    },
    {
        "line": 53,
        "fullcodeline": "Densification_ParBody(*this, num_stripes, I0s[i].rows, Ux[i], Uy[i], Sx, Sy, I0s[i], I1s[i]));"
    },
    {
        "line": 54,
        "fullcodeline": "if (variational_refinement_iter > 0)"
    },
    {
        "line": 57,
        "fullcodeline": "if (i > finest_scale)"
    },
    {
        "line": 42,
        "fullcodeline": "parallel_for_(Range(0, 8), PatchInverseSearch_ParBody(*this, 8, hs, Sx, Sy, Ux[i], Uy[i], I0s[i],"
    },
    {
        "line": 55,
        "fullcodeline": "variational_refinement_processors[i]->calcUV(I0s[i], I1s[i], Ux[i], Uy[i]);"
    },
    {
        "line": 59,
        "fullcodeline": "resize(Ux[i], Ux[i - 1], Ux[i - 1].size());"
    },
    {
        "line": 60,
        "fullcodeline": "resize(Uy[i], Uy[i - 1], Uy[i - 1].size());"
    },
    {
        "line": 61,
        "fullcodeline": "Ux[i - 1] *= 2;"
    },
    {
        "line": 62,
        "fullcodeline": "Uy[i - 1] *= 2;"
    },
    {
        "line": 47,
        "fullcodeline": "parallel_for_(Range(0, num_stripes),"
    },
    {
        "line": 48,
        "fullcodeline": "PatchInverseSearch_ParBody(*this, num_stripes, hs, Sx, Sy, Ux[i], Uy[i], I0s[i], I1s_ext[i],"
    }
]