[
    {
        "line": 3,
        "fullcodeline": "struct json_object *jobj = NULL;"
    },
    {
        "line": 4,
        "fullcodeline": "char *str = NULL;"
    },
    {
        "line": 10,
        "fullcodeline": "err = jzon_creatf(&jobj, \"sss\","
    },
    {
        "line": 44,
        "fullcodeline": "err = jzon_add_bool(jobj, \"resp\", msg->resp);"
    },
    {
        "line": 210,
        "fullcodeline": "err = jzon_encode(&str, jobj);"
    },
    {
        "line": 215,
        "fullcodeline": "mem_deref(jobj);"
    },
    {
        "line": 7,
        "fullcodeline": "if (!strp || !msg)"
    },
    {
        "line": 17,
        "fullcodeline": "if (str_isset(msg->src_userid)) {"
    },
    {
        "line": 23,
        "fullcodeline": "if (str_isset(msg->src_clientid)) {"
    },
    {
        "line": 30,
        "fullcodeline": "if (str_isset(msg->dest_userid)) {"
    },
    {
        "line": 37,
        "fullcodeline": "if (str_isset(msg->dest_clientid)) {"
    },
    {
        "line": 12,
        "fullcodeline": "\"type\",   econn_msg_name(msg->msg_type),"
    },
    {
        "line": 18,
        "fullcodeline": "err = jzon_add_str(jobj, \"src_userid\", \"%s\", msg->src_userid);"
    },
    {
        "line": 24,
        "fullcodeline": "err = jzon_add_str(jobj, \"src_clientid\","
    },
    {
        "line": 31,
        "fullcodeline": "err = jzon_add_str(jobj, \"dest_userid\","
    },
    {
        "line": 38,
        "fullcodeline": "err = jzon_add_str(jobj, \"dest_clientid\","
    },
    {
        "line": 53,
        "fullcodeline": "err = jzon_add_str(jobj, \"sdp\", \"%s\", msg->u.setup.sdp_msg);"
    },
    {
        "line": 88,
        "fullcodeline": "err = econn_props_encode(jobj, msg->u.propsync.props);"
    },
    {
        "line": 115,
        "fullcodeline": "jzon_add_bool(jobj, \"update\","
    },
    {
        "line": 117,
        "fullcodeline": "jzon_add_str(jobj, \"tool\","
    },
    {
        "line": 119,
        "fullcodeline": "jzon_add_str(jobj, \"toolver\","
    },
    {
        "line": 121,
        "fullcodeline": "jzon_add_int(jobj, \"status\","
    },
    {
        "line": 123,
        "fullcodeline": "jzon_add_bool(jobj, \"selective_audio\","
    },
    {
        "line": 125,
        "fullcodeline": "jzon_add_bool(jobj, \"selective_video\","
    },
    {
        "line": 127,
        "fullcodeline": "jzon_add_int(jobj, \"vstreams\","
    },
    {
        "line": 132,
        "fullcodeline": "jzon_add_str(jobj, \"sft_url\", \"%s\", msg->u.confstart.sft_url);"
    },
    {
        "line": 133,
        "fullcodeline": "jzon_add_base64(jobj, \"secret\","
    },
    {
        "line": 135,
        "fullcodeline": "jzon_add_str(jobj, \"timestamp\", \"%llu\", msg->u.confstart.timestamp);"
    },
    {
        "line": 136,
        "fullcodeline": "jzon_add_str(jobj, \"seqno\", \"%u\", msg->u.confstart.seqno);"
    },
    {
        "line": 146,
        "fullcodeline": "jzon_add_str(jobj, \"sft_url\", \"%s\", msg->u.confcheck.sft_url);"
    },
    {
        "line": 147,
        "fullcodeline": "jzon_add_base64(jobj, \"secret\","
    },
    {
        "line": 149,
        "fullcodeline": "jzon_add_str(jobj, \"timestamp\", \"%llu\", msg->u.confcheck.timestamp);"
    },
    {
        "line": 150,
        "fullcodeline": "jzon_add_str(jobj, \"seqno\", \"%u\", msg->u.confcheck.seqno);"
    },
    {
        "line": 157,
        "fullcodeline": "jzon_add_bool(jobj, \"should_start\","
    },
    {
        "line": 159,
        "fullcodeline": "jzon_add_str(jobj, \"timestamp\", \"%llu\", msg->u.confpart.timestamp);"
    },
    {
        "line": 160,
        "fullcodeline": "jzon_add_str(jobj, \"seqno\", \"%u\", msg->u.confpart.seqno);"
    },
    {
        "line": 161,
        "fullcodeline": "jzon_add_base64(jobj, \"entropy\","
    },
    {
        "line": 163,
        "fullcodeline": "econn_parts_encode(jobj, &msg->u.confpart.partl);"
    },
    {
        "line": 167,
        "fullcodeline": "econn_keys_encode(jobj, &msg->u.confkey.keyl);"
    },
    {
        "line": 171,
        "fullcodeline": "err = zapi_iceservers_encode(jobj,"
    },
    {
        "line": 177,
        "fullcodeline": "err = jzon_add_str(jobj, \"sdp\","
    },
    {
        "line": 179,
        "fullcodeline": "err |= jzon_add_str(jobj, \"username\","
    },
    {
        "line": 186,
        "fullcodeline": "err = jzon_add_str(jobj, \"sdp\","
    },
    {
        "line": 193,
        "fullcodeline": "err  = jzon_add_int(jobj, \"level\", msg->u.alert.level);"
    },
    {
        "line": 194,
        "fullcodeline": "err |= jzon_add_str(jobj, \"descr\", \"%s\", msg->u.alert.descr);"
    },
    {
        "line": 203,
        "fullcodeline": "warning(\"econn: dont know how to encode %d\\n\", msg->msg_type);"
    },
    {
        "line": 204,
        "fullcodeline": "err = EBADMSG;"
    },
    {
        "line": 217,
        "fullcodeline": "mem_deref(str);"
    },
    {
        "line": 107,
        "fullcodeline": "if (msg->u.confconn.turnc > 0) {"
    },
    {
        "line": 219,
        "fullcodeline": "*strp = str;"
    },
    {
        "line": 59,
        "fullcodeline": "err = econn_props_encode(jobj, msg->u.setup.props);"
    },
    {
        "line": 64,
        "fullcodeline": "err = jzon_add_str(jobj, \"url\", \"%s\", msg->u.setup.url);"
    },
    {
        "line": 83,
        "fullcodeline": "warning(\"propsync: missing props\\n\");"
    },
    {
        "line": 84,
        "fullcodeline": "err = EINVAL;"
    },
    {
        "line": 96,
        "fullcodeline": "err = econn_props_encode(jobj, msg->u.groupstart.props);"
    },
    {
        "line": 108,
        "fullcodeline": "err = zapi_iceservers_encode(jobj,"
    },
    {
        "line": 139,
        "fullcodeline": "err = econn_props_encode(jobj, msg->u.confstart.props);"
    }
]