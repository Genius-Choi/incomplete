[
    {
        "line": 7,
        "fullcodeline": "char uid_anon[ANON_ID_LEN];"
    },
    {
        "line": 8,
        "fullcodeline": "char cid_anon[ANON_CLIENT_LEN];"
    },
    {
        "line": 9,
        "fullcodeline": "struct mbuf *pmb = NULL;"
    },
    {
        "line": 10,
        "fullcodeline": "int err = 0;"
    },
    {
        "line": 16,
        "fullcodeline": "jobj = jzon_alloc_object();"
    },
    {
        "line": 20,
        "fullcodeline": "jarr = jzon_alloc_array();"
    },
    {
        "line": 31,
        "fullcodeline": "LIST_FOREACH(levell, le) {"
    },
    {
        "line": 66,
        "fullcodeline": "json_object_object_add(jobj, \"audio_levels\", jarr);"
    },
    {
        "line": 74,
        "fullcodeline": "jzon_encode(json_str, jobj);"
    },
    {
        "line": 76,
        "fullcodeline": "mem_deref(jobj);"
    },
    {
        "line": 13,
        "fullcodeline": "if (!levell || !json_str)"
    },
    {
        "line": 17,
        "fullcodeline": "if (!jobj)"
    },
    {
        "line": 21,
        "fullcodeline": "if (!jarr) {"
    },
    {
        "line": 32,
        "fullcodeline": "struct audio_level *a = le->data;"
    },
    {
        "line": 34,
        "fullcodeline": "const char *userid = a->userid;"
    },
    {
        "line": 35,
        "fullcodeline": "const char *clientid = a->clientid;"
    },
    {
        "line": 44,
        "fullcodeline": "ja = jzon_alloc_object();"
    },
    {
        "line": 53,
        "fullcodeline": "json_object_array_add(jarr, ja);"
    },
    {
        "line": 22,
        "fullcodeline": "err = ENOMEM;"
    },
    {
        "line": 27,
        "fullcodeline": "pmb = mbuf_alloc(512);"
    },
    {
        "line": 28,
        "fullcodeline": "mbuf_printf(pmb, \"%zu levels: \", list_count(levell));"
    },
    {
        "line": 69,
        "fullcodeline": "pmb->pos = 0;"
    },
    {
        "line": 70,
        "fullcodeline": "mbuf_strdup(pmb, anon_str, pmb->end);"
    },
    {
        "line": 71,
        "fullcodeline": "mem_deref(pmb);"
    },
    {
        "line": 46,
        "fullcodeline": "jzon_add_str(ja, \"userid\", userid);"
    },
    {
        "line": 47,
        "fullcodeline": "jzon_add_str(ja, \"clientid\", clientid);"
    },
    {
        "line": 48,
        "fullcodeline": "jzon_add_int(ja, \"audio_level\","
    },
    {
        "line": 50,
        "fullcodeline": "jzon_add_int(ja, \"audio_level_now\","
    },
    {
        "line": 57,
        "fullcodeline": "anon_id(uid_anon, userid);"
    },
    {
        "line": 58,
        "fullcodeline": "anon_client(cid_anon, clientid);"
    },
    {
        "line": 59,
        "fullcodeline": "mbuf_printf(pmb, \"{[%s.%s] audio_level: %d/%d}\","
    },
    {
        "line": 49,
        "fullcodeline": "(int32_t)a->aulevel_smooth);"
    },
    {
        "line": 51,
        "fullcodeline": "(int32_t)a->aulevel);"
    },
    {
        "line": 62,
        "fullcodeline": "if (le != levell->tail)"
    },
    {
        "line": 39,
        "fullcodeline": "userid = userid_self;"
    },
    {
        "line": 41,
        "fullcodeline": "clientid = clientid_self;"
    },
    {
        "line": 63,
        "fullcodeline": "mbuf_printf(pmb, \",\");"
    }
]