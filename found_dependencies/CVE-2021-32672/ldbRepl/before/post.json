[
    {
        "line": 112,
        "fullcodeline": "sdsfreesplitres(argv,argc);"
    },
    {
        "line": 22,
        "fullcodeline": "sdsfree(ldb.cbuf);"
    },
    {
        "line": 23,
        "fullcodeline": "ldb.cbuf = sdsempty();"
    },
    {
        "line": 108,
        "fullcodeline": "sdsfreesplitres(argv,argc);"
    },
    {
        "line": 8,
        "fullcodeline": "while((argv = ldbReplParseCommand(&argc)) == NULL) {"
    },
    {
        "line": 26,
        "fullcodeline": "if (!strcasecmp(argv[0],\"h\") || !strcasecmp(argv[0],\"help\")) {"
    },
    {
        "line": 9,
        "fullcodeline": "char buf[1024];"
    },
    {
        "line": 10,
        "fullcodeline": "int nread = connRead(ldb.conn,buf,sizeof(buf));"
    },
    {
        "line": 18,
        "fullcodeline": "ldb.cbuf = sdscatlen(ldb.cbuf,buf,nread);"
    },
    {
        "line": 27,
        "fullcodeline": "ldbLog(sdsnew(\"Redis Lua debugger help:\"));"
    },
    {
        "line": 28,
        "fullcodeline": "ldbLog(sdsnew(\"[h]elp               Show this help.\"));"
    },
    {
        "line": 29,
        "fullcodeline": "ldbLog(sdsnew(\"[s]tep               Run current line and stop again.\"));"
    },
    {
        "line": 30,
        "fullcodeline": "ldbLog(sdsnew(\"[n]ext               Alias for step.\"));"
    },
    {
        "line": 31,
        "fullcodeline": "ldbLog(sdsnew(\"[c]continue          Run till next breakpoint.\"));"
    },
    {
        "line": 32,
        "fullcodeline": "ldbLog(sdsnew(\"[l]list              List source code around current line.\"));"
    },
    {
        "line": 33,
        "fullcodeline": "ldbLog(sdsnew(\"[l]list [line]       List source code around [line].\"));"
    },
    {
        "line": 34,
        "fullcodeline": "ldbLog(sdsnew(\"                     line = 0 means: current position.\"));"
    },
    {
        "line": 35,
        "fullcodeline": "ldbLog(sdsnew(\"[l]list [line] [ctx] In this form [ctx] specifies how many lines\"));"
    },
    {
        "line": 36,
        "fullcodeline": "ldbLog(sdsnew(\"                     to show before/after [line].\"));"
    },
    {
        "line": 37,
        "fullcodeline": "ldbLog(sdsnew(\"[w]hole              List all source code. Alias for 'list 1 1000000'.\"));"
    },
    {
        "line": 38,
        "fullcodeline": "ldbLog(sdsnew(\"[p]rint              Show all the local variables.\"));"
    },
    {
        "line": 39,
        "fullcodeline": "ldbLog(sdsnew(\"[p]rint <var>        Show the value of the specified variable.\"));"
    },
    {
        "line": 40,
        "fullcodeline": "ldbLog(sdsnew(\"                     Can also show global vars KEYS and ARGV.\"));"
    },
    {
        "line": 41,
        "fullcodeline": "ldbLog(sdsnew(\"[b]reak              Show all breakpoints.\"));"
    },
    {
        "line": 42,
        "fullcodeline": "ldbLog(sdsnew(\"[b]reak <line>       Add a breakpoint to the specified line.\"));"
    },
    {
        "line": 43,
        "fullcodeline": "ldbLog(sdsnew(\"[b]reak -<line>      Remove breakpoint from the specified line.\"));"
    },
    {
        "line": 44,
        "fullcodeline": "ldbLog(sdsnew(\"[b]reak 0            Remove all breakpoints.\"));"
    },
    {
        "line": 45,
        "fullcodeline": "ldbLog(sdsnew(\"[t]race              Show a backtrace.\"));"
    },
    {
        "line": 46,
        "fullcodeline": "ldbLog(sdsnew(\"[e]eval <code>       Execute some Lua code (in a different callframe).\"));"
    },
    {
        "line": 47,
        "fullcodeline": "ldbLog(sdsnew(\"[r]edis <cmd>        Execute a Redis command.\"));"
    },
    {
        "line": 48,
        "fullcodeline": "ldbLog(sdsnew(\"[m]axlen [len]       Trim logged Redis replies and Lua var dumps to len.\"));"
    },
    {
        "line": 49,
        "fullcodeline": "ldbLog(sdsnew(\"                     Specifying zero as <len> means unlimited.\"));"
    },
    {
        "line": 50,
        "fullcodeline": "ldbLog(sdsnew(\"[a]bort              Stop the execution of the script. In sync\"));"
    },
    {
        "line": 51,
        "fullcodeline": "ldbLog(sdsnew(\"                     mode dataset changes will be retained.\"));"
    },
    {
        "line": 52,
        "fullcodeline": "ldbLog(sdsnew(\"\"));"
    },
    {
        "line": 53,
        "fullcodeline": "ldbLog(sdsnew(\"Debugger functions you can call from Lua scripts:\"));"
    },
    {
        "line": 54,
        "fullcodeline": "ldbLog(sdsnew(\"redis.debug()        Produce logs in the debugger console.\"));"
    },
    {
        "line": 55,
        "fullcodeline": "ldbLog(sdsnew(\"redis.breakpoint()   Stop execution like if there was a breakpoint in the\"));"
    },
    {
        "line": 56,
        "fullcodeline": "ldbLog(sdsnew(\"                     next line of code.\"));"
    },
    {
        "line": 57,
        "fullcodeline": "ldbSendLogs();"
    },
    {
        "line": 11,
        "fullcodeline": "if (nread <= 0) {"
    },
    {
        "line": 14,
        "fullcodeline": "ldb.step = 0;"
    },
    {
        "line": 15,
        "fullcodeline": "ldb.bpcount = 0;"
    },
    {
        "line": 58,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"s\") || !strcasecmp(argv[0],\"step\") ||"
    },
    {
        "line": 59,
        "fullcodeline": "!strcasecmp(argv[0],\"n\") || !strcasecmp(argv[0],\"next\")) {"
    },
    {
        "line": 60,
        "fullcodeline": "ldb.step = 1;"
    },
    {
        "line": 62,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"c\") || !strcasecmp(argv[0],\"continue\")){"
    },
    {
        "line": 64,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"t\") || !strcasecmp(argv[0],\"trace\")) {"
    },
    {
        "line": 65,
        "fullcodeline": "ldbTrace(lua);"
    },
    {
        "line": 66,
        "fullcodeline": "ldbSendLogs();"
    },
    {
        "line": 67,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"m\") || !strcasecmp(argv[0],\"maxlen\")) {"
    },
    {
        "line": 68,
        "fullcodeline": "ldbMaxlen(argv,argc);"
    },
    {
        "line": 69,
        "fullcodeline": "ldbSendLogs();"
    },
    {
        "line": 70,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"b\") || !strcasecmp(argv[0],\"break\")) {"
    },
    {
        "line": 71,
        "fullcodeline": "ldbBreak(argv,argc);"
    },
    {
        "line": 72,
        "fullcodeline": "ldbSendLogs();"
    },
    {
        "line": 73,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"e\") || !strcasecmp(argv[0],\"eval\")) {"
    },
    {
        "line": 74,
        "fullcodeline": "ldbEval(lua,argv,argc);"
    },
    {
        "line": 75,
        "fullcodeline": "ldbSendLogs();"
    },
    {
        "line": 76,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"a\") || !strcasecmp(argv[0],\"abort\")) {"
    },
    {
        "line": 77,
        "fullcodeline": "lua_pushstring(lua, \"script aborted for user request\");"
    },
    {
        "line": 78,
        "fullcodeline": "lua_error(lua);"
    },
    {
        "line": 79,
        "fullcodeline": "} else if (argc > 1 &&"
    },
    {
        "line": 80,
        "fullcodeline": "(!strcasecmp(argv[0],\"r\") || !strcasecmp(argv[0],\"redis\"))) {"
    },
    {
        "line": 81,
        "fullcodeline": "ldbRedis(lua,argv,argc);"
    },
    {
        "line": 82,
        "fullcodeline": "ldbSendLogs();"
    },
    {
        "line": 83,
        "fullcodeline": "} else if ((!strcasecmp(argv[0],\"p\") || !strcasecmp(argv[0],\"print\"))) {"
    },
    {
        "line": 88,
        "fullcodeline": "ldbSendLogs();"
    },
    {
        "line": 84,
        "fullcodeline": "if (argc == 2)"
    },
    {
        "line": 85,
        "fullcodeline": "ldbPrint(lua,argv[1]);"
    },
    {
        "line": 89,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"l\") || !strcasecmp(argv[0],\"list\")){"
    },
    {
        "line": 87,
        "fullcodeline": "ldbPrintAll(lua);"
    },
    {
        "line": 90,
        "fullcodeline": "int around = ldb.currentline, ctx = 5;"
    },
    {
        "line": 96,
        "fullcodeline": "ldbList(around,ctx);"
    },
    {
        "line": 97,
        "fullcodeline": "ldbSendLogs();"
    },
    {
        "line": 91,
        "fullcodeline": "if (argc > 1) {"
    },
    {
        "line": 95,
        "fullcodeline": "if (argc > 2) ctx = atoi(argv[2]);"
    },
    {
        "line": 92,
        "fullcodeline": "int num = atoi(argv[1]);"
    },
    {
        "line": 98,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"w\") || !strcasecmp(argv[0],\"whole\")){"
    },
    {
        "line": 93,
        "fullcodeline": "if (num > 0) around = num;"
    },
    {
        "line": 99,
        "fullcodeline": "ldbList(1,1000000);"
    },
    {
        "line": 100,
        "fullcodeline": "ldbSendLogs();"
    },
    {
        "line": 102,
        "fullcodeline": "ldbLog(sdsnew(\"<error> Unknown Redis Lua debugger command or \""
    },
    {
        "line": 104,
        "fullcodeline": "ldbSendLogs();"
    }
]