[
    {
        "line": 3,
        "fullcodeline": "GF_AC3DmxCtx *ctx = gf_filter_get_udta(filter);"
    },
    {
        "line": 11,
        "fullcodeline": "cts = GF_FILTER_NO_TS;"
    },
    {
        "line": 20,
        "fullcodeline": "pck = gf_filter_pid_get_packet(ctx->ipid);"
    },
    {
        "line": 35,
        "fullcodeline": "prev_pck_size = ctx->ac3_buffer_size;"
    },
    {
        "line": 82,
        "fullcodeline": "remain = ctx->ac3_buffer_size;"
    },
    {
        "line": 83,
        "fullcodeline": "start = ctx->ac3_buffer;"
    },
    {
        "line": 14,
        "fullcodeline": "if (!ctx->duration.num)"
    },
    {
        "line": 17,
        "fullcodeline": "if (ctx->opid && !ctx->is_playing)"
    },
    {
        "line": 21,
        "fullcodeline": "if (!pck) {"
    },
    {
        "line": 36,
        "fullcodeline": "if (pck && !ctx->resume_from) {"
    },
    {
        "line": 70,
        "fullcodeline": "if (ctx->timescale && pck) {"
    },
    {
        "line": 77,
        "fullcodeline": "if (cts == GF_FILTER_NO_TS) {"
    },
    {
        "line": 91,
        "fullcodeline": "if (!ctx->bs) {"
    },
    {
        "line": 198,
        "fullcodeline": "if (!pck) {"
    },
    {
        "line": 15,
        "fullcodeline": "ac3dmx_check_dur(filter, ctx);"
    },
    {
        "line": 37,
        "fullcodeline": "const u8 *data = gf_filter_pck_get_data(pck, &pck_size);"
    },
    {
        "line": 65,
        "fullcodeline": "memcpy(ctx->ac3_buffer + ctx->ac3_buffer_size, data, pck_size);"
    },
    {
        "line": 66,
        "fullcodeline": "ctx->ac3_buffer_size += pck_size;"
    },
    {
        "line": 71,
        "fullcodeline": "cts = gf_filter_pck_get_cts(pck);"
    },
    {
        "line": 79,
        "fullcodeline": "prev_pck_size = 0;"
    },
    {
        "line": 86,
        "fullcodeline": "start += ctx->resume_from - 1;"
    },
    {
        "line": 87,
        "fullcodeline": "remain -= ctx->resume_from - 1;"
    },
    {
        "line": 88,
        "fullcodeline": "ctx->resume_from = 0;"
    },
    {
        "line": 92,
        "fullcodeline": "ctx->bs = gf_bs_new(start, remain, GF_BITSTREAM_READ);"
    },
    {
        "line": 99,
        "fullcodeline": "u32 sync_pos, bytes_to_drop=0;"
    },
    {
        "line": 101,
        "fullcodeline": "res = ctx->ac3_parser_bs(ctx->bs, &ctx->hdr, GF_TRUE);"
    },
    {
        "line": 103,
        "fullcodeline": "sync_pos = (u32) gf_bs_get_position(ctx->bs);"
    },
    {
        "line": 129,
        "fullcodeline": "sync = start + sync_pos;"
    },
    {
        "line": 139,
        "fullcodeline": "bytes_to_drop = sync_pos + ctx->hdr.framesize;"
    },
    {
        "line": 169,
        "fullcodeline": "ac3dmx_update_cts(ctx);"
    },
    {
        "line": 180,
        "fullcodeline": "start += bytes_to_drop;"
    },
    {
        "line": 181,
        "fullcodeline": "remain -= bytes_to_drop;"
    },
    {
        "line": 182,
        "fullcodeline": "gf_bs_reassign_buffer(ctx->bs, start, remain);"
    },
    {
        "line": 199,
        "fullcodeline": "ctx->ac3_buffer_size = 0;"
    },
    {
        "line": 22,
        "fullcodeline": "if (gf_filter_pid_is_eos(ctx->ipid)) {"
    },
    {
        "line": 38,
        "fullcodeline": "if (!pck_size) {"
    },
    {
        "line": 44,
        "fullcodeline": "if (ctx->ac3_buffer_size>100000) {"
    },
    {
        "line": 49,
        "fullcodeline": "if (ctx->byte_offset != GF_FILTER_NO_BO) {"
    },
    {
        "line": 61,
        "fullcodeline": "if (ctx->ac3_buffer_size + pck_size > ctx->ac3_buffer_alloc) {"
    },
    {
        "line": 73,
        "fullcodeline": "if (!ctx->cts && (cts != GF_FILTER_NO_TS))"
    },
    {
        "line": 94,
        "fullcodeline": "gf_bs_reassign_buffer(ctx->bs, start, remain);"
    },
    {
        "line": 106,
        "fullcodeline": "if (pck || !ctx->hdr.framesize) {"
    },
    {
        "line": 118,
        "fullcodeline": "if (!ctx->sample_rate)"
    },
    {
        "line": 121,
        "fullcodeline": "if (!ctx->is_playing) {"
    },
    {
        "line": 140,
        "fullcodeline": "if (ctx->timescale && !prev_pck_size &&  (cts != GF_FILTER_NO_TS) ) {"
    },
    {
        "line": 147,
        "fullcodeline": "if (!ctx->in_seek) {"
    },
    {
        "line": 172,
        "fullcodeline": "if (bytes_to_drop>remain) {"
    },
    {
        "line": 177,
        "fullcodeline": "if (!bytes_to_drop) {"
    },
    {
        "line": 194,
        "fullcodeline": "if (ctx->byte_offset != GF_FILTER_NO_BO)"
    },
    {
        "line": 45,
        "fullcodeline": "GF_LOG(GF_LOG_WARNING, GF_LOG_MEDIA, (\"[AC3Dmx] Trashing %d garbage bytes\\n\", ctx->ac3_buffer_size));"
    },
    {
        "line": 46,
        "fullcodeline": "ctx->ac3_buffer_size = 0;"
    },
    {
        "line": 50,
        "fullcodeline": "u64 byte_offset = gf_filter_pck_get_byte_offset(pck);"
    },
    {
        "line": 62,
        "fullcodeline": "ctx->ac3_buffer_alloc = ctx->ac3_buffer_size + pck_size;"
    },
    {
        "line": 63,
        "fullcodeline": "ctx->ac3_buffer = gf_realloc(ctx->ac3_buffer, ctx->ac3_buffer_alloc);"
    },
    {
        "line": 74,
        "fullcodeline": "ctx->cts = cts;"
    },
    {
        "line": 115,
        "fullcodeline": "ac3dmx_check_pid(filter, ctx);"
    },
    {
        "line": 119,
        "fullcodeline": "ac3dmx_check_pid(filter, ctx);"
    },
    {
        "line": 127,
        "fullcodeline": "GF_LOG(GF_LOG_WARNING, GF_LOG_MEDIA, (\"[AC3Dmx] %d bytes unrecovered before sync word\\n\", sync_pos));"
    },
    {
        "line": 132,
        "fullcodeline": "u64 nb_samples_at_seek = (u64) (ctx->start_range * ctx->hdr.sample_rate);"
    },
    {
        "line": 144,
        "fullcodeline": "cts = GF_FILTER_NO_TS;"
    },
    {
        "line": 148,
        "fullcodeline": "dst_pck = gf_filter_pck_new_alloc(ctx->opid, ctx->hdr.framesize, &output);"
    },
    {
        "line": 153,
        "fullcodeline": "memcpy(output, sync, ctx->hdr.framesize);"
    },
    {
        "line": 154,
        "fullcodeline": "gf_filter_pck_set_dts(dst_pck, ctx->cts);"
    },
    {
        "line": 155,
        "fullcodeline": "gf_filter_pck_set_cts(dst_pck, ctx->cts);"
    },
    {
        "line": 160,
        "fullcodeline": "gf_filter_pck_set_sap(dst_pck, GF_FILTER_SAP_1);"
    },
    {
        "line": 161,
        "fullcodeline": "gf_filter_pck_set_framing(dst_pck, GF_TRUE, GF_TRUE);"
    },
    {
        "line": 167,
        "fullcodeline": "gf_filter_pck_send(dst_pck);"
    },
    {
        "line": 173,
        "fullcodeline": "GF_LOG(GF_LOG_WARNING, GF_LOG_MEDIA, (\"[ADTSDmx] truncated AC3 frame!\\n\"));"
    },
    {
        "line": 174,
        "fullcodeline": "bytes_to_drop=remain;"
    },
    {
        "line": 178,
        "fullcodeline": "bytes_to_drop = 1;"
    },
    {
        "line": 195,
        "fullcodeline": "ctx->byte_offset += bytes_to_drop;"
    },
    {
        "line": 203,
        "fullcodeline": "if (remain && (remain < ctx->ac3_buffer_size)) {"
    },
    {
        "line": 23,
        "fullcodeline": "if (!ctx->ac3_buffer_size) {"
    },
    {
        "line": 51,
        "fullcodeline": "if (!ctx->ac3_buffer_size) {"
    },
    {
        "line": 108,
        "fullcodeline": "if (!res || (remain < sync_pos + ctx->hdr.framesize)) {"
    },
    {
        "line": 122,
        "fullcodeline": "ctx->resume_from = 1 + ctx->ac3_buffer_size - remain;"
    },
    {
        "line": 133,
        "fullcodeline": "if (ctx->cts + AC3_FRAME_SIZE >= nb_samples_at_seek) {"
    },
    {
        "line": 142,
        "fullcodeline": "if ((cts > ctx->cts + ctx->timescale) || (ctx->cts > cts + ctx->timescale))"
    },
    {
        "line": 149,
        "fullcodeline": "if (!dst_pck) return GF_OUT_OF_MEM;"
    },
    {
        "line": 156,
        "fullcodeline": "if (ctx->timescale && (ctx->timescale!=ctx->sample_rate))"
    },
    {
        "line": 163,
        "fullcodeline": "if (ctx->byte_offset != GF_FILTER_NO_BO) {"
    },
    {
        "line": 185,
        "fullcodeline": "if (prev_pck_size > bytes_to_drop) prev_pck_size -= bytes_to_drop;"
    },
    {
        "line": 204,
        "fullcodeline": "memmove(ctx->ac3_buffer, start, remain);"
    },
    {
        "line": 27,
        "fullcodeline": "ctx->src_pck = NULL;"
    },
    {
        "line": 52,
        "fullcodeline": "ctx->byte_offset = byte_offset;"
    },
    {
        "line": 135,
        "fullcodeline": "ctx->in_seek = GF_FALSE;"
    },
    {
        "line": 143,
        "fullcodeline": "ctx->cts = cts;"
    },
    {
        "line": 151,
        "fullcodeline": "if (ctx->src_pck) gf_filter_pck_merge_properties(ctx->src_pck, dst_pck);"
    },
    {
        "line": 157,
        "fullcodeline": "gf_filter_pck_set_duration(dst_pck, (u32) gf_timestamp_rescale(AC3_FRAME_SIZE, ctx->sample_rate, ctx->timescale));"
    },
    {
        "line": 164,
        "fullcodeline": "gf_filter_pck_set_byte_offset(dst_pck, ctx->byte_offset + ctx->hdr.framesize);"
    },
    {
        "line": 109,
        "fullcodeline": "if (sync_pos && ctx->hdr.framesize) {"
    },
    {
        "line": 159,
        "fullcodeline": "gf_filter_pck_set_duration(dst_pck, AC3_FRAME_SIZE);"
    },
    {
        "line": 187,
        "fullcodeline": "prev_pck_size=0;"
    },
    {
        "line": 189,
        "fullcodeline": "ctx->src_pck = pck;"
    },
    {
        "line": 53,
        "fullcodeline": "} else if (ctx->byte_offset + ctx->ac3_buffer_size != byte_offset) {"
    },
    {
        "line": 110,
        "fullcodeline": "start += sync_pos;"
    },
    {
        "line": 111,
        "fullcodeline": "remain -= sync_pos;"
    },
    {
        "line": 54,
        "fullcodeline": "ctx->byte_offset = GF_FILTER_NO_BO;"
    },
    {
        "line": 188,
        "fullcodeline": "if (ctx->src_pck) gf_filter_pck_unref(ctx->src_pck);"
    },
    {
        "line": 191,
        "fullcodeline": "gf_filter_pck_ref_props(&ctx->src_pck);"
    },
    {
        "line": 55,
        "fullcodeline": "if ((byte_offset != GF_FILTER_NO_BO) && (byte_offset>ctx->ac3_buffer_size) ) {"
    },
    {
        "line": 56,
        "fullcodeline": "ctx->byte_offset = byte_offset - ctx->ac3_buffer_size;"
    }
]