[
    {
        "line": 4,
        "fullcodeline": "ExifMnoteDataFuji *n = (ExifMnoteDataFuji*) en;"
    },
    {
        "line": 13,
        "fullcodeline": "datao = 6 + n->offset;"
    },
    {
        "line": 20,
        "fullcodeline": "n->order = EXIF_BYTE_ORDER_INTEL;"
    },
    {
        "line": 22,
        "fullcodeline": "datao += exif_get_long (buf + datao + 8, EXIF_BYTE_ORDER_INTEL);"
    },
    {
        "line": 30,
        "fullcodeline": "c = exif_get_short (buf + datao, EXIF_BYTE_ORDER_INTEL);"
    },
    {
        "line": 31,
        "fullcodeline": "datao += 2;"
    },
    {
        "line": 34,
        "fullcodeline": "exif_mnote_data_fuji_clear (n);"
    },
    {
        "line": 37,
        "fullcodeline": "n->entries = exif_mem_alloc (en->mem, sizeof (MnoteFujiEntry) * c);"
    },
    {
        "line": 44,
        "fullcodeline": "tcount = 0;"
    },
    {
        "line": 8,
        "fullcodeline": "if (!n || !buf || !buf_size) {"
    },
    {
        "line": 14,
        "fullcodeline": "if (CHECKOVERFLOW(datao, buf_size, 12)) {"
    },
    {
        "line": 23,
        "fullcodeline": "if (CHECKOVERFLOW(datao, buf_size, 2)) {"
    },
    {
        "line": 9,
        "fullcodeline": "exif_log (en->log, EXIF_LOG_CODE_CORRUPT_DATA,"
    },
    {
        "line": 45,
        "fullcodeline": "for (i = c, o = datao; i; --i, o += 12) {"
    },
    {
        "line": 54,
        "fullcodeline": "n->entries[tcount].tag        = exif_get_short (buf + o, n->order);"
    },
    {
        "line": 55,
        "fullcodeline": "n->entries[tcount].format     = exif_get_short (buf + o + 2, n->order);"
    },
    {
        "line": 56,
        "fullcodeline": "n->entries[tcount].components = exif_get_long (buf + o + 4, n->order);"
    },
    {
        "line": 59,
        "fullcodeline": "exif_log (en->log, EXIF_LOG_CODE_DEBUG, \"ExifMnoteDataFuji\","
    },
    {
        "line": 76,
        "fullcodeline": "s = exif_format_get_size (n->entries[tcount].format) * n->entries[tcount].components;"
    },
    {
        "line": 100,
        "fullcodeline": "++tcount;"
    },
    {
        "line": 39,
        "fullcodeline": "EXIF_LOG_NO_MEMORY(en->log, \"ExifMnoteDataFuji\", sizeof (MnoteFujiEntry) * c);"
    },
    {
        "line": 48,
        "fullcodeline": "if (CHECKOVERFLOW(o, buf_size, 12)) {"
    },
    {
        "line": 61,
        "fullcodeline": "mnote_fuji_tag_get_name (n->entries[tcount].tag));"
    },
    {
        "line": 65,
        "fullcodeline": "if (\texif_format_get_size (n->entries[tcount].format) &&"
    },
    {
        "line": 66,
        "fullcodeline": "buf_size / exif_format_get_size (n->entries[tcount].format) < n->entries[tcount].components"
    },
    {
        "line": 68,
        "fullcodeline": "exif_log (en->log, EXIF_LOG_CODE_CORRUPT_DATA,"
    },
    {
        "line": 79,
        "fullcodeline": "size_t dataofs = o + 8;"
    },
    {
        "line": 91,
        "fullcodeline": "n->entries[tcount].data = exif_mem_alloc (en->mem, s);"
    },
    {
        "line": 69,
        "fullcodeline": "\"ExifMnoteDataFuji\", \"Tag size overflow detected (%u * %lu)\", exif_format_get_size (n->entries[tcount].format), n->entries[tcount].components);"
    },
    {
        "line": 80,
        "fullcodeline": "if (s > 4)"
    },
    {
        "line": 84,
        "fullcodeline": "if (CHECKOVERFLOW(dataofs, buf_size, s)) {"
    },
    {
        "line": 92,
        "fullcodeline": "if (!n->entries[tcount].data) {"
    },
    {
        "line": 82,
        "fullcodeline": "dataofs = exif_get_long (buf + dataofs, n->order) + 6 + n->offset;"
    },
    {
        "line": 85,
        "fullcodeline": "exif_log (en->log, EXIF_LOG_CODE_CORRUPT_DATA,"
    },
    {
        "line": 93,
        "fullcodeline": "EXIF_LOG_NO_MEMORY(en->log, \"ExifMnoteDataFuji\", s);"
    }
]