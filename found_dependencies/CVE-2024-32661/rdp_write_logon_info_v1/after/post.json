[
    {
        "line": 3,
        "fullcodeline": "const size_t charLen = 52 / sizeof(WCHAR);"
    },
    {
        "line": 4,
        "fullcodeline": "const size_t userCharLen = 512 / sizeof(WCHAR);"
    },
    {
        "line": 6,
        "fullcodeline": "size_t sz = 4 + 52 + 4 + 512 + 4;"
    },
    {
        "line": 7,
        "fullcodeline": "size_t len = 0;"
    },
    {
        "line": 13,
        "fullcodeline": "WINPR_ASSERT(info);"
    },
    {
        "line": 17,
        "fullcodeline": "len = strnlen(info->domain, charLen + 1);"
    },
    {
        "line": 21,
        "fullcodeline": "Stream_Write_UINT32(s, len * sizeof(WCHAR));"
    },
    {
        "line": 26,
        "fullcodeline": "len = strnlen(info->username, userCharLen + 1);"
    },
    {
        "line": 30,
        "fullcodeline": "Stream_Write_UINT32(s, len * sizeof(WCHAR));"
    },
    {
        "line": 35,
        "fullcodeline": "Stream_Write_UINT32(s, info->sessionId);"
    },
    {
        "line": 9,
        "fullcodeline": "if (!Stream_EnsureRemainingCapacity(s, sz))"
    },
    {
        "line": 14,
        "fullcodeline": "if (!info->domain || !info->username)"
    },
    {
        "line": 18,
        "fullcodeline": "if (len > charLen)"
    },
    {
        "line": 22,
        "fullcodeline": "if (Stream_Write_UTF16_String_From_UTF8(s, charLen, info->domain, len, TRUE) < 0)"
    },
    {
        "line": 27,
        "fullcodeline": "if (len > userCharLen)"
    },
    {
        "line": 31,
        "fullcodeline": "if (Stream_Write_UTF16_String_From_UTF8(s, userCharLen, info->username, len, TRUE) < 0)"
    }
]