[
    {
        "line": 6,
        "fullcodeline": "*output_matrix_shapes = GetOutputMatrixShapes(input_matrix_shapes);"
    },
    {
        "line": 7,
        "fullcodeline": "const int num_outputs = output_matrix_shapes->size();"
    },
    {
        "line": 10,
        "fullcodeline": "OP_REQUIRES("
    },
    {
        "line": 11,
        "fullcodeline": "context, num_outputs <= context->num_outputs(),"
    },
    {
        "line": 12,
        "fullcodeline": "errors::Internal("
    },
    {
        "line": 18,
        "fullcodeline": "for (int input_idx = 0; input_idx < context->num_inputs(); ++input_idx) {"
    },
    {
        "line": 21,
        "fullcodeline": "for (int output_idx = 0; output_idx < context->num_outputs(); ++output_idx) {"
    },
    {
        "line": 14,
        "fullcodeline": "num_outputs, context->num_outputs()));"
    },
    {
        "line": 19,
        "fullcodeline": "unused_inputs.insert(input_idx);"
    },
    {
        "line": 38,
        "fullcodeline": "Tensor* out = nullptr;"
    },
    {
        "line": 40,
        "fullcodeline": "bool reused_input = false;"
    },
    {
        "line": 55,
        "fullcodeline": "OP_REQUIRES("
    },
    {
        "line": 23,
        "fullcodeline": "if (output_idx < num_outputs) {"
    },
    {
        "line": 56,
        "fullcodeline": "context, out->dtype() == DataTypeToEnum<OutputScalar>::v(),"
    },
    {
        "line": 57,
        "fullcodeline": "errors::InvalidArgument(\"Invalid output dtype \", out->dtype(), \" vs \","
    },
    {
        "line": 25,
        "fullcodeline": "const TensorShape& output_matrix_shape ="
    },
    {
        "line": 27,
        "fullcodeline": "OP_REQUIRES(context, output_matrix_shape.dims() <= 2,"
    },
    {
        "line": 35,
        "fullcodeline": "output_tensor_shape = batch_shape;"
    },
    {
        "line": 36,
        "fullcodeline": "output_tensor_shape.AppendShape(output_matrix_shape);"
    },
    {
        "line": 52,
        "fullcodeline": "OP_REQUIRES_OK(context, context->allocate_output("
    },
    {
        "line": 58,
        "fullcodeline": "DataTypeToEnum<OutputScalar>::v()));"
    },
    {
        "line": 26,
        "fullcodeline": "output_matrix_shapes->at(output_idx);"
    },
    {
        "line": 28,
        "fullcodeline": "errors::InvalidArgument("
    },
    {
        "line": 30,
        "fullcodeline": "output_idx, output_matrix_shape.dims()));"
    },
    {
        "line": 43,
        "fullcodeline": "if (context->forward_input_to_output_with_shape("
    }
]