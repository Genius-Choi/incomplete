[
    {
        "line": 4,
        "fullcodeline": "int input_rank = -1;"
    },
    {
        "line": 41,
        "fullcodeline": "ValidateInputMatrixShapes(context, *input_matrix_shapes);"
    },
    {
        "line": 5,
        "fullcodeline": "for (int i = 0; i < NumMatrixInputs(context); ++i) {"
    },
    {
        "line": 6,
        "fullcodeline": "const Tensor& in = context->input(i);"
    },
    {
        "line": 32,
        "fullcodeline": "const int row_dimension = input_rank - 2;"
    },
    {
        "line": 33,
        "fullcodeline": "const int col_dimension = input_rank - 1;"
    },
    {
        "line": 34,
        "fullcodeline": "const int64_t num_rows = in.dim_size(row_dimension);"
    },
    {
        "line": 35,
        "fullcodeline": "const int64_t num_cols = in.dim_size(col_dimension);"
    },
    {
        "line": 36,
        "fullcodeline": "input_matrix_shapes->emplace_back("
    },
    {
        "line": 38,
        "fullcodeline": "inputs->emplace_back(&in);"
    },
    {
        "line": 7,
        "fullcodeline": "if (i == 0) {"
    },
    {
        "line": 37,
        "fullcodeline": "std::initializer_list<int64_t>({num_rows, num_cols}));"
    },
    {
        "line": 8,
        "fullcodeline": "input_rank = in.dims();"
    },
    {
        "line": 9,
        "fullcodeline": "OP_REQUIRES("
    },
    {
        "line": 10,
        "fullcodeline": "context, input_rank >= 2,"
    },
    {
        "line": 11,
        "fullcodeline": "errors::InvalidArgument(\"Input tensor \", i,"
    },
    {
        "line": 16,
        "fullcodeline": "for (int dim = 0; dim < input_rank - 2; ++dim) {"
    },
    {
        "line": 21,
        "fullcodeline": "OP_REQUIRES(context, input_rank == in.dims(),"
    },
    {
        "line": 17,
        "fullcodeline": "batch_shape->AddDim(in.dim_size(dim));"
    },
    {
        "line": 22,
        "fullcodeline": "errors::InvalidArgument("
    },
    {
        "line": 24,
        "fullcodeline": "for (int dim = 0; dim < input_rank - 2; ++dim) {"
    },
    {
        "line": 25,
        "fullcodeline": "OP_REQUIRES("
    },
    {
        "line": 26,
        "fullcodeline": "context, in.dim_size(dim) == batch_shape->dim_size(dim),"
    },
    {
        "line": 27,
        "fullcodeline": "errors::InvalidArgument("
    }
]