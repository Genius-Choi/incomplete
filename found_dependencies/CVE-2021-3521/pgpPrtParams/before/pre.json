[
    {
        "line": 4,
        "fullcodeline": "const uint8_t *p = pkts;"
    },
    {
        "line": 5,
        "fullcodeline": "const uint8_t *pend = pkts + pktlen;"
    },
    {
        "line": 6,
        "fullcodeline": "pgpDigParams digp = NULL;"
    },
    {
        "line": 8,
        "fullcodeline": "int rc = -1; /* assume failure */"
    },
    {
        "line": 30,
        "fullcodeline": "rc = (digp && (p == pend)) ? 0 : -1;"
    },
    {
        "line": 10,
        "fullcodeline": "while (p < pend) {"
    },
    {
        "line": 32,
        "fullcodeline": "if (ret && rc == 0) {"
    },
    {
        "line": 25,
        "fullcodeline": "p += (pkt.body - pkt.head) + pkt.blen;"
    },
    {
        "line": 33,
        "fullcodeline": "*ret = digp;"
    },
    {
        "line": 11,
        "fullcodeline": "if (decodePkt(p, (pend - p), &pkt))"
    },
    {
        "line": 14,
        "fullcodeline": "if (digp == NULL) {"
    },
    {
        "line": 22,
        "fullcodeline": "if (pgpPrtPkt(&pkt, digp))"
    },
    {
        "line": 26,
        "fullcodeline": "if (pkttype == PGPTAG_SIGNATURE)"
    },
    {
        "line": 35,
        "fullcodeline": "pgpDigParamsFree(digp);"
    },
    {
        "line": 15,
        "fullcodeline": "if (pkttype && pkt.tag != pkttype) {"
    },
    {
        "line": 18,
        "fullcodeline": "digp = pgpDigParamsNew(pkt.tag);"
    }
]