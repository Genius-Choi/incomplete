[
    {
        "line": 5,
        "fullcodeline": "tag[3];"
    },
    {
        "line": 40,
        "fullcodeline": "comment_offset = 0,"
    },
    {
        "line": 49,
        "fullcodeline": "assert(image_info != (const ImageInfo *) NULL);"
    },
    {
        "line": 50,
        "fullcodeline": "assert(image_info->signature == MagickCoreSignature);"
    },
    {
        "line": 54,
        "fullcodeline": "assert(exception != (ExceptionInfo *) NULL);"
    },
    {
        "line": 55,
        "fullcodeline": "assert(exception->signature == MagickCoreSignature);"
    },
    {
        "line": 56,
        "fullcodeline": "image=AcquireImage(image_info,exception);"
    },
    {
        "line": 57,
        "fullcodeline": "status=OpenBlob(image_info,image,ReadBinaryBlobMode,exception);"
    },
    {
        "line": 66,
        "fullcodeline": "count=ReadBlob(image,sizeof(pdb_info.name),(unsigned char *) pdb_info.name);"
    },
    {
        "line": 80,
        "fullcodeline": "pdb_info.next_record=ReadBlobMSBLong(image);"
    },
    {
        "line": 81,
        "fullcodeline": "pdb_info.number_records=(short) ReadBlobMSBShort(image);"
    },
    {
        "line": 90,
        "fullcodeline": "img_offset=(ssize_t) ((int) ReadBlobMSBLong(image));"
    },
    {
        "line": 91,
        "fullcodeline": "attributes=(unsigned char) ReadBlobByte(image);"
    },
    {
        "line": 93,
        "fullcodeline": "count=ReadBlob(image,3,(unsigned char *) tag);"
    },
    {
        "line": 104,
        "fullcodeline": "num_pad_bytes = (size_t) (img_offset - TellBlob( image ));"
    },
    {
        "line": 117,
        "fullcodeline": "count=ReadBlob(image,sizeof(pdb_image.name),(unsigned char *) pdb_image.name);"
    },
    {
        "line": 120,
        "fullcodeline": "pdb_image.version=ReadBlobByte(image);"
    },
    {
        "line": 121,
        "fullcodeline": "pdb_image.type=(unsigned char) ((int) ReadBlobByte(image));"
    },
    {
        "line": 129,
        "fullcodeline": "pdb_image.width=(short) ReadBlobMSBShort(image);"
    },
    {
        "line": 130,
        "fullcodeline": "pdb_image.height=(short) ReadBlobMSBShort(image);"
    },
    {
        "line": 134,
        "fullcodeline": "image->columns=(size_t) pdb_image.width;"
    },
    {
        "line": 135,
        "fullcodeline": "image->rows=(size_t) pdb_image.height;"
    },
    {
        "line": 136,
        "fullcodeline": "image->depth=8;"
    },
    {
        "line": 137,
        "fullcodeline": "status=SetImageExtent(image,image->columns,image->rows,exception);"
    },
    {
        "line": 140,
        "fullcodeline": "image->storage_class=PseudoClass;"
    },
    {
        "line": 141,
        "fullcodeline": "bits_per_pixel=pdb_image.type == 0 ? 2UL : pdb_image.type == 2 ? 4UL : 1UL;"
    },
    {
        "line": 142,
        "fullcodeline": "one=1;"
    },
    {
        "line": 150,
        "fullcodeline": "packets=(bits_per_pixel*image->columns+7)/8;"
    },
    {
        "line": 151,
        "fullcodeline": "pixels=(unsigned char *) AcquireQuantumMemory(packets+256UL,image->rows*"
    },
    {
        "line": 174,
        "fullcodeline": "p=pixels;"
    },
    {
        "line": 51,
        "fullcodeline": "if (image_info->debug != MagickFalse)"
    },
    {
        "line": 58,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 71,
        "fullcodeline": "pdb_info.create_time=ReadBlobMSBLong(image);"
    },
    {
        "line": 72,
        "fullcodeline": "pdb_info.modify_time=ReadBlobMSBLong(image);"
    },
    {
        "line": 73,
        "fullcodeline": "pdb_info.archive_time=ReadBlobMSBLong(image);"
    },
    {
        "line": 74,
        "fullcodeline": "pdb_info.modify_number=ReadBlobMSBLong(image);"
    },
    {
        "line": 75,
        "fullcodeline": "pdb_info.application_info=ReadBlobMSBLong(image);"
    },
    {
        "line": 76,
        "fullcodeline": "pdb_info.sort_info=ReadBlobMSBLong(image);"
    },
    {
        "line": 77,
        "fullcodeline": "(void) ReadBlob(image,4,(unsigned char *) pdb_info.type);"
    },
    {
        "line": 78,
        "fullcodeline": "(void) ReadBlob(image,4,(unsigned char *) pdb_info.id);"
    },
    {
        "line": 79,
        "fullcodeline": "pdb_info.seed=ReadBlobMSBLong(image);"
    },
    {
        "line": 96,
        "fullcodeline": "if (pdb_info.number_records > 1)"
    },
    {
        "line": 122,
        "fullcodeline": "pdb_image.reserved_1=ReadBlobMSBLong(image);"
    },
    {
        "line": 123,
        "fullcodeline": "pdb_image.note=ReadBlobMSBLong(image);"
    },
    {
        "line": 126,
        "fullcodeline": "pdb_image.reserved_2=ReadBlobMSBLong(image);"
    },
    {
        "line": 127,
        "fullcodeline": "pdb_image.x_anchor=ReadBlobMSBShort(image);"
    },
    {
        "line": 128,
        "fullcodeline": "pdb_image.y_anchor=ReadBlobMSBShort(image);"
    },
    {
        "line": 138,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 143,
        "fullcodeline": "if (AcquireImageColormap(image,one << bits_per_pixel,exception) == MagickFalse)"
    },
    {
        "line": 145,
        "fullcodeline": "if (image_info->ping != MagickFalse)"
    },
    {
        "line": 153,
        "fullcodeline": "if (pixels == (unsigned char *) NULL)"
    },
    {
        "line": 328,
        "fullcodeline": "(void) CloseBlob(image);"
    },
    {
        "line": 329,
        "fullcodeline": "return(GetFirstImageInList(image));"
    },
    {
        "line": 52,
        "fullcodeline": "(void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\","
    },
    {
        "line": 60,
        "fullcodeline": "image=DestroyImageList(image);"
    },
    {
        "line": 68,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 69,
        "fullcodeline": "pdb_info.attributes=(short) ReadBlobMSBShort(image);"
    },
    {
        "line": 70,
        "fullcodeline": "pdb_info.version=(short) ReadBlobMSBShort(image);"
    },
    {
        "line": 82,
        "fullcodeline": "if ((memcmp(pdb_info.type,\"vIMG\",4) != 0) ||"
    },
    {
        "line": 83,
        "fullcodeline": "(memcmp(pdb_info.id,\"View\",4) != 0))"
    },
    {
        "line": 84,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 86,
        "fullcodeline": "ThrowReaderException(CoderError,\"MultipleRecordListNotSupported\");"
    },
    {
        "line": 94,
        "fullcodeline": "if (count != 3  ||  memcmp(tag,\"\\x6f\\x80\\x00\",3) != 0)"
    },
    {
        "line": 95,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"CorruptImage\");"
    },
    {
        "line": 98,
        "fullcodeline": "comment_offset=(ssize_t) ((int) ReadBlobMSBLong(image));"
    },
    {
        "line": 100,
        "fullcodeline": "count=ReadBlob(image,3,(unsigned char *) tag);"
    },
    {
        "line": 105,
        "fullcodeline": "while (num_pad_bytes-- != 0)"
    },
    {
        "line": 110,
        "fullcodeline": "c=ReadBlobByte(image);"
    },
    {
        "line": 119,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 124,
        "fullcodeline": "pdb_image.x_last=(short) ReadBlobMSBShort(image);"
    },
    {
        "line": 125,
        "fullcodeline": "pdb_image.y_last=(short) ReadBlobMSBShort(image);"
    },
    {
        "line": 144,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 154,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 171,
        "fullcodeline": "ThrowReaderException(CorruptImageError,"
    },
    {
        "line": 277,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 279,
        "fullcodeline": "pixels=(unsigned char *) RelinquishMagickMemory(pixels);"
    },
    {
        "line": 280,
        "fullcodeline": "if (EOFBlob(image) != MagickFalse)"
    },
    {
        "line": 281,
        "fullcodeline": "ThrowFileException(exception,CorruptImageError,\"UnexpectedEndOfFile\","
    },
    {
        "line": 297,
        "fullcodeline": "num_pad_bytes = (size_t) (comment_offset - TellBlob( image ));"
    },
    {
        "line": 303,
        "fullcodeline": "c=ReadBlobByte(image);"
    },
    {
        "line": 304,
        "fullcodeline": "length=MagickPathExtent;"
    },
    {
        "line": 305,
        "fullcodeline": "comment=AcquireString((char *) NULL);"
    },
    {
        "line": 61,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 111,
        "fullcodeline": "if (c == EOF)"
    },
    {
        "line": 139,
        "fullcodeline": "return(DestroyImageList(image));"
    },
    {
        "line": 147,
        "fullcodeline": "(void) CloseBlob(image);"
    },
    {
        "line": 148,
        "fullcodeline": "return(GetFirstImageInList(image));"
    },
    {
        "line": 159,
        "fullcodeline": "image->compression=NoCompression;"
    },
    {
        "line": 165,
        "fullcodeline": "image->compression=RLECompression;"
    },
    {
        "line": 298,
        "fullcodeline": "while (num_pad_bytes--) ReadBlobByte( image );"
    },
    {
        "line": 306,
        "fullcodeline": "for (p=comment; c != EOF; p++)"
    },
    {
        "line": 323,
        "fullcodeline": "if (comment == (char *) NULL)"
    },
    {
        "line": 325,
        "fullcodeline": "(void) SetImageProperty(image,\"comment\",comment,exception);"
    },
    {
        "line": 326,
        "fullcodeline": "comment=DestroyString(comment);"
    },
    {
        "line": 99,
        "fullcodeline": "attributes=(unsigned char) ReadBlobByte(image);"
    },
    {
        "line": 101,
        "fullcodeline": "if (count != 3  ||  memcmp(tag,\"\\x6f\\x80\\x01\",3) != 0)"
    },
    {
        "line": 102,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"CorruptImage\");"
    },
    {
        "line": 185,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 207,
        "fullcodeline": "(void) SyncImage(image,exception);"
    },
    {
        "line": 215,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 243,
        "fullcodeline": "(void) SyncImage(image,exception);"
    },
    {
        "line": 251,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 273,
        "fullcodeline": "(void) SyncImage(image,exception);"
    },
    {
        "line": 319,
        "fullcodeline": "*p=c;"
    },
    {
        "line": 320,
        "fullcodeline": "c=ReadBlobByte(image);"
    },
    {
        "line": 160,
        "fullcodeline": "count=(ssize_t) ReadBlob(image, packets * image -> rows, pixels);"
    },
    {
        "line": 166,
        "fullcodeline": "if (!DecodeImage(image, pixels, packets * image -> rows))"
    },
    {
        "line": 167,
        "fullcodeline": "ThrowReaderException( CorruptImageError, \"RLEDecoderError\" );"
    },
    {
        "line": 187,
        "fullcodeline": "q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 202,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 217,
        "fullcodeline": "q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 238,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 253,
        "fullcodeline": "q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 268,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 308,
        "fullcodeline": "if ((size_t) (p-comment+MagickPathExtent) >= length)"
    },
    {
        "line": 188,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 190,
        "fullcodeline": "for (x=0; x < ((ssize_t) image->columns-7); x+=8)"
    },
    {
        "line": 200,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 204,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 218,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 220,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns-3; x+=4)"
    },
    {
        "line": 236,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 240,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 254,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 256,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns-1; x+=2)"
    },
    {
        "line": 266,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 270,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 311,
        "fullcodeline": "length<<=1;"
    },
    {
        "line": 312,
        "fullcodeline": "length+=MagickPathExtent;"
    },
    {
        "line": 313,
        "fullcodeline": "comment=(char *) ResizeQuantumMemory(comment,length+MagickPathExtent,"
    },
    {
        "line": 317,
        "fullcodeline": "p=comment+strlen(comment);"
    },
    {
        "line": 222,
        "fullcodeline": "index=ConstrainColormapIndex(image,3UL-((*p >> 6) & 0x03),exception);"
    },
    {
        "line": 223,
        "fullcodeline": "SetPixelIndex(image,index,q);"
    },
    {
        "line": 224,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 225,
        "fullcodeline": "index=ConstrainColormapIndex(image,3UL-((*p >> 4) & 0x03),exception);"
    },
    {
        "line": 226,
        "fullcodeline": "SetPixelIndex(image,index,q);"
    },
    {
        "line": 227,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 228,
        "fullcodeline": "index=ConstrainColormapIndex(image,3UL-((*p >> 2) & 0x03),exception);"
    },
    {
        "line": 229,
        "fullcodeline": "SetPixelIndex(image,index,q);"
    },
    {
        "line": 230,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 231,
        "fullcodeline": "index=ConstrainColormapIndex(image,3UL-((*p) & 0x03),exception);"
    },
    {
        "line": 232,
        "fullcodeline": "SetPixelIndex(image,index,q);"
    },
    {
        "line": 234,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 258,
        "fullcodeline": "index=ConstrainColormapIndex(image,15UL-((*p >> 4) & 0x0f),exception);"
    },
    {
        "line": 259,
        "fullcodeline": "SetPixelIndex(image,index,q);"
    },
    {
        "line": 260,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 261,
        "fullcodeline": "index=ConstrainColormapIndex(image,15UL-((*p) & 0x0f),exception);"
    },
    {
        "line": 262,
        "fullcodeline": "SetPixelIndex(image,index,q);"
    },
    {
        "line": 264,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 315,
        "fullcodeline": "if (comment == (char *) NULL)"
    },
    {
        "line": 192,
        "fullcodeline": "for (bit=0; bit < 8; bit++)"
    },
    {
        "line": 194,
        "fullcodeline": "index=(Quantum) (*p & (0x80 >> bit) ? 0x00 : 0x01);"
    },
    {
        "line": 195,
        "fullcodeline": "SetPixelIndex(image,index,q);"
    },
    {
        "line": 196,
        "fullcodeline": "q+=GetPixelChannels(image);"
    }
]