[
    {
        "line": 49,
        "fullcodeline": "assert(image_info != (const ImageInfo *) NULL);"
    },
    {
        "line": 50,
        "fullcodeline": "assert(image_info->signature == MagickCoreSignature);"
    },
    {
        "line": 51,
        "fullcodeline": "assert(image != (Image *) NULL);"
    },
    {
        "line": 52,
        "fullcodeline": "assert(image->signature == MagickCoreSignature);"
    },
    {
        "line": 55,
        "fullcodeline": "assert(exception != (ExceptionInfo *) NULL);"
    },
    {
        "line": 56,
        "fullcodeline": "assert(exception->signature == MagickCoreSignature);"
    },
    {
        "line": 57,
        "fullcodeline": "status=OpenBlob(image_info,image,WriteBinaryBlobMode,exception);"
    },
    {
        "line": 73,
        "fullcodeline": "pdb_info.attributes=0;"
    },
    {
        "line": 74,
        "fullcodeline": "pdb_info.version=0;"
    },
    {
        "line": 75,
        "fullcodeline": "pdb_info.create_time=time(NULL);"
    },
    {
        "line": 76,
        "fullcodeline": "pdb_info.modify_time=pdb_info.create_time;"
    },
    {
        "line": 77,
        "fullcodeline": "pdb_info.archive_time=0;"
    },
    {
        "line": 78,
        "fullcodeline": "pdb_info.modify_number=0;"
    },
    {
        "line": 79,
        "fullcodeline": "pdb_info.application_info=0;"
    },
    {
        "line": 80,
        "fullcodeline": "pdb_info.sort_info=0;"
    },
    {
        "line": 83,
        "fullcodeline": "pdb_info.seed=0;"
    },
    {
        "line": 84,
        "fullcodeline": "pdb_info.next_record=0;"
    },
    {
        "line": 85,
        "fullcodeline": "comment=GetImageProperty(image,\"comment\",exception);"
    },
    {
        "line": 86,
        "fullcodeline": "pdb_info.number_records=(comment == (const char *) NULL ? 1 : 2);"
    },
    {
        "line": 102,
        "fullcodeline": "pdb_image.version=1;  /* RLE Compressed */"
    },
    {
        "line": 109,
        "fullcodeline": "pdb_image.reserved_1=0;"
    },
    {
        "line": 110,
        "fullcodeline": "pdb_image.note=0;"
    },
    {
        "line": 111,
        "fullcodeline": "pdb_image.x_last=0;"
    },
    {
        "line": 112,
        "fullcodeline": "pdb_image.y_last=0;"
    },
    {
        "line": 113,
        "fullcodeline": "pdb_image.reserved_2=0;"
    },
    {
        "line": 114,
        "fullcodeline": "pdb_image.x_anchor=(unsigned short) 0xffff;"
    },
    {
        "line": 115,
        "fullcodeline": "pdb_image.y_anchor=(unsigned short) 0xffff;"
    },
    {
        "line": 116,
        "fullcodeline": "pdb_image.width=(short) image->columns;"
    },
    {
        "line": 119,
        "fullcodeline": "pdb_image.height=(short) image->rows;"
    },
    {
        "line": 120,
        "fullcodeline": "packets=((bits_per_pixel*image->columns+7)/8);"
    },
    {
        "line": 121,
        "fullcodeline": "runlength=(unsigned char *) AcquireQuantumMemory(9UL*packets,"
    },
    {
        "line": 125,
        "fullcodeline": "buffer=(unsigned char *) AcquireQuantumMemory(257,sizeof(*buffer));"
    },
    {
        "line": 128,
        "fullcodeline": "packet_size=(size_t) (image->depth > 8 ? 2: 1);"
    },
    {
        "line": 129,
        "fullcodeline": "scanline=(unsigned char *) AcquireQuantumMemory(image->columns,packet_size*"
    },
    {
        "line": 138,
        "fullcodeline": "quantum_info=AcquireQuantumInfo(image_info,image);"
    },
    {
        "line": 141,
        "fullcodeline": "bits=8/(int) bits_per_pixel-1;  /* start at most significant bits */"
    },
    {
        "line": 142,
        "fullcodeline": "literal=0;"
    },
    {
        "line": 143,
        "fullcodeline": "repeat=0;"
    },
    {
        "line": 144,
        "fullcodeline": "q=runlength;"
    },
    {
        "line": 145,
        "fullcodeline": "buffer[0]=0x00;"
    },
    {
        "line": 205,
        "fullcodeline": "q=EncodeRLE(q,buffer,literal,repeat);"
    },
    {
        "line": 53,
        "fullcodeline": "if (image->debug != MagickFalse)"
    },
    {
        "line": 58,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 60,
        "fullcodeline": "(void) TransformImageColorspace(image,sRGBColorspace,exception);"
    },
    {
        "line": 61,
        "fullcodeline": "if (SetImageMonochrome(image,exception) != MagickFalse) {"
    },
    {
        "line": 70,
        "fullcodeline": "(void) ResetMagickMemory(&pdb_info,0,sizeof(pdb_info));"
    },
    {
        "line": 71,
        "fullcodeline": "(void) CopyMagickString(pdb_info.name,image_info->filename,"
    },
    {
        "line": 81,
        "fullcodeline": "(void) CopyMagickMemory(pdb_info.type,\"vIMG\",4);"
    },
    {
        "line": 82,
        "fullcodeline": "(void) CopyMagickMemory(pdb_info.id,\"View\",4);"
    },
    {
        "line": 87,
        "fullcodeline": "(void) WriteBlob(image,sizeof(pdb_info.name),(unsigned char *) pdb_info.name);"
    },
    {
        "line": 88,
        "fullcodeline": "(void) WriteBlobMSBShort(image,(unsigned short) pdb_info.attributes);"
    },
    {
        "line": 89,
        "fullcodeline": "(void) WriteBlobMSBShort(image,(unsigned short) pdb_info.version);"
    },
    {
        "line": 90,
        "fullcodeline": "(void) WriteBlobMSBLong(image,(unsigned int) pdb_info.create_time);"
    },
    {
        "line": 91,
        "fullcodeline": "(void) WriteBlobMSBLong(image,(unsigned int) pdb_info.modify_time);"
    },
    {
        "line": 92,
        "fullcodeline": "(void) WriteBlobMSBLong(image,(unsigned int) pdb_info.archive_time);"
    },
    {
        "line": 93,
        "fullcodeline": "(void) WriteBlobMSBLong(image,(unsigned int) pdb_info.modify_number);"
    },
    {
        "line": 94,
        "fullcodeline": "(void) WriteBlobMSBLong(image,(unsigned int) pdb_info.application_info);"
    },
    {
        "line": 95,
        "fullcodeline": "(void) WriteBlobMSBLong(image,(unsigned int) pdb_info.sort_info);"
    },
    {
        "line": 96,
        "fullcodeline": "(void) WriteBlob(image,4,(unsigned char *) pdb_info.type);"
    },
    {
        "line": 97,
        "fullcodeline": "(void) WriteBlob(image,4,(unsigned char *) pdb_info.id);"
    },
    {
        "line": 98,
        "fullcodeline": "(void) WriteBlobMSBLong(image,(unsigned int) pdb_info.seed);"
    },
    {
        "line": 99,
        "fullcodeline": "(void) WriteBlobMSBLong(image,(unsigned int) pdb_info.next_record);"
    },
    {
        "line": 100,
        "fullcodeline": "(void) WriteBlobMSBShort(image,(unsigned short) pdb_info.number_records);"
    },
    {
        "line": 101,
        "fullcodeline": "(void) CopyMagickString(pdb_image.name,pdb_info.name,sizeof(pdb_image.name));"
    },
    {
        "line": 117,
        "fullcodeline": "if (image->columns % 16)"
    },
    {
        "line": 123,
        "fullcodeline": "if (runlength == (unsigned char *) NULL)"
    },
    {
        "line": 126,
        "fullcodeline": "if (buffer == (unsigned char *) NULL)"
    },
    {
        "line": 131,
        "fullcodeline": "if (scanline == (unsigned char *) NULL)"
    },
    {
        "line": 133,
        "fullcodeline": "if (IssRGBCompatibleColorspace(image->colorspace) == MagickFalse)"
    },
    {
        "line": 139,
        "fullcodeline": "if (quantum_info == (QuantumInfo *) NULL)"
    },
    {
        "line": 146,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 208,
        "fullcodeline": "quantum_info=DestroyQuantumInfo(quantum_info);"
    },
    {
        "line": 212,
        "fullcodeline": "(void) WriteBlobMSBLong(image,(unsigned int)"
    },
    {
        "line": 214,
        "fullcodeline": "(void) WriteBlobByte(image,0x40);"
    },
    {
        "line": 215,
        "fullcodeline": "(void) WriteBlobByte(image,0x6f);"
    },
    {
        "line": 216,
        "fullcodeline": "(void) WriteBlobByte(image,0x80);"
    },
    {
        "line": 217,
        "fullcodeline": "(void) WriteBlobByte(image,0);"
    },
    {
        "line": 218,
        "fullcodeline": "if (pdb_info.number_records > 1)"
    },
    {
        "line": 233,
        "fullcodeline": "(void) WriteBlob(image,sizeof(pdb_image.name),(unsigned char *)"
    },
    {
        "line": 235,
        "fullcodeline": "(void) WriteBlobByte(image,(unsigned char) pdb_image.version);"
    },
    {
        "line": 236,
        "fullcodeline": "(void) WriteBlobByte(image,pdb_image.type);"
    },
    {
        "line": 237,
        "fullcodeline": "(void) WriteBlobMSBLong(image,(unsigned int) pdb_image.reserved_1);"
    },
    {
        "line": 238,
        "fullcodeline": "(void) WriteBlobMSBLong(image,(unsigned int) pdb_image.note);"
    },
    {
        "line": 239,
        "fullcodeline": "(void) WriteBlobMSBShort(image,(unsigned short) pdb_image.x_last);"
    },
    {
        "line": 240,
        "fullcodeline": "(void) WriteBlobMSBShort(image,(unsigned short) pdb_image.y_last);"
    },
    {
        "line": 241,
        "fullcodeline": "(void) WriteBlobMSBLong(image,(unsigned int) pdb_image.reserved_2);"
    },
    {
        "line": 242,
        "fullcodeline": "(void) WriteBlobMSBShort(image,pdb_image.x_anchor);"
    },
    {
        "line": 243,
        "fullcodeline": "(void) WriteBlobMSBShort(image,pdb_image.y_anchor);"
    },
    {
        "line": 244,
        "fullcodeline": "(void) WriteBlobMSBShort(image,(unsigned short) pdb_image.width);"
    },
    {
        "line": 245,
        "fullcodeline": "(void) WriteBlobMSBShort(image,(unsigned short) pdb_image.height);"
    },
    {
        "line": 246,
        "fullcodeline": "(void) WriteBlob(image,(size_t) (q-runlength),runlength);"
    },
    {
        "line": 250,
        "fullcodeline": "(void) CloseBlob(image);"
    },
    {
        "line": 54,
        "fullcodeline": "(void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",image->filename);"
    },
    {
        "line": 62,
        "fullcodeline": "bits_per_pixel=1;"
    },
    {
        "line": 105,
        "fullcodeline": "case 1: pdb_image.type=(unsigned char) 0xff; break;  /* monochrome */"
    },
    {
        "line": 106,
        "fullcodeline": "case 2: pdb_image.type=(unsigned char) 0x00; break;  /* 2 bit gray */"
    },
    {
        "line": 107,
        "fullcodeline": "default: pdb_image.type=(unsigned char) 0x02;  /* 4 bit gray */"
    },
    {
        "line": 118,
        "fullcodeline": "pdb_image.width=(short) (16*(image->columns/16+1));"
    },
    {
        "line": 124,
        "fullcodeline": "ThrowWriterException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 127,
        "fullcodeline": "ThrowWriterException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 132,
        "fullcodeline": "ThrowWriterException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 148,
        "fullcodeline": "p=GetVirtualPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 200,
        "fullcodeline": "status=SetImageProgress(image,SaveImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 206,
        "fullcodeline": "scanline=(unsigned char *) RelinquishMagickMemory(scanline);"
    },
    {
        "line": 207,
        "fullcodeline": "buffer=(unsigned char *) RelinquishMagickMemory(buffer);"
    },
    {
        "line": 247,
        "fullcodeline": "runlength=(unsigned char *) RelinquishMagickMemory(runlength);"
    },
    {
        "line": 122,
        "fullcodeline": "image->rows*sizeof(*runlength));"
    },
    {
        "line": 134,
        "fullcodeline": "(void) TransformImageColorspace(image,sRGBColorspace,exception);"
    },
    {
        "line": 151,
        "fullcodeline": "(void) ExportQuantumPixels(image,(CacheView *) NULL,quantum_info,"
    },
    {
        "line": 153,
        "fullcodeline": "for (x=0; x < (ssize_t) pdb_image.width; x++)"
    },
    {
        "line": 223,
        "fullcodeline": "(void) WriteBlobMSBLong(image,(unsigned int) (TellBlob(image)+8+58+q-"
    },
    {
        "line": 225,
        "fullcodeline": "(void) WriteBlobByte(image,0x40);"
    },
    {
        "line": 226,
        "fullcodeline": "(void) WriteBlobByte(image,0x6f);"
    },
    {
        "line": 227,
        "fullcodeline": "(void) WriteBlobByte(image,0x80);"
    },
    {
        "line": 228,
        "fullcodeline": "(void) WriteBlobByte(image,1);"
    },
    {
        "line": 249,
        "fullcodeline": "(void) WriteBlobString(image,comment);"
    },
    {
        "line": 63,
        "fullcodeline": "} else if (image->colors <= 4) {"
    },
    {
        "line": 158,
        "fullcodeline": "bits--;"
    },
    {
        "line": 213,
        "fullcodeline": "(TellBlob(image)+8*pdb_info.number_records));"
    },
    {
        "line": 64,
        "fullcodeline": "bits_per_pixel=2;"
    },
    {
        "line": 155,
        "fullcodeline": "if (x < (ssize_t) image->columns)"
    },
    {
        "line": 159,
        "fullcodeline": "if (bits < 0)"
    },
    {
        "line": 156,
        "fullcodeline": "buffer[literal+repeat]|=(0xff-scanline[x*packet_size]) >>"
    },
    {
        "line": 196,
        "fullcodeline": "bits=8/(int) bits_per_pixel-1;"
    },
    {
        "line": 197,
        "fullcodeline": "buffer[literal+repeat]=0x00;"
    },
    {
        "line": 65,
        "fullcodeline": "} else if (image->colors <= 8) {"
    },
    {
        "line": 66,
        "fullcodeline": "bits_per_pixel=3;"
    },
    {
        "line": 157,
        "fullcodeline": "(8-bits_per_pixel) << bits*bits_per_pixel;"
    },
    {
        "line": 161,
        "fullcodeline": "if (((literal+repeat) > 0) &&"
    },
    {
        "line": 162,
        "fullcodeline": "(buffer[literal+repeat] == buffer[literal+repeat-1]))"
    },
    {
        "line": 169,
        "fullcodeline": "repeat++;"
    },
    {
        "line": 68,
        "fullcodeline": "bits_per_pixel=4;"
    },
    {
        "line": 164,
        "fullcodeline": "if (repeat == 0)"
    },
    {
        "line": 170,
        "fullcodeline": "if (0x7f < repeat)"
    },
    {
        "line": 187,
        "fullcodeline": "literal++;"
    },
    {
        "line": 188,
        "fullcodeline": "repeat=0;"
    },
    {
        "line": 166,
        "fullcodeline": "literal--;"
    },
    {
        "line": 167,
        "fullcodeline": "repeat++;"
    },
    {
        "line": 172,
        "fullcodeline": "q=EncodeRLE(q,buffer,literal,repeat);"
    },
    {
        "line": 173,
        "fullcodeline": "literal=0;"
    },
    {
        "line": 174,
        "fullcodeline": "repeat=0;"
    },
    {
        "line": 179,
        "fullcodeline": "if (repeat >= 2)"
    },
    {
        "line": 189,
        "fullcodeline": "if (0x7f < literal)"
    },
    {
        "line": 180,
        "fullcodeline": "literal+=repeat;"
    },
    {
        "line": 191,
        "fullcodeline": "q=EncodeRLE(q,buffer,(literal < 0x80 ? literal : 0x80),0);"
    },
    {
        "line": 193,
        "fullcodeline": "literal-=0x80;"
    },
    {
        "line": 183,
        "fullcodeline": "q=EncodeRLE(q,buffer,literal,repeat);"
    },
    {
        "line": 184,
        "fullcodeline": "buffer[0]=buffer[literal+repeat];"
    },
    {
        "line": 185,
        "fullcodeline": "literal=0;"
    },
    {
        "line": 192,
        "fullcodeline": "(void) CopyMagickMemory(buffer,buffer+literal+repeat,0x80);"
    }
]