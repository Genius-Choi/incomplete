[
    {
        "line": 4,
        "fullcodeline": "L1 = emitjump(J, F, OP_TRY);"
    },
    {
        "line": 27,
        "fullcodeline": "label(J, F, L1);"
    },
    {
        "line": 28,
        "fullcodeline": "cstm(J, F, trystm);"
    },
    {
        "line": 29,
        "fullcodeline": "emit(J, F, OP_ENDTRY);"
    },
    {
        "line": 30,
        "fullcodeline": "label(J, F, L3);"
    },
    {
        "line": 31,
        "fullcodeline": "cstm(J, F, finallystm);"
    },
    {
        "line": 7,
        "fullcodeline": "L2 = emitjump(J, F, OP_TRY);"
    },
    {
        "line": 13,
        "fullcodeline": "label(J, F, L2);"
    },
    {
        "line": 21,
        "fullcodeline": "emitline(J, F, catchvar);"
    },
    {
        "line": 22,
        "fullcodeline": "emitstring(J, F, OP_CATCH, catchvar->string);"
    },
    {
        "line": 23,
        "fullcodeline": "cstm(J, F, catchstm);"
    },
    {
        "line": 24,
        "fullcodeline": "emit(J, F, OP_ENDCATCH);"
    },
    {
        "line": 25,
        "fullcodeline": "L3 = emitjump(J, F, OP_JUMP); /* skip past the try block to the finally block */"
    },
    {
        "line": 10,
        "fullcodeline": "cstm(J, F, finallystm); /* inline finally block */"
    },
    {
        "line": 11,
        "fullcodeline": "emit(J, F, OP_THROW); /* rethrow exception */"
    },
    {
        "line": 15,
        "fullcodeline": "checkfutureword(J, F, catchvar);"
    },
    {
        "line": 16,
        "fullcodeline": "if (!strcmp(catchvar->string, \"arguments\"))"
    },
    {
        "line": 18,
        "fullcodeline": "if (!strcmp(catchvar->string, \"eval\"))"
    },
    {
        "line": 17,
        "fullcodeline": "jsC_error(J, catchvar, \"redefining 'arguments' is not allowed in strict mode\");"
    },
    {
        "line": 19,
        "fullcodeline": "jsC_error(J, catchvar, \"redefining 'eval' is not allowed in strict mode\");"
    }
]