[
    {
        "line": 4,
        "fullcodeline": "struct Context *ctx = (struct Context *) data;"
    },
    {
        "line": 5,
        "fullcodeline": "struct PopData *pop_data = (struct PopData *) ctx->data;"
    },
    {
        "line": 6,
        "fullcodeline": "char *endp = NULL;"
    },
    {
        "line": 8,
        "fullcodeline": "errno = 0;"
    },
    {
        "line": 9,
        "fullcodeline": "index = strtol(line, &endp, 10);"
    },
    {
        "line": 14,
        "fullcodeline": "memmove(line, endp, strlen(endp) + 1);"
    },
    {
        "line": 12,
        "fullcodeline": "while (*endp == ' ')"
    },
    {
        "line": 13,
        "fullcodeline": "endp++;"
    },
    {
        "line": 16,
        "fullcodeline": "for (i = 0; i < ctx->msgcount; i++)"
    },
    {
        "line": 20,
        "fullcodeline": "if (i == ctx->msgcount)"
    },
    {
        "line": 35,
        "fullcodeline": "ctx->hdrs[i]->index = index - 1;"
    },
    {
        "line": 22,
        "fullcodeline": "mutt_debug(1, \"new header %d %s\\n\", index, line);"
    },
    {
        "line": 11,
        "fullcodeline": "return -1;"
    },
    {
        "line": 17,
        "fullcodeline": "if (mutt_str_strcmp(line, ctx->hdrs[i]->data) == 0)"
    },
    {
        "line": 24,
        "fullcodeline": "if (i >= ctx->hdrmax)"
    },
    {
        "line": 29,
        "fullcodeline": "ctx->hdrs[i]->data = mutt_str_strdup(line);"
    },
    {
        "line": 25,
        "fullcodeline": "mx_alloc_memory(ctx);"
    },
    {
        "line": 31,
        "fullcodeline": "else if (ctx->hdrs[i]->index != index - 1)"
    },
    {
        "line": 32,
        "fullcodeline": "pop_data->clear_cache = true;"
    }
]