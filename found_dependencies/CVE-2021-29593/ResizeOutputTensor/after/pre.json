[
    {
        "line": 3,
        "fullcodeline": "TfLiteIntArray* input_size = op_context->input->dims;"
    },
    {
        "line": 4,
        "fullcodeline": "const int* block_shape = GetTensorData<int32>(op_context->block_shape);"
    },
    {
        "line": 5,
        "fullcodeline": "const int* crops = GetTensorData<int32>(op_context->crops);"
    },
    {
        "line": 7,
        "fullcodeline": "int spatial_dims_num = input_size->size - 2;"
    },
    {
        "line": 9,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, NumDimensions(op_context->block_shape), 1);"
    },
    {
        "line": 10,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, op_context->block_shape->dims->data[0],"
    },
    {
        "line": 13,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, NumDimensions(op_context->crops), 2);"
    },
    {
        "line": 14,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, op_context->crops->dims->data[0],"
    },
    {
        "line": 16,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, op_context->crops->dims->data[1], 2);"
    },
    {
        "line": 22,
        "fullcodeline": "TfLiteIntArray* output_size = TfLiteIntArrayCopy(input_size);"
    },
    {
        "line": 23,
        "fullcodeline": "int output_batch_size = input_size->data[0];"
    },
    {
        "line": 33,
        "fullcodeline": "output_size->data[0] = output_batch_size;"
    },
    {
        "line": 34,
        "fullcodeline": "output_size->data[input_size->size - 1] ="
    },
    {
        "line": 18,
        "fullcodeline": "for (int i = 0; i < spatial_dims_num * 2; ++i) {"
    },
    {
        "line": 24,
        "fullcodeline": "for (int dim = 0; dim < spatial_dims_num; ++dim) {"
    },
    {
        "line": 37,
        "fullcodeline": "return context->ResizeTensor(context, op_context->output, output_size);"
    },
    {
        "line": 19,
        "fullcodeline": "TF_LITE_ENSURE(context, crops[i] >= 0);"
    },
    {
        "line": 26,
        "fullcodeline": "TF_LITE_ENSURE(context, block_shape[dim] != 0);"
    },
    {
        "line": 27,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, output_batch_size % block_shape[dim], 0);"
    },
    {
        "line": 28,
        "fullcodeline": "output_batch_size = output_batch_size / block_shape[dim];"
    },
    {
        "line": 29,
        "fullcodeline": "output_size->data[dim + 1] = input_size->data[dim + 1] * block_shape[dim] -"
    },
    {
        "line": 35,
        "fullcodeline": "input_size->data[input_size->size - 1];"
    },
    {
        "line": 30,
        "fullcodeline": "crops[dim * 2] - crops[dim * 2 + 1];"
    }
]