[
    {
        "line": 2,
        "fullcodeline": "static char id[32];"
    },
    {
        "line": 3,
        "fullcodeline": "bool selectedRow=(i>=sel1.y && i<=sel2.y);"
    },
    {
        "line": 4,
        "fullcodeline": "ImGui::TableNextRow(0,lineHeight);"
    },
    {
        "line": 5,
        "fullcodeline": "ImGui::TableNextColumn();"
    },
    {
        "line": 6,
        "fullcodeline": "float cursorPosY=ImGui::GetCursorPos().y-ImGui::GetScrollY();"
    },
    {
        "line": 18,
        "fullcodeline": "bool isPushing=false;"
    },
    {
        "line": 273,
        "fullcodeline": "ImGui::TableNextColumn();"
    },
    {
        "line": 274,
        "fullcodeline": "patChanX[chans]=ImGui::GetCursorPosX();"
    },
    {
        "line": 8,
        "fullcodeline": "if (cursorPosY<-lineHeight || cursorPosY>ImGui::GetWindowSize().y) {"
    },
    {
        "line": 12,
        "fullcodeline": "if (ord<0 || ord>=e->song.ordersLen) {"
    },
    {
        "line": 15,
        "fullcodeline": "if (i<0 || i>=e->song.patLen) {"
    },
    {
        "line": 22,
        "fullcodeline": "if (e->song.hilightB>0 && !(i%e->song.hilightB)) {"
    },
    {
        "line": 57,
        "fullcodeline": "if (settings.patRowsBase==1) {"
    },
    {
        "line": 63,
        "fullcodeline": "for (int j=0; j<chans; j++) {"
    },
    {
        "line": 58,
        "fullcodeline": "ImGui::TextColored(rowIndexColor,\" %.2X \",i);"
    },
    {
        "line": 69,
        "fullcodeline": "int chanVolMax=e->getMaxVolumeChan(j);"
    },
    {
        "line": 71,
        "fullcodeline": "const DivPattern* pat=patCache[j];"
    },
    {
        "line": 72,
        "fullcodeline": "ImGui::TableNextColumn();"
    },
    {
        "line": 73,
        "fullcodeline": "patChanX[j]=ImGui::GetCursorPosX();"
    },
    {
        "line": 76,
        "fullcodeline": "int sel1XSum=sel1.xCoarse*32+sel1.xFine;"
    },
    {
        "line": 77,
        "fullcodeline": "int sel2XSum=sel2.xCoarse*32+sel2.xFine;"
    },
    {
        "line": 78,
        "fullcodeline": "int j32=j*32;"
    },
    {
        "line": 79,
        "fullcodeline": "bool selectedNote=selectedRow && (j32>=sel1XSum && j32<=sel2XSum);"
    },
    {
        "line": 80,
        "fullcodeline": "bool selectedIns=selectedRow && (j32+1>=sel1XSum && j32+1<=sel2XSum);"
    },
    {
        "line": 81,
        "fullcodeline": "bool selectedVol=selectedRow && (j32+2>=sel1XSum && j32+2<=sel2XSum);"
    },
    {
        "line": 82,
        "fullcodeline": "bool cursorNote=(cursor.y==i && cursor.xCoarse==j && cursor.xFine==0);"
    },
    {
        "line": 83,
        "fullcodeline": "bool cursorIns=(cursor.y==i && cursor.xCoarse==j && cursor.xFine==1);"
    },
    {
        "line": 84,
        "fullcodeline": "bool cursorVol=(cursor.y==i && cursor.xCoarse==j && cursor.xFine==2);"
    },
    {
        "line": 87,
        "fullcodeline": "sprintf(id,\"%s##PN_%d_%d\",noteName(pat->data[i][0],pat->data[i][1]),i,j);"
    },
    {
        "line": 271,
        "fullcodeline": "ImGui::PopStyleColor();"
    },
    {
        "line": 33,
        "fullcodeline": "if (edit && cursor.y==i) {"
    },
    {
        "line": 43,
        "fullcodeline": "isPushing=true;"
    },
    {
        "line": 60,
        "fullcodeline": "ImGui::TextColored(rowIndexColor,\"%3d \",i);"
    },
    {
        "line": 70,
        "fullcodeline": "if (chanVolMax<1) chanVolMax=1;"
    },
    {
        "line": 88,
        "fullcodeline": "if (pat->data[i][0]==0 && pat->data[i][1]==0) {"
    },
    {
        "line": 105,
        "fullcodeline": "if (ImGui::IsItemClicked()) {"
    },
    {
        "line": 26,
        "fullcodeline": "} else if (e->song.hilightA>0 && !(i%e->song.hilightA)) {"
    },
    {
        "line": 34,
        "fullcodeline": "ImGui::TableSetBgColor(ImGuiTableBgTarget_RowBg0,ImGui::GetColorU32(uiColors[GUI_COLOR_EDITING]));"
    },
    {
        "line": 44,
        "fullcodeline": "if (edit && cursor.y==i) {"
    },
    {
        "line": 66,
        "fullcodeline": "patChanX[j]=ImGui::GetCursorPosX();"
    },
    {
        "line": 89,
        "fullcodeline": "ImGui::PushStyleColor(ImGuiCol_Text,inactiveColor);"
    },
    {
        "line": 94,
        "fullcodeline": "ImGui::PushStyleColor(ImGuiCol_Header,uiColors[GUI_COLOR_PATTERN_CURSOR]);"
    },
    {
        "line": 95,
        "fullcodeline": "ImGui::PushStyleColor(ImGuiCol_HeaderActive,uiColors[GUI_COLOR_PATTERN_CURSOR_ACTIVE]);"
    },
    {
        "line": 96,
        "fullcodeline": "ImGui::PushStyleColor(ImGuiCol_HeaderHovered,uiColors[GUI_COLOR_PATTERN_CURSOR_HOVER]);"
    },
    {
        "line": 97,
        "fullcodeline": "ImGui::Selectable(id,true,ImGuiSelectableFlags_NoPadWithHalfSpacing,threeChars);"
    },
    {
        "line": 98,
        "fullcodeline": "demandX=ImGui::GetCursorPosX();"
    },
    {
        "line": 99,
        "fullcodeline": "ImGui::PopStyleColor(3);"
    },
    {
        "line": 106,
        "fullcodeline": "startSelection(j,0,i);"
    },
    {
        "line": 45,
        "fullcodeline": "ImGui::PushStyleColor(ImGuiCol_Header,ImGui::GetColorU32(uiColors[GUI_COLOR_EDITING]));"
    },
    {
        "line": 91,
        "fullcodeline": "ImGui::PushStyleColor(ImGuiCol_Text,activeColor);"
    },
    {
        "line": 102,
        "fullcodeline": "ImGui::Selectable(id,isPushing || selectedNote,ImGuiSelectableFlags_NoPadWithHalfSpacing,threeChars);"
    },
    {
        "line": 35,
        "fullcodeline": "} else if (isPlaying && oldRow==i) {"
    },
    {
        "line": 36,
        "fullcodeline": "ImGui::TableSetBgColor(ImGuiTableBgTarget_RowBg0,ImGui::GetColorU32(uiColors[GUI_COLOR_PATTERN_PLAY_HEAD]));"
    },
    {
        "line": 46,
        "fullcodeline": "} else if (isPlaying && oldRow==i) {"
    },
    {
        "line": 101,
        "fullcodeline": "if (selectedNote) ImGui::PushStyleColor(ImGuiCol_Header,uiColors[GUI_COLOR_PATTERN_SELECTION]);"
    },
    {
        "line": 103,
        "fullcodeline": "if (selectedNote) ImGui::PopStyleColor();"
    },
    {
        "line": 47,
        "fullcodeline": "ImGui::PushStyleColor(ImGuiCol_Header,ImGui::GetColorU32(uiColors[GUI_COLOR_PATTERN_PLAY_HEAD]));"
    },
    {
        "line": 37,
        "fullcodeline": "} else if (e->song.hilightB>0 && !(i%e->song.hilightB)) {"
    },
    {
        "line": 38,
        "fullcodeline": "ImGui::TableSetBgColor(ImGuiTableBgTarget_RowBg0,ImGui::GetColorU32(uiColors[GUI_COLOR_PATTERN_HI_2]));"
    },
    {
        "line": 48,
        "fullcodeline": "} else if (e->song.hilightB>0 && !(i%e->song.hilightB)) {"
    },
    {
        "line": 49,
        "fullcodeline": "ImGui::PushStyleColor(ImGuiCol_Header,ImGui::GetColorU32(uiColors[GUI_COLOR_PATTERN_HI_2]));"
    },
    {
        "line": 39,
        "fullcodeline": "} else if (e->song.hilightA>0 && !(i%e->song.hilightA)) {"
    },
    {
        "line": 40,
        "fullcodeline": "ImGui::TableSetBgColor(ImGuiTableBgTarget_RowBg0,ImGui::GetColorU32(uiColors[GUI_COLOR_PATTERN_HI_1]));"
    },
    {
        "line": 50,
        "fullcodeline": "} else if (e->song.hilightA>0 && !(i%e->song.hilightA)) {"
    },
    {
        "line": 51,
        "fullcodeline": "ImGui::PushStyleColor(ImGuiCol_Header,ImGui::GetColorU32(uiColors[GUI_COLOR_PATTERN_HI_1]));"
    },
    {
        "line": 53,
        "fullcodeline": "isPushing=false;"
    }
]