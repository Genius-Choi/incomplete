[
    {
        "line": 7,
        "fullcodeline": "size_t state = 0;"
    },
    {
        "line": 9,
        "fullcodeline": "const unsigned char * const ip_end = in + in_len;"
    },
    {
        "line": 10,
        "fullcodeline": "unsigned char * const op_end = out + *out_len;"
    },
    {
        "line": 12,
        "fullcodeline": "op = out;"
    },
    {
        "line": 13,
        "fullcodeline": "ip = in;"
    },
    {
        "line": 187,
        "fullcodeline": "*out_len = op - out;"
    },
    {
        "line": 15,
        "fullcodeline": "if (unlikely(in_len < 3))"
    },
    {
        "line": 17,
        "fullcodeline": "if (*ip > 17) {"
    },
    {
        "line": 188,
        "fullcodeline": "return (t != 3       ? LZO_E_ERROR :"
    },
    {
        "line": 193,
        "fullcodeline": "*out_len = op - out;"
    },
    {
        "line": 18,
        "fullcodeline": "t = *ip++ - 17;"
    },
    {
        "line": 27,
        "fullcodeline": "t = *ip++;"
    },
    {
        "line": 126,
        "fullcodeline": "TEST_LB(m_pos);"
    },
    {
        "line": 167,
        "fullcodeline": "state = next;"
    },
    {
        "line": 168,
        "fullcodeline": "t = next;"
    },
    {
        "line": 189,
        "fullcodeline": "ip == ip_end ? LZO_E_OK :"
    },
    {
        "line": 19,
        "fullcodeline": "if (t < 4) {"
    },
    {
        "line": 28,
        "fullcodeline": "if (t < 16) {"
    },
    {
        "line": 156,
        "fullcodeline": "unsigned char *oe = op + t;"
    },
    {
        "line": 158,
        "fullcodeline": "op[0] = m_pos[0];"
    },
    {
        "line": 159,
        "fullcodeline": "op[1] = m_pos[1];"
    },
    {
        "line": 160,
        "fullcodeline": "op += 2;"
    },
    {
        "line": 161,
        "fullcodeline": "m_pos += 2;"
    },
    {
        "line": 177,
        "fullcodeline": "NEED_IP(t, 3);"
    },
    {
        "line": 178,
        "fullcodeline": "NEED_OP(t, 0);"
    },
    {
        "line": 190,
        "fullcodeline": "ip <  ip_end ? LZO_E_INPUT_NOT_CONSUMED : LZO_E_INPUT_OVERRUN);"
    },
    {
        "line": 20,
        "fullcodeline": "next = t;"
    },
    {
        "line": 164,
        "fullcodeline": "} while (op < oe);"
    },
    {
        "line": 179,
        "fullcodeline": "while (t > 0) {"
    },
    {
        "line": 29,
        "fullcodeline": "if (likely(state == 0)) {"
    },
    {
        "line": 163,
        "fullcodeline": "*op++ = *m_pos++;"
    },
    {
        "line": 180,
        "fullcodeline": "*op++ = *ip++;"
    },
    {
        "line": 181,
        "fullcodeline": "t--;"
    },
    {
        "line": 38,
        "fullcodeline": "t += 3;"
    },
    {
        "line": 63,
        "fullcodeline": "state = 4;"
    },
    {
        "line": 83,
        "fullcodeline": "} else if (t >= 64) {"
    },
    {
        "line": 30,
        "fullcodeline": "if (unlikely(t == 0)) {"
    },
    {
        "line": 57,
        "fullcodeline": "NEED_OP(t, 0);"
    },
    {
        "line": 58,
        "fullcodeline": "NEED_IP(t, 3);"
    },
    {
        "line": 84,
        "fullcodeline": "next = t & 3;"
    },
    {
        "line": 85,
        "fullcodeline": "m_pos = op - 1;"
    },
    {
        "line": 86,
        "fullcodeline": "m_pos -= (t >> 2) & 7;"
    },
    {
        "line": 87,
        "fullcodeline": "m_pos -= *ip++ << 3;"
    },
    {
        "line": 88,
        "fullcodeline": "t = (t >> 5) - 1 + (3 - 1);"
    },
    {
        "line": 36,
        "fullcodeline": "t += 15 + *ip++;"
    },
    {
        "line": 61,
        "fullcodeline": "} while (--t > 0);"
    },
    {
        "line": 65,
        "fullcodeline": "} else if (state != 4) {"
    },
    {
        "line": 31,
        "fullcodeline": "while (unlikely(*ip == 0)) {"
    },
    {
        "line": 60,
        "fullcodeline": "*op++ = *ip++;"
    },
    {
        "line": 66,
        "fullcodeline": "next = t & 3;"
    },
    {
        "line": 67,
        "fullcodeline": "m_pos = op - 1;"
    },
    {
        "line": 68,
        "fullcodeline": "m_pos -= t >> 2;"
    },
    {
        "line": 69,
        "fullcodeline": "m_pos -= *ip++ << 2;"
    },
    {
        "line": 70,
        "fullcodeline": "TEST_LB(m_pos);"
    },
    {
        "line": 71,
        "fullcodeline": "NEED_OP(2, 0);"
    },
    {
        "line": 72,
        "fullcodeline": "op[0] = m_pos[0];"
    },
    {
        "line": 73,
        "fullcodeline": "op[1] = m_pos[1];"
    },
    {
        "line": 74,
        "fullcodeline": "op += 2;"
    },
    {
        "line": 89,
        "fullcodeline": "} else if (t >= 32) {"
    },
    {
        "line": 32,
        "fullcodeline": "t += 255;"
    },
    {
        "line": 33,
        "fullcodeline": "ip++;"
    },
    {
        "line": 34,
        "fullcodeline": "NEED_IP(1, 0);"
    },
    {
        "line": 77,
        "fullcodeline": "next = t & 3;"
    },
    {
        "line": 78,
        "fullcodeline": "m_pos = op - (1 + M2_MAX_OFFSET);"
    },
    {
        "line": 79,
        "fullcodeline": "m_pos -= t >> 2;"
    },
    {
        "line": 80,
        "fullcodeline": "m_pos -= *ip++ << 2;"
    },
    {
        "line": 81,
        "fullcodeline": "t = 3;"
    },
    {
        "line": 90,
        "fullcodeline": "t = (t & 31) + (3 - 1);"
    },
    {
        "line": 100,
        "fullcodeline": "m_pos = op - 1;"
    },
    {
        "line": 101,
        "fullcodeline": "next = get_unaligned_le16(ip);"
    },
    {
        "line": 102,
        "fullcodeline": "ip += 2;"
    },
    {
        "line": 103,
        "fullcodeline": "m_pos -= next >> 2;"
    },
    {
        "line": 104,
        "fullcodeline": "next &= 3;"
    },
    {
        "line": 106,
        "fullcodeline": "m_pos = op;"
    },
    {
        "line": 107,
        "fullcodeline": "m_pos -= (t & 8) << 11;"
    },
    {
        "line": 108,
        "fullcodeline": "t = (t & 7) + (3 - 1);"
    },
    {
        "line": 118,
        "fullcodeline": "next = get_unaligned_le16(ip);"
    },
    {
        "line": 119,
        "fullcodeline": "ip += 2;"
    },
    {
        "line": 120,
        "fullcodeline": "m_pos -= next >> 2;"
    },
    {
        "line": 121,
        "fullcodeline": "next &= 3;"
    },
    {
        "line": 124,
        "fullcodeline": "m_pos -= 0x4000;"
    },
    {
        "line": 91,
        "fullcodeline": "if (unlikely(t == 2)) {"
    },
    {
        "line": 97,
        "fullcodeline": "t += 31 + *ip++;"
    },
    {
        "line": 98,
        "fullcodeline": "NEED_IP(2, 0);"
    },
    {
        "line": 109,
        "fullcodeline": "if (unlikely(t == 2)) {"
    },
    {
        "line": 122,
        "fullcodeline": "if (m_pos == op)"
    },
    {
        "line": 92,
        "fullcodeline": "while (unlikely(*ip == 0)) {"
    },
    {
        "line": 115,
        "fullcodeline": "t += 7 + *ip++;"
    },
    {
        "line": 116,
        "fullcodeline": "NEED_IP(2, 0);"
    },
    {
        "line": 93,
        "fullcodeline": "t += 255;"
    },
    {
        "line": 94,
        "fullcodeline": "ip++;"
    },
    {
        "line": 95,
        "fullcodeline": "NEED_IP(1, 0);"
    },
    {
        "line": 110,
        "fullcodeline": "while (unlikely(*ip == 0)) {"
    },
    {
        "line": 111,
        "fullcodeline": "t += 255;"
    },
    {
        "line": 112,
        "fullcodeline": "ip++;"
    },
    {
        "line": 113,
        "fullcodeline": "NEED_IP(1, 0);"
    }
]