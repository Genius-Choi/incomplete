[
    {
        "line": 10,
        "fullcodeline": "size_t total_size = 0;"
    },
    {
        "line": 19,
        "fullcodeline": "base = smram;"
    },
    {
        "line": 20,
        "fullcodeline": "base += size;"
    },
    {
        "line": 21,
        "fullcodeline": "params->smram_start = (uintptr_t)smram;"
    },
    {
        "line": 22,
        "fullcodeline": "params->smram_end = params->smram_start + size;"
    },
    {
        "line": 23,
        "fullcodeline": "params->smm_main_entry_offset = SMM_ENTRY_OFFSET;"
    },
    {
        "line": 33,
        "fullcodeline": "total_stack_size = params->per_cpu_stack_size *"
    },
    {
        "line": 35,
        "fullcodeline": "total_size += total_stack_size;"
    },
    {
        "line": 37,
        "fullcodeline": "params->stack_top = smram + total_stack_size;"
    },
    {
        "line": 57,
        "fullcodeline": "handler_size = rmodule_memory_size(&smm_mod);"
    },
    {
        "line": 58,
        "fullcodeline": "base -= handler_size;"
    },
    {
        "line": 59,
        "fullcodeline": "total_size += handler_size;"
    },
    {
        "line": 60,
        "fullcodeline": "module_alignment = rmodule_load_alignment(&smm_mod);"
    },
    {
        "line": 61,
        "fullcodeline": "alignment_size = module_alignment -"
    },
    {
        "line": 68,
        "fullcodeline": "printk(BIOS_DEBUG,"
    },
    {
        "line": 86,
        "fullcodeline": "params->handler = rmodule_entry(&smm_mod);"
    },
    {
        "line": 87,
        "fullcodeline": "params->handler_arg = rmodule_parameters(&smm_mod);"
    },
    {
        "line": 89,
        "fullcodeline": "printk(BIOS_DEBUG, \"%s: smram_start: 0x%p\\n\","
    },
    {
        "line": 91,
        "fullcodeline": "printk(BIOS_DEBUG, \"%s: smram_end: %p\\n\","
    },
    {
        "line": 93,
        "fullcodeline": "printk(BIOS_DEBUG, \"%s: stack_top: %p\\n\","
    },
    {
        "line": 95,
        "fullcodeline": "printk(BIOS_DEBUG, \"%s: handler start %p\\n\","
    },
    {
        "line": 97,
        "fullcodeline": "printk(BIOS_DEBUG, \"%s: handler_size %zx\\n\","
    },
    {
        "line": 99,
        "fullcodeline": "printk(BIOS_DEBUG, \"%s: handler_arg %p\\n\","
    },
    {
        "line": 101,
        "fullcodeline": "printk(BIOS_DEBUG, \"%s: fxsave_area %p\\n\","
    },
    {
        "line": 103,
        "fullcodeline": "printk(BIOS_DEBUG, \"%s: fxsave_size %zx\\n\","
    },
    {
        "line": 105,
        "fullcodeline": "printk(BIOS_DEBUG, \"%s: CONFIG_MSEG_SIZE 0x%x\\n\","
    },
    {
        "line": 107,
        "fullcodeline": "printk(BIOS_DEBUG, \"%s: CONFIG_BIOS_RESOURCE_LIST_SIZE 0x%x\\n\","
    },
    {
        "line": 113,
        "fullcodeline": "base -= SMM_CODE_SEGMENT_SIZE;"
    },
    {
        "line": 114,
        "fullcodeline": "printk(BIOS_DEBUG, \"%s: cpu0 entry: %p\\n\","
    },
    {
        "line": 116,
        "fullcodeline": "params->smm_entry = (uintptr_t)base + params->smm_main_entry_offset;"
    },
    {
        "line": 13,
        "fullcodeline": "if (size <= SMM_DEFAULT_SIZE)"
    },
    {
        "line": 26,
        "fullcodeline": "if (rmodule_parse(&_binary_smm_start, &smm_mod))"
    },
    {
        "line": 30,
        "fullcodeline": "if (CONFIG(DEBUG_SMI))"
    },
    {
        "line": 40,
        "fullcodeline": "if (CONFIG(STM)) {"
    },
    {
        "line": 46,
        "fullcodeline": "if (CONFIG(SSE)) {"
    },
    {
        "line": 63,
        "fullcodeline": "if (alignment_size != module_alignment) {"
    },
    {
        "line": 73,
        "fullcodeline": "if (total_size > size) {"
    },
    {
        "line": 77,
        "fullcodeline": "if (handler_size > SMM_CODE_SEGMENT_SIZE) {"
    },
    {
        "line": 83,
        "fullcodeline": "if (rmodule_load(base, &smm_mod))"
    },
    {
        "line": 92,
        "fullcodeline": "__func__, smram + size);"
    },
    {
        "line": 117,
        "fullcodeline": "return smm_module_setup_stub(base, size, params, fxsave_area);"
    },
    {
        "line": 31,
        "fullcodeline": "memset(smram, 0xcd, size);"
    },
    {
        "line": 41,
        "fullcodeline": "base -= CONFIG_MSEG_SIZE + CONFIG_BIOS_RESOURCE_LIST_SIZE;"
    },
    {
        "line": 42,
        "fullcodeline": "total_size += CONFIG_MSEG_SIZE + CONFIG_BIOS_RESOURCE_LIST_SIZE;"
    },
    {
        "line": 47,
        "fullcodeline": "fxsave_size = FXSAVE_SIZE * params->num_concurrent_stacks;"
    },
    {
        "line": 48,
        "fullcodeline": "fxsave_area = base - fxsave_size;"
    },
    {
        "line": 49,
        "fullcodeline": "base -= fxsave_size;"
    },
    {
        "line": 50,
        "fullcodeline": "total_size += fxsave_size;"
    },
    {
        "line": 62,
        "fullcodeline": "((uintptr_t)base % module_alignment);"
    },
    {
        "line": 64,
        "fullcodeline": "handler_size += alignment_size;"
    },
    {
        "line": 65,
        "fullcodeline": "base += alignment_size;"
    },
    {
        "line": 74,
        "fullcodeline": "printk(BIOS_ERR, \"%s: need more SMRAM\\n\", __func__);"
    },
    {
        "line": 78,
        "fullcodeline": "printk(BIOS_ERR, \"%s: increase SMM_CODE_SEGMENT_SIZE: handler_size = %zx\\n\","
    },
    {
        "line": 14,
        "fullcodeline": "return -1;"
    },
    {
        "line": 27,
        "fullcodeline": "return -1;"
    },
    {
        "line": 52,
        "fullcodeline": "fxsave_size = 0;"
    },
    {
        "line": 53,
        "fullcodeline": "fxsave_area = NULL;"
    },
    {
        "line": 75,
        "fullcodeline": "return -1;"
    },
    {
        "line": 80,
        "fullcodeline": "return -1;"
    },
    {
        "line": 84,
        "fullcodeline": "return -1;"
    }
]