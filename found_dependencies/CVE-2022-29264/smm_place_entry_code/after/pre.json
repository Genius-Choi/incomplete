[
    {
        "line": 26,
        "fullcodeline": "printk(BIOS_INFO, \"%s: smbase %zx, stack_top %x\\n\","
    },
    {
        "line": 30,
        "fullcodeline": "size = cpus[0].code_end - cpus[0].code_start;"
    },
    {
        "line": 6,
        "fullcodeline": "if (smm_create_map(smbase, num_cpus, params)) {"
    },
    {
        "line": 31,
        "fullcodeline": "for (i = 1; i < num_cpus; i++) {"
    },
    {
        "line": 32,
        "fullcodeline": "memcpy((int *)cpus[i].code_start, (int *)cpus[0].code_start, size);"
    },
    {
        "line": 33,
        "fullcodeline": "printk(BIOS_DEBUG,"
    },
    {
        "line": 36,
        "fullcodeline": "printk(BIOS_DEBUG, \"%s: copying from %zx to %zx 0x%x bytes\\n\","
    },
    {
        "line": 27,
        "fullcodeline": "__func__, cpus[num_cpus-1].smbase, stack_top);"
    },
    {
        "line": 13,
        "fullcodeline": "if (cpus[num_cpus - 1].smbase +"
    },
    {
        "line": 15,
        "fullcodeline": "printk(BIOS_ERR, \"%s: stack encroachment\\n\", __func__);"
    },
    {
        "line": 16,
        "fullcodeline": "printk(BIOS_ERR, \"%s: smbase %zx, stack_top %x\\n\","
    }
]