[
    {
        "line": 16,
        "fullcodeline": "base = smbase;"
    },
    {
        "line": 17,
        "fullcodeline": "size = smm_size;"
    },
    {
        "line": 32,
        "fullcodeline": "total_save_state_size = params->per_cpu_save_state_size *"
    },
    {
        "line": 41,
        "fullcodeline": "size -= total_save_state_size;"
    },
    {
        "line": 59,
        "fullcodeline": "smm_stub_size = rmodule_memory_size(&smm_stub);"
    },
    {
        "line": 63,
        "fullcodeline": "smm_stub_loc = &base[params->smm_main_entry_offset];"
    },
    {
        "line": 75,
        "fullcodeline": "size = params->num_concurrent_stacks * params->per_cpu_stack_size;"
    },
    {
        "line": 76,
        "fullcodeline": "stacks_top = smm_stub_place_stacks((char *)params->smram_start, size, params);"
    },
    {
        "line": 83,
        "fullcodeline": "params->stack_top = stacks_top;"
    },
    {
        "line": 96,
        "fullcodeline": "stub_params = rmodule_parameters(&smm_stub);"
    },
    {
        "line": 97,
        "fullcodeline": "stub_params->stack_top = (uintptr_t)stacks_top;"
    },
    {
        "line": 98,
        "fullcodeline": "stub_params->stack_size = params->per_cpu_stack_size;"
    },
    {
        "line": 102,
        "fullcodeline": "stub_params->fxsave_area_size = FXSAVE_SIZE;"
    },
    {
        "line": 103,
        "fullcodeline": "stub_params->runtime.smbase = (uintptr_t)smbase;"
    },
    {
        "line": 104,
        "fullcodeline": "stub_params->runtime.smm_size = smm_size;"
    },
    {
        "line": 105,
        "fullcodeline": "stub_params->runtime.save_state_size = params->per_cpu_save_state_size;"
    },
    {
        "line": 106,
        "fullcodeline": "stub_params->runtime.num_cpus = params->num_concurrent_stacks;"
    },
    {
        "line": 108,
        "fullcodeline": "printk(BIOS_DEBUG, \"%s: stack_end = 0x%x\\n\","
    },
    {
        "line": 110,
        "fullcodeline": "printk(BIOS_DEBUG,"
    },
    {
        "line": 112,
        "fullcodeline": "printk(BIOS_DEBUG, \"%s: stack_size = 0x%x\\n\","
    },
    {
        "line": 114,
        "fullcodeline": "printk(BIOS_DEBUG, \"%s: runtime.smbase = 0x%x\\n\","
    },
    {
        "line": 116,
        "fullcodeline": "printk(BIOS_DEBUG, \"%s: runtime.start32_offset = 0x%x\\n\", __func__,"
    },
    {
        "line": 118,
        "fullcodeline": "printk(BIOS_DEBUG, \"%s: runtime.smm_size = 0x%zx\\n\","
    },
    {
        "line": 120,
        "fullcodeline": "printk(BIOS_DEBUG, \"%s: per_cpu_save_state_size = 0x%x\\n\","
    },
    {
        "line": 122,
        "fullcodeline": "printk(BIOS_DEBUG, \"%s: num_cpus = 0x%x\\n\", __func__,"
    },
    {
        "line": 124,
        "fullcodeline": "printk(BIOS_DEBUG, \"%s: total_save_state_size = 0x%x\\n\","
    },
    {
        "line": 127,
        "fullcodeline": "total_size_all = stub_params->stack_size +"
    },
    {
        "line": 130,
        "fullcodeline": "printk(BIOS_DEBUG, \"%s: total_size_all = 0x%x\\n\", __func__,"
    },
    {
        "line": 20,
        "fullcodeline": "if (params->num_concurrent_stacks > CONFIG_MAX_CPUS) {"
    },
    {
        "line": 26,
        "fullcodeline": "if (rmodule_parse(&_binary_smmstub_start, &smm_stub)) {"
    },
    {
        "line": 34,
        "fullcodeline": "if (total_save_state_size > size) {"
    },
    {
        "line": 44,
        "fullcodeline": "if (size <= params->smm_main_entry_offset) {"
    },
    {
        "line": 60,
        "fullcodeline": "stub_entry_offset = rmodule_entry_offset(&smm_stub);"
    },
    {
        "line": 77,
        "fullcodeline": "if (stacks_top == NULL) {"
    },
    {
        "line": 85,
        "fullcodeline": "if (rmodule_load(smm_stub_loc, &smm_stub)) {"
    },
    {
        "line": 125,
        "fullcodeline": "__func__, (stub_params->runtime.save_state_size *"
    },
    {
        "line": 134,
        "fullcodeline": "for (i = 0; i < params->num_concurrent_stacks; i++)"
    },
    {
        "line": 21,
        "fullcodeline": "printk(BIOS_ERR, \"%s: not enough stacks\\n\", __func__);"
    },
    {
        "line": 45,
        "fullcodeline": "printk(BIOS_ERR, \"%s: encroachment over SMM entry point\\n\", __func__);"
    },
    {
        "line": 52,
        "fullcodeline": "if (params->per_cpu_stack_size <= SMM_MINIMUM_STACK_SIZE ||"
    },
    {
        "line": 53,
        "fullcodeline": "(params->per_cpu_stack_size & 3) != 0) {"
    },
    {
        "line": 66,
        "fullcodeline": "if (smm_stub_size > (size - params->smm_main_entry_offset)) {"
    },
    {
        "line": 78,
        "fullcodeline": "printk(BIOS_ERR, \"%s: not enough space for stacks\\n\", __func__);"
    },
    {
        "line": 90,
        "fullcodeline": "if (!smm_stub_place_staggered_entry_points(base, params, &smm_stub)) {"
    },
    {
        "line": 128,
        "fullcodeline": "(stub_params->runtime.save_state_size *"
    },
    {
        "line": 22,
        "fullcodeline": "return -1;"
    },
    {
        "line": 28,
        "fullcodeline": "return -1;"
    },
    {
        "line": 38,
        "fullcodeline": "return -1;"
    },
    {
        "line": 48,
        "fullcodeline": "return -1;"
    },
    {
        "line": 55,
        "fullcodeline": "return -1;"
    },
    {
        "line": 68,
        "fullcodeline": "return -1;"
    },
    {
        "line": 81,
        "fullcodeline": "return -1;"
    },
    {
        "line": 87,
        "fullcodeline": "return -1;"
    },
    {
        "line": 92,
        "fullcodeline": "return -1;"
    }
]