[
    {
        "line": 8,
        "fullcodeline": "char name[MAXHOSTNAMELEN];"
    },
    {
        "line": 9,
        "fullcodeline": "int have_v6_break = 0, in_v6_break = 0;"
    },
    {
        "line": 11,
        "fullcodeline": "*subarray = NULL;"
    },
    {
        "line": 13,
        "fullcodeline": "n = dn_expand(answer->qb2, end, cp, name, sizeof(name) - 2);"
    },
    {
        "line": 17,
        "fullcodeline": "cp += n;"
    },
    {
        "line": 20,
        "fullcodeline": "GETSHORT(type, cp);"
    },
    {
        "line": 21,
        "fullcodeline": "GETSHORT(class, cp);"
    },
    {
        "line": 22,
        "fullcodeline": "GETLONG(ttl, cp);"
    },
    {
        "line": 23,
        "fullcodeline": "GETSHORT(dlen, cp);"
    },
    {
        "line": 24,
        "fullcodeline": "CHECKCP(dlen);"
    },
    {
        "line": 35,
        "fullcodeline": "ALLOC_INIT_ZVAL(*subarray);"
    },
    {
        "line": 36,
        "fullcodeline": "array_init(*subarray);"
    },
    {
        "line": 38,
        "fullcodeline": "add_assoc_string(*subarray, \"host\", name, 1);"
    },
    {
        "line": 39,
        "fullcodeline": "add_assoc_string(*subarray, \"class\", \"IN\", 1);"
    },
    {
        "line": 40,
        "fullcodeline": "add_assoc_long(*subarray, \"ttl\", ttl);"
    },
    {
        "line": 14,
        "fullcodeline": "if (n < 0) {"
    },
    {
        "line": 25,
        "fullcodeline": "if (type_to_fetch != T_ANY && type != type_to_fetch) {"
    },
    {
        "line": 26,
        "fullcodeline": "cp += dlen;"
    },
    {
        "line": 31,
        "fullcodeline": "cp += dlen;"
    },
    {
        "line": 43,
        "fullcodeline": "add_assoc_long(*subarray, \"type\", type);"
    },
    {
        "line": 45,
        "fullcodeline": "cp += dlen;"
    },
    {
        "line": 52,
        "fullcodeline": "add_assoc_string(*subarray, \"type\", \"A\", 1);"
    },
    {
        "line": 53,
        "fullcodeline": "snprintf(name, sizeof(name), \"%d.%d.%d.%d\", cp[0], cp[1], cp[2], cp[3]);"
    },
    {
        "line": 55,
        "fullcodeline": "cp += dlen;"
    },
    {
        "line": 59,
        "fullcodeline": "add_assoc_string(*subarray, \"type\", \"MX\", 1);"
    },
    {
        "line": 60,
        "fullcodeline": "GETSHORT(n, cp);"
    },
    {
        "line": 61,
        "fullcodeline": "add_assoc_long(*subarray, \"pri\", n);"
    },
    {
        "line": 77,
        "fullcodeline": "n = dn_expand(answer->qb2, end, cp, name, (sizeof name) - 2);"
    },
    {
        "line": 81,
        "fullcodeline": "cp += n;"
    },
    {
        "line": 86,
        "fullcodeline": "add_assoc_string(*subarray, \"type\", \"HINFO\", 1);"
    },
    {
        "line": 88,
        "fullcodeline": "n = *cp & 0xFF;"
    },
    {
        "line": 89,
        "fullcodeline": "cp++;"
    },
    {
        "line": 90,
        "fullcodeline": "CHECKCP(n);"
    },
    {
        "line": 91,
        "fullcodeline": "add_assoc_stringl(*subarray, \"cpu\", (char*)cp, n, 1);"
    },
    {
        "line": 92,
        "fullcodeline": "cp += n;"
    },
    {
        "line": 94,
        "fullcodeline": "n = *cp & 0xFF;"
    },
    {
        "line": 95,
        "fullcodeline": "cp++;"
    },
    {
        "line": 96,
        "fullcodeline": "CHECKCP(n);"
    },
    {
        "line": 97,
        "fullcodeline": "add_assoc_stringl(*subarray, \"os\", (char*)cp, n, 1);"
    },
    {
        "line": 98,
        "fullcodeline": "cp += n;"
    },
    {
        "line": 132,
        "fullcodeline": "add_assoc_string(*subarray, \"type\", \"SOA\", 1);"
    },
    {
        "line": 133,
        "fullcodeline": "n = dn_expand(answer->qb2, end, cp, name, (sizeof name) -2);"
    },
    {
        "line": 137,
        "fullcodeline": "cp += n;"
    },
    {
        "line": 138,
        "fullcodeline": "add_assoc_string(*subarray, \"mname\", name, 1);"
    },
    {
        "line": 139,
        "fullcodeline": "n = dn_expand(answer->qb2, end, cp, name, (sizeof name) -2);"
    },
    {
        "line": 143,
        "fullcodeline": "cp += n;"
    },
    {
        "line": 144,
        "fullcodeline": "add_assoc_string(*subarray, \"rname\", name, 1);"
    },
    {
        "line": 146,
        "fullcodeline": "GETLONG(n, cp);"
    },
    {
        "line": 147,
        "fullcodeline": "add_assoc_long(*subarray, \"serial\", n);"
    },
    {
        "line": 148,
        "fullcodeline": "GETLONG(n, cp);"
    },
    {
        "line": 149,
        "fullcodeline": "add_assoc_long(*subarray, \"refresh\", n);"
    },
    {
        "line": 150,
        "fullcodeline": "GETLONG(n, cp);"
    },
    {
        "line": 151,
        "fullcodeline": "add_assoc_long(*subarray, \"retry\", n);"
    },
    {
        "line": 152,
        "fullcodeline": "GETLONG(n, cp);"
    },
    {
        "line": 153,
        "fullcodeline": "add_assoc_long(*subarray, \"expire\", n);"
    },
    {
        "line": 154,
        "fullcodeline": "GETLONG(n, cp);"
    },
    {
        "line": 158,
        "fullcodeline": "tp = (u_char*)name;"
    },
    {
        "line": 188,
        "fullcodeline": "add_assoc_string(*subarray, \"type\", \"AAAA\", 1);"
    },
    {
        "line": 192,
        "fullcodeline": "p = cp;"
    },
    {
        "line": 193,
        "fullcodeline": "add_assoc_string(*subarray, \"type\", \"A6\", 1);"
    },
    {
        "line": 195,
        "fullcodeline": "n = ((int)cp[0]) & 0xFF;"
    },
    {
        "line": 196,
        "fullcodeline": "cp++;"
    },
    {
        "line": 197,
        "fullcodeline": "add_assoc_long(*subarray, \"masklen\", n);"
    },
    {
        "line": 198,
        "fullcodeline": "tp = (u_char*)name;"
    },
    {
        "line": 258,
        "fullcodeline": "add_assoc_string(*subarray, \"ipv6\", name, 1);"
    },
    {
        "line": 270,
        "fullcodeline": "add_assoc_string(*subarray, \"type\", \"SRV\", 1);"
    },
    {
        "line": 271,
        "fullcodeline": "GETSHORT(n, cp);"
    },
    {
        "line": 272,
        "fullcodeline": "add_assoc_long(*subarray, \"pri\", n);"
    },
    {
        "line": 273,
        "fullcodeline": "GETSHORT(n, cp);"
    },
    {
        "line": 274,
        "fullcodeline": "add_assoc_long(*subarray, \"weight\", n);"
    },
    {
        "line": 275,
        "fullcodeline": "GETSHORT(n, cp);"
    },
    {
        "line": 276,
        "fullcodeline": "add_assoc_long(*subarray, \"port\", n);"
    },
    {
        "line": 277,
        "fullcodeline": "n = dn_expand(answer->qb2, end, cp, name, (sizeof name) - 2);"
    },
    {
        "line": 281,
        "fullcodeline": "cp += n;"
    },
    {
        "line": 286,
        "fullcodeline": "add_assoc_string(*subarray, \"type\", \"NAPTR\", 1);"
    },
    {
        "line": 287,
        "fullcodeline": "GETSHORT(n, cp);"
    },
    {
        "line": 288,
        "fullcodeline": "add_assoc_long(*subarray, \"order\", n);"
    },
    {
        "line": 289,
        "fullcodeline": "GETSHORT(n, cp);"
    },
    {
        "line": 290,
        "fullcodeline": "add_assoc_long(*subarray, \"pref\", n);"
    },
    {
        "line": 293,
        "fullcodeline": "n = (cp[0] & 0xFF);"
    },
    {
        "line": 294,
        "fullcodeline": "cp++;"
    },
    {
        "line": 295,
        "fullcodeline": "CHECKCP(n);"
    },
    {
        "line": 296,
        "fullcodeline": "add_assoc_stringl(*subarray, \"flags\", (char*)cp, n, 1);"
    },
    {
        "line": 297,
        "fullcodeline": "cp += n;"
    },
    {
        "line": 300,
        "fullcodeline": "n = (cp[0] & 0xFF);"
    },
    {
        "line": 301,
        "fullcodeline": "cp++;"
    },
    {
        "line": 302,
        "fullcodeline": "CHECKCP(n);"
    },
    {
        "line": 303,
        "fullcodeline": "add_assoc_stringl(*subarray, \"services\", (char*)cp, n, 1);"
    },
    {
        "line": 304,
        "fullcodeline": "cp += n;"
    },
    {
        "line": 307,
        "fullcodeline": "n = (cp[0] & 0xFF);"
    },
    {
        "line": 308,
        "fullcodeline": "cp++;"
    },
    {
        "line": 309,
        "fullcodeline": "CHECKCP(n);"
    },
    {
        "line": 310,
        "fullcodeline": "add_assoc_stringl(*subarray, \"regex\", (char*)cp, n, 1);"
    },
    {
        "line": 311,
        "fullcodeline": "cp += n;"
    },
    {
        "line": 313,
        "fullcodeline": "n = dn_expand(answer->qb2, end, cp, name, (sizeof name) - 2);"
    },
    {
        "line": 317,
        "fullcodeline": "cp += n;"
    },
    {
        "line": 323,
        "fullcodeline": "cp += dlen;"
    },
    {
        "line": 64,
        "fullcodeline": "if (type == DNS_T_CNAME) {"
    },
    {
        "line": 69,
        "fullcodeline": "if (type == DNS_T_NS) {"
    },
    {
        "line": 74,
        "fullcodeline": "if (type == DNS_T_PTR) {"
    },
    {
        "line": 78,
        "fullcodeline": "if (n < 0) {"
    },
    {
        "line": 102,
        "fullcodeline": "int l1 = 0, l2 = 0;"
    },
    {
        "line": 103,
        "fullcodeline": "zval *entries = NULL;"
    },
    {
        "line": 105,
        "fullcodeline": "add_assoc_string(*subarray, \"type\", \"TXT\", 1);"
    },
    {
        "line": 106,
        "fullcodeline": "tp = emalloc(dlen + 1);"
    },
    {
        "line": 108,
        "fullcodeline": "MAKE_STD_ZVAL(entries);"
    },
    {
        "line": 109,
        "fullcodeline": "array_init(entries);"
    },
    {
        "line": 124,
        "fullcodeline": "tp[l2] = '\\0';"
    },
    {
        "line": 125,
        "fullcodeline": "cp += dlen;"
    },
    {
        "line": 127,
        "fullcodeline": "add_assoc_stringl(*subarray, \"txt\", tp, l2, 0);"
    },
    {
        "line": 134,
        "fullcodeline": "if (n < 0) {"
    },
    {
        "line": 140,
        "fullcodeline": "if (n < 0) {"
    },
    {
        "line": 145,
        "fullcodeline": "CHECKCP(5*4);"
    },
    {
        "line": 159,
        "fullcodeline": "CHECKCP(8*2);"
    },
    {
        "line": 160,
        "fullcodeline": "for(i=0; i < 8; i++) {"
    },
    {
        "line": 199,
        "fullcodeline": "if (n > 15) {"
    },
    {
        "line": 229,
        "fullcodeline": "for (i = (n + 8) / 16; i < 8; i++) {"
    },
    {
        "line": 259,
        "fullcodeline": "if (cp < p + dlen) {"
    },
    {
        "line": 269,
        "fullcodeline": "CHECKCP(3*2);"
    },
    {
        "line": 278,
        "fullcodeline": "if (n < 0) {"
    },
    {
        "line": 285,
        "fullcodeline": "CHECKCP(2*2);"
    },
    {
        "line": 314,
        "fullcodeline": "if (n < 0) {"
    },
    {
        "line": 65,
        "fullcodeline": "add_assoc_string(*subarray, \"type\", \"CNAME\", 1);"
    },
    {
        "line": 70,
        "fullcodeline": "add_assoc_string(*subarray, \"type\", \"NS\", 1);"
    },
    {
        "line": 75,
        "fullcodeline": "add_assoc_string(*subarray, \"type\", \"PTR\", 1);"
    },
    {
        "line": 111,
        "fullcodeline": "while (l1 < dlen) {"
    },
    {
        "line": 161,
        "fullcodeline": "GETSHORT(s, cp);"
    },
    {
        "line": 184,
        "fullcodeline": "tp[0] = ':';"
    },
    {
        "line": 200,
        "fullcodeline": "have_v6_break = 1;"
    },
    {
        "line": 201,
        "fullcodeline": "in_v6_break = 1;"
    },
    {
        "line": 202,
        "fullcodeline": "tp[0] = ':';"
    },
    {
        "line": 203,
        "fullcodeline": "tp++;"
    },
    {
        "line": 205,
        "fullcodeline": "if (n % 16 > 8) {"
    },
    {
        "line": 227,
        "fullcodeline": "cp++;"
    },
    {
        "line": 231,
        "fullcodeline": "GETSHORT(s, cp);"
    },
    {
        "line": 254,
        "fullcodeline": "tp[0] = ':';"
    },
    {
        "line": 260,
        "fullcodeline": "n = dn_expand(answer->qb2, end, cp, name, (sizeof name) - 2);"
    },
    {
        "line": 264,
        "fullcodeline": "cp += n;"
    },
    {
        "line": 112,
        "fullcodeline": "n = cp[l1];"
    },
    {
        "line": 121,
        "fullcodeline": "l1 = l1 + n + 1;"
    },
    {
        "line": 122,
        "fullcodeline": "l2 = l2 + n;"
    },
    {
        "line": 162,
        "fullcodeline": "if (s != 0) {"
    },
    {
        "line": 207,
        "fullcodeline": "if (cp[0] != 0) {"
    },
    {
        "line": 232,
        "fullcodeline": "if (s != 0) {"
    },
    {
        "line": 261,
        "fullcodeline": "if (n < 0) {"
    },
    {
        "line": 113,
        "fullcodeline": "if ((l1 + n) >= dlen) {"
    },
    {
        "line": 168,
        "fullcodeline": "tp += sprintf((char*)tp,\"%x\",s);"
    },
    {
        "line": 238,
        "fullcodeline": "tp += sprintf((char*)tp,\"%x\",s);"
    },
    {
        "line": 115,
        "fullcodeline": "n = dlen - (l1 + 1);"
    },
    {
        "line": 118,
        "fullcodeline": "memcpy(tp + l2 , cp + l1 + 1, n);"
    },
    {
        "line": 119,
        "fullcodeline": "add_next_index_stringl(entries, cp + l1 + 1, n, 1);"
    },
    {
        "line": 163,
        "fullcodeline": "if (tp > (u_char *)name) {"
    },
    {
        "line": 208,
        "fullcodeline": "if (tp > (u_char *)name) {"
    },
    {
        "line": 213,
        "fullcodeline": "sprintf((char*)tp, \"%x\", cp[0] & 0xFF);"
    },
    {
        "line": 233,
        "fullcodeline": "if (tp > (u_char *)name) {"
    },
    {
        "line": 164,
        "fullcodeline": "in_v6_break = 0;"
    },
    {
        "line": 165,
        "fullcodeline": "tp[0] = ':';"
    },
    {
        "line": 166,
        "fullcodeline": "tp++;"
    },
    {
        "line": 170,
        "fullcodeline": "if (!have_v6_break) {"
    },
    {
        "line": 209,
        "fullcodeline": "in_v6_break = 0;"
    },
    {
        "line": 210,
        "fullcodeline": "tp[0] = ':';"
    },
    {
        "line": 211,
        "fullcodeline": "tp++;"
    },
    {
        "line": 215,
        "fullcodeline": "if (!have_v6_break) {"
    },
    {
        "line": 234,
        "fullcodeline": "in_v6_break = 0;"
    },
    {
        "line": 235,
        "fullcodeline": "tp[0] = ':';"
    },
    {
        "line": 236,
        "fullcodeline": "tp++;"
    },
    {
        "line": 240,
        "fullcodeline": "if (!have_v6_break) {"
    },
    {
        "line": 171,
        "fullcodeline": "have_v6_break = 1;"
    },
    {
        "line": 172,
        "fullcodeline": "in_v6_break = 1;"
    },
    {
        "line": 173,
        "fullcodeline": "tp[0] = ':';"
    },
    {
        "line": 174,
        "fullcodeline": "tp++;"
    },
    {
        "line": 216,
        "fullcodeline": "have_v6_break = 1;"
    },
    {
        "line": 217,
        "fullcodeline": "in_v6_break = 1;"
    },
    {
        "line": 218,
        "fullcodeline": "tp[0] = ':';"
    },
    {
        "line": 219,
        "fullcodeline": "tp++;"
    },
    {
        "line": 241,
        "fullcodeline": "have_v6_break = 1;"
    },
    {
        "line": 242,
        "fullcodeline": "in_v6_break = 1;"
    },
    {
        "line": 243,
        "fullcodeline": "tp[0] = ':';"
    },
    {
        "line": 244,
        "fullcodeline": "tp++;"
    },
    {
        "line": 175,
        "fullcodeline": "} else if (!in_v6_break) {"
    },
    {
        "line": 220,
        "fullcodeline": "} else if (!in_v6_break) {"
    },
    {
        "line": 245,
        "fullcodeline": "} else if (!in_v6_break) {"
    },
    {
        "line": 176,
        "fullcodeline": "tp[0] = ':';"
    },
    {
        "line": 177,
        "fullcodeline": "tp++;"
    },
    {
        "line": 178,
        "fullcodeline": "tp[0] = '0';"
    },
    {
        "line": 179,
        "fullcodeline": "tp++;"
    },
    {
        "line": 221,
        "fullcodeline": "tp[0] = ':';"
    },
    {
        "line": 222,
        "fullcodeline": "tp++;"
    },
    {
        "line": 223,
        "fullcodeline": "tp[0] = '0';"
    },
    {
        "line": 224,
        "fullcodeline": "tp++;"
    },
    {
        "line": 246,
        "fullcodeline": "tp[0] = ':';"
    },
    {
        "line": 247,
        "fullcodeline": "tp++;"
    },
    {
        "line": 248,
        "fullcodeline": "tp[0] = '0';"
    },
    {
        "line": 249,
        "fullcodeline": "tp++;"
    }
]