[
    {
        "line": 6,
        "fullcodeline": "Mutex::Locker l(mds_lock);"
    },
    {
        "line": 31,
        "fullcodeline": "RotatingKeyRing *keys = monc->rotating_secrets.get();"
    },
    {
        "line": 10,
        "fullcodeline": "if (beacon.get_want_state() == CEPH_MDS_STATE_DNE)"
    },
    {
        "line": 21,
        "fullcodeline": "if (!authorize_handler) {"
    },
    {
        "line": 16,
        "fullcodeline": "authorize_handler = authorize_handler_cluster_registry->get_handler(protocol);"
    },
    {
        "line": 19,
        "fullcodeline": "authorize_handler = authorize_handler_service_registry->get_handler(protocol);"
    },
    {
        "line": 49,
        "fullcodeline": "Session *s = NULL;"
    },
    {
        "line": 22,
        "fullcodeline": "dout(0) << \"No AuthAuthorizeHandler found for protocol \" << protocol << dendl;"
    },
    {
        "line": 33,
        "fullcodeline": "is_valid = authorize_handler->verify_authorizer("
    },
    {
        "line": 38,
        "fullcodeline": "dout(10) << __func__ << \" no rotating_keys (yet), denied\" << dendl;"
    },
    {
        "line": 43,
        "fullcodeline": "entity_name_t n(con->get_peer_type(), global_id);"
    },
    {
        "line": 59,
        "fullcodeline": "if (!s) {"
    },
    {
        "line": 53,
        "fullcodeline": "s = mds_rank->sessionmap.get_session(n);"
    },
    {
        "line": 60,
        "fullcodeline": "s = new Session;"
    },
    {
        "line": 64,
        "fullcodeline": "dout(10) << \" new session \" << s << \" for \" << s->info.inst << \" con \" << con << dendl;"
    },
    {
        "line": 65,
        "fullcodeline": "con->set_priv(s);"
    },
    {
        "line": 62,
        "fullcodeline": "s->info.inst.addr = con->get_peer_addr();"
    },
    {
        "line": 68,
        "fullcodeline": "dout(10) << \" existing session \" << s << \" for \" << s->info.inst << \" existing con \" << s->connection"
    },
    {
        "line": 91,
        "fullcodeline": "bufferlist::iterator p = caps_info.caps.begin();"
    },
    {
        "line": 70,
        "fullcodeline": "con->set_priv(s->get());"
    },
    {
        "line": 94,
        "fullcodeline": "::decode(auth_cap_str, p);"
    },
    {
        "line": 96,
        "fullcodeline": "dout(10) << __func__ << \": parsing auth_cap_str='\" << auth_cap_str << \"'\" << dendl;"
    },
    {
        "line": 98,
        "fullcodeline": "if (!s->auth_caps.parse(g_ceph_context, auth_cap_str, &errstr)) {"
    },
    {
        "line": 99,
        "fullcodeline": "dout(1) << __func__ << \": auth cap parse error: \" << errstr.str()"
    },
    {
        "line": 109,
        "fullcodeline": "dout(1) << __func__ << \": cannot decode auth caps bl of length \" << caps_info.caps.length() << dendl;"
    },
    {
        "line": 101,
        "fullcodeline": "clog->warn() << name << \" mds cap '\" << auth_cap_str"
    },
    {
        "line": 102,
        "fullcodeline": "<< \"' does not parse: \" << errstr.str();"
    }
]