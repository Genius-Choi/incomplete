[
    {
        "line": 3,
        "fullcodeline": "bl = base_bl;"
    },
    {
        "line": 6,
        "fullcodeline": "msg.nonce = nonce;"
    },
    {
        "line": 8,
        "fullcodeline": "auto p = challenge.begin();"
    },
    {
        "line": 9,
        "fullcodeline": "if (!p.end()) {"
    },
    {
        "line": 23,
        "fullcodeline": "if (encode_encrypt(cct, msg, session_key, bl, error)) {"
    },
    {
        "line": 12,
        "fullcodeline": "decode_decrypt_enc_bl(cct, ch, session_key, challenge, error);"
    },
    {
        "line": 18,
        "fullcodeline": "msg.have_challenge = true;"
    },
    {
        "line": 19,
        "fullcodeline": "msg.server_challenge_plus_one = ch.server_challenge + 1;"
    },
    {
        "line": 24,
        "fullcodeline": "ldout(cct, 0) << __func__ << \" failed to encrypt authorizer: \" << error << dendl;"
    },
    {
        "line": 13,
        "fullcodeline": "if (!error.empty()) {"
    },
    {
        "line": 14,
        "fullcodeline": "ldout(cct, 0) << \"failed to decrypt challenge (\" << challenge.length() << \" bytes): \""
    }
]