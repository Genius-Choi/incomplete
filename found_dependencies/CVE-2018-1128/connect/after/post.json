[
    {
        "line": 3,
        "fullcodeline": "bool got_bad_auth = false;"
    },
    {
        "line": 5,
        "fullcodeline": "ldout(msgr->cct,10) << \"connect \" << connect_seq << dendl;"
    },
    {
        "line": 6,
        "fullcodeline": "assert(pipe_lock.is_locked());"
    },
    {
        "line": 8,
        "fullcodeline": "__u32 cseq = connect_seq;"
    },
    {
        "line": 9,
        "fullcodeline": "__u32 gseq = msgr->get_global_seq();"
    },
    {
        "line": 12,
        "fullcodeline": "join_reader();"
    },
    {
        "line": 14,
        "fullcodeline": "pipe_lock.Unlock();"
    },
    {
        "line": 16,
        "fullcodeline": "char tag = -1;"
    },
    {
        "line": 17,
        "fullcodeline": "int rc = -1;"
    },
    {
        "line": 19,
        "fullcodeline": "struct iovec msgvec[2];"
    },
    {
        "line": 21,
        "fullcodeline": "char banner[strlen(CEPH_BANNER) + 1];  // extra byte makes coverity happy"
    },
    {
        "line": 24,
        "fullcodeline": "AuthAuthorizer *authorizer = NULL;"
    },
    {
        "line": 33,
        "fullcodeline": "sd = ::socket(peer_addr.get_family(), SOCK_STREAM, 0);"
    },
    {
        "line": 40,
        "fullcodeline": "recv_reset();"
    },
    {
        "line": 42,
        "fullcodeline": "set_socket_options();"
    },
    {
        "line": 57,
        "fullcodeline": "ldout(msgr->cct,10) << \"connecting to \" << peer_addr << dendl;"
    },
    {
        "line": 58,
        "fullcodeline": "rc = ::connect(sd, peer_addr.get_sockaddr(), peer_addr.get_sockaddr_len());"
    },
    {
        "line": 72,
        "fullcodeline": "rc = tcp_read((char*)&banner, strlen(CEPH_BANNER));"
    },
    {
        "line": 82,
        "fullcodeline": "memset(&msg, 0, sizeof(msg));"
    },
    {
        "line": 83,
        "fullcodeline": "msgvec[0].iov_base = banner;"
    },
    {
        "line": 84,
        "fullcodeline": "msgvec[0].iov_len = strlen(CEPH_BANNER);"
    },
    {
        "line": 85,
        "fullcodeline": "msg.msg_iov = msgvec;"
    },
    {
        "line": 86,
        "fullcodeline": "msg.msg_iovlen = 1;"
    },
    {
        "line": 88,
        "fullcodeline": "rc = do_sendmsg(&msg, msglen);"
    },
    {
        "line": 104,
        "fullcodeline": "rc = tcp_read(addrbl.c_str(), addrbl.length());"
    },
    {
        "line": 119,
        "fullcodeline": "port = peer_addr_for_me.get_port();"
    },
    {
        "line": 121,
        "fullcodeline": "ldout(msgr->cct,20) << \"connect read peer addr \" << paddr << \" on socket \" << sd << dendl;"
    },
    {
        "line": 135,
        "fullcodeline": "ldout(msgr->cct,20) << \"connect peer addr for me is \" << peer_addr_for_me << dendl;"
    },
    {
        "line": 137,
        "fullcodeline": "msgr->learned_addr(peer_addr_for_me);"
    },
    {
        "line": 139,
        "fullcodeline": "::encode(msgr->my_inst.addr, myaddrbl, 0);  // legacy"
    },
    {
        "line": 141,
        "fullcodeline": "memset(&msg, 0, sizeof(msg));"
    },
    {
        "line": 142,
        "fullcodeline": "msgvec[0].iov_base = myaddrbl.c_str();"
    },
    {
        "line": 143,
        "fullcodeline": "msgvec[0].iov_len = myaddrbl.length();"
    },
    {
        "line": 144,
        "fullcodeline": "msg.msg_iov = msgvec;"
    },
    {
        "line": 145,
        "fullcodeline": "msg.msg_iovlen = 1;"
    },
    {
        "line": 147,
        "fullcodeline": "rc = do_sendmsg(&msg, msglen);"
    },
    {
        "line": 152,
        "fullcodeline": "ldout(msgr->cct,10) << \"connect sent my addr \" << msgr->my_inst.addr << dendl;"
    },
    {
        "line": 390,
        "fullcodeline": "pipe_lock.Lock();"
    },
    {
        "line": 399,
        "fullcodeline": "delete authorizer;"
    },
    {
        "line": 29,
        "fullcodeline": "if (sd >= 0)"
    },
    {
        "line": 34,
        "fullcodeline": "if (sd < 0) {"
    },
    {
        "line": 45,
        "fullcodeline": "entity_addr_t addr2bind = msgr->get_myaddr();"
    },
    {
        "line": 59,
        "fullcodeline": "if (rc < 0) {"
    },
    {
        "line": 73,
        "fullcodeline": "if (rc < 0) {"
    },
    {
        "line": 77,
        "fullcodeline": "if (memcmp(banner, CEPH_BANNER, strlen(CEPH_BANNER))) {"
    },
    {
        "line": 89,
        "fullcodeline": "if (rc < 0) {"
    },
    {
        "line": 99,
        "fullcodeline": "int wirelen = sizeof(__u32) * 2 + sizeof(ceph_sockaddr_storage);"
    },
    {
        "line": 100,
        "fullcodeline": "bufferptr p(wirelen * 2);"
    },
    {
        "line": 102,
        "fullcodeline": "addrbl.push_back(std::move(p));"
    },
    {
        "line": 105,
        "fullcodeline": "if (rc < 0) {"
    },
    {
        "line": 122,
        "fullcodeline": "if (peer_addr != paddr) {"
    },
    {
        "line": 148,
        "fullcodeline": "if (rc < 0) {"
    },
    {
        "line": 392,
        "fullcodeline": "if (state == STATE_CONNECTING)"
    },
    {
        "line": 35,
        "fullcodeline": "rc = -errno;"
    },
    {
        "line": 36,
        "fullcodeline": "lderr(msgr->cct) << \"connect couldn't create socket \" << cpp_strerror(rc) << dendl;"
    },
    {
        "line": 46,
        "fullcodeline": "if (msgr->cct->_conf->ms_bind_before_connect && (!addr2bind.is_blank_ip())) {"
    },
    {
        "line": 60,
        "fullcodeline": "int stored_errno = errno;"
    },
    {
        "line": 61,
        "fullcodeline": "ldout(msgr->cct,2) << \"connect error \" << peer_addr"
    },
    {
        "line": 74,
        "fullcodeline": "ldout(msgr->cct,2) << \"connect couldn't read banner, \" << cpp_strerror(rc) << dendl;"
    },
    {
        "line": 78,
        "fullcodeline": "ldout(msgr->cct,0) << \"connect protocol error (bad banner) on peer \" << peer_addr << dendl;"
    },
    {
        "line": 90,
        "fullcodeline": "ldout(msgr->cct,2) << \"connect couldn't write my banner, \" << cpp_strerror(rc) << dendl;"
    },
    {
        "line": 106,
        "fullcodeline": "ldout(msgr->cct,2) << \"connect couldn't read peer addrs, \" << cpp_strerror(rc) << dendl;"
    },
    {
        "line": 110,
        "fullcodeline": "bufferlist::iterator p = addrbl.begin();"
    },
    {
        "line": 111,
        "fullcodeline": "::decode(paddr, p);"
    },
    {
        "line": 112,
        "fullcodeline": "::decode(peer_addr_for_me, p);"
    },
    {
        "line": 149,
        "fullcodeline": "ldout(msgr->cct,2) << \"connect couldn't write my addr, \" << cpp_strerror(rc) << dendl;"
    },
    {
        "line": 163,
        "fullcodeline": "connect.host_type = msgr->get_myinst().name.type();"
    },
    {
        "line": 164,
        "fullcodeline": "connect.global_seq = gseq;"
    },
    {
        "line": 165,
        "fullcodeline": "connect.connect_seq = cseq;"
    },
    {
        "line": 166,
        "fullcodeline": "connect.protocol_version = msgr->get_proto_version(peer_type, true);"
    },
    {
        "line": 167,
        "fullcodeline": "connect.authorizer_protocol = authorizer ? authorizer->protocol : 0;"
    },
    {
        "line": 168,
        "fullcodeline": "connect.authorizer_len = authorizer ? authorizer->bl.length() : 0;"
    },
    {
        "line": 172,
        "fullcodeline": "connect.flags = 0;"
    },
    {
        "line": 175,
        "fullcodeline": "memset(&msg, 0, sizeof(msg));"
    },
    {
        "line": 176,
        "fullcodeline": "msgvec[0].iov_base = (char*)&connect;"
    },
    {
        "line": 178,
        "fullcodeline": "msg.msg_iov = msgvec;"
    },
    {
        "line": 179,
        "fullcodeline": "msg.msg_iovlen = 1;"
    },
    {
        "line": 188,
        "fullcodeline": "ldout(msgr->cct,10) << \"connect sending gseq=\" << gseq << \" cseq=\" << cseq"
    },
    {
        "line": 190,
        "fullcodeline": "rc = do_sendmsg(&msg, msglen);"
    },
    {
        "line": 196,
        "fullcodeline": "ldout(msgr->cct,20) << \"connect wrote (self +) cseq, waiting for reply\" << dendl;"
    },
    {
        "line": 198,
        "fullcodeline": "rc = tcp_read((char*)&reply, sizeof(reply));"
    },
    {
        "line": 204,
        "fullcodeline": "ldout(msgr->cct,20) << \"connect got reply tag \" << (int)reply.tag"
    },
    {
        "line": 212,
        "fullcodeline": "authorizer_reply.clear();"
    },
    {
        "line": 247,
        "fullcodeline": "pipe_lock.Lock();"
    },
    {
        "line": 378,
        "fullcodeline": "ldout(msgr->cct,0) << \"connect got bad tag \" << (int)tag << dendl;"
    },
    {
        "line": 384,
        "fullcodeline": "ldout(msgr->cct, 10) << \" sleep for \" << msgr->cct->_conf->ms_inject_internal_delays << dendl;"
    },
    {
        "line": 386,
        "fullcodeline": "t.set_from_double(msgr->cct->_conf->ms_inject_internal_delays);"
    },
    {
        "line": 387,
        "fullcodeline": "t.sleep();"
    },
    {
        "line": 393,
        "fullcodeline": "fault();"
    },
    {
        "line": 47,
        "fullcodeline": "addr2bind.set_port(0);"
    },
    {
        "line": 48,
        "fullcodeline": "int r = ::bind(sd , addr2bind.get_sockaddr(), addr2bind.get_sockaddr_len());"
    },
    {
        "line": 63,
        "fullcodeline": "if (stored_errno == ECONNREFUSED) {"
    },
    {
        "line": 115,
        "fullcodeline": "ldout(msgr->cct,2) << \"connect couldn't decode peer addrs: \" << e.what()"
    },
    {
        "line": 123,
        "fullcodeline": "if (paddr.is_blank_ip() &&"
    },
    {
        "line": 156,
        "fullcodeline": "if (!authorizer) {"
    },
    {
        "line": 191,
        "fullcodeline": "if (rc < 0) {"
    },
    {
        "line": 199,
        "fullcodeline": "if (rc < 0) {"
    },
    {
        "line": 225,
        "fullcodeline": "if (reply.tag == CEPH_MSGR_TAG_CHALLENGE_AUTHORIZER) {"
    },
    {
        "line": 248,
        "fullcodeline": "if (state != STATE_CONNECTING) {"
    },
    {
        "line": 253,
        "fullcodeline": "if (reply.tag == CEPH_MSGR_TAG_FEATURES) {"
    },
    {
        "line": 261,
        "fullcodeline": "if (reply.tag == CEPH_MSGR_TAG_BADPROTOVER) {"
    },
    {
        "line": 267,
        "fullcodeline": "if (reply.tag == CEPH_MSGR_TAG_BADAUTHORIZER) {"
    },
    {
        "line": 277,
        "fullcodeline": "if (reply.tag == CEPH_MSGR_TAG_RESETSESSION) {"
    },
    {
        "line": 284,
        "fullcodeline": "if (reply.tag == CEPH_MSGR_TAG_RETRY_GLOBAL) {"
    },
    {
        "line": 291,
        "fullcodeline": "if (reply.tag == CEPH_MSGR_TAG_RETRY_SESSION) {"
    },
    {
        "line": 300,
        "fullcodeline": "if (reply.tag == CEPH_MSGR_TAG_WAIT) {"
    },
    {
        "line": 306,
        "fullcodeline": "if (reply.tag == CEPH_MSGR_TAG_READY ||"
    },
    {
        "line": 395,
        "fullcodeline": "ldout(msgr->cct,3) << \"connect fault, but state = \" << get_state_name()"
    },
    {
        "line": 49,
        "fullcodeline": "if (r < 0) {"
    },
    {
        "line": 62,
        "fullcodeline": "<< \", \" << cpp_strerror(stored_errno) << dendl;"
    },
    {
        "line": 64,
        "fullcodeline": "ldout(msgr->cct, 2) << \"connection refused!\" << dendl;"
    },
    {
        "line": 65,
        "fullcodeline": "msgr->dispatch_queue.queue_refused(connection_state.get());"
    },
    {
        "line": 125,
        "fullcodeline": "peer_addr.get_nonce() == paddr.get_nonce()) {"
    },
    {
        "line": 126,
        "fullcodeline": "ldout(msgr->cct,0) << \"connect claims to be \""
    },
    {
        "line": 157,
        "fullcodeline": "authorizer = msgr->get_authorizer(peer_type, false);"
    },
    {
        "line": 170,
        "fullcodeline": "ldout(msgr->cct,10) << \"connect.authorizer_len=\" << connect.authorizer_len"
    },
    {
        "line": 174,
        "fullcodeline": "connect.flags |= CEPH_MSG_CONNECT_LOSSY;  // this is fyi, actually, server decides!"
    },
    {
        "line": 182,
        "fullcodeline": "msgvec[1].iov_base = authorizer->bl.c_str();"
    },
    {
        "line": 183,
        "fullcodeline": "msgvec[1].iov_len = authorizer->bl.length();"
    },
    {
        "line": 184,
        "fullcodeline": "msg.msg_iovlen++;"
    },
    {
        "line": 185,
        "fullcodeline": "msglen += msgvec[1].iov_len;"
    },
    {
        "line": 192,
        "fullcodeline": "ldout(msgr->cct,2) << \"connect couldn't write gseq, cseq, \" << cpp_strerror(rc) << dendl;"
    },
    {
        "line": 200,
        "fullcodeline": "ldout(msgr->cct,2) << \"connect read reply \" << cpp_strerror(rc) << dendl;"
    },
    {
        "line": 215,
        "fullcodeline": "ldout(msgr->cct,10) << \"reply.authorizer_len=\" << reply.authorizer_len << dendl;"
    },
    {
        "line": 216,
        "fullcodeline": "bufferptr bp = buffer::create(reply.authorizer_len);"
    },
    {
        "line": 217,
        "fullcodeline": "rc = tcp_read(bp.c_str(), reply.authorizer_len);"
    },
    {
        "line": 222,
        "fullcodeline": "authorizer_reply.push_back(bp);"
    },
    {
        "line": 226,
        "fullcodeline": "authorizer->add_challenge(msgr->cct, authorizer_reply);"
    },
    {
        "line": 227,
        "fullcodeline": "ldout(msgr->cct,10) << \" got authorizer challenge, \" << authorizer_reply.length()"
    },
    {
        "line": 233,
        "fullcodeline": "bufferlist::iterator iter = authorizer_reply.begin();"
    },
    {
        "line": 241,
        "fullcodeline": "ldout(msgr->cct, 10) << \" sleep for \" << msgr->cct->_conf->ms_inject_internal_delays << dendl;"
    },
    {
        "line": 243,
        "fullcodeline": "t.set_from_double(msgr->cct->_conf->ms_inject_internal_delays);"
    },
    {
        "line": 244,
        "fullcodeline": "t.sleep();"
    },
    {
        "line": 249,
        "fullcodeline": "ldout(msgr->cct,0) << \"connect got RESETSESSION but no longer connecting\" << dendl;"
    },
    {
        "line": 254,
        "fullcodeline": "ldout(msgr->cct,0) << \"connect protocol feature mismatch, my \" << std::hex"
    },
    {
        "line": 262,
        "fullcodeline": "ldout(msgr->cct,0) << \"connect protocol version mismatch, my \" << connect.protocol_version"
    },
    {
        "line": 268,
        "fullcodeline": "ldout(msgr->cct,0) << \"connect got BADAUTHORIZER\" << dendl;"
    },
    {
        "line": 271,
        "fullcodeline": "got_bad_auth = true;"
    },
    {
        "line": 272,
        "fullcodeline": "pipe_lock.Unlock();"
    },
    {
        "line": 273,
        "fullcodeline": "delete authorizer;"
    },
    {
        "line": 274,
        "fullcodeline": "authorizer = msgr->get_authorizer(peer_type, true);  // try harder"
    },
    {
        "line": 278,
        "fullcodeline": "ldout(msgr->cct,0) << \"connect got RESETSESSION\" << dendl;"
    },
    {
        "line": 279,
        "fullcodeline": "was_session_reset();"
    },
    {
        "line": 280,
        "fullcodeline": "cseq = 0;"
    },
    {
        "line": 281,
        "fullcodeline": "pipe_lock.Unlock();"
    },
    {
        "line": 285,
        "fullcodeline": "gseq = msgr->get_global_seq(reply.global_seq);"
    },
    {
        "line": 286,
        "fullcodeline": "ldout(msgr->cct,10) << \"connect got RETRY_GLOBAL \" << reply.global_seq"
    },
    {
        "line": 288,
        "fullcodeline": "pipe_lock.Unlock();"
    },
    {
        "line": 292,
        "fullcodeline": "assert(reply.connect_seq > connect_seq);"
    },
    {
        "line": 293,
        "fullcodeline": "ldout(msgr->cct,10) << \"connect got RETRY_SESSION \" << connect_seq"
    },
    {
        "line": 295,
        "fullcodeline": "cseq = connect_seq = reply.connect_seq;"
    },
    {
        "line": 296,
        "fullcodeline": "pipe_lock.Unlock();"
    },
    {
        "line": 301,
        "fullcodeline": "ldout(msgr->cct,3) << \"connect got WAIT (connection race)\" << dendl;"
    },
    {
        "line": 302,
        "fullcodeline": "state = STATE_WAIT;"
    },
    {
        "line": 307,
        "fullcodeline": "reply.tag == CEPH_MSGR_TAG_SEQ) {"
    },
    {
        "line": 308,
        "fullcodeline": "uint64_t feat_missing = policy.features_required & ~(uint64_t)reply.features;"
    },
    {
        "line": 340,
        "fullcodeline": "peer_global_seq = reply.global_seq;"
    },
    {
        "line": 341,
        "fullcodeline": "policy.lossy = reply.flags & CEPH_MSG_CONNECT_LOSSY;"
    },
    {
        "line": 342,
        "fullcodeline": "state = STATE_OPEN;"
    },
    {
        "line": 343,
        "fullcodeline": "connect_seq = cseq + 1;"
    },
    {
        "line": 344,
        "fullcodeline": "assert(connect_seq == reply.connect_seq);"
    },
    {
        "line": 345,
        "fullcodeline": "backoff = utime_t();"
    },
    {
        "line": 346,
        "fullcodeline": "connection_state->set_features((uint64_t)reply.features & (uint64_t)connect.features);"
    },
    {
        "line": 347,
        "fullcodeline": "ldout(msgr->cct,10) << \"connect success \" << connect_seq << \", lossy = \" << policy.lossy"
    },
    {
        "line": 365,
        "fullcodeline": "msgr->dispatch_queue.queue_connect(connection_state.get());"
    },
    {
        "line": 366,
        "fullcodeline": "msgr->ms_deliver_handle_fast_connect(connection_state.get());"
    },
    {
        "line": 372,
        "fullcodeline": "maybe_start_delay_thread();"
    },
    {
        "line": 373,
        "fullcodeline": "delete authorizer;"
    },
    {
        "line": 50,
        "fullcodeline": "ldout(msgr->cct,2) << \"client bind error \" << \", \" << cpp_strerror(errno) << dendl;"
    },
    {
        "line": 124,
        "fullcodeline": "peer_addr.get_port() == paddr.get_port() &&"
    },
    {
        "line": 129,
        "fullcodeline": "ldout(msgr->cct,10) << \"connect claims to be \""
    },
    {
        "line": 218,
        "fullcodeline": "if (rc < 0) {"
    },
    {
        "line": 234,
        "fullcodeline": "if (!authorizer->verify_reply(iter)) {"
    },
    {
        "line": 314,
        "fullcodeline": "if (reply.tag == CEPH_MSGR_TAG_SEQ) {"
    },
    {
        "line": 354,
        "fullcodeline": "if (authorizer != NULL) {"
    },
    {
        "line": 368,
        "fullcodeline": "if (!reader_running) {"
    },
    {
        "line": 219,
        "fullcodeline": "ldout(msgr->cct,10) << \"connect couldn't read connect authorizer_reply\" << cpp_strerror(rc) << dendl;"
    },
    {
        "line": 235,
        "fullcodeline": "ldout(msgr->cct,0) << \"failed verifying authorize reply\" << dendl;"
    },
    {
        "line": 310,
        "fullcodeline": "ldout(msgr->cct,1) << \"missing required features \" << std::hex << feat_missing << std::dec << dendl;"
    },
    {
        "line": 315,
        "fullcodeline": "ldout(msgr->cct,10) << \"got CEPH_MSGR_TAG_SEQ, reading acked_seq and writing in_seq\" << dendl;"
    },
    {
        "line": 316,
        "fullcodeline": "uint64_t newly_acked_seq = 0;"
    },
    {
        "line": 317,
        "fullcodeline": "rc = tcp_read((char*)&newly_acked_seq, sizeof(newly_acked_seq));"
    },
    {
        "line": 322,
        "fullcodeline": "ldout(msgr->cct,2) << \" got newly_acked_seq \" << newly_acked_seq"
    },
    {
        "line": 348,
        "fullcodeline": "<< \", features \" << connection_state->get_features() << dendl;"
    },
    {
        "line": 355,
        "fullcodeline": "session_security.reset("
    },
    {
        "line": 369,
        "fullcodeline": "ldout(msgr->cct,20) << \"connect starting reader\" << dendl;"
    },
    {
        "line": 370,
        "fullcodeline": "start_reader();"
    },
    {
        "line": 256,
        "fullcodeline": "<< \" missing \" << (reply.features & ~policy.features_supported)"
    },
    {
        "line": 318,
        "fullcodeline": "if (rc < 0) {"
    },
    {
        "line": 324,
        "fullcodeline": "while (newly_acked_seq > out_seq) {"
    },
    {
        "line": 333,
        "fullcodeline": "if (tcp_write((char*)&in_seq, sizeof(in_seq)) < 0) {"
    },
    {
        "line": 356,
        "fullcodeline": "get_auth_session_handler(msgr->cct,"
    },
    {
        "line": 362,
        "fullcodeline": "session_security.reset();"
    },
    {
        "line": 319,
        "fullcodeline": "ldout(msgr->cct,2) << \"connect read error on newly_acked_seq\" << cpp_strerror(rc) << dendl;"
    },
    {
        "line": 325,
        "fullcodeline": "Message *m = _get_next_outgoing();"
    },
    {
        "line": 326,
        "fullcodeline": "assert(m);"
    },
    {
        "line": 327,
        "fullcodeline": "ldout(msgr->cct,2) << \" discarding previously sent \" << m->get_seq()"
    },
    {
        "line": 329,
        "fullcodeline": "assert(m->get_seq() <= newly_acked_seq);"
    },
    {
        "line": 330,
        "fullcodeline": "m->put();"
    },
    {
        "line": 331,
        "fullcodeline": "++out_seq;"
    },
    {
        "line": 334,
        "fullcodeline": "ldout(msgr->cct,2) << \"connect write error on in_seq\" << dendl;"
    },
    {
        "line": 359,
        "fullcodeline": "connection_state->get_features()));"
    }
]