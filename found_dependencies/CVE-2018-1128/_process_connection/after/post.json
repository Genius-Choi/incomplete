[
    {
        "line": 3,
        "fullcodeline": "ssize_t r = 0;"
    },
    {
        "line": 538,
        "fullcodeline": "ldout(async_msgr->cct, 10) << \"accept fault after register\" << dendl;"
    },
    {
        "line": 539,
        "fullcodeline": "inject_delay();"
    },
    {
        "line": 542,
        "fullcodeline": "return -1;"
    },
    {
        "line": 8,
        "fullcodeline": "std::lock_guard<std::mutex> l(write_lock);"
    },
    {
        "line": 19,
        "fullcodeline": "assert(!policy.server);"
    },
    {
        "line": 22,
        "fullcodeline": "got_bad_auth = false;"
    },
    {
        "line": 23,
        "fullcodeline": "delete authorizer;"
    },
    {
        "line": 24,
        "fullcodeline": "authorizer = NULL;"
    },
    {
        "line": 25,
        "fullcodeline": "authorizer_buf.clear();"
    },
    {
        "line": 26,
        "fullcodeline": "memset(&connect_msg, 0, sizeof(connect_msg));"
    },
    {
        "line": 27,
        "fullcodeline": "memset(&connect_reply, 0, sizeof(connect_reply));"
    },
    {
        "line": 29,
        "fullcodeline": "global_seq = async_msgr->get_global_seq();"
    },
    {
        "line": 37,
        "fullcodeline": "opts.priority = async_msgr->get_socket_priority();"
    },
    {
        "line": 38,
        "fullcodeline": "opts.connect_bind_addr = msgr->get_myaddr();"
    },
    {
        "line": 39,
        "fullcodeline": "r = worker->connect(get_peer_addr(), opts, &cs);"
    },
    {
        "line": 43,
        "fullcodeline": "center->create_file_event(cs.fd(), EVENT_READABLE, read_handler);"
    },
    {
        "line": 44,
        "fullcodeline": "state = STATE_CONNECTING_RE;"
    },
    {
        "line": 50,
        "fullcodeline": "r = cs.is_connected();"
    },
    {
        "line": 65,
        "fullcodeline": "center->delete_file_event(cs.fd(), EVENT_WRITABLE);"
    },
    {
        "line": 66,
        "fullcodeline": "ldout(async_msgr->cct, 10) << __func__ << \" connect successfully, ready to send banner\" << dendl;"
    },
    {
        "line": 69,
        "fullcodeline": "bl.append(CEPH_BANNER, strlen(CEPH_BANNER));"
    },
    {
        "line": 70,
        "fullcodeline": "r = try_send(bl);"
    },
    {
        "line": 91,
        "fullcodeline": "unsigned banner_len = strlen(CEPH_BANNER);"
    },
    {
        "line": 92,
        "fullcodeline": "unsigned need_len = banner_len + sizeof(ceph_entity_addr)*2;"
    },
    {
        "line": 93,
        "fullcodeline": "r = read_until(need_len, state_buffer);"
    },
    {
        "line": 108,
        "fullcodeline": "bl.append(state_buffer+banner_len, sizeof(ceph_entity_addr)*2);"
    },
    {
        "line": 109,
        "fullcodeline": "bufferlist::iterator p = bl.begin();"
    },
    {
        "line": 117,
        "fullcodeline": "ldout(async_msgr->cct, 20) << __func__ <<  \" connect read peer addr \""
    },
    {
        "line": 132,
        "fullcodeline": "ldout(async_msgr->cct, 20) << __func__ << \" connect peer addr for me is \" << peer_addr_for_me << dendl;"
    },
    {
        "line": 133,
        "fullcodeline": "lock.unlock();"
    },
    {
        "line": 134,
        "fullcodeline": "async_msgr->learned_addr(peer_addr_for_me);"
    },
    {
        "line": 146,
        "fullcodeline": "lock.lock();"
    },
    {
        "line": 153,
        "fullcodeline": "::encode(async_msgr->get_myaddr(), myaddrbl, 0); // legacy"
    },
    {
        "line": 154,
        "fullcodeline": "r = try_send(myaddrbl);"
    },
    {
        "line": 181,
        "fullcodeline": "connect_msg.host_type = async_msgr->get_myinst().name.type();"
    },
    {
        "line": 182,
        "fullcodeline": "connect_msg.global_seq = global_seq;"
    },
    {
        "line": 183,
        "fullcodeline": "connect_msg.connect_seq = connect_seq;"
    },
    {
        "line": 184,
        "fullcodeline": "connect_msg.protocol_version = async_msgr->get_proto_version(peer_type, true);"
    },
    {
        "line": 185,
        "fullcodeline": "connect_msg.authorizer_protocol = authorizer ? authorizer->protocol : 0;"
    },
    {
        "line": 186,
        "fullcodeline": "connect_msg.authorizer_len = authorizer ? authorizer->bl.length() : 0;"
    },
    {
        "line": 191,
        "fullcodeline": "connect_msg.flags = 0;"
    },
    {
        "line": 194,
        "fullcodeline": "bl.append((char*)&connect_msg, sizeof(connect_msg));"
    },
    {
        "line": 198,
        "fullcodeline": "ldout(async_msgr->cct, 10) << __func__ << \" connect sending gseq=\" << global_seq << \" cseq=\""
    },
    {
        "line": 201,
        "fullcodeline": "r = try_send(bl);"
    },
    {
        "line": 220,
        "fullcodeline": "r = read_until(sizeof(connect_reply), state_buffer);"
    },
    {
        "line": 230,
        "fullcodeline": "ldout(async_msgr->cct, 20) << __func__ << \" connect got reply tag \" << (int)connect_reply.tag"
    },
    {
        "line": 235,
        "fullcodeline": "state = STATE_CONNECTING_WAIT_CONNECT_REPLY_AUTH;"
    },
    {
        "line": 269,
        "fullcodeline": "r = handle_connect_reply(connect_msg, connect_reply);"
    },
    {
        "line": 274,
        "fullcodeline": "assert(state != STATE_CONNECTING_WAIT_CONNECT_REPLY_AUTH);"
    },
    {
        "line": 280,
        "fullcodeline": "uint64_t newly_acked_seq = 0;"
    },
    {
        "line": 282,
        "fullcodeline": "r = read_until(sizeof(newly_acked_seq), state_buffer);"
    },
    {
        "line": 291,
        "fullcodeline": "ldout(async_msgr->cct, 2) << __func__ << \" got newly_acked_seq \" << newly_acked_seq"
    },
    {
        "line": 293,
        "fullcodeline": "discard_requeued_up_to(newly_acked_seq);"
    },
    {
        "line": 305,
        "fullcodeline": "uint64_t s = in_seq;"
    },
    {
        "line": 306,
        "fullcodeline": "bl.append((char*)&s, sizeof(s));"
    },
    {
        "line": 307,
        "fullcodeline": "r = try_send(bl);"
    },
    {
        "line": 325,
        "fullcodeline": "policy.lossy = connect_reply.flags & CEPH_MSG_CONNECT_LOSSY;"
    },
    {
        "line": 326,
        "fullcodeline": "state = STATE_OPEN;"
    },
    {
        "line": 327,
        "fullcodeline": "once_ready = true;"
    },
    {
        "line": 328,
        "fullcodeline": "connect_seq += 1;"
    },
    {
        "line": 329,
        "fullcodeline": "assert(connect_seq == connect_reply.connect_seq);"
    },
    {
        "line": 330,
        "fullcodeline": "backoff = utime_t();"
    },
    {
        "line": 331,
        "fullcodeline": "set_features((uint64_t)connect_reply.features & (uint64_t)connect_msg.features);"
    },
    {
        "line": 332,
        "fullcodeline": "ldout(async_msgr->cct, 10) << __func__ << \" connect success \" << connect_seq"
    },
    {
        "line": 351,
        "fullcodeline": "dispatch_queue->queue_connect(this);"
    },
    {
        "line": 352,
        "fullcodeline": "async_msgr->ms_deliver_handle_fast_connect(this);"
    },
    {
        "line": 357,
        "fullcodeline": "last_tick_id = center->create_time_event(inactive_timeout_us, tick_handler);"
    },
    {
        "line": 361,
        "fullcodeline": "write_lock.lock();"
    },
    {
        "line": 365,
        "fullcodeline": "write_lock.unlock();"
    },
    {
        "line": 366,
        "fullcodeline": "maybe_start_delay_thread();"
    },
    {
        "line": 373,
        "fullcodeline": "center->create_file_event(cs.fd(), EVENT_READABLE, read_handler);"
    },
    {
        "line": 375,
        "fullcodeline": "bl.append(CEPH_BANNER, strlen(CEPH_BANNER));"
    },
    {
        "line": 377,
        "fullcodeline": "::encode(async_msgr->get_myaddr(), bl, 0); // legacy"
    },
    {
        "line": 378,
        "fullcodeline": "port = async_msgr->get_myaddr().get_port();"
    },
    {
        "line": 379,
        "fullcodeline": "::encode(socket_addr, bl, 0); // legacy"
    },
    {
        "line": 380,
        "fullcodeline": "ldout(async_msgr->cct, 1) << __func__ << \" sd=\" << cs.fd() << \" \" << socket_addr << dendl;"
    },
    {
        "line": 382,
        "fullcodeline": "r = try_send(bl);"
    },
    {
        "line": 403,
        "fullcodeline": "r = read_until(strlen(CEPH_BANNER) + sizeof(ceph_entity_addr), state_buffer);"
    },
    {
        "line": 417,
        "fullcodeline": "addr_bl.append(state_buffer+strlen(CEPH_BANNER), sizeof(ceph_entity_addr));"
    },
    {
        "line": 423,
        "fullcodeline": "ldout(async_msgr->cct, 10) << __func__ << \" accept peer addr is \" << peer_addr << dendl;"
    },
    {
        "line": 432,
        "fullcodeline": "set_peer_addr(peer_addr);  // so that connection_state gets set up"
    },
    {
        "line": 433,
        "fullcodeline": "state = STATE_ACCEPTING_WAIT_CONNECT_MSG;"
    },
    {
        "line": 439,
        "fullcodeline": "r = read_until(sizeof(connect_msg), state_buffer);"
    },
    {
        "line": 448,
        "fullcodeline": "state = STATE_ACCEPTING_WAIT_CONNECT_MSG_AUTH;"
    },
    {
        "line": 469,
        "fullcodeline": "ldout(async_msgr->cct, 20) << __func__ << \" accept got peer connect_seq \""
    },
    {
        "line": 473,
        "fullcodeline": "policy = async_msgr->get_policy(connect_msg.host_type);"
    },
    {
        "line": 474,
        "fullcodeline": "ldout(async_msgr->cct, 10) << __func__ << \" accept of host_type \" << connect_msg.host_type"
    },
    {
        "line": 479,
        "fullcodeline": "r = handle_connect_msg(connect_msg, authorizer_buf, authorizer_reply);"
    },
    {
        "line": 484,
        "fullcodeline": "assert(state != STATE_ACCEPTING_WAIT_CONNECT_MSG_AUTH);"
    },
    {
        "line": 491,
        "fullcodeline": "r = read_until(sizeof(newly_acked_seq), state_buffer);"
    },
    {
        "line": 500,
        "fullcodeline": "ldout(async_msgr->cct, 2) << __func__ << \" accept get newly_acked_seq \" << newly_acked_seq << dendl;"
    },
    {
        "line": 501,
        "fullcodeline": "discard_requeued_up_to(newly_acked_seq);"
    },
    {
        "line": 502,
        "fullcodeline": "state = STATE_ACCEPTING_READY;"
    },
    {
        "line": 508,
        "fullcodeline": "ldout(async_msgr->cct, 20) << __func__ << \" accept done\" << dendl;"
    },
    {
        "line": 509,
        "fullcodeline": "state = STATE_OPEN;"
    },
    {
        "line": 510,
        "fullcodeline": "memset(&connect_msg, 0, sizeof(connect_msg));"
    },
    {
        "line": 517,
        "fullcodeline": "last_tick_id = center->create_time_event(inactive_timeout_us, tick_handler);"
    },
    {
        "line": 519,
        "fullcodeline": "write_lock.lock();"
    },
    {
        "line": 523,
        "fullcodeline": "write_lock.unlock();"
    },
    {
        "line": 524,
        "fullcodeline": "maybe_start_delay_thread();"
    },
    {
        "line": 530,
        "fullcodeline": "lderr(async_msgr->cct) << __func__ << \" bad state: \" << state << dendl;"
    },
    {
        "line": 531,
        "fullcodeline": "ceph_abort();"
    },
    {
        "line": 9,
        "fullcodeline": "if (!outcoming_bl.length()) {"
    },
    {
        "line": 40,
        "fullcodeline": "if (r < 0)"
    },
    {
        "line": 51,
        "fullcodeline": "if (r < 0) {"
    },
    {
        "line": 71,
        "fullcodeline": "if (r == 0) {"
    },
    {
        "line": 94,
        "fullcodeline": "if (r < 0) {"
    },
    {
        "line": 101,
        "fullcodeline": "if (memcmp(state_buffer, CEPH_BANNER, banner_len)) {"
    },
    {
        "line": 119,
        "fullcodeline": "if (peer_addr != paddr) {"
    },
    {
        "line": 147,
        "fullcodeline": "if (state != STATE_CONNECTING_WAIT_BANNER_AND_IDENTIFY) {"
    },
    {
        "line": 155,
        "fullcodeline": "if (r == 0) {"
    },
    {
        "line": 175,
        "fullcodeline": "if (!authorizer) {"
    },
    {
        "line": 202,
        "fullcodeline": "if (r == 0) {"
    },
    {
        "line": 221,
        "fullcodeline": "if (r < 0) {"
    },
    {
        "line": 270,
        "fullcodeline": "if (r < 0)"
    },
    {
        "line": 283,
        "fullcodeline": "if (r < 0) {"
    },
    {
        "line": 308,
        "fullcodeline": "if (r == 0) {"
    },
    {
        "line": 338,
        "fullcodeline": "if (authorizer != NULL) {"
    },
    {
        "line": 363,
        "fullcodeline": "if (is_queued())"
    },
    {
        "line": 383,
        "fullcodeline": "if (r == 0) {"
    },
    {
        "line": 404,
        "fullcodeline": "if (r < 0) {"
    },
    {
        "line": 411,
        "fullcodeline": "if (memcmp(state_buffer, CEPH_BANNER, strlen(CEPH_BANNER))) {"
    },
    {
        "line": 419,
        "fullcodeline": "bufferlist::iterator ti = addr_bl.begin();"
    },
    {
        "line": 420,
        "fullcodeline": "::decode(peer_addr, ti);"
    },
    {
        "line": 424,
        "fullcodeline": "if (peer_addr.is_blank_ip()) {"
    },
    {
        "line": 440,
        "fullcodeline": "if (r < 0) {"
    },
    {
        "line": 480,
        "fullcodeline": "if (r < 0)"
    },
    {
        "line": 492,
        "fullcodeline": "if (r < 0) {"
    },
    {
        "line": 521,
        "fullcodeline": "if (is_queued())"
    },
    {
        "line": 11,
        "fullcodeline": "state = state_after_send;"
    },
    {
        "line": 12,
        "fullcodeline": "state_after_send = STATE_NONE;"
    },
    {
        "line": 32,
        "fullcodeline": "center->delete_file_event(cs.fd(), EVENT_READABLE|EVENT_WRITABLE);"
    },
    {
        "line": 33,
        "fullcodeline": "cs.close();"
    },
    {
        "line": 52,
        "fullcodeline": "ldout(async_msgr->cct, 1) << __func__ << \" reconnect failed \" << dendl;"
    },
    {
        "line": 72,
        "fullcodeline": "state = STATE_CONNECTING_WAIT_BANNER_AND_IDENTIFY;"
    },
    {
        "line": 73,
        "fullcodeline": "ldout(async_msgr->cct, 10) << __func__ << \" connect write banner done: \""
    },
    {
        "line": 95,
        "fullcodeline": "ldout(async_msgr->cct, 1) << __func__ << \" read banner and identify addresses failed\" << dendl;"
    },
    {
        "line": 102,
        "fullcodeline": "ldout(async_msgr->cct, 0) << __func__ << \" connect protocol error (bad banner) on peer \""
    },
    {
        "line": 111,
        "fullcodeline": "::decode(paddr, p);"
    },
    {
        "line": 112,
        "fullcodeline": "::decode(peer_addr_for_me, p);"
    },
    {
        "line": 118,
        "fullcodeline": "<< paddr << \" on socket \" << cs.fd() << dendl;"
    },
    {
        "line": 148,
        "fullcodeline": "ldout(async_msgr->cct, 1) << __func__ << \" state changed while learned_addr, mark_down or \""
    },
    {
        "line": 156,
        "fullcodeline": "state = STATE_CONNECTING_SEND_CONNECT_MSG;"
    },
    {
        "line": 157,
        "fullcodeline": "ldout(async_msgr->cct, 10) << __func__ << \" connect sent my addr \""
    },
    {
        "line": 176,
        "fullcodeline": "authorizer = async_msgr->get_authorizer(peer_type, false);"
    },
    {
        "line": 188,
        "fullcodeline": "ldout(async_msgr->cct, 10) << __func__ <<  \" connect_msg.authorizer_len=\""
    },
    {
        "line": 193,
        "fullcodeline": "connect_msg.flags |= CEPH_MSG_CONNECT_LOSSY;  // this is fyi, actually, server decides!"
    },
    {
        "line": 196,
        "fullcodeline": "bl.append(authorizer->bl.c_str(), authorizer->bl.length());"
    },
    {
        "line": 203,
        "fullcodeline": "state = STATE_CONNECTING_WAIT_CONNECT_REPLY;"
    },
    {
        "line": 204,
        "fullcodeline": "ldout(async_msgr->cct,20) << __func__ << \" connect wrote (self +) cseq, waiting for reply\" << dendl;"
    },
    {
        "line": 222,
        "fullcodeline": "ldout(async_msgr->cct, 1) << __func__ << \" read connect reply failed\" << dendl;"
    },
    {
        "line": 228,
        "fullcodeline": "connect_reply = *((ceph_msg_connect_reply*)state_buffer);"
    },
    {
        "line": 244,
        "fullcodeline": "ldout(async_msgr->cct, 10) << __func__ << \" reply.authorizer_len=\" << connect_reply.authorizer_len << dendl;"
    },
    {
        "line": 245,
        "fullcodeline": "assert(connect_reply.authorizer_len < 4096);"
    },
    {
        "line": 246,
        "fullcodeline": "r = read_until(connect_reply.authorizer_len, state_buffer);"
    },
    {
        "line": 254,
        "fullcodeline": "authorizer_reply.append(state_buffer, connect_reply.authorizer_len);"
    },
    {
        "line": 263,
        "fullcodeline": "auto iter = authorizer_reply.begin();"
    },
    {
        "line": 284,
        "fullcodeline": "ldout(async_msgr->cct, 1) << __func__ << \" read connect ack seq failed\" << dendl;"
    },
    {
        "line": 290,
        "fullcodeline": "newly_acked_seq = *((uint64_t*)state_buffer);"
    },
    {
        "line": 309,
        "fullcodeline": "state = STATE_CONNECTING_READY;"
    },
    {
        "line": 310,
        "fullcodeline": "ldout(async_msgr->cct, 10) << __func__ << \" send in_seq done \" << dendl;"
    },
    {
        "line": 339,
        "fullcodeline": "session_security.reset("
    },
    {
        "line": 350,
        "fullcodeline": "assert(delay_state->ready());"
    },
    {
        "line": 356,
        "fullcodeline": "center->delete_time_event(last_tick_id);"
    },
    {
        "line": 364,
        "fullcodeline": "center->dispatch_event_external(write_handler);"
    },
    {
        "line": 384,
        "fullcodeline": "state = STATE_ACCEPTING_WAIT_BANNER_ADDR;"
    },
    {
        "line": 385,
        "fullcodeline": "ldout(async_msgr->cct, 10) << __func__ << \" write banner and addr done: \""
    },
    {
        "line": 405,
        "fullcodeline": "ldout(async_msgr->cct, 1) << __func__ << \" read peer banner and addr failed\" << dendl;"
    },
    {
        "line": 412,
        "fullcodeline": "ldout(async_msgr->cct, 1) << __func__ << \" accept peer sent bad banner '\" << state_buffer"
    },
    {
        "line": 426,
        "fullcodeline": "int port = peer_addr.get_port();"
    },
    {
        "line": 428,
        "fullcodeline": "peer_addr.set_port(port);"
    },
    {
        "line": 429,
        "fullcodeline": "ldout(async_msgr->cct, 0) << __func__ << \" accept peer addr is really \" << peer_addr"
    },
    {
        "line": 441,
        "fullcodeline": "ldout(async_msgr->cct, 1) << __func__ << \" read connect msg failed\" << dendl;"
    },
    {
        "line": 447,
        "fullcodeline": "connect_msg = *((ceph_msg_connect*)state_buffer);"
    },
    {
        "line": 460,
        "fullcodeline": "r = read_until(connect_msg.authorizer_len, authorizer_buf.c_str());"
    },
    {
        "line": 493,
        "fullcodeline": "ldout(async_msgr->cct, 1) << __func__ << \" read ack seq failed\" << dendl;"
    },
    {
        "line": 499,
        "fullcodeline": "newly_acked_seq = *((uint64_t*)state_buffer);"
    },
    {
        "line": 513,
        "fullcodeline": "assert(delay_state->ready());"
    },
    {
        "line": 516,
        "fullcodeline": "center->delete_time_event(last_tick_id);"
    },
    {
        "line": 522,
        "fullcodeline": "center->dispatch_event_external(write_handler);"
    },
    {
        "line": 53,
        "fullcodeline": "if (r == -ECONNREFUSED) {"
    },
    {
        "line": 114,
        "fullcodeline": "lderr(async_msgr->cct) << __func__ <<  \" decode peer addr failed \" << dendl;"
    },
    {
        "line": 120,
        "fullcodeline": "if (paddr.is_blank_ip() && peer_addr.get_port() == paddr.get_port() &&"
    },
    {
        "line": 137,
        "fullcodeline": "if (rand() % async_msgr->cct->_conf->ms_inject_socket_failures == 0) {"
    },
    {
        "line": 247,
        "fullcodeline": "if (r < 0) {"
    },
    {
        "line": 256,
        "fullcodeline": "if (connect_reply.tag == CEPH_MSGR_TAG_CHALLENGE_AUTHORIZER) {"
    },
    {
        "line": 264,
        "fullcodeline": "if (authorizer && !authorizer->verify_reply(iter)) {"
    },
    {
        "line": 340,
        "fullcodeline": "get_auth_session_handler(async_msgr->cct,"
    },
    {
        "line": 346,
        "fullcodeline": "session_security.reset();"
    },
    {
        "line": 457,
        "fullcodeline": "if (!authorizer_buf.length())"
    },
    {
        "line": 461,
        "fullcodeline": "if (r < 0) {"
    },
    {
        "line": 54,
        "fullcodeline": "ldout(async_msgr->cct, 2) << __func__ << \" connection refused!\" << dendl;"
    },
    {
        "line": 55,
        "fullcodeline": "dispatch_queue->queue_refused(this);"
    },
    {
        "line": 58,
        "fullcodeline": "} else if (r == 0) {"
    },
    {
        "line": 75,
        "fullcodeline": "} else if (r > 0) {"
    },
    {
        "line": 97,
        "fullcodeline": "} else if (r > 0) {"
    },
    {
        "line": 121,
        "fullcodeline": "peer_addr.get_nonce() == paddr.get_nonce()) {"
    },
    {
        "line": 122,
        "fullcodeline": "ldout(async_msgr->cct, 0) << __func__ <<  \" connect claims to be \" << paddr"
    },
    {
        "line": 138,
        "fullcodeline": "ldout(msgr->cct, 10) << __func__ << \" sleep for \""
    },
    {
        "line": 141,
        "fullcodeline": "t.set_from_double(async_msgr->cct->_conf->ms_inject_internal_delays);"
    },
    {
        "line": 142,
        "fullcodeline": "t.sleep();"
    },
    {
        "line": 158,
        "fullcodeline": "<< async_msgr->get_myaddr() << dendl;"
    },
    {
        "line": 159,
        "fullcodeline": "} else if (r > 0) {"
    },
    {
        "line": 205,
        "fullcodeline": "} else if (r > 0) {"
    },
    {
        "line": 224,
        "fullcodeline": "} else if (r > 0) {"
    },
    {
        "line": 233,
        "fullcodeline": "<< \" flags \" << (int)connect_reply.flags << \" features \""
    },
    {
        "line": 248,
        "fullcodeline": "ldout(async_msgr->cct, 1) << __func__ << \" read connect reply authorizer failed\" << dendl;"
    },
    {
        "line": 257,
        "fullcodeline": "ldout(async_msgr->cct,10) << __func__ << \" connect got auth challenge\" << dendl;"
    },
    {
        "line": 258,
        "fullcodeline": "authorizer->add_challenge(async_msgr->cct, authorizer_reply);"
    },
    {
        "line": 259,
        "fullcodeline": "state = STATE_CONNECTING_SEND_CONNECT_MSG;"
    },
    {
        "line": 265,
        "fullcodeline": "ldout(async_msgr->cct, 0) << __func__ << \" failed verifying authorize reply\" << dendl;"
    },
    {
        "line": 286,
        "fullcodeline": "} else if (r > 0) {"
    },
    {
        "line": 311,
        "fullcodeline": "} else if (r > 0) {"
    },
    {
        "line": 387,
        "fullcodeline": "} else if (r > 0) {"
    },
    {
        "line": 407,
        "fullcodeline": "} else if (r > 0) {"
    },
    {
        "line": 443,
        "fullcodeline": "} else if (r > 0) {"
    },
    {
        "line": 458,
        "fullcodeline": "authorizer_buf.push_back(buffer::create(connect_msg.authorizer_len));"
    },
    {
        "line": 462,
        "fullcodeline": "ldout(async_msgr->cct, 1) << __func__ << \" read connect authorizer failed\" << dendl;"
    },
    {
        "line": 495,
        "fullcodeline": "} else if (r > 0) {"
    },
    {
        "line": 59,
        "fullcodeline": "ldout(async_msgr->cct, 10) << __func__ << \" nonblock connect inprogress\" << dendl;"
    },
    {
        "line": 76,
        "fullcodeline": "state = STATE_WAIT_SEND;"
    },
    {
        "line": 77,
        "fullcodeline": "state_after_send = STATE_CONNECTING_WAIT_BANNER_AND_IDENTIFY;"
    },
    {
        "line": 78,
        "fullcodeline": "ldout(async_msgr->cct, 10) << __func__ << \" connect wait for write banner: \""
    },
    {
        "line": 126,
        "fullcodeline": "ldout(async_msgr->cct, 10) << __func__ << \" connect claims to be \""
    },
    {
        "line": 160,
        "fullcodeline": "state = STATE_WAIT_SEND;"
    },
    {
        "line": 161,
        "fullcodeline": "state_after_send = STATE_CONNECTING_SEND_CONNECT_MSG;"
    },
    {
        "line": 162,
        "fullcodeline": "ldout(async_msgr->cct, 10) << __func__ << \" connect send my addr done: \""
    },
    {
        "line": 206,
        "fullcodeline": "state = STATE_WAIT_SEND;"
    },
    {
        "line": 207,
        "fullcodeline": "state_after_send = STATE_CONNECTING_WAIT_CONNECT_REPLY;"
    },
    {
        "line": 208,
        "fullcodeline": "ldout(async_msgr->cct, 10) << __func__ << \" continue send reply \" << dendl;"
    },
    {
        "line": 312,
        "fullcodeline": "state_after_send = STATE_CONNECTING_READY;"
    },
    {
        "line": 313,
        "fullcodeline": "state = STATE_WAIT_SEND;"
    },
    {
        "line": 314,
        "fullcodeline": "ldout(async_msgr->cct, 10) << __func__ << \" continue send in_seq \" << dendl;"
    },
    {
        "line": 388,
        "fullcodeline": "state = STATE_WAIT_SEND;"
    },
    {
        "line": 389,
        "fullcodeline": "state_after_send = STATE_ACCEPTING_WAIT_BANNER_ADDR;"
    },
    {
        "line": 390,
        "fullcodeline": "ldout(async_msgr->cct, 10) << __func__ << \" wait for write banner and addr: \""
    },
    {
        "line": 60,
        "fullcodeline": "if (async_msgr->get_stack()->nonblock_connect_need_writable_event())"
    },
    {
        "line": 165,
        "fullcodeline": "ldout(async_msgr->cct, 2) << __func__ << \" connect couldn't write my addr, \""
    },
    {
        "line": 210,
        "fullcodeline": "ldout(async_msgr->cct, 2) << __func__ << \" connect couldn't send reply \""
    },
    {
        "line": 250,
        "fullcodeline": "} else if (r > 0) {"
    },
    {
        "line": 464,
        "fullcodeline": "} else if (r > 0) {"
    },
    {
        "line": 61,
        "fullcodeline": "center->create_file_event(cs.fd(), EVENT_WRITABLE, read_handler);"
    },
    {
        "line": 163,
        "fullcodeline": "<< async_msgr->get_myaddr() << dendl;"
    },
    {
        "line": 166,
        "fullcodeline": "<< cpp_strerror(r) << dendl;"
    },
    {
        "line": 211,
        "fullcodeline": "<< cpp_strerror(r) << dendl;"
    }
]