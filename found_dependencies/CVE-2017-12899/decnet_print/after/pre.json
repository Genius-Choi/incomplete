[
    {
        "line": 16,
        "fullcodeline": "ND_TCHECK2(*ap, sizeof(short));"
    },
    {
        "line": 17,
        "fullcodeline": "pktlen = EXTRACT_LE_16BITS(ap);"
    },
    {
        "line": 26,
        "fullcodeline": "length = pktlen;"
    },
    {
        "line": 28,
        "fullcodeline": "rhp = (const union routehdr *)&(ap[sizeof(short)]);"
    },
    {
        "line": 29,
        "fullcodeline": "ND_TCHECK(rhp->rh_short.sh_flags);"
    },
    {
        "line": 30,
        "fullcodeline": "mflags = EXTRACT_LE_8BITS(rhp->rh_short.sh_flags);"
    },
    {
        "line": 11,
        "fullcodeline": "if (length < sizeof(struct shorthdr)) {"
    },
    {
        "line": 18,
        "fullcodeline": "if (pktlen < sizeof(struct shorthdr)) {"
    },
    {
        "line": 22,
        "fullcodeline": "if (pktlen > length) {"
    },
    {
        "line": 32,
        "fullcodeline": "if (mflags & RMF_PAD) {"
    },
    {
        "line": 50,
        "fullcodeline": "if (mflags & RMF_FVER) {"
    },
    {
        "line": 57,
        "fullcodeline": "if (mflags & RMF_CTLMSG) {"
    },
    {
        "line": 63,
        "fullcodeline": "switch (mflags & RMF_MASK) {"
    },
    {
        "line": 92,
        "fullcodeline": "ND_PRINT((ndo, \"%s > %s %d \","
    },
    {
        "line": 109,
        "fullcodeline": "ND_PRINT((ndo, \"%s\", tstr));"
    },
    {
        "line": 12,
        "fullcodeline": "ND_PRINT((ndo, \"%s\", tstr));"
    },
    {
        "line": 34,
        "fullcodeline": "u_int padlen = mflags & RMF_PADMASK;"
    },
    {
        "line": 41,
        "fullcodeline": "ND_TCHECK2(ap[sizeof(short)], padlen);"
    },
    {
        "line": 42,
        "fullcodeline": "ap += padlen;"
    },
    {
        "line": 43,
        "fullcodeline": "length -= padlen;"
    },
    {
        "line": 44,
        "fullcodeline": "caplen -= padlen;"
    },
    {
        "line": 45,
        "fullcodeline": "rhp = (const union routehdr *)&(ap[sizeof(short)]);"
    },
    {
        "line": 46,
        "fullcodeline": "ND_TCHECK(rhp->rh_short.sh_flags);"
    },
    {
        "line": 47,
        "fullcodeline": "mflags = EXTRACT_LE_8BITS(rhp->rh_short.sh_flags);"
    },
    {
        "line": 70,
        "fullcodeline": "dst ="
    },
    {
        "line": 72,
        "fullcodeline": "src ="
    },
    {
        "line": 74,
        "fullcodeline": "hops = EXTRACT_LE_8BITS(rhp->rh_long.lg_visits);"
    },
    {
        "line": 75,
        "fullcodeline": "nspp = &(ap[sizeof(short) + sizeof(struct longhdr)]);"
    },
    {
        "line": 76,
        "fullcodeline": "nsplen = length - sizeof(struct longhdr);"
    },
    {
        "line": 80,
        "fullcodeline": "dst = EXTRACT_LE_16BITS(rhp->rh_short.sh_dst);"
    },
    {
        "line": 81,
        "fullcodeline": "src = EXTRACT_LE_16BITS(rhp->rh_short.sh_src);"
    },
    {
        "line": 82,
        "fullcodeline": "hops = (EXTRACT_LE_8BITS(rhp->rh_short.sh_visits) & VIS_MASK)+1;"
    },
    {
        "line": 83,
        "fullcodeline": "nspp = &(ap[sizeof(short) + sizeof(struct shorthdr)]);"
    },
    {
        "line": 84,
        "fullcodeline": "nsplen = length - sizeof(struct shorthdr);"
    },
    {
        "line": 104,
        "fullcodeline": "if (!print_nsp(ndo, nspp, nsplen))"
    },
    {
        "line": 19,
        "fullcodeline": "ND_PRINT((ndo, \"%s\", tstr));"
    },
    {
        "line": 23,
        "fullcodeline": "ND_PRINT((ndo, \"%s\", tstr));"
    },
    {
        "line": 37,
        "fullcodeline": "if (length < padlen + 2) {"
    },
    {
        "line": 51,
        "fullcodeline": "ND_PRINT((ndo, \"future-version-decnet\"));"
    },
    {
        "line": 52,
        "fullcodeline": "ND_DEFAULTPRINT(ap, min(length, caplen));"
    },
    {
        "line": 65,
        "fullcodeline": "if (length < sizeof(struct longhdr)) {"
    },
    {
        "line": 71,
        "fullcodeline": "EXTRACT_LE_16BITS(rhp->rh_long.lg_dst.dne_remote.dne_nodeaddr);"
    },
    {
        "line": 73,
        "fullcodeline": "EXTRACT_LE_16BITS(rhp->rh_long.lg_src.dne_remote.dne_nodeaddr);"
    },
    {
        "line": 87,
        "fullcodeline": "ND_PRINT((ndo, \"unknown message flags under mask\"));"
    },
    {
        "line": 88,
        "fullcodeline": "ND_DEFAULTPRINT((const u_char *)ap, min(length, caplen));"
    },
    {
        "line": 93,
        "fullcodeline": "dnaddr_string(ndo, src), dnaddr_string(ndo, dst), pktlen));"
    },
    {
        "line": 95,
        "fullcodeline": "if (mflags & RMF_RQR)"
    },
    {
        "line": 97,
        "fullcodeline": "if (mflags & RMF_RTS)"
    },
    {
        "line": 99,
        "fullcodeline": "if (mflags & RMF_IE)"
    },
    {
        "line": 101,
        "fullcodeline": "ND_PRINT((ndo, \"%d hops \", hops));"
    },
    {
        "line": 58,
        "fullcodeline": "if (!print_decnet_ctlmsg(ndo, rhp, length, caplen))"
    },
    {
        "line": 36,
        "fullcodeline": "ND_PRINT((ndo, \"[pad:%d] \", padlen));"
    },
    {
        "line": 38,
        "fullcodeline": "ND_PRINT((ndo, \"%s\", tstr));"
    },
    {
        "line": 66,
        "fullcodeline": "ND_PRINT((ndo, \"%s\", tstr));"
    },
    {
        "line": 96,
        "fullcodeline": "ND_PRINT((ndo, \"RQR \"));"
    },
    {
        "line": 98,
        "fullcodeline": "ND_PRINT((ndo, \"RTS \"));"
    },
    {
        "line": 100,
        "fullcodeline": "ND_PRINT((ndo, \"IE \"));"
    }
]