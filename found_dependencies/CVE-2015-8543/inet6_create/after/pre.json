[
    {
        "line": 10,
        "fullcodeline": "int try_loading_module = 0;"
    },
    {
        "line": 20,
        "fullcodeline": "list_for_each_entry_rcu(answer, &inetsw6[sock->type], list) {"
    },
    {
        "line": 61,
        "fullcodeline": "err = -EPERM;"
    },
    {
        "line": 66,
        "fullcodeline": "sock->ops = answer->ops;"
    },
    {
        "line": 67,
        "fullcodeline": "answer_prot = answer->prot;"
    },
    {
        "line": 68,
        "fullcodeline": "answer_flags = answer->flags;"
    },
    {
        "line": 73,
        "fullcodeline": "err = -ENOBUFS;"
    },
    {
        "line": 74,
        "fullcodeline": "sk = sk_alloc(net, PF_INET6, GFP_KERNEL, answer_prot, kern);"
    },
    {
        "line": 78,
        "fullcodeline": "sock_init_data(sock, sk);"
    },
    {
        "line": 80,
        "fullcodeline": "err = 0;"
    },
    {
        "line": 84,
        "fullcodeline": "inet = inet_sk(sk);"
    },
    {
        "line": 93,
        "fullcodeline": "sk->sk_destruct\t\t= inet_sock_destruct;"
    },
    {
        "line": 94,
        "fullcodeline": "sk->sk_family\t\t= PF_INET6;"
    },
    {
        "line": 95,
        "fullcodeline": "sk->sk_protocol\t\t= protocol;"
    },
    {
        "line": 97,
        "fullcodeline": "sk->sk_backlog_rcv\t= answer->prot->backlog_rcv;"
    },
    {
        "line": 101,
        "fullcodeline": "np->mcast_hops\t= IPV6_DEFAULT_MCASTHOPS;"
    },
    {
        "line": 103,
        "fullcodeline": "np->pmtudisc\t= IPV6_PMTUDISC_WANT;"
    },
    {
        "line": 105,
        "fullcodeline": "sk->sk_ipv6only\t= net->ipv6.sysctl.bindv6only;"
    },
    {
        "line": 115,
        "fullcodeline": "inet->mc_list\t= NULL;"
    },
    {
        "line": 131,
        "fullcodeline": "sk_refcnt_debug_inc(sk);"
    },
    {
        "line": 13,
        "fullcodeline": "if (protocol < 0 || protocol >= IPPROTO_MAX)"
    },
    {
        "line": 18,
        "fullcodeline": "err = -ESOCKTNOSUPPORT;"
    },
    {
        "line": 36,
        "fullcodeline": "err = -EPROTONOSUPPORT;"
    },
    {
        "line": 71,
        "fullcodeline": "WARN_ON(!answer_prot->slab);"
    },
    {
        "line": 75,
        "fullcodeline": "if (!sk)"
    },
    {
        "line": 81,
        "fullcodeline": "if (INET_PROTOSW_REUSE & answer_flags)"
    },
    {
        "line": 85,
        "fullcodeline": "inet->is_icsk = (INET_PROTOSW_ICSK & answer_flags) != 0;"
    },
    {
        "line": 99,
        "fullcodeline": "inet_sk(sk)->pinet6 = np = inet6_sk_generic(sk);"
    },
    {
        "line": 100,
        "fullcodeline": "np->hop_limit\t= -1;"
    },
    {
        "line": 104,
        "fullcodeline": "np->autoflowlabel = ip6_default_np_autolabel(sock_net(sk));"
    },
    {
        "line": 110,
        "fullcodeline": "inet->uc_ttl\t= -1;"
    },
    {
        "line": 24,
        "fullcodeline": "if (protocol == answer->protocol) {"
    },
    {
        "line": 62,
        "fullcodeline": "if (sock->type == SOCK_RAW && !kern &&"
    },
    {
        "line": 63,
        "fullcodeline": "!ns_capable(net->user_ns, CAP_NET_RAW))"
    },
    {
        "line": 82,
        "fullcodeline": "sk->sk_reuse = SK_CAN_REUSE;"
    },
    {
        "line": 88,
        "fullcodeline": "inet->inet_num = protocol;"
    },
    {
        "line": 119,
        "fullcodeline": "inet->pmtudisc = IP_PMTUDISC_DONT;"
    },
    {
        "line": 139,
        "fullcodeline": "sk->sk_prot->hash(sk);"
    },
    {
        "line": 142,
        "fullcodeline": "err = sk->sk_prot->init(sk);"
    },
    {
        "line": 14,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 40,
        "fullcodeline": "if (try_loading_module < 2) {"
    },
    {
        "line": 89,
        "fullcodeline": "if (IPPROTO_RAW == protocol)"
    },
    {
        "line": 121,
        "fullcodeline": "inet->pmtudisc = IP_PMTUDISC_WANT;"
    },
    {
        "line": 138,
        "fullcodeline": "inet->inet_sport = htons(inet->inet_num);"
    },
    {
        "line": 25,
        "fullcodeline": "if (protocol != IPPROTO_IP)"
    },
    {
        "line": 29,
        "fullcodeline": "if (IPPROTO_IP == protocol) {"
    },
    {
        "line": 33,
        "fullcodeline": "if (IPPROTO_IP == answer->protocol)"
    },
    {
        "line": 46,
        "fullcodeline": "if (++try_loading_module == 1)"
    },
    {
        "line": 47,
        "fullcodeline": "request_module(\"net-pf-%d-proto-%d-type-%d\","
    },
    {
        "line": 54,
        "fullcodeline": "request_module(\"net-pf-%d-proto-%d\","
    }
]