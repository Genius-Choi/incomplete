[
    {
        "line": 9,
        "fullcodeline": "int try_loading_module = 0;"
    },
    {
        "line": 12,
        "fullcodeline": "sock->state = SS_UNCONNECTED;"
    },
    {
        "line": 16,
        "fullcodeline": "err = -ESOCKTNOSUPPORT;"
    },
    {
        "line": 17,
        "fullcodeline": "rcu_read_lock();"
    },
    {
        "line": 18,
        "fullcodeline": "list_for_each_entry_rcu(answer, &inetsw[sock->type], list) {"
    },
    {
        "line": 59,
        "fullcodeline": "err = -EPERM;"
    },
    {
        "line": 64,
        "fullcodeline": "sock->ops = answer->ops;"
    },
    {
        "line": 65,
        "fullcodeline": "answer_prot = answer->prot;"
    },
    {
        "line": 66,
        "fullcodeline": "answer_flags = answer->flags;"
    },
    {
        "line": 67,
        "fullcodeline": "rcu_read_unlock();"
    },
    {
        "line": 69,
        "fullcodeline": "WARN_ON(!answer_prot->slab);"
    },
    {
        "line": 71,
        "fullcodeline": "err = -ENOBUFS;"
    },
    {
        "line": 72,
        "fullcodeline": "sk = sk_alloc(net, PF_INET, GFP_KERNEL, answer_prot, kern);"
    },
    {
        "line": 76,
        "fullcodeline": "err = 0;"
    },
    {
        "line": 80,
        "fullcodeline": "inet = inet_sk(sk);"
    },
    {
        "line": 81,
        "fullcodeline": "inet->is_icsk = (INET_PROTOSW_ICSK & answer_flags) != 0;"
    },
    {
        "line": 83,
        "fullcodeline": "inet->nodefrag = 0;"
    },
    {
        "line": 96,
        "fullcodeline": "inet->inet_id = 0;"
    },
    {
        "line": 98,
        "fullcodeline": "sock_init_data(sock, sk);"
    },
    {
        "line": 100,
        "fullcodeline": "sk->sk_destruct\t   = inet_sock_destruct;"
    },
    {
        "line": 101,
        "fullcodeline": "sk->sk_protocol\t   = protocol;"
    },
    {
        "line": 102,
        "fullcodeline": "sk->sk_backlog_rcv = sk->sk_prot->backlog_rcv;"
    },
    {
        "line": 104,
        "fullcodeline": "inet->uc_ttl\t= -1;"
    },
    {
        "line": 105,
        "fullcodeline": "inet->mc_loop\t= 1;"
    },
    {
        "line": 106,
        "fullcodeline": "inet->mc_ttl\t= 1;"
    },
    {
        "line": 107,
        "fullcodeline": "inet->mc_all\t= 1;"
    },
    {
        "line": 108,
        "fullcodeline": "inet->mc_index\t= 0;"
    },
    {
        "line": 109,
        "fullcodeline": "inet->mc_list\t= NULL;"
    },
    {
        "line": 110,
        "fullcodeline": "inet->rcv_tos\t= 0;"
    },
    {
        "line": 112,
        "fullcodeline": "sk_refcnt_debug_inc(sk);"
    },
    {
        "line": 133,
        "fullcodeline": "rcu_read_unlock();"
    },
    {
        "line": 20,
        "fullcodeline": "err = 0;"
    },
    {
        "line": 34,
        "fullcodeline": "err = -EPROTONOSUPPORT;"
    },
    {
        "line": 37,
        "fullcodeline": "if (unlikely(err)) {"
    },
    {
        "line": 60,
        "fullcodeline": "if (sock->type == SOCK_RAW && !kern &&"
    },
    {
        "line": 73,
        "fullcodeline": "if (!sk)"
    },
    {
        "line": 77,
        "fullcodeline": "if (INET_PROTOSW_REUSE & answer_flags)"
    },
    {
        "line": 85,
        "fullcodeline": "if (SOCK_RAW == sock->type) {"
    },
    {
        "line": 22,
        "fullcodeline": "if (protocol == answer->protocol) {"
    },
    {
        "line": 61,
        "fullcodeline": "!ns_capable(net->user_ns, CAP_NET_RAW))"
    },
    {
        "line": 78,
        "fullcodeline": "sk->sk_reuse = SK_CAN_REUSE;"
    },
    {
        "line": 86,
        "fullcodeline": "inet->inet_num = protocol;"
    },
    {
        "line": 92,
        "fullcodeline": "inet->pmtudisc = IP_PMTUDISC_DONT;"
    },
    {
        "line": 120,
        "fullcodeline": "inet->inet_sport = htons(inet->inet_num);"
    },
    {
        "line": 122,
        "fullcodeline": "sk->sk_prot->hash(sk);"
    },
    {
        "line": 126,
        "fullcodeline": "err = sk->sk_prot->init(sk);"
    },
    {
        "line": 38,
        "fullcodeline": "if (try_loading_module < 2) {"
    },
    {
        "line": 87,
        "fullcodeline": "if (IPPROTO_RAW == protocol)"
    },
    {
        "line": 94,
        "fullcodeline": "inet->pmtudisc = IP_PMTUDISC_WANT;"
    },
    {
        "line": 23,
        "fullcodeline": "if (protocol != IPPROTO_IP)"
    },
    {
        "line": 88,
        "fullcodeline": "inet->hdrincl = 1;"
    },
    {
        "line": 128,
        "fullcodeline": "sk_common_release(sk);"
    },
    {
        "line": 27,
        "fullcodeline": "if (IPPROTO_IP == protocol) {"
    },
    {
        "line": 31,
        "fullcodeline": "if (IPPROTO_IP == answer->protocol)"
    },
    {
        "line": 44,
        "fullcodeline": "if (++try_loading_module == 1)"
    },
    {
        "line": 45,
        "fullcodeline": "request_module(\"net-pf-%d-proto-%d-type-%d\","
    },
    {
        "line": 52,
        "fullcodeline": "request_module(\"net-pf-%d-proto-%d\","
    }
]