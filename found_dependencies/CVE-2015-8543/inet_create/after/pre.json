[
    {
        "line": 9,
        "fullcodeline": "int try_loading_module = 0;"
    },
    {
        "line": 15,
        "fullcodeline": "sock->state = SS_UNCONNECTED;"
    },
    {
        "line": 21,
        "fullcodeline": "list_for_each_entry_rcu(answer, &inetsw[sock->type], list) {"
    },
    {
        "line": 62,
        "fullcodeline": "err = -EPERM;"
    },
    {
        "line": 67,
        "fullcodeline": "sock->ops = answer->ops;"
    },
    {
        "line": 68,
        "fullcodeline": "answer_prot = answer->prot;"
    },
    {
        "line": 69,
        "fullcodeline": "answer_flags = answer->flags;"
    },
    {
        "line": 74,
        "fullcodeline": "err = -ENOBUFS;"
    },
    {
        "line": 75,
        "fullcodeline": "sk = sk_alloc(net, PF_INET, GFP_KERNEL, answer_prot, kern);"
    },
    {
        "line": 79,
        "fullcodeline": "err = 0;"
    },
    {
        "line": 83,
        "fullcodeline": "inet = inet_sk(sk);"
    },
    {
        "line": 101,
        "fullcodeline": "sock_init_data(sock, sk);"
    },
    {
        "line": 103,
        "fullcodeline": "sk->sk_destruct\t   = inet_sock_destruct;"
    },
    {
        "line": 104,
        "fullcodeline": "sk->sk_protocol\t   = protocol;"
    },
    {
        "line": 105,
        "fullcodeline": "sk->sk_backlog_rcv = sk->sk_prot->backlog_rcv;"
    },
    {
        "line": 112,
        "fullcodeline": "inet->mc_list\t= NULL;"
    },
    {
        "line": 115,
        "fullcodeline": "sk_refcnt_debug_inc(sk);"
    },
    {
        "line": 12,
        "fullcodeline": "if (protocol < 0 || protocol >= IPPROTO_MAX)"
    },
    {
        "line": 19,
        "fullcodeline": "err = -ESOCKTNOSUPPORT;"
    },
    {
        "line": 37,
        "fullcodeline": "err = -EPROTONOSUPPORT;"
    },
    {
        "line": 40,
        "fullcodeline": "if (unlikely(err)) {"
    },
    {
        "line": 72,
        "fullcodeline": "WARN_ON(!answer_prot->slab);"
    },
    {
        "line": 76,
        "fullcodeline": "if (!sk)"
    },
    {
        "line": 80,
        "fullcodeline": "if (INET_PROTOSW_REUSE & answer_flags)"
    },
    {
        "line": 84,
        "fullcodeline": "inet->is_icsk = (INET_PROTOSW_ICSK & answer_flags) != 0;"
    },
    {
        "line": 88,
        "fullcodeline": "if (SOCK_RAW == sock->type) {"
    },
    {
        "line": 107,
        "fullcodeline": "inet->uc_ttl\t= -1;"
    },
    {
        "line": 25,
        "fullcodeline": "if (protocol == answer->protocol) {"
    },
    {
        "line": 63,
        "fullcodeline": "if (sock->type == SOCK_RAW && !kern &&"
    },
    {
        "line": 64,
        "fullcodeline": "!ns_capable(net->user_ns, CAP_NET_RAW))"
    },
    {
        "line": 81,
        "fullcodeline": "sk->sk_reuse = SK_CAN_REUSE;"
    },
    {
        "line": 89,
        "fullcodeline": "inet->inet_num = protocol;"
    },
    {
        "line": 95,
        "fullcodeline": "inet->pmtudisc = IP_PMTUDISC_DONT;"
    },
    {
        "line": 125,
        "fullcodeline": "sk->sk_prot->hash(sk);"
    },
    {
        "line": 129,
        "fullcodeline": "err = sk->sk_prot->init(sk);"
    },
    {
        "line": 13,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 41,
        "fullcodeline": "if (try_loading_module < 2) {"
    },
    {
        "line": 90,
        "fullcodeline": "if (IPPROTO_RAW == protocol)"
    },
    {
        "line": 97,
        "fullcodeline": "inet->pmtudisc = IP_PMTUDISC_WANT;"
    },
    {
        "line": 123,
        "fullcodeline": "inet->inet_sport = htons(inet->inet_num);"
    },
    {
        "line": 26,
        "fullcodeline": "if (protocol != IPPROTO_IP)"
    },
    {
        "line": 30,
        "fullcodeline": "if (IPPROTO_IP == protocol) {"
    },
    {
        "line": 34,
        "fullcodeline": "if (IPPROTO_IP == answer->protocol)"
    },
    {
        "line": 47,
        "fullcodeline": "if (++try_loading_module == 1)"
    },
    {
        "line": 48,
        "fullcodeline": "request_module(\"net-pf-%d-proto-%d-type-%d\","
    },
    {
        "line": 55,
        "fullcodeline": "request_module(\"net-pf-%d-proto-%d\","
    }
]