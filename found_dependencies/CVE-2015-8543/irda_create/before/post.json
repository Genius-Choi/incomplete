[
    {
        "line": 21,
        "fullcodeline": "sk = sk_alloc(net, PF_IRDA, GFP_KERNEL, &irda_proto, kern);"
    },
    {
        "line": 25,
        "fullcodeline": "self = irda_sk(sk);"
    },
    {
        "line": 26,
        "fullcodeline": "pr_debug(\"%s() : self is %p\\n\", __func__, self);"
    },
    {
        "line": 28,
        "fullcodeline": "init_waitqueue_head(&self->query_wait);"
    },
    {
        "line": 66,
        "fullcodeline": "sock_init_data(sock, sk);\t/* Note : set sk->sk_refcnt to 1 */"
    },
    {
        "line": 67,
        "fullcodeline": "sk->sk_family = PF_IRDA;"
    },
    {
        "line": 68,
        "fullcodeline": "sk->sk_protocol = protocol;"
    },
    {
        "line": 71,
        "fullcodeline": "self->ckey = irlmp_register_client(0, NULL, NULL, NULL);"
    },
    {
        "line": 72,
        "fullcodeline": "self->mask.word = 0xffff;"
    },
    {
        "line": 73,
        "fullcodeline": "self->rx_flow = self->tx_flow = FLOW_START;"
    },
    {
        "line": 74,
        "fullcodeline": "self->nslots = DISCOVERY_DEFAULT_SLOTS;"
    },
    {
        "line": 75,
        "fullcodeline": "self->daddr = DEV_ADDR_ANY;\t/* Until we get connected */"
    },
    {
        "line": 76,
        "fullcodeline": "self->saddr = 0x0;\t\t/* so IrLMP assign us any link */"
    },
    {
        "line": 7,
        "fullcodeline": "if (net != &init_net)"
    },
    {
        "line": 22,
        "fullcodeline": "if (sk == NULL)"
    },
    {
        "line": 32,
        "fullcodeline": "sock->ops = &irda_stream_ops;"
    },
    {
        "line": 33,
        "fullcodeline": "self->max_sdu_size_rx = TTP_SAR_DISABLE;"
    },
    {
        "line": 36,
        "fullcodeline": "sock->ops = &irda_seqpacket_ops;"
    },
    {
        "line": 37,
        "fullcodeline": "self->max_sdu_size_rx = TTP_SAR_UNBOUND;"
    },
    {
        "line": 61,
        "fullcodeline": "sk_free(sk);"
    },
    {
        "line": 8,
        "fullcodeline": "return -EAFNOSUPPORT;"
    },
    {
        "line": 17,
        "fullcodeline": "return -ESOCKTNOSUPPORT;"
    },
    {
        "line": 23,
        "fullcodeline": "return -ENOMEM;"
    },
    {
        "line": 62,
        "fullcodeline": "return -ESOCKTNOSUPPORT;"
    },
    {
        "line": 51,
        "fullcodeline": "sock->ops = &irda_dgram_ops;"
    },
    {
        "line": 53,
        "fullcodeline": "self->max_sdu_size_rx = TTP_SAR_UNBOUND;"
    },
    {
        "line": 56,
        "fullcodeline": "sk_free(sk);"
    },
    {
        "line": 57,
        "fullcodeline": "return -ESOCKTNOSUPPORT;"
    }
]