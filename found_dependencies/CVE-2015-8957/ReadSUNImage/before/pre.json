[
    {
        "line": 64,
        "fullcodeline": "assert(image_info != (const ImageInfo *) NULL);"
    },
    {
        "line": 65,
        "fullcodeline": "assert(image_info->signature == MagickSignature);"
    },
    {
        "line": 69,
        "fullcodeline": "assert(exception != (ExceptionInfo *) NULL);"
    },
    {
        "line": 70,
        "fullcodeline": "assert(exception->signature == MagickSignature);"
    },
    {
        "line": 71,
        "fullcodeline": "image=AcquireImage(image_info,exception);"
    },
    {
        "line": 72,
        "fullcodeline": "status=OpenBlob(image_info,image,ReadBinaryBlobMode,exception);"
    },
    {
        "line": 82,
        "fullcodeline": "sun_info.magic=ReadBlobMSBLong(image);"
    },
    {
        "line": 66,
        "fullcodeline": "if (image_info->debug != MagickFalse)"
    },
    {
        "line": 73,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 81,
        "fullcodeline": "(void) ResetMagickMemory(&sun_info,0,sizeof(sun_info));"
    },
    {
        "line": 406,
        "fullcodeline": "} while (sun_info.magic == 0x59a66a95);"
    },
    {
        "line": 407,
        "fullcodeline": "(void) CloseBlob(image);"
    },
    {
        "line": 408,
        "fullcodeline": "return(GetFirstImageInList(image));"
    },
    {
        "line": 67,
        "fullcodeline": "(void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\","
    },
    {
        "line": 75,
        "fullcodeline": "image=DestroyImageList(image);"
    },
    {
        "line": 90,
        "fullcodeline": "sun_info.width=ReadBlobMSBLong(image);"
    },
    {
        "line": 91,
        "fullcodeline": "sun_info.height=ReadBlobMSBLong(image);"
    },
    {
        "line": 92,
        "fullcodeline": "sun_info.depth=ReadBlobMSBLong(image);"
    },
    {
        "line": 93,
        "fullcodeline": "sun_info.length=ReadBlobMSBLong(image);"
    },
    {
        "line": 94,
        "fullcodeline": "sun_info.type=ReadBlobMSBLong(image);"
    },
    {
        "line": 95,
        "fullcodeline": "sun_info.maptype=ReadBlobMSBLong(image);"
    },
    {
        "line": 96,
        "fullcodeline": "sun_info.maplength=ReadBlobMSBLong(image);"
    },
    {
        "line": 97,
        "fullcodeline": "extent=sun_info.height*sun_info.width;"
    },
    {
        "line": 110,
        "fullcodeline": "image->columns=sun_info.width;"
    },
    {
        "line": 111,
        "fullcodeline": "image->rows=sun_info.height;"
    },
    {
        "line": 112,
        "fullcodeline": "image->depth=sun_info.depth <= 8 ? sun_info.depth :"
    },
    {
        "line": 184,
        "fullcodeline": "image->alpha_trait=sun_info.depth == 32 ? BlendPixelTrait :"
    },
    {
        "line": 186,
        "fullcodeline": "image->columns=sun_info.width;"
    },
    {
        "line": 187,
        "fullcodeline": "image->rows=sun_info.height;"
    },
    {
        "line": 193,
        "fullcodeline": "status=SetImageExtent(image,image->columns,image->rows,exception);"
    },
    {
        "line": 199,
        "fullcodeline": "number_pixels=(MagickSizeType) image->columns*image->rows;"
    },
    {
        "line": 203,
        "fullcodeline": "bytes_per_line=sun_info.width*sun_info.depth;"
    },
    {
        "line": 204,
        "fullcodeline": "sun_data=(unsigned char *) AcquireQuantumMemory((size_t) MagickMax("
    },
    {
        "line": 208,
        "fullcodeline": "count=(ssize_t) ReadBlob(image,sun_info.length,sun_data);"
    },
    {
        "line": 211,
        "fullcodeline": "sun_pixels=sun_data;"
    },
    {
        "line": 212,
        "fullcodeline": "bytes_per_line=0;"
    },
    {
        "line": 241,
        "fullcodeline": "p=sun_pixels;"
    },
    {
        "line": 388,
        "fullcodeline": "sun_info.magic=ReadBlobMSBLong(image);"
    },
    {
        "line": 76,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 105,
        "fullcodeline": "if ((sun_info.depth == 0) || (sun_info.depth > 32))"
    },
    {
        "line": 114,
        "fullcodeline": "if (sun_info.depth < 24)"
    },
    {
        "line": 188,
        "fullcodeline": "if (image_info->ping != MagickFalse)"
    },
    {
        "line": 194,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 206,
        "fullcodeline": "if (sun_data == (unsigned char *) NULL)"
    },
    {
        "line": 213,
        "fullcodeline": "if (sun_info.type == RT_ENCODED)"
    },
    {
        "line": 373,
        "fullcodeline": "if (image->storage_class == PseudoClass)"
    },
    {
        "line": 376,
        "fullcodeline": "if (EOFBlob(image) != MagickFalse)"
    },
    {
        "line": 385,
        "fullcodeline": "if (image_info->number_scenes != 0)"
    },
    {
        "line": 389,
        "fullcodeline": "if (sun_info.magic == 0x59a66a95)"
    },
    {
        "line": 89,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 98,
        "fullcodeline": "if ((sun_info.height != 0) && (sun_info.width != extent/sun_info.height))"
    },
    {
        "line": 99,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 100,
        "fullcodeline": "if ((sun_info.type != RT_STANDARD) && (sun_info.type != RT_ENCODED) &&"
    },
    {
        "line": 101,
        "fullcodeline": "(sun_info.type != RT_FORMAT_RGB))"
    },
    {
        "line": 102,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 103,
        "fullcodeline": "if ((sun_info.maptype == RMT_NONE) && (sun_info.maplength != 0))"
    },
    {
        "line": 104,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 106,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 107,
        "fullcodeline": "if ((sun_info.maptype != RMT_NONE) && (sun_info.maptype != RMT_EQUAL_RGB) &&"
    },
    {
        "line": 108,
        "fullcodeline": "(sun_info.maptype != RMT_RAW))"
    },
    {
        "line": 109,
        "fullcodeline": "ThrowReaderException(CoderError,\"ColormapTypeNotSupported\");"
    },
    {
        "line": 119,
        "fullcodeline": "image->colors=sun_info.maplength;"
    },
    {
        "line": 120,
        "fullcodeline": "one=1;"
    },
    {
        "line": 182,
        "fullcodeline": "ThrowReaderException(CoderError,\"ColormapTypeNotSupported\");"
    },
    {
        "line": 196,
        "fullcodeline": "if ((sun_info.length*sizeof(*sun_data))/sizeof(*sun_data) !="
    },
    {
        "line": 197,
        "fullcodeline": "sun_info.length || !sun_info.length)"
    },
    {
        "line": 198,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 200,
        "fullcodeline": "if ((sun_info.type != RT_ENCODED) && (sun_info.depth >= 8) &&"
    },
    {
        "line": 201,
        "fullcodeline": "((number_pixels*((sun_info.depth+7)/8)) > sun_info.length))"
    },
    {
        "line": 202,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 207,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 210,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"UnableToReadImageData\");"
    },
    {
        "line": 221,
        "fullcodeline": "height=sun_info.height;"
    },
    {
        "line": 225,
        "fullcodeline": "bytes_per_line+=15;"
    },
    {
        "line": 226,
        "fullcodeline": "bytes_per_line<<=1;"
    },
    {
        "line": 229,
        "fullcodeline": "bytes_per_line>>=4;"
    },
    {
        "line": 230,
        "fullcodeline": "sun_pixels=(unsigned char *) AcquireQuantumMemory(height,"
    },
    {
        "line": 375,
        "fullcodeline": "sun_pixels=(unsigned char *) RelinquishMagickMemory(sun_pixels);"
    },
    {
        "line": 378,
        "fullcodeline": "ThrowFileException(exception,CorruptImageError,\"UnexpectedEndOfFile\","
    },
    {
        "line": 394,
        "fullcodeline": "AcquireNextImage(image_info,image,exception);"
    },
    {
        "line": 400,
        "fullcodeline": "image=SyncNextImageInList(image);"
    },
    {
        "line": 401,
        "fullcodeline": "status=SetImageProgress(image,LoadImagesTag,TellBlob(image),"
    },
    {
        "line": 121,
        "fullcodeline": "if (sun_info.maptype == RMT_NONE)"
    },
    {
        "line": 125,
        "fullcodeline": "if (AcquireImageColormap(image,image->colors,exception) == MagickFalse)"
    },
    {
        "line": 138,
        "fullcodeline": "sun_colormap=(unsigned char *) AcquireQuantumMemory(image->colors,"
    },
    {
        "line": 142,
        "fullcodeline": "count=ReadBlob(image,image->colors,sun_colormap);"
    },
    {
        "line": 148,
        "fullcodeline": "count=ReadBlob(image,image->colors,sun_colormap);"
    },
    {
        "line": 154,
        "fullcodeline": "count=ReadBlob(image,image->colors,sun_colormap);"
    },
    {
        "line": 171,
        "fullcodeline": "sun_colormap=(unsigned char *) AcquireQuantumMemory(sun_info.maplength,"
    },
    {
        "line": 175,
        "fullcodeline": "count=ReadBlob(image,sun_info.maplength,sun_colormap);"
    },
    {
        "line": 190,
        "fullcodeline": "(void) CloseBlob(image);"
    },
    {
        "line": 191,
        "fullcodeline": "return(GetFirstImageInList(image));"
    },
    {
        "line": 195,
        "fullcodeline": "return(DestroyImageList(image));"
    },
    {
        "line": 232,
        "fullcodeline": "if (sun_pixels == (unsigned char *) NULL)"
    },
    {
        "line": 234,
        "fullcodeline": "(void) DecodeImage(sun_data,sun_info.length,sun_pixels,bytes_per_line*"
    },
    {
        "line": 243,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 374,
        "fullcodeline": "(void) SyncImage(image,exception);"
    },
    {
        "line": 386,
        "fullcodeline": "if (image->scene >= (image_info->scene+image_info->number_scenes-1))"
    },
    {
        "line": 403,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 122,
        "fullcodeline": "image->colors=one << sun_info.depth;"
    },
    {
        "line": 124,
        "fullcodeline": "image->colors=sun_info.maplength/3;"
    },
    {
        "line": 126,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 140,
        "fullcodeline": "if (sun_colormap == (unsigned char *) NULL)"
    },
    {
        "line": 145,
        "fullcodeline": "for (i=0; i < (ssize_t) image->colors; i++)"
    },
    {
        "line": 151,
        "fullcodeline": "for (i=0; i < (ssize_t) image->colors; i++)"
    },
    {
        "line": 157,
        "fullcodeline": "for (i=0; i < (ssize_t) image->colors; i++)"
    },
    {
        "line": 173,
        "fullcodeline": "if (sun_colormap == (unsigned char *) NULL)"
    },
    {
        "line": 222,
        "fullcodeline": "if ((height == 0) || (sun_info.width == 0) || (sun_info.depth == 0) ||"
    },
    {
        "line": 223,
        "fullcodeline": "((bytes_per_line/sun_info.depth) != sun_info.width))"
    },
    {
        "line": 224,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 227,
        "fullcodeline": "if ((bytes_per_line >> 1) != (sun_info.width*sun_info.depth+15))"
    },
    {
        "line": 228,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 233,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 236,
        "fullcodeline": "sun_data=(unsigned char *) RelinquishMagickMemory(sun_data);"
    },
    {
        "line": 245,
        "fullcodeline": "q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 281,
        "fullcodeline": "if (image->storage_class == PseudoClass)"
    },
    {
        "line": 395,
        "fullcodeline": "if (GetNextImageInList(image) == (Image *) NULL)"
    },
    {
        "line": 402,
        "fullcodeline": "GetBlobSize(image));"
    },
    {
        "line": 141,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 144,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"UnexpectedEndOfFile\");"
    },
    {
        "line": 150,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"UnexpectedEndOfFile\");"
    },
    {
        "line": 156,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"UnexpectedEndOfFile\");"
    },
    {
        "line": 160,
        "fullcodeline": "sun_colormap=(unsigned char *) RelinquishMagickMemory(sun_colormap);"
    },
    {
        "line": 174,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 177,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"UnexpectedEndOfFile\");"
    },
    {
        "line": 178,
        "fullcodeline": "sun_colormap=(unsigned char *) RelinquishMagickMemory(sun_colormap);"
    },
    {
        "line": 205,
        "fullcodeline": "sun_info.length,bytes_per_line*sun_info.width),sizeof(*sun_data));"
    },
    {
        "line": 231,
        "fullcodeline": "bytes_per_line*sizeof(*sun_pixels));"
    },
    {
        "line": 246,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 248,
        "fullcodeline": "for (x=0; x < ((ssize_t) image->columns-7); x+=8)"
    },
    {
        "line": 270,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 272,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 285,
        "fullcodeline": "length=image->rows*(image->columns+image->columns % 2);"
    },
    {
        "line": 397,
        "fullcodeline": "image=DestroyImageList(image);"
    },
    {
        "line": 398,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 146,
        "fullcodeline": "image->colormap[i].red=(MagickRealType) ScaleCharToQuantum("
    },
    {
        "line": 152,
        "fullcodeline": "image->colormap[i].green=(MagickRealType) ScaleCharToQuantum("
    },
    {
        "line": 158,
        "fullcodeline": "image->colormap[i].blue=(MagickRealType) ScaleCharToQuantum("
    },
    {
        "line": 256,
        "fullcodeline": "p++;"
    },
    {
        "line": 258,
        "fullcodeline": "if ((image->columns % 8) != 0)"
    },
    {
        "line": 266,
        "fullcodeline": "p++;"
    },
    {
        "line": 268,
        "fullcodeline": "if ((((image->columns/8)+(image->columns % 8 ? 1 : 0)) % 2) != 0)"
    },
    {
        "line": 269,
        "fullcodeline": "p++;"
    },
    {
        "line": 274,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 283,
        "fullcodeline": "if (bytes_per_line == 0)"
    },
    {
        "line": 286,
        "fullcodeline": "if (((sun_info.type == RT_ENCODED) &&"
    },
    {
        "line": 290,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 318,
        "fullcodeline": "bytes_per_pixel=3;"
    },
    {
        "line": 323,
        "fullcodeline": "length=image->rows*(bytes_per_line+image->columns % 2);"
    },
    {
        "line": 250,
        "fullcodeline": "for (bit=7; bit >= 0; bit--)"
    },
    {
        "line": 260,
        "fullcodeline": "for (bit=7; bit >= (int) (8-(image->columns % 8)); bit--)"
    },
    {
        "line": 276,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 284,
        "fullcodeline": "bytes_per_line=image->columns;"
    },
    {
        "line": 288,
        "fullcodeline": "((sun_info.type != RT_ENCODED) && (length > sun_info.length)))"
    },
    {
        "line": 289,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"UnableToReadImageData\");"
    },
    {
        "line": 292,
        "fullcodeline": "q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 319,
        "fullcodeline": "if (image->alpha_trait != UndefinedPixelTrait)"
    },
    {
        "line": 321,
        "fullcodeline": "if (bytes_per_line == 0)"
    },
    {
        "line": 324,
        "fullcodeline": "if (((sun_info.type == RT_ENCODED) &&"
    },
    {
        "line": 328,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 252,
        "fullcodeline": "SetPixelIndex(image,(Quantum) ((*p) & (0x01 << bit) ? 0x00 : 0x01),"
    },
    {
        "line": 254,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 262,
        "fullcodeline": "SetPixelIndex(image,(Quantum) ((*p) & (0x01 << bit) ? 0x00 :"
    },
    {
        "line": 264,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 287,
        "fullcodeline": "(length > (bytes_per_line*image->rows))) ||"
    },
    {
        "line": 293,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 295,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 302,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 304,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 320,
        "fullcodeline": "bytes_per_pixel++;"
    },
    {
        "line": 322,
        "fullcodeline": "bytes_per_line=bytes_per_pixel*image->columns;"
    },
    {
        "line": 326,
        "fullcodeline": "((sun_info.type != RT_ENCODED) && (length > sun_info.length)))"
    },
    {
        "line": 327,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"UnableToReadImageData\");"
    },
    {
        "line": 330,
        "fullcodeline": "q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 297,
        "fullcodeline": "SetPixelIndex(image,*p++,q);"
    },
    {
        "line": 298,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 300,
        "fullcodeline": "if ((image->columns % 2) != 0)"
    },
    {
        "line": 301,
        "fullcodeline": "p++;"
    },
    {
        "line": 306,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 325,
        "fullcodeline": "(length > (bytes_per_line*image->rows))) ||"
    },
    {
        "line": 331,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 333,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 362,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 364,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 308,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 358,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 360,
        "fullcodeline": "if (((bytes_per_pixel*image->columns) % 2) != 0)"
    },
    {
        "line": 361,
        "fullcodeline": "p++;"
    },
    {
        "line": 366,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 335,
        "fullcodeline": "if (image->alpha_trait != UndefinedPixelTrait)"
    },
    {
        "line": 349,
        "fullcodeline": "if (image->colors != 0)"
    },
    {
        "line": 368,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 336,
        "fullcodeline": "SetPixelAlpha(image,ScaleCharToQuantum(*p++),q);"
    },
    {
        "line": 339,
        "fullcodeline": "SetPixelBlue(image,ScaleCharToQuantum(*p++),q);"
    },
    {
        "line": 340,
        "fullcodeline": "SetPixelGreen(image,ScaleCharToQuantum(*p++),q);"
    },
    {
        "line": 341,
        "fullcodeline": "SetPixelRed(image,ScaleCharToQuantum(*p++),q);"
    },
    {
        "line": 351,
        "fullcodeline": "SetPixelRed(image,ClampToQuantum(image->colormap[(ssize_t)"
    },
    {
        "line": 353,
        "fullcodeline": "SetPixelGreen(image,ClampToQuantum(image->colormap[(ssize_t)"
    },
    {
        "line": 355,
        "fullcodeline": "SetPixelBlue(image,ClampToQuantum(image->colormap[(ssize_t)"
    },
    {
        "line": 345,
        "fullcodeline": "SetPixelRed(image,ScaleCharToQuantum(*p++),q);"
    },
    {
        "line": 346,
        "fullcodeline": "SetPixelGreen(image,ScaleCharToQuantum(*p++),q);"
    },
    {
        "line": 347,
        "fullcodeline": "SetPixelBlue(image,ScaleCharToQuantum(*p++),q);"
    },
    {
        "line": 352,
        "fullcodeline": "GetPixelRed(image,q)].red),q);"
    },
    {
        "line": 354,
        "fullcodeline": "GetPixelGreen(image,q)].green),q);"
    },
    {
        "line": 356,
        "fullcodeline": "GetPixelBlue(image,q)].blue),q);"
    }
]