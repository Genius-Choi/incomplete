[
    {
        "line": 3,
        "fullcodeline": "int i, call_panic = 0;"
    },
    {
        "line": 9,
        "fullcodeline": "context->personality = tsk->personality;"
    },
    {
        "line": 11,
        "fullcodeline": "ab = audit_log_start(context, GFP_KERNEL, AUDIT_SYSCALL);"
    },
    {
        "line": 14,
        "fullcodeline": "audit_log_format(ab, \"arch=%x syscall=%d\","
    },
    {
        "line": 23,
        "fullcodeline": "audit_log_format(ab,"
    },
    {
        "line": 31,
        "fullcodeline": "audit_log_task_info(ab, tsk);"
    },
    {
        "line": 32,
        "fullcodeline": "audit_log_key(ab, context->filterkey);"
    },
    {
        "line": 111,
        "fullcodeline": "i = 0;"
    },
    {
        "line": 112,
        "fullcodeline": "list_for_each_entry(n, &context->names_list, list) {"
    },
    {
        "line": 118,
        "fullcodeline": "audit_log_proctitle(tsk, context);"
    },
    {
        "line": 121,
        "fullcodeline": "ab = audit_log_start(context, GFP_KERNEL, AUDIT_EOE);"
    },
    {
        "line": 12,
        "fullcodeline": "if (!ab)"
    },
    {
        "line": 16,
        "fullcodeline": "if (context->personality != PER_LINUX)"
    },
    {
        "line": 35,
        "fullcodeline": "for (aux = context->aux; aux; aux = aux->next) {"
    },
    {
        "line": 64,
        "fullcodeline": "if (context->fds[0] >= 0) {"
    },
    {
        "line": 83,
        "fullcodeline": "for (aux = context->aux_pids; aux; aux = aux->next) {"
    },
    {
        "line": 96,
        "fullcodeline": "if (context->target_pid &&"
    },
    {
        "line": 115,
        "fullcodeline": "audit_log_name(context, n, NULL, i++, &call_panic);"
    },
    {
        "line": 17,
        "fullcodeline": "audit_log_format(ab, \" per=%lx\", context->personality);"
    },
    {
        "line": 19,
        "fullcodeline": "audit_log_format(ab, \" success=%s exit=%ld\","
    },
    {
        "line": 37,
        "fullcodeline": "ab = audit_log_start(context, GFP_KERNEL, aux->type);"
    },
    {
        "line": 62,
        "fullcodeline": "show_special(context, &call_panic);"
    },
    {
        "line": 65,
        "fullcodeline": "ab = audit_log_start(context, GFP_KERNEL, AUDIT_FD_PAIR);"
    },
    {
        "line": 74,
        "fullcodeline": "ab = audit_log_start(context, GFP_KERNEL, AUDIT_SOCKADDR);"
    },
    {
        "line": 84,
        "fullcodeline": "struct audit_aux_data_pids *axs = (void *)aux;"
    },
    {
        "line": 97,
        "fullcodeline": "audit_log_pid_context(context, context->target_pid,"
    },
    {
        "line": 101,
        "fullcodeline": "call_panic = 1;"
    },
    {
        "line": 104,
        "fullcodeline": "ab = audit_log_start(context, GFP_KERNEL, AUDIT_CWD);"
    },
    {
        "line": 38,
        "fullcodeline": "if (!ab)"
    },
    {
        "line": 86,
        "fullcodeline": "for (i = 0; i < axs->pid_count; i++)"
    },
    {
        "line": 20,
        "fullcodeline": "(context->return_valid==AUDITSC_SUCCESS)?\"yes\":\"no\","
    },
    {
        "line": 67,
        "fullcodeline": "audit_log_format(ab, \"fd0=%d fd1=%d\","
    },
    {
        "line": 76,
        "fullcodeline": "audit_log_format(ab, \"saddr=\");"
    },
    {
        "line": 77,
        "fullcodeline": "audit_log_n_hex(ab, (void *)context->sockaddr,"
    },
    {
        "line": 87,
        "fullcodeline": "if (audit_log_pid_context(context, axs->target_pid[i],"
    },
    {
        "line": 106,
        "fullcodeline": "audit_log_d_path(ab, \"cwd=\", &context->pwd);"
    },
    {
        "line": 44,
        "fullcodeline": "struct audit_aux_data_bprm_fcaps *axs = (void *)aux;"
    },
    {
        "line": 45,
        "fullcodeline": "audit_log_format(ab, \"fver=%x\", axs->fcap_ver);"
    },
    {
        "line": 46,
        "fullcodeline": "audit_log_cap(ab, \"fp\", &axs->fcap.permitted);"
    },
    {
        "line": 47,
        "fullcodeline": "audit_log_cap(ab, \"fi\", &axs->fcap.inheritable);"
    },
    {
        "line": 48,
        "fullcodeline": "audit_log_format(ab, \" fe=%d\", axs->fcap.fE);"
    },
    {
        "line": 49,
        "fullcodeline": "audit_log_cap(ab, \"old_pp\", &axs->old_pcap.permitted);"
    },
    {
        "line": 50,
        "fullcodeline": "audit_log_cap(ab, \"old_pi\", &axs->old_pcap.inheritable);"
    },
    {
        "line": 51,
        "fullcodeline": "audit_log_cap(ab, \"old_pe\", &axs->old_pcap.effective);"
    },
    {
        "line": 52,
        "fullcodeline": "audit_log_cap(ab, \"new_pp\", &axs->new_pcap.permitted);"
    },
    {
        "line": 53,
        "fullcodeline": "audit_log_cap(ab, \"new_pi\", &axs->new_pcap.inheritable);"
    },
    {
        "line": 54,
        "fullcodeline": "audit_log_cap(ab, \"new_pe\", &axs->new_pcap.effective);"
    },
    {
        "line": 93,
        "fullcodeline": "call_panic = 1;"
    }
]