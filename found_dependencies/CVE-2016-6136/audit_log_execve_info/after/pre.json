[
    {
        "line": 21,
        "fullcodeline": "char abuf[96];"
    },
    {
        "line": 27,
        "fullcodeline": "WARN_ON_ONCE(MAX_EXECVE_AUDIT_LEN > 7500);"
    },
    {
        "line": 28,
        "fullcodeline": "len_max = MAX_EXECVE_AUDIT_LEN;"
    },
    {
        "line": 31,
        "fullcodeline": "buf_head = kmalloc(MAX_EXECVE_AUDIT_LEN + 1, GFP_KERNEL);"
    },
    {
        "line": 36,
        "fullcodeline": "buf = buf_head;"
    },
    {
        "line": 38,
        "fullcodeline": "audit_log_format(*ab, \"argc=%d\", context->execve.argc);"
    },
    {
        "line": 40,
        "fullcodeline": "len_rem = len_max;"
    },
    {
        "line": 41,
        "fullcodeline": "len_buf = 0;"
    },
    {
        "line": 42,
        "fullcodeline": "len_full = 0;"
    },
    {
        "line": 43,
        "fullcodeline": "require_data = true;"
    },
    {
        "line": 44,
        "fullcodeline": "encode = false;"
    },
    {
        "line": 45,
        "fullcodeline": "iter = 0;"
    },
    {
        "line": 46,
        "fullcodeline": "arg = 0;"
    },
    {
        "line": 32,
        "fullcodeline": "if (!buf_head) {"
    },
    {
        "line": 167,
        "fullcodeline": "} while (arg < context->execve.argc);"
    },
    {
        "line": 33,
        "fullcodeline": "audit_panic(\"out of memory for argv string\");"
    },
    {
        "line": 55,
        "fullcodeline": "if (len_full == 0)"
    },
    {
        "line": 102,
        "fullcodeline": "if (len_buf > 0) {"
    },
    {
        "line": 56,
        "fullcodeline": "len_full = strnlen_user(p, MAX_ARG_STRLEN) - 1;"
    },
    {
        "line": 67,
        "fullcodeline": "len_tmp = strncpy_from_user(&buf_head[len_buf], p,"
    },
    {
        "line": 94,
        "fullcodeline": "len_buf += len_tmp;"
    },
    {
        "line": 95,
        "fullcodeline": "buf_head[len_buf] = '\\0';"
    },
    {
        "line": 98,
        "fullcodeline": "len_abuf = (encode ? len_buf * 2 : len_buf + 2);"
    },
    {
        "line": 117,
        "fullcodeline": "len_tmp = 0;"
    },
    {
        "line": 134,
        "fullcodeline": "abuf[sizeof(abuf) - 1] = '\\0';"
    },
    {
        "line": 137,
        "fullcodeline": "audit_log_format(*ab, \"%s\", abuf);"
    },
    {
        "line": 138,
        "fullcodeline": "len_rem -= len_tmp;"
    },
    {
        "line": 139,
        "fullcodeline": "len_tmp = len_buf;"
    },
    {
        "line": 155,
        "fullcodeline": "len_buf -= len_tmp;"
    },
    {
        "line": 156,
        "fullcodeline": "buf += len_tmp;"
    },
    {
        "line": 160,
        "fullcodeline": "if ((len_buf == 0) && !require_data) {"
    },
    {
        "line": 161,
        "fullcodeline": "arg++;"
    },
    {
        "line": 162,
        "fullcodeline": "iter = 0;"
    },
    {
        "line": 163,
        "fullcodeline": "len_full = 0;"
    },
    {
        "line": 164,
        "fullcodeline": "require_data = true;"
    },
    {
        "line": 165,
        "fullcodeline": "encode = false;"
    },
    {
        "line": 61,
        "fullcodeline": "if (buf != buf_head) {"
    },
    {
        "line": 69,
        "fullcodeline": "if (len_tmp == -EFAULT) {"
    },
    {
        "line": 107,
        "fullcodeline": "if ((sizeof(abuf) + 8) > len_rem) {"
    },
    {
        "line": 133,
        "fullcodeline": "WARN_ON(len_tmp >= sizeof(abuf));"
    },
    {
        "line": 62,
        "fullcodeline": "memmove(buf_head, buf, len_buf);"
    },
    {
        "line": 63,
        "fullcodeline": "buf = buf_head;"
    },
    {
        "line": 68,
        "fullcodeline": "len_max - len_buf);"
    },
    {
        "line": 71,
        "fullcodeline": "send_sig(SIGKILL, current, 0);"
    },
    {
        "line": 108,
        "fullcodeline": "len_rem = len_max;"
    },
    {
        "line": 110,
        "fullcodeline": "*ab = audit_log_start(context,"
    },
    {
        "line": 118,
        "fullcodeline": "if (require_data || (iter > 0) ||"
    },
    {
        "line": 119,
        "fullcodeline": "((len_abuf + sizeof(abuf)) > len_rem)) {"
    },
    {
        "line": 126,
        "fullcodeline": "len_tmp += snprintf(&abuf[len_tmp],"
    },
    {
        "line": 143,
        "fullcodeline": "audit_log_n_hex(*ab, buf, len_tmp);"
    },
    {
        "line": 144,
        "fullcodeline": "len_rem -= len_tmp * 2;"
    },
    {
        "line": 145,
        "fullcodeline": "len_abuf -= len_tmp * 2;"
    },
    {
        "line": 112,
        "fullcodeline": "if (!*ab)"
    },
    {
        "line": 120,
        "fullcodeline": "if (iter == 0) {"
    },
    {
        "line": 130,
        "fullcodeline": "len_tmp += snprintf(&abuf[len_tmp],"
    },
    {
        "line": 141,
        "fullcodeline": "if (len_abuf > len_rem)"
    },
    {
        "line": 149,
        "fullcodeline": "audit_log_n_string(*ab, buf, len_tmp);"
    },
    {
        "line": 150,
        "fullcodeline": "len_rem -= len_tmp + 2;"
    },
    {
        "line": 153,
        "fullcodeline": "len_abuf -= len_tmp;"
    },
    {
        "line": 73,
        "fullcodeline": "} else if (len_tmp == (len_max - len_buf)) {"
    },
    {
        "line": 121,
        "fullcodeline": "len_tmp += snprintf(&abuf[len_tmp],"
    },
    {
        "line": 127,
        "fullcodeline": "sizeof(abuf) - len_tmp,"
    },
    {
        "line": 128,
        "fullcodeline": "\" a%d[%d]=\", arg, iter++);"
    },
    {
        "line": 142,
        "fullcodeline": "len_tmp = len_rem / 2; /* encoding */"
    },
    {
        "line": 147,
        "fullcodeline": "if (len_abuf > len_rem)"
    },
    {
        "line": 75,
        "fullcodeline": "require_data = true;"
    },
    {
        "line": 81,
        "fullcodeline": "len_full = len_full * 2;"
    },
    {
        "line": 82,
        "fullcodeline": "p += len_tmp;"
    },
    {
        "line": 131,
        "fullcodeline": "sizeof(abuf) - len_tmp,"
    },
    {
        "line": 148,
        "fullcodeline": "len_tmp = len_rem - 2; /* quotes */"
    },
    {
        "line": 84,
        "fullcodeline": "require_data = false;"
    },
    {
        "line": 92,
        "fullcodeline": "p += len_tmp + 1;"
    },
    {
        "line": 122,
        "fullcodeline": "sizeof(abuf) - len_tmp,"
    },
    {
        "line": 89,
        "fullcodeline": "if (len_full < len_max)"
    },
    {
        "line": 90,
        "fullcodeline": "len_full = (encode ?"
    },
    {
        "line": 86,
        "fullcodeline": "encode = audit_string_contains_control("
    },
    {
        "line": 91,
        "fullcodeline": "len_tmp * 2 : len_tmp);"
    }
]