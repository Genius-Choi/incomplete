[
    {
        "line": 47,
        "fullcodeline": "(void) SeekBlob(image,0,SEEK_SET);"
    },
    {
        "line": 48,
        "fullcodeline": "while (EOFBlob(image) != MagickFalse)"
    },
    {
        "line": 226,
        "fullcodeline": "(void) CloseBlob(image);"
    },
    {
        "line": 227,
        "fullcodeline": "return(GetFirstImageInList(image));"
    },
    {
        "line": 53,
        "fullcodeline": "ldblk=ReadBlobLSBLong(image);"
    },
    {
        "line": 56,
        "fullcodeline": "HDR.Type[3]=ldblk % 10; ldblk /= 10;  /* T digit */"
    },
    {
        "line": 57,
        "fullcodeline": "HDR.Type[2]=ldblk % 10; ldblk /= 10;  /* P digit */"
    },
    {
        "line": 58,
        "fullcodeline": "HDR.Type[1]=ldblk % 10; ldblk /= 10;  /* O digit */"
    },
    {
        "line": 59,
        "fullcodeline": "HDR.Type[0]=ldblk;        /* M digit */"
    },
    {
        "line": 100,
        "fullcodeline": "image->columns=(size_t) HDR.nRows;"
    },
    {
        "line": 101,
        "fullcodeline": "image->rows=(size_t) HDR.nCols;"
    },
    {
        "line": 102,
        "fullcodeline": "SetImageColorspace(image,GRAYColorspace,exception);"
    },
    {
        "line": 108,
        "fullcodeline": "status=SetImageExtent(image,image->columns,image->rows,exception);"
    },
    {
        "line": 111,
        "fullcodeline": "quantum_info=AcquireQuantumInfo(image_info,image);"
    },
    {
        "line": 141,
        "fullcodeline": "image->depth=depth;"
    },
    {
        "line": 144,
        "fullcodeline": "status=SetQuantumFormat(image,quantum_info,format_type);"
    },
    {
        "line": 145,
        "fullcodeline": "status=SetQuantumDepth(image,quantum_info,depth);"
    },
    {
        "line": 146,
        "fullcodeline": "status=SetQuantumEndian(image,quantum_info,endian);"
    },
    {
        "line": 147,
        "fullcodeline": "SetQuantumScale(quantum_info,1.0);"
    },
    {
        "line": 148,
        "fullcodeline": "pixels=(unsigned char *) GetQuantumPixels(quantum_info);"
    },
    {
        "line": 192,
        "fullcodeline": "quantum_info=DestroyQuantumInfo(quantum_info);"
    },
    {
        "line": 193,
        "fullcodeline": "rotate_image=RotateImage(image,90.0,exception);"
    },
    {
        "line": 214,
        "fullcodeline": "AcquireNextImage(image_info,image,exception);"
    },
    {
        "line": 220,
        "fullcodeline": "image=SyncNextImageInList(image);"
    },
    {
        "line": 221,
        "fullcodeline": "status=SetImageProgress(image,LoadImagesTag,TellBlob(image),"
    },
    {
        "line": 54,
        "fullcodeline": "if ((ldblk > 9999) || (ldblk < 0))"
    },
    {
        "line": 60,
        "fullcodeline": "if (HDR.Type[3] != 0)"
    },
    {
        "line": 62,
        "fullcodeline": "if (HDR.Type[2] != 0)"
    },
    {
        "line": 64,
        "fullcodeline": "if (HDR.Type[0] == 0)"
    },
    {
        "line": 80,
        "fullcodeline": "if ((HDR.imagf != 0) && (HDR.imagf != 1))"
    },
    {
        "line": 82,
        "fullcodeline": "if (HDR.nameLen > 0xFFFF)"
    },
    {
        "line": 84,
        "fullcodeline": "for (i=0; i < (ssize_t) HDR.nameLen; i++)"
    },
    {
        "line": 103,
        "fullcodeline": "if (image_info->ping != MagickFalse)"
    },
    {
        "line": 109,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 112,
        "fullcodeline": "if (quantum_info == (QuantumInfo *) NULL)"
    },
    {
        "line": 142,
        "fullcodeline": "if (HDR.Type[0] != 0)"
    },
    {
        "line": 149,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 178,
        "fullcodeline": "if (HDR.imagf == 1)"
    },
    {
        "line": 194,
        "fullcodeline": "if (rotate_image != (Image *) NULL)"
    },
    {
        "line": 199,
        "fullcodeline": "if (EOFBlob(image) != MagickFalse)"
    },
    {
        "line": 208,
        "fullcodeline": "if (image_info->number_scenes != 0)"
    },
    {
        "line": 215,
        "fullcodeline": "if (GetNextImageInList(image) == (Image *) NULL)"
    },
    {
        "line": 223,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 66,
        "fullcodeline": "HDR.nRows=ReadBlobLSBLong(image);"
    },
    {
        "line": 67,
        "fullcodeline": "HDR.nCols=ReadBlobLSBLong(image);"
    },
    {
        "line": 68,
        "fullcodeline": "HDR.imagf=ReadBlobLSBLong(image);"
    },
    {
        "line": 69,
        "fullcodeline": "HDR.nameLen=ReadBlobLSBLong(image);"
    },
    {
        "line": 70,
        "fullcodeline": "endian=LSBEndian;"
    },
    {
        "line": 92,
        "fullcodeline": "byte=ReadBlobByte(image);"
    },
    {
        "line": 105,
        "fullcodeline": "Swap(image->columns,image->rows);"
    },
    {
        "line": 117,
        "fullcodeline": "format_type=FloatingPointQuantumFormat;"
    },
    {
        "line": 118,
        "fullcodeline": "depth=64;"
    },
    {
        "line": 121,
        "fullcodeline": "format_type=FloatingPointQuantumFormat;"
    },
    {
        "line": 122,
        "fullcodeline": "depth=32;"
    },
    {
        "line": 125,
        "fullcodeline": "format_type=UnsignedQuantumFormat;"
    },
    {
        "line": 126,
        "fullcodeline": "depth=16;"
    },
    {
        "line": 129,
        "fullcodeline": "format_type=SignedQuantumFormat;"
    },
    {
        "line": 130,
        "fullcodeline": "depth=16;"
    },
    {
        "line": 133,
        "fullcodeline": "format_type=UnsignedQuantumFormat;"
    },
    {
        "line": 134,
        "fullcodeline": "depth=8;"
    },
    {
        "line": 137,
        "fullcodeline": "format_type=UnsignedQuantumFormat;"
    },
    {
        "line": 138,
        "fullcodeline": "depth=8;"
    },
    {
        "line": 143,
        "fullcodeline": "SetQuantumEndian(image,quantum_info,MSBEndian);"
    },
    {
        "line": 157,
        "fullcodeline": "count=ReadBlob(image,depth/8*image->columns,(char *) pixels);"
    },
    {
        "line": 160,
        "fullcodeline": "q=QueueAuthenticPixels(image,0,image->rows-y-1,image->columns,1,"
    },
    {
        "line": 164,
        "fullcodeline": "(void) ImportQuantumPixels(image,(CacheView *) NULL,quantum_info,"
    },
    {
        "line": 196,
        "fullcodeline": "image=DestroyImage(image);"
    },
    {
        "line": 197,
        "fullcodeline": "image=rotate_image;"
    },
    {
        "line": 201,
        "fullcodeline": "ThrowFileException(exception,CorruptImageError,\"UnexpectedEndOfFile\","
    },
    {
        "line": 222,
        "fullcodeline": "GetBlobSize(image));"
    },
    {
        "line": 74,
        "fullcodeline": "HDR.nRows=ReadBlobMSBLong(image);"
    },
    {
        "line": 75,
        "fullcodeline": "HDR.nCols=ReadBlobMSBLong(image);"
    },
    {
        "line": 76,
        "fullcodeline": "HDR.imagf=ReadBlobMSBLong(image);"
    },
    {
        "line": 77,
        "fullcodeline": "HDR.nameLen=ReadBlobMSBLong(image);"
    },
    {
        "line": 78,
        "fullcodeline": "endian=MSBEndian;"
    },
    {
        "line": 83,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 93,
        "fullcodeline": "if (byte == EOF)"
    },
    {
        "line": 110,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 113,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 158,
        "fullcodeline": "if (count == -1)"
    },
    {
        "line": 162,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 166,
        "fullcodeline": "if ((HDR.Type[1] == 2) || (HDR.Type[1] == 3))"
    },
    {
        "line": 168,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 170,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 179,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 209,
        "fullcodeline": "if (image->scene >= (image_info->scene+image_info->number_scenes-1))"
    },
    {
        "line": 217,
        "fullcodeline": "image=DestroyImageList(image);"
    },
    {
        "line": 218,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 95,
        "fullcodeline": "ThrowFileException(exception,CorruptImageError,\"UnexpectedEndOfFile\","
    },
    {
        "line": 167,
        "fullcodeline": "FixSignedValues(image,q,(int) image->columns);"
    },
    {
        "line": 172,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 184,
        "fullcodeline": "count=ReadBlob(image,depth/8*image->columns,(char *) pixels);"
    },
    {
        "line": 174,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 185,
        "fullcodeline": "if (count == -1)"
    },
    {
        "line": 187,
        "fullcodeline": "if (HDR.Type[1] == 0)"
    },
    {
        "line": 188,
        "fullcodeline": "InsertComplexDoubleRow(image,(double *) pixels,y,0,0,exception);"
    },
    {
        "line": 190,
        "fullcodeline": "InsertComplexFloatRow(image,(float *) pixels,y,0,0,exception);"
    }
]