[
    {
        "line": 6,
        "fullcodeline": "unsigned long base_pages_to_flush = TLB_FLUSH_ALL;"
    },
    {
        "line": 8,
        "fullcodeline": "preempt_disable();"
    },
    {
        "line": 31,
        "fullcodeline": "trace_tlb_flush(TLB_LOCAL_MM_SHOOTDOWN, base_pages_to_flush);"
    },
    {
        "line": 39,
        "fullcodeline": "preempt_enable();"
    },
    {
        "line": 9,
        "fullcodeline": "if (current->active_mm != mm)"
    },
    {
        "line": 17,
        "fullcodeline": "if ((end != TLB_FLUSH_ALL) && !(vmflag & VM_HUGETLB))"
    },
    {
        "line": 20,
        "fullcodeline": "if (base_pages_to_flush > tlb_single_page_flush_ceiling) {"
    },
    {
        "line": 33,
        "fullcodeline": "if (base_pages_to_flush == TLB_FLUSH_ALL) {"
    },
    {
        "line": 37,
        "fullcodeline": "if (cpumask_any_but(mm_cpumask(mm), smp_processor_id()) < nr_cpu_ids)"
    },
    {
        "line": 13,
        "fullcodeline": "leave_mm(smp_processor_id());"
    },
    {
        "line": 18,
        "fullcodeline": "base_pages_to_flush = (end - start) >> PAGE_SHIFT;"
    },
    {
        "line": 21,
        "fullcodeline": "base_pages_to_flush = TLB_FLUSH_ALL;"
    },
    {
        "line": 22,
        "fullcodeline": "count_vm_tlb_event(NR_TLB_LOCAL_FLUSH_ALL);"
    },
    {
        "line": 23,
        "fullcodeline": "local_flush_tlb();"
    },
    {
        "line": 34,
        "fullcodeline": "start = 0UL;"
    },
    {
        "line": 35,
        "fullcodeline": "end = TLB_FLUSH_ALL;"
    },
    {
        "line": 38,
        "fullcodeline": "flush_tlb_others(mm_cpumask(mm), mm, start, end);"
    },
    {
        "line": 26,
        "fullcodeline": "for (addr = start; addr < end;\taddr += PAGE_SIZE) {"
    },
    {
        "line": 27,
        "fullcodeline": "count_vm_tlb_event(NR_TLB_LOCAL_FLUSH_ONE);"
    },
    {
        "line": 28,
        "fullcodeline": "__flush_tlb_single(addr);"
    }
]