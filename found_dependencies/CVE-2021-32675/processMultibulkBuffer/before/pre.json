[
    {
        "line": 2,
        "fullcodeline": "char *newline = NULL;"
    },
    {
        "line": 46,
        "fullcodeline": "serverAssertWithInfo(c,NULL,c->multibulklen > 0);"
    },
    {
        "line": 6,
        "fullcodeline": "if (c->multibulklen == 0) {"
    },
    {
        "line": 8,
        "fullcodeline": "serverAssertWithInfo(c,NULL,c->argc == 0);"
    },
    {
        "line": 11,
        "fullcodeline": "newline = strchr(c->querybuf+c->qb_pos,'\\r');"
    },
    {
        "line": 26,
        "fullcodeline": "serverAssertWithInfo(c,NULL,c->querybuf[c->qb_pos] == '*');"
    },
    {
        "line": 27,
        "fullcodeline": "ok = string2ll(c->querybuf+1+c->qb_pos,newline-(c->querybuf+1+c->qb_pos),&ll);"
    },
    {
        "line": 34,
        "fullcodeline": "c->qb_pos = (newline-c->querybuf)+2;"
    },
    {
        "line": 38,
        "fullcodeline": "c->multibulklen = ll;"
    },
    {
        "line": 42,
        "fullcodeline": "c->argv = zmalloc(sizeof(robj*)*c->multibulklen);"
    },
    {
        "line": 43,
        "fullcodeline": "c->argv_len_sum = 0;"
    },
    {
        "line": 12,
        "fullcodeline": "if (newline == NULL) {"
    },
    {
        "line": 36,
        "fullcodeline": "if (ll <= 0) return C_OK;"
    },
    {
        "line": 49,
        "fullcodeline": "if (c->bulklen == -1) {"
    },
    {
        "line": 21,
        "fullcodeline": "if (newline-(c->querybuf+c->qb_pos) > (ssize_t)(sdslen(c->querybuf)-c->qb_pos-2))"
    },
    {
        "line": 28,
        "fullcodeline": "if (!ok || ll > 1024*1024) {"
    },
    {
        "line": 29,
        "fullcodeline": "addReplyError(c,\"Protocol error: invalid multibulk length\");"
    },
    {
        "line": 50,
        "fullcodeline": "newline = strchr(c->querybuf+c->qb_pos,'\\r');"
    },
    {
        "line": 73,
        "fullcodeline": "ok = string2ll(c->querybuf+c->qb_pos+1,newline-(c->querybuf+c->qb_pos+1),&ll);"
    },
    {
        "line": 81,
        "fullcodeline": "c->qb_pos = newline-c->querybuf+2;"
    },
    {
        "line": 100,
        "fullcodeline": "c->bulklen = ll;"
    },
    {
        "line": 104,
        "fullcodeline": "if (sdslen(c->querybuf)-c->qb_pos < (size_t)(c->bulklen+2)) {"
    },
    {
        "line": 13,
        "fullcodeline": "if (sdslen(c->querybuf)-c->qb_pos > PROTO_INLINE_MAX_SIZE) {"
    },
    {
        "line": 51,
        "fullcodeline": "if (newline == NULL) {"
    },
    {
        "line": 65,
        "fullcodeline": "if (c->querybuf[c->qb_pos] != '$') {"
    },
    {
        "line": 82,
        "fullcodeline": "if (ll >= PROTO_MBULK_BIG_ARG) {"
    },
    {
        "line": 128,
        "fullcodeline": "c->bulklen = -1;"
    },
    {
        "line": 129,
        "fullcodeline": "c->multibulklen--;"
    },
    {
        "line": 14,
        "fullcodeline": "addReplyError(c,\"Protocol error: too big mbulk count string\");"
    },
    {
        "line": 15,
        "fullcodeline": "setProtocolError(\"too big mbulk count string\",c);"
    },
    {
        "line": 62,
        "fullcodeline": "if (newline-(c->querybuf+c->qb_pos) > (ssize_t)(sdslen(c->querybuf)-c->qb_pos-2))"
    },
    {
        "line": 66,
        "fullcodeline": "addReplyErrorFormat(c,"
    },
    {
        "line": 74,
        "fullcodeline": "if (!ok || ll < 0 ||"
    },
    {
        "line": 75,
        "fullcodeline": "(!(c->flags & CLIENT_MASTER) && ll > server.proto_max_bulk_len)) {"
    },
    {
        "line": 76,
        "fullcodeline": "addReplyError(c,\"Protocol error: invalid bulk length\");"
    },
    {
        "line": 111,
        "fullcodeline": "if (c->qb_pos == 0 &&"
    },
    {
        "line": 113,
        "fullcodeline": "sdslen(c->querybuf) == (size_t)(c->bulklen+2))"
    },
    {
        "line": 116,
        "fullcodeline": "c->argv_len_sum += c->bulklen;"
    },
    {
        "line": 120,
        "fullcodeline": "c->querybuf = sdsnewlen(SDS_NOINIT,c->bulklen+2);"
    },
    {
        "line": 121,
        "fullcodeline": "sdsclear(c->querybuf);"
    },
    {
        "line": 52,
        "fullcodeline": "if (sdslen(c->querybuf)-c->qb_pos > PROTO_INLINE_MAX_SIZE) {"
    },
    {
        "line": 53,
        "fullcodeline": "addReplyError(c,"
    },
    {
        "line": 92,
        "fullcodeline": "if (sdslen(c->querybuf)-c->qb_pos <= (size_t)ll+2) {"
    },
    {
        "line": 93,
        "fullcodeline": "sdsrange(c->querybuf,c->qb_pos,-1);"
    },
    {
        "line": 94,
        "fullcodeline": "c->qb_pos = 0;"
    },
    {
        "line": 97,
        "fullcodeline": "c->querybuf = sdsMakeRoomFor(c->querybuf,ll+2-sdslen(c->querybuf));"
    },
    {
        "line": 112,
        "fullcodeline": "c->bulklen >= PROTO_MBULK_BIG_ARG &&"
    },
    {
        "line": 115,
        "fullcodeline": "c->argv[c->argc++] = createObject(OBJ_STRING,c->querybuf);"
    },
    {
        "line": 117,
        "fullcodeline": "sdsIncrLen(c->querybuf,-2); /* remove CRLF */"
    },
    {
        "line": 125,
        "fullcodeline": "c->argv_len_sum += c->bulklen;"
    },
    {
        "line": 126,
        "fullcodeline": "c->qb_pos += c->bulklen+2;"
    },
    {
        "line": 124,
        "fullcodeline": "createStringObject(c->querybuf+c->qb_pos,c->bulklen);"
    },
    {
        "line": 123,
        "fullcodeline": "c->argv[c->argc++] ="
    }
]