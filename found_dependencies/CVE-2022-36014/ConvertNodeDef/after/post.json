[
    {
        "line": 3,
        "fullcodeline": "VLOG(4) << \"Importing: \" << node.name();"
    },
    {
        "line": 7,
        "fullcodeline": "OperationState state(ConvertLocation(node), absl::StrCat(\"tfg.\", node.op()));"
    },
    {
        "line": 12,
        "fullcodeline": "const OpRegistrationData *op_reg_data = nullptr;"
    },
    {
        "line": 23,
        "fullcodeline": "state.attributes.reserve(node.attr_size() + 3);"
    },
    {
        "line": 34,
        "fullcodeline": "const auto add_full_type = [&](const FullTypeDef &full_type_def) {"
    },
    {
        "line": 71,
        "fullcodeline": "result_segments.reserve(op_def->output_arg_size());"
    },
    {
        "line": 72,
        "fullcodeline": "state.types.reserve(op_def->output_arg_size() + 1);"
    },
    {
        "line": 79,
        "fullcodeline": "state.types.push_back(dialect_->getControlType());"
    },
    {
        "line": 83,
        "fullcodeline": "state.operands.reserve(node.input_size());"
    },
    {
        "line": 84,
        "fullcodeline": "SmallVector<Value> control_operands;"
    },
    {
        "line": 108,
        "fullcodeline": "unsigned num_data_operands = state.operands.size();"
    },
    {
        "line": 109,
        "fullcodeline": "state.addOperands(control_operands);"
    },
    {
        "line": 112,
        "fullcodeline": "Operation *op = builder.create(state);"
    },
    {
        "line": 122,
        "fullcodeline": "std::unique_ptr<ResultInfo> &info = s[node.name()];"
    },
    {
        "line": 126,
        "fullcodeline": "info->resolved = true;"
    },
    {
        "line": 128,
        "fullcodeline": "info->data = op->getResults().drop_back();"
    },
    {
        "line": 145,
        "fullcodeline": "info->backedges.clear();"
    },
    {
        "line": 4,
        "fullcodeline": "if (node.op().empty())"
    },
    {
        "line": 13,
        "fullcodeline": "if ((op_reg_data = registry_.LookUp(node.op()))) {"
    },
    {
        "line": 24,
        "fullcodeline": "if (!node.device().empty()) {"
    },
    {
        "line": 28,
        "fullcodeline": "if (!node.name().empty()) {"
    },
    {
        "line": 40,
        "fullcodeline": "if (node.has_experimental_type()) {"
    },
    {
        "line": 123,
        "fullcodeline": "if (!info) {"
    },
    {
        "line": 147,
        "fullcodeline": "return ::tensorflow::OkStatus();"
    },
    {
        "line": 14,
        "fullcodeline": "op_def = &op_reg_data->op_def;"
    },
    {
        "line": 25,
        "fullcodeline": "state.addAttribute(dialect_->getDeviceAttrIdentifier(),"
    },
    {
        "line": 29,
        "fullcodeline": "state.addAttribute(dialect_->getNameAttrIdentifier(),"
    },
    {
        "line": 41,
        "fullcodeline": "TF_RETURN_IF_ERROR(add_full_type(node.experimental_type()));"
    },
    {
        "line": 54,
        "fullcodeline": "state.addAttribute(name_attr.first, attr);"
    },
    {
        "line": 74,
        "fullcodeline": "unsigned index = state.types.size();"
    },
    {
        "line": 77,
        "fullcodeline": "result_segments.emplace_back(index, size);"
    },
    {
        "line": 114,
        "fullcodeline": "r.info->backedges.push_back("
    },
    {
        "line": 118,
        "fullcodeline": "r.info->backedges.push_back("
    },
    {
        "line": 124,
        "fullcodeline": "info = std::make_unique<ResultInfo>();"
    },
    {
        "line": 127,
        "fullcodeline": "info->control = *std::prev(op->result_end());"
    },
    {
        "line": 130,
        "fullcodeline": "const std::pair<unsigned, unsigned> &segment = std::get<0>(it);"
    },
    {
        "line": 131,
        "fullcodeline": "info->outputs.emplace(std::get<1>(it).name(),"
    },
    {
        "line": 143,
        "fullcodeline": "backedge.operand->set(value);"
    },
    {
        "line": 5,
        "fullcodeline": "return InvalidArgument(\"Node \", node.name(), \" has an empty op name\");"
    },
    {
        "line": 16,
        "fullcodeline": "auto it = function_op_defs_.find(node.op());"
    },
    {
        "line": 19,
        "fullcodeline": "op_def = it->second;"
    },
    {
        "line": 26,
        "fullcodeline": "b_.getStringAttr(node.device()));"
    },
    {
        "line": 30,
        "fullcodeline": "b_.getStringAttr(node.name()));"
    },
    {
        "line": 50,
        "fullcodeline": "if (name_attr.first.empty())"
    },
    {
        "line": 59,
        "fullcodeline": "if (attr_def.has_default_value() &&"
    },
    {
        "line": 115,
        "fullcodeline": "Backedge{r.id, &op->getOpOperand(r.operand_index)});"
    },
    {
        "line": 119,
        "fullcodeline": "Backedge{r.id, &op->getOpOperand(num_data_operands + r.operand_index)});"
    },
    {
        "line": 132,
        "fullcodeline": "info->data.slice(segment.first, segment.second));"
    },
    {
        "line": 138,
        "fullcodeline": "if (backedge.id.IsControl()) {"
    },
    {
        "line": 17,
        "fullcodeline": "if (it == function_op_defs_.end())"
    },
    {
        "line": 42,
        "fullcodeline": "} else if (op_reg_data && op_reg_data->type_ctor) {"
    },
    {
        "line": 60,
        "fullcodeline": "!state.attributes.get(attr_def.name())) {"
    },
    {
        "line": 64,
        "fullcodeline": "state.addAttribute(attr_def.name(), attr);"
    },
    {
        "line": 99,
        "fullcodeline": "control_operands.push_back(result.control);"
    },
    {
        "line": 139,
        "fullcodeline": "value = info->control;"
    },
    {
        "line": 44,
        "fullcodeline": "TF_RETURN_IF_ERROR("
    },
    {
        "line": 46,
        "fullcodeline": "TF_RETURN_IF_ERROR(add_full_type(full_type_def));"
    },
    {
        "line": 51,
        "fullcodeline": "return InvalidArgument(\"Node \", node.name(), \" has an empty attr name\");"
    },
    {
        "line": 105,
        "fullcodeline": "state.operands.push_back(result.data);"
    },
    {
        "line": 141,
        "fullcodeline": "TF_ASSIGN_OR_RETURN(value, ResolveDataResult(backedge.id, info.get()));"
    },
    {
        "line": 18,
        "fullcodeline": "return InvalidArgument(\"Unable to find OpDef for \", node.op());"
    },
    {
        "line": 45,
        "fullcodeline": "tensorflow::full_type::SpecializeType(node, *op_def, full_type_def));"
    },
    {
        "line": 96,
        "fullcodeline": "unresolved_control_operands.push_back(BackedgeResolution{"
    },
    {
        "line": 102,
        "fullcodeline": "unresolved_data_operands.push_back("
    },
    {
        "line": 103,
        "fullcodeline": "BackedgeResolution{result.info, state.operands.size(), result.id});"
    },
    {
        "line": 97,
        "fullcodeline": "result.info, control_operands.size(), result.id});"
    }
]