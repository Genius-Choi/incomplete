[
    {
        "line": 2,
        "fullcodeline": "root = os.getcwd()"
    },
    {
        "line": 6,
        "fullcodeline": "parser = argparse.ArgumentParser(prog='codecov', add_help=True,"
    },
    {
        "line": 9,
        "fullcodeline": "basics = parser.add_argument_group('======================== Basics ========================')"
    },
    {
        "line": 10,
        "fullcodeline": "basics.add_argument('--version', action='version', version='Codecov py-v'+version+\" - https://codecov.io/\")"
    },
    {
        "line": 11,
        "fullcodeline": "basics.add_argument('--token', '-t', default=os.getenv(\"CODECOV_TOKEN\"), help=\"Private repository token or @filename for file containing the token. Defaults to $CODECOV_TOKEN. Not required for public repositories on Travis CI, CircleCI and AppVeyor\")"
    },
    {
        "line": 12,
        "fullcodeline": "basics.add_argument('--file', '-f', nargs=\"*\", default=None, help=\"Target a specific file for uploading\")"
    },
    {
        "line": 13,
        "fullcodeline": "basics.add_argument('--flags', '-F', nargs=\"*\", default=None, help=\"Flag these uploaded files with custom labels\")"
    },
    {
        "line": 14,
        "fullcodeline": "basics.add_argument('--env', '-e', nargs=\"*\", default=None, help=\"Store environment variables to help distinguish CI builds.\")"
    },
    {
        "line": 15,
        "fullcodeline": "basics.add_argument('--required', action=\"store_true\", default=False, help=\"If Codecov fails it will exit 1 - possibly failing the CI build.\")"
    },
    {
        "line": 16,
        "fullcodeline": "basics.add_argument('--name', '-n', default=None, help=\"Custom defined name of the upload. Visible in Codecov UI.\")"
    },
    {
        "line": 18,
        "fullcodeline": "gcov = parser.add_argument_group('======================== gcov ========================')"
    },
    {
        "line": 19,
        "fullcodeline": "gcov.add_argument('--gcov-root', default=None, help=\"Project root directory when preparing gcov\")"
    },
    {
        "line": 20,
        "fullcodeline": "gcov.add_argument('--gcov-glob', nargs=\"*\", default=[], help=\"Paths to ignore during gcov gathering\")"
    },
    {
        "line": 21,
        "fullcodeline": "gcov.add_argument('--gcov-exec', default='gcov', help=\"gcov executable to run. Defaults to 'gcov'\")"
    },
    {
        "line": 22,
        "fullcodeline": "gcov.add_argument('--gcov-args', default='', help=\"extra arguments to pass to gcov\")"
    },
    {
        "line": 24,
        "fullcodeline": "advanced = parser.add_argument_group('======================== Advanced ========================')"
    },
    {
        "line": 25,
        "fullcodeline": "advanced.add_argument('-X', '--disable', nargs=\"*\", default=[], help=\"Disable features. Accepting **search** to disable crawling through directories, **detect** to disable detecting CI provider, **gcov** disable gcov commands, `pycov` disables running python `coverage xml`, **fix** to disable report adjustments https://docs.codecov.io/docs/fixing-reports\")"
    },
    {
        "line": 26,
        "fullcodeline": "advanced.add_argument('--root', default=None, help=\"Project directory. Default: current direcory or provided in CI environment variables\")"
    },
    {
        "line": 27,
        "fullcodeline": "advanced.add_argument('--commit', '-c', default=None, help=\"Commit SHA, set automatically\")"
    },
    {
        "line": 28,
        "fullcodeline": "advanced.add_argument('--prefix', '-P', default=None, help=\"Prefix network paths to help resolve paths: https://github.com/codecov/support/issues/472\")"
    },
    {
        "line": 29,
        "fullcodeline": "advanced.add_argument('--branch', '-b', default=None, help=\"Branch name\")"
    },
    {
        "line": 30,
        "fullcodeline": "advanced.add_argument('--build', default=None, help=\"Specify a custom build number to distinguish CI jobs, provided automatically for supported CI companies\")"
    },
    {
        "line": 31,
        "fullcodeline": "advanced.add_argument('--pr', default=None, help=\"Specify a custom pr number, provided automatically for supported CI companies\")"
    },
    {
        "line": 32,
        "fullcodeline": "advanced.add_argument('--tag', default=None, help=\"Git tag\")"
    },
    {
        "line": 34,
        "fullcodeline": "enterprise = parser.add_argument_group('======================== Enterprise ========================')"
    },
    {
        "line": 35,
        "fullcodeline": "enterprise.add_argument('--slug', '-r', default=os.getenv(\"CODECOV_SLUG\"), help=\"Specify repository slug for Enterprise ex. owner/repo\")"
    },
    {
        "line": 36,
        "fullcodeline": "enterprise.add_argument('--url', '-u', default=os.getenv(\"CODECOV_URL\", \"https://codecov.io\"), help=\"Your Codecov endpoint\")"
    },
    {
        "line": 37,
        "fullcodeline": "enterprise.add_argument('--cacert', default=os.getenv(\"CODECOV_CACERT\", os.getenv(\"CURL_CA_BUNDLE\")), help=\"Certificate pem bundle used to verify with your Codecov instance\")"
    },
    {
        "line": 39,
        "fullcodeline": "debugging = parser.add_argument_group('======================== Debugging ========================')"
    },
    {
        "line": 40,
        "fullcodeline": "debugging.add_argument('--dump', action=\"store_true\", help=\"Dump collected data and do not send to Codecov\")"
    },
    {
        "line": 41,
        "fullcodeline": "debugging.add_argument('-v', '--verbose', action=\"store_true\", help=\"Be verbose, e.g. dump the collected data\")"
    },
    {
        "line": 42,
        "fullcodeline": "debugging.add_argument('--no-color', action=\"store_true\", help=\"Do not output with color\")"
    },
    {
        "line": 52,
        "fullcodeline": "COLOR = not codecov.no_color"
    },
    {
        "line": 54,
        "fullcodeline": "include_env = set()"
    },
    {
        "line": 68,
        "fullcodeline": "write('Codecov v'+version)"
    },
    {
        "line": 69,
        "fullcodeline": "query = dict(commit='', branch='', job='', pr='', build_url='',"
    },
    {
        "line": 71,
        "fullcodeline": "language = None"
    },
    {
        "line": 347,
        "fullcodeline": "root = quote(root)"
    },
    {
        "line": 64,
        "fullcodeline": "if os.getenv(\"CODECOV_ENV\"):"
    },
    {
        "line": 73,
        "fullcodeline": "if os.getenv('TOXENV'):"
    },
    {
        "line": 78,
        "fullcodeline": "if 'detect' in codecov.disable:"
    },
    {
        "line": 47,
        "fullcodeline": "codecov = parser.parse_args(argv)"
    },
    {
        "line": 49,
        "fullcodeline": "codecov = parser.parse_args()"
    },
    {
        "line": 74,
        "fullcodeline": "_add_env_if_not_empty(include_env, 'TOXENV')"
    },
    {
        "line": 79,
        "fullcodeline": "write('XX> Detecting CI provider disabled.')"
    },
    {
        "line": 82,
        "fullcodeline": "write('==> Detecting CI provider')"
    },
    {
        "line": 313,
        "fullcodeline": "query['name'] = codecov.name"
    },
    {
        "line": 316,
        "fullcodeline": "query['flags'] = ','.join(codecov.flags)"
    },
    {
        "line": 319,
        "fullcodeline": "query['build'] = codecov.build"
    },
    {
        "line": 322,
        "fullcodeline": "query['pr'] = codecov.pr"
    },
    {
        "line": 325,
        "fullcodeline": "query['commit'] = codecov.commit"
    },
    {
        "line": 336,
        "fullcodeline": "query['slug'] = codecov.slug"
    },
    {
        "line": 339,
        "fullcodeline": "query['branch'] = codecov.branch"
    },
    {
        "line": 342,
        "fullcodeline": "query['tag'] = codecov.tag"
    },
    {
        "line": 345,
        "fullcodeline": "root = codecov.root"
    },
    {
        "line": 352,
        "fullcodeline": "write('==> Preparing upload')"
    },
    {
        "line": 360,
        "fullcodeline": "assert query.get('commit') not in ('', None), \"Commit sha is missing. Please specify via --commit=:sha\""
    },
    {
        "line": 364,
        "fullcodeline": "toc = str((try_to_run('cd %s && git ls-files' % root) or"
    },
    {
        "line": 377,
        "fullcodeline": "yaml_location = re.search("
    },
    {
        "line": 404,
        "fullcodeline": "assert query.get('job') or query.get('token'), \"Missing repository upload token\""
    },
    {
        "line": 429,
        "fullcodeline": "write('==> Collecting reports')"
    },
    {
        "line": 430,
        "fullcodeline": "reports = []"
    },
    {
        "line": 483,
        "fullcodeline": "reports = list(filter(bool, reports))"
    },
    {
        "line": 484,
        "fullcodeline": "assert len(reports) > 0, \"No coverage report found\""
    },
    {
        "line": 488,
        "fullcodeline": "env = ''"
    },
    {
        "line": 498,
        "fullcodeline": "reports = '\\n'.join((env, (toc or ''), '<<<<<< network',"
    },
    {
        "line": 502,
        "fullcodeline": "query['package'] = \"py\" + VERSION"
    },
    {
        "line": 503,
        "fullcodeline": "urlargs = (urlencode(dict([(k, v.strip()) for k, v in query.items() if v not in ('', None)]))).replace(\"+\", \"%20\")"
    },
    {
        "line": 505,
        "fullcodeline": "result = ''"
    },
    {
        "line": 59,
        "fullcodeline": "for env in codecov.env:"
    },
    {
        "line": 65,
        "fullcodeline": "for env in os.getenv(\"CODECOV_ENV\").split(','):"
    },
    {
        "line": 86,
        "fullcodeline": "if os.getenv('JENKINS_URL'):"
    },
    {
        "line": 292,
        "fullcodeline": "if not query.get('branch'):"
    },
    {
        "line": 302,
        "fullcodeline": "if not query.get('commit'):"
    },
    {
        "line": 327,
        "fullcodeline": "elif query['pr'] and query['pr'] != 'false':"
    },
    {
        "line": 356,
        "fullcodeline": "if query.get('token') and query.get('token')[0] == '@':"
    },
    {
        "line": 408,
        "fullcodeline": "if 'gcov' in codecov.disable:"
    },
    {
        "line": 432,
        "fullcodeline": "if 'search' in codecov.disable:"
    },
    {
        "line": 89,
        "fullcodeline": "query.update(dict(branch=os.getenv('ghprbSourceBranch') or os.getenv('GIT_BRANCH') or os.getenv('BRANCH_NAME'),"
    },
    {
        "line": 95,
        "fullcodeline": "root = os.getenv('WORKSPACE') or root"
    },
    {
        "line": 96,
        "fullcodeline": "write('    Jenkins Detected')"
    },
    {
        "line": 330,
        "fullcodeline": "res = try_to_run('git log -1 --pretty=%B')"
    },
    {
        "line": 357,
        "fullcodeline": "write('    Reading token from file')"
    },
    {
        "line": 358,
        "fullcodeline": "query['token'] = fopen(opj(os.getcwd(), query['token'][1:])).strip()"
    },
    {
        "line": 370,
        "fullcodeline": "prefix = codecov.prefix.strip('/')"
    },
    {
        "line": 371,
        "fullcodeline": "toc = '{}/{}'.format("
    },
    {
        "line": 383,
        "fullcodeline": "yaml_location = yaml_location.group()"
    },
    {
        "line": 384,
        "fullcodeline": "yaml_path = opj(root, yaml_location)"
    },
    {
        "line": 409,
        "fullcodeline": "write('XX> Skip processing gcov')"
    },
    {
        "line": 412,
        "fullcodeline": "dont_search_here = ("
    },
    {
        "line": 417,
        "fullcodeline": "write('==> Processing gcov (disable by -X gcov)')"
    },
    {
        "line": 418,
        "fullcodeline": "cmd = \"find %s %s -type f -name '*.gcno' %s -exec %s -pb %s {} +\" % ("
    },
    {
        "line": 424,
        "fullcodeline": "write('    Executing gcov (%s)' % cmd)"
    },
    {
        "line": 425,
        "fullcodeline": "try_to_run(cmd)"
    },
    {
        "line": 433,
        "fullcodeline": "write('XX> Searching for reports disabled')"
    },
    {
        "line": 438,
        "fullcodeline": "bower_components = '/bower_components'"
    },
    {
        "line": 439,
        "fullcodeline": "bowerrc = opj(root, '.bowerrc')"
    },
    {
        "line": 463,
        "fullcodeline": "write('    Targeting specific files')"
    },
    {
        "line": 464,
        "fullcodeline": "reports.extend(filter(bool, map(read, codecov.file)))"
    },
    {
        "line": 490,
        "fullcodeline": "write('==> Appending environment variables')"
    },
    {
        "line": 495,
        "fullcodeline": "env = '\\n'.join([\"%s=%s\" % (k, os.getenv(k, '')) for k in include_env if k]) + '\\n<<<<<< ENV'"
    },
    {
        "line": 510,
        "fullcodeline": "write(reports)"
    },
    {
        "line": 513,
        "fullcodeline": "write('==> Uploading')"
    },
    {
        "line": 514,
        "fullcodeline": "write('    .url ' + codecov.url)"
    },
    {
        "line": 515,
        "fullcodeline": "write('    .query ' + remove_token('token=<secret>', urlargs))"
    },
    {
        "line": 521,
        "fullcodeline": "s3 = None"
    },
    {
        "line": 522,
        "fullcodeline": "trys = 0"
    },
    {
        "line": 66,
        "fullcodeline": "include_env.add(env.strip())"
    },
    {
        "line": 101,
        "fullcodeline": "elif os.getenv('CI') == 'true' and os.getenv('TRAVIS') == \"true\" and os.getenv('SHIPPABLE') != 'true':"
    },
    {
        "line": 331,
        "fullcodeline": "if res and is_merge_commit.match(res.strip()):"
    },
    {
        "line": 413,
        "fullcodeline": "\"-not -path './bower_components/**' \""
    },
    {
        "line": 450,
        "fullcodeline": "for _root, dirs, files in os.walk(root):"
    },
    {
        "line": 466,
        "fullcodeline": "elif 'pycov' not in codecov.disable:"
    },
    {
        "line": 491,
        "fullcodeline": "for k in include_env:"
    },
    {
        "line": 523,
        "fullcodeline": "while trys < 3:"
    },
    {
        "line": 587,
        "fullcodeline": "write('  Email:   hello@codecov.io\\n'"
    },
    {
        "line": 60,
        "fullcodeline": "for e in env.split(','):"
    },
    {
        "line": 91,
        "fullcodeline": "commit=os.getenv('ghprbActualCommit') or os.getenv('GIT_COMMIT'),"
    },
    {
        "line": 92,
        "fullcodeline": "pr=os.getenv('ghprbPullId') or os.getenv('CHANGE_ID'),"
    },
    {
        "line": 93,
        "fullcodeline": "build=os.getenv('BUILD_NUMBER'),"
    },
    {
        "line": 94,
        "fullcodeline": "build_url=os.getenv('BUILD_URL')))"
    },
    {
        "line": 103,
        "fullcodeline": "query.update(dict(branch=os.getenv('TRAVIS_BRANCH'),"
    },
    {
        "line": 111,
        "fullcodeline": "root = os.getenv('TRAVIS_BUILD_DIR') or root"
    },
    {
        "line": 112,
        "fullcodeline": "write('    Travis Detected')"
    },
    {
        "line": 113,
        "fullcodeline": "language = (list(filter(lambda l: os.getenv('TRAVIS_%s_VERSION' % l.upper()),"
    },
    {
        "line": 117,
        "fullcodeline": "_add_env_if_not_empty(include_env, 'TRAVIS_OS_NAME')"
    },
    {
        "line": 295,
        "fullcodeline": "branch = try_to_run('git rev-parse --abbrev-ref HEAD || hg branch')"
    },
    {
        "line": 296,
        "fullcodeline": "query['branch'] = branch if branch != 'HEAD' else ''"
    },
    {
        "line": 297,
        "fullcodeline": "write('  -> Got branch from git/hg')"
    },
    {
        "line": 304,
        "fullcodeline": "query['commit'] = try_to_run(\"git rev-parse HEAD || hg id -i --debug | tr -d '+'\")"
    },
    {
        "line": 305,
        "fullcodeline": "write('  -> Got sha from git/hg')"
    },
    {
        "line": 332,
        "fullcodeline": "query['commit'] = res.split(' ')[1]"
    },
    {
        "line": 333,
        "fullcodeline": "write('    Fixing merge commit SHA')"
    },
    {
        "line": 385,
        "fullcodeline": "if os.path.exists(yaml_path):"
    },
    {
        "line": 386,
        "fullcodeline": "query['yaml'] = yaml_location"
    },
    {
        "line": 387,
        "fullcodeline": "yaml = fopen(yaml_path)"
    },
    {
        "line": 388,
        "fullcodeline": "_token = re.search("
    },
    {
        "line": 396,
        "fullcodeline": "_slug = re.search("
    },
    {
        "line": 440,
        "fullcodeline": "if os.path.exists(bowerrc):"
    },
    {
        "line": 441,
        "fullcodeline": "write('    Detecting .bowerrc file')"
    },
    {
        "line": 509,
        "fullcodeline": "write('    .query ' + remove_token('token=<secret>', urlargs))"
    },
    {
        "line": 517,
        "fullcodeline": "write('-------------------- Reports --------------------')"
    },
    {
        "line": 518,
        "fullcodeline": "write(reports)"
    },
    {
        "line": 519,
        "fullcodeline": "write('-------------------------------------------------')"
    },
    {
        "line": 524,
        "fullcodeline": "trys += 1"
    },
    {
        "line": 559,
        "fullcodeline": "write('    Uploading to Codecov...')"
    },
    {
        "line": 561,
        "fullcodeline": "res = requests.post('%s/upload/v2?%s' % (codecov.url, urlargs),"
    },
    {
        "line": 571,
        "fullcodeline": "write('    Retrying... in %ds' % (trys * 30))"
    },
    {
        "line": 572,
        "fullcodeline": "sleep(trys * 30)"
    },
    {
        "line": 575,
        "fullcodeline": "write('Error: ' + str(e))"
    },
    {
        "line": 595,
        "fullcodeline": "return dict(reports=reports, codecov=codecov, query=query, urlargs=urlargs, result=result)"
    },
    {
        "line": 124,
        "fullcodeline": "elif os.getenv('CI') == 'true' and os.getenv('CI_NAME') == 'codeship':"
    },
    {
        "line": 365,
        "fullcodeline": "try_to_run('git ls-files') or"
    },
    {
        "line": 373,
        "fullcodeline": "toc.replace('\\n', '\\n{}/'.format(prefix))"
    },
    {
        "line": 419,
        "fullcodeline": "(sanitize_arg('', codecov.gcov_root or root)),"
    },
    {
        "line": 422,
        "fullcodeline": "(sanitize_arg('', codecov.gcov_exec or '')),"
    },
    {
        "line": 423,
        "fullcodeline": "(sanitize_arg('', codecov.gcov_args or '')))"
    },
    {
        "line": 470,
        "fullcodeline": "if glob.glob(opj(os.getcwd(), '.coverage.*')):"
    },
    {
        "line": 477,
        "fullcodeline": "if os.path.exists(opj(os.getcwd(), '.coverage')) and not os.path.exists(opj(os.getcwd(), 'coverage.xml')):"
    },
    {
        "line": 499,
        "fullcodeline": "'\\n<<<<<< EOF\\n'.join(reports),"
    },
    {
        "line": 525,
        "fullcodeline": "if 's3' not in codecov.disable:"
    },
    {
        "line": 565,
        "fullcodeline": "if res.status_code < 500:"
    },
    {
        "line": 582,
        "fullcodeline": "write('Tip: See an example %s repo: https://github.com/codecov/example-%s' % (language, language))"
    },
    {
        "line": 61,
        "fullcodeline": "include_env.add(e.strip())"
    },
    {
        "line": 105,
        "fullcodeline": "build=os.getenv('TRAVIS_JOB_NUMBER'),"
    },
    {
        "line": 106,
        "fullcodeline": "pr=os.getenv('TRAVIS_PULL_REQUEST'),"
    },
    {
        "line": 107,
        "fullcodeline": "job=os.getenv('TRAVIS_JOB_ID'),"
    },
    {
        "line": 108,
        "fullcodeline": "tag=os.getenv('TRAVIS_TAG'),"
    },
    {
        "line": 109,
        "fullcodeline": "slug=os.getenv('TRAVIS_REPO_SLUG'),"
    },
    {
        "line": 110,
        "fullcodeline": "commit=os.getenv('TRAVIS_COMMIT')))"
    },
    {
        "line": 119,
        "fullcodeline": "_add_env_if_not_empty(include_env, 'TRAVIS_%s_VERSION' % language.upper())"
    },
    {
        "line": 126,
        "fullcodeline": "query.update(dict(branch=os.getenv('CI_BRANCH'),"
    },
    {
        "line": 131,
        "fullcodeline": "write('    Codeship Detected')"
    },
    {
        "line": 300,
        "fullcodeline": "write('  x> Failed to get branch from git/hg')"
    },
    {
        "line": 308,
        "fullcodeline": "write('  x> Failed to get sha from git/hg')"
    },
    {
        "line": 394,
        "fullcodeline": "query['token'] = _token.groups()[1]"
    },
    {
        "line": 402,
        "fullcodeline": "query['slug'] = _slug.groups()[1]"
    },
    {
        "line": 421,
        "fullcodeline": "\" \".join(map(lambda a: \"-not -path '%s'\" % a, codecov.gcov_glob)),"
    },
    {
        "line": 443,
        "fullcodeline": "bower_components = '/' + (loads(fopen(bowerrc)).get('directory') or 'bower_components').replace('./', '').strip('/')"
    },
    {
        "line": 444,
        "fullcodeline": "write('    .bowerrc detected, ignoring ' + bower_components)"
    },
    {
        "line": 452,
        "fullcodeline": "if not ignored_path(_root.replace('\\\\', '/')) and bower_components not in _root.replace('\\\\', '/'):"
    },
    {
        "line": 471,
        "fullcodeline": "write('    Merging coverage reports')"
    },
    {
        "line": 475,
        "fullcodeline": "run_python_coverage(['combine', '-a'])"
    },
    {
        "line": 478,
        "fullcodeline": "write('    Generating coverage xml reports for Python')"
    },
    {
        "line": 480,
        "fullcodeline": "run_python_coverage(['xml', '-i'])"
    },
    {
        "line": 481,
        "fullcodeline": "reports.append(read(opj(os.getcwd(), 'coverage.xml')))"
    },
    {
        "line": 566,
        "fullcodeline": "write('    ' + res.text)"
    },
    {
        "line": 567,
        "fullcodeline": "res.raise_for_status()"
    },
    {
        "line": 568,
        "fullcodeline": "result = res.text"
    },
    {
        "line": 115,
        "fullcodeline": "'perl', 'php', 'python', 'r', 'ruby', 'rust', 'scala'))) + [''])[0]"
    },
    {
        "line": 136,
        "fullcodeline": "elif os.getenv('CI') == 'true' and os.getenv('BUILDKITE') == 'true':"
    },
    {
        "line": 493,
        "fullcodeline": "write('    + ' + k)"
    },
    {
        "line": 563,
        "fullcodeline": "data='\\n'.join((reports, s3.reason if s3 else '', s3.text if s3 else '')),"
    },
    {
        "line": 564,
        "fullcodeline": "headers={\"Accept\": \"text/plain\"})"
    },
    {
        "line": 128,
        "fullcodeline": "build=os.getenv('CI_BUILD_NUMBER'),"
    },
    {
        "line": 129,
        "fullcodeline": "build_url=os.getenv('CI_BUILD_URL'),"
    },
    {
        "line": 130,
        "fullcodeline": "commit=os.getenv('CI_COMMIT_ID')))"
    },
    {
        "line": 138,
        "fullcodeline": "query.update(dict(branch=os.getenv('BUILDKITE_BRANCH'),"
    },
    {
        "line": 144,
        "fullcodeline": "write('    Buildkite Detected')"
    },
    {
        "line": 446,
        "fullcodeline": "write('    .bowerrc parsing error: ' + str(e))"
    },
    {
        "line": 454,
        "fullcodeline": "for filepath in files:"
    },
    {
        "line": 527,
        "fullcodeline": "write('    Pinging Codecov...')"
    },
    {
        "line": 528,
        "fullcodeline": "res = requests.post('%s/upload/v4?%s' % (codecov.url, urlargs),"
    },
    {
        "line": 114,
        "fullcodeline": "('dart', 'go', 'haxe', 'jdk', 'julia', 'node', 'otp', 'xcode',"
    },
    {
        "line": 149,
        "fullcodeline": "elif os.getenv('CI') == 'true' and os.getenv('CIRCLECI') == 'true':"
    },
    {
        "line": 532,
        "fullcodeline": "if res.status_code in (400, 406):"
    },
    {
        "line": 140,
        "fullcodeline": "build=os.getenv('BUILDKITE_BUILD_NUMBER') + '.' + os.getenv('BUILDKITE_JOB_ID'),"
    },
    {
        "line": 141,
        "fullcodeline": "slug=os.getenv('BUILDKITE_PROJECT_SLUG'),"
    },
    {
        "line": 142,
        "fullcodeline": "build_url=os.getenv('BUILDKITE_BUILD_URL'),"
    },
    {
        "line": 143,
        "fullcodeline": "commit=os.getenv('BUILDKITE_COMMIT')))"
    },
    {
        "line": 151,
        "fullcodeline": "query.update(dict(branch=os.getenv('CIRCLE_BRANCH'),"
    },
    {
        "line": 158,
        "fullcodeline": "write('    Circle CI Detected')"
    },
    {
        "line": 455,
        "fullcodeline": "fullpath = opj(_root, filepath)"
    },
    {
        "line": 533,
        "fullcodeline": "raise Exception(res.text)"
    },
    {
        "line": 557,
        "fullcodeline": "write('    Direct to s3 failed. Using backup v2 endpoint.')"
    },
    {
        "line": 163,
        "fullcodeline": "elif os.getenv('CI') == 'true' and os.getenv('SEMAPHORE') == 'true':"
    },
    {
        "line": 456,
        "fullcodeline": "if not codecov.file and is_report(fullpath.replace('\\\\', '/')) and not ignored_report(fullpath.replace('\\\\', '/')):"
    },
    {
        "line": 530,
        "fullcodeline": "headers={'Accept': 'text/plain',"
    },
    {
        "line": 535,
        "fullcodeline": "elif res.status_code < 500:"
    },
    {
        "line": 154,
        "fullcodeline": "job=os.getenv('CIRCLE_BUILD_NUM') + \".\" + os.getenv('CIRCLE_NODE_INDEX'),"
    },
    {
        "line": 155,
        "fullcodeline": "pr=os.getenv('CIRCLE_PR_NUMBER'),"
    },
    {
        "line": 156,
        "fullcodeline": "slug=os.getenv('CIRCLE_PROJECT_USERNAME') + \"/\" + os.getenv('CIRCLE_PROJECT_REPONAME'),"
    },
    {
        "line": 157,
        "fullcodeline": "commit=os.getenv('CIRCLE_SHA1')))"
    },
    {
        "line": 165,
        "fullcodeline": "query.update(dict(branch=os.getenv('BRANCH_NAME'),"
    },
    {
        "line": 170,
        "fullcodeline": "write('    Semaphore Detected')"
    },
    {
        "line": 458,
        "fullcodeline": "reports.append(read(fullpath))"
    },
    {
        "line": 537,
        "fullcodeline": "res = res.text.strip().split()"
    },
    {
        "line": 545,
        "fullcodeline": "s3 = requests.put(upload_url, data=reports,"
    },
    {
        "line": 548,
        "fullcodeline": "s3.raise_for_status()"
    },
    {
        "line": 153,
        "fullcodeline": "build=os.getenv('CIRCLE_BUILD_NUM') + \".\" + os.getenv('CIRCLE_NODE_INDEX'),"
    },
    {
        "line": 175,
        "fullcodeline": "elif os.getenv('GREENHOUSE') == 'true':"
    },
    {
        "line": 536,
        "fullcodeline": "assert res.status_code == 200"
    },
    {
        "line": 538,
        "fullcodeline": "result, upload_url = res[0], res[1]"
    },
    {
        "line": 549,
        "fullcodeline": "assert s3.status_code == 200"
    },
    {
        "line": 167,
        "fullcodeline": "build=os.getenv('SEMAPHORE_BUILD_NUMBER') + '.' + os.getenv('SEMAPHORE_CURRENT_THREAD'),"
    },
    {
        "line": 168,
        "fullcodeline": "slug=os.getenv('SEMAPHORE_REPO_SLUG'),"
    },
    {
        "line": 169,
        "fullcodeline": "commit=os.getenv('REVISION')))"
    },
    {
        "line": 177,
        "fullcodeline": "query.update(dict(branch=os.getenv('GREENHOUSE_BRANCH'),"
    },
    {
        "line": 183,
        "fullcodeline": "write('    Greenhouse Detected')"
    },
    {
        "line": 541,
        "fullcodeline": "if not isinstance(reports, bytes):"
    },
    {
        "line": 542,
        "fullcodeline": "reports = reports.encode('utf-8')"
    },
    {
        "line": 188,
        "fullcodeline": "elif os.getenv('CI') == \"drone\" and os.getenv('DRONE') == \"true\":"
    },
    {
        "line": 546,
        "fullcodeline": "headers={'Content-Type': 'text/plain',"
    },
    {
        "line": 179,
        "fullcodeline": "build=os.getenv('GREENHOUSE_BUILD_NUMBER'),"
    },
    {
        "line": 180,
        "fullcodeline": "build_url=os.getenv('GREENHOUSE_BUILD_URL'),"
    },
    {
        "line": 181,
        "fullcodeline": "pr=os.getenv('GREENHOUSE_PULL_REQUEST'),"
    },
    {
        "line": 182,
        "fullcodeline": "commit=os.getenv('GREENHOUSE_COMMIT')))"
    },
    {
        "line": 190,
        "fullcodeline": "query.update(dict(branch=os.getenv('DRONE_BRANCH'),"
    },
    {
        "line": 194,
        "fullcodeline": "root = os.getenv('DRONE_BUILD_DIR') or root"
    },
    {
        "line": 195,
        "fullcodeline": "write('    Drone Detected')"
    },
    {
        "line": 200,
        "fullcodeline": "elif os.getenv('TEAMCITY_VERSION'):"
    },
    {
        "line": 192,
        "fullcodeline": "build=os.getenv('DRONE_BUILD_NUMBER'),"
    },
    {
        "line": 193,
        "fullcodeline": "build_url=os.getenv('DRONE_BUILD_LINK')))"
    },
    {
        "line": 202,
        "fullcodeline": "query.update(dict(service='teamcity',"
    },
    {
        "line": 205,
        "fullcodeline": "write('    TeamCity CI Detected')"
    },
    {
        "line": 210,
        "fullcodeline": "elif os.getenv('CI', 'false').lower() == 'true' and os.getenv('APPVEYOR', 'false').lower() == 'true':"
    },
    {
        "line": 203,
        "fullcodeline": "build=os.getenv('BUILD_NUMBER'),"
    },
    {
        "line": 204,
        "fullcodeline": "commit=os.getenv('BUILD_VCS_NUMBER')))"
    },
    {
        "line": 212,
        "fullcodeline": "query.update(dict(branch=os.getenv('APPVEYOR_REPO_BRANCH'),"
    },
    {
        "line": 219,
        "fullcodeline": "write('    AppVeyor Detected')"
    },
    {
        "line": 220,
        "fullcodeline": "codecov.disable.append('search')"
    },
    {
        "line": 225,
        "fullcodeline": "elif os.getenv('CI') == \"true\" and os.getenv('WERCKER_GIT_BRANCH'):"
    },
    {
        "line": 215,
        "fullcodeline": "build=os.getenv('APPVEYOR_JOB_ID'),"
    },
    {
        "line": 216,
        "fullcodeline": "pr=os.getenv('APPVEYOR_PULL_REQUEST_NUMBER'),"
    },
    {
        "line": 217,
        "fullcodeline": "slug=os.getenv('APPVEYOR_REPO_NAME'),"
    },
    {
        "line": 218,
        "fullcodeline": "commit=os.getenv('APPVEYOR_REPO_COMMIT')))"
    },
    {
        "line": 227,
        "fullcodeline": "query.update(dict(branch=os.getenv('WERCKER_GIT_BRANCH'),"
    },
    {
        "line": 232,
        "fullcodeline": "write('    Wercker Detected')"
    },
    {
        "line": 214,
        "fullcodeline": "job='/'.join((os.getenv('APPVEYOR_ACCOUNT_NAME'), os.getenv('APPVEYOR_PROJECT_SLUG'), os.getenv('APPVEYOR_BUILD_VERSION'))),"
    },
    {
        "line": 237,
        "fullcodeline": "elif os.getenv('CI') == \"true\" and os.getenv('MAGNUM') == 'true':"
    },
    {
        "line": 229,
        "fullcodeline": "build=os.getenv('WERCKER_MAIN_PIPELINE_STARTED'),"
    },
    {
        "line": 230,
        "fullcodeline": "slug=os.getenv('WERCKER_GIT_OWNER') + '/' + os.getenv('WERCKER_GIT_REPOSITORY'),"
    },
    {
        "line": 231,
        "fullcodeline": "commit=os.getenv('WERCKER_GIT_COMMIT')))"
    },
    {
        "line": 239,
        "fullcodeline": "query.update(dict(service=\"magnum\","
    },
    {
        "line": 243,
        "fullcodeline": "write('    Magnum Detected')"
    },
    {
        "line": 248,
        "fullcodeline": "elif os.getenv('SHIPPABLE') == \"true\":"
    },
    {
        "line": 240,
        "fullcodeline": "branch=os.getenv('CI_BRANCH'),"
    },
    {
        "line": 241,
        "fullcodeline": "build=os.getenv('CI_BUILD_NUMBER'),"
    },
    {
        "line": 242,
        "fullcodeline": "commit=os.getenv('CI_COMMIT')))"
    },
    {
        "line": 250,
        "fullcodeline": "query.update(dict(branch=os.getenv('BRANCH'),"
    },
    {
        "line": 257,
        "fullcodeline": "write('    Shippable Detected')"
    },
    {
        "line": 252,
        "fullcodeline": "build=os.getenv('BUILD_NUMBER'),"
    },
    {
        "line": 253,
        "fullcodeline": "build_url=os.getenv('BUILD_URL'),"
    },
    {
        "line": 254,
        "fullcodeline": "pr=os.getenv('PULL_REQUEST'),"
    },
    {
        "line": 255,
        "fullcodeline": "slug=os.getenv('REPO_NAME'),"
    },
    {
        "line": 256,
        "fullcodeline": "commit=os.getenv('COMMIT')))"
    },
    {
        "line": 262,
        "fullcodeline": "elif os.getenv('CI_SERVER_NAME', '').startswith(\"GitLab\"):"
    },
    {
        "line": 265,
        "fullcodeline": "query.update(dict(service='gitlab',"
    },
    {
        "line": 279,
        "fullcodeline": "write('    Gitlab CI Detected')"
    },
    {
        "line": 282,
        "fullcodeline": "query.update(dict(commit=os.getenv('VCS_COMMIT_ID', ''),"
    },
    {
        "line": 274,
        "fullcodeline": "if os.getenv('CI_BUILD_REPO'):"
    },
    {
        "line": 266,
        "fullcodeline": "branch=os.getenv('CI_BUILD_REF_NAME'),"
    },
    {
        "line": 267,
        "fullcodeline": "build=os.getenv('CI_BUILD_ID'),"
    },
    {
        "line": 268,
        "fullcodeline": "commit=os.getenv('CI_BUILD_REF')))"
    },
    {
        "line": 269,
        "fullcodeline": "if os.getenv('CI_PROJECT_DIR', '').startswith('/'):"
    },
    {
        "line": 270,
        "fullcodeline": "root = os.getenv('CI_PROJECT_DIR')"
    },
    {
        "line": 272,
        "fullcodeline": "root = os.getenv('HOME') + '/' + os.getenv('CI_PROJECT_DIR', '')"
    },
    {
        "line": 275,
        "fullcodeline": "query['slug'] = os.getenv('CI_BUILD_REPO').split('/', 3)[-1].replace('.git', '')"
    },
    {
        "line": 283,
        "fullcodeline": "branch=os.getenv('VCS_BRANCH_NAME', ''),"
    },
    {
        "line": 284,
        "fullcodeline": "pr=os.getenv('VCS_PULL_REQUEST', ''),"
    },
    {
        "line": 285,
        "fullcodeline": "slug=os.getenv('VCS_SLUG', ''),"
    },
    {
        "line": 286,
        "fullcodeline": "build_url=os.getenv('CI_BUILD_URL', ''),"
    },
    {
        "line": 287,
        "fullcodeline": "build=os.getenv('CI_BUILD_ID', '')))"
    },
    {
        "line": 276,
        "fullcodeline": "elif os.getenv('CI_REPOSITORY_URL'):"
    },
    {
        "line": 277,
        "fullcodeline": "query['slug'] = os.getenv('CI_REPOSITORY_URL').split('/', 3)[-1].replace('.git', '')"
    }
]