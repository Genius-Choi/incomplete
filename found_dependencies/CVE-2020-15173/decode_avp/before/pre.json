[
    {
        "line": 5,
        "fullcodeline": "uint8_t md5[MD5_DIGEST_LENGTH];"
    },
    {
        "line": 6,
        "fullcodeline": "uint8_t p1[MD5_DIGEST_LENGTH];"
    },
    {
        "line": 7,
        "fullcodeline": "uint8_t *prev_block = NULL;"
    },
    {
        "line": 22,
        "fullcodeline": "attr_len = avp->length - sizeof(struct l2tp_avp_t);"
    },
    {
        "line": 25,
        "fullcodeline": "MD5_Init(&md5_ctx);"
    },
    {
        "line": 26,
        "fullcodeline": "MD5_Update(&md5_ctx, &avp->type, sizeof(avp->type));"
    },
    {
        "line": 27,
        "fullcodeline": "MD5_Update(&md5_ctx, secret, secret_len);"
    },
    {
        "line": 28,
        "fullcodeline": "MD5_Update(&md5_ctx, RV->val.octets, RV->length);"
    },
    {
        "line": 29,
        "fullcodeline": "MD5_Final(p1, &md5_ctx);"
    },
    {
        "line": 36,
        "fullcodeline": "memxor(p1, avp->val, MD5_DIGEST_LENGTH);"
    },
    {
        "line": 37,
        "fullcodeline": "orig_attr_len = ntohs(*(uint16_t *)p1);"
    },
    {
        "line": 56,
        "fullcodeline": "bytes_left = orig_attr_len + 2 - MD5_DIGEST_LENGTH;"
    },
    {
        "line": 57,
        "fullcodeline": "last_block_len = bytes_left % MD5_DIGEST_LENGTH;"
    },
    {
        "line": 58,
        "fullcodeline": "blocks_left = bytes_left / MD5_DIGEST_LENGTH;"
    },
    {
        "line": 14,
        "fullcodeline": "if (avp->length < sizeof(struct l2tp_avp_t) + 2) {"
    },
    {
        "line": 31,
        "fullcodeline": "if (attr_len <= MD5_DIGEST_LENGTH) {"
    },
    {
        "line": 39,
        "fullcodeline": "if (orig_attr_len <= MD5_DIGEST_LENGTH - 2) {"
    },
    {
        "line": 45,
        "fullcodeline": "if (orig_attr_len > attr_len - 2) {"
    },
    {
        "line": 70,
        "fullcodeline": "while (prev_block >= avp->val) {"
    },
    {
        "line": 17,
        "fullcodeline": "log_warn(\"l2tp: incorrect hidden avp received (type %hu):\""
    },
    {
        "line": 60,
        "fullcodeline": "prev_block = avp->val + blocks_left * MD5_DIGEST_LENGTH;"
    },
    {
        "line": 61,
        "fullcodeline": "MD5_Init(&md5_ctx);"
    },
    {
        "line": 62,
        "fullcodeline": "MD5_Update(&md5_ctx, secret, secret_len);"
    },
    {
        "line": 63,
        "fullcodeline": "MD5_Update(&md5_ctx, prev_block, MD5_DIGEST_LENGTH);"
    },
    {
        "line": 64,
        "fullcodeline": "MD5_Final(md5, &md5_ctx);"
    },
    {
        "line": 65,
        "fullcodeline": "memxor(prev_block + MD5_DIGEST_LENGTH, md5, last_block_len);"
    },
    {
        "line": 66,
        "fullcodeline": "prev_block -= MD5_DIGEST_LENGTH;"
    },
    {
        "line": 71,
        "fullcodeline": "MD5_Init(&md5_ctx);"
    },
    {
        "line": 72,
        "fullcodeline": "MD5_Update(&md5_ctx, secret, secret_len);"
    },
    {
        "line": 73,
        "fullcodeline": "MD5_Update(&md5_ctx, prev_block, MD5_DIGEST_LENGTH);"
    },
    {
        "line": 74,
        "fullcodeline": "MD5_Final(md5, &md5_ctx);"
    },
    {
        "line": 75,
        "fullcodeline": "memxor(prev_block + MD5_DIGEST_LENGTH, md5, MD5_DIGEST_LENGTH);"
    },
    {
        "line": 76,
        "fullcodeline": "prev_block -= MD5_DIGEST_LENGTH;"
    },
    {
        "line": 19,
        "fullcodeline": "ntohs(avp->type), avp->length);"
    },
    {
        "line": 20,
        "fullcodeline": "return -1;"
    },
    {
        "line": 50,
        "fullcodeline": "ntohs(avp->type), attr_len, orig_attr_len);"
    },
    {
        "line": 51,
        "fullcodeline": "return -1;"
    },
    {
        "line": 68,
        "fullcodeline": "prev_block = avp->val + (blocks_left - 1) * MD5_DIGEST_LENGTH;"
    }
]