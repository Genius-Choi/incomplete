[
    {
        "line": 6,
        "fullcodeline": "sqlite3 *db = sqlite3_context_db_handle(context);"
    },
    {
        "line": 7,
        "fullcodeline": "const char *zDb = (const char*)sqlite3_value_text(argv[0]);"
    },
    {
        "line": 8,
        "fullcodeline": "const char *zInput = (const char*)sqlite3_value_text(argv[3]);"
    },
    {
        "line": 9,
        "fullcodeline": "const char *zOld = (const char*)sqlite3_value_text(argv[4]);"
    },
    {
        "line": 10,
        "fullcodeline": "const char *zNew = (const char*)sqlite3_value_text(argv[5]);"
    },
    {
        "line": 11,
        "fullcodeline": "int bTemp = sqlite3_value_int(argv[6]);"
    },
    {
        "line": 12,
        "fullcodeline": "UNUSED_PARAMETER(NotUsed);"
    },
    {
        "line": 14,
        "fullcodeline": "if( zInput && zOld && zNew ){"
    },
    {
        "line": 17,
        "fullcodeline": "int bQuote = 1;"
    },
    {
        "line": 22,
        "fullcodeline": "sqlite3_xauth xAuth = db->xAuth;"
    },
    {
        "line": 23,
        "fullcodeline": "db->xAuth = 0;"
    },
    {
        "line": 26,
        "fullcodeline": "sqlite3BtreeEnterAll(db);"
    },
    {
        "line": 28,
        "fullcodeline": "memset(&sCtx, 0, sizeof(RenameCtx));"
    },
    {
        "line": 29,
        "fullcodeline": "sCtx.pTab = sqlite3FindTable(db, zOld, zDb);"
    },
    {
        "line": 30,
        "fullcodeline": "memset(&sWalker, 0, sizeof(Walker));"
    },
    {
        "line": 31,
        "fullcodeline": "sWalker.pParse = &sParse;"
    },
    {
        "line": 32,
        "fullcodeline": "sWalker.xExprCallback = renameTableExprCb;"
    },
    {
        "line": 33,
        "fullcodeline": "sWalker.xSelectCallback = renameTableSelectCb;"
    },
    {
        "line": 34,
        "fullcodeline": "sWalker.u.pRename = &sCtx;"
    },
    {
        "line": 36,
        "fullcodeline": "rc = renameParseSql(&sParse, zDb, 1, db, zInput, bTemp);"
    },
    {
        "line": 122,
        "fullcodeline": "renameParseCleanup(&sParse);"
    },
    {
        "line": 123,
        "fullcodeline": "renameTokenFree(db, sCtx.pList);"
    },
    {
        "line": 124,
        "fullcodeline": "sqlite3BtreeLeaveAll(db);"
    },
    {
        "line": 126,
        "fullcodeline": "db->xAuth = xAuth;"
    },
    {
        "line": 38,
        "fullcodeline": "if( rc==SQLITE_OK ){"
    },
    {
        "line": 111,
        "fullcodeline": "if( rc==SQLITE_OK ){"
    },
    {
        "line": 114,
        "fullcodeline": "if( rc!=SQLITE_OK ){"
    },
    {
        "line": 39,
        "fullcodeline": "int isLegacy = (db->flags & SQLITE_LegacyAlter);"
    },
    {
        "line": 112,
        "fullcodeline": "rc = renameEditSql(context, &sCtx, zInput, zNew, bQuote);"
    },
    {
        "line": 41,
        "fullcodeline": "Table *pTab = sParse.pNewTable;"
    },
    {
        "line": 116,
        "fullcodeline": "renameColumnParseError(context, 0, argv[1], argv[2], &sParse);"
    },
    {
        "line": 118,
        "fullcodeline": "sqlite3_result_error_code(context, rc);"
    },
    {
        "line": 44,
        "fullcodeline": "if( isLegacy==0 ){"
    },
    {
        "line": 80,
        "fullcodeline": "renameTokenFind(&sParse, &sCtx, sParse.pNewIndex->zName);"
    },
    {
        "line": 46,
        "fullcodeline": "memset(&sNC, 0, sizeof(sNC));"
    },
    {
        "line": 47,
        "fullcodeline": "sNC.pParse = &sParse;"
    },
    {
        "line": 49,
        "fullcodeline": "sqlite3SelectPrep(&sParse, pTab->pSelect, &sNC);"
    },
    {
        "line": 51,
        "fullcodeline": "sqlite3WalkSelect(&sWalker, pTab->pSelect);"
    },
    {
        "line": 56,
        "fullcodeline": "if( isLegacy==0 || (db->flags & SQLITE_ForeignKeys) ){"
    },
    {
        "line": 69,
        "fullcodeline": "if( sqlite3_stricmp(zOld, pTab->zName)==0 ){"
    },
    {
        "line": 81,
        "fullcodeline": "if( isLegacy==0 ){"
    },
    {
        "line": 88,
        "fullcodeline": "Trigger *pTrigger = sParse.pNewTrigger;"
    },
    {
        "line": 70,
        "fullcodeline": "sCtx.pTab = pTab;"
    },
    {
        "line": 74,
        "fullcodeline": "renameTokenFind(&sParse, &sCtx, pTab->zName);"
    },
    {
        "line": 82,
        "fullcodeline": "sqlite3WalkExpr(&sWalker, sParse.pNewIndex->pPartIdxWhere);"
    },
    {
        "line": 90,
        "fullcodeline": "if( 0==sqlite3_stricmp(sParse.pNewTrigger->table, zOld)"
    },
    {
        "line": 96,
        "fullcodeline": "if( isLegacy==0 ){"
    },
    {
        "line": 50,
        "fullcodeline": "if( sParse.nErr ) rc = sParse.rc;"
    },
    {
        "line": 58,
        "fullcodeline": "for(pFKey=pTab->pFKey; pFKey; pFKey=pFKey->pNextFrom){"
    },
    {
        "line": 71,
        "fullcodeline": "if( isLegacy==0 ){"
    },
    {
        "line": 91,
        "fullcodeline": "&& sCtx.pTab->pSchema==pTrigger->pTabSchema"
    },
    {
        "line": 93,
        "fullcodeline": "renameTokenFind(&sParse, &sCtx, sParse.pNewTrigger->table);"
    },
    {
        "line": 97,
        "fullcodeline": "rc = renameResolveTrigger(&sParse, bTemp ? 0 : zDb);"
    },
    {
        "line": 72,
        "fullcodeline": "sqlite3WalkExprList(&sWalker, pTab->pCheck);"
    },
    {
        "line": 98,
        "fullcodeline": "if( rc==SQLITE_OK ){"
    },
    {
        "line": 59,
        "fullcodeline": "if( sqlite3_stricmp(pFKey->zTo, zOld)==0 ){"
    },
    {
        "line": 99,
        "fullcodeline": "renameWalkTrigger(&sWalker, pTrigger);"
    },
    {
        "line": 60,
        "fullcodeline": "renameTokenFind(&sParse, &sCtx, (void*)pFKey->zTo);"
    },
    {
        "line": 100,
        "fullcodeline": "for(pStep=pTrigger->step_list; pStep; pStep=pStep->pNext){"
    },
    {
        "line": 101,
        "fullcodeline": "if( pStep->zTarget && 0==sqlite3_stricmp(pStep->zTarget, zOld) ){"
    },
    {
        "line": 102,
        "fullcodeline": "renameTokenFind(&sParse, &sCtx, pStep->zTarget);"
    }
]