[
    {
        "line": 6,
        "fullcodeline": "sqlite3 *db = sqlite3_context_db_handle(context);"
    },
    {
        "line": 8,
        "fullcodeline": "const char *zSql = (const char*)sqlite3_value_text(argv[0]);"
    },
    {
        "line": 9,
        "fullcodeline": "const char *zDb = (const char*)sqlite3_value_text(argv[3]);"
    },
    {
        "line": 10,
        "fullcodeline": "const char *zTable = (const char*)sqlite3_value_text(argv[4]);"
    },
    {
        "line": 11,
        "fullcodeline": "int iCol = sqlite3_value_int(argv[5]);"
    },
    {
        "line": 12,
        "fullcodeline": "const char *zNew = (const char*)sqlite3_value_text(argv[6]);"
    },
    {
        "line": 13,
        "fullcodeline": "int bQuote = sqlite3_value_int(argv[7]);"
    },
    {
        "line": 14,
        "fullcodeline": "int bTemp = sqlite3_value_int(argv[8]);"
    },
    {
        "line": 23,
        "fullcodeline": "sqlite3_xauth xAuth = db->xAuth;"
    },
    {
        "line": 26,
        "fullcodeline": "UNUSED_PARAMETER(NotUsed);"
    },
    {
        "line": 31,
        "fullcodeline": "sqlite3BtreeEnterAll(db);"
    },
    {
        "line": 32,
        "fullcodeline": "pTab = sqlite3FindTable(db, zTable, zDb);"
    },
    {
        "line": 37,
        "fullcodeline": "zOld = pTab->aCol[iCol].zName;"
    },
    {
        "line": 38,
        "fullcodeline": "memset(&sCtx, 0, sizeof(sCtx));"
    },
    {
        "line": 39,
        "fullcodeline": "sCtx.iCol = ((iCol==pTab->iPKey) ? -1 : iCol);"
    },
    {
        "line": 42,
        "fullcodeline": "db->xAuth = 0;"
    },
    {
        "line": 44,
        "fullcodeline": "rc = renameParseSql(&sParse, zDb, 0, db, zSql, bTemp);"
    },
    {
        "line": 47,
        "fullcodeline": "memset(&sWalker, 0, sizeof(Walker));"
    },
    {
        "line": 48,
        "fullcodeline": "sWalker.pParse = &sParse;"
    },
    {
        "line": 49,
        "fullcodeline": "sWalker.xExprCallback = renameColumnExprCb;"
    },
    {
        "line": 50,
        "fullcodeline": "sWalker.xSelectCallback = renameColumnSelectCb;"
    },
    {
        "line": 53,
        "fullcodeline": "sCtx.pTab = pTab;"
    },
    {
        "line": 139,
        "fullcodeline": "rc = renameEditSql(context, &sCtx, zSql, zNew, bQuote);"
    },
    {
        "line": 151,
        "fullcodeline": "renameTokenFree(db, sCtx.pList);"
    },
    {
        "line": 153,
        "fullcodeline": "db->xAuth = xAuth;"
    },
    {
        "line": 27,
        "fullcodeline": "if( zSql==0 ) return;"
    },
    {
        "line": 28,
        "fullcodeline": "if( zTable==0 ) return;"
    },
    {
        "line": 29,
        "fullcodeline": "if( zNew==0 ) return;"
    },
    {
        "line": 30,
        "fullcodeline": "if( iCol<0 ) return;"
    },
    {
        "line": 54,
        "fullcodeline": "if( rc!=SQLITE_OK ) goto renameColumnFunc_done;"
    },
    {
        "line": 138,
        "fullcodeline": "assert( rc==SQLITE_OK );"
    },
    {
        "line": 142,
        "fullcodeline": "if( rc!=SQLITE_OK ){"
    },
    {
        "line": 33,
        "fullcodeline": "if( pTab==0 || iCol>=pTab->nCol ){"
    },
    {
        "line": 56,
        "fullcodeline": "Select *pSelect = sParse.pNewTable->pSelect;"
    },
    {
        "line": 58,
        "fullcodeline": "sParse.rc = SQLITE_OK;"
    },
    {
        "line": 59,
        "fullcodeline": "sqlite3SelectPrep(&sParse, sParse.pNewTable->pSelect, 0);"
    },
    {
        "line": 60,
        "fullcodeline": "rc = (db->mallocFailed ? SQLITE_NOMEM : sParse.rc);"
    },
    {
        "line": 144,
        "fullcodeline": "renameColumnParseError(context, 0, argv[1], argv[2], &sParse);"
    },
    {
        "line": 61,
        "fullcodeline": "if( rc==SQLITE_OK ){"
    },
    {
        "line": 64,
        "fullcodeline": "if( rc!=SQLITE_OK ) goto renameColumnFunc_done;"
    },
    {
        "line": 67,
        "fullcodeline": "int bFKOnly = sqlite3_stricmp(zTable, sParse.pNewTable->zName);"
    },
    {
        "line": 70,
        "fullcodeline": "sCtx.pTab = sParse.pNewTable;"
    },
    {
        "line": 106,
        "fullcodeline": "sqlite3WalkExprList(&sWalker, sParse.pNewIndex->aColExpr);"
    },
    {
        "line": 69,
        "fullcodeline": "assert( sParse.pNewTable->pSelect==0 );"
    },
    {
        "line": 71,
        "fullcodeline": "if( bFKOnly==0 ){"
    },
    {
        "line": 87,
        "fullcodeline": "for(i=0; i<sParse.pNewTable->nCol; i++){"
    },
    {
        "line": 92,
        "fullcodeline": "for(pFKey=sParse.pNewTable->pFKey; pFKey; pFKey=pFKey->pNextFrom){"
    },
    {
        "line": 111,
        "fullcodeline": "rc = renameResolveTrigger(&sParse, (bTemp ? 0 : zDb));"
    },
    {
        "line": 135,
        "fullcodeline": "renameWalkTrigger(&sWalker, sParse.pNewTrigger);"
    },
    {
        "line": 72,
        "fullcodeline": "renameTokenFind("
    },
    {
        "line": 78,
        "fullcodeline": "sqlite3WalkExprList(&sWalker, sParse.pNewTable->pCheck);"
    },
    {
        "line": 112,
        "fullcodeline": "if( rc!=SQLITE_OK ) goto renameColumnFunc_done;"
    },
    {
        "line": 114,
        "fullcodeline": "for(pStep=sParse.pNewTrigger->step_list; pStep; pStep=pStep->pNext){"
    },
    {
        "line": 130,
        "fullcodeline": "if( sParse.pTriggerTab==pTab ){"
    },
    {
        "line": 75,
        "fullcodeline": "if( sCtx.iCol<0 ){"
    },
    {
        "line": 79,
        "fullcodeline": "for(pIdx=sParse.pNewTable->pIndex; pIdx; pIdx=pIdx->pNext){"
    },
    {
        "line": 82,
        "fullcodeline": "for(pIdx=sParse.pNewIndex; pIdx; pIdx=pIdx->pNext){"
    },
    {
        "line": 93,
        "fullcodeline": "for(i=0; i<pFKey->nCol; i++){"
    },
    {
        "line": 131,
        "fullcodeline": "renameColumnIdlistNames(&sParse, &sCtx,sParse.pNewTrigger->pColumns,zOld);"
    },
    {
        "line": 76,
        "fullcodeline": "renameTokenFind(&sParse, &sCtx, (void*)&sParse.pNewTable->iPKey);"
    },
    {
        "line": 80,
        "fullcodeline": "sqlite3WalkExprList(&sWalker, pIdx->aColExpr);"
    },
    {
        "line": 83,
        "fullcodeline": "sqlite3WalkExprList(&sWalker, pIdx->aColExpr);"
    },
    {
        "line": 116,
        "fullcodeline": "Table *pTarget = sqlite3LocateTable(&sParse, 0, pStep->zTarget, zDb);"
    },
    {
        "line": 94,
        "fullcodeline": "if( bFKOnly==0 && pFKey->aCol[i].iFrom==iCol ){"
    },
    {
        "line": 95,
        "fullcodeline": "renameTokenFind(&sParse, &sCtx, (void*)&pFKey->aCol[i]);"
    },
    {
        "line": 97,
        "fullcodeline": "if( 0==sqlite3_stricmp(pFKey->zTo, zTable)"
    },
    {
        "line": 98,
        "fullcodeline": "&& 0==sqlite3_stricmp(pFKey->aCol[i].zCol, zOld)"
    },
    {
        "line": 100,
        "fullcodeline": "renameTokenFind(&sParse, &sCtx, (void*)pFKey->aCol[i].zCol);"
    },
    {
        "line": 117,
        "fullcodeline": "if( pTarget==pTab ){"
    },
    {
        "line": 122,
        "fullcodeline": "renameColumnIdlistNames(&sParse, &sCtx, pStep->pIdList, zOld);"
    },
    {
        "line": 123,
        "fullcodeline": "renameColumnElistNames(&sParse, &sCtx, pStep->pExprList, zOld);"
    },
    {
        "line": 119,
        "fullcodeline": "ExprList *pUpsertSet = pStep->pUpsert->pUpsertSet;"
    },
    {
        "line": 120,
        "fullcodeline": "renameColumnElistNames(&sParse, &sCtx, pUpsertSet, zOld);"
    }
]