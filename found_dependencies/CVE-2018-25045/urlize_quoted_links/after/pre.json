[
    {
        "line": 18,
        "fullcodeline": "def trim_url(x, limit=trim_url_limit):"
    },
    {
        "line": 21,
        "fullcodeline": "safe_input = isinstance(text, SafeData)"
    },
    {
        "line": 25,
        "fullcodeline": "def conditional_escape(text):"
    },
    {
        "line": 28,
        "fullcodeline": "words = word_split_re.split(force_text(text))"
    },
    {
        "line": 29,
        "fullcodeline": "for i, word in enumerate(words):"
    },
    {
        "line": 76,
        "fullcodeline": "return mark_safe(''.join(words))"
    },
    {
        "line": 30,
        "fullcodeline": "if '.' in word or '@' in word or ':' in word:"
    },
    {
        "line": 50,
        "fullcodeline": "url = None"
    },
    {
        "line": 51,
        "fullcodeline": "nofollow_attr = ' rel=\"nofollow\"' if nofollow else ''"
    },
    {
        "line": 75,
        "fullcodeline": "words[i] = conditional_escape(word)"
    },
    {
        "line": 32,
        "fullcodeline": "lead, middle, trail = '', word, ''"
    },
    {
        "line": 33,
        "fullcodeline": "for punctuation in TRAILING_PUNCTUATION:"
    },
    {
        "line": 37,
        "fullcodeline": "for opening, closing in WRAPPING_PUNCTUATION:"
    },
    {
        "line": 52,
        "fullcodeline": "if simple_url_re.match(middle):"
    },
    {
        "line": 53,
        "fullcodeline": "url = smart_urlquote_wrapper(middle)"
    },
    {
        "line": 67,
        "fullcodeline": "trimmed = trim_url(middle)"
    },
    {
        "line": 70,
        "fullcodeline": "middle = '<a href=\"%s\"%s>%s</a>' % (url, nofollow_attr, trimmed)"
    },
    {
        "line": 71,
        "fullcodeline": "words[i] = '%s%s%s' % (lead, middle, trail)"
    },
    {
        "line": 73,
        "fullcodeline": "words[i] = conditional_escape(word)"
    },
    {
        "line": 54,
        "fullcodeline": "elif simple_url_2_re.match(middle):"
    },
    {
        "line": 68,
        "fullcodeline": "lead, trail = conditional_escape(lead), conditional_escape(trail)"
    },
    {
        "line": 69,
        "fullcodeline": "url, trimmed = conditional_escape(url), conditional_escape(trimmed)"
    },
    {
        "line": 34,
        "fullcodeline": "if middle.endswith(punctuation):"
    },
    {
        "line": 38,
        "fullcodeline": "if middle.startswith(opening):"
    },
    {
        "line": 43,
        "fullcodeline": "middle.endswith(closing) and"
    },
    {
        "line": 55,
        "fullcodeline": "url = smart_urlquote_wrapper('http://%s' % middle)"
    },
    {
        "line": 35,
        "fullcodeline": "middle = middle[:-len(punctuation)]"
    },
    {
        "line": 36,
        "fullcodeline": "trail = punctuation + trail"
    },
    {
        "line": 39,
        "fullcodeline": "middle = middle[len(opening):]"
    },
    {
        "line": 40,
        "fullcodeline": "lead = lead + opening"
    },
    {
        "line": 44,
        "fullcodeline": "middle.count(closing) == middle.count(opening) + 1"
    },
    {
        "line": 46,
        "fullcodeline": "middle = middle[:-len(closing)]"
    },
    {
        "line": 47,
        "fullcodeline": "trail = closing + trail"
    },
    {
        "line": 56,
        "fullcodeline": "elif ':' not in middle and simple_email_re.match(middle):"
    },
    {
        "line": 62,
        "fullcodeline": "url = 'mailto:%s@%s' % (local, domain)"
    },
    {
        "line": 63,
        "fullcodeline": "nofollow_attr = ''"
    },
    {
        "line": 57,
        "fullcodeline": "local, domain = middle.rsplit('@', 1)"
    },
    {
        "line": 59,
        "fullcodeline": "domain = domain.encode('idna').decode('ascii')"
    }
]