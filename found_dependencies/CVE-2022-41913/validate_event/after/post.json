[
    {
        "line": 2,
        "fullcodeline": "extracted_events = DiscoursePostEvent::EventParser::extract_events(@post)"
    },
    {
        "line": 18,
        "fullcodeline": "extracted_event = extracted_events.first"
    },
    {
        "line": 4,
        "fullcodeline": "if extracted_events.count == 0"
    },
    {
        "line": 8,
        "fullcodeline": "if extracted_events.count > 1"
    },
    {
        "line": 20,
        "fullcodeline": "return false unless can_invite_groups?(extracted_event)"
    },
    {
        "line": 22,
        "fullcodeline": "if @post.acting_user && @post.event"
    },
    {
        "line": 44,
        "fullcodeline": "if extracted_event[:start].present? && extracted_event[:end].present?"
    },
    {
        "line": 9,
        "fullcodeline": "@post.errors.add(:base, I18n.t(\"discourse_post_event.errors.models.event.only_one_event\"))"
    },
    {
        "line": 14,
        "fullcodeline": "@post.errors.add(:base, I18n.t(\"discourse_post_event.errors.models.event.must_be_in_first_post\"))"
    },
    {
        "line": 35,
        "fullcodeline": "@post.errors.add(:base, I18n.t(\"discourse_post_event.errors.models.event.start_must_be_present_and_a_valid_date\"))"
    },
    {
        "line": 40,
        "fullcodeline": "@post.errors.add(:base, I18n.t(\"discourse_post_event.errors.models.event.end_must_be_a_valid_date\"))"
    },
    {
        "line": 51,
        "fullcodeline": "if extracted_event[:name].present?"
    },
    {
        "line": 58,
        "fullcodeline": "if extracted_event[:recurrence].present?"
    },
    {
        "line": 64,
        "fullcodeline": "if extracted_event[:timezone].present?"
    },
    {
        "line": 13,
        "fullcodeline": "if !@post.is_first_post?"
    },
    {
        "line": 23,
        "fullcodeline": "if !@post.acting_user.can_act_on_discourse_post_event?(@post.event)"
    },
    {
        "line": 28,
        "fullcodeline": "if !@post.acting_user || !@post.acting_user.can_create_discourse_post_event?"
    },
    {
        "line": 34,
        "fullcodeline": "if extracted_event[:start].blank? || (DateTime.parse(extracted_event[:start]) rescue nil).nil?"
    },
    {
        "line": 39,
        "fullcodeline": "if extracted_event[:end].present? && (DateTime.parse(extracted_event[:end]) rescue nil).nil?"
    },
    {
        "line": 45,
        "fullcodeline": "if Time.parse(extracted_event[:start]) > Time.parse(extracted_event[:end])"
    },
    {
        "line": 52,
        "fullcodeline": "if !(Event::MIN_NAME_LENGTH..Event::MAX_NAME_LENGTH).cover?(extracted_event[:name].length)"
    },
    {
        "line": 59,
        "fullcodeline": "if !VALID_RECURRENCES.include?(extracted_event[:recurrence].to_s)"
    },
    {
        "line": 24,
        "fullcodeline": "@post.errors.add(:base, I18n.t(\"discourse_post_event.errors.models.event.acting_user_not_allowed_to_act_on_this_event\"))"
    },
    {
        "line": 29,
        "fullcodeline": "@post.errors.add(:base, I18n.t(\"discourse_post_event.errors.models.event.acting_user_not_allowed_to_create_event\"))"
    },
    {
        "line": 46,
        "fullcodeline": "@post.errors.add(:base, I18n.t(\"discourse_post_event.errors.models.event.ends_at_before_starts_at\"))"
    },
    {
        "line": 53,
        "fullcodeline": "@post.errors.add(:base, I18n.t('discourse_post_event.errors.models.event.name.length', minimum: Event::MIN_NAME_LENGTH, maximum: Event::MAX_NAME_LENGTH))"
    },
    {
        "line": 60,
        "fullcodeline": "@post.errors.add(:base, I18n.t(\"discourse_post_event.errors.models.event.invalid_recurrence\"))"
    },
    {
        "line": 66,
        "fullcodeline": "@post.errors.add(:base, I18n.t(\"discourse_post_event.errors.models.event.invalid_timezone\", timezone: extracted_event[:timezone]))"
    }
]