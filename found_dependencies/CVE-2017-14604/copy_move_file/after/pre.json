[
    {
        "line": 16,
        "fullcodeline": "g_autofree gchar *dest_uri = NULL;"
    },
    {
        "line": 28,
        "fullcodeline": "job = (CommonJob *) copy_job;"
    },
    {
        "line": 36,
        "fullcodeline": "unique_name_nr = 1;"
    },
    {
        "line": 41,
        "fullcodeline": "handled_invalid_filename = *dest_fs_type != NULL;"
    },
    {
        "line": 141,
        "fullcodeline": "error = NULL;"
    },
    {
        "line": 142,
        "fullcodeline": "flags = G_FILE_COPY_NOFOLLOW_SYMLINKS;"
    },
    {
        "line": 152,
        "fullcodeline": "pdata.job = copy_job;"
    },
    {
        "line": 153,
        "fullcodeline": "pdata.last_size = 0;"
    },
    {
        "line": 154,
        "fullcodeline": "pdata.source_info = source_info;"
    },
    {
        "line": 155,
        "fullcodeline": "pdata.transfer_info = transfer_info;"
    },
    {
        "line": 30,
        "fullcodeline": "if (should_skip_file (job, src))"
    },
    {
        "line": 60,
        "fullcodeline": "if (test_dir_is_parent (dest_dir, src))"
    },
    {
        "line": 100,
        "fullcodeline": "if (test_dir_is_parent (src, dest))"
    },
    {
        "line": 32,
        "fullcodeline": "*skipped_file = TRUE;"
    },
    {
        "line": 45,
        "fullcodeline": "dest = get_unique_target_file (src, dest_dir, same_fs, *dest_fs_type, unique_name_nr++);"
    },
    {
        "line": 68,
        "fullcodeline": "primary = copy_job->is_move ? g_strdup (_(\"You cannot move a folder into itself.\"))"
    },
    {
        "line": 70,
        "fullcodeline": "secondary = g_strdup (_(\"The destination folder is inside the source folder.\"));"
    },
    {
        "line": 72,
        "fullcodeline": "response = run_cancel_or_skip_warning (job,"
    },
    {
        "line": 108,
        "fullcodeline": "primary = copy_job->is_move ? g_strdup (_(\"You cannot move a file over itself.\"))"
    },
    {
        "line": 110,
        "fullcodeline": "secondary = g_strdup (_(\"The source file would be overwritten by the destination.\"));"
    },
    {
        "line": 112,
        "fullcodeline": "response = run_cancel_or_skip_warning (job,"
    },
    {
        "line": 145,
        "fullcodeline": "flags |= G_FILE_COPY_OVERWRITE;"
    },
    {
        "line": 149,
        "fullcodeline": "flags |= G_FILE_COPY_TARGET_DEFAULT_PERMS;"
    },
    {
        "line": 180,
        "fullcodeline": "real = map_possibly_volatile_file_to_real (dest, job->cancellable, &error);"
    },
    {
        "line": 194,
        "fullcodeline": "transfer_info->num_files++;"
    },
    {
        "line": 195,
        "fullcodeline": "report_copy_progress (copy_job, source_info, transfer_info);"
    },
    {
        "line": 242,
        "fullcodeline": "if (!handled_invalid_filename &&"
    },
    {
        "line": 243,
        "fullcodeline": "IS_IO_ERROR (error, INVALID_FILENAME))"
    },
    {
        "line": 245,
        "fullcodeline": "handled_invalid_filename = TRUE;"
    },
    {
        "line": 248,
        "fullcodeline": "*dest_fs_type = query_fs_type (dest_dir, job->cancellable);"
    },
    {
        "line": 274,
        "fullcodeline": "if (!overwrite &&"
    },
    {
        "line": 275,
        "fullcodeline": "IS_IO_ERROR (error, EXISTS))"
    },
    {
        "line": 278,
        "fullcodeline": "FileConflictResponse *response;"
    },
    {
        "line": 289,
        "fullcodeline": "is_merge = FALSE;"
    },
    {
        "line": 308,
        "fullcodeline": "response = handle_copy_move_conflict (job, src, dest, dest_dir);"
    },
    {
        "line": 159,
        "fullcodeline": "res = g_file_move (src, dest,"
    },
    {
        "line": 181,
        "fullcodeline": "if (real == NULL)"
    },
    {
        "line": 232,
        "fullcodeline": "if (job->undo_info != NULL)"
    },
    {
        "line": 247,
        "fullcodeline": "g_assert (*dest_fs_type == NULL);"
    },
    {
        "line": 47,
        "fullcodeline": "else if (copy_job->target_name != NULL)"
    },
    {
        "line": 69,
        "fullcodeline": ": g_strdup (_(\"You cannot copy a folder into itself.\"));"
    },
    {
        "line": 77,
        "fullcodeline": "source_info->num_files - transfer_info->num_files);"
    },
    {
        "line": 79,
        "fullcodeline": "if (response == 0 || response == GTK_RESPONSE_DELETE_EVENT)"
    },
    {
        "line": 109,
        "fullcodeline": ": g_strdup (_(\"You cannot copy a file over itself.\"));"
    },
    {
        "line": 117,
        "fullcodeline": "source_info->num_files - transfer_info->num_files);"
    },
    {
        "line": 119,
        "fullcodeline": "if (response == 0 || response == GTK_RESPONSE_DELETE_EVENT)"
    },
    {
        "line": 168,
        "fullcodeline": "res = g_file_copy (src, dest,"
    },
    {
        "line": 199,
        "fullcodeline": "dest_uri = g_file_get_uri (dest);"
    },
    {
        "line": 213,
        "fullcodeline": "nautilus_file_changes_queue_file_moved (src, dest);"
    },
    {
        "line": 222,
        "fullcodeline": "if (copy_job->desktop_location != NULL &&"
    },
    {
        "line": 224,
        "fullcodeline": "is_trusted_desktop_file (src, job->cancellable))"
    },
    {
        "line": 226,
        "fullcodeline": "mark_desktop_file_executable (job,"
    },
    {
        "line": 234,
        "fullcodeline": "nautilus_file_undo_info_ext_add_origin_target_pair (NAUTILUS_FILE_UNDO_INFO_EXT (job->undo_info),"
    },
    {
        "line": 252,
        "fullcodeline": "new_dest = get_unique_target_file (src, dest_dir, same_fs, *dest_fs_type, unique_name_nr);"
    },
    {
        "line": 259,
        "fullcodeline": "if (!g_file_equal (dest, new_dest))"
    },
    {
        "line": 262,
        "fullcodeline": "dest = new_dest;"
    },
    {
        "line": 285,
        "fullcodeline": "dest = get_unique_target_file (src, dest_dir, same_fs, *dest_fs_type, unique_name_nr++);"
    },
    {
        "line": 291,
        "fullcodeline": "if (is_dir (dest) && is_dir (src))"
    },
    {
        "line": 293,
        "fullcodeline": "is_merge = TRUE;"
    },
    {
        "line": 296,
        "fullcodeline": "if ((is_merge && job->merge_all) ||"
    },
    {
        "line": 297,
        "fullcodeline": "(!is_merge && job->replace_all))"
    },
    {
        "line": 299,
        "fullcodeline": "overwrite = TRUE;"
    },
    {
        "line": 310,
        "fullcodeline": "if (response->id == GTK_RESPONSE_CANCEL ||"
    },
    {
        "line": 311,
        "fullcodeline": "response->id == GTK_RESPONSE_DELETE_EVENT)"
    },
    {
        "line": 354,
        "fullcodeline": "else if (overwrite &&"
    },
    {
        "line": 49,
        "fullcodeline": "dest = get_target_file_with_custom_name (src, dest_dir, *dest_fs_type, same_fs,"
    },
    {
        "line": 188,
        "fullcodeline": "dest = real;"
    },
    {
        "line": 209,
        "fullcodeline": "g_hash_table_replace (debuting_files, g_object_ref (dest), GINT_TO_POINTER (TRUE));"
    },
    {
        "line": 217,
        "fullcodeline": "nautilus_file_changes_queue_file_added (dest);"
    },
    {
        "line": 223,
        "fullcodeline": "g_file_equal (copy_job->desktop_location, dest_dir) &&"
    },
    {
        "line": 256,
        "fullcodeline": "new_dest = get_target_file (src, dest_dir, *dest_fs_type, same_fs);"
    },
    {
        "line": 355,
        "fullcodeline": "IS_IO_ERROR (error, IS_DIRECTORY))"
    },
    {
        "line": 362,
        "fullcodeline": "data.job = job;"
    },
    {
        "line": 363,
        "fullcodeline": "data.source = src;"
    },
    {
        "line": 54,
        "fullcodeline": "dest = get_target_file (src, dest_dir, *dest_fs_type, same_fs);"
    },
    {
        "line": 83,
        "fullcodeline": "else if (response == 1)             /* skip all */"
    },
    {
        "line": 123,
        "fullcodeline": "else if (response == 1)             /* skip all */"
    },
    {
        "line": 202,
        "fullcodeline": "nautilus_file_changes_queue_schedule_position_set (dest, *position, job->screen_num);"
    },
    {
        "line": 316,
        "fullcodeline": "else if (response->id == CONFLICT_RESPONSE_SKIP)"
    },
    {
        "line": 366,
        "fullcodeline": "delete_file_recursively (dest,"
    },
    {
        "line": 377,
        "fullcodeline": "else if (IS_IO_ERROR (error, WOULD_RECURSE) ||"
    },
    {
        "line": 378,
        "fullcodeline": "IS_IO_ERROR (error, WOULD_MERGE))"
    },
    {
        "line": 381,
        "fullcodeline": "would_recurse = error->code == G_IO_ERROR_WOULD_RECURSE;"
    },
    {
        "line": 206,
        "fullcodeline": "nautilus_file_changes_queue_schedule_position_remove (dest);"
    },
    {
        "line": 324,
        "fullcodeline": "else if (response->id == CONFLICT_RESPONSE_REPLACE)             /* merge/replace */"
    },
    {
        "line": 380,
        "fullcodeline": "is_merge = error->code == G_IO_ERROR_WOULD_MERGE;"
    },
    {
        "line": 384,
        "fullcodeline": "if (overwrite && would_recurse)"
    },
    {
        "line": 337,
        "fullcodeline": "overwrite = TRUE;"
    },
    {
        "line": 338,
        "fullcodeline": "file_conflict_response_free (response);"
    },
    {
        "line": 386,
        "fullcodeline": "error = NULL;"
    },
    {
        "line": 443,
        "fullcodeline": "nautilus_file_changes_queue_file_removed (dest);"
    },
    {
        "line": 453,
        "fullcodeline": "same_fs = FALSE;"
    },
    {
        "line": 456,
        "fullcodeline": "if (!copy_move_directory (copy_job, src, &dest, same_fs,"
    },
    {
        "line": 464,
        "fullcodeline": "handled_invalid_filename = TRUE;"
    },
    {
        "line": 471,
        "fullcodeline": "else if (IS_IO_ERROR (error, CANCELLED))"
    },
    {
        "line": 463,
        "fullcodeline": "g_assert (*dest_fs_type != NULL);"
    },
    {
        "line": 341,
        "fullcodeline": "else if (response->id == CONFLICT_RESPONSE_RENAME)"
    },
    {
        "line": 389,
        "fullcodeline": "if (!g_file_delete (dest, job->cancellable, &error) &&"
    },
    {
        "line": 390,
        "fullcodeline": "!IS_IO_ERROR (error, NOT_FOUND))"
    },
    {
        "line": 405,
        "fullcodeline": "secondary = f (_(\"Could not remove the already existing file with the same name in %F.\"), dest_dir);"
    },
    {
        "line": 406,
        "fullcodeline": "details = error->message;"
    },
    {
        "line": 411,
        "fullcodeline": "response = run_warning (job,"
    },
    {
        "line": 483,
        "fullcodeline": "primary = f (_(\"Error while copying \u201c%B\u201d.\"), src);"
    },
    {
        "line": 484,
        "fullcodeline": "secondary = f (_(\"There was an error copying the file into %F.\"), dest_dir);"
    },
    {
        "line": 485,
        "fullcodeline": "details = error->message;"
    },
    {
        "line": 487,
        "fullcodeline": "response = run_cancel_or_skip_warning (job,"
    },
    {
        "line": 344,
        "fullcodeline": "dest = get_target_file_for_display_name (dest_dir,"
    },
    {
        "line": 346,
        "fullcodeline": "file_conflict_response_free (response);"
    },
    {
        "line": 330,
        "fullcodeline": "job->merge_all = TRUE;"
    },
    {
        "line": 399,
        "fullcodeline": "primary = f (_(\"Error while moving \u201c%B\u201d.\"), src);"
    },
    {
        "line": 421,
        "fullcodeline": "if (response == 0 || response == GTK_RESPONSE_DELETE_EVENT)"
    },
    {
        "line": 492,
        "fullcodeline": "source_info->num_files - transfer_info->num_files);"
    },
    {
        "line": 496,
        "fullcodeline": "if (response == 0 || response == GTK_RESPONSE_DELETE_EVENT)"
    },
    {
        "line": 334,
        "fullcodeline": "job->replace_all = TRUE;"
    },
    {
        "line": 403,
        "fullcodeline": "primary = f (_(\"Error while copying \u201c%B\u201d.\"), src);"
    },
    {
        "line": 425,
        "fullcodeline": "else if (response == 1)                     /* skip all */"
    },
    {
        "line": 500,
        "fullcodeline": "else if (response == 1)             /* skip all */"
    }
]