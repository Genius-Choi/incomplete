[
    {
        "line": 5,
        "fullcodeline": "unsigned int payload_size = size-AP4_ATOM_HEADER_SIZE;"
    },
    {
        "line": 6,
        "fullcodeline": "m_RawBytes.SetData(payload, payload_size);"
    },
    {
        "line": 9,
        "fullcodeline": "m_ConfigurationVersion   = payload[0];"
    },
    {
        "line": 10,
        "fullcodeline": "m_GeneralProfileSpace    = (payload[1]>>6) & 0x03;"
    },
    {
        "line": 11,
        "fullcodeline": "m_GeneralTierFlag        = (payload[1]>>5) & 0x01;"
    },
    {
        "line": 12,
        "fullcodeline": "m_GeneralProfile         = (payload[1]   ) & 0x1F;"
    },
    {
        "line": 13,
        "fullcodeline": "m_GeneralProfileCompatibilityFlags = AP4_BytesToUInt32BE(&payload[2]);"
    },
    {
        "line": 14,
        "fullcodeline": "m_GeneralConstraintIndicatorFlags  = (((AP4_UI64)AP4_BytesToUInt32BE(&payload[6]))<<16) | AP4_BytesToUInt16BE(&payload[10]);"
    },
    {
        "line": 15,
        "fullcodeline": "m_GeneralLevel           = payload[12];"
    },
    {
        "line": 16,
        "fullcodeline": "m_Reserved1              = (payload[13]>>4) & 0x0F;"
    },
    {
        "line": 17,
        "fullcodeline": "m_MinSpatialSegmentation = AP4_BytesToUInt16BE(&payload[13]) & 0x0FFF;"
    },
    {
        "line": 18,
        "fullcodeline": "m_Reserved2              = (payload[15]>>2) & 0x3F;"
    },
    {
        "line": 19,
        "fullcodeline": "m_ParallelismType        = payload[15] & 0x03;"
    },
    {
        "line": 20,
        "fullcodeline": "m_Reserved3              = (payload[16]>>2) & 0x3F;"
    },
    {
        "line": 21,
        "fullcodeline": "m_ChromaFormat           = payload[16] & 0x03;"
    },
    {
        "line": 22,
        "fullcodeline": "m_Reserved4              = (payload[17]>>3) & 0x1F;"
    },
    {
        "line": 23,
        "fullcodeline": "m_LumaBitDepth           = 8+(payload[17] & 0x07);"
    },
    {
        "line": 24,
        "fullcodeline": "m_Reserved5              = (payload[18]>>3) & 0x1F;"
    },
    {
        "line": 25,
        "fullcodeline": "m_ChromaBitDepth         = 8+(payload[18] & 0x07);"
    },
    {
        "line": 26,
        "fullcodeline": "m_AverageFrameRate       = AP4_BytesToUInt16BE(&payload[19]);"
    },
    {
        "line": 27,
        "fullcodeline": "m_ConstantFrameRate      = (payload[21]>>6) & 0x03;"
    },
    {
        "line": 28,
        "fullcodeline": "m_NumTemporalLayers      = (payload[21]>>3) & 0x07;"
    },
    {
        "line": 29,
        "fullcodeline": "m_TemporalIdNested       = (payload[21]>>2) & 0x01;"
    },
    {
        "line": 30,
        "fullcodeline": "m_NaluLengthSize         = 1+(payload[21] & 0x03);"
    },
    {
        "line": 32,
        "fullcodeline": "AP4_UI08 num_seq = payload[22];"
    },
    {
        "line": 33,
        "fullcodeline": "m_Sequences.SetItemCount(num_seq);"
    },
    {
        "line": 34,
        "fullcodeline": "unsigned int cursor = 23;"
    },
    {
        "line": 35,
        "fullcodeline": "for (unsigned int i=0; i<num_seq; i++) {"
    },
    {
        "line": 37,
        "fullcodeline": "Sequence& seq = m_Sequences[i];"
    },
    {
        "line": 39,
        "fullcodeline": "seq.m_ArrayCompleteness = (payload[cursor] >> 7) & 0x01;"
    },
    {
        "line": 40,
        "fullcodeline": "seq.m_Reserved          = (payload[cursor] >> 6) & 0x01;"
    },
    {
        "line": 41,
        "fullcodeline": "seq.m_NaluType          = payload[cursor] & 0x3F;"
    },
    {
        "line": 42,
        "fullcodeline": "cursor += 1;"
    },
    {
        "line": 45,
        "fullcodeline": "AP4_UI16 nalu_count = AP4_BytesToUInt16BE(&payload[cursor]);"
    },
    {
        "line": 46,
        "fullcodeline": "seq.m_Nalus.SetItemCount(nalu_count);"
    },
    {
        "line": 47,
        "fullcodeline": "cursor += 2;"
    },
    {
        "line": 38,
        "fullcodeline": "if (cursor+1 > payload_size) break;"
    },
    {
        "line": 44,
        "fullcodeline": "if (cursor+2 > payload_size) break;"
    },
    {
        "line": 49,
        "fullcodeline": "for (unsigned int j=0; j<nalu_count; j++) {"
    },
    {
        "line": 51,
        "fullcodeline": "unsigned int nalu_length = AP4_BytesToUInt16BE(&payload[cursor]);"
    },
    {
        "line": 52,
        "fullcodeline": "cursor += 2;"
    },
    {
        "line": 54,
        "fullcodeline": "seq.m_Nalus[j].SetData(&payload[cursor], nalu_length);"
    },
    {
        "line": 55,
        "fullcodeline": "cursor += nalu_length;"
    },
    {
        "line": 50,
        "fullcodeline": "if (cursor+2 > payload_size) break;"
    },
    {
        "line": 53,
        "fullcodeline": "if (cursor + nalu_length > payload_size) break;"
    }
]