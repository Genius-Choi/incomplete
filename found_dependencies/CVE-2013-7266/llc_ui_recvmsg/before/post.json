[
    {
        "line": 4,
        "fullcodeline": "struct sockaddr_llc *uaddr = (struct sockaddr_llc *)msg->msg_name;"
    },
    {
        "line": 5,
        "fullcodeline": "const int nonblock = flags & MSG_DONTWAIT;"
    },
    {
        "line": 6,
        "fullcodeline": "struct sk_buff *skb = NULL;"
    },
    {
        "line": 7,
        "fullcodeline": "struct sock *sk = sock->sk;"
    },
    {
        "line": 8,
        "fullcodeline": "struct llc_sock *llc = llc_sk(sk);"
    },
    {
        "line": 10,
        "fullcodeline": "size_t copied = 0;"
    },
    {
        "line": 11,
        "fullcodeline": "u32 peek_seq = 0;"
    },
    {
        "line": 17,
        "fullcodeline": "msg->msg_namelen = 0;"
    },
    {
        "line": 19,
        "fullcodeline": "lock_sock(sk);"
    },
    {
        "line": 20,
        "fullcodeline": "copied = -ENOTCONN;"
    },
    {
        "line": 24,
        "fullcodeline": "timeo = sock_rcvtimeo(sk, nonblock);"
    },
    {
        "line": 26,
        "fullcodeline": "seq = &llc->copied_seq;"
    },
    {
        "line": 32,
        "fullcodeline": "target = sock_rcvlowat(sk, flags & MSG_WAITALL, len);"
    },
    {
        "line": 33,
        "fullcodeline": "copied = 0;"
    },
    {
        "line": 148,
        "fullcodeline": "release_sock(sk);"
    },
    {
        "line": 21,
        "fullcodeline": "if (unlikely(sk->sk_type == SOCK_STREAM && sk->sk_state == TCP_LISTEN))"
    },
    {
        "line": 27,
        "fullcodeline": "if (flags & MSG_PEEK) {"
    },
    {
        "line": 145,
        "fullcodeline": "} while (len > 0);"
    },
    {
        "line": 151,
        "fullcodeline": "if (uaddr != NULL && skb != NULL) {"
    },
    {
        "line": 158,
        "fullcodeline": "if (!(flags & MSG_PEEK)) {"
    },
    {
        "line": 28,
        "fullcodeline": "peek_seq = llc->copied_seq;"
    },
    {
        "line": 29,
        "fullcodeline": "seq = &peek_seq;"
    },
    {
        "line": 52,
        "fullcodeline": "skb = skb_peek(&sk->sk_receive_queue);"
    },
    {
        "line": 112,
        "fullcodeline": "used = skb->len - offset;"
    },
    {
        "line": 127,
        "fullcodeline": "*seq += used;"
    },
    {
        "line": 128,
        "fullcodeline": "copied += used;"
    },
    {
        "line": 129,
        "fullcodeline": "len -= used;"
    },
    {
        "line": 152,
        "fullcodeline": "memcpy(uaddr, llc_ui_skb_cb(skb), sizeof(*uaddr));"
    },
    {
        "line": 155,
        "fullcodeline": "if (llc_sk(sk)->cmsg_flags)"
    },
    {
        "line": 156,
        "fullcodeline": "llc_cmsg_rcv(msg, skb);"
    },
    {
        "line": 159,
        "fullcodeline": "spin_lock_irqsave(&sk->sk_receive_queue.lock, cpu_flags);"
    },
    {
        "line": 160,
        "fullcodeline": "sk_eat_skb(sk, skb, false);"
    },
    {
        "line": 161,
        "fullcodeline": "spin_unlock_irqrestore(&sk->sk_receive_queue.lock, cpu_flags);"
    },
    {
        "line": 162,
        "fullcodeline": "*seq = 0;"
    },
    {
        "line": 43,
        "fullcodeline": "if (signal_pending(current)) {"
    },
    {
        "line": 59,
        "fullcodeline": "if (copied >= target && !sk->sk_backlog.tail)"
    },
    {
        "line": 97,
        "fullcodeline": "if (copied >= target) { /* Do not sleep, just process backlog. */"
    },
    {
        "line": 103,
        "fullcodeline": "if ((flags & MSG_PEEK) && peek_seq != llc->copied_seq) {"
    },
    {
        "line": 113,
        "fullcodeline": "if (len < used)"
    },
    {
        "line": 116,
        "fullcodeline": "if (!(flags & MSG_TRUNC)) {"
    },
    {
        "line": 132,
        "fullcodeline": "if (sk->sk_type != SOCK_STREAM)"
    },
    {
        "line": 135,
        "fullcodeline": "if (!(flags & MSG_PEEK)) {"
    },
    {
        "line": 143,
        "fullcodeline": "if (used + offset < skb->len)"
    },
    {
        "line": 46,
        "fullcodeline": "copied = timeo ? sock_intr_errno(timeo) : -EAGAIN;"
    },
    {
        "line": 54,
        "fullcodeline": "offset = *seq;"
    },
    {
        "line": 98,
        "fullcodeline": "release_sock(sk);"
    },
    {
        "line": 99,
        "fullcodeline": "lock_sock(sk);"
    },
    {
        "line": 104,
        "fullcodeline": "net_dbg_ratelimited(\"LLC(%s:%d): Application bug, race in MSG_PEEK\\n\","
    },
    {
        "line": 107,
        "fullcodeline": "peek_seq = llc->copied_seq;"
    },
    {
        "line": 114,
        "fullcodeline": "used = len;"
    },
    {
        "line": 117,
        "fullcodeline": "int rc = skb_copy_datagram_iovec(skb, offset,"
    },
    {
        "line": 136,
        "fullcodeline": "spin_lock_irqsave(&sk->sk_receive_queue.lock, cpu_flags);"
    },
    {
        "line": 137,
        "fullcodeline": "sk_eat_skb(sk, skb, false);"
    },
    {
        "line": 138,
        "fullcodeline": "spin_unlock_irqrestore(&sk->sk_receive_queue.lock, cpu_flags);"
    },
    {
        "line": 139,
        "fullcodeline": "*seq = 0;"
    },
    {
        "line": 63,
        "fullcodeline": "if (sk->sk_err ||"
    },
    {
        "line": 101,
        "fullcodeline": "sk_wait_data(sk, &timeo);"
    },
    {
        "line": 106,
        "fullcodeline": "task_pid_nr(current));"
    },
    {
        "line": 67,
        "fullcodeline": "(flags & MSG_PEEK))"
    },
    {
        "line": 70,
        "fullcodeline": "if (sock_flag(sk, SOCK_DONE))"
    },
    {
        "line": 77,
        "fullcodeline": "if (sk->sk_shutdown & RCV_SHUTDOWN)"
    },
    {
        "line": 80,
        "fullcodeline": "if (sk->sk_type == SOCK_STREAM && sk->sk_state == TCP_CLOSE) {"
    },
    {
        "line": 91,
        "fullcodeline": "if (!timeo) {"
    },
    {
        "line": 66,
        "fullcodeline": "!timeo ||"
    },
    {
        "line": 74,
        "fullcodeline": "copied = sock_error(sk);"
    },
    {
        "line": 92,
        "fullcodeline": "copied = -EAGAIN;"
    },
    {
        "line": 121,
        "fullcodeline": "if (!copied)"
    },
    {
        "line": 65,
        "fullcodeline": "(sk->sk_shutdown & RCV_SHUTDOWN) ||"
    },
    {
        "line": 81,
        "fullcodeline": "if (!sock_flag(sk, SOCK_DONE)) {"
    },
    {
        "line": 122,
        "fullcodeline": "copied = -EFAULT;"
    },
    {
        "line": 64,
        "fullcodeline": "sk->sk_state == TCP_CLOSE ||"
    },
    {
        "line": 86,
        "fullcodeline": "copied = -ENOTCONN;"
    }
]