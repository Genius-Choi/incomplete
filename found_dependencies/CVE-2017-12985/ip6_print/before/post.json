[
    {
        "line": 10,
        "fullcodeline": "int fragmented = 0;"
    },
    {
        "line": 13,
        "fullcodeline": "ip6 = (const struct ip6_hdr *)bp;"
    },
    {
        "line": 29,
        "fullcodeline": "payload_len = EXTRACT_16BITS(&ip6->ip6_plen);"
    },
    {
        "line": 30,
        "fullcodeline": "len = payload_len + sizeof(struct ip6_hdr);"
    },
    {
        "line": 62,
        "fullcodeline": "ipend = bp + len;"
    },
    {
        "line": 66,
        "fullcodeline": "cp = (const u_char *)ip6;"
    },
    {
        "line": 68,
        "fullcodeline": "nh = ip6->ip6_nxt;"
    },
    {
        "line": 16,
        "fullcodeline": "if (length < sizeof (struct ip6_hdr)) {"
    },
    {
        "line": 21,
        "fullcodeline": "if (!ndo->ndo_eflag)"
    },
    {
        "line": 24,
        "fullcodeline": "if (IP6_VERSION(ip6) != 6) {"
    },
    {
        "line": 31,
        "fullcodeline": "if (length < len)"
    },
    {
        "line": 63,
        "fullcodeline": "if (ipend < ndo->ndo_snapend)"
    },
    {
        "line": 69,
        "fullcodeline": "while (cp < ndo->ndo_snapend && advance > 0) {"
    },
    {
        "line": 17,
        "fullcodeline": "ND_PRINT((ndo, \"truncated-ip6 %u\", length));"
    },
    {
        "line": 22,
        "fullcodeline": "ND_PRINT((ndo, \"IP6 \"));"
    },
    {
        "line": 25,
        "fullcodeline": "ND_PRINT((ndo,\"version error: %u != 6\", IP6_VERSION(ip6)));"
    },
    {
        "line": 32,
        "fullcodeline": "ND_PRINT((ndo, \"truncated-ip6 - %u bytes missing!\","
    },
    {
        "line": 36,
        "fullcodeline": "flow = EXTRACT_32BITS(&ip6->ip6_flow);"
    },
    {
        "line": 37,
        "fullcodeline": "ND_PRINT((ndo, \"(\"));"
    },
    {
        "line": 52,
        "fullcodeline": "ND_PRINT((ndo, \"hlim %u, next-header %s (%u) payload length: %u) \","
    },
    {
        "line": 64,
        "fullcodeline": "ndo->ndo_snapend = ipend;"
    },
    {
        "line": 70,
        "fullcodeline": "cp += advance;"
    },
    {
        "line": 71,
        "fullcodeline": "len -= advance;"
    },
    {
        "line": 46,
        "fullcodeline": "if (flow & 0x0ff00000)"
    },
    {
        "line": 48,
        "fullcodeline": "if (flow & 0x000fffff)"
    },
    {
        "line": 73,
        "fullcodeline": "if (cp == (const u_char *)(ip6 + 1) &&"
    },
    {
        "line": 47,
        "fullcodeline": "ND_PRINT((ndo, \"class 0x%02x, \", (flow & 0x0ff00000) >> 20));"
    },
    {
        "line": 49,
        "fullcodeline": "ND_PRINT((ndo, \"flowlabel 0x%05x, \", flow & 0x000fffff));"
    },
    {
        "line": 75,
        "fullcodeline": "nh != IPPROTO_DCCP && nh != IPPROTO_SCTP) {"
    },
    {
        "line": 76,
        "fullcodeline": "ND_PRINT((ndo, \"%s > %s: \", ip6addr_string(ndo, &ip6->ip6_src),"
    },
    {
        "line": 82,
        "fullcodeline": "advance = hbhopt_print(ndo, cp);"
    },
    {
        "line": 88,
        "fullcodeline": "advance = dstopt_print(ndo, cp);"
    },
    {
        "line": 94,
        "fullcodeline": "advance = frag6_print(ndo, cp, (const u_char *)ip6);"
    },
    {
        "line": 98,
        "fullcodeline": "fragmented = 1;"
    },
    {
        "line": 111,
        "fullcodeline": "advance = mobility_print(ndo, cp, (const u_char *)ip6);"
    },
    {
        "line": 115,
        "fullcodeline": "advance = rt6_print(ndo, cp, (const u_char *)ip6);"
    },
    {
        "line": 119,
        "fullcodeline": "sctp_print(ndo, cp, (const u_char *)ip6, len);"
    },
    {
        "line": 122,
        "fullcodeline": "dccp_print(ndo, cp, (const u_char *)ip6, len);"
    },
    {
        "line": 125,
        "fullcodeline": "tcp_print(ndo, cp, len, (const u_char *)ip6, fragmented);"
    },
    {
        "line": 128,
        "fullcodeline": "udp_print(ndo, cp, len, (const u_char *)ip6, fragmented);"
    },
    {
        "line": 131,
        "fullcodeline": "icmp6_print(ndo, cp, len, (const u_char *)ip6, fragmented);"
    },
    {
        "line": 134,
        "fullcodeline": "advance = ah_print(ndo, cp);"
    },
    {
        "line": 159,
        "fullcodeline": "pim_print(ndo, cp, len, (const u_char *)ip6);"
    },
    {
        "line": 163,
        "fullcodeline": "ospf6_print(ndo, cp, len);"
    },
    {
        "line": 167,
        "fullcodeline": "ip6_print(ndo, cp, len);"
    },
    {
        "line": 171,
        "fullcodeline": "ip_print(ndo, cp, len);"
    },
    {
        "line": 175,
        "fullcodeline": "pgm_print(ndo, cp, len, (const u_char *)ip6);"
    },
    {
        "line": 179,
        "fullcodeline": "gre_print(ndo, cp, len);"
    },
    {
        "line": 183,
        "fullcodeline": "rsvp_print(ndo, cp, len);"
    },
    {
        "line": 187,
        "fullcodeline": "ND_PRINT((ndo, \"no next header\"));"
    },
    {
        "line": 191,
        "fullcodeline": "ND_PRINT((ndo, \"ip-proto-%d %d\", nh, len));"
    },
    {
        "line": 33,
        "fullcodeline": "len - length));"
    },
    {
        "line": 54,
        "fullcodeline": "tok2str(ipproto_values,\"unknown\",ip6->ip6_nxt),"
    },
    {
        "line": 83,
        "fullcodeline": "if (advance < 0)"
    },
    {
        "line": 89,
        "fullcodeline": "if (advance < 0)"
    },
    {
        "line": 95,
        "fullcodeline": "if (advance < 0 || ndo->ndo_snapend <= cp + advance)"
    },
    {
        "line": 140,
        "fullcodeline": "advance = esp_print(ndo, cp, len, (const u_char *)ip6, &enh, &padlen);"
    },
    {
        "line": 141,
        "fullcodeline": "nh = enh & 0xff;"
    },
    {
        "line": 142,
        "fullcodeline": "len -= padlen;"
    },
    {
        "line": 147,
        "fullcodeline": "ipcomp_print(ndo, cp);"
    },
    {
        "line": 154,
        "fullcodeline": "advance = -1;"
    },
    {
        "line": 74,
        "fullcodeline": "nh != IPPROTO_TCP && nh != IPPROTO_UDP &&"
    },
    {
        "line": 77,
        "fullcodeline": "ip6addr_string(ndo, &ip6->ip6_dst)));"
    }
]