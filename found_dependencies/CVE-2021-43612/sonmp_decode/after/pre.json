[
    {
        "line": 5,
        "fullcodeline": "const u_int8_t mcastaddr[] = SONMP_MULTICAST_ADDR;"
    },
    {
        "line": 11,
        "fullcodeline": "u_int8_t seg[3], rchassis;"
    },
    {
        "line": 14,
        "fullcodeline": "log_debug(\"sonmp\", \"decode SONMP PDU from %s\","
    },
    {
        "line": 21,
        "fullcodeline": "TAILQ_INIT(&chassis->c_mgmt);"
    },
    {
        "line": 31,
        "fullcodeline": "length = s;"
    },
    {
        "line": 50,
        "fullcodeline": "chassis->c_id_subtype = LLDP_CHASSISID_SUBTYPE_ADDR;"
    },
    {
        "line": 56,
        "fullcodeline": "chassis->c_id_len = sizeof(struct in_addr) + 1;"
    },
    {
        "line": 57,
        "fullcodeline": "chassis->c_id[0] = 1;"
    },
    {
        "line": 58,
        "fullcodeline": "PEEK_BYTES(&address, sizeof(struct in_addr));"
    },
    {
        "line": 59,
        "fullcodeline": "memcpy(chassis->c_id + 1, &address, sizeof(struct in_addr));"
    },
    {
        "line": 65,
        "fullcodeline": "PEEK_BYTES(seg, sizeof(seg));"
    },
    {
        "line": 66,
        "fullcodeline": "rchassis = PEEK_UINT8;"
    },
    {
        "line": 77,
        "fullcodeline": "mgmt = lldpd_alloc_mgmt(LLDPD_AF_IPV4, &address, sizeof(struct in_addr), 0);"
    },
    {
        "line": 86,
        "fullcodeline": "TAILQ_INSERT_TAIL(&chassis->c_mgmt, mgmt, m_entries);"
    },
    {
        "line": 87,
        "fullcodeline": "port->p_ttl = cfg?(cfg->g_config.c_tx_interval * cfg->g_config.c_tx_hold):"
    },
    {
        "line": 89,
        "fullcodeline": "port->p_ttl = (port->p_ttl + 999) / 1000;"
    },
    {
        "line": 91,
        "fullcodeline": "port->p_id_subtype = LLDP_PORTID_SUBTYPE_LOCAL;"
    },
    {
        "line": 98,
        "fullcodeline": "port->p_id_len = strlen(port->p_id);"
    },
    {
        "line": 129,
        "fullcodeline": "lldpd_port_cleanup(port, 1);"
    },
    {
        "line": 17,
        "fullcodeline": "if ((chassis = calloc(1, sizeof(struct lldpd_chassis))) == NULL) {"
    },
    {
        "line": 22,
        "fullcodeline": "if ((port = calloc(1, sizeof(struct lldpd_port))) == NULL) {"
    },
    {
        "line": 44,
        "fullcodeline": "if (PEEK_UINT16 != LLC_PID_SONMP_HELLO) {"
    },
    {
        "line": 51,
        "fullcodeline": "if ((chassis->c_id = calloc(1, sizeof(struct in_addr) + 1)) == NULL) {"
    },
    {
        "line": 67,
        "fullcodeline": "for (i=0; sonmp_chassis_types[i].type != 0; i++) {"
    },
    {
        "line": 78,
        "fullcodeline": "if (mgmt == NULL) {"
    },
    {
        "line": 131,
        "fullcodeline": "return -1;"
    },
    {
        "line": 18,
        "fullcodeline": "log_warn(\"sonmp\", \"failed to allocate remote chassis\");"
    },
    {
        "line": 37,
        "fullcodeline": "if (PEEK_CMP(mcastaddr, sizeof(mcastaddr)) != 0)"
    },
    {
        "line": 60,
        "fullcodeline": "if (asprintf(&chassis->c_name, \"%s\", inet_ntoa(address)) == -1) {"
    },
    {
        "line": 71,
        "fullcodeline": "if (asprintf(&chassis->c_descr, \"%s\","
    },
    {
        "line": 72,
        "fullcodeline": "sonmp_chassis_types[i].description) == -1) {"
    },
    {
        "line": 92,
        "fullcodeline": "if (asprintf(&port->p_id, \"%02x-%02x-%02x\","
    },
    {
        "line": 93,
        "fullcodeline": "seg[0], seg[1], seg[2]) == -1) {"
    },
    {
        "line": 101,
        "fullcodeline": "if ((seg[0] == 0) && (seg[1] == 0)) {"
    },
    {
        "line": 19,
        "fullcodeline": "return -1;"
    },
    {
        "line": 25,
        "fullcodeline": "return -1;"
    },
    {
        "line": 33,
        "fullcodeline": "if (length < SONMP_SIZE + 2*ETHER_ADDR_LEN + sizeof(u_int16_t)) {"
    },
    {
        "line": 79,
        "fullcodeline": "if (errno == ENOMEM)"
    },
    {
        "line": 102,
        "fullcodeline": "if (asprintf(&port->p_descr, \"port %d\","
    },
    {
        "line": 103,
        "fullcodeline": "seg[2]) == -1) {"
    },
    {
        "line": 108,
        "fullcodeline": "} else if (seg[0] == 0) {"
    },
    {
        "line": 109,
        "fullcodeline": "if (asprintf(&port->p_descr, \"port %d/%d\","
    },
    {
        "line": 110,
        "fullcodeline": "seg[1], seg[2]) == -1) {"
    },
    {
        "line": 116,
        "fullcodeline": "if (asprintf(&port->p_descr, \"port %x:%x:%x\","
    },
    {
        "line": 117,
        "fullcodeline": "seg[0], seg[1], seg[2]) == -1) {"
    }
]