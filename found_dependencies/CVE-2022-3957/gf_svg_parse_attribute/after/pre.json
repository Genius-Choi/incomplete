[
    {
        "line": 3,
        "fullcodeline": "GF_Err e = GF_OK;"
    },
    {
        "line": 5,
        "fullcodeline": "if (info->fieldType != DOM_String_datatype && strlen(attribute_content)) {"
    },
    {
        "line": 12,
        "fullcodeline": "i=0;"
    },
    {
        "line": 13,
        "fullcodeline": "len = (u32) strlen(attribute_content);"
    },
    {
        "line": 28,
        "fullcodeline": "svg_parse_boolean((SVG_Boolean *)info->far_ptr, attribute_content, &e);"
    },
    {
        "line": 31,
        "fullcodeline": "svg_parse_color((SVG_Color *)info->far_ptr, attribute_content, &e);"
    },
    {
        "line": 34,
        "fullcodeline": "svg_parse_paint(n, (SVG_Paint *)info->far_ptr, attribute_content, &e);"
    },
    {
        "line": 39,
        "fullcodeline": "svg_parse_clipfillrule((SVG_FillRule *)info->far_ptr, attribute_content, &e);"
    },
    {
        "line": 42,
        "fullcodeline": "svg_parse_strokelinejoin((SVG_StrokeLineJoin *)info->far_ptr, attribute_content, &e);"
    },
    {
        "line": 45,
        "fullcodeline": "svg_parse_strokelinecap((SVG_StrokeLineCap *)info->far_ptr, attribute_content, &e);"
    },
    {
        "line": 48,
        "fullcodeline": "svg_parse_fontstyle((SVG_FontStyle *)info->far_ptr, attribute_content, &e);"
    },
    {
        "line": 51,
        "fullcodeline": "svg_parse_fontweight((SVG_FontWeight *)info->far_ptr, attribute_content, &e);"
    },
    {
        "line": 54,
        "fullcodeline": "svg_parse_fontvariant((SVG_FontVariant *)info->far_ptr, attribute_content, &e);"
    },
    {
        "line": 57,
        "fullcodeline": "svg_parse_textanchor((SVG_TextAnchor *)info->far_ptr, attribute_content, &e);"
    },
    {
        "line": 60,
        "fullcodeline": "svg_parse_display((SVG_Display *)info->far_ptr, attribute_content, &e);"
    },
    {
        "line": 63,
        "fullcodeline": "svg_parse_visibility((SVG_Visibility *)info->far_ptr, attribute_content, &e);"
    },
    {
        "line": 66,
        "fullcodeline": "svg_parse_overflow((SVG_Overflow *)info->far_ptr, attribute_content, &e);"
    },
    {
        "line": 69,
        "fullcodeline": "svg_parse_zoomandpan((SVG_ZoomAndPan *)info->far_ptr, attribute_content, &e);"
    },
    {
        "line": 72,
        "fullcodeline": "svg_parse_displayalign((SVG_DisplayAlign *)info->far_ptr, attribute_content, &e);"
    },
    {
        "line": 75,
        "fullcodeline": "svg_parse_textalign((SVG_TextAlign *)info->far_ptr, attribute_content, &e);"
    },
    {
        "line": 78,
        "fullcodeline": "svg_parse_pointerevents((SVG_PointerEvents *)info->far_ptr, attribute_content, &e);"
    },
    {
        "line": 81,
        "fullcodeline": "svg_parse_renderinghint((SVG_RenderingHint *)info->far_ptr, attribute_content, &e);"
    },
    {
        "line": 84,
        "fullcodeline": "svg_parse_vectoreffect((SVG_VectorEffect *)info->far_ptr, attribute_content, &e);"
    },
    {
        "line": 87,
        "fullcodeline": "svg_parse_playbackorder((SVG_PlaybackOrder *)info->far_ptr, attribute_content, &e);"
    },
    {
        "line": 90,
        "fullcodeline": "svg_parse_timelinebegin((SVG_TimelineBegin *)info->far_ptr, attribute_content, &e);"
    },
    {
        "line": 93,
        "fullcodeline": "svg_parse_xmlspace((XML_Space *)info->far_ptr, attribute_content, &e);"
    },
    {
        "line": 96,
        "fullcodeline": "svg_parse_xmlev_propagate((XMLEV_Propagate *)info->far_ptr, attribute_content, &e);"
    },
    {
        "line": 99,
        "fullcodeline": "svg_parse_xmlev_defaultAction((XMLEV_DefaultAction *)info->far_ptr, attribute_content, &e);"
    },
    {
        "line": 102,
        "fullcodeline": "svg_parse_xmlev_phase((XMLEV_Phase *)info->far_ptr, attribute_content, &e);"
    },
    {
        "line": 105,
        "fullcodeline": "smil_parse_syncBehaviorOrDefault((SMIL_SyncBehavior *)info->far_ptr, attribute_content, &e);"
    },
    {
        "line": 108,
        "fullcodeline": "smil_parse_syncToleranceOrDefault((SMIL_SyncTolerance *)info->far_ptr, attribute_content, &e);"
    },
    {
        "line": 111,
        "fullcodeline": "smil_parse_attributeType((SMIL_AttributeType *)info->far_ptr, attribute_content, &e);"
    },
    {
        "line": 114,
        "fullcodeline": "smil_parse_calcmode((SMIL_CalcMode *)info->far_ptr, attribute_content, &e);"
    },
    {
        "line": 117,
        "fullcodeline": "smil_parse_additive((SMIL_CalcMode *)info->far_ptr, attribute_content, &e);"
    },
    {
        "line": 120,
        "fullcodeline": "smil_parse_accumulate((SMIL_Accumulate *)info->far_ptr, attribute_content, &e);"
    },
    {
        "line": 123,
        "fullcodeline": "smil_parse_restart((SMIL_Restart *)info->far_ptr, attribute_content, &e);"
    },
    {
        "line": 126,
        "fullcodeline": "smil_parse_fill((SMIL_Fill *)info->far_ptr, attribute_content, &e);"
    },
    {
        "line": 137,
        "fullcodeline": "svg_parse_focushighlight((SVG_FocusHighlight*)info->far_ptr, attribute_content, &e);"
    },
    {
        "line": 140,
        "fullcodeline": "svg_parse_focusable((SVG_Focusable*)info->far_ptr, attribute_content, &e);"
    },
    {
        "line": 143,
        "fullcodeline": "svg_parse_initialvisibility((SVG_InitialVisibility*)info->far_ptr, attribute_content, &e);"
    },
    {
        "line": 146,
        "fullcodeline": "svg_parse_overlay((SVG_Overlay*)info->far_ptr, attribute_content, &e);"
    },
    {
        "line": 149,
        "fullcodeline": "svg_parse_transformbehavior((SVG_TransformBehavior*)info->far_ptr, attribute_content, &e);"
    },
    {
        "line": 180,
        "fullcodeline": "svg_parse_length((SVG_Number*)info->far_ptr, attribute_content, 0, &e);"
    },
    {
        "line": 184,
        "fullcodeline": "svg_parse_one_anim_value(n, (SMIL_AnimateValue*)info->far_ptr, attribute_content, anim_value_type, &e);"
    },
    {
        "line": 187,
        "fullcodeline": "svg_parse_anim_values(n, (SMIL_AnimateValues*)info->far_ptr, attribute_content, anim_value_type, &e);"
    },
    {
        "line": 191,
        "fullcodeline": "svg_parse_iri(n, (XMLRI*)info->far_ptr, attribute_content);"
    },
    {
        "line": 194,
        "fullcodeline": "svg_parse_idref(n, (XMLRI*)info->far_ptr, attribute_content);"
    },
    {
        "line": 200,
        "fullcodeline": "smil_parse_time_list(n, *(GF_List **)info->far_ptr, attribute_content);"
    },
    {
        "line": 203,
        "fullcodeline": "smil_parse_min_max_dur_repeatdur((SMIL_Duration*)info->far_ptr, attribute_content, &e);"
    },
    {
        "line": 206,
        "fullcodeline": "smil_parse_repeatcount((SMIL_RepeatCount*)info->far_ptr, attribute_content, &e);"
    },
    {
        "line": 209,
        "fullcodeline": "svg_parse_path((SVG_PathData*)info->far_ptr, attribute_content, &e);"
    },
    {
        "line": 212,
        "fullcodeline": "svg_parse_points(*(GF_List **)(info->far_ptr), attribute_content, &e);"
    },
    {
        "line": 218,
        "fullcodeline": "svg_parse_numbers(*(GF_List **)(info->far_ptr), attribute_content, 0, &e);"
    },
    {
        "line": 221,
        "fullcodeline": "svg_parse_coordinates(*(GF_List **)(info->far_ptr), attribute_content, &e);"
    },
    {
        "line": 224,
        "fullcodeline": "svg_parse_viewbox((SVG_ViewBox*)info->far_ptr, attribute_content, &e);"
    },
    {
        "line": 227,
        "fullcodeline": "svg_parse_strokedasharray((SVG_StrokeDashArray*)info->far_ptr, attribute_content, &e);"
    },
    {
        "line": 230,
        "fullcodeline": "svg_parse_fontfamily((SVG_FontFamily*)info->far_ptr, attribute_content, &e);"
    },
    {
        "line": 233,
        "fullcodeline": "svg_parse_point_into_matrix((GF_Matrix2D*)info->far_ptr, attribute_content, &e);"
    },
    {
        "line": 236,
        "fullcodeline": "e = svg_parse_transform((SVG_Transform*)info->far_ptr, attribute_content);"
    },
    {
        "line": 283,
        "fullcodeline": "svg_parse_preserveaspectratio((SVG_PreserveAspectRatio*)info->far_ptr, attribute_content, &e);"
    },
    {
        "line": 286,
        "fullcodeline": "svg_parse_animatetransform_type((SVG_TransformType*)info->far_ptr, attribute_content, &e);"
    },
    {
        "line": 299,
        "fullcodeline": "svg_parse_strings(*(GF_List **)info->far_ptr, attribute_content, 0);"
    },
    {
        "line": 302,
        "fullcodeline": "svg_parse_strings(*(GF_List **)info->far_ptr, attribute_content, 1);"
    },
    {
        "line": 331,
        "fullcodeline": "svg_parse_focus(n, (SVG_Focus*)info->far_ptr, attribute_content, &e);"
    },
    {
        "line": 334,
        "fullcodeline": "svg_parse_clippath(n, (SVG_ClipPath*)info->far_ptr, attribute_content, &e);"
    },
    {
        "line": 338,
        "fullcodeline": "e = laser_parse_choice((LASeR_Choice*)info->far_ptr, attribute_content);"
    },
    {
        "line": 341,
        "fullcodeline": "e = laser_parse_size((LASeR_Size*)info->far_ptr, attribute_content, &e);"
    },
    {
        "line": 344,
        "fullcodeline": "svg_parse_clock_value(attribute_content, (SVG_Clock*)info->far_ptr);"
    },
    {
        "line": 351,
        "fullcodeline": "GF_LOG(GF_LOG_WARNING, GF_LOG_PARSER, (\"[SVG Parsing] Cannot parse attribute \\\"%s\\\"\\n\", info->name ? info->name : \"\"));"
    },
    {
        "line": 355,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_PARSER, (\"[SVG Parsing] Cannot parse attribute \\\"%s\\\" value %s: %s\\n\", info->name ? info->name : \"\", attribute_content, gf_error_to_string(e)));"
    },
    {
        "line": 8,
        "fullcodeline": "while (attribute_content[0] && (strchr(\"\\r\\n\\t \", attribute_content[0])))"
    },
    {
        "line": 9,
        "fullcodeline": "attribute_content++;"
    },
    {
        "line": 14,
        "fullcodeline": "while (i<len) {"
    },
    {
        "line": 20,
        "fullcodeline": "while (len && attribute_content[len-1]==' ') {"
    },
    {
        "line": 197,
        "fullcodeline": "((SMIL_AttributeName *)info->far_ptr)->name = gf_strdup(attribute_content);"
    },
    {
        "line": 240,
        "fullcodeline": "u32 i = 0;"
    },
    {
        "line": 241,
        "fullcodeline": "SVG_Point *p = (SVG_Point *)info->far_ptr;"
    },
    {
        "line": 252,
        "fullcodeline": "u32 i = 0;"
    },
    {
        "line": 253,
        "fullcodeline": "SVG_Point *p = (SVG_Point *)info->far_ptr;"
    },
    {
        "line": 265,
        "fullcodeline": "Fixed *p = (Fixed *)info->far_ptr;"
    },
    {
        "line": 266,
        "fullcodeline": "svg_parse_number(attribute_content, p, 1, &e);"
    },
    {
        "line": 271,
        "fullcodeline": "u32 i = 0;"
    },
    {
        "line": 272,
        "fullcodeline": "SVG_Point_Angle *p = (SVG_Point_Angle *)info->far_ptr;"
    },
    {
        "line": 273,
        "fullcodeline": "i+=svg_parse_number(&(attribute_content[i]), &(p->angle), 1, &e);"
    },
    {
        "line": 295,
        "fullcodeline": "*(SVG_String *)info->far_ptr = gf_strdup(attribute_content);"
    },
    {
        "line": 307,
        "fullcodeline": "XMLEV_Event *xml_ev = (XMLEV_Event *)info->far_ptr;"
    },
    {
        "line": 308,
        "fullcodeline": "char *sep = strchr(attribute_content, '(');"
    },
    {
        "line": 348,
        "fullcodeline": "*(SVG_String *)info->far_ptr = gf_strdup(attribute_content);"
    },
    {
        "line": 17,
        "fullcodeline": "i++;"
    },
    {
        "line": 21,
        "fullcodeline": "attribute_content[len-1] = 0;"
    },
    {
        "line": 22,
        "fullcodeline": "len--;"
    },
    {
        "line": 129,
        "fullcodeline": "if (!strcmp(attribute_content, \"userSpaceOnUse\"))"
    },
    {
        "line": 130,
        "fullcodeline": "*((SVG_GradientUnit *)info->far_ptr) = SVG_GRADIENTUNITS_USER;"
    },
    {
        "line": 152,
        "fullcodeline": "if (!strcmp(attribute_content, \"reflect\")) *(u8*)info->far_ptr = SVG_SPREAD_REFLECT;"
    },
    {
        "line": 158,
        "fullcodeline": "if (!strcmp(attribute_content, \"table\")) *(u8*)info->far_ptr = SVG_FILTER_TRANSFER_TABLE;"
    },
    {
        "line": 242,
        "fullcodeline": "i+=svg_parse_number(&(attribute_content[i]), &(p->x), 0, &e);"
    },
    {
        "line": 243,
        "fullcodeline": "if (attribute_content[i] == 0) {"
    },
    {
        "line": 254,
        "fullcodeline": "i+=svg_parse_number(&(attribute_content[i]), &(p->x), 0, &e);"
    },
    {
        "line": 255,
        "fullcodeline": "if (attribute_content[i] == 0) {"
    },
    {
        "line": 274,
        "fullcodeline": "if (attribute_content[i] == 0) {"
    },
    {
        "line": 358,
        "fullcodeline": "e = GF_OK;"
    },
    {
        "line": 15,
        "fullcodeline": "if (strchr(\"\\r\\n\\t\", attribute_content[i]))"
    },
    {
        "line": 311,
        "fullcodeline": "xml_ev->type = gf_dom_event_type_by_name(attribute_content);"
    },
    {
        "line": 312,
        "fullcodeline": "sep[0] = '(';"
    },
    {
        "line": 16,
        "fullcodeline": "attribute_content[i] = ' ';"
    },
    {
        "line": 246,
        "fullcodeline": "/*i+=*/svg_parse_number(&(attribute_content[i]), &(p->y), 0, &e);"
    },
    {
        "line": 258,
        "fullcodeline": "/*i+=*/svg_parse_number(&(attribute_content[i]), &(p->y), 0, &e);"
    },
    {
        "line": 275,
        "fullcodeline": "p->y = p->x = 0;"
    },
    {
        "line": 278,
        "fullcodeline": "/*i+=*/svg_parse_number(&(attribute_content[i]), &(p->y), 0, &e);"
    },
    {
        "line": 131,
        "fullcodeline": "else if (!strcmp(attribute_content, \"objectBoundingBox\"))"
    },
    {
        "line": 132,
        "fullcodeline": "*((SVG_GradientUnit *)info->far_ptr) = SVG_GRADIENTUNITS_OBJECT;"
    },
    {
        "line": 153,
        "fullcodeline": "else if (!strcmp(attribute_content, \"repeat\")) *(u8*)info->far_ptr = SVG_SPREAD_REPEAT;"
    },
    {
        "line": 159,
        "fullcodeline": "else if (!strcmp(attribute_content, \"discrete\")) *(u8*)info->far_ptr = SVG_FILTER_TRANSFER_DISCRETE;"
    },
    {
        "line": 277,
        "fullcodeline": "i+=svg_parse_number(&(attribute_content[i]), &(p->x), 0, &e);"
    },
    {
        "line": 313,
        "fullcodeline": "if ((xml_ev->type == GF_EVENT_REPEAT) || (xml_ev->type == GF_EVENT_REPEAT_EVENT)) {"
    },
    {
        "line": 315,
        "fullcodeline": "sscanf(sep, \"(%c)\", &_v);"
    },
    {
        "line": 325,
        "fullcodeline": "xml_ev->type = gf_dom_event_type_by_name(attribute_content);"
    },
    {
        "line": 134,
        "fullcodeline": "e = GF_NON_COMPLIANT_BITSTREAM;"
    },
    {
        "line": 318,
        "fullcodeline": "char *sep2 = strchr(attribute_content, ')');"
    },
    {
        "line": 320,
        "fullcodeline": "xml_ev->parameter = gf_dom_get_key_type(sep+1);"
    },
    {
        "line": 154,
        "fullcodeline": "else if (!strcmp(attribute_content, \"pad\")) *(u8*)info->far_ptr = SVG_SPREAD_PAD;"
    },
    {
        "line": 160,
        "fullcodeline": "else if (!strcmp(attribute_content, \"linear\")) *(u8*)info->far_ptr = SVG_FILTER_TRANSFER_LINEAR;"
    },
    {
        "line": 155,
        "fullcodeline": "else e = GF_NON_COMPLIANT_BITSTREAM;"
    },
    {
        "line": 161,
        "fullcodeline": "else if (!strcmp(attribute_content, \"gamma\")) *(u8*)info->far_ptr = SVG_FILTER_TRANSFER_GAMMA;"
    },
    {
        "line": 162,
        "fullcodeline": "else if (!strcmp(attribute_content, \"identity\")) *(u8*)info->far_ptr = SVG_FILTER_TRANSFER_IDENTITY;"
    },
    {
        "line": 163,
        "fullcodeline": "else if (!strcmp(attribute_content, \"fractalNoise\")) *(u8*)info->far_ptr = SVG_FILTER_TRANSFER_FRACTAL_NOISE;"
    },
    {
        "line": 164,
        "fullcodeline": "else if (!strcmp(attribute_content, \"turbulence\")) *(u8*)info->far_ptr = SVG_FILTER_TRANSFER_TURBULENCE;"
    },
    {
        "line": 165,
        "fullcodeline": "else if (!strcmp(attribute_content, \"matrix\")) *(u8*)info->far_ptr = SVG_FILTER_MX_MATRIX;"
    },
    {
        "line": 166,
        "fullcodeline": "else if (!strcmp(attribute_content, \"saturate\")) *(u8*)info->far_ptr = SVG_FILTER_MX_SATURATE;"
    },
    {
        "line": 167,
        "fullcodeline": "else if (!strcmp(attribute_content, \"hueRotate\")) *(u8*)info->far_ptr = SVG_FILTER_HUE_ROTATE;"
    },
    {
        "line": 168,
        "fullcodeline": "else if (!strcmp(attribute_content, \"luminanceToAlpha\")) *(u8*)info->far_ptr = SVG_FILTER_LUM_TO_ALPHA;"
    },
    {
        "line": 169,
        "fullcodeline": "else e = GF_NON_COMPLIANT_BITSTREAM;"
    }
]