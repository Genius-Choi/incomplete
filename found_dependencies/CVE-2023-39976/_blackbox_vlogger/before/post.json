[
    {
        "line": 10,
        "fullcodeline": "struct qb_log_target *t = qb_log_target_get(target);"
    },
    {
        "line": 16,
        "fullcodeline": "fn_size = strlen(cs->function) + 1;"
    },
    {
        "line": 18,
        "fullcodeline": "actual_size = 4 * sizeof(uint32_t) + sizeof(uint8_t) + fn_size + sizeof(struct timespec);"
    },
    {
        "line": 19,
        "fullcodeline": "max_size = actual_size + t->max_line_length;"
    },
    {
        "line": 21,
        "fullcodeline": "chunk = qb_rb_chunk_alloc(t->instance, max_size);"
    },
    {
        "line": 33,
        "fullcodeline": "memcpy(chunk, &cs->lineno, sizeof(uint32_t));"
    },
    {
        "line": 34,
        "fullcodeline": "chunk += sizeof(uint32_t);"
    },
    {
        "line": 37,
        "fullcodeline": "memcpy(chunk, &cs->tags, sizeof(uint32_t));"
    },
    {
        "line": 38,
        "fullcodeline": "chunk += sizeof(uint32_t);"
    },
    {
        "line": 41,
        "fullcodeline": "memcpy(chunk, &cs->priority, sizeof(uint8_t));"
    },
    {
        "line": 42,
        "fullcodeline": "chunk += sizeof(uint8_t);"
    },
    {
        "line": 45,
        "fullcodeline": "memcpy(chunk, &fn_size, sizeof(uint32_t));"
    },
    {
        "line": 46,
        "fullcodeline": "chunk += sizeof(uint32_t);"
    },
    {
        "line": 47,
        "fullcodeline": "memcpy(chunk, cs->function, fn_size);"
    },
    {
        "line": 48,
        "fullcodeline": "chunk += fn_size;"
    },
    {
        "line": 51,
        "fullcodeline": "memcpy(chunk, timestamp, sizeof(struct timespec));"
    },
    {
        "line": 52,
        "fullcodeline": "chunk += sizeof(struct timespec);"
    },
    {
        "line": 55,
        "fullcodeline": "msg_len_pt = chunk;"
    },
    {
        "line": 56,
        "fullcodeline": "chunk += sizeof(uint32_t);"
    },
    {
        "line": 59,
        "fullcodeline": "msg_len = qb_vsnprintf_serialize(chunk, max_size, cs->format, ap);"
    },
    {
        "line": 69,
        "fullcodeline": "actual_size += msg_len;"
    },
    {
        "line": 73,
        "fullcodeline": "memcpy(msg_len_pt, &msg_len, sizeof(uint32_t));"
    },
    {
        "line": 75,
        "fullcodeline": "(void)qb_rb_chunk_commit(t->instance, actual_size);"
    },
    {
        "line": 12,
        "fullcodeline": "if (t->instance == NULL) {"
    },
    {
        "line": 23,
        "fullcodeline": "if (chunk == NULL) {"
    },
    {
        "line": 60,
        "fullcodeline": "if (msg_len >= max_size) {"
    },
    {
        "line": 25,
        "fullcodeline": "qb_util_perror(LOG_ERR, \"Blackbox allocation error, aborting blackbox log %s\", t->filename);"
    },
    {
        "line": 26,
        "fullcodeline": "qb_rb_close(qb_rb_lastref_and_ret("
    },
    {
        "line": 61,
        "fullcodeline": "chunk = msg_len_pt + sizeof(uint32_t); /* Reset */"
    },
    {
        "line": 64,
        "fullcodeline": "msg_len = qb_vsnprintf_serialize(chunk, QB_LOG_MAX_LEN,"
    },
    {
        "line": 27,
        "fullcodeline": "(struct qb_ringbuffer_s **) &t->instance"
    }
]