[
    {
        "line": 5,
        "fullcodeline": "int i, max = 1000;"
    },
    {
        "line": 6,
        "fullcodeline": "char *buffer = calloc(1, max);"
    },
    {
        "line": 8,
        "fullcodeline": "qb_log_init(\"test\", LOG_USER, LOG_DEBUG);"
    },
    {
        "line": 9,
        "fullcodeline": "rc = qb_log_ctl(QB_LOG_SYSLOG, QB_LOG_CONF_ENABLED, QB_FALSE);"
    },
    {
        "line": 10,
        "fullcodeline": "ck_assert_int_eq(rc, 0);"
    },
    {
        "line": 11,
        "fullcodeline": "rc = qb_log_ctl(QB_LOG_BLACKBOX, QB_LOG_CONF_SIZE, 1024);"
    },
    {
        "line": 12,
        "fullcodeline": "ck_assert_int_eq(rc, 0);"
    },
    {
        "line": 13,
        "fullcodeline": "rc = qb_log_ctl(QB_LOG_BLACKBOX, QB_LOG_CONF_ENABLED, QB_TRUE);"
    },
    {
        "line": 14,
        "fullcodeline": "ck_assert_int_eq(rc, 0);"
    },
    {
        "line": 15,
        "fullcodeline": "rc = qb_log_filter_ctl(QB_LOG_BLACKBOX, QB_LOG_FILTER_ADD,"
    },
    {
        "line": 17,
        "fullcodeline": "ck_assert_int_eq(rc, 0);"
    },
    {
        "line": 28,
        "fullcodeline": "rc = qb_log_blackbox_write_to_file(\"blackbox.dump\");"
    },
    {
        "line": 29,
        "fullcodeline": "ck_assert_int_gt(rc, 0);"
    },
    {
        "line": 30,
        "fullcodeline": "rc = qb_log_blackbox_print_from_file(\"blackbox.dump\");"
    },
    {
        "line": 31,
        "fullcodeline": "ck_assert_int_le(rc, 0);"
    },
    {
        "line": 32,
        "fullcodeline": "unlink(\"blackbox.dump\");"
    },
    {
        "line": 33,
        "fullcodeline": "qb_log_fini();"
    },
    {
        "line": 19,
        "fullcodeline": "for (lpc = 500; lpc < max; lpc++) {"
    },
    {
        "line": 20,
        "fullcodeline": "lpc++;"
    },
    {
        "line": 24,
        "fullcodeline": "buffer[lpc%600] = 0;"
    },
    {
        "line": 25,
        "fullcodeline": "qb_log(LOG_INFO, \"Message %d %d - %s\", lpc, lpc%600, buffer);"
    },
    {
        "line": 21,
        "fullcodeline": "for(i = 0; i < max; i++) {"
    },
    {
        "line": 22,
        "fullcodeline": "buffer[i] = 'a' + (i % 10);"
    }
]