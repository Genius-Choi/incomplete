[
    {
        "line": 4,
        "fullcodeline": "*error_msg = NULL;"
    },
    {
        "line": 7,
        "fullcodeline": "if ((msr->msc_reqbody_spilltodisk)"
    },
    {
        "line": 58,
        "fullcodeline": "bucket_offset = 0;"
    },
    {
        "line": 59,
        "fullcodeline": "bucket_left = length;"
    },
    {
        "line": 8,
        "fullcodeline": "&& (msr->msc_reqbody_length + length > (apr_size_t)msr->txcfg->reqbody_inmemory_limit))"
    },
    {
        "line": 11,
        "fullcodeline": "unsigned int disklen = 0;"
    },
    {
        "line": 14,
        "fullcodeline": "msr_log(msr, 4, \"Input filter: Request too large to store in memory, switching to disk.\");"
    },
    {
        "line": 22,
        "fullcodeline": "msr->msc_reqbody_storage = MSC_REQBODY_DISK;"
    },
    {
        "line": 43,
        "fullcodeline": "msr->msc_reqbody_chunks = NULL;"
    },
    {
        "line": 44,
        "fullcodeline": "apr_pool_clear(msr->msc_reqbody_mp);"
    },
    {
        "line": 46,
        "fullcodeline": "msr_log(msr, 4, \"Input filter: Wrote %u bytes from memory to disk.\", disklen);"
    },
    {
        "line": 69,
        "fullcodeline": "while(bucket_left > 0) {"
    },
    {
        "line": 23,
        "fullcodeline": "if (modsecurity_request_body_start_init(msr, error_msg) < 0) return -1;"
    },
    {
        "line": 27,
        "fullcodeline": "for(i = 0; i < msr->msc_reqbody_chunks->nelts; i++) {"
    },
    {
        "line": 49,
        "fullcodeline": "return modsecurity_request_body_store_disk(msr, data, length, error_msg);"
    },
    {
        "line": 28,
        "fullcodeline": "disklen += chunks[i]->length;"
    },
    {
        "line": 35,
        "fullcodeline": "chunks[i]->data = NULL;"
    },
    {
        "line": 71,
        "fullcodeline": "if (msr->msc_reqbody_chunk_current == NULL) {"
    },
    {
        "line": 94,
        "fullcodeline": "if (bucket_left < (CHUNK_CAPACITY - msr->msc_reqbody_chunk_current->length)) {"
    },
    {
        "line": 72,
        "fullcodeline": "msr->msc_reqbody_chunk_current = (msc_data_chunk *)"
    },
    {
        "line": 80,
        "fullcodeline": "msr->msc_reqbody_chunk_current->data = malloc(CHUNK_CAPACITY);"
    },
    {
        "line": 87,
        "fullcodeline": "msr->msc_reqbody_chunk_current->length = 0;"
    },
    {
        "line": 88,
        "fullcodeline": "msr->msc_reqbody_chunk_current->is_permanent = 1;"
    },
    {
        "line": 96,
        "fullcodeline": "memcpy(msr->msc_reqbody_chunk_current->data +"
    },
    {
        "line": 98,
        "fullcodeline": "msr->msc_reqbody_chunk_current->length += bucket_left;"
    },
    {
        "line": 99,
        "fullcodeline": "bucket_left = 0;"
    },
    {
        "line": 30,
        "fullcodeline": "if (modsecurity_request_body_store_disk(msr, chunks[i]->data, chunks[i]->length, error_msg) < 0) {"
    },
    {
        "line": 74,
        "fullcodeline": "if (msr->msc_reqbody_chunk_current == NULL) {"
    },
    {
        "line": 81,
        "fullcodeline": "if (msr->msc_reqbody_chunk_current->data == NULL) {"
    },
    {
        "line": 102,
        "fullcodeline": "unsigned long int copy_length = CHUNK_CAPACITY -"
    },
    {
        "line": 105,
        "fullcodeline": "memcpy(msr->msc_reqbody_chunk_current->data +"
    },
    {
        "line": 107,
        "fullcodeline": "bucket_offset += copy_length;"
    },
    {
        "line": 108,
        "fullcodeline": "bucket_left -= copy_length;"
    },
    {
        "line": 109,
        "fullcodeline": "msr->msc_reqbody_chunk_current->length += copy_length;"
    },
    {
        "line": 115,
        "fullcodeline": "msr->msc_reqbody_chunk_current = NULL;"
    },
    {
        "line": 31,
        "fullcodeline": "return -1;"
    },
    {
        "line": 73,
        "fullcodeline": "apr_pcalloc(msr->msc_reqbody_mp, sizeof(msc_data_chunk));"
    },
    {
        "line": 75,
        "fullcodeline": "*error_msg = apr_psprintf(msr->mp, \"Input filter: Failed to allocate %lu bytes \""
    },
    {
        "line": 77,
        "fullcodeline": "return -1;"
    },
    {
        "line": 82,
        "fullcodeline": "*error_msg = apr_psprintf(msr->mp, \"Input filter: Failed to allocate %d bytes \""
    },
    {
        "line": 84,
        "fullcodeline": "return -1;"
    },
    {
        "line": 90,
        "fullcodeline": "*(const msc_data_chunk **)apr_array_push(msr->msc_reqbody_chunks)"
    }
]