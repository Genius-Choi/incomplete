[
    {
        "line": 8,
        "fullcodeline": "char szPayload[30];"
    },
    {
        "line": 11,
        "fullcodeline": "u8 init_payt = BASE_PAYT;"
    },
    {
        "line": 13,
        "fullcodeline": "GF_SDP_IODProfile iod_mode = GF_SDP_IOD_NONE;"
    },
    {
        "line": 14,
        "fullcodeline": "u32 media_group = 0;"
    },
    {
        "line": 15,
        "fullcodeline": "u8 media_prio = 0;"
    },
    {
        "line": 17,
        "fullcodeline": "tot_bw = 0;"
    },
    {
        "line": 18,
        "fullcodeline": "prev_ocr = 0;"
    },
    {
        "line": 19,
        "fullcodeline": "single_ocr = 1;"
    },
    {
        "line": 21,
        "fullcodeline": "has_iod = 1;"
    },
    {
        "line": 22,
        "fullcodeline": "iod = (GF_InitialObjectDescriptor *) gf_isom_get_root_od(file);"
    },
    {
        "line": 29,
        "fullcodeline": "spec_type = gf_isom_guess_specification(file);"
    },
    {
        "line": 30,
        "fullcodeline": "single_av = single_group ? 1 : gf_isom_is_single_av(file);"
    },
    {
        "line": 43,
        "fullcodeline": "nb_done = 0;"
    },
    {
        "line": 23,
        "fullcodeline": "if (!iod) has_iod = 0;"
    },
    {
        "line": 33,
        "fullcodeline": "for (i=0; i<gf_isom_get_track_count(file); i++) {"
    },
    {
        "line": 44,
        "fullcodeline": "for (i=0; i<gf_isom_get_track_count(file); i++) {"
    },
    {
        "line": 34,
        "fullcodeline": "res = gf_isom_get_media_type(file, i+1);"
    },
    {
        "line": 45,
        "fullcodeline": "sl_mode = base_flags;"
    },
    {
        "line": 46,
        "fullcodeline": "copy = copy_data;"
    },
    {
        "line": 54,
        "fullcodeline": "mtype = gf_isom_get_media_type(file, i+1);"
    },
    {
        "line": 86,
        "fullcodeline": "mtype = gf_isom_get_media_subtype(file, i+1, 1);"
    },
    {
        "line": 95,
        "fullcodeline": "streamType = 0;"
    },
    {
        "line": 96,
        "fullcodeline": "esd = gf_isom_get_esd(file, i+1, 1);"
    },
    {
        "line": 108,
        "fullcodeline": "gf_odf_desc_del((GF_Descriptor *) esd);"
    },
    {
        "line": 126,
        "fullcodeline": "hinter = gf_hinter_track_new(file, i+1, MTUSize, max_ptime, rtp_rate, sl_mode, init_payt, copy, media_group, media_prio, &e);"
    },
    {
        "line": 139,
        "fullcodeline": "bw = gf_hinter_track_get_bandwidth(hinter);"
    },
    {
        "line": 140,
        "fullcodeline": "tot_bw += bw;"
    },
    {
        "line": 141,
        "fullcodeline": "flags = gf_hinter_track_get_flags(hinter);"
    },
    {
        "line": 144,
        "fullcodeline": "gf_isom_set_nalu_extract_mode(file, i+1, GF_ISOM_NALU_EXTRACT_LAYER_ONLY);"
    },
    {
        "line": 146,
        "fullcodeline": "gf_hinter_track_get_payload_name(hinter, szPayload);"
    },
    {
        "line": 147,
        "fullcodeline": "M4_LOG(GF_LOG_INFO, (\"Hinting track ID %d - Type \\\"%s:%s\\\" (%s) - BW %d kbps\\n\", gf_isom_get_track_id(file, i+1), gf_4cc_to_str(mtype), gf_4cc_to_str(mtype), szPayload, bw));"
    },
    {
        "line": 149,
        "fullcodeline": "e = gf_hinter_track_process(hinter);"
    },
    {
        "line": 152,
        "fullcodeline": "gf_hinter_track_del(hinter);"
    },
    {
        "line": 158,
        "fullcodeline": "init_payt++;"
    },
    {
        "line": 159,
        "fullcodeline": "nb_done ++;"
    },
    {
        "line": 163,
        "fullcodeline": "iod_mode = GF_SDP_IOD_ISMA;"
    },
    {
        "line": 26,
        "fullcodeline": "gf_odf_desc_del((GF_Descriptor *) iod);"
    },
    {
        "line": 35,
        "fullcodeline": "if ((res==GF_ISOM_MEDIA_SCENE) || (res==GF_ISOM_MEDIA_OD)) {"
    },
    {
        "line": 48,
        "fullcodeline": "if (!gf_isom_get_sample_count(file, i+1)) continue;"
    },
    {
        "line": 49,
        "fullcodeline": "if (!gf_isom_is_track_enabled(file, i+1)) {"
    },
    {
        "line": 87,
        "fullcodeline": "if ((mtype==GF_ISOM_SUBTYPE_MPEG4) || (mtype==GF_ISOM_SUBTYPE_MPEG4_CRYP) ) mtype = gf_isom_get_mpeg4_subtype(file, i+1, 1);"
    },
    {
        "line": 89,
        "fullcodeline": "if (!single_av) {"
    },
    {
        "line": 110,
        "fullcodeline": "if (!regular_iod && gf_isom_is_track_in_root_od(file, i+1)) {"
    },
    {
        "line": 128,
        "fullcodeline": "if (!hinter) {"
    },
    {
        "line": 148,
        "fullcodeline": "if (flags & GP_RTP_PCK_SYSTEMS_CAROUSEL) M4_LOG(GF_LOG_INFO, (\"\\tMPEG-4 Systems stream carousel enabled\\n\"));"
    },
    {
        "line": 151,
        "fullcodeline": "if (!e) e = gf_hinter_track_finalize(hinter, has_iod);"
    },
    {
        "line": 166,
        "fullcodeline": "iod_mode = GF_SDP_IOD_NONE;"
    },
    {
        "line": 25,
        "fullcodeline": "if (!gf_list_count(iod->ESDescriptors)) has_iod = 0;"
    },
    {
        "line": 50,
        "fullcodeline": "M4_LOG(GF_LOG_INFO, (\"Track ID %d disabled - skipping hint\\n\", gf_isom_get_track_id(file, i+1) ));"
    },
    {
        "line": 91,
        "fullcodeline": "media_group ++;"
    },
    {
        "line": 92,
        "fullcodeline": "media_prio = 1;"
    },
    {
        "line": 98,
        "fullcodeline": "streamType = esd->decoderConfig->streamType;"
    },
    {
        "line": 124,
        "fullcodeline": "if (interleave) sl_mode |= GP_RTP_PCK_USE_INTERLEAVING;"
    },
    {
        "line": 137,
        "fullcodeline": "gf_hinter_track_force_no_offsets(hinter);"
    },
    {
        "line": 155,
        "fullcodeline": "M4_LOG(GF_LOG_ERROR, (\"Error while hinting (%s)\\n\", gf_error_to_string(e)));"
    },
    {
        "line": 164,
        "fullcodeline": "if (regular_iod) iod_mode = GF_SDP_IOD_REGULAR;"
    },
    {
        "line": 36,
        "fullcodeline": "if (gf_isom_is_track_in_root_od(file, i+1)) {"
    },
    {
        "line": 84,
        "fullcodeline": "if (spec_type==GF_ISOM_BRAND_ISMA) continue;"
    },
    {
        "line": 99,
        "fullcodeline": "if (!prev_ocr) {"
    },
    {
        "line": 106,
        "fullcodeline": "if (streamType==1) copy = 1;"
    },
    {
        "line": 112,
        "fullcodeline": "if (gf_isom_get_sample_count(file, i+1)==1) {"
    },
    {
        "line": 156,
        "fullcodeline": "if (!nb_done) return e;"
    },
    {
        "line": 37,
        "fullcodeline": "gf_isom_set_default_sync_track(file, i+1);"
    },
    {
        "line": 58,
        "fullcodeline": "media_group = 2;"
    },
    {
        "line": 59,
        "fullcodeline": "media_prio = 2;"
    },
    {
        "line": 64,
        "fullcodeline": "media_group = 2;"
    },
    {
        "line": 65,
        "fullcodeline": "media_prio = 3;"
    },
    {
        "line": 70,
        "fullcodeline": "media_group = 2;"
    },
    {
        "line": 71,
        "fullcodeline": "media_prio = 4;"
    },
    {
        "line": 76,
        "fullcodeline": "media_group = 2;"
    },
    {
        "line": 77,
        "fullcodeline": "media_prio = 1;"
    },
    {
        "line": 100,
        "fullcodeline": "prev_ocr = esd->OCRESID;"
    },
    {
        "line": 113,
        "fullcodeline": "GF_ISOSample *samp = gf_isom_get_sample(file, i+1, 1, &val);"
    },
    {
        "line": 130,
        "fullcodeline": "M4_LOG(nb_done ? GF_LOG_WARNING : GF_LOG_ERROR, (\"Cannot create hinter (%s)\\n\", gf_error_to_string(e) ));"
    },
    {
        "line": 101,
        "fullcodeline": "if (!esd->OCRESID) prev_ocr = esd->ESID;"
    },
    {
        "line": 131,
        "fullcodeline": "if (!nb_done) return e;"
    },
    {
        "line": 102,
        "fullcodeline": "} else if (esd->OCRESID && prev_ocr != esd->OCRESID) {"
    },
    {
        "line": 115,
        "fullcodeline": "res = gf_hinter_can_embbed_data(samp->data, samp->dataLength, streamType);"
    },
    {
        "line": 120,
        "fullcodeline": "if (samp) gf_isom_sample_del(&samp);"
    },
    {
        "line": 103,
        "fullcodeline": "single_ocr = 0;"
    },
    {
        "line": 118,
        "fullcodeline": "res = 0;"
    }
]