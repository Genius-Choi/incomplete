[
    {
        "line": 2,
        "fullcodeline": "logger = logging.getLogger(__name__)"
    },
    {
        "line": 4,
        "fullcodeline": "s = settings()"
    },
    {
        "line": 723,
        "fullcodeline": "s.save(trigger_event=True)"
    },
    {
        "line": 9,
        "fullcodeline": "if \"folder\" in data:"
    },
    {
        "line": 37,
        "fullcodeline": "if \"api\" in data:"
    },
    {
        "line": 41,
        "fullcodeline": "if \"appearance\" in data:"
    },
    {
        "line": 74,
        "fullcodeline": "if \"printer\" in data:"
    },
    {
        "line": 81,
        "fullcodeline": "if \"webcam\" in data:"
    },
    {
        "line": 154,
        "fullcodeline": "if \"feature\" in data:"
    },
    {
        "line": 209,
        "fullcodeline": "if \"gcodeAnalysis\" in data:"
    },
    {
        "line": 215,
        "fullcodeline": "if \"serial\" in data:"
    },
    {
        "line": 548,
        "fullcodeline": "if \"temperature\" in data:"
    },
    {
        "line": 579,
        "fullcodeline": "if \"terminalFilters\" in data:"
    },
    {
        "line": 582,
        "fullcodeline": "if \"system\" in data:"
    },
    {
        "line": 588,
        "fullcodeline": "if \"scripts\" in data:"
    },
    {
        "line": 599,
        "fullcodeline": "if \"server\" in data:"
    },
    {
        "line": 674,
        "fullcodeline": "if \"devel\" in data:"
    },
    {
        "line": 687,
        "fullcodeline": "if \"slicing\" in data:"
    },
    {
        "line": 691,
        "fullcodeline": "if \"plugins\" in data:"
    },
    {
        "line": 536,
        "fullcodeline": "oldLog = s.getBoolean([\"serial\", \"log\"])"
    },
    {
        "line": 580,
        "fullcodeline": "s.set([\"terminalFilters\"], data[\"terminalFilters\"])"
    },
    {
        "line": 675,
        "fullcodeline": "oldLog = s.getBoolean([\"devel\", \"pluginTimings\"])"
    },
    {
        "line": 38,
        "fullcodeline": "if \"allowCrossOrigin\" in data[\"api\"]:"
    },
    {
        "line": 42,
        "fullcodeline": "if \"name\" in data[\"appearance\"]:"
    },
    {
        "line": 44,
        "fullcodeline": "if \"color\" in data[\"appearance\"]:"
    },
    {
        "line": 46,
        "fullcodeline": "if \"colorTransparent\" in data[\"appearance\"]:"
    },
    {
        "line": 50,
        "fullcodeline": "if \"colorIcon\" in data[\"appearance\"]:"
    },
    {
        "line": 52,
        "fullcodeline": "if \"defaultLanguage\" in data[\"appearance\"]:"
    },
    {
        "line": 56,
        "fullcodeline": "if \"showFahrenheitAlso\" in data[\"appearance\"]:"
    },
    {
        "line": 61,
        "fullcodeline": "if \"fuzzyTimes\" in data[\"appearance\"]:"
    },
    {
        "line": 63,
        "fullcodeline": "if \"closeModalsWithClick\" in data[\"appearance\"]:"
    },
    {
        "line": 68,
        "fullcodeline": "if \"showInternalFilename\" in data[\"appearance\"]:"
    },
    {
        "line": 75,
        "fullcodeline": "if \"defaultExtrusionLength\" in data[\"printer\"]:"
    },
    {
        "line": 82,
        "fullcodeline": "for key in DEPRECATED_WEBCAM_KEYS:"
    },
    {
        "line": 88,
        "fullcodeline": "if \"webcamEnabled\" in data[\"webcam\"]:"
    },
    {
        "line": 90,
        "fullcodeline": "if \"timelapseEnabled\" in data[\"webcam\"]:"
    },
    {
        "line": 94,
        "fullcodeline": "if \"snapshotTimeout\" in data[\"webcam\"]:"
    },
    {
        "line": 96,
        "fullcodeline": "if \"snapshotSslValidation\" in data[\"webcam\"]:"
    },
    {
        "line": 101,
        "fullcodeline": "if \"ffmpegPath\" in data[\"webcam\"]:"
    },
    {
        "line": 103,
        "fullcodeline": "if \"ffmpegCommandline\" in data[\"webcam\"]:"
    },
    {
        "line": 130,
        "fullcodeline": "if \"bitrate\" in data[\"webcam\"] and data[\"webcam\"][\"bitrate\"]:"
    },
    {
        "line": 138,
        "fullcodeline": "if \"ffmpegThreads\" in data[\"webcam\"]:"
    },
    {
        "line": 140,
        "fullcodeline": "if \"ffmpegVideoCodec\" in data[\"webcam\"] and data[\"webcam\"]["
    },
    {
        "line": 144,
        "fullcodeline": "if \"watermark\" in data[\"webcam\"]:"
    },
    {
        "line": 146,
        "fullcodeline": "if \"defaultWebcam\" in data[\"webcam\"]:"
    },
    {
        "line": 148,
        "fullcodeline": "if \"snapshotWebcam\" in data[\"webcam\"]:"
    },
    {
        "line": 155,
        "fullcodeline": "if \"temperatureGraph\" in data[\"feature\"]:"
    },
    {
        "line": 159,
        "fullcodeline": "if \"sdSupport\" in data[\"feature\"]:"
    },
    {
        "line": 161,
        "fullcodeline": "if \"keyboardControl\" in data[\"feature\"]:"
    },
    {
        "line": 165,
        "fullcodeline": "if \"pollWatched\" in data[\"feature\"]:"
    },
    {
        "line": 167,
        "fullcodeline": "if \"modelSizeDetection\" in data[\"feature\"]:"
    },
    {
        "line": 171,
        "fullcodeline": "if \"rememberFileFolder\" in data[\"feature\"]:"
    },
    {
        "line": 176,
        "fullcodeline": "if \"printStartConfirmation\" in data[\"feature\"]:"
    },
    {
        "line": 181,
        "fullcodeline": "if \"printCancelConfirmation\" in data[\"feature\"]:"
    },
    {
        "line": 186,
        "fullcodeline": "if \"uploadOverwriteConfirmation\" in data[\"feature\"]:"
    },
    {
        "line": 191,
        "fullcodeline": "if \"g90InfluencesExtruder\" in data[\"feature\"]:"
    },
    {
        "line": 196,
        "fullcodeline": "if \"autoUppercaseBlacklist\" in data[\"feature\"] and isinstance("
    },
    {
        "line": 203,
        "fullcodeline": "if \"enableDragDropUpload\" in data[\"feature\"]:"
    },
    {
        "line": 210,
        "fullcodeline": "if \"runAt\" in data[\"gcodeAnalysis\"]:"
    },
    {
        "line": 212,
        "fullcodeline": "if \"bedZ\" in data[\"gcodeAnalysis\"]:"
    },
    {
        "line": 216,
        "fullcodeline": "if \"autoconnect\" in data[\"serial\"]:"
    },
    {
        "line": 218,
        "fullcodeline": "if \"port\" in data[\"serial\"]:"
    },
    {
        "line": 220,
        "fullcodeline": "if \"baudrate\" in data[\"serial\"]:"
    },
    {
        "line": 222,
        "fullcodeline": "if \"exclusive\" in data[\"serial\"]:"
    },
    {
        "line": 224,
        "fullcodeline": "if \"lowLatency\" in data[\"serial\"]:"
    },
    {
        "line": 226,
        "fullcodeline": "if \"timeoutConnection\" in data[\"serial\"]:"
    },
    {
        "line": 232,
        "fullcodeline": "if \"timeoutDetectionFirst\" in data[\"serial\"]:"
    },
    {
        "line": 238,
        "fullcodeline": "if \"timeoutDetectionConsecutive\" in data[\"serial\"]:"
    },
    {
        "line": 244,
        "fullcodeline": "if \"timeoutCommunication\" in data[\"serial\"]:"
    },
    {
        "line": 250,
        "fullcodeline": "if \"timeoutCommunicationBusy\" in data[\"serial\"]:"
    },
    {
        "line": 256,
        "fullcodeline": "if \"timeoutTemperature\" in data[\"serial\"]:"
    },
    {
        "line": 262,
        "fullcodeline": "if \"timeoutTemperatureTargetSet\" in data[\"serial\"]:"
    },
    {
        "line": 268,
        "fullcodeline": "if \"timeoutTemperatureAutoreport\" in data[\"serial\"]:"
    },
    {
        "line": 274,
        "fullcodeline": "if \"timeoutSdStatus\" in data[\"serial\"]:"
    },
    {
        "line": 280,
        "fullcodeline": "if \"timeoutSdStatusAutoreport\" in data[\"serial\"]:"
    },
    {
        "line": 286,
        "fullcodeline": "if \"timeoutPosAutoreport\" in data[\"serial\"]:"
    },
    {
        "line": 292,
        "fullcodeline": "if \"timeoutBaudrateDetectionPause\" in data[\"serial\"]:"
    },
    {
        "line": 298,
        "fullcodeline": "if \"timeoutPositionLogWait\" in data[\"serial\"]:"
    },
    {
        "line": 304,
        "fullcodeline": "if \"additionalPorts\" in data[\"serial\"] and isinstance("
    },
    {
        "line": 308,
        "fullcodeline": "if \"additionalBaudrates\" in data[\"serial\"] and isinstance("
    },
    {
        "line": 314,
        "fullcodeline": "if \"blacklistedPorts\" in data[\"serial\"] and isinstance("
    },
    {
        "line": 318,
        "fullcodeline": "if \"blacklistedBaudrates\" in data[\"serial\"] and isinstance("
    },
    {
        "line": 324,
        "fullcodeline": "if \"longRunningCommands\" in data[\"serial\"] and isinstance("
    },
    {
        "line": 330,
        "fullcodeline": "if \"checksumRequiringCommands\" in data[\"serial\"] and isinstance("
    },
    {
        "line": 337,
        "fullcodeline": "if \"blockedCommands\" in data[\"serial\"] and isinstance("
    },
    {
        "line": 341,
        "fullcodeline": "if \"ignoredCommands\" in data[\"serial\"] and isinstance("
    },
    {
        "line": 345,
        "fullcodeline": "if \"pausingCommands\" in data[\"serial\"] and isinstance("
    },
    {
        "line": 349,
        "fullcodeline": "if \"sdCancelCommand\" in data[\"serial\"]:"
    },
    {
        "line": 351,
        "fullcodeline": "if \"emergencyCommands\" in data[\"serial\"] and isinstance("
    },
    {
        "line": 355,
        "fullcodeline": "if \"helloCommand\" in data[\"serial\"]:"
    },
    {
        "line": 357,
        "fullcodeline": "if \"ignoreErrorsFromFirmware\" in data[\"serial\"]:"
    },
    {
        "line": 362,
        "fullcodeline": "if \"disconnectOnErrors\" in data[\"serial\"]:"
    },
    {
        "line": 366,
        "fullcodeline": "if \"triggerOkForM29\" in data[\"serial\"]:"
    },
    {
        "line": 368,
        "fullcodeline": "if \"supportResendsWithoutOk\" in data[\"serial\"]:"
    },
    {
        "line": 372,
        "fullcodeline": "if \"waitForStart\" in data[\"serial\"]:"
    },
    {
        "line": 376,
        "fullcodeline": "if \"waitToLoadSdFileList\" in data[\"serial\"]:"
    },
    {
        "line": 381,
        "fullcodeline": "if \"alwaysSendChecksum\" in data[\"serial\"]:"
    },
    {
        "line": 385,
        "fullcodeline": "if \"neverSendChecksum\" in data[\"serial\"]:"
    },
    {
        "line": 389,
        "fullcodeline": "if \"sendChecksumWithUnknownCommands\" in data[\"serial\"]:"
    },
    {
        "line": 394,
        "fullcodeline": "if \"unknownCommandsNeedAck\" in data[\"serial\"]:"
    },
    {
        "line": 399,
        "fullcodeline": "if \"sdRelativePath\" in data[\"serial\"]:"
    },
    {
        "line": 401,
        "fullcodeline": "if \"sdAlwaysAvailable\" in data[\"serial\"]:"
    },
    {
        "line": 405,
        "fullcodeline": "if \"sdLowerCase\" in data[\"serial\"]:"
    },
    {
        "line": 407,
        "fullcodeline": "if \"swallowOkAfterResend\" in data[\"serial\"]:"
    },
    {
        "line": 411,
        "fullcodeline": "if \"repetierTargetTemp\" in data[\"serial\"]:"
    },
    {
        "line": 415,
        "fullcodeline": "if \"externalHeatupDetection\" in data[\"serial\"]:"
    },
    {
        "line": 420,
        "fullcodeline": "if \"ignoreIdenticalResends\" in data[\"serial\"]:"
    },
    {
        "line": 425,
        "fullcodeline": "if \"firmwareDetection\" in data[\"serial\"]:"
    },
    {
        "line": 429,
        "fullcodeline": "if \"blockWhileDwelling\" in data[\"serial\"]:"
    },
    {
        "line": 433,
        "fullcodeline": "if \"useParityWorkaround\" in data[\"serial\"]:"
    },
    {
        "line": 437,
        "fullcodeline": "if \"sanityCheckTools\" in data[\"serial\"]:"
    },
    {
        "line": 441,
        "fullcodeline": "if \"notifySuppressedCommands\" in data[\"serial\"]:"
    },
    {
        "line": 445,
        "fullcodeline": "if \"sendM112OnError\" in data[\"serial\"]:"
    },
    {
        "line": 447,
        "fullcodeline": "if \"disableSdPrintingDetection\" in data[\"serial\"]:"
    },
    {
        "line": 452,
        "fullcodeline": "if \"ackMax\" in data[\"serial\"]:"
    },
    {
        "line": 454,
        "fullcodeline": "if \"logPositionOnPause\" in data[\"serial\"]:"
    },
    {
        "line": 458,
        "fullcodeline": "if \"logPositionOnCancel\" in data[\"serial\"]:"
    },
    {
        "line": 462,
        "fullcodeline": "if \"abortHeatupOnCancel\" in data[\"serial\"]:"
    },
    {
        "line": 466,
        "fullcodeline": "if \"maxTimeoutsIdle\" in data[\"serial\"]:"
    },
    {
        "line": 471,
        "fullcodeline": "if \"maxTimeoutsPrinting\" in data[\"serial\"]:"
    },
    {
        "line": 476,
        "fullcodeline": "if \"maxTimeoutsLong\" in data[\"serial\"]:"
    },
    {
        "line": 481,
        "fullcodeline": "if \"capAutoreportTemp\" in data[\"serial\"]:"
    },
    {
        "line": 486,
        "fullcodeline": "if \"capAutoreportSdStatus\" in data[\"serial\"]:"
    },
    {
        "line": 491,
        "fullcodeline": "if \"capAutoreportPos\" in data[\"serial\"]:"
    },
    {
        "line": 496,
        "fullcodeline": "if \"capBusyProtocol\" in data[\"serial\"]:"
    },
    {
        "line": 501,
        "fullcodeline": "if \"capEmergencyParser\" in data[\"serial\"]:"
    },
    {
        "line": 506,
        "fullcodeline": "if \"capExtendedM20\" in data[\"serial\"]:"
    },
    {
        "line": 511,
        "fullcodeline": "if \"capLfnWrite\" in data[\"serial\"]:"
    },
    {
        "line": 516,
        "fullcodeline": "if \"resendRatioThreshold\" in data[\"serial\"]:"
    },
    {
        "line": 520,
        "fullcodeline": "if \"resendRatioStart\" in data[\"serial\"]:"
    },
    {
        "line": 522,
        "fullcodeline": "if \"ignoreEmptyPorts\" in data[\"serial\"]:"
    },
    {
        "line": 527,
        "fullcodeline": "if \"encoding\" in data[\"serial\"]:"
    },
    {
        "line": 530,
        "fullcodeline": "if \"enableShutdownActionCommand\" in data[\"serial\"]:"
    },
    {
        "line": 537,
        "fullcodeline": "if \"log\" in data[\"serial\"]:"
    },
    {
        "line": 539,
        "fullcodeline": "if oldLog and not s.getBoolean([\"serial\", \"log\"]):"
    },
    {
        "line": 549,
        "fullcodeline": "if \"profiles\" in data[\"temperature\"]:"
    },
    {
        "line": 559,
        "fullcodeline": "if \"cutoff\" in data[\"temperature\"]:"
    },
    {
        "line": 566,
        "fullcodeline": "if \"sendAutomatically\" in data[\"temperature\"]:"
    },
    {
        "line": 571,
        "fullcodeline": "if \"sendAutomaticallyAfter\" in data[\"temperature\"]:"
    },
    {
        "line": 583,
        "fullcodeline": "if \"actions\" in data[\"system\"]:"
    },
    {
        "line": 585,
        "fullcodeline": "if \"events\" in data[\"system\"]:"
    },
    {
        "line": 589,
        "fullcodeline": "if \"gcode\" in data[\"scripts\"] and isinstance(data[\"scripts\"][\"gcode\"], dict):"
    },
    {
        "line": 600,
        "fullcodeline": "if \"commands\" in data[\"server\"]:"
    },
    {
        "line": 616,
        "fullcodeline": "if \"diskspace\" in data[\"server\"]:"
    },
    {
        "line": 627,
        "fullcodeline": "if \"onlineCheck\" in data[\"server\"]:"
    },
    {
        "line": 654,
        "fullcodeline": "if \"pluginBlacklist\" in data[\"server\"]:"
    },
    {
        "line": 671,
        "fullcodeline": "if \"allowFraming\" in data[\"server\"]:"
    },
    {
        "line": 676,
        "fullcodeline": "if \"pluginTimings\" in data[\"devel\"]:"
    },
    {
        "line": 678,
        "fullcodeline": "if oldLog and not s.getBoolean([\"devel\", \"pluginTimings\"]):"
    },
    {
        "line": 688,
        "fullcodeline": "if \"defaultSlicer\" in data[\"slicing\"]:"
    },
    {
        "line": 692,
        "fullcodeline": "for plugin in octoprint.plugin.plugin_manager().get_implementations("
    },
    {
        "line": 11,
        "fullcodeline": "folders = data[\"folder\"]"
    },
    {
        "line": 12,
        "fullcodeline": "future = {}"
    },
    {
        "line": 39,
        "fullcodeline": "s.setBoolean([\"api\", \"allowCrossOrigin\"], data[\"api\"][\"allowCrossOrigin\"])"
    },
    {
        "line": 43,
        "fullcodeline": "s.set([\"appearance\", \"name\"], data[\"appearance\"][\"name\"])"
    },
    {
        "line": 45,
        "fullcodeline": "s.set([\"appearance\", \"color\"], data[\"appearance\"][\"color\"])"
    },
    {
        "line": 47,
        "fullcodeline": "s.setBoolean("
    },
    {
        "line": 51,
        "fullcodeline": "s.setBoolean([\"appearance\", \"colorIcon\"], data[\"appearance\"][\"colorIcon\"])"
    },
    {
        "line": 53,
        "fullcodeline": "s.set("
    },
    {
        "line": 57,
        "fullcodeline": "s.setBoolean("
    },
    {
        "line": 62,
        "fullcodeline": "s.setBoolean([\"appearance\", \"fuzzyTimes\"], data[\"appearance\"][\"fuzzyTimes\"])"
    },
    {
        "line": 64,
        "fullcodeline": "s.setBoolean("
    },
    {
        "line": 69,
        "fullcodeline": "s.setBoolean("
    },
    {
        "line": 76,
        "fullcodeline": "s.setInt("
    },
    {
        "line": 89,
        "fullcodeline": "s.setBoolean([\"webcam\", \"webcamEnabled\"], data[\"webcam\"][\"webcamEnabled\"])"
    },
    {
        "line": 91,
        "fullcodeline": "s.setBoolean("
    },
    {
        "line": 95,
        "fullcodeline": "s.setInt([\"webcam\", \"snapshotTimeout\"], data[\"webcam\"][\"snapshotTimeout\"])"
    },
    {
        "line": 97,
        "fullcodeline": "s.setBoolean("
    },
    {
        "line": 102,
        "fullcodeline": "s.set([\"webcam\", \"ffmpeg\"], data[\"webcam\"][\"ffmpegPath\"])"
    },
    {
        "line": 104,
        "fullcodeline": "commandline = data[\"webcam\"][\"ffmpegCommandline\"]"
    },
    {
        "line": 131,
        "fullcodeline": "bitrate = str(data[\"webcam\"][\"bitrate\"])"
    },
    {
        "line": 137,
        "fullcodeline": "s.set([\"webcam\", \"bitrate\"], bitrate)"
    },
    {
        "line": 139,
        "fullcodeline": "s.setInt([\"webcam\", \"ffmpegThreads\"], data[\"webcam\"][\"ffmpegThreads\"])"
    },
    {
        "line": 143,
        "fullcodeline": "s.set([\"webcam\", \"ffmpegVideoCodec\"], data[\"webcam\"][\"ffmpegVideoCodec\"])"
    },
    {
        "line": 145,
        "fullcodeline": "s.setBoolean([\"webcam\", \"watermark\"], data[\"webcam\"][\"watermark\"])"
    },
    {
        "line": 147,
        "fullcodeline": "s.set([\"webcam\", \"defaultWebcam\"], data[\"webcam\"][\"defaultWebcam\"])"
    },
    {
        "line": 149,
        "fullcodeline": "s.set([\"webcam\", \"snapshotWebcam\"], data[\"webcam\"][\"snapshotWebcam\"])"
    },
    {
        "line": 152,
        "fullcodeline": "configure_timelapse()"
    },
    {
        "line": 156,
        "fullcodeline": "s.setBoolean("
    },
    {
        "line": 160,
        "fullcodeline": "s.setBoolean([\"feature\", \"sdSupport\"], data[\"feature\"][\"sdSupport\"])"
    },
    {
        "line": 162,
        "fullcodeline": "s.setBoolean("
    },
    {
        "line": 166,
        "fullcodeline": "s.setBoolean([\"feature\", \"pollWatched\"], data[\"feature\"][\"pollWatched\"])"
    },
    {
        "line": 168,
        "fullcodeline": "s.setBoolean("
    },
    {
        "line": 172,
        "fullcodeline": "s.setBoolean("
    },
    {
        "line": 177,
        "fullcodeline": "s.setBoolean("
    },
    {
        "line": 182,
        "fullcodeline": "s.setBoolean("
    },
    {
        "line": 187,
        "fullcodeline": "s.setBoolean("
    },
    {
        "line": 192,
        "fullcodeline": "s.setBoolean("
    },
    {
        "line": 199,
        "fullcodeline": "s.set("
    },
    {
        "line": 204,
        "fullcodeline": "s.setBoolean("
    },
    {
        "line": 211,
        "fullcodeline": "s.set([\"gcodeAnalysis\", \"runAt\"], data[\"gcodeAnalysis\"][\"runAt\"])"
    },
    {
        "line": 213,
        "fullcodeline": "s.setFloat([\"gcodeAnalysis\", \"bedZ\"], data[\"gcodeAnalysis\"][\"bedZ\"])"
    },
    {
        "line": 217,
        "fullcodeline": "s.setBoolean([\"serial\", \"autoconnect\"], data[\"serial\"][\"autoconnect\"])"
    },
    {
        "line": 219,
        "fullcodeline": "s.set([\"serial\", \"port\"], data[\"serial\"][\"port\"])"
    },
    {
        "line": 221,
        "fullcodeline": "s.setInt([\"serial\", \"baudrate\"], data[\"serial\"][\"baudrate\"])"
    },
    {
        "line": 223,
        "fullcodeline": "s.setBoolean([\"serial\", \"exclusive\"], data[\"serial\"][\"exclusive\"])"
    },
    {
        "line": 225,
        "fullcodeline": "s.setBoolean([\"serial\", \"lowLatency\"], data[\"serial\"][\"lowLatency\"])"
    },
    {
        "line": 227,
        "fullcodeline": "s.setFloat("
    },
    {
        "line": 233,
        "fullcodeline": "s.setFloat("
    },
    {
        "line": 239,
        "fullcodeline": "s.setFloat("
    },
    {
        "line": 245,
        "fullcodeline": "s.setFloat("
    },
    {
        "line": 251,
        "fullcodeline": "s.setFloat("
    },
    {
        "line": 257,
        "fullcodeline": "s.setFloat("
    },
    {
        "line": 263,
        "fullcodeline": "s.setFloat("
    },
    {
        "line": 269,
        "fullcodeline": "s.setFloat("
    },
    {
        "line": 275,
        "fullcodeline": "s.setFloat("
    },
    {
        "line": 281,
        "fullcodeline": "s.setFloat("
    },
    {
        "line": 287,
        "fullcodeline": "s.setFloat("
    },
    {
        "line": 293,
        "fullcodeline": "s.setFloat("
    },
    {
        "line": 299,
        "fullcodeline": "s.setFloat("
    },
    {
        "line": 307,
        "fullcodeline": "s.set([\"serial\", \"additionalPorts\"], data[\"serial\"][\"additionalPorts\"])"
    },
    {
        "line": 311,
        "fullcodeline": "s.set("
    },
    {
        "line": 317,
        "fullcodeline": "s.set([\"serial\", \"blacklistedPorts\"], data[\"serial\"][\"blacklistedPorts\"])"
    },
    {
        "line": 321,
        "fullcodeline": "s.set("
    },
    {
        "line": 327,
        "fullcodeline": "s.set("
    },
    {
        "line": 333,
        "fullcodeline": "s.set("
    },
    {
        "line": 340,
        "fullcodeline": "s.set([\"serial\", \"blockedCommands\"], data[\"serial\"][\"blockedCommands\"])"
    },
    {
        "line": 344,
        "fullcodeline": "s.set([\"serial\", \"ignoredCommands\"], data[\"serial\"][\"ignoredCommands\"])"
    },
    {
        "line": 348,
        "fullcodeline": "s.set([\"serial\", \"pausingCommands\"], data[\"serial\"][\"pausingCommands\"])"
    },
    {
        "line": 350,
        "fullcodeline": "s.set([\"serial\", \"sdCancelCommand\"], data[\"serial\"][\"sdCancelCommand\"])"
    },
    {
        "line": 354,
        "fullcodeline": "s.set([\"serial\", \"emergencyCommands\"], data[\"serial\"][\"emergencyCommands\"])"
    },
    {
        "line": 356,
        "fullcodeline": "s.set([\"serial\", \"helloCommand\"], data[\"serial\"][\"helloCommand\"])"
    },
    {
        "line": 358,
        "fullcodeline": "s.setBoolean("
    },
    {
        "line": 363,
        "fullcodeline": "s.setBoolean("
    },
    {
        "line": 367,
        "fullcodeline": "s.setBoolean([\"serial\", \"triggerOkForM29\"], data[\"serial\"][\"triggerOkForM29\"])"
    },
    {
        "line": 369,
        "fullcodeline": "value = data[\"serial\"][\"supportResendsWithoutOk\"]"
    },
    {
        "line": 373,
        "fullcodeline": "s.setBoolean("
    },
    {
        "line": 377,
        "fullcodeline": "s.setBoolean("
    },
    {
        "line": 382,
        "fullcodeline": "s.setBoolean("
    },
    {
        "line": 386,
        "fullcodeline": "s.setBoolean("
    },
    {
        "line": 390,
        "fullcodeline": "s.setBoolean("
    },
    {
        "line": 395,
        "fullcodeline": "s.setBoolean("
    },
    {
        "line": 400,
        "fullcodeline": "s.setBoolean([\"serial\", \"sdRelativePath\"], data[\"serial\"][\"sdRelativePath\"])"
    },
    {
        "line": 402,
        "fullcodeline": "s.setBoolean("
    },
    {
        "line": 406,
        "fullcodeline": "s.setBoolean([\"serial\", \"sdLowerCase\"], data[\"serial\"][\"sdLowerCase\"])"
    },
    {
        "line": 408,
        "fullcodeline": "s.setBoolean("
    },
    {
        "line": 412,
        "fullcodeline": "s.setBoolean("
    },
    {
        "line": 416,
        "fullcodeline": "s.setBoolean("
    },
    {
        "line": 421,
        "fullcodeline": "s.setBoolean("
    },
    {
        "line": 426,
        "fullcodeline": "s.setBoolean("
    },
    {
        "line": 430,
        "fullcodeline": "s.setBoolean("
    },
    {
        "line": 434,
        "fullcodeline": "value = data[\"serial\"][\"useParityWorkaround\"]"
    },
    {
        "line": 438,
        "fullcodeline": "s.setBoolean("
    },
    {
        "line": 442,
        "fullcodeline": "value = data[\"serial\"][\"notifySuppressedCommands\"]"
    },
    {
        "line": 446,
        "fullcodeline": "s.setBoolean([\"serial\", \"sendM112OnError\"], data[\"serial\"][\"sendM112OnError\"])"
    },
    {
        "line": 448,
        "fullcodeline": "s.setBoolean("
    },
    {
        "line": 453,
        "fullcodeline": "s.setInt([\"serial\", \"ackMax\"], data[\"serial\"][\"ackMax\"])"
    },
    {
        "line": 455,
        "fullcodeline": "s.setBoolean("
    },
    {
        "line": 459,
        "fullcodeline": "s.setBoolean("
    },
    {
        "line": 463,
        "fullcodeline": "s.setBoolean("
    },
    {
        "line": 467,
        "fullcodeline": "s.setInt("
    },
    {
        "line": 472,
        "fullcodeline": "s.setInt("
    },
    {
        "line": 477,
        "fullcodeline": "s.setInt("
    },
    {
        "line": 482,
        "fullcodeline": "s.setBoolean("
    },
    {
        "line": 487,
        "fullcodeline": "s.setBoolean("
    },
    {
        "line": 492,
        "fullcodeline": "s.setBoolean("
    },
    {
        "line": 497,
        "fullcodeline": "s.setBoolean("
    },
    {
        "line": 502,
        "fullcodeline": "s.setBoolean("
    },
    {
        "line": 507,
        "fullcodeline": "s.setBoolean("
    },
    {
        "line": 512,
        "fullcodeline": "s.setBoolean("
    },
    {
        "line": 517,
        "fullcodeline": "s.setInt("
    },
    {
        "line": 521,
        "fullcodeline": "s.setInt([\"serial\", \"resendRatioStart\"], data[\"serial\"][\"resendRatioStart\"])"
    },
    {
        "line": 523,
        "fullcodeline": "s.setBoolean("
    },
    {
        "line": 528,
        "fullcodeline": "s.set([\"serial\", \"encoding\"], data[\"serial\"][\"encoding\"])"
    },
    {
        "line": 531,
        "fullcodeline": "s.setBoolean("
    },
    {
        "line": 538,
        "fullcodeline": "s.setBoolean([\"serial\", \"log\"], data[\"serial\"][\"log\"])"
    },
    {
        "line": 550,
        "fullcodeline": "result = []"
    },
    {
        "line": 558,
        "fullcodeline": "s.set([\"temperature\", \"profiles\"], result)"
    },
    {
        "line": 567,
        "fullcodeline": "s.setBoolean("
    },
    {
        "line": 572,
        "fullcodeline": "s.setInt("
    },
    {
        "line": 584,
        "fullcodeline": "s.set([\"system\", \"actions\"], data[\"system\"][\"actions\"])"
    },
    {
        "line": 586,
        "fullcodeline": "s.set([\"system\", \"events\"], data[\"system\"][\"events\"])"
    },
    {
        "line": 672,
        "fullcodeline": "s.setBoolean([\"server\", \"allowFraming\"], data[\"server\"][\"allowFraming\"])"
    },
    {
        "line": 677,
        "fullcodeline": "s.setBoolean([\"devel\", \"pluginTimings\"], data[\"devel\"][\"pluginTimings\"])"
    },
    {
        "line": 689,
        "fullcodeline": "s.set([\"slicing\", \"defaultSlicer\"], data[\"slicing\"][\"defaultSlicer\"])"
    },
    {
        "line": 13,
        "fullcodeline": "for folder in FOLDER_TYPES:"
    },
    {
        "line": 18,
        "fullcodeline": "for folder in folders:"
    },
    {
        "line": 48,
        "fullcodeline": "[\"appearance\", \"colorTransparent\"], data[\"appearance\"][\"colorTransparent\"]"
    },
    {
        "line": 54,
        "fullcodeline": "[\"appearance\", \"defaultLanguage\"], data[\"appearance\"][\"defaultLanguage\"]"
    },
    {
        "line": 58,
        "fullcodeline": "[\"appearance\", \"showFahrenheitAlso\"],"
    },
    {
        "line": 65,
        "fullcodeline": "[\"appearance\", \"closeModalsWithClick\"],"
    },
    {
        "line": 70,
        "fullcodeline": "[\"appearance\", \"showInternalFilename\"],"
    },
    {
        "line": 77,
        "fullcodeline": "[\"printerParameters\", \"defaultExtrusionLength\"],"
    },
    {
        "line": 92,
        "fullcodeline": "[\"webcam\", \"timelapseEnabled\"], data[\"webcam\"][\"timelapseEnabled\"]"
    },
    {
        "line": 98,
        "fullcodeline": "[\"webcam\", \"snapshotSslValidation\"],"
    },
    {
        "line": 105,
        "fullcodeline": "if not all("
    },
    {
        "line": 132,
        "fullcodeline": "if not TIMELAPSE_BITRATE_PATTERN.match(bitrate):"
    },
    {
        "line": 142,
        "fullcodeline": "] in (\"mpeg2video\", \"libx264\"):"
    },
    {
        "line": 157,
        "fullcodeline": "[\"feature\", \"temperatureGraph\"], data[\"feature\"][\"temperatureGraph\"]"
    },
    {
        "line": 163,
        "fullcodeline": "[\"feature\", \"keyboardControl\"], data[\"feature\"][\"keyboardControl\"]"
    },
    {
        "line": 169,
        "fullcodeline": "[\"feature\", \"modelSizeDetection\"], data[\"feature\"][\"modelSizeDetection\"]"
    },
    {
        "line": 173,
        "fullcodeline": "[\"feature\", \"rememberFileFolder\"],"
    },
    {
        "line": 178,
        "fullcodeline": "[\"feature\", \"printStartConfirmation\"],"
    },
    {
        "line": 183,
        "fullcodeline": "[\"feature\", \"printCancelConfirmation\"],"
    },
    {
        "line": 188,
        "fullcodeline": "[\"feature\", \"uploadOverwriteConfirmation\"],"
    },
    {
        "line": 193,
        "fullcodeline": "[\"feature\", \"g90InfluencesExtruder\"],"
    },
    {
        "line": 197,
        "fullcodeline": "data[\"feature\"][\"autoUppercaseBlacklist\"], (list, tuple)"
    },
    {
        "line": 200,
        "fullcodeline": "[\"feature\", \"autoUppercaseBlacklist\"],"
    },
    {
        "line": 205,
        "fullcodeline": "[\"feature\", \"enableDragDropUpload\"],"
    },
    {
        "line": 228,
        "fullcodeline": "[\"serial\", \"timeout\", \"connection\"],"
    },
    {
        "line": 234,
        "fullcodeline": "[\"serial\", \"timeout\", \"detectionFirst\"],"
    },
    {
        "line": 240,
        "fullcodeline": "[\"serial\", \"timeout\", \"detectionConsecutive\"],"
    },
    {
        "line": 246,
        "fullcodeline": "[\"serial\", \"timeout\", \"communication\"],"
    },
    {
        "line": 252,
        "fullcodeline": "[\"serial\", \"timeout\", \"communicationBusy\"],"
    },
    {
        "line": 258,
        "fullcodeline": "[\"serial\", \"timeout\", \"temperature\"],"
    },
    {
        "line": 264,
        "fullcodeline": "[\"serial\", \"timeout\", \"temperatureTargetSet\"],"
    },
    {
        "line": 270,
        "fullcodeline": "[\"serial\", \"timeout\", \"temperatureAutoreport\"],"
    },
    {
        "line": 276,
        "fullcodeline": "[\"serial\", \"timeout\", \"sdStatus\"],"
    },
    {
        "line": 282,
        "fullcodeline": "[\"serial\", \"timeout\", \"sdStatusAutoreport\"],"
    },
    {
        "line": 288,
        "fullcodeline": "[\"serial\", \"timeout\", \"posAutoreport\"],"
    },
    {
        "line": 294,
        "fullcodeline": "[\"serial\", \"timeout\", \"baudrateDetectionPause\"],"
    },
    {
        "line": 300,
        "fullcodeline": "[\"serial\", \"timeout\", \"positionLogWait\"],"
    },
    {
        "line": 305,
        "fullcodeline": "data[\"serial\"][\"additionalPorts\"], (list, tuple)"
    },
    {
        "line": 309,
        "fullcodeline": "data[\"serial\"][\"additionalBaudrates\"], (list, tuple)"
    },
    {
        "line": 312,
        "fullcodeline": "[\"serial\", \"additionalBaudrates\"], data[\"serial\"][\"additionalBaudrates\"]"
    },
    {
        "line": 315,
        "fullcodeline": "data[\"serial\"][\"blacklistedPorts\"], (list, tuple)"
    },
    {
        "line": 319,
        "fullcodeline": "data[\"serial\"][\"blacklistedBaudrates\"], (list, tuple)"
    },
    {
        "line": 322,
        "fullcodeline": "[\"serial\", \"blacklistedBaudrates\"], data[\"serial\"][\"blacklistedBaudrates\"]"
    },
    {
        "line": 325,
        "fullcodeline": "data[\"serial\"][\"longRunningCommands\"], (list, tuple)"
    },
    {
        "line": 328,
        "fullcodeline": "[\"serial\", \"longRunningCommands\"], data[\"serial\"][\"longRunningCommands\"]"
    },
    {
        "line": 331,
        "fullcodeline": "data[\"serial\"][\"checksumRequiringCommands\"], (list, tuple)"
    },
    {
        "line": 334,
        "fullcodeline": "[\"serial\", \"checksumRequiringCommands\"],"
    },
    {
        "line": 338,
        "fullcodeline": "data[\"serial\"][\"blockedCommands\"], (list, tuple)"
    },
    {
        "line": 342,
        "fullcodeline": "data[\"serial\"][\"ignoredCommands\"], (list, tuple)"
    },
    {
        "line": 346,
        "fullcodeline": "data[\"serial\"][\"pausingCommands\"], (list, tuple)"
    },
    {
        "line": 352,
        "fullcodeline": "data[\"serial\"][\"emergencyCommands\"], (list, tuple)"
    },
    {
        "line": 359,
        "fullcodeline": "[\"serial\", \"ignoreErrorsFromFirmware\"],"
    },
    {
        "line": 364,
        "fullcodeline": "[\"serial\", \"disconnectOnErrors\"], data[\"serial\"][\"disconnectOnErrors\"]"
    },
    {
        "line": 370,
        "fullcodeline": "if value in (\"always\", \"detect\", \"never\"):"
    },
    {
        "line": 374,
        "fullcodeline": "[\"serial\", \"waitForStartOnConnect\"], data[\"serial\"][\"waitForStart\"]"
    },
    {
        "line": 378,
        "fullcodeline": "[\"serial\", \"waitToLoadSdFileList\"],"
    },
    {
        "line": 383,
        "fullcodeline": "[\"serial\", \"alwaysSendChecksum\"], data[\"serial\"][\"alwaysSendChecksum\"]"
    },
    {
        "line": 387,
        "fullcodeline": "[\"serial\", \"neverSendChecksum\"], data[\"serial\"][\"neverSendChecksum\"]"
    },
    {
        "line": 391,
        "fullcodeline": "[\"serial\", \"sendChecksumWithUnknownCommands\"],"
    },
    {
        "line": 396,
        "fullcodeline": "[\"serial\", \"unknownCommandsNeedAck\"],"
    },
    {
        "line": 403,
        "fullcodeline": "[\"serial\", \"sdAlwaysAvailable\"], data[\"serial\"][\"sdAlwaysAvailable\"]"
    },
    {
        "line": 409,
        "fullcodeline": "[\"serial\", \"swallowOkAfterResend\"], data[\"serial\"][\"swallowOkAfterResend\"]"
    },
    {
        "line": 413,
        "fullcodeline": "[\"serial\", \"repetierTargetTemp\"], data[\"serial\"][\"repetierTargetTemp\"]"
    },
    {
        "line": 417,
        "fullcodeline": "[\"serial\", \"externalHeatupDetection\"],"
    },
    {
        "line": 422,
        "fullcodeline": "[\"serial\", \"ignoreIdenticalResends\"],"
    },
    {
        "line": 427,
        "fullcodeline": "[\"serial\", \"firmwareDetection\"], data[\"serial\"][\"firmwareDetection\"]"
    },
    {
        "line": 431,
        "fullcodeline": "[\"serial\", \"blockWhileDwelling\"], data[\"serial\"][\"blockWhileDwelling\"]"
    },
    {
        "line": 435,
        "fullcodeline": "if value in (\"always\", \"detect\", \"never\"):"
    },
    {
        "line": 439,
        "fullcodeline": "[\"serial\", \"sanityCheckTools\"], data[\"serial\"][\"sanityCheckTools\"]"
    },
    {
        "line": 443,
        "fullcodeline": "if value in (\"info\", \"warn\", \"never\"):"
    },
    {
        "line": 449,
        "fullcodeline": "[\"serial\", \"disableSdPrintingDetection\"],"
    },
    {
        "line": 456,
        "fullcodeline": "[\"serial\", \"logPositionOnPause\"], data[\"serial\"][\"logPositionOnPause\"]"
    },
    {
        "line": 460,
        "fullcodeline": "[\"serial\", \"logPositionOnCancel\"], data[\"serial\"][\"logPositionOnCancel\"]"
    },
    {
        "line": 464,
        "fullcodeline": "[\"serial\", \"abortHeatupOnCancel\"], data[\"serial\"][\"abortHeatupOnCancel\"]"
    },
    {
        "line": 468,
        "fullcodeline": "[\"serial\", \"maxCommunicationTimeouts\", \"idle\"],"
    },
    {
        "line": 473,
        "fullcodeline": "[\"serial\", \"maxCommunicationTimeouts\", \"printing\"],"
    },
    {
        "line": 478,
        "fullcodeline": "[\"serial\", \"maxCommunicationTimeouts\", \"long\"],"
    },
    {
        "line": 483,
        "fullcodeline": "[\"serial\", \"capabilities\", \"autoreport_temp\"],"
    },
    {
        "line": 488,
        "fullcodeline": "[\"serial\", \"capabilities\", \"autoreport_sdstatus\"],"
    },
    {
        "line": 493,
        "fullcodeline": "[\"serial\", \"capabilities\", \"autoreport_pos\"],"
    },
    {
        "line": 498,
        "fullcodeline": "[\"serial\", \"capabilities\", \"busy_protocol\"],"
    },
    {
        "line": 503,
        "fullcodeline": "[\"serial\", \"capabilities\", \"emergency_parser\"],"
    },
    {
        "line": 513,
        "fullcodeline": "[\"serial\", \"capabilities\", \"lfn_write\"],"
    },
    {
        "line": 518,
        "fullcodeline": "[\"serial\", \"resendRatioThreshold\"], data[\"serial\"][\"resendRatioThreshold\"]"
    },
    {
        "line": 524,
        "fullcodeline": "[\"serial\", \"ignoreEmptyPorts\"], data[\"serial\"][\"ignoreEmptyPorts\"]"
    },
    {
        "line": 532,
        "fullcodeline": "[\"serial\", \"enableShutdownActionCommand\"],"
    },
    {
        "line": 541,
        "fullcodeline": "logging.getLogger(\"SERIAL\").debug(\"Disabling serial logging\")"
    },
    {
        "line": 542,
        "fullcodeline": "logging.getLogger(\"SERIAL\").setLevel(logging.CRITICAL)"
    },
    {
        "line": 543,
        "fullcodeline": "elif not oldLog and s.getBoolean([\"serial\", \"log\"]):"
    },
    {
        "line": 551,
        "fullcodeline": "for profile in data[\"temperature\"][\"profiles\"]:"
    },
    {
        "line": 568,
        "fullcodeline": "[\"temperature\", \"sendAutomatically\"],"
    },
    {
        "line": 573,
        "fullcodeline": "[\"temperature\", \"sendAutomaticallyAfter\"],"
    },
    {
        "line": 590,
        "fullcodeline": "for name, script in data[\"scripts\"][\"gcode\"].items():"
    },
    {
        "line": 601,
        "fullcodeline": "if \"systemShutdownCommand\" in data[\"server\"][\"commands\"]:"
    },
    {
        "line": 606,
        "fullcodeline": "if \"systemRestartCommand\" in data[\"server\"][\"commands\"]:"
    },
    {
        "line": 611,
        "fullcodeline": "if \"serverRestartCommand\" in data[\"server\"][\"commands\"]:"
    },
    {
        "line": 617,
        "fullcodeline": "if \"warning\" in data[\"server\"][\"diskspace\"]:"
    },
    {
        "line": 622,
        "fullcodeline": "if \"critical\" in data[\"server\"][\"diskspace\"]:"
    },
    {
        "line": 628,
        "fullcodeline": "if \"enabled\" in data[\"server\"][\"onlineCheck\"]:"
    },
    {
        "line": 633,
        "fullcodeline": "if \"interval\" in data[\"server\"][\"onlineCheck\"]:"
    },
    {
        "line": 639,
        "fullcodeline": "if \"host\" in data[\"server\"][\"onlineCheck\"]:"
    },
    {
        "line": 644,
        "fullcodeline": "if \"port\" in data[\"server\"][\"onlineCheck\"]:"
    },
    {
        "line": 649,
        "fullcodeline": "if \"name\" in data[\"server\"][\"onlineCheck\"]:"
    },
    {
        "line": 655,
        "fullcodeline": "if \"enabled\" in data[\"server\"][\"pluginBlacklist\"]:"
    },
    {
        "line": 660,
        "fullcodeline": "if \"url\" in data[\"server\"][\"pluginBlacklist\"]:"
    },
    {
        "line": 665,
        "fullcodeline": "if \"ttl\" in data[\"server\"][\"pluginBlacklist\"]:"
    },
    {
        "line": 680,
        "fullcodeline": "logging.getLogger(\"PLUGIN_TIMINGS\").debug(\"Disabling plugin timings logging\")"
    },
    {
        "line": 681,
        "fullcodeline": "logging.getLogger(\"PLUGIN_TIMINGS\").setLevel(logging.INFO)"
    },
    {
        "line": 682,
        "fullcodeline": "elif not oldLog and s.getBoolean([\"devel\", \"pluginTimings\"]):"
    },
    {
        "line": 695,
        "fullcodeline": "plugin_id = plugin._identifier"
    },
    {
        "line": 34,
        "fullcodeline": "logger.exception(\"Something went wrong while saving a folder path\")"
    },
    {
        "line": 35,
        "fullcodeline": "abort(400, description=\"At least one of the configured folders is invalid\")"
    },
    {
        "line": 83,
        "fullcodeline": "if key in data[\"webcam\"]:"
    },
    {
        "line": 108,
        "fullcodeline": "abort("
    },
    {
        "line": 113,
        "fullcodeline": "commandline.format("
    },
    {
        "line": 133,
        "fullcodeline": "abort("
    },
    {
        "line": 371,
        "fullcodeline": "s.set([\"serial\", \"supportResendsWithoutOk\"], value)"
    },
    {
        "line": 436,
        "fullcodeline": "s.set([\"serial\", \"useParityWorkaround\"], value)"
    },
    {
        "line": 444,
        "fullcodeline": "s.set([\"serial\", \"notifySuppressedCommands\"], value)"
    },
    {
        "line": 508,
        "fullcodeline": "[\"serial\", \"capabilities\", \"extended_m20\"],"
    },
    {
        "line": 561,
        "fullcodeline": "cutoff = int(data[\"temperature\"][\"cutoff\"])"
    },
    {
        "line": 602,
        "fullcodeline": "s.set("
    },
    {
        "line": 607,
        "fullcodeline": "s.set("
    },
    {
        "line": 612,
        "fullcodeline": "s.set("
    },
    {
        "line": 618,
        "fullcodeline": "s.setInt("
    },
    {
        "line": 623,
        "fullcodeline": "s.setInt("
    },
    {
        "line": 629,
        "fullcodeline": "s.setBoolean("
    },
    {
        "line": 640,
        "fullcodeline": "s.set("
    },
    {
        "line": 645,
        "fullcodeline": "s.setInt("
    },
    {
        "line": 650,
        "fullcodeline": "s.set("
    },
    {
        "line": 656,
        "fullcodeline": "s.setBoolean("
    },
    {
        "line": 661,
        "fullcodeline": "s.set("
    },
    {
        "line": 696,
        "fullcodeline": "if plugin_id in data[\"plugins\"]:"
    },
    {
        "line": 14,
        "fullcodeline": "future[folder] = s.getBaseFolder(folder)"
    },
    {
        "line": 32,
        "fullcodeline": "s.setBaseFolder(folder, future[folder])"
    },
    {
        "line": 84,
        "fullcodeline": "logger.warning("
    },
    {
        "line": 106,
        "fullcodeline": "map(lambda x: \"{\" + x + \"}\" in commandline, (\"ffmpeg\", \"input\", \"output\"))"
    },
    {
        "line": 129,
        "fullcodeline": "s.set([\"webcam\", \"ffmpegCommandline\"], commandline)"
    },
    {
        "line": 545,
        "fullcodeline": "logging.getLogger(\"SERIAL\").setLevel(logging.DEBUG)"
    },
    {
        "line": 546,
        "fullcodeline": "logging.getLogger(\"SERIAL\").debug(\"Enabling serial logging\")"
    },
    {
        "line": 557,
        "fullcodeline": "result.append(profile)"
    },
    {
        "line": 562,
        "fullcodeline": "if cutoff > 1:"
    },
    {
        "line": 595,
        "fullcodeline": "s.saveScript("
    },
    {
        "line": 603,
        "fullcodeline": "[\"server\", \"commands\", \"systemShutdownCommand\"],"
    },
    {
        "line": 608,
        "fullcodeline": "[\"server\", \"commands\", \"systemRestartCommand\"],"
    },
    {
        "line": 613,
        "fullcodeline": "[\"server\", \"commands\", \"serverRestartCommand\"],"
    },
    {
        "line": 619,
        "fullcodeline": "[\"server\", \"diskspace\", \"warning\"],"
    },
    {
        "line": 624,
        "fullcodeline": "[\"server\", \"diskspace\", \"critical\"],"
    },
    {
        "line": 630,
        "fullcodeline": "[\"server\", \"onlineCheck\", \"enabled\"],"
    },
    {
        "line": 641,
        "fullcodeline": "[\"server\", \"onlineCheck\", \"host\"],"
    },
    {
        "line": 646,
        "fullcodeline": "[\"server\", \"onlineCheck\", \"port\"],"
    },
    {
        "line": 651,
        "fullcodeline": "[\"server\", \"onlineCheck\", \"name\"],"
    },
    {
        "line": 657,
        "fullcodeline": "[\"server\", \"pluginBlacklist\", \"enabled\"],"
    },
    {
        "line": 662,
        "fullcodeline": "[\"server\", \"pluginBlacklist\", \"url\"],"
    },
    {
        "line": 684,
        "fullcodeline": "logging.getLogger(\"PLUGIN_TIMINGS\").setLevel(logging.DEBUG)"
    },
    {
        "line": 685,
        "fullcodeline": "logging.getLogger(\"PLUGIN_TIMINGS\").debug(\"Enabling plugin timings logging\")"
    },
    {
        "line": 15,
        "fullcodeline": "if folder in folders:"
    },
    {
        "line": 19,
        "fullcodeline": "if folder not in FOLDER_TYPES:"
    },
    {
        "line": 21,
        "fullcodeline": "for other_folder in FOLDER_TYPES:"
    },
    {
        "line": 85,
        "fullcodeline": "f\"Setting webcam.{key} via the API is no longer supported, please use the individual settings of the default webcam instead.\""
    },
    {
        "line": 126,
        "fullcodeline": "logger.exception(\"Invalid webcam.ffmpegCommandline setting\")"
    },
    {
        "line": 127,
        "fullcodeline": "abort(400, description=\"Invalid webcam.ffmpegCommandline setting\")"
    },
    {
        "line": 563,
        "fullcodeline": "s.setInt([\"temperature\", \"cutoff\"], cutoff)"
    },
    {
        "line": 565,
        "fullcodeline": "pass"
    },
    {
        "line": 591,
        "fullcodeline": "if name == \"snippets\":"
    },
    {
        "line": 593,
        "fullcodeline": "if not isinstance(script, str):"
    },
    {
        "line": 635,
        "fullcodeline": "interval = int(data[\"server\"][\"onlineCheck\"][\"interval\"])"
    },
    {
        "line": 636,
        "fullcodeline": "s.setInt([\"server\", \"onlineCheck\", \"interval\"], interval * 60)"
    },
    {
        "line": 667,
        "fullcodeline": "ttl = int(data[\"server\"][\"pluginBlacklist\"][\"ttl\"])"
    },
    {
        "line": 668,
        "fullcodeline": "s.setInt([\"server\", \"pluginBlacklist\", \"ttl\"], ttl * 60)"
    },
    {
        "line": 16,
        "fullcodeline": "future[folder] = folders[folder]"
    },
    {
        "line": 553,
        "fullcodeline": "profile[\"bed\"] = int(profile[\"bed\"])"
    },
    {
        "line": 554,
        "fullcodeline": "profile[\"extruder\"] = int(profile[\"extruder\"])"
    },
    {
        "line": 596,
        "fullcodeline": "\"gcode\", name, script.replace(\"\\r\\n\", \"\\n\").replace(\"\\r\", \"\\n\")"
    },
    {
        "line": 698,
        "fullcodeline": "plugin.on_settings_save(data[\"plugins\"][plugin_id])"
    },
    {
        "line": 638,
        "fullcodeline": "pass"
    },
    {
        "line": 670,
        "fullcodeline": "pass"
    },
    {
        "line": 22,
        "fullcodeline": "if folder == other_folder:"
    },
    {
        "line": 24,
        "fullcodeline": "if future[folder] == future[other_folder]:"
    },
    {
        "line": 556,
        "fullcodeline": "pass"
    },
    {
        "line": 700,
        "fullcodeline": "logger.warning("
    },
    {
        "line": 705,
        "fullcodeline": "logger.warning("
    },
    {
        "line": 708,
        "fullcodeline": "logger.warning("
    },
    {
        "line": 711,
        "fullcodeline": "logger.warning("
    },
    {
        "line": 716,
        "fullcodeline": "logger.exception("
    },
    {
        "line": 26,
        "fullcodeline": "raise ValueError("
    },
    {
        "line": 701,
        "fullcodeline": "\"Could not save settings for plugin {name} ({version}). It may have called super(...)\".format("
    },
    {
        "line": 717,
        "fullcodeline": "\"Could not save settings for plugin {name} ({version})\".format("
    },
    {
        "line": 720,
        "fullcodeline": "extra={\"plugin\": plugin._identifier},"
    },
    {
        "line": 27,
        "fullcodeline": "\"Duplicate folder path for {} and {}\".format("
    }
]