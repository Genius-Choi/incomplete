[
    {
        "line": 8,
        "fullcodeline": "s = settings()"
    },
    {
        "line": 10,
        "fullcodeline": "connectionOptions = printer.__class__.get_connection_options()"
    },
    {
        "line": 15,
        "fullcodeline": "data = {"
    },
    {
        "line": 235,
        "fullcodeline": "gcode_scripts = s.listScripts(\"gcode\")"
    },
    {
        "line": 241,
        "fullcodeline": "plugin_settings = _get_plugin_settings()"
    },
    {
        "line": 2,
        "fullcodeline": "if not Permissions.SETTINGS_READ.can() and not ("
    },
    {
        "line": 242,
        "fullcodeline": "if len(plugin_settings):"
    },
    {
        "line": 245,
        "fullcodeline": "if Permissions.WEBCAM.can() or ("
    },
    {
        "line": 312,
        "fullcodeline": "return jsonify(data)"
    },
    {
        "line": 6,
        "fullcodeline": "abort(403)"
    },
    {
        "line": 237,
        "fullcodeline": "data[\"scripts\"] = {\"gcode\": {}}"
    },
    {
        "line": 243,
        "fullcodeline": "data[\"plugins\"] = plugin_settings"
    },
    {
        "line": 246,
        "fullcodeline": "settings().getBoolean([\"server\", \"firstRun\"])"
    },
    {
        "line": 249,
        "fullcodeline": "webcamsDict = get_webcams_as_dicts()"
    },
    {
        "line": 250,
        "fullcodeline": "data[\"webcam\"] = {"
    },
    {
        "line": 268,
        "fullcodeline": "defaultWebcam = get_default_webcam()"
    },
    {
        "line": 279,
        "fullcodeline": "compatWebcam = defaultWebcam.config.compat if defaultWebcam is not None else None"
    },
    {
        "line": 294,
        "fullcodeline": "snapshotWebcam = get_snapshot_webcam()"
    },
    {
        "line": 302,
        "fullcodeline": "data[\"webcam\"] = {}"
    },
    {
        "line": 304,
        "fullcodeline": "if Permissions.ADMIN.can():"
    },
    {
        "line": 305,
        "fullcodeline": "data[\"accessControl\"] = {"
    },
    {
        "line": 3,
        "fullcodeline": "settings().getBoolean([\"server\", \"firstRun\"])"
    },
    {
        "line": 186,
        "fullcodeline": "\"terminalFilters\": s.get([\"terminalFilters\"]),"
    },
    {
        "line": 238,
        "fullcodeline": "for name in gcode_scripts:"
    },
    {
        "line": 247,
        "fullcodeline": "and not userManager.has_been_customized()"
    },
    {
        "line": 265,
        "fullcodeline": "for key in DEPRECATED_WEBCAM_KEYS:"
    },
    {
        "line": 4,
        "fullcodeline": "or not userManager.has_been_customized()"
    },
    {
        "line": 16,
        "fullcodeline": "\"api\": {"
    },
    {
        "line": 24,
        "fullcodeline": "\"appearance\": {"
    },
    {
        "line": 35,
        "fullcodeline": "\"feature\": {"
    },
    {
        "line": 53,
        "fullcodeline": "\"gcodeAnalysis\": {"
    },
    {
        "line": 57,
        "fullcodeline": "\"serial\": {"
    },
    {
        "line": 169,
        "fullcodeline": "\"folder\": {"
    },
    {
        "line": 174,
        "fullcodeline": "\"temperature\": {"
    },
    {
        "line": 182,
        "fullcodeline": "\"system\": {"
    },
    {
        "line": 187,
        "fullcodeline": "\"scripts\": {"
    },
    {
        "line": 201,
        "fullcodeline": "\"server\": {"
    },
    {
        "line": 231,
        "fullcodeline": "\"devel\": {\"pluginTimings\": s.getBoolean([\"devel\", \"pluginTimings\"])},"
    },
    {
        "line": 232,
        "fullcodeline": "\"slicing\": {\"defaultSlicer\": s.get([\"slicing\", \"defaultSlicer\"])},"
    },
    {
        "line": 18,
        "fullcodeline": "s.get([\"api\", \"key\"])"
    },
    {
        "line": 22,
        "fullcodeline": "\"allowCrossOrigin\": s.get([\"api\", \"allowCrossOrigin\"]),"
    },
    {
        "line": 25,
        "fullcodeline": "\"name\": s.get([\"appearance\", \"name\"]),"
    },
    {
        "line": 26,
        "fullcodeline": "\"color\": s.get([\"appearance\", \"color\"]),"
    },
    {
        "line": 27,
        "fullcodeline": "\"colorTransparent\": s.getBoolean([\"appearance\", \"colorTransparent\"]),"
    },
    {
        "line": 28,
        "fullcodeline": "\"colorIcon\": s.getBoolean([\"appearance\", \"colorIcon\"]),"
    },
    {
        "line": 29,
        "fullcodeline": "\"defaultLanguage\": s.get([\"appearance\", \"defaultLanguage\"]),"
    },
    {
        "line": 30,
        "fullcodeline": "\"showFahrenheitAlso\": s.getBoolean([\"appearance\", \"showFahrenheitAlso\"]),"
    },
    {
        "line": 31,
        "fullcodeline": "\"fuzzyTimes\": s.getBoolean([\"appearance\", \"fuzzyTimes\"]),"
    },
    {
        "line": 32,
        "fullcodeline": "\"closeModalsWithClick\": s.getBoolean([\"appearance\", \"closeModalsWithClick\"]),"
    },
    {
        "line": 33,
        "fullcodeline": "\"showInternalFilename\": s.getBoolean([\"appearance\", \"showInternalFilename\"]),"
    },
    {
        "line": 36,
        "fullcodeline": "\"temperatureGraph\": s.getBoolean([\"feature\", \"temperatureGraph\"]),"
    },
    {
        "line": 37,
        "fullcodeline": "\"sdSupport\": s.getBoolean([\"feature\", \"sdSupport\"]),"
    },
    {
        "line": 38,
        "fullcodeline": "\"keyboardControl\": s.getBoolean([\"feature\", \"keyboardControl\"]),"
    },
    {
        "line": 39,
        "fullcodeline": "\"pollWatched\": s.getBoolean([\"feature\", \"pollWatched\"]),"
    },
    {
        "line": 40,
        "fullcodeline": "\"modelSizeDetection\": s.getBoolean([\"feature\", \"modelSizeDetection\"]),"
    },
    {
        "line": 41,
        "fullcodeline": "\"rememberFileFolder\": s.getBoolean([\"feature\", \"rememberFileFolder\"]),"
    },
    {
        "line": 42,
        "fullcodeline": "\"printStartConfirmation\": s.getBoolean([\"feature\", \"printStartConfirmation\"]),"
    },
    {
        "line": 43,
        "fullcodeline": "\"printCancelConfirmation\": s.getBoolean("
    },
    {
        "line": 46,
        "fullcodeline": "\"uploadOverwriteConfirmation\": s.getBoolean("
    },
    {
        "line": 49,
        "fullcodeline": "\"g90InfluencesExtruder\": s.getBoolean([\"feature\", \"g90InfluencesExtruder\"]),"
    },
    {
        "line": 50,
        "fullcodeline": "\"autoUppercaseBlacklist\": s.get([\"feature\", \"autoUppercaseBlacklist\"]),"
    },
    {
        "line": 51,
        "fullcodeline": "\"enableDragDropUpload\": s.getBoolean([\"feature\", \"enableDragDropUpload\"]),"
    },
    {
        "line": 54,
        "fullcodeline": "\"runAt\": s.get([\"gcodeAnalysis\", \"runAt\"]),"
    },
    {
        "line": 55,
        "fullcodeline": "\"bedZ\": s.getFloat([\"gcodeAnalysis\", \"bedZ\"]),"
    },
    {
        "line": 60,
        "fullcodeline": "\"exclusive\": s.getBoolean([\"serial\", \"exclusive\"]),"
    },
    {
        "line": 61,
        "fullcodeline": "\"lowLatency\": s.getBoolean([\"serial\", \"lowLatency\"]),"
    },
    {
        "line": 64,
        "fullcodeline": "\"autoconnect\": s.getBoolean([\"serial\", \"autoconnect\"]),"
    },
    {
        "line": 65,
        "fullcodeline": "\"timeoutConnection\": s.getFloat([\"serial\", \"timeout\", \"connection\"]),"
    },
    {
        "line": 66,
        "fullcodeline": "\"timeoutDetectionFirst\": s.getFloat([\"serial\", \"timeout\", \"detectionFirst\"]),"
    },
    {
        "line": 67,
        "fullcodeline": "\"timeoutDetectionConsecutive\": s.getFloat("
    },
    {
        "line": 70,
        "fullcodeline": "\"timeoutCommunication\": s.getFloat([\"serial\", \"timeout\", \"communication\"]),"
    },
    {
        "line": 71,
        "fullcodeline": "\"timeoutCommunicationBusy\": s.getFloat("
    },
    {
        "line": 74,
        "fullcodeline": "\"timeoutTemperature\": s.getFloat([\"serial\", \"timeout\", \"temperature\"]),"
    },
    {
        "line": 75,
        "fullcodeline": "\"timeoutTemperatureTargetSet\": s.getFloat("
    },
    {
        "line": 78,
        "fullcodeline": "\"timeoutTemperatureAutoreport\": s.getFloat("
    },
    {
        "line": 81,
        "fullcodeline": "\"timeoutSdStatus\": s.getFloat([\"serial\", \"timeout\", \"sdStatus\"]),"
    },
    {
        "line": 82,
        "fullcodeline": "\"timeoutSdStatusAutoreport\": s.getFloat("
    },
    {
        "line": 85,
        "fullcodeline": "\"timeoutPosAutoreport\": s.getFloat([\"serial\", \"timeout\", \"posAutoreport\"]),"
    },
    {
        "line": 86,
        "fullcodeline": "\"timeoutBaudrateDetectionPause\": s.getFloat("
    },
    {
        "line": 89,
        "fullcodeline": "\"timeoutPositionLogWait\": s.getFloat("
    },
    {
        "line": 92,
        "fullcodeline": "\"log\": s.getBoolean([\"serial\", \"log\"]),"
    },
    {
        "line": 93,
        "fullcodeline": "\"additionalPorts\": s.get([\"serial\", \"additionalPorts\"]),"
    },
    {
        "line": 94,
        "fullcodeline": "\"additionalBaudrates\": s.get([\"serial\", \"additionalBaudrates\"]),"
    },
    {
        "line": 95,
        "fullcodeline": "\"blacklistedPorts\": s.get([\"serial\", \"blacklistedPorts\"]),"
    },
    {
        "line": 96,
        "fullcodeline": "\"blacklistedBaudrates\": s.get([\"serial\", \"blacklistedBaudrates\"]),"
    },
    {
        "line": 97,
        "fullcodeline": "\"longRunningCommands\": s.get([\"serial\", \"longRunningCommands\"]),"
    },
    {
        "line": 98,
        "fullcodeline": "\"checksumRequiringCommands\": s.get([\"serial\", \"checksumRequiringCommands\"]),"
    },
    {
        "line": 99,
        "fullcodeline": "\"blockedCommands\": s.get([\"serial\", \"blockedCommands\"]),"
    },
    {
        "line": 100,
        "fullcodeline": "\"ignoredCommands\": s.get([\"serial\", \"ignoredCommands\"]),"
    },
    {
        "line": 101,
        "fullcodeline": "\"pausingCommands\": s.get([\"serial\", \"pausingCommands\"]),"
    },
    {
        "line": 102,
        "fullcodeline": "\"sdCancelCommand\": s.get([\"serial\", \"sdCancelCommand\"]),"
    },
    {
        "line": 103,
        "fullcodeline": "\"emergencyCommands\": s.get([\"serial\", \"emergencyCommands\"]),"
    },
    {
        "line": 104,
        "fullcodeline": "\"helloCommand\": s.get([\"serial\", \"helloCommand\"]),"
    },
    {
        "line": 105,
        "fullcodeline": "\"ignoreErrorsFromFirmware\": s.getBoolean("
    },
    {
        "line": 108,
        "fullcodeline": "\"disconnectOnErrors\": s.getBoolean([\"serial\", \"disconnectOnErrors\"]),"
    },
    {
        "line": 109,
        "fullcodeline": "\"triggerOkForM29\": s.getBoolean([\"serial\", \"triggerOkForM29\"]),"
    },
    {
        "line": 110,
        "fullcodeline": "\"logPositionOnPause\": s.getBoolean([\"serial\", \"logPositionOnPause\"]),"
    },
    {
        "line": 111,
        "fullcodeline": "\"logPositionOnCancel\": s.getBoolean([\"serial\", \"logPositionOnCancel\"]),"
    },
    {
        "line": 112,
        "fullcodeline": "\"abortHeatupOnCancel\": s.getBoolean([\"serial\", \"abortHeatupOnCancel\"]),"
    },
    {
        "line": 113,
        "fullcodeline": "\"supportResendsWithoutOk\": s.get([\"serial\", \"supportResendsWithoutOk\"]),"
    },
    {
        "line": 114,
        "fullcodeline": "\"waitForStart\": s.getBoolean([\"serial\", \"waitForStartOnConnect\"]),"
    },
    {
        "line": 115,
        "fullcodeline": "\"waitToLoadSdFileList\": s.getBoolean([\"serial\", \"waitToLoadSdFileList\"]),"
    },
    {
        "line": 116,
        "fullcodeline": "\"alwaysSendChecksum\": s.getBoolean([\"serial\", \"alwaysSendChecksum\"]),"
    },
    {
        "line": 117,
        "fullcodeline": "\"neverSendChecksum\": s.getBoolean([\"serial\", \"neverSendChecksum\"]),"
    },
    {
        "line": 118,
        "fullcodeline": "\"sendChecksumWithUnknownCommands\": s.getBoolean("
    },
    {
        "line": 121,
        "fullcodeline": "\"unknownCommandsNeedAck\": s.getBoolean([\"serial\", \"unknownCommandsNeedAck\"]),"
    },
    {
        "line": 122,
        "fullcodeline": "\"sdRelativePath\": s.getBoolean([\"serial\", \"sdRelativePath\"]),"
    },
    {
        "line": 123,
        "fullcodeline": "\"sdAlwaysAvailable\": s.getBoolean([\"serial\", \"sdAlwaysAvailable\"]),"
    },
    {
        "line": 124,
        "fullcodeline": "\"sdLowerCase\": s.getBoolean([\"serial\", \"sdLowerCase\"]),"
    },
    {
        "line": 125,
        "fullcodeline": "\"swallowOkAfterResend\": s.getBoolean([\"serial\", \"swallowOkAfterResend\"]),"
    },
    {
        "line": 126,
        "fullcodeline": "\"repetierTargetTemp\": s.getBoolean([\"serial\", \"repetierTargetTemp\"]),"
    },
    {
        "line": 127,
        "fullcodeline": "\"externalHeatupDetection\": s.getBoolean("
    },
    {
        "line": 130,
        "fullcodeline": "\"ignoreIdenticalResends\": s.getBoolean([\"serial\", \"ignoreIdenticalResends\"]),"
    },
    {
        "line": 131,
        "fullcodeline": "\"firmwareDetection\": s.getBoolean([\"serial\", \"firmwareDetection\"]),"
    },
    {
        "line": 132,
        "fullcodeline": "\"blockWhileDwelling\": s.getBoolean([\"serial\", \"blockWhileDwelling\"]),"
    },
    {
        "line": 133,
        "fullcodeline": "\"useParityWorkaround\": s.get([\"serial\", \"useParityWorkaround\"]),"
    },
    {
        "line": 134,
        "fullcodeline": "\"sanityCheckTools\": s.getBoolean([\"serial\", \"sanityCheckTools\"]),"
    },
    {
        "line": 135,
        "fullcodeline": "\"notifySuppressedCommands\": s.get([\"serial\", \"notifySuppressedCommands\"]),"
    },
    {
        "line": 136,
        "fullcodeline": "\"sendM112OnError\": s.getBoolean([\"serial\", \"sendM112OnError\"]),"
    },
    {
        "line": 137,
        "fullcodeline": "\"disableSdPrintingDetection\": s.getBoolean("
    },
    {
        "line": 140,
        "fullcodeline": "\"ackMax\": s.getInt([\"serial\", \"ackMax\"]),"
    },
    {
        "line": 141,
        "fullcodeline": "\"maxTimeoutsIdle\": s.getInt([\"serial\", \"maxCommunicationTimeouts\", \"idle\"]),"
    },
    {
        "line": 142,
        "fullcodeline": "\"maxTimeoutsPrinting\": s.getInt("
    },
    {
        "line": 145,
        "fullcodeline": "\"maxTimeoutsLong\": s.getInt([\"serial\", \"maxCommunicationTimeouts\", \"long\"]),"
    },
    {
        "line": 146,
        "fullcodeline": "\"capAutoreportTemp\": s.getBoolean("
    },
    {
        "line": 149,
        "fullcodeline": "\"capAutoreportSdStatus\": s.getBoolean("
    },
    {
        "line": 152,
        "fullcodeline": "\"capAutoreportPos\": s.getBoolean("
    },
    {
        "line": 155,
        "fullcodeline": "\"capBusyProtocol\": s.getBoolean([\"serial\", \"capabilities\", \"busy_protocol\"]),"
    },
    {
        "line": 156,
        "fullcodeline": "\"capEmergencyParser\": s.getBoolean("
    },
    {
        "line": 159,
        "fullcodeline": "\"capExtendedM20\": s.getBoolean([\"serial\", \"capabilities\", \"extended_m20\"]),"
    },
    {
        "line": 160,
        "fullcodeline": "\"capLfnWrite\": s.getBoolean([\"serial\", \"capabilities\", \"lfn_write\"]),"
    },
    {
        "line": 161,
        "fullcodeline": "\"resendRatioThreshold\": s.getInt([\"serial\", \"resendRatioThreshold\"]),"
    },
    {
        "line": 162,
        "fullcodeline": "\"resendRatioStart\": s.getInt([\"serial\", \"resendRatioStart\"]),"
    },
    {
        "line": 163,
        "fullcodeline": "\"ignoreEmptyPorts\": s.getBoolean([\"serial\", \"ignoreEmptyPorts\"]),"
    },
    {
        "line": 164,
        "fullcodeline": "\"encoding\": s.get([\"serial\", \"encoding\"]),"
    },
    {
        "line": 165,
        "fullcodeline": "\"enableShutdownActionCommand\": s.get("
    },
    {
        "line": 170,
        "fullcodeline": "\"uploads\": s.getBaseFolder(\"uploads\"),"
    },
    {
        "line": 171,
        "fullcodeline": "\"timelapse\": s.getBaseFolder(\"timelapse\"),"
    },
    {
        "line": 172,
        "fullcodeline": "\"watched\": s.getBaseFolder(\"watched\"),"
    },
    {
        "line": 175,
        "fullcodeline": "\"profiles\": s.get([\"temperature\", \"profiles\"]),"
    },
    {
        "line": 176,
        "fullcodeline": "\"cutoff\": s.getInt([\"temperature\", \"cutoff\"]),"
    },
    {
        "line": 177,
        "fullcodeline": "\"sendAutomatically\": s.getBoolean([\"temperature\", \"sendAutomatically\"]),"
    },
    {
        "line": 178,
        "fullcodeline": "\"sendAutomaticallyAfter\": s.getInt("
    },
    {
        "line": 183,
        "fullcodeline": "\"actions\": s.get([\"system\", \"actions\"]),"
    },
    {
        "line": 184,
        "fullcodeline": "\"events\": s.get([\"system\", \"events\"]),"
    },
    {
        "line": 229,
        "fullcodeline": "\"allowFraming\": s.getBoolean([\"server\", \"allowFraming\"]),"
    },
    {
        "line": 239,
        "fullcodeline": "data[\"scripts\"][\"gcode\"][name] = s.loadScript(\"gcode\", name, source=True)"
    },
    {
        "line": 251,
        "fullcodeline": "\"webcamEnabled\": s.getBoolean([\"webcam\", \"webcamEnabled\"]),"
    },
    {
        "line": 252,
        "fullcodeline": "\"timelapseEnabled\": s.getBoolean([\"webcam\", \"timelapseEnabled\"]),"
    },
    {
        "line": 253,
        "fullcodeline": "\"ffmpegPath\": s.get([\"webcam\", \"ffmpeg\"]),"
    },
    {
        "line": 254,
        "fullcodeline": "\"ffmpegCommandline\": s.get([\"webcam\", \"ffmpegCommandline\"]),"
    },
    {
        "line": 255,
        "fullcodeline": "\"bitrate\": s.get([\"webcam\", \"bitrate\"]),"
    },
    {
        "line": 256,
        "fullcodeline": "\"ffmpegThreads\": s.get([\"webcam\", \"ffmpegThreads\"]),"
    },
    {
        "line": 257,
        "fullcodeline": "\"ffmpegVideoCodec\": s.get([\"webcam\", \"ffmpegVideoCodec\"]),"
    },
    {
        "line": 258,
        "fullcodeline": "\"watermark\": s.getBoolean([\"webcam\", \"watermark\"]),"
    },
    {
        "line": 266,
        "fullcodeline": "data[\"webcam\"][key] = None"
    },
    {
        "line": 270,
        "fullcodeline": "data[\"webcam\"].update("
    },
    {
        "line": 281,
        "fullcodeline": "data[\"webcam\"].update("
    },
    {
        "line": 296,
        "fullcodeline": "data[\"webcam\"].update("
    },
    {
        "line": 306,
        "fullcodeline": "\"autologinLocal\": s.getBoolean([\"accessControl\", \"autologinLocal\"]),"
    },
    {
        "line": 307,
        "fullcodeline": "\"autologinHeadsupAcknowledged\": s.getBoolean("
    },
    {
        "line": 19,
        "fullcodeline": "if Permissions.ADMIN.can() and credentials_checked_recently()"
    },
    {
        "line": 44,
        "fullcodeline": "[\"feature\", \"printCancelConfirmation\"]"
    },
    {
        "line": 47,
        "fullcodeline": "[\"feature\", \"uploadOverwriteConfirmation\"]"
    },
    {
        "line": 68,
        "fullcodeline": "[\"serial\", \"timeout\", \"detectionConsecutive\"]"
    },
    {
        "line": 72,
        "fullcodeline": "[\"serial\", \"timeout\", \"communicationBusy\"]"
    },
    {
        "line": 76,
        "fullcodeline": "[\"serial\", \"timeout\", \"temperatureTargetSet\"]"
    },
    {
        "line": 79,
        "fullcodeline": "[\"serial\", \"timeout\", \"temperatureAutoreport\"]"
    },
    {
        "line": 83,
        "fullcodeline": "[\"serial\", \"timeout\", \"sdStatusAutoreport\"]"
    },
    {
        "line": 87,
        "fullcodeline": "[\"serial\", \"timeout\", \"baudrateDetectionPause\"]"
    },
    {
        "line": 90,
        "fullcodeline": "[\"serial\", \"timeout\", \"positionLogWait\"]"
    },
    {
        "line": 106,
        "fullcodeline": "[\"serial\", \"ignoreErrorsFromFirmware\"]"
    },
    {
        "line": 119,
        "fullcodeline": "[\"serial\", \"sendChecksumWithUnknownCommands\"]"
    },
    {
        "line": 128,
        "fullcodeline": "[\"serial\", \"externalHeatupDetection\"]"
    },
    {
        "line": 138,
        "fullcodeline": "[\"serial\", \"disableSdPrintingDetection\"]"
    },
    {
        "line": 143,
        "fullcodeline": "[\"serial\", \"maxCommunicationTimeouts\", \"printing\"]"
    },
    {
        "line": 147,
        "fullcodeline": "[\"serial\", \"capabilities\", \"autoreport_temp\"]"
    },
    {
        "line": 150,
        "fullcodeline": "[\"serial\", \"capabilities\", \"autoreport_sdstatus\"]"
    },
    {
        "line": 153,
        "fullcodeline": "[\"serial\", \"capabilities\", \"autoreport_pos\"]"
    },
    {
        "line": 157,
        "fullcodeline": "[\"serial\", \"capabilities\", \"emergency_parser\"]"
    },
    {
        "line": 166,
        "fullcodeline": "[\"serial\", \"enableShutdownActionCommand\"]"
    },
    {
        "line": 179,
        "fullcodeline": "[\"temperature\", \"sendAutomaticallyAfter\"], min=0, max=30"
    },
    {
        "line": 188,
        "fullcodeline": "\"gcode\": {"
    },
    {
        "line": 202,
        "fullcodeline": "\"commands\": {"
    },
    {
        "line": 213,
        "fullcodeline": "\"diskspace\": {"
    },
    {
        "line": 217,
        "fullcodeline": "\"onlineCheck\": {"
    },
    {
        "line": 224,
        "fullcodeline": "\"pluginBlacklist\": {"
    },
    {
        "line": 308,
        "fullcodeline": "[\"accessControl\", \"autologinHeadsupAcknowledged\"]"
    },
    {
        "line": 203,
        "fullcodeline": "\"systemShutdownCommand\": s.get("
    },
    {
        "line": 206,
        "fullcodeline": "\"systemRestartCommand\": s.get("
    },
    {
        "line": 209,
        "fullcodeline": "\"serverRestartCommand\": s.get("
    },
    {
        "line": 214,
        "fullcodeline": "\"warning\": s.getInt([\"server\", \"diskspace\", \"warning\"]),"
    },
    {
        "line": 215,
        "fullcodeline": "\"critical\": s.getInt([\"server\", \"diskspace\", \"critical\"]),"
    },
    {
        "line": 218,
        "fullcodeline": "\"enabled\": s.getBoolean([\"server\", \"onlineCheck\", \"enabled\"]),"
    },
    {
        "line": 219,
        "fullcodeline": "\"interval\": int(s.getInt([\"server\", \"onlineCheck\", \"interval\"]) / 60),"
    },
    {
        "line": 220,
        "fullcodeline": "\"host\": s.get([\"server\", \"onlineCheck\", \"host\"]),"
    },
    {
        "line": 221,
        "fullcodeline": "\"port\": s.getInt([\"server\", \"onlineCheck\", \"port\"]),"
    },
    {
        "line": 222,
        "fullcodeline": "\"name\": s.get([\"server\", \"onlineCheck\", \"name\"]),"
    },
    {
        "line": 225,
        "fullcodeline": "\"enabled\": s.getBoolean([\"server\", \"pluginBlacklist\", \"enabled\"]),"
    },
    {
        "line": 226,
        "fullcodeline": "\"url\": s.get([\"server\", \"pluginBlacklist\", \"url\"]),"
    },
    {
        "line": 227,
        "fullcodeline": "\"ttl\": int(s.getInt([\"server\", \"pluginBlacklist\", \"ttl\"]) / 60),"
    },
    {
        "line": 271,
        "fullcodeline": "{"
    },
    {
        "line": 282,
        "fullcodeline": "{"
    },
    {
        "line": 297,
        "fullcodeline": "{"
    },
    {
        "line": 198,
        "fullcodeline": "\"snippets\": {},"
    },
    {
        "line": 204,
        "fullcodeline": "[\"server\", \"commands\", \"systemShutdownCommand\"]"
    },
    {
        "line": 207,
        "fullcodeline": "[\"server\", \"commands\", \"systemRestartCommand\"]"
    },
    {
        "line": 210,
        "fullcodeline": "[\"server\", \"commands\", \"serverRestartCommand\"]"
    }
]