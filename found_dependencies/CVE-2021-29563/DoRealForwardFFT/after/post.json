[
    {
        "line": 4,
        "fullcodeline": "const auto axes = Eigen::ArrayXi::LinSpaced(FFTRank, 1, FFTRank);"
    },
    {
        "line": 5,
        "fullcodeline": "auto device = ctx->eigen_device<CPUDevice>();"
    },
    {
        "line": 6,
        "fullcodeline": "auto input = Tensor(in).flat_inner_dims<RealT, FFTRank + 1>();"
    },
    {
        "line": 7,
        "fullcodeline": "const auto input_dims = input.dimensions();"
    },
    {
        "line": 10,
        "fullcodeline": "Eigen::DSizes<Eigen::DenseIndex, FFTRank + 1> input_slice_sizes;"
    },
    {
        "line": 11,
        "fullcodeline": "input_slice_sizes[0] = input_dims[0];"
    },
    {
        "line": 12,
        "fullcodeline": "TensorShape temp_shape{input_dims[0]};"
    },
    {
        "line": 17,
        "fullcodeline": "OP_REQUIRES(ctx, temp_shape.num_elements() > 0,"
    },
    {
        "line": 21,
        "fullcodeline": "auto output = out->flat_inner_dims<ComplexT, FFTRank + 1>();"
    },
    {
        "line": 26,
        "fullcodeline": "OP_REQUIRES_OK(ctx, ctx->allocate_temp(DataTypeToEnum<ComplexT>::v(),"
    },
    {
        "line": 28,
        "fullcodeline": "auto full_fft = temp.flat_inner_dims<ComplexT, FFTRank + 1>();"
    },
    {
        "line": 29,
        "fullcodeline": "full_fft.device(device) ="
    },
    {
        "line": 34,
        "fullcodeline": "output.device(device) ="
    },
    {
        "line": 13,
        "fullcodeline": "for (int i = 1; i <= FFTRank; ++i) {"
    },
    {
        "line": 18,
        "fullcodeline": "errors::InvalidArgument(\"Obtained a FFT shape of 0 elements: \","
    },
    {
        "line": 30,
        "fullcodeline": "input.slice(zero_start_indices, input_slice_sizes)"
    },
    {
        "line": 35,
        "fullcodeline": "full_fft.slice(zero_start_indices, output.dimensions());"
    },
    {
        "line": 14,
        "fullcodeline": "input_slice_sizes[i] = fft_shape[i - 1];"
    },
    {
        "line": 15,
        "fullcodeline": "temp_shape.AddDim(fft_shape[i - 1]);"
    },
    {
        "line": 19,
        "fullcodeline": "temp_shape.DebugString()));"
    }
]