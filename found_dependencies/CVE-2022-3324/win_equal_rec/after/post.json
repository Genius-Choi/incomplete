[
    {
        "line": 12,
        "fullcodeline": "int\t\textra_sep = 0;"
    },
    {
        "line": 13,
        "fullcodeline": "int\t\twincount, totwincount = 0;"
    },
    {
        "line": 15,
        "fullcodeline": "int\t\tnext_curwin_size = 0;"
    },
    {
        "line": 16,
        "fullcodeline": "int\t\troom = 0;"
    },
    {
        "line": 18,
        "fullcodeline": "int\t\thas_next_curwin = 0;"
    },
    {
        "line": 21,
        "fullcodeline": "if (topfr->fr_layout == FR_LEAF)"
    },
    {
        "line": 25,
        "fullcodeline": "if (topfr->fr_height != height || topfr->fr_win->w_winrow != row"
    },
    {
        "line": 26,
        "fullcodeline": "|| topfr->fr_width != width || topfr->fr_win->w_wincol != col"
    },
    {
        "line": 29,
        "fullcodeline": "topfr->fr_win->w_winrow = row;"
    },
    {
        "line": 30,
        "fullcodeline": "frame_new_height(topfr, height, FALSE, FALSE);"
    },
    {
        "line": 31,
        "fullcodeline": "topfr->fr_win->w_wincol = col;"
    },
    {
        "line": 32,
        "fullcodeline": "frame_new_width(topfr, width, FALSE, FALSE);"
    },
    {
        "line": 33,
        "fullcodeline": "redraw_all_later(UPD_NOT_VALID);"
    },
    {
        "line": 36,
        "fullcodeline": "else if (topfr->fr_layout == FR_ROW)"
    },
    {
        "line": 38,
        "fullcodeline": "topfr->fr_width = width;"
    },
    {
        "line": 39,
        "fullcodeline": "topfr->fr_height = height;"
    },
    {
        "line": 120,
        "fullcodeline": "FOR_ALL_FRAMES(fr, topfr->fr_child)"
    },
    {
        "line": 41,
        "fullcodeline": "if (dir != 'v')\t\t\t// equalize frame widths"
    },
    {
        "line": 122,
        "fullcodeline": "wincount = 1;"
    },
    {
        "line": 171,
        "fullcodeline": "col += new_size;"
    },
    {
        "line": 172,
        "fullcodeline": "width -= new_size;"
    },
    {
        "line": 173,
        "fullcodeline": "totwincount -= wincount;"
    },
    {
        "line": 178,
        "fullcodeline": "topfr->fr_width = width;"
    },
    {
        "line": 179,
        "fullcodeline": "topfr->fr_height = height;"
    },
    {
        "line": 262,
        "fullcodeline": "FOR_ALL_FRAMES(fr, topfr->fr_child)"
    },
    {
        "line": 45,
        "fullcodeline": "n = frame_minwidth(topfr, NOWIN);"
    },
    {
        "line": 51,
        "fullcodeline": "totwincount = (n + extra_sep) / (p_wmw + 1);"
    },
    {
        "line": 52,
        "fullcodeline": "has_next_curwin = frame_has_win(topfr, next_curwin);"
    },
    {
        "line": 59,
        "fullcodeline": "m = frame_minwidth(topfr, next_curwin);"
    },
    {
        "line": 60,
        "fullcodeline": "room = width - m;"
    },
    {
        "line": 123,
        "fullcodeline": "if (fr->fr_next == NULL)"
    },
    {
        "line": 166,
        "fullcodeline": "if (!current || dir != 'v' || topfr->fr_parent != NULL"
    },
    {
        "line": 181,
        "fullcodeline": "if (dir != 'h')\t\t\t// equalize frame heights"
    },
    {
        "line": 264,
        "fullcodeline": "wincount = 1;"
    },
    {
        "line": 310,
        "fullcodeline": "row += new_size;"
    },
    {
        "line": 311,
        "fullcodeline": "height -= new_size;"
    },
    {
        "line": 312,
        "fullcodeline": "totwincount -= wincount;"
    },
    {
        "line": 47,
        "fullcodeline": "if (col + width == Columns)"
    },
    {
        "line": 61,
        "fullcodeline": "if (room < 0)"
    },
    {
        "line": 125,
        "fullcodeline": "new_size = width;"
    },
    {
        "line": 168,
        "fullcodeline": "|| frame_has_win(fr, next_curwin))"
    },
    {
        "line": 169,
        "fullcodeline": "win_equal_rec(next_curwin, current, fr, dir, col, row,"
    },
    {
        "line": 184,
        "fullcodeline": "n = frame_minheight(topfr, NOWIN);"
    },
    {
        "line": 190,
        "fullcodeline": "totwincount = (n + extra_sep) / (p_wmh + 1);"
    },
    {
        "line": 191,
        "fullcodeline": "has_next_curwin = frame_has_win(topfr, next_curwin);"
    },
    {
        "line": 198,
        "fullcodeline": "m = frame_minheight(topfr, next_curwin);"
    },
    {
        "line": 199,
        "fullcodeline": "room = height - m;"
    },
    {
        "line": 265,
        "fullcodeline": "if (fr->fr_next == NULL)"
    },
    {
        "line": 305,
        "fullcodeline": "if (!current || dir != 'h' || topfr->fr_parent != NULL"
    },
    {
        "line": 48,
        "fullcodeline": "extra_sep = 1;"
    },
    {
        "line": 63,
        "fullcodeline": "next_curwin_size = p_wiw + room;"
    },
    {
        "line": 64,
        "fullcodeline": "room = 0;"
    },
    {
        "line": 117,
        "fullcodeline": "--totwincount;\t\t// don't count curwin"
    },
    {
        "line": 167,
        "fullcodeline": "|| (new_size != fr->fr_width)"
    },
    {
        "line": 186,
        "fullcodeline": "if (row + height == cmdline_row && p_ls == 0)"
    },
    {
        "line": 200,
        "fullcodeline": "if (room < 0)"
    },
    {
        "line": 267,
        "fullcodeline": "new_size = height;"
    },
    {
        "line": 307,
        "fullcodeline": "|| frame_has_win(fr, next_curwin))"
    },
    {
        "line": 308,
        "fullcodeline": "win_equal_rec(next_curwin, current, fr, dir, col, row,"
    },
    {
        "line": 50,
        "fullcodeline": "extra_sep = 0;"
    },
    {
        "line": 68,
        "fullcodeline": "next_curwin_size = -1;"
    },
    {
        "line": 69,
        "fullcodeline": "FOR_ALL_FRAMES(fr, topfr->fr_child)"
    },
    {
        "line": 126,
        "fullcodeline": "else if (dir == 'v')"
    },
    {
        "line": 187,
        "fullcodeline": "extra_sep = 1;"
    },
    {
        "line": 204,
        "fullcodeline": "next_curwin_size = p_wh + room;"
    },
    {
        "line": 205,
        "fullcodeline": "room = 0;"
    },
    {
        "line": 259,
        "fullcodeline": "--totwincount;\t\t// don't count curwin"
    },
    {
        "line": 306,
        "fullcodeline": "|| (new_size != fr->fr_height)"
    },
    {
        "line": 75,
        "fullcodeline": "n = frame_minwidth(fr, NOWIN);"
    },
    {
        "line": 76,
        "fullcodeline": "new_size = fr->fr_width;"
    },
    {
        "line": 88,
        "fullcodeline": "room -= new_size - n;"
    },
    {
        "line": 94,
        "fullcodeline": "fr->fr_newwidth = new_size;"
    },
    {
        "line": 96,
        "fullcodeline": "if (next_curwin_size == -1)"
    },
    {
        "line": 127,
        "fullcodeline": "new_size = fr->fr_width;"
    },
    {
        "line": 189,
        "fullcodeline": "extra_sep = 0;"
    },
    {
        "line": 209,
        "fullcodeline": "next_curwin_size = -1;"
    },
    {
        "line": 210,
        "fullcodeline": "FOR_ALL_FRAMES(fr, topfr->fr_child)"
    },
    {
        "line": 268,
        "fullcodeline": "else if (dir == 'h')"
    },
    {
        "line": 71,
        "fullcodeline": "if (!frame_fixed_width(fr))"
    },
    {
        "line": 77,
        "fullcodeline": "if (frame_has_win(fr, next_curwin))"
    },
    {
        "line": 89,
        "fullcodeline": "if (room < 0)"
    },
    {
        "line": 217,
        "fullcodeline": "n = frame_minheight(fr, NOWIN);"
    },
    {
        "line": 218,
        "fullcodeline": "new_size = fr->fr_height;"
    },
    {
        "line": 230,
        "fullcodeline": "room -= new_size - n;"
    },
    {
        "line": 236,
        "fullcodeline": "fr->fr_newheight = new_size;"
    },
    {
        "line": 238,
        "fullcodeline": "if (next_curwin_size == -1)"
    },
    {
        "line": 269,
        "fullcodeline": "new_size = fr->fr_height;"
    },
    {
        "line": 79,
        "fullcodeline": "room += p_wiw - p_wmw;"
    },
    {
        "line": 80,
        "fullcodeline": "next_curwin_size = 0;"
    },
    {
        "line": 91,
        "fullcodeline": "new_size += room;"
    },
    {
        "line": 92,
        "fullcodeline": "room = 0;"
    },
    {
        "line": 98,
        "fullcodeline": "if (!has_next_curwin)"
    },
    {
        "line": 128,
        "fullcodeline": "else if (frame_fixed_width(fr))"
    },
    {
        "line": 212,
        "fullcodeline": "if (!frame_fixed_height(fr))"
    },
    {
        "line": 219,
        "fullcodeline": "if (frame_has_win(fr, next_curwin))"
    },
    {
        "line": 231,
        "fullcodeline": "if (room < 0)"
    },
    {
        "line": 81,
        "fullcodeline": "if (new_size < p_wiw)"
    },
    {
        "line": 86,
        "fullcodeline": "totwincount -= (n + (fr->fr_next == NULL"
    },
    {
        "line": 99,
        "fullcodeline": "next_curwin_size = 0;"
    },
    {
        "line": 130,
        "fullcodeline": "new_size = fr->fr_newwidth;"
    },
    {
        "line": 131,
        "fullcodeline": "wincount = 0;\t    // doesn't count as a sizeable window"
    },
    {
        "line": 221,
        "fullcodeline": "room += p_wh - p_wmh;"
    },
    {
        "line": 222,
        "fullcodeline": "next_curwin_size = 0;"
    },
    {
        "line": 233,
        "fullcodeline": "new_size += room;"
    },
    {
        "line": 234,
        "fullcodeline": "room = 0;"
    },
    {
        "line": 240,
        "fullcodeline": "if (!has_next_curwin)"
    },
    {
        "line": 270,
        "fullcodeline": "else if (frame_fixed_height(fr))"
    },
    {
        "line": 82,
        "fullcodeline": "new_size = p_wiw;"
    },
    {
        "line": 136,
        "fullcodeline": "n = frame_minwidth(fr, NOWIN);"
    },
    {
        "line": 137,
        "fullcodeline": "wincount = (n + (fr->fr_next == NULL ? extra_sep : 0))"
    },
    {
        "line": 139,
        "fullcodeline": "m = frame_minwidth(fr, next_curwin);"
    },
    {
        "line": 161,
        "fullcodeline": "new_size += n;"
    },
    {
        "line": 223,
        "fullcodeline": "if (new_size < p_wh)"
    },
    {
        "line": 228,
        "fullcodeline": "totwincount -= (n + (fr->fr_next == NULL"
    },
    {
        "line": 241,
        "fullcodeline": "next_curwin_size = 0;"
    },
    {
        "line": 272,
        "fullcodeline": "new_size = fr->fr_newheight;"
    },
    {
        "line": 273,
        "fullcodeline": "wincount = 0;\t    // doesn't count as a sizeable window"
    },
    {
        "line": 87,
        "fullcodeline": "? extra_sep : 0)) / (p_wmw + 1);"
    },
    {
        "line": 100,
        "fullcodeline": "else if (totwincount > 1"
    },
    {
        "line": 146,
        "fullcodeline": "if (totwincount == 0)"
    },
    {
        "line": 224,
        "fullcodeline": "new_size = p_wh;"
    },
    {
        "line": 278,
        "fullcodeline": "n = frame_minheight(fr, NOWIN);"
    },
    {
        "line": 279,
        "fullcodeline": "wincount = (n + (fr->fr_next == NULL ? extra_sep : 0))"
    },
    {
        "line": 281,
        "fullcodeline": "m = frame_minheight(fr, next_curwin);"
    },
    {
        "line": 301,
        "fullcodeline": "new_size += n;"
    },
    {
        "line": 101,
        "fullcodeline": "&& (room + (totwincount - 2))"
    },
    {
        "line": 106,
        "fullcodeline": "next_curwin_size = (room + p_wiw"
    },
    {
        "line": 109,
        "fullcodeline": "room -= next_curwin_size - p_wiw;"
    },
    {
        "line": 138,
        "fullcodeline": "/ (p_wmw + 1);"
    },
    {
        "line": 141,
        "fullcodeline": "hnc = frame_has_win(fr, next_curwin);"
    },
    {
        "line": 145,
        "fullcodeline": "--wincount;"
    },
    {
        "line": 147,
        "fullcodeline": "new_size = room;"
    },
    {
        "line": 153,
        "fullcodeline": "next_curwin_size -= p_wiw - (m - n);"
    },
    {
        "line": 156,
        "fullcodeline": "new_size += next_curwin_size;"
    },
    {
        "line": 157,
        "fullcodeline": "room -= new_size - next_curwin_size;"
    },
    {
        "line": 229,
        "fullcodeline": "? extra_sep : 0)) / (p_wmh + 1);"
    },
    {
        "line": 242,
        "fullcodeline": "else if (totwincount > 1"
    },
    {
        "line": 288,
        "fullcodeline": "if (totwincount == 0)"
    },
    {
        "line": 112,
        "fullcodeline": "next_curwin_size = p_wiw;"
    },
    {
        "line": 143,
        "fullcodeline": "hnc = FALSE;"
    },
    {
        "line": 149,
        "fullcodeline": "new_size = (wincount * room + ((unsigned)totwincount >> 1))"
    },
    {
        "line": 154,
        "fullcodeline": "if (next_curwin_size < 0)"
    },
    {
        "line": 160,
        "fullcodeline": "room -= new_size;"
    },
    {
        "line": 243,
        "fullcodeline": "&& (room + (totwincount - 2))"
    },
    {
        "line": 248,
        "fullcodeline": "next_curwin_size = (room + p_wh"
    },
    {
        "line": 251,
        "fullcodeline": "room -= next_curwin_size - p_wh;"
    },
    {
        "line": 280,
        "fullcodeline": "/ (p_wmh + 1);"
    },
    {
        "line": 283,
        "fullcodeline": "hnc = frame_has_win(fr, next_curwin);"
    },
    {
        "line": 287,
        "fullcodeline": "--wincount;"
    },
    {
        "line": 289,
        "fullcodeline": "new_size = room;"
    },
    {
        "line": 295,
        "fullcodeline": "next_curwin_size -= p_wh - (m - n);"
    },
    {
        "line": 296,
        "fullcodeline": "new_size += next_curwin_size;"
    },
    {
        "line": 297,
        "fullcodeline": "room -= new_size - next_curwin_size;"
    },
    {
        "line": 102,
        "fullcodeline": "/ (totwincount - 1) > p_wiw)"
    },
    {
        "line": 155,
        "fullcodeline": "next_curwin_size = 0;"
    },
    {
        "line": 254,
        "fullcodeline": "next_curwin_size = p_wh;"
    },
    {
        "line": 285,
        "fullcodeline": "hnc = FALSE;"
    },
    {
        "line": 291,
        "fullcodeline": "new_size = (wincount * room + ((unsigned)totwincount >> 1))"
    },
    {
        "line": 300,
        "fullcodeline": "room -= new_size;"
    },
    {
        "line": 108,
        "fullcodeline": "+ (totwincount - 1)) / totwincount;"
    },
    {
        "line": 244,
        "fullcodeline": "/ (totwincount - 1) > p_wh)"
    },
    {
        "line": 107,
        "fullcodeline": "+ (totwincount - 1) * p_wmw"
    },
    {
        "line": 250,
        "fullcodeline": "+ (totwincount - 1)) / totwincount;"
    },
    {
        "line": 249,
        "fullcodeline": "+ (totwincount - 1) * p_wmh"
    }
]