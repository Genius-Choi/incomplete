[
    {
        "line": 6,
        "fullcodeline": "assert(llvh::isPowerOf2_32(newCapacity) && \"capacity must be power of 2\");"
    },
    {
        "line": 7,
        "fullcodeline": "CompactTable tmpTable(newCapacity, table_.getCurrentScale());"
    },
    {
        "line": 8,
        "fullcodeline": "tmpTable.swap(table_);"
    },
    {
        "line": 27,
        "fullcodeline": "nonEmptyEntryCount_ = size_;"
    },
    {
        "line": 3,
        "fullcodeline": "if (LLVM_UNLIKELY(newCapacity <= capacity())) {"
    },
    {
        "line": 9,
        "fullcodeline": "for (uint32_t oldIdx = 0; oldIdx < tmpTable.size(); ++oldIdx) {"
    },
    {
        "line": 4,
        "fullcodeline": "hermes_fatal(\"too many identifiers created\");"
    },
    {
        "line": 14,
        "fullcodeline": "uint32_t idx = 0;"
    },
    {
        "line": 15,
        "fullcodeline": "uint32_t oldVal = tmpTable.get(oldIdx);"
    },
    {
        "line": 16,
        "fullcodeline": "auto &lookupTableEntry = identifierTable_->getLookupTableEntry(oldVal);"
    },
    {
        "line": 17,
        "fullcodeline": "uint32_t hash = lookupTableEntry.getHash();"
    },
    {
        "line": 25,
        "fullcodeline": "table_.set(idx, oldVal);"
    },
    {
        "line": 10,
        "fullcodeline": "if (!tmpTable.isValid(oldIdx)) {"
    },
    {
        "line": 18,
        "fullcodeline": "if (lookupTableEntry.isStringPrim()) {"
    },
    {
        "line": 19,
        "fullcodeline": "idx = lookupString(lookupTableEntry.getStringPrim(), hash, true);"
    },
    {
        "line": 20,
        "fullcodeline": "} else if (lookupTableEntry.isLazyASCII()) {"
    },
    {
        "line": 21,
        "fullcodeline": "idx = lookupString(lookupTableEntry.getLazyASCIIRef(), hash, true);"
    },
    {
        "line": 22,
        "fullcodeline": "} else if (lookupTableEntry.isLazyUTF16()) {"
    },
    {
        "line": 23,
        "fullcodeline": "idx = lookupString(lookupTableEntry.getLazyUTF16Ref(), hash, true);"
    }
]