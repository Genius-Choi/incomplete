[
    {
        "line": 8,
        "fullcodeline": "memset(&from, 0, sizeof(from));"
    },
    {
        "line": 11,
        "fullcodeline": "int length = ServerInstance->SE->RecvFrom(this, (char*)buffer, sizeof(DNSHeader), 0, &from.sa, &x);"
    },
    {
        "line": 40,
        "fullcodeline": "DNS::FillHeader(&header,buffer,length - 12);"
    },
    {
        "line": 46,
        "fullcodeline": "unsigned long this_id = header.id[1] + (header.id[0] << 8);"
    },
    {
        "line": 66,
        "fullcodeline": "DNSInfo data = req->ResultIsReady(header, length);"
    },
    {
        "line": 14,
        "fullcodeline": "if (length < 12)"
    },
    {
        "line": 30,
        "fullcodeline": "if (from != myserver)"
    },
    {
        "line": 70,
        "fullcodeline": "if (data.first == NULL)"
    },
    {
        "line": 16,
        "fullcodeline": "ServerInstance->Logs->Log(\"RESOLVER\",DEBUG,\"GetResult didn't get a full packet (len=%d)\", length);"
    },
    {
        "line": 32,
        "fullcodeline": "std::string server1 = from.str();"
    },
    {
        "line": 33,
        "fullcodeline": "std::string server2 = myserver.str();"
    },
    {
        "line": 34,
        "fullcodeline": "ServerInstance->Logs->Log(\"RESOLVER\",DEBUG,\"Got a result from the wrong server! Bad NAT or DNS forging attempt? '%s' != '%s'\","
    },
    {
        "line": 52,
        "fullcodeline": "ServerInstance->Logs->Log(\"RESOLVER\",DEBUG,\"Hmm, got a result that we didn't ask for (id=%lx). Ignoring.\", this_id);"
    },
    {
        "line": 78,
        "fullcodeline": "std::string ro = req->orig;"
    },
    {
        "line": 79,
        "fullcodeline": "delete req;"
    },
    {
        "line": 18,
        "fullcodeline": "return DNSResult(-1,\"\",0,\"\");"
    },
    {
        "line": 35,
        "fullcodeline": "server1.c_str(), server2.c_str());"
    },
    {
        "line": 36,
        "fullcodeline": "return DNSResult(-1,\"\",0,\"\");"
    },
    {
        "line": 53,
        "fullcodeline": "return DNSResult(-1,\"\",0,\"\");"
    },
    {
        "line": 58,
        "fullcodeline": "req = requests[this_id];"
    },
    {
        "line": 59,
        "fullcodeline": "requests[this_id] = NULL;"
    },
    {
        "line": 80,
        "fullcodeline": "return DNSResult(this_id | ERROR_MASK, data.second, 0, ro);"
    },
    {
        "line": 84,
        "fullcodeline": "unsigned long ttl = req->ttl;"
    },
    {
        "line": 85,
        "fullcodeline": "char formatted[128];"
    },
    {
        "line": 129,
        "fullcodeline": "std::string ro = req->orig;"
    },
    {
        "line": 130,
        "fullcodeline": "DNSResult result = DNSResult(this_id,resultstr,ttl,ro,req->type);"
    },
    {
        "line": 131,
        "fullcodeline": "delete req;"
    },
    {
        "line": 91,
        "fullcodeline": "snprintf(formatted,16,\"%u.%u.%u.%u\",data.first[0],data.first[1],data.first[2],data.first[3]);"
    },
    {
        "line": 92,
        "fullcodeline": "resultstr = formatted;"
    },
    {
        "line": 121,
        "fullcodeline": "resultstr = std::string((const char*)data.first);"
    },
    {
        "line": 104,
        "fullcodeline": "resultstr = formatted;"
    },
    {
        "line": 97,
        "fullcodeline": "if (!inet_ntop(AF_INET6, data.first, formatted, sizeof(formatted)))"
    },
    {
        "line": 111,
        "fullcodeline": "if (*formatted == ':')"
    },
    {
        "line": 99,
        "fullcodeline": "std::string ro = req->orig;"
    },
    {
        "line": 100,
        "fullcodeline": "delete req;"
    },
    {
        "line": 112,
        "fullcodeline": "resultstr.insert(0, \"0\");"
    },
    {
        "line": 101,
        "fullcodeline": "return DNSResult(this_id | ERROR_MASK, \"inet_ntop() failed\", 0, ro);"
    }
]