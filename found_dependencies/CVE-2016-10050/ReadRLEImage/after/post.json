[
    {
        "line": 11,
        "fullcodeline": "magick[12];"
    },
    {
        "line": 60,
        "fullcodeline": "background_color[256],"
    },
    {
        "line": 69,
        "fullcodeline": "assert(image_info != (const ImageInfo *) NULL);"
    },
    {
        "line": 70,
        "fullcodeline": "assert(image_info->signature == MagickCoreSignature);"
    },
    {
        "line": 74,
        "fullcodeline": "assert(exception != (ExceptionInfo *) NULL);"
    },
    {
        "line": 75,
        "fullcodeline": "assert(exception->signature == MagickCoreSignature);"
    },
    {
        "line": 76,
        "fullcodeline": "image=AcquireImage(image_info,exception);"
    },
    {
        "line": 77,
        "fullcodeline": "status=OpenBlob(image_info,image,ReadBinaryBlobMode,exception);"
    },
    {
        "line": 83,
        "fullcodeline": "count=ReadBlob(image,2,(unsigned char *) magick);"
    },
    {
        "line": 531,
        "fullcodeline": "(void) CloseBlob(image);"
    },
    {
        "line": 71,
        "fullcodeline": "if (image_info->debug != MagickFalse)"
    },
    {
        "line": 78,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 84,
        "fullcodeline": "if ((count != 2) || (memcmp(magick,\"\\122\\314\",2) != 0))"
    },
    {
        "line": 530,
        "fullcodeline": "} while ((count != 0) && (memcmp(magick,\"\\122\\314\",2) == 0));"
    },
    {
        "line": 532,
        "fullcodeline": "return(GetFirstImageInList(image));"
    },
    {
        "line": 72,
        "fullcodeline": "(void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\","
    },
    {
        "line": 85,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 91,
        "fullcodeline": "image->page.x=ReadBlobLSBShort(image);"
    },
    {
        "line": 92,
        "fullcodeline": "image->page.y=ReadBlobLSBShort(image);"
    },
    {
        "line": 93,
        "fullcodeline": "image->columns=ReadBlobLSBShort(image);"
    },
    {
        "line": 94,
        "fullcodeline": "image->rows=ReadBlobLSBShort(image);"
    },
    {
        "line": 95,
        "fullcodeline": "flags=(MagickStatusType) ReadBlobByte(image);"
    },
    {
        "line": 96,
        "fullcodeline": "image->alpha_trait=flags & 0x04 ? BlendPixelTrait : UndefinedPixelTrait;"
    },
    {
        "line": 97,
        "fullcodeline": "number_planes=(size_t) ReadBlobByte(image);"
    },
    {
        "line": 98,
        "fullcodeline": "bits_per_pixel=(size_t) ReadBlobByte(image);"
    },
    {
        "line": 99,
        "fullcodeline": "number_colormaps=(size_t) ReadBlobByte(image);"
    },
    {
        "line": 100,
        "fullcodeline": "map_length=(unsigned char) ReadBlobByte(image);"
    },
    {
        "line": 103,
        "fullcodeline": "one=1;"
    },
    {
        "line": 104,
        "fullcodeline": "map_length=one << map_length;"
    },
    {
        "line": 135,
        "fullcodeline": "colormap=(unsigned char *) NULL;"
    },
    {
        "line": 178,
        "fullcodeline": "status=SetImageExtent(image,image->columns,image->rows,exception);"
    },
    {
        "line": 186,
        "fullcodeline": "number_pixels=(MagickSizeType) image->columns*image->rows;"
    },
    {
        "line": 187,
        "fullcodeline": "number_planes_filled=(number_planes % 2 == 0) ? number_planes :"
    },
    {
        "line": 192,
        "fullcodeline": "pixel_info=AcquireVirtualMemory(image->columns,image->rows*"
    },
    {
        "line": 196,
        "fullcodeline": "pixel_info_length=image->columns*image->rows*"
    },
    {
        "line": 198,
        "fullcodeline": "pixels=(unsigned char *) GetVirtualMemoryBlob(pixel_info);"
    },
    {
        "line": 224,
        "fullcodeline": "plane=0;"
    },
    {
        "line": 225,
        "fullcodeline": "x=0;"
    },
    {
        "line": 226,
        "fullcodeline": "y=0;"
    },
    {
        "line": 227,
        "fullcodeline": "opcode=ReadBlobByte(image);"
    },
    {
        "line": 498,
        "fullcodeline": "pixel_info=RelinquishVirtualMemory(pixel_info);"
    },
    {
        "line": 511,
        "fullcodeline": "(void) ReadBlobByte(image);"
    },
    {
        "line": 512,
        "fullcodeline": "count=ReadBlob(image,2,(unsigned char *) magick);"
    },
    {
        "line": 79,
        "fullcodeline": "return(DestroyImageList(image));"
    },
    {
        "line": 101,
        "fullcodeline": "if (map_length >= 64)"
    },
    {
        "line": 105,
        "fullcodeline": "if ((number_planes == 0) || (number_planes == 2) ||"
    },
    {
        "line": 109,
        "fullcodeline": "if (flags & 0x02)"
    },
    {
        "line": 127,
        "fullcodeline": "if ((number_planes & 0x01) == 0)"
    },
    {
        "line": 129,
        "fullcodeline": "if (EOFBlob(image) != MagickFalse)"
    },
    {
        "line": 136,
        "fullcodeline": "if (number_colormaps != 0)"
    },
    {
        "line": 150,
        "fullcodeline": "if ((flags & 0x08) != 0)"
    },
    {
        "line": 175,
        "fullcodeline": "if ((image_info->ping != MagickFalse) && (image_info->number_scenes != 0))"
    },
    {
        "line": 179,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 184,
        "fullcodeline": "if (image->alpha_trait != UndefinedPixelTrait)"
    },
    {
        "line": 189,
        "fullcodeline": "if ((number_pixels*number_planes_filled) != (size_t) (number_pixels*"
    },
    {
        "line": 194,
        "fullcodeline": "if (pixel_info == (MemoryInfo *) NULL)"
    },
    {
        "line": 199,
        "fullcodeline": "if ((flags & 0x01) && !(flags & 0x02))"
    },
    {
        "line": 321,
        "fullcodeline": "} while (((opcode & 0x3f) != EOFOp) && (opcode != EOF));"
    },
    {
        "line": 322,
        "fullcodeline": "if (number_colormaps != 0)"
    },
    {
        "line": 360,
        "fullcodeline": "if (number_planes >= 3)"
    },
    {
        "line": 496,
        "fullcodeline": "if (number_colormaps != 0)"
    },
    {
        "line": 499,
        "fullcodeline": "if (EOFBlob(image) != MagickFalse)"
    },
    {
        "line": 508,
        "fullcodeline": "if (image_info->number_scenes != 0)"
    },
    {
        "line": 513,
        "fullcodeline": "if ((count != 0) && (memcmp(magick,\"\\122\\314\",2) == 0))"
    },
    {
        "line": 102,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 107,
        "fullcodeline": "(image->columns == 0))"
    },
    {
        "line": 108,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 116,
        "fullcodeline": "(void) ReadBlobByte(image);"
    },
    {
        "line": 128,
        "fullcodeline": "(void) ReadBlobByte(image);"
    },
    {
        "line": 131,
        "fullcodeline": "ThrowFileException(exception,CorruptImageError,\"UnexpectedEndOfFile\","
    },
    {
        "line": 141,
        "fullcodeline": "colormap=(unsigned char *) AcquireQuantumMemory(number_colormaps,"
    },
    {
        "line": 145,
        "fullcodeline": "p=colormap;"
    },
    {
        "line": 161,
        "fullcodeline": "length=ReadBlobLSBShort(image);"
    },
    {
        "line": 185,
        "fullcodeline": "number_planes++;"
    },
    {
        "line": 188,
        "fullcodeline": "number_planes+1;"
    },
    {
        "line": 191,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 195,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 197,
        "fullcodeline": "MagickMax(number_planes_filled,4);"
    },
    {
        "line": 207,
        "fullcodeline": "p=pixels;"
    },
    {
        "line": 320,
        "fullcodeline": "opcode=ReadBlobByte(image);"
    },
    {
        "line": 330,
        "fullcodeline": "mask=(MagickStatusType) (map_length-1);"
    },
    {
        "line": 331,
        "fullcodeline": "p=pixels;"
    },
    {
        "line": 332,
        "fullcodeline": "x=(ssize_t) number_planes;"
    },
    {
        "line": 365,
        "fullcodeline": "p=pixels;"
    },
    {
        "line": 497,
        "fullcodeline": "colormap=(unsigned char *) RelinquishMagickMemory(colormap);"
    },
    {
        "line": 501,
        "fullcodeline": "ThrowFileException(exception,CorruptImageError,\"UnexpectedEndOfFile\","
    },
    {
        "line": 518,
        "fullcodeline": "AcquireNextImage(image_info,image,exception);"
    },
    {
        "line": 524,
        "fullcodeline": "image=SyncNextImageInList(image);"
    },
    {
        "line": 525,
        "fullcodeline": "status=SetImageProgress(image,LoadImagesTag,TellBlob(image),"
    },
    {
        "line": 106,
        "fullcodeline": "((flags & 0x04) && (number_colormaps > 254)) || (bits_per_pixel != 8) ||"
    },
    {
        "line": 114,
        "fullcodeline": "for (i=0; i < (ssize_t) number_planes; i++)"
    },
    {
        "line": 115,
        "fullcodeline": "background_color[i]=0;"
    },
    {
        "line": 123,
        "fullcodeline": "p=background_color;"
    },
    {
        "line": 143,
        "fullcodeline": "if (colormap == (unsigned char *) NULL)"
    },
    {
        "line": 146,
        "fullcodeline": "for (i=0; i < (ssize_t) number_colormaps; i++)"
    },
    {
        "line": 162,
        "fullcodeline": "if (length != 0)"
    },
    {
        "line": 176,
        "fullcodeline": "if (image->scene >= (image_info->scene+image_info->number_scenes-1))"
    },
    {
        "line": 180,
        "fullcodeline": "return(DestroyImageList(image));"
    },
    {
        "line": 208,
        "fullcodeline": "for (i=0; i < (ssize_t) number_pixels; i++)"
    },
    {
        "line": 230,
        "fullcodeline": "switch (opcode & 0x3f)"
    },
    {
        "line": 333,
        "fullcodeline": "if (number_colormaps == 1)"
    },
    {
        "line": 350,
        "fullcodeline": "if ((i < (ssize_t) number_pixels) || (x < (ssize_t) number_planes))"
    },
    {
        "line": 366,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 400,
        "fullcodeline": "p=colormap;"
    },
    {
        "line": 426,
        "fullcodeline": "p=pixels;"
    },
    {
        "line": 509,
        "fullcodeline": "if (image->scene >= (image_info->scene+image_info->number_scenes-1))"
    },
    {
        "line": 519,
        "fullcodeline": "if (GetNextImageInList(image) == (Image *) NULL)"
    },
    {
        "line": 527,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 124,
        "fullcodeline": "for (i=0; i < (ssize_t) number_planes; i++)"
    },
    {
        "line": 125,
        "fullcodeline": "*p++=(unsigned char) ReadBlobByte(image);"
    },
    {
        "line": 144,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 147,
        "fullcodeline": "for (x=0; x < (ssize_t) map_length; x++)"
    },
    {
        "line": 148,
        "fullcodeline": "*p++=(unsigned char) ScaleShortToQuantum(ReadBlobLSBShort(image));"
    },
    {
        "line": 164,
        "fullcodeline": "comment=(char *) AcquireQuantumMemory(length,sizeof(*comment));"
    },
    {
        "line": 167,
        "fullcodeline": "count=ReadBlob(image,length-1,(unsigned char *) comment);"
    },
    {
        "line": 168,
        "fullcodeline": "comment[length-1]='\\0';"
    },
    {
        "line": 169,
        "fullcodeline": "(void) SetImageProperty(image,\"comment\",comment,exception);"
    },
    {
        "line": 170,
        "fullcodeline": "comment=DestroyString(comment);"
    },
    {
        "line": 193,
        "fullcodeline": "MagickMax(number_planes_filled,4)*sizeof(*pixels));"
    },
    {
        "line": 352,
        "fullcodeline": "colormap=(unsigned char *) RelinquishMagickMemory(colormap);"
    },
    {
        "line": 353,
        "fullcodeline": "pixel_info=RelinquishVirtualMemory(pixel_info);"
    },
    {
        "line": 354,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"UnableToReadImageData\");"
    },
    {
        "line": 368,
        "fullcodeline": "q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 396,
        "fullcodeline": "if (number_colormaps == 0)"
    },
    {
        "line": 398,
        "fullcodeline": "if (AcquireImageColormap(image,map_length,exception) == MagickFalse)"
    },
    {
        "line": 401,
        "fullcodeline": "if (number_colormaps == 1)"
    },
    {
        "line": 427,
        "fullcodeline": "if (image->alpha_trait == UndefinedPixelTrait)"
    },
    {
        "line": 521,
        "fullcodeline": "image=DestroyImageList(image);"
    },
    {
        "line": 526,
        "fullcodeline": "GetBlobSize(image));"
    },
    {
        "line": 142,
        "fullcodeline": "3*map_length*sizeof(*colormap));"
    },
    {
        "line": 165,
        "fullcodeline": "if (comment == (char *) NULL)"
    },
    {
        "line": 171,
        "fullcodeline": "if ((length & 0x01) == 0)"
    },
    {
        "line": 210,
        "fullcodeline": "if (image->alpha_trait == UndefinedPixelTrait)"
    },
    {
        "line": 234,
        "fullcodeline": "operand=ReadBlobByte(image);"
    },
    {
        "line": 237,
        "fullcodeline": "x=0;"
    },
    {
        "line": 238,
        "fullcodeline": "y+=operand;"
    },
    {
        "line": 243,
        "fullcodeline": "operand=ReadBlobByte(image);"
    },
    {
        "line": 244,
        "fullcodeline": "plane=(unsigned char) operand;"
    },
    {
        "line": 247,
        "fullcodeline": "x=0;"
    },
    {
        "line": 252,
        "fullcodeline": "operand=ReadBlobByte(image);"
    },
    {
        "line": 255,
        "fullcodeline": "x+=operand;"
    },
    {
        "line": 260,
        "fullcodeline": "operand=ReadBlobByte(image);"
    },
    {
        "line": 263,
        "fullcodeline": "offset=((image->rows-y-1)*image->columns*number_planes)+x*"
    },
    {
        "line": 265,
        "fullcodeline": "operand++;"
    },
    {
        "line": 274,
        "fullcodeline": "p=pixels+offset;"
    },
    {
        "line": 285,
        "fullcodeline": "x+=operand;"
    },
    {
        "line": 290,
        "fullcodeline": "operand=ReadBlobByte(image);"
    },
    {
        "line": 293,
        "fullcodeline": "pixel=(unsigned char) ReadBlobByte(image);"
    },
    {
        "line": 294,
        "fullcodeline": "(void) ReadBlobByte(image);"
    },
    {
        "line": 295,
        "fullcodeline": "offset=((image->rows-y-1)*image->columns*number_planes)+x*"
    },
    {
        "line": 297,
        "fullcodeline": "operand++;"
    },
    {
        "line": 306,
        "fullcodeline": "p=pixels+offset;"
    },
    {
        "line": 314,
        "fullcodeline": "x+=operand;"
    },
    {
        "line": 334,
        "fullcodeline": "for (i=0; i < (ssize_t) number_pixels; i++)"
    },
    {
        "line": 369,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 371,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 380,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 382,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 397,
        "fullcodeline": "map_length=256;"
    },
    {
        "line": 399,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 452,
        "fullcodeline": "(void) SyncImage(image,exception);"
    },
    {
        "line": 522,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 166,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 172,
        "fullcodeline": "(void) ReadBlobByte(image);"
    },
    {
        "line": 235,
        "fullcodeline": "if (opcode & 0x40)"
    },
    {
        "line": 245,
        "fullcodeline": "if (plane == 255)"
    },
    {
        "line": 253,
        "fullcodeline": "if (opcode & 0x40)"
    },
    {
        "line": 261,
        "fullcodeline": "if (opcode & 0x40)"
    },
    {
        "line": 266,
        "fullcodeline": "if ((offset < 0) ||"
    },
    {
        "line": 275,
        "fullcodeline": "for (i=0; i < (ssize_t) operand; i++)"
    },
    {
        "line": 283,
        "fullcodeline": "if (operand & 0x01)"
    },
    {
        "line": 291,
        "fullcodeline": "if (opcode & 0x40)"
    },
    {
        "line": 298,
        "fullcodeline": "if ((offset < 0) ||"
    },
    {
        "line": 307,
        "fullcodeline": "for (i=0; i < (ssize_t) operand; i++)"
    },
    {
        "line": 336,
        "fullcodeline": "ValidateColormapValue(image,*p & mask,&index,exception);"
    },
    {
        "line": 337,
        "fullcodeline": "*p=colormap[(ssize_t) index];"
    },
    {
        "line": 338,
        "fullcodeline": "p++;"
    },
    {
        "line": 341,
        "fullcodeline": "if ((number_planes >= 3) && (number_colormaps >= 3))"
    },
    {
        "line": 373,
        "fullcodeline": "SetPixelRed(image,ScaleCharToQuantum(*p++),q);"
    },
    {
        "line": 374,
        "fullcodeline": "SetPixelGreen(image,ScaleCharToQuantum(*p++),q);"
    },
    {
        "line": 375,
        "fullcodeline": "SetPixelBlue(image,ScaleCharToQuantum(*p++),q);"
    },
    {
        "line": 378,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 384,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 402,
        "fullcodeline": "for (i=0; i < (ssize_t) image->colors; i++)"
    },
    {
        "line": 432,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 490,
        "fullcodeline": "image->colormap=(PixelInfo *) RelinquishMagickMemory("
    },
    {
        "line": 492,
        "fullcodeline": "image->storage_class=DirectClass;"
    },
    {
        "line": 493,
        "fullcodeline": "image->colors=0;"
    },
    {
        "line": 211,
        "fullcodeline": "for (j=0; j < (ssize_t) number_planes; j++)"
    },
    {
        "line": 212,
        "fullcodeline": "*p++=background_color[j];"
    },
    {
        "line": 217,
        "fullcodeline": "*p++=0;  /* initialize matte channel */"
    },
    {
        "line": 236,
        "fullcodeline": "operand=ReadBlobLSBSignedShort(image);"
    },
    {
        "line": 246,
        "fullcodeline": "plane=(unsigned char) (number_planes-1);"
    },
    {
        "line": 254,
        "fullcodeline": "operand=ReadBlobLSBSignedShort(image);"
    },
    {
        "line": 262,
        "fullcodeline": "operand=ReadBlobLSBSignedShort(image);"
    },
    {
        "line": 267,
        "fullcodeline": "(offset+((size_t) operand*number_planes) > pixel_info_length))"
    },
    {
        "line": 271,
        "fullcodeline": "pixel_info=RelinquishVirtualMemory(pixel_info);"
    },
    {
        "line": 272,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"UnableToReadImageData\");"
    },
    {
        "line": 277,
        "fullcodeline": "pixel=(unsigned char) ReadBlobByte(image);"
    },
    {
        "line": 281,
        "fullcodeline": "p+=number_planes;"
    },
    {
        "line": 284,
        "fullcodeline": "(void) ReadBlobByte(image);"
    },
    {
        "line": 292,
        "fullcodeline": "operand=ReadBlobLSBSignedShort(image);"
    },
    {
        "line": 299,
        "fullcodeline": "(offset+((size_t) operand*number_planes) > pixel_info_length))"
    },
    {
        "line": 303,
        "fullcodeline": "pixel_info=RelinquishVirtualMemory(pixel_info);"
    },
    {
        "line": 304,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"UnableToReadImageData\");"
    },
    {
        "line": 312,
        "fullcodeline": "p+=number_planes;"
    },
    {
        "line": 376,
        "fullcodeline": "if (image->alpha_trait != UndefinedPixelTrait)"
    },
    {
        "line": 386,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 407,
        "fullcodeline": "image->colormap[i].red=(MagickRealType)"
    },
    {
        "line": 409,
        "fullcodeline": "image->colormap[i].green=(MagickRealType)"
    },
    {
        "line": 411,
        "fullcodeline": "image->colormap[i].blue=(MagickRealType)"
    },
    {
        "line": 415,
        "fullcodeline": "if (number_colormaps > 1)"
    },
    {
        "line": 434,
        "fullcodeline": "q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 459,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 215,
        "fullcodeline": "for (j=0; j < (ssize_t) (number_planes-1); j++)"
    },
    {
        "line": 216,
        "fullcodeline": "*p++=background_color[j];"
    },
    {
        "line": 269,
        "fullcodeline": "if (number_colormaps != 0)"
    },
    {
        "line": 278,
        "fullcodeline": "if ((y < (ssize_t) image->rows) &&"
    },
    {
        "line": 301,
        "fullcodeline": "if (number_colormaps != 0)"
    },
    {
        "line": 309,
        "fullcodeline": "if ((y < (ssize_t) image->rows) &&"
    },
    {
        "line": 342,
        "fullcodeline": "for (i=0; i < (ssize_t) number_pixels; i++)"
    },
    {
        "line": 377,
        "fullcodeline": "SetPixelAlpha(image,ScaleCharToQuantum(*p++),q);"
    },
    {
        "line": 435,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 437,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 442,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 444,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 461,
        "fullcodeline": "q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 270,
        "fullcodeline": "colormap=(unsigned char *) RelinquishMagickMemory(colormap);"
    },
    {
        "line": 279,
        "fullcodeline": "((x+i) < (ssize_t) image->columns))"
    },
    {
        "line": 280,
        "fullcodeline": "*p=pixel;"
    },
    {
        "line": 302,
        "fullcodeline": "colormap=(unsigned char *) RelinquishMagickMemory(colormap);"
    },
    {
        "line": 310,
        "fullcodeline": "((x+i) < (ssize_t) image->columns))"
    },
    {
        "line": 311,
        "fullcodeline": "*p=pixel;"
    },
    {
        "line": 343,
        "fullcodeline": "for (x=0; x < (ssize_t) number_planes; x++)"
    },
    {
        "line": 408,
        "fullcodeline": "ScaleCharToQuantum((unsigned char) i);"
    },
    {
        "line": 410,
        "fullcodeline": "ScaleCharToQuantum((unsigned char) i);"
    },
    {
        "line": 412,
        "fullcodeline": "ScaleCharToQuantum((unsigned char) i);"
    },
    {
        "line": 416,
        "fullcodeline": "for (i=0; i < (ssize_t) image->colors; i++)"
    },
    {
        "line": 439,
        "fullcodeline": "SetPixelIndex(image,*p++,q);"
    },
    {
        "line": 440,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 446,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,(MagickOffsetType)"
    },
    {
        "line": 462,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 464,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 478,
        "fullcodeline": "if (x < (ssize_t) image->columns)"
    },
    {
        "line": 480,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 482,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 345,
        "fullcodeline": "ValidateColormapValue(image,(size_t) (x*map_length+"
    },
    {
        "line": 347,
        "fullcodeline": "*p=colormap[(ssize_t) index];"
    },
    {
        "line": 348,
        "fullcodeline": "p++;"
    },
    {
        "line": 418,
        "fullcodeline": "image->colormap[i].red=(MagickRealType)"
    },
    {
        "line": 420,
        "fullcodeline": "image->colormap[i].green=(MagickRealType)"
    },
    {
        "line": 422,
        "fullcodeline": "image->colormap[i].blue=(MagickRealType)"
    },
    {
        "line": 424,
        "fullcodeline": "p++;"
    },
    {
        "line": 448,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 466,
        "fullcodeline": "ValidateColormapValue(image,(ssize_t) *p++,&index,exception);"
    },
    {
        "line": 467,
        "fullcodeline": "SetPixelRed(image,ClampToQuantum(image->colormap[(ssize_t)"
    },
    {
        "line": 469,
        "fullcodeline": "ValidateColormapValue(image,(ssize_t) *p++,&index,exception);"
    },
    {
        "line": 470,
        "fullcodeline": "SetPixelGreen(image,ClampToQuantum(image->colormap[(ssize_t)"
    },
    {
        "line": 472,
        "fullcodeline": "ValidateColormapValue(image,(ssize_t) *p++,&index,exception);"
    },
    {
        "line": 473,
        "fullcodeline": "SetPixelBlue(image,ClampToQuantum(image->colormap[(ssize_t)"
    },
    {
        "line": 475,
        "fullcodeline": "SetPixelAlpha(image,ScaleCharToQuantum(*p++),q);"
    },
    {
        "line": 476,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 484,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,(MagickOffsetType)"
    },
    {
        "line": 486,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 419,
        "fullcodeline": "ScaleCharToQuantum(*p);"
    },
    {
        "line": 346,
        "fullcodeline": "(*p & mask)),&index,exception);"
    },
    {
        "line": 421,
        "fullcodeline": "ScaleCharToQuantum(*(p+map_length));"
    },
    {
        "line": 423,
        "fullcodeline": "ScaleCharToQuantum(*(p+map_length*2));"
    }
]