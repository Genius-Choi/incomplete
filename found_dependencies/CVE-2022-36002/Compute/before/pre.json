[
    {
        "line": 2,
        "fullcodeline": "const Tensor& data_t = context->input(0);"
    },
    {
        "line": 3,
        "fullcodeline": "const Tensor& batch_index_t = context->input(1);"
    },
    {
        "line": 25,
        "fullcodeline": "std::vector<int64_t> sizes;"
    },
    {
        "line": 26,
        "fullcodeline": "std::vector<int64_t> batch_keys;"
    },
    {
        "line": 27,
        "fullcodeline": "std::vector<Tensor> split_inputs;"
    },
    {
        "line": 40,
        "fullcodeline": "std::vector<AsyncOpKernel::DoneCallback> done_callbacks_to_call;"
    },
    {
        "line": 41,
        "fullcodeline": "Status status = [&]() -> Status {"
    },
    {
        "line": 5,
        "fullcodeline": "if (batch_index_t.shape().dim_size(0) > data_t.shape().dim_size(0)) {"
    },
    {
        "line": 19,
        "fullcodeline": "const int64_t batch_key = context->input(2).scalar<int64_t>()();"
    },
    {
        "line": 20,
        "fullcodeline": "const bool nonempty_input = batch_index_t.dim_size(0) > 0;"
    },
    {
        "line": 12,
        "fullcodeline": "if (batch_index_t.shape().dim_size(1) != 3) {"
    },
    {
        "line": 6,
        "fullcodeline": "return errors::InvalidArgument("
    },
    {
        "line": 13,
        "fullcodeline": "return errors::InvalidArgument("
    },
    {
        "line": 30,
        "fullcodeline": "batch_index_t.shaped<int64_t, 2>({batch_index_t.dim_size(0), 3});"
    },
    {
        "line": 31,
        "fullcodeline": "for (int i = 0; i < batch_index_t.dim_size(0); ++i) {"
    },
    {
        "line": 36,
        "fullcodeline": "TF_RETURN_IF_ERROR(Split(context, data_t, sizes, &split_inputs));"
    },
    {
        "line": 9,
        "fullcodeline": "data_t.shape().dim_size(0),"
    },
    {
        "line": 10,
        "fullcodeline": "\"; Got: \", batch_index_t.shape().dim_size(0), \".\");"
    },
    {
        "line": 16,
        "fullcodeline": "batch_index_t.shape().dim_size(1), \".\");"
    },
    {
        "line": 32,
        "fullcodeline": "sizes.push_back(batch_indices(i, 2) - batch_indices(i, 1));"
    },
    {
        "line": 33,
        "fullcodeline": "batch_keys.push_back(batch_indices(i, 0));"
    }
]