[
    {
        "line": 2,
        "fullcodeline": "transport->addHeader(\"Content-Type\", \"text/plain\");"
    },
    {
        "line": 3,
        "fullcodeline": "std::string cmd = transport->getCommand();"
    },
    {
        "line": 743,
        "fullcodeline": "transport->onSendEnd();"
    },
    {
        "line": 192,
        "fullcodeline": "bool needs_password = (cmd != \"build-id\") && (cmd != \"compiler-id\") &&"
    },
    {
        "line": 741,
        "fullcodeline": "transport->sendString(\"Unknown command: \" + cmd + \"\\n\", 404);"
    },
    {
        "line": 6,
        "fullcodeline": "if (cmd == \"\" || cmd == \"help\") {"
    },
    {
        "line": 206,
        "fullcodeline": "if (needs_password && !RuntimeOption::AdminServerStatsNeedPassword) {"
    },
    {
        "line": 218,
        "fullcodeline": "if (needs_password && !RuntimeOption::HashedAdminPasswords.empty()) {"
    },
    {
        "line": 250,
        "fullcodeline": "if (cmd == \"stop\") {"
    },
    {
        "line": 263,
        "fullcodeline": "if (cmd == \"oom-kill\") {"
    },
    {
        "line": 271,
        "fullcodeline": "if (cmd == \"free-mem\") {"
    },
    {
        "line": 283,
        "fullcodeline": "if (cmd == \"prepare-to-stop\") {"
    },
    {
        "line": 307,
        "fullcodeline": "if (cmd == \"flush-profile\") {"
    },
    {
        "line": 314,
        "fullcodeline": "if (cmd == \"flush-logs\") {"
    },
    {
        "line": 322,
        "fullcodeline": "if (cmd == \"set-log-level\") {"
    },
    {
        "line": 355,
        "fullcodeline": "if (cmd == \"build-id\") {"
    },
    {
        "line": 359,
        "fullcodeline": "if (cmd == \"instance-id\") {"
    },
    {
        "line": 363,
        "fullcodeline": "if (cmd == \"compiler-id\") {"
    },
    {
        "line": 367,
        "fullcodeline": "if (cmd == \"config-id\") {"
    },
    {
        "line": 371,
        "fullcodeline": "if (cmd == \"repo-schema\") {"
    },
    {
        "line": 375,
        "fullcodeline": "if (cmd == \"translate\") {"
    },
    {
        "line": 387,
        "fullcodeline": "if (strncmp(cmd.c_str(), \"check\", 5) == 0 &&"
    },
    {
        "line": 391,
        "fullcodeline": "if (strncmp(cmd.c_str(), \"status\", 6) == 0 &&"
    },
    {
        "line": 395,
        "fullcodeline": "if (strncmp(cmd.c_str(),\"memory\", 6) == 0 &&"
    },
    {
        "line": 399,
        "fullcodeline": "if (strncmp(cmd.c_str(), \"stats\", 5) == 0 &&"
    },
    {
        "line": 403,
        "fullcodeline": "if (strncmp(cmd.c_str(), \"prof\", 4) == 0 &&"
    },
    {
        "line": 407,
        "fullcodeline": "if (strncmp(cmd.c_str(), \"dump-apc\", 8) == 0 &&"
    },
    {
        "line": 411,
        "fullcodeline": "if (strncmp(cmd.c_str(), \"invalidate-units\", 16) == 0 &&"
    },
    {
        "line": 415,
        "fullcodeline": "if (strncmp(cmd.c_str(), \"xenon-snap\", 10) == 0) {"
    },
    {
        "line": 425,
        "fullcodeline": "if (strncmp(cmd.c_str(), \"hugepage\", 9) == 0) {"
    },
    {
        "line": 441,
        "fullcodeline": "if (strncmp(cmd.c_str(), \"jit-des-info\", 13) == 0) {"
    },
    {
        "line": 452,
        "fullcodeline": "if (strncmp(cmd.c_str(), \"const-ss\", 8) == 0 &&"
    },
    {
        "line": 456,
        "fullcodeline": "if (strncmp(cmd.c_str(), \"static-strings\", 14) == 0 &&"
    },
    {
        "line": 460,
        "fullcodeline": "if (strncmp(cmd.c_str(), \"dump-static-strings\", 19) == 0) {"
    },
    {
        "line": 469,
        "fullcodeline": "if (strncmp(cmd.c_str(), \"random-static-strings\", 21) == 0) {"
    },
    {
        "line": 473,
        "fullcodeline": "if (strncmp(cmd.c_str(), \"vm-\", 3) == 0 &&"
    },
    {
        "line": 477,
        "fullcodeline": "if (cmd == \"proxy\") {"
    },
    {
        "line": 482,
        "fullcodeline": "if (cmd == \"statcache-clear\") {"
    },
    {
        "line": 487,
        "fullcodeline": "if (cmd == \"pcre-cache-size\") {"
    },
    {
        "line": 494,
        "fullcodeline": "if (cmd == \"dump-pcre-cache\") {"
    },
    {
        "line": 504,
        "fullcodeline": "if (cmd == \"start-stacktrace-profiler\") {"
    },
    {
        "line": 510,
        "fullcodeline": "if (cmd == \"warmup-status\") {"
    },
    {
        "line": 515,
        "fullcodeline": "if (cmd == \"advise-out-apc\") {"
    },
    {
        "line": 525,
        "fullcodeline": "if (strncmp(cmd.c_str(), \"random-apc\", 10) == 0 &&"
    },
    {
        "line": 529,
        "fullcodeline": "if (cmd == \"treadmill\") {"
    },
    {
        "line": 534,
        "fullcodeline": "if (cmd == \"load-factor\") {"
    },
    {
        "line": 555,
        "fullcodeline": "if (cmd == \"queue-discount\") {"
    },
    {
        "line": 576,
        "fullcodeline": "if (cmd == \"ini-get-all\") {"
    },
    {
        "line": 582,
        "fullcodeline": "if (cmd == \"numa-info\") {"
    },
    {
        "line": 714,
        "fullcodeline": "if (cmd == \"rqtrace-stats\") {"
    },
    {
        "line": 735,
        "fullcodeline": "if (AdminCommandExt::iterate([&](AdminCommandExt* ace) {"
    },
    {
        "line": 7,
        "fullcodeline": "string usage ="
    },
    {
        "line": 183,
        "fullcodeline": "AdminCommandExt::iterate([&](AdminCommandExt* ace) {"
    },
    {
        "line": 188,
        "fullcodeline": "transport->sendString(usage);"
    },
    {
        "line": 194,
        "fullcodeline": "(cmd != \"warmup-status\") && (cmd != \"config-id\")"
    },
    {
        "line": 219,
        "fullcodeline": "bool matched = false;"
    },
    {
        "line": 251,
        "fullcodeline": "string instanceId = transport->getParam(\"instance-id\");"
    },
    {
        "line": 257,
        "fullcodeline": "transport->sendString(\"OK\\n\");"
    },
    {
        "line": 258,
        "fullcodeline": "Logger::Info(\"Got admin port stop request from %s\","
    },
    {
        "line": 264,
        "fullcodeline": "Logger::Info(\"Invoking OOM killer upon admin port request from %s\","
    },
    {
        "line": 266,
        "fullcodeline": "auto const server = HttpServer::Server->getPageServer();"
    },
    {
        "line": 267,
        "fullcodeline": "RequestInfo::InvokeOOMKiller(server->getActiveWorker());"
    },
    {
        "line": 268,
        "fullcodeline": "transport->sendString(\"OOM killer invoked\");"
    },
    {
        "line": 272,
        "fullcodeline": "const auto before = Process::GetMemUsageMb();"
    },
    {
        "line": 284,
        "fullcodeline": "Logger::Info(\"Got admin port prepare-to-stop request from %s\","
    },
    {
        "line": 287,
        "fullcodeline": "Process::GetMemoryInfo(info);"
    },
    {
        "line": 288,
        "fullcodeline": "HttpServer::PrepareToStop();"
    },
    {
        "line": 300,
        "fullcodeline": "transport->sendString(\"OK\\n\");"
    },
    {
        "line": 301,
        "fullcodeline": "Process::GetMemoryInfo(newInfo);"
    },
    {
        "line": 302,
        "fullcodeline": "Logger::FInfo(\"free/cached/buffer {}/{}/{} -> {}/{}/{}\","
    },
    {
        "line": 308,
        "fullcodeline": "HttpServer::ProfileFlush();"
    },
    {
        "line": 311,
        "fullcodeline": "transport->sendString(\"OK\\n\");"
    },
    {
        "line": 315,
        "fullcodeline": "transport->sendString(\"OK\\n\");"
    },
    {
        "line": 316,
        "fullcodeline": "Logger::FlushAll();"
    },
    {
        "line": 317,
        "fullcodeline": "HttpRequestHandler::GetAccessLog().flushAllWriters();"
    },
    {
        "line": 318,
        "fullcodeline": "AdminRequestHandler::GetAccessLog().flushAllWriters();"
    },
    {
        "line": 319,
        "fullcodeline": "RPCRequestHandler::GetAccessLog().flushAllWriters();"
    },
    {
        "line": 323,
        "fullcodeline": "string result(\"OK\\n\");"
    },
    {
        "line": 324,
        "fullcodeline": "string level = transport->getParam(\"level\");"
    },
    {
        "line": 339,
        "fullcodeline": "transport->sendString(result);"
    },
    {
        "line": 356,
        "fullcodeline": "transport->sendString(RuntimeOption::BuildId, 200);"
    },
    {
        "line": 360,
        "fullcodeline": "transport->sendString(RuntimeOption::InstanceId, 200);"
    },
    {
        "line": 364,
        "fullcodeline": "transport->sendString(compilerId().begin(), 200);"
    },
    {
        "line": 368,
        "fullcodeline": "transport->sendString(std::to_string(RuntimeOption::ConfigId), 200);"
    },
    {
        "line": 372,
        "fullcodeline": "transport->sendString(repoSchemaId().begin(), 200);"
    },
    {
        "line": 376,
        "fullcodeline": "string buildId = transport->getParam(\"build-id\");"
    },
    {
        "line": 382,
        "fullcodeline": "string translated = translate_stack(transport->getParam(\"stack\").c_str(),"
    },
    {
        "line": 384,
        "fullcodeline": "transport->sendString(translated);"
    },
    {
        "line": 388,
        "fullcodeline": "handleCheckRequest(cmd, transport)) {"
    },
    {
        "line": 392,
        "fullcodeline": "handleStatusRequest(cmd, transport)) {"
    },
    {
        "line": 396,
        "fullcodeline": "handleMemoryRequest(cmd, transport)) {"
    },
    {
        "line": 400,
        "fullcodeline": "handleStatsRequest(cmd, transport)) {"
    },
    {
        "line": 404,
        "fullcodeline": "handleProfileRequest(cmd, transport)) {"
    },
    {
        "line": 408,
        "fullcodeline": "handleDumpCacheRequest(cmd, transport)) {"
    },
    {
        "line": 412,
        "fullcodeline": "handleInvalidateUnitRequest(cmd, transport)) {"
    },
    {
        "line": 416,
        "fullcodeline": "static int64_t s_lastSampleTime = 0;"
    },
    {
        "line": 417,
        "fullcodeline": "auto const current = TimeStamp::Current();"
    },
    {
        "line": 422,
        "fullcodeline": "transport->sendString(\"a Xenon sample will be collected\\n\", 200);"
    },
    {
        "line": 437,
        "fullcodeline": "transport->sendString(\"\", 200);"
    },
    {
        "line": 446,
        "fullcodeline": "auto msg = folly::sformat(\"{}:{}\","
    },
    {
        "line": 449,
        "fullcodeline": "transport->sendString(msg, 200);"
    },
    {
        "line": 453,
        "fullcodeline": "handleConstSizeRequest(cmd, transport)) {"
    },
    {
        "line": 457,
        "fullcodeline": "handleStaticStringsRequest(cmd, transport)) {"
    },
    {
        "line": 470,
        "fullcodeline": "handleRandomStaticStringsRequest(cmd, transport);"
    },
    {
        "line": 474,
        "fullcodeline": "handleVMRequest(cmd, transport)) {"
    },
    {
        "line": 478,
        "fullcodeline": "handleProxyRequest(cmd, transport);"
    },
    {
        "line": 483,
        "fullcodeline": "StatCache::clearCache();"
    },
    {
        "line": 489,
        "fullcodeline": "size << preg_pcre_cache_size() << endl;"
    },
    {
        "line": 490,
        "fullcodeline": "transport->sendString(size.str());"
    },
    {
        "line": 505,
        "fullcodeline": "enable_stacktrace_profiler = true;"
    },
    {
        "line": 506,
        "fullcodeline": "transport->sendString(\"OK\\n\");"
    },
    {
        "line": 511,
        "fullcodeline": "transport->sendString(jit::tc::warmupStatusString());"
    },
    {
        "line": 520,
        "fullcodeline": "apc_advise_out();"
    },
    {
        "line": 521,
        "fullcodeline": "transport->sendString(\"Done\\n\");"
    },
    {
        "line": 526,
        "fullcodeline": "handleRandomApcRequest(cmd, transport)) {"
    },
    {
        "line": 530,
        "fullcodeline": "transport->sendString(Treadmill::dumpTreadmillInfo());"
    },
    {
        "line": 535,
        "fullcodeline": "auto const factorStr = transport->getParam(\"set\");"
    },
    {
        "line": 543,
        "fullcodeline": "double factor = 1.0;"
    },
    {
        "line": 549,
        "fullcodeline": "HttpServer::LoadFactor.store(factor, std::memory_order_relaxed);"
    },
    {
        "line": 550,
        "fullcodeline": "transport->sendString(folly::sformat(\"Load factor updated to {}\\n\","
    },
    {
        "line": 552,
        "fullcodeline": "Logger::Info(\"Load factor updated to %lf\", factor);"
    },
    {
        "line": 556,
        "fullcodeline": "auto const discountStr = transport->getParam(\"set\");"
    },
    {
        "line": 562,
        "fullcodeline": "int queue_discount = 0;"
    },
    {
        "line": 569,
        "fullcodeline": "HttpServer::QueueDiscount.store(queue_discount,"
    },
    {
        "line": 571,
        "fullcodeline": "transport->sendString(folly::sformat(\"Queue Discount updated to {}\\n\","
    },
    {
        "line": 573,
        "fullcodeline": "Logger::Info(\"Queue Discount updated to %d\", queue_discount);"
    },
    {
        "line": 577,
        "fullcodeline": "auto out = IniSetting::GetAllAsJSON();"
    },
    {
        "line": 578,
        "fullcodeline": "transport->sendString(out.c_str());"
    },
    {
        "line": 590,
        "fullcodeline": "out << \"HAVE_NUMA not defined\" << endl;"
    },
    {
        "line": 592,
        "fullcodeline": "transport->sendString(out.str());"
    },
    {
        "line": 716,
        "fullcodeline": "bool first = true;"
    },
    {
        "line": 717,
        "fullcodeline": "out << \"{\" << endl;"
    },
    {
        "line": 718,
        "fullcodeline": "auto appendStat ="
    },
    {
        "line": 724,
        "fullcodeline": "rqtrace::visit_process_stats("
    },
    {
        "line": 730,
        "fullcodeline": "out << \"}\" << endl;"
    },
    {
        "line": 731,
        "fullcodeline": "transport->sendString(out.str());"
    },
    {
        "line": 207,
        "fullcodeline": "if ((strncmp(cmd.c_str(), \"memory.\", 7) == 0) ||"
    },
    {
        "line": 231,
        "fullcodeline": "if (!matched) {"
    },
    {
        "line": 252,
        "fullcodeline": "if (!instanceId.empty() && instanceId != RuntimeOption::InstanceId) {"
    },
    {
        "line": 259,
        "fullcodeline": "transport->getRemoteHost());"
    },
    {
        "line": 265,
        "fullcodeline": "transport->getRemoteHost());"
    },
    {
        "line": 274,
        "fullcodeline": "if (purge_all(&errStr)) {"
    },
    {
        "line": 285,
        "fullcodeline": "transport->getRemoteHost());"
    },
    {
        "line": 325,
        "fullcodeline": "if (level == \"None\") {"
    },
    {
        "line": 377,
        "fullcodeline": "if (!buildId.empty() && buildId != RuntimeOption::BuildId) {"
    },
    {
        "line": 418,
        "fullcodeline": "if (current > s_lastSampleTime) {"
    },
    {
        "line": 442,
        "fullcodeline": "if (!jit::ProfData::wasDeserialized()) {"
    },
    {
        "line": 536,
        "fullcodeline": "if (factorStr.empty()) {"
    },
    {
        "line": 544,
        "fullcodeline": "if (sscanf(factorStr.c_str(), \"%lf\", &factor) < 1 ||"
    },
    {
        "line": 557,
        "fullcodeline": "if (discountStr.empty()) {"
    },
    {
        "line": 563,
        "fullcodeline": "if (sscanf(discountStr.c_str(), \"%d\", &queue_discount) < 1 ||"
    },
    {
        "line": 193,
        "fullcodeline": "(cmd != \"instance-id\") && (cmd != \"flush-logs\") &&"
    },
    {
        "line": 213,
        "fullcodeline": "cmd == \"vm-namedentities\" || cmd == \"jemalloc-stats\") {"
    },
    {
        "line": 214,
        "fullcodeline": "needs_password = false;"
    },
    {
        "line": 232,
        "fullcodeline": "transport->sendString(\"Unauthorized\", 401);"
    },
    {
        "line": 235,
        "fullcodeline": "} else if (needs_password && !RuntimeOption::AdminPasswords.empty()) {"
    },
    {
        "line": 253,
        "fullcodeline": "transport->sendString(\"Instance ID doesn't match.\", 500);"
    },
    {
        "line": 275,
        "fullcodeline": "const auto after = Process::GetMemUsageMb();"
    },
    {
        "line": 276,
        "fullcodeline": "transport->sendString("
    },
    {
        "line": 378,
        "fullcodeline": "transport->sendString(\"Build ID doesn't match.\", 500);"
    },
    {
        "line": 383,
        "fullcodeline": "transport->getParam(\"bare\").empty());"
    },
    {
        "line": 419,
        "fullcodeline": "s_lastSampleTime = current;"
    },
    {
        "line": 420,
        "fullcodeline": "Xenon::getInstance().surpriseAll();"
    },
    {
        "line": 443,
        "fullcodeline": "transport->sendString(\"\", 200);"
    },
    {
        "line": 447,
        "fullcodeline": "jit::ProfData::buildHost()->slice(),"
    },
    {
        "line": 461,
        "fullcodeline": "if (auto file = dump_file(\"static_strings\")) {"
    },
    {
        "line": 462,
        "fullcodeline": "handleDumpStaticStringsRequest(file->file);"
    },
    {
        "line": 463,
        "fullcodeline": "transport->sendString(folly::sformat(\"dumped to {}\\n\", file->path));"
    },
    {
        "line": 495,
        "fullcodeline": "if (auto file = dump_file(\"pcre_cache\")) {"
    },
    {
        "line": 496,
        "fullcodeline": "pcre_dump_cache(file->file);"
    },
    {
        "line": 497,
        "fullcodeline": "transport->sendString(folly::sformat(\"dumped to {}\\n\", file->path));"
    },
    {
        "line": 517,
        "fullcodeline": "transport->sendString(\"No APC\\n\");"
    },
    {
        "line": 538,
        "fullcodeline": "oss << std::fixed << std::setprecision(3)"
    },
    {
        "line": 540,
        "fullcodeline": "transport->sendString(oss.str());"
    },
    {
        "line": 545,
        "fullcodeline": "factor > 10 || factor < -1) {"
    },
    {
        "line": 546,
        "fullcodeline": "transport->sendString(\"Invalid load factor spec: \" + factorStr, 400);"
    },
    {
        "line": 558,
        "fullcodeline": "transport->sendString(folly::to<string>("
    },
    {
        "line": 564,
        "fullcodeline": "queue_discount > 10000 || queue_discount < 0) {"
    },
    {
        "line": 565,
        "fullcodeline": "transport->sendString(\"Invalid queue discount spec: \" +"
    },
    {
        "line": 236,
        "fullcodeline": "std::set<std::string>::const_iterator iter ="
    },
    {
        "line": 277,
        "fullcodeline": "folly::sformat(\"Purged {} -> {} MB RSS\", before, after).c_str());"
    },
    {
        "line": 279,
        "fullcodeline": "transport->sendString(errStr.c_str(), 500);"
    },
    {
        "line": 465,
        "fullcodeline": "transport->sendString(\"Unable to mkdir or file already exists.\\n\");"
    },
    {
        "line": 499,
        "fullcodeline": "transport->sendString(\"Unable to mkdir or file already exists.\\n\");"
    },
    {
        "line": 212,
        "fullcodeline": "cmd == \"vm-tcspace\" || cmd == \"vm-tcaddr\" ||"
    },
    {
        "line": 237,
        "fullcodeline": "RuntimeOption::AdminPasswords.find(transport->getParam(\"auth\"));"
    },
    {
        "line": 238,
        "fullcodeline": "if (iter == RuntimeOption::AdminPasswords.end()) {"
    },
    {
        "line": 327,
        "fullcodeline": "} else if (level == \"Error\") {"
    },
    {
        "line": 239,
        "fullcodeline": "transport->sendString(\"Unauthorized\", 401);"
    },
    {
        "line": 243,
        "fullcodeline": "if (needs_password && !RuntimeOption::AdminPassword.empty() &&"
    },
    {
        "line": 211,
        "fullcodeline": "cmd == \"hugepage\" || cmd == \"pcre-cache-size\" ||"
    },
    {
        "line": 244,
        "fullcodeline": "RuntimeOption::AdminPassword != transport->getParam(\"auth\")) {"
    },
    {
        "line": 245,
        "fullcodeline": "transport->sendString(\"Unauthorized\", 401);"
    },
    {
        "line": 329,
        "fullcodeline": "} else if (level == \"Warning\") {"
    },
    {
        "line": 210,
        "fullcodeline": "(strncmp(cmd.c_str(), \"static-strings\", 14) == 0) ||"
    },
    {
        "line": 209,
        "fullcodeline": "(strncmp(cmd.c_str(), \"check-\", 6) == 0) ||"
    },
    {
        "line": 208,
        "fullcodeline": "(strncmp(cmd.c_str(), \"stats.\", 6) == 0) ||"
    },
    {
        "line": 331,
        "fullcodeline": "} else if (level == \"Info\") {"
    },
    {
        "line": 333,
        "fullcodeline": "} else if (level == \"Verbose\") {"
    },
    {
        "line": 336,
        "fullcodeline": "result = \"Failed to set log level\\n\";"
    }
]