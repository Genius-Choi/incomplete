[
    {
        "line": 11,
        "fullcodeline": "tl_heap.getCheck();"
    },
    {
        "line": 26,
        "fullcodeline": "auto m = getTierOverwrites(ini, config);"
    },
    {
        "line": 39,
        "fullcodeline": "Config::Bind(s_RelativeConfigs, ini, config, \"RelativeConfigs\");"
    },
    {
        "line": 93,
        "fullcodeline": "Config::Bind(PidFile, ini, config, \"PidFile\", \"www.pid\");"
    },
    {
        "line": 94,
        "fullcodeline": "Config::Bind(DeploymentId, ini, config, \"DeploymentId\");"
    },
    {
        "line": 1277,
        "fullcodeline": "Config::Bind(TzdataSearchPaths, ini, config, \"TzdataSearchPaths\");"
    },
    {
        "line": 1279,
        "fullcodeline": "Config::Bind(CustomSettings, ini, config, \"CustomSettings\");"
    },
    {
        "line": 1304,
        "fullcodeline": "Config::Bind(EnableZendIniCompat, ini, config, \"Eval.EnableZendIniCompat\","
    },
    {
        "line": 98,
        "fullcodeline": "Config::Bind(deploymentIdOverride, ini, config, \"DeploymentIdOverride\");"
    },
    {
        "line": 106,
        "fullcodeline": "Config::Bind(ConfigId, ini, config, \"ConfigId\", 0);"
    },
    {
        "line": 107,
        "fullcodeline": "auto configIdCounter = ServiceData::createCounter(\"vm.config.id\");"
    },
    {
        "line": 113,
        "fullcodeline": "auto setLogLevel = [](const std::string& value) {"
    },
    {
        "line": 130,
        "fullcodeline": "auto str = Config::GetString(ini, config, \"Log.Level\");"
    },
    {
        "line": 154,
        "fullcodeline": "Config::Bind(Logger::UseLogFile, ini, config, \"Log.UseLogFile\", true);"
    },
    {
        "line": 155,
        "fullcodeline": "Config::Bind(LogFile, ini, config, \"Log.File\");"
    },
    {
        "line": 156,
        "fullcodeline": "Config::Bind(LogFileSymLink, ini, config, \"Log.SymLink\");"
    },
    {
        "line": 157,
        "fullcodeline": "Config::Bind(LogFilePeriodMultiplier, ini,"
    },
    {
        "line": 168,
        "fullcodeline": "Config::Bind(Logger::LogHeader, ini, config, \"Log.Header\");"
    },
    {
        "line": 169,
        "fullcodeline": "Config::Bind(Logger::LogNativeStackTrace, ini, config,"
    },
    {
        "line": 171,
        "fullcodeline": "Config::Bind(Logger::UseSyslog, ini, config, \"Log.UseSyslog\", false);"
    },
    {
        "line": 172,
        "fullcodeline": "Config::Bind(Logger::UseRequestLog, ini, config, \"Log.UseRequestLog\","
    },
    {
        "line": 174,
        "fullcodeline": "Config::Bind(Logger::AlwaysEscapeLog, ini, config, \"Log.AlwaysEscapeLog\","
    },
    {
        "line": 176,
        "fullcodeline": "Config::Bind(Logger::UseCronolog, ini, config, \"Log.UseCronolog\", false);"
    },
    {
        "line": 177,
        "fullcodeline": "Config::Bind(Logger::MaxMessagesPerRequest, ini,"
    },
    {
        "line": 179,
        "fullcodeline": "Config::Bind(LogFileFlusher::DropCacheChunkSize, ini,"
    },
    {
        "line": 181,
        "fullcodeline": "Config::Bind(RuntimeOption::LogHeaderMangle, ini, config,"
    },
    {
        "line": 183,
        "fullcodeline": "Config::Bind(AlwaysLogUnhandledExceptions, ini,"
    },
    {
        "line": 186,
        "fullcodeline": "Config::Bind(NoSilencer, ini, config, \"Log.NoSilencer\");"
    },
    {
        "line": 187,
        "fullcodeline": "Config::Bind(RuntimeErrorReportingLevel, ini,"
    },
    {
        "line": 190,
        "fullcodeline": "Config::Bind(ForceErrorReportingLevel, ini,"
    },
    {
        "line": 192,
        "fullcodeline": "Config::Bind(AccessLogDefaultFormat, ini, config,"
    },
    {
        "line": 222,
        "fullcodeline": "parseLogs(config, ini, \"Log.Access\", AccessLogs);"
    },
    {
        "line": 223,
        "fullcodeline": "RPCLogs = AccessLogs;"
    },
    {
        "line": 224,
        "fullcodeline": "parseLogs(config, ini, \"Log.RPC\", RPCLogs);"
    },
    {
        "line": 226,
        "fullcodeline": "Config::Bind(AdminLogFormat, ini, config, \"Log.AdminLog.Format\","
    },
    {
        "line": 228,
        "fullcodeline": "Config::Bind(AdminLogFile, ini, config, \"Log.AdminLog.File\");"
    },
    {
        "line": 229,
        "fullcodeline": "Config::Bind(AdminLogSymLink, ini, config, \"Log.AdminLog.SymLink\");"
    },
    {
        "line": 234,
        "fullcodeline": "Config::Bind(ErrorUpgradeLevel, ini, config, \"ErrorHandling.UpgradeLevel\","
    },
    {
        "line": 236,
        "fullcodeline": "Config::Bind(MaxSerializedStringSize, ini,"
    },
    {
        "line": 239,
        "fullcodeline": "Config::Bind(CallUserHandlerOnFatals, ini,"
    },
    {
        "line": 241,
        "fullcodeline": "Config::Bind(ThrowExceptionOnBadMethodCall, ini,"
    },
    {
        "line": 243,
        "fullcodeline": "Config::Bind(LogNativeStackOnOOM, ini,"
    },
    {
        "line": 245,
        "fullcodeline": "Config::Bind(NoInfiniteRecursionDetection, ini,"
    },
    {
        "line": 247,
        "fullcodeline": "Config::Bind(NoticeFrequency, ini, config, \"ErrorHandling.NoticeFrequency\","
    },
    {
        "line": 249,
        "fullcodeline": "Config::Bind(WarningFrequency, ini, config,"
    },
    {
        "line": 264,
        "fullcodeline": "setResourceLimit(RLIMIT_NOFILE, ini, config, \"ResourceLimit.MaxSocket\");"
    },
    {
        "line": 265,
        "fullcodeline": "setResourceLimit(RLIMIT_DATA, ini, config, \"ResourceLimit.RSS\");"
    },
    {
        "line": 269,
        "fullcodeline": "static int64_t s_core_file_size_override, s_core_file_size, s_rss = 0;"
    },
    {
        "line": 270,
        "fullcodeline": "static int32_t s_max_socket = 0;"
    },
    {
        "line": 271,
        "fullcodeline": "Config::Bind(s_core_file_size_override, ini, config,"
    },
    {
        "line": 273,
        "fullcodeline": "Config::Bind(s_core_file_size, ini, config, \"ResourceLimit.CoreFileSize\","
    },
    {
        "line": 275,
        "fullcodeline": "Config::Bind(s_max_socket, ini, config, \"ResourceLimit.MaxSocket\", 0);"
    },
    {
        "line": 276,
        "fullcodeline": "Config::Bind(s_rss, ini, config, \"ResourceLimit.RSS\", 0);"
    },
    {
        "line": 278,
        "fullcodeline": "Config::Bind(SocketDefaultTimeout, ini, config,"
    },
    {
        "line": 280,
        "fullcodeline": "Config::Bind(MaxSQLRowCount, ini, config, \"ResourceLimit.MaxSQLRowCount\","
    },
    {
        "line": 282,
        "fullcodeline": "Config::Bind(SerializationSizeLimit, ini, config,"
    },
    {
        "line": 284,
        "fullcodeline": "Config::Bind(HeapSizeMB, ini, config, \"ResourceLimit.HeapSizeMB\","
    },
    {
        "line": 286,
        "fullcodeline": "Config::Bind(HeapResetCountBase, ini, config,"
    },
    {
        "line": 288,
        "fullcodeline": "Config::Bind(HeapResetCountMultiple, ini, config,"
    },
    {
        "line": 291,
        "fullcodeline": "Config::Bind(HeapLowWaterMark , ini, config,"
    },
    {
        "line": 293,
        "fullcodeline": "Config::Bind(HeapHighWaterMark , ini, config,"
    },
    {
        "line": 298,
        "fullcodeline": "Config::Bind(DisableCallUserFunc, ini, config,"
    },
    {
        "line": 301,
        "fullcodeline": "Config::Bind(DisableCallUserFuncArray, ini, config,"
    },
    {
        "line": 304,
        "fullcodeline": "Config::Bind(DisableAssert, ini, config,"
    },
    {
        "line": 307,
        "fullcodeline": "Config::Bind(DisableNontoplevelDeclarations, ini, config,"
    },
    {
        "line": 310,
        "fullcodeline": "Config::Bind(DisableStaticClosures, ini, config,"
    },
    {
        "line": 313,
        "fullcodeline": "Config::Bind(DisableConstant, ini, config,"
    },
    {
        "line": 354,
        "fullcodeline": "Config::Bind(repoLocalMode, ini, config, \"Repo.Local.Mode\", repoModeToStr(RepoLocalMode));"
    },
    {
        "line": 358,
        "fullcodeline": "Config::Bind(RepoLocalPath, ini, config, \"Repo.Local.Path\");"
    },
    {
        "line": 368,
        "fullcodeline": "Config::Bind(repoCentralMode, ini, config, \"Repo.Central.Mode\", repoModeToStr(RepoCentralMode));"
    },
    {
        "line": 372,
        "fullcodeline": "Config::Bind(RepoCentralPath, ini, config, \"Repo.Central.Path\");"
    },
    {
        "line": 373,
        "fullcodeline": "Config::Bind(RepoCentralFileMode, ini, config, \"Repo.Central.FileMode\");"
    },
    {
        "line": 374,
        "fullcodeline": "Config::Bind(RepoCentralFileUser, ini, config, \"Repo.Central.FileUser\");"
    },
    {
        "line": 375,
        "fullcodeline": "Config::Bind(RepoCentralFileGroup, ini, config, \"Repo.Central.FileGroup\");"
    },
    {
        "line": 377,
        "fullcodeline": "Config::Bind(RepoAllowFallbackPath, ini, config, \"Repo.AllowFallbackPath\","
    },
    {
        "line": 383,
        "fullcodeline": "Config::Bind(RepoJournal, ini, config, \"Repo.Journal\", RepoJournal);"
    },
    {
        "line": 384,
        "fullcodeline": "Config::Bind(RepoCommit, ini, config, \"Repo.Commit\","
    },
    {
        "line": 386,
        "fullcodeline": "Config::Bind(RepoDebugInfo, ini, config, \"Repo.DebugInfo\", RepoDebugInfo);"
    },
    {
        "line": 387,
        "fullcodeline": "Config::Bind(RepoLitstrLazyLoad, ini, config, \"Repo.LitstrLazyLoad\","
    },
    {
        "line": 389,
        "fullcodeline": "Config::Bind(RepoAuthoritative, ini, config, \"Repo.Authoritative\","
    },
    {
        "line": 391,
        "fullcodeline": "Config::Bind(RepoLocalReadaheadRate, ini, config,"
    },
    {
        "line": 393,
        "fullcodeline": "Config::Bind(RepoLocalReadaheadConcurrent, ini, config,"
    },
    {
        "line": 395,
        "fullcodeline": "Config::Bind(RepoBusyTimeoutMS, ini, config,"
    },
    {
        "line": 408,
        "fullcodeline": "Config::Bind(EnableHipHopSyntax, ini, config, \"Eval.EnableHipHopSyntax\","
    },
    {
        "line": 410,
        "fullcodeline": "Config::Bind(EnableShortTags, ini, config, \"Eval.EnableShortTags\", true);"
    },
    {
        "line": 411,
        "fullcodeline": "Config::Bind(EnableXHP, ini, config, \"Eval.EnableXHP\", EnableXHP);"
    },
    {
        "line": 412,
        "fullcodeline": "Config::Bind(TimeoutsUseWallTime, ini, config, \"Eval.TimeoutsUseWallTime\","
    },
    {
        "line": 414,
        "fullcodeline": "Config::Bind(CheckFlushOnUserClose, ini, config,"
    },
    {
        "line": 416,
        "fullcodeline": "Config::Bind(EvalInitialNamedEntityTableSize, ini, config,"
    },
    {
        "line": 419,
        "fullcodeline": "Config::Bind(EvalInitialStaticStringTableSize, ini, config,"
    },
    {
        "line": 424,
        "fullcodeline": "Config::Bind(jitSerdesMode, ini, config, \"Eval.JitSerdesMode\", \"Off\");"
    },
    {
        "line": 426,
        "fullcodeline": "EvalJitSerdesMode = [&] {"
    },
    {
        "line": 438,
        "fullcodeline": "Config::Bind(EvalJitSerdesFile, ini, config,"
    },
    {
        "line": 447,
        "fullcodeline": "auto const couldDump = !EvalJitSerdesFile.empty() &&"
    },
    {
        "line": 450,
        "fullcodeline": "Config::Bind(DumpPreciseProfData, ini, config,"
    },
    {
        "line": 452,
        "fullcodeline": "Config::Bind(ProfDataTTLHours, ini, config,"
    },
    {
        "line": 454,
        "fullcodeline": "Config::Bind(ProfDataTag, ini, config, \"Eval.ProfDataTag\", ProfDataTag);"
    },
    {
        "line": 456,
        "fullcodeline": "Config::Bind(CheckSymLink, ini, config, \"Eval.CheckSymLink\", true);"
    },
    {
        "line": 457,
        "fullcodeline": "Config::Bind(TrustAutoloaderPath, ini, config,"
    },
    {
        "line": 471,
        "fullcodeline": "Config::Bind(ServerForkEnabled, ini, config,"
    },
    {
        "line": 473,
        "fullcodeline": "Config::Bind(ServerForkLogging, ini, config,"
    },
    {
        "line": 480,
        "fullcodeline": "s_enable_static_arena ="
    },
    {
        "line": 500,
        "fullcodeline": "EvalJitPGOUseAddrCountedCheck &= addr_encodes_persistency;"
    },
    {
        "line": 501,
        "fullcodeline": "HardwareCounter::Init(EvalProfileHWEnable,"
    },
    {
        "line": 509,
        "fullcodeline": "Config::Bind(EnableIntrinsicsExtension, ini,"
    },
    {
        "line": 525,
        "fullcodeline": "Config::Bind(CodeCoverageOutputFile, ini, config,"
    },
    {
        "line": 528,
        "fullcodeline": "Config::Bind(EnableArgsInBacktraces, ini, config,"
    },
    {
        "line": 533,
        "fullcodeline": "Config::Bind(CheckCLIClientCommands, ini, config, \"Eval.CheckCLIClientCommands\", 1);"
    },
    {
        "line": 604,
        "fullcodeline": "Config::Bind(CheckIntOverflow, ini, config,"
    },
    {
        "line": 606,
        "fullcodeline": "Config::Bind(StrictArrayFillKeys, ini, config,"
    },
    {
        "line": 616,
        "fullcodeline": "Config::Bind(AutoTypecheck, ini, config, \"Hack.Lang.AutoTypecheck\","
    },
    {
        "line": 618,
        "fullcodeline": "Config::Bind(EnableClassLevelWhereClauses, ini, config,"
    },
    {
        "line": 636,
        "fullcodeline": "Config::Bind(s_PHP7_master, ini, config, \"PHP7.all\", s_PHP7_default);"
    },
    {
        "line": 637,
        "fullcodeline": "Config::Bind(PHP7_EngineExceptions, ini, config, \"PHP7.EngineExceptions\","
    },
    {
        "line": 639,
        "fullcodeline": "Config::Bind(PHP7_NoHexNumerics, ini, config, \"PHP7.NoHexNumerics\","
    },
    {
        "line": 641,
        "fullcodeline": "Config::Bind(PHP7_Builtins, ini, config, \"PHP7.Builtins\", s_PHP7_master);"
    },
    {
        "line": 642,
        "fullcodeline": "Config::Bind(PHP7_Substr, ini, config, \"PHP7.Substr\","
    },
    {
        "line": 644,
        "fullcodeline": "Config::Bind(PHP7_DisallowUnsafeCurlUploads, ini, config,"
    },
    {
        "line": 649,
        "fullcodeline": "Config::Bind(Host, ini, config, \"Server.Host\");"
    },
    {
        "line": 650,
        "fullcodeline": "Config::Bind(DefaultServerNameSuffix, ini, config,"
    },
    {
        "line": 657,
        "fullcodeline": "Config::Bind(ServerFileSocket, ini, config, \"Server.FileSocket\");"
    },
    {
        "line": 667,
        "fullcodeline": "Config::Bind(ServerPort, ini, config, \"Server.Port\", 80);"
    },
    {
        "line": 668,
        "fullcodeline": "Config::Bind(ServerBacklog, ini, config, \"Server.Backlog\", 128);"
    },
    {
        "line": 669,
        "fullcodeline": "Config::Bind(ServerConnectionLimit, ini, config,"
    },
    {
        "line": 673,
        "fullcodeline": "Config::Bind(ServerQueueCount, ini, config, \"Server.QueueCount\","
    },
    {
        "line": 675,
        "fullcodeline": "Config::Bind(ServerIOThreadCount, ini, config,"
    },
    {
        "line": 679,
        "fullcodeline": "Config::Bind(ServerHugeThreadCount, ini, config,"
    },
    {
        "line": 681,
        "fullcodeline": "Config::Bind(ServerHugeStackKb, ini, config, \"Server.HugeStackSizeKb\", 384);"
    },
    {
        "line": 682,
        "fullcodeline": "Config::Bind(ServerLoopSampleRate, ini, config,"
    },
    {
        "line": 687,
        "fullcodeline": "Config::Bind(ServerWarmupThrottleThreadCount, ini, config,"
    },
    {
        "line": 690,
        "fullcodeline": "Config::Bind(ServerThreadDropCacheTimeoutSeconds, ini, config,"
    },
    {
        "line": 698,
        "fullcodeline": "Config::Bind(ServerThreadJobMaxQueuingMilliSeconds, ini, config,"
    },
    {
        "line": 700,
        "fullcodeline": "Config::Bind(ServerThreadDropStack, ini, config, \"Server.ThreadDropStack\");"
    },
    {
        "line": 701,
        "fullcodeline": "Config::Bind(ServerHttpSafeMode, ini, config, \"Server.HttpSafeMode\");"
    },
    {
        "line": 702,
        "fullcodeline": "Config::Bind(ServerStatCache, ini, config, \"Server.StatCache\", false);"
    },
    {
        "line": 703,
        "fullcodeline": "Config::Bind(ServerFixPathInfo, ini, config, \"Server.FixPathInfo\", false);"
    },
    {
        "line": 706,
        "fullcodeline": "Config::Bind(ServerLogSettingsOnStartup, ini, config,"
    },
    {
        "line": 708,
        "fullcodeline": "Config::Bind(ServerLogReorderProps, ini, config,"
    },
    {
        "line": 710,
        "fullcodeline": "Config::Bind(ServerWarmupConcurrently, ini, config,"
    },
    {
        "line": 712,
        "fullcodeline": "Config::Bind(ServerDedupeWarmupRequests, ini, config,"
    },
    {
        "line": 724,
        "fullcodeline": "Config::Bind(ServerWarmupRequests, ini, config, \"Server.WarmupRequests\");"
    },
    {
        "line": 725,
        "fullcodeline": "Config::Bind(ServerExtendedWarmupRequests, ini, config,"
    },
    {
        "line": 727,
        "fullcodeline": "Config::Bind(ServerCleanupRequest, ini, config, \"Server.CleanupRequest\");"
    },
    {
        "line": 728,
        "fullcodeline": "Config::Bind(ServerInternalWarmupThreads, ini, config,"
    },
    {
        "line": 730,
        "fullcodeline": "Config::Bind(ServerHighPriorityEndPoints, ini, config,"
    },
    {
        "line": 732,
        "fullcodeline": "Config::Bind(ServerExitOnBindFail, ini, config, \"Server.ExitOnBindFail\","
    },
    {
        "line": 735,
        "fullcodeline": "Config::Bind(RequestTimeoutSeconds, ini, config,"
    },
    {
        "line": 737,
        "fullcodeline": "Config::Bind(MaxRequestAgeFactor, ini, config, \"Server.MaxRequestAgeFactor\","
    },
    {
        "line": 739,
        "fullcodeline": "Config::Bind(PspTimeoutSeconds, ini, config, \"Server.PspTimeoutSeconds\", 0);"
    },
    {
        "line": 740,
        "fullcodeline": "Config::Bind(PspCpuTimeoutSeconds, ini, config,"
    },
    {
        "line": 742,
        "fullcodeline": "Config::Bind(RequestMemoryMaxBytes, ini, config,"
    },
    {
        "line": 747,
        "fullcodeline": "Config::Bind(RequestHugeMaxBytes, ini, config,"
    },
    {
        "line": 749,
        "fullcodeline": "Config::Bind(ServerGracefulShutdownWait, ini,"
    },
    {
        "line": 751,
        "fullcodeline": "Config::Bind(ServerHarshShutdown, ini, config, \"Server.HarshShutdown\","
    },
    {
        "line": 753,
        "fullcodeline": "Config::Bind(ServerKillOnTimeout, ini, config, \"Server.KillOnTimeout\","
    },
    {
        "line": 755,
        "fullcodeline": "Config::Bind(ServerEvilShutdown, ini, config, \"Server.EvilShutdown\", true);"
    },
    {
        "line": 756,
        "fullcodeline": "Config::Bind(ServerPreShutdownWait, ini, config,"
    },
    {
        "line": 758,
        "fullcodeline": "Config::Bind(ServerShutdownListenWait, ini, config,"
    },
    {
        "line": 760,
        "fullcodeline": "Config::Bind(ServerShutdownEOMWait, ini, config,"
    },
    {
        "line": 762,
        "fullcodeline": "Config::Bind(ServerPrepareToStopTimeout, ini, config,"
    },
    {
        "line": 764,
        "fullcodeline": "Config::Bind(ServerPartialPostStatusCode, ini, config,"
    },
    {
        "line": 766,
        "fullcodeline": "Config::Bind(StopOldServer, ini, config, \"Server.StopOld\", false);"
    },
    {
        "line": 767,
        "fullcodeline": "Config::Bind(OldServerWait, ini, config, \"Server.StopOldWait\", 30);"
    },
    {
        "line": 768,
        "fullcodeline": "Config::Bind(ServerRSSNeededMb, ini, config, \"Server.RSSNeededMb\", 4096);"
    },
    {
        "line": 769,
        "fullcodeline": "Config::Bind(ServerCriticalFreeMb, ini, config,"
    },
    {
        "line": 775,
        "fullcodeline": "Config::Bind(ServerNextProtocols, ini, config, \"Server.SSLNextProtocols\");"
    },
    {
        "line": 776,
        "fullcodeline": "Config::Bind(ServerEnableH2C, ini, config, \"Server.EnableH2C\");"
    },
    {
        "line": 780,
        "fullcodeline": "Config::Bind(BrotliCompressionEnabled, ini, config,"
    },
    {
        "line": 782,
        "fullcodeline": "Config::Bind(BrotliChunkedCompressionEnabled, ini, config,"
    },
    {
        "line": 784,
        "fullcodeline": "Config::Bind(BrotliCompressionLgWindowSize, ini, config,"
    },
    {
        "line": 786,
        "fullcodeline": "Config::Bind(BrotliCompressionMode, ini, config,"
    },
    {
        "line": 788,
        "fullcodeline": "Config::Bind(BrotliCompressionQuality, ini, config,"
    },
    {
        "line": 790,
        "fullcodeline": "Config::Bind(ZstdCompressionEnabled, ini, config,"
    },
    {
        "line": 794,
        "fullcodeline": "Config::Bind(ZstdCompressionLevel, ini, config,"
    },
    {
        "line": 796,
        "fullcodeline": "Config::Bind(ZstdChecksumRate, ini, config,"
    },
    {
        "line": 798,
        "fullcodeline": "Config::Bind(GzipCompressionLevel, ini, config,"
    },
    {
        "line": 800,
        "fullcodeline": "Config::Bind(GzipMaxCompressionLevel, ini, config,"
    },
    {
        "line": 804,
        "fullcodeline": "Config::Bind(EnableKeepAlive, ini, config, \"Server.EnableKeepAlive\", true);"
    },
    {
        "line": 805,
        "fullcodeline": "Config::Bind(ExposeHPHP, ini, config, \"Server.ExposeHPHP\", true);"
    },
    {
        "line": 806,
        "fullcodeline": "Config::Bind(ExposeXFBServer, ini, config, \"Server.ExposeXFBServer\", false);"
    },
    {
        "line": 807,
        "fullcodeline": "Config::Bind(ExposeXFBDebug, ini, config, \"Server.ExposeXFBDebug\", false);"
    },
    {
        "line": 808,
        "fullcodeline": "Config::Bind(XFBDebugSSLKey, ini, config, \"Server.XFBDebugSSLKey\", \"\");"
    },
    {
        "line": 809,
        "fullcodeline": "Config::Bind(ConnectionTimeoutSeconds, ini, config,"
    },
    {
        "line": 811,
        "fullcodeline": "Config::Bind(EnableOutputBuffering, ini, config,"
    },
    {
        "line": 813,
        "fullcodeline": "Config::Bind(OutputHandler, ini, config, \"Server.OutputHandler\");"
    },
    {
        "line": 814,
        "fullcodeline": "Config::Bind(ImplicitFlush, ini, config, \"Server.ImplicitFlush\");"
    },
    {
        "line": 815,
        "fullcodeline": "Config::Bind(EnableEarlyFlush, ini, config, \"Server.EnableEarlyFlush\","
    },
    {
        "line": 817,
        "fullcodeline": "Config::Bind(ForceChunkedEncoding, ini, config,"
    },
    {
        "line": 821,
        "fullcodeline": "Config::Bind(AlwaysPopulateRawPostData, ini, config,"
    },
    {
        "line": 823,
        "fullcodeline": "Config::Bind(TakeoverFilename, ini, config, \"Server.TakeoverFilename\");"
    },
    {
        "line": 824,
        "fullcodeline": "Config::Bind(ExpiresActive, ini, config, \"Server.ExpiresActive\", true);"
    },
    {
        "line": 827,
        "fullcodeline": "Config::Bind(DefaultCharsetName, ini, config, \"Server.DefaultCharsetName\","
    },
    {
        "line": 829,
        "fullcodeline": "Config::Bind(RequestBodyReadLimit, ini, config,"
    },
    {
        "line": 831,
        "fullcodeline": "Config::Bind(EnableSSL, ini, config, \"Server.EnableSSL\");"
    },
    {
        "line": 832,
        "fullcodeline": "Config::Bind(SSLPort, ini, config, \"Server.SSLPort\", 443);"
    },
    {
        "line": 833,
        "fullcodeline": "Config::Bind(SSLCertificateFile, ini, config, \"Server.SSLCertificateFile\");"
    },
    {
        "line": 834,
        "fullcodeline": "Config::Bind(SSLCertificateKeyFile, ini, config,"
    },
    {
        "line": 836,
        "fullcodeline": "Config::Bind(SSLCertificateDir, ini, config, \"Server.SSLCertificateDir\");"
    },
    {
        "line": 837,
        "fullcodeline": "Config::Bind(SSLTicketSeedFile, ini, config, \"Server.SSLTicketSeedFile\");"
    },
    {
        "line": 838,
        "fullcodeline": "Config::Bind(TLSDisableTLS1_2, ini, config, \"Server.TLSDisableTLS1_2\","
    },
    {
        "line": 840,
        "fullcodeline": "Config::Bind(TLSClientCipherSpec, ini, config,"
    },
    {
        "line": 842,
        "fullcodeline": "Config::Bind(EnableSSLWithPlainText, ini, config,"
    },
    {
        "line": 856,
        "fullcodeline": "Config::Bind(ClientAuthAclIdentity, ini, config,"
    },
    {
        "line": 858,
        "fullcodeline": "Config::Bind(ClientAuthAclAction, ini, config,"
    },
    {
        "line": 860,
        "fullcodeline": "Config::Bind(ClientAuthFailClose, ini, config,"
    },
    {
        "line": 913,
        "fullcodeline": "Config::Bind(AutoloadEnabled, ini, config, \"Autoload.Enabled\", false);"
    },
    {
        "line": 914,
        "fullcodeline": "Config::Bind(AutoloadDBPath, ini, config, \"Autoload.DBPath\");"
    },
    {
        "line": 917,
        "fullcodeline": "Config::Bind(DefaultDocument, ini, config, \"Server.DefaultDocument\","
    },
    {
        "line": 919,
        "fullcodeline": "Config::Bind(GlobalDocument, ini, config, \"Server.GlobalDocument\");"
    },
    {
        "line": 920,
        "fullcodeline": "Config::Bind(ErrorDocument404, ini, config, \"Server.ErrorDocument404\");"
    },
    {
        "line": 922,
        "fullcodeline": "Config::Bind(ForbiddenAs404, ini, config, \"Server.ForbiddenAs404\");"
    },
    {
        "line": 923,
        "fullcodeline": "Config::Bind(ErrorDocument500, ini, config, \"Server.ErrorDocument500\");"
    },
    {
        "line": 925,
        "fullcodeline": "Config::Bind(FatalErrorMessage, ini, config, \"Server.FatalErrorMessage\");"
    },
    {
        "line": 926,
        "fullcodeline": "FontPath = FileUtil::normalizeDir("
    },
    {
        "line": 928,
        "fullcodeline": "Config::Bind(EnableStaticContentFromDisk, ini, config,"
    },
    {
        "line": 932,
        "fullcodeline": "Config::Bind(EnableStaticContentMMap, ini, config,"
    },
    {
        "line": 937,
        "fullcodeline": "Config::Bind(Utf8izeReplace, ini, config, \"Server.Utf8izeReplace\", true);"
    },
    {
        "line": 939,
        "fullcodeline": "Config::Bind(RequestInitFunction, ini, config,"
    },
    {
        "line": 941,
        "fullcodeline": "Config::Bind(RequestInitDocument, ini, config,"
    },
    {
        "line": 943,
        "fullcodeline": "Config::Bind(SafeFileAccess, ini, config, \"Server.SafeFileAccess\");"
    },
    {
        "line": 944,
        "fullcodeline": "Config::Bind(AllowedDirectories, ini, config, \"Server.AllowedDirectories\");"
    },
    {
        "line": 945,
        "fullcodeline": "Config::Bind(WhitelistExec, ini, config, \"Server.WhitelistExec\");"
    },
    {
        "line": 946,
        "fullcodeline": "Config::Bind(WhitelistExecWarningOnly, ini, config,"
    },
    {
        "line": 948,
        "fullcodeline": "Config::Bind(AllowedExecCmds, ini, config, \"Server.AllowedExecCmds\");"
    },
    {
        "line": 949,
        "fullcodeline": "Config::Bind(UnserializationWhitelistCheck, ini, config,"
    },
    {
        "line": 951,
        "fullcodeline": "Config::Bind(UnserializationWhitelistCheckWarningOnly, ini, config,"
    },
    {
        "line": 953,
        "fullcodeline": "Config::Bind(UnserializationBigMapThreshold, ini, config,"
    },
    {
        "line": 955,
        "fullcodeline": "Config::Bind(AllowedFiles, ini, config, \"Server.AllowedFiles\");"
    },
    {
        "line": 956,
        "fullcodeline": "Config::Bind(ForbiddenFileExtensions, ini, config,"
    },
    {
        "line": 958,
        "fullcodeline": "Config::Bind(LockCodeMemory, ini, config, \"Server.LockCodeMemory\", false);"
    },
    {
        "line": 966,
        "fullcodeline": "Config::Bind(WarnOnCollectionToArray, ini, config,"
    },
    {
        "line": 968,
        "fullcodeline": "Config::Bind(UseDirectCopy, ini, config, \"Server.UseDirectCopy\", false);"
    },
    {
        "line": 969,
        "fullcodeline": "Config::Bind(AlwaysUseRelativePath, ini, config,"
    },
    {
        "line": 997,
        "fullcodeline": "Config::Bind(LightProcessFilePrefix, ini, config,"
    },
    {
        "line": 999,
        "fullcodeline": "Config::Bind(LightProcessCount, ini, config,"
    },
    {
        "line": 1001,
        "fullcodeline": "Config::Bind(ForceServerNameToHeader, ini, config,"
    },
    {
        "line": 1003,
        "fullcodeline": "Config::Bind(AllowDuplicateCookies, ini, config,"
    },
    {
        "line": 1005,
        "fullcodeline": "Config::Bind(PathDebug, ini, config, \"Server.PathDebug\", false);"
    },
    {
        "line": 1006,
        "fullcodeline": "Config::Bind(ServerUser, ini, config, \"Server.User\", \"\");"
    },
    {
        "line": 1007,
        "fullcodeline": "Config::Bind(AllowRunAsRoot, ini, config, \"Server.AllowRunAsRoot\", false);"
    },
    {
        "line": 1029,
        "fullcodeline": "LowestMaxPostSize = VirtualHost::GetLowestMaxPostSize();"
    },
    {
        "line": 1033,
        "fullcodeline": "IpBlocks = std::make_shared<IpBlockMap>(ini, config);"
    },
    {
        "line": 1036,
        "fullcodeline": "ReadSatelliteInfo(ini, config, SatelliteServerInfos,"
    },
    {
        "line": 1041,
        "fullcodeline": "Config::Bind(XboxServerThreadCount, ini, config,"
    },
    {
        "line": 1046,
        "fullcodeline": "Config::Bind(XboxServerInfoMaxRequest, ini, config,"
    },
    {
        "line": 1048,
        "fullcodeline": "Config::Bind(XboxServerInfoDuration, ini, config,"
    },
    {
        "line": 1050,
        "fullcodeline": "Config::Bind(XboxServerInfoReqInitFunc, ini, config,"
    },
    {
        "line": 1052,
        "fullcodeline": "Config::Bind(XboxServerInfoReqInitDoc, ini, config,"
    },
    {
        "line": 1054,
        "fullcodeline": "Config::Bind(XboxServerInfoAlwaysReset, ini, config,"
    },
    {
        "line": 1056,
        "fullcodeline": "Config::Bind(XboxServerLogInfo, ini, config, \"Xbox.ServerInfo.LogInfo\","
    },
    {
        "line": 1058,
        "fullcodeline": "Config::Bind(XboxProcessMessageFunc, ini, config, \"Xbox.ProcessMessageFunc\","
    },
    {
        "line": 1063,
        "fullcodeline": "Config::Bind(PageletServerThreadCount, ini, config,"
    },
    {
        "line": 1065,
        "fullcodeline": "Config::Bind(PageletServerHugeThreadCount, ini, config,"
    },
    {
        "line": 1067,
        "fullcodeline": "Config::Bind(PageletServerThreadDropStack, ini, config,"
    },
    {
        "line": 1069,
        "fullcodeline": "Config::Bind(PageletServerThreadDropCacheTimeoutSeconds, ini, config,"
    },
    {
        "line": 1071,
        "fullcodeline": "Config::Bind(PageletServerQueueLimit, ini, config,"
    },
    {
        "line": 1090,
        "fullcodeline": "Config::Bind(StaticFileExtensions, ini, config, \"StaticFile.Extensions\","
    },
    {
        "line": 1101,
        "fullcodeline": "Config::Bind(PhpFileExtensions, ini, config, \"PhpFile.Extensions\");"
    },
    {
        "line": 1105,
        "fullcodeline": "Config::Bind(AdminServerIP, ini, config, \"AdminServer.IP\", ServerIP);"
    },
    {
        "line": 1106,
        "fullcodeline": "Config::Bind(AdminServerPort, ini, config, \"AdminServer.Port\", 0);"
    },
    {
        "line": 1107,
        "fullcodeline": "Config::Bind(AdminThreadCount, ini, config, \"AdminServer.ThreadCount\", 1);"
    },
    {
        "line": 1108,
        "fullcodeline": "Config::Bind(AdminServerEnableSSLWithPlainText, ini, config,"
    },
    {
        "line": 1112,
        "fullcodeline": "AdminPassword = Config::GetString(ini, config, \"AdminServer.Password\");"
    },
    {
        "line": 1113,
        "fullcodeline": "AdminPasswords = Config::GetSet(ini, config, \"AdminServer.Passwords\");"
    },
    {
        "line": 1114,
        "fullcodeline": "HashedAdminPasswords ="
    },
    {
        "line": 1119,
        "fullcodeline": "Config::Bind(ProxyOriginRaw, ini, config, \"Proxy.Origin\");"
    },
    {
        "line": 1120,
        "fullcodeline": "Config::Bind(ProxyPercentageRaw, ini, config, \"Proxy.Percentage\", 0);"
    },
    {
        "line": 1121,
        "fullcodeline": "Config::Bind(ProxyRetry, ini, config, \"Proxy.Retry\", 3);"
    },
    {
        "line": 1122,
        "fullcodeline": "Config::Bind(UseServeURLs, ini, config, \"Proxy.ServeURLs\");"
    },
    {
        "line": 1123,
        "fullcodeline": "Config::Bind(ServeURLs, ini, config, \"Proxy.ServeURLs\");"
    },
    {
        "line": 1124,
        "fullcodeline": "Config::Bind(UseProxyURLs, ini, config, \"Proxy.ProxyURLs\");"
    },
    {
        "line": 1125,
        "fullcodeline": "Config::Bind(ProxyURLs, ini, config, \"Proxy.ProxyURLs\");"
    },
    {
        "line": 1126,
        "fullcodeline": "Config::Bind(ProxyPatterns, ini, config, \"Proxy.ProxyPatterns\");"
    },
    {
        "line": 1130,
        "fullcodeline": "Config::Bind(HttpDefaultTimeout, ini, config, \"Http.DefaultTimeout\", 30);"
    },
    {
        "line": 1131,
        "fullcodeline": "Config::Bind(HttpSlowQueryThreshold, ini, config, \"Http.SlowQueryThreshold\","
    },
    {
        "line": 1139,
        "fullcodeline": "Config::Bind(ServerErrorMessage, ini, config, \"Debug.ServerErrorMessage\");"
    },
    {
        "line": 1140,
        "fullcodeline": "Config::Bind(RecordInput, ini, config, \"Debug.RecordInput\");"
    },
    {
        "line": 1141,
        "fullcodeline": "Config::Bind(ClearInputOnSuccess, ini, config, \"Debug.ClearInputOnSuccess\","
    },
    {
        "line": 1143,
        "fullcodeline": "Config::Bind(ProfilerOutputDir, ini, config, \"Debug.ProfilerOutputDir\","
    },
    {
        "line": 1145,
        "fullcodeline": "Config::Bind(CoreDumpEmail, ini, config, \"Debug.CoreDumpEmail\");"
    },
    {
        "line": 1146,
        "fullcodeline": "Config::Bind(CoreDumpReport, ini, config, \"Debug.CoreDumpReport\", true);"
    },
    {
        "line": 1157,
        "fullcodeline": "StackTraceFilename = stack_trace_stream.str();"
    },
    {
        "line": 1159,
        "fullcodeline": "Config::Bind(StackTraceTimeout, ini, config, \"Debug.StackTraceTimeout\", 0);"
    },
    {
        "line": 1160,
        "fullcodeline": "Config::Bind(RemoteTraceOutputDir, ini, config,"
    },
    {
        "line": 1167,
        "fullcodeline": "Config::Bind(EnableStats, ini, config, \"Stats.Enable\","
    },
    {
        "line": 1169,
        "fullcodeline": "Config::Bind(EnableAPCStats, ini, config, \"Stats.APC\", false);"
    },
    {
        "line": 1170,
        "fullcodeline": "Config::Bind(EnableWebStats, ini, config, \"Stats.Web\");"
    },
    {
        "line": 1171,
        "fullcodeline": "Config::Bind(EnableMemoryStats, ini, config, \"Stats.Memory\");"
    },
    {
        "line": 1172,
        "fullcodeline": "Config::Bind(EnableSQLStats, ini, config, \"Stats.SQL\");"
    },
    {
        "line": 1173,
        "fullcodeline": "Config::Bind(EnableSQLTableStats, ini, config, \"Stats.SQLTable\");"
    },
    {
        "line": 1174,
        "fullcodeline": "Config::Bind(EnableNetworkIOStatus, ini, config, \"Stats.NetworkIO\");"
    },
    {
        "line": 1175,
        "fullcodeline": "Config::Bind(StatsXSL, ini, config, \"Stats.XSL\");"
    },
    {
        "line": 1176,
        "fullcodeline": "Config::Bind(StatsXSLProxy, ini, config, \"Stats.XSLProxy\");"
    },
    {
        "line": 1182,
        "fullcodeline": "Config::Bind(EnableHotProfiler, ini, config, \"Stats.EnableHotProfiler\","
    },
    {
        "line": 1184,
        "fullcodeline": "Config::Bind(ProfilerTraceBuffer, ini, config, \"Stats.ProfilerTraceBuffer\","
    },
    {
        "line": 1186,
        "fullcodeline": "Config::Bind(ProfilerTraceExpansion, ini, config,"
    },
    {
        "line": 1188,
        "fullcodeline": "Config::Bind(ProfilerMaxTraceBuffer, ini, config,"
    },
    {
        "line": 1190,
        "fullcodeline": "Config::Bind(TrackPerUnitMemory, ini, config,"
    },
    {
        "line": 1194,
        "fullcodeline": "Config::Bind(ServerVariables, ini, config, \"ServerVariables\");"
    },
    {
        "line": 1195,
        "fullcodeline": "Config::Bind(EnvVariables, ini, config, \"EnvVariables\");"
    },
    {
        "line": 1199,
        "fullcodeline": "Config::Bind(SandboxMode, ini, config, \"Sandbox.SandboxMode\");"
    },
    {
        "line": 1202,
        "fullcodeline": "Config::Bind(SandboxHome, ini, config, \"Sandbox.Home\");"
    },
    {
        "line": 1203,
        "fullcodeline": "Config::Bind(SandboxFallback, ini, config, \"Sandbox.Fallback\");"
    },
    {
        "line": 1204,
        "fullcodeline": "Config::Bind(SandboxConfFile, ini, config, \"Sandbox.ConfFile\");"
    },
    {
        "line": 1205,
        "fullcodeline": "Config::Bind(SandboxFromCommonRoot, ini, config, \"Sandbox.FromCommonRoot\");"
    },
    {
        "line": 1206,
        "fullcodeline": "Config::Bind(SandboxDirectoriesRoot, ini, config,"
    },
    {
        "line": 1208,
        "fullcodeline": "Config::Bind(SandboxLogsRoot, ini, config, \"Sandbox.LogsRoot\");"
    },
    {
        "line": 1209,
        "fullcodeline": "Config::Bind(SandboxServerVariables, ini, config,"
    },
    {
        "line": 1211,
        "fullcodeline": "Config::Bind(SandboxDefaultUserFile, ini, config,"
    },
    {
        "line": 1213,
        "fullcodeline": "Config::Bind(SandboxHostAlias, ini, config, \"Sandbox.HostAlias\");"
    },
    {
        "line": 1217,
        "fullcodeline": "Config::Bind(SendmailPath, ini, config, \"Mail.SendmailPath\","
    },
    {
        "line": 1219,
        "fullcodeline": "Config::Bind(MailForceExtraParameters, ini, config,"
    },
    {
        "line": 1224,
        "fullcodeline": "Config::Bind(PregBacktraceLimit, ini, config, \"Preg.BacktraceLimit\","
    },
    {
        "line": 1226,
        "fullcodeline": "Config::Bind(PregRecursionLimit, ini, config, \"Preg.RecursionLimit\","
    },
    {
        "line": 1228,
        "fullcodeline": "Config::Bind(EnablePregErrorLog, ini, config, \"Preg.ErrorLog\", true);"
    },
    {
        "line": 1232,
        "fullcodeline": "Config::Bind(SimpleXMLEmptyNamespaceMatchesAll, ini, config,"
    },
    {
        "line": 1253,
        "fullcodeline": "Config::Bind(XenonPeriodSeconds, ini, config, \"Xenon.Period\", 0.0);"
    },
    {
        "line": 1254,
        "fullcodeline": "Config::Bind(XenonRequestFreq, ini, config, \"Xenon.RequestFreq\", 1);"
    },
    {
        "line": 1255,
        "fullcodeline": "Config::Bind(XenonForceAlwaysOn, ini, config, \"Xenon.ForceAlwaysOn\", false);"
    },
    {
        "line": 1259,
        "fullcodeline": "Config::Bind(StrobelightEnabled, ini, config, \"Strobelight.Enabled\", false);"
    },
    {
        "line": 1263,
        "fullcodeline": "Config::Bind(SetProfileNullThisObject, ini, config,"
    },
    {
        "line": 19,
        "fullcodeline": "Config::ParseIniString(istr, ini);"
    },
    {
        "line": 22,
        "fullcodeline": "Config::ParseHdfString(hstr, config);"
    },
    {
        "line": 40,
        "fullcodeline": "if (!cmd.empty() && !s_RelativeConfigs.empty()) {"
    },
    {
        "line": 41,
        "fullcodeline": "String strcmd(cmd, CopyString);"
    },
    {
        "line": 43,
        "fullcodeline": "auto const currentDir = Process::CurrentWorkingDirectory.data();"
    },
    {
        "line": 44,
        "fullcodeline": "std::vector<std::string> newConfigs;"
    },
    {
        "line": 45,
        "fullcodeline": "auto const original = s_RelativeConfigs;"
    },
    {
        "line": 87,
        "fullcodeline": "Config::ParseIniString(istr, ini);"
    },
    {
        "line": 90,
        "fullcodeline": "Config::ParseHdfString(hstr, config);"
    },
    {
        "line": 135,
        "fullcodeline": "\"hhvm.log.level\", IniSetting::SetAndGet<std::string>("
    },
    {
        "line": 163,
        "fullcodeline": "if (Config::GetBool(ini, config, \"Log.AlwaysPrintStackTraces\")) {"
    },
    {
        "line": 178,
        "fullcodeline": "config, \"Log.MaxMessagesPerRequest\", -1);"
    },
    {
        "line": 180,
        "fullcodeline": "config, \"Log.DropCacheChunkSize\", 1 << 20);"
    },
    {
        "line": 238,
        "fullcodeline": "64 * 1024 * 1024);"
    },
    {
        "line": 255,
        "fullcodeline": "if (!relConfigsError.empty()) Logger::Error(relConfigsError);"
    },
    {
        "line": 258,
        "fullcodeline": "if (Config::GetInt64(ini, config, \"ResourceLimit.CoreFileSizeOverride\")) {"
    },
    {
        "line": 355,
        "fullcodeline": "RepoLocalMode = parseRepoMode(repoLocalMode, \"Local\", RepoMode::ReadOnly);"
    },
    {
        "line": 369,
        "fullcodeline": "RepoCentralMode = parseRepoMode(repoCentralMode, \"Central\", RepoMode::ReadWrite);"
    },
    {
        "line": 401,
        "fullcodeline": "Config::Bind(HHProfEnabled, ini, config, \"HHProf.Enabled\", false);"
    },
    {
        "line": 402,
        "fullcodeline": "Config::Bind(HHProfActive, ini, config, \"HHProf.Active\", false);"
    },
    {
        "line": 403,
        "fullcodeline": "Config::Bind(HHProfAccum, ini, config, \"HHProf.Accum\", false);"
    },
    {
        "line": 404,
        "fullcodeline": "Config::Bind(HHProfRequest, ini, config, \"HHProf.Request\", false);"
    },
    {
        "line": 466,
        "fullcodeline": "if (!EvalEnableReusableTC) EvalReusableTCPadding = 0;"
    },
    {
        "line": 467,
        "fullcodeline": "if (numa_num_nodes <= 1) {"
    },
    {
        "line": 481,
        "fullcodeline": "Config::GetBool(ini, config, \"Eval.UseTLStaticArena\", true);"
    },
    {
        "line": 502,
        "fullcodeline": "url_decode(EvalProfileHWEvents.data(),"
    },
    {
        "line": 539,
        "fullcodeline": "Config::Bind(EnableHphpdDebugger, ini, config,"
    },
    {
        "line": 541,
        "fullcodeline": "Config::Bind(EnableDebuggerColor, ini, config,"
    },
    {
        "line": 543,
        "fullcodeline": "Config::Bind(EnableDebuggerPrompt, ini, config,"
    },
    {
        "line": 545,
        "fullcodeline": "Config::Bind(EnableDebuggerServer, ini, config,"
    },
    {
        "line": 547,
        "fullcodeline": "Config::Bind(EnableDebuggerUsageLog, ini, config,"
    },
    {
        "line": 549,
        "fullcodeline": "Config::Bind(DebuggerServerIP, ini, config, \"Eval.Debugger.IP\");"
    },
    {
        "line": 550,
        "fullcodeline": "Config::Bind(DebuggerServerPort, ini, config, \"Eval.Debugger.Port\", 8089);"
    },
    {
        "line": 551,
        "fullcodeline": "Config::Bind(DebuggerDisableIPv6, ini, config,"
    },
    {
        "line": 553,
        "fullcodeline": "Config::Bind(DebuggerDefaultSandboxPath, ini, config,"
    },
    {
        "line": 555,
        "fullcodeline": "Config::Bind(DebuggerStartupDocument, ini, config,"
    },
    {
        "line": 557,
        "fullcodeline": "Config::Bind(DebuggerSignalTimeout, ini, config,"
    },
    {
        "line": 559,
        "fullcodeline": "Config::Bind(DebuggerDefaultRpcPort, ini, config,"
    },
    {
        "line": 561,
        "fullcodeline": "DebuggerDefaultRpcAuth ="
    },
    {
        "line": 563,
        "fullcodeline": "Config::Bind(DebuggerRpcHostDomain, ini, config,"
    },
    {
        "line": 565,
        "fullcodeline": "Config::Bind(DebuggerDefaultRpcTimeout, ini, config,"
    },
    {
        "line": 567,
        "fullcodeline": "Config::Bind(DebuggerAuthTokenScriptBin, ini, config,"
    },
    {
        "line": 569,
        "fullcodeline": "Config::Bind(DebuggerSessionAuthScriptBin, ini, config,"
    },
    {
        "line": 976,
        "fullcodeline": "Config::Bind(UploadTmpDir, ini, config, \"Server.Upload.UploadTmpDir\","
    },
    {
        "line": 978,
        "fullcodeline": "Config::Bind(EnableFileUploads, ini, config,"
    },
    {
        "line": 980,
        "fullcodeline": "Config::Bind(MaxFileUploads, ini, config, \"Server.Upload.MaxFileUploads\","
    },
    {
        "line": 982,
        "fullcodeline": "Config::Bind(EnableUploadProgress, ini, config,"
    },
    {
        "line": 987,
        "fullcodeline": "Config::Bind(Rfc1867Prefix, ini, config, \"Server.Upload.Rfc1867Prefix\","
    },
    {
        "line": 989,
        "fullcodeline": "Config::Bind(Rfc1867Name, ini, config, \"Server.Upload.Rfc1867Name\","
    },
    {
        "line": 1077,
        "fullcodeline": "hphp_string_imap<std::string> staticFileDefault;"
    },
    {
        "line": 1317,
        "fullcodeline": "IniSetting::SetAndGet<int64_t>("
    },
    {
        "line": 1376,
        "fullcodeline": "IniSetting::SetAndGet<uint64_t>("
    },
    {
        "line": 27,
        "fullcodeline": "if (messages) *messages = std::move(m);"
    },
    {
        "line": 99,
        "fullcodeline": "if (!deploymentIdOverride.empty()) {"
    },
    {
        "line": 131,
        "fullcodeline": "if (!str.empty()) {"
    },
    {
        "line": 259,
        "fullcodeline": "setResourceLimit(RLIMIT_CORE, ini,  config,"
    },
    {
        "line": 360,
        "fullcodeline": "const char* HHVM_REPO_LOCAL_PATH = getenv(\"HHVM_REPO_LOCAL_PATH\");"
    },
    {
        "line": 448,
        "fullcodeline": "(isJitSerializing() ||"
    },
    {
        "line": 465,
        "fullcodeline": "if (EvalJitSerdesModeForceOff) EvalJitSerdesMode = JitSerdesMode::Off;"
    },
    {
        "line": 468,
        "fullcodeline": "EvalEnableNuma = false;"
    },
    {
        "line": 475,
        "fullcodeline": "if (!ServerForkEnabled && ServerExecutionMode()) {"
    },
    {
        "line": 489,
        "fullcodeline": "EvalJitWorkerThreads = 0;"
    },
    {
        "line": 64,
        "fullcodeline": "if (!newConfigs.empty()) {"
    },
    {
        "line": 65,
        "fullcodeline": "auto m2 = getTierOverwrites(ini, config);"
    },
    {
        "line": 136,
        "fullcodeline": "setLogLevel,"
    },
    {
        "line": 161,
        "fullcodeline": "ErrorLogFileData(LogFile, LogFileSymLink, LogFilePeriodMultiplier);"
    },
    {
        "line": 164,
        "fullcodeline": "Logger::SetTheLogger(Logger::DEFAULT, new ExtendedLogger());"
    },
    {
        "line": 262,
        "fullcodeline": "setResourceLimit(RLIMIT_CORE, ini, config, \"ResourceLimit.CoreFileSize\");"
    },
    {
        "line": 361,
        "fullcodeline": "if (HHVM_REPO_LOCAL_PATH != nullptr) {"
    },
    {
        "line": 449,
        "fullcodeline": "(EvalJitSerdesMode == JitSerdesMode::DeserializeOrGenerate));"
    },
    {
        "line": 490,
        "fullcodeline": "if (EvalJitSerdesMode != JitSerdesMode::Off) {"
    },
    {
        "line": 503,
        "fullcodeline": "EvalProfileHWEvents.size()).toCppString(),"
    },
    {
        "line": 47,
        "fullcodeline": "if (str.empty()) continue;"
    },
    {
        "line": 50,
        "fullcodeline": "auto const found = FileUtil::runRelative("
    },
    {
        "line": 67,
        "fullcodeline": "if (s_RelativeConfigs != original) {"
    },
    {
        "line": 62,
        "fullcodeline": "if (found) newConfigs.emplace_back(std::move(fullpath));"
    },
    {
        "line": 68,
        "fullcodeline": "relConfigsError = folly::sformat("
    },
    {
        "line": 66,
        "fullcodeline": "if (messages) *messages = std::move(m2);"
    },
    {
        "line": 71,
        "fullcodeline": "folly::join(\", \", original),"
    },
    {
        "line": 72,
        "fullcodeline": "folly::join(\", \", s_RelativeConfigs)"
    }
]