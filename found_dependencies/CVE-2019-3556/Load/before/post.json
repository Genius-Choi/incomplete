[
    {
        "line": 7,
        "fullcodeline": "ARRPROV_USE_RUNTIME_LOCATION_FORCE();"
    },
    {
        "line": 11,
        "fullcodeline": "tl_heap.getCheck();"
    },
    {
        "line": 26,
        "fullcodeline": "auto m = getTierOverwrites(ini, config);"
    },
    {
        "line": 39,
        "fullcodeline": "Config::Bind(s_RelativeConfigs, ini, config, \"RelativeConfigs\");"
    },
    {
        "line": 93,
        "fullcodeline": "Config::Bind(PidFile, ini, config, \"PidFile\", \"www.pid\");"
    },
    {
        "line": 94,
        "fullcodeline": "Config::Bind(DeploymentId, ini, config, \"DeploymentId\");"
    },
    {
        "line": 40,
        "fullcodeline": "if (!cmd.empty() && !s_RelativeConfigs.empty()) {"
    },
    {
        "line": 98,
        "fullcodeline": "Config::Bind(deploymentIdOverride, ini, config, \"DeploymentIdOverride\");"
    },
    {
        "line": 106,
        "fullcodeline": "Config::Bind(ConfigId, ini, config, \"ConfigId\", 0);"
    },
    {
        "line": 107,
        "fullcodeline": "auto configIdCounter = ServiceData::createCounter(\"vm.config.id\");"
    },
    {
        "line": 108,
        "fullcodeline": "configIdCounter->setValue(ConfigId);"
    },
    {
        "line": 113,
        "fullcodeline": "auto setLogLevel = [](const std::string& value) {"
    },
    {
        "line": 130,
        "fullcodeline": "auto str = Config::GetString(ini, config, \"Log.Level\");"
    },
    {
        "line": 134,
        "fullcodeline": "IniSetting::Bind(IniSetting::CORE, IniSetting::PHP_INI_SYSTEM,"
    },
    {
        "line": 154,
        "fullcodeline": "Config::Bind(Logger::UseLogFile, ini, config, \"Log.UseLogFile\", true);"
    },
    {
        "line": 155,
        "fullcodeline": "Config::Bind(LogFile, ini, config, \"Log.File\");"
    },
    {
        "line": 156,
        "fullcodeline": "Config::Bind(LogFileSymLink, ini, config, \"Log.SymLink\");"
    },
    {
        "line": 157,
        "fullcodeline": "Config::Bind(LogFilePeriodMultiplier, ini,"
    },
    {
        "line": 168,
        "fullcodeline": "Config::Bind(Logger::LogHeader, ini, config, \"Log.Header\");"
    },
    {
        "line": 169,
        "fullcodeline": "Config::Bind(Logger::LogNativeStackTrace, ini, config,"
    },
    {
        "line": 171,
        "fullcodeline": "Config::Bind(Logger::UseSyslog, ini, config, \"Log.UseSyslog\", false);"
    },
    {
        "line": 172,
        "fullcodeline": "Config::Bind(Logger::UseRequestLog, ini, config, \"Log.UseRequestLog\","
    },
    {
        "line": 174,
        "fullcodeline": "Config::Bind(Logger::AlwaysEscapeLog, ini, config, \"Log.AlwaysEscapeLog\","
    },
    {
        "line": 176,
        "fullcodeline": "Config::Bind(Logger::UseCronolog, ini, config, \"Log.UseCronolog\", false);"
    },
    {
        "line": 177,
        "fullcodeline": "Config::Bind(Logger::MaxMessagesPerRequest, ini,"
    },
    {
        "line": 179,
        "fullcodeline": "Config::Bind(LogFileFlusher::DropCacheChunkSize, ini,"
    },
    {
        "line": 181,
        "fullcodeline": "Config::Bind(RuntimeOption::LogHeaderMangle, ini, config,"
    },
    {
        "line": 183,
        "fullcodeline": "Config::Bind(AlwaysLogUnhandledExceptions, ini,"
    },
    {
        "line": 186,
        "fullcodeline": "Config::Bind(NoSilencer, ini, config, \"Log.NoSilencer\");"
    },
    {
        "line": 187,
        "fullcodeline": "Config::Bind(RuntimeErrorReportingLevel, ini,"
    },
    {
        "line": 190,
        "fullcodeline": "Config::Bind(ForceErrorReportingLevel, ini,"
    },
    {
        "line": 192,
        "fullcodeline": "Config::Bind(AccessLogDefaultFormat, ini, config,"
    },
    {
        "line": 195,
        "fullcodeline": "auto parseLogs = [] (const Hdf &config, const IniSetting::Map& ini,"
    },
    {
        "line": 222,
        "fullcodeline": "parseLogs(config, ini, \"Log.Access\", AccessLogs);"
    },
    {
        "line": 223,
        "fullcodeline": "RPCLogs = AccessLogs;"
    },
    {
        "line": 224,
        "fullcodeline": "parseLogs(config, ini, \"Log.RPC\", RPCLogs);"
    },
    {
        "line": 226,
        "fullcodeline": "Config::Bind(AdminLogFormat, ini, config, \"Log.AdminLog.Format\","
    },
    {
        "line": 228,
        "fullcodeline": "Config::Bind(AdminLogFile, ini, config, \"Log.AdminLog.File\");"
    },
    {
        "line": 229,
        "fullcodeline": "Config::Bind(AdminLogSymLink, ini, config, \"Log.AdminLog.SymLink\");"
    },
    {
        "line": 234,
        "fullcodeline": "Config::Bind(ErrorUpgradeLevel, ini, config, \"ErrorHandling.UpgradeLevel\","
    },
    {
        "line": 236,
        "fullcodeline": "Config::Bind(MaxSerializedStringSize, ini,"
    },
    {
        "line": 239,
        "fullcodeline": "Config::Bind(CallUserHandlerOnFatals, ini,"
    },
    {
        "line": 241,
        "fullcodeline": "Config::Bind(ThrowExceptionOnBadMethodCall, ini,"
    },
    {
        "line": 243,
        "fullcodeline": "Config::Bind(LogNativeStackOnOOM, ini,"
    },
    {
        "line": 245,
        "fullcodeline": "Config::Bind(NoInfiniteRecursionDetection, ini,"
    },
    {
        "line": 247,
        "fullcodeline": "Config::Bind(NoticeFrequency, ini, config, \"ErrorHandling.NoticeFrequency\","
    },
    {
        "line": 249,
        "fullcodeline": "Config::Bind(WarningFrequency, ini, config,"
    },
    {
        "line": 255,
        "fullcodeline": "if (!relConfigsError.empty()) Logger::Error(relConfigsError);"
    },
    {
        "line": 264,
        "fullcodeline": "setResourceLimit(RLIMIT_NOFILE, ini, config, \"ResourceLimit.MaxSocket\");"
    },
    {
        "line": 265,
        "fullcodeline": "setResourceLimit(RLIMIT_DATA, ini, config, \"ResourceLimit.RSS\");"
    },
    {
        "line": 269,
        "fullcodeline": "static int64_t s_core_file_size_override, s_core_file_size, s_rss = 0;"
    },
    {
        "line": 270,
        "fullcodeline": "static int32_t s_max_socket = 0;"
    },
    {
        "line": 271,
        "fullcodeline": "Config::Bind(s_core_file_size_override, ini, config,"
    },
    {
        "line": 273,
        "fullcodeline": "Config::Bind(s_core_file_size, ini, config, \"ResourceLimit.CoreFileSize\","
    },
    {
        "line": 275,
        "fullcodeline": "Config::Bind(s_max_socket, ini, config, \"ResourceLimit.MaxSocket\", 0);"
    },
    {
        "line": 276,
        "fullcodeline": "Config::Bind(s_rss, ini, config, \"ResourceLimit.RSS\", 0);"
    },
    {
        "line": 278,
        "fullcodeline": "Config::Bind(SocketDefaultTimeout, ini, config,"
    },
    {
        "line": 280,
        "fullcodeline": "Config::Bind(MaxSQLRowCount, ini, config, \"ResourceLimit.MaxSQLRowCount\","
    },
    {
        "line": 282,
        "fullcodeline": "Config::Bind(SerializationSizeLimit, ini, config,"
    },
    {
        "line": 284,
        "fullcodeline": "Config::Bind(HeapSizeMB, ini, config, \"ResourceLimit.HeapSizeMB\","
    },
    {
        "line": 286,
        "fullcodeline": "Config::Bind(HeapResetCountBase, ini, config,"
    },
    {
        "line": 288,
        "fullcodeline": "Config::Bind(HeapResetCountMultiple, ini, config,"
    },
    {
        "line": 291,
        "fullcodeline": "Config::Bind(HeapLowWaterMark , ini, config,"
    },
    {
        "line": 293,
        "fullcodeline": "Config::Bind(HeapHighWaterMark , ini, config,"
    },
    {
        "line": 298,
        "fullcodeline": "Config::Bind(DisableCallUserFunc, ini, config,"
    },
    {
        "line": 301,
        "fullcodeline": "Config::Bind(DisableCallUserFuncArray, ini, config,"
    },
    {
        "line": 304,
        "fullcodeline": "Config::Bind(DisableAssert, ini, config,"
    },
    {
        "line": 307,
        "fullcodeline": "Config::Bind(DisableNontoplevelDeclarations, ini, config,"
    },
    {
        "line": 310,
        "fullcodeline": "Config::Bind(DisableStaticClosures, ini, config,"
    },
    {
        "line": 313,
        "fullcodeline": "Config::Bind(DisableConstant, ini, config,"
    },
    {
        "line": 319,
        "fullcodeline": "auto repoModeToStr = [](RepoMode mode) {"
    },
    {
        "line": 333,
        "fullcodeline": "auto parseRepoMode = [&](const std::string& repoModeStr, const char* type, RepoMode defaultMode) {"
    },
    {
        "line": 354,
        "fullcodeline": "Config::Bind(repoLocalMode, ini, config, \"Repo.Local.Mode\", repoModeToStr(RepoLocalMode));"
    },
    {
        "line": 355,
        "fullcodeline": "RepoLocalMode = parseRepoMode(repoLocalMode, \"Local\", RepoMode::ReadOnly);"
    },
    {
        "line": 358,
        "fullcodeline": "Config::Bind(RepoLocalPath, ini, config, \"Repo.Local.Path\");"
    },
    {
        "line": 368,
        "fullcodeline": "Config::Bind(repoCentralMode, ini, config, \"Repo.Central.Mode\", repoModeToStr(RepoCentralMode));"
    },
    {
        "line": 369,
        "fullcodeline": "RepoCentralMode = parseRepoMode(repoCentralMode, \"Central\", RepoMode::ReadWrite);"
    },
    {
        "line": 372,
        "fullcodeline": "Config::Bind(RepoCentralPath, ini, config, \"Repo.Central.Path\");"
    },
    {
        "line": 373,
        "fullcodeline": "Config::Bind(RepoCentralFileMode, ini, config, \"Repo.Central.FileMode\");"
    },
    {
        "line": 374,
        "fullcodeline": "Config::Bind(RepoCentralFileUser, ini, config, \"Repo.Central.FileUser\");"
    },
    {
        "line": 375,
        "fullcodeline": "Config::Bind(RepoCentralFileGroup, ini, config, \"Repo.Central.FileGroup\");"
    },
    {
        "line": 377,
        "fullcodeline": "Config::Bind(RepoAllowFallbackPath, ini, config, \"Repo.AllowFallbackPath\","
    },
    {
        "line": 383,
        "fullcodeline": "Config::Bind(RepoJournal, ini, config, \"Repo.Journal\", RepoJournal);"
    },
    {
        "line": 384,
        "fullcodeline": "Config::Bind(RepoCommit, ini, config, \"Repo.Commit\","
    },
    {
        "line": 386,
        "fullcodeline": "Config::Bind(RepoDebugInfo, ini, config, \"Repo.DebugInfo\", RepoDebugInfo);"
    },
    {
        "line": 387,
        "fullcodeline": "Config::Bind(RepoLitstrLazyLoad, ini, config, \"Repo.LitstrLazyLoad\","
    },
    {
        "line": 389,
        "fullcodeline": "Config::Bind(RepoAuthoritative, ini, config, \"Repo.Authoritative\","
    },
    {
        "line": 391,
        "fullcodeline": "Config::Bind(RepoLocalReadaheadRate, ini, config,"
    },
    {
        "line": 393,
        "fullcodeline": "Config::Bind(RepoLocalReadaheadConcurrent, ini, config,"
    },
    {
        "line": 395,
        "fullcodeline": "Config::Bind(RepoBusyTimeoutMS, ini, config,"
    },
    {
        "line": 408,
        "fullcodeline": "Config::Bind(EnableHipHopSyntax, ini, config, \"Eval.EnableHipHopSyntax\","
    },
    {
        "line": 410,
        "fullcodeline": "Config::Bind(EnableShortTags, ini, config, \"Eval.EnableShortTags\", true);"
    },
    {
        "line": 411,
        "fullcodeline": "Config::Bind(EnableXHP, ini, config, \"Eval.EnableXHP\", EnableXHP);"
    },
    {
        "line": 412,
        "fullcodeline": "Config::Bind(TimeoutsUseWallTime, ini, config, \"Eval.TimeoutsUseWallTime\","
    },
    {
        "line": 414,
        "fullcodeline": "Config::Bind(CheckFlushOnUserClose, ini, config,"
    },
    {
        "line": 416,
        "fullcodeline": "Config::Bind(EvalInitialNamedEntityTableSize, ini, config,"
    },
    {
        "line": 419,
        "fullcodeline": "Config::Bind(EvalInitialStaticStringTableSize, ini, config,"
    },
    {
        "line": 424,
        "fullcodeline": "Config::Bind(jitSerdesMode, ini, config, \"Eval.JitSerdesMode\", \"Off\");"
    },
    {
        "line": 426,
        "fullcodeline": "EvalJitSerdesMode = [&] {"
    },
    {
        "line": 438,
        "fullcodeline": "Config::Bind(EvalJitSerdesFile, ini, config,"
    },
    {
        "line": 447,
        "fullcodeline": "auto const couldDump = !EvalJitSerdesFile.empty() &&"
    },
    {
        "line": 450,
        "fullcodeline": "Config::Bind(DumpPreciseProfData, ini, config,"
    },
    {
        "line": 452,
        "fullcodeline": "Config::Bind(ProfDataTTLHours, ini, config,"
    },
    {
        "line": 454,
        "fullcodeline": "Config::Bind(ProfDataTag, ini, config, \"Eval.ProfDataTag\", ProfDataTag);"
    },
    {
        "line": 456,
        "fullcodeline": "Config::Bind(CheckSymLink, ini, config, \"Eval.CheckSymLink\", true);"
    },
    {
        "line": 457,
        "fullcodeline": "Config::Bind(TrustAutoloaderPath, ini, config,"
    },
    {
        "line": 462,
        "fullcodeline": "EVALFLAGS()"
    },
    {
        "line": 471,
        "fullcodeline": "Config::Bind(ServerForkEnabled, ini, config,"
    },
    {
        "line": 473,
        "fullcodeline": "Config::Bind(ServerForkLogging, ini, config,"
    },
    {
        "line": 480,
        "fullcodeline": "s_enable_static_arena ="
    },
    {
        "line": 500,
        "fullcodeline": "EvalJitPGOUseAddrCountedCheck &= addr_encodes_persistency;"
    },
    {
        "line": 501,
        "fullcodeline": "HardwareCounter::Init(EvalProfileHWEnable,"
    },
    {
        "line": 509,
        "fullcodeline": "Config::Bind(EnableIntrinsicsExtension, ini,"
    },
    {
        "line": 512,
        "fullcodeline": "Config::Bind(RecordCodeCoverage, ini, config, \"Eval.RecordCodeCoverage\");"
    },
    {
        "line": 19,
        "fullcodeline": "Config::ParseIniString(istr, ini);"
    },
    {
        "line": 22,
        "fullcodeline": "Config::ParseHdfString(hstr, config);"
    },
    {
        "line": 27,
        "fullcodeline": "if (messages) *messages = std::move(m);"
    },
    {
        "line": 41,
        "fullcodeline": "String strcmd(cmd, CopyString);"
    },
    {
        "line": 42,
        "fullcodeline": "Process::InitProcessStatics();"
    },
    {
        "line": 43,
        "fullcodeline": "auto const currentDir = Process::CurrentWorkingDirectory.data();"
    },
    {
        "line": 44,
        "fullcodeline": "std::vector<std::string> newConfigs;"
    },
    {
        "line": 45,
        "fullcodeline": "auto const original = s_RelativeConfigs;"
    },
    {
        "line": 76,
        "fullcodeline": "s_RelativeConfigs.swap(newConfigs);"
    },
    {
        "line": 87,
        "fullcodeline": "Config::ParseIniString(istr, ini);"
    },
    {
        "line": 90,
        "fullcodeline": "Config::ParseHdfString(hstr, config);"
    },
    {
        "line": 99,
        "fullcodeline": "if (!deploymentIdOverride.empty()) {"
    },
    {
        "line": 131,
        "fullcodeline": "if (!str.empty()) {"
    },
    {
        "line": 135,
        "fullcodeline": "\"hhvm.log.level\", IniSetting::SetAndGet<std::string>("
    },
    {
        "line": 159,
        "fullcodeline": "if (Logger::UseLogFile && RuntimeOption::ServerExecutionMode()) {"
    },
    {
        "line": 163,
        "fullcodeline": "if (Config::GetBool(ini, config, \"Log.AlwaysPrintStackTraces\")) {"
    },
    {
        "line": 178,
        "fullcodeline": "config, \"Log.MaxMessagesPerRequest\", -1);"
    },
    {
        "line": 180,
        "fullcodeline": "config, \"Log.DropCacheChunkSize\", 1 << 20);"
    },
    {
        "line": 238,
        "fullcodeline": "64 * 1024 * 1024);"
    },
    {
        "line": 258,
        "fullcodeline": "if (Config::GetInt64(ini, config, \"ResourceLimit.CoreFileSizeOverride\")) {"
    },
    {
        "line": 359,
        "fullcodeline": "if (RepoLocalPath.empty()) {"
    },
    {
        "line": 401,
        "fullcodeline": "Config::Bind(HHProfEnabled, ini, config, \"HHProf.Enabled\", false);"
    },
    {
        "line": 402,
        "fullcodeline": "Config::Bind(HHProfActive, ini, config, \"HHProf.Active\", false);"
    },
    {
        "line": 403,
        "fullcodeline": "Config::Bind(HHProfAccum, ini, config, \"HHProf.Accum\", false);"
    },
    {
        "line": 404,
        "fullcodeline": "Config::Bind(HHProfRequest, ini, config, \"HHProf.Request\", false);"
    },
    {
        "line": 466,
        "fullcodeline": "if (!EvalEnableReusableTC) EvalReusableTCPadding = 0;"
    },
    {
        "line": 467,
        "fullcodeline": "if (numa_num_nodes <= 1) {"
    },
    {
        "line": 475,
        "fullcodeline": "if (!ServerForkEnabled && ServerExecutionMode()) {"
    },
    {
        "line": 481,
        "fullcodeline": "Config::GetBool(ini, config, \"Eval.UseTLStaticArena\", true);"
    },
    {
        "line": 488,
        "fullcodeline": "if (!jit::mcgen::retranslateAllEnabled()) {"
    },
    {
        "line": 502,
        "fullcodeline": "url_decode(EvalProfileHWEvents.data(),"
    },
    {
        "line": 64,
        "fullcodeline": "if (!newConfigs.empty()) {"
    },
    {
        "line": 78,
        "fullcodeline": "s_RelativeConfigs.clear();"
    },
    {
        "line": 100,
        "fullcodeline": "RuntimeOption::DeploymentId = deploymentIdOverride;"
    },
    {
        "line": 132,
        "fullcodeline": "setLogLevel(str);"
    },
    {
        "line": 160,
        "fullcodeline": "RuntimeOption::ErrorLogs[Logger::DEFAULT] ="
    },
    {
        "line": 164,
        "fullcodeline": "Logger::SetTheLogger(Logger::DEFAULT, new ExtendedLogger());"
    },
    {
        "line": 165,
        "fullcodeline": "ExtendedLogger::EnabledByDefault = true;"
    },
    {
        "line": 259,
        "fullcodeline": "setResourceLimit(RLIMIT_CORE, ini,  config,"
    },
    {
        "line": 360,
        "fullcodeline": "const char* HHVM_REPO_LOCAL_PATH = getenv(\"HHVM_REPO_LOCAL_PATH\");"
    },
    {
        "line": 448,
        "fullcodeline": "(isJitSerializing() ||"
    },
    {
        "line": 468,
        "fullcodeline": "EvalEnableNuma = false;"
    },
    {
        "line": 489,
        "fullcodeline": "EvalJitWorkerThreads = 0;"
    },
    {
        "line": 497,
        "fullcodeline": "EvalJitSerdesFile.clear();"
    },
    {
        "line": 498,
        "fullcodeline": "DumpPreciseProfData = false;"
    },
    {
        "line": 50,
        "fullcodeline": "auto const found = FileUtil::runRelative("
    },
    {
        "line": 65,
        "fullcodeline": "auto m2 = getTierOverwrites(ini, config);"
    },
    {
        "line": 136,
        "fullcodeline": "setLogLevel,"
    },
    {
        "line": 161,
        "fullcodeline": "ErrorLogFileData(LogFile, LogFileSymLink, LogFilePeriodMultiplier);"
    },
    {
        "line": 262,
        "fullcodeline": "setResourceLimit(RLIMIT_CORE, ini, config, \"ResourceLimit.CoreFileSize\");"
    },
    {
        "line": 361,
        "fullcodeline": "if (HHVM_REPO_LOCAL_PATH != nullptr) {"
    },
    {
        "line": 449,
        "fullcodeline": "(EvalJitSerdesMode == JitSerdesMode::DeserializeOrGenerate));"
    },
    {
        "line": 490,
        "fullcodeline": "if (EvalJitSerdesMode != JitSerdesMode::Off) {"
    },
    {
        "line": 503,
        "fullcodeline": "EvalProfileHWEvents.size()).toCppString(),"
    },
    {
        "line": 47,
        "fullcodeline": "if (str.empty()) continue;"
    },
    {
        "line": 67,
        "fullcodeline": "if (s_RelativeConfigs != original) {"
    },
    {
        "line": 362,
        "fullcodeline": "RepoLocalPath = HHVM_REPO_LOCAL_PATH;"
    },
    {
        "line": 495,
        "fullcodeline": "EvalJitSerdesMode = JitSerdesMode::Off;"
    },
    {
        "line": 62,
        "fullcodeline": "if (found) newConfigs.emplace_back(std::move(fullpath));"
    },
    {
        "line": 66,
        "fullcodeline": "if (messages) *messages = std::move(m2);"
    },
    {
        "line": 68,
        "fullcodeline": "relConfigsError = folly::sformat("
    },
    {
        "line": 492,
        "fullcodeline": "Logger::Warning(\"Eval.JitSerdesMode reset from \" + jitSerdesMode +"
    },
    {
        "line": 71,
        "fullcodeline": "folly::join(\", \", original),"
    },
    {
        "line": 72,
        "fullcodeline": "folly::join(\", \", s_RelativeConfigs)"
    }
]