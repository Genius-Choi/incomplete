[
    {
        "line": 2,
        "fullcodeline": "if(fDecimalStr == NULL) {"
    },
    {
        "line": 16,
        "fullcodeline": "fDecimalStr = new CharString();"
    },
    {
        "line": 3,
        "fullcodeline": "if (fDecimalQuantity == NULL) {"
    },
    {
        "line": 17,
        "fullcodeline": "if (fDecimalStr == NULL) {"
    },
    {
        "line": 24,
        "fullcodeline": "if (fDecimalQuantity->isZero()) {"
    },
    {
        "line": 9,
        "fullcodeline": "LocalPointer<DecimalQuantity> dq(new DecimalQuantity(), status);"
    },
    {
        "line": 11,
        "fullcodeline": "populateDecimalQuantity(*dq, status);"
    },
    {
        "line": 13,
        "fullcodeline": "fDecimalQuantity = dq.orphan();"
    },
    {
        "line": 18,
        "fullcodeline": "status = U_MEMORY_ALLOCATION_ERROR;"
    },
    {
        "line": 25,
        "fullcodeline": "fDecimalStr->append(\"0\", -1, status);"
    },
    {
        "line": 10,
        "fullcodeline": "if (U_FAILURE(status)) { return nullptr; }"
    },
    {
        "line": 12,
        "fullcodeline": "if (U_FAILURE(status)) { return nullptr; }"
    },
    {
        "line": 26,
        "fullcodeline": "} else if (std::abs(fDecimalQuantity->getMagnitude()) < 5) {"
    },
    {
        "line": 27,
        "fullcodeline": "fDecimalStr->appendInvariantChars(fDecimalQuantity->toPlainString(), status);"
    },
    {
        "line": 29,
        "fullcodeline": "fDecimalStr->appendInvariantChars(fDecimalQuantity->toScientificString(), status);"
    }
]