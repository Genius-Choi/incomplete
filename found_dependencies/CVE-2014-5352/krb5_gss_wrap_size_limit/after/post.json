[
    {
        "line": 21,
        "fullcodeline": "ctx = (krb5_gss_ctx_id_rec *) context_handle;"
    },
    {
        "line": 83,
        "fullcodeline": "overhead = 7 + ctx->mech_used->length;"
    },
    {
        "line": 84,
        "fullcodeline": "data_size = req_output_size;"
    },
    {
        "line": 85,
        "fullcodeline": "conflen = kg_confounder_size(ctx->k5_context, ctx->enc->keyblock.enctype);"
    },
    {
        "line": 86,
        "fullcodeline": "data_size = (conflen + data_size + 8) & (~(OM_uint32)7);"
    },
    {
        "line": 87,
        "fullcodeline": "ohlen = g_token_size(ctx->mech_used,"
    },
    {
        "line": 100,
        "fullcodeline": "*minor_status = 0;"
    },
    {
        "line": 16,
        "fullcodeline": "if (qop_req != GSS_C_QOP_DEFAULT) {"
    },
    {
        "line": 22,
        "fullcodeline": "if (ctx->terminated || !ctx->established) {"
    },
    {
        "line": 27,
        "fullcodeline": "if (ctx->proto == 1) {"
    },
    {
        "line": 91,
        "fullcodeline": "if (ohlen+overhead < req_output_size)"
    },
    {
        "line": 17,
        "fullcodeline": "*minor_status = (OM_uint32) G_UNKNOWN_QOP;"
    },
    {
        "line": 23,
        "fullcodeline": "*minor_status = KG_CTX_INCOMPLETE;"
    },
    {
        "line": 30,
        "fullcodeline": "OM_uint32 sz = req_output_size;"
    },
    {
        "line": 77,
        "fullcodeline": "*max_input_size = sz;"
    },
    {
        "line": 78,
        "fullcodeline": "*minor_status = 0;"
    },
    {
        "line": 96,
        "fullcodeline": "*max_input_size = (req_output_size - ohlen - overhead) & (~(OM_uint32)7);"
    },
    {
        "line": 88,
        "fullcodeline": "(unsigned int) (data_size + ctx->cksum_size + 14))"
    },
    {
        "line": 98,
        "fullcodeline": "*max_input_size = 0;"
    },
    {
        "line": 37,
        "fullcodeline": "key = ctx->have_acceptor_subkey ? ctx->acceptor_subkey"
    },
    {
        "line": 41,
        "fullcodeline": "while (sz > 0 && krb5_encrypt_size(sz, enctype) + 16 > req_output_size)"
    },
    {
        "line": 42,
        "fullcodeline": "sz--;"
    },
    {
        "line": 44,
        "fullcodeline": "if (sz > 16)"
    },
    {
        "line": 61,
        "fullcodeline": "cksumtype = ctx->have_acceptor_subkey ? ctx->acceptor_subkey_cksumtype"
    },
    {
        "line": 64,
        "fullcodeline": "err = krb5_c_checksum_length(ctx->k5_context, cksumtype, &cksumsize);"
    },
    {
        "line": 45,
        "fullcodeline": "sz -= 16;"
    },
    {
        "line": 71,
        "fullcodeline": "if (sz < 16 + cksumsize)"
    },
    {
        "line": 47,
        "fullcodeline": "sz = 0;"
    },
    {
        "line": 66,
        "fullcodeline": "*minor_status = err;"
    },
    {
        "line": 72,
        "fullcodeline": "sz = 0;"
    },
    {
        "line": 74,
        "fullcodeline": "sz -= (16 + cksumsize);"
    }
]