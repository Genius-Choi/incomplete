[
    {
        "line": 9,
        "fullcodeline": "krb5_key key = NULL;"
    },
    {
        "line": 17,
        "fullcodeline": "prf_out->length = 0;"
    },
    {
        "line": 18,
        "fullcodeline": "prf_out->value = NULL;"
    },
    {
        "line": 20,
        "fullcodeline": "t.length = 0;"
    },
    {
        "line": 21,
        "fullcodeline": "t.data = NULL;"
    },
    {
        "line": 23,
        "fullcodeline": "ns.length = 0;"
    },
    {
        "line": 24,
        "fullcodeline": "ns.data = NULL;"
    },
    {
        "line": 26,
        "fullcodeline": "ctx = (krb5_gss_ctx_id_t)context;"
    },
    {
        "line": 55,
        "fullcodeline": "prf_out->value = k5alloc(desired_output_len, &code);"
    },
    {
        "line": 60,
        "fullcodeline": "prf_out->length = desired_output_len;"
    },
    {
        "line": 62,
        "fullcodeline": "code = krb5_c_prf_length(ctx->k5_context,"
    },
    {
        "line": 68,
        "fullcodeline": "ns.length = 4 + prf_in->length;"
    },
    {
        "line": 69,
        "fullcodeline": "ns.data = k5alloc(ns.length, &code);"
    },
    {
        "line": 75,
        "fullcodeline": "t.length = prflen;"
    },
    {
        "line": 76,
        "fullcodeline": "t.data = k5alloc(t.length, &code);"
    },
    {
        "line": 80,
        "fullcodeline": "memcpy(ns.data + 4, prf_in->value, prf_in->length);"
    },
    {
        "line": 81,
        "fullcodeline": "i = 0;"
    },
    {
        "line": 82,
        "fullcodeline": "p = (unsigned char *)prf_out->value;"
    },
    {
        "line": 100,
        "fullcodeline": "krb5_free_data_contents(ctx->k5_context, &ns);"
    },
    {
        "line": 101,
        "fullcodeline": "krb5_free_data_contents(ctx->k5_context, &t);"
    },
    {
        "line": 103,
        "fullcodeline": "*minor_status = (OM_uint32)code;"
    },
    {
        "line": 27,
        "fullcodeline": "if (ctx->terminated || !ctx->established) {"
    },
    {
        "line": 47,
        "fullcodeline": "if (key == NULL) {"
    },
    {
        "line": 52,
        "fullcodeline": "if (desired_output_len == 0)"
    },
    {
        "line": 56,
        "fullcodeline": "if (prf_out->value == NULL) {"
    },
    {
        "line": 65,
        "fullcodeline": "if (code != 0)"
    },
    {
        "line": 70,
        "fullcodeline": "if (ns.data == NULL) {"
    },
    {
        "line": 77,
        "fullcodeline": "if (t.data == NULL)"
    },
    {
        "line": 83,
        "fullcodeline": "while (desired_output_len > 0) {"
    },
    {
        "line": 98,
        "fullcodeline": "if (code != 0)"
    },
    {
        "line": 104,
        "fullcodeline": "return (code == 0) ? GSS_S_COMPLETE : GSS_S_FAILURE;"
    },
    {
        "line": 28,
        "fullcodeline": "*minor_status = KG_CTX_INCOMPLETE;"
    },
    {
        "line": 40,
        "fullcodeline": "key = ctx->subkey;"
    },
    {
        "line": 43,
        "fullcodeline": "code = EINVAL;"
    },
    {
        "line": 48,
        "fullcodeline": "code = EINVAL;"
    },
    {
        "line": 57,
        "fullcodeline": "code = KG_INPUT_TOO_LONG;"
    },
    {
        "line": 63,
        "fullcodeline": "krb5_k_key_enctype(ctx->k5_context, key),"
    },
    {
        "line": 71,
        "fullcodeline": "code = KG_INPUT_TOO_LONG;"
    },
    {
        "line": 84,
        "fullcodeline": "store_32_be(i, ns.data);"
    },
    {
        "line": 86,
        "fullcodeline": "code = krb5_k_prf(ctx->k5_context, key, &ns, &t);"
    },
    {
        "line": 90,
        "fullcodeline": "memcpy(p, t.data, MIN(t.length, desired_output_len));"
    },
    {
        "line": 92,
        "fullcodeline": "p += t.length;"
    },
    {
        "line": 93,
        "fullcodeline": "desired_output_len -= t.length;"
    },
    {
        "line": 94,
        "fullcodeline": "i++;"
    },
    {
        "line": 99,
        "fullcodeline": "gss_release_buffer(&minor, prf_out);"
    },
    {
        "line": 87,
        "fullcodeline": "if (code != 0)"
    },
    {
        "line": 35,
        "fullcodeline": "key = ctx->acceptor_subkey;"
    }
]