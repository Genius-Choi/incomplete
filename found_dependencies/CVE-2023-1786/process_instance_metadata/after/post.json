[
    {
        "line": 8,
        "fullcodeline": "md_copy = copy.deepcopy(metadata)"
    },
    {
        "line": 9,
        "fullcodeline": "base64_encoded_keys = []"
    },
    {
        "line": 10,
        "fullcodeline": "sens_keys = []"
    },
    {
        "line": 31,
        "fullcodeline": "md_copy[\"base64_encoded_keys\"] = sorted(base64_encoded_keys)"
    },
    {
        "line": 32,
        "fullcodeline": "md_copy[\"sensitive_keys\"] = sorted(sens_keys)"
    },
    {
        "line": 11,
        "fullcodeline": "for key, val in metadata.items():"
    },
    {
        "line": 17,
        "fullcodeline": "key.lower() in sensitive_keys"
    },
    {
        "line": 21,
        "fullcodeline": "if isinstance(val, str) and val.startswith(\"ci-b64:\"):"
    },
    {
        "line": 24,
        "fullcodeline": "if isinstance(val, dict):"
    },
    {
        "line": 13,
        "fullcodeline": "sub_key_path = key_path + \"/\" + key"
    },
    {
        "line": 15,
        "fullcodeline": "sub_key_path = key"
    },
    {
        "line": 18,
        "fullcodeline": "or sub_key_path.lower() in sensitive_keys"
    },
    {
        "line": 20,
        "fullcodeline": "sens_keys.append(sub_key_path)"
    },
    {
        "line": 22,
        "fullcodeline": "base64_encoded_keys.append(sub_key_path)"
    },
    {
        "line": 23,
        "fullcodeline": "md_copy[key] = val.replace(\"ci-b64:\", \"\")"
    },
    {
        "line": 25,
        "fullcodeline": "return_val = process_instance_metadata("
    },
    {
        "line": 28,
        "fullcodeline": "base64_encoded_keys.extend(return_val.pop(\"base64_encoded_keys\"))"
    },
    {
        "line": 29,
        "fullcodeline": "sens_keys.extend(return_val.pop(\"sensitive_keys\"))"
    },
    {
        "line": 30,
        "fullcodeline": "md_copy[key] = return_val"
    }
]