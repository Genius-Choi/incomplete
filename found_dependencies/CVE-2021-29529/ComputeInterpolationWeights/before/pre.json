[
    {
        "line": 5,
        "fullcodeline": "interpolation->lower.resize(out_size + 1);"
    },
    {
        "line": 6,
        "fullcodeline": "interpolation->upper.resize(out_size + 1);"
    },
    {
        "line": 7,
        "fullcodeline": "interpolation->lerp.resize(out_size + 1);"
    },
    {
        "line": 8,
        "fullcodeline": "interpolation->ilerp.resize(out_size + 1);"
    },
    {
        "line": 10,
        "fullcodeline": "interpolation->lower[out_size] = 0;"
    },
    {
        "line": 11,
        "fullcodeline": "interpolation->upper[out_size] = 0;"
    },
    {
        "line": 12,
        "fullcodeline": "for (int64 i = out_size - 1; i >= 0; --i) {"
    },
    {
        "line": 13,
        "fullcodeline": "const float in = scaler(i, scale);"
    },
    {
        "line": 14,
        "fullcodeline": "const float in_f = std::floor(in);"
    },
    {
        "line": 16,
        "fullcodeline": "std::max(static_cast<int64>(in_f), static_cast<int64>(0));"
    },
    {
        "line": 18,
        "fullcodeline": "std::min(static_cast<int64>(std::ceil(in)), in_size - 1);"
    },
    {
        "line": 19,
        "fullcodeline": "interpolation->lerp[i] = in - in_f;"
    },
    {
        "line": 21,
        "fullcodeline": "static_cast<T_SCALE>((in - in_f) * (1 << resolution));"
    }
]