[
    {
        "line": 3,
        "fullcodeline": "struct nfs_server *server = NFS_SERVER(inode);"
    },
    {
        "line": 4,
        "fullcodeline": "struct page *pages[NFS4ACL_MAXPAGES];"
    },
    {
        "line": 5,
        "fullcodeline": "struct nfs_setaclargs arg = {"
    },
    {
        "line": 11,
        "fullcodeline": "struct rpc_message msg = {"
    },
    {
        "line": 20,
        "fullcodeline": "i = buf_to_pages_noslab(buf, buflen, arg.acl_pages, &arg.acl_pgbase);"
    },
    {
        "line": 23,
        "fullcodeline": "nfs_inode_return_delegation(inode);"
    },
    {
        "line": 24,
        "fullcodeline": "ret = nfs4_call_sync(server->client, server, &msg, &arg.seq_args, &res.seq_res, 1);"
    },
    {
        "line": 37,
        "fullcodeline": "spin_lock(&inode->i_lock);"
    },
    {
        "line": 38,
        "fullcodeline": "NFS_I(inode)->cache_validity |= NFS_INO_INVALID_ATTR;"
    },
    {
        "line": 40,
        "fullcodeline": "nfs_access_zap_cache(inode);"
    },
    {
        "line": 18,
        "fullcodeline": "if (!nfs4_server_supports_acls(server))"
    },
    {
        "line": 21,
        "fullcodeline": "if (i < 0)"
    },
    {
        "line": 30,
        "fullcodeline": "for (; i > 0; i--)"
    },
    {
        "line": 6,
        "fullcodeline": ".fh\t\t= NFS_FH(inode),"
    },
    {
        "line": 7,
        "fullcodeline": ".acl_pages\t= pages,"
    },
    {
        "line": 8,
        "fullcodeline": ".acl_len\t= buflen,"
    },
    {
        "line": 12,
        "fullcodeline": ".rpc_proc\t= &nfs4_procedures[NFSPROC4_CLNT_SETACL],"
    },
    {
        "line": 13,
        "fullcodeline": ".rpc_argp\t= &arg,"
    },
    {
        "line": 14,
        "fullcodeline": ".rpc_resp\t= &res,"
    },
    {
        "line": 19,
        "fullcodeline": "return -EOPNOTSUPP;"
    },
    {
        "line": 31,
        "fullcodeline": "put_page(pages[i-1]);"
    }
]