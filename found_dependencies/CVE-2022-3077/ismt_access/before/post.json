[
    {
        "line": 7,
        "fullcodeline": "dma_addr_t dma_addr = 0; /* address of the data buffer */"
    },
    {
        "line": 8,
        "fullcodeline": "u8 dma_size = 0;"
    },
    {
        "line": 9,
        "fullcodeline": "enum dma_data_direction dma_direction = 0;"
    },
    {
        "line": 11,
        "fullcodeline": "struct ismt_priv *priv = i2c_get_adapdata(adap);"
    },
    {
        "line": 13,
        "fullcodeline": "u8 *dma_buffer = PTR_ALIGN(&priv->buffer[0], 16);"
    },
    {
        "line": 18,
        "fullcodeline": "memset(priv->buffer, 0, sizeof(priv->buffer));"
    },
    {
        "line": 21,
        "fullcodeline": "memset(desc, 0, sizeof(struct ismt_desc));"
    },
    {
        "line": 22,
        "fullcodeline": "desc->tgtaddr_rw = ISMT_DESC_ADDR_RW(addr, read_write);"
    },
    {
        "line": 25,
        "fullcodeline": "memset(priv->log, 0, ISMT_LOG_ENTRIES * sizeof(u32));"
    },
    {
        "line": 214,
        "fullcodeline": "reinit_completion(&priv->cmp);"
    },
    {
        "line": 217,
        "fullcodeline": "ismt_submit_desc(priv);"
    },
    {
        "line": 220,
        "fullcodeline": "time_left = wait_for_completion_timeout(&priv->cmp, HZ*1);"
    },
    {
        "line": 233,
        "fullcodeline": "ret = ismt_process_desc(desc, data, priv, size, read_write);"
    },
    {
        "line": 237,
        "fullcodeline": "priv->head++;"
    },
    {
        "line": 238,
        "fullcodeline": "priv->head %= ISMT_DESC_ENTRIES;"
    },
    {
        "line": 28,
        "fullcodeline": "if (likely(pci_dev_msi_enabled(priv->pci_dev)))"
    },
    {
        "line": 33,
        "fullcodeline": "if ((flags & I2C_CLIENT_PEC) && (size != I2C_SMBUS_QUICK)"
    },
    {
        "line": 190,
        "fullcodeline": "if (dma_size != 0) {"
    },
    {
        "line": 223,
        "fullcodeline": "if (dma_size != 0)"
    },
    {
        "line": 226,
        "fullcodeline": "if (unlikely(!time_left)) {"
    },
    {
        "line": 29,
        "fullcodeline": "desc->control = ISMT_DESC_INT | ISMT_DESC_FAIR;"
    },
    {
        "line": 34,
        "fullcodeline": "&& (size != I2C_SMBUS_I2C_BLOCK_DATA))"
    },
    {
        "line": 35,
        "fullcodeline": "desc->control |= ISMT_DESC_PEC;"
    },
    {
        "line": 39,
        "fullcodeline": "dev_dbg(dev, \"I2C_SMBUS_QUICK\\n\");"
    },
    {
        "line": 105,
        "fullcodeline": "dev_dbg(dev, \"I2C_SMBUS_PROC_CALL\\n\");"
    },
    {
        "line": 106,
        "fullcodeline": "desc->wr_len_cmd = 3;"
    },
    {
        "line": 107,
        "fullcodeline": "desc->rd_len = 2;"
    },
    {
        "line": 108,
        "fullcodeline": "dma_size = 3;"
    },
    {
        "line": 109,
        "fullcodeline": "dma_direction = DMA_BIDIRECTIONAL;"
    },
    {
        "line": 110,
        "fullcodeline": "dma_buffer[0] = command;"
    },
    {
        "line": 111,
        "fullcodeline": "dma_buffer[1] = data->word & 0xff;"
    },
    {
        "line": 112,
        "fullcodeline": "dma_buffer[2] = data->word >> 8;"
    },
    {
        "line": 137,
        "fullcodeline": "dev_dbg(dev, \"I2C_SMBUS_BLOCK_PROC_CALL\\n\");"
    },
    {
        "line": 138,
        "fullcodeline": "dma_size = I2C_SMBUS_BLOCK_MAX;"
    },
    {
        "line": 139,
        "fullcodeline": "desc->tgtaddr_rw = ISMT_DESC_ADDR_RW(addr, 1);"
    },
    {
        "line": 140,
        "fullcodeline": "desc->wr_len_cmd = data->block[0] + 1;"
    },
    {
        "line": 141,
        "fullcodeline": "desc->rd_len = dma_size;"
    },
    {
        "line": 142,
        "fullcodeline": "desc->control |= ISMT_DESC_BLK;"
    },
    {
        "line": 143,
        "fullcodeline": "dma_direction = DMA_BIDIRECTIONAL;"
    },
    {
        "line": 144,
        "fullcodeline": "dma_buffer[0] = command;"
    },
    {
        "line": 145,
        "fullcodeline": "memcpy(&dma_buffer[1], &data->block[1], data->block[0]);"
    },
    {
        "line": 184,
        "fullcodeline": "dev_err(dev, \"Unsupported transaction %d\\n\","
    },
    {
        "line": 191,
        "fullcodeline": "dev_dbg(dev, \" dev=%p\\n\", dev);"
    },
    {
        "line": 192,
        "fullcodeline": "dev_dbg(dev, \" data=%p\\n\", data);"
    },
    {
        "line": 193,
        "fullcodeline": "dev_dbg(dev, \" dma_buffer=%p\\n\", dma_buffer);"
    },
    {
        "line": 194,
        "fullcodeline": "dev_dbg(dev, \" dma_size=%d\\n\", dma_size);"
    },
    {
        "line": 195,
        "fullcodeline": "dev_dbg(dev, \" dma_direction=%d\\n\", dma_direction);"
    },
    {
        "line": 197,
        "fullcodeline": "dma_addr = dma_map_single(dev,"
    },
    {
        "line": 208,
        "fullcodeline": "dev_dbg(dev, \" dma_addr = %pad\\n\", &dma_addr);"
    },
    {
        "line": 210,
        "fullcodeline": "desc->dptr_low = lower_32_bits(dma_addr);"
    },
    {
        "line": 211,
        "fullcodeline": "desc->dptr_high = upper_32_bits(dma_addr);"
    },
    {
        "line": 224,
        "fullcodeline": "dma_unmap_single(dev, dma_addr, dma_size, dma_direction);"
    },
    {
        "line": 227,
        "fullcodeline": "dev_err(dev, \"completion wait timed out\\n\");"
    },
    {
        "line": 228,
        "fullcodeline": "ret = -ETIMEDOUT;"
    },
    {
        "line": 31,
        "fullcodeline": "desc->control = ISMT_DESC_FAIR;"
    },
    {
        "line": 43,
        "fullcodeline": "if (read_write == I2C_SMBUS_WRITE) {"
    },
    {
        "line": 61,
        "fullcodeline": "if (read_write == I2C_SMBUS_WRITE) {"
    },
    {
        "line": 84,
        "fullcodeline": "if (read_write == I2C_SMBUS_WRITE) {"
    },
    {
        "line": 116,
        "fullcodeline": "if (read_write == I2C_SMBUS_WRITE) {"
    },
    {
        "line": 150,
        "fullcodeline": "if (data->block[0] < 1)"
    },
    {
        "line": 153,
        "fullcodeline": "if (data->block[0] > I2C_SMBUS_BLOCK_MAX)"
    },
    {
        "line": 156,
        "fullcodeline": "if (read_write == I2C_SMBUS_WRITE) {"
    },
    {
        "line": 186,
        "fullcodeline": "return -EOPNOTSUPP;"
    },
    {
        "line": 202,
        "fullcodeline": "if (dma_mapping_error(dev, dma_addr)) {"
    },
    {
        "line": 48,
        "fullcodeline": "dev_dbg(dev, \"I2C_SMBUS_BYTE:  WRITE\\n\");"
    },
    {
        "line": 49,
        "fullcodeline": "desc->control |= ISMT_DESC_CWRL;"
    },
    {
        "line": 50,
        "fullcodeline": "desc->wr_len_cmd = command;"
    },
    {
        "line": 66,
        "fullcodeline": "dev_dbg(dev, \"I2C_SMBUS_BYTE_DATA:  WRITE\\n\");"
    },
    {
        "line": 67,
        "fullcodeline": "desc->wr_len_cmd = 2;"
    },
    {
        "line": 68,
        "fullcodeline": "dma_size = 2;"
    },
    {
        "line": 69,
        "fullcodeline": "dma_direction = DMA_TO_DEVICE;"
    },
    {
        "line": 70,
        "fullcodeline": "dma_buffer[0] = command;"
    },
    {
        "line": 71,
        "fullcodeline": "dma_buffer[1] = data->byte;"
    },
    {
        "line": 86,
        "fullcodeline": "dev_dbg(dev, \"I2C_SMBUS_WORD_DATA:  WRITE\\n\");"
    },
    {
        "line": 87,
        "fullcodeline": "desc->wr_len_cmd = 3;"
    },
    {
        "line": 88,
        "fullcodeline": "dma_size = 3;"
    },
    {
        "line": 89,
        "fullcodeline": "dma_direction = DMA_TO_DEVICE;"
    },
    {
        "line": 90,
        "fullcodeline": "dma_buffer[0] = command;"
    },
    {
        "line": 91,
        "fullcodeline": "dma_buffer[1] = data->word & 0xff;"
    },
    {
        "line": 92,
        "fullcodeline": "dma_buffer[2] = data->word >> 8;"
    },
    {
        "line": 118,
        "fullcodeline": "dev_dbg(dev, \"I2C_SMBUS_BLOCK_DATA:  WRITE\\n\");"
    },
    {
        "line": 119,
        "fullcodeline": "dma_size = data->block[0] + 1;"
    },
    {
        "line": 120,
        "fullcodeline": "dma_direction = DMA_TO_DEVICE;"
    },
    {
        "line": 121,
        "fullcodeline": "desc->wr_len_cmd = dma_size;"
    },
    {
        "line": 122,
        "fullcodeline": "desc->control |= ISMT_DESC_BLK;"
    },
    {
        "line": 123,
        "fullcodeline": "dma_buffer[0] = command;"
    },
    {
        "line": 124,
        "fullcodeline": "memcpy(&dma_buffer[1], &data->block[1], dma_size - 1);"
    },
    {
        "line": 151,
        "fullcodeline": "data->block[0] = 1;"
    },
    {
        "line": 154,
        "fullcodeline": "data->block[0] = I2C_SMBUS_BLOCK_MAX;"
    },
    {
        "line": 158,
        "fullcodeline": "dev_dbg(dev, \"I2C_SMBUS_I2C_BLOCK_DATA:  WRITE\\n\");"
    },
    {
        "line": 159,
        "fullcodeline": "dma_size = data->block[0] + 1;"
    },
    {
        "line": 160,
        "fullcodeline": "dma_direction = DMA_TO_DEVICE;"
    },
    {
        "line": 161,
        "fullcodeline": "desc->wr_len_cmd = dma_size;"
    },
    {
        "line": 162,
        "fullcodeline": "desc->control |= ISMT_DESC_I2C;"
    },
    {
        "line": 163,
        "fullcodeline": "dma_buffer[0] = command;"
    },
    {
        "line": 164,
        "fullcodeline": "memcpy(&dma_buffer[1], &data->block[1], dma_size - 1);"
    },
    {
        "line": 203,
        "fullcodeline": "dev_err(dev, \"Error in mapping dma buffer %p\\n\","
    },
    {
        "line": 53,
        "fullcodeline": "dev_dbg(dev, \"I2C_SMBUS_BYTE:  READ\\n\");"
    },
    {
        "line": 54,
        "fullcodeline": "dma_size = 1;"
    },
    {
        "line": 55,
        "fullcodeline": "dma_direction = DMA_FROM_DEVICE;"
    },
    {
        "line": 56,
        "fullcodeline": "desc->rd_len = 1;"
    },
    {
        "line": 74,
        "fullcodeline": "dev_dbg(dev, \"I2C_SMBUS_BYTE_DATA:  READ\\n\");"
    },
    {
        "line": 75,
        "fullcodeline": "desc->control |= ISMT_DESC_CWRL;"
    },
    {
        "line": 76,
        "fullcodeline": "desc->wr_len_cmd = command;"
    },
    {
        "line": 77,
        "fullcodeline": "desc->rd_len = 1;"
    },
    {
        "line": 78,
        "fullcodeline": "dma_size = 1;"
    },
    {
        "line": 79,
        "fullcodeline": "dma_direction = DMA_FROM_DEVICE;"
    },
    {
        "line": 95,
        "fullcodeline": "dev_dbg(dev, \"I2C_SMBUS_WORD_DATA:  READ\\n\");"
    },
    {
        "line": 96,
        "fullcodeline": "desc->wr_len_cmd = command;"
    },
    {
        "line": 97,
        "fullcodeline": "desc->control |= ISMT_DESC_CWRL;"
    },
    {
        "line": 98,
        "fullcodeline": "desc->rd_len = 2;"
    },
    {
        "line": 99,
        "fullcodeline": "dma_size = 2;"
    },
    {
        "line": 100,
        "fullcodeline": "dma_direction = DMA_FROM_DEVICE;"
    },
    {
        "line": 127,
        "fullcodeline": "dev_dbg(dev, \"I2C_SMBUS_BLOCK_DATA:  READ\\n\");"
    },
    {
        "line": 128,
        "fullcodeline": "dma_size = I2C_SMBUS_BLOCK_MAX;"
    },
    {
        "line": 129,
        "fullcodeline": "dma_direction = DMA_FROM_DEVICE;"
    },
    {
        "line": 130,
        "fullcodeline": "desc->rd_len = dma_size;"
    },
    {
        "line": 131,
        "fullcodeline": "desc->wr_len_cmd = command;"
    },
    {
        "line": 132,
        "fullcodeline": "desc->control |= (ISMT_DESC_BLK | ISMT_DESC_CWRL);"
    },
    {
        "line": 167,
        "fullcodeline": "dev_dbg(dev, \"I2C_SMBUS_I2C_BLOCK_DATA:  READ\\n\");"
    },
    {
        "line": 168,
        "fullcodeline": "dma_size = data->block[0];"
    },
    {
        "line": 169,
        "fullcodeline": "dma_direction = DMA_FROM_DEVICE;"
    },
    {
        "line": 170,
        "fullcodeline": "desc->rd_len = dma_size;"
    },
    {
        "line": 171,
        "fullcodeline": "desc->wr_len_cmd = command;"
    },
    {
        "line": 172,
        "fullcodeline": "desc->control |= (ISMT_DESC_I2C | ISMT_DESC_CWRL);"
    },
    {
        "line": 179,
        "fullcodeline": "desc->tgtaddr_rw = ISMT_DESC_ADDR_RW(addr, 0);"
    },
    {
        "line": 205,
        "fullcodeline": "return -EIO;"
    }
]