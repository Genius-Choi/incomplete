[
    {
        "line": 3,
        "fullcodeline": "struct ndpi_packet_struct *packet = &flow->packet;"
    },
    {
        "line": 11,
        "fullcodeline": "packet->packet_lines_parsed_complete = 1;"
    },
    {
        "line": 12,
        "fullcodeline": "ndpi_reset_packet_line_info(packet);"
    },
    {
        "line": 14,
        "fullcodeline": "packet->line[packet->parsed_lines].ptr = packet->payload;"
    },
    {
        "line": 15,
        "fullcodeline": "packet->line[packet->parsed_lines].len = 0;"
    },
    {
        "line": 5,
        "fullcodeline": "if((packet->payload_packet_len < 3) || (packet->payload == NULL))"
    },
    {
        "line": 8,
        "fullcodeline": "if(packet->packet_lines_parsed_complete != 0)"
    },
    {
        "line": 17,
        "fullcodeline": "for (a = 0; (a < packet->payload_packet_len) && (packet->parsed_lines < NDPI_MAX_PARSE_LINES_PER_PACKET); a++) {"
    },
    {
        "line": 260,
        "fullcodeline": "if(packet->parsed_lines >= 1) {"
    },
    {
        "line": 261,
        "fullcodeline": "packet->line[packet->parsed_lines].len ="
    },
    {
        "line": 264,
        "fullcodeline": "packet->parsed_lines++;"
    },
    {
        "line": 18,
        "fullcodeline": "if((a + 1) >= packet->payload_packet_len)"
    },
    {
        "line": 21,
        "fullcodeline": "if(get_u_int16_t(packet->payload, a) == ntohs(0x0d0a)) {"
    },
    {
        "line": 262,
        "fullcodeline": "(u_int16_t)(((unsigned long) &packet->payload[packet->payload_packet_len]) -"
    },
    {
        "line": 39,
        "fullcodeline": "packet->line[packet->parsed_lines].len ="
    },
    {
        "line": 252,
        "fullcodeline": "packet->parsed_lines++;"
    },
    {
        "line": 253,
        "fullcodeline": "packet->line[packet->parsed_lines].ptr = &packet->payload[a + 2];"
    },
    {
        "line": 254,
        "fullcodeline": "packet->line[packet->parsed_lines].len = 0;"
    },
    {
        "line": 256,
        "fullcodeline": "a++; /* next char in the payload */"
    },
    {
        "line": 24,
        "fullcodeline": "if(((a + 3) <= packet->payload_packet_len)"
    },
    {
        "line": 40,
        "fullcodeline": "(u_int16_t)(((unsigned long) &packet->payload[a]) - ((unsigned long) packet->line[packet->parsed_lines].ptr));"
    },
    {
        "line": 43,
        "fullcodeline": "if(packet->parsed_lines == 0 && packet->line[0].len >= NDPI_STATICSTRING_LEN(\"HTTP/1.X 200 \") &&"
    },
    {
        "line": 67,
        "fullcodeline": "if(packet->line[packet->parsed_lines].len > NDPI_STATICSTRING_LEN(\"Server:\") + 1 &&"
    },
    {
        "line": 83,
        "fullcodeline": "if(packet->line[packet->parsed_lines].len > 6 &&"
    },
    {
        "line": 96,
        "fullcodeline": "if(packet->line[packet->parsed_lines].len > 17 &&"
    },
    {
        "line": 109,
        "fullcodeline": "if(packet->line[packet->parsed_lines].len > 14 &&"
    },
    {
        "line": 121,
        "fullcodeline": "if((packet->content_line.len == 0) && (packet->line[packet->parsed_lines].len > 13) &&"
    },
    {
        "line": 128,
        "fullcodeline": "if(packet->content_line.len > 0) {"
    },
    {
        "line": 142,
        "fullcodeline": "if(packet->line[packet->parsed_lines].len > 8 &&"
    },
    {
        "line": 149,
        "fullcodeline": "if(packet->line[packet->parsed_lines].len > 9 &&"
    },
    {
        "line": 156,
        "fullcodeline": "if(packet->line[packet->parsed_lines].len > 12 &&"
    },
    {
        "line": 164,
        "fullcodeline": "if(packet->line[packet->parsed_lines].len > 18 &&"
    },
    {
        "line": 171,
        "fullcodeline": "if(packet->line[packet->parsed_lines].len > 19 &&"
    },
    {
        "line": 178,
        "fullcodeline": "if(packet->line[packet->parsed_lines].len > 16 &&"
    },
    {
        "line": 186,
        "fullcodeline": "if(packet->line[packet->parsed_lines].len > 21 &&"
    },
    {
        "line": 193,
        "fullcodeline": "if(packet->line[packet->parsed_lines].len > 8 &&"
    },
    {
        "line": 200,
        "fullcodeline": "if(packet->line[packet->parsed_lines].len > 8 &&"
    },
    {
        "line": 207,
        "fullcodeline": "if(packet->line[packet->parsed_lines].len > 16 &&"
    },
    {
        "line": 219,
        "fullcodeline": "if((packet->line[packet->parsed_lines].len > 6 &&"
    },
    {
        "line": 244,
        "fullcodeline": "if(packet->line[packet->parsed_lines].len == 0) {"
    },
    {
        "line": 249,
        "fullcodeline": "if(packet->parsed_lines >= (NDPI_MAX_PARSE_LINES_PER_PACKET - 1))"
    },
    {
        "line": 263,
        "fullcodeline": "((unsigned long) packet->line[packet->parsed_lines].ptr));"
    },
    {
        "line": 25,
        "fullcodeline": "&& (get_u_int16_t(packet->payload, a+2) == ntohs(0x0d0a))) {"
    },
    {
        "line": 28,
        "fullcodeline": "u_int32_t a1 = a + 4;"
    },
    {
        "line": 30,
        "fullcodeline": "diff = packet->payload_packet_len - a1;"
    },
    {
        "line": 46,
        "fullcodeline": "packet->line[0].ptr[NDPI_STATICSTRING_LEN(\"HTTP/1.X \")] < '6') {"
    },
    {
        "line": 47,
        "fullcodeline": "packet->http_response.ptr = &packet->line[0].ptr[NDPI_STATICSTRING_LEN(\"HTTP/1.1 \")];"
    },
    {
        "line": 48,
        "fullcodeline": "packet->http_response.len = packet->line[0].len - NDPI_STATICSTRING_LEN(\"HTTP/1.1 \");"
    },
    {
        "line": 49,
        "fullcodeline": "packet->http_num_headers++;"
    },
    {
        "line": 68,
        "fullcodeline": "strncasecmp((const char *) packet->line[packet->parsed_lines].ptr,"
    },
    {
        "line": 80,
        "fullcodeline": "packet->http_num_headers++;"
    },
    {
        "line": 84,
        "fullcodeline": "strncasecmp((const char *) packet->line[packet->parsed_lines].ptr, \"Host:\", 5) == 0) {"
    },
    {
        "line": 93,
        "fullcodeline": "packet->http_num_headers++;"
    },
    {
        "line": 97,
        "fullcodeline": "strncasecmp((const char *) packet->line[packet->parsed_lines].ptr, \"X-Forwarded-For:\", 16) == 0) {"
    },
    {
        "line": 106,
        "fullcodeline": "packet->http_num_headers++;"
    },
    {
        "line": 110,
        "fullcodeline": "(strncasecmp((const char *) packet->line[packet->parsed_lines].ptr, \"Content-Type: \", 14) == 0 ||"
    },
    {
        "line": 113,
        "fullcodeline": "packet->content_line.len = packet->line[packet->parsed_lines].len - 14;"
    },
    {
        "line": 118,
        "fullcodeline": "packet->http_num_headers++;"
    },
    {
        "line": 122,
        "fullcodeline": "(strncasecmp((const char *) packet->line[packet->parsed_lines].ptr, \"Content-type:\", 13) == 0)) {"
    },
    {
        "line": 124,
        "fullcodeline": "packet->content_line.len = packet->line[packet->parsed_lines].len - 13;"
    },
    {
        "line": 125,
        "fullcodeline": "packet->http_num_headers++;"
    },
    {
        "line": 130,
        "fullcodeline": "char separator[] = {';', '\\r', '\\0'};"
    },
    {
        "line": 143,
        "fullcodeline": "strncasecmp((const char *) packet->line[packet->parsed_lines].ptr, \"Accept: \", 8) == 0) {"
    },
    {
        "line": 145,
        "fullcodeline": "packet->accept_line.len = packet->line[packet->parsed_lines].len - 8;"
    },
    {
        "line": 146,
        "fullcodeline": "packet->http_num_headers++;"
    },
    {
        "line": 150,
        "fullcodeline": "strncasecmp((const char *) packet->line[packet->parsed_lines].ptr, \"Referer: \", 9) == 0) {"
    },
    {
        "line": 152,
        "fullcodeline": "packet->referer_line.len = packet->line[packet->parsed_lines].len - 9;"
    },
    {
        "line": 153,
        "fullcodeline": "packet->http_num_headers++;"
    },
    {
        "line": 157,
        "fullcodeline": "(strncasecmp((const char *) packet->line[packet->parsed_lines].ptr, \"User-Agent: \", 12) == 0 ||"
    },
    {
        "line": 160,
        "fullcodeline": "packet->user_agent_line.len = packet->line[packet->parsed_lines].len - 12;"
    },
    {
        "line": 161,
        "fullcodeline": "packet->http_num_headers++;"
    },
    {
        "line": 165,
        "fullcodeline": "strncasecmp((const char *) packet->line[packet->parsed_lines].ptr, \"Content-Encoding: \", 18) == 0) {"
    },
    {
        "line": 167,
        "fullcodeline": "packet->http_encoding.len = packet->line[packet->parsed_lines].len - 18;"
    },
    {
        "line": 168,
        "fullcodeline": "packet->http_num_headers++;"
    },
    {
        "line": 172,
        "fullcodeline": "strncasecmp((const char *) packet->line[packet->parsed_lines].ptr, \"Transfer-Encoding: \", 19) == 0) {"
    },
    {
        "line": 174,
        "fullcodeline": "packet->http_transfer_encoding.len = packet->line[packet->parsed_lines].len - 19;"
    },
    {
        "line": 175,
        "fullcodeline": "packet->http_num_headers++;"
    },
    {
        "line": 179,
        "fullcodeline": "((strncasecmp((const char *) packet->line[packet->parsed_lines].ptr, \"Content-Length: \", 16) == 0) ||"
    },
    {
        "line": 181,
        "fullcodeline": "packet->http_contentlen.ptr = &packet->line[packet->parsed_lines].ptr[16];"
    },
    {
        "line": 182,
        "fullcodeline": "packet->http_contentlen.len = packet->line[packet->parsed_lines].len - 16;"
    },
    {
        "line": 183,
        "fullcodeline": "packet->http_num_headers++;"
    },
    {
        "line": 187,
        "fullcodeline": "((strncasecmp((const char *) packet->line[packet->parsed_lines].ptr, \"Content-Disposition: \", 21) == 0))) {"
    },
    {
        "line": 189,
        "fullcodeline": "packet->content_disposition_line.len = packet->line[packet->parsed_lines].len - 21;"
    },
    {
        "line": 190,
        "fullcodeline": "packet->http_num_headers++;"
    },
    {
        "line": 194,
        "fullcodeline": "strncasecmp((const char *) packet->line[packet->parsed_lines].ptr, \"Cookie: \", 8) == 0) {"
    },
    {
        "line": 196,
        "fullcodeline": "packet->http_cookie.len = packet->line[packet->parsed_lines].len - 8;"
    },
    {
        "line": 197,
        "fullcodeline": "packet->http_num_headers++;"
    },
    {
        "line": 201,
        "fullcodeline": "strncasecmp((const char *) packet->line[packet->parsed_lines].ptr, \"Origin: \", 8) == 0) {"
    },
    {
        "line": 203,
        "fullcodeline": "packet->http_origin.len = packet->line[packet->parsed_lines].len - 8;"
    },
    {
        "line": 204,
        "fullcodeline": "packet->http_num_headers++;"
    },
    {
        "line": 208,
        "fullcodeline": "strncasecmp((const char *) packet->line[packet->parsed_lines].ptr, \"X-Session-Type: \", 16) == 0) {"
    },
    {
        "line": 210,
        "fullcodeline": "packet->http_x_session_type.len = packet->line[packet->parsed_lines].len - 16;"
    },
    {
        "line": 211,
        "fullcodeline": "packet->http_num_headers++;"
    },
    {
        "line": 237,
        "fullcodeline": "(packet->line[packet->parsed_lines].len > 27 &&"
    },
    {
        "line": 241,
        "fullcodeline": "packet->http_num_headers++;"
    },
    {
        "line": 245,
        "fullcodeline": "packet->empty_line_position = a;"
    },
    {
        "line": 246,
        "fullcodeline": "packet->empty_line_position_set = 1;"
    },
    {
        "line": 32,
        "fullcodeline": "if(diff > 0) {"
    },
    {
        "line": 45,
        "fullcodeline": "packet->line[0].ptr[NDPI_STATICSTRING_LEN(\"HTTP/1.X \")] > '0' && /* response code between 000 and 699 */"
    },
    {
        "line": 52,
        "fullcodeline": "if(packet->payload_packet_len >= 12) {"
    },
    {
        "line": 71,
        "fullcodeline": "if(packet->line[packet->parsed_lines].ptr[NDPI_STATICSTRING_LEN(\"Server:\")] == ' ') {"
    },
    {
        "line": 86,
        "fullcodeline": "if(packet->line[packet->parsed_lines].ptr[5] == ' ') {"
    },
    {
        "line": 99,
        "fullcodeline": "if(packet->line[packet->parsed_lines].ptr[16] == ' ') {"
    },
    {
        "line": 111,
        "fullcodeline": "strncasecmp((const char *) packet->line[packet->parsed_lines].ptr, \"Content-type: \", 14) == 0)) {"
    },
    {
        "line": 115,
        "fullcodeline": "while ((packet->content_line.len > 0) && (packet->content_line.ptr[0] == ' '))"
    },
    {
        "line": 116,
        "fullcodeline": "packet->content_line.len--, packet->content_line.ptr++;"
    },
    {
        "line": 133,
        "fullcodeline": "for (i = 0; separator[i] != '\\0'; i++) {"
    },
    {
        "line": 158,
        "fullcodeline": "strncasecmp((const char *) packet->line[packet->parsed_lines].ptr, \"User-agent: \", 12) == 0)) {"
    },
    {
        "line": 180,
        "fullcodeline": "(strncasecmp((const char *) packet->line[packet->parsed_lines].ptr, \"content-length: \", 16) == 0))) {"
    },
    {
        "line": 234,
        "fullcodeline": "(packet->line[packet->parsed_lines].len > 17 &&"
    },
    {
        "line": 238,
        "fullcodeline": "strncasecmp((const char *) packet->line[packet->parsed_lines].ptr,"
    },
    {
        "line": 33,
        "fullcodeline": "diff = ndpi_min(diff, sizeof(flow->initial_binary_bytes));"
    },
    {
        "line": 34,
        "fullcodeline": "memcpy(&flow->initial_binary_bytes, &packet->payload[a1], diff);"
    },
    {
        "line": 35,
        "fullcodeline": "flow->initial_binary_bytes_len = diff;"
    },
    {
        "line": 44,
        "fullcodeline": "strncasecmp((const char *) packet->line[0].ptr, \"HTTP/1.\", NDPI_STATICSTRING_LEN(\"HTTP/1.\")) == 0 &&"
    },
    {
        "line": 53,
        "fullcodeline": "char buf[4];"
    },
    {
        "line": 56,
        "fullcodeline": "strncpy(buf, (char *) &packet->payload[9], 3);"
    },
    {
        "line": 57,
        "fullcodeline": "buf[3] = '\\0';"
    },
    {
        "line": 59,
        "fullcodeline": "flow->http.response_status_code = atoi(buf);"
    },
    {
        "line": 69,
        "fullcodeline": "\"Server:\", NDPI_STATICSTRING_LEN(\"Server:\")) == 0) {"
    },
    {
        "line": 74,
        "fullcodeline": "packet->server_line.len ="
    },
    {
        "line": 88,
        "fullcodeline": "packet->host_line.len = packet->line[packet->parsed_lines].len - 6;"
    },
    {
        "line": 101,
        "fullcodeline": "packet->forwarded_line.len = packet->line[packet->parsed_lines].len - 17;"
    },
    {
        "line": 134,
        "fullcodeline": "char *c = memchr((char *) packet->content_line.ptr, separator[i], packet->content_line.len);"
    },
    {
        "line": 231,
        "fullcodeline": "(packet->line[packet->parsed_lines].len > 15 &&"
    },
    {
        "line": 235,
        "fullcodeline": "(strncasecmp((const char *) packet->line[packet->parsed_lines].ptr, \"Accept-Language: \", 17) == 0 ||"
    },
    {
        "line": 61,
        "fullcodeline": "if((flow->http.response_status_code < 100) || (flow->http.response_status_code > 509))"
    },
    {
        "line": 75,
        "fullcodeline": "packet->line[packet->parsed_lines].len - (NDPI_STATICSTRING_LEN(\"Server:\") + 1);"
    },
    {
        "line": 78,
        "fullcodeline": "packet->server_line.len = packet->line[packet->parsed_lines].len - NDPI_STATICSTRING_LEN(\"Server:\");"
    },
    {
        "line": 91,
        "fullcodeline": "packet->host_line.len = packet->line[packet->parsed_lines].len - 5;"
    },
    {
        "line": 104,
        "fullcodeline": "packet->forwarded_line.len = packet->line[packet->parsed_lines].len - 16;"
    },
    {
        "line": 136,
        "fullcodeline": "if(c != NULL)"
    },
    {
        "line": 227,
        "fullcodeline": "(packet->line[packet->parsed_lines].len > 12 &&"
    },
    {
        "line": 232,
        "fullcodeline": "(strncasecmp((const char *) packet->line[packet->parsed_lines].ptr, \"Last-Modified: \", 15) == 0 ||"
    },
    {
        "line": 236,
        "fullcodeline": "strncasecmp((const char *) packet->line[packet->parsed_lines].ptr, \"Accept-Encoding: \", 17) == 0)) ||"
    },
    {
        "line": 62,
        "fullcodeline": "flow->http.response_status_code = 0; /* Out of range */"
    },
    {
        "line": 137,
        "fullcodeline": "packet->content_line.len = c - (char *) packet->content_line.ptr;"
    },
    {
        "line": 225,
        "fullcodeline": "(packet->line[packet->parsed_lines].len > 9 &&"
    },
    {
        "line": 228,
        "fullcodeline": "(strncasecmp((const char *) packet->line[packet->parsed_lines].ptr, \"Set-Cookie: \", 12) == 0 ||"
    },
    {
        "line": 233,
        "fullcodeline": "strncasecmp((const char *) packet->line[packet->parsed_lines].ptr, \"Accept-Ranges: \", 15) == 0)) ||"
    },
    {
        "line": 73,
        "fullcodeline": "&packet->line[packet->parsed_lines].ptr[NDPI_STATICSTRING_LEN(\"Server:\") + 1];"
    },
    {
        "line": 223,
        "fullcodeline": "(packet->line[packet->parsed_lines].len > 8 &&"
    },
    {
        "line": 226,
        "fullcodeline": "strncasecmp((const char *) packet->line[packet->parsed_lines].ptr, \"Expires: \", 9) == 0) ||"
    },
    {
        "line": 230,
        "fullcodeline": "strncasecmp((const char *) packet->line[packet->parsed_lines].ptr, \"Connection: \", 12) == 0)) ||"
    },
    {
        "line": 77,
        "fullcodeline": "packet->server_line.ptr = &packet->line[packet->parsed_lines].ptr[NDPI_STATICSTRING_LEN(\"Server:\")];"
    },
    {
        "line": 220,
        "fullcodeline": "(strncasecmp((const char *) packet->line[packet->parsed_lines].ptr, \"Date: \", 6) == 0 ||"
    },
    {
        "line": 224,
        "fullcodeline": "strncasecmp((const char *) packet->line[packet->parsed_lines].ptr, \"Pragma: \", 8) == 0) ||"
    },
    {
        "line": 229,
        "fullcodeline": "strncasecmp((const char *) packet->line[packet->parsed_lines].ptr, \"Keep-Alive: \", 12) == 0 ||"
    },
    {
        "line": 222,
        "fullcodeline": "strncasecmp((const char *) packet->line[packet->parsed_lines].ptr, \"ETag: \", 6) == 0)) ||"
    },
    {
        "line": 221,
        "fullcodeline": "strncasecmp((const char *) packet->line[packet->parsed_lines].ptr, \"Vary: \", 6) == 0 ||"
    }
]