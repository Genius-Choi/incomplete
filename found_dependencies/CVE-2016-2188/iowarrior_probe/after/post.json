[
    {
        "line": 4,
        "fullcodeline": "struct usb_device *udev = interface_to_usbdev(interface);"
    },
    {
        "line": 5,
        "fullcodeline": "struct iowarrior *dev = NULL;"
    },
    {
        "line": 9,
        "fullcodeline": "int retval = -ENOMEM;"
    },
    {
        "line": 12,
        "fullcodeline": "dev = kzalloc(sizeof(struct iowarrior), GFP_KERNEL);"
    },
    {
        "line": 18,
        "fullcodeline": "mutex_init(&dev->mutex);"
    },
    {
        "line": 20,
        "fullcodeline": "atomic_set(&dev->intr_idx, 0);"
    },
    {
        "line": 21,
        "fullcodeline": "atomic_set(&dev->read_idx, 0);"
    },
    {
        "line": 22,
        "fullcodeline": "spin_lock_init(&dev->intr_idx_lock);"
    },
    {
        "line": 23,
        "fullcodeline": "atomic_set(&dev->overflow_flag, 0);"
    },
    {
        "line": 24,
        "fullcodeline": "init_waitqueue_head(&dev->read_wait);"
    },
    {
        "line": 25,
        "fullcodeline": "atomic_set(&dev->write_busy, 0);"
    },
    {
        "line": 26,
        "fullcodeline": "init_waitqueue_head(&dev->write_wait);"
    },
    {
        "line": 28,
        "fullcodeline": "dev->udev = udev;"
    },
    {
        "line": 29,
        "fullcodeline": "dev->interface = interface;"
    },
    {
        "line": 31,
        "fullcodeline": "iface_desc = interface->cur_altsetting;"
    },
    {
        "line": 32,
        "fullcodeline": "dev->product_id = le16_to_cpu(udev->descriptor.idProduct);"
    },
    {
        "line": 51,
        "fullcodeline": "dev->report_size = usb_endpoint_maxp(dev->int_in_endpoint);"
    },
    {
        "line": 58,
        "fullcodeline": "dev->int_in_urb = usb_alloc_urb(0, GFP_KERNEL);"
    },
    {
        "line": 63,
        "fullcodeline": "dev->int_in_buffer = kmalloc(dev->report_size, GFP_KERNEL);"
    },
    {
        "line": 68,
        "fullcodeline": "usb_fill_int_urb(dev->int_in_urb, dev->udev,"
    },
    {
        "line": 75,
        "fullcodeline": "dev->read_queue ="
    },
    {
        "line": 83,
        "fullcodeline": "memset(dev->chip_serial, 0x00, sizeof(dev->chip_serial));"
    },
    {
        "line": 84,
        "fullcodeline": "usb_string(udev, udev->descriptor.iSerialNumber, dev->chip_serial,"
    },
    {
        "line": 97,
        "fullcodeline": "dev->present = 1;"
    },
    {
        "line": 100,
        "fullcodeline": "usb_set_intfdata(interface, dev);"
    },
    {
        "line": 102,
        "fullcodeline": "retval = usb_register_dev(interface, &iowarrior_class);"
    },
    {
        "line": 110,
        "fullcodeline": "dev->minor = interface->minor;"
    },
    {
        "line": 113,
        "fullcodeline": "dev_info(&interface->dev, \"IOWarrior product=0x%x, serial=%s interface=%d \""
    },
    {
        "line": 119,
        "fullcodeline": "iowarrior_delete(dev);"
    },
    {
        "line": 13,
        "fullcodeline": "if (dev == NULL) {"
    },
    {
        "line": 34,
        "fullcodeline": "if (iface_desc->desc.bNumEndpoints < 1) {"
    },
    {
        "line": 41,
        "fullcodeline": "for (i = 0; i < iface_desc->desc.bNumEndpoints; ++i) {"
    },
    {
        "line": 52,
        "fullcodeline": "if ((dev->interface->cur_altsetting->desc.bInterfaceNumber == 0) &&"
    },
    {
        "line": 59,
        "fullcodeline": "if (!dev->int_in_urb) {"
    },
    {
        "line": 64,
        "fullcodeline": "if (!dev->int_in_buffer) {"
    },
    {
        "line": 69,
        "fullcodeline": "usb_rcvintpipe(dev->udev,"
    },
    {
        "line": 76,
        "fullcodeline": "kmalloc(((dev->report_size + 1) * MAX_INTERRUPT_BUFFER),"
    },
    {
        "line": 78,
        "fullcodeline": "if (!dev->read_queue) {"
    },
    {
        "line": 86,
        "fullcodeline": "if (strlen(dev->chip_serial) != 8)"
    },
    {
        "line": 90,
        "fullcodeline": "if (dev->interface->cur_altsetting->desc.bInterfaceNumber == 0) {"
    },
    {
        "line": 115,
        "fullcodeline": "iface_desc->desc.bInterfaceNumber, dev->minor - IOWARRIOR_MINOR_BASE);"
    },
    {
        "line": 14,
        "fullcodeline": "dev_err(&interface->dev, \"Out of memory\\n\");"
    },
    {
        "line": 35,
        "fullcodeline": "dev_err(&interface->dev, \"Invalid number of endpoints\\n\");"
    },
    {
        "line": 36,
        "fullcodeline": "retval = -EINVAL;"
    },
    {
        "line": 53,
        "fullcodeline": "(dev->product_id == USB_DEVICE_ID_CODEMERCS_IOW56))"
    },
    {
        "line": 55,
        "fullcodeline": "dev->report_size = 7;"
    },
    {
        "line": 60,
        "fullcodeline": "dev_err(&interface->dev, \"Couldn't allocate interrupt_in_urb\\n\");"
    },
    {
        "line": 65,
        "fullcodeline": "dev_err(&interface->dev, \"Couldn't allocate int_in_buffer\\n\");"
    },
    {
        "line": 79,
        "fullcodeline": "dev_err(&interface->dev, \"Couldn't allocate read_queue\\n\");"
    },
    {
        "line": 87,
        "fullcodeline": "memset(dev->chip_serial, 0x00, sizeof(dev->chip_serial));"
    },
    {
        "line": 91,
        "fullcodeline": "usb_control_msg(udev, usb_sndctrlpipe(udev, 0),"
    },
    {
        "line": 105,
        "fullcodeline": "dev_err(&interface->dev, \"Not able to get a minor for this device.\\n\");"
    },
    {
        "line": 106,
        "fullcodeline": "usb_set_intfdata(interface, NULL);"
    },
    {
        "line": 44,
        "fullcodeline": "if (usb_endpoint_is_int_in(endpoint))"
    },
    {
        "line": 46,
        "fullcodeline": "if (usb_endpoint_is_int_out(endpoint))"
    },
    {
        "line": 93,
        "fullcodeline": "USB_TYPE_CLASS | USB_RECIP_INTERFACE, 0,"
    },
    {
        "line": 45,
        "fullcodeline": "dev->int_in_endpoint = endpoint;"
    },
    {
        "line": 48,
        "fullcodeline": "dev->int_out_endpoint = endpoint;"
    }
]