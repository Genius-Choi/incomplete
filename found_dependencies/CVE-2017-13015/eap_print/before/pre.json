[
    {
        "line": 8,
        "fullcodeline": "int count=0, len;"
    },
    {
        "line": 10,
        "fullcodeline": "tptr = cp;"
    },
    {
        "line": 11,
        "fullcodeline": "tlen = length;"
    },
    {
        "line": 12,
        "fullcodeline": "eap = (const struct eap_frame_t *)cp;"
    },
    {
        "line": 13,
        "fullcodeline": "ND_TCHECK(*eap);"
    },
    {
        "line": 31,
        "fullcodeline": "tptr += sizeof(const struct eap_frame_t);"
    },
    {
        "line": 16,
        "fullcodeline": "if (ndo->ndo_vflag < 1) {"
    },
    {
        "line": 25,
        "fullcodeline": "ND_PRINT((ndo, \"%s (%u) v%u, len %u\","
    },
    {
        "line": 17,
        "fullcodeline": "ND_PRINT((ndo, \"%s (%u) v%u, len %u\","
    },
    {
        "line": 36,
        "fullcodeline": "type = *(tptr);"
    },
    {
        "line": 37,
        "fullcodeline": "len = EXTRACT_16BITS(tptr+2);"
    },
    {
        "line": 44,
        "fullcodeline": "ND_TCHECK2(*tptr, len);"
    },
    {
        "line": 26,
        "fullcodeline": "tok2str(eap_frame_type_values, \"unknown\", eap->type),"
    },
    {
        "line": 29,
        "fullcodeline": "EXTRACT_16BITS(eap->length)));"
    },
    {
        "line": 38,
        "fullcodeline": "ND_PRINT((ndo, \", %s (%u), id %u, len %u\","
    },
    {
        "line": 18,
        "fullcodeline": "tok2str(eap_frame_type_values, \"unknown\", eap->type),"
    },
    {
        "line": 21,
        "fullcodeline": "EXTRACT_16BITS(eap->length)));"
    },
    {
        "line": 39,
        "fullcodeline": "tok2str(eap_code_values, \"unknown\", type),"
    },
    {
        "line": 48,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t\\t Type %s (%u)\","
    },
    {
        "line": 68,
        "fullcodeline": "count = 5;"
    },
    {
        "line": 49,
        "fullcodeline": "tok2str(eap_type_values, \"unknown\", *(tptr+4)),"
    },
    {
        "line": 75,
        "fullcodeline": "while (count < len) {"
    },
    {
        "line": 84,
        "fullcodeline": "ND_PRINT((ndo, \" TTLSv%u\","
    },
    {
        "line": 87,
        "fullcodeline": "ND_PRINT((ndo, \" flags [%s] 0x%02x,\","
    },
    {
        "line": 97,
        "fullcodeline": "ND_PRINT((ndo, \" FASTv%u\","
    },
    {
        "line": 99,
        "fullcodeline": "ND_PRINT((ndo, \" flags [%s] 0x%02x,\","
    },
    {
        "line": 112,
        "fullcodeline": "ND_PRINT((ndo, \" subtype [%s] 0x%02x,\","
    },
    {
        "line": 54,
        "fullcodeline": "if (len - 5 > 0) {"
    },
    {
        "line": 61,
        "fullcodeline": "if (len - 5 > 0) {"
    },
    {
        "line": 79,
        "fullcodeline": "count++;"
    },
    {
        "line": 55,
        "fullcodeline": "ND_PRINT((ndo, \", Identity: \"));"
    },
    {
        "line": 56,
        "fullcodeline": "safeputs(ndo, tptr + 5, len - 5);"
    },
    {
        "line": 62,
        "fullcodeline": "ND_PRINT((ndo, \", Notification: \"));"
    },
    {
        "line": 63,
        "fullcodeline": "safeputs(ndo, tptr + 5, len - 5);"
    },
    {
        "line": 76,
        "fullcodeline": "ND_PRINT((ndo, \" %s (%u),\","
    },
    {
        "line": 85,
        "fullcodeline": "EAP_TTLS_VERSION(*(tptr + 5)))); /* fall through */"
    },
    {
        "line": 88,
        "fullcodeline": "bittok2str(eap_tls_flags_values, \"none\", *(tptr+5)),"
    },
    {
        "line": 92,
        "fullcodeline": "ND_PRINT((ndo, \" len %u\", EXTRACT_32BITS(tptr + 6)));"
    },
    {
        "line": 98,
        "fullcodeline": "EAP_TTLS_VERSION(*(tptr + 5))));"
    },
    {
        "line": 100,
        "fullcodeline": "bittok2str(eap_tls_flags_values, \"none\", *(tptr+5)),"
    },
    {
        "line": 104,
        "fullcodeline": "ND_PRINT((ndo, \" len %u\", EXTRACT_32BITS(tptr + 6)));"
    },
    {
        "line": 113,
        "fullcodeline": "tok2str(eap_aka_subtype_values, \"unknown\", *(tptr+5)),"
    },
    {
        "line": 77,
        "fullcodeline": "tok2str(eap_type_values, \"unknown\", *(tptr+count)),"
    }
]