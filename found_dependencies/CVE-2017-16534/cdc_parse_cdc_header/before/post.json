[
    {
        "line": 7,
        "fullcodeline": "struct usb_cdc_union_desc *union_header = NULL;"
    },
    {
        "line": 10,
        "fullcodeline": "struct usb_cdc_header_desc *header = NULL;"
    },
    {
        "line": 11,
        "fullcodeline": "struct usb_cdc_ether_desc *ether = NULL;"
    },
    {
        "line": 12,
        "fullcodeline": "struct usb_cdc_mdlm_detail_desc *detail = NULL;"
    },
    {
        "line": 13,
        "fullcodeline": "struct usb_cdc_mdlm_desc *desc = NULL;"
    },
    {
        "line": 16,
        "fullcodeline": "int cnt = 0;"
    },
    {
        "line": 18,
        "fullcodeline": "memset(hdr, 0x00, sizeof(struct usb_cdc_parsed_header));"
    },
    {
        "line": 19,
        "fullcodeline": "hdr->phonet_magic_present = false;"
    },
    {
        "line": 128,
        "fullcodeline": "hdr->usb_cdc_union_desc = union_header;"
    },
    {
        "line": 129,
        "fullcodeline": "hdr->usb_cdc_header_desc = header;"
    },
    {
        "line": 130,
        "fullcodeline": "hdr->usb_cdc_mdlm_detail_desc = detail;"
    },
    {
        "line": 131,
        "fullcodeline": "hdr->usb_cdc_mdlm_desc = desc;"
    },
    {
        "line": 132,
        "fullcodeline": "hdr->usb_cdc_ether_desc = ether;"
    },
    {
        "line": 20,
        "fullcodeline": "while (buflen > 0) {"
    },
    {
        "line": 21,
        "fullcodeline": "elength = buffer[0];"
    },
    {
        "line": 123,
        "fullcodeline": "cnt++;"
    },
    {
        "line": 125,
        "fullcodeline": "buflen -= elength;"
    },
    {
        "line": 126,
        "fullcodeline": "buffer += elength;"
    },
    {
        "line": 22,
        "fullcodeline": "if (!elength) {"
    },
    {
        "line": 27,
        "fullcodeline": "if (buffer[1] != USB_DT_CS_INTERFACE) {"
    },
    {
        "line": 23,
        "fullcodeline": "dev_err(&intf->dev, \"skipping garbage byte\\n\");"
    },
    {
        "line": 24,
        "fullcodeline": "elength = 1;"
    },
    {
        "line": 28,
        "fullcodeline": "dev_err(&intf->dev, \"skipping garbage\\n\");"
    },
    {
        "line": 40,
        "fullcodeline": "union_header = (struct usb_cdc_union_desc *)buffer;"
    },
    {
        "line": 45,
        "fullcodeline": "hdr->usb_cdc_country_functional_desc ="
    },
    {
        "line": 53,
        "fullcodeline": "header = (struct usb_cdc_header_desc *)buffer;"
    },
    {
        "line": 58,
        "fullcodeline": "hdr->usb_cdc_acm_descriptor ="
    },
    {
        "line": 66,
        "fullcodeline": "ether = (struct usb_cdc_ether_desc *)buffer;"
    },
    {
        "line": 71,
        "fullcodeline": "hdr->usb_cdc_call_mgmt_descriptor ="
    },
    {
        "line": 77,
        "fullcodeline": "hdr->usb_cdc_dmm_desc ="
    },
    {
        "line": 85,
        "fullcodeline": "desc = (struct usb_cdc_mdlm_desc *)buffer;"
    },
    {
        "line": 92,
        "fullcodeline": "detail = (struct usb_cdc_mdlm_detail_desc *)buffer;"
    },
    {
        "line": 97,
        "fullcodeline": "hdr->usb_cdc_ncm_desc = (struct usb_cdc_ncm_desc *)buffer;"
    },
    {
        "line": 103,
        "fullcodeline": "hdr->usb_cdc_mbim_desc = (struct usb_cdc_mbim_desc *)buffer;"
    },
    {
        "line": 108,
        "fullcodeline": "hdr->usb_cdc_mbim_extended_desc ="
    },
    {
        "line": 112,
        "fullcodeline": "hdr->phonet_magic_present = true;"
    },
    {
        "line": 119,
        "fullcodeline": "dev_dbg(&intf->dev, \"Ignoring descriptor: type %02x, length %ud\\n\","
    },
    {
        "line": 34,
        "fullcodeline": "if (elength < sizeof(struct usb_cdc_union_desc))"
    },
    {
        "line": 43,
        "fullcodeline": "if (elength < sizeof(struct usb_cdc_country_functional_desc))"
    },
    {
        "line": 46,
        "fullcodeline": "(struct usb_cdc_country_functional_desc *)buffer;"
    },
    {
        "line": 49,
        "fullcodeline": "if (elength != sizeof(struct usb_cdc_header_desc))"
    },
    {
        "line": 56,
        "fullcodeline": "if (elength < sizeof(struct usb_cdc_acm_descriptor))"
    },
    {
        "line": 59,
        "fullcodeline": "(struct usb_cdc_acm_descriptor *)buffer;"
    },
    {
        "line": 62,
        "fullcodeline": "if (elength != sizeof(struct usb_cdc_ether_desc))"
    },
    {
        "line": 69,
        "fullcodeline": "if (elength < sizeof(struct usb_cdc_call_mgmt_descriptor))"
    },
    {
        "line": 72,
        "fullcodeline": "(struct usb_cdc_call_mgmt_descriptor *)buffer;"
    },
    {
        "line": 75,
        "fullcodeline": "if (elength < sizeof(struct usb_cdc_dmm_desc))"
    },
    {
        "line": 78,
        "fullcodeline": "(struct usb_cdc_dmm_desc *)buffer;"
    },
    {
        "line": 81,
        "fullcodeline": "if (elength < sizeof(struct usb_cdc_mdlm_desc *))"
    },
    {
        "line": 88,
        "fullcodeline": "if (elength < sizeof(struct usb_cdc_mdlm_detail_desc *))"
    },
    {
        "line": 95,
        "fullcodeline": "if (elength < sizeof(struct usb_cdc_ncm_desc))"
    },
    {
        "line": 100,
        "fullcodeline": "if (elength < sizeof(struct usb_cdc_mbim_desc))"
    },
    {
        "line": 106,
        "fullcodeline": "if (elength < sizeof(struct usb_cdc_mbim_extended_desc))"
    },
    {
        "line": 109,
        "fullcodeline": "(struct usb_cdc_mbim_extended_desc *)buffer;"
    },
    {
        "line": 37,
        "fullcodeline": "dev_err(&intf->dev, \"More than one union descriptor, skipping ...\\n\");"
    },
    {
        "line": 52,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 65,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 84,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 91,
        "fullcodeline": "return -EINVAL;"
    }
]