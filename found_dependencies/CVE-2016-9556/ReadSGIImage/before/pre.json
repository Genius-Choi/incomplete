[
    {
        "line": 43,
        "fullcodeline": "assert(image_info != (const ImageInfo *) NULL);"
    },
    {
        "line": 44,
        "fullcodeline": "assert(image_info->signature == MagickCoreSignature);"
    },
    {
        "line": 48,
        "fullcodeline": "assert(exception != (ExceptionInfo *) NULL);"
    },
    {
        "line": 49,
        "fullcodeline": "assert(exception->signature == MagickCoreSignature);"
    },
    {
        "line": 50,
        "fullcodeline": "image=AcquireImage(image_info,exception);"
    },
    {
        "line": 51,
        "fullcodeline": "status=OpenBlob(image_info,image,ReadBinaryBlobMode,exception);"
    },
    {
        "line": 60,
        "fullcodeline": "iris_info.magic=ReadBlobMSBShort(image);"
    },
    {
        "line": 45,
        "fullcodeline": "if (image_info->debug != MagickFalse)"
    },
    {
        "line": 52,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 463,
        "fullcodeline": "} while (iris_info.magic == 0x01DA);"
    },
    {
        "line": 464,
        "fullcodeline": "(void) CloseBlob(image);"
    },
    {
        "line": 465,
        "fullcodeline": "return(GetFirstImageInList(image));"
    },
    {
        "line": 46,
        "fullcodeline": "(void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\","
    },
    {
        "line": 54,
        "fullcodeline": "image=DestroyImageList(image);"
    },
    {
        "line": 68,
        "fullcodeline": "iris_info.storage=(unsigned char) ReadBlobByte(image);"
    },
    {
        "line": 76,
        "fullcodeline": "iris_info.bytes_per_pixel=(unsigned char) ReadBlobByte(image);"
    },
    {
        "line": 80,
        "fullcodeline": "iris_info.columns=ReadBlobMSBShort(image);"
    },
    {
        "line": 81,
        "fullcodeline": "iris_info.rows=ReadBlobMSBShort(image);"
    },
    {
        "line": 82,
        "fullcodeline": "iris_info.depth=ReadBlobMSBShort(image);"
    },
    {
        "line": 88,
        "fullcodeline": "count=ReadBlob(image,sizeof(iris_info.name),(unsigned char *)"
    },
    {
        "line": 92,
        "fullcodeline": "iris_info.name[sizeof(iris_info.name)-1]='\\0';"
    },
    {
        "line": 95,
        "fullcodeline": "iris_info.pixel_format=ReadBlobMSBLong(image);"
    },
    {
        "line": 98,
        "fullcodeline": "count=ReadBlob(image,sizeof(iris_info.filler),iris_info.filler);"
    },
    {
        "line": 101,
        "fullcodeline": "image->columns=iris_info.columns;"
    },
    {
        "line": 102,
        "fullcodeline": "image->rows=iris_info.rows;"
    },
    {
        "line": 103,
        "fullcodeline": "image->depth=(size_t) MagickMin(iris_info.depth,MAGICKCORE_QUANTUM_DEPTH);"
    },
    {
        "line": 115,
        "fullcodeline": "status=SetImageExtent(image,image->columns,image->rows,exception);"
    },
    {
        "line": 121,
        "fullcodeline": "bytes_per_pixel=(size_t) iris_info.bytes_per_pixel;"
    },
    {
        "line": 122,
        "fullcodeline": "number_pixels=(MagickSizeType) iris_info.columns*iris_info.rows;"
    },
    {
        "line": 126,
        "fullcodeline": "pixel_info=AcquireVirtualMemory(iris_info.columns,iris_info.rows*4*"
    },
    {
        "line": 130,
        "fullcodeline": "pixels=(unsigned char *) GetVirtualMemoryBlob(pixel_info);"
    },
    {
        "line": 295,
        "fullcodeline": "image->alpha_trait=iris_info.depth == 4 ? BlendPixelTrait :"
    },
    {
        "line": 297,
        "fullcodeline": "image->columns=iris_info.columns;"
    },
    {
        "line": 298,
        "fullcodeline": "image->rows=iris_info.rows;"
    },
    {
        "line": 445,
        "fullcodeline": "iris_info.magic=ReadBlobMSBShort(image);"
    },
    {
        "line": 55,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 79,
        "fullcodeline": "iris_info.dimension=ReadBlobMSBShort(image);"
    },
    {
        "line": 85,
        "fullcodeline": "iris_info.minimum_value=ReadBlobMSBLong(image);"
    },
    {
        "line": 86,
        "fullcodeline": "iris_info.maximum_value=ReadBlobMSBLong(image);"
    },
    {
        "line": 87,
        "fullcodeline": "iris_info.sans=ReadBlobMSBLong(image);"
    },
    {
        "line": 93,
        "fullcodeline": "if (*iris_info.name != '\\0')"
    },
    {
        "line": 96,
        "fullcodeline": "if (iris_info.pixel_format != 0)"
    },
    {
        "line": 107,
        "fullcodeline": "if (iris_info.depth < 3)"
    },
    {
        "line": 116,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 128,
        "fullcodeline": "if (pixel_info == (MemoryInfo *) NULL)"
    },
    {
        "line": 302,
        "fullcodeline": "if (image->storage_class == DirectClass)"
    },
    {
        "line": 432,
        "fullcodeline": "pixel_info=RelinquishVirtualMemory(pixel_info);"
    },
    {
        "line": 433,
        "fullcodeline": "if (EOFBlob(image) != MagickFalse)"
    },
    {
        "line": 442,
        "fullcodeline": "if (image_info->number_scenes != 0)"
    },
    {
        "line": 446,
        "fullcodeline": "if (iris_info.magic == 0x01DA)"
    },
    {
        "line": 67,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 71,
        "fullcodeline": "case 0x00: image->compression=NoCompression; break;"
    },
    {
        "line": 72,
        "fullcodeline": "case 0x01: image->compression=RLECompression; break;"
    },
    {
        "line": 74,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 77,
        "fullcodeline": "if ((iris_info.bytes_per_pixel == 0) || (iris_info.bytes_per_pixel > 2))"
    },
    {
        "line": 78,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 83,
        "fullcodeline": "if ((iris_info.depth == 0) || (iris_info.depth > 4))"
    },
    {
        "line": 84,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 91,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 97,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 100,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 105,
        "fullcodeline": "image->depth=(size_t) MagickMin((size_t) 8*iris_info.bytes_per_pixel,"
    },
    {
        "line": 109,
        "fullcodeline": "image->storage_class=PseudoClass;"
    },
    {
        "line": 110,
        "fullcodeline": "image->colors=(size_t) (iris_info.bytes_per_pixel > 1 ? 65535 : 256);"
    },
    {
        "line": 112,
        "fullcodeline": "if ((image_info->ping != MagickFalse) && (image_info->number_scenes != 0))"
    },
    {
        "line": 123,
        "fullcodeline": "if ((4*bytes_per_pixel*number_pixels) != ((MagickSizeType) (size_t)"
    },
    {
        "line": 125,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 129,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 139,
        "fullcodeline": "scanline=(unsigned char *) AcquireQuantumMemory(iris_info.columns,"
    },
    {
        "line": 435,
        "fullcodeline": "ThrowFileException(exception,CorruptImageError,\"UnexpectedEndOfFile\","
    },
    {
        "line": 451,
        "fullcodeline": "AcquireNextImage(image_info,image,exception);"
    },
    {
        "line": 457,
        "fullcodeline": "image=SyncNextImageInList(image);"
    },
    {
        "line": 458,
        "fullcodeline": "status=SetImageProgress(image,LoadImagesTag,TellBlob(image),"
    },
    {
        "line": 94,
        "fullcodeline": "(void) SetImageProperty(image,\"label\",iris_info.name,exception);"
    },
    {
        "line": 113,
        "fullcodeline": "if (image->scene >= (image_info->scene+image_info->number_scenes-1))"
    },
    {
        "line": 117,
        "fullcodeline": "return(DestroyImageList(image));"
    },
    {
        "line": 124,
        "fullcodeline": "(4*bytes_per_pixel*number_pixels)))"
    },
    {
        "line": 141,
        "fullcodeline": "if (scanline == (unsigned char *) NULL)"
    },
    {
        "line": 143,
        "fullcodeline": "for (z=0; z < (ssize_t) iris_info.depth; z++)"
    },
    {
        "line": 189,
        "fullcodeline": "offsets=(ssize_t *) AcquireQuantumMemory((size_t) iris_info.rows,"
    },
    {
        "line": 191,
        "fullcodeline": "runlength=(size_t *) AcquireQuantumMemory(iris_info.rows,"
    },
    {
        "line": 193,
        "fullcodeline": "packet_info=AcquireVirtualMemory((size_t) iris_info.columns+10UL,4UL*"
    },
    {
        "line": 207,
        "fullcodeline": "packets=(unsigned char *) GetVirtualMemoryBlob(packet_info);"
    },
    {
        "line": 219,
        "fullcodeline": "offset=0;"
    },
    {
        "line": 220,
        "fullcodeline": "data_order=0;"
    },
    {
        "line": 228,
        "fullcodeline": "offset=(ssize_t) TellBlob(image);"
    },
    {
        "line": 443,
        "fullcodeline": "if (image->scene >= (image_info->scene+image_info->number_scenes-1))"
    },
    {
        "line": 460,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 142,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 145,
        "fullcodeline": "p=pixels+bytes_per_pixel*z;"
    },
    {
        "line": 166,
        "fullcodeline": "scanline=(unsigned char *) RelinquishMagickMemory(scanline);"
    },
    {
        "line": 208,
        "fullcodeline": "for (i=0; i < (ssize_t) (iris_info.rows*iris_info.depth); i++)"
    },
    {
        "line": 209,
        "fullcodeline": "offsets[i]=(ssize_t) ReadBlobMSBSignedLong(image);"
    },
    {
        "line": 210,
        "fullcodeline": "for (i=0; i < (ssize_t) (iris_info.rows*iris_info.depth); i++)"
    },
    {
        "line": 221,
        "fullcodeline": "for (y=0; ((y < (ssize_t) iris_info.rows) && (data_order == 0)); y++)"
    },
    {
        "line": 288,
        "fullcodeline": "packet_info=RelinquishVirtualMemory(packet_info);"
    },
    {
        "line": 375,
        "fullcodeline": "if (AcquireImageColormap(image,image->colors,exception) == MagickFalse)"
    },
    {
        "line": 430,
        "fullcodeline": "(void) SyncImage(image,exception);"
    },
    {
        "line": 452,
        "fullcodeline": "if (GetNextImageInList(image) == (Image *) NULL)"
    },
    {
        "line": 459,
        "fullcodeline": "GetBlobSize(image));"
    },
    {
        "line": 140,
        "fullcodeline": "bytes_per_pixel*sizeof(*scanline));"
    },
    {
        "line": 146,
        "fullcodeline": "for (y=0; y < (ssize_t) iris_info.rows; y++)"
    },
    {
        "line": 195,
        "fullcodeline": "if ((offsets == (ssize_t *) NULL) ||"
    },
    {
        "line": 197,
        "fullcodeline": "(packet_info == (MemoryInfo *) NULL))"
    },
    {
        "line": 205,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 212,
        "fullcodeline": "runlength[i]=ReadBlobMSBLong(image);"
    },
    {
        "line": 222,
        "fullcodeline": "for (z=0; ((z < (ssize_t) iris_info.depth) && (data_order == 0)); z++)"
    },
    {
        "line": 289,
        "fullcodeline": "runlength=(size_t *) RelinquishMagickMemory(runlength);"
    },
    {
        "line": 290,
        "fullcodeline": "offsets=(ssize_t *) RelinquishMagickMemory(offsets);"
    },
    {
        "line": 309,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 376,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 454,
        "fullcodeline": "image=DestroyImageList(image);"
    },
    {
        "line": 455,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 190,
        "fullcodeline": "iris_info.depth*sizeof(*offsets));"
    },
    {
        "line": 192,
        "fullcodeline": "iris_info.depth*sizeof(*runlength));"
    },
    {
        "line": 196,
        "fullcodeline": "(runlength == (size_t *) NULL) ||"
    },
    {
        "line": 199,
        "fullcodeline": "if (offsets == (ssize_t *) NULL)"
    },
    {
        "line": 201,
        "fullcodeline": "if (runlength == (size_t *) NULL)"
    },
    {
        "line": 203,
        "fullcodeline": "if (packet_info == (MemoryInfo *) NULL)"
    },
    {
        "line": 213,
        "fullcodeline": "if (runlength[i] > (4*(size_t) iris_info.columns+10))"
    },
    {
        "line": 226,
        "fullcodeline": "offset=offsets[y+z*iris_info.rows];"
    },
    {
        "line": 231,
        "fullcodeline": "for (z=0; z < (ssize_t) iris_info.depth; z++)"
    },
    {
        "line": 261,
        "fullcodeline": "position=TellBlob(image);"
    },
    {
        "line": 262,
        "fullcodeline": "p=pixels;"
    },
    {
        "line": 311,
        "fullcodeline": "p=pixels+(image->rows-y-1)*8*image->columns;"
    },
    {
        "line": 312,
        "fullcodeline": "q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 342,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 382,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 148,
        "fullcodeline": "count=ReadBlob(image,bytes_per_pixel*iris_info.columns,scanline);"
    },
    {
        "line": 149,
        "fullcodeline": "if (EOFBlob(image) != MagickFalse)"
    },
    {
        "line": 151,
        "fullcodeline": "if (bytes_per_pixel == 2)"
    },
    {
        "line": 200,
        "fullcodeline": "offsets=(ssize_t *) RelinquishMagickMemory(offsets);"
    },
    {
        "line": 202,
        "fullcodeline": "runlength=(size_t *) RelinquishMagickMemory(runlength);"
    },
    {
        "line": 204,
        "fullcodeline": "packet_info=RelinquishVirtualMemory(packet_info);"
    },
    {
        "line": 214,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 224,
        "fullcodeline": "if (offsets[y+z*iris_info.rows] < offset)"
    },
    {
        "line": 233,
        "fullcodeline": "p=pixels;"
    },
    {
        "line": 263,
        "fullcodeline": "for (y=0; y < (ssize_t) iris_info.rows; y++)"
    },
    {
        "line": 313,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 315,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 330,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 332,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 344,
        "fullcodeline": "p=pixels+(image->rows-y-1)*4*image->columns;"
    },
    {
        "line": 345,
        "fullcodeline": "q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 384,
        "fullcodeline": "p=pixels+(image->rows-y-1)*8*image->columns;"
    },
    {
        "line": 385,
        "fullcodeline": "q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 408,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 225,
        "fullcodeline": "data_order=1;"
    },
    {
        "line": 234,
        "fullcodeline": "for (y=0; y < (ssize_t) iris_info.rows; y++)"
    },
    {
        "line": 284,
        "fullcodeline": "p+=(iris_info.columns*4*bytes_per_pixel);"
    },
    {
        "line": 286,
        "fullcodeline": "offset=(ssize_t) SeekBlob(image,position,SEEK_SET);"
    },
    {
        "line": 317,
        "fullcodeline": "SetPixelRed(image,ScaleShortToQuantum((unsigned short)"
    },
    {
        "line": 319,
        "fullcodeline": "SetPixelGreen(image,ScaleShortToQuantum((unsigned short)"
    },
    {
        "line": 321,
        "fullcodeline": "SetPixelBlue(image,ScaleShortToQuantum((unsigned short)"
    },
    {
        "line": 323,
        "fullcodeline": "SetPixelAlpha(image,OpaqueAlpha,q);"
    },
    {
        "line": 327,
        "fullcodeline": "p+=8;"
    },
    {
        "line": 328,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 334,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,(MagickOffsetType)"
    },
    {
        "line": 346,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 348,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 359,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 361,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 386,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 388,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 396,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 398,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 410,
        "fullcodeline": "p=pixels+(image->rows-y-1)*4*image->columns;"
    },
    {
        "line": 411,
        "fullcodeline": "q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 152,
        "fullcodeline": "for (x=0; x < (ssize_t) iris_info.columns; x++)"
    },
    {
        "line": 246,
        "fullcodeline": "offset+=(ssize_t) runlength[y+z*iris_info.rows];"
    },
    {
        "line": 247,
        "fullcodeline": "status=SGIDecode(bytes_per_pixel,(ssize_t)"
    },
    {
        "line": 252,
        "fullcodeline": "p+=(iris_info.columns*4*bytes_per_pixel);"
    },
    {
        "line": 265,
        "fullcodeline": "for (z=0; z < (ssize_t) iris_info.depth; z++)"
    },
    {
        "line": 324,
        "fullcodeline": "if (image->alpha_trait != UndefinedPixelTrait)"
    },
    {
        "line": 336,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 350,
        "fullcodeline": "SetPixelRed(image,ScaleCharToQuantum(*p),q);"
    },
    {
        "line": 351,
        "fullcodeline": "SetPixelGreen(image,ScaleCharToQuantum(*(p+1)),q);"
    },
    {
        "line": 352,
        "fullcodeline": "SetPixelBlue(image,ScaleCharToQuantum(*(p+2)),q);"
    },
    {
        "line": 353,
        "fullcodeline": "SetPixelAlpha(image,OpaqueAlpha,q);"
    },
    {
        "line": 356,
        "fullcodeline": "p+=4;"
    },
    {
        "line": 357,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 363,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 390,
        "fullcodeline": "quantum=(*p << 8);"
    },
    {
        "line": 391,
        "fullcodeline": "quantum|=(*(p+1));"
    },
    {
        "line": 392,
        "fullcodeline": "SetPixelIndex(image,(Quantum) quantum,q);"
    },
    {
        "line": 393,
        "fullcodeline": "p+=8;"
    },
    {
        "line": 394,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 400,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,(MagickOffsetType)"
    },
    {
        "line": 412,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 414,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 420,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 422,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 154,
        "fullcodeline": "*p=scanline[2*x];"
    },
    {
        "line": 156,
        "fullcodeline": "p+=8;"
    },
    {
        "line": 159,
        "fullcodeline": "for (x=0; x < (ssize_t) iris_info.columns; x++)"
    },
    {
        "line": 236,
        "fullcodeline": "if (offset != offsets[y+z*iris_info.rows])"
    },
    {
        "line": 242,
        "fullcodeline": "count=ReadBlob(image,(size_t) runlength[y+z*iris_info.rows],"
    },
    {
        "line": 244,
        "fullcodeline": "if (EOFBlob(image) != MagickFalse)"
    },
    {
        "line": 250,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 277,
        "fullcodeline": "offset+=(ssize_t) runlength[y+z*iris_info.rows];"
    },
    {
        "line": 278,
        "fullcodeline": "status=SGIDecode(bytes_per_pixel,(ssize_t)"
    },
    {
        "line": 325,
        "fullcodeline": "SetPixelAlpha(image,ScaleShortToQuantum((unsigned short)"
    },
    {
        "line": 354,
        "fullcodeline": "if (image->alpha_trait != UndefinedPixelTrait)"
    },
    {
        "line": 365,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 402,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 416,
        "fullcodeline": "SetPixelIndex(image,*p,q);"
    },
    {
        "line": 418,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 424,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 161,
        "fullcodeline": "*p=scanline[x];"
    },
    {
        "line": 162,
        "fullcodeline": "p+=4;"
    },
    {
        "line": 238,
        "fullcodeline": "offset=offsets[y+z*iris_info.rows];"
    },
    {
        "line": 239,
        "fullcodeline": "offset=(ssize_t) SeekBlob(image,(MagickOffsetType) offset,"
    },
    {
        "line": 251,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 267,
        "fullcodeline": "if (offset != offsets[y+z*iris_info.rows])"
    },
    {
        "line": 273,
        "fullcodeline": "count=ReadBlob(image,(size_t) runlength[y+z*iris_info.rows],"
    },
    {
        "line": 275,
        "fullcodeline": "if (EOFBlob(image) != MagickFalse)"
    },
    {
        "line": 281,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 318,
        "fullcodeline": "((*(p+0) << 8) | (*(p+1)))),q);"
    },
    {
        "line": 320,
        "fullcodeline": "((*(p+2) << 8) | (*(p+3)))),q);"
    },
    {
        "line": 322,
        "fullcodeline": "((*(p+4) << 8) | (*(p+5)))),q);"
    },
    {
        "line": 355,
        "fullcodeline": "SetPixelAlpha(image,ScaleCharToQuantum(*(p+3)),q);"
    },
    {
        "line": 426,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 248,
        "fullcodeline": "(runlength[y+z*iris_info.rows]/bytes_per_pixel),packets,"
    },
    {
        "line": 249,
        "fullcodeline": "(ssize_t) iris_info.columns,p+bytes_per_pixel*z);"
    },
    {
        "line": 269,
        "fullcodeline": "offset=offsets[y+z*iris_info.rows];"
    },
    {
        "line": 270,
        "fullcodeline": "offset=(ssize_t) SeekBlob(image,(MagickOffsetType) offset,"
    },
    {
        "line": 282,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 155,
        "fullcodeline": "*(p+1)=scanline[2*x+1];"
    },
    {
        "line": 279,
        "fullcodeline": "(runlength[y+z*iris_info.rows]/bytes_per_pixel),packets,"
    },
    {
        "line": 280,
        "fullcodeline": "(ssize_t) iris_info.columns,p+bytes_per_pixel*z);"
    },
    {
        "line": 326,
        "fullcodeline": "((*(p+6) << 8) | (*(p+7)))),q);"
    }
]