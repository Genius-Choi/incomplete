[
    {
        "line": 6,
        "fullcodeline": "struct bpf_reg_state *regs = cur_regs(env);"
    },
    {
        "line": 7,
        "fullcodeline": "u8 opcode = BPF_OP(insn->code);"
    },
    {
        "line": 17,
        "fullcodeline": "smin_val = src_reg.smin_value;"
    },
    {
        "line": 18,
        "fullcodeline": "smax_val = src_reg.smax_value;"
    },
    {
        "line": 19,
        "fullcodeline": "umin_val = src_reg.umin_value;"
    },
    {
        "line": 20,
        "fullcodeline": "umax_val = src_reg.umax_value;"
    },
    {
        "line": 21,
        "fullcodeline": "src_known = tnum_is_const(src_reg.var_off);"
    },
    {
        "line": 22,
        "fullcodeline": "dst_known = tnum_is_const(dst_reg->var_off);"
    },
    {
        "line": 218,
        "fullcodeline": "__reg_deduce_bounds(dst_reg);"
    },
    {
        "line": 219,
        "fullcodeline": "__reg_bound_offset(dst_reg);"
    },
    {
        "line": 12,
        "fullcodeline": "if (BPF_CLASS(insn->code) != BPF_ALU64) {"
    },
    {
        "line": 14,
        "fullcodeline": "coerce_reg_to_size(dst_reg, 4);"
    },
    {
        "line": 15,
        "fullcodeline": "coerce_reg_to_size(&src_reg, 4);"
    },
    {
        "line": 42,
        "fullcodeline": "dst_reg->var_off = tnum_add(dst_reg->var_off, src_reg.var_off);"
    },
    {
        "line": 63,
        "fullcodeline": "dst_reg->var_off = tnum_sub(dst_reg->var_off, src_reg.var_off);"
    },
    {
        "line": 66,
        "fullcodeline": "dst_reg->var_off = tnum_mul(dst_reg->var_off, src_reg.var_off);"
    },
    {
        "line": 83,
        "fullcodeline": "dst_reg->umin_value *= umin_val;"
    },
    {
        "line": 84,
        "fullcodeline": "dst_reg->umax_value *= umax_val;"
    },
    {
        "line": 103,
        "fullcodeline": "dst_reg->var_off = tnum_and(dst_reg->var_off, src_reg.var_off);"
    },
    {
        "line": 104,
        "fullcodeline": "dst_reg->umin_value = dst_reg->var_off.value;"
    },
    {
        "line": 105,
        "fullcodeline": "dst_reg->umax_value = min(dst_reg->umax_value, umax_val);"
    },
    {
        "line": 120,
        "fullcodeline": "__update_reg_bounds(dst_reg);"
    },
    {
        "line": 131,
        "fullcodeline": "dst_reg->var_off = tnum_or(dst_reg->var_off, src_reg.var_off);"
    },
    {
        "line": 132,
        "fullcodeline": "dst_reg->umin_value = max(dst_reg->umin_value, umin_val);"
    },
    {
        "line": 133,
        "fullcodeline": "dst_reg->umax_value = dst_reg->var_off.value |"
    },
    {
        "line": 149,
        "fullcodeline": "__update_reg_bounds(dst_reg);"
    },
    {
        "line": 162,
        "fullcodeline": "dst_reg->smin_value = S64_MIN;"
    },
    {
        "line": 163,
        "fullcodeline": "dst_reg->smax_value = S64_MAX;"
    },
    {
        "line": 177,
        "fullcodeline": "__update_reg_bounds(dst_reg);"
    },
    {
        "line": 201,
        "fullcodeline": "dst_reg->smin_value = S64_MIN;"
    },
    {
        "line": 202,
        "fullcodeline": "dst_reg->smax_value = S64_MAX;"
    },
    {
        "line": 208,
        "fullcodeline": "dst_reg->umin_value >>= umax_val;"
    },
    {
        "line": 209,
        "fullcodeline": "dst_reg->umax_value >>= umin_val;"
    },
    {
        "line": 211,
        "fullcodeline": "__update_reg_bounds(dst_reg);"
    },
    {
        "line": 214,
        "fullcodeline": "mark_reg_unknown(env, regs, insn->dst_reg);"
    },
    {
        "line": 26,
        "fullcodeline": "if (signed_add_overflows(dst_reg->smin_value, smin_val) ||"
    },
    {
        "line": 34,
        "fullcodeline": "if (dst_reg->umin_value + umin_val < umin_val ||"
    },
    {
        "line": 45,
        "fullcodeline": "if (signed_sub_overflows(dst_reg->smin_value, smax_val) ||"
    },
    {
        "line": 54,
        "fullcodeline": "if (dst_reg->umin_value < umax_val) {"
    },
    {
        "line": 67,
        "fullcodeline": "if (smin_val < 0 || dst_reg->smin_value < 0) {"
    },
    {
        "line": 76,
        "fullcodeline": "if (umax_val > U32_MAX || dst_reg->umax_value > U32_MAX) {"
    },
    {
        "line": 85,
        "fullcodeline": "if (dst_reg->umax_value > S64_MAX) {"
    },
    {
        "line": 95,
        "fullcodeline": "if (src_known && dst_known) {"
    },
    {
        "line": 106,
        "fullcodeline": "if (dst_reg->smin_value < 0 || smin_val < 0) {"
    },
    {
        "line": 123,
        "fullcodeline": "if (src_known && dst_known) {"
    },
    {
        "line": 135,
        "fullcodeline": "if (dst_reg->smin_value < 0 || smin_val < 0) {"
    },
    {
        "line": 152,
        "fullcodeline": "if (umax_val > 63) {"
    },
    {
        "line": 165,
        "fullcodeline": "if (dst_reg->umax_value > 1ULL << (63 - umax_val)) {"
    },
    {
        "line": 180,
        "fullcodeline": "if (umax_val > 63) {"
    },
    {
        "line": 27,
        "fullcodeline": "signed_add_overflows(dst_reg->smax_value, smax_val)) {"
    },
    {
        "line": 28,
        "fullcodeline": "dst_reg->smin_value = S64_MIN;"
    },
    {
        "line": 29,
        "fullcodeline": "dst_reg->smax_value = S64_MAX;"
    },
    {
        "line": 35,
        "fullcodeline": "dst_reg->umax_value + umax_val < umax_val) {"
    },
    {
        "line": 36,
        "fullcodeline": "dst_reg->umin_value = 0;"
    },
    {
        "line": 37,
        "fullcodeline": "dst_reg->umax_value = U64_MAX;"
    },
    {
        "line": 46,
        "fullcodeline": "signed_sub_overflows(dst_reg->smax_value, smin_val)) {"
    },
    {
        "line": 48,
        "fullcodeline": "dst_reg->smin_value = S64_MIN;"
    },
    {
        "line": 49,
        "fullcodeline": "dst_reg->smax_value = S64_MAX;"
    },
    {
        "line": 56,
        "fullcodeline": "dst_reg->umin_value = 0;"
    },
    {
        "line": 57,
        "fullcodeline": "dst_reg->umax_value = U64_MAX;"
    },
    {
        "line": 69,
        "fullcodeline": "__mark_reg_unbounded(dst_reg);"
    },
    {
        "line": 70,
        "fullcodeline": "__update_reg_bounds(dst_reg);"
    },
    {
        "line": 78,
        "fullcodeline": "__mark_reg_unbounded(dst_reg);"
    },
    {
        "line": 80,
        "fullcodeline": "__update_reg_bounds(dst_reg);"
    },
    {
        "line": 87,
        "fullcodeline": "dst_reg->smin_value = S64_MIN;"
    },
    {
        "line": 88,
        "fullcodeline": "dst_reg->smax_value = S64_MAX;"
    },
    {
        "line": 96,
        "fullcodeline": "__mark_reg_known(dst_reg, dst_reg->var_off.value &"
    },
    {
        "line": 110,
        "fullcodeline": "dst_reg->smin_value = S64_MIN;"
    },
    {
        "line": 111,
        "fullcodeline": "dst_reg->smax_value = S64_MAX;"
    },
    {
        "line": 124,
        "fullcodeline": "__mark_reg_known(dst_reg, dst_reg->var_off.value |"
    },
    {
        "line": 139,
        "fullcodeline": "dst_reg->smin_value = S64_MIN;"
    },
    {
        "line": 140,
        "fullcodeline": "dst_reg->smax_value = S64_MAX;"
    },
    {
        "line": 156,
        "fullcodeline": "mark_reg_unknown(env, regs, insn->dst_reg);"
    },
    {
        "line": 166,
        "fullcodeline": "dst_reg->umin_value = 0;"
    },
    {
        "line": 167,
        "fullcodeline": "dst_reg->umax_value = U64_MAX;"
    },
    {
        "line": 173,
        "fullcodeline": "dst_reg->var_off = tnum_lshift(dst_reg->var_off, umin_val);"
    },
    {
        "line": 184,
        "fullcodeline": "mark_reg_unknown(env, regs, insn->dst_reg);"
    },
    {
        "line": 204,
        "fullcodeline": "dst_reg->var_off = tnum_rshift(dst_reg->var_off,"
    },
    {
        "line": 31,
        "fullcodeline": "dst_reg->smin_value += smin_val;"
    },
    {
        "line": 32,
        "fullcodeline": "dst_reg->smax_value += smax_val;"
    },
    {
        "line": 39,
        "fullcodeline": "dst_reg->umin_value += umin_val;"
    },
    {
        "line": 40,
        "fullcodeline": "dst_reg->umax_value += umax_val;"
    },
    {
        "line": 51,
        "fullcodeline": "dst_reg->smin_value -= smax_val;"
    },
    {
        "line": 52,
        "fullcodeline": "dst_reg->smax_value -= smin_val;"
    },
    {
        "line": 60,
        "fullcodeline": "dst_reg->umin_value -= umax_val;"
    },
    {
        "line": 61,
        "fullcodeline": "dst_reg->umax_value -= umin_val;"
    },
    {
        "line": 90,
        "fullcodeline": "dst_reg->smin_value = dst_reg->umin_value;"
    },
    {
        "line": 91,
        "fullcodeline": "dst_reg->smax_value = dst_reg->umax_value;"
    },
    {
        "line": 116,
        "fullcodeline": "dst_reg->smin_value = dst_reg->umin_value;"
    },
    {
        "line": 117,
        "fullcodeline": "dst_reg->smax_value = dst_reg->umax_value;"
    },
    {
        "line": 145,
        "fullcodeline": "dst_reg->smin_value = dst_reg->umin_value;"
    },
    {
        "line": 146,
        "fullcodeline": "dst_reg->smax_value = dst_reg->umax_value;"
    },
    {
        "line": 169,
        "fullcodeline": "dst_reg->umin_value <<= umin_val;"
    },
    {
        "line": 170,
        "fullcodeline": "dst_reg->umax_value <<= umax_val;"
    },
    {
        "line": 175,
        "fullcodeline": "dst_reg->var_off = tnum_lshift(tnum_unknown, umin_val);"
    },
    {
        "line": 207,
        "fullcodeline": "dst_reg->var_off = tnum_rshift(tnum_unknown, umin_val);"
    }
]