[
    {
        "line": 3,
        "fullcodeline": "int num_components = compressed.component_metadata_size();"
    },
    {
        "line": 4,
        "fullcodeline": "out->clear();"
    },
    {
        "line": 5,
        "fullcodeline": "out->reserve(num_components);"
    },
    {
        "line": 8,
        "fullcodeline": "std::vector<struct iovec> iov(num_components);"
    },
    {
        "line": 10,
        "fullcodeline": "std::vector<tstring> tensor_proto_strs;"
    },
    {
        "line": 14,
        "fullcodeline": "tensor_proto_strs.reserve(num_components);"
    },
    {
        "line": 15,
        "fullcodeline": "int64 total_size = 0;"
    },
    {
        "line": 38,
        "fullcodeline": "const std::string& compressed_data = compressed.data();"
    },
    {
        "line": 58,
        "fullcodeline": "int tensor_proto_strs_index = 0;"
    },
    {
        "line": 16,
        "fullcodeline": "for (int i = 0; i < num_components; ++i) {"
    },
    {
        "line": 40,
        "fullcodeline": "if (!port::Snappy_GetUncompressedLength("
    },
    {
        "line": 46,
        "fullcodeline": "if (uncompressed_size != static_cast<size_t>(total_size)) {"
    },
    {
        "line": 59,
        "fullcodeline": "for (int i = 0; i < num_components; ++i) {"
    },
    {
        "line": 71,
        "fullcodeline": "return Status::OK();"
    },
    {
        "line": 17,
        "fullcodeline": "const CompressedComponentMetadata& metadata ="
    },
    {
        "line": 34,
        "fullcodeline": "total_size += iov[i].iov_len;"
    },
    {
        "line": 51,
        "fullcodeline": "if (!port::Snappy_UncompressToIOVec(compressed_data.data(),"
    },
    {
        "line": 18,
        "fullcodeline": "compressed.component_metadata(i);"
    },
    {
        "line": 19,
        "fullcodeline": "if (DataTypeCanUseMemcpy(metadata.dtype())) {"
    },
    {
        "line": 41,
        "fullcodeline": "compressed_data.data(), compressed_data.size(), &uncompressed_size)) {"
    },
    {
        "line": 42,
        "fullcodeline": "return errors::Internal("
    },
    {
        "line": 47,
        "fullcodeline": "return errors::Internal("
    },
    {
        "line": 52,
        "fullcodeline": "compressed_data.size(), iov.data(),"
    },
    {
        "line": 54,
        "fullcodeline": "return errors::Internal(\"Failed to perform snappy decompression.\");"
    },
    {
        "line": 20,
        "fullcodeline": "out->emplace_back(metadata.dtype(), metadata.tensor_shape());"
    },
    {
        "line": 21,
        "fullcodeline": "TensorBuffer* buffer = DMAHelper::buffer(&out->back());"
    },
    {
        "line": 22,
        "fullcodeline": "iov[i].iov_base = buffer->data();"
    },
    {
        "line": 23,
        "fullcodeline": "iov[i].iov_len = buffer->size();"
    },
    {
        "line": 44,
        "fullcodeline": "compressed_data.size());"
    },
    {
        "line": 60,
        "fullcodeline": "if (DataTypeCanUseMemcpy(compressed.component_metadata(i).dtype())) {"
    },
    {
        "line": 64,
        "fullcodeline": "if (!tp.ParseFromString(tensor_proto_strs[tensor_proto_strs_index++])) {"
    },
    {
        "line": 67,
        "fullcodeline": "if (!out->at(i).FromProto(tp)) {"
    },
    {
        "line": 27,
        "fullcodeline": "out->emplace_back();"
    },
    {
        "line": 28,
        "fullcodeline": "tensor_proto_strs.emplace_back();"
    },
    {
        "line": 29,
        "fullcodeline": "tstring& tensor_proto_str = tensor_proto_strs.back();"
    },
    {
        "line": 30,
        "fullcodeline": "tensor_proto_str.resize_uninitialized(metadata.tensor_size_bytes());"
    },
    {
        "line": 31,
        "fullcodeline": "iov[i].iov_base = tensor_proto_str.mdata();"
    },
    {
        "line": 32,
        "fullcodeline": "iov[i].iov_len = tensor_proto_str.size();"
    },
    {
        "line": 65,
        "fullcodeline": "return errors::Internal(\"Could not parse TensorProto\");"
    },
    {
        "line": 68,
        "fullcodeline": "return errors::Internal(\"Could not parse Tensor\");"
    }
]