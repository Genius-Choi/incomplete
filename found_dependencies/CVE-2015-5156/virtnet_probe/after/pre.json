[
    {
        "line": 29,
        "fullcodeline": "dev = alloc_etherdev_mq(sizeof(struct virtnet_info), max_queue_pairs);"
    },
    {
        "line": 34,
        "fullcodeline": "dev->priv_flags |= IFF_UNICAST_FLT | IFF_LIVE_ADDR_CHANGE;"
    },
    {
        "line": 35,
        "fullcodeline": "dev->netdev_ops = &virtnet_netdev;"
    },
    {
        "line": 36,
        "fullcodeline": "dev->features = NETIF_F_HIGHDMA;"
    },
    {
        "line": 38,
        "fullcodeline": "dev->ethtool_ops = &virtnet_ethtool_ops;"
    },
    {
        "line": 39,
        "fullcodeline": "SET_NETDEV_DEV(dev, &vdev->dev);"
    },
    {
        "line": 71,
        "fullcodeline": "dev->vlan_features = dev->features;"
    },
    {
        "line": 82,
        "fullcodeline": "vi = netdev_priv(dev);"
    },
    {
        "line": 83,
        "fullcodeline": "vi->dev = dev;"
    },
    {
        "line": 84,
        "fullcodeline": "vi->vdev = vdev;"
    },
    {
        "line": 85,
        "fullcodeline": "vdev->priv = vi;"
    },
    {
        "line": 87,
        "fullcodeline": "err = -ENOMEM;"
    },
    {
        "line": 91,
        "fullcodeline": "for_each_possible_cpu(i) {"
    },
    {
        "line": 98,
        "fullcodeline": "INIT_WORK(&vi->config_work, virtnet_config_changed_work);"
    },
    {
        "line": 127,
        "fullcodeline": "vi->curr_queue_pairs = 1;"
    },
    {
        "line": 128,
        "fullcodeline": "vi->max_queue_pairs = max_queue_pairs;"
    },
    {
        "line": 131,
        "fullcodeline": "err = init_vqs(vi);"
    },
    {
        "line": 139,
        "fullcodeline": "netif_set_real_num_tx_queues(dev, vi->curr_queue_pairs);"
    },
    {
        "line": 140,
        "fullcodeline": "netif_set_real_num_rx_queues(dev, vi->curr_queue_pairs);"
    },
    {
        "line": 142,
        "fullcodeline": "err = register_netdev(dev);"
    },
    {
        "line": 148,
        "fullcodeline": "virtio_device_ready(vdev);"
    },
    {
        "line": 163,
        "fullcodeline": "vi->nb.notifier_call = &virtnet_cpu_callback;"
    },
    {
        "line": 164,
        "fullcodeline": "err = register_hotcpu_notifier(&vi->nb);"
    },
    {
        "line": 188,
        "fullcodeline": "free_receive_bufs(vi);"
    },
    {
        "line": 189,
        "fullcodeline": "unregister_netdev(dev);"
    },
    {
        "line": 192,
        "fullcodeline": "free_receive_page_frags(vi);"
    },
    {
        "line": 193,
        "fullcodeline": "virtnet_del_vqs(vi);"
    },
    {
        "line": 8,
        "fullcodeline": "if (!vdev->config->get) {"
    },
    {
        "line": 30,
        "fullcodeline": "if (!dev)"
    },
    {
        "line": 42,
        "fullcodeline": "if (virtio_has_feature(vdev, VIRTIO_NET_F_CSUM)) {"
    },
    {
        "line": 68,
        "fullcodeline": "if (virtio_has_feature(vdev, VIRTIO_NET_F_GUEST_CSUM))"
    },
    {
        "line": 88,
        "fullcodeline": "if (vi->stats == NULL)"
    },
    {
        "line": 93,
        "fullcodeline": "virtnet_stats = per_cpu_ptr(vi->stats, i);"
    },
    {
        "line": 107,
        "fullcodeline": "if (virtio_has_feature(vdev, VIRTIO_NET_F_MRG_RXBUF))"
    },
    {
        "line": 110,
        "fullcodeline": "if (virtio_has_feature(vdev, VIRTIO_NET_F_MRG_RXBUF) ||"
    },
    {
        "line": 120,
        "fullcodeline": "if (virtio_has_feature(vdev, VIRTIO_NET_F_CTRL_VQ))"
    },
    {
        "line": 151,
        "fullcodeline": "for (i = 0; i < vi->curr_queue_pairs; i++) {"
    },
    {
        "line": 172,
        "fullcodeline": "if (virtio_has_feature(vi->vdev, VIRTIO_NET_F_STATUS)) {"
    },
    {
        "line": 9,
        "fullcodeline": "dev_err(&vdev->dev, \"%s failure: config access disabled\\n\","
    },
    {
        "line": 14,
        "fullcodeline": "if (!virtnet_validate_features(vdev))"
    },
    {
        "line": 23,
        "fullcodeline": "if (err || max_queue_pairs < VIRTIO_NET_CTRL_MQ_VQ_PAIRS_MIN ||"
    },
    {
        "line": 25,
        "fullcodeline": "!virtio_has_feature(vdev, VIRTIO_NET_F_CTRL_VQ))"
    },
    {
        "line": 26,
        "fullcodeline": "max_queue_pairs = 1;"
    },
    {
        "line": 44,
        "fullcodeline": "dev->hw_features |= NETIF_F_HW_CSUM | NETIF_F_SG;"
    },
    {
        "line": 62,
        "fullcodeline": "dev->features |= NETIF_F_GSO_ROBUST;"
    },
    {
        "line": 69,
        "fullcodeline": "dev->features |= NETIF_F_RXCSUM;"
    },
    {
        "line": 101,
        "fullcodeline": "if (virtio_has_feature(vdev, VIRTIO_NET_F_GUEST_TSO4) ||"
    },
    {
        "line": 104,
        "fullcodeline": "virtio_has_feature(vdev, VIRTIO_NET_F_GUEST_UFO))"
    },
    {
        "line": 105,
        "fullcodeline": "vi->big_packets = true;"
    },
    {
        "line": 108,
        "fullcodeline": "vi->mergeable_rx_bufs = true;"
    },
    {
        "line": 111,
        "fullcodeline": "virtio_has_feature(vdev, VIRTIO_F_VERSION_1))"
    },
    {
        "line": 112,
        "fullcodeline": "vi->hdr_len = sizeof(struct virtio_net_hdr_mrg_rxbuf);"
    },
    {
        "line": 116,
        "fullcodeline": "if (virtio_has_feature(vdev, VIRTIO_F_ANY_LAYOUT) ||"
    },
    {
        "line": 117,
        "fullcodeline": "virtio_has_feature(vdev, VIRTIO_F_VERSION_1))"
    },
    {
        "line": 118,
        "fullcodeline": "vi->any_header_sg = true;"
    },
    {
        "line": 121,
        "fullcodeline": "vi->has_cvq = true;"
    },
    {
        "line": 124,
        "fullcodeline": "dev->needed_headroom = vi->hdr_len;"
    },
    {
        "line": 152,
        "fullcodeline": "try_fill_recv(vi, &vi->rq[i], GFP_KERNEL);"
    },
    {
        "line": 173,
        "fullcodeline": "netif_carrier_off(dev);"
    },
    {
        "line": 11,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 15,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 24,
        "fullcodeline": "max_queue_pairs > VIRTIO_NET_CTRL_MQ_VQ_PAIRS_MAX ||"
    },
    {
        "line": 31,
        "fullcodeline": "return -ENOMEM;"
    },
    {
        "line": 48,
        "fullcodeline": "if (virtio_has_feature(vdev, VIRTIO_NET_F_GSO)) {"
    },
    {
        "line": 53,
        "fullcodeline": "if (virtio_has_feature(vdev, VIRTIO_NET_F_HOST_TSO4))"
    },
    {
        "line": 55,
        "fullcodeline": "if (virtio_has_feature(vdev, VIRTIO_NET_F_HOST_TSO6))"
    },
    {
        "line": 57,
        "fullcodeline": "if (virtio_has_feature(vdev, VIRTIO_NET_F_HOST_ECN))"
    },
    {
        "line": 59,
        "fullcodeline": "if (virtio_has_feature(vdev, VIRTIO_NET_F_HOST_UFO))"
    },
    {
        "line": 103,
        "fullcodeline": "virtio_has_feature(vdev, VIRTIO_NET_F_GUEST_ECN) ||"
    },
    {
        "line": 114,
        "fullcodeline": "vi->hdr_len = sizeof(struct virtio_net_hdr);"
    },
    {
        "line": 155,
        "fullcodeline": "if (vi->rq[i].vq->num_free =="
    },
    {
        "line": 176,
        "fullcodeline": "vi->status = VIRTIO_NET_S_LINK_UP;"
    },
    {
        "line": 177,
        "fullcodeline": "netif_carrier_on(dev);"
    },
    {
        "line": 46,
        "fullcodeline": "dev->features |= NETIF_F_HW_CSUM | NETIF_F_SG;"
    },
    {
        "line": 49,
        "fullcodeline": "dev->hw_features |= NETIF_F_TSO | NETIF_F_UFO"
    },
    {
        "line": 54,
        "fullcodeline": "dev->hw_features |= NETIF_F_TSO;"
    },
    {
        "line": 56,
        "fullcodeline": "dev->hw_features |= NETIF_F_TSO6;"
    },
    {
        "line": 58,
        "fullcodeline": "dev->hw_features |= NETIF_F_TSO_ECN;"
    },
    {
        "line": 60,
        "fullcodeline": "dev->hw_features |= NETIF_F_UFO;"
    },
    {
        "line": 65,
        "fullcodeline": "dev->features |= dev->hw_features & (NETIF_F_ALL_TSO|NETIF_F_UFO);"
    },
    {
        "line": 102,
        "fullcodeline": "virtio_has_feature(vdev, VIRTIO_NET_F_GUEST_TSO6) ||"
    },
    {
        "line": 156,
        "fullcodeline": "virtqueue_get_vring_size(vi->rq[i].vq)) {"
    },
    {
        "line": 157,
        "fullcodeline": "free_unused_bufs(vi);"
    },
    {
        "line": 158,
        "fullcodeline": "err = -ENOMEM;"
    }
]