[
    {
        "line": 8,
        "fullcodeline": "unsigned char *buf = 0;"
    },
    {
        "line": 10,
        "fullcodeline": "ass_msg(track->library, MSGL_V, \"Font: %d bytes encoded data\","
    },
    {
        "line": 12,
        "fullcodeline": "size = track->parser_priv->fontdata_used;"
    },
    {
        "line": 17,
        "fullcodeline": "buf = malloc(size / 4 * 3 + FFMAX(size % 4 - 1, 0));"
    },
    {
        "line": 20,
        "fullcodeline": "q = buf;"
    },
    {
        "line": 30,
        "fullcodeline": "dsize = q - buf;"
    },
    {
        "line": 31,
        "fullcodeline": "assert(dsize == size / 4 * 3 + FFMAX(size % 4 - 1, 0));"
    },
    {
        "line": 39,
        "fullcodeline": "free(buf);"
    },
    {
        "line": 40,
        "fullcodeline": "reset_embedded_font_parsing(track->parser_priv);"
    },
    {
        "line": 13,
        "fullcodeline": "if (size % 4 == 1) {"
    },
    {
        "line": 18,
        "fullcodeline": "if (!buf)"
    },
    {
        "line": 22,
        "fullcodeline": "i < size / 4; i++, p += 4) {"
    },
    {
        "line": 25,
        "fullcodeline": "if (size % 4 == 2) {"
    },
    {
        "line": 14,
        "fullcodeline": "ass_msg(track->library, MSGL_ERR, \"Bad encoded data size\");"
    },
    {
        "line": 21,
        "fullcodeline": "for (i = 0, p = (unsigned char *) track->parser_priv->fontdata;"
    },
    {
        "line": 23,
        "fullcodeline": "q = decode_chars(p, q, 4);"
    },
    {
        "line": 26,
        "fullcodeline": "q = decode_chars(p, q, 2);"
    },
    {
        "line": 34,
        "fullcodeline": "ass_add_font(track->library, track->parser_priv->fontname,"
    },
    {
        "line": 27,
        "fullcodeline": "} else if (size % 4 == 3) {"
    },
    {
        "line": 28,
        "fullcodeline": "q = decode_chars(p, q, 3);"
    }
]