[
    {
        "line": 4,
        "fullcodeline": "u_int tlen,idx,hdr_len = 0;"
    },
    {
        "line": 23,
        "fullcodeline": "ND_TCHECK2(*p, 4); /* minimum frame header length */"
    },
    {
        "line": 123,
        "fullcodeline": "sequence_num = (p[0]&0x1e)<<7 | p[1];"
    },
    {
        "line": 25,
        "fullcodeline": "if ((p[0] & MFR_BEC_MASK) == MFR_CTRL_FRAME && p[1] == 0) {"
    },
    {
        "line": 136,
        "fullcodeline": "ND_PRINT((ndo, \"FRF.16 Frag, seq %u, Flags [%s]\","
    },
    {
        "line": 26,
        "fullcodeline": "ND_PRINT((ndo, \"FRF.16 Control, Flags [%s], %s, length %u\","
    },
    {
        "line": 30,
        "fullcodeline": "tptr = p + 3;"
    },
    {
        "line": 31,
        "fullcodeline": "tlen = length -3;"
    },
    {
        "line": 32,
        "fullcodeline": "hdr_len = 3;"
    },
    {
        "line": 125,
        "fullcodeline": "if ((p[0] & MFR_BEC_MASK) == MFR_FRAG_FRAME ||"
    },
    {
        "line": 126,
        "fullcodeline": "(p[0] & MFR_BEC_MASK) == MFR_B_BIT) {"
    },
    {
        "line": 130,
        "fullcodeline": "hdr_len = 2;"
    },
    {
        "line": 34,
        "fullcodeline": "if (!ndo->ndo_vflag)"
    },
    {
        "line": 37,
        "fullcodeline": "while (tlen>sizeof(struct ie_tlv_header_t)) {"
    },
    {
        "line": 127,
        "fullcodeline": "ND_PRINT((ndo, \"FRF.16 Frag, seq %u, Flags [%s], \","
    },
    {
        "line": 131,
        "fullcodeline": "fr_print(ndo, p+hdr_len,length-hdr_len);"
    },
    {
        "line": 138,
        "fullcodeline": "bittok2str(frf_flag_values,\"none\",(p[0] & MFR_BEC_MASK))));"
    },
    {
        "line": 38,
        "fullcodeline": "ND_TCHECK2(*tptr, sizeof(struct ie_tlv_header_t));"
    },
    {
        "line": 39,
        "fullcodeline": "ie_type=tptr[0];"
    },
    {
        "line": 40,
        "fullcodeline": "ie_len=tptr[1];"
    },
    {
        "line": 51,
        "fullcodeline": "ND_TCHECK2(*tptr, ie_len);"
    },
    {
        "line": 52,
        "fullcodeline": "tptr+=sizeof(struct ie_tlv_header_t);"
    },
    {
        "line": 54,
        "fullcodeline": "ie_len-=sizeof(struct ie_tlv_header_t);"
    },
    {
        "line": 55,
        "fullcodeline": "tlen-=sizeof(struct ie_tlv_header_t);"
    },
    {
        "line": 103,
        "fullcodeline": "tlen-=ie_len;"
    },
    {
        "line": 104,
        "fullcodeline": "tptr+=ie_len;"
    },
    {
        "line": 27,
        "fullcodeline": "bittok2str(frf_flag_values,\"none\",(p[0] & MFR_BEC_MASK)),"
    },
    {
        "line": 28,
        "fullcodeline": "tok2str(mfr_ctrl_msg_values,\"Unknown Message (0x%02x)\",p[2]),"
    },
    {
        "line": 42,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\tIE %s (%u), length %u: \","
    },
    {
        "line": 100,
        "fullcodeline": "if (ndo->ndo_vflag > 1 )"
    },
    {
        "line": 129,
        "fullcodeline": "bittok2str(frf_flag_values,\"none\",(p[0] & MFR_BEC_MASK))));"
    },
    {
        "line": 48,
        "fullcodeline": "if (ie_type == 0 || ie_len <= sizeof(struct ie_tlv_header_t))"
    },
    {
        "line": 101,
        "fullcodeline": "print_unknown_data(ndo, tptr, \"\\n\\t  \", ie_len);"
    },
    {
        "line": 43,
        "fullcodeline": "tok2str(mfr_ctrl_ie_values,\"Unknown\",ie_type),"
    },
    {
        "line": 61,
        "fullcodeline": "if (ie_len != 4) {"
    },
    {
        "line": 65,
        "fullcodeline": "ND_PRINT((ndo, \"0x%08x\", EXTRACT_32BITS(tptr)));"
    },
    {
        "line": 70,
        "fullcodeline": "for (idx = 0; idx < ie_len && idx < MFR_ID_STRING_MAXLEN; idx++) {"
    },
    {
        "line": 79,
        "fullcodeline": "if (ie_len == sizeof(struct timeval)) {"
    },
    {
        "line": 94,
        "fullcodeline": "if (ndo->ndo_vflag <= 1)"
    },
    {
        "line": 80,
        "fullcodeline": "ts_print(ndo, (const struct timeval *)tptr);"
    },
    {
        "line": 95,
        "fullcodeline": "print_unknown_data(ndo, tptr, \"\\n\\t  \", ie_len);"
    },
    {
        "line": 62,
        "fullcodeline": "ND_PRINT((ndo, \"(invalid length)\"));"
    },
    {
        "line": 72,
        "fullcodeline": "safeputchar(ndo, *(tptr + idx));"
    }
]