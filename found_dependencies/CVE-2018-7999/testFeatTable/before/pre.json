[
    {
        "line": 4,
        "fullcodeline": "dummyFace.replace_table(TtfUtil::Tag::Feat, &table, sizeof(T));"
    },
    {
        "line": 5,
        "fullcodeline": "gr_face * face = gr_make_face_with_ops(&dummyFace, &face_handle::ops, gr_face_dumbRendering);"
    },
    {
        "line": 7,
        "fullcodeline": "bool readStatus = testFeatureMap.readFeats(*face);"
    },
    {
        "line": 9,
        "fullcodeline": "fprintf(stderr, testName, NULL);"
    },
    {
        "line": 10,
        "fullcodeline": "testAssertEqual(\"test num features %hu,%hu\\n\", testFeatureMap.numFeats(), table.m_header.m_numFeat);"
    },
    {
        "line": 6,
        "fullcodeline": "if (!face) throw std::runtime_error(\"failed to load font\");"
    },
    {
        "line": 12,
        "fullcodeline": "for (size_t i = 0; i < sizeof(table.m_defs) / sizeof(FeatDefn); i++)"
    },
    {
        "line": 14,
        "fullcodeline": "const FeatureRef * ref = testFeatureMap.findFeatureRef(table.m_defs[i].m_featId);"
    },
    {
        "line": 15,
        "fullcodeline": "testAssert(\"test feat\\n\", ref);"
    },
    {
        "line": 16,
        "fullcodeline": "testAssertEqual(\"test feat settings %hu %hu\\n\", ref->getNumSettings(), table.m_defs[i].m_numFeatSettings);"
    },
    {
        "line": 18,
        "fullcodeline": "size_t settingsIndex = (table.m_defs[i].m_settingsOffset - sizeof(FeatHeader)"
    },
    {
        "line": 17,
        "fullcodeline": "testAssertEqual(\"test feat label %hu %hu\\n\", ref->getNameId(), table.m_defs[i].m_label);"
    },
    {
        "line": 20,
        "fullcodeline": "for (size_t j = 0; j < table.m_defs[i].m_numFeatSettings; j++)"
    },
    {
        "line": 19,
        "fullcodeline": "- (sizeof(FeatDefn) * table.m_header.m_numFeat)) / sizeof(FeatSetting);"
    },
    {
        "line": 22,
        "fullcodeline": "testAssertEqual(\"setting label %hu %hu\\n\", ref->getSettingName(j),"
    }
]