[
    {
        "line": 3,
        "fullcodeline": "gr_face * face = 0;"
    },
    {
        "line": 30,
        "fullcodeline": "gr_face_destroy(face);"
    },
    {
        "line": 8,
        "fullcodeline": "dummyFace = face_handle(argv[1]);"
    },
    {
        "line": 9,
        "fullcodeline": "testFeatTable<FeatTableTestA>(testDataA, \"A\\n\");"
    },
    {
        "line": 10,
        "fullcodeline": "testFeatTable<FeatTableTestB>(testDataB, \"B\\n\");"
    },
    {
        "line": 11,
        "fullcodeline": "testFeatTable<FeatTableTestB>(testDataBunsorted, \"Bu\\n\");"
    },
    {
        "line": 12,
        "fullcodeline": "testFeatTable<FeatTableTestC>(testDataCunsorted, \"C\\n\");"
    },
    {
        "line": 13,
        "fullcodeline": "testFeatTable<FeatTableTestD>(testDataDunsorted, \"D\\n\");"
    },
    {
        "line": 14,
        "fullcodeline": "testFeatTable<FeatTableTestE>(testDataE, \"E\\n\");"
    },
    {
        "line": 18,
        "fullcodeline": "dummyFace.replace_table(TtfUtil::Tag::Feat, &testBadOffset, sizeof testBadOffset);"
    },
    {
        "line": 19,
        "fullcodeline": "face = gr_make_face_with_ops(&dummyFace, &face_handle::ops, gr_face_dumbRendering);"
    },
    {
        "line": 20,
        "fullcodeline": "bool readStatus = testFeatureMap.readFeats(*face);"
    },
    {
        "line": 21,
        "fullcodeline": "testAssert(\"fail gracefully on bad table\", !readStatus);"
    },
    {
        "line": 6,
        "fullcodeline": "if (argc != 2)\tthrow std::length_error(\"not enough arguments: need a backing font\");"
    },
    {
        "line": 25,
        "fullcodeline": "fprintf(stderr, \"%s: %s\\n\", argv[0], e.what());"
    },
    {
        "line": 26,
        "fullcodeline": "gr_face_destroy(face);"
    }
]