[
    {
        "line": 6,
        "fullcodeline": "if (glyphid < _num_glyphs_graphics)"
    },
    {
        "line": 28,
        "fullcodeline": "if (glyphid < _num_glyphs_attributes)"
    },
    {
        "line": 30,
        "fullcodeline": "const byte * gloc = m_pGloc;"
    },
    {
        "line": 33,
        "fullcodeline": "be::skip<uint32>(gloc);"
    },
    {
        "line": 55,
        "fullcodeline": "const uint32 glat_version = be::peek<uint32>(m_pGlat);"
    },
    {
        "line": 24,
        "fullcodeline": "if (TtfUtil::HorMetrics(glyphid, _hmtx, _hmtx.size(), _hhea, nLsb, nAdvWid))"
    },
    {
        "line": 34,
        "fullcodeline": "be::skip<uint16>(gloc,2);"
    },
    {
        "line": 56,
        "fullcodeline": "if (glat_version >= 0x00030000)"
    },
    {
        "line": 13,
        "fullcodeline": "size_t locidx = TtfUtil::LocaLookup(glyphid, _loca, _loca.size(), _head);"
    },
    {
        "line": 14,
        "fullcodeline": "void *pGlyph = TtfUtil::GlyfLookup(_glyf, locidx, _glyf.size());"
    },
    {
        "line": 25,
        "fullcodeline": "advance = Position(static_cast<float>(nAdvWid), 0);"
    },
    {
        "line": 40,
        "fullcodeline": "glocs = be::read<uint32>(gloc);"
    },
    {
        "line": 41,
        "fullcodeline": "gloce = be::peek<uint32>(gloc);"
    },
    {
        "line": 52,
        "fullcodeline": "if (glocs >= m_pGlat.size() - 1 || gloce > m_pGlat.size())"
    },
    {
        "line": 60,
        "fullcodeline": "const byte * p = m_pGlat + glocs;"
    },
    {
        "line": 61,
        "fullcodeline": "uint16 bmap = be::read<uint16>(p);"
    },
    {
        "line": 62,
        "fullcodeline": "int num = bit_set_count((uint32)bmap);"
    },
    {
        "line": 64,
        "fullcodeline": "glocs += 6 + 8 * num;"
    },
    {
        "line": 73,
        "fullcodeline": "new (&glyph) GlyphFace(bbox, advance, glat_iterator(m_pGlat + glocs), glat_iterator(m_pGlat + gloce));"
    },
    {
        "line": 83,
        "fullcodeline": "if (!glyph.attrs() || glyph.attrs().capacity() > _num_attrs)"
    },
    {
        "line": 16,
        "fullcodeline": "if (pGlyph && TtfUtil::GlyfBox(pGlyph, xMin, yMin, xMax, yMax))"
    },
    {
        "line": 39,
        "fullcodeline": "be::skip<uint32>(gloc, glyphid);"
    },
    {
        "line": 48,
        "fullcodeline": "glocs = be::read<uint16>(gloc);"
    },
    {
        "line": 49,
        "fullcodeline": "gloce = be::peek<uint16>(gloc);"
    },
    {
        "line": 58,
        "fullcodeline": "if (glocs >= gloce)"
    },
    {
        "line": 65,
        "fullcodeline": "if (glocs > gloce)"
    },
    {
        "line": 81,
        "fullcodeline": "new (&glyph) GlyphFace(bbox, advance, glat2_iterator(m_pGlat + glocs), glat2_iterator(m_pGlat + gloce));"
    },
    {
        "line": 20,
        "fullcodeline": "bbox = Rect(Position(static_cast<float>(xMin), static_cast<float>(yMin)),"
    },
    {
        "line": 37,
        "fullcodeline": "if (8 + glyphid * sizeof(uint32) > m_pGloc.size())"
    },
    {
        "line": 47,
        "fullcodeline": "be::skip<uint16>(gloc, glyphid);"
    },
    {
        "line": 70,
        "fullcodeline": "if (gloce - glocs < 2*sizeof(byte)+sizeof(uint16)"
    },
    {
        "line": 71,
        "fullcodeline": "|| gloce - glocs > _num_attrs*(2*sizeof(byte)+sizeof(uint16)))"
    },
    {
        "line": 18,
        "fullcodeline": "if ((xMin > xMax) || (yMin > yMax))"
    },
    {
        "line": 45,
        "fullcodeline": "if (8 + glyphid * sizeof(uint16) > m_pGloc.size())"
    },
    {
        "line": 77,
        "fullcodeline": "if (gloce - glocs < 3*sizeof(uint16)        // can a glyph have no attributes? why not?"
    },
    {
        "line": 79,
        "fullcodeline": "|| glocs > m_pGlat.size() - 2*sizeof(uint16))"
    },
    {
        "line": 21,
        "fullcodeline": "Position(static_cast<float>(xMax), static_cast<float>(yMax)));"
    },
    {
        "line": 78,
        "fullcodeline": "|| gloce - glocs > _num_attrs*3*sizeof(uint16)"
    }
]