[
    {
        "line": 6,
        "fullcodeline": "uint8_t buf[16];"
    },
    {
        "line": 9,
        "fullcodeline": "uint32_t extra = 0;"
    },
    {
        "line": 11,
        "fullcodeline": "int written = 0;"
    },
    {
        "line": 15,
        "fullcodeline": "written++;"
    },
    {
        "line": 16,
        "fullcodeline": "channel_id = hdr & 0x3F;"
    },
    {
        "line": 28,
        "fullcodeline": "prev_pkt = *prev_pkt_ptr;"
    },
    {
        "line": 29,
        "fullcodeline": "size  = prev_pkt[channel_id].size;"
    },
    {
        "line": 30,
        "fullcodeline": "type  = prev_pkt[channel_id].type;"
    },
    {
        "line": 31,
        "fullcodeline": "extra = prev_pkt[channel_id].extra;"
    },
    {
        "line": 33,
        "fullcodeline": "hdr >>= 6; // header size indicator"
    },
    {
        "line": 98,
        "fullcodeline": "p->extra = extra;"
    },
    {
        "line": 100,
        "fullcodeline": "prev_pkt[channel_id].channel_id = channel_id;"
    },
    {
        "line": 101,
        "fullcodeline": "prev_pkt[channel_id].type       = type;"
    },
    {
        "line": 102,
        "fullcodeline": "prev_pkt[channel_id].size       = size;"
    },
    {
        "line": 103,
        "fullcodeline": "prev_pkt[channel_id].extra      = extra;"
    },
    {
        "line": 104,
        "fullcodeline": "size = size - p->offset;"
    },
    {
        "line": 106,
        "fullcodeline": "toread = FFMIN(size, chunk_size);"
    },
    {
        "line": 111,
        "fullcodeline": "size      -= toread;"
    },
    {
        "line": 112,
        "fullcodeline": "p->read   += toread;"
    },
    {
        "line": 113,
        "fullcodeline": "p->offset += toread;"
    },
    {
        "line": 18,
        "fullcodeline": "if (channel_id < 2) { //special case for channel number >= 64"
    },
    {
        "line": 34,
        "fullcodeline": "if (hdr == RTMP_PS_ONEBYTE) {"
    },
    {
        "line": 58,
        "fullcodeline": "if (ts_field == 0xFFFFFF) {"
    },
    {
        "line": 68,
        "fullcodeline": "if (prev_pkt[channel_id].read && size != prev_pkt[channel_id].size) {"
    },
    {
        "line": 76,
        "fullcodeline": "if (!prev_pkt[channel_id].read) {"
    },
    {
        "line": 107,
        "fullcodeline": "if (ffurl_read_complete(h, p->data + p->offset, toread) != toread) {"
    },
    {
        "line": 19,
        "fullcodeline": "buf[1] = 0;"
    },
    {
        "line": 22,
        "fullcodeline": "written += channel_id + 1;"
    },
    {
        "line": 23,
        "fullcodeline": "channel_id = AV_RL16(buf) + 64;"
    },
    {
        "line": 25,
        "fullcodeline": "if ((ret = ff_rtmp_check_alloc_array(prev_pkt_ptr, nb_prev_pkt,"
    },
    {
        "line": 35,
        "fullcodeline": "ts_field = prev_pkt[channel_id].ts_field;"
    },
    {
        "line": 61,
        "fullcodeline": "timestamp = AV_RB32(buf);"
    },
    {
        "line": 66,
        "fullcodeline": "timestamp += prev_pkt[channel_id].timestamp;"
    },
    {
        "line": 69,
        "fullcodeline": "av_log(NULL, AV_LOG_ERROR, \"RTMP packet size mismatch %d != %d\\n\","
    },
    {
        "line": 72,
        "fullcodeline": "ff_rtmp_packet_destroy(&prev_pkt[channel_id]);"
    },
    {
        "line": 73,
        "fullcodeline": "prev_pkt[channel_id].read = 0;"
    },
    {
        "line": 80,
        "fullcodeline": "p->read = written;"
    },
    {
        "line": 81,
        "fullcodeline": "p->offset = 0;"
    },
    {
        "line": 20,
        "fullcodeline": "if (ffurl_read_complete(h, buf, channel_id + 1) != channel_id + 1)"
    },
    {
        "line": 39,
        "fullcodeline": "written += 3;"
    },
    {
        "line": 40,
        "fullcodeline": "ts_field = AV_RB24(buf);"
    },
    {
        "line": 63,
        "fullcodeline": "timestamp = ts_field;"
    },
    {
        "line": 86,
        "fullcodeline": "RTMPPacket *prev = &prev_pkt[channel_id];"
    },
    {
        "line": 87,
        "fullcodeline": "p->data          = prev->data;"
    },
    {
        "line": 88,
        "fullcodeline": "p->size          = prev->size;"
    },
    {
        "line": 89,
        "fullcodeline": "p->channel_id    = prev->channel_id;"
    },
    {
        "line": 90,
        "fullcodeline": "p->type          = prev->type;"
    },
    {
        "line": 91,
        "fullcodeline": "p->ts_field      = prev->ts_field;"
    },
    {
        "line": 93,
        "fullcodeline": "p->offset        = prev->offset;"
    },
    {
        "line": 94,
        "fullcodeline": "p->read          = prev->read + written;"
    },
    {
        "line": 95,
        "fullcodeline": "p->timestamp     = prev->timestamp;"
    },
    {
        "line": 109,
        "fullcodeline": "return AVERROR(EIO);"
    },
    {
        "line": 121,
        "fullcodeline": "return AVERROR(EAGAIN);"
    },
    {
        "line": 41,
        "fullcodeline": "if (hdr != RTMP_PS_FOURBYTES) {"
    },
    {
        "line": 59,
        "fullcodeline": "if (ffurl_read_complete(h, buf, 4) != 4)"
    },
    {
        "line": 77,
        "fullcodeline": "if ((ret = ff_rtmp_packet_create(p, channel_id, type, timestamp,"
    },
    {
        "line": 21,
        "fullcodeline": "return AVERROR(EIO);"
    },
    {
        "line": 37,
        "fullcodeline": "if (ffurl_read_complete(h, buf, 3) != 3)"
    },
    {
        "line": 44,
        "fullcodeline": "written += 3;"
    },
    {
        "line": 45,
        "fullcodeline": "size = AV_RB24(buf);"
    },
    {
        "line": 48,
        "fullcodeline": "written++;"
    },
    {
        "line": 49,
        "fullcodeline": "type = buf[0];"
    },
    {
        "line": 60,
        "fullcodeline": "return AVERROR(EIO);"
    },
    {
        "line": 38,
        "fullcodeline": "return AVERROR(EIO);"
    },
    {
        "line": 50,
        "fullcodeline": "if (hdr == RTMP_PS_TWELVEBYTES) {"
    },
    {
        "line": 42,
        "fullcodeline": "if (ffurl_read_complete(h, buf, 3) != 3)"
    },
    {
        "line": 46,
        "fullcodeline": "if (ffurl_read_complete(h, buf, 1) != 1)"
    },
    {
        "line": 53,
        "fullcodeline": "written += 4;"
    },
    {
        "line": 54,
        "fullcodeline": "extra = AV_RL32(buf);"
    },
    {
        "line": 43,
        "fullcodeline": "return AVERROR(EIO);"
    },
    {
        "line": 47,
        "fullcodeline": "return AVERROR(EIO);"
    },
    {
        "line": 51,
        "fullcodeline": "if (ffurl_read_complete(h, buf, 4) != 4)"
    },
    {
        "line": 52,
        "fullcodeline": "return AVERROR(EIO);"
    }
]