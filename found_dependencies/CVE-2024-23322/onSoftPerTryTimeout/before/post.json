[
    {
        "line": 4,
        "fullcodeline": "updateOutlierDetection(Upstream::Outlier::Result::LocalOriginTimeout, upstream_request,"
    },
    {
        "line": 6,
        "fullcodeline": "upstream_request.outlierDetectionTimeoutRecorded(true);"
    },
    {
        "line": 5,
        "fullcodeline": "absl::optional<uint64_t>(enumToInt(timeout_response_code_)));"
    },
    {
        "line": 8,
        "fullcodeline": "if (!downstream_response_started_ && retry_state_) {"
    },
    {
        "line": 9,
        "fullcodeline": "RetryStatus retry_status = retry_state_->shouldHedgeRetryPerTryTimeout("
    },
    {
        "line": 17,
        "fullcodeline": "if (retry_status == RetryStatus::Yes) {"
    },
    {
        "line": 18,
        "fullcodeline": "runRetryOptionsPredicates(upstream_request);"
    },
    {
        "line": 19,
        "fullcodeline": "pending_retries_++;"
    },
    {
        "line": 24,
        "fullcodeline": "upstream_request.retried(true);"
    },
    {
        "line": 27,
        "fullcodeline": "} else if (retry_status == RetryStatus::NoOverflow) {"
    },
    {
        "line": 28,
        "fullcodeline": "callbacks_->streamInfo().setResponseFlag(StreamInfo::CoreResponseFlag::UpstreamOverflow);"
    },
    {
        "line": 29,
        "fullcodeline": "} else if (retry_status == RetryStatus::NoRetryLimitExceeded) {"
    },
    {
        "line": 30,
        "fullcodeline": "callbacks_->streamInfo().setResponseFlag("
    }
]