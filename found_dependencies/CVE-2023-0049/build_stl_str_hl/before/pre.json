[
    {
        "line": 50,
        "fullcodeline": "char_u\tbuf_tmp[TMPLEN];"
    },
    {
        "line": 51,
        "fullcodeline": "char_u\twin_tmp[TMPLEN];"
    },
    {
        "line": 52,
        "fullcodeline": "char_u\t*usefmt = fmt;"
    },
    {
        "line": 54,
        "fullcodeline": "int\t\tsave_redraw_not_allowed = redraw_not_allowed;"
    },
    {
        "line": 55,
        "fullcodeline": "int\t\tsave_KeyTyped = KeyTyped;"
    },
    {
        "line": 59,
        "fullcodeline": "int\t\tdid_emsg_before = did_emsg;"
    },
    {
        "line": 105,
        "fullcodeline": "lnum = wp->w_cursor.lnum;"
    },
    {
        "line": 114,
        "fullcodeline": "p = ml_get_buf(wp->w_buffer, lnum, FALSE);"
    },
    {
        "line": 115,
        "fullcodeline": "empty_line = (*p == NUL);"
    },
    {
        "line": 119,
        "fullcodeline": "len = STRLEN(p);"
    },
    {
        "line": 131,
        "fullcodeline": "groupdepth = 0;"
    },
    {
        "line": 135,
        "fullcodeline": "p = out;"
    },
    {
        "line": 136,
        "fullcodeline": "curitem = 0;"
    },
    {
        "line": 137,
        "fullcodeline": "prevchar_isflag = TRUE;"
    },
    {
        "line": 138,
        "fullcodeline": "prevchar_isitem = FALSE;"
    },
    {
        "line": 816,
        "fullcodeline": "*p = NUL;"
    },
    {
        "line": 817,
        "fullcodeline": "itemcnt = curitem;"
    },
    {
        "line": 824,
        "fullcodeline": "width = vim_strsize(out);"
    },
    {
        "line": 966,
        "fullcodeline": "redraw_not_allowed = save_redraw_not_allowed;"
    },
    {
        "line": 969,
        "fullcodeline": "KeyTyped = save_KeyTyped;"
    },
    {
        "line": 67,
        "fullcodeline": "if (stl_items == NULL)"
    },
    {
        "line": 100,
        "fullcodeline": "if (fillchar == 0)"
    },
    {
        "line": 106,
        "fullcodeline": "if (lnum > wp->w_buffer->b_ml.ml_line_count)"
    },
    {
        "line": 120,
        "fullcodeline": "if (wp->w_cursor.col > (colnr_T)len)"
    },
    {
        "line": 139,
        "fullcodeline": "for (s = usefmt; *s != NUL; )"
    },
    {
        "line": 825,
        "fullcodeline": "if (maxwidth > 0 && width > maxwidth)"
    },
    {
        "line": 931,
        "fullcodeline": "if (hltab != NULL)"
    },
    {
        "line": 949,
        "fullcodeline": "if (tabtab != NULL)"
    },
    {
        "line": 977,
        "fullcodeline": "if (did_emsg > did_emsg_before)"
    },
    {
        "line": 65,
        "fullcodeline": "redraw_not_allowed = TRUE;"
    },
    {
        "line": 69,
        "fullcodeline": "stl_items = ALLOC_MULT(stl_item_T, stl_items_len);"
    },
    {
        "line": 74,
        "fullcodeline": "stl_hltab  = ALLOC_MULT(stl_hlrec_T, stl_items_len + 1);"
    },
    {
        "line": 75,
        "fullcodeline": "stl_tabtab = ALLOC_MULT(stl_hlrec_T, stl_items_len + 1);"
    },
    {
        "line": 101,
        "fullcodeline": "fillchar = ' ';"
    },
    {
        "line": 108,
        "fullcodeline": "lnum = wp->w_buffer->b_ml.ml_line_count;"
    },
    {
        "line": 109,
        "fullcodeline": "wp->w_cursor.lnum = lnum;"
    },
    {
        "line": 124,
        "fullcodeline": "wp->w_cursor.col = (colnr_T)len;"
    },
    {
        "line": 125,
        "fullcodeline": "wp->w_cursor.coladd = 0;"
    },
    {
        "line": 126,
        "fullcodeline": "byteval = 0;"
    },
    {
        "line": 183,
        "fullcodeline": "s++;"
    },
    {
        "line": 320,
        "fullcodeline": "minwid = 0;"
    },
    {
        "line": 321,
        "fullcodeline": "maxwid = 9999;"
    },
    {
        "line": 322,
        "fullcodeline": "zeropad = FALSE;"
    },
    {
        "line": 323,
        "fullcodeline": "l = 1;"
    },
    {
        "line": 386,
        "fullcodeline": "minwid = (minwid > 50 ? 50 : minwid) * l;"
    },
    {
        "line": 412,
        "fullcodeline": "opt = *s++;"
    },
    {
        "line": 415,
        "fullcodeline": "base = 'D';"
    },
    {
        "line": 416,
        "fullcodeline": "itemisflag = FALSE;"
    },
    {
        "line": 417,
        "fullcodeline": "fillable = TRUE;"
    },
    {
        "line": 418,
        "fullcodeline": "num = -1;"
    },
    {
        "line": 419,
        "fullcodeline": "str = NULL;"
    },
    {
        "line": 706,
        "fullcodeline": "stl_items[curitem].stl_start = p;"
    },
    {
        "line": 707,
        "fullcodeline": "stl_items[curitem].stl_type = Normal;"
    },
    {
        "line": 814,
        "fullcodeline": "curitem++;"
    },
    {
        "line": 828,
        "fullcodeline": "l = 0;"
    },
    {
        "line": 909,
        "fullcodeline": "width = maxwidth;"
    },
    {
        "line": 933,
        "fullcodeline": "*hltab = stl_hltab;"
    },
    {
        "line": 934,
        "fullcodeline": "sp = stl_hltab;"
    },
    {
        "line": 944,
        "fullcodeline": "sp->start = NULL;"
    },
    {
        "line": 945,
        "fullcodeline": "sp->userhl = 0;"
    },
    {
        "line": 951,
        "fullcodeline": "*tabtab = stl_tabtab;"
    },
    {
        "line": 952,
        "fullcodeline": "sp = stl_tabtab;"
    },
    {
        "line": 962,
        "fullcodeline": "sp->start = NULL;"
    },
    {
        "line": 963,
        "fullcodeline": "sp->userhl = 0;"
    },
    {
        "line": 978,
        "fullcodeline": "set_string_option_direct(opt_name, -1, (char_u *)\"\","
    },
    {
        "line": 129,
        "fullcodeline": "byteval = (*mb_ptr2char)(p + wp->w_cursor.col);"
    },
    {
        "line": 141,
        "fullcodeline": "if (curitem == (int)stl_items_len)"
    },
    {
        "line": 169,
        "fullcodeline": "if (*s != '%')"
    },
    {
        "line": 175,
        "fullcodeline": "while (*s != NUL && *s != '%' && p + 1 < out + outlen)"
    },
    {
        "line": 176,
        "fullcodeline": "*p++ = *s++;"
    },
    {
        "line": 177,
        "fullcodeline": "if (*s == NUL || p + 1 >= out + outlen)"
    },
    {
        "line": 184,
        "fullcodeline": "if (*s == NUL)  // ignore trailing %"
    },
    {
        "line": 186,
        "fullcodeline": "if (*s == '%')"
    },
    {
        "line": 194,
        "fullcodeline": "if (*s == STL_MIDDLEMARK)"
    },
    {
        "line": 203,
        "fullcodeline": "if (*s == STL_TRUNCMARK)"
    },
    {
        "line": 210,
        "fullcodeline": "if (*s == ')')"
    },
    {
        "line": 324,
        "fullcodeline": "if (*s == '0')"
    },
    {
        "line": 329,
        "fullcodeline": "if (*s == '-')"
    },
    {
        "line": 334,
        "fullcodeline": "if (VIM_ISDIGIT(*s))"
    },
    {
        "line": 340,
        "fullcodeline": "if (*s == STL_USER_HL)"
    },
    {
        "line": 349,
        "fullcodeline": "if (*s == STL_TABPAGENR || *s == STL_TABCLOSENR)"
    },
    {
        "line": 376,
        "fullcodeline": "if (*s == '.')"
    },
    {
        "line": 387,
        "fullcodeline": "if (*s == '(')"
    },
    {
        "line": 407,
        "fullcodeline": "if (vim_strchr(STL_ALL, *s) == NULL)"
    },
    {
        "line": 708,
        "fullcodeline": "if (str != NULL && *str)"
    },
    {
        "line": 809,
        "fullcodeline": "if (num >= 0 || (!itemisflag && str != NULL && *str != NUL))"
    },
    {
        "line": 812,
        "fullcodeline": "if (opt == STL_VIM_EXPR)"
    },
    {
        "line": 829,
        "fullcodeline": "if (itemcnt == 0)"
    },
    {
        "line": 848,
        "fullcodeline": "if (width - vim_strsize(s) >= maxwidth)"
    },
    {
        "line": 935,
        "fullcodeline": "for (l = 0; l < itemcnt; l++)"
    },
    {
        "line": 953,
        "fullcodeline": "for (l = 0; l < itemcnt; l++)"
    },
    {
        "line": 979,
        "fullcodeline": "OPT_FREE | opt_scope, SID_ERROR);"
    },
    {
        "line": 143,
        "fullcodeline": "size_t\tnew_len = stl_items_len * 3 / 2;"
    },
    {
        "line": 148,
        "fullcodeline": "new_items = vim_realloc(stl_items, sizeof(stl_item_T) * new_len);"
    },
    {
        "line": 151,
        "fullcodeline": "stl_items = new_items;"
    },
    {
        "line": 152,
        "fullcodeline": "new_groupitem = vim_realloc(stl_groupitem, sizeof(int) * new_len);"
    },
    {
        "line": 155,
        "fullcodeline": "stl_groupitem = new_groupitem;"
    },
    {
        "line": 156,
        "fullcodeline": "new_hlrec = vim_realloc(stl_hltab,"
    },
    {
        "line": 160,
        "fullcodeline": "stl_hltab = new_hlrec;"
    },
    {
        "line": 161,
        "fullcodeline": "new_hlrec = vim_realloc(stl_tabtab,"
    },
    {
        "line": 165,
        "fullcodeline": "stl_tabtab = new_hlrec;"
    },
    {
        "line": 166,
        "fullcodeline": "stl_items_len = new_len;"
    },
    {
        "line": 170,
        "fullcodeline": "prevchar_isflag = prevchar_isitem = FALSE;"
    },
    {
        "line": 190,
        "fullcodeline": "*p++ = *s++;"
    },
    {
        "line": 191,
        "fullcodeline": "prevchar_isflag = prevchar_isitem = FALSE;"
    },
    {
        "line": 196,
        "fullcodeline": "s++;"
    },
    {
        "line": 199,
        "fullcodeline": "stl_items[curitem].stl_type = Middle;"
    },
    {
        "line": 200,
        "fullcodeline": "stl_items[curitem++].stl_start = p;"
    },
    {
        "line": 205,
        "fullcodeline": "s++;"
    },
    {
        "line": 206,
        "fullcodeline": "stl_items[curitem].stl_type = Trunc;"
    },
    {
        "line": 207,
        "fullcodeline": "stl_items[curitem++].stl_start = p;"
    },
    {
        "line": 212,
        "fullcodeline": "s++;"
    },
    {
        "line": 215,
        "fullcodeline": "groupdepth--;"
    },
    {
        "line": 217,
        "fullcodeline": "t = stl_items[stl_groupitem[groupdepth]].stl_start;"
    },
    {
        "line": 218,
        "fullcodeline": "*p = NUL;"
    },
    {
        "line": 219,
        "fullcodeline": "l = vim_strsize(t);"
    },
    {
        "line": 326,
        "fullcodeline": "s++;"
    },
    {
        "line": 327,
        "fullcodeline": "zeropad = TRUE;"
    },
    {
        "line": 331,
        "fullcodeline": "s++;"
    },
    {
        "line": 332,
        "fullcodeline": "l = -1;"
    },
    {
        "line": 336,
        "fullcodeline": "minwid = (int)getdigits(&s);"
    },
    {
        "line": 342,
        "fullcodeline": "stl_items[curitem].stl_type = Highlight;"
    },
    {
        "line": 343,
        "fullcodeline": "stl_items[curitem].stl_start = p;"
    },
    {
        "line": 344,
        "fullcodeline": "stl_items[curitem].stl_minwid = minwid > 9 ? 1 : minwid;"
    },
    {
        "line": 345,
        "fullcodeline": "s++;"
    },
    {
        "line": 346,
        "fullcodeline": "curitem++;"
    },
    {
        "line": 369,
        "fullcodeline": "stl_items[curitem].stl_type = TabPage;"
    },
    {
        "line": 370,
        "fullcodeline": "stl_items[curitem].stl_start = p;"
    },
    {
        "line": 371,
        "fullcodeline": "stl_items[curitem].stl_minwid = minwid;"
    },
    {
        "line": 372,
        "fullcodeline": "s++;"
    },
    {
        "line": 373,
        "fullcodeline": "curitem++;"
    },
    {
        "line": 378,
        "fullcodeline": "s++;"
    },
    {
        "line": 389,
        "fullcodeline": "stl_groupitem[groupdepth++] = curitem;"
    },
    {
        "line": 390,
        "fullcodeline": "stl_items[curitem].stl_type = Group;"
    },
    {
        "line": 391,
        "fullcodeline": "stl_items[curitem].stl_start = p;"
    },
    {
        "line": 392,
        "fullcodeline": "stl_items[curitem].stl_minwid = minwid;"
    },
    {
        "line": 393,
        "fullcodeline": "stl_items[curitem].stl_maxwid = maxwid;"
    },
    {
        "line": 394,
        "fullcodeline": "s++;"
    },
    {
        "line": 395,
        "fullcodeline": "curitem++;"
    },
    {
        "line": 409,
        "fullcodeline": "s++;"
    },
    {
        "line": 425,
        "fullcodeline": "fillable = FALSE;\t// don't change ' ' to fillchar"
    },
    {
        "line": 434,
        "fullcodeline": "trans_characters(NameBuff, MAXPATHL);"
    },
    {
        "line": 533,
        "fullcodeline": "num = (wp->w_buffer->b_ml.ml_flags & ML_EMPTY)"
    },
    {
        "line": 538,
        "fullcodeline": "num = wp->w_buffer->b_ml.ml_line_count;"
    },
    {
        "line": 542,
        "fullcodeline": "num = (State & MODE_INSERT) == 0 && empty_line"
    },
    {
        "line": 548,
        "fullcodeline": "virtcol = wp->w_virtcol + 1;"
    },
    {
        "line": 554,
        "fullcodeline": "num = (long)virtcol;"
    },
    {
        "line": 558,
        "fullcodeline": "num = (int)(((long)wp->w_cursor.lnum * 100L) /"
    },
    {
        "line": 563,
        "fullcodeline": "str = buf_tmp;"
    },
    {
        "line": 564,
        "fullcodeline": "get_rel_pos(wp, str, TMPLEN);"
    },
    {
        "line": 573,
        "fullcodeline": "fillable = FALSE;"
    },
    {
        "line": 574,
        "fullcodeline": "buf_tmp[0] = 0;"
    },
    {
        "line": 580,
        "fullcodeline": "fillable = FALSE;"
    },
    {
        "line": 588,
        "fullcodeline": "num = 0;"
    },
    {
        "line": 593,
        "fullcodeline": "num = wp->w_buffer->b_fnum;"
    },
    {
        "line": 597,
        "fullcodeline": "base = 'X';"
    },
    {
        "line": 609,
        "fullcodeline": "base = 'X';"
    },
    {
        "line": 612,
        "fullcodeline": "num = byteval;"
    },
    {
        "line": 621,
        "fullcodeline": "itemisflag = TRUE;"
    },
    {
        "line": 628,
        "fullcodeline": "itemisflag = TRUE;"
    },
    {
        "line": 645,
        "fullcodeline": "itemisflag = TRUE;"
    },
    {
        "line": 676,
        "fullcodeline": "itemisflag = TRUE;"
    },
    {
        "line": 691,
        "fullcodeline": "t = s;"
    },
    {
        "line": 710,
        "fullcodeline": "t = str;"
    },
    {
        "line": 719,
        "fullcodeline": "l = vim_strsize(t);"
    },
    {
        "line": 810,
        "fullcodeline": "prevchar_isflag = FALSE;\t    // Item not NULL, but not a flag"
    },
    {
        "line": 813,
        "fullcodeline": "vim_free(str);"
    },
    {
        "line": 830,
        "fullcodeline": "s = out;"
    },
    {
        "line": 871,
        "fullcodeline": "itemcnt = l;"
    },
    {
        "line": 872,
        "fullcodeline": "*s++ = '>';"
    },
    {
        "line": 873,
        "fullcodeline": "*s = 0;"
    },
    {
        "line": 911,
        "fullcodeline": "else if (width < maxwidth && STRLEN(out) + maxwidth - width + 1 < outlen)"
    },
    {
        "line": 149,
        "fullcodeline": "if (new_items == NULL)"
    },
    {
        "line": 153,
        "fullcodeline": "if (new_groupitem == NULL)"
    },
    {
        "line": 158,
        "fullcodeline": "if (new_hlrec == NULL)"
    },
    {
        "line": 163,
        "fullcodeline": "if (new_hlrec == NULL)"
    },
    {
        "line": 188,
        "fullcodeline": "if (p + 1 >= out + outlen)"
    },
    {
        "line": 197,
        "fullcodeline": "if (groupdepth > 0)"
    },
    {
        "line": 213,
        "fullcodeline": "if (groupdepth < 1)"
    },
    {
        "line": 220,
        "fullcodeline": "if (curitem > stl_groupitem[groupdepth] + 1"
    },
    {
        "line": 259,
        "fullcodeline": "if (l > stl_items[stl_groupitem[groupdepth]].stl_maxwid)"
    },
    {
        "line": 337,
        "fullcodeline": "if (minwid < 0)\t// overflow"
    },
    {
        "line": 351,
        "fullcodeline": "if (*s == STL_TABCLOSENR)"
    },
    {
        "line": 379,
        "fullcodeline": "if (VIM_ISDIGIT(*s))"
    },
    {
        "line": 426,
        "fullcodeline": "if (buf_spname(wp->w_buffer) != NULL)"
    },
    {
        "line": 435,
        "fullcodeline": "if (opt != STL_FILENAME)"
    },
    {
        "line": 446,
        "fullcodeline": "int reevaluate = (*s == '%');"
    },
    {
        "line": 450,
        "fullcodeline": "itemisflag = TRUE;"
    },
    {
        "line": 451,
        "fullcodeline": "t = p;"
    },
    {
        "line": 457,
        "fullcodeline": "s++;"
    },
    {
        "line": 462,
        "fullcodeline": "p = t;"
    },
    {
        "line": 550,
        "fullcodeline": "if (opt == STL_VIRTCOL_ALT"
    },
    {
        "line": 568,
        "fullcodeline": "if (p_sc && STRCMP(opt_name, p_sloc) == 0)"
    },
    {
        "line": 575,
        "fullcodeline": "if (append_arg_number(wp, buf_tmp, (int)sizeof(buf_tmp), FALSE))"
    },
    {
        "line": 581,
        "fullcodeline": "if (get_keymap_str(wp, (char_u *)\"<%s>\", buf_tmp, TMPLEN))"
    },
    {
        "line": 613,
        "fullcodeline": "if (num == NL)"
    },
    {
        "line": 635,
        "fullcodeline": "if (*wp->w_buffer->b_p_ft != NUL"
    },
    {
        "line": 646,
        "fullcodeline": "if (*wp->w_buffer->b_p_ft != NUL"
    },
    {
        "line": 677,
        "fullcodeline": "switch ((opt == STL_MODIFIED_ALT)"
    },
    {
        "line": 692,
        "fullcodeline": "while (*s != '#' && *s != NUL)"
    },
    {
        "line": 693,
        "fullcodeline": "++s;"
    },
    {
        "line": 694,
        "fullcodeline": "if (*s == '#')"
    },
    {
        "line": 701,
        "fullcodeline": "if (*s != NUL)"
    },
    {
        "line": 720,
        "fullcodeline": "if (l > 0)"
    },
    {
        "line": 722,
        "fullcodeline": "if (l > maxwid)"
    },
    {
        "line": 736,
        "fullcodeline": "if (minwid > 0)"
    },
    {
        "line": 750,
        "fullcodeline": "for (; *t && p + 1 < out + outlen; t++)"
    },
    {
        "line": 760,
        "fullcodeline": "for (; l < minwid && p + 1 < out + outlen; l++)"
    },
    {
        "line": 761,
        "fullcodeline": "MB_CHAR2BYTES(fillchar, p);"
    },
    {
        "line": 868,
        "fullcodeline": "for (l = 0; l < itemcnt; l++)"
    },
    {
        "line": 888,
        "fullcodeline": "p = s + n;"
    },
    {
        "line": 889,
        "fullcodeline": "STRMOVE(s + 1, p);"
    },
    {
        "line": 890,
        "fullcodeline": "*s = '<';"
    },
    {
        "line": 900,
        "fullcodeline": "--n;\t// count the '<'"
    },
    {
        "line": 937,
        "fullcodeline": "if (stl_items[l].stl_type == Highlight)"
    },
    {
        "line": 955,
        "fullcodeline": "if (stl_items[l].stl_type == TabPage)"
    },
    {
        "line": 157,
        "fullcodeline": "sizeof(stl_hlrec_T) * (new_len + 1));"
    },
    {
        "line": 162,
        "fullcodeline": "sizeof(stl_hlrec_T) * (new_len + 1));"
    },
    {
        "line": 221,
        "fullcodeline": "&& stl_items[stl_groupitem[groupdepth]].stl_minwid == 0)"
    },
    {
        "line": 225,
        "fullcodeline": "group_start_userhl = group_end_userhl = 0;"
    },
    {
        "line": 276,
        "fullcodeline": "*t = '<';"
    },
    {
        "line": 277,
        "fullcodeline": "mch_memmove(t + 1, t + n, (size_t)(p - (t + n)));"
    },
    {
        "line": 278,
        "fullcodeline": "p = p - n + 1;"
    },
    {
        "line": 338,
        "fullcodeline": "minwid = 0;"
    },
    {
        "line": 381,
        "fullcodeline": "maxwid = (int)getdigits(&s);"
    },
    {
        "line": 427,
        "fullcodeline": "vim_strncpy(NameBuff, buf_spname(wp->w_buffer), MAXPATHL - 1);"
    },
    {
        "line": 436,
        "fullcodeline": "str = NameBuff;"
    },
    {
        "line": 452,
        "fullcodeline": "while ((*s != '}' || (reevaluate && s[-1] != '%'))"
    },
    {
        "line": 454,
        "fullcodeline": "*p++ = *s++;"
    },
    {
        "line": 455,
        "fullcodeline": "if (*s != '}')\t// missing '}' or out of space"
    },
    {
        "line": 534,
        "fullcodeline": "? 0L : (long)(wp->w_cursor.lnum);"
    },
    {
        "line": 543,
        "fullcodeline": "? 0 : (int)wp->w_cursor.col + 1;"
    },
    {
        "line": 551,
        "fullcodeline": "&& (virtcol == (colnr_T)((State & MODE_INSERT) == 0"
    },
    {
        "line": 569,
        "fullcodeline": "str = showcmd_buf;"
    },
    {
        "line": 576,
        "fullcodeline": "str = buf_tmp;"
    },
    {
        "line": 582,
        "fullcodeline": "str = buf_tmp;"
    },
    {
        "line": 614,
        "fullcodeline": "num = 0;"
    },
    {
        "line": 623,
        "fullcodeline": "str = (char_u *)((opt == STL_ROFLAG_ALT) ? \",RO\" : _(\"[RO]\"));"
    },
    {
        "line": 630,
        "fullcodeline": "str = (char_u *)((opt == STL_HELPFLAG_ALT) ? \",HLP\""
    },
    {
        "line": 636,
        "fullcodeline": "&& STRLEN(wp->w_buffer->b_p_ft) < TMPLEN - 3)"
    },
    {
        "line": 638,
        "fullcodeline": "vim_snprintf((char *)buf_tmp, sizeof(buf_tmp), \"[%s]\","
    },
    {
        "line": 640,
        "fullcodeline": "str = buf_tmp;"
    },
    {
        "line": 647,
        "fullcodeline": "&& STRLEN(wp->w_buffer->b_p_ft) < TMPLEN - 2)"
    },
    {
        "line": 649,
        "fullcodeline": "vim_snprintf((char *)buf_tmp, sizeof(buf_tmp), \",%s\","
    },
    {
        "line": 653,
        "fullcodeline": "str = buf_tmp;"
    },
    {
        "line": 679,
        "fullcodeline": "+ (!wp->w_buffer->b_p_ma) * 4)"
    },
    {
        "line": 681,
        "fullcodeline": "case 2: str = (char_u *)\"[+]\"; break;"
    },
    {
        "line": 682,
        "fullcodeline": "case 3: str = (char_u *)\",+\"; break;"
    },
    {
        "line": 683,
        "fullcodeline": "case 4: str = (char_u *)\"[-]\"; break;"
    },
    {
        "line": 684,
        "fullcodeline": "case 5: str = (char_u *)\",-\"; break;"
    },
    {
        "line": 685,
        "fullcodeline": "case 6: str = (char_u *)\"[+-]\"; break;"
    },
    {
        "line": 686,
        "fullcodeline": "case 7: str = (char_u *)\",+-\"; break;"
    },
    {
        "line": 696,
        "fullcodeline": "stl_items[curitem].stl_type = Highlight;"
    },
    {
        "line": 697,
        "fullcodeline": "stl_items[curitem].stl_start = p;"
    },
    {
        "line": 698,
        "fullcodeline": "stl_items[curitem].stl_minwid = -syn_namen2id(t, (int)(s - t));"
    },
    {
        "line": 699,
        "fullcodeline": "curitem++;"
    },
    {
        "line": 702,
        "fullcodeline": "++s;"
    },
    {
        "line": 717,
        "fullcodeline": "prevchar_isflag = TRUE;"
    },
    {
        "line": 721,
        "fullcodeline": "prevchar_isitem = TRUE;"
    },
    {
        "line": 734,
        "fullcodeline": "*p++ = '<';"
    },
    {
        "line": 746,
        "fullcodeline": "minwid = 0;"
    },
    {
        "line": 763,
        "fullcodeline": "else if (num >= 0)"
    },
    {
        "line": 833,
        "fullcodeline": "for ( ; l < itemcnt; l++)"
    },
    {
        "line": 840,
        "fullcodeline": "if (l == itemcnt)"
    },
    {
        "line": 853,
        "fullcodeline": "s = out;"
    },
    {
        "line": 854,
        "fullcodeline": "width = 0;"
    },
    {
        "line": 869,
        "fullcodeline": "if (stl_items[l].stl_start > s)"
    },
    {
        "line": 893,
        "fullcodeline": "while (++width < maxwidth)"
    },
    {
        "line": 901,
        "fullcodeline": "for (; l < itemcnt; l++)"
    },
    {
        "line": 914,
        "fullcodeline": "for (l = 0; l < itemcnt; l++)"
    },
    {
        "line": 917,
        "fullcodeline": "if (l < itemcnt)"
    },
    {
        "line": 939,
        "fullcodeline": "sp->start = stl_items[l].stl_start;"
    },
    {
        "line": 940,
        "fullcodeline": "sp->userhl = stl_items[l].stl_minwid;"
    },
    {
        "line": 941,
        "fullcodeline": "sp++;"
    },
    {
        "line": 957,
        "fullcodeline": "sp->start = stl_items[l].stl_start;"
    },
    {
        "line": 958,
        "fullcodeline": "sp->userhl = stl_items[l].stl_minwid;"
    },
    {
        "line": 959,
        "fullcodeline": "sp++;"
    },
    {
        "line": 226,
        "fullcodeline": "for (n = stl_groupitem[groupdepth] - 1; n >= 0; n--)"
    },
    {
        "line": 235,
        "fullcodeline": "for (n = stl_groupitem[groupdepth] + 1; n < curitem; n++)"
    },
    {
        "line": 242,
        "fullcodeline": "if (n == curitem && group_start_userhl == group_end_userhl)"
    },
    {
        "line": 281,
        "fullcodeline": "while (++l < stl_items[stl_groupitem[groupdepth]].stl_minwid)"
    },
    {
        "line": 282,
        "fullcodeline": "MB_CHAR2BYTES(fillchar, p);"
    },
    {
        "line": 285,
        "fullcodeline": "for (l = stl_groupitem[groupdepth] + 1; l < curitem; l++)"
    },
    {
        "line": 353,
        "fullcodeline": "if (minwid == 0)"
    },
    {
        "line": 382,
        "fullcodeline": "if (maxwid <= 0)\t// overflow"
    },
    {
        "line": 430,
        "fullcodeline": "t = (opt == STL_FULLPATH) ? wp->w_buffer->b_ffname"
    },
    {
        "line": 432,
        "fullcodeline": "home_replace(wp->w_buffer, t, NameBuff, MAXPATHL, TRUE);"
    },
    {
        "line": 438,
        "fullcodeline": "str = gettail(NameBuff);"
    },
    {
        "line": 449,
        "fullcodeline": "s++;"
    },
    {
        "line": 453,
        "fullcodeline": "&& *s != NUL && p + 1 < out + outlen)"
    },
    {
        "line": 459,
        "fullcodeline": "p[-1] = 0; // remove the % at the end of %{% expr %}"
    },
    {
        "line": 559,
        "fullcodeline": "(long)wp->w_buffer->b_ml.ml_line_count);"
    },
    {
        "line": 651,
        "fullcodeline": "for (t = buf_tmp; *t != 0; t++)"
    },
    {
        "line": 652,
        "fullcodeline": "*t = TOUPPER_LOC(*t);"
    },
    {
        "line": 678,
        "fullcodeline": "+ bufIsChanged(wp->w_buffer) * 2"
    },
    {
        "line": 713,
        "fullcodeline": "if ((t[0] && t[1])"
    },
    {
        "line": 724,
        "fullcodeline": "while (l >= maxwid)"
    },
    {
        "line": 732,
        "fullcodeline": "if (p + 1 >= out + outlen)"
    },
    {
        "line": 738,
        "fullcodeline": "for (; l < minwid && p + 1 < out + outlen; l++)"
    },
    {
        "line": 749,
        "fullcodeline": "minwid *= -1;"
    },
    {
        "line": 754,
        "fullcodeline": "if (fillable && *t == ' '"
    },
    {
        "line": 765,
        "fullcodeline": "int nbase = (base == 'D' ? 10 : (base == 'O' ? 8 : 16));"
    },
    {
        "line": 766,
        "fullcodeline": "char_u nstr[20];"
    },
    {
        "line": 770,
        "fullcodeline": "prevchar_isitem = TRUE;"
    },
    {
        "line": 771,
        "fullcodeline": "t = nstr;"
    },
    {
        "line": 777,
        "fullcodeline": "*t++ = '%';"
    },
    {
        "line": 780,
        "fullcodeline": "*t++ = '*';"
    },
    {
        "line": 781,
        "fullcodeline": "*t++ = nbase == 16 ? base : (char_u)(nbase == 8 ? 'o' : 'd');"
    },
    {
        "line": 782,
        "fullcodeline": "*t = 0;"
    },
    {
        "line": 804,
        "fullcodeline": "p += STRLEN(p);"
    },
    {
        "line": 834,
        "fullcodeline": "if (stl_items[l].stl_type == Trunc)"
    },
    {
        "line": 843,
        "fullcodeline": "s = stl_items[0].stl_start;"
    },
    {
        "line": 844,
        "fullcodeline": "l = 0;"
    },
    {
        "line": 863,
        "fullcodeline": "while (++width < maxwidth)"
    },
    {
        "line": 864,
        "fullcodeline": "MB_CHAR2BYTES(fillchar, s);"
    },
    {
        "line": 867,
        "fullcodeline": "s = out + maxwidth - 1;"
    },
    {
        "line": 879,
        "fullcodeline": "n = 0;"
    },
    {
        "line": 895,
        "fullcodeline": "s = s + STRLEN(s);"
    },
    {
        "line": 896,
        "fullcodeline": "MB_CHAR2BYTES(fillchar, s);"
    },
    {
        "line": 897,
        "fullcodeline": "*s = NUL;"
    },
    {
        "line": 915,
        "fullcodeline": "if (stl_items[l].stl_type == Middle)"
    },
    {
        "line": 919,
        "fullcodeline": "int middlelength = (maxwidth - width) * MB_CHAR2LEN(fillchar);"
    },
    {
        "line": 920,
        "fullcodeline": "p = stl_items[l].stl_start + middlelength;"
    },
    {
        "line": 921,
        "fullcodeline": "STRMOVE(p, stl_items[l].stl_start);"
    },
    {
        "line": 926,
        "fullcodeline": "width = maxwidth;"
    },
    {
        "line": 245,
        "fullcodeline": "p = t;"
    },
    {
        "line": 246,
        "fullcodeline": "l = 0;"
    },
    {
        "line": 265,
        "fullcodeline": "n = 0;"
    },
    {
        "line": 288,
        "fullcodeline": "stl_items[l].stl_start -= n - 1;"
    },
    {
        "line": 293,
        "fullcodeline": "else if (abs(stl_items[stl_groupitem[groupdepth]].stl_minwid) > l)"
    },
    {
        "line": 383,
        "fullcodeline": "maxwid = 50;"
    },
    {
        "line": 461,
        "fullcodeline": "*p = 0;"
    },
    {
        "line": 615,
        "fullcodeline": "else if (num == CAR && get_fileformat(wp->w_buffer) == EOL_MAC)"
    },
    {
        "line": 714,
        "fullcodeline": "&& ((!prevchar_isitem && *t == ',')"
    },
    {
        "line": 716,
        "fullcodeline": "t++;"
    },
    {
        "line": 755,
        "fullcodeline": "&& (!VIM_ISDIGIT(*(t + 1)) || fillchar != '-'))"
    },
    {
        "line": 756,
        "fullcodeline": "MB_CHAR2BYTES(fillchar, p);"
    },
    {
        "line": 768,
        "fullcodeline": "if (p + 20 >= out + outlen)"
    },
    {
        "line": 772,
        "fullcodeline": "if (opt == STL_VIRTCOL_ALT)"
    },
    {
        "line": 784,
        "fullcodeline": "for (n = num, l = 1; n >= nbase; n /= nbase)"
    },
    {
        "line": 785,
        "fullcodeline": "l++;"
    },
    {
        "line": 786,
        "fullcodeline": "if (opt == STL_VIRTCOL_ALT)"
    },
    {
        "line": 788,
        "fullcodeline": "if (l > maxwid)"
    },
    {
        "line": 807,
        "fullcodeline": "stl_items[curitem].stl_type = Empty;"
    },
    {
        "line": 837,
        "fullcodeline": "s = stl_items[l].stl_start;"
    },
    {
        "line": 857,
        "fullcodeline": "width += ptr2cells(s);"
    },
    {
        "line": 860,
        "fullcodeline": "s += (*mb_ptr2len)(s);"
    },
    {
        "line": 880,
        "fullcodeline": "while (width >= maxwidth)"
    },
    {
        "line": 887,
        "fullcodeline": "n = width - maxwidth + 1;"
    },
    {
        "line": 903,
        "fullcodeline": "if (stl_items[l].stl_start - n >= s)"
    },
    {
        "line": 922,
        "fullcodeline": "for (s = stl_items[l].stl_start; s < p;)"
    },
    {
        "line": 923,
        "fullcodeline": "MB_CHAR2BYTES(fillchar, s);"
    },
    {
        "line": 924,
        "fullcodeline": "for (l++; l < itemcnt; l++)"
    },
    {
        "line": 925,
        "fullcodeline": "stl_items[l].stl_start += middlelength;"
    },
    {
        "line": 228,
        "fullcodeline": "if (stl_items[n].stl_type == Highlight)"
    },
    {
        "line": 237,
        "fullcodeline": "if (stl_items[n].stl_type == Normal)"
    },
    {
        "line": 239,
        "fullcodeline": "if (stl_items[n].stl_type == Highlight)"
    },
    {
        "line": 247,
        "fullcodeline": "for (n = stl_groupitem[groupdepth] + 1; n < curitem; n++)"
    },
    {
        "line": 266,
        "fullcodeline": "while (l >= stl_items[stl_groupitem[groupdepth]].stl_maxwid)"
    },
    {
        "line": 273,
        "fullcodeline": "n = (long)(p - t) - stl_items[stl_groupitem[groupdepth]]"
    },
    {
        "line": 289,
        "fullcodeline": "if (stl_items[l].stl_start < t)"
    },
    {
        "line": 296,
        "fullcodeline": "n = stl_items[stl_groupitem[groupdepth]].stl_minwid;"
    },
    {
        "line": 357,
        "fullcodeline": "for (n = curitem - 1; n >= 0; --n)"
    },
    {
        "line": 367,
        "fullcodeline": "minwid = - minwid;"
    },
    {
        "line": 552,
        "fullcodeline": "&& empty_line ? 0 : (int)wp->w_cursor.col + 1)))"
    },
    {
        "line": 616,
        "fullcodeline": "num = NL;"
    },
    {
        "line": 631,
        "fullcodeline": ": _(\"[Help]\"));"
    },
    {
        "line": 715,
        "fullcodeline": "|| (prevchar_isflag && *t == ' ')))"
    },
    {
        "line": 727,
        "fullcodeline": "l -= ptr2cells(t);"
    },
    {
        "line": 728,
        "fullcodeline": "t += (*mb_ptr2len)(t);"
    },
    {
        "line": 741,
        "fullcodeline": "if (l + 1 == minwid && fillchar == '-' && VIM_ISDIGIT(*t))"
    },
    {
        "line": 758,
        "fullcodeline": "*p++ = *t;"
    },
    {
        "line": 774,
        "fullcodeline": "*t++ = '-';"
    },
    {
        "line": 775,
        "fullcodeline": "minwid--;"
    },
    {
        "line": 779,
        "fullcodeline": "*t++ = '0';"
    },
    {
        "line": 787,
        "fullcodeline": "l++;"
    },
    {
        "line": 790,
        "fullcodeline": "l += 2;"
    },
    {
        "line": 791,
        "fullcodeline": "n = l - maxwid;"
    },
    {
        "line": 794,
        "fullcodeline": "*t++ = '>';"
    },
    {
        "line": 795,
        "fullcodeline": "*t++ = '%';"
    },
    {
        "line": 796,
        "fullcodeline": "*t = t[-3];"
    },
    {
        "line": 797,
        "fullcodeline": "*++t = 0;"
    },
    {
        "line": 798,
        "fullcodeline": "vim_snprintf((char *)p, outlen - (p - out), (char *)nstr,"
    },
    {
        "line": 858,
        "fullcodeline": "if (width >= maxwidth)"
    },
    {
        "line": 882,
        "fullcodeline": "width -= ptr2cells(s + n);"
    },
    {
        "line": 883,
        "fullcodeline": "n += (*mb_ptr2len)(s + n);"
    },
    {
        "line": 904,
        "fullcodeline": "stl_items[l].stl_start -= n;"
    },
    {
        "line": 230,
        "fullcodeline": "group_start_userhl = group_end_userhl ="
    },
    {
        "line": 240,
        "fullcodeline": "group_end_userhl = stl_items[n].stl_minwid;"
    },
    {
        "line": 268,
        "fullcodeline": "l -= ptr2cells(t + n);"
    },
    {
        "line": 269,
        "fullcodeline": "n += (*mb_ptr2len)(t + n);"
    },
    {
        "line": 290,
        "fullcodeline": "stl_items[l].stl_start = t;"
    },
    {
        "line": 297,
        "fullcodeline": "if (n < 0)"
    },
    {
        "line": 358,
        "fullcodeline": "if (stl_items[n].stl_type == TabPage"
    },
    {
        "line": 731,
        "fullcodeline": "l -= byte2cells(*t++);"
    },
    {
        "line": 742,
        "fullcodeline": "*p++ = ' ';"
    },
    {
        "line": 792,
        "fullcodeline": "while (l-- > maxwid)"
    },
    {
        "line": 793,
        "fullcodeline": "num /= nbase;"
    },
    {
        "line": 802,
        "fullcodeline": "vim_snprintf((char *)p, outlen - (p - out), (char *)nstr,"
    },
    {
        "line": 906,
        "fullcodeline": "stl_items[l].stl_start = s;"
    },
    {
        "line": 250,
        "fullcodeline": "if (stl_items[n].stl_type == Highlight)"
    },
    {
        "line": 254,
        "fullcodeline": "if (stl_items[n].stl_type == TabPage)"
    },
    {
        "line": 300,
        "fullcodeline": "n = 0 - n;"
    },
    {
        "line": 359,
        "fullcodeline": "&& stl_items[n].stl_minwid >= 0)"
    },
    {
        "line": 361,
        "fullcodeline": "minwid = stl_items[n].stl_minwid;"
    },
    {
        "line": 744,
        "fullcodeline": "MB_CHAR2BYTES(fillchar, p);"
    },
    {
        "line": 251,
        "fullcodeline": "stl_items[n].stl_type = Empty;"
    },
    {
        "line": 255,
        "fullcodeline": "stl_items[n].stl_start = p;"
    },
    {
        "line": 301,
        "fullcodeline": "while (l++ < n && p + 1 < out + outlen)"
    },
    {
        "line": 302,
        "fullcodeline": "MB_CHAR2BYTES(fillchar, p);"
    },
    {
        "line": 307,
        "fullcodeline": "l = (n - l) * MB_CHAR2LEN(fillchar);"
    },
    {
        "line": 308,
        "fullcodeline": "mch_memmove(t + l, t, (size_t)(p - t));"
    },
    {
        "line": 311,
        "fullcodeline": "p += l;"
    },
    {
        "line": 309,
        "fullcodeline": "if (p + l >= out + outlen)"
    },
    {
        "line": 312,
        "fullcodeline": "for (n = stl_groupitem[groupdepth] + 1; n < curitem; n++)"
    },
    {
        "line": 313,
        "fullcodeline": "stl_items[n].stl_start += l;"
    },
    {
        "line": 314,
        "fullcodeline": "for ( ; l > 0; l--)"
    },
    {
        "line": 315,
        "fullcodeline": "MB_CHAR2BYTES(fillchar, t);"
    },
    {
        "line": 310,
        "fullcodeline": "l = (long)((out + outlen) - p - 1);"
    }
]