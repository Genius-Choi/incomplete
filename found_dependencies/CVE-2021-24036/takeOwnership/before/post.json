[
    {
        "line": 13,
        "fullcodeline": "DCHECK("
    },
    {
        "line": 17,
        "fullcodeline": "HeapFullStorage* storage = nullptr;"
    },
    {
        "line": 18,
        "fullcodeline": "auto rollback = makeGuard([&] {"
    },
    {
        "line": 26,
        "fullcodeline": "size_t mallocSize = goodMallocSize(requiredStorage);"
    },
    {
        "line": 27,
        "fullcodeline": "storage = static_cast<HeapFullStorage*>(checkedMalloc(mallocSize));"
    },
    {
        "line": 29,
        "fullcodeline": "new (&storage->hs.prefix)"
    },
    {
        "line": 31,
        "fullcodeline": "new (&storage->shared)"
    },
    {
        "line": 34,
        "fullcodeline": "auto result = unique_ptr<IOBuf>(new (&storage->hs.buf) IOBuf("
    },
    {
        "line": 42,
        "fullcodeline": "rollback.dismiss();"
    },
    {
        "line": 14,
        "fullcodeline": "!userData || (userData && freeFn) ||"
    },
    {
        "line": 30,
        "fullcodeline": "HeapPrefix(kIOBufInUse | kSharedInfoInUse, mallocSize);"
    },
    {
        "line": 15,
        "fullcodeline": "(userData && !freeFn && (option == TakeOwnershipOption::STORE_SIZE)));"
    },
    {
        "line": 45,
        "fullcodeline": "io_buf_alloc_cb(storage, mallocSize);"
    },
    {
        "line": 36,
        "fullcodeline": "packFlagsAndSharedInfo(0, &storage->shared),"
    },
    {
        "line": 37,
        "fullcodeline": "static_cast<uint8_t*>(buf),"
    },
    {
        "line": 39,
        "fullcodeline": "static_cast<uint8_t*>(buf) + offset,"
    },
    {
        "line": 46,
        "fullcodeline": "if (userData && !freeFn && (option == TakeOwnershipOption::STORE_SIZE)) {"
    },
    {
        "line": 50,
        "fullcodeline": "io_buf_alloc_cb(buf, capacity);"
    }
]