[
    {
        "line": 2,
        "fullcodeline": "size_t newCapacity = (size_t)length_ + minHeadroom + minTailroom;"
    },
    {
        "line": 3,
        "fullcodeline": "DCHECK_LT(newCapacity, UINT32_MAX);"
    },
    {
        "line": 8,
        "fullcodeline": "DCHECK(!isSharedOne());"
    },
    {
        "line": 31,
        "fullcodeline": "size_t newAllocatedCapacity = 0;"
    },
    {
        "line": 32,
        "fullcodeline": "uint8_t* newBuffer = nullptr;"
    },
    {
        "line": 33,
        "fullcodeline": "std::size_t newHeadroom = 0;"
    },
    {
        "line": 34,
        "fullcodeline": "std::size_t oldHeadroom = headroom();"
    },
    {
        "line": 38,
        "fullcodeline": "SharedInfo* info = sharedInfo();"
    },
    {
        "line": 98,
        "fullcodeline": "initExtBuffer(newBuffer, newAllocatedCapacity, &info, &cap);"
    },
    {
        "line": 109,
        "fullcodeline": "capacity_ = cap;"
    },
    {
        "line": 24,
        "fullcodeline": "if (headroom() + tailroom() >= minHeadroom + minTailroom) {"
    },
    {
        "line": 39,
        "fullcodeline": "bool useHeapFullStorage = info && info->useHeapFullStorage;"
    },
    {
        "line": 84,
        "fullcodeline": "if (newBuffer == nullptr) {"
    },
    {
        "line": 100,
        "fullcodeline": "if (flags() & kFlagFreeSharedInfo) {"
    },
    {
        "line": 25,
        "fullcodeline": "uint8_t* newData = writableBuffer() + minHeadroom;"
    },
    {
        "line": 26,
        "fullcodeline": "memmove(newData, data_, length_);"
    },
    {
        "line": 27,
        "fullcodeline": "data_ = newData;"
    },
    {
        "line": 40,
        "fullcodeline": "if (info && (info->freeFn == nullptr) && length_ != 0 &&"
    },
    {
        "line": 41,
        "fullcodeline": "oldHeadroom >= minHeadroom) {"
    },
    {
        "line": 42,
        "fullcodeline": "size_t headSlack = oldHeadroom - minHeadroom;"
    },
    {
        "line": 43,
        "fullcodeline": "newAllocatedCapacity = goodExtBufferSize(newCapacity + headSlack);"
    },
    {
        "line": 85,
        "fullcodeline": "newAllocatedCapacity = goodExtBufferSize(newCapacity);"
    },
    {
        "line": 86,
        "fullcodeline": "newBuffer = static_cast<uint8_t*>(checkedMalloc(newAllocatedCapacity));"
    },
    {
        "line": 94,
        "fullcodeline": "newHeadroom = minHeadroom;"
    },
    {
        "line": 87,
        "fullcodeline": "if (length_ > 0) {"
    },
    {
        "line": 50,
        "fullcodeline": "if (headSlack * 4 <= newCapacity) {"
    },
    {
        "line": 70,
        "fullcodeline": "size_t copySlack = capacity() - length_;"
    },
    {
        "line": 88,
        "fullcodeline": "assert(data_ != nullptr);"
    },
    {
        "line": 51,
        "fullcodeline": "size_t allocatedCapacity = capacity() + sizeof(SharedInfo);"
    },
    {
        "line": 52,
        "fullcodeline": "void* p = buf_;"
    },
    {
        "line": 71,
        "fullcodeline": "if (copySlack * 2 <= length_) {"
    },
    {
        "line": 53,
        "fullcodeline": "if (allocatedCapacity >= jemallocMinInPlaceExpandable) {"
    },
    {
        "line": 72,
        "fullcodeline": "void* p = realloc(buf_, newAllocatedCapacity);"
    },
    {
        "line": 76,
        "fullcodeline": "newBuffer = static_cast<uint8_t*>(p);"
    },
    {
        "line": 77,
        "fullcodeline": "newHeadroom = oldHeadroom;"
    },
    {
        "line": 54,
        "fullcodeline": "if (xallocx(p, newAllocatedCapacity, 0, 0) == newAllocatedCapacity) {"
    },
    {
        "line": 73,
        "fullcodeline": "if (UNLIKELY(p == nullptr)) {"
    },
    {
        "line": 58,
        "fullcodeline": "newBuffer = static_cast<uint8_t*>(p);"
    },
    {
        "line": 59,
        "fullcodeline": "newHeadroom = oldHeadroom;"
    },
    {
        "line": 61,
        "fullcodeline": "info->userData = reinterpret_cast<void*>(newAllocatedCapacity);"
    },
    {
        "line": 56,
        "fullcodeline": "io_buf_free_cb(p, reinterpret_cast<size_t>(info->userData));"
    },
    {
        "line": 63,
        "fullcodeline": "io_buf_alloc_cb(newBuffer, newAllocatedCapacity);"
    }
]