[
    {
        "line": 7,
        "fullcodeline": "unsigned long len = total_len;"
    },
    {
        "line": 9,
        "fullcodeline": "struct virtio_net_hdr vnet_hdr = { 0 };"
    },
    {
        "line": 10,
        "fullcodeline": "int vnet_hdr_len = 0;"
    },
    {
        "line": 12,
        "fullcodeline": "bool zerocopy = false;"
    },
    {
        "line": 36,
        "fullcodeline": "err = -EINVAL;"
    },
    {
        "line": 54,
        "fullcodeline": "skb = macvtap_alloc_skb(&q->sk, NET_IP_ALIGN, copylen,"
    },
    {
        "line": 67,
        "fullcodeline": "skb_set_network_header(skb, ETH_HLEN);"
    },
    {
        "line": 68,
        "fullcodeline": "skb_reset_mac_header(skb);"
    },
    {
        "line": 77,
        "fullcodeline": "rcu_read_lock_bh();"
    },
    {
        "line": 78,
        "fullcodeline": "vlan = rcu_dereference_bh(q->vlan);"
    },
    {
        "line": 88,
        "fullcodeline": "rcu_read_unlock_bh();"
    },
    {
        "line": 93,
        "fullcodeline": "kfree_skb(skb);"
    },
    {
        "line": 96,
        "fullcodeline": "rcu_read_lock_bh();"
    },
    {
        "line": 97,
        "fullcodeline": "vlan = rcu_dereference_bh(q->vlan);"
    },
    {
        "line": 100,
        "fullcodeline": "rcu_read_unlock_bh();"
    },
    {
        "line": 14,
        "fullcodeline": "if (q->flags & IFF_VNET_HDR) {"
    },
    {
        "line": 37,
        "fullcodeline": "if (unlikely(len < ETH_HLEN))"
    },
    {
        "line": 40,
        "fullcodeline": "if (m && m->msg_control && sock_flag(&q->sk, SOCK_ZEROCOPY))"
    },
    {
        "line": 56,
        "fullcodeline": "if (!skb)"
    },
    {
        "line": 15,
        "fullcodeline": "vnet_hdr_len = q->vnet_hdr_sz;"
    },
    {
        "line": 17,
        "fullcodeline": "err = -EINVAL;"
    },
    {
        "line": 20,
        "fullcodeline": "len -= vnet_hdr_len;"
    },
    {
        "line": 22,
        "fullcodeline": "err = memcpy_fromiovecend((void *)&vnet_hdr, iv, 0,"
    },
    {
        "line": 31,
        "fullcodeline": "err = -EINVAL;"
    },
    {
        "line": 41,
        "fullcodeline": "zerocopy = true;"
    },
    {
        "line": 48,
        "fullcodeline": "copylen = vnet_hdr.hdr_len;"
    },
    {
        "line": 60,
        "fullcodeline": "err = zerocopy_sg_from_iovec(skb, iv, vnet_hdr_len, count);"
    },
    {
        "line": 69,
        "fullcodeline": "skb->protocol = eth_hdr(skb)->h_proto;"
    },
    {
        "line": 72,
        "fullcodeline": "err = macvtap_skb_from_vnet_hdr(skb, &vnet_hdr);"
    },
    {
        "line": 81,
        "fullcodeline": "skb_shinfo(skb)->destructor_arg = m->msg_control;"
    },
    {
        "line": 82,
        "fullcodeline": "skb_shinfo(skb)->tx_flags |= SKBTX_DEV_ZEROCOPY;"
    },
    {
        "line": 85,
        "fullcodeline": "macvlan_start_xmit(skb, vlan->dev);"
    },
    {
        "line": 18,
        "fullcodeline": "if (len < vnet_hdr_len)"
    },
    {
        "line": 24,
        "fullcodeline": "if (err < 0)"
    },
    {
        "line": 26,
        "fullcodeline": "if ((vnet_hdr.flags & VIRTIO_NET_HDR_F_NEEDS_CSUM) &&"
    },
    {
        "line": 32,
        "fullcodeline": "if (vnet_hdr.hdr_len > len)"
    },
    {
        "line": 49,
        "fullcodeline": "if (!copylen)"
    },
    {
        "line": 52,
        "fullcodeline": "copylen = len;"
    },
    {
        "line": 62,
        "fullcodeline": "err = skb_copy_datagram_from_iovec(skb, 0, iv, vnet_hdr_len,"
    },
    {
        "line": 87,
        "fullcodeline": "kfree_skb(skb);"
    },
    {
        "line": 27,
        "fullcodeline": "vnet_hdr.csum_start + vnet_hdr.csum_offset + 2 >"
    },
    {
        "line": 29,
        "fullcodeline": "vnet_hdr.hdr_len = vnet_hdr.csum_start +"
    },
    {
        "line": 50,
        "fullcodeline": "copylen = GOODCOPY_LEN;"
    }
]