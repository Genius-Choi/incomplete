[
    {
        "line": 3,
        "fullcodeline": "int      errnum = SLURM_SUCCESS;"
    },
    {
        "line": 5,
        "fullcodeline": "char     host[MAXHOSTNAMELEN];"
    },
    {
        "line": 7,
        "fullcodeline": "launch_tasks_request_msg_t *req = msg->data;"
    },
    {
        "line": 8,
        "fullcodeline": "bool     super_user = false;"
    },
    {
        "line": 13,
        "fullcodeline": "slurm_addr_t *cli = &msg->orig_addr;"
    },
    {
        "line": 14,
        "fullcodeline": "hostset_t step_hset = NULL;"
    },
    {
        "line": 16,
        "fullcodeline": "int nodeid = 0;"
    },
    {
        "line": 19,
        "fullcodeline": "nodeid = nodelist_find(req->complete_nodelist, conf->node_name);"
    },
    {
        "line": 21,
        "fullcodeline": "req_uid = g_slurm_auth_get_uid(msg->auth_cred, conf->auth_info);"
    },
    {
        "line": 22,
        "fullcodeline": "memcpy(&req->orig_addr, &msg->orig_addr, sizeof(slurm_addr_t));"
    },
    {
        "line": 24,
        "fullcodeline": "super_user = _slurm_authorized_user(req_uid);"
    },
    {
        "line": 33,
        "fullcodeline": "slurm_get_ip_str(cli, &port, host, sizeof(host));"
    },
    {
        "line": 34,
        "fullcodeline": "info(\"launch task %u.%u request from %u.%u@%s (port %hu)\", req->job_id,"
    },
    {
        "line": 39,
        "fullcodeline": "env_array_overwrite(&req->env, \"SLURM_SRUN_COMM_HOST\", host);"
    },
    {
        "line": 40,
        "fullcodeline": "req->envc = envcount(req->env);"
    },
    {
        "line": 43,
        "fullcodeline": "slurm_mutex_lock(&prolog_mutex);"
    },
    {
        "line": 44,
        "fullcodeline": "first_job_run = !slurm_cred_jobid_cached(conf->vctx, req->job_id);"
    },
    {
        "line": 58,
        "fullcodeline": "task_g_slurmd_launch_request(req->job_id, req, nodeid);"
    },
    {
        "line": 139,
        "fullcodeline": "slurm_get_stream_addr(msg->conn_fd, &self);"
    },
    {
        "line": 141,
        "fullcodeline": "debug3(\"_rpc_launch_tasks: call to _forkexec_slurmstepd\");"
    },
    {
        "line": 142,
        "fullcodeline": "errnum = _forkexec_slurmstepd(LAUNCH_TASKS, (void *)req, cli, &self,"
    },
    {
        "line": 144,
        "fullcodeline": "debug3(\"_rpc_launch_tasks: return from _forkexec_slurmstepd\");"
    },
    {
        "line": 145,
        "fullcodeline": "_launch_complete_add(req->job_id);"
    },
    {
        "line": 26,
        "fullcodeline": "if ((super_user == false) && (req_uid != req->uid)) {"
    },
    {
        "line": 46,
        "fullcodeline": "if (_check_job_credential(req, req_uid, nodeid, &step_hset,"
    },
    {
        "line": 112,
        "fullcodeline": "if (req->job_mem_lim || req->step_mem_lim) {"
    },
    {
        "line": 151,
        "fullcodeline": "if (slurm_send_rc_msg(msg, errnum) < 0) {"
    },
    {
        "line": 172,
        "fullcodeline": "if (errnum == ESLURMD_PROLOG_FAILED)"
    },
    {
        "line": 27,
        "fullcodeline": "error(\"launch task request from uid %u\","
    },
    {
        "line": 29,
        "fullcodeline": "errnum = ESLURM_USER_ID_MISSING;\t/* or invalid user */"
    },
    {
        "line": 48,
        "fullcodeline": "errnum = errno;"
    },
    {
        "line": 49,
        "fullcodeline": "error(\"Invalid job credential from %ld@%s: %m\","
    },
    {
        "line": 52,
        "fullcodeline": "slurm_mutex_unlock(&prolog_mutex);"
    },
    {
        "line": 65,
        "fullcodeline": "slurm_cred_insert_jobid(conf->vctx, req->job_id);"
    },
    {
        "line": 66,
        "fullcodeline": "_add_job_running_prolog(req->job_id);"
    },
    {
        "line": 67,
        "fullcodeline": "slurm_mutex_unlock(&prolog_mutex);"
    },
    {
        "line": 72,
        "fullcodeline": "memset(&job_env, 0, sizeof(job_env_t));"
    },
    {
        "line": 74,
        "fullcodeline": "job_env.jobid = req->job_id;"
    },
    {
        "line": 75,
        "fullcodeline": "job_env.step_id = req->job_step_id;"
    },
    {
        "line": 76,
        "fullcodeline": "job_env.node_list = req->complete_nodelist;"
    },
    {
        "line": 77,
        "fullcodeline": "job_env.partition = req->partition;"
    },
    {
        "line": 78,
        "fullcodeline": "job_env.spank_job_env = req->spank_job_env;"
    },
    {
        "line": 79,
        "fullcodeline": "job_env.spank_job_env_size = req->spank_job_env_size;"
    },
    {
        "line": 80,
        "fullcodeline": "job_env.uid = req->uid;"
    },
    {
        "line": 81,
        "fullcodeline": "job_env.user_name = req->user_name;"
    },
    {
        "line": 82,
        "fullcodeline": "rc =  _run_prolog(&job_env, req->cred);"
    },
    {
        "line": 114,
        "fullcodeline": "slurm_mutex_lock(&job_limits_mutex);"
    },
    {
        "line": 117,
        "fullcodeline": "step_info.jobid  = req->job_id;"
    },
    {
        "line": 118,
        "fullcodeline": "step_info.stepid = req->job_step_id;"
    },
    {
        "line": 119,
        "fullcodeline": "job_limits_ptr = list_find_first (job_limits_list,"
    },
    {
        "line": 136,
        "fullcodeline": "slurm_mutex_unlock(&job_limits_mutex);"
    },
    {
        "line": 149,
        "fullcodeline": "hostset_destroy(step_hset);"
    },
    {
        "line": 152,
        "fullcodeline": "char addr_str[32];"
    },
    {
        "line": 153,
        "fullcodeline": "slurm_print_slurm_addr(&msg->address, addr_str,"
    },
    {
        "line": 155,
        "fullcodeline": "error(\"_rpc_launch_tasks: unable to send return code to \""
    },
    {
        "line": 162,
        "fullcodeline": "slurm_cred_rewind(conf->vctx, req->cred); /* ignore errors */"
    },
    {
        "line": 173,
        "fullcodeline": "send_registration_msg(errnum, false);"
    },
    {
        "line": 28,
        "fullcodeline": "(unsigned int) req_uid);"
    },
    {
        "line": 50,
        "fullcodeline": "(long) req_uid, host);"
    },
    {
        "line": 69,
        "fullcodeline": "if (container_g_create(req->job_id))"
    },
    {
        "line": 100,
        "fullcodeline": "if (slurm_cred_revoked(conf->vctx, req->cred)) {"
    },
    {
        "line": 107,
        "fullcodeline": "slurm_mutex_unlock(&prolog_mutex);"
    },
    {
        "line": 108,
        "fullcodeline": "_wait_for_job_running_prolog(req->job_id);"
    },
    {
        "line": 115,
        "fullcodeline": "if (!job_limits_list)"
    },
    {
        "line": 122,
        "fullcodeline": "if (!job_limits_ptr) {"
    },
    {
        "line": 70,
        "fullcodeline": "error(\"container_g_create(%u): %m\", req->job_id);"
    },
    {
        "line": 92,
        "fullcodeline": "error(\"[job %u] prolog failed status=%d:%d\","
    },
    {
        "line": 94,
        "fullcodeline": "errnum = ESLURMD_PROLOG_FAILED;"
    },
    {
        "line": 101,
        "fullcodeline": "info(\"Job %u already killed, do not launch step %u.%u\","
    },
    {
        "line": 103,
        "fullcodeline": "errnum = ESLURMD_CREDENTIAL_REVOKED;"
    },
    {
        "line": 116,
        "fullcodeline": "job_limits_list = list_create(_job_limits_free);"
    },
    {
        "line": 124,
        "fullcodeline": "job_limits_ptr->job_id   = req->job_id;"
    },
    {
        "line": 125,
        "fullcodeline": "job_limits_ptr->job_mem  = req->job_mem_lim;"
    },
    {
        "line": 126,
        "fullcodeline": "job_limits_ptr->step_id  = req->job_step_id;"
    },
    {
        "line": 127,
        "fullcodeline": "job_limits_ptr->step_mem = req->step_mem_lim;"
    },
    {
        "line": 134,
        "fullcodeline": "list_append(job_limits_list, job_limits_ptr);"
    },
    {
        "line": 164,
        "fullcodeline": "} else if (errnum == SLURM_SUCCESS) {"
    },
    {
        "line": 85,
        "fullcodeline": "if (WIFSIGNALED(rc)) {"
    },
    {
        "line": 165,
        "fullcodeline": "save_cred_state(conf->vctx);"
    },
    {
        "line": 166,
        "fullcodeline": "task_g_slurmd_reserve_resources(req->job_id, req, nodeid);"
    },
    {
        "line": 86,
        "fullcodeline": "exit_status = 0;"
    },
    {
        "line": 87,
        "fullcodeline": "term_sig    = WTERMSIG(rc);"
    },
    {
        "line": 89,
        "fullcodeline": "exit_status = WEXITSTATUS(rc);"
    },
    {
        "line": 90,
        "fullcodeline": "term_sig    = 0;"
    }
]