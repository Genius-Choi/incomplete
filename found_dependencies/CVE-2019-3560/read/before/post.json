[
    {
        "line": 4,
        "fullcodeline": "folly::io::Cursor cursor(buf.front());"
    },
    {
        "line": 11,
        "fullcodeline": "msg.type = static_cast<ContentType>(cursor.readBE<ContentTypeType>());"
    },
    {
        "line": 43,
        "fullcodeline": "receivedRecordVersion_ ="
    },
    {
        "line": 46,
        "fullcodeline": "auto length = cursor.readBE<uint16_t>();"
    },
    {
        "line": 57,
        "fullcodeline": "cursor.clone(msg.fragment, length);"
    },
    {
        "line": 59,
        "fullcodeline": "buf.trimStart(cursor - buf.front());"
    },
    {
        "line": 6,
        "fullcodeline": "if (buf.empty() || !cursor.canAdvance(kPlaintextHeaderSize)) {"
    },
    {
        "line": 44,
        "fullcodeline": "static_cast<ProtocolVersion>(cursor.readBE<ProtocolVersionType>());"
    },
    {
        "line": 47,
        "fullcodeline": "if (length > kMaxPlaintextRecordSize) {"
    },
    {
        "line": 50,
        "fullcodeline": "if (length == 0) {"
    },
    {
        "line": 53,
        "fullcodeline": "if (buf.chainLength() < (cursor - buf.front()) + length) {"
    },
    {
        "line": 61,
        "fullcodeline": "if (msg.type == ContentType::change_cipher_spec) {"
    },
    {
        "line": 71,
        "fullcodeline": "return std::move(msg);"
    },
    {
        "line": 62,
        "fullcodeline": "msg.fragment->coalesce();"
    },
    {
        "line": 14,
        "fullcodeline": "if (msg.type == ContentType::application_data) {"
    },
    {
        "line": 36,
        "fullcodeline": "throw std::runtime_error(folly::to<std::string>("
    },
    {
        "line": 48,
        "fullcodeline": "throw std::runtime_error(\"received too long plaintext record\");"
    },
    {
        "line": 51,
        "fullcodeline": "throw std::runtime_error(\"received empty plaintext record\");"
    },
    {
        "line": 63,
        "fullcodeline": "if (msg.fragment->length() == 1 && *msg.fragment->data() == 0x01) {"
    },
    {
        "line": 15,
        "fullcodeline": "cursor.skip(sizeof(ProtocolVersion));"
    },
    {
        "line": 16,
        "fullcodeline": "auto length = cursor.readBE<uint16_t>();"
    },
    {
        "line": 20,
        "fullcodeline": "length +="
    },
    {
        "line": 22,
        "fullcodeline": "buf.trimStart(length);"
    },
    {
        "line": 17,
        "fullcodeline": "if (buf.chainLength() < (cursor - buf.front()) + length) {"
    },
    {
        "line": 24,
        "fullcodeline": "} else if (msg.type != ContentType::change_cipher_spec) {"
    },
    {
        "line": 37,
        "fullcodeline": "\"received plaintext content type \","
    },
    {
        "line": 66,
        "fullcodeline": "throw FizzException("
    },
    {
        "line": 25,
        "fullcodeline": "skipEncryptedRecords_ = false;"
    },
    {
        "line": 38,
        "fullcodeline": "static_cast<ContentTypeType>(msg.type),"
    },
    {
        "line": 40,
        "fullcodeline": "folly::hexlify(buf.splitAtMost(10)->coalesce())));"
    }
]