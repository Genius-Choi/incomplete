[
    {
        "line": 2,
        "fullcodeline": "archiver = request.getfixturevalue(archivers)"
    },
    {
        "line": 3,
        "fullcodeline": "check_cmd_setup(archiver)"
    },
    {
        "line": 5,
        "fullcodeline": "repo_objs = archive.repo_objs"
    },
    {
        "line": 23,
        "fullcodeline": "cmd(archiver, \"check\", exit_code=1)"
    },
    {
        "line": 24,
        "fullcodeline": "cmd(archiver, \"check\", \"--repair\", exit_code=0)"
    },
    {
        "line": 25,
        "fullcodeline": "output = cmd(archiver, \"rlist\")"
    },
    {
        "line": 26,
        "fullcodeline": "assert \"archive1\" in output"
    },
    {
        "line": 27,
        "fullcodeline": "assert \"archive1.1\" in output"
    },
    {
        "line": 28,
        "fullcodeline": "assert \"archive2\" in output"
    },
    {
        "line": 4,
        "fullcodeline": "archive, repository = open_archive(archiver.repository_path, \"archive1\")"
    },
    {
        "line": 6,
        "fullcodeline": "with repository:"
    },
    {
        "line": 7,
        "fullcodeline": "manifest = repository.get(Manifest.MANIFEST_ID)"
    },
    {
        "line": 8,
        "fullcodeline": "corrupted_manifest = manifest + b\"corrupted!\""
    },
    {
        "line": 9,
        "fullcodeline": "repository.put(Manifest.MANIFEST_ID, corrupted_manifest)"
    },
    {
        "line": 10,
        "fullcodeline": "archive_dict = {"
    },
    {
        "line": 19,
        "fullcodeline": "archive = repo_objs.key.pack_and_authenticate_metadata(archive_dict, context=b\"archive\")"
    },
    {
        "line": 20,
        "fullcodeline": "archive_id = repo_objs.id_hash(archive)"
    },
    {
        "line": 21,
        "fullcodeline": "repository.put(archive_id, repo_objs.format(archive_id, {}, archive))"
    },
    {
        "line": 22,
        "fullcodeline": "repository.commit(compact=False)"
    }
]