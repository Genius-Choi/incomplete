[
    {
        "line": 4,
        "fullcodeline": "char namebuf[PATH_MAX];"
    },
    {
        "line": 6,
        "fullcodeline": "int fd, cnt = 0;"
    },
    {
        "line": 7,
        "fullcodeline": "struct strbuf sb = STRBUF_INIT;"
    },
    {
        "line": 29,
        "fullcodeline": "strbuf_addf(&sb, Q_(\"Applying patch %%s with %d reject...\","
    },
    {
        "line": 35,
        "fullcodeline": "strbuf_release(&sb);"
    },
    {
        "line": 37,
        "fullcodeline": "cnt = strlen(patch->new_name);"
    },
    {
        "line": 43,
        "fullcodeline": "memcpy(namebuf, patch->new_name, cnt);"
    },
    {
        "line": 44,
        "fullcodeline": "memcpy(namebuf + cnt, \".rej\", 5);"
    },
    {
        "line": 46,
        "fullcodeline": "fd = open(namebuf, O_CREAT | O_EXCL | O_WRONLY, 0666);"
    },
    {
        "line": 56,
        "fullcodeline": "rej = fdopen(fd, \"w\");"
    },
    {
        "line": 65,
        "fullcodeline": "fprintf(rej, \"diff a/%s b/%s\\t(rejected hunks)\\n\","
    },
    {
        "line": 81,
        "fullcodeline": "fclose(rej);"
    },
    {
        "line": 9,
        "fullcodeline": "for (cnt = 0, frag = patch->fragments; frag; frag = frag->next) {"
    },
    {
        "line": 15,
        "fullcodeline": "if (!cnt) {"
    },
    {
        "line": 25,
        "fullcodeline": "if (!patch->new_name)"
    },
    {
        "line": 33,
        "fullcodeline": "if (state->apply_verbosity > verbosity_silent)"
    },
    {
        "line": 38,
        "fullcodeline": "if (ARRAY_SIZE(namebuf) <= cnt + 5) {"
    },
    {
        "line": 47,
        "fullcodeline": "if (fd < 0) {"
    },
    {
        "line": 57,
        "fullcodeline": "if (!rej)"
    },
    {
        "line": 69,
        "fullcodeline": "cnt++, frag = frag->next) {"
    },
    {
        "line": 82,
        "fullcodeline": "return -1;"
    },
    {
        "line": 12,
        "fullcodeline": "cnt++;"
    },
    {
        "line": 26,
        "fullcodeline": "die(_(\"internal error\"));"
    },
    {
        "line": 34,
        "fullcodeline": "say_patch_name(stderr, sb.buf, patch);"
    },
    {
        "line": 39,
        "fullcodeline": "cnt = ARRAY_SIZE(namebuf) - 5;"
    },
    {
        "line": 40,
        "fullcodeline": "warning(_(\"truncating .rej filename to %.*s.rej\"),"
    },
    {
        "line": 52,
        "fullcodeline": "fd = open(namebuf, O_CREAT | O_EXCL | O_WRONLY, 0666);"
    },
    {
        "line": 67,
        "fullcodeline": "for (cnt = 1, frag = patch->fragments;"
    },
    {
        "line": 77,
        "fullcodeline": "fprintf(rej, \"%.*s\", frag->size, frag->patch);"
    },
    {
        "line": 10,
        "fullcodeline": "if (!frag->rejected)"
    },
    {
        "line": 16,
        "fullcodeline": "if (state->apply_verbosity > verbosity_normal)"
    },
    {
        "line": 41,
        "fullcodeline": "cnt - 1, patch->new_name);"
    },
    {
        "line": 48,
        "fullcodeline": "if (errno != EEXIST)"
    },
    {
        "line": 50,
        "fullcodeline": "if (unlink(namebuf))"
    },
    {
        "line": 53,
        "fullcodeline": "if (fd < 0)"
    },
    {
        "line": 58,
        "fullcodeline": "return error_errno(_(\"cannot open %s\"), namebuf);"
    },
    {
        "line": 70,
        "fullcodeline": "if (!frag->rejected) {"
    },
    {
        "line": 75,
        "fullcodeline": "if (state->apply_verbosity > verbosity_silent)"
    },
    {
        "line": 78,
        "fullcodeline": "if (frag->patch[frag->size-1] != '\\n')"
    },
    {
        "line": 17,
        "fullcodeline": "say_patch_name(stderr,"
    },
    {
        "line": 76,
        "fullcodeline": "fprintf_ln(stderr, _(\"Rejected hunk #%d.\"), cnt);"
    },
    {
        "line": 79,
        "fullcodeline": "fputc('\\n', rej);"
    },
    {
        "line": 18,
        "fullcodeline": "_(\"Applied patch %s cleanly.\"), patch);"
    },
    {
        "line": 49,
        "fullcodeline": "return error_errno(_(\"cannot open %s\"), namebuf);"
    },
    {
        "line": 51,
        "fullcodeline": "return error_errno(_(\"cannot unlink '%s'\"), namebuf);"
    },
    {
        "line": 54,
        "fullcodeline": "return error_errno(_(\"cannot open %s\"), namebuf);"
    },
    {
        "line": 71,
        "fullcodeline": "if (state->apply_verbosity > verbosity_silent)"
    },
    {
        "line": 72,
        "fullcodeline": "fprintf_ln(stderr, _(\"Hunk #%d applied cleanly.\"), cnt);"
    }
]