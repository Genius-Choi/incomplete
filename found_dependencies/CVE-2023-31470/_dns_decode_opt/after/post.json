[
    {
        "line": 3,
        "fullcodeline": "unsigned short opt_code = 0;"
    },
    {
        "line": 4,
        "fullcodeline": "unsigned short opt_len = 0;"
    },
    {
        "line": 5,
        "fullcodeline": "unsigned short errcode = (ttl >> 16) & 0xFFFF;"
    },
    {
        "line": 6,
        "fullcodeline": "unsigned short ever = (ttl)&0xFFFF;"
    },
    {
        "line": 7,
        "fullcodeline": "unsigned char *start = context->ptr;"
    },
    {
        "line": 8,
        "fullcodeline": "struct dns_packet *packet = context->packet;"
    },
    {
        "line": 9,
        "fullcodeline": "int ret = 0;"
    },
    {
        "line": 11,
        "fullcodeline": "UNUSED(ever);"
    },
    {
        "line": 43,
        "fullcodeline": "if (rr_len < 0) {"
    },
    {
        "line": 48,
        "fullcodeline": "if (errcode != 0) {"
    },
    {
        "line": 53,
        "fullcodeline": "while (context->ptr - start < rr_len) {"
    },
    {
        "line": 44,
        "fullcodeline": "tlog(TLOG_DEBUG, \"opt len is invalid.\");"
    },
    {
        "line": 49,
        "fullcodeline": "tlog(TLOG_DEBUG, \"extend rcode invalid, %d\", errcode);"
    },
    {
        "line": 59,
        "fullcodeline": "opt_code = _dns_read_short(&context->ptr);"
    },
    {
        "line": 60,
        "fullcodeline": "opt_len = _dns_read_short(&context->ptr);"
    },
    {
        "line": 67,
        "fullcodeline": "tlog(TLOG_DEBUG, \"opt type %d\", opt_code);"
    },
    {
        "line": 45,
        "fullcodeline": "return -1;"
    },
    {
        "line": 54,
        "fullcodeline": "if (_dns_left_len(context) < 4) {"
    },
    {
        "line": 62,
        "fullcodeline": "if (_dns_left_len(context) < opt_len) {"
    },
    {
        "line": 55,
        "fullcodeline": "tlog(TLOG_DEBUG, \"data length is invalid, %d:%d\", _dns_left_len(context),"
    },
    {
        "line": 63,
        "fullcodeline": "tlog(TLOG_DEBUG, \"read opt data failed, opt_code = %d, opt_len = %d\", opt_code, opt_len);"
    },
    {
        "line": 92,
        "fullcodeline": "context->ptr += opt_len;"
    },
    {
        "line": 95,
        "fullcodeline": "context->ptr += opt_len;"
    },
    {
        "line": 96,
        "fullcodeline": "tlog(TLOG_DEBUG, \"DNS opt type = %d not supported\", opt_code);"
    },
    {
        "line": 56,
        "fullcodeline": "(int)(context->ptr - context->data));"
    },
    {
        "line": 57,
        "fullcodeline": "return -1;"
    },
    {
        "line": 64,
        "fullcodeline": "return -1;"
    },
    {
        "line": 71,
        "fullcodeline": "ret = _dns_decode_opt_ecs(context, &ecs, opt_len);"
    },
    {
        "line": 77,
        "fullcodeline": "ret = dns_add_OPT_ECS(packet, &ecs);"
    },
    {
        "line": 85,
        "fullcodeline": "ret = _dns_decode_opt_cookie(context, &cookie, opt_len);"
    },
    {
        "line": 72,
        "fullcodeline": "if (ret != 0) {"
    },
    {
        "line": 78,
        "fullcodeline": "if (ret != 0) {"
    },
    {
        "line": 86,
        "fullcodeline": "if (ret != 0) {"
    },
    {
        "line": 73,
        "fullcodeline": "tlog(TLOG_ERROR, \"decode ecs failed.\");"
    },
    {
        "line": 79,
        "fullcodeline": "tlog(TLOG_ERROR, \"add ecs failed.\");"
    },
    {
        "line": 87,
        "fullcodeline": "tlog(TLOG_ERROR, \"decode cookie failed.\");"
    },
    {
        "line": 74,
        "fullcodeline": "return -1;"
    },
    {
        "line": 80,
        "fullcodeline": "return -1;"
    },
    {
        "line": 88,
        "fullcodeline": "return -1;"
    }
]