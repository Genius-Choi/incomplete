[
    {
        "line": 3,
        "fullcodeline": "int ret = 0;"
    },
    {
        "line": 4,
        "fullcodeline": "int qtype = 0;"
    },
    {
        "line": 5,
        "fullcodeline": "int qclass = 0;"
    },
    {
        "line": 6,
        "fullcodeline": "char domain[DNS_MAX_CNAME_LEN];"
    },
    {
        "line": 7,
        "fullcodeline": "char target[DNS_MAX_CNAME_LEN] = {0};"
    },
    {
        "line": 8,
        "fullcodeline": "unsigned char *rr_len_ptr = NULL;"
    },
    {
        "line": 9,
        "fullcodeline": "unsigned char *start = NULL;"
    },
    {
        "line": 10,
        "fullcodeline": "unsigned char *rr_start = NULL;"
    },
    {
        "line": 11,
        "fullcodeline": "int ttl = 0;"
    },
    {
        "line": 12,
        "fullcodeline": "int priority = 0;"
    },
    {
        "line": 13,
        "fullcodeline": "struct dns_https_param *param = NULL;"
    },
    {
        "line": 15,
        "fullcodeline": "ret ="
    },
    {
        "line": 22,
        "fullcodeline": "qtype = DNS_T_HTTPS;"
    },
    {
        "line": 23,
        "fullcodeline": "qclass = DNS_C_IN;"
    },
    {
        "line": 25,
        "fullcodeline": "ret = _dns_encode_rr_head(context, domain, qtype, qclass, ttl, 0, &rr_len_ptr);"
    },
    {
        "line": 30,
        "fullcodeline": "rr_start = context->ptr;"
    },
    {
        "line": 36,
        "fullcodeline": "_dns_write_short(&context->ptr, priority);"
    },
    {
        "line": 37,
        "fullcodeline": "ret = _dns_encode_domain(context, target);"
    },
    {
        "line": 42,
        "fullcodeline": "start = context->ptr;"
    },
    {
        "line": 16,
        "fullcodeline": "dns_get_HTTPS_svcparm_start(rrs, &param, domain, DNS_MAX_CNAME_LEN, &ttl, &priority, target, DNS_MAX_CNAME_LEN);"
    },
    {
        "line": 17,
        "fullcodeline": "if (ret < 0) {"
    },
    {
        "line": 43,
        "fullcodeline": "for (; param != NULL; param = dns_get_HTTPS_svcparm_next(rrs, param)) {"
    },
    {
        "line": 76,
        "fullcodeline": "_dns_write_short(&rr_len_ptr, context->ptr - rr_start);"
    },
    {
        "line": 18,
        "fullcodeline": "tlog(TLOG_DEBUG, \"get https param failed.\");"
    },
    {
        "line": 31,
        "fullcodeline": "if (_dns_left_len(context) < 2) {"
    },
    {
        "line": 32,
        "fullcodeline": "tlog(TLOG_ERROR, \"left len is invalid.\");"
    },
    {
        "line": 52,
        "fullcodeline": "_dns_write_short(&context->ptr, param->key);"
    },
    {
        "line": 53,
        "fullcodeline": "_dns_write_short(&context->ptr, param->len);"
    },
    {
        "line": 72,
        "fullcodeline": "if (_dns_left_len(context) < 2) {"
    },
    {
        "line": 27,
        "fullcodeline": "return -1;"
    },
    {
        "line": 33,
        "fullcodeline": "return -1;"
    },
    {
        "line": 39,
        "fullcodeline": "return -1;"
    },
    {
        "line": 73,
        "fullcodeline": "return -1;"
    },
    {
        "line": 44,
        "fullcodeline": "if (context->ptr - start > rrs->len || _dns_left_len(context) <= 0) {"
    },
    {
        "line": 48,
        "fullcodeline": "if (param->len + 4 > _dns_left_len(context)) {"
    },
    {
        "line": 67,
        "fullcodeline": "context->ptr -= 4;"
    },
    {
        "line": 45,
        "fullcodeline": "return -1;"
    },
    {
        "line": 49,
        "fullcodeline": "return -1;"
    },
    {
        "line": 62,
        "fullcodeline": "memcpy(context->ptr, param->value, param->len);"
    },
    {
        "line": 63,
        "fullcodeline": "context->ptr += param->len;"
    }
]