[
    {
        "line": 3,
        "fullcodeline": "int i = 0;"
    },
    {
        "line": 4,
        "fullcodeline": "int j = 0;"
    },
    {
        "line": 5,
        "fullcodeline": "int ttl = 0;"
    },
    {
        "line": 6,
        "fullcodeline": "struct dns_rrs *rrs = NULL;"
    },
    {
        "line": 7,
        "fullcodeline": "int rr_count = 0;"
    },
    {
        "line": 8,
        "fullcodeline": "char req_host[MAX_IP_LEN];"
    },
    {
        "line": 10,
        "fullcodeline": "for (j = 1; j < DNS_RRS_END; j++) {"
    },
    {
        "line": 11,
        "fullcodeline": "rrs = dns_get_rrs_start(packet, j, &rr_count);"
    },
    {
        "line": 12,
        "fullcodeline": "printf(\"section: %d\\n\", j);"
    },
    {
        "line": 133,
        "fullcodeline": "printf(\"\\n\");"
    },
    {
        "line": 13,
        "fullcodeline": "for (i = 0; i < rr_count && rrs; i++, rrs = dns_get_rrs_next(packet, rrs)) {"
    },
    {
        "line": 16,
        "fullcodeline": "unsigned char addr[4];"
    },
    {
        "line": 17,
        "fullcodeline": "char name[DNS_MAX_CNAME_LEN] = {0};"
    },
    {
        "line": 19,
        "fullcodeline": "dns_get_A(rrs, name, DNS_MAX_CNAME_LEN, &ttl, addr);"
    },
    {
        "line": 20,
        "fullcodeline": "req_host[0] = '\\0';"
    },
    {
        "line": 21,
        "fullcodeline": "inet_ntop(AF_INET, addr, req_host, sizeof(req_host));"
    },
    {
        "line": 22,
        "fullcodeline": "printf(\"domain: %s A: %s TTL: %d\\n\", name, req_host, ttl);"
    },
    {
        "line": 25,
        "fullcodeline": "unsigned char addr[16];"
    },
    {
        "line": 26,
        "fullcodeline": "char name[DNS_MAX_CNAME_LEN] = {0};"
    },
    {
        "line": 27,
        "fullcodeline": "dns_get_AAAA(rrs, name, DNS_MAX_CNAME_LEN, &ttl, addr);"
    },
    {
        "line": 28,
        "fullcodeline": "req_host[0] = '\\0';"
    },
    {
        "line": 29,
        "fullcodeline": "inet_ntop(AF_INET6, addr, req_host, sizeof(req_host));"
    },
    {
        "line": 30,
        "fullcodeline": "printf(\"domain: %s AAAA: %s TTL:%d\\n\", name, req_host, ttl);"
    },
    {
        "line": 33,
        "fullcodeline": "char name[DNS_MAX_CNAME_LEN] = {0};"
    },
    {
        "line": 34,
        "fullcodeline": "char target[DNS_MAX_CNAME_LEN] = {0};"
    },
    {
        "line": 35,
        "fullcodeline": "struct dns_https_param *p = NULL;"
    },
    {
        "line": 36,
        "fullcodeline": "int priority = 0;"
    },
    {
        "line": 37,
        "fullcodeline": "int ret = 0;"
    },
    {
        "line": 39,
        "fullcodeline": "ret = dns_get_HTTPS_svcparm_start(rrs, &p, name, DNS_MAX_CNAME_LEN, &ttl, &priority, target,"
    },
    {
        "line": 46,
        "fullcodeline": "printf(\"domain: %s HTTPS: %s TTL: %d priority: %d\\n\", name, target, ttl, priority);"
    },
    {
        "line": 106,
        "fullcodeline": "char cname[DNS_MAX_CNAME_LEN];"
    },
    {
        "line": 107,
        "fullcodeline": "char name[DNS_MAX_CNAME_LEN] = {0};"
    },
    {
        "line": 108,
        "fullcodeline": "dns_get_CNAME(rrs, name, DNS_MAX_CNAME_LEN, &ttl, cname, DNS_MAX_CNAME_LEN);"
    },
    {
        "line": 109,
        "fullcodeline": "printf(\"domain: %s TTL: %d NS: %s\\n\", name, ttl, cname);"
    },
    {
        "line": 112,
        "fullcodeline": "char cname[DNS_MAX_CNAME_LEN];"
    },
    {
        "line": 113,
        "fullcodeline": "char name[DNS_MAX_CNAME_LEN] = {0};"
    },
    {
        "line": 118,
        "fullcodeline": "dns_get_CNAME(rrs, name, DNS_MAX_CNAME_LEN, &ttl, cname, DNS_MAX_CNAME_LEN);"
    },
    {
        "line": 119,
        "fullcodeline": "printf(\"domain: %s TTL: %d CNAME: %s\\n\", name, ttl, cname);"
    },
    {
        "line": 122,
        "fullcodeline": "char name[DNS_MAX_CNAME_LEN] = {0};"
    },
    {
        "line": 124,
        "fullcodeline": "dns_get_SOA(rrs, name, 128, &ttl, &soa);"
    },
    {
        "line": 125,
        "fullcodeline": "printf(\"domain: %s SOA: mname: %s, rname: %s, serial: %d, refresh: %d, retry: %d, expire: \""
    },
    {
        "line": 41,
        "fullcodeline": "if (ret != 0) {"
    },
    {
        "line": 48,
        "fullcodeline": "for (; p; p = dns_get_HTTPS_svcparm_next(rrs, p)) {"
    },
    {
        "line": 42,
        "fullcodeline": "printf(\"get HTTPS svcparm failed\\n\");"
    },
    {
        "line": 51,
        "fullcodeline": "printf(\"  HTTPS: mandatory: %s\\n\", p->value);"
    },
    {
        "line": 54,
        "fullcodeline": "char alph[64] = {0};"
    },
    {
        "line": 55,
        "fullcodeline": "int total_alph_len = 0;"
    },
    {
        "line": 56,
        "fullcodeline": "char *ptr = (char *)p->value;"
    },
    {
        "line": 70,
        "fullcodeline": "printf(\"  HTTPS: alpn: %s\\n\", alph);"
    },
    {
        "line": 73,
        "fullcodeline": "printf(\"  HTTPS: no_default_alpn: %s\\n\", p->value);"
    },
    {
        "line": 77,
        "fullcodeline": "printf(\"  HTTPS: port: %d\\n\", port);"
    },
    {
        "line": 80,
        "fullcodeline": "printf(\"  HTTPS: ipv4hint: %d\\n\", p->len / 4);"
    },
    {
        "line": 88,
        "fullcodeline": "printf(\"  HTTPS: ech: \");"
    },
    {
        "line": 92,
        "fullcodeline": "printf(\"\\n\");"
    },
    {
        "line": 95,
        "fullcodeline": "printf(\"  HTTPS: ipv6hint: %d\\n\", p->len / 16);"
    },
    {
        "line": 66,
        "fullcodeline": "} while (ptr - (char *)p->value < p->len);"
    },
    {
        "line": 67,
        "fullcodeline": "if (total_alph_len > 2) {"
    },
    {
        "line": 81,
        "fullcodeline": "for (int k = 0; k < p->len / 4; k++) {"
    },
    {
        "line": 89,
        "fullcodeline": "for (int k = 0; k < p->len; k++) {"
    },
    {
        "line": 96,
        "fullcodeline": "for (int k = 0; k < p->len / 16; k++) {"
    },
    {
        "line": 59,
        "fullcodeline": "memcpy(alph + total_alph_len, ptr + 1, alphlen);"
    },
    {
        "line": 60,
        "fullcodeline": "total_alph_len += alphlen;"
    },
    {
        "line": 61,
        "fullcodeline": "ptr += alphlen + 1;"
    },
    {
        "line": 62,
        "fullcodeline": "alph[total_alph_len] = ',';"
    },
    {
        "line": 63,
        "fullcodeline": "total_alph_len++;"
    },
    {
        "line": 64,
        "fullcodeline": "alph[total_alph_len] = ' ';"
    },
    {
        "line": 65,
        "fullcodeline": "total_alph_len++;"
    },
    {
        "line": 68,
        "fullcodeline": "alph[total_alph_len - 2] = '\\0';"
    },
    {
        "line": 76,
        "fullcodeline": "int port = *(unsigned short *)(p->value);"
    },
    {
        "line": 82,
        "fullcodeline": "char ip[16] = {0};"
    },
    {
        "line": 83,
        "fullcodeline": "inet_ntop(AF_INET, p->value + k * 4, ip, sizeof(ip));"
    },
    {
        "line": 84,
        "fullcodeline": "printf(\"    ipv4: %s\\n\", ip);"
    },
    {
        "line": 90,
        "fullcodeline": "printf(\"%02x \", p->value[k]);"
    },
    {
        "line": 97,
        "fullcodeline": "char ip[64] = {0};"
    },
    {
        "line": 98,
        "fullcodeline": "inet_ntop(AF_INET6, p->value + k * 16, ip, sizeof(ip));"
    },
    {
        "line": 99,
        "fullcodeline": "printf(\"    ipv6: %s\\n\", ip);"
    }
]