[
    {
        "line": 16,
        "fullcodeline": "pv[sz_rfbProtocolVersionMsg]=0;"
    },
    {
        "line": 18,
        "fullcodeline": "errorMessageOnReadFailure = TRUE;"
    },
    {
        "line": 20,
        "fullcodeline": "pv[sz_rfbProtocolVersionMsg] = 0;"
    },
    {
        "line": 28,
        "fullcodeline": "DefaultSupportedMessages(client);"
    },
    {
        "line": 29,
        "fullcodeline": "client->major = major;"
    },
    {
        "line": 30,
        "fullcodeline": "client->minor = minor;"
    },
    {
        "line": 63,
        "fullcodeline": "rfbClientLog(\"VNC server supports protocol version %d.%d (viewer %d.%d)\\n\","
    },
    {
        "line": 66,
        "fullcodeline": "sprintf(pv,rfbProtocolVersionFormat,client->major,client->minor);"
    },
    {
        "line": 82,
        "fullcodeline": "rfbClientLog(\"Selected Security Scheme %d\\n\", authScheme);"
    },
    {
        "line": 83,
        "fullcodeline": "client->authScheme = authScheme;"
    },
    {
        "line": 220,
        "fullcodeline": "ci.shared = (client->appData.shareDesktop ? 1 : 0);"
    },
    {
        "line": 226,
        "fullcodeline": "client->si.framebufferWidth = rfbClientSwap16IfLE(client->si.framebufferWidth);"
    },
    {
        "line": 227,
        "fullcodeline": "client->si.framebufferHeight = rfbClientSwap16IfLE(client->si.framebufferHeight);"
    },
    {
        "line": 228,
        "fullcodeline": "client->si.format.redMax = rfbClientSwap16IfLE(client->si.format.redMax);"
    },
    {
        "line": 229,
        "fullcodeline": "client->si.format.greenMax = rfbClientSwap16IfLE(client->si.format.greenMax);"
    },
    {
        "line": 230,
        "fullcodeline": "client->si.format.blueMax = rfbClientSwap16IfLE(client->si.format.blueMax);"
    },
    {
        "line": 231,
        "fullcodeline": "client->si.nameLength = rfbClientSwap32IfLE(client->si.nameLength);"
    },
    {
        "line": 234,
        "fullcodeline": "client->desktopName = malloc((uint64_t)client->si.nameLength + 1);"
    },
    {
        "line": 243,
        "fullcodeline": "client->desktopName[client->si.nameLength] = 0;"
    },
    {
        "line": 245,
        "fullcodeline": "rfbClientLog(\"Desktop name \\\"%s\\\"\\n\",client->desktopName);"
    },
    {
        "line": 247,
        "fullcodeline": "rfbClientLog(\"Connected to VNC server, using protocol version %d.%d\\n\","
    },
    {
        "line": 250,
        "fullcodeline": "rfbClientLog(\"VNC server default format:\\n\");"
    },
    {
        "line": 15,
        "fullcodeline": "if (!ReadFromRFBServer(client, pv, sz_rfbProtocolVersionMsg)) return FALSE;"
    },
    {
        "line": 22,
        "fullcodeline": "if (sscanf(pv,rfbProtocolVersionFormat,&major,&minor) != 2) {"
    },
    {
        "line": 33,
        "fullcodeline": "if ((major==rfbProtocolMajorVersion) && (minor>rfbProtocolMinorVersion))"
    },
    {
        "line": 37,
        "fullcodeline": "if (major==3 && (minor==4 || minor==6)) {"
    },
    {
        "line": 43,
        "fullcodeline": "if (major==3 && (minor==14 || minor==16)) {"
    },
    {
        "line": 51,
        "fullcodeline": "if (major==3 && minor==5) {"
    },
    {
        "line": 57,
        "fullcodeline": "if ((major==3 && minor>8) || major>3)"
    },
    {
        "line": 68,
        "fullcodeline": "if (!WriteToRFBServer(client, pv, sz_rfbProtocolVersionMsg)) return FALSE;"
    },
    {
        "line": 72,
        "fullcodeline": "if (client->major==3 && client->minor > 6)"
    },
    {
        "line": 222,
        "fullcodeline": "if (!WriteToRFBServer(client,  (char *)&ci, sz_rfbClientInitMsg)) return FALSE;"
    },
    {
        "line": 224,
        "fullcodeline": "if (!ReadFromRFBServer(client, (char *)&client->si, sz_rfbServerInitMsg)) return FALSE;"
    },
    {
        "line": 235,
        "fullcodeline": "if (!client->desktopName) {"
    },
    {
        "line": 241,
        "fullcodeline": "if (!ReadFromRFBServer(client, client->desktopName, client->si.nameLength)) return FALSE;"
    },
    {
        "line": 13,
        "fullcodeline": "errorMessageOnReadFailure = FALSE;"
    },
    {
        "line": 23,
        "fullcodeline": "rfbClientLog(\"Not a valid VNC server (%s)\\n\",pv);"
    },
    {
        "line": 34,
        "fullcodeline": "client->minor = rfbProtocolMinorVersion;"
    },
    {
        "line": 38,
        "fullcodeline": "rfbClientLog(\"UltraVNC server detected, enabling UltraVNC specific messages\\n\",pv);"
    },
    {
        "line": 39,
        "fullcodeline": "DefaultSupportedMessagesUltraVNC(client);"
    },
    {
        "line": 44,
        "fullcodeline": "minor = minor - 10;"
    },
    {
        "line": 45,
        "fullcodeline": "client->minor = minor;"
    },
    {
        "line": 46,
        "fullcodeline": "rfbClientLog(\"UltraVNC Single Click server detected, enabling UltraVNC specific messages\\n\",pv);"
    },
    {
        "line": 47,
        "fullcodeline": "DefaultSupportedMessagesUltraVNC(client);"
    },
    {
        "line": 52,
        "fullcodeline": "rfbClientLog(\"TightVNC server detected, enabling TightVNC specific messages\\n\",pv);"
    },
    {
        "line": 53,
        "fullcodeline": "DefaultSupportedMessagesTightVNC(client);"
    },
    {
        "line": 59,
        "fullcodeline": "client->major=3;"
    },
    {
        "line": 60,
        "fullcodeline": "client->minor=8;"
    },
    {
        "line": 88,
        "fullcodeline": "ReadReason(client);"
    },
    {
        "line": 92,
        "fullcodeline": "rfbClientLog(\"No authentication needed\\n\");"
    },
    {
        "line": 116,
        "fullcodeline": "rfbClientLog(\"GCrypt support was not compiled in\\n\");"
    },
    {
        "line": 129,
        "fullcodeline": "client->subAuthScheme = subAuthScheme;"
    },
    {
        "line": 215,
        "fullcodeline": "rfbClientLog(\"Unknown authentication scheme from VNC server: %d\\n\","
    },
    {
        "line": 236,
        "fullcodeline": "rfbClientLog(\"Error allocating memory for desktop name, %lu bytes\\n\","
    },
    {
        "line": 74,
        "fullcodeline": "if (!ReadSupportedSecurityType(client, &authScheme, FALSE)) return FALSE;"
    },
    {
        "line": 79,
        "fullcodeline": "authScheme = rfbClientSwap32IfLE(authScheme);"
    },
    {
        "line": 95,
        "fullcodeline": "if ((client->major==3 && client->minor > 7) || client->major>3)"
    },
    {
        "line": 101,
        "fullcodeline": "if (!HandleVncAuth(client)) return FALSE;"
    },
    {
        "line": 111,
        "fullcodeline": "if (!HandleMSLogonAuth(client)) return FALSE;"
    },
    {
        "line": 124,
        "fullcodeline": "if (!HandleAnonTLSAuth(client)) return FALSE;"
    },
    {
        "line": 128,
        "fullcodeline": "if (!ReadSupportedSecurityType(client, &subAuthScheme, TRUE)) return FALSE;"
    },
    {
        "line": 163,
        "fullcodeline": "if (!HandleVeNCryptAuth(client)) return FALSE;"
    },
    {
        "line": 200,
        "fullcodeline": "rfbBool authHandled=FALSE;"
    },
    {
        "line": 216,
        "fullcodeline": "(int)authScheme);"
    },
    {
        "line": 237,
        "fullcodeline": "(unsigned long)client->si.nameLength);"
    },
    {
        "line": 78,
        "fullcodeline": "if (!ReadFromRFBServer(client, (char *)&authScheme, 4)) return FALSE;"
    },
    {
        "line": 134,
        "fullcodeline": "ReadReason(client);"
    },
    {
        "line": 138,
        "fullcodeline": "rfbClientLog(\"No sub authentication needed\\n\");"
    },
    {
        "line": 155,
        "fullcodeline": "rfbClientLog(\"Unknown sub authentication scheme from VNC server: %d\\n\","
    },
    {
        "line": 169,
        "fullcodeline": "rfbClientLog(\"No sub authentication needed\\n\");"
    },
    {
        "line": 191,
        "fullcodeline": "rfbClientLog(\"Unknown sub authentication scheme from VNC server: %d\\n\","
    },
    {
        "line": 202,
        "fullcodeline": "for (e = rfbClientExtensions; e; e = e->next) {"
    },
    {
        "line": 96,
        "fullcodeline": "if (!rfbHandleAuthResult(client)) return FALSE;"
    },
    {
        "line": 140,
        "fullcodeline": "if ((client->major==3 && client->minor > 7) || client->major>3)"
    },
    {
        "line": 145,
        "fullcodeline": "if (!HandleVncAuth(client)) return FALSE;"
    },
    {
        "line": 156,
        "fullcodeline": "(int)subAuthScheme);"
    },
    {
        "line": 170,
        "fullcodeline": "if (!rfbHandleAuthResult(client)) return FALSE;"
    },
    {
        "line": 175,
        "fullcodeline": "if (!HandleVncAuth(client)) return FALSE;"
    },
    {
        "line": 180,
        "fullcodeline": "if (!HandlePlainAuth(client)) return FALSE;"
    },
    {
        "line": 204,
        "fullcodeline": "if (!e->handleAuthentication) continue;"
    },
    {
        "line": 205,
        "fullcodeline": "for (secType = e->securityTypes; secType && *secType; secType++) {"
    },
    {
        "line": 141,
        "fullcodeline": "if (!rfbHandleAuthResult(client)) return FALSE;"
    },
    {
        "line": 206,
        "fullcodeline": "if (authScheme==*secType) {"
    },
    {
        "line": 209,
        "fullcodeline": "authHandled=TRUE;"
    },
    {
        "line": 207,
        "fullcodeline": "if (!e->handleAuthentication(client, authScheme)) return FALSE;"
    },
    {
        "line": 208,
        "fullcodeline": "if (!rfbHandleAuthResult(client)) return FALSE;"
    }
]