[
    {
        "line": 3,
        "fullcodeline": "mp4object *mp4 = (mp4object *)malloc(sizeof(mp4object));"
    },
    {
        "line": 6,
        "fullcodeline": "memset(mp4, 0, sizeof(mp4object));"
    },
    {
        "line": 11,
        "fullcodeline": "mp4->mediafp = fopen(filename, \"rb\");"
    },
    {
        "line": 4,
        "fullcodeline": "if (mp4 == NULL) return 0;"
    },
    {
        "line": 498,
        "fullcodeline": "return (size_t)mp4;"
    },
    {
        "line": 16,
        "fullcodeline": "uint32_t qttag, qtsize32, skip, type = 0, subtype = 0, num;"
    },
    {
        "line": 18,
        "fullcodeline": "int32_t nest = 0;"
    },
    {
        "line": 20,
        "fullcodeline": "uint64_t lastsize = 0, qtsize;"
    },
    {
        "line": 19,
        "fullcodeline": "uint64_t nestsize[MAX_NEST_LEVEL] = { 0 };"
    },
    {
        "line": 495,
        "fullcodeline": "mp4 = NULL;"
    },
    {
        "line": 24,
        "fullcodeline": "len = fread(&qtsize32, 1, 4, mp4->mediafp);"
    },
    {
        "line": 25,
        "fullcodeline": "len += fread(&qttag, 1, 4, mp4->mediafp);"
    },
    {
        "line": 26,
        "fullcodeline": "if (len == 8)"
    },
    {
        "line": 36,
        "fullcodeline": "qtsize32 = BYTESWAP32(qtsize32);"
    },
    {
        "line": 46,
        "fullcodeline": "nest++;"
    },
    {
        "line": 52,
        "fullcodeline": "lastsize = qtsize;"
    },
    {
        "line": 38,
        "fullcodeline": "if (qtsize32 == 1) // 64-bit Atom"
    },
    {
        "line": 48,
        "fullcodeline": "if (qtsize < 8) break;"
    },
    {
        "line": 49,
        "fullcodeline": "if (nest >= MAX_NEST_LEVEL) break;"
    },
    {
        "line": 28,
        "fullcodeline": "if (!VALID_FOURCC(qttag))"
    },
    {
        "line": 30,
        "fullcodeline": "LONGSEEK(mp4->mediafp, lastsize - 8 - 8, SEEK_CUR);"
    },
    {
        "line": 40,
        "fullcodeline": "fread(&qtsize, 1, 8, mp4->mediafp);"
    },
    {
        "line": 41,
        "fullcodeline": "qtsize = BYTESWAP64(qtsize) - 8;"
    },
    {
        "line": 70,
        "fullcodeline": "if (qttag != MAKEID('m', 'o', 'o', 'v') && //skip over all but these atoms"
    },
    {
        "line": 88,
        "fullcodeline": "qttag != MAKEID('h', 'd', 'l', 'r'))"
    },
    {
        "line": 90,
        "fullcodeline": "LONGSEEK(mp4->mediafp, qtsize - 8, SEEK_CUR);"
    },
    {
        "line": 92,
        "fullcodeline": "NESTSIZE(qtsize);"
    },
    {
        "line": 32,
        "fullcodeline": "NESTSIZE(lastsize - 8);"
    },
    {
        "line": 44,
        "fullcodeline": "qtsize = qtsize32;"
    },
    {
        "line": 87,
        "fullcodeline": "qttag != MAKEID('c', 'o', '6', '4') &&"
    },
    {
        "line": 86,
        "fullcodeline": "qttag != MAKEID('s', 't', 'c', 'o') &&"
    },
    {
        "line": 96,
        "fullcodeline": "if (qttag == MAKEID('m', 'v', 'h', 'd')) //mvhd  movie header"
    },
    {
        "line": 85,
        "fullcodeline": "qttag != MAKEID('s', 't', 's', 'z') &&"
    },
    {
        "line": 98,
        "fullcodeline": "len = fread(&skip, 1, 4, mp4->mediafp);"
    },
    {
        "line": 99,
        "fullcodeline": "len += fread(&skip, 1, 4, mp4->mediafp);"
    },
    {
        "line": 100,
        "fullcodeline": "len += fread(&skip, 1, 4, mp4->mediafp);"
    },
    {
        "line": 101,
        "fullcodeline": "len += fread(&mp4->clockdemon, 1, 4, mp4->mediafp); mp4->clockdemon = BYTESWAP32(mp4->clockdemon);"
    },
    {
        "line": 102,
        "fullcodeline": "len += fread(&mp4->clockcount, 1, 4, mp4->mediafp); mp4->clockcount = BYTESWAP32(mp4->clockcount);"
    },
    {
        "line": 103,
        "fullcodeline": "LONGSEEK(mp4->mediafp, qtsize - 8 - len, SEEK_CUR); // skip over mvhd"
    },
    {
        "line": 105,
        "fullcodeline": "NESTSIZE(qtsize);"
    },
    {
        "line": 84,
        "fullcodeline": "qttag != MAKEID('s', 't', 's', 'c') &&"
    },
    {
        "line": 83,
        "fullcodeline": "qttag != MAKEID('s', 't', 't', 's') &&"
    },
    {
        "line": 107,
        "fullcodeline": "else if (qttag == MAKEID('m', 'd', 'h', 'd')) //mdhd  media header"
    },
    {
        "line": 82,
        "fullcodeline": "qttag != MAKEID('s', 't', 'b', 'l') &&"
    },
    {
        "line": 110,
        "fullcodeline": "len = fread(&md, 1, sizeof(md), mp4->mediafp);"
    },
    {
        "line": 126,
        "fullcodeline": "LONGSEEK(mp4->mediafp, qtsize - 8 - len, SEEK_CUR); // skip over mvhd"
    },
    {
        "line": 128,
        "fullcodeline": "NESTSIZE(qtsize);"
    },
    {
        "line": 81,
        "fullcodeline": "qttag != MAKEID('a', 'l', 'i', 's') &&"
    },
    {
        "line": 111,
        "fullcodeline": "if (len == sizeof(md))"
    },
    {
        "line": 80,
        "fullcodeline": "qttag != MAKEID('a', 'l', 'i', 's') &&"
    },
    {
        "line": 113,
        "fullcodeline": "md.creation_time = BYTESWAP32(md.creation_time);"
    },
    {
        "line": 114,
        "fullcodeline": "md.modification_time = BYTESWAP32(md.modification_time);"
    },
    {
        "line": 115,
        "fullcodeline": "md.time_scale = BYTESWAP32(md.time_scale);"
    },
    {
        "line": 116,
        "fullcodeline": "md.duration = BYTESWAP32(md.duration);"
    },
    {
        "line": 118,
        "fullcodeline": "mp4->trak_clockdemon = md.time_scale;"
    },
    {
        "line": 119,
        "fullcodeline": "mp4->trak_clockcount = md.duration;"
    },
    {
        "line": 130,
        "fullcodeline": "else if (qttag == MAKEID('h', 'd', 'l', 'r')) //hldr"
    },
    {
        "line": 79,
        "fullcodeline": "qttag != MAKEID('s', 't', 's', 'd') &&"
    },
    {
        "line": 121,
        "fullcodeline": "if (mp4->videolength == 0.0) // Get the video length from the first track"
    },
    {
        "line": 133,
        "fullcodeline": "len = fread(&skip, 1, 4, mp4->mediafp);"
    },
    {
        "line": 134,
        "fullcodeline": "len += fread(&skip, 1, 4, mp4->mediafp);"
    },
    {
        "line": 135,
        "fullcodeline": "len += fread(&temp, 1, 4, mp4->mediafp);  // type will be 'meta' for the correct trak."
    },
    {
        "line": 140,
        "fullcodeline": "LONGSEEK(mp4->mediafp, qtsize - 8 - len, SEEK_CUR); // skip over hldr"
    },
    {
        "line": 142,
        "fullcodeline": "NESTSIZE(qtsize);"
    },
    {
        "line": 78,
        "fullcodeline": "qttag != MAKEID('a', 'l', 'i', 's') &&"
    },
    {
        "line": 123,
        "fullcodeline": "mp4->videolength = (float)((double)mp4->trak_clockcount / (double)mp4->trak_clockdemon);"
    },
    {
        "line": 137,
        "fullcodeline": "if (temp != MAKEID('a', 'l', 'i', 's'))"
    },
    {
        "line": 77,
        "fullcodeline": "qttag != MAKEID('d', 'i', 'n', 'f') &&"
    },
    {
        "line": 138,
        "fullcodeline": "type = temp;"
    },
    {
        "line": 145,
        "fullcodeline": "else if (qttag == MAKEID('s', 't', 's', 'd')) //read the sample decription to determine the type of metadata"
    },
    {
        "line": 76,
        "fullcodeline": "qttag != MAKEID('g', 'm', 'i', 'n') &&"
    },
    {
        "line": 165,
        "fullcodeline": "NESTSIZE(qtsize);"
    },
    {
        "line": 75,
        "fullcodeline": "qttag != MAKEID('m', 'i', 'n', 'f') &&"
    },
    {
        "line": 147,
        "fullcodeline": "if (type == traktype) //like meta"
    },
    {
        "line": 74,
        "fullcodeline": "qttag != MAKEID('m', 'd', 'h', 'd') &&"
    },
    {
        "line": 149,
        "fullcodeline": "len = fread(&skip, 1, 4, mp4->mediafp);"
    },
    {
        "line": 150,
        "fullcodeline": "len += fread(&skip, 1, 4, mp4->mediafp);"
    },
    {
        "line": 151,
        "fullcodeline": "len += fread(&skip, 1, 4, mp4->mediafp);"
    },
    {
        "line": 152,
        "fullcodeline": "len += fread(&subtype, 1, 4, mp4->mediafp);  // type will be 'meta' for the correct trak."
    },
    {
        "line": 160,
        "fullcodeline": "LONGSEEK(mp4->mediafp, qtsize - 8 - len, SEEK_CUR); // skip over stsd"
    },
    {
        "line": 167,
        "fullcodeline": "else if (qttag == MAKEID('s', 't', 's', 'c')) // metadata stsc - offset chunks"
    },
    {
        "line": 73,
        "fullcodeline": "qttag != MAKEID('m', 'd', 'i', 'a') &&"
    },
    {
        "line": 153,
        "fullcodeline": "if (len == 16)"
    },
    {
        "line": 163,
        "fullcodeline": "LONGSEEK(mp4->mediafp, qtsize - 8, SEEK_CUR);"
    },
    {
        "line": 206,
        "fullcodeline": "NESTSIZE(qtsize);"
    },
    {
        "line": 72,
        "fullcodeline": "qttag != MAKEID('t', 'r', 'a', 'k') &&"
    },
    {
        "line": 169,
        "fullcodeline": "if (type == traktype) // meta"
    },
    {
        "line": 71,
        "fullcodeline": "qttag != MAKEID('m', 'v', 'h', 'd') &&"
    },
    {
        "line": 155,
        "fullcodeline": "if (subtype != traksubtype) // MP4 metadata"
    },
    {
        "line": 171,
        "fullcodeline": "len = fread(&skip, 1, 4, mp4->mediafp);"
    },
    {
        "line": 172,
        "fullcodeline": "len += fread(&num, 1, 4, mp4->mediafp);"
    },
    {
        "line": 174,
        "fullcodeline": "num = BYTESWAP32(num);"
    },
    {
        "line": 201,
        "fullcodeline": "LONGSEEK(mp4->mediafp, qtsize - 8 - len, SEEK_CUR); // skip over stsx"
    },
    {
        "line": 208,
        "fullcodeline": "else if (qttag == MAKEID('s', 't', 's', 'z')) // metadata stsz - sizes"
    },
    {
        "line": 157,
        "fullcodeline": "type = 0; // MP4"
    },
    {
        "line": 204,
        "fullcodeline": "LONGSEEK(mp4->mediafp, qtsize - 8, SEEK_CUR);"
    },
    {
        "line": 251,
        "fullcodeline": "NESTSIZE(qtsize);"
    },
    {
        "line": 175,
        "fullcodeline": "if (num * 12 <= qtsize - 8 - len)"
    },
    {
        "line": 177,
        "fullcodeline": "mp4->metastsc_count = num;"
    },
    {
        "line": 179,
        "fullcodeline": "mp4->metastsc = (SampleToChunk *)malloc(num * 12);"
    },
    {
        "line": 210,
        "fullcodeline": "if (type == traktype) // meta"
    },
    {
        "line": 214,
        "fullcodeline": "len = fread(&skip, 1, 4, mp4->mediafp);"
    },
    {
        "line": 215,
        "fullcodeline": "len += fread(&equalsamplesize, 1, 4, mp4->mediafp);"
    },
    {
        "line": 216,
        "fullcodeline": "len += fread(&num, 1, 4, mp4->mediafp);"
    },
    {
        "line": 218,
        "fullcodeline": "num = BYTESWAP32(num);"
    },
    {
        "line": 246,
        "fullcodeline": "LONGSEEK(mp4->mediafp, qtsize - 8 - len, SEEK_CUR); // skip over stsz"
    },
    {
        "line": 253,
        "fullcodeline": "else if (qttag == MAKEID('s', 't', 'c', 'o')) // metadata stco - offsets"
    },
    {
        "line": 183,
        "fullcodeline": "len += fread(mp4->metastsc, 1, num * sizeof(SampleToChunk), mp4->mediafp);"
    },
    {
        "line": 194,
        "fullcodeline": "if (mp4->metastsc_count == 1 && mp4->metastsc[0].samples == 1) // Simplify if the stsc is not reporting any grouped chunks."
    },
    {
        "line": 197,
        "fullcodeline": "mp4->metastsc = NULL;"
    },
    {
        "line": 198,
        "fullcodeline": "mp4->metastsc_count = 0;"
    },
    {
        "line": 249,
        "fullcodeline": "LONGSEEK(mp4->mediafp, qtsize - 8, SEEK_CUR);"
    },
    {
        "line": 350,
        "fullcodeline": "NESTSIZE(qtsize);"
    },
    {
        "line": 191,
        "fullcodeline": "} while (num > 0);"
    },
    {
        "line": 219,
        "fullcodeline": "if (num * 4 <= qtsize - 8 - len)"
    },
    {
        "line": 221,
        "fullcodeline": "mp4->metasize_count = num;"
    },
    {
        "line": 223,
        "fullcodeline": "mp4->metasizes = (uint32_t *)malloc(num * 4);"
    },
    {
        "line": 255,
        "fullcodeline": "if (type == traktype) // meta"
    },
    {
        "line": 187,
        "fullcodeline": "num--;"
    },
    {
        "line": 257,
        "fullcodeline": "len = fread(&skip, 1, 4, mp4->mediafp);"
    },
    {
        "line": 258,
        "fullcodeline": "len += fread(&num, 1, 4, mp4->mediafp);"
    },
    {
        "line": 259,
        "fullcodeline": "num = BYTESWAP32(num);"
    },
    {
        "line": 345,
        "fullcodeline": "LONGSEEK(mp4->mediafp, qtsize - 8 - len, SEEK_CUR); // skip over stco"
    },
    {
        "line": 353,
        "fullcodeline": "else if (qttag == MAKEID('c', 'o', '6', '4')) // metadata stco - offsets"
    },
    {
        "line": 188,
        "fullcodeline": "mp4->metastsc[num].chunk_num = BYTESWAP32(mp4->metastsc[num].chunk_num);"
    },
    {
        "line": 189,
        "fullcodeline": "mp4->metastsc[num].samples = BYTESWAP32(mp4->metastsc[num].samples);"
    },
    {
        "line": 190,
        "fullcodeline": "mp4->metastsc[num].id = BYTESWAP32(mp4->metastsc[num].id);"
    },
    {
        "line": 348,
        "fullcodeline": "LONGSEEK(mp4->mediafp, qtsize - 8, SEEK_CUR);"
    },
    {
        "line": 436,
        "fullcodeline": "NESTSIZE(qtsize);"
    },
    {
        "line": 226,
        "fullcodeline": "if (equalsamplesize == 0)"
    },
    {
        "line": 260,
        "fullcodeline": "if (num * 4 <= qtsize - 8 - len)"
    },
    {
        "line": 355,
        "fullcodeline": "if (type == traktype) // meta"
    },
    {
        "line": 228,
        "fullcodeline": "len += fread(mp4->metasizes, 1, num * 4, mp4->mediafp);"
    },
    {
        "line": 262,
        "fullcodeline": "if (mp4->metastsc_count > 0 && num != mp4->metasize_count)"
    },
    {
        "line": 357,
        "fullcodeline": "len = fread(&skip, 1, 4, mp4->mediafp);"
    },
    {
        "line": 358,
        "fullcodeline": "len += fread(&num, 1, 4, mp4->mediafp);"
    },
    {
        "line": 359,
        "fullcodeline": "num = BYTESWAP32(num);"
    },
    {
        "line": 431,
        "fullcodeline": "LONGSEEK(mp4->mediafp, qtsize - 8 - len, SEEK_CUR); // skip over stco"
    },
    {
        "line": 438,
        "fullcodeline": "else if (qttag == MAKEID('s', 't', 't', 's')) // time to samples"
    },
    {
        "line": 233,
        "fullcodeline": "} while (num > 0);"
    },
    {
        "line": 237,
        "fullcodeline": "equalsamplesize = BYTESWAP32(equalsamplesize);"
    },
    {
        "line": 264,
        "fullcodeline": "mp4->indexcount = mp4->metasize_count;"
    },
    {
        "line": 266,
        "fullcodeline": "mp4->metaoffsets = (uint64_t *)malloc(mp4->metasize_count * 8);"
    },
    {
        "line": 434,
        "fullcodeline": "LONGSEEK(mp4->mediafp, qtsize - 8, SEEK_CUR);"
    },
    {
        "line": 476,
        "fullcodeline": "NESTSIZE(qtsize);"
    },
    {
        "line": 231,
        "fullcodeline": "num--;"
    },
    {
        "line": 232,
        "fullcodeline": "mp4->metasizes[num] = BYTESWAP32(mp4->metasizes[num]);"
    },
    {
        "line": 242,
        "fullcodeline": "} while (num > 0);"
    },
    {
        "line": 323,
        "fullcodeline": "mp4->indexcount = num;"
    },
    {
        "line": 325,
        "fullcodeline": "mp4->metaoffsets = (uint64_t *)malloc(num * 8);"
    },
    {
        "line": 360,
        "fullcodeline": "if (num * 8 <= qtsize - 8 - len)"
    },
    {
        "line": 440,
        "fullcodeline": "if (type == traktype) // meta"
    },
    {
        "line": 240,
        "fullcodeline": "num--;"
    },
    {
        "line": 241,
        "fullcodeline": "mp4->metasizes[num] = equalsamplesize;"
    },
    {
        "line": 270,
        "fullcodeline": "metaoffsets32 = (uint32_t *)malloc(num * 4);"
    },
    {
        "line": 362,
        "fullcodeline": "if (mp4->metastsc_count > 0 && num != mp4->metasize_count)"
    },
    {
        "line": 442,
        "fullcodeline": "uint32_t totaldur = 0, samples = 0;"
    },
    {
        "line": 444,
        "fullcodeline": "len = fread(&skip, 1, 4, mp4->mediafp);"
    },
    {
        "line": 445,
        "fullcodeline": "len += fread(&num, 1, 4, mp4->mediafp);"
    },
    {
        "line": 446,
        "fullcodeline": "num = BYTESWAP32(num);"
    },
    {
        "line": 471,
        "fullcodeline": "LONGSEEK(mp4->mediafp, qtsize - 8 - len, SEEK_CUR); // skip over stco"
    },
    {
        "line": 329,
        "fullcodeline": "metaoffsets32 = (uint32_t *)malloc(num * 4);"
    },
    {
        "line": 364,
        "fullcodeline": "mp4->indexcount = mp4->metasize_count;"
    },
    {
        "line": 366,
        "fullcodeline": "mp4->metaoffsets = (uint64_t *)malloc(mp4->metasize_count * 8);"
    },
    {
        "line": 474,
        "fullcodeline": "LONGSEEK(mp4->mediafp, qtsize - 8, SEEK_CUR);"
    },
    {
        "line": 274,
        "fullcodeline": "int stsc_pos = 0;"
    },
    {
        "line": 275,
        "fullcodeline": "int stco_pos = 0;"
    },
    {
        "line": 276,
        "fullcodeline": "int repeat = 1;"
    },
    {
        "line": 277,
        "fullcodeline": "len += fread(metaoffsets32, 1, num * 4, mp4->mediafp);"
    },
    {
        "line": 284,
        "fullcodeline": "mp4->metaoffsets[0] = fileoffset = metaoffsets32[stco_pos];"
    },
    {
        "line": 285,
        "fullcodeline": "num = 1;"
    },
    {
        "line": 314,
        "fullcodeline": "mp4->metastsc = NULL;"
    },
    {
        "line": 315,
        "fullcodeline": "mp4->metastsc_count = 0;"
    },
    {
        "line": 417,
        "fullcodeline": "mp4->indexcount = num;"
    },
    {
        "line": 419,
        "fullcodeline": "mp4->metaoffsets = (uint64_t *)malloc(num * 8);"
    },
    {
        "line": 447,
        "fullcodeline": "if (num * 8 <= qtsize - 8 - len)"
    },
    {
        "line": 449,
        "fullcodeline": "entries = num;"
    },
    {
        "line": 451,
        "fullcodeline": "mp4->meta_clockdemon = mp4->trak_clockdemon;"
    },
    {
        "line": 452,
        "fullcodeline": "mp4->meta_clockcount = mp4->trak_clockcount;"
    },
    {
        "line": 469,
        "fullcodeline": "mp4->basemetadataduration = mp4->metadatalength * (double)mp4->meta_clockdemon / (double)samples;"
    },
    {
        "line": 282,
        "fullcodeline": "} while (num > 0);"
    },
    {
        "line": 286,
        "fullcodeline": "while (num < mp4->metasize_count)"
    },
    {
        "line": 332,
        "fullcodeline": "size_t readlen = fread(metaoffsets32, 1, num * 4, mp4->mediafp);"
    },
    {
        "line": 333,
        "fullcodeline": "len += readlen;"
    },
    {
        "line": 370,
        "fullcodeline": "metaoffsets64 = (uint64_t *)malloc(num * 8);"
    },
    {
        "line": 454,
        "fullcodeline": "while (entries > 0)"
    },
    {
        "line": 280,
        "fullcodeline": "num--;"
    },
    {
        "line": 281,
        "fullcodeline": "metaoffsets32[num] = BYTESWAP32(metaoffsets32[num]);"
    },
    {
        "line": 306,
        "fullcodeline": "mp4->metaoffsets[num] = fileoffset;"
    },
    {
        "line": 310,
        "fullcodeline": "num++;"
    },
    {
        "line": 338,
        "fullcodeline": "} while (num > 0);"
    },
    {
        "line": 422,
        "fullcodeline": "len += fread(mp4->metaoffsets, 1, num * 8, mp4->mediafp);"
    },
    {
        "line": 458,
        "fullcodeline": "len += fread(&samplecount, 1, 4, mp4->mediafp);"
    },
    {
        "line": 459,
        "fullcodeline": "samplecount = BYTESWAP32(samplecount);"
    },
    {
        "line": 460,
        "fullcodeline": "len += fread(&duration, 1, 4, mp4->mediafp);"
    },
    {
        "line": 461,
        "fullcodeline": "duration = BYTESWAP32(duration);"
    },
    {
        "line": 463,
        "fullcodeline": "samples += samplecount;"
    },
    {
        "line": 464,
        "fullcodeline": "entries--;"
    },
    {
        "line": 467,
        "fullcodeline": "mp4->metadatalength += (double)((double)samplecount * (double)duration / (double)mp4->meta_clockdemon);"
    },
    {
        "line": 336,
        "fullcodeline": "num--;"
    },
    {
        "line": 337,
        "fullcodeline": "mp4->metaoffsets[num] = BYTESWAP32(metaoffsets32[num]);"
    },
    {
        "line": 375,
        "fullcodeline": "int stco_pos = 0;"
    },
    {
        "line": 376,
        "fullcodeline": "len += fread(metaoffsets64, 1, num * 8, mp4->mediafp);"
    },
    {
        "line": 383,
        "fullcodeline": "fileoffset = metaoffsets64[0];"
    },
    {
        "line": 384,
        "fullcodeline": "mp4->metaoffsets[0] = fileoffset;"
    },
    {
        "line": 387,
        "fullcodeline": "num = 1;"
    },
    {
        "line": 408,
        "fullcodeline": "mp4->metastsc = NULL;"
    },
    {
        "line": 409,
        "fullcodeline": "mp4->metastsc_count = 0;"
    },
    {
        "line": 427,
        "fullcodeline": "} while (num > 0);"
    },
    {
        "line": 288,
        "fullcodeline": "if (stsc_pos + 1 < (int)mp4->metastsc_count && num == stsc_pos)"
    },
    {
        "line": 290,
        "fullcodeline": "stco_pos++; stsc_pos++;"
    },
    {
        "line": 291,
        "fullcodeline": "fileoffset = (uint64_t)metaoffsets32[stco_pos];"
    },
    {
        "line": 292,
        "fullcodeline": "repeat = 1;"
    },
    {
        "line": 381,
        "fullcodeline": "} while (num > 0);"
    },
    {
        "line": 388,
        "fullcodeline": "while (num < mp4->metasize_count)"
    },
    {
        "line": 425,
        "fullcodeline": "num--;"
    },
    {
        "line": 426,
        "fullcodeline": "mp4->metaoffsets[num] = BYTESWAP64(mp4->metaoffsets[num]);"
    },
    {
        "line": 379,
        "fullcodeline": "num--;"
    },
    {
        "line": 380,
        "fullcodeline": "metaoffsets64[num] = BYTESWAP64(metaoffsets64[num]);"
    },
    {
        "line": 400,
        "fullcodeline": "mp4->metaoffsets[num] = fileoffset;"
    },
    {
        "line": 404,
        "fullcodeline": "num++;"
    },
    {
        "line": 294,
        "fullcodeline": "else if (repeat == mp4->metastsc[stsc_pos].samples)"
    },
    {
        "line": 296,
        "fullcodeline": "stco_pos++;"
    },
    {
        "line": 297,
        "fullcodeline": "fileoffset = (uint64_t)metaoffsets32[stco_pos];"
    },
    {
        "line": 298,
        "fullcodeline": "repeat = 1;"
    },
    {
        "line": 390,
        "fullcodeline": "if (num != mp4->metastsc[stsc_pos].chunk_num - 1 && 0 == (num - (mp4->metastsc[stsc_pos].chunk_num - 1)) % mp4->metastsc[stsc_pos].samples)"
    },
    {
        "line": 393,
        "fullcodeline": "fileoffset = (uint64_t)metaoffsets64[stco_pos];"
    },
    {
        "line": 302,
        "fullcodeline": "fileoffset += (uint64_t)mp4->metasizes[num - 1];"
    },
    {
        "line": 303,
        "fullcodeline": "repeat++;"
    },
    {
        "line": 397,
        "fullcodeline": "fileoffset += (uint64_t)mp4->metasizes[num - 1];"
    }
]