[
    {
        "line": 3,
        "fullcodeline": "PopulateIPLength(reinterpret_cast<IPv4Header*>(IpHeader), static_cast<USHORT>(EthPayloadLength));"
    },
    {
        "line": 6,
        "fullcodeline": "packetReview = ParaNdis_CheckSumVerifyFlat(reinterpret_cast<IPv4Header*>(IpHeader), EthPayloadLength,"
    },
    {
        "line": 11,
        "fullcodeline": "if (packetReview.xxpCheckSum == ppresPCSOK || packetReview.fixedXxpCS)"
    },
    {
        "line": 7,
        "fullcodeline": "pcrIpChecksum | pcrFixIPChecksum | pcrTcpChecksum | pcrFixPHChecksum,"
    },
    {
        "line": 13,
        "fullcodeline": "auto IpHeaderOffset = m_Context->Offload.ipHeaderOffset;"
    },
    {
        "line": 14,
        "fullcodeline": "auto VHeader = static_cast<virtio_net_hdr_basic*>(VirtioHeader);"
    },
    {
        "line": 15,
        "fullcodeline": "auto PriorityHdrLen = (m_ParentNBL->TCI() != 0) ? ETH_PRIORITY_HEADER_SIZE : 0;"
    },
    {
        "line": 17,
        "fullcodeline": "VHeader->flags = VIRTIO_NET_HDR_F_NEEDS_CSUM;"
    },
    {
        "line": 18,
        "fullcodeline": "VHeader->gso_type = packetReview.ipStatus == ppresIPV4 ? VIRTIO_NET_HDR_GSO_TCPV4 : VIRTIO_NET_HDR_GSO_TCPV6;"
    },
    {
        "line": 19,
        "fullcodeline": "VHeader->hdr_len = (USHORT)(packetReview.XxpIpHeaderSize + IpHeaderOffset + PriorityHdrLen);"
    },
    {
        "line": 20,
        "fullcodeline": "VHeader->gso_size = (USHORT)m_ParentNBL->MSS();"
    },
    {
        "line": 21,
        "fullcodeline": "VHeader->csum_start = (USHORT)(m_ParentNBL->TCPHeaderOffset() + PriorityHdrLen);"
    },
    {
        "line": 22,
        "fullcodeline": "VHeader->csum_offset = TCP_CHECKSUM_OFFSET;"
    }
]