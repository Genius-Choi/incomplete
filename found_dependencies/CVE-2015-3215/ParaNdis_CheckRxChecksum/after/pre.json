[
    {
        "line": 8,
        "fullcodeline": "tOffloadSettingsFlags f = pContext->Offload.flags;"
    },
    {
        "line": 11,
        "fullcodeline": "ULONG flagsToCalculate = 0;"
    },
    {
        "line": 12,
        "fullcodeline": "res.value = 0;"
    },
    {
        "line": 34,
        "fullcodeline": "ppr = ParaNdis_CheckSumVerify(pPacketPages, ulPacketLength - ETH_HEADER_SIZE, ulDataOffset + ETH_HEADER_SIZE, flagsToCalculate, __FUNCTION__);"
    },
    {
        "line": 19,
        "fullcodeline": "if (!(virtioFlags & VIRTIO_NET_HDR_F_DATA_VALID))"
    },
    {
        "line": 36,
        "fullcodeline": "if (ppr.ipCheckSum == ppresIPTooShort || ppr.xxpStatus == ppresXxpIncomplete)"
    },
    {
        "line": 17,
        "fullcodeline": "if (f.fRxIPChecksum) flagsToCalculate |= pcrIpChecksum; // check only"
    },
    {
        "line": 38,
        "fullcodeline": "res.flags.IpOK = FALSE;"
    },
    {
        "line": 39,
        "fullcodeline": "res.flags.IpFailed = TRUE;"
    },
    {
        "line": 46,
        "fullcodeline": "ppr.xxpCheckSum = ppresCSOK;"
    },
    {
        "line": 49,
        "fullcodeline": "if (ppr.ipStatus == ppresIPV4 && !ppr.IsFragment)"
    },
    {
        "line": 21,
        "fullcodeline": "if (virtioFlags & VIRTIO_NET_HDR_F_NEEDS_CSUM)"
    },
    {
        "line": 23,
        "fullcodeline": "flagsToCalculate |= pcrFixXxpChecksum | pcrTcpChecksum | pcrUdpChecksum;"
    },
    {
        "line": 76,
        "fullcodeline": "else if (ppr.ipStatus == ppresIPV6)"
    },
    {
        "line": 53,
        "fullcodeline": "res.flags.IpOK =  ppr.ipCheckSum == ppresCSOK;"
    },
    {
        "line": 54,
        "fullcodeline": "res.flags.IpFailed = ppr.ipCheckSum == ppresCSBad;"
    },
    {
        "line": 27,
        "fullcodeline": "if (f.fRxTCPChecksum) flagsToCalculate |= pcrTcpV4Checksum;"
    },
    {
        "line": 28,
        "fullcodeline": "if (f.fRxUDPChecksum) flagsToCalculate |= pcrUdpV4Checksum;"
    },
    {
        "line": 29,
        "fullcodeline": "if (f.fRxTCPv6Checksum) flagsToCalculate |= pcrTcpV6Checksum;"
    },
    {
        "line": 30,
        "fullcodeline": "if (f.fRxUDPv6Checksum) flagsToCalculate |= pcrUdpV6Checksum;"
    },
    {
        "line": 62,
        "fullcodeline": "res.flags.TcpOK = ppr.xxpCheckSum == ppresCSOK || ppr.fixedXxpCS;"
    },
    {
        "line": 63,
        "fullcodeline": "res.flags.TcpFailed = !res.flags.TcpOK;"
    },
    {
        "line": 70,
        "fullcodeline": "res.flags.UdpOK = ppr.xxpCheckSum == ppresCSOK || ppr.fixedXxpCS;"
    },
    {
        "line": 71,
        "fullcodeline": "res.flags.UdpFailed = !res.flags.UdpOK;"
    },
    {
        "line": 84,
        "fullcodeline": "res.flags.TcpOK = ppr.xxpCheckSum == ppresCSOK || ppr.fixedXxpCS;"
    },
    {
        "line": 85,
        "fullcodeline": "res.flags.TcpFailed = !res.flags.TcpOK;"
    },
    {
        "line": 92,
        "fullcodeline": "res.flags.UdpOK = ppr.xxpCheckSum == ppresCSOK || ppr.fixedXxpCS;"
    },
    {
        "line": 93,
        "fullcodeline": "res.flags.UdpFailed = !res.flags.UdpOK;"
    }
]