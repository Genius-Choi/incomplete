[
    {
        "line": 8,
        "fullcodeline": "tOffloadSettingsFlags f = pContext->Offload.flags;"
    },
    {
        "line": 11,
        "fullcodeline": "ULONG flagsToCalculate = 0;"
    },
    {
        "line": 12,
        "fullcodeline": "res.value = 0;"
    },
    {
        "line": 13,
        "fullcodeline": "resIp.value = 0;"
    },
    {
        "line": 35,
        "fullcodeline": "ppr = ParaNdis_CheckSumVerify(pPacketPages, ulPacketLength - ETH_HEADER_SIZE, ulDataOffset + ETH_HEADER_SIZE, flagsToCalculate, __FUNCTION__);"
    },
    {
        "line": 20,
        "fullcodeline": "if (!(virtioFlags & VIRTIO_NET_HDR_F_DATA_VALID))"
    },
    {
        "line": 37,
        "fullcodeline": "if (virtioFlags & VIRTIO_NET_HDR_F_DATA_VALID)"
    },
    {
        "line": 43,
        "fullcodeline": "if (ppr.ipStatus == ppresIPV4 && !ppr.IsFragment)"
    },
    {
        "line": 18,
        "fullcodeline": "if (f.fRxIPChecksum) flagsToCalculate |= pcrIpChecksum; // check only"
    },
    {
        "line": 39,
        "fullcodeline": "pContext->extraStatistics.framesRxCSHwOK++;"
    },
    {
        "line": 40,
        "fullcodeline": "ppr.xxpCheckSum = ppresCSOK;"
    },
    {
        "line": 22,
        "fullcodeline": "if (virtioFlags & VIRTIO_NET_HDR_F_NEEDS_CSUM)"
    },
    {
        "line": 50,
        "fullcodeline": "if(ppr.xxpStatus == ppresXxpKnown)"
    },
    {
        "line": 24,
        "fullcodeline": "flagsToCalculate |= pcrFixXxpChecksum | pcrTcpChecksum | pcrUdpChecksum;"
    },
    {
        "line": 47,
        "fullcodeline": "res.flags.IpOK =  ppr.ipCheckSum == ppresCSOK;"
    },
    {
        "line": 48,
        "fullcodeline": "res.flags.IpFailed = ppr.ipCheckSum == ppresCSBad;"
    },
    {
        "line": 70,
        "fullcodeline": "else if (ppr.ipStatus == ppresIPV6)"
    },
    {
        "line": 52,
        "fullcodeline": "if(ppr.TcpUdp == ppresIsTCP) /* TCP */"
    },
    {
        "line": 72,
        "fullcodeline": "if(ppr.xxpStatus == ppresXxpKnown)"
    },
    {
        "line": 28,
        "fullcodeline": "if (f.fRxTCPChecksum) flagsToCalculate |= pcrTcpV4Checksum;"
    },
    {
        "line": 29,
        "fullcodeline": "if (f.fRxUDPChecksum) flagsToCalculate |= pcrUdpV4Checksum;"
    },
    {
        "line": 30,
        "fullcodeline": "if (f.fRxTCPv6Checksum) flagsToCalculate |= pcrTcpV6Checksum;"
    },
    {
        "line": 31,
        "fullcodeline": "if (f.fRxUDPv6Checksum) flagsToCalculate |= pcrUdpV6Checksum;"
    },
    {
        "line": 56,
        "fullcodeline": "res.flags.TcpOK = ppr.xxpCheckSum == ppresCSOK || ppr.fixedXxpCS;"
    },
    {
        "line": 57,
        "fullcodeline": "res.flags.TcpFailed = !res.flags.TcpOK;"
    },
    {
        "line": 74,
        "fullcodeline": "if(ppr.TcpUdp == ppresIsTCP) /* TCP */"
    },
    {
        "line": 64,
        "fullcodeline": "res.flags.UdpOK = ppr.xxpCheckSum == ppresCSOK || ppr.fixedXxpCS;"
    },
    {
        "line": 65,
        "fullcodeline": "res.flags.UdpFailed = !res.flags.UdpOK;"
    },
    {
        "line": 78,
        "fullcodeline": "res.flags.TcpOK = ppr.xxpCheckSum == ppresCSOK || ppr.fixedXxpCS;"
    },
    {
        "line": 79,
        "fullcodeline": "res.flags.TcpFailed = !res.flags.TcpOK;"
    },
    {
        "line": 86,
        "fullcodeline": "res.flags.UdpOK = ppr.xxpCheckSum == ppresCSOK || ppr.fixedXxpCS;"
    },
    {
        "line": 87,
        "fullcodeline": "res.flags.UdpFailed = !res.flags.UdpOK;"
    }
]