[
    {
        "line": 12,
        "fullcodeline": "fp_write = fout.write"
    },
    {
        "line": 27,
        "fullcodeline": "buf = b''"
    },
    {
        "line": 28,
        "fullcodeline": "len_delim = len(delim)"
    },
    {
        "line": 14,
        "fullcodeline": "if not delim:"
    },
    {
        "line": 31,
        "fullcodeline": "tmp = fin.read(buf_size)"
    },
    {
        "line": 34,
        "fullcodeline": "if not tmp:"
    },
    {
        "line": 16,
        "fullcodeline": "tmp = fin.read(buf_size)"
    },
    {
        "line": 23,
        "fullcodeline": "fp_write(tmp)"
    },
    {
        "line": 24,
        "fullcodeline": "callback(len(tmp))"
    },
    {
        "line": 47,
        "fullcodeline": "i = tmp.find(delim)"
    },
    {
        "line": 54,
        "fullcodeline": "buf = b''"
    },
    {
        "line": 55,
        "fullcodeline": "tmp = tmp[i + len_delim:]"
    },
    {
        "line": 19,
        "fullcodeline": "if not tmp:"
    },
    {
        "line": 48,
        "fullcodeline": "if i < 0:"
    },
    {
        "line": 20,
        "fullcodeline": "getattr(fout, 'flush', lambda: None)()"
    },
    {
        "line": 36,
        "fullcodeline": "fp_write(buf)"
    },
    {
        "line": 49,
        "fullcodeline": "buf += tmp"
    },
    {
        "line": 51,
        "fullcodeline": "fp_write(buf + tmp[:i + len(delim)])"
    },
    {
        "line": 53,
        "fullcodeline": "callback(1 if callback_len else (buf + tmp[:i]))"
    },
    {
        "line": 41,
        "fullcodeline": "for i in buf.split(delim):"
    },
    {
        "line": 39,
        "fullcodeline": "callback(1 + buf.count(delim))"
    }
]