[
    {
        "line": 115,
        "fullcodeline": "parameters = list(locals().items())"
    },
    {
        "line": 117,
        "fullcodeline": "log.debug(f\"headless = {headless} ; print_only = {print_only}\")"
    },
    {
        "line": 119,
        "fullcodeline": "log.info(f\"Start Finetuning...\")"
    },
    {
        "line": 237,
        "fullcodeline": "log.info(f\"lr_warmup_steps = {lr_warmup_steps}\")"
    },
    {
        "line": 239,
        "fullcodeline": "run_cmd = \"accelerate launch\""
    },
    {
        "line": 241,
        "fullcodeline": "run_cmd += AccelerateLaunch.run_cmd("
    },
    {
        "line": 257,
        "fullcodeline": "in_json = ("
    },
    {
        "line": 262,
        "fullcodeline": "cache_text_encoder_outputs = sdxl_checkbox and sdxl_cache_text_encoder_outputs"
    },
    {
        "line": 263,
        "fullcodeline": "no_half_vae = sdxl_checkbox and sdxl_no_half_vae"
    },
    {
        "line": 266,
        "fullcodeline": "kwargs_for_training = {"
    },
    {
        "line": 362,
        "fullcodeline": "run_cmd += run_cmd_advanced_training(**kwargs_for_training)"
    },
    {
        "line": 364,
        "fullcodeline": "run_cmd += run_cmd_sample("
    },
    {
        "line": 121,
        "fullcodeline": "if train_dir != \"\" and not os.path.exists(train_dir):"
    },
    {
        "line": 124,
        "fullcodeline": "if not validate_paths("
    },
    {
        "line": 136,
        "fullcodeline": "if not print_only and check_if_model_exist("
    },
    {
        "line": 232,
        "fullcodeline": "if max_train_steps != \"\":"
    },
    {
        "line": 258,
        "fullcodeline": "rf\"{train_dir}/{latent_metadata_filename}\""
    },
    {
        "line": 122,
        "fullcodeline": "os.mkdir(train_dir)"
    },
    {
        "line": 142,
        "fullcodeline": "log.info("
    },
    {
        "line": 204,
        "fullcodeline": "image_num = len("
    },
    {
        "line": 213,
        "fullcodeline": "log.info(f\"image_num = {image_num}\")"
    },
    {
        "line": 215,
        "fullcodeline": "repeats = int(image_num) * int(dataset_repeats)"
    },
    {
        "line": 216,
        "fullcodeline": "log.info(f\"repeats = {str(repeats)}\")"
    },
    {
        "line": 219,
        "fullcodeline": "max_train_steps = int("
    },
    {
        "line": 233,
        "fullcodeline": "log.info(f\"max_train_steps = {max_train_steps}\")"
    },
    {
        "line": 234,
        "fullcodeline": "lr_warmup_steps = round(float(int(lr_warmup) * int(max_train_steps) / 100))"
    },
    {
        "line": 236,
        "fullcodeline": "lr_warmup_steps = 0"
    },
    {
        "line": 253,
        "fullcodeline": "run_cmd += rf' \"{scriptdir}/sd-scripts/sdxl_train.py\"'"
    },
    {
        "line": 255,
        "fullcodeline": "run_cmd += rf' \"{scriptdir}/sd-scripts/fine_tune.py\"'"
    },
    {
        "line": 259,
        "fullcodeline": "if use_latent_files == \"Yes\""
    },
    {
        "line": 260,
        "fullcodeline": "else rf\"{train_dir}/{caption_metadata_filename}\""
    },
    {
        "line": 354,
        "fullcodeline": "kwargs_for_training[\"cache_text_encoder_outputs\"] = cache_text_encoder_outputs"
    },
    {
        "line": 355,
        "fullcodeline": "kwargs_for_training[\"learning_rate_te1\"] = learning_rate_te1"
    },
    {
        "line": 356,
        "fullcodeline": "kwargs_for_training[\"learning_rate_te2\"] = learning_rate_te2"
    },
    {
        "line": 357,
        "fullcodeline": "kwargs_for_training[\"no_half_vae\"] = no_half_vae"
    },
    {
        "line": 359,
        "fullcodeline": "kwargs_for_training[\"learning_rate_te\"] = learning_rate_te"
    },
    {
        "line": 373,
        "fullcodeline": "log.warning("
    },
    {
        "line": 376,
        "fullcodeline": "print(run_cmd)"
    },
    {
        "line": 378,
        "fullcodeline": "save_to_file(run_cmd)"
    },
    {
        "line": 381,
        "fullcodeline": "current_datetime = datetime.now()"
    },
    {
        "line": 382,
        "fullcodeline": "formatted_datetime = current_datetime.strftime(\"%Y%m%d-%H%M%S\")"
    },
    {
        "line": 384,
        "fullcodeline": "file_path = os.path.join(output_dir, f\"{output_name}_{formatted_datetime}.json\")"
    },
    {
        "line": 386,
        "fullcodeline": "log.info(f\"Saving training config to {file_path}...\")"
    },
    {
        "line": 388,
        "fullcodeline": "SaveConfigFile("
    },
    {
        "line": 394,
        "fullcodeline": "log.info(run_cmd)"
    },
    {
        "line": 396,
        "fullcodeline": "env = os.environ.copy()"
    },
    {
        "line": 397,
        "fullcodeline": "env[\"PYTHONPATH\"] = ("
    },
    {
        "line": 400,
        "fullcodeline": "env[\"TF_ENABLE_ONEDNN_OPTS\"] = \"0\""
    },
    {
        "line": 403,
        "fullcodeline": "executor.execute_command(run_cmd=run_cmd, env=env)"
    },
    {
        "line": 229,
        "fullcodeline": "if flip_aug and max_train_steps:"
    },
    {
        "line": 391,
        "fullcodeline": "exclusion=[\"file_path\", \"save_as\", \"headless\", \"print_only\"],"
    },
    {
        "line": 398,
        "fullcodeline": "rf\"{scriptdir}{os.pathsep}{scriptdir}/sd-scripts{os.pathsep}{env.get('PYTHONPATH', '')}\""
    },
    {
        "line": 148,
        "fullcodeline": "run_cmd = rf'\"{PYTHON}\" \"{scriptdir}/sd-scripts/finetune/merge_captions_to_metadata.py\"'"
    },
    {
        "line": 153,
        "fullcodeline": "run_cmd += rf' \"{image_folder}\"'"
    },
    {
        "line": 154,
        "fullcodeline": "run_cmd += rf' \"{train_dir}/{caption_metadata_filename}\"'"
    },
    {
        "line": 158,
        "fullcodeline": "log.info(run_cmd)"
    },
    {
        "line": 160,
        "fullcodeline": "env = os.environ.copy()"
    },
    {
        "line": 161,
        "fullcodeline": "env[\"PYTHONPATH\"] = ("
    },
    {
        "line": 164,
        "fullcodeline": "env[\"TF_ENABLE_ONEDNN_OPTS\"] = \"0\""
    },
    {
        "line": 172,
        "fullcodeline": "run_cmd = rf'\"{PYTHON}\" \"{scriptdir}/sd-scripts/finetune/prepare_buckets_latents.py\"'"
    },
    {
        "line": 173,
        "fullcodeline": "run_cmd += rf' \"{image_folder}\"'"
    },
    {
        "line": 174,
        "fullcodeline": "run_cmd += rf' \"{train_dir}/{caption_metadata_filename}\"'"
    },
    {
        "line": 175,
        "fullcodeline": "run_cmd += rf' \"{train_dir}/{latent_metadata_filename}\"'"
    },
    {
        "line": 176,
        "fullcodeline": "run_cmd += rf' \"{pretrained_model_name_or_path}\"'"
    },
    {
        "line": 177,
        "fullcodeline": "run_cmd += f\" --batch_size={batch_size}\""
    },
    {
        "line": 178,
        "fullcodeline": "run_cmd += f\" --max_resolution={max_resolution}\""
    },
    {
        "line": 179,
        "fullcodeline": "run_cmd += f\" --min_bucket_reso={min_bucket_reso}\""
    },
    {
        "line": 180,
        "fullcodeline": "run_cmd += f\" --max_bucket_reso={max_bucket_reso}\""
    },
    {
        "line": 181,
        "fullcodeline": "run_cmd += f\" --mixed_precision={mixed_precision}\""
    },
    {
        "line": 192,
        "fullcodeline": "log.info(run_cmd)"
    },
    {
        "line": 194,
        "fullcodeline": "env = os.environ.copy()"
    },
    {
        "line": 195,
        "fullcodeline": "env[\"PYTHONPATH\"] = ("
    },
    {
        "line": 198,
        "fullcodeline": "env[\"TF_ENABLE_ONEDNN_OPTS\"] = \"0\""
    },
    {
        "line": 220,
        "fullcodeline": "math.ceil("
    },
    {
        "line": 230,
        "fullcodeline": "max_train_steps = int(math.ceil(float(max_train_steps) / 2))"
    },
    {
        "line": 149,
        "fullcodeline": "if caption_extension == \"\":"
    },
    {
        "line": 162,
        "fullcodeline": "rf\"{scriptdir}{os.pathsep}{scriptdir}/sd-scripts{os.pathsep}{env.get('PYTHONPATH', '')}\""
    },
    {
        "line": 166,
        "fullcodeline": "if not print_only:"
    },
    {
        "line": 186,
        "fullcodeline": "if sdxl_checkbox and sdxl_no_half_vae:"
    },
    {
        "line": 196,
        "fullcodeline": "rf\"{scriptdir}{os.pathsep}{scriptdir}/sd-scripts{os.pathsep}{env.get('PYTHONPATH', '')}\""
    },
    {
        "line": 200,
        "fullcodeline": "if not print_only:"
    },
    {
        "line": 205,
        "fullcodeline": "["
    },
    {
        "line": 221,
        "fullcodeline": "float(repeats)"
    },
    {
        "line": 150,
        "fullcodeline": "run_cmd += f' --caption_extension=\".caption\"'"
    },
    {
        "line": 152,
        "fullcodeline": "run_cmd += f\" --caption_extension={caption_extension}\""
    },
    {
        "line": 156,
        "fullcodeline": "run_cmd += f\" --full_path\""
    },
    {
        "line": 168,
        "fullcodeline": "subprocess.run(run_cmd, env=env)"
    },
    {
        "line": 185,
        "fullcodeline": "run_cmd += f\" --full_path\""
    },
    {
        "line": 187,
        "fullcodeline": "log.info("
    },
    {
        "line": 190,
        "fullcodeline": "run_cmd += f' --mixed_precision=\"no\"'"
    },
    {
        "line": 202,
        "fullcodeline": "subprocess.run(run_cmd, env=env)"
    },
    {
        "line": 224,
        "fullcodeline": "* int(epoch)"
    },
    {
        "line": 223,
        "fullcodeline": "/ int(gradient_accumulation_steps)"
    },
    {
        "line": 222,
        "fullcodeline": "/ int(train_batch_size)"
    },
    {
        "line": 210,
        "fullcodeline": "if lower_f.endswith((\".jpg\", \".jpeg\", \".png\", \".webp\"))"
    },
    {
        "line": 207,
        "fullcodeline": "for f, lower_f in ("
    },
    {
        "line": 208,
        "fullcodeline": "(file, file.lower()) for file in os.listdir(image_folder)"
    }
]