[
    {
        "line": 14,
        "fullcodeline": "m_nDecodedLen = 0;"
    },
    {
        "line": 16,
        "fullcodeline": "CFileItem fileitem(file);"
    },
    {
        "line": 17,
        "fullcodeline": "fileitem.SetMimeType(m_strContentType);"
    },
    {
        "line": 18,
        "fullcodeline": "fileitem.SetMimeTypeForInternetFile();"
    },
    {
        "line": 19,
        "fullcodeline": "m_pInputStream = CDVDFactoryInputStream::CreateInputStream(NULL, fileitem);"
    },
    {
        "line": 62,
        "fullcodeline": "CDemuxStream* pStream = NULL;"
    },
    {
        "line": 63,
        "fullcodeline": "m_nAudioStream = -1;"
    },
    {
        "line": 64,
        "fullcodeline": "int64_t demuxerId = -1;"
    },
    {
        "line": 87,
        "fullcodeline": "CDVDStreamInfo hint(*pStream, true);"
    },
    {
        "line": 89,
        "fullcodeline": "CAEStreamInfo::DataType ptStreamTye ="
    },
    {
        "line": 91,
        "fullcodeline": "m_pAudioCodec = CDVDFactoryCodec::CreateAudioCodec(hint, *m_processInfo, true, true, ptStreamTye);"
    },
    {
        "line": 105,
        "fullcodeline": "std::string strFallbackFileExtension = \"\";"
    },
    {
        "line": 115,
        "fullcodeline": "tagLoaderTagLib.Load(file.GetDynPath(), m_tag, strFallbackFileExtension);"
    },
    {
        "line": 119,
        "fullcodeline": "int nErrors = 0;"
    },
    {
        "line": 166,
        "fullcodeline": "m_TotalTime = m_pDemuxer->GetStreamLength();"
    },
    {
        "line": 167,
        "fullcodeline": "m_bitRate = m_pAudioCodec->GetBitRate();"
    },
    {
        "line": 172,
        "fullcodeline": "m_CodecName = m_pDemuxer->GetStreamCodecName(demuxerId, m_nAudioStream);"
    },
    {
        "line": 210,
        "fullcodeline": "m_bInited = true;"
    },
    {
        "line": 20,
        "fullcodeline": "if (!m_pInputStream)"
    },
    {
        "line": 76,
        "fullcodeline": "if (m_nAudioStream == -1)"
    },
    {
        "line": 90,
        "fullcodeline": "GetPassthroughStreamType(hint.codec, hint.samplerate, hint.profile);"
    },
    {
        "line": 92,
        "fullcodeline": "if (!m_pAudioCodec)"
    },
    {
        "line": 120,
        "fullcodeline": "for (int nPacket=0; nPacket < 10 && (m_channels == 0 || m_format.m_sampleRate == 0); nPacket++)"
    },
    {
        "line": 141,
        "fullcodeline": "if (m_pInputStream->Seek(0, SEEK_POSSIBLE))"
    },
    {
        "line": 157,
        "fullcodeline": "if (m_channels == 0) // no data - just guess and hope for the best"
    },
    {
        "line": 163,
        "fullcodeline": "if (m_srcFormat.m_sampleRate == 0)"
    },
    {
        "line": 168,
        "fullcodeline": "if (!m_bitRate && m_TotalTime)"
    },
    {
        "line": 175,
        "fullcodeline": "if (NeedConvert(m_srcFormat.m_dataFormat))"
    },
    {
        "line": 209,
        "fullcodeline": "m_strFileName = file.GetDynPath();"
    },
    {
        "line": 28,
        "fullcodeline": "if (!m_pInputStream->Open())"
    },
    {
        "line": 41,
        "fullcodeline": "m_pDemuxer = CDVDFactoryDemuxer::CreateDemuxer(m_pInputStream);"
    },
    {
        "line": 106,
        "fullcodeline": "if (m_strContentType == \"audio/aacp\" ||"
    },
    {
        "line": 107,
        "fullcodeline": "m_strContentType == \"audio/aac\")"
    },
    {
        "line": 108,
        "fullcodeline": "strFallbackFileExtension = \"m4a\";"
    },
    {
        "line": 122,
        "fullcodeline": "uint8_t dummy[256];"
    },
    {
        "line": 123,
        "fullcodeline": "size_t nSize = 256;"
    },
    {
        "line": 127,
        "fullcodeline": "m_srcFormat = m_pAudioCodec->GetFormat();"
    },
    {
        "line": 128,
        "fullcodeline": "m_format = m_srcFormat;"
    },
    {
        "line": 129,
        "fullcodeline": "m_channels = m_srcFormat.m_channelLayout.Count();"
    },
    {
        "line": 131,
        "fullcodeline": "m_bitsPerCodedSample = static_cast<CDemuxStreamAudio*>(pStream)->iBitsPerSample;"
    },
    {
        "line": 135,
        "fullcodeline": "CLog::Log(LOGDEBUG, \"{}: Could not decode data\", __FUNCTION__);"
    },
    {
        "line": 159,
        "fullcodeline": "m_srcFormat.m_channelLayout = CAEChannelInfo(AE_CH_LAYOUT_2_0);"
    },
    {
        "line": 160,
        "fullcodeline": "m_channels = m_srcFormat.m_channelLayout.Count();"
    },
    {
        "line": 164,
        "fullcodeline": "m_srcFormat.m_sampleRate = 44100;"
    },
    {
        "line": 178,
        "fullcodeline": "m_pResampler = ActiveAE::CAEResampleFactory::Create();"
    },
    {
        "line": 181,
        "fullcodeline": "dstConfig.channel_layout = CAEUtil::GetAVChannelLayout(m_srcFormat.m_channelLayout);"
    },
    {
        "line": 182,
        "fullcodeline": "dstConfig.channels = m_channels;"
    },
    {
        "line": 183,
        "fullcodeline": "dstConfig.sample_rate = m_srcFormat.m_sampleRate;"
    },
    {
        "line": 184,
        "fullcodeline": "dstConfig.fmt = CAEUtil::GetAVSampleFormat(AE_FMT_FLOAT);"
    },
    {
        "line": 185,
        "fullcodeline": "dstConfig.bits_per_sample = CAEUtil::DataFormatToUsedBits(AE_FMT_FLOAT);"
    },
    {
        "line": 186,
        "fullcodeline": "dstConfig.dither_bits = CAEUtil::DataFormatToDitherBits(AE_FMT_FLOAT);"
    },
    {
        "line": 188,
        "fullcodeline": "srcConfig.channel_layout = CAEUtil::GetAVChannelLayout(m_srcFormat.m_channelLayout);"
    },
    {
        "line": 189,
        "fullcodeline": "srcConfig.channels = m_channels;"
    },
    {
        "line": 190,
        "fullcodeline": "srcConfig.sample_rate = m_srcFormat.m_sampleRate;"
    },
    {
        "line": 191,
        "fullcodeline": "srcConfig.fmt = CAEUtil::GetAVSampleFormat(m_srcFormat.m_dataFormat);"
    },
    {
        "line": 192,
        "fullcodeline": "srcConfig.bits_per_sample = CAEUtil::DataFormatToUsedBits(m_srcFormat.m_dataFormat);"
    },
    {
        "line": 193,
        "fullcodeline": "srcConfig.dither_bits = CAEUtil::DataFormatToDitherBits(m_srcFormat.m_dataFormat);"
    },
    {
        "line": 195,
        "fullcodeline": "m_pResampler->Init(dstConfig, srcConfig,"
    },
    {
        "line": 203,
        "fullcodeline": "m_planes = AE_IS_PLANAR(m_srcFormat.m_dataFormat) ? m_channels : 1;"
    },
    {
        "line": 204,
        "fullcodeline": "m_format = m_srcFormat;"
    },
    {
        "line": 205,
        "fullcodeline": "m_format.m_dataFormat = AE_FMT_FLOAT;"
    },
    {
        "line": 7,
        "fullcodeline": "if (m_strFileName == file.GetDynPath())"
    },
    {
        "line": 22,
        "fullcodeline": "CLog::Log(LOGERROR, \"{}: Error creating input stream for {}\", __FUNCTION__, file.GetDynPath());"
    },
    {
        "line": 30,
        "fullcodeline": "CLog::Log(LOGERROR, \"{}: Error opening file {}\", __FUNCTION__, file.GetDynPath());"
    },
    {
        "line": 42,
        "fullcodeline": "if (!m_pDemuxer)"
    },
    {
        "line": 53,
        "fullcodeline": "CLog::Log(LOGERROR, \"{}: Exception thrown when opening demuxer\", __FUNCTION__);"
    },
    {
        "line": 67,
        "fullcodeline": "if (stream && stream->type == STREAM_AUDIO)"
    },
    {
        "line": 124,
        "fullcodeline": "if (ReadPCM(dummy, nSize, &nSize) == READ_ERROR)"
    },
    {
        "line": 130,
        "fullcodeline": "m_bitsPerSample = CAEUtil::DataFormatToBits(m_srcFormat.m_dataFormat);"
    },
    {
        "line": 206,
        "fullcodeline": "m_bitsPerSample = CAEUtil::DataFormatToBits(m_format.m_dataFormat);"
    },
    {
        "line": 31,
        "fullcodeline": "if (m_pInputStream.use_count() > 1)"
    },
    {
        "line": 46,
        "fullcodeline": "m_pInputStream.reset();"
    },
    {
        "line": 47,
        "fullcodeline": "CLog::Log(LOGERROR, \"{}: Error creating demuxer\", __FUNCTION__);"
    },
    {
        "line": 81,
        "fullcodeline": "if (m_pInputStream.use_count() > 1)"
    },
    {
        "line": 97,
        "fullcodeline": "if (m_pInputStream.use_count() > 1)"
    },
    {
        "line": 109,
        "fullcodeline": "else if (m_strContentType == \"audio/x-ms-wma\")"
    },
    {
        "line": 125,
        "fullcodeline": "++nErrors;"
    },
    {
        "line": 170,
        "fullcodeline": "m_bitRate = (int)(((m_pInputStream->GetLength()*1000) / m_TotalTime) * 8);"
    },
    {
        "line": 57,
        "fullcodeline": "m_pDemuxer = NULL;"
    },
    {
        "line": 110,
        "fullcodeline": "strFallbackFileExtension = \"wma\";"
    },
    {
        "line": 151,
        "fullcodeline": "m_pInputStream->Seek(0, SEEK_SET);"
    },
    {
        "line": 44,
        "fullcodeline": "if (m_pInputStream.use_count() > 1)"
    },
    {
        "line": 152,
        "fullcodeline": "if (!m_pDemuxer->Reset())"
    },
    {
        "line": 111,
        "fullcodeline": "else if (m_strContentType == \"audio/x-ape\" ||"
    },
    {
        "line": 112,
        "fullcodeline": "m_strContentType == \"audio/ape\")"
    },
    {
        "line": 113,
        "fullcodeline": "strFallbackFileExtension = \"ape\";"
    }
]