[
    {
        "line": 2,
        "fullcodeline": "auto* params ="
    },
    {
        "line": 5,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output));"
    },
    {
        "line": 7,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &ids));"
    },
    {
        "line": 9,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 1, &indices));"
    },
    {
        "line": 11,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 2, &dense_shape));"
    },
    {
        "line": 13,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 3, &weights));"
    },
    {
        "line": 15,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 4, &value));"
    },
    {
        "line": 17,
        "fullcodeline": "const int lookup_rank = SizeOfDimension(indices, 1);"
    },
    {
        "line": 18,
        "fullcodeline": "const int embedding_rank = NumDimensions(value);"
    },
    {
        "line": 19,
        "fullcodeline": "const int num_lookups = SizeOfDimension(ids, 0);"
    },
    {
        "line": 20,
        "fullcodeline": "const int num_rows = SizeOfDimension(value, 0);"
    },
    {
        "line": 23,
        "fullcodeline": "const int output_rank = (lookup_rank - 1) + (embedding_rank - 1);"
    },
    {
        "line": 27,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, SizeOfDimension(dense_shape, 0), lookup_rank);"
    },
    {
        "line": 30,
        "fullcodeline": "TfLiteIntArray* output_shape = TfLiteIntArrayCreate(output_rank);"
    },
    {
        "line": 31,
        "fullcodeline": "int k = 0;"
    },
    {
        "line": 32,
        "fullcodeline": "int embedding_size = 1;"
    },
    {
        "line": 33,
        "fullcodeline": "int lookup_size = 1;"
    },
    {
        "line": 44,
        "fullcodeline": "TF_LITE_ENSURE_STATUS(context->ResizeTensor(context, output, output_shape));"
    },
    {
        "line": 45,
        "fullcodeline": "const int output_size = lookup_size * embedding_size;"
    },
    {
        "line": 46,
        "fullcodeline": "TfLiteTensorRealloc(output_size * sizeof(float), output);"
    },
    {
        "line": 48,
        "fullcodeline": "float* output_ptr = GetTensorData<float>(output);"
    },
    {
        "line": 49,
        "fullcodeline": "const float* weights_ptr = GetTensorData<float>(weights);"
    },
    {
        "line": 50,
        "fullcodeline": "const float* value_ptr = GetTensorData<float>(value);"
    },
    {
        "line": 52,
        "fullcodeline": "std::fill_n(output_ptr, output_size, 0.0f);"
    },
    {
        "line": 55,
        "fullcodeline": "int current_output_offset = 0;"
    },
    {
        "line": 56,
        "fullcodeline": "float current_total_weight = 0.0;"
    },
    {
        "line": 57,
        "fullcodeline": "float current_squares_weight = 0.0;"
    },
    {
        "line": 58,
        "fullcodeline": "int num_elements = 0;"
    },
    {
        "line": 3,
        "fullcodeline": "reinterpret_cast<TfLiteEmbeddingLookupSparseParams*>(node->builtin_data);"
    },
    {
        "line": 34,
        "fullcodeline": "for (int i = 0; i < lookup_rank - 1; i++, k++) {"
    },
    {
        "line": 39,
        "fullcodeline": "for (int i = 1; i < embedding_rank; i++, k++) {"
    },
    {
        "line": 60,
        "fullcodeline": "for (int i = 0; i < num_lookups; i++) {"
    },
    {
        "line": 35,
        "fullcodeline": "const int dim = dense_shape->data.i32[i];"
    },
    {
        "line": 36,
        "fullcodeline": "lookup_size *= dim;"
    },
    {
        "line": 37,
        "fullcodeline": "output_shape->data[k] = dim;"
    },
    {
        "line": 40,
        "fullcodeline": "const int dim = SizeOfDimension(value, i);"
    },
    {
        "line": 41,
        "fullcodeline": "embedding_size *= dim;"
    },
    {
        "line": 42,
        "fullcodeline": "output_shape->data[k] = dim;"
    },
    {
        "line": 61,
        "fullcodeline": "int idx = ids->data.i32[i];"
    },
    {
        "line": 71,
        "fullcodeline": "const int example_indices_offset = i * lookup_rank;"
    },
    {
        "line": 72,
        "fullcodeline": "int output_bucket = 0;"
    },
    {
        "line": 73,
        "fullcodeline": "int stride = 1;"
    },
    {
        "line": 78,
        "fullcodeline": "const int output_offset = output_bucket * embedding_size;"
    },
    {
        "line": 95,
        "fullcodeline": "++num_elements;"
    },
    {
        "line": 96,
        "fullcodeline": "const int example_embedding_offset = idx * embedding_size;"
    },
    {
        "line": 97,
        "fullcodeline": "const float w = weights_ptr[i];"
    },
    {
        "line": 98,
        "fullcodeline": "current_squares_weight += w * w;"
    },
    {
        "line": 99,
        "fullcodeline": "current_total_weight += w;"
    },
    {
        "line": 62,
        "fullcodeline": "if (idx >= num_rows || idx < 0) {"
    },
    {
        "line": 74,
        "fullcodeline": "for (int k = (lookup_rank - 1) - 1; k >= 0; k--) {"
    },
    {
        "line": 82,
        "fullcodeline": "if (output_offset != current_output_offset) {"
    },
    {
        "line": 100,
        "fullcodeline": "for (int k = 0; k < embedding_size; k++) {"
    },
    {
        "line": 63,
        "fullcodeline": "context->ReportError(context,"
    },
    {
        "line": 75,
        "fullcodeline": "output_bucket += indices->data.i32[example_indices_offset + k] * stride;"
    },
    {
        "line": 76,
        "fullcodeline": "stride *= dense_shape->data.i32[k];"
    },
    {
        "line": 83,
        "fullcodeline": "FinalizeAggregation(params->combiner, num_elements, current_total_weight,"
    },
    {
        "line": 88,
        "fullcodeline": "num_elements = 0;"
    },
    {
        "line": 89,
        "fullcodeline": "current_total_weight = 0.0;"
    },
    {
        "line": 90,
        "fullcodeline": "current_squares_weight = 0.0;"
    },
    {
        "line": 91,
        "fullcodeline": "current_output_offset = output_offset;"
    },
    {
        "line": 101,
        "fullcodeline": "output_ptr[current_output_offset + k] +="
    },
    {
        "line": 66,
        "fullcodeline": "idx, num_rows - 1);"
    },
    {
        "line": 102,
        "fullcodeline": "value_ptr[example_embedding_offset + k] * w;"
    }
]