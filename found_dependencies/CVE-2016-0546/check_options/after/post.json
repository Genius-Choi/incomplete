[
    {
        "line": 3,
        "fullcodeline": "int i= 0;                    // loop counter"
    },
    {
        "line": 4,
        "fullcodeline": "int num_found= 0;            // number of options found (shortcut loop)"
    },
    {
        "line": 5,
        "fullcodeline": "char config_file[FN_REFLEN]; // configuration file name"
    },
    {
        "line": 6,
        "fullcodeline": "char plugin_name[FN_REFLEN]; // plugin name"
    },
    {
        "line": 9,
        "fullcodeline": "const char *basedir_prefix = \"--basedir=\";"
    },
    {
        "line": 10,
        "fullcodeline": "int basedir_len= strlen(basedir_prefix);"
    },
    {
        "line": 11,
        "fullcodeline": "const char *datadir_prefix = \"--datadir=\";"
    },
    {
        "line": 12,
        "fullcodeline": "int datadir_len= strlen(datadir_prefix);"
    },
    {
        "line": 13,
        "fullcodeline": "const char *plugin_dir_prefix = \"--plugin_dir=\";"
    },
    {
        "line": 14,
        "fullcodeline": "int plugin_dir_len= strlen(plugin_dir_prefix);"
    },
    {
        "line": 16,
        "fullcodeline": "strcpy(plugin_name, \"\");"
    },
    {
        "line": 17,
        "fullcodeline": "for (i = 0; i < argc && num_found < 5; i++)"
    },
    {
        "line": 65,
        "fullcodeline": "if (!opt_basedir)"
    },
    {
        "line": 71,
        "fullcodeline": "if (!opt_datadir)"
    },
    {
        "line": 77,
        "fullcodeline": "if (!opt_plugin_dir)"
    },
    {
        "line": 102,
        "fullcodeline": "if ((strlen(operation) == 0))"
    },
    {
        "line": 67,
        "fullcodeline": "fprintf(stderr, \"ERROR: Missing --basedir option.\\n\");"
    },
    {
        "line": 73,
        "fullcodeline": "fprintf(stderr, \"ERROR: Missing --datadir option.\\n\");"
    },
    {
        "line": 79,
        "fullcodeline": "fprintf(stderr, \"ERROR: Missing --plugin_dir option.\\n\");"
    },
    {
        "line": 104,
        "fullcodeline": "fprintf(stderr, \"ERROR: missing operation. Please specify either \""
    },
    {
        "line": 20,
        "fullcodeline": "if (!argv[i])"
    },
    {
        "line": 24,
        "fullcodeline": "if ((strcasecmp(argv[i], \"ENABLE\") == 0) ||"
    },
    {
        "line": 25,
        "fullcodeline": "(strcasecmp(argv[i], \"DISABLE\") == 0))"
    },
    {
        "line": 27,
        "fullcodeline": "strcpy(operation, argv[i]);"
    },
    {
        "line": 28,
        "fullcodeline": "num_found++;"
    },
    {
        "line": 83,
        "fullcodeline": "else if (strlen(plugin_name) > 0)"
    },
    {
        "line": 30,
        "fullcodeline": "else if ((strncasecmp(argv[i], basedir_prefix, basedir_len) == 0) &&"
    },
    {
        "line": 85,
        "fullcodeline": "if (load_plugin_data(plugin_name, config_file))"
    },
    {
        "line": 89,
        "fullcodeline": "if (strcasecmp(plugin_data.name, plugin_name) != 0)"
    },
    {
        "line": 98,
        "fullcodeline": "fprintf(stderr, \"ERROR: No plugin specified.\\n\");"
    },
    {
        "line": 31,
        "fullcodeline": "!opt_basedir)"
    },
    {
        "line": 33,
        "fullcodeline": "opt_basedir= my_strndup(argv[i]+basedir_len,"
    },
    {
        "line": 35,
        "fullcodeline": "num_found++;"
    },
    {
        "line": 91,
        "fullcodeline": "fprintf(stderr, \"ERROR: plugin name requested does not match config \""
    },
    {
        "line": 34,
        "fullcodeline": "strlen(argv[i])-basedir_len, MYF(MY_FAE));"
    },
    {
        "line": 37,
        "fullcodeline": "else if ((strncasecmp(argv[i], datadir_prefix, datadir_len) == 0) &&"
    },
    {
        "line": 38,
        "fullcodeline": "!opt_datadir)"
    },
    {
        "line": 40,
        "fullcodeline": "opt_datadir= my_strndup(argv[i]+datadir_len,"
    },
    {
        "line": 42,
        "fullcodeline": "num_found++;"
    },
    {
        "line": 41,
        "fullcodeline": "strlen(argv[i])-datadir_len, MYF(MY_FAE));"
    },
    {
        "line": 44,
        "fullcodeline": "else if ((strncasecmp(argv[i], plugin_dir_prefix, plugin_dir_len) == 0) &&"
    },
    {
        "line": 45,
        "fullcodeline": "!opt_plugin_dir)"
    },
    {
        "line": 47,
        "fullcodeline": "opt_plugin_dir= my_strndup(argv[i]+plugin_dir_len,"
    },
    {
        "line": 49,
        "fullcodeline": "num_found++;"
    },
    {
        "line": 59,
        "fullcodeline": "strcpy(plugin_name, argv[i]);"
    },
    {
        "line": 60,
        "fullcodeline": "strcpy(config_file, argv[i]);"
    },
    {
        "line": 61,
        "fullcodeline": "strcat(config_file, \".ini\");"
    },
    {
        "line": 48,
        "fullcodeline": "strlen(argv[i])-plugin_dir_len, MYF(MY_FAE));"
    },
    {
        "line": 54,
        "fullcodeline": "if (strlen(argv[i]) + 4 + 1 > FN_REFLEN)"
    },
    {
        "line": 56,
        "fullcodeline": "fprintf(stderr, \"ERROR: argument is too long.\\n\");"
    }
]