[
    {
        "line": 24,
        "fullcodeline": "is_string = not isinstance(url, six.binary_type)"
    },
    {
        "line": 34,
        "fullcodeline": "def idna_encode(name):"
    },
    {
        "line": 71,
        "fullcodeline": "validator = Validator()"
    },
    {
        "line": 83,
        "fullcodeline": "path = uri_ref.path"
    },
    {
        "line": 93,
        "fullcodeline": "def to_input_type(x):"
    },
    {
        "line": 20,
        "fullcodeline": "if not url:"
    },
    {
        "line": 31,
        "fullcodeline": "if not SCHEME_REGEX.search(url):"
    },
    {
        "line": 60,
        "fullcodeline": "if has_authority and uri_ref.authority is None:"
    },
    {
        "line": 65,
        "fullcodeline": "if uri_ref.scheme is None or uri_ref.scheme.lower() in NORMALIZABLE_SCHEMES:"
    },
    {
        "line": 84,
        "fullcodeline": "if not path:"
    },
    {
        "line": 100,
        "fullcodeline": "return Url("
    },
    {
        "line": 32,
        "fullcodeline": "url = \"//\" + url"
    },
    {
        "line": 47,
        "fullcodeline": "split_iri = misc.IRI_MATCHER.match(compat.to_str(url)).groupdict()"
    },
    {
        "line": 48,
        "fullcodeline": "iri_ref = rfc3986.IRIReference("
    },
    {
        "line": 54,
        "fullcodeline": "has_authority = iri_ref.authority is not None"
    },
    {
        "line": 55,
        "fullcodeline": "uri_ref = iri_ref.encode(idna_encoder=idna_encode)"
    },
    {
        "line": 61,
        "fullcodeline": "raise LocationParseError(url)"
    },
    {
        "line": 66,
        "fullcodeline": "uri_ref = uri_ref.normalize()"
    },
    {
        "line": 101,
        "fullcodeline": "scheme=to_input_type(uri_ref.scheme),"
    },
    {
        "line": 102,
        "fullcodeline": "auth=to_input_type(uri_ref.userinfo),"
    },
    {
        "line": 103,
        "fullcodeline": "host=to_input_type(uri_ref.host),"
    },
    {
        "line": 104,
        "fullcodeline": "port=int(uri_ref.port) if uri_ref.port is not None else None,"
    },
    {
        "line": 105,
        "fullcodeline": "path=to_input_type(path),"
    },
    {
        "line": 106,
        "fullcodeline": "query=to_input_type(uri_ref.query),"
    },
    {
        "line": 107,
        "fullcodeline": "fragment=to_input_type(uri_ref.fragment)"
    },
    {
        "line": 22,
        "fullcodeline": "return Url()"
    },
    {
        "line": 73,
        "fullcodeline": "validator.check_validity_of("
    },
    {
        "line": 85,
        "fullcodeline": "if (uri_ref.query is not None"
    },
    {
        "line": 50,
        "fullcodeline": "_encode_invalid_chars(split_iri['path'], PATH_CHARS),"
    },
    {
        "line": 51,
        "fullcodeline": "_encode_invalid_chars(split_iri['query'], QUERY_CHARS),"
    },
    {
        "line": 52,
        "fullcodeline": "_encode_invalid_chars(split_iri['fragment'], FRAGMENT_CHARS)"
    },
    {
        "line": 86,
        "fullcodeline": "or uri_ref.fragment is not None):"
    },
    {
        "line": 87,
        "fullcodeline": "path = \"\""
    },
    {
        "line": 89,
        "fullcodeline": "path = None"
    },
    {
        "line": 57,
        "fullcodeline": "return six.raise_from(LocationParseError(url), None)"
    },
    {
        "line": 74,
        "fullcodeline": "*validator.COMPONENT_NAMES"
    },
    {
        "line": 77,
        "fullcodeline": "return six.raise_from(LocationParseError(url), None)"
    }
]