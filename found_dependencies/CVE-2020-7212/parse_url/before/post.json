[
    {
        "line": 24,
        "fullcodeline": "is_string = not isinstance(url, six.binary_type)"
    },
    {
        "line": 41,
        "fullcodeline": "def idna_encode(name):"
    },
    {
        "line": 53,
        "fullcodeline": "has_authority = iri_ref.authority is not None"
    },
    {
        "line": 54,
        "fullcodeline": "uri_ref = iri_ref.encode(idna_encoder=idna_encode)"
    },
    {
        "line": 68,
        "fullcodeline": "validator = Validator()"
    },
    {
        "line": 80,
        "fullcodeline": "path = uri_ref.path"
    },
    {
        "line": 90,
        "fullcodeline": "def to_input_type(x):"
    },
    {
        "line": 20,
        "fullcodeline": "if not url:"
    },
    {
        "line": 25,
        "fullcodeline": "if not is_string:"
    },
    {
        "line": 33,
        "fullcodeline": "if not SCHEME_REGEX.search(url):"
    },
    {
        "line": 57,
        "fullcodeline": "if has_authority and uri_ref.authority is None:"
    },
    {
        "line": 62,
        "fullcodeline": "if uri_ref.scheme is None or uri_ref.scheme.lower() in NORMALIZABLE_SCHEMES:"
    },
    {
        "line": 81,
        "fullcodeline": "if not path:"
    },
    {
        "line": 97,
        "fullcodeline": "return Url("
    },
    {
        "line": 26,
        "fullcodeline": "url = url.decode(\"utf-8\")"
    },
    {
        "line": 34,
        "fullcodeline": "url = \"//\" + url"
    },
    {
        "line": 37,
        "fullcodeline": "iri_ref = rfc3986.IRIReference.from_string(url, encoding=\"utf-8\")"
    },
    {
        "line": 58,
        "fullcodeline": "raise LocationParseError(url)"
    },
    {
        "line": 63,
        "fullcodeline": "uri_ref = uri_ref.normalize()"
    },
    {
        "line": 98,
        "fullcodeline": "scheme=to_input_type(uri_ref.scheme),"
    },
    {
        "line": 99,
        "fullcodeline": "auth=to_input_type(uri_ref.userinfo),"
    },
    {
        "line": 100,
        "fullcodeline": "host=to_input_type(uri_ref.host),"
    },
    {
        "line": 101,
        "fullcodeline": "port=int(uri_ref.port) if uri_ref.port is not None else None,"
    },
    {
        "line": 102,
        "fullcodeline": "path=to_input_type(path),"
    },
    {
        "line": 103,
        "fullcodeline": "query=to_input_type(uri_ref.query),"
    },
    {
        "line": 104,
        "fullcodeline": "fragment=to_input_type(uri_ref.fragment)"
    },
    {
        "line": 22,
        "fullcodeline": "return Url()"
    },
    {
        "line": 70,
        "fullcodeline": "validator.check_validity_of("
    },
    {
        "line": 82,
        "fullcodeline": "if (uri_ref.query is not None"
    },
    {
        "line": 39,
        "fullcodeline": "six.raise_from(LocationParseError(url), None)"
    },
    {
        "line": 74,
        "fullcodeline": "six.raise_from(LocationParseError(url), None)"
    },
    {
        "line": 83,
        "fullcodeline": "or uri_ref.fragment is not None):"
    },
    {
        "line": 84,
        "fullcodeline": "path = \"\""
    },
    {
        "line": 86,
        "fullcodeline": "path = None"
    },
    {
        "line": 71,
        "fullcodeline": "*validator.COMPONENT_NAMES"
    }
]