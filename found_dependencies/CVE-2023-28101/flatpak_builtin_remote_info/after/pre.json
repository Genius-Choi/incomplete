[
    {
        "line": 3,
        "fullcodeline": "g_autoptr(GOptionContext) context = NULL;"
    },
    {
        "line": 4,
        "fullcodeline": "g_autoptr(GPtrArray) dirs = NULL;"
    },
    {
        "line": 5,
        "fullcodeline": "g_autoptr(FlatpakDir) preferred_dir = NULL;"
    },
    {
        "line": 6,
        "fullcodeline": "g_autoptr(GVariant) commit_v = NULL;"
    },
    {
        "line": 9,
        "fullcodeline": "g_autofree char *default_branch = NULL;"
    },
    {
        "line": 12,
        "fullcodeline": "g_autofree char *match_id = NULL;"
    },
    {
        "line": 13,
        "fullcodeline": "g_autofree char *match_arch = NULL;"
    },
    {
        "line": 14,
        "fullcodeline": "g_autofree char *match_branch = NULL;"
    },
    {
        "line": 15,
        "fullcodeline": "g_autoptr(FlatpakDecomposed) ref = NULL;"
    },
    {
        "line": 16,
        "fullcodeline": "g_autofree char *commit = NULL;"
    },
    {
        "line": 17,
        "fullcodeline": "g_autofree char *parent = NULL;"
    },
    {
        "line": 18,
        "fullcodeline": "g_autoptr(FlatpakRemoteState) state = NULL;"
    },
    {
        "line": 19,
        "fullcodeline": "gboolean friendly = TRUE;"
    },
    {
        "line": 20,
        "fullcodeline": "const char *xa_metadata = NULL;"
    },
    {
        "line": 21,
        "fullcodeline": "const char *collection_id = NULL;"
    },
    {
        "line": 22,
        "fullcodeline": "const char *eol = NULL;"
    },
    {
        "line": 23,
        "fullcodeline": "const char *eol_rebase = NULL;"
    },
    {
        "line": 24,
        "fullcodeline": "g_autoptr(GKeyFile) metakey = NULL;"
    },
    {
        "line": 25,
        "fullcodeline": "guint64 installed_size = 0;"
    },
    {
        "line": 26,
        "fullcodeline": "guint64 download_size = 0;"
    },
    {
        "line": 27,
        "fullcodeline": "g_autofree char *formatted_installed_size = NULL;"
    },
    {
        "line": 28,
        "fullcodeline": "g_autofree char *formatted_download_size = NULL;"
    },
    {
        "line": 29,
        "fullcodeline": "const gchar *subject = NULL;"
    },
    {
        "line": 31,
        "fullcodeline": "g_autofree char *formatted_timestamp = NULL;"
    },
    {
        "line": 34,
        "fullcodeline": "context = g_option_context_new (_(\" REMOTE REF - Show information about an application or runtime in a remote\"));"
    },
    {
        "line": 35,
        "fullcodeline": "g_option_context_set_translation_domain (context, GETTEXT_PACKAGE);"
    },
    {
        "line": 47,
        "fullcodeline": "remote = argv[1];"
    },
    {
        "line": 48,
        "fullcodeline": "pref = argv[2];"
    },
    {
        "line": 53,
        "fullcodeline": "default_branch = flatpak_dir_get_remote_default_branch (preferred_dir, remote);"
    },
    {
        "line": 54,
        "fullcodeline": "kinds = flatpak_kinds_from_bools (opt_app, opt_runtime);"
    },
    {
        "line": 60,
        "fullcodeline": "state = get_remote_state (preferred_dir, remote, opt_cached, opt_sideloaded, match_arch, NULL, NULL, error);"
    },
    {
        "line": 64,
        "fullcodeline": "ref = flatpak_dir_find_remote_ref (preferred_dir, state, match_id, match_branch, default_branch, match_arch,"
    },
    {
        "line": 37,
        "fullcodeline": "if (!flatpak_option_context_parse (context, options, &argc, &argv,"
    },
    {
        "line": 61,
        "fullcodeline": "if (state == NULL)"
    },
    {
        "line": 66,
        "fullcodeline": "if (ref == NULL)"
    },
    {
        "line": 88,
        "fullcodeline": "if (flatpak_remote_state_lookup_sparse_cache (state, flatpak_decomposed_get_ref (ref),"
    },
    {
        "line": 95,
        "fullcodeline": "if (opt_show_ref || opt_show_commit || opt_show_parent || opt_show_metadata || opt_show_runtime || opt_show_sdk)"
    },
    {
        "line": 41,
        "fullcodeline": "if (!opt_app && !opt_runtime)"
    },
    {
        "line": 42,
        "fullcodeline": "opt_app = opt_runtime = TRUE;"
    },
    {
        "line": 50,
        "fullcodeline": "if (!flatpak_resolve_duplicate_remotes (dirs, remote, &preferred_dir, cancellable, error))"
    },
    {
        "line": 56,
        "fullcodeline": "if (!flatpak_split_partial_ref_arg (pref, kinds, opt_arch, NULL,"
    },
    {
        "line": 91,
        "fullcodeline": "eol = var_metadata_lookup_string (sparse_cache, FLATPAK_SPARSE_CACHE_KEY_ENDOFLINE, NULL);"
    },
    {
        "line": 92,
        "fullcodeline": "eol_rebase = var_metadata_lookup_string (sparse_cache, FLATPAK_SPARSE_CACHE_KEY_ENDOFLINE_REBASE, NULL);"
    },
    {
        "line": 103,
        "fullcodeline": "g_autoptr(AsMetadata) mdata = as_metadata_new ();"
    },
    {
        "line": 105,
        "fullcodeline": "const char *version = NULL;"
    },
    {
        "line": 106,
        "fullcodeline": "const char *license = NULL;"
    },
    {
        "line": 107,
        "fullcodeline": "g_autofree char *id = flatpak_decomposed_dup_id (ref);"
    },
    {
        "line": 109,
        "fullcodeline": "flatpak_get_window_size (&rows, &cols);"
    },
    {
        "line": 111,
        "fullcodeline": "flatpak_dir_load_appstream_store (preferred_dir, remote, id, mdata, NULL, NULL);"
    },
    {
        "line": 112,
        "fullcodeline": "app = as_store_find_app (mdata, flatpak_decomposed_get_ref (ref));"
    },
    {
        "line": 155,
        "fullcodeline": "len = 0;"
    },
    {
        "line": 156,
        "fullcodeline": "len = MAX (len, g_utf8_strlen (_(\"ID:\"), -1));"
    },
    {
        "line": 157,
        "fullcodeline": "len = MAX (len, g_utf8_strlen (_(\"Ref:\"), -1));"
    },
    {
        "line": 158,
        "fullcodeline": "len = MAX (len, g_utf8_strlen (_(\"Arch:\"), -1));"
    },
    {
        "line": 159,
        "fullcodeline": "len = MAX (len, g_utf8_strlen (_(\"Branch:\"), -1));"
    },
    {
        "line": 179,
        "fullcodeline": "len = MAX (len, g_utf8_strlen (_(\"Commit:\"), -1));"
    },
    {
        "line": 189,
        "fullcodeline": "width = cols - (len + 1);"
    },
    {
        "line": 191,
        "fullcodeline": "print_aligned (len, _(\"ID:\"), id);"
    },
    {
        "line": 192,
        "fullcodeline": "print_aligned (len, _(\"Ref:\"), flatpak_decomposed_get_ref (ref));"
    },
    {
        "line": 193,
        "fullcodeline": "print_aligned_take (len, _(\"Arch:\"), flatpak_decomposed_dup_arch (ref));"
    },
    {
        "line": 194,
        "fullcodeline": "print_aligned_take (len, _(\"Branch:\"), flatpak_decomposed_dup_branch (ref));"
    },
    {
        "line": 45,
        "fullcodeline": "return usage_error (context, _(\"REMOTE and REF must be specified\"), error);"
    },
    {
        "line": 82,
        "fullcodeline": "commit_v = flatpak_remote_state_load_ref_commit (state, preferred_dir, flatpak_decomposed_get_ref (ref),"
    },
    {
        "line": 160,
        "fullcodeline": "if (version != NULL)"
    },
    {
        "line": 162,
        "fullcodeline": "if (license != NULL)"
    },
    {
        "line": 164,
        "fullcodeline": "if (collection_id != NULL)"
    },
    {
        "line": 170,
        "fullcodeline": "if (flatpak_decomposed_is_app (ref) == 0 && metakey != NULL)"
    },
    {
        "line": 195,
        "fullcodeline": "if (version != NULL)"
    },
    {
        "line": 197,
        "fullcodeline": "if (license != NULL)"
    },
    {
        "line": 199,
        "fullcodeline": "if (collection_id != NULL)"
    },
    {
        "line": 205,
        "fullcodeline": "if (flatpak_decomposed_is_app (ref) && metakey != NULL)"
    },
    {
        "line": 217,
        "fullcodeline": "g_autofree char *formatted_commit = ellipsize_string (commit, width);"
    },
    {
        "line": 218,
        "fullcodeline": "print_aligned (len, _(\"Commit:\"), formatted_commit);"
    },
    {
        "line": 281,
        "fullcodeline": "g_autoptr(GVariant) c_v = NULL;"
    },
    {
        "line": 282,
        "fullcodeline": "g_autofree char *c = g_strdup (commit);"
    },
    {
        "line": 72,
        "fullcodeline": "commit = g_strdup (opt_commit);"
    },
    {
        "line": 84,
        "fullcodeline": "if (commit_v == NULL)"
    },
    {
        "line": 115,
        "fullcodeline": "const char *name = as_component_get_name (app);"
    },
    {
        "line": 116,
        "fullcodeline": "const char *comment = as_component_get_summary (app);"
    },
    {
        "line": 120,
        "fullcodeline": "version = as_app_get_version (app);"
    },
    {
        "line": 121,
        "fullcodeline": "license = as_component_get_project_license (app);"
    },
    {
        "line": 126,
        "fullcodeline": "VarCommitRef var_commit = var_commit_from_gvariant (commit_v);"
    },
    {
        "line": 129,
        "fullcodeline": "subject = var_commit_get_subject (var_commit);"
    },
    {
        "line": 130,
        "fullcodeline": "parent = ostree_commit_get_parent (commit_v);"
    },
    {
        "line": 131,
        "fullcodeline": "timestamp = ostree_commit_get_timestamp (commit_v);"
    },
    {
        "line": 133,
        "fullcodeline": "commit_metadata = var_commit_get_metadata (var_commit);"
    },
    {
        "line": 134,
        "fullcodeline": "xa_metadata = var_metadata_lookup_string (commit_metadata, \"xa.metadata\", NULL);"
    },
    {
        "line": 145,
        "fullcodeline": "collection_id = var_metadata_lookup_string (commit_metadata, \"ostree.collection-binding\", NULL);"
    },
    {
        "line": 147,
        "fullcodeline": "installed_size = GUINT64_FROM_BE (var_metadata_lookup_uint64 (commit_metadata, \"xa.installed-size\", 0));"
    },
    {
        "line": 148,
        "fullcodeline": "download_size = GUINT64_FROM_BE (var_metadata_lookup_uint64 (commit_metadata, \"xa.download-size\", 0));"
    },
    {
        "line": 150,
        "fullcodeline": "formatted_installed_size = g_format_size (installed_size);"
    },
    {
        "line": 151,
        "fullcodeline": "formatted_download_size = g_format_size (download_size);"
    },
    {
        "line": 152,
        "fullcodeline": "formatted_timestamp = format_timestamp (timestamp);"
    },
    {
        "line": 161,
        "fullcodeline": "len = MAX (len, g_utf8_strlen (_(\"Version:\"), -1));"
    },
    {
        "line": 163,
        "fullcodeline": "len = MAX (len, g_utf8_strlen (_(\"License:\"), -1));"
    },
    {
        "line": 165,
        "fullcodeline": "len = MAX (len, g_utf8_strlen (_(\"Collection:\"), -1));"
    },
    {
        "line": 167,
        "fullcodeline": "len = MAX (len, g_utf8_strlen (_(\"Download:\"), -1));"
    },
    {
        "line": 169,
        "fullcodeline": "len = MAX (len, g_utf8_strlen (_(\"Installed:\"), -1));"
    },
    {
        "line": 172,
        "fullcodeline": "len = MAX (len, g_utf8_strlen (_(\"Runtime:\"), -1));"
    },
    {
        "line": 173,
        "fullcodeline": "len = MAX (len, g_utf8_strlen (_(\"Sdk:\"), -1));"
    },
    {
        "line": 176,
        "fullcodeline": "len = MAX (len, g_utf8_strlen (_(\"Date:\"), -1));"
    },
    {
        "line": 178,
        "fullcodeline": "len = MAX (len, g_utf8_strlen (_(\"Subject:\"), -1));"
    },
    {
        "line": 181,
        "fullcodeline": "len = MAX (len, g_utf8_strlen (_(\"Parent:\"), -1));"
    },
    {
        "line": 183,
        "fullcodeline": "len = MAX (len, strlen (_(\"End-of-life:\")));"
    },
    {
        "line": 185,
        "fullcodeline": "len = MAX (len, strlen (_(\"End-of-life-rebase:\")));"
    },
    {
        "line": 187,
        "fullcodeline": "len = MAX (len, g_utf8_strlen (_(\"History:\"), -1));"
    },
    {
        "line": 196,
        "fullcodeline": "print_aligned (len, _(\"Version:\"), version);"
    },
    {
        "line": 198,
        "fullcodeline": "print_aligned (len, _(\"License:\"), license);"
    },
    {
        "line": 200,
        "fullcodeline": "print_aligned (len, _(\"Collection:\"), collection_id);"
    },
    {
        "line": 202,
        "fullcodeline": "print_aligned (len, _(\"Download:\"), formatted_download_size);"
    },
    {
        "line": 204,
        "fullcodeline": "print_aligned (len, _(\"Installed:\"), formatted_installed_size);"
    },
    {
        "line": 207,
        "fullcodeline": "g_autofree char *runtime = g_key_file_get_string (metakey, \"Application\", \"runtime\", error);"
    },
    {
        "line": 208,
        "fullcodeline": "print_aligned (len, _(\"Runtime:\"), runtime ? runtime : \"-\");"
    },
    {
        "line": 210,
        "fullcodeline": "if (flatpak_decomposed_is_app (ref) && metakey != NULL)"
    },
    {
        "line": 212,
        "fullcodeline": "g_autofree char *sdk = g_key_file_get_string (metakey, \"Application\", \"sdk\", error);"
    },
    {
        "line": 213,
        "fullcodeline": "print_aligned (len, _(\"Sdk:\"), sdk ? sdk : \"-\");"
    },
    {
        "line": 222,
        "fullcodeline": "g_autofree char *formatted_commit = ellipsize_string (parent, width);"
    },
    {
        "line": 223,
        "fullcodeline": "print_aligned (len, _(\"Parent:\"), formatted_commit);"
    },
    {
        "line": 227,
        "fullcodeline": "g_autofree char *formatted_eol = ellipsize_string (eol, width);"
    },
    {
        "line": 228,
        "fullcodeline": "print_aligned (len, _(\"End-of-life:\"), formatted_eol);"
    },
    {
        "line": 232,
        "fullcodeline": "g_autofree char *formatted_eol = ellipsize_string (eol_rebase, width);"
    },
    {
        "line": 233,
        "fullcodeline": "print_aligned (len, _(\"End-of-life-rebase:\"), formatted_eol);"
    },
    {
        "line": 237,
        "fullcodeline": "print_aligned (len, _(\"Subject:\"), subject);"
    },
    {
        "line": 239,
        "fullcodeline": "print_aligned (len, _(\"Date:\"), formatted_timestamp);"
    },
    {
        "line": 243,
        "fullcodeline": "g_autofree char *p = g_strdup (parent);"
    },
    {
        "line": 245,
        "fullcodeline": "print_aligned (len, _(\"History:\"), \"\\n\");"
    },
    {
        "line": 375,
        "fullcodeline": "while (c_v != NULL);"
    },
    {
        "line": 118,
        "fullcodeline": "print_wrapped (MIN (cols, 80), \"\\n%s - %s\\n\", name, comment);"
    },
    {
        "line": 136,
        "fullcodeline": "if (xa_metadata == NULL)"
    },
    {
        "line": 285,
        "fullcodeline": "c_v = g_variant_ref (commit_v);"
    },
    {
        "line": 289,
        "fullcodeline": "g_autofree char *p = NULL;"
    },
    {
        "line": 290,
        "fullcodeline": "g_autoptr(GVariant) c_m = NULL;"
    },
    {
        "line": 291,
        "fullcodeline": "gboolean first = TRUE;"
    },
    {
        "line": 364,
        "fullcodeline": "c = g_steal_pointer (&p);"
    },
    {
        "line": 368,
        "fullcodeline": "c_v = NULL;"
    },
    {
        "line": 256,
        "fullcodeline": "p_commit_v = flatpak_remote_state_load_ref_commit (state, preferred_dir, flatpak_decomposed_get_ref (ref),"
    },
    {
        "line": 261,
        "fullcodeline": "p_parent = ostree_commit_get_parent (p_commit_v);"
    },
    {
        "line": 262,
        "fullcodeline": "p_timestamp = ostree_commit_get_timestamp (p_commit_v);"
    },
    {
        "line": 263,
        "fullcodeline": "p_formatted_timestamp = format_timestamp (p_timestamp);"
    },
    {
        "line": 265,
        "fullcodeline": "p_commit = var_commit_from_gvariant (p_commit_v);"
    },
    {
        "line": 266,
        "fullcodeline": "p_subject = var_commit_get_subject (p_commit);"
    },
    {
        "line": 268,
        "fullcodeline": "print_aligned (len, _(\" Commit:\"), p);"
    },
    {
        "line": 269,
        "fullcodeline": "print_aligned (len, _(\" Subject:\"), p_subject);"
    },
    {
        "line": 270,
        "fullcodeline": "print_aligned (len, _(\" Date:\"), p_formatted_timestamp);"
    },
    {
        "line": 273,
        "fullcodeline": "p = g_steal_pointer (&p_parent);"
    },
    {
        "line": 370,
        "fullcodeline": "if (c && opt_log)"
    },
    {
        "line": 73,
        "fullcodeline": "else if (!flatpak_remote_state_lookup_ref (state, flatpak_decomposed_get_ref (ref),"
    },
    {
        "line": 137,
        "fullcodeline": "g_printerr (_(\"Warning: Commit has no flatpak metadata\\n\"));"
    },
    {
        "line": 140,
        "fullcodeline": "metakey = g_key_file_new ();"
    },
    {
        "line": 258,
        "fullcodeline": "if (p_commit_v == NULL)"
    },
    {
        "line": 295,
        "fullcodeline": "c_m = g_variant_get_child_value (c_v, 0);"
    },
    {
        "line": 296,
        "fullcodeline": "p = ostree_commit_get_parent (c_v);"
    },
    {
        "line": 301,
        "fullcodeline": "g_variant_lookup (c_m, \"xa.metadata\", \"&s\", &xa_metadata);"
    },
    {
        "line": 314,
        "fullcodeline": "maybe_print_space (&first);"
    },
    {
        "line": 320,
        "fullcodeline": "maybe_print_space (&first);"
    },
    {
        "line": 321,
        "fullcodeline": "g_print (\"%s\", c);"
    },
    {
        "line": 326,
        "fullcodeline": "maybe_print_space (&first);"
    },
    {
        "line": 332,
        "fullcodeline": "g_autofree char *runtime = NULL;"
    },
    {
        "line": 333,
        "fullcodeline": "maybe_print_space (&first);"
    },
    {
        "line": 342,
        "fullcodeline": "g_autofree char *sdk = NULL;"
    },
    {
        "line": 343,
        "fullcodeline": "maybe_print_space (&first);"
    },
    {
        "line": 371,
        "fullcodeline": "c_v = flatpak_remote_state_load_ref_commit (state, preferred_dir,"
    },
    {
        "line": 76,
        "fullcodeline": "g_assert (error == NULL || *error != NULL);"
    },
    {
        "line": 302,
        "fullcodeline": "if (xa_metadata == NULL)"
    },
    {
        "line": 315,
        "fullcodeline": "g_print (\"%s\", flatpak_decomposed_get_ref (ref));"
    },
    {
        "line": 355,
        "fullcodeline": "if (xa_metadata != NULL)"
    },
    {
        "line": 141,
        "fullcodeline": "if (!g_key_file_load_from_data (metakey, xa_metadata, -1, 0, error))"
    },
    {
        "line": 303,
        "fullcodeline": "g_printerr (_(\"Warning: Commit %s has no flatpak metadata\\n\"), c);"
    },
    {
        "line": 336,
        "fullcodeline": "runtime = g_key_file_get_string (metakey, flatpak_decomposed_get_kind_metadata_group (ref), \"runtime\", NULL);"
    },
    {
        "line": 346,
        "fullcodeline": "sdk = g_key_file_get_string (metakey, flatpak_decomposed_get_kind_metadata_group (ref), \"sdk\", NULL);"
    },
    {
        "line": 356,
        "fullcodeline": "flatpak_print_escaped_string (xa_metadata,"
    },
    {
        "line": 359,
        "fullcodeline": "if (xa_metadata == NULL || !g_str_has_suffix (xa_metadata, \"\\n\"))"
    },
    {
        "line": 372,
        "fullcodeline": "flatpak_decomposed_get_ref (ref),"
    },
    {
        "line": 306,
        "fullcodeline": "metakey = g_key_file_new ();"
    },
    {
        "line": 357,
        "fullcodeline": "FLATPAK_ESCAPE_ALLOW_NEWLINES"
    },
    {
        "line": 307,
        "fullcodeline": "if (!g_key_file_load_from_data (metakey, xa_metadata, -1, 0, error))"
    }
]