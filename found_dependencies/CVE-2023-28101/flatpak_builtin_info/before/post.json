[
    {
        "line": 3,
        "fullcodeline": "g_autoptr(GOptionContext) context = NULL;"
    },
    {
        "line": 4,
        "fullcodeline": "g_autoptr(FlatpakDecomposed) ref = NULL;"
    },
    {
        "line": 5,
        "fullcodeline": "g_autoptr(FlatpakDir) dir = NULL;"
    },
    {
        "line": 6,
        "fullcodeline": "g_autoptr(GBytes) deploy_data = NULL;"
    },
    {
        "line": 7,
        "fullcodeline": "g_autoptr(FlatpakDeploy) deploy = NULL;"
    },
    {
        "line": 8,
        "fullcodeline": "g_autoptr(GFile) deploy_dir = NULL;"
    },
    {
        "line": 9,
        "fullcodeline": "g_autoptr(GKeyFile) metakey = NULL;"
    },
    {
        "line": 10,
        "fullcodeline": "const char *commit = NULL;"
    },
    {
        "line": 11,
        "fullcodeline": "const char *alt_id = NULL;"
    },
    {
        "line": 18,
        "fullcodeline": "const char *pref = NULL;"
    },
    {
        "line": 19,
        "fullcodeline": "const char *default_branch = NULL;"
    },
    {
        "line": 20,
        "fullcodeline": "const char *origin = NULL;"
    },
    {
        "line": 22,
        "fullcodeline": "gboolean search_all = FALSE;"
    },
    {
        "line": 23,
        "fullcodeline": "gboolean first = TRUE;"
    },
    {
        "line": 26,
        "fullcodeline": "g_autofree char *formatted_size = NULL;"
    },
    {
        "line": 27,
        "fullcodeline": "gboolean friendly = TRUE;"
    },
    {
        "line": 28,
        "fullcodeline": "g_autofree const char **subpaths = NULL;"
    },
    {
        "line": 29,
        "fullcodeline": "int len = 0;"
    },
    {
        "line": 33,
        "fullcodeline": "context = g_option_context_new (_(\"NAME [BRANCH] - Get info about an installed app or runtime\"));"
    },
    {
        "line": 34,
        "fullcodeline": "g_option_context_set_translation_domain (context, GETTEXT_PACKAGE);"
    },
    {
        "line": 41,
        "fullcodeline": "pref = argv[1];"
    },
    {
        "line": 49,
        "fullcodeline": "kinds = FLATPAK_KINDS_APP | FLATPAK_KINDS_RUNTIME;"
    },
    {
        "line": 54,
        "fullcodeline": "dir = flatpak_find_installed_pref (pref, kinds, opt_arch, default_branch,"
    },
    {
        "line": 60,
        "fullcodeline": "deploy_data = flatpak_dir_get_deploy_data (dir, ref, FLATPAK_DEPLOY_VERSION_CURRENT, cancellable, error);"
    },
    {
        "line": 64,
        "fullcodeline": "deploy = flatpak_dir_load_deployed (dir, ref, NULL, cancellable, error);"
    },
    {
        "line": 68,
        "fullcodeline": "commit = flatpak_deploy_data_get_commit (deploy_data);"
    },
    {
        "line": 69,
        "fullcodeline": "alt_id = flatpak_deploy_data_get_alt_id (deploy_data);"
    },
    {
        "line": 70,
        "fullcodeline": "origin = flatpak_deploy_data_get_origin (deploy_data);"
    },
    {
        "line": 71,
        "fullcodeline": "size = flatpak_deploy_data_get_installed_size (deploy_data);"
    },
    {
        "line": 72,
        "fullcodeline": "formatted_size = g_format_size (size);"
    },
    {
        "line": 73,
        "fullcodeline": "deploy_dir = flatpak_deploy_get_dir (deploy);"
    },
    {
        "line": 74,
        "fullcodeline": "path = flatpak_file_get_path_cached (deploy_dir);"
    },
    {
        "line": 75,
        "fullcodeline": "subpaths = flatpak_deploy_data_get_subpaths (deploy_data);"
    },
    {
        "line": 76,
        "fullcodeline": "eol = flatpak_deploy_data_get_eol (deploy_data);"
    },
    {
        "line": 77,
        "fullcodeline": "eol_rebase = flatpak_deploy_data_get_eol_rebase (deploy_data);"
    },
    {
        "line": 78,
        "fullcodeline": "name = flatpak_deploy_data_get_appdata_name (deploy_data);"
    },
    {
        "line": 79,
        "fullcodeline": "summary = flatpak_deploy_data_get_appdata_summary (deploy_data);"
    },
    {
        "line": 80,
        "fullcodeline": "version = flatpak_deploy_data_get_appdata_version (deploy_data);"
    },
    {
        "line": 81,
        "fullcodeline": "license = flatpak_deploy_data_get_appdata_license (deploy_data);"
    },
    {
        "line": 83,
        "fullcodeline": "metakey = flatpak_deploy_get_metadata (deploy);"
    },
    {
        "line": 36,
        "fullcodeline": "if (!flatpak_option_context_parse (context, options, &argc, &argv, FLATPAK_BUILTIN_FLAG_NO_DIR, NULL, cancellable, error))"
    },
    {
        "line": 39,
        "fullcodeline": "if (argc < 2)"
    },
    {
        "line": 43,
        "fullcodeline": "if (argc >= 3)"
    },
    {
        "line": 46,
        "fullcodeline": "if (argc > 3)"
    },
    {
        "line": 51,
        "fullcodeline": "if (!opt_user && !opt_system && opt_installations == NULL)"
    },
    {
        "line": 57,
        "fullcodeline": "if (dir == NULL)"
    },
    {
        "line": 61,
        "fullcodeline": "if (deploy_data == NULL)"
    },
    {
        "line": 65,
        "fullcodeline": "if (deploy == NULL)"
    },
    {
        "line": 85,
        "fullcodeline": "if (opt_show_ref || opt_show_origin || opt_show_commit || opt_show_size || opt_show_metadata || opt_show_permissions ||"
    },
    {
        "line": 44,
        "fullcodeline": "default_branch = argv[2];"
    },
    {
        "line": 52,
        "fullcodeline": "search_all = TRUE;"
    },
    {
        "line": 87,
        "fullcodeline": "friendly = FALSE;"
    },
    {
        "line": 91,
        "fullcodeline": "g_autoptr(GVariant) commit_v = NULL;"
    },
    {
        "line": 94,
        "fullcodeline": "g_autofree char *formatted_timestamp = NULL;"
    },
    {
        "line": 95,
        "fullcodeline": "const gchar *subject = NULL;"
    },
    {
        "line": 96,
        "fullcodeline": "g_autofree char *parent = NULL;"
    },
    {
        "line": 97,
        "fullcodeline": "g_autofree char *latest = NULL;"
    },
    {
        "line": 98,
        "fullcodeline": "const char *xa_metadata = NULL;"
    },
    {
        "line": 99,
        "fullcodeline": "const char *collection_id = NULL;"
    },
    {
        "line": 101,
        "fullcodeline": "flatpak_get_window_size (&rows, &cols);"
    },
    {
        "line": 111,
        "fullcodeline": "latest = flatpak_dir_read_latest (dir, origin, flatpak_decomposed_get_ref (ref), NULL, NULL, NULL);"
    },
    {
        "line": 133,
        "fullcodeline": "len = 0;"
    },
    {
        "line": 134,
        "fullcodeline": "len = MAX (len, g_utf8_strlen (_(\"ID:\"), -1));"
    },
    {
        "line": 135,
        "fullcodeline": "len = MAX (len, g_utf8_strlen (_(\"Ref:\"), -1));"
    },
    {
        "line": 136,
        "fullcodeline": "len = MAX (len, g_utf8_strlen (_(\"Arch:\"), -1));"
    },
    {
        "line": 137,
        "fullcodeline": "len = MAX (len, g_utf8_strlen (_(\"Branch:\"), -1));"
    },
    {
        "line": 144,
        "fullcodeline": "len = MAX (len, g_utf8_strlen (_(\"Installation:\"), -1));"
    },
    {
        "line": 145,
        "fullcodeline": "len = MAX (len, g_utf8_strlen (_(\"Installed:\"), -1));"
    },
    {
        "line": 172,
        "fullcodeline": "len = MAX (len, g_utf8_strlen (_(\"Extension:\"), -1));"
    },
    {
        "line": 174,
        "fullcodeline": "width = cols - (len + 1);"
    },
    {
        "line": 176,
        "fullcodeline": "print_aligned_take (len, _(\"ID:\"), flatpak_decomposed_dup_id (ref));"
    },
    {
        "line": 177,
        "fullcodeline": "print_aligned (len, _(\"Ref:\"), flatpak_decomposed_get_ref (ref));"
    },
    {
        "line": 178,
        "fullcodeline": "print_aligned_take (len, _(\"Arch:\"), flatpak_decomposed_dup_arch (ref));"
    },
    {
        "line": 179,
        "fullcodeline": "print_aligned_take (len, _(\"Branch:\"), flatpak_decomposed_dup_branch (ref));"
    },
    {
        "line": 184,
        "fullcodeline": "print_aligned (len, _(\"Origin:\"), origin ? origin : \"-\");"
    },
    {
        "line": 187,
        "fullcodeline": "print_aligned (len, _(\"Installation:\"), flatpak_dir_get_name_cached (dir));"
    },
    {
        "line": 188,
        "fullcodeline": "print_aligned (len, _(\"Installed:\"), formatted_size);"
    },
    {
        "line": 207,
        "fullcodeline": "g_print (\"\\n\");"
    },
    {
        "line": 364,
        "fullcodeline": "g_autofree char *ref_arch = flatpak_decomposed_dup_arch (ref);"
    },
    {
        "line": 365,
        "fullcodeline": "g_autofree char *ref_branch = flatpak_decomposed_dup_branch (ref);"
    },
    {
        "line": 367,
        "fullcodeline": "len = MAX (len, g_utf8_strlen (_(\"Extension:\"), -1));"
    },
    {
        "line": 368,
        "fullcodeline": "len = MAX (len, g_utf8_strlen (_(\"ID:\"), -1));"
    },
    {
        "line": 369,
        "fullcodeline": "len = MAX (len, g_utf8_strlen (_(\"Origin:\"), -1));"
    },
    {
        "line": 370,
        "fullcodeline": "len = MAX (len, g_utf8_strlen (_(\"Commit:\"), -1));"
    },
    {
        "line": 371,
        "fullcodeline": "len = MAX (len, g_utf8_strlen (_(\"Installed:\"), -1));"
    },
    {
        "line": 372,
        "fullcodeline": "len = MAX (len, g_utf8_strlen (_(\"Subpaths:\"), -1));"
    },
    {
        "line": 374,
        "fullcodeline": "flatpak_get_window_size (&rows, &cols);"
    },
    {
        "line": 375,
        "fullcodeline": "width = cols - (len + 1);"
    },
    {
        "line": 377,
        "fullcodeline": "extensions = flatpak_list_extensions (metakey, ref_arch, ref_branch);"
    },
    {
        "line": 427,
        "fullcodeline": "g_list_free_full (extensions, (GDestroyNotify) flatpak_extension_free);"
    },
    {
        "line": 40,
        "fullcodeline": "return usage_error (context, _(\"NAME must be specified\"), error);"
    },
    {
        "line": 47,
        "fullcodeline": "return usage_error (context, _(\"Too many arguments\"), error);"
    },
    {
        "line": 112,
        "fullcodeline": "if (latest == NULL)"
    },
    {
        "line": 115,
        "fullcodeline": "if (ostree_repo_load_commit (flatpak_dir_get_repo (dir), commit, &commit_v, NULL, NULL))"
    },
    {
        "line": 142,
        "fullcodeline": "if (collection_id != NULL)"
    },
    {
        "line": 146,
        "fullcodeline": "if (flatpak_decomposed_is_app (ref))"
    },
    {
        "line": 155,
        "fullcodeline": "if (strcmp (commit, latest) != 0)"
    },
    {
        "line": 170,
        "fullcodeline": "if (subpaths[0] != NULL)"
    },
    {
        "line": 189,
        "fullcodeline": "if (flatpak_decomposed_is_app (ref))"
    },
    {
        "line": 198,
        "fullcodeline": "if (flatpak_decomposed_is_app (ref))"
    },
    {
        "line": 209,
        "fullcodeline": "if (strcmp (commit, latest) != 0)"
    },
    {
        "line": 231,
        "fullcodeline": "if (subpaths[0] != NULL)"
    },
    {
        "line": 378,
        "fullcodeline": "for (l = extensions; l; l = l->next)"
    },
    {
        "line": 113,
        "fullcodeline": "latest = g_strdup (_(\"ref not present in origin\"));"
    },
    {
        "line": 117,
        "fullcodeline": "VarCommitRef var_commit = var_commit_from_gvariant (commit_v);"
    },
    {
        "line": 119,
        "fullcodeline": "subject = var_commit_get_subject (var_commit);"
    },
    {
        "line": 120,
        "fullcodeline": "parent = ostree_commit_get_parent (commit_v);"
    },
    {
        "line": 121,
        "fullcodeline": "timestamp = ostree_commit_get_timestamp (commit_v);"
    },
    {
        "line": 123,
        "fullcodeline": "formatted_timestamp = format_timestamp (timestamp);"
    },
    {
        "line": 125,
        "fullcodeline": "commit_metadata = var_commit_get_metadata (var_commit);"
    },
    {
        "line": 126,
        "fullcodeline": "xa_metadata = var_metadata_lookup_string (commit_metadata, \"xa.metadata\", NULL);"
    },
    {
        "line": 130,
        "fullcodeline": "collection_id = var_metadata_lookup_string (commit_metadata, \"ostree.collection-binding\", NULL);"
    },
    {
        "line": 139,
        "fullcodeline": "len = MAX (len, g_utf8_strlen (_(\"Version:\"), -1));"
    },
    {
        "line": 141,
        "fullcodeline": "len = MAX (len, g_utf8_strlen (_(\"License:\"), -1));"
    },
    {
        "line": 143,
        "fullcodeline": "len = MAX (len, g_utf8_strlen (_(\"Collection:\"), -1));"
    },
    {
        "line": 148,
        "fullcodeline": "len = MAX (len, g_utf8_strlen (_(\"Runtime:\"), -1));"
    },
    {
        "line": 149,
        "fullcodeline": "len = MAX (len, g_utf8_strlen (_(\"Sdk:\"), -1));"
    },
    {
        "line": 152,
        "fullcodeline": "len = MAX (len, g_utf8_strlen (_(\"Date:\"), -1));"
    },
    {
        "line": 154,
        "fullcodeline": "len = MAX (len, g_utf8_strlen (_(\"Subject:\"), -1));"
    },
    {
        "line": 157,
        "fullcodeline": "len = MAX (len, g_utf8_strlen (_(\"Active commit:\"), -1));"
    },
    {
        "line": 158,
        "fullcodeline": "len = MAX (len, g_utf8_strlen (_(\"Latest commit:\"), -1));"
    },
    {
        "line": 163,
        "fullcodeline": "len = MAX (len, g_utf8_strlen (_(\"Parent:\"), -1));"
    },
    {
        "line": 165,
        "fullcodeline": "len = MAX (len, g_utf8_strlen (_(\"Alt-id:\"), -1));"
    },
    {
        "line": 167,
        "fullcodeline": "len = MAX (len, g_utf8_strlen (_(\"End-of-life:\"), -1));"
    },
    {
        "line": 169,
        "fullcodeline": "len = MAX (len, g_utf8_strlen (_(\"End-of-life-rebase:\"), -1));"
    },
    {
        "line": 171,
        "fullcodeline": "len = MAX (len, g_utf8_strlen (_(\"Subdirectories:\"), -1));"
    },
    {
        "line": 181,
        "fullcodeline": "print_aligned (len, _(\"Version:\"), version);"
    },
    {
        "line": 183,
        "fullcodeline": "print_aligned (len, _(\"License:\"), license);"
    },
    {
        "line": 186,
        "fullcodeline": "print_aligned (len, _(\"Collection:\"), collection_id);"
    },
    {
        "line": 191,
        "fullcodeline": "g_autofree char *runtime = NULL;"
    },
    {
        "line": 192,
        "fullcodeline": "runtime = g_key_file_get_string (metakey,"
    },
    {
        "line": 196,
        "fullcodeline": "print_aligned (len, _(\"Runtime:\"), runtime ? runtime : \"-\");"
    },
    {
        "line": 200,
        "fullcodeline": "g_autofree char *sdk = NULL;"
    },
    {
        "line": 201,
        "fullcodeline": "sdk = g_key_file_get_string (metakey,"
    },
    {
        "line": 205,
        "fullcodeline": "print_aligned (len, _(\"Sdk:\"), sdk ? sdk : \"-\");"
    },
    {
        "line": 211,
        "fullcodeline": "g_autofree char *formatted_commit = ellipsize_string (commit, width);"
    },
    {
        "line": 212,
        "fullcodeline": "print_aligned (len, _(\"Active commit:\"), formatted_commit);"
    },
    {
        "line": 213,
        "fullcodeline": "g_free (formatted_commit);"
    },
    {
        "line": 214,
        "fullcodeline": "formatted_commit = ellipsize_string (latest, width);"
    },
    {
        "line": 215,
        "fullcodeline": "print_aligned (len, _(\"Latest commit:\"), formatted_commit);"
    },
    {
        "line": 224,
        "fullcodeline": "g_autofree char *formatted_commit = ellipsize_string (parent, width);"
    },
    {
        "line": 225,
        "fullcodeline": "print_aligned (len, _(\"Parent:\"), formatted_commit);"
    },
    {
        "line": 228,
        "fullcodeline": "print_aligned (len, _(\"Subject:\"), subject);"
    },
    {
        "line": 230,
        "fullcodeline": "print_aligned (len, _(\"Date:\"), formatted_timestamp);"
    },
    {
        "line": 233,
        "fullcodeline": "g_autofree char *s = g_strjoinv (\",\", (char **) subpaths);"
    },
    {
        "line": 234,
        "fullcodeline": "print_aligned (len, _(\"Subdirectories:\"), s);"
    },
    {
        "line": 238,
        "fullcodeline": "print_aligned (len, _(\"Alt-id:\"), alt_id);"
    },
    {
        "line": 241,
        "fullcodeline": "g_autofree char *formatted_eol = ellipsize_string (eol, width);"
    },
    {
        "line": 242,
        "fullcodeline": "print_aligned (len, _(\"End-of-life:\"), formatted_eol);"
    },
    {
        "line": 246,
        "fullcodeline": "g_autofree char *formatted_eol = ellipsize_string (eol_rebase, width);"
    },
    {
        "line": 247,
        "fullcodeline": "print_aligned (len, _(\"End-of-life-rebase:\"), formatted_eol);"
    },
    {
        "line": 306,
        "fullcodeline": "if (!first)"
    },
    {
        "line": 323,
        "fullcodeline": "if (opt_show_permissions || opt_file_access)"
    },
    {
        "line": 380,
        "fullcodeline": "FlatpakExtension *ext = l->data;"
    },
    {
        "line": 381,
        "fullcodeline": "g_autofree const char **ext_subpaths = NULL;"
    },
    {
        "line": 382,
        "fullcodeline": "g_autoptr(GBytes) ext_deploy_data = NULL;"
    },
    {
        "line": 383,
        "fullcodeline": "g_autofree char *formatted = NULL;"
    },
    {
        "line": 384,
        "fullcodeline": "g_autofree char *ext_formatted_size = NULL;"
    },
    {
        "line": 385,
        "fullcodeline": "g_autofree char *formatted_commit = NULL;"
    },
    {
        "line": 413,
        "fullcodeline": "g_print (\"\\n\");"
    },
    {
        "line": 414,
        "fullcodeline": "print_aligned (len, _(\"Extension:\"), flatpak_decomposed_get_ref (ext->ref));"
    },
    {
        "line": 415,
        "fullcodeline": "print_aligned (len, _(\"ID:\"), ext->id);"
    },
    {
        "line": 416,
        "fullcodeline": "print_aligned (len, _(\"Origin:\"), origin ? origin : \"-\");"
    },
    {
        "line": 417,
        "fullcodeline": "print_aligned (len, _(\"Commit:\"), formatted_commit);"
    },
    {
        "line": 418,
        "fullcodeline": "print_aligned (len, _(\"Installed:\"), ext_formatted_size);"
    },
    {
        "line": 127,
        "fullcodeline": "if (xa_metadata == NULL)"
    },
    {
        "line": 161,
        "fullcodeline": "len = MAX (len, g_utf8_strlen (_(\"Commit:\"), -1));"
    },
    {
        "line": 219,
        "fullcodeline": "g_autofree char *formatted_commit = ellipsize_string (commit, width);"
    },
    {
        "line": 220,
        "fullcodeline": "print_aligned (len, _(\"Commit:\"), formatted_commit);"
    },
    {
        "line": 254,
        "fullcodeline": "maybe_print_space (&first);"
    },
    {
        "line": 255,
        "fullcodeline": "g_print (\"%s\", flatpak_decomposed_get_ref (ref));"
    },
    {
        "line": 260,
        "fullcodeline": "maybe_print_space (&first);"
    },
    {
        "line": 261,
        "fullcodeline": "g_print (\"%s\", origin ? origin : \"-\");"
    },
    {
        "line": 266,
        "fullcodeline": "maybe_print_space (&first);"
    },
    {
        "line": 267,
        "fullcodeline": "g_print (\"%s\", commit);"
    },
    {
        "line": 272,
        "fullcodeline": "maybe_print_space (&first);"
    },
    {
        "line": 278,
        "fullcodeline": "maybe_print_space (&first);"
    },
    {
        "line": 279,
        "fullcodeline": "g_print (\"%s\", path);"
    },
    {
        "line": 284,
        "fullcodeline": "g_autofree char *runtime = NULL;"
    },
    {
        "line": 285,
        "fullcodeline": "maybe_print_space (&first);"
    },
    {
        "line": 287,
        "fullcodeline": "runtime = g_key_file_get_string (metakey,"
    },
    {
        "line": 291,
        "fullcodeline": "g_print (\"%s\", runtime ? runtime : \"-\");"
    },
    {
        "line": 296,
        "fullcodeline": "g_autofree char *sdk = NULL;"
    },
    {
        "line": 297,
        "fullcodeline": "maybe_print_space (&first);"
    },
    {
        "line": 299,
        "fullcodeline": "sdk = g_key_file_get_string (metakey,"
    },
    {
        "line": 303,
        "fullcodeline": "g_print (\"%s\", sdk ? sdk : \"-\");"
    },
    {
        "line": 307,
        "fullcodeline": "g_print (\"\\n\");"
    },
    {
        "line": 311,
        "fullcodeline": "g_autoptr(GFile) file = NULL;"
    },
    {
        "line": 312,
        "fullcodeline": "g_autofree char *data = NULL;"
    },
    {
        "line": 315,
        "fullcodeline": "file = g_file_get_child (deploy_dir, \"metadata\");"
    },
    {
        "line": 320,
        "fullcodeline": "g_print (\"%s\", data);"
    },
    {
        "line": 325,
        "fullcodeline": "g_autoptr(FlatpakContext) app_context = NULL;"
    },
    {
        "line": 326,
        "fullcodeline": "g_autoptr(GKeyFile) keyfile = NULL;"
    },
    {
        "line": 327,
        "fullcodeline": "g_autofree gchar *contents = NULL;"
    },
    {
        "line": 329,
        "fullcodeline": "app_context = flatpak_context_load_for_deploy (deploy, error);"
    },
    {
        "line": 420,
        "fullcodeline": "if (ext_subpaths && ext_subpaths[0])"
    },
    {
        "line": 106,
        "fullcodeline": "print_wrapped (MIN (cols, 80), \"\\n%s - %s\\n\", name, summary);"
    },
    {
        "line": 128,
        "fullcodeline": "g_printerr (_(\"Warning: Commit has no flatpak metadata\\n\"));"
    },
    {
        "line": 317,
        "fullcodeline": "if (!g_file_load_contents (file, cancellable, &data, &data_size, NULL, error))"
    },
    {
        "line": 330,
        "fullcodeline": "if (app_context == NULL)"
    },
    {
        "line": 389,
        "fullcodeline": "formatted_commit = g_strdup (_(\"unmaintained\"));"
    },
    {
        "line": 390,
        "fullcodeline": "origin = NULL;"
    },
    {
        "line": 391,
        "fullcodeline": "size = 0;"
    },
    {
        "line": 392,
        "fullcodeline": "ext_formatted_size = g_strdup (_(\"unknown\"));"
    },
    {
        "line": 393,
        "fullcodeline": "ext_subpaths = NULL;"
    },
    {
        "line": 422,
        "fullcodeline": "g_autofree char *s = g_strjoinv (\",\", (char **) ext_subpaths);"
    },
    {
        "line": 423,
        "fullcodeline": "print_aligned (len, _(\"Subpaths:\"), s);"
    },
    {
        "line": 108,
        "fullcodeline": "print_wrapped (MIN (cols, 80), \"\\n%s\\n\", name);"
    },
    {
        "line": 288,
        "fullcodeline": "flatpak_decomposed_get_kind_metadata_group (ref),"
    },
    {
        "line": 300,
        "fullcodeline": "flatpak_decomposed_get_kind_metadata_group (ref),"
    },
    {
        "line": 335,
        "fullcodeline": "keyfile = g_key_file_new ();"
    },
    {
        "line": 336,
        "fullcodeline": "flatpak_context_save_metadata (app_context, TRUE, keyfile);"
    },
    {
        "line": 337,
        "fullcodeline": "contents = g_key_file_to_data (keyfile, NULL, error);"
    },
    {
        "line": 341,
        "fullcodeline": "g_print (\"%s\", contents);"
    },
    {
        "line": 346,
        "fullcodeline": "g_autofree char *id = flatpak_decomposed_dup_id (ref);"
    },
    {
        "line": 347,
        "fullcodeline": "g_autoptr(FlatpakExports) exports = flatpak_context_get_exports (app_context, id);"
    },
    {
        "line": 350,
        "fullcodeline": "mode = flatpak_exports_path_get_mode (exports, opt_file_access);"
    },
    {
        "line": 397,
        "fullcodeline": "ext_deploy_data = flatpak_dir_get_deploy_data (dir, ext->ref, FLATPAK_DEPLOY_VERSION_CURRENT, cancellable, error);"
    },
    {
        "line": 401,
        "fullcodeline": "commit = flatpak_deploy_data_get_commit (ext_deploy_data);"
    },
    {
        "line": 402,
        "fullcodeline": "formatted_commit = ellipsize_string (commit, width);"
    },
    {
        "line": 403,
        "fullcodeline": "origin = flatpak_deploy_data_get_origin (ext_deploy_data);"
    },
    {
        "line": 404,
        "fullcodeline": "size = flatpak_deploy_data_get_installed_size (ext_deploy_data);"
    },
    {
        "line": 405,
        "fullcodeline": "formatted = g_format_size (size);"
    },
    {
        "line": 406,
        "fullcodeline": "ext_subpaths = flatpak_deploy_data_get_subpaths (ext_deploy_data);"
    },
    {
        "line": 338,
        "fullcodeline": "if (contents == NULL)"
    },
    {
        "line": 351,
        "fullcodeline": "if (mode == 0)"
    },
    {
        "line": 398,
        "fullcodeline": "if (ext_deploy_data == NULL)"
    },
    {
        "line": 407,
        "fullcodeline": "if (ext_subpaths && ext_subpaths[0] && size > 0)"
    },
    {
        "line": 352,
        "fullcodeline": "g_print (\"hidden\\n\");"
    },
    {
        "line": 408,
        "fullcodeline": "ext_formatted_size = g_strconcat (\"<\", formatted, NULL);"
    },
    {
        "line": 410,
        "fullcodeline": "ext_formatted_size = g_steal_pointer (&formatted);"
    },
    {
        "line": 353,
        "fullcodeline": "else if (mode == FLATPAK_FILESYSTEM_MODE_READ_ONLY)"
    },
    {
        "line": 354,
        "fullcodeline": "g_print (\"read-only\\n\");"
    },
    {
        "line": 356,
        "fullcodeline": "g_print (\"read-write\\n\");"
    }
]