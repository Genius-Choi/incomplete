[
    {
        "line": 6,
        "fullcodeline": "g_auto(GStrv) groups = NULL;"
    },
    {
        "line": 231,
        "fullcodeline": "groups = g_key_file_get_groups (metakey, NULL);"
    },
    {
        "line": 9,
        "fullcodeline": "if (g_key_file_has_key (metakey, FLATPAK_METADATA_GROUP_CONTEXT, FLATPAK_METADATA_KEY_SHARED, NULL))"
    },
    {
        "line": 33,
        "fullcodeline": "if (g_key_file_has_key (metakey, FLATPAK_METADATA_GROUP_CONTEXT, FLATPAK_METADATA_KEY_SOCKETS, NULL))"
    },
    {
        "line": 55,
        "fullcodeline": "if (g_key_file_has_key (metakey, FLATPAK_METADATA_GROUP_CONTEXT, FLATPAK_METADATA_KEY_DEVICES, NULL))"
    },
    {
        "line": 78,
        "fullcodeline": "if (g_key_file_has_key (metakey, FLATPAK_METADATA_GROUP_CONTEXT, FLATPAK_METADATA_KEY_FEATURES, NULL))"
    },
    {
        "line": 101,
        "fullcodeline": "if (g_key_file_has_key (metakey, FLATPAK_METADATA_GROUP_CONTEXT, FLATPAK_METADATA_KEY_FILESYSTEMS, NULL))"
    },
    {
        "line": 138,
        "fullcodeline": "if (g_key_file_has_key (metakey, FLATPAK_METADATA_GROUP_CONTEXT, FLATPAK_METADATA_KEY_PERSISTENT, NULL))"
    },
    {
        "line": 150,
        "fullcodeline": "if (g_key_file_has_group (metakey, FLATPAK_METADATA_GROUP_SESSION_BUS_POLICY))"
    },
    {
        "line": 171,
        "fullcodeline": "if (g_key_file_has_group (metakey, FLATPAK_METADATA_GROUP_SYSTEM_BUS_POLICY))"
    },
    {
        "line": 192,
        "fullcodeline": "if (g_key_file_has_group (metakey, FLATPAK_METADATA_GROUP_ENVIRONMENT))"
    },
    {
        "line": 211,
        "fullcodeline": "if (g_key_file_has_key (metakey, FLATPAK_METADATA_GROUP_CONTEXT, FLATPAK_METADATA_KEY_UNSET_ENVIRONMENT, NULL))"
    },
    {
        "line": 232,
        "fullcodeline": "for (i = 0; groups[i] != NULL; i++)"
    },
    {
        "line": 11,
        "fullcodeline": "g_auto(GStrv) shares = g_key_file_get_string_list (metakey, FLATPAK_METADATA_GROUP_CONTEXT,"
    },
    {
        "line": 35,
        "fullcodeline": "g_auto(GStrv) sockets = g_key_file_get_string_list (metakey, FLATPAK_METADATA_GROUP_CONTEXT,"
    },
    {
        "line": 57,
        "fullcodeline": "g_auto(GStrv) devices = g_key_file_get_string_list (metakey, FLATPAK_METADATA_GROUP_CONTEXT,"
    },
    {
        "line": 80,
        "fullcodeline": "g_auto(GStrv) features = g_key_file_get_string_list (metakey, FLATPAK_METADATA_GROUP_CONTEXT,"
    },
    {
        "line": 103,
        "fullcodeline": "g_auto(GStrv) filesystems = g_key_file_get_string_list (metakey, FLATPAK_METADATA_GROUP_CONTEXT,"
    },
    {
        "line": 140,
        "fullcodeline": "g_auto(GStrv) persistent = g_key_file_get_string_list (metakey, FLATPAK_METADATA_GROUP_CONTEXT,"
    },
    {
        "line": 152,
        "fullcodeline": "g_auto(GStrv) keys = NULL;"
    },
    {
        "line": 155,
        "fullcodeline": "keys = g_key_file_get_keys (metakey, FLATPAK_METADATA_GROUP_SESSION_BUS_POLICY, &keys_count, NULL);"
    },
    {
        "line": 173,
        "fullcodeline": "g_auto(GStrv) keys = NULL;"
    },
    {
        "line": 176,
        "fullcodeline": "keys = g_key_file_get_keys (metakey, FLATPAK_METADATA_GROUP_SYSTEM_BUS_POLICY, &keys_count, NULL);"
    },
    {
        "line": 194,
        "fullcodeline": "g_auto(GStrv) keys = NULL;"
    },
    {
        "line": 197,
        "fullcodeline": "keys = g_key_file_get_keys (metakey, FLATPAK_METADATA_GROUP_ENVIRONMENT, &keys_count, NULL);"
    },
    {
        "line": 213,
        "fullcodeline": "g_auto(GStrv) vars = NULL;"
    },
    {
        "line": 216,
        "fullcodeline": "vars = g_key_file_get_string_list (metakey, FLATPAK_METADATA_GROUP_CONTEXT,"
    },
    {
        "line": 234,
        "fullcodeline": "const char *group = groups[i];"
    },
    {
        "line": 13,
        "fullcodeline": "if (shares == NULL)"
    },
    {
        "line": 16,
        "fullcodeline": "for (i = 0; shares[i] != NULL; i++)"
    },
    {
        "line": 37,
        "fullcodeline": "if (sockets == NULL)"
    },
    {
        "line": 40,
        "fullcodeline": "for (i = 0; sockets[i] != NULL; i++)"
    },
    {
        "line": 59,
        "fullcodeline": "if (devices == NULL)"
    },
    {
        "line": 63,
        "fullcodeline": "for (i = 0; devices[i] != NULL; i++)"
    },
    {
        "line": 82,
        "fullcodeline": "if (features == NULL)"
    },
    {
        "line": 86,
        "fullcodeline": "for (i = 0; features[i] != NULL; i++)"
    },
    {
        "line": 105,
        "fullcodeline": "if (filesystems == NULL)"
    },
    {
        "line": 108,
        "fullcodeline": "for (i = 0; filesystems[i] != NULL; i++)"
    },
    {
        "line": 142,
        "fullcodeline": "if (persistent == NULL)"
    },
    {
        "line": 145,
        "fullcodeline": "for (i = 0; persistent[i] != NULL; i++)"
    },
    {
        "line": 156,
        "fullcodeline": "for (i = 0; i < keys_count; i++)"
    },
    {
        "line": 177,
        "fullcodeline": "for (i = 0; i < keys_count; i++)"
    },
    {
        "line": 198,
        "fullcodeline": "for (i = 0; i < keys_count; i++)"
    },
    {
        "line": 220,
        "fullcodeline": "if (vars == NULL)"
    },
    {
        "line": 223,
        "fullcodeline": "for (i = 0; i < vars_count; i++)"
    },
    {
        "line": 238,
        "fullcodeline": "if (g_str_has_prefix (group, FLATPAK_METADATA_GROUP_PREFIX_POLICY))"
    },
    {
        "line": 20,
        "fullcodeline": "share = flatpak_context_share_from_string (parse_negated (shares[i], &remove), NULL);"
    },
    {
        "line": 42,
        "fullcodeline": "FlatpakContextSockets socket = flatpak_context_socket_from_string (parse_negated (sockets[i], &remove), NULL);"
    },
    {
        "line": 65,
        "fullcodeline": "FlatpakContextDevices device = flatpak_context_device_from_string (parse_negated (devices[i], &remove), NULL);"
    },
    {
        "line": 88,
        "fullcodeline": "FlatpakContextFeatures feature = flatpak_context_feature_from_string (parse_negated (features[i], &remove), NULL);"
    },
    {
        "line": 110,
        "fullcodeline": "const char *fs = parse_negated (filesystems[i], &remove);"
    },
    {
        "line": 111,
        "fullcodeline": "g_autofree char *filesystem = NULL;"
    },
    {
        "line": 112,
        "fullcodeline": "g_autoptr(GError) local_error = NULL;"
    },
    {
        "line": 146,
        "fullcodeline": "if (!flatpak_context_set_persistent (context, persistent[i], error))"
    },
    {
        "line": 158,
        "fullcodeline": "const char *key = keys[i];"
    },
    {
        "line": 159,
        "fullcodeline": "g_autofree char *value = g_key_file_get_string (metakey, FLATPAK_METADATA_GROUP_SESSION_BUS_POLICY, key, NULL);"
    },
    {
        "line": 165,
        "fullcodeline": "policy = flatpak_policy_from_string (value, NULL);"
    },
    {
        "line": 179,
        "fullcodeline": "const char *key = keys[i];"
    },
    {
        "line": 180,
        "fullcodeline": "g_autofree char *value = g_key_file_get_string (metakey, FLATPAK_METADATA_GROUP_SYSTEM_BUS_POLICY, key, NULL);"
    },
    {
        "line": 186,
        "fullcodeline": "policy = flatpak_policy_from_string (value, NULL);"
    },
    {
        "line": 200,
        "fullcodeline": "const char *key = keys[i];"
    },
    {
        "line": 201,
        "fullcodeline": "g_autofree char *value = g_key_file_get_string (metakey, FLATPAK_METADATA_GROUP_ENVIRONMENT, key, NULL);"
    },
    {
        "line": 203,
        "fullcodeline": "flatpak_context_set_env_var (context, key, value);"
    },
    {
        "line": 225,
        "fullcodeline": "const char *var = vars[i];"
    },
    {
        "line": 227,
        "fullcodeline": "flatpak_context_set_env_var (context, var, NULL);"
    },
    {
        "line": 240,
        "fullcodeline": "g_auto(GStrv) keys = NULL;"
    },
    {
        "line": 241,
        "fullcodeline": "subsystem = group + strlen (FLATPAK_METADATA_GROUP_PREFIX_POLICY);"
    },
    {
        "line": 242,
        "fullcodeline": "keys = g_key_file_get_keys (metakey, group, NULL, NULL);"
    },
    {
        "line": 21,
        "fullcodeline": "if (share == 0)"
    },
    {
        "line": 43,
        "fullcodeline": "if (socket == 0)"
    },
    {
        "line": 66,
        "fullcodeline": "if (device == 0)"
    },
    {
        "line": 89,
        "fullcodeline": "if (feature == 0)"
    },
    {
        "line": 115,
        "fullcodeline": "if (!flatpak_context_parse_filesystem (fs, remove,"
    },
    {
        "line": 162,
        "fullcodeline": "if (!flatpak_verify_dbus_name (key, error))"
    },
    {
        "line": 166,
        "fullcodeline": "if ((int) policy != -1)"
    },
    {
        "line": 183,
        "fullcodeline": "if (!flatpak_verify_dbus_name (key, error))"
    },
    {
        "line": 187,
        "fullcodeline": "if ((int) policy != -1)"
    },
    {
        "line": 243,
        "fullcodeline": "for (j = 0; keys != NULL && keys[j] != NULL; j++)"
    },
    {
        "line": 22,
        "fullcodeline": "g_info (\"Unknown share type %s\", shares[i]);"
    },
    {
        "line": 44,
        "fullcodeline": "g_info (\"Unknown socket type %s\", sockets[i]);"
    },
    {
        "line": 67,
        "fullcodeline": "g_info (\"Unknown device type %s\", devices[i]);"
    },
    {
        "line": 90,
        "fullcodeline": "g_info (\"Unknown feature type %s\", features[i]);"
    },
    {
        "line": 167,
        "fullcodeline": "flatpak_context_set_session_bus_policy (context, key, policy);"
    },
    {
        "line": 188,
        "fullcodeline": "flatpak_context_set_system_bus_policy (context, key, policy);"
    },
    {
        "line": 245,
        "fullcodeline": "const char *key = keys[j];"
    },
    {
        "line": 246,
        "fullcodeline": "g_autofree char *policy_key = g_strdup_printf (\"%s.%s\", subsystem, key);"
    },
    {
        "line": 247,
        "fullcodeline": "g_auto(GStrv) values = NULL;"
    },
    {
        "line": 250,
        "fullcodeline": "values = g_key_file_get_string_list (metakey, group, key, NULL, NULL);"
    },
    {
        "line": 118,
        "fullcodeline": "if (g_error_matches (local_error, G_IO_ERROR, G_IO_ERROR_INVALID_DATA))"
    },
    {
        "line": 132,
        "fullcodeline": "g_assert (mode == FLATPAK_FILESYSTEM_MODE_NONE || !remove);"
    },
    {
        "line": 133,
        "fullcodeline": "flatpak_context_take_filesystem (context, g_steal_pointer (&filesystem), mode);"
    },
    {
        "line": 251,
        "fullcodeline": "for (k = 0; values != NULL && values[k] != NULL; k++)"
    },
    {
        "line": 252,
        "fullcodeline": "flatpak_context_apply_generic_policy (context, policy_key,"
    },
    {
        "line": 121,
        "fullcodeline": "g_propagate_error (error, g_steal_pointer (&local_error));"
    },
    {
        "line": 26,
        "fullcodeline": "flatpak_context_remove_shares (context, share);"
    },
    {
        "line": 48,
        "fullcodeline": "flatpak_context_remove_sockets (context, socket);"
    },
    {
        "line": 71,
        "fullcodeline": "flatpak_context_remove_devices (context, device);"
    },
    {
        "line": 94,
        "fullcodeline": "flatpak_context_remove_features (context, feature);"
    },
    {
        "line": 126,
        "fullcodeline": "g_info (\"Unknown filesystem type %s\", filesystems[i]);"
    },
    {
        "line": 127,
        "fullcodeline": "g_clear_error (&local_error);"
    },
    {
        "line": 28,
        "fullcodeline": "flatpak_context_add_shares (context, share);"
    },
    {
        "line": 50,
        "fullcodeline": "flatpak_context_add_sockets (context, socket);"
    },
    {
        "line": 73,
        "fullcodeline": "flatpak_context_add_devices (context, device);"
    },
    {
        "line": 96,
        "fullcodeline": "flatpak_context_add_features (context, feature);"
    }
]