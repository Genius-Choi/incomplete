[
    {
        "line": 8,
        "fullcodeline": "p->tcph = (TCPHdr *)pkt;"
    },
    {
        "line": 10,
        "fullcodeline": "uint8_t hlen = TCP_GET_HLEN(p);"
    },
    {
        "line": 16,
        "fullcodeline": "uint8_t tcp_opt_len = hlen - TCP_HEADER_LEN;"
    },
    {
        "line": 26,
        "fullcodeline": "SET_TCP_SRC_PORT(p,&p->sp);"
    },
    {
        "line": 29,
        "fullcodeline": "p->proto = IPPROTO_TCP;"
    },
    {
        "line": 3,
        "fullcodeline": "if (unlikely(len < TCP_HEADER_LEN)) {"
    },
    {
        "line": 32,
        "fullcodeline": "p->payload_len = len - hlen;"
    },
    {
        "line": 4,
        "fullcodeline": "ENGINE_SET_INVALID_EVENT(p, TCP_PKT_TOO_SMALL);"
    },
    {
        "line": 11,
        "fullcodeline": "if (unlikely(len < hlen)) {"
    },
    {
        "line": 12,
        "fullcodeline": "ENGINE_SET_INVALID_EVENT(p, TCP_HLEN_TOO_SMALL);"
    },
    {
        "line": 17,
        "fullcodeline": "if (unlikely(tcp_opt_len > TCP_OPTLENMAX)) {"
    },
    {
        "line": 18,
        "fullcodeline": "ENGINE_SET_INVALID_EVENT(p, TCP_INVALID_OPTLEN);"
    },
    {
        "line": 22,
        "fullcodeline": "if (likely(tcp_opt_len > 0)) {"
    },
    {
        "line": 23,
        "fullcodeline": "DecodeTCPOptions(p, pkt + TCP_HEADER_LEN, tcp_opt_len);"
    },
    {
        "line": 5,
        "fullcodeline": "return -1;"
    },
    {
        "line": 13,
        "fullcodeline": "return -1;"
    },
    {
        "line": 19,
        "fullcodeline": "return -1;"
    }
]