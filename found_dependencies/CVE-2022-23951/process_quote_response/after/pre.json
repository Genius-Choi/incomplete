[
    {
        "line": 6,
        "fullcodeline": "failure = Failure(Component.QUOTE_VALIDATION)"
    },
    {
        "line": 7,
        "fullcodeline": "received_public_key = None"
    },
    {
        "line": 8,
        "fullcodeline": "quote = None"
    },
    {
        "line": 46,
        "fullcodeline": "hash_alg = json_response.get('hash_alg')"
    },
    {
        "line": 47,
        "fullcodeline": "enc_alg = json_response.get('enc_alg')"
    },
    {
        "line": 48,
        "fullcodeline": "sign_alg = json_response.get('sign_alg')"
    },
    {
        "line": 51,
        "fullcodeline": "agent['hash_alg'] = hash_alg"
    },
    {
        "line": 52,
        "fullcodeline": "agent['enc_alg'] = enc_alg"
    },
    {
        "line": 53,
        "fullcodeline": "agent['sign_alg'] = sign_alg"
    },
    {
        "line": 98,
        "fullcodeline": "agentAttestState.set_boottime(boottime)"
    },
    {
        "line": 100,
        "fullcodeline": "ima_keyrings = agentAttestState.get_ima_keyrings()"
    },
    {
        "line": 101,
        "fullcodeline": "tenant_keyring = ima_file_signatures.ImaKeyring.from_string(agent['ima_sign_verification_keys'])"
    },
    {
        "line": 102,
        "fullcodeline": "ima_keyrings.set_tenant_keyring(tenant_keyring)"
    },
    {
        "line": 104,
        "fullcodeline": "quote_validation_failure = get_tpm_instance().check_quote("
    },
    {
        "line": 118,
        "fullcodeline": "failure.merge(quote_validation_failure)"
    },
    {
        "line": 38,
        "fullcodeline": "if received_public_key is None:"
    },
    {
        "line": 80,
        "fullcodeline": "if ima_measurement_list_entry == 0:"
    },
    {
        "line": 120,
        "fullcodeline": "if not failure:"
    },
    {
        "line": 11,
        "fullcodeline": "received_public_key = json_response.get(\"pubkey\", None)"
    },
    {
        "line": 12,
        "fullcodeline": "quote = json_response[\"quote\"]"
    },
    {
        "line": 14,
        "fullcodeline": "ima_measurement_list = json_response.get(\"ima_measurement_list\", None)"
    },
    {
        "line": 15,
        "fullcodeline": "ima_measurement_list_entry = json_response.get(\"ima_measurement_list_entry\", 0)"
    },
    {
        "line": 16,
        "fullcodeline": "mb_measurement_list = json_response.get(\"mb_measurement_list\", None)"
    },
    {
        "line": 17,
        "fullcodeline": "boottime = json_response.get(\"boottime\", 0)"
    },
    {
        "line": 19,
        "fullcodeline": "logger.debug(\"received quote:      %s\", quote)"
    },
    {
        "line": 20,
        "fullcodeline": "logger.debug(\"for nonce:           %s\", agent['nonce'])"
    },
    {
        "line": 21,
        "fullcodeline": "logger.debug(\"received public key: %s\", received_public_key)"
    },
    {
        "line": 22,
        "fullcodeline": "logger.debug(\"received ima_measurement_list    %s\", (ima_measurement_list is not None))"
    },
    {
        "line": 23,
        "fullcodeline": "logger.debug(\"received ima_measurement_list_entry: %d\", ima_measurement_list_entry)"
    },
    {
        "line": 24,
        "fullcodeline": "logger.debug(\"received boottime: %s\", boottime)"
    },
    {
        "line": 25,
        "fullcodeline": "logger.debug(\"received boot log    %s\", (mb_measurement_list is not None))"
    },
    {
        "line": 31,
        "fullcodeline": "if not isinstance(ima_measurement_list_entry, int):"
    },
    {
        "line": 34,
        "fullcodeline": "if not isinstance(boottime, int):"
    },
    {
        "line": 43,
        "fullcodeline": "agent['provide_V'] = False"
    },
    {
        "line": 44,
        "fullcodeline": "received_public_key = agent['public_key']"
    },
    {
        "line": 56,
        "fullcodeline": "if not algorithms.is_accepted(hash_alg, agent['accept_tpm_hash_algs'])\\"
    },
    {
        "line": 57,
        "fullcodeline": "or not algorithms.Hash.is_recognized(hash_alg):"
    },
    {
        "line": 59,
        "fullcodeline": "failure.add_event(\"invalid_hash_alg\","
    },
    {
        "line": 65,
        "fullcodeline": "if not algorithms.is_accepted(enc_alg, agent['accept_tpm_encryption_algs']):"
    },
    {
        "line": 67,
        "fullcodeline": "failure.add_event(\"invalid_enc_alg\","
    },
    {
        "line": 73,
        "fullcodeline": "if not algorithms.is_accepted(sign_alg, agent['accept_tpm_signing_algs']):"
    },
    {
        "line": 75,
        "fullcodeline": "failure.add_event(\"invalid_sign_alg\","
    },
    {
        "line": 81,
        "fullcodeline": "agentAttestState.reset_ima_attestation()"
    },
    {
        "line": 123,
        "fullcodeline": "agent['first_verified'] = True"
    },
    {
        "line": 32,
        "fullcodeline": "raise Exception(\"ima_measurement_list_entry parameter must be an integer\")"
    },
    {
        "line": 35,
        "fullcodeline": "raise Exception(\"boottime parameter must be an integer\")"
    },
    {
        "line": 58,
        "fullcodeline": "logger.error(f\"TPM Quote is using an unaccepted hash algorithm: {hash_alg}\")"
    },
    {
        "line": 66,
        "fullcodeline": "logger.error(f\"TPM Quote is using an unaccepted encryption algorithm: {enc_alg}\")"
    },
    {
        "line": 74,
        "fullcodeline": "logger.error(f\"TPM Quote is using an unaccepted signing algorithm: {sign_alg}\")"
    },
    {
        "line": 82,
        "fullcodeline": "elif ima_measurement_list_entry != agentAttestState.get_next_ima_ml_entry():"
    },
    {
        "line": 113,
        "fullcodeline": "algorithms.Hash(hash_alg),"
    },
    {
        "line": 117,
        "fullcodeline": "compressed=(agent['supported_version'] == \"1.0\"))  # TODO: change this to always False after initial update"
    },
    {
        "line": 126,
        "fullcodeline": "if received_public_key != agent.get('public_key', \"\"):"
    },
    {
        "line": 27,
        "fullcodeline": "failure.add_event(\"invalid_data\", {\"message\": \"parsing agents get quote respone failed\", \"data\": e}, False)"
    },
    {
        "line": 39,
        "fullcodeline": "if agent.get('public_key', \"\") == \"\" or agent.get('b64_encrypted_V', \"\") == \"\":"
    },
    {
        "line": 41,
        "fullcodeline": "failure.add_event(\"no_pubkey\", \"agent did not provide public key and no key or encrypted_v was cached at CV\", False)"
    },
    {
        "line": 60,
        "fullcodeline": "{\"message\": f\"TPM Quote is using an unaccepted hash algorithm: {hash_alg}\", \"data\": hash_alg},"
    },
    {
        "line": 68,
        "fullcodeline": "{\"message\": f\"TPM Quote is using an unaccepted encryption algorithm: {enc_alg}\", \"data\": enc_alg},"
    },
    {
        "line": 76,
        "fullcodeline": "{\"message\": f\"TPM Quote is using an unaccepted signing algorithm: {sign_alg}\", \"data\": {sign_alg}},"
    },
    {
        "line": 87,
        "fullcodeline": "failure.add_event(\"invalid_ima_entry_nb\","
    },
    {
        "line": 85,
        "fullcodeline": "logger.error(\"Agent did not respond with requested next IMA measurement list entry \""
    },
    {
        "line": 86,
        "fullcodeline": "f\"{agentAttestState.get_next_ima_ml_entry()} but started at {ima_measurement_list_entry}\")"
    },
    {
        "line": 88,
        "fullcodeline": "{\"message\": \"Agent did not respond with requested next IMA measurement list entry\","
    },
    {
        "line": 91,
        "fullcodeline": "elif not agentAttestState.is_expected_boottime(boottime):"
    },
    {
        "line": 89,
        "fullcodeline": "\"got\": ima_measurement_list_entry, \"expected\": agentAttestState.get_next_ima_ml_entry()},"
    }
]