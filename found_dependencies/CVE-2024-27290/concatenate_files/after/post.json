[
    {
        "line": 2,
        "fullcodeline": "pdf_file = tempfile.NamedTemporaryFile(prefix=\"datemp\", mode=\"wb\", suffix=\".pdf\", delete=False)"
    },
    {
        "line": 3,
        "fullcodeline": "new_path_list = []"
    },
    {
        "line": 4,
        "fullcodeline": "for path in path_list:"
    },
    {
        "line": 33,
        "fullcodeline": "if len(new_path_list) == 0:"
    },
    {
        "line": 36,
        "fullcodeline": "if len(new_path_list) == 1:"
    },
    {
        "line": 63,
        "fullcodeline": "if password or owner_password:"
    },
    {
        "line": 34,
        "fullcodeline": "raise DAError(\"concatenate_files: no valid files to concatenate\")"
    },
    {
        "line": 37,
        "fullcodeline": "shutil.copyfile(new_path_list[0], pdf_file.name)"
    },
    {
        "line": 62,
        "fullcodeline": "pdf_to_pdfa(pdf_file.name)"
    },
    {
        "line": 64,
        "fullcodeline": "pdf_encrypt(pdf_file.name, password, owner_password)"
    },
    {
        "line": 39,
        "fullcodeline": "with Pdf.open(new_path_list[0]) as original:"
    },
    {
        "line": 5,
        "fullcodeline": "mimetype, encoding = mimetypes.guess_type(path)  # pylint: disable=unused-variable"
    },
    {
        "line": 6,
        "fullcodeline": "if mimetype.startswith('image'):"
    },
    {
        "line": 7,
        "fullcodeline": "new_pdf_file = tempfile.NamedTemporaryFile(prefix=\"datemp\", mode=\"wb\", suffix=\".pdf\", delete=False)"
    },
    {
        "line": 8,
        "fullcodeline": "args = [daconfig.get('imagemagick', 'convert'), path, new_pdf_file.name]"
    },
    {
        "line": 17,
        "fullcodeline": "new_path_list.append(new_pdf_file.name)"
    },
    {
        "line": 40,
        "fullcodeline": "need_appearances = False"
    },
    {
        "line": 60,
        "fullcodeline": "original.save(pdf_file.name)"
    },
    {
        "line": 14,
        "fullcodeline": "if result != 0:"
    },
    {
        "line": 18,
        "fullcodeline": "elif mimetype in ('application/rtf', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'application/msword', 'application/vnd.oasis.opendocument.text'):"
    },
    {
        "line": 46,
        "fullcodeline": "for additional_file in new_path_list[1:]:"
    },
    {
        "line": 15,
        "fullcodeline": "logmessage(\"failed to convert image to PDF: \" + \" \".join(args))"
    },
    {
        "line": 19,
        "fullcodeline": "new_pdf_file = tempfile.NamedTemporaryFile(prefix=\"datemp\", mode=\"wb\", suffix=\".pdf\", delete=False)"
    },
    {
        "line": 30,
        "fullcodeline": "new_path_list.append(new_pdf_file.name)"
    },
    {
        "line": 20,
        "fullcodeline": "if mimetype == 'application/rtf':"
    },
    {
        "line": 28,
        "fullcodeline": "if not word_to_pdf(path, ext, new_pdf_file.name, pdfa=False):"
    },
    {
        "line": 31,
        "fullcodeline": "elif mimetype == 'application/pdf':"
    },
    {
        "line": 10,
        "fullcodeline": "result = subprocess.run(args, timeout=60, check=False).returncode"
    },
    {
        "line": 12,
        "fullcodeline": "logmessage(\"concatenate_files: convert took too long\")"
    },
    {
        "line": 13,
        "fullcodeline": "result = 1"
    },
    {
        "line": 21,
        "fullcodeline": "ext = 'rtf'"
    },
    {
        "line": 29,
        "fullcodeline": "raise DAException('Failure to convert DOCX to PDF')"
    },
    {
        "line": 32,
        "fullcodeline": "new_path_list.append(path)"
    },
    {
        "line": 43,
        "fullcodeline": "need_appearances = True"
    },
    {
        "line": 45,
        "fullcodeline": "pass"
    },
    {
        "line": 47,
        "fullcodeline": "with Pdf.open(additional_file) as additional_pdf:"
    },
    {
        "line": 57,
        "fullcodeline": "original.Root.AcroForm.NeedAppearances = True"
    },
    {
        "line": 22,
        "fullcodeline": "elif mimetype == 'application/vnd.openxmlformats-officedocument.wordprocessingml.document':"
    },
    {
        "line": 23,
        "fullcodeline": "ext = 'docx'"
    },
    {
        "line": 59,
        "fullcodeline": "logmessage(\"concatenate_files: an additional file had an AcroForm with NeedAppearances but setting NeedAppearances on the final document resulted in an error\")"
    },
    {
        "line": 24,
        "fullcodeline": "elif mimetype == 'application/msword':"
    },
    {
        "line": 48,
        "fullcodeline": "if need_appearances is False:"
    },
    {
        "line": 54,
        "fullcodeline": "original.pages.extend(additional_pdf.pages)"
    },
    {
        "line": 25,
        "fullcodeline": "ext = 'doc'"
    },
    {
        "line": 26,
        "fullcodeline": "elif mimetype == 'application/vnd.oasis.opendocument.text':"
    },
    {
        "line": 27,
        "fullcodeline": "ext = 'odt'"
    },
    {
        "line": 51,
        "fullcodeline": "need_appearances = True"
    },
    {
        "line": 53,
        "fullcodeline": "pass"
    }
]