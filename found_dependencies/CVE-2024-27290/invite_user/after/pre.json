[
    {
        "line": 4,
        "fullcodeline": "role_name = privilege or 'user'"
    },
    {
        "line": 5,
        "fullcodeline": "the_role_id = None"
    },
    {
        "line": 15,
        "fullcodeline": "user_invite = MyUserInvitation(email=email_address, role_id=the_role_id, invited_by_user_id=current_user.id)"
    },
    {
        "line": 18,
        "fullcodeline": "token = app.user_manager.generate_token(user_invite.id)"
    },
    {
        "line": 19,
        "fullcodeline": "accept_invite_link = url_for('user.register',"
    },
    {
        "line": 22,
        "fullcodeline": "user_invite.token = token"
    },
    {
        "line": 2,
        "fullcodeline": "if not (current_user.is_authenticated and current_user.has_role_or_permission('admin', permissions=['create_user'])):"
    },
    {
        "line": 6,
        "fullcodeline": "for role in db.session.execute(select(Role).order_by('id')).scalars():"
    },
    {
        "line": 10,
        "fullcodeline": "if the_role_id is None:"
    },
    {
        "line": 12,
        "fullcodeline": "user, user_email = app.user_manager.find_user_by_email(email_address)  # pylint: disable=unused-variable"
    },
    {
        "line": 16,
        "fullcodeline": "db.session.add(user_invite)"
    },
    {
        "line": 17,
        "fullcodeline": "db.session.commit()"
    },
    {
        "line": 23,
        "fullcodeline": "db.session.commit()"
    },
    {
        "line": 3,
        "fullcodeline": "raise DAError(\"You do not have sufficient privileges to create a new user\")"
    },
    {
        "line": 11,
        "fullcodeline": "raise DAError(\"Invalid privilege name \" + repr(privilege))"
    },
    {
        "line": 14,
        "fullcodeline": "return DAError(\"A user with that email address already exists\")"
    },
    {
        "line": 7,
        "fullcodeline": "if role.name == role_name:"
    },
    {
        "line": 8,
        "fullcodeline": "the_role_id = role.id"
    },
    {
        "line": 27,
        "fullcodeline": "docassemble_flask_user.emails.send_invite_email(user_invite, accept_invite_link)"
    },
    {
        "line": 26,
        "fullcodeline": "logmessage(\"Trying to send invite e-mail to \" + str(user_invite.email))"
    },
    {
        "line": 28,
        "fullcodeline": "logmessage(\"Sent e-mail invite to \" + str(user_invite.email))"
    },
    {
        "line": 34,
        "fullcodeline": "db.session.delete(user_invite)"
    },
    {
        "line": 35,
        "fullcodeline": "db.session.commit()"
    },
    {
        "line": 36,
        "fullcodeline": "raise DAError(\"Invitation email failed to send\")"
    },
    {
        "line": 31,
        "fullcodeline": "logmessage(\"Failed to send invite e-mail: \" + e.__class__.__name__ + ': ' + str(e))"
    }
]