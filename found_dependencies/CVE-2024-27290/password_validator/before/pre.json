[
    {
        "line": 2,
        "fullcodeline": "password = list(field.data)"
    },
    {
        "line": 3,
        "fullcodeline": "password_length = len(password)"
    },
    {
        "line": 16,
        "fullcodeline": "rules = daconfig.get('password complexity', {})"
    },
    {
        "line": 17,
        "fullcodeline": "is_valid = password_length >= rules.get('length', 6) and lowers >= rules.get('lowercase', 1) and uppers >= rules.get('uppercase', 1) and digits >= rules.get('digits', 1) and punct >= rules.get('punctuation', 0)"
    },
    {
        "line": 5,
        "fullcodeline": "lowers = uppers = digits = punct = 0"
    },
    {
        "line": 6,
        "fullcodeline": "for ch in password:"
    },
    {
        "line": 18,
        "fullcodeline": "if not is_valid:"
    },
    {
        "line": 36,
        "fullcodeline": "raise wtforms.ValidationError(word(error_message))"
    },
    {
        "line": 19,
        "fullcodeline": "if 'error message' in rules:"
    },
    {
        "line": 7,
        "fullcodeline": "if ch.islower():"
    },
    {
        "line": 9,
        "fullcodeline": "if ch.isupper():"
    },
    {
        "line": 11,
        "fullcodeline": "if ch.isdigit():"
    },
    {
        "line": 13,
        "fullcodeline": "if not (ch.islower() or ch.isupper() or ch.isdigit()):"
    },
    {
        "line": 20,
        "fullcodeline": "error_message = str(rules['error message'])"
    },
    {
        "line": 23,
        "fullcodeline": "error_message = 'Password must be at least ' + docassemble.base.functions.quantity_noun(rules.get('length', 6), 'character', language='en') + ' long'"
    },
    {
        "line": 24,
        "fullcodeline": "standards = []"
    },
    {
        "line": 35,
        "fullcodeline": "error_message += '.'"
    },
    {
        "line": 8,
        "fullcodeline": "lowers += 1"
    },
    {
        "line": 10,
        "fullcodeline": "uppers += 1"
    },
    {
        "line": 12,
        "fullcodeline": "digits += 1"
    },
    {
        "line": 14,
        "fullcodeline": "punct += 1"
    },
    {
        "line": 25,
        "fullcodeline": "if rules.get('lowercase', 1) > 0:"
    },
    {
        "line": 27,
        "fullcodeline": "if rules.get('uppercase', 1) > 0:"
    },
    {
        "line": 29,
        "fullcodeline": "if rules.get('digits', 1) > 0:"
    },
    {
        "line": 31,
        "fullcodeline": "if rules.get('punctuation', 0) > 0:"
    },
    {
        "line": 33,
        "fullcodeline": "if len(standards) > 0:"
    },
    {
        "line": 26,
        "fullcodeline": "standards.append('at least ' + docassemble.base.functions.quantity_noun(rules.get('lowercase', 1), 'lowercase letter', language='en'))"
    },
    {
        "line": 28,
        "fullcodeline": "standards.append('at least ' + docassemble.base.functions.quantity_noun(rules.get('uppercase', 1), 'uppercase letter', language='en'))"
    },
    {
        "line": 30,
        "fullcodeline": "standards.append('at least ' + docassemble.base.functions.quantity_noun(rules.get('digits', 1), 'number', language='en'))"
    },
    {
        "line": 32,
        "fullcodeline": "standards.append('at least ' + docassemble.base.functions.quantity_noun(rules.get('punctuation', 1), 'punctuation character', language='en'))"
    },
    {
        "line": 34,
        "fullcodeline": "error_message += ' with ' + docassemble.base.functions.comma_and_list_en(standards)"
    }
]