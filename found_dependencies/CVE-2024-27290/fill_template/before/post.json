[
    {
        "line": 16,
        "fullcodeline": "the_fields = read_fields(template)"
    },
    {
        "line": 19,
        "fullcodeline": "export_values = {}"
    },
    {
        "line": 56,
        "fullcodeline": "data_dict = {}"
    },
    {
        "line": 59,
        "fullcodeline": "pdf_file = tempfile.NamedTemporaryFile(prefix=\"datemp\", mode=\"wb\", suffix=\".pdf\", delete=False)"
    },
    {
        "line": 2,
        "fullcodeline": "if data_strings is None:"
    },
    {
        "line": 4,
        "fullcodeline": "if data_names is None:"
    },
    {
        "line": 6,
        "fullcodeline": "if hidden is None:"
    },
    {
        "line": 8,
        "fullcodeline": "if readonly is None:"
    },
    {
        "line": 10,
        "fullcodeline": "if images is None:"
    },
    {
        "line": 12,
        "fullcodeline": "if pdf_url is None:"
    },
    {
        "line": 14,
        "fullcodeline": "if not pdf_url.endswith('.pdf'):"
    },
    {
        "line": 17,
        "fullcodeline": "if len(the_fields) == 0:"
    },
    {
        "line": 20,
        "fullcodeline": "for field, default, pageno, rect, field_type, export_value in the_fields:  # pylint: disable=unused-variable"
    },
    {
        "line": 27,
        "fullcodeline": "if len(export_values) > 0:"
    },
    {
        "line": 57,
        "fullcodeline": "for key, val in data_strings:"
    },
    {
        "line": 60,
        "fullcodeline": "if pdfa or not editable:"
    },
    {
        "line": 164,
        "fullcodeline": "if len(images) > 0:"
    },
    {
        "line": 214,
        "fullcodeline": "if (pdfa or not editable) and len(images) > 0:"
    },
    {
        "line": 218,
        "fullcodeline": "if password or owner_password:"
    },
    {
        "line": 3,
        "fullcodeline": "data_strings = []"
    },
    {
        "line": 5,
        "fullcodeline": "data_names = []"
    },
    {
        "line": 7,
        "fullcodeline": "hidden = []"
    },
    {
        "line": 9,
        "fullcodeline": "readonly = []"
    },
    {
        "line": 11,
        "fullcodeline": "images = []"
    },
    {
        "line": 13,
        "fullcodeline": "pdf_url = 'file.pdf'"
    },
    {
        "line": 15,
        "fullcodeline": "pdf_url += '.pdf'"
    },
    {
        "line": 18,
        "fullcodeline": "raise DAError(\"PDF template has no fields in it.\")"
    },
    {
        "line": 28,
        "fullcodeline": "new_data_strings = []"
    },
    {
        "line": 55,
        "fullcodeline": "data_strings = new_data_strings"
    },
    {
        "line": 61,
        "fullcodeline": "fdf = Xfdf(pdf_url, data_dict)"
    },
    {
        "line": 63,
        "fullcodeline": "fdf_file = tempfile.NamedTemporaryFile(prefix=\"datemp\", mode=\"wb\", suffix=\".xfdf\", delete=False)"
    },
    {
        "line": 65,
        "fullcodeline": "fdf_file.close()"
    },
    {
        "line": 66,
        "fullcodeline": "fdf.write_xfdf(fdf_file.name)"
    },
    {
        "line": 87,
        "fullcodeline": "subprocess_arguments = [PDFTK_PATH, template, 'fill_form', fdf_file.name, 'output', pdf_file.name] + font_arguments"
    },
    {
        "line": 93,
        "fullcodeline": "completed_process = None"
    },
    {
        "line": 113,
        "fullcodeline": "pdf.Root.AcroForm.NeedAppearances = True"
    },
    {
        "line": 165,
        "fullcodeline": "fields = {}"
    },
    {
        "line": 169,
        "fullcodeline": "image_todo = []"
    },
    {
        "line": 212,
        "fullcodeline": "pdf.save(pdf_file.name)"
    },
    {
        "line": 213,
        "fullcodeline": "pdf.close()"
    },
    {
        "line": 215,
        "fullcodeline": "flatten_pdf(pdf_file.name)"
    },
    {
        "line": 217,
        "fullcodeline": "pdf_to_pdfa(pdf_file.name)"
    },
    {
        "line": 219,
        "fullcodeline": "pdf_encrypt(pdf_file.name, password, owner_password)"
    },
    {
        "line": 21,
        "fullcodeline": "field_type = re.sub(r'[^/A-Za-z]', '', str(field_type))"
    },
    {
        "line": 29,
        "fullcodeline": "for key, val in data_strings:"
    },
    {
        "line": 58,
        "fullcodeline": "data_dict[key] = val"
    },
    {
        "line": 67,
        "fullcodeline": "if template_password is not None:"
    },
    {
        "line": 89,
        "fullcodeline": "if len(images) > 0:"
    },
    {
        "line": 100,
        "fullcodeline": "if result != 0:"
    },
    {
        "line": 104,
        "fullcodeline": "if len(images) > 0:"
    },
    {
        "line": 114,
        "fullcodeline": "for page in pdf.pages:"
    },
    {
        "line": 161,
        "fullcodeline": "if len(images) == 0:"
    },
    {
        "line": 166,
        "fullcodeline": "for field, default, pageno, rect, field_type, export_value in the_fields:"
    },
    {
        "line": 170,
        "fullcodeline": "for field, file_info in images:"
    },
    {
        "line": 205,
        "fullcodeline": "if len(image_todo) > 0:"
    },
    {
        "line": 22,
        "fullcodeline": "if field_type in ('/Btn', \"/'Btn'\"):"
    },
    {
        "line": 68,
        "fullcodeline": "template_file = tempfile.NamedTemporaryFile(prefix=\"datemp\", mode=\"wb\", suffix=\".pdf\", delete=False)"
    },
    {
        "line": 69,
        "fullcodeline": "qpdf_subprocess_arguments = [QPDF_PATH, '--decrypt', '--password=' + template_password, template, template_file.name]"
    },
    {
        "line": 78,
        "fullcodeline": "template = template_file.name"
    },
    {
        "line": 86,
        "fullcodeline": "font_arguments = DEFAULT_FONT_ARGUMENTS"
    },
    {
        "line": 90,
        "fullcodeline": "subprocess_arguments.append('need_appearances')"
    },
    {
        "line": 92,
        "fullcodeline": "subprocess_arguments.append('flatten')"
    },
    {
        "line": 95,
        "fullcodeline": "completed_process = subprocess.run(subprocess_arguments, timeout=600, check=False, capture_output=True)"
    },
    {
        "line": 96,
        "fullcodeline": "result = completed_process.returncode"
    },
    {
        "line": 101,
        "fullcodeline": "logmessage(\"Failed to fill PDF form \" + str(template))"
    },
    {
        "line": 102,
        "fullcodeline": "pdftk_error_msg = (f\": {completed_process.stderr}\") if completed_process else \"\""
    },
    {
        "line": 103,
        "fullcodeline": "raise DAError(\"Call to pdftk failed for template \" + str(template) + \" where arguments were \" + \" \".join(subprocess_arguments) + pdftk_error_msg)"
    },
    {
        "line": 105,
        "fullcodeline": "temp_pdf_file = tempfile.NamedTemporaryFile(prefix=\"datemp\", mode=\"wb\", suffix=\".pdf\", delete=False)"
    },
    {
        "line": 106,
        "fullcodeline": "shutil.copyfile(pdf_file.name, temp_pdf_file.name)"
    },
    {
        "line": 107,
        "fullcodeline": "pdf = Pdf.open(temp_pdf_file.name)"
    },
    {
        "line": 110,
        "fullcodeline": "pdf = Pdf.open(template, password=template_password)"
    },
    {
        "line": 112,
        "fullcodeline": "pdf = Pdf.open(template)"
    },
    {
        "line": 162,
        "fullcodeline": "pdf.save(pdf_file.name)"
    },
    {
        "line": 163,
        "fullcodeline": "pdf.close()"
    },
    {
        "line": 54,
        "fullcodeline": "new_data_strings.append((key, val))"
    },
    {
        "line": 75,
        "fullcodeline": "if result != 0:"
    },
    {
        "line": 174,
        "fullcodeline": "temp_png = tempfile.NamedTemporaryFile(mode=\"wb\", suffix=\".png\")"
    },
    {
        "line": 175,
        "fullcodeline": "args = [daconfig.get('imagemagick', 'convert'), file_info['fullpath'], \"-trim\", \"+repage\", \"+profile\", '*', '-density', '0', temp_png.name]"
    },
    {
        "line": 184,
        "fullcodeline": "im = Image.open(temp_png.name)"
    },
    {
        "line": 187,
        "fullcodeline": "dppx = width/(xtwo-xone)"
    },
    {
        "line": 188,
        "fullcodeline": "dppy = height/(ytwo-yone)"
    },
    {
        "line": 197,
        "fullcodeline": "new_im = Image.new('RGBA', (int((xtwo - xone) * dpp), int((ytwo - yone) * dpp)), (255, 0, 0, 0))"
    },
    {
        "line": 198,
        "fullcodeline": "new_im.paste(im, (x_offset, y_offset))"
    },
    {
        "line": 199,
        "fullcodeline": "overlay_pdf_file = tempfile.NamedTemporaryFile(prefix=\"datemp\", mode=\"wb\", suffix=\".pdf\", delete=False)"
    },
    {
        "line": 204,
        "fullcodeline": "image_todo.append({'overlay_file': overlay_pdf_file.name, 'pageno': fields[field]['pageno'], 'field': field})"
    },
    {
        "line": 206,
        "fullcodeline": "for item in image_todo:"
    },
    {
        "line": 23,
        "fullcodeline": "if field in export_values:"
    },
    {
        "line": 30,
        "fullcodeline": "if key in export_values and len(export_values[key]) > 0:"
    },
    {
        "line": 76,
        "fullcodeline": "logmessage(\"Failed to decrypt PDF template \" + str(template))"
    },
    {
        "line": 77,
        "fullcodeline": "raise DAError(\"Call to qpdf failed for template \" + str(template) + \" where arguments were \" + \" \".join(qpdf_subprocess_arguments))"
    },
    {
        "line": 81,
        "fullcodeline": "font_arguments = ['replacement_font', replacement_font]"
    },
    {
        "line": 83,
        "fullcodeline": "logmessage(\"Warning: the rendering font feature requires system version 1.4.73 or later\")"
    },
    {
        "line": 84,
        "fullcodeline": "font_arguments = []"
    },
    {
        "line": 98,
        "fullcodeline": "result = 1"
    },
    {
        "line": 99,
        "fullcodeline": "logmessage(\"fill_template: call to pdftk fill_form took too long\")"
    },
    {
        "line": 115,
        "fullcodeline": "if not hasattr(page, 'Annots'):"
    },
    {
        "line": 117,
        "fullcodeline": "for the_annot in page.Annots:"
    },
    {
        "line": 167,
        "fullcodeline": "if str(field_type) in ('/Sig', \"/'Sig'\"):"
    },
    {
        "line": 171,
        "fullcodeline": "if field not in fields:"
    },
    {
        "line": 181,
        "fullcodeline": "if result == 1:"
    },
    {
        "line": 185,
        "fullcodeline": "width, height = im.size"
    },
    {
        "line": 186,
        "fullcodeline": "xone, yone, xtwo, ytwo = fields[field]['rect']"
    },
    {
        "line": 189,
        "fullcodeline": "if dppx > dppy:"
    },
    {
        "line": 200,
        "fullcodeline": "with BytesIO() as output:"
    },
    {
        "line": 26,
        "fullcodeline": "export_values[field] = [export_value or default_export_value or 'Yes']"
    },
    {
        "line": 168,
        "fullcodeline": "fields[field] = {'pageno': pageno, 'rect': rect}"
    },
    {
        "line": 172,
        "fullcodeline": "logmessage(\"field name \" + str(field) + \" not found in PDF file\")"
    },
    {
        "line": 182,
        "fullcodeline": "logmessage(\"failed to trim file: \" + \" \".join(args))"
    },
    {
        "line": 190,
        "fullcodeline": "dpp = dppx"
    },
    {
        "line": 191,
        "fullcodeline": "x_offset = 0"
    },
    {
        "line": 192,
        "fullcodeline": "y_offset = int(0.5 * ((ytwo - yone) * dpp - height))"
    },
    {
        "line": 194,
        "fullcodeline": "dpp = dppy"
    },
    {
        "line": 195,
        "fullcodeline": "x_offset = int(0.5 * ((xtwo - xone) * dpp - width))"
    },
    {
        "line": 196,
        "fullcodeline": "y_offset = 0"
    },
    {
        "line": 24,
        "fullcodeline": "export_values[field].append(export_value or default_export_value or 'Yes')"
    },
    {
        "line": 31,
        "fullcodeline": "if len(export_values[key]) > 1:"
    },
    {
        "line": 71,
        "fullcodeline": "result = subprocess.run(qpdf_subprocess_arguments, timeout=60, check=False).returncode"
    },
    {
        "line": 73,
        "fullcodeline": "result = 1"
    },
    {
        "line": 74,
        "fullcodeline": "logmessage(\"fill_template: call to qpdf took too long\")"
    },
    {
        "line": 201,
        "fullcodeline": "new_im.save(output, 'PNG')"
    },
    {
        "line": 202,
        "fullcodeline": "overlay_pdf_file.write(img2pdf.convert(output.getvalue()))"
    },
    {
        "line": 203,
        "fullcodeline": "overlay_pdf_file.close()"
    },
    {
        "line": 207,
        "fullcodeline": "xone, yone, xtwo, ytwo = fields[item['field']]['rect']"
    },
    {
        "line": 209,
        "fullcodeline": "with Pdf.open(item['overlay_file']) as overlay_file:"
    },
    {
        "line": 118,
        "fullcodeline": "for field, value in data_dict.items():"
    },
    {
        "line": 177,
        "fullcodeline": "result = subprocess.run(args, timeout=60, check=False).returncode"
    },
    {
        "line": 179,
        "fullcodeline": "logmessage(\"fill_template: convert took too long\")"
    },
    {
        "line": 180,
        "fullcodeline": "result = 1"
    },
    {
        "line": 35,
        "fullcodeline": "if 'True' in export_values[key] and val in ('Yes', 'yes'):"
    },
    {
        "line": 37,
        "fullcodeline": "if 'False' in export_values[key] and val in ('No', 'no'):"
    },
    {
        "line": 39,
        "fullcodeline": "if val not in export_values[key]:"
    },
    {
        "line": 43,
        "fullcodeline": "if str(val) in ('Yes', 'yes', 'True', 'true', 'On', 'on', export_val):"
    },
    {
        "line": 36,
        "fullcodeline": "val = 'True'"
    },
    {
        "line": 38,
        "fullcodeline": "val = 'False'"
    },
    {
        "line": 40,
        "fullcodeline": "val = 'Off'"
    },
    {
        "line": 44,
        "fullcodeline": "val = export_val"
    },
    {
        "line": 119,
        "fullcodeline": "annot = the_annot"
    },
    {
        "line": 120,
        "fullcodeline": "annot_kid = None"
    },
    {
        "line": 128,
        "fullcodeline": "field_type = str(annot.FT)"
    },
    {
        "line": 211,
        "fullcodeline": "pdf.pages[item['pageno'] - 1].add_overlay(overlay_page, rect=pikepdf.Rectangle(xone, yone, xtwo, ytwo))"
    },
    {
        "line": 46,
        "fullcodeline": "if export_val == 'On':"
    },
    {
        "line": 121,
        "fullcodeline": "while not (hasattr(annot, \"FT\") and hasattr(annot, \"T\")) and hasattr(annot, 'Parent'):"
    },
    {
        "line": 124,
        "fullcodeline": "if not (hasattr(annot, \"T\") and hasattr(annot, \"FT\")):"
    },
    {
        "line": 126,
        "fullcodeline": "if field != str(annot.T):"
    },
    {
        "line": 129,
        "fullcodeline": "if field_type == \"/Tx\":"
    },
    {
        "line": 47,
        "fullcodeline": "val = 'Off'"
    },
    {
        "line": 122,
        "fullcodeline": "annot_kid = annot"
    },
    {
        "line": 123,
        "fullcodeline": "annot = annot.Parent"
    },
    {
        "line": 130,
        "fullcodeline": "the_string = pikepdf.String(value)"
    },
    {
        "line": 131,
        "fullcodeline": "annot.V = the_string"
    },
    {
        "line": 132,
        "fullcodeline": "annot.DV = the_string"
    },
    {
        "line": 48,
        "fullcodeline": "elif export_val == 'on':"
    },
    {
        "line": 133,
        "fullcodeline": "elif field_type == \"/Btn\":"
    },
    {
        "line": 49,
        "fullcodeline": "val = 'off'"
    },
    {
        "line": 136,
        "fullcodeline": "the_name = pikepdf.Name('/' + value)"
    },
    {
        "line": 137,
        "fullcodeline": "annot.V = the_name"
    },
    {
        "line": 138,
        "fullcodeline": "annot.DV = the_name"
    },
    {
        "line": 50,
        "fullcodeline": "elif export_val == 'yes':"
    },
    {
        "line": 134,
        "fullcodeline": "if hasattr(annot, \"A\"):"
    },
    {
        "line": 141,
        "fullcodeline": "if (annot_kid is not None and hasattr(annot_kid, \"AP\")"
    },
    {
        "line": 153,
        "fullcodeline": "elif field_type == \"/Ch\":"
    },
    {
        "line": 51,
        "fullcodeline": "val = 'no'"
    },
    {
        "line": 53,
        "fullcodeline": "val = 'No'"
    },
    {
        "line": 143,
        "fullcodeline": "annot.AS = the_name"
    },
    {
        "line": 154,
        "fullcodeline": "opt_list = [str(item) for item in annot.Opt]"
    },
    {
        "line": 158,
        "fullcodeline": "the_string = pikepdf.String(value)"
    },
    {
        "line": 159,
        "fullcodeline": "annot.V = the_string"
    },
    {
        "line": 160,
        "fullcodeline": "annot.DV = the_string"
    },
    {
        "line": 144,
        "fullcodeline": "if the_name in annot_kid.AP.N.keys():"
    },
    {
        "line": 150,
        "fullcodeline": "elif (hasattr(annot, \"AP\") and hasattr(annot.AP, \"N\")):"
    },
    {
        "line": 155,
        "fullcodeline": "if value not in opt_list:"
    },
    {
        "line": 145,
        "fullcodeline": "annot_kid.AS = the_name"
    },
    {
        "line": 156,
        "fullcodeline": "opt_list.append(value)"
    },
    {
        "line": 157,
        "fullcodeline": "annot.Opt = pikepdf.Array(opt_list)"
    },
    {
        "line": 147,
        "fullcodeline": "for off in [\"/Off\", \"/off\"]:"
    },
    {
        "line": 151,
        "fullcodeline": "if the_name in annot.AP.N.keys():"
    },
    {
        "line": 152,
        "fullcodeline": "annot.AS = the_name"
    },
    {
        "line": 148,
        "fullcodeline": "if off in annot_kid.AP.N.keys():"
    },
    {
        "line": 149,
        "fullcodeline": "annot_kid.AS = off"
    }
]