[
    {
        "line": 5,
        "fullcodeline": "setup();"
    },
    {
        "line": 7,
        "fullcodeline": "MCLog(\"connect %s\", MCUTF8DESC(this));"
    },
    {
        "line": 9,
        "fullcodeline": "MCAssert(mState == STATE_DISCONNECTED);"
    },
    {
        "line": 73,
        "fullcodeline": "low = mailstream_get_low(mImap->imap_stream);"
    },
    {
        "line": 74,
        "fullcodeline": "identifierString = String::stringWithUTF8Format(\"%s@%s:%u\", MCUTF8(mUsername), MCUTF8(mHostname), mPort);"
    },
    {
        "line": 75,
        "fullcodeline": "identifier = strdup(identifierString->UTF8Characters());"
    },
    {
        "line": 76,
        "fullcodeline": "mailstream_low_set_identifier(low, identifier);"
    },
    {
        "line": 96,
        "fullcodeline": "mState = STATE_CONNECTED;"
    },
    {
        "line": 113,
        "fullcodeline": "* pError = ErrorNone;"
    },
    {
        "line": 114,
        "fullcodeline": "MCLog(\"connect ok\");"
    },
    {
        "line": 118,
        "fullcodeline": "unsetup();"
    },
    {
        "line": 11,
        "fullcodeline": "if (mHostname == NULL) {"
    },
    {
        "line": 78,
        "fullcodeline": "if (mImap->imap_response != NULL) {"
    },
    {
        "line": 98,
        "fullcodeline": "if (isAutomaticConfigurationEnabled()) {"
    },
    {
        "line": 12,
        "fullcodeline": "* pError = ErrorInvalidAccount;"
    },
    {
        "line": 18,
        "fullcodeline": "MCLog(\"STARTTLS connect\");"
    },
    {
        "line": 19,
        "fullcodeline": "r = mailimap_socket_connect_voip(mImap, MCUTF8(mHostname), mPort, isVoIPEnabled());"
    },
    {
        "line": 25,
        "fullcodeline": "r = mailimap_socket_starttls(mImap);"
    },
    {
        "line": 32,
        "fullcodeline": "mIsCertificateValid = checkCertificate();"
    },
    {
        "line": 41,
        "fullcodeline": "r = mailimap_ssl_connect_voip(mImap, MCUTF8(mHostname), mPort, isVoIPEnabled());"
    },
    {
        "line": 42,
        "fullcodeline": "MCLog(\"ssl connect %s %u %u\", MCUTF8(mHostname), mPort, r);"
    },
    {
        "line": 49,
        "fullcodeline": "mIsCertificateValid = checkCertificate();"
    },
    {
        "line": 58,
        "fullcodeline": "MCLog(\"socket connect %s %u\", MCUTF8(mHostname), mPort);"
    },
    {
        "line": 59,
        "fullcodeline": "r = mailimap_socket_connect_voip(mImap, MCUTF8(mHostname), mPort, isVoIPEnabled());"
    },
    {
        "line": 60,
        "fullcodeline": "MCLog(\"socket connect %i\", r);"
    },
    {
        "line": 79,
        "fullcodeline": "MC_SAFE_REPLACE_RETAIN(String, mWelcomeString, String::stringWithUTF8Characters(mImap->imap_response));"
    },
    {
        "line": 80,
        "fullcodeline": "mYahooServer = (mWelcomeString->locationOfString(MCSTR(\"yahoo.com\")) != -1);"
    },
    {
        "line": 91,
        "fullcodeline": "mRamblerRuServer = (mHostname->locationOfString(MCSTR(\".rambler.ru\")) != -1);"
    },
    {
        "line": 92,
        "fullcodeline": "mHermesServer = (mWelcomeString->locationOfString(MCSTR(\"Hermes\")) != -1);"
    },
    {
        "line": 93,
        "fullcodeline": "mQipServer = (mWelcomeString->locationOfString(MCSTR(\"QIP IMAP server\")) != -1);"
    },
    {
        "line": 20,
        "fullcodeline": "if (hasError(r)) {"
    },
    {
        "line": 26,
        "fullcodeline": "if (hasError(r)) {"
    },
    {
        "line": 33,
        "fullcodeline": "if (isCheckCertificateEnabled() && !mIsCertificateValid) {"
    },
    {
        "line": 43,
        "fullcodeline": "if (hasError(r)) {"
    },
    {
        "line": 50,
        "fullcodeline": "if (isCheckCertificateEnabled() && !mIsCertificateValid) {"
    },
    {
        "line": 61,
        "fullcodeline": "if (hasError(r)) {"
    },
    {
        "line": 85,
        "fullcodeline": "if (mWelcomeString->locationOfString(MCSTR(\"Courier-IMAP\")) != -1) {"
    },
    {
        "line": 99,
        "fullcodeline": "if (mCurrentCapabilities != NULL) {"
    },
    {
        "line": 21,
        "fullcodeline": "* pError = ErrorConnection;"
    },
    {
        "line": 27,
        "fullcodeline": "MCLog(\"no TLS %i\", r);"
    },
    {
        "line": 28,
        "fullcodeline": "* pError = ErrorTLSNotAvailable;"
    },
    {
        "line": 34,
        "fullcodeline": "* pError = ErrorCertificate;"
    },
    {
        "line": 44,
        "fullcodeline": "MCLog(\"connect error %i\", r);"
    },
    {
        "line": 45,
        "fullcodeline": "* pError = ErrorConnection;"
    },
    {
        "line": 51,
        "fullcodeline": "* pError = ErrorCertificate;"
    },
    {
        "line": 62,
        "fullcodeline": "MCLog(\"connect error %i\", r);"
    },
    {
        "line": 63,
        "fullcodeline": "* pError = ErrorConnection;"
    },
    {
        "line": 86,
        "fullcodeline": "LOCK();"
    },
    {
        "line": 87,
        "fullcodeline": "mIdleEnabled = true;"
    },
    {
        "line": 88,
        "fullcodeline": "UNLOCK();"
    },
    {
        "line": 89,
        "fullcodeline": "mNamespaceEnabled = true;"
    },
    {
        "line": 102,
        "fullcodeline": "IndexSet *capabilities = capability(pError);"
    },
    {
        "line": 103,
        "fullcodeline": "if (* pError != ErrorNone) {"
    },
    {
        "line": 104,
        "fullcodeline": "MCLog(\"capabilities failed\");"
    },
    {
        "line": 107,
        "fullcodeline": "MC_SAFE_REPLACE_RETAIN(IndexSet, mCurrentCapabilities, capabilities);"
    }
]