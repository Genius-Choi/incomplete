[
    {
        "line": 2,
        "fullcodeline": "@body_read_start = Process.clock_gettime(Process::CLOCK_MONOTONIC, :millisecond)"
    },
    {
        "line": 11,
        "fullcodeline": "@read_header = false"
    },
    {
        "line": 13,
        "fullcodeline": "body = @parser.body"
    },
    {
        "line": 15,
        "fullcodeline": "te = @env[TRANSFER_ENCODING2]"
    },
    {
        "line": 31,
        "fullcodeline": "cl = @env[CONTENT_LENGTH]"
    },
    {
        "line": 40,
        "fullcodeline": "remain = cl.to_i - body.bytesize"
    },
    {
        "line": 4,
        "fullcodeline": "if @env[HTTP_EXPECT] == CONTINUE"
    },
    {
        "line": 33,
        "fullcodeline": "unless cl"
    },
    {
        "line": 42,
        "fullcodeline": "if remain <= 0"
    },
    {
        "line": 49,
        "fullcodeline": "if remain > MAX_BODY"
    },
    {
        "line": 7,
        "fullcodeline": "@io << HTTP_11_100"
    },
    {
        "line": 50,
        "fullcodeline": "@body = Tempfile.new(Const::PUMA_TMP_BASE)"
    },
    {
        "line": 56,
        "fullcodeline": "@body = StringIO.new body[0,0]"
    },
    {
        "line": 59,
        "fullcodeline": "@body.write body"
    },
    {
        "line": 8,
        "fullcodeline": "@io.flush"
    },
    {
        "line": 18,
        "fullcodeline": "if te.include?(\",\")"
    },
    {
        "line": 34,
        "fullcodeline": "@buffer = body.empty? ? nil : body"
    },
    {
        "line": 43,
        "fullcodeline": "@body = StringIO.new(body)"
    },
    {
        "line": 24,
        "fullcodeline": "elsif CHUNKED.casecmp(te) == 0"
    },
    {
        "line": 19,
        "fullcodeline": "te.split(\",\").each do |part|"
    },
    {
        "line": 25,
        "fullcodeline": "return setup_chunked_body(body)"
    }
]