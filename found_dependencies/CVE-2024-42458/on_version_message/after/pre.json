[
    {
        "line": 3,
        "fullcodeline": "struct nvnc* server = client->server;"
    },
    {
        "line": 8,
        "fullcodeline": "char version_string[13];"
    },
    {
        "line": 9,
        "fullcodeline": "memcpy(version_string, client->msg_buffer + client->buffer_index, 12);"
    },
    {
        "line": 10,
        "fullcodeline": "version_string[12] = '\\0';"
    },
    {
        "line": 15,
        "fullcodeline": "uint8_t buf[sizeof(struct rfb_security_types_msg) +"
    },
    {
        "line": 17,
        "fullcodeline": "struct rfb_security_types_msg* security ="
    },
    {
        "line": 20,
        "fullcodeline": "init_security_types(server);"
    },
    {
        "line": 22,
        "fullcodeline": "security->n = server->n_security_types;"
    },
    {
        "line": 30,
        "fullcodeline": "client->state = VNC_CLIENT_STATE_WAITING_FOR_SECURITY;"
    },
    {
        "line": 5,
        "fullcodeline": "if (client->buffer_len - client->buffer_index < 12)"
    },
    {
        "line": 23,
        "fullcodeline": "for (int i = 0; i < server->n_security_types; ++i) {"
    },
    {
        "line": 12,
        "fullcodeline": "if (strcmp(RFB_VERSION_MESSAGE, version_string) != 0)"
    },
    {
        "line": 13,
        "fullcodeline": "return handle_unsupported_version(client);"
    }
]