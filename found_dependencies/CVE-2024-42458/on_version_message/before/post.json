[
    {
        "line": 3,
        "fullcodeline": "struct nvnc* server = client->server;"
    },
    {
        "line": 8,
        "fullcodeline": "char version_string[13];"
    },
    {
        "line": 9,
        "fullcodeline": "memcpy(version_string, client->msg_buffer + client->buffer_index, 12);"
    },
    {
        "line": 10,
        "fullcodeline": "version_string[12] = '\\0';"
    },
    {
        "line": 15,
        "fullcodeline": "uint8_t buf[sizeof(struct rfb_security_types_msg) +"
    },
    {
        "line": 17,
        "fullcodeline": "struct rfb_security_types_msg* security ="
    },
    {
        "line": 20,
        "fullcodeline": "security->n = 0;"
    },
    {
        "line": 47,
        "fullcodeline": "stream_write(client->net_stream, security, sizeof(*security) +"
    },
    {
        "line": 50,
        "fullcodeline": "client->state = VNC_CLIENT_STATE_WAITING_FOR_SECURITY;"
    },
    {
        "line": 5,
        "fullcodeline": "if (client->buffer_len - client->buffer_index < 12)"
    },
    {
        "line": 12,
        "fullcodeline": "if (strcmp(RFB_VERSION_MESSAGE, version_string) != 0)"
    },
    {
        "line": 18,
        "fullcodeline": "(struct rfb_security_types_msg*)buf;"
    },
    {
        "line": 21,
        "fullcodeline": "if (server->auth_flags & NVNC_AUTH_REQUIRE_AUTH) {"
    },
    {
        "line": 43,
        "fullcodeline": "if (security->n == 0) {"
    },
    {
        "line": 22,
        "fullcodeline": "assert(server->auth_fn);"
    },
    {
        "line": 44,
        "fullcodeline": "nvnc_log(NVNC_LOG_PANIC, \"Failed to satisfy requested security constraints\");"
    },
    {
        "line": 13,
        "fullcodeline": "return handle_unsupported_version(client);"
    },
    {
        "line": 39,
        "fullcodeline": "security->n = 1;"
    },
    {
        "line": 40,
        "fullcodeline": "security->types[0] = RFB_SECURITY_TYPE_NONE;"
    }
]