[
    {
        "line": 3,
        "fullcodeline": "struct task_io_accounting acct = task->ioac;"
    },
    {
        "line": 6,
        "fullcodeline": "if (whole && lock_task_sighand(task, &flags)) {"
    },
    {
        "line": 15,
        "fullcodeline": "return sprintf(buffer,"
    },
    {
        "line": 7,
        "fullcodeline": "struct task_struct *t = task;"
    },
    {
        "line": 9,
        "fullcodeline": "task_io_accounting_add(&acct, &task->signal->ioac);"
    },
    {
        "line": 10,
        "fullcodeline": "while_each_thread(task, t)"
    },
    {
        "line": 11,
        "fullcodeline": "task_io_accounting_add(&acct, &t->ioac);"
    },
    {
        "line": 13,
        "fullcodeline": "unlock_task_sighand(task, &flags);"
    },
    {
        "line": 23,
        "fullcodeline": "(unsigned long long)acct.rchar,"
    },
    {
        "line": 24,
        "fullcodeline": "(unsigned long long)acct.wchar,"
    },
    {
        "line": 25,
        "fullcodeline": "(unsigned long long)acct.syscr,"
    },
    {
        "line": 26,
        "fullcodeline": "(unsigned long long)acct.syscw,"
    },
    {
        "line": 27,
        "fullcodeline": "(unsigned long long)acct.read_bytes,"
    },
    {
        "line": 28,
        "fullcodeline": "(unsigned long long)acct.write_bytes,"
    },
    {
        "line": 29,
        "fullcodeline": "(unsigned long long)acct.cancelled_write_bytes);"
    }
]