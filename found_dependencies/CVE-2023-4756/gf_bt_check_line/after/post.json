[
    {
        "line": 4,
        "fullcodeline": "while (parser->line_pos < parser->line_size) {"
    },
    {
        "line": 20,
        "fullcodeline": "if (parser->line_pos < parser->line_size) {"
    },
    {
        "line": 29,
        "fullcodeline": "if (parser->line_size == parser->line_pos) {"
    },
    {
        "line": 280,
        "fullcodeline": "if (!parser->line_size) {"
    },
    {
        "line": 37,
        "fullcodeline": "parser->line_start_pos = (s32) gf_gztell(parser->gz_in);"
    },
    {
        "line": 38,
        "fullcodeline": "parser->line_buffer[0] = 0;"
    },
    {
        "line": 146,
        "fullcodeline": "parser->line_size = (u32) strlen(parser->line_buffer);"
    },
    {
        "line": 147,
        "fullcodeline": "parser->line_pos = 0;"
    },
    {
        "line": 148,
        "fullcodeline": "parser->line++;"
    },
    {
        "line": 21,
        "fullcodeline": "if (parser->line_buffer[parser->line_pos]=='#') {"
    },
    {
        "line": 31,
        "fullcodeline": "if (!parser->gz_in) {"
    },
    {
        "line": 151,
        "fullcodeline": "u32 pos = (u32) gf_gztell(parser->gz_in);"
    },
    {
        "line": 158,
        "fullcodeline": "while ((parser->line_buffer[parser->line_pos]==' ') || (parser->line_buffer[parser->line_pos]=='\\t'))"
    },
    {
        "line": 159,
        "fullcodeline": "parser->line_pos++;"
    },
    {
        "line": 160,
        "fullcodeline": "if ( (parser->line_buffer[parser->line_pos]=='#')"
    },
    {
        "line": 257,
        "fullcodeline": "if (parser->line_pos < parser->line_size) {"
    },
    {
        "line": 281,
        "fullcodeline": "if (!gf_gzeof(parser->gz_in))"
    },
    {
        "line": 10,
        "fullcodeline": "parser->line_pos++;"
    },
    {
        "line": 13,
        "fullcodeline": "parser->line_pos = parser->line_size;"
    },
    {
        "line": 22,
        "fullcodeline": "parser->line_size = parser->line_pos;"
    },
    {
        "line": 32,
        "fullcodeline": "parser->done = 1;"
    },
    {
        "line": 42,
        "fullcodeline": "unsigned short l[BT_LINE_SIZE];"
    },
    {
        "line": 43,
        "fullcodeline": "unsigned short *dst = l;"
    },
    {
        "line": 44,
        "fullcodeline": "Bool is_ret = 0;"
    },
    {
        "line": 46,
        "fullcodeline": "u32 go = BT_LINE_SIZE - 1;"
    },
    {
        "line": 47,
        "fullcodeline": "last_space_pos = last_space_pos_stream = 0;"
    },
    {
        "line": 85,
        "fullcodeline": "*dst = 0;"
    },
    {
        "line": 98,
        "fullcodeline": "dst = l;"
    },
    {
        "line": 99,
        "fullcodeline": "gf_utf8_wcstombs(parser->line_buffer, BT_LINE_SIZE, (const unsigned short **) &dst);"
    },
    {
        "line": 138,
        "fullcodeline": "u32 len = (u32) strlen(parser->line_buffer);"
    },
    {
        "line": 140,
        "fullcodeline": "c = parser->line_buffer[len-1];"
    },
    {
        "line": 142,
        "fullcodeline": "parser->line_buffer[len-1] = 0;"
    },
    {
        "line": 152,
        "fullcodeline": "if (pos>=parser->file_pos) {"
    },
    {
        "line": 161,
        "fullcodeline": "|| ( (parser->line_buffer[parser->line_pos]=='/') && (parser->line_buffer[parser->line_pos+1]=='/')) ) {"
    },
    {
        "line": 259,
        "fullcodeline": "count = gf_list_count(parser->def_symbols);"
    },
    {
        "line": 287,
        "fullcodeline": "else if (!parser->done && (parser->line_size == parser->line_pos))"
    },
    {
        "line": 48,
        "fullcodeline": "while (go && !gf_gzeof(parser->gz_in) ) {"
    },
    {
        "line": 87,
        "fullcodeline": "if (!go) {"
    },
    {
        "line": 93,
        "fullcodeline": "if (l[0]==0xFFFF) {"
    },
    {
        "line": 101,
        "fullcodeline": "if (!strlen(parser->line_buffer) && gf_gzeof(parser->gz_in)) {"
    },
    {
        "line": 139,
        "fullcodeline": "if (!len) break;"
    },
    {
        "line": 141,
        "fullcodeline": "if (!strchr(\"\\n\\r\\t\", c)) break;"
    },
    {
        "line": 153,
        "fullcodeline": "parser->file_pos = pos;"
    },
    {
        "line": 163,
        "fullcodeline": "if (parser->line==1) {"
    },
    {
        "line": 181,
        "fullcodeline": "if (!strnicmp(parser->line_buffer+parser->line_pos, \"#define \", 8) && !parser->block_comment) {"
    },
    {
        "line": 285,
        "fullcodeline": "parser->done = 1;"
    },
    {
        "line": 24,
        "fullcodeline": "else if ((parser->line_buffer[parser->line_pos]=='/') && (parser->line_buffer[parser->line_pos+1]=='/') ) {"
    },
    {
        "line": 49,
        "fullcodeline": "c1 = gf_gzgetc(parser->gz_in);"
    },
    {
        "line": 50,
        "fullcodeline": "c2 = gf_gzgetc(parser->gz_in);"
    },
    {
        "line": 66,
        "fullcodeline": "*dst = wchar;"
    },
    {
        "line": 81,
        "fullcodeline": "dst++;"
    },
    {
        "line": 82,
        "fullcodeline": "go--;"
    },
    {
        "line": 88,
        "fullcodeline": "u32 rew_pos = (u32)  (gf_gztell(parser->gz_in) - 2*(dst - &l[last_space_pos]) );"
    },
    {
        "line": 89,
        "fullcodeline": "gf_gzseek(parser->gz_in, rew_pos, SEEK_SET);"
    },
    {
        "line": 90,
        "fullcodeline": "l[last_space_pos+1] = 0;"
    },
    {
        "line": 94,
        "fullcodeline": "parser->done = 1;"
    },
    {
        "line": 102,
        "fullcodeline": "parser->done = 1;"
    },
    {
        "line": 106,
        "fullcodeline": "if ((gf_gzgets(parser->gz_in, parser->line_buffer, BT_LINE_SIZE) == NULL)"
    },
    {
        "line": 112,
        "fullcodeline": "if (1 + strlen(parser->line_buffer) == BT_LINE_SIZE) {"
    },
    {
        "line": 154,
        "fullcodeline": "if (parser->line>1) gf_set_progress(\"BT Parsing\", pos, parser->file_size);"
    },
    {
        "line": 183,
        "fullcodeline": "parser->line_pos+=8;"
    },
    {
        "line": 184,
        "fullcodeline": "buf = parser->line_buffer+parser->line_pos;"
    },
    {
        "line": 185,
        "fullcodeline": "sep = strchr(buf, ' ');"
    },
    {
        "line": 261,
        "fullcodeline": "Bool found = 0;"
    },
    {
        "line": 25,
        "fullcodeline": "parser->line_size = parser->line_pos;"
    },
    {
        "line": 52,
        "fullcodeline": "if (parser->unicode_type==2) {"
    },
    {
        "line": 67,
        "fullcodeline": "if (wchar=='\\r') is_ret = 1;"
    },
    {
        "line": 77,
        "fullcodeline": "if (wchar==' ') {"
    },
    {
        "line": 107,
        "fullcodeline": "|| (!strlen(parser->line_buffer) && gf_gzeof(parser->gz_in))) {"
    },
    {
        "line": 108,
        "fullcodeline": "parser->done = 1;"
    },
    {
        "line": 114,
        "fullcodeline": "rew = 0;"
    },
    {
        "line": 115,
        "fullcodeline": "go = 1;"
    },
    {
        "line": 130,
        "fullcodeline": "pos = (u32) gf_gztell(parser->gz_in);"
    },
    {
        "line": 131,
        "fullcodeline": "gf_gzseek(parser->gz_in, pos-rew, SEEK_SET);"
    },
    {
        "line": 164,
        "fullcodeline": "if (strstr(parser->line_buffer, \"VRML\")) {"
    },
    {
        "line": 186,
        "fullcodeline": "if (sep && (sep[1]!='\\n') ) {"
    },
    {
        "line": 262,
        "fullcodeline": "for (i=0; i<count; i++) {"
    },
    {
        "line": 276,
        "fullcodeline": "if (!found) break;"
    },
    {
        "line": 79,
        "fullcodeline": "last_space_pos = (u32) (dst - l);"
    },
    {
        "line": 188,
        "fullcodeline": "GF_SAFEALLOC(def, BTDefSymbol);"
    },
    {
        "line": 193,
        "fullcodeline": "sep[0] = 0;"
    },
    {
        "line": 194,
        "fullcodeline": "def->name = gf_strdup(buf);"
    },
    {
        "line": 195,
        "fullcodeline": "sep[0] = ' ';"
    },
    {
        "line": 196,
        "fullcodeline": "buf = sep+1;"
    },
    {
        "line": 198,
        "fullcodeline": "def->value = gf_strdup(buf);"
    },
    {
        "line": 199,
        "fullcodeline": "gf_list_add(parser->def_symbols, def);"
    },
    {
        "line": 202,
        "fullcodeline": "else if (!strnicmp(parser->line_buffer+parser->line_pos, \"#if \", 4)) {"
    },
    {
        "line": 264,
        "fullcodeline": "BTDefSymbol *def = (BTDefSymbol *)gf_list_get(parser->def_symbols, i);"
    },
    {
        "line": 265,
        "fullcodeline": "char *start = strstr(parser->line_buffer, def->name);"
    },
    {
        "line": 267,
        "fullcodeline": "symb_len = (u32) strlen(def->name);"
    },
    {
        "line": 269,
        "fullcodeline": "val_len = (u32) strlen(def->value);"
    },
    {
        "line": 270,
        "fullcodeline": "copy_len = (u32) strlen(start + symb_len) + 1;"
    },
    {
        "line": 271,
        "fullcodeline": "memmove(start + val_len, start + symb_len, sizeof(char)*copy_len);"
    },
    {
        "line": 272,
        "fullcodeline": "memcpy(start, def->value, sizeof(char)*val_len);"
    },
    {
        "line": 273,
        "fullcodeline": "parser->line_size = (u32) strlen(parser->line_buffer);"
    },
    {
        "line": 274,
        "fullcodeline": "found = 1;"
    },
    {
        "line": 60,
        "fullcodeline": "wchar = c1;"
    },
    {
        "line": 165,
        "fullcodeline": "if (strstr(parser->line_buffer, \"VRML V2.0\")) parser->is_wrl = 1;"
    },
    {
        "line": 189,
        "fullcodeline": "if (!def) {"
    },
    {
        "line": 197,
        "fullcodeline": "while (strchr(\" \\t\", buf[0])) buf++;"
    },
    {
        "line": 203,
        "fullcodeline": "u32 len = 0;"
    },
    {
        "line": 204,
        "fullcodeline": "parser->line_pos+=4;"
    },
    {
        "line": 266,
        "fullcodeline": "if (!start) continue;"
    },
    {
        "line": 268,
        "fullcodeline": "if (!strchr(\" \\n\\r\\t,[]{}\\'\\\"\", start[symb_len])) continue;"
    },
    {
        "line": 54,
        "fullcodeline": "wchar = c2;"
    },
    {
        "line": 55,
        "fullcodeline": "wchar <<=8;"
    },
    {
        "line": 56,
        "fullcodeline": "wchar |= c1;"
    },
    {
        "line": 68,
        "fullcodeline": "else if (wchar=='\\n') {"
    },
    {
        "line": 173,
        "fullcodeline": "else if (strstr(parser->line_buffer, \"X3D\")) {"
    },
    {
        "line": 190,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_PARSER, (\"Fail to allocate DEF node\\n\"));"
    },
    {
        "line": 58,
        "fullcodeline": "else wchar = c1;"
    },
    {
        "line": 62,
        "fullcodeline": "wchar <<= 8;"
    },
    {
        "line": 63,
        "fullcodeline": "wchar |= c2;"
    },
    {
        "line": 69,
        "fullcodeline": "dst++;"
    },
    {
        "line": 117,
        "fullcodeline": "switch (parser->line_buffer[strlen(parser->line_buffer)-1]) {"
    },
    {
        "line": 122,
        "fullcodeline": "go = 0;"
    },
    {
        "line": 125,
        "fullcodeline": "parser->line_buffer[strlen(parser->line_buffer)-1] = 0;"
    },
    {
        "line": 126,
        "fullcodeline": "rew++;"
    },
    {
        "line": 209,
        "fullcodeline": "len++;"
    },
    {
        "line": 233,
        "fullcodeline": "else if (!strnicmp(parser->line_buffer+parser->line_pos, \"#endif\", 6)) {"
    },
    {
        "line": 167,
        "fullcodeline": "else if (strstr(parser->line_buffer, \"VRML2.0\")) parser->is_wrl = 1;"
    },
    {
        "line": 174,
        "fullcodeline": "if (strstr(parser->line_buffer, \"X3D V3.0\")) parser->is_wrl = 2;"
    },
    {
        "line": 206,
        "fullcodeline": "if (parser->line_pos+(s32)len==parser->line_size) break;"
    },
    {
        "line": 207,
        "fullcodeline": "if (strchr(\" \\n\\t\", parser->line_buffer[parser->line_pos+len]))"
    },
    {
        "line": 212,
        "fullcodeline": "if (len==1) {"
    },
    {
        "line": 73,
        "fullcodeline": "u32 fpos = (u32) gf_gztell(parser->gz_in);"
    },
    {
        "line": 74,
        "fullcodeline": "gf_gzseek(parser->gz_in, fpos-2, SEEK_SET);"
    },
    {
        "line": 169,
        "fullcodeline": "gf_bt_report(parser, GF_NOT_SUPPORTED, \"%s: VRML Version Not Supported\", parser->line_buffer);"
    },
    {
        "line": 176,
        "fullcodeline": "gf_bt_report(parser, GF_NOT_SUPPORTED, \"%s: X3D Version Not Supported\", parser->line_buffer);"
    },
    {
        "line": 213,
        "fullcodeline": "if (!strnicmp(parser->line_buffer+parser->line_pos, \"0\", 1)) {"
    },
    {
        "line": 218,
        "fullcodeline": "char *keyWord = NULL;"
    },
    {
        "line": 219,
        "fullcodeline": "count = gf_list_count(parser->def_symbols);"
    },
    {
        "line": 234,
        "fullcodeline": "if (parser->block_comment) parser->block_comment--;"
    },
    {
        "line": 236,
        "fullcodeline": "else if (!strnicmp(parser->line_buffer+parser->line_pos, \"#else\", 5)) {"
    },
    {
        "line": 214,
        "fullcodeline": "parser->block_comment++;"
    },
    {
        "line": 220,
        "fullcodeline": "for (i=0; i<count; i++) {"
    },
    {
        "line": 227,
        "fullcodeline": "if (keyWord && !strcmp(keyWord, \"0\")) {"
    },
    {
        "line": 221,
        "fullcodeline": "BTDefSymbol *def = (BTDefSymbol *)gf_list_get(parser->def_symbols, i);"
    },
    {
        "line": 228,
        "fullcodeline": "parser->block_comment++;"
    },
    {
        "line": 222,
        "fullcodeline": "if (!strnicmp(parser->line_buffer+parser->line_pos, def->name, len)) {"
    },
    {
        "line": 238,
        "fullcodeline": "parser->block_comment--;"
    },
    {
        "line": 242,
        "fullcodeline": "else if (!strnicmp(parser->line_buffer+parser->line_pos, \"#size\", 5)) {"
    },
    {
        "line": 223,
        "fullcodeline": "keyWord = def->value;"
    },
    {
        "line": 240,
        "fullcodeline": "parser->block_comment++;"
    },
    {
        "line": 244,
        "fullcodeline": "parser->line_pos+=6;"
    },
    {
        "line": 245,
        "fullcodeline": "buf = parser->line_buffer+parser->line_pos;"
    },
    {
        "line": 248,
        "fullcodeline": "sscanf(buf, \"%dx%d\", &parser->def_w, &parser->def_h);"
    },
    {
        "line": 246,
        "fullcodeline": "while (strchr(\" \\t\", buf[0]))"
    },
    {
        "line": 247,
        "fullcodeline": "buf++;"
    }
]