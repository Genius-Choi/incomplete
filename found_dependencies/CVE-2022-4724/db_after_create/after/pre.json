[
    {
        "line": 10,
        "fullcodeline": "_column_add(connection, RepoObject.__table__.c.Encoding)"
    },
    {
        "line": 11,
        "fullcodeline": "_column_add(connection, RepoObject.__table__.c.keepdays)"
    },
    {
        "line": 20,
        "fullcodeline": "_column_add(connection, UserObject.__table__.c.fullname)"
    },
    {
        "line": 23,
        "fullcodeline": "_column_add(connection, UserObject.__table__.c.mfa)"
    },
    {
        "line": 35,
        "fullcodeline": "result = RepoObject.query.all()"
    },
    {
        "line": 44,
        "fullcodeline": "result = RepoObject.query.order_by(RepoObject.userid, RepoObject.repopath).all()"
    },
    {
        "line": 45,
        "fullcodeline": "prev_repo = (None, None)"
    },
    {
        "line": 6,
        "fullcodeline": "if getattr(connection, '_transaction', None):"
    },
    {
        "line": 15,
        "fullcodeline": "if not _column_exists(connection, UserObject.__table__.c.role):"
    },
    {
        "line": 26,
        "fullcodeline": "if not _column_exists(connection, SessionObject.__table__.c.Number):"
    },
    {
        "line": 30,
        "fullcodeline": "if getattr(connection, '_transaction', None):"
    },
    {
        "line": 36,
        "fullcodeline": "for row in result:"
    },
    {
        "line": 46,
        "fullcodeline": "for row in result:"
    },
    {
        "line": 53,
        "fullcodeline": "if not _index_exists(connection, 'user_username_index'):"
    },
    {
        "line": 72,
        "fullcodeline": "if not _index_exists(connection, 'sshkey_fingerprint_index'):"
    },
    {
        "line": 16,
        "fullcodeline": "_column_add(connection, UserObject.__table__.c.role)"
    },
    {
        "line": 54,
        "fullcodeline": "duplicate_users = ("
    },
    {
        "line": 73,
        "fullcodeline": "duplicate_sshkeys = ("
    },
    {
        "line": 7,
        "fullcodeline": "connection._transaction.commit()"
    },
    {
        "line": 17,
        "fullcodeline": "UserObject.query.filter(UserObject._is_admin == 1).update({UserObject.role: UserObject.ADMIN_ROLE})"
    },
    {
        "line": 27,
        "fullcodeline": "SessionObject.__table__.drop()"
    },
    {
        "line": 28,
        "fullcodeline": "SessionObject.__table__.create()"
    },
    {
        "line": 31,
        "fullcodeline": "connection._transaction.commit()"
    },
    {
        "line": 37,
        "fullcodeline": "if row.repopath.startswith('/') or row.repopath.endswith('/'):"
    },
    {
        "line": 40,
        "fullcodeline": "if row.repopath == '.':"
    },
    {
        "line": 47,
        "fullcodeline": "if prev_repo[0] == row.userid and (prev_repo[1] == row.repopath or row.repopath.startswith(prev_repo[1] + '/')):"
    },
    {
        "line": 55,
        "fullcodeline": "UserObject.query.with_entities(func.lower(UserObject.username))"
    },
    {
        "line": 60,
        "fullcodeline": "user_username_index.create()"
    },
    {
        "line": 74,
        "fullcodeline": "SshKey.query.with_entities(SshKey.fingerprint)"
    },
    {
        "line": 79,
        "fullcodeline": "sshkey_fingerprint_index.create()"
    },
    {
        "line": 38,
        "fullcodeline": "row.repopath = row.repopath.strip('/')"
    },
    {
        "line": 39,
        "fullcodeline": "row.commit()"
    },
    {
        "line": 41,
        "fullcodeline": "row.repopath = ''"
    },
    {
        "line": 42,
        "fullcodeline": "row.commit()"
    },
    {
        "line": 48,
        "fullcodeline": "row.delete()"
    },
    {
        "line": 50,
        "fullcodeline": "prev_repo = (row.userid, row.repopath)"
    },
    {
        "line": 62,
        "fullcodeline": "msg = ("
    },
    {
        "line": 67,
        "fullcodeline": "logger.error(msg)"
    },
    {
        "line": 68,
        "fullcodeline": "print(msg, file=sys.stderr)"
    },
    {
        "line": 69,
        "fullcodeline": "raise SystemExit(12)"
    },
    {
        "line": 81,
        "fullcodeline": "msg = ("
    },
    {
        "line": 86,
        "fullcodeline": "logger.error(msg)"
    },
    {
        "line": 57,
        "fullcodeline": ".having(func.count(UserObject.username) > 1)"
    },
    {
        "line": 76,
        "fullcodeline": ".having(func.count(SshKey.fingerprint) > 1)"
    },
    {
        "line": 88,
        "fullcodeline": "raise SystemExit(12)"
    },
    {
        "line": 63,
        "fullcodeline": "'Failure to upgrade your database to make Username case insensitive. '"
    },
    {
        "line": 82,
        "fullcodeline": "'Failure to upgrade your database to make SSH Keys unique. '"
    },
    {
        "line": 56,
        "fullcodeline": ".group_by(func.lower(UserObject.username))"
    },
    {
        "line": 65,
        "fullcodeline": "'%s' % '\\n'.join([str(k) for k in duplicate_users]),"
    },
    {
        "line": 84,
        "fullcodeline": "'%s' % '\\n'.join([str(k) for k in duplicate_sshkeys]),"
    }
]