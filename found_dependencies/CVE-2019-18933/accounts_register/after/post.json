[
    {
        "line": 3,
        "fullcodeline": "confirmation = Confirmation.objects.get(confirmation_key=key)"
    },
    {
        "line": 4,
        "fullcodeline": "prereg_user = confirmation.content_object"
    },
    {
        "line": 5,
        "fullcodeline": "email = prereg_user.email"
    },
    {
        "line": 6,
        "fullcodeline": "realm_creation = prereg_user.realm_creation"
    },
    {
        "line": 7,
        "fullcodeline": "password_required = prereg_user.password_required"
    },
    {
        "line": 8,
        "fullcodeline": "is_realm_admin = prereg_user.invited_as == PreregistrationUser.INVITE_AS['REALM_ADMIN'] or realm_creation"
    },
    {
        "line": 9,
        "fullcodeline": "is_guest = prereg_user.invited_as == PreregistrationUser.INVITE_AS['GUEST_USER']"
    },
    {
        "line": 48,
        "fullcodeline": "name_validated = False"
    },
    {
        "line": 49,
        "fullcodeline": "full_name = None"
    },
    {
        "line": 50,
        "fullcodeline": "require_ldap_password = False"
    },
    {
        "line": 130,
        "fullcodeline": "if not (password_auth_enabled(realm) and password_required):"
    },
    {
        "line": 133,
        "fullcodeline": "if form.is_valid():"
    },
    {
        "line": 270,
        "fullcodeline": "return render("
    },
    {
        "line": 12,
        "fullcodeline": "validators.validate_email(email)"
    },
    {
        "line": 18,
        "fullcodeline": "realm = None"
    },
    {
        "line": 23,
        "fullcodeline": "realm = prereg_user.realm"
    },
    {
        "line": 52,
        "fullcodeline": "if request.POST.get('from_confirmation'):"
    },
    {
        "line": 118,
        "fullcodeline": "postdata = request.POST.copy()"
    },
    {
        "line": 128,
        "fullcodeline": "form = RegistrationForm(postdata, realm_creation=realm_creation)"
    },
    {
        "line": 131,
        "fullcodeline": "form['password'].field.required = False"
    },
    {
        "line": 149,
        "fullcodeline": "assert(realm is not None)"
    },
    {
        "line": 152,
        "fullcodeline": "short_name = email_to_username(email)"
    },
    {
        "line": 153,
        "fullcodeline": "default_stream_group_names = request.POST.getlist('default_stream_group')"
    },
    {
        "line": 154,
        "fullcodeline": "default_stream_groups = lookup_default_stream_groups(default_stream_group_names, realm)"
    },
    {
        "line": 156,
        "fullcodeline": "timezone = \"\""
    },
    {
        "line": 173,
        "fullcodeline": "user_profile = None  # type: Optional[UserProfile]"
    },
    {
        "line": 174,
        "fullcodeline": "return_data = {}  # type: Dict[str, bool]"
    },
    {
        "line": 258,
        "fullcodeline": "auth_result = authenticate(username=user_profile.delivery_email,"
    },
    {
        "line": 20,
        "fullcodeline": "if get_subdomain(request) != prereg_user.realm.string_id:"
    },
    {
        "line": 57,
        "fullcodeline": "if realm is not None and realm.is_zephyr_mirror_realm:"
    },
    {
        "line": 119,
        "fullcodeline": "if name_changes_disabled(realm):"
    },
    {
        "line": 134,
        "fullcodeline": "if password_auth_enabled(realm) and form['password'].field.required:"
    },
    {
        "line": 157,
        "fullcodeline": "if 'timezone' in request.POST and request.POST['timezone'] in get_all_timezones():"
    },
    {
        "line": 160,
        "fullcodeline": "if 'source_realm' in request.POST and request.POST[\"source_realm\"] != \"on\":"
    },
    {
        "line": 165,
        "fullcodeline": "if not realm_creation:"
    },
    {
        "line": 175,
        "fullcodeline": "if ldap_auth_enabled(realm):"
    },
    {
        "line": 226,
        "fullcodeline": "if existing_user_profile is not None and existing_user_profile.is_mirror_dummy:"
    },
    {
        "line": 235,
        "fullcodeline": "if user_profile is None:"
    },
    {
        "line": 262,
        "fullcodeline": "if return_data.get('invalid_subdomain'):"
    },
    {
        "line": 268,
        "fullcodeline": "return login_and_go_to_home(request, auth_result)"
    },
    {
        "line": 273,
        "fullcodeline": "context={'form': form,"
    },
    {
        "line": 26,
        "fullcodeline": "email_allowed_for_realm(email, realm)"
    },
    {
        "line": 43,
        "fullcodeline": "validate_email_for_realm(realm, email)"
    },
    {
        "line": 62,
        "fullcodeline": "hesiod_name = compute_mit_user_fullname(email)"
    },
    {
        "line": 63,
        "fullcodeline": "form = RegistrationForm("
    },
    {
        "line": 66,
        "fullcodeline": "name_validated = True"
    },
    {
        "line": 142,
        "fullcodeline": "password = None"
    },
    {
        "line": 147,
        "fullcodeline": "realm = do_create_realm(string_id, realm_name)"
    },
    {
        "line": 148,
        "fullcodeline": "setup_realm_internal_bots(realm)"
    },
    {
        "line": 158,
        "fullcodeline": "timezone = request.POST['timezone']"
    },
    {
        "line": 161,
        "fullcodeline": "source_profile = get_source_profile(email, request.POST[\"source_realm\"])"
    },
    {
        "line": 163,
        "fullcodeline": "source_profile = None"
    },
    {
        "line": 171,
        "fullcodeline": "existing_user_profile = None"
    },
    {
        "line": 191,
        "fullcodeline": "user_profile = authenticate(request,"
    },
    {
        "line": 227,
        "fullcodeline": "user_profile = existing_user_profile"
    },
    {
        "line": 228,
        "fullcodeline": "do_activate_user(user_profile)"
    },
    {
        "line": 229,
        "fullcodeline": "do_change_password(user_profile, password)"
    },
    {
        "line": 230,
        "fullcodeline": "do_change_full_name(user_profile, full_name, user_profile)"
    },
    {
        "line": 231,
        "fullcodeline": "do_set_user_display_setting(user_profile, 'timezone', timezone)"
    },
    {
        "line": 236,
        "fullcodeline": "user_profile = do_create_user(email, password, realm, full_name, short_name,"
    },
    {
        "line": 248,
        "fullcodeline": "bulk_add_subscriptions([realm.signup_notifications_stream], [user_profile])"
    },
    {
        "line": 249,
        "fullcodeline": "send_initial_realm_messages(realm)"
    },
    {
        "line": 264,
        "fullcodeline": "logging.error(\"Subdomain mismatch in registration %s: %s\" % ("
    },
    {
        "line": 277,
        "fullcodeline": "'lock_name': name_validated and name_changes_disabled(realm),"
    },
    {
        "line": 282,
        "fullcodeline": "'password_required': password_auth_enabled(realm) and password_required,"
    },
    {
        "line": 284,
        "fullcodeline": "'password_auth_enabled': password_auth_enabled(realm),"
    },
    {
        "line": 286,
        "fullcodeline": "'default_stream_groups': get_default_stream_groups(realm),"
    },
    {
        "line": 287,
        "fullcodeline": "'accounts': get_accounts_for_email(email),"
    },
    {
        "line": 290,
        "fullcodeline": "'MAX_PASSWORD_LENGTH': str(form.MAX_PASSWORD_LENGTH),"
    },
    {
        "line": 14,
        "fullcodeline": "return render(request, \"zerver/invalid_email.html\", context={\"invalid_email\": True})"
    },
    {
        "line": 21,
        "fullcodeline": "return render_confirmation_key_error("
    },
    {
        "line": 40,
        "fullcodeline": "return redirect_to_deactivation_notice()"
    },
    {
        "line": 197,
        "fullcodeline": "if user_profile is None:"
    },
    {
        "line": 254,
        "fullcodeline": "return redirect_and_log_into_subdomain(realm, full_name, email)"
    },
    {
        "line": 266,
        "fullcodeline": "return redirect('/')"
    },
    {
        "line": 276,
        "fullcodeline": "'full_name': request.session.get('authenticated_full_name', None),"
    },
    {
        "line": 56,
        "fullcodeline": "pass"
    },
    {
        "line": 124,
        "fullcodeline": "postdata.update({'full_name': request.session['authenticated_full_name']})"
    },
    {
        "line": 125,
        "fullcodeline": "name_validated = True"
    },
    {
        "line": 167,
        "fullcodeline": "existing_user_profile = get_user_by_delivery_email(email, realm)  # type: Optional[UserProfile]"
    },
    {
        "line": 28,
        "fullcodeline": "return render(request, \"zerver/invalid_email.html\","
    },
    {
        "line": 31,
        "fullcodeline": "return render(request, \"zerver/invalid_email.html\","
    },
    {
        "line": 34,
        "fullcodeline": "return render(request, \"zerver/invalid_email.html\","
    },
    {
        "line": 45,
        "fullcodeline": "return HttpResponseRedirect(reverse('django.contrib.auth.views.login') + '?email=' +"
    },
    {
        "line": 64,
        "fullcodeline": "initial={'full_name': hesiod_name if \"@\" not in hesiod_name else \"\"},"
    },
    {
        "line": 68,
        "fullcodeline": "for backend in get_backends():"
    },
    {
        "line": 198,
        "fullcodeline": "if return_data.get(\"no_matching_ldap_user\") and email_auth_enabled(realm):"
    },
    {
        "line": 218,
        "fullcodeline": "elif not realm_creation:"
    },
    {
        "line": 242,
        "fullcodeline": "newsletter_data={\"IP\": request.META['REMOTE_ADDR']},"
    },
    {
        "line": 127,
        "fullcodeline": "pass"
    },
    {
        "line": 169,
        "fullcodeline": "existing_user_profile = None"
    },
    {
        "line": 210,
        "fullcodeline": "pass"
    },
    {
        "line": 224,
        "fullcodeline": "pass"
    },
    {
        "line": 29,
        "fullcodeline": "context={\"realm_name\": realm.name, \"closed_domain\": True})"
    },
    {
        "line": 32,
        "fullcodeline": "context={\"realm_name\": realm.name, \"disposable_emails_not_allowed\": True})"
    },
    {
        "line": 35,
        "fullcodeline": "context={\"realm_name\": realm.name, \"email_contains_plus\": True})"
    },
    {
        "line": 110,
        "fullcodeline": "elif 'full_name' in request.POST:"
    },
    {
        "line": 216,
        "fullcodeline": "return HttpResponseRedirect(reverse('django.contrib.auth.views.login') + '?email=' +"
    },
    {
        "line": 220,
        "fullcodeline": "return login_and_go_to_home(request, user_profile)"
    },
    {
        "line": 46,
        "fullcodeline": "urllib.parse.quote_plus(email))"
    },
    {
        "line": 69,
        "fullcodeline": "if isinstance(backend, LDAPBackend):"
    },
    {
        "line": 103,
        "fullcodeline": "request.session['authenticated_full_name'] = prereg_user.full_name"
    },
    {
        "line": 104,
        "fullcodeline": "name_validated = True"
    },
    {
        "line": 105,
        "fullcodeline": "form = RegistrationForm({'full_name': prereg_user.full_name},"
    },
    {
        "line": 108,
        "fullcodeline": "form = RegistrationForm(initial={'full_name': prereg_user.full_name},"
    },
    {
        "line": 111,
        "fullcodeline": "form = RegistrationForm("
    },
    {
        "line": 116,
        "fullcodeline": "form = RegistrationForm(realm_creation=realm_creation)"
    },
    {
        "line": 77,
        "fullcodeline": "ldap_user = _LDAPUser(backend, ldap_username)"
    },
    {
        "line": 217,
        "fullcodeline": "urllib.parse.quote_plus(email))"
    },
    {
        "line": 71,
        "fullcodeline": "ldap_username = backend.django_to_ldap_username(email)"
    },
    {
        "line": 81,
        "fullcodeline": "request.session['authenticated_full_name'] = ldap_full_name"
    },
    {
        "line": 82,
        "fullcodeline": "name_validated = True"
    },
    {
        "line": 88,
        "fullcodeline": "form = RegistrationForm({'full_name': ldap_full_name},"
    },
    {
        "line": 96,
        "fullcodeline": "require_ldap_password = isinstance(backend, ZulipLDAPAuthBackend)"
    },
    {
        "line": 112,
        "fullcodeline": "initial={'full_name': request.POST.get('full_name')},"
    },
    {
        "line": 80,
        "fullcodeline": "ldap_full_name, _ = backend.get_mapped_name(ldap_user)"
    },
    {
        "line": 73,
        "fullcodeline": "logging.warning(\"New account email %s could not be found in LDAP\" % (email,))"
    },
    {
        "line": 74,
        "fullcodeline": "form = RegistrationForm(realm_creation=realm_creation)"
    }
]