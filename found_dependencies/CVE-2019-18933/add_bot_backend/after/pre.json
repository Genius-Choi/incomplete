[
    {
        "line": 15,
        "fullcodeline": "short_name = check_short_name(short_name_raw)"
    },
    {
        "line": 18,
        "fullcodeline": "short_name += \"-bot\""
    },
    {
        "line": 19,
        "fullcodeline": "full_name = check_full_name(full_name_raw)"
    },
    {
        "line": 25,
        "fullcodeline": "form = CreateUserForm({'full_name': full_name, 'email': email})"
    },
    {
        "line": 42,
        "fullcodeline": "check_bot_name_available("
    },
    {
        "line": 47,
        "fullcodeline": "check_bot_creation_policy(user_profile, bot_type)"
    },
    {
        "line": 48,
        "fullcodeline": "check_valid_bot_type(user_profile, bot_type)"
    },
    {
        "line": 49,
        "fullcodeline": "check_valid_interface_type(interface_type)"
    },
    {
        "line": 58,
        "fullcodeline": "default_sending_stream = None"
    },
    {
        "line": 63,
        "fullcodeline": "default_events_register_stream = None"
    },
    {
        "line": 71,
        "fullcodeline": "bot_profile = do_create_user(email=email, password=None,"
    },
    {
        "line": 99,
        "fullcodeline": "notify_created_bot(bot_profile)"
    },
    {
        "line": 101,
        "fullcodeline": "api_key = get_api_key(bot_profile)"
    },
    {
        "line": 103,
        "fullcodeline": "json_result = dict("
    },
    {
        "line": 16,
        "fullcodeline": "if bot_type != UserProfile.INCOMING_WEBHOOK_BOT:"
    },
    {
        "line": 27,
        "fullcodeline": "if bot_type == UserProfile.EMBEDDED_BOT:"
    },
    {
        "line": 59,
        "fullcodeline": "if default_sending_stream_name is not None:"
    },
    {
        "line": 64,
        "fullcodeline": "if default_events_register_stream_name is not None:"
    },
    {
        "line": 68,
        "fullcodeline": "if bot_type in (UserProfile.INCOMING_WEBHOOK_BOT, UserProfile.EMBEDDED_BOT) and service_name:"
    },
    {
        "line": 84,
        "fullcodeline": "if bot_type in (UserProfile.OUTGOING_WEBHOOK_BOT, UserProfile.EMBEDDED_BOT):"
    },
    {
        "line": 92,
        "fullcodeline": "if bot_type == UserProfile.INCOMING_WEBHOOK_BOT and service_name:"
    },
    {
        "line": 110,
        "fullcodeline": "return json_success(json_result)"
    },
    {
        "line": 17,
        "fullcodeline": "service_name = service_name or short_name"
    },
    {
        "line": 21,
        "fullcodeline": "email = '%s@%s' % (short_name, user_profile.realm.get_bot_domain())"
    },
    {
        "line": 33,
        "fullcodeline": "if not form.is_valid():"
    },
    {
        "line": 37,
        "fullcodeline": "get_user_by_delivery_email(email, user_profile.realm)"
    },
    {
        "line": 51,
        "fullcodeline": "if len(request.FILES) == 0:"
    },
    {
        "line": 52,
        "fullcodeline": "avatar_source = UserProfile.AVATAR_FROM_GRAVATAR"
    },
    {
        "line": 69,
        "fullcodeline": "check_valid_bot_config(bot_type, service_name, config_data)"
    },
    {
        "line": 80,
        "fullcodeline": "if len(request.FILES) == 1:"
    },
    {
        "line": 81,
        "fullcodeline": "user_file = list(request.FILES.values())[0]"
    },
    {
        "line": 82,
        "fullcodeline": "upload_avatar_image(user_file, user_profile, bot_profile)"
    },
    {
        "line": 86,
        "fullcodeline": "add_service(name=service_name,"
    },
    {
        "line": 93,
        "fullcodeline": "set_bot_config(bot_profile, \"integration_id\", service_name)"
    },
    {
        "line": 95,
        "fullcodeline": "if bot_type in (UserProfile.INCOMING_WEBHOOK_BOT, UserProfile.EMBEDDED_BOT):"
    },
    {
        "line": 105,
        "fullcodeline": "avatar_url=avatar_url(bot_profile),"
    },
    {
        "line": 106,
        "fullcodeline": "default_sending_stream=get_stream_name(bot_profile.default_sending_stream),"
    },
    {
        "line": 107,
        "fullcodeline": "default_events_register_stream=get_stream_name(bot_profile.default_events_register_stream),"
    },
    {
        "line": 30,
        "fullcodeline": "if service_name not in [bot.name for bot in EMBEDDED_BOTS]:"
    },
    {
        "line": 35,
        "fullcodeline": "return json_error(_('Bad name or username'))"
    },
    {
        "line": 38,
        "fullcodeline": "return json_error(_(\"Username already in use\"))"
    },
    {
        "line": 60,
        "fullcodeline": "(default_sending_stream, ignored_rec, ignored_sub) = access_stream_by_name("
    },
    {
        "line": 65,
        "fullcodeline": "(default_events_register_stream, ignored_rec, ignored_sub) = access_stream_by_name("
    },
    {
        "line": 85,
        "fullcodeline": "assert(isinstance(service_name, str))"
    },
    {
        "line": 96,
        "fullcodeline": "for key, value in config_data.items():"
    },
    {
        "line": 53,
        "fullcodeline": "elif len(request.FILES) != 1:"
    },
    {
        "line": 56,
        "fullcodeline": "avatar_source = UserProfile.AVATAR_FROM_USER"
    },
    {
        "line": 23,
        "fullcodeline": "return json_error(_(\"Can't create bots until FAKE_EMAIL_DOMAIN is correctly configured.\\n\""
    },
    {
        "line": 29,
        "fullcodeline": "return json_error(_(\"Embedded bots are not enabled.\"))"
    },
    {
        "line": 31,
        "fullcodeline": "return json_error(_(\"Invalid embedded bot name.\"))"
    },
    {
        "line": 54,
        "fullcodeline": "return json_error(_(\"You may only upload one file at a time\"))"
    },
    {
        "line": 97,
        "fullcodeline": "set_bot_config(bot_profile, key, value)"
    }
]