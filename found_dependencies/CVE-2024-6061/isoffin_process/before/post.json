[
    {
        "line": 3,
        "fullcodeline": "ISOMReader *read = gf_filter_get_udta(filter);"
    },
    {
        "line": 4,
        "fullcodeline": "u32 i, count = gf_list_count(read->channels);"
    },
    {
        "line": 5,
        "fullcodeline": "Bool is_active = GF_FALSE;"
    },
    {
        "line": 6,
        "fullcodeline": "Bool in_is_eos = GF_FALSE;"
    },
    {
        "line": 7,
        "fullcodeline": "Bool in_is_flush = GF_FALSE;"
    },
    {
        "line": 8,
        "fullcodeline": "Bool check_forced_end = GF_FALSE;"
    },
    {
        "line": 9,
        "fullcodeline": "Bool has_new_data = GF_FALSE;"
    },
    {
        "line": 10,
        "fullcodeline": "u64 min_offset_plus_one = 0;"
    },
    {
        "line": 11,
        "fullcodeline": "u32 nb_forced_end=0;"
    },
    {
        "line": 97,
        "fullcodeline": "if (read->moov_not_loaded==1) {"
    },
    {
        "line": 151,
        "fullcodeline": "for (i=0; i<count; i++) {"
    },
    {
        "line": 407,
        "fullcodeline": "if (read->mem_load_mode && min_offset_plus_one) {"
    },
    {
        "line": 412,
        "fullcodeline": "if (read->pid && check_forced_end && (nb_forced_end==count)) {"
    },
    {
        "line": 419,
        "fullcodeline": "if (!is_active) {"
    },
    {
        "line": 16,
        "fullcodeline": "Bool fetch_input = GF_TRUE;"
    },
    {
        "line": 100,
        "fullcodeline": "read->moov_not_loaded = GF_FALSE;"
    },
    {
        "line": 153,
        "fullcodeline": "u32 nb_pck=50;"
    },
    {
        "line": 155,
        "fullcodeline": "ch = gf_list_get(read->channels, i);"
    },
    {
        "line": 408,
        "fullcodeline": "isoffin_purge_mem(read, min_offset_plus_one-1);"
    },
    {
        "line": 415,
        "fullcodeline": "GF_FEVT_INIT(evt, GF_FEVT_STOP, read->pid);"
    },
    {
        "line": 416,
        "fullcodeline": "gf_filter_pid_send_event(read->pid, &evt);"
    },
    {
        "line": 19,
        "fullcodeline": "if (!read->is_partial_download && !read->mem_load_mode && (read->moov_not_loaded==2) ) {"
    },
    {
        "line": 23,
        "fullcodeline": "if (read->mem_load_mode==2) {"
    },
    {
        "line": 59,
        "fullcodeline": "if (gf_filter_pid_is_eos(read->pid)) {"
    },
    {
        "line": 72,
        "fullcodeline": "if (!read->frag_type && read->input_loaded) {"
    },
    {
        "line": 101,
        "fullcodeline": "return isoffin_setup(filter, read, in_is_eos);"
    },
    {
        "line": 156,
        "fullcodeline": "if (!ch->playing) {"
    },
    {
        "line": 161,
        "fullcodeline": "if (!ch->eos_sent)"
    },
    {
        "line": 401,
        "fullcodeline": "if ((ch->nb_empty_retry<100)"
    },
    {
        "line": 20,
        "fullcodeline": "isoffin_configure_pid(filter, read->pid, GF_FALSE);"
    },
    {
        "line": 27,
        "fullcodeline": "read->force_fetch = GF_FALSE;"
    },
    {
        "line": 30,
        "fullcodeline": "GF_FilterPacket *pck = gf_filter_pid_get_packet(read->pid);"
    },
    {
        "line": 42,
        "fullcodeline": "read->wait_for_source = GF_FALSE;"
    },
    {
        "line": 54,
        "fullcodeline": "gf_filter_pid_drop_packet(read->pid);"
    },
    {
        "line": 55,
        "fullcodeline": "has_new_data = GF_TRUE;"
    },
    {
        "line": 68,
        "fullcodeline": "read->input_loaded = GF_TRUE;"
    },
    {
        "line": 69,
        "fullcodeline": "in_is_eos = GF_TRUE;"
    },
    {
        "line": 70,
        "fullcodeline": "read->input_is_stop = GF_FALSE;"
    },
    {
        "line": 73,
        "fullcodeline": "in_is_eos = GF_TRUE;"
    },
    {
        "line": 78,
        "fullcodeline": "read->invalid_segment = GF_FALSE;"
    },
    {
        "line": 90,
        "fullcodeline": "read->eos_signaled = GF_TRUE;"
    },
    {
        "line": 108,
        "fullcodeline": "read->refresh_fragmented = GF_FALSE;"
    },
    {
        "line": 116,
        "fullcodeline": "u64 bytesMissing=0;"
    },
    {
        "line": 118,
        "fullcodeline": "const char *new_url = NULL;"
    },
    {
        "line": 119,
        "fullcodeline": "prop = gf_filter_pid_get_property(read->pid, GF_PROP_PID_FILEPATH);"
    },
    {
        "line": 123,
        "fullcodeline": "e = gf_isom_refresh_fragmented(read->mov, &bytesMissing, new_url);"
    },
    {
        "line": 145,
        "fullcodeline": "isor_check_producer_ref_time(read);"
    },
    {
        "line": 157,
        "fullcodeline": "nb_forced_end++;"
    },
    {
        "line": 162,
        "fullcodeline": "is_active = GF_TRUE;"
    },
    {
        "line": 165,
        "fullcodeline": "ch->sample_data_offset = 0;"
    },
    {
        "line": 402,
        "fullcodeline": "&& (!min_offset_plus_one || (min_offset_plus_one - 1 > ch->last_valid_sample_data_offset))"
    },
    {
        "line": 404,
        "fullcodeline": "min_offset_plus_one = 1 + ch->last_valid_sample_data_offset;"
    },
    {
        "line": 24,
        "fullcodeline": "if (!read->force_fetch && (read->mem_blob.size > read->mstore_size)) {"
    },
    {
        "line": 31,
        "fullcodeline": "if (!pck) {"
    },
    {
        "line": 60,
        "fullcodeline": "if (!gf_filter_pid_is_flush_eos(read->pid)) {"
    },
    {
        "line": 77,
        "fullcodeline": "if (!in_is_eos) return GF_OK;"
    },
    {
        "line": 80,
        "fullcodeline": "for (i=0; i<count; i++) {"
    },
    {
        "line": 94,
        "fullcodeline": "in_is_eos = GF_TRUE;"
    },
    {
        "line": 95,
        "fullcodeline": "read->input_loaded = GF_TRUE;"
    },
    {
        "line": 110,
        "fullcodeline": "prop = gf_filter_pid_get_property(read->pid, GF_PROP_PID_FILE_CACHED);"
    },
    {
        "line": 125,
        "fullcodeline": "if (e && (e != GF_ISOM_INCOMPLETE_FILE)) {"
    },
    {
        "line": 133,
        "fullcodeline": "if (!read->refresh_fragmented && (e==GF_ISOM_INCOMPLETE_FILE)) {"
    },
    {
        "line": 138,
        "fullcodeline": "if (gf_log_tool_level_on(GF_LOG_DASH, GF_LOG_DEBUG)) {"
    },
    {
        "line": 146,
        "fullcodeline": "if (!read->frag_type)"
    },
    {
        "line": 166,
        "fullcodeline": "if (!in_is_flush && !read->full_segment_flush && gf_filter_pid_would_block(ch->pid) )"
    },
    {
        "line": 174,
        "fullcodeline": "if (!ch->sample && ch->pck) {"
    },
    {
        "line": 183,
        "fullcodeline": "if (read->stsd && (ch->last_sample_desc_index != read->stsd) && ch->sample) {"
    },
    {
        "line": 25,
        "fullcodeline": "fetch_input = GF_FALSE;"
    },
    {
        "line": 46,
        "fullcodeline": "const u8 *pck_data = gf_filter_pck_get_data(pck, &data_size);"
    },
    {
        "line": 47,
        "fullcodeline": "isoffin_push_buffer(filter, read, pck_data, data_size);"
    },
    {
        "line": 61,
        "fullcodeline": "read->input_loaded = GF_TRUE;"
    },
    {
        "line": 62,
        "fullcodeline": "in_is_eos = GF_TRUE;"
    },
    {
        "line": 81,
        "fullcodeline": "ISOMChannel *ch = gf_list_get(read->channels, i);"
    },
    {
        "line": 111,
        "fullcodeline": "if (prop && prop->value.boolean)"
    },
    {
        "line": 126,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_DASH, (\"[IsoMedia] Failed to refresh current segment: %s\\n\", gf_error_to_string(e) ));"
    },
    {
        "line": 127,
        "fullcodeline": "read->refresh_fragmented = GF_FALSE;"
    },
    {
        "line": 147,
        "fullcodeline": "read->refresh_fragmented = GF_FALSE;"
    },
    {
        "line": 170,
        "fullcodeline": "isor_reader_get_sample_from_item(ch);"
    },
    {
        "line": 175,
        "fullcodeline": "gf_filter_pck_discard(ch->pck);"
    },
    {
        "line": 176,
        "fullcodeline": "ch->pck = NULL;"
    },
    {
        "line": 184,
        "fullcodeline": "isor_reader_release_sample(ch);"
    },
    {
        "line": 213,
        "fullcodeline": "isor_reader_check_config(ch);"
    },
    {
        "line": 237,
        "fullcodeline": "gf_filter_pck_set_dts(pck, ch->dts);"
    },
    {
        "line": 238,
        "fullcodeline": "gf_filter_pck_set_cts(pck, ch->cts + ch->cts_offset);"
    },
    {
        "line": 256,
        "fullcodeline": "gf_filter_pck_set_duration(pck, sample_dur);"
    },
    {
        "line": 257,
        "fullcodeline": "gf_filter_pck_set_seek_flag(pck, ch->seek_flag);"
    },
    {
        "line": 264,
        "fullcodeline": "dep_flags = ch->isLeading;"
    },
    {
        "line": 265,
        "fullcodeline": "dep_flags <<= 2;"
    },
    {
        "line": 266,
        "fullcodeline": "dep_flags |= ch->dependsOn;"
    },
    {
        "line": 267,
        "fullcodeline": "dep_flags <<= 2;"
    },
    {
        "line": 268,
        "fullcodeline": "dep_flags |= ch->dependedOn;"
    },
    {
        "line": 269,
        "fullcodeline": "dep_flags <<= 2;"
    },
    {
        "line": 270,
        "fullcodeline": "dep_flags |= ch->redundant;"
    },
    {
        "line": 277,
        "fullcodeline": "gf_filter_pck_set_crypt_flags(pck, ch->pck_encrypted ? GF_FILTER_PCK_CRYPT : 0);"
    },
    {
        "line": 278,
        "fullcodeline": "gf_filter_pck_set_seq_num(pck, ch->sample_num);"
    },
    {
        "line": 281,
        "fullcodeline": "subs_buf = gf_isom_sample_get_subsamples_buffer(read->mov, ch->track, ch->sample_num, &subs_buf_size);"
    },
    {
        "line": 324,
        "fullcodeline": "ch->eos_sent = 0;"
    },
    {
        "line": 325,
        "fullcodeline": "ch->nb_empty_retry = 0;"
    },
    {
        "line": 342,
        "fullcodeline": "gf_filter_pck_send(pck);"
    },
    {
        "line": 343,
        "fullcodeline": "isor_reader_release_sample(ch);"
    },
    {
        "line": 345,
        "fullcodeline": "ch->last_valid_sample_data_offset = ch->sample_data_offset;"
    },
    {
        "line": 64,
        "fullcodeline": "in_is_flush = GF_TRUE;"
    },
    {
        "line": 82,
        "fullcodeline": "if (!ch->playing) {"
    },
    {
        "line": 85,
        "fullcodeline": "if (!ch->eos_sent) {"
    },
    {
        "line": 112,
        "fullcodeline": "read->refresh_fragmented = GF_FALSE;"
    },
    {
        "line": 139,
        "fullcodeline": "for (i=0; i<count; i++) {"
    },
    {
        "line": 172,
        "fullcodeline": "isor_reader_get_sample(ch);"
    },
    {
        "line": 195,
        "fullcodeline": "if (!read->keepc && ch->sample->corrupted) {"
    },
    {
        "line": 206,
        "fullcodeline": "if (ch->check_has_rap && (gf_isom_get_sample_count(ch->owner->mov, ch->track)>1) && (gf_isom_has_sync_points(ch->owner->mov, ch->track)==1)) {"
    },
    {
        "line": 239,
        "fullcodeline": "if (ch->sample->IsRAP==-1) {"
    },
    {
        "line": 260,
        "fullcodeline": "if (ch->xps_mask && !gf_filter_pck_get_sap(pck) ) {"
    },
    {
        "line": 286,
        "fullcodeline": "if (ch->sai_buffer && ch->sai_buffer_size && ch->pck_encrypted) {"
    },
    {
        "line": 328,
        "fullcodeline": "if ((ch->streamType==GF_STREAM_AUDIO) && (ch->sample_num == gf_isom_get_sample_count(read->mov, ch->track))) {"
    },
    {
        "line": 332,
        "fullcodeline": "if (!ch->item_id) {"
    },
    {
        "line": 335,
        "fullcodeline": "if (ch->sample_data_offset && !gf_sys_is_test_mode())"
    },
    {
        "line": 346,
        "fullcodeline": "if (!in_is_flush)"
    },
    {
        "line": 50,
        "fullcodeline": "else if (read->moov_not_loaded==2) {"
    },
    {
        "line": 86,
        "fullcodeline": "ch->eos_sent = 1;"
    },
    {
        "line": 87,
        "fullcodeline": "gf_filter_pid_set_eos(ch->pid);"
    },
    {
        "line": 140,
        "fullcodeline": "ISOMChannel *ch = gf_list_get(read->channels, i);"
    },
    {
        "line": 141,
        "fullcodeline": "GF_LOG(GF_LOG_DEBUG, GF_LOG_DASH, (\"[IsoMedia] refresh track %d fragment - cur sample %d - new sample count %d\\n\", ch->track, ch->sample_num, gf_isom_get_sample_count(ch->owner->mov, ch->track) ));"
    },
    {
        "line": 178,
        "fullcodeline": "ch->static_sample->data = NULL;"
    },
    {
        "line": 179,
        "fullcodeline": "ch->static_sample->alloc_size=0;"
    },
    {
        "line": 196,
        "fullcodeline": "isor_reader_release_sample(ch);"
    },
    {
        "line": 201,
        "fullcodeline": "isor_update_channel_config(ch);"
    },
    {
        "line": 202,
        "fullcodeline": "ch->needs_pid_reconfig = 0;"
    },
    {
        "line": 207,
        "fullcodeline": "ch->check_has_rap = 0;"
    },
    {
        "line": 208,
        "fullcodeline": "ch->has_rap = 1;"
    },
    {
        "line": 209,
        "fullcodeline": "gf_filter_pid_set_property(ch->pid, GF_PROP_PID_HAS_SYNC, &PROP_BOOL(ch->has_rap) );"
    },
    {
        "line": 216,
        "fullcodeline": "pck = ch->pck;"
    },
    {
        "line": 217,
        "fullcodeline": "ch->pck = NULL;"
    },
    {
        "line": 218,
        "fullcodeline": "gf_filter_pck_check_realloc(pck, ch->sample->data, ch->sample->dataLength);"
    },
    {
        "line": 219,
        "fullcodeline": "ch->static_sample->data = NULL;"
    },
    {
        "line": 220,
        "fullcodeline": "ch->static_sample->dataLength = 0;"
    },
    {
        "line": 221,
        "fullcodeline": "ch->static_sample->alloc_size=0;"
    },
    {
        "line": 240,
        "fullcodeline": "gf_filter_pck_set_sap(pck, GF_FILTER_SAP_1);"
    },
    {
        "line": 241,
        "fullcodeline": "ch->redundant = 1;"
    },
    {
        "line": 247,
        "fullcodeline": "gf_filter_pck_set_sap(pck, GF_FILTER_SAP_3);"
    },
    {
        "line": 255,
        "fullcodeline": "sample_dur *= ch->sample->nb_pack;"
    },
    {
        "line": 261,
        "fullcodeline": "gf_filter_pck_set_property(pck, GF_PROP_PCK_XPS_MASK, &PROP_UINT(ch->xps_mask) );"
    },
    {
        "line": 273,
        "fullcodeline": "gf_filter_pck_set_dependency_flags(pck, dep_flags);"
    },
    {
        "line": 275,
        "fullcodeline": "gf_filter_pck_set_corrupted(pck, GF_TRUE);"
    },
    {
        "line": 283,
        "fullcodeline": "gf_filter_pck_set_property(pck, GF_PROP_PCK_SUBS, &PROP_DATA_NO_COPY(subs_buf, subs_buf_size) );"
    },
    {
        "line": 287,
        "fullcodeline": "gf_filter_pck_set_property(pck, GF_PROP_PCK_CENC_SAI, &PROP_DATA(ch->sai_buffer, ch->sai_buffer_size) );"
    },
    {
        "line": 319,
        "fullcodeline": "gf_filter_pck_set_property(pck, GF_PROP_PCK_SENDER_NTP, &PROP_LONGUINT(ch->sender_ntp));"
    },
    {
        "line": 329,
        "fullcodeline": "gf_filter_pck_set_property(pck, GF_PROP_PCK_END_RANGE, &PROP_BOOL(GF_TRUE));"
    },
    {
        "line": 333,
        "fullcodeline": "isor_set_sample_groups_and_aux_data(read, ch, pck);"
    },
    {
        "line": 336,
        "fullcodeline": "gf_filter_pck_set_byte_offset(pck, ch->sample_data_offset);"
    },
    {
        "line": 339,
        "fullcodeline": "ch->set_disc = 0;"
    },
    {
        "line": 340,
        "fullcodeline": "gf_filter_pck_set_clock_type(pck, GF_FILTER_CLOCK_PCR_DISC);"
    },
    {
        "line": 347,
        "fullcodeline": "nb_pck--;"
    },
    {
        "line": 348,
        "fullcodeline": "} else if (ch->last_state==GF_EOS) {"
    },
    {
        "line": 36,
        "fullcodeline": "if (gf_filter_pid_is_eos(read->pid))"
    },
    {
        "line": 51,
        "fullcodeline": "gf_filter_pid_drop_packet(read->pid);"
    },
    {
        "line": 243,
        "fullcodeline": "gf_filter_pck_set_sap(pck, (GF_FilterSAPType) ch->sample->IsRAP);"
    },
    {
        "line": 293,
        "fullcodeline": "if (gf_isom_sample_is_fragment_start(read->mov, ch->track, ch->sample_num, &finfo) ) {"
    },
    {
        "line": 360,
        "fullcodeline": "ch->nb_empty_retry++;"
    },
    {
        "line": 294,
        "fullcodeline": "u64 start=0;"
    },
    {
        "line": 295,
        "fullcodeline": "u32 traf_start = finfo.seg_start_plus_one ? 2 : 1;"
    },
    {
        "line": 300,
        "fullcodeline": "gf_filter_pck_set_property(pck, GF_PROP_PCK_FRAG_START, &PROP_UINT(traf_start));"
    },
    {
        "line": 304,
        "fullcodeline": "gf_filter_pck_set_property(pck, GF_PROP_PCK_FRAG_RANGE, &PROP_FRAC64_INT(start, finfo.mdat_end));"
    },
    {
        "line": 314,
        "fullcodeline": "gf_filter_pck_set_property(pck, GF_PROP_PCK_FRAG_TFDT, &PROP_LONGUINT(finfo.first_dts));"
    },
    {
        "line": 321,
        "fullcodeline": "gf_filter_pck_set_property(pck, GF_PROP_PCK_RECEIVER_NTP, &PROP_LONGUINT(ch->ntp_at_server_ntp));"
    },
    {
        "line": 361,
        "fullcodeline": "if (in_is_eos && !ch->eos_sent) {"
    },
    {
        "line": 249,
        "fullcodeline": "gf_filter_pck_set_sap(pck, (ch->sap_4_type==GF_ISOM_SAMPLE_PREROLL) ? GF_FILTER_SAP_4_PROL : GF_FILTER_SAP_4);"
    },
    {
        "line": 250,
        "fullcodeline": "gf_filter_pck_set_roll_info(pck, ch->roll);"
    },
    {
        "line": 350,
        "fullcodeline": "gf_filter_pid_send_flush(ch->pid);"
    },
    {
        "line": 365,
        "fullcodeline": "ch->eos_sent = 1;"
    },
    {
        "line": 366,
        "fullcodeline": "read->eos_signaled = GF_TRUE;"
    },
    {
        "line": 368,
        "fullcodeline": "tfrf = (void *) gf_isom_get_tfrf(read->mov, ch->track);"
    },
    {
        "line": 377,
        "fullcodeline": "gf_filter_pid_set_eos(ch->pid);"
    },
    {
        "line": 380,
        "fullcodeline": "} else if (ch->last_state==GF_ISOM_INVALID_FILE) {"
    },
    {
        "line": 224,
        "fullcodeline": "if (read->nodata==1)"
    },
    {
        "line": 229,
        "fullcodeline": "if (!pck) return GF_OUT_OF_MEM;"
    },
    {
        "line": 231,
        "fullcodeline": "pck = gf_filter_pck_new_alloc(ch->pid, ch->sample->dataLength, &data);"
    },
    {
        "line": 298,
        "fullcodeline": "gf_filter_pck_set_property(pck, GF_PROP_PCK_CUE_START, &PROP_BOOL(GF_TRUE));"
    },
    {
        "line": 303,
        "fullcodeline": "if (finfo.seg_start_plus_one) start = finfo.seg_start_plus_one-1;"
    },
    {
        "line": 308,
        "fullcodeline": "gf_filter_pck_set_property(pck, GF_PROP_PCK_MOOF_TEMPLATE, &PROP_DATA((u8 *)finfo.moof_template, finfo.moof_template_size));"
    },
    {
        "line": 311,
        "fullcodeline": "gf_filter_pck_set_property(pck, GF_PROP_PCK_SIDX_RANGE, &PROP_FRAC64_INT(finfo.sidx_start , finfo.sidx_end));"
    },
    {
        "line": 381,
        "fullcodeline": "ch->nb_empty_retry++;"
    },
    {
        "line": 225,
        "fullcodeline": "pck = gf_filter_pck_new_shared(ch->pid, NULL, ch->sample->dataLength, NULL);"
    },
    {
        "line": 232,
        "fullcodeline": "if (!pck) return GF_OUT_OF_MEM;"
    },
    {
        "line": 352,
        "fullcodeline": "else if (ch->playing == 2) {"
    },
    {
        "line": 370,
        "fullcodeline": "gf_filter_pid_set_info_str(ch->pid, \"smooth_tfrf\", &PROP_POINTER(tfrf) );"
    },
    {
        "line": 371,
        "fullcodeline": "ch->last_has_tfrf = 1;"
    },
    {
        "line": 382,
        "fullcodeline": "if (!ch->eos_sent) {"
    },
    {
        "line": 392,
        "fullcodeline": "read->force_fetch = GF_TRUE;"
    },
    {
        "line": 393,
        "fullcodeline": "ch->nb_empty_retry++;"
    },
    {
        "line": 227,
        "fullcodeline": "pck = gf_filter_pck_new_alloc(ch->pid, ch->sample->dataLength, &data);"
    },
    {
        "line": 235,
        "fullcodeline": "memcpy(data, ch->sample->data, ch->sample->dataLength);"
    },
    {
        "line": 383,
        "fullcodeline": "ch->eos_sent = 1;"
    },
    {
        "line": 384,
        "fullcodeline": "read->eos_signaled = GF_TRUE;"
    },
    {
        "line": 385,
        "fullcodeline": "gf_filter_pid_set_eos(ch->pid);"
    },
    {
        "line": 389,
        "fullcodeline": "if ((ch->last_state==GF_OK) && ch->sap_only)"
    },
    {
        "line": 390,
        "fullcodeline": "gf_filter_ask_rt_reschedule(filter, 1);"
    },
    {
        "line": 354,
        "fullcodeline": "ch->playing = 0;"
    },
    {
        "line": 373,
        "fullcodeline": "gf_filter_pid_set_info_str(ch->pid, \"smooth_tfrf\", NULL);"
    },
    {
        "line": 374,
        "fullcodeline": "ch->last_has_tfrf = 0;"
    },
    {
        "line": 356,
        "fullcodeline": "nb_forced_end++;"
    },
    {
        "line": 357,
        "fullcodeline": "check_forced_end = GF_TRUE;"
    }
]