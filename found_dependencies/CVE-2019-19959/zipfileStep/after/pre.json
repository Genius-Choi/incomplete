[
    {
        "line": 5,
        "fullcodeline": "sqlite3_value *pName = 0;"
    },
    {
        "line": 6,
        "fullcodeline": "sqlite3_value *pMode = 0;"
    },
    {
        "line": 7,
        "fullcodeline": "sqlite3_value *pMtime = 0;"
    },
    {
        "line": 8,
        "fullcodeline": "sqlite3_value *pData = 0;"
    },
    {
        "line": 9,
        "fullcodeline": "sqlite3_value *pMethod = 0;"
    },
    {
        "line": 11,
        "fullcodeline": "int bIsDir = 0;"
    },
    {
        "line": 13,
        "fullcodeline": "int rc = SQLITE_OK;"
    },
    {
        "line": 14,
        "fullcodeline": "char *zErr = 0;"
    },
    {
        "line": 16,
        "fullcodeline": "int iMethod = -1;               /* Compression method to use (0 or 8) */"
    },
    {
        "line": 18,
        "fullcodeline": "const u8 *aData = 0;            /* Possibly compressed data for new entry */"
    },
    {
        "line": 19,
        "fullcodeline": "int nData = 0;                  /* Size of aData[] in bytes */"
    },
    {
        "line": 20,
        "fullcodeline": "int szUncompressed = 0;         /* Size of data before compression */"
    },
    {
        "line": 21,
        "fullcodeline": "u8 *aFree = 0;                  /* Free this before returning */"
    },
    {
        "line": 22,
        "fullcodeline": "u32 iCrc32 = 0;                 /* crc32 of uncompressed data */"
    },
    {
        "line": 24,
        "fullcodeline": "char *zName = 0;                /* Path (name) of new entry */"
    },
    {
        "line": 25,
        "fullcodeline": "int nName = 0;                  /* Size of zName in bytes */"
    },
    {
        "line": 26,
        "fullcodeline": "char *zFree = 0;                /* Free this before returning */"
    },
    {
        "line": 29,
        "fullcodeline": "memset(&e, 0, sizeof(e));"
    },
    {
        "line": 30,
        "fullcodeline": "p = (ZipfileCtx*)sqlite3_aggregate_context(pCtx, sizeof(ZipfileCtx));"
    },
    {
        "line": 39,
        "fullcodeline": "pName = apVal[0];"
    },
    {
        "line": 52,
        "fullcodeline": "zName = (char*)sqlite3_value_text(pName);"
    },
    {
        "line": 53,
        "fullcodeline": "nName = sqlite3_value_bytes(pName);"
    },
    {
        "line": 98,
        "fullcodeline": "rc = zipfileGetMode(pMode, bIsDir, &mode, &zErr);"
    },
    {
        "line": 102,
        "fullcodeline": "e.mUnixTime = zipfileGetTime(pMtime);"
    },
    {
        "line": 127,
        "fullcodeline": "e.cds.iVersionMadeBy = ZIPFILE_NEWENTRY_MADEBY;"
    },
    {
        "line": 128,
        "fullcodeline": "e.cds.iVersionExtract = ZIPFILE_NEWENTRY_REQUIRED;"
    },
    {
        "line": 129,
        "fullcodeline": "e.cds.flags = ZIPFILE_NEWENTRY_FLAGS;"
    },
    {
        "line": 130,
        "fullcodeline": "e.cds.iCompression = (u16)iMethod;"
    },
    {
        "line": 137,
        "fullcodeline": "e.cds.nFile = (u16)nName;"
    },
    {
        "line": 141,
        "fullcodeline": "nByte = ZIPFILE_LFH_FIXED_SZ + e.cds.nFile + 9;"
    },
    {
        "line": 143,
        "fullcodeline": "p->body.n += zipfileSerializeLFH(&e, &p->body.a[p->body.n]);"
    },
    {
        "line": 153,
        "fullcodeline": "nByte = ZIPFILE_CDS_FIXED_SZ + e.cds.nFile + 9;"
    },
    {
        "line": 31,
        "fullcodeline": "if( p==0 ) return;"
    },
    {
        "line": 40,
        "fullcodeline": "if( nVal==2 ){"
    },
    {
        "line": 54,
        "fullcodeline": "if( zName==0 ){"
    },
    {
        "line": 62,
        "fullcodeline": "if( pMethod && SQLITE_NULL!=sqlite3_value_type(pMethod) ){"
    },
    {
        "line": 135,
        "fullcodeline": "e.cds.iExternalAttr = (mode<<16);"
    },
    {
        "line": 142,
        "fullcodeline": "if( (rc = zipfileBufferGrow(&p->body, nByte)) ) goto zipfile_step_out;"
    },
    {
        "line": 146,
        "fullcodeline": "if( nData>0 ){"
    },
    {
        "line": 154,
        "fullcodeline": "if( (rc = zipfileBufferGrow(&p->cds, nByte)) ) goto zipfile_step_out;"
    },
    {
        "line": 155,
        "fullcodeline": "p->cds.n += zipfileSerializeCDS(&e, &p->cds.a[p->cds.n]);"
    },
    {
        "line": 34,
        "fullcodeline": "if( nVal!=2 && nVal!=4 && nVal!=5 ){"
    },
    {
        "line": 35,
        "fullcodeline": "zErr = sqlite3_mprintf(\"wrong number of arguments to function zipfile()\");"
    },
    {
        "line": 36,
        "fullcodeline": "rc = SQLITE_ERROR;"
    },
    {
        "line": 41,
        "fullcodeline": "pData = apVal[1];"
    },
    {
        "line": 55,
        "fullcodeline": "zErr = sqlite3_mprintf(\"first argument to zipfile() must be non-NULL\");"
    },
    {
        "line": 56,
        "fullcodeline": "rc = SQLITE_ERROR;"
    },
    {
        "line": 63,
        "fullcodeline": "iMethod = (int)sqlite3_value_int64(pMethod);"
    },
    {
        "line": 74,
        "fullcodeline": "if( sqlite3_value_type(pData)==SQLITE_NULL ){"
    },
    {
        "line": 75,
        "fullcodeline": "bIsDir = 1;"
    },
    {
        "line": 76,
        "fullcodeline": "iMethod = 0;"
    },
    {
        "line": 148,
        "fullcodeline": "memcpy(&p->body.a[p->body.n], aData, nData);"
    },
    {
        "line": 43,
        "fullcodeline": "pMode = apVal[1];"
    },
    {
        "line": 44,
        "fullcodeline": "pMtime = apVal[2];"
    },
    {
        "line": 45,
        "fullcodeline": "pData = apVal[3];"
    },
    {
        "line": 78,
        "fullcodeline": "aData = sqlite3_value_blob(pData);"
    },
    {
        "line": 79,
        "fullcodeline": "szUncompressed = nData = sqlite3_value_bytes(pData);"
    },
    {
        "line": 80,
        "fullcodeline": "iCrc32 = crc32(0, aData, nData);"
    },
    {
        "line": 108,
        "fullcodeline": "if( zName[nName-1]=='/' ){"
    },
    {
        "line": 147,
        "fullcodeline": "if( (rc = zipfileBufferGrow(&p->body, nData)) ) goto zipfile_step_out;"
    },
    {
        "line": 64,
        "fullcodeline": "if( iMethod!=0 && iMethod!=8 ){"
    },
    {
        "line": 65,
        "fullcodeline": "zErr = sqlite3_mprintf(\"illegal method value: %d\", iMethod);"
    },
    {
        "line": 66,
        "fullcodeline": "rc = SQLITE_ERROR;"
    },
    {
        "line": 109,
        "fullcodeline": "zErr = sqlite3_mprintf(\"non-directory name must not end with /\");"
    },
    {
        "line": 110,
        "fullcodeline": "rc = SQLITE_ERROR;"
    },
    {
        "line": 114,
        "fullcodeline": "if( zName[nName-1]!='/' ){"
    },
    {
        "line": 165,
        "fullcodeline": "sqlite3_result_error(pCtx, zErr, -1);"
    },
    {
        "line": 47,
        "fullcodeline": "pMethod = apVal[4];"
    },
    {
        "line": 81,
        "fullcodeline": "if( iMethod<0 || iMethod==8 ){"
    },
    {
        "line": 82,
        "fullcodeline": "int nOut = 0;"
    },
    {
        "line": 83,
        "fullcodeline": "rc = zipfileDeflate(aData, nData, &aFree, &nOut, &zErr);"
    },
    {
        "line": 115,
        "fullcodeline": "zName = zFree = sqlite3_mprintf(\"%s/\", zName);"
    },
    {
        "line": 120,
        "fullcodeline": "nName = (int)strlen(zName);"
    },
    {
        "line": 84,
        "fullcodeline": "if( rc!=SQLITE_OK ){"
    },
    {
        "line": 116,
        "fullcodeline": "if( zName==0 ){"
    },
    {
        "line": 87,
        "fullcodeline": "if( iMethod==8 || nOut<nData ){"
    },
    {
        "line": 88,
        "fullcodeline": "aData = aFree;"
    },
    {
        "line": 89,
        "fullcodeline": "nData = nOut;"
    },
    {
        "line": 90,
        "fullcodeline": "iMethod = 8;"
    },
    {
        "line": 117,
        "fullcodeline": "rc = SQLITE_NOMEM;"
    },
    {
        "line": 122,
        "fullcodeline": "while( nName>1 && zName[nName-2]=='/' ) nName--;"
    },
    {
        "line": 92,
        "fullcodeline": "iMethod = 0;"
    }
]