[
    {
        "line": 67,
        "fullcodeline": "std::vector<DimensionHandle> dims;"
    },
    {
        "line": 5,
        "fullcodeline": "if (!treat_unknown_scalar_tensor_as_unknown_shape) {"
    },
    {
        "line": 8,
        "fullcodeline": "if (t == nullptr) {"
    },
    {
        "line": 26,
        "fullcodeline": "if (t->shape().dims() == 0) {"
    },
    {
        "line": 57,
        "fullcodeline": "if (t->shape().dims() != 1) {"
    },
    {
        "line": 68,
        "fullcodeline": "if (t->dtype() == DataType::DT_INT32) {"
    },
    {
        "line": 97,
        "fullcodeline": "return ReturnCreatedShape(dims, out);"
    },
    {
        "line": 6,
        "fullcodeline": "TF_RETURN_IF_ERROR(WithRank(tensor_shape, 1, &tensor_shape));"
    },
    {
        "line": 15,
        "fullcodeline": "DimensionHandle shape_dim = Dim(tensor_shape, 0);"
    },
    {
        "line": 19,
        "fullcodeline": "const auto num_dims = Value(shape_dim);"
    },
    {
        "line": 20,
        "fullcodeline": "std::vector<DimensionHandle> dims;"
    },
    {
        "line": 21,
        "fullcodeline": "dims.reserve(num_dims);"
    },
    {
        "line": 58,
        "fullcodeline": "*out = nullptr;"
    },
    {
        "line": 69,
        "fullcodeline": "auto flat_t = t->flat<int32>();"
    },
    {
        "line": 10,
        "fullcodeline": "if (Rank(tensor_shape) == 0) {"
    },
    {
        "line": 16,
        "fullcodeline": "if (!ValueKnown(shape_dim)) {"
    },
    {
        "line": 22,
        "fullcodeline": "for (int i = 0; i < num_dims; i++) dims.push_back(UnknownDim());"
    },
    {
        "line": 23,
        "fullcodeline": "return ReturnCreatedShape(dims, out);"
    },
    {
        "line": 27,
        "fullcodeline": "if (t->dtype() == DataType::DT_INT32) {"
    },
    {
        "line": 59,
        "fullcodeline": "return errors::InvalidArgument("
    },
    {
        "line": 70,
        "fullcodeline": "for (int i = 0; i < flat_t.size(); ++i) {"
    },
    {
        "line": 28,
        "fullcodeline": "auto flat_t = t->scalar<int32>();"
    },
    {
        "line": 60,
        "fullcodeline": "\"Input tensor must be rank 1, but was rank \", t->shape().dims(), \".\","
    },
    {
        "line": 61,
        "fullcodeline": "((t->shape().dims() == 0)"
    },
    {
        "line": 65,
        "fullcodeline": "\"Saw tensor shape \", t->shape().DebugString());"
    },
    {
        "line": 71,
        "fullcodeline": "const int32_t val = flat_t(i);"
    },
    {
        "line": 77,
        "fullcodeline": "dims.push_back(MakeDim(val));"
    },
    {
        "line": 79,
        "fullcodeline": "} else if (t->dtype() == DataType::DT_INT64) {"
    },
    {
        "line": 11,
        "fullcodeline": "return ReturnUnknownShape(out);"
    },
    {
        "line": 17,
        "fullcodeline": "return ReturnUnknownShape(out);"
    },
    {
        "line": 29,
        "fullcodeline": "if (flat_t() != -1) {"
    },
    {
        "line": 37,
        "fullcodeline": "return ReturnUnknownShape(out);"
    },
    {
        "line": 72,
        "fullcodeline": "if (val < -1) {"
    },
    {
        "line": 80,
        "fullcodeline": "auto flat_t = t->flat<int64_t>();"
    },
    {
        "line": 30,
        "fullcodeline": "*out = nullptr;"
    },
    {
        "line": 38,
        "fullcodeline": "} else if (t->dtype() == DataType::DT_INT64) {"
    },
    {
        "line": 81,
        "fullcodeline": "for (int i = 0; i < flat_t.size(); ++i) {"
    },
    {
        "line": 91,
        "fullcodeline": "*out = nullptr;"
    },
    {
        "line": 31,
        "fullcodeline": "return errors::InvalidArgument("
    },
    {
        "line": 39,
        "fullcodeline": "auto flat_t = t->scalar<int64_t>();"
    },
    {
        "line": 73,
        "fullcodeline": "return errors::InvalidArgument("
    },
    {
        "line": 82,
        "fullcodeline": "const int64_t val = flat_t(i);"
    },
    {
        "line": 88,
        "fullcodeline": "dims.push_back(MakeDim(val));"
    },
    {
        "line": 92,
        "fullcodeline": "return errors::InvalidArgument("
    },
    {
        "line": 40,
        "fullcodeline": "if (flat_t() != -1) {"
    },
    {
        "line": 48,
        "fullcodeline": "return ReturnUnknownShape(out);"
    },
    {
        "line": 50,
        "fullcodeline": "*out = nullptr;"
    },
    {
        "line": 83,
        "fullcodeline": "if (val < -1) {"
    },
    {
        "line": 94,
        "fullcodeline": "DataTypeString(t->dtype()));"
    },
    {
        "line": 41,
        "fullcodeline": "*out = nullptr;"
    },
    {
        "line": 51,
        "fullcodeline": "return errors::InvalidArgument("
    },
    {
        "line": 42,
        "fullcodeline": "return errors::InvalidArgument("
    },
    {
        "line": 53,
        "fullcodeline": "DataTypeString(t->dtype()));"
    },
    {
        "line": 84,
        "fullcodeline": "return errors::InvalidArgument("
    }
]