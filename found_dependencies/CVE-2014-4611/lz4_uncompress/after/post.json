[
    {
        "line": 3,
        "fullcodeline": "const BYTE *ip = (const BYTE *) source;"
    },
    {
        "line": 5,
        "fullcodeline": "BYTE *op = (BYTE *) dest;"
    },
    {
        "line": 6,
        "fullcodeline": "BYTE * const oend = op + osize;"
    },
    {
        "line": 10,
        "fullcodeline": "size_t dec32table[] = {0, 3, 2, 3, 0, 0, 0, 0};"
    },
    {
        "line": 107,
        "fullcodeline": "return (int) (((char *)ip) - source);"
    },
    {
        "line": 111,
        "fullcodeline": "return (int) (-(((char *)ip) - source));"
    },
    {
        "line": 19,
        "fullcodeline": "length = (token >> ML_BITS);"
    },
    {
        "line": 32,
        "fullcodeline": "cpy = op + length;"
    },
    {
        "line": 45,
        "fullcodeline": "LZ4_WILDCOPY(ip, op, cpy);"
    },
    {
        "line": 46,
        "fullcodeline": "ip -= (op - cpy);"
    },
    {
        "line": 47,
        "fullcodeline": "op = cpy;"
    },
    {
        "line": 50,
        "fullcodeline": "LZ4_READ_LITTLEENDIAN_16(ref, cpy, ip);"
    },
    {
        "line": 51,
        "fullcodeline": "ip += 2;"
    },
    {
        "line": 58,
        "fullcodeline": "length = token & ML_MASK;"
    },
    {
        "line": 85,
        "fullcodeline": "cpy = op + length - (STEPSIZE - 4);"
    },
    {
        "line": 103,
        "fullcodeline": "LZ4_SECURECOPY(ref, op, cpy);"
    },
    {
        "line": 104,
        "fullcodeline": "op = cpy; /* correction */"
    },
    {
        "line": 20,
        "fullcodeline": "if (length == RUN_MASK) {"
    },
    {
        "line": 33,
        "fullcodeline": "if (unlikely(cpy > oend - COPYLENGTH)) {"
    },
    {
        "line": 54,
        "fullcodeline": "if (unlikely(ref < (BYTE *const) dest))"
    },
    {
        "line": 59,
        "fullcodeline": "if (length == ML_MASK) {"
    },
    {
        "line": 66,
        "fullcodeline": "if (unlikely((op - ref) < STEPSIZE)) {"
    },
    {
        "line": 86,
        "fullcodeline": "if (cpy > (oend - COPYLENGTH)) {"
    },
    {
        "line": 18,
        "fullcodeline": "token = *ip++;"
    },
    {
        "line": 28,
        "fullcodeline": "length += len;"
    },
    {
        "line": 41,
        "fullcodeline": "memcpy(op, ip, length);"
    },
    {
        "line": 42,
        "fullcodeline": "ip += length;"
    },
    {
        "line": 62,
        "fullcodeline": "length += *ip++;"
    },
    {
        "line": 70,
        "fullcodeline": "const int dec64 = 0;"
    },
    {
        "line": 72,
        "fullcodeline": "op[0] = ref[0];"
    },
    {
        "line": 73,
        "fullcodeline": "op[1] = ref[1];"
    },
    {
        "line": 74,
        "fullcodeline": "op[2] = ref[2];"
    },
    {
        "line": 75,
        "fullcodeline": "op[3] = ref[3];"
    },
    {
        "line": 76,
        "fullcodeline": "op += 4;"
    },
    {
        "line": 77,
        "fullcodeline": "ref += 4;"
    },
    {
        "line": 78,
        "fullcodeline": "ref -= dec32table[op-ref];"
    },
    {
        "line": 79,
        "fullcodeline": "PUT4(ref, op);"
    },
    {
        "line": 80,
        "fullcodeline": "op += STEPSIZE - 4;"
    },
    {
        "line": 81,
        "fullcodeline": "ref -= dec64;"
    },
    {
        "line": 91,
        "fullcodeline": "LZ4_SECURECOPY(ref, op, (oend - COPYLENGTH));"
    },
    {
        "line": 94,
        "fullcodeline": "op = cpy;"
    },
    {
        "line": 24,
        "fullcodeline": "for (; len == 255; length += 255)"
    },
    {
        "line": 26,
        "fullcodeline": "if (unlikely(length > (size_t)(length + len)))"
    },
    {
        "line": 38,
        "fullcodeline": "if (cpy != oend)"
    },
    {
        "line": 60,
        "fullcodeline": "for (; *ip == 255; length += 255)"
    },
    {
        "line": 61,
        "fullcodeline": "ip++;"
    },
    {
        "line": 83,
        "fullcodeline": "LZ4_COPYSTEP(ref, op);"
    },
    {
        "line": 89,
        "fullcodeline": "if (cpy > oend)"
    },
    {
        "line": 92,
        "fullcodeline": "while (op < cpy)"
    },
    {
        "line": 99,
        "fullcodeline": "if (op == oend)"
    },
    {
        "line": 23,
        "fullcodeline": "len = *ip++;"
    },
    {
        "line": 25,
        "fullcodeline": "len = *ip++;"
    },
    {
        "line": 93,
        "fullcodeline": "*op++ = *ref++;"
    }
]