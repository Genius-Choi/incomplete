[
    {
        "line": 8,
        "fullcodeline": "int j = 4;"
    },
    {
        "line": 9,
        "fullcodeline": "int length = 0;"
    },
    {
        "line": 11,
        "fullcodeline": "debug(LOG_DEBUG, \" Getting query, separator is [%s].\", separator);"
    },
    {
        "line": 13,
        "fullcodeline": "element_counter = MHD_get_connection_values(connection, MHD_GET_ARGUMENT_KIND, counter_iterator, NULL);"
    },
    {
        "line": 18,
        "fullcodeline": "elements = calloc(element_counter, sizeof(char *));"
    },
    {
        "line": 22,
        "fullcodeline": "collect_query.i = 0;"
    },
    {
        "line": 23,
        "fullcodeline": "collect_query.elements = elements;"
    },
    {
        "line": 26,
        "fullcodeline": "MHD_get_connection_values(connection, MHD_GET_ARGUMENT_KIND, collect_query_string, &collect_query);"
    },
    {
        "line": 48,
        "fullcodeline": "query_str = safe_calloc(QUERYMAXLEN);"
    },
    {
        "line": 78,
        "fullcodeline": "debug(LOG_DEBUG, \" query is [%s]\", query_str);"
    },
    {
        "line": 79,
        "fullcodeline": "strncpy(*query, query_str, QUERYMAXLEN);"
    },
    {
        "line": 14,
        "fullcodeline": "if (element_counter < 0) {"
    },
    {
        "line": 19,
        "fullcodeline": "if (elements == NULL) {"
    },
    {
        "line": 28,
        "fullcodeline": "for (i = 0; i < element_counter; i++) {"
    },
    {
        "line": 40,
        "fullcodeline": "if (*query == NULL) {"
    },
    {
        "line": 50,
        "fullcodeline": "for (i = 0, j = 0; i < element_counter; i++) {"
    },
    {
        "line": 15,
        "fullcodeline": "*query = safe_strdup(\"\");"
    },
    {
        "line": 31,
        "fullcodeline": "length += strlen(elements[i]);"
    },
    {
        "line": 36,
        "fullcodeline": "debug(LOG_DEBUG, \" cumulative element length is [%d]\", length);"
    },
    {
        "line": 55,
        "fullcodeline": "debug(LOG_DEBUG, \" element [%d] is [%s]\", i, elements[i]);"
    },
    {
        "line": 75,
        "fullcodeline": "free(elements[i]);"
    },
    {
        "line": 29,
        "fullcodeline": "if (!elements[i])"
    },
    {
        "line": 33,
        "fullcodeline": "if (i > 0) // q=foo&o=bar the '&' need also some space"
    },
    {
        "line": 41,
        "fullcodeline": "for (i = 0; i < element_counter; i++) {"
    },
    {
        "line": 51,
        "fullcodeline": "if (!elements[i]) {"
    },
    {
        "line": 57,
        "fullcodeline": "if (length + j < QUERYMAXLEN) {"
    },
    {
        "line": 34,
        "fullcodeline": "length++;"
    },
    {
        "line": 42,
        "fullcodeline": "free(elements[i]);"
    },
    {
        "line": 59,
        "fullcodeline": "strncpy(*query + j, elements[i], length - j);"
    },
    {
        "line": 70,
        "fullcodeline": "strncat(query_str, *query, QUERYMAXLEN - strlen(query_str));"
    },
    {
        "line": 61,
        "fullcodeline": "if (i == 0) {"
    },
    {
        "line": 72,
        "fullcodeline": "debug(LOG_WARNING, \" Query string is too long, invalid or corrupt so is ignored.\");"
    },
    {
        "line": 63,
        "fullcodeline": "strcpy(query_str, \"?\");"
    },
    {
        "line": 65,
        "fullcodeline": "if (QUERYMAXLEN - strlen(query_str) > length - j + 1) {"
    },
    {
        "line": 66,
        "fullcodeline": "strncat(query_str, separator, QUERYMAXLEN - strlen(query_str));"
    }
]