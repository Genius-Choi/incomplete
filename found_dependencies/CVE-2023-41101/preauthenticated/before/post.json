[
    {
        "line": 3,
        "fullcodeline": "s_config *config = config_get_config();"
    },
    {
        "line": 4,
        "fullcodeline": "const char *host = config->gw_address;"
    },
    {
        "line": 5,
        "fullcodeline": "const char *accept = NULL;"
    },
    {
        "line": 10,
        "fullcodeline": "char *originurl_raw = NULL;"
    },
    {
        "line": 11,
        "fullcodeline": "char *captive_json = NULL;"
    },
    {
        "line": 15,
        "fullcodeline": "ret = MHD_get_connection_values(connection, MHD_HEADER_KIND, get_host_value_callback, &host);"
    },
    {
        "line": 22,
        "fullcodeline": "debug(LOG_DEBUG, \"preauthenticated: host [%s] url [%s]\", host, url);"
    },
    {
        "line": 30,
        "fullcodeline": "ret = MHD_get_connection_values(connection, MHD_HEADER_KIND, get_accept_callback, &accept);"
    },
    {
        "line": 124,
        "fullcodeline": "debug(LOG_DEBUG, \"preauthenticated: Requested Host is [ %s ], url is [%s]\", host, url);"
    },
    {
        "line": 17,
        "fullcodeline": "if (ret < 1) {"
    },
    {
        "line": 24,
        "fullcodeline": "if (host == NULL) {"
    },
    {
        "line": 32,
        "fullcodeline": "if (ret < 1) {"
    },
    {
        "line": 37,
        "fullcodeline": "if (accept && strcmp(accept, \"application/captive+json\") == 0) {"
    },
    {
        "line": 93,
        "fullcodeline": "if (strcmp(url, \"/\") == 0) {"
    },
    {
        "line": 100,
        "fullcodeline": "if (check_authdir_match(url, config->preauthdir)) {"
    },
    {
        "line": 119,
        "fullcodeline": "if (check_authdir_match(url, config->denydir)) {"
    },
    {
        "line": 127,
        "fullcodeline": "if (strcmp(url, \"/login\") == 0) {"
    },
    {
        "line": 134,
        "fullcodeline": "if (is_foreign_hosts(connection, host)) {"
    },
    {
        "line": 140,
        "fullcodeline": "if (check_authdir_match(url, config->authdir)) {"
    },
    {
        "line": 177,
        "fullcodeline": "return serve_file(connection, client, url);"
    },
    {
        "line": 18,
        "fullcodeline": "debug(LOG_ERR, \"preauthenticated: Error getting host\");"
    },
    {
        "line": 25,
        "fullcodeline": "debug(LOG_ERR, \"preauthenticated: Error getting host\");"
    },
    {
        "line": 26,
        "fullcodeline": "host = config->gw_address;"
    },
    {
        "line": 33,
        "fullcodeline": "debug(LOG_ERR, \"preauthenticated: Error getting Accept header\");"
    },
    {
        "line": 38,
        "fullcodeline": "debug(LOG_DEBUG, \"preauthenticated: Accept header [%s]\", accept);"
    },
    {
        "line": 39,
        "fullcodeline": "debug(LOG_NOTICE, \"preauthenticated: RFC 8908 captive+json request received from client at [%s] [%s]\", client->ip, client->mac);"
    },
    {
        "line": 41,
        "fullcodeline": "client->client_type = \"cpi_api\";"
    },
    {
        "line": 43,
        "fullcodeline": "originurl_raw = safe_calloc(REDIRECT_URL);"
    },
    {
        "line": 51,
        "fullcodeline": "originurl = safe_calloc(REDIRECT_URL_ENC_BUF);"
    },
    {
        "line": 52,
        "fullcodeline": "uh_urlencode(originurl, REDIRECT_URL_ENC_BUF, originurl_raw, strlen(originurl_raw));"
    },
    {
        "line": 53,
        "fullcodeline": "debug(LOG_DEBUG, \"originurl: %s\", originurl);"
    },
    {
        "line": 55,
        "fullcodeline": "querystr = safe_calloc(QUERYMAXLEN);"
    },
    {
        "line": 65,
        "fullcodeline": "querystr=construct_querystring(connection, client, originurl, querystr);"
    },
    {
        "line": 66,
        "fullcodeline": "debug(LOG_DEBUG, \"Constructed query string [%s]\", querystr);"
    },
    {
        "line": 67,
        "fullcodeline": "debug(LOG_DEBUG, \"FAS url [%s]\", config->fas_url);"
    },
    {
        "line": 69,
        "fullcodeline": "captive_json = safe_calloc(QUERYMAXLEN);"
    },
    {
        "line": 80,
        "fullcodeline": "safe_asprintf(&captive_json, \"{ \\\"captive\\\": true, \\\"user-portal-url\\\": \\\"%s%s\\\" }\", config->fas_url, querystr);"
    },
    {
        "line": 82,
        "fullcodeline": "debug(LOG_DEBUG, \"captive_json [%s]\", captive_json);"
    },
    {
        "line": 83,
        "fullcodeline": "ret = send_json(connection, captive_json);"
    },
    {
        "line": 85,
        "fullcodeline": "free(originurl);"
    },
    {
        "line": 86,
        "fullcodeline": "free(originurl_raw);"
    },
    {
        "line": 87,
        "fullcodeline": "free(querystr);"
    },
    {
        "line": 88,
        "fullcodeline": "free(captive_json);"
    },
    {
        "line": 102,
        "fullcodeline": "debug(LOG_DEBUG, \"preauthdir url detected: %s\", url);"
    },
    {
        "line": 103,
        "fullcodeline": "query = safe_calloc(QUERYMAXLEN);"
    },
    {
        "line": 111,
        "fullcodeline": "get_query(connection, &query, QUERYSEPARATOR);"
    },
    {
        "line": 112,
        "fullcodeline": "debug(LOG_DEBUG, \"preauthenticated: show_preauthpage [%s]\", query);"
    },
    {
        "line": 113,
        "fullcodeline": "ret = show_preauthpage(connection, query);"
    },
    {
        "line": 114,
        "fullcodeline": "free(query);"
    },
    {
        "line": 120,
        "fullcodeline": "debug(LOG_DEBUG, \"denydir url detected: %s\", url);"
    },
    {
        "line": 128,
        "fullcodeline": "debug(LOG_INFO, \"preauthenticated: RFC8910 login request received from client at [%s] [%s]\", client->ip, client->mac);"
    },
    {
        "line": 129,
        "fullcodeline": "client->client_type = \"cpi_url\";"
    },
    {
        "line": 135,
        "fullcodeline": "debug(LOG_DEBUG, \"preauthenticated: foreign host [%s] detected\", host);"
    },
    {
        "line": 141,
        "fullcodeline": "debug(LOG_DEBUG, \"authdir url detected: %s\", url);"
    },
    {
        "line": 143,
        "fullcodeline": "redirect_url = safe_calloc(REDIRECT_URL);"
    },
    {
        "line": 144,
        "fullcodeline": "redirect_url = get_redirect_url(connection);"
    },
    {
        "line": 172,
        "fullcodeline": "ret = authenticate_client(connection, redirect_url, client);"
    },
    {
        "line": 45,
        "fullcodeline": "if (strcmp(config->gw_fqdn, \"disable\") == 0 || strcmp(config->gw_fqdn, \"disabled\") == 0) {"
    },
    {
        "line": 57,
        "fullcodeline": "if (!querystr) {"
    },
    {
        "line": 71,
        "fullcodeline": "if (!captive_json) {"
    },
    {
        "line": 94,
        "fullcodeline": "if (strcmp(host, config->gw_address) == 0 || strcmp(host, config->gw_ip) == 0 || strcmp(host, config->gw_fqdn) == 0) {"
    },
    {
        "line": 105,
        "fullcodeline": "if (!query) {"
    },
    {
        "line": 121,
        "fullcodeline": "return send_error(connection, 511);"
    },
    {
        "line": 130,
        "fullcodeline": "return redirect_to_splashpage(connection, client, host, \"/\");"
    },
    {
        "line": 136,
        "fullcodeline": "return redirect_to_splashpage(connection, client, host, url);"
    },
    {
        "line": 146,
        "fullcodeline": "if (redirect_url == NULL) {"
    },
    {
        "line": 150,
        "fullcodeline": "if (!try_to_authenticate(connection, client, host, url)) {"
    },
    {
        "line": 46,
        "fullcodeline": "safe_asprintf(&originurl_raw, \"http://%s\", config->gw_ip);"
    },
    {
        "line": 58,
        "fullcodeline": "ret = send_error(connection, 503);"
    },
    {
        "line": 59,
        "fullcodeline": "free(originurl);"
    },
    {
        "line": 60,
        "fullcodeline": "free(originurl_raw);"
    },
    {
        "line": 61,
        "fullcodeline": "free(querystr);"
    },
    {
        "line": 72,
        "fullcodeline": "ret = send_error(connection, 503);"
    },
    {
        "line": 73,
        "fullcodeline": "free(originurl);"
    },
    {
        "line": 74,
        "fullcodeline": "free(originurl_raw);"
    },
    {
        "line": 75,
        "fullcodeline": "free(querystr);"
    },
    {
        "line": 76,
        "fullcodeline": "free(captive_json);"
    },
    {
        "line": 106,
        "fullcodeline": "ret = send_error(connection, 503);"
    },
    {
        "line": 107,
        "fullcodeline": "free(query);"
    },
    {
        "line": 152,
        "fullcodeline": "originurl = safe_calloc(REDIRECT_URL_ENC_BUF);"
    },
    {
        "line": 153,
        "fullcodeline": "uh_urlencode(originurl, REDIRECT_URL_ENC_BUF, redirect_url, strlen(redirect_url));"
    },
    {
        "line": 155,
        "fullcodeline": "querystr = safe_calloc(QUERYMAXLEN);"
    },
    {
        "line": 164,
        "fullcodeline": "querystr = construct_querystring(connection, client, originurl, querystr);"
    },
    {
        "line": 166,
        "fullcodeline": "ret = encode_and_redirect_to_splashpage(connection, client, originurl, querystr);"
    },
    {
        "line": 167,
        "fullcodeline": "free(originurl);"
    },
    {
        "line": 168,
        "fullcodeline": "free(querystr);"
    },
    {
        "line": 48,
        "fullcodeline": "safe_asprintf(&originurl_raw, \"http://%s\", config->gw_fqdn);"
    },
    {
        "line": 95,
        "fullcodeline": "return send_error(connection, 511);"
    },
    {
        "line": 147,
        "fullcodeline": "return send_error(connection, 403);"
    },
    {
        "line": 157,
        "fullcodeline": "if (!querystr) {"
    },
    {
        "line": 158,
        "fullcodeline": "ret = send_error(connection, 503);"
    },
    {
        "line": 159,
        "fullcodeline": "free(originurl);"
    },
    {
        "line": 160,
        "fullcodeline": "free(querystr);"
    }
]