[
    {
        "line": 4,
        "fullcodeline": "struct mem_cgroup *memcg = mem_cgroup_from_cont(cgrp);"
    },
    {
        "line": 7,
        "fullcodeline": "int type = MEMFILE_TYPE(cft->private);"
    },
    {
        "line": 11,
        "fullcodeline": "mutex_lock(&memcg->thresholds_lock);"
    },
    {
        "line": 23,
        "fullcodeline": "BUG_ON(!thresholds);"
    },
    {
        "line": 28,
        "fullcodeline": "usage = mem_cgroup_usage(memcg, type == _MEMSWAP);"
    },
    {
        "line": 31,
        "fullcodeline": "__mem_cgroup_threshold(memcg, type == _MEMSWAP);"
    },
    {
        "line": 34,
        "fullcodeline": "size = 0;"
    },
    {
        "line": 40,
        "fullcodeline": "new = thresholds->spare;"
    },
    {
        "line": 49,
        "fullcodeline": "new->size = size;"
    },
    {
        "line": 52,
        "fullcodeline": "new->current_threshold = -1;"
    },
    {
        "line": 71,
        "fullcodeline": "thresholds->spare = thresholds->primary;"
    },
    {
        "line": 72,
        "fullcodeline": "rcu_assign_pointer(thresholds->primary, new);"
    },
    {
        "line": 75,
        "fullcodeline": "synchronize_rcu();"
    },
    {
        "line": 77,
        "fullcodeline": "mutex_unlock(&memcg->thresholds_lock);"
    },
    {
        "line": 12,
        "fullcodeline": "if (type == _MEM)"
    },
    {
        "line": 25,
        "fullcodeline": "if (!thresholds->primary)"
    },
    {
        "line": 35,
        "fullcodeline": "for (i = 0; i < thresholds->primary->size; i++) {"
    },
    {
        "line": 43,
        "fullcodeline": "if (!size) {"
    },
    {
        "line": 53,
        "fullcodeline": "for (i = 0, j = 0; i < thresholds->primary->size; i++) {"
    },
    {
        "line": 13,
        "fullcodeline": "thresholds = &memcg->thresholds;"
    },
    {
        "line": 44,
        "fullcodeline": "kfree(new);"
    },
    {
        "line": 45,
        "fullcodeline": "new = NULL;"
    },
    {
        "line": 57,
        "fullcodeline": "new->entries[j] = thresholds->primary->entries[i];"
    },
    {
        "line": 66,
        "fullcodeline": "j++;"
    },
    {
        "line": 36,
        "fullcodeline": "if (thresholds->primary->entries[i].eventfd != eventfd)"
    },
    {
        "line": 54,
        "fullcodeline": "if (thresholds->primary->entries[i].eventfd == eventfd)"
    },
    {
        "line": 58,
        "fullcodeline": "if (new->entries[j].threshold < usage) {"
    },
    {
        "line": 14,
        "fullcodeline": "else if (type == _MEMSWAP)"
    },
    {
        "line": 37,
        "fullcodeline": "size++;"
    },
    {
        "line": 64,
        "fullcodeline": "++new->current_threshold;"
    },
    {
        "line": 15,
        "fullcodeline": "thresholds = &memcg->memsw_thresholds;"
    },
    {
        "line": 17,
        "fullcodeline": "BUG();"
    }
]