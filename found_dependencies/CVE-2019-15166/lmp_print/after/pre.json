[
    {
        "line": 17,
        "fullcodeline": "tptr=pptr;"
    },
    {
        "line": 18,
        "fullcodeline": "lmp_com_header = (const struct lmp_common_header *)pptr;"
    },
    {
        "line": 19,
        "fullcodeline": "ND_TCHECK(*lmp_com_header);"
    },
    {
        "line": 41,
        "fullcodeline": "tlen=EXTRACT_16BITS(lmp_com_header->length);"
    },
    {
        "line": 57,
        "fullcodeline": "tptr+=sizeof(const struct lmp_common_header);"
    },
    {
        "line": 58,
        "fullcodeline": "tlen-=sizeof(const struct lmp_common_header);"
    },
    {
        "line": 24,
        "fullcodeline": "if (LMP_EXTRACT_VERSION(lmp_com_header->version_res[0]) != LMP_VERSION) {"
    },
    {
        "line": 31,
        "fullcodeline": "if (ndo->ndo_vflag < 1) {"
    },
    {
        "line": 43,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\tLMPv%u, msg-type: %s, Flags: [%s], length: %u\","
    },
    {
        "line": 48,
        "fullcodeline": "if (tlen < sizeof(const struct lmp_common_header)) {"
    },
    {
        "line": 52,
        "fullcodeline": "if (tlen > len) {"
    },
    {
        "line": 60,
        "fullcodeline": "while(tlen>0) {"
    },
    {
        "line": 717,
        "fullcodeline": "ND_PRINT((ndo, \"%s\", tstr));"
    },
    {
        "line": 25,
        "fullcodeline": "ND_PRINT((ndo, \"LMP version %u packet not supported\","
    },
    {
        "line": 54,
        "fullcodeline": "tlen = len;"
    },
    {
        "line": 62,
        "fullcodeline": "ND_TCHECK2(*tptr, sizeof(struct lmp_object_header));"
    },
    {
        "line": 64,
        "fullcodeline": "lmp_obj_header = (const struct lmp_object_header *)tptr;"
    },
    {
        "line": 65,
        "fullcodeline": "lmp_obj_len=EXTRACT_16BITS(lmp_obj_header->length);"
    },
    {
        "line": 66,
        "fullcodeline": "lmp_obj_ctype=(lmp_obj_header->ctype)&0x7f;"
    },
    {
        "line": 89,
        "fullcodeline": "obj_tptr=tptr+sizeof(struct lmp_object_header);"
    },
    {
        "line": 90,
        "fullcodeline": "obj_tlen=lmp_obj_len-sizeof(struct lmp_object_header);"
    },
    {
        "line": 93,
        "fullcodeline": "ND_TCHECK2(*tptr, lmp_obj_len);"
    },
    {
        "line": 94,
        "fullcodeline": "hexdump=FALSE;"
    },
    {
        "line": 712,
        "fullcodeline": "tptr+=lmp_obj_len;"
    },
    {
        "line": 713,
        "fullcodeline": "tlen-=lmp_obj_len;"
    },
    {
        "line": 32,
        "fullcodeline": "ND_PRINT((ndo, \"LMPv%u %s Message, length: %u\","
    },
    {
        "line": 44,
        "fullcodeline": "LMP_EXTRACT_VERSION(lmp_com_header->version_res[0]),"
    },
    {
        "line": 45,
        "fullcodeline": "tok2str(lmp_msg_type_values, \"unknown, type: %u\",lmp_com_header->msg_type),"
    },
    {
        "line": 46,
        "fullcodeline": "bittok2str(lmp_header_flag_values,\"none\",lmp_com_header->flags),"
    },
    {
        "line": 49,
        "fullcodeline": "ND_PRINT((ndo, \" (too short)\"));"
    },
    {
        "line": 53,
        "fullcodeline": "ND_PRINT((ndo, \" (too long)\"));"
    },
    {
        "line": 68,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t  %s Object (%u), Class-Type: %s (%u) Flags: [%snegotiable], length: %u\","
    },
    {
        "line": 80,
        "fullcodeline": "if (lmp_obj_len < 4) {"
    },
    {
        "line": 84,
        "fullcodeline": "if ((lmp_obj_len % 4) != 0) {"
    },
    {
        "line": 708,
        "fullcodeline": "if (ndo->ndo_vflag > 1 || hexdump==TRUE)"
    },
    {
        "line": 709,
        "fullcodeline": "print_unknown_data(ndo,tptr+sizeof(struct lmp_object_header),\"\\n\\t    \","
    },
    {
        "line": 26,
        "fullcodeline": "LMP_EXTRACT_VERSION(lmp_com_header->version_res[0])));"
    },
    {
        "line": 33,
        "fullcodeline": "LMP_EXTRACT_VERSION(lmp_com_header->version_res[0]),"
    },
    {
        "line": 34,
        "fullcodeline": "tok2str(lmp_msg_type_values, \"unknown (%u)\",lmp_com_header->msg_type),"
    },
    {
        "line": 69,
        "fullcodeline": "tok2str(lmp_obj_values,"
    },
    {
        "line": 73,
        "fullcodeline": "tok2str(lmp_ctype_values,"
    },
    {
        "line": 81,
        "fullcodeline": "ND_PRINT((ndo, \" (too short)\"));"
    },
    {
        "line": 85,
        "fullcodeline": "ND_PRINT((ndo, \" (not a multiple of 4)\"));"
    },
    {
        "line": 703,
        "fullcodeline": "if (ndo->ndo_vflag <= 1)"
    },
    {
        "line": 710,
        "fullcodeline": "lmp_obj_len-sizeof(struct lmp_object_header));"
    },
    {
        "line": 77,
        "fullcodeline": "(lmp_obj_header->ctype)&0x80 ? \"\" : \"non-\","
    },
    {
        "line": 112,
        "fullcodeline": "hexdump=TRUE;"
    },
    {
        "line": 150,
        "fullcodeline": "hexdump=TRUE;"
    },
    {
        "line": 175,
        "fullcodeline": "hexdump=TRUE;"
    },
    {
        "line": 193,
        "fullcodeline": "hexdump=TRUE;"
    },
    {
        "line": 210,
        "fullcodeline": "hexdump=TRUE;"
    },
    {
        "line": 227,
        "fullcodeline": "hexdump=TRUE;"
    },
    {
        "line": 288,
        "fullcodeline": "hexdump=TRUE;"
    },
    {
        "line": 310,
        "fullcodeline": "ret = lmp_print_data_link_subobjs(ndo, obj_tptr, obj_tlen - 12, 12);"
    },
    {
        "line": 333,
        "fullcodeline": "ret = lmp_print_data_link_subobjs(ndo, obj_tptr, obj_tlen - 36, 36);"
    },
    {
        "line": 356,
        "fullcodeline": "ret = lmp_print_data_link_subobjs(ndo, obj_tptr, obj_tlen - 12, 12);"
    },
    {
        "line": 364,
        "fullcodeline": "hexdump=TRUE;"
    },
    {
        "line": 396,
        "fullcodeline": "hexdump=TRUE;"
    },
    {
        "line": 414,
        "fullcodeline": "hexdump=TRUE;"
    },
    {
        "line": 430,
        "fullcodeline": "hexdump=TRUE;"
    },
    {
        "line": 437,
        "fullcodeline": "offset = 0;"
    },
    {
        "line": 464,
        "fullcodeline": "offset = 0;"
    },
    {
        "line": 491,
        "fullcodeline": "offset = 0;"
    },
    {
        "line": 518,
        "fullcodeline": "hexdump=TRUE;"
    },
    {
        "line": 525,
        "fullcodeline": "offset = 0;"
    },
    {
        "line": 535,
        "fullcodeline": "offset = 0;"
    },
    {
        "line": 545,
        "fullcodeline": "offset = 0;"
    },
    {
        "line": 555,
        "fullcodeline": "hexdump=TRUE;"
    },
    {
        "line": 583,
        "fullcodeline": "hexdump=TRUE;"
    },
    {
        "line": 610,
        "fullcodeline": "link_type = EXTRACT_8BITS(obj_tptr);"
    },
    {
        "line": 697,
        "fullcodeline": "hexdump = TRUE;"
    },
    {
        "line": 704,
        "fullcodeline": "print_unknown_data(ndo,obj_tptr,\"\\n\\t    \",obj_tlen);"
    },
    {
        "line": 75,
        "fullcodeline": "((lmp_obj_header->class_num)<<8)+lmp_obj_ctype),"
    },
    {
        "line": 106,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t    Control Channel ID: %u (0x%08x)\","
    },
    {
        "line": 125,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t    IPv4 Link ID: %s (0x%08x)\","
    },
    {
        "line": 135,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t    IPv6 Link ID: %s (0x%08x)\","
    },
    {
        "line": 145,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t    Link ID: %u (0x%08x)\","
    },
    {
        "line": 161,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t    Message ID: %u (0x%08x)\","
    },
    {
        "line": 170,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t    Message ID Ack: %u (0x%08x)\","
    },
    {
        "line": 187,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t    Node ID: %s (0x%08x)\","
    },
    {
        "line": 204,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t    Hello Interval: %u\\n\\t    Hello Dead Interval: %u\","
    },
    {
        "line": 221,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t    Tx Seq: %u, Rx Seq: %u\","
    },
    {
        "line": 238,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t    Flags: [%s]\","
    },
    {
        "line": 243,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t    Local Link-ID: %s (0x%08x)\""
    },
    {
        "line": 256,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t    Flags: [%s]\","
    },
    {
        "line": 261,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t    Local Link-ID: %s (0x%08x)\""
    },
    {
        "line": 274,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t    Flags: [%s]\","
    },
    {
        "line": 279,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t    Local Link-ID: %u (0x%08x)\""
    },
    {
        "line": 295,
        "fullcodeline": "if (obj_tlen < 12) {"
    },
    {
        "line": 299,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t    Flags: [%s]\","
    },
    {
        "line": 303,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t    Local Interface ID: %s (0x%08x)\""
    },
    {
        "line": 311,
        "fullcodeline": "if (ret == -1)"
    },
    {
        "line": 313,
        "fullcodeline": "if (ret == TRUE)"
    },
    {
        "line": 318,
        "fullcodeline": "if (obj_tlen < 36) {"
    },
    {
        "line": 322,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t    Flags: [%s]\","
    },
    {
        "line": 326,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t    Local Interface ID: %s (0x%08x)\""
    },
    {
        "line": 334,
        "fullcodeline": "if (ret == -1)"
    },
    {
        "line": 336,
        "fullcodeline": "if (ret == TRUE)"
    },
    {
        "line": 341,
        "fullcodeline": "if (obj_tlen < 12) {"
    },
    {
        "line": 345,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t    Flags: [%s]\","
    },
    {
        "line": 349,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t    Local Interface ID: %u (0x%08x)\""
    },
    {
        "line": 357,
        "fullcodeline": "if (ret == -1)"
    },
    {
        "line": 359,
        "fullcodeline": "if (ret == TRUE)"
    },
    {
        "line": 375,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t    Flags: %s\","
    },
    {
        "line": 379,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t    Verify Interval: %u\","
    },
    {
        "line": 381,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t    Data links: %u\","
    },
    {
        "line": 383,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t    Encoding type: %s\","
    },
    {
        "line": 385,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t    Verify Transport Mechanism: %u (0x%x)%s\","
    },
    {
        "line": 389,
        "fullcodeline": "bw.i = EXTRACT_32BITS(obj_tptr+12);"
    },
    {
        "line": 390,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t    Transmission Rate: %.3f Mbps\",bw.f*8/1000000));"
    },
    {
        "line": 391,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t    Wavelength: %u\","
    },
    {
        "line": 407,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t    Verify Dead Interval: %u\""
    },
    {
        "line": 425,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t    Verify ID: %u\","
    },
    {
        "line": 566,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t    Error Code: %s\","
    },
    {
        "line": 577,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t    Error Code: %s\","
    },
    {
        "line": 594,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t Flags: %s\","
    },
    {
        "line": 599,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t  UNI Version: %u\","
    },
    {
        "line": 612,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t Link Type: %s (%u)\","
    },
    {
        "line": 635,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t Transparency: %s\","
    },
    {
        "line": 640,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t Contiguous Concatenation Types: %s\","
    },
    {
        "line": 645,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t Minimum NCC: %u\","
    },
    {
        "line": 648,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t Maximum NCC: %u\","
    },
    {
        "line": 651,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t Minimum NVC:%u\","
    },
    {
        "line": 654,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t Maximum NVC:%u\","
    },
    {
        "line": 657,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t    Local Interface ID: %s (0x%08x)\","
    },
    {
        "line": 669,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t Transparency Flags: %s\","
    },
    {
        "line": 675,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t TCM Monitoring Flags: %s\","
    },
    {
        "line": 689,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t Diversity: Flags: %s\","
    },
    {
        "line": 314,
        "fullcodeline": "hexdump=TRUE;"
    },
    {
        "line": 337,
        "fullcodeline": "hexdump=TRUE;"
    },
    {
        "line": 360,
        "fullcodeline": "hexdump=TRUE;"
    },
    {
        "line": 459,
        "fullcodeline": "offset+=8;"
    },
    {
        "line": 486,
        "fullcodeline": "offset+=20;"
    },
    {
        "line": 513,
        "fullcodeline": "offset+=8;"
    },
    {
        "line": 530,
        "fullcodeline": "offset+=4;"
    },
    {
        "line": 540,
        "fullcodeline": "offset+=16;"
    },
    {
        "line": 550,
        "fullcodeline": "offset+=4;"
    },
    {
        "line": 103,
        "fullcodeline": "ND_PRINT((ndo, \" (not correct for object)\"));"
    },
    {
        "line": 107,
        "fullcodeline": "EXTRACT_32BITS(obj_tptr),"
    },
    {
        "line": 108,
        "fullcodeline": "EXTRACT_32BITS(obj_tptr)));"
    },
    {
        "line": 122,
        "fullcodeline": "ND_PRINT((ndo, \" (not correct for object)\"));"
    },
    {
        "line": 126,
        "fullcodeline": "ipaddr_string(ndo, obj_tptr),"
    },
    {
        "line": 127,
        "fullcodeline": "EXTRACT_32BITS(obj_tptr)));"
    },
    {
        "line": 132,
        "fullcodeline": "ND_PRINT((ndo, \" (not correct for object)\"));"
    },
    {
        "line": 136,
        "fullcodeline": "ip6addr_string(ndo, obj_tptr),"
    },
    {
        "line": 137,
        "fullcodeline": "EXTRACT_32BITS(obj_tptr)));"
    },
    {
        "line": 142,
        "fullcodeline": "ND_PRINT((ndo, \" (not correct for object)\"));"
    },
    {
        "line": 146,
        "fullcodeline": "EXTRACT_32BITS(obj_tptr),"
    },
    {
        "line": 147,
        "fullcodeline": "EXTRACT_32BITS(obj_tptr)));"
    },
    {
        "line": 158,
        "fullcodeline": "ND_PRINT((ndo, \" (not correct for object)\"));"
    },
    {
        "line": 162,
        "fullcodeline": "EXTRACT_32BITS(obj_tptr),"
    },
    {
        "line": 163,
        "fullcodeline": "EXTRACT_32BITS(obj_tptr)));"
    },
    {
        "line": 167,
        "fullcodeline": "ND_PRINT((ndo, \" (not correct for object)\"));"
    },
    {
        "line": 171,
        "fullcodeline": "EXTRACT_32BITS(obj_tptr),"
    },
    {
        "line": 172,
        "fullcodeline": "EXTRACT_32BITS(obj_tptr)));"
    },
    {
        "line": 184,
        "fullcodeline": "ND_PRINT((ndo, \" (not correct for object)\"));"
    },
    {
        "line": 188,
        "fullcodeline": "ipaddr_string(ndo, obj_tptr),"
    },
    {
        "line": 189,
        "fullcodeline": "EXTRACT_32BITS(obj_tptr)));"
    },
    {
        "line": 201,
        "fullcodeline": "ND_PRINT((ndo, \" (not correct for object)\"));"
    },
    {
        "line": 205,
        "fullcodeline": "EXTRACT_16BITS(obj_tptr),"
    },
    {
        "line": 206,
        "fullcodeline": "EXTRACT_16BITS(obj_tptr+2)));"
    },
    {
        "line": 218,
        "fullcodeline": "ND_PRINT((ndo, \" (not correct for object)\"));"
    },
    {
        "line": 222,
        "fullcodeline": "EXTRACT_32BITS(obj_tptr),"
    },
    {
        "line": 223,
        "fullcodeline": "EXTRACT_32BITS(obj_tptr+4)));"
    },
    {
        "line": 235,
        "fullcodeline": "ND_PRINT((ndo, \" (not correct for object)\"));"
    },
    {
        "line": 239,
        "fullcodeline": "bittok2str(lmp_obj_te_link_flag_values,"
    },
    {
        "line": 245,
        "fullcodeline": "ipaddr_string(ndo, obj_tptr+4),"
    },
    {
        "line": 246,
        "fullcodeline": "EXTRACT_32BITS(obj_tptr+4),"
    },
    {
        "line": 247,
        "fullcodeline": "ipaddr_string(ndo, obj_tptr+8),"
    },
    {
        "line": 248,
        "fullcodeline": "EXTRACT_32BITS(obj_tptr+8)));"
    },
    {
        "line": 253,
        "fullcodeline": "ND_PRINT((ndo, \" (not correct for object)\"));"
    },
    {
        "line": 257,
        "fullcodeline": "bittok2str(lmp_obj_te_link_flag_values,"
    },
    {
        "line": 263,
        "fullcodeline": "ip6addr_string(ndo, obj_tptr+4),"
    },
    {
        "line": 264,
        "fullcodeline": "EXTRACT_32BITS(obj_tptr+4),"
    },
    {
        "line": 265,
        "fullcodeline": "ip6addr_string(ndo, obj_tptr+20),"
    },
    {
        "line": 266,
        "fullcodeline": "EXTRACT_32BITS(obj_tptr+20)));"
    },
    {
        "line": 271,
        "fullcodeline": "ND_PRINT((ndo, \" (not correct for object)\"));"
    },
    {
        "line": 275,
        "fullcodeline": "bittok2str(lmp_obj_te_link_flag_values,"
    },
    {
        "line": 281,
        "fullcodeline": "EXTRACT_32BITS(obj_tptr+4),"
    },
    {
        "line": 282,
        "fullcodeline": "EXTRACT_32BITS(obj_tptr+4),"
    },
    {
        "line": 283,
        "fullcodeline": "EXTRACT_32BITS(obj_tptr+8),"
    },
    {
        "line": 284,
        "fullcodeline": "EXTRACT_32BITS(obj_tptr+8)));"
    },
    {
        "line": 296,
        "fullcodeline": "ND_PRINT((ndo, \" (not correct for object)\"));"
    },
    {
        "line": 300,
        "fullcodeline": "bittok2str(lmp_obj_data_link_flag_values,"
    },
    {
        "line": 305,
        "fullcodeline": "ipaddr_string(ndo, obj_tptr+4),"
    },
    {
        "line": 306,
        "fullcodeline": "EXTRACT_32BITS(obj_tptr+4),"
    },
    {
        "line": 307,
        "fullcodeline": "ipaddr_string(ndo, obj_tptr+8),"
    },
    {
        "line": 308,
        "fullcodeline": "EXTRACT_32BITS(obj_tptr+8)));"
    },
    {
        "line": 319,
        "fullcodeline": "ND_PRINT((ndo, \" (not correct for object)\"));"
    },
    {
        "line": 323,
        "fullcodeline": "bittok2str(lmp_obj_data_link_flag_values,"
    },
    {
        "line": 328,
        "fullcodeline": "ip6addr_string(ndo, obj_tptr+4),"
    },
    {
        "line": 329,
        "fullcodeline": "EXTRACT_32BITS(obj_tptr+4),"
    },
    {
        "line": 330,
        "fullcodeline": "ip6addr_string(ndo, obj_tptr+20),"
    },
    {
        "line": 331,
        "fullcodeline": "EXTRACT_32BITS(obj_tptr+20)));"
    },
    {
        "line": 342,
        "fullcodeline": "ND_PRINT((ndo, \" (not correct for object)\"));"
    },
    {
        "line": 346,
        "fullcodeline": "bittok2str(lmp_obj_data_link_flag_values,"
    },
    {
        "line": 351,
        "fullcodeline": "EXTRACT_32BITS(obj_tptr+4),"
    },
    {
        "line": 352,
        "fullcodeline": "EXTRACT_32BITS(obj_tptr+4),"
    },
    {
        "line": 353,
        "fullcodeline": "EXTRACT_32BITS(obj_tptr+8),"
    },
    {
        "line": 354,
        "fullcodeline": "EXTRACT_32BITS(obj_tptr+8)));"
    },
    {
        "line": 372,
        "fullcodeline": "ND_PRINT((ndo, \" (not correct for object)\"));"
    },
    {
        "line": 376,
        "fullcodeline": "bittok2str(lmp_obj_begin_verify_flag_values,"
    },
    {
        "line": 380,
        "fullcodeline": "EXTRACT_16BITS(obj_tptr+2)));"
    },
    {
        "line": 382,
        "fullcodeline": "EXTRACT_32BITS(obj_tptr+4)));"
    },
    {
        "line": 384,
        "fullcodeline": "tok2str(gmpls_encoding_values, \"Unknown\", *(obj_tptr+8))));"
    },
    {
        "line": 386,
        "fullcodeline": "EXTRACT_16BITS(obj_tptr+10),"
    },
    {
        "line": 387,
        "fullcodeline": "EXTRACT_16BITS(obj_tptr+10),"
    },
    {
        "line": 392,
        "fullcodeline": "EXTRACT_32BITS(obj_tptr+16)));"
    },
    {
        "line": 404,
        "fullcodeline": "ND_PRINT((ndo, \" (not correct for object)\"));"
    },
    {
        "line": 409,
        "fullcodeline": "EXTRACT_16BITS(obj_tptr),"
    },
    {
        "line": 410,
        "fullcodeline": "EXTRACT_16BITS(obj_tptr+2)));"
    },
    {
        "line": 422,
        "fullcodeline": "ND_PRINT((ndo, \" (not correct for object)\"));"
    },
    {
        "line": 426,
        "fullcodeline": "EXTRACT_32BITS(obj_tptr)));"
    },
    {
        "line": 440,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t    Interface ID: %s (0x%08x)\","
    },
    {
        "line": 444,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t\\t    Active: %s (%u)\","
    },
    {
        "line": 449,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t\\t    Direction: %s (%u)\","
    },
    {
        "line": 454,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t\\t    Channel Status: %s (%u)\","
    },
    {
        "line": 467,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t    Interface ID: %s (0x%08x)\","
    },
    {
        "line": 471,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t\\t    Active: %s (%u)\","
    },
    {
        "line": 476,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t\\t    Direction: %s (%u)\","
    },
    {
        "line": 481,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t\\t    Channel Status: %s (%u)\","
    },
    {
        "line": 494,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t    Interface ID: %u (0x%08x)\","
    },
    {
        "line": 498,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t\\t    Active: %s (%u)\","
    },
    {
        "line": 503,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t\\t    Direction: %s (%u)\","
    },
    {
        "line": 508,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t\\t    Channel Status: %s (%u)\","
    },
    {
        "line": 527,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t    Interface ID: %s (0x%08x)\","
    },
    {
        "line": 537,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t    Interface ID: %s (0x%08x)\","
    },
    {
        "line": 547,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t    Interface ID: %u (0x%08x)\","
    },
    {
        "line": 563,
        "fullcodeline": "ND_PRINT((ndo, \" (not correct for object)\"));"
    },
    {
        "line": 567,
        "fullcodeline": "bittok2str(lmp_obj_begin_verify_error_values,"
    },
    {
        "line": 574,
        "fullcodeline": "ND_PRINT((ndo, \" (not correct for object)\"));"
    },
    {
        "line": 578,
        "fullcodeline": "bittok2str(lmp_obj_link_summary_error_values,"
    },
    {
        "line": 591,
        "fullcodeline": "ND_PRINT((ndo, \" (not correct for object)\"));"
    },
    {
        "line": 595,
        "fullcodeline": "bittok2str(lmp_obj_service_config_sp_flag_values,"
    },
    {
        "line": 600,
        "fullcodeline": "EXTRACT_8BITS(obj_tptr + 1)));"
    },
    {
        "line": 606,
        "fullcodeline": "ND_PRINT((ndo, \" (not correct for object)\"));"
    },
    {
        "line": 613,
        "fullcodeline": "tok2str(lmp_sd_service_config_cpsa_link_type_values,"
    },
    {
        "line": 619,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t Signal Type: %s (%u)\","
    },
    {
        "line": 627,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t Signal Type: %s (%u)\","
    },
    {
        "line": 636,
        "fullcodeline": "bittok2str(lmp_obj_service_config_cpsa_tp_flag_values,"
    },
    {
        "line": 641,
        "fullcodeline": "bittok2str(lmp_obj_service_config_cpsa_cct_flag_values,"
    },
    {
        "line": 646,
        "fullcodeline": "EXTRACT_16BITS(obj_tptr+4)));"
    },
    {
        "line": 649,
        "fullcodeline": "EXTRACT_16BITS(obj_tptr+6)));"
    },
    {
        "line": 652,
        "fullcodeline": "EXTRACT_16BITS(obj_tptr+8)));"
    },
    {
        "line": 655,
        "fullcodeline": "EXTRACT_16BITS(obj_tptr+10)));"
    },
    {
        "line": 658,
        "fullcodeline": "ipaddr_string(ndo, obj_tptr+12),"
    },
    {
        "line": 659,
        "fullcodeline": "EXTRACT_32BITS(obj_tptr+12)));"
    },
    {
        "line": 665,
        "fullcodeline": "ND_PRINT((ndo, \" (not correct for object)\"));"
    },
    {
        "line": 670,
        "fullcodeline": "bittok2str("
    },
    {
        "line": 676,
        "fullcodeline": "bittok2str("
    },
    {
        "line": 685,
        "fullcodeline": "ND_PRINT((ndo, \" (not correct for object)\"));"
    },
    {
        "line": 690,
        "fullcodeline": "bittok2str("
    },
    {
        "line": 241,
        "fullcodeline": "EXTRACT_8BITS(obj_tptr))));"
    },
    {
        "line": 259,
        "fullcodeline": "EXTRACT_8BITS(obj_tptr))));"
    },
    {
        "line": 277,
        "fullcodeline": "EXTRACT_8BITS(obj_tptr))));"
    },
    {
        "line": 302,
        "fullcodeline": "EXTRACT_8BITS(obj_tptr))));"
    },
    {
        "line": 325,
        "fullcodeline": "EXTRACT_8BITS(obj_tptr))));"
    },
    {
        "line": 348,
        "fullcodeline": "EXTRACT_8BITS(obj_tptr))));"
    },
    {
        "line": 378,
        "fullcodeline": "EXTRACT_16BITS(obj_tptr))));"
    },
    {
        "line": 388,
        "fullcodeline": "EXTRACT_16BITS(obj_tptr+10)&8000 ? \" (Payload test messages capable)\" : \"\"));"
    },
    {
        "line": 569,
        "fullcodeline": "EXTRACT_32BITS(obj_tptr))));"
    },
    {
        "line": 580,
        "fullcodeline": "EXTRACT_32BITS(obj_tptr))));"
    },
    {
        "line": 597,
        "fullcodeline": "EXTRACT_8BITS(obj_tptr))));"
    },
    {
        "line": 638,
        "fullcodeline": "EXTRACT_8BITS(obj_tptr + 2))));"
    },
    {
        "line": 643,
        "fullcodeline": "EXTRACT_8BITS(obj_tptr + 3))));"
    },
    {
        "line": 673,
        "fullcodeline": "EXTRACT_32BITS(obj_tptr))));"
    },
    {
        "line": 679,
        "fullcodeline": "EXTRACT_8BITS(obj_tptr + 7))));"
    },
    {
        "line": 693,
        "fullcodeline": "EXTRACT_8BITS(obj_tptr + 3))));"
    },
    {
        "line": 441,
        "fullcodeline": "ipaddr_string(ndo, obj_tptr+offset),"
    },
    {
        "line": 442,
        "fullcodeline": "EXTRACT_32BITS(obj_tptr+offset)));"
    },
    {
        "line": 447,
        "fullcodeline": "(EXTRACT_32BITS(obj_tptr+offset+4)>>31)));"
    },
    {
        "line": 452,
        "fullcodeline": "(EXTRACT_32BITS(obj_tptr+offset+4)>>30)&0x1));"
    },
    {
        "line": 455,
        "fullcodeline": "tok2str(lmp_obj_channel_status_values,"
    },
    {
        "line": 458,
        "fullcodeline": "EXTRACT_32BITS(obj_tptr+offset+4)&0x3FFFFFF));"
    },
    {
        "line": 468,
        "fullcodeline": "ip6addr_string(ndo, obj_tptr+offset),"
    },
    {
        "line": 469,
        "fullcodeline": "EXTRACT_32BITS(obj_tptr+offset)));"
    },
    {
        "line": 474,
        "fullcodeline": "(EXTRACT_32BITS(obj_tptr+offset+16)>>31)));"
    },
    {
        "line": 479,
        "fullcodeline": "(EXTRACT_32BITS(obj_tptr+offset+16)>>30)&0x1));"
    },
    {
        "line": 482,
        "fullcodeline": "tok2str(lmp_obj_channel_status_values,"
    },
    {
        "line": 485,
        "fullcodeline": "EXTRACT_32BITS(obj_tptr+offset+16)&0x3FFFFFF));"
    },
    {
        "line": 495,
        "fullcodeline": "EXTRACT_32BITS(obj_tptr+offset),"
    },
    {
        "line": 496,
        "fullcodeline": "EXTRACT_32BITS(obj_tptr+offset)));"
    },
    {
        "line": 501,
        "fullcodeline": "(EXTRACT_32BITS(obj_tptr+offset+4)>>31)));"
    },
    {
        "line": 506,
        "fullcodeline": "(EXTRACT_32BITS(obj_tptr+offset+4)>>30)&0x1));"
    },
    {
        "line": 509,
        "fullcodeline": "tok2str(lmp_obj_channel_status_values,"
    },
    {
        "line": 512,
        "fullcodeline": "EXTRACT_32BITS(obj_tptr+offset+4)&0x3FFFFFF));"
    },
    {
        "line": 528,
        "fullcodeline": "ipaddr_string(ndo, obj_tptr+offset),"
    },
    {
        "line": 529,
        "fullcodeline": "EXTRACT_32BITS(obj_tptr+offset)));"
    },
    {
        "line": 538,
        "fullcodeline": "ip6addr_string(ndo, obj_tptr+offset),"
    },
    {
        "line": 539,
        "fullcodeline": "EXTRACT_32BITS(obj_tptr+offset)));"
    },
    {
        "line": 548,
        "fullcodeline": "EXTRACT_32BITS(obj_tptr+offset),"
    },
    {
        "line": 549,
        "fullcodeline": "EXTRACT_32BITS(obj_tptr+offset)));"
    },
    {
        "line": 620,
        "fullcodeline": "tok2str(lmp_sd_service_config_cpsa_signal_type_sdh_values,"
    },
    {
        "line": 623,
        "fullcodeline": "EXTRACT_8BITS(obj_tptr + 1)));"
    },
    {
        "line": 628,
        "fullcodeline": "tok2str(lmp_sd_service_config_cpsa_signal_type_sonet_values,"
    },
    {
        "line": 631,
        "fullcodeline": "EXTRACT_8BITS(obj_tptr + 1)));"
    },
    {
        "line": 457,
        "fullcodeline": "EXTRACT_32BITS(obj_tptr+offset+4)&0x3FFFFFF),"
    },
    {
        "line": 484,
        "fullcodeline": "EXTRACT_32BITS(obj_tptr+offset+16)&0x3FFFFFF),"
    },
    {
        "line": 511,
        "fullcodeline": "EXTRACT_32BITS(obj_tptr+offset+4)&0x3FFFFFF),"
    },
    {
        "line": 622,
        "fullcodeline": "EXTRACT_8BITS(obj_tptr + 1)),"
    },
    {
        "line": 630,
        "fullcodeline": "EXTRACT_8BITS(obj_tptr + 1)),"
    },
    {
        "line": 445,
        "fullcodeline": "(EXTRACT_32BITS(obj_tptr+offset+4)>>31) ?"
    },
    {
        "line": 450,
        "fullcodeline": "(EXTRACT_32BITS(obj_tptr+offset+4)>>30)&0x1 ?"
    },
    {
        "line": 472,
        "fullcodeline": "(EXTRACT_32BITS(obj_tptr+offset+16)>>31) ?"
    },
    {
        "line": 477,
        "fullcodeline": "(EXTRACT_32BITS(obj_tptr+offset+16)>>30)&0x1 ?"
    },
    {
        "line": 499,
        "fullcodeline": "(EXTRACT_32BITS(obj_tptr+offset+4)>>31) ?"
    },
    {
        "line": 504,
        "fullcodeline": "(EXTRACT_32BITS(obj_tptr+offset+4)>>30)&0x1 ?"
    }
]