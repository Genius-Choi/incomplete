[
    {
        "line": 41,
        "fullcodeline": "tupdesc = lookup_rowtype_tupdesc(tupType, tupTypmod);"
    },
    {
        "line": 42,
        "fullcodeline": "ncolumns = tupdesc->natts;"
    },
    {
        "line": 48,
        "fullcodeline": "my_extra = (RecordIOData *) fcinfo->flinfo->fn_extra;"
    },
    {
        "line": 72,
        "fullcodeline": "pairs = palloc(ncolumns * sizeof(Pairs));"
    },
    {
        "line": 141,
        "fullcodeline": "ncolumns = hstoreUniquePairs(pairs, j, &buflen);"
    },
    {
        "line": 143,
        "fullcodeline": "out = hstorePairs(pairs, ncolumns, buflen);"
    },
    {
        "line": 145,
        "fullcodeline": "ReleaseTupleDesc(tupdesc);"
    },
    {
        "line": 147,
        "fullcodeline": "PG_RETURN_POINTER(out);"
    },
    {
        "line": 18,
        "fullcodeline": "if (PG_ARGISNULL(0))"
    },
    {
        "line": 49,
        "fullcodeline": "if (my_extra == NULL ||"
    },
    {
        "line": 61,
        "fullcodeline": "if (my_extra->record_type != tupType ||"
    },
    {
        "line": 94,
        "fullcodeline": "for (i = 0, j = 0; i < ncolumns; ++i)"
    },
    {
        "line": 20,
        "fullcodeline": "Oid\t\t\targtype = get_fn_expr_argtype(fcinfo->flinfo, 0);"
    },
    {
        "line": 27,
        "fullcodeline": "tupType = argtype;"
    },
    {
        "line": 28,
        "fullcodeline": "tupTypmod = -1;"
    },
    {
        "line": 30,
        "fullcodeline": "rec = NULL;"
    },
    {
        "line": 50,
        "fullcodeline": "my_extra->ncolumns != ncolumns)"
    },
    {
        "line": 52,
        "fullcodeline": "fcinfo->flinfo->fn_extra ="
    },
    {
        "line": 56,
        "fullcodeline": "my_extra = (RecordIOData *) fcinfo->flinfo->fn_extra;"
    },
    {
        "line": 57,
        "fullcodeline": "my_extra->record_type = InvalidOid;"
    },
    {
        "line": 58,
        "fullcodeline": "my_extra->record_typmod = 0;"
    },
    {
        "line": 62,
        "fullcodeline": "my_extra->record_typmod != tupTypmod)"
    },
    {
        "line": 64,
        "fullcodeline": "MemSet(my_extra, 0,"
    },
    {
        "line": 67,
        "fullcodeline": "my_extra->record_type = tupType;"
    },
    {
        "line": 68,
        "fullcodeline": "my_extra->record_typmod = tupTypmod;"
    },
    {
        "line": 69,
        "fullcodeline": "my_extra->ncolumns = ncolumns;"
    },
    {
        "line": 77,
        "fullcodeline": "tuple.t_len = HeapTupleHeaderGetDatumLength(rec);"
    },
    {
        "line": 78,
        "fullcodeline": "ItemPointerSetInvalid(&(tuple.t_self));"
    },
    {
        "line": 79,
        "fullcodeline": "tuple.t_tableOid = InvalidOid;"
    },
    {
        "line": 80,
        "fullcodeline": "tuple.t_data = rec;"
    },
    {
        "line": 82,
        "fullcodeline": "values = (Datum *) palloc(ncolumns * sizeof(Datum));"
    },
    {
        "line": 83,
        "fullcodeline": "nulls = (bool *) palloc(ncolumns * sizeof(bool));"
    },
    {
        "line": 86,
        "fullcodeline": "heap_deform_tuple(&tuple, tupdesc, values, nulls);"
    },
    {
        "line": 96,
        "fullcodeline": "ColumnIOData *column_info = &my_extra->columns[i];"
    },
    {
        "line": 97,
        "fullcodeline": "Oid\t\t\tcolumn_type = tupdesc->attrs[i]->atttypid;"
    },
    {
        "line": 104,
        "fullcodeline": "pairs[j].key = NameStr(tupdesc->attrs[i]->attname);"
    },
    {
        "line": 105,
        "fullcodeline": "pairs[j].keylen = hstoreCheckKeyLen(strlen(NameStr(tupdesc->attrs[i]->attname)));"
    },
    {
        "line": 132,
        "fullcodeline": "value = OutputFunctionCall(&column_info->proc, values[i]);"
    },
    {
        "line": 134,
        "fullcodeline": "pairs[j].val = value;"
    },
    {
        "line": 135,
        "fullcodeline": "pairs[j].vallen = hstoreCheckValLen(strlen(value));"
    },
    {
        "line": 136,
        "fullcodeline": "pairs[j].isnull = false;"
    },
    {
        "line": 137,
        "fullcodeline": "pairs[j].needfree = false;"
    },
    {
        "line": 138,
        "fullcodeline": "++j;"
    },
    {
        "line": 34,
        "fullcodeline": "rec = PG_GETARG_HEAPTUPLEHEADER(0);"
    },
    {
        "line": 37,
        "fullcodeline": "tupType = HeapTupleHeaderGetTypeId(rec);"
    },
    {
        "line": 38,
        "fullcodeline": "tupTypmod = HeapTupleHeaderGetTypMod(rec);"
    },
    {
        "line": 53,
        "fullcodeline": "MemoryContextAlloc(fcinfo->flinfo->fn_mcxt,"
    },
    {
        "line": 65,
        "fullcodeline": "sizeof(RecordIOData) - sizeof(ColumnIOData)"
    },
    {
        "line": 90,
        "fullcodeline": "values = NULL;"
    },
    {
        "line": 91,
        "fullcodeline": "nulls = NULL;"
    },
    {
        "line": 107,
        "fullcodeline": "if (!nulls || nulls[i])"
    },
    {
        "line": 120,
        "fullcodeline": "if (column_info->column_type != column_type)"
    },
    {
        "line": 54,
        "fullcodeline": "sizeof(RecordIOData) - sizeof(ColumnIOData)"
    },
    {
        "line": 66,
        "fullcodeline": "+ ncolumns * sizeof(ColumnIOData));"
    },
    {
        "line": 109,
        "fullcodeline": "pairs[j].val = NULL;"
    },
    {
        "line": 110,
        "fullcodeline": "pairs[j].vallen = 4;"
    },
    {
        "line": 111,
        "fullcodeline": "pairs[j].isnull = true;"
    },
    {
        "line": 112,
        "fullcodeline": "pairs[j].needfree = false;"
    },
    {
        "line": 113,
        "fullcodeline": "++j;"
    },
    {
        "line": 124,
        "fullcodeline": "getTypeOutputInfo(column_type,"
    },
    {
        "line": 127,
        "fullcodeline": "fmgr_info_cxt(column_info->typiofunc, &column_info->proc,"
    },
    {
        "line": 129,
        "fullcodeline": "column_info->column_type = column_type;"
    },
    {
        "line": 55,
        "fullcodeline": "+ ncolumns * sizeof(ColumnIOData));"
    }
]