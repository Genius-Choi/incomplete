[
    {
        "line": 14,
        "fullcodeline": "state.buffer = buf;"
    },
    {
        "line": 15,
        "fullcodeline": "state.buf = buf;"
    },
    {
        "line": 16,
        "fullcodeline": "state.state = (isplain) ? WAITSINGLEOPERAND : WAITFIRSTOPERAND;"
    },
    {
        "line": 17,
        "fullcodeline": "state.count = 0;"
    },
    {
        "line": 18,
        "fullcodeline": "state.polstr = NIL;"
    },
    {
        "line": 21,
        "fullcodeline": "state.valstate = init_tsvector_parser(state.buffer, true, true);"
    },
    {
        "line": 24,
        "fullcodeline": "state.sumlen = 0;"
    },
    {
        "line": 25,
        "fullcodeline": "state.lenop = 64;"
    },
    {
        "line": 26,
        "fullcodeline": "state.curop = state.op = (char *) palloc(state.lenop);"
    },
    {
        "line": 27,
        "fullcodeline": "*(state.curop) = '\\0';"
    },
    {
        "line": 30,
        "fullcodeline": "makepol(&state, pushval, opaque);"
    },
    {
        "line": 32,
        "fullcodeline": "close_tsvector_parser(state.valstate);"
    },
    {
        "line": 49,
        "fullcodeline": "commonlen = COMPUTESIZE(list_length(state.polstr), state.sumlen);"
    },
    {
        "line": 52,
        "fullcodeline": "query = (TSQuery) palloc0(commonlen);"
    },
    {
        "line": 53,
        "fullcodeline": "SET_VARSIZE(query, commonlen);"
    },
    {
        "line": 54,
        "fullcodeline": "query->size = list_length(state.polstr);"
    },
    {
        "line": 55,
        "fullcodeline": "ptr = GETQUERY(query);"
    },
    {
        "line": 58,
        "fullcodeline": "i = 0;"
    },
    {
        "line": 59,
        "fullcodeline": "foreach(cell, state.polstr)"
    },
    {
        "line": 81,
        "fullcodeline": "memcpy((void *) GETOPERAND(query), (void *) state.op, state.sumlen);"
    },
    {
        "line": 82,
        "fullcodeline": "pfree(state.op);"
    },
    {
        "line": 85,
        "fullcodeline": "findoprnd(ptr, query->size);"
    },
    {
        "line": 34,
        "fullcodeline": "if (list_length(state.polstr) == 0)"
    },
    {
        "line": 45,
        "fullcodeline": "if (TSQUERY_TOO_BIG(list_length(state.polstr), state.sumlen))"
    },
    {
        "line": 61,
        "fullcodeline": "QueryItem  *item = (QueryItem *) lfirst(cell);"
    },
    {
        "line": 77,
        "fullcodeline": "i++;"
    },
    {
        "line": 36,
        "fullcodeline": "ereport(NOTICE,"
    },
    {
        "line": 39,
        "fullcodeline": "query = (TSQuery) palloc(HDRSIZETQ);"
    },
    {
        "line": 40,
        "fullcodeline": "SET_VARSIZE(query, HDRSIZETQ);"
    },
    {
        "line": 41,
        "fullcodeline": "query->size = 0;"
    },
    {
        "line": 46,
        "fullcodeline": "ereport(ERROR,"
    },
    {
        "line": 37,
        "fullcodeline": "(errmsg(\"text-search query doesn't contain lexemes: \\\"%s\\\"\","
    },
    {
        "line": 47,
        "fullcodeline": "(errcode(ERRCODE_PROGRAM_LIMIT_EXCEEDED),"
    },
    {
        "line": 66,
        "fullcodeline": "memcpy(&ptr[i], item, sizeof(QueryOperand));"
    },
    {
        "line": 69,
        "fullcodeline": "ptr[i].type = QI_VALSTOP;"
    },
    {
        "line": 72,
        "fullcodeline": "memcpy(&ptr[i], item, sizeof(QueryOperator));"
    },
    {
        "line": 75,
        "fullcodeline": "elog(ERROR, \"unrecognized QueryItem type: %d\", item->type);"
    },
    {
        "line": 48,
        "fullcodeline": "errmsg(\"tsquery is too large\")));"
    }
]