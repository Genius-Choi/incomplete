[
    {
        "line": 3,
        "fullcodeline": "char\t   *buf = (char *) PG_GETARG_POINTER(0);"
    },
    {
        "line": 5,
        "fullcodeline": "int\t\t\tnum = 0,"
    },
    {
        "line": 6,
        "fullcodeline": "totallen = 0,"
    },
    {
        "line": 7,
        "fullcodeline": "numOR = 0;"
    },
    {
        "line": 8,
        "fullcodeline": "int\t\t\tstate = LQPRS_WAITLEVEL;"
    },
    {
        "line": 10,
        "fullcodeline": "nodeitem   *lptr = NULL;"
    },
    {
        "line": 14,
        "fullcodeline": "lquery_variant *lrptr = NULL;"
    },
    {
        "line": 15,
        "fullcodeline": "bool\t\thasnot = false;"
    },
    {
        "line": 16,
        "fullcodeline": "bool\t\twasbad = false;"
    },
    {
        "line": 18,
        "fullcodeline": "int\t\t\tpos = 0;"
    },
    {
        "line": 20,
        "fullcodeline": "ptr = buf;"
    },
    {
        "line": 36,
        "fullcodeline": "num++;"
    },
    {
        "line": 42,
        "fullcodeline": "curqlevel = tmpql = (lquery_level *) palloc0(ITEMSIZE * num);"
    },
    {
        "line": 43,
        "fullcodeline": "ptr = buf;"
    },
    {
        "line": 261,
        "fullcodeline": "curqlevel = tmpql;"
    },
    {
        "line": 262,
        "fullcodeline": "totallen = LQUERY_HDRSIZE;"
    },
    {
        "line": 285,
        "fullcodeline": "result = (lquery *) palloc0(totallen);"
    },
    {
        "line": 286,
        "fullcodeline": "SET_VARSIZE(result, totallen);"
    },
    {
        "line": 287,
        "fullcodeline": "result->numlevel = num;"
    },
    {
        "line": 288,
        "fullcodeline": "result->firstgood = 0;"
    },
    {
        "line": 289,
        "fullcodeline": "result->flag = 0;"
    },
    {
        "line": 292,
        "fullcodeline": "cur = LQUERY_FIRST(result);"
    },
    {
        "line": 293,
        "fullcodeline": "curqlevel = tmpql;"
    },
    {
        "line": 324,
        "fullcodeline": "pfree(tmpql);"
    },
    {
        "line": 325,
        "fullcodeline": "PG_RETURN_POINTER(result);"
    },
    {
        "line": 37,
        "fullcodeline": "if (num > MaxAllocSize / ITEMSIZE)"
    },
    {
        "line": 227,
        "fullcodeline": "if (state == LQPRS_WAITDELIM)"
    },
    {
        "line": 294,
        "fullcodeline": "while ((char *) curqlevel - (char *) tmpql < num * ITEMSIZE)"
    },
    {
        "line": 23,
        "fullcodeline": "charlen = pg_mblen(ptr);"
    },
    {
        "line": 33,
        "fullcodeline": "ptr += charlen;"
    },
    {
        "line": 38,
        "fullcodeline": "ereport(ERROR,"
    },
    {
        "line": 46,
        "fullcodeline": "charlen = pg_mblen(ptr);"
    },
    {
        "line": 221,
        "fullcodeline": "ptr += charlen;"
    },
    {
        "line": 224,
        "fullcodeline": "pos++;"
    },
    {
        "line": 235,
        "fullcodeline": "lptr->len = ptr - lptr->start -"
    },
    {
        "line": 263,
        "fullcodeline": "while ((char *) curqlevel - (char *) tmpql < num * ITEMSIZE)"
    },
    {
        "line": 265,
        "fullcodeline": "totallen += LQL_HDRSIZE;"
    },
    {
        "line": 282,
        "fullcodeline": "curqlevel = NEXTLEV(curqlevel);"
    },
    {
        "line": 291,
        "fullcodeline": "result->flag |= LQUERY_HASNOT;"
    },
    {
        "line": 296,
        "fullcodeline": "memcpy(cur, curqlevel, LQL_HDRSIZE);"
    },
    {
        "line": 297,
        "fullcodeline": "cur->totallen = LQL_HDRSIZE;"
    },
    {
        "line": 320,
        "fullcodeline": "curqlevel = NEXTLEV(curqlevel);"
    },
    {
        "line": 321,
        "fullcodeline": "cur = LQL_NEXT(cur);"
    },
    {
        "line": 25,
        "fullcodeline": "if (charlen == 1)"
    },
    {
        "line": 39,
        "fullcodeline": "(errcode(ERRCODE_PROGRAM_LIMIT_EXCEEDED),"
    },
    {
        "line": 48,
        "fullcodeline": "if (state == LQPRS_WAITLEVEL)"
    },
    {
        "line": 222,
        "fullcodeline": "if (state == LQPRS_WAITDELIM)"
    },
    {
        "line": 229,
        "fullcodeline": "if (lptr->start == ptr)"
    },
    {
        "line": 239,
        "fullcodeline": "if (lptr->len == 0)"
    },
    {
        "line": 245,
        "fullcodeline": "if (lptr->wlen > 255)"
    },
    {
        "line": 223,
        "fullcodeline": "lptr->wlen++;"
    },
    {
        "line": 230,
        "fullcodeline": "ereport(ERROR,"
    },
    {
        "line": 238,
        "fullcodeline": "((lptr->flag & LVAR_ANYEND) ? 1 : 0);"
    },
    {
        "line": 240,
        "fullcodeline": "ereport(ERROR,"
    },
    {
        "line": 246,
        "fullcodeline": "ereport(ERROR,"
    },
    {
        "line": 253,
        "fullcodeline": "else if (state == LQPRS_WAITOPEN)"
    },
    {
        "line": 268,
        "fullcodeline": "lptr = GETVAR(curqlevel);"
    },
    {
        "line": 300,
        "fullcodeline": "lrptr = LQL_FIRST(cur);"
    },
    {
        "line": 301,
        "fullcodeline": "lptr = GETVAR(curqlevel);"
    },
    {
        "line": 312,
        "fullcodeline": "pfree(GETVAR(curqlevel));"
    },
    {
        "line": 27,
        "fullcodeline": "if (t_iseq(ptr, '.'))"
    },
    {
        "line": 40,
        "fullcodeline": "errmsg(\"number of levels (%d) exceeds the maximum allowed (%d)\","
    },
    {
        "line": 50,
        "fullcodeline": "if (ISALNUM(ptr))"
    },
    {
        "line": 231,
        "fullcodeline": "(errcode(ERRCODE_SYNTAX_ERROR),"
    },
    {
        "line": 237,
        "fullcodeline": "((lptr->flag & LVAR_INCASE) ? 1 : 0) -"
    },
    {
        "line": 241,
        "fullcodeline": "(errcode(ERRCODE_SYNTAX_ERROR),"
    },
    {
        "line": 247,
        "fullcodeline": "(errcode(ERRCODE_NAME_TOO_LONG),"
    },
    {
        "line": 254,
        "fullcodeline": "curqlevel->high = 0xffff;"
    },
    {
        "line": 269,
        "fullcodeline": "while (lptr - GETVAR(curqlevel) < curqlevel->numvar)"
    },
    {
        "line": 302,
        "fullcodeline": "while (lptr - GETVAR(curqlevel) < curqlevel->numvar)"
    },
    {
        "line": 313,
        "fullcodeline": "if (cur->numvar > 1 || cur->flag != 0)"
    },
    {
        "line": 319,
        "fullcodeline": "wasbad = true;"
    },
    {
        "line": 28,
        "fullcodeline": "num++;"
    },
    {
        "line": 41,
        "fullcodeline": "num, (int) (MaxAllocSize / ITEMSIZE))));"
    },
    {
        "line": 52,
        "fullcodeline": "GETVAR(curqlevel) = lptr = (nodeitem *) palloc0(sizeof(nodeitem) * (numOR + 1));"
    },
    {
        "line": 53,
        "fullcodeline": "lptr->start = ptr;"
    },
    {
        "line": 54,
        "fullcodeline": "state = LQPRS_WAITDELIM;"
    },
    {
        "line": 55,
        "fullcodeline": "curqlevel->numvar = 1;"
    },
    {
        "line": 71,
        "fullcodeline": "else if (state == LQPRS_WAITVAR)"
    },
    {
        "line": 236,
        "fullcodeline": "((lptr->flag & LVAR_SUBLEXEME) ? 1 : 0) -"
    },
    {
        "line": 271,
        "fullcodeline": "totallen += MAXALIGN(LVAR_HDRSIZE + lptr->len);"
    },
    {
        "line": 272,
        "fullcodeline": "lptr++;"
    },
    {
        "line": 275,
        "fullcodeline": "else if (curqlevel->low > curqlevel->high)"
    },
    {
        "line": 304,
        "fullcodeline": "cur->totallen += MAXALIGN(LVAR_HDRSIZE + lptr->len);"
    },
    {
        "line": 305,
        "fullcodeline": "lrptr->len = lptr->len;"
    },
    {
        "line": 306,
        "fullcodeline": "lrptr->flag = lptr->flag;"
    },
    {
        "line": 307,
        "fullcodeline": "lrptr->val = ltree_crc32_sz(lptr->start, lptr->len);"
    },
    {
        "line": 308,
        "fullcodeline": "memcpy(lrptr->name, lptr->start, lptr->len);"
    },
    {
        "line": 309,
        "fullcodeline": "lptr++;"
    },
    {
        "line": 310,
        "fullcodeline": "lrptr = LVAR_NEXT(lrptr);"
    },
    {
        "line": 314,
        "fullcodeline": "wasbad = true;"
    },
    {
        "line": 232,
        "fullcodeline": "errmsg(\"syntax error\"),"
    },
    {
        "line": 233,
        "fullcodeline": "errdetail(\"Unexpected end of line.\")));"
    },
    {
        "line": 242,
        "fullcodeline": "errmsg(\"syntax error\"),"
    },
    {
        "line": 243,
        "fullcodeline": "errdetail(\"Unexpected end of line.\")));"
    },
    {
        "line": 248,
        "fullcodeline": "errmsg(\"name of level is too long\"),"
    },
    {
        "line": 249,
        "fullcodeline": "errdetail(\"Name length is %d, must \""
    },
    {
        "line": 255,
        "fullcodeline": "else if (state != LQPRS_WAITEND)"
    },
    {
        "line": 276,
        "fullcodeline": "ereport(ERROR,"
    },
    {
        "line": 29,
        "fullcodeline": "else if (t_iseq(ptr, '|'))"
    },
    {
        "line": 57,
        "fullcodeline": "else if (charlen == 1 && t_iseq(ptr, '!'))"
    },
    {
        "line": 73,
        "fullcodeline": "if (ISALNUM(ptr))"
    },
    {
        "line": 256,
        "fullcodeline": "ereport(ERROR,"
    },
    {
        "line": 277,
        "fullcodeline": "(errcode(ERRCODE_SYNTAX_ERROR),"
    },
    {
        "line": 315,
        "fullcodeline": "else if (wasbad == false)"
    },
    {
        "line": 30,
        "fullcodeline": "numOR++;"
    },
    {
        "line": 59,
        "fullcodeline": "GETVAR(curqlevel) = lptr = (nodeitem *) palloc0(sizeof(nodeitem) * (numOR + 1));"
    },
    {
        "line": 60,
        "fullcodeline": "lptr->start = ptr + 1;"
    },
    {
        "line": 61,
        "fullcodeline": "state = LQPRS_WAITDELIM;"
    },
    {
        "line": 62,
        "fullcodeline": "curqlevel->numvar = 1;"
    },
    {
        "line": 63,
        "fullcodeline": "curqlevel->flag |= LQL_NOT;"
    },
    {
        "line": 64,
        "fullcodeline": "hasnot = true;"
    },
    {
        "line": 75,
        "fullcodeline": "lptr++;"
    },
    {
        "line": 76,
        "fullcodeline": "lptr->start = ptr;"
    },
    {
        "line": 77,
        "fullcodeline": "state = LQPRS_WAITDELIM;"
    },
    {
        "line": 78,
        "fullcodeline": "curqlevel->numvar++;"
    },
    {
        "line": 83,
        "fullcodeline": "else if (state == LQPRS_WAITDELIM)"
    },
    {
        "line": 257,
        "fullcodeline": "(errcode(ERRCODE_SYNTAX_ERROR),"
    },
    {
        "line": 316,
        "fullcodeline": "(result->firstgood)++;"
    },
    {
        "line": 278,
        "fullcodeline": "errmsg(\"syntax error\"),"
    },
    {
        "line": 279,
        "fullcodeline": "errdetail(\"Low limit(%d) is greater than upper(%d).\","
    },
    {
        "line": 66,
        "fullcodeline": "else if (charlen == 1 && t_iseq(ptr, '*'))"
    },
    {
        "line": 85,
        "fullcodeline": "if (charlen == 1 && t_iseq(ptr, '@'))"
    },
    {
        "line": 258,
        "fullcodeline": "errmsg(\"syntax error\"),"
    },
    {
        "line": 259,
        "fullcodeline": "errdetail(\"Unexpected end of line.\")));"
    },
    {
        "line": 67,
        "fullcodeline": "state = LQPRS_WAITOPEN;"
    },
    {
        "line": 89,
        "fullcodeline": "lptr->flag |= LVAR_INCASE;"
    },
    {
        "line": 90,
        "fullcodeline": "curqlevel->flag |= LVAR_INCASE;"
    },
    {
        "line": 147,
        "fullcodeline": "else if (state == LQPRS_WAITOPEN)"
    },
    {
        "line": 87,
        "fullcodeline": "if (lptr->start == ptr)"
    },
    {
        "line": 92,
        "fullcodeline": "else if (charlen == 1 && t_iseq(ptr, '*'))"
    },
    {
        "line": 149,
        "fullcodeline": "if (charlen == 1 && t_iseq(ptr, '{'))"
    },
    {
        "line": 96,
        "fullcodeline": "lptr->flag |= LVAR_ANYEND;"
    },
    {
        "line": 97,
        "fullcodeline": "curqlevel->flag |= LVAR_ANYEND;"
    },
    {
        "line": 150,
        "fullcodeline": "state = LQPRS_WAITFNUM;"
    },
    {
        "line": 161,
        "fullcodeline": "else if (state == LQPRS_WAITFNUM)"
    },
    {
        "line": 94,
        "fullcodeline": "if (lptr->start == ptr)"
    },
    {
        "line": 99,
        "fullcodeline": "else if (charlen == 1 && t_iseq(ptr, '%'))"
    },
    {
        "line": 151,
        "fullcodeline": "else if (charlen == 1 && t_iseq(ptr, '.'))"
    },
    {
        "line": 163,
        "fullcodeline": "if (charlen == 1 && t_iseq(ptr, ','))"
    },
    {
        "line": 103,
        "fullcodeline": "lptr->flag |= LVAR_SUBLEXEME;"
    },
    {
        "line": 104,
        "fullcodeline": "curqlevel->flag |= LVAR_SUBLEXEME;"
    },
    {
        "line": 153,
        "fullcodeline": "curqlevel->low = 0;"
    },
    {
        "line": 154,
        "fullcodeline": "curqlevel->high = 0xffff;"
    },
    {
        "line": 155,
        "fullcodeline": "curqlevel = NEXTLEV(curqlevel);"
    },
    {
        "line": 156,
        "fullcodeline": "state = LQPRS_WAITLEVEL;"
    },
    {
        "line": 164,
        "fullcodeline": "state = LQPRS_WAITSNUM;"
    },
    {
        "line": 173,
        "fullcodeline": "else if (state == LQPRS_WAITSNUM)"
    },
    {
        "line": 101,
        "fullcodeline": "if (lptr->start == ptr)"
    },
    {
        "line": 106,
        "fullcodeline": "else if (charlen == 1 && t_iseq(ptr, '|'))"
    },
    {
        "line": 165,
        "fullcodeline": "else if (t_isdigit(ptr))"
    },
    {
        "line": 175,
        "fullcodeline": "if (t_isdigit(ptr))"
    },
    {
        "line": 108,
        "fullcodeline": "lptr->len = ptr - lptr->start -"
    },
    {
        "line": 120,
        "fullcodeline": "state = LQPRS_WAITVAR;"
    },
    {
        "line": 167,
        "fullcodeline": "curqlevel->low = atoi(ptr);"
    },
    {
        "line": 168,
        "fullcodeline": "state = LQPRS_WAITND;"
    },
    {
        "line": 177,
        "fullcodeline": "curqlevel->high = atoi(ptr);"
    },
    {
        "line": 178,
        "fullcodeline": "state = LQPRS_WAITCLOSE;"
    },
    {
        "line": 188,
        "fullcodeline": "else if (state == LQPRS_WAITCLOSE)"
    },
    {
        "line": 112,
        "fullcodeline": "if (lptr->wlen > 255)"
    },
    {
        "line": 111,
        "fullcodeline": "((lptr->flag & LVAR_ANYEND) ? 1 : 0);"
    },
    {
        "line": 113,
        "fullcodeline": "ereport(ERROR,"
    },
    {
        "line": 122,
        "fullcodeline": "else if (charlen == 1 && t_iseq(ptr, '.'))"
    },
    {
        "line": 180,
        "fullcodeline": "else if (charlen == 1 && t_iseq(ptr, '}'))"
    },
    {
        "line": 190,
        "fullcodeline": "if (charlen == 1 && t_iseq(ptr, '}'))"
    },
    {
        "line": 110,
        "fullcodeline": "((lptr->flag & LVAR_INCASE) ? 1 : 0) -"
    },
    {
        "line": 114,
        "fullcodeline": "(errcode(ERRCODE_NAME_TOO_LONG),"
    },
    {
        "line": 124,
        "fullcodeline": "lptr->len = ptr - lptr->start -"
    },
    {
        "line": 136,
        "fullcodeline": "state = LQPRS_WAITLEVEL;"
    },
    {
        "line": 137,
        "fullcodeline": "curqlevel = NEXTLEV(curqlevel);"
    },
    {
        "line": 182,
        "fullcodeline": "curqlevel->high = 0xffff;"
    },
    {
        "line": 183,
        "fullcodeline": "state = LQPRS_WAITEND;"
    },
    {
        "line": 191,
        "fullcodeline": "state = LQPRS_WAITEND;"
    },
    {
        "line": 195,
        "fullcodeline": "else if (state == LQPRS_WAITND)"
    },
    {
        "line": 109,
        "fullcodeline": "((lptr->flag & LVAR_SUBLEXEME) ? 1 : 0) -"
    },
    {
        "line": 128,
        "fullcodeline": "if (lptr->wlen > 255)"
    },
    {
        "line": 115,
        "fullcodeline": "errmsg(\"name of level is too long\"),"
    },
    {
        "line": 116,
        "fullcodeline": "errdetail(\"Name length is %d, must \""
    },
    {
        "line": 127,
        "fullcodeline": "((lptr->flag & LVAR_ANYEND) ? 1 : 0);"
    },
    {
        "line": 129,
        "fullcodeline": "ereport(ERROR,"
    },
    {
        "line": 139,
        "fullcodeline": "else if (ISALNUM(ptr))"
    },
    {
        "line": 192,
        "fullcodeline": "else if (!t_isdigit(ptr))"
    },
    {
        "line": 197,
        "fullcodeline": "if (charlen == 1 && t_iseq(ptr, '}'))"
    },
    {
        "line": 126,
        "fullcodeline": "((lptr->flag & LVAR_INCASE) ? 1 : 0) -"
    },
    {
        "line": 130,
        "fullcodeline": "(errcode(ERRCODE_NAME_TOO_LONG),"
    },
    {
        "line": 199,
        "fullcodeline": "curqlevel->high = curqlevel->low;"
    },
    {
        "line": 200,
        "fullcodeline": "state = LQPRS_WAITEND;"
    },
    {
        "line": 207,
        "fullcodeline": "else if (state == LQPRS_WAITEND)"
    },
    {
        "line": 125,
        "fullcodeline": "((lptr->flag & LVAR_SUBLEXEME) ? 1 : 0) -"
    },
    {
        "line": 131,
        "fullcodeline": "errmsg(\"name of level is too long\"),"
    },
    {
        "line": 132,
        "fullcodeline": "errdetail(\"Name length is %d, must \""
    },
    {
        "line": 202,
        "fullcodeline": "else if (charlen == 1 && t_iseq(ptr, ','))"
    },
    {
        "line": 209,
        "fullcodeline": "if (charlen == 1 && t_iseq(ptr, '.'))"
    },
    {
        "line": 219,
        "fullcodeline": "elog(ERROR, \"internal error in parser\");"
    },
    {
        "line": 203,
        "fullcodeline": "state = LQPRS_WAITSNUM;"
    },
    {
        "line": 211,
        "fullcodeline": "state = LQPRS_WAITLEVEL;"
    },
    {
        "line": 212,
        "fullcodeline": "curqlevel = NEXTLEV(curqlevel);"
    },
    {
        "line": 204,
        "fullcodeline": "else if (!t_isdigit(ptr))"
    }
]