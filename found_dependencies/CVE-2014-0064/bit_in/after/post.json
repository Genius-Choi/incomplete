[
    {
        "line": 3,
        "fullcodeline": "char\t   *input_string = PG_GETARG_CSTRING(0);"
    },
    {
        "line": 8,
        "fullcodeline": "int32\t\tatttypmod = PG_GETARG_INT32(2);"
    },
    {
        "line": 17,
        "fullcodeline": "bits8\t\tx = 0;"
    },
    {
        "line": 44,
        "fullcodeline": "slen = strlen(sp);"
    },
    {
        "line": 69,
        "fullcodeline": "len = VARBITTOTALLEN(atttypmod);"
    },
    {
        "line": 71,
        "fullcodeline": "result = (VarBit *) palloc0(len);"
    },
    {
        "line": 72,
        "fullcodeline": "SET_VARSIZE(result, len);"
    },
    {
        "line": 73,
        "fullcodeline": "VARBITLEN(result) = atttypmod;"
    },
    {
        "line": 75,
        "fullcodeline": "r = VARBITS(result);"
    },
    {
        "line": 129,
        "fullcodeline": "PG_RETURN_VARBIT_P(result);"
    },
    {
        "line": 20,
        "fullcodeline": "if (input_string[0] == 'b' || input_string[0] == 'B')"
    },
    {
        "line": 61,
        "fullcodeline": "if (atttypmod <= 0)"
    },
    {
        "line": 22,
        "fullcodeline": "bit_not_hex = true;"
    },
    {
        "line": 23,
        "fullcodeline": "sp = input_string + 1;"
    },
    {
        "line": 46,
        "fullcodeline": "bitlen = slen;"
    },
    {
        "line": 62,
        "fullcodeline": "atttypmod = bitlen;"
    },
    {
        "line": 80,
        "fullcodeline": "x = HIGHBIT;"
    },
    {
        "line": 54,
        "fullcodeline": "bitlen = slen * 4;"
    },
    {
        "line": 81,
        "fullcodeline": "for (; *sp; sp++)"
    },
    {
        "line": 25,
        "fullcodeline": "else if (input_string[0] == 'x' || input_string[0] == 'X')"
    },
    {
        "line": 49,
        "fullcodeline": "if (slen > VARBITMAXLEN / 4)"
    },
    {
        "line": 63,
        "fullcodeline": "else if (bitlen != atttypmod)"
    },
    {
        "line": 91,
        "fullcodeline": "x >>= 1;"
    },
    {
        "line": 102,
        "fullcodeline": "for (bc = 0; *sp; sp++)"
    },
    {
        "line": 27,
        "fullcodeline": "bit_not_hex = false;"
    },
    {
        "line": 28,
        "fullcodeline": "sp = input_string + 1;"
    },
    {
        "line": 50,
        "fullcodeline": "ereport(ERROR,"
    },
    {
        "line": 64,
        "fullcodeline": "ereport(ERROR,"
    },
    {
        "line": 83,
        "fullcodeline": "if (*sp == '1')"
    },
    {
        "line": 92,
        "fullcodeline": "if (x == 0)"
    },
    {
        "line": 36,
        "fullcodeline": "bit_not_hex = true;"
    },
    {
        "line": 37,
        "fullcodeline": "sp = input_string;"
    },
    {
        "line": 51,
        "fullcodeline": "(errcode(ERRCODE_PROGRAM_LIMIT_EXCEEDED),"
    },
    {
        "line": 65,
        "fullcodeline": "(errcode(ERRCODE_STRING_DATA_LENGTH_MISMATCH),"
    },
    {
        "line": 84,
        "fullcodeline": "*r |= x;"
    },
    {
        "line": 94,
        "fullcodeline": "x = HIGHBIT;"
    },
    {
        "line": 95,
        "fullcodeline": "r++;"
    },
    {
        "line": 104,
        "fullcodeline": "if (*sp >= '0' && *sp <= '9')"
    },
    {
        "line": 105,
        "fullcodeline": "x = (bits8) (*sp - '0');"
    },
    {
        "line": 118,
        "fullcodeline": "*r++ |= x;"
    },
    {
        "line": 119,
        "fullcodeline": "bc = 0;"
    },
    {
        "line": 52,
        "fullcodeline": "errmsg(\"bit string length exceeds the maximum allowed (%d)\","
    },
    {
        "line": 66,
        "fullcodeline": "errmsg(\"bit string length %d does not match type bit(%d)\","
    },
    {
        "line": 85,
        "fullcodeline": "else if (*sp != '0')"
    },
    {
        "line": 123,
        "fullcodeline": "*r = x << 4;"
    },
    {
        "line": 124,
        "fullcodeline": "bc = 1;"
    },
    {
        "line": 86,
        "fullcodeline": "ereport(ERROR,"
    },
    {
        "line": 106,
        "fullcodeline": "else if (*sp >= 'A' && *sp <= 'F')"
    },
    {
        "line": 87,
        "fullcodeline": "(errcode(ERRCODE_INVALID_TEXT_REPRESENTATION),"
    },
    {
        "line": 107,
        "fullcodeline": "x = (bits8) (*sp - 'A') + 10;"
    },
    {
        "line": 88,
        "fullcodeline": "errmsg(\"\\\"%c\\\" is not a valid binary digit\","
    },
    {
        "line": 108,
        "fullcodeline": "else if (*sp >= 'a' && *sp <= 'f')"
    },
    {
        "line": 109,
        "fullcodeline": "x = (bits8) (*sp - 'a') + 10;"
    },
    {
        "line": 111,
        "fullcodeline": "ereport(ERROR,"
    },
    {
        "line": 112,
        "fullcodeline": "(errcode(ERRCODE_INVALID_TEXT_REPRESENTATION),"
    },
    {
        "line": 113,
        "fullcodeline": "errmsg(\"\\\"%c\\\" is not a valid hexadecimal digit\","
    }
]