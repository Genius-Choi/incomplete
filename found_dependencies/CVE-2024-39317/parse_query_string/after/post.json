[
    {
        "line": 17,
        "fullcodeline": "is_phrase = False"
    },
    {
        "line": 18,
        "fullcodeline": "tokens = []"
    },
    {
        "line": 15,
        "fullcodeline": "filters, query_string = separate_filters_from_query(query_string)"
    },
    {
        "line": 19,
        "fullcodeline": "if '\"' in query_string:"
    },
    {
        "line": 24,
        "fullcodeline": "for part in parts:"
    },
    {
        "line": 45,
        "fullcodeline": "return filters, search_query"
    },
    {
        "line": 20,
        "fullcodeline": "parts = query_string.split('\"')"
    },
    {
        "line": 22,
        "fullcodeline": "parts = query_string.split(\"'\")"
    },
    {
        "line": 43,
        "fullcodeline": "search_query = zero_terms"
    },
    {
        "line": 25,
        "fullcodeline": "part = part.strip()"
    },
    {
        "line": 35,
        "fullcodeline": "is_phrase = not is_phrase"
    },
    {
        "line": 38,
        "fullcodeline": "if operator == \"or\":"
    },
    {
        "line": 39,
        "fullcodeline": "search_query = OR(tokens)"
    },
    {
        "line": 41,
        "fullcodeline": "search_query = AND(tokens)"
    },
    {
        "line": 29,
        "fullcodeline": "tokens.append(Phrase(part))"
    },
    {
        "line": 31,
        "fullcodeline": "tokens.append("
    },
    {
        "line": 32,
        "fullcodeline": "PlainText(part, operator=operator or PlainText.DEFAULT_OPERATOR)"
    }
]