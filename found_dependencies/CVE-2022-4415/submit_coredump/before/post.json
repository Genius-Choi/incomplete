[
    {
        "line": 6,
        "fullcodeline": "_cleanup_(json_variant_unrefp) JsonVariant *json_metadata = NULL;"
    },
    {
        "line": 7,
        "fullcodeline": "_cleanup_close_ int coredump_fd = -EBADF, coredump_node_fd = -EBADF;"
    },
    {
        "line": 8,
        "fullcodeline": "_cleanup_free_ char *filename = NULL, *coredump_data = NULL;"
    },
    {
        "line": 9,
        "fullcodeline": "_cleanup_free_ char *stacktrace = NULL;"
    },
    {
        "line": 12,
        "fullcodeline": "uint64_t coredump_size = UINT64_MAX, coredump_compressed_size = UINT64_MAX;"
    },
    {
        "line": 13,
        "fullcodeline": "bool truncated = false;"
    },
    {
        "line": 17,
        "fullcodeline": "assert(context);"
    },
    {
        "line": 18,
        "fullcodeline": "assert(iovw);"
    },
    {
        "line": 19,
        "fullcodeline": "assert(input_fd >= 0);"
    },
    {
        "line": 22,
        "fullcodeline": "(void) coredump_vacuum(-1, arg_keep_free, arg_max_use);"
    },
    {
        "line": 25,
        "fullcodeline": "r = save_external_coredump(context, input_fd,"
    },
    {
        "line": 35,
        "fullcodeline": "r = maybe_remove_external_coredump(filename, coredump_node_fd >= 0 ? coredump_compressed_size : coredump_size);"
    },
    {
        "line": 45,
        "fullcodeline": "(void) coredump_vacuum(coredump_node_fd >= 0 ? coredump_node_fd : coredump_fd, arg_keep_free, arg_max_use);"
    },
    {
        "line": 52,
        "fullcodeline": "r = change_uid_gid(context);"
    },
    {
        "line": 72,
        "fullcodeline": "core_message = strjoina(\"Process \", context->meta[META_ARGV_PID],"
    },
    {
        "line": 78,
        "fullcodeline": "core_message = strjoina(core_message, stacktrace ? \"\\n\\n\" : NULL, stacktrace);"
    },
    {
        "line": 85,
        "fullcodeline": "(void) iovw_put_string_field(iovw, \"MESSAGE=\", core_message);"
    },
    {
        "line": 105,
        "fullcodeline": "JSON_VARIANT_OBJECT_FOREACH(module_name, module_json, json_metadata) {"
    },
    {
        "line": 149,
        "fullcodeline": "r = sd_journal_sendv(iovw->iovec, iovw->count);"
    },
    {
        "line": 28,
        "fullcodeline": "if (r < 0)"
    },
    {
        "line": 36,
        "fullcodeline": "if (r < 0)"
    },
    {
        "line": 53,
        "fullcodeline": "if (r < 0)"
    },
    {
        "line": 112,
        "fullcodeline": "t = json_variant_by_key(module_json, \"name\");"
    },
    {
        "line": 116,
        "fullcodeline": "t = json_variant_by_key(module_json, \"version\");"
    },
    {
        "line": 122,
        "fullcodeline": "if (arg_storage == COREDUMP_STORAGE_JOURNAL && coredump_fd >= 0) {"
    },
    {
        "line": 159,
        "fullcodeline": "if (r == -EAGAIN && context->is_journald)"
    },
    {
        "line": 75,
        "fullcodeline": "context->is_journald && filename ? \"\\nCoredump diverted to \" : NULL,"
    },
    {
        "line": 76,
        "fullcodeline": "context->is_journald && filename ? filename : NULL);"
    },
    {
        "line": 83,
        "fullcodeline": "log_dispatch(LOG_ERR, 0, core_message);"
    },
    {
        "line": 88,
        "fullcodeline": "(void) iovw_put_string_field(iovw, \"COREDUMP_TRUNCATED=\", \"1\");"
    },
    {
        "line": 93,
        "fullcodeline": "_cleanup_free_ char *formatted_json = NULL;"
    },
    {
        "line": 95,
        "fullcodeline": "r = json_variant_format(json_metadata, 0, &formatted_json);"
    },
    {
        "line": 99,
        "fullcodeline": "(void) iovw_put_string_field(iovw, \"COREDUMP_PACKAGE_JSON=\", formatted_json);"
    },
    {
        "line": 109,
        "fullcodeline": "if (!path_equal_filename(module_name, context->meta[META_EXE]))"
    },
    {
        "line": 144,
        "fullcodeline": "r = journal_fd_nonblock(true);"
    },
    {
        "line": 154,
        "fullcodeline": "k = journal_fd_nonblock(false);"
    },
    {
        "line": 160,
        "fullcodeline": "log_warning_errno(r, \"Failed to log journal coredump, ignoring: %m\");"
    },
    {
        "line": 54,
        "fullcodeline": "return log_error_errno(r, \"Failed to drop privileges: %m\");"
    },
    {
        "line": 96,
        "fullcodeline": "if (r < 0)"
    },
    {
        "line": 114,
        "fullcodeline": "(void) iovw_put_string_field(iovw, \"COREDUMP_PACKAGE_NAME=\", json_variant_string(t));"
    },
    {
        "line": 118,
        "fullcodeline": "(void) iovw_put_string_field(iovw, \"COREDUMP_PACKAGE_VERSION=\", json_variant_string(t));"
    },
    {
        "line": 145,
        "fullcodeline": "if (r < 0)"
    },
    {
        "line": 155,
        "fullcodeline": "if (k < 0)"
    },
    {
        "line": 161,
        "fullcodeline": "else if (r < 0)"
    },
    {
        "line": 97,
        "fullcodeline": "return log_error_errno(r, \"Failed to format JSON package metadata: %m\");"
    },
    {
        "line": 146,
        "fullcodeline": "return log_error_errno(r, \"Failed to make journal socket non-blocking: %m\");"
    },
    {
        "line": 156,
        "fullcodeline": "return log_error_errno(k, \"Failed to make journal socket blocking: %m\");"
    },
    {
        "line": 162,
        "fullcodeline": "return log_error_errno(r, \"Failed to log coredump: %m\");"
    }
]