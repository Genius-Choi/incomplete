[
    {
        "line": 5,
        "fullcodeline": "assert(context);"
    },
    {
        "line": 6,
        "fullcodeline": "assert(iovw);"
    },
    {
        "line": 7,
        "fullcodeline": "assert(iovw->count >= _META_ARGV_MAX);"
    },
    {
        "line": 34,
        "fullcodeline": "r = parse_pid(context->meta[META_ARGV_PID], &context->pid);"
    },
    {
        "line": 39,
        "fullcodeline": "context->is_pid1 = streq(context->meta[META_ARGV_PID], \"1\") || streq_ptr(unit, SPECIAL_INIT_SCOPE);"
    },
    {
        "line": 40,
        "fullcodeline": "context->is_journald = streq_ptr(unit, SPECIAL_JOURNALD_SERVICE);"
    },
    {
        "line": 11,
        "fullcodeline": "for (size_t n = 0; n < iovw->count; n++) {"
    },
    {
        "line": 35,
        "fullcodeline": "if (r < 0)"
    },
    {
        "line": 12,
        "fullcodeline": "struct iovec *iovec = iovw->iovec + n;"
    },
    {
        "line": 14,
        "fullcodeline": "for (size_t i = 0; i < ELEMENTSOF(meta_field_names); i++) {"
    },
    {
        "line": 31,
        "fullcodeline": "return log_error_errno(SYNTHETIC_ERRNO(EINVAL),"
    },
    {
        "line": 36,
        "fullcodeline": "return log_error_errno(r, \"Failed to parse PID \\\"%s\\\": %m\", context->meta[META_ARGV_PID]);"
    },
    {
        "line": 20,
        "fullcodeline": "assert(((char*) iovec->iov_base)[iovec->iov_len] == 0);"
    },
    {
        "line": 22,
        "fullcodeline": "p = startswith(iovec->iov_base, meta_field_names[i]);"
    },
    {
        "line": 24,
        "fullcodeline": "context->meta[i] = p;"
    }
]