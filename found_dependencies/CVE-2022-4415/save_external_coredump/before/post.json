[
    {
        "line": 11,
        "fullcodeline": "_cleanup_(unlink_and_freep) char *tmp = NULL;"
    },
    {
        "line": 12,
        "fullcodeline": "_cleanup_free_ char *fn = NULL;"
    },
    {
        "line": 13,
        "fullcodeline": "_cleanup_close_ int fd = -EBADF;"
    },
    {
        "line": 20,
        "fullcodeline": "assert(context);"
    },
    {
        "line": 21,
        "fullcodeline": "assert(ret_filename);"
    },
    {
        "line": 22,
        "fullcodeline": "assert(ret_node_fd);"
    },
    {
        "line": 23,
        "fullcodeline": "assert(ret_data_fd);"
    },
    {
        "line": 24,
        "fullcodeline": "assert(ret_size);"
    },
    {
        "line": 25,
        "fullcodeline": "assert(ret_compressed_size);"
    },
    {
        "line": 26,
        "fullcodeline": "assert(ret_truncated);"
    },
    {
        "line": 28,
        "fullcodeline": "r = parse_uid(context->meta[META_ARGV_UID], &uid);"
    },
    {
        "line": 32,
        "fullcodeline": "r = safe_atou64(context->meta[META_ARGV_RLIMIT], &rlimit);"
    },
    {
        "line": 45,
        "fullcodeline": "process_limit = MAX(arg_process_size_max, storage_size_max());"
    },
    {
        "line": 51,
        "fullcodeline": "max_size = MIN(rlimit, process_limit);"
    },
    {
        "line": 53,
        "fullcodeline": "r = make_filename(context, &fn);"
    },
    {
        "line": 57,
        "fullcodeline": "(void) mkdir_parents_label(fn, 0755);"
    },
    {
        "line": 59,
        "fullcodeline": "fd = open_tmpfile_linkable(fn, O_RDWR|O_CLOEXEC, &tmp);"
    },
    {
        "line": 75,
        "fullcodeline": "storage_on_tmpfs = fd_is_temporary_fs(fd) > 0;"
    },
    {
        "line": 117,
        "fullcodeline": "r = copy_bytes(input_fd, fd, max_size, 0);"
    },
    {
        "line": 121,
        "fullcodeline": "truncated = r == 1;"
    },
    {
        "line": 187,
        "fullcodeline": "r = fix_permissions(fd, tmp, fn, context, uid);"
    },
    {
        "line": 197,
        "fullcodeline": "*ret_filename = TAKE_PTR(fn);"
    },
    {
        "line": 198,
        "fullcodeline": "*ret_data_fd = TAKE_FD(fd);"
    },
    {
        "line": 199,
        "fullcodeline": "*ret_size = (uint64_t) st.st_size;"
    },
    {
        "line": 200,
        "fullcodeline": "*ret_truncated = truncated;"
    },
    {
        "line": 29,
        "fullcodeline": "if (r < 0)"
    },
    {
        "line": 33,
        "fullcodeline": "if (r < 0)"
    },
    {
        "line": 36,
        "fullcodeline": "if (rlimit < page_size())"
    },
    {
        "line": 46,
        "fullcodeline": "if (process_limit == 0)"
    },
    {
        "line": 54,
        "fullcodeline": "if (r < 0)"
    },
    {
        "line": 60,
        "fullcodeline": "if (fd < 0)"
    },
    {
        "line": 76,
        "fullcodeline": "if (storage_on_tmpfs && arg_compress) {"
    },
    {
        "line": 118,
        "fullcodeline": "if (r < 0)"
    },
    {
        "line": 188,
        "fullcodeline": "if (r < 0)"
    },
    {
        "line": 191,
        "fullcodeline": "if (fstat(fd, &st) < 0)"
    },
    {
        "line": 194,
        "fullcodeline": "if (lseek(fd, 0, SEEK_SET) == (off_t) -1)"
    },
    {
        "line": 77,
        "fullcodeline": "_cleanup_(sd_bus_flush_close_unrefp) sd_bus *bus = NULL;"
    },
    {
        "line": 78,
        "fullcodeline": "uint64_t cgroup_limit = UINT64_MAX;"
    },
    {
        "line": 83,
        "fullcodeline": "r = sd_bus_default_system(&bus);"
    },
    {
        "line": 104,
        "fullcodeline": "max_size = MIN(cgroup_limit, max_size);"
    },
    {
        "line": 105,
        "fullcodeline": "max_size = LESS_BY(max_size, 1024U) / 2; /* Account for 1KB metadata overhead for compressing */"
    },
    {
        "line": 106,
        "fullcodeline": "max_size = MAX(PROCESS_SIZE_MIN, max_size); /* Impose a lower minimum */"
    },
    {
        "line": 30,
        "fullcodeline": "return log_error_errno(r, \"Failed to parse UID: %m\");"
    },
    {
        "line": 34,
        "fullcodeline": "return log_error_errno(r, \"Failed to parse resource limit '%s': %m\","
    },
    {
        "line": 41,
        "fullcodeline": "return log_info_errno(SYNTHETIC_ERRNO(EBADSLT),"
    },
    {
        "line": 47,
        "fullcodeline": "return log_debug_errno(SYNTHETIC_ERRNO(EBADSLT),"
    },
    {
        "line": 55,
        "fullcodeline": "return log_error_errno(r, \"Failed to determine coredump file name: %m\");"
    },
    {
        "line": 61,
        "fullcodeline": "return log_error_errno(fd, \"Failed to create temporary file for coredump %s: %m\", fn);"
    },
    {
        "line": 84,
        "fullcodeline": "if (r < 0)"
    },
    {
        "line": 111,
        "fullcodeline": "if (statvfs(\"/var/lib/systemd/coredump/\", &sv) >= 0)"
    },
    {
        "line": 119,
        "fullcodeline": "return log_error_errno(r, \"Cannot store coredump of %s (%s): %m\","
    },
    {
        "line": 189,
        "fullcodeline": "return log_error_errno(r, \"Failed to fix permissions and finalize coredump %s into %s: %m\", coredump_tmpfile_name(tmp), fn);"
    },
    {
        "line": 192,
        "fullcodeline": "return log_error_errno(errno, \"Failed to fstat core file %s: %m\", coredump_tmpfile_name(tmp));"
    },
    {
        "line": 195,
        "fullcodeline": "return log_error_errno(errno, \"Failed to seek on coredump %s: %m\", fn);"
    },
    {
        "line": 85,
        "fullcodeline": "log_info_errno(r, \"Failed to connect to system bus, skipping MemoryAvailable check: %m\");"
    },
    {
        "line": 112,
        "fullcodeline": "max_size = MIN((uint64_t)sv.f_frsize * (uint64_t)sv.f_bfree, max_size);"
    },
    {
        "line": 87,
        "fullcodeline": "_cleanup_(sd_bus_error_free) sd_bus_error error = SD_BUS_ERROR_NULL;"
    },
    {
        "line": 89,
        "fullcodeline": "r = sd_bus_get_property_trivial("
    },
    {
        "line": 97,
        "fullcodeline": "if (r < 0)"
    },
    {
        "line": 98,
        "fullcodeline": "log_warning_errno(r,"
    },
    {
        "line": 101,
        "fullcodeline": "bus_error_message(&error, r));"
    }
]