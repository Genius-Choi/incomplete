[
    {
        "line": 3,
        "fullcodeline": "Assert(pnode && (pnode->nop == knopProg || pnode->nop == knopFncDecl));"
    },
    {
        "line": 4,
        "fullcodeline": "FuncInfo *funcInfo = pnode->sxFnc.funcInfo;"
    },
    {
        "line": 5,
        "fullcodeline": "Assert(funcInfo != nullptr);"
    },
    {
        "line": 12,
        "fullcodeline": "Js::ParseableFunctionInfo* deferParseFunction = funcInfo->byteCodeFunction;"
    },
    {
        "line": 13,
        "fullcodeline": "deferParseFunction->SetGrfscr(deferParseFunction->GetGrfscr() | (this->flags & ~fscrDeferredFncExpression));"
    },
    {
        "line": 14,
        "fullcodeline": "deferParseFunction->SetSourceInfo(this->GetCurrentSourceIndex(),"
    },
    {
        "line": 19,
        "fullcodeline": "deferParseFunction->SetInParamsCount(funcInfo->inArgsCount);"
    },
    {
        "line": 39,
        "fullcodeline": "Js::FunctionBody* byteCodeFunction = funcInfo->GetParsedFunctionBody();"
    },
    {
        "line": 43,
        "fullcodeline": "byteCodeFunction->SetDeferredStubs(nullptr);"
    },
    {
        "line": 519,
        "fullcodeline": "byteCodeFunction->SetInitialDefaultEntryPoint();"
    },
    {
        "line": 7,
        "fullcodeline": "if (funcInfo->IsFakeGlobalFunction(this->flags))"
    },
    {
        "line": 16,
        "fullcodeline": "!!(this->flags & fscrEvalCode),"
    },
    {
        "line": 17,
        "fullcodeline": "((this->flags & fscrDynamicCode) && !(this->flags & fscrEvalCode)));"
    },
    {
        "line": 20,
        "fullcodeline": "if (pnode->sxFnc.HasDefaultArguments())"
    },
    {
        "line": 520,
        "fullcodeline": "byteCodeFunction->SetCompileCount(UInt32Math::Add(byteCodeFunction->GetCompileCount(), 1));"
    },
    {
        "line": 22,
        "fullcodeline": "deferParseFunction->SetReportedInParamsCount(pnode->sxFnc.firstDefaultArg + 1);"
    },
    {
        "line": 125,
        "fullcodeline": "InitScopeSlotArray(funcInfo);"
    },
    {
        "line": 126,
        "fullcodeline": "FinalizeRegisters(funcInfo, byteCodeFunction);"
    },
    {
        "line": 131,
        "fullcodeline": "uint innerScopeCount = funcInfo->InnerScopeCount();"
    },
    {
        "line": 145,
        "fullcodeline": "funcInfo->inlineCacheMap = Anew(alloc, FuncInfo::InlineCacheMap,"
    },
    {
        "line": 149,
        "fullcodeline": "funcInfo->rootObjectLoadInlineCacheMap = Anew(alloc, FuncInfo::RootObjectInlineCacheIdMap,"
    },
    {
        "line": 152,
        "fullcodeline": "funcInfo->rootObjectLoadMethodInlineCacheMap = Anew(alloc, FuncInfo::RootObjectInlineCacheIdMap,"
    },
    {
        "line": 155,
        "fullcodeline": "funcInfo->rootObjectStoreInlineCacheMap = Anew(alloc, FuncInfo::RootObjectInlineCacheIdMap,"
    },
    {
        "line": 158,
        "fullcodeline": "funcInfo->referencedPropertyIdToMapIndex = Anew(alloc, FuncInfo::RootObjectInlineCacheIdMap,"
    },
    {
        "line": 162,
        "fullcodeline": "byteCodeFunction->AllocateLiteralRegexArray();"
    },
    {
        "line": 163,
        "fullcodeline": "m_callSiteId = 0;"
    },
    {
        "line": 164,
        "fullcodeline": "m_writer.Begin(byteCodeFunction, alloc, this->DoJitLoopBodies(funcInfo), funcInfo->hasLoop, this->IsInDebugMode());"
    },
    {
        "line": 165,
        "fullcodeline": "this->PushFuncInfo(_u(\"EmitOneFunction\"), funcInfo);"
    },
    {
        "line": 167,
        "fullcodeline": "this->inPrologue = true;"
    },
    {
        "line": 177,
        "fullcodeline": "Scope* currentScope = funcInfo->GetCurrentChildScope();"
    },
    {
        "line": 178,
        "fullcodeline": "Scope* paramScope = funcInfo->GetParamScope();"
    },
    {
        "line": 179,
        "fullcodeline": "Scope* bodyScope = funcInfo->GetBodyScope();"
    },
    {
        "line": 182,
        "fullcodeline": "LoadAllConstants(funcInfo);"
    },
    {
        "line": 183,
        "fullcodeline": "HomeArguments(funcInfo);"
    },
    {
        "line": 293,
        "fullcodeline": "::BeginEmitBlock(pnode->sxFnc.pnodeScopes, this, funcInfo);"
    },
    {
        "line": 295,
        "fullcodeline": "DefineLabels(funcInfo);"
    },
    {
        "line": 316,
        "fullcodeline": "InitSpecialScopeSlots(funcInfo);"
    },
    {
        "line": 329,
        "fullcodeline": "DefineUserVars(funcInfo);"
    },
    {
        "line": 420,
        "fullcodeline": "this->inPrologue = false;"
    },
    {
        "line": 435,
        "fullcodeline": "::EndEmitBlock(pnode->sxFnc.pnodeScopes, this, funcInfo);"
    },
    {
        "line": 455,
        "fullcodeline": "byteCodeFunction->CheckAndSetVarCount(funcInfo->varRegsCount);"
    },
    {
        "line": 456,
        "fullcodeline": "byteCodeFunction->CheckAndSetOutParamMaxDepth(funcInfo->outArgsMaxDepth);"
    },
    {
        "line": 457,
        "fullcodeline": "byteCodeFunction->SetForInLoopDepth(funcInfo->GetMaxForInLoopLevel());"
    },
    {
        "line": 460,
        "fullcodeline": "UInt32Math::Add(funcInfo->varRegsCount, funcInfo->constRegsCount);"
    },
    {
        "line": 478,
        "fullcodeline": "this->MapCacheIdsToPropertyIds(funcInfo);"
    },
    {
        "line": 479,
        "fullcodeline": "this->MapReferencedPropertyIds(funcInfo);"
    },
    {
        "line": 483,
        "fullcodeline": "m_writer.SetCallSiteCount(m_callSiteId);"
    },
    {
        "line": 487,
        "fullcodeline": "m_writer.End();"
    },
    {
        "line": 26,
        "fullcodeline": "deferParseFunction->SetReportedInParamsCount(funcInfo->inArgsCount);"
    },
    {
        "line": 35,
        "fullcodeline": "Assert(!deferParseFunction->IsFunctionBody() || deferParseFunction->GetFunctionBody()->GetByteCode() != nullptr);"
    },
    {
        "line": 47,
        "fullcodeline": "if (!funcInfo->IsGlobalFunction())"
    },
    {
        "line": 63,
        "fullcodeline": "if (byteCodeFunction->DoStackNestedFunc())"
    },
    {
        "line": 172,
        "fullcodeline": "if (funcInfo->IsClassConstructor())"
    },
    {
        "line": 288,
        "fullcodeline": "if (funcInfo->IsGlobalFunction())"
    },
    {
        "line": 297,
        "fullcodeline": "if (pnode->sxFnc.HasNonSimpleParameterList())"
    },
    {
        "line": 331,
        "fullcodeline": "if (pnode->sxFnc.HasNonSimpleParameterList())"
    },
    {
        "line": 352,
        "fullcodeline": "if (paramScope && !paramScope->GetCanMergeWithBodyScope())"
    },
    {
        "line": 415,
        "fullcodeline": "if (pnode->sxFnc.pnodeBodyScope != nullptr)"
    },
    {
        "line": 422,
        "fullcodeline": "if (funcInfo->IsGlobalFunction())"
    },
    {
        "line": 431,
        "fullcodeline": "if (pnode->sxFnc.pnodeBodyScope != nullptr)"
    },
    {
        "line": 451,
        "fullcodeline": "Assert(funcInfo->firstTmpReg == firstTmpReg);"
    },
    {
        "line": 452,
        "fullcodeline": "Assert(funcInfo->curTmpReg == firstTmpReg);"
    },
    {
        "line": 453,
        "fullcodeline": "Assert(byteCodeFunction->GetFirstTmpReg() == firstTmpReg + byteCodeFunction->GetConstantCount());"
    },
    {
        "line": 481,
        "fullcodeline": "Assert(this->TopFuncInfo() == funcInfo);"
    },
    {
        "line": 482,
        "fullcodeline": "PopFuncInfo(_u(\"EmitOneFunction\"));"
    },
    {
        "line": 31,
        "fullcodeline": "if (!PHASE_OFF1(Js::SkipNestedDeferredPhase))"
    },
    {
        "line": 33,
        "fullcodeline": "deferParseFunction->BuildDeferredStubs(funcInfo->root);"
    },
    {
        "line": 65,
        "fullcodeline": "uint nestedCount = byteCodeFunction->GetNestedCount();"
    },
    {
        "line": 76,
        "fullcodeline": "if (byteCodeFunction->GetByteCode() != nullptr)"
    },
    {
        "line": 85,
        "fullcodeline": "if (funcInfo->root->sxFnc.HasOnlyThisStmts() && !IsInDebugMode())"
    },
    {
        "line": 87,
        "fullcodeline": "byteCodeFunction->SetHasOnlyThisStmts(true);"
    },
    {
        "line": 90,
        "fullcodeline": "if (byteCodeFunction->IsInlineApplyDisabled() || this->scriptContext->GetConfig()->IsNoNative())"
    },
    {
        "line": 132,
        "fullcodeline": "if (!this->IsInDebugMode())"
    },
    {
        "line": 134,
        "fullcodeline": "byteCodeFunction->SetInnerScopeCount(innerScopeCount);"
    },
    {
        "line": 147,
        "fullcodeline": "funcInfo->RegCount() // Pass the actual register count. // TODO: Check if we can reduce this count"
    },
    {
        "line": 174,
        "fullcodeline": "m_writer.Empty(Js::OpCode::ChkNewCallFlag);"
    },
    {
        "line": 185,
        "fullcodeline": "if (!currentScope->GetCanMergeWithBodyScope())"
    },
    {
        "line": 187,
        "fullcodeline": "byteCodeFunction->SetParamAndBodyScopeNotMerged();"
    },
    {
        "line": 196,
        "fullcodeline": "byteCodeFunction->SetHasRestParameter();"
    },
    {
        "line": 199,
        "fullcodeline": "if (funcInfo->thisScopeSlot != Js::Constants::NoRegister && !(funcInfo->IsLambda() || (funcInfo->IsGlobalFunction() && this->flags & fscrEval)))"
    },
    {
        "line": 201,
        "fullcodeline": "EmitInitCapturedThis(funcInfo, funcInfo->bodyScope);"
    },
    {
        "line": 205,
        "fullcodeline": "if ((funcInfo->HasSuperReference() || (funcInfo->GetCallsEval() && (funcInfo->root->sxFnc.IsMethod() || funcInfo->root->sxFnc.IsConstructor())))"
    },
    {
        "line": 207,
        "fullcodeline": "&& !((GetFlags() & fscrEval) && funcInfo->IsGlobalFunction()))"
    },
    {
        "line": 269,
        "fullcodeline": "if (funcInfo->newTargetScopeSlot != Js::Constants::NoRegister && !funcInfo->IsGlobalFunction())"
    },
    {
        "line": 271,
        "fullcodeline": "EmitInitCapturedNewTarget(funcInfo, bodyScope);"
    },
    {
        "line": 275,
        "fullcodeline": "if (!(GetFlags() & fscrEval) && !bodyScope->GetIsObject())"
    },
    {
        "line": 290,
        "fullcodeline": "EnsureNoRedeclarations(pnode->sxFnc.pnodeScopes, funcInfo);"
    },
    {
        "line": 299,
        "fullcodeline": "this->InitBlockScopedNonTemps(funcInfo->root->sxFnc.pnodeScopes, funcInfo);"
    },
    {
        "line": 301,
        "fullcodeline": "EmitDefaultArgs(funcInfo, pnode);"
    },
    {
        "line": 323,
        "fullcodeline": "if (!(funcInfo->IsGlobalFunction() && this->IsEvalWithNoParentScopeInfo()))"
    },
    {
        "line": 326,
        "fullcodeline": "DefineFunctions(funcInfo);"
    },
    {
        "line": 333,
        "fullcodeline": "this->InitBlockScopedNonTemps(funcInfo->root->sxFnc.pnodeBodyScope, funcInfo);"
    },
    {
        "line": 340,
        "fullcodeline": "if (!pnode->sxFnc.HasNonSimpleParameterList() && funcInfo->GetHasArguments() && !NeedScopeObjectForArguments(funcInfo, pnode))"
    },
    {
        "line": 409,
        "fullcodeline": "copySpecialSymbolsToBody(funcInfo->innerThisScopeSlot, funcInfo->thisScopeSlot);"
    },
    {
        "line": 410,
        "fullcodeline": "copySpecialSymbolsToBody(funcInfo->innerSuperScopeSlot, funcInfo->superScopeSlot);"
    },
    {
        "line": 411,
        "fullcodeline": "copySpecialSymbolsToBody(funcInfo->innerSuperCtorScopeSlot, funcInfo->superCtorScopeSlot);"
    },
    {
        "line": 412,
        "fullcodeline": "copySpecialSymbolsToBody(funcInfo->innerNewTargetScopeSlot, funcInfo->newTargetScopeSlot);"
    },
    {
        "line": 417,
        "fullcodeline": "::BeginEmitBlock(pnode->sxFnc.pnodeBodyScope, this, funcInfo);"
    },
    {
        "line": 424,
        "fullcodeline": "EmitGlobalBody(funcInfo);"
    },
    {
        "line": 433,
        "fullcodeline": "::EndEmitBlock(pnode->sxFnc.pnodeBodyScope, this, funcInfo);"
    },
    {
        "line": 437,
        "fullcodeline": "if (!this->IsInDebugMode())"
    },
    {
        "line": 66,
        "fullcodeline": "for (uint i = 0; i < nestedCount; i++)"
    },
    {
        "line": 191,
        "fullcodeline": "Assert(this->GetCurrentScope() == paramScope);"
    },
    {
        "line": 209,
        "fullcodeline": "if (funcInfo->IsLambda())"
    },
    {
        "line": 277,
        "fullcodeline": "if (funcInfo->superScopeSlot != Js::Constants::NoRegister)"
    },
    {
        "line": 282,
        "fullcodeline": "if (funcInfo->superCtorScopeSlot != Js::Constants::NoRegister)"
    },
    {
        "line": 337,
        "fullcodeline": "this->InitBlockScopedNonTemps(funcInfo->root->sxFnc.pnodeScopes, funcInfo);"
    },
    {
        "line": 356,
        "fullcodeline": "Symbol* funcSym = funcInfo->root->sxFnc.GetFuncSymbol();"
    },
    {
        "line": 428,
        "fullcodeline": "EmitFunctionBody(funcInfo);"
    },
    {
        "line": 51,
        "fullcodeline": "if (CanStackNestedFunc(funcInfo, true) && byteCodeFunction->GetCompileCount() == 0)"
    },
    {
        "line": 68,
        "fullcodeline": "Js::FunctionProxy * nested = byteCodeFunction->GetNestedFunctionProxy(i);"
    },
    {
        "line": 92,
        "fullcodeline": "if ((pnode->nop == knopFncDecl) && (funcInfo->GetHasHeapArguments()) && (!funcInfo->GetCallsEval()) && ApplyEnclosesArgs(pnode, this))"
    },
    {
        "line": 94,
        "fullcodeline": "bool applyEnclosesArgs = true;"
    },
    {
        "line": 119,
        "fullcodeline": "constAndLetCheck(funcInfo->root->sxFnc.pnodeScopes, &applyEnclosesArgs);"
    },
    {
        "line": 120,
        "fullcodeline": "constAndLetCheck(funcInfo->root->sxFnc.pnodeBodyScope, &applyEnclosesArgs);"
    },
    {
        "line": 121,
        "fullcodeline": "funcInfo->SetApplyEnclosesArgs(applyEnclosesArgs);"
    },
    {
        "line": 137,
        "fullcodeline": "funcInfo->SetFirstInnerScopeReg(funcInfo->AcquireTmpRegister());"
    },
    {
        "line": 212,
        "fullcodeline": "Js::PropertyId envIndex = -1;"
    },
    {
        "line": 213,
        "fullcodeline": "GetEnclosingNonLambdaScope(funcInfo, scope, envIndex);"
    },
    {
        "line": 215,
        "fullcodeline": "FuncInfo* parent = scope->GetFunc();"
    },
    {
        "line": 279,
        "fullcodeline": "this->EmitInternalScopedSlotStore(funcInfo, funcInfo->superScopeSlot, funcInfo->superRegister);"
    },
    {
        "line": 284,
        "fullcodeline": "this->EmitInternalScopedSlotStore(funcInfo, funcInfo->superCtorScopeSlot, funcInfo->superCtorRegister);"
    },
    {
        "line": 303,
        "fullcodeline": "if (!currentScope->GetCanMergeWithBodyScope())"
    },
    {
        "line": 307,
        "fullcodeline": "PushScope(bodyScope);"
    },
    {
        "line": 309,
        "fullcodeline": "funcInfo->SetCurrentChildScope(bodyScope);"
    },
    {
        "line": 442,
        "fullcodeline": "Js::RegSlot tmpReg = funcInfo->FirstInnerScopeReg() + innerScopeCount - 1;"
    },
    {
        "line": 56,
        "fullcodeline": "if (funcInfo->root->sxFnc.astSize <= PnFnc::MaxStackClosureAST)"
    },
    {
        "line": 69,
        "fullcodeline": "if (nested->IsFunctionBody())"
    },
    {
        "line": 138,
        "fullcodeline": "for (uint i = 1; i < innerScopeCount; i++)"
    },
    {
        "line": 235,
        "fullcodeline": "m_writer.Reg1(Js::OpCode::LdHomeObj, funcInfo->superRegister);"
    },
    {
        "line": 305,
        "fullcodeline": "Assert(this->GetCurrentScope() == paramScope);"
    },
    {
        "line": 312,
        "fullcodeline": "this->Writer()->Empty(Js::OpCode::BeginBodyScope);"
    },
    {
        "line": 443,
        "fullcodeline": "for (uint i = 0; i < innerScopeCount; i++)"
    },
    {
        "line": 58,
        "fullcodeline": "byteCodeFunction->SetStackNestedFunc(true);"
    },
    {
        "line": 97,
        "fullcodeline": "Symbol* sym = pnodeVar->sxVar.sym;"
    },
    {
        "line": 140,
        "fullcodeline": "funcInfo->AcquireTmpRegister();"
    },
    {
        "line": 217,
        "fullcodeline": "if (!parent->IsGlobalFunction())"
    },
    {
        "line": 220,
        "fullcodeline": "EmitInternalScopedSlotLoad(funcInfo, scope, envIndex, parent->superScopeSlot, funcInfo->superRegister);"
    },
    {
        "line": 237,
        "fullcodeline": "if (funcInfo->superCtorRegister != Js::Constants::NoRegister) // super() is allowed only in derived class constructors"
    },
    {
        "line": 242,
        "fullcodeline": "if (!funcInfo->IsGlobalFunction())"
    },
    {
        "line": 445,
        "fullcodeline": "funcInfo->ReleaseTmpRegister(tmpReg);"
    },
    {
        "line": 446,
        "fullcodeline": "tmpReg--;"
    },
    {
        "line": 71,
        "fullcodeline": "nested->GetFunctionBody()->SetStackNestedFuncParent(byteCodeFunction->GetFunctionInfo());"
    },
    {
        "line": 221,
        "fullcodeline": "if (funcInfo->superCtorRegister != Js::Constants::NoRegister)"
    },
    {
        "line": 239,
        "fullcodeline": "m_writer.Reg1(Js::OpCode::LdFuncObj, funcInfo->superCtorRegister);"
    },
    {
        "line": 98,
        "fullcodeline": "if (sym->GetSymbolType() == STVariable && !sym->GetIsArguments())"
    },
    {
        "line": 100,
        "fullcodeline": "applyEnclosesArgs = false;"
    },
    {
        "line": 223,
        "fullcodeline": "EmitInternalScopedSlotLoad(funcInfo, scope, envIndex, parent->superCtorScopeSlot, funcInfo->superCtorRegister);"
    },
    {
        "line": 226,
        "fullcodeline": "else if (!(GetFlags() & fscrEval))"
    },
    {
        "line": 229,
        "fullcodeline": "m_writer.Reg1(Js::OpCode::LdUndef, funcInfo->superRegister);"
    },
    {
        "line": 244,
        "fullcodeline": "if (bodyScope->GetIsObject() && bodyScope->GetLocation() != Js::Constants::NoRegister)"
    },
    {
        "line": 247,
        "fullcodeline": "uint cacheId = funcInfo->FindOrAddInlineCacheId(bodyScope->GetLocation(), Js::PropertyIds::_superReferenceSymbol, false, true);"
    },
    {
        "line": 248,
        "fullcodeline": "m_writer.ElementP(Js::OpCode::InitLocalFld, funcInfo->superRegister, cacheId);"
    },
    {
        "line": 249,
        "fullcodeline": "if (funcInfo->superCtorRegister != Js::Constants::NoRegister)"
    },
    {
        "line": 251,
        "fullcodeline": "cacheId = funcInfo->FindOrAddInlineCacheId(bodyScope->GetLocation(), Js::PropertyIds::_superCtorReferenceSymbol, false, true);"
    },
    {
        "line": 252,
        "fullcodeline": "m_writer.ElementP(Js::OpCode::InitLocalFld, funcInfo->superCtorRegister, cacheId);"
    },
    {
        "line": 255,
        "fullcodeline": "else if (funcInfo->superScopeSlot == Js::Constants::NoProperty || funcInfo->superCtorScopeSlot == Js::Constants::NoProperty)"
    },
    {
        "line": 259,
        "fullcodeline": "byteCodeFunction->InsertSymbolToRegSlotList(funcInfo->superRegister, Js::PropertyIds::_superReferenceSymbol, funcInfo->varRegsCount);"
    },
    {
        "line": 260,
        "fullcodeline": "if (funcInfo->superCtorRegister != Js::Constants::NoRegister)"
    },
    {
        "line": 262,
        "fullcodeline": "byteCodeFunction->InsertSymbolToRegSlotList(funcInfo->superCtorRegister, Js::PropertyIds::_superCtorReferenceSymbol, funcInfo->varRegsCount);"
    }
]