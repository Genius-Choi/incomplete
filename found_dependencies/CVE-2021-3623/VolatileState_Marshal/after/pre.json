[
    {
        "line": 13,
        "fullcodeline": "written = NV_HEADER_Marshal(buffer, size,"
    },
    {
        "line": 18,
        "fullcodeline": "written += TPM_HANDLE_Marshal(&g_exclusiveAuditSession, buffer, size); /* line 423 */"
    },
    {
        "line": 20,
        "fullcodeline": "written += UINT64_Marshal(&g_time, buffer, size); /* line 426 */"
    },
    {
        "line": 23,
        "fullcodeline": "written += BOOL_Marshal(&g_phEnable, buffer, size); /* line 439 */"
    },
    {
        "line": 25,
        "fullcodeline": "written += BOOL_Marshal(&g_pcrReConfig, buffer, size); /* line 443 */"
    },
    {
        "line": 27,
        "fullcodeline": "written += TPM_HANDLE_Marshal(&g_DRTMHandle, buffer, size); /* line 448 */"
    },
    {
        "line": 29,
        "fullcodeline": "written += BOOL_Marshal(&g_DrtmPreStartup, buffer, size); /* line 453 */"
    },
    {
        "line": 31,
        "fullcodeline": "written += BOOL_Marshal(&g_StartupLocality3, buffer, size); /* line 458 */"
    },
    {
        "line": 36,
        "fullcodeline": "has_block = FALSE;"
    },
    {
        "line": 38,
        "fullcodeline": "written += BLOCK_SKIP_WRITE_PUSH(has_block, buffer, size);"
    },
    {
        "line": 44,
        "fullcodeline": "BLOCK_SKIP_WRITE_POP(size);"
    },
    {
        "line": 48,
        "fullcodeline": "written += BOOL_Marshal(&g_powerWasLost, buffer, size); /* line 504 */"
    },
    {
        "line": 51,
        "fullcodeline": "written += UINT16_Marshal(&g_prevOrderlyState, buffer, size); /* line 516 */"
    },
    {
        "line": 53,
        "fullcodeline": "written += BOOL_Marshal(&g_nvOk, buffer, size); /* line 522 */"
    },
    {
        "line": 59,
        "fullcodeline": "written += TPM2B_AUTH_Marshal(&g_platformUniqueDetails, buffer, size); /* line 536 */"
    },
    {
        "line": 64,
        "fullcodeline": "written += ORDERLY_DATA_Marshal(&go, buffer, size); /* line 707 */"
    },
    {
        "line": 65,
        "fullcodeline": "written += STATE_CLEAR_DATA_Marshal(&gc, buffer, size); /* line 738 */"
    },
    {
        "line": 66,
        "fullcodeline": "written += STATE_RESET_DATA_Marshal(&gr, buffer, size); /* line 826 */"
    },
    {
        "line": 69,
        "fullcodeline": "written += BOOL_Marshal(&g_manufactured, buffer, size); /* line 928 */"
    },
    {
        "line": 71,
        "fullcodeline": "written += BOOL_Marshal(&g_initialized, buffer, size); /* line 932 */"
    },
    {
        "line": 76,
        "fullcodeline": "has_block = FALSE;"
    },
    {
        "line": 78,
        "fullcodeline": "written += BLOCK_SKIP_WRITE_PUSH(has_block, buffer, size);"
    },
    {
        "line": 116,
        "fullcodeline": "BLOCK_SKIP_WRITE_POP(size);"
    },
    {
        "line": 121,
        "fullcodeline": "has_block = FALSE;"
    },
    {
        "line": 123,
        "fullcodeline": "written += BLOCK_SKIP_WRITE_PUSH(has_block, buffer, size);"
    },
    {
        "line": 140,
        "fullcodeline": "BLOCK_SKIP_WRITE_POP(size);"
    },
    {
        "line": 145,
        "fullcodeline": "has_block = FALSE;"
    },
    {
        "line": 147,
        "fullcodeline": "written += BLOCK_SKIP_WRITE_PUSH(has_block, buffer, size);"
    },
    {
        "line": 169,
        "fullcodeline": "BLOCK_SKIP_WRITE_POP(size);"
    },
    {
        "line": 174,
        "fullcodeline": "has_block = FALSE;"
    },
    {
        "line": 176,
        "fullcodeline": "written += BLOCK_SKIP_WRITE_PUSH(has_block, buffer, size);"
    },
    {
        "line": 189,
        "fullcodeline": "BLOCK_SKIP_WRITE_POP(size);"
    },
    {
        "line": 194,
        "fullcodeline": "has_block = FALSE;"
    },
    {
        "line": 196,
        "fullcodeline": "written += BLOCK_SKIP_WRITE_PUSH(has_block, buffer, size);"
    },
    {
        "line": 207,
        "fullcodeline": "BLOCK_SKIP_WRITE_POP(size);"
    },
    {
        "line": 212,
        "fullcodeline": "has_block = FALSE;"
    },
    {
        "line": 214,
        "fullcodeline": "written += BLOCK_SKIP_WRITE_PUSH(has_block, buffer, size);"
    },
    {
        "line": 229,
        "fullcodeline": "BLOCK_SKIP_WRITE_POP(size);"
    },
    {
        "line": 235,
        "fullcodeline": "written += BOOL_Marshal(&g_inFailureMode, buffer, size); /* line 1078 */"
    },
    {
        "line": 238,
        "fullcodeline": "tpmEst = _rpc__Signal_GetTPMEstablished();"
    },
    {
        "line": 239,
        "fullcodeline": "written += BOOL_Marshal(&tpmEst, buffer, size);"
    },
    {
        "line": 242,
        "fullcodeline": "has_block = TRUE;"
    },
    {
        "line": 246,
        "fullcodeline": "written += BLOCK_SKIP_WRITE_PUSH(has_block, buffer, size);"
    },
    {
        "line": 249,
        "fullcodeline": "written += UINT32_Marshal(&s_failFunction, buffer, size);"
    },
    {
        "line": 250,
        "fullcodeline": "written += UINT32_Marshal(&s_failLine, buffer, size);"
    },
    {
        "line": 251,
        "fullcodeline": "written += UINT32_Marshal(&s_failCode, buffer, size);"
    },
    {
        "line": 253,
        "fullcodeline": "BLOCK_SKIP_WRITE_POP(size);"
    },
    {
        "line": 256,
        "fullcodeline": "has_block = TRUE;"
    },
    {
        "line": 260,
        "fullcodeline": "written += BLOCK_SKIP_WRITE_PUSH(has_block, buffer, size);"
    },
    {
        "line": 263,
        "fullcodeline": "tmp_uint64 = s_realTimePrevious;"
    },
    {
        "line": 264,
        "fullcodeline": "written += UINT64_Marshal(&tmp_uint64, buffer, size);"
    },
    {
        "line": 265,
        "fullcodeline": "tmp_uint64 = s_tpmTime;"
    },
    {
        "line": 266,
        "fullcodeline": "written += UINT64_Marshal(&tmp_uint64, buffer, size);"
    },
    {
        "line": 268,
        "fullcodeline": "BLOCK_SKIP_WRITE_POP(size);"
    },
    {
        "line": 270,
        "fullcodeline": "written += BOOL_Marshal(&s_timerReset, buffer, size);"
    },
    {
        "line": 271,
        "fullcodeline": "written += BOOL_Marshal(&s_timerStopped, buffer, size);"
    },
    {
        "line": 272,
        "fullcodeline": "written += UINT32_Marshal(&s_adjustRate, buffer, size);"
    },
    {
        "line": 274,
        "fullcodeline": "tmp_uint64 = ClockGetTime(CLOCK_REALTIME);"
    },
    {
        "line": 275,
        "fullcodeline": "written += UINT64_Marshal(&tmp_uint64, buffer, size);"
    },
    {
        "line": 277,
        "fullcodeline": "written += BLOCK_SKIP_WRITE_PUSH(TRUE, buffer, size); /* v3 */"
    },
    {
        "line": 280,
        "fullcodeline": "NvRead(&pd, NV_PERSISTENT_DATA, sizeof(pd));"
    },
    {
        "line": 281,
        "fullcodeline": "written += TPM2B_Marshal(&pd.EPSeed.b, sizeof(pd.EPSeed.t.buffer), buffer, size);"
    },
    {
        "line": 282,
        "fullcodeline": "written += TPM2B_Marshal(&pd.SPSeed.b, sizeof(pd.SPSeed.t.buffer), buffer, size);"
    },
    {
        "line": 283,
        "fullcodeline": "written += TPM2B_Marshal(&pd.PPSeed.b, sizeof(pd.PPSeed.t.buffer), buffer, size);"
    },
    {
        "line": 285,
        "fullcodeline": "written += BLOCK_SKIP_WRITE_PUSH(TRUE, buffer, size); /* v4 */"
    },
    {
        "line": 287,
        "fullcodeline": "tmp_uint64 = ClockGetTime(CLOCK_MONOTONIC) + s_hostMonotonicAdjustTime;"
    },
    {
        "line": 288,
        "fullcodeline": "written += UINT64_Marshal(&tmp_uint64, buffer, size);"
    },
    {
        "line": 290,
        "fullcodeline": "written += UINT64_Marshal(&s_suspendedElapsedTime, buffer, size);"
    },
    {
        "line": 291,
        "fullcodeline": "written += UINT64_Marshal(&s_lastSystemTime, buffer, size);"
    },
    {
        "line": 292,
        "fullcodeline": "written += UINT64_Marshal(&s_lastReportedTime, buffer, size);"
    },
    {
        "line": 294,
        "fullcodeline": "written += BLOCK_SKIP_WRITE_PUSH(TRUE, buffer, size); /* v5 */"
    },
    {
        "line": 297,
        "fullcodeline": "BLOCK_SKIP_WRITE_POP(size); /* v5 */"
    },
    {
        "line": 298,
        "fullcodeline": "BLOCK_SKIP_WRITE_POP(size); /* v4 */"
    },
    {
        "line": 299,
        "fullcodeline": "BLOCK_SKIP_WRITE_POP(size); /* v3 */"
    },
    {
        "line": 302,
        "fullcodeline": "tmp_uint32 = VOLATILE_STATE_MAGIC;"
    },
    {
        "line": 303,
        "fullcodeline": "written += UINT32_Marshal(&tmp_uint32, buffer, size);"
    }
]