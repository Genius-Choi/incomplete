[
    {
        "line": 3,
        "fullcodeline": "TPM_RC rc = TPM_RC_SUCCESS;"
    },
    {
        "line": 6,
        "fullcodeline": "if (rc == TPM_RC_SUCCESS) {"
    },
    {
        "line": 9,
        "fullcodeline": "if (rc == TPM_RC_SUCCESS) {"
    },
    {
        "line": 14,
        "fullcodeline": "if (rc == TPM_RC_SUCCESS) {"
    },
    {
        "line": 17,
        "fullcodeline": "if (rc == TPM_RC_SUCCESS) {"
    },
    {
        "line": 20,
        "fullcodeline": "if (rc == TPM_RC_SUCCESS) {"
    },
    {
        "line": 7,
        "fullcodeline": "rc = UINT16_Unmarshal(&target->size, buffer, size);"
    },
    {
        "line": 18,
        "fullcodeline": "rc = TPMT_PUBLIC_Unmarshal(&target->publicArea, buffer, size, allowNull);"
    },
    {
        "line": 10,
        "fullcodeline": "if (target->size == 0) {"
    },
    {
        "line": 21,
        "fullcodeline": "if (target->size != startSize - *size) {"
    },
    {
        "line": 11,
        "fullcodeline": "rc = TPM_RC_SIZE;"
    },
    {
        "line": 22,
        "fullcodeline": "rc = TPM_RC_SIZE;"
    },
    {
        "line": 23,
        "fullcodeline": "target->size = 0; // libtpms added"
    }
]