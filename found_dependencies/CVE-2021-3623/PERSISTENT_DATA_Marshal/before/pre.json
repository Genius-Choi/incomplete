[
    {
        "line": 9,
        "fullcodeline": "written = NV_HEADER_Marshal(buffer, size,"
    },
    {
        "line": 12,
        "fullcodeline": "written += BOOL_Marshal(&data->disableClear, buffer, size);"
    },
    {
        "line": 13,
        "fullcodeline": "written += TPM_ALG_ID_Marshal(&data->ownerAlg, buffer, size);"
    },
    {
        "line": 14,
        "fullcodeline": "written += TPM_ALG_ID_Marshal(&data->endorsementAlg, buffer, size);"
    },
    {
        "line": 15,
        "fullcodeline": "written += TPM_ALG_ID_Marshal(&data->lockoutAlg, buffer, size);"
    },
    {
        "line": 16,
        "fullcodeline": "written += TPM2B_DIGEST_Marshal(&data->ownerPolicy, buffer, size);"
    },
    {
        "line": 17,
        "fullcodeline": "written += TPM2B_DIGEST_Marshal(&data->endorsementPolicy, buffer, size);"
    },
    {
        "line": 18,
        "fullcodeline": "written += TPM2B_DIGEST_Marshal(&data->lockoutPolicy, buffer, size);"
    },
    {
        "line": 19,
        "fullcodeline": "written += TPM2B_AUTH_Marshal(&data->ownerAuth, buffer, size);"
    },
    {
        "line": 20,
        "fullcodeline": "written += TPM2B_AUTH_Marshal(&data->endorsementAuth, buffer, size);"
    },
    {
        "line": 21,
        "fullcodeline": "written += TPM2B_AUTH_Marshal(&data->lockoutAuth, buffer, size);"
    },
    {
        "line": 22,
        "fullcodeline": "written += TPM2B_Marshal(&data->EPSeed.b, buffer, size);"
    },
    {
        "line": 23,
        "fullcodeline": "written += TPM2B_Marshal(&data->SPSeed.b, buffer, size);"
    },
    {
        "line": 24,
        "fullcodeline": "written += TPM2B_Marshal(&data->PPSeed.b, buffer, size);"
    },
    {
        "line": 25,
        "fullcodeline": "written += TPM2B_PROOF_Marshal(&data->phProof, buffer, size);"
    },
    {
        "line": 26,
        "fullcodeline": "written += TPM2B_PROOF_Marshal(&data->shProof, buffer, size);"
    },
    {
        "line": 27,
        "fullcodeline": "written += TPM2B_PROOF_Marshal(&data->ehProof, buffer, size);"
    },
    {
        "line": 28,
        "fullcodeline": "written += UINT64_Marshal(&data->totalResetCount, buffer, size);"
    },
    {
        "line": 29,
        "fullcodeline": "written += UINT32_Marshal(&data->resetCount, buffer, size);"
    },
    {
        "line": 34,
        "fullcodeline": "has_block = FALSE;"
    },
    {
        "line": 36,
        "fullcodeline": "written += BLOCK_SKIP_WRITE_PUSH(has_block, buffer, size);"
    },
    {
        "line": 41,
        "fullcodeline": "BLOCK_SKIP_WRITE_POP(size);"
    },
    {
        "line": 43,
        "fullcodeline": "written += TPML_PCR_SELECTION_Marshal(&data->pcrAllocated, buffer, size);"
    },
    {
        "line": 46,
        "fullcodeline": "array_size = sizeof(data->ppList);"
    },
    {
        "line": 47,
        "fullcodeline": "written += UINT16_Marshal(&array_size, buffer, size);"
    },
    {
        "line": 48,
        "fullcodeline": "written += Array_Marshal(&data->ppList[0], array_size, buffer, size);"
    },
    {
        "line": 50,
        "fullcodeline": "written += UINT32_Marshal(&data->failedTries, buffer, size);"
    },
    {
        "line": 51,
        "fullcodeline": "written += UINT32_Marshal(&data->maxTries, buffer, size);"
    },
    {
        "line": 52,
        "fullcodeline": "written += UINT32_Marshal(&data->recoveryTime, buffer, size);"
    },
    {
        "line": 53,
        "fullcodeline": "written += UINT32_Marshal(&data->lockoutRecovery, buffer, size);"
    },
    {
        "line": 54,
        "fullcodeline": "written += BOOL_Marshal(&data->lockOutAuthEnabled, buffer, size);"
    },
    {
        "line": 55,
        "fullcodeline": "written += UINT16_Marshal(&data->orderlyState, buffer, size);"
    },
    {
        "line": 58,
        "fullcodeline": "array_size = sizeof(data->auditCommands);"
    },
    {
        "line": 59,
        "fullcodeline": "written += UINT16_Marshal(&array_size, buffer, size);"
    },
    {
        "line": 60,
        "fullcodeline": "written += Array_Marshal(&data->auditCommands[0], array_size,"
    },
    {
        "line": 63,
        "fullcodeline": "written += TPM_ALG_ID_Marshal(&data->auditHashAlg, buffer, size);"
    },
    {
        "line": 64,
        "fullcodeline": "written += UINT64_Marshal(&data->auditCounter, buffer, size);"
    },
    {
        "line": 65,
        "fullcodeline": "written += UINT32_Marshal(&data->algorithmSet, buffer, size);"
    },
    {
        "line": 66,
        "fullcodeline": "written += UINT32_Marshal(&data->firmwareV1, buffer, size);"
    },
    {
        "line": 67,
        "fullcodeline": "written += UINT32_Marshal(&data->firmwareV2, buffer, size);"
    },
    {
        "line": 73,
        "fullcodeline": "clocksize = sizeof(UINT32);"
    },
    {
        "line": 74,
        "fullcodeline": "written += UINT8_Marshal(&clocksize, buffer, size);"
    },
    {
        "line": 75,
        "fullcodeline": "written += UINT32_Marshal(&data->timeEpoch, buffer, size);"
    },
    {
        "line": 78,
        "fullcodeline": "written += BLOCK_SKIP_WRITE_PUSH(TRUE, buffer, size);"
    },
    {
        "line": 81,
        "fullcodeline": "written += TPML_PCR_SELECTION_Marshal(&gp.pcrAllocated, buffer, size);"
    },
    {
        "line": 83,
        "fullcodeline": "written += BLOCK_SKIP_WRITE_PUSH(TRUE, buffer, size);"
    },
    {
        "line": 84,
        "fullcodeline": "written += SEED_COMPAT_LEVEL_Marshal(&data->EPSeedCompatLevel,"
    },
    {
        "line": 86,
        "fullcodeline": "written += SEED_COMPAT_LEVEL_Marshal(&data->SPSeedCompatLevel,"
    },
    {
        "line": 88,
        "fullcodeline": "written += SEED_COMPAT_LEVEL_Marshal(&data->PPSeedCompatLevel,"
    },
    {
        "line": 91,
        "fullcodeline": "written += BLOCK_SKIP_WRITE_PUSH(TRUE, buffer, size);"
    },
    {
        "line": 94,
        "fullcodeline": "BLOCK_SKIP_WRITE_POP(size);"
    },
    {
        "line": 95,
        "fullcodeline": "BLOCK_SKIP_WRITE_POP(size);"
    },
    {
        "line": 96,
        "fullcodeline": "BLOCK_SKIP_WRITE_POP(size);"
    }
]