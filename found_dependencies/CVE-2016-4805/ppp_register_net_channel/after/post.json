[
    {
        "line": 6,
        "fullcodeline": "pch = kzalloc(sizeof(struct channel), GFP_KERNEL);"
    },
    {
        "line": 10,
        "fullcodeline": "pn = ppp_pernet(net);"
    },
    {
        "line": 12,
        "fullcodeline": "pch->ppp = NULL;"
    },
    {
        "line": 13,
        "fullcodeline": "pch->chan = chan;"
    },
    {
        "line": 14,
        "fullcodeline": "pch->chan_net = get_net(net);"
    },
    {
        "line": 15,
        "fullcodeline": "chan->ppp = pch;"
    },
    {
        "line": 16,
        "fullcodeline": "init_ppp_file(&pch->file, CHANNEL);"
    },
    {
        "line": 17,
        "fullcodeline": "pch->file.hdrlen = chan->hdrlen;"
    },
    {
        "line": 21,
        "fullcodeline": "init_rwsem(&pch->chan_sem);"
    },
    {
        "line": 22,
        "fullcodeline": "spin_lock_init(&pch->downl);"
    },
    {
        "line": 23,
        "fullcodeline": "rwlock_init(&pch->upl);"
    },
    {
        "line": 25,
        "fullcodeline": "spin_lock_bh(&pn->all_channels_lock);"
    },
    {
        "line": 26,
        "fullcodeline": "pch->file.index = ++pn->last_channel_index;"
    },
    {
        "line": 27,
        "fullcodeline": "list_add(&pch->list, &pn->new_channels);"
    },
    {
        "line": 28,
        "fullcodeline": "atomic_inc(&channel_count);"
    },
    {
        "line": 29,
        "fullcodeline": "spin_unlock_bh(&pn->all_channels_lock);"
    },
    {
        "line": 7,
        "fullcodeline": "if (!pch)"
    },
    {
        "line": 8,
        "fullcodeline": "return -ENOMEM;"
    }
]