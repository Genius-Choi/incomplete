[
    {
        "line": 58,
        "fullcodeline": "assert(image_info != (const ImageInfo *) NULL);"
    },
    {
        "line": 59,
        "fullcodeline": "assert(image_info->signature == MagickCoreSignature);"
    },
    {
        "line": 63,
        "fullcodeline": "assert(exception != (ExceptionInfo *) NULL);"
    },
    {
        "line": 64,
        "fullcodeline": "assert(exception->signature == MagickCoreSignature);"
    },
    {
        "line": 65,
        "fullcodeline": "image=AcquireImage(image_info,exception);"
    },
    {
        "line": 66,
        "fullcodeline": "status=OpenBlob(image_info,image,ReadBinaryBlobMode,exception);"
    },
    {
        "line": 75,
        "fullcodeline": "count=ReadBlob(image,sz_XWDheader,(unsigned char *) &header);"
    },
    {
        "line": 81,
        "fullcodeline": "lsb_first=1;"
    },
    {
        "line": 175,
        "fullcodeline": "length=(size_t) (header.header_size-sz_XWDheader);"
    },
    {
        "line": 176,
        "fullcodeline": "comment=(char *) AcquireQuantumMemory(length+1,sizeof(*comment));"
    },
    {
        "line": 179,
        "fullcodeline": "count=ReadBlob(image,length,(unsigned char *) comment);"
    },
    {
        "line": 180,
        "fullcodeline": "comment[length]='\\0';"
    },
    {
        "line": 188,
        "fullcodeline": "ximage=(XImage *) AcquireMagickMemory(sizeof(*ximage));"
    },
    {
        "line": 191,
        "fullcodeline": "ximage->depth=(int) header.pixmap_depth;"
    },
    {
        "line": 192,
        "fullcodeline": "ximage->format=(int) header.pixmap_format;"
    },
    {
        "line": 193,
        "fullcodeline": "ximage->xoffset=(int) header.xoffset;"
    },
    {
        "line": 194,
        "fullcodeline": "ximage->data=(char *) NULL;"
    },
    {
        "line": 195,
        "fullcodeline": "ximage->width=(int) header.pixmap_width;"
    },
    {
        "line": 196,
        "fullcodeline": "ximage->height=(int) header.pixmap_height;"
    },
    {
        "line": 197,
        "fullcodeline": "ximage->bitmap_pad=(int) header.bitmap_pad;"
    },
    {
        "line": 198,
        "fullcodeline": "ximage->bytes_per_line=(int) header.bytes_per_line;"
    },
    {
        "line": 199,
        "fullcodeline": "ximage->byte_order=(int) header.byte_order;"
    },
    {
        "line": 200,
        "fullcodeline": "ximage->bitmap_unit=(int) header.bitmap_unit;"
    },
    {
        "line": 201,
        "fullcodeline": "ximage->bitmap_bit_order=(int) header.bitmap_bit_order;"
    },
    {
        "line": 202,
        "fullcodeline": "ximage->bits_per_pixel=(int) header.bits_per_pixel;"
    },
    {
        "line": 203,
        "fullcodeline": "ximage->red_mask=header.red_mask;"
    },
    {
        "line": 204,
        "fullcodeline": "ximage->green_mask=header.green_mask;"
    },
    {
        "line": 205,
        "fullcodeline": "ximage->blue_mask=header.blue_mask;"
    },
    {
        "line": 224,
        "fullcodeline": "x_status=XInitImage(ximage);"
    },
    {
        "line": 233,
        "fullcodeline": "authentic_colormap=MagickFalse;"
    },
    {
        "line": 234,
        "fullcodeline": "colors=(XColor *) NULL;"
    },
    {
        "line": 282,
        "fullcodeline": "length=(size_t) ximage->bytes_per_line*ximage->height;"
    },
    {
        "line": 305,
        "fullcodeline": "ximage->data=(char *) AcquireQuantumMemory(length,sizeof(*ximage->data));"
    },
    {
        "line": 313,
        "fullcodeline": "count=ReadBlob(image,length,(unsigned char *) ximage->data);"
    },
    {
        "line": 325,
        "fullcodeline": "image->columns=(size_t) ximage->width;"
    },
    {
        "line": 326,
        "fullcodeline": "image->rows=(size_t) ximage->height;"
    },
    {
        "line": 327,
        "fullcodeline": "image->depth=8;"
    },
    {
        "line": 328,
        "fullcodeline": "status=SetImageExtent(image,image->columns,image->rows,exception);"
    },
    {
        "line": 342,
        "fullcodeline": "image->colors=header.ncolors;"
    },
    {
        "line": 500,
        "fullcodeline": "ximage->data=DestroyString(ximage->data);"
    },
    {
        "line": 60,
        "fullcodeline": "if (image_info->debug != MagickFalse)"
    },
    {
        "line": 67,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 76,
        "fullcodeline": "if (count != sz_XWDheader)"
    },
    {
        "line": 87,
        "fullcodeline": "if (header.file_version != XWD_FILE_VERSION)"
    },
    {
        "line": 89,
        "fullcodeline": "if (header.header_size < sz_XWDheader)"
    },
    {
        "line": 177,
        "fullcodeline": "if (comment == (char *) NULL)"
    },
    {
        "line": 181,
        "fullcodeline": "(void) SetImageProperty(image,\"comment\",comment,exception);"
    },
    {
        "line": 182,
        "fullcodeline": "comment=DestroyString(comment);"
    },
    {
        "line": 189,
        "fullcodeline": "if (ximage == (XImage *) NULL)"
    },
    {
        "line": 235,
        "fullcodeline": "if (header.ncolors != 0)"
    },
    {
        "line": 283,
        "fullcodeline": "if (CheckOverflowException(length,ximage->bytes_per_line,ximage->height))"
    },
    {
        "line": 290,
        "fullcodeline": "if (ximage->format != ZPixmap)"
    },
    {
        "line": 306,
        "fullcodeline": "if (ximage->data == (char *) NULL)"
    },
    {
        "line": 329,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 343,
        "fullcodeline": "if (image_info->ping == MagickFalse)"
    },
    {
        "line": 505,
        "fullcodeline": "(void) CloseBlob(image);"
    },
    {
        "line": 506,
        "fullcodeline": "return(GetFirstImageInList(image));"
    },
    {
        "line": 61,
        "fullcodeline": "(void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\","
    },
    {
        "line": 69,
        "fullcodeline": "image=DestroyImageList(image);"
    },
    {
        "line": 77,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"UnableToReadImageHeader\");"
    },
    {
        "line": 83,
        "fullcodeline": "MSBOrderLong((unsigned char *) &header,sz_XWDheader);"
    },
    {
        "line": 88,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"FileFormatVersionMismatch\");"
    },
    {
        "line": 90,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 91,
        "fullcodeline": "if ((MagickSizeType) header.xoffset >= GetBlobSize(image))"
    },
    {
        "line": 92,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 119,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 146,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 155,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 163,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 171,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 173,
        "fullcodeline": "if (((header.bitmap_pad % 8) != 0) || (header.bitmap_pad > 32))"
    },
    {
        "line": 174,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 178,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 184,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"UnexpectedEndOfFile\");"
    },
    {
        "line": 190,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 206,
        "fullcodeline": "if ((ximage->width < 0) || (ximage->height < 0) || (ximage->depth < 0) ||"
    },
    {
        "line": 209,
        "fullcodeline": "(ximage->bytes_per_line < 0))"
    },
    {
        "line": 211,
        "fullcodeline": "ximage=(XImage *) RelinquishMagickMemory(ximage);"
    },
    {
        "line": 212,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 214,
        "fullcodeline": "if ((ximage->width > 65535) || (ximage->height > 65535))"
    },
    {
        "line": 216,
        "fullcodeline": "ximage=(XImage *) RelinquishMagickMemory(ximage);"
    },
    {
        "line": 217,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 219,
        "fullcodeline": "if ((ximage->bits_per_pixel > 32) || (ximage->bitmap_unit > 32))"
    },
    {
        "line": 221,
        "fullcodeline": "ximage=(XImage *) RelinquishMagickMemory(ximage);"
    },
    {
        "line": 222,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 227,
        "fullcodeline": "ximage=(XImage *) RelinquishMagickMemory(ximage);"
    },
    {
        "line": 228,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"UnexpectedEndOfFile\");"
    },
    {
        "line": 240,
        "fullcodeline": "length=(size_t) header.ncolors;"
    },
    {
        "line": 243,
        "fullcodeline": "colors=(XColor *) AcquireQuantumMemory(length,sizeof(*colors));"
    },
    {
        "line": 269,
        "fullcodeline": "lsb_first=1;"
    },
    {
        "line": 287,
        "fullcodeline": "ximage=(XImage *) RelinquishMagickMemory(ximage);"
    },
    {
        "line": 288,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 295,
        "fullcodeline": "extent=length;"
    },
    {
        "line": 296,
        "fullcodeline": "length*=ximage->depth;"
    },
    {
        "line": 310,
        "fullcodeline": "ximage=(XImage *) RelinquishMagickMemory(ximage);"
    },
    {
        "line": 311,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 318,
        "fullcodeline": "ximage->data=DestroyString(ximage->data);"
    },
    {
        "line": 319,
        "fullcodeline": "ximage=(XImage *) RelinquishMagickMemory(ximage);"
    },
    {
        "line": 320,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"UnableToReadImageData\");"
    },
    {
        "line": 333,
        "fullcodeline": "ximage->data=DestroyString(ximage->data);"
    },
    {
        "line": 337,
        "fullcodeline": "if ((header.ncolors == 0U) || (ximage->red_mask != 0) ||"
    },
    {
        "line": 338,
        "fullcodeline": "(ximage->green_mask != 0) || (ximage->blue_mask != 0))"
    },
    {
        "line": 339,
        "fullcodeline": "image->storage_class=DirectClass;"
    },
    {
        "line": 501,
        "fullcodeline": "ximage=(XImage *) RelinquishMagickMemory(ximage);"
    },
    {
        "line": 502,
        "fullcodeline": "if (EOFBlob(image) != MagickFalse)"
    },
    {
        "line": 503,
        "fullcodeline": "ThrowFileException(exception,CorruptImageError,\"UnexpectedEndOfFile\","
    },
    {
        "line": 70,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 208,
        "fullcodeline": "(ximage->bitmap_bit_order < 0) || (ximage->bitmap_pad < 0) ||"
    },
    {
        "line": 241,
        "fullcodeline": "if (length > ((~0UL)/sizeof(*colors)))"
    },
    {
        "line": 244,
        "fullcodeline": "if (colors == (XColor *) NULL)"
    },
    {
        "line": 249,
        "fullcodeline": "for (i=0; i < (ssize_t) header.ncolors; i++)"
    },
    {
        "line": 285,
        "fullcodeline": "if (header.ncolors != 0)"
    },
    {
        "line": 297,
        "fullcodeline": "if (CheckOverflowException(length,extent,ximage->depth))"
    },
    {
        "line": 308,
        "fullcodeline": "if (header.ncolors != 0)"
    },
    {
        "line": 316,
        "fullcodeline": "if (header.ncolors != 0)"
    },
    {
        "line": 335,
        "fullcodeline": "return(DestroyImageList(image));"
    },
    {
        "line": 341,
        "fullcodeline": "image->storage_class=PseudoClass;"
    },
    {
        "line": 98,
        "fullcodeline": "if (header.bits_per_pixel != 1)"
    },
    {
        "line": 125,
        "fullcodeline": "if (header.pixmap_depth != 1)"
    },
    {
        "line": 242,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 246,
        "fullcodeline": "ximage=(XImage *) RelinquishMagickMemory(ximage);"
    },
    {
        "line": 247,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 251,
        "fullcodeline": "count=ReadBlob(image,sz_XWDColor,(unsigned char *) &color);"
    },
    {
        "line": 286,
        "fullcodeline": "colors=(XColor *) RelinquishMagickMemory(colors);"
    },
    {
        "line": 301,
        "fullcodeline": "ximage=(XImage *) RelinquishMagickMemory(ximage);"
    },
    {
        "line": 302,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 309,
        "fullcodeline": "colors=(XColor *) RelinquishMagickMemory(colors);"
    },
    {
        "line": 317,
        "fullcodeline": "colors=(XColor *) RelinquishMagickMemory(colors);"
    },
    {
        "line": 334,
        "fullcodeline": "ximage=(XImage *) RelinquishMagickMemory(ximage);"
    },
    {
        "line": 499,
        "fullcodeline": "colors=(XColor *) RelinquishMagickMemory(colors);"
    },
    {
        "line": 99,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 105,
        "fullcodeline": "if ((header.bits_per_pixel < 1) || (header.bits_per_pixel > 15) ||"
    },
    {
        "line": 106,
        "fullcodeline": "(header.colormap_entries == 0))"
    },
    {
        "line": 107,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 113,
        "fullcodeline": "if ((header.bits_per_pixel != 16) && (header.bits_per_pixel != 24) &&"
    },
    {
        "line": 114,
        "fullcodeline": "(header.bits_per_pixel != 32))"
    },
    {
        "line": 115,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 126,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 132,
        "fullcodeline": "if ((header.pixmap_depth < 1) || (header.pixmap_depth > 32))"
    },
    {
        "line": 133,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 141,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 207,
        "fullcodeline": "(ximage->format < 0) || (ximage->byte_order < 0) ||"
    },
    {
        "line": 252,
        "fullcodeline": "if (count != sz_XWDColor)"
    },
    {
        "line": 263,
        "fullcodeline": "if (color.flags != 0)"
    },
    {
        "line": 271,
        "fullcodeline": "for (i=0; i < (ssize_t) header.ncolors; i++)"
    },
    {
        "line": 299,
        "fullcodeline": "if (header.ncolors != 0)"
    },
    {
        "line": 363,
        "fullcodeline": "red_mask=ximage->red_mask;"
    },
    {
        "line": 364,
        "fullcodeline": "red_shift=0;"
    },
    {
        "line": 370,
        "fullcodeline": "green_mask=ximage->green_mask;"
    },
    {
        "line": 371,
        "fullcodeline": "green_shift=0;"
    },
    {
        "line": 377,
        "fullcodeline": "blue_mask=ximage->blue_mask;"
    },
    {
        "line": 378,
        "fullcodeline": "blue_shift=0;"
    },
    {
        "line": 254,
        "fullcodeline": "colors=(XColor *) RelinquishMagickMemory(colors);"
    },
    {
        "line": 255,
        "fullcodeline": "ximage=(XImage *) RelinquishMagickMemory(ximage);"
    },
    {
        "line": 256,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"UnexpectedEndOfFile\");"
    },
    {
        "line": 264,
        "fullcodeline": "authentic_colormap=MagickTrue;"
    },
    {
        "line": 300,
        "fullcodeline": "colors=(XColor *) RelinquishMagickMemory(colors);"
    },
    {
        "line": 332,
        "fullcodeline": "colors=(XColor *) RelinquishMagickMemory(colors);"
    },
    {
        "line": 455,
        "fullcodeline": "if (AcquireImageColormap(image,image->colors,exception) == MagickFalse)"
    },
    {
        "line": 463,
        "fullcodeline": "for (i=0; i < (ssize_t) image->colors; i++)"
    },
    {
        "line": 472,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 275,
        "fullcodeline": "MSBOrderShort((unsigned char *) &colors[i].red,3*"
    },
    {
        "line": 365,
        "fullcodeline": "while ((red_mask != 0) && ((red_mask & 0x01) == 0))"
    },
    {
        "line": 367,
        "fullcodeline": "red_mask>>=1;"
    },
    {
        "line": 368,
        "fullcodeline": "red_shift++;"
    },
    {
        "line": 372,
        "fullcodeline": "while ((green_mask != 0) && ((green_mask & 0x01) == 0))"
    },
    {
        "line": 374,
        "fullcodeline": "green_mask>>=1;"
    },
    {
        "line": 375,
        "fullcodeline": "green_shift++;"
    },
    {
        "line": 379,
        "fullcodeline": "while ((blue_mask != 0) && ((blue_mask & 0x01) == 0))"
    },
    {
        "line": 381,
        "fullcodeline": "blue_mask>>=1;"
    },
    {
        "line": 382,
        "fullcodeline": "blue_shift++;"
    },
    {
        "line": 387,
        "fullcodeline": "if ((image->colors != 0) && (authentic_colormap != MagickFalse))"
    },
    {
        "line": 459,
        "fullcodeline": "ximage->data=DestroyString(ximage->data);"
    },
    {
        "line": 460,
        "fullcodeline": "ximage=(XImage *) RelinquishMagickMemory(ximage);"
    },
    {
        "line": 474,
        "fullcodeline": "q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 487,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 388,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 457,
        "fullcodeline": "if (header.ncolors != 0)"
    },
    {
        "line": 475,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 477,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 485,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 489,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 390,
        "fullcodeline": "q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 412,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 418,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 458,
        "fullcodeline": "colors=(XColor *) RelinquishMagickMemory(colors);"
    },
    {
        "line": 465,
        "fullcodeline": "image->colormap[i].red=(MagickRealType) ScaleShortToQuantum("
    },
    {
        "line": 467,
        "fullcodeline": "image->colormap[i].green=(MagickRealType) ScaleShortToQuantum("
    },
    {
        "line": 469,
        "fullcodeline": "image->colormap[i].blue=(MagickRealType) ScaleShortToQuantum("
    },
    {
        "line": 479,
        "fullcodeline": "index=(Quantum) ConstrainColormapIndex(image,(ssize_t)"
    },
    {
        "line": 481,
        "fullcodeline": "SetPixelIndex(image,index,q);"
    },
    {
        "line": 482,
        "fullcodeline": "SetPixelViaPixelInfo(image,image->colormap+(ssize_t) index,q);"
    },
    {
        "line": 483,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 391,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 393,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 410,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 414,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 420,
        "fullcodeline": "q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 443,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 395,
        "fullcodeline": "pixel=XGetPixel(ximage,(int) x,(int) y);"
    },
    {
        "line": 396,
        "fullcodeline": "index=(Quantum) ConstrainColormapIndex(image,(ssize_t) (pixel >>"
    },
    {
        "line": 398,
        "fullcodeline": "SetPixelRed(image,ScaleShortToQuantum("
    },
    {
        "line": 400,
        "fullcodeline": "index=(Quantum) ConstrainColormapIndex(image,(ssize_t) (pixel >>"
    },
    {
        "line": 402,
        "fullcodeline": "SetPixelGreen(image,ScaleShortToQuantum("
    },
    {
        "line": 404,
        "fullcodeline": "index=(Quantum) ConstrainColormapIndex(image,(ssize_t) (pixel >>"
    },
    {
        "line": 406,
        "fullcodeline": "SetPixelBlue(image,ScaleShortToQuantum("
    },
    {
        "line": 408,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 421,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 423,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 441,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 445,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 425,
        "fullcodeline": "pixel=XGetPixel(ximage,(int) x,(int) y);"
    },
    {
        "line": 426,
        "fullcodeline": "color=(pixel >> red_shift) & red_mask;"
    },
    {
        "line": 429,
        "fullcodeline": "SetPixelRed(image,ScaleShortToQuantum((unsigned short) color),q);"
    },
    {
        "line": 430,
        "fullcodeline": "color=(pixel >> green_shift) & green_mask;"
    },
    {
        "line": 433,
        "fullcodeline": "SetPixelGreen(image,ScaleShortToQuantum((unsigned short) color),"
    },
    {
        "line": 435,
        "fullcodeline": "color=(pixel >> blue_shift) & blue_mask;"
    },
    {
        "line": 438,
        "fullcodeline": "SetPixelBlue(image,ScaleShortToQuantum((unsigned short) color),q);"
    },
    {
        "line": 439,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 427,
        "fullcodeline": "if (red_mask != 0)"
    },
    {
        "line": 431,
        "fullcodeline": "if (green_mask != 0)"
    },
    {
        "line": 436,
        "fullcodeline": "if (blue_mask != 0)"
    },
    {
        "line": 480,
        "fullcodeline": "XGetPixel(ximage,(int) x,(int) y),exception);"
    },
    {
        "line": 428,
        "fullcodeline": "color=(color*65535UL)/red_mask;"
    },
    {
        "line": 432,
        "fullcodeline": "color=(color*65535UL)/green_mask;"
    },
    {
        "line": 437,
        "fullcodeline": "color=(color*65535UL)/blue_mask;"
    }
]