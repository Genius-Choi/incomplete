[
    {
        "line": 17,
        "fullcodeline": "tptr=pptr;"
    },
    {
        "line": 18,
        "fullcodeline": "lmp_com_header = (const struct lmp_common_header *)pptr;"
    },
    {
        "line": 41,
        "fullcodeline": "tlen=EXTRACT_16BITS(lmp_com_header->length);"
    },
    {
        "line": 43,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\tLMPv%u, msg-type: %s, Flags: [%s], length: %u\","
    },
    {
        "line": 49,
        "fullcodeline": "tptr+=sizeof(const struct lmp_common_header);"
    },
    {
        "line": 50,
        "fullcodeline": "tlen-=sizeof(const struct lmp_common_header);"
    },
    {
        "line": 24,
        "fullcodeline": "if (LMP_EXTRACT_VERSION(lmp_com_header->version_res[0]) != LMP_VERSION) {"
    },
    {
        "line": 31,
        "fullcodeline": "if (ndo->ndo_vflag < 1) {"
    },
    {
        "line": 52,
        "fullcodeline": "while(tlen>0) {"
    },
    {
        "line": 25,
        "fullcodeline": "ND_PRINT((ndo, \"LMP version %u packet not supported\","
    },
    {
        "line": 32,
        "fullcodeline": "ND_PRINT((ndo, \"LMPv%u %s Message, length: %u\","
    },
    {
        "line": 54,
        "fullcodeline": "ND_TCHECK2(*tptr, sizeof(struct lmp_object_header));"
    },
    {
        "line": 56,
        "fullcodeline": "lmp_obj_header = (const struct lmp_object_header *)tptr;"
    },
    {
        "line": 57,
        "fullcodeline": "lmp_obj_len=EXTRACT_16BITS(lmp_obj_header->length);"
    },
    {
        "line": 58,
        "fullcodeline": "lmp_obj_ctype=(lmp_obj_header->ctype)&0x7f;"
    },
    {
        "line": 63,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t  %s Object (%u), Class-Type: %s (%u) Flags: [%snegotiable], length: %u\","
    },
    {
        "line": 75,
        "fullcodeline": "obj_tptr=tptr+sizeof(struct lmp_object_header);"
    },
    {
        "line": 76,
        "fullcodeline": "obj_tlen=lmp_obj_len-sizeof(struct lmp_object_header);"
    },
    {
        "line": 79,
        "fullcodeline": "ND_TCHECK2(*tptr, lmp_obj_len);"
    },
    {
        "line": 80,
        "fullcodeline": "hexdump=FALSE;"
    },
    {
        "line": 503,
        "fullcodeline": "tptr+=lmp_obj_len;"
    },
    {
        "line": 504,
        "fullcodeline": "tlen-=lmp_obj_len;"
    },
    {
        "line": 44,
        "fullcodeline": "LMP_EXTRACT_VERSION(lmp_com_header->version_res[0]),"
    },
    {
        "line": 45,
        "fullcodeline": "tok2str(lmp_msg_type_values, \"unknown, type: %u\",lmp_com_header->msg_type),"
    },
    {
        "line": 46,
        "fullcodeline": "bittok2str(lmp_header_flag_values,\"none\",lmp_com_header->flags),"
    },
    {
        "line": 60,
        "fullcodeline": "if(lmp_obj_len % 4 || lmp_obj_len < 4)"
    },
    {
        "line": 499,
        "fullcodeline": "if (ndo->ndo_vflag > 1 || hexdump==TRUE)"
    },
    {
        "line": 182,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t    Flags: [%s]\","
    },
    {
        "line": 205,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t    Flags: [%s]\","
    },
    {
        "line": 500,
        "fullcodeline": "print_unknown_data(ndo,tptr+sizeof(struct lmp_object_header),\"\\n\\t    \","
    },
    {
        "line": 26,
        "fullcodeline": "LMP_EXTRACT_VERSION(lmp_com_header->version_res[0])));"
    },
    {
        "line": 33,
        "fullcodeline": "LMP_EXTRACT_VERSION(lmp_com_header->version_res[0]),"
    },
    {
        "line": 34,
        "fullcodeline": "tok2str(lmp_msg_type_values, \"unknown (%u)\",lmp_com_header->msg_type),"
    },
    {
        "line": 64,
        "fullcodeline": "tok2str(lmp_obj_values,"
    },
    {
        "line": 68,
        "fullcodeline": "tok2str(lmp_ctype_values,"
    },
    {
        "line": 72,
        "fullcodeline": "(lmp_obj_header->ctype)&0x80 ? \"\" : \"non-\","
    },
    {
        "line": 494,
        "fullcodeline": "if (ndo->ndo_vflag <= 1)"
    },
    {
        "line": 501,
        "fullcodeline": "lmp_obj_len-sizeof(struct lmp_object_header));"
    },
    {
        "line": 70,
        "fullcodeline": "((lmp_obj_header->class_num)<<8)+lmp_obj_ctype),"
    },
    {
        "line": 88,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t    Control Channel ID: %u (0x%08x)\","
    },
    {
        "line": 94,
        "fullcodeline": "hexdump=TRUE;"
    },
    {
        "line": 103,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t    IPv4 Link ID: %s (0x%08x)\","
    },
    {
        "line": 109,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t    IPv6 Link ID: %s (0x%08x)\","
    },
    {
        "line": 115,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t    Link ID: %u (0x%08x)\","
    },
    {
        "line": 120,
        "fullcodeline": "hexdump=TRUE;"
    },
    {
        "line": 127,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t    Message ID: %u (0x%08x)\","
    },
    {
        "line": 132,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t    Message ID Ack: %u (0x%08x)\","
    },
    {
        "line": 137,
        "fullcodeline": "hexdump=TRUE;"
    },
    {
        "line": 145,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t    Node ID: %s (0x%08x)\","
    },
    {
        "line": 151,
        "fullcodeline": "hexdump=TRUE;"
    },
    {
        "line": 158,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t    Hello Interval: %u\\n\\t    Hello Dead Interval: %u\","
    },
    {
        "line": 164,
        "fullcodeline": "hexdump=TRUE;"
    },
    {
        "line": 171,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t    Tx Seq: %u, Rx Seq: %u\","
    },
    {
        "line": 177,
        "fullcodeline": "hexdump=TRUE;"
    },
    {
        "line": 189,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t    Local Link-ID: %s (0x%08x)\""
    },
    {
        "line": 200,
        "fullcodeline": "hexdump=TRUE;"
    },
    {
        "line": 213,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t    Local Interface ID: %s (0x%08x)\""
    },
    {
        "line": 220,
        "fullcodeline": "total_subobj_len = lmp_obj_len - 16;"
    },
    {
        "line": 221,
        "fullcodeline": "offset = 12;"
    },
    {
        "line": 266,
        "fullcodeline": "hexdump=TRUE;"
    },
    {
        "line": 273,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t    Flags: %s\","
    },
    {
        "line": 277,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t    Verify Interval: %u\","
    },
    {
        "line": 279,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t    Data links: %u\","
    },
    {
        "line": 281,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t    Encoding type: %s\","
    },
    {
        "line": 283,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t    Verify Transport Mechanism: %u (0x%x)%s\","
    },
    {
        "line": 287,
        "fullcodeline": "bw.i = EXTRACT_32BITS(obj_tptr+12);"
    },
    {
        "line": 288,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t    Transmission Rate: %.3f Mbps\",bw.f*8/1000000));"
    },
    {
        "line": 289,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t    Wavelength: %u\","
    },
    {
        "line": 294,
        "fullcodeline": "hexdump=TRUE;"
    },
    {
        "line": 301,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t    Verify Dead Interval: %u\""
    },
    {
        "line": 308,
        "fullcodeline": "hexdump=TRUE;"
    },
    {
        "line": 315,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t    Verify ID: %u\","
    },
    {
        "line": 320,
        "fullcodeline": "hexdump=TRUE;"
    },
    {
        "line": 328,
        "fullcodeline": "offset = 0;"
    },
    {
        "line": 353,
        "fullcodeline": "hexdump=TRUE;"
    },
    {
        "line": 361,
        "fullcodeline": "offset = 0;"
    },
    {
        "line": 371,
        "fullcodeline": "hexdump=TRUE;"
    },
    {
        "line": 378,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t    Error Code: %s\","
    },
    {
        "line": 385,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t    Error Code: %s\","
    },
    {
        "line": 391,
        "fullcodeline": "hexdump=TRUE;"
    },
    {
        "line": 399,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t Flags: %s\","
    },
    {
        "line": 404,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t  UNI Version: %u\","
    },
    {
        "line": 411,
        "fullcodeline": "link_type = EXTRACT_16BITS(obj_tptr)>>8;"
    },
    {
        "line": 413,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t Link Type: %s (%u)\","
    },
    {
        "line": 434,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t Transparency: %s\","
    },
    {
        "line": 439,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t Contiguous Concatenation Types: %s\","
    },
    {
        "line": 444,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t Minimum NCC: %u\","
    },
    {
        "line": 447,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t Maximum NCC: %u\","
    },
    {
        "line": 450,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t Minimum NVC:%u\","
    },
    {
        "line": 453,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t Maximum NVC:%u\","
    },
    {
        "line": 456,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t    Local Interface ID: %s (0x%08x)\","
    },
    {
        "line": 464,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t Transparency Flags: %s\","
    },
    {
        "line": 470,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t TCM Monitoring Flags: %s\","
    },
    {
        "line": 480,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t Diversity: Flags: %s\","
    },
    {
        "line": 488,
        "fullcodeline": "hexdump = TRUE;"
    },
    {
        "line": 495,
        "fullcodeline": "print_unknown_data(ndo,obj_tptr,\"\\n\\t    \",obj_tlen);"
    },
    {
        "line": 183,
        "fullcodeline": "bittok2str(lmp_obj_te_link_flag_values,"
    },
    {
        "line": 206,
        "fullcodeline": "bittok2str(lmp_obj_data_link_flag_values,"
    },
    {
        "line": 222,
        "fullcodeline": "while (total_subobj_len > 0 && hexdump == FALSE ) {"
    },
    {
        "line": 330,
        "fullcodeline": "while (offset < (lmp_obj_len-(int)sizeof(struct lmp_object_header)) ) {"
    },
    {
        "line": 362,
        "fullcodeline": "while (offset < (lmp_obj_len-(int)sizeof(struct lmp_object_header)) ) {"
    },
    {
        "line": 418,
        "fullcodeline": "if (link_type == LMP_SD_SERVICE_CONFIG_CPSA_LINK_TYPE_SDH) {"
    },
    {
        "line": 426,
        "fullcodeline": "if (link_type == LMP_SD_SERVICE_CONFIG_CPSA_LINK_TYPE_SONET) {"
    },
    {
        "line": 185,
        "fullcodeline": "EXTRACT_16BITS(obj_tptr)>>8)));"
    },
    {
        "line": 208,
        "fullcodeline": "EXTRACT_16BITS(obj_tptr)>>8)));"
    },
    {
        "line": 223,
        "fullcodeline": "subobj_type = EXTRACT_16BITS(obj_tptr+offset)>>8;"
    },
    {
        "line": 224,
        "fullcodeline": "subobj_len  = EXTRACT_16BITS(obj_tptr+offset)&0x00FF;"
    },
    {
        "line": 225,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t    Subobject, Type: %s (%u), Length: %u\","
    },
    {
        "line": 259,
        "fullcodeline": "total_subobj_len-=subobj_len;"
    },
    {
        "line": 260,
        "fullcodeline": "offset+=subobj_len;"
    },
    {
        "line": 331,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t    Interface ID: %s (0x%08x)\","
    },
    {
        "line": 335,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t\\t    Active: %s (%u)\", \t\t(EXTRACT_32BITS(obj_tptr+offset+4)>>31) ?"
    },
    {
        "line": 339,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t\\t    Direction: %s (%u)\", (EXTRACT_32BITS(obj_tptr+offset+4)>>30)&0x1 ?"
    },
    {
        "line": 343,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t\\t    Channel Status: %s (%u)\","
    },
    {
        "line": 348,
        "fullcodeline": "offset+=8;"
    },
    {
        "line": 363,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t    Interface ID: %s (0x%08x)\","
    },
    {
        "line": 366,
        "fullcodeline": "offset+=4;"
    },
    {
        "line": 419,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t Signal Type: %s (%u)\","
    },
    {
        "line": 427,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t Signal Type: %s (%u)\","
    },
    {
        "line": 89,
        "fullcodeline": "EXTRACT_32BITS(obj_tptr),"
    },
    {
        "line": 90,
        "fullcodeline": "EXTRACT_32BITS(obj_tptr)));"
    },
    {
        "line": 104,
        "fullcodeline": "ipaddr_string(ndo, obj_tptr),"
    },
    {
        "line": 105,
        "fullcodeline": "EXTRACT_32BITS(obj_tptr)));"
    },
    {
        "line": 110,
        "fullcodeline": "ip6addr_string(ndo, obj_tptr),"
    },
    {
        "line": 111,
        "fullcodeline": "EXTRACT_32BITS(obj_tptr)));"
    },
    {
        "line": 116,
        "fullcodeline": "EXTRACT_32BITS(obj_tptr),"
    },
    {
        "line": 117,
        "fullcodeline": "EXTRACT_32BITS(obj_tptr)));"
    },
    {
        "line": 128,
        "fullcodeline": "EXTRACT_32BITS(obj_tptr),"
    },
    {
        "line": 129,
        "fullcodeline": "EXTRACT_32BITS(obj_tptr)));"
    },
    {
        "line": 133,
        "fullcodeline": "EXTRACT_32BITS(obj_tptr),"
    },
    {
        "line": 134,
        "fullcodeline": "EXTRACT_32BITS(obj_tptr)));"
    },
    {
        "line": 146,
        "fullcodeline": "ipaddr_string(ndo, obj_tptr),"
    },
    {
        "line": 147,
        "fullcodeline": "EXTRACT_32BITS(obj_tptr)));"
    },
    {
        "line": 159,
        "fullcodeline": "EXTRACT_16BITS(obj_tptr),"
    },
    {
        "line": 160,
        "fullcodeline": "EXTRACT_16BITS(obj_tptr+2)));"
    },
    {
        "line": 172,
        "fullcodeline": "EXTRACT_32BITS(obj_tptr),"
    },
    {
        "line": 173,
        "fullcodeline": "EXTRACT_32BITS(obj_tptr+4)));"
    },
    {
        "line": 191,
        "fullcodeline": "ipaddr_string(ndo, obj_tptr+4),"
    },
    {
        "line": 192,
        "fullcodeline": "EXTRACT_32BITS(obj_tptr+4),"
    },
    {
        "line": 193,
        "fullcodeline": "ipaddr_string(ndo, obj_tptr+8),"
    },
    {
        "line": 194,
        "fullcodeline": "EXTRACT_32BITS(obj_tptr+8)));"
    },
    {
        "line": 215,
        "fullcodeline": "ipaddr_string(ndo, obj_tptr+4),"
    },
    {
        "line": 216,
        "fullcodeline": "EXTRACT_32BITS(obj_tptr+4),"
    },
    {
        "line": 217,
        "fullcodeline": "ipaddr_string(ndo, obj_tptr+8),"
    },
    {
        "line": 218,
        "fullcodeline": "EXTRACT_32BITS(obj_tptr+8)));"
    },
    {
        "line": 274,
        "fullcodeline": "bittok2str(lmp_obj_begin_verify_flag_values,"
    },
    {
        "line": 278,
        "fullcodeline": "EXTRACT_16BITS(obj_tptr+2)));"
    },
    {
        "line": 280,
        "fullcodeline": "EXTRACT_32BITS(obj_tptr+4)));"
    },
    {
        "line": 282,
        "fullcodeline": "tok2str(gmpls_encoding_values, \"Unknown\", *(obj_tptr+8))));"
    },
    {
        "line": 284,
        "fullcodeline": "EXTRACT_16BITS(obj_tptr+10),"
    },
    {
        "line": 285,
        "fullcodeline": "EXTRACT_16BITS(obj_tptr+10),"
    },
    {
        "line": 286,
        "fullcodeline": "EXTRACT_16BITS(obj_tptr+10)&8000 ? \" (Payload test messages capable)\" : \"\"));"
    },
    {
        "line": 290,
        "fullcodeline": "EXTRACT_32BITS(obj_tptr+16)));"
    },
    {
        "line": 303,
        "fullcodeline": "EXTRACT_16BITS(obj_tptr),"
    },
    {
        "line": 304,
        "fullcodeline": "EXTRACT_16BITS(obj_tptr+2)));"
    },
    {
        "line": 316,
        "fullcodeline": "EXTRACT_32BITS(obj_tptr)));"
    },
    {
        "line": 379,
        "fullcodeline": "bittok2str(lmp_obj_begin_verify_error_values,"
    },
    {
        "line": 386,
        "fullcodeline": "bittok2str(lmp_obj_link_summary_error_values,"
    },
    {
        "line": 400,
        "fullcodeline": "bittok2str(lmp_obj_service_config_sp_flag_values,"
    },
    {
        "line": 405,
        "fullcodeline": "EXTRACT_16BITS(obj_tptr) & 0x00FF));"
    },
    {
        "line": 414,
        "fullcodeline": "tok2str(lmp_sd_service_config_cpsa_link_type_values,"
    },
    {
        "line": 435,
        "fullcodeline": "bittok2str(lmp_obj_service_config_cpsa_tp_flag_values,"
    },
    {
        "line": 440,
        "fullcodeline": "bittok2str(lmp_obj_service_config_cpsa_cct_flag_values,"
    },
    {
        "line": 445,
        "fullcodeline": "EXTRACT_16BITS(obj_tptr+4)));"
    },
    {
        "line": 448,
        "fullcodeline": "EXTRACT_16BITS(obj_tptr+6)));"
    },
    {
        "line": 451,
        "fullcodeline": "EXTRACT_16BITS(obj_tptr+8)));"
    },
    {
        "line": 454,
        "fullcodeline": "EXTRACT_16BITS(obj_tptr+10)));"
    },
    {
        "line": 457,
        "fullcodeline": "ipaddr_string(ndo, obj_tptr+12),"
    },
    {
        "line": 458,
        "fullcodeline": "EXTRACT_32BITS(obj_tptr+12)));"
    },
    {
        "line": 465,
        "fullcodeline": "bittok2str("
    },
    {
        "line": 471,
        "fullcodeline": "bittok2str("
    },
    {
        "line": 481,
        "fullcodeline": "bittok2str("
    },
    {
        "line": 233,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t      Switching Type: %s (%u)\","
    },
    {
        "line": 238,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t      Encoding Type: %s (%u)\","
    },
    {
        "line": 243,
        "fullcodeline": "bw.i = EXTRACT_32BITS(obj_tptr+offset+4);"
    },
    {
        "line": 244,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t      Min Reservable Bandwidth: %.3f Mbps\","
    },
    {
        "line": 246,
        "fullcodeline": "bw.i = EXTRACT_32BITS(obj_tptr+offset+8);"
    },
    {
        "line": 247,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t      Max Reservable Bandwidth: %.3f Mbps\","
    },
    {
        "line": 251,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t      Wavelength: %u\","
    },
    {
        "line": 256,
        "fullcodeline": "hexdump=TRUE;"
    },
    {
        "line": 276,
        "fullcodeline": "EXTRACT_16BITS(obj_tptr))));"
    },
    {
        "line": 381,
        "fullcodeline": "EXTRACT_32BITS(obj_tptr))));"
    },
    {
        "line": 388,
        "fullcodeline": "EXTRACT_32BITS(obj_tptr))));"
    },
    {
        "line": 402,
        "fullcodeline": "EXTRACT_16BITS(obj_tptr)>>8)));"
    },
    {
        "line": 437,
        "fullcodeline": "EXTRACT_16BITS(obj_tptr+2)>>8)));"
    },
    {
        "line": 442,
        "fullcodeline": "EXTRACT_16BITS(obj_tptr+2)>>8 & 0x00FF)));"
    },
    {
        "line": 468,
        "fullcodeline": "EXTRACT_32BITS(obj_tptr))));"
    },
    {
        "line": 474,
        "fullcodeline": "EXTRACT_16BITS(obj_tptr+6) & 0x00FF)));"
    },
    {
        "line": 484,
        "fullcodeline": "EXTRACT_16BITS(obj_tptr+2) & 0x00FF)));"
    },
    {
        "line": 226,
        "fullcodeline": "tok2str(lmp_data_link_subobj,"
    },
    {
        "line": 332,
        "fullcodeline": "ipaddr_string(ndo, obj_tptr+offset),"
    },
    {
        "line": 333,
        "fullcodeline": "EXTRACT_32BITS(obj_tptr+offset)));"
    },
    {
        "line": 337,
        "fullcodeline": "(EXTRACT_32BITS(obj_tptr+offset+4)>>31)));"
    },
    {
        "line": 341,
        "fullcodeline": "(EXTRACT_32BITS(obj_tptr+offset+4)>>30)&0x1));"
    },
    {
        "line": 344,
        "fullcodeline": "tok2str(lmp_obj_channel_status_values,"
    },
    {
        "line": 347,
        "fullcodeline": "EXTRACT_32BITS(obj_tptr+offset+4)&0x3FFFFFF));"
    },
    {
        "line": 364,
        "fullcodeline": "ipaddr_string(ndo, obj_tptr+offset),"
    },
    {
        "line": 365,
        "fullcodeline": "EXTRACT_32BITS(obj_tptr+offset)));"
    },
    {
        "line": 420,
        "fullcodeline": "tok2str(lmp_sd_service_config_cpsa_signal_type_sdh_values,"
    },
    {
        "line": 423,
        "fullcodeline": "EXTRACT_16BITS(obj_tptr) & 0x00FF));"
    },
    {
        "line": 428,
        "fullcodeline": "tok2str(lmp_sd_service_config_cpsa_signal_type_sonet_values,"
    },
    {
        "line": 431,
        "fullcodeline": "EXTRACT_16BITS(obj_tptr) & 0x00FF));"
    },
    {
        "line": 346,
        "fullcodeline": "EXTRACT_32BITS(obj_tptr+offset+4)&0x3FFFFFF),"
    },
    {
        "line": 422,
        "fullcodeline": "EXTRACT_16BITS(obj_tptr) & 0x00FF),"
    },
    {
        "line": 430,
        "fullcodeline": "EXTRACT_16BITS(obj_tptr) & 0x00FF),"
    },
    {
        "line": 234,
        "fullcodeline": "tok2str(gmpls_switch_cap_values,"
    },
    {
        "line": 237,
        "fullcodeline": "EXTRACT_16BITS(obj_tptr+offset+2)>>8));"
    },
    {
        "line": 239,
        "fullcodeline": "tok2str(gmpls_encoding_values,"
    },
    {
        "line": 242,
        "fullcodeline": "EXTRACT_16BITS(obj_tptr+offset+2)&0x00FF));"
    },
    {
        "line": 245,
        "fullcodeline": "bw.f*8/1000000));"
    },
    {
        "line": 248,
        "fullcodeline": "bw.f*8/1000000));"
    },
    {
        "line": 252,
        "fullcodeline": "EXTRACT_32BITS(obj_tptr+offset+4)));"
    },
    {
        "line": 236,
        "fullcodeline": "EXTRACT_16BITS(obj_tptr+offset+2)>>8),"
    },
    {
        "line": 241,
        "fullcodeline": "EXTRACT_16BITS(obj_tptr+offset+2)&0x00FF),"
    }
]