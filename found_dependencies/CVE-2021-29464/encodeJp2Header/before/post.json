[
    {
        "line": 3,
        "fullcodeline": "DataBuf output(boxBuf.size_ + iccProfile_.size_ + 100); // allocate sufficient space"
    },
    {
        "line": 6,
        "fullcodeline": "Jp2BoxHeader* pBox   = (Jp2BoxHeader*) boxBuf.pData_;"
    },
    {
        "line": 7,
        "fullcodeline": "int32_t       length = getLong((byte*)&pBox->length, bigEndian);"
    },
    {
        "line": 9,
        "fullcodeline": "char*         p      = (char*) boxBuf.pData_;"
    },
    {
        "line": 10,
        "fullcodeline": "bool          bWroteColor = false ;"
    },
    {
        "line": 63,
        "fullcodeline": "outBuf.alloc(outlen);"
    },
    {
        "line": 64,
        "fullcodeline": "::memcpy(outBuf.pData_,output.pData_,outlen);"
    },
    {
        "line": 65,
        "fullcodeline": "pBox   = (Jp2BoxHeader*) outBuf.pData_;"
    },
    {
        "line": 66,
        "fullcodeline": "ul2Data((byte*)&pBox->type,kJp2BoxTypeJp2Header,bigEndian);"
    },
    {
        "line": 67,
        "fullcodeline": "ul2Data((byte*)&pBox->length,outlen,bigEndian);"
    },
    {
        "line": 12,
        "fullcodeline": "while ( count < length || !bWroteColor ) {"
    },
    {
        "line": 13,
        "fullcodeline": "Jp2BoxHeader* pSubBox = (Jp2BoxHeader*) (p+count) ;"
    },
    {
        "line": 16,
        "fullcodeline": "Jp2BoxHeader   subBox ; memcpy(&subBox,pSubBox,sizeof(subBox));"
    },
    {
        "line": 17,
        "fullcodeline": "Jp2BoxHeader   newBox =  subBox;"
    },
    {
        "line": 33,
        "fullcodeline": "int32_t newlen = subBox.length;"
    },
    {
        "line": 58,
        "fullcodeline": "outlen += newlen;"
    },
    {
        "line": 59,
        "fullcodeline": "inlen  += subBox.length;"
    },
    {
        "line": 19,
        "fullcodeline": "if ( count < length ) {"
    },
    {
        "line": 34,
        "fullcodeline": "if ( newBox.type == kJp2BoxTypeColorHeader ) {"
    },
    {
        "line": 20,
        "fullcodeline": "subBox.length = getLong((byte*)&subBox.length, bigEndian);"
    },
    {
        "line": 21,
        "fullcodeline": "subBox.type   = getLong((byte*)&subBox.type  , bigEndian);"
    },
    {
        "line": 25,
        "fullcodeline": "count        += subBox.length;"
    },
    {
        "line": 26,
        "fullcodeline": "newBox.type   = subBox.type;"
    },
    {
        "line": 35,
        "fullcodeline": "bWroteColor = true ;"
    },
    {
        "line": 28,
        "fullcodeline": "subBox.length=0;"
    },
    {
        "line": 29,
        "fullcodeline": "newBox.type = kJp2BoxTypeColorHeader;"
    },
    {
        "line": 30,
        "fullcodeline": "count = length;"
    },
    {
        "line": 36,
        "fullcodeline": "if ( ! iccProfileDefined() ) {"
    },
    {
        "line": 55,
        "fullcodeline": "::memcpy(output.pData_+outlen,boxBuf.pData_+inlen,subBox.length);"
    },
    {
        "line": 37,
        "fullcodeline": "const char* pad   = \"\\x01\\x00\\x00\\x00\\x00\\x00\\x10\\x00\\x00\\x05\\x1cuuid\";"
    },
    {
        "line": 38,
        "fullcodeline": "uint32_t    psize = 15;"
    },
    {
        "line": 39,
        "fullcodeline": "newlen            = sizeof(newBox) + psize ;"
    },
    {
        "line": 40,
        "fullcodeline": "ul2Data((byte*)&newBox.length,psize      ,bigEndian);"
    },
    {
        "line": 41,
        "fullcodeline": "ul2Data((byte*)&newBox.type  ,newBox.type,bigEndian);"
    },
    {
        "line": 42,
        "fullcodeline": "::memcpy(output.pData_+outlen                     ,&newBox            ,sizeof(newBox));"
    },
    {
        "line": 43,
        "fullcodeline": "::memcpy(output.pData_+outlen+sizeof(newBox)      ,pad                ,psize         );"
    },
    {
        "line": 45,
        "fullcodeline": "const char* pad   = \"\\x02\\x00\\x00\";"
    },
    {
        "line": 46,
        "fullcodeline": "uint32_t    psize = 3;"
    },
    {
        "line": 47,
        "fullcodeline": "newlen            = sizeof(newBox) + psize + iccProfile_.size_;"
    },
    {
        "line": 48,
        "fullcodeline": "ul2Data((byte*)&newBox.length,newlen,bigEndian);"
    },
    {
        "line": 49,
        "fullcodeline": "ul2Data((byte*)&newBox.type,newBox.type,bigEndian);"
    },
    {
        "line": 50,
        "fullcodeline": "::memcpy(output.pData_+outlen                     ,&newBox            ,sizeof(newBox)  );"
    },
    {
        "line": 51,
        "fullcodeline": "::memcpy(output.pData_+outlen+sizeof(newBox)      , pad               ,psize           );"
    },
    {
        "line": 52,
        "fullcodeline": "::memcpy(output.pData_+outlen+sizeof(newBox)+psize,iccProfile_.pData_,iccProfile_.size_);"
    }
]