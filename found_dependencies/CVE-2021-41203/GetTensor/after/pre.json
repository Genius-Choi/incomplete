[
    {
        "line": 24,
        "fullcodeline": "Status s = tensorflow::Tensor::BuildTensor(type, shape, t.get());"
    },
    {
        "line": 7,
        "fullcodeline": "mutex_lock l(mu_);"
    },
    {
        "line": 8,
        "fullcodeline": "const TensorSliceSet* tss = gtl::FindPtrOrNull(tensors_, name);"
    },
    {
        "line": 18,
        "fullcodeline": "type = tss->type();"
    },
    {
        "line": 19,
        "fullcodeline": "shape = tss->shape();"
    },
    {
        "line": 20,
        "fullcodeline": "slice = tss->Slices().begin()->second.slice;"
    },
    {
        "line": 23,
        "fullcodeline": "std::unique_ptr<tensorflow::Tensor> t(new tensorflow::Tensor);"
    },
    {
        "line": 53,
        "fullcodeline": "return Status::OK();"
    },
    {
        "line": 9,
        "fullcodeline": "if (tss == nullptr) {"
    },
    {
        "line": 25,
        "fullcodeline": "if (!s.ok()) return s;"
    },
    {
        "line": 35,
        "fullcodeline": "READER_COPY(DT_FLOAT);"
    },
    {
        "line": 36,
        "fullcodeline": "READER_COPY(DT_DOUBLE);"
    },
    {
        "line": 37,
        "fullcodeline": "READER_COPY(DT_INT32);"
    },
    {
        "line": 38,
        "fullcodeline": "READER_COPY(DT_UINT8);"
    },
    {
        "line": 39,
        "fullcodeline": "READER_COPY(DT_INT16);"
    },
    {
        "line": 40,
        "fullcodeline": "READER_COPY(DT_INT8);"
    },
    {
        "line": 41,
        "fullcodeline": "READER_COPY(DT_INT64);"
    },
    {
        "line": 42,
        "fullcodeline": "READER_COPY(DT_STRING);"
    },
    {
        "line": 13,
        "fullcodeline": "if (tss->Slices().size() > 1) {"
    },
    {
        "line": 44,
        "fullcodeline": "return errors::Unimplemented(\"Data type not supported\");"
    },
    {
        "line": 49,
        "fullcodeline": "return errors::NotFound(name, \" not found in checkpoint file\");"
    },
    {
        "line": 10,
        "fullcodeline": "return errors::NotFound(name, \" not found in checkpoint file\");"
    },
    {
        "line": 15,
        "fullcodeline": "return errors::Unimplemented(\"Sliced checkpoints are not supported\");"
    }
]