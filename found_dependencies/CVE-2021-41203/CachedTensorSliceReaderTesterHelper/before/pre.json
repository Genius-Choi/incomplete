[
    {
        "line": 4,
        "fullcodeline": "const string fname_base = io::JoinPath(testing::TmpDir(), \"float_checkpoint\");"
    },
    {
        "line": 6,
        "fullcodeline": "TensorShape shape({4, 5});"
    },
    {
        "line": 62,
        "fullcodeline": "const string filepattern = strings::StrCat(fname_base, \"_*\");"
    },
    {
        "line": 63,
        "fullcodeline": "const TensorSliceReader* reader = cache.GetReader("
    },
    {
        "line": 65,
        "fullcodeline": "EXPECT_TRUE(reader != nullptr);"
    },
    {
        "line": 66,
        "fullcodeline": "EXPECT_EQ(2, reader->num_files());"
    },
    {
        "line": 79,
        "fullcodeline": "const TensorSliceReader* reader2 = cache.GetReader("
    },
    {
        "line": 81,
        "fullcodeline": "EXPECT_EQ(reader, reader2);"
    },
    {
        "line": 83,
        "fullcodeline": "reader = cache.GetReader(\"file_does_not_exist\", open_function,"
    },
    {
        "line": 85,
        "fullcodeline": "EXPECT_TRUE(reader == nullptr);"
    },
    {
        "line": 15,
        "fullcodeline": "const string fname = strings::StrCat(fname_base, \"_0\");"
    },
    {
        "line": 16,
        "fullcodeline": "TensorSliceWriter writer(fname, create_function);"
    },
    {
        "line": 17,
        "fullcodeline": "const float data[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};"
    },
    {
        "line": 18,
        "fullcodeline": "TensorSlice slice = TensorSlice::ParseOrDie(\"0,2:-\");"
    },
    {
        "line": 37,
        "fullcodeline": "const string fname = strings::StrCat(fname_base, \"_1\");"
    },
    {
        "line": 38,
        "fullcodeline": "TensorSliceWriter writer(fname, create_function);"
    },
    {
        "line": 51,
        "fullcodeline": "TF_CHECK_OK(writer.Finish());"
    },
    {
        "line": 72,
        "fullcodeline": "EXPECT_TRUE(reader->HasTensor(\"test\", &shape, &type));"
    },
    {
        "line": 73,
        "fullcodeline": "EXPECT_EQ(\"[4,5]\", shape.DebugString());"
    },
    {
        "line": 74,
        "fullcodeline": "EXPECT_EQ(DT_FLOAT, type);"
    },
    {
        "line": 75,
        "fullcodeline": "EXPECT_FALSE(reader->HasTensor(\"don't exist\", nullptr, nullptr));"
    },
    {
        "line": 19,
        "fullcodeline": "TF_CHECK_OK(writer.Add(\"test\", shape, slice, data));"
    },
    {
        "line": 20,
        "fullcodeline": "TF_CHECK_OK(writer.Finish());"
    },
    {
        "line": 41,
        "fullcodeline": "const float data[] = {10, 11, 12, 15, 16, 17};"
    },
    {
        "line": 42,
        "fullcodeline": "TensorSlice slice = TensorSlice::ParseOrDie(\"2,2:0,3\");"
    },
    {
        "line": 47,
        "fullcodeline": "const float data[] = {18, 19};"
    },
    {
        "line": 48,
        "fullcodeline": "TensorSlice slice = TensorSlice::ParseOrDie(\"3,1:3,2\");"
    },
    {
        "line": 49,
        "fullcodeline": "TF_CHECK_OK(writer.Add(\"test\", shape, slice, data));"
    },
    {
        "line": 43,
        "fullcodeline": "TF_CHECK_OK(writer.Add(\"test\", shape, slice, data));"
    }
]