[
    {
        "line": 12,
        "fullcodeline": "max = w * h;"
    },
    {
        "line": 14,
        "fullcodeline": "sC = 1.0F / (float)((1 << image->comps[0].prec) - 1);"
    },
    {
        "line": 15,
        "fullcodeline": "sM = 1.0F / (float)((1 << image->comps[1].prec) - 1);"
    },
    {
        "line": 16,
        "fullcodeline": "sY = 1.0F / (float)((1 << image->comps[2].prec) - 1);"
    },
    {
        "line": 17,
        "fullcodeline": "sK = 1.0F / (float)((1 << image->comps[3].prec) - 1);"
    },
    {
        "line": 39,
        "fullcodeline": "free(image->comps[3].data); image->comps[3].data = NULL;"
    },
    {
        "line": 40,
        "fullcodeline": "image->comps[0].prec = 8;"
    },
    {
        "line": 41,
        "fullcodeline": "image->comps[1].prec = 8;"
    },
    {
        "line": 42,
        "fullcodeline": "image->comps[2].prec = 8;"
    },
    {
        "line": 43,
        "fullcodeline": "image->numcomps -= 1;"
    },
    {
        "line": 44,
        "fullcodeline": "image->color_space = OPJ_CLRSPC_SRGB;"
    },
    {
        "line": 10,
        "fullcodeline": "if(image->numcomps < 4) return;"
    },
    {
        "line": 19,
        "fullcodeline": "for(i = 0; i < max; ++i)"
    },
    {
        "line": 46,
        "fullcodeline": "for (i = 3; i < image->numcomps; ++i) {"
    },
    {
        "line": 22,
        "fullcodeline": "C = (float)(image->comps[0].data[i]) * sC;"
    },
    {
        "line": 23,
        "fullcodeline": "M = (float)(image->comps[1].data[i]) * sM;"
    },
    {
        "line": 24,
        "fullcodeline": "Y = (float)(image->comps[2].data[i]) * sY;"
    },
    {
        "line": 25,
        "fullcodeline": "K = (float)(image->comps[3].data[i]) * sK;"
    },
    {
        "line": 28,
        "fullcodeline": "C = 1.0F - C;"
    },
    {
        "line": 29,
        "fullcodeline": "M = 1.0F - M;"
    },
    {
        "line": 30,
        "fullcodeline": "Y = 1.0F - Y;"
    },
    {
        "line": 31,
        "fullcodeline": "K = 1.0F - K;"
    },
    {
        "line": 34,
        "fullcodeline": "image->comps[0].data[i] = (int)(255.0F * C * K); /* R */"
    },
    {
        "line": 35,
        "fullcodeline": "image->comps[1].data[i] = (int)(255.0F * M * K); /* G */"
    },
    {
        "line": 36,
        "fullcodeline": "image->comps[2].data[i] = (int)(255.0F * Y * K); /* B */"
    },
    {
        "line": 47,
        "fullcodeline": "memcpy(&(image->comps[i]), &(image->comps[i+1]), sizeof(image->comps[i]));"
    }
]