[
    {
        "line": 10,
        "fullcodeline": "order_count = Order.objects.count()"
    },
    {
        "line": 11,
        "fullcodeline": "checkout = checkout_with_item_for_cc"
    },
    {
        "line": 12,
        "fullcodeline": "checkout.collection_point = warehouse_for_cc"
    },
    {
        "line": 13,
        "fullcodeline": "checkout.shipping_address = None"
    },
    {
        "line": 14,
        "fullcodeline": "checkout.save(update_fields=[\"collection_point\", \"shipping_address\"])"
    },
    {
        "line": 16,
        "fullcodeline": "variables = {"
    },
    {
        "line": 21,
        "fullcodeline": "manager = get_plugins_manager(allow_replica=False)"
    },
    {
        "line": 23,
        "fullcodeline": "checkout_info = fetch_checkout_info(checkout, lines, manager)"
    },
    {
        "line": 24,
        "fullcodeline": "total = calculations.checkout_total("
    },
    {
        "line": 27,
        "fullcodeline": "payment = payment_dummy"
    },
    {
        "line": 28,
        "fullcodeline": "payment.is_active = True"
    },
    {
        "line": 29,
        "fullcodeline": "payment.order = None"
    },
    {
        "line": 30,
        "fullcodeline": "payment.total = total.gross.amount"
    },
    {
        "line": 31,
        "fullcodeline": "payment.currency = total.gross.currency"
    },
    {
        "line": 32,
        "fullcodeline": "payment.checkout = checkout"
    },
    {
        "line": 33,
        "fullcodeline": "payment.save()"
    },
    {
        "line": 35,
        "fullcodeline": "assert not payment.transactions.exists()"
    },
    {
        "line": 36,
        "fullcodeline": "assert len(lines) == 1"
    },
    {
        "line": 37,
        "fullcodeline": "variant = lines[0].variant"
    },
    {
        "line": 43,
        "fullcodeline": "response = api_client.post_graphql(MUTATION_CHECKOUT_COMPLETE, variables)"
    },
    {
        "line": 46,
        "fullcodeline": "content = get_graphql_content(response)[\"data\"][\"checkoutComplete\"]"
    },
    {
        "line": 48,
        "fullcodeline": "assert not content[\"errors\"]"
    },
    {
        "line": 49,
        "fullcodeline": "assert Order.objects.count() == order_count + 1"
    },
    {
        "line": 51,
        "fullcodeline": "order = Order.objects.first()"
    },
    {
        "line": 53,
        "fullcodeline": "assert order.collection_point == warehouse_for_cc"
    },
    {
        "line": 54,
        "fullcodeline": "assert order.shipping_method is None"
    },
    {
        "line": 55,
        "fullcodeline": "assert order.shipping_address == warehouse_for_cc.address"
    },
    {
        "line": 56,
        "fullcodeline": "assert order.shipping_price == zero_taxed_money(payment.currency)"
    },
    {
        "line": 57,
        "fullcodeline": "assert order.lines.count() == 1"
    },
    {
        "line": 60,
        "fullcodeline": "assert order.lines.first().allocations.first().stock.warehouse == warehouse_for_cc"
    },
    {
        "line": 22,
        "fullcodeline": "lines, _ = fetch_checkout_lines(checkout)"
    },
    {
        "line": 40,
        "fullcodeline": "Stock.objects.create(product_variant=variant, warehouse=warehouse, quantity=15)"
    },
    {
        "line": 17,
        "fullcodeline": "\"id\": to_global_id_or_none(checkout),"
    }
]