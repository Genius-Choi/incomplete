[
    {
        "line": 12,
        "fullcodeline": "char outfilename[50];"
    },
    {
        "line": 21,
        "fullcodeline": "file = fopen(argv[1], \"rb\");"
    },
    {
        "line": 32,
        "fullcodeline": "memset(&event_mgr, 0, sizeof(opj_event_mgr_t));"
    },
    {
        "line": 33,
        "fullcodeline": "event_mgr.error_handler = error_callback;"
    },
    {
        "line": 34,
        "fullcodeline": "event_mgr.warning_handler = warning_callback;"
    },
    {
        "line": 35,
        "fullcodeline": "event_mgr.info_handler = info_callback;"
    },
    {
        "line": 38,
        "fullcodeline": "dinfo = mj2_create_decompress();"
    },
    {
        "line": 41,
        "fullcodeline": "opj_set_event_mgr((opj_common_ptr)dinfo, &event_mgr, stderr);"
    },
    {
        "line": 44,
        "fullcodeline": "memset(&parameters, 0, sizeof(mj2_dparameters_t));"
    },
    {
        "line": 45,
        "fullcodeline": "movie = (opj_mj2_t*) dinfo->mj2_handle;"
    },
    {
        "line": 46,
        "fullcodeline": "mj2_setup_decoder(movie, &parameters);"
    },
    {
        "line": 53,
        "fullcodeline": "tnum = 0;"
    },
    {
        "line": 58,
        "fullcodeline": "track = &movie->tk[tnum];"
    },
    {
        "line": 60,
        "fullcodeline": "fprintf(stdout, \"Extracting %d frames from file...\\n\", track->num_samples);"
    },
    {
        "line": 80,
        "fullcodeline": "fclose(file);"
    },
    {
        "line": 81,
        "fullcodeline": "fprintf(stdout, \"%d frames correctly extracted\\n\", snum);"
    },
    {
        "line": 15,
        "fullcodeline": "if (argc != 3) {"
    },
    {
        "line": 23,
        "fullcodeline": "if (!file) {"
    },
    {
        "line": 48,
        "fullcodeline": "if (mj2_read_struct(file, movie)) { /* Creating the movie structure*/"
    },
    {
        "line": 54,
        "fullcodeline": "while (movie->tk[tnum].track_type != 0) {"
    },
    {
        "line": 62,
        "fullcodeline": "for (snum = 0; snum < track->num_samples; snum++) {"
    },
    {
        "line": 16,
        "fullcodeline": "printf(\"Usage: %s mj2filename output_location\\n\", argv[0]);"
    },
    {
        "line": 17,
        "fullcodeline": "printf(\"Example: %s foreman.mj2 output/foreman\\n\", argv[0]);"
    },
    {
        "line": 24,
        "fullcodeline": "fprintf(stderr, \"failed to open %s for reading\\n\", argv[1]);"
    },
    {
        "line": 55,
        "fullcodeline": "tnum ++;"
    },
    {
        "line": 64,
        "fullcodeline": "frame_codestream = (unsigned char*) malloc(sample->sample_size -"
    },
    {
        "line": 66,
        "fullcodeline": "fseek(file, sample->offset + 8, SEEK_SET);"
    },
    {
        "line": 67,
        "fullcodeline": "fread(frame_codestream, sample->sample_size - 8, 1,"
    },
    {
        "line": 70,
        "fullcodeline": "sprintf(outfilename, \"%s_%05d.j2k\", argv[2], snum);"
    },
    {
        "line": 71,
        "fullcodeline": "outfile = fopen(outfilename, \"wb\");"
    },
    {
        "line": 76,
        "fullcodeline": "fwrite(frame_codestream, sample->sample_size - 8, 1, outfile);"
    },
    {
        "line": 77,
        "fullcodeline": "fclose(outfile);"
    },
    {
        "line": 78,
        "fullcodeline": "free(frame_codestream);"
    },
    {
        "line": 85,
        "fullcodeline": "mj2_destroy_decompress((opj_mj2_t*)dinfo->mj2_handle);"
    },
    {
        "line": 72,
        "fullcodeline": "if (!outfile) {"
    },
    {
        "line": 73,
        "fullcodeline": "fprintf(stderr, \"failed to open %s for writing\\n\", outfilename);"
    }
]