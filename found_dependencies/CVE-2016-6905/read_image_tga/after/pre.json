[
    {
        "line": 3,
        "fullcodeline": "int pixel_block_size = (tga->bits / 8);"
    },
    {
        "line": 4,
        "fullcodeline": "int image_block_size = (tga->width * tga->height) * pixel_block_size;"
    },
    {
        "line": 5,
        "fullcodeline": "uint8_t* decompression_buffer = NULL;"
    },
    {
        "line": 6,
        "fullcodeline": "unsigned char* conversion_buffer = NULL;"
    },
    {
        "line": 7,
        "fullcodeline": "int buffer_caret = 0;"
    },
    {
        "line": 8,
        "fullcodeline": "int bitmap_caret = 0;"
    },
    {
        "line": 9,
        "fullcodeline": "int i = 0;"
    },
    {
        "line": 32,
        "fullcodeline": "tga->bitmap = (int *) gdMalloc(image_block_size * sizeof(int));"
    },
    {
        "line": 12,
        "fullcodeline": "if(overflow2(tga->width, tga->height)) {"
    },
    {
        "line": 16,
        "fullcodeline": "if(overflow2(tga->width * tga->height, pixel_block_size)) {"
    },
    {
        "line": 20,
        "fullcodeline": "if(overflow2(image_block_size, sizeof(int))) {"
    },
    {
        "line": 33,
        "fullcodeline": "if (tga->bitmap == NULL)"
    },
    {
        "line": 26,
        "fullcodeline": "if (tga->imagetype != TGA_TYPE_RGB && tga->imagetype != TGA_TYPE_RGB_RLE)"
    },
    {
        "line": 41,
        "fullcodeline": "conversion_buffer = (unsigned char *) gdMalloc(image_block_size * sizeof(unsigned char));"
    },
    {
        "line": 64,
        "fullcodeline": "decompression_buffer = (uint8_t*) gdMalloc(image_block_size * sizeof(uint8_t));"
    },
    {
        "line": 68,
        "fullcodeline": "conversion_buffer = (unsigned char *) gdMalloc(image_block_size * sizeof(unsigned char));"
    },
    {
        "line": 81,
        "fullcodeline": "buffer_caret = 0;"
    },
    {
        "line": 88,
        "fullcodeline": "buffer_caret = 0;"
    },
    {
        "line": 13,
        "fullcodeline": "return -1;"
    },
    {
        "line": 17,
        "fullcodeline": "return -1;"
    },
    {
        "line": 21,
        "fullcodeline": "return -1;"
    },
    {
        "line": 27,
        "fullcodeline": "return -1;"
    },
    {
        "line": 34,
        "fullcodeline": "return -1;"
    },
    {
        "line": 42,
        "fullcodeline": "if (conversion_buffer == NULL) {"
    },
    {
        "line": 46,
        "fullcodeline": "if (gdGetBuf(conversion_buffer, image_block_size, ctx) != image_block_size) {"
    },
    {
        "line": 52,
        "fullcodeline": "while (buffer_caret < image_block_size) {"
    },
    {
        "line": 65,
        "fullcodeline": "if (decompression_buffer == NULL) {"
    },
    {
        "line": 69,
        "fullcodeline": "if (conversion_buffer == NULL) {"
    },
    {
        "line": 75,
        "fullcodeline": "if (gdGetBuf(conversion_buffer, image_block_size, ctx) != image_block_size) {"
    },
    {
        "line": 83,
        "fullcodeline": "while( buffer_caret < image_block_size) {"
    },
    {
        "line": 90,
        "fullcodeline": "while( bitmap_caret < image_block_size ) {"
    },
    {
        "line": 54,
        "fullcodeline": "buffer_caret++;"
    },
    {
        "line": 84,
        "fullcodeline": "decompression_buffer[buffer_caret] = (int)conversion_buffer[buffer_caret];"
    },
    {
        "line": 85,
        "fullcodeline": "buffer_caret++;"
    },
    {
        "line": 43,
        "fullcodeline": "return -1;"
    },
    {
        "line": 49,
        "fullcodeline": "return -1;"
    },
    {
        "line": 66,
        "fullcodeline": "return -1;"
    },
    {
        "line": 72,
        "fullcodeline": "return -1;"
    },
    {
        "line": 78,
        "fullcodeline": "return -1;"
    },
    {
        "line": 92,
        "fullcodeline": "if ((decompression_buffer[buffer_caret] & TGA_RLE_FLAG) == TGA_RLE_FLAG) {"
    },
    {
        "line": 93,
        "fullcodeline": "encoded_pixels = ( ( decompression_buffer[ buffer_caret ] & !TGA_RLE_FLAG ) + 1 );"
    },
    {
        "line": 94,
        "fullcodeline": "buffer_caret++;"
    },
    {
        "line": 106,
        "fullcodeline": "buffer_caret += pixel_block_size;"
    },
    {
        "line": 96,
        "fullcodeline": "if ((bitmap_caret + (encoded_pixels * pixel_block_size)) >= image_block_size) {"
    },
    {
        "line": 102,
        "fullcodeline": "for (i = 0; i < encoded_pixels; i++) {"
    },
    {
        "line": 109,
        "fullcodeline": "encoded_pixels = decompression_buffer[ buffer_caret ] + 1;"
    },
    {
        "line": 110,
        "fullcodeline": "buffer_caret++;"
    },
    {
        "line": 119,
        "fullcodeline": "bitmap_caret += (encoded_pixels * pixel_block_size);"
    },
    {
        "line": 120,
        "fullcodeline": "buffer_caret += (encoded_pixels * pixel_block_size);"
    },
    {
        "line": 103,
        "fullcodeline": "memcpy(tga->bitmap + bitmap_caret, decompression_buffer + buffer_caret, pixel_block_size);"
    },
    {
        "line": 104,
        "fullcodeline": "bitmap_caret += pixel_block_size;"
    },
    {
        "line": 112,
        "fullcodeline": "if ((bitmap_caret + (encoded_pixels * pixel_block_size)) >= image_block_size) {"
    },
    {
        "line": 118,
        "fullcodeline": "memcpy(tga->bitmap + bitmap_caret, decompression_buffer + buffer_caret, encoded_pixels * pixel_block_size);"
    },
    {
        "line": 99,
        "fullcodeline": "return -1;"
    },
    {
        "line": 115,
        "fullcodeline": "return -1;"
    }
]