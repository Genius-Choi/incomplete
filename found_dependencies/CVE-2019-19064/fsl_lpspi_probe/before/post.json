[
    {
        "line": 6,
        "fullcodeline": "struct spi_imx_master *lpspi_platform_info ="
    },
    {
        "line": 13,
        "fullcodeline": "is_slave = of_property_read_bool((&pdev->dev)->of_node, \"spi-slave\");"
    },
    {
        "line": 24,
        "fullcodeline": "platform_set_drvdata(pdev, controller);"
    },
    {
        "line": 26,
        "fullcodeline": "fsl_lpspi = spi_controller_get_devdata(controller);"
    },
    {
        "line": 27,
        "fullcodeline": "fsl_lpspi->dev = &pdev->dev;"
    },
    {
        "line": 28,
        "fullcodeline": "fsl_lpspi->is_slave = is_slave;"
    },
    {
        "line": 53,
        "fullcodeline": "controller->bits_per_word_mask = SPI_BPW_RANGE_MASK(8, 32);"
    },
    {
        "line": 54,
        "fullcodeline": "controller->transfer_one = fsl_lpspi_transfer_one;"
    },
    {
        "line": 55,
        "fullcodeline": "controller->prepare_transfer_hardware = lpspi_prepare_xfer_hardware;"
    },
    {
        "line": 56,
        "fullcodeline": "controller->unprepare_transfer_hardware = lpspi_unprepare_xfer_hardware;"
    },
    {
        "line": 57,
        "fullcodeline": "controller->mode_bits = SPI_CPOL | SPI_CPHA | SPI_CS_HIGH;"
    },
    {
        "line": 58,
        "fullcodeline": "controller->flags = SPI_MASTER_MUST_RX | SPI_MASTER_MUST_TX;"
    },
    {
        "line": 59,
        "fullcodeline": "controller->dev.of_node = pdev->dev.of_node;"
    },
    {
        "line": 60,
        "fullcodeline": "controller->bus_num = pdev->id;"
    },
    {
        "line": 61,
        "fullcodeline": "controller->slave_abort = fsl_lpspi_slave_abort;"
    },
    {
        "line": 63,
        "fullcodeline": "init_completion(&fsl_lpspi->xfer_done);"
    },
    {
        "line": 65,
        "fullcodeline": "res = platform_get_resource(pdev, IORESOURCE_MEM, 0);"
    },
    {
        "line": 66,
        "fullcodeline": "fsl_lpspi->base = devm_ioremap_resource(&pdev->dev, res);"
    },
    {
        "line": 71,
        "fullcodeline": "fsl_lpspi->base_phys = res->start;"
    },
    {
        "line": 73,
        "fullcodeline": "irq = platform_get_irq(pdev, 0);"
    },
    {
        "line": 79,
        "fullcodeline": "ret = devm_request_irq(&pdev->dev, irq, fsl_lpspi_isr, 0,"
    },
    {
        "line": 86,
        "fullcodeline": "fsl_lpspi->clk_per = devm_clk_get(&pdev->dev, \"per\");"
    },
    {
        "line": 92,
        "fullcodeline": "fsl_lpspi->clk_ipg = devm_clk_get(&pdev->dev, \"ipg\");"
    },
    {
        "line": 99,
        "fullcodeline": "ret = fsl_lpspi_init_rpm(fsl_lpspi);"
    },
    {
        "line": 103,
        "fullcodeline": "ret = pm_runtime_get_sync(fsl_lpspi->dev);"
    },
    {
        "line": 109,
        "fullcodeline": "temp = readl(fsl_lpspi->base + IMX7ULP_PARAM);"
    },
    {
        "line": 110,
        "fullcodeline": "fsl_lpspi->txfifosize = 1 << (temp & 0x0f);"
    },
    {
        "line": 111,
        "fullcodeline": "fsl_lpspi->rxfifosize = 1 << ((temp >> 8) & 0x0f);"
    },
    {
        "line": 113,
        "fullcodeline": "ret = fsl_lpspi_dma_init(&pdev->dev, fsl_lpspi, controller);"
    },
    {
        "line": 120,
        "fullcodeline": "ret = devm_spi_register_controller(&pdev->dev, controller);"
    },
    {
        "line": 129,
        "fullcodeline": "spi_controller_put(controller);"
    },
    {
        "line": 7,
        "fullcodeline": "dev_get_platdata(&pdev->dev);"
    },
    {
        "line": 21,
        "fullcodeline": "if (!controller)"
    },
    {
        "line": 30,
        "fullcodeline": "if (!fsl_lpspi->is_slave) {"
    },
    {
        "line": 67,
        "fullcodeline": "if (IS_ERR(fsl_lpspi->base)) {"
    },
    {
        "line": 74,
        "fullcodeline": "if (irq < 0) {"
    },
    {
        "line": 87,
        "fullcodeline": "if (IS_ERR(fsl_lpspi->clk_per)) {"
    },
    {
        "line": 93,
        "fullcodeline": "if (IS_ERR(fsl_lpspi->clk_ipg)) {"
    },
    {
        "line": 104,
        "fullcodeline": "if (ret < 0) {"
    },
    {
        "line": 114,
        "fullcodeline": "if (ret == -EPROBE_DEFER)"
    },
    {
        "line": 117,
        "fullcodeline": "if (ret < 0)"
    },
    {
        "line": 121,
        "fullcodeline": "if (ret < 0) {"
    },
    {
        "line": 15,
        "fullcodeline": "controller = spi_alloc_slave(&pdev->dev,"
    },
    {
        "line": 49,
        "fullcodeline": "controller->cs_gpios = fsl_lpspi->chipselect;"
    },
    {
        "line": 50,
        "fullcodeline": "controller->prepare_message = fsl_lpspi_prepare_message;"
    },
    {
        "line": 68,
        "fullcodeline": "ret = PTR_ERR(fsl_lpspi->base);"
    },
    {
        "line": 75,
        "fullcodeline": "ret = irq;"
    },
    {
        "line": 80,
        "fullcodeline": "dev_name(&pdev->dev), fsl_lpspi);"
    },
    {
        "line": 82,
        "fullcodeline": "dev_err(&pdev->dev, \"can't get irq%d: %d\\n\", irq, ret);"
    },
    {
        "line": 88,
        "fullcodeline": "ret = PTR_ERR(fsl_lpspi->clk_per);"
    },
    {
        "line": 94,
        "fullcodeline": "ret = PTR_ERR(fsl_lpspi->clk_ipg);"
    },
    {
        "line": 105,
        "fullcodeline": "dev_err(fsl_lpspi->dev, \"failed to enable clock\\n\");"
    },
    {
        "line": 118,
        "fullcodeline": "dev_err(&pdev->dev, \"dma setup error %d, use pio\\n\", ret);"
    },
    {
        "line": 122,
        "fullcodeline": "dev_err(&pdev->dev, \"spi_register_controller error.\\n\");"
    },
    {
        "line": 18,
        "fullcodeline": "controller = spi_alloc_master(&pdev->dev,"
    },
    {
        "line": 22,
        "fullcodeline": "return -ENOMEM;"
    },
    {
        "line": 31,
        "fullcodeline": "for (i = 0; i < controller->num_chipselect; i++) {"
    },
    {
        "line": 32,
        "fullcodeline": "int cs_gpio = of_get_named_gpio(np, \"cs-gpios\", i);"
    },
    {
        "line": 37,
        "fullcodeline": "fsl_lpspi->chipselect[i] = cs_gpio;"
    },
    {
        "line": 41,
        "fullcodeline": "ret = devm_gpio_request(&pdev->dev,"
    },
    {
        "line": 34,
        "fullcodeline": "if (!gpio_is_valid(cs_gpio) && lpspi_platform_info)"
    },
    {
        "line": 38,
        "fullcodeline": "if (!gpio_is_valid(cs_gpio))"
    },
    {
        "line": 45,
        "fullcodeline": "dev_err(&pdev->dev, \"can't get cs gpios\\n\");"
    }
]