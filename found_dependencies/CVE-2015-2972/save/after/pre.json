[
    {
        "line": 2,
        "fullcodeline": "Log.add_info(request, params.inspect)"
    },
    {
        "line": 6,
        "fullcodeline": "date = Date.parse(params[:date])"
    },
    {
        "line": 151,
        "fullcodeline": "params[:date] = nearest_day.strftime(Schedule::SYS_DATE_FORM)"
    },
    {
        "line": 4,
        "fullcodeline": "return unless request.post?"
    },
    {
        "line": 166,
        "fullcodeline": "Log.add_error(request, evar)"
    },
    {
        "line": 168,
        "fullcodeline": "date = Date.parse(params[:date])"
    },
    {
        "line": 31,
        "fullcodeline": "if params[:users].blank? \\"
    },
    {
        "line": 34,
        "fullcodeline": "and (params[:schedule][:scope] != Schedule::SCOPE_ALL)"
    },
    {
        "line": 36,
        "fullcodeline": "nearest_day = schedule.get_nearest_day(date)"
    },
    {
        "line": 48,
        "fullcodeline": "equipment_ids = (params[:equipment] || [])"
    },
    {
        "line": 49,
        "fullcodeline": "equipment_ids.delete('')"
    },
    {
        "line": 94,
        "fullcodeline": "check_schedule = Schedule.new(params.require(:schedule).permit(Schedule::PERMIT_BASE))"
    },
    {
        "line": 95,
        "fullcodeline": "nearest_day = check_schedule.get_nearest_day(date)"
    },
    {
        "line": 157,
        "fullcodeline": "prms = ApplicationHelper.get_fwd_params(params)"
    },
    {
        "line": 158,
        "fullcodeline": "prms.delete('id')"
    },
    {
        "line": 159,
        "fullcodeline": "prms.delete('schedule')"
    },
    {
        "line": 160,
        "fullcodeline": "prms[:controller] = params[:fwd_controller]"
    },
    {
        "line": 161,
        "fullcodeline": "prms[:action] = params[:fwd_action]"
    },
    {
        "line": 162,
        "fullcodeline": "redirect_to(prms)"
    },
    {
        "line": 169,
        "fullcodeline": "redirect_to(:action => 'day', :date => date.strftime(Schedule::SYS_DATE_FORM))"
    },
    {
        "line": 39,
        "fullcodeline": "[:users, :groups, :teams, :items].each do |attr|"
    },
    {
        "line": 69,
        "fullcodeline": "if params[:is_repeat] == '1'"
    },
    {
        "line": 92,
        "fullcodeline": "params[:schedule][:end] = SchedulesHelper.regularize(params[:schedule][:end])"
    },
    {
        "line": 114,
        "fullcodeline": "if schedule.nil? or params[:repeat_update_target] == 'each'"
    },
    {
        "line": 128,
        "fullcodeline": "if params[:repeat_update_target] == 'each'"
    },
    {
        "line": 146,
        "fullcodeline": "flash[:notice] = t('msg.register_success')"
    },
    {
        "line": 148,
        "fullcodeline": "flash[:notice] = t('msg.update_success')"
    },
    {
        "line": 155,
        "fullcodeline": "self.show unless self.performed?"
    },
    {
        "line": 10,
        "fullcodeline": "schedule = Schedule.find(params[:id])"
    },
    {
        "line": 18,
        "fullcodeline": "unless schedule.check_user_auth(@login_user, 'w', true)"
    },
    {
        "line": 20,
        "fullcodeline": "Log.add_check(request, '[Schedule.check_user_auth]'+request.to_s)"
    },
    {
        "line": 54,
        "fullcodeline": "equipment_ids.each do |equipment_id|"
    },
    {
        "line": 130,
        "fullcodeline": "org_schedule = Schedule.find(params[:id])"
    },
    {
        "line": 131,
        "fullcodeline": "attrs = ActionController::Parameters.new()"
    },
    {
        "line": 132,
        "fullcodeline": "attrs[:updated_by] = @login_user.id"
    },
    {
        "line": 133,
        "fullcodeline": "attrs[:updated_at] = Time.now"
    },
    {
        "line": 134,
        "fullcodeline": "excepts = org_schedule.get_excepts_a"
    },
    {
        "line": 135,
        "fullcodeline": "excepts << params[:date]"
    },
    {
        "line": 138,
        "fullcodeline": "attrs[:except] = '|' + excepts.join('|') + '|'"
    },
    {
        "line": 12,
        "fullcodeline": "Log.add_error(request, evar)"
    },
    {
        "line": 125,
        "fullcodeline": "schedule.update_attributes(params.require(:schedule).permit(Schedule::PERMIT_BASE))"
    },
    {
        "line": 139,
        "fullcodeline": "org_schedule.update_attributes(attrs.permit(Schedule::PERMIT_BASE))"
    },
    {
        "line": 14,
        "fullcodeline": "redirect_to(:action => 'day', :date => date.strftime(Schedule::SYS_DATE_FORM))"
    },
    {
        "line": 80,
        "fullcodeline": "excepts = params[:excepts]"
    },
    {
        "line": 97,
        "fullcodeline": "check_schedule.id = params[:id].to_i unless params[:id].nil? or params[:id].empty?"
    },
    {
        "line": 98,
        "fullcodeline": "flash[:notice] = 'ERROR:' + t('schedule.no_day_in_rule')"
    },
    {
        "line": 102,
        "fullcodeline": "prms = ApplicationHelper.get_fwd_params(params)"
    },
    {
        "line": 103,
        "fullcodeline": "prms.delete('id')"
    },
    {
        "line": 104,
        "fullcodeline": "prms.delete('schedule')"
    },
    {
        "line": 105,
        "fullcodeline": "prms[:controller] = params[:fwd_controller]"
    },
    {
        "line": 106,
        "fullcodeline": "prms[:action] = params[:fwd_action]"
    },
    {
        "line": 118,
        "fullcodeline": "schedule = Schedule.new(params.require(:schedule).permit(Schedule::PERMIT_BASE))"
    },
    {
        "line": 13,
        "fullcodeline": "flash[:notice] = 'ERROR:' + t('msg.already_deleted', :name => Schedule.model_name.human)"
    },
    {
        "line": 66,
        "fullcodeline": "params[:schedule][:equipment] = '|' + equipment_ids.join('|') + '|'"
    },
    {
        "line": 74,
        "fullcodeline": "params[:schedule][:repeat_rule] = '|' + params[:repeat_rules].join('|') + '|'"
    },
    {
        "line": 83,
        "fullcodeline": "params[:schedule][:except] = '|' + excepts.join('|') + '|'"
    }
]