[
    {
        "line": 2,
        "fullcodeline": "Log.add_info(request, params.inspect)"
    },
    {
        "line": 6,
        "fullcodeline": "start_t = Time.local(2000, 1, 1, params[:start_hour].to_i, params[:start_min].to_i)"
    },
    {
        "line": 7,
        "fullcodeline": "end_t = Time.local(2000, 1, 1, params[:end_hour].to_i, params[:end_min].to_i)"
    },
    {
        "line": 21,
        "fullcodeline": "yaml = ApplicationHelper.get_config_yaml"
    },
    {
        "line": 24,
        "fullcodeline": "spans = yaml[:timecard]['default_breaks']"
    },
    {
        "line": 27,
        "fullcodeline": "found = false"
    },
    {
        "line": 28,
        "fullcodeline": "spans.each do |span|"
    },
    {
        "line": 52,
        "fullcodeline": "@yaml_timecard = yaml[:timecard]"
    },
    {
        "line": 4,
        "fullcodeline": "return unless request.post?"
    },
    {
        "line": 9,
        "fullcodeline": "if start_t == end_t"
    },
    {
        "line": 55,
        "fullcodeline": "render(:partial => 'ajax_config_break', :layout => false)"
    },
    {
        "line": 23,
        "fullcodeline": "yaml[:timecard] = Hash.new if yaml[:timecard].nil?"
    },
    {
        "line": 25,
        "fullcodeline": "spans = [] if spans.nil?"
    },
    {
        "line": 37,
        "fullcodeline": "spans << [start_t, end_t]"
    },
    {
        "line": 41,
        "fullcodeline": "spans = Timecard.sort_breaks(spans)"
    },
    {
        "line": 43,
        "fullcodeline": "yaml[:timecard]['default_breaks'] = spans"
    },
    {
        "line": 45,
        "fullcodeline": "ApplicationHelper.save_config_yaml(yaml)"
    },
    {
        "line": 53,
        "fullcodeline": "@yaml_timecard = Hash.new if @yaml_timecard.nil?"
    },
    {
        "line": 48,
        "fullcodeline": "yaml = ApplicationHelper.get_config_yaml"
    },
    {
        "line": 10,
        "fullcodeline": "flash[:notice] = 'ERROR:' + t('timecard.break_without_span')"
    },
    {
        "line": 18,
        "fullcodeline": "org_start = UtilDateTime.parse(params[:org_start]).to_time"
    },
    {
        "line": 49,
        "fullcodeline": "flash[:notice] = 'ERROR:' + t('timecard.break_overlap')"
    }
]