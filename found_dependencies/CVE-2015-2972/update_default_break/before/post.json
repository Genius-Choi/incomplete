[
    {
        "line": 2,
        "fullcodeline": "Log.add_info(request, params.inspect)"
    },
    {
        "line": 4,
        "fullcodeline": "start_t = Time.local(2000, 1, 1, params[:start_hour].to_i, params[:start_min].to_i)"
    },
    {
        "line": 5,
        "fullcodeline": "end_t = Time.local(2000, 1, 1, params[:end_hour].to_i, params[:end_min].to_i)"
    },
    {
        "line": 25,
        "fullcodeline": "found = false"
    },
    {
        "line": 26,
        "fullcodeline": "spans.each do |span|"
    },
    {
        "line": 50,
        "fullcodeline": "@yaml_timecard = yaml[:timecard]"
    },
    {
        "line": 7,
        "fullcodeline": "if start_t == end_t"
    },
    {
        "line": 34,
        "fullcodeline": "unless found"
    },
    {
        "line": 53,
        "fullcodeline": "render(:partial => 'ajax_config_break', :layout => false)"
    },
    {
        "line": 8,
        "fullcodeline": "flash[:notice] = 'ERROR:' + t('timecard.break_without_span')"
    },
    {
        "line": 9,
        "fullcodeline": "render(:partial => 'ajax_config_break', :layout => false)"
    },
    {
        "line": 14,
        "fullcodeline": "org_start = nil"
    },
    {
        "line": 21,
        "fullcodeline": "yaml[:timecard] = Hash.new if yaml[:timecard].nil?"
    },
    {
        "line": 23,
        "fullcodeline": "spans = [] if spans.nil?"
    },
    {
        "line": 35,
        "fullcodeline": "spans << [start_t, end_t]"
    },
    {
        "line": 39,
        "fullcodeline": "spans = Timecard.sort_breaks(spans)"
    },
    {
        "line": 41,
        "fullcodeline": "yaml[:timecard]['default_breaks'] = spans"
    },
    {
        "line": 43,
        "fullcodeline": "ApplicationHelper.save_config_yaml(yaml)"
    },
    {
        "line": 51,
        "fullcodeline": "@yaml_timecard = Hash.new if @yaml_timecard.nil?"
    },
    {
        "line": 47,
        "fullcodeline": "flash[:notice] = 'ERROR:' + t('timecard.break_overlap')"
    },
    {
        "line": 16,
        "fullcodeline": "org_start = UtilDateTime.parse(params[:org_start]).to_time"
    }
]