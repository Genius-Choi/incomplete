[
    {
        "line": 11,
        "fullcodeline": "BSON_ASSERT (iter);"
    },
    {
        "line": 13,
        "fullcodeline": "*unsupported = false;"
    },
    {
        "line": 21,
        "fullcodeline": "data = iter->raw;"
    },
    {
        "line": 22,
        "fullcodeline": "len = iter->len;"
    },
    {
        "line": 24,
        "fullcodeline": "iter->off = iter->next_off;"
    },
    {
        "line": 25,
        "fullcodeline": "iter->type = iter->off;"
    },
    {
        "line": 26,
        "fullcodeline": "iter->key = iter->off + 1;"
    },
    {
        "line": 28,
        "fullcodeline": "iter->d2 = 0;"
    },
    {
        "line": 29,
        "fullcodeline": "iter->d3 = 0;"
    },
    {
        "line": 30,
        "fullcodeline": "iter->d4 = 0;"
    },
    {
        "line": 15,
        "fullcodeline": "if (!iter->raw) {"
    },
    {
        "line": 32,
        "fullcodeline": "if (next_keylen == 0) {"
    },
    {
        "line": 50,
        "fullcodeline": "*key = bson_iter_key_unsafe (iter);"
    },
    {
        "line": 51,
        "fullcodeline": "*bson_type = ITER_TYPE (iter);"
    },
    {
        "line": 16,
        "fullcodeline": "*key = NULL;"
    },
    {
        "line": 17,
        "fullcodeline": "*bson_type = BSON_TYPE_EOD;"
    },
    {
        "line": 58,
        "fullcodeline": "iter->next_off = o + 8;"
    },
    {
        "line": 158,
        "fullcodeline": "iter->next_off = o + 12;"
    },
    {
        "line": 284,
        "fullcodeline": "iter->next_off = o + 4;"
    },
    {
        "line": 287,
        "fullcodeline": "iter->next_off = o + 16;"
    },
    {
        "line": 293,
        "fullcodeline": "iter->next_off = o;"
    },
    {
        "line": 34,
        "fullcodeline": "for (o = iter->key; o < len; o++) {"
    },
    {
        "line": 41,
        "fullcodeline": "o = iter->key + next_keylen + 1;"
    },
    {
        "line": 42,
        "fullcodeline": "iter->d1 = o;"
    },
    {
        "line": 70,
        "fullcodeline": "iter->d2 = o + 4;"
    },
    {
        "line": 71,
        "fullcodeline": "memcpy (&l, iter->raw + iter->d1, sizeof (l));"
    },
    {
        "line": 72,
        "fullcodeline": "l = BSON_UINT32_FROM_LE (l);"
    },
    {
        "line": 79,
        "fullcodeline": "iter->next_off = o + 4 + l;"
    },
    {
        "line": 106,
        "fullcodeline": "iter->d2 = o + 4;"
    },
    {
        "line": 107,
        "fullcodeline": "iter->d3 = o + 5;"
    },
    {
        "line": 109,
        "fullcodeline": "memcpy (&l, iter->raw + iter->d1, sizeof (l));"
    },
    {
        "line": 110,
        "fullcodeline": "l = BSON_UINT32_FROM_LE (l);"
    },
    {
        "line": 117,
        "fullcodeline": "subtype = *(iter->raw + iter->d2);"
    },
    {
        "line": 136,
        "fullcodeline": "iter->next_off = o + 5 + l;"
    },
    {
        "line": 147,
        "fullcodeline": "memcpy (&l, iter->raw + iter->d1, sizeof (l));"
    },
    {
        "line": 148,
        "fullcodeline": "l = BSON_UINT32_FROM_LE (l);"
    },
    {
        "line": 155,
        "fullcodeline": "iter->next_off = o + l;"
    },
    {
        "line": 168,
        "fullcodeline": "memcpy (&val, iter->raw + iter->d1, 1);"
    },
    {
        "line": 174,
        "fullcodeline": "iter->next_off = o + 1;"
    },
    {
        "line": 177,
        "fullcodeline": "bool eor = false;"
    },
    {
        "line": 178,
        "fullcodeline": "bool eoo = false;"
    },
    {
        "line": 205,
        "fullcodeline": "iter->next_off = o + 1;"
    },
    {
        "line": 216,
        "fullcodeline": "memcpy (&l, iter->raw + iter->d1, sizeof (l));"
    },
    {
        "line": 217,
        "fullcodeline": "l = BSON_UINT32_FROM_LE (l);"
    },
    {
        "line": 232,
        "fullcodeline": "iter->next_off = o + 4 + l + 12;"
    },
    {
        "line": 243,
        "fullcodeline": "iter->d2 = o + 4;"
    },
    {
        "line": 246,
        "fullcodeline": "memcpy (&l, iter->raw + iter->d1, sizeof (l));"
    },
    {
        "line": 247,
        "fullcodeline": "l = BSON_UINT32_FROM_LE (l);"
    },
    {
        "line": 254,
        "fullcodeline": "iter->next_off = o + l;"
    },
    {
        "line": 261,
        "fullcodeline": "memcpy (&l, iter->raw + iter->d2, sizeof (l));"
    },
    {
        "line": 262,
        "fullcodeline": "l = BSON_UINT32_FROM_LE (l);"
    },
    {
        "line": 274,
        "fullcodeline": "iter->d4 = o + 4 + 4 + l;"
    },
    {
        "line": 275,
        "fullcodeline": "memcpy (&doclen, iter->raw + iter->d4, sizeof (doclen));"
    },
    {
        "line": 276,
        "fullcodeline": "doclen = BSON_UINT32_FROM_LE (doclen);"
    },
    {
        "line": 65,
        "fullcodeline": "if ((o + 4) >= len) {"
    },
    {
        "line": 74,
        "fullcodeline": "if (l > (len - (o + 4))) {"
    },
    {
        "line": 101,
        "fullcodeline": "if (o >= (len - 4)) {"
    },
    {
        "line": 112,
        "fullcodeline": "if (l >= (len - o - 4)) {"
    },
    {
        "line": 119,
        "fullcodeline": "if (subtype == BSON_SUBTYPE_BINARY_DEPRECATED) {"
    },
    {
        "line": 142,
        "fullcodeline": "if (o >= (len - 4)) {"
    },
    {
        "line": 163,
        "fullcodeline": "if (iter->d1 >= len) {"
    },
    {
        "line": 180,
        "fullcodeline": "for (; o < len; o++) {"
    },
    {
        "line": 193,
        "fullcodeline": "for (; o < len; o++) {"
    },
    {
        "line": 210,
        "fullcodeline": "if (o >= (len - 4)) {"
    },
    {
        "line": 256,
        "fullcodeline": "if (iter->next_off >= len) {"
    },
    {
        "line": 269,
        "fullcodeline": "if ((o + 4 + 4 + l + 4) >= iter->next_off) {"
    },
    {
        "line": 278,
        "fullcodeline": "if ((o + 4 + 4 + l + doclen) != iter->next_off) {"
    },
    {
        "line": 35,
        "fullcodeline": "if (!data[o]) {"
    },
    {
        "line": 84,
        "fullcodeline": "if (BSON_UNLIKELY ((l == 0) || (iter->next_off >= len))) {"
    },
    {
        "line": 92,
        "fullcodeline": "if (BSON_UNLIKELY ((iter->raw + iter->d2)[l - 1] != '\\0')) {"
    },
    {
        "line": 128,
        "fullcodeline": "memcpy (&binary_len, (iter->raw + iter->d3), sizeof (binary_len));"
    },
    {
        "line": 129,
        "fullcodeline": "binary_len = BSON_UINT32_FROM_LE (binary_len);"
    },
    {
        "line": 150,
        "fullcodeline": "if ((l > len) || (l > (len - o))) {"
    },
    {
        "line": 169,
        "fullcodeline": "if (val != 0x00 && val != 0x01) {"
    },
    {
        "line": 220,
        "fullcodeline": "if (l == 0 || l > (len - o - 4)) {"
    },
    {
        "line": 238,
        "fullcodeline": "if ((len < 19) || (o >= (len - 14))) {"
    },
    {
        "line": 249,
        "fullcodeline": "if ((l < 14) || (l >= (len - o))) {"
    },
    {
        "line": 264,
        "fullcodeline": "if (l == 0 || l >= (len - o - 4 - 4)) {"
    },
    {
        "line": 36,
        "fullcodeline": "iter->d1 = ++o;"
    },
    {
        "line": 93,
        "fullcodeline": "iter->err_off = o + 4 + l - 1;"
    },
    {
        "line": 122,
        "fullcodeline": "if (l < 4) {"
    },
    {
        "line": 130,
        "fullcodeline": "if (binary_len + 4 != l) {"
    },
    {
        "line": 181,
        "fullcodeline": "if (!data[o]) {"
    },
    {
        "line": 183,
        "fullcodeline": "eor = true;"
    },
    {
        "line": 195,
        "fullcodeline": "eoo = true;"
    },
    {
        "line": 182,
        "fullcodeline": "iter->d2 = ++o;"
    }
]