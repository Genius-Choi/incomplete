[
    {
        "line": 7,
        "fullcodeline": "struct inet_sock *inet = inet_sk(sk);"
    },
    {
        "line": 8,
        "fullcodeline": "struct ipv6_pinfo *np = inet6_sk(sk);"
    },
    {
        "line": 10,
        "fullcodeline": "struct sk_buff *skb, *skb_prev = NULL;"
    },
    {
        "line": 17,
        "fullcodeline": "int offset = 0;"
    },
    {
        "line": 18,
        "fullcodeline": "__u8 tx_flags = 0;"
    },
    {
        "line": 94,
        "fullcodeline": "hh_len = LL_RESERVED_SPACE(rt->dst.dev);"
    },
    {
        "line": 96,
        "fullcodeline": "fragheaderlen = sizeof(struct ipv6hdr) + rt->rt6i_nfheader_len +"
    },
    {
        "line": 98,
        "fullcodeline": "maxfraglen = ((mtu - fragheaderlen) & ~7) + fragheaderlen - sizeof(struct frag_hdr);"
    },
    {
        "line": 127,
        "fullcodeline": "cork->length += length;"
    },
    {
        "line": 339,
        "fullcodeline": "err = -EFAULT;"
    },
    {
        "line": 341,
        "fullcodeline": "cork->length -= length;"
    },
    {
        "line": 342,
        "fullcodeline": "IP6_INC_STATS(sock_net(sk), rt->rt6i_idev, IPSTATS_MIB_OUTDISCARDS);"
    },
    {
        "line": 20,
        "fullcodeline": "if (flags&MSG_PROBE)"
    },
    {
        "line": 23,
        "fullcodeline": "if (skb_queue_empty(&sk->sk_write_queue)) {"
    },
    {
        "line": 100,
        "fullcodeline": "if (mtu <= sizeof(struct ipv6hdr) + IPV6_MAXPLEN) {"
    },
    {
        "line": 108,
        "fullcodeline": "if (sk->sk_type == SOCK_DGRAM)"
    },
    {
        "line": 128,
        "fullcodeline": "if (length > mtu) {"
    },
    {
        "line": 147,
        "fullcodeline": "if ((skb = skb_peek_tail(&sk->sk_write_queue)) == NULL)"
    },
    {
        "line": 150,
        "fullcodeline": "while (length > 0) {"
    },
    {
        "line": 61,
        "fullcodeline": "dst_hold(&rt->dst);"
    },
    {
        "line": 62,
        "fullcodeline": "cork->dst = &rt->dst;"
    },
    {
        "line": 64,
        "fullcodeline": "np->cork.hop_limit = hlimit;"
    },
    {
        "line": 65,
        "fullcodeline": "np->cork.tclass = tclass;"
    },
    {
        "line": 76,
        "fullcodeline": "cork->fragsize = mtu;"
    },
    {
        "line": 79,
        "fullcodeline": "cork->length = 0;"
    },
    {
        "line": 80,
        "fullcodeline": "exthdrlen = (opt ? opt->opt_flen : 0);"
    },
    {
        "line": 81,
        "fullcodeline": "length += exthdrlen;"
    },
    {
        "line": 82,
        "fullcodeline": "transhdrlen += exthdrlen;"
    },
    {
        "line": 83,
        "fullcodeline": "dst_exthdrlen = rt->dst.header_len - rt->rt6i_nfheader_len;"
    },
    {
        "line": 97,
        "fullcodeline": "(opt ? opt->opt_nflen : 0);"
    },
    {
        "line": 109,
        "fullcodeline": "sock_tx_timestamp(sk, &tx_flags);"
    },
    {
        "line": 129,
        "fullcodeline": "int proto = sk->sk_protocol;"
    },
    {
        "line": 152,
        "fullcodeline": "copy = (cork->length <= mtu && !(cork->flags & IPCORK_ALLFRAG) ? mtu : maxfraglen) - skb->len;"
    },
    {
        "line": 332,
        "fullcodeline": "offset += copy;"
    },
    {
        "line": 333,
        "fullcodeline": "length -= copy;"
    },
    {
        "line": 66,
        "fullcodeline": "if (rt->dst.flags & DST_XFRM_TUNNEL)"
    },
    {
        "line": 72,
        "fullcodeline": "if (np->frag_size < mtu) {"
    },
    {
        "line": 77,
        "fullcodeline": "if (dst_allfrag(rt->dst.path))"
    },
    {
        "line": 85,
        "fullcodeline": "rt = (struct rt6_info *)cork->dst;"
    },
    {
        "line": 88,
        "fullcodeline": "transhdrlen = 0;"
    },
    {
        "line": 89,
        "fullcodeline": "exthdrlen = 0;"
    },
    {
        "line": 90,
        "fullcodeline": "dst_exthdrlen = 0;"
    },
    {
        "line": 91,
        "fullcodeline": "mtu = cork->fragsize;"
    },
    {
        "line": 101,
        "fullcodeline": "if (cork->length + length > sizeof(struct ipv6hdr) + IPV6_MAXPLEN - fragheaderlen) {"
    },
    {
        "line": 130,
        "fullcodeline": "if (dontfrag && (proto == IPPROTO_UDP || proto == IPPROTO_RAW)){"
    },
    {
        "line": 135,
        "fullcodeline": "if (proto == IPPROTO_UDP &&"
    },
    {
        "line": 153,
        "fullcodeline": "if (copy < length)"
    },
    {
        "line": 156,
        "fullcodeline": "if (copy <= 0) {"
    },
    {
        "line": 287,
        "fullcodeline": "if (copy > length)"
    },
    {
        "line": 290,
        "fullcodeline": "if (!(rt->dst.dev->features&NETIF_F_SG)) {"
    },
    {
        "line": 31,
        "fullcodeline": "np->cork.opt = kzalloc(opt->tot_len, sk->sk_allocation);"
    },
    {
        "line": 35,
        "fullcodeline": "np->cork.opt->tot_len = opt->tot_len;"
    },
    {
        "line": 36,
        "fullcodeline": "np->cork.opt->opt_flen = opt->opt_flen;"
    },
    {
        "line": 37,
        "fullcodeline": "np->cork.opt->opt_nflen = opt->opt_nflen;"
    },
    {
        "line": 39,
        "fullcodeline": "np->cork.opt->dst0opt = ip6_opt_dup(opt->dst0opt,"
    },
    {
        "line": 44,
        "fullcodeline": "np->cork.opt->dst1opt = ip6_opt_dup(opt->dst1opt,"
    },
    {
        "line": 49,
        "fullcodeline": "np->cork.opt->hopopt = ip6_opt_dup(opt->hopopt,"
    },
    {
        "line": 54,
        "fullcodeline": "np->cork.opt->srcrt = ip6_rthdr_dup(opt->srcrt,"
    },
    {
        "line": 67,
        "fullcodeline": "mtu = np->pmtudisc == IPV6_PMTUDISC_PROBE ?"
    },
    {
        "line": 78,
        "fullcodeline": "cork->flags |= IPCORK_ALLFRAG;"
    },
    {
        "line": 102,
        "fullcodeline": "ipv6_local_error(sk, EMSGSIZE, fl6, mtu-exthdrlen);"
    },
    {
        "line": 131,
        "fullcodeline": "ipv6_local_rxpmtu(sk, fl6, mtu-exthdrlen);"
    },
    {
        "line": 136,
        "fullcodeline": "(rt->dst.dev->features & NETIF_F_UFO)) {"
    },
    {
        "line": 138,
        "fullcodeline": "err = ip6_ufo_append_data(sk, getfrag, from, length,"
    },
    {
        "line": 154,
        "fullcodeline": "copy = maxfraglen - skb->len;"
    },
    {
        "line": 175,
        "fullcodeline": "skb_prev = skb;"
    },
    {
        "line": 181,
        "fullcodeline": "datalen = length + fraggap;"
    },
    {
        "line": 191,
        "fullcodeline": "alloclen += dst_exthdrlen;"
    },
    {
        "line": 201,
        "fullcodeline": "alloclen += rt->dst.trailer_len;"
    },
    {
        "line": 202,
        "fullcodeline": "fraglen = datalen + fragheaderlen;"
    },
    {
        "line": 209,
        "fullcodeline": "alloclen += sizeof(struct frag_hdr);"
    },
    {
        "line": 236,
        "fullcodeline": "skb->ip_summed = CHECKSUM_NONE;"
    },
    {
        "line": 237,
        "fullcodeline": "skb->csum = 0;"
    },
    {
        "line": 239,
        "fullcodeline": "skb_reserve(skb, hh_len + sizeof(struct frag_hdr) +"
    },
    {
        "line": 248,
        "fullcodeline": "data = skb_put(skb, fraglen);"
    },
    {
        "line": 249,
        "fullcodeline": "skb_set_network_header(skb, exthdrlen);"
    },
    {
        "line": 250,
        "fullcodeline": "data += fragheaderlen;"
    },
    {
        "line": 251,
        "fullcodeline": "skb->transport_header = (skb->network_header +"
    },
    {
        "line": 262,
        "fullcodeline": "copy = datalen - transhdrlen - fraggap;"
    },
    {
        "line": 274,
        "fullcodeline": "offset += copy;"
    },
    {
        "line": 275,
        "fullcodeline": "length -= datalen - fraggap;"
    },
    {
        "line": 276,
        "fullcodeline": "transhdrlen = 0;"
    },
    {
        "line": 277,
        "fullcodeline": "exthdrlen = 0;"
    },
    {
        "line": 278,
        "fullcodeline": "dst_exthdrlen = 0;"
    },
    {
        "line": 283,
        "fullcodeline": "__skb_queue_tail(&sk->sk_write_queue, skb);"
    },
    {
        "line": 288,
        "fullcodeline": "copy = length;"
    },
    {
        "line": 293,
        "fullcodeline": "off = skb->len;"
    },
    {
        "line": 32,
        "fullcodeline": "if (unlikely(np->cork.opt == NULL))"
    },
    {
        "line": 41,
        "fullcodeline": "if (opt->dst0opt && !np->cork.opt->dst0opt)"
    },
    {
        "line": 46,
        "fullcodeline": "if (opt->dst1opt && !np->cork.opt->dst1opt)"
    },
    {
        "line": 51,
        "fullcodeline": "if (opt->hopopt && !np->cork.opt->hopopt)"
    },
    {
        "line": 56,
        "fullcodeline": "if (opt->srcrt && !np->cork.opt->srcrt)"
    },
    {
        "line": 70,
        "fullcodeline": "mtu = np->pmtudisc == IPV6_PMTUDISC_PROBE ?"
    },
    {
        "line": 103,
        "fullcodeline": "return -EMSGSIZE;"
    },
    {
        "line": 132,
        "fullcodeline": "return -EMSGSIZE;"
    },
    {
        "line": 169,
        "fullcodeline": "if (skb == NULL || skb_prev == NULL)"
    },
    {
        "line": 183,
        "fullcodeline": "if (datalen > (cork->length <= mtu && !(cork->flags & IPCORK_ALLFRAG) ? mtu : maxfraglen) - fragheaderlen)"
    },
    {
        "line": 185,
        "fullcodeline": "if ((flags & MSG_MORE) &&"
    },
    {
        "line": 193,
        "fullcodeline": "if (datalen != length + fraggap) {"
    },
    {
        "line": 231,
        "fullcodeline": "if (skb == NULL)"
    },
    {
        "line": 242,
        "fullcodeline": "if (sk->sk_type == SOCK_DGRAM)"
    },
    {
        "line": 264,
        "fullcodeline": "if (copy < 0) {"
    },
    {
        "line": 294,
        "fullcodeline": "if (getfrag(from, skb_put(skb, copy),"
    },
    {
        "line": 301,
        "fullcodeline": "int i = skb_shinfo(skb)->nr_frags;"
    },
    {
        "line": 302,
        "fullcodeline": "struct page_frag *pfrag = sk_page_frag(sk);"
    },
    {
        "line": 304,
        "fullcodeline": "err = -ENOMEM;"
    },
    {
        "line": 325,
        "fullcodeline": "pfrag->offset += copy;"
    },
    {
        "line": 326,
        "fullcodeline": "skb_frag_size_add(&skb_shinfo(skb)->frags[i - 1], copy);"
    },
    {
        "line": 327,
        "fullcodeline": "skb->len += copy;"
    },
    {
        "line": 328,
        "fullcodeline": "skb->data_len += copy;"
    },
    {
        "line": 329,
        "fullcodeline": "skb->truesize += copy;"
    },
    {
        "line": 330,
        "fullcodeline": "atomic_add(copy, &sk->sk_wmem_alloc);"
    },
    {
        "line": 68,
        "fullcodeline": "rt->dst.dev->mtu : dst_mtu(&rt->dst);"
    },
    {
        "line": 74,
        "fullcodeline": "mtu = np->frag_size;"
    },
    {
        "line": 165,
        "fullcodeline": "fraggap = skb->len - maxfraglen;"
    },
    {
        "line": 170,
        "fullcodeline": "ip6_append_data_mtu(&mtu, &maxfraglen,"
    },
    {
        "line": 184,
        "fullcodeline": "datalen = maxfraglen - fragheaderlen - rt->dst.trailer_len;"
    },
    {
        "line": 186,
        "fullcodeline": "!(rt->dst.dev->features&NETIF_F_SG))"
    },
    {
        "line": 187,
        "fullcodeline": "alloclen = mtu;"
    },
    {
        "line": 198,
        "fullcodeline": "datalen += rt->dst.trailer_len;"
    },
    {
        "line": 212,
        "fullcodeline": "skb = sock_alloc_send_skb(sk,"
    },
    {
        "line": 243,
        "fullcodeline": "skb_shinfo(skb)->tx_flags = tx_flags;"
    },
    {
        "line": 254,
        "fullcodeline": "skb->csum = skb_copy_and_csum_bits("
    },
    {
        "line": 257,
        "fullcodeline": "skb_prev->csum = csum_sub(skb_prev->csum,"
    },
    {
        "line": 259,
        "fullcodeline": "data += fraggap;"
    },
    {
        "line": 260,
        "fullcodeline": "pskb_trim_unique(skb_prev, maxfraglen);"
    },
    {
        "line": 265,
        "fullcodeline": "err = -EINVAL;"
    },
    {
        "line": 266,
        "fullcodeline": "kfree_skb(skb);"
    },
    {
        "line": 296,
        "fullcodeline": "__skb_trim(skb, off);"
    },
    {
        "line": 297,
        "fullcodeline": "err = -EFAULT;"
    },
    {
        "line": 305,
        "fullcodeline": "if (!sk_page_frag_refill(sk, pfrag))"
    },
    {
        "line": 308,
        "fullcodeline": "if (!skb_can_coalesce(skb, i, pfrag->page,"
    },
    {
        "line": 320,
        "fullcodeline": "if (getfrag(from,"
    },
    {
        "line": 29,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 33,
        "fullcodeline": "return -ENOBUFS;"
    },
    {
        "line": 42,
        "fullcodeline": "return -ENOBUFS;"
    },
    {
        "line": 47,
        "fullcodeline": "return -ENOBUFS;"
    },
    {
        "line": 52,
        "fullcodeline": "return -ENOBUFS;"
    },
    {
        "line": 57,
        "fullcodeline": "return -ENOBUFS;"
    },
    {
        "line": 167,
        "fullcodeline": "fraggap = 0;"
    },
    {
        "line": 172,
        "fullcodeline": "np->pmtudisc =="
    },
    {
        "line": 189,
        "fullcodeline": "alloclen = datalen + fragheaderlen;"
    },
    {
        "line": 216,
        "fullcodeline": "skb = NULL;"
    },
    {
        "line": 310,
        "fullcodeline": "err = -EMSGSIZE;"
    },
    {
        "line": 314,
        "fullcodeline": "__skb_fill_page_desc(skb, i, pfrag->page,"
    },
    {
        "line": 316,
        "fullcodeline": "skb_shinfo(skb)->nr_frags = ++i;"
    },
    {
        "line": 317,
        "fullcodeline": "get_page(pfrag->page);"
    },
    {
        "line": 213,
        "fullcodeline": "alloclen + hh_len,"
    },
    {
        "line": 214,
        "fullcodeline": "(flags & MSG_DONTWAIT), &err);"
    },
    {
        "line": 217,
        "fullcodeline": "if (atomic_read(&sk->sk_wmem_alloc) <="
    },
    {
        "line": 222,
        "fullcodeline": "if (unlikely(skb == NULL))"
    },
    {
        "line": 256,
        "fullcodeline": "data + transhdrlen, fraggap, 0);"
    },
    {
        "line": 268,
        "fullcodeline": "} else if (copy > 0 && getfrag(from, data + transhdrlen, offset, copy, fraggap, skb) < 0) {"
    },
    {
        "line": 311,
        "fullcodeline": "if (i == MAX_SKB_FRAGS)"
    },
    {
        "line": 321,
        "fullcodeline": "page_address(pfrag->page) + pfrag->offset,"
    },
    {
        "line": 218,
        "fullcodeline": "2 * sk->sk_sndbuf)"
    },
    {
        "line": 219,
        "fullcodeline": "skb = sock_wmalloc(sk,"
    },
    {
        "line": 223,
        "fullcodeline": "err = -ENOBUFS;"
    },
    {
        "line": 269,
        "fullcodeline": "err = -EFAULT;"
    },
    {
        "line": 270,
        "fullcodeline": "kfree_skb(skb);"
    },
    {
        "line": 228,
        "fullcodeline": "tx_flags = 0;"
    },
    {
        "line": 220,
        "fullcodeline": "alloclen + hh_len, 1,"
    }
]