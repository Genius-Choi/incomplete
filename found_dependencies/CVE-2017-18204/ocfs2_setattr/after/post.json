[
    {
        "line": 3,
        "fullcodeline": "int status = 0, size_change;"
    },
    {
        "line": 4,
        "fullcodeline": "int inode_locked = 0;"
    },
    {
        "line": 5,
        "fullcodeline": "struct inode *inode = d_inode(dentry);"
    },
    {
        "line": 6,
        "fullcodeline": "struct super_block *sb = inode->i_sb;"
    },
    {
        "line": 7,
        "fullcodeline": "struct ocfs2_super *osb = OCFS2_SB(sb);"
    },
    {
        "line": 8,
        "fullcodeline": "struct buffer_head *bh = NULL;"
    },
    {
        "line": 9,
        "fullcodeline": "handle_t *handle = NULL;"
    },
    {
        "line": 10,
        "fullcodeline": "struct dquot *transfer_to[MAXQUOTAS] = { };"
    },
    {
        "line": 15,
        "fullcodeline": "trace_ocfs2_setattr(inode, dentry,"
    },
    {
        "line": 31,
        "fullcodeline": "status = setattr_prepare(dentry, attr);"
    },
    {
        "line": 40,
        "fullcodeline": "size_change = S_ISREG(inode->i_mode) && attr->ia_valid & ATTR_SIZE;"
    },
    {
        "line": 56,
        "fullcodeline": "had_lock = ocfs2_inode_lock_tracker(inode, &bh, 1, &oh);"
    },
    {
        "line": 81,
        "fullcodeline": "inode_locked = 1;"
    },
    {
        "line": 150,
        "fullcodeline": "setattr_copy(inode, attr);"
    },
    {
        "line": 151,
        "fullcodeline": "mark_inode_dirty(inode);"
    },
    {
        "line": 153,
        "fullcodeline": "status = ocfs2_mark_inode_dirty(handle, inode, bh);"
    },
    {
        "line": 158,
        "fullcodeline": "ocfs2_commit_trans(osb, handle);"
    },
    {
        "line": 181,
        "fullcodeline": "brelse(bh);"
    },
    {
        "line": 19,
        "fullcodeline": "from_kuid(&init_user_ns, attr->ia_uid),"
    },
    {
        "line": 20,
        "fullcodeline": "from_kgid(&init_user_ns, attr->ia_gid));"
    },
    {
        "line": 23,
        "fullcodeline": "if (S_ISLNK(inode->i_mode))"
    },
    {
        "line": 28,
        "fullcodeline": "if (!(attr->ia_valid & OCFS2_VALID_ATTRS))"
    },
    {
        "line": 35,
        "fullcodeline": "if (is_quota_modification(inode, attr)) {"
    },
    {
        "line": 57,
        "fullcodeline": "if (had_lock < 0) {"
    },
    {
        "line": 106,
        "fullcodeline": "if ((attr->ia_valid & ATTR_UID && !uid_eq(attr->ia_uid, inode->i_uid)) ||"
    },
    {
        "line": 154,
        "fullcodeline": "if (status < 0)"
    },
    {
        "line": 160,
        "fullcodeline": "if (status && inode_locked) {"
    },
    {
        "line": 170,
        "fullcodeline": "for (qtype = 0; qtype < OCFS2_MAXQUOTAS; qtype++)"
    },
    {
        "line": 171,
        "fullcodeline": "dqput(transfer_to[qtype]);"
    },
    {
        "line": 173,
        "fullcodeline": "if (!status && attr->ia_valid & ATTR_MODE) {"
    },
    {
        "line": 24,
        "fullcodeline": "attr->ia_valid &= ~ATTR_SIZE;"
    },
    {
        "line": 36,
        "fullcodeline": "status = dquot_initialize(inode);"
    },
    {
        "line": 47,
        "fullcodeline": "inode_dio_wait(inode);"
    },
    {
        "line": 49,
        "fullcodeline": "status = ocfs2_rw_lock(inode, 1);"
    },
    {
        "line": 58,
        "fullcodeline": "status = had_lock;"
    },
    {
        "line": 84,
        "fullcodeline": "status = inode_newsize_ok(inode, attr->ia_size);"
    },
    {
        "line": 107,
        "fullcodeline": "(attr->ia_valid & ATTR_GID && !gid_eq(attr->ia_gid, inode->i_gid))) {"
    },
    {
        "line": 131,
        "fullcodeline": "handle = ocfs2_start_trans(osb, OCFS2_INODE_UPDATE_CREDITS +"
    },
    {
        "line": 138,
        "fullcodeline": "status = __dquot_transfer(inode, transfer_to);"
    },
    {
        "line": 155,
        "fullcodeline": "mlog_errno(status);"
    },
    {
        "line": 161,
        "fullcodeline": "ocfs2_inode_unlock_tracker(inode, 1, &oh, had_lock);"
    },
    {
        "line": 162,
        "fullcodeline": "inode_locked = 0;"
    },
    {
        "line": 166,
        "fullcodeline": "ocfs2_rw_unlock(inode, 1);"
    },
    {
        "line": 174,
        "fullcodeline": "status = ocfs2_acl_chmod(inode, bh);"
    },
    {
        "line": 179,
        "fullcodeline": "ocfs2_inode_unlock_tracker(inode, 1, &oh, had_lock);"
    },
    {
        "line": 16,
        "fullcodeline": "(unsigned long long)OCFS2_I(inode)->ip_blkno,"
    },
    {
        "line": 50,
        "fullcodeline": "if (status < 0) {"
    },
    {
        "line": 88,
        "fullcodeline": "if (i_size_read(inode) >= attr->ia_size) {"
    },
    {
        "line": 98,
        "fullcodeline": "if (status < 0) {"
    },
    {
        "line": 113,
        "fullcodeline": "if (attr->ia_valid & ATTR_UID && !uid_eq(attr->ia_uid, inode->i_uid)"
    },
    {
        "line": 122,
        "fullcodeline": "if (attr->ia_valid & ATTR_GID && !gid_eq(attr->ia_gid, inode->i_gid)"
    },
    {
        "line": 133,
        "fullcodeline": "if (IS_ERR(handle)) {"
    },
    {
        "line": 139,
        "fullcodeline": "if (status < 0)"
    },
    {
        "line": 142,
        "fullcodeline": "handle = ocfs2_start_trans(osb, OCFS2_INODE_UPDATE_CREDITS);"
    },
    {
        "line": 175,
        "fullcodeline": "if (status < 0)"
    },
    {
        "line": 51,
        "fullcodeline": "mlog_errno(status);"
    },
    {
        "line": 95,
        "fullcodeline": "status = ocfs2_truncate_file(inode, bh, attr->ia_size);"
    },
    {
        "line": 101,
        "fullcodeline": "status = -ENOSPC;"
    },
    {
        "line": 114,
        "fullcodeline": "&& OCFS2_HAS_RO_COMPAT_FEATURE(sb,"
    },
    {
        "line": 116,
        "fullcodeline": "transfer_to[USRQUOTA] = dqget(sb, make_kqid_uid(attr->ia_uid));"
    },
    {
        "line": 123,
        "fullcodeline": "&& OCFS2_HAS_RO_COMPAT_FEATURE(sb,"
    },
    {
        "line": 125,
        "fullcodeline": "transfer_to[GRPQUOTA] = dqget(sb, make_kqid_gid(attr->ia_gid));"
    },
    {
        "line": 134,
        "fullcodeline": "status = PTR_ERR(handle);"
    },
    {
        "line": 135,
        "fullcodeline": "mlog_errno(status);"
    },
    {
        "line": 143,
        "fullcodeline": "if (IS_ERR(handle)) {"
    },
    {
        "line": 176,
        "fullcodeline": "mlog_errno(status);"
    },
    {
        "line": 78,
        "fullcodeline": "mlog(ML_ERROR, \"Another case of recursive locking:\\n\");"
    },
    {
        "line": 79,
        "fullcodeline": "dump_stack();"
    },
    {
        "line": 89,
        "fullcodeline": "if (ocfs2_should_order_data(inode)) {"
    },
    {
        "line": 97,
        "fullcodeline": "status = ocfs2_extend_file(inode, bh, attr->ia_size);"
    },
    {
        "line": 99,
        "fullcodeline": "if (status != -ENOSPC)"
    },
    {
        "line": 117,
        "fullcodeline": "if (IS_ERR(transfer_to[USRQUOTA])) {"
    },
    {
        "line": 126,
        "fullcodeline": "if (IS_ERR(transfer_to[GRPQUOTA])) {"
    },
    {
        "line": 132,
        "fullcodeline": "2 * ocfs2_quota_trans_credits(sb));"
    },
    {
        "line": 144,
        "fullcodeline": "status = PTR_ERR(handle);"
    },
    {
        "line": 145,
        "fullcodeline": "mlog_errno(status);"
    },
    {
        "line": 90,
        "fullcodeline": "status = ocfs2_begin_ordered_truncate(inode,"
    },
    {
        "line": 100,
        "fullcodeline": "mlog_errno(status);"
    },
    {
        "line": 118,
        "fullcodeline": "status = PTR_ERR(transfer_to[USRQUOTA]);"
    },
    {
        "line": 127,
        "fullcodeline": "status = PTR_ERR(transfer_to[GRPQUOTA]);"
    }
]