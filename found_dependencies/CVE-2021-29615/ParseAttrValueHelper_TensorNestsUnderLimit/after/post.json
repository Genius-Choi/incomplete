[
    {
        "line": 2,
        "fullcodeline": "int nests = 0;"
    },
    {
        "line": 3,
        "fullcodeline": "int maxed_out = to_parse.length();"
    },
    {
        "line": 4,
        "fullcodeline": "int open_curly = to_parse.find('{');"
    },
    {
        "line": 5,
        "fullcodeline": "int open_bracket = to_parse.find('<');"
    },
    {
        "line": 6,
        "fullcodeline": "int close_curly = to_parse.find('}');"
    },
    {
        "line": 7,
        "fullcodeline": "int close_bracket = to_parse.find('>');"
    },
    {
        "line": 14,
        "fullcodeline": "int min = std::min(open_curly, open_bracket);"
    },
    {
        "line": 8,
        "fullcodeline": "if (open_curly == -1) {"
    },
    {
        "line": 11,
        "fullcodeline": "if (open_bracket == -1) {"
    },
    {
        "line": 45,
        "fullcodeline": "} while (nests < 100);"
    },
    {
        "line": 9,
        "fullcodeline": "open_curly = maxed_out;"
    },
    {
        "line": 12,
        "fullcodeline": "open_bracket = maxed_out;"
    },
    {
        "line": 44,
        "fullcodeline": "min = std::min({open_curly, open_bracket, close_curly, close_bracket});"
    },
    {
        "line": 16,
        "fullcodeline": "if (open_curly == maxed_out && open_bracket == maxed_out) {"
    },
    {
        "line": 19,
        "fullcodeline": "if (min == open_curly) {"
    },
    {
        "line": 20,
        "fullcodeline": "nests += 1;"
    },
    {
        "line": 21,
        "fullcodeline": "open_curly = to_parse.find('{', open_curly + 1);"
    },
    {
        "line": 22,
        "fullcodeline": "if (open_curly == -1) {"
    },
    {
        "line": 23,
        "fullcodeline": "open_curly = maxed_out;"
    },
    {
        "line": 25,
        "fullcodeline": "} else if (min == open_bracket) {"
    },
    {
        "line": 26,
        "fullcodeline": "nests += 1;"
    },
    {
        "line": 27,
        "fullcodeline": "open_bracket = to_parse.find('<', open_bracket + 1);"
    },
    {
        "line": 28,
        "fullcodeline": "if (open_bracket == -1) {"
    },
    {
        "line": 29,
        "fullcodeline": "open_bracket = maxed_out;"
    },
    {
        "line": 31,
        "fullcodeline": "} else if (min == close_curly) {"
    },
    {
        "line": 32,
        "fullcodeline": "nests -= 1;"
    },
    {
        "line": 33,
        "fullcodeline": "close_curly = to_parse.find('}', close_curly + 1);"
    },
    {
        "line": 34,
        "fullcodeline": "if (close_curly == -1) {"
    },
    {
        "line": 35,
        "fullcodeline": "close_curly = maxed_out;"
    },
    {
        "line": 37,
        "fullcodeline": "} else if (min == close_bracket) {"
    },
    {
        "line": 38,
        "fullcodeline": "nests -= 1;"
    },
    {
        "line": 39,
        "fullcodeline": "close_bracket = to_parse.find('>', close_bracket + 1);"
    },
    {
        "line": 40,
        "fullcodeline": "if (close_bracket == -1) {"
    },
    {
        "line": 41,
        "fullcodeline": "close_bracket = maxed_out;"
    }
]