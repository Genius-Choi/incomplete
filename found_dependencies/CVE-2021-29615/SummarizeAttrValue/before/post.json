[
    {
        "line": 2,
        "fullcodeline": "switch (attr_value.value_case()) {"
    },
    {
        "line": 4,
        "fullcodeline": "return SummarizeString(attr_value.s());"
    },
    {
        "line": 6,
        "fullcodeline": "return strings::StrCat(attr_value.i());"
    },
    {
        "line": 8,
        "fullcodeline": "return strings::StrCat(attr_value.f());"
    },
    {
        "line": 10,
        "fullcodeline": "return attr_value.b() ? \"true\" : \"false\";"
    },
    {
        "line": 12,
        "fullcodeline": "return EnumName_DataType(attr_value.type());"
    },
    {
        "line": 14,
        "fullcodeline": "return PartialTensorShape::DebugString(attr_value.shape());"
    },
    {
        "line": 16,
        "fullcodeline": "return SummarizeTensor(attr_value.tensor());"
    },
    {
        "line": 18,
        "fullcodeline": "std::vector<string> pieces;"
    },
    {
        "line": 53,
        "fullcodeline": "constexpr int kMaxListSummarySize = 50;"
    },
    {
        "line": 64,
        "fullcodeline": "return strings::StrCat(\"$\", attr_value.placeholder());"
    },
    {
        "line": 19,
        "fullcodeline": "if (attr_value.list().s_size() > 0) {"
    },
    {
        "line": 54,
        "fullcodeline": "if (pieces.size() >= kMaxListSummarySize) {"
    },
    {
        "line": 58,
        "fullcodeline": "return strings::StrCat(\"[\", absl::StrJoin(pieces, \", \"), \"]\");"
    },
    {
        "line": 61,
        "fullcodeline": "return SummarizeFunc(attr_value.func());"
    },
    {
        "line": 55,
        "fullcodeline": "pieces.erase(pieces.begin() + 5, pieces.begin() + (pieces.size() - 6));"
    },
    {
        "line": 56,
        "fullcodeline": "pieces[5] = \"...\";"
    },
    {
        "line": 20,
        "fullcodeline": "for (int i = 0; i < attr_value.list().s_size(); ++i) {"
    },
    {
        "line": 21,
        "fullcodeline": "pieces.push_back(SummarizeString(attr_value.list().s(i)));"
    },
    {
        "line": 23,
        "fullcodeline": "} else if (attr_value.list().i_size() > 0) {"
    },
    {
        "line": 24,
        "fullcodeline": "for (int i = 0; i < attr_value.list().i_size(); ++i) {"
    },
    {
        "line": 25,
        "fullcodeline": "pieces.push_back(strings::StrCat(attr_value.list().i(i)));"
    },
    {
        "line": 27,
        "fullcodeline": "} else if (attr_value.list().f_size() > 0) {"
    },
    {
        "line": 28,
        "fullcodeline": "for (int i = 0; i < attr_value.list().f_size(); ++i) {"
    },
    {
        "line": 29,
        "fullcodeline": "pieces.push_back(strings::StrCat(attr_value.list().f(i)));"
    },
    {
        "line": 31,
        "fullcodeline": "} else if (attr_value.list().b_size() > 0) {"
    },
    {
        "line": 32,
        "fullcodeline": "for (int i = 0; i < attr_value.list().b_size(); ++i) {"
    },
    {
        "line": 33,
        "fullcodeline": "pieces.push_back(attr_value.list().b(i) ? \"true\" : \"false\");"
    },
    {
        "line": 35,
        "fullcodeline": "} else if (attr_value.list().type_size() > 0) {"
    },
    {
        "line": 36,
        "fullcodeline": "for (int i = 0; i < attr_value.list().type_size(); ++i) {"
    },
    {
        "line": 37,
        "fullcodeline": "pieces.push_back(EnumName_DataType(attr_value.list().type(i)));"
    },
    {
        "line": 39,
        "fullcodeline": "} else if (attr_value.list().shape_size() > 0) {"
    },
    {
        "line": 40,
        "fullcodeline": "for (int i = 0; i < attr_value.list().shape_size(); ++i) {"
    },
    {
        "line": 41,
        "fullcodeline": "pieces.push_back("
    },
    {
        "line": 44,
        "fullcodeline": "} else if (attr_value.list().tensor_size() > 0) {"
    },
    {
        "line": 42,
        "fullcodeline": "TensorShape::DebugString(attr_value.list().shape(i)));"
    },
    {
        "line": 45,
        "fullcodeline": "for (int i = 0; i < attr_value.list().tensor_size(); ++i) {"
    },
    {
        "line": 46,
        "fullcodeline": "pieces.push_back(SummarizeTensor(attr_value.list().tensor(i)));"
    },
    {
        "line": 48,
        "fullcodeline": "} else if (attr_value.list().func_size() > 0) {"
    },
    {
        "line": 49,
        "fullcodeline": "for (int i = 0; i < attr_value.list().func_size(); ++i) {"
    },
    {
        "line": 50,
        "fullcodeline": "pieces.push_back(SummarizeFunc(attr_value.list().func(i)));"
    }
]