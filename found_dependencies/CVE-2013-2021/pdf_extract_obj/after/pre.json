[
    {
        "line": 3,
        "fullcodeline": "char fullname[NAME_MAX + 1];"
    },
    {
        "line": 5,
        "fullcodeline": "off_t sum = 0;"
    },
    {
        "line": 6,
        "fullcodeline": "int rc = CL_SUCCESS;"
    },
    {
        "line": 7,
        "fullcodeline": "char *ascii_decoded = NULL;"
    },
    {
        "line": 8,
        "fullcodeline": "int dump = 1;"
    },
    {
        "line": 10,
        "fullcodeline": "cli_dbgmsg(\"pdf_extract_obj: obj %u %u\\n\", obj->id>>8, obj->id&0xff);"
    },
    {
        "line": 32,
        "fullcodeline": "fout = open(fullname,O_RDWR|O_CREAT|O_EXCL|O_TRUNC|O_BINARY, 0600);"
    },
    {
        "line": 188,
        "fullcodeline": "cli_dbgmsg(\"cli_pdf: extracted %ld bytes %u %u obj to %s\\n\", sum, obj->id>>8, obj->id&0xff, fullname);"
    },
    {
        "line": 13,
        "fullcodeline": "if ((!(obj->flags & (1 << OBJ_STREAM)) ||"
    },
    {
        "line": 19,
        "fullcodeline": "if ((obj->flags & (1 << OBJ_IMAGE)) &&"
    },
    {
        "line": 24,
        "fullcodeline": "if (obj->flags & (1 << OBJ_FORCEDUMP)) {"
    },
    {
        "line": 28,
        "fullcodeline": "if (!dump)"
    },
    {
        "line": 30,
        "fullcodeline": "cli_dbgmsg(\"cli_pdf: dumping obj %u %u\\n\", obj->id>>8, obj->id&0xff);"
    },
    {
        "line": 33,
        "fullcodeline": "if (fout < 0) {"
    },
    {
        "line": 15,
        "fullcodeline": "&& !(obj->flags & DUMP_MASK)) {"
    },
    {
        "line": 17,
        "fullcodeline": "dump = 0;"
    },
    {
        "line": 20,
        "fullcodeline": "!(obj->flags & (1 << OBJ_FILTER_DCT))) {"
    },
    {
        "line": 22,
        "fullcodeline": "dump = 0;"
    },
    {
        "line": 26,
        "fullcodeline": "dump = 1;"
    },
    {
        "line": 191,
        "fullcodeline": "cli_updatelimits(pdf->ctx, sum);"
    },
    {
        "line": 194,
        "fullcodeline": "lseek(fout, 0, SEEK_SET);"
    },
    {
        "line": 195,
        "fullcodeline": "rc2 = cli_magic_scandesc(fout, pdf->ctx);"
    },
    {
        "line": 14,
        "fullcodeline": "(obj->flags & (1 << OBJ_HASFILTERS)))"
    },
    {
        "line": 34,
        "fullcodeline": "char err[128];"
    },
    {
        "line": 35,
        "fullcodeline": "cli_errmsg(\"cli_pdf: can't create temporary file %s: %s\\n\", fullname, cli_strerror(errno, err, sizeof(err)));"
    },
    {
        "line": 41,
        "fullcodeline": "if (obj->flags & (1 << OBJ_STREAM)) {"
    },
    {
        "line": 198,
        "fullcodeline": "if (rc == CL_CLEAN) {"
    },
    {
        "line": 42,
        "fullcodeline": "const char *start = pdf->map + obj->start;"
    },
    {
        "line": 43,
        "fullcodeline": "off_t p_stream = 0, p_endstream = 0;"
    },
    {
        "line": 45,
        "fullcodeline": "find_stream_bounds(start, pdf->size - obj->start,"
    },
    {
        "line": 196,
        "fullcodeline": "if (rc2 == CL_VIRUS || rc == CL_SUCCESS)"
    },
    {
        "line": 197,
        "fullcodeline": "rc = rc2;"
    },
    {
        "line": 199,
        "fullcodeline": "rc2 = run_pdf_hooks(pdf, PDF_PHASE_POSTDUMP, fout, obj - pdf->objs);"
    },
    {
        "line": 207,
        "fullcodeline": "if (cli_unlink(fullname) && rc != CL_VIRUS)"
    },
    {
        "line": 208,
        "fullcodeline": "rc = CL_EUNLINK;"
    },
    {
        "line": 46,
        "fullcodeline": "pdf->size - obj->start,"
    },
    {
        "line": 48,
        "fullcodeline": "if (p_stream && p_endstream) {"
    },
    {
        "line": 200,
        "fullcodeline": "if (rc2 == CL_VIRUS)"
    },
    {
        "line": 50,
        "fullcodeline": "long ascii_decoded_size = 0;"
    },
    {
        "line": 51,
        "fullcodeline": "size_t size = p_endstream - p_stream;"
    },
    {
        "line": 54,
        "fullcodeline": "length = find_length(pdf, obj, start, p_stream);"
    },
    {
        "line": 57,
        "fullcodeline": "orig_length = length;"
    },
    {
        "line": 127,
        "fullcodeline": "flate_in = ascii_decoded ? ascii_decoded : start+p_stream;"
    },
    {
        "line": 137,
        "fullcodeline": "} else if (obj->flags & (1 << OBJ_JAVASCRIPT)) {"
    },
    {
        "line": 201,
        "fullcodeline": "rc = rc2;"
    },
    {
        "line": 55,
        "fullcodeline": "if (length < 0)"
    },
    {
        "line": 85,
        "fullcodeline": "if (orig_length && size > orig_length + 20) {"
    },
    {
        "line": 90,
        "fullcodeline": "if (!length)"
    },
    {
        "line": 93,
        "fullcodeline": "if (obj->flags & (1 << OBJ_FILTER_AH)) {"
    },
    {
        "line": 114,
        "fullcodeline": "if (ascii_decoded_size < 0) {"
    },
    {
        "line": 125,
        "fullcodeline": "if (!ascii_decoded)"
    },
    {
        "line": 129,
        "fullcodeline": "if (obj->flags & (1 << OBJ_FILTER_FLATE)) {"
    },
    {
        "line": 139,
        "fullcodeline": "const char *q = pdf->map+obj->start;"
    },
    {
        "line": 141,
        "fullcodeline": "off_t bytesleft = obj_size(pdf, obj, 0);"
    },
    {
        "line": 145,
        "fullcodeline": "q2 = cli_memstr(q, bytesleft, \"/JavaScript\", 11);"
    },
    {
        "line": 148,
        "fullcodeline": "bytesleft -= q2 - q;"
    },
    {
        "line": 56,
        "fullcodeline": "length = 0;"
    },
    {
        "line": 58,
        "fullcodeline": "if (length > pdf->size || obj->start + p_stream + length > pdf->size) {"
    },
    {
        "line": 59,
        "fullcodeline": "cli_dbgmsg(\"cli_pdf: length out of file: %ld + %ld > %ld\\n\","
    },
    {
        "line": 61,
        "fullcodeline": "length = pdf->size - (obj->start + p_stream);"
    },
    {
        "line": 63,
        "fullcodeline": "if (!(obj->flags & (1 << OBJ_FILTER_FLATE)) && length <= 0) {"
    },
    {
        "line": 64,
        "fullcodeline": "const char *q = start + p_endstream;"
    },
    {
        "line": 65,
        "fullcodeline": "length = size;"
    },
    {
        "line": 66,
        "fullcodeline": "q--;"
    },
    {
        "line": 77,
        "fullcodeline": "cli_dbgmsg(\"cli_pdf: calculated length %ld\\n\", length);"
    },
    {
        "line": 86,
        "fullcodeline": "cli_dbgmsg(\"cli_pdf: orig length: %ld, length: %ld, size: %ld\\n\","
    },
    {
        "line": 88,
        "fullcodeline": "pdfobj_flag(pdf, obj, BAD_STREAMLEN);"
    },
    {
        "line": 91,
        "fullcodeline": "length = size;"
    },
    {
        "line": 94,
        "fullcodeline": "ascii_decoded = cli_malloc(length/2 + 1);"
    },
    {
        "line": 100,
        "fullcodeline": "ascii_decoded_size = asciihexdecode(start + p_stream,"
    },
    {
        "line": 121,
        "fullcodeline": "ascii_decoded = NULL;"
    },
    {
        "line": 126,
        "fullcodeline": "ascii_decoded_size = length;"
    },
    {
        "line": 130,
        "fullcodeline": "cli_dbgmsg(\"cli_pdf: deflate len %ld (orig %ld)\\n\", ascii_decoded_size, (long)orig_length);"
    },
    {
        "line": 131,
        "fullcodeline": "rc = filter_flatedecode(pdf, obj, flate_in, ascii_decoded_size, fout, &sum);"
    },
    {
        "line": 142,
        "fullcodeline": "if (bytesleft < 0)"
    },
    {
        "line": 146,
        "fullcodeline": "if (!q2)"
    },
    {
        "line": 157,
        "fullcodeline": "} while (*q == '/');"
    },
    {
        "line": 158,
        "fullcodeline": "if (!q)"
    },
    {
        "line": 160,
        "fullcodeline": "if (*q == '(') {"
    },
    {
        "line": 183,
        "fullcodeline": "off_t bytesleft = obj_size(pdf, obj, 0);"
    },
    {
        "line": 67,
        "fullcodeline": "if (*q == '\\n') {"
    },
    {
        "line": 75,
        "fullcodeline": "if (length < 0)"
    },
    {
        "line": 95,
        "fullcodeline": "if (!ascii_decoded) {"
    },
    {
        "line": 119,
        "fullcodeline": "cli_dbgmsg(\"cli_pdf: failed to asciidecode in %u %u obj\\n\", obj->id>>8,obj->id&0xff);"
    },
    {
        "line": 150,
        "fullcodeline": "q2++;"
    },
    {
        "line": 151,
        "fullcodeline": "bytesleft--;"
    },
    {
        "line": 152,
        "fullcodeline": "q = pdf_nextobject(q2, bytesleft);"
    },
    {
        "line": 155,
        "fullcodeline": "bytesleft -= q - q2;"
    },
    {
        "line": 156,
        "fullcodeline": "q2 = q;"
    },
    {
        "line": 69,
        "fullcodeline": "length--;"
    },
    {
        "line": 76,
        "fullcodeline": "length = 0;"
    },
    {
        "line": 79,
        "fullcodeline": "if (size > length+2) {"
    },
    {
        "line": 97,
        "fullcodeline": "rc = CL_EMEM;"
    },
    {
        "line": 103,
        "fullcodeline": "} else if (obj->flags & (1 << OBJ_FILTER_A85)) {"
    },
    {
        "line": 116,
        "fullcodeline": "if (!(obj->flags &"
    },
    {
        "line": 118,
        "fullcodeline": "pdfobj_flag(pdf, obj, BAD_ASCIIDECODE);"
    },
    {
        "line": 153,
        "fullcodeline": "if (!q)"
    },
    {
        "line": 184,
        "fullcodeline": "if (filter_writen(pdf, obj, fout , pdf->map + obj->start, bytesleft,&sum) != bytesleft)"
    },
    {
        "line": 185,
        "fullcodeline": "rc = CL_EWRITE;"
    },
    {
        "line": 70,
        "fullcodeline": "if (*q == '\\r')"
    },
    {
        "line": 80,
        "fullcodeline": "cli_dbgmsg(\"cli_pdf: calculated length %ld < %ld\\n\","
    },
    {
        "line": 82,
        "fullcodeline": "length = size;"
    },
    {
        "line": 104,
        "fullcodeline": "ascii_decoded = cli_malloc(length*5);"
    },
    {
        "line": 110,
        "fullcodeline": "ascii_decoded_size = ascii85decode(start+p_stream,"
    },
    {
        "line": 117,
        "fullcodeline": "((1 << OBJ_IMAGE) | (1 << OBJ_TRUNCATED))))"
    },
    {
        "line": 133,
        "fullcodeline": "if (filter_writen(pdf, obj, fout, flate_in, ascii_decoded_size, &sum) != ascii_decoded_size)"
    },
    {
        "line": 134,
        "fullcodeline": "rc = CL_EWRITE;"
    },
    {
        "line": 161,
        "fullcodeline": "if (filter_writen(pdf, obj, fout, q+1, bytesleft-1, &sum) != (bytesleft-1)) {"
    },
    {
        "line": 162,
        "fullcodeline": "rc = CL_EWRITE;"
    },
    {
        "line": 165,
        "fullcodeline": "} else if (*q == '<') {"
    },
    {
        "line": 71,
        "fullcodeline": "length--;"
    },
    {
        "line": 72,
        "fullcodeline": "} else if (*q == '\\r') {"
    },
    {
        "line": 105,
        "fullcodeline": "if (!ascii_decoded) {"
    },
    {
        "line": 167,
        "fullcodeline": "q2 = memchr(q+1, '>', bytesleft);"
    },
    {
        "line": 169,
        "fullcodeline": "decoded = cli_malloc(q2 - q);"
    },
    {
        "line": 174,
        "fullcodeline": "cli_hex2str_to(q2, decoded, q2-q-1);"
    },
    {
        "line": 175,
        "fullcodeline": "decoded[q2-q-1] = '\\0';"
    },
    {
        "line": 178,
        "fullcodeline": "pdfobj_flag(pdf, obj, HEX_JAVASCRIPT);"
    },
    {
        "line": 179,
        "fullcodeline": "filter_writen(pdf, obj, fout, decoded, q2-q-1, &sum);"
    },
    {
        "line": 73,
        "fullcodeline": "length--;"
    },
    {
        "line": 107,
        "fullcodeline": "rc = CL_EMEM;"
    },
    {
        "line": 168,
        "fullcodeline": "if (!q2) q2 = q + bytesleft;"
    },
    {
        "line": 170,
        "fullcodeline": "if (!decoded) {"
    },
    {
        "line": 177,
        "fullcodeline": "obj->id>>8, obj->id&0xff);"
    },
    {
        "line": 171,
        "fullcodeline": "rc = CL_EMEM;"
    }
]