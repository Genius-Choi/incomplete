[
    {
        "line": 8,
        "fullcodeline": "while (len > 2)"
    },
    {
        "line": 10,
        "fullcodeline": "stlv_type = *(tptr++);"
    },
    {
        "line": 11,
        "fullcodeline": "stlv_len  = *(tptr++);"
    },
    {
        "line": 20,
        "fullcodeline": "len = len -2;"
    },
    {
        "line": 106,
        "fullcodeline": "ND_PRINT((ndo, \"%s\", tstr));"
    },
    {
        "line": 14,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t       %s subTLV #%u, length: %u\","
    },
    {
        "line": 15,
        "fullcodeline": "tok2str(isis_mt_port_cap_subtlv_values, \"unknown\", stlv_type),"
    },
    {
        "line": 26,
        "fullcodeline": "ND_TCHECK2(*(tptr), ISIS_SUBTLV_SPB_MCID_MIN_LEN);"
    },
    {
        "line": 28,
        "fullcodeline": "subtlv_spb_mcid = (const struct isis_subtlv_spb_mcid *)tptr;"
    },
    {
        "line": 31,
        "fullcodeline": "isis_print_mcid(ndo, &(subtlv_spb_mcid->mcid));"
    },
    {
        "line": 49,
        "fullcodeline": "ND_TCHECK2(*(tptr), ISIS_SUBTLV_SPB_DIGEST_MIN_LEN);"
    },
    {
        "line": 55,
        "fullcodeline": "tptr++;"
    },
    {
        "line": 74,
        "fullcodeline": "ND_TCHECK2(*(tptr), stlv_len);"
    },
    {
        "line": 30,
        "fullcodeline": "ND_PRINT((ndo,  \"\\n\\t         MCID: \"));"
    },
    {
        "line": 36,
        "fullcodeline": "ND_PRINT((ndo,  \"\\n\\t         AUX-MCID: \"));"
    },
    {
        "line": 42,
        "fullcodeline": "len = len - sizeof(struct isis_subtlv_spb_mcid);"
    },
    {
        "line": 51,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t        RES: %d V: %d A: %d D: %d\","
    },
    {
        "line": 57,
        "fullcodeline": "ND_PRINT((ndo,  \"\\n\\t         Digest: \"));"
    },
    {
        "line": 59,
        "fullcodeline": "for(i=1;i<=8; i++)"
    },
    {
        "line": 67,
        "fullcodeline": "len = len - ISIS_SUBTLV_SPB_DIGEST_MIN_LEN;"
    },
    {
        "line": 76,
        "fullcodeline": "while (len >= ISIS_SUBTLV_SPB_BVID_MIN_LEN)"
    },
    {
        "line": 64,
        "fullcodeline": "tptr = tptr + 4;"
    },
    {
        "line": 78,
        "fullcodeline": "ND_TCHECK2(*(tptr), ISIS_SUBTLV_SPB_BVID_MIN_LEN);"
    },
    {
        "line": 83,
        "fullcodeline": "tptr = tptr+4;"
    },
    {
        "line": 90,
        "fullcodeline": "tptr = tptr + 2;"
    },
    {
        "line": 91,
        "fullcodeline": "len = len - ISIS_SUBTLV_SPB_BVID_MIN_LEN;"
    },
    {
        "line": 52,
        "fullcodeline": "(*(tptr) >> 5), (((*tptr)>> 4) & 0x01),"
    },
    {
        "line": 53,
        "fullcodeline": "((*(tptr) >> 2) & 0x03), ((*tptr) & 0x03)));"
    },
    {
        "line": 61,
        "fullcodeline": "ND_PRINT((ndo, \"%08x \", EXTRACT_32BITS(tptr)));"
    },
    {
        "line": 80,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t           ECT: %08x\","
    },
    {
        "line": 85,
        "fullcodeline": "ND_PRINT((ndo, \" BVID: %d, U:%01x M:%01x \","
    },
    {
        "line": 62,
        "fullcodeline": "if (i%4 == 0 && i != 8)"
    },
    {
        "line": 63,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t                 \"));"
    },
    {
        "line": 81,
        "fullcodeline": "EXTRACT_32BITS(tptr)));"
    },
    {
        "line": 86,
        "fullcodeline": "(EXTRACT_16BITS (tptr) >> 4) ,"
    },
    {
        "line": 87,
        "fullcodeline": "(EXTRACT_16BITS (tptr) >> 3) & 0x01,"
    },
    {
        "line": 88,
        "fullcodeline": "(EXTRACT_16BITS (tptr) >> 2) & 0x01));"
    }
]