[
    {
        "line": 5,
        "fullcodeline": "buffer[MagickPathExtent],"
    },
    {
        "line": 7,
        "fullcodeline": "magick[MagickPathExtent];"
    },
    {
        "line": 45,
        "fullcodeline": "assert(image_info != (const ImageInfo *) NULL);"
    },
    {
        "line": 46,
        "fullcodeline": "assert(image_info->signature == MagickCoreSignature);"
    },
    {
        "line": 47,
        "fullcodeline": "assert(image != (Image *) NULL);"
    },
    {
        "line": 48,
        "fullcodeline": "assert(image->signature == MagickCoreSignature);"
    },
    {
        "line": 51,
        "fullcodeline": "assert(exception != (ExceptionInfo *) NULL);"
    },
    {
        "line": 52,
        "fullcodeline": "assert(exception->signature == MagickCoreSignature);"
    },
    {
        "line": 53,
        "fullcodeline": "status=OpenBlob(image_info,image,WriteBinaryBlobMode,exception);"
    },
    {
        "line": 56,
        "fullcodeline": "scene=0;"
    },
    {
        "line": 57,
        "fullcodeline": "imageListLength=GetImageListLength(image);"
    },
    {
        "line": 968,
        "fullcodeline": "(void) CloseBlob(image);"
    },
    {
        "line": 49,
        "fullcodeline": "if (image->debug != MagickFalse)"
    },
    {
        "line": 54,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 967,
        "fullcodeline": "} while (image_info->adjoin != MagickFalse);"
    },
    {
        "line": 50,
        "fullcodeline": "(void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",image->filename);"
    },
    {
        "line": 66,
        "fullcodeline": "packet_size=3;"
    },
    {
        "line": 67,
        "fullcodeline": "quantum_type=RGBQuantum;"
    },
    {
        "line": 68,
        "fullcodeline": "(void) CopyMagickString(magick,image_info->magick,MagickPathExtent);"
    },
    {
        "line": 69,
        "fullcodeline": "max_value=GetQuantumRange(image->depth);"
    },
    {
        "line": 128,
        "fullcodeline": "(void) FormatLocaleString(buffer,MagickPathExtent,\"P%c\\n\",format);"
    },
    {
        "line": 129,
        "fullcodeline": "(void) WriteBlobString(image,buffer);"
    },
    {
        "line": 130,
        "fullcodeline": "value=GetImageProperty(image,\"comment\",exception);"
    },
    {
        "line": 963,
        "fullcodeline": "image=SyncNextImageInList(image);"
    },
    {
        "line": 964,
        "fullcodeline": "status=SetImageProgress(image,SaveImagesTag,scene++,imageListLength);"
    },
    {
        "line": 131,
        "fullcodeline": "if (value != (const char *) NULL)"
    },
    {
        "line": 148,
        "fullcodeline": "if (format != '7')"
    },
    {
        "line": 961,
        "fullcodeline": "if (GetNextImageInList(image) == (Image *) NULL)"
    },
    {
        "line": 965,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 139,
        "fullcodeline": "(void) WriteBlobByte(image,'#');"
    },
    {
        "line": 146,
        "fullcodeline": "(void) WriteBlobByte(image,'\\n');"
    },
    {
        "line": 150,
        "fullcodeline": "(void) FormatLocaleString(buffer,MagickPathExtent,\"%.20g %.20g\\n\","
    },
    {
        "line": 152,
        "fullcodeline": "(void) WriteBlobString(image,buffer);"
    },
    {
        "line": 75,
        "fullcodeline": "format='7';"
    },
    {
        "line": 81,
        "fullcodeline": "format='4';"
    },
    {
        "line": 89,
        "fullcodeline": "format='F';"
    },
    {
        "line": 97,
        "fullcodeline": "format='5';"
    },
    {
        "line": 122,
        "fullcodeline": "format='6';"
    },
    {
        "line": 140,
        "fullcodeline": "for (p=value; *p != '\\0'; p++)"
    },
    {
        "line": 157,
        "fullcodeline": "type[MagickPathExtent];"
    },
    {
        "line": 162,
        "fullcodeline": "(void) FormatLocaleString(buffer,MagickPathExtent,"
    },
    {
        "line": 165,
        "fullcodeline": "(void) WriteBlobString(image,buffer);"
    },
    {
        "line": 166,
        "fullcodeline": "quantum_type=GetQuantumType(image,exception);"
    },
    {
        "line": 202,
        "fullcodeline": "(void) FormatLocaleString(buffer,MagickPathExtent,"
    },
    {
        "line": 205,
        "fullcodeline": "(void) WriteBlobString(image,buffer);"
    },
    {
        "line": 206,
        "fullcodeline": "(void) FormatLocaleString(buffer,MagickPathExtent,"
    },
    {
        "line": 208,
        "fullcodeline": "(void) WriteBlobString(image,buffer);"
    },
    {
        "line": 218,
        "fullcodeline": "pixels[2048];"
    },
    {
        "line": 223,
        "fullcodeline": "(void) SetImageType(image,BilevelType,exception);"
    },
    {
        "line": 224,
        "fullcodeline": "q=pixels;"
    },
    {
        "line": 270,
        "fullcodeline": "pixels[2048];"
    },
    {
        "line": 282,
        "fullcodeline": "q=pixels;"
    },
    {
        "line": 339,
        "fullcodeline": "pixels[2048];"
    },
    {
        "line": 344,
        "fullcodeline": "(void) TransformImageColorspace(image,sRGBColorspace,exception);"
    },
    {
        "line": 352,
        "fullcodeline": "q=pixels;"
    },
    {
        "line": 419,
        "fullcodeline": "(void) SetImageType(image,BilevelType,exception);"
    },
    {
        "line": 420,
        "fullcodeline": "image->depth=1;"
    },
    {
        "line": 421,
        "fullcodeline": "quantum_info=AcquireQuantumInfo(image_info,image);"
    },
    {
        "line": 424,
        "fullcodeline": "(void) SetQuantumEndian(image,quantum_info,MSBEndian);"
    },
    {
        "line": 425,
        "fullcodeline": "quantum_info->min_is_white=MagickTrue;"
    },
    {
        "line": 426,
        "fullcodeline": "pixels=GetQuantumPixels(quantum_info);"
    },
    {
        "line": 448,
        "fullcodeline": "quantum_info=DestroyQuantumInfo(quantum_info);"
    },
    {
        "line": 461,
        "fullcodeline": "(void) FormatLocaleString(buffer,MagickPathExtent,\"%.20g\\n\",(double)"
    },
    {
        "line": 463,
        "fullcodeline": "(void) WriteBlobString(image,buffer);"
    },
    {
        "line": 464,
        "fullcodeline": "quantum_info=AcquireQuantumInfo(image_info,image);"
    },
    {
        "line": 467,
        "fullcodeline": "(void) SetQuantumEndian(image,quantum_info,MSBEndian);"
    },
    {
        "line": 468,
        "fullcodeline": "quantum_info->min_is_white=MagickTrue;"
    },
    {
        "line": 469,
        "fullcodeline": "pixels=GetQuantumPixels(quantum_info);"
    },
    {
        "line": 470,
        "fullcodeline": "extent=GetQuantumExtent(image,quantum_info,GrayQuantum);"
    },
    {
        "line": 567,
        "fullcodeline": "quantum_info=DestroyQuantumInfo(quantum_info);"
    },
    {
        "line": 578,
        "fullcodeline": "(void) TransformImageColorspace(image,sRGBColorspace,exception);"
    },
    {
        "line": 581,
        "fullcodeline": "(void) FormatLocaleString(buffer,MagickPathExtent,\"%.20g\\n\",(double)"
    },
    {
        "line": 583,
        "fullcodeline": "(void) WriteBlobString(image,buffer);"
    },
    {
        "line": 584,
        "fullcodeline": "quantum_info=AcquireQuantumInfo(image_info,image);"
    },
    {
        "line": 587,
        "fullcodeline": "(void) SetQuantumEndian(image,quantum_info,MSBEndian);"
    },
    {
        "line": 588,
        "fullcodeline": "pixels=GetQuantumPixels(quantum_info);"
    },
    {
        "line": 589,
        "fullcodeline": "extent=GetQuantumExtent(image,quantum_info,quantum_type);"
    },
    {
        "line": 669,
        "fullcodeline": "quantum_info=DestroyQuantumInfo(quantum_info);"
    },
    {
        "line": 682,
        "fullcodeline": "quantum_info=AcquireQuantumInfo(image_info,image);"
    },
    {
        "line": 685,
        "fullcodeline": "(void) SetQuantumEndian(image,quantum_info,MSBEndian);"
    },
    {
        "line": 686,
        "fullcodeline": "pixels=GetQuantumPixels(quantum_info);"
    },
    {
        "line": 918,
        "fullcodeline": "quantum_info=DestroyQuantumInfo(quantum_info);"
    },
    {
        "line": 927,
        "fullcodeline": "(void) WriteBlobString(image,image->endian == LSBEndian ? \"-1.0\\n\" :"
    },
    {
        "line": 929,
        "fullcodeline": "image->depth=32;"
    },
    {
        "line": 930,
        "fullcodeline": "quantum_type=format == 'f' ? GrayQuantum : RGBQuantum;"
    },
    {
        "line": 931,
        "fullcodeline": "quantum_info=AcquireQuantumInfo(image_info,image);"
    },
    {
        "line": 934,
        "fullcodeline": "status=SetQuantumFormat(image,quantum_info,FloatingPointQuantumFormat);"
    },
    {
        "line": 937,
        "fullcodeline": "pixels=GetQuantumPixels(quantum_info);"
    },
    {
        "line": 957,
        "fullcodeline": "quantum_info=DestroyQuantumInfo(quantum_info);"
    },
    {
        "line": 82,
        "fullcodeline": "if (image_info->compression == NoCompression)"
    },
    {
        "line": 90,
        "fullcodeline": "if (SetImageGray(image,exception) != MagickFalse)"
    },
    {
        "line": 98,
        "fullcodeline": "if (image_info->compression == NoCompression)"
    },
    {
        "line": 105,
        "fullcodeline": "if ((image_info->type != TrueColorType) &&"
    },
    {
        "line": 123,
        "fullcodeline": "if (image_info->compression == NoCompression)"
    },
    {
        "line": 142,
        "fullcodeline": "(void) WriteBlobByte(image,(unsigned char) *p);"
    },
    {
        "line": 151,
        "fullcodeline": "(double) image->columns,(double) image->rows);"
    },
    {
        "line": 195,
        "fullcodeline": "if (image->alpha_trait != UndefinedPixelTrait)"
    },
    {
        "line": 200,
        "fullcodeline": "if (image->depth > 32)"
    },
    {
        "line": 225,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 260,
        "fullcodeline": "if (q != pixels)"
    },
    {
        "line": 275,
        "fullcodeline": "if (image->depth <= 8)"
    },
    {
        "line": 283,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 329,
        "fullcodeline": "if (q != pixels)"
    },
    {
        "line": 345,
        "fullcodeline": "if (image->depth <= 8)"
    },
    {
        "line": 353,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 404,
        "fullcodeline": "if (q != pixels)"
    },
    {
        "line": 422,
        "fullcodeline": "if (quantum_info == (QuantumInfo *) NULL)"
    },
    {
        "line": 427,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 459,
        "fullcodeline": "if (image->depth > 32)"
    },
    {
        "line": 465,
        "fullcodeline": "if (quantum_info == (QuantumInfo *) NULL)"
    },
    {
        "line": 471,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 579,
        "fullcodeline": "if (image->depth > 32)"
    },
    {
        "line": 585,
        "fullcodeline": "if (quantum_info == (QuantumInfo *) NULL)"
    },
    {
        "line": 590,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 680,
        "fullcodeline": "if (image->depth > 32)"
    },
    {
        "line": 683,
        "fullcodeline": "if (quantum_info == (QuantumInfo *) NULL)"
    },
    {
        "line": 687,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 932,
        "fullcodeline": "if (quantum_info == (QuantumInfo *) NULL)"
    },
    {
        "line": 935,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 938,
        "fullcodeline": "for (y=(ssize_t) image->rows-1; y >= 0; y--)"
    },
    {
        "line": 83,
        "fullcodeline": "format='1';"
    },
    {
        "line": 91,
        "fullcodeline": "format='f';"
    },
    {
        "line": 99,
        "fullcodeline": "format='2';"
    },
    {
        "line": 106,
        "fullcodeline": "(SetImageGray(image,exception) != MagickFalse))"
    },
    {
        "line": 108,
        "fullcodeline": "format='5';"
    },
    {
        "line": 124,
        "fullcodeline": "format='3';"
    },
    {
        "line": 143,
        "fullcodeline": "if ((*p == '\\n') || (*p == '\\r'))"
    },
    {
        "line": 163,
        "fullcodeline": "\"WIDTH %.20g\\nHEIGHT %.20g\\n\",(double) image->columns,(double)"
    },
    {
        "line": 197,
        "fullcodeline": "packet_size++;"
    },
    {
        "line": 198,
        "fullcodeline": "(void) ConcatenateMagickString(type,\"_ALPHA\",MagickPathExtent);"
    },
    {
        "line": 201,
        "fullcodeline": "image->depth=32;"
    },
    {
        "line": 203,
        "fullcodeline": "\"DEPTH %.20g\\nMAXVAL %.20g\\n\",(double) packet_size,(double)"
    },
    {
        "line": 233,
        "fullcodeline": "p=GetVirtualPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 249,
        "fullcodeline": "*q++='\\n';"
    },
    {
        "line": 250,
        "fullcodeline": "(void) WriteBlob(image,q-pixels,pixels);"
    },
    {
        "line": 251,
        "fullcodeline": "q=pixels;"
    },
    {
        "line": 262,
        "fullcodeline": "*q++='\\n';"
    },
    {
        "line": 263,
        "fullcodeline": "(void) WriteBlob(image,q-pixels,pixels);"
    },
    {
        "line": 276,
        "fullcodeline": "(void) WriteBlobString(image,\"255\\n\");"
    },
    {
        "line": 291,
        "fullcodeline": "p=GetVirtualPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 318,
        "fullcodeline": "*q++='\\n';"
    },
    {
        "line": 319,
        "fullcodeline": "(void) WriteBlob(image,q-pixels,pixels);"
    },
    {
        "line": 320,
        "fullcodeline": "q=pixels;"
    },
    {
        "line": 331,
        "fullcodeline": "*q++='\\n';"
    },
    {
        "line": 332,
        "fullcodeline": "(void) WriteBlob(image,q-pixels,pixels);"
    },
    {
        "line": 346,
        "fullcodeline": "(void) WriteBlobString(image,\"255\\n\");"
    },
    {
        "line": 361,
        "fullcodeline": "p=GetVirtualPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 393,
        "fullcodeline": "*q++='\\n';"
    },
    {
        "line": 394,
        "fullcodeline": "(void) WriteBlob(image,q-pixels,pixels);"
    },
    {
        "line": 395,
        "fullcodeline": "q=pixels;"
    },
    {
        "line": 406,
        "fullcodeline": "*q++='\\n';"
    },
    {
        "line": 407,
        "fullcodeline": "(void) WriteBlob(image,q-pixels,pixels);"
    },
    {
        "line": 423,
        "fullcodeline": "ThrowWriterException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 432,
        "fullcodeline": "p=GetVirtualPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 435,
        "fullcodeline": "extent=ExportQuantumPixels(image,(CacheView *) NULL,quantum_info,"
    },
    {
        "line": 437,
        "fullcodeline": "count=WriteBlob(image,extent,pixels);"
    },
    {
        "line": 460,
        "fullcodeline": "image->depth=32;"
    },
    {
        "line": 466,
        "fullcodeline": "ThrowWriterException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 479,
        "fullcodeline": "p=GetVirtualPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 482,
        "fullcodeline": "q=pixels;"
    },
    {
        "line": 556,
        "fullcodeline": "count=WriteBlob(image,extent,pixels);"
    },
    {
        "line": 580,
        "fullcodeline": "image->depth=32;"
    },
    {
        "line": 586,
        "fullcodeline": "ThrowWriterException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 598,
        "fullcodeline": "p=GetVirtualPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 601,
        "fullcodeline": "q=pixels;"
    },
    {
        "line": 658,
        "fullcodeline": "count=WriteBlob(image,extent,pixels);"
    },
    {
        "line": 681,
        "fullcodeline": "image->depth=32;"
    },
    {
        "line": 684,
        "fullcodeline": "ThrowWriterException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 695,
        "fullcodeline": "p=GetVirtualPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 698,
        "fullcodeline": "q=pixels;"
    },
    {
        "line": 907,
        "fullcodeline": "count=WriteBlob(image,extent,pixels);"
    },
    {
        "line": 933,
        "fullcodeline": "ThrowWriterException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 936,
        "fullcodeline": "ThrowWriterException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 943,
        "fullcodeline": "p=GetVirtualPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 946,
        "fullcodeline": "extent=ExportQuantumPixels(image,(CacheView *) NULL,quantum_info,"
    },
    {
        "line": 948,
        "fullcodeline": "(void) WriteBlob(image,extent,pixels);"
    },
    {
        "line": 109,
        "fullcodeline": "if (image_info->compression == NoCompression)"
    },
    {
        "line": 111,
        "fullcodeline": "if (SetImageMonochrome(image,exception) != MagickFalse)"
    },
    {
        "line": 144,
        "fullcodeline": "(void) WriteBlobByte(image,'#');"
    },
    {
        "line": 172,
        "fullcodeline": "packet_size=4;"
    },
    {
        "line": 173,
        "fullcodeline": "(void) CopyMagickString(type,\"CMYK\",MagickPathExtent);"
    },
    {
        "line": 179,
        "fullcodeline": "packet_size=1;"
    },
    {
        "line": 180,
        "fullcodeline": "(void) CopyMagickString(type,\"GRAYSCALE\",MagickPathExtent);"
    },
    {
        "line": 187,
        "fullcodeline": "quantum_type=RGBQuantum;"
    },
    {
        "line": 190,
        "fullcodeline": "packet_size=3;"
    },
    {
        "line": 191,
        "fullcodeline": "(void) CopyMagickString(type,\"RGB\",MagickPathExtent);"
    },
    {
        "line": 204,
        "fullcodeline": "((MagickOffsetType) GetQuantumRange(image->depth)));"
    },
    {
        "line": 234,
        "fullcodeline": "if (p == (const Quantum *) NULL)"
    },
    {
        "line": 236,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 252,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 292,
        "fullcodeline": "if (p == (const Quantum *) NULL)"
    },
    {
        "line": 294,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 321,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 362,
        "fullcodeline": "if (p == (const Quantum *) NULL)"
    },
    {
        "line": 364,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 396,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 433,
        "fullcodeline": "if (p == (const Quantum *) NULL)"
    },
    {
        "line": 438,
        "fullcodeline": "if (count != (ssize_t) extent)"
    },
    {
        "line": 440,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 462,
        "fullcodeline": "((MagickOffsetType) GetQuantumRange(image->depth)));"
    },
    {
        "line": 480,
        "fullcodeline": "if (p == (const Quantum *) NULL)"
    },
    {
        "line": 557,
        "fullcodeline": "if (count != (ssize_t) extent)"
    },
    {
        "line": 559,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 582,
        "fullcodeline": "((MagickOffsetType) GetQuantumRange(image->depth)));"
    },
    {
        "line": 599,
        "fullcodeline": "if (p == (const Quantum *) NULL)"
    },
    {
        "line": 659,
        "fullcodeline": "if (count != (ssize_t) extent)"
    },
    {
        "line": 661,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 696,
        "fullcodeline": "if (p == (const Quantum *) NULL)"
    },
    {
        "line": 908,
        "fullcodeline": "if (count != (ssize_t) extent)"
    },
    {
        "line": 910,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 944,
        "fullcodeline": "if (p == (const Quantum *) NULL)"
    },
    {
        "line": 949,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 110,
        "fullcodeline": "format='2';"
    },
    {
        "line": 113,
        "fullcodeline": "format='4';"
    },
    {
        "line": 181,
        "fullcodeline": "if (IdentifyImageMonochrome(image,exception) != MagickFalse)"
    },
    {
        "line": 188,
        "fullcodeline": "if (image->alpha_trait != UndefinedPixelTrait)"
    },
    {
        "line": 238,
        "fullcodeline": "*q++=(unsigned char) (GetPixelLuma(image,p) >= (QuantumRange/2.0) ?"
    },
    {
        "line": 240,
        "fullcodeline": "*q++=' ';"
    },
    {
        "line": 247,
        "fullcodeline": "p+=GetPixelChannels(image);"
    },
    {
        "line": 254,
        "fullcodeline": "status=SetImageProgress(image,SaveImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 278,
        "fullcodeline": "if (image->depth <= 16)"
    },
    {
        "line": 296,
        "fullcodeline": "index=ClampToQuantum(GetPixelLuma(image,p));"
    },
    {
        "line": 307,
        "fullcodeline": "extent=(size_t) count;"
    },
    {
        "line": 308,
        "fullcodeline": "(void) strncpy((char *) q,buffer,extent);"
    },
    {
        "line": 309,
        "fullcodeline": "q+=extent;"
    },
    {
        "line": 316,
        "fullcodeline": "p+=GetPixelChannels(image);"
    },
    {
        "line": 323,
        "fullcodeline": "status=SetImageProgress(image,SaveImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 348,
        "fullcodeline": "if (image->depth <= 16)"
    },
    {
        "line": 382,
        "fullcodeline": "extent=(size_t) count;"
    },
    {
        "line": 383,
        "fullcodeline": "(void) strncpy((char *) q,buffer,extent);"
    },
    {
        "line": 384,
        "fullcodeline": "q+=extent;"
    },
    {
        "line": 391,
        "fullcodeline": "p+=GetPixelChannels(image);"
    },
    {
        "line": 398,
        "fullcodeline": "status=SetImageProgress(image,SaveImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 442,
        "fullcodeline": "status=SetImageProgress(image,SaveImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 561,
        "fullcodeline": "status=SetImageProgress(image,SaveImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 663,
        "fullcodeline": "status=SetImageProgress(image,SaveImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 912,
        "fullcodeline": "status=SetImageProgress(image,SaveImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 951,
        "fullcodeline": "status=SetImageProgress(image,SaveImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 114,
        "fullcodeline": "if (image_info->compression == NoCompression)"
    },
    {
        "line": 182,
        "fullcodeline": "(void) CopyMagickString(type,\"BLACKANDWHITE\",MagickPathExtent);"
    },
    {
        "line": 189,
        "fullcodeline": "quantum_type=RGBAQuantum;"
    },
    {
        "line": 241,
        "fullcodeline": "if ((q-pixels+1) >= (ssize_t) sizeof(pixels))"
    },
    {
        "line": 256,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 279,
        "fullcodeline": "(void) WriteBlobString(image,\"65535\\n\");"
    },
    {
        "line": 297,
        "fullcodeline": "if (image->depth <= 8)"
    },
    {
        "line": 310,
        "fullcodeline": "if ((q-pixels+extent+2) >= sizeof(pixels))"
    },
    {
        "line": 325,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 349,
        "fullcodeline": "(void) WriteBlobString(image,\"65535\\n\");"
    },
    {
        "line": 366,
        "fullcodeline": "if (image->depth <= 8)"
    },
    {
        "line": 385,
        "fullcodeline": "if ((q-pixels+extent+2) >= sizeof(pixels))"
    },
    {
        "line": 400,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 444,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 489,
        "fullcodeline": "extent=ExportQuantumPixels(image,(CacheView *) NULL,quantum_info,"
    },
    {
        "line": 552,
        "fullcodeline": "extent=(size_t) (q-pixels);"
    },
    {
        "line": 563,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 608,
        "fullcodeline": "extent=ExportQuantumPixels(image,(CacheView *) NULL,quantum_info,"
    },
    {
        "line": 654,
        "fullcodeline": "extent=(size_t) (q-pixels);"
    },
    {
        "line": 665,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 705,
        "fullcodeline": "extent=ExportQuantumPixels(image,(CacheView *) NULL,quantum_info,"
    },
    {
        "line": 903,
        "fullcodeline": "extent=(size_t) (q-pixels);"
    },
    {
        "line": 914,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 953,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 115,
        "fullcodeline": "format='1';"
    },
    {
        "line": 243,
        "fullcodeline": "*q++='\\n';"
    },
    {
        "line": 244,
        "fullcodeline": "(void) WriteBlob(image,q-pixels,pixels);"
    },
    {
        "line": 245,
        "fullcodeline": "q=pixels;"
    },
    {
        "line": 281,
        "fullcodeline": "(void) WriteBlobString(image,\"4294967295\\n\");"
    },
    {
        "line": 298,
        "fullcodeline": "count=(ssize_t) FormatLocaleString(buffer,MagickPathExtent,\"%u \","
    },
    {
        "line": 312,
        "fullcodeline": "*q++='\\n';"
    },
    {
        "line": 313,
        "fullcodeline": "(void) WriteBlob(image,q-pixels,pixels);"
    },
    {
        "line": 314,
        "fullcodeline": "q=pixels;"
    },
    {
        "line": 351,
        "fullcodeline": "(void) WriteBlobString(image,\"4294967295\\n\");"
    },
    {
        "line": 367,
        "fullcodeline": "count=(ssize_t) FormatLocaleString(buffer,MagickPathExtent,"
    },
    {
        "line": 387,
        "fullcodeline": "*q++='\\n';"
    },
    {
        "line": 388,
        "fullcodeline": "(void) WriteBlob(image,q-pixels,pixels);"
    },
    {
        "line": 389,
        "fullcodeline": "q=pixels;"
    },
    {
        "line": 495,
        "fullcodeline": "if (image->depth <= 8)"
    },
    {
        "line": 516,
        "fullcodeline": "if (image->depth <= 16)"
    },
    {
        "line": 537,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 614,
        "fullcodeline": "if (image->depth <= 8)"
    },
    {
        "line": 629,
        "fullcodeline": "if (image->depth <= 16)"
    },
    {
        "line": 644,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 513,
        "fullcodeline": "extent=(size_t) (q-pixels);"
    },
    {
        "line": 534,
        "fullcodeline": "extent=(size_t) (q-pixels);"
    },
    {
        "line": 549,
        "fullcodeline": "q=PopLongPixel(MSBEndian,(unsigned int) pixel,q);"
    },
    {
        "line": 550,
        "fullcodeline": "p+=GetPixelChannels(image);"
    },
    {
        "line": 626,
        "fullcodeline": "extent=(size_t) (q-pixels);"
    },
    {
        "line": 641,
        "fullcodeline": "extent=(size_t) (q-pixels);"
    },
    {
        "line": 646,
        "fullcodeline": "pixel=ScaleQuantumToAny(GetPixelRed(image,p),max_value);"
    },
    {
        "line": 647,
        "fullcodeline": "q=PopLongPixel(MSBEndian,(unsigned int) pixel,q);"
    },
    {
        "line": 648,
        "fullcodeline": "pixel=ScaleQuantumToAny(GetPixelGreen(image,p),max_value);"
    },
    {
        "line": 649,
        "fullcodeline": "q=PopLongPixel(MSBEndian,(unsigned int) pixel,q);"
    },
    {
        "line": 650,
        "fullcodeline": "pixel=ScaleQuantumToAny(GetPixelBlue(image,p),max_value);"
    },
    {
        "line": 651,
        "fullcodeline": "q=PopLongPixel(MSBEndian,(unsigned int) pixel,q);"
    },
    {
        "line": 652,
        "fullcodeline": "p+=GetPixelChannels(image);"
    },
    {
        "line": 301,
        "fullcodeline": "if (image->depth <= 16)"
    },
    {
        "line": 372,
        "fullcodeline": "if (image->depth <= 16)"
    },
    {
        "line": 497,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 518,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 539,
        "fullcodeline": "if (IsPixelGray(image,p) == MagickFalse)"
    },
    {
        "line": 616,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 631,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 299,
        "fullcodeline": "ScaleQuantumToChar(index));"
    },
    {
        "line": 302,
        "fullcodeline": "count=(ssize_t) FormatLocaleString(buffer,MagickPathExtent,"
    },
    {
        "line": 368,
        "fullcodeline": "\"%u %u %u \",ScaleQuantumToChar(GetPixelRed(image,p)),"
    },
    {
        "line": 369,
        "fullcodeline": "ScaleQuantumToChar(GetPixelGreen(image,p)),"
    },
    {
        "line": 370,
        "fullcodeline": "ScaleQuantumToChar(GetPixelBlue(image,p)));"
    },
    {
        "line": 373,
        "fullcodeline": "count=(ssize_t) FormatLocaleString(buffer,MagickPathExtent,"
    },
    {
        "line": 510,
        "fullcodeline": "q=PopCharPixel((unsigned char) pixel,q);"
    },
    {
        "line": 511,
        "fullcodeline": "p+=GetPixelChannels(image);"
    },
    {
        "line": 531,
        "fullcodeline": "q=PopShortPixel(MSBEndian,(unsigned short) pixel,q);"
    },
    {
        "line": 532,
        "fullcodeline": "p+=GetPixelChannels(image);"
    },
    {
        "line": 540,
        "fullcodeline": "pixel=ScaleQuantumToAny(ClampToQuantum(GetPixelLuma(image,p)),"
    },
    {
        "line": 618,
        "fullcodeline": "pixel=ScaleQuantumToAny(GetPixelRed(image,p),max_value);"
    },
    {
        "line": 619,
        "fullcodeline": "q=PopCharPixel((unsigned char) pixel,q);"
    },
    {
        "line": 620,
        "fullcodeline": "pixel=ScaleQuantumToAny(GetPixelGreen(image,p),max_value);"
    },
    {
        "line": 621,
        "fullcodeline": "q=PopCharPixel((unsigned char) pixel,q);"
    },
    {
        "line": 622,
        "fullcodeline": "pixel=ScaleQuantumToAny(GetPixelBlue(image,p),max_value);"
    },
    {
        "line": 623,
        "fullcodeline": "q=PopCharPixel((unsigned char) pixel,q);"
    },
    {
        "line": 624,
        "fullcodeline": "p+=GetPixelChannels(image);"
    },
    {
        "line": 633,
        "fullcodeline": "pixel=ScaleQuantumToAny(GetPixelRed(image,p),max_value);"
    },
    {
        "line": 634,
        "fullcodeline": "q=PopShortPixel(MSBEndian,(unsigned short) pixel,q);"
    },
    {
        "line": 635,
        "fullcodeline": "pixel=ScaleQuantumToAny(GetPixelGreen(image,p),max_value);"
    },
    {
        "line": 636,
        "fullcodeline": "q=PopShortPixel(MSBEndian,(unsigned short) pixel,q);"
    },
    {
        "line": 637,
        "fullcodeline": "pixel=ScaleQuantumToAny(GetPixelBlue(image,p),max_value);"
    },
    {
        "line": 638,
        "fullcodeline": "q=PopShortPixel(MSBEndian,(unsigned short) pixel,q);"
    },
    {
        "line": 639,
        "fullcodeline": "p+=GetPixelChannels(image);"
    },
    {
        "line": 716,
        "fullcodeline": "if (image->depth <= 8)"
    },
    {
        "line": 733,
        "fullcodeline": "if (image->depth <= 16)"
    },
    {
        "line": 750,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 768,
        "fullcodeline": "if (image->depth <= 8)"
    },
    {
        "line": 793,
        "fullcodeline": "if (image->depth <= 16)"
    },
    {
        "line": 818,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 840,
        "fullcodeline": "if (image->depth <= 8)"
    },
    {
        "line": 862,
        "fullcodeline": "if (image->depth <= 16)"
    },
    {
        "line": 884,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 305,
        "fullcodeline": "count=(ssize_t) FormatLocaleString(buffer,MagickPathExtent,"
    },
    {
        "line": 378,
        "fullcodeline": "count=(ssize_t) FormatLocaleString(buffer,MagickPathExtent,"
    },
    {
        "line": 499,
        "fullcodeline": "if (IsPixelGray(image,p) == MagickFalse)"
    },
    {
        "line": 520,
        "fullcodeline": "if (IsPixelGray(image,p) == MagickFalse)"
    },
    {
        "line": 752,
        "fullcodeline": "pixel=ScaleQuantumToAny(ClampToQuantum(GetPixelLuma(image,"
    },
    {
        "line": 754,
        "fullcodeline": "q=PopLongPixel(MSBEndian,(unsigned int) pixel,q);"
    },
    {
        "line": 761,
        "fullcodeline": "p+=GetPixelChannels(image);"
    },
    {
        "line": 820,
        "fullcodeline": "pixel=ScaleQuantumToAny(GetPixelRed(image,p),max_value);"
    },
    {
        "line": 821,
        "fullcodeline": "q=PopLongPixel(MSBEndian,(unsigned int) pixel,q);"
    },
    {
        "line": 822,
        "fullcodeline": "pixel=ScaleQuantumToAny(GetPixelGreen(image,p),max_value);"
    },
    {
        "line": 823,
        "fullcodeline": "q=PopLongPixel(MSBEndian,(unsigned int) pixel,q);"
    },
    {
        "line": 824,
        "fullcodeline": "pixel=ScaleQuantumToAny(GetPixelBlue(image,p),max_value);"
    },
    {
        "line": 825,
        "fullcodeline": "q=PopLongPixel(MSBEndian,(unsigned int) pixel,q);"
    },
    {
        "line": 826,
        "fullcodeline": "pixel=ScaleQuantumToAny(GetPixelBlack(image,p),max_value);"
    },
    {
        "line": 827,
        "fullcodeline": "q=PopLongPixel(MSBEndian,(unsigned int) pixel,q);"
    },
    {
        "line": 834,
        "fullcodeline": "p+=GetPixelChannels(image);"
    },
    {
        "line": 886,
        "fullcodeline": "pixel=ScaleQuantumToAny(GetPixelRed(image,p),max_value);"
    },
    {
        "line": 887,
        "fullcodeline": "q=PopLongPixel(MSBEndian,(unsigned int) pixel,q);"
    },
    {
        "line": 888,
        "fullcodeline": "pixel=ScaleQuantumToAny(GetPixelGreen(image,p),max_value);"
    },
    {
        "line": 889,
        "fullcodeline": "q=PopLongPixel(MSBEndian,(unsigned int) pixel,q);"
    },
    {
        "line": 890,
        "fullcodeline": "pixel=ScaleQuantumToAny(GetPixelBlue(image,p),max_value);"
    },
    {
        "line": 891,
        "fullcodeline": "q=PopLongPixel(MSBEndian,(unsigned int) pixel,q);"
    },
    {
        "line": 898,
        "fullcodeline": "p+=GetPixelChannels(image);"
    },
    {
        "line": 500,
        "fullcodeline": "pixel=ScaleQuantumToAny(ClampToQuantum(GetPixelLuma("
    },
    {
        "line": 521,
        "fullcodeline": "pixel=ScaleQuantumToAny(ClampToQuantum(GetPixelLuma(image,"
    },
    {
        "line": 544,
        "fullcodeline": "if (image->depth == 16)"
    },
    {
        "line": 718,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 735,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 755,
        "fullcodeline": "if (image->alpha_trait != UndefinedPixelTrait)"
    },
    {
        "line": 770,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 795,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 828,
        "fullcodeline": "if (image->alpha_trait != UndefinedPixelTrait)"
    },
    {
        "line": 842,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 864,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 892,
        "fullcodeline": "if (image->alpha_trait != UndefinedPixelTrait)"
    },
    {
        "line": 303,
        "fullcodeline": "\"%u \",ScaleQuantumToShort(index));"
    },
    {
        "line": 374,
        "fullcodeline": "\"%u %u %u \",ScaleQuantumToShort(GetPixelRed(image,p)),"
    },
    {
        "line": 375,
        "fullcodeline": "ScaleQuantumToShort(GetPixelGreen(image,p)),"
    },
    {
        "line": 376,
        "fullcodeline": "ScaleQuantumToShort(GetPixelBlue(image,p)));"
    },
    {
        "line": 545,
        "fullcodeline": "pixel=ScaleQuantumToLong(GetPixelRed(image,p));"
    },
    {
        "line": 720,
        "fullcodeline": "pixel=ScaleQuantumToAny(ClampToQuantum(GetPixelLuma("
    },
    {
        "line": 722,
        "fullcodeline": "q=PopCharPixel((unsigned char) pixel,q);"
    },
    {
        "line": 729,
        "fullcodeline": "p+=GetPixelChannels(image);"
    },
    {
        "line": 737,
        "fullcodeline": "pixel=ScaleQuantumToAny(ClampToQuantum(GetPixelLuma("
    },
    {
        "line": 739,
        "fullcodeline": "q=PopShortPixel(MSBEndian,(unsigned short) pixel,q);"
    },
    {
        "line": 746,
        "fullcodeline": "p+=GetPixelChannels(image);"
    },
    {
        "line": 757,
        "fullcodeline": "pixel=(unsigned char) ScaleQuantumToAny("
    },
    {
        "line": 759,
        "fullcodeline": "q=PopLongPixel(MSBEndian,(unsigned int) pixel,q);"
    },
    {
        "line": 772,
        "fullcodeline": "pixel=ScaleQuantumToAny(GetPixelRed(image,p),max_value);"
    },
    {
        "line": 773,
        "fullcodeline": "q=PopCharPixel((unsigned char) pixel,q);"
    },
    {
        "line": 774,
        "fullcodeline": "pixel=ScaleQuantumToAny(GetPixelGreen(image,p),"
    },
    {
        "line": 776,
        "fullcodeline": "q=PopCharPixel((unsigned char) pixel,q);"
    },
    {
        "line": 777,
        "fullcodeline": "pixel=ScaleQuantumToAny(GetPixelBlue(image,p),"
    },
    {
        "line": 779,
        "fullcodeline": "q=PopCharPixel((unsigned char) pixel,q);"
    },
    {
        "line": 780,
        "fullcodeline": "pixel=ScaleQuantumToAny(GetPixelBlack(image,p),"
    },
    {
        "line": 782,
        "fullcodeline": "q=PopCharPixel((unsigned char) pixel,q);"
    },
    {
        "line": 789,
        "fullcodeline": "p+=GetPixelChannels(image);"
    },
    {
        "line": 797,
        "fullcodeline": "pixel=ScaleQuantumToAny(GetPixelRed(image,p),max_value);"
    },
    {
        "line": 798,
        "fullcodeline": "q=PopShortPixel(MSBEndian,(unsigned short) pixel,q);"
    },
    {
        "line": 799,
        "fullcodeline": "pixel=ScaleQuantumToAny(GetPixelGreen(image,p),"
    },
    {
        "line": 801,
        "fullcodeline": "q=PopShortPixel(MSBEndian,(unsigned short) pixel,q);"
    },
    {
        "line": 802,
        "fullcodeline": "pixel=ScaleQuantumToAny(GetPixelBlue(image,p),"
    },
    {
        "line": 804,
        "fullcodeline": "q=PopShortPixel(MSBEndian,(unsigned short) pixel,q);"
    },
    {
        "line": 805,
        "fullcodeline": "pixel=ScaleQuantumToAny(GetPixelBlack(image,p),"
    },
    {
        "line": 807,
        "fullcodeline": "q=PopShortPixel(MSBEndian,(unsigned short) pixel,q);"
    },
    {
        "line": 814,
        "fullcodeline": "p+=GetPixelChannels(image);"
    },
    {
        "line": 830,
        "fullcodeline": "pixel=ScaleQuantumToAny(GetPixelAlpha(image,p),"
    },
    {
        "line": 832,
        "fullcodeline": "q=PopLongPixel(MSBEndian,(unsigned int) pixel,q);"
    },
    {
        "line": 844,
        "fullcodeline": "pixel=ScaleQuantumToAny(GetPixelRed(image,p),max_value);"
    },
    {
        "line": 845,
        "fullcodeline": "q=PopCharPixel((unsigned char) pixel,q);"
    },
    {
        "line": 846,
        "fullcodeline": "pixel=ScaleQuantumToAny(GetPixelGreen(image,p),"
    },
    {
        "line": 848,
        "fullcodeline": "q=PopCharPixel((unsigned char) pixel,q);"
    },
    {
        "line": 849,
        "fullcodeline": "pixel=ScaleQuantumToAny(GetPixelBlue(image,p),"
    },
    {
        "line": 851,
        "fullcodeline": "q=PopCharPixel((unsigned char) pixel,q);"
    },
    {
        "line": 858,
        "fullcodeline": "p+=GetPixelChannels(image);"
    },
    {
        "line": 866,
        "fullcodeline": "pixel=ScaleQuantumToAny(GetPixelRed(image,p),max_value);"
    },
    {
        "line": 867,
        "fullcodeline": "q=PopShortPixel(MSBEndian,(unsigned short) pixel,q);"
    },
    {
        "line": 868,
        "fullcodeline": "pixel=ScaleQuantumToAny(GetPixelGreen(image,p),"
    },
    {
        "line": 870,
        "fullcodeline": "q=PopShortPixel(MSBEndian,(unsigned short) pixel,q);"
    },
    {
        "line": 871,
        "fullcodeline": "pixel=ScaleQuantumToAny(GetPixelBlue(image,p),"
    },
    {
        "line": 873,
        "fullcodeline": "q=PopShortPixel(MSBEndian,(unsigned short) pixel,q);"
    },
    {
        "line": 880,
        "fullcodeline": "p+=GetPixelChannels(image);"
    },
    {
        "line": 894,
        "fullcodeline": "pixel=ScaleQuantumToAny(GetPixelAlpha(image,p),"
    },
    {
        "line": 896,
        "fullcodeline": "q=PopLongPixel(MSBEndian,(unsigned int) pixel,q);"
    },
    {
        "line": 306,
        "fullcodeline": "\"%u \",ScaleQuantumToLong(index));"
    },
    {
        "line": 379,
        "fullcodeline": "\"%u %u %u \",ScaleQuantumToLong(GetPixelRed(image,p)),"
    },
    {
        "line": 380,
        "fullcodeline": "ScaleQuantumToLong(GetPixelGreen(image,p)),"
    },
    {
        "line": 381,
        "fullcodeline": "ScaleQuantumToLong(GetPixelBlue(image,p)));"
    },
    {
        "line": 504,
        "fullcodeline": "if (image->depth == 8)"
    },
    {
        "line": 525,
        "fullcodeline": "if (image->depth == 16)"
    },
    {
        "line": 547,
        "fullcodeline": "pixel=ScaleQuantumToAny(GetPixelRed(image,p),max_value);"
    },
    {
        "line": 723,
        "fullcodeline": "if (image->alpha_trait != UndefinedPixelTrait)"
    },
    {
        "line": 740,
        "fullcodeline": "if (image->alpha_trait != UndefinedPixelTrait)"
    },
    {
        "line": 783,
        "fullcodeline": "if (image->alpha_trait != UndefinedPixelTrait)"
    },
    {
        "line": 808,
        "fullcodeline": "if (image->alpha_trait != UndefinedPixelTrait)"
    },
    {
        "line": 852,
        "fullcodeline": "if (image->alpha_trait != UndefinedPixelTrait)"
    },
    {
        "line": 874,
        "fullcodeline": "if (image->alpha_trait != UndefinedPixelTrait)"
    },
    {
        "line": 505,
        "fullcodeline": "pixel=ScaleQuantumToChar(GetPixelRed(image,p));"
    },
    {
        "line": 526,
        "fullcodeline": "pixel=ScaleQuantumToShort(GetPixelRed(image,p));"
    },
    {
        "line": 725,
        "fullcodeline": "pixel=(unsigned char) ScaleQuantumToAny("
    },
    {
        "line": 727,
        "fullcodeline": "q=PopCharPixel((unsigned char) pixel,q);"
    },
    {
        "line": 742,
        "fullcodeline": "pixel=(unsigned char) ScaleQuantumToAny("
    },
    {
        "line": 744,
        "fullcodeline": "q=PopShortPixel(MSBEndian,(unsigned short) pixel,q);"
    },
    {
        "line": 785,
        "fullcodeline": "pixel=ScaleQuantumToAny(GetPixelAlpha(image,p),"
    },
    {
        "line": 787,
        "fullcodeline": "q=PopCharPixel((unsigned char) pixel,q);"
    },
    {
        "line": 810,
        "fullcodeline": "pixel=ScaleQuantumToAny(GetPixelAlpha(image,p),"
    },
    {
        "line": 812,
        "fullcodeline": "q=PopShortPixel(MSBEndian,(unsigned short) pixel,q);"
    },
    {
        "line": 854,
        "fullcodeline": "pixel=ScaleQuantumToAny(GetPixelAlpha(image,p),"
    },
    {
        "line": 856,
        "fullcodeline": "q=PopCharPixel((unsigned char) pixel,q);"
    },
    {
        "line": 876,
        "fullcodeline": "pixel=ScaleQuantumToAny(GetPixelAlpha(image,p),"
    },
    {
        "line": 878,
        "fullcodeline": "q=PopShortPixel(MSBEndian,(unsigned short) pixel,q);"
    },
    {
        "line": 507,
        "fullcodeline": "pixel=ScaleQuantumToAny(GetPixelRed(image,p),"
    },
    {
        "line": 528,
        "fullcodeline": "pixel=ScaleQuantumToAny(GetPixelRed(image,p),"
    },
    {
        "line": 758,
        "fullcodeline": "GetPixelAlpha(image,p),max_value);"
    },
    {
        "line": 726,
        "fullcodeline": "GetPixelAlpha(image,p),max_value);"
    },
    {
        "line": 743,
        "fullcodeline": "GetPixelAlpha(image,p),max_value);"
    }
]