[
    {
        "line": 17,
        "fullcodeline": "PJ_UNUSED_ARG(newconn);"
    },
    {
        "line": 31,
        "fullcodeline": "status = pj_ssl_sock_create(ssock_parent->pool,"
    },
    {
        "line": 37,
        "fullcodeline": "ssock->sock = newsock;"
    },
    {
        "line": 38,
        "fullcodeline": "ssock->parent = ssock_parent;"
    },
    {
        "line": 39,
        "fullcodeline": "ssock->is_server = PJ_TRUE;"
    },
    {
        "line": 48,
        "fullcodeline": "ssock->addr_len = src_addr_len;"
    },
    {
        "line": 49,
        "fullcodeline": "pj_sockaddr_cp(&ssock->local_addr, &ssock_parent->local_addr);"
    },
    {
        "line": 52,
        "fullcodeline": "pj_sockaddr_cp(&ssock->rem_addr, src_addr);"
    },
    {
        "line": 55,
        "fullcodeline": "status = ssl_create(ssock);"
    },
    {
        "line": 60,
        "fullcodeline": "ssock->asock_rbuf = (void**)pj_pool_calloc(ssock->pool,"
    },
    {
        "line": 98,
        "fullcodeline": "status = pj_sock_apply_qos2(ssock->sock, ssock->param.qos_type,"
    },
    {
        "line": 113,
        "fullcodeline": "pj_activesock_cfg_default(&asock_cfg);"
    },
    {
        "line": 114,
        "fullcodeline": "asock_cfg.async_cnt = ssock->param.async_cnt;"
    },
    {
        "line": 116,
        "fullcodeline": "asock_cfg.whole_data = PJ_TRUE;"
    },
    {
        "line": 118,
        "fullcodeline": "pj_bzero(&asock_cb, sizeof(asock_cb));"
    },
    {
        "line": 119,
        "fullcodeline": "asock_cb.on_data_read = asock_on_data_read;"
    },
    {
        "line": 120,
        "fullcodeline": "asock_cb.on_data_sent = asock_on_data_sent;"
    },
    {
        "line": 122,
        "fullcodeline": "status = pj_activesock_create(ssock->pool,"
    },
    {
        "line": 135,
        "fullcodeline": "status = pj_activesock_start_read2(ssock->asock, ssock->pool,"
    },
    {
        "line": 144,
        "fullcodeline": "status = get_localaddr(ssock, &ssock->local_addr, &ssock->addr_len);"
    },
    {
        "line": 153,
        "fullcodeline": "pj_assert(ssock->send_buf.max_len == 0);"
    },
    {
        "line": 154,
        "fullcodeline": "ssock->send_buf.buf = (char*)"
    },
    {
        "line": 160,
        "fullcodeline": "ssock->send_buf.max_len = ssock->param.send_buffer_size;"
    },
    {
        "line": 161,
        "fullcodeline": "ssock->send_buf.start = ssock->send_buf.buf;"
    },
    {
        "line": 162,
        "fullcodeline": "ssock->send_buf.len = 0;"
    },
    {
        "line": 181,
        "fullcodeline": "ssock->ssl_state = SSL_STATE_HANDSHAKING;"
    },
    {
        "line": 182,
        "fullcodeline": "ssl_set_state(ssock, PJ_TRUE);"
    },
    {
        "line": 183,
        "fullcodeline": "status = ssl_do_handshake(ssock);"
    },
    {
        "line": 20,
        "fullcodeline": "if (accept_status != PJ_SUCCESS) {"
    },
    {
        "line": 33,
        "fullcodeline": "if (status != PJ_SUCCESS)"
    },
    {
        "line": 56,
        "fullcodeline": "if (status != PJ_SUCCESS)"
    },
    {
        "line": 63,
        "fullcodeline": "if (!ssock->asock_rbuf)"
    },
    {
        "line": 66,
        "fullcodeline": "for (i = 0; i<ssock->param.async_cnt; ++i) {"
    },
    {
        "line": 101,
        "fullcodeline": "if (status != PJ_SUCCESS && !ssock->param.qos_ignore_error)"
    },
    {
        "line": 131,
        "fullcodeline": "if (status != PJ_SUCCESS)"
    },
    {
        "line": 139,
        "fullcodeline": "if (status != PJ_SUCCESS)"
    },
    {
        "line": 145,
        "fullcodeline": "if (status != PJ_SUCCESS) {"
    },
    {
        "line": 157,
        "fullcodeline": "if (!ssock->send_buf.buf)"
    },
    {
        "line": 165,
        "fullcodeline": "if (ssock->param.timer_heap && (ssock->param.timeout.sec != 0 ||"
    },
    {
        "line": 186,
        "fullcodeline": "if (ssock && status != PJ_EPENDING) {"
    },
    {
        "line": 41,
        "fullcodeline": "status = pj_ssl_sock_set_certificate(ssock, ssock->pool,"
    },
    {
        "line": 67,
        "fullcodeline": "ssock->asock_rbuf[i] = (void*) pj_pool_alloc("
    },
    {
        "line": 81,
        "fullcodeline": "status = pj_grp_lock_create(ssock->pool, NULL, &glock);"
    },
    {
        "line": 85,
        "fullcodeline": "pj_grp_lock_add_ref(glock);"
    },
    {
        "line": 86,
        "fullcodeline": "asock_cfg.grp_lock = ssock->param.grp_lock = glock;"
    },
    {
        "line": 87,
        "fullcodeline": "pj_grp_lock_add_handler(ssock->param.grp_lock, ssock->pool, ssock,"
    },
    {
        "line": 106,
        "fullcodeline": "status = pj_sock_setsockopt_params(ssock->sock,"
    },
    {
        "line": 149,
        "fullcodeline": "pj_sockaddr_cp(&ssock->local_addr, &ssock_parent->local_addr);"
    },
    {
        "line": 155,
        "fullcodeline": "pj_pool_alloc(ssock->pool,"
    },
    {
        "line": 168,
        "fullcodeline": "pj_assert(ssock->timer.id == TIMER_NONE);"
    },
    {
        "line": 169,
        "fullcodeline": "status = pj_timer_heap_schedule_w_grp_lock(ssock->param.timer_heap,"
    },
    {
        "line": 187,
        "fullcodeline": "on_handshake_complete(ssock, status);"
    },
    {
        "line": 43,
        "fullcodeline": "if (status != PJ_SUCCESS)"
    },
    {
        "line": 71,
        "fullcodeline": "if (!ssock->asock_rbuf[i])"
    },
    {
        "line": 82,
        "fullcodeline": "if (status != PJ_SUCCESS)"
    },
    {
        "line": 108,
        "fullcodeline": "if (status != PJ_SUCCESS && !ssock->param.sockopt_ignore_error)"
    },
    {
        "line": 166,
        "fullcodeline": "ssock->param.timeout.msec != 0))"
    },
    {
        "line": 174,
        "fullcodeline": "if (status != PJ_SUCCESS) {"
    },
    {
        "line": 22,
        "fullcodeline": "(*ssock_parent->param.cb.on_accept_complete2)(ssock_parent, NULL,"
    },
    {
        "line": 175,
        "fullcodeline": "ssock->timer.id = TIMER_NONE;"
    },
    {
        "line": 176,
        "fullcodeline": "status = PJ_SUCCESS;"
    }
]