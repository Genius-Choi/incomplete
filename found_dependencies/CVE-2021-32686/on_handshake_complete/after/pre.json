[
    {
        "line": 5,
        "fullcodeline": "if (ssock->timer.id == TIMER_HANDSHAKE_TIMEOUT) {"
    },
    {
        "line": 11,
        "fullcodeline": "if (status == PJ_SUCCESS)"
    },
    {
        "line": 6,
        "fullcodeline": "pj_timer_heap_cancel(ssock->param.timer_heap, &ssock->timer);"
    },
    {
        "line": 7,
        "fullcodeline": "ssock->timer.id = TIMER_NONE;"
    },
    {
        "line": 12,
        "fullcodeline": "ssl_update_certs_info(ssock);"
    },
    {
        "line": 16,
        "fullcodeline": "pj_bool_t ret = PJ_TRUE;"
    },
    {
        "line": 18,
        "fullcodeline": "if (status != PJ_SUCCESS) {"
    },
    {
        "line": 105,
        "fullcodeline": "if (ret == PJ_FALSE)"
    },
    {
        "line": 21,
        "fullcodeline": "char buf[PJ_INET6_ADDRSTRLEN+10];"
    },
    {
        "line": 23,
        "fullcodeline": "PJ_PERROR(3,(ssock->pool->obj_name, status,"
    },
    {
        "line": 87,
        "fullcodeline": "ret = (*ssock->param.cb.on_accept_complete2)"
    },
    {
        "line": 114,
        "fullcodeline": "if (status != PJ_SUCCESS) {"
    },
    {
        "line": 116,
        "fullcodeline": "ssl_reset_sock_state(ssock);"
    },
    {
        "line": 120,
        "fullcodeline": "ret = (*ssock->param.cb.on_connect_complete)(ssock, status);"
    },
    {
        "line": 29,
        "fullcodeline": "(*ssock->param.cb.on_accept_complete2)"
    },
    {
        "line": 37,
        "fullcodeline": "pj_grp_lock_dec_ref(ssock->parent->param.grp_lock);"
    },
    {
        "line": 38,
        "fullcodeline": "ssock->parent = NULL;"
    },
    {
        "line": 49,
        "fullcodeline": "pj_time_val interval = {0, PJ_SSL_SOCK_DELAYED_CLOSE_TIMEOUT};"
    },
    {
        "line": 52,
        "fullcodeline": "ssock->ssl_state = SSL_STATE_NULL;"
    },
    {
        "line": 53,
        "fullcodeline": "ssl_close_sockets(ssock);"
    },
    {
        "line": 59,
        "fullcodeline": "pj_time_val_normalize(&interval);"
    },
    {
        "line": 60,
        "fullcodeline": "status1 = pj_timer_heap_schedule_w_grp_lock("
    },
    {
        "line": 89,
        "fullcodeline": "pj_sockaddr_get_len((pj_sockaddr_t*)&ssock->rem_addr),"
    },
    {
        "line": 121,
        "fullcodeline": "if (ret == PJ_FALSE)"
    },
    {
        "line": 25,
        "fullcodeline": "pj_sockaddr_print(&ssock->rem_addr, buf,"
    },
    {
        "line": 31,
        "fullcodeline": "pj_sockaddr_get_len((pj_sockaddr_t*)&ssock->rem_addr),"
    },
    {
        "line": 55,
        "fullcodeline": "if (ssock->timer.id != TIMER_NONE) {"
    },
    {
        "line": 66,
        "fullcodeline": "if (status1 != PJ_SUCCESS) {"
    },
    {
        "line": 74,
        "fullcodeline": "pj_ssl_sock_close(ssock);"
    },
    {
        "line": 92,
        "fullcodeline": "ret = (*ssock->param.cb.on_accept_complete)"
    },
    {
        "line": 56,
        "fullcodeline": "pj_timer_heap_cancel(ssock->param.timer_heap,"
    },
    {
        "line": 67,
        "fullcodeline": "PJ_PERROR(3,(ssock->pool->obj_name, status,"
    },
    {
        "line": 70,
        "fullcodeline": "ssock->timer.id = TIMER_NONE;"
    },
    {
        "line": 71,
        "fullcodeline": "pj_ssl_sock_close(ssock);"
    },
    {
        "line": 94,
        "fullcodeline": "pj_sockaddr_get_len((pj_sockaddr_t*)&ssock->rem_addr));"
    }
]