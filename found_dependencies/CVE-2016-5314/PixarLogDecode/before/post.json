[
    {
        "line": 3,
        "fullcodeline": "static const char module[] = \"PixarLogDecode\";"
    },
    {
        "line": 4,
        "fullcodeline": "TIFFDirectory *td = &tif->tif_dir;"
    },
    {
        "line": 5,
        "fullcodeline": "PixarLogState* sp = DecoderState(tif);"
    },
    {
        "line": 31,
        "fullcodeline": "llen = sp->stride * td->td_imagewidth;"
    },
    {
        "line": 33,
        "fullcodeline": "(void) s;"
    },
    {
        "line": 34,
        "fullcodeline": "assert(sp != NULL);"
    },
    {
        "line": 35,
        "fullcodeline": "sp->stream.next_out = (unsigned char *) sp->tbuf;"
    },
    {
        "line": 36,
        "fullcodeline": "assert(sizeof(sp->stream.avail_out)==4);  /* if this assert gets raised,"
    },
    {
        "line": 40,
        "fullcodeline": "sp->stream.avail_out = (uInt) (nsamples * sizeof(uint16));"
    },
    {
        "line": 74,
        "fullcodeline": "up = sp->tbuf;"
    },
    {
        "line": 41,
        "fullcodeline": "if (sp->stream.avail_out != nsamples * sizeof(uint16))"
    },
    {
        "line": 64,
        "fullcodeline": "} while (sp->stream.avail_out > 0);"
    },
    {
        "line": 67,
        "fullcodeline": "if (sp->stream.avail_out != 0) {"
    },
    {
        "line": 76,
        "fullcodeline": "if (tif->tif_flags & TIFF_SWAB)"
    },
    {
        "line": 84,
        "fullcodeline": "if (nsamples % llen) {"
    },
    {
        "line": 91,
        "fullcodeline": "for (i = 0; i < nsamples; i += llen, up += llen) {"
    },
    {
        "line": 13,
        "fullcodeline": "nsamples = occ / sizeof(float);\t/* XXX float == 32 bits */"
    },
    {
        "line": 18,
        "fullcodeline": "nsamples = occ / sizeof(uint16); /* XXX uint16 == 16 bits */"
    },
    {
        "line": 22,
        "fullcodeline": "nsamples = occ;"
    },
    {
        "line": 25,
        "fullcodeline": "TIFFErrorExt(tif->tif_clientdata, module,"
    },
    {
        "line": 43,
        "fullcodeline": "TIFFErrorExt(tif->tif_clientdata, module, \"ZLib cannot deal with buffers this size\");"
    },
    {
        "line": 47,
        "fullcodeline": "int state = inflate(&sp->stream, Z_PARTIAL_FLUSH);"
    },
    {
        "line": 77,
        "fullcodeline": "TIFFSwabArrayOfShort(up, nsamples);"
    },
    {
        "line": 85,
        "fullcodeline": "TIFFWarningExt(tif->tif_clientdata, module,"
    },
    {
        "line": 88,
        "fullcodeline": "nsamples -= nsamples % llen;"
    },
    {
        "line": 48,
        "fullcodeline": "if (state == Z_STREAM_END) {"
    },
    {
        "line": 51,
        "fullcodeline": "if (state == Z_DATA_ERROR) {"
    },
    {
        "line": 59,
        "fullcodeline": "if (state != Z_OK) {"
    },
    {
        "line": 87,
        "fullcodeline": "\"%lu, data truncated.\", (unsigned long) llen, (unsigned long) nsamples);"
    },
    {
        "line": 52,
        "fullcodeline": "TIFFErrorExt(tif->tif_clientdata, module,"
    },
    {
        "line": 60,
        "fullcodeline": "TIFFErrorExt(tif->tif_clientdata, module, \"ZLib error: %s\","
    },
    {
        "line": 94,
        "fullcodeline": "horizontalAccumulateF(up, llen, sp->stride,"
    },
    {
        "line": 96,
        "fullcodeline": "op += llen * sizeof(float);"
    },
    {
        "line": 99,
        "fullcodeline": "horizontalAccumulate16(up, llen, sp->stride,"
    },
    {
        "line": 101,
        "fullcodeline": "op += llen * sizeof(uint16);"
    },
    {
        "line": 104,
        "fullcodeline": "horizontalAccumulate12(up, llen, sp->stride,"
    },
    {
        "line": 106,
        "fullcodeline": "op += llen * sizeof(int16);"
    },
    {
        "line": 109,
        "fullcodeline": "horizontalAccumulate11(up, llen, sp->stride,"
    },
    {
        "line": 111,
        "fullcodeline": "op += llen * sizeof(uint16);"
    },
    {
        "line": 114,
        "fullcodeline": "horizontalAccumulate8(up, llen, sp->stride,"
    },
    {
        "line": 116,
        "fullcodeline": "op += llen * sizeof(unsigned char);"
    },
    {
        "line": 119,
        "fullcodeline": "horizontalAccumulate8abgr(up, llen, sp->stride,"
    },
    {
        "line": 121,
        "fullcodeline": "op += llen * sizeof(unsigned char);"
    },
    {
        "line": 124,
        "fullcodeline": "TIFFErrorExt(tif->tif_clientdata, module,"
    },
    {
        "line": 54,
        "fullcodeline": "(unsigned long) tif->tif_row, sp->stream.msg ? sp->stream.msg : \"(null)\");"
    },
    {
        "line": 55,
        "fullcodeline": "if (inflateSync(&sp->stream) != Z_OK)"
    },
    {
        "line": 61,
        "fullcodeline": "sp->stream.msg ? sp->stream.msg : \"(null)\");"
    },
    {
        "line": 95,
        "fullcodeline": "(float *)op, sp->ToLinearF);"
    },
    {
        "line": 100,
        "fullcodeline": "(uint16 *)op, sp->ToLinear16);"
    },
    {
        "line": 105,
        "fullcodeline": "(int16 *)op, sp->ToLinearF);"
    },
    {
        "line": 110,
        "fullcodeline": "(uint16 *)op);"
    },
    {
        "line": 115,
        "fullcodeline": "(unsigned char *)op, sp->ToLinear8);"
    },
    {
        "line": 120,
        "fullcodeline": "(unsigned char *)op, sp->ToLinear8);"
    }
]