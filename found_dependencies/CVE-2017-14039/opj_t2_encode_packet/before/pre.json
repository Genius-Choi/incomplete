[
    {
        "line": 13,
        "fullcodeline": "OPJ_BYTE* c = dest;"
    },
    {
        "line": 15,
        "fullcodeline": "OPJ_UINT32 compno = pi->compno;     /* component value */"
    },
    {
        "line": 16,
        "fullcodeline": "OPJ_UINT32 resno  = pi->resno;      /* resolution level value */"
    },
    {
        "line": 17,
        "fullcodeline": "OPJ_UINT32 precno = pi->precno;     /* precinct value */"
    },
    {
        "line": 18,
        "fullcodeline": "OPJ_UINT32 layno  = pi->layno;      /* quality layer value */"
    },
    {
        "line": 20,
        "fullcodeline": "opj_tcd_band_t *band = 00;"
    },
    {
        "line": 21,
        "fullcodeline": "opj_tcd_cblk_enc_t* cblk = 00;"
    },
    {
        "line": 22,
        "fullcodeline": "opj_tcd_pass_t *pass = 00;"
    },
    {
        "line": 24,
        "fullcodeline": "opj_tcd_tilecomp_t *tilec = &tile->comps[compno];"
    },
    {
        "line": 25,
        "fullcodeline": "opj_tcd_resolution_t *res = &tilec->resolutions[resno];"
    },
    {
        "line": 27,
        "fullcodeline": "opj_bio_t *bio = 00;    /* BIO component */"
    },
    {
        "line": 28,
        "fullcodeline": "OPJ_BOOL packet_empty = OPJ_TRUE;"
    },
    {
        "line": 73,
        "fullcodeline": "bio = opj_bio_create();"
    },
    {
        "line": 78,
        "fullcodeline": "opj_bio_init_enc(bio, c, length);"
    },
    {
        "line": 82,
        "fullcodeline": "band = res->bands;"
    },
    {
        "line": 108,
        "fullcodeline": "opj_bio_write(bio, packet_empty ? 0 : 1, 1);           /* Empty header bit */"
    },
    {
        "line": 112,
        "fullcodeline": "band = res->bands;"
    },
    {
        "line": 212,
        "fullcodeline": "l_nb_bytes = (OPJ_UINT32)opj_bio_numbytes(bio);"
    },
    {
        "line": 213,
        "fullcodeline": "c += l_nb_bytes;"
    },
    {
        "line": 214,
        "fullcodeline": "length -= l_nb_bytes;"
    },
    {
        "line": 237,
        "fullcodeline": "band = res->bands;"
    },
    {
        "line": 31,
        "fullcodeline": "if (tcp->csty & J2K_CP_CSTY_SOP) {"
    },
    {
        "line": 48,
        "fullcodeline": "if (!layno) {"
    },
    {
        "line": 74,
        "fullcodeline": "if (!bio) {"
    },
    {
        "line": 83,
        "fullcodeline": "for (bandno = 0; bandno < res->numbands; ++bandno, ++band) {"
    },
    {
        "line": 113,
        "fullcodeline": "for (bandno = 0; !packet_empty &&"
    },
    {
        "line": 219,
        "fullcodeline": "if (tcp->csty & J2K_CP_CSTY_EPH) {"
    },
    {
        "line": 230,
        "fullcodeline": "if (cstr_info && cstr_info->index_write) {"
    },
    {
        "line": 287,
        "fullcodeline": "assert(c >= dest);"
    },
    {
        "line": 288,
        "fullcodeline": "* p_data_written += (OPJ_UINT32)(c - dest);"
    },
    {
        "line": 32,
        "fullcodeline": "c[0] = 255;"
    },
    {
        "line": 33,
        "fullcodeline": "c[1] = 145;"
    },
    {
        "line": 34,
        "fullcodeline": "c[2] = 0;"
    },
    {
        "line": 35,
        "fullcodeline": "c[3] = 4;"
    },
    {
        "line": 40,
        "fullcodeline": "c[4] = (tile->packno >> 8) & 0xff; /* packno is uint32_t */"
    },
    {
        "line": 41,
        "fullcodeline": "c[5] = tile->packno & 0xff;"
    },
    {
        "line": 43,
        "fullcodeline": "c += 6;"
    },
    {
        "line": 44,
        "fullcodeline": "length -= 6;"
    },
    {
        "line": 49,
        "fullcodeline": "band = res->bands;"
    },
    {
        "line": 90,
        "fullcodeline": "prc = &band->precincts[precno];"
    },
    {
        "line": 91,
        "fullcodeline": "l_nb_blocks = prc->cw * prc->ch;"
    },
    {
        "line": 92,
        "fullcodeline": "cblk = prc->cblks.enc;"
    },
    {
        "line": 114,
        "fullcodeline": "bandno < res->numbands; ++bandno, ++band)      {"
    },
    {
        "line": 122,
        "fullcodeline": "prc = &band->precincts[precno];"
    },
    {
        "line": 123,
        "fullcodeline": "l_nb_blocks = prc->cw * prc->ch;"
    },
    {
        "line": 124,
        "fullcodeline": "cblk = prc->cblks.enc;"
    },
    {
        "line": 136,
        "fullcodeline": "cblk = prc->cblks.enc;"
    },
    {
        "line": 207,
        "fullcodeline": "if (!opj_bio_flush(bio)) {"
    },
    {
        "line": 220,
        "fullcodeline": "c[0] = 255;"
    },
    {
        "line": 221,
        "fullcodeline": "c[1] = 146;"
    },
    {
        "line": 222,
        "fullcodeline": "c += 2;"
    },
    {
        "line": 223,
        "fullcodeline": "length -= 2;"
    },
    {
        "line": 238,
        "fullcodeline": "for (bandno = 0; !packet_empty && bandno < res->numbands; bandno++, ++band) {"
    },
    {
        "line": 246,
        "fullcodeline": "prc = &band->precincts[precno];"
    },
    {
        "line": 247,
        "fullcodeline": "l_nb_blocks = prc->cw * prc->ch;"
    },
    {
        "line": 248,
        "fullcodeline": "cblk = prc->cblks.enc;"
    },
    {
        "line": 51,
        "fullcodeline": "for (bandno = 0; bandno < res->numbands; ++bandno, ++band) {"
    },
    {
        "line": 86,
        "fullcodeline": "if (opj_tcd_is_band_empty(band)) {"
    },
    {
        "line": 93,
        "fullcodeline": "for (cblkno = 0; cblkno < l_nb_blocks; cblkno++, ++cblk) {"
    },
    {
        "line": 118,
        "fullcodeline": "if (opj_tcd_is_band_empty(band)) {"
    },
    {
        "line": 126,
        "fullcodeline": "for (cblkno = 0; cblkno < l_nb_blocks; ++cblkno) {"
    },
    {
        "line": 137,
        "fullcodeline": "for (cblkno = 0; cblkno < l_nb_blocks; cblkno++) {"
    },
    {
        "line": 232,
        "fullcodeline": "info_PK->end_ph_pos = (OPJ_INT32)(c - dest);"
    },
    {
        "line": 242,
        "fullcodeline": "if (opj_tcd_is_band_empty(band)) {"
    },
    {
        "line": 250,
        "fullcodeline": "for (cblkno = 0; cblkno < l_nb_blocks; ++cblkno) {"
    },
    {
        "line": 59,
        "fullcodeline": "prc = &band->precincts[precno];"
    },
    {
        "line": 60,
        "fullcodeline": "opj_tgt_reset(prc->incltree);"
    },
    {
        "line": 61,
        "fullcodeline": "opj_tgt_reset(prc->imsbtree);"
    },
    {
        "line": 63,
        "fullcodeline": "l_nb_blocks = prc->cw * prc->ch;"
    },
    {
        "line": 94,
        "fullcodeline": "opj_tcd_layer_t *layer = &cblk->layers[layno];"
    },
    {
        "line": 100,
        "fullcodeline": "packet_empty = OPJ_FALSE;"
    },
    {
        "line": 127,
        "fullcodeline": "opj_tcd_layer_t *layer = &cblk->layers[layno];"
    },
    {
        "line": 133,
        "fullcodeline": "++cblk;"
    },
    {
        "line": 138,
        "fullcodeline": "opj_tcd_layer_t *layer = &cblk->layers[layno];"
    },
    {
        "line": 139,
        "fullcodeline": "OPJ_UINT32 increment = 0;"
    },
    {
        "line": 140,
        "fullcodeline": "OPJ_UINT32 nump = 0;"
    },
    {
        "line": 141,
        "fullcodeline": "OPJ_UINT32 len = 0, passno;"
    },
    {
        "line": 164,
        "fullcodeline": "opj_t2_putnumpasses(bio, layer->numpasses);"
    },
    {
        "line": 165,
        "fullcodeline": "l_nb_passes = cblk->numpasses + layer->numpasses;"
    },
    {
        "line": 166,
        "fullcodeline": "pass = cblk->passes +  cblk->numpasses;"
    },
    {
        "line": 183,
        "fullcodeline": "opj_t2_putcommacode(bio, (OPJ_INT32)increment);"
    },
    {
        "line": 186,
        "fullcodeline": "cblk->numlenbits += increment;"
    },
    {
        "line": 188,
        "fullcodeline": "pass = cblk->passes +  cblk->numpasses;"
    },
    {
        "line": 203,
        "fullcodeline": "++cblk;"
    },
    {
        "line": 251,
        "fullcodeline": "opj_tcd_layer_t *layer = &cblk->layers[layno];"
    },
    {
        "line": 268,
        "fullcodeline": "memcpy(c, layer->data, layer->len);"
    },
    {
        "line": 269,
        "fullcodeline": "cblk->numpasses += layer->numpasses;"
    },
    {
        "line": 270,
        "fullcodeline": "c += layer->len;"
    },
    {
        "line": 271,
        "fullcodeline": "length -= layer->len;"
    },
    {
        "line": 282,
        "fullcodeline": "++cblk;"
    },
    {
        "line": 55,
        "fullcodeline": "if (opj_tcd_is_band_empty(band)) {"
    },
    {
        "line": 64,
        "fullcodeline": "for (cblkno = 0; cblkno < l_nb_blocks; ++cblkno) {"
    },
    {
        "line": 97,
        "fullcodeline": "if (!layer->numpasses) {"
    },
    {
        "line": 129,
        "fullcodeline": "if (!cblk->numpasses && layer->numpasses) {"
    },
    {
        "line": 145,
        "fullcodeline": "if (!cblk->numpasses) {"
    },
    {
        "line": 152,
        "fullcodeline": "if (!layer->numpasses) {"
    },
    {
        "line": 158,
        "fullcodeline": "if (!cblk->numpasses) {"
    },
    {
        "line": 169,
        "fullcodeline": "for (passno = cblk->numpasses; passno < l_nb_passes; ++passno) {"
    },
    {
        "line": 190,
        "fullcodeline": "for (passno = cblk->numpasses; passno < l_nb_passes; ++passno) {"
    },
    {
        "line": 253,
        "fullcodeline": "if (!layer->numpasses) {"
    },
    {
        "line": 258,
        "fullcodeline": "if (layer->len > length) {"
    },
    {
        "line": 274,
        "fullcodeline": "if (cstr_info && cstr_info->index_write) {"
    },
    {
        "line": 65,
        "fullcodeline": "cblk = &prc->cblks.enc[cblkno];"
    },
    {
        "line": 67,
        "fullcodeline": "cblk->numpasses = 0;"
    },
    {
        "line": 68,
        "fullcodeline": "opj_tgt_setvalue(prc->imsbtree, cblkno, band->numbps - (OPJ_INT32)cblk->numbps);"
    },
    {
        "line": 130,
        "fullcodeline": "opj_tgt_setvalue(prc->incltree, cblkno, (OPJ_INT32)layno);"
    },
    {
        "line": 146,
        "fullcodeline": "opj_tgt_encode(bio, prc->incltree, cblkno, (OPJ_INT32)(layno + 1));"
    },
    {
        "line": 153,
        "fullcodeline": "++cblk;"
    },
    {
        "line": 159,
        "fullcodeline": "cblk->numlenbits = 3;"
    },
    {
        "line": 160,
        "fullcodeline": "opj_tgt_encode(bio, prc->imsbtree, cblkno, 999);"
    },
    {
        "line": 170,
        "fullcodeline": "++nump;"
    },
    {
        "line": 171,
        "fullcodeline": "len += pass->len;"
    },
    {
        "line": 181,
        "fullcodeline": "++pass;"
    },
    {
        "line": 191,
        "fullcodeline": "nump++;"
    },
    {
        "line": 192,
        "fullcodeline": "len += pass->len;"
    },
    {
        "line": 200,
        "fullcodeline": "++pass;"
    },
    {
        "line": 254,
        "fullcodeline": "++cblk;"
    },
    {
        "line": 275,
        "fullcodeline": "opj_packet_info_t *info_PK = &cstr_info->tile[tileno].packet[cstr_info->packno];"
    },
    {
        "line": 276,
        "fullcodeline": "info_PK->disto += layer->disto;"
    },
    {
        "line": 148,
        "fullcodeline": "opj_bio_write(bio, layer->numpasses != 0, 1);"
    },
    {
        "line": 173,
        "fullcodeline": "if (pass->term || passno == (cblk->numpasses + layer->numpasses) - 1) {"
    },
    {
        "line": 194,
        "fullcodeline": "if (pass->term || passno == (cblk->numpasses + layer->numpasses) - 1) {"
    },
    {
        "line": 259,
        "fullcodeline": "if (p_t2_mode == FINAL_PASS) {"
    },
    {
        "line": 277,
        "fullcodeline": "if (cstr_info->D_max < info_PK->disto) {"
    },
    {
        "line": 174,
        "fullcodeline": "increment = (OPJ_UINT32)opj_int_max((OPJ_INT32)increment,"
    },
    {
        "line": 177,
        "fullcodeline": "len = 0;"
    },
    {
        "line": 178,
        "fullcodeline": "nump = 0;"
    },
    {
        "line": 195,
        "fullcodeline": "opj_bio_write(bio, (OPJ_UINT32)len,"
    },
    {
        "line": 197,
        "fullcodeline": "len = 0;"
    },
    {
        "line": 198,
        "fullcodeline": "nump = 0;"
    },
    {
        "line": 260,
        "fullcodeline": "opj_event_msg(p_manager, EVT_ERROR,"
    },
    {
        "line": 278,
        "fullcodeline": "cstr_info->D_max = info_PK->disto;"
    },
    {
        "line": 175,
        "fullcodeline": "opj_int_floorlog2((OPJ_INT32)len) + 1"
    },
    {
        "line": 196,
        "fullcodeline": "cblk->numlenbits + (OPJ_UINT32)opj_int_floorlog2((OPJ_INT32)nump));"
    },
    {
        "line": 176,
        "fullcodeline": "- ((OPJ_INT32)cblk->numlenbits + opj_int_floorlog2((OPJ_INT32)nump)));"
    }
]