[
    {
        "line": 3,
        "fullcodeline": "int ret = 1;"
    },
    {
        "line": 4,
        "fullcodeline": "int blocksize = 1 << rs->inode->i_blkbits;"
    },
    {
        "line": 7,
        "fullcodeline": "kfree(rs->buffer);"
    },
    {
        "line": 8,
        "fullcodeline": "rs->buffer = NULL;"
    },
    {
        "line": 10,
        "fullcodeline": "if ((unsigned)rs->cont_offset > blocksize - min_de_size ||"
    },
    {
        "line": 12,
        "fullcodeline": "(unsigned)(rs->cont_offset + rs->cont_size) > blocksize) {"
    },
    {
        "line": 16,
        "fullcodeline": "ret = -EIO;"
    },
    {
        "line": 23,
        "fullcodeline": "rs->buffer = kmalloc(rs->cont_size, GFP_KERNEL);"
    },
    {
        "line": 28,
        "fullcodeline": "ret = -EIO;"
    },
    {
        "line": 29,
        "fullcodeline": "bh = sb_bread(rs->inode->i_sb, rs->cont_extent);"
    },
    {
        "line": 11,
        "fullcodeline": "(unsigned)rs->cont_size > blocksize ||"
    },
    {
        "line": 24,
        "fullcodeline": "if (!rs->buffer) {"
    },
    {
        "line": 25,
        "fullcodeline": "ret = -ENOMEM;"
    },
    {
        "line": 31,
        "fullcodeline": "memcpy(rs->buffer, bh->b_data + rs->cont_offset,"
    },
    {
        "line": 33,
        "fullcodeline": "put_bh(bh);"
    },
    {
        "line": 34,
        "fullcodeline": "rs->chr = rs->buffer;"
    },
    {
        "line": 35,
        "fullcodeline": "rs->len = rs->cont_size;"
    },
    {
        "line": 36,
        "fullcodeline": "rs->cont_extent = 0;"
    },
    {
        "line": 37,
        "fullcodeline": "rs->cont_size = 0;"
    },
    {
        "line": 38,
        "fullcodeline": "rs->cont_offset = 0;"
    }
]