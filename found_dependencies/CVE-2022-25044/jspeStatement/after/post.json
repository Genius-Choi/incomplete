[
    {
        "line": 10,
        "fullcodeline": "if (lex->tk==LEX_ID ||"
    },
    {
        "line": 33,
        "fullcodeline": "lex->tk=='(') {"
    },
    {
        "line": 32,
        "fullcodeline": "lex->tk=='[' ||"
    },
    {
        "line": 35,
        "fullcodeline": "return jspeExpression();"
    },
    {
        "line": 31,
        "fullcodeline": "lex->tk=='~' ||"
    },
    {
        "line": 36,
        "fullcodeline": "} else if (lex->tk=='{') {"
    },
    {
        "line": 30,
        "fullcodeline": "lex->tk=='+' ||"
    },
    {
        "line": 39,
        "fullcodeline": "jspeBlock();"
    },
    {
        "line": 29,
        "fullcodeline": "lex->tk=='-' ||"
    },
    {
        "line": 38,
        "fullcodeline": "if (!jspCheckStackPosition()) return 0;"
    },
    {
        "line": 28,
        "fullcodeline": "lex->tk=='!' ||"
    },
    {
        "line": 41,
        "fullcodeline": "} else if (lex->tk==';') {"
    },
    {
        "line": 27,
        "fullcodeline": "lex->tk==LEX_MINUSMINUS ||"
    },
    {
        "line": 43,
        "fullcodeline": "JSP_ASSERT_MATCH(';');"
    },
    {
        "line": 26,
        "fullcodeline": "lex->tk==LEX_PLUSPLUS ||"
    },
    {
        "line": 25,
        "fullcodeline": "lex->tk==LEX_R_SUPER ||"
    },
    {
        "line": 45,
        "fullcodeline": "} else if (lex->tk==LEX_R_VAR ||"
    },
    {
        "line": 24,
        "fullcodeline": "lex->tk==LEX_R_VOID ||"
    },
    {
        "line": 47,
        "fullcodeline": "lex->tk==LEX_R_CONST) {"
    },
    {
        "line": 23,
        "fullcodeline": "lex->tk==LEX_R_TYPEOF ||"
    },
    {
        "line": 46,
        "fullcodeline": "lex->tk==LEX_R_LET ||"
    },
    {
        "line": 48,
        "fullcodeline": "return jspeStatementVar();"
    },
    {
        "line": 22,
        "fullcodeline": "lex->tk==LEX_R_DELETE ||"
    },
    {
        "line": 49,
        "fullcodeline": "} else if (lex->tk==LEX_R_IF) {"
    },
    {
        "line": 21,
        "fullcodeline": "lex->tk==LEX_R_THIS ||"
    },
    {
        "line": 20,
        "fullcodeline": "lex->tk==LEX_R_FALSE ||"
    },
    {
        "line": 50,
        "fullcodeline": "return jspeStatementIf();"
    },
    {
        "line": 19,
        "fullcodeline": "lex->tk==LEX_R_TRUE ||"
    },
    {
        "line": 51,
        "fullcodeline": "} else if (lex->tk==LEX_R_DO) {"
    },
    {
        "line": 18,
        "fullcodeline": "lex->tk==LEX_R_UNDEFINED ||"
    },
    {
        "line": 17,
        "fullcodeline": "lex->tk==LEX_R_NULL ||"
    },
    {
        "line": 52,
        "fullcodeline": "return jspeStatementDoOrWhile(false);"
    },
    {
        "line": 16,
        "fullcodeline": "lex->tk==LEX_R_NEW ||"
    },
    {
        "line": 53,
        "fullcodeline": "} else if (lex->tk==LEX_R_WHILE) {"
    },
    {
        "line": 15,
        "fullcodeline": "lex->tk==LEX_REGEX ||"
    },
    {
        "line": 14,
        "fullcodeline": "lex->tk==LEX_TEMPLATE_LITERAL ||"
    },
    {
        "line": 54,
        "fullcodeline": "return jspeStatementDoOrWhile(true);"
    },
    {
        "line": 13,
        "fullcodeline": "lex->tk==LEX_STR ||"
    },
    {
        "line": 55,
        "fullcodeline": "} else if (lex->tk==LEX_R_FOR) {"
    },
    {
        "line": 12,
        "fullcodeline": "lex->tk==LEX_FLOAT ||"
    },
    {
        "line": 11,
        "fullcodeline": "lex->tk==LEX_INT ||"
    },
    {
        "line": 56,
        "fullcodeline": "return jspeStatementFor();"
    },
    {
        "line": 57,
        "fullcodeline": "} else if (lex->tk==LEX_R_TRY) {"
    },
    {
        "line": 58,
        "fullcodeline": "return jspeStatementTry();"
    },
    {
        "line": 59,
        "fullcodeline": "} else if (lex->tk==LEX_R_RETURN) {"
    },
    {
        "line": 60,
        "fullcodeline": "return jspeStatementReturn();"
    },
    {
        "line": 61,
        "fullcodeline": "} else if (lex->tk==LEX_R_THROW) {"
    },
    {
        "line": 62,
        "fullcodeline": "return jspeStatementThrow();"
    },
    {
        "line": 63,
        "fullcodeline": "} else if (lex->tk==LEX_R_FUNCTION) {"
    },
    {
        "line": 64,
        "fullcodeline": "return jspeStatementFunctionDecl(false/* function */);"
    },
    {
        "line": 66,
        "fullcodeline": "} else if (lex->tk==LEX_R_CLASS) {"
    },
    {
        "line": 67,
        "fullcodeline": "return jspeStatementFunctionDecl(true/* class */);"
    },
    {
        "line": 69,
        "fullcodeline": "} else if (lex->tk==LEX_R_CONTINUE) {"
    },
    {
        "line": 70,
        "fullcodeline": "JSP_ASSERT_MATCH(LEX_R_CONTINUE);"
    },
    {
        "line": 77,
        "fullcodeline": "} else if (lex->tk==LEX_R_BREAK) {"
    },
    {
        "line": 72,
        "fullcodeline": "if (!(execInfo.execute & EXEC_IN_LOOP))"
    },
    {
        "line": 78,
        "fullcodeline": "JSP_ASSERT_MATCH(LEX_R_BREAK);"
    },
    {
        "line": 73,
        "fullcodeline": "jsExceptionHere(JSET_SYNTAXERROR, \"CONTINUE statement outside of FOR or WHILE loop\");"
    },
    {
        "line": 75,
        "fullcodeline": "execInfo.execute = (execInfo.execute & (JsExecFlags)~EXEC_RUN_MASK) | EXEC_CONTINUE;"
    },
    {
        "line": 85,
        "fullcodeline": "} else if (lex->tk==LEX_R_SWITCH) {"
    },
    {
        "line": 80,
        "fullcodeline": "if (!(execInfo.execute & (EXEC_IN_LOOP|EXEC_IN_SWITCH)))"
    },
    {
        "line": 81,
        "fullcodeline": "jsExceptionHere(JSET_SYNTAXERROR, \"BREAK statement outside of SWITCH, FOR or WHILE loop\");"
    },
    {
        "line": 86,
        "fullcodeline": "return jspeStatementSwitch();"
    },
    {
        "line": 83,
        "fullcodeline": "execInfo.execute = (execInfo.execute & (JsExecFlags)~EXEC_RUN_MASK) | EXEC_BREAK;"
    },
    {
        "line": 87,
        "fullcodeline": "} else if (lex->tk==LEX_R_DEBUGGER) {"
    },
    {
        "line": 88,
        "fullcodeline": "JSP_ASSERT_MATCH(LEX_R_DEBUGGER);"
    },
    {
        "line": 93,
        "fullcodeline": "} else JSP_MATCH(LEX_EOF);"
    }
]