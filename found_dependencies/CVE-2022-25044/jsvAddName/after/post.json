[
    {
        "line": 2,
        "fullcodeline": "namedChild = jsvRef(namedChild); // ref here VERY important as adding to structure!"
    },
    {
        "line": 3,
        "fullcodeline": "assert(jsvIsName(namedChild));"
    },
    {
        "line": 6,
        "fullcodeline": "if (jsvIsArray(parent) && jsvIsInt(namedChild)) {"
    },
    {
        "line": 13,
        "fullcodeline": "if (jsvGetLastChild(parent)) { // we have children already"
    },
    {
        "line": 14,
        "fullcodeline": "JsVar *insertAfter = jsvLock(jsvGetLastChild(parent));"
    },
    {
        "line": 8,
        "fullcodeline": "if (index >= jsvGetArrayLength(parent)) {"
    },
    {
        "line": 15,
        "fullcodeline": "if (jsvIsArray(parent)) {"
    },
    {
        "line": 50,
        "fullcodeline": "JsVarRef r = jsvGetRef(namedChild);"
    },
    {
        "line": 51,
        "fullcodeline": "jsvSetFirstChild(parent, r);"
    },
    {
        "line": 52,
        "fullcodeline": "jsvSetLastChild(parent, r);"
    },
    {
        "line": 9,
        "fullcodeline": "jsvSetArrayLength(parent, index + 1, false);"
    },
    {
        "line": 25,
        "fullcodeline": "assert(jsvIsName(insertAfter));"
    },
    {
        "line": 36,
        "fullcodeline": "jsvSetNextSibling(insertAfter, jsvGetRef(namedChild));"
    },
    {
        "line": 37,
        "fullcodeline": "jsvSetPrevSibling(namedChild, jsvGetRef(insertAfter));"
    },
    {
        "line": 38,
        "fullcodeline": "jsvUnLock(insertAfter);"
    },
    {
        "line": 17,
        "fullcodeline": "while (insertAfter && jsvCompareInteger(namedChild, insertAfter)<0) {"
    },
    {
        "line": 26,
        "fullcodeline": "if (jsvGetNextSibling(insertAfter)) {"
    },
    {
        "line": 41,
        "fullcodeline": "JsVar *firstChild = jsvLock(jsvGetFirstChild(parent));"
    },
    {
        "line": 42,
        "fullcodeline": "jsvSetPrevSibling(firstChild, jsvGetRef(namedChild));"
    },
    {
        "line": 43,
        "fullcodeline": "jsvUnLock(firstChild);"
    },
    {
        "line": 45,
        "fullcodeline": "jsvSetNextSibling(namedChild, jsvGetFirstChild(parent));"
    },
    {
        "line": 47,
        "fullcodeline": "jsvSetFirstChild(parent, jsvGetRef(namedChild));"
    },
    {
        "line": 18,
        "fullcodeline": "JsVarRef prev = jsvGetPrevSibling(insertAfter);"
    },
    {
        "line": 19,
        "fullcodeline": "jsvUnLock(insertAfter);"
    },
    {
        "line": 20,
        "fullcodeline": "insertAfter = jsvLockSafe(prev);"
    },
    {
        "line": 28,
        "fullcodeline": "JsVar *insertBefore = jsvLock(jsvGetNextSibling(insertAfter));"
    },
    {
        "line": 29,
        "fullcodeline": "jsvSetPrevSibling(insertBefore, jsvGetRef(namedChild));"
    },
    {
        "line": 30,
        "fullcodeline": "jsvSetNextSibling(namedChild, jsvGetRef(insertBefore));"
    },
    {
        "line": 31,
        "fullcodeline": "jsvUnLock(insertBefore);"
    },
    {
        "line": 34,
        "fullcodeline": "jsvSetLastChild(parent, jsvGetRef(namedChild));"
    }
]