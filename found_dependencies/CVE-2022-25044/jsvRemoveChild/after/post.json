[
    {
        "line": 2,
        "fullcodeline": "assert(jsvHasChildren(parent));"
    },
    {
        "line": 3,
        "fullcodeline": "assert(jsvIsName(child));"
    },
    {
        "line": 7,
        "fullcodeline": "JsVarRef childref = jsvGetRef(child);"
    },
    {
        "line": 8,
        "fullcodeline": "bool wasChild = false;"
    },
    {
        "line": 44,
        "fullcodeline": "jsvSetPrevSibling(child, 0);"
    },
    {
        "line": 45,
        "fullcodeline": "jsvSetNextSibling(child, 0);"
    },
    {
        "line": 10,
        "fullcodeline": "if (jsvGetFirstChild(parent) == childref) {"
    },
    {
        "line": 14,
        "fullcodeline": "if (jsvGetLastChild(parent) == childref) {"
    },
    {
        "line": 29,
        "fullcodeline": "if (jsvGetPrevSibling(child)) {"
    },
    {
        "line": 36,
        "fullcodeline": "if (jsvGetNextSibling(child)) {"
    },
    {
        "line": 11,
        "fullcodeline": "jsvSetFirstChild(parent, jsvGetNextSibling(child));"
    },
    {
        "line": 12,
        "fullcodeline": "wasChild = true;"
    },
    {
        "line": 15,
        "fullcodeline": "jsvSetLastChild(parent, jsvGetPrevSibling(child));"
    },
    {
        "line": 16,
        "fullcodeline": "wasChild = true;"
    },
    {
        "line": 30,
        "fullcodeline": "JsVar *v = jsvLock(jsvGetPrevSibling(child));"
    },
    {
        "line": 31,
        "fullcodeline": "assert(jsvGetNextSibling(v) == jsvGetRef(child));"
    },
    {
        "line": 32,
        "fullcodeline": "jsvSetNextSibling(v, jsvGetNextSibling(child));"
    },
    {
        "line": 33,
        "fullcodeline": "jsvUnLock(v);"
    },
    {
        "line": 34,
        "fullcodeline": "wasChild = true;"
    },
    {
        "line": 37,
        "fullcodeline": "JsVar *v = jsvLock(jsvGetNextSibling(child));"
    },
    {
        "line": 38,
        "fullcodeline": "assert(jsvGetPrevSibling(v) == jsvGetRef(child));"
    },
    {
        "line": 39,
        "fullcodeline": "jsvSetPrevSibling(v, jsvGetPrevSibling(child));"
    },
    {
        "line": 40,
        "fullcodeline": "jsvUnLock(v);"
    },
    {
        "line": 41,
        "fullcodeline": "wasChild = true;"
    },
    {
        "line": 47,
        "fullcodeline": "jsvUnRef(child);"
    },
    {
        "line": 19,
        "fullcodeline": "if (jsvIsArray(parent)) {"
    },
    {
        "line": 20,
        "fullcodeline": "JsVarInt l = 0;"
    },
    {
        "line": 25,
        "fullcodeline": "jsvSetArrayLength(parent, l, false);"
    },
    {
        "line": 22,
        "fullcodeline": "if (jsvGetLastChild(parent))"
    },
    {
        "line": 23,
        "fullcodeline": "l = jsvGetIntegerAndUnLock(jsvLock(jsvGetLastChild(parent)))+1;"
    }
]