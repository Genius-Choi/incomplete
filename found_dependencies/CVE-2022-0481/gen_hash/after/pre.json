[
    {
        "line": 3,
        "fullcodeline": "int slimit = GEN_VAL_STACK_MAX;"
    },
    {
        "line": 5,
        "fullcodeline": "int len = 0;"
    },
    {
        "line": 6,
        "fullcodeline": "mrb_bool update = FALSE;"
    },
    {
        "line": 4,
        "fullcodeline": "if (cursp() >= GEN_LIT_ARY_MAX) slimit = INT16_MAX;"
    },
    {
        "line": 35,
        "fullcodeline": "tree = tree->cdr;"
    },
    {
        "line": 9,
        "fullcodeline": "if (nint(tree->car->car->car) == NODE_KW_REST_ARGS) {"
    },
    {
        "line": 36,
        "fullcodeline": "if (val && cursp() >= slimit) {"
    },
    {
        "line": 51,
        "fullcodeline": "if (val && len > 0) {"
    },
    {
        "line": 56,
        "fullcodeline": "return -1;                  /* variable length */"
    },
    {
        "line": 21,
        "fullcodeline": "codegen(s, tree->car->cdr, val);"
    },
    {
        "line": 27,
        "fullcodeline": "update = TRUE;"
    },
    {
        "line": 28,
        "fullcodeline": "len = 0;"
    },
    {
        "line": 37,
        "fullcodeline": "pop_n(len*2);"
    },
    {
        "line": 45,
        "fullcodeline": "push();"
    },
    {
        "line": 46,
        "fullcodeline": "update = TRUE;"
    },
    {
        "line": 47,
        "fullcodeline": "len = 0;"
    },
    {
        "line": 52,
        "fullcodeline": "pop_n(len*2+1);"
    },
    {
        "line": 53,
        "fullcodeline": "genop_2(s, OP_HASHADD, cursp(), len);"
    },
    {
        "line": 54,
        "fullcodeline": "push();"
    },
    {
        "line": 10,
        "fullcodeline": "if (val && len > 0) {"
    },
    {
        "line": 22,
        "fullcodeline": "if (val && (len > 0 || update)) {"
    },
    {
        "line": 31,
        "fullcodeline": "codegen(s, tree->car->car, val);"
    },
    {
        "line": 32,
        "fullcodeline": "codegen(s, tree->car->cdr, val);"
    },
    {
        "line": 33,
        "fullcodeline": "len++;"
    },
    {
        "line": 38,
        "fullcodeline": "if (!update) {"
    },
    {
        "line": 11,
        "fullcodeline": "pop_n(len*2);"
    },
    {
        "line": 19,
        "fullcodeline": "push();"
    },
    {
        "line": 23,
        "fullcodeline": "pop(); pop();"
    },
    {
        "line": 24,
        "fullcodeline": "genop_1(s, OP_HASHCAT, cursp());"
    },
    {
        "line": 25,
        "fullcodeline": "push();"
    },
    {
        "line": 39,
        "fullcodeline": "genop_2(s, OP_HASH, cursp(), len);"
    },
    {
        "line": 12,
        "fullcodeline": "if (!update) {"
    },
    {
        "line": 42,
        "fullcodeline": "pop();"
    },
    {
        "line": 43,
        "fullcodeline": "genop_2(s, OP_HASHADD, cursp(), len);"
    },
    {
        "line": 13,
        "fullcodeline": "genop_2(s, OP_HASH, cursp(), len);"
    },
    {
        "line": 16,
        "fullcodeline": "pop();"
    },
    {
        "line": 17,
        "fullcodeline": "genop_2(s, OP_HASHADD, cursp(), len);"
    }
]