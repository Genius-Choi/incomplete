[
    {
        "line": 16,
        "fullcodeline": "pbody->challenge_present = 0;"
    },
    {
        "line": 17,
        "fullcodeline": "pbody->ssid_present = 0;"
    },
    {
        "line": 18,
        "fullcodeline": "pbody->rates_present = 0;"
    },
    {
        "line": 19,
        "fullcodeline": "pbody->ds_present = 0;"
    },
    {
        "line": 20,
        "fullcodeline": "pbody->cf_present = 0;"
    },
    {
        "line": 21,
        "fullcodeline": "pbody->tim_present = 0;"
    },
    {
        "line": 23,
        "fullcodeline": "while (length != 0) {"
    },
    {
        "line": 29,
        "fullcodeline": "elementlen = *(p + offset + 1);"
    },
    {
        "line": 25,
        "fullcodeline": "if (!ND_TTEST2(*(p + offset), 2))"
    },
    {
        "line": 27,
        "fullcodeline": "if (length < 2)"
    },
    {
        "line": 32,
        "fullcodeline": "if (!ND_TTEST2(*(p + offset + 2), elementlen))"
    },
    {
        "line": 34,
        "fullcodeline": "if (length < elementlen + 2)"
    },
    {
        "line": 39,
        "fullcodeline": "memcpy(&ssid, p + offset, 2);"
    },
    {
        "line": 40,
        "fullcodeline": "offset += 2;"
    },
    {
        "line": 41,
        "fullcodeline": "length -= 2;"
    },
    {
        "line": 53,
        "fullcodeline": "ssid.ssid[ssid.length] = '\\0';"
    },
    {
        "line": 67,
        "fullcodeline": "memcpy(&challenge, p + offset, 2);"
    },
    {
        "line": 68,
        "fullcodeline": "offset += 2;"
    },
    {
        "line": 69,
        "fullcodeline": "length -= 2;"
    },
    {
        "line": 83,
        "fullcodeline": "challenge.text[challenge.length] = '\\0';"
    },
    {
        "line": 97,
        "fullcodeline": "memcpy(&rates, p + offset, 2);"
    },
    {
        "line": 98,
        "fullcodeline": "offset += 2;"
    },
    {
        "line": 99,
        "fullcodeline": "length -= 2;"
    },
    {
        "line": 133,
        "fullcodeline": "memcpy(&ds, p + offset, 2);"
    },
    {
        "line": 134,
        "fullcodeline": "offset += 2;"
    },
    {
        "line": 135,
        "fullcodeline": "length -= 2;"
    },
    {
        "line": 141,
        "fullcodeline": "ds.channel = *(p + offset);"
    },
    {
        "line": 142,
        "fullcodeline": "offset += 1;"
    },
    {
        "line": 143,
        "fullcodeline": "length -= 1;"
    },
    {
        "line": 157,
        "fullcodeline": "memcpy(&cf, p + offset, 2);"
    },
    {
        "line": 158,
        "fullcodeline": "offset += 2;"
    },
    {
        "line": 159,
        "fullcodeline": "length -= 2;"
    },
    {
        "line": 165,
        "fullcodeline": "memcpy(&cf.count, p + offset, 6);"
    },
    {
        "line": 166,
        "fullcodeline": "offset += 6;"
    },
    {
        "line": 167,
        "fullcodeline": "length -= 6;"
    },
    {
        "line": 181,
        "fullcodeline": "memcpy(&tim, p + offset, 2);"
    },
    {
        "line": 182,
        "fullcodeline": "offset += 2;"
    },
    {
        "line": 183,
        "fullcodeline": "length -= 2;"
    },
    {
        "line": 191,
        "fullcodeline": "memcpy(&tim.count, p + offset, 3);"
    },
    {
        "line": 192,
        "fullcodeline": "offset += 3;"
    },
    {
        "line": 193,
        "fullcodeline": "length -= 3;"
    },
    {
        "line": 195,
        "fullcodeline": "memcpy(tim.bitmap, p + offset + 3, tim.length - 3);"
    },
    {
        "line": 196,
        "fullcodeline": "offset += tim.length - 3;"
    },
    {
        "line": 197,
        "fullcodeline": "length -= tim.length - 3;"
    },
    {
        "line": 215,
        "fullcodeline": "offset += 2 + elementlen;"
    },
    {
        "line": 216,
        "fullcodeline": "length -= 2 + elementlen;"
    },
    {
        "line": 42,
        "fullcodeline": "if (ssid.length != 0) {"
    },
    {
        "line": 61,
        "fullcodeline": "if (!pbody->ssid_present) {"
    },
    {
        "line": 70,
        "fullcodeline": "if (challenge.length != 0) {"
    },
    {
        "line": 91,
        "fullcodeline": "if (!pbody->challenge_present) {"
    },
    {
        "line": 100,
        "fullcodeline": "if (rates.length != 0) {"
    },
    {
        "line": 127,
        "fullcodeline": "if (!pbody->rates_present && rates.length != 0) {"
    },
    {
        "line": 136,
        "fullcodeline": "if (ds.length != 1) {"
    },
    {
        "line": 151,
        "fullcodeline": "if (!pbody->ds_present) {"
    },
    {
        "line": 160,
        "fullcodeline": "if (cf.length != 6) {"
    },
    {
        "line": 175,
        "fullcodeline": "if (!pbody->cf_present) {"
    },
    {
        "line": 184,
        "fullcodeline": "if (tim.length <= 3) {"
    },
    {
        "line": 189,
        "fullcodeline": "if (tim.length - 3 > (int)sizeof tim.bitmap)"
    },
    {
        "line": 205,
        "fullcodeline": "if (!pbody->tim_present) {"
    },
    {
        "line": 49,
        "fullcodeline": "memcpy(&ssid.ssid, p + offset, ssid.length);"
    },
    {
        "line": 50,
        "fullcodeline": "offset += ssid.length;"
    },
    {
        "line": 51,
        "fullcodeline": "length -= ssid.length;"
    },
    {
        "line": 62,
        "fullcodeline": "pbody->ssid = ssid;"
    },
    {
        "line": 63,
        "fullcodeline": "pbody->ssid_present = 1;"
    },
    {
        "line": 78,
        "fullcodeline": "memcpy(&challenge.text, p + offset,"
    },
    {
        "line": 80,
        "fullcodeline": "offset += challenge.length;"
    },
    {
        "line": 81,
        "fullcodeline": "length -= challenge.length;"
    },
    {
        "line": 92,
        "fullcodeline": "pbody->challenge = challenge;"
    },
    {
        "line": 93,
        "fullcodeline": "pbody->challenge_present = 1;"
    },
    {
        "line": 107,
        "fullcodeline": "memcpy(&rates.rate, p + offset, rates.length);"
    },
    {
        "line": 108,
        "fullcodeline": "offset += rates.length;"
    },
    {
        "line": 109,
        "fullcodeline": "length -= rates.length;"
    },
    {
        "line": 128,
        "fullcodeline": "pbody->rates = rates;"
    },
    {
        "line": 129,
        "fullcodeline": "pbody->rates_present = 1;"
    },
    {
        "line": 137,
        "fullcodeline": "offset += ds.length;"
    },
    {
        "line": 138,
        "fullcodeline": "length -= ds.length;"
    },
    {
        "line": 152,
        "fullcodeline": "pbody->ds = ds;"
    },
    {
        "line": 153,
        "fullcodeline": "pbody->ds_present = 1;"
    },
    {
        "line": 161,
        "fullcodeline": "offset += cf.length;"
    },
    {
        "line": 162,
        "fullcodeline": "length -= cf.length;"
    },
    {
        "line": 176,
        "fullcodeline": "pbody->cf = cf;"
    },
    {
        "line": 177,
        "fullcodeline": "pbody->cf_present = 1;"
    },
    {
        "line": 185,
        "fullcodeline": "offset += tim.length;"
    },
    {
        "line": 186,
        "fullcodeline": "length -= tim.length;"
    },
    {
        "line": 206,
        "fullcodeline": "pbody->tim = tim;"
    },
    {
        "line": 207,
        "fullcodeline": "pbody->tim_present = 1;"
    },
    {
        "line": 43,
        "fullcodeline": "if (ssid.length > sizeof(ssid.ssid) - 1)"
    },
    {
        "line": 45,
        "fullcodeline": "if (!ND_TTEST2(*(p + offset), ssid.length))"
    },
    {
        "line": 47,
        "fullcodeline": "if (length < ssid.length)"
    },
    {
        "line": 71,
        "fullcodeline": "if (challenge.length >"
    },
    {
        "line": 74,
        "fullcodeline": "if (!ND_TTEST2(*(p + offset), challenge.length))"
    },
    {
        "line": 76,
        "fullcodeline": "if (length < challenge.length)"
    },
    {
        "line": 101,
        "fullcodeline": "if (rates.length > sizeof rates.rate)"
    },
    {
        "line": 103,
        "fullcodeline": "if (!ND_TTEST2(*(p + offset), rates.length))"
    },
    {
        "line": 105,
        "fullcodeline": "if (length < rates.length)"
    },
    {
        "line": 72,
        "fullcodeline": "sizeof(challenge.text) - 1)"
    }
]