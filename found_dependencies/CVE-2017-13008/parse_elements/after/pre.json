[
    {
        "line": 16,
        "fullcodeline": "pbody->challenge_present = 0;"
    },
    {
        "line": 17,
        "fullcodeline": "pbody->ssid_present = 0;"
    },
    {
        "line": 18,
        "fullcodeline": "pbody->rates_present = 0;"
    },
    {
        "line": 19,
        "fullcodeline": "pbody->ds_present = 0;"
    },
    {
        "line": 20,
        "fullcodeline": "pbody->cf_present = 0;"
    },
    {
        "line": 21,
        "fullcodeline": "pbody->tim_present = 0;"
    },
    {
        "line": 23,
        "fullcodeline": "while (length != 0) {"
    },
    {
        "line": 29,
        "fullcodeline": "elementlen = *(p + offset + 1);"
    },
    {
        "line": 25,
        "fullcodeline": "if (!ND_TTEST2(*(p + offset), 2))"
    },
    {
        "line": 27,
        "fullcodeline": "if (length < 2)"
    },
    {
        "line": 32,
        "fullcodeline": "if (!ND_TTEST2(*(p + offset + 2), elementlen))"
    },
    {
        "line": 34,
        "fullcodeline": "if (length < elementlen + 2)"
    },
    {
        "line": 39,
        "fullcodeline": "memcpy(&ssid, p + offset, 2);"
    },
    {
        "line": 40,
        "fullcodeline": "offset += 2;"
    },
    {
        "line": 41,
        "fullcodeline": "length -= 2;"
    },
    {
        "line": 49,
        "fullcodeline": "ssid.ssid[ssid.length] = '\\0';"
    },
    {
        "line": 63,
        "fullcodeline": "memcpy(&challenge, p + offset, 2);"
    },
    {
        "line": 64,
        "fullcodeline": "offset += 2;"
    },
    {
        "line": 65,
        "fullcodeline": "length -= 2;"
    },
    {
        "line": 75,
        "fullcodeline": "challenge.text[challenge.length] = '\\0';"
    },
    {
        "line": 89,
        "fullcodeline": "memcpy(&rates, p + offset, 2);"
    },
    {
        "line": 90,
        "fullcodeline": "offset += 2;"
    },
    {
        "line": 91,
        "fullcodeline": "length -= 2;"
    },
    {
        "line": 121,
        "fullcodeline": "memcpy(&ds, p + offset, 2);"
    },
    {
        "line": 122,
        "fullcodeline": "offset += 2;"
    },
    {
        "line": 123,
        "fullcodeline": "length -= 2;"
    },
    {
        "line": 129,
        "fullcodeline": "ds.channel = *(p + offset);"
    },
    {
        "line": 130,
        "fullcodeline": "offset += 1;"
    },
    {
        "line": 131,
        "fullcodeline": "length -= 1;"
    },
    {
        "line": 145,
        "fullcodeline": "memcpy(&cf, p + offset, 2);"
    },
    {
        "line": 146,
        "fullcodeline": "offset += 2;"
    },
    {
        "line": 147,
        "fullcodeline": "length -= 2;"
    },
    {
        "line": 153,
        "fullcodeline": "memcpy(&cf.count, p + offset, 6);"
    },
    {
        "line": 154,
        "fullcodeline": "offset += 6;"
    },
    {
        "line": 155,
        "fullcodeline": "length -= 6;"
    },
    {
        "line": 169,
        "fullcodeline": "memcpy(&tim, p + offset, 2);"
    },
    {
        "line": 170,
        "fullcodeline": "offset += 2;"
    },
    {
        "line": 171,
        "fullcodeline": "length -= 2;"
    },
    {
        "line": 179,
        "fullcodeline": "memcpy(&tim.count, p + offset, 3);"
    },
    {
        "line": 180,
        "fullcodeline": "offset += 3;"
    },
    {
        "line": 181,
        "fullcodeline": "length -= 3;"
    },
    {
        "line": 183,
        "fullcodeline": "memcpy(tim.bitmap, p + offset, tim.length - 3);"
    },
    {
        "line": 184,
        "fullcodeline": "offset += tim.length - 3;"
    },
    {
        "line": 185,
        "fullcodeline": "length -= tim.length - 3;"
    },
    {
        "line": 203,
        "fullcodeline": "offset += 2 + elementlen;"
    },
    {
        "line": 204,
        "fullcodeline": "length -= 2 + elementlen;"
    },
    {
        "line": 42,
        "fullcodeline": "if (ssid.length != 0) {"
    },
    {
        "line": 57,
        "fullcodeline": "if (!pbody->ssid_present) {"
    },
    {
        "line": 66,
        "fullcodeline": "if (challenge.length != 0) {"
    },
    {
        "line": 83,
        "fullcodeline": "if (!pbody->challenge_present) {"
    },
    {
        "line": 92,
        "fullcodeline": "if (rates.length != 0) {"
    },
    {
        "line": 115,
        "fullcodeline": "if (!pbody->rates_present && rates.length != 0) {"
    },
    {
        "line": 124,
        "fullcodeline": "if (ds.length != 1) {"
    },
    {
        "line": 139,
        "fullcodeline": "if (!pbody->ds_present) {"
    },
    {
        "line": 148,
        "fullcodeline": "if (cf.length != 6) {"
    },
    {
        "line": 163,
        "fullcodeline": "if (!pbody->cf_present) {"
    },
    {
        "line": 172,
        "fullcodeline": "if (tim.length <= 3) {"
    },
    {
        "line": 177,
        "fullcodeline": "if (tim.length - 3 > (int)sizeof tim.bitmap)"
    },
    {
        "line": 193,
        "fullcodeline": "if (!pbody->tim_present) {"
    },
    {
        "line": 45,
        "fullcodeline": "memcpy(&ssid.ssid, p + offset, ssid.length);"
    },
    {
        "line": 46,
        "fullcodeline": "offset += ssid.length;"
    },
    {
        "line": 47,
        "fullcodeline": "length -= ssid.length;"
    },
    {
        "line": 58,
        "fullcodeline": "pbody->ssid = ssid;"
    },
    {
        "line": 59,
        "fullcodeline": "pbody->ssid_present = 1;"
    },
    {
        "line": 70,
        "fullcodeline": "memcpy(&challenge.text, p + offset,"
    },
    {
        "line": 72,
        "fullcodeline": "offset += challenge.length;"
    },
    {
        "line": 73,
        "fullcodeline": "length -= challenge.length;"
    },
    {
        "line": 84,
        "fullcodeline": "pbody->challenge = challenge;"
    },
    {
        "line": 85,
        "fullcodeline": "pbody->challenge_present = 1;"
    },
    {
        "line": 95,
        "fullcodeline": "memcpy(&rates.rate, p + offset, rates.length);"
    },
    {
        "line": 96,
        "fullcodeline": "offset += rates.length;"
    },
    {
        "line": 97,
        "fullcodeline": "length -= rates.length;"
    },
    {
        "line": 116,
        "fullcodeline": "pbody->rates = rates;"
    },
    {
        "line": 117,
        "fullcodeline": "pbody->rates_present = 1;"
    },
    {
        "line": 125,
        "fullcodeline": "offset += ds.length;"
    },
    {
        "line": 126,
        "fullcodeline": "length -= ds.length;"
    },
    {
        "line": 140,
        "fullcodeline": "pbody->ds = ds;"
    },
    {
        "line": 141,
        "fullcodeline": "pbody->ds_present = 1;"
    },
    {
        "line": 149,
        "fullcodeline": "offset += cf.length;"
    },
    {
        "line": 150,
        "fullcodeline": "length -= cf.length;"
    },
    {
        "line": 164,
        "fullcodeline": "pbody->cf = cf;"
    },
    {
        "line": 165,
        "fullcodeline": "pbody->cf_present = 1;"
    },
    {
        "line": 173,
        "fullcodeline": "offset += tim.length;"
    },
    {
        "line": 174,
        "fullcodeline": "length -= tim.length;"
    },
    {
        "line": 194,
        "fullcodeline": "pbody->tim = tim;"
    },
    {
        "line": 195,
        "fullcodeline": "pbody->tim_present = 1;"
    },
    {
        "line": 43,
        "fullcodeline": "if (ssid.length > sizeof(ssid.ssid) - 1)"
    },
    {
        "line": 67,
        "fullcodeline": "if (challenge.length >"
    },
    {
        "line": 93,
        "fullcodeline": "if (rates.length > sizeof rates.rate)"
    },
    {
        "line": 68,
        "fullcodeline": "sizeof(challenge.text) - 1)"
    }
]