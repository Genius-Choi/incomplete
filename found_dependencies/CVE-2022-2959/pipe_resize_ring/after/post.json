[
    {
        "line": 6,
        "fullcodeline": "bufs = kcalloc(nr_slots, sizeof(*bufs),"
    },
    {
        "line": 12,
        "fullcodeline": "mask = pipe->ring_size - 1;"
    },
    {
        "line": 13,
        "fullcodeline": "head = pipe->head;"
    },
    {
        "line": 14,
        "fullcodeline": "tail = pipe->tail;"
    },
    {
        "line": 16,
        "fullcodeline": "n = pipe_occupancy(head, tail);"
    },
    {
        "line": 43,
        "fullcodeline": "head = n;"
    },
    {
        "line": 44,
        "fullcodeline": "tail = 0;"
    },
    {
        "line": 46,
        "fullcodeline": "kfree(pipe->bufs);"
    },
    {
        "line": 47,
        "fullcodeline": "pipe->bufs = bufs;"
    },
    {
        "line": 48,
        "fullcodeline": "pipe->ring_size = nr_slots;"
    },
    {
        "line": 51,
        "fullcodeline": "pipe->tail = tail;"
    },
    {
        "line": 52,
        "fullcodeline": "pipe->head = head;"
    },
    {
        "line": 54,
        "fullcodeline": "spin_unlock_irq(&pipe->rd_wait.lock);"
    },
    {
        "line": 57,
        "fullcodeline": "wake_up_interruptible(&pipe->wr_wait);"
    },
    {
        "line": 8,
        "fullcodeline": "if (unlikely(!bufs))"
    },
    {
        "line": 17,
        "fullcodeline": "if (nr_slots < n) {"
    },
    {
        "line": 27,
        "fullcodeline": "if (n > 0) {"
    },
    {
        "line": 49,
        "fullcodeline": "if (pipe->max_usage > nr_slots)"
    },
    {
        "line": 7,
        "fullcodeline": "GFP_KERNEL_ACCOUNT | __GFP_NOWARN);"
    },
    {
        "line": 18,
        "fullcodeline": "spin_unlock_irq(&pipe->rd_wait.lock);"
    },
    {
        "line": 19,
        "fullcodeline": "kfree(bufs);"
    },
    {
        "line": 28,
        "fullcodeline": "unsigned int h = head & mask;"
    },
    {
        "line": 29,
        "fullcodeline": "unsigned int t = tail & mask;"
    },
    {
        "line": 50,
        "fullcodeline": "pipe->max_usage = nr_slots;"
    },
    {
        "line": 9,
        "fullcodeline": "return -ENOMEM;"
    },
    {
        "line": 20,
        "fullcodeline": "return -EBUSY;"
    },
    {
        "line": 30,
        "fullcodeline": "if (h > t) {"
    },
    {
        "line": 31,
        "fullcodeline": "memcpy(bufs, pipe->bufs + t,"
    },
    {
        "line": 32,
        "fullcodeline": "n * sizeof(struct pipe_buffer));"
    },
    {
        "line": 34,
        "fullcodeline": "unsigned int tsize = pipe->ring_size - t;"
    },
    {
        "line": 38,
        "fullcodeline": "memcpy(bufs, pipe->bufs + t,"
    },
    {
        "line": 35,
        "fullcodeline": "if (h > 0)"
    },
    {
        "line": 39,
        "fullcodeline": "tsize * sizeof(struct pipe_buffer));"
    },
    {
        "line": 36,
        "fullcodeline": "memcpy(bufs + tsize, pipe->bufs,"
    },
    {
        "line": 37,
        "fullcodeline": "h * sizeof(struct pipe_buffer));"
    }
]