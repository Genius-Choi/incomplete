[
    {
        "line": 8,
        "fullcodeline": "ret = NULL;"
    },
    {
        "line": 10,
        "fullcodeline": "ctx->pbelle_sip_messageParser_header_diversionTop = pbelle_sip_messageParser_header_diversionPush(ctx);"
    },
    {
        "line": 11,
        "fullcodeline": "(SCOPE_TOP(header_diversion))->current= belle_sip_header_diversion_new();"
    },
    {
        "line": 12,
        "fullcodeline": "ret= (SCOPE_TOP(header_diversion))->current;"
    },
    {
        "line": 94,
        "fullcodeline": "pbelle_sip_messageParser_header_diversionPop(ctx);"
    },
    {
        "line": 75,
        "fullcodeline": "if\t(HASEXCEPTION())"
    },
    {
        "line": 18,
        "fullcodeline": "FOLLOWPUSH(FOLLOW_diversion_token_in_header_diversion4920);"
    },
    {
        "line": 19,
        "fullcodeline": "diversion_token(ctx);"
    },
    {
        "line": 21,
        "fullcodeline": "FOLLOWPOP();"
    },
    {
        "line": 34,
        "fullcodeline": "FOLLOWPUSH(FOLLOW_sp_tab_colon_in_header_diversion4924);"
    },
    {
        "line": 35,
        "fullcodeline": "sp_tab_colon(ctx);"
    },
    {
        "line": 37,
        "fullcodeline": "FOLLOWPOP();"
    },
    {
        "line": 50,
        "fullcodeline": "FOLLOWPUSH(FOLLOW_diversion_spec_in_header_diversion4926);"
    },
    {
        "line": 51,
        "fullcodeline": "diversion_spec(ctx);"
    },
    {
        "line": 53,
        "fullcodeline": "FOLLOWPOP();"
    },
    {
        "line": 22,
        "fullcodeline": "if  (HASEXCEPTION())"
    },
    {
        "line": 26,
        "fullcodeline": "if (HASFAILED())"
    },
    {
        "line": 38,
        "fullcodeline": "if  (HASEXCEPTION())"
    },
    {
        "line": 42,
        "fullcodeline": "if (HASFAILED())"
    },
    {
        "line": 54,
        "fullcodeline": "if  (HASEXCEPTION())"
    },
    {
        "line": 58,
        "fullcodeline": "if (HASFAILED())"
    },
    {
        "line": 81,
        "fullcodeline": "belle_sip_message(\"[%s]  reason [%s]\",(const char*)EXCEPTION->name,(const char*)EXCEPTION->message);"
    },
    {
        "line": 82,
        "fullcodeline": "belle_sip_object_unref((SCOPE_TOP(header_diversion))->current);"
    },
    {
        "line": 84,
        "fullcodeline": "ret=NULL;"
    },
    {
        "line": 28,
        "fullcodeline": "pbelle_sip_messageParser_header_diversionPop(ctx);"
    },
    {
        "line": 44,
        "fullcodeline": "pbelle_sip_messageParser_header_diversionPop(ctx);"
    },
    {
        "line": 60,
        "fullcodeline": "pbelle_sip_messageParser_header_diversionPop(ctx);"
    }
]