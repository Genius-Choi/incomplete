[
    {
        "line": 13,
        "fullcodeline": "ctx->pbelle_sip_messageParser_uri_headerTop = pbelle_sip_messageParser_uri_headerPush(ctx);"
    },
    {
        "line": 14,
        "fullcodeline": "(SCOPE_TOP(uri_header))->is_hvalue=0;"
    },
    {
        "line": 19,
        "fullcodeline": "FOLLOWPUSH(FOLLOW_hname_in_uri_header7344);"
    },
    {
        "line": 20,
        "fullcodeline": "hname126=hname(ctx);"
    },
    {
        "line": 22,
        "fullcodeline": "FOLLOWPOP();"
    },
    {
        "line": 35,
        "fullcodeline": "MATCHT(EQUAL, &FOLLOW_EQUAL_in_uri_header7346);"
    },
    {
        "line": 143,
        "fullcodeline": "EXCEPTION->type = ANTLR3_RECOGNITION_EXCEPTION;"
    },
    {
        "line": 23,
        "fullcodeline": "if  (HASEXCEPTION())"
    },
    {
        "line": 27,
        "fullcodeline": "if (HASFAILED())"
    },
    {
        "line": 29,
        "fullcodeline": "pbelle_sip_messageParser_uri_headerPop(ctx);"
    },
    {
        "line": 115,
        "fullcodeline": "char* unescaped_hname = belle_sip_to_unescaped_string((const char *)(STRSTREAM->toStringTT(STRSTREAM, hname126.start, hname126.stop))"
    },
    {
        "line": 117,
        "fullcodeline": "char* unescaped_hvalue = ((SCOPE_TOP(uri_header))->is_hvalue)?belle_sip_to_unescaped_string((const char *)"
    },
    {
        "line": 120,
        "fullcodeline": "belle_sip_uri_set_header((SCOPE_TOP(headers))->current,unescaped_hname,unescaped_hvalue);"
    },
    {
        "line": 84,
        "fullcodeline": "FOLLOWPUSH(FOLLOW_hvalue_in_uri_header7349);"
    },
    {
        "line": 85,
        "fullcodeline": "hvalue127=hvalue(ctx);"
    },
    {
        "line": 100,
        "fullcodeline": "if ( BACKTRACKING==0 )"
    }
]