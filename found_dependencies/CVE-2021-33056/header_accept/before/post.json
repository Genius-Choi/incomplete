[
    {
        "line": 8,
        "fullcodeline": "ret = NULL;"
    },
    {
        "line": 10,
        "fullcodeline": "ctx->pbelle_sip_messageParser_header_acceptTop = pbelle_sip_messageParser_header_acceptPush(ctx);"
    },
    {
        "line": 11,
        "fullcodeline": "(SCOPE_TOP(header_accept))->current= NULL;(SCOPE_TOP(header_accept))->first=NULL;"
    },
    {
        "line": 12,
        "fullcodeline": "ret= NULL;"
    },
    {
        "line": 169,
        "fullcodeline": "pbelle_sip_messageParser_header_acceptPop(ctx);"
    },
    {
        "line": 147,
        "fullcodeline": "if\t(HASEXCEPTION())"
    },
    {
        "line": 18,
        "fullcodeline": "FOLLOWPUSH(FOLLOW_accept_token_in_header_accept6078);"
    },
    {
        "line": 19,
        "fullcodeline": "accept_token(ctx);"
    },
    {
        "line": 21,
        "fullcodeline": "FOLLOWPOP();"
    },
    {
        "line": 34,
        "fullcodeline": "FOLLOWPUSH(FOLLOW_hcolon_in_header_accept6081);"
    },
    {
        "line": 35,
        "fullcodeline": "hcolon(ctx);"
    },
    {
        "line": 37,
        "fullcodeline": "FOLLOWPOP();"
    },
    {
        "line": 50,
        "fullcodeline": "FOLLOWPUSH(FOLLOW_accept_param_in_header_accept6083);"
    },
    {
        "line": 51,
        "fullcodeline": "accept_param(ctx);"
    },
    {
        "line": 53,
        "fullcodeline": "FOLLOWPOP();"
    },
    {
        "line": 22,
        "fullcodeline": "if  (HASEXCEPTION())"
    },
    {
        "line": 26,
        "fullcodeline": "if (HASFAILED())"
    },
    {
        "line": 38,
        "fullcodeline": "if  (HASEXCEPTION())"
    },
    {
        "line": 42,
        "fullcodeline": "if (HASFAILED())"
    },
    {
        "line": 54,
        "fullcodeline": "if  (HASEXCEPTION())"
    },
    {
        "line": 58,
        "fullcodeline": "if (HASFAILED())"
    },
    {
        "line": 131,
        "fullcodeline": "if ( BACKTRACKING==0 )"
    },
    {
        "line": 153,
        "fullcodeline": "belle_sip_message(\"[%s]  reason [%s]\",(const char*)EXCEPTION->name,(const char*)EXCEPTION->message);"
    },
    {
        "line": 154,
        "fullcodeline": "ret= (SCOPE_TOP(header_accept))->first;"
    },
    {
        "line": 159,
        "fullcodeline": "ret=NULL;"
    },
    {
        "line": 28,
        "fullcodeline": "pbelle_sip_messageParser_header_acceptPop(ctx);"
    },
    {
        "line": 44,
        "fullcodeline": "pbelle_sip_messageParser_header_acceptPop(ctx);"
    },
    {
        "line": 60,
        "fullcodeline": "pbelle_sip_messageParser_header_acceptPop(ctx);"
    },
    {
        "line": 70,
        "fullcodeline": "int alt139=2;"
    },
    {
        "line": 133,
        "fullcodeline": "ret= (SCOPE_TOP(header_accept))->first;"
    },
    {
        "line": 71,
        "fullcodeline": "switch ( LA(1) )"
    },
    {
        "line": 157,
        "fullcodeline": ") belle_sip_object_unref(ret"
    },
    {
        "line": 77,
        "fullcodeline": "alt139=1;"
    },
    {
        "line": 88,
        "fullcodeline": "FOLLOWPUSH(FOLLOW_comma_in_header_accept6086);"
    },
    {
        "line": 89,
        "fullcodeline": "comma(ctx);"
    },
    {
        "line": 91,
        "fullcodeline": "FOLLOWPOP();"
    },
    {
        "line": 104,
        "fullcodeline": "FOLLOWPUSH(FOLLOW_accept_param_in_header_accept6088);"
    },
    {
        "line": 105,
        "fullcodeline": "accept_param(ctx);"
    },
    {
        "line": 107,
        "fullcodeline": "FOLLOWPOP();"
    },
    {
        "line": 92,
        "fullcodeline": "if  (HASEXCEPTION())"
    },
    {
        "line": 96,
        "fullcodeline": "if (HASFAILED())"
    },
    {
        "line": 108,
        "fullcodeline": "if  (HASEXCEPTION())"
    },
    {
        "line": 112,
        "fullcodeline": "if (HASFAILED())"
    },
    {
        "line": 98,
        "fullcodeline": "pbelle_sip_messageParser_header_acceptPop(ctx);"
    },
    {
        "line": 114,
        "fullcodeline": "pbelle_sip_messageParser_header_acceptPop(ctx);"
    }
]