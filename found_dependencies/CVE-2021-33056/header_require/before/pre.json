[
    {
        "line": 8,
        "fullcodeline": "ctx->pbelle_sip_messageParser_header_requireTop = pbelle_sip_messageParser_header_requirePush(ctx);"
    },
    {
        "line": 9,
        "fullcodeline": "(SCOPE_TOP(header_require))->current= belle_sip_header_require_new();"
    },
    {
        "line": 10,
        "fullcodeline": "ret= (SCOPE_TOP(header_require))->current;"
    },
    {
        "line": 34,
        "fullcodeline": "FOLLOWPUSH(FOLLOW_token_in_header_require5957);"
    },
    {
        "line": 35,
        "fullcodeline": "token(ctx);"
    },
    {
        "line": 50,
        "fullcodeline": "FOLLOWPUSH(FOLLOW_hcolon_in_header_require5961);"
    },
    {
        "line": 51,
        "fullcodeline": "hcolon(ctx);"
    },
    {
        "line": 66,
        "fullcodeline": "FOLLOWPUSH(FOLLOW_require_val_in_header_require5963);"
    },
    {
        "line": 67,
        "fullcodeline": "require_val(ctx);"
    },
    {
        "line": 16,
        "fullcodeline": "if ( !((IS_TOKEN(Require))) )"
    },
    {
        "line": 165,
        "fullcodeline": "ret=NULL;"
    },
    {
        "line": 27,
        "fullcodeline": "EXCEPTION->type         = ANTLR3_FAILED_PREDICATE_EXCEPTION;"
    },
    {
        "line": 28,
        "fullcodeline": "EXCEPTION->message      = (void *)\"IS_TOKEN(Require)\";"
    },
    {
        "line": 18,
        "fullcodeline": "if (BACKTRACKING>0)"
    },
    {
        "line": 20,
        "fullcodeline": "FAILEDFLAG = ANTLR3_TRUE;"
    },
    {
        "line": 21,
        "fullcodeline": "pbelle_sip_messageParser_header_requirePop(ctx);"
    },
    {
        "line": 104,
        "fullcodeline": "FOLLOWPUSH(FOLLOW_comma_in_header_require5966);"
    },
    {
        "line": 105,
        "fullcodeline": "comma(ctx);"
    },
    {
        "line": 120,
        "fullcodeline": "FOLLOWPUSH(FOLLOW_require_val_in_header_require5968);"
    },
    {
        "line": 121,
        "fullcodeline": "require_val(ctx);"
    }
]