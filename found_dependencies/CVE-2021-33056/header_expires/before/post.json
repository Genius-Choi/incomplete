[
    {
        "line": 12,
        "fullcodeline": "ctx->pbelle_sip_messageParser_header_expiresTop = pbelle_sip_messageParser_header_expiresPush(ctx);"
    },
    {
        "line": 13,
        "fullcodeline": "(SCOPE_TOP(header_expires))->current= belle_sip_header_expires_new();"
    },
    {
        "line": 14,
        "fullcodeline": "ret= (SCOPE_TOP(header_expires))->current;"
    },
    {
        "line": 122,
        "fullcodeline": "pbelle_sip_messageParser_header_expiresPop(ctx);"
    },
    {
        "line": 103,
        "fullcodeline": "if\t(HASEXCEPTION())"
    },
    {
        "line": 38,
        "fullcodeline": "FOLLOWPUSH(FOLLOW_token_in_header_expires3705);"
    },
    {
        "line": 39,
        "fullcodeline": "token(ctx);"
    },
    {
        "line": 41,
        "fullcodeline": "FOLLOWPOP();"
    },
    {
        "line": 54,
        "fullcodeline": "FOLLOWPUSH(FOLLOW_hcolon_in_header_expires3709);"
    },
    {
        "line": 55,
        "fullcodeline": "hcolon(ctx);"
    },
    {
        "line": 57,
        "fullcodeline": "FOLLOWPOP();"
    },
    {
        "line": 70,
        "fullcodeline": "FOLLOWPUSH(FOLLOW_delta_seconds_in_header_expires3711);"
    },
    {
        "line": 71,
        "fullcodeline": "delta_seconds69=delta_seconds(ctx);"
    },
    {
        "line": 73,
        "fullcodeline": "FOLLOWPOP();"
    },
    {
        "line": 20,
        "fullcodeline": "if ( !((IS_TOKEN(Expires))) )"
    },
    {
        "line": 42,
        "fullcodeline": "if  (HASEXCEPTION())"
    },
    {
        "line": 46,
        "fullcodeline": "if (HASFAILED())"
    },
    {
        "line": 58,
        "fullcodeline": "if  (HASEXCEPTION())"
    },
    {
        "line": 62,
        "fullcodeline": "if (HASFAILED())"
    },
    {
        "line": 74,
        "fullcodeline": "if  (HASEXCEPTION())"
    },
    {
        "line": 78,
        "fullcodeline": "if (HASFAILED())"
    },
    {
        "line": 86,
        "fullcodeline": "if ( BACKTRACKING==0 )"
    },
    {
        "line": 109,
        "fullcodeline": "belle_sip_message(\"[%s]  reason [%s]\",(const char*)EXCEPTION->name,(const char*)EXCEPTION->message);"
    },
    {
        "line": 110,
        "fullcodeline": "belle_sip_object_unref((SCOPE_TOP(header_expires))->current);"
    },
    {
        "line": 112,
        "fullcodeline": "ret=NULL;"
    },
    {
        "line": 30,
        "fullcodeline": "CONSTRUCTEX();"
    },
    {
        "line": 31,
        "fullcodeline": "EXCEPTION->type         = ANTLR3_FAILED_PREDICATE_EXCEPTION;"
    },
    {
        "line": 32,
        "fullcodeline": "EXCEPTION->message      = (void *)\"IS_TOKEN(Expires)\";"
    },
    {
        "line": 33,
        "fullcodeline": "EXCEPTION->ruleName\t = (void *)\"header_expires\";"
    },
    {
        "line": 48,
        "fullcodeline": "pbelle_sip_messageParser_header_expiresPop(ctx);"
    },
    {
        "line": 64,
        "fullcodeline": "pbelle_sip_messageParser_header_expiresPop(ctx);"
    },
    {
        "line": 80,
        "fullcodeline": "pbelle_sip_messageParser_header_expiresPop(ctx);"
    },
    {
        "line": 88,
        "fullcodeline": "belle_sip_header_expires_set_expires((SCOPE_TOP(header_expires))->current,atoi((const char *)"
    },
    {
        "line": 22,
        "fullcodeline": "if (BACKTRACKING>0)"
    },
    {
        "line": 24,
        "fullcodeline": "FAILEDFLAG = ANTLR3_TRUE;"
    },
    {
        "line": 25,
        "fullcodeline": "pbelle_sip_messageParser_header_expiresPop(ctx);"
    },
    {
        "line": 89,
        "fullcodeline": "(STRSTREAM->toStringTT(STRSTREAM, delta_seconds69.start, delta_seconds69.stop))"
    }
]