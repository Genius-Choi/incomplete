[
    {
        "line": 12,
        "fullcodeline": "ctx->pbelle_sip_messageParser_header_subscription_stateTop = pbelle_sip_messageParser_header_subscription_statePush(ctx);"
    },
    {
        "line": 13,
        "fullcodeline": "(SCOPE_TOP(header_subscription_state))->current= belle_sip_header_subscription_state_new();"
    },
    {
        "line": 14,
        "fullcodeline": "ret= (SCOPE_TOP(header_subscription_state))->current;"
    },
    {
        "line": 187,
        "fullcodeline": "pbelle_sip_messageParser_header_subscription_statePop(ctx);"
    },
    {
        "line": 168,
        "fullcodeline": "if\t(HASEXCEPTION())"
    },
    {
        "line": 38,
        "fullcodeline": "FOLLOWPUSH(FOLLOW_token_in_header_subscription_state5593);"
    },
    {
        "line": 39,
        "fullcodeline": "token(ctx);"
    },
    {
        "line": 41,
        "fullcodeline": "FOLLOWPOP();"
    },
    {
        "line": 54,
        "fullcodeline": "FOLLOWPUSH(FOLLOW_hcolon_in_header_subscription_state5598);"
    },
    {
        "line": 55,
        "fullcodeline": "hcolon(ctx);"
    },
    {
        "line": 57,
        "fullcodeline": "FOLLOWPOP();"
    },
    {
        "line": 70,
        "fullcodeline": "FOLLOWPUSH(FOLLOW_state_value_in_header_subscription_state5600);"
    },
    {
        "line": 71,
        "fullcodeline": "state_value95=state_value(ctx);"
    },
    {
        "line": 73,
        "fullcodeline": "FOLLOWPOP();"
    },
    {
        "line": 20,
        "fullcodeline": "if ( !((IS_TOKEN(Subscription-State))) )"
    },
    {
        "line": 42,
        "fullcodeline": "if  (HASEXCEPTION())"
    },
    {
        "line": 46,
        "fullcodeline": "if (HASFAILED())"
    },
    {
        "line": 58,
        "fullcodeline": "if  (HASEXCEPTION())"
    },
    {
        "line": 62,
        "fullcodeline": "if (HASFAILED())"
    },
    {
        "line": 74,
        "fullcodeline": "if  (HASEXCEPTION())"
    },
    {
        "line": 78,
        "fullcodeline": "if (HASFAILED())"
    },
    {
        "line": 86,
        "fullcodeline": "if ( BACKTRACKING==0 )"
    },
    {
        "line": 174,
        "fullcodeline": "belle_sip_message(\"[%s]  reason [%s]\",(const char*)EXCEPTION->name,(const char*)EXCEPTION->message);"
    },
    {
        "line": 175,
        "fullcodeline": "belle_sip_object_unref((SCOPE_TOP(header_subscription_state))->current);"
    },
    {
        "line": 177,
        "fullcodeline": "ret=NULL;"
    },
    {
        "line": 30,
        "fullcodeline": "CONSTRUCTEX();"
    },
    {
        "line": 31,
        "fullcodeline": "EXCEPTION->type         = ANTLR3_FAILED_PREDICATE_EXCEPTION;"
    },
    {
        "line": 32,
        "fullcodeline": "EXCEPTION->message      = (void *)\"IS_TOKEN(Subscription-State)\";"
    },
    {
        "line": 33,
        "fullcodeline": "EXCEPTION->ruleName\t = (void *)\"header_subscription_state\";"
    },
    {
        "line": 48,
        "fullcodeline": "pbelle_sip_messageParser_header_subscription_statePop(ctx);"
    },
    {
        "line": 64,
        "fullcodeline": "pbelle_sip_messageParser_header_subscription_statePop(ctx);"
    },
    {
        "line": 80,
        "fullcodeline": "pbelle_sip_messageParser_header_subscription_statePop(ctx);"
    },
    {
        "line": 88,
        "fullcodeline": "belle_sip_header_subscription_state_set_state((SCOPE_TOP(header_subscription_state))->current,(const char*)"
    },
    {
        "line": 98,
        "fullcodeline": "int alt131=2;"
    },
    {
        "line": 22,
        "fullcodeline": "if (BACKTRACKING>0)"
    },
    {
        "line": 99,
        "fullcodeline": "switch ( LA(1) )"
    },
    {
        "line": 24,
        "fullcodeline": "FAILEDFLAG = ANTLR3_TRUE;"
    },
    {
        "line": 25,
        "fullcodeline": "pbelle_sip_messageParser_header_subscription_statePop(ctx);"
    },
    {
        "line": 89,
        "fullcodeline": "(STRSTREAM->toStringTT(STRSTREAM, state_value95.start, state_value95.stop))"
    },
    {
        "line": 105,
        "fullcodeline": "alt131=1;"
    },
    {
        "line": 116,
        "fullcodeline": "FOLLOWPUSH(FOLLOW_semi_in_header_subscription_state5606);"
    },
    {
        "line": 117,
        "fullcodeline": "semi(ctx);"
    },
    {
        "line": 119,
        "fullcodeline": "FOLLOWPOP();"
    },
    {
        "line": 132,
        "fullcodeline": "FOLLOWPUSH(FOLLOW_generic_param_in_header_subscription_state5609);"
    },
    {
        "line": 133,
        "fullcodeline": "generic_param(ctx, BELLE_SIP_PARAMETERS((SCOPE_TOP(header_subscription_state))->current));"
    },
    {
        "line": 135,
        "fullcodeline": "FOLLOWPOP();"
    },
    {
        "line": 120,
        "fullcodeline": "if  (HASEXCEPTION())"
    },
    {
        "line": 124,
        "fullcodeline": "if (HASFAILED())"
    },
    {
        "line": 136,
        "fullcodeline": "if  (HASEXCEPTION())"
    },
    {
        "line": 140,
        "fullcodeline": "if (HASFAILED())"
    },
    {
        "line": 126,
        "fullcodeline": "pbelle_sip_messageParser_header_subscription_statePop(ctx);"
    },
    {
        "line": 142,
        "fullcodeline": "pbelle_sip_messageParser_header_subscription_statePop(ctx);"
    }
]