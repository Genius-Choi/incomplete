[
    {
        "line": 9,
        "fullcodeline": "retval.ret=NULL;"
    },
    {
        "line": 11,
        "fullcodeline": "retval.start = LT(1); retval.stop = retval.start;"
    },
    {
        "line": 212,
        "fullcodeline": "retval.stop = LT(-1);"
    },
    {
        "line": 216,
        "fullcodeline": "if (HASEXCEPTION())"
    },
    {
        "line": 222,
        "fullcodeline": "EXCEPTION->type = ANTLR3_RECOGNITION_EXCEPTION;"
    },
    {
        "line": 185,
        "fullcodeline": "if ( BACKTRACKING==0 )"
    },
    {
        "line": 21,
        "fullcodeline": "if ( ((LA(1) >= AND) && (LA(1) <= COMMON_CHAR)) || ((LA(1) >= DASH) && (LA(1) <= SLASH)) || ((LA(1) >= SQUOTE) && (LA(1) <= USCORE)) )"
    },
    {
        "line": 23,
        "fullcodeline": "CONSUME();"
    },
    {
        "line": 24,
        "fullcodeline": "PERRORRECOVERY=ANTLR3_FALSE;"
    },
    {
        "line": 25,
        "fullcodeline": "FAILEDFLAG=ANTLR3_FALSE;"
    },
    {
        "line": 49,
        "fullcodeline": "int alt146=3;"
    },
    {
        "line": 36,
        "fullcodeline": "CONSTRUCTEX();"
    },
    {
        "line": 37,
        "fullcodeline": "EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;"
    },
    {
        "line": 38,
        "fullcodeline": "EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;"
    },
    {
        "line": 39,
        "fullcodeline": "EXCEPTION->expectingSet = NULL;"
    },
    {
        "line": 50,
        "fullcodeline": "switch ( LA(1) )"
    },
    {
        "line": 190,
        "fullcodeline": "retval.ret=belle_http_header_create(name,(const char*)"
    },
    {
        "line": 30,
        "fullcodeline": "if (BACKTRACKING>0)"
    },
    {
        "line": 195,
        "fullcodeline": "retval.ret=belle_sip_header_create(name,(const char*)"
    },
    {
        "line": 32,
        "fullcodeline": "FAILEDFLAG = ANTLR3_TRUE;"
    },
    {
        "line": 103,
        "fullcodeline": "alt146=2;"
    },
    {
        "line": 54,
        "fullcodeline": "switch ( LA(2) )"
    },
    {
        "line": 117,
        "fullcodeline": "MATCHT(CRLF, &FOLLOW_CRLF_in_header_value6596);"
    },
    {
        "line": 128,
        "fullcodeline": "MATCHT(SP, &FOLLOW_SP_in_header_value6598);"
    },
    {
        "line": 147,
        "fullcodeline": "if ( ((LA(1) >= AND) && (LA(1) <= COMMON_CHAR)) || ((LA(1) >= DASH) && (LA(1) <= USCORE)) )"
    },
    {
        "line": 118,
        "fullcodeline": "if  (HASEXCEPTION())"
    },
    {
        "line": 122,
        "fullcodeline": "if (HASFAILED())"
    },
    {
        "line": 129,
        "fullcodeline": "if  (HASEXCEPTION())"
    },
    {
        "line": 133,
        "fullcodeline": "if (HASFAILED())"
    },
    {
        "line": 149,
        "fullcodeline": "CONSUME();"
    },
    {
        "line": 150,
        "fullcodeline": "PERRORRECOVERY=ANTLR3_FALSE;"
    },
    {
        "line": 151,
        "fullcodeline": "FAILEDFLAG=ANTLR3_FALSE;"
    },
    {
        "line": 191,
        "fullcodeline": "STRSTREAM->toStringTT(STRSTREAM, retval.start, LT(-1))"
    },
    {
        "line": 58,
        "fullcodeline": "alt146=1;"
    },
    {
        "line": 162,
        "fullcodeline": "CONSTRUCTEX();"
    },
    {
        "line": 163,
        "fullcodeline": "EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;"
    },
    {
        "line": 164,
        "fullcodeline": "EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;"
    },
    {
        "line": 165,
        "fullcodeline": "EXCEPTION->expectingSet = NULL;"
    },
    {
        "line": 196,
        "fullcodeline": "STRSTREAM->toStringTT(STRSTREAM, retval.start, LT(-1))"
    },
    {
        "line": 156,
        "fullcodeline": "if (BACKTRACKING>0)"
    },
    {
        "line": 158,
        "fullcodeline": "FAILEDFLAG = ANTLR3_TRUE;"
    }
]