[
    {
        "line": 9,
        "fullcodeline": "retval.ret=NULL;"
    },
    {
        "line": 11,
        "fullcodeline": "retval.start = LT(1); retval.stop = retval.start;"
    },
    {
        "line": 212,
        "fullcodeline": "retval.stop = LT(-1);"
    },
    {
        "line": 222,
        "fullcodeline": "EXCEPTION->type = ANTLR3_RECOGNITION_EXCEPTION;"
    },
    {
        "line": 21,
        "fullcodeline": "if ( ((LA(1) >= AND) && (LA(1) <= COMMON_CHAR)) || ((LA(1) >= DASH) && (LA(1) <= SLASH)) || ((LA(1) >= SQUOTE) && (LA(1) <= USCORE)) )"
    },
    {
        "line": 190,
        "fullcodeline": "retval.ret=belle_http_header_create(name,(const char*)"
    },
    {
        "line": 30,
        "fullcodeline": "if (BACKTRACKING>0)"
    },
    {
        "line": 195,
        "fullcodeline": "retval.ret=belle_sip_header_create(name,(const char*)"
    },
    {
        "line": 32,
        "fullcodeline": "FAILEDFLAG = ANTLR3_TRUE;"
    },
    {
        "line": 117,
        "fullcodeline": "MATCHT(CRLF, &FOLLOW_CRLF_in_header_value6596);"
    },
    {
        "line": 128,
        "fullcodeline": "MATCHT(SP, &FOLLOW_SP_in_header_value6598);"
    },
    {
        "line": 147,
        "fullcodeline": "if ( ((LA(1) >= AND) && (LA(1) <= COMMON_CHAR)) || ((LA(1) >= DASH) && (LA(1) <= USCORE)) )"
    },
    {
        "line": 191,
        "fullcodeline": "STRSTREAM->toStringTT(STRSTREAM, retval.start, LT(-1))"
    },
    {
        "line": 196,
        "fullcodeline": "STRSTREAM->toStringTT(STRSTREAM, retval.start, LT(-1))"
    }
]