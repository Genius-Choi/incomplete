[
    {
        "line": 10,
        "fullcodeline": "target_url = link.url.split('#', 1)[0]"
    },
    {
        "line": 43,
        "fullcodeline": "content_type = resp.headers.get('content-type', '')"
    },
    {
        "line": 44,
        "fullcodeline": "filename = link.filename  # fallback"
    },
    {
        "line": 46,
        "fullcodeline": "content_disposition = resp.headers.get('content-disposition')"
    },
    {
        "line": 49,
        "fullcodeline": "ext = splitext(filename)[1]"
    },
    {
        "line": 58,
        "fullcodeline": "file_path = os.path.join(temp_dir, filename)"
    },
    {
        "line": 50,
        "fullcodeline": "if not ext:"
    },
    {
        "line": 54,
        "fullcodeline": "if not ext and link.url != resp.url:"
    },
    {
        "line": 59,
        "fullcodeline": "with open(file_path, 'wb') as content_file:"
    },
    {
        "line": 61,
        "fullcodeline": "return file_path, content_type"
    },
    {
        "line": 12,
        "fullcodeline": "resp = session.get("
    },
    {
        "line": 36,
        "fullcodeline": "resp.raise_for_status()"
    },
    {
        "line": 48,
        "fullcodeline": "filename = parse_content_disposition(content_disposition, filename)"
    },
    {
        "line": 51,
        "fullcodeline": "ext = mimetypes.guess_extension(content_type)"
    },
    {
        "line": 55,
        "fullcodeline": "ext = os.path.splitext(resp.url)[1]"
    },
    {
        "line": 60,
        "fullcodeline": "_download_url(resp, link, content_file, hashes, progress_bar)"
    },
    {
        "line": 38,
        "fullcodeline": "logger.critical("
    },
    {
        "line": 41,
        "fullcodeline": "raise"
    },
    {
        "line": 53,
        "fullcodeline": "filename += ext"
    },
    {
        "line": 57,
        "fullcodeline": "filename += ext"
    },
    {
        "line": 33,
        "fullcodeline": "headers={\"Accept-Encoding\": \"identity\"},"
    }
]