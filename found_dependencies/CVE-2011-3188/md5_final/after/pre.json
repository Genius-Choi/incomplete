[
    {
        "line": 3,
        "fullcodeline": "struct md5_state *mctx = shash_desc_ctx(desc);"
    },
    {
        "line": 4,
        "fullcodeline": "const unsigned int offset = mctx->byte_count & 0x3f;"
    },
    {
        "line": 5,
        "fullcodeline": "char *p = (char *)mctx->block + offset;"
    },
    {
        "line": 6,
        "fullcodeline": "int padding = 56 - (offset + 1);"
    },
    {
        "line": 8,
        "fullcodeline": "*p++ = 0x80;"
    },
    {
        "line": 16,
        "fullcodeline": "memset(p, 0, padding);"
    },
    {
        "line": 17,
        "fullcodeline": "mctx->block[14] = mctx->byte_count << 3;"
    },
    {
        "line": 18,
        "fullcodeline": "mctx->block[15] = mctx->byte_count >> 29;"
    },
    {
        "line": 19,
        "fullcodeline": "le32_to_cpu_array(mctx->block, (sizeof(mctx->block) -"
    },
    {
        "line": 21,
        "fullcodeline": "md5_transform(mctx->hash, mctx->block);"
    },
    {
        "line": 22,
        "fullcodeline": "cpu_to_le32_array(mctx->hash, sizeof(mctx->hash) / sizeof(u32));"
    },
    {
        "line": 23,
        "fullcodeline": "memcpy(out, mctx->hash, sizeof(mctx->hash));"
    },
    {
        "line": 24,
        "fullcodeline": "memset(mctx, 0, sizeof(*mctx));"
    },
    {
        "line": 9,
        "fullcodeline": "if (padding < 0) {"
    },
    {
        "line": 10,
        "fullcodeline": "memset(p, 0x00, padding + sizeof (u64));"
    },
    {
        "line": 11,
        "fullcodeline": "md5_transform_helper(mctx);"
    },
    {
        "line": 12,
        "fullcodeline": "p = (char *)mctx->block;"
    },
    {
        "line": 13,
        "fullcodeline": "padding = 56;"
    },
    {
        "line": 20,
        "fullcodeline": "sizeof(u64)) / sizeof(u32));"
    }
]