[
    {
        "line": 4,
        "fullcodeline": "struct cp2112_device *dev = gpiochip_get_data(chip);"
    },
    {
        "line": 5,
        "fullcodeline": "struct hid_device *hdev = dev->hdev;"
    },
    {
        "line": 6,
        "fullcodeline": "u8 *buf = dev->in_out_buffer;"
    },
    {
        "line": 10,
        "fullcodeline": "spin_lock_irqsave(&dev->lock, flags);"
    },
    {
        "line": 12,
        "fullcodeline": "ret = hid_hw_raw_request(hdev, CP2112_GPIO_CONFIG, buf,"
    },
    {
        "line": 20,
        "fullcodeline": "buf[1] |= 1 << offset;"
    },
    {
        "line": 21,
        "fullcodeline": "buf[2] = gpio_push_pull;"
    },
    {
        "line": 23,
        "fullcodeline": "ret = hid_hw_raw_request(hdev, CP2112_GPIO_CONFIG, buf,"
    },
    {
        "line": 31,
        "fullcodeline": "spin_unlock_irqrestore(&dev->lock, flags);"
    },
    {
        "line": 37,
        "fullcodeline": "cp2112_gpio_set(chip, offset, value);"
    },
    {
        "line": 42,
        "fullcodeline": "spin_unlock_irqrestore(&dev->lock, flags);"
    },
    {
        "line": 15,
        "fullcodeline": "if (ret != CP2112_GPIO_CONFIG_LENGTH) {"
    },
    {
        "line": 26,
        "fullcodeline": "if (ret < 0) {"
    },
    {
        "line": 43,
        "fullcodeline": "return ret < 0 ? ret : -EIO;"
    },
    {
        "line": 16,
        "fullcodeline": "hid_err(hdev, \"error requesting GPIO config: %d\\n\", ret);"
    },
    {
        "line": 27,
        "fullcodeline": "hid_err(hdev, \"error setting GPIO config: %d\\n\", ret);"
    }
]