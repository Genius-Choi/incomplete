[
    {
        "line": 4,
        "fullcodeline": "SliceHeader *sh   = &s->sh;"
    },
    {
        "line": 8,
        "fullcodeline": "sh->first_slice_in_pic_flag = get_bits1(gb);"
    },
    {
        "line": 20,
        "fullcodeline": "sh->no_output_of_prior_pics_flag = 0;"
    },
    {
        "line": 24,
        "fullcodeline": "sh->pps_id = get_ue_golomb_long(gb);"
    },
    {
        "line": 64,
        "fullcodeline": "sh->dependent_slice_segment_flag = 0;"
    },
    {
        "line": 338,
        "fullcodeline": "sh->num_entry_point_offsets = 0;"
    },
    {
        "line": 392,
        "fullcodeline": "sh->slice_qp = 26U + s->ps.pps->pic_init_qp_minus26 + sh->slice_qp_delta;"
    },
    {
        "line": 403,
        "fullcodeline": "sh->slice_ctb_addr_rs = sh->slice_segment_addr;"
    },
    {
        "line": 416,
        "fullcodeline": "s->HEVClc->first_qp_group = !s->sh.dependent_slice_segment_flag;"
    },
    {
        "line": 421,
        "fullcodeline": "s->slice_initialized = 1;"
    },
    {
        "line": 422,
        "fullcodeline": "s->HEVClc->tu.cu_qp_offset_cb = 0;"
    },
    {
        "line": 423,
        "fullcodeline": "s->HEVClc->tu.cu_qp_offset_cr = 0;"
    },
    {
        "line": 9,
        "fullcodeline": "if (s->ref && sh->first_slice_in_pic_flag) {"
    },
    {
        "line": 14,
        "fullcodeline": "if ((IS_IDR(s) || IS_BLA(s)) && sh->first_slice_in_pic_flag) {"
    },
    {
        "line": 21,
        "fullcodeline": "if (IS_IRAP(s))"
    },
    {
        "line": 25,
        "fullcodeline": "if (sh->pps_id >= HEVC_MAX_PPS_COUNT || !s->ps.pps_list[sh->pps_id]) {"
    },
    {
        "line": 29,
        "fullcodeline": "if (!sh->first_slice_in_pic_flag &&"
    },
    {
        "line": 35,
        "fullcodeline": "if (s->nal_unit_type == HEVC_NAL_CRA_NUT && s->last_eos == 1)"
    },
    {
        "line": 65,
        "fullcodeline": "if (!sh->first_slice_in_pic_flag) {"
    },
    {
        "line": 91,
        "fullcodeline": "if (!sh->dependent_slice_segment_flag) {"
    },
    {
        "line": 393,
        "fullcodeline": "if (sh->slice_qp > 51 ||"
    },
    {
        "line": 405,
        "fullcodeline": "if (!s->sh.slice_ctb_addr_rs && s->sh.dependent_slice_segment_flag) {"
    },
    {
        "line": 410,
        "fullcodeline": "if (get_bits_left(gb) < 0) {"
    },
    {
        "line": 10,
        "fullcodeline": "av_log(s->avctx, AV_LOG_ERROR, \"Two slices reporting being the first in the same frame.\\n\");"
    },
    {
        "line": 15,
        "fullcodeline": "s->seq_decode = (s->seq_decode + 1) & 0xff;"
    },
    {
        "line": 16,
        "fullcodeline": "s->max_ra     = INT_MAX;"
    },
    {
        "line": 22,
        "fullcodeline": "sh->no_output_of_prior_pics_flag = get_bits1(gb);"
    },
    {
        "line": 26,
        "fullcodeline": "av_log(s->avctx, AV_LOG_ERROR, \"PPS id out of range: %d\\n\", sh->pps_id);"
    },
    {
        "line": 31,
        "fullcodeline": "av_log(s->avctx, AV_LOG_ERROR, \"PPS changed between slices.\\n\");"
    },
    {
        "line": 36,
        "fullcodeline": "sh->no_output_of_prior_pics_flag = 1;"
    },
    {
        "line": 40,
        "fullcodeline": "const HEVCSPS *last_sps = s->ps.sps;"
    },
    {
        "line": 49,
        "fullcodeline": "ff_hevc_clear_refs(s);"
    },
    {
        "line": 51,
        "fullcodeline": "ret = set_sps(s, sps, sps->pix_fmt);"
    },
    {
        "line": 55,
        "fullcodeline": "pix_fmt = get_format(s, sps);"
    },
    {
        "line": 58,
        "fullcodeline": "s->avctx->pix_fmt = pix_fmt;"
    },
    {
        "line": 60,
        "fullcodeline": "s->seq_decode = (s->seq_decode + 1) & 0xff;"
    },
    {
        "line": 61,
        "fullcodeline": "s->max_ra     = INT_MAX;"
    },
    {
        "line": 71,
        "fullcodeline": "slice_address_length = av_ceil_log2(s->ps.sps->ctb_width *"
    },
    {
        "line": 73,
        "fullcodeline": "sh->slice_segment_addr = get_bitsz(gb, slice_address_length);"
    },
    {
        "line": 92,
        "fullcodeline": "s->slice_initialized = 0;"
    },
    {
        "line": 97,
        "fullcodeline": "sh->slice_type = get_ue_golomb_long(gb);"
    },
    {
        "line": 111,
        "fullcodeline": "sh->pic_output_flag = 1;"
    },
    {
        "line": 195,
        "fullcodeline": "sh->nb_refs[L0] = sh->nb_refs[L1] = 0;"
    },
    {
        "line": 278,
        "fullcodeline": "sh->slice_qp_delta = get_se_golomb(gb);"
    },
    {
        "line": 340,
        "fullcodeline": "unsigned num_entry_point_offsets = get_ue_golomb_long(gb);"
    },
    {
        "line": 347,
        "fullcodeline": "sh->num_entry_point_offsets = num_entry_point_offsets;"
    },
    {
        "line": 382,
        "fullcodeline": "unsigned int length = get_ue_golomb_long(gb);"
    },
    {
        "line": 394,
        "fullcodeline": "sh->slice_qp < -s->ps.sps->qp_bd_offset) {"
    },
    {
        "line": 395,
        "fullcodeline": "av_log(s->avctx, AV_LOG_ERROR,"
    },
    {
        "line": 406,
        "fullcodeline": "av_log(s->avctx, AV_LOG_ERROR, \"Impossible slice segment.\\n\");"
    },
    {
        "line": 411,
        "fullcodeline": "av_log(s->avctx, AV_LOG_ERROR,"
    },
    {
        "line": 17,
        "fullcodeline": "if (IS_IDR(s))"
    },
    {
        "line": 43,
        "fullcodeline": "if (last_sps && IS_IRAP(s) && s->nal_unit_type != HEVC_NAL_CRA_NUT) {"
    },
    {
        "line": 52,
        "fullcodeline": "if (ret < 0)"
    },
    {
        "line": 56,
        "fullcodeline": "if (pix_fmt < 0)"
    },
    {
        "line": 74,
        "fullcodeline": "if (sh->slice_segment_addr >= s->ps.sps->ctb_width * s->ps.sps->ctb_height) {"
    },
    {
        "line": 81,
        "fullcodeline": "if (!sh->dependent_slice_segment_flag) {"
    },
    {
        "line": 86,
        "fullcodeline": "sh->slice_segment_addr = sh->slice_addr = 0;"
    },
    {
        "line": 87,
        "fullcodeline": "s->slice_idx           = 0;"
    },
    {
        "line": 88,
        "fullcodeline": "s->slice_initialized   = 0;"
    },
    {
        "line": 94,
        "fullcodeline": "for (i = 0; i < s->ps.pps->num_extra_slice_header_bits; i++)"
    },
    {
        "line": 95,
        "fullcodeline": "skip_bits(gb, 1);  // slice_reserved_undetermined_flag[]"
    },
    {
        "line": 98,
        "fullcodeline": "if (!(sh->slice_type == HEVC_SLICE_I ||"
    },
    {
        "line": 105,
        "fullcodeline": "if (IS_IRAP(s) && sh->slice_type != HEVC_SLICE_I) {"
    },
    {
        "line": 118,
        "fullcodeline": "if (!IS_IDR(s)) {"
    },
    {
        "line": 173,
        "fullcodeline": "if (sh->first_slice_in_pic_flag && s->temporal_id == 0 &&"
    },
    {
        "line": 196,
        "fullcodeline": "if (sh->slice_type == HEVC_SLICE_P || sh->slice_type == HEVC_SLICE_B) {"
    },
    {
        "line": 325,
        "fullcodeline": "if (s->ps.pps->seq_loop_filter_across_slices_enabled_flag &&"
    },
    {
        "line": 342,
        "fullcodeline": "if (num_entry_point_offsets > get_bits_left(gb)) {"
    },
    {
        "line": 348,
        "fullcodeline": "if (sh->num_entry_point_offsets > 0) {"
    },
    {
        "line": 383,
        "fullcodeline": "if (length*8LL > get_bits_left(gb)) {"
    },
    {
        "line": 387,
        "fullcodeline": "for (i = 0; i < length; i++)"
    },
    {
        "line": 388,
        "fullcodeline": "skip_bits(gb, 8);  // slice_header_extension_data_byte"
    },
    {
        "line": 399,
        "fullcodeline": "-s->ps.sps->qp_bd_offset);"
    },
    {
        "line": 412,
        "fullcodeline": "\"Overread slice header by %d bits\\n\", -get_bits_left(gb));"
    },
    {
        "line": 18,
        "fullcodeline": "ff_hevc_clear_refs(s);"
    },
    {
        "line": 69,
        "fullcodeline": "sh->dependent_slice_segment_flag = get_bits1(gb);"
    },
    {
        "line": 75,
        "fullcodeline": "av_log(s->avctx, AV_LOG_ERROR,"
    },
    {
        "line": 82,
        "fullcodeline": "sh->slice_addr = sh->slice_segment_addr;"
    },
    {
        "line": 83,
        "fullcodeline": "s->slice_idx++;"
    },
    {
        "line": 101,
        "fullcodeline": "av_log(s->avctx, AV_LOG_ERROR, \"Unknown slice type: %d.\\n\","
    },
    {
        "line": 106,
        "fullcodeline": "av_log(s->avctx, AV_LOG_ERROR, \"Inter slices in an IRAP frame.\\n\");"
    },
    {
        "line": 113,
        "fullcodeline": "sh->pic_output_flag = get_bits1(gb);"
    },
    {
        "line": 116,
        "fullcodeline": "sh->colour_plane_id = get_bits(gb, 2);"
    },
    {
        "line": 121,
        "fullcodeline": "sh->pic_order_cnt_lsb = get_bits(gb, s->ps.sps->log2_max_poc_lsb);"
    },
    {
        "line": 122,
        "fullcodeline": "poc = ff_hevc_compute_poc(s->ps.sps, s->pocTid0, sh->pic_order_cnt_lsb, s->nal_unit_type);"
    },
    {
        "line": 130,
        "fullcodeline": "s->poc = poc;"
    },
    {
        "line": 132,
        "fullcodeline": "sh->short_term_ref_pic_set_sps_flag = get_bits1(gb);"
    },
    {
        "line": 133,
        "fullcodeline": "pos = get_bits_left(gb);"
    },
    {
        "line": 152,
        "fullcodeline": "sh->short_term_ref_pic_set_size = pos - get_bits_left(gb);"
    },
    {
        "line": 154,
        "fullcodeline": "pos = get_bits_left(gb);"
    },
    {
        "line": 155,
        "fullcodeline": "ret = decode_lt_rps(s, &sh->long_term_rps, gb);"
    },
    {
        "line": 161,
        "fullcodeline": "sh->long_term_ref_pic_set_size = pos - get_bits_left(gb);"
    },
    {
        "line": 180,
        "fullcodeline": "s->nal_unit_type != HEVC_NAL_RASL_R)"
    },
    {
        "line": 181,
        "fullcodeline": "s->pocTid0 = s->poc;"
    },
    {
        "line": 184,
        "fullcodeline": "sh->slice_sample_adaptive_offset_flag[0] = get_bits1(gb);"
    },
    {
        "line": 214,
        "fullcodeline": "sh->rpl_modification_flag[0] = 0;"
    },
    {
        "line": 215,
        "fullcodeline": "sh->rpl_modification_flag[1] = 0;"
    },
    {
        "line": 216,
        "fullcodeline": "nb_refs = ff_hevc_frame_nb_refs(s);"
    },
    {
        "line": 245,
        "fullcodeline": "sh->collocated_ref_idx = 0;"
    },
    {
        "line": 269,
        "fullcodeline": "sh->max_num_merge_cand = 5 - get_ue_golomb_long(gb);"
    },
    {
        "line": 281,
        "fullcodeline": "sh->slice_cb_qp_offset = get_se_golomb(gb);"
    },
    {
        "line": 282,
        "fullcodeline": "sh->slice_cr_qp_offset = get_se_golomb(gb);"
    },
    {
        "line": 289,
        "fullcodeline": "sh->cu_chroma_qp_offset_enabled_flag = get_bits1(gb);"
    },
    {
        "line": 294,
        "fullcodeline": "int deblocking_filter_override_flag = 0;"
    },
    {
        "line": 326,
        "fullcodeline": "(sh->slice_sample_adaptive_offset_flag[0] ||"
    },
    {
        "line": 329,
        "fullcodeline": "sh->slice_loop_filter_across_slices_enabled_flag = get_bits1(gb);"
    },
    {
        "line": 333,
        "fullcodeline": "} else if (!s->slice_initialized) {"
    },
    {
        "line": 343,
        "fullcodeline": "av_log(s->avctx, AV_LOG_ERROR, \"num_entry_point_offsets %d is invalid\\n\", num_entry_point_offsets);"
    },
    {
        "line": 349,
        "fullcodeline": "int offset_len = get_ue_golomb_long(gb) + 1;"
    },
    {
        "line": 357,
        "fullcodeline": "av_freep(&sh->entry_point_offset);"
    },
    {
        "line": 358,
        "fullcodeline": "av_freep(&sh->offset);"
    },
    {
        "line": 359,
        "fullcodeline": "av_freep(&sh->size);"
    },
    {
        "line": 360,
        "fullcodeline": "sh->entry_point_offset = av_malloc_array(sh->num_entry_point_offsets, sizeof(unsigned));"
    },
    {
        "line": 361,
        "fullcodeline": "sh->offset = av_malloc_array(sh->num_entry_point_offsets, sizeof(int));"
    },
    {
        "line": 362,
        "fullcodeline": "sh->size = av_malloc_array(sh->num_entry_point_offsets, sizeof(int));"
    },
    {
        "line": 384,
        "fullcodeline": "av_log(s->avctx, AV_LOG_ERROR, \"too many slice_header_extension_data_bytes\\n\");"
    },
    {
        "line": 44,
        "fullcodeline": "if (sps->width != last_sps->width || sps->height != last_sps->height ||"
    },
    {
        "line": 100,
        "fullcodeline": "sh->slice_type == HEVC_SLICE_B)) {"
    },
    {
        "line": 123,
        "fullcodeline": "if (!sh->first_slice_in_pic_flag && poc != s->poc) {"
    },
    {
        "line": 134,
        "fullcodeline": "if (!sh->short_term_ref_pic_set_sps_flag) {"
    },
    {
        "line": 156,
        "fullcodeline": "if (ret < 0) {"
    },
    {
        "line": 168,
        "fullcodeline": "s->sh.short_term_rps = NULL;"
    },
    {
        "line": 169,
        "fullcodeline": "s->poc               = 0;"
    },
    {
        "line": 179,
        "fullcodeline": "s->nal_unit_type != HEVC_NAL_RASL_N  &&"
    },
    {
        "line": 190,
        "fullcodeline": "sh->slice_sample_adaptive_offset_flag[0] = 0;"
    },
    {
        "line": 191,
        "fullcodeline": "sh->slice_sample_adaptive_offset_flag[1] = 0;"
    },
    {
        "line": 192,
        "fullcodeline": "sh->slice_sample_adaptive_offset_flag[2] = 0;"
    },
    {
        "line": 200,
        "fullcodeline": "if (sh->slice_type == HEVC_SLICE_B)"
    },
    {
        "line": 203,
        "fullcodeline": "if (get_bits1(gb)) { // num_ref_idx_active_override_flag"
    },
    {
        "line": 208,
        "fullcodeline": "if (sh->nb_refs[L0] > HEVC_MAX_REFS || sh->nb_refs[L1] > HEVC_MAX_REFS) {"
    },
    {
        "line": 217,
        "fullcodeline": "if (!nb_refs) {"
    },
    {
        "line": 222,
        "fullcodeline": "if (s->ps.pps->lists_modification_present_flag && nb_refs > 1) {"
    },
    {
        "line": 237,
        "fullcodeline": "if (sh->slice_type == HEVC_SLICE_B)"
    },
    {
        "line": 262,
        "fullcodeline": "if ((s->ps.pps->weighted_pred_flag   && sh->slice_type == HEVC_SLICE_P) ||"
    },
    {
        "line": 270,
        "fullcodeline": "if (sh->max_num_merge_cand < 1 || sh->max_num_merge_cand > 5) {"
    },
    {
        "line": 284,
        "fullcodeline": "sh->slice_cb_qp_offset = 0;"
    },
    {
        "line": 285,
        "fullcodeline": "sh->slice_cr_qp_offset = 0;"
    },
    {
        "line": 291,
        "fullcodeline": "sh->cu_chroma_qp_offset_enabled_flag = 0;"
    },
    {
        "line": 320,
        "fullcodeline": "sh->disable_deblocking_filter_flag = 0;"
    },
    {
        "line": 321,
        "fullcodeline": "sh->beta_offset                    = 0;"
    },
    {
        "line": 322,
        "fullcodeline": "sh->tc_offset                      = 0;"
    },
    {
        "line": 328,
        "fullcodeline": "!sh->disable_deblocking_filter_flag)) {"
    },
    {
        "line": 331,
        "fullcodeline": "sh->slice_loop_filter_across_slices_enabled_flag = s->ps.pps->seq_loop_filter_across_slices_enabled_flag;"
    },
    {
        "line": 334,
        "fullcodeline": "av_log(s->avctx, AV_LOG_ERROR, \"Independent slice segment missing.\\n\");"
    },
    {
        "line": 351,
        "fullcodeline": "if (offset_len < 1 || offset_len > 32) {"
    },
    {
        "line": 363,
        "fullcodeline": "if (!sh->entry_point_offset || !sh->offset || !sh->size) {"
    },
    {
        "line": 368,
        "fullcodeline": "for (i = 0; i < sh->num_entry_point_offsets; i++) {"
    },
    {
        "line": 372,
        "fullcodeline": "if (s->threads_number > 1 && (s->ps.pps->num_tile_rows > 1 || s->ps.pps->num_tile_columns > 1)) {"
    },
    {
        "line": 378,
        "fullcodeline": "s->enable_parallel_tiles = 0;"
    },
    {
        "line": 47,
        "fullcodeline": "sh->no_output_of_prior_pics_flag = 0;"
    },
    {
        "line": 99,
        "fullcodeline": "sh->slice_type == HEVC_SLICE_P ||"
    },
    {
        "line": 124,
        "fullcodeline": "av_log(s->avctx, AV_LOG_WARNING,"
    },
    {
        "line": 128,
        "fullcodeline": "poc = s->poc;"
    },
    {
        "line": 135,
        "fullcodeline": "ret = ff_hevc_decode_short_term_rps(gb, s->avctx, &sh->slice_rps, s->ps.sps, 1);"
    },
    {
        "line": 139,
        "fullcodeline": "sh->short_term_rps = &sh->slice_rps;"
    },
    {
        "line": 157,
        "fullcodeline": "av_log(s->avctx, AV_LOG_WARNING, \"Invalid long term RPS.\\n\");"
    },
    {
        "line": 164,
        "fullcodeline": "sh->slice_temporal_mvp_enabled_flag = get_bits1(gb);"
    },
    {
        "line": 178,
        "fullcodeline": "s->nal_unit_type != HEVC_NAL_RADL_R  &&"
    },
    {
        "line": 186,
        "fullcodeline": "sh->slice_sample_adaptive_offset_flag[1] ="
    },
    {
        "line": 204,
        "fullcodeline": "sh->nb_refs[L0] = get_ue_golomb_long(gb) + 1;"
    },
    {
        "line": 209,
        "fullcodeline": "av_log(s->avctx, AV_LOG_ERROR, \"Too many refs: %d/%d.\\n\","
    },
    {
        "line": 218,
        "fullcodeline": "av_log(s->avctx, AV_LOG_ERROR, \"Zero refs for a frame with P or B slices.\\n\");"
    },
    {
        "line": 223,
        "fullcodeline": "sh->rpl_modification_flag[0] = get_bits1(gb);"
    },
    {
        "line": 238,
        "fullcodeline": "sh->mvd_l1_zero_flag = get_bits1(gb);"
    },
    {
        "line": 241,
        "fullcodeline": "sh->cabac_init_flag = get_bits1(gb);"
    },
    {
        "line": 247,
        "fullcodeline": "sh->collocated_list = L0;"
    },
    {
        "line": 263,
        "fullcodeline": "(s->ps.pps->weighted_bipred_flag && sh->slice_type == HEVC_SLICE_B)) {"
    },
    {
        "line": 264,
        "fullcodeline": "int ret = pred_weight_table(s, gb);"
    },
    {
        "line": 271,
        "fullcodeline": "av_log(s->avctx, AV_LOG_ERROR,"
    },
    {
        "line": 297,
        "fullcodeline": "deblocking_filter_override_flag = get_bits1(gb);"
    },
    {
        "line": 300,
        "fullcodeline": "sh->disable_deblocking_filter_flag = get_bits1(gb);"
    },
    {
        "line": 352,
        "fullcodeline": "sh->num_entry_point_offsets = 0;"
    },
    {
        "line": 353,
        "fullcodeline": "av_log(s->avctx, AV_LOG_ERROR, \"offset_len %d is invalid\\n\", offset_len);"
    },
    {
        "line": 364,
        "fullcodeline": "sh->num_entry_point_offsets = 0;"
    },
    {
        "line": 365,
        "fullcodeline": "av_log(s->avctx, AV_LOG_ERROR, \"Failed to allocate memory\\n\");"
    },
    {
        "line": 369,
        "fullcodeline": "unsigned val = get_bits_long(gb, offset_len);"
    },
    {
        "line": 370,
        "fullcodeline": "sh->entry_point_offset[i] = val + 1; // +1; // +1 to get the size"
    },
    {
        "line": 373,
        "fullcodeline": "s->enable_parallel_tiles = 0; // TODO: you can enable tiles in parallel here"
    },
    {
        "line": 374,
        "fullcodeline": "s->threads_number = 1;"
    },
    {
        "line": 126,
        "fullcodeline": "if (s->avctx->err_recognition & AV_EF_EXPLODE)"
    },
    {
        "line": 136,
        "fullcodeline": "if (ret < 0)"
    },
    {
        "line": 148,
        "fullcodeline": "numbits = av_ceil_log2(s->ps.sps->nb_st_rps);"
    },
    {
        "line": 149,
        "fullcodeline": "rps_idx = numbits > 0 ? get_bits(gb, numbits) : 0;"
    },
    {
        "line": 158,
        "fullcodeline": "if (s->avctx->err_recognition & AV_EF_EXPLODE)"
    },
    {
        "line": 166,
        "fullcodeline": "sh->slice_temporal_mvp_enabled_flag = 0;"
    },
    {
        "line": 177,
        "fullcodeline": "s->nal_unit_type != HEVC_NAL_RADL_N  &&"
    },
    {
        "line": 187,
        "fullcodeline": "sh->slice_sample_adaptive_offset_flag[2] = get_bits1(gb);"
    },
    {
        "line": 205,
        "fullcodeline": "if (sh->slice_type == HEVC_SLICE_B)"
    },
    {
        "line": 229,
        "fullcodeline": "if (sh->slice_type == HEVC_SLICE_B) {"
    },
    {
        "line": 243,
        "fullcodeline": "sh->cabac_init_flag = 0;"
    },
    {
        "line": 248,
        "fullcodeline": "if (sh->slice_type == HEVC_SLICE_B)"
    },
    {
        "line": 251,
        "fullcodeline": "if (sh->nb_refs[sh->collocated_list] > 1) {"
    },
    {
        "line": 265,
        "fullcodeline": "if (ret < 0)"
    },
    {
        "line": 301,
        "fullcodeline": "if (!sh->disable_deblocking_filter_flag) {"
    },
    {
        "line": 366,
        "fullcodeline": "return AVERROR(ENOMEM);"
    },
    {
        "line": 376,
        "fullcodeline": "s->enable_parallel_tiles = 0;"
    },
    {
        "line": 176,
        "fullcodeline": "s->nal_unit_type != HEVC_NAL_STSA_N  &&"
    },
    {
        "line": 206,
        "fullcodeline": "sh->nb_refs[L1] = get_ue_golomb_long(gb) + 1;"
    },
    {
        "line": 230,
        "fullcodeline": "sh->rpl_modification_flag[1] = get_bits1(gb);"
    },
    {
        "line": 249,
        "fullcodeline": "sh->collocated_list = !get_bits1(gb);"
    },
    {
        "line": 252,
        "fullcodeline": "sh->collocated_ref_idx = get_ue_golomb_long(gb);"
    },
    {
        "line": 302,
        "fullcodeline": "int beta_offset_div2 = get_se_golomb(gb);"
    },
    {
        "line": 303,
        "fullcodeline": "int tc_offset_div2   = get_se_golomb(gb) ;"
    },
    {
        "line": 311,
        "fullcodeline": "sh->beta_offset = beta_offset_div2 * 2;"
    },
    {
        "line": 312,
        "fullcodeline": "sh->tc_offset   =   tc_offset_div2 * 2;"
    },
    {
        "line": 45,
        "fullcodeline": "sps->temporal_layer[sps->max_sub_layers - 1].max_dec_pic_buffering !="
    },
    {
        "line": 46,
        "fullcodeline": "last_sps->temporal_layer[last_sps->max_sub_layers - 1].max_dec_pic_buffering)"
    },
    {
        "line": 144,
        "fullcodeline": "av_log(s->avctx, AV_LOG_ERROR, \"No ref lists in the SPS.\\n\");"
    },
    {
        "line": 175,
        "fullcodeline": "s->nal_unit_type != HEVC_NAL_TSA_N   &&"
    },
    {
        "line": 225,
        "fullcodeline": "for (i = 0; i < sh->nb_refs[L0]; i++)"
    },
    {
        "line": 226,
        "fullcodeline": "sh->list_entry_lx[0][i] = get_bits(gb, av_ceil_log2(nb_refs));"
    },
    {
        "line": 231,
        "fullcodeline": "if (sh->rpl_modification_flag[1] == 1)"
    },
    {
        "line": 253,
        "fullcodeline": "if (sh->collocated_ref_idx >= sh->nb_refs[sh->collocated_list]) {"
    },
    {
        "line": 304,
        "fullcodeline": "if (beta_offset_div2 < -6 || beta_offset_div2 > 6 ||"
    },
    {
        "line": 174,
        "fullcodeline": "s->nal_unit_type != HEVC_NAL_TRAIL_N &&"
    },
    {
        "line": 254,
        "fullcodeline": "av_log(s->avctx, AV_LOG_ERROR,"
    },
    {
        "line": 305,
        "fullcodeline": "tc_offset_div2   < -6 || tc_offset_div2   > 6) {"
    },
    {
        "line": 306,
        "fullcodeline": "av_log(s->avctx, AV_LOG_ERROR,"
    },
    {
        "line": 232,
        "fullcodeline": "for (i = 0; i < sh->nb_refs[L1]; i++)"
    },
    {
        "line": 233,
        "fullcodeline": "sh->list_entry_lx[1][i] = get_bits(gb, av_ceil_log2(nb_refs));"
    }
]