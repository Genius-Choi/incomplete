[
    {
        "line": 3,
        "fullcodeline": "GetBitContext *gb = &s->HEVClc->gb;"
    },
    {
        "line": 4,
        "fullcodeline": "SliceHeader *sh   = &s->sh;"
    },
    {
        "line": 8,
        "fullcodeline": "sh->first_slice_in_pic_flag = get_bits1(gb);"
    },
    {
        "line": 15,
        "fullcodeline": "sh->no_output_of_prior_pics_flag = 0;"
    },
    {
        "line": 19,
        "fullcodeline": "sh->pps_id = get_ue_golomb_long(gb);"
    },
    {
        "line": 59,
        "fullcodeline": "sh->dependent_slice_segment_flag = 0;"
    },
    {
        "line": 387,
        "fullcodeline": "sh->slice_qp = 26U + s->ps.pps->pic_init_qp_minus26 + sh->slice_qp_delta;"
    },
    {
        "line": 9,
        "fullcodeline": "if ((IS_IDR(s) || IS_BLA(s)) && sh->first_slice_in_pic_flag) {"
    },
    {
        "line": 16,
        "fullcodeline": "if (IS_IRAP(s))"
    },
    {
        "line": 20,
        "fullcodeline": "if (sh->pps_id >= HEVC_MAX_PPS_COUNT || !s->ps.pps_list[sh->pps_id]) {"
    },
    {
        "line": 33,
        "fullcodeline": "if (s->ps.sps != (HEVCSPS*)s->ps.sps_list[s->ps.pps->sps_id]->data) {"
    },
    {
        "line": 60,
        "fullcodeline": "if (!sh->first_slice_in_pic_flag) {"
    },
    {
        "line": 400,
        "fullcodeline": "if (!s->sh.slice_ctb_addr_rs && s->sh.dependent_slice_segment_flag) {"
    },
    {
        "line": 411,
        "fullcodeline": "s->HEVClc->first_qp_group = !s->sh.dependent_slice_segment_flag;"
    },
    {
        "line": 10,
        "fullcodeline": "s->seq_decode = (s->seq_decode + 1) & 0xff;"
    },
    {
        "line": 11,
        "fullcodeline": "s->max_ra     = INT_MAX;"
    },
    {
        "line": 17,
        "fullcodeline": "sh->no_output_of_prior_pics_flag = get_bits1(gb);"
    },
    {
        "line": 21,
        "fullcodeline": "av_log(s->avctx, AV_LOG_ERROR, \"PPS id out of range: %d\\n\", sh->pps_id);"
    },
    {
        "line": 24,
        "fullcodeline": "if (!sh->first_slice_in_pic_flag &&"
    },
    {
        "line": 25,
        "fullcodeline": "s->ps.pps != (HEVCPPS*)s->ps.pps_list[sh->pps_id]->data) {"
    },
    {
        "line": 30,
        "fullcodeline": "if (s->nal_unit_type == HEVC_NAL_CRA_NUT && s->last_eos == 1)"
    },
    {
        "line": 34,
        "fullcodeline": "const HEVCSPS *sps = (HEVCSPS*)s->ps.sps_list[s->ps.pps->sps_id]->data;"
    },
    {
        "line": 35,
        "fullcodeline": "const HEVCSPS *last_sps = s->ps.sps;"
    },
    {
        "line": 44,
        "fullcodeline": "ff_hevc_clear_refs(s);"
    },
    {
        "line": 46,
        "fullcodeline": "ret = set_sps(s, sps, sps->pix_fmt);"
    },
    {
        "line": 50,
        "fullcodeline": "pix_fmt = get_format(s, sps);"
    },
    {
        "line": 53,
        "fullcodeline": "s->avctx->pix_fmt = pix_fmt;"
    },
    {
        "line": 55,
        "fullcodeline": "s->seq_decode = (s->seq_decode + 1) & 0xff;"
    },
    {
        "line": 56,
        "fullcodeline": "s->max_ra     = INT_MAX;"
    },
    {
        "line": 66,
        "fullcodeline": "slice_address_length = av_ceil_log2(s->ps.sps->ctb_width *"
    },
    {
        "line": 68,
        "fullcodeline": "sh->slice_segment_addr = get_bitsz(gb, slice_address_length);"
    },
    {
        "line": 87,
        "fullcodeline": "s->slice_initialized = 0;"
    },
    {
        "line": 92,
        "fullcodeline": "sh->slice_type = get_ue_golomb_long(gb);"
    },
    {
        "line": 273,
        "fullcodeline": "sh->slice_qp_delta = get_se_golomb(gb);"
    },
    {
        "line": 335,
        "fullcodeline": "unsigned num_entry_point_offsets = get_ue_golomb_long(gb);"
    },
    {
        "line": 342,
        "fullcodeline": "sh->num_entry_point_offsets = num_entry_point_offsets;"
    },
    {
        "line": 377,
        "fullcodeline": "unsigned int length = get_ue_golomb_long(gb);"
    },
    {
        "line": 388,
        "fullcodeline": "if (sh->slice_qp > 51 ||"
    },
    {
        "line": 389,
        "fullcodeline": "sh->slice_qp < -s->ps.sps->qp_bd_offset) {"
    },
    {
        "line": 405,
        "fullcodeline": "if (get_bits_left(gb) < 0) {"
    },
    {
        "line": 12,
        "fullcodeline": "if (IS_IDR(s))"
    },
    {
        "line": 47,
        "fullcodeline": "if (ret < 0)"
    },
    {
        "line": 51,
        "fullcodeline": "if (pix_fmt < 0)"
    },
    {
        "line": 69,
        "fullcodeline": "if (sh->slice_segment_addr >= s->ps.sps->ctb_width * s->ps.sps->ctb_height) {"
    },
    {
        "line": 76,
        "fullcodeline": "if (!sh->dependent_slice_segment_flag) {"
    },
    {
        "line": 81,
        "fullcodeline": "sh->slice_segment_addr = sh->slice_addr = 0;"
    },
    {
        "line": 82,
        "fullcodeline": "s->slice_idx           = 0;"
    },
    {
        "line": 83,
        "fullcodeline": "s->slice_initialized   = 0;"
    },
    {
        "line": 89,
        "fullcodeline": "for (i = 0; i < s->ps.pps->num_extra_slice_header_bits; i++)"
    },
    {
        "line": 90,
        "fullcodeline": "skip_bits(gb, 1);  // slice_reserved_undetermined_flag[]"
    },
    {
        "line": 190,
        "fullcodeline": "sh->nb_refs[L0] = sh->nb_refs[L1] = 0;"
    },
    {
        "line": 191,
        "fullcodeline": "if (sh->slice_type == HEVC_SLICE_P || sh->slice_type == HEVC_SLICE_B) {"
    },
    {
        "line": 320,
        "fullcodeline": "if (s->ps.pps->seq_loop_filter_across_slices_enabled_flag &&"
    },
    {
        "line": 337,
        "fullcodeline": "if (num_entry_point_offsets > get_bits_left(gb)) {"
    },
    {
        "line": 343,
        "fullcodeline": "if (sh->num_entry_point_offsets > 0) {"
    },
    {
        "line": 382,
        "fullcodeline": "for (i = 0; i < length; i++)"
    },
    {
        "line": 383,
        "fullcodeline": "skip_bits(gb, 8);  // slice_header_extension_data_byte"
    },
    {
        "line": 394,
        "fullcodeline": "-s->ps.sps->qp_bd_offset);"
    },
    {
        "line": 407,
        "fullcodeline": "\"Overread slice header by %d bits\\n\", -get_bits_left(gb));"
    },
    {
        "line": 13,
        "fullcodeline": "ff_hevc_clear_refs(s);"
    },
    {
        "line": 38,
        "fullcodeline": "if (last_sps && IS_IRAP(s) && s->nal_unit_type != HEVC_NAL_CRA_NUT) {"
    },
    {
        "line": 64,
        "fullcodeline": "sh->dependent_slice_segment_flag = get_bits1(gb);"
    },
    {
        "line": 78,
        "fullcodeline": "s->slice_idx++;"
    },
    {
        "line": 93,
        "fullcodeline": "if (!(sh->slice_type == HEVC_SLICE_I ||"
    },
    {
        "line": 100,
        "fullcodeline": "if (IS_IRAP(s) && sh->slice_type != HEVC_SLICE_I) {"
    },
    {
        "line": 113,
        "fullcodeline": "if (!IS_IDR(s)) {"
    },
    {
        "line": 116,
        "fullcodeline": "sh->pic_order_cnt_lsb = get_bits(gb, s->ps.sps->log2_max_poc_lsb);"
    },
    {
        "line": 117,
        "fullcodeline": "poc = ff_hevc_compute_poc(s->ps.sps, s->pocTid0, sh->pic_order_cnt_lsb, s->nal_unit_type);"
    },
    {
        "line": 125,
        "fullcodeline": "s->poc = poc;"
    },
    {
        "line": 127,
        "fullcodeline": "sh->short_term_ref_pic_set_sps_flag = get_bits1(gb);"
    },
    {
        "line": 128,
        "fullcodeline": "pos = get_bits_left(gb);"
    },
    {
        "line": 149,
        "fullcodeline": "pos = get_bits_left(gb);"
    },
    {
        "line": 150,
        "fullcodeline": "ret = decode_lt_rps(s, &sh->long_term_rps, gb);"
    },
    {
        "line": 168,
        "fullcodeline": "if (sh->first_slice_in_pic_flag && s->temporal_id == 0 &&"
    },
    {
        "line": 175,
        "fullcodeline": "s->nal_unit_type != HEVC_NAL_RASL_R)"
    },
    {
        "line": 176,
        "fullcodeline": "s->pocTid0 = s->poc;"
    },
    {
        "line": 179,
        "fullcodeline": "sh->slice_sample_adaptive_offset_flag[0] = get_bits1(gb);"
    },
    {
        "line": 194,
        "fullcodeline": "sh->nb_refs[L0] = s->ps.pps->num_ref_idx_l0_default_active;"
    },
    {
        "line": 211,
        "fullcodeline": "nb_refs = ff_hevc_frame_nb_refs(s);"
    },
    {
        "line": 264,
        "fullcodeline": "sh->max_num_merge_cand = 5 - get_ue_golomb_long(gb);"
    },
    {
        "line": 321,
        "fullcodeline": "(sh->slice_sample_adaptive_offset_flag[0] ||"
    },
    {
        "line": 344,
        "fullcodeline": "int offset_len = get_ue_golomb_long(gb) + 1;"
    },
    {
        "line": 352,
        "fullcodeline": "av_freep(&sh->entry_point_offset);"
    },
    {
        "line": 353,
        "fullcodeline": "av_freep(&sh->offset);"
    },
    {
        "line": 354,
        "fullcodeline": "av_freep(&sh->size);"
    },
    {
        "line": 355,
        "fullcodeline": "sh->entry_point_offset = av_malloc_array(sh->num_entry_point_offsets, sizeof(unsigned));"
    },
    {
        "line": 356,
        "fullcodeline": "sh->offset = av_malloc_array(sh->num_entry_point_offsets, sizeof(int));"
    },
    {
        "line": 357,
        "fullcodeline": "sh->size = av_malloc_array(sh->num_entry_point_offsets, sizeof(int));"
    },
    {
        "line": 378,
        "fullcodeline": "if (length*8LL > get_bits_left(gb)) {"
    },
    {
        "line": 95,
        "fullcodeline": "sh->slice_type == HEVC_SLICE_B)) {"
    },
    {
        "line": 108,
        "fullcodeline": "sh->pic_output_flag = get_bits1(gb);"
    },
    {
        "line": 111,
        "fullcodeline": "sh->colour_plane_id = get_bits(gb, 2);"
    },
    {
        "line": 147,
        "fullcodeline": "sh->short_term_ref_pic_set_size = pos - get_bits_left(gb);"
    },
    {
        "line": 156,
        "fullcodeline": "sh->long_term_ref_pic_set_size = pos - get_bits_left(gb);"
    },
    {
        "line": 163,
        "fullcodeline": "s->sh.short_term_rps = NULL;"
    },
    {
        "line": 164,
        "fullcodeline": "s->poc               = 0;"
    },
    {
        "line": 174,
        "fullcodeline": "s->nal_unit_type != HEVC_NAL_RASL_N  &&"
    },
    {
        "line": 185,
        "fullcodeline": "sh->slice_sample_adaptive_offset_flag[0] = 0;"
    },
    {
        "line": 186,
        "fullcodeline": "sh->slice_sample_adaptive_offset_flag[1] = 0;"
    },
    {
        "line": 195,
        "fullcodeline": "if (sh->slice_type == HEVC_SLICE_B)"
    },
    {
        "line": 198,
        "fullcodeline": "if (get_bits1(gb)) { // num_ref_idx_active_override_flag"
    },
    {
        "line": 212,
        "fullcodeline": "if (!nb_refs) {"
    },
    {
        "line": 232,
        "fullcodeline": "if (sh->slice_type == HEVC_SLICE_B)"
    },
    {
        "line": 276,
        "fullcodeline": "sh->slice_cb_qp_offset = get_se_golomb(gb);"
    },
    {
        "line": 277,
        "fullcodeline": "sh->slice_cr_qp_offset = get_se_golomb(gb);"
    },
    {
        "line": 284,
        "fullcodeline": "sh->cu_chroma_qp_offset_enabled_flag = get_bits1(gb);"
    },
    {
        "line": 315,
        "fullcodeline": "sh->disable_deblocking_filter_flag = 0;"
    },
    {
        "line": 323,
        "fullcodeline": "!sh->disable_deblocking_filter_flag)) {"
    },
    {
        "line": 324,
        "fullcodeline": "sh->slice_loop_filter_across_slices_enabled_flag = get_bits1(gb);"
    },
    {
        "line": 363,
        "fullcodeline": "for (i = 0; i < sh->num_entry_point_offsets; i++) {"
    },
    {
        "line": 39,
        "fullcodeline": "if (sps->width != last_sps->width || sps->height != last_sps->height ||"
    },
    {
        "line": 40,
        "fullcodeline": "sps->temporal_layer[sps->max_sub_layers - 1].max_dec_pic_buffering !="
    },
    {
        "line": 94,
        "fullcodeline": "sh->slice_type == HEVC_SLICE_P ||"
    },
    {
        "line": 118,
        "fullcodeline": "if (!sh->first_slice_in_pic_flag && poc != s->poc) {"
    },
    {
        "line": 119,
        "fullcodeline": "av_log(s->avctx, AV_LOG_WARNING,"
    },
    {
        "line": 123,
        "fullcodeline": "poc = s->poc;"
    },
    {
        "line": 130,
        "fullcodeline": "ret = ff_hevc_decode_short_term_rps(gb, s->avctx, &sh->slice_rps, s->ps.sps, 1);"
    },
    {
        "line": 152,
        "fullcodeline": "av_log(s->avctx, AV_LOG_WARNING, \"Invalid long term RPS.\\n\");"
    },
    {
        "line": 173,
        "fullcodeline": "s->nal_unit_type != HEVC_NAL_RADL_R  &&"
    },
    {
        "line": 181,
        "fullcodeline": "sh->slice_sample_adaptive_offset_flag[1] ="
    },
    {
        "line": 196,
        "fullcodeline": "sh->nb_refs[L1] = s->ps.pps->num_ref_idx_l1_default_active;"
    },
    {
        "line": 199,
        "fullcodeline": "sh->nb_refs[L0] = get_ue_golomb_long(gb) + 1;"
    },
    {
        "line": 203,
        "fullcodeline": "if (sh->nb_refs[L0] > HEVC_MAX_REFS || sh->nb_refs[L1] > HEVC_MAX_REFS) {"
    },
    {
        "line": 217,
        "fullcodeline": "if (s->ps.pps->lists_modification_present_flag && nb_refs > 1) {"
    },
    {
        "line": 257,
        "fullcodeline": "if ((s->ps.pps->weighted_pred_flag   && sh->slice_type == HEVC_SLICE_P) ||"
    },
    {
        "line": 258,
        "fullcodeline": "(s->ps.pps->weighted_bipred_flag && sh->slice_type == HEVC_SLICE_B)) {"
    },
    {
        "line": 259,
        "fullcodeline": "int ret = pred_weight_table(s, gb);"
    },
    {
        "line": 265,
        "fullcodeline": "if (sh->max_num_merge_cand < 1 || sh->max_num_merge_cand > 5) {"
    },
    {
        "line": 295,
        "fullcodeline": "sh->disable_deblocking_filter_flag = get_bits1(gb);"
    },
    {
        "line": 346,
        "fullcodeline": "if (offset_len < 1 || offset_len > 32) {"
    },
    {
        "line": 358,
        "fullcodeline": "if (!sh->entry_point_offset || !sh->offset || !sh->size) {"
    },
    {
        "line": 364,
        "fullcodeline": "unsigned val = get_bits_long(gb, offset_len);"
    },
    {
        "line": 367,
        "fullcodeline": "if (s->threads_number > 1 && (s->ps.pps->num_tile_rows > 1 || s->ps.pps->num_tile_columns > 1)) {"
    },
    {
        "line": 121,
        "fullcodeline": "if (s->avctx->err_recognition & AV_EF_EXPLODE)"
    },
    {
        "line": 131,
        "fullcodeline": "if (ret < 0)"
    },
    {
        "line": 143,
        "fullcodeline": "numbits = av_ceil_log2(s->ps.sps->nb_st_rps);"
    },
    {
        "line": 153,
        "fullcodeline": "if (s->avctx->err_recognition & AV_EF_EXPLODE)"
    },
    {
        "line": 159,
        "fullcodeline": "sh->slice_temporal_mvp_enabled_flag = get_bits1(gb);"
    },
    {
        "line": 172,
        "fullcodeline": "s->nal_unit_type != HEVC_NAL_RADL_N  &&"
    },
    {
        "line": 182,
        "fullcodeline": "sh->slice_sample_adaptive_offset_flag[2] = get_bits1(gb);"
    },
    {
        "line": 200,
        "fullcodeline": "if (sh->slice_type == HEVC_SLICE_B)"
    },
    {
        "line": 218,
        "fullcodeline": "sh->rpl_modification_flag[0] = get_bits1(gb);"
    },
    {
        "line": 224,
        "fullcodeline": "if (sh->slice_type == HEVC_SLICE_B) {"
    },
    {
        "line": 233,
        "fullcodeline": "sh->mvd_l1_zero_flag = get_bits1(gb);"
    },
    {
        "line": 236,
        "fullcodeline": "sh->cabac_init_flag = get_bits1(gb);"
    },
    {
        "line": 243,
        "fullcodeline": "if (sh->slice_type == HEVC_SLICE_B)"
    },
    {
        "line": 246,
        "fullcodeline": "if (sh->nb_refs[sh->collocated_list] > 1) {"
    },
    {
        "line": 260,
        "fullcodeline": "if (ret < 0)"
    },
    {
        "line": 292,
        "fullcodeline": "deblocking_filter_override_flag = get_bits1(gb);"
    },
    {
        "line": 296,
        "fullcodeline": "if (!sh->disable_deblocking_filter_flag) {"
    },
    {
        "line": 310,
        "fullcodeline": "sh->disable_deblocking_filter_flag = s->ps.pps->disable_dbf;"
    },
    {
        "line": 361,
        "fullcodeline": "return AVERROR(ENOMEM);"
    },
    {
        "line": 138,
        "fullcodeline": "if (!s->ps.sps->nb_st_rps) {"
    },
    {
        "line": 171,
        "fullcodeline": "s->nal_unit_type != HEVC_NAL_STSA_N  &&"
    },
    {
        "line": 201,
        "fullcodeline": "sh->nb_refs[L1] = get_ue_golomb_long(gb) + 1;"
    },
    {
        "line": 225,
        "fullcodeline": "sh->rpl_modification_flag[1] = get_bits1(gb);"
    },
    {
        "line": 247,
        "fullcodeline": "sh->collocated_ref_idx = get_ue_golomb_long(gb);"
    },
    {
        "line": 297,
        "fullcodeline": "int beta_offset_div2 = get_se_golomb(gb);"
    },
    {
        "line": 298,
        "fullcodeline": "int tc_offset_div2   = get_se_golomb(gb) ;"
    },
    {
        "line": 144,
        "fullcodeline": "rps_idx = numbits > 0 ? get_bits(gb, numbits) : 0;"
    },
    {
        "line": 170,
        "fullcodeline": "s->nal_unit_type != HEVC_NAL_TSA_N   &&"
    },
    {
        "line": 220,
        "fullcodeline": "for (i = 0; i < sh->nb_refs[L0]; i++)"
    },
    {
        "line": 244,
        "fullcodeline": "sh->collocated_list = !get_bits1(gb);"
    },
    {
        "line": 248,
        "fullcodeline": "if (sh->collocated_ref_idx >= sh->nb_refs[sh->collocated_list]) {"
    },
    {
        "line": 306,
        "fullcodeline": "sh->beta_offset = beta_offset_div2 * 2;"
    },
    {
        "line": 307,
        "fullcodeline": "sh->tc_offset   =   tc_offset_div2 * 2;"
    },
    {
        "line": 169,
        "fullcodeline": "s->nal_unit_type != HEVC_NAL_TRAIL_N &&"
    },
    {
        "line": 221,
        "fullcodeline": "sh->list_entry_lx[0][i] = get_bits(gb, av_ceil_log2(nb_refs));"
    },
    {
        "line": 299,
        "fullcodeline": "if (beta_offset_div2 < -6 || beta_offset_div2 > 6 ||"
    },
    {
        "line": 300,
        "fullcodeline": "tc_offset_div2   < -6 || tc_offset_div2   > 6) {"
    },
    {
        "line": 227,
        "fullcodeline": "for (i = 0; i < sh->nb_refs[L1]; i++)"
    },
    {
        "line": 228,
        "fullcodeline": "sh->list_entry_lx[1][i] = get_bits(gb, av_ceil_log2(nb_refs));"
    }
]