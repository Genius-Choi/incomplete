[
    {
        "line": 3,
        "fullcodeline": "code = \"\"\""
    },
    {
        "line": 20,
        "fullcodeline": "contract = get_contract_with_gas_estimation(code)"
    },
    {
        "line": 22,
        "fullcodeline": "i = 0"
    },
    {
        "line": 24,
        "fullcodeline": "def bytes_for_len(n):"
    },
    {
        "line": 39,
        "fullcodeline": "assert contract.small_bytes1(a, b) == a + b"
    },
    {
        "line": 45,
        "fullcodeline": "assert contract.small_bytes2(a, b) == a + b"
    },
    {
        "line": 48,
        "fullcodeline": "assert contract.small_bytes3(a, b) == a + b"
    },
    {
        "line": 57,
        "fullcodeline": "assert contract.small_bytes4(a, b, c) == a + b + c"
    },
    {
        "line": 35,
        "fullcodeline": "a, b = bytes_for_len(1), bytes_for_len(2)"
    },
    {
        "line": 36,
        "fullcodeline": "assert contract.small_bytes1(a, b) == a + b"
    },
    {
        "line": 38,
        "fullcodeline": "a, b = bytes_for_len(1), bytes_for_len(1)"
    },
    {
        "line": 41,
        "fullcodeline": "a, b = bytes_for_len(1), bytes_for_len(2)"
    },
    {
        "line": 42,
        "fullcodeline": "assert contract.small_bytes2(a, b) == a + b"
    },
    {
        "line": 44,
        "fullcodeline": "a, b = b\"\", bytes_for_len(2)"
    },
    {
        "line": 47,
        "fullcodeline": "a, b = bytes_for_len(4), bytes_for_len(32)"
    },
    {
        "line": 50,
        "fullcodeline": "a, b, c = bytes_for_len(8), bytes_for_len(32), bytes_for_len(8)"
    },
    {
        "line": 51,
        "fullcodeline": "assert contract.small_bytes4(a, b, c) == a + b + c"
    },
    {
        "line": 53,
        "fullcodeline": "a, b, c = bytes_for_len(8), bytes_for_len(1), bytes_for_len(8)"
    },
    {
        "line": 54,
        "fullcodeline": "assert contract.small_bytes4(a, b, c) == a + b + c"
    },
    {
        "line": 56,
        "fullcodeline": "a, b, c = bytes_for_len(8), bytes_for_len(0), bytes_for_len(8)"
    }
]