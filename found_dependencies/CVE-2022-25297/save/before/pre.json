[
    {
        "line": 3,
        "fullcodeline": "assert(!path.empty());"
    },
    {
        "line": 4,
        "fullcodeline": "if (fileName_.empty())"
    },
    {
        "line": 6,
        "fullcodeline": "filesystem::path fsPath(utils::toNativePath(path));"
    },
    {
        "line": 27,
        "fullcodeline": "return saveTo(fsPath / fsFileName);"
    },
    {
        "line": 7,
        "fullcodeline": "if (!fsPath.is_absolute() &&"
    },
    {
        "line": 8,
        "fullcodeline": "(!fsPath.has_parent_path() ||"
    },
    {
        "line": 13,
        "fullcodeline": "fsPath = fsUploadPath / fsPath;"
    },
    {
        "line": 16,
        "fullcodeline": "if (!filesystem::exists(fsPath))"
    },
    {
        "line": 18,
        "fullcodeline": "LOG_TRACE << \"create path:\" << fsPath;"
    },
    {
        "line": 20,
        "fullcodeline": "filesystem::create_directories(fsPath, err);"
    },
    {
        "line": 5,
        "fullcodeline": "return -1;"
    },
    {
        "line": 9,
        "fullcodeline": "(fsPath.begin()->string() != \".\" && fsPath.begin()->string() != \"..\")))"
    },
    {
        "line": 11,
        "fullcodeline": "filesystem::path fsUploadPath(utils::toNativePath("
    },
    {
        "line": 12,
        "fullcodeline": "HttpAppFrameworkImpl::instance().getUploadPath()));"
    },
    {
        "line": 24,
        "fullcodeline": "return -1;"
    }
]