[
    {
        "line": 3,
        "fullcodeline": "opj_pi_comp_t *comp = NULL;"
    },
    {
        "line": 4,
        "fullcodeline": "opj_pi_resolution_t *res = NULL;"
    },
    {
        "line": 5,
        "fullcodeline": "long index = 0;"
    },
    {
        "line": 7,
        "fullcodeline": "if (!pi->first) {"
    },
    {
        "line": 15,
        "fullcodeline": "for (pi->layno = pi->poc.layno0; pi->layno < pi->poc.layno1; pi->layno++) {"
    },
    {
        "line": 8,
        "fullcodeline": "comp = &pi->comps[pi->compno];"
    },
    {
        "line": 9,
        "fullcodeline": "res = &comp->resolutions[pi->resno];"
    },
    {
        "line": 12,
        "fullcodeline": "pi->first = 0;"
    },
    {
        "line": 16,
        "fullcodeline": "for (pi->resno = pi->poc.resno0; pi->resno < pi->poc.resno1;"
    },
    {
        "line": 17,
        "fullcodeline": "pi->resno++) {"
    },
    {
        "line": 18,
        "fullcodeline": "for (pi->compno = pi->poc.compno0; pi->compno < pi->poc.compno1; pi->compno++) {"
    },
    {
        "line": 19,
        "fullcodeline": "comp = &pi->comps[pi->compno];"
    },
    {
        "line": 23,
        "fullcodeline": "res = &comp->resolutions[pi->resno];"
    },
    {
        "line": 20,
        "fullcodeline": "if (pi->resno >= comp->numresolutions) {"
    },
    {
        "line": 24,
        "fullcodeline": "if (!pi->tp_on) {"
    },
    {
        "line": 27,
        "fullcodeline": "for (pi->precno = pi->poc.precno0; pi->precno < pi->poc.precno1; pi->precno++) {"
    },
    {
        "line": 25,
        "fullcodeline": "pi->poc.precno1 = res->pw * res->ph;"
    },
    {
        "line": 28,
        "fullcodeline": "index = pi->layno * pi->step_l + pi->resno * pi->step_r + pi->compno *"
    },
    {
        "line": 31,
        "fullcodeline": "if (index >= pi->include_size) {"
    },
    {
        "line": 35,
        "fullcodeline": "if (!pi->include[index]) {"
    },
    {
        "line": 29,
        "fullcodeline": "pi->step_c + pi->precno * pi->step_p;"
    },
    {
        "line": 32,
        "fullcodeline": "opj_pi_emit_error(pi, \"Invalid access to pi->include\");"
    }
]