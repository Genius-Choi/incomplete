[
    {
        "line": 47,
        "fullcodeline": "*out = '\\x0';  /* NUL terminate the string */"
    },
    {
        "line": 8,
        "fullcodeline": "if (!strlen(text)) return \"\";"
    },
    {
        "line": 10,
        "fullcodeline": "for (out=escaped, len=0; *text; ++len, ++out, ++text) {"
    },
    {
        "line": 12,
        "fullcodeline": "if ((len + 8) > escaped_size) {"
    },
    {
        "line": 14,
        "fullcodeline": "escaped_size += 128;"
    },
    {
        "line": 15,
        "fullcodeline": "bigger_escaped = realloc(escaped, escaped_size);"
    },
    {
        "line": 23,
        "fullcodeline": "out = bigger_escaped + len;"
    },
    {
        "line": 24,
        "fullcodeline": "escaped = bigger_escaped;"
    },
    {
        "line": 28,
        "fullcodeline": "strcpy(out, \"&amp;\");"
    },
    {
        "line": 29,
        "fullcodeline": "len += strlen(out) - 1;"
    },
    {
        "line": 30,
        "fullcodeline": "out = escaped + len;"
    },
    {
        "line": 33,
        "fullcodeline": "strcpy(out, \"&lt;\");"
    },
    {
        "line": 34,
        "fullcodeline": "len += strlen(out) - 1;"
    },
    {
        "line": 35,
        "fullcodeline": "out = escaped + len;"
    },
    {
        "line": 38,
        "fullcodeline": "strcpy(out, \"&gt;\");"
    },
    {
        "line": 39,
        "fullcodeline": "len += strlen(out) - 1;"
    },
    {
        "line": 40,
        "fullcodeline": "out = escaped + len;"
    },
    {
        "line": 16,
        "fullcodeline": "if (!bigger_escaped) {"
    },
    {
        "line": 17,
        "fullcodeline": "free(escaped);\t/* avoid leaking memory */"
    },
    {
        "line": 18,
        "fullcodeline": "escaped = NULL;"
    },
    {
        "line": 19,
        "fullcodeline": "escaped_size = 0;"
    }
]