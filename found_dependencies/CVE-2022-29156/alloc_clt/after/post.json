[
    {
        "line": 17,
        "fullcodeline": "clt = kzalloc(sizeof(*clt), GFP_KERNEL);"
    },
    {
        "line": 27,
        "fullcodeline": "clt->dev.class = rtrs_clt_dev_class;"
    },
    {
        "line": 28,
        "fullcodeline": "clt->dev.release = rtrs_clt_dev_release;"
    },
    {
        "line": 29,
        "fullcodeline": "uuid_gen(&clt->paths_uuid);"
    },
    {
        "line": 30,
        "fullcodeline": "INIT_LIST_HEAD_RCU(&clt->paths_list);"
    },
    {
        "line": 31,
        "fullcodeline": "clt->paths_num = paths_num;"
    },
    {
        "line": 32,
        "fullcodeline": "clt->paths_up = MAX_PATHS_NUM;"
    },
    {
        "line": 33,
        "fullcodeline": "clt->port = port;"
    },
    {
        "line": 34,
        "fullcodeline": "clt->pdu_sz = pdu_sz;"
    },
    {
        "line": 35,
        "fullcodeline": "clt->max_segments = RTRS_MAX_SEGMENTS;"
    },
    {
        "line": 36,
        "fullcodeline": "clt->reconnect_delay_sec = reconnect_delay_sec;"
    },
    {
        "line": 37,
        "fullcodeline": "clt->max_reconnect_attempts = max_reconnect_attempts;"
    },
    {
        "line": 38,
        "fullcodeline": "clt->priv = priv;"
    },
    {
        "line": 39,
        "fullcodeline": "clt->link_ev = link_ev;"
    },
    {
        "line": 40,
        "fullcodeline": "clt->mp_policy = MP_POLICY_MIN_INFLIGHT;"
    },
    {
        "line": 41,
        "fullcodeline": "strscpy(clt->sessname, sessname, sizeof(clt->sessname));"
    },
    {
        "line": 42,
        "fullcodeline": "init_waitqueue_head(&clt->permits_wait);"
    },
    {
        "line": 43,
        "fullcodeline": "mutex_init(&clt->paths_ev_mutex);"
    },
    {
        "line": 44,
        "fullcodeline": "mutex_init(&clt->paths_mutex);"
    },
    {
        "line": 45,
        "fullcodeline": "device_initialize(&clt->dev);"
    },
    {
        "line": 47,
        "fullcodeline": "err = dev_set_name(&clt->dev, \"%s\", sessname);"
    },
    {
        "line": 55,
        "fullcodeline": "dev_set_uevent_suppress(&clt->dev, true);"
    },
    {
        "line": 56,
        "fullcodeline": "err = device_add(&clt->dev);"
    },
    {
        "line": 60,
        "fullcodeline": "clt->kobj_paths = kobject_create_and_add(\"paths\", &clt->dev.kobj);"
    },
    {
        "line": 65,
        "fullcodeline": "err = rtrs_clt_create_sysfs_root_files(clt);"
    },
    {
        "line": 71,
        "fullcodeline": "dev_set_uevent_suppress(&clt->dev, false);"
    },
    {
        "line": 72,
        "fullcodeline": "kobject_uevent(&clt->dev.kobj, KOBJ_ADD);"
    },
    {
        "line": 76,
        "fullcodeline": "device_del(&clt->dev);"
    },
    {
        "line": 78,
        "fullcodeline": "free_percpu(clt->pcpu_path);"
    },
    {
        "line": 79,
        "fullcodeline": "put_device(&clt->dev);"
    },
    {
        "line": 11,
        "fullcodeline": "if (!paths_num || paths_num > MAX_PATHS_NUM)"
    },
    {
        "line": 14,
        "fullcodeline": "if (strlen(sessname) >= sizeof(clt->sessname))"
    },
    {
        "line": 18,
        "fullcodeline": "if (!clt)"
    },
    {
        "line": 22,
        "fullcodeline": "if (!clt->pcpu_path) {"
    },
    {
        "line": 61,
        "fullcodeline": "if (!clt->kobj_paths) {"
    },
    {
        "line": 80,
        "fullcodeline": "return ERR_PTR(err);"
    },
    {
        "line": 23,
        "fullcodeline": "kfree(clt);"
    },
    {
        "line": 62,
        "fullcodeline": "err = -ENOMEM;"
    },
    {
        "line": 67,
        "fullcodeline": "kobject_del(clt->kobj_paths);"
    },
    {
        "line": 68,
        "fullcodeline": "kobject_put(clt->kobj_paths);"
    },
    {
        "line": 12,
        "fullcodeline": "return ERR_PTR(-EINVAL);"
    },
    {
        "line": 15,
        "fullcodeline": "return ERR_PTR(-EINVAL);"
    },
    {
        "line": 19,
        "fullcodeline": "return ERR_PTR(-ENOMEM);"
    },
    {
        "line": 24,
        "fullcodeline": "return ERR_PTR(-ENOMEM);"
    }
]