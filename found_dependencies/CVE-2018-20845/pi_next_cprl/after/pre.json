[
    {
        "line": 3,
        "fullcodeline": "opj_pi_comp_t *comp = NULL;"
    },
    {
        "line": 4,
        "fullcodeline": "opj_pi_resolution_t *res = NULL;"
    },
    {
        "line": 5,
        "fullcodeline": "long index = 0;"
    },
    {
        "line": 7,
        "fullcodeline": "if (!pi->first) {"
    },
    {
        "line": 14,
        "fullcodeline": "for (pi->compno = pi->poc.compno0; pi->compno < pi->poc.compno1; pi->compno++) {"
    },
    {
        "line": 8,
        "fullcodeline": "comp = &pi->comps[pi->compno];"
    },
    {
        "line": 16,
        "fullcodeline": "comp = &pi->comps[pi->compno];"
    },
    {
        "line": 17,
        "fullcodeline": "pi->dx = 0;"
    },
    {
        "line": 18,
        "fullcodeline": "pi->dy = 0;"
    },
    {
        "line": 11,
        "fullcodeline": "pi->first = 0;"
    },
    {
        "line": 19,
        "fullcodeline": "for (resno = 0; resno < comp->numresolutions; resno++) {"
    },
    {
        "line": 27,
        "fullcodeline": "if (!pi->tp_on) {"
    },
    {
        "line": 33,
        "fullcodeline": "for (pi->y = pi->poc.ty0; pi->y < pi->poc.ty1;"
    },
    {
        "line": 34,
        "fullcodeline": "pi->y += pi->dy - (pi->y % pi->dy)) {"
    },
    {
        "line": 21,
        "fullcodeline": "res = &comp->resolutions[resno];"
    },
    {
        "line": 22,
        "fullcodeline": "dx = comp->dx * (1 << (res->pdx + comp->numresolutions - 1 - resno));"
    },
    {
        "line": 23,
        "fullcodeline": "dy = comp->dy * (1 << (res->pdy + comp->numresolutions - 1 - resno));"
    },
    {
        "line": 24,
        "fullcodeline": "pi->dx = !pi->dx ? dx : int_min(pi->dx, dx);"
    },
    {
        "line": 25,
        "fullcodeline": "pi->dy = !pi->dy ? dy : int_min(pi->dy, dy);"
    },
    {
        "line": 28,
        "fullcodeline": "pi->poc.ty0 = pi->ty0;"
    },
    {
        "line": 29,
        "fullcodeline": "pi->poc.tx0 = pi->tx0;"
    },
    {
        "line": 30,
        "fullcodeline": "pi->poc.ty1 = pi->ty1;"
    },
    {
        "line": 31,
        "fullcodeline": "pi->poc.tx1 = pi->tx1;"
    },
    {
        "line": 35,
        "fullcodeline": "for (pi->x = pi->poc.tx0; pi->x < pi->poc.tx1;"
    },
    {
        "line": 36,
        "fullcodeline": "pi->x += pi->dx - (pi->x % pi->dx)) {"
    },
    {
        "line": 38,
        "fullcodeline": "pi->resno < int_min(pi->poc.resno1, comp->numresolutions); pi->resno++) {"
    },
    {
        "line": 37,
        "fullcodeline": "for (pi->resno = pi->poc.resno0;"
    },
    {
        "line": 44,
        "fullcodeline": "res = &comp->resolutions[pi->resno];"
    },
    {
        "line": 45,
        "fullcodeline": "levelno = comp->numresolutions - 1 - pi->resno;"
    },
    {
        "line": 46,
        "fullcodeline": "trx0 = int_ceildiv(pi->tx0, comp->dx << levelno);"
    },
    {
        "line": 47,
        "fullcodeline": "try0 = int_ceildiv(pi->ty0, comp->dy << levelno);"
    },
    {
        "line": 48,
        "fullcodeline": "trx1 = int_ceildiv(pi->tx1, comp->dx << levelno);"
    },
    {
        "line": 49,
        "fullcodeline": "try1 = int_ceildiv(pi->ty1, comp->dy << levelno);"
    },
    {
        "line": 50,
        "fullcodeline": "rpx = res->pdx + levelno;"
    },
    {
        "line": 51,
        "fullcodeline": "rpy = res->pdy + levelno;"
    },
    {
        "line": 76,
        "fullcodeline": "prci = int_floordivpow2(int_ceildiv(pi->x, comp->dx << levelno), res->pdx)"
    },
    {
        "line": 78,
        "fullcodeline": "prcj = int_floordivpow2(int_ceildiv(pi->y, comp->dy << levelno), res->pdy)"
    },
    {
        "line": 80,
        "fullcodeline": "pi->precno = prci + prcj * res->pw;"
    },
    {
        "line": 54,
        "fullcodeline": "if (rpx >= 31 || ((comp->dx << rpx) >> rpx) != comp->dx ||"
    },
    {
        "line": 59,
        "fullcodeline": "if (!((pi->y % (comp->dy << rpy) == 0) || ((pi->y == pi->ty0) &&"
    },
    {
        "line": 63,
        "fullcodeline": "if (!((pi->x % (comp->dx << rpx) == 0) || ((pi->x == pi->tx0) &&"
    },
    {
        "line": 68,
        "fullcodeline": "if ((res->pw == 0) || (res->ph == 0)) {"
    },
    {
        "line": 72,
        "fullcodeline": "if ((trx0 == trx1) || (try0 == try1)) {"
    },
    {
        "line": 81,
        "fullcodeline": "for (pi->layno = pi->poc.layno0; pi->layno < pi->poc.layno1; pi->layno++) {"
    },
    {
        "line": 55,
        "fullcodeline": "rpy >= 31 || ((comp->dy << rpy) >> rpy) != comp->dy) {"
    },
    {
        "line": 77,
        "fullcodeline": "- int_floordivpow2(trx0, res->pdx);"
    },
    {
        "line": 79,
        "fullcodeline": "- int_floordivpow2(try0, res->pdy);"
    },
    {
        "line": 82,
        "fullcodeline": "index = pi->layno * pi->step_l + pi->resno * pi->step_r + pi->compno *"
    },
    {
        "line": 84,
        "fullcodeline": "if (!pi->include[index]) {"
    },
    {
        "line": 60,
        "fullcodeline": "((try0 << levelno) % (1 << rpy))))) {"
    },
    {
        "line": 64,
        "fullcodeline": "((trx0 << levelno) % (1 << rpx))))) {"
    },
    {
        "line": 83,
        "fullcodeline": "pi->step_c + pi->precno * pi->step_p;"
    },
    {
        "line": 85,
        "fullcodeline": "pi->include[index] = 1;"
    }
]