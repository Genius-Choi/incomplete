[
    {
        "line": 8,
        "fullcodeline": "string_icase_map *request_headers = parse_set.request_header;"
    },
    {
        "line": 9,
        "fullcodeline": "bool &authorized = parse_set.authorized;"
    },
    {
        "line": 12,
        "fullcodeline": "std::vector<Proxy> nodes;"
    },
    {
        "line": 17,
        "fullcodeline": "link = replaceAllDistinct(link, \"\\\"\", \"\");"
    },
    {
        "line": 93,
        "fullcodeline": "writeLog(LOG_TYPE_INFO, \"Received Link.\");"
    },
    {
        "line": 75,
        "fullcodeline": "if(startsWith(link, \"tag:\"))"
    },
    {
        "line": 85,
        "fullcodeline": "if(link == \"nullnode\")"
    },
    {
        "line": 94,
        "fullcodeline": "if(startsWith(link, \"https://t.me/socks\") || startsWith(link, \"tg://socks\"))"
    },
    {
        "line": 20,
        "fullcodeline": "if(authorized) script_safe_runner(parse_set.js_runtime, parse_set.js_context, [&](qjs::Context &ctx)"
    },
    {
        "line": 77,
        "fullcodeline": "string_size pos = link.find(\",\");"
    },
    {
        "line": 87,
        "fullcodeline": "node.GroupId = 0;"
    },
    {
        "line": 88,
        "fullcodeline": "writeLog(0, \"Adding node placeholder...\");"
    },
    {
        "line": 89,
        "fullcodeline": "allNodes.emplace_back(std::move(node));"
    },
    {
        "line": 108,
        "fullcodeline": "writeLog(LOG_TYPE_INFO, \"Downloading subscription data...\");"
    },
    {
        "line": 111,
        "fullcodeline": "strSub = webGet(link, proxy, global.cacheSubscription, &extra_headers, request_headers);"
    },
    {
        "line": 161,
        "fullcodeline": "writeLog(LOG_TYPE_INFO, \"Parsing configuration file data...\");"
    },
    {
        "line": 175,
        "fullcodeline": "filterNodes(nodes, exclude_remarks, include_remarks, groupID);"
    },
    {
        "line": 182,
        "fullcodeline": "copyNodes(nodes, allNodes);"
    },
    {
        "line": 185,
        "fullcodeline": "explode(link, node);"
    },
    {
        "line": 191,
        "fullcodeline": "node.GroupId = groupID;"
    },
    {
        "line": 194,
        "fullcodeline": "allNodes.emplace_back(std::move(node));"
    },
    {
        "line": 78,
        "fullcodeline": "if(pos != link.npos)"
    },
    {
        "line": 109,
        "fullcodeline": "if(startsWith(link, \"surge:///install-config\")) //surge config link"
    },
    {
        "line": 126,
        "fullcodeline": "if(strSub.size())"
    },
    {
        "line": 159,
        "fullcodeline": "if(!authorized)"
    },
    {
        "line": 162,
        "fullcodeline": "if(explodeConf(link, nodes) == 0)"
    },
    {
        "line": 167,
        "fullcodeline": "if(startsWith(strSub, \"ssd://\"))"
    },
    {
        "line": 186,
        "fullcodeline": "if(node.Type == -1)"
    },
    {
        "line": 192,
        "fullcodeline": "if(custom_group.size())"
    },
    {
        "line": 80,
        "fullcodeline": "custom_group = link.substr(4, pos - 4);"
    },
    {
        "line": 81,
        "fullcodeline": "link.erase(0, pos + 1);"
    },
    {
        "line": 96,
        "fullcodeline": "else if(startsWith(link, \"https://t.me/http\") || startsWith(link, \"tg://http\"))"
    },
    {
        "line": 110,
        "fullcodeline": "link = urlDecode(getUrlArg(link, \"url\"));"
    },
    {
        "line": 128,
        "fullcodeline": "writeLog(LOG_TYPE_INFO, \"Parsing subscription data...\");"
    },
    {
        "line": 143,
        "fullcodeline": "filterNodes(nodes, exclude_remarks, include_remarks, groupID);"
    },
    {
        "line": 150,
        "fullcodeline": "copyNodes(nodes, allNodes);"
    },
    {
        "line": 164,
        "fullcodeline": "writeLog(LOG_TYPE_ERROR, \"Invalid configuration file!\");"
    },
    {
        "line": 169,
        "fullcodeline": "getSubInfoFromSSD(strSub, subInfo);"
    },
    {
        "line": 178,
        "fullcodeline": "x.GroupId = groupID;"
    },
    {
        "line": 188,
        "fullcodeline": "writeLog(LOG_TYPE_ERROR, \"No valid link found.\");"
    },
    {
        "line": 193,
        "fullcodeline": "node.Group = custom_group;"
    },
    {
        "line": 129,
        "fullcodeline": "if(explodeConfContent(strSub, nodes) == 0)"
    },
    {
        "line": 134,
        "fullcodeline": "if(startsWith(strSub, \"ssd://\"))"
    },
    {
        "line": 154,
        "fullcodeline": "writeLog(LOG_TYPE_ERROR, \"Cannot download subscription data.\");"
    },
    {
        "line": 160,
        "fullcodeline": "return -1;"
    },
    {
        "line": 165,
        "fullcodeline": "return -1;"
    },
    {
        "line": 173,
        "fullcodeline": "getSubInfoFromNodes(nodes, stream_rules, time_rules, subInfo);"
    },
    {
        "line": 179,
        "fullcodeline": "if(custom_group.size())"
    },
    {
        "line": 189,
        "fullcodeline": "return -1;"
    },
    {
        "line": 131,
        "fullcodeline": "writeLog(LOG_TYPE_ERROR, \"Invalid subscription: '\" + link + \"'!\");"
    },
    {
        "line": 136,
        "fullcodeline": "getSubInfoFromSSD(strSub, subInfo);"
    },
    {
        "line": 146,
        "fullcodeline": "x.GroupId = groupID;"
    },
    {
        "line": 155,
        "fullcodeline": "return -1;"
    },
    {
        "line": 180,
        "fullcodeline": "x.Group = custom_group;"
    },
    {
        "line": 98,
        "fullcodeline": "else if(isLink(link) || startsWith(link, \"surge:///install-config\"))"
    },
    {
        "line": 132,
        "fullcodeline": "return -1;"
    },
    {
        "line": 147,
        "fullcodeline": "if(custom_group.size())"
    },
    {
        "line": 140,
        "fullcodeline": "if(!getSubInfoFromHeader(extra_headers, subInfo))"
    },
    {
        "line": 148,
        "fullcodeline": "x.Group = custom_group;"
    },
    {
        "line": 141,
        "fullcodeline": "getSubInfoFromNodes(nodes, stream_rules, time_rules, subInfo);"
    },
    {
        "line": 100,
        "fullcodeline": "else if(startsWith(link, \"Netch://\"))"
    },
    {
        "line": 102,
        "fullcodeline": "else if(fileExist(link))"
    }
]