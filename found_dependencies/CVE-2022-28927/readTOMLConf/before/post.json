[
    {
        "line": 3,
        "fullcodeline": "const auto &section_common = toml::find(root, \"common\");"
    },
    {
        "line": 6,
        "fullcodeline": "find_if_exist(section_common, \"default_url\", default_url, \"insert_url\", insert_url);"
    },
    {
        "line": 7,
        "fullcodeline": "global.defaultUrls = join(default_url, \"|\");"
    },
    {
        "line": 8,
        "fullcodeline": "global.insertUrls = join(insert_url, \"|\");"
    },
    {
        "line": 10,
        "fullcodeline": "bool filter = false;"
    },
    {
        "line": 11,
        "fullcodeline": "find_if_exist(section_common,"
    },
    {
        "line": 39,
        "fullcodeline": "safe_set_streams(toml::find_or<RegexMatchConfigs>(root, \"userinfo\", \"stream_rule\", RegexMatchConfigs{}));"
    },
    {
        "line": 40,
        "fullcodeline": "safe_set_times(toml::find_or<RegexMatchConfigs>(root, \"userinfo\", \"time_rule\", RegexMatchConfigs{}));"
    },
    {
        "line": 42,
        "fullcodeline": "const auto &section_node_pref = toml::find(root, \"node_pref\");"
    },
    {
        "line": 44,
        "fullcodeline": "find_if_exist(section_node_pref,"
    },
    {
        "line": 57,
        "fullcodeline": "auto renameconfs = toml::find_or<std::vector<toml::value>>(section_node_pref, \"rename_node\", {});"
    },
    {
        "line": 58,
        "fullcodeline": "importItems(renameconfs, \"rename_node\", false);"
    },
    {
        "line": 59,
        "fullcodeline": "safe_set_renames(toml::get<RegexMatchConfigs>(toml::value(renameconfs)));"
    },
    {
        "line": 61,
        "fullcodeline": "const auto &section_managed = toml::find(root, \"managed_config\");"
    },
    {
        "line": 63,
        "fullcodeline": "find_if_exist(section_managed,"
    },
    {
        "line": 71,
        "fullcodeline": "const auto &section_surge_external = toml::find(root, \"surge_external_proxy\");"
    },
    {
        "line": 72,
        "fullcodeline": "find_if_exist(section_surge_external,"
    },
    {
        "line": 77,
        "fullcodeline": "const auto &section_emojis = toml::find(root, \"emojis\");"
    },
    {
        "line": 79,
        "fullcodeline": "find_if_exist(section_emojis,"
    },
    {
        "line": 84,
        "fullcodeline": "auto emojiconfs = toml::find_or<std::vector<toml::value>>(section_emojis, \"emoji\", {});"
    },
    {
        "line": 85,
        "fullcodeline": "importItems(emojiconfs, \"emoji\", false);"
    },
    {
        "line": 86,
        "fullcodeline": "safe_set_emojis(toml::get<RegexMatchConfigs>(toml::value(emojiconfs)));"
    },
    {
        "line": 88,
        "fullcodeline": "auto groups = toml::find_or<std::vector<toml::value>>(root, \"custom_groups\", {});"
    },
    {
        "line": 89,
        "fullcodeline": "importItems(groups, \"custom_groups\", false);"
    },
    {
        "line": 90,
        "fullcodeline": "global.customProxyGroups = toml::get<ProxyGroupConfigs>(toml::value(groups));"
    },
    {
        "line": 92,
        "fullcodeline": "const auto &section_ruleset = toml::find(root, \"ruleset\");"
    },
    {
        "line": 94,
        "fullcodeline": "find_if_exist(section_ruleset,"
    },
    {
        "line": 100,
        "fullcodeline": "auto rulesets = toml::find_or<std::vector<toml::value>>(root, \"rulesets\", {});"
    },
    {
        "line": 101,
        "fullcodeline": "importItems(rulesets, \"rulesets\", false);"
    },
    {
        "line": 102,
        "fullcodeline": "global.customRulesets = toml::get<RulesetConfigs>(toml::value(rulesets));"
    },
    {
        "line": 104,
        "fullcodeline": "const auto &section_template = toml::find(root, \"template\");"
    },
    {
        "line": 106,
        "fullcodeline": "global.templatePath = toml::find_or(section_template, \"template_path\", \"template\");"
    },
    {
        "line": 109,
        "fullcodeline": "operate_toml_kv_table(toml::find_or<std::vector<toml::table>>(section_template, \"globals\", {}), \"key\", \"value\", [&](const toml::value &key, const toml::value &value)"
    },
    {
        "line": 114,
        "fullcodeline": "webServer.reset_redirect();"
    },
    {
        "line": 115,
        "fullcodeline": "operate_toml_kv_table(toml::find_or<std::vector<toml::table>>(root, \"aliases\", {}), \"uri\", \"target\", [&](const toml::value &key, const toml::value &value)"
    },
    {
        "line": 120,
        "fullcodeline": "auto tasks = toml::find_or<std::vector<toml::value>>(root, \"tasks\", {});"
    },
    {
        "line": 121,
        "fullcodeline": "importItems(tasks, \"tasks\", false);"
    },
    {
        "line": 122,
        "fullcodeline": "global.cronTasks = toml::get<CronTaskConfigs>(toml::value(tasks));"
    },
    {
        "line": 124,
        "fullcodeline": "const auto &section_server = toml::find(root, \"server\");"
    },
    {
        "line": 126,
        "fullcodeline": "find_if_exist(section_server,"
    },
    {
        "line": 131,
        "fullcodeline": "webServer.serve_file = !webServer.serve_file_root.empty();"
    },
    {
        "line": 133,
        "fullcodeline": "const auto &section_advanced = toml::find(root, \"advanced\");"
    },
    {
        "line": 136,
        "fullcodeline": "bool enable_cache = true;"
    },
    {
        "line": 139,
        "fullcodeline": "find_if_exist(section_advanced,"
    },
    {
        "line": 35,
        "fullcodeline": "find_if_exist(section_common, \"filter_script\", global.filterScript);"
    },
    {
        "line": 157,
        "fullcodeline": "global.logLevel = LOG_LEVEL_VERBOSE;"
    },
    {
        "line": 184,
        "fullcodeline": "global.cacheSubscription = cache_subscription;"
    },
    {
        "line": 185,
        "fullcodeline": "global.cacheConfig = cache_config;"
    },
    {
        "line": 186,
        "fullcodeline": "global.cacheRuleset = cache_ruleset;"
    },
    {
        "line": 190,
        "fullcodeline": "global.cacheSubscription = global.cacheConfig = global.cacheRuleset = 0;"
    },
    {
        "line": 160,
        "fullcodeline": "switch(hash_(log_level))"
    },
    {
        "line": 163,
        "fullcodeline": "global.logLevel = LOG_LEVEL_WARNING;"
    },
    {
        "line": 166,
        "fullcodeline": "global.logLevel = LOG_LEVEL_ERROR;"
    },
    {
        "line": 169,
        "fullcodeline": "global.logLevel = LOG_LEVEL_FATAL;"
    },
    {
        "line": 172,
        "fullcodeline": "global.logLevel = LOG_LEVEL_VERBOSE;"
    },
    {
        "line": 175,
        "fullcodeline": "global.logLevel = LOG_LEVEL_DEBUG;"
    },
    {
        "line": 178,
        "fullcodeline": "global.logLevel = LOG_LEVEL_INFO;"
    }
]