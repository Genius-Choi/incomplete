[
    {
        "line": 6,
        "fullcodeline": "std::string argTarget = getUrlArg(argument, \"target\"), argSurgeVer = getUrlArg(argument, \"ver\");"
    },
    {
        "line": 7,
        "fullcodeline": "tribool argClashNewField = getUrlArg(argument, \"new_name\");"
    },
    {
        "line": 8,
        "fullcodeline": "int intSurgeVer = argSurgeVer.size() ? to_int(argSurgeVer, 3) : 3;"
    },
    {
        "line": 13,
        "fullcodeline": "bool lSimpleSubscription = false;"
    },
    {
        "line": 30,
        "fullcodeline": "std::string argUrl = urlDecode(getUrlArg(argument, \"url\"));"
    },
    {
        "line": 31,
        "fullcodeline": "std::string argGroupName = urlDecode(getUrlArg(argument, \"group\")), argUploadPath = getUrlArg(argument, \"upload_path\");"
    },
    {
        "line": 32,
        "fullcodeline": "std::string argIncludeRemark = urlDecode(getUrlArg(argument, \"include\")), argExcludeRemark = urlDecode(getUrlArg(argument, \"exclude\"));"
    },
    {
        "line": 33,
        "fullcodeline": "std::string argCustomGroups = urlSafeBase64Decode(getUrlArg(argument, \"groups\")), argCustomRulesets = urlSafeBase64Decode(getUrlArg(argument, \"ruleset\")), argExternalConfig = urlDecode(getUrlArg(argument, \"config\"));"
    },
    {
        "line": 34,
        "fullcodeline": "std::string argDeviceID = getUrlArg(argument, \"dev_id\"), argFilename = urlDecode(getUrlArg(argument, \"filename\")), argUpdateInterval = getUrlArg(argument, \"interval\"), argUpdateStrict = getUrlArg(argument, \"strict\");"
    },
    {
        "line": 35,
        "fullcodeline": "std::string argRenames = urlDecode(getUrlArg(argument, \"rename\")), argFilterScript = urlDecode(getUrlArg(argument, \"filter_script\"));"
    },
    {
        "line": 38,
        "fullcodeline": "tribool argUpload = getUrlArg(argument, \"upload\"), argEmoji = getUrlArg(argument, \"emoji\"), argAddEmoji = getUrlArg(argument, \"add_emoji\"), argRemoveEmoji = getUrlArg(argument, \"remove_emoji\");"
    },
    {
        "line": 39,
        "fullcodeline": "tribool argAppendType = getUrlArg(argument, \"append_type\"), argTFO = getUrlArg(argument, \"tfo\"), argUDP = getUrlArg(argument, \"udp\"), argGenNodeList = getUrlArg(argument, \"list\");"
    },
    {
        "line": 40,
        "fullcodeline": "tribool argSort = getUrlArg(argument, \"sort\"), argUseSortScript = getUrlArg(argument, \"sort_script\");"
    },
    {
        "line": 41,
        "fullcodeline": "tribool argGenClashScript = getUrlArg(argument, \"script\"), argEnableInsert = getUrlArg(argument, \"insert\");"
    },
    {
        "line": 42,
        "fullcodeline": "tribool argSkipCertVerify = getUrlArg(argument, \"scv\"), argFilterDeprecated = getUrlArg(argument, \"fdn\"), argExpandRulesets = getUrlArg(argument, \"expand\"), argAppendUserinfo = getUrlArg(argument, \"append_info\");"
    },
    {
        "line": 43,
        "fullcodeline": "tribool argPrependInsert = getUrlArg(argument, \"prepend\"), argGenClassicalRuleProvider = getUrlArg(argument, \"classic\"), argTLS13 = getUrlArg(argument, \"tls13\");"
    },
    {
        "line": 49,
        "fullcodeline": "std::vector<RulesetContent> lRulesetContent;"
    },
    {
        "line": 52,
        "fullcodeline": "int interval = argUpdateInterval.size() ? to_int(argUpdateInterval, global.updateInterval) : global.updateInterval;"
    },
    {
        "line": 53,
        "fullcodeline": "bool authorized = !global.APIMode || getUrlArg(argument, \"token\") == global.accessToken, strict = argUpdateStrict.size() ? argUpdateStrict == \"true\" : global.updateStrict;"
    },
    {
        "line": 63,
        "fullcodeline": "argEnableInsert.define(global.enableInsert);"
    },
    {
        "line": 73,
        "fullcodeline": "string_array req_args = split(argument, \"&\");"
    },
    {
        "line": 87,
        "fullcodeline": "req_arg_map[\"target\"] = argTarget;"
    },
    {
        "line": 88,
        "fullcodeline": "req_arg_map[\"ver\"] = std::to_string(intSurgeVer);"
    },
    {
        "line": 93,
        "fullcodeline": "tpl_args.request_params = req_arg_map;"
    },
    {
        "line": 96,
        "fullcodeline": "std::string proxy = parseProxy(global.proxySubscription);"
    },
    {
        "line": 99,
        "fullcodeline": "ext.append_proxy_type = argAppendType.get(global.appendType);"
    },
    {
        "line": 106,
        "fullcodeline": "ext.tfo.define(argTFO).define(global.TFOFlag);"
    },
    {
        "line": 107,
        "fullcodeline": "ext.udp.define(argUDP).define(global.UDPFlag);"
    },
    {
        "line": 108,
        "fullcodeline": "ext.skip_cert_verify.define(argSkipCertVerify).define(global.skipCertVerify);"
    },
    {
        "line": 109,
        "fullcodeline": "ext.tls13.define(argTLS13).define(global.TLS13Flag);"
    },
    {
        "line": 111,
        "fullcodeline": "ext.sort_flag = argSort.get(global.enableSort);"
    },
    {
        "line": 112,
        "fullcodeline": "argUseSortScript.define(global.sortScript.size() != 0);"
    },
    {
        "line": 115,
        "fullcodeline": "ext.filter_deprecated = argFilterDeprecated.get(global.filterDeprecated);"
    },
    {
        "line": 116,
        "fullcodeline": "ext.clash_new_field_name = argClashNewField.get(global.clashUseNewField);"
    },
    {
        "line": 117,
        "fullcodeline": "ext.clash_script = argGenClashScript.get();"
    },
    {
        "line": 118,
        "fullcodeline": "ext.clash_classical_ruleset = argGenClassicalRuleProvider.get();"
    },
    {
        "line": 124,
        "fullcodeline": "ext.nodelist = argGenNodeList;"
    },
    {
        "line": 126,
        "fullcodeline": "ext.quanx_dev_id = argDeviceID.size() ? argDeviceID : global.quanXDevID;"
    },
    {
        "line": 212,
        "fullcodeline": "ext.add_emoji = argAddEmoji.get(global.addEmoji);"
    },
    {
        "line": 213,
        "fullcodeline": "ext.remove_emoji = argRemoveEmoji.get(global.removeEmoji);"
    },
    {
        "line": 237,
        "fullcodeline": "RegexMatchConfigs stream_temp = safe_get_streams(), time_temp = safe_get_times();"
    },
    {
        "line": 242,
        "fullcodeline": "int groupID = 0;"
    },
    {
        "line": 245,
        "fullcodeline": "parse_set.proxy = &proxy;"
    },
    {
        "line": 246,
        "fullcodeline": "parse_set.exclude_remarks = &lExcludeRemarks;"
    },
    {
        "line": 247,
        "fullcodeline": "parse_set.include_remarks = &lIncludeRemarks;"
    },
    {
        "line": 248,
        "fullcodeline": "parse_set.stream_rules = &stream_temp;"
    },
    {
        "line": 249,
        "fullcodeline": "parse_set.time_rules = &time_temp;"
    },
    {
        "line": 250,
        "fullcodeline": "parse_set.sub_info = &subInfo;"
    },
    {
        "line": 251,
        "fullcodeline": "parse_set.authorized = authorized;"
    },
    {
        "line": 252,
        "fullcodeline": "parse_set.request_header = &request.headers;"
    },
    {
        "line": 253,
        "fullcodeline": "parse_set.js_runtime = ext.js_runtime;"
    },
    {
        "line": 254,
        "fullcodeline": "parse_set.js_context = ext.js_context;"
    },
    {
        "line": 278,
        "fullcodeline": "urls = split(argUrl, \"|\");"
    },
    {
        "line": 279,
        "fullcodeline": "importItems(urls, true);"
    },
    {
        "line": 280,
        "fullcodeline": "groupID = 0;"
    },
    {
        "line": 310,
        "fullcodeline": "argPrependInsert.define(global.prependInsert);"
    },
    {
        "line": 372,
        "fullcodeline": "preprocessNodes(nodes, ext);"
    },
    {
        "line": 389,
        "fullcodeline": "std::vector<RulesetContent> dummy_ruleset;"
    },
    {
        "line": 390,
        "fullcodeline": "std::string managed_url = base64Decode(urlDecode(getUrlArg(argument, \"profile_data\")));"
    },
    {
        "line": 395,
        "fullcodeline": "proxy = parseProxy(global.proxyConfig);"
    },
    {
        "line": 579,
        "fullcodeline": "writeLog(0, \"Generate completed.\", LOG_LEVEL_INFO);"
    },
    {
        "line": 9,
        "fullcodeline": "if(argTarget == \"auto\")"
    },
    {
        "line": 14,
        "fullcodeline": "switch(hash_(argTarget))"
    },
    {
        "line": 26,
        "fullcodeline": "if((!global.APIMode || global.CFWChildProcess) && !global.generatorMode)"
    },
    {
        "line": 55,
        "fullcodeline": "if(std::find(gRegexBlacklist.cbegin(), gRegexBlacklist.cend(), argIncludeRemark) != gRegexBlacklist.cend() || std::find(gRegexBlacklist.cbegin(), gRegexBlacklist.cend(), argExcludeRemark) != gRegexBlacklist.cend())"
    },
    {
        "line": 64,
        "fullcodeline": "if(!argUrl.size() && (!global.APIMode || authorized))"
    },
    {
        "line": 66,
        "fullcodeline": "if((!argUrl.size() && !(global.insertUrls.size() && argEnableInsert)) || !argTarget.size())"
    },
    {
        "line": 100,
        "fullcodeline": "if((argTarget == \"clash\" || argTarget == \"clashr\") && argGenClashScript.is_undef())"
    },
    {
        "line": 113,
        "fullcodeline": "if(ext.sort_flag && argUseSortScript)"
    },
    {
        "line": 119,
        "fullcodeline": "if(!argExpandRulesets)"
    },
    {
        "line": 129,
        "fullcodeline": "if(!argExpandRulesets)"
    },
    {
        "line": 133,
        "fullcodeline": "if(argExternalConfig.empty())"
    },
    {
        "line": 135,
        "fullcodeline": "if(argExternalConfig.size())"
    },
    {
        "line": 195,
        "fullcodeline": "if(ext.enable_rule_generator && !ext.nodelist && !lSimpleSubscription)"
    },
    {
        "line": 207,
        "fullcodeline": "if(!argEmoji.is_undef())"
    },
    {
        "line": 214,
        "fullcodeline": "if(ext.add_emoji && ext.emoji_array.empty())"
    },
    {
        "line": 216,
        "fullcodeline": "if(argRenames.size())"
    },
    {
        "line": 222,
        "fullcodeline": "if(argIncludeRemark.size() && regValid(argIncludeRemark))"
    },
    {
        "line": 224,
        "fullcodeline": "if(argExcludeRemark.size() && regValid(argExcludeRemark))"
    },
    {
        "line": 228,
        "fullcodeline": "if(authorized && !global.scriptCleanContext)"
    },
    {
        "line": 256,
        "fullcodeline": "if(global.insertUrls.size() && argEnableInsert)"
    },
    {
        "line": 299,
        "fullcodeline": "if(!nodes.size() && !insert_nodes.size())"
    },
    {
        "line": 304,
        "fullcodeline": "if(subInfo.size() && argAppendUserinfo.get(global.appendUserinfo))"
    },
    {
        "line": 307,
        "fullcodeline": "if(request.method == \"HEAD\")"
    },
    {
        "line": 322,
        "fullcodeline": "if(authorized && !argFilterScript.empty())"
    },
    {
        "line": 324,
        "fullcodeline": "if(filterScript.size())"
    },
    {
        "line": 367,
        "fullcodeline": "if(argGroupName.size())"
    },
    {
        "line": 391,
        "fullcodeline": "if(managed_url.empty())"
    },
    {
        "line": 396,
        "fullcodeline": "switch(hash_(argTarget))"
    },
    {
        "line": 580,
        "fullcodeline": "if(argFilename.size())"
    },
    {
        "line": 10,
        "fullcodeline": "matchUserAgent(request.headers[\"User-Agent\"], argTarget, argClashNewField, intSurgeVer);"
    },
    {
        "line": 17,
        "fullcodeline": "lSimpleSubscription = true;"
    },
    {
        "line": 22,
        "fullcodeline": "*status_code = 400;"
    },
    {
        "line": 27,
        "fullcodeline": "readConf();"
    },
    {
        "line": 68,
        "fullcodeline": "*status_code = 400;"
    },
    {
        "line": 77,
        "fullcodeline": "string_size pos = x.find(\"=\");"
    },
    {
        "line": 85,
        "fullcodeline": "req_arg_map[x.substr(0, pos)] = x.substr(pos + 1);"
    },
    {
        "line": 101,
        "fullcodeline": "argExpandRulesets.define(true);"
    },
    {
        "line": 114,
        "fullcodeline": "ext.sort_script = global.sortScript;"
    },
    {
        "line": 120,
        "fullcodeline": "ext.clash_new_field_name = true;"
    },
    {
        "line": 138,
        "fullcodeline": "writeLog(0, \"External configuration file provided. Loading...\", LOG_LEVEL_INFO);"
    },
    {
        "line": 140,
        "fullcodeline": "extconf.tpl_args = &tpl_args;"
    },
    {
        "line": 209,
        "fullcodeline": "argAddEmoji.set(argEmoji);"
    },
    {
        "line": 210,
        "fullcodeline": "argRemoveEmoji.set(true);"
    },
    {
        "line": 215,
        "fullcodeline": "ext.emoji_array = safe_get_emojis();"
    },
    {
        "line": 217,
        "fullcodeline": "ext.rename_array = INIBinding::from<RegexMatchConfig>::from_ini(split(argRenames, \"`\"), \"@\");"
    },
    {
        "line": 223,
        "fullcodeline": "lIncludeRemarks = string_array{argIncludeRemark};"
    },
    {
        "line": 225,
        "fullcodeline": "lExcludeRemarks = string_array{argExcludeRemark};"
    },
    {
        "line": 230,
        "fullcodeline": "ext.js_runtime = new qjs::Runtime();"
    },
    {
        "line": 232,
        "fullcodeline": "ext.js_context = new qjs::Context(*ext.js_runtime);"
    },
    {
        "line": 258,
        "fullcodeline": "groupID = -1;"
    },
    {
        "line": 259,
        "fullcodeline": "urls = split(global.insertUrls, \"|\");"
    },
    {
        "line": 260,
        "fullcodeline": "importItems(urls, true);"
    },
    {
        "line": 283,
        "fullcodeline": "x = regTrim(x);"
    },
    {
        "line": 285,
        "fullcodeline": "writeLog(0, \"Fetching node data from url '\" + x + \"'.\", LOG_LEVEL_INFO);"
    },
    {
        "line": 296,
        "fullcodeline": "groupID++;"
    },
    {
        "line": 301,
        "fullcodeline": "*status_code = 400;"
    },
    {
        "line": 305,
        "fullcodeline": "response.headers.emplace(\"Subscription-UserInfo\", subInfo);"
    },
    {
        "line": 313,
        "fullcodeline": "std::move(nodes.begin(), nodes.end(), std::back_inserter(insert_nodes));"
    },
    {
        "line": 314,
        "fullcodeline": "nodes.swap(insert_nodes);"
    },
    {
        "line": 323,
        "fullcodeline": "filterScript = argFilterScript;"
    },
    {
        "line": 351,
        "fullcodeline": "script_safe_runner(ext.js_runtime, ext.js_context, [&](qjs::Context &ctx)"
    },
    {
        "line": 392,
        "fullcodeline": "managed_url = global.managedConfigPrefix + \"/sub?\" + argument;"
    },
    {
        "line": 399,
        "fullcodeline": "writeLog(0, argTarget == \"clashr\" ? \"Generate target: ClashR\" : \"Generate target: Clash\", LOG_LEVEL_INFO);"
    },
    {
        "line": 400,
        "fullcodeline": "tpl_args.local_vars[\"clash.new_field_name\"] = ext.clash_new_field_name ? \"true\" : \"false\";"
    },
    {
        "line": 401,
        "fullcodeline": "response.headers[\"profile-update-interval\"] = std::to_string(interval / 3600);"
    },
    {
        "line": 423,
        "fullcodeline": "writeLog(0, \"Generate target: Surge \" + std::to_string(intSurgeVer), LOG_LEVEL_INFO);"
    },
    {
        "line": 450,
        "fullcodeline": "writeLog(0, \"Generate target: Surfboard\", LOG_LEVEL_INFO);"
    },
    {
        "line": 457,
        "fullcodeline": "output_content = proxyToSurge(nodes, base_content, lRulesetContent, lCustomProxyGroups, -3, ext);"
    },
    {
        "line": 466,
        "fullcodeline": "writeLog(0, \"Generate target: Mellow\", LOG_LEVEL_INFO);"
    },
    {
        "line": 473,
        "fullcodeline": "output_content = proxyToMellow(nodes, base_content, lRulesetContent, lCustomProxyGroups, ext);"
    },
    {
        "line": 479,
        "fullcodeline": "writeLog(0, \"Generate target: SS Subscription\", LOG_LEVEL_INFO);"
    },
    {
        "line": 486,
        "fullcodeline": "output_content = proxyToSSSub(base_content, nodes, ext);"
    },
    {
        "line": 491,
        "fullcodeline": "writeLog(0, \"Generate target: SS\", LOG_LEVEL_INFO);"
    },
    {
        "line": 492,
        "fullcodeline": "output_content = proxyToSingle(nodes, 1, ext);"
    },
    {
        "line": 497,
        "fullcodeline": "writeLog(0, \"Generate target: SSR\", LOG_LEVEL_INFO);"
    },
    {
        "line": 498,
        "fullcodeline": "output_content = proxyToSingle(nodes, 2, ext);"
    },
    {
        "line": 503,
        "fullcodeline": "writeLog(0, \"Generate target: v2rayN\", LOG_LEVEL_INFO);"
    },
    {
        "line": 504,
        "fullcodeline": "output_content = proxyToSingle(nodes, 4, ext);"
    },
    {
        "line": 509,
        "fullcodeline": "writeLog(0, \"Generate target: Trojan\", LOG_LEVEL_INFO);"
    },
    {
        "line": 510,
        "fullcodeline": "output_content = proxyToSingle(nodes, 8, ext);"
    },
    {
        "line": 515,
        "fullcodeline": "writeLog(0, \"Generate target: Standard Subscription\", LOG_LEVEL_INFO);"
    },
    {
        "line": 516,
        "fullcodeline": "output_content = proxyToSingle(nodes, 15, ext);"
    },
    {
        "line": 521,
        "fullcodeline": "writeLog(0, \"Generate target: Quantumult\", LOG_LEVEL_INFO);"
    },
    {
        "line": 531,
        "fullcodeline": "output_content = proxyToQuan(nodes, base_content, lRulesetContent, lCustomProxyGroups, ext);"
    },
    {
        "line": 537,
        "fullcodeline": "writeLog(0, \"Generate target: Quantumult X\", LOG_LEVEL_INFO);"
    },
    {
        "line": 547,
        "fullcodeline": "output_content = proxyToQuanX(nodes, base_content, lRulesetContent, lCustomProxyGroups, ext);"
    },
    {
        "line": 553,
        "fullcodeline": "writeLog(0, \"Generate target: Loon\", LOG_LEVEL_INFO);"
    },
    {
        "line": 563,
        "fullcodeline": "output_content = proxyToLoon(nodes, base_content, lRulesetContent, lCustomProxyGroups, ext);"
    },
    {
        "line": 569,
        "fullcodeline": "writeLog(0, \"Generate target: SSD\", LOG_LEVEL_INFO);"
    },
    {
        "line": 570,
        "fullcodeline": "output_content = proxyToSSD(nodes, argGroupName, subInfo, ext);"
    },
    {
        "line": 575,
        "fullcodeline": "writeLog(0, \"Generate target: Unspecified\", LOG_LEVEL_INFO);"
    },
    {
        "line": 576,
        "fullcodeline": "*status_code = 500;"
    },
    {
        "line": 581,
        "fullcodeline": "response.headers.emplace(\"Content-Disposition\", \"attachment; filename=\\\"\" + argFilename + \"\\\"; filename*=utf-8''\" + urlEncode(argFilename));"
    },
    {
        "line": 78,
        "fullcodeline": "if(pos == x.npos)"
    },
    {
        "line": 83,
        "fullcodeline": "if(x.substr(0, pos) == \"token\")"
    },
    {
        "line": 122,
        "fullcodeline": "ext.clash_script = false;"
    },
    {
        "line": 141,
        "fullcodeline": "if(loadExternalConfig(argExternalConfig, extconf) == 0)"
    },
    {
        "line": 197,
        "fullcodeline": "if(lCustomRulesets != global.customRulesets)"
    },
    {
        "line": 286,
        "fullcodeline": "if(addNodes(x, nodes, groupID, parse_set) == -1)"
    },
    {
        "line": 318,
        "fullcodeline": "std::move(insert_nodes.begin(), insert_nodes.end(), std::back_inserter(nodes));"
    },
    {
        "line": 326,
        "fullcodeline": "if(startsWith(filterScript, \"path:\"))"
    },
    {
        "line": 369,
        "fullcodeline": "x.Group = argGroupName;"
    },
    {
        "line": 452,
        "fullcodeline": "if(render_template(fetchFile(lSurfboardBase, proxy, global.cacheConfig), tpl_args, base_content, global.templatePath) != 0)"
    },
    {
        "line": 461,
        "fullcodeline": "if(global.writeManagedConfig && global.managedConfigPrefix.size())"
    },
    {
        "line": 468,
        "fullcodeline": "if(render_template(fetchFile(lMellowBase, proxy, global.cacheConfig), tpl_args, base_content, global.templatePath) != 0)"
    },
    {
        "line": 481,
        "fullcodeline": "if(render_template(fetchFile(lSSSubBase, proxy, global.cacheConfig), tpl_args, base_content, global.templatePath) != 0)"
    },
    {
        "line": 522,
        "fullcodeline": "if(!ext.nodelist)"
    },
    {
        "line": 538,
        "fullcodeline": "if(!ext.nodelist)"
    },
    {
        "line": 554,
        "fullcodeline": "if(!ext.nodelist)"
    },
    {
        "line": 80,
        "fullcodeline": "req_arg_map[x] = \"\";"
    },
    {
        "line": 172,
        "fullcodeline": "argAddEmoji.define(extconf.add_emoji);"
    },
    {
        "line": 173,
        "fullcodeline": "argRemoveEmoji.define(extconf.remove_old_emoji);"
    },
    {
        "line": 178,
        "fullcodeline": "if(!lSimpleSubscription)"
    },
    {
        "line": 198,
        "fullcodeline": "refreshRulesets(lCustomRulesets, lRulesetContent);"
    },
    {
        "line": 218,
        "fullcodeline": "else if(ext.rename_array.empty())"
    },
    {
        "line": 263,
        "fullcodeline": "x = regTrim(x);"
    },
    {
        "line": 264,
        "fullcodeline": "writeLog(0, \"Fetching node data from url '\" + x + \"'.\", LOG_LEVEL_INFO);"
    },
    {
        "line": 275,
        "fullcodeline": "groupID--;"
    },
    {
        "line": 327,
        "fullcodeline": "filterScript = fileGet(filterScript.substr(5), false);"
    },
    {
        "line": 405,
        "fullcodeline": "proxyToClash(nodes, yamlnode, dummy_group, argTarget == \"clashr\", ext);"
    },
    {
        "line": 406,
        "fullcodeline": "output_content = YAML::Dump(yamlnode);"
    },
    {
        "line": 419,
        "fullcodeline": "uploadGist(argTarget, argUploadPath, output_content, false);"
    },
    {
        "line": 427,
        "fullcodeline": "output_content = proxyToSurge(nodes, base_content, dummy_ruleset, dummy_group, intSurgeVer, ext);"
    },
    {
        "line": 454,
        "fullcodeline": "*status_code = 400;"
    },
    {
        "line": 459,
        "fullcodeline": "uploadGist(\"surfboard\", argUploadPath, output_content, true);"
    },
    {
        "line": 462,
        "fullcodeline": "output_content = \"#!MANAGED-CONFIG \" + managed_url + (interval ? \" interval=\" + std::to_string(interval) : \"\") \\"
    },
    {
        "line": 470,
        "fullcodeline": "*status_code = 400;"
    },
    {
        "line": 476,
        "fullcodeline": "uploadGist(\"mellow\", argUploadPath, output_content, true);"
    },
    {
        "line": 483,
        "fullcodeline": "*status_code = 400;"
    },
    {
        "line": 488,
        "fullcodeline": "uploadGist(\"sssub\", argUploadPath, output_content, false);"
    },
    {
        "line": 494,
        "fullcodeline": "uploadGist(\"ss\", argUploadPath, output_content, false);"
    },
    {
        "line": 500,
        "fullcodeline": "uploadGist(\"ssr\", argUploadPath, output_content, false);"
    },
    {
        "line": 506,
        "fullcodeline": "uploadGist(\"v2ray\", argUploadPath, output_content, false);"
    },
    {
        "line": 512,
        "fullcodeline": "uploadGist(\"trojan\", argUploadPath, output_content, false);"
    },
    {
        "line": 518,
        "fullcodeline": "uploadGist(\"sub\", argUploadPath, output_content, false);"
    },
    {
        "line": 534,
        "fullcodeline": "uploadGist(\"quan\", argUploadPath, output_content, false);"
    },
    {
        "line": 550,
        "fullcodeline": "uploadGist(\"quanx\", argUploadPath, output_content, false);"
    },
    {
        "line": 566,
        "fullcodeline": "uploadGist(\"loon\", argUploadPath, output_content, false);"
    },
    {
        "line": 572,
        "fullcodeline": "uploadGist(\"ssd\", argUploadPath, output_content, false);"
    },
    {
        "line": 143,
        "fullcodeline": "if(!ext.nodelist)"
    },
    {
        "line": 164,
        "fullcodeline": "if(extconf.rename.size())"
    },
    {
        "line": 166,
        "fullcodeline": "if(extconf.emoji.size())"
    },
    {
        "line": 168,
        "fullcodeline": "if(extconf.include.size())"
    },
    {
        "line": 170,
        "fullcodeline": "if(extconf.exclude.size())"
    },
    {
        "line": 203,
        "fullcodeline": "lRulesetContent = global.rulesetsContent;"
    },
    {
        "line": 219,
        "fullcodeline": "ext.rename_array = safe_get_renames();"
    },
    {
        "line": 265,
        "fullcodeline": "if(addNodes(x, insert_nodes, groupID, parse_set) == -1)"
    },
    {
        "line": 415,
        "fullcodeline": "output_content = proxyToClash(nodes, base_content, lRulesetContent, lCustomProxyGroups, argTarget == \"clashr\", ext);"
    },
    {
        "line": 439,
        "fullcodeline": "output_content = proxyToSurge(nodes, base_content, lRulesetContent, lCustomProxyGroups, intSurgeVer, ext);"
    },
    {
        "line": 524,
        "fullcodeline": "if(render_template(fetchFile(lQuanBase, proxy, global.cacheConfig), tpl_args, base_content, global.templatePath) != 0)"
    },
    {
        "line": 540,
        "fullcodeline": "if(render_template(fetchFile(lQuanXBase, proxy, global.cacheConfig), tpl_args, base_content, global.templatePath) != 0)"
    },
    {
        "line": 556,
        "fullcodeline": "if(render_template(fetchFile(lLoonBase, proxy, global.cacheConfig), tpl_args, base_content, global.templatePath) != 0)"
    },
    {
        "line": 145,
        "fullcodeline": "checkExternalBase(extconf.sssub_rule_base, lSSSubBase);"
    },
    {
        "line": 165,
        "fullcodeline": "ext.rename_array = extconf.rename;"
    },
    {
        "line": 167,
        "fullcodeline": "ext.emoji_array = extconf.emoji;"
    },
    {
        "line": 169,
        "fullcodeline": "lIncludeRemarks = extconf.include;"
    },
    {
        "line": 171,
        "fullcodeline": "lExcludeRemarks = extconf.exclude;"
    },
    {
        "line": 181,
        "fullcodeline": "if(argCustomGroups.size() && !ext.nodelist)"
    },
    {
        "line": 188,
        "fullcodeline": "if(argCustomRulesets.size() && !ext.nodelist)"
    },
    {
        "line": 289,
        "fullcodeline": "writeLog(0, \"The following link doesn't contain any valid node info: \" + x, LOG_LEVEL_WARNING);"
    },
    {
        "line": 410,
        "fullcodeline": "if(render_template(fetchFile(lClashBase, proxy, global.cacheConfig), tpl_args, base_content, global.templatePath) != 0)"
    },
    {
        "line": 430,
        "fullcodeline": "uploadGist(\"surge\" + argSurgeVer + \"list\", argUploadPath, output_content, true);"
    },
    {
        "line": 434,
        "fullcodeline": "if(render_template(fetchFile(lSurgeBase, proxy, global.cacheConfig), tpl_args, base_content, global.templatePath) != 0)"
    },
    {
        "line": 444,
        "fullcodeline": "if(global.writeManagedConfig && global.managedConfigPrefix.size())"
    },
    {
        "line": 526,
        "fullcodeline": "*status_code = 400;"
    },
    {
        "line": 542,
        "fullcodeline": "*status_code = 400;"
    },
    {
        "line": 558,
        "fullcodeline": "*status_code = 400;"
    },
    {
        "line": 146,
        "fullcodeline": "if(!lSimpleSubscription)"
    },
    {
        "line": 183,
        "fullcodeline": "string_array vArray = split(argCustomGroups, \"@\");"
    },
    {
        "line": 184,
        "fullcodeline": "lCustomProxyGroups = INIBinding::from<ProxyGroupConfig>::from_ini(vArray);"
    },
    {
        "line": 190,
        "fullcodeline": "string_array vArray = split(argCustomRulesets, \"@\");"
    },
    {
        "line": 191,
        "fullcodeline": "lCustomRulesets = INIBinding::from<RulesetConfig>::from_ini(vArray);"
    },
    {
        "line": 202,
        "fullcodeline": "refreshRulesets(global.customRulesets, global.rulesetsContent);"
    },
    {
        "line": 292,
        "fullcodeline": "*status_code = 400;"
    },
    {
        "line": 412,
        "fullcodeline": "*status_code = 400;"
    },
    {
        "line": 436,
        "fullcodeline": "*status_code = 400;"
    },
    {
        "line": 442,
        "fullcodeline": "uploadGist(\"surge\" + argSurgeVer, argUploadPath, output_content, true);"
    },
    {
        "line": 445,
        "fullcodeline": "output_content = \"#!MANAGED-CONFIG \" + managed_url + (interval ? \" interval=\" + std::to_string(interval) : \"\") \\"
    },
    {
        "line": 148,
        "fullcodeline": "checkExternalBase(extconf.clash_rule_base, lClashBase);"
    },
    {
        "line": 149,
        "fullcodeline": "checkExternalBase(extconf.surge_rule_base, lSurgeBase);"
    },
    {
        "line": 150,
        "fullcodeline": "checkExternalBase(extconf.surfboard_rule_base, lSurfboardBase);"
    },
    {
        "line": 151,
        "fullcodeline": "checkExternalBase(extconf.mellow_rule_base, lMellowBase);"
    },
    {
        "line": 152,
        "fullcodeline": "checkExternalBase(extconf.quan_rule_base, lQuanBase);"
    },
    {
        "line": 153,
        "fullcodeline": "checkExternalBase(extconf.quanx_rule_base, lQuanXBase);"
    },
    {
        "line": 154,
        "fullcodeline": "checkExternalBase(extconf.loon_rule_base, lLoonBase);"
    },
    {
        "line": 160,
        "fullcodeline": "ext.enable_rule_generator = extconf.enable_rule_generator;"
    },
    {
        "line": 161,
        "fullcodeline": "ext.overwrite_original_rules = extconf.overwrite_original_rules;"
    },
    {
        "line": 268,
        "fullcodeline": "writeLog(0, \"The following link doesn't contain any valid node info: \" + x, LOG_LEVEL_WARNING);"
    },
    {
        "line": 293,
        "fullcodeline": "return \"The following link doesn't contain any valid node info: \" + x;"
    },
    {
        "line": 463,
        "fullcodeline": "+ \" strict=\" + std::string(strict ? \"true\" : \"false\") + \"\\n\\n\" + output_content;"
    },
    {
        "line": 156,
        "fullcodeline": "if(extconf.surge_ruleset.size())"
    },
    {
        "line": 158,
        "fullcodeline": "if(extconf.custom_proxy_group.size())"
    },
    {
        "line": 271,
        "fullcodeline": "*status_code = 400;"
    },
    {
        "line": 157,
        "fullcodeline": "lCustomRulesets = extconf.surge_ruleset;"
    },
    {
        "line": 159,
        "fullcodeline": "lCustomProxyGroups = extconf.custom_proxy_group;"
    },
    {
        "line": 272,
        "fullcodeline": "return \"The following link doesn't contain any valid node info: \" + x;"
    },
    {
        "line": 446,
        "fullcodeline": "+ \" strict=\" + std::string(strict ? \"true\" : \"false\") + \"\\n\\n\" + output_content;"
    }
]