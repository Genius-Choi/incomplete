[
    {
        "line": 3,
        "fullcodeline": "guarded_mutex guard(gMutexConfigure);"
    },
    {
        "line": 5,
        "fullcodeline": "writeLog(0, \"Reading preference settings...\", LOG_LEVEL_INFO);"
    },
    {
        "line": 36,
        "fullcodeline": "ini.allow_dup_section_titles = true;"
    },
    {
        "line": 38,
        "fullcodeline": "int retVal = ini.ParseFile(global.prefPath);"
    },
    {
        "line": 48,
        "fullcodeline": "ini.EnterSection(\"common\");"
    },
    {
        "line": 49,
        "fullcodeline": "ini.GetBoolIfExist(\"api_mode\", global.APIMode);"
    },
    {
        "line": 50,
        "fullcodeline": "ini.GetIfExist(\"api_access_token\", global.accessToken);"
    },
    {
        "line": 51,
        "fullcodeline": "ini.GetIfExist(\"default_url\", global.defaultUrls);"
    },
    {
        "line": 52,
        "fullcodeline": "global.enableInsert = ini.Get(\"enable_insert\");"
    },
    {
        "line": 53,
        "fullcodeline": "ini.GetIfExist(\"insert_url\", global.insertUrls);"
    },
    {
        "line": 54,
        "fullcodeline": "ini.GetBoolIfExist(\"prepend_insert_url\", global.prependInsert);"
    },
    {
        "line": 59,
        "fullcodeline": "global.filterScript = ini.GetBool(\"enable_filter\") ? ini.Get(\"filter_script\"): \"\";"
    },
    {
        "line": 60,
        "fullcodeline": "ini.GetIfExist(\"base_path\", global.basePath);"
    },
    {
        "line": 61,
        "fullcodeline": "ini.GetIfExist(\"clash_rule_base\", global.clashBase);"
    },
    {
        "line": 62,
        "fullcodeline": "ini.GetIfExist(\"surge_rule_base\", global.surgeBase);"
    },
    {
        "line": 63,
        "fullcodeline": "ini.GetIfExist(\"surfboard_rule_base\", global.surfboardBase);"
    },
    {
        "line": 64,
        "fullcodeline": "ini.GetIfExist(\"mellow_rule_base\", global.mellowBase);"
    },
    {
        "line": 65,
        "fullcodeline": "ini.GetIfExist(\"quan_rule_base\", global.quanBase);"
    },
    {
        "line": 66,
        "fullcodeline": "ini.GetIfExist(\"quanx_rule_base\", global.quanXBase);"
    },
    {
        "line": 67,
        "fullcodeline": "ini.GetIfExist(\"loon_rule_base\", global.loonBase);"
    },
    {
        "line": 68,
        "fullcodeline": "ini.GetIfExist(\"default_external_config\", global.defaultExtConfig);"
    },
    {
        "line": 69,
        "fullcodeline": "ini.GetBoolIfExist(\"append_proxy_type\", global.appendType);"
    },
    {
        "line": 70,
        "fullcodeline": "ini.GetIfExist(\"proxy_config\", global.proxyConfig);"
    },
    {
        "line": 71,
        "fullcodeline": "ini.GetIfExist(\"proxy_ruleset\", global.proxyRuleset);"
    },
    {
        "line": 72,
        "fullcodeline": "ini.GetIfExist(\"proxy_subscription\", global.proxySubscription);"
    },
    {
        "line": 130,
        "fullcodeline": "ini.EnterSection(\"managed_config\");"
    },
    {
        "line": 131,
        "fullcodeline": "ini.GetBoolIfExist(\"write_managed_config\", global.writeManagedConfig);"
    },
    {
        "line": 132,
        "fullcodeline": "ini.GetIfExist(\"managed_config_prefix\", global.managedConfigPrefix);"
    },
    {
        "line": 133,
        "fullcodeline": "ini.GetIntIfExist(\"config_update_interval\", global.updateInterval);"
    },
    {
        "line": 134,
        "fullcodeline": "ini.GetBoolIfExist(\"config_update_strict\", global.updateStrict);"
    },
    {
        "line": 135,
        "fullcodeline": "ini.GetIfExist(\"quanx_device_id\", global.quanXDevID);"
    },
    {
        "line": 137,
        "fullcodeline": "ini.EnterSection(\"emojis\");"
    },
    {
        "line": 138,
        "fullcodeline": "ini.GetBoolIfExist(\"add_emoji\", global.addEmoji);"
    },
    {
        "line": 139,
        "fullcodeline": "ini.GetBoolIfExist(\"remove_old_emoji\", global.removeEmoji);"
    },
    {
        "line": 153,
        "fullcodeline": "global.enableRuleGen = ini.GetBool(\"enabled\");"
    },
    {
        "line": 191,
        "fullcodeline": "ini.EnterSection(\"template\");"
    },
    {
        "line": 192,
        "fullcodeline": "ini.GetIfExist(\"template_path\", global.templatePath);"
    },
    {
        "line": 194,
        "fullcodeline": "ini.GetItems(tempmap);"
    },
    {
        "line": 202,
        "fullcodeline": "global.templateVars[\"managed_config_prefix\"] = global.managedConfigPrefix;"
    },
    {
        "line": 224,
        "fullcodeline": "ini.EnterSection(\"server\");"
    },
    {
        "line": 225,
        "fullcodeline": "ini.GetIfExist(\"listen\", global.listenAddress);"
    },
    {
        "line": 226,
        "fullcodeline": "ini.GetIntIfExist(\"port\", global.listenPort);"
    },
    {
        "line": 227,
        "fullcodeline": "webServer.serve_file_root = ini.Get(\"serve_file_root\");"
    },
    {
        "line": 228,
        "fullcodeline": "webServer.serve_file = !webServer.serve_file_root.empty();"
    },
    {
        "line": 230,
        "fullcodeline": "ini.EnterSection(\"advanced\");"
    },
    {
        "line": 232,
        "fullcodeline": "ini.GetIfExist(\"log_level\", log_level);"
    },
    {
        "line": 233,
        "fullcodeline": "ini.GetBoolIfExist(\"print_debug_info\", global.printDbgInfo);"
    },
    {
        "line": 259,
        "fullcodeline": "ini.GetIntIfExist(\"max_pending_connections\", global.maxPendingConns);"
    },
    {
        "line": 260,
        "fullcodeline": "ini.GetIntIfExist(\"max_concurrent_threads\", global.maxConcurThreads);"
    },
    {
        "line": 261,
        "fullcodeline": "ini.GetNumberIfExist(\"max_allowed_rulesets\", global.maxAllowedRulesets);"
    },
    {
        "line": 262,
        "fullcodeline": "ini.GetNumberIfExist(\"max_allowed_rules\", global.maxAllowedRules);"
    },
    {
        "line": 263,
        "fullcodeline": "ini.GetNumberIfExist(\"max_allowed_download_size\", global.maxAllowedDownloadSize);"
    },
    {
        "line": 279,
        "fullcodeline": "ini.GetBoolIfExist(\"script_clean_context\", global.scriptCleanContext);"
    },
    {
        "line": 280,
        "fullcodeline": "ini.GetBoolIfExist(\"async_fetch_ruleset\", global.asyncFetchRuleset);"
    },
    {
        "line": 281,
        "fullcodeline": "ini.GetBoolIfExist(\"skip_failed_links\", global.skipFailedLinks);"
    },
    {
        "line": 284,
        "fullcodeline": "writeLog(0, \"Read preference settings completed.\", LOG_LEVEL_INFO);"
    },
    {
        "line": 39,
        "fullcodeline": "if(retVal != INIREADER_EXCEPTION_NONE)"
    },
    {
        "line": 55,
        "fullcodeline": "if(ini.ItemPrefixExist(\"exclude_remarks\"))"
    },
    {
        "line": 57,
        "fullcodeline": "if(ini.ItemPrefixExist(\"include_remarks\"))"
    },
    {
        "line": 74,
        "fullcodeline": "if(ini.SectionExist(\"surge_external_proxy\"))"
    },
    {
        "line": 81,
        "fullcodeline": "if(ini.SectionExist(\"node_pref\"))"
    },
    {
        "line": 109,
        "fullcodeline": "if(ini.SectionExist(\"userinfo\"))"
    },
    {
        "line": 140,
        "fullcodeline": "if(ini.ItemPrefixExist(\"rule\"))"
    },
    {
        "line": 149,
        "fullcodeline": "if(ini.SectionExist(\"rulesets\"))"
    },
    {
        "line": 179,
        "fullcodeline": "if(ini.SectionExist(\"proxy_groups\"))"
    },
    {
        "line": 183,
        "fullcodeline": "if(ini.ItemPrefixExist(\"custom_proxy_group\"))"
    },
    {
        "line": 204,
        "fullcodeline": "if(ini.SectionExist(\"aliases\"))"
    },
    {
        "line": 213,
        "fullcodeline": "if(ini.SectionExist(\"tasks\"))"
    },
    {
        "line": 264,
        "fullcodeline": "if(ini.ItemExist(\"enable_cache\"))"
    },
    {
        "line": 14,
        "fullcodeline": "std::string prefdata = fileGet(global.prefPath, false);"
    },
    {
        "line": 21,
        "fullcodeline": "toml::value conf = parseToml(prefdata, global.prefPath);"
    },
    {
        "line": 42,
        "fullcodeline": "writeLog(0, \"Unable to load preference settings. Reason: \" + ini.GetLastError(), LOG_LEVEL_FATAL);"
    },
    {
        "line": 56,
        "fullcodeline": "ini.GetAll(\"exclude_remarks\", global.excludeRemarks);"
    },
    {
        "line": 58,
        "fullcodeline": "ini.GetAll(\"include_remarks\", global.includeRemarks);"
    },
    {
        "line": 76,
        "fullcodeline": "ini.EnterSection(\"surge_external_proxy\");"
    },
    {
        "line": 77,
        "fullcodeline": "ini.GetIfExist(\"surge_ssr_path\", global.surgeSSRPath);"
    },
    {
        "line": 78,
        "fullcodeline": "ini.GetBoolIfExist(\"resolve_hostname\", global.surgeResolveHostname);"
    },
    {
        "line": 83,
        "fullcodeline": "ini.EnterSection(\"node_pref\");"
    },
    {
        "line": 89,
        "fullcodeline": "global.UDPFlag.set(ini.Get(\"udp_flag\"));"
    },
    {
        "line": 90,
        "fullcodeline": "global.TFOFlag.set(ini.Get(\"tcp_fast_open_flag\"));"
    },
    {
        "line": 91,
        "fullcodeline": "global.skipCertVerify.set(ini.Get(\"skip_cert_verify_flag\"));"
    },
    {
        "line": 92,
        "fullcodeline": "global.TLS13Flag.set(ini.Get(\"tls13_flag\"));"
    },
    {
        "line": 93,
        "fullcodeline": "ini.GetBoolIfExist(\"sort_flag\", global.enableSort);"
    },
    {
        "line": 94,
        "fullcodeline": "global.sortScript = ini.Get(\"sort_script\");"
    },
    {
        "line": 95,
        "fullcodeline": "ini.GetBoolIfExist(\"filter_deprecated_nodes\", global.filterDeprecated);"
    },
    {
        "line": 96,
        "fullcodeline": "ini.GetBoolIfExist(\"append_sub_userinfo\", global.appendUserinfo);"
    },
    {
        "line": 97,
        "fullcodeline": "ini.GetBoolIfExist(\"clash_use_new_field_name\", global.clashUseNewField);"
    },
    {
        "line": 98,
        "fullcodeline": "ini.GetIfExist(\"clash_proxies_style\", global.clashProxiesStyle);"
    },
    {
        "line": 111,
        "fullcodeline": "ini.EnterSection(\"userinfo\");"
    },
    {
        "line": 142,
        "fullcodeline": "ini.GetAll(\"rule\", tempArray);"
    },
    {
        "line": 143,
        "fullcodeline": "importItems(tempArray, false);"
    },
    {
        "line": 144,
        "fullcodeline": "auto configs = INIBinding::from<RegexMatchConfig>::from_ini(tempArray, \",\");"
    },
    {
        "line": 145,
        "fullcodeline": "safe_set_emojis(configs);"
    },
    {
        "line": 146,
        "fullcodeline": "eraseElements(tempArray);"
    },
    {
        "line": 150,
        "fullcodeline": "ini.EnterSection(\"rulesets\");"
    },
    {
        "line": 156,
        "fullcodeline": "ini.GetBoolIfExist(\"overwrite_original_rules\", global.overwriteOriginalRules);"
    },
    {
        "line": 157,
        "fullcodeline": "ini.GetBoolIfExist(\"update_ruleset_on_request\", global.updateRulesetOnRequest);"
    },
    {
        "line": 180,
        "fullcodeline": "ini.EnterSection(\"proxy_groups\");"
    },
    {
        "line": 186,
        "fullcodeline": "ini.GetAll(\"custom_proxy_group\", vArray);"
    },
    {
        "line": 187,
        "fullcodeline": "importItems(vArray, false);"
    },
    {
        "line": 188,
        "fullcodeline": "global.customProxyGroups = INIBinding::from<ProxyGroupConfig>::from_ini(vArray);"
    },
    {
        "line": 206,
        "fullcodeline": "ini.EnterSection(\"aliases\");"
    },
    {
        "line": 207,
        "fullcodeline": "ini.GetItems(tempmap);"
    },
    {
        "line": 208,
        "fullcodeline": "webServer.reset_redirect();"
    },
    {
        "line": 216,
        "fullcodeline": "ini.EnterSection(\"tasks\");"
    },
    {
        "line": 217,
        "fullcodeline": "ini.GetAll(\"task\", vArray);"
    },
    {
        "line": 218,
        "fullcodeline": "importItems(vArray, false);"
    },
    {
        "line": 219,
        "fullcodeline": "global.enableCron = !vArray.empty();"
    },
    {
        "line": 220,
        "fullcodeline": "global.cronTasks = INIBinding::from<CronTaskConfig>::from_ini(vArray);"
    },
    {
        "line": 221,
        "fullcodeline": "refresh_schedule();"
    },
    {
        "line": 235,
        "fullcodeline": "global.logLevel = LOG_LEVEL_VERBOSE;"
    },
    {
        "line": 15,
        "fullcodeline": "if(prefdata.find(\"common:\") != prefdata.npos)"
    },
    {
        "line": 22,
        "fullcodeline": "if(!conf.is_uninitialized() && toml::find_or<int>(conf, \"version\", 0))"
    },
    {
        "line": 32,
        "fullcodeline": "writeLog(0, e.what(), LOG_LEVEL_DEBUG);"
    },
    {
        "line": 99,
        "fullcodeline": "if(ini.ItemPrefixExist(\"rename_node\"))"
    },
    {
        "line": 112,
        "fullcodeline": "if(ini.ItemPrefixExist(\"stream_rule\"))"
    },
    {
        "line": 120,
        "fullcodeline": "if(ini.ItemPrefixExist(\"time_rule\"))"
    },
    {
        "line": 152,
        "fullcodeline": "ini.EnterSection(\"ruleset\");"
    },
    {
        "line": 158,
        "fullcodeline": "if(ini.ItemPrefixExist(\"ruleset\"))"
    },
    {
        "line": 175,
        "fullcodeline": "global.overwriteOriginalRules = false;"
    },
    {
        "line": 176,
        "fullcodeline": "global.updateRulesetOnRequest = false;"
    },
    {
        "line": 182,
        "fullcodeline": "ini.EnterSection(\"clash_proxy_group\");"
    },
    {
        "line": 198,
        "fullcodeline": "if(x.first == \"template_path\")"
    },
    {
        "line": 210,
        "fullcodeline": "webServer.append_redirect(x.first, x.second);"
    },
    {
        "line": 266,
        "fullcodeline": "if(ini.GetBool(\"enable_cache\"))"
    },
    {
        "line": 17,
        "fullcodeline": "YAML::Node yaml = YAML::Load(prefdata);"
    },
    {
        "line": 101,
        "fullcodeline": "ini.GetAll(\"rename_node\", tempArray);"
    },
    {
        "line": 102,
        "fullcodeline": "importItems(tempArray, false);"
    },
    {
        "line": 103,
        "fullcodeline": "auto configs = INIBinding::from<RegexMatchConfig>::from_ini(tempArray, \"@\");"
    },
    {
        "line": 104,
        "fullcodeline": "safe_set_renames(configs);"
    },
    {
        "line": 105,
        "fullcodeline": "eraseElements(tempArray);"
    },
    {
        "line": 114,
        "fullcodeline": "ini.GetAll(\"stream_rule\", tempArray);"
    },
    {
        "line": 115,
        "fullcodeline": "importItems(tempArray, false);"
    },
    {
        "line": 116,
        "fullcodeline": "auto configs = INIBinding::from<RegexMatchConfig>::from_ini(tempArray, \"|\");"
    },
    {
        "line": 117,
        "fullcodeline": "safe_set_streams(configs);"
    },
    {
        "line": 118,
        "fullcodeline": "eraseElements(tempArray);"
    },
    {
        "line": 122,
        "fullcodeline": "ini.GetAll(\"time_rule\", tempArray);"
    },
    {
        "line": 123,
        "fullcodeline": "importItems(tempArray, false);"
    },
    {
        "line": 124,
        "fullcodeline": "auto configs = INIBinding::from<RegexMatchConfig>::from_ini(tempArray, \"|\");"
    },
    {
        "line": 125,
        "fullcodeline": "safe_set_times(configs);"
    },
    {
        "line": 126,
        "fullcodeline": "eraseElements(tempArray);"
    },
    {
        "line": 161,
        "fullcodeline": "ini.GetAll(\"ruleset\", vArray);"
    },
    {
        "line": 162,
        "fullcodeline": "importItems(vArray, false);"
    },
    {
        "line": 163,
        "fullcodeline": "global.customRulesets = INIBinding::from<RulesetConfig>::from_ini(vArray);"
    },
    {
        "line": 238,
        "fullcodeline": "switch(hash_(log_level))"
    },
    {
        "line": 268,
        "fullcodeline": "ini.GetIntIfExist(\"cache_subscription\", global.cacheSubscription);"
    },
    {
        "line": 269,
        "fullcodeline": "ini.GetIntIfExist(\"cache_config\", global.cacheConfig);"
    },
    {
        "line": 270,
        "fullcodeline": "ini.GetIntIfExist(\"cache_ruleset\", global.cacheRuleset);"
    },
    {
        "line": 271,
        "fullcodeline": "ini.GetBoolIfExist(\"serve_cache_on_fetch_fail\", global.serveCacheOnFetchFail);"
    },
    {
        "line": 18,
        "fullcodeline": "if(yaml.size() && yaml[\"common\"])"
    },
    {
        "line": 23,
        "fullcodeline": "return readTOMLConf(conf);"
    },
    {
        "line": 241,
        "fullcodeline": "global.logLevel = LOG_LEVEL_WARNING;"
    },
    {
        "line": 244,
        "fullcodeline": "global.logLevel = LOG_LEVEL_ERROR;"
    },
    {
        "line": 247,
        "fullcodeline": "global.logLevel = LOG_LEVEL_FATAL;"
    },
    {
        "line": 250,
        "fullcodeline": "global.logLevel = LOG_LEVEL_VERBOSE;"
    },
    {
        "line": 253,
        "fullcodeline": "global.logLevel = LOG_LEVEL_DEBUG;"
    },
    {
        "line": 256,
        "fullcodeline": "global.logLevel = LOG_LEVEL_INFO;"
    },
    {
        "line": 275,
        "fullcodeline": "global.cacheSubscription = global.cacheConfig = global.cacheRuleset = 0; //disable cache"
    },
    {
        "line": 276,
        "fullcodeline": "global.serveCacheOnFetchFail = false;"
    },
    {
        "line": 165,
        "fullcodeline": "else if(ini.ItemPrefixExist(\"surge_ruleset\"))"
    },
    {
        "line": 19,
        "fullcodeline": "return readYAMLConf(yaml);"
    },
    {
        "line": 168,
        "fullcodeline": "ini.GetAll(\"surge_ruleset\", vArray);"
    },
    {
        "line": 169,
        "fullcodeline": "importItems(vArray, false);"
    },
    {
        "line": 170,
        "fullcodeline": "global.customRulesets = INIBinding::from<RulesetConfig>::from_ini(vArray);"
    }
]