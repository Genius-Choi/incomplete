[
    {
        "line": 3,
        "fullcodeline": "YAML::Node section = node[\"common\"];"
    },
    {
        "line": 7,
        "fullcodeline": "section[\"api_mode\"] >> global.APIMode;"
    },
    {
        "line": 8,
        "fullcodeline": "section[\"api_access_token\"] >> global.accessToken;"
    },
    {
        "line": 22,
        "fullcodeline": "global.enableInsert = safe_as<std::string>(section[\"enable_insert\"]);"
    },
    {
        "line": 36,
        "fullcodeline": "section[\"prepend_insert_url\"] >> global.prependInsert;"
    },
    {
        "line": 41,
        "fullcodeline": "global.filterScript = safe_as<bool>(section[\"enable_filter\"]) ? safe_as<std::string>(section[\"filter_script\"]) : \"\";"
    },
    {
        "line": 42,
        "fullcodeline": "section[\"base_path\"] >> global.basePath;"
    },
    {
        "line": 43,
        "fullcodeline": "section[\"clash_rule_base\"] >> global.clashBase;"
    },
    {
        "line": 44,
        "fullcodeline": "section[\"surge_rule_base\"] >> global.surgeBase;"
    },
    {
        "line": 45,
        "fullcodeline": "section[\"surfboard_rule_base\"] >> global.surfboardBase;"
    },
    {
        "line": 46,
        "fullcodeline": "section[\"mellow_rule_base\"] >> global.mellowBase;"
    },
    {
        "line": 47,
        "fullcodeline": "section[\"quan_rule_base\"] >> global.quanBase;"
    },
    {
        "line": 48,
        "fullcodeline": "section[\"quanx_rule_base\"] >> global.quanXBase;"
    },
    {
        "line": 49,
        "fullcodeline": "section[\"loon_rule_base\"] >> global.loonBase;"
    },
    {
        "line": 50,
        "fullcodeline": "section[\"sssub_rule_base\"] >> global.SSSubBase;"
    },
    {
        "line": 52,
        "fullcodeline": "section[\"default_external_config\"] >> global.defaultExtConfig;"
    },
    {
        "line": 53,
        "fullcodeline": "section[\"append_proxy_type\"] >> global.appendType;"
    },
    {
        "line": 54,
        "fullcodeline": "section[\"proxy_config\"] >> global.proxyConfig;"
    },
    {
        "line": 55,
        "fullcodeline": "section[\"proxy_ruleset\"] >> global.proxyRuleset;"
    },
    {
        "line": 56,
        "fullcodeline": "section[\"proxy_subscription\"] >> global.proxySubscription;"
    },
    {
        "line": 135,
        "fullcodeline": "const char *rulesets_title = node[\"rulesets\"].IsDefined() ? \"rulesets\" : \"ruleset\";"
    },
    {
        "line": 159,
        "fullcodeline": "const char *groups_title = node[\"proxy_groups\"].IsDefined() ? \"proxy_groups\" : \"proxy_group\";"
    },
    {
        "line": 279,
        "fullcodeline": "writeLog(0, \"Load preference settings in YAML format completed.\", LOG_LEVEL_INFO);"
    },
    {
        "line": 9,
        "fullcodeline": "if(section[\"default_url\"].IsSequence())"
    },
    {
        "line": 23,
        "fullcodeline": "if(section[\"insert_url\"].IsSequence())"
    },
    {
        "line": 37,
        "fullcodeline": "if(section[\"exclude_remarks\"].IsSequence())"
    },
    {
        "line": 39,
        "fullcodeline": "if(section[\"include_remarks\"].IsSequence())"
    },
    {
        "line": 58,
        "fullcodeline": "if(node[\"userinfo\"].IsDefined())"
    },
    {
        "line": 77,
        "fullcodeline": "if(node[\"node_pref\"].IsDefined())"
    },
    {
        "line": 97,
        "fullcodeline": "if(section[\"rename_node\"].IsSequence())"
    },
    {
        "line": 105,
        "fullcodeline": "if(node[\"managed_config\"].IsDefined())"
    },
    {
        "line": 115,
        "fullcodeline": "if(node[\"surge_external_proxy\"].IsDefined())"
    },
    {
        "line": 121,
        "fullcodeline": "if(node[\"emojis\"].IsDefined())"
    },
    {
        "line": 136,
        "fullcodeline": "if(node[rulesets_title].IsDefined())"
    },
    {
        "line": 160,
        "fullcodeline": "if(node[groups_title].IsDefined() && node[groups_title][\"custom_proxy_group\"].IsDefined())"
    },
    {
        "line": 167,
        "fullcodeline": "if(node[\"template\"].IsDefined())"
    },
    {
        "line": 183,
        "fullcodeline": "if(node[\"aliases\"].IsSequence())"
    },
    {
        "line": 195,
        "fullcodeline": "if(node[\"tasks\"].IsSequence())"
    },
    {
        "line": 220,
        "fullcodeline": "if(node[\"server\"].IsDefined())"
    },
    {
        "line": 228,
        "fullcodeline": "if(node[\"advanced\"].IsDefined())"
    },
    {
        "line": 11,
        "fullcodeline": "section[\"default_url\"] >> tempArray;"
    },
    {
        "line": 25,
        "fullcodeline": "section[\"insert_url\"] >> tempArray;"
    },
    {
        "line": 38,
        "fullcodeline": "section[\"exclude_remarks\"] >> global.excludeRemarks;"
    },
    {
        "line": 40,
        "fullcodeline": "section[\"include_remarks\"] >> global.includeRemarks;"
    },
    {
        "line": 60,
        "fullcodeline": "section = node[\"userinfo\"];"
    },
    {
        "line": 79,
        "fullcodeline": "section = node[\"node_pref\"];"
    },
    {
        "line": 85,
        "fullcodeline": "global.UDPFlag.set(safe_as<std::string>(section[\"udp_flag\"]));"
    },
    {
        "line": 86,
        "fullcodeline": "global.TFOFlag.set(safe_as<std::string>(section[\"tcp_fast_open_flag\"]));"
    },
    {
        "line": 87,
        "fullcodeline": "global.skipCertVerify.set(safe_as<std::string>(section[\"skip_cert_verify_flag\"]));"
    },
    {
        "line": 88,
        "fullcodeline": "global.TLS13Flag.set(safe_as<std::string>(section[\"tls13_flag\"]));"
    },
    {
        "line": 89,
        "fullcodeline": "section[\"sort_flag\"] >> global.enableSort;"
    },
    {
        "line": 90,
        "fullcodeline": "section[\"sort_script\"] >> global.sortScript;"
    },
    {
        "line": 91,
        "fullcodeline": "section[\"filter_deprecated_nodes\"] >> global.filterDeprecated;"
    },
    {
        "line": 92,
        "fullcodeline": "section[\"append_sub_userinfo\"] >> global.appendUserinfo;"
    },
    {
        "line": 93,
        "fullcodeline": "section[\"clash_use_new_field_name\"] >> global.clashUseNewField;"
    },
    {
        "line": 94,
        "fullcodeline": "section[\"clash_proxies_style\"] >> global.clashProxiesStyle;"
    },
    {
        "line": 99,
        "fullcodeline": "readRegexMatch(section[\"rename_node\"], \"@\", tempArray, false);"
    },
    {
        "line": 100,
        "fullcodeline": "auto configs = INIBinding::from<RegexMatchConfig>::from_ini(tempArray, \"@\");"
    },
    {
        "line": 101,
        "fullcodeline": "safe_set_renames(configs);"
    },
    {
        "line": 102,
        "fullcodeline": "eraseElements(tempArray);"
    },
    {
        "line": 107,
        "fullcodeline": "section = node[\"managed_config\"];"
    },
    {
        "line": 108,
        "fullcodeline": "section[\"write_managed_config\"] >> global.writeManagedConfig;"
    },
    {
        "line": 109,
        "fullcodeline": "section[\"managed_config_prefix\"] >> global.managedConfigPrefix;"
    },
    {
        "line": 110,
        "fullcodeline": "section[\"config_update_interval\"] >> global.updateInterval;"
    },
    {
        "line": 111,
        "fullcodeline": "section[\"config_update_strict\"] >> global.updateStrict;"
    },
    {
        "line": 112,
        "fullcodeline": "section[\"quanx_device_id\"] >> global.quanXDevID;"
    },
    {
        "line": 123,
        "fullcodeline": "section = node[\"emojis\"];"
    },
    {
        "line": 124,
        "fullcodeline": "section[\"add_emoji\"] >> global.addEmoji;"
    },
    {
        "line": 125,
        "fullcodeline": "section[\"remove_old_emoji\"] >> global.removeEmoji;"
    },
    {
        "line": 138,
        "fullcodeline": "section = node[rulesets_title];"
    },
    {
        "line": 139,
        "fullcodeline": "section[\"enabled\"] >> global.enableRuleGen;"
    },
    {
        "line": 150,
        "fullcodeline": "const char *ruleset_title = section[\"rulesets\"].IsDefined() ? \"rulesets\" : \"surge_ruleset\";"
    },
    {
        "line": 163,
        "fullcodeline": "readGroup(node[groups_title][\"custom_proxy_group\"], vArray, false);"
    },
    {
        "line": 164,
        "fullcodeline": "global.customProxyGroups = INIBinding::from<ProxyGroupConfig>::from_ini(vArray);"
    },
    {
        "line": 185,
        "fullcodeline": "webServer.reset_redirect();"
    },
    {
        "line": 214,
        "fullcodeline": "importItems(vArray, false);"
    },
    {
        "line": 215,
        "fullcodeline": "global.enableCron = !vArray.empty();"
    },
    {
        "line": 216,
        "fullcodeline": "global.cronTasks = INIBinding::from<CronTaskConfig>::from_ini(vArray);"
    },
    {
        "line": 217,
        "fullcodeline": "refresh_schedule();"
    },
    {
        "line": 224,
        "fullcodeline": "node[\"server\"][\"serve_file_root\"] >>= webServer.serve_file_root;"
    },
    {
        "line": 225,
        "fullcodeline": "webServer.serve_file = !webServer.serve_file_root.empty();"
    },
    {
        "line": 231,
        "fullcodeline": "node[\"advanced\"][\"log_level\"] >> log_level;"
    },
    {
        "line": 12,
        "fullcodeline": "if(tempArray.size())"
    },
    {
        "line": 26,
        "fullcodeline": "if(tempArray.size())"
    },
    {
        "line": 61,
        "fullcodeline": "if(section[\"stream_rule\"].IsSequence())"
    },
    {
        "line": 68,
        "fullcodeline": "if(section[\"time_rule\"].IsSequence())"
    },
    {
        "line": 126,
        "fullcodeline": "if(section[\"rules\"].IsSequence())"
    },
    {
        "line": 140,
        "fullcodeline": "if(!global.enableRuleGen)"
    },
    {
        "line": 151,
        "fullcodeline": "if(section[ruleset_title].IsSequence())"
    },
    {
        "line": 186,
        "fullcodeline": "for(size_t i = 0; i < node[\"aliases\"].size(); i++)"
    },
    {
        "line": 198,
        "fullcodeline": "for(size_t i = 0; i < node[\"tasks\"].size(); i++)"
    },
    {
        "line": 14,
        "fullcodeline": "strLine = std::accumulate(std::next(tempArray.begin()), tempArray.end(), tempArray[0], [](std::string a, std::string b)"
    },
    {
        "line": 18,
        "fullcodeline": "global.defaultUrls = strLine;"
    },
    {
        "line": 19,
        "fullcodeline": "eraseElements(tempArray);"
    },
    {
        "line": 28,
        "fullcodeline": "strLine = std::accumulate(std::next(tempArray.begin()), tempArray.end(), tempArray[0], [](std::string a, std::string b)"
    },
    {
        "line": 32,
        "fullcodeline": "global.insertUrls = strLine;"
    },
    {
        "line": 33,
        "fullcodeline": "eraseElements(tempArray);"
    },
    {
        "line": 63,
        "fullcodeline": "readRegexMatch(section[\"stream_rule\"], \"|\", tempArray, false);"
    },
    {
        "line": 64,
        "fullcodeline": "auto configs = INIBinding::from<RegexMatchConfig>::from_ini(tempArray, \"|\");"
    },
    {
        "line": 65,
        "fullcodeline": "safe_set_streams(configs);"
    },
    {
        "line": 66,
        "fullcodeline": "eraseElements(tempArray);"
    },
    {
        "line": 70,
        "fullcodeline": "readRegexMatch(section[\"time_rule\"], \"|\", tempArray, false);"
    },
    {
        "line": 71,
        "fullcodeline": "auto configs = INIBinding::from<RegexMatchConfig>::from_ini(tempArray, \"|\");"
    },
    {
        "line": 72,
        "fullcodeline": "safe_set_times(configs);"
    },
    {
        "line": 73,
        "fullcodeline": "eraseElements(tempArray);"
    },
    {
        "line": 128,
        "fullcodeline": "readEmoji(section[\"rules\"], tempArray, false);"
    },
    {
        "line": 129,
        "fullcodeline": "auto configs = INIBinding::from<RegexMatchConfig>::from_ini(tempArray, \",\");"
    },
    {
        "line": 130,
        "fullcodeline": "safe_set_emojis(configs);"
    },
    {
        "line": 131,
        "fullcodeline": "eraseElements(tempArray);"
    },
    {
        "line": 142,
        "fullcodeline": "global.overwriteOriginalRules = false;"
    },
    {
        "line": 143,
        "fullcodeline": "global.updateRulesetOnRequest = false;"
    },
    {
        "line": 154,
        "fullcodeline": "readRuleset(section[ruleset_title], vArray, false);"
    },
    {
        "line": 155,
        "fullcodeline": "global.customRulesets = INIBinding::from<RulesetConfig>::from_ini(vArray);"
    },
    {
        "line": 189,
        "fullcodeline": "node[\"aliases\"][i][\"uri\"] >> uri;"
    },
    {
        "line": 190,
        "fullcodeline": "node[\"aliases\"][i][\"target\"] >> target;"
    },
    {
        "line": 191,
        "fullcodeline": "webServer.append_redirect(uri, target);"
    },
    {
        "line": 201,
        "fullcodeline": "node[\"tasks\"][i][\"import\"] >> name;"
    },
    {
        "line": 207,
        "fullcodeline": "node[\"tasks\"][i][\"name\"] >> name;"
    },
    {
        "line": 208,
        "fullcodeline": "node[\"tasks\"][i][\"cronexp\"] >> exp;"
    },
    {
        "line": 209,
        "fullcodeline": "node[\"tasks\"][i][\"path\"] >> path;"
    },
    {
        "line": 210,
        "fullcodeline": "node[\"tasks\"][i][\"timeout\"] >> timeout;"
    },
    {
        "line": 211,
        "fullcodeline": "strLine = name + \"`\" + exp + \"`\" + path + \"`\" + timeout;"
    },
    {
        "line": 212,
        "fullcodeline": "vArray.emplace_back(std::move(strLine));"
    },
    {
        "line": 234,
        "fullcodeline": "global.logLevel = LOG_LEVEL_VERBOSE;"
    },
    {
        "line": 147,
        "fullcodeline": "section[\"overwrite_original_rules\"] >> global.overwriteOriginalRules;"
    },
    {
        "line": 148,
        "fullcodeline": "section[\"update_ruleset_on_request\"] >> global.updateRulesetOnRequest;"
    },
    {
        "line": 173,
        "fullcodeline": "for(size_t i = 0; i < node[\"template\"][\"globals\"].size(); i++)"
    },
    {
        "line": 202,
        "fullcodeline": "if(name.size())"
    },
    {
        "line": 265,
        "fullcodeline": "if(safe_as<bool>(node[\"advanced\"][\"enable_cache\"]))"
    },
    {
        "line": 176,
        "fullcodeline": "node[\"template\"][\"globals\"][i][\"key\"] >> key;"
    },
    {
        "line": 177,
        "fullcodeline": "node[\"template\"][\"globals\"][i][\"value\"] >> value;"
    },
    {
        "line": 178,
        "fullcodeline": "global.templateVars[key] = value;"
    },
    {
        "line": 204,
        "fullcodeline": "vArray.emplace_back(\"!!import:\" + name);"
    },
    {
        "line": 237,
        "fullcodeline": "switch(hash_(log_level))"
    },
    {
        "line": 240,
        "fullcodeline": "global.logLevel = LOG_LEVEL_WARNING;"
    },
    {
        "line": 243,
        "fullcodeline": "global.logLevel = LOG_LEVEL_ERROR;"
    },
    {
        "line": 246,
        "fullcodeline": "global.logLevel = LOG_LEVEL_FATAL;"
    },
    {
        "line": 249,
        "fullcodeline": "global.logLevel = LOG_LEVEL_VERBOSE;"
    },
    {
        "line": 252,
        "fullcodeline": "global.logLevel = LOG_LEVEL_DEBUG;"
    },
    {
        "line": 255,
        "fullcodeline": "global.logLevel = LOG_LEVEL_INFO;"
    },
    {
        "line": 273,
        "fullcodeline": "global.cacheSubscription = global.cacheConfig = global.cacheRuleset = 0; //disable cache"
    }
]