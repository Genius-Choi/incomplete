[
    {
        "line": 9,
        "fullcodeline": "char_u\tbuf2[NUMBUFLEN];"
    },
    {
        "line": 11,
        "fullcodeline": "static int\thexupper = FALSE;\t// 0xABC"
    },
    {
        "line": 24,
        "fullcodeline": "int\t\tnegative = FALSE;"
    },
    {
        "line": 25,
        "fullcodeline": "int\t\twas_positive = TRUE;"
    },
    {
        "line": 26,
        "fullcodeline": "int\t\tvisual = VIsual_active;"
    },
    {
        "line": 27,
        "fullcodeline": "int\t\tdid_change = FALSE;"
    },
    {
        "line": 28,
        "fullcodeline": "pos_T\tsave_cursor = curwin->w_cursor;"
    },
    {
        "line": 29,
        "fullcodeline": "int\t\tmaxlen = 0;"
    },
    {
        "line": 32,
        "fullcodeline": "colnr_T\tsave_coladd = 0;"
    },
    {
        "line": 34,
        "fullcodeline": "do_hex = (vim_strchr(curbuf->b_p_nf, 'x') != NULL);\t// \"heX\""
    },
    {
        "line": 35,
        "fullcodeline": "do_oct = (vim_strchr(curbuf->b_p_nf, 'o') != NULL);\t// \"Octal\""
    },
    {
        "line": 36,
        "fullcodeline": "do_bin = (vim_strchr(curbuf->b_p_nf, 'b') != NULL);\t// \"Bin\""
    },
    {
        "line": 37,
        "fullcodeline": "do_alpha = (vim_strchr(curbuf->b_p_nf, 'p') != NULL);\t// \"alPha\""
    },
    {
        "line": 38,
        "fullcodeline": "do_unsigned = (vim_strchr(curbuf->b_p_nf, 'u') != NULL);\t// \"Unsigned\""
    },
    {
        "line": 46,
        "fullcodeline": "curwin->w_cursor = *pos;"
    },
    {
        "line": 47,
        "fullcodeline": "ptr = ml_get(pos->lnum);"
    },
    {
        "line": 48,
        "fullcodeline": "col = pos->col;"
    },
    {
        "line": 169,
        "fullcodeline": "firstdigit = ptr[col];"
    },
    {
        "line": 40,
        "fullcodeline": "if (virtual_active())"
    },
    {
        "line": 50,
        "fullcodeline": "if (*ptr == NUL || col + !!save_coladd >= (int)STRLEN(ptr))"
    },
    {
        "line": 56,
        "fullcodeline": "if (!VIsual_active)"
    },
    {
        "line": 170,
        "fullcodeline": "if (!VIM_ISDIGIT(firstdigit) && !(do_alpha && ASCII_ISALPHA(firstdigit)))"
    },
    {
        "line": 176,
        "fullcodeline": "if (do_alpha && ASCII_ISALPHA(firstdigit))"
    },
    {
        "line": 429,
        "fullcodeline": "if (did_change && (cmdmod.cmod_flags & CMOD_LOCKMARKS) == 0)"
    },
    {
        "line": 42,
        "fullcodeline": "save_coladd = pos->coladd;"
    },
    {
        "line": 43,
        "fullcodeline": "pos->coladd = 0;"
    },
    {
        "line": 172,
        "fullcodeline": "beep_flush();"
    },
    {
        "line": 203,
        "fullcodeline": "curwin->w_cursor.col = col;"
    },
    {
        "line": 206,
        "fullcodeline": "did_change = TRUE;"
    },
    {
        "line": 207,
        "fullcodeline": "(void)del_char(FALSE);"
    },
    {
        "line": 208,
        "fullcodeline": "ins_char(firstdigit);"
    },
    {
        "line": 209,
        "fullcodeline": "endpos = curwin->w_cursor;"
    },
    {
        "line": 210,
        "fullcodeline": "curwin->w_cursor.col = col;"
    },
    {
        "line": 432,
        "fullcodeline": "curbuf->b_op_start = startpos;"
    },
    {
        "line": 433,
        "fullcodeline": "curbuf->b_op_end = endpos;"
    },
    {
        "line": 440,
        "fullcodeline": "curwin->w_cursor = save_cursor;"
    },
    {
        "line": 74,
        "fullcodeline": "if (       do_bin"
    },
    {
        "line": 97,
        "fullcodeline": "if ((       do_hex"
    },
    {
        "line": 144,
        "fullcodeline": "while (ptr[col] != NUL && length > 0"
    },
    {
        "line": 154,
        "fullcodeline": "if (length == 0)"
    },
    {
        "line": 157,
        "fullcodeline": "if (col > pos->col && ptr[col - 1] == '-'"
    },
    {
        "line": 179,
        "fullcodeline": "if (op_type == OP_NR_SUB)"
    },
    {
        "line": 204,
        "fullcodeline": "if (!did_change)"
    },
    {
        "line": 233,
        "fullcodeline": "int overflow = FALSE;"
    },
    {
        "line": 234,
        "fullcodeline": "vim_str2nr(ptr + col, &pre, &length,"
    },
    {
        "line": 248,
        "fullcodeline": "subtract = FALSE;"
    },
    {
        "line": 254,
        "fullcodeline": "oldn = n;"
    },
    {
        "line": 308,
        "fullcodeline": "curwin->w_cursor.col = col;"
    },
    {
        "line": 311,
        "fullcodeline": "did_change = TRUE;"
    },
    {
        "line": 312,
        "fullcodeline": "todel = length;"
    },
    {
        "line": 313,
        "fullcodeline": "c = gchar_cursor();"
    },
    {
        "line": 321,
        "fullcodeline": "save_pos = curwin->w_cursor;"
    },
    {
        "line": 334,
        "fullcodeline": "curwin->w_cursor = save_pos;"
    },
    {
        "line": 341,
        "fullcodeline": "buf1 = alloc(length + NUMBUFLEN);"
    },
    {
        "line": 344,
        "fullcodeline": "ptr = buf1;"
    },
    {
        "line": 384,
        "fullcodeline": "length -= (int)STRLEN(buf2);"
    },
    {
        "line": 395,
        "fullcodeline": "*ptr = NUL;"
    },
    {
        "line": 397,
        "fullcodeline": "STRCAT(buf1, buf2);"
    },
    {
        "line": 402,
        "fullcodeline": "save_pos = curwin->w_cursor;"
    },
    {
        "line": 405,
        "fullcodeline": "ins_str(buf1);\t\t// insert the new number"
    },
    {
        "line": 406,
        "fullcodeline": "vim_free(buf1);"
    },
    {
        "line": 424,
        "fullcodeline": "endpos = curwin->w_cursor;"
    },
    {
        "line": 434,
        "fullcodeline": "if (curbuf->b_op_end.col > 0)"
    },
    {
        "line": 76,
        "fullcodeline": "&& ! ((col > 0"
    },
    {
        "line": 87,
        "fullcodeline": "col = pos->col;"
    },
    {
        "line": 105,
        "fullcodeline": "(       do_bin"
    },
    {
        "line": 115,
        "fullcodeline": "--col;"
    },
    {
        "line": 146,
        "fullcodeline": "&& !(do_alpha && ASCII_ISALPHA(ptr[col])))"
    },
    {
        "line": 148,
        "fullcodeline": "int mb_len = mb_ptr2len(ptr + col);"
    },
    {
        "line": 150,
        "fullcodeline": "col += mb_len;"
    },
    {
        "line": 151,
        "fullcodeline": "length -= mb_len;"
    },
    {
        "line": 159,
        "fullcodeline": "&& !do_unsigned)"
    },
    {
        "line": 161,
        "fullcodeline": "negative = TRUE;"
    },
    {
        "line": 162,
        "fullcodeline": "was_positive = FALSE;"
    },
    {
        "line": 205,
        "fullcodeline": "startpos = curwin->w_cursor;"
    },
    {
        "line": 217,
        "fullcodeline": "if (col > 0 && ptr[col - 1] == '-'"
    },
    {
        "line": 228,
        "fullcodeline": "if (visual && VIsual_mode != 'V')"
    },
    {
        "line": 235,
        "fullcodeline": "0 + (do_bin ? STR2NR_BIN : 0)"
    },
    {
        "line": 241,
        "fullcodeline": "if (pre && negative)"
    },
    {
        "line": 249,
        "fullcodeline": "if (op_type == OP_NR_SUB)"
    },
    {
        "line": 255,
        "fullcodeline": "if (!overflow)  // if number is too big don't add/subtract"
    },
    {
        "line": 264,
        "fullcodeline": "if (!pre)"
    },
    {
        "line": 287,
        "fullcodeline": "if (do_unsigned && negative)"
    },
    {
        "line": 298,
        "fullcodeline": "if (visual && !was_positive && !negative && col > 0)"
    },
    {
        "line": 309,
        "fullcodeline": "if (!did_change)"
    },
    {
        "line": 318,
        "fullcodeline": "if (c == '-')"
    },
    {
        "line": 322,
        "fullcodeline": "for (i = 0; i < todel; ++i)"
    },
    {
        "line": 342,
        "fullcodeline": "if (buf1 == NULL)"
    },
    {
        "line": 345,
        "fullcodeline": "if (negative && (!visual || was_positive))"
    },
    {
        "line": 352,
        "fullcodeline": "if (pre == 'b' || pre == 'B' ||"
    },
    {
        "line": 362,
        "fullcodeline": "if (pre == 'b' || pre == 'B')"
    },
    {
        "line": 392,
        "fullcodeline": "if (firstdigit == '0' && !(do_oct && pre == 0))"
    },
    {
        "line": 403,
        "fullcodeline": "if (todel > 0)"
    },
    {
        "line": 409,
        "fullcodeline": "if (todel > 0)"
    },
    {
        "line": 421,
        "fullcodeline": "while (todel-- > 0)"
    },
    {
        "line": 422,
        "fullcodeline": "(void)del_char(FALSE);"
    },
    {
        "line": 425,
        "fullcodeline": "if (did_change && curwin->w_cursor.col)"
    },
    {
        "line": 435,
        "fullcodeline": "--curbuf->b_op_end.col;"
    },
    {
        "line": 59,
        "fullcodeline": "while (col > 0 && vim_isbdigit(ptr[col]))"
    },
    {
        "line": 67,
        "fullcodeline": "while (col > 0 && vim_isxdigit(ptr[col]))"
    },
    {
        "line": 89,
        "fullcodeline": "while (col > 0 && vim_isdigit(ptr[col]))"
    },
    {
        "line": 104,
        "fullcodeline": "&& vim_isxdigit(ptr[col + 1])) ||"
    },
    {
        "line": 112,
        "fullcodeline": "&& vim_isbdigit(ptr[col + 1])))"
    },
    {
        "line": 124,
        "fullcodeline": "col = pos->col;"
    },
    {
        "line": 145,
        "fullcodeline": "&& !vim_isdigit(ptr[col])"
    },
    {
        "line": 158,
        "fullcodeline": "&& (!has_mbyte || !(*mb_head_off)(ptr, ptr + col - 1))"
    },
    {
        "line": 181,
        "fullcodeline": "if (CharOrd(firstdigit) < Prenum1)"
    },
    {
        "line": 221,
        "fullcodeline": "&& !do_unsigned)"
    },
    {
        "line": 224,
        "fullcodeline": "--col;"
    },
    {
        "line": 225,
        "fullcodeline": "negative = TRUE;"
    },
    {
        "line": 229,
        "fullcodeline": "maxlen = (curbuf->b_visual.vi_curswant == MAXCOL"
    },
    {
        "line": 237,
        "fullcodeline": "+ (do_hex ? STR2NR_HEX : 0),"
    },
    {
        "line": 243,
        "fullcodeline": "++col;"
    },
    {
        "line": 244,
        "fullcodeline": "--length;"
    },
    {
        "line": 245,
        "fullcodeline": "negative = FALSE;"
    },
    {
        "line": 250,
        "fullcodeline": "subtract ^= TRUE;"
    },
    {
        "line": 252,
        "fullcodeline": "subtract ^= TRUE;"
    },
    {
        "line": 295,
        "fullcodeline": "negative = FALSE;"
    },
    {
        "line": 301,
        "fullcodeline": "col--;"
    },
    {
        "line": 302,
        "fullcodeline": "length++;"
    },
    {
        "line": 310,
        "fullcodeline": "startpos = curwin->w_cursor;"
    },
    {
        "line": 319,
        "fullcodeline": "--length;"
    },
    {
        "line": 331,
        "fullcodeline": "inc_cursor();"
    },
    {
        "line": 332,
        "fullcodeline": "c = gchar_cursor();"
    },
    {
        "line": 346,
        "fullcodeline": "*ptr++ = '-';"
    },
    {
        "line": 349,
        "fullcodeline": "*ptr++ = '0';"
    },
    {
        "line": 350,
        "fullcodeline": "--length;"
    },
    {
        "line": 353,
        "fullcodeline": "pre == 'x' || pre == 'X')"
    },
    {
        "line": 355,
        "fullcodeline": "*ptr++ = pre;"
    },
    {
        "line": 356,
        "fullcodeline": "--length;"
    },
    {
        "line": 364,
        "fullcodeline": "int bit = 0;"
    },
    {
        "line": 365,
        "fullcodeline": "int bits = sizeof(uvarnumber_T) * 8;"
    },
    {
        "line": 374,
        "fullcodeline": "buf2[i] = '\\0';"
    },
    {
        "line": 404,
        "fullcodeline": "inc_cursor();"
    },
    {
        "line": 411,
        "fullcodeline": "int bytes_after = (int)STRLEN(ml_get_curline())"
    },
    {
        "line": 415,
        "fullcodeline": "curwin->w_cursor = save_pos;"
    },
    {
        "line": 416,
        "fullcodeline": "(void)del_char(FALSE);"
    },
    {
        "line": 417,
        "fullcodeline": "curwin->w_cursor.col = (colnr_T)(STRLEN(ml_get_curline())"
    },
    {
        "line": 419,
        "fullcodeline": "--todel;"
    },
    {
        "line": 426,
        "fullcodeline": "--curwin->w_cursor.col;"
    },
    {
        "line": 442,
        "fullcodeline": "curwin->w_set_curswant = TRUE;"
    },
    {
        "line": 61,
        "fullcodeline": "--col;"
    },
    {
        "line": 69,
        "fullcodeline": "--col;"
    },
    {
        "line": 82,
        "fullcodeline": "&& vim_isxdigit(ptr[col + 1]))))"
    },
    {
        "line": 91,
        "fullcodeline": "col--;"
    },
    {
        "line": 102,
        "fullcodeline": "&& (!has_mbyte ||"
    },
    {
        "line": 110,
        "fullcodeline": "&& (!has_mbyte ||"
    },
    {
        "line": 117,
        "fullcodeline": "col -= (*mb_head_off)(ptr, ptr + col);"
    },
    {
        "line": 126,
        "fullcodeline": "while (ptr[col] != NUL"
    },
    {
        "line": 129,
        "fullcodeline": "col += mb_ptr2len(ptr + col);"
    },
    {
        "line": 131,
        "fullcodeline": "while (col > 0"
    },
    {
        "line": 193,
        "fullcodeline": "if (26 - CharOrd(firstdigit) - 1 < Prenum1)"
    },
    {
        "line": 220,
        "fullcodeline": "&& !visual"
    },
    {
        "line": 236,
        "fullcodeline": "+ (do_oct ? STR2NR_OCT : 0)"
    },
    {
        "line": 283,
        "fullcodeline": "if (n == 0)"
    },
    {
        "line": 324,
        "fullcodeline": "if (c < 0x100 && isalpha(c))"
    },
    {
        "line": 368,
        "fullcodeline": "for (bit = bits; bit > 0; bit--)"
    },
    {
        "line": 371,
        "fullcodeline": "for (i = 0; bit > 0; bit--)"
    },
    {
        "line": 372,
        "fullcodeline": "buf2[i++] = ((n >> (bit - 1)) & 0x1) ? '1' : '0';"
    },
    {
        "line": 393,
        "fullcodeline": "while (length-- > 0)"
    },
    {
        "line": 394,
        "fullcodeline": "*ptr++ = '0';"
    },
    {
        "line": 80,
        "fullcodeline": "&& (!has_mbyte ||"
    },
    {
        "line": 101,
        "fullcodeline": "&& ptr[col - 1] == '0'"
    },
    {
        "line": 103,
        "fullcodeline": "!(*mb_head_off)(ptr, ptr + col - 1))"
    },
    {
        "line": 109,
        "fullcodeline": "&& ptr[col - 1] == '0'"
    },
    {
        "line": 111,
        "fullcodeline": "!(*mb_head_off)(ptr, ptr + col - 1))"
    },
    {
        "line": 128,
        "fullcodeline": "&& !(do_alpha && ASCII_ISALPHA(ptr[col])))"
    },
    {
        "line": 133,
        "fullcodeline": "&& !(do_alpha && ASCII_ISALPHA(ptr[col])))"
    },
    {
        "line": 135,
        "fullcodeline": "--col;"
    },
    {
        "line": 183,
        "fullcodeline": "if (isupper(firstdigit))"
    },
    {
        "line": 189,
        "fullcodeline": "firstdigit -= Prenum1;"
    },
    {
        "line": 218,
        "fullcodeline": "&& (!has_mbyte ||"
    },
    {
        "line": 230,
        "fullcodeline": "? (int)STRLEN(ptr) - col"
    },
    {
        "line": 258,
        "fullcodeline": "n -= (uvarnumber_T)Prenum1;"
    },
    {
        "line": 284,
        "fullcodeline": "negative = FALSE;"
    },
    {
        "line": 291,
        "fullcodeline": "n = (uvarnumber_T)0;"
    },
    {
        "line": 369,
        "fullcodeline": "if ((n >> (bit - 1)) & 0x1) break;"
    },
    {
        "line": 376,
        "fullcodeline": "else if (pre == 0)"
    },
    {
        "line": 443,
        "fullcodeline": "else if (virtual_active())"
    },
    {
        "line": 63,
        "fullcodeline": "col -= (*mb_head_off)(ptr, ptr + col);"
    },
    {
        "line": 71,
        "fullcodeline": "col -= (*mb_head_off)(ptr, ptr + col);"
    },
    {
        "line": 79,
        "fullcodeline": "&& ptr[col - 1] == '0'"
    },
    {
        "line": 81,
        "fullcodeline": "!(*mb_head_off)(ptr, ptr + col - 1))"
    },
    {
        "line": 93,
        "fullcodeline": "col -= (*mb_head_off)(ptr, ptr + col);"
    },
    {
        "line": 99,
        "fullcodeline": "&& (ptr[col] == 'X'"
    },
    {
        "line": 107,
        "fullcodeline": "&& (ptr[col] == 'B'"
    },
    {
        "line": 127,
        "fullcodeline": "&& !vim_isdigit(ptr[col])"
    },
    {
        "line": 132,
        "fullcodeline": "&& vim_isdigit(ptr[col - 1])"
    },
    {
        "line": 184,
        "fullcodeline": "firstdigit = 'A';"
    },
    {
        "line": 195,
        "fullcodeline": "if (isupper(firstdigit))"
    },
    {
        "line": 201,
        "fullcodeline": "firstdigit += Prenum1;"
    },
    {
        "line": 219,
        "fullcodeline": "!(*mb_head_off)(ptr, ptr + col - 1))"
    },
    {
        "line": 260,
        "fullcodeline": "n += (uvarnumber_T)Prenum1;"
    },
    {
        "line": 268,
        "fullcodeline": "if (n > oldn)"
    },
    {
        "line": 294,
        "fullcodeline": "n = (uvarnumber_T)(-1);"
    },
    {
        "line": 326,
        "fullcodeline": "if (isupper(c))"
    },
    {
        "line": 377,
        "fullcodeline": "vim_snprintf((char *)buf2, NUMBUFLEN, \"%llu\", n);"
    },
    {
        "line": 444,
        "fullcodeline": "curwin->w_cursor.coladd = save_coladd;"
    },
    {
        "line": 77,
        "fullcodeline": "&& (ptr[col] == 'X'"
    },
    {
        "line": 98,
        "fullcodeline": "&& col > 0"
    },
    {
        "line": 100,
        "fullcodeline": "|| ptr[col] == 'x')"
    },
    {
        "line": 106,
        "fullcodeline": "&& col > 0"
    },
    {
        "line": 108,
        "fullcodeline": "|| ptr[col] == 'b')"
    },
    {
        "line": 137,
        "fullcodeline": "col -= (*mb_head_off)(ptr, ptr + col);"
    },
    {
        "line": 186,
        "fullcodeline": "firstdigit = 'a';"
    },
    {
        "line": 196,
        "fullcodeline": "firstdigit = 'Z';"
    },
    {
        "line": 270,
        "fullcodeline": "n = 1 + (n ^ (uvarnumber_T)-1);"
    },
    {
        "line": 271,
        "fullcodeline": "negative ^= TRUE;"
    },
    {
        "line": 277,
        "fullcodeline": "if (n < oldn)"
    },
    {
        "line": 327,
        "fullcodeline": "hexupper = TRUE;"
    },
    {
        "line": 78,
        "fullcodeline": "|| ptr[col] == 'x')"
    },
    {
        "line": 198,
        "fullcodeline": "firstdigit = 'z';"
    },
    {
        "line": 279,
        "fullcodeline": "n = (n ^ (uvarnumber_T)-1);"
    },
    {
        "line": 280,
        "fullcodeline": "negative ^= TRUE;"
    },
    {
        "line": 329,
        "fullcodeline": "hexupper = FALSE;"
    },
    {
        "line": 378,
        "fullcodeline": "else if (pre == '0')"
    },
    {
        "line": 379,
        "fullcodeline": "vim_snprintf((char *)buf2, NUMBUFLEN, \"%llo\", n);"
    },
    {
        "line": 380,
        "fullcodeline": "else if (pre && hexupper)"
    },
    {
        "line": 381,
        "fullcodeline": "vim_snprintf((char *)buf2, NUMBUFLEN, \"%llX\", n);"
    },
    {
        "line": 383,
        "fullcodeline": "vim_snprintf((char *)buf2, NUMBUFLEN, \"%llx\", n);"
    }
]