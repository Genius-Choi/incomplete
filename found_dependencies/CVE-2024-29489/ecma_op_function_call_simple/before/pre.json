[
    {
        "line": 6,
        "fullcodeline": "JERRY_ASSERT (ecma_get_object_type (func_obj_p) == ECMA_OBJECT_TYPE_FUNCTION);"
    },
    {
        "line": 9,
        "fullcodeline": "shared_args.header.status_flags = VM_FRAME_CTX_SHARED_HAS_ARG_LIST;"
    },
    {
        "line": 10,
        "fullcodeline": "shared_args.header.function_object_p = func_obj_p;"
    },
    {
        "line": 11,
        "fullcodeline": "shared_args.arg_list_p = arguments_list_p;"
    },
    {
        "line": 12,
        "fullcodeline": "shared_args.arg_list_len = arguments_list_len;"
    },
    {
        "line": 15,
        "fullcodeline": "ecma_extended_object_t *ext_func_p = (ecma_extended_object_t *) func_obj_p;"
    },
    {
        "line": 17,
        "fullcodeline": "ecma_object_t *scope_p = ECMA_GET_NON_NULL_POINTER_FROM_POINTER_TAG (ecma_object_t, ext_func_p->u.function.scope_cp);"
    },
    {
        "line": 20,
        "fullcodeline": "const ecma_compiled_code_t *bytecode_data_p = ecma_op_function_get_compiled_code (ext_func_p);"
    },
    {
        "line": 21,
        "fullcodeline": "uint16_t status_flags = bytecode_data_p->status_flags;"
    },
    {
        "line": 23,
        "fullcodeline": "shared_args.header.bytecode_header_p = bytecode_data_p;"
    },
    {
        "line": 101,
        "fullcodeline": "ecma_value_t ret_value = vm_run (&shared_args.header, this_binding, scope_p);"
    },
    {
        "line": 30,
        "fullcodeline": "if (!(status_flags & CBC_CODE_FLAGS_LEXICAL_ENV_NOT_NEEDED))"
    },
    {
        "line": 37,
        "fullcodeline": "switch (CBC_FUNCTION_GET_TYPE (status_flags))"
    },
    {
        "line": 32,
        "fullcodeline": "shared_args.header.status_flags |= VM_FRAME_CTX_SHARED_FREE_LOCAL_ENV;"
    },
    {
        "line": 33,
        "fullcodeline": "scope_p = ecma_create_decl_lex_env (scope_p);"
    },
    {
        "line": 107,
        "fullcodeline": "if (JERRY_UNLIKELY (shared_args.header.status_flags & VM_FRAME_CTX_SHARED_FREE_LOCAL_ENV))"
    },
    {
        "line": 112,
        "fullcodeline": "if (JERRY_UNLIKELY (shared_args.header.status_flags & VM_FRAME_CTX_SHARED_FREE_THIS))"
    },
    {
        "line": 45,
        "fullcodeline": "ecma_arrow_function_t *arrow_func_p = (ecma_arrow_function_t *) func_obj_p;"
    },
    {
        "line": 56,
        "fullcodeline": "this_binding = arrow_func_p->this_binding;"
    },
    {
        "line": 68,
        "fullcodeline": "shared_args.header.status_flags |= VM_FRAME_CTX_SHARED_NON_ARROW_FUNC;"
    },
    {
        "line": 41,
        "fullcodeline": "return ecma_op_function_call_constructor (&shared_args, scope_p, this_binding);"
    },
    {
        "line": 47,
        "fullcodeline": "if (ecma_is_value_undefined (arrow_func_p->new_target))"
    },
    {
        "line": 70,
        "fullcodeline": "if (status_flags & CBC_CODE_FLAGS_STRICT_MODE)"
    },
    {
        "line": 49,
        "fullcodeline": "JERRY_CONTEXT (current_new_target_p) = NULL;"
    },
    {
        "line": 58,
        "fullcodeline": "if (JERRY_UNLIKELY (this_binding == ECMA_VALUE_UNINITIALIZED))"
    },
    {
        "line": 60,
        "fullcodeline": "ecma_environment_record_t *env_record_p = ecma_op_get_environment_record (scope_p);"
    },
    {
        "line": 61,
        "fullcodeline": "JERRY_ASSERT (env_record_p);"
    },
    {
        "line": 62,
        "fullcodeline": "this_binding = env_record_p->this_binding;"
    },
    {
        "line": 75,
        "fullcodeline": "if (ecma_is_value_undefined (this_binding) || ecma_is_value_null (this_binding))"
    },
    {
        "line": 81,
        "fullcodeline": "this_binding = ecma_make_object_value (ecma_builtin_get_global ());"
    },
    {
        "line": 53,
        "fullcodeline": "JERRY_CONTEXT (current_new_target_p) = ecma_get_object_from_value (arrow_func_p->new_target);"
    },
    {
        "line": 84,
        "fullcodeline": "else if (!ecma_is_value_object (this_binding))"
    },
    {
        "line": 87,
        "fullcodeline": "this_binding = ecma_op_to_object (this_binding);"
    },
    {
        "line": 88,
        "fullcodeline": "shared_args.header.status_flags |= VM_FRAME_CTX_SHARED_FREE_THIS;"
    },
    {
        "line": 90,
        "fullcodeline": "JERRY_ASSERT (!ECMA_IS_VALUE_ERROR (this_binding));"
    }
]