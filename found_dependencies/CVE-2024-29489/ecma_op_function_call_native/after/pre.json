[
    {
        "line": 6,
        "fullcodeline": "JERRY_ASSERT (ecma_get_object_type (func_obj_p) == ECMA_OBJECT_TYPE_NATIVE_FUNCTION);"
    },
    {
        "line": 8,
        "fullcodeline": "ECMA_CHECK_STACK_USAGE ();"
    },
    {
        "line": 10,
        "fullcodeline": "ecma_native_function_t *native_function_p = (ecma_native_function_t *) func_obj_p;"
    },
    {
        "line": 19,
        "fullcodeline": "call_info.function = ecma_make_object_value (func_obj_p);"
    },
    {
        "line": 20,
        "fullcodeline": "call_info.this_value = this_arg_value;"
    },
    {
        "line": 22,
        "fullcodeline": "ecma_object_t *new_target_p = JERRY_CONTEXT (current_new_target_p);"
    },
    {
        "line": 23,
        "fullcodeline": "call_info.new_target = (new_target_p == NULL) ? ECMA_VALUE_UNDEFINED : ecma_make_object_value (new_target_p);"
    },
    {
        "line": 25,
        "fullcodeline": "JERRY_ASSERT (native_function_p->native_handler_cb != NULL);"
    },
    {
        "line": 26,
        "fullcodeline": "ecma_value_t ret_value = native_function_p->native_handler_cb (&call_info, arguments_list_p, arguments_list_len);"
    },
    {
        "line": 31,
        "fullcodeline": "if (JERRY_UNLIKELY (ecma_is_value_exception (ret_value)))"
    },
    {
        "line": 33,
        "fullcodeline": "ecma_throw_exception (ret_value);"
    }
]