[
    {
        "line": 5,
        "fullcodeline": "JERRY_ASSERT (ECMA_OBJECT_IS_PROXY (obj_p));"
    },
    {
        "line": 6,
        "fullcodeline": "ECMA_CHECK_STACK_USAGE ();"
    },
    {
        "line": 8,
        "fullcodeline": "ecma_proxy_object_t *proxy_obj_p = (ecma_proxy_object_t *) obj_p;"
    },
    {
        "line": 11,
        "fullcodeline": "ecma_value_t handler = proxy_obj_p->handler;"
    },
    {
        "line": 14,
        "fullcodeline": "ecma_value_t trap = ecma_validate_proxy_object (handler, LIT_MAGIC_STRING_GET);"
    },
    {
        "line": 31,
        "fullcodeline": "ecma_object_t *func_obj_p = ecma_get_object_from_value (trap);"
    },
    {
        "line": 32,
        "fullcodeline": "ecma_value_t prop_value = ecma_make_prop_name_value (prop_name_p);"
    },
    {
        "line": 33,
        "fullcodeline": "ecma_value_t args[] = { proxy_obj_p->target, prop_value, receiver };"
    },
    {
        "line": 36,
        "fullcodeline": "ecma_ref_object (obj_p);"
    },
    {
        "line": 37,
        "fullcodeline": "ecma_value_t trap_result = ecma_op_function_call (func_obj_p, handler, args, 3);"
    },
    {
        "line": 38,
        "fullcodeline": "ecma_deref_object (obj_p);"
    },
    {
        "line": 40,
        "fullcodeline": "ecma_deref_object (func_obj_p);"
    },
    {
        "line": 50,
        "fullcodeline": "ecma_value_t status = ecma_op_get_own_property_descriptor (proxy_obj_p->target, prop_name_p, &target_desc);"
    },
    {
        "line": 17,
        "fullcodeline": "if (ECMA_IS_VALUE_ERROR (trap))"
    },
    {
        "line": 23,
        "fullcodeline": "if (ecma_is_value_undefined (trap))"
    },
    {
        "line": 43,
        "fullcodeline": "if (ECMA_IS_VALUE_ERROR (trap_result) || (obj_p->u2.prototype_cp & JERRY_PROXY_SKIP_RESULT_VALIDATION))"
    },
    {
        "line": 53,
        "fullcodeline": "if (ECMA_IS_VALUE_ERROR (status))"
    },
    {
        "line": 60,
        "fullcodeline": "if (ecma_is_value_true (status))"
    },
    {
        "line": 25,
        "fullcodeline": "ecma_object_t *target_obj_p = ecma_get_object_from_value (proxy_obj_p->target);"
    },
    {
        "line": 26,
        "fullcodeline": "ecma_value_t result = ecma_op_object_get_with_receiver (target_obj_p, prop_name_p, receiver);"
    },
    {
        "line": 27,
        "fullcodeline": "JERRY_BLOCK_TAIL_CALL_OPTIMIZATION ();"
    },
    {
        "line": 55,
        "fullcodeline": "ecma_free_value (trap_result);"
    },
    {
        "line": 62,
        "fullcodeline": "ecma_value_t ret_value = ECMA_VALUE_EMPTY;"
    },
    {
        "line": 76,
        "fullcodeline": "ecma_free_property_descriptor (&target_desc);"
    },
    {
        "line": 64,
        "fullcodeline": "if ((target_desc.flags & JERRY_PROP_IS_VALUE_DEFINED) && !(target_desc.flags & JERRY_PROP_IS_CONFIGURABLE)"
    },
    {
        "line": 78,
        "fullcodeline": "if (ECMA_IS_VALUE_ERROR (ret_value))"
    },
    {
        "line": 65,
        "fullcodeline": "&& !(target_desc.flags & JERRY_PROP_IS_WRITABLE) && !ecma_op_same_value (trap_result, target_desc.value))"
    },
    {
        "line": 67,
        "fullcodeline": "ret_value = ecma_raise_type_error (ECMA_ERR_INCORRECT_RETURN_PROXY_GET_TRAP);"
    },
    {
        "line": 80,
        "fullcodeline": "ecma_free_value (trap_result);"
    },
    {
        "line": 69,
        "fullcodeline": "else if (!(target_desc.flags & JERRY_PROP_IS_CONFIGURABLE)"
    },
    {
        "line": 71,
        "fullcodeline": "&& target_desc.get_p == NULL && !ecma_is_value_undefined (trap_result))"
    },
    {
        "line": 73,
        "fullcodeline": "ret_value = ecma_raise_type_error (ECMA_ERR_PROXY_PROPERTY_NOT_CONFIGURABLE_NOT_HAVE_GETTER);"
    },
    {
        "line": 70,
        "fullcodeline": "&& (target_desc.flags & (JERRY_PROP_IS_GET_DEFINED | JERRY_PROP_IS_SET_DEFINED))"
    }
]