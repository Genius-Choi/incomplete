[
    {
        "line": 2,
        "fullcodeline": "FILE *fp = openr(ip);"
    },
    {
        "line": 5,
        "fullcodeline": "uint8_t *x = 0, *b = 0;"
    },
    {
        "line": 6,
        "fullcodeline": "png_struct *p = 0;"
    },
    {
        "line": 7,
        "fullcodeline": "png_info *n = 0;"
    },
    {
        "line": 8,
        "fullcodeline": "uint8_t i[12];"
    },
    {
        "line": 9,
        "fullcodeline": "char *k[] = {\"Out of memory\", \"Broken config, file a bug report\","
    },
    {
        "line": 20,
        "fullcodeline": "size_t l = ((uint32_t)(i[4] | (i[5] << 8) | (i[6] << 16) | (i[7] << 24))) + 8;"
    },
    {
        "line": 30,
        "fullcodeline": "x = malloc(l);"
    },
    {
        "line": 35,
        "fullcodeline": "memcpy(x, i, 12); // should optimize out"
    },
    {
        "line": 44,
        "fullcodeline": "WebPDecoderConfig c = {.options.use_threads = 1};"
    },
    {
        "line": 47,
        "fullcodeline": "VP8StatusCode r = WebPGetFeatures(x, l, &I);"
    },
    {
        "line": 82,
        "fullcodeline": "b = malloc(W * H * B);"
    },
    {
        "line": 100,
        "fullcodeline": "r = WebPDecode(x, l, &c);"
    },
    {
        "line": 107,
        "fullcodeline": "x = 0;"
    },
    {
        "line": 110,
        "fullcodeline": "p = png_create_write_struct(PNG_LIBPNG_VER_STRING, op, pngwerr, pngwarn);"
    },
    {
        "line": 115,
        "fullcodeline": "n = png_create_info_struct(p);"
    },
    {
        "line": 130,
        "fullcodeline": "pnglen = 0;"
    },
    {
        "line": 131,
        "fullcodeline": "png_set_write_fn(p, fp, pngwrite, pngflush);"
    },
    {
        "line": 132,
        "fullcodeline": "png_set_filter(p, 0, PNG_ALL_FILTERS);"
    },
    {
        "line": 133,
        "fullcodeline": "png_set_compression_level(p, 9);"
    },
    {
        "line": 135,
        "fullcodeline": "png_set_IHDR(p, n, W, H, 8, A ? 6 : 2, 0, 0, 0);"
    },
    {
        "line": 136,
        "fullcodeline": "png_write_info(p, n);"
    },
    {
        "line": 137,
        "fullcodeline": "uint8_t *w = b;"
    },
    {
        "line": 142,
        "fullcodeline": "png_write_end(p, n);"
    },
    {
        "line": 143,
        "fullcodeline": "png_destroy_write_struct(&p, &n);"
    },
    {
        "line": 144,
        "fullcodeline": "p = 0;"
    },
    {
        "line": 145,
        "fullcodeline": "n = 0;"
    },
    {
        "line": 147,
        "fullcodeline": "b = 0;"
    },
    {
        "line": 3,
        "fullcodeline": "if(!fp) return 1;"
    },
    {
        "line": 22,
        "fullcodeline": "if(l <= 12"
    },
    {
        "line": 31,
        "fullcodeline": "if(!x) {"
    },
    {
        "line": 62,
        "fullcodeline": "char *f[] = {\"undefined/mixed\", \"lossy\", \"lossless\"};"
    },
    {
        "line": 83,
        "fullcodeline": "if(!b) {"
    },
    {
        "line": 99,
        "fullcodeline": "D.size = W * H * B;"
    },
    {
        "line": 109,
        "fullcodeline": "openwdone = !!op;"
    },
    {
        "line": 111,
        "fullcodeline": "if(!p) {"
    },
    {
        "line": 116,
        "fullcodeline": "if(!n) {"
    },
    {
        "line": 12,
        "fullcodeline": "if(!fread(i, 12, 1, fp)) {"
    },
    {
        "line": 16,
        "fullcodeline": "if(memcmp(i, (char[4]){\"RIFF\"}, 4) || memcmp(i + 8, (char[4]){\"WEBP\"}, 4)) {"
    },
    {
        "line": 36,
        "fullcodeline": "if(!fread(x + 12, l - 12, 1, fp)) {"
    },
    {
        "line": 98,
        "fullcodeline": "D.stride = (int)(W * B);"
    },
    {
        "line": 108,
        "fullcodeline": "if(!(fp = openw(op))) goto w2p_free;"
    },
    {
        "line": 120,
        "fullcodeline": "if(setjmp(png_jmpbuf(p))) {"
    },
    {
        "line": 138,
        "fullcodeline": "for(unsigned y = H; y; y--) {"
    },
    {
        "line": 139,
        "fullcodeline": "png_write_row(p, w);"
    },
    {
        "line": 140,
        "fullcodeline": "w += W * B;"
    },
    {
        "line": 94,
        "fullcodeline": "c.output.colorspace = A ? MODE_RGBA : MODE_RGB;"
    },
    {
        "line": 149,
        "fullcodeline": "PF(\"ERROR closing %s: %s\", OP, strerror(errno));"
    }
]