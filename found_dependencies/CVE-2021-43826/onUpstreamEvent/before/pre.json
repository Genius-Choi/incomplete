[
    {
        "line": 4,
        "fullcodeline": "bool connecting = connecting_;"
    },
    {
        "line": 5,
        "fullcodeline": "connecting_ = false;"
    },
    {
        "line": 7,
        "fullcodeline": "if (event == Network::ConnectionEvent::RemoteClose ||"
    },
    {
        "line": 8,
        "fullcodeline": "event == Network::ConnectionEvent::LocalClose) {"
    },
    {
        "line": 9,
        "fullcodeline": "upstream_.reset();"
    },
    {
        "line": 10,
        "fullcodeline": "disableIdleTimer();"
    },
    {
        "line": 19,
        "fullcodeline": "initializeUpstreamConnection();"
    },
    {
        "line": 13,
        "fullcodeline": "if (event == Network::ConnectionEvent::RemoteClose) {"
    },
    {
        "line": 14,
        "fullcodeline": "getStreamInfo().setResponseFlag(StreamInfo::ResponseFlag::UpstreamConnectionFailure);"
    },
    {
        "line": 15,
        "fullcodeline": "read_callbacks_->upstreamHost()->outlierDetector().putResult("
    },
    {
        "line": 21,
        "fullcodeline": "if (read_callbacks_->connection().state() == Network::Connection::State::Open) {"
    },
    {
        "line": 22,
        "fullcodeline": "read_callbacks_->connection().close(Network::ConnectionCloseType::FlushWrite);"
    }
]