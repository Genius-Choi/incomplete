[
    {
        "line": 11,
        "fullcodeline": "char atype[20];"
    },
    {
        "line": 21,
        "fullcodeline": "for (request = requests; request; request = request->next) {"
    },
    {
        "line": 67,
        "fullcodeline": "for (request = requests; request; request = request->next) {"
    },
    {
        "line": 141,
        "fullcodeline": "for (request = requests; request; request = request->next) {"
    },
    {
        "line": 177,
        "fullcodeline": "for (request = requests; request; request = request->next) {"
    },
    {
        "line": 22,
        "fullcodeline": "entry = (struct vacm_accessEntry *)"
    },
    {
        "line": 24,
        "fullcodeline": "table_info = netsnmp_extract_table_info(request);"
    },
    {
        "line": 32,
        "fullcodeline": "memset(atype, 0, sizeof(atype));"
    },
    {
        "line": 33,
        "fullcodeline": "memcpy(atype, (char *)idx->val.string, idx->val_len);"
    },
    {
        "line": 34,
        "fullcodeline": "viewIdx = se_find_value_in_slist(VACM_VIEW_ENUM_NAME, atype);"
    },
    {
        "line": 35,
        "fullcodeline": "DEBUGMSGTL((\"nsVacm\", \"GET %s (%d)\\n\", idx->val.string, viewIdx));"
    },
    {
        "line": 68,
        "fullcodeline": "entry = (struct vacm_accessEntry *)"
    },
    {
        "line": 70,
        "fullcodeline": "table_info = netsnmp_extract_table_info(request);"
    },
    {
        "line": 73,
        "fullcodeline": "ret = SNMP_ERR_NOERROR;"
    },
    {
        "line": 142,
        "fullcodeline": "entry = (struct vacm_accessEntry *)"
    },
    {
        "line": 144,
        "fullcodeline": "table_info = netsnmp_extract_table_info(request);"
    },
    {
        "line": 178,
        "fullcodeline": "entry = (struct vacm_accessEntry *)"
    },
    {
        "line": 180,
        "fullcodeline": "table_info = netsnmp_extract_table_info(request);"
    },
    {
        "line": 188,
        "fullcodeline": "memset(atype, 0, sizeof(atype));"
    },
    {
        "line": 189,
        "fullcodeline": "memcpy(atype, (char *)idx->val.string, idx->val_len);"
    },
    {
        "line": 190,
        "fullcodeline": "viewIdx = se_find_value_in_slist(VACM_VIEW_ENUM_NAME, atype);"
    },
    {
        "line": 25,
        "fullcodeline": "if (!table_info || !table_info->indexes)"
    },
    {
        "line": 30,
        "fullcodeline": "if (idx->val_len >= sizeof(atype))"
    },
    {
        "line": 37,
        "fullcodeline": "if (!entry || viewIdx < 0)"
    },
    {
        "line": 71,
        "fullcodeline": "if (!table_info || !table_info->indexes)"
    },
    {
        "line": 133,
        "fullcodeline": "if ( ret != SNMP_ERR_NOERROR ) {"
    },
    {
        "line": 181,
        "fullcodeline": "if ( !entry )"
    },
    {
        "line": 186,
        "fullcodeline": "if (idx->val_len >= sizeof(atype))"
    },
    {
        "line": 191,
        "fullcodeline": "if (viewIdx < 0)"
    },
    {
        "line": 23,
        "fullcodeline": "netsnmp_extract_iterator_context(request);"
    },
    {
        "line": 42,
        "fullcodeline": "snmp_set_var_typed_integer(request->requestvb, ASN_INTEGER,"
    },
    {
        "line": 46,
        "fullcodeline": "snmp_set_var_typed_value(request->requestvb, ASN_OCTET_STR,"
    },
    {
        "line": 51,
        "fullcodeline": "snmp_set_var_typed_integer(request->requestvb, ASN_INTEGER,"
    },
    {
        "line": 55,
        "fullcodeline": "snmp_set_var_typed_integer(request->requestvb, ASN_INTEGER,"
    },
    {
        "line": 69,
        "fullcodeline": "netsnmp_extract_iterator_context(request);"
    },
    {
        "line": 77,
        "fullcodeline": "ret = netsnmp_check_vb_int_range(request->requestvb, 1, 2);"
    },
    {
        "line": 80,
        "fullcodeline": "ret = netsnmp_check_vb_type_and_max_size(request->requestvb,"
    },
    {
        "line": 85,
        "fullcodeline": "ret = netsnmp_check_vb_storagetype(request->requestvb,"
    },
    {
        "line": 100,
        "fullcodeline": "ret = netsnmp_check_vb_rowstatus_value(request->requestvb);"
    },
    {
        "line": 110,
        "fullcodeline": "memset(atype, 0, sizeof(atype));"
    },
    {
        "line": 111,
        "fullcodeline": "memcpy(atype, (char *)idx->val.string, idx->val_len);"
    },
    {
        "line": 112,
        "fullcodeline": "viewIdx = se_find_value_in_slist(VACM_VIEW_ENUM_NAME, atype);"
    },
    {
        "line": 134,
        "fullcodeline": "netsnmp_set_request_error(reqinfo, request, ret);"
    },
    {
        "line": 143,
        "fullcodeline": "netsnmp_extract_iterator_context(request);"
    },
    {
        "line": 179,
        "fullcodeline": "netsnmp_extract_iterator_context(request);"
    },
    {
        "line": 199,
        "fullcodeline": "memset( entry->views[viewIdx], 0, VACMSTRINGLEN );"
    },
    {
        "line": 200,
        "fullcodeline": "memcpy( entry->views[viewIdx], request->requestvb->val.string,"
    },
    {
        "line": 47,
        "fullcodeline": "(u_char *)entry->views[ viewIdx ],"
    },
    {
        "line": 101,
        "fullcodeline": "if ( ret != SNMP_ERR_NOERROR )"
    },
    {
        "line": 108,
        "fullcodeline": "if (idx->val_len >= sizeof(atype))"
    },
    {
        "line": 113,
        "fullcodeline": "if ( viewIdx < 0 ) {"
    },
    {
        "line": 114,
        "fullcodeline": "ret = SNMP_ERR_NOCREATION;"
    },
    {
        "line": 209,
        "fullcodeline": "memset( entry->views[viewIdx], 0, VACMSTRINGLEN );"
    },
    {
        "line": 121,
        "fullcodeline": "if ( !entry || !entry->views[viewIdx][0] )"
    },
    {
        "line": 127,
        "fullcodeline": "if ( entry && entry->views[viewIdx][0] )"
    },
    {
        "line": 151,
        "fullcodeline": "if (!entry) {"
    },
    {
        "line": 122,
        "fullcodeline": "ret = SNMP_ERR_INCONSISTENTVALUE;"
    },
    {
        "line": 128,
        "fullcodeline": "ret = SNMP_ERR_INCONSISTENTVALUE;"
    },
    {
        "line": 152,
        "fullcodeline": "idx = table_info->indexes; gName = (char*)idx->val.string;"
    },
    {
        "line": 153,
        "fullcodeline": "idx = idx->next_variable;  cPrefix = (char*)idx->val.string;"
    },
    {
        "line": 154,
        "fullcodeline": "idx = idx->next_variable;  model = *idx->val.integer;"
    },
    {
        "line": 155,
        "fullcodeline": "idx = idx->next_variable;  level = *idx->val.integer;"
    },
    {
        "line": 156,
        "fullcodeline": "entry = vacm_createAccessEntry( gName, cPrefix, model, level );"
    },
    {
        "line": 158,
        "fullcodeline": "entry->storageType = ST_NONVOLATILE;"
    },
    {
        "line": 159,
        "fullcodeline": "netsnmp_insert_iterator_context(request, (void*)entry);"
    }
]