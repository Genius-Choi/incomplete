[
    {
        "line": 16,
        "fullcodeline": "gboolean ret = FALSE;"
    },
    {
        "line": 17,
        "fullcodeline": "g_autofree char *rev = NULL;"
    },
    {
        "line": 18,
        "fullcodeline": "g_autofree char *url = NULL;"
    },
    {
        "line": 19,
        "fullcodeline": "g_autoptr(GPtrArray) subdirs_arg = NULL;"
    },
    {
        "line": 21,
        "fullcodeline": "g_autofree char *name = NULL;"
    },
    {
        "line": 22,
        "fullcodeline": "g_autofree char *current_checksum = NULL;"
    },
    {
        "line": 70,
        "fullcodeline": "g_debug (\"%s: Using commit %s for pull of ref %s from remote %s%s%s\","
    },
    {
        "line": 106,
        "fullcodeline": "flatpak_repo_resolve_rev (repo, NULL, state->remote_name, ref, TRUE,"
    },
    {
        "line": 145,
        "fullcodeline": "ret = TRUE;"
    },
    {
        "line": 155,
        "fullcodeline": "(flatpak_dir_log) (self, __FILE__, __LINE__, __FUNCTION__, name,"
    },
    {
        "line": 24,
        "fullcodeline": "if (!flatpak_dir_ensure_repo (self, cancellable, error))"
    },
    {
        "line": 36,
        "fullcodeline": "if (flatpak_dir_get_remote_oci (self, state->remote_name))"
    },
    {
        "line": 52,
        "fullcodeline": "if (opt_rev != NULL)"
    },
    {
        "line": 76,
        "fullcodeline": "if (repo == NULL)"
    },
    {
        "line": 147,
        "fullcodeline": "if (repo == self->repo)"
    },
    {
        "line": 160,
        "fullcodeline": "if (!ret)"
    },
    {
        "line": 33,
        "fullcodeline": "if (repo == NULL && !flatpak_dir_repo_lock (self, &lock, LOCK_SH, cancellable, error))"
    },
    {
        "line": 40,
        "fullcodeline": "if (!ostree_repo_remote_get_url (self->repo,"
    },
    {
        "line": 54,
        "fullcodeline": "rev = g_strdup (opt_rev);"
    },
    {
        "line": 73,
        "fullcodeline": "sideload_repo ? flatpak_file_get_path_cached (sideload_repo) : \"\""
    },
    {
        "line": 77,
        "fullcodeline": "repo = self->repo;"
    },
    {
        "line": 82,
        "fullcodeline": "if (subpaths != NULL && subpaths[0] != NULL)"
    },
    {
        "line": 84,
        "fullcodeline": "subdirs_arg = g_ptr_array_new_with_free_func (g_free);"
    },
    {
        "line": 86,
        "fullcodeline": "g_ptr_array_add (subdirs_arg, g_strdup (\"/metadata\"));"
    },
    {
        "line": 90,
        "fullcodeline": "g_ptr_array_add (subdirs_arg, NULL);"
    },
    {
        "line": 95,
        "fullcodeline": "if (!flatpak_dir_setup_extra_data (self, state, repo,"
    },
    {
        "line": 103,
        "fullcodeline": "if (!ostree_repo_prepare_transaction (repo, NULL, cancellable, error))"
    },
    {
        "line": 109,
        "fullcodeline": "if (!repo_pull (repo, state,"
    },
    {
        "line": 115,
        "fullcodeline": "g_prefix_error (error, _(\"While pulling %s from remote %s: \"), ref, state->remote_name);"
    },
    {
        "line": 122,
        "fullcodeline": "g_autoptr(GVariant) commit_data = NULL;"
    },
    {
        "line": 132,
        "fullcodeline": "if (!flatpak_dir_pull_extra_data (self, repo,"
    },
    {
        "line": 142,
        "fullcodeline": "if (!ostree_repo_commit_transaction (repo, NULL, cancellable, error))"
    },
    {
        "line": 148,
        "fullcodeline": "name = flatpak_dir_get_name (self);"
    },
    {
        "line": 162,
        "fullcodeline": "ostree_repo_abort_transaction (repo, cancellable, NULL);"
    },
    {
        "line": 37,
        "fullcodeline": "return flatpak_dir_pull_oci (self, state, ref, opt_rev, repo, flatpak_flags,"
    },
    {
        "line": 58,
        "fullcodeline": "flatpak_remote_state_lookup_ref (state, ref, &rev, NULL, NULL, NULL, error);"
    },
    {
        "line": 87,
        "fullcodeline": "for (i = 0; subpaths[i] != NULL; i++)"
    },
    {
        "line": 88,
        "fullcodeline": "g_ptr_array_add (subdirs_arg,"
    },
    {
        "line": 151,
        "fullcodeline": "GFile *file = ostree_repo_get_path (repo);"
    },
    {
        "line": 152,
        "fullcodeline": "name = g_file_get_path (file);"
    },
    {
        "line": 163,
        "fullcodeline": "g_assert (error == NULL || *error != NULL);"
    },
    {
        "line": 63,
        "fullcodeline": "if (rev == NULL)"
    },
    {
        "line": 89,
        "fullcodeline": "g_build_filename (\"/files\", subpaths[i], NULL));"
    },
    {
        "line": 123,
        "fullcodeline": "if (!ostree_repo_load_commit (repo, rev, &commit_data, NULL, error) ||"
    },
    {
        "line": 124,
        "fullcodeline": "!validate_commit_metadata (commit_data,"
    },
    {
        "line": 59,
        "fullcodeline": "if (rev == NULL && error != NULL && *error == NULL)"
    },
    {
        "line": 60,
        "fullcodeline": "flatpak_fail_error (error, FLATPAK_ERROR_REF_NOT_FOUND, _(\"Couldn't find latest checksum for ref %s in remote %s\"),"
    },
    {
        "line": 65,
        "fullcodeline": "g_assert (error == NULL || *error != NULL);"
    },
    {
        "line": 127,
        "fullcodeline": "g_bytes_get_size (require_metadata),"
    },
    {
        "line": 126,
        "fullcodeline": "(const char *)g_bytes_get_data (require_metadata, NULL),"
    }
]