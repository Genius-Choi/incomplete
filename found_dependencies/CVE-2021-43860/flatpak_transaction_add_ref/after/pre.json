[
    {
        "line": 13,
        "fullcodeline": "FlatpakTransactionPrivate *priv = flatpak_transaction_get_instance_private (self);"
    },
    {
        "line": 14,
        "fullcodeline": "g_autofree char *origin = NULL;"
    },
    {
        "line": 15,
        "fullcodeline": "g_auto(GStrv) new_subpaths = NULL;"
    },
    {
        "line": 17,
        "fullcodeline": "g_autofree char *origin_remote = NULL;"
    },
    {
        "line": 18,
        "fullcodeline": "g_autoptr(FlatpakRemoteState) state = NULL;"
    },
    {
        "line": 46,
        "fullcodeline": "pref = flatpak_decomposed_get_pref (ref);"
    },
    {
        "line": 122,
        "fullcodeline": "op = flatpak_transaction_add_op (self, remote, ref, subpaths, previous_ids,"
    },
    {
        "line": 21,
        "fullcodeline": "if (remote_name_is_file (remote))"
    },
    {
        "line": 49,
        "fullcodeline": "if (kind == FLATPAK_TRANSACTION_OPERATION_UPDATE)"
    },
    {
        "line": 109,
        "fullcodeline": "g_assert (remote != NULL);"
    },
    {
        "line": 113,
        "fullcodeline": "if (kind != FLATPAK_TRANSACTION_OPERATION_UNINSTALL)"
    },
    {
        "line": 24,
        "fullcodeline": "g_autofree char *id = flatpak_decomposed_dup_id (ref);"
    },
    {
        "line": 25,
        "fullcodeline": "origin_remote = flatpak_dir_create_origin_remote (priv->dir,"
    },
    {
        "line": 43,
        "fullcodeline": "remote = origin_remote;"
    },
    {
        "line": 51,
        "fullcodeline": "g_autoptr(GBytes) deploy_data = NULL;"
    },
    {
        "line": 62,
        "fullcodeline": "remote = origin;"
    },
    {
        "line": 115,
        "fullcodeline": "g_autofree char *arch = flatpak_decomposed_dup_arch (ref);"
    },
    {
        "line": 117,
        "fullcodeline": "state = flatpak_transaction_ensure_remote_state (self, kind, remote, arch, error);"
    },
    {
        "line": 34,
        "fullcodeline": "if (origin_remote == NULL)"
    },
    {
        "line": 41,
        "fullcodeline": "g_ptr_array_add (priv->added_origin_remotes, g_strdup (origin_remote));"
    },
    {
        "line": 57,
        "fullcodeline": "if (flatpak_dir_get_remote_disabled (priv->dir, origin))"
    },
    {
        "line": 64,
        "fullcodeline": "if (subpaths == NULL)"
    },
    {
        "line": 118,
        "fullcodeline": "if (state == NULL)"
    },
    {
        "line": 128,
        "fullcodeline": "op->external_metadata = g_bytes_new (external_metadata, strlen (external_metadata));"
    },
    {
        "line": 29,
        "fullcodeline": "flatpak_decomposed_get_ref (ref),"
    },
    {
        "line": 39,
        "fullcodeline": "flatpak_installation_drop_caches (priv->installation, NULL, NULL);"
    },
    {
        "line": 53,
        "fullcodeline": "if (!dir_ref_is_installed (priv->dir, ref, &origin, &deploy_data))"
    },
    {
        "line": 66,
        "fullcodeline": "g_autofree const char **old_subpaths = flatpak_deploy_data_get_subpaths (deploy_data);"
    },
    {
        "line": 82,
        "fullcodeline": "subpaths = (const char **)new_subpaths;"
    },
    {
        "line": 85,
        "fullcodeline": "else if (kind == FLATPAK_TRANSACTION_OPERATION_INSTALL)"
    },
    {
        "line": 54,
        "fullcodeline": "return flatpak_fail_error (error, FLATPAK_ERROR_NOT_INSTALLED,"
    },
    {
        "line": 59,
        "fullcodeline": "g_debug (_(\"Remote %s disabled, ignoring %s update\"), origin, pref);"
    },
    {
        "line": 72,
        "fullcodeline": "if (flatpak_decomposed_id_has_suffix (ref, \".Locale\"))"
    },
    {
        "line": 55,
        "fullcodeline": "_(\"%s not installed\"), pref);"
    },
    {
        "line": 74,
        "fullcodeline": "g_auto(GStrv) extra_subpaths = flatpak_dir_get_locale_subpaths (priv->dir);"
    },
    {
        "line": 75,
        "fullcodeline": "new_subpaths = flatpak_subpaths_merge ((char **)old_subpaths, extra_subpaths);"
    },
    {
        "line": 80,
        "fullcodeline": "new_subpaths = g_strdupv ((char **)old_subpaths);"
    },
    {
        "line": 87,
        "fullcodeline": "if (!priv->reinstall &&"
    },
    {
        "line": 88,
        "fullcodeline": "dir_ref_is_installed (priv->dir, ref, &origin, NULL))"
    },
    {
        "line": 99,
        "fullcodeline": "else if (kind == FLATPAK_TRANSACTION_OPERATION_UNINSTALL)"
    },
    {
        "line": 105,
        "fullcodeline": "remote = origin;"
    },
    {
        "line": 90,
        "fullcodeline": "if (g_strcmp0 (remote, origin) == 0)"
    },
    {
        "line": 91,
        "fullcodeline": "return flatpak_fail_error (error, FLATPAK_ERROR_ALREADY_INSTALLED,"
    },
    {
        "line": 101,
        "fullcodeline": "if (!dir_ref_is_installed (priv->dir, ref, &origin, NULL))"
    },
    {
        "line": 92,
        "fullcodeline": "_(\"%s is already installed\"), pref);"
    },
    {
        "line": 94,
        "fullcodeline": "return flatpak_fail_error (error, FLATPAK_ERROR_DIFFERENT_REMOTE,"
    },
    {
        "line": 102,
        "fullcodeline": "return flatpak_fail_error (error, FLATPAK_ERROR_NOT_INSTALLED,"
    },
    {
        "line": 95,
        "fullcodeline": "_(\"%s is already installed from remote %s\"),"
    },
    {
        "line": 103,
        "fullcodeline": "_(\"%s not installed\"), pref);"
    }
]