[
    {
        "line": 5,
        "fullcodeline": "FlatpakTransactionPrivate *priv = flatpak_transaction_get_instance_private (self);"
    },
    {
        "line": 8,
        "fullcodeline": "for (l = priv->ops; l != NULL; l = l->next)"
    },
    {
        "line": 10,
        "fullcodeline": "FlatpakTransactionOperation *op = l->data;"
    },
    {
        "line": 11,
        "fullcodeline": "g_autoptr(FlatpakRemoteState) state = NULL;"
    },
    {
        "line": 12,
        "fullcodeline": "g_autofree char *checksum = NULL;"
    },
    {
        "line": 13,
        "fullcodeline": "g_autoptr(GBytes) metadata_bytes = NULL;"
    },
    {
        "line": 69,
        "fullcodeline": "state = flatpak_transaction_ensure_remote_state (self, op->kind, op->remote, NULL, error);"
    },
    {
        "line": 31,
        "fullcodeline": "if (op->kind == FLATPAK_TRANSACTION_OPERATION_UNINSTALL)"
    },
    {
        "line": 46,
        "fullcodeline": "if (op->kind == FLATPAK_TRANSACTION_OPERATION_INSTALL_BUNDLE)"
    },
    {
        "line": 56,
        "fullcodeline": "if (flatpak_decomposed_is_app (op->ref))"
    },
    {
        "line": 70,
        "fullcodeline": "if (state == NULL)"
    },
    {
        "line": 74,
        "fullcodeline": "if (transaction_is_local_only (self, op->kind))"
    },
    {
        "line": 25,
        "fullcodeline": "g_assert (op->resolved_commit != NULL);"
    },
    {
        "line": 35,
        "fullcodeline": "metadata_bytes = load_deployed_metadata (self, op->ref, &checksum, NULL);"
    },
    {
        "line": 48,
        "fullcodeline": "g_assert (op->commit != NULL);"
    },
    {
        "line": 76,
        "fullcodeline": "g_autoptr(GVariant) commit_data = flatpak_dir_read_latest_commit (priv->dir, op->remote, op->ref,"
    },
    {
        "line": 26,
        "fullcodeline": "if (!mark_op_resolved (op, op->resolved_commit, NULL, NULL, NULL, error))"
    },
    {
        "line": 36,
        "fullcodeline": "if (metadata_bytes == NULL)"
    },
    {
        "line": 41,
        "fullcodeline": "if (!mark_op_resolved (op, checksum, NULL, metadata_bytes, NULL, error))"
    },
    {
        "line": 49,
        "fullcodeline": "if (!mark_op_resolved (op, op->commit, NULL, op->external_metadata, NULL, error))"
    },
    {
        "line": 58,
        "fullcodeline": "if (op->kind == FLATPAK_TRANSACTION_OPERATION_INSTALL)"
    },
    {
        "line": 78,
        "fullcodeline": "if (commit_data == NULL)"
    },
    {
        "line": 81,
        "fullcodeline": "if (!resolve_op_from_commit (self, op, checksum, NULL, commit_data, error))"
    },
    {
        "line": 86,
        "fullcodeline": "g_autoptr(GError) local_error = NULL;"
    },
    {
        "line": 87,
        "fullcodeline": "g_autoptr(GFile) sideload_path = NULL;"
    },
    {
        "line": 38,
        "fullcodeline": "op->skip = TRUE;"
    },
    {
        "line": 59,
        "fullcodeline": "priv->max_op = APP_INSTALL;"
    },
    {
        "line": 63,
        "fullcodeline": "else if (flatpak_decomposed_is_runtime (op->ref))"
    },
    {
        "line": 89,
        "fullcodeline": "if (op->commit != NULL)"
    },
    {
        "line": 141,
        "fullcodeline": "if (!try_resolve_op_from_metadata (self, op, checksum, sideload_path, state, &local_error))"
    },
    {
        "line": 61,
        "fullcodeline": "priv->max_op = MAX (priv->max_op, APP_UPDATE);"
    },
    {
        "line": 91,
        "fullcodeline": "checksum = g_strdup (op->commit);"
    },
    {
        "line": 93,
        "fullcodeline": "sideload_path = flatpak_remote_state_lookup_sideload_checksum (state, op->commit);"
    },
    {
        "line": 153,
        "fullcodeline": "g_autoptr(GVariant) commit_data = NULL;"
    },
    {
        "line": 162,
        "fullcodeline": "commit_data = flatpak_remote_state_load_ref_commit (state, priv->dir,"
    },
    {
        "line": 65,
        "fullcodeline": "if (op->kind == FLATPAK_TRANSACTION_OPERATION_INSTALL)"
    },
    {
        "line": 97,
        "fullcodeline": "g_autofree char *latest_checksum = NULL;"
    },
    {
        "line": 98,
        "fullcodeline": "g_autoptr(GFile) latest_sideload_path = NULL;"
    },
    {
        "line": 99,
        "fullcodeline": "g_autofree char *local_checksum = NULL;"
    },
    {
        "line": 101,
        "fullcodeline": "g_autoptr(GVariant) local_commit_data = flatpak_dir_read_latest_commit (priv->dir, op->remote, op->ref,"
    },
    {
        "line": 157,
        "fullcodeline": "if (op->summary_metadata == NULL &&"
    },
    {
        "line": 166,
        "fullcodeline": "if (commit_data == NULL)"
    },
    {
        "line": 186,
        "fullcodeline": "if (!resolve_op_from_commit (self, op, checksum, sideload_path, commit_data, error))"
    },
    {
        "line": 66,
        "fullcodeline": "priv->max_op = MAX (priv->max_op, RUNTIME_INSTALL);"
    },
    {
        "line": 104,
        "fullcodeline": "if (flatpak_dir_find_latest_rev (priv->dir, state, flatpak_decomposed_get_ref (op->ref), op->commit,"
    },
    {
        "line": 146,
        "fullcodeline": "g_propagate_error (error, g_steal_pointer (&local_error));"
    },
    {
        "line": 158,
        "fullcodeline": "flatpak_remote_state_lookup_ref (state, flatpak_decomposed_get_ref (op->ref),"
    },
    {
        "line": 160,
        "fullcodeline": "op->summary_metadata = var_metadata_dup_to_gvariant (var_ref_info_get_metadata (ref_info));"
    },
    {
        "line": 163,
        "fullcodeline": "flatpak_decomposed_get_ref (op->ref),"
    },
    {
        "line": 182,
        "fullcodeline": "g_propagate_error (error, g_steal_pointer (&local_error));"
    },
    {
        "line": 168,
        "fullcodeline": "if (g_error_matches (local_error, FLATPAK_HTTP_ERROR, FLATPAK_HTTP_ERROR_UNAUTHORIZED) && !op->requested_token)"
    },
    {
        "line": 110,
        "fullcodeline": "if (latest_sideload_path != NULL && local_commit_data && latest_timestamp != 0 &&"
    },
    {
        "line": 132,
        "fullcodeline": "g_message (_(\"Warning: Treating remote fetch error as non-fatal since %s is already installed: %s\"),"
    },
    {
        "line": 134,
        "fullcodeline": "g_clear_error (&local_error);"
    },
    {
        "line": 136,
        "fullcodeline": "checksum = g_steal_pointer (&local_checksum);"
    },
    {
        "line": 171,
        "fullcodeline": "g_debug (\"Unauthorized access during resolve by commit of %s, retrying with token\", flatpak_decomposed_get_ref (op->ref));"
    },
    {
        "line": 172,
        "fullcodeline": "priv->needs_resolve = TRUE;"
    },
    {
        "line": 173,
        "fullcodeline": "priv->needs_tokens = TRUE;"
    },
    {
        "line": 176,
        "fullcodeline": "op->token_type = G_MAXINT32;"
    },
    {
        "line": 177,
        "fullcodeline": "op->resolved_commit = g_strdup (checksum);"
    },
    {
        "line": 179,
        "fullcodeline": "g_clear_error (&local_error);"
    },
    {
        "line": 111,
        "fullcodeline": "ostree_commit_get_timestamp (local_commit_data) > latest_timestamp)"
    },
    {
        "line": 113,
        "fullcodeline": "g_debug (\"Installed commit %s newer than sideloaded %s, ignoring\", local_checksum, latest_checksum);"
    },
    {
        "line": 114,
        "fullcodeline": "checksum = g_steal_pointer (&local_checksum);"
    },
    {
        "line": 126,
        "fullcodeline": "if (local_commit_data == NULL)"
    },
    {
        "line": 133,
        "fullcodeline": "flatpak_decomposed_get_ref (op->ref), local_error->message);"
    },
    {
        "line": 119,
        "fullcodeline": "checksum = g_steal_pointer (&latest_checksum);"
    },
    {
        "line": 120,
        "fullcodeline": "sideload_path = g_steal_pointer (&latest_sideload_path);"
    },
    {
        "line": 128,
        "fullcodeline": "g_propagate_error (error, g_steal_pointer (&local_error));"
    }
]