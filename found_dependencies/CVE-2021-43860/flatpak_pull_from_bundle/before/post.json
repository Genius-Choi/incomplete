[
    {
        "line": 9,
        "fullcodeline": "g_autofree char *metadata_contents = NULL;"
    },
    {
        "line": 10,
        "fullcodeline": "g_autofree char *to_checksum = NULL;"
    },
    {
        "line": 11,
        "fullcodeline": "g_autoptr(GFile) root = NULL;"
    },
    {
        "line": 12,
        "fullcodeline": "g_autoptr(GFile) metadata_file = NULL;"
    },
    {
        "line": 13,
        "fullcodeline": "g_autoptr(GInputStream) in = NULL;"
    },
    {
        "line": 14,
        "fullcodeline": "g_autoptr(OstreeGpgVerifyResult) gpg_result = NULL;"
    },
    {
        "line": 15,
        "fullcodeline": "g_autoptr(GError) my_error = NULL;"
    },
    {
        "line": 16,
        "fullcodeline": "g_autoptr(GVariant) metadata = NULL;"
    },
    {
        "line": 18,
        "fullcodeline": "g_autofree char *remote_collection_id = NULL;"
    },
    {
        "line": 19,
        "fullcodeline": "g_autofree char *collection_id = NULL;"
    },
    {
        "line": 21,
        "fullcodeline": "metadata = flatpak_bundle_load (file, &to_checksum, NULL, NULL, NULL, &metadata_contents, NULL, NULL, &collection_id, error);"
    },
    {
        "line": 38,
        "fullcodeline": "ostree_repo_transaction_set_ref (repo, remote, ref, to_checksum);"
    },
    {
        "line": 47,
        "fullcodeline": "gpg_result = ostree_repo_verify_commit_ext (repo, to_checksum,"
    },
    {
        "line": 83,
        "fullcodeline": "metadata_file = g_file_resolve_relative_path (root, \"metadata\");"
    },
    {
        "line": 84,
        "fullcodeline": "in = (GInputStream *) g_file_read (metadata_file, cancellable, NULL);"
    },
    {
        "line": 22,
        "fullcodeline": "if (metadata == NULL)"
    },
    {
        "line": 25,
        "fullcodeline": "if (!ostree_repo_get_remote_option (repo, remote, \"collection-id\", NULL,"
    },
    {
        "line": 29,
        "fullcodeline": "if (remote_collection_id != NULL && collection_id != NULL &&"
    },
    {
        "line": 34,
        "fullcodeline": "if (!ostree_repo_prepare_transaction (repo, NULL, cancellable, error))"
    },
    {
        "line": 40,
        "fullcodeline": "if (!ostree_repo_static_delta_execute_offline (repo,"
    },
    {
        "line": 49,
        "fullcodeline": "if (gpg_result == NULL)"
    },
    {
        "line": 74,
        "fullcodeline": "if (!ostree_repo_read_commit (repo, to_checksum, &root, NULL, NULL, error))"
    },
    {
        "line": 77,
        "fullcodeline": "if (!ostree_repo_commit_transaction (repo, NULL, cancellable, error))"
    },
    {
        "line": 85,
        "fullcodeline": "if (in != NULL)"
    },
    {
        "line": 106,
        "fullcodeline": "if (!metadata_valid)"
    },
    {
        "line": 27,
        "fullcodeline": "remote_collection_id = NULL;"
    },
    {
        "line": 30,
        "fullcodeline": "strcmp (remote_collection_id, collection_id) != 0)"
    },
    {
        "line": 87,
        "fullcodeline": "g_autoptr(GMemoryOutputStream) data_stream = (GMemoryOutputStream *) g_memory_output_stream_new_resizable ();"
    },
    {
        "line": 95,
        "fullcodeline": "g_output_stream_write (G_OUTPUT_STREAM (data_stream), \"\\0\", 1, NULL, NULL);"
    },
    {
        "line": 97,
        "fullcodeline": "metadata_valid ="
    },
    {
        "line": 109,
        "fullcodeline": "ostree_repo_set_ref_immediate (repo, remote, ref, NULL, cancellable, error);"
    },
    {
        "line": 31,
        "fullcodeline": "return flatpak_fail_error (error, FLATPAK_ERROR_INVALID_DATA, _(\"Collection \u2018%s\u2019 of bundle doesn\u2019t match collection \u2018%s\u2019 of remote\"),"
    },
    {
        "line": 53,
        "fullcodeline": "if (g_error_matches (my_error, OSTREE_GPG_ERROR, OSTREE_GPG_ERROR_NO_SIGNATURE) &&"
    },
    {
        "line": 89,
        "fullcodeline": "if (g_output_stream_splice (G_OUTPUT_STREAM (data_stream), in,"
    },
    {
        "line": 98,
        "fullcodeline": "metadata_contents != NULL &&"
    },
    {
        "line": 103,
        "fullcodeline": "metadata_valid = (metadata_contents == NULL);"
    },
    {
        "line": 110,
        "fullcodeline": "return flatpak_fail_error (error, FLATPAK_ERROR_INVALID_DATA, _(\"Metadata in header and app are inconsistent\"));"
    },
    {
        "line": 54,
        "fullcodeline": "!require_gpg_signature)"
    },
    {
        "line": 56,
        "fullcodeline": "g_clear_error (&my_error);"
    },
    {
        "line": 69,
        "fullcodeline": "if (ostree_gpg_verify_result_count_valid (gpg_result) == 0  &&"
    },
    {
        "line": 99,
        "fullcodeline": "strcmp (metadata_contents, g_memory_output_stream_get_data (data_stream)) == 0;"
    },
    {
        "line": 60,
        "fullcodeline": "g_propagate_error (error, g_steal_pointer (&my_error));"
    },
    {
        "line": 71,
        "fullcodeline": "return flatpak_fail_error (error, FLATPAK_ERROR_UNTRUSTED, _(\"GPG signatures found, but none are in trusted keyring\"));"
    }
]