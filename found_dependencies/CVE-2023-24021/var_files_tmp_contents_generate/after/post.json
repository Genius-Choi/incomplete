[
    {
        "line": 4,
        "fullcodeline": "multipart_part **parts = NULL;"
    },
    {
        "line": 5,
        "fullcodeline": "int i, count = 0;"
    },
    {
        "line": 7,
        "fullcodeline": "if (msr->mpd == NULL) return 0;"
    },
    {
        "line": 10,
        "fullcodeline": "for (i = 0; i < msr->mpd->parts->nelts; i++)"
    },
    {
        "line": 12,
        "fullcodeline": "if ((parts[i]->type == MULTIPART_FILE) &&"
    },
    {
        "line": 13,
        "fullcodeline": "(parts[i]->tmp_file_name != NULL))"
    },
    {
        "line": 15,
        "fullcodeline": "int match = 0;"
    },
    {
        "line": 18,
        "fullcodeline": "if (var->param == NULL)"
    },
    {
        "line": 20,
        "fullcodeline": "match = 1;"
    },
    {
        "line": 46,
        "fullcodeline": "char buf[1024];"
    },
    {
        "line": 49,
        "fullcodeline": "char *full_content = NULL;"
    },
    {
        "line": 50,
        "fullcodeline": "char *full_content_tmp_ptr = NULL;"
    },
    {
        "line": 51,
        "fullcodeline": "size_t total_lenght = 0;"
    },
    {
        "line": 52,
        "fullcodeline": "msre_var *rvar = NULL;"
    },
    {
        "line": 54,
        "fullcodeline": "file = fopen(parts[i]->tmp_file_name, \"r\");"
    },
    {
        "line": 60,
        "fullcodeline": "full_content = (char *)apr_pcalloc(mptmp, (sizeof(char)*parts[i]->length) + 1);"
    },
    {
        "line": 68,
        "fullcodeline": "full_content_tmp_ptr = full_content;"
    },
    {
        "line": 76,
        "fullcodeline": "full_content_tmp_ptr[total_lenght] = '\\0';"
    },
    {
        "line": 77,
        "fullcodeline": "fclose(file);"
    },
    {
        "line": 79,
        "fullcodeline": "rvar = apr_pmemdup(mptmp, var, sizeof(msre_var));"
    },
    {
        "line": 80,
        "fullcodeline": "rvar->value = full_content;"
    },
    {
        "line": 81,
        "fullcodeline": "rvar->value_len = total_lenght;"
    },
    {
        "line": 82,
        "fullcodeline": "rvar->name = apr_psprintf(mptmp, \"FILES_TMP_CONTENT:%s\","
    },
    {
        "line": 84,
        "fullcodeline": "apr_table_addn(vartab, rvar->name, (void *)rvar);"
    },
    {
        "line": 86,
        "fullcodeline": "count++;"
    },
    {
        "line": 55,
        "fullcodeline": "if (file == NULL)"
    },
    {
        "line": 61,
        "fullcodeline": "if (full_content == NULL) {"
    },
    {
        "line": 70,
        "fullcodeline": "while ((nread = fread(buf, 1, 1023, file)) > 0)"
    },
    {
        "line": 24,
        "fullcodeline": "if (var->param_data != NULL)"
    },
    {
        "line": 72,
        "fullcodeline": "full_content_tmp_ptr = memcpy(full_content_tmp_ptr, buf, nread);"
    },
    {
        "line": 73,
        "fullcodeline": "full_content_tmp_ptr += nread;"
    },
    {
        "line": 74,
        "fullcodeline": "total_lenght         += nread;"
    },
    {
        "line": 83,
        "fullcodeline": "log_escape_nq(mptmp, parts[i]->name));"
    },
    {
        "line": 27,
        "fullcodeline": "char *my_error_msg = NULL;"
    },
    {
        "line": 62,
        "fullcodeline": "if (msr->txcfg->debuglog_level >= 3) {"
    },
    {
        "line": 28,
        "fullcodeline": "if (!(msc_regexec((msc_regex_t *)var->param_data,"
    },
    {
        "line": 63,
        "fullcodeline": "msr_log(msr, 3, \"Variable FILES_TMP_CONTENT will not be created, not \" \\"
    },
    {
        "line": 32,
        "fullcodeline": "match = 1;"
    },
    {
        "line": 38,
        "fullcodeline": "if (strcasecmp(parts[i]->name, var->param) == 0)"
    },
    {
        "line": 40,
        "fullcodeline": "match = 1;"
    },
    {
        "line": 29,
        "fullcodeline": "parts[i]->name, strlen(parts[i]->name),"
    }
]