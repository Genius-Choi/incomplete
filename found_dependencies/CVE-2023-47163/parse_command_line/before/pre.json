[
    {
        "line": 2,
        "fullcodeline": "defaults: Dict[str, Any] = {"
    },
    {
        "line": 9,
        "fullcodeline": "me = Path(argv[0]).name"
    },
    {
        "line": 11,
        "fullcodeline": "format_from_argv0 = argv0_to != \"\""
    },
    {
        "line": 13,
        "fullcodeline": "parser = argparse.ArgumentParser("
    },
    {
        "line": 16,
        "fullcodeline": "parser.add_argument(\"-v\", \"--version\", action=\"version\", version=__version__)"
    },
    {
        "line": 18,
        "fullcodeline": "input_group = parser.add_mutually_exclusive_group()"
    },
    {
        "line": 19,
        "fullcodeline": "input_group.add_argument(\"input\", nargs=\"?\", default=\"-\", help=\"input file\")"
    },
    {
        "line": 20,
        "fullcodeline": "input_group.add_argument("
    },
    {
        "line": 63,
        "fullcodeline": "output_group = parser.add_mutually_exclusive_group()"
    },
    {
        "line": 64,
        "fullcodeline": "output_group.add_argument(\"output\", nargs=\"?\", default=\"-\", help=\"output file\")"
    },
    {
        "line": 65,
        "fullcodeline": "output_group.add_argument("
    },
    {
        "line": 85,
        "fullcodeline": "parser.add_argument("
    },
    {
        "line": 100,
        "fullcodeline": "parser.add_argument("
    },
    {
        "line": 107,
        "fullcodeline": "parser.add_argument("
    },
    {
        "line": 145,
        "fullcodeline": "args = parser.parse_args(args=argv[1:])"
    },
    {
        "line": 10,
        "fullcodeline": "argv0_from, argv0_to = argv0_to_format(me)"
    },
    {
        "line": 29,
        "fullcodeline": "if not format_from_argv0:"
    },
    {
        "line": 40,
        "fullcodeline": "if not format_from_argv0 or argv0_to == \"json\":"
    },
    {
        "line": 51,
        "fullcodeline": "if not format_from_argv0 or argv0_to in {\"json\", \"toml\"}:"
    },
    {
        "line": 74,
        "fullcodeline": "if not format_from_argv0:"
    },
    {
        "line": 91,
        "fullcodeline": "if not format_from_argv0 or argv0_to in {\"json\", \"toml\", \"yaml\"}:"
    },
    {
        "line": 115,
        "fullcodeline": "if not format_from_argv0 or argv0_to == \"yaml\":"
    },
    {
        "line": 148,
        "fullcodeline": "if args.input_flag is not None:"
    },
    {
        "line": 151,
        "fullcodeline": "if args.output_flag is not None:"
    },
    {
        "line": 169,
        "fullcodeline": "for key, value in defaults.items():"
    },
    {
        "line": 173,
        "fullcodeline": "if \"yaml_indent\" in vars(args):"
    },
    {
        "line": 30,
        "fullcodeline": "parser.add_argument("
    },
    {
        "line": 41,
        "fullcodeline": "parser.add_argument("
    },
    {
        "line": 52,
        "fullcodeline": "parser.add_argument("
    },
    {
        "line": 75,
        "fullcodeline": "parser.add_argument("
    },
    {
        "line": 92,
        "fullcodeline": "parser.add_argument("
    },
    {
        "line": 116,
        "fullcodeline": "parser.add_argument("
    },
    {
        "line": 124,
        "fullcodeline": "parser.add_argument("
    },
    {
        "line": 132,
        "fullcodeline": "def yaml_width(value: str) -> int:"
    },
    {
        "line": 136,
        "fullcodeline": "parser.add_argument("
    },
    {
        "line": 149,
        "fullcodeline": "args.input = args.input_flag"
    },
    {
        "line": 152,
        "fullcodeline": "args.output = args.output_flag"
    },
    {
        "line": 156,
        "fullcodeline": "args.input_format = argv0_from"
    },
    {
        "line": 157,
        "fullcodeline": "args.output_format = argv0_to"
    },
    {
        "line": 174,
        "fullcodeline": "vars(args)[\"yaml_options\"] = {"
    },
    {
        "line": 58,
        "fullcodeline": "\"Turn into strings boolean, date-time, and null keys for JSON \""
    },
    {
        "line": 129,
        "fullcodeline": "choices=[\"\", \"'\", '\"', \"|\", \">\"],"
    },
    {
        "line": 159,
        "fullcodeline": "if args.input_format == \"\":"
    },
    {
        "line": 164,
        "fullcodeline": "if args.output_format == \"\":"
    },
    {
        "line": 179,
        "fullcodeline": "for key in [\"yaml_indent\", \"yaml_style\", \"yaml_width\"]:"
    },
    {
        "line": 6,
        "fullcodeline": "\"yaml_options\": {},"
    },
    {
        "line": 160,
        "fullcodeline": "args.input_format = extension_to_format(args.input)"
    },
    {
        "line": 165,
        "fullcodeline": "args.output_format = extension_to_format(args.output)"
    },
    {
        "line": 170,
        "fullcodeline": "vars(args).setdefault(key, value)"
    },
    {
        "line": 161,
        "fullcodeline": "if args.input_format == \"\":"
    },
    {
        "line": 166,
        "fullcodeline": "if args.output_format == \"\":"
    },
    {
        "line": 180,
        "fullcodeline": "del vars(args)[key]"
    },
    {
        "line": 162,
        "fullcodeline": "parser.error(\"Need an explicit input format\")"
    },
    {
        "line": 167,
        "fullcodeline": "parser.error(\"Need an explicit output format\")"
    }
]