[
    {
        "line": 10,
        "fullcodeline": "if output_format == \"json\":"
    },
    {
        "line": 11,
        "fullcodeline": "encoded = encode_json("
    },
    {
        "line": 17,
        "fullcodeline": "elif output_format == \"msgpack\":"
    },
    {
        "line": 18,
        "fullcodeline": "encoded = encode_msgpack(data)"
    },
    {
        "line": 19,
        "fullcodeline": "elif output_format == \"toml\":"
    },
    {
        "line": 26,
        "fullcodeline": "encoded = encode_toml(data, ordered=ordered, stringify=stringify).encode("
    },
    {
        "line": 20,
        "fullcodeline": "if not isinstance(data, Mapping):"
    },
    {
        "line": 29,
        "fullcodeline": "elif output_format == \"yaml\":"
    },
    {
        "line": 21,
        "fullcodeline": "msg = ("
    },
    {
        "line": 25,
        "fullcodeline": "raise TypeError(msg)"
    },
    {
        "line": 30,
        "fullcodeline": "encoded = encode_yaml(data, ordered=ordered, yaml_options=yaml_options).encode("
    },
    {
        "line": 22,
        "fullcodeline": "f\"Top-level value of type '{type(data).__name__}' cannot \""
    },
    {
        "line": 33,
        "fullcodeline": "elif output_format == \"cbor\":"
    },
    {
        "line": 34,
        "fullcodeline": "encoded = encode_cbor(data)"
    },
    {
        "line": 36,
        "fullcodeline": "msg = f\"Unknown output format: {output_format}\""
    },
    {
        "line": 37,
        "fullcodeline": "raise ValueError(msg)"
    }
]