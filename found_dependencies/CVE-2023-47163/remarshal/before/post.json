[
    {
        "line": 15,
        "fullcodeline": "input_file = None"
    },
    {
        "line": 16,
        "fullcodeline": "output_file = None"
    },
    {
        "line": 19,
        "fullcodeline": "input_file = sys.stdin.buffer if input == \"-\" else Path(input).open(\"rb\")"
    },
    {
        "line": 20,
        "fullcodeline": "output_file = sys.stdout.buffer if output == \"-\" else Path(output).open(\"wb\")"
    },
    {
        "line": 22,
        "fullcodeline": "input_data = input_file.read()"
    },
    {
        "line": 27,
        "fullcodeline": "parsed = decode(input_format, input_data)"
    },
    {
        "line": 45,
        "fullcodeline": "encoded = encode("
    },
    {
        "line": 54,
        "fullcodeline": "output_file.write(encoded)"
    },
    {
        "line": 23,
        "fullcodeline": "if not isinstance(input_data, bytes):"
    },
    {
        "line": 29,
        "fullcodeline": "if unwrap is not None:"
    },
    {
        "line": 37,
        "fullcodeline": "if wrap is not None:"
    },
    {
        "line": 24,
        "fullcodeline": "msg = \"input_data must be bytes\""
    },
    {
        "line": 25,
        "fullcodeline": "raise TypeError(msg)"
    },
    {
        "line": 36,
        "fullcodeline": "parsed = parsed[unwrap]"
    },
    {
        "line": 38,
        "fullcodeline": "temp = {}"
    },
    {
        "line": 39,
        "fullcodeline": "temp[wrap] = parsed"
    },
    {
        "line": 40,
        "fullcodeline": "parsed = temp"
    },
    {
        "line": 43,
        "fullcodeline": "parsed = transform(parsed)"
    },
    {
        "line": 56,
        "fullcodeline": "if input_file is not None:"
    },
    {
        "line": 58,
        "fullcodeline": "if output != \"-\" and output_file is not None:"
    },
    {
        "line": 30,
        "fullcodeline": "if not isinstance(parsed, Mapping):"
    },
    {
        "line": 57,
        "fullcodeline": "input_file.close()"
    },
    {
        "line": 59,
        "fullcodeline": "output_file.close()"
    },
    {
        "line": 31,
        "fullcodeline": "msg = ("
    },
    {
        "line": 35,
        "fullcodeline": "raise TypeError(msg)"
    },
    {
        "line": 32,
        "fullcodeline": "f\"Top-level value of type '{type(parsed).__name__}' \""
    }
]