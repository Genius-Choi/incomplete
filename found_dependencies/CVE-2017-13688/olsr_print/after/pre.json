[
    {
        "line": 20,
        "fullcodeline": "tptr = pptr;"
    },
    {
        "line": 26,
        "fullcodeline": "ND_TCHECK2(*tptr, sizeof(struct olsr_common));"
    },
    {
        "line": 28,
        "fullcodeline": "ptr.common = (const struct olsr_common *)tptr;"
    },
    {
        "line": 29,
        "fullcodeline": "length = min(length, EXTRACT_16BITS(ptr.common->packet_len));"
    },
    {
        "line": 31,
        "fullcodeline": "ND_PRINT((ndo, \"OLSRv%i, seq 0x%04x, length %u\","
    },
    {
        "line": 36,
        "fullcodeline": "tptr += sizeof(struct olsr_common);"
    },
    {
        "line": 22,
        "fullcodeline": "if (length < sizeof(struct olsr_common)) {"
    },
    {
        "line": 41,
        "fullcodeline": "if (ndo->ndo_vflag < 1) {"
    },
    {
        "line": 45,
        "fullcodeline": "while (tptr < (pptr+length)) {"
    },
    {
        "line": 402,
        "fullcodeline": "ND_PRINT((ndo, \"[|olsr]\"));"
    },
    {
        "line": 51,
        "fullcodeline": "int msg_len_valid = 0;"
    },
    {
        "line": 396,
        "fullcodeline": "tptr += msg_len;"
    },
    {
        "line": 32,
        "fullcodeline": "(is_ipv6 == 0) ? 4 : 6,"
    },
    {
        "line": 33,
        "fullcodeline": "EXTRACT_16BITS(ptr.common->packet_seq),"
    },
    {
        "line": 55,
        "fullcodeline": "ND_TCHECK2(*tptr, sizeof(struct olsr_msg6));"
    },
    {
        "line": 57,
        "fullcodeline": "msg_type = msgptr.v6->msg_type;"
    },
    {
        "line": 58,
        "fullcodeline": "msg_len = EXTRACT_16BITS(msgptr.v6->msg_len);"
    },
    {
        "line": 81,
        "fullcodeline": "msg_tlen = msg_len - sizeof(struct olsr_msg6);"
    },
    {
        "line": 82,
        "fullcodeline": "msg_data = tptr + sizeof(struct olsr_msg6);"
    },
    {
        "line": 121,
        "fullcodeline": "ND_TCHECK2(*msg_data, sizeof(struct olsr_hello));"
    },
    {
        "line": 126,
        "fullcodeline": "msg_data += sizeof(struct olsr_hello);"
    },
    {
        "line": 127,
        "fullcodeline": "msg_tlen -= sizeof(struct olsr_hello);"
    },
    {
        "line": 183,
        "fullcodeline": "ND_TCHECK2(*msg_data, sizeof(struct olsr_tc));"
    },
    {
        "line": 188,
        "fullcodeline": "msg_data += sizeof(struct olsr_tc);"
    },
    {
        "line": 189,
        "fullcodeline": "msg_tlen -= sizeof(struct olsr_tc);"
    },
    {
        "line": 393,
        "fullcodeline": "print_unknown_data(ndo, msg_data, \"\\n\\t    \", msg_tlen);"
    },
    {
        "line": 59,
        "fullcodeline": "if ((msg_len >= sizeof (struct olsr_msg6))"
    },
    {
        "line": 64,
        "fullcodeline": "if (msg_type == 0 || msg_len == 0) {"
    },
    {
        "line": 68,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t%s Message (%#04x), originator %s, ttl %u, hop %u\""
    },
    {
        "line": 86,
        "fullcodeline": "ND_TCHECK2(*tptr, sizeof(struct olsr_msg4));"
    },
    {
        "line": 88,
        "fullcodeline": "msg_type = msgptr.v4->msg_type;"
    },
    {
        "line": 89,
        "fullcodeline": "msg_len = EXTRACT_16BITS(msgptr.v4->msg_len);"
    },
    {
        "line": 112,
        "fullcodeline": "msg_tlen = msg_len - sizeof(struct olsr_msg4);"
    },
    {
        "line": 113,
        "fullcodeline": "msg_data = tptr + sizeof(struct olsr_msg4);"
    },
    {
        "line": 119,
        "fullcodeline": "if (msg_tlen < sizeof(struct olsr_hello))"
    },
    {
        "line": 124,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t  hello-time %.3fs, MPR willingness %u\","
    },
    {
        "line": 129,
        "fullcodeline": "while (msg_tlen >= sizeof(struct olsr_hello_link)) {"
    },
    {
        "line": 181,
        "fullcodeline": "if (msg_tlen < sizeof(struct olsr_tc))"
    },
    {
        "line": 186,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t    advertised neighbor seq 0x%04x\","
    },
    {
        "line": 191,
        "fullcodeline": "if (msg_type == OLSR_TC_MSG) {"
    },
    {
        "line": 207,
        "fullcodeline": "size_t addr_size = sizeof(struct in_addr);"
    },
    {
        "line": 317,
        "fullcodeline": "ND_TCHECK2(*msg_data, 4);"
    },
    {
        "line": 319,
        "fullcodeline": "name_entries = EXTRACT_16BITS(msg_data+2);"
    },
    {
        "line": 320,
        "fullcodeline": "addr_size = 4;"
    },
    {
        "line": 324,
        "fullcodeline": "name_entries_valid = 0;"
    },
    {
        "line": 336,
        "fullcodeline": "msg_data += 4;"
    },
    {
        "line": 337,
        "fullcodeline": "msg_tlen -= 4;"
    },
    {
        "line": 60,
        "fullcodeline": "&& (msg_len <= length))"
    },
    {
        "line": 61,
        "fullcodeline": "msg_len_valid = 1;"
    },
    {
        "line": 90,
        "fullcodeline": "if ((msg_len >= sizeof (struct olsr_msg4))"
    },
    {
        "line": 95,
        "fullcodeline": "if (msg_type == 0 || msg_len == 0) {"
    },
    {
        "line": 99,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t%s Message (%#04x), originator %s, ttl %u, hop %u\""
    },
    {
        "line": 130,
        "fullcodeline": "int hello_len_valid = 0;"
    },
    {
        "line": 135,
        "fullcodeline": "ND_TCHECK2(*msg_data, sizeof(struct olsr_hello_link));"
    },
    {
        "line": 139,
        "fullcodeline": "hello_len = EXTRACT_16BITS(ptr.hello_link->len);"
    },
    {
        "line": 140,
        "fullcodeline": "link_type = OLSR_EXTRACT_LINK_TYPE(ptr.hello_link->link_code);"
    },
    {
        "line": 141,
        "fullcodeline": "neighbor_type = OLSR_EXTRACT_NEIGHBOR_TYPE(ptr.hello_link->link_code);"
    },
    {
        "line": 156,
        "fullcodeline": "msg_data += sizeof(struct olsr_hello_link);"
    },
    {
        "line": 157,
        "fullcodeline": "msg_tlen -= sizeof(struct olsr_hello_link);"
    },
    {
        "line": 158,
        "fullcodeline": "hello_len -= sizeof(struct olsr_hello_link);"
    },
    {
        "line": 160,
        "fullcodeline": "ND_TCHECK2(*msg_data, hello_len);"
    },
    {
        "line": 174,
        "fullcodeline": "msg_data += hello_len;"
    },
    {
        "line": 175,
        "fullcodeline": "msg_tlen -= hello_len;"
    },
    {
        "line": 212,
        "fullcodeline": "while (msg_tlen >= addr_size) {"
    },
    {
        "line": 227,
        "fullcodeline": "int i = 0;"
    },
    {
        "line": 315,
        "fullcodeline": "if (msg_tlen < 4)"
    },
    {
        "line": 329,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t  Version %u, Entries %u%s\","
    },
    {
        "line": 339,
        "fullcodeline": "for (i = 0; i < name_entries; i++) {"
    },
    {
        "line": 70,
        "fullcodeline": "tok2str(olsr_msg_values, \"Unknown\", msg_type),"
    },
    {
        "line": 71,
        "fullcodeline": "msg_type, ip6addr_string(ndo, msgptr.v6->originator),"
    },
    {
        "line": 74,
        "fullcodeline": "ME_TO_DOUBLE(msgptr.v6->vtime),"
    },
    {
        "line": 75,
        "fullcodeline": "EXTRACT_16BITS(msgptr.v6->msg_seq),"
    },
    {
        "line": 91,
        "fullcodeline": "&& (msg_len <= length))"
    },
    {
        "line": 92,
        "fullcodeline": "msg_len_valid = 1;"
    },
    {
        "line": 125,
        "fullcodeline": "ME_TO_DOUBLE(ptr.hello->htime), ptr.hello->will));"
    },
    {
        "line": 147,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t    link-type %s, neighbor-type %s, len %u%s\","
    },
    {
        "line": 161,
        "fullcodeline": "if (msg_type == OLSR_HELLO_MSG) {"
    },
    {
        "line": 187,
        "fullcodeline": "EXTRACT_16BITS(ptr.tc->ans_seq)));"
    },
    {
        "line": 210,
        "fullcodeline": "addr_size = sizeof(struct in6_addr);"
    },
    {
        "line": 213,
        "fullcodeline": "ND_TCHECK2(*msg_data, addr_size);"
    },
    {
        "line": 218,
        "fullcodeline": "msg_data += addr_size;"
    },
    {
        "line": 219,
        "fullcodeline": "msg_tlen -= addr_size;"
    },
    {
        "line": 229,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t  Advertised networks (total %u)\","
    },
    {
        "line": 232,
        "fullcodeline": "while (msg_tlen >= sizeof(struct olsr_hna6)) {"
    },
    {
        "line": 249,
        "fullcodeline": "int col = 0;"
    },
    {
        "line": 322,
        "fullcodeline": "addr_size = 16;"
    },
    {
        "line": 325,
        "fullcodeline": "if ((name_entries > 0)"
    },
    {
        "line": 326,
        "fullcodeline": "&& ((name_entries * (4 + addr_size)) <= msg_tlen))"
    },
    {
        "line": 327,
        "fullcodeline": "name_entries_valid = 1;"
    },
    {
        "line": 340,
        "fullcodeline": "int name_entry_len_valid = 0;"
    },
    {
        "line": 344,
        "fullcodeline": "ND_TCHECK2(*msg_data, 4);"
    },
    {
        "line": 346,
        "fullcodeline": "name_entry_type = EXTRACT_16BITS(msg_data);"
    },
    {
        "line": 347,
        "fullcodeline": "name_entry_len = EXTRACT_16BITS(msg_data+2);"
    },
    {
        "line": 349,
        "fullcodeline": "msg_data += 4;"
    },
    {
        "line": 350,
        "fullcodeline": "msg_tlen -= 4;"
    },
    {
        "line": 363,
        "fullcodeline": "name_entry_padding = 0;"
    },
    {
        "line": 370,
        "fullcodeline": "ND_TCHECK2(*msg_data, addr_size + name_entry_len + name_entry_padding);"
    },
    {
        "line": 381,
        "fullcodeline": "msg_data += addr_size + name_entry_len + name_entry_padding;"
    },
    {
        "line": 382,
        "fullcodeline": "msg_tlen -= addr_size + name_entry_len + name_entry_padding;"
    },
    {
        "line": 76,
        "fullcodeline": "msg_len, (msg_len_valid == 0) ? \" (invalid)\" : \"\"));"
    },
    {
        "line": 101,
        "fullcodeline": "tok2str(olsr_msg_values, \"Unknown\", msg_type),"
    },
    {
        "line": 102,
        "fullcodeline": "msg_type, ipaddr_string(ndo, msgptr.v4->originator),"
    },
    {
        "line": 105,
        "fullcodeline": "ME_TO_DOUBLE(msgptr.v4->vtime),"
    },
    {
        "line": 106,
        "fullcodeline": "EXTRACT_16BITS(msgptr.v4->msg_seq),"
    },
    {
        "line": 143,
        "fullcodeline": "if ((hello_len <= msg_tlen)"
    },
    {
        "line": 144,
        "fullcodeline": "&& (hello_len >= sizeof(struct olsr_hello_link)))"
    },
    {
        "line": 145,
        "fullcodeline": "hello_len_valid = 1;"
    },
    {
        "line": 192,
        "fullcodeline": "if (olsr_print_neighbor(ndo, msg_data, msg_tlen) == -1)"
    },
    {
        "line": 214,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t  interface address %s\","
    },
    {
        "line": 235,
        "fullcodeline": "ND_TCHECK2(*msg_data, sizeof(struct olsr_hna6));"
    },
    {
        "line": 237,
        "fullcodeline": "hna6 = (const struct olsr_hna6 *)msg_data;"
    },
    {
        "line": 243,
        "fullcodeline": "msg_data += sizeof(struct olsr_hna6);"
    },
    {
        "line": 244,
        "fullcodeline": "msg_tlen -= sizeof(struct olsr_hna6);"
    },
    {
        "line": 251,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t  Advertised networks (total %u)\","
    },
    {
        "line": 254,
        "fullcodeline": "while (msg_tlen >= sizeof(struct olsr_hna4)) {"
    },
    {
        "line": 330,
        "fullcodeline": "EXTRACT_16BITS(msg_data),"
    },
    {
        "line": 342,
        "fullcodeline": "if (msg_tlen < 4)"
    },
    {
        "line": 355,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t    #%u: type %#06x, length %u%s\","
    },
    {
        "line": 367,
        "fullcodeline": "if (msg_tlen < addr_size + name_entry_len + name_entry_padding)"
    },
    {
        "line": 378,
        "fullcodeline": "(void)fn_printn(ndo, msg_data + addr_size, name_entry_len, NULL);"
    },
    {
        "line": 379,
        "fullcodeline": "ND_PRINT((ndo, \"\\\"\"));"
    },
    {
        "line": 107,
        "fullcodeline": "msg_len, (msg_len_valid == 0) ? \" (invalid)\" : \"\"));"
    },
    {
        "line": 148,
        "fullcodeline": "tok2str(olsr_link_type_values, \"Unknown\", link_type),"
    },
    {
        "line": 149,
        "fullcodeline": "tok2str(olsr_neighbor_type_values, \"Unknown\", neighbor_type),"
    },
    {
        "line": 239,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t    #%i: %s/%u\","
    },
    {
        "line": 255,
        "fullcodeline": "ND_TCHECK2(*msg_data, sizeof(struct olsr_hna4));"
    },
    {
        "line": 300,
        "fullcodeline": "msg_data += sizeof(struct olsr_hna4);"
    },
    {
        "line": 301,
        "fullcodeline": "msg_tlen -= sizeof(struct olsr_hna4);"
    },
    {
        "line": 303,
        "fullcodeline": "col = (col + 1) % 4;"
    },
    {
        "line": 331,
        "fullcodeline": "name_entries, (name_entries_valid == 0) ? \" (invalid)\" : \"\"));"
    },
    {
        "line": 352,
        "fullcodeline": "if ((name_entry_len > 0) && ((addr_size + name_entry_len) <= msg_tlen))"
    },
    {
        "line": 353,
        "fullcodeline": "name_entry_len_valid = 1;"
    },
    {
        "line": 364,
        "fullcodeline": "if (name_entry_len%4 != 0)"
    },
    {
        "line": 365,
        "fullcodeline": "name_entry_padding = 4-(name_entry_len%4);"
    },
    {
        "line": 151,
        "fullcodeline": "(hello_len_valid == 0) ? \" (invalid)\" : \"\"));"
    },
    {
        "line": 162,
        "fullcodeline": "if (olsr_print_neighbor(ndo, msg_data, hello_len) == -1)"
    },
    {
        "line": 230,
        "fullcodeline": "(unsigned int) (msg_tlen / sizeof(struct olsr_hna6))));"
    },
    {
        "line": 260,
        "fullcodeline": "if (!ptr.hna->network[0] && !ptr.hna->network[1] &&"
    },
    {
        "line": 373,
        "fullcodeline": "ND_PRINT((ndo, \", address %s, name \\\"\","
    },
    {
        "line": 196,
        "fullcodeline": "if (olsr_print_lq_neighbor6(ndo, msg_data, msg_tlen) == -1)"
    },
    {
        "line": 215,
        "fullcodeline": "is_ipv6 ? ip6addr_string(ndo, msg_data) :"
    },
    {
        "line": 216,
        "fullcodeline": "ipaddr_string(ndo, msg_data)));"
    },
    {
        "line": 240,
        "fullcodeline": "i, ip6addr_string(ndo, hna6->network),"
    },
    {
        "line": 241,
        "fullcodeline": "mask62plen (hna6->mask)));"
    },
    {
        "line": 252,
        "fullcodeline": "(unsigned int) (msg_tlen / sizeof(struct olsr_hna4))));"
    },
    {
        "line": 357,
        "fullcodeline": "name_entry_len, (name_entry_len_valid == 0) ? \" (invalid)\" : \"\"));"
    },
    {
        "line": 376,
        "fullcodeline": "ND_PRINT((ndo, \", address %s, name \\\"\","
    },
    {
        "line": 199,
        "fullcodeline": "if (olsr_print_lq_neighbor4(ndo, msg_data, msg_tlen) == -1)"
    },
    {
        "line": 262,
        "fullcodeline": "!ptr.hna->mask[GW_HNA_PAD] &&"
    },
    {
        "line": 265,
        "fullcodeline": "ND_PRINT((ndo, \"%sSmart-Gateway:%s%s%s%s%s %u/%u\","
    },
    {
        "line": 374,
        "fullcodeline": "ip6addr_string(ndo, msg_data)));"
    },
    {
        "line": 166,
        "fullcodeline": "if (olsr_print_lq_neighbor6(ndo, msg_data, hello_len) == -1)"
    },
    {
        "line": 261,
        "fullcodeline": "!ptr.hna->network[2] && !ptr.hna->network[3] &&"
    },
    {
        "line": 294,
        "fullcodeline": "ND_PRINT((ndo, \"%s%s/%u\","
    },
    {
        "line": 377,
        "fullcodeline": "ipaddr_string(ndo, msg_data)));"
    },
    {
        "line": 169,
        "fullcodeline": "if (olsr_print_lq_neighbor4(ndo, msg_data, hello_len) == -1)"
    },
    {
        "line": 266,
        "fullcodeline": "col == 0 ? \"\\n\\t    \" : \", \", /* indent */"
    },
    {
        "line": 269,
        "fullcodeline": "(ptr.hna->mask[GW_HNA_FLAGS] &"
    },
    {
        "line": 272,
        "fullcodeline": "(ptr.hna->mask[GW_HNA_FLAGS] &"
    },
    {
        "line": 275,
        "fullcodeline": "(ptr.hna->mask[GW_HNA_FLAGS] &"
    },
    {
        "line": 278,
        "fullcodeline": "(ptr.hna->mask[GW_HNA_FLAGS] &"
    },
    {
        "line": 281,
        "fullcodeline": "(ptr.hna->mask[GW_HNA_FLAGS] &"
    },
    {
        "line": 284,
        "fullcodeline": "(ptr.hna->mask[GW_HNA_FLAGS] &"
    },
    {
        "line": 286,
        "fullcodeline": "deserialize_gw_speed(ptr.hna->mask[GW_HNA_UPLINK]) : 0,"
    },
    {
        "line": 288,
        "fullcodeline": "(ptr.hna->mask[GW_HNA_FLAGS] &"
    },
    {
        "line": 290,
        "fullcodeline": "deserialize_gw_speed(ptr.hna->mask[GW_HNA_DOWNLINK]) : 0"
    },
    {
        "line": 296,
        "fullcodeline": "ipaddr_string(ndo, ptr.hna->network),"
    },
    {
        "line": 297,
        "fullcodeline": "mask2plen(EXTRACT_32BITS(ptr.hna->mask))));"
    },
    {
        "line": 295,
        "fullcodeline": "col == 0 ? \"\\n\\t    \" : \", \","
    }
]