[
    {
        "line": 5,
        "fullcodeline": "struct apparmor_audit_data aad = {0,};"
    },
    {
        "line": 6,
        "fullcodeline": "char *command, *largs = NULL, *args = value;"
    },
    {
        "line": 26,
        "fullcodeline": "error = -EINVAL;"
    },
    {
        "line": 27,
        "fullcodeline": "args = strim(args);"
    },
    {
        "line": 28,
        "fullcodeline": "command = strsep(&args, \" \");"
    },
    {
        "line": 31,
        "fullcodeline": "args = skip_spaces(args);"
    },
    {
        "line": 35,
        "fullcodeline": "arg_size = size - (args - (char *) value);"
    },
    {
        "line": 64,
        "fullcodeline": "kfree(largs);"
    },
    {
        "line": 68,
        "fullcodeline": "sa.type = LSM_AUDIT_DATA_NONE;"
    },
    {
        "line": 69,
        "fullcodeline": "sa.aad = &aad;"
    },
    {
        "line": 70,
        "fullcodeline": "aad.profile = aa_current_profile();"
    },
    {
        "line": 71,
        "fullcodeline": "aad.op = OP_SETPROCATTR;"
    },
    {
        "line": 72,
        "fullcodeline": "aad.info = name;"
    },
    {
        "line": 73,
        "fullcodeline": "aad.error = error = -EINVAL;"
    },
    {
        "line": 74,
        "fullcodeline": "aa_audit_msg(AUDIT_APPARMOR_DENIED, &sa, NULL);"
    },
    {
        "line": 10,
        "fullcodeline": "if (size == 0)"
    },
    {
        "line": 13,
        "fullcodeline": "if (current != task)"
    },
    {
        "line": 17,
        "fullcodeline": "if (args[size - 1] != '\\0') {"
    },
    {
        "line": 29,
        "fullcodeline": "if (!args)"
    },
    {
        "line": 36,
        "fullcodeline": "if (strcmp(name, \"current\") == 0) {"
    },
    {
        "line": 61,
        "fullcodeline": "if (!error)"
    },
    {
        "line": 19,
        "fullcodeline": "largs = args = kmalloc(size + 1, GFP_KERNEL);"
    },
    {
        "line": 22,
        "fullcodeline": "memcpy(args, value, size);"
    },
    {
        "line": 23,
        "fullcodeline": "args[size] = '\\0';"
    },
    {
        "line": 62,
        "fullcodeline": "error = size;"
    },
    {
        "line": 11,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 14,
        "fullcodeline": "return -EACCES;"
    },
    {
        "line": 20,
        "fullcodeline": "if (!args)"
    },
    {
        "line": 37,
        "fullcodeline": "if (strcmp(command, \"changehat\") == 0) {"
    },
    {
        "line": 38,
        "fullcodeline": "error = aa_setprocattr_changehat(args, arg_size,"
    },
    {
        "line": 51,
        "fullcodeline": "} else if (strcmp(name, \"exec\") == 0) {"
    },
    {
        "line": 21,
        "fullcodeline": "return -ENOMEM;"
    },
    {
        "line": 39,
        "fullcodeline": "!AA_DO_TEST);"
    },
    {
        "line": 40,
        "fullcodeline": "} else if (strcmp(command, \"permhat\") == 0) {"
    },
    {
        "line": 52,
        "fullcodeline": "if (strcmp(command, \"exec\") == 0)"
    },
    {
        "line": 41,
        "fullcodeline": "error = aa_setprocattr_changehat(args, arg_size,"
    },
    {
        "line": 53,
        "fullcodeline": "error = aa_setprocattr_changeprofile(args, AA_ONEXEC,"
    },
    {
        "line": 43,
        "fullcodeline": "} else if (strcmp(command, \"changeprofile\") == 0) {"
    },
    {
        "line": 54,
        "fullcodeline": "!AA_DO_TEST);"
    },
    {
        "line": 44,
        "fullcodeline": "error = aa_setprocattr_changeprofile(args, !AA_ONEXEC,"
    },
    {
        "line": 45,
        "fullcodeline": "!AA_DO_TEST);"
    },
    {
        "line": 46,
        "fullcodeline": "} else if (strcmp(command, \"permprofile\") == 0) {"
    },
    {
        "line": 47,
        "fullcodeline": "error = aa_setprocattr_changeprofile(args, !AA_ONEXEC,"
    }
]