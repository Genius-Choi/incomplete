[
    {
        "line": 10,
        "fullcodeline": "const Tensor& dense_shape = sparse_matrix.dense_shape();"
    },
    {
        "line": 11,
        "fullcodeline": "const int rank = dense_shape.dim_size(0);"
    },
    {
        "line": 15,
        "fullcodeline": "const int row_dim = (rank == 2) ? 0 : 1;"
    },
    {
        "line": 16,
        "fullcodeline": "auto dense_shape_vec = dense_shape.vec<int64>();"
    },
    {
        "line": 17,
        "fullcodeline": "*num_rows = dense_shape_vec(row_dim);"
    },
    {
        "line": 18,
        "fullcodeline": "const int64 num_cols = dense_shape_vec(row_dim + 1);"
    },
    {
        "line": 22,
        "fullcodeline": "const TensorShape& perm_shape = permutation_indices.shape();"
    },
    {
        "line": 33,
        "fullcodeline": "*batch_size = sparse_matrix.batch_size();"
    },
    {
        "line": 4,
        "fullcodeline": "if (sparse_matrix.dtype() != DataTypeToEnum<T>::value)"
    },
    {
        "line": 12,
        "fullcodeline": "if (rank < 2 || rank > 3)"
    },
    {
        "line": 19,
        "fullcodeline": "if (*num_rows != num_cols)"
    },
    {
        "line": 23,
        "fullcodeline": "if (perm_shape.dims() + 1 != rank)"
    },
    {
        "line": 27,
        "fullcodeline": "if (perm_shape.dim_size(rank - 2) != *num_rows)"
    },
    {
        "line": 34,
        "fullcodeline": "if (*batch_size > 1) {"
    },
    {
        "line": 42,
        "fullcodeline": "return Status::OK();"
    },
    {
        "line": 5,
        "fullcodeline": "return errors::InvalidArgument("
    },
    {
        "line": 13,
        "fullcodeline": "return errors::InvalidArgument(\"sparse matrix must have rank 2 or 3; \","
    },
    {
        "line": 20,
        "fullcodeline": "return errors::InvalidArgument("
    },
    {
        "line": 24,
        "fullcodeline": "return errors::InvalidArgument("
    },
    {
        "line": 28,
        "fullcodeline": "return errors::InvalidArgument("
    },
    {
        "line": 35,
        "fullcodeline": "if (perm_shape.dim_size(0) != *batch_size)"
    },
    {
        "line": 7,
        "fullcodeline": "DataTypeString(DataTypeToEnum<T>::value),"
    },
    {
        "line": 8,
        "fullcodeline": "\" but saw dtype: \", DataTypeString(sparse_matrix.dtype()));"
    },
    {
        "line": 26,
        "fullcodeline": "\" != \", perm_shape.dims(), \" + 1.\");"
    },
    {
        "line": 31,
        "fullcodeline": "perm_shape.dim_size(rank - 2), \" != \", *num_rows);"
    },
    {
        "line": 36,
        "fullcodeline": "return errors::InvalidArgument("
    },
    {
        "line": 39,
        "fullcodeline": "perm_shape.dim_size(0), \" != \", *batch_size);"
    }
]