[
    {
        "line": 5,
        "fullcodeline": "OP_REQUIRES(ctx, sparse_matrix.dtype() == DataTypeToEnum<T>::value,"
    },
    {
        "line": 11,
        "fullcodeline": "const Tensor& dense_shape = sparse_matrix.dense_shape();"
    },
    {
        "line": 12,
        "fullcodeline": "const int rank = dense_shape.dim_size(0);"
    },
    {
        "line": 13,
        "fullcodeline": "OP_REQUIRES(ctx, rank == 2 || rank == 3,"
    },
    {
        "line": 16,
        "fullcodeline": "const int row_dim = (rank == 2) ? 0 : 1;"
    },
    {
        "line": 17,
        "fullcodeline": "auto dense_shape_vec = dense_shape.vec<int64>();"
    },
    {
        "line": 18,
        "fullcodeline": "*num_rows = dense_shape_vec(row_dim);"
    },
    {
        "line": 19,
        "fullcodeline": "const int64 num_cols = dense_shape_vec(row_dim + 1);"
    },
    {
        "line": 20,
        "fullcodeline": "OP_REQUIRES(ctx, *num_rows == num_cols,"
    },
    {
        "line": 23,
        "fullcodeline": "const TensorShape& perm_shape = permutation_indices.shape();"
    },
    {
        "line": 24,
        "fullcodeline": "OP_REQUIRES("
    },
    {
        "line": 29,
        "fullcodeline": "OP_REQUIRES("
    },
    {
        "line": 36,
        "fullcodeline": "*batch_size = sparse_matrix.batch_size();"
    },
    {
        "line": 6,
        "fullcodeline": "errors::InvalidArgument("
    },
    {
        "line": 14,
        "fullcodeline": "errors::InvalidArgument(\"sparse matrix must have rank 2 or 3; \","
    },
    {
        "line": 21,
        "fullcodeline": "errors::InvalidArgument(\"sparse matrix must be square; got: \","
    },
    {
        "line": 25,
        "fullcodeline": "ctx, perm_shape.dims() + 1 == rank,"
    },
    {
        "line": 26,
        "fullcodeline": "errors::InvalidArgument("
    },
    {
        "line": 30,
        "fullcodeline": "ctx, perm_shape.dim_size(rank - 2) == *num_rows,"
    },
    {
        "line": 31,
        "fullcodeline": "errors::InvalidArgument("
    },
    {
        "line": 37,
        "fullcodeline": "if (*batch_size > 1) {"
    },
    {
        "line": 8,
        "fullcodeline": "DataTypeString(DataTypeToEnum<T>::value),"
    },
    {
        "line": 9,
        "fullcodeline": "\" but saw dtype: \", DataTypeString(sparse_matrix.dtype())));"
    },
    {
        "line": 28,
        "fullcodeline": "\" != \", perm_shape.dims(), \" + 1.\"));"
    },
    {
        "line": 34,
        "fullcodeline": "perm_shape.dim_size(rank - 2), \" != \", *num_rows));"
    },
    {
        "line": 38,
        "fullcodeline": "OP_REQUIRES("
    },
    {
        "line": 39,
        "fullcodeline": "ctx, perm_shape.dim_size(0) == *batch_size,"
    },
    {
        "line": 40,
        "fullcodeline": "errors::InvalidArgument(\"permutation must have the same batch size \""
    },
    {
        "line": 42,
        "fullcodeline": "perm_shape.dim_size(0), \" != \", *batch_size));"
    }
]