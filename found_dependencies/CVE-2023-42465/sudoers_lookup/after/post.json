[
    {
        "line": 5,
        "fullcodeline": "struct defaults_list *defs = NULL;"
    },
    {
        "line": 6,
        "fullcodeline": "struct sudoers_parse_tree *parse_tree = NULL;"
    },
    {
        "line": 7,
        "fullcodeline": "struct cmndspec *cs = NULL;"
    },
    {
        "line": 10,
        "fullcodeline": "unsigned int validated = FLAG_NO_USER | FLAG_NO_HOST;"
    },
    {
        "line": 11,
        "fullcodeline": "int m, match = UNSPEC;"
    },
    {
        "line": 12,
        "fullcodeline": "debug_decl(sudoers_lookup, SUDOERS_DEBUG_PARSER);"
    },
    {
        "line": 27,
        "fullcodeline": "TAILQ_FOREACH(nss, snl, entries) {"
    },
    {
        "line": 64,
        "fullcodeline": "debug_return_uint(validated);"
    },
    {
        "line": 23,
        "fullcodeline": "if (!set_perms(ctx, PERM_RUNAS))"
    },
    {
        "line": 34,
        "fullcodeline": "m = sudoers_lookup_check(nss, ctx, &validated, &info, now, callback,"
    },
    {
        "line": 44,
        "fullcodeline": "if (SPECIFIED(match)) {"
    },
    {
        "line": 62,
        "fullcodeline": "if (!restore_perms())"
    },
    {
        "line": 18,
        "fullcodeline": "debug_return_uint(sudoers_lookup_pseudo(snl, ctx, now, callback,"
    },
    {
        "line": 24,
        "fullcodeline": "debug_return_uint(validated);"
    },
    {
        "line": 28,
        "fullcodeline": "if (nss->query(ctx, nss, ctx->user.pw) == -1) {"
    },
    {
        "line": 36,
        "fullcodeline": "if (SPECIFIED(m)) {"
    },
    {
        "line": 41,
        "fullcodeline": "if (!sudo_nss_can_continue(nss, m))"
    },
    {
        "line": 63,
        "fullcodeline": "SET(validated, VALIDATE_ERROR);"
    },
    {
        "line": 30,
        "fullcodeline": "SET(validated, VALIDATE_ERROR);"
    },
    {
        "line": 37,
        "fullcodeline": "match = m;"
    },
    {
        "line": 38,
        "fullcodeline": "parse_tree = nss->parse_tree;"
    },
    {
        "line": 45,
        "fullcodeline": "if (info.cmnd_path != NULL) {"
    },
    {
        "line": 53,
        "fullcodeline": "if (defs != NULL)"
    },
    {
        "line": 55,
        "fullcodeline": "if (!apply_cmndspec(ctx, cs))"
    },
    {
        "line": 48,
        "fullcodeline": "ctx->user.cmnd = info.cmnd_path;"
    },
    {
        "line": 51,
        "fullcodeline": "*cmnd_status = info.status;"
    },
    {
        "line": 54,
        "fullcodeline": "(void)update_defaults(ctx, parse_tree, defs, SETDEF_GENERIC, false);"
    },
    {
        "line": 56,
        "fullcodeline": "SET(validated, VALIDATE_ERROR);"
    },
    {
        "line": 49,
        "fullcodeline": "if (ctx->user.cmnd_stat != NULL)"
    },
    {
        "line": 50,
        "fullcodeline": "*ctx->user.cmnd_stat = info.cmnd_stat;"
    },
    {
        "line": 57,
        "fullcodeline": "else if (match == ALLOW)"
    },
    {
        "line": 58,
        "fullcodeline": "SET(validated, VALIDATE_SUCCESS);"
    },
    {
        "line": 60,
        "fullcodeline": "SET(validated, VALIDATE_FAILURE);"
    }
]