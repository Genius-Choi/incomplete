[
    {
        "line": 3,
        "fullcodeline": "size_t idx = 0;"
    },
    {
        "line": 5,
        "fullcodeline": "assert(len > 4);"
    },
    {
        "line": 6,
        "fullcodeline": "uint32 num_properties = GETINT32(buf+idx);"
    },
    {
        "line": 9,
        "fullcodeline": "idx += 4;"
    },
    {
        "line": 175,
        "fullcodeline": "attrs[i] = NULL;"
    },
    {
        "line": 11,
        "fullcodeline": "if (!attrs) return NULL;"
    },
    {
        "line": 12,
        "fullcodeline": "for (i = 0; i < num_properties; i++)"
    },
    {
        "line": 14,
        "fullcodeline": "MAPI_Attr* a = attrs[i] = CHECKED_XCALLOC(MAPI_Attr, 1);"
    },
    {
        "line": 15,
        "fullcodeline": "MAPI_Value* v = NULL;"
    },
    {
        "line": 17,
        "fullcodeline": "CHECKINT16(idx, len); a->type = GETINT16(buf+idx); idx += 2;"
    },
    {
        "line": 18,
        "fullcodeline": "CHECKINT16(idx, len); a->name = GETINT16(buf+idx); idx += 2;"
    },
    {
        "line": 85,
        "fullcodeline": "v = alloc_mapi_values (a);"
    },
    {
        "line": 21,
        "fullcodeline": "if (a->name & GUID_EXISTS_FLAG)"
    },
    {
        "line": 64,
        "fullcodeline": "if (a->type & MULTI_VALUE_FLAG ||"
    },
    {
        "line": 79,
        "fullcodeline": "if (a->type & MULTI_VALUE_FLAG)"
    },
    {
        "line": 87,
        "fullcodeline": "for (j = 0; j < a->num_values; j++)"
    },
    {
        "line": 24,
        "fullcodeline": "a->guid = CHECKED_XMALLOC(GUID, 1);"
    },
    {
        "line": 25,
        "fullcodeline": "copy_guid_from_buf(a->guid, buf+idx, len);"
    },
    {
        "line": 26,
        "fullcodeline": "idx += sizeof (GUID);"
    },
    {
        "line": 28,
        "fullcodeline": "CHECKINT32(idx, len); a->num_names = GETINT32(buf+idx); idx += 4;"
    },
    {
        "line": 68,
        "fullcodeline": "a->type == szMAPI_BINARY)"
    },
    {
        "line": 70,
        "fullcodeline": "CHECKINT32(idx, len); a->num_values = GETINT32(buf+idx);"
    },
    {
        "line": 71,
        "fullcodeline": "idx += 4;"
    },
    {
        "line": 81,
        "fullcodeline": "a->type -= MULTI_VALUE_FLAG;"
    },
    {
        "line": 29,
        "fullcodeline": "if (a->num_names > 0)"
    },
    {
        "line": 67,
        "fullcodeline": "a->type == szMAPI_OBJECT ||"
    },
    {
        "line": 75,
        "fullcodeline": "a->num_values = 1;"
    },
    {
        "line": 34,
        "fullcodeline": "a->names = CHECKED_XCALLOC(VarLenData, a->num_names);"
    },
    {
        "line": 66,
        "fullcodeline": "a->type == szMAPI_UNICODE_STRING ||"
    },
    {
        "line": 92,
        "fullcodeline": "v->len = 2;"
    },
    {
        "line": 93,
        "fullcodeline": "CHECKINT16(idx, len); v->data.bytes2 = GETINT16(buf+idx);"
    },
    {
        "line": 94,
        "fullcodeline": "idx += 4;\t/* assume padding of 2, advance by 4! */"
    },
    {
        "line": 98,
        "fullcodeline": "v->len = 4;"
    },
    {
        "line": 99,
        "fullcodeline": "CHECKINT32(idx, len); v->data.bytes4 = GETINT32(buf+idx);"
    },
    {
        "line": 100,
        "fullcodeline": "idx += 4;"
    },
    {
        "line": 101,
        "fullcodeline": "v++;"
    },
    {
        "line": 106,
        "fullcodeline": "v->len = 4;"
    },
    {
        "line": 107,
        "fullcodeline": "CHECKINT32(idx, len); v->data.bytes4 = GETINT32(buf+idx);"
    },
    {
        "line": 108,
        "fullcodeline": "idx += v->len;"
    },
    {
        "line": 112,
        "fullcodeline": "v->len = 8;"
    },
    {
        "line": 113,
        "fullcodeline": "CHECKINT32(idx, len); v->data.bytes8[0] = GETINT32(buf+idx);"
    },
    {
        "line": 114,
        "fullcodeline": "CHECKINT32(idx+4, len); v->data.bytes8[1] = GETINT32(buf+idx+4);"
    },
    {
        "line": 115,
        "fullcodeline": "idx += 8;"
    },
    {
        "line": 116,
        "fullcodeline": "v++;"
    },
    {
        "line": 123,
        "fullcodeline": "v->len = 8;"
    },
    {
        "line": 124,
        "fullcodeline": "CHECKINT32(idx, len); v->data.bytes8[0] = GETINT32(buf+idx);"
    },
    {
        "line": 125,
        "fullcodeline": "CHECKINT32(idx+4, len); v->data.bytes8[1] = GETINT32(buf+idx+4);"
    },
    {
        "line": 126,
        "fullcodeline": "idx += v->len;"
    },
    {
        "line": 131,
        "fullcodeline": "copy_guid_from_buf(&v->data.guid, buf+idx, len);"
    },
    {
        "line": 132,
        "fullcodeline": "idx += v->len;"
    },
    {
        "line": 139,
        "fullcodeline": "CHECKINT32(idx, len); v->len = GETINT32(buf+idx); idx += 4;"
    },
    {
        "line": 151,
        "fullcodeline": "idx += pad_to_4byte(v->len);"
    },
    {
        "line": 152,
        "fullcodeline": "v++;"
    },
    {
        "line": 158,
        "fullcodeline": "fprintf (stderr,"
    },
    {
        "line": 165,
        "fullcodeline": "fprintf (stderr,"
    },
    {
        "line": 172,
        "fullcodeline": "if (DEBUG_ON) mapi_attr_dump (attrs[i]);"
    },
    {
        "line": 36,
        "fullcodeline": "for (i = 0; i < a->num_names; i++)"
    },
    {
        "line": 56,
        "fullcodeline": "CHECKINT32(idx, len); a->name = GETINT32(buf+idx); idx+= 4;"
    },
    {
        "line": 65,
        "fullcodeline": "a->type == szMAPI_STRING ||"
    },
    {
        "line": 141,
        "fullcodeline": "if (a->type == szMAPI_UNICODE_STRING)"
    },
    {
        "line": 160,
        "fullcodeline": "if (!ENCODE_SKIP) exit (1);"
    },
    {
        "line": 167,
        "fullcodeline": "if (!ENCODE_SKIP) exit (1);"
    },
    {
        "line": 40,
        "fullcodeline": "CHECKINT32(idx, len); a->names[i].len = GETINT32(buf+idx); idx += 4;"
    },
    {
        "line": 50,
        "fullcodeline": "idx += pad_to_4byte(a->names[i].len);"
    },
    {
        "line": 143,
        "fullcodeline": "v->data.buf = (unsigned char*)unicode_to_utf8(v->len, buf+idx);"
    },
    {
        "line": 45,
        "fullcodeline": "for (j = 0; j < (a->names[i].len >> 1); j++)"
    },
    {
        "line": 148,
        "fullcodeline": "memmove (v->data.buf, buf+idx, v->len);"
    },
    {
        "line": 46,
        "fullcodeline": "a->names[i].data[j] = (buf+idx)[j*2];"
    }
]