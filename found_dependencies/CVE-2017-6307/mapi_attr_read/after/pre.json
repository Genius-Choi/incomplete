[
    {
        "line": 3,
        "fullcodeline": "size_t idx = 0;"
    },
    {
        "line": 5,
        "fullcodeline": "assert(len > 4);"
    },
    {
        "line": 6,
        "fullcodeline": "uint32 num_properties = GETINT32(buf+idx);"
    },
    {
        "line": 7,
        "fullcodeline": "assert((num_properties+1) != 0);"
    },
    {
        "line": 10,
        "fullcodeline": "idx += 4;"
    },
    {
        "line": 180,
        "fullcodeline": "attrs[i] = NULL;"
    },
    {
        "line": 12,
        "fullcodeline": "if (!attrs) return NULL;"
    },
    {
        "line": 13,
        "fullcodeline": "for (i = 0; i < num_properties; i++)"
    },
    {
        "line": 15,
        "fullcodeline": "MAPI_Attr* a = attrs[i] = CHECKED_XCALLOC(MAPI_Attr, 1);"
    },
    {
        "line": 18,
        "fullcodeline": "CHECKINT16(idx, len); a->type = GETINT16(buf+idx); idx += 2;"
    },
    {
        "line": 19,
        "fullcodeline": "CHECKINT16(idx, len); a->name = GETINT16(buf+idx); idx += 2;"
    },
    {
        "line": 87,
        "fullcodeline": "v = alloc_mapi_values (a);"
    },
    {
        "line": 22,
        "fullcodeline": "if (a->name & GUID_EXISTS_FLAG)"
    },
    {
        "line": 81,
        "fullcodeline": "if (a->type & MULTI_VALUE_FLAG)"
    },
    {
        "line": 89,
        "fullcodeline": "for (j = 0; j < a->num_values; j++)"
    },
    {
        "line": 25,
        "fullcodeline": "a->guid = CHECKED_XMALLOC(GUID, 1);"
    },
    {
        "line": 26,
        "fullcodeline": "copy_guid_from_buf(a->guid, buf+idx, len);"
    },
    {
        "line": 27,
        "fullcodeline": "idx += sizeof (GUID);"
    },
    {
        "line": 29,
        "fullcodeline": "CHECKINT32(idx, len); a->num_names = GETINT32(buf+idx); idx += 4;"
    },
    {
        "line": 66,
        "fullcodeline": "if (a->type & MULTI_VALUE_FLAG ||"
    },
    {
        "line": 70,
        "fullcodeline": "a->type == szMAPI_BINARY)"
    },
    {
        "line": 72,
        "fullcodeline": "CHECKINT32(idx, len); a->num_values = GETINT32(buf+idx);"
    },
    {
        "line": 73,
        "fullcodeline": "idx += 4;"
    },
    {
        "line": 83,
        "fullcodeline": "a->type -= MULTI_VALUE_FLAG;"
    },
    {
        "line": 30,
        "fullcodeline": "if (a->num_names > 0)"
    },
    {
        "line": 69,
        "fullcodeline": "a->type == szMAPI_OBJECT ||"
    },
    {
        "line": 77,
        "fullcodeline": "a->num_values = 1;"
    },
    {
        "line": 35,
        "fullcodeline": "a->names = CHECKED_XCALLOC(VarLenData, a->num_names);"
    },
    {
        "line": 68,
        "fullcodeline": "a->type == szMAPI_UNICODE_STRING ||"
    },
    {
        "line": 95,
        "fullcodeline": "CHECKINT16(idx, len); v->data.bytes2 = GETINT16(buf+idx);"
    },
    {
        "line": 96,
        "fullcodeline": "idx += 4;\t/* assume padding of 2, advance by 4! */"
    },
    {
        "line": 100,
        "fullcodeline": "v->len = 4;"
    },
    {
        "line": 101,
        "fullcodeline": "CHECKINT32(idx, len); v->data.bytes4 = GETINT32(buf+idx);"
    },
    {
        "line": 102,
        "fullcodeline": "idx += 4;"
    },
    {
        "line": 103,
        "fullcodeline": "v++;"
    },
    {
        "line": 108,
        "fullcodeline": "v->len = 4;"
    },
    {
        "line": 109,
        "fullcodeline": "CHECKINT32(idx, len); v->data.bytes4 = GETINT32(buf+idx);"
    },
    {
        "line": 110,
        "fullcodeline": "idx += v->len;"
    },
    {
        "line": 114,
        "fullcodeline": "v->len = 8;"
    },
    {
        "line": 115,
        "fullcodeline": "CHECKINT32(idx, len); v->data.bytes8[0] = GETINT32(buf+idx);"
    },
    {
        "line": 116,
        "fullcodeline": "CHECKINT32(idx+4, len); v->data.bytes8[1] = GETINT32(buf+idx+4);"
    },
    {
        "line": 117,
        "fullcodeline": "idx += 8;"
    },
    {
        "line": 118,
        "fullcodeline": "v++;"
    },
    {
        "line": 125,
        "fullcodeline": "v->len = 8;"
    },
    {
        "line": 126,
        "fullcodeline": "CHECKINT32(idx, len); v->data.bytes8[0] = GETINT32(buf+idx);"
    },
    {
        "line": 127,
        "fullcodeline": "CHECKINT32(idx+4, len); v->data.bytes8[1] = GETINT32(buf+idx+4);"
    },
    {
        "line": 128,
        "fullcodeline": "idx += v->len;"
    },
    {
        "line": 132,
        "fullcodeline": "v->len = sizeof (GUID);"
    },
    {
        "line": 133,
        "fullcodeline": "copy_guid_from_buf(&v->data.guid, buf+idx, len);"
    },
    {
        "line": 134,
        "fullcodeline": "idx += v->len;"
    },
    {
        "line": 141,
        "fullcodeline": "CHECKINT32(idx, len); v->len = GETINT32(buf+idx); idx += 4;"
    },
    {
        "line": 156,
        "fullcodeline": "idx += pad_to_4byte(v->len);"
    },
    {
        "line": 157,
        "fullcodeline": "v++;"
    },
    {
        "line": 37,
        "fullcodeline": "for (i = 0; i < a->num_names; i++)"
    },
    {
        "line": 58,
        "fullcodeline": "CHECKINT32(idx, len); a->name = GETINT32(buf+idx); idx+= 4;"
    },
    {
        "line": 67,
        "fullcodeline": "a->type == szMAPI_STRING ||"
    },
    {
        "line": 143,
        "fullcodeline": "assert(v->len + idx <= len);"
    },
    {
        "line": 145,
        "fullcodeline": "if (a->type == szMAPI_UNICODE_STRING)"
    },
    {
        "line": 41,
        "fullcodeline": "CHECKINT32(idx, len); a->names[i].len = GETINT32(buf+idx); idx += 4;"
    },
    {
        "line": 52,
        "fullcodeline": "idx += pad_to_4byte(a->names[i].len);"
    },
    {
        "line": 46,
        "fullcodeline": "assert((idx+(a->names[i].len*2)) <= len);"
    },
    {
        "line": 47,
        "fullcodeline": "for (j = 0; j < (a->names[i].len >> 1); j++)"
    },
    {
        "line": 147,
        "fullcodeline": "assert(v->len != 0);"
    },
    {
        "line": 153,
        "fullcodeline": "memmove (v->data.buf, buf+idx, v->len);"
    },
    {
        "line": 148,
        "fullcodeline": "v->data.buf = (unsigned char*)unicode_to_utf8(v->len, buf+idx);"
    },
    {
        "line": 48,
        "fullcodeline": "a->names[i].data[j] = (buf+idx)[j*2];"
    }
]