[
    {
        "line": 2,
        "fullcodeline": "if (Qnil == (VALUE)req->env) {"
    },
    {
        "line": 44,
        "fullcodeline": "return (VALUE)req->env;"
    },
    {
        "line": 3,
        "fullcodeline": "volatile VALUE\tenv = rb_hash_new();"
    },
    {
        "line": 9,
        "fullcodeline": "rb_hash_aset(env, request_method_val, req_method(req));"
    },
    {
        "line": 10,
        "fullcodeline": "rb_hash_aset(env, script_name_val, req_script_name(req));"
    },
    {
        "line": 11,
        "fullcodeline": "rb_hash_aset(env, path_info_val, req_path_info(req));"
    },
    {
        "line": 12,
        "fullcodeline": "rb_hash_aset(env, query_string_val, req_query_string(req));"
    },
    {
        "line": 13,
        "fullcodeline": "rb_hash_aset(env, server_name_val, req_server_name(req));"
    },
    {
        "line": 14,
        "fullcodeline": "rb_hash_aset(env, server_port_val, req_server_port(req));"
    },
    {
        "line": 15,
        "fullcodeline": "fill_headers(req, env);"
    },
    {
        "line": 16,
        "fullcodeline": "rb_hash_aset(env, rack_version_val, rack_version_val_val);"
    },
    {
        "line": 17,
        "fullcodeline": "rb_hash_aset(env, rack_url_scheme_val, req_rack_url_scheme(req));"
    },
    {
        "line": 18,
        "fullcodeline": "rb_hash_aset(env, rack_input_val, req_rack_input(req));"
    },
    {
        "line": 19,
        "fullcodeline": "rb_hash_aset(env, rack_errors_val, req_rack_errors(req));"
    },
    {
        "line": 20,
        "fullcodeline": "rb_hash_aset(env, rack_multithread_val, req_rack_multithread(req));"
    },
    {
        "line": 21,
        "fullcodeline": "rb_hash_aset(env, rack_multiprocess_val, Qfalse);"
    },
    {
        "line": 22,
        "fullcodeline": "rb_hash_aset(env, rack_run_once_val, Qfalse);"
    },
    {
        "line": 23,
        "fullcodeline": "rb_hash_aset(env, rack_logger_val, req_rack_logger(req));"
    },
    {
        "line": 24,
        "fullcodeline": "rb_hash_aset(env, rack_upgrade_val, req_rack_upgrade(req));"
    },
    {
        "line": 25,
        "fullcodeline": "rb_hash_aset(env, rack_hijackq_val, Qtrue);"
    },
    {
        "line": 34,
        "fullcodeline": "rb_hash_aset(env, rack_hijack_val, self);"
    },
    {
        "line": 35,
        "fullcodeline": "rb_hash_aset(env, rack_hijack_io_val, Qnil);"
    },
    {
        "line": 42,
        "fullcodeline": "req->env = (void*)env;"
    },
    {
        "line": 38,
        "fullcodeline": "volatile VALUE\teh = agoo_early_hints_new(req);"
    },
    {
        "line": 40,
        "fullcodeline": "rb_hash_aset(env, early_hints_val, eh);"
    }
]