[
    {
        "line": 2,
        "fullcodeline": "int\t\t\toptval = 1;"
    },
    {
        "line": 3,
        "fullcodeline": "struct pollfd\tpa[100];"
    },
    {
        "line": 5,
        "fullcodeline": "struct _agooErr\terr = AGOO_ERR_INIT;"
    },
    {
        "line": 8,
        "fullcodeline": "int\t\t\tpcnt = 0;"
    },
    {
        "line": 9,
        "fullcodeline": "socklen_t\t\talen = 0;"
    },
    {
        "line": 12,
        "fullcodeline": "uint64_t\t\tcnt = 0;"
    },
    {
        "line": 20,
        "fullcodeline": "memset(&client_addr, 0, sizeof(client_addr));"
    },
    {
        "line": 21,
        "fullcodeline": "atomic_fetch_add(&agoo_server.running, 1);"
    },
    {
        "line": 79,
        "fullcodeline": "atomic_fetch_sub(&agoo_server.running, 1);"
    },
    {
        "line": 15,
        "fullcodeline": "for (b = agoo_server.binds, p = pa; NULL != b; b = b->next, p++, pcnt++) {"
    },
    {
        "line": 76,
        "fullcodeline": "for (b = agoo_server.binds; NULL != b; b = b->next) {"
    },
    {
        "line": 16,
        "fullcodeline": "p->fd = b->fd;"
    },
    {
        "line": 17,
        "fullcodeline": "p->events = POLLIN;"
    },
    {
        "line": 18,
        "fullcodeline": "p->revents = 0;"
    },
    {
        "line": 77,
        "fullcodeline": "agoo_bind_close(b);"
    },
    {
        "line": 23,
        "fullcodeline": "if (0 > (i = poll(pa, pcnt, 200))) {"
    },
    {
        "line": 31,
        "fullcodeline": "if (0 == i) { // nothing to read"
    },
    {
        "line": 34,
        "fullcodeline": "for (b = agoo_server.binds, p = pa; NULL != b; b = b->next, p++) {"
    },
    {
        "line": 27,
        "fullcodeline": "agoo_log_cat(&agoo_error_cat, \"Server polling error. %s.\", strerror(errno));"
    },
    {
        "line": 73,
        "fullcodeline": "p->revents = 0;"
    },
    {
        "line": 24,
        "fullcodeline": "if (EAGAIN == errno) {"
    },
    {
        "line": 35,
        "fullcodeline": "if (0 != (p->revents & POLLIN)) {"
    },
    {
        "line": 65,
        "fullcodeline": "if (0 != (p->revents & (POLLERR | POLLHUP | POLLNVAL))) {"
    },
    {
        "line": 71,
        "fullcodeline": "agoo_server.active = false;"
    },
    {
        "line": 36,
        "fullcodeline": "if (0 > (client_sock = accept(p->fd, (struct sockaddr*)&client_addr, &alen))) {"
    },
    {
        "line": 66,
        "fullcodeline": "if (0 != (p->revents & (POLLHUP | POLLNVAL))) {"
    },
    {
        "line": 37,
        "fullcodeline": "agoo_log_cat(&agoo_error_cat, \"Server with pid %d accept connection failed. %s.\", getpid(), strerror(errno));"
    },
    {
        "line": 67,
        "fullcodeline": "agoo_log_cat(&agoo_error_cat, \"Agoo server with pid %d socket on %s closed.\", getpid(), b->id);"
    },
    {
        "line": 69,
        "fullcodeline": "agoo_log_cat(&agoo_error_cat, \"Agoo server with pid %d socket on %s error.\", getpid(), b->id);"
    },
    {
        "line": 38,
        "fullcodeline": "} else if (NULL == (con = agoo_con_create(&err, client_sock, ++cnt, b))) {"
    },
    {
        "line": 39,
        "fullcodeline": "agoo_log_cat(&agoo_error_cat, \"Server with pid %d accept connection failed. %s.\", getpid(), err.msg);"
    },
    {
        "line": 40,
        "fullcodeline": "close(client_sock);"
    },
    {
        "line": 41,
        "fullcodeline": "cnt--;"
    },
    {
        "line": 42,
        "fullcodeline": "agoo_err_clear(&err);"
    },
    {
        "line": 51,
        "fullcodeline": "fcntl(client_sock, F_SETFL, O_NONBLOCK);"
    },
    {
        "line": 53,
        "fullcodeline": "setsockopt(client_sock, SOL_SOCKET, SO_KEEPALIVE, &optval, sizeof(optval));"
    },
    {
        "line": 54,
        "fullcodeline": "setsockopt(client_sock, IPPROTO_TCP, TCP_NODELAY, &optval, sizeof(optval));"
    },
    {
        "line": 55,
        "fullcodeline": "agoo_log_cat(&agoo_con_cat, \"Server with pid %d accepted connection %llu on %s [%d]\","
    },
    {
        "line": 58,
        "fullcodeline": "con_cnt = atomic_fetch_add(&agoo_server.con_cnt, 1);"
    },
    {
        "line": 62,
        "fullcodeline": "agoo_queue_push(&agoo_server.con_queue, (void*)con);"
    },
    {
        "line": 56,
        "fullcodeline": "getpid(), (unsigned long long)cnt, b->id, con->sock);"
    },
    {
        "line": 59,
        "fullcodeline": "if (agoo_server.loop_max > agoo_server.loop_cnt && agoo_server.loop_cnt * LOOP_UP < con_cnt) {"
    },
    {
        "line": 60,
        "fullcodeline": "add_con_loop();"
    }
]