[
    {
        "line": 6,
        "fullcodeline": "bigint *bir = NULL;"
    },
    {
        "line": 7,
        "fullcodeline": "uint8_t *block = (uint8_t *)malloc(sig_len);"
    },
    {
        "line": 10,
        "fullcodeline": "dat_bi = bi_import(ctx, sig, sig_len);"
    },
    {
        "line": 11,
        "fullcodeline": "ctx->mod_offset = BIGINT_M_OFFSET;"
    },
    {
        "line": 14,
        "fullcodeline": "decrypted_bi = bi_mod_power2(ctx, dat_bi, modulus, pub_exp);"
    },
    {
        "line": 16,
        "fullcodeline": "bi_export(ctx, decrypted_bi, block, sig_len);"
    },
    {
        "line": 17,
        "fullcodeline": "ctx->mod_offset = BIGINT_M_OFFSET;"
    },
    {
        "line": 19,
        "fullcodeline": "i = 10; /* start at the first possible non-padded byte */"
    },
    {
        "line": 21,
        "fullcodeline": "size = sig_len - i;"
    },
    {
        "line": 34,
        "fullcodeline": "free(block);"
    },
    {
        "line": 36,
        "fullcodeline": "bi_clear_cache(ctx);"
    },
    {
        "line": 20,
        "fullcodeline": "while (block[i++] && i < sig_len);"
    },
    {
        "line": 24,
        "fullcodeline": "if (size > 0)"
    },
    {
        "line": 27,
        "fullcodeline": "const uint8_t *sig_ptr = get_signature(&block[i], &len);"
    },
    {
        "line": 31,
        "fullcodeline": "bir = bi_import(ctx, sig_ptr, len);"
    }
]