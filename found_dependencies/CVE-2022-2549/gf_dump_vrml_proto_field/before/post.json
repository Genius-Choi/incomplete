[
    {
        "line": 6,
        "fullcodeline": "DUMP_IND(sdump);"
    },
    {
        "line": 7,
        "fullcodeline": "gf_fprintf(sdump->trace, \"<fieldValue name=\\\"%s\\\" \", field.name);"
    },
    {
        "line": 8,
        "fullcodeline": "if (gf_sg_vrml_is_sf_field(field.fieldType)) {"
    },
    {
        "line": 9,
        "fullcodeline": "if (field.fieldType == GF_SG_VRML_SFNODE) {"
    },
    {
        "line": 28,
        "fullcodeline": "GenMFField *mffield = (GenMFField *) field.far_ptr;"
    },
    {
        "line": 29,
        "fullcodeline": "sf_type = gf_sg_vrml_get_sf_type(field.fieldType);"
    },
    {
        "line": 10,
        "fullcodeline": "gf_fprintf(sdump->trace, \">\\n\");"
    },
    {
        "line": 11,
        "fullcodeline": "sdump->indent++;"
    },
    {
        "line": 13,
        "fullcodeline": "gf_dump_vrml_node(sdump, field.far_ptr ? *(GF_Node **)field.far_ptr : NULL, 0, NULL);"
    },
    {
        "line": 15,
        "fullcodeline": "sdump->indent--;"
    },
    {
        "line": 16,
        "fullcodeline": "DUMP_IND(sdump);"
    },
    {
        "line": 17,
        "fullcodeline": "gf_fprintf(sdump->trace, \"</fieldValue>\\n\");"
    },
    {
        "line": 31,
        "fullcodeline": "if ((field.eventType==GF_SG_EVENT_FIELD) || (field.eventType==GF_SG_EVENT_EXPOSED_FIELD)) {"
    },
    {
        "line": 12,
        "fullcodeline": "if (!sdump->X3DDump) gf_fprintf(sdump->trace, \"<node>\");"
    },
    {
        "line": 14,
        "fullcodeline": "if (!sdump->X3DDump) gf_fprintf(sdump->trace, \"</node>\");"
    },
    {
        "line": 24,
        "fullcodeline": "gf_dump_vrml_sffield(sdump, field.fieldType, field.far_ptr, 0, node);"
    },
    {
        "line": 25,
        "fullcodeline": "gf_fprintf(sdump->trace, \"\\\"/>\\n\");"
    },
    {
        "line": 32,
        "fullcodeline": "if (sf_type == GF_SG_VRML_SFNODE) {"
    },
    {
        "line": 20,
        "fullcodeline": "gf_fprintf(sdump->trace, \" value=\\\"\");"
    },
    {
        "line": 34,
        "fullcodeline": "gf_fprintf(sdump->trace, \">\\n\");"
    },
    {
        "line": 35,
        "fullcodeline": "sdump->indent++;"
    },
    {
        "line": 42,
        "fullcodeline": "sdump->indent--;"
    },
    {
        "line": 43,
        "fullcodeline": "DUMP_IND(sdump);"
    },
    {
        "line": 44,
        "fullcodeline": "gf_fprintf(sdump->trace, \"</fieldValue>\\n\");"
    },
    {
        "line": 22,
        "fullcodeline": "gf_fprintf(sdump->trace, \" %s=\\\"\", GetXMTFieldTypeValueName(field.fieldType));"
    },
    {
        "line": 36,
        "fullcodeline": "if (!sdump->X3DDump) gf_fprintf(sdump->trace, \"<nodes>\");"
    },
    {
        "line": 41,
        "fullcodeline": "if (!sdump->X3DDump) gf_fprintf(sdump->trace, \"</nodes>\");"
    },
    {
        "line": 60,
        "fullcodeline": "gf_fprintf(sdump->trace, \"\\\"/>\\n\");"
    },
    {
        "line": 33,
        "fullcodeline": "GF_ChildNodeItem *list = *(GF_ChildNodeItem **)field.far_ptr;"
    },
    {
        "line": 38,
        "fullcodeline": "gf_dump_vrml_node(sdump, list->node, 1, NULL);"
    },
    {
        "line": 39,
        "fullcodeline": "list = list->next;"
    },
    {
        "line": 47,
        "fullcodeline": "gf_fprintf(sdump->trace, \" value=\\\"\");"
    },
    {
        "line": 49,
        "fullcodeline": "gf_fprintf(sdump->trace, \" %s=\\\"\", GetXMTFieldTypeValueName(field.fieldType));"
    },
    {
        "line": 52,
        "fullcodeline": "for (i=0; i<mffield->count; i++) {"
    },
    {
        "line": 54,
        "fullcodeline": "if (field.fieldType != GF_SG_VRML_MFNODE) {"
    },
    {
        "line": 53,
        "fullcodeline": "if (i) gf_fprintf(sdump->trace, \" \");"
    },
    {
        "line": 55,
        "fullcodeline": "gf_sg_vrml_mf_get_item(field.far_ptr, field.fieldType, &slot_ptr, i);"
    },
    {
        "line": 56,
        "fullcodeline": "gf_dump_vrml_sffield(sdump, sf_type, slot_ptr, (mffield->count>1) ? 1 : 0, node);"
    }
]