[
    {
        "line": 8,
        "fullcodeline": "p->elements = xcalloc(p->sem_nsems, sizeof(struct sem_elem));"
    },
    {
        "line": 5,
        "fullcodeline": "if (!p || !p->sem_nsems || p->sem_perm.id < 0)"
    },
    {
        "line": 10,
        "fullcodeline": "for (i = 0; i < p->sem_nsems; i++) {"
    },
    {
        "line": 11,
        "fullcodeline": "struct sem_elem *e = &p->elements[i];"
    },
    {
        "line": 12,
        "fullcodeline": "union semun arg = { .val = 0 };"
    },
    {
        "line": 14,
        "fullcodeline": "e->semval = semctl(p->sem_perm.id, i, GETVAL, arg);"
    },
    {
        "line": 18,
        "fullcodeline": "e->ncount = semctl(p->sem_perm.id, i, GETNCNT, arg);"
    },
    {
        "line": 22,
        "fullcodeline": "e->zcount = semctl(p->sem_perm.id, i, GETZCNT, arg);"
    },
    {
        "line": 26,
        "fullcodeline": "e->pid = semctl(p->sem_perm.id, i, GETPID, arg);"
    },
    {
        "line": 16,
        "fullcodeline": "err(EXIT_FAILURE, _(\"%s failed\"), \"semctl(GETVAL)\");"
    },
    {
        "line": 20,
        "fullcodeline": "err(EXIT_FAILURE, _(\"%s failed\"), \"semctl(GETNCNT)\");"
    },
    {
        "line": 24,
        "fullcodeline": "err(EXIT_FAILURE, _(\"%s failed\"), \"semctl(GETZCNT)\");"
    },
    {
        "line": 28,
        "fullcodeline": "err(EXIT_FAILURE, _(\"%s failed\"), \"semctl(GETPID)\");"
    }
]