[
    {
        "line": 4,
        "fullcodeline": "explicit_vr[MagickPathExtent],"
    },
    {
        "line": 5,
        "fullcodeline": "implicit_vr[MagickPathExtent],"
    },
    {
        "line": 6,
        "fullcodeline": "magick[MagickPathExtent],"
    },
    {
        "line": 7,
        "fullcodeline": "photometric[MagickPathExtent];"
    },
    {
        "line": 82,
        "fullcodeline": "assert(image_info != (const ImageInfo *) NULL);"
    },
    {
        "line": 83,
        "fullcodeline": "assert(image_info->signature == MagickCoreSignature);"
    },
    {
        "line": 87,
        "fullcodeline": "assert(exception != (ExceptionInfo *) NULL);"
    },
    {
        "line": 88,
        "fullcodeline": "assert(exception->signature == MagickCoreSignature);"
    },
    {
        "line": 89,
        "fullcodeline": "image=AcquireImage(image_info,exception);"
    },
    {
        "line": 90,
        "fullcodeline": "status=OpenBlob(image_info,image,ReadBinaryBlobMode,exception);"
    },
    {
        "line": 96,
        "fullcodeline": "image->depth=8UL;"
    },
    {
        "line": 97,
        "fullcodeline": "image->endian=LSBEndian;"
    },
    {
        "line": 104,
        "fullcodeline": "(void) ResetMagickMemory(stream_info,0,sizeof(*stream_info));"
    },
    {
        "line": 105,
        "fullcodeline": "count=ReadBlob(image,128,(unsigned char *) magick);"
    },
    {
        "line": 108,
        "fullcodeline": "count=ReadBlob(image,4,(unsigned char *) magick);"
    },
    {
        "line": 118,
        "fullcodeline": "(void) CopyMagickString(photometric,\"MONOCHROME1 \",MagickPathExtent);"
    },
    {
        "line": 119,
        "fullcodeline": "bits_allocated=8;"
    },
    {
        "line": 120,
        "fullcodeline": "bytes_per_pixel=1;"
    },
    {
        "line": 121,
        "fullcodeline": "polarity=MagickFalse;"
    },
    {
        "line": 122,
        "fullcodeline": "data=(unsigned char *) NULL;"
    },
    {
        "line": 123,
        "fullcodeline": "depth=8;"
    },
    {
        "line": 124,
        "fullcodeline": "element=0;"
    },
    {
        "line": 125,
        "fullcodeline": "explicit_vr[2]='\\0';"
    },
    {
        "line": 126,
        "fullcodeline": "explicit_file=MagickFalse;"
    },
    {
        "line": 127,
        "fullcodeline": "colors=0;"
    },
    {
        "line": 128,
        "fullcodeline": "redmap=(int *) NULL;"
    },
    {
        "line": 129,
        "fullcodeline": "greenmap=(int *) NULL;"
    },
    {
        "line": 130,
        "fullcodeline": "bluemap=(int *) NULL;"
    },
    {
        "line": 131,
        "fullcodeline": "graymap=(int *) NULL;"
    },
    {
        "line": 132,
        "fullcodeline": "height=0;"
    },
    {
        "line": 133,
        "fullcodeline": "max_value=255UL;"
    },
    {
        "line": 134,
        "fullcodeline": "mask=0xffff;"
    },
    {
        "line": 135,
        "fullcodeline": "number_scenes=1;"
    },
    {
        "line": 136,
        "fullcodeline": "rescale_intercept=0;"
    },
    {
        "line": 137,
        "fullcodeline": "rescale_slope=1;"
    },
    {
        "line": 138,
        "fullcodeline": "samples_per_pixel=1;"
    },
    {
        "line": 139,
        "fullcodeline": "scale=(Quantum *) NULL;"
    },
    {
        "line": 140,
        "fullcodeline": "sequence=MagickFalse;"
    },
    {
        "line": 141,
        "fullcodeline": "signed_data=(~0UL);"
    },
    {
        "line": 142,
        "fullcodeline": "significant_bits=0;"
    },
    {
        "line": 143,
        "fullcodeline": "use_explicit=MagickFalse;"
    },
    {
        "line": 144,
        "fullcodeline": "explicit_retry = MagickFalse;"
    },
    {
        "line": 145,
        "fullcodeline": "width=0;"
    },
    {
        "line": 146,
        "fullcodeline": "window_center=0;"
    },
    {
        "line": 147,
        "fullcodeline": "window_width=0;"
    },
    {
        "line": 762,
        "fullcodeline": "image->columns=(size_t) width;"
    },
    {
        "line": 763,
        "fullcodeline": "image->rows=(size_t) height;"
    },
    {
        "line": 1371,
        "fullcodeline": "stream_info=(DCMStreamInfo *) RelinquishMagickMemory(stream_info);"
    },
    {
        "line": 1382,
        "fullcodeline": "(void) CloseBlob(image);"
    },
    {
        "line": 84,
        "fullcodeline": "if (image_info->debug != MagickFalse)"
    },
    {
        "line": 91,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 102,
        "fullcodeline": "if (stream_info == (DCMStreamInfo *) NULL)"
    },
    {
        "line": 106,
        "fullcodeline": "if (count != 128)"
    },
    {
        "line": 109,
        "fullcodeline": "if ((count != 4) || (LocaleNCompare(magick,\"DICM\",4) != 0))"
    },
    {
        "line": 148,
        "fullcodeline": "for (group=0; (group != 0x7FE0) || (element != 0x0010) ||"
    },
    {
        "line": 760,
        "fullcodeline": "if ((width == 0) || (height == 0))"
    },
    {
        "line": 764,
        "fullcodeline": "if (signed_data == 0xffff)"
    },
    {
        "line": 766,
        "fullcodeline": "if ((image->compression == JPEGCompression) ||"
    },
    {
        "line": 887,
        "fullcodeline": "if (depth != (1UL*MAGICKCORE_QUANTUM_DEPTH))"
    },
    {
        "line": 906,
        "fullcodeline": "if (image->compression == RLECompression)"
    },
    {
        "line": 939,
        "fullcodeline": "for (scene=0; scene < (ssize_t) number_scenes; scene++)"
    },
    {
        "line": 1368,
        "fullcodeline": "if (stream_info->offsets != (ssize_t *) NULL)"
    },
    {
        "line": 1372,
        "fullcodeline": "if (scale != (Quantum *) NULL)"
    },
    {
        "line": 1374,
        "fullcodeline": "if (graymap != (int *) NULL)"
    },
    {
        "line": 1376,
        "fullcodeline": "if (bluemap != (int *) NULL)"
    },
    {
        "line": 1378,
        "fullcodeline": "if (greenmap != (int *) NULL)"
    },
    {
        "line": 1380,
        "fullcodeline": "if (redmap != (int *) NULL)"
    },
    {
        "line": 1383,
        "fullcodeline": "return(GetFirstImageInList(image));"
    },
    {
        "line": 85,
        "fullcodeline": "(void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\","
    },
    {
        "line": 93,
        "fullcodeline": "image=DestroyImageList(image);"
    },
    {
        "line": 103,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 107,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 111,
        "fullcodeline": "offset=SeekBlob(image,0L,SEEK_SET);"
    },
    {
        "line": 149,
        "fullcodeline": "(sequence != MagickFalse); )"
    },
    {
        "line": 154,
        "fullcodeline": "image->offset=(ssize_t) TellBlob(image);"
    },
    {
        "line": 155,
        "fullcodeline": "group=ReadBlobLSBShort(image);"
    },
    {
        "line": 156,
        "fullcodeline": "element=ReadBlobLSBShort(image);"
    },
    {
        "line": 162,
        "fullcodeline": "quantum=0;"
    },
    {
        "line": 169,
        "fullcodeline": "(void) CopyMagickString(implicit_vr,dicom_info[i].vr,MagickPathExtent);"
    },
    {
        "line": 170,
        "fullcodeline": "count=ReadBlob(image,2,(unsigned char *) explicit_vr);"
    },
    {
        "line": 180,
        "fullcodeline": "use_explicit=((group == 0x0002) && (explicit_retry == MagickFalse)) ||"
    },
    {
        "line": 206,
        "fullcodeline": "datum=0;"
    },
    {
        "line": 222,
        "fullcodeline": "quantum=0;"
    },
    {
        "line": 223,
        "fullcodeline": "length=1;"
    },
    {
        "line": 277,
        "fullcodeline": "data=(unsigned char *) NULL;"
    },
    {
        "line": 761,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 765,
        "fullcodeline": "signed_data=(size_t) (significant_bits == 16 ? 1 : 0);"
    },
    {
        "line": 767,
        "fullcodeline": "(image->compression == JPEG2000Compression))"
    },
    {
        "line": 789,
        "fullcodeline": "tag=(ReadBlobLSBShort(image) << 16) | ReadBlobLSBShort(image);"
    },
    {
        "line": 790,
        "fullcodeline": "(void) tag;"
    },
    {
        "line": 791,
        "fullcodeline": "length=(size_t) ReadBlobLSBLong(image);"
    },
    {
        "line": 792,
        "fullcodeline": "stream_info->offset_count=length >> 2;"
    },
    {
        "line": 811,
        "fullcodeline": "read_info=CloneImageInfo(image_info);"
    },
    {
        "line": 812,
        "fullcodeline": "SetImageInfoBlob(read_info,(void *) NULL,0);"
    },
    {
        "line": 813,
        "fullcodeline": "images=NewImageList();"
    },
    {
        "line": 883,
        "fullcodeline": "read_info=DestroyImageInfo(read_info);"
    },
    {
        "line": 884,
        "fullcodeline": "image=DestroyImage(image);"
    },
    {
        "line": 898,
        "fullcodeline": "length=(size_t) (GetQuantumRange(depth)+1);"
    },
    {
        "line": 899,
        "fullcodeline": "scale=(Quantum *) AcquireQuantumMemory(length,sizeof(*scale));"
    },
    {
        "line": 902,
        "fullcodeline": "range=GetQuantumRange(depth);"
    },
    {
        "line": 919,
        "fullcodeline": "tag=(ReadBlobLSBShort(image) << 16) | ReadBlobLSBShort(image);"
    },
    {
        "line": 920,
        "fullcodeline": "(void) tag;"
    },
    {
        "line": 921,
        "fullcodeline": "length=(size_t) ReadBlobLSBLong(image);"
    },
    {
        "line": 922,
        "fullcodeline": "stream_info->offset_count=length >> 2;"
    },
    {
        "line": 943,
        "fullcodeline": "image->columns=(size_t) width;"
    },
    {
        "line": 944,
        "fullcodeline": "image->rows=(size_t) height;"
    },
    {
        "line": 945,
        "fullcodeline": "image->depth=depth;"
    },
    {
        "line": 946,
        "fullcodeline": "status=SetImageExtent(image,image->columns,image->rows,exception);"
    },
    {
        "line": 949,
        "fullcodeline": "image->colorspace=RGBColorspace;"
    },
    {
        "line": 1369,
        "fullcodeline": "stream_info->offsets=(ssize_t *)"
    },
    {
        "line": 1373,
        "fullcodeline": "scale=(Quantum *) RelinquishMagickMemory(scale);"
    },
    {
        "line": 1375,
        "fullcodeline": "graymap=(int *) RelinquishMagickMemory(graymap);"
    },
    {
        "line": 1377,
        "fullcodeline": "bluemap=(int *) RelinquishMagickMemory(bluemap);"
    },
    {
        "line": 1379,
        "fullcodeline": "greenmap=(int *) RelinquishMagickMemory(greenmap);"
    },
    {
        "line": 1381,
        "fullcodeline": "redmap=(int *) RelinquishMagickMemory(redmap);"
    },
    {
        "line": 94,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 112,
        "fullcodeline": "if (offset < 0)"
    },
    {
        "line": 157,
        "fullcodeline": "if ((group != 0x0002) && (image->endian == MSBEndian))"
    },
    {
        "line": 166,
        "fullcodeline": "for (i=0; dicom_info[i].group < 0xffff; i++)"
    },
    {
        "line": 171,
        "fullcodeline": "if (count != 2)"
    },
    {
        "line": 176,
        "fullcodeline": "if ((explicit_file == MagickFalse) && (group != 0x0002))"
    },
    {
        "line": 182,
        "fullcodeline": "if ((use_explicit != MagickFalse) && (strncmp(implicit_vr,\"xs\",2) == 0))"
    },
    {
        "line": 184,
        "fullcodeline": "if ((use_explicit == MagickFalse) || (strncmp(implicit_vr,\"!!\",2) == 0))"
    },
    {
        "line": 207,
        "fullcodeline": "if (quantum == 4)"
    },
    {
        "line": 224,
        "fullcodeline": "if (datum != 0)"
    },
    {
        "line": 250,
        "fullcodeline": "if (image_info->verbose != MagickFalse)"
    },
    {
        "line": 268,
        "fullcodeline": "if ((sequence == MagickFalse) && (group == 0x7FE0) && (element == 0x0010))"
    },
    {
        "line": 278,
        "fullcodeline": "if ((length == 1) && (quantum == 1))"
    },
    {
        "line": 324,
        "fullcodeline": "if ((unsigned int) ((group << 16) | element) == 0xFFFEE0DD)"
    },
    {
        "line": 332,
        "fullcodeline": "if (sequence != MagickFalse)"
    },
    {
        "line": 696,
        "fullcodeline": "if (data != (unsigned char *) NULL)"
    },
    {
        "line": 720,
        "fullcodeline": "if (image_info->verbose != MagickFalse)"
    },
    {
        "line": 751,
        "fullcodeline": "if (data != (unsigned char *) NULL)"
    },
    {
        "line": 753,
        "fullcodeline": "if (EOFBlob(image) != MagickFalse)"
    },
    {
        "line": 787,
        "fullcodeline": "for (i=0; i < (ssize_t) stream_info->remaining; i++)"
    },
    {
        "line": 788,
        "fullcodeline": "(void) ReadBlobByte(image);"
    },
    {
        "line": 793,
        "fullcodeline": "if (stream_info->offset_count != 0)"
    },
    {
        "line": 814,
        "fullcodeline": "for (scene=0; scene < (ssize_t) number_scenes; scene++)"
    },
    {
        "line": 885,
        "fullcodeline": "return(GetFirstImageInList(images));"
    },
    {
        "line": 900,
        "fullcodeline": "if (scale == (Quantum *) NULL)"
    },
    {
        "line": 903,
        "fullcodeline": "for (i=0; i <= (ssize_t) GetQuantumRange(depth); i++)"
    },
    {
        "line": 904,
        "fullcodeline": "scale[i]=ScaleAnyToQuantum((size_t) i,range);"
    },
    {
        "line": 917,
        "fullcodeline": "for (i=0; i < (ssize_t) stream_info->remaining; i++)"
    },
    {
        "line": 918,
        "fullcodeline": "(void) ReadBlobByte(image);"
    },
    {
        "line": 923,
        "fullcodeline": "if (stream_info->offset_count != 0)"
    },
    {
        "line": 941,
        "fullcodeline": "if (image_info->ping != MagickFalse)"
    },
    {
        "line": 947,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 950,
        "fullcodeline": "if ((image->colormap == (PixelInfo *) NULL) && (samples_per_pixel == 1))"
    },
    {
        "line": 995,
        "fullcodeline": "if (image->compression == RLECompression)"
    },
    {
        "line": 1021,
        "fullcodeline": "if ((samples_per_pixel > 1) && (image->interlace == PlaneInterlace))"
    },
    {
        "line": 1333,
        "fullcodeline": "if (SetImageGray(image,exception) != MagickFalse)"
    },
    {
        "line": 1335,
        "fullcodeline": "if (EOFBlob(image) != MagickFalse)"
    },
    {
        "line": 1344,
        "fullcodeline": "if (image_info->number_scenes != 0)"
    },
    {
        "line": 1347,
        "fullcodeline": "if (scene < (ssize_t) (number_scenes-1))"
    },
    {
        "line": 113,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 159,
        "fullcodeline": "group=(unsigned short) ((group << 8) | ((group >> 8) & 0xFF));"
    },
    {
        "line": 160,
        "fullcodeline": "element=(unsigned short) ((element << 8) | ((element >> 8) & 0xFF));"
    },
    {
        "line": 167,
        "fullcodeline": "if ((group == dicom_info[i].group) && (element == dicom_info[i].element))"
    },
    {
        "line": 172,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 177,
        "fullcodeline": "explicit_file=(isupper((unsigned char) *explicit_vr) != MagickFalse) &&"
    },
    {
        "line": 183,
        "fullcodeline": "(void) CopyMagickString(implicit_vr,explicit_vr,MagickPathExtent);"
    },
    {
        "line": 186,
        "fullcodeline": "offset=SeekBlob(image,(MagickOffsetType) -2,SEEK_CUR);"
    },
    {
        "line": 189,
        "fullcodeline": "quantum=4;"
    },
    {
        "line": 261,
        "fullcodeline": "(void) FormatLocaleFile(stdout,\"0x%04lX %4ld %s-%s (0x%04lx,0x%04lx)\","
    },
    {
        "line": 266,
        "fullcodeline": "(void) FormatLocaleFile(stdout,\": \");"
    },
    {
        "line": 279,
        "fullcodeline": "datum=ReadBlobByte(image);"
    },
    {
        "line": 328,
        "fullcodeline": "sequence=MagickFalse;"
    },
    {
        "line": 752,
        "fullcodeline": "data=(unsigned char *) RelinquishMagickMemory(data);"
    },
    {
        "line": 755,
        "fullcodeline": "ThrowFileException(exception,CorruptImageError,\"UnexpectedEndOfFile\","
    },
    {
        "line": 798,
        "fullcodeline": "stream_info->offsets=(ssize_t *) AcquireQuantumMemory("
    },
    {
        "line": 804,
        "fullcodeline": "offset=TellBlob(image);"
    },
    {
        "line": 817,
        "fullcodeline": "filename[MagickPathExtent];"
    },
    {
        "line": 834,
        "fullcodeline": "tag=(ReadBlobLSBShort(image) << 16) | ReadBlobLSBShort(image);"
    },
    {
        "line": 835,
        "fullcodeline": "length=(size_t) ReadBlobLSBLong(image);"
    },
    {
        "line": 840,
        "fullcodeline": "file=(FILE *) NULL;"
    },
    {
        "line": 841,
        "fullcodeline": "unique_file=AcquireUniqueFileResource(filename);"
    },
    {
        "line": 862,
        "fullcodeline": "(void) fclose(file);"
    },
    {
        "line": 863,
        "fullcodeline": "(void) FormatLocaleString(read_info->filename,MagickPathExtent,"
    },
    {
        "line": 868,
        "fullcodeline": "jpeg_image=ReadImage(read_info,exception);"
    },
    {
        "line": 881,
        "fullcodeline": "(void) RelinquishUniqueFileResource(filename);"
    },
    {
        "line": 901,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 928,
        "fullcodeline": "stream_info->offsets=(ssize_t *) AcquireQuantumMemory("
    },
    {
        "line": 934,
        "fullcodeline": "offset=TellBlob(image);"
    },
    {
        "line": 955,
        "fullcodeline": "one=1;"
    },
    {
        "line": 1005,
        "fullcodeline": "tag=(ReadBlobLSBShort(image) << 16) | ReadBlobLSBShort(image);"
    },
    {
        "line": 1006,
        "fullcodeline": "stream_info->remaining=(size_t) ReadBlobLSBLong(image);"
    },
    {
        "line": 1010,
        "fullcodeline": "stream_info->count=0;"
    },
    {
        "line": 1011,
        "fullcodeline": "stream_info->segment_count=ReadBlobLSBLong(image);"
    },
    {
        "line": 1019,
        "fullcodeline": "stream_info->remaining-=64;"
    },
    {
        "line": 1334,
        "fullcodeline": "(void) SetImageColorspace(image,GRAYColorspace,exception);"
    },
    {
        "line": 1337,
        "fullcodeline": "ThrowFileException(exception,CorruptImageError,\"UnexpectedEndOfFile\","
    },
    {
        "line": 1352,
        "fullcodeline": "AcquireNextImage(image_info,image,exception);"
    },
    {
        "line": 1358,
        "fullcodeline": "image=SyncNextImageInList(image);"
    },
    {
        "line": 1359,
        "fullcodeline": "status=SetImageProgress(image,LoadImagesTag,TellBlob(image),"
    },
    {
        "line": 1370,
        "fullcodeline": "RelinquishMagickMemory(stream_info->offsets);"
    },
    {
        "line": 181,
        "fullcodeline": "(explicit_file != MagickFalse) ? MagickTrue : MagickFalse;"
    },
    {
        "line": 187,
        "fullcodeline": "if (offset < 0)"
    },
    {
        "line": 196,
        "fullcodeline": "quantum=2;"
    },
    {
        "line": 209,
        "fullcodeline": "if (group == 0x0002)"
    },
    {
        "line": 226,
        "fullcodeline": "if ((strncmp(implicit_vr,\"SS\",2) == 0) ||"
    },
    {
        "line": 239,
        "fullcodeline": "if (datum != ~0)"
    },
    {
        "line": 255,
        "fullcodeline": "if (use_explicit == MagickFalse)"
    },
    {
        "line": 257,
        "fullcodeline": "for (i=0; dicom_info[i].description != (char *) NULL; i++)"
    },
    {
        "line": 264,
        "fullcodeline": "if (dicom_info[i].description != (char *) NULL)"
    },
    {
        "line": 270,
        "fullcodeline": "if (image_info->verbose != MagickFalse)"
    },
    {
        "line": 326,
        "fullcodeline": "if (data != (unsigned char *) NULL)"
    },
    {
        "line": 334,
        "fullcodeline": "if (data != (unsigned char *) NULL)"
    },
    {
        "line": 701,
        "fullcodeline": "for (i=0; dicom_info[i].description != (char *) NULL; i++)"
    },
    {
        "line": 705,
        "fullcodeline": "if (dicom_info[i].description != (char *) NULL)"
    },
    {
        "line": 722,
        "fullcodeline": "if (data == (unsigned char *) NULL)"
    },
    {
        "line": 800,
        "fullcodeline": "if (stream_info->offsets == (ssize_t *) NULL)"
    },
    {
        "line": 802,
        "fullcodeline": "for (i=0; i < (ssize_t) stream_info->offset_count; i++)"
    },
    {
        "line": 803,
        "fullcodeline": "stream_info->offsets[i]=(ssize_t) ReadBlobLSBSignedLong(image);"
    },
    {
        "line": 805,
        "fullcodeline": "for (i=0; i < (ssize_t) stream_info->offset_count; i++)"
    },
    {
        "line": 806,
        "fullcodeline": "stream_info->offsets[i]+=offset;"
    },
    {
        "line": 836,
        "fullcodeline": "if (tag == 0xFFFEE0DD)"
    },
    {
        "line": 838,
        "fullcodeline": "if (tag != 0xFFFEE000)"
    },
    {
        "line": 842,
        "fullcodeline": "if (unique_file != -1)"
    },
    {
        "line": 844,
        "fullcodeline": "if (file == (FILE *) NULL)"
    },
    {
        "line": 851,
        "fullcodeline": "for ( ; length != 0; length--)"
    },
    {
        "line": 865,
        "fullcodeline": "if (image->compression == JPEG2000Compression)"
    },
    {
        "line": 869,
        "fullcodeline": "if (jpeg_image != (Image *) NULL)"
    },
    {
        "line": 930,
        "fullcodeline": "if (stream_info->offsets == (ssize_t *) NULL)"
    },
    {
        "line": 932,
        "fullcodeline": "for (i=0; i < (ssize_t) stream_info->offset_count; i++)"
    },
    {
        "line": 933,
        "fullcodeline": "stream_info->offsets[i]=(ssize_t) ReadBlobLSBSignedLong(image);"
    },
    {
        "line": 935,
        "fullcodeline": "for (i=0; i < (ssize_t) stream_info->offset_count; i++)"
    },
    {
        "line": 936,
        "fullcodeline": "stream_info->offsets[i]+=offset;"
    },
    {
        "line": 956,
        "fullcodeline": "if (colors == 0)"
    },
    {
        "line": 958,
        "fullcodeline": "if (AcquireImageColormap(image,one << depth,exception) == MagickFalse)"
    },
    {
        "line": 960,
        "fullcodeline": "if (redmap != (int *) NULL)"
    },
    {
        "line": 968,
        "fullcodeline": "if (greenmap != (int *) NULL)"
    },
    {
        "line": 976,
        "fullcodeline": "if (bluemap != (int *) NULL)"
    },
    {
        "line": 984,
        "fullcodeline": "if (graymap != (int *) NULL)"
    },
    {
        "line": 1003,
        "fullcodeline": "for (i=0; i < (ssize_t) stream_info->remaining; i++)"
    },
    {
        "line": 1004,
        "fullcodeline": "(void) ReadBlobByte(image);"
    },
    {
        "line": 1007,
        "fullcodeline": "if ((tag != 0xFFFEE000) || (stream_info->remaining <= 64) ||"
    },
    {
        "line": 1012,
        "fullcodeline": "if (stream_info->segment_count > 1)"
    },
    {
        "line": 1017,
        "fullcodeline": "for (i=0; i < 15; i++)"
    },
    {
        "line": 1018,
        "fullcodeline": "stream_info->segments[i]=(ssize_t) ReadBlobLSBSignedLong(image);"
    },
    {
        "line": 1026,
        "fullcodeline": "for (i=0; i < (ssize_t) samples_per_pixel; i++)"
    },
    {
        "line": 1092,
        "fullcodeline": "byte=0;"
    },
    {
        "line": 1093,
        "fullcodeline": "i=0;"
    },
    {
        "line": 1096,
        "fullcodeline": "option=GetImageOption(image_info,\"dcm:display-range\");"
    },
    {
        "line": 1102,
        "fullcodeline": "(void) ResetMagickMemory(&pixel,0,sizeof(pixel));"
    },
    {
        "line": 1345,
        "fullcodeline": "if (image->scene >= (image_info->scene+image_info->number_scenes-1))"
    },
    {
        "line": 1353,
        "fullcodeline": "if (GetNextImageInList(image) == (Image *) NULL)"
    },
    {
        "line": 1361,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 188,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 197,
        "fullcodeline": "if ((strncmp(explicit_vr,\"OB\",2) == 0) ||"
    },
    {
        "line": 210,
        "fullcodeline": "datum=ReadBlobLSBSignedLong(image);"
    },
    {
        "line": 215,
        "fullcodeline": "if (quantum == 2)"
    },
    {
        "line": 227,
        "fullcodeline": "(strncmp(implicit_vr,\"US\",2) == 0))"
    },
    {
        "line": 228,
        "fullcodeline": "quantum=2;"
    },
    {
        "line": 240,
        "fullcodeline": "length=(size_t) datum/quantum;"
    },
    {
        "line": 256,
        "fullcodeline": "explicit_vr[0]='\\0';"
    },
    {
        "line": 258,
        "fullcodeline": "if ((group == dicom_info[i].group) &&"
    },
    {
        "line": 262,
        "fullcodeline": "(unsigned long) image->offset,(long) length,implicit_vr,explicit_vr,"
    },
    {
        "line": 263,
        "fullcodeline": "(unsigned long) group,(unsigned long) element);"
    },
    {
        "line": 265,
        "fullcodeline": "(void) FormatLocaleFile(stdout,\" %s\",dicom_info[i].description);"
    },
    {
        "line": 271,
        "fullcodeline": "(void) FormatLocaleFile(stdout,\"\\n\");"
    },
    {
        "line": 281,
        "fullcodeline": "if ((length == 1) && (quantum == 2))"
    },
    {
        "line": 327,
        "fullcodeline": "data=(unsigned char *) RelinquishMagickMemory(data);"
    },
    {
        "line": 335,
        "fullcodeline": "data=(unsigned char *) RelinquishMagickMemory(data);"
    },
    {
        "line": 702,
        "fullcodeline": "if ((group == dicom_info[i].group) &&"
    },
    {
        "line": 707,
        "fullcodeline": "attribute=AcquireString(\"dcm:\");"
    },
    {
        "line": 708,
        "fullcodeline": "(void) ConcatenateString(&attribute,dicom_info[i].description);"
    },
    {
        "line": 717,
        "fullcodeline": "attribute=DestroyString(attribute);"
    },
    {
        "line": 723,
        "fullcodeline": "(void) FormatLocaleFile(stdout,\"%d\\n\",datum);"
    },
    {
        "line": 801,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 839,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 843,
        "fullcodeline": "file=fdopen(unique_file,\"wb\");"
    },
    {
        "line": 846,
        "fullcodeline": "(void) RelinquishUniqueFileResource(filename);"
    },
    {
        "line": 847,
        "fullcodeline": "ThrowFileException(exception,FileOpenError,"
    },
    {
        "line": 853,
        "fullcodeline": "c=ReadBlobByte(image);"
    },
    {
        "line": 860,
        "fullcodeline": "(void) fputc(c,file);"
    },
    {
        "line": 866,
        "fullcodeline": "(void) FormatLocaleString(read_info->filename,MagickPathExtent,"
    },
    {
        "line": 871,
        "fullcodeline": "ResetImagePropertyIterator(image);"
    },
    {
        "line": 872,
        "fullcodeline": "property=GetNextImageProperty(image);"
    },
    {
        "line": 879,
        "fullcodeline": "AppendImageToList(&images,jpeg_image);"
    },
    {
        "line": 931,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 957,
        "fullcodeline": "colors=one << depth;"
    },
    {
        "line": 959,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 1008,
        "fullcodeline": "(EOFBlob(image) != MagickFalse))"
    },
    {
        "line": 1009,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 1014,
        "fullcodeline": "bytes_per_pixel=1;"
    },
    {
        "line": 1015,
        "fullcodeline": "depth=8;"
    },
    {
        "line": 1094,
        "fullcodeline": "if ((window_center != 0) && (window_width == 0))"
    },
    {
        "line": 1097,
        "fullcodeline": "if (option != (const char *) NULL)"
    },
    {
        "line": 1103,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 1217,
        "fullcodeline": "if (stream_info->segment_count > 1)"
    },
    {
        "line": 1355,
        "fullcodeline": "image=DestroyImageList(image);"
    },
    {
        "line": 1360,
        "fullcodeline": "GetBlobSize(image));"
    },
    {
        "line": 178,
        "fullcodeline": "(isupper((unsigned char) *(explicit_vr+1)) != MagickFalse) ?"
    },
    {
        "line": 200,
        "fullcodeline": "(strncmp(explicit_vr,\"SQ\",2) == 0))"
    },
    {
        "line": 202,
        "fullcodeline": "(void) ReadBlobLSBShort(image);"
    },
    {
        "line": 203,
        "fullcodeline": "quantum=4;"
    },
    {
        "line": 212,
        "fullcodeline": "datum=ReadBlobSignedLong(image);"
    },
    {
        "line": 246,
        "fullcodeline": "quantum=0;"
    },
    {
        "line": 247,
        "fullcodeline": "length=0;"
    },
    {
        "line": 259,
        "fullcodeline": "(element == dicom_info[i].element))"
    },
    {
        "line": 703,
        "fullcodeline": "(element == dicom_info[i].element))"
    },
    {
        "line": 709,
        "fullcodeline": "for (i=0; i < (ssize_t) MagickMax(length,4); i++)"
    },
    {
        "line": 712,
        "fullcodeline": "if ((i == (ssize_t) length) || (length > 4))"
    },
    {
        "line": 748,
        "fullcodeline": "(void) FormatLocaleFile(stdout,\"\\n\");"
    },
    {
        "line": 854,
        "fullcodeline": "if (c == EOF)"
    },
    {
        "line": 873,
        "fullcodeline": "while (property != (const char *) NULL)"
    },
    {
        "line": 961,
        "fullcodeline": "for (i=0; i < (ssize_t) colors; i++)"
    },
    {
        "line": 969,
        "fullcodeline": "for (i=0; i < (ssize_t) colors; i++)"
    },
    {
        "line": 977,
        "fullcodeline": "for (i=0; i < (ssize_t) colors; i++)"
    },
    {
        "line": 985,
        "fullcodeline": "for (i=0; i < (ssize_t) colors; i++)"
    },
    {
        "line": 1028,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 1095,
        "fullcodeline": "window_width=(size_t) window_center;"
    },
    {
        "line": 1105,
        "fullcodeline": "q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 1356,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 199,
        "fullcodeline": "(strncmp(explicit_vr,\"OW\",2) == 0) ||"
    },
    {
        "line": 217,
        "fullcodeline": "if (group == 0x0002)"
    },
    {
        "line": 230,
        "fullcodeline": "if ((strncmp(implicit_vr,\"UL\",2) == 0) ||"
    },
    {
        "line": 283,
        "fullcodeline": "if (group == 0x0002)"
    },
    {
        "line": 348,
        "fullcodeline": "transfer_syntax[MagickPathExtent];"
    },
    {
        "line": 364,
        "fullcodeline": "*transfer_syntax='\\0';"
    },
    {
        "line": 433,
        "fullcodeline": "samples_per_pixel=(size_t) datum;"
    },
    {
        "line": 445,
        "fullcodeline": "photometric[i]='\\0';"
    },
    {
        "line": 446,
        "fullcodeline": "polarity=LocaleCompare(photometric,\"MONOCHROME1 \") == 0 ?"
    },
    {
        "line": 466,
        "fullcodeline": "number_scenes=StringToUnsignedLong((char *) data);"
    },
    {
        "line": 474,
        "fullcodeline": "height=(size_t) datum;"
    },
    {
        "line": 482,
        "fullcodeline": "width=(size_t) datum;"
    },
    {
        "line": 490,
        "fullcodeline": "bits_allocated=(size_t) datum;"
    },
    {
        "line": 491,
        "fullcodeline": "bytes_per_pixel=1;"
    },
    {
        "line": 494,
        "fullcodeline": "depth=bits_allocated;"
    },
    {
        "line": 497,
        "fullcodeline": "max_value=(1UL << bits_allocated)-1;"
    },
    {
        "line": 505,
        "fullcodeline": "significant_bits=(size_t) datum;"
    },
    {
        "line": 506,
        "fullcodeline": "bytes_per_pixel=1;"
    },
    {
        "line": 509,
        "fullcodeline": "depth=significant_bits;"
    },
    {
        "line": 512,
        "fullcodeline": "max_value=(1UL << significant_bits)-1;"
    },
    {
        "line": 513,
        "fullcodeline": "mask=(size_t) GetQuantumRange(significant_bits);"
    },
    {
        "line": 528,
        "fullcodeline": "signed_data=(size_t) datum;"
    },
    {
        "line": 575,
        "fullcodeline": "colors=(size_t) (length/bytes_per_pixel);"
    },
    {
        "line": 576,
        "fullcodeline": "datum=(int) colors;"
    },
    {
        "line": 577,
        "fullcodeline": "graymap=(int *) AcquireQuantumMemory((size_t) colors,"
    },
    {
        "line": 598,
        "fullcodeline": "colors=(size_t) (length/2);"
    },
    {
        "line": 599,
        "fullcodeline": "datum=(int) colors;"
    },
    {
        "line": 600,
        "fullcodeline": "redmap=(int *) AcquireQuantumMemory((size_t) colors,"
    },
    {
        "line": 604,
        "fullcodeline": "p=data;"
    },
    {
        "line": 626,
        "fullcodeline": "colors=(size_t) (length/2);"
    },
    {
        "line": 627,
        "fullcodeline": "datum=(int) colors;"
    },
    {
        "line": 628,
        "fullcodeline": "greenmap=(int *) AcquireQuantumMemory((size_t) colors,"
    },
    {
        "line": 632,
        "fullcodeline": "p=data;"
    },
    {
        "line": 654,
        "fullcodeline": "colors=(size_t) (length/2);"
    },
    {
        "line": 655,
        "fullcodeline": "datum=(int) colors;"
    },
    {
        "line": 656,
        "fullcodeline": "bluemap=(int *) AcquireQuantumMemory((size_t) colors,"
    },
    {
        "line": 660,
        "fullcodeline": "p=data;"
    },
    {
        "line": 710,
        "fullcodeline": "if (isprint((int) data[i]) == MagickFalse)"
    },
    {
        "line": 714,
        "fullcodeline": "(void) SubstituteString(&attribute,\" \",\"\");"
    },
    {
        "line": 715,
        "fullcodeline": "(void) SetImageProperty(image,attribute,(char *) data,exception);"
    },
    {
        "line": 729,
        "fullcodeline": "for (i=0; i < (ssize_t) MagickMax(length,4); i++)"
    },
    {
        "line": 732,
        "fullcodeline": "if ((i != (ssize_t) length) && (length <= 4))"
    },
    {
        "line": 856,
        "fullcodeline": "ThrowFileException(exception,CorruptImageError,"
    },
    {
        "line": 875,
        "fullcodeline": "(void) SetImageProperty(jpeg_image,property,"
    },
    {
        "line": 877,
        "fullcodeline": "property=GetNextImageProperty(image);"
    },
    {
        "line": 963,
        "fullcodeline": "index=redmap[i];"
    },
    {
        "line": 966,
        "fullcodeline": "image->colormap[i].red=(MagickRealType) index;"
    },
    {
        "line": 971,
        "fullcodeline": "index=greenmap[i];"
    },
    {
        "line": 974,
        "fullcodeline": "image->colormap[i].green=(MagickRealType) index;"
    },
    {
        "line": 979,
        "fullcodeline": "index=bluemap[i];"
    },
    {
        "line": 982,
        "fullcodeline": "image->colormap[i].blue=(MagickRealType) index;"
    },
    {
        "line": 987,
        "fullcodeline": "index=graymap[i];"
    },
    {
        "line": 990,
        "fullcodeline": "image->colormap[i].red=(MagickRealType) index;"
    },
    {
        "line": 991,
        "fullcodeline": "image->colormap[i].green=(MagickRealType) index;"
    },
    {
        "line": 992,
        "fullcodeline": "image->colormap[i].blue=(MagickRealType) index;"
    },
    {
        "line": 1030,
        "fullcodeline": "q=GetAuthenticPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 1099,
        "fullcodeline": "if (LocaleCompare(option,\"reset\") == 0)"
    },
    {
        "line": 1106,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 1108,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 1207,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 1209,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 1218,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 198,
        "fullcodeline": "(strncmp(explicit_vr,\"UN\",2) == 0) ||"
    },
    {
        "line": 218,
        "fullcodeline": "datum=ReadBlobLSBSignedShort(image);"
    },
    {
        "line": 232,
        "fullcodeline": "(strncmp(implicit_vr,\"FL\",2) == 0))"
    },
    {
        "line": 233,
        "fullcodeline": "quantum=4;"
    },
    {
        "line": 284,
        "fullcodeline": "datum=ReadBlobLSBSignedShort(image);"
    },
    {
        "line": 289,
        "fullcodeline": "if ((length == 1) && (quantum == 4))"
    },
    {
        "line": 353,
        "fullcodeline": "if ((datum == 0) && (explicit_retry == MagickFalse))"
    },
    {
        "line": 365,
        "fullcodeline": "if (data != (unsigned char *) NULL)"
    },
    {
        "line": 368,
        "fullcodeline": "if (image_info->verbose != MagickFalse)"
    },
    {
        "line": 371,
        "fullcodeline": "if (strncmp(transfer_syntax,\"1.2.840.10008.1.2\",17) == 0)"
    },
    {
        "line": 441,
        "fullcodeline": "if (data == (unsigned char *) NULL)"
    },
    {
        "line": 443,
        "fullcodeline": "for (i=0; i < (ssize_t) MagickMin(length,MagickPathExtent-1); i++)"
    },
    {
        "line": 444,
        "fullcodeline": "photometric[i]=(char) data[i];"
    },
    {
        "line": 455,
        "fullcodeline": "if (datum == 1)"
    },
    {
        "line": 464,
        "fullcodeline": "if (data == (unsigned char *) NULL)"
    },
    {
        "line": 492,
        "fullcodeline": "if (datum > 8)"
    },
    {
        "line": 495,
        "fullcodeline": "if (depth > 32)"
    },
    {
        "line": 507,
        "fullcodeline": "if (significant_bits > 8)"
    },
    {
        "line": 510,
        "fullcodeline": "if (depth > 32)"
    },
    {
        "line": 536,
        "fullcodeline": "if (data != (unsigned char *) NULL)"
    },
    {
        "line": 545,
        "fullcodeline": "if (data != (unsigned char *) NULL)"
    },
    {
        "line": 554,
        "fullcodeline": "if (data != (unsigned char *) NULL)"
    },
    {
        "line": 563,
        "fullcodeline": "if (data != (unsigned char *) NULL)"
    },
    {
        "line": 573,
        "fullcodeline": "if (data == (unsigned char *) NULL)"
    },
    {
        "line": 579,
        "fullcodeline": "if (graymap == (int *) NULL)"
    },
    {
        "line": 581,
        "fullcodeline": "for (i=0; i < (ssize_t) colors; i++)"
    },
    {
        "line": 596,
        "fullcodeline": "if (data == (unsigned char *) NULL)"
    },
    {
        "line": 602,
        "fullcodeline": "if (redmap == (int *) NULL)"
    },
    {
        "line": 605,
        "fullcodeline": "for (i=0; i < (ssize_t) colors; i++)"
    },
    {
        "line": 624,
        "fullcodeline": "if (data == (unsigned char *) NULL)"
    },
    {
        "line": 630,
        "fullcodeline": "if (greenmap == (int *) NULL)"
    },
    {
        "line": 633,
        "fullcodeline": "for (i=0; i < (ssize_t) colors; i++)"
    },
    {
        "line": 652,
        "fullcodeline": "if (data == (unsigned char *) NULL)"
    },
    {
        "line": 658,
        "fullcodeline": "if (bluemap == (int *) NULL)"
    },
    {
        "line": 661,
        "fullcodeline": "for (i=0; i < (ssize_t) colors; i++)"
    },
    {
        "line": 683,
        "fullcodeline": "if ((data != (unsigned char *) NULL) &&"
    },
    {
        "line": 730,
        "fullcodeline": "if (isprint((int) data[i]) == MagickFalse)"
    },
    {
        "line": 737,
        "fullcodeline": "datum=0;"
    },
    {
        "line": 740,
        "fullcodeline": "(void) FormatLocaleFile(stdout,\"%d\",datum);"
    },
    {
        "line": 964,
        "fullcodeline": "if ((scale != (Quantum *) NULL) && (index <= (int) max_value))"
    },
    {
        "line": 972,
        "fullcodeline": "if ((scale != (Quantum *) NULL) && (index <= (int) max_value))"
    },
    {
        "line": 980,
        "fullcodeline": "if ((scale != (Quantum *) NULL) && (index <= (int) max_value))"
    },
    {
        "line": 988,
        "fullcodeline": "if ((scale != (Quantum *) NULL) && (index <= (int) max_value))"
    },
    {
        "line": 1031,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 1033,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 1066,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 1068,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 1100,
        "fullcodeline": "window_width=0;"
    },
    {
        "line": 1202,
        "fullcodeline": "SetPixelRed(image,(Quantum) pixel.red,q);"
    },
    {
        "line": 1203,
        "fullcodeline": "SetPixelGreen(image,(Quantum) pixel.green,q);"
    },
    {
        "line": 1204,
        "fullcodeline": "SetPixelBlue(image,(Quantum) pixel.blue,q);"
    },
    {
        "line": 1205,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 1211,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 1220,
        "fullcodeline": "q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 220,
        "fullcodeline": "datum=ReadBlobSignedShort(image);"
    },
    {
        "line": 231,
        "fullcodeline": "(strncmp(implicit_vr,\"SL\",2) == 0) ||"
    },
    {
        "line": 286,
        "fullcodeline": "datum=ReadBlobSignedShort(image);"
    },
    {
        "line": 355,
        "fullcodeline": "explicit_retry=MagickTrue;"
    },
    {
        "line": 356,
        "fullcodeline": "(void) SeekBlob(image,(MagickOffsetType) 0,SEEK_SET);"
    },
    {
        "line": 357,
        "fullcodeline": "group=0;"
    },
    {
        "line": 358,
        "fullcodeline": "element=0;"
    },
    {
        "line": 366,
        "fullcodeline": "(void) CopyMagickString(transfer_syntax,(char *) data,"
    },
    {
        "line": 369,
        "fullcodeline": "(void) FormatLocaleFile(stdout,\"transfer_syntax=%s\\n\","
    },
    {
        "line": 378,
        "fullcodeline": "type=1;"
    },
    {
        "line": 379,
        "fullcodeline": "subtype=0;"
    },
    {
        "line": 456,
        "fullcodeline": "image->interlace=PlaneInterlace;"
    },
    {
        "line": 493,
        "fullcodeline": "bytes_per_pixel=2;"
    },
    {
        "line": 496,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 508,
        "fullcodeline": "bytes_per_pixel=2;"
    },
    {
        "line": 511,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 537,
        "fullcodeline": "window_center=(ssize_t) StringToLong((char *) data);"
    },
    {
        "line": 546,
        "fullcodeline": "window_width=StringToUnsignedLong((char *) data);"
    },
    {
        "line": 555,
        "fullcodeline": "rescale_intercept=(ssize_t) StringToLong((char *) data);"
    },
    {
        "line": 564,
        "fullcodeline": "rescale_slope=(ssize_t) StringToLong((char *) data);"
    },
    {
        "line": 580,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 582,
        "fullcodeline": "if (bytes_per_pixel == 1)"
    },
    {
        "line": 603,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 611,
        "fullcodeline": "redmap[i]=(int) index;"
    },
    {
        "line": 612,
        "fullcodeline": "p+=2;"
    },
    {
        "line": 631,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 639,
        "fullcodeline": "greenmap[i]=(int) index;"
    },
    {
        "line": 640,
        "fullcodeline": "p+=2;"
    },
    {
        "line": 659,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 667,
        "fullcodeline": "bluemap[i]=(int) index;"
    },
    {
        "line": 668,
        "fullcodeline": "p+=2;"
    },
    {
        "line": 684,
        "fullcodeline": "(strncmp((char *) data,\"INVERSE\",7) == 0))"
    },
    {
        "line": 685,
        "fullcodeline": "polarity=MagickTrue;"
    },
    {
        "line": 738,
        "fullcodeline": "for (j=(ssize_t) length-1; j >= 0; j--)"
    },
    {
        "line": 739,
        "fullcodeline": "datum=(256*datum+data[j]);"
    },
    {
        "line": 876,
        "fullcodeline": "GetImageProperty(image,property,exception),exception);"
    },
    {
        "line": 965,
        "fullcodeline": "index=(int) scale[index];"
    },
    {
        "line": 973,
        "fullcodeline": "index=(int) scale[index];"
    },
    {
        "line": 981,
        "fullcodeline": "index=(int) scale[index];"
    },
    {
        "line": 989,
        "fullcodeline": "index=(int) scale[index];"
    },
    {
        "line": 1064,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 1070,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 1110,
        "fullcodeline": "if (samples_per_pixel == 1)"
    },
    {
        "line": 1213,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 1221,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 1223,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 1322,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 1324,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 235,
        "fullcodeline": "if (strncmp(implicit_vr,\"FD\",2) != 0)"
    },
    {
        "line": 291,
        "fullcodeline": "if (group == 0x0002)"
    },
    {
        "line": 359,
        "fullcodeline": "if (image_info->verbose != MagickFalse)"
    },
    {
        "line": 380,
        "fullcodeline": "if (strlen(transfer_syntax) > 17)"
    },
    {
        "line": 583,
        "fullcodeline": "graymap[i]=(int) data[i];"
    },
    {
        "line": 607,
        "fullcodeline": "if (image->endian == MSBEndian)"
    },
    {
        "line": 635,
        "fullcodeline": "if (image->endian == MSBEndian)"
    },
    {
        "line": 663,
        "fullcodeline": "if (image->endian == MSBEndian)"
    },
    {
        "line": 743,
        "fullcodeline": "for (i=0; i < (ssize_t) length; i++)"
    },
    {
        "line": 1035,
        "fullcodeline": "switch ((int) i)"
    },
    {
        "line": 1072,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 1142,
        "fullcodeline": "index=(pixel_value*rescale_slope)+rescale_intercept;"
    },
    {
        "line": 1167,
        "fullcodeline": "index&=mask;"
    },
    {
        "line": 1168,
        "fullcodeline": "index=(int) ConstrainColormapIndex(image,(size_t) index,"
    },
    {
        "line": 1170,
        "fullcodeline": "SetPixelIndex(image,(Quantum) index,q);"
    },
    {
        "line": 1314,
        "fullcodeline": "SetPixelRed(image,(Quantum) (((size_t) GetPixelRed(image,q)) |"
    },
    {
        "line": 1316,
        "fullcodeline": "SetPixelGreen(image,(Quantum) (((size_t) GetPixelGreen(image,q)) |"
    },
    {
        "line": 1318,
        "fullcodeline": "SetPixelBlue(image,(Quantum) (((size_t) GetPixelBlue(image,q)) |"
    },
    {
        "line": 1320,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 1326,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 236,
        "fullcodeline": "quantum=1;"
    },
    {
        "line": 292,
        "fullcodeline": "datum=ReadBlobLSBSignedLong(image);"
    },
    {
        "line": 297,
        "fullcodeline": "if ((quantum != 0) && (length != 0))"
    },
    {
        "line": 360,
        "fullcodeline": "(void) FormatLocaleFile(stdout,"
    },
    {
        "line": 370,
        "fullcodeline": "(const char *) transfer_syntax);"
    },
    {
        "line": 382,
        "fullcodeline": "count=sscanf(transfer_syntax+17,\".%d.%d\",&type,&subtype);"
    },
    {
        "line": 608,
        "fullcodeline": "index=(unsigned short) ((*p << 8) | *(p+1));"
    },
    {
        "line": 636,
        "fullcodeline": "index=(unsigned short) ((*p << 8) | *(p+1));"
    },
    {
        "line": 664,
        "fullcodeline": "index=(unsigned short) ((*p << 8) | *(p+1));"
    },
    {
        "line": 744,
        "fullcodeline": "if (isprint((int) data[i]) != MagickFalse)"
    },
    {
        "line": 1115,
        "fullcodeline": "if (bytes_per_pixel == 1)"
    },
    {
        "line": 1143,
        "fullcodeline": "if (window_width == 0)"
    },
    {
        "line": 1189,
        "fullcodeline": "pixel.red&=mask;"
    },
    {
        "line": 1190,
        "fullcodeline": "pixel.green&=mask;"
    },
    {
        "line": 1191,
        "fullcodeline": "pixel.blue&=mask;"
    },
    {
        "line": 1225,
        "fullcodeline": "if (samples_per_pixel == 1)"
    },
    {
        "line": 1328,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 238,
        "fullcodeline": "quantum=8;"
    },
    {
        "line": 294,
        "fullcodeline": "datum=ReadBlobSignedLong(image);"
    },
    {
        "line": 305,
        "fullcodeline": "count=ReadBlob(image,(size_t) quantum*length,data);"
    },
    {
        "line": 315,
        "fullcodeline": "data[length*quantum]='\\0';"
    },
    {
        "line": 383,
        "fullcodeline": "if (count < 1)"
    },
    {
        "line": 391,
        "fullcodeline": "image->endian=LSBEndian;"
    },
    {
        "line": 396,
        "fullcodeline": "image->endian=MSBEndian;"
    },
    {
        "line": 412,
        "fullcodeline": "image->compression=RLECompression;"
    },
    {
        "line": 610,
        "fullcodeline": "index=(unsigned short) (*p | (*(p+1) << 8));"
    },
    {
        "line": 638,
        "fullcodeline": "index=(unsigned short) (*p | (*(p+1) << 8));"
    },
    {
        "line": 666,
        "fullcodeline": "index=(unsigned short) (*p | (*(p+1) << 8));"
    },
    {
        "line": 745,
        "fullcodeline": "(void) FormatLocaleFile(stdout,\"%c\",data[i]);"
    },
    {
        "line": 1039,
        "fullcodeline": "SetPixelRed(image,ScaleCharToQuantum((unsigned char)"
    },
    {
        "line": 1045,
        "fullcodeline": "SetPixelGreen(image,ScaleCharToQuantum((unsigned char)"
    },
    {
        "line": 1051,
        "fullcodeline": "SetPixelBlue(image,ScaleCharToQuantum((unsigned char)"
    },
    {
        "line": 1057,
        "fullcodeline": "SetPixelAlpha(image,ScaleCharToQuantum((unsigned char)"
    },
    {
        "line": 1116,
        "fullcodeline": "pixel_value=polarity != MagickFalse ?"
    },
    {
        "line": 1177,
        "fullcodeline": "if (bytes_per_pixel == 1)"
    },
    {
        "line": 1192,
        "fullcodeline": "if (scale != (Quantum *) NULL)"
    },
    {
        "line": 1256,
        "fullcodeline": "index=(pixel_value*rescale_slope)+rescale_intercept;"
    },
    {
        "line": 1281,
        "fullcodeline": "index&=mask;"
    },
    {
        "line": 1282,
        "fullcodeline": "index=(int) ConstrainColormapIndex(image,(size_t) index,"
    },
    {
        "line": 1284,
        "fullcodeline": "SetPixelIndex(image,(Quantum) (((size_t)"
    },
    {
        "line": 299,
        "fullcodeline": "if (~length >= 1)"
    },
    {
        "line": 302,
        "fullcodeline": "if (data == (unsigned char *) NULL)"
    },
    {
        "line": 306,
        "fullcodeline": "if (count != (ssize_t) (quantum*length))"
    },
    {
        "line": 384,
        "fullcodeline": "ThrowReaderException(CorruptImageError,"
    },
    {
        "line": 401,
        "fullcodeline": "if ((subtype >= 80) && (subtype <= 81))"
    },
    {
        "line": 747,
        "fullcodeline": "(void) FormatLocaleFile(stdout,\"%c\",'.');"
    },
    {
        "line": 1145,
        "fullcodeline": "if (signed_data == 1)"
    },
    {
        "line": 1156,
        "fullcodeline": "window_max=(ssize_t) floor((double) window_center+"
    },
    {
        "line": 1179,
        "fullcodeline": "pixel.red=(unsigned int) ReadDCMByte(stream_info,image);"
    },
    {
        "line": 1180,
        "fullcodeline": "pixel.green=(unsigned int) ReadDCMByte(stream_info,image);"
    },
    {
        "line": 1181,
        "fullcodeline": "pixel.blue=(unsigned int) ReadDCMByte(stream_info,image);"
    },
    {
        "line": 1230,
        "fullcodeline": "if (bytes_per_pixel == 1)"
    },
    {
        "line": 1257,
        "fullcodeline": "if (window_width == 0)"
    },
    {
        "line": 1304,
        "fullcodeline": "pixel.red&=mask;"
    },
    {
        "line": 1305,
        "fullcodeline": "pixel.green&=mask;"
    },
    {
        "line": 1306,
        "fullcodeline": "pixel.blue&=mask;"
    },
    {
        "line": 1315,
        "fullcodeline": "(((size_t) pixel.red) << 8)),q);"
    },
    {
        "line": 1317,
        "fullcodeline": "(((size_t) pixel.green) << 8)),q);"
    },
    {
        "line": 1319,
        "fullcodeline": "(((size_t) pixel.blue) << 8)),q);"
    },
    {
        "line": 300,
        "fullcodeline": "data=(unsigned char *) AcquireQuantumMemory(length+1,quantum*"
    },
    {
        "line": 303,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,"
    },
    {
        "line": 312,
        "fullcodeline": "ThrowReaderException(CorruptImageError,"
    },
    {
        "line": 318,
        "fullcodeline": "if ((unsigned int) datum == 0xFFFFFFFFU)"
    },
    {
        "line": 402,
        "fullcodeline": "image->compression=JPEGCompression;"
    },
    {
        "line": 585,
        "fullcodeline": "graymap[i]=(int) ((short *) data)[i];"
    },
    {
        "line": 1117,
        "fullcodeline": "((int) max_value-ReadDCMByte(stream_info,image)) :"
    },
    {
        "line": 1118,
        "fullcodeline": "ReadDCMByte(stream_info,image);"
    },
    {
        "line": 1120,
        "fullcodeline": "if ((bits_allocated != 12) || (significant_bits != 12))"
    },
    {
        "line": 1146,
        "fullcodeline": "index-=32767;"
    },
    {
        "line": 1158,
        "fullcodeline": "if ((ssize_t)index <= window_min)"
    },
    {
        "line": 1185,
        "fullcodeline": "pixel.red=ReadDCMShort(stream_info,image);"
    },
    {
        "line": 1186,
        "fullcodeline": "pixel.green=ReadDCMShort(stream_info,image);"
    },
    {
        "line": 1187,
        "fullcodeline": "pixel.blue=ReadDCMShort(stream_info,image);"
    },
    {
        "line": 1194,
        "fullcodeline": "if (pixel.red <= GetQuantumRange(depth))"
    },
    {
        "line": 1196,
        "fullcodeline": "if (pixel.green <= GetQuantumRange(depth))"
    },
    {
        "line": 1198,
        "fullcodeline": "if (pixel.blue <= GetQuantumRange(depth))"
    },
    {
        "line": 1231,
        "fullcodeline": "pixel_value=polarity != MagickFalse ?"
    },
    {
        "line": 1292,
        "fullcodeline": "if (bytes_per_pixel == 1)"
    },
    {
        "line": 1307,
        "fullcodeline": "if (scale != (Quantum *) NULL)"
    },
    {
        "line": 308,
        "fullcodeline": "if (image_info->verbose != MagickFalse)"
    },
    {
        "line": 320,
        "fullcodeline": "sequence=MagickTrue;"
    },
    {
        "line": 1040,
        "fullcodeline": "ReadDCMByte(stream_info,image)),q);"
    },
    {
        "line": 1046,
        "fullcodeline": "ReadDCMByte(stream_info,image)),q);"
    },
    {
        "line": 1052,
        "fullcodeline": "ReadDCMByte(stream_info,image)),q);"
    },
    {
        "line": 1058,
        "fullcodeline": "ReadDCMByte(stream_info,image)),q);"
    },
    {
        "line": 1154,
        "fullcodeline": "window_min=(ssize_t) ceil((double) window_center-"
    },
    {
        "line": 1159,
        "fullcodeline": "index=0;"
    },
    {
        "line": 1195,
        "fullcodeline": "pixel.red=scale[pixel.red];"
    },
    {
        "line": 1197,
        "fullcodeline": "pixel.green=scale[pixel.green];"
    },
    {
        "line": 1199,
        "fullcodeline": "pixel.blue=scale[pixel.blue];"
    },
    {
        "line": 1259,
        "fullcodeline": "if (signed_data == 1)"
    },
    {
        "line": 1270,
        "fullcodeline": "window_max=(ssize_t) floor((double) window_center+"
    },
    {
        "line": 1285,
        "fullcodeline": "GetPixelIndex(image,q)) | (((size_t) index) << 8)),q);"
    },
    {
        "line": 1294,
        "fullcodeline": "pixel.red=(unsigned int) ReadDCMByte(stream_info,image);"
    },
    {
        "line": 1295,
        "fullcodeline": "pixel.green=(unsigned int) ReadDCMByte(stream_info,image);"
    },
    {
        "line": 1296,
        "fullcodeline": "pixel.blue=(unsigned int) ReadDCMByte(stream_info,image);"
    },
    {
        "line": 1309,
        "fullcodeline": "pixel.red=scale[pixel.red];"
    },
    {
        "line": 1310,
        "fullcodeline": "pixel.green=scale[pixel.green];"
    },
    {
        "line": 1311,
        "fullcodeline": "pixel.blue=scale[pixel.blue];"
    },
    {
        "line": 309,
        "fullcodeline": "(void) FormatLocaleFile(stdout,\"count=%d quantum=%d \""
    },
    {
        "line": 404,
        "fullcodeline": "if ((subtype >= 90) && (subtype <= 93))"
    },
    {
        "line": 1126,
        "fullcodeline": "if (polarity != MagickFalse)"
    },
    {
        "line": 1140,
        "fullcodeline": "i++;"
    },
    {
        "line": 1232,
        "fullcodeline": "((int) max_value-ReadDCMByte(stream_info,image)) :"
    },
    {
        "line": 1233,
        "fullcodeline": "ReadDCMByte(stream_info,image);"
    },
    {
        "line": 1235,
        "fullcodeline": "if ((bits_allocated != 12) || (significant_bits != 12))"
    },
    {
        "line": 1260,
        "fullcodeline": "index-=32767;"
    },
    {
        "line": 1272,
        "fullcodeline": "if ((ssize_t)index <= window_min)"
    },
    {
        "line": 1300,
        "fullcodeline": "pixel.red=ReadDCMShort(stream_info,image);"
    },
    {
        "line": 1301,
        "fullcodeline": "pixel.green=ReadDCMShort(stream_info,image);"
    },
    {
        "line": 1302,
        "fullcodeline": "pixel.blue=ReadDCMShort(stream_info,image);"
    },
    {
        "line": 405,
        "fullcodeline": "image->compression=JPEG2000Compression;"
    },
    {
        "line": 1123,
        "fullcodeline": "pixel_value=ReadDCMSignedShort(stream_info,image);"
    },
    {
        "line": 1127,
        "fullcodeline": "pixel_value=(int)max_value-pixel_value;"
    },
    {
        "line": 1131,
        "fullcodeline": "if ((i & 0x01) != 0)"
    },
    {
        "line": 1161,
        "fullcodeline": "if ((ssize_t)index > window_max)"
    },
    {
        "line": 1237,
        "fullcodeline": "pixel_value=(int) (polarity != MagickFalse ?"
    },
    {
        "line": 1268,
        "fullcodeline": "window_min=(ssize_t) ceil((double) window_center-"
    },
    {
        "line": 1273,
        "fullcodeline": "index=0;"
    },
    {
        "line": 310,
        "fullcodeline": "\"length=%d group=%d\\n\",(int) count,(int) quantum,(int)"
    },
    {
        "line": 311,
        "fullcodeline": "length,(int) group);"
    },
    {
        "line": 407,
        "fullcodeline": "image->compression=JPEGCompression;"
    },
    {
        "line": 1125,
        "fullcodeline": "pixel_value=ReadDCMShort(stream_info,image);"
    },
    {
        "line": 1132,
        "fullcodeline": "pixel_value=(ReadDCMByte(stream_info,image) << 8) |"
    },
    {
        "line": 1155,
        "fullcodeline": "(window_width-1.0)/2.0-0.5);"
    },
    {
        "line": 1157,
        "fullcodeline": "(window_width-1.0)/2.0+0.5);"
    },
    {
        "line": 1162,
        "fullcodeline": "index=(int) max_value;"
    },
    {
        "line": 1240,
        "fullcodeline": "if (signed_data == 1)"
    },
    {
        "line": 1254,
        "fullcodeline": "i++;"
    },
    {
        "line": 1136,
        "fullcodeline": "pixel_value=ReadDCMSignedShort(stream_info,image);"
    },
    {
        "line": 1137,
        "fullcodeline": "byte=(int) (pixel_value & 0x0f);"
    },
    {
        "line": 1138,
        "fullcodeline": "pixel_value>>=4;"
    },
    {
        "line": 1164,
        "fullcodeline": "index=(int) (max_value*(((index-window_center-"
    },
    {
        "line": 1241,
        "fullcodeline": "pixel_value=((signed short) pixel_value);"
    },
    {
        "line": 1245,
        "fullcodeline": "if ((i & 0x01) != 0)"
    },
    {
        "line": 1275,
        "fullcodeline": "if ((ssize_t)index > window_max)"
    },
    {
        "line": 1238,
        "fullcodeline": "(max_value-ReadDCMShort(stream_info,image)) :"
    },
    {
        "line": 1239,
        "fullcodeline": "ReadDCMShort(stream_info,image));"
    },
    {
        "line": 1246,
        "fullcodeline": "pixel_value=(ReadDCMByte(stream_info,image) << 8) |"
    },
    {
        "line": 1269,
        "fullcodeline": "(window_width-1.0)/2.0-0.5);"
    },
    {
        "line": 1271,
        "fullcodeline": "(window_width-1.0)/2.0+0.5);"
    },
    {
        "line": 1276,
        "fullcodeline": "index=(int) max_value;"
    },
    {
        "line": 1250,
        "fullcodeline": "pixel_value=ReadDCMShort(stream_info,image);"
    },
    {
        "line": 1251,
        "fullcodeline": "byte=(int) (pixel_value & 0x0f);"
    },
    {
        "line": 1252,
        "fullcodeline": "pixel_value>>=4;"
    },
    {
        "line": 1278,
        "fullcodeline": "index=(int) (max_value*(((index-window_center-"
    },
    {
        "line": 1165,
        "fullcodeline": "0.5)/(window_width-1))+0.5));"
    },
    {
        "line": 1279,
        "fullcodeline": "0.5)/(window_width-1))+0.5));"
    }
]