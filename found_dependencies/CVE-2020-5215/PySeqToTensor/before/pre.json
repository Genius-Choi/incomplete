[
    {
        "line": 3,
        "fullcodeline": "TF_RETURN_IF_ERROR(InferShapeAndType(obj, &state));"
    },
    {
        "line": 4,
        "fullcodeline": "DataType requested_dtype = DT_INVALID;"
    },
    {
        "line": 5,
        "fullcodeline": "if (dtype != DT_INVALID) {"
    },
    {
        "line": 6,
        "fullcodeline": "requested_dtype = dtype;"
    },
    {
        "line": 14,
        "fullcodeline": "if (FloatConverter::Convert(obj, &state, ret) == nullptr)"
    },
    {
        "line": 24,
        "fullcodeline": "RETURN_STRING_AS_STATUS(NumpyHalfConverter::Convert(obj, &state, ret));"
    },
    {
        "line": 62,
        "fullcodeline": "if (requested_dtype == DT_INVALID) {"
    },
    {
        "line": 75,
        "fullcodeline": "RETURN_STRING_AS_STATUS(DoubleConverter::Convert(obj, &state, ret));"
    },
    {
        "line": 78,
        "fullcodeline": "RETURN_STRING_AS_STATUS(NumpyHalfConverter::Convert(obj, &state, ret));"
    },
    {
        "line": 81,
        "fullcodeline": "if (requested_dtype == DT_INVALID) {"
    },
    {
        "line": 101,
        "fullcodeline": "RETURN_STRING_AS_STATUS(StringConverter::Convert(obj, &state, ret));"
    },
    {
        "line": 104,
        "fullcodeline": "RETURN_STRING_AS_STATUS(Complex128Converter::Convert(obj, &state, ret));"
    },
    {
        "line": 107,
        "fullcodeline": "RETURN_STRING_AS_STATUS(BoolConverter::Convert(obj, &state, ret));"
    },
    {
        "line": 110,
        "fullcodeline": "*ret = Tensor(requested_dtype == DT_INVALID ? DT_FLOAT : requested_dtype,"
    },
    {
        "line": 112,
        "fullcodeline": "return Status::OK();"
    },
    {
        "line": 115,
        "fullcodeline": "return errors::Unimplemented(\"Missing Python -> Tensor conversion for \","
    },
    {
        "line": 19,
        "fullcodeline": "if (DoubleConverter::Convert(obj, &state, ret) == nullptr)"
    },
    {
        "line": 27,
        "fullcodeline": "if (Int64Converter::Convert(obj, &state, ret) == nullptr)"
    },
    {
        "line": 32,
        "fullcodeline": "if (Int32Converter::Convert(obj, &state, ret) == nullptr)"
    },
    {
        "line": 37,
        "fullcodeline": "if (UInt64Converter::Convert(obj, &state, ret) == nullptr)"
    },
    {
        "line": 42,
        "fullcodeline": "if (Complex128Converter::Convert(obj, &state, ret) == nullptr)"
    },
    {
        "line": 47,
        "fullcodeline": "if (StringConverter::Convert(obj, &state, ret) == nullptr)"
    },
    {
        "line": 52,
        "fullcodeline": "if (BoolConverter::Convert(obj, &state, ret) == nullptr)"
    },
    {
        "line": 82,
        "fullcodeline": "const char* error = Int32Converter::Convert(obj, &state, ret);"
    },
    {
        "line": 116,
        "fullcodeline": "DataTypeString(state.inferred_dtype));"
    },
    {
        "line": 15,
        "fullcodeline": "return Status::OK();"
    },
    {
        "line": 20,
        "fullcodeline": "return Status::OK();"
    },
    {
        "line": 28,
        "fullcodeline": "return Status::OK();"
    },
    {
        "line": 33,
        "fullcodeline": "return Status::OK();"
    },
    {
        "line": 38,
        "fullcodeline": "return Status::OK();"
    },
    {
        "line": 43,
        "fullcodeline": "return Status::OK();"
    },
    {
        "line": 48,
        "fullcodeline": "return Status::OK();"
    },
    {
        "line": 53,
        "fullcodeline": "return Status::OK();"
    },
    {
        "line": 65,
        "fullcodeline": "RETURN_STRING_AS_STATUS(FloatConverter::Convert(obj, &state, ret));"
    },
    {
        "line": 83,
        "fullcodeline": "if (error == ErrorFoundInt64) {"
    },
    {
        "line": 86,
        "fullcodeline": "if (error == ErrorFoundFloat) {"
    },
    {
        "line": 93,
        "fullcodeline": "const char* error = Int64Converter::Convert(obj, &state, ret);"
    },
    {
        "line": 71,
        "fullcodeline": "RETURN_STRING_AS_STATUS(DoubleConverter::Convert(obj, &state, ret));"
    },
    {
        "line": 84,
        "fullcodeline": "error = Int64Converter::Convert(obj, &state, ret);"
    },
    {
        "line": 87,
        "fullcodeline": "error = FloatConverter::Convert(obj, &state, ret);"
    },
    {
        "line": 94,
        "fullcodeline": "if (error == ErrorFoundFloat) {"
    },
    {
        "line": 95,
        "fullcodeline": "error = DoubleConverter::Convert(obj, &state, ret);"
    }
]