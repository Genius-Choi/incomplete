[
    {
        "line": 3,
        "fullcodeline": "TF_RETURN_IF_ERROR(InferShapeAndType(obj, &state));"
    },
    {
        "line": 4,
        "fullcodeline": "DataType requested_dtype = DT_INVALID;"
    },
    {
        "line": 5,
        "fullcodeline": "if (dtype != DT_INVALID) {"
    },
    {
        "line": 6,
        "fullcodeline": "requested_dtype = dtype;"
    },
    {
        "line": 14,
        "fullcodeline": "if (FloatConverter::Convert(obj, &state, ret) == nullptr)"
    },
    {
        "line": 64,
        "fullcodeline": "if (requested_dtype == DT_INVALID) {"
    },
    {
        "line": 77,
        "fullcodeline": "RETURN_STRING_AS_STATUS(DoubleConverter::Convert(obj, &state, ret));"
    },
    {
        "line": 80,
        "fullcodeline": "RETURN_STRING_AS_STATUS(NumpyHalfConverter::Convert(obj, &state, ret));"
    },
    {
        "line": 83,
        "fullcodeline": "if (requested_dtype == DT_INVALID) {"
    },
    {
        "line": 103,
        "fullcodeline": "RETURN_STRING_AS_STATUS(StringConverter::Convert(obj, &state, ret));"
    },
    {
        "line": 106,
        "fullcodeline": "RETURN_STRING_AS_STATUS(Complex128Converter::Convert(obj, &state, ret));"
    },
    {
        "line": 109,
        "fullcodeline": "RETURN_STRING_AS_STATUS(BoolConverter::Convert(obj, &state, ret));"
    },
    {
        "line": 112,
        "fullcodeline": "*ret = Tensor(requested_dtype == DT_INVALID ? DT_FLOAT : requested_dtype,"
    },
    {
        "line": 114,
        "fullcodeline": "return Status::OK();"
    },
    {
        "line": 117,
        "fullcodeline": "return errors::Unimplemented(\"Missing Python -> Tensor conversion for \","
    },
    {
        "line": 19,
        "fullcodeline": "if (DoubleConverter::Convert(obj, &state, ret) == nullptr)"
    },
    {
        "line": 24,
        "fullcodeline": "if (NumpyHalfConverter::Convert(obj, &state, ret) == nullptr)"
    },
    {
        "line": 29,
        "fullcodeline": "if (Int64Converter::Convert(obj, &state, ret) == nullptr)"
    },
    {
        "line": 34,
        "fullcodeline": "if (Int32Converter::Convert(obj, &state, ret) == nullptr)"
    },
    {
        "line": 39,
        "fullcodeline": "if (UInt64Converter::Convert(obj, &state, ret) == nullptr)"
    },
    {
        "line": 44,
        "fullcodeline": "if (Complex128Converter::Convert(obj, &state, ret) == nullptr)"
    },
    {
        "line": 49,
        "fullcodeline": "if (StringConverter::Convert(obj, &state, ret) == nullptr)"
    },
    {
        "line": 54,
        "fullcodeline": "if (BoolConverter::Convert(obj, &state, ret) == nullptr)"
    },
    {
        "line": 84,
        "fullcodeline": "const char* error = Int32Converter::Convert(obj, &state, ret);"
    },
    {
        "line": 118,
        "fullcodeline": "DataTypeString(state.inferred_dtype));"
    },
    {
        "line": 15,
        "fullcodeline": "return Status::OK();"
    },
    {
        "line": 20,
        "fullcodeline": "return Status::OK();"
    },
    {
        "line": 25,
        "fullcodeline": "return Status::OK();"
    },
    {
        "line": 30,
        "fullcodeline": "return Status::OK();"
    },
    {
        "line": 35,
        "fullcodeline": "return Status::OK();"
    },
    {
        "line": 40,
        "fullcodeline": "return Status::OK();"
    },
    {
        "line": 45,
        "fullcodeline": "return Status::OK();"
    },
    {
        "line": 50,
        "fullcodeline": "return Status::OK();"
    },
    {
        "line": 55,
        "fullcodeline": "return Status::OK();"
    },
    {
        "line": 67,
        "fullcodeline": "RETURN_STRING_AS_STATUS(FloatConverter::Convert(obj, &state, ret));"
    },
    {
        "line": 85,
        "fullcodeline": "if (error == ErrorFoundInt64) {"
    },
    {
        "line": 88,
        "fullcodeline": "if (error == ErrorFoundFloat) {"
    },
    {
        "line": 95,
        "fullcodeline": "const char* error = Int64Converter::Convert(obj, &state, ret);"
    },
    {
        "line": 73,
        "fullcodeline": "RETURN_STRING_AS_STATUS(DoubleConverter::Convert(obj, &state, ret));"
    },
    {
        "line": 86,
        "fullcodeline": "error = Int64Converter::Convert(obj, &state, ret);"
    },
    {
        "line": 89,
        "fullcodeline": "error = FloatConverter::Convert(obj, &state, ret);"
    },
    {
        "line": 96,
        "fullcodeline": "if (error == ErrorFoundFloat) {"
    },
    {
        "line": 97,
        "fullcodeline": "error = DoubleConverter::Convert(obj, &state, ret);"
    }
]