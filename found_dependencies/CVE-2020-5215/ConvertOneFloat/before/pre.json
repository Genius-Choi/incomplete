[
    {
        "line": 2,
        "fullcodeline": "if (PyErr_Occurred()) {"
    },
    {
        "line": 16,
        "fullcodeline": "if (PyInt_Check(v)) {"
    },
    {
        "line": 21,
        "fullcodeline": "if (PyLong_Check(v)) {"
    },
    {
        "line": 26,
        "fullcodeline": "if (PyIsInstance(v, &PyFloatingArrType_Type)) {  // NumPy float types"
    },
    {
        "line": 33,
        "fullcodeline": "if (PyIsInstance(v, &PyIntegerArrType_Type)) {  // NumPy integers"
    },
    {
        "line": 5,
        "fullcodeline": "if (TF_PREDICT_TRUE(PyFloat_Check(v))) {"
    },
    {
        "line": 6,
        "fullcodeline": "const double as_double = PyFloat_AS_DOUBLE(v);"
    },
    {
        "line": 7,
        "fullcodeline": "*out = static_cast<T>(as_double);"
    },
    {
        "line": 27,
        "fullcodeline": "Safe_PyObjectPtr as_float = make_safe(PyNumber_Float(v));"
    },
    {
        "line": 35,
        "fullcodeline": "Safe_PyObjectPtr as_int = make_safe(PyNumber_Int(v));"
    },
    {
        "line": 17,
        "fullcodeline": "*out = PyInt_AS_LONG(v);"
    },
    {
        "line": 22,
        "fullcodeline": "*out = PyLong_AsDouble(v);"
    },
    {
        "line": 31,
        "fullcodeline": "return ConvertOneFloat<T>(as_float.get(), out);"
    },
    {
        "line": 42,
        "fullcodeline": "return ConvertOneFloat<T>(as_int.get(), out);"
    },
    {
        "line": 9,
        "fullcodeline": "if (TF_PREDICT_FALSE(sizeof(T) < sizeof(double) && std::isinf(*out) &&"
    },
    {
        "line": 10,
        "fullcodeline": "std::isfinite(as_double))) {"
    }
]