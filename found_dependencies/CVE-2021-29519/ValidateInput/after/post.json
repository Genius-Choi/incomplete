[
    {
        "line": 6,
        "fullcodeline": "const auto size = indices_list_in.size();"
    },
    {
        "line": 9,
        "fullcodeline": "bool check_type = internal_type != DT_INVALID;"
    },
    {
        "line": 101,
        "fullcodeline": "const auto batch_size = CalculateBatchSize(shapes_list_in, dense_list_in);"
    },
    {
        "line": 11,
        "fullcodeline": "for (int i = 0; i < size; i++) {"
    },
    {
        "line": 30,
        "fullcodeline": "if (values_list_in.size() != size) {"
    },
    {
        "line": 34,
        "fullcodeline": "for (int i = 0; i < size; i++) {"
    },
    {
        "line": 58,
        "fullcodeline": "if (shapes_list_in.size() != size) {"
    },
    {
        "line": 62,
        "fullcodeline": "for (int i = 0; i < size; i++) {"
    },
    {
        "line": 82,
        "fullcodeline": "for (int i = 0; i < dense_list_in.size(); ++i) {"
    },
    {
        "line": 102,
        "fullcodeline": "for (int i = 0; i < size; i++) {"
    },
    {
        "line": 109,
        "fullcodeline": "for (int i = 0; i < dense_list_in.size(); ++i) {"
    },
    {
        "line": 117,
        "fullcodeline": "return Status::OK();"
    },
    {
        "line": 12,
        "fullcodeline": "if (check_type && indices_list_in[i].dtype() != DT_INT64) {"
    },
    {
        "line": 17,
        "fullcodeline": "if (!TensorShapeUtils::IsMatrix(indices_list_in[i].shape())) {"
    },
    {
        "line": 22,
        "fullcodeline": "if (indices_list_in[i].shape().dim_size(1) != 2) {"
    },
    {
        "line": 31,
        "fullcodeline": "return errors::InvalidArgument(\"Expected \", size, \" input values, got \","
    },
    {
        "line": 37,
        "fullcodeline": "if (check_type && internal_type == DT_STRING &&"
    },
    {
        "line": 43,
        "fullcodeline": "if (!TensorShapeUtils::IsVector(values_list_in[i].shape())) {"
    },
    {
        "line": 48,
        "fullcodeline": "if (indices_list_in[i].shape().dim_size(0) !="
    },
    {
        "line": 59,
        "fullcodeline": "return errors::InvalidArgument(\"Expected \", size, \" input shapes, got \","
    },
    {
        "line": 63,
        "fullcodeline": "if (check_type && shapes_list_in[i].dtype() != DT_INT64) {"
    },
    {
        "line": 68,
        "fullcodeline": "if (!TensorShapeUtils::IsVector(shapes_list_in[i].shape())) {"
    },
    {
        "line": 74,
        "fullcodeline": "if (shapes_list_in[i].vec<int64>().size() != 2) {"
    },
    {
        "line": 85,
        "fullcodeline": "if (check_type && internal_type == DT_STRING &&"
    },
    {
        "line": 91,
        "fullcodeline": "if (!TensorShapeUtils::IsMatrix(dense_list_in[i].shape())) {"
    },
    {
        "line": 103,
        "fullcodeline": "if (shapes_list_in[i].vec<int64>()(0) != batch_size) {"
    },
    {
        "line": 110,
        "fullcodeline": "if (dense_list_in[i].dim_size(0) != batch_size) {"
    },
    {
        "line": 32,
        "fullcodeline": "values_list_in.size());"
    },
    {
        "line": 38,
        "fullcodeline": "values_list_in[i].dtype() == DT_INT64) {"
    },
    {
        "line": 49,
        "fullcodeline": "values_list_in[i].shape().dim_size(0)) {"
    },
    {
        "line": 60,
        "fullcodeline": "shapes_list_in.size());"
    },
    {
        "line": 86,
        "fullcodeline": "dense_list_in[i].dtype() == DT_INT64) {"
    },
    {
        "line": 13,
        "fullcodeline": "return errors::InvalidArgument(\"Input indices should be of type \","
    },
    {
        "line": 18,
        "fullcodeline": "return errors::InvalidArgument("
    },
    {
        "line": 23,
        "fullcodeline": "return errors::InvalidArgument(\"Expected D2 of index to be 2 got \","
    },
    {
        "line": 39,
        "fullcodeline": "return errors::InvalidArgument(\"Input values should be of internal type \","
    },
    {
        "line": 44,
        "fullcodeline": "return errors::InvalidArgument("
    },
    {
        "line": 50,
        "fullcodeline": "return errors::InvalidArgument("
    },
    {
        "line": 64,
        "fullcodeline": "return errors::InvalidArgument(\"Input shape should be of type \", DT_INT64,"
    },
    {
        "line": 69,
        "fullcodeline": "return errors::InvalidArgument("
    },
    {
        "line": 75,
        "fullcodeline": "return errors::InvalidArgument(\"shape should imply a 2D tensor, but got \","
    },
    {
        "line": 87,
        "fullcodeline": "return errors::InvalidArgument(\"Dense inputs should be of internal type \","
    },
    {
        "line": 92,
        "fullcodeline": "return errors::InvalidArgument("
    },
    {
        "line": 104,
        "fullcodeline": "return errors::InvalidArgument(\"Expected batch size \", batch_size,"
    },
    {
        "line": 111,
        "fullcodeline": "return errors::InvalidArgument(\"Expected batch size \", batch_size,"
    },
    {
        "line": 15,
        "fullcodeline": "indices_list_in[i].dtype());"
    },
    {
        "line": 20,
        "fullcodeline": "indices_list_in[i].shape().DebugString(), \" at position \", i);"
    },
    {
        "line": 24,
        "fullcodeline": "indices_list_in[i].shape().dim_size(1),"
    },
    {
        "line": 41,
        "fullcodeline": "values_list_in[i].dtype());"
    },
    {
        "line": 46,
        "fullcodeline": "values_list_in[i].shape().DebugString(), \" at position \", i);"
    },
    {
        "line": 52,
        "fullcodeline": "indices_list_in[i].shape().dim_size(0), \" got \","
    },
    {
        "line": 53,
        "fullcodeline": "values_list_in[i].shape().dim_size(0), \" at position \", i);"
    },
    {
        "line": 66,
        "fullcodeline": "shapes_list_in[i].dtype());"
    },
    {
        "line": 71,
        "fullcodeline": "shapes_list_in[i].shape().DebugString(), \" at position \", i);"
    },
    {
        "line": 76,
        "fullcodeline": "shapes_list_in[i].shape().DebugString(),"
    },
    {
        "line": 89,
        "fullcodeline": "dense_list_in[i].dtype());"
    },
    {
        "line": 94,
        "fullcodeline": "dense_list_in[i].shape().DebugString(), \" at position \", i);"
    },
    {
        "line": 105,
        "fullcodeline": "\" got \", shapes_list_in[i].vec<int64>()(0),"
    },
    {
        "line": 112,
        "fullcodeline": "\" got \", dense_list_in[i].dim_size(0),"
    }
]