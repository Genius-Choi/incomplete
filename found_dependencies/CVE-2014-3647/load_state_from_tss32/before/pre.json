[
    {
        "line": 9,
        "fullcodeline": "ctxt->_eip = tss->eip;"
    },
    {
        "line": 10,
        "fullcodeline": "ctxt->eflags = tss->eflags | 2;"
    },
    {
        "line": 27,
        "fullcodeline": "set_segment_selector(ctxt, tss->ldt_selector, VCPU_SREG_LDTR);"
    },
    {
        "line": 28,
        "fullcodeline": "set_segment_selector(ctxt, tss->es, VCPU_SREG_ES);"
    },
    {
        "line": 29,
        "fullcodeline": "set_segment_selector(ctxt, tss->cs, VCPU_SREG_CS);"
    },
    {
        "line": 30,
        "fullcodeline": "set_segment_selector(ctxt, tss->ss, VCPU_SREG_SS);"
    },
    {
        "line": 31,
        "fullcodeline": "set_segment_selector(ctxt, tss->ds, VCPU_SREG_DS);"
    },
    {
        "line": 32,
        "fullcodeline": "set_segment_selector(ctxt, tss->fs, VCPU_SREG_FS);"
    },
    {
        "line": 33,
        "fullcodeline": "set_segment_selector(ctxt, tss->gs, VCPU_SREG_GS);"
    },
    {
        "line": 52,
        "fullcodeline": "ret = __load_segment_descriptor(ctxt, tss->ldt_selector, VCPU_SREG_LDTR, cpl, true);"
    },
    {
        "line": 55,
        "fullcodeline": "ret = __load_segment_descriptor(ctxt, tss->es, VCPU_SREG_ES, cpl, true);"
    },
    {
        "line": 58,
        "fullcodeline": "ret = __load_segment_descriptor(ctxt, tss->cs, VCPU_SREG_CS, cpl, true);"
    },
    {
        "line": 61,
        "fullcodeline": "ret = __load_segment_descriptor(ctxt, tss->ss, VCPU_SREG_SS, cpl, true);"
    },
    {
        "line": 64,
        "fullcodeline": "ret = __load_segment_descriptor(ctxt, tss->ds, VCPU_SREG_DS, cpl, true);"
    },
    {
        "line": 67,
        "fullcodeline": "ret = __load_segment_descriptor(ctxt, tss->fs, VCPU_SREG_FS, cpl, true);"
    },
    {
        "line": 70,
        "fullcodeline": "ret = __load_segment_descriptor(ctxt, tss->gs, VCPU_SREG_GS, cpl, true);"
    },
    {
        "line": 7,
        "fullcodeline": "if (ctxt->ops->set_cr(ctxt, 3, tss->cr3))"
    },
    {
        "line": 40,
        "fullcodeline": "if (ctxt->eflags & X86_EFLAGS_VM) {"
    },
    {
        "line": 53,
        "fullcodeline": "if (ret != X86EMUL_CONTINUE)"
    },
    {
        "line": 56,
        "fullcodeline": "if (ret != X86EMUL_CONTINUE)"
    },
    {
        "line": 59,
        "fullcodeline": "if (ret != X86EMUL_CONTINUE)"
    },
    {
        "line": 62,
        "fullcodeline": "if (ret != X86EMUL_CONTINUE)"
    },
    {
        "line": 65,
        "fullcodeline": "if (ret != X86EMUL_CONTINUE)"
    },
    {
        "line": 68,
        "fullcodeline": "if (ret != X86EMUL_CONTINUE)"
    },
    {
        "line": 71,
        "fullcodeline": "if (ret != X86EMUL_CONTINUE)"
    },
    {
        "line": 13,
        "fullcodeline": "*reg_write(ctxt, VCPU_REGS_RAX) = tss->eax;"
    },
    {
        "line": 14,
        "fullcodeline": "*reg_write(ctxt, VCPU_REGS_RCX) = tss->ecx;"
    },
    {
        "line": 15,
        "fullcodeline": "*reg_write(ctxt, VCPU_REGS_RDX) = tss->edx;"
    },
    {
        "line": 16,
        "fullcodeline": "*reg_write(ctxt, VCPU_REGS_RBX) = tss->ebx;"
    },
    {
        "line": 17,
        "fullcodeline": "*reg_write(ctxt, VCPU_REGS_RSP) = tss->esp;"
    },
    {
        "line": 18,
        "fullcodeline": "*reg_write(ctxt, VCPU_REGS_RBP) = tss->ebp;"
    },
    {
        "line": 19,
        "fullcodeline": "*reg_write(ctxt, VCPU_REGS_RSI) = tss->esi;"
    },
    {
        "line": 20,
        "fullcodeline": "*reg_write(ctxt, VCPU_REGS_RDI) = tss->edi;"
    },
    {
        "line": 41,
        "fullcodeline": "ctxt->mode = X86EMUL_MODE_VM86;"
    },
    {
        "line": 42,
        "fullcodeline": "cpl = 3;"
    },
    {
        "line": 8,
        "fullcodeline": "return emulate_gp(ctxt, 0);"
    },
    {
        "line": 44,
        "fullcodeline": "ctxt->mode = X86EMUL_MODE_PROT32;"
    },
    {
        "line": 45,
        "fullcodeline": "cpl = tss->cs & 3;"
    }
]