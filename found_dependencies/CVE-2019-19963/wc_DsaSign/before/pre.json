[
    {
        "line": 5,
        "fullcodeline": "int     ret = 0, sz;"
    },
    {
        "line": 6,
        "fullcodeline": "byte    buffer[DSA_HALF_SIZE];"
    },
    {
        "line": 13,
        "fullcodeline": "tmp = out;"
    },
    {
        "line": 15,
        "fullcodeline": "sz = min((int)sizeof(buffer), mp_unsigned_bin_size(&key->q));"
    },
    {
        "line": 19,
        "fullcodeline": "qMinus1 = &kInv;"
    },
    {
        "line": 9,
        "fullcodeline": "if (digest == NULL || out == NULL || key == NULL || rng == NULL) {"
    },
    {
        "line": 17,
        "fullcodeline": "if (mp_init_multi(&k, &kInv, &r, &s, &H, 0) != MP_OKAY)"
    },
    {
        "line": 27,
        "fullcodeline": "if (mp_sub_d(&key->q, 1, qMinus1))"
    },
    {
        "line": 30,
        "fullcodeline": "if (ret == 0) {"
    },
    {
        "line": 81,
        "fullcodeline": "if (ret == 0)  {"
    },
    {
        "line": 28,
        "fullcodeline": "ret = MP_SUB_E;"
    },
    {
        "line": 46,
        "fullcodeline": "if (ret == 0 && mp_add_d(&k, 1, &k) != MP_OKAY)"
    },
    {
        "line": 47,
        "fullcodeline": "ret = MP_MOD_E;"
    },
    {
        "line": 50,
        "fullcodeline": "if (ret == 0 && mp_invmod(&k, &key->q, &kInv) != MP_OKAY)"
    },
    {
        "line": 51,
        "fullcodeline": "ret = MP_INVMOD_E;"
    },
    {
        "line": 54,
        "fullcodeline": "if (ret == 0 && mp_exptmod_ex(&key->g, &k, key->q.used, &key->p,"
    },
    {
        "line": 56,
        "fullcodeline": "ret = MP_EXPTMOD_E;"
    },
    {
        "line": 59,
        "fullcodeline": "if (ret == 0 && mp_mod(&r, &key->q, &r) != MP_OKAY)"
    },
    {
        "line": 60,
        "fullcodeline": "ret = MP_MOD_E;"
    },
    {
        "line": 63,
        "fullcodeline": "if (ret == 0 && mp_read_unsigned_bin(&H, digest,WC_SHA_DIGEST_SIZE) != MP_OKAY)"
    },
    {
        "line": 64,
        "fullcodeline": "ret = MP_READ_E;"
    },
    {
        "line": 67,
        "fullcodeline": "if (ret == 0 && mp_mul(&key->x, &r, &s) != MP_OKAY)"
    },
    {
        "line": 68,
        "fullcodeline": "ret = MP_MUL_E;"
    },
    {
        "line": 70,
        "fullcodeline": "if (ret == 0 && mp_add(&s, &H, &s) != MP_OKAY)"
    },
    {
        "line": 71,
        "fullcodeline": "ret = MP_ADD_E;"
    },
    {
        "line": 73,
        "fullcodeline": "if (ret == 0 && mp_mulmod(&s, &kInv, &key->q, &s) != MP_OKAY)"
    },
    {
        "line": 74,
        "fullcodeline": "ret = MP_MULMOD_E;"
    },
    {
        "line": 77,
        "fullcodeline": "if (ret == 0 && (mp_iszero(&r) == MP_YES || mp_iszero(&s) == MP_YES))"
    },
    {
        "line": 78,
        "fullcodeline": "ret = MP_ZERO_E;"
    },
    {
        "line": 82,
        "fullcodeline": "int rSz = mp_unsigned_bin_size(&r);"
    },
    {
        "line": 83,
        "fullcodeline": "int sSz = mp_unsigned_bin_size(&s);"
    },
    {
        "line": 85,
        "fullcodeline": "while (rSz++ < DSA_HALF_SIZE) {"
    },
    {
        "line": 33,
        "fullcodeline": "ret = wc_RNG_GenerateBlock(rng, buffer, sz);"
    },
    {
        "line": 43,
        "fullcodeline": "} while (ret == 0 && mp_cmp(&k, qMinus1) != MP_LT);"
    },
    {
        "line": 89,
        "fullcodeline": "if (mp_to_unsigned_bin(&r, out) != MP_OKAY)"
    },
    {
        "line": 90,
        "fullcodeline": "ret = MP_TO_E;"
    },
    {
        "line": 92,
        "fullcodeline": "out = tmp + DSA_HALF_SIZE;  /* advance to s in output */"
    },
    {
        "line": 96,
        "fullcodeline": "ret = mp_to_unsigned_bin(&s, out);"
    },
    {
        "line": 36,
        "fullcodeline": "if (ret == 0 && mp_read_unsigned_bin(&k, buffer, sz) != MP_OKAY)"
    },
    {
        "line": 37,
        "fullcodeline": "ret = MP_READ_E;"
    },
    {
        "line": 86,
        "fullcodeline": "*out++ = 0x00;  /* pad front with zeros */"
    },
    {
        "line": 93,
        "fullcodeline": "while (sSz++ < DSA_HALF_SIZE) {"
    },
    {
        "line": 94,
        "fullcodeline": "*out++ = 0x00;  /* pad front with zeros */"
    }
]