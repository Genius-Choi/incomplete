[
    {
        "line": 7,
        "fullcodeline": "CalculateActivationRange(params->activation, &output_activation_min,"
    },
    {
        "line": 9,
        "fullcodeline": "KernelType effective_kernel_type = kernel_type;"
    },
    {
        "line": 16,
        "fullcodeline": "op_params.padding_type = RuntimePaddingType(params->padding);"
    },
    {
        "line": 19,
        "fullcodeline": "op_params.stride_width = params->stride_width;"
    },
    {
        "line": 20,
        "fullcodeline": "op_params.stride_height = params->stride_height;"
    },
    {
        "line": 21,
        "fullcodeline": "op_params.dilation_width_factor = params->dilation_width_factor;"
    },
    {
        "line": 22,
        "fullcodeline": "op_params.dilation_height_factor = params->dilation_height_factor;"
    },
    {
        "line": 23,
        "fullcodeline": "op_params.float_activation_min = output_activation_min;"
    },
    {
        "line": 24,
        "fullcodeline": "op_params.float_activation_max = output_activation_max;"
    },
    {
        "line": 11,
        "fullcodeline": "if ((kernel_type == kMultithreadOptimized) &&"
    },
    {
        "line": 12,
        "fullcodeline": "!data->supports_multithreaded_kernel) {"
    },
    {
        "line": 13,
        "fullcodeline": "effective_kernel_type = kGenericOptimized;"
    },
    {
        "line": 27,
        "fullcodeline": "reference_ops::Conv(op_params, GetTensorShape(input),"
    },
    {
        "line": 37,
        "fullcodeline": "optimized_ops::Conv(op_params, GetTensorShape(input),"
    },
    {
        "line": 66,
        "fullcodeline": "TFLITE_DCHECK(false);"
    },
    {
        "line": 28,
        "fullcodeline": "GetTensorData<float>(input), GetTensorShape(filter),"
    },
    {
        "line": 29,
        "fullcodeline": "GetTensorData<float>(filter), GetTensorShape(bias),"
    },
    {
        "line": 30,
        "fullcodeline": "GetTensorData<float>(bias), GetTensorShape(output),"
    },
    {
        "line": 31,
        "fullcodeline": "GetTensorData<float>(output), GetTensorShape(im2col),"
    },
    {
        "line": 32,
        "fullcodeline": "GetTensorData<float>(im2col));"
    },
    {
        "line": 38,
        "fullcodeline": "GetTensorData<float>(input), GetTensorShape(filter),"
    },
    {
        "line": 39,
        "fullcodeline": "GetTensorData<float>(filter), GetTensorShape(bias),"
    },
    {
        "line": 40,
        "fullcodeline": "GetTensorData<float>(bias), GetTensorShape(output),"
    },
    {
        "line": 41,
        "fullcodeline": "GetTensorData<float>(output), GetTensorShape(im2col),"
    },
    {
        "line": 42,
        "fullcodeline": "GetTensorData<float>(im2col),"
    },
    {
        "line": 43,
        "fullcodeline": "CpuBackendContext::GetFromContext(context));"
    }
]