[
    {
        "line": 5,
        "fullcodeline": "const TfLiteTensor* input_box_encodings ="
    },
    {
        "line": 7,
        "fullcodeline": "const TfLiteTensor* input_class_predictions ="
    },
    {
        "line": 9,
        "fullcodeline": "const TfLiteTensor* decoded_boxes ="
    },
    {
        "line": 12,
        "fullcodeline": "TfLiteTensor* detection_boxes ="
    },
    {
        "line": 14,
        "fullcodeline": "TfLiteTensor* detection_classes ="
    },
    {
        "line": 16,
        "fullcodeline": "TfLiteTensor* detection_scores ="
    },
    {
        "line": 18,
        "fullcodeline": "TfLiteTensor* num_detections ="
    },
    {
        "line": 21,
        "fullcodeline": "const int num_boxes = input_box_encodings->dims->data[1];"
    },
    {
        "line": 22,
        "fullcodeline": "const int num_classes = op_data->num_classes;"
    },
    {
        "line": 23,
        "fullcodeline": "const int num_detections_per_class = op_data->detections_per_class;"
    },
    {
        "line": 24,
        "fullcodeline": "const int max_detections = op_data->max_detections;"
    },
    {
        "line": 25,
        "fullcodeline": "const int num_classes_with_background ="
    },
    {
        "line": 28,
        "fullcodeline": "int label_offset = num_classes_with_background - num_classes;"
    },
    {
        "line": 29,
        "fullcodeline": "TF_LITE_ENSURE(context, num_detections_per_class > 0);"
    },
    {
        "line": 32,
        "fullcodeline": "std::vector<float> class_scores(num_boxes);"
    },
    {
        "line": 34,
        "fullcodeline": "std::vector<int> box_indices_after_regular_non_max_suppression("
    },
    {
        "line": 36,
        "fullcodeline": "std::vector<float> scores_after_regular_non_max_suppression(num_boxes +"
    },
    {
        "line": 39,
        "fullcodeline": "int size_of_sorted_indices = 0;"
    },
    {
        "line": 41,
        "fullcodeline": "sorted_indices.resize(num_boxes + max_detections);"
    },
    {
        "line": 43,
        "fullcodeline": "sorted_values.resize(max_detections);"
    },
    {
        "line": 115,
        "fullcodeline": "GetTensorData<float>(num_detections)[0] = size_of_sorted_indices;"
    },
    {
        "line": 116,
        "fullcodeline": "box_indices_after_regular_non_max_suppression.clear();"
    },
    {
        "line": 117,
        "fullcodeline": "scores_after_regular_non_max_suppression.clear();"
    },
    {
        "line": 6,
        "fullcodeline": "GetInput(context, node, kInputTensorBoxEncodings);"
    },
    {
        "line": 8,
        "fullcodeline": "GetInput(context, node, kInputTensorClassPredictions);"
    },
    {
        "line": 13,
        "fullcodeline": "GetOutput(context, node, kOutputTensorDetectionBoxes);"
    },
    {
        "line": 15,
        "fullcodeline": "GetOutput(context, node, kOutputTensorDetectionClasses);"
    },
    {
        "line": 17,
        "fullcodeline": "GetOutput(context, node, kOutputTensorDetectionScores);"
    },
    {
        "line": 19,
        "fullcodeline": "GetOutput(context, node, kOutputTensorNumDetections);"
    },
    {
        "line": 45,
        "fullcodeline": "for (int col = 0; col < num_classes; col++) {"
    },
    {
        "line": 87,
        "fullcodeline": "for (int output_box_index = 0; output_box_index < max_detections;"
    },
    {
        "line": 88,
        "fullcodeline": "output_box_index++) {"
    },
    {
        "line": 53,
        "fullcodeline": "TF_LITE_ENSURE_STATUS(NonMaxSuppressionSingleClassHelper("
    },
    {
        "line": 57,
        "fullcodeline": "int output_index = size_of_sorted_indices;"
    },
    {
        "line": 67,
        "fullcodeline": "int num_indices_to_sort = std::min(output_index, max_detections);"
    },
    {
        "line": 68,
        "fullcodeline": "DecreasingPartialArgSort(scores_after_regular_non_max_suppression.data(),"
    },
    {
        "line": 83,
        "fullcodeline": "size_of_sorted_indices = num_indices_to_sort;"
    },
    {
        "line": 46,
        "fullcodeline": "for (int row = 0; row < num_boxes; row++) {"
    },
    {
        "line": 70,
        "fullcodeline": "sorted_indices.data());"
    },
    {
        "line": 73,
        "fullcodeline": "for (int row = 0; row < num_indices_to_sort; row++) {"
    },
    {
        "line": 79,
        "fullcodeline": "for (int row = 0; row < num_indices_to_sort; row++) {"
    },
    {
        "line": 89,
        "fullcodeline": "if (output_box_index < size_of_sorted_indices) {"
    },
    {
        "line": 48,
        "fullcodeline": "class_scores[row] ="
    },
    {
        "line": 59,
        "fullcodeline": "box_indices_after_regular_non_max_suppression[output_index] ="
    },
    {
        "line": 61,
        "fullcodeline": "scores_after_regular_non_max_suppression[output_index] ="
    },
    {
        "line": 63,
        "fullcodeline": "output_index++;"
    },
    {
        "line": 74,
        "fullcodeline": "int temp = sorted_indices[row];"
    },
    {
        "line": 75,
        "fullcodeline": "sorted_indices[row] = box_indices_after_regular_non_max_suppression[temp];"
    },
    {
        "line": 76,
        "fullcodeline": "sorted_values[row] = scores_after_regular_non_max_suppression[temp];"
    },
    {
        "line": 80,
        "fullcodeline": "box_indices_after_regular_non_max_suppression[row] = sorted_indices[row];"
    },
    {
        "line": 81,
        "fullcodeline": "scores_after_regular_non_max_suppression[row] = sorted_values[row];"
    },
    {
        "line": 90,
        "fullcodeline": "const int anchor_index = floor("
    },
    {
        "line": 93,
        "fullcodeline": "const int class_index ="
    },
    {
        "line": 96,
        "fullcodeline": "const float selected_score ="
    },
    {
        "line": 99,
        "fullcodeline": "ReInterpretTensor<BoxCornerEncoding*>(detection_boxes)[output_box_index] ="
    },
    {
        "line": 103,
        "fullcodeline": "GetTensorData<float>(detection_classes)[output_box_index] = class_index;"
    },
    {
        "line": 105,
        "fullcodeline": "GetTensorData<float>(detection_scores)[output_box_index] = selected_score;"
    },
    {
        "line": 60,
        "fullcodeline": "(selected_index * num_classes_with_background + col + label_offset);"
    },
    {
        "line": 94,
        "fullcodeline": "box_indices_after_regular_non_max_suppression[output_box_index] -"
    },
    {
        "line": 107,
        "fullcodeline": "ReInterpretTensor<BoxCornerEncoding*>("
    },
    {
        "line": 110,
        "fullcodeline": "GetTensorData<float>(detection_classes)[output_box_index] = 0.0f;"
    },
    {
        "line": 112,
        "fullcodeline": "GetTensorData<float>(detection_scores)[output_box_index] = 0.0f;"
    },
    {
        "line": 49,
        "fullcodeline": "*(scores + row * num_classes_with_background + col + label_offset);"
    },
    {
        "line": 91,
        "fullcodeline": "box_indices_after_regular_non_max_suppression[output_box_index] /"
    },
    {
        "line": 100,
        "fullcodeline": "ReInterpretTensor<const BoxCornerEncoding*>("
    },
    {
        "line": 95,
        "fullcodeline": "anchor_index * num_classes_with_background - label_offset;"
    }
]