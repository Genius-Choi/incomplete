[
    {
        "line": 3,
        "fullcodeline": "const TfLiteTensor* input = GetInput(context, node, kInputTensor);"
    },
    {
        "line": 4,
        "fullcodeline": "const int num_dims = NumDimensions(input);"
    },
    {
        "line": 5,
        "fullcodeline": "TF_LITE_ENSURE(context, num_dims >= 2);"
    },
    {
        "line": 6,
        "fullcodeline": "const TfLiteTensor* fft_length = GetInput(context, node, kFftLengthTensor);"
    },
    {
        "line": 7,
        "fullcodeline": "const int32_t* fft_length_data = GetTensorData<int32_t>(fft_length);"
    },
    {
        "line": 9,
        "fullcodeline": "TF_LITE_ENSURE(context, IsPowerOfTwo(fft_length_data[0]));"
    },
    {
        "line": 10,
        "fullcodeline": "TF_LITE_ENSURE(context, IsPowerOfTwo(fft_length_data[1]));"
    },
    {
        "line": 13,
        "fullcodeline": "fft_height = fft_length_data[0];"
    },
    {
        "line": 14,
        "fullcodeline": "fft_width = fft_length_data[1];"
    },
    {
        "line": 15,
        "fullcodeline": "int fft_working_length = std::max(fft_height, fft_width / 2);"
    },
    {
        "line": 16,
        "fullcodeline": "int half_fft_working_length = fft_working_length / 2;"
    },
    {
        "line": 19,
        "fullcodeline": "TfLiteTensor* output = GetOutput(context, node, kOutputTensor);"
    },
    {
        "line": 20,
        "fullcodeline": "TfLiteIntArray* output_shape = TfLiteIntArrayCopy(input->dims);"
    },
    {
        "line": 21,
        "fullcodeline": "output_shape->data[num_dims - 2] = fft_length_data[0];"
    },
    {
        "line": 22,
        "fullcodeline": "output_shape->data[num_dims - 1] = fft_length_data[1] / 2 + 1;"
    },
    {
        "line": 23,
        "fullcodeline": "TF_LITE_ENSURE_STATUS(context->ResizeTensor(context, output, output_shape));"
    },
    {
        "line": 26,
        "fullcodeline": "TfLiteTensor* fft_integer_working_area ="
    },
    {
        "line": 28,
        "fullcodeline": "TfLiteIntArray* fft_integer_working_area_shape = TfLiteIntArrayCreate(1);"
    },
    {
        "line": 29,
        "fullcodeline": "fft_integer_working_area_shape->data[0] ="
    },
    {
        "line": 31,
        "fullcodeline": "TF_LITE_ENSURE_STATUS(context->ResizeTensor(context, fft_integer_working_area,"
    },
    {
        "line": 35,
        "fullcodeline": "TfLiteTensor* fft_double_working_area ="
    },
    {
        "line": 37,
        "fullcodeline": "TfLiteIntArray* fft_double_working_area_shape = TfLiteIntArrayCreate(1);"
    },
    {
        "line": 38,
        "fullcodeline": "fft_double_working_area_shape->data[0] ="
    },
    {
        "line": 40,
        "fullcodeline": "TF_LITE_ENSURE_STATUS(context->ResizeTensor(context, fft_double_working_area,"
    },
    {
        "line": 27,
        "fullcodeline": "GetTemporary(context, node, kFftIntegerWorkingAreaTensor);"
    },
    {
        "line": 30,
        "fullcodeline": "2 + static_cast<int>(sqrt(fft_working_length));"
    },
    {
        "line": 36,
        "fullcodeline": "GetTemporary(context, node, kFftDoubleWorkingAreaTensor);"
    },
    {
        "line": 39,
        "fullcodeline": "half_fft_working_length + fft_width / 4;"
    }
]