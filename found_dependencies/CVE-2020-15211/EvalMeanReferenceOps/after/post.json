[
    {
        "line": 7,
        "fullcodeline": "op_params.axis_count = num_axis;"
    },
    {
        "line": 8,
        "fullcodeline": "ResolveAxis(GetTensorData<int>(op_context.axis), num_axis, &op_params);"
    },
    {
        "line": 9,
        "fullcodeline": "const TfLiteTensor* input = op_context.input;"
    },
    {
        "line": 12,
        "fullcodeline": "if (op_context.params->keep_dims && NumDimensions(input) == 4 &&"
    },
    {
        "line": 14,
        "fullcodeline": "((op_params.axis[0] == 1 && op_params.axis[1] == 2) ||"
    },
    {
        "line": 13,
        "fullcodeline": "op_params.axis_count == 2 &&"
    },
    {
        "line": 15,
        "fullcodeline": "(op_params.axis[0] == 2 && op_params.axis[1] == 1))) {"
    },
    {
        "line": 17,
        "fullcodeline": "reference_ops::Mean(op_params, GetTensorShape(op_context.input),"
    },
    {
        "line": 34,
        "fullcodeline": "} else if (input->params.zero_point == op_context.output->params.zero_point &&"
    },
    {
        "line": 18,
        "fullcodeline": "GetTensorData<uint8_t>(op_context.input),"
    },
    {
        "line": 21,
        "fullcodeline": "GetTensorShape(op_context.output),"
    },
    {
        "line": 22,
        "fullcodeline": "GetTensorData<uint8_t>(op_context.output),"
    },
    {
        "line": 26,
        "fullcodeline": "reference_integer_ops::Mean("
    },
    {
        "line": 36,
        "fullcodeline": "TF_LITE_ENSURE("
    },
    {
        "line": 27,
        "fullcodeline": "op_params, data->multiplier, data->shift, GetTensorShape(input),"
    },
    {
        "line": 28,
        "fullcodeline": "GetTensorData<integer_type>(input),"
    },
    {
        "line": 30,
        "fullcodeline": "GetTensorShape(op_context.output),"
    },
    {
        "line": 31,
        "fullcodeline": "GetTensorData<integer_type>(op_context.output),"
    },
    {
        "line": 38,
        "fullcodeline": "reference_ops::Mean("
    },
    {
        "line": 46,
        "fullcodeline": "TF_LITE_ENSURE("
    },
    {
        "line": 39,
        "fullcodeline": "GetTensorData<integer_type>(input), input->dims->data,"
    },
    {
        "line": 40,
        "fullcodeline": "input->dims->size, GetTensorData<integer_type>(op_context.output),"
    },
    {
        "line": 42,
        "fullcodeline": "GetTensorData<int>(op_context.axis), num_axis,"
    },
    {
        "line": 43,
        "fullcodeline": "op_context.params->keep_dims, GetTensorData<int>(temp_index),"
    },
    {
        "line": 44,
        "fullcodeline": "GetTensorData<int>(resolved_axis), GetTensorData<int>(temp_sum)));"
    },
    {
        "line": 48,
        "fullcodeline": "reference_ops::QuantizedMeanOrSum<>("
    },
    {
        "line": 49,
        "fullcodeline": "GetTensorData<integer_type>(input), input->params.zero_point,"
    },
    {
        "line": 51,
        "fullcodeline": "GetTensorData<integer_type>(op_context.output),"
    },
    {
        "line": 54,
        "fullcodeline": "op_context.output->dims->size, GetTensorData<int>(op_context.axis),"
    },
    {
        "line": 56,
        "fullcodeline": "GetTensorData<int>(temp_index), GetTensorData<int>(resolved_axis),"
    },
    {
        "line": 57,
        "fullcodeline": "GetTensorData<int>(temp_sum),"
    }
]