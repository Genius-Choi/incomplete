[
    {
        "line": 9,
        "fullcodeline": "const RuntimeShape& weight_shape = GetTensorShape(weight_tensor);"
    },
    {
        "line": 11,
        "fullcodeline": "const int row = weight_shape.Dims(0);"
    },
    {
        "line": 12,
        "fullcodeline": "const int col = weight_shape.Dims(1);"
    },
    {
        "line": 13,
        "fullcodeline": "output->reset(new int32_t[row]);"
    },
    {
        "line": 5,
        "fullcodeline": "if (weight_tensor == nullptr) {"
    },
    {
        "line": 10,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, weight_shape.DimensionsCount(), 2);"
    },
    {
        "line": 14,
        "fullcodeline": "if (bias_tensor == nullptr) {"
    },
    {
        "line": 20,
        "fullcodeline": "if (zero_point != 0) {"
    },
    {
        "line": 21,
        "fullcodeline": "const int8_t* weight = GetTensorData<int8_t>(weight_tensor);"
    },
    {
        "line": 15,
        "fullcodeline": "memset(output->get(), 0, row * sizeof(int32_t));"
    },
    {
        "line": 17,
        "fullcodeline": "const int32_t* bias = GetTensorData<int32_t>(bias_tensor);"
    },
    {
        "line": 23,
        "fullcodeline": "output->get());"
    },
    {
        "line": 18,
        "fullcodeline": "memcpy(output->get(), bias, row * sizeof(int32_t));"
    }
]