[
    {
        "line": 4,
        "fullcodeline": "const TfLiteTensor* input = GetInput(context, node, kInputTensor);"
    },
    {
        "line": 5,
        "fullcodeline": "const TfLiteTensor* output_state ="
    },
    {
        "line": 7,
        "fullcodeline": "TF_LITE_ENSURE(context, output_state != nullptr);"
    },
    {
        "line": 9,
        "fullcodeline": "const int32_t input_zero_point = -input->params.zero_point;"
    },
    {
        "line": 10,
        "fullcodeline": "const int32_t output_state_zero_point = -output_state->params.zero_point;"
    },
    {
        "line": 12,
        "fullcodeline": "const TfLiteTensor* input_to_input_weights ="
    },
    {
        "line": 14,
        "fullcodeline": "const TfLiteTensor* input_to_forget_weights ="
    },
    {
        "line": 16,
        "fullcodeline": "const TfLiteTensor* input_to_cell_weights ="
    },
    {
        "line": 18,
        "fullcodeline": "const TfLiteTensor* input_to_output_weights ="
    },
    {
        "line": 21,
        "fullcodeline": "const TfLiteTensor* recurrent_to_input_weights ="
    },
    {
        "line": 23,
        "fullcodeline": "const TfLiteTensor* recurrent_to_forget_weights ="
    },
    {
        "line": 25,
        "fullcodeline": "const TfLiteTensor* recurrent_to_cell_weights ="
    },
    {
        "line": 27,
        "fullcodeline": "const TfLiteTensor* recurrent_to_output_weights ="
    },
    {
        "line": 30,
        "fullcodeline": "const TfLiteTensor* projection_weights ="
    },
    {
        "line": 32,
        "fullcodeline": "const TfLiteTensor* projection_bias ="
    },
    {
        "line": 35,
        "fullcodeline": "lstm_eval::IntegerLstmParameter* integer_lstm_params ="
    },
    {
        "line": 38,
        "fullcodeline": "const TfLiteTensor* intermediate ="
    },
    {
        "line": 40,
        "fullcodeline": "const auto* params ="
    },
    {
        "line": 42,
        "fullcodeline": "const int32_t hidden_zp = params->zero_point->data[0];"
    },
    {
        "line": 48,
        "fullcodeline": "const bool is_layer_norm = op_data->use_layer_norm;"
    },
    {
        "line": 51,
        "fullcodeline": "const TfLiteTensor* forget_gate_bias ="
    },
    {
        "line": 53,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 59,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 66,
        "fullcodeline": "const TfLiteTensor* cell_gate_bias ="
    },
    {
        "line": 68,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 73,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 80,
        "fullcodeline": "const TfLiteTensor* output_gate_bias ="
    },
    {
        "line": 82,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 88,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 95,
        "fullcodeline": "const TfLiteTensor* input_gate_bias ="
    },
    {
        "line": 97,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 102,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 109,
        "fullcodeline": "TF_LITE_ENSURE_OK(context,"
    },
    {
        "line": 6,
        "fullcodeline": "GetVariableInput(context, node, kOutputStateTensor);"
    },
    {
        "line": 13,
        "fullcodeline": "GetOptionalInputTensor(context, node, kInputToInputWeightsTensor);"
    },
    {
        "line": 15,
        "fullcodeline": "GetInput(context, node, kInputToForgetWeightsTensor);"
    },
    {
        "line": 17,
        "fullcodeline": "GetInput(context, node, kInputToCellWeightsTensor);"
    },
    {
        "line": 19,
        "fullcodeline": "GetInput(context, node, kInputToOutputWeightsTensor);"
    },
    {
        "line": 22,
        "fullcodeline": "GetOptionalInputTensor(context, node, kRecurrentToInputWeightsTensor);"
    },
    {
        "line": 24,
        "fullcodeline": "GetInput(context, node, kRecurrentToForgetWeightsTensor);"
    },
    {
        "line": 26,
        "fullcodeline": "GetInput(context, node, kRecurrentToCellWeightsTensor);"
    },
    {
        "line": 28,
        "fullcodeline": "GetInput(context, node, kRecurrentToOutputWeightsTensor);"
    },
    {
        "line": 31,
        "fullcodeline": "GetOptionalInputTensor(context, node, kProjectionWeightsTensor);"
    },
    {
        "line": 33,
        "fullcodeline": "GetOptionalInputTensor(context, node, kProjectionBiasTensor);"
    },
    {
        "line": 41,
        "fullcodeline": "static_cast<TfLiteAffineQuantization*>(intermediate->quantization.params);"
    },
    {
        "line": 52,
        "fullcodeline": "is_layer_norm ? nullptr : GetInput(context, node, kForgetGateBiasTensor);"
    },
    {
        "line": 55,
        "fullcodeline": "PrecomputeZeroPointTimesWeightWithBias("
    },
    {
        "line": 61,
        "fullcodeline": "PrecomputeZeroPointTimesWeightWithBias("
    },
    {
        "line": 67,
        "fullcodeline": "is_layer_norm ? nullptr : GetInput(context, node, kCellGateBiasTensor);"
    },
    {
        "line": 70,
        "fullcodeline": "PrecomputeZeroPointTimesWeightWithBias("
    },
    {
        "line": 75,
        "fullcodeline": "PrecomputeZeroPointTimesWeightWithBias("
    },
    {
        "line": 81,
        "fullcodeline": "is_layer_norm ? nullptr : GetInput(context, node, kOutputGateBiasTensor);"
    },
    {
        "line": 84,
        "fullcodeline": "PrecomputeZeroPointTimesWeightWithBias("
    },
    {
        "line": 90,
        "fullcodeline": "PrecomputeZeroPointTimesWeightWithBias("
    },
    {
        "line": 96,
        "fullcodeline": "is_layer_norm ? nullptr : GetInput(context, node, kInputGateBiasTensor);"
    },
    {
        "line": 99,
        "fullcodeline": "PrecomputeZeroPointTimesWeightWithBias("
    },
    {
        "line": 104,
        "fullcodeline": "PrecomputeZeroPointTimesWeightWithBias("
    },
    {
        "line": 110,
        "fullcodeline": "PrecomputeZeroPointTimesWeightWithBias("
    }
]