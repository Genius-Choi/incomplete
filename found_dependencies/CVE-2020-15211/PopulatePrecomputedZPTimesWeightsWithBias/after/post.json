[
    {
        "line": 5,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));"
    },
    {
        "line": 6,
        "fullcodeline": "const TfLiteTensor* output_state ="
    },
    {
        "line": 8,
        "fullcodeline": "TF_LITE_ENSURE(context, output_state != nullptr);"
    },
    {
        "line": 10,
        "fullcodeline": "const int32_t input_zero_point = -input->params.zero_point;"
    },
    {
        "line": 11,
        "fullcodeline": "const int32_t output_state_zero_point = -output_state->params.zero_point;"
    },
    {
        "line": 13,
        "fullcodeline": "const TfLiteTensor* input_to_input_weights ="
    },
    {
        "line": 16,
        "fullcodeline": "TF_LITE_ENSURE_OK(context,"
    },
    {
        "line": 20,
        "fullcodeline": "TF_LITE_ENSURE_OK(context,"
    },
    {
        "line": 24,
        "fullcodeline": "TF_LITE_ENSURE_OK(context,"
    },
    {
        "line": 28,
        "fullcodeline": "const TfLiteTensor* recurrent_to_input_weights ="
    },
    {
        "line": 31,
        "fullcodeline": "TF_LITE_ENSURE_OK(context,"
    },
    {
        "line": 35,
        "fullcodeline": "TF_LITE_ENSURE_OK(context,"
    },
    {
        "line": 39,
        "fullcodeline": "TF_LITE_ENSURE_OK(context,"
    },
    {
        "line": 43,
        "fullcodeline": "const TfLiteTensor* projection_weights ="
    },
    {
        "line": 45,
        "fullcodeline": "const TfLiteTensor* projection_bias ="
    },
    {
        "line": 48,
        "fullcodeline": "lstm_eval::IntegerLstmParameter* integer_lstm_params ="
    },
    {
        "line": 61,
        "fullcodeline": "const bool is_layer_norm = op_data->use_layer_norm;"
    },
    {
        "line": 64,
        "fullcodeline": "const TfLiteTensor* forget_gate_bias ="
    },
    {
        "line": 66,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 72,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 79,
        "fullcodeline": "const TfLiteTensor* cell_gate_bias ="
    },
    {
        "line": 81,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 86,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 93,
        "fullcodeline": "const TfLiteTensor* output_gate_bias ="
    },
    {
        "line": 95,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 101,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 108,
        "fullcodeline": "const TfLiteTensor* input_gate_bias ="
    },
    {
        "line": 110,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 115,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 122,
        "fullcodeline": "TF_LITE_ENSURE_OK(context,"
    },
    {
        "line": 7,
        "fullcodeline": "GetVariableInput(context, node, kOutputStateTensor);"
    },
    {
        "line": 14,
        "fullcodeline": "GetOptionalInputTensor(context, node, kInputToInputWeightsTensor);"
    },
    {
        "line": 17,
        "fullcodeline": "GetInputSafe(context, node, kInputToForgetWeightsTensor,"
    },
    {
        "line": 21,
        "fullcodeline": "GetInputSafe(context, node, kInputToCellWeightsTensor,"
    },
    {
        "line": 25,
        "fullcodeline": "GetInputSafe(context, node, kInputToOutputWeightsTensor,"
    },
    {
        "line": 29,
        "fullcodeline": "GetOptionalInputTensor(context, node, kRecurrentToInputWeightsTensor);"
    },
    {
        "line": 32,
        "fullcodeline": "GetInputSafe(context, node, kRecurrentToForgetWeightsTensor,"
    },
    {
        "line": 36,
        "fullcodeline": "GetInputSafe(context, node, kRecurrentToCellWeightsTensor,"
    },
    {
        "line": 40,
        "fullcodeline": "GetInputSafe(context, node, kRecurrentToOutputWeightsTensor,"
    },
    {
        "line": 44,
        "fullcodeline": "GetOptionalInputTensor(context, node, kProjectionWeightsTensor);"
    },
    {
        "line": 46,
        "fullcodeline": "GetOptionalInputTensor(context, node, kProjectionBiasTensor);"
    },
    {
        "line": 65,
        "fullcodeline": "is_layer_norm ? nullptr : GetInput(context, node, kForgetGateBiasTensor);"
    },
    {
        "line": 68,
        "fullcodeline": "PrecomputeZeroPointTimesWeightWithBias("
    },
    {
        "line": 74,
        "fullcodeline": "PrecomputeZeroPointTimesWeightWithBias("
    },
    {
        "line": 80,
        "fullcodeline": "is_layer_norm ? nullptr : GetInput(context, node, kCellGateBiasTensor);"
    },
    {
        "line": 83,
        "fullcodeline": "PrecomputeZeroPointTimesWeightWithBias("
    },
    {
        "line": 88,
        "fullcodeline": "PrecomputeZeroPointTimesWeightWithBias("
    },
    {
        "line": 94,
        "fullcodeline": "is_layer_norm ? nullptr : GetInput(context, node, kOutputGateBiasTensor);"
    },
    {
        "line": 97,
        "fullcodeline": "PrecomputeZeroPointTimesWeightWithBias("
    },
    {
        "line": 103,
        "fullcodeline": "PrecomputeZeroPointTimesWeightWithBias("
    },
    {
        "line": 109,
        "fullcodeline": "is_layer_norm ? nullptr : GetInput(context, node, kInputGateBiasTensor);"
    },
    {
        "line": 112,
        "fullcodeline": "PrecomputeZeroPointTimesWeightWithBias("
    },
    {
        "line": 117,
        "fullcodeline": "PrecomputeZeroPointTimesWeightWithBias("
    },
    {
        "line": 123,
        "fullcodeline": "PrecomputeZeroPointTimesWeightWithBias("
    }
]