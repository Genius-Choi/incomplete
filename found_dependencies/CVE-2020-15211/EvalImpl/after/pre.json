[
    {
        "line": 8,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 1, &output_indexes));"
    },
    {
        "line": 9,
        "fullcodeline": "std::vector<T> output_values;"
    },
    {
        "line": 10,
        "fullcodeline": "I* indexes = GetTensorData<I>(output_indexes);"
    },
    {
        "line": 11,
        "fullcodeline": "const T* data = GetTensorData<T>(input);"
    },
    {
        "line": 12,
        "fullcodeline": "const int num_elements = NumElements(input);"
    },
    {
        "line": 27,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &unique_output));"
    },
    {
        "line": 28,
        "fullcodeline": "std::unique_ptr<TfLiteIntArray, void (*)(TfLiteIntArray*)> shape("
    },
    {
        "line": 30,
        "fullcodeline": "shape->data[0] = unique_values.size();"
    },
    {
        "line": 31,
        "fullcodeline": "TF_LITE_ENSURE_STATUS("
    },
    {
        "line": 34,
        "fullcodeline": "T* output_unique_values = GetTensorData<T>(unique_output);"
    },
    {
        "line": 14,
        "fullcodeline": "for (int i = 0; i < num_elements; ++i) {"
    },
    {
        "line": 29,
        "fullcodeline": "TfLiteIntArrayCreate(NumDimensions(input)), TfLiteIntArrayFree);"
    },
    {
        "line": 32,
        "fullcodeline": "context->ResizeTensor(context, unique_output, shape.release()));"
    },
    {
        "line": 35,
        "fullcodeline": "for (int i = 0; i < output_values.size(); ++i) {"
    },
    {
        "line": 15,
        "fullcodeline": "const auto element_it = unique_values.find(data[i]);"
    },
    {
        "line": 36,
        "fullcodeline": "output_unique_values[i] = output_values[i];"
    },
    {
        "line": 16,
        "fullcodeline": "if (element_it != unique_values.end()) {"
    },
    {
        "line": 17,
        "fullcodeline": "indexes[i] = element_it->second;"
    },
    {
        "line": 19,
        "fullcodeline": "const int unique_index = unique_values.size();"
    },
    {
        "line": 20,
        "fullcodeline": "unique_values[data[i]] = unique_index;"
    },
    {
        "line": 21,
        "fullcodeline": "indexes[i] = unique_index;"
    },
    {
        "line": 22,
        "fullcodeline": "output_values.push_back(data[i]);"
    }
]