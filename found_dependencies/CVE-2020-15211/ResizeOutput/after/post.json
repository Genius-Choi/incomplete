[
    {
        "line": 3,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));"
    },
    {
        "line": 5,
        "fullcodeline": "TF_LITE_ENSURE_OK(context,"
    },
    {
        "line": 8,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 11,
        "fullcodeline": "const int num_dimensions = NumDimensions(input);"
    },
    {
        "line": 12,
        "fullcodeline": "const int num_multipliers = NumElements(multipliers);"
    },
    {
        "line": 13,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, num_dimensions, num_multipliers);"
    },
    {
        "line": 6,
        "fullcodeline": "GetOutputSafe(context, node, kOutputTensor, &output));"
    },
    {
        "line": 9,
        "fullcodeline": "context, GetInputSafe(context, node, kInputMultipliers, &multipliers));"
    },
    {
        "line": 26,
        "fullcodeline": "context->ReportError("
    },
    {
        "line": 16,
        "fullcodeline": "return context->ResizeTensor("
    },
    {
        "line": 21,
        "fullcodeline": "return context->ResizeTensor("
    },
    {
        "line": 28,
        "fullcodeline": "TfLiteTypeGetName(multipliers->type));"
    },
    {
        "line": 18,
        "fullcodeline": "MultiplyShapeDims<int32_t>(*input->dims, multipliers,"
    },
    {
        "line": 23,
        "fullcodeline": "MultiplyShapeDims<int64_t>(*input->dims, multipliers,"
    }
]