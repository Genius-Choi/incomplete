[
    {
        "line": 2,
        "fullcodeline": "const LogSoftmaxOpData* data ="
    },
    {
        "line": 4,
        "fullcodeline": "const TfLiteTensor* input = GetInput(context, node, 0);"
    },
    {
        "line": 5,
        "fullcodeline": "TfLiteTensor* output = GetOutput(context, node, 0);"
    },
    {
        "line": 3,
        "fullcodeline": "reinterpret_cast<LogSoftmaxOpData*>(node->user_data);"
    },
    {
        "line": 21,
        "fullcodeline": "SoftmaxParams op_params = data->params;"
    },
    {
        "line": 35,
        "fullcodeline": "const auto input_shape = GetTensorShape(input);"
    },
    {
        "line": 36,
        "fullcodeline": "const auto output_shape = GetTensorShape(output);"
    },
    {
        "line": 37,
        "fullcodeline": "const int trailing_dim = input_shape.DimensionsCount() - 1;"
    },
    {
        "line": 38,
        "fullcodeline": "const int outer_size ="
    },
    {
        "line": 40,
        "fullcodeline": "const int depth ="
    },
    {
        "line": 53,
        "fullcodeline": "TfLiteTypeGetName(input->type));"
    },
    {
        "line": 9,
        "fullcodeline": "if (kernel_type == kGenericOptimized) {"
    },
    {
        "line": 39,
        "fullcodeline": "MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);"
    },
    {
        "line": 41,
        "fullcodeline": "MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);"
    },
    {
        "line": 45,
        "fullcodeline": "data->diff_min, outer_size, depth, GetTensorData<int8_t>(input),"
    },
    {
        "line": 46,
        "fullcodeline": "GetTensorData<int8_t>(output));"
    },
    {
        "line": 10,
        "fullcodeline": "optimized_ops::LogSoftmax("
    },
    {
        "line": 11,
        "fullcodeline": "op_params, GetTensorShape(input), GetTensorData<float>(input),"
    },
    {
        "line": 12,
        "fullcodeline": "GetTensorShape(output), GetTensorData<float>(output));"
    },
    {
        "line": 14,
        "fullcodeline": "reference_ops::LogSoftmax("
    },
    {
        "line": 24,
        "fullcodeline": "op_params, input->params.scale, GetTensorShape(input),"
    },
    {
        "line": 25,
        "fullcodeline": "GetTensorData<uint8_t>(input), GetTensorShape(output),"
    },
    {
        "line": 26,
        "fullcodeline": "GetTensorData<uint8_t>(output));"
    },
    {
        "line": 15,
        "fullcodeline": "op_params, GetTensorShape(input), GetTensorData<float>(input),"
    },
    {
        "line": 16,
        "fullcodeline": "GetTensorShape(output), GetTensorData<float>(output));"
    },
    {
        "line": 29,
        "fullcodeline": "op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),"
    },
    {
        "line": 30,
        "fullcodeline": "GetTensorShape(output), GetTensorData<uint8_t>(output));"
    }
]