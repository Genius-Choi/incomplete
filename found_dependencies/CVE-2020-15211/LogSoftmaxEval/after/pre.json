[
    {
        "line": 2,
        "fullcodeline": "const LogSoftmaxOpData* data ="
    },
    {
        "line": 5,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &input));"
    },
    {
        "line": 7,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output));"
    },
    {
        "line": 3,
        "fullcodeline": "reinterpret_cast<LogSoftmaxOpData*>(node->user_data);"
    },
    {
        "line": 23,
        "fullcodeline": "SoftmaxParams op_params = data->params;"
    },
    {
        "line": 37,
        "fullcodeline": "const auto input_shape = GetTensorShape(input);"
    },
    {
        "line": 38,
        "fullcodeline": "const auto output_shape = GetTensorShape(output);"
    },
    {
        "line": 39,
        "fullcodeline": "const int trailing_dim = input_shape.DimensionsCount() - 1;"
    },
    {
        "line": 40,
        "fullcodeline": "const int outer_size ="
    },
    {
        "line": 42,
        "fullcodeline": "const int depth ="
    },
    {
        "line": 55,
        "fullcodeline": "TfLiteTypeGetName(input->type));"
    },
    {
        "line": 11,
        "fullcodeline": "if (kernel_type == kGenericOptimized) {"
    },
    {
        "line": 41,
        "fullcodeline": "MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);"
    },
    {
        "line": 43,
        "fullcodeline": "MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);"
    },
    {
        "line": 47,
        "fullcodeline": "data->diff_min, outer_size, depth, GetTensorData<int8_t>(input),"
    },
    {
        "line": 48,
        "fullcodeline": "GetTensorData<int8_t>(output));"
    },
    {
        "line": 12,
        "fullcodeline": "optimized_ops::LogSoftmax("
    },
    {
        "line": 13,
        "fullcodeline": "op_params, GetTensorShape(input), GetTensorData<float>(input),"
    },
    {
        "line": 14,
        "fullcodeline": "GetTensorShape(output), GetTensorData<float>(output));"
    },
    {
        "line": 16,
        "fullcodeline": "reference_ops::LogSoftmax("
    },
    {
        "line": 26,
        "fullcodeline": "op_params, input->params.scale, GetTensorShape(input),"
    },
    {
        "line": 27,
        "fullcodeline": "GetTensorData<uint8_t>(input), GetTensorShape(output),"
    },
    {
        "line": 28,
        "fullcodeline": "GetTensorData<uint8_t>(output));"
    },
    {
        "line": 17,
        "fullcodeline": "op_params, GetTensorShape(input), GetTensorData<float>(input),"
    },
    {
        "line": 18,
        "fullcodeline": "GetTensorShape(output), GetTensorData<float>(output));"
    },
    {
        "line": 31,
        "fullcodeline": "op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),"
    },
    {
        "line": 32,
        "fullcodeline": "GetTensorShape(output), GetTensorData<uint8_t>(output));"
    }
]