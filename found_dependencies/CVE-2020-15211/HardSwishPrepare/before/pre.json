[
    {
        "line": 2,
        "fullcodeline": "TFLITE_DCHECK(node->user_data != nullptr);"
    },
    {
        "line": 3,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);"
    },
    {
        "line": 4,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);"
    },
    {
        "line": 6,
        "fullcodeline": "const TfLiteTensor* input = GetInput(context, node, kInputTensor);"
    },
    {
        "line": 7,
        "fullcodeline": "TfLiteTensor* output = GetOutput(context, node, kOutputTensor);"
    },
    {
        "line": 9,
        "fullcodeline": "if (input->type == kTfLiteUInt8 || input->type == kTfLiteInt8) {"
    },
    {
        "line": 10,
        "fullcodeline": "HardSwishParams* params = static_cast<HardSwishParams*>(node->user_data);"
    },
    {
        "line": 12,
        "fullcodeline": "params->input_zero_point = input->params.zero_point;"
    },
    {
        "line": 13,
        "fullcodeline": "params->output_zero_point = output->params.zero_point;"
    },
    {
        "line": 15,
        "fullcodeline": "const float input_scale = input->params.scale;"
    },
    {
        "line": 16,
        "fullcodeline": "const float hires_input_scale = (1.0f / 128.0f) * input_scale;"
    },
    {
        "line": 17,
        "fullcodeline": "const float reluish_scale = 3.0f / 32768.0f;"
    },
    {
        "line": 18,
        "fullcodeline": "const float output_scale = output->params.scale;"
    },
    {
        "line": 20,
        "fullcodeline": "const double output_multiplier ="
    },
    {
        "line": 23,
        "fullcodeline": "QuantizeMultiplier(output_multiplier, &output_multiplier_fixedpoint_int32,"
    },
    {
        "line": 25,
        "fullcodeline": "DownScaleInt32ToInt16Multiplier("
    },
    {
        "line": 29,
        "fullcodeline": "TF_LITE_ENSURE(context, params->output_multiplier_exponent <= 0);"
    },
    {
        "line": 31,
        "fullcodeline": "const double reluish_multiplier ="
    },
    {
        "line": 34,
        "fullcodeline": "QuantizeMultiplier(reluish_multiplier, &reluish_multiplier_fixedpoint_int32,"
    },
    {
        "line": 36,
        "fullcodeline": "DownScaleInt32ToInt16Multiplier("
    },
    {
        "line": 21,
        "fullcodeline": "static_cast<double>(hires_input_scale / output_scale);"
    },
    {
        "line": 32,
        "fullcodeline": "static_cast<double>(hires_input_scale / reluish_scale);"
    }
]