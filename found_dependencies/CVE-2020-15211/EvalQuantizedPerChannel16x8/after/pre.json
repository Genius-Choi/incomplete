[
    {
        "line": 7,
        "fullcodeline": "op_params.padding_type = PaddingType::kSame;"
    },
    {
        "line": 8,
        "fullcodeline": "op_params.padding_values.width = data->padding.width;"
    },
    {
        "line": 9,
        "fullcodeline": "op_params.padding_values.height = data->padding.height;"
    },
    {
        "line": 10,
        "fullcodeline": "op_params.padding_values.width_offset = data->padding.width_offset;"
    },
    {
        "line": 11,
        "fullcodeline": "op_params.padding_values.height_offset = data->padding.height_offset;"
    },
    {
        "line": 12,
        "fullcodeline": "op_params.stride_width = params->stride_width;"
    },
    {
        "line": 13,
        "fullcodeline": "op_params.stride_height = params->stride_height;"
    },
    {
        "line": 16,
        "fullcodeline": "op_params.input_offset = -input->params.zero_point;"
    },
    {
        "line": 17,
        "fullcodeline": "op_params.output_offset = output->params.zero_point;"
    },
    {
        "line": 18,
        "fullcodeline": "op_params.quantized_activation_min = data->output_activation_min;"
    },
    {
        "line": 19,
        "fullcodeline": "op_params.quantized_activation_max = data->output_activation_max;"
    },
    {
        "line": 22,
        "fullcodeline": "reference_integer_ops::TransposeConv("
    },
    {
        "line": 23,
        "fullcodeline": "op_params, data->per_channel_output_multiplier.data(),"
    },
    {
        "line": 24,
        "fullcodeline": "data->per_channel_output_shift.data(), GetTensorShape(input),"
    },
    {
        "line": 25,
        "fullcodeline": "GetTensorData<int16>(input), GetTensorShape(weights),"
    },
    {
        "line": 26,
        "fullcodeline": "GetTensorData<int8>(weights), GetTensorShape(bias),"
    },
    {
        "line": 27,
        "fullcodeline": "GetTensorData<int64_t>(bias), GetTensorShape(output),"
    },
    {
        "line": 28,
        "fullcodeline": "GetTensorData<int16>(output), GetTensorShape(col2im),"
    },
    {
        "line": 29,
        "fullcodeline": "GetTensorData<int8>(col2im), GetTensorData<int64_t>(scratch_buffer));"
    }
]