[
    {
        "line": 2,
        "fullcodeline": "OpData* data = reinterpret_cast<OpData*>(node->user_data);"
    },
    {
        "line": 4,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);"
    },
    {
        "line": 5,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);"
    },
    {
        "line": 6,
        "fullcodeline": "const TfLiteTensor* input = GetInput(context, node, 0);"
    },
    {
        "line": 7,
        "fullcodeline": "TfLiteTensor* output = GetOutput(context, node, 0);"
    },
    {
        "line": 8,
        "fullcodeline": "TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);"
    },
    {
        "line": 10,
        "fullcodeline": "if (kernel_type == kFixedPointOptimized) {"
    },
    {
        "line": 39,
        "fullcodeline": "if (kernel_type == kGenericOptimized || kernel_type == kReference) {"
    },
    {
        "line": 56,
        "fullcodeline": "if (input->type == kTfLiteInt16) {"
    },
    {
        "line": 91,
        "fullcodeline": "return context->ResizeTensor(context, output,"
    },
    {
        "line": 57,
        "fullcodeline": "static constexpr int kInputIntegerBits = 3;"
    },
    {
        "line": 58,
        "fullcodeline": "static constexpr int kOutputFractionalBits = 15;"
    },
    {
        "line": 63,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, input->params.zero_point, 0);"
    },
    {
        "line": 64,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);"
    },
    {
        "line": 67,
        "fullcodeline": "bool param_scale_pot ="
    },
    {
        "line": 70,
        "fullcodeline": "data->input_left_shift ="
    },
    {
        "line": 72,
        "fullcodeline": "param_scale_pot &= (data->input_left_shift == 0);"
    },
    {
        "line": 85,
        "fullcodeline": "TF_LITE_ENSURE("
    },
    {
        "line": 87,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, output_scale_log2_rounded,"
    },
    {
        "line": 92,
        "fullcodeline": "TfLiteIntArrayCopy(input->dims));"
    },
    {
        "line": 11,
        "fullcodeline": "if (input->type == kTfLiteUInt8 || input->type == kTfLiteInt8) {"
    },
    {
        "line": 40,
        "fullcodeline": "if (input->type == kTfLiteUInt8) {"
    },
    {
        "line": 68,
        "fullcodeline": "CheckedLog2(input->params.scale, &input_scale_log2_rounded);"
    },
    {
        "line": 71,
        "fullcodeline": "(15 - kInputIntegerBits) + input_scale_log2_rounded;"
    },
    {
        "line": 74,
        "fullcodeline": "if (!param_scale_pot) {"
    },
    {
        "line": 86,
        "fullcodeline": "context, CheckedLog2(output->params.scale, &output_scale_log2_rounded));"
    },
    {
        "line": 88,
        "fullcodeline": "-kOutputFractionalBits);"
    },
    {
        "line": 20,
        "fullcodeline": "TF_LITE_ENSURE(context, output->params.scale == 1. / 256);"
    },
    {
        "line": 22,
        "fullcodeline": "static constexpr int kInputIntegerBits = 4;"
    },
    {
        "line": 24,
        "fullcodeline": "const double input_real_multiplier ="
    },
    {
        "line": 28,
        "fullcodeline": "const double q ="
    },
    {
        "line": 30,
        "fullcodeline": "auto q_fixed = static_cast<int32_t>(TfLiteRound(q * (1ll << 15)));"
    },
    {
        "line": 31,
        "fullcodeline": "data->input_multiplier = static_cast<int16_t>(q_fixed);"
    },
    {
        "line": 33,
        "fullcodeline": "int16_t input_range_radius ="
    },
    {
        "line": 35,
        "fullcodeline": "data->input_range_radius = input_range_radius;"
    },
    {
        "line": 41,
        "fullcodeline": "TF_LITE_ENSURE(context, output->params.scale == 1. / 256);"
    },
    {
        "line": 42,
        "fullcodeline": "PopulateLookupTable<uint8_t>(data, input, output, [](float value) {"
    },
    {
        "line": 81,
        "fullcodeline": "data->input_multiplier = static_cast<int32_t>(input->params.scale * 4096);"
    },
    {
        "line": 12,
        "fullcodeline": "if (input->type == kTfLiteUInt8) {"
    },
    {
        "line": 16,
        "fullcodeline": "if (input->type == kTfLiteInt8) {"
    },
    {
        "line": 25,
        "fullcodeline": "input->params.scale *"
    },
    {
        "line": 29,
        "fullcodeline": "std::frexp(input_real_multiplier, &data->input_left_shift);"
    },
    {
        "line": 34,
        "fullcodeline": "CalculateInputRadius(kInputIntegerBits, data->input_left_shift, 15);"
    },
    {
        "line": 13,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, output->params.zero_point,"
    },
    {
        "line": 17,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, output->params.zero_point,"
    },
    {
        "line": 26,
        "fullcodeline": "static_cast<double>(1 << (15 - kInputIntegerBits));"
    },
    {
        "line": 45,
        "fullcodeline": "} else if (input->type == kTfLiteInt8) {"
    },
    {
        "line": 14,
        "fullcodeline": "std::numeric_limits<uint8_t>::min());"
    },
    {
        "line": 18,
        "fullcodeline": "std::numeric_limits<int8_t>::min());"
    },
    {
        "line": 46,
        "fullcodeline": "TF_LITE_ENSURE(context, output->params.scale == 1. / 256);"
    },
    {
        "line": 47,
        "fullcodeline": "PopulateLookupTable<int8_t>(data, input, output, [](float value) {"
    },
    {
        "line": 50,
        "fullcodeline": "} else if (input->type == kTfLiteInt16) {"
    },
    {
        "line": 51,
        "fullcodeline": "TF_LITE_ENSURE(context, output->params.scale == 1. / 32768);"
    },
    {
        "line": 52,
        "fullcodeline": "TF_LITE_ENSURE(context, output->params.zero_point == 0);"
    }
]