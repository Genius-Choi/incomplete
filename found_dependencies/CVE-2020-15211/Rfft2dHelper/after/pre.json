[
    {
        "line": 3,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));"
    },
    {
        "line": 4,
        "fullcodeline": "const float* input_data = GetTensorData<float>(input);"
    },
    {
        "line": 6,
        "fullcodeline": "TF_LITE_ENSURE_OK(context,"
    },
    {
        "line": 8,
        "fullcodeline": "const int32_t* fft_length_data = GetTensorData<int32_t>(fft_length);"
    },
    {
        "line": 10,
        "fullcodeline": "TF_LITE_ENSURE_OK(context,"
    },
    {
        "line": 12,
        "fullcodeline": "complex<float>* output_data = GetTensorData<complex<float>>(output);"
    },
    {
        "line": 15,
        "fullcodeline": "fft_height = fft_length_data[0];"
    },
    {
        "line": 16,
        "fullcodeline": "fft_width = fft_length_data[1];"
    },
    {
        "line": 20,
        "fullcodeline": "const RuntimeShape input_shape = GetTensorShape(input);"
    },
    {
        "line": 21,
        "fullcodeline": "const int input_dims_count = input_shape.DimensionsCount();"
    },
    {
        "line": 22,
        "fullcodeline": "const auto* input_dims_data = input_shape.DimsData();"
    },
    {
        "line": 23,
        "fullcodeline": "int num_slices = 1;"
    },
    {
        "line": 28,
        "fullcodeline": "int input_height = input_dims_data[input_dims_count - 2];"
    },
    {
        "line": 29,
        "fullcodeline": "int input_width = input_dims_data[input_dims_count - 1];"
    },
    {
        "line": 30,
        "fullcodeline": "int input_slice_size = input_height * input_width;"
    },
    {
        "line": 31,
        "fullcodeline": "int output_slice_size = fft_height * (fft_width / 2 + 1);"
    },
    {
        "line": 34,
        "fullcodeline": "double** fft_input_output = new double*[fft_height];"
    },
    {
        "line": 41,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 44,
        "fullcodeline": "int* fft_integer_working_area_data ="
    },
    {
        "line": 49,
        "fullcodeline": "TF_LITE_ENSURE_OK(context,"
    },
    {
        "line": 53,
        "fullcodeline": "double* fft_double_working_area_data = reinterpret_cast<double*>("
    },
    {
        "line": 73,
        "fullcodeline": "delete[] fft_input_output;"
    },
    {
        "line": 7,
        "fullcodeline": "GetInputSafe(context, node, kFftLengthTensor, &fft_length));"
    },
    {
        "line": 11,
        "fullcodeline": "GetOutputSafe(context, node, kOutputTensor, &output));"
    },
    {
        "line": 24,
        "fullcodeline": "for (int i = 0; i < input_dims_count - 2; ++i) {"
    },
    {
        "line": 35,
        "fullcodeline": "for (int i = 0; i < fft_height; ++i) {"
    },
    {
        "line": 42,
        "fullcodeline": "context, GetTemporarySafe(context, node, kFftIntegerWorkingAreaTensor,"
    },
    {
        "line": 45,
        "fullcodeline": "GetTensorData<int>(fft_integer_working_area);"
    },
    {
        "line": 50,
        "fullcodeline": "GetTemporarySafe(context, node, kFftDoubleWorkingAreaTensor,"
    },
    {
        "line": 57,
        "fullcodeline": "for (int i = 0; i < num_slices; ++i) {"
    },
    {
        "line": 70,
        "fullcodeline": "for (int i = 0; i < fft_height; ++i) {"
    },
    {
        "line": 25,
        "fullcodeline": "num_slices *= input_dims_data[i];"
    },
    {
        "line": 36,
        "fullcodeline": "fft_input_output[i] = new double[fft_width + 2];"
    },
    {
        "line": 54,
        "fullcodeline": "GetTensorData<int64_t>(fft_double_working_area));"
    },
    {
        "line": 58,
        "fullcodeline": "PrepareInputBuffer(input_data, input_height, input_width, fft_height,"
    },
    {
        "line": 60,
        "fullcodeline": "memset(fft_integer_working_area_data, 0, fft_integer_working_area->bytes);"
    },
    {
        "line": 61,
        "fullcodeline": "memset(fft_double_working_area_data, 0, fft_double_working_area->bytes);"
    },
    {
        "line": 62,
        "fullcodeline": "Rfft2dImpl(fft_height, fft_width, fft_input_output,"
    },
    {
        "line": 64,
        "fullcodeline": "PrepareOutputBuffer(output_data, fft_height, fft_width, fft_input_output);"
    },
    {
        "line": 65,
        "fullcodeline": "input_data += input_slice_size;"
    },
    {
        "line": 66,
        "fullcodeline": "output_data += output_slice_size;"
    },
    {
        "line": 71,
        "fullcodeline": "delete[] fft_input_output[i];"
    }
]