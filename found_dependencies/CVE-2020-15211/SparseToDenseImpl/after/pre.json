[
    {
        "line": 3,
        "fullcodeline": "TF_LITE_ENSURE_OK(context,"
    },
    {
        "line": 6,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 9,
        "fullcodeline": "TF_LITE_ENSURE_OK(context,"
    },
    {
        "line": 12,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kDefaultValueTensor,"
    },
    {
        "line": 15,
        "fullcodeline": "TF_LITE_ENSURE_OK(context,"
    },
    {
        "line": 23,
        "fullcodeline": "const int num_indices = SizeOfDimension(indices, 0);"
    },
    {
        "line": 24,
        "fullcodeline": "const bool value_is_scalar = NumDimensions(values) == 0;"
    },
    {
        "line": 25,
        "fullcodeline": "std::vector<std::vector<TI>> indices_vector;"
    },
    {
        "line": 26,
        "fullcodeline": "indices_vector.reserve(num_indices);"
    },
    {
        "line": 27,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, GetIndicesVector<TI>(context, indices, num_indices,"
    },
    {
        "line": 29,
        "fullcodeline": "reference_ops::SparseToDense(indices_vector, GetTensorData<T>(values),"
    },
    {
        "line": 4,
        "fullcodeline": "GetInputSafe(context, node, kIndicesTensor, &indices));"
    },
    {
        "line": 7,
        "fullcodeline": "context, GetInputSafe(context, node, kOutputShapeTensor, &output_shape));"
    },
    {
        "line": 10,
        "fullcodeline": "GetInputSafe(context, node, kValueInputTensor, &values));"
    },
    {
        "line": 16,
        "fullcodeline": "GetOutputSafe(context, node, kOutputTensor, &output));"
    },
    {
        "line": 18,
        "fullcodeline": "if (IsDynamicTensor(output)) {"
    },
    {
        "line": 30,
        "fullcodeline": "*GetTensorData<T>(default_value),"
    },
    {
        "line": 31,
        "fullcodeline": "value_is_scalar, GetTensorShape(output),"
    },
    {
        "line": 32,
        "fullcodeline": "GetTensorData<T>(output));"
    },
    {
        "line": 19,
        "fullcodeline": "TF_LITE_ENSURE_OK(context,"
    },
    {
        "line": 20,
        "fullcodeline": "ResizeOutputShape(context, output_shape, output));"
    }
]