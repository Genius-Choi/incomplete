[
    {
        "line": 2,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, NumInputs(node), 2);"
    },
    {
        "line": 3,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);"
    },
    {
        "line": 5,
        "fullcodeline": "const TfLiteTensor* input = GetInput(context, node, kInputTensor);"
    },
    {
        "line": 6,
        "fullcodeline": "const TfLiteTensor* size = GetInput(context, node, kSizeTensor);"
    },
    {
        "line": 7,
        "fullcodeline": "TfLiteTensor* output = GetOutput(context, node, kOutputTensor);"
    },
    {
        "line": 10,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, NumDimensions(input), 4);"
    },
    {
        "line": 11,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, NumDimensions(size), 1);"
    },
    {
        "line": 13,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, size->type, kTfLiteInt32);"
    },
    {
        "line": 16,
        "fullcodeline": "output->type = input->type;"
    },
    {
        "line": 24,
        "fullcodeline": "auto* params ="
    },
    {
        "line": 18,
        "fullcodeline": "if (!IsConstantTensor(size)) {"
    },
    {
        "line": 25,
        "fullcodeline": "reinterpret_cast<TfLiteResizeBilinearParams*>(node->builtin_data);"
    },
    {
        "line": 26,
        "fullcodeline": "if (params->half_pixel_centers && params->align_corners) {"
    },
    {
        "line": 32,
        "fullcodeline": "return ResizeOutputTensor(context, input, size, output);"
    },
    {
        "line": 19,
        "fullcodeline": "SetTensorToDynamic(output);"
    },
    {
        "line": 27,
        "fullcodeline": "context->ReportError("
    }
]