[
    {
        "line": 2,
        "fullcodeline": "auto* params ="
    },
    {
        "line": 5,
        "fullcodeline": "const TfLiteTensor* input = GetInput(context, node, kInputTensor);"
    },
    {
        "line": 6,
        "fullcodeline": "TfLiteTensor* output = GetOutput(context, node, kOutputTensor);"
    },
    {
        "line": 7,
        "fullcodeline": "const TfLiteTensor* size = GetInput(context, node, kSizeTensor);"
    },
    {
        "line": 3,
        "fullcodeline": "reinterpret_cast<TfLiteResizeBilinearParams*>(node->builtin_data);"
    },
    {
        "line": 9,
        "fullcodeline": "if (IsDynamicTensor(output)) {"
    },
    {
        "line": 14,
        "fullcodeline": "if (output->type == kTfLiteFloat32) {"
    },
    {
        "line": 10,
        "fullcodeline": "TF_LITE_ENSURE_OK(context,"
    },
    {
        "line": 11,
        "fullcodeline": "ResizeOutputTensor(context, input, size, output));"
    },
    {
        "line": 24,
        "fullcodeline": "if (kernel_type == kReference) {"
    },
    {
        "line": 27,
        "fullcodeline": "if (kernel_type == kGenericOptimized || kernel_type == kNeonOptimized) {"
    },
    {
        "line": 25,
        "fullcodeline": "TF_LITE_RESIZE_BILINEAR(reference_ops, float);"
    },
    {
        "line": 28,
        "fullcodeline": "TF_LITE_RESIZE_BILINEAR(optimized_ops, float);"
    },
    {
        "line": 30,
        "fullcodeline": "} else if (output->type == kTfLiteUInt8) {"
    },
    {
        "line": 31,
        "fullcodeline": "if (kernel_type == kReference) {"
    },
    {
        "line": 34,
        "fullcodeline": "if (kernel_type == kGenericOptimized || kernel_type == kNeonOptimized) {"
    },
    {
        "line": 32,
        "fullcodeline": "TF_LITE_RESIZE_BILINEAR(reference_ops, uint8_t);"
    },
    {
        "line": 35,
        "fullcodeline": "TF_LITE_RESIZE_BILINEAR(optimized_ops, uint8_t);"
    },
    {
        "line": 37,
        "fullcodeline": "} else if (output->type == kTfLiteInt8) {"
    },
    {
        "line": 38,
        "fullcodeline": "TF_LITE_RESIZE_BILINEAR(reference_ops, int8_t);"
    },
    {
        "line": 41,
        "fullcodeline": "context->ReportError(context, \"Output type is %d, requires float.\","
    }
]