[
    {
        "line": 7,
        "fullcodeline": "CalculateActivationRange(params->activation, &output_activation_min,"
    },
    {
        "line": 10,
        "fullcodeline": "const int input_size = NumElements(input) / SizeOfDimension(input, 0);"
    },
    {
        "line": 11,
        "fullcodeline": "const int batch_size = SizeOfDimension(input, 0);"
    },
    {
        "line": 12,
        "fullcodeline": "int8_t* quantized_input_ptr_batch = GetTensorData<int8_t>("
    },
    {
        "line": 14,
        "fullcodeline": "float* scaling_factors_ptr = GetTensorData<float>("
    },
    {
        "line": 16,
        "fullcodeline": "int32_t* input_offset_ptr = GetTensorData<int32_t>("
    },
    {
        "line": 27,
        "fullcodeline": "int8_t* im2col_ptr = nullptr;"
    },
    {
        "line": 28,
        "fullcodeline": "int8_t* filter_ptr = nullptr;"
    },
    {
        "line": 39,
        "fullcodeline": "op_params.stride_width = params->stride_width;"
    },
    {
        "line": 40,
        "fullcodeline": "op_params.stride_height = params->stride_height;"
    },
    {
        "line": 41,
        "fullcodeline": "op_params.dilation_width_factor = 1;"
    },
    {
        "line": 42,
        "fullcodeline": "op_params.dilation_height_factor = 1;"
    },
    {
        "line": 43,
        "fullcodeline": "op_params.float_activation_min = output_activation_min;"
    },
    {
        "line": 44,
        "fullcodeline": "op_params.float_activation_max = output_activation_max;"
    },
    {
        "line": 19,
        "fullcodeline": "for (int b = 0; b < batch_size; ++b) {"
    },
    {
        "line": 29,
        "fullcodeline": "if (im2col != nullptr) {"
    },
    {
        "line": 13,
        "fullcodeline": "GetTemporary(context, node, data->input_quantized_index));"
    },
    {
        "line": 15,
        "fullcodeline": "GetTemporary(context, node, data->scaling_factors_index));"
    },
    {
        "line": 17,
        "fullcodeline": "GetTemporary(context, node, data->input_offset_index));"
    },
    {
        "line": 20,
        "fullcodeline": "const int offset = b * input_size;"
    },
    {
        "line": 21,
        "fullcodeline": "tensor_utils::AsymmetricQuantizeFloats("
    },
    {
        "line": 47,
        "fullcodeline": "reference_ops::HybridConvPerChannel("
    },
    {
        "line": 22,
        "fullcodeline": "GetTensorData<float>(input) + offset, input_size,"
    },
    {
        "line": 23,
        "fullcodeline": "quantized_input_ptr_batch + offset, &scaling_factors_ptr[b],"
    },
    {
        "line": 48,
        "fullcodeline": "op_params, scaling_factors_ptr, GetTensorShape(input),"
    },
    {
        "line": 49,
        "fullcodeline": "quantized_input_ptr_batch, GetTensorShape(filter), filter_ptr,"
    },
    {
        "line": 50,
        "fullcodeline": "GetTensorShape(bias), GetTensorData<float>(bias),"
    },
    {
        "line": 51,
        "fullcodeline": "GetTensorShape(output), GetTensorData<float>(output),"
    },
    {
        "line": 52,
        "fullcodeline": "GetTensorShape(im2col), im2col_ptr, affine_quantization->scale->data,"
    },
    {
        "line": 58,
        "fullcodeline": "TfLiteTensor* row_sums ="
    },
    {
        "line": 60,
        "fullcodeline": "TfLiteTensor* scratch ="
    },
    {
        "line": 62,
        "fullcodeline": "optimized_ops::HybridConvPerChannel("
    },
    {
        "line": 72,
        "fullcodeline": "data->compute_hybrid_row_sums = false;"
    },
    {
        "line": 59,
        "fullcodeline": "GetTemporary(context, node, data->row_sums_index);"
    },
    {
        "line": 61,
        "fullcodeline": "GetTemporary(context, node, data->accum_scratch_index);"
    },
    {
        "line": 63,
        "fullcodeline": "op_params, scaling_factors_ptr, GetTensorShape(input),"
    },
    {
        "line": 64,
        "fullcodeline": "quantized_input_ptr_batch, GetTensorShape(filter), filter_ptr,"
    },
    {
        "line": 65,
        "fullcodeline": "GetTensorShape(bias), GetTensorData<float>(bias),"
    },
    {
        "line": 66,
        "fullcodeline": "GetTensorShape(output), GetTensorData<float>(output),"
    },
    {
        "line": 67,
        "fullcodeline": "GetTensorShape(im2col), im2col_ptr, affine_quantization->scale->data,"
    },
    {
        "line": 68,
        "fullcodeline": "input_offset_ptr, GetTensorShape(scratch),"
    },
    {
        "line": 69,
        "fullcodeline": "GetTensorData<int32>(scratch), GetTensorData<int32_t>(row_sums),"
    },
    {
        "line": 71,
        "fullcodeline": "CpuBackendContext::GetFromContext(context));"
    }
]