[
    {
        "line": 6,
        "fullcodeline": "auto* params = reinterpret_cast<TfLiteConvParams*>(node->builtin_data);"
    },
    {
        "line": 7,
        "fullcodeline": "OpData* data = reinterpret_cast<OpData*>(node->user_data);"
    },
    {
        "line": 9,
        "fullcodeline": "TF_LITE_ENSURE(context, node->inputs->size >= 2);"
    },
    {
        "line": 11,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &input));"
    },
    {
        "line": 13,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 1, &filter));"
    },
    {
        "line": 24,
        "fullcodeline": "data->need_hwcn_weights ="
    },
    {
        "line": 30,
        "fullcodeline": "data->need_im2col ="
    },
    {
        "line": 33,
        "fullcodeline": "int temporaries_count = 0;"
    },
    {
        "line": 91,
        "fullcodeline": "TfLiteIntArrayFree(node->temporaries);"
    },
    {
        "line": 92,
        "fullcodeline": "node->temporaries = TfLiteIntArrayCreate(temporaries_count);"
    },
    {
        "line": 25,
        "fullcodeline": "input->type == kTfLiteFloat32 && data->supports_multithreaded_kernel;"
    },
    {
        "line": 31,
        "fullcodeline": "IsIm2ColRequired(input, params, filter, data, is_hybrid, kernel_type);"
    },
    {
        "line": 35,
        "fullcodeline": "data->im2col_index = temporaries_count;"
    },
    {
        "line": 39,
        "fullcodeline": "++temporaries_count;"
    },
    {
        "line": 42,
        "fullcodeline": "data->hwcn_weights_index = temporaries_count;"
    },
    {
        "line": 46,
        "fullcodeline": "++temporaries_count;"
    },
    {
        "line": 51,
        "fullcodeline": "data->input_quantized_index = temporaries_count;"
    },
    {
        "line": 56,
        "fullcodeline": "++temporaries_count;"
    },
    {
        "line": 60,
        "fullcodeline": "data->scaling_factors_index = temporaries_count;"
    },
    {
        "line": 65,
        "fullcodeline": "++temporaries_count;"
    },
    {
        "line": 68,
        "fullcodeline": "data->accum_scratch_index = temporaries_count;"
    },
    {
        "line": 73,
        "fullcodeline": "++temporaries_count;"
    },
    {
        "line": 36,
        "fullcodeline": "if (data->im2col_id == kTensorNotAllocated) {"
    },
    {
        "line": 43,
        "fullcodeline": "if (data->hwcn_weights_id == kTensorNotAllocated) {"
    },
    {
        "line": 52,
        "fullcodeline": "if (data->input_quantized_id == kTensorNotAllocated) {"
    },
    {
        "line": 61,
        "fullcodeline": "if (data->scaling_factors_id == kTensorNotAllocated) {"
    },
    {
        "line": 69,
        "fullcodeline": "if (data->accum_scratch_id == kTensorNotAllocated) {"
    },
    {
        "line": 37,
        "fullcodeline": "context->AddTensors(context, 1, &data->im2col_id);"
    },
    {
        "line": 44,
        "fullcodeline": "context->AddTensors(context, 1, &data->hwcn_weights_id);"
    },
    {
        "line": 53,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 62,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 70,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 75,
        "fullcodeline": "data->input_offset_index = temporaries_count;"
    },
    {
        "line": 80,
        "fullcodeline": "++temporaries_count;"
    },
    {
        "line": 82,
        "fullcodeline": "data->row_sums_index = temporaries_count;"
    },
    {
        "line": 87,
        "fullcodeline": "++temporaries_count;"
    },
    {
        "line": 54,
        "fullcodeline": "context, context->AddTensors(context, 1, &data->input_quantized_id));"
    },
    {
        "line": 63,
        "fullcodeline": "context, context->AddTensors(context, 1, &data->scaling_factors_id));"
    },
    {
        "line": 71,
        "fullcodeline": "context, context->AddTensors(context, 1, &data->accum_scratch_id));"
    },
    {
        "line": 76,
        "fullcodeline": "if (data->input_offset_id == kTensorNotAllocated) {"
    },
    {
        "line": 83,
        "fullcodeline": "if (data->row_sums_id == kTensorNotAllocated) {"
    },
    {
        "line": 77,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 84,
        "fullcodeline": "TF_LITE_ENSURE_OK(context,"
    },
    {
        "line": 78,
        "fullcodeline": "context, context->AddTensors(context, 1, &data->input_offset_id));"
    },
    {
        "line": 85,
        "fullcodeline": "context->AddTensors(context, 1, &data->row_sums_id));"
    }
]