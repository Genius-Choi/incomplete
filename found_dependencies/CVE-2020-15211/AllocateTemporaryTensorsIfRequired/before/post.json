[
    {
        "line": 6,
        "fullcodeline": "auto* params = reinterpret_cast<TfLiteConvParams*>(node->builtin_data);"
    },
    {
        "line": 7,
        "fullcodeline": "OpData* data = reinterpret_cast<OpData*>(node->user_data);"
    },
    {
        "line": 9,
        "fullcodeline": "TF_LITE_ENSURE(context, node->inputs->size >= 2);"
    },
    {
        "line": 10,
        "fullcodeline": "const TfLiteTensor* input = GetInput(context, node, 0);"
    },
    {
        "line": 11,
        "fullcodeline": "const TfLiteTensor* filter = GetInput(context, node, 1);"
    },
    {
        "line": 22,
        "fullcodeline": "data->need_hwcn_weights ="
    },
    {
        "line": 28,
        "fullcodeline": "data->need_im2col ="
    },
    {
        "line": 31,
        "fullcodeline": "int temporaries_count = 0;"
    },
    {
        "line": 89,
        "fullcodeline": "TfLiteIntArrayFree(node->temporaries);"
    },
    {
        "line": 90,
        "fullcodeline": "node->temporaries = TfLiteIntArrayCreate(temporaries_count);"
    },
    {
        "line": 23,
        "fullcodeline": "input->type == kTfLiteFloat32 && data->supports_multithreaded_kernel;"
    },
    {
        "line": 29,
        "fullcodeline": "IsIm2ColRequired(input, params, filter, data, is_hybrid, kernel_type);"
    },
    {
        "line": 33,
        "fullcodeline": "data->im2col_index = temporaries_count;"
    },
    {
        "line": 37,
        "fullcodeline": "++temporaries_count;"
    },
    {
        "line": 40,
        "fullcodeline": "data->hwcn_weights_index = temporaries_count;"
    },
    {
        "line": 44,
        "fullcodeline": "++temporaries_count;"
    },
    {
        "line": 49,
        "fullcodeline": "data->input_quantized_index = temporaries_count;"
    },
    {
        "line": 54,
        "fullcodeline": "++temporaries_count;"
    },
    {
        "line": 58,
        "fullcodeline": "data->scaling_factors_index = temporaries_count;"
    },
    {
        "line": 63,
        "fullcodeline": "++temporaries_count;"
    },
    {
        "line": 66,
        "fullcodeline": "data->accum_scratch_index = temporaries_count;"
    },
    {
        "line": 71,
        "fullcodeline": "++temporaries_count;"
    },
    {
        "line": 34,
        "fullcodeline": "if (data->im2col_id == kTensorNotAllocated) {"
    },
    {
        "line": 41,
        "fullcodeline": "if (data->hwcn_weights_id == kTensorNotAllocated) {"
    },
    {
        "line": 50,
        "fullcodeline": "if (data->input_quantized_id == kTensorNotAllocated) {"
    },
    {
        "line": 59,
        "fullcodeline": "if (data->scaling_factors_id == kTensorNotAllocated) {"
    },
    {
        "line": 67,
        "fullcodeline": "if (data->accum_scratch_id == kTensorNotAllocated) {"
    },
    {
        "line": 35,
        "fullcodeline": "context->AddTensors(context, 1, &data->im2col_id);"
    },
    {
        "line": 42,
        "fullcodeline": "context->AddTensors(context, 1, &data->hwcn_weights_id);"
    },
    {
        "line": 51,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 60,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 68,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 73,
        "fullcodeline": "data->input_offset_index = temporaries_count;"
    },
    {
        "line": 78,
        "fullcodeline": "++temporaries_count;"
    },
    {
        "line": 80,
        "fullcodeline": "data->row_sums_index = temporaries_count;"
    },
    {
        "line": 85,
        "fullcodeline": "++temporaries_count;"
    },
    {
        "line": 52,
        "fullcodeline": "context, context->AddTensors(context, 1, &data->input_quantized_id));"
    },
    {
        "line": 61,
        "fullcodeline": "context, context->AddTensors(context, 1, &data->scaling_factors_id));"
    },
    {
        "line": 69,
        "fullcodeline": "context, context->AddTensors(context, 1, &data->accum_scratch_id));"
    },
    {
        "line": 74,
        "fullcodeline": "if (data->input_offset_id == kTensorNotAllocated) {"
    },
    {
        "line": 81,
        "fullcodeline": "if (data->row_sums_id == kTensorNotAllocated) {"
    },
    {
        "line": 75,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 82,
        "fullcodeline": "TF_LITE_ENSURE_OK(context,"
    },
    {
        "line": 76,
        "fullcodeline": "context, context->AddTensors(context, 1, &data->input_offset_id));"
    },
    {
        "line": 83,
        "fullcodeline": "context->AddTensors(context, 1, &data->row_sums_id));"
    }
]