[
    {
        "line": 2,
        "fullcodeline": "auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);"
    },
    {
        "line": 4,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);"
    },
    {
        "line": 5,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);"
    },
    {
        "line": 6,
        "fullcodeline": "const TfLiteTensor* input = GetInput(context, node, 0);"
    },
    {
        "line": 7,
        "fullcodeline": "TF_LITE_ENSURE(context, input != nullptr);"
    },
    {
        "line": 8,
        "fullcodeline": "TF_LITE_ENSURE(context, NumDimensions(input) >= 1);"
    },
    {
        "line": 10,
        "fullcodeline": "TfLiteTensor* output = GetOutput(context, node, 0);"
    },
    {
        "line": 11,
        "fullcodeline": "TF_LITE_ENSURE(context, output != nullptr);"
    },
    {
        "line": 13,
        "fullcodeline": "TFLITE_DCHECK(node->user_data != nullptr);"
    },
    {
        "line": 14,
        "fullcodeline": "SoftmaxParams* data = static_cast<SoftmaxParams*>(node->user_data);"
    },
    {
        "line": 15,
        "fullcodeline": "return CalculateSoftmaxParams(context, input, output, params, data);"
    }
]