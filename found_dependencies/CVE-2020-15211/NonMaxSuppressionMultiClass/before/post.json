[
    {
        "line": 4,
        "fullcodeline": "const TfLiteTensor* input_box_encodings ="
    },
    {
        "line": 6,
        "fullcodeline": "const TfLiteTensor* input_class_predictions ="
    },
    {
        "line": 9,
        "fullcodeline": "const int num_classes = op_data->num_classes;"
    },
    {
        "line": 10,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, input_class_predictions->dims->data[0],"
    },
    {
        "line": 12,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, input_class_predictions->dims->data[1], num_boxes);"
    },
    {
        "line": 16,
        "fullcodeline": "TF_LITE_ENSURE(context, (num_classes_with_background - num_classes <= 1));"
    },
    {
        "line": 17,
        "fullcodeline": "TF_LITE_ENSURE(context, (num_classes_with_background >= num_classes));"
    },
    {
        "line": 5,
        "fullcodeline": "GetInput(context, node, kInputTensorBoxEncodings);"
    },
    {
        "line": 7,
        "fullcodeline": "GetInput(context, node, kInputTensorClassPredictions);"
    },
    {
        "line": 28,
        "fullcodeline": "scores = input_class_predictions;"
    },
    {
        "line": 35,
        "fullcodeline": "TF_LITE_ENSURE_STATUS(NonMaxSuppressionMultiClassRegularHelper("
    },
    {
        "line": 23,
        "fullcodeline": "DequantizeClassPredictions(input_class_predictions, num_boxes,"
    },
    {
        "line": 25,
        "fullcodeline": "scores = temporary_scores;"
    },
    {
        "line": 38,
        "fullcodeline": "TF_LITE_ENSURE_STATUS(NonMaxSuppressionMultiClassFastHelper("
    },
    {
        "line": 36,
        "fullcodeline": "context, node, op_data, GetTensorData<float>(scores)));"
    },
    {
        "line": 39,
        "fullcodeline": "context, node, op_data, GetTensorData<float>(scores)));"
    }
]