[
    {
        "line": 2,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, NumInputs(node), 0);"
    },
    {
        "line": 3,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);"
    },
    {
        "line": 5,
        "fullcodeline": "TF_LITE_ENSURE(context, node->user_data != nullptr);"
    },
    {
        "line": 6,
        "fullcodeline": "const auto* params ="
    },
    {
        "line": 9,
        "fullcodeline": "TF_LITE_ENSURE(context, !params->table_name.empty());"
    },
    {
        "line": 10,
        "fullcodeline": "TF_LITE_ENSURE(context, (params->key_dtype == kTfLiteInt64 &&"
    },
    {
        "line": 16,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, kResourceHandleTensor,"
    },
    {
        "line": 18,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, resource_handle_tensor->type, kTfLiteInt32);"
    },
    {
        "line": 19,
        "fullcodeline": "TfLiteIntArray* outputSize = TfLiteIntArrayCreate(1);"
    },
    {
        "line": 20,
        "fullcodeline": "outputSize->data[0] = 1;"
    },
    {
        "line": 7,
        "fullcodeline": "reinterpret_cast<const TfLiteHashtableParams*>(node->user_data);"
    },
    {
        "line": 21,
        "fullcodeline": "return context->ResizeTensor(context, resource_handle_tensor, outputSize);"
    },
    {
        "line": 12,
        "fullcodeline": "(params->key_dtype == kTfLiteString &&"
    },
    {
        "line": 11,
        "fullcodeline": "params->value_dtype == kTfLiteString) ||"
    },
    {
        "line": 13,
        "fullcodeline": "params->value_dtype == kTfLiteInt64));"
    }
]