[
    {
        "line": 13,
        "fullcodeline": "const auto* params = reinterpret_cast<TfLiteBidirectionalSequenceLSTMParams*>("
    },
    {
        "line": 19,
        "fullcodeline": "TF_LITE_ENSURE(context, params->cell_clip >= 0);"
    },
    {
        "line": 20,
        "fullcodeline": "TF_LITE_ENSURE(context, params->proj_clip >= 0);"
    },
    {
        "line": 22,
        "fullcodeline": "const TfLiteTensor* input_to_forget_weights ="
    },
    {
        "line": 24,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, input_to_forget_weights->dims->size, 2);"
    },
    {
        "line": 25,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, input_to_forget_weights->dims->data[0], n_cell);"
    },
    {
        "line": 26,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, input_to_forget_weights->dims->data[1], n_input);"
    },
    {
        "line": 27,
        "fullcodeline": "TF_LITE_ENSURE(context, (input_to_forget_weights->type == kTfLiteFloat32) ||"
    },
    {
        "line": 31,
        "fullcodeline": "const TfLiteTensor* input_to_input_weights ="
    },
    {
        "line": 41,
        "fullcodeline": "const TfLiteTensor* input_to_cell_weights ="
    },
    {
        "line": 43,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, input_to_cell_weights->dims->size, 2);"
    },
    {
        "line": 44,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, input_to_cell_weights->dims->data[0], n_cell);"
    },
    {
        "line": 45,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, input_to_cell_weights->dims->data[1], n_input);"
    },
    {
        "line": 46,
        "fullcodeline": "TF_LITE_ENSURE_TYPES_EQ(context, input_to_cell_weights->type,"
    },
    {
        "line": 49,
        "fullcodeline": "const TfLiteTensor* input_to_output_weights ="
    },
    {
        "line": 51,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, input_to_output_weights->dims->size, 2);"
    },
    {
        "line": 52,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, input_to_output_weights->dims->data[0], n_cell);"
    },
    {
        "line": 53,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, input_to_output_weights->dims->data[1], n_input);"
    },
    {
        "line": 54,
        "fullcodeline": "TF_LITE_ENSURE_TYPES_EQ(context, input_to_output_weights->type,"
    },
    {
        "line": 57,
        "fullcodeline": "const TfLiteTensor* recurrent_to_input_weights ="
    },
    {
        "line": 69,
        "fullcodeline": "const TfLiteTensor* recurrent_to_forget_weights ="
    },
    {
        "line": 71,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, recurrent_to_forget_weights->dims->size, 2);"
    },
    {
        "line": 72,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, recurrent_to_forget_weights->dims->data[0],"
    },
    {
        "line": 74,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, recurrent_to_forget_weights->dims->data[1],"
    },
    {
        "line": 76,
        "fullcodeline": "TF_LITE_ENSURE_TYPES_EQ(context, recurrent_to_forget_weights->type,"
    },
    {
        "line": 79,
        "fullcodeline": "const TfLiteTensor* recurrent_to_cell_weights ="
    },
    {
        "line": 81,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, recurrent_to_cell_weights->dims->size, 2);"
    },
    {
        "line": 82,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, recurrent_to_cell_weights->dims->data[0], n_cell);"
    },
    {
        "line": 83,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, recurrent_to_cell_weights->dims->data[1],"
    },
    {
        "line": 85,
        "fullcodeline": "TF_LITE_ENSURE_TYPES_EQ(context, recurrent_to_cell_weights->type,"
    },
    {
        "line": 90,
        "fullcodeline": "const bool cifg_weights_all_or_none ="
    },
    {
        "line": 95,
        "fullcodeline": "TF_LITE_ENSURE(context, cifg_weights_all_or_none == true);"
    },
    {
        "line": 97,
        "fullcodeline": "const TfLiteTensor* cell_to_input_weights ="
    },
    {
        "line": 106,
        "fullcodeline": "const TfLiteTensor* cell_to_forget_weights ="
    },
    {
        "line": 115,
        "fullcodeline": "const TfLiteTensor* cell_to_output_weights ="
    },
    {
        "line": 125,
        "fullcodeline": "const bool use_cifg = (input_to_input_weights == nullptr);"
    },
    {
        "line": 126,
        "fullcodeline": "const bool peephole_weights_all_or_none ="
    },
    {
        "line": 133,
        "fullcodeline": "TF_LITE_ENSURE(context, peephole_weights_all_or_none == true);"
    },
    {
        "line": 136,
        "fullcodeline": "const TfLiteTensor* input_gate_bias ="
    },
    {
        "line": 146,
        "fullcodeline": "const TfLiteTensor* forget_gate_bias ="
    },
    {
        "line": 148,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, forget_gate_bias->dims->size, 1);"
    },
    {
        "line": 149,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, forget_gate_bias->dims->data[0], n_cell);"
    },
    {
        "line": 150,
        "fullcodeline": "TF_LITE_ENSURE_TYPES_EQ(context, forget_gate_bias->type, kTfLiteFloat32);"
    },
    {
        "line": 152,
        "fullcodeline": "const TfLiteTensor* cell_gate_bias ="
    },
    {
        "line": 154,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, cell_gate_bias->dims->size, 1);"
    },
    {
        "line": 155,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, cell_gate_bias->dims->data[0], n_cell);"
    },
    {
        "line": 156,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, cell_gate_bias->type, kTfLiteFloat32);"
    },
    {
        "line": 158,
        "fullcodeline": "const TfLiteTensor* output_gate_bias ="
    },
    {
        "line": 160,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, output_gate_bias->dims->size, 1);"
    },
    {
        "line": 161,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, output_gate_bias->dims->data[0], n_cell);"
    },
    {
        "line": 162,
        "fullcodeline": "TF_LITE_ENSURE_TYPES_EQ(context, output_gate_bias->type, kTfLiteFloat32);"
    },
    {
        "line": 164,
        "fullcodeline": "const TfLiteTensor* projection_weights ="
    },
    {
        "line": 174,
        "fullcodeline": "const TfLiteTensor* projection_bias ="
    },
    {
        "line": 187,
        "fullcodeline": "const bool projecton_tensors_consistent ="
    },
    {
        "line": 189,
        "fullcodeline": "TF_LITE_ENSURE(context, projecton_tensors_consistent == true);"
    },
    {
        "line": 23,
        "fullcodeline": "GetInput(context, node, input_to_forget_weights_tensor);"
    },
    {
        "line": 32,
        "fullcodeline": "GetOptionalInputTensor(context, node, input_to_input_weights_tensor);"
    },
    {
        "line": 33,
        "fullcodeline": "if (input_to_input_weights != nullptr) {"
    },
    {
        "line": 42,
        "fullcodeline": "GetInput(context, node, input_to_cell_weights_tensor);"
    },
    {
        "line": 50,
        "fullcodeline": "GetInput(context, node, input_to_output_weights_tensor);"
    },
    {
        "line": 58,
        "fullcodeline": "GetOptionalInputTensor(context, node, recurrent_to_input_weights_tensor);"
    },
    {
        "line": 59,
        "fullcodeline": "if (recurrent_to_input_weights != nullptr) {"
    },
    {
        "line": 70,
        "fullcodeline": "GetInput(context, node, recurrent_to_forget_weights_tensor);"
    },
    {
        "line": 80,
        "fullcodeline": "GetInput(context, node, recurrent_to_cell_weights_tensor);"
    },
    {
        "line": 91,
        "fullcodeline": "((input_to_input_weights != nullptr) &&"
    },
    {
        "line": 98,
        "fullcodeline": "GetOptionalInputTensor(context, node, cell_to_input_weights_tensor);"
    },
    {
        "line": 99,
        "fullcodeline": "if (cell_to_input_weights != nullptr) {"
    },
    {
        "line": 107,
        "fullcodeline": "GetOptionalInputTensor(context, node, cell_to_forget_weights_tensor);"
    },
    {
        "line": 108,
        "fullcodeline": "if (cell_to_forget_weights != nullptr) {"
    },
    {
        "line": 116,
        "fullcodeline": "GetOptionalInputTensor(context, node, cell_to_output_weights_tensor);"
    },
    {
        "line": 117,
        "fullcodeline": "if (cell_to_output_weights != nullptr) {"
    },
    {
        "line": 127,
        "fullcodeline": "((cell_to_input_weights != nullptr || use_cifg) &&"
    },
    {
        "line": 137,
        "fullcodeline": "GetOptionalInputTensor(context, node, input_gate_bias_tensor);"
    },
    {
        "line": 147,
        "fullcodeline": "GetInput(context, node, forget_gate_bias_tensor);"
    },
    {
        "line": 153,
        "fullcodeline": "GetInput(context, node, cell_gate_bias_tensor);"
    },
    {
        "line": 159,
        "fullcodeline": "GetInput(context, node, output_gate_bias_tensor);"
    },
    {
        "line": 165,
        "fullcodeline": "GetOptionalInputTensor(context, node, projection_weights_tensor);"
    },
    {
        "line": 166,
        "fullcodeline": "if (projection_weights != nullptr) {"
    },
    {
        "line": 175,
        "fullcodeline": "GetOptionalInputTensor(context, node, projection_bias_tensor);"
    },
    {
        "line": 176,
        "fullcodeline": "if (projection_bias != nullptr) {"
    },
    {
        "line": 188,
        "fullcodeline": "((projection_weights != nullptr) || (projection_bias == nullptr));"
    },
    {
        "line": 29,
        "fullcodeline": "(input_to_forget_weights->type == kTfLiteUInt8));"
    },
    {
        "line": 34,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, input_to_input_weights->dims->size, 2);"
    },
    {
        "line": 35,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, input_to_input_weights->dims->data[0], n_cell);"
    },
    {
        "line": 36,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, input_to_input_weights->dims->data[1], n_input);"
    },
    {
        "line": 37,
        "fullcodeline": "TF_LITE_ENSURE_TYPES_EQ(context, input_to_input_weights->type,"
    },
    {
        "line": 60,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, recurrent_to_input_weights->dims->size, 2);"
    },
    {
        "line": 61,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, recurrent_to_input_weights->dims->data[0],"
    },
    {
        "line": 63,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, recurrent_to_input_weights->dims->data[1],"
    },
    {
        "line": 65,
        "fullcodeline": "TF_LITE_ENSURE_TYPES_EQ(context, recurrent_to_input_weights->type,"
    },
    {
        "line": 93,
        "fullcodeline": "((input_to_input_weights == nullptr) &&"
    },
    {
        "line": 100,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, cell_to_input_weights->dims->size, 1);"
    },
    {
        "line": 101,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, cell_to_input_weights->dims->data[0], n_cell);"
    },
    {
        "line": 102,
        "fullcodeline": "TF_LITE_ENSURE_TYPES_EQ(context, cell_to_input_weights->type,"
    },
    {
        "line": 109,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, cell_to_forget_weights->dims->size, 1);"
    },
    {
        "line": 110,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, cell_to_forget_weights->dims->data[0], n_cell);"
    },
    {
        "line": 111,
        "fullcodeline": "TF_LITE_ENSURE_TYPES_EQ(context, cell_to_forget_weights->type,"
    },
    {
        "line": 118,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, cell_to_output_weights->dims->size, 1);"
    },
    {
        "line": 119,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, cell_to_output_weights->dims->data[0], n_cell);"
    },
    {
        "line": 120,
        "fullcodeline": "TF_LITE_ENSURE_TYPES_EQ(context, cell_to_output_weights->type,"
    },
    {
        "line": 130,
        "fullcodeline": "((cell_to_input_weights == nullptr) &&"
    },
    {
        "line": 139,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, input_gate_bias, nullptr);"
    },
    {
        "line": 167,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, projection_weights->dims->size, 2);"
    },
    {
        "line": 168,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, projection_weights->dims->data[0], n_output);"
    },
    {
        "line": 169,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, projection_weights->dims->data[1], n_cell);"
    },
    {
        "line": 170,
        "fullcodeline": "TF_LITE_ENSURE_TYPES_EQ(context, projection_weights->type,"
    },
    {
        "line": 177,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, projection_bias->dims->size, 1);"
    },
    {
        "line": 178,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, projection_bias->dims->data[0], n_output);"
    },
    {
        "line": 179,
        "fullcodeline": "TF_LITE_ENSURE_TYPES_EQ(context, projection_bias->type, kTfLiteFloat32);"
    },
    {
        "line": 28,
        "fullcodeline": "(input_to_forget_weights->type == kTfLiteInt8) ||"
    },
    {
        "line": 92,
        "fullcodeline": "(recurrent_to_input_weights != nullptr)) ||"
    },
    {
        "line": 94,
        "fullcodeline": "(recurrent_to_input_weights == nullptr));"
    },
    {
        "line": 129,
        "fullcodeline": "(cell_to_output_weights != nullptr)) ||"
    },
    {
        "line": 132,
        "fullcodeline": "(cell_to_output_weights == nullptr));"
    },
    {
        "line": 141,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, input_gate_bias->dims->size, 1);"
    },
    {
        "line": 142,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, input_gate_bias->dims->data[0], n_cell);"
    },
    {
        "line": 143,
        "fullcodeline": "TF_LITE_ENSURE_TYPES_EQ(context, input_gate_bias->type, kTfLiteFloat32);"
    },
    {
        "line": 128,
        "fullcodeline": "(cell_to_forget_weights != nullptr) &&"
    },
    {
        "line": 131,
        "fullcodeline": "(cell_to_forget_weights == nullptr) &&"
    }
]