[
    {
        "line": 4,
        "fullcodeline": "OpData* op_data = reinterpret_cast<OpData*>(node->user_data);"
    },
    {
        "line": 5,
        "fullcodeline": "const TfLiteTensor* lhs = op_context->lhs;"
    },
    {
        "line": 6,
        "fullcodeline": "const TfLiteTensor* rhs = op_context->rhs;"
    },
    {
        "line": 7,
        "fullcodeline": "TfLiteIntArrayFree(node->temporaries);"
    },
    {
        "line": 11,
        "fullcodeline": "bool is_hybrid ="
    },
    {
        "line": 20,
        "fullcodeline": "const int lhs_rank = NumDimensions(lhs);"
    },
    {
        "line": 22,
        "fullcodeline": "const int batch_size = op_context->params->adj_x"
    },
    {
        "line": 25,
        "fullcodeline": "const int num_units = op_context->params->adj_x"
    },
    {
        "line": 12,
        "fullcodeline": "(op_context->lhs->type == kTfLiteFloat32 && rhs->type == kTfLiteInt8);"
    },
    {
        "line": 21,
        "fullcodeline": "const int rhs_rank = NumDimensions(rhs);"
    },
    {
        "line": 31,
        "fullcodeline": "node->temporaries->data[0] = op_data->scratch_tensor_index;"
    },
    {
        "line": 33,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 35,
        "fullcodeline": "TfLiteIntArray* scratch_buffer_size = TfLiteIntArrayCreate(lhs_rank);"
    },
    {
        "line": 40,
        "fullcodeline": "scratch_buffer_size->data[lhs_rank - 2] = lhs->dims->data[lhs_rank - 1];"
    },
    {
        "line": 41,
        "fullcodeline": "scratch_buffer_size->data[lhs_rank - 1] = lhs->dims->data[lhs_rank - 2];"
    },
    {
        "line": 43,
        "fullcodeline": "scratch_buffer->type = op_context->lhs->type;"
    },
    {
        "line": 44,
        "fullcodeline": "scratch_buffer->allocation_type = kTfLiteArenaRw;"
    },
    {
        "line": 45,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, context->ResizeTensor(context, scratch_buffer,"
    },
    {
        "line": 54,
        "fullcodeline": "node->temporaries->data[1] = op_data->scratch_tensor_index + 1;"
    },
    {
        "line": 56,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 58,
        "fullcodeline": "const TfLiteTensor* rhs = op_context->rhs;"
    },
    {
        "line": 59,
        "fullcodeline": "int rhs_rank = NumDimensions(rhs);"
    },
    {
        "line": 60,
        "fullcodeline": "TfLiteIntArray* scratch_buffer_size = TfLiteIntArrayCreate(rhs_rank);"
    },
    {
        "line": 65,
        "fullcodeline": "scratch_buffer_size->data[rhs_rank - 2] = rhs->dims->data[rhs_rank - 1];"
    },
    {
        "line": 66,
        "fullcodeline": "scratch_buffer_size->data[rhs_rank - 1] = rhs->dims->data[rhs_rank - 2];"
    },
    {
        "line": 73,
        "fullcodeline": "scratch_buffer->type = op_context->rhs->type;"
    },
    {
        "line": 74,
        "fullcodeline": "scratch_buffer->allocation_type = kTfLiteArenaRw;"
    },
    {
        "line": 75,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, context->ResizeTensor(context, scratch_buffer,"
    },
    {
        "line": 14,
        "fullcodeline": "node->temporaries = TfLiteIntArrayCreate(kNumTempTensorsForAdjoints +"
    },
    {
        "line": 34,
        "fullcodeline": "context, GetTemporarySafe(context, node, /*index=*/0, &scratch_buffer));"
    },
    {
        "line": 36,
        "fullcodeline": "for (int i = 0; i < lhs_rank - 2; ++i) {"
    },
    {
        "line": 57,
        "fullcodeline": "context, GetTemporarySafe(context, node, /*index=*/1, &scratch_buffer));"
    },
    {
        "line": 61,
        "fullcodeline": "for (int i = 0; i < rhs_rank - 2; ++i) {"
    },
    {
        "line": 68,
        "fullcodeline": "if (IsConstantTensor(op_context->rhs)) {"
    },
    {
        "line": 87,
        "fullcodeline": "int num_batches = 1;"
    },
    {
        "line": 91,
        "fullcodeline": "int num_weights_matrices = 1;"
    },
    {
        "line": 95,
        "fullcodeline": "op_data->compute_row_sums = true;"
    },
    {
        "line": 96,
        "fullcodeline": "node->temporaries->data[2] = op_data->scratch_tensor_index + 2;"
    },
    {
        "line": 98,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, GetTemporarySafe(context, node, /*index=*/2,"
    },
    {
        "line": 100,
        "fullcodeline": "input_quantized->type = op_context->rhs->type;"
    },
    {
        "line": 101,
        "fullcodeline": "input_quantized->allocation_type = kTfLiteArenaRw;"
    },
    {
        "line": 103,
        "fullcodeline": "TfLiteIntArray* input_quantized_size ="
    },
    {
        "line": 105,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, context->ResizeTensor(context, input_quantized,"
    },
    {
        "line": 108,
        "fullcodeline": "node->temporaries->data[3] = op_data->scratch_tensor_index + 3;"
    },
    {
        "line": 110,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, GetTemporarySafe(context, node, /*index=*/3,"
    },
    {
        "line": 112,
        "fullcodeline": "scaling_factors->type = kTfLiteFloat32;"
    },
    {
        "line": 113,
        "fullcodeline": "scaling_factors->allocation_type = kTfLiteArenaRw;"
    },
    {
        "line": 115,
        "fullcodeline": "int scaling_dims[1] = {num_batches * batch_size};"
    },
    {
        "line": 123,
        "fullcodeline": "node->temporaries->data[4] = op_data->scratch_tensor_index + 4;"
    },
    {
        "line": 125,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 127,
        "fullcodeline": "accum_scratch->type = kTfLiteInt32;"
    },
    {
        "line": 128,
        "fullcodeline": "accum_scratch->allocation_type = kTfLiteArenaRw;"
    },
    {
        "line": 129,
        "fullcodeline": "int accum_scratch_dims[2] = {num_units, batch_size};"
    },
    {
        "line": 139,
        "fullcodeline": "node->temporaries->data[5] = op_data->scratch_tensor_index + 5;"
    },
    {
        "line": 141,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 143,
        "fullcodeline": "input_offsets->type = kTfLiteInt32;"
    },
    {
        "line": 144,
        "fullcodeline": "input_offsets->allocation_type = kTfLiteArenaRw;"
    },
    {
        "line": 151,
        "fullcodeline": "node->temporaries->data[6] = op_data->scratch_tensor_index + 6;"
    },
    {
        "line": 153,
        "fullcodeline": "TF_LITE_ENSURE_OK(context,"
    },
    {
        "line": 155,
        "fullcodeline": "row_sums->type = kTfLiteInt32;"
    },
    {
        "line": 156,
        "fullcodeline": "row_sums->allocation_type = kTfLiteArenaRwPersistent;"
    },
    {
        "line": 157,
        "fullcodeline": "int row_sums_dims[1] = {num_weights_matrices * num_units};"
    },
    {
        "line": 17,
        "fullcodeline": "node->temporaries = TfLiteIntArrayCreate(kNumTempTensorsForAdjoints);"
    },
    {
        "line": 23,
        "fullcodeline": "? lhs->dims->data[lhs_rank - 2]"
    },
    {
        "line": 24,
        "fullcodeline": ": lhs->dims->data[lhs_rank - 1];"
    },
    {
        "line": 26,
        "fullcodeline": "? lhs->dims->data[lhs_rank - 1]"
    },
    {
        "line": 27,
        "fullcodeline": ": lhs->dims->data[lhs_rank - 2];"
    },
    {
        "line": 37,
        "fullcodeline": "scratch_buffer_size->data[i] = lhs->dims->data[i];"
    },
    {
        "line": 62,
        "fullcodeline": "scratch_buffer_size->data[i] = rhs->dims->data[i];"
    },
    {
        "line": 69,
        "fullcodeline": "scratch_buffer->allocation_type = kTfLiteArenaRwPersistent;"
    },
    {
        "line": 88,
        "fullcodeline": "for (int i = 0; i < lhs_rank - 2; ++i) {"
    },
    {
        "line": 92,
        "fullcodeline": "for (int i = 0; i < rhs_rank - 2; ++i) {"
    },
    {
        "line": 104,
        "fullcodeline": "TfLiteIntArrayCopy(op_context->lhs->dims);"
    },
    {
        "line": 116,
        "fullcodeline": "if (!TfLiteIntArrayEqualsArray(scaling_factors->dims, 1, scaling_dims)) {"
    },
    {
        "line": 126,
        "fullcodeline": "context, GetTemporarySafe(context, node, /*index=*/4, &accum_scratch));"
    },
    {
        "line": 130,
        "fullcodeline": "if (!TfLiteIntArrayEqualsArray(accum_scratch->dims, 2,"
    },
    {
        "line": 142,
        "fullcodeline": "context, GetTemporarySafe(context, node, /*index=*/5, &input_offsets));"
    },
    {
        "line": 145,
        "fullcodeline": "if (!TfLiteIntArrayEqualsArray(input_offsets->dims, 1, scaling_dims)) {"
    },
    {
        "line": 154,
        "fullcodeline": "GetTemporarySafe(context, node, /*index=*/6, &row_sums));"
    },
    {
        "line": 158,
        "fullcodeline": "if (!TfLiteIntArrayEqualsArray(row_sums->dims, 1, row_sums_dims)) {"
    },
    {
        "line": 89,
        "fullcodeline": "num_batches *= lhs->dims->data[i];"
    },
    {
        "line": 93,
        "fullcodeline": "num_weights_matrices *= rhs->dims->data[i];"
    },
    {
        "line": 117,
        "fullcodeline": "TfLiteIntArray* scaling_factors_size = TfLiteIntArrayCreate(1);"
    },
    {
        "line": 118,
        "fullcodeline": "scaling_factors_size->data[0] = batch_size;"
    },
    {
        "line": 119,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, context->ResizeTensor(context, scaling_factors,"
    },
    {
        "line": 132,
        "fullcodeline": "TfLiteIntArray* accum_size = TfLiteIntArrayCreate(2);"
    },
    {
        "line": 133,
        "fullcodeline": "accum_size->data[0] = num_units;"
    },
    {
        "line": 134,
        "fullcodeline": "accum_size->data[1] = batch_size;"
    },
    {
        "line": 135,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 146,
        "fullcodeline": "TfLiteIntArray* input_offsets_size = TfLiteIntArrayCreate(1);"
    },
    {
        "line": 147,
        "fullcodeline": "input_offsets_size->data[0] = num_batches * batch_size;"
    },
    {
        "line": 148,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, context->ResizeTensor(context, input_offsets,"
    },
    {
        "line": 159,
        "fullcodeline": "TfLiteIntArray* row_sums_size = TfLiteIntArrayCreate(1);"
    },
    {
        "line": 160,
        "fullcodeline": "row_sums_size->data[0] = row_sums_dims[0];"
    },
    {
        "line": 161,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 136,
        "fullcodeline": "context, context->ResizeTensor(context, accum_scratch, accum_size));"
    },
    {
        "line": 162,
        "fullcodeline": "context, context->ResizeTensor(context, row_sums, row_sums_size));"
    }
]