[
    {
        "line": 4,
        "fullcodeline": "const TfLiteTensor* input_box_encodings ="
    },
    {
        "line": 6,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, input_box_encodings->dims->data[0], kBatchSize);"
    },
    {
        "line": 8,
        "fullcodeline": "TF_LITE_ENSURE(context, input_box_encodings->dims->data[2] >= kNumCoordBox);"
    },
    {
        "line": 9,
        "fullcodeline": "const TfLiteTensor* input_anchors ="
    },
    {
        "line": 14,
        "fullcodeline": "CenterSizeEncoding scale_values = op_data->scale_values;"
    },
    {
        "line": 5,
        "fullcodeline": "GetInput(context, node, kInputTensorBoxEncodings);"
    },
    {
        "line": 10,
        "fullcodeline": "GetInput(context, node, kInputTensorAnchors);"
    },
    {
        "line": 16,
        "fullcodeline": "for (int idx = 0; idx < num_boxes; ++idx) {"
    },
    {
        "line": 47,
        "fullcodeline": "float ycenter = box_centersize.y / scale_values.y * anchor.h + anchor.y;"
    },
    {
        "line": 48,
        "fullcodeline": "float xcenter = box_centersize.x / scale_values.x * anchor.w + anchor.x;"
    },
    {
        "line": 49,
        "fullcodeline": "float half_h ="
    },
    {
        "line": 52,
        "fullcodeline": "float half_w ="
    },
    {
        "line": 58,
        "fullcodeline": "box.ymin = ycenter - half_h;"
    },
    {
        "line": 59,
        "fullcodeline": "box.xmin = xcenter - half_w;"
    },
    {
        "line": 60,
        "fullcodeline": "box.ymax = ycenter + half_h;"
    },
    {
        "line": 61,
        "fullcodeline": "box.xmax = xcenter + half_w;"
    },
    {
        "line": 50,
        "fullcodeline": "0.5f * static_cast<float>(std::exp(box_centersize.h / scale_values.h)) *"
    },
    {
        "line": 53,
        "fullcodeline": "0.5f * static_cast<float>(std::exp(box_centersize.w / scale_values.w)) *"
    },
    {
        "line": 20,
        "fullcodeline": "DequantizeBoxEncodings("
    },
    {
        "line": 25,
        "fullcodeline": "DequantizeBoxEncodings("
    },
    {
        "line": 57,
        "fullcodeline": "auto& box = ReInterpretTensor<BoxCornerEncoding*>(decoded_boxes)[idx];"
    },
    {
        "line": 34,
        "fullcodeline": "const int box_encoding_idx = idx * input_box_encodings->dims->data[2];"
    },
    {
        "line": 37,
        "fullcodeline": "box_centersize = *reinterpret_cast<const CenterSizeEncoding*>(boxes);"
    },
    {
        "line": 39,
        "fullcodeline": "ReInterpretTensor<const CenterSizeEncoding*>(input_anchors)[idx];"
    },
    {
        "line": 36,
        "fullcodeline": "&(GetTensorData<float>(input_box_encodings)[box_encoding_idx]);"
    }
]