[
    {
        "line": 2,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);"
    },
    {
        "line": 3,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);"
    },
    {
        "line": 6,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputResourceIdTensor,"
    },
    {
        "line": 8,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, input_resource_id_tensor->type, kTfLiteInt32);"
    },
    {
        "line": 9,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, NumDimensions(input_resource_id_tensor), 1);"
    },
    {
        "line": 10,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, SizeOfDimension(input_resource_id_tensor, 0), 1);"
    },
    {
        "line": 13,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 15,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, output_tensor->type, kTfLiteInt64);"
    },
    {
        "line": 16,
        "fullcodeline": "TfLiteIntArray* outputSize = TfLiteIntArrayCreate(1);"
    },
    {
        "line": 17,
        "fullcodeline": "outputSize->data[0] = 1;"
    },
    {
        "line": 14,
        "fullcodeline": "context, GetOutputSafe(context, node, kOutputTensor, &output_tensor));"
    },
    {
        "line": 18,
        "fullcodeline": "return context->ResizeTensor(context, output_tensor, outputSize);"
    }
]