[
    {
        "line": 5,
        "fullcodeline": "const TfLiteTensor* input = GetInput(context, node, 0);"
    },
    {
        "line": 11,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, node->inputs->size, 2);"
    },
    {
        "line": 12,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);"
    },
    {
        "line": 15,
        "fullcodeline": "const TfLiteTensor* axis = GetInput(context, node, 1);"
    },
    {
        "line": 16,
        "fullcodeline": "TF_LITE_ENSURE(context, axis != nullptr);"
    },
    {
        "line": 17,
        "fullcodeline": "TF_LITE_ENSURE_TYPES_EQ(context, axis->type, kTfLiteInt32);"
    },
    {
        "line": 19,
        "fullcodeline": "if (input->type == kTfLiteInt8) {"
    },
    {
        "line": 20,
        "fullcodeline": "OpData* data = static_cast<OpData*>(node->user_data);"
    },
    {
        "line": 21,
        "fullcodeline": "const TfLiteTensor* output = GetOutput(context, node, 0);"
    },
    {
        "line": 22,
        "fullcodeline": "const double real_multiplier = static_cast<double>(input->params.scale) /"
    },
    {
        "line": 24,
        "fullcodeline": "QuantizeMultiplier(real_multiplier, &data->multiplier, &data->shift);"
    },
    {
        "line": 23,
        "fullcodeline": "static_cast<double>(output->params.scale);"
    }
]