[
    {
        "line": 3,
        "fullcodeline": "const TfLiteTensor* input = GetInput(context, node, kInputTensor);"
    },
    {
        "line": 4,
        "fullcodeline": "TF_LITE_ENSURE(context, input != nullptr);"
    },
    {
        "line": 5,
        "fullcodeline": "TfLiteTensor* output = GetOutput(context, node, kOutputTensor);"
    },
    {
        "line": 6,
        "fullcodeline": "TF_LITE_ENSURE(context, output != nullptr);"
    },
    {
        "line": 8,
        "fullcodeline": "TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);"
    },
    {
        "line": 9,
        "fullcodeline": "if (input->type == kTfLiteInt8) {"
    },
    {
        "line": 10,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, output->params.zero_point,"
    },
    {
        "line": 13,
        "fullcodeline": "static constexpr int kInputIntegerBits = 4;"
    },
    {
        "line": 14,
        "fullcodeline": "const double input_real_multiplier ="
    },
    {
        "line": 20,
        "fullcodeline": "const double q = std::frexp(input_real_multiplier, &data->input_left_shift);"
    },
    {
        "line": 21,
        "fullcodeline": "data->input_multiplier = static_cast<int32_t>(TfLiteRound(q * (1ll << 31)));"
    },
    {
        "line": 23,
        "fullcodeline": "data->input_range_radius ="
    },
    {
        "line": 11,
        "fullcodeline": "std::numeric_limits<int8_t>::min());"
    },
    {
        "line": 15,
        "fullcodeline": "static_cast<double>(input->params.scale) *"
    },
    {
        "line": 24,
        "fullcodeline": "CalculateInputRadius(kInputIntegerBits, data->input_left_shift, 31);"
    },
    {
        "line": 16,
        "fullcodeline": "static_cast<double>(1 << (31 - kInputIntegerBits));"
    }
]