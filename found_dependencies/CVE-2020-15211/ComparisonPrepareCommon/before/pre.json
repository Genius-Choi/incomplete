[
    {
        "line": 3,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, NumInputs(node), 2);"
    },
    {
        "line": 4,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);"
    },
    {
        "line": 6,
        "fullcodeline": "const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);"
    },
    {
        "line": 7,
        "fullcodeline": "const TfLiteTensor* input2 = GetInput(context, node, kInputTensor2);"
    },
    {
        "line": 8,
        "fullcodeline": "TfLiteTensor* output = GetOutput(context, node, kOutputTensor);"
    },
    {
        "line": 15,
        "fullcodeline": "TF_LITE_ENSURE_TYPES_EQ(context, input1->type, input2->type);"
    },
    {
        "line": 16,
        "fullcodeline": "output->type = kTfLiteBool;"
    },
    {
        "line": 18,
        "fullcodeline": "bool requires_broadcast = !HaveSameShapes(input1, input2);"
    },
    {
        "line": 20,
        "fullcodeline": "TfLiteIntArray* output_size = nullptr;"
    },
    {
        "line": 11,
        "fullcodeline": "if (!is_string_allowed) {"
    },
    {
        "line": 28,
        "fullcodeline": "return context->ResizeTensor(context, output, output_size);"
    },
    {
        "line": 12,
        "fullcodeline": "TF_LITE_ENSURE(context, input1->type != kTfLiteString);"
    },
    {
        "line": 22,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, CalculateShapeForBroadcast("
    },
    {
        "line": 25,
        "fullcodeline": "output_size = TfLiteIntArrayCopy(input1->dims);"
    }
]