[
    {
        "line": 5,
        "fullcodeline": "const auto* params = reinterpret_cast<TfLiteLSTMParams*>(node->builtin_data);"
    },
    {
        "line": 10,
        "fullcodeline": "TF_LITE_ENSURE(context, params->cell_clip >= 0);"
    },
    {
        "line": 11,
        "fullcodeline": "TF_LITE_ENSURE(context, params->proj_clip >= 0);"
    },
    {
        "line": 13,
        "fullcodeline": "const TfLiteTensor* input_to_input_weights = GetOptionalInputTensor("
    },
    {
        "line": 21,
        "fullcodeline": "const TfLiteTensor* input_to_forget_weights ="
    },
    {
        "line": 23,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, input_to_forget_weights->dims->size, 2);"
    },
    {
        "line": 24,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, input_to_forget_weights->dims->data[0], n_cell);"
    },
    {
        "line": 25,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, input_to_forget_weights->dims->data[1], n_input);"
    },
    {
        "line": 27,
        "fullcodeline": "const TfLiteTensor* input_to_cell_weights ="
    },
    {
        "line": 29,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, input_to_cell_weights->dims->size, 2);"
    },
    {
        "line": 30,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, input_to_cell_weights->dims->data[0], n_cell);"
    },
    {
        "line": 31,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, input_to_cell_weights->dims->data[1], n_input);"
    },
    {
        "line": 33,
        "fullcodeline": "const TfLiteTensor* recurrent_to_input_weights = GetOptionalInputTensor("
    },
    {
        "line": 43,
        "fullcodeline": "const TfLiteTensor* recurrent_to_forget_weights ="
    },
    {
        "line": 45,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, recurrent_to_forget_weights->dims->size, 2);"
    },
    {
        "line": 46,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, recurrent_to_forget_weights->dims->data[0],"
    },
    {
        "line": 48,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, recurrent_to_forget_weights->dims->data[1],"
    },
    {
        "line": 51,
        "fullcodeline": "const TfLiteTensor* recurrent_to_cell_weights ="
    },
    {
        "line": 53,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, recurrent_to_cell_weights->dims->size, 2);"
    },
    {
        "line": 54,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, recurrent_to_cell_weights->dims->data[0], n_cell);"
    },
    {
        "line": 55,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, recurrent_to_cell_weights->dims->data[1],"
    },
    {
        "line": 60,
        "fullcodeline": "const bool cifg_weights_all_or_none ="
    },
    {
        "line": 65,
        "fullcodeline": "TF_LITE_ENSURE(context, cifg_weights_all_or_none == true);"
    },
    {
        "line": 67,
        "fullcodeline": "const TfLiteTensor* cell_to_input_weights = GetOptionalInputTensor("
    },
    {
        "line": 74,
        "fullcodeline": "const TfLiteTensor* cell_to_forget_weights = GetOptionalInputTensor("
    },
    {
        "line": 81,
        "fullcodeline": "const TfLiteTensor* cell_to_output_weights = GetOptionalInputTensor("
    },
    {
        "line": 89,
        "fullcodeline": "const bool use_cifg = (input_to_input_weights == nullptr);"
    },
    {
        "line": 90,
        "fullcodeline": "const bool peephole_weights_all_or_none ="
    },
    {
        "line": 97,
        "fullcodeline": "TF_LITE_ENSURE(context, peephole_weights_all_or_none == true);"
    },
    {
        "line": 100,
        "fullcodeline": "const TfLiteTensor* input_gate_bias ="
    },
    {
        "line": 109,
        "fullcodeline": "const TfLiteTensor* forget_gate_bias ="
    },
    {
        "line": 111,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, forget_gate_bias->dims->size, 1);"
    },
    {
        "line": 112,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, forget_gate_bias->dims->data[0], n_cell);"
    },
    {
        "line": 114,
        "fullcodeline": "const TfLiteTensor* cell_gate_bias ="
    },
    {
        "line": 116,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, cell_gate_bias->dims->size, 1);"
    },
    {
        "line": 117,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, cell_gate_bias->dims->data[0], n_cell);"
    },
    {
        "line": 119,
        "fullcodeline": "const TfLiteTensor* output_gate_bias ="
    },
    {
        "line": 121,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, output_gate_bias->dims->size, 1);"
    },
    {
        "line": 122,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, output_gate_bias->dims->data[0], n_cell);"
    },
    {
        "line": 124,
        "fullcodeline": "const TfLiteTensor* projection_weights = GetOptionalInputTensor("
    },
    {
        "line": 132,
        "fullcodeline": "const TfLiteTensor* projection_bias ="
    },
    {
        "line": 144,
        "fullcodeline": "const bool projecton_tensors_consistent ="
    },
    {
        "line": 146,
        "fullcodeline": "TF_LITE_ENSURE(context, projecton_tensors_consistent == true);"
    },
    {
        "line": 15,
        "fullcodeline": "if (input_to_input_weights != nullptr) {"
    },
    {
        "line": 22,
        "fullcodeline": "GetInput(context, node, lstm::full::kInputToForgetWeightsTensor);"
    },
    {
        "line": 28,
        "fullcodeline": "GetInput(context, node, lstm::full::kInputToCellWeightsTensor);"
    },
    {
        "line": 35,
        "fullcodeline": "if (recurrent_to_input_weights != nullptr) {"
    },
    {
        "line": 44,
        "fullcodeline": "GetInput(context, node, lstm::full::kRecurrentToForgetWeightsTensor);"
    },
    {
        "line": 52,
        "fullcodeline": "GetInput(context, node, lstm::full::kRecurrentToCellWeightsTensor);"
    },
    {
        "line": 61,
        "fullcodeline": "((input_to_input_weights != nullptr) &&"
    },
    {
        "line": 69,
        "fullcodeline": "if (cell_to_input_weights != nullptr) {"
    },
    {
        "line": 76,
        "fullcodeline": "if (cell_to_forget_weights != nullptr) {"
    },
    {
        "line": 83,
        "fullcodeline": "if (cell_to_output_weights != nullptr) {"
    },
    {
        "line": 91,
        "fullcodeline": "((cell_to_input_weights != nullptr || use_cifg) &&"
    },
    {
        "line": 101,
        "fullcodeline": "GetOptionalInputTensor(context, node, lstm::full::kInputGateBiasTensor);"
    },
    {
        "line": 110,
        "fullcodeline": "GetInput(context, node, lstm::full::kForgetGateBiasTensor);"
    },
    {
        "line": 115,
        "fullcodeline": "GetInput(context, node, lstm::full::kCellGateBiasTensor);"
    },
    {
        "line": 120,
        "fullcodeline": "GetInput(context, node, lstm::full::kOutputGateBiasTensor);"
    },
    {
        "line": 126,
        "fullcodeline": "if (projection_weights != nullptr) {"
    },
    {
        "line": 133,
        "fullcodeline": "GetOptionalInputTensor(context, node, lstm::full::kProjectionBiasTensor);"
    },
    {
        "line": 134,
        "fullcodeline": "if (projection_bias != nullptr) {"
    },
    {
        "line": 145,
        "fullcodeline": "((projection_weights != nullptr) || (projection_bias == nullptr));"
    },
    {
        "line": 16,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, input_to_input_weights->dims->size, 2);"
    },
    {
        "line": 17,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, input_to_input_weights->dims->data[0], n_cell);"
    },
    {
        "line": 18,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, input_to_input_weights->dims->data[1], n_input);"
    },
    {
        "line": 36,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, recurrent_to_input_weights->dims->size, 2);"
    },
    {
        "line": 37,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, recurrent_to_input_weights->dims->data[0],"
    },
    {
        "line": 39,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, recurrent_to_input_weights->dims->data[1],"
    },
    {
        "line": 63,
        "fullcodeline": "((input_to_input_weights == nullptr) &&"
    },
    {
        "line": 70,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, cell_to_input_weights->dims->size, 1);"
    },
    {
        "line": 71,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, cell_to_input_weights->dims->data[0], n_cell);"
    },
    {
        "line": 77,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, cell_to_forget_weights->dims->size, 1);"
    },
    {
        "line": 78,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, cell_to_forget_weights->dims->data[0], n_cell);"
    },
    {
        "line": 84,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, cell_to_output_weights->dims->size, 1);"
    },
    {
        "line": 85,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, cell_to_output_weights->dims->data[0], n_cell);"
    },
    {
        "line": 94,
        "fullcodeline": "((cell_to_input_weights == nullptr) &&"
    },
    {
        "line": 103,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, input_gate_bias, nullptr);"
    },
    {
        "line": 127,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, projection_weights->dims->size, 2);"
    },
    {
        "line": 128,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, projection_weights->dims->data[0], n_output);"
    },
    {
        "line": 129,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, projection_weights->dims->data[1], n_cell);"
    },
    {
        "line": 135,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, projection_bias->dims->size, 1);"
    },
    {
        "line": 136,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, projection_bias->dims->data[0], n_output);"
    },
    {
        "line": 149,
        "fullcodeline": "const TfLiteTensor* input_layer_norm_coefficients = GetOptionalInputTensor("
    },
    {
        "line": 162,
        "fullcodeline": "const TfLiteTensor* forget_layer_norm_coefficients ="
    },
    {
        "line": 164,
        "fullcodeline": "TF_LITE_ENSURE(context, forget_layer_norm_coefficients != nullptr);"
    },
    {
        "line": 165,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, forget_layer_norm_coefficients->dims->size, 1);"
    },
    {
        "line": 166,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, forget_layer_norm_coefficients->dims->data[0],"
    },
    {
        "line": 168,
        "fullcodeline": "TF_LITE_ENSURE_TYPES_EQ(context, forget_layer_norm_coefficients->type,"
    },
    {
        "line": 171,
        "fullcodeline": "const TfLiteTensor* cell_layer_norm_coefficients ="
    },
    {
        "line": 173,
        "fullcodeline": "TF_LITE_ENSURE(context, cell_layer_norm_coefficients != nullptr);"
    },
    {
        "line": 174,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, cell_layer_norm_coefficients->dims->size, 1);"
    },
    {
        "line": 175,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, cell_layer_norm_coefficients->dims->data[0],"
    },
    {
        "line": 177,
        "fullcodeline": "TF_LITE_ENSURE_TYPES_EQ(context, cell_layer_norm_coefficients->type,"
    },
    {
        "line": 180,
        "fullcodeline": "const TfLiteTensor* output_layer_norm_coefficients ="
    },
    {
        "line": 182,
        "fullcodeline": "TF_LITE_ENSURE(context, output_layer_norm_coefficients != nullptr);"
    },
    {
        "line": 183,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, output_layer_norm_coefficients->dims->size, 1);"
    },
    {
        "line": 184,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, output_layer_norm_coefficients->dims->data[0],"
    },
    {
        "line": 186,
        "fullcodeline": "TF_LITE_ENSURE_TYPES_EQ(context, output_layer_norm_coefficients->type,"
    },
    {
        "line": 62,
        "fullcodeline": "(recurrent_to_input_weights != nullptr)) ||"
    },
    {
        "line": 64,
        "fullcodeline": "(recurrent_to_input_weights == nullptr));"
    },
    {
        "line": 93,
        "fullcodeline": "(cell_to_output_weights != nullptr)) ||"
    },
    {
        "line": 96,
        "fullcodeline": "(cell_to_output_weights == nullptr));"
    },
    {
        "line": 105,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, input_gate_bias->dims->size, 1);"
    },
    {
        "line": 106,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, input_gate_bias->dims->data[0], n_cell);"
    },
    {
        "line": 163,
        "fullcodeline": "GetInput(context, node, lstm::full::kForgetLayerNormCoefficientsTensor);"
    },
    {
        "line": 172,
        "fullcodeline": "GetInput(context, node, lstm::full::kCellLayerNormCoefficientsTensor);"
    },
    {
        "line": 181,
        "fullcodeline": "GetInput(context, node, lstm::full::kOutputLayerNormCoefficientsTensor);"
    },
    {
        "line": 92,
        "fullcodeline": "(cell_to_forget_weights != nullptr) &&"
    },
    {
        "line": 95,
        "fullcodeline": "(cell_to_forget_weights == nullptr) &&"
    },
    {
        "line": 152,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, input_layer_norm_coefficients, nullptr);"
    },
    {
        "line": 154,
        "fullcodeline": "TF_LITE_ENSURE(context, input_layer_norm_coefficients != nullptr);"
    },
    {
        "line": 155,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, input_layer_norm_coefficients->dims->size, 1);"
    },
    {
        "line": 156,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, input_layer_norm_coefficients->dims->data[0],"
    },
    {
        "line": 158,
        "fullcodeline": "TF_LITE_ENSURE_TYPES_EQ(context, input_layer_norm_coefficients->type,"
    }
]