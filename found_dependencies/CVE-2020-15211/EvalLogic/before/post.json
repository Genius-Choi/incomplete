[
    {
        "line": 4,
        "fullcodeline": "int64_t num_axis = NumElements(op_context->axis);"
    },
    {
        "line": 5,
        "fullcodeline": "TfLiteTensor* temp_index = GetTemporary(context, node, /*index=*/0);"
    },
    {
        "line": 6,
        "fullcodeline": "TfLiteTensor* resolved_axis = GetTemporary(context, node, /*index=*/1);"
    },
    {
        "line": 20,
        "fullcodeline": "TF_LITE_ENSURE("
    },
    {
        "line": 8,
        "fullcodeline": "if (IsDynamicTensor(op_context->output)) {"
    },
    {
        "line": 13,
        "fullcodeline": "if (op_context->input->type == kTfLiteUInt8 ||"
    },
    {
        "line": 22,
        "fullcodeline": "reference_ops::ReduceGeneric<T>("
    },
    {
        "line": 9,
        "fullcodeline": "TF_LITE_ENSURE_OK(context,"
    },
    {
        "line": 11,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, ResizeOutputTensor(context, op_context));"
    },
    {
        "line": 14,
        "fullcodeline": "op_context->input->type == kTfLiteInt8) {"
    },
    {
        "line": 15,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, op_context->input->params.scale,"
    },
    {
        "line": 17,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, op_context->input->params.zero_point,"
    },
    {
        "line": 10,
        "fullcodeline": "ResizeTempAxis(context, op_context, resolved_axis));"
    },
    {
        "line": 23,
        "fullcodeline": "GetTensorData<T>(op_context->input), op_context->input->dims->data,"
    },
    {
        "line": 24,
        "fullcodeline": "op_context->input->dims->size, GetTensorData<T>(op_context->output),"
    },
    {
        "line": 26,
        "fullcodeline": "GetTensorData<int>(op_context->axis), num_axis,"
    },
    {
        "line": 27,
        "fullcodeline": "op_context->params->keep_dims, GetTensorData<int>(temp_index),"
    },
    {
        "line": 28,
        "fullcodeline": "GetTensorData<int>(resolved_axis), init_value, reducer));"
    }
]