[
    {
        "line": 2,
        "fullcodeline": "OpContext op_context(context, node);"
    },
    {
        "line": 3,
        "fullcodeline": "OpData* data = reinterpret_cast<OpData*>(node->user_data);"
    },
    {
        "line": 5,
        "fullcodeline": "int num_axis = static_cast<int>(NumElements(op_context.axis));"
    },
    {
        "line": 6,
        "fullcodeline": "TfLiteTensor* temp_index = GetTemporary(context, node, /*index=*/0);"
    },
    {
        "line": 7,
        "fullcodeline": "TfLiteTensor* resolved_axis = GetTemporary(context, node, /*index=*/1);"
    },
    {
        "line": 8,
        "fullcodeline": "TfLiteTensor* temp_sum = GetTemporary(context, node, /*index=*/2);"
    },
    {
        "line": 10,
        "fullcodeline": "if (IsDynamicTensor(op_context.output)) {"
    },
    {
        "line": 17,
        "fullcodeline": "if (kernel_type == kGenericOptimized) {"
    },
    {
        "line": 11,
        "fullcodeline": "TF_LITE_ENSURE_OK(context,"
    },
    {
        "line": 13,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, ResizeOutputTensor(context, &op_context));"
    },
    {
        "line": 14,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, ResizeTempSum(context, &op_context, temp_sum));"
    },
    {
        "line": 12,
        "fullcodeline": "ResizeTempAxis(context, &op_context, resolved_axis));"
    },
    {
        "line": 72,
        "fullcodeline": "op_params.axis_count = num_axis;"
    },
    {
        "line": 73,
        "fullcodeline": "ResolveAxis(GetTensorData<int>(op_context.axis), num_axis, &op_params);"
    },
    {
        "line": 74,
        "fullcodeline": "const TfLiteTensor* input = op_context.input;"
    },
    {
        "line": 103,
        "fullcodeline": "reference_ops::Mean("
    },
    {
        "line": 116,
        "fullcodeline": "reference_ops::Mean("
    },
    {
        "line": 104,
        "fullcodeline": "GetTensorData<int>(op_context.input),"
    },
    {
        "line": 106,
        "fullcodeline": "GetTensorData<int>(op_context.output),"
    },
    {
        "line": 108,
        "fullcodeline": "GetTensorData<int>(op_context.axis), num_axis,"
    },
    {
        "line": 109,
        "fullcodeline": "op_context.params->keep_dims, GetTensorData<int>(temp_index),"
    },
    {
        "line": 110,
        "fullcodeline": "GetTensorData<int>(resolved_axis),"
    },
    {
        "line": 111,
        "fullcodeline": "GetTensorData<int64_t>(temp_sum)));"
    },
    {
        "line": 117,
        "fullcodeline": "GetTensorData<int64_t>(op_context.input),"
    },
    {
        "line": 119,
        "fullcodeline": "GetTensorData<int64_t>(op_context.output),"
    },
    {
        "line": 121,
        "fullcodeline": "GetTensorData<int>(op_context.axis), num_axis,"
    },
    {
        "line": 122,
        "fullcodeline": "op_context.params->keep_dims, GetTensorData<int>(temp_index),"
    },
    {
        "line": 123,
        "fullcodeline": "GetTensorData<int>(resolved_axis),"
    },
    {
        "line": 124,
        "fullcodeline": "GetTensorData<int64_t>(temp_sum)));"
    },
    {
        "line": 127,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, EvalMeanReferenceOps<int8_t>("
    },
    {
        "line": 132,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, EvalMeanReferenceOps<int16_t>("
    },
    {
        "line": 137,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, EvalMeanReferenceOps<uint8_t>("
    },
    {
        "line": 22,
        "fullcodeline": "op_params.axis_count = num_axis;"
    },
    {
        "line": 23,
        "fullcodeline": "ResolveAxis(GetTensorData<int>(op_context.axis), num_axis, &op_params);"
    },
    {
        "line": 24,
        "fullcodeline": "const TfLiteTensor* input = op_context.input;"
    },
    {
        "line": 42,
        "fullcodeline": "op_params.axis_count = num_axis;"
    },
    {
        "line": 43,
        "fullcodeline": "ResolveAxis(GetTensorData<int>(op_context.axis), num_axis, &op_params);"
    },
    {
        "line": 44,
        "fullcodeline": "const TfLiteTensor* input = op_context.input;"
    },
    {
        "line": 78,
        "fullcodeline": "if (op_context.params->keep_dims && NumDimensions(input) == 4 &&"
    },
    {
        "line": 80,
        "fullcodeline": "((op_params.axis[0] == 1 && op_params.axis[1] == 2) ||"
    },
    {
        "line": 25,
        "fullcodeline": "if (op_context.params->keep_dims && NumDimensions(input) == 4 &&"
    },
    {
        "line": 79,
        "fullcodeline": "op_params.axis_count == 2 &&"
    },
    {
        "line": 81,
        "fullcodeline": "(op_params.axis[0] == 2 && op_params.axis[1] == 1))) {"
    },
    {
        "line": 82,
        "fullcodeline": "reference_ops::Mean(op_params, GetTensorShape(input),"
    },
    {
        "line": 83,
        "fullcodeline": "GetTensorData<float>(input),"
    },
    {
        "line": 84,
        "fullcodeline": "GetTensorShape(op_context.output),"
    },
    {
        "line": 85,
        "fullcodeline": "GetTensorData<float>(op_context.output));"
    },
    {
        "line": 128,
        "fullcodeline": "context, op_context, num_axis, data,"
    },
    {
        "line": 133,
        "fullcodeline": "context, op_context, num_axis, data,"
    },
    {
        "line": 138,
        "fullcodeline": "context, op_context, num_axis, data,"
    },
    {
        "line": 27,
        "fullcodeline": "((op_params.axis[0] == 1 && op_params.axis[1] == 2) ||"
    },
    {
        "line": 29,
        "fullcodeline": "optimized_integer_ops::Mean("
    },
    {
        "line": 45,
        "fullcodeline": "if (op_context.params->keep_dims && NumDimensions(input) == 4 &&"
    },
    {
        "line": 47,
        "fullcodeline": "((op_params.axis[0] == 1 && op_params.axis[1] == 2) ||"
    },
    {
        "line": 89,
        "fullcodeline": "optimized_ops::MeanGeneral("
    },
    {
        "line": 26,
        "fullcodeline": "op_params.axis_count == 2 &&"
    },
    {
        "line": 28,
        "fullcodeline": "(op_params.axis[0] == 2 && op_params.axis[1] == 1))) {"
    },
    {
        "line": 30,
        "fullcodeline": "op_params, GetTensorShape(input), GetTensorData<int8_t>(input),"
    },
    {
        "line": 32,
        "fullcodeline": "GetTensorShape(op_context.output),"
    },
    {
        "line": 33,
        "fullcodeline": "GetTensorData<int8_t>(op_context.output),"
    },
    {
        "line": 36,
        "fullcodeline": "CpuBackendContext::GetFromContext(context));"
    },
    {
        "line": 46,
        "fullcodeline": "op_params.axis_count == 2 &&"
    },
    {
        "line": 48,
        "fullcodeline": "(op_params.axis[0] == 2 && op_params.axis[1] == 1))) {"
    },
    {
        "line": 49,
        "fullcodeline": "optimized_ops::Mean(op_params, GetTensorShape(input),"
    },
    {
        "line": 50,
        "fullcodeline": "GetTensorData<uint8_t>(input),"
    },
    {
        "line": 52,
        "fullcodeline": "GetTensorShape(op_context.output),"
    },
    {
        "line": 53,
        "fullcodeline": "GetTensorData<uint8_t>(op_context.output),"
    },
    {
        "line": 56,
        "fullcodeline": "CpuBackendContext::GetFromContext(context));"
    },
    {
        "line": 90,
        "fullcodeline": "GetTensorData<float>(op_context.input),"
    },
    {
        "line": 92,
        "fullcodeline": "GetTensorData<float>(op_context.output),"
    },
    {
        "line": 94,
        "fullcodeline": "GetTensorData<int>(op_context.axis), num_axis,"
    },
    {
        "line": 95,
        "fullcodeline": "op_context.params->keep_dims, GetTensorData<int>(temp_index),"
    },
    {
        "line": 96,
        "fullcodeline": "GetTensorData<int>(resolved_axis),"
    },
    {
        "line": 97,
        "fullcodeline": "GetTensorData<float>(temp_sum)));"
    }
]