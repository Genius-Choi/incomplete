[
    {
        "line": 2,
        "fullcodeline": "const TfLiteTensor* input = GetInput(context, node, kInputTensor);"
    },
    {
        "line": 3,
        "fullcodeline": "TF_LITE_ENSURE(context, input != nullptr);"
    },
    {
        "line": 4,
        "fullcodeline": "TfLiteTensor* output = GetOutput(context, node, kOutputTensor);"
    },
    {
        "line": 5,
        "fullcodeline": "TF_LITE_ENSURE(context, output != nullptr);"
    },
    {
        "line": 10,
        "fullcodeline": "int num_input_elements = NumElements(input);"
    },
    {
        "line": 11,
        "fullcodeline": "TfLiteIntArray* output_shape = output->dims;"
    },
    {
        "line": 21,
        "fullcodeline": "int num_output_elements = 1;"
    },
    {
        "line": 22,
        "fullcodeline": "int stretch_dim = -1;"
    },
    {
        "line": 37,
        "fullcodeline": "TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);"
    },
    {
        "line": 38,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);"
    },
    {
        "line": 13,
        "fullcodeline": "if (NumInputs(node) == 1 &&  // Legacy scalar supported with params."
    },
    {
        "line": 23,
        "fullcodeline": "for (int i = 0; i < output_shape->size; ++i) {"
    },
    {
        "line": 32,
        "fullcodeline": "if (stretch_dim != -1) {"
    },
    {
        "line": 14,
        "fullcodeline": "output_shape->size == 1 && output_shape->data[0] == 0) {"
    },
    {
        "line": 18,
        "fullcodeline": "output_shape->size = 0;"
    },
    {
        "line": 33,
        "fullcodeline": "output_shape->data[stretch_dim] = num_input_elements / num_output_elements;"
    },
    {
        "line": 34,
        "fullcodeline": "num_output_elements *= output_shape->data[stretch_dim];"
    },
    {
        "line": 25,
        "fullcodeline": "if (value == -1) {"
    },
    {
        "line": 26,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, stretch_dim, -1);"
    },
    {
        "line": 27,
        "fullcodeline": "stretch_dim = i;"
    },
    {
        "line": 29,
        "fullcodeline": "num_output_elements *= value;"
    }
]