[
    {
        "line": 3,
        "fullcodeline": "const auto* params = static_cast<TfLiteLSTMParams*>(node->builtin_data);"
    },
    {
        "line": 6,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 10,
        "fullcodeline": "const TfLiteTensor* input_to_input_weights = GetOptionalInputTensor("
    },
    {
        "line": 13,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 19,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 24,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 30,
        "fullcodeline": "const TfLiteTensor* recurrent_to_input_weights = GetOptionalInputTensor("
    },
    {
        "line": 33,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 39,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 45,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 51,
        "fullcodeline": "const TfLiteTensor* cell_to_input_weights = GetOptionalInputTensor("
    },
    {
        "line": 53,
        "fullcodeline": "const TfLiteTensor* cell_to_forget_weights = GetOptionalInputTensor("
    },
    {
        "line": 55,
        "fullcodeline": "const TfLiteTensor* cell_to_output_weights = GetOptionalInputTensor("
    },
    {
        "line": 58,
        "fullcodeline": "const TfLiteTensor* input_layer_norm_coefficients = GetOptionalInputTensor("
    },
    {
        "line": 61,
        "fullcodeline": "const TfLiteTensor* forget_layer_norm_coefficients = GetOptionalInputTensor("
    },
    {
        "line": 64,
        "fullcodeline": "const TfLiteTensor* cell_layer_norm_coefficients = GetOptionalInputTensor("
    },
    {
        "line": 67,
        "fullcodeline": "const TfLiteTensor* output_layer_norm_coefficients = GetOptionalInputTensor("
    },
    {
        "line": 71,
        "fullcodeline": "const TfLiteTensor* input_gate_bias = GetOptionalInputTensor("
    },
    {
        "line": 74,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 79,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 84,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 89,
        "fullcodeline": "const TfLiteTensor* projection_weights = GetOptionalInputTensor("
    },
    {
        "line": 91,
        "fullcodeline": "const TfLiteTensor* projection_bias = GetOptionalInputTensor("
    },
    {
        "line": 96,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 99,
        "fullcodeline": "TfLiteTensor* output_state = GetVariableInput("
    },
    {
        "line": 101,
        "fullcodeline": "TF_LITE_ENSURE(context, output_state != nullptr);"
    },
    {
        "line": 102,
        "fullcodeline": "TfLiteTensor* cell_state = GetVariableInput("
    },
    {
        "line": 104,
        "fullcodeline": "TF_LITE_ENSURE(context, cell_state != nullptr);"
    },
    {
        "line": 107,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 7,
        "fullcodeline": "context, GetInputSafe(context, node,"
    },
    {
        "line": 15,
        "fullcodeline": "GetInputSafe(context, node,"
    },
    {
        "line": 20,
        "fullcodeline": "context, GetInputSafe(context, node,"
    },
    {
        "line": 26,
        "fullcodeline": "GetInputSafe(context, node,"
    },
    {
        "line": 35,
        "fullcodeline": "GetInputSafe(context, node,"
    },
    {
        "line": 41,
        "fullcodeline": "GetInputSafe(context, node,"
    },
    {
        "line": 47,
        "fullcodeline": "GetInputSafe(context, node,"
    },
    {
        "line": 75,
        "fullcodeline": "context, GetInputSafe(context, node,"
    },
    {
        "line": 81,
        "fullcodeline": "GetInputSafe(context, node, ops::builtin::lstm::full::kCellGateBiasTensor,"
    },
    {
        "line": 85,
        "fullcodeline": "context, GetInputSafe(context, node,"
    },
    {
        "line": 97,
        "fullcodeline": "context, GetTemporarySafe(context, node, /*index=*/0, &scratch_buffer));"
    },
    {
        "line": 108,
        "fullcodeline": "context, GetOutputSafe(context, node,"
    },
    {
        "line": 112,
        "fullcodeline": "for (int i = 0; i < node->intermediates->size; ++i) {"
    },
    {
        "line": 141,
        "fullcodeline": "printf(\"Error. Only float model can be calibrated\\n\");"
    },
    {
        "line": 118,
        "fullcodeline": "return EvalCalibration("
    }
]