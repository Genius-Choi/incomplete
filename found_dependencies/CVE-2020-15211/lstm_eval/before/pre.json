[
    {
        "line": 3,
        "fullcodeline": "const auto* params = static_cast<TfLiteLSTMParams*>(node->builtin_data);"
    },
    {
        "line": 5,
        "fullcodeline": "const TfLiteTensor* input ="
    },
    {
        "line": 8,
        "fullcodeline": "const TfLiteTensor* input_to_input_weights = GetOptionalInputTensor("
    },
    {
        "line": 10,
        "fullcodeline": "const TfLiteTensor* input_to_forget_weights = GetInput("
    },
    {
        "line": 12,
        "fullcodeline": "const TfLiteTensor* input_to_cell_weights = GetInput("
    },
    {
        "line": 14,
        "fullcodeline": "const TfLiteTensor* input_to_output_weights = GetInput("
    },
    {
        "line": 17,
        "fullcodeline": "const TfLiteTensor* recurrent_to_input_weights = GetOptionalInputTensor("
    },
    {
        "line": 19,
        "fullcodeline": "const TfLiteTensor* recurrent_to_forget_weights = GetInput("
    },
    {
        "line": 21,
        "fullcodeline": "const TfLiteTensor* recurrent_to_cell_weights = GetInput("
    },
    {
        "line": 23,
        "fullcodeline": "const TfLiteTensor* recurrent_to_output_weights = GetInput("
    },
    {
        "line": 26,
        "fullcodeline": "const TfLiteTensor* cell_to_input_weights = GetOptionalInputTensor("
    },
    {
        "line": 28,
        "fullcodeline": "const TfLiteTensor* cell_to_forget_weights = GetOptionalInputTensor("
    },
    {
        "line": 30,
        "fullcodeline": "const TfLiteTensor* cell_to_output_weights = GetOptionalInputTensor("
    },
    {
        "line": 33,
        "fullcodeline": "const TfLiteTensor* input_layer_norm_coefficients = GetOptionalInputTensor("
    },
    {
        "line": 36,
        "fullcodeline": "const TfLiteTensor* forget_layer_norm_coefficients = GetOptionalInputTensor("
    },
    {
        "line": 39,
        "fullcodeline": "const TfLiteTensor* cell_layer_norm_coefficients = GetOptionalInputTensor("
    },
    {
        "line": 42,
        "fullcodeline": "const TfLiteTensor* output_layer_norm_coefficients = GetOptionalInputTensor("
    },
    {
        "line": 46,
        "fullcodeline": "const TfLiteTensor* input_gate_bias = GetOptionalInputTensor("
    },
    {
        "line": 48,
        "fullcodeline": "const TfLiteTensor* forget_gate_bias ="
    },
    {
        "line": 50,
        "fullcodeline": "const TfLiteTensor* cell_gate_bias ="
    },
    {
        "line": 52,
        "fullcodeline": "const TfLiteTensor* output_gate_bias ="
    },
    {
        "line": 55,
        "fullcodeline": "const TfLiteTensor* projection_weights = GetOptionalInputTensor("
    },
    {
        "line": 57,
        "fullcodeline": "const TfLiteTensor* projection_bias = GetOptionalInputTensor("
    },
    {
        "line": 61,
        "fullcodeline": "TfLiteTensor* scratch_buffer = GetTemporary(context, node, /*index=*/0);"
    },
    {
        "line": 63,
        "fullcodeline": "TfLiteTensor* output_state = GetVariableInput("
    },
    {
        "line": 65,
        "fullcodeline": "TF_LITE_ENSURE(context, output_state != nullptr);"
    },
    {
        "line": 66,
        "fullcodeline": "TfLiteTensor* cell_state = GetVariableInput("
    },
    {
        "line": 68,
        "fullcodeline": "TF_LITE_ENSURE(context, cell_state != nullptr);"
    },
    {
        "line": 70,
        "fullcodeline": "TfLiteTensor* output ="
    },
    {
        "line": 73,
        "fullcodeline": "std::vector<int> intermediate_tensor_indexes(node->intermediates->size);"
    },
    {
        "line": 6,
        "fullcodeline": "GetInput(context, node, ops::builtin::lstm::full::kInputTensor);"
    },
    {
        "line": 49,
        "fullcodeline": "GetInput(context, node, ops::builtin::lstm::full::kForgetGateBiasTensor);"
    },
    {
        "line": 51,
        "fullcodeline": "GetInput(context, node, ops::builtin::lstm::full::kCellGateBiasTensor);"
    },
    {
        "line": 53,
        "fullcodeline": "GetInput(context, node, ops::builtin::lstm::full::kOutputGateBiasTensor);"
    },
    {
        "line": 71,
        "fullcodeline": "GetOutput(context, node, ops::builtin::lstm::full::kOutputTensor);"
    },
    {
        "line": 74,
        "fullcodeline": "for (int i = 0; i < node->intermediates->size; ++i) {"
    },
    {
        "line": 75,
        "fullcodeline": "intermediate_tensor_indexes[i] = node->intermediates->data[i];"
    },
    {
        "line": 80,
        "fullcodeline": "return EvalCalibration("
    }
]