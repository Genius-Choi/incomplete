[
    {
        "line": 2,
        "fullcodeline": "LogSoftmaxOpData* data = reinterpret_cast<LogSoftmaxOpData*>(node->user_data);"
    },
    {
        "line": 4,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);"
    },
    {
        "line": 5,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);"
    },
    {
        "line": 6,
        "fullcodeline": "const TfLiteTensor* input = GetInput(context, node, 0);"
    },
    {
        "line": 7,
        "fullcodeline": "TfLiteTensor* output = GetOutput(context, node, 0);"
    },
    {
        "line": 8,
        "fullcodeline": "TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);"
    },
    {
        "line": 10,
        "fullcodeline": "if (input->type == kTfLiteUInt8 || input->type == kTfLiteInt8) {"
    },
    {
        "line": 35,
        "fullcodeline": "return context->ResizeTensor(context, output,"
    },
    {
        "line": 11,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, output->params.scale, 16.0 / 256);"
    },
    {
        "line": 12,
        "fullcodeline": "static const double kBeta = 1.0;"
    },
    {
        "line": 36,
        "fullcodeline": "TfLiteIntArrayCopy(input->dims));"
    },
    {
        "line": 13,
        "fullcodeline": "if (input->type == kTfLiteUInt8) {"
    },
    {
        "line": 21,
        "fullcodeline": "if (input->type == kTfLiteInt8) {"
    },
    {
        "line": 14,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, output->params.zero_point, 255);"
    },
    {
        "line": 15,
        "fullcodeline": "data->params.table = data->f_table;"
    },
    {
        "line": 16,
        "fullcodeline": "optimized_ops::PopulateSoftmaxLookupTable(&data->params,"
    },
    {
        "line": 18,
        "fullcodeline": "data->params.zero_point = output->params.zero_point;"
    },
    {
        "line": 19,
        "fullcodeline": "data->params.scale = output->params.scale;"
    },
    {
        "line": 22,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, output->params.zero_point, 127);"
    },
    {
        "line": 23,
        "fullcodeline": "static const int kScaledDiffIntegerBits = 5;"
    },
    {
        "line": 24,
        "fullcodeline": "tflite::PreprocessLogSoftmaxScalingExp("
    },
    {
        "line": 28,
        "fullcodeline": "data->reverse_scaling_right_shift *= -1;"
    },
    {
        "line": 29,
        "fullcodeline": "data->diff_min ="
    },
    {
        "line": 30,
        "fullcodeline": "-1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,"
    }
]