[
    {
        "line": 2,
        "fullcodeline": "const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);"
    },
    {
        "line": 3,
        "fullcodeline": "const TfLiteTensor* input2 = GetInput(context, node, kInputTensor2);"
    },
    {
        "line": 4,
        "fullcodeline": "TfLiteTensor* output = GetOutput(context, node, kOutputTensor);"
    },
    {
        "line": 5,
        "fullcodeline": "bool requires_broadcast = !HaveSameShapes(input1, input2);"
    },
    {
        "line": 8,
        "fullcodeline": "Comparison<bool, reference_ops::EqualFn>(input1, input2, output,"
    },
    {
        "line": 12,
        "fullcodeline": "Comparison<float, reference_ops::EqualFn>(input1, input2, output,"
    },
    {
        "line": 16,
        "fullcodeline": "Comparison<int32_t, reference_ops::EqualFn>(input1, input2, output,"
    },
    {
        "line": 20,
        "fullcodeline": "Comparison<int64_t, reference_ops::EqualFn>(input1, input2, output,"
    },
    {
        "line": 24,
        "fullcodeline": "ComparisonQuantized<uint8_t, reference_ops::EqualFn>("
    },
    {
        "line": 28,
        "fullcodeline": "ComparisonQuantized<int8_t, reference_ops::EqualFn>("
    },
    {
        "line": 32,
        "fullcodeline": "ComparisonString(reference_ops::StringRefEqualFn, input1, input2, output,"
    },
    {
        "line": 36,
        "fullcodeline": "context->ReportError("
    }
]