[
    {
        "line": 5,
        "fullcodeline": "const float area_i = (box_i.ymax - box_i.ymin) * (box_i.xmax - box_i.xmin);"
    },
    {
        "line": 6,
        "fullcodeline": "const float area_j = (box_j.ymax - box_j.ymin) * (box_j.xmax - box_j.xmin);"
    },
    {
        "line": 8,
        "fullcodeline": "const float intersection_ymin = std::max<float>(box_i.ymin, box_j.ymin);"
    },
    {
        "line": 9,
        "fullcodeline": "const float intersection_xmin = std::max<float>(box_i.xmin, box_j.xmin);"
    },
    {
        "line": 10,
        "fullcodeline": "const float intersection_ymax = std::min<float>(box_i.ymax, box_j.ymax);"
    },
    {
        "line": 11,
        "fullcodeline": "const float intersection_xmax = std::min<float>(box_i.xmax, box_j.xmax);"
    },
    {
        "line": 12,
        "fullcodeline": "const float intersection_area ="
    },
    {
        "line": 7,
        "fullcodeline": "if (area_i <= 0 || area_j <= 0) return 0.0;"
    },
    {
        "line": 13,
        "fullcodeline": "std::max<float>(intersection_ymax - intersection_ymin, 0.0) *"
    },
    {
        "line": 15,
        "fullcodeline": "return intersection_area / (area_i + area_j - intersection_area);"
    },
    {
        "line": 3,
        "fullcodeline": "auto& box_i = ReInterpretTensor<const BoxCornerEncoding*>(decoded_boxes)[i];"
    },
    {
        "line": 4,
        "fullcodeline": "auto& box_j = ReInterpretTensor<const BoxCornerEncoding*>(decoded_boxes)[j];"
    },
    {
        "line": 14,
        "fullcodeline": "std::max<float>(intersection_xmax - intersection_xmin, 0.0);"
    }
]