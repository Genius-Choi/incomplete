[
    {
        "line": 3,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &input));"
    },
    {
        "line": 5,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 1, &alpha));"
    },
    {
        "line": 7,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output));"
    },
    {
        "line": 8,
        "fullcodeline": "const PreluOpData* data = reinterpret_cast<PreluOpData*>(node->user_data);"
    },
    {
        "line": 48,
        "fullcodeline": "op_params.input_offset = -input->params.zero_point;"
    },
    {
        "line": 49,
        "fullcodeline": "op_params.alpha_offset = -alpha->params.zero_point;"
    },
    {
        "line": 50,
        "fullcodeline": "op_params.output_offset = output->params.zero_point;"
    },
    {
        "line": 51,
        "fullcodeline": "op_params.output_multiplier_1 = data->output_multiplier_1;"
    },
    {
        "line": 52,
        "fullcodeline": "op_params.output_shift_1 = data->output_shift_1;"
    },
    {
        "line": 53,
        "fullcodeline": "op_params.output_multiplier_2 = data->output_multiplier_2;"
    },
    {
        "line": 54,
        "fullcodeline": "op_params.output_shift_2 = data->output_shift_2;"
    },
    {
        "line": 70,
        "fullcodeline": "op_params.input_offset = -input->params.zero_point;"
    },
    {
        "line": 71,
        "fullcodeline": "op_params.alpha_offset = -alpha->params.zero_point;"
    },
    {
        "line": 72,
        "fullcodeline": "op_params.output_offset = output->params.zero_point;"
    },
    {
        "line": 73,
        "fullcodeline": "op_params.output_multiplier_1 = data->output_multiplier_1;"
    },
    {
        "line": 74,
        "fullcodeline": "op_params.output_shift_1 = data->output_shift_1;"
    },
    {
        "line": 75,
        "fullcodeline": "op_params.output_multiplier_2 = data->output_multiplier_2;"
    },
    {
        "line": 76,
        "fullcodeline": "op_params.output_shift_2 = data->output_shift_2;"
    },
    {
        "line": 94,
        "fullcodeline": "TfLiteTypeGetName(input->type));"
    },
    {
        "line": 11,
        "fullcodeline": "if (kernel_type == kGenericOptimized) {"
    },
    {
        "line": 13,
        "fullcodeline": "bool need_broadcast = optimized_ops::ProcessBroadcastShapes("
    },
    {
        "line": 57,
        "fullcodeline": "op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),"
    },
    {
        "line": 58,
        "fullcodeline": "GetTensorShape(alpha), GetTensorData<uint8_t>(alpha),"
    },
    {
        "line": 59,
        "fullcodeline": "GetTensorShape(output), GetTensorData<uint8_t>(output));"
    },
    {
        "line": 79,
        "fullcodeline": "op_params, GetTensorShape(input), GetTensorData<int8_t>(input),"
    },
    {
        "line": 80,
        "fullcodeline": "GetTensorShape(alpha), GetTensorData<int8_t>(alpha),"
    },
    {
        "line": 81,
        "fullcodeline": "GetTensorShape(output), GetTensorData<int8_t>(output));"
    },
    {
        "line": 14,
        "fullcodeline": "GetTensorShape(input), GetTensorShape(alpha), &op_params);"
    },
    {
        "line": 16,
        "fullcodeline": "optimized_ops::BroadcastPReluDispatch("
    },
    {
        "line": 62,
        "fullcodeline": "op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),"
    },
    {
        "line": 63,
        "fullcodeline": "GetTensorShape(alpha), GetTensorData<uint8_t>(alpha),"
    },
    {
        "line": 64,
        "fullcodeline": "GetTensorShape(output), GetTensorData<uint8_t>(output));"
    },
    {
        "line": 84,
        "fullcodeline": "op_params, GetTensorShape(input), GetTensorData<int8_t>(input),"
    },
    {
        "line": 85,
        "fullcodeline": "GetTensorShape(alpha), GetTensorData<int8_t>(alpha),"
    },
    {
        "line": 86,
        "fullcodeline": "GetTensorShape(output), GetTensorData<int8_t>(output));"
    },
    {
        "line": 17,
        "fullcodeline": "op_params, GetTensorShape(input), GetTensorData<float>(input),"
    },
    {
        "line": 18,
        "fullcodeline": "GetTensorShape(alpha), GetTensorData<float>(alpha),"
    },
    {
        "line": 19,
        "fullcodeline": "GetTensorShape(output), GetTensorData<float>(output),"
    },
    {
        "line": 22,
        "fullcodeline": "const int flat_size ="
    },
    {
        "line": 25,
        "fullcodeline": "optimized_ops::PReluElementWise("
    },
    {
        "line": 31,
        "fullcodeline": "reference_ops::BroadcastBinaryFunction4DSlow<float, float, float>("
    },
    {
        "line": 23,
        "fullcodeline": "MatchingElementsSize(GetTensorShape(input), GetTensorShape(alpha),"
    },
    {
        "line": 26,
        "fullcodeline": "flat_size, op_params, GetTensorData<float>(alpha),"
    },
    {
        "line": 27,
        "fullcodeline": "GetTensorData<float>(input), GetTensorData<float>(output));"
    },
    {
        "line": 32,
        "fullcodeline": "GetTensorShape(input), GetTensorData<float>(input),"
    },
    {
        "line": 33,
        "fullcodeline": "GetTensorShape(alpha), GetTensorData<float>(alpha),"
    },
    {
        "line": 34,
        "fullcodeline": "GetTensorShape(output), GetTensorData<float>(output),"
    },
    {
        "line": 37,
        "fullcodeline": "reference_ops::BinaryFunction<float, float, float>("
    },
    {
        "line": 24,
        "fullcodeline": "GetTensorShape(output));"
    },
    {
        "line": 38,
        "fullcodeline": "GetTensorShape(input), GetTensorData<float>(input),"
    },
    {
        "line": 39,
        "fullcodeline": "GetTensorShape(alpha), GetTensorData<float>(alpha),"
    },
    {
        "line": 40,
        "fullcodeline": "GetTensorShape(output), GetTensorData<float>(output),"
    }
]