[
    {
        "line": 3,
        "fullcodeline": "OpData* data = reinterpret_cast<OpData*>(node->user_data);"
    },
    {
        "line": 4,
        "fullcodeline": "*data->invoke_count += 1;"
    },
    {
        "line": 7,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));"
    },
    {
        "line": 8,
        "fullcodeline": "const uint8_t* input_data = GetTensorData<uint8_t>(input);"
    },
    {
        "line": 9,
        "fullcodeline": "int size = NumElements(input->dims);"
    },
    {
        "line": 11,
        "fullcodeline": "uint8_t* sorting_buffer = reinterpret_cast<uint8_t*>("
    },
    {
        "line": 27,
        "fullcodeline": "TF_LITE_ENSURE_OK(context,"
    },
    {
        "line": 29,
        "fullcodeline": "uint8_t* median_data = GetTensorData<uint8_t>(median);"
    },
    {
        "line": 31,
        "fullcodeline": "TF_LITE_ENSURE_OK(context,"
    },
    {
        "line": 33,
        "fullcodeline": "int32_t* invoke_count_data = GetTensorData<int32_t>(invoke_count);"
    },
    {
        "line": 35,
        "fullcodeline": "median_data[0] = sorting_buffer[size / 2];"
    },
    {
        "line": 36,
        "fullcodeline": "invoke_count_data[0] = *data->invoke_count;"
    },
    {
        "line": 15,
        "fullcodeline": "for (int i = 0; i < size; i++) {"
    },
    {
        "line": 20,
        "fullcodeline": "for (int i = 1; i < size; i++) {"
    },
    {
        "line": 28,
        "fullcodeline": "GetOutputSafe(context, node, kMedianTensor, &median));"
    },
    {
        "line": 32,
        "fullcodeline": "GetOutputSafe(context, node, kInvokeCount, &invoke_count));"
    },
    {
        "line": 12,
        "fullcodeline": "context->GetScratchBuffer(context, data->sorting_buffer));"
    },
    {
        "line": 16,
        "fullcodeline": "sorting_buffer[i] = input_data[i];"
    },
    {
        "line": 21,
        "fullcodeline": "for (int j = i; j > 0 && sorting_buffer[j] < sorting_buffer[j - 1]; j--) {"
    },
    {
        "line": 22,
        "fullcodeline": "std::swap(sorting_buffer[j], sorting_buffer[j - 1]);"
    }
]