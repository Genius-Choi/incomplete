[
    {
        "line": 2,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, NumInputs(node), 3);"
    },
    {
        "line": 3,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);"
    },
    {
        "line": 6,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputResourceIdTensor,"
    },
    {
        "line": 8,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, input_resource_id_tensor->type, kTfLiteInt32);"
    },
    {
        "line": 9,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, NumDimensions(input_resource_id_tensor), 1);"
    },
    {
        "line": 10,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, SizeOfDimension(input_resource_id_tensor, 0), 1);"
    },
    {
        "line": 13,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kDefaultValueTensor,"
    },
    {
        "line": 17,
        "fullcodeline": "TF_LITE_ENSURE_OK(context,"
    },
    {
        "line": 20,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 22,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, default_value_tensor->type, output_tensor->type);"
    },
    {
        "line": 23,
        "fullcodeline": "TF_LITE_ENSURE(context, (key_tensor->type == kTfLiteInt64 &&"
    },
    {
        "line": 18,
        "fullcodeline": "GetInputSafe(context, node, kKeyTensor, &key_tensor));"
    },
    {
        "line": 21,
        "fullcodeline": "context, GetOutputSafe(context, node, kOutputTensor, &output_tensor));"
    },
    {
        "line": 27,
        "fullcodeline": "return context->ResizeTensor(context, output_tensor,"
    },
    {
        "line": 25,
        "fullcodeline": "(key_tensor->type == kTfLiteString &&"
    },
    {
        "line": 28,
        "fullcodeline": "TfLiteIntArrayCopy(key_tensor->dims));"
    },
    {
        "line": 24,
        "fullcodeline": "output_tensor->type == kTfLiteString) ||"
    },
    {
        "line": 26,
        "fullcodeline": "output_tensor->type == kTfLiteInt64));"
    }
]