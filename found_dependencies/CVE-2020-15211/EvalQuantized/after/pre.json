[
    {
        "line": 6,
        "fullcodeline": "if (lhs->type == kTfLiteFloat32) {"
    },
    {
        "line": 8,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, GetTemporarySafe(context, node, /*index=*/2,"
    },
    {
        "line": 11,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, GetTemporarySafe(context, node, /*index=*/3,"
    },
    {
        "line": 14,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 17,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 20,
        "fullcodeline": "TF_LITE_ENSURE_OK(context,"
    },
    {
        "line": 15,
        "fullcodeline": "context, GetTemporarySafe(context, node, /*index=*/4, &accum_scratch));"
    },
    {
        "line": 18,
        "fullcodeline": "context, GetTemporarySafe(context, node, /*index=*/5, &input_offsets));"
    },
    {
        "line": 21,
        "fullcodeline": "GetTemporarySafe(context, node, /*index=*/6, &row_sums));"
    },
    {
        "line": 22,
        "fullcodeline": "return EvalHybrid<kernel_type>("
    },
    {
        "line": 25,
        "fullcodeline": "} else if (lhs->type == kTfLiteInt8) {"
    },
    {
        "line": 23,
        "fullcodeline": "context, node, data, lhs_shape, lhs, rhs_shape, rhs, input_quantized,"
    },
    {
        "line": 26,
        "fullcodeline": "return EvalInt8<kernel_type>(context, data, lhs_shape, lhs, rhs_shape, rhs,"
    },
    {
        "line": 27,
        "fullcodeline": "GetTensorShape(output), output);"
    }
]