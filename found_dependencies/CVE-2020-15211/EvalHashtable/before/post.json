[
    {
        "line": 2,
        "fullcodeline": "TF_LITE_ENSURE(context, node->user_data != nullptr);"
    },
    {
        "line": 3,
        "fullcodeline": "const auto* params ="
    },
    {
        "line": 7,
        "fullcodeline": "const int resource_id = std::hash<std::string>{}(params->table_name);"
    },
    {
        "line": 9,
        "fullcodeline": "TfLiteTensor* resource_handle_tensor ="
    },
    {
        "line": 11,
        "fullcodeline": "auto* resource_handle_data ="
    },
    {
        "line": 13,
        "fullcodeline": "resource_handle_data[0] = resource_id;"
    },
    {
        "line": 15,
        "fullcodeline": "Subgraph* subgraph = reinterpret_cast<Subgraph*>(context->impl_);"
    },
    {
        "line": 16,
        "fullcodeline": "auto& resources = subgraph->resources();"
    },
    {
        "line": 17,
        "fullcodeline": "resource::CreateHashtableResourceIfNotAvailable("
    },
    {
        "line": 4,
        "fullcodeline": "reinterpret_cast<const TfLiteHashtableParams*>(node->user_data);"
    },
    {
        "line": 10,
        "fullcodeline": "GetOutput(context, node, kResourceHandleTensor);"
    },
    {
        "line": 12,
        "fullcodeline": "GetTensorData<std::int32_t>(resource_handle_tensor);"
    }
]