[
    {
        "line": 3,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &input));"
    },
    {
        "line": 5,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output));"
    },
    {
        "line": 6,
        "fullcodeline": "const auto* params ="
    },
    {
        "line": 8,
        "fullcodeline": "const LeakyReluOpData* data ="
    },
    {
        "line": 7,
        "fullcodeline": "reinterpret_cast<TfLiteLeakyReluParams*>(node->builtin_data);"
    },
    {
        "line": 9,
        "fullcodeline": "reinterpret_cast<LeakyReluOpData*>(node->user_data);"
    },
    {
        "line": 33,
        "fullcodeline": "TF_LITE_KERNEL_LOG("
    },
    {
        "line": 14,
        "fullcodeline": "op_params.alpha = params->alpha;"
    },
    {
        "line": 15,
        "fullcodeline": "optimized_ops::LeakyRelu("
    },
    {
        "line": 21,
        "fullcodeline": "QuantizeLeakyRelu<uint8_t>(input, output, data);"
    },
    {
        "line": 25,
        "fullcodeline": "QuantizeLeakyRelu<int8_t>(input, output, data);"
    },
    {
        "line": 29,
        "fullcodeline": "QuantizeLeakyRelu<int16_t>(input, output, data);"
    },
    {
        "line": 36,
        "fullcodeline": "TfLiteTypeGetName(input->type));"
    },
    {
        "line": 16,
        "fullcodeline": "op_params, GetTensorShape(input), GetTensorData<float>(input),"
    },
    {
        "line": 17,
        "fullcodeline": "GetTensorShape(output), GetTensorData<float>(output));"
    }
]