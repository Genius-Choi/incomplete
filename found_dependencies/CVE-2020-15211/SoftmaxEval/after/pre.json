[
    {
        "line": 2,
        "fullcodeline": "auto* params = reinterpret_cast<TfLiteSoftmaxParams*>(node->builtin_data);"
    },
    {
        "line": 3,
        "fullcodeline": "SoftmaxOpData* data = reinterpret_cast<SoftmaxOpData*>(node->user_data);"
    },
    {
        "line": 6,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &input));"
    },
    {
        "line": 8,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output));"
    },
    {
        "line": 53,
        "fullcodeline": "TfLiteTypeGetName(input->type));"
    },
    {
        "line": 12,
        "fullcodeline": "return SoftmaxFloat(context, input, output, params);"
    },
    {
        "line": 46,
        "fullcodeline": "return SoftmaxQuantized<int16_t, int16_t>(context, input, output, data);"
    },
    {
        "line": 17,
        "fullcodeline": "return SoftmaxQuantized<uint8_t, uint8_t>(context, input, output,"
    },
    {
        "line": 20,
        "fullcodeline": "return SoftmaxQuantized<uint8_t, int16_t>(context, input, output,"
    },
    {
        "line": 26,
        "fullcodeline": "TfLiteTypeGetName(output->type));"
    },
    {
        "line": 33,
        "fullcodeline": "return SoftmaxQuantized<int8_t, int8_t>(context, input, output, data);"
    },
    {
        "line": 35,
        "fullcodeline": "return SoftmaxQuantized<int8_t, int16_t>(context, input, output,"
    },
    {
        "line": 41,
        "fullcodeline": "TfLiteTypeGetName(output->type));"
    }
]