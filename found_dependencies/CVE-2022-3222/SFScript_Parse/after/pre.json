[
    {
        "line": 7,
        "fullcodeline": "e = GF_OK;"
    },
    {
        "line": 10,
        "fullcodeline": "memset(&parser, 0, sizeof(ScriptParser));"
    },
    {
        "line": 11,
        "fullcodeline": "parser.codec = codec;"
    },
    {
        "line": 12,
        "fullcodeline": "parser.script = n;"
    },
    {
        "line": 13,
        "fullcodeline": "parser.bs = bs;"
    },
    {
        "line": 14,
        "fullcodeline": "parser.length = 500;"
    },
    {
        "line": 15,
        "fullcodeline": "parser.string = (char *) gf_malloc(sizeof(char)* parser.length);"
    },
    {
        "line": 16,
        "fullcodeline": "parser.string[0] = 0;"
    },
    {
        "line": 17,
        "fullcodeline": "parser.identifiers = gf_list_new();"
    },
    {
        "line": 18,
        "fullcodeline": "parser.new_line = (char *) (codec->dec_memory_mode ? \"\\n\" : NULL);"
    },
    {
        "line": 19,
        "fullcodeline": "parser.indent = 0;"
    },
    {
        "line": 38,
        "fullcodeline": "gf_bs_read_int(bs, 1);"
    },
    {
        "line": 40,
        "fullcodeline": "SFS_AddString(&parser, \"javascript:\");"
    },
    {
        "line": 41,
        "fullcodeline": "SFS_AddString(&parser, parser.new_line);"
    },
    {
        "line": 8,
        "fullcodeline": "if (gf_node_get_tag(n) != TAG_MPEG4_Script) return GF_NON_COMPLIANT_BITSTREAM;"
    },
    {
        "line": 23,
        "fullcodeline": "if (gf_bs_read_int(bs, 1)) {"
    },
    {
        "line": 64,
        "fullcodeline": "while (gf_list_count(parser.identifiers)) {"
    },
    {
        "line": 45,
        "fullcodeline": "SFS_AddString(&parser, \"function \");"
    },
    {
        "line": 46,
        "fullcodeline": "SFS_Identifier(&parser);"
    },
    {
        "line": 47,
        "fullcodeline": "SFS_Arguments(&parser, GF_FALSE);"
    },
    {
        "line": 48,
        "fullcodeline": "SFS_Space(&parser);"
    },
    {
        "line": 49,
        "fullcodeline": "SFS_StatementBlock(&parser, GF_TRUE);"
    },
    {
        "line": 50,
        "fullcodeline": "SFS_Line(&parser);"
    },
    {
        "line": 60,
        "fullcodeline": "script_field->script_text = (char *) gf_strdup(parser.string);"
    },
    {
        "line": 65,
        "fullcodeline": "ptr = (char *)gf_list_get(parser.identifiers, 0);"
    },
    {
        "line": 67,
        "fullcodeline": "gf_list_rem(parser.identifiers, 0);"
    },
    {
        "line": 30,
        "fullcodeline": "nbBits = gf_bs_read_int(bs, 4);"
    },
    {
        "line": 31,
        "fullcodeline": "count = gf_bs_read_int(bs, nbBits);"
    },
    {
        "line": 25,
        "fullcodeline": "while (!gf_bs_read_int(bs, 1)) {"
    },
    {
        "line": 26,
        "fullcodeline": "e = ParseScriptField(&parser);"
    },
    {
        "line": 32,
        "fullcodeline": "for (i=0; i<count; i++) {"
    },
    {
        "line": 52,
        "fullcodeline": "e = codec->LastError;"
    },
    {
        "line": 33,
        "fullcodeline": "e = ParseScriptField(&parser);"
    }
]