[
    {
        "line": 3,
        "fullcodeline": "results->clear();"
    },
    {
        "line": 8,
        "fullcodeline": "string fixed_prefix = pattern.substr(0, pattern.find_first_of(\"*?[\\\\\"));"
    },
    {
        "line": 9,
        "fullcodeline": "string eval_pattern = pattern;"
    },
    {
        "line": 10,
        "fullcodeline": "string dir(io::Dirname(fixed_prefix));"
    },
    {
        "line": 18,
        "fullcodeline": "bool is_directory = pattern[pattern.size() - 1] == '/';"
    },
    {
        "line": 22,
        "fullcodeline": "std::vector<string> dirs;"
    },
    {
        "line": 26,
        "fullcodeline": "StringPiece tmp_dir(io::Dirname(eval_pattern));"
    },
    {
        "line": 31,
        "fullcodeline": "dirs.emplace_back(dir);"
    },
    {
        "line": 32,
        "fullcodeline": "std::reverse(dirs.begin(), dirs.end());"
    },
    {
        "line": 36,
        "fullcodeline": "dir_q.emplace_back(std::make_pair(dirs[0], 0));"
    },
    {
        "line": 4,
        "fullcodeline": "if (pattern.empty()) {"
    },
    {
        "line": 13,
        "fullcodeline": "if (dir.empty()) {"
    },
    {
        "line": 23,
        "fullcodeline": "if (!is_directory) {"
    },
    {
        "line": 27,
        "fullcodeline": "while (tmp_dir.size() > dir.size()) {"
    },
    {
        "line": 42,
        "fullcodeline": "while (!dir_q.empty()) {"
    },
    {
        "line": 14,
        "fullcodeline": "dir = \".\";"
    },
    {
        "line": 15,
        "fullcodeline": "fixed_prefix = io::JoinPath(dir, fixed_prefix);"
    },
    {
        "line": 16,
        "fullcodeline": "eval_pattern = io::JoinPath(dir, eval_pattern);"
    },
    {
        "line": 24,
        "fullcodeline": "dirs.emplace_back(eval_pattern);"
    },
    {
        "line": 28,
        "fullcodeline": "dirs.emplace_back(string(tmp_dir));"
    },
    {
        "line": 29,
        "fullcodeline": "tmp_dir = io::Dirname(tmp_dir);"
    },
    {
        "line": 43,
        "fullcodeline": "next_dir_q.clear();"
    },
    {
        "line": 44,
        "fullcodeline": "std::vector<Status> new_rets(dir_q.size());"
    },
    {
        "line": 45,
        "fullcodeline": "auto handle_level = [fs, &results, &dir_q, &next_dir_q, &new_rets,"
    },
    {
        "line": 102,
        "fullcodeline": "ForEach(0, dir_q.size(), handle_level);"
    },
    {
        "line": 104,
        "fullcodeline": "ret.Update(new_rets[dir_q.size() - 1]);"
    },
    {
        "line": 105,
        "fullcodeline": "std::swap(dir_q, next_dir_q);"
    },
    {
        "line": 5,
        "fullcodeline": "return Status::OK();"
    }
]