[
    {
        "line": 6,
        "fullcodeline": "struct kvec iov[1];"
    },
    {
        "line": 8,
        "fullcodeline": "int rc = 0;"
    },
    {
        "line": 10,
        "fullcodeline": "struct TCP_Server_Info *server = ses->server;"
    },
    {
        "line": 13,
        "fullcodeline": "int flags = CIFS_NEG_OP;"
    },
    {
        "line": 16,
        "fullcodeline": "cifs_dbg(FYI, \"Negotiate protocol\\n\");"
    },
    {
        "line": 23,
        "fullcodeline": "rc = smb2_plain_req_init(SMB2_NEGOTIATE, NULL, (void **) &req, &total_len);"
    },
    {
        "line": 29,
        "fullcodeline": "memset(server->preauth_sha_hash, 0, SMB2_PREAUTH_HASH_SIZE);"
    },
    {
        "line": 30,
        "fullcodeline": "memset(ses->preauth_sha_hash, 0, SMB2_PREAUTH_HASH_SIZE);"
    },
    {
        "line": 61,
        "fullcodeline": "req->Capabilities = cpu_to_le32(ses->server->vals->req_capabilities);"
    },
    {
        "line": 77,
        "fullcodeline": "memset(&rqst, 0, sizeof(struct smb_rqst));"
    },
    {
        "line": 78,
        "fullcodeline": "rqst.rq_iov = iov;"
    },
    {
        "line": 79,
        "fullcodeline": "rqst.rq_nvec = 1;"
    },
    {
        "line": 81,
        "fullcodeline": "rc = cifs_send_recv(xid, ses, &rqst, &resp_buftype, flags, &rsp_iov);"
    },
    {
        "line": 83,
        "fullcodeline": "rsp = (struct smb2_negotiate_rsp *)rsp_iov.iov_base;"
    },
    {
        "line": 126,
        "fullcodeline": "cifs_dbg(FYI, \"mode 0x%x\\n\", rsp->SecurityMode);"
    },
    {
        "line": 144,
        "fullcodeline": "server->dialect = le16_to_cpu(rsp->DialectRevision);"
    },
    {
        "line": 151,
        "fullcodeline": "memcpy(server->preauth_sha_hash, ses->preauth_sha_hash,"
    },
    {
        "line": 155,
        "fullcodeline": "server->negflavor = CIFS_NEGFLAVOR_EXTENDED;"
    },
    {
        "line": 159,
        "fullcodeline": "server->max_read = le32_to_cpu(rsp->MaxReadSize);"
    },
    {
        "line": 160,
        "fullcodeline": "server->max_write = le32_to_cpu(rsp->MaxWriteSize);"
    },
    {
        "line": 161,
        "fullcodeline": "server->sec_mode = le16_to_cpu(rsp->SecurityMode);"
    },
    {
        "line": 165,
        "fullcodeline": "server->capabilities = le32_to_cpu(rsp->Capabilities);"
    },
    {
        "line": 167,
        "fullcodeline": "server->capabilities |= SMB2_NT_FIND | SMB2_LARGE_FILES;"
    },
    {
        "line": 169,
        "fullcodeline": "security_blob = smb2_get_data_area_len(&blob_offset, &blob_length,"
    },
    {
        "line": 183,
        "fullcodeline": "rc = cifs_enable_signing(server, ses->sign);"
    },
    {
        "line": 18,
        "fullcodeline": "if (!server) {"
    },
    {
        "line": 64,
        "fullcodeline": "if (ses->server->vals->protocol_id == SMB20_PROT_ID)"
    },
    {
        "line": 88,
        "fullcodeline": "if (rc == -EOPNOTSUPP) {"
    },
    {
        "line": 128,
        "fullcodeline": "if (rsp->DialectRevision == cpu_to_le16(SMB20_PROT_ID))"
    },
    {
        "line": 162,
        "fullcodeline": "if ((server->sec_mode & SMB2_SEC_MODE_FLAGS_ALL) != server->sec_mode)"
    },
    {
        "line": 178,
        "fullcodeline": "if (blob_length == 0) {"
    },
    {
        "line": 194,
        "fullcodeline": "if (rsp->DialectRevision == cpu_to_le16(SMB311_PROT_ID)) {"
    },
    {
        "line": 19,
        "fullcodeline": "WARN(1, \"%s: server is NULL!\\n\", __func__);"
    },
    {
        "line": 32,
        "fullcodeline": "if (strcmp(ses->server->vals->version_string,"
    },
    {
        "line": 36,
        "fullcodeline": "req->DialectCount = cpu_to_le16(2);"
    },
    {
        "line": 37,
        "fullcodeline": "total_len += 4;"
    },
    {
        "line": 55,
        "fullcodeline": "req->SecurityMode = cpu_to_le16(SMB2_NEGOTIATE_SIGNING_REQUIRED);"
    },
    {
        "line": 65,
        "fullcodeline": "memset(req->ClientGUID, 0, SMB2_CLIENT_GUID_SIZE);"
    },
    {
        "line": 96,
        "fullcodeline": "if (strcmp(ses->server->vals->version_string,"
    },
    {
        "line": 129,
        "fullcodeline": "cifs_dbg(FYI, \"negotiated smb2.0 dialect\\n\");"
    },
    {
        "line": 163,
        "fullcodeline": "cifs_dbg(FYI, \"Server returned unexpected security mode 0x%x\\n\","
    },
    {
        "line": 180,
        "fullcodeline": "server->sec_ntlmssp = true;"
    },
    {
        "line": 187,
        "fullcodeline": "rc = decode_negTokenInit(security_blob, blob_length, server);"
    },
    {
        "line": 20,
        "fullcodeline": "return -EIO;"
    },
    {
        "line": 34,
        "fullcodeline": "req->Dialects[0] = cpu_to_le16(SMB30_PROT_ID);"
    },
    {
        "line": 35,
        "fullcodeline": "req->Dialects[1] = cpu_to_le16(SMB302_PROT_ID);"
    },
    {
        "line": 67,
        "fullcodeline": "memcpy(req->ClientGUID, server->client_guid,"
    },
    {
        "line": 98,
        "fullcodeline": "if (rsp->DialectRevision == cpu_to_le16(SMB20_PROT_ID)) {"
    },
    {
        "line": 188,
        "fullcodeline": "if (rc == 1)"
    },
    {
        "line": 56,
        "fullcodeline": "else if (global_secflags & CIFSSEC_MAY_SIGN)"
    },
    {
        "line": 93,
        "fullcodeline": "} else if (rc != 0)"
    },
    {
        "line": 130,
        "fullcodeline": "else if (rsp->DialectRevision == cpu_to_le16(SMB21_PROT_ID))"
    },
    {
        "line": 189,
        "fullcodeline": "rc = 0;"
    },
    {
        "line": 196,
        "fullcodeline": "rc = smb311_decode_neg_context(rsp, server,"
    },
    {
        "line": 38,
        "fullcodeline": "} else if (strcmp(ses->server->vals->version_string,"
    },
    {
        "line": 44,
        "fullcodeline": "req->DialectCount = cpu_to_le16(4);"
    },
    {
        "line": 45,
        "fullcodeline": "total_len += 8;"
    },
    {
        "line": 57,
        "fullcodeline": "req->SecurityMode = cpu_to_le16(SMB2_NEGOTIATE_SIGNING_ENABLED);"
    },
    {
        "line": 69,
        "fullcodeline": "if ((ses->server->vals->protocol_id == SMB311_PROT_ID) ||"
    },
    {
        "line": 70,
        "fullcodeline": "(strcmp(ses->server->vals->version_string,"
    },
    {
        "line": 72,
        "fullcodeline": "assemble_neg_contexts(req, &total_len);"
    },
    {
        "line": 101,
        "fullcodeline": "return -EIO;"
    },
    {
        "line": 107,
        "fullcodeline": "} else if (strcmp(ses->server->vals->version_string,"
    },
    {
        "line": 131,
        "fullcodeline": "cifs_dbg(FYI, \"negotiated smb2.1 dialect\\n\");"
    },
    {
        "line": 40,
        "fullcodeline": "req->Dialects[0] = cpu_to_le16(SMB21_PROT_ID);"
    },
    {
        "line": 41,
        "fullcodeline": "req->Dialects[1] = cpu_to_le16(SMB30_PROT_ID);"
    },
    {
        "line": 42,
        "fullcodeline": "req->Dialects[2] = cpu_to_le16(SMB302_PROT_ID);"
    },
    {
        "line": 43,
        "fullcodeline": "req->Dialects[3] = cpu_to_le16(SMB311_PROT_ID);"
    },
    {
        "line": 49,
        "fullcodeline": "req->DialectCount = cpu_to_le16(1);"
    },
    {
        "line": 50,
        "fullcodeline": "total_len += 2;"
    },
    {
        "line": 59,
        "fullcodeline": "req->SecurityMode = 0;"
    },
    {
        "line": 102,
        "fullcodeline": "} else if (rsp->DialectRevision == cpu_to_le16(SMB21_PROT_ID)) {"
    },
    {
        "line": 109,
        "fullcodeline": "if (rsp->DialectRevision == cpu_to_le16(SMB20_PROT_ID)) {"
    },
    {
        "line": 190,
        "fullcodeline": "else if (rc == 0)"
    },
    {
        "line": 48,
        "fullcodeline": "req->Dialects[0] = cpu_to_le16(ses->server->vals->protocol_id);"
    },
    {
        "line": 132,
        "fullcodeline": "else if (rsp->DialectRevision == cpu_to_le16(SMB30_PROT_ID))"
    },
    {
        "line": 191,
        "fullcodeline": "rc = -EIO;"
    },
    {
        "line": 105,
        "fullcodeline": "return -EIO;"
    },
    {
        "line": 112,
        "fullcodeline": "return -EIO;"
    },
    {
        "line": 118,
        "fullcodeline": "} else if (le16_to_cpu(rsp->DialectRevision) !="
    },
    {
        "line": 133,
        "fullcodeline": "cifs_dbg(FYI, \"negotiated smb3.0 dialect\\n\");"
    },
    {
        "line": 113,
        "fullcodeline": "} else if (rsp->DialectRevision == cpu_to_le16(SMB21_PROT_ID)) {"
    },
    {
        "line": 122,
        "fullcodeline": "le16_to_cpu(rsp->DialectRevision));"
    },
    {
        "line": 123,
        "fullcodeline": "return -EIO;"
    },
    {
        "line": 134,
        "fullcodeline": "else if (rsp->DialectRevision == cpu_to_le16(SMB302_PROT_ID))"
    },
    {
        "line": 135,
        "fullcodeline": "cifs_dbg(FYI, \"negotiated smb3.02 dialect\\n\");"
    },
    {
        "line": 116,
        "fullcodeline": "} else if (rsp->DialectRevision == cpu_to_le16(SMB311_PROT_ID))"
    },
    {
        "line": 136,
        "fullcodeline": "else if (rsp->DialectRevision == cpu_to_le16(SMB311_PROT_ID))"
    },
    {
        "line": 137,
        "fullcodeline": "cifs_dbg(FYI, \"negotiated smb3.1.1 dialect\\n\");"
    },
    {
        "line": 141,
        "fullcodeline": "rc = -EIO;"
    },
    {
        "line": 140,
        "fullcodeline": "le16_to_cpu(rsp->DialectRevision));"
    }
]