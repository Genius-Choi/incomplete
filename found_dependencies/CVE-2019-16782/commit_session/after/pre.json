[
    {
        "line": 2,
        "fullcodeline": "session = req.get_header RACK_SESSION"
    },
    {
        "line": 3,
        "fullcodeline": "options = session.options"
    },
    {
        "line": 14,
        "fullcodeline": "session_data = session.to_hash.delete_if { |k, v| v.nil? }"
    },
    {
        "line": 5,
        "fullcodeline": "if options[:drop] || options[:renew]"
    },
    {
        "line": 6,
        "fullcodeline": "session_id = delete_session(req, session.id || generate_sid, options)"
    },
    {
        "line": 10,
        "fullcodeline": "return unless commit_session?(req, session, options)"
    },
    {
        "line": 12,
        "fullcodeline": "session.send(:load!) unless loaded_session?(session)"
    },
    {
        "line": 13,
        "fullcodeline": "session_id ||= session.id"
    },
    {
        "line": 16,
        "fullcodeline": "if not data = write_session(req, session_id, session_data, options)"
    },
    {
        "line": 7,
        "fullcodeline": "return unless session_id"
    },
    {
        "line": 17,
        "fullcodeline": "req.get_header(RACK_ERRORS).puts(\"Warning! #{self.class.name} failed to save session. Content dropped.\")"
    },
    {
        "line": 18,
        "fullcodeline": "elsif options[:defer] and not options[:renew]"
    },
    {
        "line": 21,
        "fullcodeline": "cookie = Hash.new"
    },
    {
        "line": 22,
        "fullcodeline": "cookie[:value] = cookie_value(data)"
    },
    {
        "line": 25,
        "fullcodeline": "set_cookie(req, res, cookie.merge!(options))"
    },
    {
        "line": 23,
        "fullcodeline": "cookie[:expires] = Time.now + options[:expire_after] if options[:expire_after]"
    },
    {
        "line": 24,
        "fullcodeline": "cookie[:expires] = Time.now + options[:max_age] if options[:max_age]"
    },
    {
        "line": 19,
        "fullcodeline": "req.get_header(RACK_ERRORS).puts(\"Deferring cookie for #{session_id}\") if $VERBOSE"
    }
]