[
    {
        "line": 4,
        "fullcodeline": "struct vcpu_vmx *vmx = to_vmx(vcpu);"
    },
    {
        "line": 7,
        "fullcodeline": "vmcs_write16(GUEST_ES_SELECTOR, vmcs12->guest_es_selector);"
    },
    {
        "line": 8,
        "fullcodeline": "vmcs_write16(GUEST_CS_SELECTOR, vmcs12->guest_cs_selector);"
    },
    {
        "line": 9,
        "fullcodeline": "vmcs_write16(GUEST_SS_SELECTOR, vmcs12->guest_ss_selector);"
    },
    {
        "line": 10,
        "fullcodeline": "vmcs_write16(GUEST_DS_SELECTOR, vmcs12->guest_ds_selector);"
    },
    {
        "line": 11,
        "fullcodeline": "vmcs_write16(GUEST_FS_SELECTOR, vmcs12->guest_fs_selector);"
    },
    {
        "line": 12,
        "fullcodeline": "vmcs_write16(GUEST_GS_SELECTOR, vmcs12->guest_gs_selector);"
    },
    {
        "line": 13,
        "fullcodeline": "vmcs_write16(GUEST_LDTR_SELECTOR, vmcs12->guest_ldtr_selector);"
    },
    {
        "line": 14,
        "fullcodeline": "vmcs_write16(GUEST_TR_SELECTOR, vmcs12->guest_tr_selector);"
    },
    {
        "line": 15,
        "fullcodeline": "vmcs_write32(GUEST_ES_LIMIT, vmcs12->guest_es_limit);"
    },
    {
        "line": 16,
        "fullcodeline": "vmcs_write32(GUEST_CS_LIMIT, vmcs12->guest_cs_limit);"
    },
    {
        "line": 17,
        "fullcodeline": "vmcs_write32(GUEST_SS_LIMIT, vmcs12->guest_ss_limit);"
    },
    {
        "line": 18,
        "fullcodeline": "vmcs_write32(GUEST_DS_LIMIT, vmcs12->guest_ds_limit);"
    },
    {
        "line": 19,
        "fullcodeline": "vmcs_write32(GUEST_FS_LIMIT, vmcs12->guest_fs_limit);"
    },
    {
        "line": 20,
        "fullcodeline": "vmcs_write32(GUEST_GS_LIMIT, vmcs12->guest_gs_limit);"
    },
    {
        "line": 21,
        "fullcodeline": "vmcs_write32(GUEST_LDTR_LIMIT, vmcs12->guest_ldtr_limit);"
    },
    {
        "line": 22,
        "fullcodeline": "vmcs_write32(GUEST_TR_LIMIT, vmcs12->guest_tr_limit);"
    },
    {
        "line": 23,
        "fullcodeline": "vmcs_write32(GUEST_GDTR_LIMIT, vmcs12->guest_gdtr_limit);"
    },
    {
        "line": 24,
        "fullcodeline": "vmcs_write32(GUEST_IDTR_LIMIT, vmcs12->guest_idtr_limit);"
    },
    {
        "line": 25,
        "fullcodeline": "vmcs_write32(GUEST_ES_AR_BYTES, vmcs12->guest_es_ar_bytes);"
    },
    {
        "line": 26,
        "fullcodeline": "vmcs_write32(GUEST_CS_AR_BYTES, vmcs12->guest_cs_ar_bytes);"
    },
    {
        "line": 27,
        "fullcodeline": "vmcs_write32(GUEST_SS_AR_BYTES, vmcs12->guest_ss_ar_bytes);"
    },
    {
        "line": 28,
        "fullcodeline": "vmcs_write32(GUEST_DS_AR_BYTES, vmcs12->guest_ds_ar_bytes);"
    },
    {
        "line": 29,
        "fullcodeline": "vmcs_write32(GUEST_FS_AR_BYTES, vmcs12->guest_fs_ar_bytes);"
    },
    {
        "line": 30,
        "fullcodeline": "vmcs_write32(GUEST_GS_AR_BYTES, vmcs12->guest_gs_ar_bytes);"
    },
    {
        "line": 31,
        "fullcodeline": "vmcs_write32(GUEST_LDTR_AR_BYTES, vmcs12->guest_ldtr_ar_bytes);"
    },
    {
        "line": 32,
        "fullcodeline": "vmcs_write32(GUEST_TR_AR_BYTES, vmcs12->guest_tr_ar_bytes);"
    },
    {
        "line": 33,
        "fullcodeline": "vmcs_writel(GUEST_ES_BASE, vmcs12->guest_es_base);"
    },
    {
        "line": 34,
        "fullcodeline": "vmcs_writel(GUEST_CS_BASE, vmcs12->guest_cs_base);"
    },
    {
        "line": 35,
        "fullcodeline": "vmcs_writel(GUEST_SS_BASE, vmcs12->guest_ss_base);"
    },
    {
        "line": 36,
        "fullcodeline": "vmcs_writel(GUEST_DS_BASE, vmcs12->guest_ds_base);"
    },
    {
        "line": 37,
        "fullcodeline": "vmcs_writel(GUEST_FS_BASE, vmcs12->guest_fs_base);"
    },
    {
        "line": 38,
        "fullcodeline": "vmcs_writel(GUEST_GS_BASE, vmcs12->guest_gs_base);"
    },
    {
        "line": 39,
        "fullcodeline": "vmcs_writel(GUEST_LDTR_BASE, vmcs12->guest_ldtr_base);"
    },
    {
        "line": 40,
        "fullcodeline": "vmcs_writel(GUEST_TR_BASE, vmcs12->guest_tr_base);"
    },
    {
        "line": 41,
        "fullcodeline": "vmcs_writel(GUEST_GDTR_BASE, vmcs12->guest_gdtr_base);"
    },
    {
        "line": 42,
        "fullcodeline": "vmcs_writel(GUEST_IDTR_BASE, vmcs12->guest_idtr_base);"
    },
    {
        "line": 66,
        "fullcodeline": "vmcs_write32(GUEST_SYSENTER_CS, vmcs12->guest_sysenter_cs);"
    },
    {
        "line": 67,
        "fullcodeline": "vmx_set_rflags(vcpu, vmcs12->guest_rflags);"
    },
    {
        "line": 68,
        "fullcodeline": "vmcs_writel(GUEST_PENDING_DBG_EXCEPTIONS,"
    },
    {
        "line": 70,
        "fullcodeline": "vmcs_writel(GUEST_SYSENTER_ESP, vmcs12->guest_sysenter_esp);"
    },
    {
        "line": 71,
        "fullcodeline": "vmcs_writel(GUEST_SYSENTER_EIP, vmcs12->guest_sysenter_eip);"
    },
    {
        "line": 75,
        "fullcodeline": "vmcs_write64(VMCS_LINK_POINTER, -1ull);"
    },
    {
        "line": 77,
        "fullcodeline": "exec_control = vmcs12->pin_based_vm_exec_control;"
    },
    {
        "line": 80,
        "fullcodeline": "exec_control &= ~PIN_BASED_VMX_PREEMPTION_TIMER;"
    },
    {
        "line": 81,
        "fullcodeline": "exec_control |= vmcs_config.pin_based_exec_ctrl;"
    },
    {
        "line": 94,
        "fullcodeline": "vmcs_write32(PIN_BASED_VM_EXEC_CONTROL, exec_control);"
    },
    {
        "line": 96,
        "fullcodeline": "vmx->nested.preemption_timer_expired = false;"
    },
    {
        "line": 114,
        "fullcodeline": "vmcs_write32(PAGE_FAULT_ERROR_CODE_MASK,"
    },
    {
        "line": 116,
        "fullcodeline": "vmcs_write32(PAGE_FAULT_ERROR_CODE_MATCH,"
    },
    {
        "line": 172,
        "fullcodeline": "vmx_set_constant_host_state(vmx);"
    },
    {
        "line": 177,
        "fullcodeline": "vmcs_write32(VM_EXIT_MSR_STORE_COUNT, 0);"
    },
    {
        "line": 178,
        "fullcodeline": "vmcs_write32(VM_EXIT_MSR_LOAD_COUNT, vmx->msr_autoload.nr);"
    },
    {
        "line": 179,
        "fullcodeline": "vmcs_write64(VM_EXIT_MSR_LOAD_ADDR, __pa(vmx->msr_autoload.host));"
    },
    {
        "line": 180,
        "fullcodeline": "vmcs_write32(VM_ENTRY_MSR_LOAD_COUNT, vmx->msr_autoload.nr);"
    },
    {
        "line": 181,
        "fullcodeline": "vmcs_write64(VM_ENTRY_MSR_LOAD_ADDR, __pa(vmx->msr_autoload.guest));"
    },
    {
        "line": 190,
        "fullcodeline": "vmx->host_rsp = 0;"
    },
    {
        "line": 192,
        "fullcodeline": "exec_control = vmx_exec_control(vmx); /* L0's desires */"
    },
    {
        "line": 193,
        "fullcodeline": "exec_control &= ~CPU_BASED_VIRTUAL_INTR_PENDING;"
    },
    {
        "line": 194,
        "fullcodeline": "exec_control &= ~CPU_BASED_VIRTUAL_NMI_PENDING;"
    },
    {
        "line": 195,
        "fullcodeline": "exec_control &= ~CPU_BASED_TPR_SHADOW;"
    },
    {
        "line": 196,
        "fullcodeline": "exec_control |= vmcs12->cpu_based_vm_exec_control;"
    },
    {
        "line": 217,
        "fullcodeline": "exec_control &= ~CPU_BASED_USE_IO_BITMAPS;"
    },
    {
        "line": 218,
        "fullcodeline": "exec_control |= CPU_BASED_UNCOND_IO_EXITING;"
    },
    {
        "line": 220,
        "fullcodeline": "vmcs_write32(CPU_BASED_VM_EXEC_CONTROL, exec_control);"
    },
    {
        "line": 226,
        "fullcodeline": "update_exception_bitmap(vcpu);"
    },
    {
        "line": 227,
        "fullcodeline": "vcpu->arch.cr0_guest_owned_bits &= ~vmcs12->cr0_guest_host_mask;"
    },
    {
        "line": 228,
        "fullcodeline": "vmcs_writel(CR0_GUEST_HOST_MASK, ~vcpu->arch.cr0_guest_owned_bits);"
    },
    {
        "line": 234,
        "fullcodeline": "vmcs_write32(VM_EXIT_CONTROLS, vmcs_config.vmexit_ctrl);"
    },
    {
        "line": 239,
        "fullcodeline": "vm_entry_controls_init(vmx,"
    },
    {
        "line": 252,
        "fullcodeline": "set_cr4_guest_host_mask(vmx);"
    },
    {
        "line": 318,
        "fullcodeline": "vmx_set_cr0(vcpu, vmcs12->guest_cr0);"
    },
    {
        "line": 319,
        "fullcodeline": "vmcs_writel(CR0_READ_SHADOW, nested_read_cr0(vmcs12));"
    },
    {
        "line": 321,
        "fullcodeline": "vmx_set_cr4(vcpu, vmcs12->guest_cr4);"
    },
    {
        "line": 322,
        "fullcodeline": "vmcs_writel(CR4_READ_SHADOW, nested_read_cr4(vmcs12));"
    },
    {
        "line": 332,
        "fullcodeline": "vmx_set_efer(vcpu, vcpu->arch.efer);"
    },
    {
        "line": 352,
        "fullcodeline": "kvm_register_write(vcpu, VCPU_REGS_RSP, vmcs12->guest_rsp);"
    },
    {
        "line": 353,
        "fullcodeline": "kvm_register_write(vcpu, VCPU_REGS_RIP, vmcs12->guest_rip);"
    },
    {
        "line": 44,
        "fullcodeline": "if (from_vmentry &&"
    },
    {
        "line": 73,
        "fullcodeline": "if (nested_cpu_has_xsaves(vmcs12))"
    },
    {
        "line": 82,
        "fullcodeline": "if (vmx->hv_deadline_tsc == -1)"
    },
    {
        "line": 86,
        "fullcodeline": "if (nested_cpu_has_posted_intr(vmcs12)) {"
    },
    {
        "line": 97,
        "fullcodeline": "if (nested_cpu_has_preemption_timer(vmcs12))"
    },
    {
        "line": 115,
        "fullcodeline": "enable_ept ? vmcs12->page_fault_error_code_mask : 0);"
    },
    {
        "line": 117,
        "fullcodeline": "enable_ept ? vmcs12->page_fault_error_code_match : 0);"
    },
    {
        "line": 119,
        "fullcodeline": "if (cpu_has_secondary_exec_ctrls()) {"
    },
    {
        "line": 203,
        "fullcodeline": "if (exec_control & CPU_BASED_TPR_SHADOW) {"
    },
    {
        "line": 240,
        "fullcodeline": "(vmcs12->vm_entry_controls & ~VM_ENTRY_LOAD_IA32_EFER &"
    },
    {
        "line": 244,
        "fullcodeline": "if (from_vmentry &&"
    },
    {
        "line": 254,
        "fullcodeline": "if (from_vmentry &&"
    },
    {
        "line": 258,
        "fullcodeline": "if (vmcs12->cpu_based_vm_exec_control & CPU_BASED_USE_TSC_OFFSETING)"
    },
    {
        "line": 300,
        "fullcodeline": "if (nested_cpu_has_ept(vmcs12)) {"
    },
    {
        "line": 335,
        "fullcodeline": "if (nested_vmx_load_cr3(vcpu, vmcs12->guest_cr3, nested_cpu_has_ept(vmcs12),"
    },
    {
        "line": 45,
        "fullcodeline": "(vmcs12->vm_entry_controls & VM_ENTRY_LOAD_DEBUG_CONTROLS)) {"
    },
    {
        "line": 46,
        "fullcodeline": "kvm_set_dr(vcpu, 7, vmcs12->guest_dr7);"
    },
    {
        "line": 47,
        "fullcodeline": "vmcs_write64(GUEST_IA32_DEBUGCTL, vmcs12->guest_ia32_debugctl);"
    },
    {
        "line": 53,
        "fullcodeline": "vmcs_write32(VM_ENTRY_INTR_INFO_FIELD,"
    },
    {
        "line": 55,
        "fullcodeline": "vmcs_write32(VM_ENTRY_EXCEPTION_ERROR_CODE,"
    },
    {
        "line": 57,
        "fullcodeline": "vmcs_write32(VM_ENTRY_INSTRUCTION_LEN,"
    },
    {
        "line": 59,
        "fullcodeline": "vmcs_write32(GUEST_INTERRUPTIBILITY_INFO,"
    },
    {
        "line": 61,
        "fullcodeline": "vmx->loaded_vmcs->nmi_known_unmasked ="
    },
    {
        "line": 74,
        "fullcodeline": "vmcs_write64(XSS_EXIT_BITMAP, vmcs12->xss_exit_bitmap);"
    },
    {
        "line": 83,
        "fullcodeline": "exec_control &= ~PIN_BASED_VMX_PREEMPTION_TIMER;"
    },
    {
        "line": 87,
        "fullcodeline": "vmx->nested.posted_intr_nv = vmcs12->posted_intr_nv;"
    },
    {
        "line": 88,
        "fullcodeline": "vmx->nested.pi_pending = false;"
    },
    {
        "line": 89,
        "fullcodeline": "vmcs_write16(POSTED_INTR_NV, POSTED_INTR_NESTED_VECTOR);"
    },
    {
        "line": 98,
        "fullcodeline": "vmx_start_preemption_timer(vcpu);"
    },
    {
        "line": 120,
        "fullcodeline": "exec_control = vmx->secondary_exec_control;"
    },
    {
        "line": 123,
        "fullcodeline": "exec_control &= ~(SECONDARY_EXEC_VIRTUALIZE_APIC_ACCESSES |"
    },
    {
        "line": 162,
        "fullcodeline": "vmcs_write32(SECONDARY_VM_EXEC_CONTROL, exec_control);"
    },
    {
        "line": 204,
        "fullcodeline": "vmcs_write64(VIRTUAL_APIC_PAGE_ADDR, -1ull);"
    },
    {
        "line": 205,
        "fullcodeline": "vmcs_write32(TPR_THRESHOLD, vmcs12->tpr_threshold);"
    },
    {
        "line": 242,
        "fullcodeline": "(vmcs_config.vmentry_ctrl & ~VM_ENTRY_IA32E_MODE));"
    },
    {
        "line": 245,
        "fullcodeline": "(vmcs12->vm_entry_controls & VM_ENTRY_LOAD_IA32_PAT)) {"
    },
    {
        "line": 246,
        "fullcodeline": "vmcs_write64(GUEST_IA32_PAT, vmcs12->guest_ia32_pat);"
    },
    {
        "line": 247,
        "fullcodeline": "vcpu->arch.pat = vmcs12->guest_ia32_pat;"
    },
    {
        "line": 255,
        "fullcodeline": "vmcs12->vm_entry_controls & VM_ENTRY_LOAD_BNDCFGS)"
    },
    {
        "line": 256,
        "fullcodeline": "vmcs_write64(GUEST_BNDCFGS, vmcs12->guest_bndcfgs);"
    },
    {
        "line": 259,
        "fullcodeline": "vmcs_write64(TSC_OFFSET,"
    },
    {
        "line": 264,
        "fullcodeline": "decache_tsc_multiplier(vmx);"
    },
    {
        "line": 295,
        "fullcodeline": "ASSERT(vmx->pml_pg);"
    },
    {
        "line": 296,
        "fullcodeline": "vmcs_write64(PML_ADDRESS, page_to_phys(vmx->pml_pg));"
    },
    {
        "line": 297,
        "fullcodeline": "vmcs_write16(GUEST_PML_INDEX, PML_ENTITY_NUM - 1);"
    },
    {
        "line": 325,
        "fullcodeline": "(vmcs12->vm_entry_controls & VM_ENTRY_LOAD_IA32_EFER))"
    },
    {
        "line": 326,
        "fullcodeline": "vcpu->arch.efer = vmcs12->guest_ia32_efer;"
    },
    {
        "line": 340,
        "fullcodeline": "vcpu->arch.walk_mmu->inject_page_fault = vmx_inject_page_fault_nested;"
    },
    {
        "line": 346,
        "fullcodeline": "vmcs_write64(GUEST_PDPTR0, vmcs12->guest_pdptr0);"
    },
    {
        "line": 347,
        "fullcodeline": "vmcs_write64(GUEST_PDPTR1, vmcs12->guest_pdptr1);"
    },
    {
        "line": 348,
        "fullcodeline": "vmcs_write64(GUEST_PDPTR2, vmcs12->guest_pdptr2);"
    },
    {
        "line": 349,
        "fullcodeline": "vmcs_write64(GUEST_PDPTR3, vmcs12->guest_pdptr3);"
    },
    {
        "line": 49,
        "fullcodeline": "kvm_set_dr(vcpu, 7, vcpu->arch.dr7);"
    },
    {
        "line": 50,
        "fullcodeline": "vmcs_write64(GUEST_IA32_DEBUGCTL, vmx->nested.vmcs01_debugctl);"
    },
    {
        "line": 62,
        "fullcodeline": "!(vmcs12->guest_interruptibility_info & GUEST_INTR_STATE_NMI);"
    },
    {
        "line": 64,
        "fullcodeline": "vmcs_write32(VM_ENTRY_INTR_INFO_FIELD, 0);"
    },
    {
        "line": 91,
        "fullcodeline": "exec_control &= ~PIN_BASED_POSTED_INTR;"
    },
    {
        "line": 130,
        "fullcodeline": "if (nested_cpu_has(vmcs12,"
    },
    {
        "line": 138,
        "fullcodeline": "if (exec_control & SECONDARY_EXEC_ENABLE_VMFUNC)"
    },
    {
        "line": 141,
        "fullcodeline": "if (exec_control & SECONDARY_EXEC_VIRTUAL_INTR_DELIVERY) {"
    },
    {
        "line": 159,
        "fullcodeline": "if (exec_control & SECONDARY_EXEC_VIRTUALIZE_APIC_ACCESSES)"
    },
    {
        "line": 241,
        "fullcodeline": "~VM_ENTRY_IA32E_MODE) |"
    },
    {
        "line": 260,
        "fullcodeline": "vcpu->arch.tsc_offset + vmcs12->tsc_offset);"
    },
    {
        "line": 262,
        "fullcodeline": "vmcs_write64(TSC_OFFSET, vcpu->arch.tsc_offset);"
    },
    {
        "line": 275,
        "fullcodeline": "if (nested_cpu_has_vpid(vmcs12) && vmx->nested.vpid02) {"
    },
    {
        "line": 301,
        "fullcodeline": "if (nested_ept_init_mmu_context(vcpu)) {"
    },
    {
        "line": 132,
        "fullcodeline": "vmcs12_exec_ctrl = vmcs12->secondary_vm_exec_control &"
    },
    {
        "line": 134,
        "fullcodeline": "exec_control |= vmcs12_exec_ctrl;"
    },
    {
        "line": 139,
        "fullcodeline": "vmcs_write64(VM_FUNCTION_CONTROL, 0);"
    },
    {
        "line": 142,
        "fullcodeline": "vmcs_write64(EOI_EXIT_BITMAP0,"
    },
    {
        "line": 144,
        "fullcodeline": "vmcs_write64(EOI_EXIT_BITMAP1,"
    },
    {
        "line": 146,
        "fullcodeline": "vmcs_write64(EOI_EXIT_BITMAP2,"
    },
    {
        "line": 148,
        "fullcodeline": "vmcs_write64(EOI_EXIT_BITMAP3,"
    },
    {
        "line": 150,
        "fullcodeline": "vmcs_write16(GUEST_INTR_STATUS,"
    },
    {
        "line": 160,
        "fullcodeline": "vmcs_write64(APIC_ACCESS_ADDR, -1ull);"
    },
    {
        "line": 248,
        "fullcodeline": "} else if (vmcs_config.vmentry_ctrl & VM_ENTRY_LOAD_IA32_PAT) {"
    },
    {
        "line": 276,
        "fullcodeline": "vmcs_write16(VIRTUAL_PROCESSOR_ID, vmx->nested.vpid02);"
    },
    {
        "line": 302,
        "fullcodeline": "*entry_failure_code = ENTRY_FAIL_DEFAULT;"
    },
    {
        "line": 305,
        "fullcodeline": "} else if (nested_cpu_has2(vmcs12,"
    },
    {
        "line": 327,
        "fullcodeline": "else if (vmcs12->vm_entry_controls & VM_ENTRY_IA32E_MODE)"
    },
    {
        "line": 249,
        "fullcodeline": "vmcs_write64(GUEST_IA32_PAT, vmx->vcpu.arch.pat);"
    },
    {
        "line": 277,
        "fullcodeline": "if (vmcs12->virtual_processor_id != vmx->nested.last_vpid) {"
    },
    {
        "line": 282,
        "fullcodeline": "vmcs_write16(VIRTUAL_PROCESSOR_ID, vmx->vpid);"
    },
    {
        "line": 283,
        "fullcodeline": "vmx_flush_tlb(vcpu);"
    },
    {
        "line": 307,
        "fullcodeline": "vmx_flush_tlb_ept_only(vcpu);"
    },
    {
        "line": 328,
        "fullcodeline": "vcpu->arch.efer |= (EFER_LMA | EFER_LME);"
    },
    {
        "line": 133,
        "fullcodeline": "~SECONDARY_EXEC_ENABLE_PML;"
    },
    {
        "line": 278,
        "fullcodeline": "vmx->nested.last_vpid = vmcs12->virtual_processor_id;"
    },
    {
        "line": 279,
        "fullcodeline": "__vmx_flush_tlb(vcpu, to_vmx(vcpu)->nested.vpid02);"
    },
    {
        "line": 330,
        "fullcodeline": "vcpu->arch.efer &= ~(EFER_LMA | EFER_LME);"
    }
]