[
    {
        "line": 3,
        "fullcodeline": "size_t bytesread = 0, i;"
    },
    {
        "line": 5,
        "fullcodeline": "matvar_t **cells = NULL;"
    },
    {
        "line": 6,
        "fullcodeline": "size_t nelems = 1;"
    },
    {
        "line": 8,
        "fullcodeline": "err = SafeMulDims(matvar, &nelems);"
    },
    {
        "line": 14,
        "fullcodeline": "err = SafeMul(&matvar->nbytes, nelems, matvar->data_size);"
    },
    {
        "line": 20,
        "fullcodeline": "matvar->data = calloc(nelems, matvar->data_size);"
    },
    {
        "line": 26,
        "fullcodeline": "cells = (matvar_t **)matvar->data;"
    },
    {
        "line": 21,
        "fullcodeline": "if ( NULL == matvar->data ) {"
    },
    {
        "line": 28,
        "fullcodeline": "if ( matvar->compression == MAT_COMPRESSION_ZLIB ) {"
    },
    {
        "line": 10,
        "fullcodeline": "Mat_Critical(\"Integer multiplication overflow\");"
    },
    {
        "line": 16,
        "fullcodeline": "Mat_Critical(\"Integer multiplication overflow\");"
    },
    {
        "line": 192,
        "fullcodeline": "Mat_Critical(\"Not compiled with zlib support\");"
    },
    {
        "line": 22,
        "fullcodeline": "if ( NULL != matvar->name )"
    },
    {
        "line": 196,
        "fullcodeline": "mat_uint32_t buf[6];"
    },
    {
        "line": 23,
        "fullcodeline": "Mat_Critical(\"Couldn't allocate memory for %s->data\", matvar->name);"
    },
    {
        "line": 200,
        "fullcodeline": "for ( i = 0; i < nelems; i++ ) {"
    },
    {
        "line": 202,
        "fullcodeline": "cells[i] = Mat_VarCalloc();"
    },
    {
        "line": 209,
        "fullcodeline": "cell_bytes_read = fread(buf,4,2,(FILE*)mat->fp);"
    },
    {
        "line": 214,
        "fullcodeline": "bytesread += cell_bytes_read;"
    },
    {
        "line": 219,
        "fullcodeline": "nBytes = buf[1];"
    },
    {
        "line": 234,
        "fullcodeline": "bytesread += fread(buf,4,6,(FILE*)mat->fp);"
    },
    {
        "line": 243,
        "fullcodeline": "nBytes-=24;"
    },
    {
        "line": 263,
        "fullcodeline": "bytesread+=fread(buf,1,8,(FILE*)mat->fp);"
    },
    {
        "line": 264,
        "fullcodeline": "nBytes-=8;"
    },
    {
        "line": 269,
        "fullcodeline": "name_len = 0;"
    },
    {
        "line": 280,
        "fullcodeline": "cells[i]->internal->datapos = ftell((FILE*)mat->fp);"
    },
    {
        "line": 203,
        "fullcodeline": "if ( !cells[i] ) {"
    },
    {
        "line": 212,
        "fullcodeline": "if ( !cell_bytes_read )"
    },
    {
        "line": 220,
        "fullcodeline": "if ( 0 == nBytes ) {"
    },
    {
        "line": 245,
        "fullcodeline": "if ( buf[0] == MAT_T_UINT32 ) {"
    },
    {
        "line": 258,
        "fullcodeline": "size_t nbytes = ReadRankDims(mat, cells[i], (enum matio_types)buf[4], buf[5]);"
    },
    {
        "line": 259,
        "fullcodeline": "bytesread += nbytes;"
    },
    {
        "line": 260,
        "fullcodeline": "nBytes -= nbytes;"
    },
    {
        "line": 270,
        "fullcodeline": "if ( buf[1] > 0 ) {"
    },
    {
        "line": 281,
        "fullcodeline": "if ( cells[i]->internal->datapos != -1L ) {"
    },
    {
        "line": 216,
        "fullcodeline": "(void)Mat_uint32Swap(buf);"
    },
    {
        "line": 217,
        "fullcodeline": "(void)Mat_uint32Swap(buf+1);"
    },
    {
        "line": 222,
        "fullcodeline": "free(cells[i]->internal);"
    },
    {
        "line": 223,
        "fullcodeline": "cells[i]->internal = NULL;"
    },
    {
        "line": 236,
        "fullcodeline": "(void)Mat_uint32Swap(buf);"
    },
    {
        "line": 237,
        "fullcodeline": "(void)Mat_uint32Swap(buf+1);"
    },
    {
        "line": 238,
        "fullcodeline": "(void)Mat_uint32Swap(buf+2);"
    },
    {
        "line": 239,
        "fullcodeline": "(void)Mat_uint32Swap(buf+3);"
    },
    {
        "line": 240,
        "fullcodeline": "(void)Mat_uint32Swap(buf+4);"
    },
    {
        "line": 241,
        "fullcodeline": "(void)Mat_uint32Swap(buf+5);"
    },
    {
        "line": 246,
        "fullcodeline": "array_flags = buf[2];"
    },
    {
        "line": 247,
        "fullcodeline": "cells[i]->class_type = CLASS_FROM_ARRAY_FLAGS(array_flags);"
    },
    {
        "line": 248,
        "fullcodeline": "cells[i]->isComplex  = (array_flags & MAT_F_COMPLEX);"
    },
    {
        "line": 249,
        "fullcodeline": "cells[i]->isGlobal   = (array_flags & MAT_F_GLOBAL);"
    },
    {
        "line": 250,
        "fullcodeline": "cells[i]->isLogical  = (array_flags & MAT_F_LOGICAL);"
    },
    {
        "line": 266,
        "fullcodeline": "(void)Mat_uint32Swap(buf);"
    },
    {
        "line": 267,
        "fullcodeline": "(void)Mat_uint32Swap(buf+1);"
    },
    {
        "line": 286,
        "fullcodeline": "(void)fseek((FILE*)mat->fp,cells[i]->internal->datapos+nBytes,SEEK_SET);"
    },
    {
        "line": 251,
        "fullcodeline": "if ( cells[i]->class_type == MAT_C_SPARSE ) {"
    },
    {
        "line": 272,
        "fullcodeline": "if ( buf[0] == MAT_T_INT8 ) {    /* Name not in tag */"
    },
    {
        "line": 282,
        "fullcodeline": "if ( cells[i]->class_type == MAT_C_STRUCT )"
    },
    {
        "line": 284,
        "fullcodeline": "if ( cells[i]->class_type == MAT_C_CELL )"
    },
    {
        "line": 288,
        "fullcodeline": "Mat_Critical(\"Couldn't determine file position\");"
    },
    {
        "line": 225,
        "fullcodeline": "} else if ( buf[0] != MAT_T_MATRIX ) {"
    },
    {
        "line": 253,
        "fullcodeline": "cells[i]->nbytes = buf[3];"
    },
    {
        "line": 273,
        "fullcodeline": "name_len = buf[1];"
    },
    {
        "line": 276,
        "fullcodeline": "nBytes -= name_len;"
    },
    {
        "line": 277,
        "fullcodeline": "(void)fseek((FILE*)mat->fp,name_len,SEEK_CUR);"
    },
    {
        "line": 283,
        "fullcodeline": "bytesread+=ReadNextStructField(mat,cells[i]);"
    },
    {
        "line": 285,
        "fullcodeline": "bytesread+=ReadNextCell(mat,cells[i]);"
    },
    {
        "line": 226,
        "fullcodeline": "Mat_VarFree(cells[i]);"
    },
    {
        "line": 227,
        "fullcodeline": "cells[i] = NULL;"
    },
    {
        "line": 274,
        "fullcodeline": "if ( name_len % 8 > 0 )"
    },
    {
        "line": 275,
        "fullcodeline": "name_len = name_len+(8-(name_len % 8));"
    }
]