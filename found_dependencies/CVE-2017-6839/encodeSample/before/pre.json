[
    {
        "line": 4,
        "fullcodeline": "int predictor = (state.sample1 * coefficient[0] +"
    },
    {
        "line": 6,
        "fullcodeline": "int code = sample - predictor;"
    },
    {
        "line": 7,
        "fullcodeline": "int bias = state.delta / 2;"
    },
    {
        "line": 10,
        "fullcodeline": "code = (code + bias) / state.delta;"
    },
    {
        "line": 11,
        "fullcodeline": "code = clamp(code, -8, 7) & 0xf;"
    },
    {
        "line": 13,
        "fullcodeline": "predictor += ((code & 0x8) ? (code - 0x10) : code) * state.delta;"
    },
    {
        "line": 15,
        "fullcodeline": "state.sample2 = state.sample1;"
    },
    {
        "line": 16,
        "fullcodeline": "state.sample1 = clamp(predictor, MIN_INT16, MAX_INT16);"
    },
    {
        "line": 17,
        "fullcodeline": "state.delta = (adaptationTable[code] * state.delta) >> 8;"
    },
    {
        "line": 8,
        "fullcodeline": "if (code < 0)"
    },
    {
        "line": 18,
        "fullcodeline": "if (state.delta < 16)"
    },
    {
        "line": 9,
        "fullcodeline": "bias = -bias;"
    },
    {
        "line": 19,
        "fullcodeline": "state.delta = 16;"
    },
    {
        "line": 5,
        "fullcodeline": "state.sample2 * coefficient[1]) >> 8;"
    }
]