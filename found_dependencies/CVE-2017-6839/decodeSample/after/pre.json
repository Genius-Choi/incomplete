[
    {
        "line": 4,
        "fullcodeline": "int linearSample = (state.sample1 * coefficient[0] +"
    },
    {
        "line": 8,
        "fullcodeline": "linearSample += ((code & 0x08) ? (code - 0x10) : code) * state.delta;"
    },
    {
        "line": 10,
        "fullcodeline": "linearSample = clamp(linearSample, MIN_INT16, MAX_INT16);"
    },
    {
        "line": 18,
        "fullcodeline": "delta >>= 8;"
    },
    {
        "line": 12,
        "fullcodeline": "if (multiplyCheckOverflow(state.delta, adaptationTable[code], &delta))"
    },
    {
        "line": 19,
        "fullcodeline": "if (delta < 16)"
    },
    {
        "line": 27,
        "fullcodeline": "return static_cast<int16_t>(linearSample);"
    },
    {
        "line": 15,
        "fullcodeline": "_af_error(AF_BAD_COMPRESSION, \"Error decoding sample\");"
    },
    {
        "line": 20,
        "fullcodeline": "delta = 16;"
    },
    {
        "line": 5,
        "fullcodeline": "state.sample2 * coefficient[1]) >> 8;"
    },
    {
        "line": 14,
        "fullcodeline": "if (ok) *ok=false;"
    }
]