[
    {
        "line": 3,
        "fullcodeline": "ms_adpcm_state decoderState[2];"
    },
    {
        "line": 4,
        "fullcodeline": "ms_adpcm_state *state[2];"
    },
    {
        "line": 9,
        "fullcodeline": "int outputLength = m_framesPerPacket * sizeof (int16_t) * channelCount;"
    },
    {
        "line": 11,
        "fullcodeline": "state[0] = &decoderState[0];"
    },
    {
        "line": 44,
        "fullcodeline": "const int16_t *coefficient[2] ="
    },
    {
        "line": 60,
        "fullcodeline": "int samplesRemaining = (m_framesPerPacket - 2) * m_track->f.channelCount;"
    },
    {
        "line": 12,
        "fullcodeline": "if (channelCount == 2)"
    },
    {
        "line": 18,
        "fullcodeline": "for (int i=0; i<channelCount; i++)"
    },
    {
        "line": 25,
        "fullcodeline": "for (int i=0; i<channelCount; i++)"
    },
    {
        "line": 32,
        "fullcodeline": "for (int i=0; i<channelCount; i++)"
    },
    {
        "line": 38,
        "fullcodeline": "for (int i=0; i<channelCount; i++)"
    },
    {
        "line": 50,
        "fullcodeline": "for (int i=0; i<channelCount; i++)"
    },
    {
        "line": 51,
        "fullcodeline": "*decoded++ = state[i]->sample2;"
    },
    {
        "line": 53,
        "fullcodeline": "for (int i=0; i<channelCount; i++)"
    },
    {
        "line": 54,
        "fullcodeline": "*decoded++ = state[i]->sample1;"
    },
    {
        "line": 62,
        "fullcodeline": "while (samplesRemaining > 0)"
    },
    {
        "line": 13,
        "fullcodeline": "state[1] = &decoderState[1];"
    },
    {
        "line": 21,
        "fullcodeline": "assert(state[i]->predictorIndex < m_numCoefficients);"
    },
    {
        "line": 27,
        "fullcodeline": "state[i]->delta = (encoded[1]<<8) | encoded[0];"
    },
    {
        "line": 28,
        "fullcodeline": "encoded += sizeof (uint16_t);"
    },
    {
        "line": 34,
        "fullcodeline": "state[i]->sample1 = (encoded[1]<<8) | encoded[0];"
    },
    {
        "line": 35,
        "fullcodeline": "encoded += sizeof (uint16_t);"
    },
    {
        "line": 40,
        "fullcodeline": "state[i]->sample2 = (encoded[1]<<8) | encoded[0];"
    },
    {
        "line": 41,
        "fullcodeline": "encoded += sizeof (uint16_t);"
    },
    {
        "line": 68,
        "fullcodeline": "code = *encoded >> 4;"
    },
    {
        "line": 69,
        "fullcodeline": "newSample = decodeSample(*state[0], code, coefficient[0], &ok);"
    },
    {
        "line": 71,
        "fullcodeline": "*decoded++ = newSample;"
    },
    {
        "line": 73,
        "fullcodeline": "code = *encoded & 0x0f;"
    },
    {
        "line": 74,
        "fullcodeline": "newSample = decodeSample(*state[1], code, coefficient[1], &ok);"
    },
    {
        "line": 76,
        "fullcodeline": "*decoded++ = newSample;"
    },
    {
        "line": 78,
        "fullcodeline": "encoded++;"
    },
    {
        "line": 79,
        "fullcodeline": "samplesRemaining -= 2;"
    },
    {
        "line": 15,
        "fullcodeline": "state[1] = &decoderState[0];"
    },
    {
        "line": 70,
        "fullcodeline": "if (!ok) return 0;"
    },
    {
        "line": 75,
        "fullcodeline": "if (!ok) return 0;"
    },
    {
        "line": 20,
        "fullcodeline": "state[i]->predictorIndex = *encoded++;"
    }
]