[
    {
        "line": 10,
        "fullcodeline": "if re.search(r\"\\\\\\d|\\\\g<\\d+>\", replacement):"
    },
    {
        "line": 13,
        "fullcodeline": "if isinstance(dirty, (list, tuple)):"
    },
    {
        "line": 25,
        "fullcodeline": "if isinstance(dirty, bytes):"
    },
    {
        "line": 28,
        "fullcodeline": "if isinstance(dirty, str):"
    },
    {
        "line": 38,
        "fullcodeline": "logger.warning(\"No sanitizer support for %s data\", type(dirty))"
    },
    {
        "line": 11,
        "fullcodeline": "raise RuntimeError(\"Invalid replacement string! Must not contain regex match group references.\")"
    },
    {
        "line": 14,
        "fullcodeline": "clean = []"
    },
    {
        "line": 29,
        "fullcodeline": "clean = dirty"
    },
    {
        "line": 15,
        "fullcodeline": "for item in dirty:"
    },
    {
        "line": 21,
        "fullcodeline": "if isinstance(dirty, tuple):"
    },
    {
        "line": 30,
        "fullcodeline": "for sanitizer, repl in settings.SANITIZER_PATTERNS:"
    },
    {
        "line": 22,
        "fullcodeline": "clean = tuple(clean)"
    },
    {
        "line": 26,
        "fullcodeline": "return sanitize(dirty.decode(\"utf-8\")).encode(\"utf-8\")"
    },
    {
        "line": 16,
        "fullcodeline": "if isinstance(item, (list, tuple, bytes, str)):"
    },
    {
        "line": 17,
        "fullcodeline": "clean.append(sanitize(item))"
    },
    {
        "line": 20,
        "fullcodeline": "clean.append(item)"
    },
    {
        "line": 32,
        "fullcodeline": "clean = sanitizer.sub(repl.format(replacement=replacement), clean)"
    }
]