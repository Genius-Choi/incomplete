[
    {
        "line": 2,
        "fullcodeline": "auto k = pp->tokens.lookup(s, l);"
    },
    {
        "line": 3,
        "fullcodeline": "Policy& p = pp->policy;"
    },
    {
        "line": 4,
        "fullcodeline": "bool is_action = false;"
    },
    {
        "line": 5,
        "fullcodeline": "bool is_validaction = false;"
    },
    {
        "line": 6,
        "fullcodeline": "Statement* t = p.statements.empty() ? nullptr : &(p.statements.back());"
    },
    {
        "line": 9,
        "fullcodeline": "if ((w->id == TokenID::Version) && k &&"
    },
    {
        "line": 71,
        "fullcodeline": "if (!arraying) {"
    },
    {
        "line": 10,
        "fullcodeline": "k->kind == TokenKind::version_key) {"
    },
    {
        "line": 75,
        "fullcodeline": "if (is_action && !is_validaction){"
    },
    {
        "line": 12,
        "fullcodeline": "} else if (w->id == TokenID::Id) {"
    },
    {
        "line": 13,
        "fullcodeline": "p.id = string(s, l);"
    },
    {
        "line": 17,
        "fullcodeline": "} else if (w->id == TokenID::Sid) {"
    },
    {
        "line": 19,
        "fullcodeline": "} else if ((w->id == TokenID::Effect) &&"
    },
    {
        "line": 20,
        "fullcodeline": "k->kind == TokenKind::effect_key) {"
    },
    {
        "line": 22,
        "fullcodeline": "} else if (w->id == TokenID::Principal && s && *s == '*') {"
    },
    {
        "line": 24,
        "fullcodeline": "} else if (w->id == TokenID::NotPrincipal && s && *s == '*') {"
    },
    {
        "line": 26,
        "fullcodeline": "} else if ((w->id == TokenID::Action) ||"
    },
    {
        "line": 27,
        "fullcodeline": "(w->id == TokenID::NotAction)) {"
    },
    {
        "line": 28,
        "fullcodeline": "is_action = true;"
    },
    {
        "line": 35,
        "fullcodeline": "} else if (w->id == TokenID::Resource || w->id == TokenID::NotResource) {"
    },
    {
        "line": 30,
        "fullcodeline": "if (match_policy({s, l}, p.name, MATCH_POLICY_ACTION)) {"
    },
    {
        "line": 36,
        "fullcodeline": "auto a = ARN::parse({s, l}, true);"
    },
    {
        "line": 31,
        "fullcodeline": "is_validaction = true;"
    },
    {
        "line": 38,
        "fullcodeline": "if (a && (a->account.empty() || a->account == pp->tenant ||"
    },
    {
        "line": 48,
        "fullcodeline": "} else if (w->kind == TokenKind::cond_key) {"
    },
    {
        "line": 39,
        "fullcodeline": "a->account == \"*\")) {"
    },
    {
        "line": 43,
        "fullcodeline": ".emplace(std::move(*a));"
    },
    {
        "line": 46,
        "fullcodeline": "ldout(cct, 0) << \"Supplied resource is discarded: \" << string(s, l)"
    },
    {
        "line": 49,
        "fullcodeline": "auto& t = pp->policy.statements.back();"
    },
    {
        "line": 40,
        "fullcodeline": "if (a->account.empty() || a->account == \"*\")"
    },
    {
        "line": 54,
        "fullcodeline": "} else if (w->kind == TokenKind::princ_type) {"
    },
    {
        "line": 58,
        "fullcodeline": "auto& pri = pp->s[pp->s.size() - 2].w->id == TokenID::Principal ?"
    },
    {
        "line": 55,
        "fullcodeline": "if (pp->s.size() <= 1) {"
    },
    {
        "line": 61,
        "fullcodeline": "auto o = parse_principal(pp->cct, w->id, string(s, l));"
    },
    {
        "line": 63,
        "fullcodeline": "pri.emplace(std::move(*o));"
    }
]