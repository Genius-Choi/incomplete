[
    {
        "line": 21,
        "fullcodeline": "TEST_DOUBLE(fullPrecision, \"0.0\", 0.0);"
    },
    {
        "line": 22,
        "fullcodeline": "TEST_DOUBLE(fullPrecision, \"-0.0\", -0.0); // For checking issue #289"
    },
    {
        "line": 23,
        "fullcodeline": "TEST_DOUBLE(fullPrecision, \"1.0\", 1.0);"
    },
    {
        "line": 24,
        "fullcodeline": "TEST_DOUBLE(fullPrecision, \"-1.0\", -1.0);"
    },
    {
        "line": 25,
        "fullcodeline": "TEST_DOUBLE(fullPrecision, \"1.5\", 1.5);"
    },
    {
        "line": 26,
        "fullcodeline": "TEST_DOUBLE(fullPrecision, \"-1.5\", -1.5);"
    },
    {
        "line": 27,
        "fullcodeline": "TEST_DOUBLE(fullPrecision, \"3.1416\", 3.1416);"
    },
    {
        "line": 28,
        "fullcodeline": "TEST_DOUBLE(fullPrecision, \"1E10\", 1E10);"
    },
    {
        "line": 29,
        "fullcodeline": "TEST_DOUBLE(fullPrecision, \"1e10\", 1e10);"
    },
    {
        "line": 30,
        "fullcodeline": "TEST_DOUBLE(fullPrecision, \"1E+10\", 1E+10);"
    },
    {
        "line": 31,
        "fullcodeline": "TEST_DOUBLE(fullPrecision, \"1E-10\", 1E-10);"
    },
    {
        "line": 32,
        "fullcodeline": "TEST_DOUBLE(fullPrecision, \"-1E10\", -1E10);"
    },
    {
        "line": 33,
        "fullcodeline": "TEST_DOUBLE(fullPrecision, \"-1e10\", -1e10);"
    },
    {
        "line": 34,
        "fullcodeline": "TEST_DOUBLE(fullPrecision, \"-1E+10\", -1E+10);"
    },
    {
        "line": 35,
        "fullcodeline": "TEST_DOUBLE(fullPrecision, \"-1E-10\", -1E-10);"
    },
    {
        "line": 36,
        "fullcodeline": "TEST_DOUBLE(fullPrecision, \"1.234E+10\", 1.234E+10);"
    },
    {
        "line": 37,
        "fullcodeline": "TEST_DOUBLE(fullPrecision, \"1.234E-10\", 1.234E-10);"
    },
    {
        "line": 38,
        "fullcodeline": "TEST_DOUBLE(fullPrecision, \"1.79769e+308\", 1.79769e+308);"
    },
    {
        "line": 39,
        "fullcodeline": "TEST_DOUBLE(fullPrecision, \"2.22507e-308\", 2.22507e-308);"
    },
    {
        "line": 40,
        "fullcodeline": "TEST_DOUBLE(fullPrecision, \"-1.79769e+308\", -1.79769e+308);"
    },
    {
        "line": 41,
        "fullcodeline": "TEST_DOUBLE(fullPrecision, \"-2.22507e-308\", -2.22507e-308);"
    },
    {
        "line": 42,
        "fullcodeline": "TEST_DOUBLE(fullPrecision, \"4.9406564584124654e-324\", 4.9406564584124654e-324); // minimum denormal"
    },
    {
        "line": 43,
        "fullcodeline": "TEST_DOUBLE(fullPrecision, \"2.2250738585072009e-308\", 2.2250738585072009e-308); // Max subnormal double"
    },
    {
        "line": 44,
        "fullcodeline": "TEST_DOUBLE(fullPrecision, \"2.2250738585072014e-308\", 2.2250738585072014e-308); // Min normal positive double"
    },
    {
        "line": 45,
        "fullcodeline": "TEST_DOUBLE(fullPrecision, \"1.7976931348623157e+308\", 1.7976931348623157e+308); // Max double"
    },
    {
        "line": 46,
        "fullcodeline": "TEST_DOUBLE(fullPrecision, \"1e-10000\", 0.0);                                    // must underflow"
    },
    {
        "line": 47,
        "fullcodeline": "TEST_DOUBLE(fullPrecision, \"18446744073709551616\", 18446744073709551616.0);     // 2^64 (max of uint64_t + 1, force to use double)"
    },
    {
        "line": 48,
        "fullcodeline": "TEST_DOUBLE(fullPrecision, \"-9223372036854775809\", -9223372036854775809.0);     // -2^63 - 1(min of int64_t + 1, force to use double)"
    },
    {
        "line": 49,
        "fullcodeline": "TEST_DOUBLE(fullPrecision, \"0.9868011474609375\", 0.9868011474609375);           // https://github.com/Tencent/rapidjson/issues/120"
    },
    {
        "line": 50,
        "fullcodeline": "TEST_DOUBLE(fullPrecision, \"123e34\", 123e34);                                   // Fast Path Cases In Disguise"
    },
    {
        "line": 51,
        "fullcodeline": "TEST_DOUBLE(fullPrecision, \"45913141877270640000.0\", 45913141877270640000.0);"
    },
    {
        "line": 52,
        "fullcodeline": "TEST_DOUBLE(fullPrecision, \"2.2250738585072011e-308\", 2.2250738585072011e-308); // http://www.exploringbinary.com/php-hangs-on-numeric-value-2-2250738585072011e-308/"
    },
    {
        "line": 53,
        "fullcodeline": "TEST_DOUBLE(fullPrecision, \"1e-00011111111111\", 0.0);                           // Issue #313"
    },
    {
        "line": 54,
        "fullcodeline": "TEST_DOUBLE(fullPrecision, \"-1e-00011111111111\", -0.0);"
    },
    {
        "line": 55,
        "fullcodeline": "TEST_DOUBLE(fullPrecision, \"1e-214748363\", 0.0);                                  // Maximum supported negative exponent"
    },
    {
        "line": 56,
        "fullcodeline": "TEST_DOUBLE(fullPrecision, \"1e-214748364\", 0.0);"
    },
    {
        "line": 57,
        "fullcodeline": "TEST_DOUBLE(fullPrecision, \"1e-21474836311\", 0.0);"
    },
    {
        "line": 58,
        "fullcodeline": "TEST_DOUBLE(fullPrecision, \"0.017976931348623157e+310\", 1.7976931348623157e+308); // Max double in another form"
    },
    {
        "line": 64,
        "fullcodeline": "TEST_DOUBLE(fullPrecision, \"2.2250738585072012e-308\", 2.2250738585072014e-308); // http://www.exploringbinary.com/java-hangs-when-converting-2-2250738585072012e-308/"
    },
    {
        "line": 68,
        "fullcodeline": "TEST_DOUBLE(fullPrecision, \"2.22507385850720113605740979670913197593481954635164564e-308\", 2.2250738585072009e-308);"
    },
    {
        "line": 69,
        "fullcodeline": "TEST_DOUBLE(fullPrecision, \"2.22507385850720113605740979670913197593481954635164565e-308\", 2.2250738585072014e-308);"
    },
    {
        "line": 73,
        "fullcodeline": "TEST_DOUBLE(fullPrecision, \"0.999999999999999944488848768742172978818416595458984375\", 1.0); // round to even"
    },
    {
        "line": 74,
        "fullcodeline": "TEST_DOUBLE(fullPrecision, \"0.999999999999999944488848768742172978818416595458984374\", 0.99999999999999989); // previous double"
    },
    {
        "line": 75,
        "fullcodeline": "TEST_DOUBLE(fullPrecision, \"0.999999999999999944488848768742172978818416595458984376\", 1.0); // next double"
    },
    {
        "line": 77,
        "fullcodeline": "TEST_DOUBLE(fullPrecision, \"1.00000000000000011102230246251565404236316680908203125\", 1.0); // round to even"
    },
    {
        "line": 78,
        "fullcodeline": "TEST_DOUBLE(fullPrecision, \"1.00000000000000011102230246251565404236316680908203124\", 1.0); // previous double"
    },
    {
        "line": 79,
        "fullcodeline": "TEST_DOUBLE(fullPrecision, \"1.00000000000000011102230246251565404236316680908203126\", 1.00000000000000022); // next double"
    },
    {
        "line": 83,
        "fullcodeline": "TEST_DOUBLE(fullPrecision, \"72057594037927928.0\", 72057594037927928.0);"
    },
    {
        "line": 84,
        "fullcodeline": "TEST_DOUBLE(fullPrecision, \"72057594037927936.0\", 72057594037927936.0);"
    },
    {
        "line": 85,
        "fullcodeline": "TEST_DOUBLE(fullPrecision, \"72057594037927932.0\", 72057594037927936.0);"
    },
    {
        "line": 86,
        "fullcodeline": "TEST_DOUBLE(fullPrecision, \"7205759403792793199999e-5\", 72057594037927928.0);"
    },
    {
        "line": 87,
        "fullcodeline": "TEST_DOUBLE(fullPrecision, \"7205759403792793200001e-5\", 72057594037927936.0);"
    },
    {
        "line": 89,
        "fullcodeline": "TEST_DOUBLE(fullPrecision, \"9223372036854774784.0\", 9223372036854774784.0);"
    },
    {
        "line": 90,
        "fullcodeline": "TEST_DOUBLE(fullPrecision, \"9223372036854775808.0\", 9223372036854775808.0);"
    },
    {
        "line": 91,
        "fullcodeline": "TEST_DOUBLE(fullPrecision, \"9223372036854775296.0\", 9223372036854775808.0);"
    },
    {
        "line": 92,
        "fullcodeline": "TEST_DOUBLE(fullPrecision, \"922337203685477529599999e-5\", 9223372036854774784.0);"
    },
    {
        "line": 93,
        "fullcodeline": "TEST_DOUBLE(fullPrecision, \"922337203685477529600001e-5\", 9223372036854775808.0);"
    },
    {
        "line": 95,
        "fullcodeline": "TEST_DOUBLE(fullPrecision, \"10141204801825834086073718800384\", 10141204801825834086073718800384.0);"
    },
    {
        "line": 96,
        "fullcodeline": "TEST_DOUBLE(fullPrecision, \"10141204801825835211973625643008\", 10141204801825835211973625643008.0);"
    },
    {
        "line": 97,
        "fullcodeline": "TEST_DOUBLE(fullPrecision, \"10141204801825834649023672221696\", 10141204801825835211973625643008.0);"
    },
    {
        "line": 98,
        "fullcodeline": "TEST_DOUBLE(fullPrecision, \"1014120480182583464902367222169599999e-5\", 10141204801825834086073718800384.0);"
    },
    {
        "line": 99,
        "fullcodeline": "TEST_DOUBLE(fullPrecision, \"1014120480182583464902367222169600001e-5\", 10141204801825835211973625643008.0);"
    },
    {
        "line": 101,
        "fullcodeline": "TEST_DOUBLE(fullPrecision, \"5708990770823838890407843763683279797179383808\", 5708990770823838890407843763683279797179383808.0);"
    },
    {
        "line": 102,
        "fullcodeline": "TEST_DOUBLE(fullPrecision, \"5708990770823839524233143877797980545530986496\", 5708990770823839524233143877797980545530986496.0);"
    },
    {
        "line": 103,
        "fullcodeline": "TEST_DOUBLE(fullPrecision, \"5708990770823839207320493820740630171355185152\", 5708990770823839524233143877797980545530986496.0);"
    },
    {
        "line": 104,
        "fullcodeline": "TEST_DOUBLE(fullPrecision, \"5708990770823839207320493820740630171355185151999e-3\", 5708990770823838890407843763683279797179383808.0);"
    },
    {
        "line": 105,
        "fullcodeline": "TEST_DOUBLE(fullPrecision, \"5708990770823839207320493820740630171355185152001e-3\", 5708990770823839524233143877797980545530986496.0);"
    },
    {
        "line": 117,
        "fullcodeline": "TEST_DOUBLE(fullPrecision,"
    },
    {
        "line": 165,
        "fullcodeline": "TEST_DOUBLE(fullPrecision, \"7.450580596923828e-9\", 7.450580596923828e-9);"
    },
    {
        "line": 108,
        "fullcodeline": "char n1e308[310];   // '1' followed by 308 '0'"
    },
    {
        "line": 109,
        "fullcodeline": "n1e308[0] = '1';"
    },
    {
        "line": 112,
        "fullcodeline": "n1e308[309] = '\\0';"
    },
    {
        "line": 113,
        "fullcodeline": "TEST_DOUBLE(fullPrecision, n1e308, 1E308);"
    },
    {
        "line": 130,
        "fullcodeline": "static const unsigned count = 100; // Tested with 1000000 locally"
    },
    {
        "line": 167,
        "fullcodeline": "internal::Double d(1.0);"
    },
    {
        "line": 110,
        "fullcodeline": "for (int i = 1; i < 309; i++)"
    },
    {
        "line": 111,
        "fullcodeline": "n1e308[i] = '0';"
    },
    {
        "line": 135,
        "fullcodeline": "for (uint64_t exp = 0; exp < 2047; exp++) {"
    },
    {
        "line": 168,
        "fullcodeline": "for (int i = 0; i < 324; i++) {"
    },
    {
        "line": 169,
        "fullcodeline": "char buffer[32];"
    },
    {
        "line": 170,
        "fullcodeline": "*internal::dtoa(d.Value(), buffer) = '\\0';"
    },
    {
        "line": 172,
        "fullcodeline": "StringStream s(buffer);"
    },
    {
        "line": 175,
        "fullcodeline": "ASSERT_EQ(kParseErrorNone, reader.Parse<fullPrecision ? kParseFullPrecisionFlag : 0>(s, h).Code());"
    },
    {
        "line": 176,
        "fullcodeline": "EXPECT_EQ(1u, h.step_);"
    },
    {
        "line": 177,
        "fullcodeline": "internal::Double a(h.actual_);"
    },
    {
        "line": 189,
        "fullcodeline": "d = d.Value() * 0.5;"
    },
    {
        "line": 137,
        "fullcodeline": "for (unsigned i = 0; i < count; i++) {"
    },
    {
        "line": 139,
        "fullcodeline": "uint64_t u = (exp << 52) | uint64_t(r() & 0x000FFFFF) << 32;"
    },
    {
        "line": 140,
        "fullcodeline": "u |= uint64_t(r());"
    },
    {
        "line": 141,
        "fullcodeline": "internal::Double d = internal::Double(u);"
    },
    {
        "line": 143,
        "fullcodeline": "char buffer[32];"
    },
    {
        "line": 144,
        "fullcodeline": "*internal::dtoa(d.Value(), buffer) = '\\0';"
    },
    {
        "line": 146,
        "fullcodeline": "StringStream s(buffer);"
    },
    {
        "line": 148,
        "fullcodeline": "ASSERT_EQ(kParseErrorNone, reader.Parse<fullPrecision ? kParseFullPrecisionFlag : 0>(s, h).Code());"
    },
    {
        "line": 149,
        "fullcodeline": "EXPECT_EQ(1u, h.step_);"
    },
    {
        "line": 150,
        "fullcodeline": "internal::Double a(h.actual_);"
    },
    {
        "line": 179,
        "fullcodeline": "EXPECT_EQ(d.Uint64Value(), a.Uint64Value());"
    },
    {
        "line": 180,
        "fullcodeline": "if (d.Uint64Value() != a.Uint64Value())"
    },
    {
        "line": 184,
        "fullcodeline": "EXPECT_EQ(d.Sign(), a.Sign()); // for 0.0 != -0.0"
    },
    {
        "line": 185,
        "fullcodeline": "EXPECT_DOUBLE_EQ(d.Value(), h.actual_);"
    },
    {
        "line": 152,
        "fullcodeline": "EXPECT_EQ(d.Uint64Value(), a.Uint64Value());"
    },
    {
        "line": 181,
        "fullcodeline": "printf(\"  String: %s\\n  Actual: %.17g\\nExpected: %.17g\\n\", buffer, h.actual_, d.Value());"
    },
    {
        "line": 153,
        "fullcodeline": "if (d.Uint64Value() != a.Uint64Value())"
    },
    {
        "line": 157,
        "fullcodeline": "EXPECT_EQ(d.Sign(), a.Sign()); // for 0.0 != -0.0"
    },
    {
        "line": 158,
        "fullcodeline": "EXPECT_DOUBLE_EQ(d.Value(), h.actual_);"
    },
    {
        "line": 154,
        "fullcodeline": "printf(\"  String: %s\\n  Actual: %.17g\\nExpected: %.17g\\n\", buffer, h.actual_, d.Value());"
    }
]