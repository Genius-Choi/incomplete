[
    {
        "line": 23,
        "fullcodeline": "uint256 hash = tx.GetHash();"
    },
    {
        "line": 34,
        "fullcodeline": "CTransaction* ptxOld = NULL;"
    },
    {
        "line": 7,
        "fullcodeline": "if (!tx.CheckTransaction())"
    },
    {
        "line": 11,
        "fullcodeline": "if (tx.IsCoinBase())"
    },
    {
        "line": 19,
        "fullcodeline": "if (!fTestNet && !tx.IsStandard())"
    },
    {
        "line": 35,
        "fullcodeline": "for (unsigned int i = 0; i < tx.vin.size(); i++)"
    },
    {
        "line": 131,
        "fullcodeline": "addUnchecked(hash, tx);"
    },
    {
        "line": 140,
        "fullcodeline": "hash.ToString().substr(0,10).c_str(),"
    },
    {
        "line": 141,
        "fullcodeline": "mapTx.size());"
    },
    {
        "line": 5,
        "fullcodeline": "*pfMissingInputs = false;"
    },
    {
        "line": 26,
        "fullcodeline": "if (mapTx.count(hash))"
    },
    {
        "line": 37,
        "fullcodeline": "COutPoint outpoint = tx.vin[i].prevout;"
    },
    {
        "line": 65,
        "fullcodeline": "bool fInvalid = false;"
    },
    {
        "line": 83,
        "fullcodeline": "int64 nFees = tx.GetValueIn(mapInputs)-tx.GetValueOut();"
    },
    {
        "line": 84,
        "fullcodeline": "unsigned int nTxSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);"
    },
    {
        "line": 8,
        "fullcodeline": "return error(\"CTxMemPool::accept() : CheckTransaction failed\");"
    },
    {
        "line": 12,
        "fullcodeline": "return tx.DoS(100, error(\"CTxMemPool::accept() : coinbase as individual tx\"));"
    },
    {
        "line": 16,
        "fullcodeline": "return error(\"CTxMemPool::accept() : not accepting nLockTime beyond 2038 yet\");"
    },
    {
        "line": 20,
        "fullcodeline": "return error(\"CTxMemPool::accept() : nonstandard transaction type\");"
    },
    {
        "line": 30,
        "fullcodeline": "if (txdb.ContainsTx(hash))"
    },
    {
        "line": 64,
        "fullcodeline": "map<uint256, CTxIndex> mapUnused;"
    },
    {
        "line": 87,
        "fullcodeline": "if(nFees < tx.GetMinFee(nTxSize, true, GMF_RELAY))"
    },
    {
        "line": 93,
        "fullcodeline": "if (nFees < MIN_RELAY_TX_FEE)"
    },
    {
        "line": 129,
        "fullcodeline": "remove(*ptxOld);"
    },
    {
        "line": 137,
        "fullcodeline": "EraseFromWallets(ptxOld->GetHash());"
    },
    {
        "line": 66,
        "fullcodeline": "if (!tx.FetchInputs(txdb, mapUnused, false, false, mapInputs, fInvalid))"
    },
    {
        "line": 76,
        "fullcodeline": "if (!tx.AreInputsStandard(mapInputs) && !fTestNet)"
    },
    {
        "line": 98,
        "fullcodeline": "int64 nNow = GetTime();"
    },
    {
        "line": 117,
        "fullcodeline": "if (!tx.ConnectInputs(mapInputs, mapUnused, CDiskTxPos(1,1,1), pindexBest, false, false))"
    },
    {
        "line": 128,
        "fullcodeline": "printf(\"CTxMemPool::accept() : replacing tx %s with new version\\n\", ptxOld->GetHash().ToString().c_str());"
    },
    {
        "line": 77,
        "fullcodeline": "return error(\"CTxMemPool::accept() : nonstandard transaction input\");"
    },
    {
        "line": 88,
        "fullcodeline": "return error(\"CTxMemPool::accept() : not enough fees\");"
    },
    {
        "line": 103,
        "fullcodeline": "dFreeCount *= pow(1.0 - 1.0/600.0, (double)(nNow - nLastTime));"
    },
    {
        "line": 119,
        "fullcodeline": "return error(\"CTxMemPool::accept() : ConnectInputs failed %s\", hash.ToString().substr(0,10).c_str());"
    },
    {
        "line": 69,
        "fullcodeline": "return error(\"CTxMemPool::accept() : FetchInputs found invalid tx %s\", hash.ToString().substr(0,10).c_str());"
    },
    {
        "line": 107,
        "fullcodeline": "if (dFreeCount > GetArg(\"-limitfreerelay\", 15)*10*1000 && !IsFromMe(tx))"
    },
    {
        "line": 110,
        "fullcodeline": "printf(\"Rate limit dFreeCount: %g => %g\\n\", dFreeCount, dFreeCount+nTxSize);"
    },
    {
        "line": 108,
        "fullcodeline": "return error(\"CTxMemPool::accept() : free transaction rejected by rate limiter\");"
    }
]