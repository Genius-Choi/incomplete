[
    {
        "line": 4,
        "fullcodeline": "EVP_CHACHA_AEAD_CTX *actx = aead_data(ctx);"
    },
    {
        "line": 21,
        "fullcodeline": "actx->tls_payload_length = NO_TLS_PAYLOAD_LENGTH;"
    },
    {
        "line": 8,
        "fullcodeline": "if (actx == NULL)"
    },
    {
        "line": 11,
        "fullcodeline": "if (actx == NULL) {"
    },
    {
        "line": 46,
        "fullcodeline": "actx->nonce[0] = actx->key.counter[1]"
    },
    {
        "line": 48,
        "fullcodeline": "actx->nonce[1] = actx->key.counter[2]"
    },
    {
        "line": 50,
        "fullcodeline": "actx->nonce[2] = actx->key.counter[3]"
    },
    {
        "line": 57,
        "fullcodeline": "if (ptr != NULL) {"
    },
    {
        "line": 70,
        "fullcodeline": "if (arg != EVP_AEAD_TLS1_AAD_LEN)"
    },
    {
        "line": 74,
        "fullcodeline": "unsigned char *aad = ptr, temp[POLY1305_BLOCK_SIZE];"
    },
    {
        "line": 76,
        "fullcodeline": "len = aad[EVP_AEAD_TLS1_AAD_LEN - 2] << 8 |"
    },
    {
        "line": 105,
        "fullcodeline": "return -1;"
    },
    {
        "line": 9,
        "fullcodeline": "actx = ctx->cipher_data"
    },
    {
        "line": 12,
        "fullcodeline": "EVPerr(EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_INITIALIZATION_ERROR);"
    },
    {
        "line": 26,
        "fullcodeline": "EVP_CIPHER_CTX *dst = (EVP_CIPHER_CTX *)ptr;"
    },
    {
        "line": 28,
        "fullcodeline": "dst->cipher_data ="
    },
    {
        "line": 38,
        "fullcodeline": "if (arg <= 0 || arg > CHACHA_CTR_SIZE)"
    },
    {
        "line": 47,
        "fullcodeline": "= CHACHA_U8TOU32((unsigned char *)ptr);"
    },
    {
        "line": 49,
        "fullcodeline": "= CHACHA_U8TOU32((unsigned char *)ptr+4);"
    },
    {
        "line": 51,
        "fullcodeline": "= CHACHA_U8TOU32((unsigned char *)ptr+8);"
    },
    {
        "line": 55,
        "fullcodeline": "if (arg <= 0 || arg > POLY1305_BLOCK_SIZE)"
    },
    {
        "line": 58,
        "fullcodeline": "memcpy(actx->tag, ptr, arg);"
    },
    {
        "line": 64,
        "fullcodeline": "if (arg <= 0 || arg > POLY1305_BLOCK_SIZE || !ctx->encrypt)"
    },
    {
        "line": 78,
        "fullcodeline": "if (!ctx->encrypt) {"
    },
    {
        "line": 93,
        "fullcodeline": "actx->key.counter[2] = actx->nonce[1] ^ CHACHA_U8TOU32(aad);"
    },
    {
        "line": 94,
        "fullcodeline": "actx->key.counter[3] = actx->nonce[2] ^ CHACHA_U8TOU32(aad+4);"
    },
    {
        "line": 29,
        "fullcodeline": "OPENSSL_memdup(actx, sizeof(*actx) + Poly1305_ctx_size());"
    },
    {
        "line": 81,
        "fullcodeline": "len -= POLY1305_BLOCK_SIZE;     /* discount attached tag */"
    },
    {
        "line": 82,
        "fullcodeline": "memcpy(temp, aad, EVP_AEAD_TLS1_AAD_LEN - 2);"
    },
    {
        "line": 83,
        "fullcodeline": "aad = temp;"
    },
    {
        "line": 10,
        "fullcodeline": "= OPENSSL_zalloc(sizeof(*actx) + Poly1305_ctx_size());"
    },
    {
        "line": 31,
        "fullcodeline": "EVPerr(EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_COPY_ERROR);"
    },
    {
        "line": 77,
        "fullcodeline": "aad[EVP_AEAD_TLS1_AAD_LEN - 1];"
    },
    {
        "line": 79,
        "fullcodeline": "if (len < POLY1305_BLOCK_SIZE)"
    },
    {
        "line": 84,
        "fullcodeline": "temp[EVP_AEAD_TLS1_AAD_LEN - 2] = (unsigned char)(len >> 8);"
    },
    {
        "line": 85,
        "fullcodeline": "temp[EVP_AEAD_TLS1_AAD_LEN - 1] = (unsigned char)len;"
    }
]