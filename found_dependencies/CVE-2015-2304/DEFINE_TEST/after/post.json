[
    {
        "line": 11,
        "fullcodeline": "assertUmask(UMASK);"
    },
    {
        "line": 14,
        "fullcodeline": "assert((a = archive_write_disk_new()) != NULL);"
    },
    {
        "line": 17,
        "fullcodeline": "assert((ae = archive_entry_new()) != NULL);"
    },
    {
        "line": 18,
        "fullcodeline": "archive_entry_copy_pathname(ae, \"dir\");"
    },
    {
        "line": 19,
        "fullcodeline": "archive_entry_set_mode(ae, S_IFDIR | 0777);"
    },
    {
        "line": 20,
        "fullcodeline": "assert(0 == archive_write_header(a, ae));"
    },
    {
        "line": 21,
        "fullcodeline": "archive_entry_free(ae);"
    },
    {
        "line": 22,
        "fullcodeline": "assert(0 == archive_write_finish_entry(a));"
    },
    {
        "line": 25,
        "fullcodeline": "assert((ae = archive_entry_new()) != NULL);"
    },
    {
        "line": 26,
        "fullcodeline": "archive_entry_copy_pathname(ae, \"link_to_dir\");"
    },
    {
        "line": 27,
        "fullcodeline": "archive_entry_set_mode(ae, S_IFLNK | 0777);"
    },
    {
        "line": 28,
        "fullcodeline": "archive_entry_set_symlink(ae, \"dir\");"
    },
    {
        "line": 29,
        "fullcodeline": "archive_write_disk_set_options(a, 0);"
    },
    {
        "line": 30,
        "fullcodeline": "assert(0 == archive_write_header(a, ae));"
    },
    {
        "line": 31,
        "fullcodeline": "assert(0 == archive_write_finish_entry(a));"
    },
    {
        "line": 37,
        "fullcodeline": "assert(archive_entry_clear(ae) != NULL);"
    },
    {
        "line": 38,
        "fullcodeline": "archive_entry_copy_pathname(ae, \"link_to_dir/filea\");"
    },
    {
        "line": 39,
        "fullcodeline": "archive_entry_set_mode(ae, S_IFREG | 0777);"
    },
    {
        "line": 40,
        "fullcodeline": "assert(0 == archive_write_header(a, ae));"
    },
    {
        "line": 41,
        "fullcodeline": "assert(0 == archive_write_finish_entry(a));"
    },
    {
        "line": 44,
        "fullcodeline": "assert(archive_entry_clear(ae) != NULL);"
    },
    {
        "line": 45,
        "fullcodeline": "archive_entry_copy_pathname(ae, \"link_to_dir/fileb\");"
    },
    {
        "line": 46,
        "fullcodeline": "archive_entry_set_mode(ae, S_IFREG | 0777);"
    },
    {
        "line": 47,
        "fullcodeline": "archive_write_disk_set_options(a, ARCHIVE_EXTRACT_SECURE_SYMLINKS);"
    },
    {
        "line": 48,
        "fullcodeline": "failure(\"Extracting a file through a symlink should fail here.\");"
    },
    {
        "line": 49,
        "fullcodeline": "assertEqualInt(ARCHIVE_FAILED, archive_write_header(a, ae));"
    },
    {
        "line": 50,
        "fullcodeline": "archive_entry_free(ae);"
    },
    {
        "line": 51,
        "fullcodeline": "assert(0 == archive_write_finish_entry(a));"
    },
    {
        "line": 54,
        "fullcodeline": "assert((ae = archive_entry_new()) != NULL);"
    },
    {
        "line": 55,
        "fullcodeline": "archive_entry_copy_pathname(ae, \"link_to_dir2\");"
    },
    {
        "line": 56,
        "fullcodeline": "archive_entry_set_mode(ae, S_IFLNK | 0777);"
    },
    {
        "line": 57,
        "fullcodeline": "archive_entry_set_symlink(ae, \"dir\");"
    },
    {
        "line": 58,
        "fullcodeline": "archive_write_disk_set_options(a, 0);"
    },
    {
        "line": 59,
        "fullcodeline": "assert(0 == archive_write_header(a, ae));"
    },
    {
        "line": 60,
        "fullcodeline": "assert(0 == archive_write_finish_entry(a));"
    },
    {
        "line": 66,
        "fullcodeline": "assert(archive_entry_clear(ae) != NULL);"
    },
    {
        "line": 67,
        "fullcodeline": "archive_entry_copy_pathname(ae, \"link_to_dir2/filec\");"
    },
    {
        "line": 68,
        "fullcodeline": "archive_entry_set_mode(ae, S_IFREG | 0777);"
    },
    {
        "line": 69,
        "fullcodeline": "archive_write_disk_set_options(a, ARCHIVE_EXTRACT_SECURE_SYMLINKS | ARCHIVE_EXTRACT_UNLINK);"
    },
    {
        "line": 70,
        "fullcodeline": "assertEqualIntA(a, ARCHIVE_OK, archive_write_header(a, ae));"
    },
    {
        "line": 71,
        "fullcodeline": "archive_entry_free(ae);"
    },
    {
        "line": 72,
        "fullcodeline": "assert(0 == archive_write_finish_entry(a));"
    },
    {
        "line": 79,
        "fullcodeline": "assert((ae = archive_entry_new()) != NULL);"
    },
    {
        "line": 80,
        "fullcodeline": "archive_entry_copy_pathname(ae, \"link_to_dir3\");"
    },
    {
        "line": 81,
        "fullcodeline": "archive_entry_set_mode(ae, S_IFLNK | 0777);"
    },
    {
        "line": 82,
        "fullcodeline": "archive_entry_set_symlink(ae, \"dir\");"
    },
    {
        "line": 83,
        "fullcodeline": "archive_write_disk_set_options(a, 0);"
    },
    {
        "line": 84,
        "fullcodeline": "assert(0 == archive_write_header(a, ae));"
    },
    {
        "line": 85,
        "fullcodeline": "assert(0 == archive_write_finish_entry(a));"
    },
    {
        "line": 87,
        "fullcodeline": "assert(archive_entry_clear(ae) != NULL);"
    },
    {
        "line": 88,
        "fullcodeline": "archive_entry_copy_pathname(ae, \"link_to_dir3\");"
    },
    {
        "line": 89,
        "fullcodeline": "archive_entry_set_mode(ae, S_IFDIR | 0777);"
    },
    {
        "line": 90,
        "fullcodeline": "assert(0 == archive_write_header(a, ae));"
    },
    {
        "line": 91,
        "fullcodeline": "assert(0 == archive_write_finish_entry(a));"
    },
    {
        "line": 93,
        "fullcodeline": "assertEqualInt(0, lstat(\"link_to_dir3\", &st));"
    },
    {
        "line": 94,
        "fullcodeline": "assert(S_ISLNK(st.st_mode));"
    },
    {
        "line": 95,
        "fullcodeline": "archive_entry_free(ae);"
    },
    {
        "line": 101,
        "fullcodeline": "assert((ae = archive_entry_new()) != NULL);"
    },
    {
        "line": 102,
        "fullcodeline": "archive_entry_copy_pathname(ae, \"link_to_dir4\");"
    },
    {
        "line": 103,
        "fullcodeline": "archive_entry_set_mode(ae, S_IFLNK | 0777);"
    },
    {
        "line": 104,
        "fullcodeline": "archive_entry_set_symlink(ae, \"nonexistent_dir\");"
    },
    {
        "line": 105,
        "fullcodeline": "archive_write_disk_set_options(a, 0);"
    },
    {
        "line": 106,
        "fullcodeline": "assert(0 == archive_write_header(a, ae));"
    },
    {
        "line": 107,
        "fullcodeline": "assert(0 == archive_write_finish_entry(a));"
    },
    {
        "line": 109,
        "fullcodeline": "assert(archive_entry_clear(ae) != NULL);"
    },
    {
        "line": 110,
        "fullcodeline": "archive_entry_copy_pathname(ae, \"link_to_dir4\");"
    },
    {
        "line": 111,
        "fullcodeline": "archive_entry_set_mode(ae, S_IFDIR | 0777);"
    },
    {
        "line": 112,
        "fullcodeline": "assert(0 == archive_write_header(a, ae));"
    },
    {
        "line": 113,
        "fullcodeline": "assert(0 == archive_write_finish_entry(a));"
    },
    {
        "line": 115,
        "fullcodeline": "assertEqualInt(0, lstat(\"link_to_dir4\", &st));"
    },
    {
        "line": 116,
        "fullcodeline": "assert(S_ISDIR(st.st_mode));"
    },
    {
        "line": 117,
        "fullcodeline": "archive_entry_free(ae);"
    },
    {
        "line": 123,
        "fullcodeline": "assert((ae = archive_entry_new()) != NULL);"
    },
    {
        "line": 124,
        "fullcodeline": "archive_entry_copy_pathname(ae, \"non_dir\");"
    },
    {
        "line": 125,
        "fullcodeline": "archive_entry_set_mode(ae, S_IFREG | 0777);"
    },
    {
        "line": 126,
        "fullcodeline": "archive_write_disk_set_options(a, 0);"
    },
    {
        "line": 127,
        "fullcodeline": "assert(0 == archive_write_header(a, ae));"
    },
    {
        "line": 128,
        "fullcodeline": "assert(0 == archive_write_finish_entry(a));"
    },
    {
        "line": 130,
        "fullcodeline": "archive_entry_copy_pathname(ae, \"link_to_dir5\");"
    },
    {
        "line": 131,
        "fullcodeline": "archive_entry_set_mode(ae, S_IFLNK | 0777);"
    },
    {
        "line": 132,
        "fullcodeline": "archive_entry_set_symlink(ae, \"non_dir\");"
    },
    {
        "line": 133,
        "fullcodeline": "archive_write_disk_set_options(a, 0);"
    },
    {
        "line": 134,
        "fullcodeline": "assert(0 == archive_write_header(a, ae));"
    },
    {
        "line": 135,
        "fullcodeline": "assert(0 == archive_write_finish_entry(a));"
    },
    {
        "line": 137,
        "fullcodeline": "assert(archive_entry_clear(ae) != NULL);"
    },
    {
        "line": 138,
        "fullcodeline": "archive_entry_copy_pathname(ae, \"link_to_dir5\");"
    },
    {
        "line": 139,
        "fullcodeline": "archive_entry_set_mode(ae, S_IFDIR | 0777);"
    },
    {
        "line": 140,
        "fullcodeline": "assert(0 == archive_write_header(a, ae));"
    },
    {
        "line": 141,
        "fullcodeline": "assert(0 == archive_write_finish_entry(a));"
    },
    {
        "line": 143,
        "fullcodeline": "assertEqualInt(0, lstat(\"link_to_dir5\", &st));"
    },
    {
        "line": 144,
        "fullcodeline": "assert(S_ISDIR(st.st_mode));"
    },
    {
        "line": 145,
        "fullcodeline": "archive_entry_free(ae);"
    },
    {
        "line": 151,
        "fullcodeline": "assert((ae = archive_entry_new()) != NULL);"
    },
    {
        "line": 152,
        "fullcodeline": "archive_entry_copy_pathname(ae, \"/tmp/libarchive_test-test_write_disk_secure-absolute_path.tmp\");"
    },
    {
        "line": 153,
        "fullcodeline": "archive_entry_set_mode(ae, S_IFREG | 0777);"
    },
    {
        "line": 154,
        "fullcodeline": "assert(0 == archive_write_header(a, ae));"
    },
    {
        "line": 155,
        "fullcodeline": "assert(0 == archive_write_finish_entry(a));"
    },
    {
        "line": 156,
        "fullcodeline": "assertFileExists(\"/tmp/libarchive_test-test_write_disk_secure-absolute_path.tmp\");"
    },
    {
        "line": 157,
        "fullcodeline": "assert(0 == unlink(\"/tmp/libarchive_test-test_write_disk_secure-absolute_path.tmp\"));"
    },
    {
        "line": 160,
        "fullcodeline": "assert(archive_entry_clear(ae) != NULL);"
    },
    {
        "line": 161,
        "fullcodeline": "archive_entry_copy_pathname(ae, \"/tmp/libarchive_test-test_write_disk_secure-absolute_path.tmp\");"
    },
    {
        "line": 162,
        "fullcodeline": "archive_entry_set_mode(ae, S_IFREG | 0777);"
    },
    {
        "line": 163,
        "fullcodeline": "archive_write_disk_set_options(a, ARCHIVE_EXTRACT_SECURE_NOABSOLUTEPATHS);"
    },
    {
        "line": 164,
        "fullcodeline": "failure(\"Extracting an absolute path should fail here.\");"
    },
    {
        "line": 165,
        "fullcodeline": "assertEqualInt(ARCHIVE_FAILED, archive_write_header(a, ae));"
    },
    {
        "line": 166,
        "fullcodeline": "archive_entry_free(ae);"
    },
    {
        "line": 167,
        "fullcodeline": "assert(0 == archive_write_finish_entry(a));"
    },
    {
        "line": 168,
        "fullcodeline": "assertFileNotExists(\"/tmp/libarchive_test-test_write_disk_secure-absolute_path.tmp\");"
    },
    {
        "line": 170,
        "fullcodeline": "assertEqualInt(ARCHIVE_OK, archive_write_free(a));"
    },
    {
        "line": 173,
        "fullcodeline": "assert(0 == lstat(\"dir\", &st));"
    },
    {
        "line": 174,
        "fullcodeline": "failure(\"dir: st.st_mode=%o\", st.st_mode);"
    },
    {
        "line": 175,
        "fullcodeline": "assert((st.st_mode & 0777) == 0755);"
    },
    {
        "line": 177,
        "fullcodeline": "assert(0 == lstat(\"link_to_dir\", &st));"
    },
    {
        "line": 178,
        "fullcodeline": "failure(\"link_to_dir: st.st_mode=%o\", st.st_mode);"
    },
    {
        "line": 179,
        "fullcodeline": "assert(S_ISLNK(st.st_mode));"
    },
    {
        "line": 186,
        "fullcodeline": "assert(0 == lstat(\"dir/filea\", &st));"
    },
    {
        "line": 187,
        "fullcodeline": "failure(\"dir/filea: st.st_mode=%o\", st.st_mode);"
    },
    {
        "line": 188,
        "fullcodeline": "assert((st.st_mode & 07777) == 0755);"
    },
    {
        "line": 190,
        "fullcodeline": "failure(\"dir/fileb: This file should not have been created\");"
    },
    {
        "line": 191,
        "fullcodeline": "assert(0 != lstat(\"dir/fileb\", &st));"
    },
    {
        "line": 193,
        "fullcodeline": "assert(0 == lstat(\"link_to_dir2\", &st));"
    },
    {
        "line": 194,
        "fullcodeline": "failure(\"link_to_dir2 should have been re-created as a true dir\");"
    },
    {
        "line": 195,
        "fullcodeline": "assert(S_ISDIR(st.st_mode));"
    },
    {
        "line": 196,
        "fullcodeline": "failure(\"link_to_dir2: Implicit dir creation should obey umask, but st.st_mode=%o\", st.st_mode);"
    },
    {
        "line": 197,
        "fullcodeline": "assert((st.st_mode & 0777) == 0755);"
    },
    {
        "line": 199,
        "fullcodeline": "assert(0 == lstat(\"link_to_dir2/filec\", &st));"
    },
    {
        "line": 200,
        "fullcodeline": "assert(S_ISREG(st.st_mode));"
    },
    {
        "line": 201,
        "fullcodeline": "failure(\"link_to_dir2/filec: st.st_mode=%o\", st.st_mode);"
    },
    {
        "line": 202,
        "fullcodeline": "assert((st.st_mode & 07777) == 0755);"
    }
]