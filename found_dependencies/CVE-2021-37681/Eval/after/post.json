[
    {
        "line": 2,
        "fullcodeline": "auto* params = reinterpret_cast<TfLiteSVDFParams*>(node->builtin_data);"
    },
    {
        "line": 3,
        "fullcodeline": "OpData* op_data = reinterpret_cast<OpData*>(node->user_data);"
    },
    {
        "line": 6,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));"
    },
    {
        "line": 8,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kWeightsFeatureTensor,"
    },
    {
        "line": 11,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 13,
        "fullcodeline": "const TfLiteTensor* bias = GetOptionalInputTensor(context, node, kBiasTensor);"
    },
    {
        "line": 16,
        "fullcodeline": "TF_LITE_ENSURE_OK(context,"
    },
    {
        "line": 19,
        "fullcodeline": "TfLiteTensor* state = GetVariableInput(context, node, kStateTensor);"
    },
    {
        "line": 20,
        "fullcodeline": "TF_LITE_ENSURE(context, state != nullptr);"
    },
    {
        "line": 22,
        "fullcodeline": "TF_LITE_ENSURE_OK(context,"
    },
    {
        "line": 12,
        "fullcodeline": "context, GetInputSafe(context, node, kWeightsTimeTensor, &weights_time));"
    },
    {
        "line": 17,
        "fullcodeline": "GetTemporarySafe(context, node, /*index=*/0, &scratch));"
    },
    {
        "line": 23,
        "fullcodeline": "GetOutputSafe(context, node, kOutputTensor, &output));"
    },
    {
        "line": 120,
        "fullcodeline": "context->ReportError(context, \"Type %s not currently supported.\","
    },
    {
        "line": 27,
        "fullcodeline": "reference_ops::EvalFloatSVDF("
    },
    {
        "line": 98,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 103,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, params->activation, kTfLiteActRelu);"
    },
    {
        "line": 105,
        "fullcodeline": "reference_ops::EvalIntegerSVDF("
    },
    {
        "line": 121,
        "fullcodeline": "TfLiteTypeGetName(weights_feature->type));"
    },
    {
        "line": 28,
        "fullcodeline": "params, GetTensorShape(input), GetTensorData<float>(input),"
    },
    {
        "line": 29,
        "fullcodeline": "GetTensorShape(weights_feature),"
    },
    {
        "line": 30,
        "fullcodeline": "GetTensorData<float>(weights_feature), GetTensorShape(weights_time),"
    },
    {
        "line": 31,
        "fullcodeline": "GetTensorData<float>(weights_time), GetTensorShape(bias),"
    },
    {
        "line": 32,
        "fullcodeline": "GetTensorData<float>(bias), GetTensorData<float>(scratch),"
    },
    {
        "line": 33,
        "fullcodeline": "GetTensorData<float>(state), GetTensorShape(output),"
    },
    {
        "line": 34,
        "fullcodeline": "GetTensorData<float>(output));"
    },
    {
        "line": 39,
        "fullcodeline": "if (input->type == kTfLiteFloat32) {"
    },
    {
        "line": 99,
        "fullcodeline": "context, GetTemporarySafe(context, node, /*index=*/1, &output_temp));"
    },
    {
        "line": 106,
        "fullcodeline": "params, GetTensorShape(input), GetTensorData<int8_t>(input),"
    },
    {
        "line": 107,
        "fullcodeline": "GetTensorShape(weights_feature),"
    },
    {
        "line": 108,
        "fullcodeline": "GetTensorData<int8_t>(weights_feature), GetTensorShape(weights_time),"
    },
    {
        "line": 109,
        "fullcodeline": "GetTensorData<int16_t>(weights_time), GetTensorShape(bias),"
    },
    {
        "line": 110,
        "fullcodeline": "GetTensorData<int32_t>(bias), GetTensorData<int16_t>(state),"
    },
    {
        "line": 111,
        "fullcodeline": "GetTensorShape(output), GetTensorData<int8_t>(output),"
    },
    {
        "line": 112,
        "fullcodeline": "GetTensorData<int32_t>(scratch), GetTensorData<int32_t>(output_temp),"
    },
    {
        "line": 41,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, GetTemporarySafe(context, node, /*index=*/1,"
    },
    {
        "line": 44,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, GetTemporarySafe(context, node, /*index=*/2,"
    },
    {
        "line": 47,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, GetTemporarySafe(context, node, /*index=*/3,"
    },
    {
        "line": 50,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, GetTemporarySafe(context, node, /*index=*/4,"
    },
    {
        "line": 53,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 73,
        "fullcodeline": "int32_t* zero_points_ptr = nullptr;"
    },
    {
        "line": 74,
        "fullcodeline": "int32_t* row_sums_ptr = nullptr;"
    },
    {
        "line": 80,
        "fullcodeline": "reference_ops::EvalHybridSVDF("
    },
    {
        "line": 54,
        "fullcodeline": "context, GetTemporarySafe(context, node, /*index=*/5, &row_sums));"
    },
    {
        "line": 61,
        "fullcodeline": "if (!op_data->float_weights_time_initialized) {"
    },
    {
        "line": 75,
        "fullcodeline": "if (params->asymmetric_quantize_inputs && row_sums != nullptr) {"
    },
    {
        "line": 81,
        "fullcodeline": "params, GetTensorShape(input), GetTensorData<float>(input),"
    },
    {
        "line": 82,
        "fullcodeline": "GetTensorShape(weights_feature),"
    },
    {
        "line": 83,
        "fullcodeline": "GetTensorData<int8_t>(weights_feature),"
    },
    {
        "line": 84,
        "fullcodeline": "weights_feature->params.scale, GetTensorShape(float_weights_time),"
    },
    {
        "line": 85,
        "fullcodeline": "GetTensorData<float>(float_weights_time), GetTensorShape(bias),"
    },
    {
        "line": 86,
        "fullcodeline": "GetTensorData<float>(bias), GetTensorData<float>(scratch),"
    },
    {
        "line": 87,
        "fullcodeline": "GetTensorData<float>(scaling_factors),"
    },
    {
        "line": 88,
        "fullcodeline": "GetTensorData<int8_t>(input_quantized), GetTensorData<float>(state),"
    },
    {
        "line": 89,
        "fullcodeline": "GetTensorShape(output), GetTensorData<float>(output),"
    },
    {
        "line": 63,
        "fullcodeline": "const int8_t* weights_time_ptr = GetTensorData<int8_t>(weights_time);"
    },
    {
        "line": 64,
        "fullcodeline": "float* float_weights_time_ptr ="
    },
    {
        "line": 70,
        "fullcodeline": "op_data->float_weights_time_initialized = true;"
    },
    {
        "line": 76,
        "fullcodeline": "zero_points_ptr = GetTensorData<int32_t>(zero_points);"
    },
    {
        "line": 77,
        "fullcodeline": "row_sums_ptr = GetTensorData<int32_t>(row_sums);"
    },
    {
        "line": 65,
        "fullcodeline": "GetTensorData<float>(float_weights_time);"
    },
    {
        "line": 66,
        "fullcodeline": "for (int i = 0; i < NumElements(float_weights_time); ++i) {"
    },
    {
        "line": 67,
        "fullcodeline": "float_weights_time_ptr[i] ="
    },
    {
        "line": 68,
        "fullcodeline": "weights_time_ptr[i] * dequantization_scale;"
    }
]