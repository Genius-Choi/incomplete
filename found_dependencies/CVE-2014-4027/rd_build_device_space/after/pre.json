[
    {
        "line": 5,
        "fullcodeline": "u32 max_sg_per_table = (RD_MAX_ALLOCATION_SIZE /"
    },
    {
        "line": 19,
        "fullcodeline": "total_sg_needed = rd_dev->rd_page_count;"
    },
    {
        "line": 21,
        "fullcodeline": "sg_tables = (total_sg_needed / max_sg_per_table) + 1;"
    },
    {
        "line": 23,
        "fullcodeline": "sg_table = kzalloc(sg_tables * sizeof(struct rd_dev_sg_table), GFP_KERNEL);"
    },
    {
        "line": 30,
        "fullcodeline": "rd_dev->sg_table_array = sg_table;"
    },
    {
        "line": 31,
        "fullcodeline": "rd_dev->sg_table_count = sg_tables;"
    },
    {
        "line": 33,
        "fullcodeline": "rc = rd_allocate_sgl_table(rd_dev, sg_table, total_sg_needed, 0x00);"
    },
    {
        "line": 9,
        "fullcodeline": "if (rd_dev->rd_page_count <= 0) {"
    },
    {
        "line": 16,
        "fullcodeline": "if (rd_dev->rd_flags & RDF_NULLIO)"
    },
    {
        "line": 24,
        "fullcodeline": "if (!sg_table) {"
    },
    {
        "line": 6,
        "fullcodeline": "sizeof(struct scatterlist));"
    },
    {
        "line": 10,
        "fullcodeline": "pr_err(\"Illegal page count: %u for Ramdisk device\\n\","
    },
    {
        "line": 12,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 27,
        "fullcodeline": "return -ENOMEM;"
    }
]