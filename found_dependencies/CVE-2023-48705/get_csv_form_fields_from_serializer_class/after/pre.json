[
    {
        "line": 3,
        "fullcodeline": "serializer = serializer_class(context={\"request\": None, \"depth\": 0})"
    },
    {
        "line": 4,
        "fullcodeline": "fields = []"
    },
    {
        "line": 71,
        "fullcodeline": "fields = sorted(fields, key=lambda info: 1 if info[\"required\"] else 2)"
    },
    {
        "line": 5,
        "fullcodeline": "for field_name, field in serializer.fields.items():"
    },
    {
        "line": 33,
        "fullcodeline": "field_info = {"
    },
    {
        "line": 67,
        "fullcodeline": "fields.append(field_info)"
    },
    {
        "line": 8,
        "fullcodeline": "if field_name == \"custom_fields\":"
    },
    {
        "line": 39,
        "fullcodeline": "if isinstance(field, serializers.BooleanField):"
    },
    {
        "line": 64,
        "fullcodeline": "if isinstance(field, ChoiceField):"
    },
    {
        "line": 9,
        "fullcodeline": "from nautobot.extras.choices import CustomFieldTypeChoices"
    },
    {
        "line": 10,
        "fullcodeline": "from nautobot.extras.models import CustomField"
    },
    {
        "line": 12,
        "fullcodeline": "cfs = CustomField.objects.get_for_model(serializer_class.Meta.model)"
    },
    {
        "line": 40,
        "fullcodeline": "field_info[\"format\"] = mark_safe(\"<code>true</code> or <code>false</code>\")  # noqa: S308"
    },
    {
        "line": 65,
        "fullcodeline": "field_info[\"choices\"] = field.choices"
    },
    {
        "line": 13,
        "fullcodeline": "for cf in cfs:"
    },
    {
        "line": 41,
        "fullcodeline": "elif isinstance(field, serializers.DateField):"
    },
    {
        "line": 42,
        "fullcodeline": "field_info[\"format\"] = mark_safe(\"<code>YYYY-MM-DD</code>\")  # noqa: S308"
    },
    {
        "line": 14,
        "fullcodeline": "cf_form_field = cf.to_form_field(set_initial=False)"
    },
    {
        "line": 15,
        "fullcodeline": "field_info = {"
    },
    {
        "line": 30,
        "fullcodeline": "fields.append(field_info)"
    },
    {
        "line": 43,
        "fullcodeline": "elif isinstance(field, TimeZoneSerializerField):"
    },
    {
        "line": 21,
        "fullcodeline": "if cf.type == CustomFieldTypeChoices.TYPE_BOOLEAN:"
    },
    {
        "line": 44,
        "fullcodeline": "field_info[\"format\"] = mark_safe(  # noqa: S308"
    },
    {
        "line": 22,
        "fullcodeline": "field_info[\"format\"] = mark_safe(\"<code>true</code> or <code>false</code>\")  # noqa: S308"
    },
    {
        "line": 47,
        "fullcodeline": "elif isinstance(field, serializers.ManyRelatedField):"
    },
    {
        "line": 16,
        "fullcodeline": "\"name\": cf.add_prefix_to_cf_key(),"
    },
    {
        "line": 23,
        "fullcodeline": "elif cf.type == CustomFieldTypeChoices.TYPE_DATE:"
    },
    {
        "line": 24,
        "fullcodeline": "field_info[\"format\"] = mark_safe(\"<code>YYYY-MM-DD</code>\")  # noqa: S308"
    },
    {
        "line": 48,
        "fullcodeline": "if field.field_name == \"tags\":"
    },
    {
        "line": 54,
        "fullcodeline": "elif isinstance(field, serializers.RelatedField):"
    },
    {
        "line": 25,
        "fullcodeline": "elif cf.type == CustomFieldTypeChoices.TYPE_SELECT:"
    },
    {
        "line": 49,
        "fullcodeline": "field_info[\"format\"] = mark_safe('<code>\"name,name\"</code> or <code>\"UUID,UUID\"</code>')  # noqa: S308"
    },
    {
        "line": 26,
        "fullcodeline": "field_info[\"choices\"] = {cfc.value: cfc.value for cfc in cf.custom_field_choices.all()}"
    },
    {
        "line": 50,
        "fullcodeline": "elif isinstance(field.child_relation, ContentTypeField):"
    },
    {
        "line": 55,
        "fullcodeline": "if isinstance(field, ContentTypeField):"
    },
    {
        "line": 59,
        "fullcodeline": "elif isinstance(field, (serializers.ListField, serializers.MultipleChoiceField)):"
    },
    {
        "line": 27,
        "fullcodeline": "elif cf.type == CustomFieldTypeChoices.TYPE_MULTISELECT:"
    },
    {
        "line": 51,
        "fullcodeline": "field_info[\"format\"] = mark_safe('<code>\"app_label.model,app_label.model\"</code>')  # noqa: S308"
    },
    {
        "line": 53,
        "fullcodeline": "field_info[\"format\"] = mark_safe('<code>\"UUID,UUID\"</code>')  # noqa: S308"
    },
    {
        "line": 56,
        "fullcodeline": "field_info[\"format\"] = mark_safe(\"<code>app_label.model</code>\")  # noqa: S308"
    },
    {
        "line": 58,
        "fullcodeline": "field_info[\"format\"] = mark_safe(\"<code>UUID</code>\")  # noqa: S308"
    },
    {
        "line": 60,
        "fullcodeline": "field_info[\"format\"] = mark_safe('<code>\"value,value\"</code>')  # noqa: S308"
    },
    {
        "line": 28,
        "fullcodeline": "field_info[\"format\"] = mark_safe('<code>\"value,value\"</code>')  # noqa: S308"
    },
    {
        "line": 29,
        "fullcodeline": "field_info[\"choices\"] = {cfc.value: cfc.value for cfc in cf.custom_field_choices.all()}"
    },
    {
        "line": 61,
        "fullcodeline": "elif isinstance(field, (serializers.DictField, serializers.JSONField)):"
    },
    {
        "line": 62,
        "fullcodeline": "pass  # Not trivial to specify a format as it could be a JSON dict or a comma-separated string"
    }
]