[
    {
        "line": 2,
        "fullcodeline": "STACK_OF(X509) *certs = nullptr;"
    },
    {
        "line": 21,
        "fullcodeline": "auto *signers_stack_ptr = PKCS7_get0_signers(p7_, nullptr, 0);"
    },
    {
        "line": 25,
        "fullcodeline": "auto signers_stack = impl::STACK_OF_X509_ptr(signers_stack_ptr, impl::SK_X509_free);"
    },
    {
        "line": 52,
        "fullcodeline": "std::uint8_t *indirect_data_buf = nullptr;"
    },
    {
        "line": 53,
        "fullcodeline": "auto buf_size = impl::i2d_Authenticode_SpcIndirectDataContent(indirect_data_, &indirect_data_buf);"
    },
    {
        "line": 57,
        "fullcodeline": "auto indirect_data_ptr ="
    },
    {
        "line": 60,
        "fullcodeline": "const auto *signed_data_seq = reinterpret_cast<std::uint8_t *>(indirect_data_ptr.get());"
    },
    {
        "line": 61,
        "fullcodeline": "long length = 0;"
    },
    {
        "line": 62,
        "fullcodeline": "int tag = 0, tag_class = 0;"
    },
    {
        "line": 63,
        "fullcodeline": "ASN1_get_object(&signed_data_seq, &length, &tag, &tag_class, buf_size);"
    },
    {
        "line": 68,
        "fullcodeline": "auto *signed_data_ptr = BIO_new_mem_buf(signed_data_seq, length);"
    },
    {
        "line": 72,
        "fullcodeline": "impl::BIO_ptr signed_data(signed_data_ptr, BIO_free);"
    },
    {
        "line": 82,
        "fullcodeline": "auto status = PKCS7_verify(p7_, certs, nullptr, signed_data.get(), nullptr, PKCS7_NOVERIFY);"
    },
    {
        "line": 17,
        "fullcodeline": "if (certs == nullptr) {"
    },
    {
        "line": 22,
        "fullcodeline": "if (signers_stack_ptr == nullptr) {"
    },
    {
        "line": 34,
        "fullcodeline": "for (auto i = 0; i < sk_X509_num(signers_stack.get()); ++i) {"
    },
    {
        "line": 54,
        "fullcodeline": "if (buf_size < 0 || indirect_data_buf == nullptr) {"
    },
    {
        "line": 58,
        "fullcodeline": "impl::OpenSSL_ptr(reinterpret_cast<char *>(indirect_data_buf), impl::OpenSSL_free);"
    },
    {
        "line": 64,
        "fullcodeline": "if (tag != V_ASN1_SEQUENCE) {"
    },
    {
        "line": 69,
        "fullcodeline": "if (signed_data_ptr == nullptr) {"
    },
    {
        "line": 84,
        "fullcodeline": "return status == 1;"
    },
    {
        "line": 35,
        "fullcodeline": "auto *signer = sk_X509_value(signers_stack.get(), i);"
    },
    {
        "line": 41,
        "fullcodeline": "auto xku_flags = X509_get_extended_key_usage(signer);"
    },
    {
        "line": 42,
        "fullcodeline": "if (!(xku_flags & XKU_CODE_SIGN)) {"
    }
]