[
    {
        "line": 11,
        "fullcodeline": "int salt_len = 0;"
    },
    {
        "line": 12,
        "fullcodeline": "TEE_Attribute *params = NULL;"
    },
    {
        "line": 16,
        "fullcodeline": "res = tee_ta_get_current_session(&sess);"
    },
    {
        "line": 19,
        "fullcodeline": "utc = to_user_ta_ctx(sess->ctx);"
    },
    {
        "line": 21,
        "fullcodeline": "res = tee_svc_cryp_get_state(sess, tee_svc_uref_to_vaddr(state), &cs);"
    },
    {
        "line": 28,
        "fullcodeline": "res = tee_mmu_check_access_rights(utc,"
    },
    {
        "line": 35,
        "fullcodeline": "res = tee_mmu_check_access_rights(utc,"
    },
    {
        "line": 42,
        "fullcodeline": "params = malloc(sizeof(TEE_Attribute) * num_params);"
    },
    {
        "line": 45,
        "fullcodeline": "res = copy_in_attrs(utc, usr_params, num_params, params);"
    },
    {
        "line": 49,
        "fullcodeline": "res = tee_obj_get(utc, cs->key1, &o);"
    },
    {
        "line": 17,
        "fullcodeline": "if (res != TEE_SUCCESS)"
    },
    {
        "line": 22,
        "fullcodeline": "if (res != TEE_SUCCESS)"
    },
    {
        "line": 25,
        "fullcodeline": "if (cs->mode != TEE_MODE_VERIFY)"
    },
    {
        "line": 32,
        "fullcodeline": "if (res != TEE_SUCCESS)"
    },
    {
        "line": 39,
        "fullcodeline": "if (res != TEE_SUCCESS)"
    },
    {
        "line": 43,
        "fullcodeline": "if (!params)"
    },
    {
        "line": 46,
        "fullcodeline": "if (res != TEE_SUCCESS)"
    },
    {
        "line": 50,
        "fullcodeline": "if (res != TEE_SUCCESS)"
    },
    {
        "line": 57,
        "fullcodeline": "switch (TEE_ALG_GET_MAIN_ALG(cs->algo)) {"
    },
    {
        "line": 29,
        "fullcodeline": "TEE_MEMORY_ACCESS_READ |"
    },
    {
        "line": 36,
        "fullcodeline": "TEE_MEMORY_ACCESS_READ |"
    },
    {
        "line": 52,
        "fullcodeline": "if ((o->info.handleFlags & TEE_HANDLE_FLAG_INITIALIZED) == 0) {"
    },
    {
        "line": 53,
        "fullcodeline": "res = TEE_ERROR_BAD_PARAMETERS;"
    },
    {
        "line": 71,
        "fullcodeline": "res = crypto_acipher_rsassa_verify(cs->algo, o->attr, salt_len,"
    },
    {
        "line": 77,
        "fullcodeline": "hash_algo = TEE_DIGEST_HASH_TO_ALGO(cs->algo);"
    },
    {
        "line": 78,
        "fullcodeline": "res = tee_hash_get_digest_size(hash_algo, &hash_size);"
    },
    {
        "line": 91,
        "fullcodeline": "res = crypto_acipher_dsa_verify(cs->algo, o->attr, data,"
    },
    {
        "line": 96,
        "fullcodeline": "res = crypto_acipher_ecc_verify(cs->algo, o->attr, data,"
    },
    {
        "line": 101,
        "fullcodeline": "res = TEE_ERROR_NOT_SUPPORTED;"
    },
    {
        "line": 59,
        "fullcodeline": "if (cs->algo != TEE_ALG_RSASSA_PKCS1_V1_5) {"
    },
    {
        "line": 79,
        "fullcodeline": "if (res != TEE_SUCCESS)"
    },
    {
        "line": 87,
        "fullcodeline": "if (data_len > hash_size) {"
    },
    {
        "line": 60,
        "fullcodeline": "hash_algo = TEE_DIGEST_HASH_TO_ALGO(cs->algo);"
    },
    {
        "line": 61,
        "fullcodeline": "res = tee_hash_get_digest_size(hash_algo, &hash_size);"
    },
    {
        "line": 68,
        "fullcodeline": "salt_len = pkcs1_get_salt_len(params, num_params,"
    },
    {
        "line": 88,
        "fullcodeline": "res = TEE_ERROR_BAD_PARAMETERS;"
    },
    {
        "line": 62,
        "fullcodeline": "if (res != TEE_SUCCESS)"
    },
    {
        "line": 64,
        "fullcodeline": "if (data_len != hash_size) {"
    },
    {
        "line": 65,
        "fullcodeline": "res = TEE_ERROR_BAD_PARAMETERS;"
    }
]