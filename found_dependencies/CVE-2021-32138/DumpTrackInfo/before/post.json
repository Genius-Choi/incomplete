[
    {
        "line": 3,
        "fullcodeline": "char szCodec[RFC6381_CODEC_NAME_SIZE_MAX];"
    },
    {
        "line": 5,
        "fullcodeline": "Bool is_od_track = 0;"
    },
    {
        "line": 10,
        "fullcodeline": "char szDur[50];"
    },
    {
        "line": 24,
        "fullcodeline": "timescale = gf_isom_get_media_timescale(file, trackNum);"
    },
    {
        "line": 25,
        "fullcodeline": "fprintf(stderr, \"# Track %d Info - ID %d - TimeScale %d\\n\", trackNum, trackID, timescale);"
    },
    {
        "line": 27,
        "fullcodeline": "dur = gf_isom_get_media_original_duration(file, trackNum);"
    },
    {
        "line": 28,
        "fullcodeline": "size = gf_isom_get_media_duration(file, trackNum);"
    },
    {
        "line": 29,
        "fullcodeline": "fprintf(stderr, \"Media Duration %s \", format_duration(dur, timescale, szDur));"
    },
    {
        "line": 32,
        "fullcodeline": "fprintf(stderr, \"\\n\");"
    },
    {
        "line": 38,
        "fullcodeline": "nb_edits = gf_isom_get_edits_count(file, trackNum);"
    },
    {
        "line": 42,
        "fullcodeline": "cts_shift = gf_isom_get_composition_offset_shift(file, trackNum);"
    },
    {
        "line": 48,
        "fullcodeline": "gf_isom_get_media_language(file, trackNum, &lang);"
    },
    {
        "line": 49,
        "fullcodeline": "fprintf(stderr, \"Media Info: Language \\\"%s (%s)\\\" - \", GetLanguage(lang), lang );"
    },
    {
        "line": 50,
        "fullcodeline": "gf_free(lang);"
    },
    {
        "line": 51,
        "fullcodeline": "mtype = gf_isom_get_media_type(file, trackNum);"
    },
    {
        "line": 52,
        "fullcodeline": "fprintf(stderr, \"Type \\\"%s:\", gf_4cc_to_str(mtype));"
    },
    {
        "line": 53,
        "fullcodeline": "msub_type = gf_isom_get_mpeg4_subtype(file, trackNum, 1);"
    },
    {
        "line": 55,
        "fullcodeline": "fprintf(stderr, \"%s\\\" - %d samples\\n\", gf_4cc_to_str(msub_type), gf_isom_get_sample_count(file, trackNum));"
    },
    {
        "line": 57,
        "fullcodeline": "pfmt = gf_pixel_fmt_from_qt_type(msub_type);"
    },
    {
        "line": 58,
        "fullcodeline": "codecid = gf_codec_id_from_isobmf(msub_type);"
    },
    {
        "line": 60,
        "fullcodeline": "count = gf_isom_get_track_kind_count(file, trackNum);"
    },
    {
        "line": 98,
        "fullcodeline": "print_udta(file, trackNum, GF_FALSE);"
    },
    {
        "line": 113,
        "fullcodeline": "gf_isom_get_audio_info(file, trackNum, 1, &sr, &nb_ch, &bps);"
    },
    {
        "line": 114,
        "fullcodeline": "gf_isom_set_nalu_extract_mode(file, trackNum, GF_ISOM_NALU_EXTRACT_INSPECT);"
    },
    {
        "line": 116,
        "fullcodeline": "msub_type = gf_isom_get_media_subtype(file, trackNum, 1);"
    },
    {
        "line": 906,
        "fullcodeline": "DumpMetaItem(file, 0, trackNum, \"\\tTrack Meta\");"
    },
    {
        "line": 908,
        "fullcodeline": "gf_isom_get_track_switch_group_count(file, trackNum, &alt_group, &nb_groups);"
    },
    {
        "line": 949,
        "fullcodeline": "fprintf(stderr, \"\\tMax sample duration: %d / %d\\n\", gf_isom_get_max_sample_delta(file, trackNum), timescale);"
    },
    {
        "line": 956,
        "fullcodeline": "dur = size = 0;"
    },
    {
        "line": 957,
        "fullcodeline": "max_rate = rate = 0;"
    },
    {
        "line": 958,
        "fullcodeline": "time_slice = 0;"
    },
    {
        "line": 959,
        "fullcodeline": "ts = gf_isom_get_media_timescale(file, trackNum);"
    },
    {
        "line": 960,
        "fullcodeline": "csize = gf_isom_get_constant_sample_size(file, trackNum);"
    },
    {
        "line": 961,
        "fullcodeline": "cdur = gf_isom_get_constant_sample_duration(file, trackNum);"
    },
    {
        "line": 962,
        "fullcodeline": "count = gf_isom_get_sample_count(file, trackNum);"
    },
    {
        "line": 993,
        "fullcodeline": "fprintf(stderr, \"\\nComputed info from media:\\n\");"
    },
    {
        "line": 997,
        "fullcodeline": "scale = 1000.0 / ts;"
    },
    {
        "line": 998,
        "fullcodeline": "dur = (u64) (scale * dur);"
    },
    {
        "line": 1005,
        "fullcodeline": "rate = 8000.0 * size / dur;"
    },
    {
        "line": 1024,
        "fullcodeline": "fprintf(stderr, \"\\n\");"
    },
    {
        "line": 1026,
        "fullcodeline": "count = gf_isom_get_chapter_count(file, trackNum);"
    },
    {
        "line": 13,
        "fullcodeline": "if (!is_track_num) {"
    },
    {
        "line": 19,
        "fullcodeline": "if (!trackNum) {"
    },
    {
        "line": 30,
        "fullcodeline": "if (dur != size)"
    },
    {
        "line": 34,
        "fullcodeline": "if (gf_isom_check_data_reference(file, trackNum, 1) != GF_OK) {"
    },
    {
        "line": 46,
        "fullcodeline": "if (gf_isom_is_track_in_root_od(file, trackNum) ) fprintf(stderr, \"Track is present in Root OD\\n\");"
    },
    {
        "line": 47,
        "fullcodeline": "if (!gf_isom_is_track_enabled(file, trackNum))  fprintf(stderr, \"Track is disabled\\n\");"
    },
    {
        "line": 54,
        "fullcodeline": "if (!msub_type) msub_type = gf_isom_get_media_subtype(file, trackNum, 1);"
    },
    {
        "line": 61,
        "fullcodeline": "for (i = 0; i < count; i++) {"
    },
    {
        "line": 69,
        "fullcodeline": "if (gf_isom_is_track_fragmented(file, trackID) ) {"
    },
    {
        "line": 86,
        "fullcodeline": "if (!gf_isom_is_self_contained(file, trackNum, 1)) {"
    },
    {
        "line": 100,
        "fullcodeline": "if (gf_isom_is_video_handler_type(mtype) ) {"
    },
    {
        "line": 117,
        "fullcodeline": "if (msub_type==GF_ISOM_SUBTYPE_MPEG4_CRYP)"
    },
    {
        "line": 120,
        "fullcodeline": "if ((msub_type==GF_ISOM_SUBTYPE_MPEG4)"
    },
    {
        "line": 829,
        "fullcodeline": "if (gf_isom_is_track_encrypted(file, trackNum)) {"
    },
    {
        "line": 901,
        "fullcodeline": "if ( gf_media_get_rfc_6381_codec_name(file, trackNum, szCodec, GF_FALSE, GF_FALSE) == GF_OK) {"
    },
    {
        "line": 931,
        "fullcodeline": "switch (gf_isom_has_sync_points(file, trackNum)) {"
    },
    {
        "line": 951,
        "fullcodeline": "if (!full_dump) {"
    },
    {
        "line": 963,
        "fullcodeline": "if (csize && cdur) {"
    },
    {
        "line": 994,
        "fullcodeline": "if (csize && cdur) {"
    },
    {
        "line": 1000,
        "fullcodeline": "if (!dur) {"
    },
    {
        "line": 1007,
        "fullcodeline": "if (!max_rate)"
    },
    {
        "line": 1012,
        "fullcodeline": "if (rate >= 1500) {"
    },
    {
        "line": 1020,
        "fullcodeline": "gf_isom_get_chunks_infos(file, trackNum, &dmin, &davg, &dmax, &smin, &savg, &smax);"
    },
    {
        "line": 1021,
        "fullcodeline": "fprintf(stderr, \"\\tChunk durations: min %d ms - max %d ms - average %d ms\\n\", (1000*dmin)/ts, (1000*dmax)/ts, (1000*davg)/ts);"
    },
    {
        "line": 1022,
        "fullcodeline": "fprintf(stderr, \"\\tChunk sizes (bytes): min %d - max %d - average %d\\n\", smin, smax, savg);"
    },
    {
        "line": 14,
        "fullcodeline": "trackNum = gf_isom_get_track_by_id(file, trackID);"
    },
    {
        "line": 20,
        "fullcodeline": "M4_LOG(GF_LOG_ERROR, (\"No track with ID %d found\\n\", trackID));"
    },
    {
        "line": 31,
        "fullcodeline": "fprintf(stderr, \" (recomputed %s)\", format_duration(size, timescale, szDur));"
    },
    {
        "line": 35,
        "fullcodeline": "M4_LOG(GF_LOG_WARNING, (\"Track uses external data reference not supported by GPAC!\\n\"));"
    },
    {
        "line": 40,
        "fullcodeline": "fprintf(stderr, \"Track has %d edits: track duration is %s\\n\", nb_edits, format_duration(gf_isom_get_track_duration(file, trackNum), gf_isom_get_timescale(file), szDur));"
    },
    {
        "line": 44,
        "fullcodeline": "fprintf(stderr, \"Track composition offset shift (negative CTS offset): %d\\n\", cts_shift);"
    },
    {
        "line": 63,
        "fullcodeline": "gf_isom_get_track_kind(file, trackNum, i, &kind_scheme, &kind_value);"
    },
    {
        "line": 64,
        "fullcodeline": "fprintf(stderr, \"Kind: %s - %s\\n\", kind_scheme ? kind_scheme : \"null\", kind_value ? kind_value : \"null\");"
    },
    {
        "line": 75,
        "fullcodeline": "gf_isom_get_fragmented_samples_info(file, trackID, &frag_samples, &frag_duration);"
    },
    {
        "line": 76,
        "fullcodeline": "fprintf(stderr, \"Fragmented track: %d samples - Media Duration %s\\n\", frag_samples, format_duration(frag_duration, timescale, szDur));"
    },
    {
        "line": 78,
        "fullcodeline": "gf_isom_get_fragment_defaults(file, trackNum, &defaultDuration, &defaultSize, &defaultDescriptionIndex, &defaultRandomAccess, &defaultPadding, &defaultDegradationPriority);"
    },
    {
        "line": 80,
        "fullcodeline": "fprintf(stderr, \"Fragment sample defaults: duration %d size %d stsd %d sync %d padding %d degradation_priority %d\\n\","
    },
    {
        "line": 88,
        "fullcodeline": "gf_isom_get_data_reference(file, trackNum, 1, &url, &urn);"
    },
    {
        "line": 89,
        "fullcodeline": "fprintf(stderr, \"Media Data Location: %s\\n\", url ? url : urn);"
    },
    {
        "line": 94,
        "fullcodeline": "gf_isom_get_handler_name(file, trackNum, &handler_name);"
    },
    {
        "line": 95,
        "fullcodeline": "fprintf(stderr, \"Handler name: %s\\n\", handler_name);"
    },
    {
        "line": 105,
        "fullcodeline": "gf_isom_get_visual_info(file, trackNum, 1, &w, &h);"
    },
    {
        "line": 106,
        "fullcodeline": "gf_isom_get_visual_bit_depth(file, trackNum, 1, &bit_depth);"
    },
    {
        "line": 107,
        "fullcodeline": "fprintf(stderr, \"Visual Sample Entry Info: width=%d height=%d (depth=%d bits)\\n\", w, h, (int)bit_depth);"
    },
    {
        "line": 109,
        "fullcodeline": "gf_isom_get_track_layout_info(file, trackNum, &w, &h, &tx, &ty, NULL);"
    },
    {
        "line": 110,
        "fullcodeline": "fprintf(stderr, \"Visual Track layout: x=%d y=%d width=%d height=%d\\n\", tx, ty, w, h);"
    },
    {
        "line": 118,
        "fullcodeline": "gf_isom_get_original_format_type(file, trackNum, 1, &msub_type);"
    },
    {
        "line": 134,
        "fullcodeline": "|| (msub_type==GF_ISOM_SUBTYPE_HVT1)"
    },
    {
        "line": 136,
        "fullcodeline": "esd = gf_isom_get_esd(file, trackNum, 1);"
    },
    {
        "line": 898,
        "fullcodeline": "fprintf(stderr, \"\\n\");"
    },
    {
        "line": 902,
        "fullcodeline": "fprintf(stderr, \"\\tRFC6381 Codec Parameters: %s\\n\", szCodec);"
    },
    {
        "line": 910,
        "fullcodeline": "fprintf(stderr, \"Alternate Group ID %d\\n\", alt_group);"
    },
    {
        "line": 933,
        "fullcodeline": "fprintf(stderr, \"\\tAll samples are sync\\n\");"
    },
    {
        "line": 946,
        "fullcodeline": "fprintf(stderr, \"\\tNo sync sample found\\n\");"
    },
    {
        "line": 952,
        "fullcodeline": "fprintf(stderr, \"\\n\");"
    },
    {
        "line": 964,
        "fullcodeline": "size = count * csize;"
    },
    {
        "line": 965,
        "fullcodeline": "dur = cdur * count;"
    },
    {
        "line": 995,
        "fullcodeline": "fprintf(stderr, \"\\tConstant sample size %d bytes and dur %d / %d\\n\", csize, cdur, ts);"
    },
    {
        "line": 1001,
        "fullcodeline": "fprintf(stderr, \"\\n\");"
    },
    {
        "line": 1008,
        "fullcodeline": "max_rate = rate;"
    },
    {
        "line": 1013,
        "fullcodeline": "fprintf(stderr, \"\\tAverage rate %.2f kbps - Max Rate %.2f kbps\\n\", rate/1000, max_rate/1000);"
    },
    {
        "line": 1030,
        "fullcodeline": "fprintf(stderr, \"\\nChapters:\\n\");"
    },
    {
        "line": 16,
        "fullcodeline": "trackNum = trackID;"
    },
    {
        "line": 17,
        "fullcodeline": "trackID = gf_isom_get_track_id(file, trackNum);"
    },
    {
        "line": 82,
        "fullcodeline": "(u32) defaultPadding, (u32) defaultDegradationPriority"
    },
    {
        "line": 133,
        "fullcodeline": "|| (msub_type==GF_ISOM_SUBTYPE_LHE1)"
    },
    {
        "line": 137,
        "fullcodeline": "if (!esd || !esd->decoderConfig) {"
    },
    {
        "line": 835,
        "fullcodeline": "if (gf_isom_is_ismacryp_media(file, trackNum, 1)) {"
    },
    {
        "line": 911,
        "fullcodeline": "for (i=0; i<nb_groups; i++) {"
    },
    {
        "line": 937,
        "fullcodeline": "u32 nb_sync = gf_isom_get_sync_point_count(file, trackNum) - 1;"
    },
    {
        "line": 1010,
        "fullcodeline": "max_rate *= 8.0;"
    },
    {
        "line": 1015,
        "fullcodeline": "fprintf(stderr, \"\\tAverage rate %.2f bps - Max Rate %.2f bps\\n\", rate, max_rate);"
    },
    {
        "line": 1031,
        "fullcodeline": "for (j=0; j<count; j++) {"
    },
    {
        "line": 65,
        "fullcodeline": "if (kind_scheme) gf_free(kind_scheme);"
    },
    {
        "line": 66,
        "fullcodeline": "if (kind_value) gf_free(kind_value);"
    },
    {
        "line": 132,
        "fullcodeline": "|| (msub_type==GF_ISOM_SUBTYPE_LHV1)"
    },
    {
        "line": 138,
        "fullcodeline": "M4_LOG(GF_LOG_WARNING, (\"WARNING: Broken MPEG-4 Track\\n\"));"
    },
    {
        "line": 516,
        "fullcodeline": "} else if (msub_type == GF_ISOM_SUBTYPE_AV01) {"
    },
    {
        "line": 836,
        "fullcodeline": "gf_isom_get_ismacryp_info(file, trackNum, 1, NULL, &scheme_type, &version, &scheme_URI, &KMS_URI, &use_sel_enc, &IV_size, NULL);"
    },
    {
        "line": 837,
        "fullcodeline": "fprintf(stderr, \"\\n\\tProtected by ISMA E&A scheme %s (version %d)\\n\", gf_4cc_to_str(scheme_type), version);"
    },
    {
        "line": 843,
        "fullcodeline": "fprintf(stderr, \"\\tSelective Encryption: %s\\n\", use_sel_enc ? \"Yes\" : \"No\");"
    },
    {
        "line": 913,
        "fullcodeline": "const u32 *criterias = gf_isom_get_track_switch_parameter(file, trackNum, i+1, &switchGroupID, &nb_crit);"
    },
    {
        "line": 938,
        "fullcodeline": "if (! nb_sync) {"
    },
    {
        "line": 968,
        "fullcodeline": "for (j=0; j<count; j++) {"
    },
    {
        "line": 1032,
        "fullcodeline": "gf_isom_get_chapter(file, trackNum, j+1, &time, &name);"
    },
    {
        "line": 1033,
        "fullcodeline": "fprintf(stderr, \"\\tChapter #%d - %s - \\\"%s\\\"\\n\", j+1, format_duration(time, 1000, szDur), name);"
    },
    {
        "line": 131,
        "fullcodeline": "|| (msub_type==GF_ISOM_SUBTYPE_HEV2)"
    },
    {
        "line": 141,
        "fullcodeline": "const char *st = gf_stream_type_name(esd->decoderConfig->streamType);"
    },
    {
        "line": 514,
        "fullcodeline": "gf_odf_desc_del((GF_Descriptor *) esd);"
    },
    {
        "line": 519,
        "fullcodeline": "gf_isom_get_visual_info(file, trackNum, 1, &w, &h);"
    },
    {
        "line": 520,
        "fullcodeline": "fprintf(stderr, \"\\tAOM AV1 stream - Resolution %d x %d\\n\", w, h);"
    },
    {
        "line": 522,
        "fullcodeline": "av1c = gf_isom_av1_config_get(file, trackNum, 1);"
    },
    {
        "line": 523,
        "fullcodeline": "fprintf(stderr, \"\\tversion=%u, profile=%u, level_idx0=%u, tier=%u\\n\", (u32)av1c->version, (u32)av1c->seq_profile, (u32)av1c->seq_level_idx_0, (u32)av1c->seq_tier_0);"
    },
    {
        "line": 524,
        "fullcodeline": "fprintf(stderr, \"\\thigh_bitdepth=%u, twelve_bit=%u, monochrome=%u\\n\", (u32)av1c->high_bitdepth, (u32)av1c->twelve_bit, (u32)av1c->monochrome);"
    },
    {
        "line": 525,
        "fullcodeline": "fprintf(stderr, \"\\tchroma: subsampling_x=%u, subsampling_y=%u, sample_position=%u\\n\", (u32)av1c->chroma_subsampling_x, (u32)av1c->chroma_subsampling_y, (u32)av1c->chroma_sample_position);"
    },
    {
        "line": 530,
        "fullcodeline": "count = gf_list_count(av1c->obu_array);"
    },
    {
        "line": 539,
        "fullcodeline": "gf_odf_av1_cfg_del(av1c);"
    },
    {
        "line": 914,
        "fullcodeline": "if (!nb_crit) {"
    },
    {
        "line": 939,
        "fullcodeline": "fprintf(stderr, \"\\tOnly one sync sample\\n\");"
    },
    {
        "line": 979,
        "fullcodeline": "dur = samp->DTS+samp->CTS_Offset;"
    },
    {
        "line": 980,
        "fullcodeline": "size += samp->dataLength;"
    },
    {
        "line": 981,
        "fullcodeline": "rate += samp->dataLength;"
    },
    {
        "line": 990,
        "fullcodeline": "gf_isom_sample_del(&samp);"
    },
    {
        "line": 130,
        "fullcodeline": "|| (msub_type==GF_ISOM_SUBTYPE_HVC2)"
    },
    {
        "line": 139,
        "fullcodeline": "if (esd) gf_odf_desc_del((GF_Descriptor *)esd);"
    },
    {
        "line": 152,
        "fullcodeline": "if (esd->decoderConfig->streamType==GF_STREAM_OD)"
    },
    {
        "line": 155,
        "fullcodeline": "if (esd->decoderConfig->streamType==GF_STREAM_VISUAL) {"
    },
    {
        "line": 497,
        "fullcodeline": "if (!full_dump) {"
    },
    {
        "line": 531,
        "fullcodeline": "for (i=0; i<count; i++) {"
    },
    {
        "line": 838,
        "fullcodeline": "if (scheme_URI) fprintf(stderr, \"scheme location: %s\\n\", scheme_URI);"
    },
    {
        "line": 844,
        "fullcodeline": "if (IV_size) fprintf(stderr, \"\\tInitialization Vector size: %d bits\\n\", IV_size*8);"
    },
    {
        "line": 845,
        "fullcodeline": "} else if (gf_isom_is_omadrm_media(file, trackNum, 1)) {"
    },
    {
        "line": 915,
        "fullcodeline": "fprintf(stderr, \"\\tNo criteria in %s group\\n\", switchGroupID ? \"switch\" : \"alternate\");"
    },
    {
        "line": 941,
        "fullcodeline": "fprintf(stderr, \"\\tAverage GOP length: %d samples\\n\", gf_isom_get_sample_count(file, trackNum) / nb_sync);"
    },
    {
        "line": 975,
        "fullcodeline": "if (!samp) {"
    },
    {
        "line": 982,
        "fullcodeline": "if (samp->DTS - time_slice > ts) {"
    },
    {
        "line": 129,
        "fullcodeline": "|| (msub_type==GF_ISOM_SUBTYPE_HEV1)"
    },
    {
        "line": 153,
        "fullcodeline": "is_od_track=1;"
    },
    {
        "line": 158,
        "fullcodeline": "w = h = 0;"
    },
    {
        "line": 528,
        "fullcodeline": "fprintf(stderr, \"\\tInitial presentation delay %u\\n\", (u32) av1c->initial_presentation_delay_minus_one+1);"
    },
    {
        "line": 532,
        "fullcodeline": "u8 hash[20];"
    },
    {
        "line": 533,
        "fullcodeline": "GF_AV1_OBUArrayEntry *obu = gf_list_get(av1c->obu_array, i);"
    },
    {
        "line": 534,
        "fullcodeline": "gf_sha1_csum((u8*)obu->obu, (u32)obu->obu_length, hash);"
    },
    {
        "line": 535,
        "fullcodeline": "fprintf(stderr, \"\\tOBU#%d %s hash: \", i+1, gf_av1_get_obu_name(obu->obu_type) );"
    },
    {
        "line": 537,
        "fullcodeline": "fprintf(stderr, \"\\n\");"
    },
    {
        "line": 540,
        "fullcodeline": "} else if (msub_type == GF_ISOM_SUBTYPE_3GP_H263) {"
    },
    {
        "line": 840,
        "fullcodeline": "if (!strnicmp(KMS_URI, \"(key)\", 5)) fprintf(stderr, \"\\tKMS location: key in file\\n\");"
    },
    {
        "line": 849,
        "fullcodeline": "gf_isom_get_omadrm_info(file, trackNum, 1, NULL, &scheme_type, &version, &scheme_URI, &KMS_URI, &textHdrs, &hdr_len, &orig_len, &enc_type, &use_sel_enc, &IV_size, NULL);"
    },
    {
        "line": 850,
        "fullcodeline": "fprintf(stderr, \"\\n\\tProtected by OMA DRM scheme %s (version %d)\\n\", gf_4cc_to_str(scheme_type), version);"
    },
    {
        "line": 851,
        "fullcodeline": "fprintf(stderr, \"\\tRights Issuer: %s\\n\", KMS_URI);"
    },
    {
        "line": 852,
        "fullcodeline": "fprintf(stderr, \"\\tContent ID: %s\\n\", scheme_URI);"
    },
    {
        "line": 869,
        "fullcodeline": "fprintf(stderr, \"\\tEncryption algorithm %s\\n\", (enc_type==1) ? \"AEA 128 CBC\" : (enc_type ? \"AEA 128 CTR\" : \"None\"));"
    },
    {
        "line": 870,
        "fullcodeline": "fprintf(stderr, \"\\tSelective Encryption: %s\\n\", use_sel_enc ? \"Yes\" : \"No\");"
    },
    {
        "line": 926,
        "fullcodeline": "fprintf(stderr, \"\\n\");"
    },
    {
        "line": 971,
        "fullcodeline": "samp = gf_isom_get_sample(file, trackNum, j+1, NULL);"
    },
    {
        "line": 976,
        "fullcodeline": "M4_LOG(GF_LOG_ERROR, (\"Failed to fetch sample %d\\n\", j+1));"
    },
    {
        "line": 983,
        "fullcodeline": "Double max_tmp = rate * ts / (samp->DTS - time_slice);"
    },
    {
        "line": 987,
        "fullcodeline": "rate = 0;"
    },
    {
        "line": 988,
        "fullcodeline": "time_slice = samp->DTS;"
    },
    {
        "line": 128,
        "fullcodeline": "|| (msub_type==GF_ISOM_SUBTYPE_HVC1)"
    },
    {
        "line": 159,
        "fullcodeline": "if (esd->decoderConfig->objectTypeIndication==GF_CODECID_MPEG4_PART2) {"
    },
    {
        "line": 365,
        "fullcodeline": "if (!w || !h) {"
    },
    {
        "line": 370,
        "fullcodeline": "if (gf_isom_get_rvc_config(file, trackNum, 1, &rvc_predef, NULL, NULL, NULL)==GF_OK) {"
    },
    {
        "line": 505,
        "fullcodeline": "fprintf(stderr, \"\\tDecoding Buffer size %d - Bitrate: avg %d - max %d kbps\\n\", esd->decoderConfig->bufferSizeDB, esd->decoderConfig->avgBitrate/1000, esd->decoderConfig->maxBitrate/1000);"
    },
    {
        "line": 511,
        "fullcodeline": "fprintf(stderr, \"\\tStreamPriority %d\\n\", esd->streamPriority);"
    },
    {
        "line": 536,
        "fullcodeline": "for (j=0; j<20; j++) fprintf(stderr, \"%02X\", hash[j]);"
    },
    {
        "line": 542,
        "fullcodeline": "gf_isom_get_visual_info(file, trackNum, 1, &w, &h);"
    },
    {
        "line": 543,
        "fullcodeline": "fprintf(stderr, \"\\t3GPP H263 stream - Resolution %d x %d\\n\", w, h);"
    },
    {
        "line": 922,
        "fullcodeline": "for (j=0; j<nb_crit; j++) {"
    },
    {
        "line": 973,
        "fullcodeline": "samp = gf_isom_get_sample_info(file, trackNum, j+1, NULL, NULL);"
    },
    {
        "line": 984,
        "fullcodeline": "if (max_rate < max_tmp )"
    },
    {
        "line": 127,
        "fullcodeline": "|| (msub_type==GF_ISOM_SUBTYPE_LSR1)"
    },
    {
        "line": 144,
        "fullcodeline": "fprintf(stderr, \"MPEG-4 Config%s%s Stream - ObjectTypeIndication 0x%02x\\n\","
    },
    {
        "line": 366,
        "fullcodeline": "gf_isom_get_visual_info(file, trackNum, 1, &w, &h);"
    },
    {
        "line": 368,
        "fullcodeline": "fprintf(stderr, \"Visual Size %d x %d\\n\", w, h);"
    },
    {
        "line": 371,
        "fullcodeline": "fprintf(stderr, \"Has RVC signaled - Predefined configuration %d\\n\", rvc_predef);"
    },
    {
        "line": 374,
        "fullcodeline": "} else if (esd->decoderConfig->streamType==GF_STREAM_AUDIO) {"
    },
    {
        "line": 841,
        "fullcodeline": "else fprintf(stderr, \"\\tKMS location: %s\\n\", KMS_URI);"
    },
    {
        "line": 855,
        "fullcodeline": "const char *start = textHdrs;"
    },
    {
        "line": 856,
        "fullcodeline": "fprintf(stderr, \"\\tOMA Textual Headers:\\n\");"
    },
    {
        "line": 857,
        "fullcodeline": "i=0;"
    },
    {
        "line": 858,
        "fullcodeline": "offset=0;"
    },
    {
        "line": 866,
        "fullcodeline": "fprintf(stderr, \"\\\\tt%s\\n\", start+offset);"
    },
    {
        "line": 871,
        "fullcodeline": "if (IV_size) fprintf(stderr, \"\\tInitialization Vector size: %d bits\\n\", IV_size*8);"
    },
    {
        "line": 872,
        "fullcodeline": "} else if(gf_isom_is_cenc_media(file, trackNum, 1)) {"
    },
    {
        "line": 918,
        "fullcodeline": "fprintf(stderr, \"\\tSwitchGroup ID %d criterias: \", switchGroupID);"
    },
    {
        "line": 924,
        "fullcodeline": "fprintf(stderr, \"%s\", gf_4cc_to_str(criterias[j]) );"
    },
    {
        "line": 985,
        "fullcodeline": "max_rate = max_tmp;"
    },
    {
        "line": 126,
        "fullcodeline": "|| (msub_type==GF_ISOM_SUBTYPE_MVC_H264)"
    },
    {
        "line": 145,
        "fullcodeline": "full_dump ? \"\\n\\t\" : \": \", st, esd->decoderConfig->objectTypeIndication);"
    },
    {
        "line": 147,
        "fullcodeline": "fprintf(stderr, \"MPEG-4 Config%sStream Type 0x%02x - ObjectTypeIndication 0x%02x\\n\","
    },
    {
        "line": 381,
        "fullcodeline": "Bool is_mp2 = GF_FALSE;"
    },
    {
        "line": 499,
        "fullcodeline": "if (!esd->OCRESID || (esd->OCRESID == esd->ESID))"
    },
    {
        "line": 507,
        "fullcodeline": "fprintf(stderr, \"\\tDepends on stream %d for decoding\\n\", esd->dependsOnESID);"
    },
    {
        "line": 512,
        "fullcodeline": "if (esd->URLString) fprintf(stderr, \"\\tRemote Data Source %s\\n\", esd->URLString);"
    },
    {
        "line": 544,
        "fullcodeline": "} else if (msub_type == GF_ISOM_SUBTYPE_MJP2) {"
    },
    {
        "line": 859,
        "fullcodeline": "while (i<hdr_len) {"
    },
    {
        "line": 877,
        "fullcodeline": "IV_size = 0;"
    },
    {
        "line": 878,
        "fullcodeline": "gf_isom_get_cenc_info(file, trackNum, 1, NULL, &scheme_type, &version);"
    },
    {
        "line": 880,
        "fullcodeline": "gf_isom_cenc_get_default_info(file, trackNum, 1, NULL, &IsEncrypted, &crypt_byte_block, &skip_byte_block, &def_key, &def_key_size);"
    },
    {
        "line": 882,
        "fullcodeline": "fprintf(stderr, \"\\n\\tProtected by CENC scheme %s version 0x%08X\", gf_4cc_to_str(scheme_type), version);"
    },
    {
        "line": 889,
        "fullcodeline": "fprintf(stderr, \"\\n\");"
    },
    {
        "line": 890,
        "fullcodeline": "dump_key_info(def_key, def_key_size, IsEncrypted);"
    },
    {
        "line": 920,
        "fullcodeline": "fprintf(stderr, \"\\tAlternate Group criterias: \");"
    },
    {
        "line": 125,
        "fullcodeline": "|| (msub_type==GF_ISOM_SUBTYPE_SVC_H264)"
    },
    {
        "line": 148,
        "fullcodeline": "full_dump ? \"\\n\\t\" : \": \", esd->decoderConfig->streamType, esd->decoderConfig->objectTypeIndication);"
    },
    {
        "line": 166,
        "fullcodeline": "M4_LOG(GF_LOG_WARNING, (\"Non-compliant MPEG-4 Visual track: video_object_layer infos not found in sample description\\n\"));"
    },
    {
        "line": 182,
        "fullcodeline": "} else if (gf_isom_get_avc_svc_type(file, trackNum, 1) != GF_ISOM_AVCTYPE_NONE) {"
    },
    {
        "line": 367,
        "fullcodeline": "if (full_dump) fprintf(stderr, \"\\t\");"
    },
    {
        "line": 500,
        "fullcodeline": "fprintf(stderr, \"Self-synchronized\\n\");"
    },
    {
        "line": 509,
        "fullcodeline": "fprintf(stderr, \"\\tNo stream dependencies for decoding\\n\");"
    },
    {
        "line": 546,
        "fullcodeline": "gf_isom_get_visual_info(file, trackNum, 1, &w, &h);"
    },
    {
        "line": 547,
        "fullcodeline": "fprintf(stderr, \"\\tMotionJPEG2000 stream - Resolution %d x %d\\n\", w, h);"
    },
    {
        "line": 864,
        "fullcodeline": "i++;"
    },
    {
        "line": 884,
        "fullcodeline": "if (crypt_byte_block && skip_byte_block)"
    },
    {
        "line": 886,
        "fullcodeline": "if (def_key && def_key[0])"
    },
    {
        "line": 923,
        "fullcodeline": "if (j) fprintf(stderr, \" \");"
    },
    {
        "line": 124,
        "fullcodeline": "|| (msub_type==GF_ISOM_SUBTYPE_AVC4_H264)"
    },
    {
        "line": 170,
        "fullcodeline": "gf_m4v_get_config(esd->decoderConfig->decoderSpecificInfo->data, esd->decoderConfig->decoderSpecificInfo->dataLength, &dsi);"
    },
    {
        "line": 172,
        "fullcodeline": "w = dsi.width;"
    },
    {
        "line": 173,
        "fullcodeline": "h = dsi.height;"
    },
    {
        "line": 174,
        "fullcodeline": "fprintf(stderr, \"MPEG-4 Visual Size %d x %d - %s\\n\", w, h, gf_m4v_get_profile_name(dsi.VideoPL));"
    },
    {
        "line": 185,
        "fullcodeline": "gf_isom_get_visual_info(file, trackNum, 1, &w, &h);"
    },
    {
        "line": 187,
        "fullcodeline": "fprintf(stderr, \"AVC/H264 Video - Visual Size %d x %d\\n\", w, h);"
    },
    {
        "line": 189,
        "fullcodeline": "avccfg = gf_isom_avc_config_get(file, trackNum, 1);"
    },
    {
        "line": 190,
        "fullcodeline": "svccfg = gf_isom_svc_config_get(file, trackNum, 1);"
    },
    {
        "line": 191,
        "fullcodeline": "mvccfg = gf_isom_mvc_config_get(file, trackNum, 1);"
    },
    {
        "line": 386,
        "fullcodeline": "is_mp2 = GF_TRUE;"
    },
    {
        "line": 445,
        "fullcodeline": "fprintf(stderr, \"EVRC Audio - Sample Rate 8000 - 1 channel\\n\");"
    },
    {
        "line": 448,
        "fullcodeline": "fprintf(stderr, \"SMV Audio - Sample Rate 8000 - 1 channel\\n\");"
    },
    {
        "line": 451,
        "fullcodeline": "fprintf(stderr, \"QCELP Audio - Sample Rate 8000 - 1 channel\\n\");"
    },
    {
        "line": 462,
        "fullcodeline": "codec_id = gf_codecid_from_oti(GF_STREAM_AUDIO, esd->decoderConfig->objectTypeIndication);"
    },
    {
        "line": 469,
        "fullcodeline": "else if (esd->decoderConfig->streamType==GF_STREAM_SCENE) {"
    },
    {
        "line": 502,
        "fullcodeline": "fprintf(stderr, \"Synchronized on stream %d\\n\", esd->OCRESID);"
    },
    {
        "line": 860,
        "fullcodeline": "if (start[i]==0) {"
    },
    {
        "line": 885,
        "fullcodeline": "fprintf(stderr, \" - Pattern %d:%d\", (u32) skip_byte_block, (u32) crypt_byte_block);"
    },
    {
        "line": 887,
        "fullcodeline": "fprintf(stderr, \" - MultiKey\");"
    },
    {
        "line": 892,
        "fullcodeline": "} else if(gf_isom_is_adobe_protection_media(file, trackNum, 1)) {"
    },
    {
        "line": 123,
        "fullcodeline": "|| (msub_type==GF_ISOM_SUBTYPE_AVC3_H264)"
    },
    {
        "line": 175,
        "fullcodeline": "if (dsi.par_den && dsi.par_num) {"
    },
    {
        "line": 192,
        "fullcodeline": "if (!avccfg && !svccfg && !mvccfg) {"
    },
    {
        "line": 421,
        "fullcodeline": "if (msub_type == GF_ISOM_SUBTYPE_MPEG4_CRYP) {"
    },
    {
        "line": 455,
        "fullcodeline": "if (esd->decoderConfig->decoderSpecificInfo && (esd->decoderConfig->decoderSpecificInfo->dataLength==8)"
    },
    {
        "line": 548,
        "fullcodeline": "} else if ((msub_type == GF_ISOM_SUBTYPE_3GP_AMR) || (msub_type == GF_ISOM_SUBTYPE_3GP_AMR_WB)) {"
    },
    {
        "line": 861,
        "fullcodeline": "fprintf(stderr, \"\\t\\t%s\\n\", start+offset);"
    },
    {
        "line": 862,
        "fullcodeline": "offset=i+1;"
    },
    {
        "line": 893,
        "fullcodeline": "gf_isom_get_adobe_protection_info(file, trackNum, 1, NULL, &scheme_type, &version, NULL);"
    },
    {
        "line": 894,
        "fullcodeline": "fprintf(stderr, \"\\nProtected by Adobe scheme %s (version %d)\\n\", gf_4cc_to_str(scheme_type), version);"
    },
    {
        "line": 122,
        "fullcodeline": "|| (msub_type==GF_ISOM_SUBTYPE_AVC2_H264)"
    },
    {
        "line": 171,
        "fullcodeline": "if (full_dump) fprintf(stderr, \"\\t\");"
    },
    {
        "line": 177,
        "fullcodeline": "gf_isom_get_track_layout_info(file, trackNum, &tw, &th, NULL, NULL, NULL);"
    },
    {
        "line": 178,
        "fullcodeline": "fprintf(stderr, \"Pixel Aspect Ratio %d:%d - Indicated track size %d x %d\\n\", dsi.par_num, dsi.par_den, tw, th);"
    },
    {
        "line": 186,
        "fullcodeline": "if (full_dump) fprintf(stderr, \"\\t\");"
    },
    {
        "line": 193,
        "fullcodeline": "M4_LOG(GF_LOG_ERROR, (\"\\tNon-compliant AVC track: SPS/PPS not found in sample description\\n\"));"
    },
    {
        "line": 223,
        "fullcodeline": "fprintf(stderr, \"\\n\\tSVC Info: %d SPS - %d PPS - Profile %s @ Level %g\\n\", gf_list_count(svccfg->sequenceParameterSets) , gf_list_count(svccfg->pictureParameterSets), gf_avc_get_profile_name(svccfg->AVCProfileIndication), ((Double)svccfg->AVCLevelIndication)/10.0 );"
    },
    {
        "line": 224,
        "fullcodeline": "fprintf(stderr, \"\\tSVC NAL Unit length bits: %d\\n\", 8*svccfg->nal_unit_size);"
    },
    {
        "line": 241,
        "fullcodeline": "print_config_hash(svccfg->sequenceParameterSets, \"SPS\");"
    },
    {
        "line": 242,
        "fullcodeline": "print_config_hash(svccfg->pictureParameterSets, \"PPS\");"
    },
    {
        "line": 243,
        "fullcodeline": "print_config_hash(svccfg->sequenceParameterSetExtensions, \"SPSEx\");"
    },
    {
        "line": 245,
        "fullcodeline": "gf_odf_avc_cfg_del(svccfg);"
    },
    {
        "line": 249,
        "fullcodeline": "fprintf(stderr, \"\\n\\tMVC Info: %d SPS - %d PPS - Profile %s @ Level %g\\n\", gf_list_count(mvccfg->sequenceParameterSets) , gf_list_count(mvccfg->pictureParameterSets), gf_avc_get_profile_name(mvccfg->AVCProfileIndication), ((Double)mvccfg->AVCLevelIndication)/10.0 );"
    },
    {
        "line": 250,
        "fullcodeline": "fprintf(stderr, \"\\tMVC NAL Unit length bits: %d\\n\", 8*mvccfg->nal_unit_size);"
    },
    {
        "line": 267,
        "fullcodeline": "print_config_hash(mvccfg->sequenceParameterSets, \"SPS\");"
    },
    {
        "line": 268,
        "fullcodeline": "print_config_hash(mvccfg->pictureParameterSets, \"PPS\");"
    },
    {
        "line": 269,
        "fullcodeline": "gf_odf_avc_cfg_del(mvccfg);"
    },
    {
        "line": 272,
        "fullcodeline": "} else if ((esd->decoderConfig->objectTypeIndication==GF_CODECID_HEVC)"
    },
    {
        "line": 390,
        "fullcodeline": "e = GF_NON_COMPLIANT_BITSTREAM;"
    },
    {
        "line": 393,
        "fullcodeline": "if (full_dump) fprintf(stderr, \"\\t\");"
    },
    {
        "line": 395,
        "fullcodeline": "M4_LOG(GF_LOG_ERROR, (\"Corrupted AAC Config\\n\"));"
    },
    {
        "line": 422,
        "fullcodeline": "fprintf(stderr, \"MPEG-1/2 Audio - %d Channels - SampleRate %d\\n\", nb_ch, sr);"
    },
    {
        "line": 456,
        "fullcodeline": "&& !strnicmp((char *)esd->decoderConfig->decoderSpecificInfo->data, \"pvmm\", 4)) {"
    },
    {
        "line": 458,
        "fullcodeline": "fprintf(stderr, \"EVRC Audio (PacketVideo Mux) - Sample Rate 8000 - 1 channel\\n\");"
    },
    {
        "line": 464,
        "fullcodeline": "fprintf(stderr, \"%s - Sample Rate %d - %d channel(s)\\n\", gf_codecid_name(codec_id), sr, nb_ch);"
    },
    {
        "line": 470,
        "fullcodeline": "if (esd->decoderConfig->objectTypeIndication<=4) {"
    },
    {
        "line": 549,
        "fullcodeline": "fprintf(stderr, \"\\t3GPP AMR%s stream - Sample Rate %d - %d channel(s) %d bps\\n\", (msub_type == GF_ISOM_SUBTYPE_3GP_AMR_WB) ? \" Wide Band\" : \"\", sr, nb_ch, (u32) bps);"
    },
    {
        "line": 896,
        "fullcodeline": "fprintf(stderr, \"\\nProtected by unknown scheme %s\\n\", gf_4cc_to_str(gf_isom_is_media_encrypted(file, trackNum, 0) ));"
    },
    {
        "line": 121,
        "fullcodeline": "|| (msub_type==GF_ISOM_SUBTYPE_AVC_H264)"
    },
    {
        "line": 226,
        "fullcodeline": "for (i=0; i<gf_list_count(svccfg->sequenceParameterSets); i++) {"
    },
    {
        "line": 252,
        "fullcodeline": "for (i=0; i<gf_list_count(mvccfg->sequenceParameterSets); i++) {"
    },
    {
        "line": 273,
        "fullcodeline": "|| (esd->decoderConfig->objectTypeIndication==GF_CODECID_LHVC)"
    },
    {
        "line": 279,
        "fullcodeline": "memset(&hevc_state, 0, sizeof(HEVCState));"
    },
    {
        "line": 280,
        "fullcodeline": "hevc_state.sps_active_idx = -1;"
    },
    {
        "line": 283,
        "fullcodeline": "gf_isom_get_visual_info(file, trackNum, 1, &w, &h);"
    },
    {
        "line": 285,
        "fullcodeline": "fprintf(stderr, \"HEVC Video - Visual Size %d x %d\\n\", w, h);"
    },
    {
        "line": 286,
        "fullcodeline": "hevccfg = gf_isom_hevc_config_get(file, trackNum, 1);"
    },
    {
        "line": 287,
        "fullcodeline": "lhvccfg = gf_isom_lhvc_config_get(file, trackNum, 1);"
    },
    {
        "line": 392,
        "fullcodeline": "e = gf_m4a_get_config(esd->decoderConfig->decoderSpecificInfo->data, esd->decoderConfig->decoderSpecificInfo->dataLength, &a_cfg);"
    },
    {
        "line": 397,
        "fullcodeline": "char *signaling = \"implicit\";"
    },
    {
        "line": 398,
        "fullcodeline": "char *heaac = \"\";"
    },
    {
        "line": 409,
        "fullcodeline": "fprintf(stderr, \"%s (AOT=%d %s) %s- %d Channel(s) - SampleRate %d\", gf_m4a_object_type_name(a_cfg.base_object_type), a_cfg.base_object_type, signaling, heaac, a_cfg.nb_chan, a_cfg.base_sr);"
    },
    {
        "line": 413,
        "fullcodeline": "fprintf(stderr, \"\\n\");"
    },
    {
        "line": 425,
        "fullcodeline": "GF_ISOSample *samp = gf_isom_get_sample(file, trackNum, 1, &oti);"
    },
    {
        "line": 471,
        "fullcodeline": "GF_BIFSConfig *b_cfg = gf_odf_get_bifs_config(esd->decoderConfig->decoderSpecificInfo, esd->decoderConfig->objectTypeIndication);"
    },
    {
        "line": 472,
        "fullcodeline": "fprintf(stderr, \"BIFS Scene description - %s stream\\n\", b_cfg->elementaryMasks ? \"Animation\" : \"Command\");"
    },
    {
        "line": 476,
        "fullcodeline": "gf_odf_desc_del((GF_Descriptor *)b_cfg);"
    },
    {
        "line": 227,
        "fullcodeline": "GF_NALUFFParam *slc = gf_list_get(svccfg->sequenceParameterSets, i);"
    },
    {
        "line": 253,
        "fullcodeline": "GF_NALUFFParam *slc = gf_list_get(mvccfg->sequenceParameterSets, i);"
    },
    {
        "line": 289,
        "fullcodeline": "if (msub_type==GF_ISOM_SUBTYPE_HVT1) {"
    },
    {
        "line": 305,
        "fullcodeline": "if (gf_isom_get_reference_count(file, trackNum, GF_ISOM_REF_SABT)) {"
    },
    {
        "line": 326,
        "fullcodeline": "if (gf_isom_get_oinf_info(file, trackNum, &oinf)) {"
    },
    {
        "line": 399,
        "fullcodeline": "if (!is_mp2 && a_cfg.has_sbr) {"
    },
    {
        "line": 403,
        "fullcodeline": "if (a_cfg.base_object_type==2) {"
    },
    {
        "line": 457,
        "fullcodeline": "if (full_dump) fprintf(stderr, \"\\t\");"
    },
    {
        "line": 473,
        "fullcodeline": "if (full_dump && !b_cfg->elementaryMasks) {"
    },
    {
        "line": 550,
        "fullcodeline": "} else if (msub_type == GF_ISOM_SUBTYPE_3GP_EVRC) {"
    },
    {
        "line": 195,
        "fullcodeline": "fprintf(stderr, \"\\tAVC Info: %d SPS - %d PPS\", gf_list_count(avccfg->sequenceParameterSets) , gf_list_count(avccfg->pictureParameterSets) );"
    },
    {
        "line": 196,
        "fullcodeline": "fprintf(stderr, \" - Profile %s @ Level %g\\n\", gf_avc_get_profile_name(avccfg->AVCProfileIndication), ((Double)avccfg->AVCLevelIndication)/10.0 );"
    },
    {
        "line": 197,
        "fullcodeline": "fprintf(stderr, \"\\tNAL Unit length bits: %d\\n\", 8*avccfg->nal_unit_size);"
    },
    {
        "line": 217,
        "fullcodeline": "print_config_hash(avccfg->sequenceParameterSets, \"SPS\");"
    },
    {
        "line": 218,
        "fullcodeline": "print_config_hash(avccfg->pictureParameterSets, \"PPS\");"
    },
    {
        "line": 220,
        "fullcodeline": "gf_odf_avc_cfg_del(avccfg);"
    },
    {
        "line": 284,
        "fullcodeline": "if (full_dump) fprintf(stderr, \"\\t\");"
    },
    {
        "line": 306,
        "fullcodeline": "fprintf(stderr, \"\\tHEVC Tile base track\\n\");"
    },
    {
        "line": 309,
        "fullcodeline": "dump_hevc_track_info(file, trackNum, hevccfg"
    },
    {
        "line": 314,
        "fullcodeline": "gf_odf_hevc_cfg_del(hevccfg);"
    },
    {
        "line": 315,
        "fullcodeline": "fprintf(stderr, \"\\n\");"
    },
    {
        "line": 318,
        "fullcodeline": "dump_hevc_track_info(file, trackNum, lhvccfg"
    },
    {
        "line": 323,
        "fullcodeline": "gf_odf_hevc_cfg_del(lhvccfg);"
    },
    {
        "line": 327,
        "fullcodeline": "fprintf(stderr, \"\\n\\tOperating Points Information -\");"
    },
    {
        "line": 328,
        "fullcodeline": "fprintf(stderr, \" scalability_mask %d (\", oinf->scalability_mask);"
    },
    {
        "line": 343,
        "fullcodeline": "fprintf(stderr, \") num_profile_tier_level %d \", gf_list_count(oinf->profile_tier_levels) );"
    },
    {
        "line": 344,
        "fullcodeline": "fprintf(stderr, \" num_operating_points %d dependency layers %d \\n\", gf_list_count(oinf->operating_points), gf_list_count(oinf->dependency_layers) );"
    },
    {
        "line": 349,
        "fullcodeline": "else if (esd->decoderConfig->objectTypeIndication==GF_CODECID_THEORA) {"
    },
    {
        "line": 410,
        "fullcodeline": "if (is_mp2) fprintf(stderr, \" (MPEG-2 Signaling)\");"
    },
    {
        "line": 411,
        "fullcodeline": "if (a_cfg.has_sbr) fprintf(stderr, \" - SBR: SampleRate %d Type %s\", a_cfg.sbr_sr, gf_m4a_object_type_name(a_cfg.sbr_object_type));"
    },
    {
        "line": 412,
        "fullcodeline": "if (a_cfg.has_ps) fprintf(stderr, \" - PS\");"
    },
    {
        "line": 427,
        "fullcodeline": "u32 mhdr = GF_4CC((u8)samp->data[0], (u8)samp->data[1], (u8)samp->data[2], (u8)samp->data[3]);"
    },
    {
        "line": 429,
        "fullcodeline": "fprintf(stderr, \"%s Audio - %d Channel(s) - SampleRate %d - Layer %d\\n\","
    },
    {
        "line": 435,
        "fullcodeline": "gf_isom_sample_del(&samp);"
    },
    {
        "line": 474,
        "fullcodeline": "fprintf(stderr, \"\\tWidth %d Height %d Pixel Metrics %s\\n\", b_cfg->pixelWidth, b_cfg->pixelHeight, b_cfg->pixelMetrics ? \"yes\" : \"no\");"
    },
    {
        "line": 477,
        "fullcodeline": "} else if (esd->decoderConfig->objectTypeIndication==GF_CODECID_AFX) {"
    },
    {
        "line": 551,
        "fullcodeline": "fprintf(stderr, \"\\t3GPP EVRC stream - Sample Rate %d - %d channel(s) %d bps\\n\", sr, nb_ch, (u32) bps);"
    },
    {
        "line": 200,
        "fullcodeline": "for (i=0; i<gf_list_count(avccfg->sequenceParameterSets); i++) {"
    },
    {
        "line": 231,
        "fullcodeline": "gf_avc_get_sps_info(slc->data, slc->size, &sps_id, &s_w, &s_h, &par_n, &par_d);"
    },
    {
        "line": 232,
        "fullcodeline": "fprintf(stderr, \"\\t\\tSPS ID %d - Visual Size %d x %d\\n\", sps_id, s_w, s_h);"
    },
    {
        "line": 257,
        "fullcodeline": "gf_avc_get_sps_info(slc->data, slc->size, &sps_id, &s_w, &s_h, &par_n, &par_d);"
    },
    {
        "line": 258,
        "fullcodeline": "fprintf(stderr, \"\\t\\tSPS ID %d - Visual Size %d x %d\\n\", sps_id, s_w, s_h);"
    },
    {
        "line": 294,
        "fullcodeline": "if (gf_isom_get_tile_info(file, trackNum, 1, &is_default, &id, &independent, &full_frame, &tx, &ty, &tw, &th)) {"
    },
    {
        "line": 351,
        "fullcodeline": "gf_isom_get_visual_info(file, trackNum, 1, &w, &h);"
    },
    {
        "line": 355,
        "fullcodeline": "fprintf(stderr, \"Ogg/%s video / GPAC Mux  - Visual Size %d x %d\\n\", szName, w, h);"
    },
    {
        "line": 404,
        "fullcodeline": "if (a_cfg.has_ps || a_cfg.has_sbr)"
    },
    {
        "line": 407,
        "fullcodeline": "signaling = \"hierarchical\";"
    },
    {
        "line": 430,
        "fullcodeline": "gf_mp3_version_name(mhdr),"
    },
    {
        "line": 431,
        "fullcodeline": "gf_mp3_num_channels(mhdr),"
    },
    {
        "line": 432,
        "fullcodeline": "gf_mp3_sampling_rate(mhdr),"
    },
    {
        "line": 433,
        "fullcodeline": "gf_mp3_layer(mhdr)"
    },
    {
        "line": 437,
        "fullcodeline": "M4_LOG(GF_LOG_ERROR, (\"Error fetching sample: %s\\n\", gf_error_to_string(gf_isom_last_error(file)) ));"
    },
    {
        "line": 478,
        "fullcodeline": "u8 tag = esd->decoderConfig->decoderSpecificInfo ? esd->decoderConfig->decoderSpecificInfo->data[0] : 0xFF;"
    },
    {
        "line": 479,
        "fullcodeline": "const char *afxtype = gf_stream_type_afx_name(tag);"
    },
    {
        "line": 480,
        "fullcodeline": "fprintf(stderr, \"AFX Stream - type %s (%d)\\n\", afxtype, tag);"
    },
    {
        "line": 202,
        "fullcodeline": "GF_NALUFFParam *slc = gf_list_get(avccfg->sequenceParameterSets, i);"
    },
    {
        "line": 203,
        "fullcodeline": "gf_avc_get_sps_info(slc->data, slc->size, NULL, NULL, NULL, &par_n, &par_d);"
    },
    {
        "line": 214,
        "fullcodeline": "fprintf(stderr, \"\\tChroma format %s - Luma bit depth %d - chroma bit depth %d\\n\", gf_avc_hevc_get_chroma_format_name(avccfg->chroma_format), avccfg->luma_bit_depth, avccfg->chroma_bit_depth);"
    },
    {
        "line": 233,
        "fullcodeline": "if ((par_n>0) && (par_d>0)) {"
    },
    {
        "line": 259,
        "fullcodeline": "if ((par_n>0) && (par_d>0)) {"
    },
    {
        "line": 295,
        "fullcodeline": "fprintf(stderr, \"\\tHEVC Tile - ID %d independent %d (x,y,w,h)=%d,%d,%d,%d \\n\", id, independent, tx, ty, tw, th);"
    },
    {
        "line": 301,
        "fullcodeline": "} else if (!hevccfg && !lhvccfg) {"
    },
    {
        "line": 331,
        "fullcodeline": "fprintf(stderr, \"Multiview\");"
    },
    {
        "line": 334,
        "fullcodeline": "fprintf(stderr, \"Spatial scalability\");"
    },
    {
        "line": 337,
        "fullcodeline": "fprintf(stderr, \"Auxilary\");"
    },
    {
        "line": 340,
        "fullcodeline": "fprintf(stderr, \"unknown\");"
    },
    {
        "line": 353,
        "fullcodeline": "if (!strnicmp((char *) &esd->decoderConfig->decoderSpecificInfo->data[3], \"theora\", 6)) szName = \"Theora\";"
    },
    {
        "line": 359,
        "fullcodeline": "u32 codec_id = gf_codecid_from_oti(GF_STREAM_VISUAL, esd->decoderConfig->objectTypeIndication);"
    },
    {
        "line": 400,
        "fullcodeline": "if (a_cfg.has_ps) heaac = \"(HE-AAC v2) \";"
    },
    {
        "line": 405,
        "fullcodeline": "signaling = \"backward compatible\";"
    },
    {
        "line": 428,
        "fullcodeline": "if (full_dump) fprintf(stderr, \"\\t\");"
    },
    {
        "line": 552,
        "fullcodeline": "} else if (msub_type == GF_ISOM_SUBTYPE_3GP_QCELP) {"
    },
    {
        "line": 204,
        "fullcodeline": "if ((par_n>0) && (par_d>0)) {"
    },
    {
        "line": 209,
        "fullcodeline": "if (!full_dump) break;"
    },
    {
        "line": 235,
        "fullcodeline": "gf_isom_get_track_layout_info(file, trackNum, &tw, &th, NULL, NULL, NULL);"
    },
    {
        "line": 236,
        "fullcodeline": "fprintf(stderr, \"\\tPixel Aspect Ratio %d:%d - Indicated track size %d x %d\\n\", par_n, par_d, tw, th);"
    },
    {
        "line": 261,
        "fullcodeline": "gf_isom_get_track_layout_info(file, trackNum, &tw, &th, NULL, NULL, NULL);"
    },
    {
        "line": 262,
        "fullcodeline": "fprintf(stderr, \"\\tPixel Aspect Ratio %d:%d - Indicated track size %d x %d\\n\", par_n, par_d, tw, th);"
    },
    {
        "line": 302,
        "fullcodeline": "M4_LOG(GF_LOG_ERROR, (\"\\tNon-compliant HEVC track: No hvcC or shcC found in sample description\\n\"));"
    },
    {
        "line": 352,
        "fullcodeline": "if (full_dump) fprintf(stderr, \"\\t\");"
    },
    {
        "line": 401,
        "fullcodeline": "else heaac = \"(HE-AAC v1) \";"
    },
    {
        "line": 481,
        "fullcodeline": "} else if (esd->decoderConfig->objectTypeIndication==GF_CODECID_FONT) {"
    },
    {
        "line": 553,
        "fullcodeline": "fprintf(stderr, \"\\t3GPP QCELP stream - Sample Rate %d - %d channel(s) %d bps\\n\", sr, nb_ch, (u32) bps);"
    },
    {
        "line": 206,
        "fullcodeline": "gf_isom_get_track_layout_info(file, trackNum, &tw, &th, NULL, NULL, NULL);"
    },
    {
        "line": 207,
        "fullcodeline": "fprintf(stderr, \"\\tPixel Aspect Ratio %d:%d - Indicated track size %d x %d\\n\", par_n, par_d, tw, th);"
    },
    {
        "line": 296,
        "fullcodeline": "} else if (gf_isom_get_sample_group_info(file, trackNum, 1, GF_ISOM_SAMPLE_GROUP_TRIF, &is_default, &data, &tsize)) {"
    },
    {
        "line": 354,
        "fullcodeline": "else szName = \"Unknown\";"
    },
    {
        "line": 361,
        "fullcodeline": "gf_isom_get_visual_info(file, trackNum, 1, &w, &h);"
    },
    {
        "line": 362,
        "fullcodeline": "fprintf(stderr, \"%s - Visual Size %d x %d\\n\", gf_codecid_name(codec_id), w, h);"
    },
    {
        "line": 482,
        "fullcodeline": "fprintf(stderr, \"Font Data stream\\n\");"
    },
    {
        "line": 297,
        "fullcodeline": "fprintf(stderr, \"\\tHEVC Tile track containing a tile set\\n\");"
    },
    {
        "line": 554,
        "fullcodeline": "} else if (msub_type == GF_ISOM_SUBTYPE_MP3) {"
    },
    {
        "line": 299,
        "fullcodeline": "fprintf(stderr, \"\\tHEVC Tile track without tiling info\\n\");"
    },
    {
        "line": 483,
        "fullcodeline": "} else if (esd->decoderConfig->objectTypeIndication==GF_CODECID_LASER) {"
    },
    {
        "line": 555,
        "fullcodeline": "fprintf(stderr, \"\\tMPEG 1/2 Audio stream - Sample Rate %d - %d channel(s) %d bps\\n\", sr, nb_ch, (u32) bps);"
    },
    {
        "line": 485,
        "fullcodeline": "gf_odf_get_laser_config(esd->decoderConfig->decoderSpecificInfo, &l_cfg);"
    },
    {
        "line": 486,
        "fullcodeline": "fprintf(stderr, \"LASER Stream - %s\\n\", l_cfg.newSceneIndicator ? \"Full Scene\" : \"Scene Segment\");"
    },
    {
        "line": 556,
        "fullcodeline": "} else if ((msub_type == GF_ISOM_SUBTYPE_AC3) || (msub_type == GF_ISOM_SUBTYPE_EC3)) {"
    },
    {
        "line": 487,
        "fullcodeline": "} else if (esd->decoderConfig->objectTypeIndication==GF_CODECID_TEXT_MPEG4) {"
    },
    {
        "line": 557,
        "fullcodeline": "u32 br = 0;"
    },
    {
        "line": 558,
        "fullcodeline": "const char *lfe = \"\";"
    },
    {
        "line": 559,
        "fullcodeline": "Bool is_ec3 = (msub_type == GF_ISOM_SUBTYPE_EC3) ? GF_TRUE : GF_FALSE;"
    },
    {
        "line": 561,
        "fullcodeline": "GF_AC3Config *ac3 = gf_isom_ac3_config_get(file, trackNum, 1);"
    },
    {
        "line": 574,
        "fullcodeline": "fprintf(stderr, \"\\t%s stream - Sample Rate %d - %d%s channel(s) - bitrate %d\\n\", is_ec3 ? \"EC-3\" : \"AC-3\", sr, nb_ch, lfe, br);"
    },
    {
        "line": 488,
        "fullcodeline": "fprintf(stderr, \"MPEG-4 Streaming Text stream\\n\");"
    },
    {
        "line": 563,
        "fullcodeline": "nb_ch = gf_ac3_get_channels(ac3->streams[0].acmod);"
    },
    {
        "line": 569,
        "fullcodeline": "br = ac3->is_ec3 ? ac3->brcode : gf_ac3_get_bitrate(ac3->brcode);"
    },
    {
        "line": 570,
        "fullcodeline": "is_ec3 = ac3->is_ec3;"
    },
    {
        "line": 571,
        "fullcodeline": "gf_free(ac3);"
    },
    {
        "line": 575,
        "fullcodeline": "} else if (msub_type == GF_ISOM_SUBTYPE_3GP_SMV) {"
    },
    {
        "line": 489,
        "fullcodeline": "} else if (esd->decoderConfig->objectTypeIndication==GF_CODECID_SYNTHESIZED_TEXTURE) {"
    },
    {
        "line": 564,
        "fullcodeline": "for (i=0; i<ac3->streams[0].nb_dep_sub; ++i) {"
    },
    {
        "line": 576,
        "fullcodeline": "fprintf(stderr, \"\\t3GPP SMV stream - Sample Rate %d - %d channel(s) %d bits per samples\\n\", sr, nb_ch, (u32) bps);"
    },
    {
        "line": 490,
        "fullcodeline": "fprintf(stderr, \"Synthetized Texture stream stream\\n\");"
    },
    {
        "line": 565,
        "fullcodeline": "assert(ac3->streams[0].nb_dep_sub == 1);"
    },
    {
        "line": 566,
        "fullcodeline": "nb_ch += gf_ac3_get_channels(ac3->streams[0].chan_loc);"
    },
    {
        "line": 568,
        "fullcodeline": "if (ac3->streams[0].lfon) lfe = \".1\";"
    },
    {
        "line": 492,
        "fullcodeline": "M4_LOG(GF_LOG_WARNING, (\"Unknown Systems stream OTI %d\\n\", esd->decoderConfig->objectTypeIndication));"
    },
    {
        "line": 577,
        "fullcodeline": "} else if (msub_type == GF_ISOM_SUBTYPE_3GP_DIMS) {"
    },
    {
        "line": 580,
        "fullcodeline": "gf_isom_get_visual_info(file, trackNum, 1, &w, &h);"
    },
    {
        "line": 582,
        "fullcodeline": "gf_isom_get_dims_description(file, trackNum, 1, &dims);"
    },
    {
        "line": 583,
        "fullcodeline": "fprintf(stderr, \"\\t3GPP DIMS stream - size %d x %d - Profile %d - Level %d\\n\", w, h, dims.profile, dims.level);"
    },
    {
        "line": 584,
        "fullcodeline": "fprintf(stderr, \"\\tpathComponents: %d - useFullRequestHost: %s\\n\", dims.pathComponents, dims.fullRequestHost ? \"yes\" : \"no\");"
    },
    {
        "line": 585,
        "fullcodeline": "fprintf(stderr, \"\\tstream type: %s - redundant: %s\\n\", dims.streamType ? \"primary\" : \"secondary\", (dims.containsRedundant==1) ? \"main\" : ((dims.containsRedundant==2) ? \"redundant\" : \"main+redundant\") );"
    },
    {
        "line": 586,
        "fullcodeline": "if (dims.textEncoding[0]) fprintf(stderr, \"\\ttext encoding %s\\n\", dims.textEncoding);"
    },
    {
        "line": 587,
        "fullcodeline": "if (dims.contentEncoding[0]) fprintf(stderr, \"\\tcontent encoding %s\\n\", dims.contentEncoding);"
    },
    {
        "line": 588,
        "fullcodeline": "if (dims.content_script_types) fprintf(stderr, \"\\tscript languages %s\\n\", dims.content_script_types);"
    },
    {
        "line": 589,
        "fullcodeline": "} else if (mtype==GF_ISOM_MEDIA_HINT) {"
    },
    {
        "line": 591,
        "fullcodeline": "s32 refCount = gf_isom_get_reference_count(file, trackNum, GF_ISOM_REF_HINT);"
    },
    {
        "line": 604,
        "fullcodeline": "refCount = gf_isom_get_payt_count(file, trackNum);"
    },
    {
        "line": 592,
        "fullcodeline": "if (refCount>0) {"
    },
    {
        "line": 605,
        "fullcodeline": "if (refCount>0) {"
    },
    {
        "line": 593,
        "fullcodeline": "fprintf(stderr, \"Streaming Hint Track for track%s \", (refCount>1) ? \"s\" :\"\");"
    },
    {
        "line": 599,
        "fullcodeline": "fprintf(stderr, \"\\n\");"
    },
    {
        "line": 612,
        "fullcodeline": "} else if (mtype==GF_ISOM_MEDIA_FLASH) {"
    },
    {
        "line": 594,
        "fullcodeline": "for (i=0; i<(u32) refCount; i++) {"
    },
    {
        "line": 601,
        "fullcodeline": "fprintf(stderr, \"Streaming Hint Track (no refs)\\n\");"
    },
    {
        "line": 606,
        "fullcodeline": "for (i=0; i<(u32) refCount; i++) {"
    },
    {
        "line": 613,
        "fullcodeline": "fprintf(stderr, \"Macromedia Flash Movie\\n\");"
    },
    {
        "line": 595,
        "fullcodeline": "gf_isom_get_reference(file, trackNum, GF_ISOM_REF_HINT, i+1, &refTrack);"
    },
    {
        "line": 597,
        "fullcodeline": "fprintf(stderr, \"ID %d\", gf_isom_get_track_id(file, refTrack));"
    },
    {
        "line": 607,
        "fullcodeline": "const char *name = gf_isom_get_payt_info(file, trackNum, i+1, &refTrack);"
    },
    {
        "line": 608,
        "fullcodeline": "fprintf(stderr, \"\\tPayload ID %d: type %s\\n\", refTrack, name);"
    },
    {
        "line": 614,
        "fullcodeline": "} else if ((mtype==GF_ISOM_MEDIA_TEXT) || (mtype==GF_ISOM_MEDIA_SUBT) || (mtype==GF_ISOM_MEDIA_MPEG_SUBT)) {"
    },
    {
        "line": 596,
        "fullcodeline": "if (i) fprintf(stderr, \" - \");"
    },
    {
        "line": 618,
        "fullcodeline": "const char *content_encoding = NULL;"
    },
    {
        "line": 619,
        "fullcodeline": "const char *mime = NULL;"
    },
    {
        "line": 620,
        "fullcodeline": "const char *config  = NULL;"
    },
    {
        "line": 621,
        "fullcodeline": "const char *_namespace = NULL;"
    },
    {
        "line": 622,
        "fullcodeline": "const char *schema_loc = NULL;"
    },
    {
        "line": 623,
        "fullcodeline": "const char *auxiliary_mimes = NULL;"
    },
    {
        "line": 624,
        "fullcodeline": "gf_isom_get_track_layout_info(file, trackNum, &w, &h, &tx, &ty, &l);"
    },
    {
        "line": 658,
        "fullcodeline": "fprintf(stderr, \"\\n Size %d x %d - Translation X=%d Y=%d - Layer %d\\n\", w, h, tx, ty, l);"
    },
    {
        "line": 625,
        "fullcodeline": "if (msub_type == GF_ISOM_SUBTYPE_SBTT) {"
    },
    {
        "line": 626,
        "fullcodeline": "gf_isom_stxt_get_description(file, trackNum, 1, &mime, &content_encoding, &config);"
    },
    {
        "line": 627,
        "fullcodeline": "fprintf(stderr, \"Textual Subtitle Stream \");"
    },
    {
        "line": 628,
        "fullcodeline": "fprintf(stderr, \"- mime %s\", mime);"
    },
    {
        "line": 659,
        "fullcodeline": "} else if (mtype == GF_ISOM_MEDIA_META) {"
    },
    {
        "line": 629,
        "fullcodeline": "if (content_encoding != NULL) {"
    },
    {
        "line": 632,
        "fullcodeline": "if (config != NULL) {"
    },
    {
        "line": 660,
        "fullcodeline": "const char *content_encoding = NULL;"
    },
    {
        "line": 630,
        "fullcodeline": "fprintf(stderr, \" - encoding %s\", content_encoding);"
    },
    {
        "line": 633,
        "fullcodeline": "fprintf(stderr, \" - %d bytes config\", (u32) strlen(config));"
    },
    {
        "line": 635,
        "fullcodeline": "} else if (msub_type == GF_ISOM_SUBTYPE_STXT) {"
    },
    {
        "line": 661,
        "fullcodeline": "if (msub_type == GF_ISOM_SUBTYPE_METT) {"
    },
    {
        "line": 636,
        "fullcodeline": "gf_isom_stxt_get_description(file, trackNum, 1, &mime, &content_encoding, &config);"
    },
    {
        "line": 637,
        "fullcodeline": "fprintf(stderr, \"Simple Timed Text Stream \");"
    },
    {
        "line": 638,
        "fullcodeline": "fprintf(stderr, \"- mime %s\", mime);"
    },
    {
        "line": 662,
        "fullcodeline": "const char *mime = NULL;"
    },
    {
        "line": 663,
        "fullcodeline": "const char *config  = NULL;"
    },
    {
        "line": 664,
        "fullcodeline": "gf_isom_stxt_get_description(file, trackNum, 1, &mime, &content_encoding, &config);"
    },
    {
        "line": 665,
        "fullcodeline": "fprintf(stderr, \"Textual Metadata Stream - mime %s\", mime);"
    },
    {
        "line": 672,
        "fullcodeline": "fprintf(stderr, \"\\n\");"
    },
    {
        "line": 688,
        "fullcodeline": "} else if ((msub_type==GF_ISOM_SUBTYPE_VVC1) || (msub_type==GF_ISOM_SUBTYPE_VVI1)) {"
    },
    {
        "line": 639,
        "fullcodeline": "if (content_encoding != NULL) {"
    },
    {
        "line": 642,
        "fullcodeline": "if (config != NULL) {"
    },
    {
        "line": 666,
        "fullcodeline": "if (content_encoding != NULL) {"
    },
    {
        "line": 669,
        "fullcodeline": "if (config != NULL) {"
    },
    {
        "line": 693,
        "fullcodeline": "GF_SAFEALLOC(vvc_state, VVCState);"
    },
    {
        "line": 697,
        "fullcodeline": "gf_isom_get_visual_info(file, trackNum, 1, &w, &h);"
    },
    {
        "line": 699,
        "fullcodeline": "fprintf(stderr, \"VVC Video - Visual Size %d x %d\\n\", w, h);"
    },
    {
        "line": 700,
        "fullcodeline": "vvccfg = gf_isom_vvc_config_get(file, trackNum, 1);"
    },
    {
        "line": 640,
        "fullcodeline": "fprintf(stderr, \" - encoding %s\", content_encoding);"
    },
    {
        "line": 643,
        "fullcodeline": "fprintf(stderr, \" - %d bytes config\", (u32) strlen(config));"
    },
    {
        "line": 645,
        "fullcodeline": "} else if (msub_type == GF_ISOM_SUBTYPE_STPP) {"
    },
    {
        "line": 667,
        "fullcodeline": "fprintf(stderr, \" - encoding %s\", content_encoding);"
    },
    {
        "line": 670,
        "fullcodeline": "fprintf(stderr, \" - %d bytes config\", (u32) strlen(config));"
    },
    {
        "line": 673,
        "fullcodeline": "} else if (msub_type == GF_ISOM_SUBTYPE_METX) {"
    },
    {
        "line": 702,
        "fullcodeline": "if (!vvccfg) {"
    },
    {
        "line": 646,
        "fullcodeline": "gf_isom_xml_subtitle_get_description(file, trackNum, 1, &_namespace, &schema_loc, &auxiliary_mimes);"
    },
    {
        "line": 647,
        "fullcodeline": "fprintf(stderr, \"XML Subtitle Stream \");"
    },
    {
        "line": 648,
        "fullcodeline": "fprintf(stderr, \"- namespace %s\", _namespace);"
    },
    {
        "line": 674,
        "fullcodeline": "const char *_namespace = NULL;"
    },
    {
        "line": 675,
        "fullcodeline": "const char *schema_loc = NULL;"
    },
    {
        "line": 676,
        "fullcodeline": "gf_isom_get_xml_metadata_description(file, trackNum, 1, &_namespace, &schema_loc, &content_encoding);"
    },
    {
        "line": 677,
        "fullcodeline": "fprintf(stderr, \"XML Metadata Stream - namespace %s\", _namespace);"
    },
    {
        "line": 684,
        "fullcodeline": "fprintf(stderr, \"\\n\");"
    },
    {
        "line": 694,
        "fullcodeline": "if (vvc_state) vvc_state->sps_active_idx = -1;"
    },
    {
        "line": 698,
        "fullcodeline": "if (full_dump) fprintf(stderr, \"\\t\");"
    },
    {
        "line": 703,
        "fullcodeline": "M4_LOG(GF_LOG_ERROR, (\"Non-compliant VVC track: No vvcC found in sample description\\n\"));"
    },
    {
        "line": 714,
        "fullcodeline": "if (vvc_state) gf_free(vvc_state);"
    },
    {
        "line": 716,
        "fullcodeline": "} else if ((msub_type == GF_ISOM_SUBTYPE_MH3D_MHA1) || (msub_type == GF_ISOM_SUBTYPE_MH3D_MHA2)"
    },
    {
        "line": 649,
        "fullcodeline": "if (schema_loc != NULL) {"
    },
    {
        "line": 652,
        "fullcodeline": "if (auxiliary_mimes != NULL) {"
    },
    {
        "line": 656,
        "fullcodeline": "fprintf(stderr, \"Unknown Text Stream\");"
    },
    {
        "line": 678,
        "fullcodeline": "if (content_encoding != NULL) {"
    },
    {
        "line": 681,
        "fullcodeline": "if (schema_loc != NULL) {"
    },
    {
        "line": 686,
        "fullcodeline": "fprintf(stderr, \"Unknown Metadata Stream\\n\");"
    },
    {
        "line": 705,
        "fullcodeline": "dump_vvc_track_info(file, trackNum, vvccfg"
    },
    {
        "line": 710,
        "fullcodeline": "gf_odf_vvc_cfg_del(vvccfg);"
    },
    {
        "line": 711,
        "fullcodeline": "fprintf(stderr, \"\\n\");"
    },
    {
        "line": 717,
        "fullcodeline": "|| (msub_type == GF_ISOM_SUBTYPE_MH3D_MHM1) || (msub_type == GF_ISOM_SUBTYPE_MH3D_MHM2)"
    },
    {
        "line": 721,
        "fullcodeline": "Bool valid = GF_FALSE;"
    },
    {
        "line": 722,
        "fullcodeline": "Bool allow_inband = GF_FALSE;"
    },
    {
        "line": 726,
        "fullcodeline": "fprintf(stderr, \"\\tMPEG-H Audio stream - Sample Rate %d\\n\", sr);"
    },
    {
        "line": 728,
        "fullcodeline": "esd = gf_media_map_esd(file, trackNum, 1);"
    },
    {
        "line": 757,
        "fullcodeline": "compat_profiles = gf_isom_get_mpegh_compatible_profiles(file, trackNum, 1, &nb_compat_profiles);"
    },
    {
        "line": 650,
        "fullcodeline": "fprintf(stderr, \" - schema-location %s\", schema_loc);"
    },
    {
        "line": 653,
        "fullcodeline": "fprintf(stderr, \" - auxiliary-mime-types %s\", auxiliary_mimes);"
    },
    {
        "line": 679,
        "fullcodeline": "fprintf(stderr, \" - encoding %s\", content_encoding);"
    },
    {
        "line": 682,
        "fullcodeline": "fprintf(stderr, \" - schema-location %s\", schema_loc);"
    },
    {
        "line": 723,
        "fullcodeline": "if ( (msub_type == GF_ISOM_SUBTYPE_MH3D_MHM1) || (msub_type == GF_ISOM_SUBTYPE_MH3D_MHM2))"
    },
    {
        "line": 729,
        "fullcodeline": "if (!esd || !esd->decoderConfig || !esd->decoderConfig->decoderSpecificInfo"
    },
    {
        "line": 753,
        "fullcodeline": "if (!valid) {"
    },
    {
        "line": 758,
        "fullcodeline": "for (i=0; i<nb_compat_profiles; i++) {"
    },
    {
        "line": 724,
        "fullcodeline": "allow_inband = GF_TRUE;"
    },
    {
        "line": 754,
        "fullcodeline": "M4_LOG(GF_LOG_ERROR, (\"Invalid MPEG-H audio config\\n\"));"
    },
    {
        "line": 756,
        "fullcodeline": "if (esd) gf_odf_desc_del((GF_Descriptor *)esd);"
    },
    {
        "line": 761,
        "fullcodeline": "fprintf(stderr, \" 0x%02X\", compat_profiles[i]);"
    },
    {
        "line": 763,
        "fullcodeline": "if (i) fprintf(stderr, \"\\n\");"
    },
    {
        "line": 764,
        "fullcodeline": "} else if (msub_type==GF_ISOM_SUBTYPE_MLPA) {"
    },
    {
        "line": 759,
        "fullcodeline": "if (!i)"
    },
    {
        "line": 769,
        "fullcodeline": "fprintf(stderr, \"TrueHD Audio stream - Sample Rate %u - channels %u - format %u peak rate %u\\n\", sr, nb_ch, fmt, prate);"
    },
    {
        "line": 733,
        "fullcodeline": "GF_ISOSample *samp = gf_isom_get_sample(file, trackNum, 1, NULL);"
    },
    {
        "line": 745,
        "fullcodeline": "valid = GF_TRUE;"
    },
    {
        "line": 747,
        "fullcodeline": "} else if (esd->decoderConfig->decoderSpecificInfo->dataLength>=5) {"
    },
    {
        "line": 760,
        "fullcodeline": "fprintf(stderr, \"\\tCompatible profiles:\");"
    },
    {
        "line": 766,
        "fullcodeline": "if (gf_isom_truehd_config_get(file, trackNum, 1, &fmt, &prate) != GF_OK) {"
    },
    {
        "line": 748,
        "fullcodeline": "fprintf(stderr, \"\\tProfileLevelIndication: 0x%02X - Reference Channel Layout %s\\n\", esd->decoderConfig->decoderSpecificInfo->data[1]"
    },
    {
        "line": 751,
        "fullcodeline": "valid = GF_TRUE;"
    },
    {
        "line": 767,
        "fullcodeline": "fprintf(stderr, \"\\tInvalid TrueHD audio config\\n\");"
    },
    {
        "line": 735,
        "fullcodeline": "u64 ch_layout=0;"
    },
    {
        "line": 736,
        "fullcodeline": "s32 PL = gf_mpegh_get_mhas_pl(samp->data, samp->dataLength, &ch_layout);"
    },
    {
        "line": 743,
        "fullcodeline": "gf_isom_sample_del(&samp);"
    },
    {
        "line": 737,
        "fullcodeline": "if (PL>=0) {"
    },
    {
        "line": 771,
        "fullcodeline": "if (gf_isom_is_video_handler_type(mtype) ) {"
    },
    {
        "line": 738,
        "fullcodeline": "fprintf(stderr, \"\\tProfileLevelIndication: 0x%02X\", PL);"
    },
    {
        "line": 741,
        "fullcodeline": "fprintf(stderr, \"\\n\");"
    },
    {
        "line": 773,
        "fullcodeline": "gf_isom_get_visual_info(file, trackNum, 1, &w, &h);"
    },
    {
        "line": 774,
        "fullcodeline": "fprintf(stderr, \"%s - Resolution %d x %d\\n\", gf_codecid_name(codecid), w, h);"
    },
    {
        "line": 783,
        "fullcodeline": "gf_isom_get_visual_info(file, trackNum, 1, &w, &h);"
    },
    {
        "line": 784,
        "fullcodeline": "fprintf(stderr, \"Raw video %s - Resolution %d x %d\\n\", gf_pixel_fmt_name(pfmt), w, h);"
    },
    {
        "line": 740,
        "fullcodeline": "fprintf(stderr, \" - Reference Channel Layout %s\", gf_audio_fmt_get_layout_name(ch_layout) );"
    },
    {
        "line": 775,
        "fullcodeline": "} else if (mtype==GF_ISOM_MEDIA_AUDIO) {"
    },
    {
        "line": 776,
        "fullcodeline": "gf_isom_get_audio_info(file, trackNum, 1, &sr, &nb_ch, NULL);"
    },
    {
        "line": 777,
        "fullcodeline": "fprintf(stderr, \"%s - Sample Rate %d - %d channel(s)\\n\", gf_codecid_name(codecid), sr, nb_ch);"
    },
    {
        "line": 785,
        "fullcodeline": "} else if (msub_type==GF_QT_SUBTYPE_TMCD) {"
    },
    {
        "line": 779,
        "fullcodeline": "fprintf(stderr, \"%s\\n\", gf_codecid_name(codecid) );"
    },
    {
        "line": 787,
        "fullcodeline": "GF_ISOSample *sample = gf_isom_get_sample(file, trackNum, 1, &stsd_idx);"
    },
    {
        "line": 788,
        "fullcodeline": "fprintf(stderr, \"Time Code stream\\n\");"
    },
    {
        "line": 803,
        "fullcodeline": "udesc = gf_isom_get_generic_sample_description(file, trackNum, 1);"
    },
    {
        "line": 790,
        "fullcodeline": "char szTimecode[100];"
    },
    {
        "line": 793,
        "fullcodeline": "gf_isom_get_tmcd_config(file, trackNum, stsd_idx, &tmcd_flags, &tmcd_num, &tmcd_den, &tmcd_fpt);"
    },
    {
        "line": 795,
        "fullcodeline": "gf_inspect_format_timecode(sample->data, sample->dataLength, tmcd_flags, tmcd_num, tmcd_den, tmcd_fpt, szTimecode);"
    },
    {
        "line": 797,
        "fullcodeline": "gf_isom_sample_del(&sample);"
    },
    {
        "line": 798,
        "fullcodeline": "fprintf(stderr, \"\\tFirst timecode: %s\\n\", szTimecode);"
    },
    {
        "line": 821,
        "fullcodeline": "gf_free(udesc);"
    },
    {
        "line": 805,
        "fullcodeline": "if (gf_isom_is_video_handler_type(mtype) ) {"
    },
    {
        "line": 823,
        "fullcodeline": "fprintf(stderr, \"Unknown track type\\n\");"
    },
    {
        "line": 806,
        "fullcodeline": "fprintf(stderr, \"%s - Compressor \\\"%s\\\" - Resolution %d x %d\\n\","
    },
    {
        "line": 815,
        "fullcodeline": "fprintf(stderr, \"\\tVendor code \\\"%s\\\" - Version %d - revision %d\\n\", gf_4cc_to_str(udesc->vendor_code), udesc->version, udesc->revision);"
    },
    {
        "line": 818,
        "fullcodeline": "fprintf(stderr, \"\\tCodec configuration data size: %d bytes\\n\", udesc->extension_buf_size);"
    },
    {
        "line": 819,
        "fullcodeline": "gf_free(udesc->extension_buf);"
    },
    {
        "line": 807,
        "fullcodeline": "( (mtype == GF_ISOM_MEDIA_VISUAL ? \"Visual\" : \"Auxiliary Video\") ),"
    },
    {
        "line": 809,
        "fullcodeline": "} else if (mtype==GF_ISOM_MEDIA_AUDIO) {"
    },
    {
        "line": 810,
        "fullcodeline": "fprintf(stderr, \"Audio - Sample Rate %d - %d channel(s)\\n\", udesc->samplerate, udesc->nb_channels);"
    },
    {
        "line": 812,
        "fullcodeline": "fprintf(stderr, \"Unknown media type\\n\");"
    }
]