[
    {
        "line": 2,
        "fullcodeline": "mock_credential_info = ArtifactCredentialInfo("
    },
    {
        "line": 5,
        "fullcodeline": "mock_upload_id = \"upload_id\""
    },
    {
        "line": 6,
        "fullcodeline": "create_mpu_response = CreateMultipartUpload.Response("
    },
    {
        "line": 22,
        "fullcodeline": "part_upload_url_response = GetPresignedUploadPartUrl.Response("
    },
    {
        "line": 29,
        "fullcodeline": "complete_mpu_response = CompleteMultipartUpload.Response()"
    },
    {
        "line": 31,
        "fullcodeline": "with mock.patch("
    },
    {
        "line": 16,
        "fullcodeline": "abort_credential_info=ArtifactCredentialInfo("
    },
    {
        "line": 23,
        "fullcodeline": "upload_credential_info=ArtifactCredentialInfo("
    },
    {
        "line": 8,
        "fullcodeline": "upload_credential_infos=["
    },
    {
        "line": 17,
        "fullcodeline": "signed_uri=f\"{MOCK_AWS_SIGNED_URI}uploadId=abort\","
    },
    {
        "line": 19,
        "fullcodeline": "headers=[ArtifactCredentialInfo.HttpHeader(name=\"header\", value=\"abort\")],"
    },
    {
        "line": 24,
        "fullcodeline": "signed_uri=f\"{MOCK_AWS_SIGNED_URI}partNumber=2\","
    },
    {
        "line": 26,
        "fullcodeline": "headers=[ArtifactCredentialInfo.HttpHeader(name=\"header\", value=\"part-2\")],"
    },
    {
        "line": 32,
        "fullcodeline": "f\"{DATABRICKS_ARTIFACT_REPOSITORY}._get_write_credential_infos\","
    },
    {
        "line": 33,
        "fullcodeline": "return_value=[mock_credential_info],"
    },
    {
        "line": 34,
        "fullcodeline": "), mock.patch("
    },
    {
        "line": 35,
        "fullcodeline": "f\"{DATABRICKS_ARTIFACT_REPOSITORY}._call_endpoint\","
    },
    {
        "line": 36,
        "fullcodeline": "side_effect=[create_mpu_response, part_upload_url_response, complete_mpu_response],"
    },
    {
        "line": 14,
        "fullcodeline": "for i in range(2)"
    },
    {
        "line": 9,
        "fullcodeline": "ArtifactCredentialInfo("
    },
    {
        "line": 37,
        "fullcodeline": ") as call_endpoint_mock, mock.patch("
    },
    {
        "line": 10,
        "fullcodeline": "signed_uri=f\"{MOCK_AWS_SIGNED_URI}partNumber={i + 1}\","
    },
    {
        "line": 12,
        "fullcodeline": "headers=[ArtifactCredentialInfo.HttpHeader(name=\"header\", value=f\"part-{i + 1}\")],"
    },
    {
        "line": 40,
        "fullcodeline": "databricks_artifact_repo.log_artifact(large_file)"
    },
    {
        "line": 53,
        "fullcodeline": "expected_calls += expected_calls[-1:]  # Append the second part upload call"
    },
    {
        "line": 56,
        "fullcodeline": "assert sorted(http_request_mock.call_args_list, key=lambda c: c.args[1]) == expected_calls"
    },
    {
        "line": 57,
        "fullcodeline": "complete_request_body = json.loads(call_endpoint_mock.call_args_list[-1].args[-1])"
    },
    {
        "line": 58,
        "fullcodeline": "assert complete_request_body[\"upload_id\"] == mock_upload_id"
    },
    {
        "line": 59,
        "fullcodeline": "assert complete_request_body[\"part_etags\"] == ["
    },
    {
        "line": 42,
        "fullcodeline": "with large_file.open(\"rb\") as f:"
    },
    {
        "line": 43,
        "fullcodeline": "expected_calls = ["
    },
    {
        "line": 60,
        "fullcodeline": "{\"part_number\": 1, \"etag\": \"etag-1\"},"
    },
    {
        "line": 61,
        "fullcodeline": "{\"part_number\": 2, \"etag\": \"etag-2\"},"
    },
    {
        "line": 51,
        "fullcodeline": "for i in range(2)"
    },
    {
        "line": 44,
        "fullcodeline": "mock.call("
    },
    {
        "line": 46,
        "fullcodeline": "f\"{MOCK_AWS_SIGNED_URI}partNumber={i + 1}\","
    },
    {
        "line": 47,
        "fullcodeline": "data=f.read(mock_chunk_size),"
    },
    {
        "line": 48,
        "fullcodeline": "headers={\"header\": f\"part-{i + 1}\"},"
    }
]