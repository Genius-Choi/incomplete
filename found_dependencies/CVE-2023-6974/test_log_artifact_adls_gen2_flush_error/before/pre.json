[
    {
        "line": 2,
        "fullcodeline": "mock_successful_response = Response()"
    },
    {
        "line": 3,
        "fullcodeline": "mock_successful_response.status_code = 200"
    },
    {
        "line": 4,
        "fullcodeline": "mock_successful_response.close = lambda: None"
    },
    {
        "line": 5,
        "fullcodeline": "mock_error_response = MlflowException(\"MOCK ERROR\")"
    },
    {
        "line": 6,
        "fullcodeline": "mock_credential_info = ArtifactCredentialInfo("
    },
    {
        "line": 10,
        "fullcodeline": "with mock.patch("
    },
    {
        "line": 11,
        "fullcodeline": "f\"{DATABRICKS_ARTIFACT_REPOSITORY}._get_credential_infos\","
    },
    {
        "line": 12,
        "fullcodeline": "return_value=[mock_credential_info],"
    },
    {
        "line": 13,
        "fullcodeline": ") as get_credential_infos_mock, mock.patch("
    },
    {
        "line": 14,
        "fullcodeline": "\"requests.Session.request\", side_effect=[mock_successful_response, mock_error_response]"
    },
    {
        "line": 16,
        "fullcodeline": "mock_credential_info = ArtifactCredentialInfo("
    },
    {
        "line": 22,
        "fullcodeline": "get_credential_infos_mock.assert_called_with(GetCredentialsForWrite, MOCK_RUN_ID, ANY)"
    },
    {
        "line": 23,
        "fullcodeline": "assert request_mock.mock_calls == ["
    },
    {
        "line": 20,
        "fullcodeline": "with pytest.raises(MlflowException, match=r\"MOCK ERROR\"):"
    },
    {
        "line": 21,
        "fullcodeline": "databricks_artifact_repo.log_artifact(test_file)"
    },
    {
        "line": 24,
        "fullcodeline": "mock.call("
    },
    {
        "line": 30,
        "fullcodeline": "mock.call("
    },
    {
        "line": 26,
        "fullcodeline": "f\"{MOCK_ADLS_GEN2_SIGNED_URI}?resource=file\","
    },
    {
        "line": 32,
        "fullcodeline": "f\"{MOCK_ADLS_GEN2_SIGNED_URI}?action=append&position=0&flush=true\","
    },
    {
        "line": 27,
        "fullcodeline": "headers={},"
    },
    {
        "line": 34,
        "fullcodeline": "headers={},"
    }
]