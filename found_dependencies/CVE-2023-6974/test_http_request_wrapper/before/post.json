[
    {
        "line": 2,
        "fullcodeline": "host_only = MlflowHostCreds(\"http://my-host\", ignore_tls_verification=True)"
    },
    {
        "line": 3,
        "fullcodeline": "response = mock.MagicMock()"
    },
    {
        "line": 4,
        "fullcodeline": "response.status_code = 200"
    },
    {
        "line": 5,
        "fullcodeline": "response.text = \"{}\""
    },
    {
        "line": 6,
        "fullcodeline": "request.return_value = response"
    },
    {
        "line": 7,
        "fullcodeline": "http_request_safe(host_only, \"/my/endpoint\", \"GET\")"
    },
    {
        "line": 8,
        "fullcodeline": "request.assert_called_with("
    },
    {
        "line": 15,
        "fullcodeline": "response.text = \"non json\""
    },
    {
        "line": 16,
        "fullcodeline": "request.return_value = response"
    },
    {
        "line": 17,
        "fullcodeline": "http_request_safe(host_only, \"/my/endpoint\", \"GET\")"
    },
    {
        "line": 18,
        "fullcodeline": "request.assert_called_with("
    },
    {
        "line": 25,
        "fullcodeline": "response.status_code = 400"
    },
    {
        "line": 26,
        "fullcodeline": "response.text = \"\""
    },
    {
        "line": 27,
        "fullcodeline": "request.return_value = response"
    },
    {
        "line": 30,
        "fullcodeline": "response.text = ("
    },
    {
        "line": 33,
        "fullcodeline": "request.return_value = response"
    },
    {
        "line": 28,
        "fullcodeline": "with pytest.raises(MlflowException, match=\"Response body\"):"
    },
    {
        "line": 34,
        "fullcodeline": "with pytest.raises(RestException, match=\"RESOURCE_DOES_NOT_EXIST: Node type not supported\"):"
    },
    {
        "line": 12,
        "fullcodeline": "headers=DefaultRequestHeaderProvider().request_headers(),"
    },
    {
        "line": 22,
        "fullcodeline": "headers=DefaultRequestHeaderProvider().request_headers(),"
    },
    {
        "line": 29,
        "fullcodeline": "http_request_safe(host_only, \"/my/endpoint\", \"GET\")"
    },
    {
        "line": 35,
        "fullcodeline": "http_request_safe(host_only, \"/my/endpoint\", \"GET\")"
    }
]