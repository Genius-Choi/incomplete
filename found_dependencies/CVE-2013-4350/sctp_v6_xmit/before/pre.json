[
    {
        "line": 3,
        "fullcodeline": "struct sock *sk = skb->sk;"
    },
    {
        "line": 4,
        "fullcodeline": "struct ipv6_pinfo *np = inet6_sk(sk);"
    },
    {
        "line": 7,
        "fullcodeline": "memset(&fl6, 0, sizeof(fl6));"
    },
    {
        "line": 9,
        "fullcodeline": "fl6.flowi6_proto = sk->sk_protocol;"
    },
    {
        "line": 14,
        "fullcodeline": "fl6.daddr = transport->ipaddr.v6.sin6_addr;"
    },
    {
        "line": 15,
        "fullcodeline": "fl6.saddr = transport->saddr.v6.sin6_addr;"
    },
    {
        "line": 17,
        "fullcodeline": "fl6.flowlabel = np->flow_label;"
    },
    {
        "line": 18,
        "fullcodeline": "IP6_ECN_flow_xmit(sk, fl6.flowlabel);"
    },
    {
        "line": 29,
        "fullcodeline": "pr_debug(\"%s: skb:%p, len:%d, src:%pI6 dst:%pI6\\n\", __func__, skb,"
    },
    {
        "line": 32,
        "fullcodeline": "SCTP_INC_STATS(sock_net(sk), SCTP_MIB_OUTSCTPPACKS);"
    },
    {
        "line": 19,
        "fullcodeline": "if (ipv6_addr_type(&fl6.saddr) & IPV6_ADDR_LINKLOCAL)"
    },
    {
        "line": 24,
        "fullcodeline": "if (np->opt && np->opt->srcrt) {"
    },
    {
        "line": 34,
        "fullcodeline": "if (!(transport->param_flags & SPP_PMTUD_ENABLE))"
    },
    {
        "line": 37,
        "fullcodeline": "return ip6_xmit(sk, skb, &fl6, np->opt, np->tclass);"
    },
    {
        "line": 20,
        "fullcodeline": "fl6.flowi6_oif = transport->saddr.v6.sin6_scope_id;"
    },
    {
        "line": 25,
        "fullcodeline": "struct rt0_hdr *rt0 = (struct rt0_hdr *) np->opt->srcrt;"
    },
    {
        "line": 26,
        "fullcodeline": "fl6.daddr = *rt0->addr;"
    },
    {
        "line": 35,
        "fullcodeline": "skb->local_df = 1;"
    },
    {
        "line": 22,
        "fullcodeline": "fl6.flowi6_oif = sk->sk_bound_dev_if;"
    }
]