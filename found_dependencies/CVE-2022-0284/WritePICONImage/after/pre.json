[
    {
        "line": 9,
        "fullcodeline": "Colormap[]="
    },
    {
        "line": 25,
        "fullcodeline": "Graymap[]="
    },
    {
        "line": 40,
        "fullcodeline": "Cixel[MaxCixels+1] = \" .XoO+@#$%&*=-;:>,<1234567890qwertyuipasdfghjk\""
    },
    {
        "line": 44,
        "fullcodeline": "buffer[MagickPathExtent],"
    },
    {
        "line": 45,
        "fullcodeline": "basename[MagickPathExtent],"
    },
    {
        "line": 46,
        "fullcodeline": "name[MagickPathExtent],"
    },
    {
        "line": 47,
        "fullcodeline": "symbol[MagickPathExtent];"
    },
    {
        "line": 91,
        "fullcodeline": "assert(image_info != (const ImageInfo *) NULL);"
    },
    {
        "line": 92,
        "fullcodeline": "assert(image_info->signature == MagickCoreSignature);"
    },
    {
        "line": 93,
        "fullcodeline": "assert(image != (Image *) NULL);"
    },
    {
        "line": 94,
        "fullcodeline": "assert(image->signature == MagickCoreSignature);"
    },
    {
        "line": 97,
        "fullcodeline": "assert(exception != (ExceptionInfo *) NULL);"
    },
    {
        "line": 98,
        "fullcodeline": "assert(exception->signature == MagickCoreSignature);"
    },
    {
        "line": 99,
        "fullcodeline": "status=OpenBlob(image_info,image,WriteBinaryBlobMode,exception);"
    },
    {
        "line": 104,
        "fullcodeline": "SetGeometry(image,&geometry);"
    },
    {
        "line": 107,
        "fullcodeline": "picon=ResizeImage(image,geometry.width,geometry.height,TriangleFilter,"
    },
    {
        "line": 109,
        "fullcodeline": "blob_info=CloneImageInfo(image_info);"
    },
    {
        "line": 127,
        "fullcodeline": "quantize_info=AcquireQuantizeInfo(image_info);"
    },
    {
        "line": 131,
        "fullcodeline": "transparent=MagickFalse;"
    },
    {
        "line": 167,
        "fullcodeline": "colors=picon->colors;"
    },
    {
        "line": 197,
        "fullcodeline": "characters_per_pixel=1;"
    },
    {
        "line": 204,
        "fullcodeline": "GetPathComponent(picon->filename,BasePath,basename);"
    },
    {
        "line": 213,
        "fullcodeline": "GetPixelInfo(image,&pixel);"
    },
    {
        "line": 10,
        "fullcodeline": "{"
    },
    {
        "line": 26,
        "fullcodeline": "{"
    },
    {
        "line": 95,
        "fullcodeline": "if (image->debug != MagickFalse)"
    },
    {
        "line": 100,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 102,
        "fullcodeline": "if (IssRGBCompatibleColorspace(image->colorspace) == MagickFalse)"
    },
    {
        "line": 105,
        "fullcodeline": "(void) ParseMetaGeometry(PiconGeometry,&geometry.x,&geometry.y,"
    },
    {
        "line": 111,
        "fullcodeline": "(void) AcquireUniqueFilename(blob_info->filename);"
    },
    {
        "line": 117,
        "fullcodeline": "(void) RelinquishUniqueFileResource(blob_info->filename);"
    },
    {
        "line": 118,
        "fullcodeline": "blob_info=DestroyImageInfo(blob_info);"
    },
    {
        "line": 128,
        "fullcodeline": "status=RemapImage(quantize_info,picon,affinity_image,exception);"
    },
    {
        "line": 129,
        "fullcodeline": "quantize_info=DestroyQuantizeInfo(quantize_info);"
    },
    {
        "line": 130,
        "fullcodeline": "affinity_image=DestroyImage(affinity_image);"
    },
    {
        "line": 132,
        "fullcodeline": "if (picon->storage_class == PseudoClass)"
    },
    {
        "line": 168,
        "fullcodeline": "if (transparent != MagickFalse)"
    },
    {
        "line": 198,
        "fullcodeline": "for (k=MaxCixels; (ssize_t) colors > k; k*=MaxCixels)"
    },
    {
        "line": 199,
        "fullcodeline": "characters_per_pixel++;"
    },
    {
        "line": 203,
        "fullcodeline": "(void) WriteBlobString(image,\"/* XPM */\\n\");"
    },
    {
        "line": 205,
        "fullcodeline": "(void) FormatLocaleString(buffer,MagickPathExtent,"
    },
    {
        "line": 207,
        "fullcodeline": "(void) WriteBlobString(image,buffer);"
    },
    {
        "line": 208,
        "fullcodeline": "(void) WriteBlobString(image,\"/* columns rows colors chars-per-pixel */\\n\");"
    },
    {
        "line": 209,
        "fullcodeline": "(void) FormatLocaleString(buffer,MagickPathExtent,"
    },
    {
        "line": 212,
        "fullcodeline": "(void) WriteBlobString(image,buffer);"
    },
    {
        "line": 214,
        "fullcodeline": "for (i=0; i < (ssize_t) colors; i++)"
    },
    {
        "line": 247,
        "fullcodeline": "(void) WriteBlobString(image,\"/* pixels */\\n\");"
    },
    {
        "line": 248,
        "fullcodeline": "for (y=0; y < (ssize_t) picon->rows; y++)"
    },
    {
        "line": 276,
        "fullcodeline": "picon=DestroyImage(picon);"
    },
    {
        "line": 277,
        "fullcodeline": "(void) WriteBlobString(image,\"};\\n\");"
    },
    {
        "line": 278,
        "fullcodeline": "(void) CloseBlob(image);"
    },
    {
        "line": 96,
        "fullcodeline": "(void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",image->filename);"
    },
    {
        "line": 112,
        "fullcodeline": "if ((image_info->type != TrueColorType) &&"
    },
    {
        "line": 113,
        "fullcodeline": "(IdentifyImageCoderGray(image,exception) != MagickFalse))"
    },
    {
        "line": 114,
        "fullcodeline": "affinity_image=BlobToImage(blob_info,Graymap,GraymapExtent,exception);"
    },
    {
        "line": 119,
        "fullcodeline": "if ((picon == (Image *) NULL) || (affinity_image == (Image *) NULL))"
    },
    {
        "line": 170,
        "fullcodeline": "colors++;"
    },
    {
        "line": 171,
        "fullcodeline": "picon->colormap=(PixelInfo *) ResizeQuantumMemory((void **)"
    },
    {
        "line": 219,
        "fullcodeline": "pixel=picon->colormap[i];"
    },
    {
        "line": 220,
        "fullcodeline": "pixel.colorspace=sRGBColorspace;"
    },
    {
        "line": 221,
        "fullcodeline": "pixel.depth=8;"
    },
    {
        "line": 222,
        "fullcodeline": "pixel.alpha=(double) OpaqueAlpha;"
    },
    {
        "line": 232,
        "fullcodeline": "k=i % MaxCixels;"
    },
    {
        "line": 233,
        "fullcodeline": "symbol[0]=Cixel[k];"
    },
    {
        "line": 239,
        "fullcodeline": "symbol[j]='\\0';"
    },
    {
        "line": 250,
        "fullcodeline": "p=GetVirtualPixels(picon,0,y,picon->columns,1,exception);"
    },
    {
        "line": 271,
        "fullcodeline": "status=SetImageProgress(image,SaveImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 103,
        "fullcodeline": "(void) TransformImageColorspace(image,sRGBColorspace,exception);"
    },
    {
        "line": 116,
        "fullcodeline": "affinity_image=BlobToImage(blob_info,Colormap,ColormapExtent,exception);"
    },
    {
        "line": 121,
        "fullcodeline": "if (affinity_image != (Image *) NULL)"
    },
    {
        "line": 123,
        "fullcodeline": "if (picon != (Image *) NULL)"
    },
    {
        "line": 134,
        "fullcodeline": "(void) CompressImageColormap(picon,exception);"
    },
    {
        "line": 135,
        "fullcodeline": "if (picon->alpha_trait != UndefinedPixelTrait)"
    },
    {
        "line": 173,
        "fullcodeline": "if (picon->colormap == (PixelInfo *) NULL)"
    },
    {
        "line": 179,
        "fullcodeline": "for (y=0; y < (ssize_t) picon->rows; y++)"
    },
    {
        "line": 223,
        "fullcodeline": "(void) QueryColorname(image,&pixel,XPMCompliance,name,exception);"
    },
    {
        "line": 224,
        "fullcodeline": "if (transparent != MagickFalse)"
    },
    {
        "line": 234,
        "fullcodeline": "for (j=1; j < (ssize_t) characters_per_pixel; j++)"
    },
    {
        "line": 240,
        "fullcodeline": "(void) FormatLocaleString(buffer,MagickPathExtent,"
    },
    {
        "line": 242,
        "fullcodeline": "(void) WriteBlobString(image,buffer);"
    },
    {
        "line": 251,
        "fullcodeline": "if (p == (const Quantum *) NULL)"
    },
    {
        "line": 253,
        "fullcodeline": "(void) WriteBlobString(image,\"\\\"\");"
    },
    {
        "line": 254,
        "fullcodeline": "for (x=0; x < (ssize_t) picon->columns; x++)"
    },
    {
        "line": 268,
        "fullcodeline": "(void) FormatLocaleString(buffer,MagickPathExtent,\"\\\"%.1024s\\n\","
    },
    {
        "line": 270,
        "fullcodeline": "(void) WriteBlobString(image,buffer);"
    },
    {
        "line": 136,
        "fullcodeline": "transparent=MagickTrue;"
    },
    {
        "line": 143,
        "fullcodeline": "if (picon->alpha_trait != UndefinedPixelTrait)"
    },
    {
        "line": 165,
        "fullcodeline": "(void) SetImageType(picon,PaletteType,exception);"
    },
    {
        "line": 174,
        "fullcodeline": "ThrowWriterException(ResourceLimitError,\"MemoryAllocationError\");"
    },
    {
        "line": 181,
        "fullcodeline": "q=GetAuthenticPixels(picon,0,y,picon->columns,1,exception);"
    },
    {
        "line": 236,
        "fullcodeline": "k=((i-k)/MaxCixels) % MaxCixels;"
    },
    {
        "line": 256,
        "fullcodeline": "k=((ssize_t) GetPixelIndex(picon,p) % MaxCixels);"
    },
    {
        "line": 257,
        "fullcodeline": "symbol[0]=Cixel[k];"
    },
    {
        "line": 263,
        "fullcodeline": "symbol[j]='\\0';"
    },
    {
        "line": 266,
        "fullcodeline": "p+=GetPixelChannels(picon);"
    },
    {
        "line": 122,
        "fullcodeline": "affinity_image=DestroyImage(affinity_image);"
    },
    {
        "line": 124,
        "fullcodeline": "picon=DestroyImage(picon);"
    },
    {
        "line": 175,
        "fullcodeline": "picon->colormap[colors-1].red=0.0;"
    },
    {
        "line": 176,
        "fullcodeline": "picon->colormap[colors-1].green=0.0;"
    },
    {
        "line": 177,
        "fullcodeline": "picon->colormap[colors-1].blue=0.0;"
    },
    {
        "line": 178,
        "fullcodeline": "picon->colormap[colors-1].alpha=TransparentAlpha;"
    },
    {
        "line": 182,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 184,
        "fullcodeline": "for (x=0; x < (ssize_t) picon->columns; x++)"
    },
    {
        "line": 190,
        "fullcodeline": "if (SyncAuthenticPixels(picon,exception) == MagickFalse)"
    },
    {
        "line": 226,
        "fullcodeline": "if (i == (ssize_t) (colors-1))"
    },
    {
        "line": 258,
        "fullcodeline": "for (j=1; j < (ssize_t) characters_per_pixel; j++)"
    },
    {
        "line": 264,
        "fullcodeline": "(void) CopyMagickString(buffer,symbol,MagickPathExtent);"
    },
    {
        "line": 265,
        "fullcodeline": "(void) WriteBlobString(image,buffer);"
    },
    {
        "line": 269,
        "fullcodeline": "y == (ssize_t) (picon->rows-1) ? \"\" : \",\");"
    },
    {
        "line": 148,
        "fullcodeline": "for (y=0; y < (ssize_t) picon->rows; y++)"
    },
    {
        "line": 188,
        "fullcodeline": "q+=GetPixelChannels(picon);"
    },
    {
        "line": 260,
        "fullcodeline": "k=(((int) GetPixelIndex(picon,p)-k)/MaxCixels) % MaxCixels;"
    },
    {
        "line": 150,
        "fullcodeline": "q=GetAuthenticPixels(picon,0,y,picon->columns,1,exception);"
    },
    {
        "line": 227,
        "fullcodeline": "(void) CopyMagickString(name,\"grey75\",MagickPathExtent);"
    },
    {
        "line": 151,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 153,
        "fullcodeline": "for (x=0; x < (ssize_t) picon->columns; x++)"
    },
    {
        "line": 161,
        "fullcodeline": "if (SyncAuthenticPixels(picon,exception) == MagickFalse)"
    },
    {
        "line": 186,
        "fullcodeline": "if (GetPixelAlpha(picon,q) == (Quantum) TransparentAlpha)"
    },
    {
        "line": 187,
        "fullcodeline": "SetPixelIndex(picon,(Quantum) picon->colors,q);"
    },
    {
        "line": 159,
        "fullcodeline": "q+=GetPixelChannels(picon);"
    },
    {
        "line": 155,
        "fullcodeline": "if (GetPixelAlpha(picon,q) == (Quantum) TransparentAlpha)"
    },
    {
        "line": 156,
        "fullcodeline": "transparent=MagickTrue;"
    },
    {
        "line": 158,
        "fullcodeline": "SetPixelAlpha(picon,OpaqueAlpha,q);"
    }
]