[
    {
        "line": 10,
        "fullcodeline": "struct sctp_chunk *chunk = arg;"
    },
    {
        "line": 13,
        "fullcodeline": "int error = 0;"
    },
    {
        "line": 40,
        "fullcodeline": "new_asoc = sctp_unpack_cookie(ep, asoc, chunk, GFP_ATOMIC, &error,"
    },
    {
        "line": 75,
        "fullcodeline": "new_asoc->temp = 1;"
    },
    {
        "line": 80,
        "fullcodeline": "action = sctp_tietags_compare(new_asoc, asoc);"
    },
    {
        "line": 109,
        "fullcodeline": "sctp_add_cmd_sf(commands, SCTP_CMD_SET_ASOC, SCTP_ASOC(new_asoc));"
    },
    {
        "line": 110,
        "fullcodeline": "sctp_add_cmd_sf(commands, SCTP_CMD_DELETE_TCB, SCTP_NULL());"
    },
    {
        "line": 115,
        "fullcodeline": "sctp_add_cmd_sf(commands, SCTP_CMD_SET_ASOC,"
    },
    {
        "line": 21,
        "fullcodeline": "if (!sctp_chunk_length_valid(chunk, sizeof(struct sctp_chunkhdr))) {"
    },
    {
        "line": 31,
        "fullcodeline": "if (!pskb_pull(chunk->skb, ntohs(chunk->chunk_hdr->length) -"
    },
    {
        "line": 49,
        "fullcodeline": "if (!new_asoc) {"
    },
    {
        "line": 68,
        "fullcodeline": "if (security_sctp_assoc_request((struct sctp_endpoint *)ep,"
    },
    {
        "line": 116,
        "fullcodeline": "SCTP_ASOC((struct sctp_association *)asoc));"
    },
    {
        "line": 70,
        "fullcodeline": "sctp_association_free(new_asoc);"
    },
    {
        "line": 84,
        "fullcodeline": "retval = sctp_sf_do_dupcook_a(net, ep, asoc, chunk, commands,"
    },
    {
        "line": 89,
        "fullcodeline": "retval = sctp_sf_do_dupcook_b(net, ep, asoc, chunk, commands,"
    },
    {
        "line": 94,
        "fullcodeline": "retval = sctp_sf_do_dupcook_c(net, ep, asoc, chunk, commands,"
    },
    {
        "line": 99,
        "fullcodeline": "retval = sctp_sf_do_dupcook_d(net, ep, asoc, chunk, commands,"
    },
    {
        "line": 104,
        "fullcodeline": "retval = sctp_sf_pdiscard(net, ep, asoc, type, arg, commands);"
    },
    {
        "line": 22,
        "fullcodeline": "if (!sctp_vtag_verify(chunk, asoc))"
    },
    {
        "line": 24,
        "fullcodeline": "return sctp_sf_violation_chunklen(net, ep, asoc, type, arg, commands);"
    },
    {
        "line": 71,
        "fullcodeline": "return sctp_sf_pdiscard(net, ep, asoc, type, arg, commands);"
    },
    {
        "line": 23,
        "fullcodeline": "asoc = NULL;"
    },
    {
        "line": 54,
        "fullcodeline": "case -SCTP_IERROR_NOMEM:"
    },
    {
        "line": 57,
        "fullcodeline": "case -SCTP_IERROR_STALE_COOKIE:"
    },
    {
        "line": 58,
        "fullcodeline": "sctp_send_stale_cookie_err(net, ep, asoc, chunk, commands,"
    },
    {
        "line": 61,
        "fullcodeline": "case -SCTP_IERROR_BAD_SIG:"
    },
    {
        "line": 60,
        "fullcodeline": "return sctp_sf_pdiscard(net, ep, asoc, type, arg, commands);"
    },
    {
        "line": 63,
        "fullcodeline": "return sctp_sf_pdiscard(net, ep, asoc, type, arg, commands);"
    }
]