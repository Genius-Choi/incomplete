[
    {
        "line": 3,
        "fullcodeline": "char errbuf[PCAP_ERRBUF_SIZE];\t\t// buffer for network errors"
    },
    {
        "line": 4,
        "fullcodeline": "char errmsgbuf[PCAP_ERRBUF_SIZE];\t// buffer for errors to send to the client"
    },
    {
        "line": 5,
        "fullcodeline": "char sendbuf[RPCAP_NETBUF_SIZE];\t// temporary buffer in which data to be sent is buffered"
    },
    {
        "line": 6,
        "fullcodeline": "int sendbufidx = 0;\t\t\t// index which keeps the number of bytes currently buffered"
    },
    {
        "line": 7,
        "fullcodeline": "pcap_if_t *alldevs = NULL;\t\t// pointer to the header of the interface chain"
    },
    {
        "line": 12,
        "fullcodeline": "uint16 nif = 0;\t\t\t\t// counts the number of interface listed"
    },
    {
        "line": 40,
        "fullcodeline": "replylen = 0;"
    },
    {
        "line": 78,
        "fullcodeline": "rpcap_createhdr((struct rpcap_header *) sendbuf, ver,"
    },
    {
        "line": 179,
        "fullcodeline": "pcap_freealldevs(alldevs);"
    },
    {
        "line": 15,
        "fullcodeline": "if (rpcapd_discard(pars->sockctrl, plen) == -1)"
    },
    {
        "line": 22,
        "fullcodeline": "if (pcap_findalldevs(&alldevs, errmsgbuf) == -1)"
    },
    {
        "line": 25,
        "fullcodeline": "if (alldevs == NULL)"
    },
    {
        "line": 41,
        "fullcodeline": "for (d = alldevs; d != NULL; d = d->next)"
    },
    {
        "line": 73,
        "fullcodeline": "if (sock_bufferize(NULL, sizeof(struct rpcap_header), NULL,"
    },
    {
        "line": 82,
        "fullcodeline": "for (d = alldevs; d != NULL; d = d->next)"
    },
    {
        "line": 182,
        "fullcodeline": "if (sock_send(pars->sockctrl, sendbuf, sendbufidx, errbuf, PCAP_ERRBUF_SIZE) == -1)"
    },
    {
        "line": 194,
        "fullcodeline": "if (rpcap_senderror(pars->sockctrl, ver, PCAP_ERR_FINDALLIF,"
    },
    {
        "line": 43,
        "fullcodeline": "nif++;"
    },
    {
        "line": 50,
        "fullcodeline": "replylen += sizeof(struct rpcap_findalldevs_if);"
    },
    {
        "line": 75,
        "fullcodeline": "PCAP_ERRBUF_SIZE) == -1)"
    },
    {
        "line": 86,
        "fullcodeline": "findalldevs_if = (struct rpcap_findalldevs_if *) &sendbuf[sendbufidx];"
    },
    {
        "line": 92,
        "fullcodeline": "memset(findalldevs_if, 0, sizeof(struct rpcap_findalldevs_if));"
    },
    {
        "line": 99,
        "fullcodeline": "findalldevs_if->desclen = htons(ldescr);"
    },
    {
        "line": 100,
        "fullcodeline": "findalldevs_if->namelen = htons(lname);"
    },
    {
        "line": 101,
        "fullcodeline": "findalldevs_if->flags = htonl(d->flags);"
    },
    {
        "line": 121,
        "fullcodeline": "findalldevs_if->naddr = htons(findalldevs_if->naddr);"
    },
    {
        "line": 184,
        "fullcodeline": "rpcapd_log(LOGPRIO_ERROR, \"Send to client failed: %s\", errbuf);"
    },
    {
        "line": 192,
        "fullcodeline": "pcap_freealldevs(alldevs);"
    },
    {
        "line": 195,
        "fullcodeline": "errmsgbuf, errbuf) == -1)"
    },
    {
        "line": 197,
        "fullcodeline": "rpcapd_log(LOGPRIO_ERROR, \"Send to client failed: %s\", errbuf);"
    },
    {
        "line": 18,
        "fullcodeline": "return -1;"
    },
    {
        "line": 27,
        "fullcodeline": "if (rpcap_senderror(pars->sockctrl, ver, PCAP_ERR_NOREMOTEIF,"
    },
    {
        "line": 52,
        "fullcodeline": "for (address = d->addresses; address != NULL; address = address->next)"
    },
    {
        "line": 88,
        "fullcodeline": "if (sock_bufferize(NULL, sizeof(struct rpcap_findalldevs_if), NULL,"
    },
    {
        "line": 103,
        "fullcodeline": "for (address = d->addresses; address != NULL; address = address->next)"
    },
    {
        "line": 123,
        "fullcodeline": "if (sock_bufferize(d->name, lname, sendbuf, &sendbufidx,"
    },
    {
        "line": 128,
        "fullcodeline": "if (sock_bufferize(d->description, ldescr, sendbuf, &sendbufidx,"
    },
    {
        "line": 134,
        "fullcodeline": "for (address = d->addresses; address != NULL; address = address->next)"
    },
    {
        "line": 185,
        "fullcodeline": "return -1;"
    },
    {
        "line": 198,
        "fullcodeline": "return -1;"
    },
    {
        "line": 30,
        "fullcodeline": "errbuf) == -1)"
    },
    {
        "line": 32,
        "fullcodeline": "rpcapd_log(LOGPRIO_ERROR, \"Send to client failed: %s\", errbuf);"
    },
    {
        "line": 46,
        "fullcodeline": "replylen += strlen(d->description);"
    },
    {
        "line": 48,
        "fullcodeline": "replylen += strlen(d->name);"
    },
    {
        "line": 89,
        "fullcodeline": "&sendbufidx, RPCAP_NETBUF_SIZE, SOCKBUF_CHECKONLY, errmsgbuf, PCAP_ERRBUF_SIZE) == -1)"
    },
    {
        "line": 94,
        "fullcodeline": "if (d->description) ldescr = (short) strlen(d->description);"
    },
    {
        "line": 96,
        "fullcodeline": "if (d->name) lname = (short) strlen(d->name);"
    },
    {
        "line": 125,
        "fullcodeline": "PCAP_ERRBUF_SIZE) == -1)"
    },
    {
        "line": 130,
        "fullcodeline": "PCAP_ERRBUF_SIZE) == -1)"
    },
    {
        "line": 33,
        "fullcodeline": "return -1;"
    },
    {
        "line": 95,
        "fullcodeline": "else ldescr = 0;"
    },
    {
        "line": 97,
        "fullcodeline": "else lname = 0;"
    },
    {
        "line": 63,
        "fullcodeline": "replylen += (sizeof(struct rpcap_sockaddr) * 4);"
    },
    {
        "line": 114,
        "fullcodeline": "findalldevs_if->naddr++;"
    },
    {
        "line": 151,
        "fullcodeline": "daemon_seraddr((struct sockaddr_storage *) address->addr, sockaddr);"
    },
    {
        "line": 157,
        "fullcodeline": "daemon_seraddr((struct sockaddr_storage *) address->netmask, sockaddr);"
    },
    {
        "line": 163,
        "fullcodeline": "daemon_seraddr((struct sockaddr_storage *) address->broadaddr, sockaddr);"
    },
    {
        "line": 165,
        "fullcodeline": "sockaddr = (struct rpcap_sockaddr *) &sendbuf[sendbufidx];"
    },
    {
        "line": 169,
        "fullcodeline": "daemon_seraddr((struct sockaddr_storage *) address->dstaddr, sockaddr);"
    },
    {
        "line": 148,
        "fullcodeline": "if (sock_bufferize(NULL, sizeof(struct rpcap_sockaddr), NULL,"
    },
    {
        "line": 154,
        "fullcodeline": "if (sock_bufferize(NULL, sizeof(struct rpcap_sockaddr), NULL,"
    },
    {
        "line": 160,
        "fullcodeline": "if (sock_bufferize(NULL, sizeof(struct rpcap_sockaddr), NULL,"
    },
    {
        "line": 166,
        "fullcodeline": "if (sock_bufferize(NULL, sizeof(struct rpcap_sockaddr), NULL,"
    },
    {
        "line": 149,
        "fullcodeline": "&sendbufidx, RPCAP_NETBUF_SIZE, SOCKBUF_CHECKONLY, errmsgbuf, PCAP_ERRBUF_SIZE) == -1)"
    },
    {
        "line": 155,
        "fullcodeline": "&sendbufidx, RPCAP_NETBUF_SIZE, SOCKBUF_CHECKONLY, errmsgbuf, PCAP_ERRBUF_SIZE) == -1)"
    },
    {
        "line": 161,
        "fullcodeline": "&sendbufidx, RPCAP_NETBUF_SIZE, SOCKBUF_CHECKONLY, errmsgbuf, PCAP_ERRBUF_SIZE) == -1)"
    },
    {
        "line": 167,
        "fullcodeline": "&sendbufidx, RPCAP_NETBUF_SIZE, SOCKBUF_CHECKONLY, errmsgbuf, PCAP_ERRBUF_SIZE) == -1)"
    }
]