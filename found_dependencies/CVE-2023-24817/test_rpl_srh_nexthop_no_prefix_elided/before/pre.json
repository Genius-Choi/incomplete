[
    {
        "line": 3,
        "fullcodeline": "static const ipv6_addr_t a1 = IPV6_ADDR1, a2 = IPV6_ADDR2, dst = IPV6_DST;"
    },
    {
        "line": 4,
        "fullcodeline": "static const ipv6_addr_t expected1 = IPV6_ADDR1, expected2 = IPV6_ADDR2;"
    },
    {
        "line": 10,
        "fullcodeline": "_init_hdrs(&srh, &vec, &dst);"
    },
    {
        "line": 11,
        "fullcodeline": "srh->len = (2 * sizeof(ipv6_addr_t)) / 8;"
    },
    {
        "line": 12,
        "fullcodeline": "srh->seg_left = SRH_SEG_LEFT;"
    },
    {
        "line": 13,
        "fullcodeline": "memcpy(vec, &a1, sizeof(a1));"
    },
    {
        "line": 14,
        "fullcodeline": "memcpy(vec + sizeof(a1), &a2, sizeof(a2));"
    },
    {
        "line": 17,
        "fullcodeline": "res = gnrc_rpl_srh_process(&hdr, srh, &err_ptr);"
    },
    {
        "line": 18,
        "fullcodeline": "TEST_ASSERT_EQUAL_INT(res, GNRC_IPV6_EXT_RH_FORWARDED);"
    },
    {
        "line": 19,
        "fullcodeline": "TEST_ASSERT_EQUAL_INT(SRH_SEG_LEFT - 1, srh->seg_left);"
    },
    {
        "line": 20,
        "fullcodeline": "TEST_ASSERT(ipv6_addr_equal(&hdr.dst, &expected1));"
    },
    {
        "line": 23,
        "fullcodeline": "res = gnrc_rpl_srh_process(&hdr, srh, &err_ptr);"
    },
    {
        "line": 24,
        "fullcodeline": "TEST_ASSERT_EQUAL_INT(res, GNRC_IPV6_EXT_RH_FORWARDED);"
    },
    {
        "line": 25,
        "fullcodeline": "TEST_ASSERT_EQUAL_INT(SRH_SEG_LEFT - 2, srh->seg_left);"
    },
    {
        "line": 26,
        "fullcodeline": "TEST_ASSERT(ipv6_addr_equal(&hdr.dst, &expected2));"
    }
]