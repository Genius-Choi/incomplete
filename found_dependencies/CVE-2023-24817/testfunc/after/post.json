[
    {
        "line": 3,
        "fullcodeline": "tap = get_bridge(os.environ[\"TAP\"])"
    },
    {
        "line": 4,
        "fullcodeline": "child.sendline(\"unittests\")"
    },
    {
        "line": 6,
        "fullcodeline": "print(\".\" * check_unittests(child), end=\"\", flush=True)"
    },
    {
        "line": 7,
        "fullcodeline": "lladdr_src = get_host_lladdr(tap)"
    },
    {
        "line": 8,
        "fullcodeline": "child.sendline(\"ifconfig\")"
    },
    {
        "line": 9,
        "fullcodeline": "child.expect(r\"HWaddr: (?P<hwaddr>[A-Fa-f:0-9]+)\\s\")"
    },
    {
        "line": 10,
        "fullcodeline": "hwaddr_dst = child.match.group(\"hwaddr\").lower()"
    },
    {
        "line": 11,
        "fullcodeline": "child.expect(r\"(?P<lladdr>fe80::[A-Fa-f:0-9]+)\\s\")"
    },
    {
        "line": 12,
        "fullcodeline": "lladdr_dst = child.match.group(\"lladdr\").lower()"
    },
    {
        "line": 13,
        "fullcodeline": "sniffer = Sniffer(tap)"
    },
    {
        "line": 15,
        "fullcodeline": "def run(func):"
    },
    {
        "line": 26,
        "fullcodeline": "run(test_wrong_type)"
    },
    {
        "line": 27,
        "fullcodeline": "run(test_inconsistent_header)"
    },
    {
        "line": 28,
        "fullcodeline": "run(test_multicast_dst)"
    },
    {
        "line": 29,
        "fullcodeline": "run(test_multicast_addr)"
    },
    {
        "line": 30,
        "fullcodeline": "run(test_multiple_addrs_of_mine_uncomp)"
    },
    {
        "line": 31,
        "fullcodeline": "run(test_forward_uncomp)"
    },
    {
        "line": 32,
        "fullcodeline": "run(test_forward_uncomp_not_first_ext_hdr)"
    },
    {
        "line": 35,
        "fullcodeline": "run(test_seq_left_0)"
    },
    {
        "line": 36,
        "fullcodeline": "run(test_time_exc)"
    },
    {
        "line": 37,
        "fullcodeline": "print(\"SUCCESS\")"
    }
]