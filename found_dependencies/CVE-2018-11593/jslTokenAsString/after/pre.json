[
    {
        "line": 2,
        "fullcodeline": "assert(len>28); // size of largest string"
    },
    {
        "line": 4,
        "fullcodeline": "if (token>32 && token<128) {"
    },
    {
        "line": 5,
        "fullcodeline": "assert(len>=4);"
    },
    {
        "line": 6,
        "fullcodeline": "str[0] = '\\'';"
    },
    {
        "line": 7,
        "fullcodeline": "str[1] = (char)token;"
    },
    {
        "line": 8,
        "fullcodeline": "str[2] = '\\'';"
    },
    {
        "line": 9,
        "fullcodeline": "str[3] = 0;"
    },
    {
        "line": 27,
        "fullcodeline": "if (token>=_LEX_OPERATOR_START && token<_LEX_R_LIST_END) {"
    },
    {
        "line": 28,
        "fullcodeline": "const char tokenNames[] ="
    },
    {
        "line": 92,
        "fullcodeline": "unsigned int p = 0;"
    },
    {
        "line": 93,
        "fullcodeline": "int n = token-_LEX_OPERATOR_START;"
    },
    {
        "line": 94,
        "fullcodeline": "while (n>0 && p<sizeof(tokenNames)) {"
    },
    {
        "line": 99,
        "fullcodeline": "assert(n==0);"
    },
    {
        "line": 96,
        "fullcodeline": "p++; // skip the zero"
    },
    {
        "line": 97,
        "fullcodeline": "n--; // next token"
    },
    {
        "line": 95,
        "fullcodeline": "while (tokenNames[p] && p<sizeof(tokenNames)) p++;"
    }
]