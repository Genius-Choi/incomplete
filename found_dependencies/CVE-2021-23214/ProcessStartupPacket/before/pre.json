[
    {
        "line": 8,
        "fullcodeline": "pq_startmsgread();"
    },
    {
        "line": 41,
        "fullcodeline": "len = pg_ntoh32(len);"
    },
    {
        "line": 42,
        "fullcodeline": "len -= 4;"
    },
    {
        "line": 58,
        "fullcodeline": "buf = palloc(len + 1);"
    },
    {
        "line": 59,
        "fullcodeline": "buf[len] = '\\0';"
    },
    {
        "line": 74,
        "fullcodeline": "port->proto = proto = pg_ntoh32(*((ProtocolVersion *) buf));"
    },
    {
        "line": 159,
        "fullcodeline": "FrontendProtocol = proto;"
    },
    {
        "line": 180,
        "fullcodeline": "oldcontext = MemoryContextSwitchTo(TopMemoryContext);"
    },
    {
        "line": 16,
        "fullcodeline": "if (pq_getbytes((char *) &len, 1) == EOF)"
    },
    {
        "line": 31,
        "fullcodeline": "if (pq_getbytes(((char *) &len) + 1, 3) == EOF)"
    },
    {
        "line": 76,
        "fullcodeline": "if (proto == CANCEL_REQUEST_CODE)"
    },
    {
        "line": 184,
        "fullcodeline": "int32\t\toffset = sizeof(ProtocolVersion);"
    },
    {
        "line": 185,
        "fullcodeline": "List\t   *unrecognized_protocol_options = NIL;"
    },
    {
        "line": 192,
        "fullcodeline": "port->guc_options = NIL;"
    },
    {
        "line": 323,
        "fullcodeline": "if (strlen(port->database_name) >= NAMEDATALEN)"
    },
    {
        "line": 325,
        "fullcodeline": "if (strlen(port->user_name) >= NAMEDATALEN)"
    },
    {
        "line": 44,
        "fullcodeline": "if (len < (int32) sizeof(ProtocolVersion) ||"
    },
    {
        "line": 45,
        "fullcodeline": "len > MAX_STARTUP_PACKET_LENGTH)"
    },
    {
        "line": 61,
        "fullcodeline": "if (pq_getbytes(buf, len) == EOF)"
    },
    {
        "line": 83,
        "fullcodeline": "if (proto == NEGOTIATE_SSL_CODE && !ssl_done)"
    },
    {
        "line": 94,
        "fullcodeline": "SSLok = 'N';\t\t\t/* No support for SSL */"
    },
    {
        "line": 162,
        "fullcodeline": "if (PG_PROTOCOL_MAJOR(proto) < PG_PROTOCOL_MAJOR(PG_PROTOCOL_EARLIEST) ||"
    },
    {
        "line": 163,
        "fullcodeline": "PG_PROTOCOL_MAJOR(proto) > PG_PROTOCOL_MAJOR(PG_PROTOCOL_LATEST))"
    },
    {
        "line": 164,
        "fullcodeline": "ereport(FATAL,"
    },
    {
        "line": 194,
        "fullcodeline": "while (offset < len)"
    },
    {
        "line": 292,
        "fullcodeline": "if (port->user_name == NULL || port->user_name[0] == '\\0')"
    },
    {
        "line": 293,
        "fullcodeline": "ereport(FATAL,"
    },
    {
        "line": 298,
        "fullcodeline": "if (port->database_name == NULL || port->database_name[0] == '\\0')"
    },
    {
        "line": 299,
        "fullcodeline": "port->database_name = pstrdup(port->user_name);"
    },
    {
        "line": 329,
        "fullcodeline": "MyBackendType = B_WAL_SENDER;"
    },
    {
        "line": 341,
        "fullcodeline": "if (am_walsender && !am_db_walsender)"
    },
    {
        "line": 48,
        "fullcodeline": "(errcode(ERRCODE_PROTOCOL_VIOLATION),"
    },
    {
        "line": 64,
        "fullcodeline": "(errcode(ERRCODE_PROTOCOL_VIOLATION),"
    },
    {
        "line": 118,
        "fullcodeline": "return ProcessStartupPacket(port, true, SSLok == 'S');"
    },
    {
        "line": 165,
        "fullcodeline": "(errcode(ERRCODE_FEATURE_NOT_SUPPORTED),"
    },
    {
        "line": 196,
        "fullcodeline": "char\t   *nameptr = buf + offset;"
    },
    {
        "line": 202,
        "fullcodeline": "valoffset = offset + strlen(nameptr) + 1;"
    },
    {
        "line": 205,
        "fullcodeline": "valptr = buf + valoffset;"
    },
    {
        "line": 268,
        "fullcodeline": "offset = valoffset + strlen(valptr) + 1;"
    },
    {
        "line": 275,
        "fullcodeline": "if (offset != len - 1)"
    },
    {
        "line": 276,
        "fullcodeline": "ereport(FATAL,"
    },
    {
        "line": 286,
        "fullcodeline": "if (PG_PROTOCOL_MINOR(proto) > PG_PROTOCOL_MINOR(PG_PROTOCOL_LATEST) ||"
    },
    {
        "line": 287,
        "fullcodeline": "unrecognized_protocol_options != NIL)"
    },
    {
        "line": 294,
        "fullcodeline": "(errcode(ERRCODE_INVALID_AUTHORIZATION_SPECIFICATION),"
    },
    {
        "line": 331,
        "fullcodeline": "MyBackendType = B_BACKEND;"
    },
    {
        "line": 358,
        "fullcodeline": "(errcode(ERRCODE_CANNOT_CONNECT_NOW),"
    },
    {
        "line": 375,
        "fullcodeline": "(errcode(ERRCODE_CANNOT_CONNECT_NOW),"
    },
    {
        "line": 380,
        "fullcodeline": "(errcode(ERRCODE_CANNOT_CONNECT_NOW),"
    },
    {
        "line": 385,
        "fullcodeline": "(errcode(ERRCODE_TOO_MANY_CONNECTIONS),"
    },
    {
        "line": 34,
        "fullcodeline": "if (!ssl_done && !gss_done)"
    },
    {
        "line": 98,
        "fullcodeline": "if (send(port->sock, &SSLok, 1, 0) != 1)"
    },
    {
        "line": 200,
        "fullcodeline": "if (*nameptr == '\\0')"
    },
    {
        "line": 203,
        "fullcodeline": "if (valoffset >= len)"
    },
    {
        "line": 277,
        "fullcodeline": "(errcode(ERRCODE_PROTOCOL_VIOLATION),"
    },
    {
        "line": 309,
        "fullcodeline": "if (strchr(port->user_name, '@') =="
    },
    {
        "line": 310,
        "fullcodeline": "port->user_name + strlen(port->user_name) - 1)"
    },
    {
        "line": 324,
        "fullcodeline": "port->database_name[NAMEDATALEN - 1] = '\\0';"
    },
    {
        "line": 36,
        "fullcodeline": "(errcode(ERRCODE_PROTOCOL_VIOLATION),"
    },
    {
        "line": 49,
        "fullcodeline": "errmsg(\"invalid length of startup packet\")));"
    },
    {
        "line": 65,
        "fullcodeline": "errmsg(\"incomplete startup packet\")));"
    },
    {
        "line": 103,
        "fullcodeline": "(errcode_for_socket_access(),"
    },
    {
        "line": 120,
        "fullcodeline": "else if (proto == NEGOTIATE_GSS_CODE && !gss_done)"
    },
    {
        "line": 122,
        "fullcodeline": "char\t\tGSSok = 'N';"
    },
    {
        "line": 166,
        "fullcodeline": "errmsg(\"unsupported frontend protocol %u.%u: server supports %u.0 to %u.%u\","
    },
    {
        "line": 207,
        "fullcodeline": "if (strcmp(nameptr, \"database\") == 0)"
    },
    {
        "line": 208,
        "fullcodeline": "port->database_name = pstrdup(valptr);"
    },
    {
        "line": 295,
        "fullcodeline": "errmsg(\"no PostgreSQL user name specified in startup packet\")));"
    },
    {
        "line": 315,
        "fullcodeline": "port->user_name = psprintf(\"%s@%s\", port->user_name, port->database_name);"
    },
    {
        "line": 359,
        "fullcodeline": "errmsg(\"the database system is starting up\")));"
    },
    {
        "line": 364,
        "fullcodeline": "(errcode(ERRCODE_CANNOT_CONNECT_NOW),"
    },
    {
        "line": 376,
        "fullcodeline": "errmsg(\"the database system is shutting down\")));"
    },
    {
        "line": 381,
        "fullcodeline": "errmsg(\"the database system is in recovery mode\")));"
    },
    {
        "line": 386,
        "fullcodeline": "errmsg(\"sorry, too many clients already\")));"
    },
    {
        "line": 150,
        "fullcodeline": "return ProcessStartupPacket(port, GSSok == 'G', true);"
    },
    {
        "line": 167,
        "fullcodeline": "PG_PROTOCOL_MAJOR(proto), PG_PROTOCOL_MINOR(proto),"
    },
    {
        "line": 168,
        "fullcodeline": "PG_PROTOCOL_MAJOR(PG_PROTOCOL_EARLIEST),"
    },
    {
        "line": 169,
        "fullcodeline": "PG_PROTOCOL_MAJOR(PG_PROTOCOL_LATEST),"
    },
    {
        "line": 170,
        "fullcodeline": "PG_PROTOCOL_MINOR(PG_PROTOCOL_LATEST))));"
    },
    {
        "line": 278,
        "fullcodeline": "errmsg(\"invalid startup packet layout: expected terminator as last byte\")));"
    },
    {
        "line": 311,
        "fullcodeline": "*strchr(port->user_name, '@') = '\\0';"
    },
    {
        "line": 369,
        "fullcodeline": "(errcode(ERRCODE_CANNOT_CONNECT_NOW),"
    },
    {
        "line": 37,
        "fullcodeline": "errmsg(\"incomplete startup packet\")));"
    },
    {
        "line": 104,
        "fullcodeline": "errmsg(\"failed to send SSL negotiation response: %m\")));"
    },
    {
        "line": 130,
        "fullcodeline": "while (send(port->sock, &GSSok, 1, 0) != 1)"
    },
    {
        "line": 365,
        "fullcodeline": "errmsg(\"the database system is not yet accepting connections\"),"
    },
    {
        "line": 366,
        "fullcodeline": "errdetail(\"Consistent recovery state has not been yet reached.\")));"
    },
    {
        "line": 135,
        "fullcodeline": "(errcode_for_socket_access(),"
    },
    {
        "line": 209,
        "fullcodeline": "else if (strcmp(nameptr, \"user\") == 0)"
    },
    {
        "line": 210,
        "fullcodeline": "port->user_name = pstrdup(valptr);"
    },
    {
        "line": 370,
        "fullcodeline": "errmsg(\"the database system is not accepting connections\"),"
    },
    {
        "line": 371,
        "fullcodeline": "errdetail(\"Hot standby mode is disabled.\")));"
    },
    {
        "line": 136,
        "fullcodeline": "errmsg(\"failed to send GSSAPI negotiation response: %m\")));"
    },
    {
        "line": 211,
        "fullcodeline": "else if (strcmp(nameptr, \"options\") == 0)"
    },
    {
        "line": 212,
        "fullcodeline": "port->cmdline_options = pstrdup(valptr);"
    },
    {
        "line": 213,
        "fullcodeline": "else if (strcmp(nameptr, \"replication\") == 0)"
    },
    {
        "line": 222,
        "fullcodeline": "if (strcmp(valptr, \"database\") == 0)"
    },
    {
        "line": 224,
        "fullcodeline": "am_walsender = true;"
    },
    {
        "line": 225,
        "fullcodeline": "am_db_walsender = true;"
    },
    {
        "line": 235,
        "fullcodeline": "else if (strncmp(nameptr, \"_pq_.\", 5) == 0)"
    },
    {
        "line": 242,
        "fullcodeline": "unrecognized_protocol_options ="
    },
    {
        "line": 243,
        "fullcodeline": "lappend(unrecognized_protocol_options, pstrdup(nameptr));"
    },
    {
        "line": 248,
        "fullcodeline": "port->guc_options = lappend(port->guc_options,"
    },
    {
        "line": 250,
        "fullcodeline": "port->guc_options = lappend(port->guc_options,"
    },
    {
        "line": 227,
        "fullcodeline": "else if (!parse_bool(valptr, &am_walsender))"
    },
    {
        "line": 228,
        "fullcodeline": "ereport(FATAL,"
    },
    {
        "line": 229,
        "fullcodeline": "(errcode(ERRCODE_INVALID_PARAMETER_VALUE),"
    },
    {
        "line": 249,
        "fullcodeline": "pstrdup(nameptr));"
    },
    {
        "line": 251,
        "fullcodeline": "pstrdup(valptr));"
    },
    {
        "line": 259,
        "fullcodeline": "if (strcmp(nameptr, \"application_name\") == 0)"
    },
    {
        "line": 261,
        "fullcodeline": "char\t   *tmp_app_name = pstrdup(valptr);"
    },
    {
        "line": 263,
        "fullcodeline": "pg_clean_ascii(tmp_app_name);"
    },
    {
        "line": 230,
        "fullcodeline": "errmsg(\"invalid value for parameter \\\"%s\\\": \\\"%s\\\"\","
    },
    {
        "line": 233,
        "fullcodeline": "errhint(\"Valid values are: \\\"false\\\", 0, \\\"true\\\", 1, \\\"database\\\".\")));"
    }
]