[
    {
        "line": 8,
        "fullcodeline": "pq_startmsgread();"
    },
    {
        "line": 41,
        "fullcodeline": "len = pg_ntoh32(len);"
    },
    {
        "line": 42,
        "fullcodeline": "len -= 4;"
    },
    {
        "line": 58,
        "fullcodeline": "buf = palloc(len + 1);"
    },
    {
        "line": 59,
        "fullcodeline": "buf[len] = '\\0';"
    },
    {
        "line": 68,
        "fullcodeline": "pq_endmsgread();"
    },
    {
        "line": 74,
        "fullcodeline": "port->proto = proto = pg_ntoh32(*((ProtocolVersion *) buf));"
    },
    {
        "line": 183,
        "fullcodeline": "FrontendProtocol = proto;"
    },
    {
        "line": 204,
        "fullcodeline": "oldcontext = MemoryContextSwitchTo(TopMemoryContext);"
    },
    {
        "line": 371,
        "fullcodeline": "MemoryContextSwitchTo(oldcontext);"
    },
    {
        "line": 16,
        "fullcodeline": "if (pq_getbytes((char *) &len, 1) == EOF)"
    },
    {
        "line": 31,
        "fullcodeline": "if (pq_getbytes(((char *) &len) + 1, 3) == EOF)"
    },
    {
        "line": 44,
        "fullcodeline": "if (len < (int32) sizeof(ProtocolVersion) ||"
    },
    {
        "line": 61,
        "fullcodeline": "if (pq_getbytes(buf, len) == EOF)"
    },
    {
        "line": 76,
        "fullcodeline": "if (proto == CANCEL_REQUEST_CODE)"
    },
    {
        "line": 83,
        "fullcodeline": "if (proto == NEGOTIATE_SSL_CODE && !ssl_done)"
    },
    {
        "line": 186,
        "fullcodeline": "if (PG_PROTOCOL_MAJOR(proto) < PG_PROTOCOL_MAJOR(PG_PROTOCOL_EARLIEST) ||"
    },
    {
        "line": 209,
        "fullcodeline": "List\t   *unrecognized_protocol_options = NIL;"
    },
    {
        "line": 216,
        "fullcodeline": "port->guc_options = NIL;"
    },
    {
        "line": 316,
        "fullcodeline": "if (port->user_name == NULL || port->user_name[0] == '\\0')"
    },
    {
        "line": 322,
        "fullcodeline": "if (port->database_name == NULL || port->database_name[0] == '\\0')"
    },
    {
        "line": 347,
        "fullcodeline": "if (strlen(port->database_name) >= NAMEDATALEN)"
    },
    {
        "line": 349,
        "fullcodeline": "if (strlen(port->user_name) >= NAMEDATALEN)"
    },
    {
        "line": 365,
        "fullcodeline": "if (am_walsender && !am_db_walsender)"
    },
    {
        "line": 45,
        "fullcodeline": "len > MAX_STARTUP_PACKET_LENGTH)"
    },
    {
        "line": 47,
        "fullcodeline": "ereport(COMMERROR,"
    },
    {
        "line": 63,
        "fullcodeline": "ereport(COMMERROR,"
    },
    {
        "line": 78,
        "fullcodeline": "processCancelRequest(port, buf);"
    },
    {
        "line": 94,
        "fullcodeline": "SSLok = 'N';\t\t\t/* No support for SSL */"
    },
    {
        "line": 187,
        "fullcodeline": "PG_PROTOCOL_MAJOR(proto) > PG_PROTOCOL_MAJOR(PG_PROTOCOL_LATEST))"
    },
    {
        "line": 188,
        "fullcodeline": "ereport(FATAL,"
    },
    {
        "line": 218,
        "fullcodeline": "while (offset < len)"
    },
    {
        "line": 299,
        "fullcodeline": "if (offset != len - 1)"
    },
    {
        "line": 310,
        "fullcodeline": "if (PG_PROTOCOL_MINOR(proto) > PG_PROTOCOL_MINOR(PG_PROTOCOL_LATEST) ||"
    },
    {
        "line": 317,
        "fullcodeline": "ereport(FATAL,"
    },
    {
        "line": 323,
        "fullcodeline": "port->database_name = pstrdup(port->user_name);"
    },
    {
        "line": 348,
        "fullcodeline": "port->database_name[NAMEDATALEN - 1] = '\\0';"
    },
    {
        "line": 350,
        "fullcodeline": "port->user_name[NAMEDATALEN - 1] = '\\0';"
    },
    {
        "line": 353,
        "fullcodeline": "MyBackendType = B_WAL_SENDER;"
    },
    {
        "line": 366,
        "fullcodeline": "port->database_name[0] = '\\0';"
    },
    {
        "line": 381,
        "fullcodeline": "ereport(FATAL,"
    },
    {
        "line": 398,
        "fullcodeline": "ereport(FATAL,"
    },
    {
        "line": 403,
        "fullcodeline": "ereport(FATAL,"
    },
    {
        "line": 408,
        "fullcodeline": "ereport(FATAL,"
    },
    {
        "line": 34,
        "fullcodeline": "if (!ssl_done && !gss_done)"
    },
    {
        "line": 48,
        "fullcodeline": "(errcode(ERRCODE_PROTOCOL_VIOLATION),"
    },
    {
        "line": 64,
        "fullcodeline": "(errcode(ERRCODE_PROTOCOL_VIOLATION),"
    },
    {
        "line": 98,
        "fullcodeline": "if (send(port->sock, &SSLok, 1, 0) != 1)"
    },
    {
        "line": 119,
        "fullcodeline": "if (pq_buffer_has_data())"
    },
    {
        "line": 130,
        "fullcodeline": "return ProcessStartupPacket(port, true, SSLok == 'S');"
    },
    {
        "line": 189,
        "fullcodeline": "(errcode(ERRCODE_FEATURE_NOT_SUPPORTED),"
    },
    {
        "line": 220,
        "fullcodeline": "char\t   *nameptr = buf + offset;"
    },
    {
        "line": 226,
        "fullcodeline": "valoffset = offset + strlen(nameptr) + 1;"
    },
    {
        "line": 229,
        "fullcodeline": "valptr = buf + valoffset;"
    },
    {
        "line": 292,
        "fullcodeline": "offset = valoffset + strlen(valptr) + 1;"
    },
    {
        "line": 300,
        "fullcodeline": "ereport(FATAL,"
    },
    {
        "line": 311,
        "fullcodeline": "unrecognized_protocol_options != NIL)"
    },
    {
        "line": 312,
        "fullcodeline": "SendNegotiateProtocolVersion(unrecognized_protocol_options);"
    },
    {
        "line": 318,
        "fullcodeline": "(errcode(ERRCODE_INVALID_AUTHORIZATION_SPECIFICATION),"
    },
    {
        "line": 333,
        "fullcodeline": "if (strchr(port->user_name, '@') =="
    },
    {
        "line": 355,
        "fullcodeline": "MyBackendType = B_BACKEND;"
    },
    {
        "line": 382,
        "fullcodeline": "(errcode(ERRCODE_CANNOT_CONNECT_NOW),"
    },
    {
        "line": 399,
        "fullcodeline": "(errcode(ERRCODE_CANNOT_CONNECT_NOW),"
    },
    {
        "line": 404,
        "fullcodeline": "(errcode(ERRCODE_CANNOT_CONNECT_NOW),"
    },
    {
        "line": 409,
        "fullcodeline": "(errcode(ERRCODE_TOO_MANY_CONNECTIONS),"
    },
    {
        "line": 35,
        "fullcodeline": "ereport(COMMERROR,"
    },
    {
        "line": 102,
        "fullcodeline": "ereport(COMMERROR,"
    },
    {
        "line": 120,
        "fullcodeline": "ereport(FATAL,"
    },
    {
        "line": 132,
        "fullcodeline": "else if (proto == NEGOTIATE_GSS_CODE && !gss_done)"
    },
    {
        "line": 224,
        "fullcodeline": "if (*nameptr == '\\0')"
    },
    {
        "line": 227,
        "fullcodeline": "if (valoffset >= len)"
    },
    {
        "line": 231,
        "fullcodeline": "if (strcmp(nameptr, \"database\") == 0)"
    },
    {
        "line": 301,
        "fullcodeline": "(errcode(ERRCODE_PROTOCOL_VIOLATION),"
    },
    {
        "line": 334,
        "fullcodeline": "port->user_name + strlen(port->user_name) - 1)"
    },
    {
        "line": 335,
        "fullcodeline": "*strchr(port->user_name, '@') = '\\0';"
    },
    {
        "line": 387,
        "fullcodeline": "ereport(FATAL,"
    },
    {
        "line": 36,
        "fullcodeline": "(errcode(ERRCODE_PROTOCOL_VIOLATION),"
    },
    {
        "line": 49,
        "fullcodeline": "errmsg(\"invalid length of startup packet\")));"
    },
    {
        "line": 65,
        "fullcodeline": "errmsg(\"incomplete startup packet\")));"
    },
    {
        "line": 100,
        "fullcodeline": "if (errno == EINTR)"
    },
    {
        "line": 103,
        "fullcodeline": "(errcode_for_socket_access(),"
    },
    {
        "line": 121,
        "fullcodeline": "(errcode(ERRCODE_PROTOCOL_VIOLATION),"
    },
    {
        "line": 134,
        "fullcodeline": "char\t\tGSSok = 'N';"
    },
    {
        "line": 190,
        "fullcodeline": "errmsg(\"unsupported frontend protocol %u.%u: server supports %u.0 to %u.%u\","
    },
    {
        "line": 232,
        "fullcodeline": "port->database_name = pstrdup(valptr);"
    },
    {
        "line": 319,
        "fullcodeline": "errmsg(\"no PostgreSQL user name specified in startup packet\")));"
    },
    {
        "line": 339,
        "fullcodeline": "port->user_name = psprintf(\"%s@%s\", port->user_name, port->database_name);"
    },
    {
        "line": 383,
        "fullcodeline": "errmsg(\"the database system is starting up\")));"
    },
    {
        "line": 388,
        "fullcodeline": "(errcode(ERRCODE_CANNOT_CONNECT_NOW),"
    },
    {
        "line": 392,
        "fullcodeline": "ereport(FATAL,"
    },
    {
        "line": 400,
        "fullcodeline": "errmsg(\"the database system is shutting down\")));"
    },
    {
        "line": 405,
        "fullcodeline": "errmsg(\"the database system is in recovery mode\")));"
    },
    {
        "line": 410,
        "fullcodeline": "errmsg(\"sorry, too many clients already\")));"
    },
    {
        "line": 142,
        "fullcodeline": "while (send(port->sock, &GSSok, 1, 0) != 1)"
    },
    {
        "line": 163,
        "fullcodeline": "if (pq_buffer_has_data())"
    },
    {
        "line": 174,
        "fullcodeline": "return ProcessStartupPacket(port, GSSok == 'G', true);"
    },
    {
        "line": 191,
        "fullcodeline": "PG_PROTOCOL_MAJOR(proto), PG_PROTOCOL_MINOR(proto),"
    },
    {
        "line": 192,
        "fullcodeline": "PG_PROTOCOL_MAJOR(PG_PROTOCOL_EARLIEST),"
    },
    {
        "line": 193,
        "fullcodeline": "PG_PROTOCOL_MAJOR(PG_PROTOCOL_LATEST),"
    },
    {
        "line": 194,
        "fullcodeline": "PG_PROTOCOL_MINOR(PG_PROTOCOL_LATEST))));"
    },
    {
        "line": 302,
        "fullcodeline": "errmsg(\"invalid startup packet layout: expected terminator as last byte\")));"
    },
    {
        "line": 393,
        "fullcodeline": "(errcode(ERRCODE_CANNOT_CONNECT_NOW),"
    },
    {
        "line": 37,
        "fullcodeline": "errmsg(\"incomplete startup packet\")));"
    },
    {
        "line": 104,
        "fullcodeline": "errmsg(\"failed to send SSL negotiation response: %m\")));"
    },
    {
        "line": 122,
        "fullcodeline": "errmsg(\"received unencrypted data after SSL request\"),"
    },
    {
        "line": 123,
        "fullcodeline": "errdetail(\"This could be either a client-software bug or evidence of an attempted man-in-the-middle attack.\")));"
    },
    {
        "line": 146,
        "fullcodeline": "ereport(COMMERROR,"
    },
    {
        "line": 164,
        "fullcodeline": "ereport(FATAL,"
    },
    {
        "line": 233,
        "fullcodeline": "else if (strcmp(nameptr, \"user\") == 0)"
    },
    {
        "line": 389,
        "fullcodeline": "errmsg(\"the database system is not yet accepting connections\"),"
    },
    {
        "line": 390,
        "fullcodeline": "errdetail(\"Consistent recovery state has not been yet reached.\")));"
    },
    {
        "line": 144,
        "fullcodeline": "if (errno == EINTR)"
    },
    {
        "line": 147,
        "fullcodeline": "(errcode_for_socket_access(),"
    },
    {
        "line": 165,
        "fullcodeline": "(errcode(ERRCODE_PROTOCOL_VIOLATION),"
    },
    {
        "line": 234,
        "fullcodeline": "port->user_name = pstrdup(valptr);"
    },
    {
        "line": 394,
        "fullcodeline": "errmsg(\"the database system is not accepting connections\"),"
    },
    {
        "line": 395,
        "fullcodeline": "errdetail(\"Hot standby mode is disabled.\")));"
    },
    {
        "line": 148,
        "fullcodeline": "errmsg(\"failed to send GSSAPI negotiation response: %m\")));"
    },
    {
        "line": 166,
        "fullcodeline": "errmsg(\"received unencrypted data after GSSAPI encryption request\"),"
    },
    {
        "line": 167,
        "fullcodeline": "errdetail(\"This could be either a client-software bug or evidence of an attempted man-in-the-middle attack.\")));"
    },
    {
        "line": 235,
        "fullcodeline": "else if (strcmp(nameptr, \"options\") == 0)"
    },
    {
        "line": 236,
        "fullcodeline": "port->cmdline_options = pstrdup(valptr);"
    },
    {
        "line": 237,
        "fullcodeline": "else if (strcmp(nameptr, \"replication\") == 0)"
    },
    {
        "line": 246,
        "fullcodeline": "if (strcmp(valptr, \"database\") == 0)"
    },
    {
        "line": 248,
        "fullcodeline": "am_walsender = true;"
    },
    {
        "line": 249,
        "fullcodeline": "am_db_walsender = true;"
    },
    {
        "line": 259,
        "fullcodeline": "else if (strncmp(nameptr, \"_pq_.\", 5) == 0)"
    },
    {
        "line": 266,
        "fullcodeline": "unrecognized_protocol_options ="
    },
    {
        "line": 251,
        "fullcodeline": "else if (!parse_bool(valptr, &am_walsender))"
    },
    {
        "line": 267,
        "fullcodeline": "lappend(unrecognized_protocol_options, pstrdup(nameptr));"
    },
    {
        "line": 272,
        "fullcodeline": "port->guc_options = lappend(port->guc_options,"
    },
    {
        "line": 274,
        "fullcodeline": "port->guc_options = lappend(port->guc_options,"
    },
    {
        "line": 252,
        "fullcodeline": "ereport(FATAL,"
    },
    {
        "line": 283,
        "fullcodeline": "if (strcmp(nameptr, \"application_name\") == 0)"
    },
    {
        "line": 253,
        "fullcodeline": "(errcode(ERRCODE_INVALID_PARAMETER_VALUE),"
    },
    {
        "line": 273,
        "fullcodeline": "pstrdup(nameptr));"
    },
    {
        "line": 275,
        "fullcodeline": "pstrdup(valptr));"
    },
    {
        "line": 285,
        "fullcodeline": "char\t   *tmp_app_name = pstrdup(valptr);"
    },
    {
        "line": 287,
        "fullcodeline": "pg_clean_ascii(tmp_app_name);"
    },
    {
        "line": 289,
        "fullcodeline": "port->application_name = tmp_app_name;"
    },
    {
        "line": 254,
        "fullcodeline": "errmsg(\"invalid value for parameter \\\"%s\\\": \\\"%s\\\"\","
    },
    {
        "line": 257,
        "fullcodeline": "errhint(\"Valid values are: \\\"false\\\", 0, \\\"true\\\", 1, \\\"database\\\".\")));"
    }
]