[
    {
        "line": 11,
        "fullcodeline": "PJ_ASSERT_RETURN(endpt && p_tp, PJ_EINVAL);"
    },
    {
        "line": 14,
        "fullcodeline": "pool = pjmedia_endpt_create_pool(endpt, \"tploop\", 512, 512);"
    },
    {
        "line": 19,
        "fullcodeline": "tp->pool = pool;"
    },
    {
        "line": 20,
        "fullcodeline": "pj_memcpy(tp->base.name, tp->pool->obj_name, PJ_MAX_OBJ_NAME);"
    },
    {
        "line": 21,
        "fullcodeline": "tp->base.op = &transport_udp_op;"
    },
    {
        "line": 22,
        "fullcodeline": "tp->base.type = PJMEDIA_TRANSPORT_TYPE_UDP;"
    },
    {
        "line": 25,
        "fullcodeline": "status = pj_grp_lock_create(pool, NULL, &grp_lock);"
    },
    {
        "line": 29,
        "fullcodeline": "pj_grp_lock_add_ref(grp_lock);"
    },
    {
        "line": 30,
        "fullcodeline": "pj_grp_lock_add_handler(grp_lock, pool, tp, &tp_loop_on_destroy);"
    },
    {
        "line": 50,
        "fullcodeline": "tp->users = (struct tp_user *)pj_pool_calloc(pool, tp->max_attach_cnt, sizeof(struct tp_user));"
    },
    {
        "line": 53,
        "fullcodeline": "*p_tp = &tp->base;"
    },
    {
        "line": 15,
        "fullcodeline": "if (!pool)"
    },
    {
        "line": 26,
        "fullcodeline": "if (status != PJ_SUCCESS)"
    },
    {
        "line": 43,
        "fullcodeline": "if (tp->setting.port == 0)"
    },
    {
        "line": 48,
        "fullcodeline": "if (tp->max_attach_cnt == 0)"
    },
    {
        "line": 38,
        "fullcodeline": "pj_strdup(pool, &tp->setting.addr, &opt->addr);"
    },
    {
        "line": 44,
        "fullcodeline": "tp->setting.port = 4000;"
    },
    {
        "line": 49,
        "fullcodeline": "tp->max_attach_cnt = 1;"
    },
    {
        "line": 35,
        "fullcodeline": "pjmedia_loop_tp_setting_default(&tp->setting);"
    },
    {
        "line": 40,
        "fullcodeline": "pj_strset2(&tp->setting.addr, (tp->setting.af == pj_AF_INET())?"
    }
]