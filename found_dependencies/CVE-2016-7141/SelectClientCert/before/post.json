[
    {
        "line": 6,
        "fullcodeline": "struct ssl_connect_data *connssl = (struct ssl_connect_data *)arg;"
    },
    {
        "line": 7,
        "fullcodeline": "struct Curl_easy *data = connssl->data;"
    },
    {
        "line": 8,
        "fullcodeline": "const char *nickname = connssl->client_nickname;"
    },
    {
        "line": 79,
        "fullcodeline": "infof(data, \"NSS: using client certificate: %s\\n\", nickname);"
    },
    {
        "line": 80,
        "fullcodeline": "display_cert_info(data, *pRetCert);"
    },
    {
        "line": 56,
        "fullcodeline": "if(SECSuccess != NSS_GetClientAuthData((void *)nickname, sock, caNames,"
    },
    {
        "line": 71,
        "fullcodeline": "if(NULL == nickname)"
    },
    {
        "line": 74,
        "fullcodeline": "if(NULL == *pRetKey) {"
    },
    {
        "line": 12,
        "fullcodeline": "static const char pem_slotname[] = \"PEM Token #1\";"
    },
    {
        "line": 13,
        "fullcodeline": "SECItem cert_der = { 0, NULL, 0 };"
    },
    {
        "line": 14,
        "fullcodeline": "void *proto_win = SSL_RevealPinArg(sock);"
    },
    {
        "line": 18,
        "fullcodeline": "PK11SlotInfo *slot = PK11_FindSlotByName(pem_slotname);"
    },
    {
        "line": 31,
        "fullcodeline": "cert = PK11_FindCertFromDERCertItem(slot, &cert_der, proto_win);"
    },
    {
        "line": 32,
        "fullcodeline": "SECITEM_FreeItem(&cert_der, PR_FALSE);"
    },
    {
        "line": 39,
        "fullcodeline": "key = PK11_FindPrivateKeyFromCert(slot, cert, NULL);"
    },
    {
        "line": 40,
        "fullcodeline": "PK11_FreeSlot(slot);"
    },
    {
        "line": 47,
        "fullcodeline": "infof(data, \"NSS: client certificate from file\\n\");"
    },
    {
        "line": 48,
        "fullcodeline": "display_cert_info(data, cert);"
    },
    {
        "line": 50,
        "fullcodeline": "*pRetCert = cert;"
    },
    {
        "line": 51,
        "fullcodeline": "*pRetKey = key;"
    },
    {
        "line": 58,
        "fullcodeline": "|| NULL == *pRetCert) {"
    },
    {
        "line": 72,
        "fullcodeline": "nickname = \"[unknown]\";"
    },
    {
        "line": 75,
        "fullcodeline": "failf(data, \"NSS: private key not found for certificate: %s\", nickname);"
    },
    {
        "line": 19,
        "fullcodeline": "if(NULL == slot) {"
    },
    {
        "line": 24,
        "fullcodeline": "if(PK11_ReadRawAttribute(PK11_TypeGeneric, connssl->obj_clicert, CKA_VALUE,"
    },
    {
        "line": 33,
        "fullcodeline": "if(NULL == cert) {"
    },
    {
        "line": 41,
        "fullcodeline": "if(NULL == key) {"
    },
    {
        "line": 60,
        "fullcodeline": "if(NULL == nickname)"
    },
    {
        "line": 20,
        "fullcodeline": "failf(data, \"NSS: PK11 slot not found: %s\", pem_slotname);"
    },
    {
        "line": 26,
        "fullcodeline": "failf(data, \"NSS: CKA_VALUE not found in PK11 generic object\");"
    },
    {
        "line": 27,
        "fullcodeline": "PK11_FreeSlot(slot);"
    },
    {
        "line": 34,
        "fullcodeline": "failf(data, \"NSS: client certificate from file not found\");"
    },
    {
        "line": 35,
        "fullcodeline": "PK11_FreeSlot(slot);"
    },
    {
        "line": 42,
        "fullcodeline": "failf(data, \"NSS: private key from file not found\");"
    },
    {
        "line": 43,
        "fullcodeline": "CERT_DestroyCertificate(cert);"
    },
    {
        "line": 61,
        "fullcodeline": "failf(data, \"NSS: client certificate not found (nickname not \""
    },
    {
        "line": 64,
        "fullcodeline": "failf(data, \"NSS: client certificate not found: %s\", nickname);"
    }
]