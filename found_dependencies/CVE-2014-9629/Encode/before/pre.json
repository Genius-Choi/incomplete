[
    {
        "line": 3,
        "fullcodeline": "encoder_sys_t *p_sys = p_enc->p_sys;"
    },
    {
        "line": 4,
        "fullcodeline": "block_t *p_block, *p_output_chain = NULL;"
    },
    {
        "line": 6,
        "fullcodeline": "bool b_go = true;"
    },
    {
        "line": 8,
        "fullcodeline": "if( !p_pic ) {"
    },
    {
        "line": 43,
        "fullcodeline": "date_Init( &date, p_enc->fmt_in.video.i_frame_rate, p_enc->fmt_in.video.i_frame_rate_base );"
    },
    {
        "line": 47,
        "fullcodeline": "date_Increment( &date, 1 );"
    },
    {
        "line": 48,
        "fullcodeline": "p_sys->i_pts_offset = date_Get( &date );"
    },
    {
        "line": 55,
        "fullcodeline": "schro_video_format_set_std_signal_range( p_sys->p_format, SCHRO_SIGNAL_RANGE_8BIT_VIDEO );"
    },
    {
        "line": 56,
        "fullcodeline": "schro_encoder_set_video_format( p_sys->p_schro, p_sys->p_format );"
    },
    {
        "line": 57,
        "fullcodeline": "schro_encoder_start( p_sys->p_schro );"
    },
    {
        "line": 65,
        "fullcodeline": "picture_Hold( p_pic );"
    },
    {
        "line": 67,
        "fullcodeline": "p_frame = CreateSchroFrameFromInputPic( p_enc, p_pic );"
    },
    {
        "line": 70,
        "fullcodeline": "schro_encoder_push_frame( p_sys->p_schro, p_frame );"
    },
    {
        "line": 75,
        "fullcodeline": "StorePicturePTS( p_enc, p_sys->i_input_picnum, p_pic->date );"
    },
    {
        "line": 76,
        "fullcodeline": "p_sys->i_input_picnum++;"
    },
    {
        "line": 80,
        "fullcodeline": "p_block = block_Alloc( 1 );"
    },
    {
        "line": 83,
        "fullcodeline": "p_block->i_dts = p_pic->date - p_sys->i_pts_offset;"
    },
    {
        "line": 84,
        "fullcodeline": "block_FifoPut( p_sys->p_dts_fifo, p_block );"
    },
    {
        "line": 9,
        "fullcodeline": "if( !p_sys->started || p_sys->b_eos_pulled )"
    },
    {
        "line": 12,
        "fullcodeline": "if( !p_sys->b_eos_signalled ) {"
    },
    {
        "line": 20,
        "fullcodeline": "p_sys->p_format->interlaced = !p_pic->b_progressive;"
    },
    {
        "line": 21,
        "fullcodeline": "p_sys->p_format->top_field_first = p_pic->b_top_field_first;"
    },
    {
        "line": 30,
        "fullcodeline": "if( p_pic->format.i_chroma != p_enc->fmt_in.i_codec ) {"
    },
    {
        "line": 68,
        "fullcodeline": "if( !p_frame )"
    },
    {
        "line": 81,
        "fullcodeline": "if( !p_block )"
    },
    {
        "line": 106,
        "fullcodeline": "state = schro_encoder_wait( p_sys->p_schro );"
    },
    {
        "line": 13,
        "fullcodeline": "p_sys->b_eos_signalled = 1;"
    },
    {
        "line": 14,
        "fullcodeline": "schro_encoder_end_of_stream( p_sys->p_schro );"
    },
    {
        "line": 31,
        "fullcodeline": "char chroma_in[5], chroma_out[5];"
    },
    {
        "line": 32,
        "fullcodeline": "vlc_fourcc_to_char( p_pic->format.i_chroma, chroma_in );"
    },
    {
        "line": 33,
        "fullcodeline": "chroma_in[4]  = '\\0';"
    },
    {
        "line": 34,
        "fullcodeline": "chroma_out[4] = '\\0';"
    },
    {
        "line": 35,
        "fullcodeline": "vlc_fourcc_to_char( p_enc->fmt_in.i_codec, chroma_out );"
    },
    {
        "line": 36,
        "fullcodeline": "msg_Warn( p_enc, \"Resetting chroma from %s to %s\", chroma_out, chroma_in );"
    },
    {
        "line": 49,
        "fullcodeline": "if( schro_encoder_setting_get_double( p_sys->p_schro, \"interlaced_coding\" ) > 0.0 ) {"
    },
    {
        "line": 50,
        "fullcodeline": "date_Set( &date, 0 );"
    },
    {
        "line": 51,
        "fullcodeline": "date_Increment( &date, 1);"
    },
    {
        "line": 52,
        "fullcodeline": "p_sys->i_field_time = date_Get( &date ) / 2;"
    },
    {
        "line": 90,
        "fullcodeline": "if( schro_encoder_setting_get_double( p_sys->p_schro, \"interlaced_coding\" ) > 0.0 ) {"
    },
    {
        "line": 91,
        "fullcodeline": "StorePicturePTS( p_enc, p_sys->i_input_picnum, p_pic->date + p_sys->i_field_time );"
    },
    {
        "line": 94,
        "fullcodeline": "p_block = block_Alloc( 1 );"
    },
    {
        "line": 97,
        "fullcodeline": "p_block->i_dts = p_pic->date - p_sys->i_pts_offset + p_sys->i_field_time;"
    },
    {
        "line": 98,
        "fullcodeline": "block_FifoPut( p_sys->p_dts_fifo, p_block );"
    },
    {
        "line": 24,
        "fullcodeline": "schro_encoder_setting_set_double( p_sys->p_schro, \"interlaced_coding\", !p_pic->b_progressive );"
    },
    {
        "line": 95,
        "fullcodeline": "if( !p_block )"
    },
    {
        "line": 123,
        "fullcodeline": "p_enc_buf = schro_encoder_pull( p_sys->p_schro, &i_presentation_frame );"
    },
    {
        "line": 124,
        "fullcodeline": "p_block = block_Alloc( p_enc_buf->length );"
    },
    {
        "line": 128,
        "fullcodeline": "memcpy( p_block->p_buffer, p_enc_buf->data, p_enc_buf->length );"
    },
    {
        "line": 37,
        "fullcodeline": "if( !SetEncChromaFormat( p_enc, p_pic->format.i_chroma ) ) {"
    },
    {
        "line": 125,
        "fullcodeline": "if( !p_block )"
    },
    {
        "line": 132,
        "fullcodeline": "if( 0 == p_block->p_buffer[4] )"
    },
    {
        "line": 155,
        "fullcodeline": "if( ReadDiracPictureNumber( &u_pic_num, p_block ) ) {"
    },
    {
        "line": 134,
        "fullcodeline": "p_block->i_flags |= BLOCK_FLAG_TYPE_I;"
    },
    {
        "line": 156,
        "fullcodeline": "block_t *p_dts_block = block_FifoGet( p_sys->p_dts_fifo );"
    },
    {
        "line": 157,
        "fullcodeline": "p_block->i_dts = p_dts_block->i_dts;"
    },
    {
        "line": 158,
        "fullcodeline": "p_block->i_pts = GetPicturePTS( p_enc, u_pic_num );"
    },
    {
        "line": 160,
        "fullcodeline": "block_ChainAppend( &p_output_chain, p_block );"
    },
    {
        "line": 163,
        "fullcodeline": "block_ChainAppend( &p_output_chain, p_block );"
    },
    {
        "line": 138,
        "fullcodeline": "uint32_t len = GetDWBE( p_block->p_buffer + 5 );"
    },
    {
        "line": 145,
        "fullcodeline": "p_enc->fmt_out.p_extra = malloc( len + sizeof( eos ) );"
    },
    {
        "line": 148,
        "fullcodeline": "memcpy( p_enc->fmt_out.p_extra, p_block->p_buffer, len );"
    },
    {
        "line": 150,
        "fullcodeline": "SetDWBE( (uint8_t*)p_enc->fmt_out.p_extra + len + sizeof(eos) - 4, len );"
    },
    {
        "line": 137,
        "fullcodeline": "const uint8_t eos[] = { 'B','B','C','D',0x10,0,0,0,13,0,0,0,0 };"
    },
    {
        "line": 146,
        "fullcodeline": "if( !p_enc->fmt_out.p_extra )"
    }
]