[
    {
        "line": 2,
        "fullcodeline": "parser = argparse.ArgumentParser()"
    },
    {
        "line": 5,
        "fullcodeline": "logging.basicConfig("
    },
    {
        "line": 11,
        "fullcodeline": "parser.add_argument(\"-d\", \"--debug\", action=\"store_true\")"
    },
    {
        "line": 12,
        "fullcodeline": "parser.add_argument("
    },
    {
        "line": 18,
        "fullcodeline": "parser.add_argument("
    },
    {
        "line": 23,
        "fullcodeline": "parser.add_argument("
    },
    {
        "line": 26,
        "fullcodeline": "parser.add_argument(\"out_graph\")"
    },
    {
        "line": 27,
        "fullcodeline": "parser.add_argument("
    },
    {
        "line": 31,
        "fullcodeline": "parser.add_argument(\"in_graph\", nargs=\"+\")"
    },
    {
        "line": 32,
        "fullcodeline": "args = parser.parse_args()"
    },
    {
        "line": 34,
        "fullcodeline": "in_graph = rdflib.Graph()"
    },
    {
        "line": 39,
        "fullcodeline": "out_graph = rdflib.Graph()"
    },
    {
        "line": 42,
        "fullcodeline": "nsdict = {k: v for (k, v) in in_graph.namespace_manager.namespaces()}"
    },
    {
        "line": 46,
        "fullcodeline": "_logger.debug(\"Running query in %r.\" % args.in_sparql)"
    },
    {
        "line": 47,
        "fullcodeline": "construct_query_text = None"
    },
    {
        "line": 50,
        "fullcodeline": "assert not construct_query_text is None"
    },
    {
        "line": 57,
        "fullcodeline": "construct_query_object = rdflib.plugins.sparql.prepareQuery("
    },
    {
        "line": 62,
        "fullcodeline": "construct_query_result = in_graph.query(construct_query_object)"
    },
    {
        "line": 63,
        "fullcodeline": "_logger.debug(\"type(construct_query_result) = %r.\" % type(construct_query_result))"
    },
    {
        "line": 64,
        "fullcodeline": "_logger.debug(\"len(construct_query_result) = %d.\" % len(construct_query_result))"
    },
    {
        "line": 70,
        "fullcodeline": "output_format = None"
    },
    {
        "line": 76,
        "fullcodeline": "serialize_kwargs: typing.Dict[str, typing.Any] = {\"format\": output_format}"
    },
    {
        "line": 83,
        "fullcodeline": "out_graph.serialize(args.out_graph, **serialize_kwargs)"
    },
    {
        "line": 14,
        "fullcodeline": "choices=tuple(built_version_choices_list),"
    },
    {
        "line": 15,
        "fullcodeline": "default=\"case-\" + CURRENT_CASE_VERSION,"
    },
    {
        "line": 35,
        "fullcodeline": "for in_graph_filename in args.in_graph:"
    },
    {
        "line": 43,
        "fullcodeline": "for prefix in sorted(nsdict.keys()):"
    },
    {
        "line": 48,
        "fullcodeline": "with open(args.in_sparql, \"r\") as in_fh:"
    },
    {
        "line": 52,
        "fullcodeline": "if \"subClassOf\" in construct_query_text:"
    },
    {
        "line": 65,
        "fullcodeline": "for row_no, row in enumerate(construct_query_result):"
    },
    {
        "line": 71,
        "fullcodeline": "if args.output_format is None:"
    },
    {
        "line": 77,
        "fullcodeline": "if output_format == \"json-ld\":"
    },
    {
        "line": 7,
        "fullcodeline": "if (\"--debug\" in sys.argv or \"-d\" in sys.argv)"
    },
    {
        "line": 72,
        "fullcodeline": "output_format = rdflib.util.guess_format(args.out_graph)"
    },
    {
        "line": 74,
        "fullcodeline": "output_format = args.output_format"
    },
    {
        "line": 78,
        "fullcodeline": "context_dictionary = {"
    },
    {
        "line": 81,
        "fullcodeline": "serialize_kwargs[\"context\"] = context_dictionary"
    },
    {
        "line": 36,
        "fullcodeline": "in_graph.parse(in_graph_filename)"
    },
    {
        "line": 37,
        "fullcodeline": "_logger.debug(\"len(in_graph) = %d.\", len(in_graph))"
    },
    {
        "line": 44,
        "fullcodeline": "out_graph.bind(prefix, nsdict[prefix])"
    },
    {
        "line": 49,
        "fullcodeline": "construct_query_text = in_fh.read().strip()"
    },
    {
        "line": 53,
        "fullcodeline": "case_utils.ontology.load_subclass_hierarchy("
    },
    {
        "line": 68,
        "fullcodeline": "out_graph.add(row)"
    },
    {
        "line": 66,
        "fullcodeline": "if row_no == 0:"
    },
    {
        "line": 67,
        "fullcodeline": "_logger.debug(\"row[0] = %r.\" % (row,))"
    },
    {
        "line": 79,
        "fullcodeline": "k: v for (k, v) in out_graph.namespace_manager.namespaces()"
    }
]