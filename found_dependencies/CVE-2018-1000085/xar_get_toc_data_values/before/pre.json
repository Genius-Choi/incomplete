[
    {
        "line": 5,
        "fullcodeline": "int indata = 0, inea = 0;"
    },
    {
        "line": 6,
        "fullcodeline": "int rc, gotoffset=0, gotlength=0, gotsize=0;"
    },
    {
        "line": 8,
        "fullcodeline": "*a_cksum = NULL;"
    },
    {
        "line": 9,
        "fullcodeline": "*a_hash = XAR_CKSUM_NONE;"
    },
    {
        "line": 10,
        "fullcodeline": "*e_cksum = NULL;"
    },
    {
        "line": 11,
        "fullcodeline": "*e_hash = XAR_CKSUM_NONE;"
    },
    {
        "line": 12,
        "fullcodeline": "*encoding = CL_TYPE_ANY;"
    },
    {
        "line": 14,
        "fullcodeline": "rc = xmlTextReaderRead(reader);"
    },
    {
        "line": 15,
        "fullcodeline": "while (rc == 1) {"
    },
    {
        "line": 101,
        "fullcodeline": "if (gotoffset && gotlength && gotsize) {"
    },
    {
        "line": 16,
        "fullcodeline": "name = xmlTextReaderConstLocalName(reader);"
    },
    {
        "line": 98,
        "fullcodeline": "rc = xmlTextReaderRead(reader);"
    },
    {
        "line": 102,
        "fullcodeline": "rc = CL_SUCCESS;"
    },
    {
        "line": 17,
        "fullcodeline": "if (indata || inea) {"
    },
    {
        "line": 104,
        "fullcodeline": "else if (0 == gotoffset + gotlength + gotsize)"
    },
    {
        "line": 19,
        "fullcodeline": "if (xmlStrEqual(name, (const xmlChar *)\"offset\") &&"
    },
    {
        "line": 105,
        "fullcodeline": "rc = CL_BREAK;"
    },
    {
        "line": 20,
        "fullcodeline": "xmlTextReaderNodeType(reader) == XML_READER_TYPE_ELEMENT) {"
    },
    {
        "line": 84,
        "fullcodeline": "if (xmlTextReaderNodeType(reader) == XML_READER_TYPE_ELEMENT) {"
    },
    {
        "line": 107,
        "fullcodeline": "rc = CL_EFORMAT;"
    },
    {
        "line": 21,
        "fullcodeline": "if (CL_SUCCESS == xar_get_numeric_from_xml_element(reader, offset))"
    },
    {
        "line": 22,
        "fullcodeline": "gotoffset=1;"
    },
    {
        "line": 24,
        "fullcodeline": "} else if (xmlStrEqual(name, (const xmlChar *)\"length\") &&"
    },
    {
        "line": 85,
        "fullcodeline": "if (xmlStrEqual(name, (const xmlChar *)\"data\")) {"
    },
    {
        "line": 25,
        "fullcodeline": "xmlTextReaderNodeType(reader) == XML_READER_TYPE_ELEMENT) {"
    },
    {
        "line": 86,
        "fullcodeline": "cli_dbgmsg(\"cli_scanxar: xmlTextReaderRead read <data>\\n\");"
    },
    {
        "line": 87,
        "fullcodeline": "indata = 1;"
    },
    {
        "line": 92,
        "fullcodeline": "} else if ((xmlTextReaderNodeType(reader) == XML_READER_TYPE_END_ELEMENT) &&"
    },
    {
        "line": 26,
        "fullcodeline": "if (CL_SUCCESS == xar_get_numeric_from_xml_element(reader, length))"
    },
    {
        "line": 93,
        "fullcodeline": "xmlStrEqual(name, (const xmlChar *)\"xar\")) {"
    },
    {
        "line": 94,
        "fullcodeline": "cli_dbgmsg(\"cli_scanxar: finished parsing xar TOC.\\n\");"
    },
    {
        "line": 27,
        "fullcodeline": "gotlength=1;"
    },
    {
        "line": 29,
        "fullcodeline": "} else if (xmlStrEqual(name, (const xmlChar *)\"size\") &&"
    },
    {
        "line": 88,
        "fullcodeline": "} else if (xmlStrEqual(name, (const xmlChar *)\"ea\")) {"
    },
    {
        "line": 30,
        "fullcodeline": "xmlTextReaderNodeType(reader) == XML_READER_TYPE_ELEMENT) {"
    },
    {
        "line": 89,
        "fullcodeline": "cli_dbgmsg(\"cli_scanxar: xmlTextReaderRead read <ea>\\n\");"
    },
    {
        "line": 90,
        "fullcodeline": "inea = 1;"
    },
    {
        "line": 31,
        "fullcodeline": "if (CL_SUCCESS == xar_get_numeric_from_xml_element(reader, size))"
    },
    {
        "line": 32,
        "fullcodeline": "gotsize=1;"
    },
    {
        "line": 34,
        "fullcodeline": "} else if (xmlStrEqual(name, (const xmlChar *)\"archived-checksum\") &&"
    },
    {
        "line": 35,
        "fullcodeline": "xmlTextReaderNodeType(reader) == XML_READER_TYPE_ELEMENT) {"
    },
    {
        "line": 36,
        "fullcodeline": "cli_dbgmsg(\"cli_scanxar: <archived-checksum>:\\n\");"
    },
    {
        "line": 37,
        "fullcodeline": "xar_get_checksum_values(reader, a_cksum, a_hash);"
    },
    {
        "line": 39,
        "fullcodeline": "} else if ((xmlStrEqual(name, (const xmlChar *)\"extracted-checksum\") ||"
    },
    {
        "line": 41,
        "fullcodeline": "xmlTextReaderNodeType(reader) == XML_READER_TYPE_ELEMENT) {"
    },
    {
        "line": 42,
        "fullcodeline": "cli_dbgmsg(\"cli_scanxar: <extracted-checksum>:\\n\");"
    },
    {
        "line": 43,
        "fullcodeline": "xar_get_checksum_values(reader, e_cksum, e_hash);"
    },
    {
        "line": 40,
        "fullcodeline": "xmlStrEqual(name, (const xmlChar *)\"unarchived-checksum\")) &&"
    },
    {
        "line": 45,
        "fullcodeline": "} else if (xmlStrEqual(name, (const xmlChar *)\"encoding\") &&"
    },
    {
        "line": 46,
        "fullcodeline": "xmlTextReaderNodeType(reader) == XML_READER_TYPE_ELEMENT) {"
    },
    {
        "line": 47,
        "fullcodeline": "xmlChar * style = xmlTextReaderGetAttribute(reader, (const xmlChar *)\"style\");"
    },
    {
        "line": 48,
        "fullcodeline": "if (style == NULL) {"
    },
    {
        "line": 71,
        "fullcodeline": "if (style != NULL)"
    },
    {
        "line": 49,
        "fullcodeline": "cli_dbgmsg(\"cli_scaxar: xmlTextReaderGetAttribute no style attribute \""
    },
    {
        "line": 51,
        "fullcodeline": "*encoding = CL_TYPE_ANY;"
    },
    {
        "line": 72,
        "fullcodeline": "xmlFree(style);"
    },
    {
        "line": 74,
        "fullcodeline": "} else if (indata && xmlStrEqual(name, (const xmlChar *)\"data\") &&"
    },
    {
        "line": 75,
        "fullcodeline": "xmlTextReaderNodeType(reader) == XML_READER_TYPE_END_ELEMENT) {"
    },
    {
        "line": 52,
        "fullcodeline": "} else if (xmlStrEqual(style, (const xmlChar *)\"application/x-gzip\")) {"
    },
    {
        "line": 53,
        "fullcodeline": "cli_dbgmsg(\"cli_scanxar: encoding = application/x-gzip.\\n\");"
    },
    {
        "line": 54,
        "fullcodeline": "*encoding = CL_TYPE_GZ;"
    },
    {
        "line": 78,
        "fullcodeline": "} else if (inea && xmlStrEqual(name, (const xmlChar *)\"ea\") &&"
    },
    {
        "line": 79,
        "fullcodeline": "xmlTextReaderNodeType(reader) == XML_READER_TYPE_END_ELEMENT) {"
    },
    {
        "line": 55,
        "fullcodeline": "} else if (xmlStrEqual(style, (const xmlChar *)\"application/octet-stream\")) {"
    },
    {
        "line": 56,
        "fullcodeline": "cli_dbgmsg(\"cli_scanxar: encoding = application/octet-stream.\\n\");"
    },
    {
        "line": 57,
        "fullcodeline": "*encoding = CL_TYPE_ANY;"
    },
    {
        "line": 58,
        "fullcodeline": "} else if (xmlStrEqual(style, (const xmlChar *)\"application/x-bzip2\")) {"
    },
    {
        "line": 59,
        "fullcodeline": "cli_dbgmsg(\"cli_scanxar: encoding = application/x-bzip2.\\n\");"
    },
    {
        "line": 60,
        "fullcodeline": "*encoding = CL_TYPE_BZ;"
    },
    {
        "line": 61,
        "fullcodeline": "} else if (xmlStrEqual(style, (const xmlChar *)\"application/x-lzma\")) {"
    },
    {
        "line": 62,
        "fullcodeline": "cli_dbgmsg(\"cli_scanxar: encoding = application/x-lzma.\\n\");"
    },
    {
        "line": 63,
        "fullcodeline": "*encoding = CL_TYPE_7Z;"
    },
    {
        "line": 64,
        "fullcodeline": "} else if (xmlStrEqual(style, (const xmlChar *)\"application/x-xz\")) {"
    },
    {
        "line": 65,
        "fullcodeline": "cli_dbgmsg(\"cli_scanxar: encoding = application/x-xz.\\n\");"
    },
    {
        "line": 66,
        "fullcodeline": "*encoding = CL_TYPE_XZ;"
    },
    {
        "line": 68,
        "fullcodeline": "cli_dbgmsg(\"cli_scaxar: unknown style value=%s for encoding element\\n\", style);"
    },
    {
        "line": 69,
        "fullcodeline": "*encoding = CL_TYPE_ANY;"
    }
]