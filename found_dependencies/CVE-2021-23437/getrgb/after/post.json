[
    {
        "line": 13,
        "fullcodeline": "color = color.lower()"
    },
    {
        "line": 15,
        "fullcodeline": "rgb = colormap.get(color, None)"
    },
    {
        "line": 45,
        "fullcodeline": "m = re.match(r\"rgb\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*\\)$\", color)"
    },
    {
        "line": 49,
        "fullcodeline": "m = re.match(r\"rgb\\(\\s*(\\d+)%\\s*,\\s*(\\d+)%\\s*,\\s*(\\d+)%\\s*\\)$\", color)"
    },
    {
        "line": 57,
        "fullcodeline": "m = re.match("
    },
    {
        "line": 74,
        "fullcodeline": "m = re.match("
    },
    {
        "line": 91,
        "fullcodeline": "m = re.match(r\"rgba\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*\\)$\", color)"
    },
    {
        "line": 94,
        "fullcodeline": "raise ValueError(f\"unknown color specifier: {repr(color)}\")"
    },
    {
        "line": 11,
        "fullcodeline": "if len(color) > 100:"
    },
    {
        "line": 23,
        "fullcodeline": "if re.match(\"#[a-f0-9]{3}$\", color):"
    },
    {
        "line": 26,
        "fullcodeline": "if re.match(\"#[a-f0-9]{4}$\", color):"
    },
    {
        "line": 34,
        "fullcodeline": "if re.match(\"#[a-f0-9]{6}$\", color):"
    },
    {
        "line": 37,
        "fullcodeline": "if re.match(\"#[a-f0-9]{8}$\", color):"
    },
    {
        "line": 12,
        "fullcodeline": "raise ValueError(\"color specifier is too long\")"
    },
    {
        "line": 61,
        "fullcodeline": "from colorsys import hls_to_rgb"
    },
    {
        "line": 63,
        "fullcodeline": "rgb = hls_to_rgb("
    },
    {
        "line": 78,
        "fullcodeline": "from colorsys import hsv_to_rgb"
    },
    {
        "line": 80,
        "fullcodeline": "rgb = hsv_to_rgb("
    },
    {
        "line": 17,
        "fullcodeline": "if isinstance(rgb, tuple):"
    },
    {
        "line": 19,
        "fullcodeline": "colormap[color] = rgb = getrgb(rgb)"
    },
    {
        "line": 24,
        "fullcodeline": "return (int(color[1] * 2, 16), int(color[2] * 2, 16), int(color[3] * 2, 16))"
    },
    {
        "line": 27,
        "fullcodeline": "return ("
    },
    {
        "line": 35,
        "fullcodeline": "return (int(color[1:3], 16), int(color[3:5], 16), int(color[5:7], 16))"
    },
    {
        "line": 38,
        "fullcodeline": "return ("
    },
    {
        "line": 47,
        "fullcodeline": "return (int(m.group(1)), int(m.group(2)), int(m.group(3)))"
    },
    {
        "line": 51,
        "fullcodeline": "return ("
    },
    {
        "line": 68,
        "fullcodeline": "return ("
    },
    {
        "line": 85,
        "fullcodeline": "return ("
    },
    {
        "line": 93,
        "fullcodeline": "return (int(m.group(1)), int(m.group(2)), int(m.group(3)), int(m.group(4)))"
    },
    {
        "line": 28,
        "fullcodeline": "int(color[1] * 2, 16),"
    },
    {
        "line": 29,
        "fullcodeline": "int(color[2] * 2, 16),"
    },
    {
        "line": 30,
        "fullcodeline": "int(color[3] * 2, 16),"
    },
    {
        "line": 31,
        "fullcodeline": "int(color[4] * 2, 16),"
    },
    {
        "line": 39,
        "fullcodeline": "int(color[1:3], 16),"
    },
    {
        "line": 40,
        "fullcodeline": "int(color[3:5], 16),"
    },
    {
        "line": 41,
        "fullcodeline": "int(color[5:7], 16),"
    },
    {
        "line": 42,
        "fullcodeline": "int(color[7:9], 16),"
    },
    {
        "line": 52,
        "fullcodeline": "int((int(m.group(1)) * 255) / 100.0 + 0.5),"
    },
    {
        "line": 53,
        "fullcodeline": "int((int(m.group(2)) * 255) / 100.0 + 0.5),"
    },
    {
        "line": 54,
        "fullcodeline": "int((int(m.group(3)) * 255) / 100.0 + 0.5),"
    },
    {
        "line": 64,
        "fullcodeline": "float(m.group(1)) / 360.0,"
    },
    {
        "line": 65,
        "fullcodeline": "float(m.group(3)) / 100.0,"
    },
    {
        "line": 66,
        "fullcodeline": "float(m.group(2)) / 100.0,"
    },
    {
        "line": 69,
        "fullcodeline": "int(rgb[0] * 255 + 0.5),"
    },
    {
        "line": 70,
        "fullcodeline": "int(rgb[1] * 255 + 0.5),"
    },
    {
        "line": 71,
        "fullcodeline": "int(rgb[2] * 255 + 0.5),"
    },
    {
        "line": 81,
        "fullcodeline": "float(m.group(1)) / 360.0,"
    },
    {
        "line": 82,
        "fullcodeline": "float(m.group(2)) / 100.0,"
    },
    {
        "line": 83,
        "fullcodeline": "float(m.group(3)) / 100.0,"
    },
    {
        "line": 86,
        "fullcodeline": "int(rgb[0] * 255 + 0.5),"
    },
    {
        "line": 87,
        "fullcodeline": "int(rgb[1] * 255 + 0.5),"
    },
    {
        "line": 88,
        "fullcodeline": "int(rgb[2] * 255 + 0.5),"
    }
]