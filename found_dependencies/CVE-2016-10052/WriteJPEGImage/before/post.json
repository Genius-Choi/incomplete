[
    {
        "line": 23,
        "fullcodeline": "scanline[1];"
    },
    {
        "line": 52,
        "fullcodeline": "assert(image_info != (const ImageInfo *) NULL);"
    },
    {
        "line": 53,
        "fullcodeline": "assert(image_info->signature == MagickCoreSignature);"
    },
    {
        "line": 54,
        "fullcodeline": "assert(image != (Image *) NULL);"
    },
    {
        "line": 55,
        "fullcodeline": "assert(image->signature == MagickCoreSignature);"
    },
    {
        "line": 58,
        "fullcodeline": "assert(exception != (ExceptionInfo *) NULL);"
    },
    {
        "line": 59,
        "fullcodeline": "assert(exception->signature == MagickCoreSignature);"
    },
    {
        "line": 63,
        "fullcodeline": "status=OpenBlob(image_info,image,WriteBinaryBlobMode,exception);"
    },
    {
        "line": 69,
        "fullcodeline": "(void) ResetMagickMemory(&error_manager,0,sizeof(error_manager));"
    },
    {
        "line": 70,
        "fullcodeline": "(void) ResetMagickMemory(&jpeg_info,0,sizeof(jpeg_info));"
    },
    {
        "line": 71,
        "fullcodeline": "(void) ResetMagickMemory(&jpeg_error,0,sizeof(jpeg_error));"
    },
    {
        "line": 72,
        "fullcodeline": "volatile_image=image;"
    },
    {
        "line": 73,
        "fullcodeline": "jpeg_info.client_data=(void *) volatile_image;"
    },
    {
        "line": 74,
        "fullcodeline": "jpeg_info.err=jpeg_std_error(&jpeg_error);"
    },
    {
        "line": 75,
        "fullcodeline": "jpeg_info.err->emit_message=(void (*)(j_common_ptr,int)) JPEGWarningHandler;"
    },
    {
        "line": 76,
        "fullcodeline": "jpeg_info.err->error_exit=(void (*)(j_common_ptr)) JPEGErrorHandler;"
    },
    {
        "line": 77,
        "fullcodeline": "error_manager.exception=exception;"
    },
    {
        "line": 78,
        "fullcodeline": "error_manager.image=volatile_image;"
    },
    {
        "line": 79,
        "fullcodeline": "memory_info=(MemoryInfo *) NULL;"
    },
    {
        "line": 86,
        "fullcodeline": "jpeg_info.client_data=(void *) &error_manager;"
    },
    {
        "line": 87,
        "fullcodeline": "jpeg_create_compress(&jpeg_info);"
    },
    {
        "line": 88,
        "fullcodeline": "JPEGDestinationManager(&jpeg_info,image);"
    },
    {
        "line": 92,
        "fullcodeline": "jpeg_info.image_width=(unsigned int) image->columns;"
    },
    {
        "line": 93,
        "fullcodeline": "jpeg_info.image_height=(unsigned int) image->rows;"
    },
    {
        "line": 94,
        "fullcodeline": "jpeg_info.input_components=3;"
    },
    {
        "line": 95,
        "fullcodeline": "jpeg_info.data_precision=8;"
    },
    {
        "line": 96,
        "fullcodeline": "jpeg_info.in_color_space=JCS_RGB;"
    },
    {
        "line": 133,
        "fullcodeline": "jpeg_set_defaults(&jpeg_info);"
    },
    {
        "line": 159,
        "fullcodeline": "jpeg_info.dct_method=JDCT_FLOAT;"
    },
    {
        "line": 160,
        "fullcodeline": "option=GetImageOption(image_info,\"jpeg:dct-method\");"
    },
    {
        "line": 190,
        "fullcodeline": "option=GetImageOption(image_info,\"jpeg:optimize-coding\");"
    },
    {
        "line": 229,
        "fullcodeline": "quality=92;"
    },
    {
        "line": 270,
        "fullcodeline": "option=GetImageOption(image_info,\"jpeg:extent\");"
    },
    {
        "line": 317,
        "fullcodeline": "jpeg_set_quality(&jpeg_info,quality,TRUE);"
    },
    {
        "line": 342,
        "fullcodeline": "colorspace=jpeg_info.in_color_space;"
    },
    {
        "line": 343,
        "fullcodeline": "value=GetImageOption(image_info,\"jpeg:colorspace\");"
    },
    {
        "line": 348,
        "fullcodeline": "sampling_factor=(const char *) NULL;"
    },
    {
        "line": 362,
        "fullcodeline": "value=GetImageOption(image_info,\"jpeg:sampling-factor\");"
    },
    {
        "line": 411,
        "fullcodeline": "option=GetImageOption(image_info,\"jpeg:q-table\");"
    },
    {
        "line": 457,
        "fullcodeline": "jpeg_start_compress(&jpeg_info,TRUE);"
    },
    {
        "line": 576,
        "fullcodeline": "value=GetImageProperty(image,\"comment\",exception);"
    },
    {
        "line": 586,
        "fullcodeline": "memory_info=AcquireVirtualMemory((size_t) image->columns,"
    },
    {
        "line": 590,
        "fullcodeline": "jpeg_pixels=(JSAMPLE *) GetVirtualMemoryBlob(memory_info);"
    },
    {
        "line": 599,
        "fullcodeline": "scanline[0]=(JSAMPROW) jpeg_pixels;"
    },
    {
        "line": 600,
        "fullcodeline": "scale=65535/(unsigned short) GetQuantumRange((size_t)"
    },
    {
        "line": 787,
        "fullcodeline": "jpeg_destroy_compress(&jpeg_info);"
    },
    {
        "line": 788,
        "fullcodeline": "memory_info=RelinquishVirtualMemory(memory_info);"
    },
    {
        "line": 789,
        "fullcodeline": "(void) CloseBlob(image);"
    },
    {
        "line": 56,
        "fullcodeline": "if (image->debug != MagickFalse)"
    },
    {
        "line": 60,
        "fullcodeline": "if ((LocaleCompare(image_info->magick,\"JPS\") == 0) &&"
    },
    {
        "line": 64,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 80,
        "fullcodeline": "if (setjmp(error_manager.error_recovery) != 0)"
    },
    {
        "line": 89,
        "fullcodeline": "if ((image->columns != (unsigned int) image->columns) ||"
    },
    {
        "line": 134,
        "fullcodeline": "if (jpeg_info.in_color_space == JCS_CMYK)"
    },
    {
        "line": 136,
        "fullcodeline": "if ((jpeg_info.data_precision != 12) && (image->depth <= 8))"
    },
    {
        "line": 140,
        "fullcodeline": "if (image->debug != MagickFalse)"
    },
    {
        "line": 143,
        "fullcodeline": "if ((image->resolution.x != 0.0) && (image->resolution.y != 0.0))"
    },
    {
        "line": 161,
        "fullcodeline": "if (option != (const char *) NULL)"
    },
    {
        "line": 191,
        "fullcodeline": "if (option != (const char *) NULL)"
    },
    {
        "line": 225,
        "fullcodeline": "if (image->debug != MagickFalse)"
    },
    {
        "line": 230,
        "fullcodeline": "if ((image_info->compression != LosslessJPEGCompression) &&"
    },
    {
        "line": 271,
        "fullcodeline": "if (option != (const char *) NULL)"
    },
    {
        "line": 344,
        "fullcodeline": "if (value == (char *) NULL)"
    },
    {
        "line": 346,
        "fullcodeline": "if (value != (char *) NULL)"
    },
    {
        "line": 349,
        "fullcodeline": "if (colorspace == jpeg_info.in_color_space)"
    },
    {
        "line": 363,
        "fullcodeline": "if (image_info->sampling_factor != (char *) NULL)"
    },
    {
        "line": 365,
        "fullcodeline": "if (sampling_factor == (const char *) NULL)"
    },
    {
        "line": 412,
        "fullcodeline": "if (option != (const char *) NULL)"
    },
    {
        "line": 458,
        "fullcodeline": "if (image->debug != MagickFalse)"
    },
    {
        "line": 577,
        "fullcodeline": "if (value != (char *) NULL)"
    },
    {
        "line": 581,
        "fullcodeline": "if (image->profiles != (void *) NULL)"
    },
    {
        "line": 588,
        "fullcodeline": "if (memory_info == (MemoryInfo *) NULL)"
    },
    {
        "line": 591,
        "fullcodeline": "if (setjmp(error_manager.error_recovery) != 0)"
    },
    {
        "line": 602,
        "fullcodeline": "if (scale == 0)"
    },
    {
        "line": 604,
        "fullcodeline": "if (jpeg_info.data_precision <= 8)"
    },
    {
        "line": 782,
        "fullcodeline": "if (y == (ssize_t) image->rows)"
    },
    {
        "line": 57,
        "fullcodeline": "(void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",image->filename);"
    },
    {
        "line": 61,
        "fullcodeline": "(image->next != (Image *) NULL))"
    },
    {
        "line": 62,
        "fullcodeline": "image=AppendImages(image,MagickFalse,exception);"
    },
    {
        "line": 82,
        "fullcodeline": "jpeg_destroy_compress(&jpeg_info);"
    },
    {
        "line": 83,
        "fullcodeline": "(void) CloseBlob(volatile_image);"
    },
    {
        "line": 90,
        "fullcodeline": "(image->rows != (unsigned int) image->rows))"
    },
    {
        "line": 91,
        "fullcodeline": "ThrowWriterException(ImageError,\"WidthOrHeightExceedsLimit\");"
    },
    {
        "line": 135,
        "fullcodeline": "jpeg_set_colorspace(&jpeg_info,JCS_YCCK);"
    },
    {
        "line": 137,
        "fullcodeline": "jpeg_info.data_precision=8;"
    },
    {
        "line": 141,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 148,
        "fullcodeline": "jpeg_info.write_JFIF_header=TRUE;"
    },
    {
        "line": 149,
        "fullcodeline": "jpeg_info.X_density=(UINT16) image->resolution.x;"
    },
    {
        "line": 150,
        "fullcodeline": "jpeg_info.Y_density=(UINT16) image->resolution.y;"
    },
    {
        "line": 192,
        "fullcodeline": "jpeg_info.optimize_coding=IsStringTrue(option) != MagickFalse ? TRUE :"
    },
    {
        "line": 226,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 231,
        "fullcodeline": "(image->quality <= 100))"
    },
    {
        "line": 279,
        "fullcodeline": "extent_info=CloneImageInfo(image_info);"
    },
    {
        "line": 280,
        "fullcodeline": "extent_info->blob=NULL;"
    },
    {
        "line": 281,
        "fullcodeline": "jpeg_image=CloneImage(image,0,0,MagickTrue,exception);"
    },
    {
        "line": 315,
        "fullcodeline": "extent_info=DestroyImageInfo(extent_info);"
    },
    {
        "line": 345,
        "fullcodeline": "value=GetImageProperty(image,\"jpeg:colorspace\",exception);"
    },
    {
        "line": 347,
        "fullcodeline": "colorspace=StringToInteger(value);"
    },
    {
        "line": 351,
        "fullcodeline": "value=GetImageOption(image_info,\"jpeg:sampling-factor\");"
    },
    {
        "line": 364,
        "fullcodeline": "sampling_factor=image_info->sampling_factor;"
    },
    {
        "line": 420,
        "fullcodeline": "table=GetQuantizationTable(option,\"0\",exception);"
    },
    {
        "line": 429,
        "fullcodeline": "table=GetQuantizationTable(option,\"1\",exception);"
    },
    {
        "line": 438,
        "fullcodeline": "table=GetQuantizationTable(option,\"2\",exception);"
    },
    {
        "line": 447,
        "fullcodeline": "table=GetQuantizationTable(option,\"3\",exception);"
    },
    {
        "line": 466,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),\"Depth: %.20g\","
    },
    {
        "line": 474,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 582,
        "fullcodeline": "WriteProfile(&jpeg_info,image);"
    },
    {
        "line": 587,
        "fullcodeline": "jpeg_info.input_components*sizeof(*jpeg_pixels));"
    },
    {
        "line": 589,
        "fullcodeline": "ThrowWriterException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 593,
        "fullcodeline": "jpeg_destroy_compress(&jpeg_info);"
    },
    {
        "line": 596,
        "fullcodeline": "(void) CloseBlob(image);"
    },
    {
        "line": 603,
        "fullcodeline": "scale=1;"
    },
    {
        "line": 783,
        "fullcodeline": "jpeg_finish_compress(&jpeg_info);"
    },
    {
        "line": 101,
        "fullcodeline": "jpeg_info.input_components=4;"
    },
    {
        "line": 102,
        "fullcodeline": "jpeg_info.in_color_space=JCS_CMYK;"
    },
    {
        "line": 109,
        "fullcodeline": "jpeg_info.in_color_space=JCS_YCbCr;"
    },
    {
        "line": 116,
        "fullcodeline": "jpeg_info.input_components=1;"
    },
    {
        "line": 117,
        "fullcodeline": "jpeg_info.in_color_space=JCS_GRAYSCALE;"
    },
    {
        "line": 122,
        "fullcodeline": "(void) TransformImageColorspace(image,sRGBColorspace,exception);"
    },
    {
        "line": 139,
        "fullcodeline": "jpeg_info.data_precision=BITS_IN_JSAMPLE;"
    },
    {
        "line": 154,
        "fullcodeline": "if (image->units == PixelsPerInchResolution)"
    },
    {
        "line": 156,
        "fullcodeline": "if (image->units == PixelsPerCentimeterResolution)"
    },
    {
        "line": 199,
        "fullcodeline": "length=(MagickSizeType) jpeg_info.input_components*image->columns*"
    },
    {
        "line": 233,
        "fullcodeline": "if (image->quality != UndefinedCompressionQuality)"
    },
    {
        "line": 235,
        "fullcodeline": "if (image->debug != MagickFalse)"
    },
    {
        "line": 242,
        "fullcodeline": "quality=100;"
    },
    {
        "line": 282,
        "fullcodeline": "if (jpeg_image != (Image *) NULL)"
    },
    {
        "line": 352,
        "fullcodeline": "if (value == (char *) NULL)"
    },
    {
        "line": 354,
        "fullcodeline": "if (value != (char *) NULL)"
    },
    {
        "line": 367,
        "fullcodeline": "if (quality >= 90)"
    },
    {
        "line": 388,
        "fullcodeline": "i=0;"
    },
    {
        "line": 389,
        "fullcodeline": "factors=SamplingFactorToList(sampling_factor);"
    },
    {
        "line": 421,
        "fullcodeline": "if (table != (QuantizationTable *) NULL)"
    },
    {
        "line": 430,
        "fullcodeline": "if (table != (QuantizationTable *) NULL)"
    },
    {
        "line": 439,
        "fullcodeline": "if (table != (QuantizationTable *) NULL)"
    },
    {
        "line": 448,
        "fullcodeline": "if (table != (QuantizationTable *) NULL)"
    },
    {
        "line": 460,
        "fullcodeline": "if (image->storage_class == PseudoClass)"
    },
    {
        "line": 468,
        "fullcodeline": "if (image->colors != 0)"
    },
    {
        "line": 578,
        "fullcodeline": "for (i=0; i < (ssize_t) strlen(value); i+=65533L)"
    },
    {
        "line": 579,
        "fullcodeline": "jpeg_write_marker(&jpeg_info,JPEG_COM,(unsigned char *) value+i,"
    },
    {
        "line": 594,
        "fullcodeline": "if (memory_info != (MemoryInfo *) NULL)"
    },
    {
        "line": 606,
        "fullcodeline": "if ((jpeg_info.in_color_space == JCS_RGB) ||"
    },
    {
        "line": 114,
        "fullcodeline": "if (image_info->type == TrueColorType)"
    },
    {
        "line": 123,
        "fullcodeline": "if (image_info->type == TrueColorType)"
    },
    {
        "line": 125,
        "fullcodeline": "if (SetImageGray(image,exception) != MagickFalse)"
    },
    {
        "line": 155,
        "fullcodeline": "jpeg_info.density_unit=(UINT8) 1;"
    },
    {
        "line": 157,
        "fullcodeline": "jpeg_info.density_unit=(UINT8) 2;"
    },
    {
        "line": 201,
        "fullcodeline": "if (length == (MagickSizeType) ((size_t) length))"
    },
    {
        "line": 234,
        "fullcodeline": "quality=(int) image->quality;"
    },
    {
        "line": 236,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),\"Quality: %.20g\","
    },
    {
        "line": 243,
        "fullcodeline": "if (image->debug != MagickFalse)"
    },
    {
        "line": 294,
        "fullcodeline": "extent_info->quality=0;"
    },
    {
        "line": 295,
        "fullcodeline": "extent=(MagickSizeType) SiPrefixToDoubleInterval(option,100.0);"
    },
    {
        "line": 296,
        "fullcodeline": "(void) DeleteImageOption(extent_info,\"jpeg:extent\");"
    },
    {
        "line": 297,
        "fullcodeline": "(void) DeleteImageArtifact(jpeg_image,\"jpeg:extent\");"
    },
    {
        "line": 298,
        "fullcodeline": "maximum=image_info->quality;"
    },
    {
        "line": 312,
        "fullcodeline": "quality=(int) minimum-1;"
    },
    {
        "line": 313,
        "fullcodeline": "jpeg_image=DestroyImage(jpeg_image);"
    },
    {
        "line": 353,
        "fullcodeline": "value=GetImageProperty(image,\"jpeg:sampling-factor\",exception);"
    },
    {
        "line": 356,
        "fullcodeline": "sampling_factor=value;"
    },
    {
        "line": 390,
        "fullcodeline": "if (factors != (char **) NULL)"
    },
    {
        "line": 405,
        "fullcodeline": "for ( ; i < MAX_COMPONENTS; i++)"
    },
    {
        "line": 425,
        "fullcodeline": "jpeg_add_quant_table(&jpeg_info,0,table->levels,"
    },
    {
        "line": 427,
        "fullcodeline": "table=DestroyQuantizationTable(table);"
    },
    {
        "line": 434,
        "fullcodeline": "jpeg_add_quant_table(&jpeg_info,1,table->levels,"
    },
    {
        "line": 436,
        "fullcodeline": "table=DestroyQuantizationTable(table);"
    },
    {
        "line": 443,
        "fullcodeline": "jpeg_add_quant_table(&jpeg_info,2,table->levels,"
    },
    {
        "line": 445,
        "fullcodeline": "table=DestroyQuantizationTable(table);"
    },
    {
        "line": 452,
        "fullcodeline": "jpeg_add_quant_table(&jpeg_info,3,table->levels,"
    },
    {
        "line": 454,
        "fullcodeline": "table=DestroyQuantizationTable(table);"
    },
    {
        "line": 461,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 467,
        "fullcodeline": "(double) image->depth);"
    },
    {
        "line": 469,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 475,
        "fullcodeline": "\"JPEG data precision: %d\",(int) jpeg_info.data_precision);"
    },
    {
        "line": 580,
        "fullcodeline": "(unsigned int) MagickMin((size_t) strlen(value+i),65533L));"
    },
    {
        "line": 595,
        "fullcodeline": "memory_info=RelinquishVirtualMemory(memory_info);"
    },
    {
        "line": 607,
        "fullcodeline": "(jpeg_info.in_color_space == JCS_YCbCr))"
    },
    {
        "line": 695,
        "fullcodeline": "if (jpeg_info.in_color_space == JCS_GRAYSCALE)"
    },
    {
        "line": 127,
        "fullcodeline": "jpeg_info.input_components=1;"
    },
    {
        "line": 128,
        "fullcodeline": "jpeg_info.in_color_space=JCS_GRAYSCALE;"
    },
    {
        "line": 206,
        "fullcodeline": "status=AcquireMagickResource(MemoryResource,length);"
    },
    {
        "line": 207,
        "fullcodeline": "RelinquishMagickResource(MemoryResource,length);"
    },
    {
        "line": 208,
        "fullcodeline": "jpeg_info.optimize_coding=status == MagickFalse ? FALSE : TRUE;"
    },
    {
        "line": 244,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),\"Quality: 100\");"
    },
    {
        "line": 299,
        "fullcodeline": "if (maximum < 2)"
    },
    {
        "line": 301,
        "fullcodeline": "for (minimum=2; minimum < maximum; )"
    },
    {
        "line": 357,
        "fullcodeline": "if (image->debug != MagickFalse)"
    },
    {
        "line": 368,
        "fullcodeline": "for (i=0; i < MAX_COMPONENTS; i++)"
    },
    {
        "line": 403,
        "fullcodeline": "factors=(char **) RelinquishMagickMemory(factors);"
    },
    {
        "line": 407,
        "fullcodeline": "jpeg_info.comp_info[i].h_samp_factor=1;"
    },
    {
        "line": 408,
        "fullcodeline": "jpeg_info.comp_info[i].v_samp_factor=1;"
    },
    {
        "line": 423,
        "fullcodeline": "for (i=0; i < MAX_COMPONENTS; i++)"
    },
    {
        "line": 424,
        "fullcodeline": "jpeg_info.comp_info[i].quant_tbl_no=0;"
    },
    {
        "line": 426,
        "fullcodeline": "jpeg_quality_scaling(quality),0);"
    },
    {
        "line": 432,
        "fullcodeline": "for (i=1; i < MAX_COMPONENTS; i++)"
    },
    {
        "line": 433,
        "fullcodeline": "jpeg_info.comp_info[i].quant_tbl_no=1;"
    },
    {
        "line": 435,
        "fullcodeline": "jpeg_quality_scaling(quality),0);"
    },
    {
        "line": 441,
        "fullcodeline": "for (i=2; i < MAX_COMPONENTS; i++)"
    },
    {
        "line": 442,
        "fullcodeline": "jpeg_info.comp_info[i].quant_tbl_no=2;"
    },
    {
        "line": 444,
        "fullcodeline": "jpeg_quality_scaling(quality),0);"
    },
    {
        "line": 450,
        "fullcodeline": "for (i=3; i < MAX_COMPONENTS; i++)"
    },
    {
        "line": 451,
        "fullcodeline": "jpeg_info.comp_info[i].quant_tbl_no=3;"
    },
    {
        "line": 453,
        "fullcodeline": "jpeg_quality_scaling(quality),0);"
    },
    {
        "line": 464,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 472,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 480,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 482,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 490,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 501,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 503,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 517,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 519,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 527,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 529,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 543,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 545,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 557,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),\"Colorspace: %d\","
    },
    {
        "line": 559,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 608,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 167,
        "fullcodeline": "if (LocaleCompare(option,\"default\") == 0)"
    },
    {
        "line": 174,
        "fullcodeline": "if (LocaleCompare(option,\"fastest\") == 0)"
    },
    {
        "line": 176,
        "fullcodeline": "if (LocaleCompare(option,\"float\") == 0)"
    },
    {
        "line": 183,
        "fullcodeline": "if (LocaleCompare(option,\"ifast\") == 0)"
    },
    {
        "line": 185,
        "fullcodeline": "if (LocaleCompare(option,\"islow\") == 0)"
    },
    {
        "line": 237,
        "fullcodeline": "(double) image->quality);"
    },
    {
        "line": 300,
        "fullcodeline": "maximum=101;"
    },
    {
        "line": 303,
        "fullcodeline": "(void) AcquireUniqueFilename(jpeg_image->filename);"
    },
    {
        "line": 304,
        "fullcodeline": "jpeg_image->quality=minimum+(maximum-minimum+1)/2;"
    },
    {
        "line": 305,
        "fullcodeline": "status=WriteJPEGImage(extent_info,jpeg_image,exception);"
    },
    {
        "line": 310,
        "fullcodeline": "(void) RelinquishUniqueFileResource(jpeg_image->filename);"
    },
    {
        "line": 358,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 370,
        "fullcodeline": "jpeg_info.comp_info[i].h_samp_factor=1;"
    },
    {
        "line": 371,
        "fullcodeline": "jpeg_info.comp_info[i].v_samp_factor=1;"
    },
    {
        "line": 392,
        "fullcodeline": "for (i=0; i < MAX_COMPONENTS; i++)"
    },
    {
        "line": 470,
        "fullcodeline": "\"Number of colors: %.20g\",(double) image->colors);"
    },
    {
        "line": 616,
        "fullcodeline": "p=GetVirtualPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 619,
        "fullcodeline": "q=jpeg_pixels;"
    },
    {
        "line": 627,
        "fullcodeline": "(void) jpeg_write_scanlines(&jpeg_info,scanline,1);"
    },
    {
        "line": 628,
        "fullcodeline": "status=SetImageProgress(image,SaveImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 634,
        "fullcodeline": "if (jpeg_info.in_color_space == JCS_GRAYSCALE)"
    },
    {
        "line": 696,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 168,
        "fullcodeline": "jpeg_info.dct_method=JDCT_DEFAULT;"
    },
    {
        "line": 175,
        "fullcodeline": "jpeg_info.dct_method=JDCT_FASTEST;"
    },
    {
        "line": 177,
        "fullcodeline": "jpeg_info.dct_method=JDCT_FLOAT;"
    },
    {
        "line": 184,
        "fullcodeline": "jpeg_info.dct_method=JDCT_IFAST;"
    },
    {
        "line": 186,
        "fullcodeline": "jpeg_info.dct_method=JDCT_ISLOW;"
    },
    {
        "line": 306,
        "fullcodeline": "if (GetBlobSize(jpeg_image) <= extent)"
    },
    {
        "line": 396,
        "fullcodeline": "flags=ParseGeometry(factors[i],&geometry_info);"
    },
    {
        "line": 399,
        "fullcodeline": "jpeg_info.comp_info[i].h_samp_factor=(int) geometry_info.rho;"
    },
    {
        "line": 400,
        "fullcodeline": "jpeg_info.comp_info[i].v_samp_factor=(int) geometry_info.sigma;"
    },
    {
        "line": 401,
        "fullcodeline": "factors[i]=(char *) RelinquishMagickMemory(factors[i]);"
    },
    {
        "line": 617,
        "fullcodeline": "if (p == (const Quantum *) NULL)"
    },
    {
        "line": 620,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 630,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 704,
        "fullcodeline": "p=GetVirtualPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 707,
        "fullcodeline": "q=jpeg_pixels;"
    },
    {
        "line": 714,
        "fullcodeline": "(void) jpeg_write_scanlines(&jpeg_info,scanline,1);"
    },
    {
        "line": 715,
        "fullcodeline": "status=SetImageProgress(image,SaveImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 721,
        "fullcodeline": "if ((jpeg_info.in_color_space == JCS_RGB) ||"
    },
    {
        "line": 307,
        "fullcodeline": "minimum=jpeg_image->quality+1;"
    },
    {
        "line": 394,
        "fullcodeline": "if (factors[i] == (char *) NULL)"
    },
    {
        "line": 397,
        "fullcodeline": "if ((flags & SigmaValue) == 0)"
    },
    {
        "line": 622,
        "fullcodeline": "*q++=(JSAMPLE) ScaleQuantumToChar(GetPixelRed(image,p));"
    },
    {
        "line": 623,
        "fullcodeline": "*q++=(JSAMPLE) ScaleQuantumToChar(GetPixelGreen(image,p));"
    },
    {
        "line": 624,
        "fullcodeline": "*q++=(JSAMPLE) ScaleQuantumToChar(GetPixelBlue(image,p));"
    },
    {
        "line": 625,
        "fullcodeline": "p+=GetPixelChannels(image);"
    },
    {
        "line": 635,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 705,
        "fullcodeline": "if (p == (const Quantum *) NULL)"
    },
    {
        "line": 708,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 717,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 722,
        "fullcodeline": "(jpeg_info.in_color_space == JCS_YCbCr))"
    },
    {
        "line": 309,
        "fullcodeline": "maximum=jpeg_image->quality-1;"
    },
    {
        "line": 398,
        "fullcodeline": "geometry_info.sigma=geometry_info.rho;"
    },
    {
        "line": 643,
        "fullcodeline": "p=GetVirtualPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 646,
        "fullcodeline": "q=jpeg_pixels;"
    },
    {
        "line": 653,
        "fullcodeline": "(void) jpeg_write_scanlines(&jpeg_info,scanline,1);"
    },
    {
        "line": 654,
        "fullcodeline": "status=SetImageProgress(image,SaveImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 660,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 710,
        "fullcodeline": "*q++=(JSAMPLE) (ScaleQuantumToShort(ClampToQuantum(GetPixelLuma(image,"
    },
    {
        "line": 712,
        "fullcodeline": "p+=GetPixelChannels(image);"
    },
    {
        "line": 723,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 644,
        "fullcodeline": "if (p == (const Quantum *) NULL)"
    },
    {
        "line": 647,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 656,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 668,
        "fullcodeline": "p=GetVirtualPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 671,
        "fullcodeline": "q=jpeg_pixels;"
    },
    {
        "line": 687,
        "fullcodeline": "(void) jpeg_write_scanlines(&jpeg_info,scanline,1);"
    },
    {
        "line": 688,
        "fullcodeline": "status=SetImageProgress(image,SaveImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 731,
        "fullcodeline": "p=GetVirtualPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 734,
        "fullcodeline": "q=jpeg_pixels;"
    },
    {
        "line": 742,
        "fullcodeline": "(void) jpeg_write_scanlines(&jpeg_info,scanline,1);"
    },
    {
        "line": 743,
        "fullcodeline": "status=SetImageProgress(image,SaveImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 749,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 649,
        "fullcodeline": "*q++=(JSAMPLE) ScaleQuantumToChar(ClampToQuantum(GetPixelLuma("
    },
    {
        "line": 651,
        "fullcodeline": "p+=GetPixelChannels(image);"
    },
    {
        "line": 669,
        "fullcodeline": "if (p == (const Quantum *) NULL)"
    },
    {
        "line": 672,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 690,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 732,
        "fullcodeline": "if (p == (const Quantum *) NULL)"
    },
    {
        "line": 735,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 745,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 757,
        "fullcodeline": "p=GetVirtualPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 760,
        "fullcodeline": "q=jpeg_pixels;"
    },
    {
        "line": 776,
        "fullcodeline": "(void) jpeg_write_scanlines(&jpeg_info,scanline,1);"
    },
    {
        "line": 777,
        "fullcodeline": "status=SetImageProgress(image,SaveImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 677,
        "fullcodeline": "*q++=(JSAMPLE) (ScaleQuantumToChar((Quantum) (QuantumRange-"
    },
    {
        "line": 679,
        "fullcodeline": "*q++=(JSAMPLE) (ScaleQuantumToChar((Quantum) (QuantumRange-"
    },
    {
        "line": 681,
        "fullcodeline": "*q++=(JSAMPLE) (ScaleQuantumToChar((Quantum) (QuantumRange-"
    },
    {
        "line": 683,
        "fullcodeline": "*q++=(JSAMPLE) (ScaleQuantumToChar((Quantum) (QuantumRange-"
    },
    {
        "line": 685,
        "fullcodeline": "p+=GetPixelChannels(image);"
    },
    {
        "line": 737,
        "fullcodeline": "*q++=(JSAMPLE) (ScaleQuantumToShort(GetPixelRed(image,p))/scale);"
    },
    {
        "line": 738,
        "fullcodeline": "*q++=(JSAMPLE) (ScaleQuantumToShort(GetPixelGreen(image,p))/scale);"
    },
    {
        "line": 739,
        "fullcodeline": "*q++=(JSAMPLE) (ScaleQuantumToShort(GetPixelBlue(image,p))/scale);"
    },
    {
        "line": 740,
        "fullcodeline": "p+=GetPixelChannels(image);"
    },
    {
        "line": 758,
        "fullcodeline": "if (p == (const Quantum *) NULL)"
    },
    {
        "line": 761,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 779,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 766,
        "fullcodeline": "*q++=(JSAMPLE) (ScaleQuantumToShort(QuantumRange-GetPixelRed("
    },
    {
        "line": 768,
        "fullcodeline": "*q++=(JSAMPLE) (ScaleQuantumToShort(QuantumRange-GetPixelGreen("
    },
    {
        "line": 770,
        "fullcodeline": "*q++=(JSAMPLE) (ScaleQuantumToShort(QuantumRange-GetPixelBlue("
    },
    {
        "line": 772,
        "fullcodeline": "*q++=(JSAMPLE) (ScaleQuantumToShort(QuantumRange-GetPixelBlack("
    },
    {
        "line": 774,
        "fullcodeline": "p+=GetPixelChannels(image);"
    },
    {
        "line": 678,
        "fullcodeline": "GetPixelCyan(image,p))));"
    },
    {
        "line": 680,
        "fullcodeline": "GetPixelMagenta(image,p))));"
    },
    {
        "line": 682,
        "fullcodeline": "GetPixelYellow(image,p))));"
    },
    {
        "line": 684,
        "fullcodeline": "GetPixelBlack(image,p))));"
    }
]