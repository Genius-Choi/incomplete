[
    {
        "line": 255,
        "fullcodeline": "Q_ASSERT(false);"
    },
    {
        "line": 9,
        "fullcodeline": "if (model->accessParser(parser).connState == CONN_STATE_CONNECTED_PRETLS_PRECAPS) {"
    },
    {
        "line": 4,
        "fullcodeline": "_failed(\"Asked to die\");"
    },
    {
        "line": 19,
        "fullcodeline": "switch (model->accessParser(parser).connState) {"
    },
    {
        "line": 134,
        "fullcodeline": "Q_ASSERT(false);"
    },
    {
        "line": 10,
        "fullcodeline": "if (!resp->tag.isEmpty()) {"
    },
    {
        "line": 29,
        "fullcodeline": "QByteArray message = \"No response expected by the OpenConnectionTask in state \" +"
    },
    {
        "line": 103,
        "fullcodeline": "bool wasCaps = checkCapabilitiesResult(resp);"
    },
    {
        "line": 142,
        "fullcodeline": "qDebug() << \"OpenConnectionTask: ignoring response, we're still waiting for SSL policy decision\";"
    },
    {
        "line": 149,
        "fullcodeline": "bool wasCaps = checkCapabilitiesResult(resp);"
    },
    {
        "line": 234,
        "fullcodeline": "bool wasCaps = checkCapabilitiesResult(resp);"
    },
    {
        "line": 243,
        "fullcodeline": "if (resp->tag == compressCmd) {"
    },
    {
        "line": 13,
        "fullcodeline": "} else if (model->accessParser(parser).connState > CONN_STATE_CONNECTED_PRETLS_PRECAPS) {"
    },
    {
        "line": 32,
        "fullcodeline": "throw Imap::UnexpectedResponseReceived(message.constData(), *resp);"
    },
    {
        "line": 104,
        "fullcodeline": "if (wasCaps && !_finished) {"
    },
    {
        "line": 112,
        "fullcodeline": "if (resp->tag == startTlsCmd) {"
    },
    {
        "line": 150,
        "fullcodeline": "if (wasCaps && !_finished) {"
    },
    {
        "line": 164,
        "fullcodeline": "if (resp->tag == loginCmd) {"
    },
    {
        "line": 235,
        "fullcodeline": "if (wasCaps && !_finished) {"
    },
    {
        "line": 244,
        "fullcodeline": "model->changeConnectionState(parser, CONN_STATE_AUTHENTICATED);"
    },
    {
        "line": 245,
        "fullcodeline": "onComplete();"
    },
    {
        "line": 11,
        "fullcodeline": "throw Imap::UnexpectedResponseReceived(\"Waiting for initial OK/BYE/PREAUTH, but got tagged response instead\", *resp);"
    },
    {
        "line": 30,
        "fullcodeline": "Imap::connectionStateToString(model->accessParser(parser).connState).toUtf8();"
    },
    {
        "line": 82,
        "fullcodeline": "logout(tr(\"Server has closed the connection\"));"
    },
    {
        "line": 86,
        "fullcodeline": "model->changeConnectionState(parser, CONN_STATE_LOGOUT);"
    },
    {
        "line": 91,
        "fullcodeline": "logout(tr(\"Server has greeted us with a BAD response\"));"
    },
    {
        "line": 105,
        "fullcodeline": "startTlsOrLoginNow();"
    },
    {
        "line": 165,
        "fullcodeline": "loginCmd.clear();"
    },
    {
        "line": 236,
        "fullcodeline": "model->changeConnectionState(parser, CONN_STATE_AUTHENTICATED);"
    },
    {
        "line": 237,
        "fullcodeline": "onComplete();"
    },
    {
        "line": 14,
        "fullcodeline": "if (resp->tag.isEmpty()) {"
    },
    {
        "line": 88,
        "fullcodeline": "if (resp->respCode != ALERT) {"
    },
    {
        "line": 95,
        "fullcodeline": "throw Imap::UnexpectedResponseReceived(\"Waiting for initial OK/BYE/BAD/PREAUTH, but got this instead\", *resp);"
    },
    {
        "line": 113,
        "fullcodeline": "if (resp->kind == OK) {"
    },
    {
        "line": 151,
        "fullcodeline": "if (model->accessParser(parser).capabilities.contains(QLatin1String(\"LOGINDISABLED\"))) {"
    },
    {
        "line": 167,
        "fullcodeline": "if (resp->kind == OK) {"
    },
    {
        "line": 50,
        "fullcodeline": "logout(tr(\"Configuration requires sending STARTTLS, but the IMAP server greets us with PREAUTH. \""
    },
    {
        "line": 56,
        "fullcodeline": "if (model->accessParser(parser).capabilitiesFresh) {"
    },
    {
        "line": 74,
        "fullcodeline": "model->changeConnectionState(parser, CONN_STATE_CONNECTED_PRETLS);"
    },
    {
        "line": 75,
        "fullcodeline": "capabilityCmd = parser->capability();"
    },
    {
        "line": 114,
        "fullcodeline": "model->changeConnectionState(parser, CONN_STATE_STARTTLS_HANDSHAKE);"
    },
    {
        "line": 152,
        "fullcodeline": "logout(tr(\"Capabilities still contain LOGINDISABLED even after STARTTLS\"));"
    },
    {
        "line": 58,
        "fullcodeline": "if (TROJITA_COMPRESS_DEFLATE && model->accessParser(parser).capabilities.contains(QLatin1String(\"COMPRESS=DEFLATE\"))) {"
    },
    {
        "line": 67,
        "fullcodeline": "model->changeConnectionState(parser, CONN_STATE_POSTAUTH_PRECAPS);"
    },
    {
        "line": 68,
        "fullcodeline": "capabilityCmd = parser->capability();"
    },
    {
        "line": 73,
        "fullcodeline": "if (!model->accessParser(parser).capabilitiesFresh) {"
    },
    {
        "line": 77,
        "fullcodeline": "startTlsOrLoginNow();"
    },
    {
        "line": 115,
        "fullcodeline": "if (!model->m_startTls) {"
    },
    {
        "line": 123,
        "fullcodeline": "logout(tr(\"STARTTLS failed: %1\").arg(resp->message));"
    },
    {
        "line": 154,
        "fullcodeline": "model->changeConnectionState(parser, CONN_STATE_LOGIN);"
    },
    {
        "line": 155,
        "fullcodeline": "askForAuth();"
    },
    {
        "line": 168,
        "fullcodeline": "if (resp->respCode == CAPABILITIES || model->accessParser(parser).capabilitiesFresh) {"
    },
    {
        "line": 217,
        "fullcodeline": "EMIT_LATER(model, authAttemptFailed, Q_ARG(QString, message));"
    },
    {
        "line": 218,
        "fullcodeline": "model->m_imapPassword.clear();"
    },
    {
        "line": 219,
        "fullcodeline": "model->m_hasImapPassword = false;"
    },
    {
        "line": 225,
        "fullcodeline": "askForAuth();"
    },
    {
        "line": 59,
        "fullcodeline": "compressCmd = parser->compressDeflate();"
    },
    {
        "line": 60,
        "fullcodeline": "model->changeConnectionState(parser, CONN_STATE_COMPRESS_DEFLATE);"
    },
    {
        "line": 120,
        "fullcodeline": "EMIT_LATER_NOARG(model, requireStartTlsInFuture);"
    },
    {
        "line": 212,
        "fullcodeline": "if (message.isEmpty()) {"
    },
    {
        "line": 220,
        "fullcodeline": "if (model->accessParser(parser).connState == CONN_STATE_LOGOUT) {"
    },
    {
        "line": 63,
        "fullcodeline": "model->changeConnectionState(parser, CONN_STATE_AUTHENTICATED);"
    },
    {
        "line": 64,
        "fullcodeline": "onComplete();"
    },
    {
        "line": 170,
        "fullcodeline": "if (TROJITA_COMPRESS_DEFLATE && model->accessParser(parser).capabilities.contains(QLatin1String(\"COMPRESS=DEFLATE\"))) {"
    },
    {
        "line": 179,
        "fullcodeline": "model->changeConnectionState(parser, CONN_STATE_POSTAUTH_PRECAPS);"
    },
    {
        "line": 180,
        "fullcodeline": "capabilityCmd = parser->capability();"
    },
    {
        "line": 187,
        "fullcodeline": "message = tr(\"Temporary failure because a subsystem is down.\");"
    },
    {
        "line": 190,
        "fullcodeline": "message = tr(\"Authentication failed.  This often happens due to bad password or wrong user name.\");"
    },
    {
        "line": 193,
        "fullcodeline": "message = tr(\"Authentication succeeded in using the authentication identity, \""
    },
    {
        "line": 198,
        "fullcodeline": "message = tr(\"Either authentication succeeded or the server no longer had the \""
    },
    {
        "line": 203,
        "fullcodeline": "message = tr(\"The operation is not permitted due to a lack of privacy.\");"
    },
    {
        "line": 206,
        "fullcodeline": "message = tr(\"You should contact the system administrator or support desk.\");"
    },
    {
        "line": 213,
        "fullcodeline": "message = tr(\"Login failed: %1\").arg(resp->message);"
    },
    {
        "line": 222,
        "fullcodeline": "_failed(QLatin1String(\"Connection closed after a failed login\"));"
    },
    {
        "line": 171,
        "fullcodeline": "compressCmd = parser->compressDeflate();"
    },
    {
        "line": 172,
        "fullcodeline": "model->changeConnectionState(parser, CONN_STATE_COMPRESS_DEFLATE);"
    },
    {
        "line": 215,
        "fullcodeline": "message = tr(\"%1\\n\\n%2\").arg(message, resp->message);"
    },
    {
        "line": 174,
        "fullcodeline": "model->changeConnectionState(parser, CONN_STATE_AUTHENTICATED);"
    },
    {
        "line": 175,
        "fullcodeline": "onComplete();"
    }
]