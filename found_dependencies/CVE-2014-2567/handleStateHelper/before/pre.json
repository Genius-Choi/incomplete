[
    {
        "line": 9,
        "fullcodeline": "if (model->accessParser(parser).connState == CONN_STATE_CONNECTED_PRETLS_PRECAPS) {"
    },
    {
        "line": 4,
        "fullcodeline": "_failed(\"Asked to die\");"
    },
    {
        "line": 19,
        "fullcodeline": "switch (model->accessParser(parser).connState) {"
    },
    {
        "line": 29,
        "fullcodeline": "QByteArray message = \"No response expected by the OpenConnectionTask in state \" +"
    },
    {
        "line": 92,
        "fullcodeline": "bool wasCaps = checkCapabilitiesResult(resp);"
    },
    {
        "line": 138,
        "fullcodeline": "bool wasCaps = checkCapabilitiesResult(resp);"
    },
    {
        "line": 223,
        "fullcodeline": "bool wasCaps = checkCapabilitiesResult(resp);"
    },
    {
        "line": 10,
        "fullcodeline": "if (!resp->tag.isEmpty()) {"
    },
    {
        "line": 93,
        "fullcodeline": "if (wasCaps && !_finished) {"
    },
    {
        "line": 101,
        "fullcodeline": "if (resp->tag == startTlsCmd) {"
    },
    {
        "line": 139,
        "fullcodeline": "if (wasCaps && !_finished) {"
    },
    {
        "line": 153,
        "fullcodeline": "if (resp->tag == loginCmd) {"
    },
    {
        "line": 224,
        "fullcodeline": "if (wasCaps && !_finished) {"
    },
    {
        "line": 30,
        "fullcodeline": "Imap::connectionStateToString(model->accessParser(parser).connState).toUtf8();"
    },
    {
        "line": 32,
        "fullcodeline": "throw Imap::UnexpectedResponseReceived(message.constData(), *resp);"
    },
    {
        "line": 13,
        "fullcodeline": "} else if (model->accessParser(parser).connState > CONN_STATE_CONNECTED_PRETLS_PRECAPS) {"
    },
    {
        "line": 14,
        "fullcodeline": "if (resp->tag.isEmpty()) {"
    },
    {
        "line": 71,
        "fullcodeline": "logout(tr(\"Server has closed the connection\"));"
    },
    {
        "line": 77,
        "fullcodeline": "if (resp->respCode != ALERT) {"
    },
    {
        "line": 80,
        "fullcodeline": "logout(tr(\"Server has greeted us with a BAD response\"));"
    },
    {
        "line": 45,
        "fullcodeline": "if (model->accessParser(parser).capabilitiesFresh) {"
    },
    {
        "line": 63,
        "fullcodeline": "model->changeConnectionState(parser, CONN_STATE_CONNECTED_PRETLS);"
    },
    {
        "line": 103,
        "fullcodeline": "model->changeConnectionState(parser, CONN_STATE_STARTTLS_HANDSHAKE);"
    },
    {
        "line": 140,
        "fullcodeline": "if (model->accessParser(parser).capabilities.contains(QLatin1String(\"LOGINDISABLED\"))) {"
    },
    {
        "line": 56,
        "fullcodeline": "model->changeConnectionState(parser, CONN_STATE_POSTAUTH_PRECAPS);"
    },
    {
        "line": 62,
        "fullcodeline": "if (!model->accessParser(parser).capabilitiesFresh) {"
    },
    {
        "line": 64,
        "fullcodeline": "capabilityCmd = parser->capability();"
    },
    {
        "line": 104,
        "fullcodeline": "if (!model->m_startTls) {"
    },
    {
        "line": 141,
        "fullcodeline": "logout(tr(\"Capabilities still contain LOGINDISABLED even after STARTTLS\"));"
    },
    {
        "line": 143,
        "fullcodeline": "model->changeConnectionState(parser, CONN_STATE_LOGIN);"
    },
    {
        "line": 206,
        "fullcodeline": "EMIT_LATER(model, authAttemptFailed, Q_ARG(QString, message));"
    },
    {
        "line": 207,
        "fullcodeline": "model->m_imapPassword.clear();"
    },
    {
        "line": 208,
        "fullcodeline": "model->m_hasImapPassword = false;"
    },
    {
        "line": 47,
        "fullcodeline": "if (TROJITA_COMPRESS_DEFLATE && model->accessParser(parser).capabilities.contains(QLatin1String(\"COMPRESS=DEFLATE\"))) {"
    },
    {
        "line": 57,
        "fullcodeline": "capabilityCmd = parser->capability();"
    },
    {
        "line": 109,
        "fullcodeline": "EMIT_LATER_NOARG(model, requireStartTlsInFuture);"
    },
    {
        "line": 112,
        "fullcodeline": "logout(tr(\"STARTTLS failed: %1\").arg(resp->message));"
    },
    {
        "line": 157,
        "fullcodeline": "if (resp->respCode == CAPABILITIES || model->accessParser(parser).capabilitiesFresh) {"
    },
    {
        "line": 201,
        "fullcodeline": "if (message.isEmpty()) {"
    },
    {
        "line": 48,
        "fullcodeline": "compressCmd = parser->compressDeflate();"
    },
    {
        "line": 168,
        "fullcodeline": "model->changeConnectionState(parser, CONN_STATE_POSTAUTH_PRECAPS);"
    },
    {
        "line": 176,
        "fullcodeline": "message = tr(\"Temporary failure because a subsystem is down.\");"
    },
    {
        "line": 179,
        "fullcodeline": "message = tr(\"Authentication failed.  This often happens due to bad password or wrong user name.\");"
    },
    {
        "line": 182,
        "fullcodeline": "message = tr(\"Authentication succeeded in using the authentication identity, \""
    },
    {
        "line": 187,
        "fullcodeline": "message = tr(\"Either authentication succeeded or the server no longer had the \""
    },
    {
        "line": 192,
        "fullcodeline": "message = tr(\"The operation is not permitted due to a lack of privacy.\");"
    },
    {
        "line": 195,
        "fullcodeline": "message = tr(\"You should contact the system administrator or support desk.\");"
    },
    {
        "line": 202,
        "fullcodeline": "message = tr(\"Login failed: %1\").arg(resp->message);"
    },
    {
        "line": 159,
        "fullcodeline": "if (TROJITA_COMPRESS_DEFLATE && model->accessParser(parser).capabilities.contains(QLatin1String(\"COMPRESS=DEFLATE\"))) {"
    },
    {
        "line": 169,
        "fullcodeline": "capabilityCmd = parser->capability();"
    },
    {
        "line": 204,
        "fullcodeline": "message = tr(\"%1\\n\\n%2\").arg(message, resp->message);"
    },
    {
        "line": 211,
        "fullcodeline": "_failed(QLatin1String(\"Connection closed after a failed login\"));"
    },
    {
        "line": 160,
        "fullcodeline": "compressCmd = parser->compressDeflate();"
    }
]