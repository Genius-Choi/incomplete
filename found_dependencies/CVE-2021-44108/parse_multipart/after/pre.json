[
    {
        "line": 4,
        "fullcodeline": "char *boundary = NULL;"
    },
    {
        "line": 10,
        "fullcodeline": "multipart_parser *parser = NULL;"
    },
    {
        "line": 12,
        "fullcodeline": "ogs_assert(message);"
    },
    {
        "line": 13,
        "fullcodeline": "ogs_assert(http);"
    },
    {
        "line": 15,
        "fullcodeline": "memset(&settings, 0, sizeof(settings));"
    },
    {
        "line": 16,
        "fullcodeline": "settings.on_header_field = &on_header_field;"
    },
    {
        "line": 17,
        "fullcodeline": "settings.on_header_value = &on_header_value;"
    },
    {
        "line": 18,
        "fullcodeline": "settings.on_part_data = &on_part_data;"
    },
    {
        "line": 19,
        "fullcodeline": "settings.on_part_data_end = &on_part_data_end;"
    },
    {
        "line": 33,
        "fullcodeline": "boundary = ogs_strndup(http->content, i);"
    },
    {
        "line": 34,
        "fullcodeline": "ogs_assert(boundary);"
    },
    {
        "line": 36,
        "fullcodeline": "parser = multipart_parser_init(boundary, &settings);"
    },
    {
        "line": 37,
        "fullcodeline": "ogs_assert(parser);"
    },
    {
        "line": 39,
        "fullcodeline": "memset(&data, 0, sizeof(data));"
    },
    {
        "line": 40,
        "fullcodeline": "multipart_parser_set_data(parser, &data);"
    },
    {
        "line": 41,
        "fullcodeline": "multipart_parser_execute(parser, http->content, http->content_length);"
    },
    {
        "line": 21,
        "fullcodeline": "for (i = 0; i < http->content_length; i++) {"
    },
    {
        "line": 26,
        "fullcodeline": "if (i >= http->content_length) {"
    },
    {
        "line": 46,
        "fullcodeline": "if (data.num_of_part > OGS_SBI_MAX_NUM_OF_PART) {"
    },
    {
        "line": 51,
        "fullcodeline": "for (i = 0; i < data.num_of_part; i++) {"
    },
    {
        "line": 27,
        "fullcodeline": "ogs_error(\"Invalid HTTP content [%d]\", i);"
    },
    {
        "line": 28,
        "fullcodeline": "ogs_log_hexdump(OGS_LOG_ERROR,"
    },
    {
        "line": 48,
        "fullcodeline": "ogs_fatal(\"Overflow num_of_part[%d]\", data.num_of_part);"
    },
    {
        "line": 52,
        "fullcodeline": "SWITCH(data.part[i].content_type)"
    },
    {
        "line": 54,
        "fullcodeline": "parse_json(message,"
    },
    {
        "line": 22,
        "fullcodeline": "if (http->content[i] == '\\r' && http->content[i+1] == '\\n')"
    },
    {
        "line": 29,
        "fullcodeline": "(unsigned char *)http->content, http->content_length);"
    }
]