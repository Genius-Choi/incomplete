[
    {
        "line": 11,
        "fullcodeline": "bool restart = false;"
    },
    {
        "line": 20,
        "fullcodeline": "struct bgp_nlri nlris[NLRI_TYPE_MAX];"
    },
    {
        "line": 35,
        "fullcodeline": "memset(&attr, 0, sizeof(attr));"
    },
    {
        "line": 36,
        "fullcodeline": "attr.label_index = BGP_INVALID_LABEL_INDEX;"
    },
    {
        "line": 37,
        "fullcodeline": "attr.label = MPLS_INVALID_LABEL;"
    },
    {
        "line": 38,
        "fullcodeline": "memset(&nlris, 0, sizeof(nlris));"
    },
    {
        "line": 39,
        "fullcodeline": "memset(peer->rcvd_attr_str, 0, BUFSIZ);"
    },
    {
        "line": 40,
        "fullcodeline": "peer->rcvd_attr_printed = 0;"
    },
    {
        "line": 42,
        "fullcodeline": "s = peer->curr;"
    },
    {
        "line": 43,
        "fullcodeline": "end = stream_pnt(s) + size;"
    },
    {
        "line": 59,
        "fullcodeline": "withdraw_len = stream_getw(s);"
    },
    {
        "line": 92,
        "fullcodeline": "attribute_len = stream_getw(s);"
    },
    {
        "line": 112,
        "fullcodeline": "enum bgp_attr_parse_ret attr_parse_ret = BGP_ATTR_PARSE_PROCEED;"
    },
    {
        "line": 152,
        "fullcodeline": "update_len = end - stream_pnt(s);"
    },
    {
        "line": 312,
        "fullcodeline": "bgp_attr_unintern_sub(&attr);"
    },
    {
        "line": 314,
        "fullcodeline": "peer->update_time = monotime(NULL);"
    },
    {
        "line": 317,
        "fullcodeline": "peer->advmap_table_change = true;"
    },
    {
        "line": 23,
        "fullcodeline": "if (!peer_established(connection)) {"
    },
    {
        "line": 49,
        "fullcodeline": "if (stream_pnt(s) + 2 > end) {"
    },
    {
        "line": 62,
        "fullcodeline": "if (stream_pnt(s) + withdraw_len > end) {"
    },
    {
        "line": 72,
        "fullcodeline": "if (withdraw_len > 0) {"
    },
    {
        "line": 81,
        "fullcodeline": "if (stream_pnt(s) + 2 > end) {"
    },
    {
        "line": 95,
        "fullcodeline": "if (stream_pnt(s) + attribute_len > end) {"
    },
    {
        "line": 130,
        "fullcodeline": "if (attr_parse_ret == BGP_ATTR_PARSE_WITHDRAW"
    },
    {
        "line": 158,
        "fullcodeline": "if (update_len && attribute_len &&"
    },
    {
        "line": 179,
        "fullcodeline": "if (BGP_DEBUG(update, UPDATE_IN))"
    },
    {
        "line": 184,
        "fullcodeline": "for (int i = NLRI_UPDATE; i < NLRI_TYPE_MAX; i++) {"
    },
    {
        "line": 236,
        "fullcodeline": "if (!update_len && !withdraw_len && nlris[NLRI_MP_UPDATE].length == 0) {"
    },
    {
        "line": 24,
        "fullcodeline": "flog_err(EC_BGP_INVALID_STATUS,"
    },
    {
        "line": 29,
        "fullcodeline": "bgp_notify_send(connection, BGP_NOTIFY_FSM_ERR,"
    },
    {
        "line": 50,
        "fullcodeline": "flog_err(EC_BGP_UPDATE_RCV,"
    },
    {
        "line": 53,
        "fullcodeline": "bgp_notify_send(connection, BGP_NOTIFY_UPDATE_ERR,"
    },
    {
        "line": 63,
        "fullcodeline": "flog_err(EC_BGP_UPDATE_RCV,"
    },
    {
        "line": 66,
        "fullcodeline": "bgp_notify_send(connection, BGP_NOTIFY_UPDATE_ERR,"
    },
    {
        "line": 73,
        "fullcodeline": "nlris[NLRI_WITHDRAW].afi = AFI_IP;"
    },
    {
        "line": 74,
        "fullcodeline": "nlris[NLRI_WITHDRAW].safi = SAFI_UNICAST;"
    },
    {
        "line": 75,
        "fullcodeline": "nlris[NLRI_WITHDRAW].nlri = stream_pnt(s);"
    },
    {
        "line": 76,
        "fullcodeline": "nlris[NLRI_WITHDRAW].length = withdraw_len;"
    },
    {
        "line": 77,
        "fullcodeline": "stream_forward_getp(s, withdraw_len);"
    },
    {
        "line": 82,
        "fullcodeline": "flog_warn("
    },
    {
        "line": 86,
        "fullcodeline": "bgp_notify_send(peer->connection, BGP_NOTIFY_UPDATE_ERR,"
    },
    {
        "line": 96,
        "fullcodeline": "flog_warn("
    },
    {
        "line": 100,
        "fullcodeline": "bgp_notify_send(connection, BGP_NOTIFY_UPDATE_ERR,"
    },
    {
        "line": 120,
        "fullcodeline": "attr_parse_ret = bgp_attr_parse(peer, &attr, attribute_len,"
    },
    {
        "line": 132,
        "fullcodeline": "|| BGP_DEBUG(update, UPDATE_PREFIX)) {"
    },
    {
        "line": 133,
        "fullcodeline": "ret = bgp_dump_attr(&attr, peer->rcvd_attr_str,"
    },
    {
        "line": 136,
        "fullcodeline": "peer->stat_upd_7606++;"
    },
    {
        "line": 159,
        "fullcodeline": "attr_parse_ret != BGP_ATTR_PARSE_MISSING_MANDATORY) {"
    },
    {
        "line": 161,
        "fullcodeline": "nlris[NLRI_UPDATE].afi = AFI_IP;"
    },
    {
        "line": 162,
        "fullcodeline": "nlris[NLRI_UPDATE].safi = SAFI_UNICAST;"
    },
    {
        "line": 163,
        "fullcodeline": "nlris[NLRI_UPDATE].nlri = stream_pnt(s);"
    },
    {
        "line": 164,
        "fullcodeline": "nlris[NLRI_UPDATE].length = update_len;"
    },
    {
        "line": 165,
        "fullcodeline": "stream_forward_getp(s, update_len);"
    },
    {
        "line": 180,
        "fullcodeline": "zlog_debug(\"%pBP rcvd UPDATE wlen %d attrlen %d alen %d\", peer,"
    },
    {
        "line": 237,
        "fullcodeline": "afi_t afi = 0;"
    },
    {
        "line": 27,
        "fullcodeline": "lookup_msg(bgp_status_msg, peer->connection->status,"
    },
    {
        "line": 30,
        "fullcodeline": "bgp_fsm_error_subcode(peer->connection->status));"
    },
    {
        "line": 123,
        "fullcodeline": "if (attr_parse_ret == BGP_ATTR_PARSE_ERROR) {"
    },
    {
        "line": 131,
        "fullcodeline": "|| BGP_DEBUG(update, UPDATE_IN)"
    },
    {
        "line": 138,
        "fullcodeline": "if (attr_parse_ret == BGP_ATTR_PARSE_WITHDRAW)"
    },
    {
        "line": 144,
        "fullcodeline": "if (ret && bgp_debug_update(peer, NULL, NULL, 1)) {"
    },
    {
        "line": 167,
        "fullcodeline": "if (CHECK_FLAG(attr.flag, ATTR_FLAG_BIT(BGP_ATTR_MP_REACH_NLRI))) {"
    },
    {
        "line": 198,
        "fullcodeline": "if (nlris[i].length == 0)"
    },
    {
        "line": 216,
        "fullcodeline": "if (nlri_ret < BGP_NLRI_PARSE_OK"
    },
    {
        "line": 242,
        "fullcodeline": "if (BGP_PEER_GRACEFUL_RESTART_CAPABLE(peer)"
    },
    {
        "line": 250,
        "fullcodeline": "if (!attribute_len) {"
    },
    {
        "line": 259,
        "fullcodeline": "if (afi && peer->afc[afi][safi]) {"
    },
    {
        "line": 124,
        "fullcodeline": "bgp_attr_unintern_sub(&attr);"
    },
    {
        "line": 139,
        "fullcodeline": "flog_err("
    },
    {
        "line": 145,
        "fullcodeline": "zlog_debug(\"%pBP rcvd UPDATE w/ attr: %s\", peer,"
    },
    {
        "line": 147,
        "fullcodeline": "peer->rcvd_attr_printed = 1;"
    },
    {
        "line": 191,
        "fullcodeline": "zlog_info("
    },
    {
        "line": 204,
        "fullcodeline": "nlri_ret = bgp_nlri_parse(peer, NLRI_ATTR_ARG,"
    },
    {
        "line": 209,
        "fullcodeline": "nlri_ret = bgp_nlri_parse(peer, NLRI_ATTR_ARG,"
    },
    {
        "line": 213,
        "fullcodeline": "nlri_ret = BGP_NLRI_PARSE_ERROR;"
    },
    {
        "line": 217,
        "fullcodeline": "&& nlri_ret != BGP_NLRI_PARSE_ERROR_PREFIX_OVERFLOW) {"
    },
    {
        "line": 218,
        "fullcodeline": "flog_err(EC_BGP_UPDATE_RCV,"
    },
    {
        "line": 226,
        "fullcodeline": "bgp_attr_unintern_sub(&attr);"
    },
    {
        "line": 243,
        "fullcodeline": "&& BGP_PEER_RESTARTING_MODE(peer))"
    },
    {
        "line": 244,
        "fullcodeline": "restart = true;"
    },
    {
        "line": 251,
        "fullcodeline": "afi = AFI_IP;"
    },
    {
        "line": 252,
        "fullcodeline": "safi = SAFI_UNICAST;"
    },
    {
        "line": 260,
        "fullcodeline": "struct vrf *vrf = vrf_lookup_by_id(peer->bgp->vrf_id);"
    },
    {
        "line": 303,
        "fullcodeline": "zlog_info("
    },
    {
        "line": 172,
        "fullcodeline": "if (bgp_attr_nexthop_valid(peer, &attr) < 0) {"
    },
    {
        "line": 220,
        "fullcodeline": "if (peer_established(connection))"
    },
    {
        "line": 263,
        "fullcodeline": "if (!CHECK_FLAG(peer->af_sflags[afi][safi],"
    },
    {
        "line": 305,
        "fullcodeline": "__func__, get_afi_safi_str(afi, safi, false),"
    },
    {
        "line": 306,
        "fullcodeline": "peer->host, vrf ? vrf->name : VRF_DEFAULT_NAME);"
    },
    {
        "line": 173,
        "fullcodeline": "bgp_attr_unintern_sub(&attr);"
    },
    {
        "line": 221,
        "fullcodeline": "bgp_notify_send(connection,"
    },
    {
        "line": 253,
        "fullcodeline": "} else if (attr.flag & ATTR_FLAG_BIT(BGP_ATTR_MP_UNREACH_NLRI)"
    },
    {
        "line": 265,
        "fullcodeline": "SET_FLAG(peer->af_sflags[afi][safi],"
    },
    {
        "line": 267,
        "fullcodeline": "bgp_update_explicit_eors(peer);"
    },
    {
        "line": 301,
        "fullcodeline": "bgp_clear_stale_route(peer, afi, safi);"
    },
    {
        "line": 223,
        "fullcodeline": "i <= NLRI_WITHDRAW"
    },
    {
        "line": 254,
        "fullcodeline": "&& nlris[NLRI_MP_WITHDRAW].length == 0) {"
    },
    {
        "line": 276,
        "fullcodeline": "if (gr_info->eor_required"
    },
    {
        "line": 271,
        "fullcodeline": "gr_info->eor_received++;"
    },
    {
        "line": 290,
        "fullcodeline": "EVENT_OFF(gr_info->t_select_deferral);"
    },
    {
        "line": 291,
        "fullcodeline": "gr_info->eor_required = 0;"
    },
    {
        "line": 292,
        "fullcodeline": "gr_info->eor_received = 0;"
    },
    {
        "line": 294,
        "fullcodeline": "bgp_best_path_select_defer(peer->bgp,"
    },
    {
        "line": 278,
        "fullcodeline": "if (bgp_debug_neighbor_events(peer))"
    },
    {
        "line": 279,
        "fullcodeline": "zlog_debug("
    },
    {
        "line": 286,
        "fullcodeline": "void *info = EVENT_ARG("
    },
    {
        "line": 288,
        "fullcodeline": "XFREE(MTYPE_TMP, info);"
    }
]