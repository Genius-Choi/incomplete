[
    {
        "line": 2,
        "fullcodeline": "timeout = 1"
    },
    {
        "line": 4,
        "fullcodeline": "clt = Client(uri_crypto_cert)"
    },
    {
        "line": 5,
        "fullcodeline": "clt.secure_channel_timeout = timeout * 1000"
    },
    {
        "line": 6,
        "fullcodeline": "user_cert = uacrypto.CertProperties(peer_creds['certificate'], \"DER\")"
    },
    {
        "line": 7,
        "fullcodeline": "user_key = uacrypto.CertProperties("
    },
    {
        "line": 11,
        "fullcodeline": "server_cert = uacrypto.CertProperties(cert)"
    },
    {
        "line": 12,
        "fullcodeline": "await clt.set_security("
    },
    {
        "line": 3,
        "fullcodeline": "_, cert = srv_crypto_one_cert"
    },
    {
        "line": 19,
        "fullcodeline": "async with clt:"
    },
    {
        "line": 23,
        "fullcodeline": "await asyncio.sleep(timeout)"
    },
    {
        "line": 24,
        "fullcodeline": "sym_crypto = clt.uaclient.security_policy.symmetric_cryptography"
    },
    {
        "line": 25,
        "fullcodeline": "prev_verifier = sym_crypto.Prev_Verifier"
    },
    {
        "line": 26,
        "fullcodeline": "prev_decryptor = sym_crypto.Prev_Decryptor"
    },
    {
        "line": 27,
        "fullcodeline": "assert isinstance(prev_verifier, Verifier)"
    },
    {
        "line": 28,
        "fullcodeline": "assert isinstance(prev_decryptor, Decryptor)"
    },
    {
        "line": 30,
        "fullcodeline": "mock_decry_reset = mocker.patch.object(prev_verifier, \"reset\", wraps=prev_verifier.reset)"
    },
    {
        "line": 31,
        "fullcodeline": "mock_verif_reset = mocker.patch.object(prev_decryptor, \"reset\", wraps=prev_decryptor.reset)"
    },
    {
        "line": 32,
        "fullcodeline": "assert mock_decry_reset.call_count == 0"
    },
    {
        "line": 33,
        "fullcodeline": "assert mock_verif_reset.call_count == 0"
    },
    {
        "line": 35,
        "fullcodeline": "await asyncio.sleep(timeout * 0.3)"
    },
    {
        "line": 36,
        "fullcodeline": "assert await clt.get_objects_node().get_children()"
    },
    {
        "line": 38,
        "fullcodeline": "assert sym_crypto.key_expiration > 0"
    },
    {
        "line": 39,
        "fullcodeline": "assert sym_crypto.prev_key_expiration > 0"
    },
    {
        "line": 40,
        "fullcodeline": "assert sym_crypto.key_expiration > sym_crypto.prev_key_expiration"
    },
    {
        "line": 42,
        "fullcodeline": "assert mock_decry_reset.call_count == 1"
    },
    {
        "line": 43,
        "fullcodeline": "assert mock_verif_reset.call_count == 1"
    },
    {
        "line": 44,
        "fullcodeline": "assert clt.uaclient.security_policy.symmetric_cryptography.Prev_Verifier is None"
    },
    {
        "line": 45,
        "fullcodeline": "assert clt.uaclient.security_policy.symmetric_cryptography.Prev_Decryptor is None"
    },
    {
        "line": 20,
        "fullcodeline": "assert clt.uaclient.security_policy.symmetric_cryptography.Prev_Verifier is None"
    },
    {
        "line": 21,
        "fullcodeline": "assert clt.uaclient.security_policy.symmetric_cryptography.Prev_Decryptor is None"
    }
]