[
    {
        "line": 2,
        "fullcodeline": "OpData* op_data = reinterpret_cast<OpData*>(node->user_data);"
    },
    {
        "line": 5,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, node->outputs->size, num_inputs);"
    },
    {
        "line": 8,
        "fullcodeline": "Subgraph* this_subgraph = reinterpret_cast<Subgraph*>(context->impl_);"
    },
    {
        "line": 9,
        "fullcodeline": "auto* subgraphs = this_subgraph->GetSubgraphs();"
    },
    {
        "line": 10,
        "fullcodeline": "TF_LITE_ENSURE(context, op_data->cond_subgraph_index < subgraphs->size());"
    },
    {
        "line": 11,
        "fullcodeline": "TF_LITE_ENSURE(context, op_data->body_subgraph_index < subgraphs->size());"
    },
    {
        "line": 12,
        "fullcodeline": "TF_LITE_ENSURE(context,"
    },
    {
        "line": 15,
        "fullcodeline": "Subgraph* cond_subgraph = (*subgraphs)[op_data->cond_subgraph_index].get();"
    },
    {
        "line": 16,
        "fullcodeline": "Subgraph* body_subgraph = (*subgraphs)[op_data->body_subgraph_index].get();"
    },
    {
        "line": 19,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, cond_subgraph->inputs().size(), num_inputs);"
    },
    {
        "line": 20,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, cond_subgraph->outputs().size(), 1);"
    },
    {
        "line": 23,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, body_subgraph->inputs().size(), num_inputs);"
    },
    {
        "line": 24,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, body_subgraph->outputs().size(), num_inputs);"
    },
    {
        "line": 27,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 31,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, cond_subgraph->AllocateTensors());"
    },
    {
        "line": 32,
        "fullcodeline": "TfLiteTensor* cond_output ="
    },
    {
        "line": 44,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 48,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, body_subgraph->AllocateTensors());"
    },
    {
        "line": 13,
        "fullcodeline": "op_data->cond_subgraph_index != op_data->body_subgraph_index);"
    },
    {
        "line": 28,
        "fullcodeline": "context, CopyTensorsShapeAndType("
    },
    {
        "line": 33,
        "fullcodeline": "cond_subgraph->tensor(cond_subgraph->outputs()[0]);"
    },
    {
        "line": 37,
        "fullcodeline": "if (IsDynamicTensor(cond_output)) {"
    },
    {
        "line": 45,
        "fullcodeline": "context, CopyTensorsShapeAndType("
    },
    {
        "line": 49,
        "fullcodeline": "if (body_subgraph->HasDynamicTensors()) {"
    },
    {
        "line": 71,
        "fullcodeline": "for (int i = 0; i < num_inputs; ++i) {"
    },
    {
        "line": 29,
        "fullcodeline": "context, this_subgraph, TfLiteIntArrayView(node->inputs),"
    },
    {
        "line": 30,
        "fullcodeline": "cond_subgraph, cond_subgraph->inputs(), true));"
    },
    {
        "line": 38,
        "fullcodeline": "op_data->cond_has_dynamic_output_tensors = true;"
    },
    {
        "line": 46,
        "fullcodeline": "context, this_subgraph, TfLiteIntArrayView(node->inputs),"
    },
    {
        "line": 47,
        "fullcodeline": "body_subgraph, body_subgraph->inputs(), true));"
    },
    {
        "line": 50,
        "fullcodeline": "op_data->body_has_dynamic_output_tensors = true;"
    },
    {
        "line": 73,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, i, &output));"
    },
    {
        "line": 40,
        "fullcodeline": "TF_LITE_ENSURE_STATUS(CheckCondOutput(context, cond_output));"
    },
    {
        "line": 52,
        "fullcodeline": "for (int i = 0; i < num_inputs; ++i) {"
    },
    {
        "line": 75,
        "fullcodeline": "SetTensorToDynamic(output);"
    },
    {
        "line": 53,
        "fullcodeline": "TfLiteTensor* body_input ="
    },
    {
        "line": 55,
        "fullcodeline": "TfLiteTensor* body_output ="
    },
    {
        "line": 57,
        "fullcodeline": "TF_LITE_ENSURE_TYPES_EQ(context, body_input->type, body_output->type);"
    },
    {
        "line": 59,
        "fullcodeline": "TF_LITE_ENSURE(context, !IsDynamicTensor(body_output));"
    },
    {
        "line": 77,
        "fullcodeline": "TfLiteTensor* body_output ="
    },
    {
        "line": 79,
        "fullcodeline": "TfLiteIntArray* output_size = TfLiteIntArrayCopy(body_output->dims);"
    },
    {
        "line": 80,
        "fullcodeline": "TF_LITE_ENSURE_OK(context,"
    },
    {
        "line": 54,
        "fullcodeline": "body_subgraph->tensor(body_subgraph->inputs()[i]);"
    },
    {
        "line": 56,
        "fullcodeline": "body_subgraph->tensor(body_subgraph->outputs()[i]);"
    },
    {
        "line": 60,
        "fullcodeline": "if (!TfLiteIntArrayEqual(body_input->dims, body_output->dims)) {"
    },
    {
        "line": 78,
        "fullcodeline": "body_subgraph->tensor(body_subgraph->outputs()[i]);"
    },
    {
        "line": 81,
        "fullcodeline": "context->ResizeTensor(context, output, output_size));"
    },
    {
        "line": 66,
        "fullcodeline": "op_data->body_has_dynamic_output_tensors = true;"
    }
]