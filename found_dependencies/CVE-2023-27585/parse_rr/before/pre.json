[
    {
        "line": 6,
        "fullcodeline": "const pj_uint8_t *p = start;"
    },
    {
        "line": 11,
        "fullcodeline": "status = get_name_len(0, pkt, start, max, &name_part_len, &name_len);"
    },
    {
        "line": 16,
        "fullcodeline": "rr->name.ptr = (char*) pj_pool_alloc(pool, name_len+4);"
    },
    {
        "line": 17,
        "fullcodeline": "rr->name.slen = 0;"
    },
    {
        "line": 20,
        "fullcodeline": "status = get_name(0, pkt, start, max, &rr->name);"
    },
    {
        "line": 24,
        "fullcodeline": "p = (start + name_part_len);"
    },
    {
        "line": 31,
        "fullcodeline": "pj_memcpy(&rr->type, p, 2);"
    },
    {
        "line": 32,
        "fullcodeline": "rr->type = pj_ntohs(rr->type);"
    },
    {
        "line": 33,
        "fullcodeline": "p += 2;"
    },
    {
        "line": 36,
        "fullcodeline": "pj_memcpy(&rr->dnsclass, p, 2);"
    },
    {
        "line": 37,
        "fullcodeline": "rr->dnsclass = pj_ntohs(rr->dnsclass);"
    },
    {
        "line": 38,
        "fullcodeline": "p += 2;"
    },
    {
        "line": 52,
        "fullcodeline": "pj_memcpy(&rr->ttl, p, 4);"
    },
    {
        "line": 54,
        "fullcodeline": "p += 4;"
    },
    {
        "line": 57,
        "fullcodeline": "pj_memcpy(&rr->rdlength, p, 2);"
    },
    {
        "line": 58,
        "fullcodeline": "rr->rdlength = pj_ntohs(rr->rdlength);"
    },
    {
        "line": 59,
        "fullcodeline": "p += 2;"
    },
    {
        "line": 12,
        "fullcodeline": "if (status != PJ_SUCCESS)"
    },
    {
        "line": 21,
        "fullcodeline": "if (status != PJ_SUCCESS)"
    },
    {
        "line": 27,
        "fullcodeline": "if (p+10 > max)"
    },
    {
        "line": 53,
        "fullcodeline": "rr->ttl = pj_ntohl(rr->ttl);"
    },
    {
        "line": 62,
        "fullcodeline": "if (p + rr->rdlength > max)"
    },
    {
        "line": 66,
        "fullcodeline": "if (rr->type == PJ_DNS_TYPE_A) {"
    },
    {
        "line": 67,
        "fullcodeline": "pj_memcpy(&rr->rdata.a.ip_addr, p, 4);"
    },
    {
        "line": 68,
        "fullcodeline": "p += 4;"
    },
    {
        "line": 135,
        "fullcodeline": "*parsed_len = (int)(p - start);"
    },
    {
        "line": 43,
        "fullcodeline": "if (rr->type == PJ_DNS_TYPE_A     || rr->type == PJ_DNS_TYPE_AAAA  ||"
    },
    {
        "line": 45,
        "fullcodeline": "rr->type == PJ_DNS_TYPE_PTR   || rr->type == PJ_DNS_TYPE_SRV)"
    },
    {
        "line": 70,
        "fullcodeline": "} else if (rr->type == PJ_DNS_TYPE_AAAA) {"
    },
    {
        "line": 71,
        "fullcodeline": "pj_memcpy(&rr->rdata.aaaa.ip_addr, p, 16);"
    },
    {
        "line": 72,
        "fullcodeline": "p += 16;"
    },
    {
        "line": 44,
        "fullcodeline": "rr->type == PJ_DNS_TYPE_CNAME || rr->type == PJ_DNS_TYPE_NS    ||"
    },
    {
        "line": 74,
        "fullcodeline": "} else if (rr->type == PJ_DNS_TYPE_CNAME ||"
    },
    {
        "line": 76,
        "fullcodeline": "rr->type == PJ_DNS_TYPE_PTR)"
    },
    {
        "line": 80,
        "fullcodeline": "status = get_name_len(0, pkt, p, max, &name_part_len, &name_len);"
    },
    {
        "line": 85,
        "fullcodeline": "rr->rdata.cname.name.ptr = (char*) pj_pool_alloc(pool, name_len);"
    },
    {
        "line": 86,
        "fullcodeline": "rr->rdata.cname.name.slen = 0;"
    },
    {
        "line": 89,
        "fullcodeline": "status = get_name(0, pkt, p, max, &rr->rdata.cname.name);"
    },
    {
        "line": 93,
        "fullcodeline": "p += name_part_len;"
    },
    {
        "line": 75,
        "fullcodeline": "rr->type == PJ_DNS_TYPE_NS ||"
    },
    {
        "line": 81,
        "fullcodeline": "if (status != PJ_SUCCESS)"
    },
    {
        "line": 90,
        "fullcodeline": "if (status != PJ_SUCCESS)"
    },
    {
        "line": 98,
        "fullcodeline": "pj_memcpy(&rr->rdata.srv.prio, p, 2);"
    },
    {
        "line": 100,
        "fullcodeline": "p += 2;"
    },
    {
        "line": 103,
        "fullcodeline": "pj_memcpy(&rr->rdata.srv.weight, p, 2);"
    },
    {
        "line": 105,
        "fullcodeline": "p += 2;"
    },
    {
        "line": 108,
        "fullcodeline": "pj_memcpy(&rr->rdata.srv.port, p, 2);"
    },
    {
        "line": 110,
        "fullcodeline": "p += 2;"
    },
    {
        "line": 113,
        "fullcodeline": "status = get_name_len(0, pkt, p, max, &name_part_len, &name_len);"
    },
    {
        "line": 118,
        "fullcodeline": "rr->rdata.srv.target.ptr = (char*) pj_pool_alloc(pool, name_len);"
    },
    {
        "line": 119,
        "fullcodeline": "rr->rdata.srv.target.slen = 0;"
    },
    {
        "line": 122,
        "fullcodeline": "status = get_name(0, pkt, p, max, &rr->rdata.srv.target);"
    },
    {
        "line": 125,
        "fullcodeline": "p += name_part_len;"
    },
    {
        "line": 99,
        "fullcodeline": "rr->rdata.srv.prio = pj_ntohs(rr->rdata.srv.prio);"
    },
    {
        "line": 104,
        "fullcodeline": "rr->rdata.srv.weight = pj_ntohs(rr->rdata.srv.weight);"
    },
    {
        "line": 109,
        "fullcodeline": "rr->rdata.srv.port = pj_ntohs(rr->rdata.srv.port);"
    },
    {
        "line": 114,
        "fullcodeline": "if (status != PJ_SUCCESS)"
    },
    {
        "line": 123,
        "fullcodeline": "if (status != PJ_SUCCESS)"
    },
    {
        "line": 129,
        "fullcodeline": "rr->data = pj_pool_alloc(pool, rr->rdlength);"
    },
    {
        "line": 130,
        "fullcodeline": "pj_memcpy(rr->data, p, rr->rdlength);"
    },
    {
        "line": 132,
        "fullcodeline": "p += rr->rdlength;"
    }
]