[
    {
        "line": 2,
        "fullcodeline": "char *err = NULL;"
    },
    {
        "line": 3,
        "fullcodeline": "int linenum = 0, totlines, i;"
    },
    {
        "line": 4,
        "fullcodeline": "int slaveof_linenum = 0;"
    },
    {
        "line": 7,
        "fullcodeline": "lines = sdssplitlen(config,strlen(config),\"\\n\",1,&totlines);"
    },
    {
        "line": 533,
        "fullcodeline": "sdsfreesplitres(lines,totlines);"
    },
    {
        "line": 537,
        "fullcodeline": "fprintf(stderr, \"\\n*** FATAL CONFIG FILE ERROR ***\\n\");"
    },
    {
        "line": 538,
        "fullcodeline": "fprintf(stderr, \"Reading the configuration file, at line %d\\n\", linenum);"
    },
    {
        "line": 539,
        "fullcodeline": "fprintf(stderr, \">>> '%s'\\n\", lines[i]);"
    },
    {
        "line": 540,
        "fullcodeline": "fprintf(stderr, \"%s\\n\", err);"
    },
    {
        "line": 541,
        "fullcodeline": "exit(1);"
    },
    {
        "line": 9,
        "fullcodeline": "for (i = 0; i < totlines; i++) {"
    },
    {
        "line": 526,
        "fullcodeline": "if (server.cluster_enabled && server.masterhost) {"
    },
    {
        "line": 13,
        "fullcodeline": "linenum = i+1;"
    },
    {
        "line": 14,
        "fullcodeline": "lines[i] = sdstrim(lines[i],\" \\t\\r\\n\");"
    },
    {
        "line": 20,
        "fullcodeline": "argv = sdssplitargs(lines[i],&argc);"
    },
    {
        "line": 31,
        "fullcodeline": "sdstolower(argv[0]);"
    },
    {
        "line": 522,
        "fullcodeline": "sdsfreesplitres(argv,argc);"
    },
    {
        "line": 527,
        "fullcodeline": "linenum = slaveof_linenum;"
    },
    {
        "line": 528,
        "fullcodeline": "i = linenum-1;"
    },
    {
        "line": 529,
        "fullcodeline": "err = \"slaveof directive not allowed in cluster mode\";"
    },
    {
        "line": 17,
        "fullcodeline": "if (lines[i][0] == '#' || lines[i][0] == '\\0') continue;"
    },
    {
        "line": 21,
        "fullcodeline": "if (argv == NULL) {"
    },
    {
        "line": 27,
        "fullcodeline": "if (argc == 0) {"
    },
    {
        "line": 34,
        "fullcodeline": "if (!strcasecmp(argv[0],\"timeout\") && argc == 2) {"
    },
    {
        "line": 22,
        "fullcodeline": "err = \"Unbalanced quotes in configuration line\";"
    },
    {
        "line": 28,
        "fullcodeline": "sdsfreesplitres(argv,argc);"
    },
    {
        "line": 35,
        "fullcodeline": "server.maxidletime = atoi(argv[1]);"
    },
    {
        "line": 36,
        "fullcodeline": "if (server.maxidletime < 0) {"
    },
    {
        "line": 37,
        "fullcodeline": "err = \"Invalid timeout value\"; goto loaderr;"
    },
    {
        "line": 39,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"tcp-keepalive\") && argc == 2) {"
    },
    {
        "line": 40,
        "fullcodeline": "server.tcpkeepalive = atoi(argv[1]);"
    },
    {
        "line": 41,
        "fullcodeline": "if (server.tcpkeepalive < 0) {"
    },
    {
        "line": 42,
        "fullcodeline": "err = \"Invalid tcp-keepalive value\"; goto loaderr;"
    },
    {
        "line": 44,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"protected-mode\") && argc == 2) {"
    },
    {
        "line": 45,
        "fullcodeline": "if ((server.protected_mode = yesnotoi(argv[1])) == -1) {"
    },
    {
        "line": 46,
        "fullcodeline": "err = \"argument must be 'yes' or 'no'\"; goto loaderr;"
    },
    {
        "line": 48,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"port\") && argc == 2) {"
    },
    {
        "line": 49,
        "fullcodeline": "server.port = atoi(argv[1]);"
    },
    {
        "line": 50,
        "fullcodeline": "if (server.port < 0 || server.port > 65535) {"
    },
    {
        "line": 51,
        "fullcodeline": "err = \"Invalid port\"; goto loaderr;"
    },
    {
        "line": 53,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"tcp-backlog\") && argc == 2) {"
    },
    {
        "line": 54,
        "fullcodeline": "server.tcp_backlog = atoi(argv[1]);"
    },
    {
        "line": 55,
        "fullcodeline": "if (server.tcp_backlog < 0) {"
    },
    {
        "line": 56,
        "fullcodeline": "err = \"Invalid backlog value\"; goto loaderr;"
    },
    {
        "line": 58,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"bind\") && argc >= 2) {"
    },
    {
        "line": 59,
        "fullcodeline": "int j, addresses = argc-1;"
    },
    {
        "line": 66,
        "fullcodeline": "server.bindaddr_count = addresses;"
    },
    {
        "line": 61,
        "fullcodeline": "if (addresses > CONFIG_BINDADDR_MAX) {"
    },
    {
        "line": 64,
        "fullcodeline": "for (j = 0; j < addresses; j++)"
    },
    {
        "line": 65,
        "fullcodeline": "server.bindaddr[j] = zstrdup(argv[j+1]);"
    },
    {
        "line": 62,
        "fullcodeline": "err = \"Too many bind addresses specified\"; goto loaderr;"
    },
    {
        "line": 67,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"unixsocket\") && argc == 2) {"
    },
    {
        "line": 68,
        "fullcodeline": "server.unixsocket = zstrdup(argv[1]);"
    },
    {
        "line": 69,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"unixsocketperm\") && argc == 2) {"
    },
    {
        "line": 70,
        "fullcodeline": "errno = 0;"
    },
    {
        "line": 71,
        "fullcodeline": "server.unixsocketperm = (mode_t)strtol(argv[1], NULL, 8);"
    },
    {
        "line": 72,
        "fullcodeline": "if (errno || server.unixsocketperm > 0777) {"
    },
    {
        "line": 73,
        "fullcodeline": "err = \"Invalid socket file permissions\"; goto loaderr;"
    },
    {
        "line": 75,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"save\")) {"
    },
    {
        "line": 76,
        "fullcodeline": "if (argc == 3) {"
    },
    {
        "line": 77,
        "fullcodeline": "int seconds = atoi(argv[1]);"
    },
    {
        "line": 78,
        "fullcodeline": "int changes = atoi(argv[2]);"
    },
    {
        "line": 82,
        "fullcodeline": "appendServerSaveParams(seconds,changes);"
    },
    {
        "line": 86,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"dir\") && argc == 2) {"
    },
    {
        "line": 79,
        "fullcodeline": "if (seconds < 1 || changes < 0) {"
    },
    {
        "line": 80,
        "fullcodeline": "err = \"Invalid save parameters\"; goto loaderr;"
    },
    {
        "line": 83,
        "fullcodeline": "} else if (argc == 2 && !strcasecmp(argv[1],\"\")) {"
    },
    {
        "line": 87,
        "fullcodeline": "if (chdir(argv[1]) == -1) {"
    },
    {
        "line": 84,
        "fullcodeline": "resetServerSaveParams();"
    },
    {
        "line": 88,
        "fullcodeline": "serverLog(LL_WARNING,\"Can't chdir to '%s': %s\","
    },
    {
        "line": 90,
        "fullcodeline": "exit(1);"
    },
    {
        "line": 92,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"loglevel\") && argc == 2) {"
    },
    {
        "line": 89,
        "fullcodeline": "argv[1], strerror(errno));"
    },
    {
        "line": 93,
        "fullcodeline": "server.verbosity = configEnumGetValue(loglevel_enum,argv[1]);"
    },
    {
        "line": 94,
        "fullcodeline": "if (server.verbosity == INT_MIN) {"
    },
    {
        "line": 95,
        "fullcodeline": "err = \"Invalid log level. \""
    },
    {
        "line": 99,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"logfile\") && argc == 2) {"
    },
    {
        "line": 102,
        "fullcodeline": "zfree(server.logfile);"
    },
    {
        "line": 103,
        "fullcodeline": "server.logfile = zstrdup(argv[1]);"
    },
    {
        "line": 104,
        "fullcodeline": "if (server.logfile[0] != '\\0') {"
    },
    {
        "line": 107,
        "fullcodeline": "logfp = fopen(server.logfile,\"a\");"
    },
    {
        "line": 113,
        "fullcodeline": "fclose(logfp);"
    },
    {
        "line": 115,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"syslog-enabled\") && argc == 2) {"
    },
    {
        "line": 108,
        "fullcodeline": "if (logfp == NULL) {"
    },
    {
        "line": 109,
        "fullcodeline": "err = sdscatprintf(sdsempty(),"
    },
    {
        "line": 116,
        "fullcodeline": "if ((server.syslog_enabled = yesnotoi(argv[1])) == -1) {"
    },
    {
        "line": 117,
        "fullcodeline": "err = \"argument must be 'yes' or 'no'\"; goto loaderr;"
    },
    {
        "line": 119,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"syslog-ident\") && argc == 2) {"
    },
    {
        "line": 110,
        "fullcodeline": "\"Can't open the log file: %s\", strerror(errno));"
    },
    {
        "line": 121,
        "fullcodeline": "server.syslog_ident = zstrdup(argv[1]);"
    },
    {
        "line": 120,
        "fullcodeline": "if (server.syslog_ident) zfree(server.syslog_ident);"
    },
    {
        "line": 122,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"syslog-facility\") && argc == 2) {"
    },
    {
        "line": 123,
        "fullcodeline": "server.syslog_facility ="
    },
    {
        "line": 124,
        "fullcodeline": "configEnumGetValue(syslog_facility_enum,argv[1]);"
    },
    {
        "line": 125,
        "fullcodeline": "if (server.syslog_facility == INT_MIN) {"
    },
    {
        "line": 126,
        "fullcodeline": "err = \"Invalid log facility. Must be one of USER or between LOCAL0-LOCAL7\";"
    },
    {
        "line": 129,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"databases\") && argc == 2) {"
    },
    {
        "line": 130,
        "fullcodeline": "server.dbnum = atoi(argv[1]);"
    },
    {
        "line": 131,
        "fullcodeline": "if (server.dbnum < 1) {"
    },
    {
        "line": 132,
        "fullcodeline": "err = \"Invalid number of databases\"; goto loaderr;"
    },
    {
        "line": 134,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"include\") && argc == 2) {"
    },
    {
        "line": 135,
        "fullcodeline": "loadServerConfig(argv[1],NULL);"
    },
    {
        "line": 136,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"maxclients\") && argc == 2) {"
    },
    {
        "line": 137,
        "fullcodeline": "server.maxclients = atoi(argv[1]);"
    },
    {
        "line": 138,
        "fullcodeline": "if (server.maxclients < 1) {"
    },
    {
        "line": 139,
        "fullcodeline": "err = \"Invalid max clients limit\"; goto loaderr;"
    },
    {
        "line": 141,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"maxmemory\") && argc == 2) {"
    },
    {
        "line": 142,
        "fullcodeline": "server.maxmemory = memtoll(argv[1],NULL);"
    },
    {
        "line": 143,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"maxmemory-policy\") && argc == 2) {"
    },
    {
        "line": 144,
        "fullcodeline": "server.maxmemory_policy ="
    },
    {
        "line": 145,
        "fullcodeline": "configEnumGetValue(maxmemory_policy_enum,argv[1]);"
    },
    {
        "line": 146,
        "fullcodeline": "if (server.maxmemory_policy == INT_MIN) {"
    },
    {
        "line": 147,
        "fullcodeline": "err = \"Invalid maxmemory policy\";"
    },
    {
        "line": 150,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"maxmemory-samples\") && argc == 2) {"
    },
    {
        "line": 151,
        "fullcodeline": "server.maxmemory_samples = atoi(argv[1]);"
    },
    {
        "line": 152,
        "fullcodeline": "if (server.maxmemory_samples <= 0) {"
    },
    {
        "line": 153,
        "fullcodeline": "err = \"maxmemory-samples must be 1 or greater\";"
    },
    {
        "line": 156,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"lfu-log-factor\") && argc == 2) {"
    },
    {
        "line": 157,
        "fullcodeline": "server.lfu_log_factor = atoi(argv[1]);"
    },
    {
        "line": 158,
        "fullcodeline": "if (server.maxmemory_samples < 0) {"
    },
    {
        "line": 159,
        "fullcodeline": "err = \"lfu-log-factor must be 0 or greater\";"
    },
    {
        "line": 162,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"lfu-decay-time\") && argc == 2) {"
    },
    {
        "line": 163,
        "fullcodeline": "server.lfu_decay_time = atoi(argv[1]);"
    },
    {
        "line": 164,
        "fullcodeline": "if (server.maxmemory_samples < 1) {"
    },
    {
        "line": 165,
        "fullcodeline": "err = \"lfu-decay-time must be 0 or greater\";"
    },
    {
        "line": 168,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"slaveof\") && argc == 3) {"
    },
    {
        "line": 169,
        "fullcodeline": "slaveof_linenum = linenum;"
    },
    {
        "line": 170,
        "fullcodeline": "server.masterhost = sdsnew(argv[1]);"
    },
    {
        "line": 171,
        "fullcodeline": "server.masterport = atoi(argv[2]);"
    },
    {
        "line": 172,
        "fullcodeline": "server.repl_state = REPL_STATE_CONNECT;"
    },
    {
        "line": 173,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"repl-ping-slave-period\") && argc == 2) {"
    },
    {
        "line": 174,
        "fullcodeline": "server.repl_ping_slave_period = atoi(argv[1]);"
    },
    {
        "line": 175,
        "fullcodeline": "if (server.repl_ping_slave_period <= 0) {"
    },
    {
        "line": 176,
        "fullcodeline": "err = \"repl-ping-slave-period must be 1 or greater\";"
    },
    {
        "line": 179,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"repl-timeout\") && argc == 2) {"
    },
    {
        "line": 180,
        "fullcodeline": "server.repl_timeout = atoi(argv[1]);"
    },
    {
        "line": 181,
        "fullcodeline": "if (server.repl_timeout <= 0) {"
    },
    {
        "line": 182,
        "fullcodeline": "err = \"repl-timeout must be 1 or greater\";"
    },
    {
        "line": 185,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"repl-disable-tcp-nodelay\") && argc==2) {"
    },
    {
        "line": 186,
        "fullcodeline": "if ((server.repl_disable_tcp_nodelay = yesnotoi(argv[1])) == -1) {"
    },
    {
        "line": 187,
        "fullcodeline": "err = \"argument must be 'yes' or 'no'\"; goto loaderr;"
    },
    {
        "line": 189,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"repl-diskless-sync\") && argc==2) {"
    },
    {
        "line": 190,
        "fullcodeline": "if ((server.repl_diskless_sync = yesnotoi(argv[1])) == -1) {"
    },
    {
        "line": 191,
        "fullcodeline": "err = \"argument must be 'yes' or 'no'\"; goto loaderr;"
    },
    {
        "line": 193,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"repl-diskless-sync-delay\") && argc==2) {"
    },
    {
        "line": 194,
        "fullcodeline": "server.repl_diskless_sync_delay = atoi(argv[1]);"
    },
    {
        "line": 195,
        "fullcodeline": "if (server.repl_diskless_sync_delay < 0) {"
    },
    {
        "line": 196,
        "fullcodeline": "err = \"repl-diskless-sync-delay can't be negative\";"
    },
    {
        "line": 199,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"repl-backlog-size\") && argc == 2) {"
    },
    {
        "line": 200,
        "fullcodeline": "long long size = memtoll(argv[1],NULL);"
    },
    {
        "line": 205,
        "fullcodeline": "resizeReplicationBacklog(size);"
    },
    {
        "line": 201,
        "fullcodeline": "if (size <= 0) {"
    },
    {
        "line": 202,
        "fullcodeline": "err = \"repl-backlog-size must be 1 or greater.\";"
    },
    {
        "line": 206,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"repl-backlog-ttl\") && argc == 2) {"
    },
    {
        "line": 207,
        "fullcodeline": "server.repl_backlog_time_limit = atoi(argv[1]);"
    },
    {
        "line": 208,
        "fullcodeline": "if (server.repl_backlog_time_limit < 0) {"
    },
    {
        "line": 209,
        "fullcodeline": "err = \"repl-backlog-ttl can't be negative \";"
    },
    {
        "line": 212,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"masterauth\") && argc == 2) {"
    },
    {
        "line": 213,
        "fullcodeline": "zfree(server.masterauth);"
    },
    {
        "line": 214,
        "fullcodeline": "server.masterauth = zstrdup(argv[1]);"
    },
    {
        "line": 215,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"slave-serve-stale-data\") && argc == 2) {"
    },
    {
        "line": 216,
        "fullcodeline": "if ((server.repl_serve_stale_data = yesnotoi(argv[1])) == -1) {"
    },
    {
        "line": 217,
        "fullcodeline": "err = \"argument must be 'yes' or 'no'\"; goto loaderr;"
    },
    {
        "line": 219,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"slave-read-only\") && argc == 2) {"
    },
    {
        "line": 220,
        "fullcodeline": "if ((server.repl_slave_ro = yesnotoi(argv[1])) == -1) {"
    },
    {
        "line": 221,
        "fullcodeline": "err = \"argument must be 'yes' or 'no'\"; goto loaderr;"
    },
    {
        "line": 223,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"rdbcompression\") && argc == 2) {"
    },
    {
        "line": 224,
        "fullcodeline": "if ((server.rdb_compression = yesnotoi(argv[1])) == -1) {"
    },
    {
        "line": 225,
        "fullcodeline": "err = \"argument must be 'yes' or 'no'\"; goto loaderr;"
    },
    {
        "line": 227,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"rdbchecksum\") && argc == 2) {"
    },
    {
        "line": 228,
        "fullcodeline": "if ((server.rdb_checksum = yesnotoi(argv[1])) == -1) {"
    },
    {
        "line": 229,
        "fullcodeline": "err = \"argument must be 'yes' or 'no'\"; goto loaderr;"
    },
    {
        "line": 231,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"activerehashing\") && argc == 2) {"
    },
    {
        "line": 232,
        "fullcodeline": "if ((server.activerehashing = yesnotoi(argv[1])) == -1) {"
    },
    {
        "line": 233,
        "fullcodeline": "err = \"argument must be 'yes' or 'no'\"; goto loaderr;"
    },
    {
        "line": 235,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"lazyfree-lazy-eviction\") && argc == 2) {"
    },
    {
        "line": 236,
        "fullcodeline": "if ((server.lazyfree_lazy_eviction = yesnotoi(argv[1])) == -1) {"
    },
    {
        "line": 237,
        "fullcodeline": "err = \"argument must be 'yes' or 'no'\"; goto loaderr;"
    },
    {
        "line": 239,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"lazyfree-lazy-expire\") && argc == 2) {"
    },
    {
        "line": 240,
        "fullcodeline": "if ((server.lazyfree_lazy_expire = yesnotoi(argv[1])) == -1) {"
    },
    {
        "line": 241,
        "fullcodeline": "err = \"argument must be 'yes' or 'no'\"; goto loaderr;"
    },
    {
        "line": 243,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"lazyfree-lazy-server-del\") && argc == 2){"
    },
    {
        "line": 244,
        "fullcodeline": "if ((server.lazyfree_lazy_server_del = yesnotoi(argv[1])) == -1) {"
    },
    {
        "line": 245,
        "fullcodeline": "err = \"argument must be 'yes' or 'no'\"; goto loaderr;"
    },
    {
        "line": 247,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"slave-lazy-flush\") && argc == 2) {"
    },
    {
        "line": 248,
        "fullcodeline": "if ((server.repl_slave_lazy_flush = yesnotoi(argv[1])) == -1) {"
    },
    {
        "line": 249,
        "fullcodeline": "err = \"argument must be 'yes' or 'no'\"; goto loaderr;"
    },
    {
        "line": 251,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"daemonize\") && argc == 2) {"
    },
    {
        "line": 252,
        "fullcodeline": "if ((server.daemonize = yesnotoi(argv[1])) == -1) {"
    },
    {
        "line": 253,
        "fullcodeline": "err = \"argument must be 'yes' or 'no'\"; goto loaderr;"
    },
    {
        "line": 255,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"hz\") && argc == 2) {"
    },
    {
        "line": 256,
        "fullcodeline": "server.hz = atoi(argv[1]);"
    },
    {
        "line": 257,
        "fullcodeline": "if (server.hz < CONFIG_MIN_HZ) server.hz = CONFIG_MIN_HZ;"
    },
    {
        "line": 258,
        "fullcodeline": "if (server.hz > CONFIG_MAX_HZ) server.hz = CONFIG_MAX_HZ;"
    },
    {
        "line": 259,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"appendonly\") && argc == 2) {"
    },
    {
        "line": 265,
        "fullcodeline": "server.aof_state = yes ? AOF_ON : AOF_OFF;"
    },
    {
        "line": 262,
        "fullcodeline": "if ((yes = yesnotoi(argv[1])) == -1) {"
    },
    {
        "line": 263,
        "fullcodeline": "err = \"argument must be 'yes' or 'no'\"; goto loaderr;"
    },
    {
        "line": 266,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"appendfilename\") && argc == 2) {"
    },
    {
        "line": 271,
        "fullcodeline": "zfree(server.aof_filename);"
    },
    {
        "line": 272,
        "fullcodeline": "server.aof_filename = zstrdup(argv[1]);"
    },
    {
        "line": 267,
        "fullcodeline": "if (!pathIsBaseName(argv[1])) {"
    },
    {
        "line": 268,
        "fullcodeline": "err = \"appendfilename can't be a path, just a filename\";"
    },
    {
        "line": 273,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"no-appendfsync-on-rewrite\")"
    },
    {
        "line": 274,
        "fullcodeline": "&& argc == 2) {"
    },
    {
        "line": 275,
        "fullcodeline": "if ((server.aof_no_fsync_on_rewrite= yesnotoi(argv[1])) == -1) {"
    },
    {
        "line": 276,
        "fullcodeline": "err = \"argument must be 'yes' or 'no'\"; goto loaderr;"
    },
    {
        "line": 278,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"appendfsync\") && argc == 2) {"
    },
    {
        "line": 279,
        "fullcodeline": "server.aof_fsync = configEnumGetValue(aof_fsync_enum,argv[1]);"
    },
    {
        "line": 280,
        "fullcodeline": "if (server.aof_fsync == INT_MIN) {"
    },
    {
        "line": 281,
        "fullcodeline": "err = \"argument must be 'no', 'always' or 'everysec'\";"
    },
    {
        "line": 284,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"auto-aof-rewrite-percentage\") &&"
    },
    {
        "line": 285,
        "fullcodeline": "argc == 2)"
    },
    {
        "line": 287,
        "fullcodeline": "server.aof_rewrite_perc = atoi(argv[1]);"
    },
    {
        "line": 288,
        "fullcodeline": "if (server.aof_rewrite_perc < 0) {"
    },
    {
        "line": 289,
        "fullcodeline": "err = \"Invalid negative percentage for AOF auto rewrite\";"
    },
    {
        "line": 292,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"auto-aof-rewrite-min-size\") &&"
    },
    {
        "line": 293,
        "fullcodeline": "argc == 2)"
    },
    {
        "line": 295,
        "fullcodeline": "server.aof_rewrite_min_size = memtoll(argv[1],NULL);"
    },
    {
        "line": 296,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"aof-rewrite-incremental-fsync\") &&"
    },
    {
        "line": 297,
        "fullcodeline": "argc == 2)"
    },
    {
        "line": 299,
        "fullcodeline": "if ((server.aof_rewrite_incremental_fsync ="
    },
    {
        "line": 300,
        "fullcodeline": "yesnotoi(argv[1])) == -1) {"
    },
    {
        "line": 301,
        "fullcodeline": "err = \"argument must be 'yes' or 'no'\"; goto loaderr;"
    },
    {
        "line": 303,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"aof-load-truncated\") && argc == 2) {"
    },
    {
        "line": 304,
        "fullcodeline": "if ((server.aof_load_truncated = yesnotoi(argv[1])) == -1) {"
    },
    {
        "line": 305,
        "fullcodeline": "err = \"argument must be 'yes' or 'no'\"; goto loaderr;"
    },
    {
        "line": 307,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"aof-use-rdb-preamble\") && argc == 2) {"
    },
    {
        "line": 308,
        "fullcodeline": "if ((server.aof_use_rdb_preamble = yesnotoi(argv[1])) == -1) {"
    },
    {
        "line": 309,
        "fullcodeline": "err = \"argument must be 'yes' or 'no'\"; goto loaderr;"
    },
    {
        "line": 311,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"requirepass\") && argc == 2) {"
    },
    {
        "line": 316,
        "fullcodeline": "server.requirepass = zstrdup(argv[1]);"
    },
    {
        "line": 312,
        "fullcodeline": "if (strlen(argv[1]) > CONFIG_AUTHPASS_MAX_LEN) {"
    },
    {
        "line": 313,
        "fullcodeline": "err = \"Password is longer than CONFIG_AUTHPASS_MAX_LEN\";"
    },
    {
        "line": 317,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"pidfile\") && argc == 2) {"
    },
    {
        "line": 318,
        "fullcodeline": "zfree(server.pidfile);"
    },
    {
        "line": 319,
        "fullcodeline": "server.pidfile = zstrdup(argv[1]);"
    },
    {
        "line": 320,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"dbfilename\") && argc == 2) {"
    },
    {
        "line": 325,
        "fullcodeline": "zfree(server.rdb_filename);"
    },
    {
        "line": 326,
        "fullcodeline": "server.rdb_filename = zstrdup(argv[1]);"
    },
    {
        "line": 321,
        "fullcodeline": "if (!pathIsBaseName(argv[1])) {"
    },
    {
        "line": 322,
        "fullcodeline": "err = \"dbfilename can't be a path, just a filename\";"
    },
    {
        "line": 327,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"hash-max-ziplist-entries\") && argc == 2) {"
    },
    {
        "line": 328,
        "fullcodeline": "server.hash_max_ziplist_entries = memtoll(argv[1], NULL);"
    },
    {
        "line": 329,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"hash-max-ziplist-value\") && argc == 2) {"
    },
    {
        "line": 330,
        "fullcodeline": "server.hash_max_ziplist_value = memtoll(argv[1], NULL);"
    },
    {
        "line": 331,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"list-max-ziplist-entries\") && argc == 2){"
    },
    {
        "line": 333,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"list-max-ziplist-value\") && argc == 2) {"
    },
    {
        "line": 335,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"list-max-ziplist-size\") && argc == 2) {"
    },
    {
        "line": 336,
        "fullcodeline": "server.list_max_ziplist_size = atoi(argv[1]);"
    },
    {
        "line": 337,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"list-compress-depth\") && argc == 2) {"
    },
    {
        "line": 338,
        "fullcodeline": "server.list_compress_depth = atoi(argv[1]);"
    },
    {
        "line": 339,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"set-max-intset-entries\") && argc == 2) {"
    },
    {
        "line": 340,
        "fullcodeline": "server.set_max_intset_entries = memtoll(argv[1], NULL);"
    },
    {
        "line": 341,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"zset-max-ziplist-entries\") && argc == 2) {"
    },
    {
        "line": 342,
        "fullcodeline": "server.zset_max_ziplist_entries = memtoll(argv[1], NULL);"
    },
    {
        "line": 343,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"zset-max-ziplist-value\") && argc == 2) {"
    },
    {
        "line": 344,
        "fullcodeline": "server.zset_max_ziplist_value = memtoll(argv[1], NULL);"
    },
    {
        "line": 345,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"hll-sparse-max-bytes\") && argc == 2) {"
    },
    {
        "line": 346,
        "fullcodeline": "server.hll_sparse_max_bytes = memtoll(argv[1], NULL);"
    },
    {
        "line": 347,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"rename-command\") && argc == 3) {"
    },
    {
        "line": 348,
        "fullcodeline": "struct redisCommand *cmd = lookupCommand(argv[1]);"
    },
    {
        "line": 358,
        "fullcodeline": "retval = dictDelete(server.commands, argv[1]);"
    },
    {
        "line": 359,
        "fullcodeline": "serverAssert(retval == DICT_OK);"
    },
    {
        "line": 351,
        "fullcodeline": "if (!cmd) {"
    },
    {
        "line": 362,
        "fullcodeline": "if (sdslen(argv[2]) != 0) {"
    },
    {
        "line": 352,
        "fullcodeline": "err = \"No such command in rename-command\";"
    },
    {
        "line": 363,
        "fullcodeline": "sds copy = sdsdup(argv[2]);"
    },
    {
        "line": 365,
        "fullcodeline": "retval = dictAdd(server.commands, copy, cmd);"
    },
    {
        "line": 371,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"cluster-enabled\") && argc == 2) {"
    },
    {
        "line": 366,
        "fullcodeline": "if (retval != DICT_OK) {"
    },
    {
        "line": 367,
        "fullcodeline": "sdsfree(copy);"
    },
    {
        "line": 368,
        "fullcodeline": "err = \"Target command name already exists\"; goto loaderr;"
    },
    {
        "line": 372,
        "fullcodeline": "if ((server.cluster_enabled = yesnotoi(argv[1])) == -1) {"
    },
    {
        "line": 373,
        "fullcodeline": "err = \"argument must be 'yes' or 'no'\"; goto loaderr;"
    },
    {
        "line": 375,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"cluster-config-file\") && argc == 2) {"
    },
    {
        "line": 376,
        "fullcodeline": "zfree(server.cluster_configfile);"
    },
    {
        "line": 377,
        "fullcodeline": "server.cluster_configfile = zstrdup(argv[1]);"
    },
    {
        "line": 378,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"cluster-announce-ip\") && argc == 2) {"
    },
    {
        "line": 379,
        "fullcodeline": "zfree(server.cluster_announce_ip);"
    },
    {
        "line": 380,
        "fullcodeline": "server.cluster_announce_ip = zstrdup(argv[1]);"
    },
    {
        "line": 381,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"cluster-announce-port\") && argc == 2) {"
    },
    {
        "line": 382,
        "fullcodeline": "server.cluster_announce_port = atoi(argv[1]);"
    },
    {
        "line": 383,
        "fullcodeline": "if (server.cluster_announce_port < 0 ||"
    },
    {
        "line": 384,
        "fullcodeline": "server.cluster_announce_port > 65535)"
    },
    {
        "line": 386,
        "fullcodeline": "err = \"Invalid port\"; goto loaderr;"
    },
    {
        "line": 388,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"cluster-announce-bus-port\") &&"
    },
    {
        "line": 389,
        "fullcodeline": "argc == 2)"
    },
    {
        "line": 391,
        "fullcodeline": "server.cluster_announce_bus_port = atoi(argv[1]);"
    },
    {
        "line": 392,
        "fullcodeline": "if (server.cluster_announce_bus_port < 0 ||"
    },
    {
        "line": 393,
        "fullcodeline": "server.cluster_announce_bus_port > 65535)"
    },
    {
        "line": 395,
        "fullcodeline": "err = \"Invalid port\"; goto loaderr;"
    },
    {
        "line": 397,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"cluster-require-full-coverage\") &&"
    },
    {
        "line": 398,
        "fullcodeline": "argc == 2)"
    },
    {
        "line": 400,
        "fullcodeline": "if ((server.cluster_require_full_coverage = yesnotoi(argv[1])) == -1)"
    },
    {
        "line": 402,
        "fullcodeline": "err = \"argument must be 'yes' or 'no'\"; goto loaderr;"
    },
    {
        "line": 404,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"cluster-node-timeout\") && argc == 2) {"
    },
    {
        "line": 405,
        "fullcodeline": "server.cluster_node_timeout = strtoll(argv[1],NULL,10);"
    },
    {
        "line": 406,
        "fullcodeline": "if (server.cluster_node_timeout <= 0) {"
    },
    {
        "line": 407,
        "fullcodeline": "err = \"cluster node timeout must be 1 or greater\"; goto loaderr;"
    },
    {
        "line": 409,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"cluster-migration-barrier\")"
    },
    {
        "line": 410,
        "fullcodeline": "&& argc == 2)"
    },
    {
        "line": 412,
        "fullcodeline": "server.cluster_migration_barrier = atoi(argv[1]);"
    },
    {
        "line": 413,
        "fullcodeline": "if (server.cluster_migration_barrier < 0) {"
    },
    {
        "line": 414,
        "fullcodeline": "err = \"cluster migration barrier must zero or positive\";"
    },
    {
        "line": 417,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"cluster-slave-validity-factor\")"
    },
    {
        "line": 418,
        "fullcodeline": "&& argc == 2)"
    },
    {
        "line": 420,
        "fullcodeline": "server.cluster_slave_validity_factor = atoi(argv[1]);"
    },
    {
        "line": 421,
        "fullcodeline": "if (server.cluster_slave_validity_factor < 0) {"
    },
    {
        "line": 422,
        "fullcodeline": "err = \"cluster slave validity factor must be zero or positive\";"
    },
    {
        "line": 425,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"lua-time-limit\") && argc == 2) {"
    },
    {
        "line": 426,
        "fullcodeline": "server.lua_time_limit = strtoll(argv[1],NULL,10);"
    },
    {
        "line": 427,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"slowlog-log-slower-than\") &&"
    },
    {
        "line": 428,
        "fullcodeline": "argc == 2)"
    },
    {
        "line": 430,
        "fullcodeline": "server.slowlog_log_slower_than = strtoll(argv[1],NULL,10);"
    },
    {
        "line": 431,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"latency-monitor-threshold\") &&"
    },
    {
        "line": 432,
        "fullcodeline": "argc == 2)"
    },
    {
        "line": 434,
        "fullcodeline": "server.latency_monitor_threshold = strtoll(argv[1],NULL,10);"
    },
    {
        "line": 435,
        "fullcodeline": "if (server.latency_monitor_threshold < 0) {"
    },
    {
        "line": 436,
        "fullcodeline": "err = \"The latency threshold can't be negative\";"
    },
    {
        "line": 439,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"slowlog-max-len\") && argc == 2) {"
    },
    {
        "line": 440,
        "fullcodeline": "server.slowlog_max_len = strtoll(argv[1],NULL,10);"
    },
    {
        "line": 441,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"client-output-buffer-limit\") &&"
    },
    {
        "line": 442,
        "fullcodeline": "argc == 5)"
    },
    {
        "line": 444,
        "fullcodeline": "int class = getClientTypeByName(argv[1]);"
    },
    {
        "line": 452,
        "fullcodeline": "hard = memtoll(argv[2],NULL);"
    },
    {
        "line": 453,
        "fullcodeline": "soft = memtoll(argv[3],NULL);"
    },
    {
        "line": 454,
        "fullcodeline": "soft_seconds = atoi(argv[4]);"
    },
    {
        "line": 459,
        "fullcodeline": "server.client_obuf_limits[class].hard_limit_bytes = hard;"
    },
    {
        "line": 460,
        "fullcodeline": "server.client_obuf_limits[class].soft_limit_bytes = soft;"
    },
    {
        "line": 461,
        "fullcodeline": "server.client_obuf_limits[class].soft_limit_seconds = soft_seconds;"
    },
    {
        "line": 448,
        "fullcodeline": "if (class == -1) {"
    },
    {
        "line": 455,
        "fullcodeline": "if (soft_seconds < 0) {"
    },
    {
        "line": 449,
        "fullcodeline": "err = \"Unrecognized client limit class\";"
    },
    {
        "line": 456,
        "fullcodeline": "err = \"Negative number of seconds in soft limit is invalid\";"
    },
    {
        "line": 462,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"stop-writes-on-bgsave-error\") &&"
    },
    {
        "line": 463,
        "fullcodeline": "argc == 2) {"
    },
    {
        "line": 464,
        "fullcodeline": "if ((server.stop_writes_on_bgsave_err = yesnotoi(argv[1])) == -1) {"
    },
    {
        "line": 465,
        "fullcodeline": "err = \"argument must be 'yes' or 'no'\"; goto loaderr;"
    },
    {
        "line": 467,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"slave-priority\") && argc == 2) {"
    },
    {
        "line": 468,
        "fullcodeline": "server.slave_priority = atoi(argv[1]);"
    },
    {
        "line": 469,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"slave-announce-ip\") && argc == 2) {"
    },
    {
        "line": 470,
        "fullcodeline": "zfree(server.slave_announce_ip);"
    },
    {
        "line": 471,
        "fullcodeline": "server.slave_announce_ip = zstrdup(argv[1]);"
    },
    {
        "line": 472,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"slave-announce-port\") && argc == 2) {"
    },
    {
        "line": 473,
        "fullcodeline": "server.slave_announce_port = atoi(argv[1]);"
    },
    {
        "line": 474,
        "fullcodeline": "if (server.slave_announce_port < 0 ||"
    },
    {
        "line": 475,
        "fullcodeline": "server.slave_announce_port > 65535)"
    },
    {
        "line": 477,
        "fullcodeline": "err = \"Invalid port\"; goto loaderr;"
    },
    {
        "line": 479,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"min-slaves-to-write\") && argc == 2) {"
    },
    {
        "line": 480,
        "fullcodeline": "server.repl_min_slaves_to_write = atoi(argv[1]);"
    },
    {
        "line": 481,
        "fullcodeline": "if (server.repl_min_slaves_to_write < 0) {"
    },
    {
        "line": 482,
        "fullcodeline": "err = \"Invalid value for min-slaves-to-write.\"; goto loaderr;"
    },
    {
        "line": 484,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"min-slaves-max-lag\") && argc == 2) {"
    },
    {
        "line": 485,
        "fullcodeline": "server.repl_min_slaves_max_lag = atoi(argv[1]);"
    },
    {
        "line": 486,
        "fullcodeline": "if (server.repl_min_slaves_max_lag < 0) {"
    },
    {
        "line": 487,
        "fullcodeline": "err = \"Invalid value for min-slaves-max-lag.\"; goto loaderr;"
    },
    {
        "line": 489,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"notify-keyspace-events\") && argc == 2) {"
    },
    {
        "line": 490,
        "fullcodeline": "int flags = keyspaceEventsStringToFlags(argv[1]);"
    },
    {
        "line": 496,
        "fullcodeline": "server.notify_keyspace_events = flags;"
    },
    {
        "line": 492,
        "fullcodeline": "if (flags == -1) {"
    },
    {
        "line": 493,
        "fullcodeline": "err = \"Invalid event class character. Use 'g$lshzxeA'.\";"
    },
    {
        "line": 497,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"supervised\") && argc == 2) {"
    },
    {
        "line": 498,
        "fullcodeline": "server.supervised_mode ="
    },
    {
        "line": 499,
        "fullcodeline": "configEnumGetValue(supervised_mode_enum,argv[1]);"
    },
    {
        "line": 501,
        "fullcodeline": "if (server.supervised_mode == INT_MIN) {"
    },
    {
        "line": 502,
        "fullcodeline": "err = \"Invalid option for 'supervised'. \""
    },
    {
        "line": 506,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"loadmodule\") && argc >= 2) {"
    },
    {
        "line": 507,
        "fullcodeline": "queueLoadModule(argv[1],&argv[2],argc-2);"
    },
    {
        "line": 508,
        "fullcodeline": "} else if (!strcasecmp(argv[0],\"sentinel\")) {"
    },
    {
        "line": 511,
        "fullcodeline": "if (argc != 1) {"
    },
    {
        "line": 520,
        "fullcodeline": "err = \"Bad directive or wrong number of arguments\"; goto loaderr;"
    },
    {
        "line": 516,
        "fullcodeline": "err = sentinelHandleConfiguration(argv+1,argc-1);"
    },
    {
        "line": 513,
        "fullcodeline": "err = \"sentinel directive while not in sentinel mode\";"
    }
]