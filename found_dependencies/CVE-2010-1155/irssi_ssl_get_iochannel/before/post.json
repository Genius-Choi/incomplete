[
    {
        "line": 7,
        "fullcodeline": "SSL_CTX *ctx = NULL;"
    },
    {
        "line": 9,
        "fullcodeline": "g_return_val_if_fail(handle != NULL, NULL);"
    },
    {
        "line": 77,
        "fullcodeline": "SSL_set_mode(ssl, SSL_MODE_ENABLE_PARTIAL_WRITE |"
    },
    {
        "line": 80,
        "fullcodeline": "chan = g_new0(GIOSSLChannel, 1);"
    },
    {
        "line": 81,
        "fullcodeline": "chan->fd = fd;"
    },
    {
        "line": 82,
        "fullcodeline": "chan->giochan = handle;"
    },
    {
        "line": 83,
        "fullcodeline": "chan->ssl = ssl;"
    },
    {
        "line": 84,
        "fullcodeline": "chan->ctx = ctx;"
    },
    {
        "line": 85,
        "fullcodeline": "chan->verify = verify;"
    },
    {
        "line": 87,
        "fullcodeline": "gchan = (GIOChannel *)chan;"
    },
    {
        "line": 88,
        "fullcodeline": "gchan->funcs = &irssi_ssl_channel_funcs;"
    },
    {
        "line": 89,
        "fullcodeline": "g_io_channel_init(gchan);"
    },
    {
        "line": 90,
        "fullcodeline": "gchan->is_readable = gchan->is_writeable = TRUE;"
    },
    {
        "line": 91,
        "fullcodeline": "gchan->use_buffer = FALSE;"
    },
    {
        "line": 11,
        "fullcodeline": "if(!ssl_ctx && !irssi_ssl_init())"
    },
    {
        "line": 14,
        "fullcodeline": "if(!(fd = g_io_channel_unix_get_fd(handle)))"
    },
    {
        "line": 17,
        "fullcodeline": "if (mycert && *mycert) {"
    },
    {
        "line": 36,
        "fullcodeline": "if ((cafile && *cafile) || (capath && *capath)) {"
    },
    {
        "line": 59,
        "fullcodeline": "if (ctx == NULL)"
    },
    {
        "line": 62,
        "fullcodeline": "if(!(ssl = SSL_new(ctx)))"
    },
    {
        "line": 68,
        "fullcodeline": "if(!SSL_set_fd(ssl, fd))"
    },
    {
        "line": 18,
        "fullcodeline": "char *scert = NULL, *spkey = NULL;"
    },
    {
        "line": 23,
        "fullcodeline": "scert = convert_home(mycert);"
    },
    {
        "line": 32,
        "fullcodeline": "g_free(scert);"
    },
    {
        "line": 33,
        "fullcodeline": "g_free(spkey);"
    },
    {
        "line": 37,
        "fullcodeline": "char *scafile = NULL;"
    },
    {
        "line": 38,
        "fullcodeline": "char *scapath = NULL;"
    },
    {
        "line": 54,
        "fullcodeline": "g_free(scafile);"
    },
    {
        "line": 55,
        "fullcodeline": "g_free(scapath);"
    },
    {
        "line": 56,
        "fullcodeline": "verify = TRUE;"
    },
    {
        "line": 60,
        "fullcodeline": "ctx = ssl_ctx;"
    },
    {
        "line": 64,
        "fullcodeline": "g_warning(\"Failed to allocate SSL structure\");"
    },
    {
        "line": 70,
        "fullcodeline": "g_warning(\"Failed to associate socket to SSL stream\");"
    },
    {
        "line": 71,
        "fullcodeline": "SSL_free(ssl);"
    },
    {
        "line": 19,
        "fullcodeline": "if ((ctx = SSL_CTX_new(SSLv23_client_method())) == NULL) {"
    },
    {
        "line": 24,
        "fullcodeline": "if (mypkey && *mypkey)"
    },
    {
        "line": 26,
        "fullcodeline": "if (! SSL_CTX_use_certificate_file(ctx, scert, SSL_FILETYPE_PEM))"
    },
    {
        "line": 39,
        "fullcodeline": "if (! ctx && (ctx = SSL_CTX_new(SSLv23_client_method())) == NULL) {"
    },
    {
        "line": 43,
        "fullcodeline": "if (cafile && *cafile)"
    },
    {
        "line": 45,
        "fullcodeline": "if (capath && *capath)"
    },
    {
        "line": 47,
        "fullcodeline": "if (! SSL_CTX_load_verify_locations(ctx, scafile, scapath)) {"
    },
    {
        "line": 72,
        "fullcodeline": "if (ctx != ssl_ctx)"
    },
    {
        "line": 20,
        "fullcodeline": "g_error(\"Could not allocate memory for SSL context\");"
    },
    {
        "line": 25,
        "fullcodeline": "spkey = convert_home(mypkey);"
    },
    {
        "line": 27,
        "fullcodeline": "g_warning(\"Loading of client certificate '%s' failed\", mycert);"
    },
    {
        "line": 40,
        "fullcodeline": "g_error(\"Could not allocate memory for SSL context\");"
    },
    {
        "line": 44,
        "fullcodeline": "scafile = convert_home(cafile);"
    },
    {
        "line": 46,
        "fullcodeline": "scapath = convert_home(capath);"
    },
    {
        "line": 48,
        "fullcodeline": "g_warning(\"Could not load CA list for verifying SSL server certificate\");"
    },
    {
        "line": 49,
        "fullcodeline": "g_free(scafile);"
    },
    {
        "line": 50,
        "fullcodeline": "g_free(scapath);"
    },
    {
        "line": 51,
        "fullcodeline": "SSL_CTX_free(ctx);"
    },
    {
        "line": 73,
        "fullcodeline": "SSL_CTX_free(ctx);"
    },
    {
        "line": 28,
        "fullcodeline": "else if (! SSL_CTX_use_PrivateKey_file(ctx, spkey ? spkey : scert, SSL_FILETYPE_PEM))"
    },
    {
        "line": 29,
        "fullcodeline": "g_warning(\"Loading of private key '%s' failed\", mypkey ? mypkey : mycert);"
    },
    {
        "line": 30,
        "fullcodeline": "else if (! SSL_CTX_check_private_key(ctx))"
    },
    {
        "line": 31,
        "fullcodeline": "g_warning(\"Private key does not match the certificate\");"
    }
]