[
    {
        "line": 6,
        "fullcodeline": "unsigned char buffer[sizeof(DNSHeader)];"
    },
    {
        "line": 8,
        "fullcodeline": "memset(&from, 0, sizeof(from));"
    },
    {
        "line": 9,
        "fullcodeline": "socklen_t x = sizeof(from);"
    },
    {
        "line": 11,
        "fullcodeline": "int length = ServerInstance->SE->RecvFrom(this, (char*)buffer, sizeof(DNSHeader), 0, &from.sa, &x);"
    },
    {
        "line": 38,
        "fullcodeline": "DNS::FillHeader(&header,buffer,length - 12);"
    },
    {
        "line": 44,
        "fullcodeline": "unsigned long this_id = header.id[1] + (header.id[0] << 8);"
    },
    {
        "line": 64,
        "fullcodeline": "DNSInfo data = req->ResultIsReady(header, length);"
    },
    {
        "line": 14,
        "fullcodeline": "if (length < 12)"
    },
    {
        "line": 30,
        "fullcodeline": "if (from != myserver)"
    },
    {
        "line": 47,
        "fullcodeline": "if (!requests[this_id])"
    },
    {
        "line": 68,
        "fullcodeline": "if (data.first == NULL)"
    },
    {
        "line": 16,
        "fullcodeline": "ServerInstance->Logs->Log(\"RESOLVER\",DEBUG,\"GetResult didn't get a full packet (len=%d)\", length);"
    },
    {
        "line": 76,
        "fullcodeline": "std::string ro = req->orig;"
    },
    {
        "line": 18,
        "fullcodeline": "return DNSResult(-1,\"\",0,\"\");"
    },
    {
        "line": 33,
        "fullcodeline": "from.str().c_str(), myserver.str().c_str());"
    },
    {
        "line": 34,
        "fullcodeline": "return DNSResult(-1,\"\",0,\"\");"
    },
    {
        "line": 51,
        "fullcodeline": "return DNSResult(-1,\"\",0,\"\");"
    },
    {
        "line": 56,
        "fullcodeline": "req = requests[this_id];"
    },
    {
        "line": 78,
        "fullcodeline": "return DNSResult(this_id | ERROR_MASK, data.second, 0, ro);"
    },
    {
        "line": 82,
        "fullcodeline": "unsigned long ttl = req->ttl;"
    },
    {
        "line": 83,
        "fullcodeline": "char formatted[128];"
    },
    {
        "line": 133,
        "fullcodeline": "std::string ro = req->orig;"
    },
    {
        "line": 135,
        "fullcodeline": "return DNSResult(this_id,resultstr,ttl,ro);"
    },
    {
        "line": 89,
        "fullcodeline": "snprintf(formatted,16,\"%u.%u.%u.%u\",data.first[0],data.first[1],data.first[2],data.first[3]);"
    },
    {
        "line": 90,
        "fullcodeline": "resultstr = formatted;"
    },
    {
        "line": 125,
        "fullcodeline": "resultstr = std::string((const char*)data.first);"
    },
    {
        "line": 95,
        "fullcodeline": "inet_ntop(AF_INET6, data.first, formatted, sizeof(formatted));"
    },
    {
        "line": 96,
        "fullcodeline": "char* c = strstr(formatted,\":0:\");"
    },
    {
        "line": 108,
        "fullcodeline": "resultstr = formatted;"
    },
    {
        "line": 97,
        "fullcodeline": "if (c != NULL)"
    },
    {
        "line": 100,
        "fullcodeline": "c += 2;"
    },
    {
        "line": 116,
        "fullcodeline": "resultstr.insert(0, \"0\");"
    },
    {
        "line": 102,
        "fullcodeline": "memmove(c,c+2,strlen(c+2) + 1);"
    },
    {
        "line": 99,
        "fullcodeline": "memmove(c+1,c+2,strlen(c+2) + 1);"
    },
    {
        "line": 101,
        "fullcodeline": "while (memcmp(c,\"0:\",2) == 0)"
    },
    {
        "line": 103,
        "fullcodeline": "if (memcmp(c,\"0\",2) == 0)"
    },
    {
        "line": 105,
        "fullcodeline": "if (memcmp(formatted,\"0::\",3) == 0)"
    },
    {
        "line": 106,
        "fullcodeline": "memmove(formatted,formatted + 1, strlen(formatted + 1) + 1);"
    }
]