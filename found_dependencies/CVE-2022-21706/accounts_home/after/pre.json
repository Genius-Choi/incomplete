[
    {
        "line": 13,
        "fullcodeline": "from_multiuse_invite = False"
    },
    {
        "line": 14,
        "fullcodeline": "streams_to_subscribe = None"
    },
    {
        "line": 15,
        "fullcodeline": "invited_as = None"
    },
    {
        "line": 61,
        "fullcodeline": "context = login_context(request)"
    },
    {
        "line": 62,
        "fullcodeline": "context.update("
    },
    {
        "line": 27,
        "fullcodeline": "if request.method == \"POST\":"
    },
    {
        "line": 68,
        "fullcodeline": "return render(request, \"zerver/accounts_home.html\", context=context)"
    },
    {
        "line": 7,
        "fullcodeline": "realm = get_realm(get_subdomain(request))"
    },
    {
        "line": 23,
        "fullcodeline": "streams_to_subscribe = multiuse_object.streams.all()"
    },
    {
        "line": 24,
        "fullcodeline": "from_multiuse_invite = True"
    },
    {
        "line": 25,
        "fullcodeline": "invited_as = multiuse_object.invited_as"
    },
    {
        "line": 28,
        "fullcodeline": "form = HomepageForm(request.POST, realm=realm, from_multiuse_invite=from_multiuse_invite)"
    },
    {
        "line": 60,
        "fullcodeline": "form = HomepageForm(realm=realm)"
    },
    {
        "line": 11,
        "fullcodeline": "return redirect_to_deactivation_notice()"
    },
    {
        "line": 21,
        "fullcodeline": "assert realm == multiuse_object.realm"
    },
    {
        "line": 29,
        "fullcodeline": "if form.is_valid():"
    },
    {
        "line": 41,
        "fullcodeline": "email = form.cleaned_data[\"email\"]"
    },
    {
        "line": 48,
        "fullcodeline": "activation_url = prepare_activation_url("
    },
    {
        "line": 9,
        "fullcodeline": "return HttpResponseRedirect(reverse(find_account))"
    },
    {
        "line": 57,
        "fullcodeline": "return HttpResponseRedirect(reverse(\"signup_send_confirm\", kwargs={\"email\": email}))"
    },
    {
        "line": 31,
        "fullcodeline": "rate_limit_request_by_ip(request, domain=\"sends_email_by_ip\")"
    },
    {
        "line": 44,
        "fullcodeline": "validate_email_not_already_in_realm(realm, email)"
    },
    {
        "line": 52,
        "fullcodeline": "send_confirm_registration_email(email, activation_url, request=request, realm=realm)"
    },
    {
        "line": 33,
        "fullcodeline": "assert e.secs_to_freedom is not None"
    },
    {
        "line": 34,
        "fullcodeline": "return render("
    },
    {
        "line": 46,
        "fullcodeline": "return redirect_to_email_login_url(email)"
    },
    {
        "line": 55,
        "fullcodeline": "return HttpResponseRedirect(\"/config-error/smtp\")"
    },
    {
        "line": 37,
        "fullcodeline": "context={\"retry_after\": int(e.secs_to_freedom)},"
    }
]