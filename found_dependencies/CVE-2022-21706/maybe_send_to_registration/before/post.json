[
    {
        "line": 36,
        "fullcodeline": "assert not (mobile_flow_otp and desktop_flow_otp)"
    },
    {
        "line": 46,
        "fullcodeline": "multiuse_obj: Optional[MultiuseInvite] = None"
    },
    {
        "line": 47,
        "fullcodeline": "realm: Optional[Realm] = None"
    },
    {
        "line": 48,
        "fullcodeline": "from_multiuse_invite = False"
    },
    {
        "line": 66,
        "fullcodeline": "form = HomepageForm({\"email\": email}, realm=realm, from_multiuse_invite=from_multiuse_invite)"
    },
    {
        "line": 113,
        "fullcodeline": "url = reverse(\"register\")"
    },
    {
        "line": 114,
        "fullcodeline": "context = login_context(request)"
    },
    {
        "line": 115,
        "fullcodeline": "extra_context: Mapping[str, Any] = {"
    },
    {
        "line": 123,
        "fullcodeline": "context.update(extra_context)"
    },
    {
        "line": 67,
        "fullcodeline": "if form.is_valid():"
    },
    {
        "line": 124,
        "fullcodeline": "return render(request, \"zerver/accounts_home.html\", context=context)"
    },
    {
        "line": 38,
        "fullcodeline": "set_expirable_session_var("
    },
    {
        "line": 50,
        "fullcodeline": "from_multiuse_invite = True"
    },
    {
        "line": 56,
        "fullcodeline": "assert multiuse_obj is not None"
    },
    {
        "line": 57,
        "fullcodeline": "realm = multiuse_obj.realm"
    },
    {
        "line": 58,
        "fullcodeline": "invited_as = multiuse_obj.invited_as"
    },
    {
        "line": 104,
        "fullcodeline": "confirmation_link = create_confirmation_link(prereg_user, Confirmation.USER_REGISTRATION)"
    },
    {
        "line": 108,
        "fullcodeline": "context = {\"email\": email, \"continue_link\": confirmation_link, \"full_name\": full_name}"
    },
    {
        "line": 97,
        "fullcodeline": "if multiuse_obj is not None:"
    },
    {
        "line": 109,
        "fullcodeline": "return render(request, \"zerver/confirm_continue_registration.html\", context=context)"
    },
    {
        "line": 42,
        "fullcodeline": "set_expirable_session_var("
    },
    {
        "line": 52,
        "fullcodeline": "multiuse_obj = get_object_from_key(multiuse_object_key, [Confirmation.MULTIUSE_INVITE])"
    },
    {
        "line": 61,
        "fullcodeline": "realm = get_realm(get_subdomain(request))"
    },
    {
        "line": 74,
        "fullcodeline": "prereg_user = filter_to_valid_prereg_users("
    },
    {
        "line": 81,
        "fullcodeline": "prereg_user.password_required = password_required"
    },
    {
        "line": 82,
        "fullcodeline": "update_fields = [\"password_required\"]"
    },
    {
        "line": 87,
        "fullcodeline": "prereg_user.save(update_fields=update_fields)"
    },
    {
        "line": 98,
        "fullcodeline": "request.session.modified = True"
    },
    {
        "line": 99,
        "fullcodeline": "streams_to_subscribe = list(multiuse_obj.streams.all())"
    },
    {
        "line": 101,
        "fullcodeline": "prereg_user.invited_as = invited_as"
    },
    {
        "line": 102,
        "fullcodeline": "prereg_user.save()"
    },
    {
        "line": 100,
        "fullcodeline": "prereg_user.streams.set(streams_to_subscribe)"
    },
    {
        "line": 106,
        "fullcodeline": "return redirect(confirmation_link)"
    },
    {
        "line": 63,
        "fullcodeline": "pass"
    },
    {
        "line": 84,
        "fullcodeline": "prereg_user.full_name = full_name"
    },
    {
        "line": 85,
        "fullcodeline": "prereg_user.full_name_validated = full_name_validated"
    },
    {
        "line": 86,
        "fullcodeline": "update_fields.extend([\"full_name\", \"full_name_validated\"])"
    },
    {
        "line": 89,
        "fullcodeline": "prereg_user = create_preregistration_user("
    },
    {
        "line": 54,
        "fullcodeline": "return render_confirmation_key_error(request, exception)"
    },
    {
        "line": 75,
        "fullcodeline": "PreregistrationUser.objects.filter(email__iexact=email, realm=realm)"
    }
]