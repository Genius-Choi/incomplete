[
    {
        "line": 12,
        "fullcodeline": "AP4_MoovAtom*               moov = NULL;"
    },
    {
        "line": 13,
        "fullcodeline": "AP4_ContainerAtom*          mfra = NULL;"
    },
    {
        "line": 14,
        "fullcodeline": "AP4_SidxAtom*               sidx = NULL;"
    },
    {
        "line": 15,
        "fullcodeline": "AP4_List<AP4_AtomLocator>   frags;"
    },
    {
        "line": 16,
        "fullcodeline": "AP4_UI64                    stream_offset = 0;"
    },
    {
        "line": 17,
        "fullcodeline": "bool                        in_fragments = false;"
    },
    {
        "line": 18,
        "fullcodeline": "unsigned int                sidx_count = 0;"
    },
    {
        "line": 74,
        "fullcodeline": "AP4_Result result = Initialize(top_level, input);"
    },
    {
        "line": 78,
        "fullcodeline": "AP4_Array<AP4_SampleLocator> locators;"
    },
    {
        "line": 79,
        "fullcodeline": "AP4_Cardinal                 track_count       = 0;"
    },
    {
        "line": 80,
        "fullcodeline": "AP4_List<AP4_TrakAtom>*      trak_atoms        = NULL;"
    },
    {
        "line": 81,
        "fullcodeline": "AP4_LargeSize                mdat_payload_size = 0;"
    },
    {
        "line": 82,
        "fullcodeline": "AP4_SampleCursor*            cursors           = NULL;"
    },
    {
        "line": 200,
        "fullcodeline": "Finalize(top_level);"
    },
    {
        "line": 319,
        "fullcodeline": "frags.DeleteReferences();"
    },
    {
        "line": 320,
        "fullcodeline": "delete mfra;"
    },
    {
        "line": 20,
        "fullcodeline": "AP4_SUCCEEDED(atom_factory.CreateAtomFromStream(input, atom));"
    },
    {
        "line": 21,
        "fullcodeline": "input.Tell(stream_offset)) {"
    },
    {
        "line": 53,
        "fullcodeline": "if (sidx_count > 1) {"
    },
    {
        "line": 75,
        "fullcodeline": "if (AP4_FAILED(result)) return result;"
    },
    {
        "line": 202,
        "fullcodeline": "if (!fragments) {"
    },
    {
        "line": 19,
        "fullcodeline": "for (AP4_Atom* atom = NULL;"
    },
    {
        "line": 49,
        "fullcodeline": "top_level.AddChild(atom);"
    },
    {
        "line": 54,
        "fullcodeline": "top_level.RemoveChild(sidx);"
    },
    {
        "line": 55,
        "fullcodeline": "delete sidx;"
    },
    {
        "line": 56,
        "fullcodeline": "sidx = NULL;"
    },
    {
        "line": 61,
        "fullcodeline": "stream_offset = 0;"
    },
    {
        "line": 85,
        "fullcodeline": "trak_atoms = &moov->GetTrakAtoms();"
    },
    {
        "line": 86,
        "fullcodeline": "track_count = trak_atoms->ItemCount();"
    },
    {
        "line": 87,
        "fullcodeline": "cursors = new AP4_SampleCursor[track_count];"
    },
    {
        "line": 88,
        "fullcodeline": "m_TrackHandlers.SetItemCount(track_count);"
    },
    {
        "line": 89,
        "fullcodeline": "m_TrackIds.SetItemCount(track_count);"
    },
    {
        "line": 95,
        "fullcodeline": "unsigned int index = 0;"
    },
    {
        "line": 165,
        "fullcodeline": "int current_track = -1;"
    },
    {
        "line": 166,
        "fullcodeline": "int current_chunk = -1;"
    },
    {
        "line": 167,
        "fullcodeline": "AP4_Position current_chunk_offset = 0;"
    },
    {
        "line": 168,
        "fullcodeline": "AP4_Size current_chunk_size = 0;"
    },
    {
        "line": 204,
        "fullcodeline": "AP4_UI64 atoms_size = 0;"
    },
    {
        "line": 205,
        "fullcodeline": "top_level.GetChildren().Apply(AP4_AtomSizeAdder(atoms_size));"
    },
    {
        "line": 208,
        "fullcodeline": "AP4_Size mdat_header_size = AP4_ATOM_HEADER_SIZE;"
    },
    {
        "line": 222,
        "fullcodeline": "top_level.GetChildren().Apply(AP4_AtomListWriter(output));"
    },
    {
        "line": 275,
        "fullcodeline": "AP4_Position sidx_position = 0;"
    },
    {
        "line": 289,
        "fullcodeline": "result = ProcessFragments(moov, frags, mfra, sidx, sidx_position, fragments?*fragments:input, output);"
    },
    {
        "line": 314,
        "fullcodeline": "m_TrackHandlers.Clear();"
    },
    {
        "line": 315,
        "fullcodeline": "delete[] cursors;"
    },
    {
        "line": 22,
        "fullcodeline": "if (atom->GetType() == AP4_ATOM_TYPE_MDAT) {"
    },
    {
        "line": 63,
        "fullcodeline": "AP4_SUCCEEDED(atom_factory.CreateAtomFromStream(*fragments, atom));"
    },
    {
        "line": 64,
        "fullcodeline": "fragments->Tell(stream_offset)) {"
    },
    {
        "line": 90,
        "fullcodeline": "for (AP4_Ordinal i=0; i<track_count; i++) {"
    },
    {
        "line": 96,
        "fullcodeline": "for (AP4_List<AP4_TrakAtom>::Item* item = trak_atoms->FirstItem(); item; item=item->GetNext()) {"
    },
    {
        "line": 169,
        "fullcodeline": "for (AP4_Ordinal i=0; i<locators.ItemCount(); i++) {"
    },
    {
        "line": 193,
        "fullcodeline": "for (AP4_Ordinal i=0; i<track_count; i++) {"
    },
    {
        "line": 209,
        "fullcodeline": "if (mdat_payload_size+mdat_header_size > 0xFFFFFFFF) {"
    },
    {
        "line": 215,
        "fullcodeline": "for (AP4_Ordinal i=0; i<track_count; i++) {"
    },
    {
        "line": 241,
        "fullcodeline": "if (!fragments) {"
    },
    {
        "line": 290,
        "fullcodeline": "if (AP4_FAILED(result)) return result;"
    },
    {
        "line": 293,
        "fullcodeline": "if (sidx && sidx_position) {"
    },
    {
        "line": 302,
        "fullcodeline": "if (!fragments) {"
    },
    {
        "line": 310,
        "fullcodeline": "for (AP4_Ordinal i=0; i<track_count; i++) {"
    },
    {
        "line": 23,
        "fullcodeline": "delete atom;"
    },
    {
        "line": 62,
        "fullcodeline": "for (AP4_Atom* atom = NULL;"
    },
    {
        "line": 69,
        "fullcodeline": "frags.Add(new AP4_AtomLocator(atom, stream_offset));"
    },
    {
        "line": 91,
        "fullcodeline": "m_TrackHandlers[i] = NULL;"
    },
    {
        "line": 92,
        "fullcodeline": "m_TrackIds[i] = 0;"
    },
    {
        "line": 97,
        "fullcodeline": "AP4_TrakAtom* trak = item->GetData();"
    },
    {
        "line": 100,
        "fullcodeline": "AP4_ContainerAtom* stbl = AP4_DYNAMIC_CAST(AP4_ContainerAtom, trak->FindChild(\"mdia/minf/stbl\"));"
    },
    {
        "line": 104,
        "fullcodeline": "AP4_ByteStream* trak_data_stream = &input;"
    },
    {
        "line": 114,
        "fullcodeline": "m_TrackHandlers[index] = CreateTrackHandler(trak);"
    },
    {
        "line": 115,
        "fullcodeline": "m_TrackIds[index]      = trak->GetId();"
    },
    {
        "line": 116,
        "fullcodeline": "cursors[index].m_Locator.m_TrakIndex   = index;"
    },
    {
        "line": 117,
        "fullcodeline": "cursors[index].m_Locator.m_SampleTable = new AP4_AtomSampleTable(stbl, *trak_data_stream);"
    },
    {
        "line": 118,
        "fullcodeline": "cursors[index].m_Locator.m_SampleIndex = 0;"
    },
    {
        "line": 119,
        "fullcodeline": "cursors[index].m_Locator.m_ChunkIndex  = 0;"
    },
    {
        "line": 126,
        "fullcodeline": "index++;"
    },
    {
        "line": 132,
        "fullcodeline": "AP4_UI64 min_offset = (AP4_UI64)(-1);"
    },
    {
        "line": 133,
        "fullcodeline": "int cursor = -1;"
    },
    {
        "line": 147,
        "fullcodeline": "locators.Append(locator);"
    },
    {
        "line": 150,
        "fullcodeline": "locator.m_SampleIndex++;"
    },
    {
        "line": 170,
        "fullcodeline": "AP4_SampleLocator& locator = locators[i];"
    },
    {
        "line": 181,
        "fullcodeline": "TrackHandler* handler = m_TrackHandlers[locator.m_TrakIndex];"
    },
    {
        "line": 188,
        "fullcodeline": "current_chunk_size += sample_size;"
    },
    {
        "line": 189,
        "fullcodeline": "mdat_payload_size  += sample_size;"
    },
    {
        "line": 194,
        "fullcodeline": "TrackHandler* handler = m_TrackHandlers[i];"
    },
    {
        "line": 211,
        "fullcodeline": "mdat_header_size += 8;"
    },
    {
        "line": 217,
        "fullcodeline": "trak_atoms->Get(i, trak);"
    },
    {
        "line": 218,
        "fullcodeline": "trak->AdjustChunkOffsets(atoms_size+mdat_header_size);"
    },
    {
        "line": 294,
        "fullcodeline": "AP4_Position where = 0;"
    },
    {
        "line": 295,
        "fullcodeline": "output.Tell(where);"
    },
    {
        "line": 296,
        "fullcodeline": "output.Seek(sidx_position);"
    },
    {
        "line": 297,
        "fullcodeline": "result = sidx->Write(output);"
    },
    {
        "line": 299,
        "fullcodeline": "output.Seek(where);"
    },
    {
        "line": 312,
        "fullcodeline": "delete m_TrackHandlers[i];"
    },
    {
        "line": 65,
        "fullcodeline": "if (atom->GetType() == AP4_ATOM_TYPE_MDAT) {"
    },
    {
        "line": 101,
        "fullcodeline": "if (stbl == NULL) continue;"
    },
    {
        "line": 105,
        "fullcodeline": "for (AP4_List<ExternalTrackData>::Item* ditem = m_ExternalTrackData.FirstItem(); ditem; ditem=ditem->GetNext()) {"
    },
    {
        "line": 120,
        "fullcodeline": "if (cursors[index].m_Locator.m_SampleTable->GetSampleCount()) {"
    },
    {
        "line": 134,
        "fullcodeline": "for (unsigned int i=0; i<track_count; i++) {"
    },
    {
        "line": 143,
        "fullcodeline": "if (cursor == -1) break;"
    },
    {
        "line": 151,
        "fullcodeline": "if (locator.m_SampleIndex == locator.m_SampleTable->GetSampleCount()) {"
    },
    {
        "line": 171,
        "fullcodeline": "if ((int)locator.m_TrakIndex  != current_track ||"
    },
    {
        "line": 226,
        "fullcodeline": "if (mdat_header_size == AP4_ATOM_HEADER_SIZE) {"
    },
    {
        "line": 249,
        "fullcodeline": "for (unsigned int i=0; i<locators.ItemCount(); i++) {"
    },
    {
        "line": 279,
        "fullcodeline": "item = item->GetNext()) {"
    },
    {
        "line": 298,
        "fullcodeline": "if (AP4_FAILED(result)) return result;"
    },
    {
        "line": 25,
        "fullcodeline": "} else if (atom->GetType() == AP4_ATOM_TYPE_MOOV) {"
    },
    {
        "line": 66,
        "fullcodeline": "delete atom;"
    },
    {
        "line": 106,
        "fullcodeline": "ExternalTrackData* tdata = ditem->GetData();"
    },
    {
        "line": 121,
        "fullcodeline": "cursors[index].m_Locator.m_SampleTable->GetSample(0, cursors[index].m_Locator.m_Sample);"
    },
    {
        "line": 153,
        "fullcodeline": "cursors[cursor].m_EndReached = true;"
    },
    {
        "line": 172,
        "fullcodeline": "(int)locator.m_ChunkIndex != current_chunk) {"
    },
    {
        "line": 174,
        "fullcodeline": "current_chunk_offset += current_chunk_size;"
    },
    {
        "line": 175,
        "fullcodeline": "current_chunk_size = 0;"
    },
    {
        "line": 176,
        "fullcodeline": "current_track = locator.m_TrakIndex;"
    },
    {
        "line": 177,
        "fullcodeline": "current_chunk = locator.m_ChunkIndex;"
    },
    {
        "line": 178,
        "fullcodeline": "locator.m_SampleTable->SetChunkOffset(locator.m_ChunkIndex, current_chunk_offset);"
    },
    {
        "line": 183,
        "fullcodeline": "sample_size = handler->GetProcessedSampleSize(locator.m_Sample);"
    },
    {
        "line": 184,
        "fullcodeline": "locator.m_SampleTable->SetSampleSize(locator.m_SampleIndex, sample_size);"
    },
    {
        "line": 195,
        "fullcodeline": "if (handler) handler->ProcessTrack();"
    },
    {
        "line": 228,
        "fullcodeline": "output.WriteUI32((AP4_UI32)(mdat_header_size+mdat_payload_size));"
    },
    {
        "line": 229,
        "fullcodeline": "output.WriteUI32(AP4_ATOM_TYPE_MDAT);"
    },
    {
        "line": 250,
        "fullcodeline": "AP4_SampleLocator& locator = locators[i];"
    },
    {
        "line": 251,
        "fullcodeline": "locator.m_Sample.ReadData(data_in);"
    },
    {
        "line": 252,
        "fullcodeline": "TrackHandler* handler = m_TrackHandlers[locator.m_TrakIndex];"
    },
    {
        "line": 277,
        "fullcodeline": "for (AP4_List<AP4_Atom>::Item* item = top_level.GetChildren().FirstItem();"
    },
    {
        "line": 280,
        "fullcodeline": "AP4_Atom* atom = item->GetData();"
    },
    {
        "line": 284,
        "fullcodeline": "sidx_position += atom->GetSize();"
    },
    {
        "line": 305,
        "fullcodeline": "mfra->Write(output);"
    },
    {
        "line": 26,
        "fullcodeline": "moov = AP4_DYNAMIC_CAST(AP4_MoovAtom, atom);"
    },
    {
        "line": 107,
        "fullcodeline": "if (tdata->m_TrackId == trak->GetId()) {"
    },
    {
        "line": 123,
        "fullcodeline": "cursors[index].m_EndReached = true;"
    },
    {
        "line": 135,
        "fullcodeline": "if (!cursors[i].m_EndReached &&"
    },
    {
        "line": 156,
        "fullcodeline": "locator.m_SampleTable->GetSample(locator.m_SampleIndex, locator.m_Sample);"
    },
    {
        "line": 158,
        "fullcodeline": "locator.m_SampleTable->GetChunkForSample(locator.m_SampleIndex,"
    },
    {
        "line": 186,
        "fullcodeline": "sample_size = locator.m_Sample.GetSize();"
    },
    {
        "line": 232,
        "fullcodeline": "output.WriteUI32(1);"
    },
    {
        "line": 233,
        "fullcodeline": "output.WriteUI32(AP4_ATOM_TYPE_MDAT);"
    },
    {
        "line": 234,
        "fullcodeline": "output.WriteUI64(mdat_header_size+mdat_payload_size);"
    },
    {
        "line": 281,
        "fullcodeline": "if (atom->GetType() == AP4_ATOM_TYPE_SIDX) {"
    },
    {
        "line": 108,
        "fullcodeline": "trak_data_stream = tdata->m_MediaData;"
    },
    {
        "line": 136,
        "fullcodeline": "cursors[i].m_Locator.m_Sample.GetOffset() <= min_offset) {"
    },
    {
        "line": 137,
        "fullcodeline": "min_offset = cursors[i].m_Locator.m_Sample.GetOffset();"
    },
    {
        "line": 138,
        "fullcodeline": "cursor = i;"
    },
    {
        "line": 254,
        "fullcodeline": "result = handler->ProcessSample(data_in, data_out);"
    },
    {
        "line": 256,
        "fullcodeline": "output.Write(data_out.GetData(), data_out.GetDataSize());"
    },
    {
        "line": 263,
        "fullcodeline": "listener->OnProgress(i+1, locators.ItemCount());"
    },
    {
        "line": 28,
        "fullcodeline": "} else if (atom->GetType() == AP4_ATOM_TYPE_MFRA) {"
    },
    {
        "line": 255,
        "fullcodeline": "if (AP4_FAILED(result)) return result;"
    },
    {
        "line": 258,
        "fullcodeline": "output.Write(data_in.GetData(), data_in.GetDataSize());"
    },
    {
        "line": 29,
        "fullcodeline": "mfra = AP4_DYNAMIC_CAST(AP4_ContainerAtom, atom);"
    },
    {
        "line": 31,
        "fullcodeline": "} else if (atom->GetType() == AP4_ATOM_TYPE_SIDX) {"
    },
    {
        "line": 33,
        "fullcodeline": "++sidx_count;"
    },
    {
        "line": 34,
        "fullcodeline": "if (sidx == NULL) {"
    },
    {
        "line": 35,
        "fullcodeline": "sidx = AP4_DYNAMIC_CAST(AP4_SidxAtom, atom);"
    },
    {
        "line": 40,
        "fullcodeline": "} else if (atom->GetType() == AP4_ATOM_TYPE_SSIX) {"
    },
    {
        "line": 37,
        "fullcodeline": "delete atom;"
    },
    {
        "line": 42,
        "fullcodeline": "delete atom;"
    },
    {
        "line": 44,
        "fullcodeline": "} else if (!fragments && (in_fragments || atom->GetType() == AP4_ATOM_TYPE_MOOF)) {"
    },
    {
        "line": 45,
        "fullcodeline": "in_fragments = true;"
    },
    {
        "line": 46,
        "fullcodeline": "frags.Add(new AP4_AtomLocator(atom, stream_offset));"
    }
]