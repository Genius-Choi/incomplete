[
    {
        "line": 4,
        "fullcodeline": "ft.set_type_id(TFT_PRODUCT);"
    },
    {
        "line": 6,
        "fullcodeline": "for (int i = 0; i < op_def.output_arg_size(); i++) {"
    },
    {
        "line": 7,
        "fullcodeline": "auto* t = ft.add_args();"
    },
    {
        "line": 9,
        "fullcodeline": "*t = op_def.output_arg(i).experimental_full_type();"
    },
    {
        "line": 21,
        "fullcodeline": "for (int j = 0; j < t->args_size(); j++) {"
    },
    {
        "line": 22,
        "fullcodeline": "auto* arg = t->mutable_args(i);"
    },
    {
        "line": 23,
        "fullcodeline": "if (arg->type_id() == TFT_VAR) {"
    },
    {
        "line": 24,
        "fullcodeline": "const auto* attr = attrs.Find(arg->s());"
    },
    {
        "line": 25,
        "fullcodeline": "DCHECK(attr != nullptr);"
    },
    {
        "line": 42,
        "fullcodeline": "arg->clear_s();"
    },
    {
        "line": 26,
        "fullcodeline": "if (attr->value_case() == AttrValue::kList) {"
    },
    {
        "line": 27,
        "fullcodeline": "const auto& attr_list = attr->list();"
    },
    {
        "line": 28,
        "fullcodeline": "arg->set_type_id(TFT_PRODUCT);"
    },
    {
        "line": 29,
        "fullcodeline": "for (int i = 0; i < attr_list.type_size(); i++) {"
    },
    {
        "line": 30,
        "fullcodeline": "map_dtype_to_tensor(attr_list.type(i), arg->add_args());"
    },
    {
        "line": 33,
        "fullcodeline": "} else if (attr->value_case() == AttrValue::kType) {"
    },
    {
        "line": 34,
        "fullcodeline": "map_dtype_to_tensor(attr->type(), arg);"
    },
    {
        "line": 37,
        "fullcodeline": "return Status(error::UNIMPLEMENTED,"
    },
    {
        "line": 38,
        "fullcodeline": "absl::StrCat(\"unknown attribute type\","
    },
    {
        "line": 39,
        "fullcodeline": "attrs.DebugString(), \" key=\", arg->s()));"
    }
]