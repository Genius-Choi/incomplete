[
    {
        "line": 4,
        "fullcodeline": "params.dtypes.append(typeid(Tinput).name());"
    },
    {
        "line": 5,
        "fullcodeline": "params.dtypes.append(typeid(Tweight).name());"
    },
    {
        "line": 6,
        "fullcodeline": "params.dtypes.append(typeid(Tbias).name());"
    },
    {
        "line": 7,
        "fullcodeline": "params.dtypes.append(typeid(Toutput).name());"
    },
    {
        "line": 10,
        "fullcodeline": "const Tensor& min_input_tensor = context->input(3);"
    },
    {
        "line": 11,
        "fullcodeline": "const Tensor& max_input_tensor = context->input(4);"
    },
    {
        "line": 12,
        "fullcodeline": "const Tensor& min_weight_tensor = context->input(5);"
    },
    {
        "line": 13,
        "fullcodeline": "const Tensor& max_weight_tensor = context->input(6);"
    },
    {
        "line": 15,
        "fullcodeline": "OP_REQUIRES(context, TensorShapeUtils::IsScalar(min_input_tensor.shape()),"
    },
    {
        "line": 18,
        "fullcodeline": "OP_REQUIRES(context, TensorShapeUtils::IsScalar(max_input_tensor.shape()),"
    },
    {
        "line": 21,
        "fullcodeline": "OP_REQUIRES(context, TensorShapeUtils::IsScalar(min_weight_tensor.shape()),"
    },
    {
        "line": 24,
        "fullcodeline": "OP_REQUIRES(context, TensorShapeUtils::IsScalar(max_weight_tensor.shape()),"
    },
    {
        "line": 16,
        "fullcodeline": "errors::InvalidArgument(\"`min_a` must be rank 0 but is rank \","
    },
    {
        "line": 19,
        "fullcodeline": "errors::InvalidArgument(\"`max_a` must be rank 0 but is rank \","
    },
    {
        "line": 22,
        "fullcodeline": "errors::InvalidArgument(\"`min_b` must be rank 0 but is rank \","
    },
    {
        "line": 25,
        "fullcodeline": "errors::InvalidArgument(\"`max_b` must be rank 0 but is rank \","
    },
    {
        "line": 30,
        "fullcodeline": "if (std::is_same<Toutput, quint8>::value ||"
    },
    {
        "line": 17,
        "fullcodeline": "min_input_tensor.dims()));"
    },
    {
        "line": 20,
        "fullcodeline": "max_input_tensor.dims()));"
    },
    {
        "line": 23,
        "fullcodeline": "min_weight_tensor.dims()));"
    },
    {
        "line": 26,
        "fullcodeline": "max_weight_tensor.dims()));"
    },
    {
        "line": 35,
        "fullcodeline": "ComputeOutputRangeForInt32(context, &min_output_value, &max_output_value);"
    },
    {
        "line": 36,
        "fullcodeline": "float scale_int32 ="
    },
    {
        "line": 38,
        "fullcodeline": "const Tensor& min_freezed_tensor = context->input(7);"
    },
    {
        "line": 39,
        "fullcodeline": "const Tensor& max_freezed_tensor = context->input(8);"
    },
    {
        "line": 41,
        "fullcodeline": "OP_REQUIRES(context,"
    },
    {
        "line": 46,
        "fullcodeline": "OP_REQUIRES(context,"
    },
    {
        "line": 51,
        "fullcodeline": "const float min_freezed_output = min_freezed_tensor.scalar<float>()();"
    },
    {
        "line": 52,
        "fullcodeline": "const float max_freezed_output = max_freezed_tensor.scalar<float>()();"
    },
    {
        "line": 53,
        "fullcodeline": "float scale_eightbit ="
    },
    {
        "line": 55,
        "fullcodeline": "float scale = 1.0;"
    },
    {
        "line": 68,
        "fullcodeline": "output_scale.push_back(scale);"
    },
    {
        "line": 69,
        "fullcodeline": "params.post_op_params.push_back({\"output_scale\", output_scale});"
    },
    {
        "line": 37,
        "fullcodeline": "std::max(std::abs(min_output_value), std::abs(max_output_value));"
    },
    {
        "line": 42,
        "fullcodeline": "TensorShapeUtils::IsScalar(min_freezed_tensor.shape()),"
    },
    {
        "line": 43,
        "fullcodeline": "errors::InvalidArgument("
    },
    {
        "line": 47,
        "fullcodeline": "TensorShapeUtils::IsScalar(max_freezed_tensor.shape()),"
    },
    {
        "line": 48,
        "fullcodeline": "errors::InvalidArgument("
    },
    {
        "line": 54,
        "fullcodeline": "std::max(std::abs(min_freezed_output), std::abs(max_freezed_output));"
    },
    {
        "line": 45,
        "fullcodeline": "min_freezed_tensor.dims()));"
    },
    {
        "line": 50,
        "fullcodeline": "max_freezed_tensor.dims()));"
    },
    {
        "line": 57,
        "fullcodeline": "scale = scale_int32 / scale_eightbit / static_cast<float>(1u << 23);"
    },
    {
        "line": 59,
        "fullcodeline": "scale = scale_int32 / scale_eightbit / static_cast<float>(1u << 24);"
    },
    {
        "line": 61,
        "fullcodeline": "scale = scale_int32 / static_cast<float>(1u << 31);"
    },
    {
        "line": 65,
        "fullcodeline": "scale = scale_int32 / scale_eightbit / static_cast<float>(1u << 24);"
    }
]