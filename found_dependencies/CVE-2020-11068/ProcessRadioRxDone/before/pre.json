[
    {
        "line": 7,
        "fullcodeline": "LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;"
    },
    {
        "line": 11,
        "fullcodeline": "uint8_t *payload = RxDoneParams.Payload;"
    },
    {
        "line": 12,
        "fullcodeline": "uint16_t size = RxDoneParams.Size;"
    },
    {
        "line": 13,
        "fullcodeline": "int16_t rssi = RxDoneParams.Rssi;"
    },
    {
        "line": 14,
        "fullcodeline": "int8_t snr = RxDoneParams.Snr;"
    },
    {
        "line": 16,
        "fullcodeline": "uint8_t pktHeaderLen = 0;"
    },
    {
        "line": 18,
        "fullcodeline": "uint32_t downLinkCounter = 0;"
    },
    {
        "line": 19,
        "fullcodeline": "uint32_t address = MacCtx.NvmCtx->DevAddr;"
    },
    {
        "line": 20,
        "fullcodeline": "uint8_t multicast = 0;"
    },
    {
        "line": 21,
        "fullcodeline": "AddressIdentifier_t addrID = UNICAST_DEV_ADDR;"
    },
    {
        "line": 24,
        "fullcodeline": "MacCtx.McpsConfirm.AckReceived = false;"
    },
    {
        "line": 25,
        "fullcodeline": "MacCtx.McpsIndication.Rssi = rssi;"
    },
    {
        "line": 26,
        "fullcodeline": "MacCtx.McpsIndication.Snr = snr;"
    },
    {
        "line": 27,
        "fullcodeline": "MacCtx.McpsIndication.RxSlot = MacCtx.RxSlot;"
    },
    {
        "line": 28,
        "fullcodeline": "MacCtx.McpsIndication.Port = 0;"
    },
    {
        "line": 29,
        "fullcodeline": "MacCtx.McpsIndication.Multicast = 0;"
    },
    {
        "line": 30,
        "fullcodeline": "MacCtx.McpsIndication.FramePending = 0;"
    },
    {
        "line": 31,
        "fullcodeline": "MacCtx.McpsIndication.Buffer = NULL;"
    },
    {
        "line": 32,
        "fullcodeline": "MacCtx.McpsIndication.BufferSize = 0;"
    },
    {
        "line": 33,
        "fullcodeline": "MacCtx.McpsIndication.RxData = false;"
    },
    {
        "line": 34,
        "fullcodeline": "MacCtx.McpsIndication.AckReceived = false;"
    },
    {
        "line": 35,
        "fullcodeline": "MacCtx.McpsIndication.DownLinkCounter = 0;"
    },
    {
        "line": 36,
        "fullcodeline": "MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;"
    },
    {
        "line": 37,
        "fullcodeline": "MacCtx.McpsIndication.DevAddress = 0;"
    },
    {
        "line": 38,
        "fullcodeline": "MacCtx.McpsIndication.DeviceTimeAnsReceived = false;"
    },
    {
        "line": 40,
        "fullcodeline": "Radio.Sleep( );"
    },
    {
        "line": 41,
        "fullcodeline": "TimerStop( &MacCtx.RxWindowTimer2 );"
    },
    {
        "line": 44,
        "fullcodeline": "if( LoRaMacClassBRxBeacon( payload, size ) == true )"
    },
    {
        "line": 51,
        "fullcodeline": "if( MacCtx.NvmCtx->DeviceClass == CLASS_B )"
    },
    {
        "line": 382,
        "fullcodeline": "if( MacCtx.NodeAckRequested == true )"
    },
    {
        "line": 46,
        "fullcodeline": "MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;"
    },
    {
        "line": 47,
        "fullcodeline": "MacCtx.MlmeIndication.BeaconInfo.Snr = snr;"
    },
    {
        "line": 67,
        "fullcodeline": "macHdr.Value = payload[pktHeaderLen++];"
    },
    {
        "line": 72,
        "fullcodeline": "macMsgJoinAccept.Buffer = payload;"
    },
    {
        "line": 73,
        "fullcodeline": "macMsgJoinAccept.BufSize = size;"
    },
    {
        "line": 82,
        "fullcodeline": "macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );"
    },
    {
        "line": 139,
        "fullcodeline": "getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;"
    },
    {
        "line": 140,
        "fullcodeline": "getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;"
    },
    {
        "line": 141,
        "fullcodeline": "getPhy.Attribute = PHY_MAX_PAYLOAD;"
    },
    {
        "line": 142,
        "fullcodeline": "phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );"
    },
    {
        "line": 149,
        "fullcodeline": "macMsgData.Buffer = payload;"
    },
    {
        "line": 150,
        "fullcodeline": "macMsgData.BufSize = size;"
    },
    {
        "line": 151,
        "fullcodeline": "macMsgData.FRMPayload = MacCtx.RxPayload;"
    },
    {
        "line": 152,
        "fullcodeline": "macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;"
    },
    {
        "line": 173,
        "fullcodeline": "multicast = 0;"
    },
    {
        "line": 174,
        "fullcodeline": "downLinkCounter = 0;"
    },
    {
        "line": 203,
        "fullcodeline": "getPhy.Attribute = PHY_MAX_FCNT_GAP;"
    },
    {
        "line": 204,
        "fullcodeline": "phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );"
    },
    {
        "line": 207,
        "fullcodeline": "macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, MacCtx.NvmCtx->Version, phyParam.Value, &fCntID, &downLinkCounter );"
    },
    {
        "line": 234,
        "fullcodeline": "macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );"
    },
    {
        "line": 261,
        "fullcodeline": "MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;"
    },
    {
        "line": 293,
        "fullcodeline": "RemoveMacCommands( MacCtx.McpsIndication.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );"
    },
    {
        "line": 366,
        "fullcodeline": "memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );"
    },
    {
        "line": 368,
        "fullcodeline": "MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;"
    },
    {
        "line": 53,
        "fullcodeline": "if( LoRaMacClassBIsPingExpected( ) == true )"
    },
    {
        "line": 76,
        "fullcodeline": "if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )"
    },
    {
        "line": 154,
        "fullcodeline": "if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )"
    },
    {
        "line": 165,
        "fullcodeline": "if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )"
    },
    {
        "line": 175,
        "fullcodeline": "for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )"
    },
    {
        "line": 208,
        "fullcodeline": "if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )"
    },
    {
        "line": 235,
        "fullcodeline": "if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )"
    },
    {
        "line": 371,
        "fullcodeline": "MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;"
    },
    {
        "line": 56,
        "fullcodeline": "LoRaMacClassBPingSlotTimerEvent( NULL );"
    },
    {
        "line": 57,
        "fullcodeline": "MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;"
    },
    {
        "line": 87,
        "fullcodeline": "MacCtx.NvmCtx->NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];"
    },
    {
        "line": 88,
        "fullcodeline": "MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );"
    },
    {
        "line": 100,
        "fullcodeline": "MacCtx.NvmCtx->MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;"
    },
    {
        "line": 105,
        "fullcodeline": "MacCtx.NvmCtx->MacParams.ReceiveDelay1 *= 1000;"
    },
    {
        "line": 111,
        "fullcodeline": "applyCFList.Payload = macMsgJoinAccept.CFList;"
    },
    {
        "line": 113,
        "fullcodeline": "applyCFList.Size = size - 17;"
    },
    {
        "line": 117,
        "fullcodeline": "MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_OTAA;"
    },
    {
        "line": 143,
        "fullcodeline": "if( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORA_MAC_FRMPAYLOAD_OVERHEAD ) ) > ( int16_t )phyParam.Value )"
    },
    {
        "line": 193,
        "fullcodeline": "if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||"
    },
    {
        "line": 264,
        "fullcodeline": "if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||"
    },
    {
        "line": 265,
        "fullcodeline": "( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_2 ) )"
    },
    {
        "line": 273,
        "fullcodeline": "MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;"
    },
    {
        "line": 89,
        "fullcodeline": "MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );"
    },
    {
        "line": 101,
        "fullcodeline": "if( MacCtx.NvmCtx->MacParams.ReceiveDelay1 == 0 )"
    },
    {
        "line": 120,
        "fullcodeline": "if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )"
    },
    {
        "line": 195,
        "fullcodeline": "( macMsgData.FHDR.FCtrl.Bits.AdrAckReq == true ) ) )"
    },
    {
        "line": 210,
        "fullcodeline": "if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )"
    },
    {
        "line": 237,
        "fullcodeline": "if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )"
    },
    {
        "line": 59,
        "fullcodeline": "else if( LoRaMacClassBIsMulticastExpected( ) == true )"
    },
    {
        "line": 103,
        "fullcodeline": "MacCtx.NvmCtx->MacParams.ReceiveDelay1 = 1;"
    },
    {
        "line": 128,
        "fullcodeline": "if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )"
    },
    {
        "line": 177,
        "fullcodeline": "if( ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&"
    },
    {
        "line": 178,
        "fullcodeline": "( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.IsEnabled == true ) )"
    },
    {
        "line": 180,
        "fullcodeline": "multicast = 1;"
    },
    {
        "line": 181,
        "fullcodeline": "addrID = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.GroupID;"
    },
    {
        "line": 182,
        "fullcodeline": "downLinkCounter = *( MacCtx.NvmCtx->MulticastChannelList[i].DownLinkCounter );"
    },
    {
        "line": 183,
        "fullcodeline": "address = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address;"
    },
    {
        "line": 194,
        "fullcodeline": "( macMsgData.FHDR.FCtrl.Bits.Ack == true ) ||"
    },
    {
        "line": 213,
        "fullcodeline": "MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;"
    },
    {
        "line": 240,
        "fullcodeline": "MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;"
    },
    {
        "line": 62,
        "fullcodeline": "LoRaMacClassBMulticastSlotTimerEvent( NULL );"
    },
    {
        "line": 63,
        "fullcodeline": "MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;"
    },
    {
        "line": 130,
        "fullcodeline": "LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );"
    },
    {
        "line": 184,
        "fullcodeline": "if( MacCtx.NvmCtx->DeviceClass == CLASS_C )"
    },
    {
        "line": 245,
        "fullcodeline": "MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;"
    },
    {
        "line": 186,
        "fullcodeline": "MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;"
    },
    {
        "line": 214,
        "fullcodeline": "if( ( MacCtx.NvmCtx->Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( MacCtx.NvmCtx->LastRxMic == macMsgData.MIC ) )"
    },
    {
        "line": 219,
        "fullcodeline": "else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )"
    },
    {
        "line": 222,
        "fullcodeline": "MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;"
    }
]