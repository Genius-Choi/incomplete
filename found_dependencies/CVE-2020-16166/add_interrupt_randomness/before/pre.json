[
    {
        "line": 4,
        "fullcodeline": "struct fast_pool\t*fast_pool = this_cpu_ptr(&irq_randomness);"
    },
    {
        "line": 5,
        "fullcodeline": "struct pt_regs\t\t*regs = get_irq_regs();"
    },
    {
        "line": 6,
        "fullcodeline": "unsigned long\t\tnow = jiffies;"
    },
    {
        "line": 7,
        "fullcodeline": "cycles_t\t\tcycles = random_get_entropy();"
    },
    {
        "line": 11,
        "fullcodeline": "int\t\t\tcredit = 0;"
    },
    {
        "line": 15,
        "fullcodeline": "c_high = (sizeof(cycles) > 4) ? cycles >> 32 : 0;"
    },
    {
        "line": 16,
        "fullcodeline": "j_high = (sizeof(now) > 4) ? now >> 32 : 0;"
    },
    {
        "line": 17,
        "fullcodeline": "fast_pool->pool[0] ^= cycles ^ j_high ^ irq;"
    },
    {
        "line": 18,
        "fullcodeline": "fast_pool->pool[1] ^= now ^ c_high;"
    },
    {
        "line": 19,
        "fullcodeline": "ip = regs ? instruction_pointer(regs) : _RET_IP_;"
    },
    {
        "line": 20,
        "fullcodeline": "fast_pool->pool[2] ^= ip;"
    },
    {
        "line": 21,
        "fullcodeline": "fast_pool->pool[3] ^= (sizeof(ip) > 4) ? ip >> 32 :"
    },
    {
        "line": 24,
        "fullcodeline": "fast_mix(fast_pool);"
    },
    {
        "line": 25,
        "fullcodeline": "add_interrupt_bench(cycles);"
    },
    {
        "line": 41,
        "fullcodeline": "r = &input_pool;"
    },
    {
        "line": 46,
        "fullcodeline": "__mix_pool_bytes(r, &fast_pool->pool, sizeof(fast_pool->pool));"
    },
    {
        "line": 13,
        "fullcodeline": "if (cycles == 0)"
    },
    {
        "line": 27,
        "fullcodeline": "if (unlikely(crng_init == 0)) {"
    },
    {
        "line": 54,
        "fullcodeline": "if (arch_get_random_seed_long(&seed)) {"
    },
    {
        "line": 14,
        "fullcodeline": "cycles = get_reg(fast_pool, regs);"
    },
    {
        "line": 22,
        "fullcodeline": "get_reg(fast_pool, regs);"
    },
    {
        "line": 37,
        "fullcodeline": "if ((fast_pool->count < 64) &&"
    },
    {
        "line": 38,
        "fullcodeline": "!time_after(now, fast_pool->last + HZ))"
    },
    {
        "line": 42,
        "fullcodeline": "if (!spin_trylock(&r->lock))"
    },
    {
        "line": 55,
        "fullcodeline": "__mix_pool_bytes(r, &seed, sizeof(seed));"
    },
    {
        "line": 56,
        "fullcodeline": "credit = 1;"
    },
    {
        "line": 28,
        "fullcodeline": "if ((fast_pool->count >= 64) &&"
    },
    {
        "line": 29,
        "fullcodeline": "crng_fast_load((char *) fast_pool->pool,"
    },
    {
        "line": 31,
        "fullcodeline": "fast_pool->count = 0;"
    },
    {
        "line": 32,
        "fullcodeline": "fast_pool->last = now;"
    },
    {
        "line": 30,
        "fullcodeline": "sizeof(fast_pool->pool))) {"
    }
]