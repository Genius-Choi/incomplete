[
    {
        "line": 4,
        "fullcodeline": "struct adis *adis = iio_device_get_drvdata(indio_dev);"
    },
    {
        "line": 9,
        "fullcodeline": "burst_length = (indio_dev->num_channels - 1) * sizeof(u16);"
    },
    {
        "line": 10,
        "fullcodeline": "burst_length += adis->burst->extra_len;"
    },
    {
        "line": 12,
        "fullcodeline": "adis->xfer = kcalloc(2, sizeof(*adis->xfer), GFP_KERNEL);"
    },
    {
        "line": 16,
        "fullcodeline": "adis->buffer = kzalloc(burst_length + sizeof(u16), GFP_KERNEL);"
    },
    {
        "line": 20,
        "fullcodeline": "tx = adis->buffer + burst_length;"
    },
    {
        "line": 21,
        "fullcodeline": "tx[0] = ADIS_READ_REG(adis->burst->reg_cmd);"
    },
    {
        "line": 22,
        "fullcodeline": "tx[1] = 0;"
    },
    {
        "line": 24,
        "fullcodeline": "adis->xfer[0].tx_buf = tx;"
    },
    {
        "line": 25,
        "fullcodeline": "adis->xfer[0].bits_per_word = 8;"
    },
    {
        "line": 26,
        "fullcodeline": "adis->xfer[0].len = 2;"
    },
    {
        "line": 27,
        "fullcodeline": "adis->xfer[1].rx_buf = adis->buffer;"
    },
    {
        "line": 28,
        "fullcodeline": "adis->xfer[1].bits_per_word = 8;"
    },
    {
        "line": 29,
        "fullcodeline": "adis->xfer[1].len = burst_length;"
    },
    {
        "line": 31,
        "fullcodeline": "spi_message_init(&adis->msg);"
    },
    {
        "line": 32,
        "fullcodeline": "spi_message_add_tail(&adis->xfer[0], &adis->msg);"
    },
    {
        "line": 33,
        "fullcodeline": "spi_message_add_tail(&adis->xfer[1], &adis->msg);"
    },
    {
        "line": 13,
        "fullcodeline": "if (!adis->xfer)"
    },
    {
        "line": 17,
        "fullcodeline": "if (!adis->buffer)"
    },
    {
        "line": 14,
        "fullcodeline": "return -ENOMEM;"
    },
    {
        "line": 18,
        "fullcodeline": "return -ENOMEM;"
    }
]