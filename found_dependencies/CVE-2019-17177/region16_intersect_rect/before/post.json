[
    {
        "line": 8,
        "fullcodeline": "assert(src);"
    },
    {
        "line": 9,
        "fullcodeline": "assert(src->data);"
    },
    {
        "line": 10,
        "fullcodeline": "srcPtr = region16_rects(src, &nbRects);"
    },
    {
        "line": 18,
        "fullcodeline": "srcExtents = region16_extents(src);"
    },
    {
        "line": 31,
        "fullcodeline": "newItems = allocateRegion(nbRects);"
    },
    {
        "line": 36,
        "fullcodeline": "dstPtr = (RECTANGLE_16*)(&newItems[1]);"
    },
    {
        "line": 37,
        "fullcodeline": "usedRects = 0;"
    },
    {
        "line": 38,
        "fullcodeline": "ZeroMemory(&newExtents, sizeof(newExtents));"
    },
    {
        "line": 69,
        "fullcodeline": "newItems->nbRects = usedRects;"
    },
    {
        "line": 70,
        "fullcodeline": "newItems->size = sizeof(REGION16_DATA) + (usedRects * sizeof(RECTANGLE_16));"
    },
    {
        "line": 75,
        "fullcodeline": "dst->data = realloc(newItems, newItems->size);"
    },
    {
        "line": 83,
        "fullcodeline": "dst->extents = newExtents;"
    },
    {
        "line": 12,
        "fullcodeline": "if (!nbRects)"
    },
    {
        "line": 20,
        "fullcodeline": "if (nbRects == 1)"
    },
    {
        "line": 33,
        "fullcodeline": "if (!newItems)"
    },
    {
        "line": 43,
        "fullcodeline": "for (endPtr = srcPtr + nbRects; (srcPtr < endPtr) && (rect->bottom > srcPtr->top); srcPtr++)"
    },
    {
        "line": 72,
        "fullcodeline": "if ((dst->data->size > 0) && (dst->data != &empty_region))"
    },
    {
        "line": 77,
        "fullcodeline": "if (!dst->data)"
    },
    {
        "line": 84,
        "fullcodeline": "return region16_simplify_bands(dst);"
    },
    {
        "line": 14,
        "fullcodeline": "region16_clear(dst);"
    },
    {
        "line": 22,
        "fullcodeline": "BOOL intersects = rectangles_intersection(srcExtents, rect, &common);"
    },
    {
        "line": 23,
        "fullcodeline": "region16_clear(dst);"
    },
    {
        "line": 73,
        "fullcodeline": "free(dst->data);"
    },
    {
        "line": 79,
        "fullcodeline": "free(newItems);"
    },
    {
        "line": 45,
        "fullcodeline": "if (rectangles_intersection(srcPtr, rect, &common))"
    },
    {
        "line": 47,
        "fullcodeline": "*dstPtr = common;"
    },
    {
        "line": 48,
        "fullcodeline": "usedRects++;"
    },
    {
        "line": 49,
        "fullcodeline": "dstPtr++;"
    },
    {
        "line": 26,
        "fullcodeline": "return region16_union_rect(dst, dst, &common);"
    },
    {
        "line": 51,
        "fullcodeline": "if (rectangle_is_empty(&newExtents))"
    },
    {
        "line": 57,
        "fullcodeline": "newExtents = common;"
    },
    {
        "line": 61,
        "fullcodeline": "newExtents.top = MIN(common.top, newExtents.top);"
    },
    {
        "line": 62,
        "fullcodeline": "newExtents.left = MIN(common.left, newExtents.left);"
    },
    {
        "line": 63,
        "fullcodeline": "newExtents.bottom = MAX(common.bottom, newExtents.bottom);"
    },
    {
        "line": 64,
        "fullcodeline": "newExtents.right = MAX(common.right, newExtents.right);"
    }
]