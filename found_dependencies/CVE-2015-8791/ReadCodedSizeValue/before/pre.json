[
    {
        "line": 3,
        "fullcodeline": "binary SizeBitMask = 1 << 7;"
    },
    {
        "line": 4,
        "fullcodeline": "uint64 Result = 0x7F;"
    },
    {
        "line": 5,
        "fullcodeline": "unsigned int SizeIdx, PossibleSizeLength = 0;"
    },
    {
        "line": 6,
        "fullcodeline": "binary PossibleSize[8];"
    },
    {
        "line": 7,
        "fullcodeline": "memset(PossibleSize, 0, 8);"
    },
    {
        "line": 9,
        "fullcodeline": "SizeUnknown = 0x7F; // the last bit is discarded when computing the size"
    },
    {
        "line": 10,
        "fullcodeline": "for (SizeIdx = 0; SizeIdx < BufferSize && SizeIdx < 8; SizeIdx++) {"
    },
    {
        "line": 34,
        "fullcodeline": "SizeUnknown <<= 7;"
    },
    {
        "line": 35,
        "fullcodeline": "SizeUnknown |= 0xFF;"
    },
    {
        "line": 11,
        "fullcodeline": "if (InBuffer[0] & (SizeBitMask >> SizeIdx)) {"
    },
    {
        "line": 13,
        "fullcodeline": "PossibleSizeLength = SizeIdx + 1;"
    },
    {
        "line": 14,
        "fullcodeline": "SizeBitMask >>= SizeIdx;"
    },
    {
        "line": 23,
        "fullcodeline": "Result = 0;"
    },
    {
        "line": 24,
        "fullcodeline": "Result |= PossibleSize[0] & ~SizeBitMask;"
    },
    {
        "line": 30,
        "fullcodeline": "BufferSize = PossibleSizeLength;"
    },
    {
        "line": 15,
        "fullcodeline": "for (SizeIdx = 0; SizeIdx < PossibleSizeLength; SizeIdx++) {"
    },
    {
        "line": 18,
        "fullcodeline": "for (SizeIdx = 0; SizeIdx < PossibleSizeLength - 1; SizeIdx++) {"
    },
    {
        "line": 25,
        "fullcodeline": "for (unsigned int i = 1; i<PossibleSizeLength; i++) {"
    },
    {
        "line": 16,
        "fullcodeline": "PossibleSize[SizeIdx] = InBuffer[SizeIdx];"
    },
    {
        "line": 19,
        "fullcodeline": "Result <<= 7;"
    },
    {
        "line": 20,
        "fullcodeline": "Result |= 0xFF;"
    },
    {
        "line": 26,
        "fullcodeline": "Result <<= 8;"
    },
    {
        "line": 27,
        "fullcodeline": "Result |= PossibleSize[i];"
    }
]