[
    {
        "line": 2,
        "fullcodeline": "if not allowed_for_local_cluster(auth_user, Permissions::WRITE)"
    },
    {
        "line": 5,
        "fullcodeline": "case params[\"c_type\"]"
    },
    {
        "line": 47,
        "fullcodeline": "if retval == 0"
    },
    {
        "line": 6,
        "fullcodeline": "when \"loc\""
    },
    {
        "line": 7,
        "fullcodeline": "retval, error = add_location_constraint("
    },
    {
        "line": 48,
        "fullcodeline": "return [200, \"Successfully added constraint\"]"
    },
    {
        "line": 50,
        "fullcodeline": "return [400, \"Error adding constraint: #{error}\"]"
    },
    {
        "line": 12,
        "fullcodeline": "when \"ord\""
    },
    {
        "line": 10,
        "fullcodeline": "!params['disable_autocorrect']"
    },
    {
        "line": 13,
        "fullcodeline": "resA = params[\"res_id\"]"
    },
    {
        "line": 14,
        "fullcodeline": "resB = params[\"target_res_id\"]"
    },
    {
        "line": 15,
        "fullcodeline": "actionA = params['res_action']"
    },
    {
        "line": 16,
        "fullcodeline": "actionB = params['target_action']"
    },
    {
        "line": 22,
        "fullcodeline": "retval, error = add_order_constraint("
    },
    {
        "line": 17,
        "fullcodeline": "if params[\"order\"] == \"before\""
    },
    {
        "line": 27,
        "fullcodeline": "when \"col\""
    },
    {
        "line": 18,
        "fullcodeline": "resA, resB = resB, resA"
    },
    {
        "line": 19,
        "fullcodeline": "actionA, actionB = actionB, actionA"
    },
    {
        "line": 25,
        "fullcodeline": "!params['disable_autocorrect']"
    },
    {
        "line": 28,
        "fullcodeline": "resA = params[\"res_id\"]"
    },
    {
        "line": 29,
        "fullcodeline": "resB = params[\"target_res_id\"]"
    },
    {
        "line": 30,
        "fullcodeline": "score = params[\"score\"]"
    },
    {
        "line": 39,
        "fullcodeline": "retval, error = add_colocation_constraint("
    },
    {
        "line": 31,
        "fullcodeline": "if params[\"colocation_type\"] == \"apart\""
    },
    {
        "line": 44,
        "fullcodeline": "return [400, \"Unknown constraint type: #{params['c_type']}\"]"
    },
    {
        "line": 41,
        "fullcodeline": "resA, resB, score, params[\"force\"], !params['disable_autocorrect']"
    },
    {
        "line": 32,
        "fullcodeline": "if score.length > 0 and score[0] != \"-\""
    },
    {
        "line": 33,
        "fullcodeline": "score = \"-\" + score"
    },
    {
        "line": 34,
        "fullcodeline": "elsif score == \"\""
    },
    {
        "line": 35,
        "fullcodeline": "score = \"-INFINITY\""
    }
]