[
    {
        "line": 19,
        "fullcodeline": "cib_dom = get_cib_dom(session)"
    },
    {
        "line": 20,
        "fullcodeline": "crm_dom = get_crm_mon_dom(session)"
    },
    {
        "line": 22,
        "fullcodeline": "status = get_node_status(session, cib_dom)"
    },
    {
        "line": 23,
        "fullcodeline": "resources = get_resources("
    },
    {
        "line": 29,
        "fullcodeline": "node = ClusterEntity::Node.load_current_node(session, crm_dom)"
    },
    {
        "line": 31,
        "fullcodeline": "_,_,not_authorized_nodes = check_gui_status_of_nodes("
    },
    {
        "line": 47,
        "fullcodeline": "version = params[:version] || '1'"
    },
    {
        "line": 64,
        "fullcodeline": "resource_list = []"
    },
    {
        "line": 65,
        "fullcodeline": "resources.each do |r|"
    },
    {
        "line": 69,
        "fullcodeline": "cluster_settings = (status[:cluster_settings].empty?) ?"
    },
    {
        "line": 73,
        "fullcodeline": "node_attr = {}"
    },
    {
        "line": 74,
        "fullcodeline": "status[:node_attr].each { |node, attrs|"
    },
    {
        "line": 84,
        "fullcodeline": "old_status = {"
    },
    {
        "line": 2,
        "fullcodeline": "if params[:node] and params[:node] != '' and params[:node] !="
    },
    {
        "line": 15,
        "fullcodeline": "if not allowed_for_local_cluster(session, Permissions::READ)"
    },
    {
        "line": 38,
        "fullcodeline": "if not_authorized_nodes.length > 0"
    },
    {
        "line": 49,
        "fullcodeline": "if version == '2'"
    },
    {
        "line": 111,
        "fullcodeline": "return JSON.generate(old_status)"
    },
    {
        "line": 3,
        "fullcodeline": "$cur_node_name and !params[:redirected]"
    },
    {
        "line": 26,
        "fullcodeline": "(params[:operations] and params[:operations] == '1')"
    },
    {
        "line": 39,
        "fullcodeline": "node.warning_list << {"
    },
    {
        "line": 50,
        "fullcodeline": "status[:node] = node.to_status(version)"
    },
    {
        "line": 51,
        "fullcodeline": "resource_list = nil"
    },
    {
        "line": 59,
        "fullcodeline": "status[:resource_list] = resource_list"
    },
    {
        "line": 70,
        "fullcodeline": "{'error' => 'Unable to get configuration settings'} :"
    },
    {
        "line": 71,
        "fullcodeline": "status[:cluster_settings]"
    },
    {
        "line": 85,
        "fullcodeline": ":uptime => node.uptime,"
    },
    {
        "line": 86,
        "fullcodeline": ":corosync => node.corosync,"
    },
    {
        "line": 87,
        "fullcodeline": ":pacemaker => node.pacemaker,"
    },
    {
        "line": 88,
        "fullcodeline": ":cman => node.cman,"
    },
    {
        "line": 89,
        "fullcodeline": ":corosync_enabled => node.corosync_enabled,"
    },
    {
        "line": 90,
        "fullcodeline": ":pacemaker_enabled => node.pacemaker_enabled,"
    },
    {
        "line": 91,
        "fullcodeline": ":pcsd_enabled => node.pcsd_enabled,"
    },
    {
        "line": 92,
        "fullcodeline": ":corosync_online => status[:corosync_online],"
    },
    {
        "line": 93,
        "fullcodeline": ":corosync_offline => status[:corosync_offline],"
    },
    {
        "line": 94,
        "fullcodeline": ":pacemaker_online => status[:pacemaker_online],"
    },
    {
        "line": 95,
        "fullcodeline": ":pacemaker_offline => status[:pacemaker_offline],"
    },
    {
        "line": 96,
        "fullcodeline": ":pacemaker_standby => status[:pacemaker_standby],"
    },
    {
        "line": 97,
        "fullcodeline": ":cluster_name => status[:cluster_name],"
    },
    {
        "line": 98,
        "fullcodeline": ":resources => resource_list,"
    },
    {
        "line": 99,
        "fullcodeline": ":groups => status[:groups],"
    },
    {
        "line": 100,
        "fullcodeline": ":constraints => status[:constraints],"
    },
    {
        "line": 101,
        "fullcodeline": ":cluster_settings => cluster_settings,"
    },
    {
        "line": 102,
        "fullcodeline": ":node_id => node.id,"
    },
    {
        "line": 103,
        "fullcodeline": ":node_attr => node_attr,"
    },
    {
        "line": 104,
        "fullcodeline": ":fence_levels => status[:fence_levels],"
    },
    {
        "line": 105,
        "fullcodeline": ":need_ring1_address => status[:need_ring1_address],"
    },
    {
        "line": 106,
        "fullcodeline": ":is_cman_with_udpu_transport => status[:is_cman_with_udpu_transport],"
    },
    {
        "line": 107,
        "fullcodeline": ":acls => status[:acls],"
    },
    {
        "line": 108,
        "fullcodeline": ":username => status[:username]"
    },
    {
        "line": 4,
        "fullcodeline": "return send_request_with_token("
    },
    {
        "line": 61,
        "fullcodeline": "return JSON.generate(status)"
    },
    {
        "line": 9,
        "fullcodeline": "params.select { |k,_|"
    },
    {
        "line": 40,
        "fullcodeline": ":message => 'Not authorized against node(s) ' +"
    },
    {
        "line": 42,
        "fullcodeline": ":type => 'nodes_not_authorized',"
    },
    {
        "line": 43,
        "fullcodeline": ":node_list => not_authorized_nodes,"
    },
    {
        "line": 53,
        "fullcodeline": "resource_list = []"
    },
    {
        "line": 54,
        "fullcodeline": "resources.each do |r|"
    },
    {
        "line": 41,
        "fullcodeline": "not_authorized_nodes.join(', '),"
    }
]