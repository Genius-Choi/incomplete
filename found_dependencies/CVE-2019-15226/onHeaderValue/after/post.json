[
    {
        "line": 7,
        "fullcodeline": "const absl::string_view header_value = absl::string_view(data, length);"
    },
    {
        "line": 25,
        "fullcodeline": "current_header_value_.append(data, length);"
    },
    {
        "line": 28,
        "fullcodeline": "ASSERT(current_header_map_->byteSize().has_value());"
    },
    {
        "line": 29,
        "fullcodeline": "const uint32_t total = current_header_field_.size() + current_header_value_.size() +"
    },
    {
        "line": 2,
        "fullcodeline": "if (header_parsing_state_ == HeaderParsingState::Done) {"
    },
    {
        "line": 31,
        "fullcodeline": "if (total > (max_request_headers_kb_ * 1024)) {"
    },
    {
        "line": 30,
        "fullcodeline": "current_header_map_->byteSize().value();"
    },
    {
        "line": 33,
        "fullcodeline": "sendProtocolError();"
    },
    {
        "line": 10,
        "fullcodeline": "if (!Http::HeaderUtility::headerIsValid(header_value)) {"
    },
    {
        "line": 34,
        "fullcodeline": "throw CodecProtocolException(\"headers size exceeds limit\");"
    },
    {
        "line": 11,
        "fullcodeline": "ENVOY_CONN_LOG(debug, \"invalid header value: {}\", connection_, header_value);"
    },
    {
        "line": 13,
        "fullcodeline": "sendProtocolError();"
    },
    {
        "line": 16,
        "fullcodeline": "} else if (header_value.find('\\0') != absl::string_view::npos) {"
    },
    {
        "line": 14,
        "fullcodeline": "throw CodecProtocolException(\"http/1.1 protocol error: header value contains invalid chars\");"
    },
    {
        "line": 21,
        "fullcodeline": "throw CodecProtocolException(\"http/1.1 protocol error: header value contains NUL\");"
    }
]