[
    {
        "line": 2,
        "fullcodeline": "config_helper_.addConfigModifier("
    },
    {
        "line": 5,
        "fullcodeline": "max_request_headers_kb_ = 96;"
    },
    {
        "line": 7,
        "fullcodeline": "Http::TestHeaderMapImpl big_headers{"
    },
    {
        "line": 13,
        "fullcodeline": "initialize();"
    },
    {
        "line": 15,
        "fullcodeline": "codec_client_ = makeHttpConnection(lookupPort(\"http\"));"
    },
    {
        "line": 17,
        "fullcodeline": "auto response ="
    },
    {
        "line": 20,
        "fullcodeline": "EXPECT_TRUE(response->complete());"
    },
    {
        "line": 21,
        "fullcodeline": "EXPECT_EQ(\"200\", response->headers().Status()->value().getStringView());"
    },
    {
        "line": 10,
        "fullcodeline": "for (int i = 0; i < 20000; i++) {"
    },
    {
        "line": 18,
        "fullcodeline": "sendRequestAndWaitForResponse(big_headers, 0, default_response_headers_, 0, 0, time);"
    },
    {
        "line": 8,
        "fullcodeline": "{\":method\", \"GET\"}, {\":path\", \"/test/long/url\"}, {\":scheme\", \"http\"}, {\":authority\", \"host\"}};"
    },
    {
        "line": 11,
        "fullcodeline": "big_headers.addCopy(std::to_string(i), std::string(0, 'a'));"
    }
]