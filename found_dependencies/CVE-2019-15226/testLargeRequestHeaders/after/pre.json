[
    {
        "line": 6,
        "fullcodeline": "config_helper_.addConfigModifier("
    },
    {
        "line": 9,
        "fullcodeline": "max_request_headers_kb_ = max_size;"
    },
    {
        "line": 11,
        "fullcodeline": "Http::TestHeaderMapImpl big_headers{"
    },
    {
        "line": 14,
        "fullcodeline": "big_headers.addCopy(\"big\", std::string(size * 1024, 'a'));"
    },
    {
        "line": 15,
        "fullcodeline": "initialize();"
    },
    {
        "line": 17,
        "fullcodeline": "codec_client_ = makeHttpConnection(lookupPort(\"http\"));"
    },
    {
        "line": 18,
        "fullcodeline": "if (size >= max_size) {"
    },
    {
        "line": 12,
        "fullcodeline": "{\":method\", \"GET\"}, {\":path\", \"/test/long/url\"}, {\":scheme\", \"http\"}, {\":authority\", \"host\"}};"
    },
    {
        "line": 20,
        "fullcodeline": "auto encoder_decoder = codec_client_->startRequest(big_headers);"
    },
    {
        "line": 21,
        "fullcodeline": "auto response = std::move(encoder_decoder.second);"
    },
    {
        "line": 23,
        "fullcodeline": "if (downstream_protocol_ == Http::CodecClient::Type::HTTP1) {"
    },
    {
        "line": 32,
        "fullcodeline": "auto response = sendRequestAndWaitForResponse(big_headers, 0, default_response_headers_, 0);"
    },
    {
        "line": 24,
        "fullcodeline": "codec_client_->waitForDisconnect();"
    },
    {
        "line": 25,
        "fullcodeline": "EXPECT_TRUE(response->complete());"
    },
    {
        "line": 26,
        "fullcodeline": "EXPECT_EQ(\"431\", response->headers().Status()->value().getStringView());"
    },
    {
        "line": 33,
        "fullcodeline": "EXPECT_TRUE(response->complete());"
    },
    {
        "line": 34,
        "fullcodeline": "EXPECT_EQ(\"200\", response->headers().Status()->value().getStringView());"
    }
]