[
    {
        "line": 8,
        "fullcodeline": "GrpcCommon::Utility::extractCommonAccessLogProperties(*log_entry.mutable_common_properties(),"
    },
    {
        "line": 27,
        "fullcodeline": "auto* request_properties = log_entry.mutable_request();"
    },
    {
        "line": 57,
        "fullcodeline": "request_properties->set_request_headers_bytes(request_headers.byteSize());"
    },
    {
        "line": 58,
        "fullcodeline": "request_properties->set_request_body_bytes(stream_info.bytesReceived());"
    },
    {
        "line": 78,
        "fullcodeline": "auto* response_properties = log_entry.mutable_response();"
    },
    {
        "line": 85,
        "fullcodeline": "response_properties->set_response_headers_bytes(response_headers.byteSize());"
    },
    {
        "line": 86,
        "fullcodeline": "response_properties->set_response_body_bytes(stream_info.bytesSent());"
    },
    {
        "line": 109,
        "fullcodeline": "tls_slot_->getTyped<ThreadLocalLogger>().logger_->log(std::move(log_entry));"
    },
    {
        "line": 11,
        "fullcodeline": "if (stream_info.protocol()) {"
    },
    {
        "line": 28,
        "fullcodeline": "if (request_headers.Scheme() != nullptr) {"
    },
    {
        "line": 31,
        "fullcodeline": "if (request_headers.Host() != nullptr) {"
    },
    {
        "line": 34,
        "fullcodeline": "if (request_headers.Path() != nullptr) {"
    },
    {
        "line": 37,
        "fullcodeline": "if (request_headers.UserAgent() != nullptr) {"
    },
    {
        "line": 41,
        "fullcodeline": "if (request_headers.Referer() != nullptr) {"
    },
    {
        "line": 45,
        "fullcodeline": "if (request_headers.ForwardedFor() != nullptr) {"
    },
    {
        "line": 49,
        "fullcodeline": "if (request_headers.RequestId() != nullptr) {"
    },
    {
        "line": 53,
        "fullcodeline": "if (request_headers.EnvoyOriginalPath() != nullptr) {"
    },
    {
        "line": 59,
        "fullcodeline": "if (request_headers.Method() != nullptr) {"
    },
    {
        "line": 66,
        "fullcodeline": "if (!request_headers_to_log_.empty()) {"
    },
    {
        "line": 79,
        "fullcodeline": "if (stream_info.responseCode()) {"
    },
    {
        "line": 82,
        "fullcodeline": "if (stream_info.responseCodeDetails()) {"
    },
    {
        "line": 87,
        "fullcodeline": "if (!response_headers_to_log_.empty()) {"
    },
    {
        "line": 98,
        "fullcodeline": "if (!response_trailers_to_log_.empty()) {"
    },
    {
        "line": 29,
        "fullcodeline": "request_properties->set_scheme(std::string(request_headers.Scheme()->value().getStringView()));"
    },
    {
        "line": 32,
        "fullcodeline": "request_properties->set_authority(std::string(request_headers.Host()->value().getStringView()));"
    },
    {
        "line": 35,
        "fullcodeline": "request_properties->set_path(std::string(request_headers.Path()->value().getStringView()));"
    },
    {
        "line": 38,
        "fullcodeline": "request_properties->set_user_agent("
    },
    {
        "line": 42,
        "fullcodeline": "request_properties->set_referer("
    },
    {
        "line": 46,
        "fullcodeline": "request_properties->set_forwarded_for("
    },
    {
        "line": 50,
        "fullcodeline": "request_properties->set_request_id("
    },
    {
        "line": 54,
        "fullcodeline": "request_properties->set_original_path("
    },
    {
        "line": 60,
        "fullcodeline": "envoy::api::v2::core::RequestMethod method ="
    },
    {
        "line": 62,
        "fullcodeline": "envoy::api::v2::core::RequestMethod_Parse("
    },
    {
        "line": 64,
        "fullcodeline": "request_properties->set_request_method(method);"
    },
    {
        "line": 67,
        "fullcodeline": "auto* logged_headers = request_properties->mutable_request_headers();"
    },
    {
        "line": 80,
        "fullcodeline": "response_properties->mutable_response_code()->set_value(stream_info.responseCode().value());"
    },
    {
        "line": 83,
        "fullcodeline": "response_properties->set_response_code_details(stream_info.responseCodeDetails().value());"
    },
    {
        "line": 88,
        "fullcodeline": "auto* logged_headers = response_properties->mutable_response_headers();"
    },
    {
        "line": 99,
        "fullcodeline": "auto* logged_headers = response_properties->mutable_response_trailers();"
    },
    {
        "line": 12,
        "fullcodeline": "switch (stream_info.protocol().value()) {"
    },
    {
        "line": 39,
        "fullcodeline": "std::string(request_headers.UserAgent()->value().getStringView()));"
    },
    {
        "line": 43,
        "fullcodeline": "std::string(request_headers.Referer()->value().getStringView()));"
    },
    {
        "line": 47,
        "fullcodeline": "std::string(request_headers.ForwardedFor()->value().getStringView()));"
    },
    {
        "line": 51,
        "fullcodeline": "std::string(request_headers.RequestId()->value().getStringView()));"
    },
    {
        "line": 55,
        "fullcodeline": "std::string(request_headers.EnvoyOriginalPath()->value().getStringView()));"
    },
    {
        "line": 63,
        "fullcodeline": "std::string(request_headers.Method()->value().getStringView()), &method);"
    },
    {
        "line": 14,
        "fullcodeline": "log_entry.set_protocol_version(envoy::data::accesslog::v2::HTTPAccessLogEntry::HTTP10);"
    },
    {
        "line": 17,
        "fullcodeline": "log_entry.set_protocol_version(envoy::data::accesslog::v2::HTTPAccessLogEntry::HTTP11);"
    },
    {
        "line": 20,
        "fullcodeline": "log_entry.set_protocol_version(envoy::data::accesslog::v2::HTTPAccessLogEntry::HTTP2);"
    },
    {
        "line": 70,
        "fullcodeline": "const Http::HeaderEntry* entry = request_headers.get(header);"
    },
    {
        "line": 91,
        "fullcodeline": "const Http::HeaderEntry* entry = response_headers.get(header);"
    },
    {
        "line": 102,
        "fullcodeline": "const Http::HeaderEntry* entry = response_trailers.get(header);"
    },
    {
        "line": 71,
        "fullcodeline": "if (entry != nullptr) {"
    },
    {
        "line": 92,
        "fullcodeline": "if (entry != nullptr) {"
    },
    {
        "line": 103,
        "fullcodeline": "if (entry != nullptr) {"
    },
    {
        "line": 72,
        "fullcodeline": "logged_headers->insert({header.get(), std::string(entry->value().getStringView())});"
    },
    {
        "line": 93,
        "fullcodeline": "logged_headers->insert({header.get(), std::string(entry->value().getStringView())});"
    },
    {
        "line": 104,
        "fullcodeline": "logged_headers->insert({header.get(), std::string(entry->value().getStringView())});"
    }
]