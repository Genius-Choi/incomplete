[
    {
        "line": 2,
        "fullcodeline": "auto* entry = getExistingInline(key.get());"
    },
    {
        "line": 10,
        "fullcodeline": "new_key.setCopy(key.get().c_str(), key.get().size());"
    },
    {
        "line": 12,
        "fullcodeline": "new_value.setInteger(value);"
    },
    {
        "line": 3,
        "fullcodeline": "if (entry != nullptr) {"
    },
    {
        "line": 13,
        "fullcodeline": "insertByKey(std::move(new_key), std::move(new_value));"
    },
    {
        "line": 14,
        "fullcodeline": "ASSERT(new_key.empty());   // NOLINT(bugprone-use-after-move)"
    },
    {
        "line": 15,
        "fullcodeline": "ASSERT(new_value.empty()); // NOLINT(bugprone-use-after-move)"
    },
    {
        "line": 4,
        "fullcodeline": "char buf[32];"
    },
    {
        "line": 5,
        "fullcodeline": "StringUtil::itoa(buf, sizeof(buf), value);"
    },
    {
        "line": 6,
        "fullcodeline": "appendToHeader(entry->value(), buf);"
    }
]