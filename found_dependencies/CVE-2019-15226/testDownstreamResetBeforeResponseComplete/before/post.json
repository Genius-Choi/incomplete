[
    {
        "line": 2,
        "fullcodeline": "initialize();"
    },
    {
        "line": 3,
        "fullcodeline": "codec_client_ = makeHttpConnection(lookupPort(\"http\"));"
    },
    {
        "line": 5,
        "fullcodeline": "auto encoder_decoder ="
    },
    {
        "line": 12,
        "fullcodeline": "request_encoder_ = &encoder_decoder.first;"
    },
    {
        "line": 13,
        "fullcodeline": "auto response = std::move(encoder_decoder.second);"
    },
    {
        "line": 14,
        "fullcodeline": "codec_client_->sendData(*request_encoder_, 0, true);"
    },
    {
        "line": 15,
        "fullcodeline": "waitForNextUpstreamRequest();"
    },
    {
        "line": 17,
        "fullcodeline": "EXPECT_EQ(upstream_request_->headers().get(Http::Headers::get().Cookie)->value(), \"a=b; c=d\");"
    },
    {
        "line": 19,
        "fullcodeline": "upstream_request_->encodeHeaders(default_response_headers_, false);"
    },
    {
        "line": 20,
        "fullcodeline": "upstream_request_->encodeData(512, false);"
    },
    {
        "line": 22,
        "fullcodeline": "response->waitForBodyData(512);"
    },
    {
        "line": 23,
        "fullcodeline": "codec_client_->sendReset(*request_encoder_);"
    },
    {
        "line": 33,
        "fullcodeline": "codec_client_->close();"
    },
    {
        "line": 35,
        "fullcodeline": "EXPECT_TRUE(upstream_request_->complete());"
    },
    {
        "line": 36,
        "fullcodeline": "EXPECT_EQ(0U, upstream_request_->bodyLength());"
    },
    {
        "line": 38,
        "fullcodeline": "EXPECT_FALSE(response->complete());"
    },
    {
        "line": 39,
        "fullcodeline": "EXPECT_EQ(\"200\", response->headers().Status()->value().getStringView());"
    },
    {
        "line": 40,
        "fullcodeline": "EXPECT_EQ(512U, response->body().size());"
    },
    {
        "line": 6,
        "fullcodeline": "codec_client_->startRequest(Http::TestHeaderMapImpl{{\":method\", \"GET\"},"
    },
    {
        "line": 25,
        "fullcodeline": "if (upstreamProtocol() == FakeHttpConnection::Type::HTTP1) {"
    },
    {
        "line": 26,
        "fullcodeline": "ASSERT_TRUE(fake_upstream_connection_->waitForDisconnect());"
    },
    {
        "line": 28,
        "fullcodeline": "ASSERT_TRUE(upstream_request_->waitForReset());"
    },
    {
        "line": 29,
        "fullcodeline": "ASSERT_TRUE(fake_upstream_connection_->close());"
    },
    {
        "line": 30,
        "fullcodeline": "ASSERT_TRUE(fake_upstream_connection_->waitForDisconnect());"
    },
    {
        "line": 7,
        "fullcodeline": "{\":path\", \"/test/long/url\"},"
    },
    {
        "line": 8,
        "fullcodeline": "{\":scheme\", \"http\"},"
    },
    {
        "line": 9,
        "fullcodeline": "{\":authority\", \"host\"},"
    },
    {
        "line": 10,
        "fullcodeline": "{\"cookie\", \"a=b\"},"
    },
    {
        "line": 11,
        "fullcodeline": "{\"cookie\", \"c=d\"}});"
    }
]