[
    {
        "line": 2,
        "fullcodeline": "Http::TestHeaderMapImpl request_trailers{{\"request1\", \"trailer1\"}, {\"request2\", \"trailer2\"}};"
    },
    {
        "line": 3,
        "fullcodeline": "Http::TestHeaderMapImpl response_trailers{{\"response1\", \"trailer1\"}, {\"response2\", \"trailer2\"}};"
    },
    {
        "line": 5,
        "fullcodeline": "initialize();"
    },
    {
        "line": 6,
        "fullcodeline": "codec_client_ = makeHttpConnection(lookupPort(\"http\"));"
    },
    {
        "line": 7,
        "fullcodeline": "auto encoder_decoder ="
    },
    {
        "line": 12,
        "fullcodeline": "request_encoder_ = &encoder_decoder.first;"
    },
    {
        "line": 13,
        "fullcodeline": "auto response = std::move(encoder_decoder.second);"
    },
    {
        "line": 14,
        "fullcodeline": "codec_client_->sendData(*request_encoder_, request_size, false);"
    },
    {
        "line": 15,
        "fullcodeline": "codec_client_->sendTrailers(*request_encoder_, request_trailers);"
    },
    {
        "line": 16,
        "fullcodeline": "waitForNextUpstreamRequest();"
    },
    {
        "line": 17,
        "fullcodeline": "upstream_request_->encodeHeaders(default_response_headers_, false);"
    },
    {
        "line": 18,
        "fullcodeline": "upstream_request_->encodeData(response_size, false);"
    },
    {
        "line": 19,
        "fullcodeline": "upstream_request_->encodeTrailers(response_trailers);"
    },
    {
        "line": 20,
        "fullcodeline": "response->waitForEndStream();"
    },
    {
        "line": 22,
        "fullcodeline": "EXPECT_TRUE(upstream_request_->complete());"
    },
    {
        "line": 23,
        "fullcodeline": "EXPECT_EQ(request_size, upstream_request_->bodyLength());"
    },
    {
        "line": 28,
        "fullcodeline": "EXPECT_TRUE(response->complete());"
    },
    {
        "line": 29,
        "fullcodeline": "EXPECT_EQ(\"200\", response->headers().Status()->value().getStringView());"
    },
    {
        "line": 30,
        "fullcodeline": "EXPECT_EQ(response_size, response->body().size());"
    },
    {
        "line": 8,
        "fullcodeline": "codec_client_->startRequest(Http::TestHeaderMapImpl{{\":method\", \"POST\"},"
    },
    {
        "line": 24,
        "fullcodeline": "if (fake_upstreams_[0]->httpType() == FakeHttpConnection::Type::HTTP2) {"
    },
    {
        "line": 31,
        "fullcodeline": "if (fake_upstreams_[0]->httpType() == FakeHttpConnection::Type::HTTP2) {"
    },
    {
        "line": 25,
        "fullcodeline": "EXPECT_THAT(*upstream_request_->trailers(), HeaderMapEqualRef(&request_trailers));"
    },
    {
        "line": 32,
        "fullcodeline": "EXPECT_THAT(*response->trailers(), HeaderMapEqualRef(&response_trailers));"
    },
    {
        "line": 9,
        "fullcodeline": "{\":path\", \"/test/long/url\"},"
    },
    {
        "line": 10,
        "fullcodeline": "{\":scheme\", \"http\"},"
    },
    {
        "line": 11,
        "fullcodeline": "{\":authority\", \"host\"}});"
    }
]