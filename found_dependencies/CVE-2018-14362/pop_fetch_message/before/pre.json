[
    {
        "line": 3,
        "fullcodeline": "void *uidl = NULL;"
    },
    {
        "line": 4,
        "fullcodeline": "char buf[LONG_STRING];"
    },
    {
        "line": 5,
        "fullcodeline": "char path[PATH_MAX];"
    },
    {
        "line": 7,
        "fullcodeline": "struct PopData *pop_data = (struct PopData *) ctx->data;"
    },
    {
        "line": 8,
        "fullcodeline": "struct PopCache *cache = NULL;"
    },
    {
        "line": 9,
        "fullcodeline": "struct Header *h = ctx->hdrs[msgno];"
    },
    {
        "line": 10,
        "fullcodeline": "unsigned short bcache = 1;"
    },
    {
        "line": 13,
        "fullcodeline": "msg->fp = mutt_bcache_get(pop_data->bcache, h->data);"
    },
    {
        "line": 21,
        "fullcodeline": "cache = &pop_data->cache[h->index % POP_CACHE_LEN];"
    },
    {
        "line": 111,
        "fullcodeline": "rewind(msg->fp);"
    },
    {
        "line": 112,
        "fullcodeline": "uidl = h->data;"
    },
    {
        "line": 117,
        "fullcodeline": "mutt_label_hash_remove(ctx, h);"
    },
    {
        "line": 119,
        "fullcodeline": "h->env = mutt_rfc822_read_header(msg->fp, h, 0, 0);"
    },
    {
        "line": 122,
        "fullcodeline": "mutt_label_hash_add(ctx, h);"
    },
    {
        "line": 126,
        "fullcodeline": "fgets(buf, sizeof(buf), msg->fp);"
    },
    {
        "line": 133,
        "fullcodeline": "h->content->length = ftello(msg->fp) - h->content->offset;"
    },
    {
        "line": 115,
        "fullcodeline": "if (ctx->subj_hash && h->env->real_subj)"
    },
    {
        "line": 120,
        "fullcodeline": "if (ctx->subj_hash && h->env->real_subj)"
    },
    {
        "line": 136,
        "fullcodeline": "if (!WithCrypto)"
    },
    {
        "line": 56,
        "fullcodeline": "mutt_progress_init(&progressbar, _(\"Fetching message...\"), MUTT_PROGRESS_SIZE,"
    },
    {
        "line": 60,
        "fullcodeline": "msg->fp = mutt_bcache_put(pop_data->bcache, h->data);"
    },
    {
        "line": 74,
        "fullcodeline": "snprintf(buf, sizeof(buf), \"RETR %d\\r\\n\", h->refno);"
    },
    {
        "line": 76,
        "fullcodeline": "const int ret = pop_fetch_data(pop_data, buf, &progressbar, fetch_message, msg->fp);"
    },
    {
        "line": 80,
        "fullcodeline": "mutt_file_fclose(&msg->fp);"
    },
    {
        "line": 105,
        "fullcodeline": "mutt_bcache_commit(pop_data->bcache, h->data);"
    },
    {
        "line": 116,
        "fullcodeline": "mutt_hash_delete(ctx->subj_hash, h->env->real_subj, h);"
    },
    {
        "line": 121,
        "fullcodeline": "mutt_hash_insert(ctx->subj_hash, h->env->real_subj, h);"
    },
    {
        "line": 127,
        "fullcodeline": "while (!feof(msg->fp))"
    },
    {
        "line": 130,
        "fullcodeline": "fgets(buf, sizeof(buf), msg->fp);"
    },
    {
        "line": 25,
        "fullcodeline": "if (cache->index == h->index)"
    },
    {
        "line": 49,
        "fullcodeline": "if (h->refno < 0)"
    },
    {
        "line": 57,
        "fullcodeline": "NetInc, h->content->length + h->content->offset - 1);"
    },
    {
        "line": 61,
        "fullcodeline": "if (!msg->fp)"
    },
    {
        "line": 77,
        "fullcodeline": "if (ret == 0)"
    },
    {
        "line": 88,
        "fullcodeline": "if (ret == -2)"
    },
    {
        "line": 137,
        "fullcodeline": "h->security = crypt_query(h->content);"
    },
    {
        "line": 45,
        "fullcodeline": "if (pop_reconnect(ctx) < 0)"
    },
    {
        "line": 64,
        "fullcodeline": "bcache = 0;"
    },
    {
        "line": 65,
        "fullcodeline": "mutt_mktemp(path, sizeof(path));"
    },
    {
        "line": 66,
        "fullcodeline": "msg->fp = mutt_file_fopen(path, \"w+\");"
    },
    {
        "line": 86,
        "fullcodeline": "unlink(path);"
    },
    {
        "line": 94,
        "fullcodeline": "if (ret == -3)"
    },
    {
        "line": 109,
        "fullcodeline": "cache->path = mutt_str_strdup(path);"
    },
    {
        "line": 28,
        "fullcodeline": "msg->fp = fopen(cache->path, \"r\");"
    },
    {
        "line": 33,
        "fullcodeline": "return -1;"
    },
    {
        "line": 38,
        "fullcodeline": "unlink(cache->path);"
    },
    {
        "line": 46,
        "fullcodeline": "return -1;"
    },
    {
        "line": 52,
        "fullcodeline": "_(\"The message index is incorrect. Try reopening the mailbox.\"));"
    },
    {
        "line": 53,
        "fullcodeline": "return -1;"
    },
    {
        "line": 67,
        "fullcodeline": "if (!msg->fp)"
    },
    {
        "line": 91,
        "fullcodeline": "return -1;"
    },
    {
        "line": 96,
        "fullcodeline": "mutt_error(_(\"Can't write message to temporary file!\"));"
    },
    {
        "line": 97,
        "fullcodeline": "return -1;"
    },
    {
        "line": 70,
        "fullcodeline": "return -1;"
    }
]