[
    {
        "line": 10,
        "fullcodeline": "int xpos = 0;"
    },
    {
        "line": 11,
        "fullcodeline": "int ypos = 0;"
    },
    {
        "line": 55,
        "fullcodeline": "XCALLOC(dest, width * height * channels);"
    },
    {
        "line": 56,
        "fullcodeline": "XMALLOC (row_buf, rowbytes);"
    },
    {
        "line": 57,
        "fullcodeline": "rowstride = width * channels;"
    },
    {
        "line": 59,
        "fullcodeline": "ypos = height - 1;            /* Bitmaps begin in the lower left corner */"
    },
    {
        "line": 278,
        "fullcodeline": "free (row_buf);"
    },
    {
        "line": 279,
        "fullcodeline": "free(dest);"
    },
    {
        "line": 20,
        "fullcodeline": "if (!(compression == BI_RGB ||"
    },
    {
        "line": 31,
        "fullcodeline": "if (bpp >= 16) {              /* color image */"
    },
    {
        "line": 259,
        "fullcodeline": "if (bpp <= 8) {"
    },
    {
        "line": 26,
        "fullcodeline": "LOG(\"Unrecognized or invalid BMP compression format.\\n\");"
    },
    {
        "line": 27,
        "fullcodeline": "at_exception_fatal(exp, \"Unrecognized or invalid BMP compression format.\");"
    },
    {
        "line": 32,
        "fullcodeline": "XMALLOC(image, width * height * 3 * sizeof(unsigned char));"
    },
    {
        "line": 262,
        "fullcodeline": "temp2 = temp = image;"
    },
    {
        "line": 263,
        "fullcodeline": "XMALLOC (image, width * height * 3 * sizeof (unsigned char)); //???"
    },
    {
        "line": 264,
        "fullcodeline": "temp3 = image;"
    },
    {
        "line": 275,
        "fullcodeline": "free(temp);"
    },
    {
        "line": 24,
        "fullcodeline": "(bpp == 32 && compression == BI_BITFIELDS)))"
    },
    {
        "line": 33,
        "fullcodeline": "if (masks[3].mask != 0)"
    },
    {
        "line": 265,
        "fullcodeline": "for (ypos = 0; ypos < height; ypos++) {"
    },
    {
        "line": 23,
        "fullcodeline": "(bpp == 16 && compression == BI_BITFIELDS) ||"
    },
    {
        "line": 35,
        "fullcodeline": "channels = 4;"
    },
    {
        "line": 65,
        "fullcodeline": "while (ReadOK (fd, row_buf, rowbytes))"
    },
    {
        "line": 88,
        "fullcodeline": "while (ReadOK (fd, row_buf, rowbytes))"
    },
    {
        "line": 107,
        "fullcodeline": "while (ReadOK (fd, row_buf, rowbytes))"
    },
    {
        "line": 133,
        "fullcodeline": "if (compression == 0) {"
    },
    {
        "line": 22,
        "fullcodeline": "(bpp == 4 && compression == BI_RLE4) ||"
    },
    {
        "line": 39,
        "fullcodeline": "channels = 3;"
    },
    {
        "line": 44,
        "fullcodeline": "XMALLOC(image, width * height * 1 * sizeof(unsigned char));"
    },
    {
        "line": 45,
        "fullcodeline": "channels = 1;"
    },
    {
        "line": 67,
        "fullcodeline": "temp = image + (ypos * rowstride);"
    },
    {
        "line": 81,
        "fullcodeline": "--ypos; /* next line */"
    },
    {
        "line": 90,
        "fullcodeline": "temp = image + (ypos * rowstride);"
    },
    {
        "line": 100,
        "fullcodeline": "--ypos; /* next line */"
    },
    {
        "line": 109,
        "fullcodeline": "temp = image + (ypos * rowstride);"
    },
    {
        "line": 124,
        "fullcodeline": "--ypos; /* next line */"
    },
    {
        "line": 266,
        "fullcodeline": "for (xpos = 0; xpos < width; xpos++) {"
    },
    {
        "line": 21,
        "fullcodeline": "(bpp == 8 && compression == BI_RLE8) ||"
    },
    {
        "line": 48,
        "fullcodeline": "XMALLOC(image, width * height * 1 * sizeof(unsigned char));"
    },
    {
        "line": 49,
        "fullcodeline": "channels = 1;"
    },
    {
        "line": 68,
        "fullcodeline": "for (xpos = 0; xpos < width; ++xpos) {"
    },
    {
        "line": 78,
        "fullcodeline": "if (ypos == 0)"
    },
    {
        "line": 91,
        "fullcodeline": "for (xpos = 0; xpos < width; ++xpos) {"
    },
    {
        "line": 97,
        "fullcodeline": "if (ypos == 0)"
    },
    {
        "line": 110,
        "fullcodeline": "for (xpos = 0; xpos < width; ++xpos)"
    },
    {
        "line": 121,
        "fullcodeline": "if (ypos == 0)"
    },
    {
        "line": 134,
        "fullcodeline": "while (ReadOK(fd, &v, 1)) {"
    },
    {
        "line": 69,
        "fullcodeline": "px32 = ToL(&row_buf[xpos * 4]);"
    },
    {
        "line": 70,
        "fullcodeline": "unsigned char red = *(temp++) = ((px32 & masks[0].mask) >> masks[0].shiftin) * 255.0 / masks[0].max_value + 0.5;"
    },
    {
        "line": 71,
        "fullcodeline": "unsigned char green = *(temp++) = ((px32 & masks[1].mask) >> masks[1].shiftin) * 255.0 / masks[1].max_value + 0.5;"
    },
    {
        "line": 72,
        "fullcodeline": "unsigned char blue = *(temp++) = ((px32 & masks[2].mask) >> masks[2].shiftin) * 255.0 / masks[2].max_value + 0.5;"
    },
    {
        "line": 92,
        "fullcodeline": "*(temp++) = row_buf[xpos * 3 + 2];"
    },
    {
        "line": 93,
        "fullcodeline": "*(temp++) = row_buf[xpos * 3 + 1];"
    },
    {
        "line": 94,
        "fullcodeline": "*(temp++) = row_buf[xpos * 3];"
    },
    {
        "line": 112,
        "fullcodeline": "rgb = ToS(&row_buf[xpos * 2]);"
    },
    {
        "line": 113,
        "fullcodeline": "*(temp++) = ((rgb & masks[0].mask) >> masks[0].shiftin) * 255.0 / masks[0].max_value + 0.5;"
    },
    {
        "line": 114,
        "fullcodeline": "*(temp++) = ((rgb & masks[1].mask) >> masks[1].shiftin) * 255.0 / masks[1].max_value + 0.5;"
    },
    {
        "line": 115,
        "fullcodeline": "*(temp++) = ((rgb & masks[2].mask) >> masks[2].shiftin) * 255.0 / masks[2].max_value + 0.5;"
    },
    {
        "line": 154,
        "fullcodeline": "while (ypos >= 0 && xpos <= width) {"
    },
    {
        "line": 269,
        "fullcodeline": "if (!Grey) {"
    },
    {
        "line": 135,
        "fullcodeline": "for (i = 1; (i <= (8 / bpp)) && (xpos < width); i++, xpos++) {"
    },
    {
        "line": 142,
        "fullcodeline": "if (xpos == width) {"
    },
    {
        "line": 148,
        "fullcodeline": "if (ypos < 0)"
    },
    {
        "line": 267,
        "fullcodeline": "index = *temp2++;"
    },
    {
        "line": 268,
        "fullcodeline": "*temp3++ = cmap[index][0];"
    },
    {
        "line": 136,
        "fullcodeline": "temp = image + (ypos * rowstride) + (xpos * channels);"
    },
    {
        "line": 137,
        "fullcodeline": "*temp = (v & (((1 << bpp) - 1) << (8 - (i*bpp)))) >> (8 - (i*bpp));"
    },
    {
        "line": 143,
        "fullcodeline": "ReadOK (fd, row_buf, rowbytes - 1 - (width * bpp - 1) / 8);"
    },
    {
        "line": 144,
        "fullcodeline": "ypos--;"
    },
    {
        "line": 145,
        "fullcodeline": "xpos = 0;"
    },
    {
        "line": 155,
        "fullcodeline": "if (!ReadOK(fd, row_buf, 2))"
    },
    {
        "line": 161,
        "fullcodeline": "if ((unsigned char) row_buf[0] != 0)"
    },
    {
        "line": 186,
        "fullcodeline": "if ((row_buf[0] == 0) && (row_buf[1] > 2))"
    },
    {
        "line": 227,
        "fullcodeline": "if (((unsigned char) row_buf[0] == 0) && ((unsigned char) row_buf[1]==0))"
    },
    {
        "line": 233,
        "fullcodeline": "if (((unsigned char)row_buf[0] == 0) && ((unsigned char)row_buf[1] == 1))"
    },
    {
        "line": 238,
        "fullcodeline": "if (((unsigned char)row_buf[0] == 0) && ((unsigned char)row_buf[1] == 2))"
    },
    {
        "line": 157,
        "fullcodeline": "LOG(\"The bitmap ends unexpectedly.\");"
    },
    {
        "line": 189,
        "fullcodeline": "n = row_buf[1];"
    },
    {
        "line": 190,
        "fullcodeline": "total_bytes_read = 0;"
    },
    {
        "line": 230,
        "fullcodeline": "ypos--;"
    },
    {
        "line": 231,
        "fullcodeline": "xpos = 0;"
    },
    {
        "line": 246,
        "fullcodeline": "xpos += (unsigned char) row_buf[0];"
    },
    {
        "line": 247,
        "fullcodeline": "ypos -= (unsigned char) row_buf[1];"
    },
    {
        "line": 270,
        "fullcodeline": "*temp3++ = cmap[index][1];"
    },
    {
        "line": 271,
        "fullcodeline": "*temp3++ = cmap[index][2];"
    },
    {
        "line": 168,
        "fullcodeline": "for (j = 0; ((unsigned char) j < (unsigned char) row_buf[0]) && (xpos < width);)"
    },
    {
        "line": 192,
        "fullcodeline": "for (j = 0; j < n; j += (8 / bpp))"
    },
    {
        "line": 224,
        "fullcodeline": "if (total_bytes_read % 2)"
    },
    {
        "line": 241,
        "fullcodeline": "if (!ReadOK(fd, row_buf, 2))"
    },
    {
        "line": 201,
        "fullcodeline": "total_bytes_read++;"
    },
    {
        "line": 204,
        "fullcodeline": "i_max = 8 / bpp;"
    },
    {
        "line": 210,
        "fullcodeline": "i = 1;"
    },
    {
        "line": 225,
        "fullcodeline": "fread(&v, 1, 1, fd); //ReadOk"
    },
    {
        "line": 243,
        "fullcodeline": "LOG(\"The bitmap ends unexpectedly.\");"
    },
    {
        "line": 174,
        "fullcodeline": "((i <= (8 / bpp)) &&"
    },
    {
        "line": 177,
        "fullcodeline": "i++, xpos++, j++)"
    },
    {
        "line": 195,
        "fullcodeline": "if (!ReadOK(fd, &v, 1))"
    },
    {
        "line": 205,
        "fullcodeline": "if (n - j < i_max)"
    },
    {
        "line": 211,
        "fullcodeline": "while ((i <= i_max) && (xpos < width))"
    },
    {
        "line": 173,
        "fullcodeline": "for (i = 1;"
    },
    {
        "line": 176,
        "fullcodeline": "((unsigned char) j < (unsigned char) row_buf[0]));"
    },
    {
        "line": 179,
        "fullcodeline": "temp = dest + (ypos * rowstride) + (xpos * channels);"
    },
    {
        "line": 180,
        "fullcodeline": "*temp = (unsigned char) ((row_buf[1] & (((1<<bpp)-1) << (8 - (i * bpp)))) >> (8 - (i * bpp)));"
    },
    {
        "line": 197,
        "fullcodeline": "LOG(\"The bitmap ends unexpectedly.\");"
    },
    {
        "line": 207,
        "fullcodeline": "i_max = n - j;"
    },
    {
        "line": 213,
        "fullcodeline": "temp ="
    },
    {
        "line": 215,
        "fullcodeline": "*temp = (v >> (8 - (i*bpp))) & ((1 << bpp) - 1);"
    },
    {
        "line": 218,
        "fullcodeline": "i++;"
    },
    {
        "line": 219,
        "fullcodeline": "xpos++;"
    },
    {
        "line": 175,
        "fullcodeline": "(xpos < width) &&"
    },
    {
        "line": 214,
        "fullcodeline": "dest + (ypos * rowstride) + (xpos * channels);"
    }
]