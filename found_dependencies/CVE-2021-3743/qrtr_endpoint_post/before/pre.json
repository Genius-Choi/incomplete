[
    {
        "line": 3,
        "fullcodeline": "struct qrtr_node *node = ep->node;"
    },
    {
        "line": 16,
        "fullcodeline": "skb = __netdev_alloc_skb(NULL, len, GFP_ATOMIC | __GFP_NOWARN);"
    },
    {
        "line": 20,
        "fullcodeline": "cb = (struct qrtr_cb *)skb->cb;"
    },
    {
        "line": 23,
        "fullcodeline": "ver = *(u8*)data;"
    },
    {
        "line": 73,
        "fullcodeline": "skb_put_data(skb, data + hdrlen, size);"
    },
    {
        "line": 75,
        "fullcodeline": "qrtr_node_assign(node, cb->src_node);"
    },
    {
        "line": 13,
        "fullcodeline": "if (len == 0 || len & 3)"
    },
    {
        "line": 17,
        "fullcodeline": "if (!skb)"
    },
    {
        "line": 77,
        "fullcodeline": "if (cb->type == QRTR_TYPE_NEW_SERVER) {"
    },
    {
        "line": 103,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 29,
        "fullcodeline": "v1 = data;"
    },
    {
        "line": 30,
        "fullcodeline": "hdrlen = sizeof(*v1);"
    },
    {
        "line": 32,
        "fullcodeline": "cb->type = le32_to_cpu(v1->type);"
    },
    {
        "line": 33,
        "fullcodeline": "cb->src_node = le32_to_cpu(v1->src_node_id);"
    },
    {
        "line": 37,
        "fullcodeline": "cb->dst_port = le32_to_cpu(v1->dst_port_id);"
    },
    {
        "line": 39,
        "fullcodeline": "size = le32_to_cpu(v1->size);"
    },
    {
        "line": 44,
        "fullcodeline": "v2 = data;"
    },
    {
        "line": 45,
        "fullcodeline": "hdrlen = sizeof(*v2) + v2->optlen;"
    },
    {
        "line": 47,
        "fullcodeline": "cb->type = v2->type;"
    },
    {
        "line": 49,
        "fullcodeline": "cb->src_node = le16_to_cpu(v2->src_node_id);"
    },
    {
        "line": 50,
        "fullcodeline": "cb->src_port = le16_to_cpu(v2->src_port_id);"
    },
    {
        "line": 52,
        "fullcodeline": "cb->dst_port = le16_to_cpu(v2->dst_port_id);"
    },
    {
        "line": 59,
        "fullcodeline": "size = le32_to_cpu(v2->size);"
    },
    {
        "line": 69,
        "fullcodeline": "if (cb->dst_port != QRTR_PORT_CTRL && cb->type != QRTR_TYPE_DATA &&"
    },
    {
        "line": 70,
        "fullcodeline": "cb->type != QRTR_TYPE_RESUME_TX)"
    },
    {
        "line": 81,
        "fullcodeline": "qrtr_node_assign(node, le32_to_cpu(pkt->server.node));"
    },
    {
        "line": 14,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 18,
        "fullcodeline": "return -ENOMEM;"
    },
    {
        "line": 27,
        "fullcodeline": "if (len < sizeof(*v1))"
    },
    {
        "line": 34,
        "fullcodeline": "cb->src_port = le32_to_cpu(v1->src_port_id);"
    },
    {
        "line": 35,
        "fullcodeline": "cb->confirm_rx = !!v1->confirm_rx;"
    },
    {
        "line": 36,
        "fullcodeline": "cb->dst_node = le32_to_cpu(v1->dst_node_id);"
    },
    {
        "line": 42,
        "fullcodeline": "if (len < sizeof(*v2))"
    },
    {
        "line": 48,
        "fullcodeline": "cb->confirm_rx = !!(v2->flags & QRTR_FLAGS_CONFIRM_RX);"
    },
    {
        "line": 51,
        "fullcodeline": "cb->dst_node = le16_to_cpu(v2->dst_node_id);"
    },
    {
        "line": 56,
        "fullcodeline": "if (cb->dst_port == (u16)QRTR_PORT_CTRL)"
    },
    {
        "line": 66,
        "fullcodeline": "if (len != ALIGN(size, 4) + hdrlen)"
    },
    {
        "line": 87,
        "fullcodeline": "ipc = qrtr_port_lookup(cb->dst_port);"
    },
    {
        "line": 57,
        "fullcodeline": "cb->dst_port = QRTR_PORT_CTRL;"
    },
    {
        "line": 88,
        "fullcodeline": "if (!ipc)"
    },
    {
        "line": 91,
        "fullcodeline": "if (sock_queue_rcv_skb(&ipc->sk, skb)) {"
    }
]