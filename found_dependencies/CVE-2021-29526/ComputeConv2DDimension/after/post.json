[
    {
        "line": 5,
        "fullcodeline": "TF_REQUIRES(input.dims() == 4,"
    },
    {
        "line": 8,
        "fullcodeline": "TF_REQUIRES(filter.dims() == 4,"
    },
    {
        "line": 19,
        "fullcodeline": "const int64 in_depth_raw = GetTensorDim(input, params.data_format, 'C');"
    },
    {
        "line": 20,
        "fullcodeline": "const int64 patch_depth_raw = filter.dim_size(2);"
    },
    {
        "line": 21,
        "fullcodeline": "TF_REQUIRES(FastBoundsCheck(in_depth_raw, std::numeric_limits<int>::max()),"
    },
    {
        "line": 23,
        "fullcodeline": "TF_REQUIRES(FastBoundsCheck(patch_depth_raw, std::numeric_limits<int>::max()),"
    },
    {
        "line": 25,
        "fullcodeline": "const int in_depth = static_cast<int>(in_depth_raw);"
    },
    {
        "line": 26,
        "fullcodeline": "const int patch_depth = static_cast<int>(patch_depth_raw);"
    },
    {
        "line": 27,
        "fullcodeline": "TF_REQUIRES(patch_depth > 0,"
    },
    {
        "line": 30,
        "fullcodeline": "TF_REQUIRES(in_depth % patch_depth == 0,"
    },
    {
        "line": 36,
        "fullcodeline": "const int out_depth = static_cast<int>(filter.dim_size(3));"
    },
    {
        "line": 40,
        "fullcodeline": "const int64 input_rows_raw = GetTensorDim(input, params.data_format, 'H');"
    },
    {
        "line": 41,
        "fullcodeline": "TF_REQUIRES(FastBoundsCheck(input_rows_raw, std::numeric_limits<int>::max()),"
    },
    {
        "line": 43,
        "fullcodeline": "const int input_rows = static_cast<int>(input_rows_raw);"
    },
    {
        "line": 44,
        "fullcodeline": "const int filter_rows = static_cast<int>(filter.dim_size(0));"
    },
    {
        "line": 48,
        "fullcodeline": "const int64 input_cols_raw = GetTensorDim(input, params.data_format, 'W');"
    },
    {
        "line": 49,
        "fullcodeline": "TF_REQUIRES(FastBoundsCheck(input_cols_raw, std::numeric_limits<int>::max()),"
    },
    {
        "line": 51,
        "fullcodeline": "const int input_cols = static_cast<int>(input_cols_raw);"
    },
    {
        "line": 52,
        "fullcodeline": "const int filter_cols = static_cast<int>(filter.dim_size(1));"
    },
    {
        "line": 55,
        "fullcodeline": "const int64 batch_raw = GetTensorDim(input, params.data_format, 'N');"
    },
    {
        "line": 56,
        "fullcodeline": "TF_REQUIRES(FastBoundsCheck(batch_raw, std::numeric_limits<int>::max()),"
    },
    {
        "line": 58,
        "fullcodeline": "const int batch = static_cast<int>(batch_raw);"
    },
    {
        "line": 62,
        "fullcodeline": "const int stride_rows = GetTensorDim(params.strides, params.data_format, 'H');"
    },
    {
        "line": 63,
        "fullcodeline": "const int stride_cols = GetTensorDim(params.strides, params.data_format, 'W');"
    },
    {
        "line": 64,
        "fullcodeline": "const int dilation_rows ="
    },
    {
        "line": 66,
        "fullcodeline": "const int dilation_cols ="
    },
    {
        "line": 78,
        "fullcodeline": "int64 out_rows = 0, out_cols = 0;"
    },
    {
        "line": 79,
        "fullcodeline": "TF_RETURN_IF_ERROR(GetWindowedOutputSizeVerboseV2("
    },
    {
        "line": 82,
        "fullcodeline": "TF_RETURN_IF_ERROR(GetWindowedOutputSizeVerboseV2("
    },
    {
        "line": 86,
        "fullcodeline": "dimensions->batch = batch;"
    },
    {
        "line": 87,
        "fullcodeline": "dimensions->input_rows = input_rows;"
    },
    {
        "line": 88,
        "fullcodeline": "dimensions->input_cols = input_cols;"
    },
    {
        "line": 89,
        "fullcodeline": "dimensions->in_depth = in_depth;"
    },
    {
        "line": 90,
        "fullcodeline": "dimensions->filter_rows = filter_rows;"
    },
    {
        "line": 91,
        "fullcodeline": "dimensions->filter_cols = filter_cols;"
    },
    {
        "line": 92,
        "fullcodeline": "dimensions->patch_depth = patch_depth;"
    },
    {
        "line": 93,
        "fullcodeline": "dimensions->out_depth = out_depth;"
    },
    {
        "line": 94,
        "fullcodeline": "dimensions->stride_rows = stride_rows;"
    },
    {
        "line": 95,
        "fullcodeline": "dimensions->stride_cols = stride_cols;"
    },
    {
        "line": 96,
        "fullcodeline": "dimensions->dilation_rows = dilation_rows;"
    },
    {
        "line": 97,
        "fullcodeline": "dimensions->dilation_cols = dilation_cols;"
    },
    {
        "line": 98,
        "fullcodeline": "dimensions->out_rows = out_rows;"
    },
    {
        "line": 99,
        "fullcodeline": "dimensions->out_cols = out_cols;"
    },
    {
        "line": 100,
        "fullcodeline": "dimensions->pad_rows_before = pad_rows_before;"
    },
    {
        "line": 101,
        "fullcodeline": "dimensions->pad_rows_after = pad_rows_after;"
    },
    {
        "line": 102,
        "fullcodeline": "dimensions->pad_cols_before = pad_cols_before;"
    },
    {
        "line": 103,
        "fullcodeline": "dimensions->pad_cols_after = pad_cols_after;"
    },
    {
        "line": 6,
        "fullcodeline": "errors::InvalidArgument(\"input must be 4-dimensional\","
    },
    {
        "line": 9,
        "fullcodeline": "errors::InvalidArgument(\"filter must be 4-dimensional: \","
    },
    {
        "line": 11,
        "fullcodeline": "for (int i = 0; i < 3; i++) {"
    },
    {
        "line": 22,
        "fullcodeline": "errors::InvalidArgument(\"Input depth too large\"));"
    },
    {
        "line": 24,
        "fullcodeline": "errors::InvalidArgument(\"Patch depth too large\"));"
    },
    {
        "line": 28,
        "fullcodeline": "errors::InvalidArgument("
    },
    {
        "line": 31,
        "fullcodeline": "errors::InvalidArgument("
    },
    {
        "line": 42,
        "fullcodeline": "errors::InvalidArgument(\"Input rows too large\"));"
    },
    {
        "line": 50,
        "fullcodeline": "errors::InvalidArgument(\"Input cols too large\"));"
    },
    {
        "line": 57,
        "fullcodeline": "errors::InvalidArgument(\"batch is too large\"));"
    },
    {
        "line": 65,
        "fullcodeline": "GetTensorDim(params.dilations, params.data_format, 'H');"
    },
    {
        "line": 67,
        "fullcodeline": "GetTensorDim(params.dilations, params.data_format, 'W');"
    },
    {
        "line": 70,
        "fullcodeline": "if (params.padding == Padding::EXPLICIT) {"
    },
    {
        "line": 105,
        "fullcodeline": "return Status::OK();"
    },
    {
        "line": 7,
        "fullcodeline": "input.shape().DebugString()));"
    },
    {
        "line": 10,
        "fullcodeline": "filter.shape().DebugString()));"
    },
    {
        "line": 12,
        "fullcodeline": "TF_REQUIRES("
    },
    {
        "line": 71,
        "fullcodeline": "GetExplicitPaddingForDim(params.explicit_paddings, params.data_format, 'H',"
    },
    {
        "line": 73,
        "fullcodeline": "GetExplicitPaddingForDim(params.explicit_paddings, params.data_format, 'W',"
    },
    {
        "line": 13,
        "fullcodeline": "FastBoundsCheck(filter.dim_size(i), std::numeric_limits<int>::max()),"
    },
    {
        "line": 14,
        "fullcodeline": "errors::InvalidArgument(\"filter too large\"));"
    }
]