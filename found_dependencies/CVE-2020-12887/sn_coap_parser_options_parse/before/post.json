[
    {
        "line": 3,
        "fullcodeline": "uint8_t previous_option_number = 0;"
    },
    {
        "line": 4,
        "fullcodeline": "int8_t  ret_status             = 0;"
    },
    {
        "line": 5,
        "fullcodeline": "uint16_t message_left          = sn_coap_parser_move_packet_ptr(packet_data_pptr,"
    },
    {
        "line": 11,
        "fullcodeline": "dst_coap_msg_ptr->token_len = *packet_data_start_ptr & COAP_HEADER_TOKEN_LENGTH_MASK;"
    },
    {
        "line": 40,
        "fullcodeline": "while (message_left && (**packet_data_pptr != 0xff)) {"
    },
    {
        "line": 20,
        "fullcodeline": "ptr_check_result = sn_coap_parser_check_packet_ptr(*packet_data_pptr, packet_data_start_ptr, packet_len, dst_coap_msg_ptr->token_len);"
    },
    {
        "line": 26,
        "fullcodeline": "dst_coap_msg_ptr->token_ptr = sn_coap_protocol_malloc_copy(handle, *packet_data_pptr, dst_coap_msg_ptr->token_len);"
    },
    {
        "line": 33,
        "fullcodeline": "message_left = sn_coap_parser_move_packet_ptr(packet_data_pptr,"
    },
    {
        "line": 42,
        "fullcodeline": "uint16_t option_len = (**packet_data_pptr & 0x0F);"
    },
    {
        "line": 44,
        "fullcodeline": "uint16_t  option_number = (**packet_data_pptr >> COAP_OPTIONS_OPTION_NUMBER_SHIFT);"
    },
    {
        "line": 46,
        "fullcodeline": "message_left = sn_coap_parser_move_packet_ptr(packet_data_pptr, packet_data_start_ptr, packet_len, 1);"
    },
    {
        "line": 50,
        "fullcodeline": "option_parse_result = parse_ext_option(&option_number,"
    },
    {
        "line": 59,
        "fullcodeline": "option_number += previous_option_number;"
    },
    {
        "line": 62,
        "fullcodeline": "option_parse_result = parse_ext_option(&option_len,"
    },
    {
        "line": 73,
        "fullcodeline": "previous_option_number = option_number;"
    },
    {
        "line": 277,
        "fullcodeline": "message_left = sn_coap_parser_move_packet_ptr(packet_data_pptr,"
    },
    {
        "line": 15,
        "fullcodeline": "if ((dst_coap_msg_ptr->token_len > 8) || dst_coap_msg_ptr->token_ptr) {"
    },
    {
        "line": 21,
        "fullcodeline": "if (0 != ptr_check_result) {"
    },
    {
        "line": 28,
        "fullcodeline": "if (dst_coap_msg_ptr->token_ptr == NULL) {"
    },
    {
        "line": 55,
        "fullcodeline": "if (option_parse_result != 0) {"
    },
    {
        "line": 67,
        "fullcodeline": "if (option_parse_result != 0) {"
    },
    {
        "line": 97,
        "fullcodeline": "if (message_left < option_len){"
    },
    {
        "line": 274,
        "fullcodeline": "if ((*packet_data_pptr - packet_data_start_ptr) > packet_len) {"
    },
    {
        "line": 16,
        "fullcodeline": "tr_error(\"sn_coap_parser_options_parse - token not valid!\");"
    },
    {
        "line": 22,
        "fullcodeline": "tr_error(\"sn_coap_parser_options_parse - **packet_data_pptr overflow !\");"
    },
    {
        "line": 29,
        "fullcodeline": "tr_error(\"sn_coap_parser_options_parse - failed to allocate token!\");"
    },
    {
        "line": 99,
        "fullcodeline": "tr_error(\"sn_coap_parser_options_parse - **packet_data_pptr would overflow when parsing options!\");"
    },
    {
        "line": 110,
        "fullcodeline": "dst_coap_msg_ptr->content_format = (sn_coap_content_format_e) sn_coap_parser_options_parse_uint(packet_data_pptr, option_len);"
    },
    {
        "line": 118,
        "fullcodeline": "dst_coap_msg_ptr->options_list_ptr->max_age = sn_coap_parser_options_parse_uint(packet_data_pptr, option_len);"
    },
    {
        "line": 126,
        "fullcodeline": "dst_coap_msg_ptr->options_list_ptr->proxy_uri_len = option_len;"
    },
    {
        "line": 127,
        "fullcodeline": "dst_coap_msg_ptr->options_list_ptr->proxy_uri_ptr = sn_coap_protocol_malloc_copy(handle, *packet_data_pptr, option_len);"
    },
    {
        "line": 133,
        "fullcodeline": "message_left = sn_coap_parser_move_packet_ptr(packet_data_pptr, packet_data_start_ptr, packet_len, option_len);"
    },
    {
        "line": 138,
        "fullcodeline": "ret_status = sn_coap_parser_options_parse_multiple_options(handle, packet_data_pptr,"
    },
    {
        "line": 154,
        "fullcodeline": "dst_coap_msg_ptr->options_list_ptr->uri_host_len = option_len;"
    },
    {
        "line": 155,
        "fullcodeline": "dst_coap_msg_ptr->options_list_ptr->uri_host_ptr = sn_coap_protocol_malloc_copy(handle, *packet_data_pptr, option_len);"
    },
    {
        "line": 161,
        "fullcodeline": "message_left = sn_coap_parser_move_packet_ptr(packet_data_pptr, packet_data_start_ptr, packet_len, option_len);"
    },
    {
        "line": 170,
        "fullcodeline": "ret_status = sn_coap_parser_options_parse_multiple_options(handle, packet_data_pptr, message_left,"
    },
    {
        "line": 184,
        "fullcodeline": "dst_coap_msg_ptr->options_list_ptr->uri_port = sn_coap_parser_options_parse_uint(packet_data_pptr, option_len);"
    },
    {
        "line": 188,
        "fullcodeline": "ret_status = sn_coap_parser_options_parse_multiple_options(handle, packet_data_pptr, message_left,"
    },
    {
        "line": 199,
        "fullcodeline": "ret_status = sn_coap_parser_options_parse_multiple_options(handle, packet_data_pptr, message_left,"
    },
    {
        "line": 213,
        "fullcodeline": "dst_coap_msg_ptr->options_list_ptr->observe = sn_coap_parser_options_parse_uint(packet_data_pptr, option_len);"
    },
    {
        "line": 217,
        "fullcodeline": "ret_status = sn_coap_parser_options_parse_multiple_options(handle, packet_data_pptr, message_left,"
    },
    {
        "line": 231,
        "fullcodeline": "dst_coap_msg_ptr->options_list_ptr->block2 = sn_coap_parser_options_parse_uint(packet_data_pptr, option_len);"
    },
    {
        "line": 239,
        "fullcodeline": "dst_coap_msg_ptr->options_list_ptr->block1 = sn_coap_parser_options_parse_uint(packet_data_pptr, option_len);"
    },
    {
        "line": 247,
        "fullcodeline": "dst_coap_msg_ptr->options_list_ptr->accept = (sn_coap_content_format_e) sn_coap_parser_options_parse_uint(packet_data_pptr, option_len);"
    },
    {
        "line": 255,
        "fullcodeline": "dst_coap_msg_ptr->options_list_ptr->use_size1 = true;"
    },
    {
        "line": 256,
        "fullcodeline": "dst_coap_msg_ptr->options_list_ptr->size1 = sn_coap_parser_options_parse_uint(packet_data_pptr, option_len);"
    },
    {
        "line": 264,
        "fullcodeline": "dst_coap_msg_ptr->options_list_ptr->use_size2 = true;"
    },
    {
        "line": 265,
        "fullcodeline": "dst_coap_msg_ptr->options_list_ptr->size2 = sn_coap_parser_options_parse_uint(packet_data_pptr, option_len);"
    },
    {
        "line": 269,
        "fullcodeline": "tr_error(\"sn_coap_parser_options_parse - unknown option!\");"
    },
    {
        "line": 17,
        "fullcodeline": "return -1;"
    },
    {
        "line": 23,
        "fullcodeline": "return -1;"
    },
    {
        "line": 30,
        "fullcodeline": "return -1;"
    },
    {
        "line": 56,
        "fullcodeline": "return -1;"
    },
    {
        "line": 68,
        "fullcodeline": "return -1;"
    },
    {
        "line": 90,
        "fullcodeline": "if (sn_coap_parser_alloc_options(handle, dst_coap_msg_ptr) == NULL) {"
    },
    {
        "line": 100,
        "fullcodeline": "return -1;"
    },
    {
        "line": 106,
        "fullcodeline": "if ((option_len > 2) || (dst_coap_msg_ptr->content_format != COAP_CT_NONE)) {"
    },
    {
        "line": 114,
        "fullcodeline": "if (option_len > 4) {"
    },
    {
        "line": 122,
        "fullcodeline": "if ((option_len > 1034) || (option_len < 1) || dst_coap_msg_ptr->options_list_ptr->proxy_uri_ptr) {"
    },
    {
        "line": 129,
        "fullcodeline": "if (dst_coap_msg_ptr->options_list_ptr->proxy_uri_ptr == NULL) {"
    },
    {
        "line": 143,
        "fullcodeline": "if (ret_status < 0) {"
    },
    {
        "line": 150,
        "fullcodeline": "if ((option_len > 255) || (option_len < 1) || dst_coap_msg_ptr->options_list_ptr->uri_host_ptr) {"
    },
    {
        "line": 157,
        "fullcodeline": "if (dst_coap_msg_ptr->options_list_ptr->uri_host_ptr == NULL) {"
    },
    {
        "line": 173,
        "fullcodeline": "if (ret_status <0) {"
    },
    {
        "line": 180,
        "fullcodeline": "if ((option_len > 2) || dst_coap_msg_ptr->options_list_ptr->uri_port != COAP_OPTION_URI_PORT_NONE) {"
    },
    {
        "line": 191,
        "fullcodeline": "if (ret_status < 0) {"
    },
    {
        "line": 202,
        "fullcodeline": "if (ret_status < 0) {"
    },
    {
        "line": 209,
        "fullcodeline": "if ((option_len > 2) || dst_coap_msg_ptr->options_list_ptr->observe != COAP_OBSERVE_NONE) {"
    },
    {
        "line": 220,
        "fullcodeline": "if (ret_status < 0) {"
    },
    {
        "line": 227,
        "fullcodeline": "if ((option_len > 3) || dst_coap_msg_ptr->options_list_ptr->block2 != COAP_OPTION_BLOCK_NONE) {"
    },
    {
        "line": 235,
        "fullcodeline": "if ((option_len > 3) || dst_coap_msg_ptr->options_list_ptr->block1 != COAP_OPTION_BLOCK_NONE) {"
    },
    {
        "line": 243,
        "fullcodeline": "if ((option_len > 2) || (dst_coap_msg_ptr->options_list_ptr->accept != COAP_CT_NONE)) {"
    },
    {
        "line": 251,
        "fullcodeline": "if ((option_len > 4) || dst_coap_msg_ptr->options_list_ptr->use_size1) {"
    },
    {
        "line": 260,
        "fullcodeline": "if ((option_len > 4) || dst_coap_msg_ptr->options_list_ptr->use_size2) {"
    },
    {
        "line": 270,
        "fullcodeline": "return -1;"
    },
    {
        "line": 275,
        "fullcodeline": "return -1;"
    },
    {
        "line": 91,
        "fullcodeline": "tr_error(\"sn_coap_parser_options_parse - failed to allocate options!\");"
    },
    {
        "line": 107,
        "fullcodeline": "tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_CONTENT_FORMAT not valid!\");"
    },
    {
        "line": 115,
        "fullcodeline": "tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_MAX_AGE not valid!\");"
    },
    {
        "line": 123,
        "fullcodeline": "tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_PROXY_URI not valid!\");"
    },
    {
        "line": 130,
        "fullcodeline": "tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_PROXY_URI allocation failed!\");"
    },
    {
        "line": 144,
        "fullcodeline": "tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_ETAG not valid!\");"
    },
    {
        "line": 151,
        "fullcodeline": "tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_URI_HOST not valid!\");"
    },
    {
        "line": 158,
        "fullcodeline": "tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_URI_HOST allocation failed!\");"
    },
    {
        "line": 166,
        "fullcodeline": "tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_LOCATION_PATH exists!\");"
    },
    {
        "line": 174,
        "fullcodeline": "tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_LOCATION_PATH not valid!\");"
    },
    {
        "line": 181,
        "fullcodeline": "tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_URI_PORT not valid!\");"
    },
    {
        "line": 192,
        "fullcodeline": "tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_LOCATION_QUERY not valid!\");"
    },
    {
        "line": 203,
        "fullcodeline": "tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_URI_PATH not valid!\");"
    },
    {
        "line": 210,
        "fullcodeline": "tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_OBSERVE not valid!\");"
    },
    {
        "line": 221,
        "fullcodeline": "tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_URI_QUERY not valid!\");"
    },
    {
        "line": 228,
        "fullcodeline": "tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_BLOCK2 not valid!\");"
    },
    {
        "line": 236,
        "fullcodeline": "tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_BLOCK1 not valid!\");"
    },
    {
        "line": 244,
        "fullcodeline": "tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_ACCEPT not valid!\");"
    },
    {
        "line": 252,
        "fullcodeline": "tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_SIZE1 not valid!\");"
    },
    {
        "line": 261,
        "fullcodeline": "tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_SIZE2 not valid!\");"
    },
    {
        "line": 92,
        "fullcodeline": "return -1;"
    },
    {
        "line": 108,
        "fullcodeline": "return -1;"
    },
    {
        "line": 116,
        "fullcodeline": "return -1;"
    },
    {
        "line": 124,
        "fullcodeline": "return -1;"
    },
    {
        "line": 131,
        "fullcodeline": "return -1;"
    },
    {
        "line": 145,
        "fullcodeline": "return -1;"
    },
    {
        "line": 152,
        "fullcodeline": "return -1;"
    },
    {
        "line": 159,
        "fullcodeline": "return -1;"
    },
    {
        "line": 167,
        "fullcodeline": "return -1;"
    },
    {
        "line": 175,
        "fullcodeline": "return -1;"
    },
    {
        "line": 182,
        "fullcodeline": "return -1;"
    },
    {
        "line": 193,
        "fullcodeline": "return -1;"
    },
    {
        "line": 204,
        "fullcodeline": "return -1;"
    },
    {
        "line": 211,
        "fullcodeline": "return -1;"
    },
    {
        "line": 222,
        "fullcodeline": "return -1;"
    },
    {
        "line": 229,
        "fullcodeline": "return -1;"
    },
    {
        "line": 237,
        "fullcodeline": "return -1;"
    },
    {
        "line": 245,
        "fullcodeline": "return -1;"
    },
    {
        "line": 253,
        "fullcodeline": "return -1;"
    },
    {
        "line": 262,
        "fullcodeline": "return -1;"
    }
]