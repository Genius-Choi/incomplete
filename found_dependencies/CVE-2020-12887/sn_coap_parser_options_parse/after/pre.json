[
    {
        "line": 3,
        "fullcodeline": "uint8_t previous_option_number = 0;"
    },
    {
        "line": 4,
        "fullcodeline": "int8_t  ret_status             = 0;"
    },
    {
        "line": 5,
        "fullcodeline": "uint16_t message_left          = sn_coap_parser_move_packet_ptr(packet_data_pptr,"
    },
    {
        "line": 11,
        "fullcodeline": "dst_coap_msg_ptr->token_len = *packet_data_start_ptr & COAP_HEADER_TOKEN_LENGTH_MASK;"
    },
    {
        "line": 20,
        "fullcodeline": "ptr_check_result = sn_coap_parser_check_packet_ptr(*packet_data_pptr, packet_data_start_ptr, packet_len, dst_coap_msg_ptr->token_len);"
    },
    {
        "line": 26,
        "fullcodeline": "dst_coap_msg_ptr->token_ptr = sn_coap_protocol_malloc_copy(handle, *packet_data_pptr, dst_coap_msg_ptr->token_len);"
    },
    {
        "line": 33,
        "fullcodeline": "message_left = sn_coap_parser_move_packet_ptr(packet_data_pptr,"
    },
    {
        "line": 40,
        "fullcodeline": "while (message_left && (**packet_data_pptr != 0xff)) {"
    },
    {
        "line": 42,
        "fullcodeline": "uint16_t option_len = (**packet_data_pptr & 0x0F);"
    },
    {
        "line": 44,
        "fullcodeline": "uint16_t  option_number = (**packet_data_pptr >> COAP_OPTIONS_OPTION_NUMBER_SHIFT);"
    },
    {
        "line": 46,
        "fullcodeline": "message_left = sn_coap_parser_move_packet_ptr(packet_data_pptr, packet_data_start_ptr, packet_len, 1);"
    },
    {
        "line": 50,
        "fullcodeline": "option_parse_result = parse_ext_option(&option_number,"
    },
    {
        "line": 65,
        "fullcodeline": "option_parse_result = parse_ext_option(&option_len,"
    },
    {
        "line": 76,
        "fullcodeline": "previous_option_number = option_number;"
    },
    {
        "line": 295,
        "fullcodeline": "message_left = sn_coap_parser_move_packet_ptr(packet_data_pptr,"
    },
    {
        "line": 15,
        "fullcodeline": "if ((dst_coap_msg_ptr->token_len > 8) || dst_coap_msg_ptr->token_ptr) {"
    },
    {
        "line": 28,
        "fullcodeline": "if (dst_coap_msg_ptr->token_ptr == NULL) {"
    },
    {
        "line": 100,
        "fullcodeline": "if (message_left < option_len){"
    },
    {
        "line": 292,
        "fullcodeline": "if ((*packet_data_pptr - packet_data_start_ptr) > packet_len) {"
    },
    {
        "line": 16,
        "fullcodeline": "tr_error(\"sn_coap_parser_options_parse - token not valid!\");"
    },
    {
        "line": 59,
        "fullcodeline": "if(sn_coap_parser_add_u16_limit(option_number, previous_option_number, &option_number) != 0)"
    },
    {
        "line": 113,
        "fullcodeline": "dst_coap_msg_ptr->content_format = (sn_coap_content_format_e) sn_coap_parser_options_parse_uint(packet_data_pptr, option_len);"
    },
    {
        "line": 130,
        "fullcodeline": "dst_coap_msg_ptr->options_list_ptr->proxy_uri_ptr = sn_coap_protocol_malloc_copy(handle, *packet_data_pptr, option_len);"
    },
    {
        "line": 146,
        "fullcodeline": "ret_status = sn_coap_parser_options_parse_multiple_options(handle, packet_data_pptr,"
    },
    {
        "line": 163,
        "fullcodeline": "dst_coap_msg_ptr->options_list_ptr->uri_host_ptr = sn_coap_protocol_malloc_copy(handle, *packet_data_pptr, option_len);"
    },
    {
        "line": 178,
        "fullcodeline": "ret_status = sn_coap_parser_options_parse_multiple_options(handle, packet_data_pptr, message_left,"
    },
    {
        "line": 192,
        "fullcodeline": "dst_coap_msg_ptr->options_list_ptr->uri_port = sn_coap_parser_options_parse_uint(packet_data_pptr, option_len);"
    },
    {
        "line": 201,
        "fullcodeline": "ret_status = sn_coap_parser_options_parse_multiple_options(handle, packet_data_pptr, message_left,"
    },
    {
        "line": 217,
        "fullcodeline": "ret_status = sn_coap_parser_options_parse_multiple_options(handle, packet_data_pptr, message_left,"
    },
    {
        "line": 231,
        "fullcodeline": "dst_coap_msg_ptr->options_list_ptr->observe = sn_coap_parser_options_parse_uint(packet_data_pptr, option_len);"
    },
    {
        "line": 235,
        "fullcodeline": "ret_status = sn_coap_parser_options_parse_multiple_options(handle, packet_data_pptr, message_left,"
    },
    {
        "line": 249,
        "fullcodeline": "dst_coap_msg_ptr->options_list_ptr->block2 = sn_coap_parser_options_parse_uint(packet_data_pptr, option_len);"
    },
    {
        "line": 257,
        "fullcodeline": "dst_coap_msg_ptr->options_list_ptr->block1 = sn_coap_parser_options_parse_uint(packet_data_pptr, option_len);"
    },
    {
        "line": 265,
        "fullcodeline": "dst_coap_msg_ptr->options_list_ptr->accept = (sn_coap_content_format_e) sn_coap_parser_options_parse_uint(packet_data_pptr, option_len);"
    },
    {
        "line": 273,
        "fullcodeline": "dst_coap_msg_ptr->options_list_ptr->use_size1 = true;"
    },
    {
        "line": 282,
        "fullcodeline": "dst_coap_msg_ptr->options_list_ptr->use_size2 = true;"
    },
    {
        "line": 17,
        "fullcodeline": "return -1;"
    },
    {
        "line": 23,
        "fullcodeline": "return -1;"
    },
    {
        "line": 30,
        "fullcodeline": "return -1;"
    },
    {
        "line": 56,
        "fullcodeline": "return -1;"
    },
    {
        "line": 61,
        "fullcodeline": "return -1;"
    },
    {
        "line": 71,
        "fullcodeline": "return -1;"
    },
    {
        "line": 93,
        "fullcodeline": "if (sn_coap_parser_alloc_options(handle, dst_coap_msg_ptr) == NULL) {"
    },
    {
        "line": 103,
        "fullcodeline": "return -1;"
    },
    {
        "line": 117,
        "fullcodeline": "if (option_len > 4) {"
    },
    {
        "line": 121,
        "fullcodeline": "dst_coap_msg_ptr->options_list_ptr->max_age = sn_coap_parser_options_parse_uint(packet_data_pptr, option_len);"
    },
    {
        "line": 132,
        "fullcodeline": "if (dst_coap_msg_ptr->options_list_ptr->proxy_uri_ptr == NULL) {"
    },
    {
        "line": 136,
        "fullcodeline": "message_left = sn_coap_parser_move_packet_ptr(packet_data_pptr, packet_data_start_ptr, packet_len, option_len);"
    },
    {
        "line": 165,
        "fullcodeline": "if (dst_coap_msg_ptr->options_list_ptr->uri_host_ptr == NULL) {"
    },
    {
        "line": 169,
        "fullcodeline": "message_left = sn_coap_parser_move_packet_ptr(packet_data_pptr, packet_data_start_ptr, packet_len, option_len);"
    },
    {
        "line": 274,
        "fullcodeline": "dst_coap_msg_ptr->options_list_ptr->size1 = sn_coap_parser_options_parse_uint(packet_data_pptr, option_len);"
    },
    {
        "line": 283,
        "fullcodeline": "dst_coap_msg_ptr->options_list_ptr->size2 = sn_coap_parser_options_parse_uint(packet_data_pptr, option_len);"
    },
    {
        "line": 288,
        "fullcodeline": "return -1;"
    },
    {
        "line": 293,
        "fullcodeline": "return -1;"
    },
    {
        "line": 109,
        "fullcodeline": "if ((option_len > 2) || (dst_coap_msg_ptr->content_format != COAP_CT_NONE)) {"
    },
    {
        "line": 125,
        "fullcodeline": "if ((option_len > 1034) || (option_len < 1) || dst_coap_msg_ptr->options_list_ptr->proxy_uri_ptr) {"
    },
    {
        "line": 158,
        "fullcodeline": "if ((option_len > 255) || (option_len < 1) || dst_coap_msg_ptr->options_list_ptr->uri_host_ptr) {"
    },
    {
        "line": 188,
        "fullcodeline": "if ((option_len > 2) || dst_coap_msg_ptr->options_list_ptr->uri_port != COAP_OPTION_URI_PORT_NONE) {"
    },
    {
        "line": 227,
        "fullcodeline": "if ((option_len > 2) || dst_coap_msg_ptr->options_list_ptr->observe != COAP_OBSERVE_NONE) {"
    },
    {
        "line": 245,
        "fullcodeline": "if ((option_len > 3) || dst_coap_msg_ptr->options_list_ptr->block2 != COAP_OPTION_BLOCK_NONE) {"
    },
    {
        "line": 253,
        "fullcodeline": "if ((option_len > 3) || dst_coap_msg_ptr->options_list_ptr->block1 != COAP_OPTION_BLOCK_NONE) {"
    },
    {
        "line": 261,
        "fullcodeline": "if ((option_len > 2) || (dst_coap_msg_ptr->options_list_ptr->accept != COAP_CT_NONE)) {"
    },
    {
        "line": 269,
        "fullcodeline": "if ((option_len > 4) || dst_coap_msg_ptr->options_list_ptr->use_size1) {"
    },
    {
        "line": 278,
        "fullcodeline": "if ((option_len > 4) || dst_coap_msg_ptr->options_list_ptr->use_size2) {"
    },
    {
        "line": 95,
        "fullcodeline": "return -1;"
    },
    {
        "line": 111,
        "fullcodeline": "return -1;"
    },
    {
        "line": 119,
        "fullcodeline": "return -1;"
    },
    {
        "line": 127,
        "fullcodeline": "return -1;"
    },
    {
        "line": 134,
        "fullcodeline": "return -1;"
    },
    {
        "line": 143,
        "fullcodeline": "return -1;"
    },
    {
        "line": 153,
        "fullcodeline": "return -1;"
    },
    {
        "line": 160,
        "fullcodeline": "return -1;"
    },
    {
        "line": 167,
        "fullcodeline": "return -1;"
    },
    {
        "line": 175,
        "fullcodeline": "return -1;"
    },
    {
        "line": 183,
        "fullcodeline": "return -1;"
    },
    {
        "line": 190,
        "fullcodeline": "return -1;"
    },
    {
        "line": 199,
        "fullcodeline": "return -1;"
    },
    {
        "line": 206,
        "fullcodeline": "return -1;"
    },
    {
        "line": 215,
        "fullcodeline": "return -1;"
    },
    {
        "line": 222,
        "fullcodeline": "return -1;"
    },
    {
        "line": 229,
        "fullcodeline": "return -1;"
    },
    {
        "line": 240,
        "fullcodeline": "return -1;"
    },
    {
        "line": 247,
        "fullcodeline": "return -1;"
    },
    {
        "line": 255,
        "fullcodeline": "return -1;"
    },
    {
        "line": 263,
        "fullcodeline": "return -1;"
    },
    {
        "line": 271,
        "fullcodeline": "return -1;"
    },
    {
        "line": 280,
        "fullcodeline": "return -1;"
    }
]