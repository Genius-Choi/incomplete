[
    {
        "line": 3,
        "fullcodeline": "unsigned long addr = compute_effective_address(regs, insn, 0);"
    },
    {
        "line": 4,
        "fullcodeline": "int freg = ((insn >> 25) & 0x1e) | ((insn >> 20) & 0x20);"
    },
    {
        "line": 5,
        "fullcodeline": "struct fpustate *f = FPUSTATE;"
    },
    {
        "line": 6,
        "fullcodeline": "int asi = decode_asi(insn, regs);"
    },
    {
        "line": 7,
        "fullcodeline": "int flag = (freg < 32) ? FPRS_DL : FPRS_DU;"
    },
    {
        "line": 9,
        "fullcodeline": "perf_sw_event(PERF_COUNT_SW_EMULATION_FAULTS, 1, regs, 0);"
    },
    {
        "line": 11,
        "fullcodeline": "save_and_clear_fpu();"
    },
    {
        "line": 12,
        "fullcodeline": "current_thread_info()->xfsr[0] &= ~0x1c000;"
    },
    {
        "line": 122,
        "fullcodeline": "advance(regs);"
    },
    {
        "line": 13,
        "fullcodeline": "if (freg & 3) {"
    },
    {
        "line": 18,
        "fullcodeline": "if (insn & 0x200000) {"
    },
    {
        "line": 14,
        "fullcodeline": "current_thread_info()->xfsr[0] |= (6 << 14) /* invalid_fp_register */;"
    },
    {
        "line": 15,
        "fullcodeline": "do_fpother(regs);"
    },
    {
        "line": 20,
        "fullcodeline": "u64 first = 0, second = 0;"
    },
    {
        "line": 22,
        "fullcodeline": "if (current_thread_info()->fpsaved[0] & flag) {"
    },
    {
        "line": 26,
        "fullcodeline": "if (asi < 0x80) {"
    },
    {
        "line": 62,
        "fullcodeline": "u32 data[4] __attribute__ ((aligned(8)));"
    },
    {
        "line": 119,
        "fullcodeline": "memcpy(f->regs + freg, data, size * 4);"
    },
    {
        "line": 120,
        "fullcodeline": "current_thread_info()->fpsaved[0] |= flag;"
    },
    {
        "line": 27,
        "fullcodeline": "do_privact(regs);"
    },
    {
        "line": 66,
        "fullcodeline": "if (asi < 0x80) {"
    },
    {
        "line": 76,
        "fullcodeline": "switch (insn & 0x180000) {"
    },
    {
        "line": 81,
        "fullcodeline": "for (i = 0; i < size; i++)"
    },
    {
        "line": 82,
        "fullcodeline": "data[i] = 0;"
    },
    {
        "line": 85,
        "fullcodeline": "if (!err) {"
    },
    {
        "line": 89,
        "fullcodeline": "if (err && !(asi & 0x2 /* NF */)) {"
    },
    {
        "line": 96,
        "fullcodeline": "if (asi & 0x8) /* Little */ {"
    },
    {
        "line": 109,
        "fullcodeline": "if (!(current_thread_info()->fpsaved[0] & FPRS_FEF)) {"
    },
    {
        "line": 113,
        "fullcodeline": "if (!(current_thread_info()->fpsaved[0] & flag)) {"
    },
    {
        "line": 37,
        "fullcodeline": "u64 tmp = __swab64p(&first);"
    },
    {
        "line": 39,
        "fullcodeline": "first = __swab64p(&second);"
    },
    {
        "line": 40,
        "fullcodeline": "second = tmp;"
    },
    {
        "line": 44,
        "fullcodeline": "if (tlb_type == hypervisor)"
    },
    {
        "line": 54,
        "fullcodeline": "if (tlb_type == hypervisor)"
    },
    {
        "line": 67,
        "fullcodeline": "do_privact(regs);"
    },
    {
        "line": 77,
        "fullcodeline": "case 0x000000: size = 1; break;"
    },
    {
        "line": 78,
        "fullcodeline": "case 0x100000: size = 4; break;"
    },
    {
        "line": 79,
        "fullcodeline": "default: size = 2; break;"
    },
    {
        "line": 110,
        "fullcodeline": "current_thread_info()->fpsaved[0] = FPRS_FEF;"
    },
    {
        "line": 111,
        "fullcodeline": "current_thread_info()->gsr[0] = 0;"
    },
    {
        "line": 45,
        "fullcodeline": "sun4v_data_access_exception(regs, addr, 0);"
    },
    {
        "line": 55,
        "fullcodeline": "sun4v_data_access_exception(regs, addr, 0);"
    },
    {
        "line": 90,
        "fullcodeline": "if (tlb_type == hypervisor)"
    },
    {
        "line": 114,
        "fullcodeline": "if (freg < 32)"
    },
    {
        "line": 47,
        "fullcodeline": "spitfire_data_access_exception(regs, 0, addr);"
    },
    {
        "line": 57,
        "fullcodeline": "spitfire_data_access_exception(regs, 0, addr);"
    },
    {
        "line": 69,
        "fullcodeline": "} else if (asi > ASI_SNFL) {"
    },
    {
        "line": 91,
        "fullcodeline": "sun4v_data_access_exception(regs, addr, 0);"
    },
    {
        "line": 100,
        "fullcodeline": "case 1: data[0] = le32_to_cpup(data + 0); break;"
    },
    {
        "line": 101,
        "fullcodeline": "default:*(u64 *)(data + 0) = le64_to_cpup((u64 *)(data + 0));"
    },
    {
        "line": 103,
        "fullcodeline": "case 4: tmp = le64_to_cpup((u64 *)(data + 0));"
    },
    {
        "line": 104,
        "fullcodeline": "*(u64 *)(data + 0) = le64_to_cpup((u64 *)(data + 2));"
    },
    {
        "line": 105,
        "fullcodeline": "*(u64 *)(data + 2) = tmp;"
    },
    {
        "line": 115,
        "fullcodeline": "memset(f->regs, 0, 32*sizeof(u32));"
    },
    {
        "line": 93,
        "fullcodeline": "spitfire_data_access_exception(regs, 0, addr);"
    },
    {
        "line": 117,
        "fullcodeline": "memset(f->regs+32, 0, 32*sizeof(u32));"
    },
    {
        "line": 24,
        "fullcodeline": "second = *(u64 *)&f->regs[freg+2];"
    },
    {
        "line": 70,
        "fullcodeline": "if (tlb_type == hypervisor)"
    },
    {
        "line": 71,
        "fullcodeline": "sun4v_data_access_exception(regs, addr, 0);"
    },
    {
        "line": 73,
        "fullcodeline": "spitfire_data_access_exception(regs, 0, addr);"
    }
]