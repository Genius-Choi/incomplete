[
    {
        "line": 3,
        "fullcodeline": "enum direction dir = decode_direction(insn);"
    },
    {
        "line": 4,
        "fullcodeline": "int size = decode_access_size(insn);"
    },
    {
        "line": 6,
        "fullcodeline": "if(!ok_for_kernel(insn) || dir == both) {"
    },
    {
        "line": 7,
        "fullcodeline": "printk(\"Unsupported unaligned load/store trap for kernel at <%08lx>.\\n\","
    },
    {
        "line": 9,
        "fullcodeline": "unaligned_panic(\"Wheee. Kernel does fpu/atomic unaligned load/store.\");"
    },
    {
        "line": 11,
        "fullcodeline": "unsigned long addr = compute_effective_address(regs, insn);"
    },
    {
        "line": 14,
        "fullcodeline": "perf_sw_event(PERF_COUNT_SW_ALIGNMENT_FAULTS, 1, 0, regs, addr);"
    },
    {
        "line": 17,
        "fullcodeline": "err = do_int_load(fetch_reg_addr(((insn>>25)&0x1f),"
    },
    {
        "line": 24,
        "fullcodeline": "err = do_int_store(((insn>>25)&0x1f), size,"
    },
    {
        "line": 28,
        "fullcodeline": "panic(\"Impossible kernel unaligned trap.\");"
    },
    {
        "line": 32,
        "fullcodeline": "kernel_mna_trap_fault(regs, insn);"
    },
    {
        "line": 34,
        "fullcodeline": "advance(regs);"
    },
    {
        "line": 19,
        "fullcodeline": "size, (unsigned long *) addr,"
    },
    {
        "line": 20,
        "fullcodeline": "decode_signedness(insn));"
    },
    {
        "line": 25,
        "fullcodeline": "(unsigned long *) addr, regs);"
    }
]