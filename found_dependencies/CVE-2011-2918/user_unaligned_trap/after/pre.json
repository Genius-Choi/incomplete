[
    {
        "line": 8,
        "fullcodeline": "dir = decode_direction(insn);"
    },
    {
        "line": 56,
        "fullcodeline": "user_mna_trap_fault(regs, insn);"
    },
    {
        "line": 5,
        "fullcodeline": "if(!(current->thread.flags & SPARC_FLAG_UNALIGNED) ||"
    },
    {
        "line": 9,
        "fullcodeline": "if(!ok_for_user(regs, insn, dir)) {"
    },
    {
        "line": 6,
        "fullcodeline": "(((insn >> 30) & 3) != 3))"
    },
    {
        "line": 12,
        "fullcodeline": "int err, size = decode_access_size(insn);"
    },
    {
        "line": 20,
        "fullcodeline": "addr = compute_effective_address(regs, insn);"
    },
    {
        "line": 21,
        "fullcodeline": "perf_sw_event(PERF_COUNT_SW_ALIGNMENT_FAULTS, 1, regs, addr);"
    },
    {
        "line": 15,
        "fullcodeline": "if(floating_point_load_or_store_p(insn)) {"
    },
    {
        "line": 16,
        "fullcodeline": "printk(\"User FPU load/store unaligned unsupported.\\n\");"
    },
    {
        "line": 24,
        "fullcodeline": "err = do_int_load(fetch_reg_addr(((insn>>25)&0x1f),"
    },
    {
        "line": 31,
        "fullcodeline": "err = do_int_store(((insn>>25)&0x1f), size,"
    },
    {
        "line": 40,
        "fullcodeline": "printk(\"Unaligned SWAP unsupported.\\n\");"
    },
    {
        "line": 41,
        "fullcodeline": "err = -EFAULT;"
    },
    {
        "line": 45,
        "fullcodeline": "unaligned_panic(\"Impossible user unaligned trap.\");"
    },
    {
        "line": 51,
        "fullcodeline": "advance(regs);"
    },
    {
        "line": 26,
        "fullcodeline": "size, (unsigned long *) addr,"
    },
    {
        "line": 27,
        "fullcodeline": "decode_signedness(insn));"
    },
    {
        "line": 32,
        "fullcodeline": "(unsigned long *) addr, regs);"
    }
]