[
    {
        "line": 11,
        "fullcodeline": "error = generate_and_check_address(regs, opcode,"
    },
    {
        "line": 17,
        "fullcodeline": "perf_sw_event(PERF_COUNT_SW_ALIGNMENT_FAULTS, 1, regs, address);"
    },
    {
        "line": 13,
        "fullcodeline": "if (error < 0) {"
    },
    {
        "line": 19,
        "fullcodeline": "srcreg = (opcode >> 4) & 0x3f;"
    },
    {
        "line": 20,
        "fullcodeline": "if (user_mode(regs)) {"
    },
    {
        "line": 48,
        "fullcodeline": "__u64 val = regs->regs[srcreg];"
    },
    {
        "line": 23,
        "fullcodeline": "if (!access_ok(VERIFY_WRITE, (unsigned long) address, 1UL<<width_shift)) {"
    },
    {
        "line": 35,
        "fullcodeline": "buffer = regs->regs[srcreg];"
    },
    {
        "line": 38,
        "fullcodeline": "printk(\"Unexpected width_shift %d in misaligned_store, PC=%08lx\\n\","
    },
    {
        "line": 43,
        "fullcodeline": "if (__copy_user((void *)(int)address, &buffer, (1 << width_shift)) > 0) {"
    },
    {
        "line": 24,
        "fullcodeline": "return -1;"
    },
    {
        "line": 44,
        "fullcodeline": "return -1; /* fault */"
    }
]