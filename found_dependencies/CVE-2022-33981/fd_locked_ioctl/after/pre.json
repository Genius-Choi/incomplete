[
    {
        "line": 4,
        "fullcodeline": "int drive = (long)bdev->bd_disk->private_data;"
    },
    {
        "line": 5,
        "fullcodeline": "int type = ITYPE(drive_state[drive].fd_device);"
    },
    {
        "line": 30,
        "fullcodeline": "ret = normalize_ioctl(&cmd, &size);"
    },
    {
        "line": 19,
        "fullcodeline": "if (cmd == CDROMEJECT ||\t/* CD-ROM eject */"
    },
    {
        "line": 26,
        "fullcodeline": "if (!((cmd & 0xff00) == 0x0200))"
    },
    {
        "line": 44,
        "fullcodeline": "if (_IOC_DIR(cmd) & _IOC_WRITE) {"
    },
    {
        "line": 20,
        "fullcodeline": "cmd == 0x6470) {\t\t/* SunOS floppy eject */"
    },
    {
        "line": 21,
        "fullcodeline": "DPRINT(\"obsolete eject ioctl\\n\");"
    },
    {
        "line": 22,
        "fullcodeline": "DPRINT(\"please use floppycontrol --eject\\n\");"
    },
    {
        "line": 23,
        "fullcodeline": "cmd = FDEJECT;"
    },
    {
        "line": 35,
        "fullcodeline": "if (((cmd & 0x40) && !(mode & (FMODE_WRITE | FMODE_WRITE_IOCTL))) ||"
    },
    {
        "line": 36,
        "fullcodeline": "((cmd & 0x80) && !capable(CAP_SYS_ADMIN)))"
    },
    {
        "line": 39,
        "fullcodeline": "if (WARN_ON(size < 0 || size > sizeof(inparam)))"
    },
    {
        "line": 60,
        "fullcodeline": "ret = fd_eject(UNIT(drive));"
    },
    {
        "line": 62,
        "fullcodeline": "set_bit(FD_DISK_CHANGED_BIT, &drive_state[drive].flags);"
    },
    {
        "line": 63,
        "fullcodeline": "set_bit(FD_VERIFY_BIT, &drive_state[drive].flags);"
    },
    {
        "line": 69,
        "fullcodeline": "current_type[drive] = NULL;"
    },
    {
        "line": 77,
        "fullcodeline": "ret = get_floppy_geometry(drive, type,"
    },
    {
        "line": 96,
        "fullcodeline": "ret = drive_state[drive].flags;"
    },
    {
        "line": 122,
        "fullcodeline": "outparam = drive_name(type, drive);"
    },
    {
        "line": 160,
        "fullcodeline": "twaddle(current_fdc, current_drive);"
    },
    {
        "line": 27,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 37,
        "fullcodeline": "return -EPERM;"
    },
    {
        "line": 40,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 55,
        "fullcodeline": "if (lock_fdc(drive))"
    },
    {
        "line": 70,
        "fullcodeline": "floppy_sizes[drive] = MAX_DISK_SIZE << 1;"
    },
    {
        "line": 72,
        "fullcodeline": "return invalidate_drive(bdev);"
    },
    {
        "line": 75,
        "fullcodeline": "return set_geometry(cmd, &inparam.g, drive, type, bdev);"
    },
    {
        "line": 89,
        "fullcodeline": "drive_params[drive].flags &= ~FTD_MSG;"
    },
    {
        "line": 98,
        "fullcodeline": "if (ret & FD_VERIFY)"
    },
    {
        "line": 106,
        "fullcodeline": "return do_format(drive, &inparam.f);"
    },
    {
        "line": 111,
        "fullcodeline": "return invalidate_drive(bdev);"
    },
    {
        "line": 145,
        "fullcodeline": "return user_reset_fdc(drive, (int)param, true);"
    },
    {
        "line": 164,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 94,
        "fullcodeline": "if (poll_drive(true, FD_RAW_NEED_DISK) == -EINTR)"
    },
    {
        "line": 100,
        "fullcodeline": "if (!(ret & FD_DISK_WRITABLE))"
    },
    {
        "line": 113,
        "fullcodeline": "drive_params[drive].max_errors.reporting = (unsigned short)(param & 0x0f);"
    },
    {
        "line": 123,
        "fullcodeline": "SUPBOUND(size, strlen((const char *)outparam) + 1);"
    },
    {
        "line": 126,
        "fullcodeline": "if (!valid_floppy_drive_params(inparam.dp.autodetect,"
    },
    {
        "line": 137,
        "fullcodeline": "if (poll_drive(true, FD_RAW_NEED_DISK) == -EINTR)"
    },
    {
        "line": 54,
        "fullcodeline": "return -EBUSY;"
    },
    {
        "line": 56,
        "fullcodeline": "return -EINTR;"
    },
    {
        "line": 68,
        "fullcodeline": "return -EINTR;"
    },
    {
        "line": 93,
        "fullcodeline": "return -EINTR;"
    },
    {
        "line": 95,
        "fullcodeline": "return -EINTR;"
    },
    {
        "line": 99,
        "fullcodeline": "return -ENODEV;"
    },
    {
        "line": 101,
        "fullcodeline": "return -EROFS;"
    },
    {
        "line": 105,
        "fullcodeline": "return -EBUSY;"
    },
    {
        "line": 110,
        "fullcodeline": "return -EINTR;"
    },
    {
        "line": 128,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 136,
        "fullcodeline": "return -EINTR;"
    },
    {
        "line": 138,
        "fullcodeline": "return -EINTR;"
    },
    {
        "line": 159,
        "fullcodeline": "return -EINTR;"
    }
]