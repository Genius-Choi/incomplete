[
    {
        "line": 14,
        "fullcodeline": "sinf = isom_get_sinf_entry(trak, sampleDescriptionIndex, GF_ISOM_CENC_SCHEME, NULL);"
    },
    {
        "line": 15,
        "fullcodeline": "if (!sinf) sinf = isom_get_sinf_entry(trak, sampleDescriptionIndex, GF_ISOM_CBC_SCHEME, NULL);"
    },
    {
        "line": 16,
        "fullcodeline": "if (!sinf) sinf = isom_get_sinf_entry(trak, sampleDescriptionIndex, GF_ISOM_CENS_SCHEME, NULL);"
    },
    {
        "line": 17,
        "fullcodeline": "if (!sinf) sinf = isom_get_sinf_entry(trak, sampleDescriptionIndex, GF_ISOM_CBCS_SCHEME, NULL);"
    },
    {
        "line": 18,
        "fullcodeline": "if (!sinf) sinf = isom_get_sinf_entry(trak, sampleDescriptionIndex, GF_ISOM_PIFF_SCHEME, NULL);"
    },
    {
        "line": 20,
        "fullcodeline": "if (!sinf) {"
    },
    {
        "line": 34,
        "fullcodeline": "if (sinf && sinf->info && sinf->info->tenc) {"
    },
    {
        "line": 89,
        "fullcodeline": "if (container_type && trak->sample_encryption) {"
    },
    {
        "line": 7,
        "fullcodeline": "if (default_IsEncrypted) *default_IsEncrypted = GF_FALSE;"
    },
    {
        "line": 8,
        "fullcodeline": "if (crypt_byte_block) *crypt_byte_block = 0;"
    },
    {
        "line": 9,
        "fullcodeline": "if (skip_byte_block) *skip_byte_block = 0;"
    },
    {
        "line": 10,
        "fullcodeline": "if (container_type) *container_type = 0;"
    },
    {
        "line": 11,
        "fullcodeline": "if (key_info) *key_info = NULL;"
    },
    {
        "line": 12,
        "fullcodeline": "if (key_info_size) *key_info_size = 0;"
    },
    {
        "line": 21,
        "fullcodeline": "u32 i, nb_stsd = gf_list_count(trak->Media->information->sampleTable->SampleDescription->child_boxes);"
    },
    {
        "line": 22,
        "fullcodeline": "for (i=0; i<nb_stsd; i++) {"
    },
    {
        "line": 90,
        "fullcodeline": "if (trak->sample_encryption->type == GF_ISOM_BOX_TYPE_SENC) *container_type = GF_ISOM_BOX_TYPE_SENC;"
    },
    {
        "line": 24,
        "fullcodeline": "GF_SampleEntryBox *sentry=NULL;"
    },
    {
        "line": 26,
        "fullcodeline": "sentry = gf_list_get(trak->Media->information->sampleTable->SampleDescription->child_boxes, i);"
    },
    {
        "line": 27,
        "fullcodeline": "a_sinf = (GF_ProtectionSchemeInfoBox *) gf_isom_box_find_child(sentry->child_boxes, GF_ISOM_BOX_TYPE_SINF);"
    },
    {
        "line": 40,
        "fullcodeline": "*key_info_size = 20;"
    },
    {
        "line": 46,
        "fullcodeline": "if (container_type) *container_type = GF_ISOM_BOX_TYPE_SENC;"
    },
    {
        "line": 47,
        "fullcodeline": "} else if (sinf && sinf->info && sinf->info->piff_tenc) {"
    },
    {
        "line": 25,
        "fullcodeline": "if (i+1==sampleDescriptionIndex) continue;"
    },
    {
        "line": 28,
        "fullcodeline": "if (!a_sinf) continue;"
    },
    {
        "line": 42,
        "fullcodeline": "*key_info_size += 1 + sinf->info->tenc->key_info[20];"
    },
    {
        "line": 54,
        "fullcodeline": "u32 i, count = 0;"
    },
    {
        "line": 55,
        "fullcodeline": "GF_CENCSampleEncryptionGroupEntry *seig_entry = NULL;"
    },
    {
        "line": 91,
        "fullcodeline": "else if (trak->sample_encryption->type == GF_ISOM_BOX_TYPE_UUID) *container_type = ((GF_UUIDBox*)trak->sample_encryption)->internal_4cc;"
    },
    {
        "line": 48,
        "fullcodeline": "if (default_IsEncrypted) *default_IsEncrypted = GF_TRUE;"
    },
    {
        "line": 50,
        "fullcodeline": "if (key_info_size) *key_info_size = 19;"
    },
    {
        "line": 52,
        "fullcodeline": "if (container_type) *container_type = GF_ISOM_BOX_UUID_PSEC;"
    },
    {
        "line": 60,
        "fullcodeline": "for (i=0; i<count; i++) {"
    },
    {
        "line": 58,
        "fullcodeline": "count = gf_list_count(trak->Media->information->sampleTable->sampleGroupsDescription);"
    },
    {
        "line": 61,
        "fullcodeline": "GF_SampleGroupDescriptionBox *sgdesc = (GF_SampleGroupDescriptionBox*)gf_list_get(trak->Media->information->sampleTable->sampleGroupsDescription, i);"
    },
    {
        "line": 62,
        "fullcodeline": "if (sgdesc->grouping_type!=GF_ISOM_SAMPLE_GROUP_SEIG) continue;"
    },
    {
        "line": 67,
        "fullcodeline": "if (seig_entry && !seig_entry->key_info[0])"
    },
    {
        "line": 64,
        "fullcodeline": "seig_entry = gf_list_get(sgdesc->group_descriptions, sgdesc->default_description_index-1);"
    },
    {
        "line": 68,
        "fullcodeline": "seig_entry = NULL;"
    },
    {
        "line": 72,
        "fullcodeline": "if (default_IsEncrypted) *default_IsEncrypted = seig_entry->IsProtected;"
    },
    {
        "line": 73,
        "fullcodeline": "if (crypt_byte_block) *crypt_byte_block = seig_entry->crypt_byte_block;"
    },
    {
        "line": 74,
        "fullcodeline": "if (skip_byte_block) *skip_byte_block = seig_entry->skip_byte_block;"
    },
    {
        "line": 75,
        "fullcodeline": "if (key_info) *key_info = seig_entry->key_info;"
    },
    {
        "line": 76,
        "fullcodeline": "if (key_info_size) *key_info_size = seig_entry->key_info_size;"
    },
    {
        "line": 77,
        "fullcodeline": "if (container_type) *container_type = GF_ISOM_BOX_TYPE_SENC;"
    },
    {
        "line": 79,
        "fullcodeline": "if (! trak->moov->mov->is_smooth ) {"
    },
    {
        "line": 66,
        "fullcodeline": "seig_entry = gf_list_get(sgdesc->group_descriptions, 0);"
    },
    {
        "line": 80,
        "fullcodeline": "trak->moov->mov->is_smooth = GF_TRUE;"
    },
    {
        "line": 81,
        "fullcodeline": "GF_LOG(GF_LOG_WARNING, GF_LOG_CONTAINER, (\"[iso file] senc box without tenc, assuming MS smooth+piff\\n\"));"
    },
    {
        "line": 83,
        "fullcodeline": "if (default_IsEncrypted) *default_IsEncrypted = GF_TRUE;"
    },
    {
        "line": 85,
        "fullcodeline": "if (container_type) *container_type = GF_ISOM_BOX_UUID_PSEC;"
    }
]