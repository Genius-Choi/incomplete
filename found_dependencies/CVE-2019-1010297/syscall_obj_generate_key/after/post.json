[
    {
        "line": 11,
        "fullcodeline": "TEE_Attribute *params = NULL;"
    },
    {
        "line": 13,
        "fullcodeline": "res = tee_ta_get_current_session(&sess);"
    },
    {
        "line": 17,
        "fullcodeline": "res = tee_obj_get(to_user_ta_ctx(sess->ctx),"
    },
    {
        "line": 31,
        "fullcodeline": "type_props = tee_svc_find_type_props(o->info.objectType);"
    },
    {
        "line": 43,
        "fullcodeline": "size_t alloc_size = 0;"
    },
    {
        "line": 48,
        "fullcodeline": "params = malloc(alloc_size);"
    },
    {
        "line": 51,
        "fullcodeline": "res = copy_in_attrs(to_user_ta_ctx(sess->ctx), usr_params, param_count,"
    },
    {
        "line": 56,
        "fullcodeline": "res = tee_svc_cryp_check_attr(ATTR_USAGE_GENERATE_KEY, type_props,"
    },
    {
        "line": 133,
        "fullcodeline": "free(params);"
    },
    {
        "line": 14,
        "fullcodeline": "if (res != TEE_SUCCESS)"
    },
    {
        "line": 19,
        "fullcodeline": "if (res != TEE_SUCCESS)"
    },
    {
        "line": 23,
        "fullcodeline": "if ((o->info.handleFlags & TEE_HANDLE_FLAG_PERSISTENT) != 0)"
    },
    {
        "line": 27,
        "fullcodeline": "if ((o->info.handleFlags & TEE_HANDLE_FLAG_INITIALIZED) != 0)"
    },
    {
        "line": 32,
        "fullcodeline": "if (!type_props)"
    },
    {
        "line": 36,
        "fullcodeline": "if (key_size % type_props->quanta != 0)"
    },
    {
        "line": 38,
        "fullcodeline": "if (key_size < type_props->min_size)"
    },
    {
        "line": 40,
        "fullcodeline": "if (key_size > type_props->max_size)"
    },
    {
        "line": 45,
        "fullcodeline": "if (MUL_OVERFLOW(sizeof(TEE_Attribute), param_count, &alloc_size))"
    },
    {
        "line": 49,
        "fullcodeline": "if (!params)"
    },
    {
        "line": 53,
        "fullcodeline": "if (res != TEE_SUCCESS)"
    },
    {
        "line": 58,
        "fullcodeline": "if (res != TEE_SUCCESS)"
    },
    {
        "line": 134,
        "fullcodeline": "if (res == TEE_SUCCESS) {"
    },
    {
        "line": 18,
        "fullcodeline": "tee_svc_uref_to_vaddr(obj), &o);"
    },
    {
        "line": 72,
        "fullcodeline": "byte_size = key_size / 8;"
    },
    {
        "line": 83,
        "fullcodeline": "key = (struct tee_cryp_obj_secret *)o->attr;"
    },
    {
        "line": 89,
        "fullcodeline": "res = crypto_rng_read((void *)(key + 1), byte_size);"
    },
    {
        "line": 93,
        "fullcodeline": "key->key_size = byte_size;"
    },
    {
        "line": 96,
        "fullcodeline": "o->have_attrs = (1 << type_props->num_type_attrs) - 1;"
    },
    {
        "line": 101,
        "fullcodeline": "res = tee_svc_obj_generate_key_rsa(o, type_props, key_size,"
    },
    {
        "line": 108,
        "fullcodeline": "res = tee_svc_obj_generate_key_dsa(o, type_props, key_size);"
    },
    {
        "line": 114,
        "fullcodeline": "res = tee_svc_obj_generate_key_dh(o, type_props, key_size,"
    },
    {
        "line": 122,
        "fullcodeline": "res = tee_svc_obj_generate_key_ecc(o, type_props, key_size,"
    },
    {
        "line": 129,
        "fullcodeline": "res = TEE_ERROR_BAD_FORMAT;"
    },
    {
        "line": 135,
        "fullcodeline": "o->info.keySize = key_size;"
    },
    {
        "line": 136,
        "fullcodeline": "o->info.handleFlags |= TEE_HANDLE_FLAG_INITIALIZED;"
    },
    {
        "line": 78,
        "fullcodeline": "if (o->info.objectType == TEE_TYPE_DES ||"
    },
    {
        "line": 84,
        "fullcodeline": "if (byte_size > key->alloc_size) {"
    },
    {
        "line": 90,
        "fullcodeline": "if (res != TEE_SUCCESS)"
    },
    {
        "line": 103,
        "fullcodeline": "if (res != TEE_SUCCESS)"
    },
    {
        "line": 109,
        "fullcodeline": "if (res != TEE_SUCCESS)"
    },
    {
        "line": 116,
        "fullcodeline": "if (res != TEE_SUCCESS)"
    },
    {
        "line": 124,
        "fullcodeline": "if (res != TEE_SUCCESS)"
    },
    {
        "line": 79,
        "fullcodeline": "o->info.objectType == TEE_TYPE_DES3) {"
    },
    {
        "line": 80,
        "fullcodeline": "byte_size = (key_size + key_size / 7) / 8;"
    },
    {
        "line": 85,
        "fullcodeline": "res = TEE_ERROR_EXCESS_DATA;"
    }
]