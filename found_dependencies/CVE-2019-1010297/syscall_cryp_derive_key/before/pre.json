[
    {
        "line": 5,
        "fullcodeline": "TEE_Result res = TEE_ERROR_NOT_SUPPORTED;"
    },
    {
        "line": 12,
        "fullcodeline": "TEE_Attribute *params = NULL;"
    },
    {
        "line": 15,
        "fullcodeline": "res = tee_ta_get_current_session(&sess);"
    },
    {
        "line": 18,
        "fullcodeline": "utc = to_user_ta_ctx(sess->ctx);"
    },
    {
        "line": 20,
        "fullcodeline": "res = tee_svc_cryp_get_state(sess, tee_svc_uref_to_vaddr(state), &cs);"
    },
    {
        "line": 24,
        "fullcodeline": "params = malloc(sizeof(TEE_Attribute) * param_count);"
    },
    {
        "line": 27,
        "fullcodeline": "res = copy_in_attrs(utc, usr_params, param_count, params);"
    },
    {
        "line": 32,
        "fullcodeline": "res = tee_obj_get(utc, cs->key1, &ko);"
    },
    {
        "line": 36,
        "fullcodeline": "res = tee_obj_get(utc, tee_svc_uref_to_vaddr(derived_key), &so);"
    },
    {
        "line": 41,
        "fullcodeline": "sk = so->attr;"
    },
    {
        "line": 44,
        "fullcodeline": "type_props = tee_svc_find_type_props(so->info.objectType);"
    },
    {
        "line": 16,
        "fullcodeline": "if (res != TEE_SUCCESS)"
    },
    {
        "line": 21,
        "fullcodeline": "if (res != TEE_SUCCESS)"
    },
    {
        "line": 25,
        "fullcodeline": "if (!params)"
    },
    {
        "line": 28,
        "fullcodeline": "if (res != TEE_SUCCESS)"
    },
    {
        "line": 33,
        "fullcodeline": "if (res != TEE_SUCCESS)"
    },
    {
        "line": 37,
        "fullcodeline": "if (res != TEE_SUCCESS)"
    },
    {
        "line": 45,
        "fullcodeline": "if (!type_props) {"
    },
    {
        "line": 50,
        "fullcodeline": "if (cs->algo == TEE_ALG_DH_DERIVE_SHARED_SECRET) {"
    },
    {
        "line": 46,
        "fullcodeline": "res = TEE_ERROR_NOT_SUPPORTED;"
    },
    {
        "line": 61,
        "fullcodeline": "alloc_size = params[0].content.ref.length * 8;"
    },
    {
        "line": 62,
        "fullcodeline": "pub = crypto_bignum_allocate(alloc_size);"
    },
    {
        "line": 63,
        "fullcodeline": "ss = crypto_bignum_allocate(alloc_size);"
    },
    {
        "line": 64,
        "fullcodeline": "if (pub && ss) {"
    },
    {
        "line": 55,
        "fullcodeline": "if (param_count != 1 ||"
    },
    {
        "line": 56,
        "fullcodeline": "params[0].attributeID != TEE_ATTR_DH_PUBLIC_VALUE) {"
    },
    {
        "line": 57,
        "fullcodeline": "res = TEE_ERROR_BAD_PARAMETERS;"
    },
    {
        "line": 65,
        "fullcodeline": "crypto_bignum_bin2bn(params[0].content.ref.buffer,"
    },
    {
        "line": 67,
        "fullcodeline": "res = crypto_acipher_dh_shared_secret(ko->attr,"
    },
    {
        "line": 82,
        "fullcodeline": "} else if (TEE_ALG_GET_MAIN_ALG(cs->algo) == TEE_MAIN_ALGO_ECDH) {"
    },
    {
        "line": 69,
        "fullcodeline": "if (res == TEE_SUCCESS) {"
    },
    {
        "line": 78,
        "fullcodeline": "res = TEE_ERROR_OUT_OF_MEMORY;"
    },
    {
        "line": 117,
        "fullcodeline": "res = crypto_acipher_alloc_ecc_public_key(&key_public,"
    },
    {
        "line": 121,
        "fullcodeline": "key_public.curve = ((struct ecc_keypair *)ko->attr)->curve;"
    },
    {
        "line": 122,
        "fullcodeline": "crypto_bignum_bin2bn(params[0].content.ref.buffer,"
    },
    {
        "line": 125,
        "fullcodeline": "crypto_bignum_bin2bn(params[1].content.ref.buffer,"
    },
    {
        "line": 129,
        "fullcodeline": "pt_secret = (uint8_t *)(sk + 1);"
    },
    {
        "line": 130,
        "fullcodeline": "pt_secret_len = sk->alloc_size;"
    },
    {
        "line": 131,
        "fullcodeline": "res = crypto_acipher_ecc_shared_secret(ko->attr, &key_public,"
    },
    {
        "line": 70,
        "fullcodeline": "sk->key_size = crypto_bignum_num_bytes(ss);"
    },
    {
        "line": 71,
        "fullcodeline": "crypto_bignum_bn2bin(ss, (uint8_t *)(sk + 1));"
    },
    {
        "line": 119,
        "fullcodeline": "if (res != TEE_SUCCESS)"
    },
    {
        "line": 135,
        "fullcodeline": "if (res == TEE_SUCCESS) {"
    },
    {
        "line": 232,
        "fullcodeline": "res = TEE_ERROR_NOT_SUPPORTED;"
    },
    {
        "line": 88,
        "fullcodeline": "if (param_count != 2 ||"
    },
    {
        "line": 90,
        "fullcodeline": "params[1].attributeID != TEE_ATTR_ECC_PUBLIC_VALUE_Y) {"
    },
    {
        "line": 91,
        "fullcodeline": "res = TEE_ERROR_BAD_PARAMETERS;"
    },
    {
        "line": 97,
        "fullcodeline": "alloc_size = 192;"
    },
    {
        "line": 100,
        "fullcodeline": "alloc_size = 224;"
    },
    {
        "line": 103,
        "fullcodeline": "alloc_size = 256;"
    },
    {
        "line": 106,
        "fullcodeline": "alloc_size = 384;"
    },
    {
        "line": 109,
        "fullcodeline": "alloc_size = 521;"
    },
    {
        "line": 112,
        "fullcodeline": "res = TEE_ERROR_NOT_IMPLEMENTED;"
    },
    {
        "line": 89,
        "fullcodeline": "params[0].attributeID != TEE_ATTR_ECC_PUBLIC_VALUE_X ||"
    }
]