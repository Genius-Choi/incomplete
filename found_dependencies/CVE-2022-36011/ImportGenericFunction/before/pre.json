[
    {
        "line": 5,
        "fullcodeline": "const OpDef& signature = func.signature();"
    },
    {
        "line": 6,
        "fullcodeline": "Location unknown_loc = builder.getUnknownLoc();"
    },
    {
        "line": 7,
        "fullcodeline": "MLIRContext* context = builder.getContext();"
    },
    {
        "line": 9,
        "fullcodeline": "TFGraphDialect* tfgDialect = cast<TFGraphDialect>(func_op->getDialect());"
    },
    {
        "line": 11,
        "fullcodeline": "DictionaryAttr func_attrs = builder.getDictionaryAttr({});"
    },
    {
        "line": 14,
        "fullcodeline": "attrs.append(\"sym_name\", builder.getStringAttr(signature.name()));"
    },
    {
        "line": 15,
        "fullcodeline": "attrs.append(\"generic\", builder.getUnitAttr());"
    },
    {
        "line": 86,
        "fullcodeline": "SmallString<8> arg_or_res_attr_name;"
    },
    {
        "line": 87,
        "fullcodeline": "SmallString<8> sub_arg_attr_name;"
    },
    {
        "line": 93,
        "fullcodeline": "int arg_num = 0;"
    },
    {
        "line": 94,
        "fullcodeline": "llvm::SmallVector<StringRef> arg_names;"
    },
    {
        "line": 95,
        "fullcodeline": "llvm::SmallVector<Type> arg_types;"
    },
    {
        "line": 96,
        "fullcodeline": "llvm::SmallVector<Attribute> args_attrs;"
    },
    {
        "line": 97,
        "fullcodeline": "llvm::SmallVector<Attribute> res_attrs;"
    },
    {
        "line": 120,
        "fullcodeline": "attrs.push_back("
    },
    {
        "line": 125,
        "fullcodeline": "int res_num = 0;"
    },
    {
        "line": 143,
        "fullcodeline": "values_map.clear();"
    },
    {
        "line": 144,
        "fullcodeline": "Block* body = new Block();"
    },
    {
        "line": 145,
        "fullcodeline": "func_op.body().push_back(body);"
    },
    {
        "line": 146,
        "fullcodeline": "Type control_ty = ControlType::get(context);"
    },
    {
        "line": 159,
        "fullcodeline": "OpBuilder body_builder = OpBuilder::atBlockEnd(body);"
    },
    {
        "line": 162,
        "fullcodeline": "OperationName mlir_placeholder(\"tfg.__mlir_placeholder\", context);"
    },
    {
        "line": 163,
        "fullcodeline": "Type placeholder_ty = OpaqueTensorType::get(context);"
    },
    {
        "line": 164,
        "fullcodeline": "ValueMapManager value_manager(values_map, body_builder, mlir_placeholder,"
    },
    {
        "line": 182,
        "fullcodeline": "res_num = 0;"
    },
    {
        "line": 190,
        "fullcodeline": "res_num = 0;"
    },
    {
        "line": 12,
        "fullcodeline": "if (signature.name().empty())"
    },
    {
        "line": 18,
        "fullcodeline": "if (signature.is_stateful())"
    },
    {
        "line": 64,
        "fullcodeline": "if (func.resource_arg_unique_id_size()) {"
    },
    {
        "line": 121,
        "fullcodeline": "builder.getNamedAttr(function_interface_impl::getArgDictAttrName(),"
    },
    {
        "line": 140,
        "fullcodeline": "builder.getNamedAttr(function_interface_impl::getResultDictAttrName(),"
    },
    {
        "line": 171,
        "fullcodeline": "ImportNodes(value_manager, func.node_def(), body_builder),"
    },
    {
        "line": 172,
        "fullcodeline": "\" when importing function \", func.signature().name());"
    },
    {
        "line": 202,
        "fullcodeline": "SmallVector<Value> ret_vals(func.ret_size() + func.control_ret_size(),"
    },
    {
        "line": 16,
        "fullcodeline": "if (!signature.description().empty())"
    },
    {
        "line": 17,
        "fullcodeline": "attrs.append(\"description\", builder.getStringAttr(signature.description()));"
    },
    {
        "line": 19,
        "fullcodeline": "attrs.append(\"is_stateful\", builder.getUnitAttr());"
    },
    {
        "line": 21,
        "fullcodeline": "llvm::SmallVector<Attribute> control_outputs;"
    },
    {
        "line": 24,
        "fullcodeline": "attrs.append(\"control_output\", builder.getArrayAttr(control_outputs));"
    },
    {
        "line": 65,
        "fullcodeline": "SmallVector<int32_t> resource_arg_unique_ids_keys;"
    },
    {
        "line": 66,
        "fullcodeline": "SmallVector<int32_t> resource_arg_unique_ids_values;"
    },
    {
        "line": 71,
        "fullcodeline": "attrs.append(\"resource_arg_unique_ids_keys\","
    },
    {
        "line": 73,
        "fullcodeline": "attrs.append(\"resource_arg_unique_ids_values\","
    },
    {
        "line": 80,
        "fullcodeline": "const std::string& name = \"tf.\" + namedAttr.first;"
    },
    {
        "line": 84,
        "fullcodeline": "attrs.append(name, attr);"
    },
    {
        "line": 99,
        "fullcodeline": "const OpDef::ArgDef& input = enumerated_input.value();"
    },
    {
        "line": 102,
        "fullcodeline": "auto it = func.arg_attr().find(enumerated_input.index());"
    },
    {
        "line": 116,
        "fullcodeline": "args_attrs.push_back(input_attrs.getDictionary(context));"
    },
    {
        "line": 117,
        "fullcodeline": "args_attrs.push_back(NamedAttrList{}.getDictionary(context));"
    },
    {
        "line": 122,
        "fullcodeline": "builder.getArrayAttr(args_attrs)));"
    },
    {
        "line": 129,
        "fullcodeline": "res_attrs.push_back(output_attrs.getDictionary(context));"
    },
    {
        "line": 130,
        "fullcodeline": "++res_num;"
    },
    {
        "line": 135,
        "fullcodeline": "output_attrs.append(\"tfg.name\", builder.getStringAttr(output));"
    },
    {
        "line": 136,
        "fullcodeline": "res_attrs.push_back(output_attrs.getDictionary(context));"
    },
    {
        "line": 141,
        "fullcodeline": "builder.getArrayAttr(res_attrs)));"
    },
    {
        "line": 150,
        "fullcodeline": "Value arg = body->addArgument(std::get<0>(type_and_name), unknown_loc);"
    },
    {
        "line": 151,
        "fullcodeline": "llvm::StringMap<SmallVector<Value, 1>>& values ="
    },
    {
        "line": 153,
        "fullcodeline": "Value ctl = body->addArgument(control_ty, unknown_loc);"
    },
    {
        "line": 187,
        "fullcodeline": "output_name_to_position[output.name()] = res_num;"
    },
    {
        "line": 188,
        "fullcodeline": "++res_num;"
    },
    {
        "line": 195,
        "fullcodeline": "control_output_to_position[output] = res_num;"
    },
    {
        "line": 196,
        "fullcodeline": "++res_num;"
    },
    {
        "line": 205,
        "fullcodeline": "auto position = output_name_to_position.find(ret_val.first);"
    },
    {
        "line": 215,
        "fullcodeline": "auto position = control_output_to_position.find(ret_val.first);"
    },
    {
        "line": 221,
        "fullcodeline": "Value result = value_manager.GetValueOrCreatePlaceholder("
    },
    {
        "line": 235,
        "fullcodeline": "MutableArrayRef<Value> operands = ret_vals;"
    },
    {
        "line": 236,
        "fullcodeline": "ReturnOp ret_op = body_builder.create<ReturnOp>("
    },
    {
        "line": 13,
        "fullcodeline": "return InvalidArgument(\"generic function without a name\");"
    },
    {
        "line": 23,
        "fullcodeline": "control_outputs.push_back(builder.getStringAttr(output));"
    },
    {
        "line": 53,
        "fullcodeline": "attr_defs.append(builder.getNamedAttr("
    },
    {
        "line": 56,
        "fullcodeline": "if (!attr_defs.empty()) {"
    },
    {
        "line": 57,
        "fullcodeline": "func_attrs = attr_defs.getDictionary(builder.getContext());"
    },
    {
        "line": 58,
        "fullcodeline": "attrs.append(\"tfg.func_attrs\", func_attrs);"
    },
    {
        "line": 72,
        "fullcodeline": "builder.getI32TensorAttr(resource_arg_unique_ids_keys));"
    },
    {
        "line": 74,
        "fullcodeline": "builder.getI32TensorAttr(resource_arg_unique_ids_values));"
    },
    {
        "line": 114,
        "fullcodeline": "arg_names.push_back(builder.getStringAttr(input.name()).getValue());"
    },
    {
        "line": 115,
        "fullcodeline": "arg_types.push_back(OpaqueTensorType::get(context));"
    },
    {
        "line": 185,
        "fullcodeline": "if (output_name_to_position.count(output.name()))"
    },
    {
        "line": 193,
        "fullcodeline": "if (control_output_to_position.count(output))"
    },
    {
        "line": 212,
        "fullcodeline": "value_manager.GetValueOrCreatePlaceholder(ret_val.second);"
    },
    {
        "line": 216,
        "fullcodeline": "if (position == control_output_to_position.end())"
    },
    {
        "line": 230,
        "fullcodeline": "if (indexed_val.value()) continue;"
    },
    {
        "line": 231,
        "fullcodeline": "return InvalidArgument("
    },
    {
        "line": 245,
        "fullcodeline": "arg_types_with_ctl.push_back(type);"
    },
    {
        "line": 35,
        "fullcodeline": "if (attr.has_default_value()) {"
    },
    {
        "line": 47,
        "fullcodeline": "if (attr.has_allowed_values()) {"
    },
    {
        "line": 68,
        "fullcodeline": "resource_arg_unique_ids_keys.push_back(unique_id.first);"
    },
    {
        "line": 69,
        "fullcodeline": "resource_arg_unique_ids_values.push_back(unique_id.second);"
    },
    {
        "line": 103,
        "fullcodeline": "if (it != func.arg_attr().end()) {"
    },
    {
        "line": 111,
        "fullcodeline": "input_attrs.append(\"tfg.arg_attrs\","
    },
    {
        "line": 152,
        "fullcodeline": "values_map[std::get<1>(type_and_name)];"
    },
    {
        "line": 206,
        "fullcodeline": "if (position == output_name_to_position.end())"
    },
    {
        "line": 222,
        "fullcodeline": "(Twine(\"^\") + ret_val.second).str());"
    },
    {
        "line": 223,
        "fullcodeline": "if (!result.getType().isa<ControlType>())"
    },
    {
        "line": 233,
        "fullcodeline": "indexed_val.index());"
    },
    {
        "line": 30,
        "fullcodeline": "if (attr.name().empty())"
    },
    {
        "line": 32,
        "fullcodeline": "if (!attr.type().empty())"
    },
    {
        "line": 33,
        "fullcodeline": "attr_def.append(builder.getNamedAttr("
    },
    {
        "line": 39,
        "fullcodeline": "attr_def.append(builder.getNamedAttr(\"default_value\", attr));"
    },
    {
        "line": 41,
        "fullcodeline": "if (!attr.description().empty())"
    },
    {
        "line": 42,
        "fullcodeline": "attr_def.append(builder.getNamedAttr("
    },
    {
        "line": 44,
        "fullcodeline": "if (attr.has_minimum() || attr.minimum())"
    },
    {
        "line": 45,
        "fullcodeline": "attr_def.append(builder.getNamedAttr("
    },
    {
        "line": 51,
        "fullcodeline": "attr_def.append(builder.getNamedAttr(\"allowed_values\", attr));"
    },
    {
        "line": 54,
        "fullcodeline": "attr.name(), attr_def.getDictionary(builder.getContext())));"
    },
    {
        "line": 112,
        "fullcodeline": "arg_attr.getDictionary(builder.getContext()));"
    },
    {
        "line": 186,
        "fullcodeline": "return InvalidArgument(\"Duplicated output_arg entry\", output.name());"
    },
    {
        "line": 194,
        "fullcodeline": "return InvalidArgument(\"Duplicated control_output entry\", output);"
    },
    {
        "line": 207,
        "fullcodeline": "return InvalidArgument("
    },
    {
        "line": 217,
        "fullcodeline": "return InvalidArgument("
    },
    {
        "line": 224,
        "fullcodeline": "return InvalidArgument(\"failed to map returned value \", ret_val.second,"
    },
    {
        "line": 226,
        "fullcodeline": "ret_vals[func.ret_size() + position->second] = result;"
    },
    {
        "line": 31,
        "fullcodeline": "return InvalidArgument(\"Missing name for function attribute\");"
    },
    {
        "line": 109,
        "fullcodeline": "arg_attr.append(named_attr.first, attr);"
    },
    {
        "line": 34,
        "fullcodeline": "\"function_type\", builder.getStringAttr(attr.type())));"
    },
    {
        "line": 43,
        "fullcodeline": "\"description\", builder.getStringAttr(attr.description())));"
    },
    {
        "line": 46,
        "fullcodeline": "\"minimum\", builder.getI32IntegerAttr(attr.minimum())));"
    }
]