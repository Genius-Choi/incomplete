[
    {
        "line": 3,
        "fullcodeline": "unsigned int outputlen = 0;"
    },
    {
        "line": 4,
        "fullcodeline": "int desc = 0, alpha = 0;"
    },
    {
        "line": 5,
        "fullcodeline": "long limit_start = 0, limit_count = -1, start, end;"
    },
    {
        "line": 6,
        "fullcodeline": "int j, dontsort = 0, vectorlen;"
    },
    {
        "line": 7,
        "fullcodeline": "int getop = 0; /* GET operation counter */"
    },
    {
        "line": 8,
        "fullcodeline": "int int_conversion_error = 0;"
    },
    {
        "line": 9,
        "fullcodeline": "int syntax_error = 0;"
    },
    {
        "line": 10,
        "fullcodeline": "robj *sortval, *sortby = NULL, *storekey = NULL;"
    },
    {
        "line": 12,
        "fullcodeline": "int user_has_full_key_access = 0; /* ACL - used in order to verify 'get' and 'by' options can be used */"
    },
    {
        "line": 15,
        "fullcodeline": "operations = listCreate();"
    },
    {
        "line": 16,
        "fullcodeline": "listSetFreeMethod(operations,zfree);"
    },
    {
        "line": 17,
        "fullcodeline": "j = 2; /* options start at argv[2] */"
    },
    {
        "line": 19,
        "fullcodeline": "user_has_full_key_access = ACLUserCheckCmdWithUnrestrictedKeyAccess(c->user, c->cmd, c->argv, c->argc, CMD_KEY_ACCESS);"
    },
    {
        "line": 96,
        "fullcodeline": "sortval = lookupKeyRead(c->db, c->argv[1]);"
    },
    {
        "line": 144,
        "fullcodeline": "start = (limit_start < 0) ? 0 : limit_start;"
    },
    {
        "line": 145,
        "fullcodeline": "end = (limit_count < 0) ? vectorlen-1 : start+limit_count-1;"
    },
    {
        "line": 170,
        "fullcodeline": "vector = zmalloc(sizeof(redisSortObject)*vectorlen);"
    },
    {
        "line": 171,
        "fullcodeline": "j = 0;"
    },
    {
        "line": 274,
        "fullcodeline": "serverAssertWithInfo(c,sortval,j == vectorlen);"
    },
    {
        "line": 330,
        "fullcodeline": "outputlen = getop ? getop*(end-start+1) : end-start+1;"
    },
    {
        "line": 413,
        "fullcodeline": "decrRefCount(sortval);"
    },
    {
        "line": 414,
        "fullcodeline": "listRelease(operations);"
    },
    {
        "line": 419,
        "fullcodeline": "zfree(vector);"
    },
    {
        "line": 22,
        "fullcodeline": "while(j < c->argc) {"
    },
    {
        "line": 97,
        "fullcodeline": "if (sortval && sortval->type != OBJ_SET &&"
    },
    {
        "line": 121,
        "fullcodeline": "if (dontsort &&"
    },
    {
        "line": 132,
        "fullcodeline": "if (sortval->type == OBJ_ZSET)"
    },
    {
        "line": 146,
        "fullcodeline": "if (start >= vectorlen) {"
    },
    {
        "line": 150,
        "fullcodeline": "if (end >= vectorlen) end = vectorlen-1;"
    },
    {
        "line": 162,
        "fullcodeline": "if ((sortval->type == OBJ_ZSET || sortval->type == OBJ_LIST) &&"
    },
    {
        "line": 173,
        "fullcodeline": "if (sortval->type == OBJ_LIST && dontsort) {"
    },
    {
        "line": 277,
        "fullcodeline": "if (!dontsort) {"
    },
    {
        "line": 410,
        "fullcodeline": "for (j = 0; j < vectorlen; j++)"
    },
    {
        "line": 415,
        "fullcodeline": "for (j = 0; j < vectorlen; j++) {"
    },
    {
        "line": 23,
        "fullcodeline": "int leftargs = c->argc-j-1;"
    },
    {
        "line": 86,
        "fullcodeline": "j++;"
    },
    {
        "line": 91,
        "fullcodeline": "listRelease(operations);"
    },
    {
        "line": 99,
        "fullcodeline": "sortval->type != OBJ_ZSET)"
    },
    {
        "line": 101,
        "fullcodeline": "listRelease(operations);"
    },
    {
        "line": 102,
        "fullcodeline": "addReplyErrorObject(c,shared.wrongtypeerr);"
    },
    {
        "line": 110,
        "fullcodeline": "incrRefCount(sortval);"
    },
    {
        "line": 123,
        "fullcodeline": "(storekey || c->flags & CLIENT_SCRIPT))"
    },
    {
        "line": 126,
        "fullcodeline": "dontsort = 0;"
    },
    {
        "line": 127,
        "fullcodeline": "alpha = 1;"
    },
    {
        "line": 128,
        "fullcodeline": "sortby = NULL;"
    },
    {
        "line": 133,
        "fullcodeline": "zsetConvert(sortval, OBJ_ENCODING_SKIPLIST);"
    },
    {
        "line": 137,
        "fullcodeline": "case OBJ_LIST: vectorlen = listTypeLength(sortval); break;"
    },
    {
        "line": 138,
        "fullcodeline": "case OBJ_SET: vectorlen =  setTypeSize(sortval); break;"
    },
    {
        "line": 139,
        "fullcodeline": "case OBJ_ZSET: vectorlen = dictSize(((zset*)sortval->ptr)->dict); break;"
    },
    {
        "line": 140,
        "fullcodeline": "default: vectorlen = 0; serverPanic(\"Bad SORT type\"); /* Avoid GCC warning */"
    },
    {
        "line": 147,
        "fullcodeline": "start = vectorlen-1;"
    },
    {
        "line": 148,
        "fullcodeline": "end = vectorlen-2;"
    },
    {
        "line": 164,
        "fullcodeline": "(start != 0 || end != vectorlen-1))"
    },
    {
        "line": 166,
        "fullcodeline": "vectorlen = end-start+1;"
    },
    {
        "line": 318,
        "fullcodeline": "server.sort_desc = desc;"
    },
    {
        "line": 319,
        "fullcodeline": "server.sort_alpha = alpha;"
    },
    {
        "line": 320,
        "fullcodeline": "server.sort_bypattern = sortby ? 1 : 0;"
    },
    {
        "line": 321,
        "fullcodeline": "server.sort_store = storekey ? 1 : 0;"
    },
    {
        "line": 332,
        "fullcodeline": "addReplyError(c,\"One or more scores can't be converted into double\");"
    },
    {
        "line": 24,
        "fullcodeline": "if (!strcasecmp(c->argv[j]->ptr,\"asc\")) {"
    },
    {
        "line": 98,
        "fullcodeline": "sortval->type != OBJ_LIST &&"
    },
    {
        "line": 112,
        "fullcodeline": "sortval = createQuicklistObject();"
    },
    {
        "line": 122,
        "fullcodeline": "sortval->type == OBJ_SET &&"
    },
    {
        "line": 180,
        "fullcodeline": "if (end >= start) {"
    },
    {
        "line": 278,
        "fullcodeline": "for (j = 0; j < vectorlen; j++) {"
    },
    {
        "line": 322,
        "fullcodeline": "if (sortby && (start != 0 || end != vectorlen-1))"
    },
    {
        "line": 416,
        "fullcodeline": "if (alpha && vector[j].u.cmpobj)"
    },
    {
        "line": 25,
        "fullcodeline": "desc = 0;"
    },
    {
        "line": 183,
        "fullcodeline": "li = listTypeInitIterator(sortval,"
    },
    {
        "line": 193,
        "fullcodeline": "listTypeReleaseIterator(li);"
    },
    {
        "line": 195,
        "fullcodeline": "end -= start;"
    },
    {
        "line": 196,
        "fullcodeline": "start = 0;"
    },
    {
        "line": 198,
        "fullcodeline": "} else if (sortval->type == OBJ_LIST) {"
    },
    {
        "line": 323,
        "fullcodeline": "pqsort(vector,vectorlen,sizeof(redisSortObject),sortCompare, start,end);"
    },
    {
        "line": 333,
        "fullcodeline": "} else if (storekey == NULL) {"
    },
    {
        "line": 417,
        "fullcodeline": "decrRefCount(vector[j].u.cmpobj);"
    },
    {
        "line": 187,
        "fullcodeline": "while(j < vectorlen && listTypeNext(li,&entry)) {"
    },
    {
        "line": 199,
        "fullcodeline": "listTypeIterator *li = listTypeInitIterator(sortval,0,LIST_TAIL);"
    },
    {
        "line": 207,
        "fullcodeline": "listTypeReleaseIterator(li);"
    },
    {
        "line": 325,
        "fullcodeline": "qsort(vector,vectorlen,sizeof(redisSortObject),sortCompare);"
    },
    {
        "line": 335,
        "fullcodeline": "addReplyArrayLen(c,outputlen);"
    },
    {
        "line": 26,
        "fullcodeline": "} else if (!strcasecmp(c->argv[j]->ptr,\"desc\")) {"
    },
    {
        "line": 184,
        "fullcodeline": "desc ? (long)(listTypeLength(sortval) - start - 1) : start,"
    },
    {
        "line": 185,
        "fullcodeline": "desc ? LIST_HEAD : LIST_TAIL);"
    },
    {
        "line": 188,
        "fullcodeline": "vector[j].obj = listTypeGet(&entry);"
    },
    {
        "line": 189,
        "fullcodeline": "vector[j].u.score = 0;"
    },
    {
        "line": 190,
        "fullcodeline": "vector[j].u.cmpobj = NULL;"
    },
    {
        "line": 191,
        "fullcodeline": "j++;"
    },
    {
        "line": 201,
        "fullcodeline": "while(listTypeNext(li,&entry)) {"
    },
    {
        "line": 282,
        "fullcodeline": "byval = lookupKeyByPattern(c->db,sortby,vector[j].obj);"
    },
    {
        "line": 314,
        "fullcodeline": "decrRefCount(byval);"
    },
    {
        "line": 336,
        "fullcodeline": "for (j = start; j <= end; j++) {"
    },
    {
        "line": 363,
        "fullcodeline": "robj *sobj = createQuicklistObject();"
    },
    {
        "line": 405,
        "fullcodeline": "decrRefCount(sobj);"
    },
    {
        "line": 406,
        "fullcodeline": "addReplyLongLong(c,outputlen);"
    },
    {
        "line": 27,
        "fullcodeline": "desc = 1;"
    },
    {
        "line": 202,
        "fullcodeline": "vector[j].obj = listTypeGet(&entry);"
    },
    {
        "line": 203,
        "fullcodeline": "vector[j].u.score = 0;"
    },
    {
        "line": 204,
        "fullcodeline": "vector[j].u.cmpobj = NULL;"
    },
    {
        "line": 205,
        "fullcodeline": "j++;"
    },
    {
        "line": 208,
        "fullcodeline": "} else if (sortval->type == OBJ_SET) {"
    },
    {
        "line": 283,
        "fullcodeline": "if (!byval) continue;"
    },
    {
        "line": 341,
        "fullcodeline": "listRewind(operations,&li);"
    },
    {
        "line": 366,
        "fullcodeline": "for (j = start; j <= end; j++) {"
    },
    {
        "line": 209,
        "fullcodeline": "setTypeIterator *si = setTypeInitIterator(sortval);"
    },
    {
        "line": 217,
        "fullcodeline": "setTypeReleaseIterator(si);"
    },
    {
        "line": 290,
        "fullcodeline": "if (sortby) vector[j].u.cmpobj = getDecodedObject(byval);"
    },
    {
        "line": 292,
        "fullcodeline": "if (sdsEncodedObject(byval)) {"
    },
    {
        "line": 340,
        "fullcodeline": "if (!getop) addReplyBulk(c,vector[j].obj);"
    },
    {
        "line": 342,
        "fullcodeline": "while((ln = listNext(&li))) {"
    },
    {
        "line": 395,
        "fullcodeline": "listTypeTryConversion(sobj,LIST_CONV_AUTO,NULL,NULL);"
    },
    {
        "line": 396,
        "fullcodeline": "setKey(c,c->db,storekey,sobj,0);"
    },
    {
        "line": 397,
        "fullcodeline": "notifyKeyspaceEvent(NOTIFY_LIST,\"sortstore\",storekey,"
    },
    {
        "line": 399,
        "fullcodeline": "server.dirty += outputlen;"
    },
    {
        "line": 28,
        "fullcodeline": "} else if (!strcasecmp(c->argv[j]->ptr,\"alpha\")) {"
    },
    {
        "line": 211,
        "fullcodeline": "while((sdsele = setTypeNextObject(si)) != NULL) {"
    },
    {
        "line": 295,
        "fullcodeline": "vector[j].u.score = strtod(byval->ptr,&eptr);"
    },
    {
        "line": 343,
        "fullcodeline": "redisSortOperation *sop = ln->value;"
    },
    {
        "line": 344,
        "fullcodeline": "robj *val = lookupKeyByPattern(c->db,sop->pattern,"
    },
    {
        "line": 370,
        "fullcodeline": "if (!getop) {"
    },
    {
        "line": 29,
        "fullcodeline": "alpha = 1;"
    },
    {
        "line": 212,
        "fullcodeline": "vector[j].obj = createObject(OBJ_STRING,sdsele);"
    },
    {
        "line": 213,
        "fullcodeline": "vector[j].u.score = 0;"
    },
    {
        "line": 214,
        "fullcodeline": "vector[j].u.cmpobj = NULL;"
    },
    {
        "line": 215,
        "fullcodeline": "j++;"
    },
    {
        "line": 218,
        "fullcodeline": "} else if (sortval->type == OBJ_ZSET && dontsort) {"
    },
    {
        "line": 296,
        "fullcodeline": "if (eptr[0] != '\\0' || errno == ERANGE ||"
    },
    {
        "line": 347,
        "fullcodeline": "if (sop->type == SORT_OP_GET) {"
    },
    {
        "line": 371,
        "fullcodeline": "listTypePush(sobj,vector[j].obj,LIST_TAIL);"
    },
    {
        "line": 400,
        "fullcodeline": "} else if (dbDelete(c->db,storekey)) {"
    },
    {
        "line": 226,
        "fullcodeline": "zset *zs = sortval->ptr;"
    },
    {
        "line": 227,
        "fullcodeline": "zskiplist *zsl = zs->zsl;"
    },
    {
        "line": 230,
        "fullcodeline": "int rangelen = vectorlen;"
    },
    {
        "line": 255,
        "fullcodeline": "end -= start;"
    },
    {
        "line": 256,
        "fullcodeline": "start = 0;"
    },
    {
        "line": 297,
        "fullcodeline": "isnan(vector[j].u.score))"
    },
    {
        "line": 299,
        "fullcodeline": "int_conversion_error = 1;"
    },
    {
        "line": 301,
        "fullcodeline": "} else if (byval->encoding == OBJ_ENCODING_INT) {"
    },
    {
        "line": 373,
        "fullcodeline": "listRewind(operations,&li);"
    },
    {
        "line": 401,
        "fullcodeline": "signalModifiedKey(c,c->db,storekey);"
    },
    {
        "line": 402,
        "fullcodeline": "notifyKeyspaceEvent(NOTIFY_GENERIC,\"del\",storekey,c->db->id);"
    },
    {
        "line": 30,
        "fullcodeline": "} else if (!strcasecmp(c->argv[j]->ptr,\"limit\") && leftargs >= 2) {"
    },
    {
        "line": 245,
        "fullcodeline": "while(rangelen--) {"
    },
    {
        "line": 305,
        "fullcodeline": "vector[j].u.score = (long)byval->ptr;"
    },
    {
        "line": 348,
        "fullcodeline": "if (!val) {"
    },
    {
        "line": 356,
        "fullcodeline": "serverAssertWithInfo(c,sortval,sop->type == SORT_OP_GET);"
    },
    {
        "line": 374,
        "fullcodeline": "while((ln = listNext(&li))) {"
    },
    {
        "line": 39,
        "fullcodeline": "j+=2;"
    },
    {
        "line": 234,
        "fullcodeline": "long zsetlen = dictSize(((zset*)sortval->ptr)->dict);"
    },
    {
        "line": 236,
        "fullcodeline": "ln = zsl->tail;"
    },
    {
        "line": 246,
        "fullcodeline": "serverAssertWithInfo(c,sortval,ln != NULL);"
    },
    {
        "line": 247,
        "fullcodeline": "sdsele = ln->ele;"
    },
    {
        "line": 248,
        "fullcodeline": "vector[j].obj = createStringObject(sdsele,sdslen(sdsele));"
    },
    {
        "line": 249,
        "fullcodeline": "vector[j].u.score = 0;"
    },
    {
        "line": 250,
        "fullcodeline": "vector[j].u.cmpobj = NULL;"
    },
    {
        "line": 251,
        "fullcodeline": "j++;"
    },
    {
        "line": 252,
        "fullcodeline": "ln = desc ? ln->backward : ln->level[0].forward;"
    },
    {
        "line": 257,
        "fullcodeline": "} else if (sortval->type == OBJ_ZSET) {"
    },
    {
        "line": 307,
        "fullcodeline": "serverAssertWithInfo(c,sortval,1 != 1);"
    },
    {
        "line": 349,
        "fullcodeline": "addReplyNull(c);"
    },
    {
        "line": 375,
        "fullcodeline": "redisSortOperation *sop = ln->value;"
    },
    {
        "line": 376,
        "fullcodeline": "robj *val = lookupKeyByPattern(c->db,sop->pattern,"
    },
    {
        "line": 31,
        "fullcodeline": "if ((getLongFromObjectOrReply(c, c->argv[j+1], &limit_start, NULL)"
    },
    {
        "line": 237,
        "fullcodeline": "if (start > 0)"
    },
    {
        "line": 258,
        "fullcodeline": "dict *set = ((zset*)sortval->ptr)->dict;"
    },
    {
        "line": 262,
        "fullcodeline": "di = dictGetIterator(set);"
    },
    {
        "line": 270,
        "fullcodeline": "dictReleaseIterator(di);"
    },
    {
        "line": 351,
        "fullcodeline": "addReplyBulk(c,val);"
    },
    {
        "line": 352,
        "fullcodeline": "decrRefCount(val);"
    },
    {
        "line": 379,
        "fullcodeline": "if (sop->type == SORT_OP_GET) {"
    },
    {
        "line": 33,
        "fullcodeline": "(getLongFromObjectOrReply(c, c->argv[j+2], &limit_count, NULL)"
    },
    {
        "line": 36,
        "fullcodeline": "syntax_error++;"
    },
    {
        "line": 40,
        "fullcodeline": "} else if (readonly == 0 && !strcasecmp(c->argv[j]->ptr,\"store\") && leftargs >= 1) {"
    },
    {
        "line": 238,
        "fullcodeline": "ln = zslGetElementByRank(zsl,zsetlen-start);"
    },
    {
        "line": 241,
        "fullcodeline": "if (start > 0)"
    },
    {
        "line": 263,
        "fullcodeline": "while((setele = dictNext(di)) != NULL) {"
    },
    {
        "line": 272,
        "fullcodeline": "serverPanic(\"Unknown type\");"
    },
    {
        "line": 385,
        "fullcodeline": "listTypePush(sobj,val,LIST_TAIL);"
    },
    {
        "line": 386,
        "fullcodeline": "decrRefCount(val);"
    },
    {
        "line": 41,
        "fullcodeline": "storekey = c->argv[j+1];"
    },
    {
        "line": 42,
        "fullcodeline": "j++;"
    },
    {
        "line": 242,
        "fullcodeline": "ln = zslGetElementByRank(zsl,start+1);"
    },
    {
        "line": 264,
        "fullcodeline": "sdsele =  dictGetKey(setele);"
    },
    {
        "line": 265,
        "fullcodeline": "vector[j].obj = createStringObject(sdsele,sdslen(sdsele));"
    },
    {
        "line": 266,
        "fullcodeline": "vector[j].u.score = 0;"
    },
    {
        "line": 267,
        "fullcodeline": "vector[j].u.cmpobj = NULL;"
    },
    {
        "line": 268,
        "fullcodeline": "j++;"
    },
    {
        "line": 380,
        "fullcodeline": "if (!val) val = createStringObject(\"\",0);"
    },
    {
        "line": 389,
        "fullcodeline": "serverAssertWithInfo(c,sortval,sop->type == SORT_OP_GET);"
    },
    {
        "line": 43,
        "fullcodeline": "} else if (!strcasecmp(c->argv[j]->ptr,\"by\") && leftargs >= 1) {"
    },
    {
        "line": 44,
        "fullcodeline": "sortby = c->argv[j+1];"
    },
    {
        "line": 65,
        "fullcodeline": "j++;"
    },
    {
        "line": 47,
        "fullcodeline": "if (strchr(c->argv[j+1]->ptr,'*') == NULL) {"
    },
    {
        "line": 48,
        "fullcodeline": "dontsort = 1;"
    },
    {
        "line": 66,
        "fullcodeline": "} else if (!strcasecmp(c->argv[j]->ptr,\"get\") && leftargs >= 1) {"
    },
    {
        "line": 77,
        "fullcodeline": "listAddNodeTail(operations,createSortOperation("
    },
    {
        "line": 79,
        "fullcodeline": "getop++;"
    },
    {
        "line": 80,
        "fullcodeline": "j++;"
    },
    {
        "line": 59,
        "fullcodeline": "if (!user_has_full_key_access) {"
    },
    {
        "line": 72,
        "fullcodeline": "if (!user_has_full_key_access) {"
    },
    {
        "line": 82,
        "fullcodeline": "addReplyErrorObject(c,shared.syntaxerr);"
    },
    {
        "line": 83,
        "fullcodeline": "syntax_error++;"
    },
    {
        "line": 53,
        "fullcodeline": "addReplyError(c,\"BY option of SORT denied in Cluster mode.\");"
    },
    {
        "line": 54,
        "fullcodeline": "syntax_error++;"
    },
    {
        "line": 60,
        "fullcodeline": "addReplyError(c,\"BY option of SORT denied due to insufficient ACL permissions.\");"
    },
    {
        "line": 61,
        "fullcodeline": "syntax_error++;"
    },
    {
        "line": 68,
        "fullcodeline": "addReplyError(c,\"GET option of SORT denied in Cluster mode.\");"
    },
    {
        "line": 69,
        "fullcodeline": "syntax_error++;"
    },
    {
        "line": 73,
        "fullcodeline": "addReplyError(c,\"GET option of SORT denied due to insufficient ACL permissions.\");"
    },
    {
        "line": 74,
        "fullcodeline": "syntax_error++;"
    },
    {
        "line": 78,
        "fullcodeline": "SORT_OP_GET,c->argv[j+1]));"
    }
]