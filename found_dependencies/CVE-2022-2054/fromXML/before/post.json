[
    {
        "line": 2,
        "fullcodeline": "assert xml.tag == \"node\", xml"
    },
    {
        "line": 4,
        "fullcodeline": "kind, node_class, args, source_ref = extractKindAndArgsFromXML(xml, source_ref)"
    },
    {
        "line": 6,
        "fullcodeline": "if \"constant\" in args:"
    },
    {
        "line": 11,
        "fullcodeline": "if kind in ("
    },
    {
        "line": 25,
        "fullcodeline": "for child in xml:"
    },
    {
        "line": 9,
        "fullcodeline": "args[\"constant\"] = eval(args[\"constant\"])"
    },
    {
        "line": 18,
        "fullcodeline": "delayed = node_class.named_children"
    },
    {
        "line": 23,
        "fullcodeline": "delayed = ()"
    },
    {
        "line": 20,
        "fullcodeline": "if \"code_flags\" in args:"
    },
    {
        "line": 26,
        "fullcodeline": "assert child.tag == \"role\", child.tag"
    },
    {
        "line": 39,
        "fullcodeline": "return node_class.fromXML(provider=provider, source_ref=source_ref, **args)"
    },
    {
        "line": 21,
        "fullcodeline": "args[\"future_spec\"] = fromFlags(args[\"code_flags\"])"
    },
    {
        "line": 33,
        "fullcodeline": "if child_name not in delayed:"
    },
    {
        "line": 41,
        "fullcodeline": "Tracing.printLine(node_class, args, source_ref)"
    },
    {
        "line": 42,
        "fullcodeline": "raise"
    },
    {
        "line": 34,
        "fullcodeline": "args[child_name] = makeChild(provider, child, source_ref)"
    },
    {
        "line": 36,
        "fullcodeline": "args[child_name] = child"
    }
]