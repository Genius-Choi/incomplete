[
    {
        "line": 3,
        "fullcodeline": "MonoImage *image = method->klass->image;"
    },
    {
        "line": 4,
        "fullcodeline": "MonoMethodPInvoke *piinfo = (MonoMethodPInvoke *)method;"
    },
    {
        "line": 5,
        "fullcodeline": "MonoTableInfo *tables = image->tables;"
    },
    {
        "line": 6,
        "fullcodeline": "MonoTableInfo *im = &tables [MONO_TABLE_IMPLMAP];"
    },
    {
        "line": 7,
        "fullcodeline": "MonoTableInfo *mr = &tables [MONO_TABLE_MODULEREF];"
    },
    {
        "line": 8,
        "fullcodeline": "guint32 im_cols [MONO_IMPLMAP_SIZE];"
    },
    {
        "line": 10,
        "fullcodeline": "const char *import = NULL;"
    },
    {
        "line": 16,
        "fullcodeline": "MonoDl *module = NULL;"
    },
    {
        "line": 18,
        "fullcodeline": "g_assert (method->flags & METHOD_ATTRIBUTE_PINVOKE_IMPL);"
    },
    {
        "line": 45,
        "fullcodeline": "mono_dllmap_lookup (image, orig_scope, import, &new_scope, &import);"
    },
    {
        "line": 47,
        "fullcodeline": "mono_trace (G_LOG_LEVEL_INFO, MONO_TRACE_DLLIMPORT,"
    },
    {
        "line": 177,
        "fullcodeline": "mono_trace (G_LOG_LEVEL_INFO, MONO_TRACE_DLLIMPORT,"
    },
    {
        "line": 62,
        "fullcodeline": "for (i = 0; i < 4; ++i) {"
    },
    {
        "line": 154,
        "fullcodeline": "if (!module) {"
    },
    {
        "line": 180,
        "fullcodeline": "if (piinfo->piflags & PINVOKE_ATTRIBUTE_NO_MANGLE) {"
    },
    {
        "line": 24,
        "fullcodeline": "MonoReflectionMethodAux *method_aux ="
    },
    {
        "line": 30,
        "fullcodeline": "import = method_aux->dllentry;"
    },
    {
        "line": 31,
        "fullcodeline": "orig_scope = method_aux->dll;"
    },
    {
        "line": 56,
        "fullcodeline": "if (strcmp (new_scope, \"__Internal\") == 0)"
    },
    {
        "line": 57,
        "fullcodeline": "module = mono_dl_open (NULL, MONO_DL_LAZY, &error_msg);"
    },
    {
        "line": 155,
        "fullcodeline": "mono_trace (G_LOG_LEVEL_WARNING, MONO_TRACE_DLLIMPORT,"
    },
    {
        "line": 181,
        "fullcodeline": "error_msg = mono_dl_symbol (module, import, &piinfo->addr);"
    },
    {
        "line": 25,
        "fullcodeline": "g_hash_table_lookup ("
    },
    {
        "line": 27,
        "fullcodeline": "if (!method_aux)"
    },
    {
        "line": 37,
        "fullcodeline": "mono_metadata_decode_row (im, piinfo->implmap_idx - 1, im_cols, MONO_IMPLMAP_SIZE);"
    },
    {
        "line": 39,
        "fullcodeline": "piinfo->piflags = im_cols [MONO_IMPLMAP_FLAGS];"
    },
    {
        "line": 40,
        "fullcodeline": "import = mono_metadata_string_heap (image, im_cols [MONO_IMPLMAP_NAME]);"
    },
    {
        "line": 41,
        "fullcodeline": "scope_token = mono_metadata_decode_row_col (mr, im_cols [MONO_IMPLMAP_SCOPE] - 1, MONO_MODULEREF_NAME);"
    },
    {
        "line": 42,
        "fullcodeline": "orig_scope = mono_metadata_string_heap (image, scope_token);"
    },
    {
        "line": 99,
        "fullcodeline": "if (!module) {"
    },
    {
        "line": 119,
        "fullcodeline": "if (!module) {"
    },
    {
        "line": 137,
        "fullcodeline": "if (!module) {"
    },
    {
        "line": 34,
        "fullcodeline": "if (!piinfo->implmap_idx)"
    },
    {
        "line": 66,
        "fullcodeline": "file_name = g_strdup (new_scope);"
    },
    {
        "line": 100,
        "fullcodeline": "void *iter = NULL;"
    },
    {
        "line": 101,
        "fullcodeline": "char *mdirname = g_path_get_dirname (image->name);"
    },
    {
        "line": 120,
        "fullcodeline": "void *iter = NULL;"
    },
    {
        "line": 138,
        "fullcodeline": "mono_trace (G_LOG_LEVEL_INFO, MONO_TRACE_DLLIMPORT,"
    },
    {
        "line": 140,
        "fullcodeline": "module = cached_module_load (file_name, MONO_DL_LAZY, &error_msg);"
    },
    {
        "line": 194,
        "fullcodeline": "for (mangle_charset = 0; mangle_charset <= 1; mangle_charset ++) {"
    },
    {
        "line": 78,
        "fullcodeline": "if (strstr (new_scope, \"lib\") != new_scope) {"
    },
    {
        "line": 102,
        "fullcodeline": "while ((full_name = mono_dl_build_path (mdirname, file_name, &iter))) {"
    },
    {
        "line": 121,
        "fullcodeline": "while ((full_name = mono_dl_build_path (NULL, file_name, &iter))) {"
    },
    {
        "line": 141,
        "fullcodeline": "if (!module) {"
    },
    {
        "line": 70,
        "fullcodeline": "if (strstr (new_scope, \".dll\") == (new_scope + strlen (new_scope) - 4)) {"
    },
    {
        "line": 71,
        "fullcodeline": "file_name = g_strdup (new_scope);"
    },
    {
        "line": 72,
        "fullcodeline": "file_name [strlen (new_scope) - 4] = '\\0';"
    },
    {
        "line": 79,
        "fullcodeline": "file_name = g_strdup_printf (\"lib%s\", new_scope);"
    },
    {
        "line": 86,
        "fullcodeline": "if (!g_ascii_strcasecmp (\"user32.dll\", new_scope) ||"
    },
    {
        "line": 89,
        "fullcodeline": "!g_ascii_strcasecmp (\"kernel\", new_scope)) {"
    },
    {
        "line": 90,
        "fullcodeline": "file_name = g_strdup (\"libMonoSupportW.so\");"
    },
    {
        "line": 103,
        "fullcodeline": "mono_trace (G_LOG_LEVEL_INFO, MONO_TRACE_DLLIMPORT,"
    },
    {
        "line": 105,
        "fullcodeline": "module = cached_module_load (full_name, MONO_DL_LAZY, &error_msg);"
    },
    {
        "line": 122,
        "fullcodeline": "mono_trace (G_LOG_LEVEL_INFO, MONO_TRACE_DLLIMPORT,"
    },
    {
        "line": 124,
        "fullcodeline": "module = cached_module_load (full_name, MONO_DL_LAZY, &error_msg);"
    },
    {
        "line": 142,
        "fullcodeline": "mono_trace (G_LOG_LEVEL_INFO, MONO_TRACE_DLLIMPORT,"
    },
    {
        "line": 195,
        "fullcodeline": "for (mangle_stdcall = 0; mangle_stdcall <= 1; mangle_stdcall ++) {"
    },
    {
        "line": 88,
        "fullcodeline": "!g_ascii_strcasecmp (\"user32\", new_scope) ||"
    },
    {
        "line": 106,
        "fullcodeline": "if (!module) {"
    },
    {
        "line": 125,
        "fullcodeline": "if (!module) {"
    },
    {
        "line": 196,
        "fullcodeline": "gboolean need_param_count = FALSE;"
    },
    {
        "line": 87,
        "fullcodeline": "!g_ascii_strcasecmp (\"kernel32.dll\", new_scope) ||"
    },
    {
        "line": 107,
        "fullcodeline": "mono_trace (G_LOG_LEVEL_INFO, MONO_TRACE_DLLIMPORT,"
    },
    {
        "line": 110,
        "fullcodeline": "g_free (error_msg);"
    },
    {
        "line": 126,
        "fullcodeline": "mono_trace (G_LOG_LEVEL_INFO, MONO_TRACE_DLLIMPORT,"
    },
    {
        "line": 129,
        "fullcodeline": "g_free (error_msg);"
    },
    {
        "line": 201,
        "fullcodeline": "for (mangle_param_count = 0; mangle_param_count <= (need_param_count ? 256 : 0); mangle_param_count += 4) {"
    },
    {
        "line": 206,
        "fullcodeline": "mangled_name = (char*)import;"
    },
    {
        "line": 248,
        "fullcodeline": "mangled_name2 = mangled_name;"
    },
    {
        "line": 251,
        "fullcodeline": "mono_trace (G_LOG_LEVEL_INFO, MONO_TRACE_DLLIMPORT,"
    },
    {
        "line": 254,
        "fullcodeline": "error_msg = mono_dl_symbol (module, mangled_name2, &piinfo->addr);"
    },
    {
        "line": 207,
        "fullcodeline": "switch (piinfo->piflags & PINVOKE_ATTRIBUTE_CHAR_SET_MASK) {"
    },
    {
        "line": 260,
        "fullcodeline": "if (mangled_name != mangled_name2)"
    },
    {
        "line": 262,
        "fullcodeline": "if (mangled_name != import)"
    },
    {
        "line": 257,
        "fullcodeline": "mono_trace (G_LOG_LEVEL_INFO, MONO_TRACE_DLLIMPORT,"
    },
    {
        "line": 210,
        "fullcodeline": "if (mangle_charset == 0)"
    },
    {
        "line": 219,
        "fullcodeline": "if (mangle_charset == 1)"
    },
    {
        "line": 226,
        "fullcodeline": "if (mangle_charset == 1)"
    },
    {
        "line": 211,
        "fullcodeline": "mangled_name = g_strconcat (import, \"W\", NULL);"
    },
    {
        "line": 220,
        "fullcodeline": "mangled_name = g_strconcat (import, \"A\", NULL);"
    },
    {
        "line": 227,
        "fullcodeline": "mangled_name = g_strconcat (import, \"A\", NULL);"
    }
]