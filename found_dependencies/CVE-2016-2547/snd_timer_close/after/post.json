[
    {
        "line": 3,
        "fullcodeline": "struct snd_timer *timer = NULL;"
    },
    {
        "line": 10,
        "fullcodeline": "snd_timer_stop(timeri);"
    },
    {
        "line": 59,
        "fullcodeline": "kfree(timeri->owner);"
    },
    {
        "line": 60,
        "fullcodeline": "kfree(timeri);"
    },
    {
        "line": 6,
        "fullcodeline": "if (snd_BUG_ON(!timeri))"
    },
    {
        "line": 12,
        "fullcodeline": "if (timeri->flags & SNDRV_TIMER_IFLG_SLAVE) {"
    },
    {
        "line": 14,
        "fullcodeline": "spin_lock_irq(&slave_active_lock);"
    },
    {
        "line": 20,
        "fullcodeline": "spin_unlock_irq(&slave_active_lock);"
    },
    {
        "line": 21,
        "fullcodeline": "mutex_lock(&register_mutex);"
    },
    {
        "line": 22,
        "fullcodeline": "list_del(&timeri->open_list);"
    },
    {
        "line": 23,
        "fullcodeline": "mutex_unlock(&register_mutex);"
    },
    {
        "line": 58,
        "fullcodeline": "timeri->private_free(timeri);"
    },
    {
        "line": 62,
        "fullcodeline": "module_put(timer->module);"
    },
    {
        "line": 7,
        "fullcodeline": "return -ENXIO;"
    },
    {
        "line": 15,
        "fullcodeline": "while (timeri->flags & SNDRV_TIMER_IFLG_CALLBACK) {"
    },
    {
        "line": 25,
        "fullcodeline": "timer = timeri->timer;"
    },
    {
        "line": 29,
        "fullcodeline": "spin_lock_irq(&timer->lock);"
    },
    {
        "line": 35,
        "fullcodeline": "spin_unlock_irq(&timer->lock);"
    },
    {
        "line": 36,
        "fullcodeline": "mutex_lock(&register_mutex);"
    },
    {
        "line": 37,
        "fullcodeline": "list_del(&timeri->open_list);"
    },
    {
        "line": 42,
        "fullcodeline": "spin_lock_irq(&slave_active_lock);"
    },
    {
        "line": 43,
        "fullcodeline": "spin_lock(&timer->lock);"
    },
    {
        "line": 44,
        "fullcodeline": "list_for_each_entry_safe(slave, tmp, &timeri->slave_list_head,"
    },
    {
        "line": 52,
        "fullcodeline": "spin_unlock(&timer->lock);"
    },
    {
        "line": 53,
        "fullcodeline": "spin_unlock_irq(&slave_active_lock);"
    },
    {
        "line": 54,
        "fullcodeline": "mutex_unlock(&register_mutex);"
    },
    {
        "line": 16,
        "fullcodeline": "spin_unlock_irq(&slave_active_lock);"
    },
    {
        "line": 17,
        "fullcodeline": "udelay(10);"
    },
    {
        "line": 18,
        "fullcodeline": "spin_lock_irq(&slave_active_lock);"
    },
    {
        "line": 26,
        "fullcodeline": "if (snd_BUG_ON(!timer))"
    },
    {
        "line": 30,
        "fullcodeline": "while (timeri->flags & SNDRV_TIMER_IFLG_CALLBACK) {"
    },
    {
        "line": 38,
        "fullcodeline": "if (timer && list_empty(&timer->open_list_head) &&"
    },
    {
        "line": 46,
        "fullcodeline": "list_move_tail(&slave->open_list, &snd_timer_slave_list);"
    },
    {
        "line": 47,
        "fullcodeline": "slave->master = NULL;"
    },
    {
        "line": 48,
        "fullcodeline": "slave->timer = NULL;"
    },
    {
        "line": 49,
        "fullcodeline": "list_del_init(&slave->ack_list);"
    },
    {
        "line": 50,
        "fullcodeline": "list_del_init(&slave->active_list);"
    },
    {
        "line": 31,
        "fullcodeline": "spin_unlock_irq(&timer->lock);"
    },
    {
        "line": 32,
        "fullcodeline": "udelay(10);"
    },
    {
        "line": 33,
        "fullcodeline": "spin_lock_irq(&timer->lock);"
    },
    {
        "line": 40,
        "fullcodeline": "timer->hw.close(timer);"
    }
]