[
    {
        "line": 11,
        "fullcodeline": "mem_zero(&Packet, sizeof(CNetChunk));"
    },
    {
        "line": 12,
        "fullcodeline": "Packet.m_ClientID = ClientID;"
    },
    {
        "line": 13,
        "fullcodeline": "Packet.m_pData = pMsg->Data();"
    },
    {
        "line": 14,
        "fullcodeline": "Packet.m_DataSize = pMsg->Size();"
    },
    {
        "line": 4,
        "fullcodeline": "if(!pMsg)"
    },
    {
        "line": 8,
        "fullcodeline": "if(ClientID != -1 && (ClientID < 0 || ClientID >= MAX_CLIENTS || m_aClients[ClientID].m_State == CClient::STATE_EMPTY || m_aClients[ClientID].m_Quitting))"
    },
    {
        "line": 16,
        "fullcodeline": "if(Flags&MSGFLAG_VITAL)"
    },
    {
        "line": 18,
        "fullcodeline": "if(Flags&MSGFLAG_FLUSH)"
    },
    {
        "line": 22,
        "fullcodeline": "if(!(Flags&MSGFLAG_NORECORD))"
    },
    {
        "line": 25,
        "fullcodeline": "if(!(Flags&MSGFLAG_NOSEND))"
    },
    {
        "line": 17,
        "fullcodeline": "Packet.m_Flags |= NETSENDFLAG_VITAL;"
    },
    {
        "line": 19,
        "fullcodeline": "Packet.m_Flags |= NETSENDFLAG_FLUSH;"
    },
    {
        "line": 23,
        "fullcodeline": "m_DemoRecorder.RecordMessage(pMsg->Data(), pMsg->Size());"
    },
    {
        "line": 5,
        "fullcodeline": "return -1;"
    },
    {
        "line": 27,
        "fullcodeline": "if(ClientID == -1)"
    },
    {
        "line": 31,
        "fullcodeline": "for(i = 0; i < MAX_CLIENTS; i++)"
    },
    {
        "line": 39,
        "fullcodeline": "m_NetServer.Send(&Packet);"
    },
    {
        "line": 32,
        "fullcodeline": "if(m_aClients[i].m_State == CClient::STATE_INGAME && !m_aClients[i].m_Quitting)"
    },
    {
        "line": 34,
        "fullcodeline": "Packet.m_ClientID = i;"
    },
    {
        "line": 35,
        "fullcodeline": "m_NetServer.Send(&Packet);"
    }
]