[
    {
        "line": 36,
        "fullcodeline": "*pcd_table[3];"
    },
    {
        "line": 53,
        "fullcodeline": "pcd_length[3],"
    },
    {
        "line": 67,
        "fullcodeline": "assert(image != (const Image *) NULL);"
    },
    {
        "line": 68,
        "fullcodeline": "assert(image->signature == MagickCoreSignature);"
    },
    {
        "line": 71,
        "fullcodeline": "assert(luma != (unsigned char *) NULL);"
    },
    {
        "line": 72,
        "fullcodeline": "assert(chroma1 != (unsigned char *) NULL);"
    },
    {
        "line": 73,
        "fullcodeline": "assert(chroma2 != (unsigned char *) NULL);"
    },
    {
        "line": 74,
        "fullcodeline": "buffer=(unsigned char *) AcquireQuantumMemory(0x800,sizeof(*buffer));"
    },
    {
        "line": 78,
        "fullcodeline": "sum=0;"
    },
    {
        "line": 79,
        "fullcodeline": "bits=32;"
    },
    {
        "line": 80,
        "fullcodeline": "p=buffer+0x800;"
    },
    {
        "line": 135,
        "fullcodeline": "count=0;"
    },
    {
        "line": 136,
        "fullcodeline": "length=0;"
    },
    {
        "line": 137,
        "fullcodeline": "plane=0;"
    },
    {
        "line": 138,
        "fullcodeline": "row=0;"
    },
    {
        "line": 139,
        "fullcodeline": "q=luma;"
    },
    {
        "line": 218,
        "fullcodeline": "buffer=(unsigned char *) RelinquishMagickMemory(buffer);"
    },
    {
        "line": 69,
        "fullcodeline": "if (image->debug != MagickFalse)"
    },
    {
        "line": 75,
        "fullcodeline": "if (buffer == (unsigned char *) NULL)"
    },
    {
        "line": 81,
        "fullcodeline": "for (i=0; i < 3; i++)"
    },
    {
        "line": 86,
        "fullcodeline": "for (i=0; i < (image->columns > 1536 ? 3 : 1); i++)"
    },
    {
        "line": 124,
        "fullcodeline": "for (i=0; i < 1; i++)"
    },
    {
        "line": 125,
        "fullcodeline": "PCDGetBits(16);"
    },
    {
        "line": 126,
        "fullcodeline": "for (i=0; i < 1; i++)"
    },
    {
        "line": 127,
        "fullcodeline": "PCDGetBits(16);"
    },
    {
        "line": 128,
        "fullcodeline": "while ((sum & 0x00fff000UL) != 0x00fff000UL)"
    },
    {
        "line": 129,
        "fullcodeline": "PCDGetBits(8);"
    },
    {
        "line": 130,
        "fullcodeline": "while (IsSync(sum) == 0)"
    },
    {
        "line": 131,
        "fullcodeline": "PCDGetBits(1);"
    },
    {
        "line": 216,
        "fullcodeline": "for (i=0; i < (image->columns > 1536 ? 3 : 1); i++)"
    },
    {
        "line": 217,
        "fullcodeline": "pcd_table[i]=(PCDTable *) RelinquishMagickMemory(pcd_table[i]);"
    },
    {
        "line": 70,
        "fullcodeline": "(void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",image->filename);"
    },
    {
        "line": 76,
        "fullcodeline": "ThrowBinaryException(ResourceLimitError,\"MemoryAllocationFailed\","
    },
    {
        "line": 83,
        "fullcodeline": "pcd_table[i]=(PCDTable *) NULL;"
    },
    {
        "line": 84,
        "fullcodeline": "pcd_length[i]=0;"
    },
    {
        "line": 88,
        "fullcodeline": "PCDGetBits(8);"
    },
    {
        "line": 89,
        "fullcodeline": "length=(sum & 0xff)+1;"
    },
    {
        "line": 90,
        "fullcodeline": "pcd_table[i]=(PCDTable *) AcquireQuantumMemory(length,"
    },
    {
        "line": 100,
        "fullcodeline": "r=pcd_table[i];"
    },
    {
        "line": 119,
        "fullcodeline": "pcd_length[i]=(size_t) length;"
    },
    {
        "line": 191,
        "fullcodeline": "r=pcd_table[plane];"
    },
    {
        "line": 208,
        "fullcodeline": "*q=(unsigned char) ((quantum < 0) ? 0 : (quantum > 255) ? 255 : quantum);"
    },
    {
        "line": 209,
        "fullcodeline": "q++;"
    },
    {
        "line": 210,
        "fullcodeline": "PCDGetBits(r->length);"
    },
    {
        "line": 211,
        "fullcodeline": "count--;"
    },
    {
        "line": 92,
        "fullcodeline": "if (pcd_table[i] == (PCDTable *) NULL)"
    },
    {
        "line": 101,
        "fullcodeline": "for (j=0; j < (ssize_t) length; j++)"
    },
    {
        "line": 142,
        "fullcodeline": "if (IsSync(sum) != 0)"
    },
    {
        "line": 192,
        "fullcodeline": "for (i=0; ((i < (ssize_t) length) && ((sum & r->mask) != r->sequence)); i++)"
    },
    {
        "line": 193,
        "fullcodeline": "r++;"
    },
    {
        "line": 194,
        "fullcodeline": "if ((row > image->rows) || (r == (PCDTable *) NULL))"
    },
    {
        "line": 204,
        "fullcodeline": "if (r->key < 128)"
    },
    {
        "line": 94,
        "fullcodeline": "buffer=(unsigned char *) RelinquishMagickMemory(buffer);"
    },
    {
        "line": 97,
        "fullcodeline": "ThrowBinaryException(ResourceLimitError,\"MemoryAllocationFailed\","
    },
    {
        "line": 103,
        "fullcodeline": "PCDGetBits(8);"
    },
    {
        "line": 104,
        "fullcodeline": "r->length=(unsigned int) (sum & 0xff)+1;"
    },
    {
        "line": 112,
        "fullcodeline": "PCDGetBits(16);"
    },
    {
        "line": 113,
        "fullcodeline": "r->sequence=(unsigned int) (sum & 0xffff) << 16;"
    },
    {
        "line": 114,
        "fullcodeline": "PCDGetBits(8);"
    },
    {
        "line": 115,
        "fullcodeline": "r->key=(unsigned char) (sum & 0xff);"
    },
    {
        "line": 116,
        "fullcodeline": "r->mask=(~((1U << (32-r->length))-1));"
    },
    {
        "line": 117,
        "fullcodeline": "r++;"
    },
    {
        "line": 147,
        "fullcodeline": "PCDGetBits(16);"
    },
    {
        "line": 148,
        "fullcodeline": "row=((sum >> 9) & 0x1fff);"
    },
    {
        "line": 151,
        "fullcodeline": "PCDGetBits(8);"
    },
    {
        "line": 152,
        "fullcodeline": "plane=sum >> 30;"
    },
    {
        "line": 153,
        "fullcodeline": "PCDGetBits(16);"
    },
    {
        "line": 185,
        "fullcodeline": "length=pcd_length[plane];"
    },
    {
        "line": 196,
        "fullcodeline": "(void) ThrowMagickException(exception,GetMagickModule(),"
    },
    {
        "line": 205,
        "fullcodeline": "quantum=(ssize_t) (*q)+r->key;"
    },
    {
        "line": 95,
        "fullcodeline": "for (j=0; j < i; j++)"
    },
    {
        "line": 96,
        "fullcodeline": "pcd_table[j]=(PCDTable *) RelinquishMagickMemory(pcd_table[j]);"
    },
    {
        "line": 105,
        "fullcodeline": "if (r->length > 16)"
    },
    {
        "line": 149,
        "fullcodeline": "if (row == image->rows)"
    },
    {
        "line": 198,
        "fullcodeline": "while ((sum & 0x00fff000) != 0x00fff000)"
    },
    {
        "line": 199,
        "fullcodeline": "PCDGetBits(8);"
    },
    {
        "line": 200,
        "fullcodeline": "while (IsSync(sum) == 0)"
    },
    {
        "line": 201,
        "fullcodeline": "PCDGetBits(1);"
    },
    {
        "line": 207,
        "fullcodeline": "quantum=(ssize_t) (*q)+r->key-256;"
    },
    {
        "line": 107,
        "fullcodeline": "buffer=(unsigned char *) RelinquishMagickMemory(buffer);"
    },
    {
        "line": 108,
        "fullcodeline": "for (j=0; j <= i; j++)"
    },
    {
        "line": 109,
        "fullcodeline": "pcd_table[j]=(PCDTable *) RelinquishMagickMemory(pcd_table[j]);"
    },
    {
        "line": 158,
        "fullcodeline": "q=luma+row*image->columns;"
    },
    {
        "line": 159,
        "fullcodeline": "count=(ssize_t) image->columns;"
    },
    {
        "line": 164,
        "fullcodeline": "q=chroma1+(row >> 1)*image->columns;"
    },
    {
        "line": 165,
        "fullcodeline": "count=(ssize_t) (image->columns >> 1);"
    },
    {
        "line": 166,
        "fullcodeline": "plane--;"
    },
    {
        "line": 171,
        "fullcodeline": "q=chroma2+(row >> 1)*image->columns;"
    },
    {
        "line": 172,
        "fullcodeline": "count=(ssize_t) (image->columns >> 1);"
    },
    {
        "line": 173,
        "fullcodeline": "plane--;"
    },
    {
        "line": 180,
        "fullcodeline": "buffer=(unsigned char *) RelinquishMagickMemory(buffer);"
    },
    {
        "line": 181,
        "fullcodeline": "ThrowBinaryException(CorruptImageError,\"CorruptImage\","
    },
    {
        "line": 178,
        "fullcodeline": "for (i=0; i < (image->columns > 1536 ? 3 : 1); i++)"
    },
    {
        "line": 179,
        "fullcodeline": "pcd_table[i]=(PCDTable *) RelinquishMagickMemory(pcd_table[i]);"
    }
]