[
    {
        "line": 4,
        "fullcodeline": "int i = 0;"
    },
    {
        "line": 5,
        "fullcodeline": "if (i + 3 < data_size && data[i] == 0xFF && data[i+1] == 0xD8 &&"
    },
    {
        "line": 30,
        "fullcodeline": "return -1;"
    },
    {
        "line": 6,
        "fullcodeline": "data[i+2] == 0xFF && data[i+3] == 0xE0) {"
    },
    {
        "line": 7,
        "fullcodeline": "i += 4;"
    },
    {
        "line": 8,
        "fullcodeline": "if(i + 6 < data_size &&"
    },
    {
        "line": 10,
        "fullcodeline": "data[i+5] == 'F' && data[i+6] == 0x00) {"
    },
    {
        "line": 11,
        "fullcodeline": "unsigned short block_length = data[i] * 256 + data[i+1];"
    },
    {
        "line": 12,
        "fullcodeline": "while(i<data_size) {"
    },
    {
        "line": 9,
        "fullcodeline": "data[i+2] == 'J' && data[i+3] == 'F' && data[i+4] == 'I' &&"
    },
    {
        "line": 13,
        "fullcodeline": "i+=block_length;"
    },
    {
        "line": 23,
        "fullcodeline": "i+=2;"
    },
    {
        "line": 14,
        "fullcodeline": "if((i + 1) >= data_size)"
    },
    {
        "line": 16,
        "fullcodeline": "if(data[i] != 0xFF)"
    },
    {
        "line": 18,
        "fullcodeline": "if(data[i+1] == 0xC0) {"
    },
    {
        "line": 24,
        "fullcodeline": "if (i + 1 < data_size)"
    },
    {
        "line": 19,
        "fullcodeline": "*height = data[i+5]*256 + data[i+6];"
    },
    {
        "line": 20,
        "fullcodeline": "*width = data[i+7]*256 + data[i+8];"
    },
    {
        "line": 25,
        "fullcodeline": "block_length = data[i] * 256 + data[i+1];"
    },
    {
        "line": 15,
        "fullcodeline": "return -1;"
    },
    {
        "line": 17,
        "fullcodeline": "return -1;"
    }
]