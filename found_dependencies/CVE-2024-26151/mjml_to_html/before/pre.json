[
    {
        "line": 3,
        "fullcodeline": "register_core_components()"
    },
    {
        "line": 15,
        "fullcodeline": "mjml_doc = BeautifulSoup(xml_fp, 'html.parser')"
    },
    {
        "line": 16,
        "fullcodeline": "mjml_root = mjml_doc.mjml"
    },
    {
        "line": 18,
        "fullcodeline": "skeleton_path = skeleton"
    },
    {
        "line": 21,
        "fullcodeline": "skeleton = default_skeleton"
    },
    {
        "line": 26,
        "fullcodeline": "fonts = {"
    },
    {
        "line": 35,
        "fullcodeline": "globalDatas = AttrDict({"
    },
    {
        "line": 55,
        "fullcodeline": "validationLevel = 'skip' # noqa: F841"
    },
    {
        "line": 56,
        "fullcodeline": "errors = []"
    },
    {
        "line": 59,
        "fullcodeline": "mjBody = mjml_root('mj-body')[0]"
    },
    {
        "line": 60,
        "fullcodeline": "mjHead = mjml_root('mj-head')"
    },
    {
        "line": 65,
        "fullcodeline": "def processing(node, context, parseMJML=None):"
    },
    {
        "line": 83,
        "fullcodeline": "def applyAttributes(mjml_element):"
    },
    {
        "line": 142,
        "fullcodeline": "def addHeadStyle(identifier, headStyle):"
    },
    {
        "line": 145,
        "fullcodeline": "def addMediaQuery(className, parsedWidth, unit):"
    },
    {
        "line": 150,
        "fullcodeline": "def addComponentHeadSyle(headStyle):"
    },
    {
        "line": 153,
        "fullcodeline": "def setBackgroundColor(color):"
    },
    {
        "line": 156,
        "fullcodeline": "bodyHelpers = AttrDict("
    },
    {
        "line": 164,
        "fullcodeline": "def _head_data_add(attr, *params):"
    },
    {
        "line": 182,
        "fullcodeline": "headHelpers = AttrDict("
    },
    {
        "line": 185,
        "fullcodeline": "globalDatas.headRaw = processing(mjHead, headHelpers)"
    },
    {
        "line": 186,
        "fullcodeline": "content = processing(mjBody, bodyHelpers, applyAttributes)"
    },
    {
        "line": 197,
        "fullcodeline": "content = skeleton("
    },
    {
        "line": 221,
        "fullcodeline": "content = mergeOutlookConditionnals(content)"
    },
    {
        "line": 5,
        "fullcodeline": "if isinstance(xml_fp_or_json, dict):"
    },
    {
        "line": 12,
        "fullcodeline": "if template_dir is None and hasattr(xml_fp, 'name'):"
    },
    {
        "line": 206,
        "fullcodeline": "if len(globalDatas.inlineStyle) > 0:"
    },
    {
        "line": 223,
        "fullcodeline": "return AttrDict({"
    },
    {
        "line": 6,
        "fullcodeline": "xml_fp = StringIO(json_to_xml(xml_fp_or_json))"
    },
    {
        "line": 13,
        "fullcodeline": "template_dir = Path(xml_fp.name).parent"
    },
    {
        "line": 20,
        "fullcodeline": "raise NotImplementedError('not yet implemented')"
    },
    {
        "line": 24,
        "fullcodeline": "register_components(custom_components)"
    },
    {
        "line": 62,
        "fullcodeline": "assert len(mjHead) == 1"
    },
    {
        "line": 63,
        "fullcodeline": "mjHead = mjHead[0]"
    },
    {
        "line": 189,
        "fullcodeline": "contentSoup = BeautifulSoup(content, 'html.parser')"
    },
    {
        "line": 195,
        "fullcodeline": "content = contentSoup.decode_contents()"
    },
    {
        "line": 212,
        "fullcodeline": "extra_css = ''.join(globalDatas.inlineStyle)"
    },
    {
        "line": 213,
        "fullcodeline": "inliner = css_inline.CSSInliner("
    },
    {
        "line": 219,
        "fullcodeline": "content = inliner.inline(content)"
    },
    {
        "line": 7,
        "fullcodeline": "elif isinstance(xml_fp_or_json, str):"
    },
    {
        "line": 190,
        "fullcodeline": "for selector, data in globalDatas.htmlAttributes.items():"
    },
    {
        "line": 8,
        "fullcodeline": "xml_fp = StringIO(xml_fp_or_json)"
    },
    {
        "line": 10,
        "fullcodeline": "xml_fp = xml_fp_or_json"
    },
    {
        "line": 208,
        "fullcodeline": "import css_inline"
    },
    {
        "line": 38,
        "fullcodeline": "'classes'            : {},"
    },
    {
        "line": 39,
        "fullcodeline": "'classesDefault'     : {},"
    },
    {
        "line": 40,
        "fullcodeline": "'defaultAttributes'  : {},"
    },
    {
        "line": 41,
        "fullcodeline": "'htmlAttributes'     : {},"
    },
    {
        "line": 44,
        "fullcodeline": "'headStyle'          : {},"
    },
    {
        "line": 47,
        "fullcodeline": "'mediaQueries'       : {},"
    },
    {
        "line": 191,
        "fullcodeline": "for attrName, value in data.items():"
    },
    {
        "line": 210,
        "fullcodeline": "raise ImportError('CSS inlining is an optional feature. Run `pip install -e \".[css_inlining]\"` to install the required dependencies.') # noqa: E501"
    },
    {
        "line": 192,
        "fullcodeline": "for element in contentSoup.select(selector):"
    },
    {
        "line": 193,
        "fullcodeline": "element[attrName] = value or ''"
    }
]