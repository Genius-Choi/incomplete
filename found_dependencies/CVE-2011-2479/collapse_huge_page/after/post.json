[
    {
        "line": 17,
        "fullcodeline": "VM_BUG_ON(address & ~HPAGE_PMD_MASK);"
    },
    {
        "line": 19,
        "fullcodeline": "VM_BUG_ON(!*hpage);"
    },
    {
        "line": 20,
        "fullcodeline": "new_page = *hpage;"
    },
    {
        "line": 54,
        "fullcodeline": "up_read(&mm->mmap_sem);"
    },
    {
        "line": 61,
        "fullcodeline": "down_write(&mm->mmap_sem);"
    },
    {
        "line": 65,
        "fullcodeline": "vma = find_vma(mm, address);"
    },
    {
        "line": 66,
        "fullcodeline": "hstart = (vma->vm_start + ~HPAGE_PMD_MASK) & HPAGE_PMD_MASK;"
    },
    {
        "line": 67,
        "fullcodeline": "hend = vma->vm_end & HPAGE_PMD_MASK;"
    },
    {
        "line": 83,
        "fullcodeline": "VM_BUG_ON(is_linear_pfn_mapping(vma) || vma->vm_flags & VM_NO_THP);"
    },
    {
        "line": 85,
        "fullcodeline": "pgd = pgd_offset(mm, address);"
    },
    {
        "line": 89,
        "fullcodeline": "pud = pud_offset(pgd, address);"
    },
    {
        "line": 93,
        "fullcodeline": "pmd = pmd_offset(pud, address);"
    },
    {
        "line": 98,
        "fullcodeline": "anon_vma_lock(vma->anon_vma);"
    },
    {
        "line": 100,
        "fullcodeline": "pte = pte_offset_map(pmd, address);"
    },
    {
        "line": 101,
        "fullcodeline": "ptl = pte_lockptr(mm, pmd);"
    },
    {
        "line": 103,
        "fullcodeline": "spin_lock(&mm->page_table_lock); /* probably unnecessary */"
    },
    {
        "line": 110,
        "fullcodeline": "_pmd = pmdp_clear_flush_notify(vma, address, pmd);"
    },
    {
        "line": 111,
        "fullcodeline": "spin_unlock(&mm->page_table_lock);"
    },
    {
        "line": 113,
        "fullcodeline": "spin_lock(ptl);"
    },
    {
        "line": 114,
        "fullcodeline": "isolated = __collapse_huge_page_isolate(vma, address, pte);"
    },
    {
        "line": 115,
        "fullcodeline": "spin_unlock(ptl);"
    },
    {
        "line": 131,
        "fullcodeline": "anon_vma_unlock(vma->anon_vma);"
    },
    {
        "line": 133,
        "fullcodeline": "__collapse_huge_page_copy(pte, new_page, vma, address, ptl);"
    },
    {
        "line": 134,
        "fullcodeline": "pte_unmap(pte);"
    },
    {
        "line": 135,
        "fullcodeline": "__SetPageUptodate(new_page);"
    },
    {
        "line": 136,
        "fullcodeline": "pgtable = pmd_pgtable(_pmd);"
    },
    {
        "line": 137,
        "fullcodeline": "VM_BUG_ON(page_count(pgtable) != 1);"
    },
    {
        "line": 138,
        "fullcodeline": "VM_BUG_ON(page_mapcount(pgtable) != 0);"
    },
    {
        "line": 140,
        "fullcodeline": "_pmd = mk_pmd(new_page, vma->vm_page_prot);"
    },
    {
        "line": 141,
        "fullcodeline": "_pmd = maybe_pmd_mkwrite(pmd_mkdirty(_pmd), vma);"
    },
    {
        "line": 142,
        "fullcodeline": "_pmd = pmd_mkhuge(_pmd);"
    },
    {
        "line": 149,
        "fullcodeline": "smp_wmb();"
    },
    {
        "line": 151,
        "fullcodeline": "spin_lock(&mm->page_table_lock);"
    },
    {
        "line": 152,
        "fullcodeline": "BUG_ON(!pmd_none(*pmd));"
    },
    {
        "line": 153,
        "fullcodeline": "page_add_new_anon_rmap(new_page, vma, address);"
    },
    {
        "line": 154,
        "fullcodeline": "set_pmd_at(mm, address, pmd, _pmd);"
    },
    {
        "line": 155,
        "fullcodeline": "update_mmu_cache(vma, address, entry);"
    },
    {
        "line": 156,
        "fullcodeline": "prepare_pmd_huge_pte(pgtable, mm);"
    },
    {
        "line": 157,
        "fullcodeline": "mm->nr_ptes--;"
    },
    {
        "line": 158,
        "fullcodeline": "spin_unlock(&mm->page_table_lock);"
    },
    {
        "line": 161,
        "fullcodeline": "*hpage = NULL;"
    },
    {
        "line": 163,
        "fullcodeline": "khugepaged_pages_collapsed++;"
    },
    {
        "line": 165,
        "fullcodeline": "up_write(&mm->mmap_sem);"
    },
    {
        "line": 169,
        "fullcodeline": "mem_cgroup_uncharge_page(new_page);"
    },
    {
        "line": 21,
        "fullcodeline": "if (unlikely(mem_cgroup_newpage_charge(new_page, mm, GFP_KERNEL))) {"
    },
    {
        "line": 62,
        "fullcodeline": "if (unlikely(khugepaged_test_exit(mm)))"
    },
    {
        "line": 68,
        "fullcodeline": "if (address < hstart || address + HPAGE_PMD_SIZE > hend)"
    },
    {
        "line": 71,
        "fullcodeline": "if ((!(vma->vm_flags & VM_HUGEPAGE) && !khugepaged_always()) ||"
    },
    {
        "line": 75,
        "fullcodeline": "if (!vma->anon_vma || vma->vm_ops)"
    },
    {
        "line": 77,
        "fullcodeline": "if (is_vma_temporary_stack(vma))"
    },
    {
        "line": 86,
        "fullcodeline": "if (!pgd_present(*pgd))"
    },
    {
        "line": 90,
        "fullcodeline": "if (!pud_present(*pud))"
    },
    {
        "line": 95,
        "fullcodeline": "if (!pmd_present(*pmd) || pmd_trans_huge(*pmd))"
    },
    {
        "line": 117,
        "fullcodeline": "if (unlikely(!isolated)) {"
    },
    {
        "line": 22,
        "fullcodeline": "up_read(&mm->mmap_sem);"
    },
    {
        "line": 72,
        "fullcodeline": "(vma->vm_flags & VM_NOHUGEPAGE))"
    },
    {
        "line": 118,
        "fullcodeline": "pte_unmap(pte);"
    },
    {
        "line": 119,
        "fullcodeline": "spin_lock(&mm->page_table_lock);"
    },
    {
        "line": 120,
        "fullcodeline": "BUG_ON(!pmd_none(*pmd));"
    },
    {
        "line": 121,
        "fullcodeline": "set_pmd_at(mm, address, pmd, _pmd);"
    },
    {
        "line": 122,
        "fullcodeline": "spin_unlock(&mm->page_table_lock);"
    },
    {
        "line": 123,
        "fullcodeline": "anon_vma_unlock(vma->anon_vma);"
    }
]