[
    {
        "line": 75,
        "fullcodeline": "assert(image_info != (const ImageInfo *) NULL);"
    },
    {
        "line": 76,
        "fullcodeline": "assert(image_info->signature == MagickCoreSignature);"
    },
    {
        "line": 80,
        "fullcodeline": "assert(exception != (ExceptionInfo *) NULL);"
    },
    {
        "line": 81,
        "fullcodeline": "assert(exception->signature == MagickCoreSignature);"
    },
    {
        "line": 82,
        "fullcodeline": "image=AcquireImage(image_info,exception);"
    },
    {
        "line": 83,
        "fullcodeline": "status=OpenBlob(image_info,image,ReadBinaryBlobMode,exception);"
    },
    {
        "line": 90,
        "fullcodeline": "tiff=TIFFClientOpen(image->filename,\"rb\",(thandle_t) image,TIFFReadBlob,"
    },
    {
        "line": 1043,
        "fullcodeline": "TIFFReadPhotoshopLayers(image,image_info,exception);"
    },
    {
        "line": 77,
        "fullcodeline": "if (image_info->debug != MagickFalse)"
    },
    {
        "line": 84,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 89,
        "fullcodeline": "(void) SetMagickThreadValue(tiff_exception,exception);"
    },
    {
        "line": 93,
        "fullcodeline": "if (tiff == (TIFF *) NULL)"
    },
    {
        "line": 98,
        "fullcodeline": "if (image_info->number_scenes != 0)"
    },
    {
        "line": 1041,
        "fullcodeline": "} while (status != MagickFalse);"
    },
    {
        "line": 1053,
        "fullcodeline": "return(GetFirstImageInList(image));"
    },
    {
        "line": 78,
        "fullcodeline": "(void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\","
    },
    {
        "line": 86,
        "fullcodeline": "image=DestroyImageList(image);"
    },
    {
        "line": 230,
        "fullcodeline": "image->columns=(size_t) width;"
    },
    {
        "line": 231,
        "fullcodeline": "image->rows=(size_t) height;"
    },
    {
        "line": 232,
        "fullcodeline": "image->depth=(size_t) bits_per_sample;"
    },
    {
        "line": 233,
        "fullcodeline": "status=SetImageExtent(image,image->columns,image->rows,exception);"
    },
    {
        "line": 239,
        "fullcodeline": "image->endian=MSBEndian;"
    },
    {
        "line": 261,
        "fullcodeline": "TIFFGetProfiles(tiff,image,image_info->ping,exception);"
    },
    {
        "line": 262,
        "fullcodeline": "TIFFGetProperties(tiff,image,exception);"
    },
    {
        "line": 263,
        "fullcodeline": "option=GetImageOption(image_info,\"tiff:exif-properties\");"
    },
    {
        "line": 364,
        "fullcodeline": "quantum_info=AcquireQuantumInfo(image_info,image);"
    },
    {
        "line": 398,
        "fullcodeline": "tiff_status=TIFFGetFieldDefaulted(tiff,TIFFTAG_EXTRASAMPLES,&extra_samples,"
    },
    {
        "line": 437,
        "fullcodeline": "value=(unsigned short) image->scene;"
    },
    {
        "line": 530,
        "fullcodeline": "quantum_info->endian=LSBEndian;"
    },
    {
        "line": 531,
        "fullcodeline": "quantum_type=RGBQuantum;"
    },
    {
        "line": 532,
        "fullcodeline": "pixels=(unsigned char *) GetQuantumPixels(quantum_info);"
    },
    {
        "line": 1004,
        "fullcodeline": "SetQuantumImageType(image,quantum_type);"
    },
    {
        "line": 1023,
        "fullcodeline": "status=TIFFReadDirectory(tiff) != 0 ? MagickTrue : MagickFalse;"
    },
    {
        "line": 87,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 95,
        "fullcodeline": "image=DestroyImageList(image);"
    },
    {
        "line": 96,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 105,
        "fullcodeline": "if (image_info->scene < (size_t) TIFFNumberOfDirectories(tiff))"
    },
    {
        "line": 148,
        "fullcodeline": "if (sample_format == SAMPLEFORMAT_IEEEFP)"
    },
    {
        "line": 214,
        "fullcodeline": "if (image->debug != MagickFalse)"
    },
    {
        "line": 234,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 236,
        "fullcodeline": "if (image->debug != MagickFalse)"
    },
    {
        "line": 240,
        "fullcodeline": "if (endian == FILLORDER_LSB2MSB)"
    },
    {
        "line": 254,
        "fullcodeline": "if ((photometric == PHOTOMETRIC_MINISBLACK) ||"
    },
    {
        "line": 257,
        "fullcodeline": "if (photometric == PHOTOMETRIC_SEPARATED)"
    },
    {
        "line": 259,
        "fullcodeline": "if (photometric == PHOTOMETRIC_CIELAB)"
    },
    {
        "line": 264,
        "fullcodeline": "if (IsStringFalse(option) == MagickFalse) /* enabled by default */"
    },
    {
        "line": 266,
        "fullcodeline": "(void) TIFFGetFieldDefaulted(tiff,TIFFTAG_SAMPLESPERPIXEL,"
    },
    {
        "line": 365,
        "fullcodeline": "if (quantum_info == (QuantumInfo *) NULL)"
    },
    {
        "line": 370,
        "fullcodeline": "if (sample_format == SAMPLEFORMAT_UINT)"
    },
    {
        "line": 372,
        "fullcodeline": "if (sample_format == SAMPLEFORMAT_INT)"
    },
    {
        "line": 374,
        "fullcodeline": "if (sample_format == SAMPLEFORMAT_IEEEFP)"
    },
    {
        "line": 376,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 440,
        "fullcodeline": "if (image->storage_class == PseudoClass)"
    },
    {
        "line": 486,
        "fullcodeline": "if (image_info->ping != MagickFalse)"
    },
    {
        "line": 509,
        "fullcodeline": "if ((samples_per_pixel >= 2) && (interlace == PLANARCONFIG_SEPARATE))"
    },
    {
        "line": 515,
        "fullcodeline": "if (image->storage_class == PseudoClass)"
    },
    {
        "line": 517,
        "fullcodeline": "if ((photometric == PHOTOMETRIC_MINISBLACK) ||"
    },
    {
        "line": 523,
        "fullcodeline": "if (image->compression == JPEGCompression)"
    },
    {
        "line": 526,
        "fullcodeline": "if (compress_tag == COMPRESSION_JBIG)"
    },
    {
        "line": 528,
        "fullcodeline": "if (TIFFIsTiled(tiff) != MagickFalse)"
    },
    {
        "line": 1006,
        "fullcodeline": "quantum_info=DestroyQuantumInfo(quantum_info);"
    },
    {
        "line": 1007,
        "fullcodeline": "if (photometric == PHOTOMETRIC_CIELAB)"
    },
    {
        "line": 1009,
        "fullcodeline": "if ((photometric == PHOTOMETRIC_LOGL) ||"
    },
    {
        "line": 1020,
        "fullcodeline": "if (image_info->number_scenes != 0)"
    },
    {
        "line": 1024,
        "fullcodeline": "if (status != MagickFalse)"
    },
    {
        "line": 130,
        "fullcodeline": "if (0 && (image_info->verbose != MagickFalse))"
    },
    {
        "line": 131,
        "fullcodeline": "TIFFPrintDirectory(tiff,stdout,MagickFalse);"
    },
    {
        "line": 133,
        "fullcodeline": "if ((TIFFGetField(tiff,TIFFTAG_IMAGEWIDTH,&width) != 1) ||"
    },
    {
        "line": 143,
        "fullcodeline": "(TIFFGetFieldDefaulted(tiff,TIFFTAG_PHOTOMETRIC,&photometric) != 1))"
    },
    {
        "line": 145,
        "fullcodeline": "TIFFClose(tiff);"
    },
    {
        "line": 146,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 241,
        "fullcodeline": "image->endian=LSBEndian;"
    },
    {
        "line": 255,
        "fullcodeline": "(photometric == PHOTOMETRIC_MINISWHITE))"
    },
    {
        "line": 256,
        "fullcodeline": "SetImageColorspace(image,GRAYColorspace,exception);"
    },
    {
        "line": 258,
        "fullcodeline": "SetImageColorspace(image,CMYKColorspace,exception);"
    },
    {
        "line": 260,
        "fullcodeline": "SetImageColorspace(image,LabColorspace,exception);"
    },
    {
        "line": 265,
        "fullcodeline": "TIFFGetEXIFProperties(tiff,image,exception);"
    },
    {
        "line": 268,
        "fullcodeline": "if ((TIFFGetFieldDefaulted(tiff,TIFFTAG_XRESOLUTION,&x_resolution) == 1) &&"
    },
    {
        "line": 269,
        "fullcodeline": "(TIFFGetFieldDefaulted(tiff,TIFFTAG_YRESOLUTION,&y_resolution) == 1))"
    },
    {
        "line": 271,
        "fullcodeline": "image->resolution.x=x_resolution;"
    },
    {
        "line": 272,
        "fullcodeline": "image->resolution.y=y_resolution;"
    },
    {
        "line": 274,
        "fullcodeline": "if (TIFFGetFieldDefaulted(tiff,TIFFTAG_RESOLUTIONUNIT,&units) == 1)"
    },
    {
        "line": 281,
        "fullcodeline": "if ((TIFFGetFieldDefaulted(tiff,TIFFTAG_XPOSITION,&x_position) == 1) &&"
    },
    {
        "line": 282,
        "fullcodeline": "(TIFFGetFieldDefaulted(tiff,TIFFTAG_YPOSITION,&y_position) == 1))"
    },
    {
        "line": 287,
        "fullcodeline": "if (TIFFGetFieldDefaulted(tiff,TIFFTAG_ORIENTATION,&orientation) == 1)"
    },
    {
        "line": 288,
        "fullcodeline": "image->orientation=(OrientationType) orientation;"
    },
    {
        "line": 289,
        "fullcodeline": "if (TIFFGetField(tiff,TIFFTAG_WHITEPOINT,&chromaticity) == 1)"
    },
    {
        "line": 297,
        "fullcodeline": "if (TIFFGetField(tiff,TIFFTAG_PRIMARYCHROMATICITIES,&chromaticity) == 1)"
    },
    {
        "line": 319,
        "fullcodeline": "case COMPRESSION_NONE: image->compression=NoCompression; break;"
    },
    {
        "line": 320,
        "fullcodeline": "case COMPRESSION_CCITTFAX3: image->compression=FaxCompression; break;"
    },
    {
        "line": 321,
        "fullcodeline": "case COMPRESSION_CCITTFAX4: image->compression=Group4Compression; break;"
    },
    {
        "line": 352,
        "fullcodeline": "case COMPRESSION_OJPEG: image->compression=JPEGCompression; break;"
    },
    {
        "line": 356,
        "fullcodeline": "case COMPRESSION_LZW: image->compression=LZWCompression; break;"
    },
    {
        "line": 357,
        "fullcodeline": "case COMPRESSION_DEFLATE: image->compression=ZipCompression; break;"
    },
    {
        "line": 358,
        "fullcodeline": "case COMPRESSION_ADOBE_DEFLATE: image->compression=ZipCompression; break;"
    },
    {
        "line": 359,
        "fullcodeline": "default: image->compression=RLECompression; break;"
    },
    {
        "line": 367,
        "fullcodeline": "TIFFClose(tiff);"
    },
    {
        "line": 368,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 371,
        "fullcodeline": "status=SetQuantumFormat(image,quantum_info,UnsignedQuantumFormat);"
    },
    {
        "line": 373,
        "fullcodeline": "status=SetQuantumFormat(image,quantum_info,SignedQuantumFormat);"
    },
    {
        "line": 375,
        "fullcodeline": "status=SetQuantumFormat(image,quantum_info,FloatingPointQuantumFormat);"
    },
    {
        "line": 378,
        "fullcodeline": "TIFFClose(tiff);"
    },
    {
        "line": 379,
        "fullcodeline": "quantum_info=DestroyQuantumInfo(quantum_info);"
    },
    {
        "line": 380,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 424,
        "fullcodeline": "if ((photometric == PHOTOMETRIC_PALETTE) &&"
    },
    {
        "line": 425,
        "fullcodeline": "(pow(2.0,1.0*bits_per_sample) <= MaxColormapSize))"
    },
    {
        "line": 430,
        "fullcodeline": "colors=(size_t) GetQuantumRange(bits_per_sample)+1;"
    },
    {
        "line": 438,
        "fullcodeline": "if (TIFFGetFieldDefaulted(tiff,TIFFTAG_PAGENUMBER,&value,&pages) == 1)"
    },
    {
        "line": 439,
        "fullcodeline": "image->scene=value;"
    },
    {
        "line": 456,
        "fullcodeline": "tiff_status=TIFFGetField(tiff,TIFFTAG_COLORMAP,&red_colormap,"
    },
    {
        "line": 497,
        "fullcodeline": "if (TIFFGetField(tiff,TIFFTAG_ROWSPERSTRIP,&rows_per_strip) == 1)"
    },
    {
        "line": 500,
        "fullcodeline": "value[MagickPathExtent];"
    },
    {
        "line": 507,
        "fullcodeline": "if ((samples_per_pixel >= 2) && (interlace == PLANARCONFIG_CONTIG))"
    },
    {
        "line": 508,
        "fullcodeline": "method=ReadRGBAMethod;"
    },
    {
        "line": 510,
        "fullcodeline": "method=ReadCMYKAMethod;"
    },
    {
        "line": 511,
        "fullcodeline": "if ((photometric != PHOTOMETRIC_RGB) &&"
    },
    {
        "line": 513,
        "fullcodeline": "(photometric != PHOTOMETRIC_SEPARATED))"
    },
    {
        "line": 518,
        "fullcodeline": "(photometric == PHOTOMETRIC_MINISWHITE))"
    },
    {
        "line": 520,
        "fullcodeline": "if ((photometric != PHOTOMETRIC_SEPARATED) &&"
    },
    {
        "line": 521,
        "fullcodeline": "(interlace == PLANARCONFIG_SEPARATE) && (bits_per_sample < 64))"
    },
    {
        "line": 529,
        "fullcodeline": "method=ReadTileMethod;"
    },
    {
        "line": 1008,
        "fullcodeline": "DecodeLabImage(image,exception);"
    },
    {
        "line": 1011,
        "fullcodeline": "(photometric == PHOTOMETRIC_MINISWHITE))"
    },
    {
        "line": 1013,
        "fullcodeline": "image->type=GrayscaleType;"
    },
    {
        "line": 1029,
        "fullcodeline": "AcquireNextImage(image_info,image,exception);"
    },
    {
        "line": 1035,
        "fullcodeline": "image=SyncNextImageInList(image);"
    },
    {
        "line": 1036,
        "fullcodeline": "status=SetImageProgress(image,LoadImagesTag,image->scene-1,"
    },
    {
        "line": 1046,
        "fullcodeline": "if (image_info->scene >= GetImageListLength(image))"
    },
    {
        "line": 107,
        "fullcodeline": "for (i=0; i < (ssize_t) image_info->scene; i++)"
    },
    {
        "line": 142,
        "fullcodeline": "(TIFFGetFieldDefaulted(tiff,TIFFTAG_MAXSAMPLEVALUE,&max_sample_value) != 1) ||"
    },
    {
        "line": 149,
        "fullcodeline": "(void) SetImageProperty(image,\"quantum:format\",\"floating-point\","
    },
    {
        "line": 216,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),\"Geometry: %ux%u\","
    },
    {
        "line": 218,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),\"Interlace: %u\","
    },
    {
        "line": 220,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 222,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 224,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 226,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),\"Photometric \""
    },
    {
        "line": 235,
        "fullcodeline": "return(DestroyImageList(image));"
    },
    {
        "line": 237,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),\"Image depth: %.20g\","
    },
    {
        "line": 276,
        "fullcodeline": "if (units == RESUNIT_INCH)"
    },
    {
        "line": 278,
        "fullcodeline": "if (units == RESUNIT_CENTIMETER)"
    },
    {
        "line": 291,
        "fullcodeline": "if (chromaticity != (float *) NULL)"
    },
    {
        "line": 299,
        "fullcodeline": "if (chromaticity != (float *) NULL)"
    },
    {
        "line": 324,
        "fullcodeline": "image->compression=JPEGCompression;"
    },
    {
        "line": 387,
        "fullcodeline": "quantum_info->min_is_white=MagickFalse;"
    },
    {
        "line": 392,
        "fullcodeline": "quantum_info->min_is_white=MagickTrue;"
    },
    {
        "line": 402,
        "fullcodeline": "(void) SetImageProperty(image,\"tiff:alpha\",\"unspecified\",exception);"
    },
    {
        "line": 403,
        "fullcodeline": "if (extra_samples == 0)"
    },
    {
        "line": 431,
        "fullcodeline": "if (AcquireImageColormap(image,colors,exception) == MagickFalse)"
    },
    {
        "line": 483,
        "fullcodeline": "if (image->alpha_trait == UndefinedPixelTrait)"
    },
    {
        "line": 488,
        "fullcodeline": "if (image_info->number_scenes != 0)"
    },
    {
        "line": 503,
        "fullcodeline": "(void) FormatLocaleString(value,MagickPathExtent,\"%u\","
    },
    {
        "line": 505,
        "fullcodeline": "(void) SetImageProperty(image,\"tiff:rows-per-strip\",value,exception);"
    },
    {
        "line": 512,
        "fullcodeline": "(photometric != PHOTOMETRIC_CIELAB) &&"
    },
    {
        "line": 524,
        "fullcodeline": "method=GetJPEGMethod(image,tiff,photometric,bits_per_sample,"
    },
    {
        "line": 540,
        "fullcodeline": "quantum_type=IndexQuantum;"
    },
    {
        "line": 541,
        "fullcodeline": "pad=(size_t) MagickMax((size_t) samples_per_pixel-1,0);"
    },
    {
        "line": 562,
        "fullcodeline": "status=SetQuantumPad(image,quantum_info,pad*((bits_per_sample+7) >> 3));"
    },
    {
        "line": 568,
        "fullcodeline": "pixels=(unsigned char *) GetQuantumPixels(quantum_info);"
    },
    {
        "line": 602,
        "fullcodeline": "pad=(size_t) MagickMax((size_t) samples_per_pixel-3,0);"
    },
    {
        "line": 603,
        "fullcodeline": "quantum_type=RGBQuantum;"
    },
    {
        "line": 619,
        "fullcodeline": "status=SetQuantumPad(image,quantum_info,pad*((bits_per_sample+7) >> 3));"
    },
    {
        "line": 625,
        "fullcodeline": "pixels=(unsigned char *) GetQuantumPixels(quantum_info);"
    },
    {
        "line": 712,
        "fullcodeline": "pixels=(unsigned char *) GetQuantumPixels(quantum_info);"
    },
    {
        "line": 767,
        "fullcodeline": "i=0;"
    },
    {
        "line": 835,
        "fullcodeline": "number_pixels=(MagickSizeType) columns*rows;"
    },
    {
        "line": 842,
        "fullcodeline": "tile_pixels=(uint32 *) AcquireQuantumMemory(columns,"
    },
    {
        "line": 943,
        "fullcodeline": "number_pixels=(MagickSizeType) image->columns*image->rows;"
    },
    {
        "line": 950,
        "fullcodeline": "pixel_info=AcquireVirtualMemory(image->columns,image->rows*"
    },
    {
        "line": 957,
        "fullcodeline": "pixels=(uint32 *) GetVirtualMemoryBlob(pixel_info);"
    },
    {
        "line": 963,
        "fullcodeline": "p=pixels+number_pixels-1;"
    },
    {
        "line": 1010,
        "fullcodeline": "(photometric == PHOTOMETRIC_MINISBLACK) ||"
    },
    {
        "line": 1014,
        "fullcodeline": "if (bits_per_sample == 1)"
    },
    {
        "line": 1021,
        "fullcodeline": "if (image->scene >= (image_info->scene+image_info->number_scenes-1))"
    },
    {
        "line": 1038,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 1049,
        "fullcodeline": "image=DestroyImageList(image);"
    },
    {
        "line": 1050,
        "fullcodeline": "return((Image *)NULL);"
    },
    {
        "line": 109,
        "fullcodeline": "status=TIFFReadDirectory(tiff) != 0 ? MagickTrue : MagickFalse;"
    },
    {
        "line": 116,
        "fullcodeline": "AcquireNextImage(image_info,image,exception);"
    },
    {
        "line": 123,
        "fullcodeline": "image=SyncNextImageInList(image);"
    },
    {
        "line": 141,
        "fullcodeline": "(TIFFGetFieldDefaulted(tiff,TIFFTAG_MINSAMPLEVALUE,&min_sample_value) != 1) ||"
    },
    {
        "line": 155,
        "fullcodeline": "(void) SetImageProperty(image,\"tiff:photometric\",\"min-is-black\","
    },
    {
        "line": 161,
        "fullcodeline": "(void) SetImageProperty(image,\"tiff:photometric\",\"min-is-white\","
    },
    {
        "line": 167,
        "fullcodeline": "(void) SetImageProperty(image,\"tiff:photometric\",\"palette\",exception);"
    },
    {
        "line": 172,
        "fullcodeline": "(void) SetImageProperty(image,\"tiff:photometric\",\"RGB\",exception);"
    },
    {
        "line": 177,
        "fullcodeline": "(void) SetImageProperty(image,\"tiff:photometric\",\"CIELAB\",exception);"
    },
    {
        "line": 182,
        "fullcodeline": "(void) SetImageProperty(image,\"tiff:photometric\",\"CIE Log2(L)\","
    },
    {
        "line": 188,
        "fullcodeline": "(void) SetImageProperty(image,\"tiff:photometric\",\"LOGLUV\",exception);"
    },
    {
        "line": 200,
        "fullcodeline": "(void) SetImageProperty(image,\"tiff:photometric\",\"separated\",exception);"
    },
    {
        "line": 205,
        "fullcodeline": "(void) SetImageProperty(image,\"tiff:photometric\",\"YCBCR\",exception);"
    },
    {
        "line": 210,
        "fullcodeline": "(void) SetImageProperty(image,\"tiff:photometric\",\"unknown\",exception);"
    },
    {
        "line": 227,
        "fullcodeline": "\"interpretation: %s\",GetImageProperty(image,\"tiff:photometric\","
    },
    {
        "line": 277,
        "fullcodeline": "image->units=PixelsPerInchResolution;"
    },
    {
        "line": 279,
        "fullcodeline": "image->units=PixelsPerCentimeterResolution;"
    },
    {
        "line": 433,
        "fullcodeline": "TIFFClose(tiff);"
    },
    {
        "line": 434,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 484,
        "fullcodeline": "image->depth=GetImageDepth(image,exception);"
    },
    {
        "line": 542,
        "fullcodeline": "if (image->alpha_trait != UndefinedPixelTrait)"
    },
    {
        "line": 563,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 569,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 604,
        "fullcodeline": "if (image->alpha_trait != UndefinedPixelTrait)"
    },
    {
        "line": 609,
        "fullcodeline": "if (image->colorspace == CMYKColorspace)"
    },
    {
        "line": 620,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 626,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 659,
        "fullcodeline": "for (i=0; i < (ssize_t) samples_per_pixel; i++)"
    },
    {
        "line": 713,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 769,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 834,
        "fullcodeline": "(void) SetImageStorageClass(image,DirectClass,exception);"
    },
    {
        "line": 844,
        "fullcodeline": "if (tile_pixels == (uint32 *) NULL)"
    },
    {
        "line": 849,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y+=rows)"
    },
    {
        "line": 952,
        "fullcodeline": "if (pixel_info == (MemoryInfo *) NULL)"
    },
    {
        "line": 958,
        "fullcodeline": "(void) TIFFReadRGBAImage(tiff,(uint32) image->columns,"
    },
    {
        "line": 964,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 1000,
        "fullcodeline": "pixel_info=RelinquishVirtualMemory(pixel_info);"
    },
    {
        "line": 1015,
        "fullcodeline": "image->type=BilevelType;"
    },
    {
        "line": 1030,
        "fullcodeline": "if (GetNextImageInList(image) == (Image *) NULL)"
    },
    {
        "line": 110,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 140,
        "fullcodeline": "(TIFFGetFieldDefaulted(tiff,TIFFTAG_SAMPLEFORMAT,&sample_format) != 1) ||"
    },
    {
        "line": 284,
        "fullcodeline": "image->page.x=(ssize_t) ceil(x_position*image->resolution.x-0.5);"
    },
    {
        "line": 285,
        "fullcodeline": "image->page.y=(ssize_t) ceil(y_position*image->resolution.y-0.5);"
    },
    {
        "line": 489,
        "fullcodeline": "if (image->scene >= (image_info->scene+image_info->number_scenes-1))"
    },
    {
        "line": 565,
        "fullcodeline": "TIFFClose(tiff);"
    },
    {
        "line": 566,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 577,
        "fullcodeline": "status=TIFFReadPixels(tiff,bits_per_sample,0,y,(char *) pixels);"
    },
    {
        "line": 580,
        "fullcodeline": "q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 606,
        "fullcodeline": "quantum_type=RGBAQuantum;"
    },
    {
        "line": 607,
        "fullcodeline": "pad=(size_t) MagickMax((size_t) samples_per_pixel-4,0);"
    },
    {
        "line": 611,
        "fullcodeline": "pad=(size_t) MagickMax((size_t) samples_per_pixel-4,0);"
    },
    {
        "line": 612,
        "fullcodeline": "quantum_type=CMYKQuantum;"
    },
    {
        "line": 622,
        "fullcodeline": "TIFFClose(tiff);"
    },
    {
        "line": 623,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 634,
        "fullcodeline": "status=TIFFReadPixels(tiff,bits_per_sample,0,y,(char *) pixels);"
    },
    {
        "line": 637,
        "fullcodeline": "q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 727,
        "fullcodeline": "status=TIFFReadPixels(tiff,bits_per_sample,0,y,(char *) pixels);"
    },
    {
        "line": 730,
        "fullcodeline": "q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 733,
        "fullcodeline": "p=pixels;"
    },
    {
        "line": 777,
        "fullcodeline": "q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 787,
        "fullcodeline": "i--;"
    },
    {
        "line": 788,
        "fullcodeline": "p=((uint32 *) pixels)+image->columns*i;"
    },
    {
        "line": 828,
        "fullcodeline": "if ((TIFFGetField(tiff,TIFFTAG_TILEWIDTH,&columns) != 1) ||"
    },
    {
        "line": 829,
        "fullcodeline": "(TIFFGetField(tiff,TIFFTAG_TILELENGTH,&rows) != 1))"
    },
    {
        "line": 831,
        "fullcodeline": "TIFFClose(tiff);"
    },
    {
        "line": 832,
        "fullcodeline": "ThrowReaderException(CoderError,\"ImageIsNotTiled\");"
    },
    {
        "line": 836,
        "fullcodeline": "if ((number_pixels*sizeof(uint32)) != (MagickSizeType) ((size_t)"
    },
    {
        "line": 839,
        "fullcodeline": "TIFFClose(tiff);"
    },
    {
        "line": 840,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 846,
        "fullcodeline": "TIFFClose(tiff);"
    },
    {
        "line": 847,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 862,
        "fullcodeline": "rows_remaining=image->rows-y;"
    },
    {
        "line": 865,
        "fullcodeline": "tile=QueueAuthenticPixels(image,0,y,image->columns,rows_remaining,"
    },
    {
        "line": 925,
        "fullcodeline": "tile_pixels=(uint32 *) RelinquishMagickMemory(tile_pixels);"
    },
    {
        "line": 944,
        "fullcodeline": "if ((number_pixels*sizeof(uint32)) != (MagickSizeType) ((size_t)"
    },
    {
        "line": 947,
        "fullcodeline": "TIFFClose(tiff);"
    },
    {
        "line": 948,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 954,
        "fullcodeline": "TIFFClose(tiff);"
    },
    {
        "line": 955,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 972,
        "fullcodeline": "q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 975,
        "fullcodeline": "q+=GetPixelChannels(image)*(image->columns-1);"
    },
    {
        "line": 1032,
        "fullcodeline": "image=DestroyImageList(image);"
    },
    {
        "line": 1033,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 117,
        "fullcodeline": "if (GetNextImageInList(image) == (Image *) NULL)"
    },
    {
        "line": 139,
        "fullcodeline": "(TIFFGetFieldDefaulted(tiff,TIFFTAG_BITSPERSAMPLE,&bits_per_sample) != 1) ||"
    },
    {
        "line": 405,
        "fullcodeline": "if ((samples_per_pixel == 4) && (photometric == PHOTOMETRIC_RGB))"
    },
    {
        "line": 406,
        "fullcodeline": "image->alpha_trait=BlendPixelTrait;"
    },
    {
        "line": 409,
        "fullcodeline": "for (i=0; i < extra_samples; i++)"
    },
    {
        "line": 460,
        "fullcodeline": "if ((red_colormap != (uint16 *) NULL) &&"
    },
    {
        "line": 462,
        "fullcodeline": "(blue_colormap != (uint16 *) NULL))"
    },
    {
        "line": 464,
        "fullcodeline": "range=255;  /* might be old style 8-bit colormap */"
    },
    {
        "line": 544,
        "fullcodeline": "if (image->storage_class != PseudoClass)"
    },
    {
        "line": 581,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 583,
        "fullcodeline": "(void) ImportQuantumPixels(image,(CacheView *) NULL,quantum_info,"
    },
    {
        "line": 585,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 587,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 613,
        "fullcodeline": "if (image->alpha_trait != UndefinedPixelTrait)"
    },
    {
        "line": 638,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 640,
        "fullcodeline": "(void) ImportQuantumPixels(image,(CacheView *) NULL,quantum_info,"
    },
    {
        "line": 642,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 644,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 661,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 700,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 731,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 734,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 747,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 749,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 778,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 780,
        "fullcodeline": "if (i == 0)"
    },
    {
        "line": 789,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 803,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 805,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 843,
        "fullcodeline": "rows*sizeof(*tile_pixels));"
    },
    {
        "line": 867,
        "fullcodeline": "if (tile == (Quantum *) NULL)"
    },
    {
        "line": 869,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x+=columns)"
    },
    {
        "line": 915,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 917,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 973,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 976,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 990,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 992,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 113,
        "fullcodeline": "image=DestroyImageList(image);"
    },
    {
        "line": 114,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 120,
        "fullcodeline": "image=DestroyImageList(image);"
    },
    {
        "line": 121,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 138,
        "fullcodeline": "(TIFFGetFieldDefaulted(tiff,TIFFTAG_SAMPLESPERPIXEL,&samples_per_pixel) != 1) ||"
    },
    {
        "line": 411,
        "fullcodeline": "image->alpha_trait=BlendPixelTrait;"
    },
    {
        "line": 461,
        "fullcodeline": "(green_colormap != (uint16 *) NULL) &&"
    },
    {
        "line": 465,
        "fullcodeline": "for (i=0; i < (ssize_t) image->colors; i++)"
    },
    {
        "line": 472,
        "fullcodeline": "for (i=0; i < (ssize_t) image->colors; i++)"
    },
    {
        "line": 491,
        "fullcodeline": "quantum_info=DestroyQuantumInfo(quantum_info);"
    },
    {
        "line": 546,
        "fullcodeline": "quantum_type=samples_per_pixel == 1 ? AlphaQuantum :"
    },
    {
        "line": 548,
        "fullcodeline": "pad=(size_t) MagickMax((size_t) samples_per_pixel-2,0);"
    },
    {
        "line": 557,
        "fullcodeline": "if (image->storage_class != PseudoClass)"
    },
    {
        "line": 578,
        "fullcodeline": "if (status == -1)"
    },
    {
        "line": 589,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 615,
        "fullcodeline": "quantum_type=CMYKAQuantum;"
    },
    {
        "line": 616,
        "fullcodeline": "pad=(size_t) MagickMax((size_t) samples_per_pixel-5,0);"
    },
    {
        "line": 635,
        "fullcodeline": "if (status == -1)"
    },
    {
        "line": 646,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 669,
        "fullcodeline": "status=TIFFReadPixels(tiff,bits_per_sample,(tsample_t) i,y,(char *)"
    },
    {
        "line": 673,
        "fullcodeline": "q=GetAuthenticPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 702,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 728,
        "fullcodeline": "if (status == -1)"
    },
    {
        "line": 736,
        "fullcodeline": "SetPixelCyan(image,ScaleCharToQuantum(ClampYCC((double) *p+"
    },
    {
        "line": 738,
        "fullcodeline": "SetPixelMagenta(image,ScaleCharToQuantum(ClampYCC((double) *p-"
    },
    {
        "line": 741,
        "fullcodeline": "SetPixelYellow(image,ScaleCharToQuantum(ClampYCC((double) *p+"
    },
    {
        "line": 743,
        "fullcodeline": "SetPixelBlack(image,ScaleCharToQuantum((unsigned char) *(p+3)),q);"
    },
    {
        "line": 744,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 745,
        "fullcodeline": "p+=4;"
    },
    {
        "line": 751,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 784,
        "fullcodeline": "i=(ssize_t) MagickMin((ssize_t) rows_per_strip,(ssize_t)"
    },
    {
        "line": 791,
        "fullcodeline": "SetPixelRed(image,ScaleCharToQuantum((unsigned char)"
    },
    {
        "line": 793,
        "fullcodeline": "SetPixelGreen(image,ScaleCharToQuantum((unsigned char)"
    },
    {
        "line": 795,
        "fullcodeline": "SetPixelBlue(image,ScaleCharToQuantum((unsigned char)"
    },
    {
        "line": 801,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 807,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 837,
        "fullcodeline": "(number_pixels*sizeof(uint32))))"
    },
    {
        "line": 863,
        "fullcodeline": "if ((ssize_t) (y+rows) < (ssize_t) image->rows)"
    },
    {
        "line": 864,
        "fullcodeline": "rows_remaining=rows;"
    },
    {
        "line": 877,
        "fullcodeline": "columns_remaining=image->columns-x;"
    },
    {
        "line": 880,
        "fullcodeline": "p=tile_pixels+(rows-rows_remaining)*columns;"
    },
    {
        "line": 881,
        "fullcodeline": "q=tile+GetPixelChannels(image)*(image->columns*(rows_remaining-1)+"
    },
    {
        "line": 919,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 945,
        "fullcodeline": "(number_pixels*sizeof(uint32))))"
    },
    {
        "line": 978,
        "fullcodeline": "SetPixelRed(image,ScaleCharToQuantum((unsigned char)"
    },
    {
        "line": 980,
        "fullcodeline": "SetPixelGreen(image,ScaleCharToQuantum((unsigned char)"
    },
    {
        "line": 982,
        "fullcodeline": "SetPixelBlue(image,ScaleCharToQuantum((unsigned char)"
    },
    {
        "line": 988,
        "fullcodeline": "q-=GetPixelChannels(image);"
    },
    {
        "line": 994,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 137,
        "fullcodeline": "(TIFFGetFieldDefaulted(tiff,TIFFTAG_PLANARCONFIG,&interlace) != 1) ||"
    },
    {
        "line": 412,
        "fullcodeline": "if (sample_info[i] == EXTRASAMPLE_ASSOCALPHA)"
    },
    {
        "line": 552,
        "fullcodeline": "quantum_type=IndexAlphaQuantum;"
    },
    {
        "line": 553,
        "fullcodeline": "pad=(size_t) MagickMax((size_t) samples_per_pixel-2,0);"
    },
    {
        "line": 559,
        "fullcodeline": "quantum_type=GrayQuantum;"
    },
    {
        "line": 560,
        "fullcodeline": "pad=(size_t) MagickMax((size_t) samples_per_pixel-1,0);"
    },
    {
        "line": 591,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 648,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 674,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 676,
        "fullcodeline": "if (image->colorspace != CMYKColorspace)"
    },
    {
        "line": 695,
        "fullcodeline": "(void) ImportQuantumPixels(image,(CacheView *) NULL,quantum_info,"
    },
    {
        "line": 697,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 704,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 753,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 797,
        "fullcodeline": "if (image->alpha_trait != UndefinedPixelTrait)"
    },
    {
        "line": 809,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 883,
        "fullcodeline": "for (row=rows_remaining; row > 0; row--)"
    },
    {
        "line": 921,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 984,
        "fullcodeline": "if (image->alpha_trait != UndefinedPixelTrait)"
    },
    {
        "line": 996,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 136,
        "fullcodeline": "(TIFFGetFieldDefaulted(tiff,TIFFTAG_FILLORDER,&endian) != 1) ||"
    },
    {
        "line": 414,
        "fullcodeline": "SetQuantumAlphaType(quantum_info,DisassociatedQuantumAlpha);"
    },
    {
        "line": 466,
        "fullcodeline": "if ((red_colormap[i] >= 256) || (green_colormap[i] >= 256) ||"
    },
    {
        "line": 467,
        "fullcodeline": "(blue_colormap[i] >= 256))"
    },
    {
        "line": 469,
        "fullcodeline": "range=65535;"
    },
    {
        "line": 474,
        "fullcodeline": "image->colormap[i].red=ClampToQuantum(((double)"
    },
    {
        "line": 476,
        "fullcodeline": "image->colormap[i].green=ClampToQuantum(((double)"
    },
    {
        "line": 478,
        "fullcodeline": "image->colormap[i].blue=ClampToQuantum(((double)"
    },
    {
        "line": 671,
        "fullcodeline": "if (status == -1)"
    },
    {
        "line": 782,
        "fullcodeline": "if (TIFFReadRGBAStrip(tiff,(tstrip_t) y,(uint32 *) pixels) == 0)"
    },
    {
        "line": 798,
        "fullcodeline": "SetPixelAlpha(image,ScaleCharToQuantum((unsigned char)"
    },
    {
        "line": 875,
        "fullcodeline": "if (TIFFReadRGBATile(tiff,(uint32) x,(uint32) y,tile_pixels) == 0)"
    },
    {
        "line": 878,
        "fullcodeline": "if ((ssize_t) (x+columns) < (ssize_t) image->columns)"
    },
    {
        "line": 879,
        "fullcodeline": "columns_remaining=columns;"
    },
    {
        "line": 911,
        "fullcodeline": "p+=columns-columns_remaining;"
    },
    {
        "line": 912,
        "fullcodeline": "q-=GetPixelChannels(image)*(image->columns+columns_remaining);"
    },
    {
        "line": 985,
        "fullcodeline": "SetPixelAlpha(image,ScaleCharToQuantum((unsigned char)"
    },
    {
        "line": 135,
        "fullcodeline": "(TIFFGetFieldDefaulted(tiff,TIFFTAG_COMPRESSION,&compress_tag) != 1) ||"
    },
    {
        "line": 415,
        "fullcodeline": "(void) SetImageProperty(image,\"tiff:alpha\",\"associated\","
    },
    {
        "line": 792,
        "fullcodeline": "(TIFFGetR(*p))),q);"
    },
    {
        "line": 794,
        "fullcodeline": "(TIFFGetG(*p))),q);"
    },
    {
        "line": 796,
        "fullcodeline": "(TIFFGetB(*p))),q);"
    },
    {
        "line": 885,
        "fullcodeline": "if (image->alpha_trait != UndefinedPixelTrait)"
    },
    {
        "line": 979,
        "fullcodeline": "TIFFGetR(*p)),q);"
    },
    {
        "line": 981,
        "fullcodeline": "TIFFGetG(*p)),q);"
    },
    {
        "line": 983,
        "fullcodeline": "TIFFGetB(*p)),q);"
    },
    {
        "line": 134,
        "fullcodeline": "(TIFFGetField(tiff,TIFFTAG_IMAGELENGTH,&height) != 1) ||"
    },
    {
        "line": 419,
        "fullcodeline": "if (sample_info[i] == EXTRASAMPLE_UNASSALPHA)"
    },
    {
        "line": 679,
        "fullcodeline": "case 0: quantum_type=RedQuantum; break;"
    },
    {
        "line": 680,
        "fullcodeline": "case 1: quantum_type=GreenQuantum; break;"
    },
    {
        "line": 681,
        "fullcodeline": "case 2: quantum_type=BlueQuantum; break;"
    },
    {
        "line": 682,
        "fullcodeline": "case 3: quantum_type=AlphaQuantum; break;"
    },
    {
        "line": 683,
        "fullcodeline": "default: quantum_type=UndefinedQuantum; break;"
    },
    {
        "line": 688,
        "fullcodeline": "case 0: quantum_type=CyanQuantum; break;"
    },
    {
        "line": 689,
        "fullcodeline": "case 1: quantum_type=MagentaQuantum; break;"
    },
    {
        "line": 690,
        "fullcodeline": "case 2: quantum_type=YellowQuantum; break;"
    },
    {
        "line": 691,
        "fullcodeline": "case 3: quantum_type=BlackQuantum; break;"
    },
    {
        "line": 692,
        "fullcodeline": "case 4: quantum_type=AlphaQuantum; break;"
    },
    {
        "line": 693,
        "fullcodeline": "default: quantum_type=UndefinedQuantum; break;"
    },
    {
        "line": 737,
        "fullcodeline": "(1.402*(double) *(p+2))-179.456)),q);"
    },
    {
        "line": 739,
        "fullcodeline": "(0.34414*(double) *(p+1))-(0.71414*(double ) *(p+2))+"
    },
    {
        "line": 742,
        "fullcodeline": "(1.772*(double) *(p+1))-226.816)),q);"
    },
    {
        "line": 799,
        "fullcodeline": "(TIFFGetA(*p))),q);"
    },
    {
        "line": 886,
        "fullcodeline": "for (column=columns_remaining; column > 0; column--)"
    },
    {
        "line": 986,
        "fullcodeline": "TIFFGetA(*p)),q);"
    },
    {
        "line": 420,
        "fullcodeline": "(void) SetImageProperty(image,\"tiff:alpha\",\"unassociated\","
    },
    {
        "line": 888,
        "fullcodeline": "SetPixelRed(image,ScaleCharToQuantum((unsigned char)"
    },
    {
        "line": 890,
        "fullcodeline": "SetPixelGreen(image,ScaleCharToQuantum((unsigned char)"
    },
    {
        "line": 892,
        "fullcodeline": "SetPixelBlue(image,ScaleCharToQuantum((unsigned char)"
    },
    {
        "line": 894,
        "fullcodeline": "SetPixelAlpha(image,ScaleCharToQuantum((unsigned char)"
    },
    {
        "line": 896,
        "fullcodeline": "p++;"
    },
    {
        "line": 897,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 900,
        "fullcodeline": "for (column=columns_remaining; column > 0; column--)"
    },
    {
        "line": 902,
        "fullcodeline": "SetPixelRed(image,ScaleCharToQuantum((unsigned char)"
    },
    {
        "line": 904,
        "fullcodeline": "SetPixelGreen(image,ScaleCharToQuantum((unsigned char)"
    },
    {
        "line": 906,
        "fullcodeline": "SetPixelBlue(image,ScaleCharToQuantum((unsigned char)"
    },
    {
        "line": 908,
        "fullcodeline": "p++;"
    },
    {
        "line": 909,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 889,
        "fullcodeline": "TIFFGetR(*p)),q);"
    },
    {
        "line": 891,
        "fullcodeline": "TIFFGetG(*p)),q);"
    },
    {
        "line": 893,
        "fullcodeline": "TIFFGetB(*p)),q);"
    },
    {
        "line": 895,
        "fullcodeline": "TIFFGetA(*p)),q);"
    },
    {
        "line": 903,
        "fullcodeline": "TIFFGetR(*p)),q);"
    },
    {
        "line": 905,
        "fullcodeline": "TIFFGetG(*p)),q);"
    },
    {
        "line": 907,
        "fullcodeline": "TIFFGetB(*p)),q);"
    }
]