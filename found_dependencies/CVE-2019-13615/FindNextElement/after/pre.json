[
    {
        "line": 4,
        "fullcodeline": "int PossibleID_Length = 0;"
    },
    {
        "line": 5,
        "fullcodeline": "binary PossibleIdNSize[16];"
    },
    {
        "line": 8,
        "fullcodeline": "int ReadIndex = 0; // trick for the algo, start index at 0"
    },
    {
        "line": 9,
        "fullcodeline": "uint32 ReadSize = 0;"
    },
    {
        "line": 13,
        "fullcodeline": "int UpperLevel_original = UpperLevel;"
    },
    {
        "line": 117,
        "fullcodeline": "} while ( MaxDataSize > DataStream.getFilePointer() - SizeIdx + PossibleID_Length );"
    },
    {
        "line": 54,
        "fullcodeline": "SizeIdx = ReadIndex;"
    },
    {
        "line": 55,
        "fullcodeline": "ReadIndex -= PossibleID_Length;"
    },
    {
        "line": 59,
        "fullcodeline": "PossibleSizeLength = ReadIndex;"
    },
    {
        "line": 114,
        "fullcodeline": "ReadIndex = SizeIdx - 1;"
    },
    {
        "line": 115,
        "fullcodeline": "memmove(&PossibleIdNSize[0], &PossibleIdNSize[1], ReadIndex);"
    },
    {
        "line": 116,
        "fullcodeline": "UpperLevel = UpperLevel_original;"
    },
    {
        "line": 48,
        "fullcodeline": "} while (!bFound);"
    },
    {
        "line": 50,
        "fullcodeline": "if (!bFound)"
    },
    {
        "line": 18,
        "fullcodeline": "assert(ReadIndex < 16);"
    },
    {
        "line": 20,
        "fullcodeline": "bFound = false;"
    },
    {
        "line": 21,
        "fullcodeline": "binary IdBitMask = 1 << 7;"
    },
    {
        "line": 46,
        "fullcodeline": "ReadSize++;"
    },
    {
        "line": 61,
        "fullcodeline": "_SizeLength = PossibleSizeLength;"
    },
    {
        "line": 62,
        "fullcodeline": "SizeFound = ReadCodedSizeValue(&PossibleIdNSize[PossibleID_Length], _SizeLength, SizeUnknown);"
    },
    {
        "line": 78,
        "fullcodeline": "ReadSize++;"
    },
    {
        "line": 79,
        "fullcodeline": "PossibleSizeLength++;"
    },
    {
        "line": 84,
        "fullcodeline": "EbmlId PossibleID(PossibleIdNSize, PossibleID_Length);"
    },
    {
        "line": 85,
        "fullcodeline": "EbmlElement * Result = CreateElementUsingContext(PossibleID, Context, UpperLevel, false, AllowDummyElt, MaxLowerLevel);"
    },
    {
        "line": 22,
        "fullcodeline": "for (SizeIdx = 0; SizeIdx < ReadIndex && SizeIdx < 4; SizeIdx++) {"
    },
    {
        "line": 35,
        "fullcodeline": "if (ReadIndex >= 4) {"
    },
    {
        "line": 41,
        "fullcodeline": "if (MaxDataSize <= ReadSize)"
    },
    {
        "line": 43,
        "fullcodeline": "if (DataStream.read(&PossibleIdNSize[ReadIndex++], 1) == 0) {"
    },
    {
        "line": 63,
        "fullcodeline": "if (_SizeLength != 0) {"
    },
    {
        "line": 67,
        "fullcodeline": "if (PossibleSizeLength >= 8) {"
    },
    {
        "line": 71,
        "fullcodeline": "if (MaxDataSize <= ReadSize) {"
    },
    {
        "line": 75,
        "fullcodeline": "if( DataStream.read( &PossibleIdNSize[SizeIdx++], 1 ) == 0 ) {"
    },
    {
        "line": 87,
        "fullcodeline": "if (Result != NULL) {"
    },
    {
        "line": 38,
        "fullcodeline": "memmove(&PossibleIdNSize[0],&PossibleIdNSize[1], --ReadIndex);"
    },
    {
        "line": 64,
        "fullcodeline": "bFound = true;"
    },
    {
        "line": 109,
        "fullcodeline": "delete Result;"
    },
    {
        "line": 23,
        "fullcodeline": "if (PossibleIdNSize[0] & (IdBitMask >> SizeIdx)) {"
    },
    {
        "line": 88,
        "fullcodeline": "if (AllowDummyElt || !Result->IsDummy()) {"
    },
    {
        "line": 25,
        "fullcodeline": "PossibleID_Length = SizeIdx + 1;"
    },
    {
        "line": 26,
        "fullcodeline": "IdBitMask >>= SizeIdx;"
    },
    {
        "line": 27,
        "fullcodeline": "bFound = true;"
    },
    {
        "line": 89,
        "fullcodeline": "Result->SetSizeLength(_SizeLength);"
    },
    {
        "line": 91,
        "fullcodeline": "Result->Size = SizeFound;"
    },
    {
        "line": 97,
        "fullcodeline": "if (Result->ValidateSize() && (SizeFound == SizeUnknown || UpperLevel > 0 || MaxDataSize == 0 || MaxDataSize >= (PossibleID_Length + PossibleSizeLength + SizeFound))) {"
    },
    {
        "line": 102,
        "fullcodeline": "Result->SizePosition = DataStream.getFilePointer() - SizeIdx + EBML_ID_LENGTH(PossibleID);"
    },
    {
        "line": 103,
        "fullcodeline": "Result->ElementPosition = Result->SizePosition - EBML_ID_LENGTH(PossibleID);"
    },
    {
        "line": 99,
        "fullcodeline": "Result->SetSizeInfinite();"
    }
]