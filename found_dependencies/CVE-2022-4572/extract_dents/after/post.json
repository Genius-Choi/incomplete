[
    {
        "line": 6,
        "fullcodeline": "inode = inodes[dent_node.inum]"
    },
    {
        "line": 11,
        "fullcodeline": "dent_path = os.path.realpath(os.path.join(path, dent_node.name))"
    },
    {
        "line": 2,
        "fullcodeline": "if dent_node.inum not in inodes:"
    },
    {
        "line": 8,
        "fullcodeline": "if not is_safe_path(path, dent_node.name):"
    },
    {
        "line": 13,
        "fullcodeline": "if dent_node.type == UBIFS_ITYPE_DIR:"
    },
    {
        "line": 3,
        "fullcodeline": "error(extract_dents, 'Error', 'inum: %s not found in inodes' % (dent_node.inum))"
    },
    {
        "line": 9,
        "fullcodeline": "error(extract_dents, 'Warning', 'Path traversal attempt: %s, discarding' % (dent_node.name))"
    },
    {
        "line": 28,
        "fullcodeline": "_set_file_timestamps(dent_path, inode)"
    },
    {
        "line": 24,
        "fullcodeline": "if 'dent' in inode:"
    },
    {
        "line": 30,
        "fullcodeline": "elif dent_node.type == UBIFS_ITYPE_REG:"
    },
    {
        "line": 15,
        "fullcodeline": "if not os.path.exists(dent_path):"
    },
    {
        "line": 25,
        "fullcodeline": "for dnode in inode['dent']:"
    },
    {
        "line": 52,
        "fullcodeline": "elif dent_node.type == UBIFS_ITYPE_LNK:"
    },
    {
        "line": 16,
        "fullcodeline": "os.mkdir(dent_path)"
    },
    {
        "line": 17,
        "fullcodeline": "log(extract_dents, 'Make Dir: %s' % (dent_path))"
    },
    {
        "line": 22,
        "fullcodeline": "error(extract_dents, 'Warn', 'DIR Fail: %s' % e)"
    },
    {
        "line": 44,
        "fullcodeline": "_set_file_timestamps(dent_path, inode)"
    },
    {
        "line": 26,
        "fullcodeline": "extract_dents(ubifs, inodes, dnode, dent_path, perms)"
    },
    {
        "line": 32,
        "fullcodeline": "if inode['ino'].nlink > 1:"
    },
    {
        "line": 61,
        "fullcodeline": "elif dent_node.type in [UBIFS_ITYPE_BLK, UBIFS_ITYPE_CHR]:"
    },
    {
        "line": 20,
        "fullcodeline": "_set_file_perms(dent_path, inode)"
    },
    {
        "line": 41,
        "fullcodeline": "buf = _process_reg_file(ubifs, inode, dent_path)"
    },
    {
        "line": 42,
        "fullcodeline": "_write_reg_file(dent_path, buf)"
    },
    {
        "line": 47,
        "fullcodeline": "_set_file_perms(dent_path, inode)"
    },
    {
        "line": 50,
        "fullcodeline": "error(extract_dents, 'Warn', 'FILE Fail: %s' % e)"
    },
    {
        "line": 55,
        "fullcodeline": "os.symlink('%s' % inode['ino'].data.decode('utf-8'), dent_path)"
    },
    {
        "line": 56,
        "fullcodeline": "log(extract_dents, 'Make Symlink: %s > %s' % (dent_path, inode['ino'].data))"
    },
    {
        "line": 33,
        "fullcodeline": "if 'hlink' not in inode:"
    },
    {
        "line": 80,
        "fullcodeline": "elif dent_node.type == UBIFS_ITYPE_FIFO:"
    },
    {
        "line": 34,
        "fullcodeline": "inode['hlink'] = dent_path"
    },
    {
        "line": 35,
        "fullcodeline": "buf = _process_reg_file(ubifs, inode, dent_path)"
    },
    {
        "line": 36,
        "fullcodeline": "_write_reg_file(dent_path, buf)"
    },
    {
        "line": 38,
        "fullcodeline": "os.link(inode['hlink'], dent_path)"
    },
    {
        "line": 39,
        "fullcodeline": "log(extract_dents, 'Make Link: %s > %s' % (dent_path, inode['hlink']))"
    },
    {
        "line": 59,
        "fullcodeline": "error(extract_dents, 'Warn', 'SYMLINK Fail: %s' % e)"
    },
    {
        "line": 90,
        "fullcodeline": "elif dent_node.type == UBIFS_ITYPE_SOCK:"
    },
    {
        "line": 63,
        "fullcodeline": "dev = struct.unpack('<II', inode['ino'].data)[0]"
    },
    {
        "line": 65,
        "fullcodeline": "os.mknod(dent_path, inode['ino'].mode, dev)"
    },
    {
        "line": 66,
        "fullcodeline": "log(extract_dents, 'Make Device Node: %s' % (dent_path))"
    },
    {
        "line": 71,
        "fullcodeline": "log(extract_dents, 'Create dummy device.')"
    },
    {
        "line": 72,
        "fullcodeline": "_write_reg_file(dent_path, str(dev))"
    },
    {
        "line": 78,
        "fullcodeline": "error(extract_dents, 'Warn', 'DEV Fail: %s' % e)"
    },
    {
        "line": 82,
        "fullcodeline": "os.mkfifo(dent_path, inode['ino'].mode)"
    },
    {
        "line": 83,
        "fullcodeline": "log(extract_dents, 'Make FIFO: %s' % (path))"
    },
    {
        "line": 69,
        "fullcodeline": "_set_file_perms(dent_path, inode)"
    },
    {
        "line": 75,
        "fullcodeline": "_set_file_perms(dent_path, inode)"
    },
    {
        "line": 86,
        "fullcodeline": "_set_file_perms(dent_path, inode)"
    },
    {
        "line": 88,
        "fullcodeline": "error(extract_dents, 'Warn', 'FIFO Fail: %s : %s' % (dent_path, e))"
    },
    {
        "line": 93,
        "fullcodeline": "_write_reg_file(dent_path, '')"
    },
    {
        "line": 97,
        "fullcodeline": "error(extract_dents, 'Warn', 'SOCK Fail: %s : %s' % (dent_path, e))"
    },
    {
        "line": 95,
        "fullcodeline": "_set_file_perms(dent_path, inode)"
    }
]