[
    {
        "line": 3,
        "fullcodeline": "data_keys = data.keys()"
    },
    {
        "line": 4,
        "fullcodeline": "required_fields = ['first_name', 'last_name', 'userid', 'groups']"
    },
    {
        "line": 5,
        "fullcodeline": "missing_fields = [x for x in required_fields if x not in data_keys]"
    },
    {
        "line": 6,
        "fullcodeline": "extra_fields = [x for x in data_keys if x not in required_fields]"
    },
    {
        "line": 12,
        "fullcodeline": "user_table = get_user_table(db)"
    },
    {
        "line": 13,
        "fullcodeline": "existing_user = user_table.find_one(userid=data['userid'])"
    },
    {
        "line": 20,
        "fullcodeline": "userid = data.get('userid')"
    },
    {
        "line": 21,
        "fullcodeline": "groups = data.pop('groups')"
    },
    {
        "line": 22,
        "fullcodeline": "groups_table = db.get_table('groups')"
    },
    {
        "line": 14,
        "fullcodeline": "if request.method == 'POST' and existing_user:"
    },
    {
        "line": 16,
        "fullcodeline": "if request.method == 'PUT' and not existing_user:"
    },
    {
        "line": 24,
        "fullcodeline": "if request.method == 'POST':"
    },
    {
        "line": 29,
        "fullcodeline": "for name in groups:"
    },
    {
        "line": 32,
        "fullcodeline": "if request.method == 'PUT':"
    },
    {
        "line": 25,
        "fullcodeline": "user_insert = user_table.insert(data)"
    },
    {
        "line": 34,
        "fullcodeline": "params = {}"
    },
    {
        "line": 38,
        "fullcodeline": "where_clause = 'name NOT IN(:' + \",:\".join(params.keys()) + ')' # b/c sqlalchemy can't use a list!?"
    },
    {
        "line": 39,
        "fullcodeline": "params['userid'] = userid"
    },
    {
        "line": 40,
        "fullcodeline": "q = '''DELETE FROM groups WHERE userid=:userid AND ''' + where_clause"
    },
    {
        "line": 43,
        "fullcodeline": "return {'status': 200, 'user': get_user(db, userid)}"
    },
    {
        "line": 8,
        "fullcodeline": "return error(400, {'error': 'Missing fields (%s)' % (','.join(missing_fields)) })"
    },
    {
        "line": 10,
        "fullcodeline": "return error(400, {'error': 'Extra fields (%s)' % (','.join(extra_fields)) })"
    },
    {
        "line": 15,
        "fullcodeline": "return error(409, {'error': 'User already exists'})"
    },
    {
        "line": 17,
        "fullcodeline": "return error(404, {'error': 'User does not exist'})"
    },
    {
        "line": 26,
        "fullcodeline": "elif request.method == 'PUT':"
    },
    {
        "line": 30,
        "fullcodeline": "groups_table.upsert(dict(name=name, userid=userid), ['name','userid'])"
    },
    {
        "line": 35,
        "fullcodeline": "for counter, group in enumerate(groups,1):"
    },
    {
        "line": 41,
        "fullcodeline": "db.executable.execute(q, params)"
    },
    {
        "line": 27,
        "fullcodeline": "user_update = user_table.update(data, ['userid'])"
    },
    {
        "line": 36,
        "fullcodeline": "params[\"group_name\" + str(counter)] = group"
    },
    {
        "line": 37,
        "fullcodeline": "counter += 1"
    }
]