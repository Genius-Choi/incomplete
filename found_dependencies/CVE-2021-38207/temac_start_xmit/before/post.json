[
    {
        "line": 3,
        "fullcodeline": "struct temac_local *lp = netdev_priv(ndev);"
    },
    {
        "line": 30,
        "fullcodeline": "cur_p->app0 = 0;"
    },
    {
        "line": 41,
        "fullcodeline": "cur_p->app0 |= cpu_to_be32(STS_CTRL_APP0_SOP);"
    },
    {
        "line": 42,
        "fullcodeline": "skb_dma_addr = dma_map_single(ndev->dev.parent, skb->data,"
    },
    {
        "line": 44,
        "fullcodeline": "cur_p->len = cpu_to_be32(skb_headlen(skb));"
    },
    {
        "line": 50,
        "fullcodeline": "cur_p->phys = cpu_to_be32(skb_dma_addr);"
    },
    {
        "line": 87,
        "fullcodeline": "cur_p->app0 |= cpu_to_be32(STS_CTRL_APP0_EOP);"
    },
    {
        "line": 92,
        "fullcodeline": "ptr_to_txbd((void *)skb, cur_p);"
    },
    {
        "line": 94,
        "fullcodeline": "tail_p = lp->tx_bd_p + sizeof(*lp->tx_bd_v) * lp->tx_bd_tail;"
    },
    {
        "line": 95,
        "fullcodeline": "lp->tx_bd_tail++;"
    },
    {
        "line": 99,
        "fullcodeline": "skb_tx_timestamp(skb);"
    },
    {
        "line": 102,
        "fullcodeline": "wmb();"
    },
    {
        "line": 103,
        "fullcodeline": "lp->dma_out(lp, TX_TAILDESC_PTR, tail_p); /* DMA start */"
    },
    {
        "line": 14,
        "fullcodeline": "if (temac_check_tx_bd_space(lp, num_frag + 1)) {"
    },
    {
        "line": 31,
        "fullcodeline": "if (skb->ip_summed == CHECKSUM_PARTIAL) {"
    },
    {
        "line": 45,
        "fullcodeline": "if (WARN_ON_ONCE(dma_mapping_error(ndev->dev.parent, skb_dma_addr))) {"
    },
    {
        "line": 52,
        "fullcodeline": "for (ii = 0; ii < num_frag; ii++) {"
    },
    {
        "line": 96,
        "fullcodeline": "if (lp->tx_bd_tail >= lp->tx_bd_num)"
    },
    {
        "line": 10,
        "fullcodeline": "num_frag = skb_shinfo(skb)->nr_frags;"
    },
    {
        "line": 18,
        "fullcodeline": "netif_stop_queue(ndev);"
    },
    {
        "line": 21,
        "fullcodeline": "smp_mb();"
    },
    {
        "line": 27,
        "fullcodeline": "netif_wake_queue(ndev);"
    },
    {
        "line": 32,
        "fullcodeline": "unsigned int csum_start_off = skb_checksum_start_offset(skb);"
    },
    {
        "line": 33,
        "fullcodeline": "unsigned int csum_index_off = csum_start_off + skb->csum_offset;"
    },
    {
        "line": 35,
        "fullcodeline": "cur_p->app0 |= cpu_to_be32(0x000001); /* TX Checksum Enabled */"
    },
    {
        "line": 36,
        "fullcodeline": "cur_p->app1 = cpu_to_be32((csum_start_off << 16)"
    },
    {
        "line": 38,
        "fullcodeline": "cur_p->app2 = 0;  /* initial checksum seed */"
    },
    {
        "line": 43,
        "fullcodeline": "skb_headlen(skb), DMA_TO_DEVICE);"
    },
    {
        "line": 46,
        "fullcodeline": "dev_kfree_skb_any(skb);"
    },
    {
        "line": 57,
        "fullcodeline": "skb_dma_addr = dma_map_single(ndev->dev.parent,"
    },
    {
        "line": 82,
        "fullcodeline": "cur_p->phys = cpu_to_be32(skb_dma_addr);"
    },
    {
        "line": 83,
        "fullcodeline": "cur_p->len = cpu_to_be32(skb_frag_size(frag));"
    },
    {
        "line": 84,
        "fullcodeline": "cur_p->app0 = 0;"
    },
    {
        "line": 85,
        "fullcodeline": "frag++;"
    },
    {
        "line": 97,
        "fullcodeline": "lp->tx_bd_tail = 0;"
    },
    {
        "line": 15,
        "fullcodeline": "if (netif_queue_stopped(ndev))"
    },
    {
        "line": 24,
        "fullcodeline": "if (temac_check_tx_bd_space(lp, num_frag))"
    },
    {
        "line": 53,
        "fullcodeline": "if (++lp->tx_bd_tail >= lp->tx_bd_num)"
    },
    {
        "line": 61,
        "fullcodeline": "if (dma_mapping_error(ndev->dev.parent, skb_dma_addr)) {"
    },
    {
        "line": 11,
        "fullcodeline": "frag = &skb_shinfo(skb)->frags[0];"
    },
    {
        "line": 54,
        "fullcodeline": "lp->tx_bd_tail = 0;"
    },
    {
        "line": 58,
        "fullcodeline": "skb_frag_address(frag),"
    },
    {
        "line": 59,
        "fullcodeline": "skb_frag_size(frag),"
    },
    {
        "line": 75,
        "fullcodeline": "dma_unmap_single(ndev->dev.parent,"
    },
    {
        "line": 78,
        "fullcodeline": "dev_kfree_skb_any(skb);"
    },
    {
        "line": 62,
        "fullcodeline": "if (--lp->tx_bd_tail < 0)"
    },
    {
        "line": 65,
        "fullcodeline": "while (--ii >= 0) {"
    },
    {
        "line": 76,
        "fullcodeline": "be32_to_cpu(cur_p->phys),"
    },
    {
        "line": 77,
        "fullcodeline": "skb_headlen(skb), DMA_TO_DEVICE);"
    },
    {
        "line": 63,
        "fullcodeline": "lp->tx_bd_tail = lp->tx_bd_num - 1;"
    },
    {
        "line": 66,
        "fullcodeline": "--frag;"
    },
    {
        "line": 67,
        "fullcodeline": "dma_unmap_single(ndev->dev.parent,"
    },
    {
        "line": 68,
        "fullcodeline": "be32_to_cpu(cur_p->phys),"
    },
    {
        "line": 69,
        "fullcodeline": "skb_frag_size(frag),"
    },
    {
        "line": 71,
        "fullcodeline": "if (--lp->tx_bd_tail < 0)"
    },
    {
        "line": 72,
        "fullcodeline": "lp->tx_bd_tail = lp->tx_bd_num - 1;"
    }
]