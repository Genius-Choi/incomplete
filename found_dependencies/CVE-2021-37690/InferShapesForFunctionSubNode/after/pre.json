[
    {
        "line": 3,
        "fullcodeline": "TF_RETURN_IF_ERROR(AddNodeInternal(node, outer_context));"
    },
    {
        "line": 4,
        "fullcodeline": "InferenceContext* node_context = CHECK_NOTNULL(GetContext(node));"
    },
    {
        "line": 6,
        "fullcodeline": "if (StringPiece(node->type_string()) == kArgOp) {"
    },
    {
        "line": 79,
        "fullcodeline": "return Status::OK();"
    },
    {
        "line": 12,
        "fullcodeline": "TF_RETURN_IF_ERROR(GetNodeAttr(AttrSlice(node->def()), \"index\", &index));"
    },
    {
        "line": 14,
        "fullcodeline": "if (index < 0 || outer_context->num_inputs() <= index) {"
    },
    {
        "line": 30,
        "fullcodeline": "auto* resource = outer_context->input_handle_shapes_and_types(index);"
    },
    {
        "line": 22,
        "fullcodeline": "if (outer_context->input(index).SameHandle(ShapeHandle())) {"
    },
    {
        "line": 25,
        "fullcodeline": "node_context->set_output(0, node_context->UnknownShape());"
    },
    {
        "line": 34,
        "fullcodeline": "} else if (StringPiece(node->type_string()) == kRetvalOp) {"
    },
    {
        "line": 15,
        "fullcodeline": "return errors::Internal("
    },
    {
        "line": 23,
        "fullcodeline": "VLOG(1) << \"Function instantiation has undefined input shape at \""
    },
    {
        "line": 27,
        "fullcodeline": "node_context->set_output(0, outer_context->input(index));"
    },
    {
        "line": 52,
        "fullcodeline": "node_context->ShapeHandleToProto(node_context->input(0), &proto);"
    },
    {
        "line": 54,
        "fullcodeline": "outer_context->set_output(index, handle);"
    },
    {
        "line": 17,
        "fullcodeline": "\" not in [0, \", outer_context->num_inputs(), \").\");"
    },
    {
        "line": 40,
        "fullcodeline": "TF_RETURN_IF_ERROR(GetNodeAttr(AttrSlice(node->def()), \"index\", &index));"
    },
    {
        "line": 53,
        "fullcodeline": "TF_RETURN_IF_ERROR(outer_context->MakeShapeFromShapeProto(proto, &handle));"
    },
    {
        "line": 57,
        "fullcodeline": "node_context->input_handle_shapes_and_types(0);"
    },
    {
        "line": 42,
        "fullcodeline": "if (index < 0 || outer_context->num_outputs() <= index) {"
    },
    {
        "line": 63,
        "fullcodeline": "std::vector<ShapeAndType> copied_shapes_and_types;"
    },
    {
        "line": 43,
        "fullcodeline": "return errors::Internal("
    },
    {
        "line": 45,
        "fullcodeline": "\" not in [0, \", outer_context->num_outputs(), \").\");"
    },
    {
        "line": 67,
        "fullcodeline": "node_context->ShapeHandleToProto(shape_and_type.shape, &proto);"
    },
    {
        "line": 70,
        "fullcodeline": "copied_shapes_and_types.push_back("
    },
    {
        "line": 69,
        "fullcodeline": "outer_context->MakeShapeFromShapeProto(proto, &handle));"
    },
    {
        "line": 71,
        "fullcodeline": "ShapeAndType(handle, shape_and_type.dtype, shape_and_type.type));"
    }
]