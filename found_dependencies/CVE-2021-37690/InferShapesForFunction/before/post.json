[
    {
        "line": 5,
        "fullcodeline": "auto it = functions_.find(function_def);"
    },
    {
        "line": 27,
        "fullcodeline": "Status inference_status = Status::OK();"
    },
    {
        "line": 6,
        "fullcodeline": "if (it != functions_.end()) {"
    },
    {
        "line": 29,
        "fullcodeline": "auto node_shape_inference_lambda = [this, &outer_context, &function_nodes,"
    },
    {
        "line": 40,
        "fullcodeline": "ReverseDFS(*graph, {}, node_shape_inference_lambda);"
    },
    {
        "line": 7,
        "fullcodeline": "graph = it->second.get();"
    },
    {
        "line": 45,
        "fullcodeline": "node_to_context_.erase(node);"
    },
    {
        "line": 10,
        "fullcodeline": "TF_RETURN_IF_ERROR(InstantiateFunction("
    },
    {
        "line": 17,
        "fullcodeline": "Graph* new_graph = new Graph(function_library_);"
    },
    {
        "line": 19,
        "fullcodeline": "options.allow_internal_ops = true;"
    },
    {
        "line": 20,
        "fullcodeline": "TF_RETURN_IF_ERROR("
    },
    {
        "line": 22,
        "fullcodeline": "functions_[function_def].reset(new_graph);"
    },
    {
        "line": 23,
        "fullcodeline": "graph = new_graph;"
    },
    {
        "line": 21,
        "fullcodeline": "ConvertNodeDefsToGraph(options, result.nodes, new_graph));"
    }
]