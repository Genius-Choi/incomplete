[
    {
        "line": 19,
        "fullcodeline": "s->token_line = s->line;"
    },
    {
        "line": 20,
        "fullcodeline": "s->token_column = s->column;"
    },
    {
        "line": 21,
        "fullcodeline": "s->buf_pos = 0;"
    },
    {
        "line": 112,
        "fullcodeline": "skip_to_eol(s);"
    },
    {
        "line": 5,
        "fullcodeline": "while (is_space(peek(s)))"
    },
    {
        "line": 10,
        "fullcodeline": "if (chr(s, '#')) {"
    },
    {
        "line": 16,
        "fullcodeline": "if (eof(s)) return TOK_END_OF_FILE;"
    },
    {
        "line": 24,
        "fullcodeline": "if (chr(s, '<')) {"
    },
    {
        "line": 41,
        "fullcodeline": "if (chr(s, ':'))"
    },
    {
        "line": 43,
        "fullcodeline": "if (chr(s, '!'))"
    },
    {
        "line": 45,
        "fullcodeline": "if (chr(s, '~'))"
    },
    {
        "line": 49,
        "fullcodeline": "if (chr(s, '\\\"')) {"
    },
    {
        "line": 94,
        "fullcodeline": "if (is_alpha(peek(s)) || peek(s) == '_') {"
    },
    {
        "line": 6,
        "fullcodeline": "if (next(s) == '\\n')"
    },
    {
        "line": 95,
        "fullcodeline": "s->buf_pos = 0;"
    },
    {
        "line": 26,
        "fullcodeline": "buf_append(s, next(s));"
    },
    {
        "line": 97,
        "fullcodeline": "buf_append(s, next(s));"
    },
    {
        "line": 103,
        "fullcodeline": "if (streq(s->buf, \"include\"))"
    },
    {
        "line": 25,
        "fullcodeline": "while (peek(s) != '>' && !eol(s))"
    },
    {
        "line": 27,
        "fullcodeline": "if (!chr(s, '>')) {"
    },
    {
        "line": 31,
        "fullcodeline": "if (!buf_append(s, '\\0')) {"
    },
    {
        "line": 50,
        "fullcodeline": "while (!eof(s) && !eol(s) && peek(s) != '\\\"') {"
    },
    {
        "line": 76,
        "fullcodeline": "if (!chr(s, '\\\"')) {"
    },
    {
        "line": 80,
        "fullcodeline": "if (!buf_append(s, '\\0')) {"
    },
    {
        "line": 84,
        "fullcodeline": "if (!is_valid_utf8(s->buf, s->buf_pos - 1)) {"
    },
    {
        "line": 96,
        "fullcodeline": "while (is_alnum(peek(s)) || peek(s) == '_')"
    },
    {
        "line": 98,
        "fullcodeline": "if (!buf_append(s, '\\0')) {"
    },
    {
        "line": 51,
        "fullcodeline": "if (chr(s, '\\\\')) {"
    },
    {
        "line": 53,
        "fullcodeline": "if (chr(s, '\\\\')) {"
    },
    {
        "line": 73,
        "fullcodeline": "buf_append(s, next(s));"
    },
    {
        "line": 54,
        "fullcodeline": "buf_append(s, '\\\\');"
    },
    {
        "line": 56,
        "fullcodeline": "else if (chr(s, '\"')) {"
    },
    {
        "line": 57,
        "fullcodeline": "buf_append(s, '\"');"
    },
    {
        "line": 59,
        "fullcodeline": "else if (chr(s, 'x') || chr(s, 'X')) {"
    },
    {
        "line": 60,
        "fullcodeline": "if (hex(s, &o))"
    },
    {
        "line": 61,
        "fullcodeline": "buf_append(s, (char) o);"
    },
    {
        "line": 65,
        "fullcodeline": "else if (oct(s, &o)) {"
    },
    {
        "line": 63,
        "fullcodeline": "scanner_warn(s, \"illegal hexadecimal escape sequence in string literal\");"
    },
    {
        "line": 66,
        "fullcodeline": "buf_append(s, (char) o);"
    },
    {
        "line": 69,
        "fullcodeline": "scanner_warn(s, \"unknown escape sequence (%c) in string literal\", peek(s));"
    }
]