[
    {
        "line": 3,
        "fullcodeline": "u32 sync_id = 0;"
    },
    {
        "line": 4,
        "fullcodeline": "u32 codecid = 0;"
    },
    {
        "line": 6,
        "fullcodeline": "u32 i, count, pfmt=0;"
    },
    {
        "line": 15,
        "fullcodeline": "dur.den = ctx->fps.num;"
    },
    {
        "line": 16,
        "fullcodeline": "dur.num = (u64) (ctx->fps.den * AVI_video_frames(ctx->avi));"
    },
    {
        "line": 18,
        "fullcodeline": "unframed = GF_TRUE;"
    },
    {
        "line": 19,
        "fullcodeline": "comp = AVI_video_compressor(ctx->avi);"
    },
    {
        "line": 59,
        "fullcodeline": "ctx->v_in_use = GF_FALSE;"
    },
    {
        "line": 100,
        "fullcodeline": "unframed = GF_FALSE;"
    },
    {
        "line": 101,
        "fullcodeline": "count = AVI_audio_tracks(ctx->avi);"
    },
    {
        "line": 20,
        "fullcodeline": "if (!comp) {"
    },
    {
        "line": 102,
        "fullcodeline": "for (i=0; i<count; i++) {"
    },
    {
        "line": 11,
        "fullcodeline": "Double fps = AVI_frame_rate(ctx->avi);"
    },
    {
        "line": 12,
        "fullcodeline": "gf_media_get_video_timing(fps, &ctx->fps.num, &ctx->fps.den);"
    },
    {
        "line": 21,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[AVIDmx] Cannot retrieve video compressor name, ignoring video stream\\n\"));"
    },
    {
        "line": 65,
        "fullcodeline": "ctx->nb_frames = (u32) AVI_video_frames(ctx->avi);"
    },
    {
        "line": 66,
        "fullcodeline": "ctx->cur_frame = 0;"
    },
    {
        "line": 67,
        "fullcodeline": "sync_id = 1;"
    },
    {
        "line": 68,
        "fullcodeline": "ctx->v_in_use = GF_TRUE;"
    },
    {
        "line": 70,
        "fullcodeline": "gf_filter_pid_set_property(ctx->v_opid, GF_PROP_PID_STREAM_TYPE, &PROP_UINT(GF_STREAM_VISUAL) );"
    },
    {
        "line": 71,
        "fullcodeline": "gf_filter_pid_set_property(ctx->v_opid, GF_PROP_PID_CODECID, &PROP_UINT(codecid) );"
    },
    {
        "line": 72,
        "fullcodeline": "gf_filter_pid_set_property(ctx->v_opid, GF_PROP_PID_TIMESCALE, &PROP_UINT(ctx->fps.num) );"
    },
    {
        "line": 74,
        "fullcodeline": "gf_filter_pid_set_property(ctx->v_opid, GF_PROP_PID_ID, &PROP_UINT( sync_id) );"
    },
    {
        "line": 75,
        "fullcodeline": "gf_filter_pid_set_property(ctx->v_opid, GF_PROP_PID_CLOCK_ID, &PROP_UINT( sync_id ) );"
    },
    {
        "line": 76,
        "fullcodeline": "gf_filter_pid_set_property(ctx->v_opid, GF_PROP_PID_FPS, &PROP_FRAC( ctx->fps ) );"
    },
    {
        "line": 77,
        "fullcodeline": "w = AVI_video_width(ctx->avi);"
    },
    {
        "line": 78,
        "fullcodeline": "h = AVI_video_height(ctx->avi);"
    },
    {
        "line": 79,
        "fullcodeline": "gf_filter_pid_set_property(ctx->v_opid, GF_PROP_PID_WIDTH, &PROP_UINT( w ) );"
    },
    {
        "line": 80,
        "fullcodeline": "gf_filter_pid_set_property(ctx->v_opid, GF_PROP_PID_HEIGHT, &PROP_UINT( h ) );"
    },
    {
        "line": 81,
        "fullcodeline": "gf_filter_pid_set_property(ctx->v_opid, GF_PROP_PID_DURATION, &PROP_FRAC64( dur ) );"
    },
    {
        "line": 83,
        "fullcodeline": "gf_filter_pid_set_property(ctx->v_opid, GF_PROP_PID_PLAYBACK_MODE, &PROP_UINT(GF_PLAYBACK_MODE_FASTFORWARD ) );"
    },
    {
        "line": 103,
        "fullcodeline": "u32 a_fmt, afmt=0, nb_bits;"
    },
    {
        "line": 104,
        "fullcodeline": "AVI_set_audio_track(ctx->avi, i);"
    },
    {
        "line": 106,
        "fullcodeline": "codecid = 0;"
    },
    {
        "line": 107,
        "fullcodeline": "a_fmt = AVI_audio_format(ctx->avi);"
    },
    {
        "line": 108,
        "fullcodeline": "nb_bits = AVI_audio_bits(ctx->avi);"
    },
    {
        "line": 62,
        "fullcodeline": "if (!ctx->v_opid) {"
    },
    {
        "line": 24,
        "fullcodeline": "else if (!stricmp(comp, \"DIVX\") || !stricmp(comp, \"DX50\")\t/*DivX*/"
    },
    {
        "line": 63,
        "fullcodeline": "ctx->v_opid = gf_filter_pid_new(filter);"
    },
    {
        "line": 86,
        "fullcodeline": "u32 stride=0;"
    },
    {
        "line": 87,
        "fullcodeline": "gf_pixel_get_size_info(pfmt, w, h, NULL, &stride, NULL, NULL, NULL);"
    },
    {
        "line": 88,
        "fullcodeline": "gf_filter_pid_set_property(ctx->v_opid, GF_PROP_PID_STRIDE, &PROP_UINT( stride ) );"
    },
    {
        "line": 89,
        "fullcodeline": "gf_filter_pid_set_property(ctx->v_opid, GF_PROP_PID_PIXFMT, &PROP_UINT( pfmt ) );"
    },
    {
        "line": 97,
        "fullcodeline": "gf_filter_pid_set_property(ctx->v_opid, GF_PROP_PID_UNFRAMED, NULL);"
    },
    {
        "line": 111,
        "fullcodeline": "case GF_4CC('P','C','M',' '):"
    },
    {
        "line": 112,
        "fullcodeline": "codecid = GF_CODECID_RAW;"
    },
    {
        "line": 133,
        "fullcodeline": "codecid = GF_CODECID_ADPCM;"
    },
    {
        "line": 136,
        "fullcodeline": "codecid = GF_CODECID_IBM_CVSD;"
    },
    {
        "line": 139,
        "fullcodeline": "codecid = GF_CODECID_ALAW;"
    },
    {
        "line": 142,
        "fullcodeline": "codecid = GF_CODECID_MULAW;"
    },
    {
        "line": 145,
        "fullcodeline": "codecid = GF_CODECID_OKI_ADPCM;"
    },
    {
        "line": 148,
        "fullcodeline": "codecid = GF_CODECID_DVI_ADPCM;"
    },
    {
        "line": 151,
        "fullcodeline": "codecid = GF_CODECID_DIGISTD;"
    },
    {
        "line": 154,
        "fullcodeline": "codecid = GF_CODECID_YAMAHA_ADPCM;"
    },
    {
        "line": 157,
        "fullcodeline": "codecid = GF_CODECID_DSP_TRUESPEECH;"
    },
    {
        "line": 160,
        "fullcodeline": "codecid = GF_CODECID_GSM610;"
    },
    {
        "line": 163,
        "fullcodeline": "codecid = GF_CODECID_IBM_MULAW;"
    },
    {
        "line": 166,
        "fullcodeline": "codecid = GF_CODECID_IBM_ALAW;"
    },
    {
        "line": 169,
        "fullcodeline": "codecid = GF_CODECID_IBM_ADPCM;"
    },
    {
        "line": 172,
        "fullcodeline": "codecid = GF_CODECID_MPEG_AUDIO;"
    },
    {
        "line": 173,
        "fullcodeline": "unframed = GF_TRUE;"
    },
    {
        "line": 176,
        "fullcodeline": "codecid = GF_CODECID_AAC_MPEG4;"
    },
    {
        "line": 177,
        "fullcodeline": "unframed = GF_TRUE;"
    },
    {
        "line": 180,
        "fullcodeline": "codecid = GF_CODECID_AAC_MPEG4;"
    },
    {
        "line": 183,
        "fullcodeline": "codecid = GF_CODECID_AC3;"
    },
    {
        "line": 186,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[AVIDmx] Audio format %d not supported, patch welcome\\n\", a_fmt));"
    },
    {
        "line": 191,
        "fullcodeline": "AVIAstream *st = NULL;"
    },
    {
        "line": 192,
        "fullcodeline": "u32 brate, j, c  = gf_list_count(ctx->audios);"
    },
    {
        "line": 204,
        "fullcodeline": "st->in_use = GF_TRUE;"
    },
    {
        "line": 205,
        "fullcodeline": "st->stream_num = i;"
    },
    {
        "line": 207,
        "fullcodeline": "st->audio_done = GF_FALSE;"
    },
    {
        "line": 222,
        "fullcodeline": "gf_filter_pid_set_property(st->opid, GF_PROP_PID_STREAM_TYPE, &PROP_UINT(GF_STREAM_AUDIO) );"
    },
    {
        "line": 223,
        "fullcodeline": "gf_filter_pid_set_property(st->opid, GF_PROP_PID_CODECID, &PROP_UINT( codecid) );"
    },
    {
        "line": 224,
        "fullcodeline": "st->freq = AVI_audio_rate(ctx->avi);"
    },
    {
        "line": 225,
        "fullcodeline": "gf_filter_pid_set_property(st->opid, GF_PROP_PID_SAMPLE_RATE, &PROP_UINT( st->freq ) );"
    },
    {
        "line": 226,
        "fullcodeline": "st->nb_channels = AVI_audio_channels(ctx->avi);"
    },
    {
        "line": 227,
        "fullcodeline": "gf_filter_pid_set_property(st->opid, GF_PROP_PID_NUM_CHANNELS, &PROP_UINT( st->nb_channels ) );"
    },
    {
        "line": 228,
        "fullcodeline": "brate = AVI_audio_mp3rate(ctx->avi);"
    },
    {
        "line": 232,
        "fullcodeline": "gf_filter_pid_set_property(st->opid, GF_PROP_PID_ID, &PROP_UINT( 2 + st->stream_num) );"
    },
    {
        "line": 233,
        "fullcodeline": "gf_filter_pid_set_property(st->opid, GF_PROP_PID_CLOCK_ID, &PROP_UINT( sync_id ) );"
    },
    {
        "line": 234,
        "fullcodeline": "gf_filter_pid_set_property(st->opid, GF_PROP_PID_DURATION, &PROP_FRAC64( dur ) );"
    },
    {
        "line": 236,
        "fullcodeline": "gf_filter_pid_set_property(st->opid, GF_PROP_PID_PLAYBACK_MODE, &PROP_UINT(GF_PLAYBACK_MODE_FASTFORWARD ) );"
    },
    {
        "line": 237,
        "fullcodeline": "st->audio_bps = 0;"
    },
    {
        "line": 36,
        "fullcodeline": "|| !stricmp(comp, \"VP6F\") /*not tested*/"
    },
    {
        "line": 38,
        "fullcodeline": "codecid = GF_CODECID_MPEG4_PART2;"
    },
    {
        "line": 193,
        "fullcodeline": "for (j=0; j<c; j++) {"
    },
    {
        "line": 198,
        "fullcodeline": "if (!st) {"
    },
    {
        "line": 206,
        "fullcodeline": "if (!sync_id) sync_id = 2 + st->stream_num;"
    },
    {
        "line": 209,
        "fullcodeline": "if (codecid==GF_CODECID_MPEG_AUDIO) {"
    },
    {
        "line": 230,
        "fullcodeline": "if (brate && (unframed || (codecid == GF_CODECID_AAC_MPEG4)))"
    },
    {
        "line": 35,
        "fullcodeline": "|| !stricmp(comp, \"FMP4\") /*not tested*/"
    },
    {
        "line": 115,
        "fullcodeline": "afmt = GF_AUDIO_FMT_U8;"
    },
    {
        "line": 118,
        "fullcodeline": "afmt = GF_AUDIO_FMT_S16;"
    },
    {
        "line": 121,
        "fullcodeline": "afmt = GF_AUDIO_FMT_S24;"
    },
    {
        "line": 124,
        "fullcodeline": "afmt = GF_AUDIO_FMT_S32;"
    },
    {
        "line": 127,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[AVIDmx] Audio bit depth %d not mapped, patch welcome\\n\", nb_bits));"
    },
    {
        "line": 128,
        "fullcodeline": "afmt = GF_AUDIO_FMT_S16;"
    },
    {
        "line": 194,
        "fullcodeline": "st = gf_list_get(ctx->audios, j);"
    },
    {
        "line": 196,
        "fullcodeline": "st = NULL;"
    },
    {
        "line": 199,
        "fullcodeline": "GF_SAFEALLOC(st, AVIAstream);"
    },
    {
        "line": 201,
        "fullcodeline": "st->opid = gf_filter_pid_new(filter);"
    },
    {
        "line": 202,
        "fullcodeline": "gf_list_add(ctx->audios, st);"
    },
    {
        "line": 210,
        "fullcodeline": "u32 cid=0;"
    },
    {
        "line": 211,
        "fullcodeline": "char data[8];"
    },
    {
        "line": 212,
        "fullcodeline": "AVI_set_audio_track(ctx->avi, i);"
    },
    {
        "line": 213,
        "fullcodeline": "AVI_read_audio(ctx->avi, data, 8, (int*)&cid);"
    },
    {
        "line": 215,
        "fullcodeline": "u32 hdr = GF_4CC(data[0], data[1], data[2], data[3]);"
    },
    {
        "line": 216,
        "fullcodeline": "cid = gf_mp3_object_type_indication(hdr);"
    },
    {
        "line": 218,
        "fullcodeline": "AVI_set_audio_position(ctx->avi, 0);"
    },
    {
        "line": 231,
        "fullcodeline": "gf_filter_pid_set_property(st->opid, GF_PROP_PID_BITRATE, &PROP_UINT( brate ) );"
    },
    {
        "line": 239,
        "fullcodeline": "gf_filter_pid_set_property(st->opid, GF_PROP_PID_UNFRAMED, &PROP_BOOL( GF_TRUE ) );"
    },
    {
        "line": 240,
        "fullcodeline": "gf_filter_pid_set_property(st->opid, GF_PROP_PID_TIMESCALE, &PROP_UINT(st->freq) );"
    },
    {
        "line": 268,
        "fullcodeline": "gf_filter_pid_set_property(st->opid, GF_PROP_PID_UNFRAMED, NULL);"
    },
    {
        "line": 34,
        "fullcodeline": "|| !stricmp(comp, \"MP43\") /*not tested*/"
    },
    {
        "line": 39,
        "fullcodeline": "} else if ( !stricmp(comp, \"H264\") /*not tested*/"
    },
    {
        "line": 91,
        "fullcodeline": "gf_filter_pid_set_property(ctx->v_opid, GF_PROP_PID_UNFRAMED, &PROP_BOOL(GF_TRUE) );"
    },
    {
        "line": 92,
        "fullcodeline": "gf_filter_pid_set_property_str(ctx->v_opid, \"nocts\", &PROP_BOOL( GF_TRUE ) );"
    },
    {
        "line": 195,
        "fullcodeline": "if (!st->in_use) break;"
    },
    {
        "line": 200,
        "fullcodeline": "if (!st) continue;"
    },
    {
        "line": 245,
        "fullcodeline": "st->audio_bps = AVI_audio_bits(ctx->avi);"
    },
    {
        "line": 246,
        "fullcodeline": "gf_filter_pid_set_property(st->opid, GF_PROP_PID_TIMESCALE, &PROP_UINT(st->freq) );"
    },
    {
        "line": 33,
        "fullcodeline": "|| !stricmp(comp, \"RMP4\") /*Sigma - not tested*/"
    },
    {
        "line": 40,
        "fullcodeline": "|| !stricmp(comp, \"X264\") /*not tested*/"
    },
    {
        "line": 42,
        "fullcodeline": "codecid = GF_CODECID_AVC;"
    },
    {
        "line": 219,
        "fullcodeline": "if (cid) codecid = cid;"
    },
    {
        "line": 248,
        "fullcodeline": "if (codecid == GF_CODECID_AAC_MPEG4) {"
    },
    {
        "line": 32,
        "fullcodeline": "|| !stricmp(comp, \"SEDG\") /*Samsung - not tested*/"
    },
    {
        "line": 243,
        "fullcodeline": "gf_filter_pid_set_property(st->opid, GF_PROP_PID_AUDIO_FORMAT, &PROP_UINT(afmt) );"
    },
    {
        "line": 251,
        "fullcodeline": "u8 *dsi=NULL;"
    },
    {
        "line": 252,
        "fullcodeline": "u32 dsi_len=0;"
    },
    {
        "line": 253,
        "fullcodeline": "memset(&acfg, 0, sizeof(GF_M4ADecSpecInfo));"
    },
    {
        "line": 254,
        "fullcodeline": "acfg.base_object_type = GF_M4A_AAC_LC;"
    },
    {
        "line": 255,
        "fullcodeline": "acfg.base_sr = st->freq;"
    },
    {
        "line": 256,
        "fullcodeline": "acfg.nb_chan = st->nb_channels;"
    },
    {
        "line": 257,
        "fullcodeline": "acfg.sbr_object_type = 0;"
    },
    {
        "line": 258,
        "fullcodeline": "acfg.audioPL = gf_m4a_get_profile(&acfg);"
    },
    {
        "line": 259,
        "fullcodeline": "gf_m4a_write_config(&acfg, &dsi, &dsi_len);"
    },
    {
        "line": 260,
        "fullcodeline": "gf_filter_pid_set_property(st->opid, GF_PROP_PID_DECODER_CONFIG, &PROP_DATA_NO_COPY(dsi, dsi_len) );"
    },
    {
        "line": 262,
        "fullcodeline": "st->audio_bps = 0;"
    },
    {
        "line": 263,
        "fullcodeline": "st->is_aac = GF_TRUE;"
    },
    {
        "line": 31,
        "fullcodeline": "|| !stricmp(comp, \"PVMM\") /*PacketVideo - not tested*/"
    },
    {
        "line": 43,
        "fullcodeline": "} else if ( !stricmp(comp, \"avc1\") ) {"
    },
    {
        "line": 94,
        "fullcodeline": "gf_filter_pid_set_property(ctx->v_opid, GF_PROP_PID_DECODER_CONFIG, &PROP_DATA(ctx->avi->extradata, ctx->avi->extradata_size) );"
    },
    {
        "line": 30,
        "fullcodeline": "|| !stricmp(comp, \"M4CC\") /*Divio - not tested*/"
    },
    {
        "line": 44,
        "fullcodeline": "codecid = GF_CODECID_AVC;"
    },
    {
        "line": 45,
        "fullcodeline": "unframed = GF_FALSE;"
    },
    {
        "line": 29,
        "fullcodeline": "|| !stricmp(comp, \"MP4V\") /*!! not tested*/"
    },
    {
        "line": 28,
        "fullcodeline": "|| !stricmp(comp, \"NDIG\") /*nero*/"
    },
    {
        "line": 46,
        "fullcodeline": "} else if (!stricmp(comp, \"DIV3\") || !stricmp(comp, \"DIV4\")) {"
    },
    {
        "line": 27,
        "fullcodeline": "|| !stricmp(comp, \"fvfw\") /*ffmpeg*/"
    },
    {
        "line": 48,
        "fullcodeline": "codecid = GF_CODECID_MSPEG4_V3;"
    },
    {
        "line": 49,
        "fullcodeline": "unframed = GF_FALSE;"
    },
    {
        "line": 26,
        "fullcodeline": "|| !stricmp(comp, \"3iv2\") /*3ivX*/"
    },
    {
        "line": 25,
        "fullcodeline": "|| !stricmp(comp, \"XVID\") /*XviD*/"
    },
    {
        "line": 50,
        "fullcodeline": "} else if (!comp[0]) {"
    },
    {
        "line": 51,
        "fullcodeline": "codecid = GF_CODECID_RAW;"
    },
    {
        "line": 52,
        "fullcodeline": "pfmt = GF_PIXEL_BGR;"
    },
    {
        "line": 54,
        "fullcodeline": "GF_LOG(GF_LOG_WARNING, GF_LOG_CONTAINER, (\"[AVIDmx] Video format %s not natively supported, signaling as is\\n\", comp));"
    },
    {
        "line": 55,
        "fullcodeline": "codecid = gf_4cc_parse(comp);"
    },
    {
        "line": 56,
        "fullcodeline": "unframed = GF_FALSE;"
    }
]