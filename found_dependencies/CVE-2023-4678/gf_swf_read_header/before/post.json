[
    {
        "line": 4,
        "fullcodeline": "u8 sig[3];"
    },
    {
        "line": 7,
        "fullcodeline": "sig[0] = gf_bs_read_u8(read->bs);"
    },
    {
        "line": 8,
        "fullcodeline": "sig[1] = gf_bs_read_u8(read->bs);"
    },
    {
        "line": 9,
        "fullcodeline": "sig[2] = gf_bs_read_u8(read->bs);"
    },
    {
        "line": 14,
        "fullcodeline": "/*version = */gf_bs_read_u8(read->bs);"
    },
    {
        "line": 15,
        "fullcodeline": "read->length = swf_get_32(read);"
    },
    {
        "line": 23,
        "fullcodeline": "swf_get_rec(read, &rc);"
    },
    {
        "line": 24,
        "fullcodeline": "read->width = rc.w;"
    },
    {
        "line": 25,
        "fullcodeline": "read->height = rc.h;"
    },
    {
        "line": 27,
        "fullcodeline": "swf_align(read);"
    },
    {
        "line": 28,
        "fullcodeline": "read->frame_rate = swf_get_16(read)>>8;"
    },
    {
        "line": 29,
        "fullcodeline": "read->frame_count = swf_get_16(read);"
    },
    {
        "line": 30,
        "fullcodeline": "GF_LOG(GF_LOG_INFO, GF_LOG_PARSER, (\"SWF Import - Scene Size %gx%g - %d frames @ %d FPS\\n\", read->width, read->height, read->frame_count, read->frame_rate));"
    },
    {
        "line": 11,
        "fullcodeline": "if ( ((sig[0] != 'F') && (sig[0] != 'C')) || (sig[1] != 'W') || (sig[2] != 'S') ) {"
    },
    {
        "line": 18,
        "fullcodeline": "if (sig[0] == 'C') {"
    },
    {
        "line": 19,
        "fullcodeline": "swf_init_decompress(read);"
    },
    {
        "line": 20,
        "fullcodeline": "if (!read->bs) return GF_NON_COMPLIANT_BITSTREAM;"
    }
]