[
    {
        "line": 3,
        "fullcodeline": "Bool period_switch = GF_FALSE;"
    },
    {
        "line": 4,
        "fullcodeline": "const GF_PropertyValue *p, *dsi=NULL;"
    },
    {
        "line": 10,
        "fullcodeline": "Bool new_period_request = GF_FALSE;"
    },
    {
        "line": 11,
        "fullcodeline": "const char *cue_file=NULL;"
    },
    {
        "line": 12,
        "fullcodeline": "s64 old_clamp_dur = 0;"
    },
    {
        "line": 13,
        "fullcodeline": "GF_DasherCtx *ctx = gf_filter_get_udta(filter);"
    },
    {
        "line": 28,
        "fullcodeline": "ctx->check_connections = GF_TRUE;"
    },
    {
        "line": 176,
        "fullcodeline": "ds = gf_filter_pid_get_udta(pid);"
    },
    {
        "line": 211,
        "fullcodeline": "gf_filter_pid_set_framing_mode(pid, GF_TRUE);"
    },
    {
        "line": 261,
        "fullcodeline": "prev_stream_type = ds->stream_type;"
    },
    {
        "line": 262,
        "fullcodeline": "CHECK_PROP(GF_PROP_PID_STREAM_TYPE, ds->stream_type, GF_NOT_SUPPORTED)"
    },
    {
        "line": 273,
        "fullcodeline": "ds->tile_base = GF_FALSE;"
    },
    {
        "line": 717,
        "fullcodeline": "old_period_switch = period_switch;"
    },
    {
        "line": 718,
        "fullcodeline": "period_switch = GF_FALSE;"
    },
    {
        "line": 719,
        "fullcodeline": "CHECK_PROP_STR(GF_PROP_PID_PERIOD_ID, ds->period_id, GF_EOS)"
    },
    {
        "line": 720,
        "fullcodeline": "CHECK_PROP_PROP(GF_PROP_PID_PERIOD_DESC, ds->p_period_desc, GF_EOS)"
    },
    {
        "line": 727,
        "fullcodeline": "p = gf_filter_pid_get_property(pid, GF_PROP_PID_PERIOD_START);"
    },
    {
        "line": 736,
        "fullcodeline": "assert(ds->period_start.den);"
    },
    {
        "line": 745,
        "fullcodeline": "ds->period_continuity_id = NULL;"
    },
    {
        "line": 746,
        "fullcodeline": "p = gf_filter_pid_get_property_str(ds->ipid, \"period_resume\");"
    },
    {
        "line": 768,
        "fullcodeline": "ds->last_period = NULL;"
    },
    {
        "line": 770,
        "fullcodeline": "ds->period_dur.num = 0;"
    },
    {
        "line": 771,
        "fullcodeline": "ds->period_dur.den = 1;"
    },
    {
        "line": 772,
        "fullcodeline": "p = gf_filter_pid_get_property(pid, GF_PROP_PID_PERIOD_DUR);"
    },
    {
        "line": 775,
        "fullcodeline": "p = gf_filter_pid_get_property_str(pid, \"max_seg_dur\");"
    },
    {
        "line": 776,
        "fullcodeline": "ctx->index_max_seg_dur = p ? p->value.uint : 0;"
    },
    {
        "line": 777,
        "fullcodeline": "p = gf_filter_pid_get_property_str(pid, \"mpd_duration\");"
    },
    {
        "line": 778,
        "fullcodeline": "ctx->index_media_duration = p ? p->value.longuint : 0;"
    },
    {
        "line": 829,
        "fullcodeline": "e = dasher_hls_setup_crypto(ctx, ds);"
    },
    {
        "line": 29,
        "fullcodeline": "if (!ctx->opid && !ctx->gencues) {"
    },
    {
        "line": 177,
        "fullcodeline": "if (!ds) {"
    },
    {
        "line": 275,
        "fullcodeline": "if (ds->stream_type != GF_STREAM_FILE) {"
    },
    {
        "line": 686,
        "fullcodeline": "if (ctx->do_index || ctx->from_index) {"
    },
    {
        "line": 714,
        "fullcodeline": "if (!ds->rep && (gf_list_find(ctx->current_period->streams, ds)>=0))"
    },
    {
        "line": 721,
        "fullcodeline": "if (!period_switch && (ctx->pswitch==DASHER_PSWITCH_FORCE))"
    },
    {
        "line": 724,
        "fullcodeline": "if (gf_filter_pid_get_property_str(pid, \"period_switch\"))"
    },
    {
        "line": 747,
        "fullcodeline": "if (!ctx->mpd || (gf_list_find(ctx->mpd->periods, ds->last_period)<0))"
    },
    {
        "line": 750,
        "fullcodeline": "if (p && p->value.string && ds->last_period) {"
    },
    {
        "line": 780,
        "fullcodeline": "if (ds->stream_type==GF_STREAM_FILE) {"
    },
    {
        "line": 796,
        "fullcodeline": "if (new_period_request && ds->done && old_clamp_dur) {"
    },
    {
        "line": 822,
        "fullcodeline": "if (gf_list_find(ctx->next_period->streams, ds)>=0)"
    },
    {
        "line": 826,
        "fullcodeline": "if (!ds->period_id)"
    },
    {
        "line": 832,
        "fullcodeline": "if (!period_switch) {"
    },
    {
        "line": 851,
        "fullcodeline": "if (gf_list_count(ds->packet_queue)) {"
    },
    {
        "line": 856,
        "fullcodeline": "return dasher_stream_period_changed(filter, ctx, ds, new_period_request);"
    },
    {
        "line": 16,
        "fullcodeline": "ds = gf_filter_pid_get_udta(pid);"
    },
    {
        "line": 30,
        "fullcodeline": "u32 i, nb_opids = ctx->dual ? 2 : 1;"
    },
    {
        "line": 171,
        "fullcodeline": "ctx->store_seg_states = GF_FALSE;"
    },
    {
        "line": 178,
        "fullcodeline": "GF_SAFEALLOC(ds, GF_DashStream);"
    },
    {
        "line": 180,
        "fullcodeline": "ds->ipid = pid;"
    },
    {
        "line": 181,
        "fullcodeline": "gf_list_add(ctx->pids, ds);"
    },
    {
        "line": 182,
        "fullcodeline": "ds->complementary_streams = gf_list_new();"
    },
    {
        "line": 183,
        "fullcodeline": "period_switch = GF_TRUE;"
    },
    {
        "line": 184,
        "fullcodeline": "gf_filter_pid_set_udta(pid, ds);"
    },
    {
        "line": 185,
        "fullcodeline": "ds->sbound = ctx->sbound;"
    },
    {
        "line": 186,
        "fullcodeline": "ds->startNumber = 1;"
    },
    {
        "line": 265,
        "fullcodeline": "p = gf_filter_pid_get_property_str(pid, \"nofrag\");"
    },
    {
        "line": 276,
        "fullcodeline": "u32 prev_bitrate = ds->bitrate;"
    },
    {
        "line": 284,
        "fullcodeline": "CHECK_PROP(GF_PROP_PID_BITRATE, ds->bitrate, GF_EOS)"
    },
    {
        "line": 296,
        "fullcodeline": "CHECK_PROP(GF_PROP_PID_CODECID, ds->codec_id, GF_NOT_SUPPORTED)"
    },
    {
        "line": 297,
        "fullcodeline": "CHECK_PROP(GF_PROP_PID_TIMESCALE, ds->timescale, GF_NOT_SUPPORTED)"
    },
    {
        "line": 351,
        "fullcodeline": "old_period_switch = period_switch;"
    },
    {
        "line": 354,
        "fullcodeline": "CHECK_PROP(GF_PROP_PID_NB_FRAMES, ds->nb_samples_in_source, GF_EOS)"
    },
    {
        "line": 355,
        "fullcodeline": "CHECK_PROP_FRAC64(GF_PROP_PID_DURATION, ds->duration, GF_EOS)"
    },
    {
        "line": 356,
        "fullcodeline": "CHECK_PROP_STR(GF_PROP_PID_URL, ds->src_url, GF_EOS)"
    },
    {
        "line": 357,
        "fullcodeline": "period_switch = old_period_switch;"
    },
    {
        "line": 360,
        "fullcodeline": "CHECK_PROP(GF_PROP_PID_ID, ds->id, GF_EOS)"
    },
    {
        "line": 361,
        "fullcodeline": "CHECK_PROP(GF_PROP_PID_DEPENDENCY_ID, ds->dep_id, GF_EOS)"
    },
    {
        "line": 363,
        "fullcodeline": "p = gf_filter_pid_get_property(pid, GF_PROP_PID_HAS_SYNC);"
    },
    {
        "line": 364,
        "fullcodeline": "u32 sync_type = DASHER_SYNC_UNKNOWN;"
    },
    {
        "line": 398,
        "fullcodeline": "dc_crc = 0;"
    },
    {
        "line": 399,
        "fullcodeline": "dsi = p = gf_filter_pid_get_property(pid, GF_PROP_PID_DECODER_CONFIG);"
    },
    {
        "line": 403,
        "fullcodeline": "dc_enh_crc = 0;"
    },
    {
        "line": 404,
        "fullcodeline": "p = gf_filter_pid_get_property(pid, GF_PROP_PID_DECODER_CONFIG_ENHANCEMENT);"
    },
    {
        "line": 426,
        "fullcodeline": "ds->dcd_not_ready = 0;"
    },
    {
        "line": 450,
        "fullcodeline": "ds->dsi_crc = dc_crc;"
    },
    {
        "line": 452,
        "fullcodeline": "CHECK_PROP_STR(GF_PROP_PID_TEMPLATE, ds->template, GF_EOS)"
    },
    {
        "line": 453,
        "fullcodeline": "CHECK_PROP_STR(GF_PROP_PID_LANGUAGE, ds->lang, GF_EOS)"
    },
    {
        "line": 454,
        "fullcodeline": "CHECK_PROP_BOOL(GF_PROP_PID_INTERLACED, ds->interlaced, GF_EOS)"
    },
    {
        "line": 455,
        "fullcodeline": "CHECK_PROP_PROP(GF_PROP_PID_AS_COND_DESC, ds->p_as_desc, GF_EOS)"
    },
    {
        "line": 456,
        "fullcodeline": "CHECK_PROP_PROP(GF_PROP_PID_AS_ANY_DESC, ds->p_as_any_desc, GF_EOS)"
    },
    {
        "line": 457,
        "fullcodeline": "CHECK_PROP_PROP(GF_PROP_PID_REP_DESC, ds->p_rep_desc, GF_EOS)"
    },
    {
        "line": 458,
        "fullcodeline": "CHECK_PROP_PROP(GF_PROP_PID_BASE_URL, ds->p_base_url, GF_EOS)"
    },
    {
        "line": 459,
        "fullcodeline": "CHECK_PROP_PROP(GF_PROP_PID_ROLE, ds->p_role, GF_EOS)"
    },
    {
        "line": 460,
        "fullcodeline": "CHECK_PROP_STR(GF_PROP_PID_HLS_PLAYLIST, ds->hls_vp_name, GF_EOS)"
    },
    {
        "line": 461,
        "fullcodeline": "CHECK_PROP_BOOL(GF_PROP_PID_SINGLE_SCALE, ds->sscale, GF_EOS)"
    },
    {
        "line": 495,
        "fullcodeline": "CHECK_PROP(GF_PROP_PID_START_NUMBER, ds->startNumber, GF_EOS)"
    },
    {
        "line": 497,
        "fullcodeline": "ds->no_seg_dur = ctx->no_seg_dur;"
    },
    {
        "line": 498,
        "fullcodeline": "dasher_get_dash_dur(ctx, ds);"
    },
    {
        "line": 500,
        "fullcodeline": "ds->splitable = GF_FALSE;"
    },
    {
        "line": 501,
        "fullcodeline": "ds->is_av = GF_FALSE;"
    },
    {
        "line": 516,
        "fullcodeline": "ds->clamped_dur.num = 0;"
    },
    {
        "line": 517,
        "fullcodeline": "ds->clamped_dur.den = 1;"
    },
    {
        "line": 518,
        "fullcodeline": "p = gf_filter_pid_get_property(pid, GF_PROP_PID_CLAMP_DUR);"
    },
    {
        "line": 616,
        "fullcodeline": "ds->pts_minus_cts = 0;"
    },
    {
        "line": 617,
        "fullcodeline": "p = gf_filter_pid_get_property(ds->ipid, GF_PROP_PID_DELAY);"
    },
    {
        "line": 694,
        "fullcodeline": "char *template = ds->template;"
    },
    {
        "line": 715,
        "fullcodeline": "period_switch = GF_FALSE;"
    },
    {
        "line": 722,
        "fullcodeline": "period_switch = GF_TRUE;"
    },
    {
        "line": 725,
        "fullcodeline": "period_switch = GF_TRUE;"
    },
    {
        "line": 730,
        "fullcodeline": "ds->period_start = p->value.lfrac;"
    },
    {
        "line": 739,
        "fullcodeline": "new_period_request = GF_TRUE;"
    },
    {
        "line": 744,
        "fullcodeline": "if (ds->period_continuity_id) gf_free(ds->period_continuity_id);"
    },
    {
        "line": 748,
        "fullcodeline": "ds->last_period = NULL;"
    },
    {
        "line": 766,
        "fullcodeline": "ds->period_continuity_id = gf_strdup(ds->last_period->ID);"
    },
    {
        "line": 797,
        "fullcodeline": "gf_list_del_item(ctx->next_period->streams, ds);"
    },
    {
        "line": 799,
        "fullcodeline": "gf_filter_pid_set_discard(ds->ipid, GF_FALSE);"
    },
    {
        "line": 811,
        "fullcodeline": "ds->rep_init = GF_FALSE;"
    },
    {
        "line": 812,
        "fullcodeline": "ds->presentation_time_offset = 0;"
    },
    {
        "line": 813,
        "fullcodeline": "ds->rep = NULL;"
    },
    {
        "line": 814,
        "fullcodeline": "ds->set = NULL;"
    },
    {
        "line": 815,
        "fullcodeline": "ds->period = NULL;"
    },
    {
        "line": 816,
        "fullcodeline": "ds->done = 0;"
    },
    {
        "line": 823,
        "fullcodeline": "period_switch = GF_FALSE;"
    },
    {
        "line": 827,
        "fullcodeline": "ds->period_id = gf_strdup(DEFAULT_PERIOD_ID);"
    },
    {
        "line": 852,
        "fullcodeline": "ds->request_period_switch = new_period_request ? 2 : 1;"
    },
    {
        "line": 31,
        "fullcodeline": "for (i=0; i < nb_opids; i++) {"
    },
    {
        "line": 173,
        "fullcodeline": "if (((ctx->state || ctx->purge_segments) && !ctx->sseg) || ctx->do_m3u8) ctx->store_seg_states = GF_TRUE;"
    },
    {
        "line": 179,
        "fullcodeline": "if (!ds) return GF_OUT_OF_MEM;"
    },
    {
        "line": 187,
        "fullcodeline": "if (ctx->sbound!=DASHER_BOUNDS_OUT)"
    },
    {
        "line": 266,
        "fullcodeline": "if (p && p->value.boolean) {"
    },
    {
        "line": 277,
        "fullcodeline": "if (ds->stream_type==GF_STREAM_ENCRYPTED) {"
    },
    {
        "line": 281,
        "fullcodeline": "if (prev_stream_type==ds->stream_type)"
    },
    {
        "line": 285,
        "fullcodeline": "if (!ds->bitrate && prev_bitrate) {"
    },
    {
        "line": 289,
        "fullcodeline": "if (ds->bitrate && period_switch) {"
    },
    {
        "line": 299,
        "fullcodeline": "if (!ds->timescale) {"
    },
    {
        "line": 304,
        "fullcodeline": "if (ds->stream_type==GF_STREAM_VISUAL) {"
    },
    {
        "line": 358,
        "fullcodeline": "if (ds->duration.num<0) ds->duration.num = 0;"
    },
    {
        "line": 366,
        "fullcodeline": "if ((sync_type != DASHER_SYNC_UNKNOWN) && (sync_type != ds->sync_points_type)) {"
    },
    {
        "line": 382,
        "fullcodeline": "if (ctx->pswitch==DASHER_PSWITCH_STSD) {"
    },
    {
        "line": 400,
        "fullcodeline": "if (p && (p->type==GF_PROP_DATA))"
    },
    {
        "line": 405,
        "fullcodeline": "if (p && (p->type==GF_PROP_DATA)) dc_enh_crc = gf_crc_32(p->value.data.ptr, p->value.data.size);"
    },
    {
        "line": 407,
        "fullcodeline": "if (((dc_crc != ds->dsi_crc) && ds->dsi_crc)"
    },
    {
        "line": 427,
        "fullcodeline": "if (!dc_crc && !dc_enh_crc) {"
    },
    {
        "line": 464,
        "fullcodeline": "if (ctx->sigfrag && ctx->tpl && !ctx->template && !ds->template) {"
    },
    {
        "line": 476,
        "fullcodeline": "if (!ds->bitrate) {"
    },
    {
        "line": 492,
        "fullcodeline": "if (!ds->src_url)"
    },
    {
        "line": 519,
        "fullcodeline": "if (p && p->value.lfrac.den) ds->clamped_dur = p->value.lfrac;"
    },
    {
        "line": 570,
        "fullcodeline": "if (ds->stream_type==GF_STREAM_AUDIO) {"
    },
    {
        "line": 618,
        "fullcodeline": "if (p && p->value.longsint) {"
    },
    {
        "line": 678,
        "fullcodeline": "p = gf_filter_pid_get_property(pid, GF_PROP_PID_URL);"
    },
    {
        "line": 682,
        "fullcodeline": "CHECK_PROP_STR(GF_PROP_PID_XLINK, ds->xlink, GF_EOS)"
    },
    {
        "line": 687,
        "fullcodeline": "if (!ds->template && ctx->def_template) {"
    },
    {
        "line": 696,
        "fullcodeline": "if (!ds->template) {"
    },
    {
        "line": 706,
        "fullcodeline": "if (dasher_template_use_source_url(template)) {"
    },
    {
        "line": 729,
        "fullcodeline": "if (ds->period_start.num * p->value.lfrac.den != p->value.lfrac.num * ds->period_start.den) period_switch = GF_TRUE;"
    },
    {
        "line": 733,
        "fullcodeline": "ds->period_start.num = 0;"
    },
    {
        "line": 734,
        "fullcodeline": "ds->period_start.den = 1000;"
    },
    {
        "line": 741,
        "fullcodeline": "period_switch = old_period_switch;"
    },
    {
        "line": 760,
        "fullcodeline": "if (ds->set && (ds->set->id<0)) {"
    },
    {
        "line": 781,
        "fullcodeline": "if (!ds->xlink && !ds->period_start.num && !ds->period_dur.num) {"
    },
    {
        "line": 789,
        "fullcodeline": "ds->xlink = NULL;"
    },
    {
        "line": 790,
        "fullcodeline": "CHECK_PROP_STR(GF_PROP_PID_XLINK, ds->xlink, GF_EOS)"
    },
    {
        "line": 800,
        "fullcodeline": "if (ds->opid && !ctx->gencues) {"
    },
    {
        "line": 19,
        "fullcodeline": "gf_list_del_item(ctx->pids, ds);"
    },
    {
        "line": 20,
        "fullcodeline": "gf_list_del_item(ctx->current_period->streams, ds);"
    },
    {
        "line": 23,
        "fullcodeline": "dasher_reset_stream(filter, ds, GF_TRUE);"
    },
    {
        "line": 24,
        "fullcodeline": "gf_free(ds);"
    },
    {
        "line": 32,
        "fullcodeline": "char *segext=NULL;"
    },
    {
        "line": 33,
        "fullcodeline": "char *force_ext=NULL;"
    },
    {
        "line": 104,
        "fullcodeline": "gf_filter_pid_copy_properties(opid, pid);"
    },
    {
        "line": 105,
        "fullcodeline": "gf_filter_pid_set_property(opid, GF_PROP_PID_DECODER_CONFIG, NULL);"
    },
    {
        "line": 106,
        "fullcodeline": "gf_filter_pid_set_property(opid, GF_PROP_PID_DECODER_CONFIG_ENHANCEMENT, NULL);"
    },
    {
        "line": 107,
        "fullcodeline": "gf_filter_pid_set_property(opid, GF_PROP_PID_CODECID, NULL);"
    },
    {
        "line": 108,
        "fullcodeline": "gf_filter_pid_set_property(opid, GF_PROP_PID_UNFRAMED, NULL);"
    },
    {
        "line": 109,
        "fullcodeline": "gf_filter_pid_set_property(opid, GF_PROP_PID_STREAM_TYPE, &PROP_UINT(GF_STREAM_FILE) );"
    },
    {
        "line": 111,
        "fullcodeline": "gf_filter_pid_set_property(opid, GF_PROP_PID_PREMUX_STREAM_TYPE, &PROP_UINT(GF_STREAM_FILE) );"
    },
    {
        "line": 113,
        "fullcodeline": "dasher_check_outpath(ctx);"
    },
    {
        "line": 115,
        "fullcodeline": "p = gf_filter_pid_caps_query(pid, GF_PROP_PID_FILE_EXT);"
    },
    {
        "line": 143,
        "fullcodeline": "u32 manifest_type = 0;"
    },
    {
        "line": 168,
        "fullcodeline": "gf_filter_pid_set_property(opid, GF_PROP_PID_IS_MANIFEST, &PROP_UINT(manifest_type));"
    },
    {
        "line": 188,
        "fullcodeline": "ds->packet_queue = gf_list_new();"
    },
    {
        "line": 196,
        "fullcodeline": "dasher_send_encode_hints(ctx, ds);"
    },
    {
        "line": 198,
        "fullcodeline": "GF_FEVT_INIT(evt, GF_FEVT_PLAY, ds->ipid);"
    },
    {
        "line": 199,
        "fullcodeline": "evt.play.speed = 1.0;"
    },
    {
        "line": 200,
        "fullcodeline": "gf_filter_pid_send_event(ds->ipid, &evt);"
    },
    {
        "line": 205,
        "fullcodeline": "ds->opid = gf_filter_pid_new(filter);"
    },
    {
        "line": 206,
        "fullcodeline": "gf_filter_pid_copy_properties(ds->opid, pid);"
    },
    {
        "line": 207,
        "fullcodeline": "gf_filter_pid_set_property(ds->opid, GF_PROP_PID_DASH_CUE, &PROP_STRING(\"inband\") );"
    },
    {
        "line": 267,
        "fullcodeline": "p = gf_filter_pid_get_property(pid, GF_PROP_PID_URL);"
    },
    {
        "line": 268,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[IsoMedia] sigfrag requested but file %s is not fragmented\\n\", p->value.string));"
    },
    {
        "line": 278,
        "fullcodeline": "CHECK_PROP(GF_PROP_PID_ORIG_STREAM_TYPE, ds->stream_type, GF_EOS)"
    },
    {
        "line": 279,
        "fullcodeline": "ds->is_encrypted = GF_TRUE;"
    },
    {
        "line": 282,
        "fullcodeline": "period_switch = GF_FALSE;"
    },
    {
        "line": 286,
        "fullcodeline": "ds->bitrate = prev_bitrate;"
    },
    {
        "line": 287,
        "fullcodeline": "period_switch = GF_FALSE;"
    },
    {
        "line": 300,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[Dasher] Input PID %s has no timescale, cannot dash\\n\", gf_filter_pid_get_name(pid) ));"
    },
    {
        "line": 305,
        "fullcodeline": "CHECK_PROP(GF_PROP_PID_WIDTH, ds->width, GF_EOS)"
    },
    {
        "line": 306,
        "fullcodeline": "CHECK_PROP(GF_PROP_PID_HEIGHT, ds->height, GF_EOS)"
    },
    {
        "line": 308,
        "fullcodeline": "CHECK_PROP_FRAC(GF_PROP_PID_SAR, ds->sar, GF_EOS)"
    },
    {
        "line": 310,
        "fullcodeline": "CHECK_PROP_FRAC(GF_PROP_PID_FPS, ds->fps, GF_EOS)"
    },
    {
        "line": 313,
        "fullcodeline": "p = gf_filter_pid_get_property(pid, GF_PROP_PID_TILE_BASE);"
    },
    {
        "line": 365,
        "fullcodeline": "if (p) sync_type = p->value.boolean ? DASHER_SYNC_PRESENT : DASHER_SYNC_NONE;"
    },
    {
        "line": 367,
        "fullcodeline": "period_switch = GF_TRUE;"
    },
    {
        "line": 368,
        "fullcodeline": "ds->sync_points_type = sync_type;"
    },
    {
        "line": 372,
        "fullcodeline": "period_switch = old_period_switch;"
    },
    {
        "line": 375,
        "fullcodeline": "const char *src_args = gf_filter_pid_orig_src_args(pid, GF_TRUE);"
    },
    {
        "line": 383,
        "fullcodeline": "p = gf_filter_pid_get_property(pid, GF_PROP_PID_ISOM_STSD_ALL_TEMPLATES);"
    },
    {
        "line": 401,
        "fullcodeline": "dc_crc = gf_crc_32(p->value.data.ptr, p->value.data.size);"
    },
    {
        "line": 408,
        "fullcodeline": "|| ((dc_enh_crc != ds->dsi_enh_crc) && ds->dsi_enh_crc)"
    },
    {
        "line": 465,
        "fullcodeline": "GF_LOG(GF_LOG_WARNING, GF_LOG_DASH, (\"[Dasher] Warning, manifest generation only mode requested for live-based profile but no template provided, switching to main profile.\\n\"));"
    },
    {
        "line": 466,
        "fullcodeline": "ctx->profile = GF_DASH_PROFILE_MAIN;"
    },
    {
        "line": 467,
        "fullcodeline": "ctx->tpl = GF_FALSE;"
    },
    {
        "line": 468,
        "fullcodeline": "dasher_setup_profile(ctx);"
    },
    {
        "line": 470,
        "fullcodeline": "ctx->sfile = GF_TRUE;"
    },
    {
        "line": 474,
        "fullcodeline": "dasher_update_bitrate(ctx, ds);"
    },
    {
        "line": 477,
        "fullcodeline": "char *tpl = ds->template ? ds->template : ctx->template;"
    },
    {
        "line": 493,
        "fullcodeline": "ds->src_url = gf_strdup(\"file\");"
    },
    {
        "line": 507,
        "fullcodeline": "ds->splitable = ctx->split;"
    },
    {
        "line": 511,
        "fullcodeline": "ds->is_av = GF_TRUE;"
    },
    {
        "line": 571,
        "fullcodeline": "u32 _sr=0, _nb_ch=0;"
    },
    {
        "line": 619,
        "fullcodeline": "ds->pts_minus_cts = p->value.longsint;"
    },
    {
        "line": 624,
        "fullcodeline": "cue_file = ctx->cues;"
    },
    {
        "line": 631,
        "fullcodeline": "ds->cues = NULL;"
    },
    {
        "line": 632,
        "fullcodeline": "ds->nb_cues = 0;"
    },
    {
        "line": 633,
        "fullcodeline": "ds->inband_cues = GF_FALSE;"
    },
    {
        "line": 679,
        "fullcodeline": "if (!p) p = gf_filter_pid_get_property(pid, GF_PROP_PID_FILEPATH);"
    },
    {
        "line": 688,
        "fullcodeline": "p = gf_filter_pid_get_property_str(ds->ipid, \"idx_template\");"
    },
    {
        "line": 703,
        "fullcodeline": "template = ctx->template;"
    },
    {
        "line": 707,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_DASH, (\"[Dasher] Cannot use file-based templates with index mode\\n\"));"
    },
    {
        "line": 764,
        "fullcodeline": "ds->set->id = ds->as_id;"
    },
    {
        "line": 782,
        "fullcodeline": "ds->done = 1;"
    },
    {
        "line": 783,
        "fullcodeline": "GF_LOG(GF_LOG_WARNING, GF_LOG_DASH, (\"[Dasher] null PID specified without any XLINK/start/duration, ignoring\\n\"));"
    },
    {
        "line": 801,
        "fullcodeline": "gf_filter_pid_discard_block(ds->opid);"
    },
    {
        "line": 802,
        "fullcodeline": "gf_filter_pid_remove(ds->opid);"
    },
    {
        "line": 803,
        "fullcodeline": "ds->opid = NULL;"
    },
    {
        "line": 806,
        "fullcodeline": "ctx->is_eos = GF_FALSE;"
    },
    {
        "line": 807,
        "fullcodeline": "gf_filter_pid_discard_block(ctx->opid);"
    },
    {
        "line": 834,
        "fullcodeline": "gf_filter_pid_copy_properties(ds->opid, pid);"
    },
    {
        "line": 845,
        "fullcodeline": "dasher_update_rep(ctx, ds);"
    },
    {
        "line": 35,
        "fullcodeline": "if (i==0) {"
    },
    {
        "line": 100,
        "fullcodeline": "if (!opid)"
    },
    {
        "line": 144,
        "fullcodeline": "if (!strcmp(segext, \"m3u8\")) {"
    },
    {
        "line": 291,
        "fullcodeline": "if ((ds->bitrate <= 120 * prev_bitrate / 100) && (ds->bitrate >= 80 * prev_bitrate / 100)) {"
    },
    {
        "line": 309,
        "fullcodeline": "if (!ds->sar.num) ds->sar.num = ds->sar.den = 1;"
    },
    {
        "line": 478,
        "fullcodeline": "if (tpl && strstr(tpl, \"$Bandwidth$\")) {"
    },
    {
        "line": 489,
        "fullcodeline": "ds->dyn_bitrate = GF_FALSE;"
    },
    {
        "line": 524,
        "fullcodeline": "if (ds->codec_id == GF_CODECID_LHVC || ds->codec_id == GF_CODECID_HEVC_TILES || ds->codec_id == GF_CODECID_HEVC) {"
    },
    {
        "line": 611,
        "fullcodeline": "if (_sr > ds->sr) ds->sr = _sr;"
    },
    {
        "line": 612,
        "fullcodeline": "if (_nb_ch > ds->nb_ch) ds->nb_ch = _nb_ch;"
    },
    {
        "line": 625,
        "fullcodeline": "if (!cue_file || strcmp(cue_file, \"none\") ) {"
    },
    {
        "line": 697,
        "fullcodeline": "if ((ctx->def_template==1) && ctx->do_index) {"
    },
    {
        "line": 732,
        "fullcodeline": "if (ds->period_start.num) period_switch = GF_TRUE;"
    },
    {
        "line": 762,
        "fullcodeline": "if (!ds->as_id && ds->period && ds->period->period)"
    },
    {
        "line": 788,
        "fullcodeline": "if (ds->xlink) gf_free(ds->xlink);"
    },
    {
        "line": 792,
        "fullcodeline": "ctx->use_xlink = GF_TRUE;"
    },
    {
        "line": 836,
        "fullcodeline": "if (ctx->is_route && ctx->do_m3u8)"
    },
    {
        "line": 18,
        "fullcodeline": "if (ds->dyn_bitrate) dasher_update_bitrate(ctx, ds);"
    },
    {
        "line": 22,
        "fullcodeline": "gf_list_del_item(ctx->next_period->streams, ds);"
    },
    {
        "line": 36,
        "fullcodeline": "ctx->opid = gf_filter_pid_new(filter);"
    },
    {
        "line": 37,
        "fullcodeline": "gf_filter_pid_set_name(ctx->opid, \"MANIFEST\");"
    },
    {
        "line": 38,
        "fullcodeline": "opid = ctx->opid;"
    },
    {
        "line": 117,
        "fullcodeline": "gf_filter_pid_set_property(opid, GF_PROP_PID_FILE_EXT, p );"
    },
    {
        "line": 145,
        "fullcodeline": "ctx->do_m3u8 = GF_TRUE;"
    },
    {
        "line": 146,
        "fullcodeline": "gf_filter_pid_set_name(opid, \"manifest_m3u8\" );"
    },
    {
        "line": 147,
        "fullcodeline": "manifest_type = 2;"
    },
    {
        "line": 292,
        "fullcodeline": "period_switch = GF_FALSE;"
    },
    {
        "line": 315,
        "fullcodeline": "ds->srd.x = ds->srd.y = 0;"
    },
    {
        "line": 316,
        "fullcodeline": "ds->srd.z = ds->width;"
    },
    {
        "line": 317,
        "fullcodeline": "ds->srd.w = ds->height;"
    },
    {
        "line": 318,
        "fullcodeline": "ds->tile_base = GF_TRUE;"
    },
    {
        "line": 345,
        "fullcodeline": "} else if (ds->stream_type==GF_STREAM_AUDIO) {"
    },
    {
        "line": 377,
        "fullcodeline": "ds->src_id = gf_crc_32(src_args, (u32) strlen(src_args));"
    },
    {
        "line": 385,
        "fullcodeline": "u32 all_stsd_crc = gf_crc_32(p->value.data.ptr, p->value.data.size);"
    },
    {
        "line": 421,
        "fullcodeline": "period_switch = GF_TRUE;"
    },
    {
        "line": 444,
        "fullcodeline": "ds->dcd_not_ready = gf_sys_clock();"
    },
    {
        "line": 479,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_DASH, (\"[Dasher] No bitrate property assigned to PID %s but template uses $Bandwidth$, cannot initialize !\\n\\tTry specifying bitrate property after your source, e.g. -i source.raw:#Bitrate=VAL\\n\", gf_filter_pid_get_name(ds->ipid)));"
    },
    {
        "line": 480,
        "fullcodeline": "ctx->in_error = GF_TRUE;"
    },
    {
        "line": 525,
        "fullcodeline": "GF_HEVCConfig* hevccfg = gf_odf_hevc_cfg_read(dsi->value.data.ptr, dsi->value.data.size, GF_FALSE);"
    },
    {
        "line": 626,
        "fullcodeline": "p = gf_filter_pid_get_property(pid, GF_PROP_PID_DASH_CUE);"
    },
    {
        "line": 630,
        "fullcodeline": "if (ds->cues) gf_free(ds->cues);"
    },
    {
        "line": 690,
        "fullcodeline": "ds->template = gf_strdup(p->value.string);"
    },
    {
        "line": 691,
        "fullcodeline": "GF_LOG(GF_LOG_INFO, GF_LOG_DASH, (\"[Dasher] Using template from index pass %s\\n\", ds->template));"
    },
    {
        "line": 698,
        "fullcodeline": "gf_free(ctx->template);"
    },
    {
        "line": 699,
        "fullcodeline": "ctx->template = gf_strdup(\"$RepresentationID$-$Number$$Init=init$\");"
    },
    {
        "line": 700,
        "fullcodeline": "ctx->def_template = 2;"
    },
    {
        "line": 701,
        "fullcodeline": "GF_LOG(GF_LOG_INFO, GF_LOG_DASH, (\"[Dasher] No template assigned in index mode, using %s\\n\", ctx->template));"
    },
    {
        "line": 753,
        "fullcodeline": "ds->last_period->ID = p->value.string;"
    },
    {
        "line": 763,
        "fullcodeline": "ds->as_id = gf_list_find(ds->period->period->adaptation_sets, ds->set) + 1;"
    },
    {
        "line": 809,
        "fullcodeline": "gf_filter_pid_discard_block(ctx->opid_alt);"
    },
    {
        "line": 837,
        "fullcodeline": "gf_filter_pid_set_property(ds->opid, GF_PROP_PCK_HLS_REF, &PROP_LONGUINT( ds->hls_ref_id ) );"
    },
    {
        "line": 839,
        "fullcodeline": "gf_filter_pid_set_property(ds->opid, GF_PROP_PID_LLHLS, &PROP_UINT(ctx->llhls) );"
    },
    {
        "line": 842,
        "fullcodeline": "gf_filter_pid_set_property(ds->opid, GF_PROP_PID_DASH_CUE, &PROP_STRING(\"inband\") );"
    },
    {
        "line": 98,
        "fullcodeline": "opid = ctx->opid_alt;"
    },
    {
        "line": 120,
        "fullcodeline": "segext = NULL;"
    },
    {
        "line": 130,
        "fullcodeline": "gf_filter_pid_set_property(opid, GF_PROP_PID_FILE_EXT, &PROP_STRING(segext) );"
    },
    {
        "line": 320,
        "fullcodeline": "p = gf_filter_pid_get_property(pid, GF_PROP_PID_CROP_POS);"
    },
    {
        "line": 346,
        "fullcodeline": "CHECK_PROP(GF_PROP_PID_SAMPLE_RATE, ds->sr, GF_EOS)"
    },
    {
        "line": 347,
        "fullcodeline": "CHECK_PROP(GF_PROP_PID_NUM_CHANNELS, ds->nb_ch, GF_EOS)"
    },
    {
        "line": 348,
        "fullcodeline": "CHECK_PROPL(GF_PROP_PID_CHANNEL_LAYOUT, ds->ch_layout, GF_EOS)"
    },
    {
        "line": 387,
        "fullcodeline": "if (all_stsd_crc==ds->all_stsd_crc) {"
    },
    {
        "line": 394,
        "fullcodeline": "ds->all_stsd_crc = 0;"
    },
    {
        "line": 417,
        "fullcodeline": "if (!ctx->bs_switch)"
    },
    {
        "line": 483,
        "fullcodeline": "GF_LOG(GF_LOG_INFO, GF_LOG_DASH, (\"[Dasher] No bitrate property assigned to PID %s, computing from bitstream\\n\", gf_filter_pid_get_name(ds->ipid)));"
    },
    {
        "line": 484,
        "fullcodeline": "ds->dyn_bitrate = GF_TRUE;"
    },
    {
        "line": 485,
        "fullcodeline": "ds->rate_first_dts_plus_one = 0;"
    },
    {
        "line": 486,
        "fullcodeline": "ds->rate_media_size = 0;"
    },
    {
        "line": 580,
        "fullcodeline": "if ((ctx->profile == GF_DASH_PROFILE_AVC264_LIVE)"
    },
    {
        "line": 635,
        "fullcodeline": "if (!strcmp(cue_file, \"inband\")) {"
    },
    {
        "line": 666,
        "fullcodeline": "if (ctx->from_index==IDXMODE_CHILD) {"
    },
    {
        "line": 755,
        "fullcodeline": "char szPName[50];"
    },
    {
        "line": 756,
        "fullcodeline": "sprintf(szPName, \"P%d\", 1 + gf_list_find(ctx->mpd->periods, ds->last_period));"
    },
    {
        "line": 757,
        "fullcodeline": "ds->last_period->ID = gf_strdup(szPName);"
    },
    {
        "line": 785,
        "fullcodeline": "ctx->use_xlink = GF_TRUE;"
    },
    {
        "line": 40,
        "fullcodeline": "if (!ctx->alt_dst && ctx->out_path) {"
    },
    {
        "line": 126,
        "fullcodeline": "if (!segext) segext = \"mpd\";"
    },
    {
        "line": 132,
        "fullcodeline": "if (!strcmp(segext, \"m3u8\")) {"
    },
    {
        "line": 148,
        "fullcodeline": "} else if (!strcmp(segext, \"ghix\") || !strcmp(segext, \"ghi\")) {"
    },
    {
        "line": 321,
        "fullcodeline": "if (p && ((p->value.vec2i.x != ds->srd.x) || (p->value.vec2i.y != ds->srd.y) ) ) period_switch = GF_TRUE;"
    },
    {
        "line": 388,
        "fullcodeline": "ds->dsi_crc = 0;"
    },
    {
        "line": 389,
        "fullcodeline": "ds->dsi_enh_crc = 0;"
    },
    {
        "line": 418,
        "fullcodeline": "period_switch = GF_TRUE;"
    },
    {
        "line": 530,
        "fullcodeline": "memset(&hevc, 0, sizeof(HEVCState));"
    },
    {
        "line": 531,
        "fullcodeline": "gf_hevc_parse_ps(hevccfg, &hevc, GF_HEVC_NALU_VID_PARAM);"
    },
    {
        "line": 532,
        "fullcodeline": "gf_hevc_parse_ps(hevccfg, &hevc, GF_HEVC_NALU_SEQ_PARAM);"
    },
    {
        "line": 542,
        "fullcodeline": "is_interlaced = hevccfg->interlaced_source_flag ? GF_TRUE : GF_FALSE;"
    },
    {
        "line": 544,
        "fullcodeline": "ds->interlaced = is_interlaced;"
    },
    {
        "line": 546,
        "fullcodeline": "gf_odf_hevc_cfg_del(hevccfg);"
    },
    {
        "line": 549,
        "fullcodeline": "else if (ds->codec_id == GF_CODECID_AVC || ds->codec_id == GF_CODECID_SVC || ds->codec_id == GF_CODECID_MVC) {"
    },
    {
        "line": 582,
        "fullcodeline": "|| (ctx->profile == GF_DASH_PROFILE_DASHIF_LL)"
    },
    {
        "line": 584,
        "fullcodeline": "GF_Err res = dasher_get_audio_info_with_m4a_sbr_ps(ds, dsi, &_sr, &_nb_ch);"
    },
    {
        "line": 597,
        "fullcodeline": "gf_odf_ac3_config_parse(dsi->value.data.ptr, dsi->value.data.size, (ds->codec_id==GF_CODECID_EAC3) ? GF_TRUE : GF_FALSE, &ac3);"
    },
    {
        "line": 599,
        "fullcodeline": "ds->nb_lfe = ac3.streams[0].lfon ? 1 : 0;"
    },
    {
        "line": 600,
        "fullcodeline": "ds->nb_surround = gf_ac3_get_surround_channels(ac3.streams[0].acmod);"
    },
    {
        "line": 601,
        "fullcodeline": "ds->atmos_complexity_type = ac3.is_ec3 ? ac3.complexity_index_type : 0;"
    },
    {
        "line": 602,
        "fullcodeline": "_nb_ch = gf_ac3_get_total_channels(ac3.streams[0].acmod);"
    },
    {
        "line": 636,
        "fullcodeline": "ds->inband_cues = GF_TRUE;"
    },
    {
        "line": 667,
        "fullcodeline": "p = gf_filter_pid_get_property_str(ds->ipid, \"idx_out\");"
    },
    {
        "line": 41,
        "fullcodeline": "char szSRC[100];"
    },
    {
        "line": 42,
        "fullcodeline": "GF_FileIO *gfio = NULL;"
    },
    {
        "line": 43,
        "fullcodeline": "char *mpath = ctx->out_path;"
    },
    {
        "line": 53,
        "fullcodeline": "len = (u32) strlen(mpath);"
    },
    {
        "line": 54,
        "fullcodeline": "char *out_path = gf_malloc(len+10);"
    },
    {
        "line": 56,
        "fullcodeline": "memcpy(out_path, mpath, len);"
    },
    {
        "line": 57,
        "fullcodeline": "out_path[len]=0;"
    },
    {
        "line": 58,
        "fullcodeline": "char *sep = gf_file_ext_start(out_path);"
    },
    {
        "line": 76,
        "fullcodeline": "ctx->alt_dst = gf_filter_connect_destination(filter, out_path, &e);"
    },
    {
        "line": 82,
        "fullcodeline": "gf_free(out_path);"
    },
    {
        "line": 85,
        "fullcodeline": "gf_filter_reset_source(ctx->alt_dst);"
    },
    {
        "line": 86,
        "fullcodeline": "snprintf(szSRC, 100, \"MuxSrc%cdasher_%p\", gf_filter_get_sep(filter, GF_FS_SEP_NAME), ctx->alt_dst);"
    },
    {
        "line": 87,
        "fullcodeline": "gf_filter_set_source(ctx->alt_dst, filter, szSRC);"
    },
    {
        "line": 89,
        "fullcodeline": "ctx->opid_alt = gf_filter_pid_new(filter);"
    },
    {
        "line": 90,
        "fullcodeline": "gf_filter_pid_set_name(ctx->opid_alt, \"MANIFEST_ALT\");"
    },
    {
        "line": 92,
        "fullcodeline": "snprintf(szSRC, 100, \"dasher_%p\", ctx->alt_dst);"
    },
    {
        "line": 93,
        "fullcodeline": "gf_filter_pid_set_property(ctx->opid_alt, GF_PROP_PID_MUX_SRC, &PROP_STRING(szSRC) );"
    },
    {
        "line": 95,
        "fullcodeline": "snprintf(szSRC, 100, \"dasher_%p\", ctx);"
    },
    {
        "line": 96,
        "fullcodeline": "gf_filter_pid_set_property(ctx->opid, GF_PROP_PID_MUX_SRC, &PROP_STRING(szSRC) );"
    },
    {
        "line": 122,
        "fullcodeline": "segext = gf_file_ext_start(ctx->out_path);"
    },
    {
        "line": 129,
        "fullcodeline": "segext = force_ext;"
    },
    {
        "line": 133,
        "fullcodeline": "gf_filter_pid_set_property(opid, GF_PROP_PID_MIME, &PROP_STRING(\"video/mpegurl\"));"
    },
    {
        "line": 149,
        "fullcodeline": "ctx->do_index = !strcmp(segext, \"ghix\") ? 2 : 1;"
    },
    {
        "line": 150,
        "fullcodeline": "ctx->sigfrag = GF_FALSE;"
    },
    {
        "line": 151,
        "fullcodeline": "ctx->align = ctx->sap = GF_TRUE;"
    },
    {
        "line": 152,
        "fullcodeline": "ctx->sseg = ctx->sfile = ctx->tpl = GF_FALSE;"
    },
    {
        "line": 161,
        "fullcodeline": "gf_filter_pid_set_name(opid, \"dash_index\" );"
    },
    {
        "line": 162,
        "fullcodeline": "manifest_type = 3;"
    },
    {
        "line": 325,
        "fullcodeline": "ds->srd.z = ds->width;"
    },
    {
        "line": 326,
        "fullcodeline": "ds->srd.w = ds->height;"
    },
    {
        "line": 391,
        "fullcodeline": "ds->all_stsd_crc = all_stsd_crc;"
    },
    {
        "line": 534,
        "fullcodeline": "if (sps && sps->colour_description_present_flag) {"
    },
    {
        "line": 543,
        "fullcodeline": "if (ds->interlaced != is_interlaced) period_switch = GF_TRUE;"
    },
    {
        "line": 551,
        "fullcodeline": "GF_AVCConfig* avccfg = gf_odf_avc_cfg_read(dsi->value.data.ptr, dsi->value.data.size);"
    },
    {
        "line": 581,
        "fullcodeline": "|| (ctx->profile == GF_DASH_PROFILE_AVC264_ONDEMAND)"
    },
    {
        "line": 638,
        "fullcodeline": "if (!ctx->sigfrag) {"
    },
    {
        "line": 45,
        "fullcodeline": "if (!strncmp(mpath, \"gfio://\", 7)) {"
    },
    {
        "line": 55,
        "fullcodeline": "if (!out_path) return GF_OUT_OF_MEM;"
    },
    {
        "line": 127,
        "fullcodeline": "else segext++;"
    },
    {
        "line": 158,
        "fullcodeline": "if (!ctx->template)"
    },
    {
        "line": 164,
        "fullcodeline": "ctx->do_mpd = GF_TRUE;"
    },
    {
        "line": 165,
        "fullcodeline": "gf_filter_pid_set_name(opid, \"manifest_mpd\" );"
    },
    {
        "line": 166,
        "fullcodeline": "manifest_type = 1;"
    },
    {
        "line": 328,
        "fullcodeline": "p = gf_filter_pid_get_property(pid, GF_PROP_PID_SRD);"
    },
    {
        "line": 535,
        "fullcodeline": "DasherHDRType old_hdr_type = ds->hdr_type;"
    },
    {
        "line": 587,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_DASH, (\"[Dasher] Could not get AAC info, %s\\n\", gf_error_to_string(res)));"
    },
    {
        "line": 604,
        "fullcodeline": "_nb_ch += gf_eac3_get_chan_loc_count(ac3.streams[0].chan_loc);"
    },
    {
        "line": 606,
        "fullcodeline": "if (ds->nb_lfe) _nb_ch++;"
    },
    {
        "line": 639,
        "fullcodeline": "p = gf_filter_pid_get_property(pid, GF_PROP_PID_DASH_FWD);"
    },
    {
        "line": 643,
        "fullcodeline": "} else if (!strcmp(cue_file, \"idx_all\")) {"
    },
    {
        "line": 670,
        "fullcodeline": "ds->hls_vp_name = gf_strdup(p->value.string);"
    },
    {
        "line": 46,
        "fullcodeline": "gfio = gf_fileio_from_url(mpath);"
    },
    {
        "line": 49,
        "fullcodeline": "mpath = (char *) gf_file_basename(gf_fileio_resource_url(gfio));"
    },
    {
        "line": 59,
        "fullcodeline": "if (sep) sep[0] = 0;"
    },
    {
        "line": 61,
        "fullcodeline": "strcat(out_path, \".mpd\");"
    },
    {
        "line": 62,
        "fullcodeline": "force_ext = \"mpd\";"
    },
    {
        "line": 70,
        "fullcodeline": "const char *rel = gf_fileio_factory(gfio, out_path);"
    },
    {
        "line": 71,
        "fullcodeline": "gf_free(out_path);"
    },
    {
        "line": 72,
        "fullcodeline": "out_path = gf_strdup(rel);"
    },
    {
        "line": 78,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_DASH, (\"[Dasher] Couldn't create secondary manifest output %s: %s\\n\", out_path, gf_error_to_string(e) ));"
    },
    {
        "line": 79,
        "fullcodeline": "gf_free(out_path);"
    },
    {
        "line": 134,
        "fullcodeline": "} else if (!strcmp(segext, \"ghi\")) {"
    },
    {
        "line": 154,
        "fullcodeline": "gf_free(ctx->state);"
    },
    {
        "line": 155,
        "fullcodeline": "ctx->state = NULL;"
    },
    {
        "line": 156,
        "fullcodeline": "GF_LOG(GF_LOG_WARNING, GF_LOG_DASH, (\"[Dasher] Index generation mode, disabling state\\n\" ));"
    },
    {
        "line": 159,
        "fullcodeline": "ctx->template = gf_strdup(\"$RepresentationID$-$Number$$Init=init$\");"
    },
    {
        "line": 329,
        "fullcodeline": "if (p && ("
    },
    {
        "line": 536,
        "fullcodeline": "if (sps->colour_primaries == 9 && sps->matrix_coeffs == 9) {"
    },
    {
        "line": 540,
        "fullcodeline": "if (old_hdr_type != ds->hdr_type) period_switch = GF_TRUE;"
    },
    {
        "line": 553,
        "fullcodeline": "GF_NALUFFParam *sl = (GF_NALUFFParam *)gf_list_get(avccfg->sequenceParameterSets, 0);"
    },
    {
        "line": 564,
        "fullcodeline": "gf_odf_avc_cfg_del(avccfg);"
    },
    {
        "line": 590,
        "fullcodeline": "dasher_get_audio_info_with_m4a_sbr_ps(ds, dsi, NULL, &_nb_ch);"
    },
    {
        "line": 640,
        "fullcodeline": "if (p && p->value.uint)"
    },
    {
        "line": 644,
        "fullcodeline": "ds->inband_cues = GF_TRUE;"
    },
    {
        "line": 645,
        "fullcodeline": "ctx->from_index = IDXMODE_ALL;"
    },
    {
        "line": 47,
        "fullcodeline": "if (!gfio) return GF_BAD_PARAM;"
    },
    {
        "line": 50,
        "fullcodeline": "if (!mpath) return GF_OUT_OF_MEM;"
    },
    {
        "line": 64,
        "fullcodeline": "ctx->opid_alt_m3u8 = GF_TRUE;"
    },
    {
        "line": 65,
        "fullcodeline": "ctx->do_m3u8 = GF_TRUE;"
    },
    {
        "line": 66,
        "fullcodeline": "strcat(out_path, \".m3u8\");"
    },
    {
        "line": 67,
        "fullcodeline": "force_ext = \"m3u8\";"
    },
    {
        "line": 73,
        "fullcodeline": "if (!out_path) return GF_OUT_OF_MEM;"
    },
    {
        "line": 124,
        "fullcodeline": "segext = gf_file_ext_start(ctx->mname);"
    },
    {
        "line": 135,
        "fullcodeline": "gf_filter_pid_set_property(opid, GF_PROP_PID_MIME, &PROP_STRING(\"application/x-gpac-ghi\"));"
    },
    {
        "line": 330,
        "fullcodeline": "(p->value.vec4i.x != ds->srd.x)"
    },
    {
        "line": 335,
        "fullcodeline": "period_switch = GF_TRUE;"
    },
    {
        "line": 641,
        "fullcodeline": "ctx->forward_mode = p->value.uint;"
    },
    {
        "line": 669,
        "fullcodeline": "if (ds->hls_vp_name) gf_free(ds->hls_vp_name);"
    },
    {
        "line": 537,
        "fullcodeline": "if (sps->transfer_characteristic == 14) ds->hdr_type = DASHER_HDR_HLG; //TODO: parse alternative_transfer_characteristics SEI"
    },
    {
        "line": 538,
        "fullcodeline": "if (sps->transfer_characteristic == 16) ds->hdr_type = DASHER_HDR_PQ10;"
    },
    {
        "line": 556,
        "fullcodeline": "memset(&avc, 0, sizeof(AVCState));"
    },
    {
        "line": 557,
        "fullcodeline": "idx = gf_avc_read_sps(sl->data, sl->size, &avc, 0, NULL);"
    },
    {
        "line": 646,
        "fullcodeline": "} else if (!strcmp(cue_file, \"idx_man\")) {"
    },
    {
        "line": 136,
        "fullcodeline": "} else if (!strcmp(segext, \"ghix\")) {"
    },
    {
        "line": 558,
        "fullcodeline": "if (idx>=0) {"
    },
    {
        "line": 647,
        "fullcodeline": "ds->inband_cues = GF_TRUE;"
    },
    {
        "line": 648,
        "fullcodeline": "ctx->from_index = IDXMODE_MANIFEST;"
    },
    {
        "line": 137,
        "fullcodeline": "gf_filter_pid_set_property(opid, GF_PROP_PID_MIME, &PROP_STRING(\"application/x-gpac-ghix\"));"
    },
    {
        "line": 331,
        "fullcodeline": "|| (p->value.vec4i.y != ds->srd.y)"
    },
    {
        "line": 559,
        "fullcodeline": "Bool is_interlaced = avc.sps[idx].frame_mbs_only_flag ? GF_FALSE : GF_TRUE;"
    },
    {
        "line": 561,
        "fullcodeline": "ds->interlaced = is_interlaced;"
    },
    {
        "line": 139,
        "fullcodeline": "gf_filter_pid_set_property(opid, GF_PROP_PID_MIME, &PROP_STRING(\"application/dash+xml\"));"
    },
    {
        "line": 560,
        "fullcodeline": "if (ds->interlaced != is_interlaced) period_switch = GF_TRUE;"
    },
    {
        "line": 649,
        "fullcodeline": "} else if (!strcmp(cue_file, \"idx_init\")) {"
    },
    {
        "line": 650,
        "fullcodeline": "ds->inband_cues = GF_TRUE;"
    },
    {
        "line": 651,
        "fullcodeline": "ctx->from_index = IDXMODE_INIT;"
    },
    {
        "line": 652,
        "fullcodeline": "} else if (!strcmp(cue_file, \"idx_child\")) {"
    },
    {
        "line": 653,
        "fullcodeline": "ds->inband_cues = GF_TRUE;"
    },
    {
        "line": 654,
        "fullcodeline": "ctx->from_index = IDXMODE_CHILD;"
    },
    {
        "line": 655,
        "fullcodeline": "} else if (!strcmp(cue_file, \"idx_seg\")) {"
    },
    {
        "line": 656,
        "fullcodeline": "ds->inband_cues = GF_TRUE;"
    },
    {
        "line": 657,
        "fullcodeline": "ctx->from_index = IDXMODE_SEG;"
    },
    {
        "line": 658,
        "fullcodeline": "} else if (strcmp(cue_file, \"none\")) {"
    },
    {
        "line": 659,
        "fullcodeline": "e = gf_mpd_load_cues(cue_file, ds->id, &ds->cues_timescale, &ds->cues_use_edits, &ds->cues_ts_offset, &ds->cues, &ds->nb_cues);"
    },
    {
        "line": 661,
        "fullcodeline": "if (!ds->cues_timescale)"
    },
    {
        "line": 662,
        "fullcodeline": "ds->cues_timescale = ds->timescale;"
    }
]