[
    {
        "line": 31,
        "fullcodeline": "status=SetImageExtent(image,image->columns,image->rows,exception);"
    },
    {
        "line": 37,
        "fullcodeline": "status=DiscardBlobBytes(image,header->header_size-48);"
    },
    {
        "line": 43,
        "fullcodeline": "bits_per_line=image->columns*bits_per_pixel;"
    },
    {
        "line": 44,
        "fullcodeline": "bytes_per_line=bits_per_line/8 + ((bits_per_line%8==0) ? 0 : 1);"
    },
    {
        "line": 45,
        "fullcodeline": "row_data=(unsigned char*) AcquireQuantumMemory(1,bytes_per_line);"
    },
    {
        "line": 32,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 38,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 46,
        "fullcodeline": "if (row_data == (unsigned char *) NULL)"
    },
    {
        "line": 49,
        "fullcodeline": "if (clut_depth != 0)"
    },
    {
        "line": 47,
        "fullcodeline": "ThrowBinaryException(ResourceLimitError,\"MemoryAllocationFailed\","
    },
    {
        "line": 51,
        "fullcodeline": "image->colors=header->clut_color_count;"
    },
    {
        "line": 141,
        "fullcodeline": "SyncImage(image,exception);"
    },
    {
        "line": 274,
        "fullcodeline": "row_data=(unsigned char *) RelinquishMagickMemory(row_data);"
    },
    {
        "line": 275,
        "fullcodeline": "if ((status != MagickFalse) && (clut_depth != 0))"
    },
    {
        "line": 289,
        "fullcodeline": "clut_data=(unsigned char *) AcquireQuantumMemory(1,header->clut_size);"
    },
    {
        "line": 293,
        "fullcodeline": "count=ReadBlob(image,header->clut_size,clut_data);"
    },
    {
        "line": 303,
        "fullcodeline": "p=clut_data;"
    },
    {
        "line": 52,
        "fullcodeline": "if (AcquireImageColormap(image,image->colors,exception) == MagickFalse)"
    },
    {
        "line": 290,
        "fullcodeline": "if (clut_data == (unsigned char *) NULL)"
    },
    {
        "line": 54,
        "fullcodeline": "row_data=(unsigned char *) RelinquishMagickMemory(row_data);"
    },
    {
        "line": 55,
        "fullcodeline": "ThrowBinaryException(ResourceLimitError,\"MemoryAllocationFailed\","
    },
    {
        "line": 291,
        "fullcodeline": "ThrowBinaryException(ResourceLimitError,\"MemoryAllocationFailed\","
    },
    {
        "line": 294,
        "fullcodeline": "if (count != (ssize_t) (header->clut_size))"
    },
    {
        "line": 296,
        "fullcodeline": "clut_data=(unsigned char *) RelinquishMagickMemory(clut_data);"
    },
    {
        "line": 297,
        "fullcodeline": "ThrowBinaryException(CorruptImageError,\"InsufficientImageDataInFile\","
    },
    {
        "line": 354,
        "fullcodeline": "clut_data=(unsigned char *) RelinquishMagickMemory(clut_data);"
    },
    {
        "line": 359,
        "fullcodeline": "csm=CSM1;"
    },
    {
        "line": 362,
        "fullcodeline": "csm=CSM2;"
    },
    {
        "line": 365,
        "fullcodeline": "ThrowBinaryException(CorruptImageError,\"ImproperImageHeader\","
    },
    {
        "line": 374,
        "fullcodeline": "oldColormap=(PixelInfo *) AcquireQuantumMemory((size_t)(image->colors)+"
    },
    {
        "line": 379,
        "fullcodeline": "deshufflePalette(image,oldColormap);"
    },
    {
        "line": 136,
        "fullcodeline": "row_data=(unsigned char *) RelinquishMagickMemory(row_data);"
    },
    {
        "line": 137,
        "fullcodeline": "ThrowBinaryException(CorruptImageError,\"ImproperImageHeader\","
    },
    {
        "line": 376,
        "fullcodeline": "if (oldColormap == (PixelInfo *) NULL)"
    },
    {
        "line": 62,
        "fullcodeline": "for (y=0; y<(ssize_t) image->rows; y++)"
    },
    {
        "line": 103,
        "fullcodeline": "for (y=0;y<(ssize_t) image->rows; y++)"
    },
    {
        "line": 268,
        "fullcodeline": "row_data=(unsigned char *) RelinquishMagickMemory(row_data);"
    },
    {
        "line": 269,
        "fullcodeline": "ThrowBinaryException(CorruptImageError,\"ImproperImageHeader\","
    },
    {
        "line": 308,
        "fullcodeline": "for (i=0; i < (ssize_t) image->colors; i++)"
    },
    {
        "line": 323,
        "fullcodeline": "for (i=0; i < (ssize_t) image->colors; i++)"
    },
    {
        "line": 338,
        "fullcodeline": "for (i=0; i < (ssize_t) image->colors; i++)"
    },
    {
        "line": 64,
        "fullcodeline": "q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 67,
        "fullcodeline": "count=ReadBlob(image,bytes_per_line,row_data);"
    },
    {
        "line": 74,
        "fullcodeline": "p=row_data;"
    },
    {
        "line": 105,
        "fullcodeline": "q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 108,
        "fullcodeline": "count=ReadBlob(image,bytes_per_line,row_data);"
    },
    {
        "line": 115,
        "fullcodeline": "p=row_data;"
    },
    {
        "line": 149,
        "fullcodeline": "for (y=0; y<(ssize_t) image->rows; y++)"
    },
    {
        "line": 188,
        "fullcodeline": "for (y = 0; y<(ssize_t) image->rows; y++)"
    },
    {
        "line": 227,
        "fullcodeline": "for (y = 0; y<(ssize_t) image->rows; y++)"
    },
    {
        "line": 310,
        "fullcodeline": "word = ((unsigned short)* p   )<<0*8 |"
    },
    {
        "line": 317,
        "fullcodeline": "p+=2;"
    },
    {
        "line": 325,
        "fullcodeline": "word = ((unsigned int)* p   )<<0*8 |"
    },
    {
        "line": 332,
        "fullcodeline": "p+=3;"
    },
    {
        "line": 340,
        "fullcodeline": "word = ((unsigned int)* p   )<<0*8 |"
    },
    {
        "line": 349,
        "fullcodeline": "p+=4;"
    },
    {
        "line": 65,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 75,
        "fullcodeline": "for (x=0; x < ((ssize_t) image->columns-1); x+=2)"
    },
    {
        "line": 89,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 91,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 106,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 116,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 122,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 124,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 151,
        "fullcodeline": "q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 154,
        "fullcodeline": "count=ReadBlob(image,bytes_per_line,row_data);"
    },
    {
        "line": 161,
        "fullcodeline": "p=row_data;"
    },
    {
        "line": 190,
        "fullcodeline": "q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 193,
        "fullcodeline": "count=ReadBlob(image,bytes_per_line,row_data);"
    },
    {
        "line": 200,
        "fullcodeline": "p=row_data;"
    },
    {
        "line": 229,
        "fullcodeline": "q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 232,
        "fullcodeline": "count=ReadBlob(image,bytes_per_line,row_data);"
    },
    {
        "line": 239,
        "fullcodeline": "p=row_data;"
    },
    {
        "line": 313,
        "fullcodeline": "image->colormap[i].red=GetChannelValue(word,0,RGBA16);"
    },
    {
        "line": 314,
        "fullcodeline": "image->colormap[i].green=GetChannelValue(word,1,RGBA16);"
    },
    {
        "line": 315,
        "fullcodeline": "image->colormap[i].blue=GetChannelValue(word,2,RGBA16);"
    },
    {
        "line": 316,
        "fullcodeline": "image->colormap[i].alpha=GetAlpha(word,RGBA16);"
    },
    {
        "line": 329,
        "fullcodeline": "image->colormap[i].red=GetChannelValue(word,0,RGB24);"
    },
    {
        "line": 330,
        "fullcodeline": "image->colormap[i].green=GetChannelValue(word,1,RGB24);"
    },
    {
        "line": 331,
        "fullcodeline": "image->colormap[i].blue=GetChannelValue(word,2,RGB24);"
    },
    {
        "line": 345,
        "fullcodeline": "image->colormap[i].red=GetChannelValue(word,0,RGBA32);"
    },
    {
        "line": 346,
        "fullcodeline": "image->colormap[i].green=GetChannelValue(word,1,RGBA32);"
    },
    {
        "line": 347,
        "fullcodeline": "image->colormap[i].blue=GetChannelValue(word,2,RGBA32);"
    },
    {
        "line": 348,
        "fullcodeline": "image->colormap[i].alpha=GetAlpha(word,RGBA32);"
    },
    {
        "line": 70,
        "fullcodeline": "row_data=(unsigned char *) RelinquishMagickMemory(row_data);"
    },
    {
        "line": 71,
        "fullcodeline": "ThrowBinaryException(CorruptImageError,"
    },
    {
        "line": 77,
        "fullcodeline": "SetPixelIndex(image,(*p >> 0) & 0x0F,q);"
    },
    {
        "line": 78,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 79,
        "fullcodeline": "SetPixelIndex(image,(*p >> 4) & 0x0F,q);"
    },
    {
        "line": 80,
        "fullcodeline": "p++;"
    },
    {
        "line": 81,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 83,
        "fullcodeline": "if ((image->columns % 2) != 0)"
    },
    {
        "line": 85,
        "fullcodeline": "SetPixelIndex(image,(*p >> 4) & 0x0F,q);"
    },
    {
        "line": 93,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,"
    },
    {
        "line": 111,
        "fullcodeline": "row_data=(unsigned char *) RelinquishMagickMemory(row_data);"
    },
    {
        "line": 112,
        "fullcodeline": "ThrowBinaryException(CorruptImageError,"
    },
    {
        "line": 118,
        "fullcodeline": "SetPixelIndex(image,*p,q);"
    },
    {
        "line": 120,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 126,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,"
    },
    {
        "line": 152,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 162,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 174,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 176,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 191,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 201,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 213,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 215,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 230,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 240,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 254,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 256,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 311,
        "fullcodeline": "((unsigned short)*(p+1))<<1*8;"
    },
    {
        "line": 327,
        "fullcodeline": "((unsigned int)*(p+2))<<2*8;"
    },
    {
        "line": 343,
        "fullcodeline": "((unsigned int)*(p+3))<<3*8;"
    },
    {
        "line": 87,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 95,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 128,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 157,
        "fullcodeline": "row_data=(unsigned char *) RelinquishMagickMemory(row_data);"
    },
    {
        "line": 158,
        "fullcodeline": "ThrowBinaryException(CorruptImageError,"
    },
    {
        "line": 164,
        "fullcodeline": "word = ((unsigned int)* p   )<<0*8 |"
    },
    {
        "line": 167,
        "fullcodeline": "SetPixelRed(image,GetChannelValue(word,0,RGBA16),q);"
    },
    {
        "line": 168,
        "fullcodeline": "SetPixelGreen(image,GetChannelValue(word,1,RGBA16),q);"
    },
    {
        "line": 169,
        "fullcodeline": "SetPixelBlue(image,GetChannelValue(word,2,RGBA16),q);"
    },
    {
        "line": 170,
        "fullcodeline": "SetPixelAlpha(image,GetAlpha(word,RGBA16),q);"
    },
    {
        "line": 171,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 172,
        "fullcodeline": "p+=sizeof(unsigned short);"
    },
    {
        "line": 178,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,"
    },
    {
        "line": 196,
        "fullcodeline": "row_data=(unsigned char *) RelinquishMagickMemory(row_data);"
    },
    {
        "line": 197,
        "fullcodeline": "ThrowBinaryException(CorruptImageError,"
    },
    {
        "line": 203,
        "fullcodeline": "word = (unsigned int)(* p   )<<0*8 |"
    },
    {
        "line": 207,
        "fullcodeline": "SetPixelRed(image,GetChannelValue(word,0,RGB24),q);"
    },
    {
        "line": 208,
        "fullcodeline": "SetPixelGreen(image,GetChannelValue(word,1,RGB24),q);"
    },
    {
        "line": 209,
        "fullcodeline": "SetPixelBlue(image,GetChannelValue(word,2,RGB24),q);"
    },
    {
        "line": 210,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 211,
        "fullcodeline": "p+=3;"
    },
    {
        "line": 217,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,"
    },
    {
        "line": 235,
        "fullcodeline": "row_data=(unsigned char *) RelinquishMagickMemory(row_data);"
    },
    {
        "line": 236,
        "fullcodeline": "ThrowBinaryException(CorruptImageError,"
    },
    {
        "line": 242,
        "fullcodeline": "word = ((unsigned int)* p   )<<0*8 |"
    },
    {
        "line": 247,
        "fullcodeline": "SetPixelRed(image,GetChannelValue(word,0,RGBA32),q);"
    },
    {
        "line": 248,
        "fullcodeline": "SetPixelGreen(image,GetChannelValue(word,1,RGBA32),q);"
    },
    {
        "line": 249,
        "fullcodeline": "SetPixelBlue(image,GetChannelValue(word,2,RGBA32),q);"
    },
    {
        "line": 250,
        "fullcodeline": "SetPixelAlpha(image,GetAlpha(word,RGBA32),q);"
    },
    {
        "line": 251,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 252,
        "fullcodeline": "p+=4;"
    },
    {
        "line": 258,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,"
    },
    {
        "line": 326,
        "fullcodeline": "((unsigned int)*(p+1))<<1*8 |"
    },
    {
        "line": 342,
        "fullcodeline": "((unsigned int)*(p+2))<<2*8 |"
    },
    {
        "line": 180,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 219,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 260,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 341,
        "fullcodeline": "((unsigned int)*(p+1))<<1*8 |"
    },
    {
        "line": 165,
        "fullcodeline": "((unsigned int)*(p+1))<<1*8;"
    },
    {
        "line": 205,
        "fullcodeline": "(unsigned int)(*(p+2))<<2*8;"
    },
    {
        "line": 245,
        "fullcodeline": "((unsigned int)*(p+3))<<3*8;"
    },
    {
        "line": 204,
        "fullcodeline": "(unsigned int)(*(p+1))<<1*8 |"
    },
    {
        "line": 244,
        "fullcodeline": "((unsigned int)*(p+2))<<2*8 |"
    },
    {
        "line": 243,
        "fullcodeline": "((unsigned int)*(p+1))<<1*8 |"
    }
]