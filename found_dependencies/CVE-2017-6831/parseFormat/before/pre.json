[
    {
        "line": 3,
        "fullcodeline": "Track *track = getTrack();"
    },
    {
        "line": 6,
        "fullcodeline": "readU16(&formatTag);"
    },
    {
        "line": 8,
        "fullcodeline": "readU16(&channelCount);"
    },
    {
        "line": 10,
        "fullcodeline": "readU32(&sampleRate);"
    },
    {
        "line": 12,
        "fullcodeline": "readU32(&averageBytesPerSecond);"
    },
    {
        "line": 14,
        "fullcodeline": "readU16(&blockAlign);"
    },
    {
        "line": 22,
        "fullcodeline": "track->f.channelCount = channelCount;"
    },
    {
        "line": 23,
        "fullcodeline": "track->f.sampleRate = sampleRate;"
    },
    {
        "line": 24,
        "fullcodeline": "track->f.byteOrder = AF_BYTEORDER_LITTLEENDIAN;"
    },
    {
        "line": 27,
        "fullcodeline": "track->f.compressionType = AF_COMPRESSION_NONE;"
    },
    {
        "line": 28,
        "fullcodeline": "track->f.framesPerPacket = 1;"
    },
    {
        "line": 16,
        "fullcodeline": "if (!channelCount)"
    },
    {
        "line": 265,
        "fullcodeline": "if (track->f.isUncompressed())"
    },
    {
        "line": 18,
        "fullcodeline": "_af_error(AF_BAD_CHANNELS, \"invalid file with 0 channels\");"
    },
    {
        "line": 56,
        "fullcodeline": "track->f.sampleWidth = 16;"
    },
    {
        "line": 57,
        "fullcodeline": "track->f.sampleFormat = AF_SAMPFMT_TWOSCOMP;"
    },
    {
        "line": 58,
        "fullcodeline": "track->f.byteOrder = _AF_BYTEORDER_NATIVE;"
    },
    {
        "line": 59,
        "fullcodeline": "track->f.compressionType = AF_COMPRESSION_G711_ULAW;"
    },
    {
        "line": 60,
        "fullcodeline": "track->f.bytesPerPacket = track->f.channelCount;"
    },
    {
        "line": 65,
        "fullcodeline": "track->f.sampleWidth = 16;"
    },
    {
        "line": 66,
        "fullcodeline": "track->f.sampleFormat = AF_SAMPFMT_TWOSCOMP;"
    },
    {
        "line": 67,
        "fullcodeline": "track->f.byteOrder = _AF_BYTEORDER_NATIVE;"
    },
    {
        "line": 68,
        "fullcodeline": "track->f.compressionType = AF_COMPRESSION_G711_ALAW;"
    },
    {
        "line": 69,
        "fullcodeline": "track->f.bytesPerPacket = track->f.channelCount;"
    },
    {
        "line": 266,
        "fullcodeline": "track->f.computeBytesPerPacketPCM();"
    },
    {
        "line": 35,
        "fullcodeline": "readU16(&bitsPerSample);"
    },
    {
        "line": 37,
        "fullcodeline": "track->f.sampleWidth = bitsPerSample;"
    },
    {
        "line": 75,
        "fullcodeline": "readU16(&bitsPerSample);"
    },
    {
        "line": 105,
        "fullcodeline": "readU16(&samplesPerBlock);"
    },
    {
        "line": 106,
        "fullcodeline": "readU16(&numCoefficients);"
    },
    {
        "line": 111,
        "fullcodeline": "m_msadpcmNumCoefficients = numCoefficients;"
    },
    {
        "line": 119,
        "fullcodeline": "track->f.sampleWidth = 16;"
    },
    {
        "line": 120,
        "fullcodeline": "track->f.sampleFormat = AF_SAMPFMT_TWOSCOMP;"
    },
    {
        "line": 121,
        "fullcodeline": "track->f.compressionType = AF_COMPRESSION_MS_ADPCM;"
    },
    {
        "line": 122,
        "fullcodeline": "track->f.byteOrder = _AF_BYTEORDER_NATIVE;"
    },
    {
        "line": 124,
        "fullcodeline": "track->f.framesPerPacket = samplesPerBlock;"
    },
    {
        "line": 125,
        "fullcodeline": "track->f.bytesPerPacket = blockAlign;"
    },
    {
        "line": 128,
        "fullcodeline": "AUpvlist pv = AUpvnew(2);"
    },
    {
        "line": 129,
        "fullcodeline": "AUpvsetparam(pv, 0, _AF_MS_ADPCM_NUM_COEFFICIENTS);"
    },
    {
        "line": 130,
        "fullcodeline": "AUpvsetvaltype(pv, 0, AU_PVTYPE_LONG);"
    },
    {
        "line": 131,
        "fullcodeline": "long l = m_msadpcmNumCoefficients;"
    },
    {
        "line": 132,
        "fullcodeline": "AUpvsetval(pv, 0, &l);"
    },
    {
        "line": 134,
        "fullcodeline": "AUpvsetparam(pv, 1, _AF_MS_ADPCM_COEFFICIENTS);"
    },
    {
        "line": 135,
        "fullcodeline": "AUpvsetvaltype(pv, 1, AU_PVTYPE_PTR);"
    },
    {
        "line": 136,
        "fullcodeline": "void *v = m_msadpcmCoefficients;"
    },
    {
        "line": 137,
        "fullcodeline": "AUpvsetval(pv, 1, &v);"
    },
    {
        "line": 139,
        "fullcodeline": "track->f.compressionParams = pv;"
    },
    {
        "line": 147,
        "fullcodeline": "readU16(&bitsPerSample);"
    },
    {
        "line": 149,
        "fullcodeline": "readU16(&samplesPerBlock);"
    },
    {
        "line": 157,
        "fullcodeline": "int bytesPerBlock = (samplesPerBlock + 14) / 8 * 4 * channelCount;"
    },
    {
        "line": 164,
        "fullcodeline": "track->f.sampleWidth = 16;"
    },
    {
        "line": 165,
        "fullcodeline": "track->f.sampleFormat = AF_SAMPFMT_TWOSCOMP;"
    },
    {
        "line": 166,
        "fullcodeline": "track->f.compressionType = AF_COMPRESSION_IMA;"
    },
    {
        "line": 167,
        "fullcodeline": "track->f.byteOrder = _AF_BYTEORDER_NATIVE;"
    },
    {
        "line": 171,
        "fullcodeline": "track->f.framesPerPacket = samplesPerBlock;"
    },
    {
        "line": 172,
        "fullcodeline": "track->f.bytesPerPacket = blockAlign;"
    },
    {
        "line": 179,
        "fullcodeline": "readU16(&bitsPerSample);"
    },
    {
        "line": 183,
        "fullcodeline": "readU16(&reserved);"
    },
    {
        "line": 187,
        "fullcodeline": "readUUID(&subformat);"
    },
    {
        "line": 260,
        "fullcodeline": "_af_error(AF_BAD_NOT_IMPLEMENTED, \"WAVE file data format 0x%x not currently supported != 0xfffe ? %d, != EXTENSIBLE? %d\", formatTag, formatTag != 0xfffe, formatTag != WAVE_FORMAT_EXTENSIBLE);"
    },
    {
        "line": 109,
        "fullcodeline": "assert(numCoefficients >= 7 && numCoefficients <= 255);"
    },
    {
        "line": 113,
        "fullcodeline": "for (int i=0; i<m_msadpcmNumCoefficients; i++)"
    },
    {
        "line": 188,
        "fullcodeline": "if (subformat == _af_wave_guid_pcm)"
    },
    {
        "line": 39,
        "fullcodeline": "if (bitsPerSample == 0 || bitsPerSample > 32)"
    },
    {
        "line": 48,
        "fullcodeline": "track->f.sampleFormat = AF_SAMPFMT_UNSIGNED;"
    },
    {
        "line": 79,
        "fullcodeline": "track->f.sampleWidth = 64;"
    },
    {
        "line": 80,
        "fullcodeline": "track->f.sampleFormat = AF_SAMPFMT_DOUBLE;"
    },
    {
        "line": 95,
        "fullcodeline": "if (track->f.channelCount != 1 &&"
    },
    {
        "line": 96,
        "fullcodeline": "track->f.channelCount != 2)"
    },
    {
        "line": 158,
        "fullcodeline": "if (bytesPerBlock > blockAlign || (samplesPerBlock % 8) != 1)"
    },
    {
        "line": 160,
        "fullcodeline": "_af_error(AF_BAD_CODEC_CONFIG,"
    },
    {
        "line": 190,
        "fullcodeline": "track->f.sampleWidth = bitsPerSample;"
    },
    {
        "line": 50,
        "fullcodeline": "track->f.sampleFormat = AF_SAMPFMT_TWOSCOMP;"
    },
    {
        "line": 84,
        "fullcodeline": "track->f.sampleWidth = 32;"
    },
    {
        "line": 85,
        "fullcodeline": "track->f.sampleFormat = AF_SAMPFMT_FLOAT;"
    },
    {
        "line": 192,
        "fullcodeline": "if (bitsPerSample == 0 || bitsPerSample > 32)"
    },
    {
        "line": 201,
        "fullcodeline": "if (reserved <= bitsPerSample &&"
    },
    {
        "line": 202,
        "fullcodeline": "(reserved + 7) / 8 == (bitsPerSample + 7) / 8)"
    },
    {
        "line": 203,
        "fullcodeline": "track->f.sampleWidth = reserved;"
    },
    {
        "line": 206,
        "fullcodeline": "track->f.sampleFormat = AF_SAMPFMT_UNSIGNED;"
    },
    {
        "line": 210,
        "fullcodeline": "else if (subformat == _af_wave_guid_ieee_float)"
    },
    {
        "line": 208,
        "fullcodeline": "track->f.sampleFormat = AF_SAMPFMT_TWOSCOMP;"
    },
    {
        "line": 214,
        "fullcodeline": "track->f.sampleWidth = 64;"
    },
    {
        "line": 215,
        "fullcodeline": "track->f.sampleFormat = AF_SAMPFMT_DOUBLE;"
    },
    {
        "line": 219,
        "fullcodeline": "track->f.sampleWidth = 32;"
    },
    {
        "line": 220,
        "fullcodeline": "track->f.sampleFormat = AF_SAMPFMT_FLOAT;"
    },
    {
        "line": 223,
        "fullcodeline": "else if (subformat == _af_wave_guid_alaw ||"
    },
    {
        "line": 224,
        "fullcodeline": "subformat == _af_wave_guid_ulaw)"
    },
    {
        "line": 226,
        "fullcodeline": "track->f.compressionType = subformat == _af_wave_guid_alaw ?"
    },
    {
        "line": 228,
        "fullcodeline": "track->f.sampleWidth = 16;"
    },
    {
        "line": 229,
        "fullcodeline": "track->f.sampleFormat = AF_SAMPFMT_TWOSCOMP;"
    },
    {
        "line": 230,
        "fullcodeline": "track->f.byteOrder = _AF_BYTEORDER_NATIVE;"
    },
    {
        "line": 231,
        "fullcodeline": "track->f.bytesPerPacket = channelCount;"
    },
    {
        "line": 235,
        "fullcodeline": "_af_error(AF_BAD_NOT_IMPLEMENTED, \"WAVE extensible data format %s is not currently supported\", subformat.name().c_str());"
    }
]