[
    {
        "line": 2,
        "fullcodeline": "CWPSTRUCT* call_window_proc_struct = reinterpret_cast<CWPSTRUCT*>(lParam);"
    },
    {
        "line": 3,
        "fullcodeline": "if (WM_COPYDATA == call_window_proc_struct->message) {"
    },
    {
        "line": 255,
        "fullcodeline": "return ::CallNextHookEx(NULL, nCode, wParam, lParam);"
    },
    {
        "line": 4,
        "fullcodeline": "COPYDATASTRUCT* data = reinterpret_cast<COPYDATASTRUCT*>(call_window_proc_struct->lParam);"
    },
    {
        "line": 5,
        "fullcodeline": "webdriver::HookProcessor::CopyDataToBuffer(data->cbData, data->lpData);"
    },
    {
        "line": 6,
        "fullcodeline": "} else if (WD_GET_ALL_COOKIES == call_window_proc_struct->message) {"
    },
    {
        "line": 7,
        "fullcodeline": "std::wstring url = webdriver::HookProcessor::CopyWStringFromBuffer();"
    },
    {
        "line": 8,
        "fullcodeline": "int driver_process_id = static_cast<int>(call_window_proc_struct->wParam);"
    },
    {
        "line": 10,
        "fullcodeline": "CComPtr<IUri> uri_pointer;"
    },
    {
        "line": 11,
        "fullcodeline": "HRESULT hr = ::CreateUri(url.c_str(), Uri_CREATE_ALLOW_RELATIVE, 0, &uri_pointer);"
    },
    {
        "line": 12,
        "fullcodeline": "DWORD scheme = 0;"
    },
    {
        "line": 13,
        "fullcodeline": "uri_pointer->GetScheme(&scheme);"
    },
    {
        "line": 15,
        "fullcodeline": "uri_pointer->GetSchemeName(&scheme_bstr);"
    },
    {
        "line": 17,
        "fullcodeline": "uri_pointer->GetHost(&host_bstr);"
    },
    {
        "line": 19,
        "fullcodeline": "uri_pointer->GetPath(&path_bstr);"
    },
    {
        "line": 21,
        "fullcodeline": "std::wstring parsed_uri = scheme_bstr;"
    },
    {
        "line": 22,
        "fullcodeline": "parsed_uri.append(L\"://\");"
    },
    {
        "line": 23,
        "fullcodeline": "parsed_uri.append(host_bstr);"
    },
    {
        "line": 24,
        "fullcodeline": "parsed_uri.append(path_bstr);"
    },
    {
        "line": 26,
        "fullcodeline": "InternetGetCookieEx2Proc get_cookie_proc = NULL;"
    },
    {
        "line": 27,
        "fullcodeline": "InternetFreeCookiesProc free_cookies_proc = NULL;"
    },
    {
        "line": 28,
        "fullcodeline": "HMODULE wininet_handle = ::GetModuleHandle(L\"wininet\");"
    },
    {
        "line": 34,
        "fullcodeline": "DWORD cookie_count = 0;"
    },
    {
        "line": 35,
        "fullcodeline": "INTERNETCOOKIE2* cookie_pointer = NULL;"
    },
    {
        "line": 36,
        "fullcodeline": "DWORD success = 1;"
    },
    {
        "line": 98,
        "fullcodeline": "webdriver::HookProcessor::WriteBufferToPipe(driver_process_id);"
    },
    {
        "line": 45,
        "fullcodeline": "if (success == 0) {"
    },
    {
        "line": 30,
        "fullcodeline": "get_cookie_proc = reinterpret_cast<InternetGetCookieEx2Proc>(::GetProcAddress(wininet_handle, \"InternetGetCookieEx2\"));"
    },
    {
        "line": 31,
        "fullcodeline": "free_cookies_proc = reinterpret_cast<InternetFreeCookiesProc>(::GetProcAddress(wininet_handle, \"InternetFreeCookies\"));"
    },
    {
        "line": 38,
        "fullcodeline": "success = get_cookie_proc(parsed_uri.c_str(),"
    },
    {
        "line": 48,
        "fullcodeline": "std::wstring all_cookies = L\"\";"
    },
    {
        "line": 93,
        "fullcodeline": "free_cookies_proc(cookie_pointer, cookie_count);"
    },
    {
        "line": 94,
        "fullcodeline": "webdriver::HookProcessor::CopyWStringToBuffer(all_cookies);"
    },
    {
        "line": 99,
        "fullcodeline": "} else if (WD_GET_HTTPONLY_COOKIES == call_window_proc_struct->message ||"
    },
    {
        "line": 49,
        "fullcodeline": "for (DWORD cookie_index = 0; cookie_index < cookie_count; ++cookie_index) {"
    },
    {
        "line": 101,
        "fullcodeline": "WD_GET_SECURE_COOKIES == call_window_proc_struct->message) {"
    },
    {
        "line": 102,
        "fullcodeline": "std::wstring url = webdriver::HookProcessor::CopyWStringFromBuffer();"
    },
    {
        "line": 103,
        "fullcodeline": "int driver_process_id = static_cast<int>(call_window_proc_struct->wParam);"
    },
    {
        "line": 105,
        "fullcodeline": "DWORD get_cookie_flags = 0;"
    },
    {
        "line": 111,
        "fullcodeline": "CComPtr<IUri> uri_pointer;"
    },
    {
        "line": 112,
        "fullcodeline": "HRESULT hr = ::CreateUri(url.c_str(), Uri_CREATE_ALLOW_RELATIVE, 0, &uri_pointer);"
    },
    {
        "line": 113,
        "fullcodeline": "DWORD scheme = 0;"
    },
    {
        "line": 114,
        "fullcodeline": "uri_pointer->GetScheme(&scheme);"
    },
    {
        "line": 116,
        "fullcodeline": "uri_pointer->GetSchemeName(&scheme_bstr);"
    },
    {
        "line": 118,
        "fullcodeline": "uri_pointer->GetHost(&host_bstr);"
    },
    {
        "line": 120,
        "fullcodeline": "uri_pointer->GetPath(&path_bstr);"
    },
    {
        "line": 126,
        "fullcodeline": "std::wstring parsed_uri = L\"http\";"
    },
    {
        "line": 132,
        "fullcodeline": "parsed_uri.append(L\"://\");"
    },
    {
        "line": 133,
        "fullcodeline": "parsed_uri.append(host_bstr);"
    },
    {
        "line": 134,
        "fullcodeline": "parsed_uri.append(path_bstr);"
    },
    {
        "line": 138,
        "fullcodeline": "DWORD buffer_size = 0;"
    },
    {
        "line": 139,
        "fullcodeline": "BOOL success = ::InternetGetCookieEx(parsed_uri.c_str(),"
    },
    {
        "line": 53,
        "fullcodeline": "INTERNETCOOKIE2* current_cookie = cookie_pointer + cookie_index;"
    },
    {
        "line": 54,
        "fullcodeline": "std::wstring cookie_name = L\"\";"
    },
    {
        "line": 60,
        "fullcodeline": "std::wstring cookie_value = L\"\";"
    },
    {
        "line": 69,
        "fullcodeline": "std::wstring cookie_domain = L\"\";"
    },
    {
        "line": 73,
        "fullcodeline": "std::wstring cookie_path = L\"\";"
    },
    {
        "line": 77,
        "fullcodeline": "DWORD flags = current_cookie->dwFlags;"
    },
    {
        "line": 78,
        "fullcodeline": "FILETIME expires = current_cookie->ftExpires;"
    },
    {
        "line": 79,
        "fullcodeline": "all_cookies.append(cookie_name).append(L\"\\n\");"
    },
    {
        "line": 80,
        "fullcodeline": "all_cookies.append(cookie_value).append(L\"\\n\");"
    },
    {
        "line": 81,
        "fullcodeline": "all_cookies.append(cookie_domain).append(L\"/\").append(cookie_path).append(L\"\\n\");"
    },
    {
        "line": 82,
        "fullcodeline": "all_cookies.append(std::to_wstring(flags)).append(L\"\\n\");"
    },
    {
        "line": 100,
        "fullcodeline": "WD_GET_SCRIPTABLE_COOKIES == call_window_proc_struct->message ||"
    },
    {
        "line": 106,
        "fullcodeline": "if (WD_GET_HTTPONLY_COOKIES == call_window_proc_struct->message ||"
    },
    {
        "line": 127,
        "fullcodeline": "if ((WD_GET_SECURE_COOKIES == call_window_proc_struct->message ||"
    },
    {
        "line": 50,
        "fullcodeline": "if (all_cookies.size() > 0) {"
    },
    {
        "line": 107,
        "fullcodeline": "WD_GET_SECURE_COOKIES == call_window_proc_struct->message) {"
    },
    {
        "line": 108,
        "fullcodeline": "get_cookie_flags = INTERNET_COOKIE_HTTPONLY;"
    },
    {
        "line": 129,
        "fullcodeline": "URL_SCHEME_HTTPS == scheme) {"
    },
    {
        "line": 130,
        "fullcodeline": "parsed_uri.append(L\"s\");"
    },
    {
        "line": 146,
        "fullcodeline": "webdriver::HookProcessor::SetDataBufferSize(buffer_size);"
    },
    {
        "line": 147,
        "fullcodeline": "::InternetGetCookieEx(parsed_uri.c_str(),"
    },
    {
        "line": 154,
        "fullcodeline": "webdriver::HookProcessor::WriteBufferToPipe(driver_process_id);"
    },
    {
        "line": 161,
        "fullcodeline": "} else if (WD_GET_COOKIE_CACHE_FILES == call_window_proc_struct->message) {"
    },
    {
        "line": 51,
        "fullcodeline": "all_cookies.append(L\"\\n*\\n\");"
    },
    {
        "line": 58,
        "fullcodeline": "cookie_name = current_cookie->pwszName;"
    },
    {
        "line": 62,
        "fullcodeline": "cookie_value = current_cookie->pwszValue;"
    },
    {
        "line": 71,
        "fullcodeline": "cookie_domain = current_cookie->pwszDomain;"
    },
    {
        "line": 75,
        "fullcodeline": "cookie_path = current_cookie->pwszPath;"
    },
    {
        "line": 87,
        "fullcodeline": "all_cookies.append(std::to_wstring(expires.dwLowDateTime)).append(L\"\\n\");"
    },
    {
        "line": 88,
        "fullcodeline": "all_cookies.append(std::to_wstring(expires.dwHighDateTime)).append(L\"\\n\");"
    },
    {
        "line": 128,
        "fullcodeline": "WD_GET_SCRIPTABLE_COOKIES == call_window_proc_struct->message) &&"
    },
    {
        "line": 149,
        "fullcodeline": "reinterpret_cast<LPTSTR>(webdriver::HookProcessor::GetDataBufferAddress()),"
    },
    {
        "line": 162,
        "fullcodeline": "int driver_process_id = static_cast<int>(call_window_proc_struct->wParam);"
    },
    {
        "line": 163,
        "fullcodeline": "std::wstring file_list = L\"\";"
    },
    {
        "line": 164,
        "fullcodeline": "std::wstring url = webdriver::HookProcessor::CopyWStringFromBuffer();"
    },
    {
        "line": 167,
        "fullcodeline": "CComPtr<IUri> uri_pointer;"
    },
    {
        "line": 168,
        "fullcodeline": "HRESULT hr = ::CreateUri(url.c_str(), Uri_CREATE_ALLOW_RELATIVE, 0, &uri_pointer);"
    },
    {
        "line": 170,
        "fullcodeline": "uri_pointer->GetHost(&host_bstr);"
    },
    {
        "line": 172,
        "fullcodeline": "uri_pointer->GetPath(&path_bstr);"
    },
    {
        "line": 173,
        "fullcodeline": "std::wstring parsed_uri = host_bstr;"
    },
    {
        "line": 174,
        "fullcodeline": "parsed_uri.append(path_bstr);"
    },
    {
        "line": 178,
        "fullcodeline": "HANDLE cache_enum_handle = NULL;"
    },
    {
        "line": 179,
        "fullcodeline": "DWORD entry_size = 2048;"
    },
    {
        "line": 180,
        "fullcodeline": "LPINTERNET_CACHE_ENTRY_INFO entry = NULL;"
    },
    {
        "line": 181,
        "fullcodeline": "std::vector<char> entry_buffer(entry_size);"
    },
    {
        "line": 183,
        "fullcodeline": "cache_enum_handle = ::FindFirstUrlCacheEntry(L\"cookie:\","
    },
    {
        "line": 222,
        "fullcodeline": "webdriver::HookProcessor::CopyWStringToBuffer(file_list);"
    },
    {
        "line": 223,
        "fullcodeline": "webdriver::HookProcessor::WriteBufferToPipe(driver_process_id);"
    },
    {
        "line": 90,
        "fullcodeline": "all_cookies.append(L\"\\n\\n\");"
    },
    {
        "line": 156,
        "fullcodeline": "if (ERROR_NO_MORE_ITEMS == ::GetLastError()) {"
    },
    {
        "line": 186,
        "fullcodeline": "if (cache_enum_handle == NULL &&"
    },
    {
        "line": 194,
        "fullcodeline": "while (cache_enum_handle != NULL) {"
    },
    {
        "line": 158,
        "fullcodeline": "webdriver::HookProcessor::WriteBufferToPipe(driver_process_id);"
    },
    {
        "line": 187,
        "fullcodeline": "ERROR_INSUFFICIENT_BUFFER == ::GetLastError()) {"
    },
    {
        "line": 188,
        "fullcodeline": "entry_buffer.resize(entry_size);"
    },
    {
        "line": 189,
        "fullcodeline": "entry = reinterpret_cast<INTERNET_CACHE_ENTRY_INFO*>(&entry_buffer[0]);"
    },
    {
        "line": 190,
        "fullcodeline": "cache_enum_handle = ::FindFirstUrlCacheEntry(L\"cookie:\","
    },
    {
        "line": 206,
        "fullcodeline": "BOOL success = ::FindNextUrlCacheEntry(cache_enum_handle,"
    },
    {
        "line": 224,
        "fullcodeline": "} else if (WD_SET_COOKIE == call_window_proc_struct->message) {"
    },
    {
        "line": 195,
        "fullcodeline": "if (COOKIE_CACHE_ENTRY == (entry->CacheEntryType & COOKIE_CACHE_ENTRY)) {"
    },
    {
        "line": 209,
        "fullcodeline": "if (!success) {"
    },
    {
        "line": 225,
        "fullcodeline": "DWORD set_cookie_flags = static_cast<DWORD>(call_window_proc_struct->wParam);"
    },
    {
        "line": 226,
        "fullcodeline": "std::wstring cookie_data = webdriver::HookProcessor::CopyWStringFromBuffer();"
    },
    {
        "line": 227,
        "fullcodeline": "size_t url_separator_pos = cookie_data.find_first_of(L\"|\");"
    },
    {
        "line": 228,
        "fullcodeline": "std::wstring url = cookie_data.substr(0, url_separator_pos);"
    },
    {
        "line": 229,
        "fullcodeline": "std::wstring cookie = cookie_data.substr(url_separator_pos + 1);"
    },
    {
        "line": 231,
        "fullcodeline": "CComPtr<IUri> uri_pointer;"
    },
    {
        "line": 232,
        "fullcodeline": "HRESULT hr = ::CreateUri(url.c_str(), Uri_CREATE_ALLOW_RELATIVE, 0, &uri_pointer);"
    },
    {
        "line": 234,
        "fullcodeline": "uri_pointer->GetSchemeName(&scheme_bstr);"
    },
    {
        "line": 236,
        "fullcodeline": "uri_pointer->GetHost(&host_bstr);"
    },
    {
        "line": 237,
        "fullcodeline": "std::wstring parsed_uri = scheme_bstr;"
    },
    {
        "line": 238,
        "fullcodeline": "parsed_uri.append(L\"://\");"
    },
    {
        "line": 239,
        "fullcodeline": "parsed_uri.append(host_bstr);"
    },
    {
        "line": 243,
        "fullcodeline": "DWORD cookie_set = ::InternetSetCookieEx(parsed_uri.c_str(),"
    },
    {
        "line": 196,
        "fullcodeline": "std::wstring name = entry->lpszSourceUrlName;"
    },
    {
        "line": 197,
        "fullcodeline": "size_t name_separator_pos(name.find_first_of(L\"@\"));"
    },
    {
        "line": 198,
        "fullcodeline": "std::wstring domain = name.substr(name_separator_pos + 1);"
    },
    {
        "line": 210,
        "fullcodeline": "DWORD error = ::GetLastError();"
    },
    {
        "line": 199,
        "fullcodeline": "if (parsed_uri.find(domain) != std::wstring::npos) {"
    },
    {
        "line": 211,
        "fullcodeline": "if (ERROR_INSUFFICIENT_BUFFER == error) {"
    },
    {
        "line": 245,
        "fullcodeline": "cookie.c_str(),"
    },
    {
        "line": 249,
        "fullcodeline": "webdriver::HookProcessor::SetDataBufferSize(0);"
    },
    {
        "line": 203,
        "fullcodeline": "file_list.append(entry->lpszLocalFileName);"
    },
    {
        "line": 212,
        "fullcodeline": "entry_buffer.resize(entry_size);"
    },
    {
        "line": 213,
        "fullcodeline": "BOOL other_success = ::FindNextUrlCacheEntry(cache_enum_handle,"
    },
    {
        "line": 251,
        "fullcodeline": "DWORD error = ::GetLastError();"
    },
    {
        "line": 252,
        "fullcodeline": "webdriver::HookProcessor::SetDataBufferSize(error);"
    },
    {
        "line": 200,
        "fullcodeline": "if (file_list.size() > 0) {"
    },
    {
        "line": 201,
        "fullcodeline": "file_list.append(L\"|\");"
    },
    {
        "line": 216,
        "fullcodeline": "} else if (ERROR_NO_MORE_ITEMS == error) {"
    },
    {
        "line": 217,
        "fullcodeline": "::FindCloseUrlCache(cache_enum_handle);"
    },
    {
        "line": 218,
        "fullcodeline": "cache_enum_handle = NULL;"
    }
]