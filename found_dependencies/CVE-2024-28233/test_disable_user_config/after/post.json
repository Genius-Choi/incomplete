[
    {
        "line": 3,
        "fullcodeline": "cookies = await app.login_user('nandy')"
    },
    {
        "line": 4,
        "fullcodeline": "s = AsyncSession()"
    },
    {
        "line": 5,
        "fullcodeline": "s.cookies = cookies"
    },
    {
        "line": 12,
        "fullcodeline": "user.spawner.debug = True"
    },
    {
        "line": 13,
        "fullcodeline": "user.spawner.disable_user_config = True"
    },
    {
        "line": 14,
        "fullcodeline": "home_dir = tmpdir.join(\"home\")"
    },
    {
        "line": 15,
        "fullcodeline": "home_dir.mkdir()"
    },
    {
        "line": 18,
        "fullcodeline": "jupyter_config_dir = home_dir.join(\".jupyter\")"
    },
    {
        "line": 19,
        "fullcodeline": "jupyter_config_dir.mkdir()"
    },
    {
        "line": 24,
        "fullcodeline": "await user.spawn()"
    },
    {
        "line": 27,
        "fullcodeline": "url = public_url(app, user)"
    },
    {
        "line": 30,
        "fullcodeline": "r = await s.get(url)"
    },
    {
        "line": 31,
        "fullcodeline": "r.raise_for_status()"
    },
    {
        "line": 32,
        "fullcodeline": "assert r.url.rstrip('/').endswith("
    },
    {
        "line": 35,
        "fullcodeline": "assert r.status_code == 200"
    },
    {
        "line": 37,
        "fullcodeline": "r = await s.get(url_path_join(public_url(app, user), 'jupyterhub-test-info'))"
    },
    {
        "line": 38,
        "fullcodeline": "r.raise_for_status()"
    },
    {
        "line": 39,
        "fullcodeline": "info = r.json()"
    },
    {
        "line": 40,
        "fullcodeline": "pprint(info)"
    },
    {
        "line": 41,
        "fullcodeline": "assert info['disable_user_config']"
    },
    {
        "line": 42,
        "fullcodeline": "server_config = info['config']"
    },
    {
        "line": 43,
        "fullcodeline": "settings = info['settings']"
    },
    {
        "line": 44,
        "fullcodeline": "assert 'TestSingleUser' not in server_config"
    },
    {
        "line": 46,
        "fullcodeline": "norm_home = os.path.realpath(os.path.abspath(home))"
    },
    {
        "line": 48,
        "fullcodeline": "def assert_not_in_home(path, name):"
    },
    {
        "line": 17,
        "fullcodeline": "user.spawner.home_dir = home = str(home_dir)"
    },
    {
        "line": 21,
        "fullcodeline": "with jupyter_config_dir.join(\"jupyter_server_config.py\").open(\"w\") as f:"
    },
    {
        "line": 25,
        "fullcodeline": "await app.proxy.add_user(user)"
    },
    {
        "line": 54,
        "fullcodeline": "for path in info['config_file_paths']:"
    },
    {
        "line": 59,
        "fullcodeline": "for key, setting in settings.items():"
    },
    {
        "line": 9,
        "fullcodeline": "print(\"stopping\")"
    },
    {
        "line": 10,
        "fullcodeline": "await user.stop()"
    },
    {
        "line": 22,
        "fullcodeline": "f.write(\"c.TestSingleUser.jupyter_config_py = True\")"
    },
    {
        "line": 33,
        "fullcodeline": "url_path_join('/user/nandy', user.spawner.default_url or \"/tree\")"
    },
    {
        "line": 55,
        "fullcodeline": "assert_not_in_home(path, 'config_file_paths')"
    },
    {
        "line": 60,
        "fullcodeline": "if 'path' in key and isinstance(setting, list):"
    },
    {
        "line": 61,
        "fullcodeline": "for path in setting:"
    },
    {
        "line": 62,
        "fullcodeline": "assert_not_in_home(path, key)"
    }
]