[
    {
        "line": 10,
        "fullcodeline": "cookies = await app.login_user('nandy')"
    },
    {
        "line": 11,
        "fullcodeline": "user = app.users['nandy']"
    },
    {
        "line": 13,
        "fullcodeline": "group = orm.Group.find(app.db, name=\"visitors\")"
    },
    {
        "line": 25,
        "fullcodeline": "spawner = user.spawners[server_name]"
    },
    {
        "line": 26,
        "fullcodeline": "url = url_path_join(public_url(app, user), server_name)"
    },
    {
        "line": 29,
        "fullcodeline": "r = await async_requests.get(url)"
    },
    {
        "line": 30,
        "fullcodeline": "r.raise_for_status()"
    },
    {
        "line": 31,
        "fullcodeline": "assert '/hub/login' in r.url"
    },
    {
        "line": 34,
        "fullcodeline": "api_url = url_path_join(url, \"api/status\")"
    },
    {
        "line": 35,
        "fullcodeline": "r = await async_requests.get(api_url, allow_redirects=False)"
    },
    {
        "line": 39,
        "fullcodeline": "r = await async_requests.get(url, cookies=cookies)"
    },
    {
        "line": 40,
        "fullcodeline": "r.raise_for_status()"
    },
    {
        "line": 41,
        "fullcodeline": "assert ("
    },
    {
        "line": 50,
        "fullcodeline": "assert r.status_code == 200"
    },
    {
        "line": 53,
        "fullcodeline": "r = await async_requests.get(url_path_join(url, 'logout'), cookies=cookies)"
    },
    {
        "line": 54,
        "fullcodeline": "assert len(r.cookies) == 0"
    },
    {
        "line": 57,
        "fullcodeline": "access_scopes = [s.replace(\"$user\", user.name) for s in access_scopes]"
    },
    {
        "line": 58,
        "fullcodeline": "access_scopes = ["
    },
    {
        "line": 61,
        "fullcodeline": "access_scopes = [s.replace(\"$group\", f\"{group.name}\") for s in access_scopes]"
    },
    {
        "line": 62,
        "fullcodeline": "other_user = create_user_with_scopes(*access_scopes, name=\"burgess\")"
    },
    {
        "line": 64,
        "fullcodeline": "cookies = await app.login_user('burgess')"
    },
    {
        "line": 65,
        "fullcodeline": "s = AsyncSession()"
    },
    {
        "line": 66,
        "fullcodeline": "s.cookies = cookies"
    },
    {
        "line": 67,
        "fullcodeline": "r = await s.get(url)"
    },
    {
        "line": 68,
        "fullcodeline": "assert urlparse(r.url).path.endswith('/oauth2/authorize')"
    },
    {
        "line": 73,
        "fullcodeline": "r.raise_for_status()"
    },
    {
        "line": 75,
        "fullcodeline": "r = await s.post(r.url, data={'scopes': ['identify'], '_xsrf': s.cookies['_xsrf']})"
    },
    {
        "line": 76,
        "fullcodeline": "final_url = urlparse(r.url).path.rstrip('/')"
    },
    {
        "line": 77,
        "fullcodeline": "final_path = url_path_join("
    },
    {
        "line": 81,
        "fullcodeline": "r.raise_for_status()"
    },
    {
        "line": 90,
        "fullcodeline": "r = await s.get(r.url, allow_redirects=False)"
    },
    {
        "line": 14,
        "fullcodeline": "if group is None:"
    },
    {
        "line": 18,
        "fullcodeline": "if group not in user.groups:"
    },
    {
        "line": 22,
        "fullcodeline": "if server_name not in user.spawners or not user.spawners[server_name].active:"
    },
    {
        "line": 36,
        "fullcodeline": "assert r.status_code == 403"
    },
    {
        "line": 69,
        "fullcodeline": "if not expect_success:"
    },
    {
        "line": 80,
        "fullcodeline": "assert final_url.endswith(final_path)"
    },
    {
        "line": 85,
        "fullcodeline": "app.db.commit()"
    },
    {
        "line": 88,
        "fullcodeline": "s.cookies.pop('jupyterhub-session-id')"
    },
    {
        "line": 91,
        "fullcodeline": "assert r.status_code == 403"
    },
    {
        "line": 92,
        "fullcodeline": "assert 'burgess' in r.text"
    },
    {
        "line": 15,
        "fullcodeline": "group = orm.Group(name=\"visitors\")"
    },
    {
        "line": 23,
        "fullcodeline": "await user.spawn(server_name)"
    },
    {
        "line": 42,
        "fullcodeline": "urlparse(r.url)"
    },
    {
        "line": 71,
        "fullcodeline": "assert r.status_code == 403"
    },
    {
        "line": 78,
        "fullcodeline": "'/user/', user.name, spawner.name, spawner.default_url or \"/tree\""
    },
    {
        "line": 16,
        "fullcodeline": "app.db.add(group)"
    },
    {
        "line": 17,
        "fullcodeline": "app.db.commit()"
    },
    {
        "line": 19,
        "fullcodeline": "user.groups.append(group)"
    },
    {
        "line": 20,
        "fullcodeline": "app.db.commit()"
    },
    {
        "line": 24,
        "fullcodeline": "await app.proxy.add_user(user, server_name)"
    },
    {
        "line": 45,
        "fullcodeline": "url_path_join("
    },
    {
        "line": 46,
        "fullcodeline": "f'/user/{user.name}', spawner.name, spawner.default_url or \"/tree\""
    },
    {
        "line": 59,
        "fullcodeline": "s.replace(\"$server\", f\"{user.name}/{server_name}\") for s in access_scopes"
    }
]