[
    {
        "line": 4,
        "fullcodeline": "should_accept = accept_token_in_url != \"0\""
    },
    {
        "line": 6,
        "fullcodeline": "await user.spawn()"
    },
    {
        "line": 9,
        "fullcodeline": "token = user.new_api_token(scopes=[\"access:servers!user\"])"
    },
    {
        "line": 10,
        "fullcodeline": "url = url_path_join(public_url(app, user), user.spawner.default_url or \"/tree/\")"
    },
    {
        "line": 13,
        "fullcodeline": "s = AsyncSession()"
    },
    {
        "line": 14,
        "fullcodeline": "r = await s.get(url + f\"?token={token}\", allow_redirects=False)"
    },
    {
        "line": 15,
        "fullcodeline": "print(r.url, r.status_code)"
    },
    {
        "line": 21,
        "fullcodeline": "assert s.cookies"
    },
    {
        "line": 24,
        "fullcodeline": "r = await s.get(url, allow_redirects=False)"
    },
    {
        "line": 7,
        "fullcodeline": "await app.proxy.add_user(user)"
    },
    {
        "line": 16,
        "fullcodeline": "if not should_accept:"
    },
    {
        "line": 20,
        "fullcodeline": "assert r.status_code == 200"
    },
    {
        "line": 25,
        "fullcodeline": "assert r.status_code == 200"
    },
    {
        "line": 3,
        "fullcodeline": "user.spawner.environment[\"JUPYTERHUB_ALLOW_TOKEN_IN_URL\"] = accept_token_in_url"
    },
    {
        "line": 17,
        "fullcodeline": "assert r.status_code == 302"
    }
]