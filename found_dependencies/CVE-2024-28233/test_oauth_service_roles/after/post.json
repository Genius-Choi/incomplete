[
    {
        "line": 10,
        "fullcodeline": "service = mockservice_url"
    },
    {
        "line": 11,
        "fullcodeline": "oauth_client = ("
    },
    {
        "line": 16,
        "fullcodeline": "scopes.define_custom_scopes("
    },
    {
        "line": 23,
        "fullcodeline": "roles.create_role("
    },
    {
        "line": 35,
        "fullcodeline": "roles.create_role("
    },
    {
        "line": 45,
        "fullcodeline": "oauth_client.allowed_scopes = sorted("
    },
    {
        "line": 51,
        "fullcodeline": "user = create_user_with_scopes(\"access:services\")"
    },
    {
        "line": 52,
        "fullcodeline": "url = url_path_join(public_url(app, mockservice_url) + 'owhoami/?arg=x')"
    },
    {
        "line": 57,
        "fullcodeline": "s = AsyncSession()"
    },
    {
        "line": 58,
        "fullcodeline": "roles.grant_role(app.db, user, \"user\")"
    },
    {
        "line": 59,
        "fullcodeline": "roles.grant_role(app.db, user, \"read-only\")"
    },
    {
        "line": 60,
        "fullcodeline": "name = user.name"
    },
    {
        "line": 61,
        "fullcodeline": "s.cookies = await app.login_user(name)"
    },
    {
        "line": 63,
        "fullcodeline": "r = await s.get(url)"
    },
    {
        "line": 73,
        "fullcodeline": "r.raise_for_status()"
    },
    {
        "line": 75,
        "fullcodeline": "assert urlparse(r.url).path == app.base_url + 'hub/api/oauth2/authorize'"
    },
    {
        "line": 77,
        "fullcodeline": "assert set(r.history[0].cookies.keys()) == {'service-%s-oauth-state' % service.name}"
    },
    {
        "line": 79,
        "fullcodeline": "page = BeautifulSoup(r.text, \"html.parser\")"
    },
    {
        "line": 80,
        "fullcodeline": "scope_inputs = page.find_all(\"input\", {\"name\": \"scopes\"})"
    },
    {
        "line": 81,
        "fullcodeline": "scope_values = [input[\"value\"] for input in scope_inputs]"
    },
    {
        "line": 82,
        "fullcodeline": "app_log.info(f\"Submitting request with scope values {scope_values}\")"
    },
    {
        "line": 84,
        "fullcodeline": "data = {}"
    },
    {
        "line": 88,
        "fullcodeline": "r = await s.post(r.url, data=data)"
    },
    {
        "line": 89,
        "fullcodeline": "r.raise_for_status()"
    },
    {
        "line": 90,
        "fullcodeline": "assert r.url == url"
    },
    {
        "line": 92,
        "fullcodeline": "assert 'service-%s' % service.name in set(s.cookies.keys())"
    },
    {
        "line": 94,
        "fullcodeline": "assert 'service-%s-oauth-state' % service.name not in set(s.cookies.keys())"
    },
    {
        "line": 97,
        "fullcodeline": "r = await s.get(url, allow_redirects=False)"
    },
    {
        "line": 98,
        "fullcodeline": "r.raise_for_status()"
    },
    {
        "line": 99,
        "fullcodeline": "assert r.status_code == 200"
    },
    {
        "line": 100,
        "fullcodeline": "assert len(r.history) == 0"
    },
    {
        "line": 101,
        "fullcodeline": "reply = r.json()"
    },
    {
        "line": 102,
        "fullcodeline": "sub_reply = {key: reply.get(key, 'missing') for key in ('kind', 'name')}"
    },
    {
        "line": 103,
        "fullcodeline": "assert sub_reply == {'name': user.name, 'kind': 'user'}"
    },
    {
        "line": 105,
        "fullcodeline": "expected_scopes = {s.replace(\"$user\", user.name) for s in expected_scopes}"
    },
    {
        "line": 121,
        "fullcodeline": "expected_scopes.update(scopes.identify_scopes(user.orm_user))"
    },
    {
        "line": 122,
        "fullcodeline": "expected_scopes.update(scopes.access_scopes(oauth_client))"
    },
    {
        "line": 123,
        "fullcodeline": "expected_scopes = scopes.reduce_scopes(expected_scopes)"
    },
    {
        "line": 124,
        "fullcodeline": "have_scopes = scopes.reduce_scopes(set(reply['scopes']))"
    },
    {
        "line": 127,
        "fullcodeline": "assert sorted(have_scopes) == sorted(expected_scopes)"
    },
    {
        "line": 130,
        "fullcodeline": "token = app.users[name].new_api_token()"
    },
    {
        "line": 132,
        "fullcodeline": "r = await async_requests.get(url_concat(url, {'token': token}), headers=s.headers)"
    },
    {
        "line": 133,
        "fullcodeline": "r.raise_for_status()"
    },
    {
        "line": 134,
        "fullcodeline": "reply = r.json()"
    },
    {
        "line": 135,
        "fullcodeline": "assert reply['name'] == name"
    },
    {
        "line": 138,
        "fullcodeline": "assert len(r.cookies) != 0"
    },
    {
        "line": 140,
        "fullcodeline": "r = await async_requests.get("
    },
    {
        "line": 143,
        "fullcodeline": "r.raise_for_status()"
    },
    {
        "line": 144,
        "fullcodeline": "assert r.url == url"
    },
    {
        "line": 145,
        "fullcodeline": "reply = r.json()"
    },
    {
        "line": 146,
        "fullcodeline": "assert reply['name'] == name"
    },
    {
        "line": 50,
        "fullcodeline": "app.db.commit()"
    },
    {
        "line": 64,
        "fullcodeline": "if expected_scopes is None:"
    },
    {
        "line": 108,
        "fullcodeline": "for scope in list(expected_scopes):"
    },
    {
        "line": 116,
        "fullcodeline": "if 'inherit' in expected_scopes:"
    },
    {
        "line": 12,
        "fullcodeline": "app.db.query(orm.OAuthClient)"
    },
    {
        "line": 17,
        "fullcodeline": "{"
    },
    {
        "line": 25,
        "fullcodeline": "{"
    },
    {
        "line": 37,
        "fullcodeline": "{"
    },
    {
        "line": 46,
        "fullcodeline": "roles_to_scopes("
    },
    {
        "line": 54,
        "fullcodeline": "request_scopes = {s.replace(\"$user\", user.name) for s in request_scopes}"
    },
    {
        "line": 55,
        "fullcodeline": "url = url_concat(url, {\"request-scope\": \" \".join(request_scopes)})"
    },
    {
        "line": 68,
        "fullcodeline": "assert dest_url == public_url(app, mockservice_url) + \"oauth_callback\""
    },
    {
        "line": 69,
        "fullcodeline": "assert parse_qs(query).get(\"error\") == [\"invalid_scope\"]"
    },
    {
        "line": 70,
        "fullcodeline": "assert r.status_code == 400"
    },
    {
        "line": 86,
        "fullcodeline": "data[\"scopes\"] = scope_values"
    },
    {
        "line": 117,
        "fullcodeline": "expected_scopes = set(scopes.get_scopes_for(user.orm_user))"
    },
    {
        "line": 28,
        "fullcodeline": "\"scopes\": ["
    },
    {
        "line": 40,
        "fullcodeline": "\"scopes\": ["
    },
    {
        "line": 67,
        "fullcodeline": "dest_url, _, query = r.url.partition(\"?\")"
    },
    {
        "line": 109,
        "fullcodeline": "role = orm.Role.find(app.db, scope)"
    },
    {
        "line": 18,
        "fullcodeline": "\"custom:jupyter_server:read:*\": {"
    },
    {
        "line": 47,
        "fullcodeline": "[orm.Role.find(app.db, role_name) for role_name in client_allowed_roles]"
    },
    {
        "line": 111,
        "fullcodeline": "expected_scopes.discard(role.name)"
    },
    {
        "line": 112,
        "fullcodeline": "expected_scopes.update("
    },
    {
        "line": 113,
        "fullcodeline": "roles.roles_to_expanded_scopes([role], owner=user.orm_user)"
    }
]