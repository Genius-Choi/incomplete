[
    {
        "line": 2,
        "fullcodeline": "name = 'shutitdown'"
    },
    {
        "line": 3,
        "fullcodeline": "cookies = await app.login_user(name)"
    },
    {
        "line": 7,
        "fullcodeline": "await user.spawn()"
    },
    {
        "line": 8,
        "fullcodeline": "spawner = user.spawner"
    },
    {
        "line": 17,
        "fullcodeline": "assert spawner.active"
    },
    {
        "line": 28,
        "fullcodeline": "login_url = public_host(app) + app.tornado_settings['login_url']"
    },
    {
        "line": 29,
        "fullcodeline": "assert r.url == login_url"
    },
    {
        "line": 30,
        "fullcodeline": "assert r.cookies == {}"
    },
    {
        "line": 40,
        "fullcodeline": "assert spawner.ready == (not shutdown_on_logout)"
    },
    {
        "line": 11,
        "fullcodeline": "for i in range(50):"
    },
    {
        "line": 20,
        "fullcodeline": "with mock.patch.dict("
    },
    {
        "line": 33,
        "fullcodeline": "for i in range(50):"
    },
    {
        "line": 14,
        "fullcodeline": "await asyncio.sleep(0.1)"
    },
    {
        "line": 16,
        "fullcodeline": "assert False, \"Spawner still pending\""
    },
    {
        "line": 23,
        "fullcodeline": "r = await async_requests.get("
    },
    {
        "line": 26,
        "fullcodeline": "r.raise_for_status()"
    },
    {
        "line": 36,
        "fullcodeline": "await asyncio.sleep(0.1)"
    },
    {
        "line": 38,
        "fullcodeline": "assert False, \"Spawner still pending\""
    },
    {
        "line": 12,
        "fullcodeline": "if not spawner.pending:"
    },
    {
        "line": 34,
        "fullcodeline": "if not spawner.pending:"
    },
    {
        "line": 21,
        "fullcodeline": "app.tornado_settings, {'shutdown_on_logout': shutdown_on_logout}"
    },
    {
        "line": 24,
        "fullcodeline": "public_host(app) + app.tornado_settings['logout_url'], cookies=cookies"
    }
]