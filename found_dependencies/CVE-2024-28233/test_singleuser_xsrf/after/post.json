[
    {
        "line": 4,
        "fullcodeline": "target_user = user"
    },
    {
        "line": 5,
        "fullcodeline": "target_start = asyncio.ensure_future(target_user.spawn())"
    },
    {
        "line": 7,
        "fullcodeline": "browser_user = create_user_with_scopes(\"self\", \"access:servers\")"
    },
    {
        "line": 9,
        "fullcodeline": "login_url = url_path_join(public_host(app), app.hub.base_url, \"login\")"
    },
    {
        "line": 10,
        "fullcodeline": "await browser.goto(login_url)"
    },
    {
        "line": 11,
        "fullcodeline": "await login(browser, browser_user.name, browser_user.name)"
    },
    {
        "line": 19,
        "fullcodeline": "await browser.goto(public_url(app, target_user))"
    },
    {
        "line": 21,
        "fullcodeline": "auth_button = browser.locator('//input[@type=\"submit\"]')"
    },
    {
        "line": 23,
        "fullcodeline": "await auth_button.click()"
    },
    {
        "line": 29,
        "fullcodeline": "cookies = await browser.context.cookies()"
    },
    {
        "line": 30,
        "fullcodeline": "cookie_dict = _cookie_dict(cookies)"
    },
    {
        "line": 31,
        "fullcodeline": "pprint.pprint(cookie_dict)"
    },
    {
        "line": 34,
        "fullcodeline": "target_prefix = target_user.prefix"
    },
    {
        "line": 35,
        "fullcodeline": "user_prefix = browser_user.prefix"
    },
    {
        "line": 37,
        "fullcodeline": "assert target_prefix in cookie_dict"
    },
    {
        "line": 38,
        "fullcodeline": "assert user_prefix in cookie_dict"
    },
    {
        "line": 39,
        "fullcodeline": "assert hub_prefix in cookie_dict"
    },
    {
        "line": 40,
        "fullcodeline": "target_xsrf = cookie_dict[target_prefix].get(\"_xsrf\", {}).get(\"value\")"
    },
    {
        "line": 41,
        "fullcodeline": "assert target_xsrf"
    },
    {
        "line": 42,
        "fullcodeline": "user_xsrf = cookie_dict[user_prefix].get(\"_xsrf\", {}).get(\"value\")"
    },
    {
        "line": 43,
        "fullcodeline": "assert user_xsrf"
    },
    {
        "line": 44,
        "fullcodeline": "hub_xsrf = cookie_dict[hub_prefix].get(\"_xsrf\", {}).get(\"value\")"
    },
    {
        "line": 45,
        "fullcodeline": "assert hub_xsrf"
    },
    {
        "line": 46,
        "fullcodeline": "assert hub_xsrf != target_xsrf"
    },
    {
        "line": 47,
        "fullcodeline": "assert hub_xsrf != user_xsrf"
    },
    {
        "line": 48,
        "fullcodeline": "assert target_xsrf != user_xsrf"
    },
    {
        "line": 53,
        "fullcodeline": "async def fetch_user_page(path, params=None):"
    },
    {
        "line": 76,
        "fullcodeline": "status = await fetch_user_page(\"/api/contents\")"
    },
    {
        "line": 77,
        "fullcodeline": "assert status == expected_status"
    },
    {
        "line": 78,
        "fullcodeline": "status = await fetch_user_page(\"/api/contents\", params={\"_xsrf\": target_xsrf})"
    },
    {
        "line": 79,
        "fullcodeline": "assert status == expected_status"
    },
    {
        "line": 83,
        "fullcodeline": "status = await fetch_user_page(\"/api/contents\", params={\"_xsrf\": user_xsrf})"
    },
    {
        "line": 84,
        "fullcodeline": "assert status == expected_status"
    },
    {
        "line": 87,
        "fullcodeline": "async def iframe(src):"
    },
    {
        "line": 115,
        "fullcodeline": "hub_iframe = await iframe(url_path_join(public_url(app), \"hub/admin\"))"
    },
    {
        "line": 116,
        "fullcodeline": "assert hub_iframe in {\"timeout\", \"blocked\"}"
    },
    {
        "line": 117,
        "fullcodeline": "user_iframe = await iframe(public_url(app, browser_user))"
    },
    {
        "line": 118,
        "fullcodeline": "assert user_iframe in {\"timeout\", \"blocked\"}"
    },
    {
        "line": 121,
        "fullcodeline": "token = target_user.new_api_token(scopes=[\"access:servers!user\"])"
    },
    {
        "line": 122,
        "fullcodeline": "url = url_path_join(public_url(app, target_user), \"/api/kernels\")"
    },
    {
        "line": 123,
        "fullcodeline": "headers = {\"Authorization\": f\"Bearer {token}\"}"
    },
    {
        "line": 124,
        "fullcodeline": "r = await async_requests.post(url, headers=headers)"
    },
    {
        "line": 125,
        "fullcodeline": "r.raise_for_status()"
    },
    {
        "line": 126,
        "fullcodeline": "kernel = r.json()"
    },
    {
        "line": 127,
        "fullcodeline": "kernel_id = kernel[\"id\"]"
    },
    {
        "line": 128,
        "fullcodeline": "kernel_url = url_path_join(url, kernel_id)"
    },
    {
        "line": 129,
        "fullcodeline": "kernel_ws_url = \"ws\" + url_path_join(kernel_url, \"channels\")[4:]"
    },
    {
        "line": 151,
        "fullcodeline": "assert result == \"ok\""
    },
    {
        "line": 13,
        "fullcodeline": "await expect(browser).to_have_url(re.compile(rf\".*/user/{browser_user.name}/.*\"))"
    },
    {
        "line": 16,
        "fullcodeline": "await app.proxy.add_user(target_user)"
    },
    {
        "line": 20,
        "fullcodeline": "await expect(browser).to_have_url(re.compile(r\".*/oauth2/authorize\"))"
    },
    {
        "line": 22,
        "fullcodeline": "await expect(auth_button).to_be_enabled()"
    },
    {
        "line": 24,
        "fullcodeline": "await expect(browser).to_have_url(re.compile(rf\".*/user/{target_user.name}/.*\"))"
    },
    {
        "line": 81,
        "fullcodeline": "if not app.subdomain_host:"
    },
    {
        "line": 73,
        "fullcodeline": "expected_status = 'error'"
    },
    {
        "line": 75,
        "fullcodeline": "expected_status = 403"
    },
    {
        "line": 82,
        "fullcodeline": "expected_status = 200"
    },
    {
        "line": 131,
        "fullcodeline": "result = await browser.evaluate("
    },
    {
        "line": 149,
        "fullcodeline": "r = await async_requests.delete(kernel_url, headers=headers)"
    },
    {
        "line": 150,
        "fullcodeline": "r.raise_for_status()"
    }
]