[
    {
        "line": 7,
        "fullcodeline": "struct hstate *h = page_hstate(page);"
    },
    {
        "line": 8,
        "fullcodeline": "int nid = page_to_nid(page);"
    },
    {
        "line": 11,
        "fullcodeline": "mapping = (struct address_space *) page_private(page);"
    },
    {
        "line": 12,
        "fullcodeline": "set_page_private(page, 0);"
    },
    {
        "line": 13,
        "fullcodeline": "page->mapping = NULL;"
    },
    {
        "line": 14,
        "fullcodeline": "BUG_ON(page_count(page));"
    },
    {
        "line": 15,
        "fullcodeline": "BUG_ON(page_mapcount(page));"
    },
    {
        "line": 16,
        "fullcodeline": "INIT_LIST_HEAD(&page->lru);"
    },
    {
        "line": 18,
        "fullcodeline": "spin_lock(&hugetlb_lock);"
    },
    {
        "line": 26,
        "fullcodeline": "spin_unlock(&hugetlb_lock);"
    },
    {
        "line": 19,
        "fullcodeline": "if (h->surplus_huge_pages_node[nid] && huge_page_order(h) < MAX_ORDER) {"
    },
    {
        "line": 20,
        "fullcodeline": "update_and_free_page(h, page);"
    },
    {
        "line": 21,
        "fullcodeline": "h->surplus_huge_pages--;"
    },
    {
        "line": 22,
        "fullcodeline": "h->surplus_huge_pages_node[nid]--;"
    },
    {
        "line": 28,
        "fullcodeline": "hugetlb_put_quota(mapping, 1);"
    },
    {
        "line": 24,
        "fullcodeline": "enqueue_huge_page(h, page);"
    }
]