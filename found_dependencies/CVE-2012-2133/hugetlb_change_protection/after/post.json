[
    {
        "line": 4,
        "fullcodeline": "struct mm_struct *mm = vma->vm_mm;"
    },
    {
        "line": 5,
        "fullcodeline": "unsigned long start = address;"
    },
    {
        "line": 8,
        "fullcodeline": "struct hstate *h = hstate_vma(vma);"
    },
    {
        "line": 10,
        "fullcodeline": "BUG_ON(address >= end);"
    },
    {
        "line": 11,
        "fullcodeline": "flush_cache_range(vma, address, end);"
    },
    {
        "line": 14,
        "fullcodeline": "spin_lock(&mm->page_table_lock);"
    },
    {
        "line": 27,
        "fullcodeline": "spin_unlock(&mm->page_table_lock);"
    },
    {
        "line": 28,
        "fullcodeline": "mutex_unlock(&vma->vm_file->f_mapping->i_mmap_mutex);"
    },
    {
        "line": 30,
        "fullcodeline": "flush_tlb_range(vma, start, end);"
    },
    {
        "line": 15,
        "fullcodeline": "for (; address < end; address += huge_page_size(h)) {"
    },
    {
        "line": 16,
        "fullcodeline": "ptep = huge_pte_offset(mm, address);"
    },
    {
        "line": 17,
        "fullcodeline": "if (!ptep)"
    },
    {
        "line": 19,
        "fullcodeline": "if (huge_pmd_unshare(mm, &address, ptep))"
    },
    {
        "line": 21,
        "fullcodeline": "if (!huge_pte_none(huge_ptep_get(ptep))) {"
    },
    {
        "line": 22,
        "fullcodeline": "pte = huge_ptep_get_and_clear(mm, address, ptep);"
    },
    {
        "line": 23,
        "fullcodeline": "pte = pte_mkhuge(pte_modify(pte, newprot));"
    },
    {
        "line": 24,
        "fullcodeline": "set_huge_pte_at(mm, address, ptep, pte);"
    }
]