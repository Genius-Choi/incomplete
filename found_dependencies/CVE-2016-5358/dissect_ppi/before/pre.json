[
    {
        "line": 3,
        "fullcodeline": "proto_tree    *ppi_tree    = NULL, *ppi_flags_tree = NULL, *seg_tree = NULL, *ampdu_tree = NULL;"
    },
    {
        "line": 4,
        "fullcodeline": "proto_tree    *agg_tree    = NULL;"
    },
    {
        "line": 5,
        "fullcodeline": "proto_item    *ti          = NULL;"
    },
    {
        "line": 7,
        "fullcodeline": "int            offset      = 0;"
    },
    {
        "line": 12,
        "fullcodeline": "guint32        n_ext_flags = 0;"
    },
    {
        "line": 13,
        "fullcodeline": "guint32        ampdu_id    = 0;"
    },
    {
        "line": 14,
        "fullcodeline": "fragment_head *fd_head     = NULL;"
    },
    {
        "line": 15,
        "fullcodeline": "fragment_item *ft_fdh      = NULL;"
    },
    {
        "line": 16,
        "fullcodeline": "gint           mpdu_count  = 0;"
    },
    {
        "line": 18,
        "fullcodeline": "gboolean       first_mpdu  = TRUE;"
    },
    {
        "line": 19,
        "fullcodeline": "guint          last_frame  = 0;"
    },
    {
        "line": 20,
        "fullcodeline": "gint len_remain, /*pad_len = 0,*/ ampdu_len = 0;"
    },
    {
        "line": 23,
        "fullcodeline": "col_set_str(pinfo->cinfo, COL_PROTOCOL, \"PPI\");"
    },
    {
        "line": 24,
        "fullcodeline": "col_clear(pinfo->cinfo, COL_INFO);"
    },
    {
        "line": 26,
        "fullcodeline": "version = tvb_get_guint8(tvb, offset);"
    },
    {
        "line": 27,
        "fullcodeline": "flags = tvb_get_guint8(tvb, offset + 1);"
    },
    {
        "line": 29,
        "fullcodeline": "tot_len = tvb_get_letohs(tvb, offset+2);"
    },
    {
        "line": 30,
        "fullcodeline": "dlt = tvb_get_letohl(tvb, offset+4);"
    },
    {
        "line": 32,
        "fullcodeline": "col_add_fstr(pinfo->cinfo, COL_INFO, \"PPI version %u, %u bytes\","
    },
    {
        "line": 57,
        "fullcodeline": "tot_len -= PPI_V0_HEADER_LEN;"
    },
    {
        "line": 58,
        "fullcodeline": "offset += 8;"
    },
    {
        "line": 61,
        "fullcodeline": "memset(&phdr, 0, sizeof(phdr));"
    },
    {
        "line": 62,
        "fullcodeline": "phdr.fcs_len = -1;"
    },
    {
        "line": 63,
        "fullcodeline": "phdr.decrypted = FALSE;"
    },
    {
        "line": 64,
        "fullcodeline": "phdr.datapad = FALSE;"
    },
    {
        "line": 65,
        "fullcodeline": "phdr.phy = PHDR_802_11_PHY_UNKNOWN;"
    },
    {
        "line": 66,
        "fullcodeline": "phdr.presence_flags = 0;"
    },
    {
        "line": 285,
        "fullcodeline": "next_tvb = tvb_new_subset_remaining(tvb, offset);"
    },
    {
        "line": 68,
        "fullcodeline": "while (tot_len > 0) {"
    },
    {
        "line": 184,
        "fullcodeline": "if (ppi_ampdu_reassemble && DOT11N_IS_AGGREGATE(n_ext_flags)) {"
    },
    {
        "line": 297,
        "fullcodeline": "if (dlt == 105) {"
    },
    {
        "line": 37,
        "fullcodeline": "ti = proto_tree_add_protocol_format(tree, proto_ppi,"
    },
    {
        "line": 39,
        "fullcodeline": "ppi_tree = proto_item_add_subtree(ti, ett_ppi_pph);"
    },
    {
        "line": 40,
        "fullcodeline": "proto_tree_add_item(ppi_tree, hf_ppi_head_version,"
    },
    {
        "line": 43,
        "fullcodeline": "ti = proto_tree_add_item(ppi_tree, hf_ppi_head_flags,"
    },
    {
        "line": 45,
        "fullcodeline": "ppi_flags_tree = proto_item_add_subtree(ti, ett_ppi_flags);"
    },
    {
        "line": 46,
        "fullcodeline": "proto_tree_add_item(ppi_flags_tree, hf_ppi_head_flag_alignment,"
    },
    {
        "line": 48,
        "fullcodeline": "proto_tree_add_item(ppi_flags_tree, hf_ppi_head_flag_reserved,"
    },
    {
        "line": 51,
        "fullcodeline": "proto_tree_add_item(ppi_tree, hf_ppi_head_len,"
    },
    {
        "line": 53,
        "fullcodeline": "proto_tree_add_item(ppi_tree, hf_ppi_head_dlt,"
    },
    {
        "line": 69,
        "fullcodeline": "data_type = tvb_get_letohs(tvb, offset);"
    },
    {
        "line": 70,
        "fullcodeline": "data_len = tvb_get_letohs(tvb, offset + 2) + 4;"
    },
    {
        "line": 71,
        "fullcodeline": "tot_len -= data_len;"
    },
    {
        "line": 178,
        "fullcodeline": "offset += data_len;"
    },
    {
        "line": 185,
        "fullcodeline": "len_remain = tvb_captured_length_remaining(tvb, offset);"
    },
    {
        "line": 191,
        "fullcodeline": "pinfo->fragmented = TRUE;"
    },
    {
        "line": 195,
        "fullcodeline": "fd_head = fragment_get(&ampdu_reassembly_table, pinfo, ampdu_id, NULL);"
    },
    {
        "line": 216,
        "fullcodeline": "/*??fd_head = */fragment_add_seq_next(&ampdu_reassembly_table,"
    },
    {
        "line": 218,
        "fullcodeline": "pinfo->fragmented = TRUE;"
    },
    {
        "line": 221,
        "fullcodeline": "fd_head = fragment_get(&ampdu_reassembly_table, pinfo, ampdu_id, NULL);"
    },
    {
        "line": 179,
        "fullcodeline": "if (IS_PPI_FLAG_ALIGN(flags)){"
    },
    {
        "line": 200,
        "fullcodeline": "if (ampdu_len > AGGREGATE_MAX) {"
    },
    {
        "line": 224,
        "fullcodeline": "if (fd_head && tree) {"
    },
    {
        "line": 253,
        "fullcodeline": "if (fd_head && !DOT11N_MORE_AGGREGATES(n_ext_flags)) {"
    },
    {
        "line": 302,
        "fullcodeline": "dissector_try_uint(wtap_encap_dissector_table,"
    },
    {
        "line": 76,
        "fullcodeline": "dissect_80211_common(tvb, pinfo, ppi_tree, offset, data_len, &phdr);"
    },
    {
        "line": 80,
        "fullcodeline": "dissect_80211n_mac(tvb, pinfo, ppi_tree, offset, data_len,"
    },
    {
        "line": 85,
        "fullcodeline": "dissect_80211n_mac_phy(tvb, pinfo, ppi_tree, offset,"
    },
    {
        "line": 90,
        "fullcodeline": "ADD_BASIC_TAG(hf_spectrum_map);"
    },
    {
        "line": 94,
        "fullcodeline": "ADD_BASIC_TAG(hf_process_info);"
    },
    {
        "line": 98,
        "fullcodeline": "ADD_BASIC_TAG(hf_capture_info);"
    },
    {
        "line": 102,
        "fullcodeline": "dissect_aggregation_extension(tvb, pinfo, ppi_tree, offset, data_len);"
    },
    {
        "line": 106,
        "fullcodeline": "dissect_8023_extension(tvb, pinfo, ppi_tree, offset, data_len);"
    },
    {
        "line": 175,
        "fullcodeline": "proto_tree_add_item(ppi_tree, hf_ppi_reserved, tvb, offset, data_len, ENC_NA);"
    },
    {
        "line": 180,
        "fullcodeline": "offset += PADDING4(offset);"
    },
    {
        "line": 197,
        "fullcodeline": "ampdu_len += fd_head->len + PADDING4(fd_head->len) + 4;"
    },
    {
        "line": 198,
        "fullcodeline": "fd_head = fd_head->next;"
    },
    {
        "line": 225,
        "fullcodeline": "ft_fdh = fd_head;"
    },
    {
        "line": 227,
        "fullcodeline": "seg_tree = proto_tree_add_subtree_format(ppi_tree, tvb, offset, -1,"
    },
    {
        "line": 229,
        "fullcodeline": "PROTO_ITEM_SET_GENERATED(ti);"
    },
    {
        "line": 274,
        "fullcodeline": "proto_tree_add_uint(seg_tree, hf_ampdu_count, tvb, 0, 0, mpdu_count);"
    },
    {
        "line": 303,
        "fullcodeline": "wtap_pcap_encap_to_wtap_encap(dlt), next_tvb, pinfo, tree);"
    },
    {
        "line": 110,
        "fullcodeline": "if (ppi_gps_handle == NULL)"
    },
    {
        "line": 123,
        "fullcodeline": "if (ppi_vector_handle == NULL)"
    },
    {
        "line": 136,
        "fullcodeline": "if (ppi_sensor_handle == NULL)"
    },
    {
        "line": 149,
        "fullcodeline": "if (ppi_antenna_handle == NULL)"
    },
    {
        "line": 162,
        "fullcodeline": "if (ppi_fnet_handle == NULL)"
    },
    {
        "line": 248,
        "fullcodeline": "if (last_frame && last_frame != pinfo->fd->num)"
    },
    {
        "line": 277,
        "fullcodeline": "next_tvb = tvb_new_subset_remaining(tvb, offset);"
    },
    {
        "line": 278,
        "fullcodeline": "col_set_str(pinfo->cinfo, COL_PROTOCOL, \"IEEE 802.11n\");"
    },
    {
        "line": 279,
        "fullcodeline": "col_set_str(pinfo->cinfo, COL_INFO, \"Unreassembled A-MPDU data\");"
    },
    {
        "line": 280,
        "fullcodeline": "call_dissector(data_handle, next_tvb, pinfo, tree);"
    },
    {
        "line": 112,
        "fullcodeline": "proto_tree_add_item(ppi_tree, hf_ppi_gps, tvb, offset, data_len, ENC_NA);"
    },
    {
        "line": 125,
        "fullcodeline": "proto_tree_add_item(ppi_tree, hf_ppi_vector, tvb, offset, data_len, ENC_NA);"
    },
    {
        "line": 138,
        "fullcodeline": "proto_tree_add_item(ppi_tree, hf_ppi_harris, tvb, offset, data_len, ENC_NA);"
    },
    {
        "line": 151,
        "fullcodeline": "proto_tree_add_item(ppi_tree, hf_ppi_antenna, tvb, offset, data_len, ENC_NA);"
    },
    {
        "line": 164,
        "fullcodeline": "proto_tree_add_item(ppi_tree, hf_ppi_fnet, tvb, offset, data_len, ENC_NA);"
    },
    {
        "line": 202,
        "fullcodeline": "proto_tree_add_expert_format(ppi_tree, pinfo, &ei_ppi_invalid_length, tvb, offset, -1, \"Aggregate length greater than maximum (%u)\", AGGREGATE_MAX);"
    },
    {
        "line": 203,
        "fullcodeline": "THROW(ReportedBoundsError);"
    },
    {
        "line": 246,
        "fullcodeline": "ft_fdh = ft_fdh->next;"
    },
    {
        "line": 249,
        "fullcodeline": "proto_tree_add_uint(seg_tree, hf_ampdu_reassembled_in,"
    },
    {
        "line": 255,
        "fullcodeline": "ti = proto_tree_add_protocol_format(tree,"
    },
    {
        "line": 258,
        "fullcodeline": "agg_tree = proto_item_add_subtree(ti, ett_ampdu);"
    },
    {
        "line": 272,
        "fullcodeline": "fd_head = fd_head->next;"
    },
    {
        "line": 117,
        "fullcodeline": "next_tvb = tvb_new_subset(tvb, offset + 4, data_len - 4 , -1);"
    },
    {
        "line": 118,
        "fullcodeline": "call_dissector(ppi_gps_handle, next_tvb, pinfo, ppi_tree);"
    },
    {
        "line": 130,
        "fullcodeline": "next_tvb = tvb_new_subset(tvb, offset + 4, data_len - 4 , -1);"
    },
    {
        "line": 131,
        "fullcodeline": "call_dissector(ppi_vector_handle, next_tvb, pinfo, ppi_tree);"
    },
    {
        "line": 143,
        "fullcodeline": "next_tvb = tvb_new_subset(tvb, offset + 4, data_len - 4 , -1);"
    },
    {
        "line": 144,
        "fullcodeline": "call_dissector(ppi_sensor_handle, next_tvb, pinfo, ppi_tree);"
    },
    {
        "line": 156,
        "fullcodeline": "next_tvb = tvb_new_subset(tvb, offset + 4, data_len - 4 , -1);"
    },
    {
        "line": 157,
        "fullcodeline": "call_dissector(ppi_antenna_handle, next_tvb, pinfo, ppi_tree);"
    },
    {
        "line": 169,
        "fullcodeline": "next_tvb = tvb_new_subset(tvb, offset + 4, data_len - 4 , -1);"
    },
    {
        "line": 170,
        "fullcodeline": "call_dissector(ppi_fnet_handle, next_tvb, pinfo, ppi_tree);"
    },
    {
        "line": 232,
        "fullcodeline": "if (ft_fdh->tvb_data && ft_fdh->len) {"
    },
    {
        "line": 262,
        "fullcodeline": "if (fd_head->tvb_data && fd_head->len) {"
    },
    {
        "line": 233,
        "fullcodeline": "last_frame = ft_fdh->frame;"
    },
    {
        "line": 236,
        "fullcodeline": "first_mpdu = FALSE;"
    },
    {
        "line": 237,
        "fullcodeline": "proto_item_append_text(ti, \" #%u(%u)\","
    },
    {
        "line": 239,
        "fullcodeline": "proto_tree_add_uint_format(seg_tree, hf_ampdu_segment,"
    },
    {
        "line": 256,
        "fullcodeline": "proto_get_id_by_filter_name(\"wlan_aggregate\"),"
    },
    {
        "line": 263,
        "fullcodeline": "mpdu_count++;"
    },
    {
        "line": 264,
        "fullcodeline": "mpdu_str = wmem_strdup_printf(wmem_packet_scope(), \"MPDU #%d\", mpdu_count);"
    },
    {
        "line": 266,
        "fullcodeline": "next_tvb = tvb_new_chain(tvb, fd_head->tvb_data);"
    },
    {
        "line": 267,
        "fullcodeline": "add_new_data_source(pinfo, next_tvb, mpdu_str);"
    },
    {
        "line": 269,
        "fullcodeline": "ampdu_tree = proto_tree_add_subtree(agg_tree, next_tvb, 0, -1, ett_ampdu_segment, NULL, mpdu_str);"
    },
    {
        "line": 270,
        "fullcodeline": "call_dissector_with_data(ieee80211_radio_handle, next_tvb, pinfo, ampdu_tree, &phdr);"
    },
    {
        "line": 244,
        "fullcodeline": "plurality(ft_fdh->len, \"\", \"s\"));"
    },
    {
        "line": 235,
        "fullcodeline": "proto_item_append_text(ti, \",\");"
    }
]