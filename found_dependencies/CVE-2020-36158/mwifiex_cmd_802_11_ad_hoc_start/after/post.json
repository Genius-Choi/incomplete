[
    {
        "line": 5,
        "fullcodeline": "int rsn_ie_len = 0;"
    },
    {
        "line": 6,
        "fullcodeline": "struct mwifiex_adapter *adapter = priv->adapter;"
    },
    {
        "line": 10,
        "fullcodeline": "u32 cmd_append_size = 0;"
    },
    {
        "line": 18,
        "fullcodeline": "u8 *pos = (u8 *) adhoc_start +"
    },
    {
        "line": 24,
        "fullcodeline": "cmd->command = cpu_to_le16(HostCmd_CMD_802_11_AD_HOC_START);"
    },
    {
        "line": 27,
        "fullcodeline": "priv->attempted_bss_desc = bss_desc;"
    },
    {
        "line": 39,
        "fullcodeline": "memset(adhoc_start->ssid, 0, IEEE80211_MAX_SSID_LEN);"
    },
    {
        "line": 43,
        "fullcodeline": "memcpy(adhoc_start->ssid, req_ssid->ssid, req_ssid->ssid_len);"
    },
    {
        "line": 45,
        "fullcodeline": "mwifiex_dbg(adapter, INFO, \"info: ADHOC_S_CMD: SSID = %s\\n\","
    },
    {
        "line": 48,
        "fullcodeline": "memset(bss_desc->ssid.ssid, 0, IEEE80211_MAX_SSID_LEN);"
    },
    {
        "line": 49,
        "fullcodeline": "memcpy(bss_desc->ssid.ssid, req_ssid->ssid, req_ssid->ssid_len);"
    },
    {
        "line": 51,
        "fullcodeline": "bss_desc->ssid.ssid_len = req_ssid->ssid_len;"
    },
    {
        "line": 54,
        "fullcodeline": "adhoc_start->bss_mode = HostCmd_BSS_MODE_IBSS;"
    },
    {
        "line": 55,
        "fullcodeline": "bss_desc->bss_mode = NL80211_IFTYPE_ADHOC;"
    },
    {
        "line": 56,
        "fullcodeline": "adhoc_start->beacon_period = cpu_to_le16(priv->beacon_period);"
    },
    {
        "line": 57,
        "fullcodeline": "bss_desc->beacon_period = priv->beacon_period;"
    },
    {
        "line": 65,
        "fullcodeline": "adhoc_start->phy_param_set.ds_param_set.element_id = DS_PARA_IE_ID;"
    },
    {
        "line": 66,
        "fullcodeline": "adhoc_start->phy_param_set.ds_param_set.len = DS_PARA_IE_LEN;"
    },
    {
        "line": 83,
        "fullcodeline": "mwifiex_dbg(adapter, INFO,"
    },
    {
        "line": 87,
        "fullcodeline": "priv->curr_bss_params.bss_descriptor.channel = priv->adhoc_channel;"
    },
    {
        "line": 88,
        "fullcodeline": "priv->curr_bss_params.band = adapter->adhoc_start_band;"
    },
    {
        "line": 90,
        "fullcodeline": "bss_desc->channel = priv->adhoc_channel;"
    },
    {
        "line": 91,
        "fullcodeline": "adhoc_start->phy_param_set.ds_param_set.current_chan ="
    },
    {
        "line": 94,
        "fullcodeline": "memcpy(&bss_desc->phy_param_set, &adhoc_start->phy_param_set,"
    },
    {
        "line": 103,
        "fullcodeline": "adhoc_start->ss_param_set.ibss_param_set.element_id = IBSS_PARA_IE_ID;"
    },
    {
        "line": 104,
        "fullcodeline": "adhoc_start->ss_param_set.ibss_param_set.len = IBSS_PARA_IE_LEN;"
    },
    {
        "line": 105,
        "fullcodeline": "adhoc_start->ss_param_set.ibss_param_set.atim_window"
    },
    {
        "line": 107,
        "fullcodeline": "memcpy(&bss_desc->ss_param_set, &adhoc_start->ss_param_set,"
    },
    {
        "line": 111,
        "fullcodeline": "bss_desc->cap_info_bitmap |= WLAN_CAPABILITY_IBSS;"
    },
    {
        "line": 112,
        "fullcodeline": "tmp_cap = WLAN_CAPABILITY_IBSS;"
    },
    {
        "line": 128,
        "fullcodeline": "memset(adhoc_start->data_rate, 0, sizeof(adhoc_start->data_rate));"
    },
    {
        "line": 129,
        "fullcodeline": "mwifiex_get_active_data_rates(priv, adhoc_start->data_rate);"
    },
    {
        "line": 145,
        "fullcodeline": "priv->curr_bss_params.num_of_rates = i;"
    },
    {
        "line": 148,
        "fullcodeline": "memcpy(&priv->curr_bss_params.data_rates,"
    },
    {
        "line": 151,
        "fullcodeline": "mwifiex_dbg(adapter, INFO, \"info: ADHOC_S_CMD: rates=%4ph\\n\","
    },
    {
        "line": 154,
        "fullcodeline": "mwifiex_dbg(adapter, INFO, \"info: ADHOC_S_CMD: AD-HOC Start command is ready\\n\");"
    },
    {
        "line": 194,
        "fullcodeline": "cmd_append_size += mwifiex_cmd_append_vsie_tlv(priv,"
    },
    {
        "line": 250,
        "fullcodeline": "cmd->size ="
    },
    {
        "line": 259,
        "fullcodeline": "adhoc_start->cap_info_bitmap = cpu_to_le16(tmp_cap);"
    },
    {
        "line": 21,
        "fullcodeline": "if (!adapter)"
    },
    {
        "line": 41,
        "fullcodeline": "if (req_ssid->ssid_len > IEEE80211_MAX_SSID_LEN)"
    },
    {
        "line": 68,
        "fullcodeline": "if (!mwifiex_get_cfp(priv, adapter->adhoc_start_band,"
    },
    {
        "line": 77,
        "fullcodeline": "if (!priv->adhoc_channel) {"
    },
    {
        "line": 106,
        "fullcodeline": "= cpu_to_le16(priv->atim_window);"
    },
    {
        "line": 130,
        "fullcodeline": "if ((adapter->adhoc_start_band & BAND_G) &&"
    },
    {
        "line": 141,
        "fullcodeline": "for (i = 0; i < sizeof(adhoc_start->data_rate); i++)"
    },
    {
        "line": 156,
        "fullcodeline": "if (IS_SUPPORT_MULTI_BANDS(adapter)) {"
    },
    {
        "line": 251,
        "fullcodeline": "cpu_to_le16((u16)(sizeof(struct host_cmd_ds_802_11_ad_hoc_start)"
    },
    {
        "line": 254,
        "fullcodeline": "if (adapter->adhoc_start_band == BAND_B)"
    },
    {
        "line": 42,
        "fullcodeline": "req_ssid->ssid_len = IEEE80211_MAX_SSID_LEN;"
    },
    {
        "line": 71,
        "fullcodeline": "cfp = mwifiex_get_cfp(priv, adapter->adhoc_start_band,"
    },
    {
        "line": 78,
        "fullcodeline": "mwifiex_dbg(adapter, ERROR,"
    },
    {
        "line": 117,
        "fullcodeline": "mwifiex_dbg(adapter, INFO,"
    },
    {
        "line": 119,
        "fullcodeline": "bss_desc->privacy = MWIFIEX_802_11_PRIV_FILTER_8021X_WEP;"
    },
    {
        "line": 120,
        "fullcodeline": "tmp_cap |= WLAN_CAPABILITY_PRIVACY;"
    },
    {
        "line": 131,
        "fullcodeline": "(priv->curr_pkt_filter & HostCmd_ACT_MAC_ADHOC_G_PROTECTION_ON)) {"
    },
    {
        "line": 158,
        "fullcodeline": "chan_tlv = (struct mwifiex_ie_types_chan_list_param_set *) pos;"
    },
    {
        "line": 159,
        "fullcodeline": "chan_tlv->header.type = cpu_to_le16(TLV_TYPE_CHANLIST);"
    },
    {
        "line": 163,
        "fullcodeline": "memset(chan_tlv->chan_scan_param, 0x00,"
    },
    {
        "line": 168,
        "fullcodeline": "mwifiex_dbg(adapter, INFO, \"info: ADHOC_S_CMD: TLV Chan = %d\\n\","
    },
    {
        "line": 171,
        "fullcodeline": "chan_tlv->chan_scan_param[0].radio_type"
    },
    {
        "line": 184,
        "fullcodeline": "mwifiex_dbg(adapter, INFO, \"info: ADHOC_S_CMD: TLV Band = %d\\n\","
    },
    {
        "line": 186,
        "fullcodeline": "pos += sizeof(chan_tlv->header) +"
    },
    {
        "line": 188,
        "fullcodeline": "cmd_append_size +="
    },
    {
        "line": 198,
        "fullcodeline": "rsn_ie_len = mwifiex_append_rsn_ie_wpa_wpa2(priv, &pos);"
    },
    {
        "line": 201,
        "fullcodeline": "cmd_append_size += rsn_ie_len;"
    },
    {
        "line": 206,
        "fullcodeline": "ht_cap = (struct mwifiex_ie_types_htcap *) pos;"
    },
    {
        "line": 207,
        "fullcodeline": "memset(ht_cap, 0, sizeof(struct mwifiex_ie_types_htcap));"
    },
    {
        "line": 208,
        "fullcodeline": "ht_cap->header.type = cpu_to_le16(WLAN_EID_HT_CAPABILITY);"
    },
    {
        "line": 211,
        "fullcodeline": "radio_type = mwifiex_band_to_radio_type("
    },
    {
        "line": 213,
        "fullcodeline": "mwifiex_fill_cap_info(priv, radio_type, &ht_cap->ht_cap);"
    },
    {
        "line": 225,
        "fullcodeline": "pos += sizeof(struct mwifiex_ie_types_htcap);"
    },
    {
        "line": 226,
        "fullcodeline": "cmd_append_size += sizeof(struct mwifiex_ie_types_htcap);"
    },
    {
        "line": 229,
        "fullcodeline": "ht_info = (struct mwifiex_ie_types_htinfo *) pos;"
    },
    {
        "line": 230,
        "fullcodeline": "memset(ht_info, 0, sizeof(struct mwifiex_ie_types_htinfo));"
    },
    {
        "line": 231,
        "fullcodeline": "ht_info->header.type = cpu_to_le16(WLAN_EID_HT_OPERATION);"
    },
    {
        "line": 242,
        "fullcodeline": "ht_info->ht_oper.operation_mode ="
    },
    {
        "line": 244,
        "fullcodeline": "ht_info->ht_oper.basic_set[0] = 0xff;"
    },
    {
        "line": 245,
        "fullcodeline": "pos += sizeof(struct mwifiex_ie_types_htinfo);"
    },
    {
        "line": 246,
        "fullcodeline": "cmd_append_size +="
    },
    {
        "line": 255,
        "fullcodeline": "tmp_cap &= ~WLAN_CAPABILITY_SHORT_SLOT_TIME;"
    },
    {
        "line": 22,
        "fullcodeline": "return -1;"
    },
    {
        "line": 69,
        "fullcodeline": "(u16) priv->adhoc_channel, 0)) {"
    },
    {
        "line": 80,
        "fullcodeline": "return -1;"
    },
    {
        "line": 122,
        "fullcodeline": "mwifiex_dbg(adapter, INFO,"
    },
    {
        "line": 125,
        "fullcodeline": "bss_desc->privacy = MWIFIEX_802_11_PRIV_FILTER_ACCEPT_ALL;"
    },
    {
        "line": 132,
        "fullcodeline": "if (mwifiex_send_cmd(priv, HostCmd_CMD_MAC_CONTROL,"
    },
    {
        "line": 173,
        "fullcodeline": "if (adapter->adhoc_start_band & BAND_GN ||"
    },
    {
        "line": 199,
        "fullcodeline": "if (rsn_ie_len == -1)"
    },
    {
        "line": 215,
        "fullcodeline": "if (adapter->sec_chan_offset =="
    },
    {
        "line": 243,
        "fullcodeline": "cpu_to_le16(IEEE80211_HT_OP_MODE_NON_GF_STA_PRSNT);"
    },
    {
        "line": 257,
        "fullcodeline": "tmp_cap |= WLAN_CAPABILITY_SHORT_SLOT_TIME;"
    },
    {
        "line": 74,
        "fullcodeline": "priv->adhoc_channel = (u8) cfp->channel;"
    },
    {
        "line": 135,
        "fullcodeline": "mwifiex_dbg(adapter, ERROR,"
    },
    {
        "line": 174,
        "fullcodeline": "adapter->adhoc_start_band & BAND_AN) {"
    },
    {
        "line": 219,
        "fullcodeline": "tmp_ht_cap = le16_to_cpu(ht_cap->ht_cap.cap_info);"
    },
    {
        "line": 220,
        "fullcodeline": "tmp_ht_cap &= ~IEEE80211_HT_CAP_SUP_WIDTH_20_40;"
    },
    {
        "line": 221,
        "fullcodeline": "tmp_ht_cap &= ~IEEE80211_HT_CAP_SGI_40;"
    },
    {
        "line": 222,
        "fullcodeline": "ht_cap->ht_cap.cap_info = cpu_to_le16(tmp_ht_cap);"
    },
    {
        "line": 238,
        "fullcodeline": "ht_info->ht_oper.ht_param = adapter->sec_chan_offset;"
    },
    {
        "line": 239,
        "fullcodeline": "ht_info->ht_oper.ht_param |="
    },
    {
        "line": 137,
        "fullcodeline": "return -1;"
    },
    {
        "line": 175,
        "fullcodeline": "if (adapter->sec_chan_offset =="
    },
    {
        "line": 200,
        "fullcodeline": "return -1;"
    },
    {
        "line": 177,
        "fullcodeline": "chan_tlv->chan_scan_param[0].radio_type |="
    },
    {
        "line": 178,
        "fullcodeline": "(IEEE80211_HT_PARAM_CHA_SEC_ABOVE << 4);"
    },
    {
        "line": 179,
        "fullcodeline": "else if (adapter->sec_chan_offset =="
    },
    {
        "line": 181,
        "fullcodeline": "chan_tlv->chan_scan_param[0].radio_type |="
    },
    {
        "line": 182,
        "fullcodeline": "(IEEE80211_HT_PARAM_CHA_SEC_BELOW << 4);"
    }
]