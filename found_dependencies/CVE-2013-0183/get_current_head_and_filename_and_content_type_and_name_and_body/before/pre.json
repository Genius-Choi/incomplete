[
    {
        "line": 2,
        "fullcodeline": "head = nil"
    },
    {
        "line": 3,
        "fullcodeline": "body = ''"
    },
    {
        "line": 4,
        "fullcodeline": "filename = content_type = name = nil"
    },
    {
        "line": 5,
        "fullcodeline": "content = nil"
    },
    {
        "line": 7,
        "fullcodeline": "until head && @buf =~ rx"
    },
    {
        "line": 38,
        "fullcodeline": "[head, filename, content_type, name, body]"
    },
    {
        "line": 31,
        "fullcodeline": "content = @io.read(BUFSIZE < @content_length ? BUFSIZE : @content_length)"
    },
    {
        "line": 34,
        "fullcodeline": "@buf << content"
    },
    {
        "line": 35,
        "fullcodeline": "@content_length -= content.size"
    },
    {
        "line": 8,
        "fullcodeline": "if !head && i = @buf.index(EOL+EOL)"
    },
    {
        "line": 27,
        "fullcodeline": "if head && (@boundary_size+4 < @buf.size)"
    },
    {
        "line": 32,
        "fullcodeline": "raise EOFError, \"bad content body\"  if content.nil? || content.empty?"
    },
    {
        "line": 9,
        "fullcodeline": "head = @buf.slice!(0, i+2) # First \\r\\n"
    },
    {
        "line": 11,
        "fullcodeline": "@buf.slice!(0, 2)          # Second \\r\\n"
    },
    {
        "line": 13,
        "fullcodeline": "content_type = head[MULTIPART_CONTENT_TYPE, 1]"
    },
    {
        "line": 14,
        "fullcodeline": "name = head[MULTIPART_CONTENT_DISPOSITION, 1] || head[MULTIPART_CONTENT_ID, 1]"
    },
    {
        "line": 16,
        "fullcodeline": "filename = get_filename(head)"
    },
    {
        "line": 28,
        "fullcodeline": "body << @buf.slice!(0, @buf.size - (@boundary_size+4))"
    },
    {
        "line": 19,
        "fullcodeline": "body = Tempfile.new(\"RackMultipart\")"
    },
    {
        "line": 20,
        "fullcodeline": "body.binmode  if body.respond_to?(:binmode)"
    }
]