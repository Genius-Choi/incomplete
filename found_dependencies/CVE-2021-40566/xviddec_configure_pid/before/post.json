[
    {
        "line": 6,
        "fullcodeline": "Bool is_first = GF_FALSE;"
    },
    {
        "line": 14,
        "fullcodeline": "GF_XVIDCtx *ctx = gf_filter_get_udta(filter);"
    },
    {
        "line": 27,
        "fullcodeline": "ctx->ipid = pid;"
    },
    {
        "line": 34,
        "fullcodeline": "gf_filter_pid_copy_properties(ctx->opid, ctx->ipid);"
    },
    {
        "line": 35,
        "fullcodeline": "gf_filter_pid_set_property(ctx->opid, GF_PROP_PID_CODECID, &PROP_UINT(GF_CODECID_RAW) );"
    },
    {
        "line": 37,
        "fullcodeline": "p = gf_filter_pid_get_property(pid, GF_PROP_PID_DECODER_CONFIG);"
    },
    {
        "line": 55,
        "fullcodeline": "e = gf_m4v_get_config(p->value.data.ptr, p->value.data.size, &dsi);"
    },
    {
        "line": 59,
        "fullcodeline": "memset(&par, 0, sizeof(par));"
    },
    {
        "line": 60,
        "fullcodeline": "par.width = dsi.width;"
    },
    {
        "line": 61,
        "fullcodeline": "par.height = dsi.height;"
    },
    {
        "line": 63,
        "fullcodeline": "ctx->FPS = dsi.clock_rate;"
    },
    {
        "line": 64,
        "fullcodeline": "ctx->FPS /= 1000;"
    },
    {
        "line": 66,
        "fullcodeline": "ctx->pixel_ar.num = dsi.par_num;"
    },
    {
        "line": 67,
        "fullcodeline": "ctx->pixel_ar.den = dsi.par_den;"
    },
    {
        "line": 70,
        "fullcodeline": "par.version = XVID_VERSION;"
    },
    {
        "line": 75,
        "fullcodeline": "ctx->width = par.width;"
    },
    {
        "line": 76,
        "fullcodeline": "ctx->height = par.height;"
    },
    {
        "line": 77,
        "fullcodeline": "ctx->codec = par.handle;"
    },
    {
        "line": 80,
        "fullcodeline": "memset(&frame, 0, sizeof(frame));"
    },
    {
        "line": 81,
        "fullcodeline": "frame.bitstream = (void *) p->value.data.ptr;"
    },
    {
        "line": 82,
        "fullcodeline": "frame.length = p->value.data.size;"
    },
    {
        "line": 84,
        "fullcodeline": "frame.version = XVID_VERSION;"
    },
    {
        "line": 85,
        "fullcodeline": "xvid_decore(ctx->codec, XVID_DEC_DECODE, &frame, NULL);"
    },
    {
        "line": 91,
        "fullcodeline": "ctx->first_frame = GF_TRUE;"
    },
    {
        "line": 92,
        "fullcodeline": "ctx->out_size = ctx->width * ctx->height * 3 / 2;"
    },
    {
        "line": 94,
        "fullcodeline": "gf_filter_pid_set_property(ctx->opid, GF_PROP_PID_WIDTH, &PROP_UINT(ctx->width) );"
    },
    {
        "line": 95,
        "fullcodeline": "gf_filter_pid_set_property(ctx->opid, GF_PROP_PID_HEIGHT, &PROP_UINT(ctx->height) );"
    },
    {
        "line": 96,
        "fullcodeline": "gf_filter_pid_set_property(ctx->opid, GF_PROP_PID_STRIDE, &PROP_UINT(ctx->width) );"
    },
    {
        "line": 97,
        "fullcodeline": "gf_filter_pid_set_property(ctx->opid, GF_PROP_PID_PAR, &PROP_FRAC(ctx->pixel_ar) );"
    },
    {
        "line": 98,
        "fullcodeline": "gf_filter_pid_set_property(ctx->opid, GF_PROP_PID_PIXFMT, &PROP_UINT(GF_PIXEL_YUV) );"
    },
    {
        "line": 24,
        "fullcodeline": "if (! gf_filter_pid_check_caps(pid))"
    },
    {
        "line": 28,
        "fullcodeline": "if (!ctx->opid) {"
    },
    {
        "line": 38,
        "fullcodeline": "if (p && p->value.data.ptr && p->value.data.size) {"
    },
    {
        "line": 57,
        "fullcodeline": "if (!dsi.width || !dsi.height) return GF_NON_COMPLIANT_BITSTREAM;"
    },
    {
        "line": 65,
        "fullcodeline": "if (!ctx->FPS) ctx->FPS = 30.0f;"
    },
    {
        "line": 73,
        "fullcodeline": "if (xvid_decore(NULL, XVID_DEC_CREATE, &par, NULL) < 0) return GF_NON_COMPLIANT_BITSTREAM;"
    },
    {
        "line": 21,
        "fullcodeline": "ctx->ipid = NULL;"
    },
    {
        "line": 29,
        "fullcodeline": "ctx->opid = gf_filter_pid_new(filter);"
    },
    {
        "line": 30,
        "fullcodeline": "gf_filter_pid_set_framing_mode(ctx->ipid, GF_TRUE);"
    },
    {
        "line": 31,
        "fullcodeline": "is_first = GF_TRUE;"
    },
    {
        "line": 39,
        "fullcodeline": "u32 ex_crc = gf_crc_32(p->value.data.ptr, p->value.data.size);"
    },
    {
        "line": 44,
        "fullcodeline": "ctx->codec = NULL;"
    },
    {
        "line": 46,
        "fullcodeline": "ctx->cfg_crc = ex_crc;"
    },
    {
        "line": 40,
        "fullcodeline": "if (ctx->cfg_crc == ex_crc) return GF_OK;"
    },
    {
        "line": 18,
        "fullcodeline": "gf_filter_pid_remove(ctx->opid);"
    },
    {
        "line": 19,
        "fullcodeline": "ctx->opid = NULL;"
    },
    {
        "line": 43,
        "fullcodeline": "if (ctx->codec) xvid_decore(ctx->codec, XVID_DEC_DESTROY, NULL, NULL);"
    },
    {
        "line": 47,
        "fullcodeline": "} else if (!is_first) {"
    },
    {
        "line": 48,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_CODEC, (\"[XVID] Reconfiguring without DSI not yet supported\\n\"));"
    }
]