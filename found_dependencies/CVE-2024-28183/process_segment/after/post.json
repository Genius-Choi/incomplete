[
    {
        "line": 6,
        "fullcodeline": "err = bootloader_flash_read(flash_addr, header, sizeof(esp_image_segment_header_t), true);"
    },
    {
        "line": 15,
        "fullcodeline": "intptr_t load_addr = header->load_addr;"
    },
    {
        "line": 16,
        "fullcodeline": "uint32_t data_len = header->data_len;"
    },
    {
        "line": 17,
        "fullcodeline": "uint32_t data_addr = flash_addr + sizeof(esp_image_segment_header_t);"
    },
    {
        "line": 19,
        "fullcodeline": "ESP_LOGV(TAG, \"segment data length 0x%x data starts 0x%x\", data_len, data_addr);"
    },
    {
        "line": 21,
        "fullcodeline": "CHECK_ERR(verify_segment_header(index, header, data_addr, silent));"
    },
    {
        "line": 27,
        "fullcodeline": "bool is_mapping = should_map(load_addr);"
    },
    {
        "line": 28,
        "fullcodeline": "do_load = do_load && should_load(load_addr);"
    },
    {
        "line": 47,
        "fullcodeline": "uint32_t free_page_count = bootloader_mmap_get_free_pages();"
    },
    {
        "line": 48,
        "fullcodeline": "ESP_LOGD(TAG, \"free data page_count 0x%08x\", free_page_count);"
    },
    {
        "line": 50,
        "fullcodeline": "uint32_t data_len_remain = data_len;"
    },
    {
        "line": 7,
        "fullcodeline": "if (err != ESP_OK) {"
    },
    {
        "line": 11,
        "fullcodeline": "if (sha_handle != NULL) {"
    },
    {
        "line": 23,
        "fullcodeline": "if (data_len % 4 != 0) {"
    },
    {
        "line": 30,
        "fullcodeline": "if (!silent) {"
    },
    {
        "line": 51,
        "fullcodeline": "while (data_len_remain > 0) {"
    },
    {
        "line": 8,
        "fullcodeline": "ESP_LOGE(TAG, \"bootloader_flash_read failed at 0x%08x\", flash_addr);"
    },
    {
        "line": 12,
        "fullcodeline": "bootloader_sha256_data(sha_handle, header, sizeof(esp_image_segment_header_t));"
    },
    {
        "line": 24,
        "fullcodeline": "FAIL_LOAD(\"unaligned segment length 0x%x\", data_len);"
    },
    {
        "line": 31,
        "fullcodeline": "ESP_LOGI(TAG, \"segment %d: paddr=%08x vaddr=%08x size=%05xh (%6d) %s\","
    },
    {
        "line": 56,
        "fullcodeline": "uint32_t offset_page = ((data_addr & MMAP_ALIGNED_MASK) != 0) ? 1 : 0;"
    },
    {
        "line": 58,
        "fullcodeline": "data_len = MIN(data_len_remain, ((free_page_count - offset_page) * SPI_FLASH_MMU_PAGE_SIZE));"
    },
    {
        "line": 59,
        "fullcodeline": "CHECK_ERR(process_segment_data(index, load_addr, data_addr, data_len, do_load, sha_handle, checksum, metadata));"
    },
    {
        "line": 60,
        "fullcodeline": "data_addr += data_len;"
    },
    {
        "line": 61,
        "fullcodeline": "data_len_remain -= data_len;"
    },
    {
        "line": 34,
        "fullcodeline": "(do_load) ? \"load\" : (is_mapping) ? \"map\" : \"\");"
    }
]