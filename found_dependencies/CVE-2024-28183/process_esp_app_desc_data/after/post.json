[
    {
        "line": 14,
        "fullcodeline": "uint32_t data_buffer[2];"
    },
    {
        "line": 15,
        "fullcodeline": "memcpy(data_buffer, src, sizeof(data_buffer));"
    },
    {
        "line": 16,
        "fullcodeline": "assert(data_buffer[0] == ESP_APP_DESC_MAGIC_WORD);"
    },
    {
        "line": 17,
        "fullcodeline": "metadata->secure_version = data_buffer[1];"
    },
    {
        "line": 24,
        "fullcodeline": "ESP_FAULT_ASSERT(memcmp(data_buffer, src, sizeof(data_buffer)) == 0);"
    },
    {
        "line": 25,
        "fullcodeline": "ESP_FAULT_ASSERT(memcmp(&metadata->secure_version, &src[1], sizeof(uint32_t)) == 0);"
    },
    {
        "line": 18,
        "fullcodeline": "if (checksum != NULL) {"
    },
    {
        "line": 21,
        "fullcodeline": "if (sha_handle != NULL) {"
    },
    {
        "line": 19,
        "fullcodeline": "*checksum ^= data_buffer[0] ^ data_buffer[1];"
    },
    {
        "line": 22,
        "fullcodeline": "bootloader_sha256_data(sha_handle, data_buffer, sizeof(data_buffer));"
    }
]