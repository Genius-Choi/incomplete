[
    {
        "line": 2,
        "fullcodeline": "{\tsf_count_t total = 0 ;"
    },
    {
        "line": 8,
        "fullcodeline": "items *= bytes ;"
    },
    {
        "line": 11,
        "fullcodeline": "if (items <= 0)"
    },
    {
        "line": 14,
        "fullcodeline": "while (items > 0)"
    },
    {
        "line": 38,
        "fullcodeline": "return total / bytes ;"
    },
    {
        "line": 16,
        "fullcodeline": "count = (items > SENSIBLE_SIZE) ? SENSIBLE_SIZE : items ;"
    },
    {
        "line": 18,
        "fullcodeline": "count = write (psf->file.filedes, ((const char*) ptr) + total, count) ;"
    },
    {
        "line": 31,
        "fullcodeline": "total += count ;"
    },
    {
        "line": 32,
        "fullcodeline": "items -= count ;"
    },
    {
        "line": 36,
        "fullcodeline": "psf->pipeoffset += total ;"
    },
    {
        "line": 6,
        "fullcodeline": "return psf->vio.write (ptr, bytes*items, psf->vio_user_data) / bytes ;"
    },
    {
        "line": 20,
        "fullcodeline": "if (count == -1)"
    },
    {
        "line": 28,
        "fullcodeline": "if (count == 0)"
    },
    {
        "line": 24,
        "fullcodeline": "psf_log_syserr (psf, errno) ;"
    },
    {
        "line": 21,
        "fullcodeline": "{\tif (errno == EINTR)"
    }
]