[
    {
        "line": 5,
        "fullcodeline": "struct rb_node *node = NULL, *temp;"
    },
    {
        "line": 6,
        "fullcodeline": "struct nvkm_vma *vma = NULL, *tmp;"
    },
    {
        "line": 10,
        "fullcodeline": "VMM_TRACE(vmm, \"getref %d mapref %d sparse %d \""
    },
    {
        "line": 128,
        "fullcodeline": "vma->mapref = mapref && !getref;"
    },
    {
        "line": 129,
        "fullcodeline": "vma->sparse = sparse;"
    },
    {
        "line": 130,
        "fullcodeline": "vma->page = page - vmm->func->page;"
    },
    {
        "line": 131,
        "fullcodeline": "vma->refd = getref ? vma->page : NVKM_VMA_PAGE_NONE;"
    },
    {
        "line": 132,
        "fullcodeline": "vma->used = true;"
    },
    {
        "line": 133,
        "fullcodeline": "nvkm_vmm_node_insert(vmm, vma);"
    },
    {
        "line": 134,
        "fullcodeline": "*pvma = vma;"
    },
    {
        "line": 15,
        "fullcodeline": "if (unlikely(!size || (!getref && !mapref && sparse))) {"
    },
    {
        "line": 27,
        "fullcodeline": "if (unlikely((getref || vmm->func->page_block) && !shift)) {"
    },
    {
        "line": 63,
        "fullcodeline": "if (unlikely(!node))"
    },
    {
        "line": 89,
        "fullcodeline": "} while ((node = rb_next(node)));"
    },
    {
        "line": 91,
        "fullcodeline": "if (unlikely(!vma))"
    },
    {
        "line": 97,
        "fullcodeline": "if (addr != vma->addr) {"
    },
    {
        "line": 106,
        "fullcodeline": "if (size != vma->size) {"
    },
    {
        "line": 115,
        "fullcodeline": "if (sparse && getref)"
    },
    {
        "line": 16,
        "fullcodeline": "VMM_DEBUG(vmm, \"args %016llx %d %d %d\","
    },
    {
        "line": 28,
        "fullcodeline": "VMM_DEBUG(vmm, \"page size required: %d %016llx\","
    },
    {
        "line": 46,
        "fullcodeline": "align = max_t(u8, align, shift);"
    },
    {
        "line": 71,
        "fullcodeline": "struct nvkm_vma *prev = node(this, prev);"
    },
    {
        "line": 72,
        "fullcodeline": "struct nvkm_vma *next = node(this, next);"
    },
    {
        "line": 73,
        "fullcodeline": "const int p = page - vmm->func->page;"
    },
    {
        "line": 75,
        "fullcodeline": "addr = this->addr;"
    },
    {
        "line": 78,
        "fullcodeline": "addr = ALIGN(addr, 1ULL << align);"
    },
    {
        "line": 80,
        "fullcodeline": "tail = this->addr + this->size;"
    },
    {
        "line": 102,
        "fullcodeline": "nvkm_vmm_free_insert(vmm, vma);"
    },
    {
        "line": 103,
        "fullcodeline": "vma = tmp;"
    },
    {
        "line": 111,
        "fullcodeline": "nvkm_vmm_free_insert(vmm, tmp);"
    },
    {
        "line": 116,
        "fullcodeline": "ret = nvkm_vmm_ptes_sparse_get(vmm, page, vma->addr, vma->size);"
    },
    {
        "line": 124,
        "fullcodeline": "nvkm_vmm_put_region(vmm, vma);"
    },
    {
        "line": 18,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 30,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 37,
        "fullcodeline": "for (page = vmm->func->page; page->shift; page++) {"
    },
    {
        "line": 42,
        "fullcodeline": "if (!page->shift || !IS_ALIGNED(size, 1ULL << page->shift)) {"
    },
    {
        "line": 48,
        "fullcodeline": "align = max_t(u8, align, 12);"
    },
    {
        "line": 55,
        "fullcodeline": "if (this->size < size) {"
    },
    {
        "line": 64,
        "fullcodeline": "return -ENOSPC;"
    },
    {
        "line": 76,
        "fullcodeline": "if (vmm->func->page_block && prev && prev->page != p)"
    },
    {
        "line": 81,
        "fullcodeline": "if (vmm->func->page_block && next && next->page != p)"
    },
    {
        "line": 84,
        "fullcodeline": "if (addr <= tail && tail - addr >= size) {"
    },
    {
        "line": 92,
        "fullcodeline": "return -ENOSPC;"
    },
    {
        "line": 98,
        "fullcodeline": "if (!(tmp = nvkm_vma_tail(vma, vma->size + vma->addr - addr))) {"
    },
    {
        "line": 107,
        "fullcodeline": "if (!(tmp = nvkm_vma_tail(vma, vma->size - size))) {"
    },
    {
        "line": 43,
        "fullcodeline": "VMM_DEBUG(vmm, \"page %d %016llx\", shift, size);"
    },
    {
        "line": 56,
        "fullcodeline": "temp = temp->rb_right;"
    },
    {
        "line": 77,
        "fullcodeline": "addr = ALIGN(addr, vmm->func->page_block);"
    },
    {
        "line": 82,
        "fullcodeline": "tail = ALIGN_DOWN(tail, vmm->func->page_block);"
    },
    {
        "line": 85,
        "fullcodeline": "nvkm_vmm_free_remove(vmm, this);"
    },
    {
        "line": 86,
        "fullcodeline": "vma = this;"
    },
    {
        "line": 99,
        "fullcodeline": "nvkm_vmm_put_region(vmm, vma);"
    },
    {
        "line": 108,
        "fullcodeline": "nvkm_vmm_put_region(vmm, vma);"
    },
    {
        "line": 38,
        "fullcodeline": "if (shift == page->shift)"
    },
    {
        "line": 44,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 58,
        "fullcodeline": "node = temp;"
    },
    {
        "line": 100,
        "fullcodeline": "return -ENOMEM;"
    },
    {
        "line": 109,
        "fullcodeline": "return -ENOMEM;"
    },
    {
        "line": 118,
        "fullcodeline": "ret = nvkm_vmm_ptes_sparse(vmm, vma->addr, vma->size, true);"
    },
    {
        "line": 120,
        "fullcodeline": "ret = nvkm_vmm_ptes_get(vmm, page, vma->addr, vma->size);"
    },
    {
        "line": 122,
        "fullcodeline": "ret = 0;"
    }
]