[
    {
        "line": 6,
        "fullcodeline": "const struct nvkm_vmm_page *page = func->page;"
    },
    {
        "line": 9,
        "fullcodeline": "int levels, bits = 0;"
    },
    {
        "line": 11,
        "fullcodeline": "vmm->func = func;"
    },
    {
        "line": 12,
        "fullcodeline": "vmm->mmu = mmu;"
    },
    {
        "line": 13,
        "fullcodeline": "vmm->name = name;"
    },
    {
        "line": 15,
        "fullcodeline": "kref_init(&vmm->kref);"
    },
    {
        "line": 17,
        "fullcodeline": "__mutex_init(&vmm->mutex, \"&vmm->mutex\", key ? key : &_key);"
    },
    {
        "line": 31,
        "fullcodeline": "bits += page->shift;"
    },
    {
        "line": 32,
        "fullcodeline": "desc--;"
    },
    {
        "line": 37,
        "fullcodeline": "vmm->start = addr;"
    },
    {
        "line": 38,
        "fullcodeline": "vmm->limit = size ? (addr + size) : (1ULL << bits);"
    },
    {
        "line": 43,
        "fullcodeline": "vmm->pd = nvkm_vmm_pt_new(desc, false, NULL);"
    },
    {
        "line": 46,
        "fullcodeline": "vmm->pd->refs[0] = 1;"
    },
    {
        "line": 47,
        "fullcodeline": "INIT_LIST_HEAD(&vmm->join);"
    },
    {
        "line": 60,
        "fullcodeline": "INIT_LIST_HEAD(&vmm->list);"
    },
    {
        "line": 61,
        "fullcodeline": "vmm->free = RB_ROOT;"
    },
    {
        "line": 62,
        "fullcodeline": "vmm->root = RB_ROOT;"
    },
    {
        "line": 67,
        "fullcodeline": "nvkm_vmm_free_insert(vmm, vma);"
    },
    {
        "line": 68,
        "fullcodeline": "list_add(&vma->head, &vmm->list);"
    },
    {
        "line": 23,
        "fullcodeline": "page++;"
    },
    {
        "line": 29,
        "fullcodeline": "for (levels = 0, desc = page->desc; desc->bits; desc++, levels++)"
    },
    {
        "line": 30,
        "fullcodeline": "bits += desc->bits;"
    },
    {
        "line": 34,
        "fullcodeline": "if (WARN_ON(levels > NVKM_VMM_LEVELS_MAX))"
    },
    {
        "line": 39,
        "fullcodeline": "if (vmm->start > vmm->limit || vmm->limit > (1ULL << bits))"
    },
    {
        "line": 44,
        "fullcodeline": "if (!vmm->pd)"
    },
    {
        "line": 64,
        "fullcodeline": "if (!(vma = nvkm_vma_new(vmm->start, vmm->limit - vmm->start)))"
    },
    {
        "line": 53,
        "fullcodeline": "const u32 size = pd_header + desc->size * (1 << desc->bits);"
    },
    {
        "line": 54,
        "fullcodeline": "vmm->pd->pt[0] = nvkm_mmu_ptc_get(mmu, size, desc->align, true);"
    },
    {
        "line": 35,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 40,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 45,
        "fullcodeline": "return -ENOMEM;"
    },
    {
        "line": 55,
        "fullcodeline": "if (!vmm->pd->pt[0])"
    },
    {
        "line": 65,
        "fullcodeline": "return -ENOMEM;"
    },
    {
        "line": 56,
        "fullcodeline": "return -ENOMEM;"
    }
]