[
    {
        "line": 9,
        "fullcodeline": "assert(seq->n_fields > 0);"
    },
    {
        "line": 10,
        "fullcodeline": "for (i = 0; i < seq->n_fields; i++) {"
    },
    {
        "line": 40,
        "fullcodeline": "for (; i < seq->n_fields; i++) {"
    },
    {
        "line": 50,
        "fullcodeline": "for (j = 0; j < i; j++)"
    },
    {
        "line": 51,
        "fullcodeline": "free_atype(seq->fields[j], val);"
    },
    {
        "line": 52,
        "fullcodeline": "for (j = 0; j < i; j++)"
    },
    {
        "line": 13,
        "fullcodeline": "ret = get_tag(asn1, len, &t, &contents, &clen, &asn1, &len, 0);"
    },
    {
        "line": 34,
        "fullcodeline": "ret = decode_atype(&t, contents, clen, seq->fields[i], val);"
    },
    {
        "line": 41,
        "fullcodeline": "ret = omit_atype(seq->fields[i], val);"
    },
    {
        "line": 11,
        "fullcodeline": "if (len == 0)"
    },
    {
        "line": 23,
        "fullcodeline": "for (; i < seq->n_fields; i++) {"
    },
    {
        "line": 32,
        "fullcodeline": "if (i == seq->n_fields)"
    },
    {
        "line": 26,
        "fullcodeline": "ret = omit_atype(seq->fields[i], val);"
    },
    {
        "line": 24,
        "fullcodeline": "if (check_atype_tag(seq->fields[i], &t))"
    }
]