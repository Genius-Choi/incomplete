[
    {
        "line": 3,
        "fullcodeline": "struct packet_sock *po = pkt_sk(sk);"
    },
    {
        "line": 5,
        "fullcodeline": "u8 type = type_flags & 0xff;"
    },
    {
        "line": 6,
        "fullcodeline": "u8 flags = type_flags >> 8;"
    },
    {
        "line": 41,
        "fullcodeline": "mutex_lock(&fanout_mutex);"
    },
    {
        "line": 42,
        "fullcodeline": "match = NULL;"
    },
    {
        "line": 43,
        "fullcodeline": "list_for_each_entry(f, &fanout_list, list) {"
    },
    {
        "line": 50,
        "fullcodeline": "err = -EINVAL;"
    },
    {
        "line": 74,
        "fullcodeline": "err = -EINVAL;"
    },
    {
        "line": 88,
        "fullcodeline": "mutex_unlock(&fanout_mutex);"
    },
    {
        "line": 25,
        "fullcodeline": "if (!po->running)"
    },
    {
        "line": 31,
        "fullcodeline": "if (type == PACKET_FANOUT_ROLLOVER ||"
    },
    {
        "line": 51,
        "fullcodeline": "if (match && match->flags != flags)"
    },
    {
        "line": 53,
        "fullcodeline": "if (!match) {"
    },
    {
        "line": 75,
        "fullcodeline": "if (match->type == type &&"
    },
    {
        "line": 32,
        "fullcodeline": "(type_flags & PACKET_FANOUT_FLAG_ROLLOVER)) {"
    },
    {
        "line": 33,
        "fullcodeline": "po->rollover = kzalloc(sizeof(*po->rollover), GFP_KERNEL);"
    },
    {
        "line": 36,
        "fullcodeline": "atomic_long_set(&po->rollover->num, 0);"
    },
    {
        "line": 37,
        "fullcodeline": "atomic_long_set(&po->rollover->num_huge, 0);"
    },
    {
        "line": 38,
        "fullcodeline": "atomic_long_set(&po->rollover->num_failed, 0);"
    },
    {
        "line": 44,
        "fullcodeline": "if (f->id == id &&"
    },
    {
        "line": 54,
        "fullcodeline": "err = -ENOMEM;"
    },
    {
        "line": 55,
        "fullcodeline": "match = kzalloc(sizeof(*match), GFP_KERNEL);"
    },
    {
        "line": 58,
        "fullcodeline": "write_pnet(&match->net, sock_net(sk));"
    },
    {
        "line": 59,
        "fullcodeline": "match->id = id;"
    },
    {
        "line": 60,
        "fullcodeline": "match->type = type;"
    },
    {
        "line": 61,
        "fullcodeline": "match->flags = flags;"
    },
    {
        "line": 62,
        "fullcodeline": "INIT_LIST_HEAD(&match->list);"
    },
    {
        "line": 63,
        "fullcodeline": "spin_lock_init(&match->lock);"
    },
    {
        "line": 64,
        "fullcodeline": "atomic_set(&match->sk_ref, 0);"
    },
    {
        "line": 65,
        "fullcodeline": "fanout_init_data(match);"
    },
    {
        "line": 68,
        "fullcodeline": "match->prot_hook.func = packet_rcv_fanout;"
    },
    {
        "line": 69,
        "fullcodeline": "match->prot_hook.af_packet_priv = match;"
    },
    {
        "line": 70,
        "fullcodeline": "match->prot_hook.id_match = match_fanout_group;"
    },
    {
        "line": 71,
        "fullcodeline": "dev_add_pack(&match->prot_hook);"
    },
    {
        "line": 72,
        "fullcodeline": "list_add(&match->list, &fanout_list);"
    },
    {
        "line": 78,
        "fullcodeline": "err = -ENOSPC;"
    },
    {
        "line": 90,
        "fullcodeline": "kfree(po->rollover);"
    },
    {
        "line": 91,
        "fullcodeline": "po->rollover = NULL;"
    },
    {
        "line": 11,
        "fullcodeline": "if (type_flags & PACKET_FANOUT_FLAG_ROLLOVER)"
    },
    {
        "line": 22,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 26,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 29,
        "fullcodeline": "return -EALREADY;"
    },
    {
        "line": 34,
        "fullcodeline": "if (!po->rollover)"
    },
    {
        "line": 45,
        "fullcodeline": "read_pnet(&f->net) == sock_net(sk)) {"
    },
    {
        "line": 46,
        "fullcodeline": "match = f;"
    },
    {
        "line": 56,
        "fullcodeline": "if (!match)"
    },
    {
        "line": 79,
        "fullcodeline": "if (atomic_read(&match->sk_ref) < PACKET_FANOUT_MAX) {"
    },
    {
        "line": 80,
        "fullcodeline": "__dev_remove_pack(&po->prot_hook);"
    },
    {
        "line": 81,
        "fullcodeline": "po->fanout = match;"
    },
    {
        "line": 82,
        "fullcodeline": "atomic_inc(&match->sk_ref);"
    },
    {
        "line": 83,
        "fullcodeline": "__fanout_link(sk, po);"
    },
    {
        "line": 84,
        "fullcodeline": "err = 0;"
    },
    {
        "line": 12,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 35,
        "fullcodeline": "return -ENOMEM;"
    }
]