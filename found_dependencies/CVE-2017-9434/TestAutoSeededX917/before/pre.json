[
    {
        "line": 4,
        "fullcodeline": "std::cout << \"\\nTesting AutoSeeded X917 generator...\\n\\n\";"
    },
    {
        "line": 6,
        "fullcodeline": "AutoSeededX917RNG<AES> prng;"
    },
    {
        "line": 7,
        "fullcodeline": "bool pass = true, fail;"
    },
    {
        "line": 8,
        "fullcodeline": "static const unsigned int ENTROPY_SIZE = 32;"
    },
    {
        "line": 10,
        "fullcodeline": "MeterFilter meter(new Redirector(TheBitBucket()));"
    },
    {
        "line": 11,
        "fullcodeline": "RandomNumberSource test(prng, 100000, true, new Deflator(new Redirector(meter)));"
    },
    {
        "line": 13,
        "fullcodeline": "fail = false;"
    },
    {
        "line": 17,
        "fullcodeline": "pass &= !fail;"
    },
    {
        "line": 22,
        "fullcodeline": "std::cout << \"  100000 generated bytes compressed to \" << meter.GetTotalBytes() << \" bytes by DEFLATE\\n\";"
    },
    {
        "line": 34,
        "fullcodeline": "pass &= !fail;"
    },
    {
        "line": 39,
        "fullcodeline": "std::cout << \"  discarded 10000 bytes\" << std::endl;"
    },
    {
        "line": 60,
        "fullcodeline": "pass &= !fail;"
    },
    {
        "line": 65,
        "fullcodeline": "std::cout << \"  IncorporateEntropy with \" << 4*ENTROPY_SIZE << \" bytes\\n\";"
    },
    {
        "line": 84,
        "fullcodeline": "pass &= !fail;"
    },
    {
        "line": 89,
        "fullcodeline": "std::cout << \"  GenerateWord32 and Crop\\n\";"
    },
    {
        "line": 91,
        "fullcodeline": "std::cout.flush();"
    },
    {
        "line": 14,
        "fullcodeline": "if (meter.GetTotalBytes() < 100000)"
    },
    {
        "line": 15,
        "fullcodeline": "fail = true;"
    },
    {
        "line": 19,
        "fullcodeline": "std::cout << \"FAILED:\";"
    },
    {
        "line": 26,
        "fullcodeline": "fail = false;"
    },
    {
        "line": 27,
        "fullcodeline": "prng.DiscardBytes(100000);"
    },
    {
        "line": 36,
        "fullcodeline": "std::cout << \"FAILED:\";"
    },
    {
        "line": 43,
        "fullcodeline": "fail = false;"
    },
    {
        "line": 62,
        "fullcodeline": "std::cout << \"FAILED:\";"
    },
    {
        "line": 70,
        "fullcodeline": "fail = false;"
    },
    {
        "line": 71,
        "fullcodeline": "(void)prng.AlgorithmName();  // \"unknown\""
    },
    {
        "line": 72,
        "fullcodeline": "word32 result = prng.GenerateWord32();"
    },
    {
        "line": 73,
        "fullcodeline": "result = prng.GenerateWord32((result & 0xff), 0xffffffff - (result & 0xff));"
    },
    {
        "line": 74,
        "fullcodeline": "prng.GenerateBlock(reinterpret_cast<byte*>(&result), 4);"
    },
    {
        "line": 75,
        "fullcodeline": "prng.GenerateBlock(reinterpret_cast<byte*>(&result), 3);"
    },
    {
        "line": 76,
        "fullcodeline": "prng.GenerateBlock(reinterpret_cast<byte*>(&result), 2);"
    },
    {
        "line": 77,
        "fullcodeline": "prng.GenerateBlock(reinterpret_cast<byte*>(&result), 1);"
    },
    {
        "line": 86,
        "fullcodeline": "std::cout << \"FAILED:\";"
    },
    {
        "line": 21,
        "fullcodeline": "std::cout << \"passed:\";"
    },
    {
        "line": 31,
        "fullcodeline": "fail = true;"
    },
    {
        "line": 38,
        "fullcodeline": "std::cout << \"passed:\";"
    },
    {
        "line": 44,
        "fullcodeline": "if(prng.CanIncorporateEntropy())"
    },
    {
        "line": 57,
        "fullcodeline": "fail = true;"
    },
    {
        "line": 64,
        "fullcodeline": "std::cout << \"passed:\";"
    },
    {
        "line": 81,
        "fullcodeline": "fail = true;"
    },
    {
        "line": 88,
        "fullcodeline": "std::cout << \"passed:\";"
    },
    {
        "line": 46,
        "fullcodeline": "SecByteBlock entropy(ENTROPY_SIZE);"
    },
    {
        "line": 47,
        "fullcodeline": "GlobalRNG().GenerateBlock(entropy, entropy.SizeInBytes());"
    },
    {
        "line": 49,
        "fullcodeline": "prng.IncorporateEntropy(entropy, entropy.SizeInBytes());"
    },
    {
        "line": 50,
        "fullcodeline": "prng.IncorporateEntropy(entropy, entropy.SizeInBytes());"
    },
    {
        "line": 51,
        "fullcodeline": "prng.IncorporateEntropy(entropy, entropy.SizeInBytes());"
    },
    {
        "line": 52,
        "fullcodeline": "prng.IncorporateEntropy(entropy, entropy.SizeInBytes());"
    }
]