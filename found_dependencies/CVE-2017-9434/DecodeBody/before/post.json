[
    {
        "line": 3,
        "fullcodeline": "bool blockEnd = false;"
    },
    {
        "line": 7,
        "fullcodeline": "CRYPTOPP_ASSERT(m_reader.BitsBuffered() == 0);"
    },
    {
        "line": 24,
        "fullcodeline": "static const unsigned int lengthStarts[] = {"
    },
    {
        "line": 27,
        "fullcodeline": "static const unsigned int lengthExtraBits[] = {"
    },
    {
        "line": 30,
        "fullcodeline": "static const unsigned int distanceStarts[] = {"
    },
    {
        "line": 34,
        "fullcodeline": "static const unsigned int distanceExtraBits[] = {"
    },
    {
        "line": 39,
        "fullcodeline": "const HuffmanDecoder& literalDecoder = GetLiteralDecoder();"
    },
    {
        "line": 40,
        "fullcodeline": "const HuffmanDecoder& distanceDecoder = GetDistanceDecoder();"
    },
    {
        "line": 8,
        "fullcodeline": "while (!m_inQueue.IsEmpty() && !blockEnd)"
    },
    {
        "line": 11,
        "fullcodeline": "const byte *block = m_inQueue.Spy(size);"
    },
    {
        "line": 12,
        "fullcodeline": "size = UnsignedMin(m_storedLen, size);"
    },
    {
        "line": 13,
        "fullcodeline": "CRYPTOPP_ASSERT(size <= 0xffff);"
    },
    {
        "line": 15,
        "fullcodeline": "OutputString(block, size);"
    },
    {
        "line": 16,
        "fullcodeline": "m_inQueue.Skip(size);"
    },
    {
        "line": 17,
        "fullcodeline": "m_storedLen = m_storedLen - (word16)size;"
    },
    {
        "line": 93,
        "fullcodeline": "CRYPTOPP_ASSERT(0);"
    },
    {
        "line": 100,
        "fullcodeline": "FlushOutput();"
    },
    {
        "line": 101,
        "fullcodeline": "m_reader.SkipBits(m_reader.BitsBuffered()%8);"
    },
    {
        "line": 110,
        "fullcodeline": "m_state = POST_STREAM;"
    },
    {
        "line": 18,
        "fullcodeline": "if (m_storedLen == 0)"
    },
    {
        "line": 102,
        "fullcodeline": "if (m_reader.BitsBuffered())"
    },
    {
        "line": 113,
        "fullcodeline": "m_state = WAIT_HEADER;"
    },
    {
        "line": 19,
        "fullcodeline": "blockEnd = true;"
    },
    {
        "line": 105,
        "fullcodeline": "SecBlockWithHint<byte, 4> buffer(m_reader.BitsBuffered() / 8);"
    },
    {
        "line": 108,
        "fullcodeline": "m_inQueue.Unget(buffer, buffer.size());"
    },
    {
        "line": 47,
        "fullcodeline": "if (!literalDecoder.Decode(m_reader, m_literal))"
    },
    {
        "line": 52,
        "fullcodeline": "if (m_literal < 256)"
    },
    {
        "line": 106,
        "fullcodeline": "for (unsigned int i=0; i<buffer.size(); i++)"
    },
    {
        "line": 107,
        "fullcodeline": "buffer[i] = (byte)m_reader.GetBits(8);"
    },
    {
        "line": 49,
        "fullcodeline": "m_nextDecode = LITERAL;"
    },
    {
        "line": 53,
        "fullcodeline": "OutputByte((byte)m_literal);"
    },
    {
        "line": 54,
        "fullcodeline": "else if (m_literal == 256)\t// end of block"
    },
    {
        "line": 56,
        "fullcodeline": "blockEnd = true;"
    },
    {
        "line": 65,
        "fullcodeline": "bits = lengthExtraBits[m_literal-257];"
    },
    {
        "line": 71,
        "fullcodeline": "m_literal = m_reader.GetBits(bits) + lengthStarts[m_literal-257];"
    },
    {
        "line": 80,
        "fullcodeline": "CRYPTOPP_ASSERT(m_distance < COUNTOF(distanceExtraBits));"
    },
    {
        "line": 81,
        "fullcodeline": "bits = (m_distance >= COUNTOF(distanceExtraBits)) ? distanceExtraBits[29] : distanceExtraBits[m_distance];"
    },
    {
        "line": 87,
        "fullcodeline": "m_distance = m_reader.GetBits(bits) + distanceStarts[m_distance];"
    },
    {
        "line": 88,
        "fullcodeline": "OutputPast(m_literal, m_distance);"
    },
    {
        "line": 61,
        "fullcodeline": "if (m_literal > 285)"
    },
    {
        "line": 66,
        "fullcodeline": "if (!m_reader.FillBuffer(bits))"
    },
    {
        "line": 73,
        "fullcodeline": "if (!distanceDecoder.Decode(m_reader, m_distance))"
    },
    {
        "line": 82,
        "fullcodeline": "if (!m_reader.FillBuffer(bits))"
    },
    {
        "line": 68,
        "fullcodeline": "m_nextDecode = LENGTH_BITS;"
    },
    {
        "line": 75,
        "fullcodeline": "m_nextDecode = DISTANCE;"
    },
    {
        "line": 84,
        "fullcodeline": "m_nextDecode = DISTANCE_BITS;"
    },
    {
        "line": 62,
        "fullcodeline": "throw BadBlockErr();"
    }
]