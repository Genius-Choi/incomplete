[
    {
        "line": 3,
        "fullcodeline": "std::cout << \"\\nTesting RandomPool generator...\\n\\n\";"
    },
    {
        "line": 4,
        "fullcodeline": "bool pass=true, fail;"
    },
    {
        "line": 91,
        "fullcodeline": "std::cout << \"\\nTesting AutoSeeded RandomPool generator...\\n\\n\";"
    },
    {
        "line": 179,
        "fullcodeline": "std::cout.flush();"
    },
    {
        "line": 7,
        "fullcodeline": "static const unsigned int ENTROPY_SIZE = 32;"
    },
    {
        "line": 10,
        "fullcodeline": "RandomNumberSource test(prng, 100000, true, new Deflator(new Redirector(meter)));"
    },
    {
        "line": 12,
        "fullcodeline": "fail = false;"
    },
    {
        "line": 16,
        "fullcodeline": "pass &= !fail;"
    },
    {
        "line": 33,
        "fullcodeline": "pass &= !fail;"
    },
    {
        "line": 38,
        "fullcodeline": "std::cout << \"  discarded 10000 bytes\" << std::endl;"
    },
    {
        "line": 59,
        "fullcodeline": "pass &= !fail;"
    },
    {
        "line": 82,
        "fullcodeline": "pass &= !fail;"
    },
    {
        "line": 87,
        "fullcodeline": "std::cout << \"  GenerateWord32 and Crop\\n\";"
    },
    {
        "line": 94,
        "fullcodeline": "static const unsigned int ENTROPY_SIZE = 32;"
    },
    {
        "line": 96,
        "fullcodeline": "MeterFilter meter(new Redirector(TheBitBucket()));"
    },
    {
        "line": 97,
        "fullcodeline": "RandomNumberSource test(prng, 100000, true, new Deflator(new Redirector(meter)));"
    },
    {
        "line": 99,
        "fullcodeline": "fail = false;"
    },
    {
        "line": 103,
        "fullcodeline": "pass &= !fail;"
    },
    {
        "line": 108,
        "fullcodeline": "std::cout << \"  100000 generated bytes compressed to \" << meter.GetTotalBytes() << \" bytes by DEFLATE\\n\";"
    },
    {
        "line": 120,
        "fullcodeline": "pass &= !fail;"
    },
    {
        "line": 125,
        "fullcodeline": "std::cout << \"  discarded 10000 bytes\" << std::endl;"
    },
    {
        "line": 146,
        "fullcodeline": "pass &= !fail;"
    },
    {
        "line": 151,
        "fullcodeline": "std::cout << \"  IncorporateEntropy with \" << 4*ENTROPY_SIZE << \" bytes\\n\";"
    },
    {
        "line": 170,
        "fullcodeline": "pass &= !fail;"
    },
    {
        "line": 175,
        "fullcodeline": "std::cout << \"  GenerateWord32 and Crop\\n\";"
    },
    {
        "line": 9,
        "fullcodeline": "MeterFilter meter(new Redirector(TheBitBucket()));"
    },
    {
        "line": 21,
        "fullcodeline": "std::cout << \"  100000 generated bytes compressed to \" << meter.GetTotalBytes() << \" bytes by DEFLATE\\n\";"
    },
    {
        "line": 64,
        "fullcodeline": "std::cout << \"  IncorporateEntropy with \" << 4*ENTROPY_SIZE << \" bytes\\n\";"
    },
    {
        "line": 100,
        "fullcodeline": "if (meter.GetTotalBytes() < 100000)"
    },
    {
        "line": 13,
        "fullcodeline": "if (meter.GetTotalBytes() < 100000)"
    },
    {
        "line": 14,
        "fullcodeline": "fail = true;"
    },
    {
        "line": 18,
        "fullcodeline": "std::cout << \"FAILED:\";"
    },
    {
        "line": 25,
        "fullcodeline": "fail = false;"
    },
    {
        "line": 26,
        "fullcodeline": "prng.DiscardBytes(100000);"
    },
    {
        "line": 35,
        "fullcodeline": "std::cout << \"FAILED:\";"
    },
    {
        "line": 42,
        "fullcodeline": "fail = false;"
    },
    {
        "line": 61,
        "fullcodeline": "std::cout << \"FAILED:\";"
    },
    {
        "line": 70,
        "fullcodeline": "word32 result = prng.GenerateWord32();"
    },
    {
        "line": 71,
        "fullcodeline": "result = prng.GenerateWord32((result & 0xff), 0xffffffff - (result & 0xff));"
    },
    {
        "line": 72,
        "fullcodeline": "prng.GenerateBlock(reinterpret_cast<byte*>(&result), 4);"
    },
    {
        "line": 73,
        "fullcodeline": "prng.GenerateBlock(reinterpret_cast<byte*>(&result), 3);"
    },
    {
        "line": 74,
        "fullcodeline": "prng.GenerateBlock(reinterpret_cast<byte*>(&result), 2);"
    },
    {
        "line": 75,
        "fullcodeline": "prng.GenerateBlock(reinterpret_cast<byte*>(&result), 1);"
    },
    {
        "line": 84,
        "fullcodeline": "std::cout << \"FAILED:\";"
    },
    {
        "line": 101,
        "fullcodeline": "fail = true;"
    },
    {
        "line": 105,
        "fullcodeline": "std::cout << \"FAILED:\";"
    },
    {
        "line": 112,
        "fullcodeline": "fail = false;"
    },
    {
        "line": 113,
        "fullcodeline": "prng.DiscardBytes(100000);"
    },
    {
        "line": 122,
        "fullcodeline": "std::cout << \"FAILED:\";"
    },
    {
        "line": 129,
        "fullcodeline": "fail = false;"
    },
    {
        "line": 148,
        "fullcodeline": "std::cout << \"FAILED:\";"
    },
    {
        "line": 156,
        "fullcodeline": "fail = false;"
    },
    {
        "line": 157,
        "fullcodeline": "(void)prng.AlgorithmName();  // \"unknown\""
    },
    {
        "line": 158,
        "fullcodeline": "word32 result = prng.GenerateWord32();"
    },
    {
        "line": 159,
        "fullcodeline": "result = prng.GenerateWord32((result & 0xff), 0xffffffff - (result & 0xff));"
    },
    {
        "line": 160,
        "fullcodeline": "prng.GenerateBlock(reinterpret_cast<byte*>(&result), 4);"
    },
    {
        "line": 161,
        "fullcodeline": "prng.GenerateBlock(reinterpret_cast<byte*>(&result), 3);"
    },
    {
        "line": 162,
        "fullcodeline": "prng.GenerateBlock(reinterpret_cast<byte*>(&result), 2);"
    },
    {
        "line": 163,
        "fullcodeline": "prng.GenerateBlock(reinterpret_cast<byte*>(&result), 1);"
    },
    {
        "line": 172,
        "fullcodeline": "std::cout << \"FAILED:\";"
    },
    {
        "line": 20,
        "fullcodeline": "std::cout << \"passed:\";"
    },
    {
        "line": 30,
        "fullcodeline": "fail = true;"
    },
    {
        "line": 37,
        "fullcodeline": "std::cout << \"passed:\";"
    },
    {
        "line": 43,
        "fullcodeline": "if(prng.CanIncorporateEntropy())"
    },
    {
        "line": 56,
        "fullcodeline": "fail = true;"
    },
    {
        "line": 63,
        "fullcodeline": "std::cout << \"passed:\";"
    },
    {
        "line": 69,
        "fullcodeline": "(void)prng.AlgorithmName();  // \"unknown\""
    },
    {
        "line": 79,
        "fullcodeline": "fail = true;"
    },
    {
        "line": 86,
        "fullcodeline": "std::cout << \"passed:\";"
    },
    {
        "line": 107,
        "fullcodeline": "std::cout << \"passed:\";"
    },
    {
        "line": 117,
        "fullcodeline": "fail = true;"
    },
    {
        "line": 124,
        "fullcodeline": "std::cout << \"passed:\";"
    },
    {
        "line": 130,
        "fullcodeline": "if(prng.CanIncorporateEntropy())"
    },
    {
        "line": 143,
        "fullcodeline": "fail = true;"
    },
    {
        "line": 150,
        "fullcodeline": "std::cout << \"passed:\";"
    },
    {
        "line": 167,
        "fullcodeline": "fail = true;"
    },
    {
        "line": 174,
        "fullcodeline": "std::cout << \"passed:\";"
    },
    {
        "line": 45,
        "fullcodeline": "SecByteBlock entropy(ENTROPY_SIZE);"
    },
    {
        "line": 46,
        "fullcodeline": "GlobalRNG().GenerateBlock(entropy, entropy.SizeInBytes());"
    },
    {
        "line": 48,
        "fullcodeline": "prng.IncorporateEntropy(entropy, entropy.SizeInBytes());"
    },
    {
        "line": 49,
        "fullcodeline": "prng.IncorporateEntropy(entropy, entropy.SizeInBytes());"
    },
    {
        "line": 50,
        "fullcodeline": "prng.IncorporateEntropy(entropy, entropy.SizeInBytes());"
    },
    {
        "line": 51,
        "fullcodeline": "prng.IncorporateEntropy(entropy, entropy.SizeInBytes());"
    },
    {
        "line": 132,
        "fullcodeline": "SecByteBlock entropy(ENTROPY_SIZE);"
    },
    {
        "line": 133,
        "fullcodeline": "GlobalRNG().GenerateBlock(entropy, entropy.SizeInBytes());"
    },
    {
        "line": 135,
        "fullcodeline": "prng.IncorporateEntropy(entropy, entropy.SizeInBytes());"
    },
    {
        "line": 136,
        "fullcodeline": "prng.IncorporateEntropy(entropy, entropy.SizeInBytes());"
    },
    {
        "line": 137,
        "fullcodeline": "prng.IncorporateEntropy(entropy, entropy.SizeInBytes());"
    },
    {
        "line": 138,
        "fullcodeline": "prng.IncorporateEntropy(entropy, entropy.SizeInBytes());"
    }
]