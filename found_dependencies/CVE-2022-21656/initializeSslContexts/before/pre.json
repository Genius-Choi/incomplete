[
    {
        "line": 4,
        "fullcodeline": "int verify_mode = SSL_VERIFY_NONE;"
    },
    {
        "line": 5,
        "fullcodeline": "int verify_mode_validation_context = SSL_VERIFY_PEER | SSL_VERIFY_FAIL_IF_NO_PEER_CERT;"
    },
    {
        "line": 96,
        "fullcodeline": "const Envoy::Ssl::CertificateValidationContextConfig* cert_validation_config = config_;"
    },
    {
        "line": 7,
        "fullcodeline": "if (config_ != nullptr) {"
    },
    {
        "line": 18,
        "fullcodeline": "if (config_ != nullptr && !config_->caCert().empty() && !provides_certificates) {"
    },
    {
        "line": 97,
        "fullcodeline": "if (cert_validation_config != nullptr) {"
    },
    {
        "line": 9,
        "fullcodeline": "TrustChainVerification verification = config_->trustChainVerification();"
    },
    {
        "line": 19,
        "fullcodeline": "ca_file_path_ = config_->caCertPath();"
    },
    {
        "line": 20,
        "fullcodeline": "bssl::UniquePtr<BIO> bio("
    },
    {
        "line": 22,
        "fullcodeline": "RELEASE_ASSERT(bio != nullptr, \"\");"
    },
    {
        "line": 24,
        "fullcodeline": "bssl::UniquePtr<STACK_OF(X509_INFO)> list("
    },
    {
        "line": 69,
        "fullcodeline": "if (config_ != nullptr && !config_->certificateRevocationList().empty()) {"
    },
    {
        "line": 10,
        "fullcodeline": "if (verification == envoy::extensions::transport_sockets::tls::v3::"
    },
    {
        "line": 26,
        "fullcodeline": "if (list == nullptr) {"
    },
    {
        "line": 70,
        "fullcodeline": "bssl::UniquePtr<BIO> bio("
    },
    {
        "line": 73,
        "fullcodeline": "RELEASE_ASSERT(bio != nullptr, \"\");"
    },
    {
        "line": 76,
        "fullcodeline": "bssl::UniquePtr<STACK_OF(X509_INFO)> list("
    },
    {
        "line": 12,
        "fullcodeline": "verify_mode = SSL_VERIFY_PEER; // Ensure client-certs will be requested even if we have"
    },
    {
        "line": 14,
        "fullcodeline": "verify_mode_validation_context = SSL_VERIFY_PEER;"
    },
    {
        "line": 21,
        "fullcodeline": "BIO_new_mem_buf(const_cast<char*>(config_->caCert().data()), config_->caCert().size()));"
    },
    {
        "line": 25,
        "fullcodeline": "PEM_X509_INFO_read_bio(bio.get(), nullptr, nullptr, nullptr));"
    },
    {
        "line": 32,
        "fullcodeline": "X509_STORE* store = SSL_CTX_get_cert_store(ctx);"
    },
    {
        "line": 56,
        "fullcodeline": "verify_mode = SSL_VERIFY_PEER;"
    },
    {
        "line": 57,
        "fullcodeline": "verify_trusted_ca_ = true;"
    },
    {
        "line": 71,
        "fullcodeline": "BIO_new_mem_buf(const_cast<char*>(config_->certificateRevocationList().data()),"
    },
    {
        "line": 77,
        "fullcodeline": "PEM_X509_INFO_read_bio(bio.get(), nullptr, nullptr, nullptr));"
    },
    {
        "line": 84,
        "fullcodeline": "X509_STORE* store = SSL_CTX_get_cert_store(ctx);"
    },
    {
        "line": 98,
        "fullcodeline": "if (!cert_validation_config->subjectAltNameMatchers().empty()) {"
    },
    {
        "line": 103,
        "fullcodeline": "verify_mode = verify_mode_validation_context;"
    },
    {
        "line": 106,
        "fullcodeline": "if (!cert_validation_config->verifyCertificateHashList().empty()) {"
    },
    {
        "line": 119,
        "fullcodeline": "verify_mode = verify_mode_validation_context;"
    },
    {
        "line": 122,
        "fullcodeline": "if (!cert_validation_config->verifyCertificateSpkiList().empty()) {"
    },
    {
        "line": 130,
        "fullcodeline": "verify_mode = verify_mode_validation_context;"
    },
    {
        "line": 27,
        "fullcodeline": "throw EnvoyException("
    },
    {
        "line": 47,
        "fullcodeline": "if (ca_cert_ == nullptr) {"
    },
    {
        "line": 63,
        "fullcodeline": "if (config_->allowExpiredCertificate()) {"
    },
    {
        "line": 72,
        "fullcodeline": "config_->certificateRevocationList().size()));"
    },
    {
        "line": 28,
        "fullcodeline": "absl::StrCat(\"Failed to load trusted CA certificates from \", config_->caCertPath()));"
    },
    {
        "line": 52,
        "fullcodeline": "X509_STORE_set_flags(store, config_->onlyVerifyLeafCertificateCrl()"
    },
    {
        "line": 80,
        "fullcodeline": "absl::StrCat(\"Failed to load CRL from \", config_->certificateRevocationListPath()));"
    },
    {
        "line": 90,
        "fullcodeline": "X509_STORE_set_flags(store, config_->onlyVerifyLeafCertificateCrl()"
    },
    {
        "line": 92,
        "fullcodeline": ": X509_V_FLAG_CRL_CHECK | X509_V_FLAG_CRL_CHECK_ALL);"
    },
    {
        "line": 101,
        "fullcodeline": "subject_alt_name_matchers_.push_back(Matchers::StringMatcherImpl(matcher));"
    },
    {
        "line": 113,
        "fullcodeline": "const auto& decoded = Hex::decode(hash);"
    },
    {
        "line": 117,
        "fullcodeline": "verify_certificate_hash_list_.push_back(decoded);"
    },
    {
        "line": 124,
        "fullcodeline": "const auto decoded = Base64::decode(hash);"
    },
    {
        "line": 128,
        "fullcodeline": "verify_certificate_spki_list_.emplace_back(decoded.begin(), decoded.end());"
    },
    {
        "line": 114,
        "fullcodeline": "if (decoded.size() != SHA256_DIGEST_LENGTH) {"
    },
    {
        "line": 36,
        "fullcodeline": "X509_STORE_add_cert(store, item->x509);"
    },
    {
        "line": 43,
        "fullcodeline": "X509_STORE_add_crl(store, item->crl);"
    },
    {
        "line": 49,
        "fullcodeline": "absl::StrCat(\"Failed to load trusted CA certificates from \", config_->caCertPath()));"
    },
    {
        "line": 54,
        "fullcodeline": ": X509_V_FLAG_CRL_CHECK | X509_V_FLAG_CRL_CHECK_ALL);"
    },
    {
        "line": 87,
        "fullcodeline": "X509_STORE_add_crl(store, item->crl);"
    },
    {
        "line": 110,
        "fullcodeline": "if (hash.size() == 95) {"
    },
    {
        "line": 111,
        "fullcodeline": "hash.erase(std::remove(hash.begin(), hash.end(), ':'), hash.end());"
    },
    {
        "line": 125,
        "fullcodeline": "if (decoded.size() != SHA256_DIGEST_LENGTH) {"
    },
    {
        "line": 37,
        "fullcodeline": "if (ca_cert_ == nullptr) {"
    },
    {
        "line": 38,
        "fullcodeline": "X509_up_ref(item->x509);"
    },
    {
        "line": 39,
        "fullcodeline": "ca_cert_.reset(item->x509);"
    },
    {
        "line": 115,
        "fullcodeline": "throw EnvoyException(absl::StrCat(\"Invalid hex-encoded SHA-256 \", hash));"
    },
    {
        "line": 126,
        "fullcodeline": "throw EnvoyException(absl::StrCat(\"Invalid base64-encoded SHA-256 \", hash));"
    }
]