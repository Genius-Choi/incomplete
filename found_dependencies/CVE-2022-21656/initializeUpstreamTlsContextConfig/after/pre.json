[
    {
        "line": 4,
        "fullcodeline": "std::string yaml_plain = R\"EOF("
    },
    {
        "line": 36,
        "fullcodeline": "TestUtility::loadFromYaml(TestEnvironment::substitute(yaml_plain), tls_context);"
    },
    {
        "line": 37,
        "fullcodeline": "auto* common_context = tls_context.mutable_common_tls_context();"
    },
    {
        "line": 70,
        "fullcodeline": "common_context->mutable_tls_params()->set_tls_minimum_protocol_version(options.tls_version_);"
    },
    {
        "line": 71,
        "fullcodeline": "common_context->mutable_tls_params()->set_tls_maximum_protocol_version(options.tls_version_);"
    },
    {
        "line": 44,
        "fullcodeline": "if (!options.san_.empty()) {"
    },
    {
        "line": 66,
        "fullcodeline": "if (!options.sni_.empty()) {"
    },
    {
        "line": 11,
        "fullcodeline": "yaml_plain += R\"EOF("
    },
    {
        "line": 40,
        "fullcodeline": "common_context->add_alpn_protocols(Http::Utility::AlpnNames::get().Http2);"
    },
    {
        "line": 41,
        "fullcodeline": "common_context->add_alpn_protocols(Http::Utility::AlpnNames::get().Http11);"
    },
    {
        "line": 42,
        "fullcodeline": "common_context->add_alpn_protocols(Http::Utility::AlpnNames::get().Http3);"
    },
    {
        "line": 45,
        "fullcodeline": "envoy::extensions::transport_sockets::tls::v3::SubjectAltNameMatcher* matcher ="
    },
    {
        "line": 47,
        "fullcodeline": "matcher->mutable_matcher()->set_exact(options.san_);"
    },
    {
        "line": 48,
        "fullcodeline": "matcher->set_san_type("
    },
    {
        "line": 50,
        "fullcodeline": "matcher = common_context->mutable_validation_context()->add_match_typed_subject_alt_names();"
    },
    {
        "line": 51,
        "fullcodeline": "matcher->mutable_matcher()->set_exact(options.san_);"
    },
    {
        "line": 52,
        "fullcodeline": "matcher->set_san_type("
    },
    {
        "line": 54,
        "fullcodeline": "matcher = common_context->mutable_validation_context()->add_match_typed_subject_alt_names();"
    },
    {
        "line": 55,
        "fullcodeline": "matcher->mutable_matcher()->set_exact(options.san_);"
    },
    {
        "line": 56,
        "fullcodeline": "matcher->set_san_type("
    },
    {
        "line": 58,
        "fullcodeline": "matcher = common_context->mutable_validation_context()->add_match_typed_subject_alt_names();"
    },
    {
        "line": 59,
        "fullcodeline": "matcher->mutable_matcher()->set_exact(options.san_);"
    },
    {
        "line": 60,
        "fullcodeline": "matcher->set_san_type("
    },
    {
        "line": 64,
        "fullcodeline": "common_context->mutable_tls_params()->add_cipher_suites(cipher_suite);"
    },
    {
        "line": 67,
        "fullcodeline": "tls_context.set_sni(options.sni_);"
    },
    {
        "line": 46,
        "fullcodeline": "common_context->mutable_validation_context()->add_match_typed_subject_alt_names();"
    },
    {
        "line": 19,
        "fullcodeline": "yaml_plain += R\"EOF("
    },
    {
        "line": 27,
        "fullcodeline": "yaml_plain += R\"EOF("
    }
]