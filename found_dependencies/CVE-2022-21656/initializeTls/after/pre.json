[
    {
        "line": 4,
        "fullcodeline": "common_tls_context.add_alpn_protocols(Http::Utility::AlpnNames::get().Http2);"
    },
    {
        "line": 5,
        "fullcodeline": "common_tls_context.add_alpn_protocols(Http::Utility::AlpnNames::get().Http11);"
    },
    {
        "line": 7,
        "fullcodeline": "auto* validation_context = common_tls_context.mutable_validation_context();"
    },
    {
        "line": 16,
        "fullcodeline": "validation_context->set_allow_expired_certificate(options.allow_expired_certificate_);"
    },
    {
        "line": 20,
        "fullcodeline": "common_tls_context.mutable_tls_params()->set_tls_maximum_protocol_version("
    },
    {
        "line": 21,
        "fullcodeline": "options.tlsv1_3_ ? envoy::extensions::transport_sockets::tls::v3::TlsParameters::TLSv1_3"
    },
    {
        "line": 45,
        "fullcodeline": "if (!options.san_matchers_.empty()) {"
    },
    {
        "line": 9,
        "fullcodeline": "validation_context->set_allocated_custom_validator_config(options.custom_validator_config_);"
    },
    {
        "line": 24,
        "fullcodeline": "auto* tls_certificate = common_tls_context.add_tls_certificates();"
    },
    {
        "line": 25,
        "fullcodeline": "tls_certificate->mutable_certificate_chain()->set_filename("
    },
    {
        "line": 27,
        "fullcodeline": "tls_certificate->mutable_private_key()->set_filename("
    },
    {
        "line": 35,
        "fullcodeline": "auto* tls_certificate = common_tls_context.add_tls_certificates();"
    },
    {
        "line": 36,
        "fullcodeline": "tls_certificate->mutable_certificate_chain()->set_filename("
    },
    {
        "line": 38,
        "fullcodeline": "tls_certificate->mutable_private_key()->set_filename("
    },
    {
        "line": 46,
        "fullcodeline": "*validation_context->mutable_match_typed_subject_alt_names() = {options.san_matchers_.begin(),"
    },
    {
        "line": 11,
        "fullcodeline": "validation_context->mutable_trusted_ca()->set_filename("
    },
    {
        "line": 13,
        "fullcodeline": "validation_context->add_verify_certificate_hash("
    },
    {
        "line": 26,
        "fullcodeline": "TestEnvironment::runfilesPath(\"test/config/integration/certs/servercert.pem\"));"
    },
    {
        "line": 28,
        "fullcodeline": "TestEnvironment::runfilesPath(\"test/config/integration/certs/serverkey.pem\"));"
    },
    {
        "line": 37,
        "fullcodeline": "TestEnvironment::runfilesPath(\"test/config/integration/certs/server_ecdsacert.pem\"));"
    },
    {
        "line": 39,
        "fullcodeline": "TestEnvironment::runfilesPath(\"test/config/integration/certs/server_ecdsakey.pem\"));"
    },
    {
        "line": 12,
        "fullcodeline": "TestEnvironment::runfilesPath(\"test/config/integration/certs/cacert.pem\"));"
    },
    {
        "line": 14,
        "fullcodeline": "options.expect_client_ecdsa_cert_ ? TEST_CLIENT_ECDSA_CERT_HASH : TEST_CLIENT_CERT_HASH);"
    },
    {
        "line": 30,
        "fullcodeline": "tls_certificate->mutable_ocsp_staple()->set_filename("
    },
    {
        "line": 41,
        "fullcodeline": "tls_certificate->mutable_ocsp_staple()->set_filename(TestEnvironment::runfilesPath("
    },
    {
        "line": 31,
        "fullcodeline": "TestEnvironment::runfilesPath(\"test/config/integration/certs/server_ocsp_resp.der\"));"
    }
]