[
    {
        "line": 4,
        "fullcodeline": "ASSERT(config != nullptr);"
    },
    {
        "line": 5,
        "fullcodeline": "allow_expired_certificate_ = config->allowExpiredCertificate();"
    },
    {
        "line": 8,
        "fullcodeline": "Config::Utility::translateOpaqueConfig(config->customValidatorConfig().value().typed_config(),"
    },
    {
        "line": 24,
        "fullcodeline": "const auto size = message.trust_domains().size();"
    },
    {
        "line": 25,
        "fullcodeline": "trust_bundle_stores_.reserve(size);"
    },
    {
        "line": 11,
        "fullcodeline": "if (!config->subjectAltNameMatchers().empty()) {"
    },
    {
        "line": 32,
        "fullcodeline": "auto cert = Config::DataSource::read(domain.trust_bundle(), true, config->api());"
    },
    {
        "line": 33,
        "fullcodeline": "bssl::UniquePtr<BIO> bio(BIO_new_mem_buf(const_cast<char*>(cert.data()), cert.size()));"
    },
    {
        "line": 34,
        "fullcodeline": "RELEASE_ASSERT(bio != nullptr, \"\");"
    },
    {
        "line": 35,
        "fullcodeline": "bssl::UniquePtr<STACK_OF(X509_INFO)> list("
    },
    {
        "line": 42,
        "fullcodeline": "auto store = X509StorePtr(X509_STORE_new());"
    },
    {
        "line": 43,
        "fullcodeline": "bool has_crl = false;"
    },
    {
        "line": 44,
        "fullcodeline": "bool ca_loaded = false;"
    },
    {
        "line": 70,
        "fullcodeline": "trust_bundle_stores_[domain.name()] = std::move(store);"
    },
    {
        "line": 27,
        "fullcodeline": "if (trust_bundle_stores_.find(domain.name()) != trust_bundle_stores_.end()) {"
    },
    {
        "line": 37,
        "fullcodeline": "if (list == nullptr || sk_X509_INFO_num(list.get()) == 0) {"
    },
    {
        "line": 36,
        "fullcodeline": "PEM_X509_INFO_read_bio(bio.get(), nullptr, nullptr, nullptr));"
    },
    {
        "line": 68,
        "fullcodeline": "X509_STORE_set_flags(store.get(), X509_V_FLAG_CRL_CHECK | X509_V_FLAG_CRL_CHECK_ALL);"
    },
    {
        "line": 13,
        "fullcodeline": "if (matcher.san_type() =="
    },
    {
        "line": 28,
        "fullcodeline": "throw EnvoyException(absl::StrCat("
    },
    {
        "line": 19,
        "fullcodeline": "subject_alt_name_matchers_.emplace_back(createStringSanMatcher(matcher));"
    },
    {
        "line": 39,
        "fullcodeline": "absl::StrCat(\"Failed to load trusted CA certificate for \", domain.name()));"
    },
    {
        "line": 47,
        "fullcodeline": "X509_STORE_add_cert(store.get(), item->x509);"
    },
    {
        "line": 48,
        "fullcodeline": "ca_certs_.push_back(bssl::UniquePtr<X509>(item->x509));"
    },
    {
        "line": 49,
        "fullcodeline": "X509_up_ref(item->x509);"
    },
    {
        "line": 63,
        "fullcodeline": "has_crl = true;"
    },
    {
        "line": 64,
        "fullcodeline": "X509_STORE_add_crl(store.get(), item->crl);"
    },
    {
        "line": 29,
        "fullcodeline": "\"Multiple trust bundles are given for one trust domain for \", domain.name()));"
    },
    {
        "line": 50,
        "fullcodeline": "if (!ca_loaded) {"
    },
    {
        "line": 54,
        "fullcodeline": "ca_loaded = true;"
    },
    {
        "line": 55,
        "fullcodeline": "ca_file_name_ = absl::StrCat(domain.name(), \": \","
    },
    {
        "line": 56,
        "fullcodeline": "domain.trust_bundle().filename().empty()"
    },
    {
        "line": 58,
        "fullcodeline": ": domain.trust_bundle().filename());"
    }
]