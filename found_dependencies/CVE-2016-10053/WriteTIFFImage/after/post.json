[
    {
        "line": 61,
        "fullcodeline": "assert(image_info != (const ImageInfo *) NULL);"
    },
    {
        "line": 62,
        "fullcodeline": "assert(image_info->signature == MagickCoreSignature);"
    },
    {
        "line": 63,
        "fullcodeline": "assert(image != (Image *) NULL);"
    },
    {
        "line": 64,
        "fullcodeline": "assert(image->signature == MagickCoreSignature);"
    },
    {
        "line": 67,
        "fullcodeline": "assert(exception != (ExceptionInfo *) NULL);"
    },
    {
        "line": 68,
        "fullcodeline": "assert(exception->signature == MagickCoreSignature);"
    },
    {
        "line": 69,
        "fullcodeline": "status=OpenBlob(image_info,image,WriteBinaryBlobMode,exception);"
    },
    {
        "line": 72,
        "fullcodeline": "(void) SetMagickThreadValue(tiff_exception,exception);"
    },
    {
        "line": 73,
        "fullcodeline": "endian_type=UndefinedEndian;"
    },
    {
        "line": 74,
        "fullcodeline": "option=GetImageOption(image_info,\"tiff:endian\");"
    },
    {
        "line": 97,
        "fullcodeline": "tiff=TIFFClientOpen(image->filename,mode,(thandle_t) image,TIFFReadBlob,"
    },
    {
        "line": 102,
        "fullcodeline": "scene=0;"
    },
    {
        "line": 103,
        "fullcodeline": "debug=IsEventLogging();"
    },
    {
        "line": 104,
        "fullcodeline": "(void) debug;"
    },
    {
        "line": 857,
        "fullcodeline": "TIFFClose(tiff);"
    },
    {
        "line": 65,
        "fullcodeline": "if (image->debug != MagickFalse)"
    },
    {
        "line": 70,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 75,
        "fullcodeline": "if (option != (const char *) NULL)"
    },
    {
        "line": 100,
        "fullcodeline": "if (tiff == (TIFF *) NULL)"
    },
    {
        "line": 856,
        "fullcodeline": "} while (image_info->adjoin != MagickFalse);"
    },
    {
        "line": 66,
        "fullcodeline": "(void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",image->filename);"
    },
    {
        "line": 84,
        "fullcodeline": "case LSBEndian: mode=\"wl\"; break;"
    },
    {
        "line": 85,
        "fullcodeline": "case MSBEndian: mode=\"wb\"; break;"
    },
    {
        "line": 86,
        "fullcodeline": "default: mode=\"w\"; break;"
    },
    {
        "line": 113,
        "fullcodeline": "compression=UndefinedCompression;"
    },
    {
        "line": 136,
        "fullcodeline": "quantum_info=AcquireQuantumInfo(image_info,image);"
    },
    {
        "line": 153,
        "fullcodeline": "(void) TIFFSetField(tiff,TIFFTAG_IMAGELENGTH,(uint32) image->rows);"
    },
    {
        "line": 154,
        "fullcodeline": "(void) TIFFSetField(tiff,TIFFTAG_IMAGEWIDTH,(uint32) image->columns);"
    },
    {
        "line": 317,
        "fullcodeline": "(void) TIFFGetFieldDefaulted(tiff,TIFFTAG_FILLORDER,&endian);"
    },
    {
        "line": 331,
        "fullcodeline": "option=GetImageOption(image_info,\"tiff:fill-order\");"
    },
    {
        "line": 339,
        "fullcodeline": "(void) TIFFSetField(tiff,TIFFTAG_COMPRESSION,compress_tag);"
    },
    {
        "line": 340,
        "fullcodeline": "(void) TIFFSetField(tiff,TIFFTAG_FILLORDER,endian);"
    },
    {
        "line": 341,
        "fullcodeline": "(void) TIFFSetField(tiff,TIFFTAG_BITSPERSAMPLE,quantum_info->depth);"
    },
    {
        "line": 371,
        "fullcodeline": "(void) TIFFSetField(tiff,TIFFTAG_PHOTOMETRIC,photometric);"
    },
    {
        "line": 394,
        "fullcodeline": "(void) TIFFSetField(tiff,TIFFTAG_ORIENTATION,ORIENTATION_TOPLEFT);"
    },
    {
        "line": 395,
        "fullcodeline": "(void) TIFFSetField(tiff,TIFFTAG_PLANARCONFIG,PLANARCONFIG_CONTIG);"
    },
    {
        "line": 400,
        "fullcodeline": "rows_per_strip=1;"
    },
    {
        "line": 403,
        "fullcodeline": "option=GetImageOption(image_info,\"tiff:rows-per-strip\");"
    },
    {
        "line": 516,
        "fullcodeline": "(void) TIFFSetField(tiff,TIFFTAG_ROWSPERSTRIP,rows_per_strip);"
    },
    {
        "line": 582,
        "fullcodeline": "(void) TIFFSetProfiles(tiff,image);"
    },
    {
        "line": 595,
        "fullcodeline": "(void) TIFFSetProperties(tiff,image_info,image,exception);"
    },
    {
        "line": 596,
        "fullcodeline": "DisableMSCWarning(4127)"
    },
    {
        "line": 605,
        "fullcodeline": "quantum_info->endian=LSBEndian;"
    },
    {
        "line": 606,
        "fullcodeline": "pixels=(unsigned char *) GetQuantumPixels(quantum_info);"
    },
    {
        "line": 607,
        "fullcodeline": "tiff_info.scanline=(unsigned char *) GetQuantumPixels(quantum_info);"
    },
    {
        "line": 840,
        "fullcodeline": "quantum_info=DestroyQuantumInfo(quantum_info);"
    },
    {
        "line": 843,
        "fullcodeline": "DestroyTIFFInfo(&tiff_info);"
    },
    {
        "line": 844,
        "fullcodeline": "DisableMSCWarning(4127)"
    },
    {
        "line": 848,
        "fullcodeline": "(void) TIFFWriteDirectory(tiff);"
    },
    {
        "line": 849,
        "fullcodeline": "image=SyncNextImageInList(image);"
    },
    {
        "line": 852,
        "fullcodeline": "status=SetImageProgress(image,SaveImagesTag,scene++,"
    },
    {
        "line": 77,
        "fullcodeline": "if (LocaleNCompare(option,\"msb\",3) == 0)"
    },
    {
        "line": 79,
        "fullcodeline": "if (LocaleNCompare(option,\"lsb\",3) == 0)"
    },
    {
        "line": 110,
        "fullcodeline": "if ((image_info->type != UndefinedType) &&"
    },
    {
        "line": 114,
        "fullcodeline": "if (image->compression != JPEGCompression)"
    },
    {
        "line": 116,
        "fullcodeline": "if (image_info->compression != UndefinedCompression)"
    },
    {
        "line": 137,
        "fullcodeline": "if (quantum_info == (QuantumInfo *) NULL)"
    },
    {
        "line": 139,
        "fullcodeline": "if ((image->storage_class != PseudoClass) && (image->depth >= 32) &&"
    },
    {
        "line": 147,
        "fullcodeline": "if ((LocaleCompare(image_info->magick,\"PTIF\") == 0) &&"
    },
    {
        "line": 150,
        "fullcodeline": "if ((image->columns != (uint32) image->columns) ||"
    },
    {
        "line": 255,
        "fullcodeline": "if (image->colorspace == CMYKColorspace)"
    },
    {
        "line": 318,
        "fullcodeline": "if ((compress_tag == COMPRESSION_CCITTFAX3) &&"
    },
    {
        "line": 332,
        "fullcodeline": "if (option != (const char *) NULL)"
    },
    {
        "line": 342,
        "fullcodeline": "if (image->alpha_trait != UndefinedPixelTrait)"
    },
    {
        "line": 396,
        "fullcodeline": "if (photometric == PHOTOMETRIC_RGB)"
    },
    {
        "line": 401,
        "fullcodeline": "if (TIFFScanlineSize(tiff) != 0)"
    },
    {
        "line": 404,
        "fullcodeline": "if (option != (const char *) NULL)"
    },
    {
        "line": 512,
        "fullcodeline": "if (rows_per_strip < 1)"
    },
    {
        "line": 514,
        "fullcodeline": "if ((image->rows/rows_per_strip) >= (1UL << 15))"
    },
    {
        "line": 517,
        "fullcodeline": "if ((image->resolution.x != 0.0) && (image->resolution.y != 0.0))"
    },
    {
        "line": 553,
        "fullcodeline": "if (image->chromaticity.white_point.x != 0.0)"
    },
    {
        "line": 572,
        "fullcodeline": "if ((LocaleCompare(image_info->magick,\"PTIF\") != 0) &&"
    },
    {
        "line": 580,
        "fullcodeline": "if (image->orientation != UndefinedOrientation)"
    },
    {
        "line": 588,
        "fullcodeline": "page=(uint16) scene;"
    },
    {
        "line": 589,
        "fullcodeline": "pages=(uint16) GetImageListLength(image);"
    },
    {
        "line": 593,
        "fullcodeline": "(void) TIFFSetField(tiff,TIFFTAG_PAGENUMBER,page,pages);"
    },
    {
        "line": 603,
        "fullcodeline": "if (GetTIFFInfo(image_info,tiff,&tiff_info) == MagickFalse)"
    },
    {
        "line": 841,
        "fullcodeline": "if (image->colorspace == LabColorspace)"
    },
    {
        "line": 845,
        "fullcodeline": "if (0 && (image_info->verbose != MagickFalse))"
    },
    {
        "line": 850,
        "fullcodeline": "if (image == (Image *) NULL)"
    },
    {
        "line": 854,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 78,
        "fullcodeline": "endian_type=MSBEndian;"
    },
    {
        "line": 80,
        "fullcodeline": "endian_type=LSBEndian;;"
    },
    {
        "line": 111,
        "fullcodeline": "(image_info->type != OptimizeType))"
    },
    {
        "line": 112,
        "fullcodeline": "(void) SetImageType(image,image_info->type,exception);"
    },
    {
        "line": 115,
        "fullcodeline": "compression=image->compression;"
    },
    {
        "line": 117,
        "fullcodeline": "compression=image_info->compression;"
    },
    {
        "line": 138,
        "fullcodeline": "ThrowWriterException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 141,
        "fullcodeline": "(IsHighDynamicRangeImage(image,exception) != MagickFalse))"
    },
    {
        "line": 143,
        "fullcodeline": "status=SetQuantumFormat(image,quantum_info,FloatingPointQuantumFormat);"
    },
    {
        "line": 148,
        "fullcodeline": "(GetPreviousImageInList(image) != (Image *) NULL))"
    },
    {
        "line": 149,
        "fullcodeline": "(void) TIFFSetField(tiff,TIFFTAG_SUBFILETYPE,FILETYPE_REDUCEDIMAGE);"
    },
    {
        "line": 151,
        "fullcodeline": "(image->rows != (uint32) image->rows))"
    },
    {
        "line": 152,
        "fullcodeline": "ThrowWriterException(ImageError,\"WidthOrHeightExceedsLimit\");"
    },
    {
        "line": 257,
        "fullcodeline": "photometric=PHOTOMETRIC_SEPARATED;"
    },
    {
        "line": 258,
        "fullcodeline": "(void) TIFFSetField(tiff,TIFFTAG_SAMPLESPERPIXEL,4);"
    },
    {
        "line": 259,
        "fullcodeline": "(void) TIFFSetField(tiff,TIFFTAG_INKSET,INKSET_CMYK);"
    },
    {
        "line": 319,
        "fullcodeline": "(photometric != PHOTOMETRIC_MINISWHITE))"
    },
    {
        "line": 321,
        "fullcodeline": "compress_tag=COMPRESSION_NONE;"
    },
    {
        "line": 322,
        "fullcodeline": "endian=FILLORDER_MSB2LSB;"
    },
    {
        "line": 346,
        "fullcodeline": "sample_info[1],"
    },
    {
        "line": 352,
        "fullcodeline": "extra_samples=1;"
    },
    {
        "line": 353,
        "fullcodeline": "sample_info[0]=EXTRASAMPLE_UNASSALPHA;"
    },
    {
        "line": 354,
        "fullcodeline": "option=GetImageOption(image_info,\"tiff:alpha\");"
    },
    {
        "line": 363,
        "fullcodeline": "(void) TIFFGetFieldDefaulted(tiff,TIFFTAG_SAMPLESPERPIXEL,"
    },
    {
        "line": 365,
        "fullcodeline": "(void) TIFFSetField(tiff,TIFFTAG_SAMPLESPERPIXEL,samples_per_pixel+1);"
    },
    {
        "line": 366,
        "fullcodeline": "(void) TIFFSetField(tiff,TIFFTAG_EXTRASAMPLES,extra_samples,"
    },
    {
        "line": 402,
        "fullcodeline": "rows_per_strip=TIFFDefaultStripSize(tiff,0);"
    },
    {
        "line": 405,
        "fullcodeline": "rows_per_strip=(size_t) strtol(option,(char **) NULL,10);"
    },
    {
        "line": 513,
        "fullcodeline": "rows_per_strip=1;"
    },
    {
        "line": 515,
        "fullcodeline": "rows_per_strip=(uint32) (image->rows >> 15);"
    },
    {
        "line": 525,
        "fullcodeline": "units=RESUNIT_NONE;"
    },
    {
        "line": 530,
        "fullcodeline": "(void) TIFFSetField(tiff,TIFFTAG_RESOLUTIONUNIT,(uint16) units);"
    },
    {
        "line": 531,
        "fullcodeline": "(void) TIFFSetField(tiff,TIFFTAG_XRESOLUTION,image->resolution.x);"
    },
    {
        "line": 532,
        "fullcodeline": "(void) TIFFSetField(tiff,TIFFTAG_YRESOLUTION,image->resolution.y);"
    },
    {
        "line": 556,
        "fullcodeline": "chromaticity[6];"
    },
    {
        "line": 567,
        "fullcodeline": "(void) TIFFSetField(tiff,TIFFTAG_PRIMARYCHROMATICITIES,chromaticity);"
    },
    {
        "line": 568,
        "fullcodeline": "chromaticity[0]=(float) image->chromaticity.white_point.x;"
    },
    {
        "line": 570,
        "fullcodeline": "(void) TIFFSetField(tiff,TIFFTAG_WHITEPOINT,chromaticity);"
    },
    {
        "line": 573,
        "fullcodeline": "(image_info->adjoin != MagickFalse) && (GetImageListLength(image) > 1))"
    },
    {
        "line": 575,
        "fullcodeline": "(void) TIFFSetField(tiff,TIFFTAG_SUBFILETYPE,FILETYPE_PAGE);"
    },
    {
        "line": 581,
        "fullcodeline": "(void) TIFFSetField(tiff,TIFFTAG_ORIENTATION,(uint16) image->orientation);"
    },
    {
        "line": 590,
        "fullcodeline": "if ((LocaleCompare(image_info->magick,\"PTIF\") != 0) &&"
    },
    {
        "line": 604,
        "fullcodeline": "ThrowWriterException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 842,
        "fullcodeline": "DecodeLabImage(image,exception);"
    },
    {
        "line": 853,
        "fullcodeline": "GetImageListLength(image));"
    },
    {
        "line": 123,
        "fullcodeline": "(void) SetImageType(image,BilevelType,exception);"
    },
    {
        "line": 124,
        "fullcodeline": "(void) SetImageDepth(image,1,exception);"
    },
    {
        "line": 129,
        "fullcodeline": "(void) SetImageStorageClass(image,DirectClass,exception);"
    },
    {
        "line": 130,
        "fullcodeline": "(void) SetImageDepth(image,8,exception);"
    },
    {
        "line": 140,
        "fullcodeline": "(quantum_info->format == UndefinedQuantumFormat) &&"
    },
    {
        "line": 144,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 159,
        "fullcodeline": "compress_tag=COMPRESSION_CCITTFAX3;"
    },
    {
        "line": 160,
        "fullcodeline": "SetQuantumMinIsWhite(quantum_info,MagickTrue);"
    },
    {
        "line": 165,
        "fullcodeline": "compress_tag=COMPRESSION_CCITTFAX4;"
    },
    {
        "line": 166,
        "fullcodeline": "SetQuantumMinIsWhite(quantum_info,MagickTrue);"
    },
    {
        "line": 178,
        "fullcodeline": "compress_tag=COMPRESSION_JPEG;"
    },
    {
        "line": 190,
        "fullcodeline": "compress_tag=COMPRESSION_LZW;"
    },
    {
        "line": 195,
        "fullcodeline": "compress_tag=COMPRESSION_PACKBITS;"
    },
    {
        "line": 200,
        "fullcodeline": "compress_tag=COMPRESSION_ADOBE_DEFLATE;"
    },
    {
        "line": 206,
        "fullcodeline": "compress_tag=COMPRESSION_NONE;"
    },
    {
        "line": 246,
        "fullcodeline": "(void) ThrowMagickException(exception,GetMagickModule(),CoderError,"
    },
    {
        "line": 249,
        "fullcodeline": "compress_tag=COMPRESSION_NONE;"
    },
    {
        "line": 250,
        "fullcodeline": "compression=NoCompression;"
    },
    {
        "line": 281,
        "fullcodeline": "(void) TIFFSetField(tiff,TIFFTAG_SAMPLESPERPIXEL,3);"
    },
    {
        "line": 334,
        "fullcodeline": "if (LocaleNCompare(option,\"msb\",3) == 0)"
    },
    {
        "line": 336,
        "fullcodeline": "if (LocaleNCompare(option,\"lsb\",3) == 0)"
    },
    {
        "line": 355,
        "fullcodeline": "if (option != (const char *) NULL)"
    },
    {
        "line": 368,
        "fullcodeline": "if (sample_info[0] == EXTRASAMPLE_ASSOCALPHA)"
    },
    {
        "line": 376,
        "fullcodeline": "(void) TIFFSetField(tiff,TIFFTAG_SAMPLEFORMAT,SAMPLEFORMAT_IEEEFP);"
    },
    {
        "line": 377,
        "fullcodeline": "(void) TIFFSetField(tiff,TIFFTAG_SMINSAMPLEVALUE,quantum_info->minimum);"
    },
    {
        "line": 378,
        "fullcodeline": "(void) TIFFSetField(tiff,TIFFTAG_SMAXSAMPLEVALUE,quantum_info->maximum);"
    },
    {
        "line": 383,
        "fullcodeline": "(void) TIFFSetField(tiff,TIFFTAG_SAMPLEFORMAT,SAMPLEFORMAT_INT);"
    },
    {
        "line": 388,
        "fullcodeline": "(void) TIFFSetField(tiff,TIFFTAG_SAMPLEFORMAT,SAMPLEFORMAT_UINT);"
    },
    {
        "line": 397,
        "fullcodeline": "if ((image_info->interlace == PlaneInterlace) ||"
    },
    {
        "line": 460,
        "fullcodeline": "rows_per_strip=(uint32) image->rows;"
    },
    {
        "line": 461,
        "fullcodeline": "(void) TIFFGetFieldDefaulted(tiff,TIFFTAG_BITSPERSAMPLE,"
    },
    {
        "line": 467,
        "fullcodeline": "(void) TIFFSetField(tiff,TIFFTAG_ZIPQUALITY,(long) ("
    },
    {
        "line": 477,
        "fullcodeline": "rows_per_strip=(uint32) image->rows;"
    },
    {
        "line": 478,
        "fullcodeline": "(void) TIFFSetField(tiff,TIFFTAG_GROUP3OPTIONS,4);"
    },
    {
        "line": 483,
        "fullcodeline": "rows_per_strip=(uint32) image->rows;"
    },
    {
        "line": 501,
        "fullcodeline": "(void) TIFFGetFieldDefaulted(tiff,TIFFTAG_BITSPERSAMPLE,"
    },
    {
        "line": 526,
        "fullcodeline": "if (image->units == PixelsPerInchResolution)"
    },
    {
        "line": 528,
        "fullcodeline": "if (image->units == PixelsPerCentimeterResolution)"
    },
    {
        "line": 533,
        "fullcodeline": "if ((image->page.x < 0) || (image->page.y < 0))"
    },
    {
        "line": 536,
        "fullcodeline": "if ((image->page.x > 0) && (image->resolution.x > 0.0))"
    },
    {
        "line": 544,
        "fullcodeline": "if ((image->page.y > 0) && (image->resolution.y > 0.0))"
    },
    {
        "line": 576,
        "fullcodeline": "if (image->scene != 0)"
    },
    {
        "line": 591,
        "fullcodeline": "(image_info->adjoin != MagickFalse) && (pages > 1))"
    },
    {
        "line": 592,
        "fullcodeline": "(void) TIFFSetField(tiff,TIFFTAG_SUBFILETYPE,FILETYPE_PAGE);"
    },
    {
        "line": 741,
        "fullcodeline": "quantum_type=CMYKQuantum;"
    },
    {
        "line": 778,
        "fullcodeline": "red=(uint16 *) AcquireQuantumMemory(65536,sizeof(*red));"
    },
    {
        "line": 779,
        "fullcodeline": "green=(uint16 *) AcquireQuantumMemory(65536,sizeof(*green));"
    },
    {
        "line": 780,
        "fullcodeline": "blue=(uint16 *) AcquireQuantumMemory(65536,sizeof(*blue));"
    },
    {
        "line": 787,
        "fullcodeline": "(void) ResetMagickMemory(red,0,65536*sizeof(*red));"
    },
    {
        "line": 788,
        "fullcodeline": "(void) ResetMagickMemory(green,0,65536*sizeof(*green));"
    },
    {
        "line": 789,
        "fullcodeline": "(void) ResetMagickMemory(blue,0,65536*sizeof(*blue));"
    },
    {
        "line": 796,
        "fullcodeline": "(void) TIFFSetField(tiff,TIFFTAG_COLORMAP,red,green,blue);"
    },
    {
        "line": 797,
        "fullcodeline": "red=(uint16 *) RelinquishMagickMemory(red);"
    },
    {
        "line": 798,
        "fullcodeline": "green=(uint16 *) RelinquishMagickMemory(green);"
    },
    {
        "line": 799,
        "fullcodeline": "blue=(uint16 *) RelinquishMagickMemory(blue);"
    },
    {
        "line": 806,
        "fullcodeline": "quantum_type=IndexQuantum;"
    },
    {
        "line": 145,
        "fullcodeline": "ThrowWriterException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 266,
        "fullcodeline": "if (image->colorspace == LabColorspace)"
    },
    {
        "line": 282,
        "fullcodeline": "if ((image_info->type != TrueColorType) &&"
    },
    {
        "line": 325,
        "fullcodeline": "if ((compress_tag == COMPRESSION_CCITTFAX4) &&"
    },
    {
        "line": 335,
        "fullcodeline": "endian=FILLORDER_MSB2LSB;"
    },
    {
        "line": 337,
        "fullcodeline": "endian=FILLORDER_LSB2MSB;"
    },
    {
        "line": 369,
        "fullcodeline": "SetQuantumAlphaType(quantum_info,AssociatedQuantumAlpha);"
    },
    {
        "line": 398,
        "fullcodeline": "(image_info->interlace == PartitionInterlace))"
    },
    {
        "line": 399,
        "fullcodeline": "(void) TIFFSetField(tiff,TIFFTAG_PLANARCONFIG,PLANARCONFIG_SEPARATE);"
    },
    {
        "line": 463,
        "fullcodeline": "if (((photometric == PHOTOMETRIC_RGB) ||"
    },
    {
        "line": 503,
        "fullcodeline": "if (((photometric == PHOTOMETRIC_RGB) ||"
    },
    {
        "line": 527,
        "fullcodeline": "units=RESUNIT_INCH;"
    },
    {
        "line": 529,
        "fullcodeline": "units=RESUNIT_CENTIMETER;"
    },
    {
        "line": 534,
        "fullcodeline": "(void) ThrowMagickException(exception,GetMagickModule(),CoderError,"
    },
    {
        "line": 541,
        "fullcodeline": "(void) TIFFSetField(tiff,TIFFTAG_XPOSITION,(float) image->page.x/"
    },
    {
        "line": 549,
        "fullcodeline": "(void) TIFFSetField(tiff,TIFFTAG_YPOSITION,(float) image->page.y/"
    },
    {
        "line": 577,
        "fullcodeline": "(void) TIFFSetField(tiff,TIFFTAG_PAGENUMBER,(uint16) image->scene,"
    },
    {
        "line": 742,
        "fullcodeline": "if (image->alpha_trait != UndefinedPixelTrait)"
    },
    {
        "line": 744,
        "fullcodeline": "if (image->colorspace != CMYKColorspace)"
    },
    {
        "line": 746,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 781,
        "fullcodeline": "if ((red == (uint16 *) NULL) || (green == (uint16 *) NULL) ||"
    },
    {
        "line": 790,
        "fullcodeline": "for (i=0; i < (ssize_t) image->colors; i++)"
    },
    {
        "line": 807,
        "fullcodeline": "if (image->alpha_trait != UndefinedPixelTrait)"
    },
    {
        "line": 817,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 247,
        "fullcodeline": "\"CompressionNotSupported\",\"`%s'\",CommandOptionToMnemonic("
    },
    {
        "line": 268,
        "fullcodeline": "photometric=PHOTOMETRIC_CIELAB;"
    },
    {
        "line": 269,
        "fullcodeline": "EncodeLabImage(image,exception);"
    },
    {
        "line": 283,
        "fullcodeline": "(image_info->type != TrueColorAlphaType))"
    },
    {
        "line": 326,
        "fullcodeline": "(photometric != PHOTOMETRIC_MINISWHITE))"
    },
    {
        "line": 328,
        "fullcodeline": "compress_tag=COMPRESSION_NONE;"
    },
    {
        "line": 329,
        "fullcodeline": "endian=FILLORDER_MSB2LSB;"
    },
    {
        "line": 357,
        "fullcodeline": "if (LocaleCompare(option,\"associated\") == 0)"
    },
    {
        "line": 465,
        "fullcodeline": "((bits_per_sample == 8) || (bits_per_sample == 16)))"
    },
    {
        "line": 466,
        "fullcodeline": "(void) TIFFSetField(tiff,TIFFTAG_PREDICTOR,PREDICTOR_HORIZONTAL);"
    },
    {
        "line": 505,
        "fullcodeline": "((bits_per_sample == 8) || (bits_per_sample == 16)))"
    },
    {
        "line": 506,
        "fullcodeline": "(void) TIFFSetField(tiff,TIFFTAG_PREDICTOR,PREDICTOR_HORIZONTAL);"
    },
    {
        "line": 743,
        "fullcodeline": "quantum_type=CMYKAQuantum;"
    },
    {
        "line": 745,
        "fullcodeline": "(void) TransformImageColorspace(image,CMYKColorspace,exception);"
    },
    {
        "line": 751,
        "fullcodeline": "p=GetVirtualPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 754,
        "fullcodeline": "length=ExportQuantumPixels(image,(CacheView *) NULL,quantum_info,"
    },
    {
        "line": 782,
        "fullcodeline": "(blue == (uint16 *) NULL))"
    },
    {
        "line": 783,
        "fullcodeline": "ThrowWriterException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 792,
        "fullcodeline": "red[i]=ScaleQuantumToShort(image->colormap[i].red);"
    },
    {
        "line": 793,
        "fullcodeline": "green[i]=ScaleQuantumToShort(image->colormap[i].green);"
    },
    {
        "line": 794,
        "fullcodeline": "blue[i]=ScaleQuantumToShort(image->colormap[i].blue);"
    },
    {
        "line": 822,
        "fullcodeline": "p=GetVirtualPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 825,
        "fullcodeline": "length=ExportQuantumPixels(image,(CacheView *) NULL,quantum_info,"
    },
    {
        "line": 248,
        "fullcodeline": "MagickCompressOptions,(ssize_t) compression));"
    },
    {
        "line": 285,
        "fullcodeline": "if ((image_info->type != PaletteType) &&"
    },
    {
        "line": 358,
        "fullcodeline": "sample_info[0]=EXTRASAMPLE_ASSOCALPHA;"
    },
    {
        "line": 464,
        "fullcodeline": "(photometric == PHOTOMETRIC_MINISBLACK)) &&"
    },
    {
        "line": 468,
        "fullcodeline": "image_info->quality == UndefinedCompressionQuality ? 7 :"
    },
    {
        "line": 504,
        "fullcodeline": "(photometric == PHOTOMETRIC_MINISBLACK)) &&"
    },
    {
        "line": 578,
        "fullcodeline": "GetImageListLength(image));"
    },
    {
        "line": 622,
        "fullcodeline": "quantum_type=RGBQuantum;"
    },
    {
        "line": 752,
        "fullcodeline": "if (p == (const Quantum *) NULL)"
    },
    {
        "line": 756,
        "fullcodeline": "if (TIFFWritePixels(tiff,&tiff_info,y,0,image) == -1)"
    },
    {
        "line": 758,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 809,
        "fullcodeline": "if (photometric != PHOTOMETRIC_PALETTE)"
    },
    {
        "line": 823,
        "fullcodeline": "if (p == (const Quantum *) NULL)"
    },
    {
        "line": 827,
        "fullcodeline": "if (TIFFWritePixels(tiff,&tiff_info,y,0,image) == -1)"
    },
    {
        "line": 829,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 272,
        "fullcodeline": "if (image->colorspace == YCbCrColorspace)"
    },
    {
        "line": 286,
        "fullcodeline": "(SetImageGray(image,exception) != MagickFalse))"
    },
    {
        "line": 288,
        "fullcodeline": "photometric=(uint16) (quantum_info->min_is_white !="
    },
    {
        "line": 291,
        "fullcodeline": "(void) TIFFSetField(tiff,TIFFTAG_SAMPLESPERPIXEL,1);"
    },
    {
        "line": 469,
        "fullcodeline": "MagickMin((ssize_t) image_info->quality/10,9)));"
    },
    {
        "line": 623,
        "fullcodeline": "if (image->alpha_trait != UndefinedPixelTrait)"
    },
    {
        "line": 625,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 654,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 667,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 673,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 686,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 692,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 705,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 711,
        "fullcodeline": "if (image->alpha_trait != UndefinedPixelTrait)"
    },
    {
        "line": 725,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 760,
        "fullcodeline": "status=SetImageProgress(image,SaveImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 810,
        "fullcodeline": "quantum_type=GrayAlphaQuantum;"
    },
    {
        "line": 815,
        "fullcodeline": "if (photometric != PHOTOMETRIC_PALETTE)"
    },
    {
        "line": 831,
        "fullcodeline": "status=SetImageProgress(image,SaveImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 274,
        "fullcodeline": "photometric=PHOTOMETRIC_YCBCR;"
    },
    {
        "line": 275,
        "fullcodeline": "(void) TIFFSetField(tiff,TIFFTAG_YCBCRSUBSAMPLING,1,1);"
    },
    {
        "line": 276,
        "fullcodeline": "(void) SetImageStorageClass(image,DirectClass,exception);"
    },
    {
        "line": 277,
        "fullcodeline": "(void) SetImageDepth(image,8,exception);"
    },
    {
        "line": 292,
        "fullcodeline": "if ((image->depth == 1) &&"
    },
    {
        "line": 360,
        "fullcodeline": "if (LocaleCompare(option,\"unspecified\") == 0)"
    },
    {
        "line": 624,
        "fullcodeline": "quantum_type=RGBAQuantum;"
    },
    {
        "line": 630,
        "fullcodeline": "p=GetVirtualPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 633,
        "fullcodeline": "length=ExportQuantumPixels(image,(CacheView *) NULL,quantum_info,"
    },
    {
        "line": 635,
        "fullcodeline": "(void) length;"
    },
    {
        "line": 659,
        "fullcodeline": "p=GetVirtualPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 662,
        "fullcodeline": "length=ExportQuantumPixels(image,(CacheView *) NULL,quantum_info,"
    },
    {
        "line": 669,
        "fullcodeline": "status=SetImageProgress(image,SaveImageTag,100,400);"
    },
    {
        "line": 678,
        "fullcodeline": "p=GetVirtualPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 681,
        "fullcodeline": "length=ExportQuantumPixels(image,(CacheView *) NULL,quantum_info,"
    },
    {
        "line": 688,
        "fullcodeline": "status=SetImageProgress(image,SaveImageTag,200,400);"
    },
    {
        "line": 697,
        "fullcodeline": "p=GetVirtualPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 700,
        "fullcodeline": "length=ExportQuantumPixels(image,(CacheView *) NULL,quantum_info,"
    },
    {
        "line": 707,
        "fullcodeline": "status=SetImageProgress(image,SaveImageTag,300,400);"
    },
    {
        "line": 727,
        "fullcodeline": "status=SetImageProgress(image,SaveImageTag,400,400);"
    },
    {
        "line": 762,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 812,
        "fullcodeline": "quantum_type=IndexAlphaQuantum;"
    },
    {
        "line": 816,
        "fullcodeline": "quantum_type=GrayQuantum;"
    },
    {
        "line": 833,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 280,
        "fullcodeline": "photometric=PHOTOMETRIC_RGB;"
    },
    {
        "line": 293,
        "fullcodeline": "(image->alpha_trait == UndefinedPixelTrait))"
    },
    {
        "line": 294,
        "fullcodeline": "SetImageMonochrome(image,exception);"
    },
    {
        "line": 297,
        "fullcodeline": "if (image->storage_class == PseudoClass)"
    },
    {
        "line": 361,
        "fullcodeline": "sample_info[0]=EXTRASAMPLE_UNSPECIFIED;"
    },
    {
        "line": 631,
        "fullcodeline": "if (p == (const Quantum *) NULL)"
    },
    {
        "line": 636,
        "fullcodeline": "if (TIFFWritePixels(tiff,&tiff_info,y,0,image) == -1)"
    },
    {
        "line": 638,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 660,
        "fullcodeline": "if (p == (const Quantum *) NULL)"
    },
    {
        "line": 664,
        "fullcodeline": "if (TIFFWritePixels(tiff,&tiff_info,y,0,image) == -1)"
    },
    {
        "line": 670,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 679,
        "fullcodeline": "if (p == (const Quantum *) NULL)"
    },
    {
        "line": 683,
        "fullcodeline": "if (TIFFWritePixels(tiff,&tiff_info,y,1,image) == -1)"
    },
    {
        "line": 689,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 698,
        "fullcodeline": "if (p == (const Quantum *) NULL)"
    },
    {
        "line": 702,
        "fullcodeline": "if (TIFFWritePixels(tiff,&tiff_info,y,2,image) == -1)"
    },
    {
        "line": 708,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 712,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 728,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 305,
        "fullcodeline": "(void) TIFFSetField(tiff,TIFFTAG_SAMPLESPERPIXEL,1);"
    },
    {
        "line": 306,
        "fullcodeline": "photometric=PHOTOMETRIC_PALETTE;"
    },
    {
        "line": 307,
        "fullcodeline": "depth=1;"
    },
    {
        "line": 310,
        "fullcodeline": "status=SetQuantumDepth(image,quantum_info,depth);"
    },
    {
        "line": 640,
        "fullcodeline": "status=SetImageProgress(image,SaveImageTag,(MagickOffsetType)"
    },
    {
        "line": 717,
        "fullcodeline": "p=GetVirtualPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 720,
        "fullcodeline": "length=ExportQuantumPixels(image,(CacheView *) NULL,"
    },
    {
        "line": 308,
        "fullcodeline": "while ((GetQuantumRange(depth)+1) < image->colors)"
    },
    {
        "line": 309,
        "fullcodeline": "depth<<=1;"
    },
    {
        "line": 311,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 642,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 718,
        "fullcodeline": "if (p == (const Quantum *) NULL)"
    },
    {
        "line": 722,
        "fullcodeline": "if (TIFFWritePixels(tiff,&tiff_info,y,3,image) == -1)"
    },
    {
        "line": 312,
        "fullcodeline": "ThrowWriterException(ResourceLimitError,"
    }
]