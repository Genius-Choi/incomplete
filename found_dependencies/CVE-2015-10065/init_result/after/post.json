[
    {
        "line": 5,
        "fullcodeline": "DATA* dp = new DATA;"
    },
    {
        "line": 9,
        "fullcodeline": "log_messages.printf(MSG_DEBUG, \"Start\\n\");"
    },
    {
        "line": 11,
        "fullcodeline": "retval = get_output_file_path(result, fi.path);"
    },
    {
        "line": 17,
        "fullcodeline": "f = fopen(fi.path.c_str(), \"r\");"
    },
    {
        "line": 30,
        "fullcodeline": "log_messages.printf(MSG_DEBUG, \"Check result\\n\");"
    },
    {
        "line": 32,
        "fullcodeline": "char buff[256];"
    },
    {
        "line": 34,
        "fullcodeline": "fgets(buff, 256, f);"
    },
    {
        "line": 36,
        "fullcodeline": "pch = strtok(buff, \" ,\");"
    },
    {
        "line": 43,
        "fullcodeline": "pch = strtok(NULL, \",\");"
    },
    {
        "line": 50,
        "fullcodeline": "pch = strtok(NULL, \",\");"
    },
    {
        "line": 57,
        "fullcodeline": "pch = strtok(NULL, \",\");"
    },
    {
        "line": 65,
        "fullcodeline": "log_messages.printf(MSG_DEBUG, \"%s %s %f %f\\n\", dp->receptor, dp->ligand,"
    },
    {
        "line": 73,
        "fullcodeline": "data = (void*) dp;"
    },
    {
        "line": 75,
        "fullcodeline": "fclose(f);"
    },
    {
        "line": 19,
        "fullcodeline": "if (f == NULL) {"
    },
    {
        "line": 37,
        "fullcodeline": "if (pch != NULL) {"
    },
    {
        "line": 44,
        "fullcodeline": "if (pch != NULL) {"
    },
    {
        "line": 51,
        "fullcodeline": "if (pch != NULL) {"
    },
    {
        "line": 58,
        "fullcodeline": "if (pch != NULL) {"
    },
    {
        "line": 67,
        "fullcodeline": "if (strlen(dp->ligand) < 4 || strlen(dp->receptor) < 4) {"
    },
    {
        "line": 13,
        "fullcodeline": "log_messages.printf(MSG_CRITICAL, \"Unable to open file\\n\");"
    },
    {
        "line": 20,
        "fullcodeline": "log_messages.printf(MSG_CRITICAL,"
    },
    {
        "line": 23,
        "fullcodeline": "usleep(1000);"
    },
    {
        "line": 24,
        "fullcodeline": "log_messages.printf(MSG_CRITICAL, \"Try again...\\n\");"
    },
    {
        "line": 25,
        "fullcodeline": "f = fopen(fi.path.c_str(), \"r\");"
    },
    {
        "line": 38,
        "fullcodeline": "dp->receptor = pch;"
    },
    {
        "line": 45,
        "fullcodeline": "dp->ligand = pch;"
    },
    {
        "line": 52,
        "fullcodeline": "dp->seed = strtod(pch, NULL);"
    },
    {
        "line": 59,
        "fullcodeline": "dp->score = atof(pch);"
    },
    {
        "line": 68,
        "fullcodeline": "log_messages.printf(MSG_CRITICAL, \"%s %s Name failed\\n\", dp->receptor,"
    },
    {
        "line": 14,
        "fullcodeline": "return -1;"
    },
    {
        "line": 21,
        "fullcodeline": "\"Open error: %s\\n errno: %s Waiting...\\n\", fi.path.c_str(),"
    },
    {
        "line": 26,
        "fullcodeline": "if (f == NULL) {"
    },
    {
        "line": 40,
        "fullcodeline": "log_messages.printf(MSG_CRITICAL, \"Seek receptor failed\\n\");"
    },
    {
        "line": 47,
        "fullcodeline": "log_messages.printf(MSG_CRITICAL, \"Seek ligand failed\\n\");"
    },
    {
        "line": 54,
        "fullcodeline": "log_messages.printf(MSG_CRITICAL, \"Seek seed failed\\n\");"
    },
    {
        "line": 61,
        "fullcodeline": "log_messages.printf(MSG_CRITICAL, \"Seek score failed\\n\");"
    },
    {
        "line": 70,
        "fullcodeline": "return -1;"
    },
    {
        "line": 41,
        "fullcodeline": "return -1;"
    },
    {
        "line": 48,
        "fullcodeline": "return -1;"
    },
    {
        "line": 55,
        "fullcodeline": "return -1;"
    },
    {
        "line": 62,
        "fullcodeline": "return -1;"
    },
    {
        "line": 27,
        "fullcodeline": "return -1;"
    }
]