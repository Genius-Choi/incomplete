[
    {
        "line": 8,
        "fullcodeline": "form = ShowQuestionForm(request.GET)"
    },
    {
        "line": 9,
        "fullcodeline": "form.full_clean()#always valid"
    },
    {
        "line": 69,
        "fullcodeline": "show_post = None #used for permalinks"
    },
    {
        "line": 118,
        "fullcodeline": "thread = question_post.thread"
    },
    {
        "line": 124,
        "fullcodeline": "logging.debug('answer_sort_method=' + unicode(answer_sort_method))"
    },
    {
        "line": 132,
        "fullcodeline": "question_post.set_cached_comments("
    },
    {
        "line": 139,
        "fullcodeline": "user_votes = {}"
    },
    {
        "line": 140,
        "fullcodeline": "user_post_id_list = list()"
    },
    {
        "line": 155,
        "fullcodeline": "show_comment_position = None"
    },
    {
        "line": 162,
        "fullcodeline": "objects_list = Paginator(answers, const.ANSWERS_PAGE_SIZE)"
    },
    {
        "line": 165,
        "fullcodeline": "page_objects = objects_list.page(show_page)"
    },
    {
        "line": 197,
        "fullcodeline": "paginator_data = {"
    },
    {
        "line": 207,
        "fullcodeline": "paginator_context = functions.setup_paginator(paginator_data)"
    },
    {
        "line": 211,
        "fullcodeline": "favorited = thread.has_favorite_by_user(request.user)"
    },
    {
        "line": 213,
        "fullcodeline": "is_cacheable = True"
    },
    {
        "line": 219,
        "fullcodeline": "initial = {"
    },
    {
        "line": 233,
        "fullcodeline": "answer_form = AnswerForm(initial, user=request.user)"
    },
    {
        "line": 235,
        "fullcodeline": "user_can_post_comment = ("
    },
    {
        "line": 239,
        "fullcodeline": "user_already_gave_answer = False"
    },
    {
        "line": 240,
        "fullcodeline": "previous_answer = None"
    },
    {
        "line": 249,
        "fullcodeline": "data = {"
    },
    {
        "line": 282,
        "fullcodeline": "data.update(context.get_for_tag_editor())"
    },
    {
        "line": 284,
        "fullcodeline": "extra_context = getattr("
    },
    {
        "line": 54,
        "fullcodeline": "if request.path.split('/')[-2] != question_post.slug:"
    },
    {
        "line": 120,
        "fullcodeline": "if getattr(django_settings, 'ASKBOT_MULTILINGUAL', False):"
    },
    {
        "line": 128,
        "fullcodeline": "updated_question_post, answers, post_to_author, published_answer_ids = thread.get_cached_post_data("
    },
    {
        "line": 133,
        "fullcodeline": "updated_question_post.get_cached_comments()"
    },
    {
        "line": 163,
        "fullcodeline": "if show_page > objects_list.num_pages:"
    },
    {
        "line": 169,
        "fullcodeline": "if functions.not_a_robot_request(request):"
    },
    {
        "line": 214,
        "fullcodeline": "if show_page != 1:"
    },
    {
        "line": 236,
        "fullcodeline": "request.user.is_authenticated() and request.user.can_post_comment()"
    },
    {
        "line": 292,
        "fullcodeline": "return render(request, 'question.html', data)"
    },
    {
        "line": 19,
        "fullcodeline": "question_post = models.Post.objects.filter("
    },
    {
        "line": 48,
        "fullcodeline": "question_post.assert_is_visible_to(request.user)"
    },
    {
        "line": 55,
        "fullcodeline": "logging.debug('no slug match!')"
    },
    {
        "line": 56,
        "fullcodeline": "question_url = '?'.join(("
    },
    {
        "line": 91,
        "fullcodeline": "show_post = show_comment.parent"
    },
    {
        "line": 142,
        "fullcodeline": "if request.user.is_authenticated():"
    },
    {
        "line": 143,
        "fullcodeline": "user_votes = Vote.objects.filter("
    },
    {
        "line": 147,
        "fullcodeline": "user_votes = dict(user_votes)"
    },
    {
        "line": 150,
        "fullcodeline": "user_post_id_list = ["
    },
    {
        "line": 157,
        "fullcodeline": "show_page = show_comment.get_page_number(answer_posts=answers)"
    },
    {
        "line": 158,
        "fullcodeline": "show_comment_position = show_comment.get_order_number()"
    },
    {
        "line": 173,
        "fullcodeline": "update_view_count = False"
    },
    {
        "line": 177,
        "fullcodeline": "last_seen = request.session['question_view_times'].get(question_post.id, None)"
    },
    {
        "line": 186,
        "fullcodeline": "request.session['question_view_times'][question_post.id] = \\"
    },
    {
        "line": 190,
        "fullcodeline": "from askbot import tasks"
    },
    {
        "line": 215,
        "fullcodeline": "is_cacheable = False"
    },
    {
        "line": 224,
        "fullcodeline": "if request.user.is_authenticated():"
    },
    {
        "line": 226,
        "fullcodeline": "drafts = models.DraftAnswer.objects.filter("
    },
    {
        "line": 241,
        "fullcodeline": "if request.user.is_authenticated():"
    },
    {
        "line": 280,
        "fullcodeline": "data['sharing_info'] = thread.get_sharing_info()"
    },
    {
        "line": 288,
        "fullcodeline": "extra_context_getter = load_module(extra_context)"
    },
    {
        "line": 289,
        "fullcodeline": "extra_data = extra_context_getter(request, data)"
    },
    {
        "line": 290,
        "fullcodeline": "data.update(extra_data)"
    },
    {
        "line": 60,
        "fullcodeline": "return HttpResponseRedirect(question_url)"
    },
    {
        "line": 89,
        "fullcodeline": "if str(show_comment.thread._question_post().id) != str(id):"
    },
    {
        "line": 121,
        "fullcodeline": "if thread.language_code != translation.get_language():"
    },
    {
        "line": 164,
        "fullcodeline": "return HttpResponseRedirect(question_post.get_absolute_url())"
    },
    {
        "line": 174,
        "fullcodeline": "if 'question_view_times' not in request.session:"
    },
    {
        "line": 179,
        "fullcodeline": "if thread.last_activity_by_id != request.user.id:"
    },
    {
        "line": 191,
        "fullcodeline": "tasks.record_question_visit.delay("
    },
    {
        "line": 198,
        "fullcodeline": "'is_paginated' : (objects_list.count > const.ANSWERS_PAGE_SIZE),"
    },
    {
        "line": 201,
        "fullcodeline": "'has_previous': page_objects.has_previous(),"
    },
    {
        "line": 202,
        "fullcodeline": "'has_next': page_objects.has_next(),"
    },
    {
        "line": 203,
        "fullcodeline": "'previous': page_objects.previous_page_number(),"
    },
    {
        "line": 204,
        "fullcodeline": "'next': page_objects.next_page_number(),"
    },
    {
        "line": 205,
        "fullcodeline": "'base_url' : request.path + '?sort=%s&amp;' % answer_sort_method,"
    },
    {
        "line": 216,
        "fullcodeline": "elif show_comment_position > askbot_settings.MAX_COMMENTS_TO_SHOW:"
    },
    {
        "line": 220,
        "fullcodeline": "'wiki': question_post.wiki and askbot_settings.WIKI_ON,"
    },
    {
        "line": 221,
        "fullcodeline": "'email_notify': thread.is_followed_by(request.user)"
    },
    {
        "line": 230,
        "fullcodeline": "if drafts.count() > 0:"
    },
    {
        "line": 256,
        "fullcodeline": "'thread_is_moderated': thread.is_moderated(),"
    },
    {
        "line": 257,
        "fullcodeline": "'user_is_thread_moderator': thread.has_moderator(request.user),"
    },
    {
        "line": 261,
        "fullcodeline": "'answer_count': thread.get_answer_count(request.user),"
    },
    {
        "line": 267,
        "fullcodeline": "'oldest_answer_id': thread.get_oldest_answer_id(request.user),"
    },
    {
        "line": 271,
        "fullcodeline": "'similar_threads' : thread.get_similar_threads(),"
    },
    {
        "line": 272,
        "fullcodeline": "'language_code': translation.get_language(),"
    },
    {
        "line": 80,
        "fullcodeline": "show_comment = models.Post.objects.get_comments().get(id=show_comment)"
    },
    {
        "line": 94,
        "fullcodeline": "show_comment.assert_is_visible_to(request.user)"
    },
    {
        "line": 108,
        "fullcodeline": "show_post = get_object_or_404(models.Post, post_type='answer', id=show_answer)"
    },
    {
        "line": 160,
        "fullcodeline": "show_page = show_post.get_page_number(answer_posts=answers)"
    },
    {
        "line": 175,
        "fullcodeline": "request.session['question_view_times'] = {}"
    },
    {
        "line": 187,
        "fullcodeline": "datetime.datetime.now()"
    },
    {
        "line": 217,
        "fullcodeline": "is_cacheable = False"
    },
    {
        "line": 50,
        "fullcodeline": "request.user.message_set.create(message = unicode(error))"
    },
    {
        "line": 51,
        "fullcodeline": "return HttpResponseRedirect(reverse('index'))"
    },
    {
        "line": 90,
        "fullcodeline": "return HttpResponseRedirect(show_comment.get_absolute_url())"
    },
    {
        "line": 109,
        "fullcodeline": "if str(show_post.thread._question_post().id) != str(id):"
    },
    {
        "line": 122,
        "fullcodeline": "return HttpResponseRedirect(thread.get_absolute_url())"
    },
    {
        "line": 243,
        "fullcodeline": "for answer in answers:"
    },
    {
        "line": 26,
        "fullcodeline": "question_post = models.Post.objects.filter("
    },
    {
        "line": 57,
        "fullcodeline": "question_post.get_absolute_url(),"
    },
    {
        "line": 58,
        "fullcodeline": "urllib.urlencode(request.GET)"
    },
    {
        "line": 82,
        "fullcodeline": "error_message = _("
    },
    {
        "line": 113,
        "fullcodeline": "show_post.assert_is_visible_to(request.user)"
    },
    {
        "line": 184,
        "fullcodeline": "update_view_count = True"
    },
    {
        "line": 86,
        "fullcodeline": "request.user.message_set.create(message = error_message)"
    },
    {
        "line": 87,
        "fullcodeline": "return HttpResponseRedirect(question_post.thread.get_absolute_url())"
    },
    {
        "line": 96,
        "fullcodeline": "request.user.message_set.create(message = unicode(error))"
    },
    {
        "line": 98,
        "fullcodeline": "return HttpResponseRedirect(reverse('question', kwargs = {'id': id}))"
    },
    {
        "line": 100,
        "fullcodeline": "request.user.message_set.create(message = unicode(error))"
    },
    {
        "line": 101,
        "fullcodeline": "return HttpResponseRedirect(reverse('index'))"
    },
    {
        "line": 110,
        "fullcodeline": "return HttpResponseRedirect(show_post.get_absolute_url())"
    },
    {
        "line": 145,
        "fullcodeline": "voted_post__id__in = post_to_author.keys()"
    },
    {
        "line": 181,
        "fullcodeline": "if last_seen < thread.last_activity_at:"
    },
    {
        "line": 31,
        "fullcodeline": "raise Http404"
    },
    {
        "line": 35,
        "fullcodeline": "old_answer = models.Post.objects.get_answers().get(old_answer_id=show_answer)"
    },
    {
        "line": 83,
        "fullcodeline": "'Sorry, the comment you are looking for has been '"
    },
    {
        "line": 151,
        "fullcodeline": "id for id in post_to_author if post_to_author[id] == request.user.id"
    },
    {
        "line": 182,
        "fullcodeline": "update_view_count = True"
    },
    {
        "line": 244,
        "fullcodeline": "if answer.author == request.user:"
    },
    {
        "line": 36,
        "fullcodeline": "return HttpResponseRedirect(old_answer.get_absolute_url())"
    },
    {
        "line": 115,
        "fullcodeline": "request.user.message_set.create(message = unicode(error))"
    },
    {
        "line": 116,
        "fullcodeline": "return HttpResponseRedirect(reverse('question', kwargs = {'id': id}))"
    },
    {
        "line": 245,
        "fullcodeline": "user_already_gave_answer = True"
    },
    {
        "line": 246,
        "fullcodeline": "previous_answer = answer"
    },
    {
        "line": 38,
        "fullcodeline": "pass"
    },
    {
        "line": 42,
        "fullcodeline": "old_comment = models.Post.objects.get_comments().get(old_comment_id=show_comment)"
    },
    {
        "line": 43,
        "fullcodeline": "return HttpResponseRedirect(old_comment.get_absolute_url())"
    },
    {
        "line": 45,
        "fullcodeline": "pass"
    }
]