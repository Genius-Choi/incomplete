[
    {
        "line": 4,
        "fullcodeline": "unsigned total_indent = 0;"
    },
    {
        "line": 5,
        "fullcodeline": "int n_parents = 0;"
    },
    {
        "line": 6,
        "fullcodeline": "int n_brothers = 0;"
    },
    {
        "line": 7,
        "fullcodeline": "int n_children = 0;"
    },
    {
        "line": 8,
        "fullcodeline": "MD_CONTAINER container = { 0 };"
    },
    {
        "line": 9,
        "fullcodeline": "int prev_line_has_list_loosening_effect = ctx->last_line_has_list_loosening_effect;"
    },
    {
        "line": 10,
        "fullcodeline": "OFF off = beg;"
    },
    {
        "line": 11,
        "fullcodeline": "OFF hr_killer = 0;"
    },
    {
        "line": 12,
        "fullcodeline": "int ret = 0;"
    },
    {
        "line": 14,
        "fullcodeline": "line->indent = md_line_indentation(ctx, total_indent, off, &off);"
    },
    {
        "line": 15,
        "fullcodeline": "total_indent += line->indent;"
    },
    {
        "line": 16,
        "fullcodeline": "line->beg = off;"
    },
    {
        "line": 413,
        "fullcodeline": "line->end = off;"
    },
    {
        "line": 438,
        "fullcodeline": "*p_end = off;"
    },
    {
        "line": 20,
        "fullcodeline": "while(n_parents < ctx->n_containers) {"
    },
    {
        "line": 48,
        "fullcodeline": "if(off >= ctx->size  ||  ISNEWLINE(off)) {"
    },
    {
        "line": 416,
        "fullcodeline": "if(line->type == MD_LINE_ATXHEADER) {"
    },
    {
        "line": 427,
        "fullcodeline": "if(line->type != MD_LINE_INDENTEDCODE  &&  line->type != MD_LINE_FENCEDCODE) {"
    },
    {
        "line": 433,
        "fullcodeline": "if(off < ctx->size && CH(off) == _T('\\r'))"
    },
    {
        "line": 435,
        "fullcodeline": "if(off < ctx->size && CH(off) == _T('\\n'))"
    },
    {
        "line": 441,
        "fullcodeline": "if(prev_line_has_list_loosening_effect  &&  line->type != MD_LINE_BLANK  &&  n_parents + n_brothers > 0) {"
    },
    {
        "line": 450,
        "fullcodeline": "if(n_children == 0  &&  n_parents + n_brothers < ctx->n_containers)"
    },
    {
        "line": 454,
        "fullcodeline": "if(n_brothers > 0) {"
    },
    {
        "line": 468,
        "fullcodeline": "if(n_children > 0)"
    },
    {
        "line": 21,
        "fullcodeline": "MD_CONTAINER* c = &ctx->containers[n_parents];"
    },
    {
        "line": 45,
        "fullcodeline": "n_parents++;"
    },
    {
        "line": 351,
        "fullcodeline": "line->type = MD_LINE_TEXT;"
    },
    {
        "line": 405,
        "fullcodeline": "while(off + 3 < ctx->size  &&  !ISNEWLINE(off+0)  &&  !ISNEWLINE(off+1)"
    },
    {
        "line": 407,
        "fullcodeline": "off += 4;"
    },
    {
        "line": 408,
        "fullcodeline": "while(off < ctx->size  &&  !ISNEWLINE(off))"
    },
    {
        "line": 409,
        "fullcodeline": "off++;"
    },
    {
        "line": 417,
        "fullcodeline": "OFF tmp = line->end;"
    },
    {
        "line": 434,
        "fullcodeline": "off++;"
    },
    {
        "line": 436,
        "fullcodeline": "off++;"
    },
    {
        "line": 442,
        "fullcodeline": "MD_CONTAINER* c = &ctx->containers[n_parents + n_brothers - 1];"
    },
    {
        "line": 451,
        "fullcodeline": "MD_CHECK(md_leave_child_containers(ctx, n_parents + n_brothers));"
    },
    {
        "line": 455,
        "fullcodeline": "MD_ASSERT(n_brothers == 1);"
    },
    {
        "line": 456,
        "fullcodeline": "MD_CHECK(md_push_container_bytes(ctx, MD_BLOCK_LI,"
    },
    {
        "line": 460,
        "fullcodeline": "MD_CHECK(md_push_container_bytes(ctx, MD_BLOCK_LI,"
    },
    {
        "line": 464,
        "fullcodeline": "ctx->containers[n_parents].is_task = container.is_task;"
    },
    {
        "line": 465,
        "fullcodeline": "ctx->containers[n_parents].task_mark_off = container.task_mark_off;"
    },
    {
        "line": 469,
        "fullcodeline": "MD_CHECK(md_enter_child_containers(ctx, n_children));"
    },
    {
        "line": 23,
        "fullcodeline": "if(c->ch == _T('>')  &&  line->indent < ctx->code_indent_offset  &&"
    },
    {
        "line": 51,
        "fullcodeline": "if(n_brothers + n_children == 0) {"
    },
    {
        "line": 59,
        "fullcodeline": "if(pivot_line->type == MD_LINE_FENCEDCODE) {"
    },
    {
        "line": 85,
        "fullcodeline": "if(pivot_line->type == MD_LINE_HTML  &&  ctx->html_block_type > 0) {"
    },
    {
        "line": 115,
        "fullcodeline": "if(off >= ctx->size  ||  ISNEWLINE(off)) {"
    },
    {
        "line": 175,
        "fullcodeline": "if(line->indent < ctx->code_indent_offset  &&  pivot_line->type == MD_LINE_TEXT"
    },
    {
        "line": 189,
        "fullcodeline": "if(line->indent < ctx->code_indent_offset  &&  ISANYOF(off, _T(\"-_*\"))  &&  off >= hr_killer) {"
    },
    {
        "line": 198,
        "fullcodeline": "if(n_parents < ctx->n_containers  &&  n_brothers + n_children == 0) {"
    },
    {
        "line": 234,
        "fullcodeline": "if(line->indent >= ctx->code_indent_offset  &&"
    },
    {
        "line": 245,
        "fullcodeline": "if(line->indent < ctx->code_indent_offset  &&"
    },
    {
        "line": 288,
        "fullcodeline": "if(pivot_line->type == MD_LINE_TABLE  &&  n_parents == ctx->n_containers) {"
    },
    {
        "line": 294,
        "fullcodeline": "if(line->indent < ctx->code_indent_offset  &&  CH(off) == _T('#')) {"
    },
    {
        "line": 305,
        "fullcodeline": "if(CH(off) == _T('`') || CH(off) == _T('~')) {"
    },
    {
        "line": 314,
        "fullcodeline": "if(CH(off) == _T('<')  &&  !(ctx->parser.flags & MD_FLAG_NOHTMLBLOCKS))"
    },
    {
        "line": 335,
        "fullcodeline": "if((ctx->parser.flags & MD_FLAG_TABLES)  &&  pivot_line->type == MD_LINE_TEXT  &&"
    },
    {
        "line": 352,
        "fullcodeline": "if(pivot_line->type == MD_LINE_TEXT  &&  n_brothers + n_children == 0) {"
    },
    {
        "line": 358,
        "fullcodeline": "if((ctx->parser.flags & MD_FLAG_TASKLISTS)  &&  n_brothers + n_children > 0  &&"
    },
    {
        "line": 406,
        "fullcodeline": "&&  !ISNEWLINE(off+2)  &&  !ISNEWLINE(off+3))"
    },
    {
        "line": 418,
        "fullcodeline": "while(tmp > line->beg && CH(tmp-1) == _T(' '))"
    },
    {
        "line": 419,
        "fullcodeline": "tmp--;"
    },
    {
        "line": 420,
        "fullcodeline": "while(tmp > line->beg && CH(tmp-1) == _T('#'))"
    },
    {
        "line": 421,
        "fullcodeline": "tmp--;"
    },
    {
        "line": 422,
        "fullcodeline": "if(tmp == line->beg || CH(tmp-1) == _T(' ') || (ctx->parser.flags & MD_FLAG_PERMISSIVEATXHEADERS))"
    },
    {
        "line": 428,
        "fullcodeline": "while(line->end > line->beg && CH(line->end-1) == _T(' '))"
    },
    {
        "line": 429,
        "fullcodeline": "line->end--;"
    },
    {
        "line": 443,
        "fullcodeline": "if(c->ch != _T('>')) {"
    },
    {
        "line": 24,
        "fullcodeline": "off < ctx->size  &&  CH(off) == _T('>'))"
    },
    {
        "line": 27,
        "fullcodeline": "off++;"
    },
    {
        "line": 28,
        "fullcodeline": "total_indent++;"
    },
    {
        "line": 29,
        "fullcodeline": "line->indent = md_line_indentation(ctx, total_indent, off, &off);"
    },
    {
        "line": 30,
        "fullcodeline": "total_indent += line->indent;"
    },
    {
        "line": 36,
        "fullcodeline": "line->beg = off;"
    },
    {
        "line": 60,
        "fullcodeline": "line->beg = off;"
    },
    {
        "line": 177,
        "fullcodeline": "&&  (n_parents == ctx->n_containers))"
    },
    {
        "line": 235,
        "fullcodeline": "(pivot_line->type == MD_LINE_BLANK || pivot_line->type == MD_LINE_INDENTEDCODE))"
    },
    {
        "line": 237,
        "fullcodeline": "line->type = MD_LINE_INDENTEDCODE;"
    },
    {
        "line": 238,
        "fullcodeline": "MD_ASSERT(line->indent >= ctx->code_indent_offset);"
    },
    {
        "line": 239,
        "fullcodeline": "line->indent -= ctx->code_indent_offset;"
    },
    {
        "line": 240,
        "fullcodeline": "line->data = 0;"
    },
    {
        "line": 246,
        "fullcodeline": "md_is_container_mark(ctx, line->indent, off, &off, &container))"
    },
    {
        "line": 289,
        "fullcodeline": "line->type = MD_LINE_TABLE;"
    },
    {
        "line": 316,
        "fullcodeline": "ctx->html_block_type = md_is_html_block_start_condition(ctx, off);"
    },
    {
        "line": 337,
        "fullcodeline": "n_parents == ctx->n_containers)"
    },
    {
        "line": 354,
        "fullcodeline": "n_parents = ctx->n_containers;"
    },
    {
        "line": 359,
        "fullcodeline": "ISANYOF_(ctx->containers[ctx->n_containers-1].ch, _T(\"-+*.)\")))"
    },
    {
        "line": 361,
        "fullcodeline": "OFF tmp = off;"
    },
    {
        "line": 423,
        "fullcodeline": "line->end = tmp;"
    },
    {
        "line": 444,
        "fullcodeline": "MD_BLOCK* block = (MD_BLOCK*) (((char*)ctx->block_bytes) + c->block_byte_off);"
    },
    {
        "line": 445,
        "fullcodeline": "block->flags |= MD_BLOCK_LOOSE_LIST;"
    },
    {
        "line": 458,
        "fullcodeline": "(ctx->containers[n_parents].is_task ? CH(ctx->containers[n_parents].task_mark_off) : 0),"
    },
    {
        "line": 462,
        "fullcodeline": "(container.is_task ? CH(container.task_mark_off) : 0),"
    },
    {
        "line": 33,
        "fullcodeline": "if(line->indent > 0)"
    },
    {
        "line": 52,
        "fullcodeline": "while(n_parents < ctx->n_containers  &&  ctx->containers[n_parents].ch != _T('>'))"
    },
    {
        "line": 53,
        "fullcodeline": "n_parents++;"
    },
    {
        "line": 64,
        "fullcodeline": "if(line->indent < ctx->code_indent_offset) {"
    },
    {
        "line": 73,
        "fullcodeline": "if(n_parents == ctx->n_containers) {"
    },
    {
        "line": 86,
        "fullcodeline": "if(n_parents < ctx->n_containers) {"
    },
    {
        "line": 116,
        "fullcodeline": "if(pivot_line->type == MD_LINE_INDENTEDCODE  &&  n_parents == ctx->n_containers) {"
    },
    {
        "line": 158,
        "fullcodeline": "ctx->last_line_has_list_loosening_effect = FALSE;"
    },
    {
        "line": 176,
        "fullcodeline": "&&  (CH(off) == _T('=') || CH(off) == _T('-'))"
    },
    {
        "line": 181,
        "fullcodeline": "if(md_is_setext_underline(ctx, off, &off, &level)) {"
    },
    {
        "line": 190,
        "fullcodeline": "if(md_is_hr_line(ctx, off, &off, &hr_killer)) {"
    },
    {
        "line": 201,
        "fullcodeline": "if(md_is_container_mark(ctx, line->indent, off, &tmp, &container)  &&"
    },
    {
        "line": 248,
        "fullcodeline": "if(pivot_line->type == MD_LINE_TEXT  &&  n_parents == ctx->n_containers  &&"
    },
    {
        "line": 297,
        "fullcodeline": "if(md_is_atxheader_line(ctx, off, &line->beg, &off, &level)) {"
    },
    {
        "line": 306,
        "fullcodeline": "if(md_is_opening_code_fence(ctx, off, &off)) {"
    },
    {
        "line": 319,
        "fullcodeline": "if(ctx->html_block_type == 7  &&  pivot_line->type == MD_LINE_TEXT)"
    },
    {
        "line": 322,
        "fullcodeline": "if(ctx->html_block_type > 0) {"
    },
    {
        "line": 336,
        "fullcodeline": "(CH(off) == _T('|') || CH(off) == _T('-') || CH(off) == _T(':'))  &&"
    },
    {
        "line": 341,
        "fullcodeline": "if(ctx->current_block != NULL  &&  ctx->current_block->n_lines == 1  &&"
    },
    {
        "line": 363,
        "fullcodeline": "while(tmp < ctx->size  &&  tmp < off + 3  &&  ISBLANK(tmp))"
    },
    {
        "line": 364,
        "fullcodeline": "tmp++;"
    },
    {
        "line": 365,
        "fullcodeline": "if(tmp + 2 < ctx->size  &&  CH(tmp) == _T('[')  &&"
    },
    {
        "line": 34,
        "fullcodeline": "line->indent--;"
    },
    {
        "line": 38,
        "fullcodeline": "} else if(c->ch != _T('>')  &&  line->indent >= c->contents_indent) {"
    },
    {
        "line": 79,
        "fullcodeline": "line->type = MD_LINE_FENCEDCODE;"
    },
    {
        "line": 89,
        "fullcodeline": "ctx->html_block_type = 0;"
    },
    {
        "line": 117,
        "fullcodeline": "line->type = MD_LINE_INDENTEDCODE;"
    },
    {
        "line": 122,
        "fullcodeline": "ctx->last_line_has_list_loosening_effect = FALSE;"
    },
    {
        "line": 182,
        "fullcodeline": "line->type = MD_LINE_SETEXTUNDERLINE;"
    },
    {
        "line": 183,
        "fullcodeline": "line->data = level;"
    },
    {
        "line": 191,
        "fullcodeline": "line->type = MD_LINE_HR;"
    },
    {
        "line": 202,
        "fullcodeline": "md_is_container_compatible(&ctx->containers[n_parents], &container))"
    },
    {
        "line": 204,
        "fullcodeline": "pivot_line = &md_dummy_blank_line;"
    },
    {
        "line": 206,
        "fullcodeline": "off = tmp;"
    },
    {
        "line": 208,
        "fullcodeline": "total_indent += container.contents_indent - container.mark_indent;"
    },
    {
        "line": 209,
        "fullcodeline": "line->indent = md_line_indentation(ctx, total_indent, off, &off);"
    },
    {
        "line": 210,
        "fullcodeline": "total_indent += line->indent;"
    },
    {
        "line": 211,
        "fullcodeline": "line->beg = off;"
    },
    {
        "line": 224,
        "fullcodeline": "ctx->containers[n_parents].mark_indent = container.mark_indent;"
    },
    {
        "line": 225,
        "fullcodeline": "ctx->containers[n_parents].contents_indent = container.contents_indent;"
    },
    {
        "line": 227,
        "fullcodeline": "n_brothers++;"
    },
    {
        "line": 249,
        "fullcodeline": "(off >= ctx->size || ISNEWLINE(off))  &&  container.ch != _T('>'))"
    },
    {
        "line": 298,
        "fullcodeline": "line->type = MD_LINE_ATXHEADER;"
    },
    {
        "line": 299,
        "fullcodeline": "line->data = level;"
    },
    {
        "line": 307,
        "fullcodeline": "line->type = MD_LINE_FENCEDCODE;"
    },
    {
        "line": 308,
        "fullcodeline": "line->data = 1;"
    },
    {
        "line": 320,
        "fullcodeline": "ctx->html_block_type = 0;"
    },
    {
        "line": 329,
        "fullcodeline": "line->type = MD_LINE_HTML;"
    },
    {
        "line": 342,
        "fullcodeline": "md_is_table_underline(ctx, off, &off, &col_count))"
    },
    {
        "line": 344,
        "fullcodeline": "line->data = col_count;"
    },
    {
        "line": 345,
        "fullcodeline": "line->type = MD_LINE_TABLEUNDERLINE;"
    },
    {
        "line": 367,
        "fullcodeline": "(tmp + 3 == ctx->size  ||  ISBLANK(tmp+3)  ||  ISNEWLINE(tmp+3)))"
    },
    {
        "line": 369,
        "fullcodeline": "MD_CONTAINER* task_container = (n_children > 0 ? &ctx->containers[ctx->n_containers-1] : &container);"
    },
    {
        "line": 370,
        "fullcodeline": "task_container->is_task = TRUE;"
    },
    {
        "line": 371,
        "fullcodeline": "task_container->task_mark_off = tmp + 1;"
    },
    {
        "line": 372,
        "fullcodeline": "off = tmp + 3;"
    },
    {
        "line": 375,
        "fullcodeline": "line->beg = off;"
    },
    {
        "line": 40,
        "fullcodeline": "line->indent -= c->contents_indent;"
    },
    {
        "line": 65,
        "fullcodeline": "if(md_is_closing_code_fence(ctx, CH(pivot_line->beg), off, &off)) {"
    },
    {
        "line": 74,
        "fullcodeline": "if(line->indent > pivot_line->indent)"
    },
    {
        "line": 93,
        "fullcodeline": "html_block_type = md_is_html_block_end_condition(ctx, off, &off);"
    },
    {
        "line": 108,
        "fullcodeline": "line->type = MD_LINE_HTML;"
    },
    {
        "line": 109,
        "fullcodeline": "n_parents = ctx->n_containers;"
    },
    {
        "line": 118,
        "fullcodeline": "if(line->indent > ctx->code_indent_offset)"
    },
    {
        "line": 124,
        "fullcodeline": "line->type = MD_LINE_BLANK;"
    },
    {
        "line": 125,
        "fullcodeline": "ctx->last_line_has_list_loosening_effect = (n_parents > 0  &&"
    },
    {
        "line": 169,
        "fullcodeline": "ctx->last_list_item_starts_with_two_blank_lines = FALSE;"
    },
    {
        "line": 214,
        "fullcodeline": "if(off >= ctx->size || ISNEWLINE(off)) {"
    },
    {
        "line": 324,
        "fullcodeline": "if(md_is_html_block_end_condition(ctx, off, &off) == ctx->html_block_type) {"
    },
    {
        "line": 366,
        "fullcodeline": "ISANYOF(tmp+1, _T(\"xX \"))  &&  CH(tmp+2) == _T(']')  &&"
    },
    {
        "line": 373,
        "fullcodeline": "while(ISWHITESPACE(off))"
    },
    {
        "line": 374,
        "fullcodeline": "off++;"
    },
    {
        "line": 66,
        "fullcodeline": "line->type = MD_LINE_BLANK;"
    },
    {
        "line": 67,
        "fullcodeline": "ctx->last_line_has_list_loosening_effect = FALSE;"
    },
    {
        "line": 75,
        "fullcodeline": "line->indent -= pivot_line->indent;"
    },
    {
        "line": 94,
        "fullcodeline": "if(html_block_type > 0) {"
    },
    {
        "line": 119,
        "fullcodeline": "line->indent -= ctx->code_indent_offset;"
    },
    {
        "line": 141,
        "fullcodeline": "if(n_parents > 0  &&  ctx->containers[n_parents-1].ch != _T('>')  &&"
    },
    {
        "line": 160,
        "fullcodeline": "if(n_parents > 0  &&  ctx->containers[n_parents-1].ch != _T('>')  &&"
    },
    {
        "line": 215,
        "fullcodeline": "container.contents_indent++;"
    },
    {
        "line": 252,
        "fullcodeline": "} else if(pivot_line->type == MD_LINE_TEXT  &&  n_parents == ctx->n_containers  &&"
    },
    {
        "line": 326,
        "fullcodeline": "ctx->html_block_type = 0;"
    },
    {
        "line": 77,
        "fullcodeline": "line->indent = 0;"
    },
    {
        "line": 95,
        "fullcodeline": "MD_ASSERT(html_block_type == ctx->html_block_type);"
    },
    {
        "line": 98,
        "fullcodeline": "ctx->html_block_type = 0;"
    },
    {
        "line": 121,
        "fullcodeline": "line->indent = 0;"
    },
    {
        "line": 127,
        "fullcodeline": "ctx->containers[n_parents-1].ch != _T('>'));"
    },
    {
        "line": 143,
        "fullcodeline": "ctx->n_block_bytes > (int) sizeof(MD_BLOCK))"
    },
    {
        "line": 145,
        "fullcodeline": "MD_BLOCK* top_block = (MD_BLOCK*) ((char*)ctx->block_bytes + ctx->n_block_bytes - sizeof(MD_BLOCK));"
    },
    {
        "line": 162,
        "fullcodeline": "ctx->n_block_bytes > (int) sizeof(MD_BLOCK))"
    },
    {
        "line": 164,
        "fullcodeline": "MD_BLOCK* top_block = (MD_BLOCK*) ((char*)ctx->block_bytes + ctx->n_block_bytes - sizeof(MD_BLOCK));"
    },
    {
        "line": 253,
        "fullcodeline": "(container.ch == _T('.') || container.ch == _T(')'))  &&  container.start != 1)"
    },
    {
        "line": 101,
        "fullcodeline": "if(html_block_type == 6 || html_block_type == 7) {"
    },
    {
        "line": 126,
        "fullcodeline": "n_brothers + n_children == 0  &&"
    },
    {
        "line": 142,
        "fullcodeline": "n_brothers + n_children == 0  &&  ctx->current_block == NULL  &&"
    },
    {
        "line": 146,
        "fullcodeline": "if(top_block->type == MD_BLOCK_LI)"
    },
    {
        "line": 161,
        "fullcodeline": "n_brothers + n_children == 0  &&  ctx->current_block == NULL  &&"
    },
    {
        "line": 165,
        "fullcodeline": "if(top_block->type == MD_BLOCK_LI)"
    },
    {
        "line": 216,
        "fullcodeline": "} else if(line->indent <= ctx->code_indent_offset) {"
    },
    {
        "line": 257,
        "fullcodeline": "total_indent += container.contents_indent - container.mark_indent;"
    },
    {
        "line": 258,
        "fullcodeline": "line->indent = md_line_indentation(ctx, total_indent, off, &off);"
    },
    {
        "line": 259,
        "fullcodeline": "total_indent += line->indent;"
    },
    {
        "line": 261,
        "fullcodeline": "line->beg = off;"
    },
    {
        "line": 262,
        "fullcodeline": "line->data = container.ch;"
    },
    {
        "line": 281,
        "fullcodeline": "n_children++;"
    },
    {
        "line": 282,
        "fullcodeline": "MD_CHECK(md_push_container(ctx, &container));"
    },
    {
        "line": 102,
        "fullcodeline": "line->type = MD_LINE_BLANK;"
    },
    {
        "line": 103,
        "fullcodeline": "line->indent = 0;"
    },
    {
        "line": 147,
        "fullcodeline": "ctx->last_list_item_starts_with_two_blank_lines = TRUE;"
    },
    {
        "line": 166,
        "fullcodeline": "n_parents--;"
    },
    {
        "line": 217,
        "fullcodeline": "container.contents_indent += line->indent;"
    },
    {
        "line": 218,
        "fullcodeline": "line->indent = 0;"
    },
    {
        "line": 265,
        "fullcodeline": "if(off >= ctx->size || ISNEWLINE(off)) {"
    },
    {
        "line": 275,
        "fullcodeline": "if(n_brothers + n_children == 0)"
    },
    {
        "line": 278,
        "fullcodeline": "if(n_children == 0)"
    },
    {
        "line": 220,
        "fullcodeline": "container.contents_indent += 1;"
    },
    {
        "line": 221,
        "fullcodeline": "line->indent--;"
    },
    {
        "line": 266,
        "fullcodeline": "container.contents_indent++;"
    },
    {
        "line": 276,
        "fullcodeline": "pivot_line = &md_dummy_blank_line;"
    },
    {
        "line": 279,
        "fullcodeline": "MD_CHECK(md_leave_child_containers(ctx, n_parents + n_brothers));"
    },
    {
        "line": 267,
        "fullcodeline": "} else if(line->indent <= ctx->code_indent_offset) {"
    },
    {
        "line": 268,
        "fullcodeline": "container.contents_indent += line->indent;"
    },
    {
        "line": 269,
        "fullcodeline": "line->indent = 0;"
    },
    {
        "line": 271,
        "fullcodeline": "container.contents_indent += 1;"
    },
    {
        "line": 272,
        "fullcodeline": "line->indent--;"
    }
]