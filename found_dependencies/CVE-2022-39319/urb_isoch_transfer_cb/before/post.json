[
    {
        "line": 6,
        "fullcodeline": "if (!noAck)"
    },
    {
        "line": 8,
        "fullcodeline": "UINT32 packetSize = (status == 0) ? NumberOfPackets * 12 : 0;"
    },
    {
        "line": 9,
        "fullcodeline": "Stream_SetPosition(out, 0);"
    },
    {
        "line": 11,
        "fullcodeline": "Stream_Write_UINT32(out, InterfaceId); /** interface */"
    },
    {
        "line": 12,
        "fullcodeline": "Stream_Write_UINT32(out, MessageId);   /** message id */"
    },
    {
        "line": 19,
        "fullcodeline": "Stream_Write_UINT32(out, RequestId);       /** RequestId */"
    },
    {
        "line": 20,
        "fullcodeline": "Stream_Write_UINT32(out, 20 + packetSize); /** CbTsUrbResult */"
    },
    {
        "line": 22,
        "fullcodeline": "Stream_Write_UINT16(out, 20 + packetSize); /** Size */"
    },
    {
        "line": 23,
        "fullcodeline": "Stream_Write_UINT16(out, 0);               /* Padding */"
    },
    {
        "line": 24,
        "fullcodeline": "Stream_Write_UINT32(out, status);          /** UsbdStatus */"
    },
    {
        "line": 25,
        "fullcodeline": "Stream_Write_UINT32(out, StartFrame);      /** StartFrame */"
    },
    {
        "line": 40,
        "fullcodeline": "Stream_Write_UINT32(out, 0);                /** HResult */"
    },
    {
        "line": 41,
        "fullcodeline": "Stream_Write_UINT32(out, OutputBufferSize); /** OutputBufferSize */"
    },
    {
        "line": 42,
        "fullcodeline": "Stream_Seek(out, OutputBufferSize);"
    },
    {
        "line": 44,
        "fullcodeline": "stream_write_and_free(callback->plugin, callback->channel, out);"
    },
    {
        "line": 14,
        "fullcodeline": "if (OutputBufferSize == 0)"
    },
    {
        "line": 27,
        "fullcodeline": "if (status == 0)"
    },
    {
        "line": 15,
        "fullcodeline": "Stream_Write_UINT32(out, URB_COMPLETION_NO_DATA); /** function id */"
    },
    {
        "line": 30,
        "fullcodeline": "Stream_Write_UINT32(out, NumberOfPackets);"
    },
    {
        "line": 31,
        "fullcodeline": "Stream_Write_UINT32(out, ErrorCount); /** ErrorCount */"
    },
    {
        "line": 32,
        "fullcodeline": "Stream_Seek(out, packetSize);"
    },
    {
        "line": 17,
        "fullcodeline": "Stream_Write_UINT32(out, URB_COMPLETION); /** function id */"
    },
    {
        "line": 36,
        "fullcodeline": "Stream_Write_UINT32(out, 0);          /** NumberOfPackets */"
    },
    {
        "line": 37,
        "fullcodeline": "Stream_Write_UINT32(out, ErrorCount); /** ErrorCount */"
    }
]