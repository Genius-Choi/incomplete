[
    {
        "line": 3,
        "fullcodeline": "int error = FALSE;"
    },
    {
        "line": 4,
        "fullcodeline": "int display_license = FALSE;"
    },
    {
        "line": 5,
        "fullcodeline": "int display_help = FALSE;"
    },
    {
        "line": 6,
        "fullcodeline": "int c = 0;"
    },
    {
        "line": 9,
        "fullcodeline": "char datestring[256];"
    },
    {
        "line": 11,
        "fullcodeline": "const char *worker_socket = NULL;"
    },
    {
        "line": 35,
        "fullcodeline": "memset(&loadctl, 0, sizeof(loadctl));"
    },
    {
        "line": 36,
        "fullcodeline": "mac = get_global_macros();"
    },
    {
        "line": 105,
        "fullcodeline": "init_main_cfg_vars(1);"
    },
    {
        "line": 106,
        "fullcodeline": "init_shared_cfg_vars(1);"
    },
    {
        "line": 168,
        "fullcodeline": "config_file = nspath_absolute(argv[optind], NULL);"
    },
    {
        "line": 174,
        "fullcodeline": "config_file_dir = nspath_absolute_dirname(config_file, NULL);"
    },
    {
        "line": 188,
        "fullcodeline": "signal(SIGXFSZ, handle_sigxfsz);"
    },
    {
        "line": 39,
        "fullcodeline": "if(argc < 2)"
    },
    {
        "line": 108,
        "fullcodeline": "if(daemon_mode == FALSE) {"
    },
    {
        "line": 118,
        "fullcodeline": "if(display_license == TRUE) {"
    },
    {
        "line": 135,
        "fullcodeline": "if(optind >= argc)"
    },
    {
        "line": 139,
        "fullcodeline": "if(error == TRUE || display_help == TRUE) {"
    },
    {
        "line": 169,
        "fullcodeline": "if(config_file == NULL) {"
    },
    {
        "line": 195,
        "fullcodeline": "if(verify_config || test_scheduling || precache_objects) {"
    },
    {
        "line": 40,
        "fullcodeline": "error = TRUE;"
    },
    {
        "line": 44,
        "fullcodeline": "c = getopt(argc, argv, \"+hVvdspuxTW\");"
    },
    {
        "line": 101,
        "fullcodeline": "exit(nagios_core_worker(worker_socket));"
    },
    {
        "line": 109,
        "fullcodeline": "printf(\"\\nNagios Core %s\\n\", PROGRAM_VERSION);"
    },
    {
        "line": 110,
        "fullcodeline": "printf(\"Copyright (c) 2009-present Nagios Core Development Team and Community Contributors\\n\");"
    },
    {
        "line": 111,
        "fullcodeline": "printf(\"Copyright (c) 1999-2009 Ethan Galstad\\n\");"
    },
    {
        "line": 112,
        "fullcodeline": "printf(\"Last Modified: %s\\n\", PROGRAM_MODIFICATION_DATE);"
    },
    {
        "line": 113,
        "fullcodeline": "printf(\"License: GPL\\n\\n\");"
    },
    {
        "line": 114,
        "fullcodeline": "printf(\"Website: https://www.nagios.org\\n\");"
    },
    {
        "line": 120,
        "fullcodeline": "printf(\"This program is free software; you can redistribute it and/or modify\\n\");"
    },
    {
        "line": 121,
        "fullcodeline": "printf(\"it under the terms of the GNU General Public License version 2 as\\n\");"
    },
    {
        "line": 122,
        "fullcodeline": "printf(\"published by the Free Software Foundation.\\n\\n\");"
    },
    {
        "line": 123,
        "fullcodeline": "printf(\"This program is distributed in the hope that it will be useful,\\n\");"
    },
    {
        "line": 124,
        "fullcodeline": "printf(\"but WITHOUT ANY WARRANTY; without even the implied warranty of\\n\");"
    },
    {
        "line": 125,
        "fullcodeline": "printf(\"MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n\");"
    },
    {
        "line": 126,
        "fullcodeline": "printf(\"GNU General Public License for more details.\\n\\n\");"
    },
    {
        "line": 127,
        "fullcodeline": "printf(\"You should have received a copy of the GNU General Public License\\n\");"
    },
    {
        "line": 128,
        "fullcodeline": "printf(\"along with this program; if not, write to the Free Software\\n\");"
    },
    {
        "line": 129,
        "fullcodeline": "printf(\"Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.\\n\\n\");"
    },
    {
        "line": 131,
        "fullcodeline": "exit(OK);"
    },
    {
        "line": 136,
        "fullcodeline": "error = TRUE;"
    },
    {
        "line": 141,
        "fullcodeline": "printf(\"Usage: %s [options] <main_config_file>\\n\", argv[0]);"
    },
    {
        "line": 142,
        "fullcodeline": "printf(\"\\n\");"
    },
    {
        "line": 143,
        "fullcodeline": "printf(\"Options:\\n\");"
    },
    {
        "line": 144,
        "fullcodeline": "printf(\"\\n\");"
    },
    {
        "line": 145,
        "fullcodeline": "printf(\"  -v, --verify-config          Verify all configuration data (-v -v for more info)\\n\");"
    },
    {
        "line": 146,
        "fullcodeline": "printf(\"  -s, --test-scheduling        Shows projected/recommended check scheduling and other\\n\");"
    },
    {
        "line": 147,
        "fullcodeline": "printf(\"                               diagnostic info based on the current configuration files.\\n\");"
    },
    {
        "line": 148,
        "fullcodeline": "printf(\"  -T, --enable-timing-point    Enable timed commentary on initialization\\n\");"
    },
    {
        "line": 149,
        "fullcodeline": "printf(\"  -x, --dont-verify-paths      Deprecated (Don't check for circular object paths)\\n\");"
    },
    {
        "line": 150,
        "fullcodeline": "printf(\"  -p, --precache-objects       Precache object configuration\\n\");"
    },
    {
        "line": 151,
        "fullcodeline": "printf(\"  -u, --use-precached-objects  Use precached object config file\\n\");"
    },
    {
        "line": 152,
        "fullcodeline": "printf(\"  -d, --daemon                 Starts Nagios in daemon mode, instead of as a foreground process\\n\");"
    },
    {
        "line": 153,
        "fullcodeline": "printf(\"  -W, --worker /path/to/socket Act as a worker for an already running daemon\\n\");"
    },
    {
        "line": 154,
        "fullcodeline": "printf(\"\\n\");"
    },
    {
        "line": 155,
        "fullcodeline": "printf(\"Visit the Nagios website at https://www.nagios.org/ for bug fixes, new\\n\");"
    },
    {
        "line": 156,
        "fullcodeline": "printf(\"releases, online documentation, FAQs, information on subscribing to\\n\");"
    },
    {
        "line": 157,
        "fullcodeline": "printf(\"the mailing lists, and commercial support options for Nagios.\\n\");"
    },
    {
        "line": 158,
        "fullcodeline": "printf(\"\\n\");"
    },
    {
        "line": 160,
        "fullcodeline": "exit(ERROR);"
    },
    {
        "line": 170,
        "fullcodeline": "printf(\"Error allocating memory.\\n\");"
    },
    {
        "line": 171,
        "fullcodeline": "exit(ERROR);"
    },
    {
        "line": 196,
        "fullcodeline": "reset_variables();"
    },
    {
        "line": 203,
        "fullcodeline": "set_loadctl_defaults();"
    },
    {
        "line": 209,
        "fullcodeline": "result = read_main_config_file(config_file);"
    },
    {
        "line": 234,
        "fullcodeline": "result = read_all_object_data(config_file);"
    },
    {
        "line": 263,
        "fullcodeline": "result = pre_flight_check();"
    },
    {
        "line": 313,
        "fullcodeline": "cleanup();"
    },
    {
        "line": 316,
        "fullcodeline": "timing_point(\"Exiting\\n\");"
    },
    {
        "line": 319,
        "fullcodeline": "neb_free_module_list();"
    },
    {
        "line": 320,
        "fullcodeline": "free(config_file_dir);"
    },
    {
        "line": 321,
        "fullcodeline": "free(config_file);"
    },
    {
        "line": 323,
        "fullcodeline": "exit(result);"
    },
    {
        "line": 46,
        "fullcodeline": "if(c == -1 || c == EOF)"
    },
    {
        "line": 210,
        "fullcodeline": "if(result != OK) {"
    },
    {
        "line": 219,
        "fullcodeline": "if((result = drop_privileges(nagios_user, nagios_group)) == ERROR) {"
    },
    {
        "line": 228,
        "fullcodeline": "if (!verify_config && test_configured_paths() == ERROR) {"
    },
    {
        "line": 235,
        "fullcodeline": "if(result != OK) {"
    },
    {
        "line": 265,
        "fullcodeline": "if(result != OK) {"
    },
    {
        "line": 282,
        "fullcodeline": "if(test_scheduling == TRUE) {"
    },
    {
        "line": 663,
        "fullcodeline": "my_free(lock_file);"
    },
    {
        "line": 664,
        "fullcodeline": "my_free(config_file);"
    },
    {
        "line": 665,
        "fullcodeline": "my_free(config_file_dir);"
    },
    {
        "line": 666,
        "fullcodeline": "my_free(nagios_binary_path);"
    },
    {
        "line": 53,
        "fullcodeline": "display_help = TRUE;"
    },
    {
        "line": 57,
        "fullcodeline": "display_license = TRUE;"
    },
    {
        "line": 61,
        "fullcodeline": "verify_config++;"
    },
    {
        "line": 65,
        "fullcodeline": "test_scheduling = TRUE;"
    },
    {
        "line": 69,
        "fullcodeline": "daemon_mode = TRUE;"
    },
    {
        "line": 73,
        "fullcodeline": "precache_objects = TRUE;"
    },
    {
        "line": 77,
        "fullcodeline": "use_precached_objects = TRUE;"
    },
    {
        "line": 80,
        "fullcodeline": "enable_timing_point = TRUE;"
    },
    {
        "line": 83,
        "fullcodeline": "worker_socket = optarg;"
    },
    {
        "line": 87,
        "fullcodeline": "printf(\"Warning: -x is deprecated and will be removed\\n\");"
    },
    {
        "line": 206,
        "fullcodeline": "printf(\"Reading configuration data...\\n\");"
    },
    {
        "line": 211,
        "fullcodeline": "printf(\"   Error processing main config file!\\n\\n\");"
    },
    {
        "line": 212,
        "fullcodeline": "exit(EXIT_FAILURE);"
    },
    {
        "line": 216,
        "fullcodeline": "printf(\"   Read main config file okay...\\n\");"
    },
    {
        "line": 220,
        "fullcodeline": "printf(\"   Failed to drop privileges.  Aborting.\");"
    },
    {
        "line": 221,
        "fullcodeline": "exit(EXIT_FAILURE);"
    },
    {
        "line": 229,
        "fullcodeline": "printf(\"   One or more path problems detected. Aborting.\\n\");"
    },
    {
        "line": 230,
        "fullcodeline": "exit(EXIT_FAILURE);"
    },
    {
        "line": 236,
        "fullcodeline": "printf(\"   Error processing object config files!\\n\\n\");"
    },
    {
        "line": 246,
        "fullcodeline": "printf(\"\\n***> One or more problems was encountered while processing the config files...\\n\");"
    },
    {
        "line": 247,
        "fullcodeline": "printf(\"\\n\");"
    },
    {
        "line": 248,
        "fullcodeline": "printf(\"     Check your configuration file(s) to ensure that they contain valid\\n\");"
    },
    {
        "line": 249,
        "fullcodeline": "printf(\"     directives and data definitions.  If you are upgrading from a previous\\n\");"
    },
    {
        "line": 250,
        "fullcodeline": "printf(\"     version of Nagios, you should be aware that some variables/definitions\\n\");"
    },
    {
        "line": 251,
        "fullcodeline": "printf(\"     may have been removed or modified in this version.  Make sure to read\\n\");"
    },
    {
        "line": 252,
        "fullcodeline": "printf(\"     the HTML documentation regarding the config files, as well as the\\n\");"
    },
    {
        "line": 253,
        "fullcodeline": "printf(\"     'Whats New' section to find out what has changed.\\n\\n\");"
    },
    {
        "line": 254,
        "fullcodeline": "exit(EXIT_FAILURE);"
    },
    {
        "line": 258,
        "fullcodeline": "printf(\"   Read object config files okay...\\n\\n\");"
    },
    {
        "line": 259,
        "fullcodeline": "printf(\"Running pre-flight check on configuration data...\\n\\n\");"
    },
    {
        "line": 266,
        "fullcodeline": "printf(\"\\n***> One or more problems was encountered while running the pre-flight check...\\n\");"
    },
    {
        "line": 267,
        "fullcodeline": "printf(\"\\n\");"
    },
    {
        "line": 268,
        "fullcodeline": "printf(\"     Check your configuration file(s) to ensure that they contain valid\\n\");"
    },
    {
        "line": 269,
        "fullcodeline": "printf(\"     directives and data definitions.  If you are upgrading from a previous\\n\");"
    },
    {
        "line": 270,
        "fullcodeline": "printf(\"     version of Nagios, you should be aware that some variables/definitions\\n\");"
    },
    {
        "line": 271,
        "fullcodeline": "printf(\"     may have been removed or modified in this version.  Make sure to read\\n\");"
    },
    {
        "line": 272,
        "fullcodeline": "printf(\"     the HTML documentation regarding the config files, as well as the\\n\");"
    },
    {
        "line": 273,
        "fullcodeline": "printf(\"     'Whats New' section to find out what has changed.\\n\\n\");"
    },
    {
        "line": 274,
        "fullcodeline": "exit(EXIT_FAILURE);"
    },
    {
        "line": 278,
        "fullcodeline": "printf(\"\\nThings look okay - No serious problems were detected during the pre-flight check\\n\");"
    },
    {
        "line": 285,
        "fullcodeline": "init_event_queue();"
    },
    {
        "line": 286,
        "fullcodeline": "timing_point(\"Done initializing event queue\\n\");"
    },
    {
        "line": 289,
        "fullcodeline": "initialize_retention_data(config_file);"
    },
    {
        "line": 290,
        "fullcodeline": "read_initial_state_information();"
    },
    {
        "line": 291,
        "fullcodeline": "timing_point(\"Retention data and initial state parsed\\n\");"
    },
    {
        "line": 294,
        "fullcodeline": "init_timing_loop();"
    },
    {
        "line": 295,
        "fullcodeline": "timing_point(\"Timing loop initialized\\n\");"
    },
    {
        "line": 298,
        "fullcodeline": "display_scheduling_info();"
    },
    {
        "line": 302,
        "fullcodeline": "result = fcache_objects(object_precache_file);"
    },
    {
        "line": 303,
        "fullcodeline": "timing_point(\"Done precaching objects\\n\");"
    },
    {
        "line": 335,
        "fullcodeline": "if (strchr(argv[0], '/'))"
    },
    {
        "line": 340,
        "fullcodeline": "if (!nagios_binary_path) {"
    },
    {
        "line": 345,
        "fullcodeline": "if (!(nagios_iobs = iobroker_create())) {"
    },
    {
        "line": 657,
        "fullcodeline": "while(sigrestart == TRUE && sigshutdown == FALSE);"
    },
    {
        "line": 659,
        "fullcodeline": "if(daemon_mode == TRUE)"
    },
    {
        "line": 238,
        "fullcodeline": "if(!strstr(config_file, \"nagios.cfg\")) {"
    },
    {
        "line": 304,
        "fullcodeline": "if(result == OK) {"
    },
    {
        "line": 336,
        "fullcodeline": "nagios_binary_path = nspath_absolute(argv[0], NULL);"
    },
    {
        "line": 341,
        "fullcodeline": "logit(NSLOG_RUNTIME_ERROR, TRUE, \"Error: Unable to allocate memory for nagios_binary_path\\n\");"
    },
    {
        "line": 342,
        "fullcodeline": "exit(EXIT_FAILURE);"
    },
    {
        "line": 346,
        "fullcodeline": "logit(NSLOG_RUNTIME_ERROR, TRUE, \"Error: Failed to create IO broker set: %s\\n\","
    },
    {
        "line": 348,
        "fullcodeline": "exit(EXIT_FAILURE);"
    },
    {
        "line": 354,
        "fullcodeline": "wproc_num_workers_spawned = wproc_num_workers_online = 0;"
    },
    {
        "line": 355,
        "fullcodeline": "caught_signal = sigshutdown = FALSE;"
    },
    {
        "line": 356,
        "fullcodeline": "sig_id = 0;"
    },
    {
        "line": 359,
        "fullcodeline": "reset_variables();"
    },
    {
        "line": 360,
        "fullcodeline": "timing_point(\"Variables reset\\n\");"
    },
    {
        "line": 363,
        "fullcodeline": "nagios_pid = (int)getpid();"
    },
    {
        "line": 366,
        "fullcodeline": "result = read_main_config_file(config_file);"
    },
    {
        "line": 371,
        "fullcodeline": "timing_point(\"Main config file read\\n\");"
    },
    {
        "line": 375,
        "fullcodeline": "program_start = time(NULL);"
    },
    {
        "line": 376,
        "fullcodeline": "my_free(mac->x[MACRO_PROCESSSTARTTIME]);"
    },
    {
        "line": 377,
        "fullcodeline": "asprintf(&mac->x[MACRO_PROCESSSTARTTIME], \"%llu\", (unsigned long long)program_start);"
    },
    {
        "line": 416,
        "fullcodeline": "logit(NSLOG_PROCESS_INFO, TRUE, \"Nagios %s starting... (PID=%d)\\n\", PROGRAM_VERSION, (int)getpid());"
    },
    {
        "line": 419,
        "fullcodeline": "now = time(NULL);"
    },
    {
        "line": 420,
        "fullcodeline": "tm = localtime_r(&now, &tm_s);"
    },
    {
        "line": 421,
        "fullcodeline": "strftime(datestring, sizeof(datestring), \"%a %b %d %H:%M:%S %Z %Y\", tm);"
    },
    {
        "line": 422,
        "fullcodeline": "logit(NSLOG_PROCESS_INFO, TRUE, \"Local time is %s\", datestring);"
    },
    {
        "line": 425,
        "fullcodeline": "write_log_file_info(NULL);"
    },
    {
        "line": 428,
        "fullcodeline": "open_debug_log();"
    },
    {
        "line": 435,
        "fullcodeline": "timing_point(\"NEB module API initialized\\n\");"
    },
    {
        "line": 438,
        "fullcodeline": "setup_sighandler();"
    },
    {
        "line": 449,
        "fullcodeline": "timing_point(\"Query handler initialized\\n\");"
    },
    {
        "line": 450,
        "fullcodeline": "nerd_init();"
    },
    {
        "line": 451,
        "fullcodeline": "timing_point(\"NERD initialized\\n\");"
    },
    {
        "line": 458,
        "fullcodeline": "timing_point(\"%u workers spawned\\n\", wproc_num_workers_spawned);"
    },
    {
        "line": 459,
        "fullcodeline": "i = 0;"
    },
    {
        "line": 464,
        "fullcodeline": "timing_point(\"%u workers connected\\n\", wproc_num_workers_online);"
    },
    {
        "line": 467,
        "fullcodeline": "set_loadctl_defaults();"
    },
    {
        "line": 518,
        "fullcodeline": "timing_point(\"Object configuration parsed and understood\\n\");"
    },
    {
        "line": 521,
        "fullcodeline": "fcache_objects(object_cache_file);"
    },
    {
        "line": 522,
        "fullcodeline": "timing_point(\"Objects cached\\n\");"
    },
    {
        "line": 524,
        "fullcodeline": "init_event_queue();"
    },
    {
        "line": 525,
        "fullcodeline": "timing_point(\"Event queue initialized\\n\");"
    },
    {
        "line": 540,
        "fullcodeline": "initialize_downtime_data();"
    },
    {
        "line": 541,
        "fullcodeline": "timing_point(\"Downtime data initialized\\n\");"
    },
    {
        "line": 544,
        "fullcodeline": "initialize_retention_data(config_file);"
    },
    {
        "line": 545,
        "fullcodeline": "timing_point(\"Retention data initialized\\n\");"
    },
    {
        "line": 546,
        "fullcodeline": "read_initial_state_information();"
    },
    {
        "line": 547,
        "fullcodeline": "timing_point(\"Initial state information read\\n\");"
    },
    {
        "line": 550,
        "fullcodeline": "initialize_comment_data();"
    },
    {
        "line": 551,
        "fullcodeline": "timing_point(\"Comment data initialized\\n\");"
    },
    {
        "line": 554,
        "fullcodeline": "initialize_performance_data(config_file);"
    },
    {
        "line": 555,
        "fullcodeline": "timing_point(\"Performance data initialized\\n\");"
    },
    {
        "line": 558,
        "fullcodeline": "init_timing_loop();"
    },
    {
        "line": 559,
        "fullcodeline": "timing_point(\"Event timing loop initialized\\n\");"
    },
    {
        "line": 562,
        "fullcodeline": "init_check_stats();"
    },
    {
        "line": 563,
        "fullcodeline": "timing_point(\"check stats initialized\\n\");"
    },
    {
        "line": 566,
        "fullcodeline": "check_for_nagios_updates(FALSE, TRUE);"
    },
    {
        "line": 567,
        "fullcodeline": "timing_point(\"Update check concluded\\n\");"
    },
    {
        "line": 570,
        "fullcodeline": "update_all_status_data();"
    },
    {
        "line": 571,
        "fullcodeline": "timing_point(\"Status data updated\\n\");"
    },
    {
        "line": 574,
        "fullcodeline": "log_host_states(INITIAL_STATES, NULL);"
    },
    {
        "line": 575,
        "fullcodeline": "log_service_states(INITIAL_STATES, NULL);"
    },
    {
        "line": 576,
        "fullcodeline": "timing_point(\"Initial states logged\\n\");"
    },
    {
        "line": 579,
        "fullcodeline": "sigrestart = FALSE;"
    },
    {
        "line": 582,
        "fullcodeline": "launch_command_file_worker();"
    },
    {
        "line": 583,
        "fullcodeline": "timing_point(\"Command file worker launched\\n\");"
    },
    {
        "line": 591,
        "fullcodeline": "event_start = time(NULL);"
    },
    {
        "line": 592,
        "fullcodeline": "my_free(mac->x[MACRO_EVENTSTARTTIME]);"
    },
    {
        "line": 593,
        "fullcodeline": "asprintf(&mac->x[MACRO_EVENTSTARTTIME], \"%llu\", (unsigned long long)event_start);"
    },
    {
        "line": 595,
        "fullcodeline": "timing_point(\"Entering event execution loop\\n\");"
    },
    {
        "line": 598,
        "fullcodeline": "event_execution_loop();"
    },
    {
        "line": 604,
        "fullcodeline": "qh_deinit(qh_socket_path ? qh_socket_path : DEFAULT_QUERY_SOCKET);"
    },
    {
        "line": 626,
        "fullcodeline": "save_state_information(FALSE);"
    },
    {
        "line": 627,
        "fullcodeline": "cleanup_retention_data();"
    },
    {
        "line": 630,
        "fullcodeline": "cleanup_performance_data();"
    },
    {
        "line": 633,
        "fullcodeline": "cleanup_downtime_data();"
    },
    {
        "line": 640,
        "fullcodeline": "free_worker_memory(WPROC_FORCE);"
    },
    {
        "line": 651,
        "fullcodeline": "cleanup();"
    },
    {
        "line": 654,
        "fullcodeline": "close_debug_log();"
    },
    {
        "line": 660,
        "fullcodeline": "unlink(lock_file);"
    },
    {
        "line": 239,
        "fullcodeline": "printf(\"\\n***> The name of the main configuration file looks suspicious...\\n\");"
    },
    {
        "line": 240,
        "fullcodeline": "printf(\"\\n\");"
    },
    {
        "line": 241,
        "fullcodeline": "printf(\"     Make sure you are specifying the name of the MAIN configuration file on\\n\");"
    },
    {
        "line": 242,
        "fullcodeline": "printf(\"     the command line and not the name of another configuration file.  The\\n\");"
    },
    {
        "line": 243,
        "fullcodeline": "printf(\"     main configuration file is typically '%s'\\n\", DEFAULT_CONFIG_FILE);"
    },
    {
        "line": 305,
        "fullcodeline": "printf(\"Object precache file created:\\n%s\\n\", object_precache_file);"
    },
    {
        "line": 338,
        "fullcodeline": "nagios_binary_path = strdup(argv[0]);"
    },
    {
        "line": 347,
        "fullcodeline": "strerror(errno));"
    },
    {
        "line": 367,
        "fullcodeline": "if (result != OK) {"
    },
    {
        "line": 380,
        "fullcodeline": "if(daemon_mode == TRUE && sigrestart == FALSE) {"
    },
    {
        "line": 396,
        "fullcodeline": "if(drop_privileges(nagios_user, nagios_group) == ERROR) {"
    },
    {
        "line": 404,
        "fullcodeline": "if (test_path_access(nagios_binary_path, X_OK)) {"
    },
    {
        "line": 410,
        "fullcodeline": "if (test_configured_paths() == ERROR) {"
    },
    {
        "line": 445,
        "fullcodeline": "if (qh_init(qh_socket_path ? qh_socket_path : DEFAULT_QUERY_SOCKET) != OK) {"
    },
    {
        "line": 454,
        "fullcodeline": "if(init_workers(num_check_workers) < 0) {"
    },
    {
        "line": 460,
        "fullcodeline": "while (i < 50 && wproc_num_workers_online < wproc_num_workers_spawned) {"
    },
    {
        "line": 486,
        "fullcodeline": "if(result == OK)"
    },
    {
        "line": 490,
        "fullcodeline": "if(result != OK)"
    },
    {
        "line": 501,
        "fullcodeline": "if(result != OK) {"
    },
    {
        "line": 534,
        "fullcodeline": "if(sigrestart == FALSE) {"
    },
    {
        "line": 609,
        "fullcodeline": "if(caught_signal == TRUE) {"
    },
    {
        "line": 636,
        "fullcodeline": "if(sigrestart == FALSE) {"
    },
    {
        "line": 642,
        "fullcodeline": "if(sigshutdown == TRUE) {"
    },
    {
        "line": 308,
        "fullcodeline": "printf(\"Failed to precache objects to '%s': %s\\n\", object_precache_file, strerror(errno));"
    },
    {
        "line": 368,
        "fullcodeline": "logit(NSLOG_CONFIG_ERROR, TRUE, \"Error: Failed to process config file '%s'. Aborting\\n\", config_file);"
    },
    {
        "line": 369,
        "fullcodeline": "exit(EXIT_FAILURE);"
    },
    {
        "line": 382,
        "fullcodeline": "result = daemon_init();"
    },
    {
        "line": 392,
        "fullcodeline": "nagios_pid = (int)getpid();"
    },
    {
        "line": 398,
        "fullcodeline": "logit(NSLOG_PROCESS_INFO | NSLOG_RUNTIME_ERROR | NSLOG_CONFIG_ERROR, TRUE, \"Failed to drop privileges.  Aborting.\");"
    },
    {
        "line": 400,
        "fullcodeline": "cleanup();"
    },
    {
        "line": 401,
        "fullcodeline": "exit(ERROR);"
    },
    {
        "line": 405,
        "fullcodeline": "logit(NSLOG_RUNTIME_ERROR, TRUE, \"Error: failed to access() %s: %s\\n\", nagios_binary_path, strerror(errno));"
    },
    {
        "line": 406,
        "fullcodeline": "logit(NSLOG_RUNTIME_ERROR, TRUE, \"Error: Spawning workers will be impossible. Aborting.\\n\");"
    },
    {
        "line": 407,
        "fullcodeline": "exit(EXIT_FAILURE);"
    },
    {
        "line": 412,
        "fullcodeline": "exit(EXIT_FAILURE);"
    },
    {
        "line": 446,
        "fullcodeline": "logit(NSLOG_RUNTIME_ERROR, TRUE, \"Error: Failed to initialize query handler. Aborting\\n\");"
    },
    {
        "line": 447,
        "fullcodeline": "exit(EXIT_FAILURE);"
    },
    {
        "line": 455,
        "fullcodeline": "logit(NSLOG_RUNTIME_ERROR, TRUE, \"Failed to spawn workers. Aborting\\n\");"
    },
    {
        "line": 456,
        "fullcodeline": "exit(EXIT_FAILURE);"
    },
    {
        "line": 461,
        "fullcodeline": "iobroker_poll(nagios_iobs, 50);"
    },
    {
        "line": 462,
        "fullcodeline": "i++;"
    },
    {
        "line": 487,
        "fullcodeline": "result = read_all_object_data(config_file);"
    },
    {
        "line": 491,
        "fullcodeline": "logit(NSLOG_PROCESS_INFO | NSLOG_RUNTIME_ERROR | NSLOG_CONFIG_ERROR, TRUE, \"Bailing out due to one or more errors encountered in the configuration files. Run Nagios from the command line with the -v option to verify your config before restarting. (PID=%d)\", (int)getpid());"
    },
    {
        "line": 514,
        "fullcodeline": "cleanup();"
    },
    {
        "line": 515,
        "fullcodeline": "exit(ERROR);"
    },
    {
        "line": 535,
        "fullcodeline": "initialize_status_data(config_file);"
    },
    {
        "line": 536,
        "fullcodeline": "timing_point(\"Status data initialized\\n\");"
    },
    {
        "line": 637,
        "fullcodeline": "cleanup_status_data(TRUE);"
    },
    {
        "line": 643,
        "fullcodeline": "iobroker_destroy(nagios_iobs, IOBROKER_CLOSE_SOCKETS);"
    },
    {
        "line": 644,
        "fullcodeline": "nagios_iobs = NULL;"
    },
    {
        "line": 647,
        "fullcodeline": "logit(NSLOG_PROCESS_INFO, TRUE, \"Successfully shutdown... (PID=%d)\\n\", (int)getpid());"
    },
    {
        "line": 385,
        "fullcodeline": "if(result == ERROR) {"
    },
    {
        "line": 504,
        "fullcodeline": "if(sigrestart == TRUE) {"
    },
    {
        "line": 611,
        "fullcodeline": "if(sig_id == SIGHUP)"
    },
    {
        "line": 386,
        "fullcodeline": "logit(NSLOG_PROCESS_INFO | NSLOG_RUNTIME_ERROR, TRUE, \"Bailing out due to failure to daemonize. (PID=%d)\", (int)getpid());"
    },
    {
        "line": 387,
        "fullcodeline": "cleanup();"
    },
    {
        "line": 388,
        "fullcodeline": "exit(EXIT_FAILURE);"
    },
    {
        "line": 496,
        "fullcodeline": "if((result = pre_flight_check()) != OK)"
    },
    {
        "line": 507,
        "fullcodeline": "cleanup_status_data(TRUE);"
    },
    {
        "line": 612,
        "fullcodeline": "logit(NSLOG_PROCESS_INFO, TRUE, \"Caught SIGHUP, restarting...\\n\");"
    },
    {
        "line": 497,
        "fullcodeline": "logit(NSLOG_PROCESS_INFO | NSLOG_RUNTIME_ERROR | NSLOG_VERIFICATION_ERROR, TRUE, \"Bailing out due to errors encountered while running the pre-flight check.  Run Nagios from the command line with the -v option to verify your config before restarting. (PID=%d)\\n\", (int)getpid());"
    }
]