[
    {
        "line": 5,
        "fullcodeline": "VncDisplay *vd = vs->vd;"
    },
    {
        "line": 145,
        "fullcodeline": "vnc_read_when(vs, protocol_client_msg, 1);"
    },
    {
        "line": 7,
        "fullcodeline": "if (data[0] > 3) {"
    },
    {
        "line": 8,
        "fullcodeline": "update_displaychangelistener(&vd->dcl, VNC_REFRESH_INTERVAL_BASE);"
    },
    {
        "line": 16,
        "fullcodeline": "set_pixel_format(vs, read_u8(data, 4), read_u8(data, 5),"
    },
    {
        "line": 38,
        "fullcodeline": "set_encodings(vs, (int32_t *)(data + 4), limit);"
    },
    {
        "line": 44,
        "fullcodeline": "framebuffer_update_request(vs,"
    },
    {
        "line": 52,
        "fullcodeline": "key_event(vs, read_u8(data, 1), read_u32(data, 4));"
    },
    {
        "line": 58,
        "fullcodeline": "pointer_event(vs, read_u8(data, 1), read_u16(data, 2), read_u16(data, 4));"
    },
    {
        "line": 77,
        "fullcodeline": "client_cut_text(vs, read_u32(data, 4), data + 8);"
    },
    {
        "line": 140,
        "fullcodeline": "printf(\"Msg: %d\\n\", data[0]);"
    },
    {
        "line": 141,
        "fullcodeline": "vnc_client_error(vs);"
    },
    {
        "line": 13,
        "fullcodeline": "if (len == 1)"
    },
    {
        "line": 17,
        "fullcodeline": "read_u8(data, 6), read_u8(data, 7),"
    },
    {
        "line": 18,
        "fullcodeline": "read_u16(data, 8), read_u16(data, 10),"
    },
    {
        "line": 19,
        "fullcodeline": "read_u16(data, 12), read_u8(data, 14),"
    },
    {
        "line": 20,
        "fullcodeline": "read_u8(data, 15), read_u8(data, 16));"
    },
    {
        "line": 23,
        "fullcodeline": "if (len == 1)"
    },
    {
        "line": 26,
        "fullcodeline": "if (len == 4) {"
    },
    {
        "line": 33,
        "fullcodeline": "for (i = 0; i < limit; i++) {"
    },
    {
        "line": 41,
        "fullcodeline": "if (len == 1)"
    },
    {
        "line": 45,
        "fullcodeline": "read_u8(data, 1), read_u16(data, 2), read_u16(data, 4),"
    },
    {
        "line": 46,
        "fullcodeline": "read_u16(data, 6), read_u16(data, 8));"
    },
    {
        "line": 49,
        "fullcodeline": "if (len == 1)"
    },
    {
        "line": 55,
        "fullcodeline": "if (len == 1)"
    },
    {
        "line": 61,
        "fullcodeline": "if (len == 1) {"
    },
    {
        "line": 64,
        "fullcodeline": "if (len == 8) {"
    },
    {
        "line": 80,
        "fullcodeline": "if (len == 1)"
    },
    {
        "line": 83,
        "fullcodeline": "switch (read_u8(data, 1)) {"
    },
    {
        "line": 27,
        "fullcodeline": "limit = read_u16(data, 2);"
    },
    {
        "line": 34,
        "fullcodeline": "int32_t val = read_s32(data, 4 + (i * 4));"
    },
    {
        "line": 35,
        "fullcodeline": "memcpy(data + 4 + (i * 4), &val, sizeof(val));"
    },
    {
        "line": 65,
        "fullcodeline": "uint32_t dlen = read_u32(data, 4);"
    },
    {
        "line": 88,
        "fullcodeline": "ext_key_event(vs, read_u16(data, 2),"
    },
    {
        "line": 134,
        "fullcodeline": "printf(\"Msg: %d\\n\", read_u16(data, 0));"
    },
    {
        "line": 135,
        "fullcodeline": "vnc_client_error(vs);"
    },
    {
        "line": 28,
        "fullcodeline": "if (limit > 0)"
    },
    {
        "line": 31,
        "fullcodeline": "limit = read_u16(data, 2);"
    },
    {
        "line": 66,
        "fullcodeline": "if (dlen > (1 << 20)) {"
    },
    {
        "line": 72,
        "fullcodeline": "if (dlen > 0) {"
    },
    {
        "line": 85,
        "fullcodeline": "if (len == 2)"
    },
    {
        "line": 89,
        "fullcodeline": "read_u32(data, 4), read_u32(data, 8));"
    },
    {
        "line": 92,
        "fullcodeline": "if (len == 2)"
    },
    {
        "line": 95,
        "fullcodeline": "switch (read_u16 (data, 2)) {"
    },
    {
        "line": 67,
        "fullcodeline": "error_report(\"vnc: client_cut_text msg payload has %u bytes\""
    },
    {
        "line": 69,
        "fullcodeline": "vnc_client_error(vs);"
    },
    {
        "line": 97,
        "fullcodeline": "audio_add(vs);"
    },
    {
        "line": 100,
        "fullcodeline": "audio_del(vs);"
    },
    {
        "line": 117,
        "fullcodeline": "vs->as.nchannels = read_u8(data, 5);"
    },
    {
        "line": 124,
        "fullcodeline": "vs->as.freq = read_u32(data, 6);"
    },
    {
        "line": 127,
        "fullcodeline": "printf (\"Invalid audio message %d\\n\", read_u8(data, 4));"
    },
    {
        "line": 128,
        "fullcodeline": "vnc_client_error(vs);"
    },
    {
        "line": 29,
        "fullcodeline": "return 4 + (limit * 4);"
    },
    {
        "line": 73,
        "fullcodeline": "return 8 + dlen;"
    },
    {
        "line": 103,
        "fullcodeline": "if (len == 4)"
    },
    {
        "line": 105,
        "fullcodeline": "switch (read_u8(data, 4)) {"
    },
    {
        "line": 118,
        "fullcodeline": "if (vs->as.nchannels != 1 && vs->as.nchannels != 2) {"
    },
    {
        "line": 106,
        "fullcodeline": "case 0: vs->as.fmt = AUD_FMT_U8; break;"
    },
    {
        "line": 107,
        "fullcodeline": "case 1: vs->as.fmt = AUD_FMT_S8; break;"
    },
    {
        "line": 108,
        "fullcodeline": "case 2: vs->as.fmt = AUD_FMT_U16; break;"
    },
    {
        "line": 109,
        "fullcodeline": "case 3: vs->as.fmt = AUD_FMT_S16; break;"
    },
    {
        "line": 110,
        "fullcodeline": "case 4: vs->as.fmt = AUD_FMT_U32; break;"
    },
    {
        "line": 111,
        "fullcodeline": "case 5: vs->as.fmt = AUD_FMT_S32; break;"
    },
    {
        "line": 113,
        "fullcodeline": "printf(\"Invalid audio format %d\\n\", read_u8(data, 4));"
    },
    {
        "line": 114,
        "fullcodeline": "vnc_client_error(vs);"
    },
    {
        "line": 119,
        "fullcodeline": "printf(\"Invalid audio channel coount %d\\n\","
    },
    {
        "line": 121,
        "fullcodeline": "vnc_client_error(vs);"
    },
    {
        "line": 120,
        "fullcodeline": "read_u8(data, 5));"
    }
]