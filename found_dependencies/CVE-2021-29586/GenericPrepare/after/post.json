[
    {
        "line": 2,
        "fullcodeline": "auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);"
    },
    {
        "line": 3,
        "fullcodeline": "OpData* data = reinterpret_cast<OpData*>(node->user_data);"
    },
    {
        "line": 5,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);"
    },
    {
        "line": 6,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);"
    },
    {
        "line": 8,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output));"
    },
    {
        "line": 10,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &input));"
    },
    {
        "line": 11,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, NumDimensions(input), 4);"
    },
    {
        "line": 12,
        "fullcodeline": "TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);"
    },
    {
        "line": 20,
        "fullcodeline": "auto padding = params->padding;"
    },
    {
        "line": 24,
        "fullcodeline": "TF_LITE_ENSURE(context, params->stride_height > 0);"
    },
    {
        "line": 25,
        "fullcodeline": "TF_LITE_ENSURE(context, params->stride_width > 0);"
    },
    {
        "line": 27,
        "fullcodeline": "data->padding = ComputePaddingHeightWidth("
    },
    {
        "line": 44,
        "fullcodeline": "TfLiteIntArray* output_size = TfLiteIntArrayCreate(4);"
    },
    {
        "line": 45,
        "fullcodeline": "output_size->data[0] = batches;"
    },
    {
        "line": 46,
        "fullcodeline": "output_size->data[1] = out_height;"
    },
    {
        "line": 47,
        "fullcodeline": "output_size->data[2] = out_width;"
    },
    {
        "line": 48,
        "fullcodeline": "output_size->data[3] = channels_out;"
    },
    {
        "line": 32,
        "fullcodeline": "if (input->type == kTfLiteUInt8 || input->type == kTfLiteInt8) {"
    },
    {
        "line": 49,
        "fullcodeline": "return context->ResizeTensor(context, output, output_size);"
    },
    {
        "line": 33,
        "fullcodeline": "if (pool_type == kAverage || pool_type == kMax) {"
    },
    {
        "line": 38,
        "fullcodeline": "if (pool_type == kL2) {"
    },
    {
        "line": 34,
        "fullcodeline": "TFLITE_DCHECK_LE(std::abs(input->params.scale - output->params.scale),"
    },
    {
        "line": 40,
        "fullcodeline": "TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);"
    }
]