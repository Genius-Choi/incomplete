[
    {
        "line": 3,
        "fullcodeline": "e_type  = get_te16(&ehdri.e_type);"
    },
    {
        "line": 4,
        "fullcodeline": "e_phnum = get_te16(&ehdri.e_phnum);"
    },
    {
        "line": 5,
        "fullcodeline": "e_shnum = get_te16(&ehdri.e_shnum);"
    },
    {
        "line": 6,
        "fullcodeline": "unsigned const e_phentsize = get_te16(&ehdri.e_phentsize);"
    },
    {
        "line": 19,
        "fullcodeline": "e_phoff = get_te32(&ehdri.e_phoff);"
    },
    {
        "line": 20,
        "fullcodeline": "unsigned const last_Phdr = e_phoff + e_phnum * usizeof(Elf32_Phdr);"
    },
    {
        "line": 26,
        "fullcodeline": "e_shoff = get_te32(&ehdri.e_shoff);"
    },
    {
        "line": 27,
        "fullcodeline": "unsigned const last_Shdr = e_shoff + e_shnum * usizeof(Elf32_Shdr);"
    },
    {
        "line": 35,
        "fullcodeline": "sz_phdrs = e_phnum * e_phentsize;"
    },
    {
        "line": 7,
        "fullcodeline": "if (ehdri.e_ident[Elf32_Ehdr::EI_CLASS]!=Elf32_Ehdr::ELFCLASS32"
    },
    {
        "line": 18,
        "fullcodeline": "if (0==e_phnum) throwCantUnpack(\"0==e_phnum\");"
    },
    {
        "line": 37,
        "fullcodeline": "if (f && Elf32_Ehdr::ET_DYN!=e_type) {"
    },
    {
        "line": 44,
        "fullcodeline": "if (f && Elf32_Ehdr::ET_DYN==e_type) {"
    },
    {
        "line": 11,
        "fullcodeline": "|| (Elf32_Ehdr::ELFDATA2LSB == ehdri.e_ident[Elf32_Ehdr::EI_DATA]"
    },
    {
        "line": 13,
        "fullcodeline": "e_phoff = 0;"
    },
    {
        "line": 14,
        "fullcodeline": "e_shoff = 0;"
    },
    {
        "line": 15,
        "fullcodeline": "sz_phdrs = 0;"
    },
    {
        "line": 21,
        "fullcodeline": "if (last_Phdr < e_phoff  // wrap-around"
    },
    {
        "line": 23,
        "fullcodeline": "||  (unsigned long)file_size < last_Phdr) {"
    },
    {
        "line": 28,
        "fullcodeline": "if (last_Shdr < e_shoff  // wrap-around"
    },
    {
        "line": 30,
        "fullcodeline": "||  (unsigned long)file_size < last_Shdr) {"
    },
    {
        "line": 38,
        "fullcodeline": "unsigned const len = sz_phdrs + e_phoff;"
    },
    {
        "line": 39,
        "fullcodeline": "alloc_file_image(file_image, len);"
    },
    {
        "line": 40,
        "fullcodeline": "f->seek(0, SEEK_SET);"
    },
    {
        "line": 41,
        "fullcodeline": "f->readx(file_image, len);"
    },
    {
        "line": 46,
        "fullcodeline": "alloc_file_image(file_image, file_size);"
    },
    {
        "line": 47,
        "fullcodeline": "f->seek(0, SEEK_SET);"
    },
    {
        "line": 48,
        "fullcodeline": "f->readx(file_image, file_size);"
    },
    {
        "line": 49,
        "fullcodeline": "phdri= (Elf32_Phdr *)(e_phoff + file_image);  // do not free() !!"
    },
    {
        "line": 50,
        "fullcodeline": "shdri= (Elf32_Shdr *)(e_shoff + file_image);  // do not free() !!"
    },
    {
        "line": 54,
        "fullcodeline": "sec_dynsym = elf_find_section_type(Elf32_Shdr::SHT_DYNSYM);"
    },
    {
        "line": 62,
        "fullcodeline": "Elf32_Phdr const *phdr= phdri;"
    },
    {
        "line": 74,
        "fullcodeline": "dynstr =      (char const *)elf_find_dynamic(Elf32_Dyn::DT_STRTAB);"
    },
    {
        "line": 75,
        "fullcodeline": "dynsym = (Elf32_Sym const *)elf_find_dynamic(Elf32_Dyn::DT_SYMTAB);"
    },
    {
        "line": 76,
        "fullcodeline": "gashtab = (unsigned const *)elf_find_dynamic(Elf32_Dyn::DT_GNU_HASH);"
    },
    {
        "line": 77,
        "fullcodeline": "hashtab = (unsigned const *)elf_find_dynamic(Elf32_Dyn::DT_HASH);"
    },
    {
        "line": 81,
        "fullcodeline": "jni_onload_sym = elf_lookup(\"JNI_OnLoad\");"
    },
    {
        "line": 9,
        "fullcodeline": "|| (Elf32_Ehdr::ELFDATA2MSB == ehdri.e_ident[Elf32_Ehdr::EI_DATA]"
    },
    {
        "line": 12,
        "fullcodeline": "&& &N_BELE_RTP::le_policy != bele)) {"
    },
    {
        "line": 22,
        "fullcodeline": "||  e_phoff != sizeof(Elf32_Ehdr)  // must be contiguous"
    },
    {
        "line": 29,
        "fullcodeline": "||  (e_shnum && e_shoff < last_Phdr)"
    },
    {
        "line": 31,
        "fullcodeline": "if (opt->cmd == CMD_COMPRESS) {"
    },
    {
        "line": 63,
        "fullcodeline": "for (int j = e_phnum; --j>=0; ++phdr)"
    },
    {
        "line": 8,
        "fullcodeline": "|| sizeof(Elf32_Phdr) != e_phentsize"
    },
    {
        "line": 10,
        "fullcodeline": "&& &N_BELE_RTP::be_policy != bele)"
    },
    {
        "line": 52,
        "fullcodeline": "shdri = nullptr;"
    },
    {
        "line": 56,
        "fullcodeline": "unsigned t = get_te32(&sec_dynsym->sh_link);"
    },
    {
        "line": 59,
        "fullcodeline": "sec_dynstr = &shdri[t];"
    },
    {
        "line": 78,
        "fullcodeline": "if (3& ((upx_uintptr_t)dynsym | (upx_uintptr_t)gashtab | (upx_uintptr_t)hashtab)) {"
    },
    {
        "line": 64,
        "fullcodeline": "if (Elf32_Phdr::PT_DYNAMIC==get_te32(&phdr->p_type)) {"
    },
    {
        "line": 65,
        "fullcodeline": "unsigned offset = check_pt_dynamic(phdr);"
    },
    {
        "line": 66,
        "fullcodeline": "dynseg= (Elf32_Dyn const *)(offset + file_image);"
    },
    {
        "line": 83,
        "fullcodeline": "jni_onload_va = get_te32(&jni_onload_sym->st_value);"
    },
    {
        "line": 68,
        "fullcodeline": "umin(get_te32(&phdr->p_filesz), file_size - offset));"
    },
    {
        "line": 70,
        "fullcodeline": "else if (is_LOAD32(phdr)) {"
    },
    {
        "line": 71,
        "fullcodeline": "check_pt_load(phdr);"
    }
]