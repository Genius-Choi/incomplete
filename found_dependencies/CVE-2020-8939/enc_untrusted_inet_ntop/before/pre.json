[
    {
        "line": 18,
        "fullcodeline": "input.Push<int>(TokLinuxAfFamily(af));"
    },
    {
        "line": 19,
        "fullcodeline": "input.PushByReference(Extent{reinterpret_cast<const char *>(src), src_size});"
    },
    {
        "line": 20,
        "fullcodeline": "input.Push(size);"
    },
    {
        "line": 23,
        "fullcodeline": "const auto status = NonSystemCallDispatcher("
    },
    {
        "line": 25,
        "fullcodeline": "CheckStatusAndParamCount(status, output, \"enc_untrusted_inet_ntop\", 2);"
    },
    {
        "line": 27,
        "fullcodeline": "auto result = output.next();"
    },
    {
        "line": 28,
        "fullcodeline": "int klinux_errno = output.next<int>();"
    },
    {
        "line": 34,
        "fullcodeline": "memcpy(dst, result.data(),"
    },
    {
        "line": 3,
        "fullcodeline": "if (!src || !dst) {"
    },
    {
        "line": 8,
        "fullcodeline": "if (af == AF_INET) {"
    },
    {
        "line": 29,
        "fullcodeline": "if (result.empty()) {"
    },
    {
        "line": 35,
        "fullcodeline": "std::min(static_cast<size_t>(size),"
    },
    {
        "line": 4,
        "fullcodeline": "errno = EFAULT;"
    },
    {
        "line": 9,
        "fullcodeline": "src_size = sizeof(struct in_addr);"
    },
    {
        "line": 36,
        "fullcodeline": "static_cast<size_t>(INET6_ADDRSTRLEN)));"
    },
    {
        "line": 30,
        "fullcodeline": "errno = FromkLinuxErrorNumber(klinux_errno);"
    },
    {
        "line": 10,
        "fullcodeline": "} else if (af == AF_INET6) {"
    },
    {
        "line": 11,
        "fullcodeline": "src_size = sizeof(struct in6_addr);"
    },
    {
        "line": 13,
        "fullcodeline": "errno = EAFNOSUPPORT;"
    }
]