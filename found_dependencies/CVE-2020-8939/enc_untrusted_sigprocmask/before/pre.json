[
    {
        "line": 8,
        "fullcodeline": "int klinux_how = TokLinuxSigMaskAction(how);"
    },
    {
        "line": 15,
        "fullcodeline": "input.Push<int>(klinux_how);"
    },
    {
        "line": 18,
        "fullcodeline": "const auto status = NonSystemCallDispatcher("
    },
    {
        "line": 20,
        "fullcodeline": "CheckStatusAndParamCount(status, output, \"enc_untrusted_sigprocmask\", 3);"
    },
    {
        "line": 22,
        "fullcodeline": "int result = output.next<int>();"
    },
    {
        "line": 23,
        "fullcodeline": "int klinux_errno = output.next<int>();"
    },
    {
        "line": 31,
        "fullcodeline": "klinux_sigset_t klinux_oldset = output.next<klinux_sigset_t>();"
    },
    {
        "line": 3,
        "fullcodeline": "if (!TokLinuxSigset(set, &klinux_set)) {"
    },
    {
        "line": 9,
        "fullcodeline": "if (klinux_how == -1) {"
    },
    {
        "line": 16,
        "fullcodeline": "input.Push<klinux_sigset_t>(klinux_set);"
    },
    {
        "line": 26,
        "fullcodeline": "if (result == -1) {"
    },
    {
        "line": 32,
        "fullcodeline": "if (oldset != nullptr) {"
    },
    {
        "line": 4,
        "fullcodeline": "errno = EINVAL;"
    },
    {
        "line": 5,
        "fullcodeline": "return -1;"
    },
    {
        "line": 11,
        "fullcodeline": "return -1;"
    },
    {
        "line": 27,
        "fullcodeline": "errno = FromkLinuxErrorNumber(klinux_errno);"
    },
    {
        "line": 33,
        "fullcodeline": "if (!FromkLinuxSigset(&klinux_oldset, oldset)) {"
    },
    {
        "line": 35,
        "fullcodeline": "return -1;"
    }
]