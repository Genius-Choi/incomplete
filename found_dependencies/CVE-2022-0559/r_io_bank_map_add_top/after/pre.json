[
    {
        "line": 2,
        "fullcodeline": "RIOBank *bank = r_io_bank_get (io, bankid);"
    },
    {
        "line": 3,
        "fullcodeline": "RIOMap *map = r_io_map_get (io, mapid);"
    },
    {
        "line": 4,
        "fullcodeline": "r_return_val_if_fail (io && bank && map, false);"
    },
    {
        "line": 5,
        "fullcodeline": "RIOMapRef *mapref = _mapref_from_map (map);"
    },
    {
        "line": 9,
        "fullcodeline": "RIOSubMap *sm = r_io_submap_new (io, mapref);"
    },
    {
        "line": 14,
        "fullcodeline": "RRBNode *entry = _find_entry_submap_node (bank, sm);"
    },
    {
        "line": 26,
        "fullcodeline": "RIOSubMap *bd = (RIOSubMap *)entry->data;"
    },
    {
        "line": 71,
        "fullcodeline": "ut64 smto = r_io_submap_to (sm);"
    },
    {
        "line": 6,
        "fullcodeline": "if (!mapref) {"
    },
    {
        "line": 10,
        "fullcodeline": "if (!sm) {"
    },
    {
        "line": 15,
        "fullcodeline": "if (!entry) {"
    },
    {
        "line": 72,
        "fullcodeline": "while (entry && r_io_submap_to (((RIOSubMap *)entry->data)) <= smto) {"
    },
    {
        "line": 87,
        "fullcodeline": "if (entry && r_io_submap_from (((RIOSubMap *)entry->data)) <= r_io_submap_to (sm)) {"
    },
    {
        "line": 27,
        "fullcodeline": "if (r_io_submap_to (bd) == r_io_submap_to (sm) &&"
    },
    {
        "line": 28,
        "fullcodeline": "r_io_submap_from (bd) >= r_io_submap_from (sm)) {"
    },
    {
        "line": 32,
        "fullcodeline": "memcpy (bd, sm, sizeof (RIOSubMap));"
    },
    {
        "line": 37,
        "fullcodeline": "if (r_io_submap_from (bd) < r_io_submap_from (sm) &&"
    },
    {
        "line": 38,
        "fullcodeline": "r_io_submap_to (sm) < r_io_submap_to (bd)) {"
    },
    {
        "line": 40,
        "fullcodeline": "RIOSubMap *bdsm = R_NEWCOPY (RIOSubMap, bd);"
    },
    {
        "line": 46,
        "fullcodeline": "r_io_submap_set_from (bdsm, r_io_submap_to (sm) + 1);"
    },
    {
        "line": 67,
        "fullcodeline": "if (r_io_submap_from (bd) < r_io_submap_from (sm)) {"
    },
    {
        "line": 69,
        "fullcodeline": "entry = r_rbnode_next (entry);"
    },
    {
        "line": 74,
        "fullcodeline": "RRBNode *next = r_rbnode_next (entry);"
    },
    {
        "line": 77,
        "fullcodeline": "void *smfree = bank->submaps->free;"
    },
    {
        "line": 78,
        "fullcodeline": "bank->submaps->free = NULL;"
    },
    {
        "line": 79,
        "fullcodeline": "bool a = r_crbtree_delete (bank->submaps, entry->data, _find_sm_by_from_vaddr_cb, NULL);"
    },
    {
        "line": 80,
        "fullcodeline": "bank->submaps->free = smfree;"
    },
    {
        "line": 85,
        "fullcodeline": "entry = next;"
    },
    {
        "line": 88,
        "fullcodeline": "bd = (RIOSubMap *)entry->data;"
    },
    {
        "line": 91,
        "fullcodeline": "if (!r_crbtree_insert (bank->submaps, sm, _find_sm_by_from_vaddr_cb, NULL)) {"
    },
    {
        "line": 41,
        "fullcodeline": "if (!bdsm) {"
    },
    {
        "line": 47,
        "fullcodeline": "r_io_submap_set_to (bd, r_io_submap_from (sm) - 1);"
    },
    {
        "line": 68,
        "fullcodeline": "r_io_submap_set_to (bd, r_io_submap_from (sm) - 1);"
    },
    {
        "line": 17,
        "fullcodeline": "if (!r_crbtree_insert (bank->submaps, sm, _find_sm_by_from_vaddr_cb, NULL)) {"
    },
    {
        "line": 49,
        "fullcodeline": "if (!r_crbtree_insert (bank->submaps, sm, _find_sm_by_from_vaddr_cb, NULL)) {"
    },
    {
        "line": 55,
        "fullcodeline": "if (!r_crbtree_insert (bank->submaps, bdsm, _find_sm_by_from_vaddr_cb, NULL)) {"
    },
    {
        "line": 56,
        "fullcodeline": "r_crbtree_delete (bank->submaps, sm, _find_sm_by_from_vaddr_cb, NULL);"
    },
    {
        "line": 82,
        "fullcodeline": "entry = NULL;"
    },
    {
        "line": 89,
        "fullcodeline": "r_io_submap_set_from (bd, r_io_submap_to (sm) + 1);"
    }
]