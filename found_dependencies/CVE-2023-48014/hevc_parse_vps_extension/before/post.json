[
    {
        "line": 4,
        "fullcodeline": "u32 i, j, num_scalability_types, num_add_olss, num_add_layer_set, num_indepentdent_layers, nb_bits, default_output_layer_idc = 0;"
    },
    {
        "line": 5,
        "fullcodeline": "u8 dimension_id_len[16], dim_bit_offset[16];"
    },
    {
        "line": 7,
        "fullcodeline": "u8 layer_set_idx_for_ols_minus1[MAX_LHVC_LAYERS];"
    },
    {
        "line": 8,
        "fullcodeline": "u8 nb_output_layers_in_output_layer_set[MAX_LHVC_LAYERS + 1];"
    },
    {
        "line": 9,
        "fullcodeline": "u8 ols_highest_output_layer_id[MAX_LHVC_LAYERS + 1];"
    },
    {
        "line": 12,
        "fullcodeline": "u8 num_direct_ref_layers[64], num_pred_layers[64], num_layers_in_tree_partition[MAX_LHVC_LAYERS];"
    },
    {
        "line": 13,
        "fullcodeline": "u8 dependency_flag[MAX_LHVC_LAYERS][MAX_LHVC_LAYERS], id_pred_layers[64][MAX_LHVC_LAYERS];"
    },
    {
        "line": 18,
        "fullcodeline": "u8 layer_id_in_list_flag[64];"
    },
    {
        "line": 19,
        "fullcodeline": "Bool OutputLayerFlag[MAX_LHVC_LAYERS][MAX_LHVC_LAYERS];"
    },
    {
        "line": 21,
        "fullcodeline": "vps->vps_extension_found = 1;"
    },
    {
        "line": 25,
        "fullcodeline": "splitting_flag = gf_bs_read_int_log(bs, 1, \"splitting_flag\");"
    },
    {
        "line": 26,
        "fullcodeline": "num_scalability_types = 0;"
    },
    {
        "line": 34,
        "fullcodeline": "dimension_id_len[0] = 0;"
    },
    {
        "line": 51,
        "fullcodeline": "vps_nuh_layer_id_present_flag = gf_bs_read_int_log(bs, 1, \"vps_nuh_layer_id_present_flag\");"
    },
    {
        "line": 52,
        "fullcodeline": "vps->layer_id_in_nuh[0] = 0;"
    },
    {
        "line": 53,
        "fullcodeline": "vps->layer_id_in_vps[0] = 0;"
    },
    {
        "line": 85,
        "fullcodeline": "view_id_len = gf_bs_read_int_log(bs, 4, \"view_id_len\");"
    },
    {
        "line": 131,
        "fullcodeline": "memset(layer_id_in_list_flag, 0, 64 * sizeof(u8));"
    },
    {
        "line": 132,
        "fullcodeline": "k = 0; //num_indepentdent_layers"
    },
    {
        "line": 148,
        "fullcodeline": "num_indepentdent_layers = k;"
    },
    {
        "line": 150,
        "fullcodeline": "num_add_layer_set = 0;"
    },
    {
        "line": 177,
        "fullcodeline": "gf_bs_read_int_log(bs, 1, \"default_ref_layers_active_flag\");"
    },
    {
        "line": 179,
        "fullcodeline": "vps->num_profile_tier_level = 1 + gf_bs_read_ue_log(bs, \"num_profile_tier_level\");"
    },
    {
        "line": 191,
        "fullcodeline": "NumLayerSets = vps->num_layer_sets + num_add_layer_set;"
    },
    {
        "line": 192,
        "fullcodeline": "num_add_olss = 0;"
    },
    {
        "line": 199,
        "fullcodeline": "vps->num_output_layer_sets = num_add_olss + NumLayerSets;"
    },
    {
        "line": 207,
        "fullcodeline": "layer_set_idx_for_ols_minus1[0] = 1;"
    },
    {
        "line": 208,
        "fullcodeline": "vps->output_layer_flag[0][0] = 1;"
    },
    {
        "line": 283,
        "fullcodeline": "vps->num_rep_formats = 1 + gf_bs_read_ue_log(bs, \"num_rep_formats_minus1\");"
    },
    {
        "line": 298,
        "fullcodeline": "vps->rep_format_idx[0] = 0;"
    },
    {
        "line": 299,
        "fullcodeline": "nb_bits = 1;"
    },
    {
        "line": 22,
        "fullcodeline": "if ((vps->max_layers > 1) && vps->base_layer_internal_flag)"
    },
    {
        "line": 27,
        "fullcodeline": "for (i = 0; i < 16; i++) {"
    },
    {
        "line": 31,
        "fullcodeline": "if (num_scalability_types >= 16) {"
    },
    {
        "line": 54,
        "fullcodeline": "for (i = 1; i < vps->max_layers; i++) {"
    },
    {
        "line": 86,
        "fullcodeline": "if (view_id_len > 0) {"
    },
    {
        "line": 92,
        "fullcodeline": "for (i = 1; i < vps->max_layers; i++) {"
    },
    {
        "line": 99,
        "fullcodeline": "for (i = 0; i < MAX_LHVC_LAYERS; i++) {"
    },
    {
        "line": 109,
        "fullcodeline": "for (i = 0; i < vps->max_layers; i++) {"
    },
    {
        "line": 133,
        "fullcodeline": "for (i = 0; i < vps->max_layers; i++) {"
    },
    {
        "line": 151,
        "fullcodeline": "if (num_indepentdent_layers > 1)"
    },
    {
        "line": 154,
        "fullcodeline": "for (i = 0; i < num_add_layer_set; i++)"
    },
    {
        "line": 163,
        "fullcodeline": "if (gf_bs_read_int_log(bs, 1, \"vps_sub_layers_max_minus1_present_flag\")) {"
    },
    {
        "line": 169,
        "fullcodeline": "if (gf_bs_read_int_log(bs, 1, \"max_tid_ref_present_flag\")) {"
    },
    {
        "line": 180,
        "fullcodeline": "if (vps->num_profile_tier_level > MAX_LHVC_LAYERS) {"
    },
    {
        "line": 186,
        "fullcodeline": "for (i = vps->base_layer_internal_flag ? 2 : 1; i < vps->num_profile_tier_level; i++) {"
    },
    {
        "line": 194,
        "fullcodeline": "if (NumLayerSets > 1) {"
    },
    {
        "line": 201,
        "fullcodeline": "if (vps->num_output_layer_sets > MAX_LHVC_LAYERS) {"
    },
    {
        "line": 210,
        "fullcodeline": "for (i = 0; i < vps->num_output_layer_sets; i++) {"
    },
    {
        "line": 284,
        "fullcodeline": "if (vps->num_rep_formats > 16) {"
    },
    {
        "line": 290,
        "fullcodeline": "for (i = 0; i < vps->num_rep_formats; i++) {"
    },
    {
        "line": 293,
        "fullcodeline": "if (vps->num_rep_formats > 1)"
    },
    {
        "line": 300,
        "fullcodeline": "while ((u32)(1 << nb_bits) < vps->num_rep_formats)"
    },
    {
        "line": 301,
        "fullcodeline": "nb_bits++;"
    },
    {
        "line": 302,
        "fullcodeline": "for (i = vps->base_layer_internal_flag ? 1 : 0; i < vps->max_layers; i++) {"
    },
    {
        "line": 23,
        "fullcodeline": "hevc_profile_tier_level(bs, 0, vps->max_sub_layers - 1, &vps->ext_ptl[0], 0);"
    },
    {
        "line": 28,
        "fullcodeline": "vps->scalability_mask[i] = gf_bs_read_int_log_idx(bs, 1, \"scalability_mask\", i);"
    },
    {
        "line": 29,
        "fullcodeline": "num_scalability_types += vps->scalability_mask[i];"
    },
    {
        "line": 32,
        "fullcodeline": "num_scalability_types = 16;"
    },
    {
        "line": 66,
        "fullcodeline": "vps->layer_id_in_vps[vps->layer_id_in_nuh[i]] = i;"
    },
    {
        "line": 110,
        "fullcodeline": "iNuhLId = vps->layer_id_in_nuh[i];"
    },
    {
        "line": 111,
        "fullcodeline": "d = r = p = 0;"
    },
    {
        "line": 126,
        "fullcodeline": "num_direct_ref_layers[iNuhLId] = d;"
    },
    {
        "line": 128,
        "fullcodeline": "num_pred_layers[iNuhLId] = p;"
    },
    {
        "line": 134,
        "fullcodeline": "iNuhLId = vps->layer_id_in_nuh[i];"
    },
    {
        "line": 152,
        "fullcodeline": "num_add_layer_set = gf_bs_read_ue_log(bs, \"num_add_layer_set\");"
    },
    {
        "line": 155,
        "fullcodeline": "for (j = 1; j < num_indepentdent_layers; j++) {"
    },
    {
        "line": 181,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_CODING, (\"[HEVC] Wrong number of PTLs in VPS %d\\n\", vps->num_profile_tier_level));"
    },
    {
        "line": 182,
        "fullcodeline": "vps->num_profile_tier_level = 1;"
    },
    {
        "line": 187,
        "fullcodeline": "Bool vps_profile_present_flag = gf_bs_read_int_log_idx(bs, 1, \"vps_profile_present_flag\", i);"
    },
    {
        "line": 188,
        "fullcodeline": "hevc_profile_tier_level(bs, vps_profile_present_flag, vps->max_sub_layers - 1, &vps->ext_ptl[i - 1], i-1);"
    },
    {
        "line": 195,
        "fullcodeline": "num_add_olss = gf_bs_read_ue_log(bs, \"num_add_olss\");"
    },
    {
        "line": 196,
        "fullcodeline": "default_output_layer_idc = gf_bs_read_int_log(bs, 2, \"default_output_layer_idc\");"
    },
    {
        "line": 197,
        "fullcodeline": "default_output_layer_idc = default_output_layer_idc < 2 ? default_output_layer_idc : 2;"
    },
    {
        "line": 202,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_CODING, (\"[HEVC] Wrong number of output layer sets in VPS %d, max %d supported\\n\", vps->num_output_layer_sets, MAX_LHVC_LAYERS));"
    },
    {
        "line": 203,
        "fullcodeline": "vps->num_output_layer_sets = 1;"
    },
    {
        "line": 219,
        "fullcodeline": "ols_ids_to_ls_idx = i < NumLayerSets ? i : layer_set_idx_for_ols_minus1[i] + 1;"
    },
    {
        "line": 247,
        "fullcodeline": "vps->num_necessary_layers[i] = 0;"
    },
    {
        "line": 262,
        "fullcodeline": "nb_bits = 1;"
    },
    {
        "line": 272,
        "fullcodeline": "nb_output_layers_in_output_layer_set[i] = 0;"
    },
    {
        "line": 285,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_CODING, (\"[HEVC] Wrong number of rep formats in VPS %d\\n\", vps->num_rep_formats));"
    },
    {
        "line": 286,
        "fullcodeline": "vps->num_rep_formats = 0;"
    },
    {
        "line": 291,
        "fullcodeline": "lhvc_parse_rep_format(&vps->rep_formats[i], bs, i);"
    },
    {
        "line": 294,
        "fullcodeline": "rep_format_idx_present_flag = gf_bs_read_int_log(bs, 1, \"rep_format_idx_present_flag\");"
    },
    {
        "line": 36,
        "fullcodeline": "for (i = 0; i < (num_scalability_types - splitting_flag); i++) {"
    },
    {
        "line": 61,
        "fullcodeline": "if (vps->layer_id_in_nuh[i] > MAX_LHVC_LAYERS) {"
    },
    {
        "line": 68,
        "fullcodeline": "if (!splitting_flag) {"
    },
    {
        "line": 76,
        "fullcodeline": "for (i = 0; i < vps->max_layers; i++)"
    },
    {
        "line": 87,
        "fullcodeline": "for (i = 0; i < lhvc_get_num_views(vps); i++) {"
    },
    {
        "line": 93,
        "fullcodeline": "for (j = 0; j < i; j++) {"
    },
    {
        "line": 100,
        "fullcodeline": "if (i >= vps->max_layers) break;"
    },
    {
        "line": 101,
        "fullcodeline": "for (j = 0; j < vps->max_layers; j++) {"
    },
    {
        "line": 112,
        "fullcodeline": "for (j = 0; j < vps->max_layers; j++) {"
    },
    {
        "line": 135,
        "fullcodeline": "if (!num_direct_ref_layers[iNuhLId]) {"
    },
    {
        "line": 156,
        "fullcodeline": "nb_bits = 1;"
    },
    {
        "line": 159,
        "fullcodeline": "gf_bs_read_int_log_idx2(bs, nb_bits, \"highest_layer_idx_plus1\", i, j);"
    },
    {
        "line": 164,
        "fullcodeline": "for (i = 0; i < vps->max_layers; i++) {"
    },
    {
        "line": 170,
        "fullcodeline": "for (i = 0; i < (vps->max_layers - 1); i++) {"
    },
    {
        "line": 211,
        "fullcodeline": "if ((NumLayerSets > 2) && (i >= NumLayerSets)) {"
    },
    {
        "line": 221,
        "fullcodeline": "if ((i > (vps->num_layer_sets - 1)) || (default_output_layer_idc == 2)) {"
    },
    {
        "line": 226,
        "fullcodeline": "if ((default_output_layer_idc == 0) || (default_output_layer_idc == 1)) {"
    },
    {
        "line": 235,
        "fullcodeline": "for (j = 0; j < vps->num_layers_in_id_list[ols_ids_to_ls_idx]; j++) {"
    },
    {
        "line": 248,
        "fullcodeline": "for (j = 0; j < vps->num_layers_in_id_list[ols_ids_to_ls_idx]; j++) {"
    },
    {
        "line": 253,
        "fullcodeline": "if (i == 0) {"
    },
    {
        "line": 263,
        "fullcodeline": "while ((u32)(1 << nb_bits) < vps->num_profile_tier_level)"
    },
    {
        "line": 264,
        "fullcodeline": "nb_bits++;"
    },
    {
        "line": 265,
        "fullcodeline": "for (j = 0; j < vps->num_layers_in_id_list[ols_ids_to_ls_idx]; j++)"
    },
    {
        "line": 273,
        "fullcodeline": "for (j = 0; j < vps->num_layers_in_id_list[ols_ids_to_ls_idx]; j++) {"
    },
    {
        "line": 279,
        "fullcodeline": "if (nb_output_layers_in_output_layer_set[i] == 1 && ols_highest_output_layer_id[i] > 0)"
    },
    {
        "line": 296,
        "fullcodeline": "rep_format_idx_present_flag = 0;"
    },
    {
        "line": 37,
        "fullcodeline": "dimension_id_len[i] = 1 + gf_bs_read_int_log_idx(bs, 3, \"dimension_id_len_minus1\", i);"
    },
    {
        "line": 46,
        "fullcodeline": "dimension_id_len[num_scalability_types - 1] = 1 + (5 - dim_bit_offset[num_scalability_types - 1]);"
    },
    {
        "line": 47,
        "fullcodeline": "dim_bit_offset[num_scalability_types] = 6;"
    },
    {
        "line": 56,
        "fullcodeline": "vps->layer_id_in_nuh[i] = gf_bs_read_int_log_idx(bs, 6, \"layer_id_in_nuh\", i);"
    },
    {
        "line": 62,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_CODING, (\"[HEVC] %d layers in VPS ext but only %d supported in GPAC\\n\", vps->layer_id_in_nuh[i], MAX_LHVC_LAYERS));"
    },
    {
        "line": 63,
        "fullcodeline": "vps->layer_id_in_nuh[i] = 0;"
    },
    {
        "line": 77,
        "fullcodeline": "for (j = 0; j < num_scalability_types; j++)"
    },
    {
        "line": 78,
        "fullcodeline": "vps->dimension_id[i][j] = ((vps->layer_id_in_nuh[i] & ((1 << dim_bit_offset[j + 1]) - 1)) >> dim_bit_offset[j]);"
    },
    {
        "line": 81,
        "fullcodeline": "for (j = 0; j < num_scalability_types; j++)"
    },
    {
        "line": 82,
        "fullcodeline": "vps->dimension_id[0][j] = 0;"
    },
    {
        "line": 88,
        "fullcodeline": "gf_bs_read_int_log_idx(bs, view_id_len, \"view_id_val\", i);"
    },
    {
        "line": 94,
        "fullcodeline": "vps->direct_dependency_flag[i][j] = gf_bs_read_int_log_idx(bs, 1, \"direct_dependency_flag\", i);"
    },
    {
        "line": 102,
        "fullcodeline": "dependency_flag[i][j] = vps->direct_dependency_flag[i][j];"
    },
    {
        "line": 136,
        "fullcodeline": "u32 h = 1;"
    },
    {
        "line": 145,
        "fullcodeline": "num_layers_in_tree_partition[k++] = h;"
    },
    {
        "line": 157,
        "fullcodeline": "while ((1 << nb_bits) < (num_layers_in_tree_partition[j] + 1))"
    },
    {
        "line": 158,
        "fullcodeline": "nb_bits++;"
    },
    {
        "line": 165,
        "fullcodeline": "gf_bs_read_int_log_idx(bs, 3, \"sub_layers_vps_max_minus1\", i);"
    },
    {
        "line": 212,
        "fullcodeline": "nb_bits = 1;"
    },
    {
        "line": 215,
        "fullcodeline": "layer_set_idx_for_ols_minus1[i] = gf_bs_read_int_log_idx(bs, nb_bits, \"layer_set_idx_for_ols_minus1\", i);"
    },
    {
        "line": 266,
        "fullcodeline": "if (vps->necessary_layers_flag[i][j] && vps->num_profile_tier_level)"
    },
    {
        "line": 274,
        "fullcodeline": "nb_output_layers_in_output_layer_set[i] += OutputLayerFlag[i][j];"
    },
    {
        "line": 280,
        "fullcodeline": "vps->alt_output_layer_flag[i] = gf_bs_read_int_log_idx(bs, 1, \"alt_output_layer_flag\", i);"
    },
    {
        "line": 304,
        "fullcodeline": "vps->rep_format_idx[i] = gf_bs_read_int_log_idx(bs, nb_bits, \"rep_format_idx\", i);"
    },
    {
        "line": 41,
        "fullcodeline": "for (i = 0; i < num_scalability_types; i++) {"
    },
    {
        "line": 59,
        "fullcodeline": "vps->layer_id_in_nuh[i] = i;"
    },
    {
        "line": 64,
        "fullcodeline": "return -1;"
    },
    {
        "line": 69,
        "fullcodeline": "for (j = 0; j < num_scalability_types; j++) {"
    },
    {
        "line": 103,
        "fullcodeline": "for (k = 0; k < i; k++)"
    },
    {
        "line": 138,
        "fullcodeline": "for (j = 0; j < num_pred_layers[iNuhLId]; j++) {"
    },
    {
        "line": 171,
        "fullcodeline": "for (j = i + 1; j < vps->max_layers; j++) {"
    },
    {
        "line": 213,
        "fullcodeline": "while ((1 << nb_bits) < (NumLayerSets - 1))"
    },
    {
        "line": 214,
        "fullcodeline": "nb_bits++;"
    },
    {
        "line": 218,
        "fullcodeline": "layer_set_idx_for_ols_minus1[i] = 0;"
    },
    {
        "line": 222,
        "fullcodeline": "for (j = 0; j < vps->num_layers_in_id_list[ols_ids_to_ls_idx]; j++)"
    },
    {
        "line": 223,
        "fullcodeline": "vps->output_layer_flag[i][j] = gf_bs_read_int_log_idx2(bs, 1, \"output_layer_flag\", i, j);"
    },
    {
        "line": 227,
        "fullcodeline": "for (j = 0; j < vps->num_layers_in_id_list[ols_ids_to_ls_idx]; j++) {"
    },
    {
        "line": 267,
        "fullcodeline": "vps->profile_tier_level_idx[i][j] = gf_bs_read_int_log_idx2(bs, nb_bits, \"profile_tier_level_idx\", i, j);"
    },
    {
        "line": 307,
        "fullcodeline": "vps->rep_format_idx[i] = i < vps->num_rep_formats - 1 ? i : vps->num_rep_formats - 1;"
    },
    {
        "line": 42,
        "fullcodeline": "dim_bit_offset[i] = 0;"
    },
    {
        "line": 70,
        "fullcodeline": "vps->dimension_id[i][j] = gf_bs_read_int_log_idx2(bs, dimension_id_len[j], \"dimension_id\", i, j);"
    },
    {
        "line": 116,
        "fullcodeline": "d++;"
    },
    {
        "line": 120,
        "fullcodeline": "r++;"
    },
    {
        "line": 124,
        "fullcodeline": "id_pred_layers[iNuhLId][p++] = jNuhLId;"
    },
    {
        "line": 238,
        "fullcodeline": "vps->necessary_layers_flag[i][j] = GF_TRUE;"
    },
    {
        "line": 239,
        "fullcodeline": "curLayerID = vps->LayerSetLayerIdList[i][j];"
    },
    {
        "line": 250,
        "fullcodeline": "vps->num_necessary_layers[i] += 1;"
    },
    {
        "line": 269,
        "fullcodeline": "vps->profile_tier_level_idx[i][j] = 0;"
    },
    {
        "line": 43,
        "fullcodeline": "for (j = 0; j < i; j++)"
    },
    {
        "line": 44,
        "fullcodeline": "dim_bit_offset[i] += dimension_id_len[j];"
    },
    {
        "line": 105,
        "fullcodeline": "dependency_flag[i][j] = 1;"
    },
    {
        "line": 140,
        "fullcodeline": "if (!layer_id_in_list_flag[predLId]) {"
    },
    {
        "line": 228,
        "fullcodeline": "if ((default_output_layer_idc == 0) || (vps->LayerSetLayerIdList[i][j] == vps->LayerSetLayerIdListMax[i]))"
    },
    {
        "line": 240,
        "fullcodeline": "for (k = 0; k < j; k++) {"
    },
    {
        "line": 255,
        "fullcodeline": "if (vps->max_layers > 1)"
    },
    {
        "line": 142,
        "fullcodeline": "layer_id_in_list_flag[predLId] = 1;"
    },
    {
        "line": 173,
        "fullcodeline": "gf_bs_read_int_log_idx2(bs, 3, \"max_tid_il_ref_pics_plus1\", i, j);"
    },
    {
        "line": 229,
        "fullcodeline": "OutputLayerFlag[i][j] = GF_TRUE;"
    },
    {
        "line": 256,
        "fullcodeline": "vps->profile_tier_level_idx[0][0] = 1;"
    },
    {
        "line": 231,
        "fullcodeline": "OutputLayerFlag[i][j] = GF_FALSE;"
    },
    {
        "line": 258,
        "fullcodeline": "vps->profile_tier_level_idx[0][0] = 0;"
    },
    {
        "line": 243,
        "fullcodeline": "vps->necessary_layers_flag[i][k] = GF_TRUE;"
    }
]