[
    {
        "line": 4,
        "fullcodeline": "struct bpf_verifier_state *this_branch = env->cur_state;"
    },
    {
        "line": 6,
        "fullcodeline": "struct bpf_reg_state *regs = this_branch->frame[this_branch->curframe]->regs;"
    },
    {
        "line": 7,
        "fullcodeline": "struct bpf_reg_state *dst_reg, *other_branch_regs, *src_reg = NULL;"
    },
    {
        "line": 8,
        "fullcodeline": "u8 opcode = BPF_OP(insn->code);"
    },
    {
        "line": 10,
        "fullcodeline": "int pred = -1;"
    },
    {
        "line": 44,
        "fullcodeline": "err = check_reg_arg(env, insn->dst_reg, SRC_OP);"
    },
    {
        "line": 48,
        "fullcodeline": "dst_reg = &regs[insn->dst_reg];"
    },
    {
        "line": 49,
        "fullcodeline": "is_jmp32 = BPF_CLASS(insn->code) == BPF_JMP32;"
    },
    {
        "line": 108,
        "fullcodeline": "other_branch = push_stack(env, *insn_idx + insn->off + 1, *insn_idx,"
    },
    {
        "line": 112,
        "fullcodeline": "other_branch_regs = other_branch->frame[other_branch->curframe]->regs;"
    },
    {
        "line": 14,
        "fullcodeline": "if (opcode == BPF_JA || opcode > BPF_JSLE) {"
    },
    {
        "line": 19,
        "fullcodeline": "if (BPF_SRC(insn->code) == BPF_X) {"
    },
    {
        "line": 51,
        "fullcodeline": "if (BPF_SRC(insn->code) == BPF_K) {"
    },
    {
        "line": 71,
        "fullcodeline": "if (pred >= 0) {"
    },
    {
        "line": 84,
        "fullcodeline": "if (pred == 1) {"
    },
    {
        "line": 110,
        "fullcodeline": "if (!other_branch)"
    },
    {
        "line": 188,
        "fullcodeline": "if (env->log.level & BPF_LOG_LEVEL)"
    },
    {
        "line": 15,
        "fullcodeline": "verbose(env, \"invalid BPF_JMP/JMP32 opcode %x\\n\", opcode);"
    },
    {
        "line": 26,
        "fullcodeline": "err = check_reg_arg(env, insn->src_reg, SRC_OP);"
    },
    {
        "line": 35,
        "fullcodeline": "src_reg = &regs[insn->src_reg];"
    },
    {
        "line": 52,
        "fullcodeline": "pred = is_branch_taken(dst_reg, insn->imm, opcode, is_jmp32);"
    },
    {
        "line": 121,
        "fullcodeline": "if (BPF_SRC(insn->code) == BPF_X) {"
    },
    {
        "line": 122,
        "fullcodeline": "struct bpf_reg_state *src_reg = &regs[insn->src_reg];"
    },
    {
        "line": 161,
        "fullcodeline": "if (dst_reg->type == SCALAR_VALUE && dst_reg->id &&"
    },
    {
        "line": 162,
        "fullcodeline": "!WARN_ON_ONCE(dst_reg->id != other_branch_regs[insn->dst_reg].id)) {"
    },
    {
        "line": 163,
        "fullcodeline": "find_equal_scalars(this_branch, dst_reg);"
    },
    {
        "line": 164,
        "fullcodeline": "find_equal_scalars(other_branch, &other_branch_regs[insn->dst_reg]);"
    },
    {
        "line": 171,
        "fullcodeline": "if (!is_jmp32 && BPF_SRC(insn->code) == BPF_K &&"
    },
    {
        "line": 173,
        "fullcodeline": "reg_type_may_be_null(dst_reg->type)) {"
    },
    {
        "line": 177,
        "fullcodeline": "mark_ptr_or_null_regs(this_branch, insn->dst_reg,"
    },
    {
        "line": 16,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 20,
        "fullcodeline": "if (insn->imm != 0) {"
    },
    {
        "line": 30,
        "fullcodeline": "if (is_pointer_value(env, insn->src_reg)) {"
    },
    {
        "line": 111,
        "fullcodeline": "return -EFAULT;"
    },
    {
        "line": 172,
        "fullcodeline": "insn->imm == 0 && (opcode == BPF_JEQ || opcode == BPF_JNE) &&"
    },
    {
        "line": 178,
        "fullcodeline": "opcode == BPF_JNE);"
    },
    {
        "line": 180,
        "fullcodeline": "opcode == BPF_JEQ);"
    },
    {
        "line": 37,
        "fullcodeline": "if (insn->src_reg != BPF_REG_0) {"
    },
    {
        "line": 53,
        "fullcodeline": "} else if (src_reg->type == SCALAR_VALUE &&"
    },
    {
        "line": 75,
        "fullcodeline": "if (!__is_pointer_value(false, dst_reg))"
    },
    {
        "line": 76,
        "fullcodeline": "err = mark_chain_precision(env, insn->dst_reg);"
    },
    {
        "line": 77,
        "fullcodeline": "if (BPF_SRC(insn->code) == BPF_X && !err &&"
    },
    {
        "line": 78,
        "fullcodeline": "!__is_pointer_value(false, src_reg))"
    },
    {
        "line": 79,
        "fullcodeline": "err = mark_chain_precision(env, insn->src_reg);"
    },
    {
        "line": 89,
        "fullcodeline": "if (!env->bypass_spec_v1 &&"
    },
    {
        "line": 90,
        "fullcodeline": "!sanitize_speculative_path(env, insn, *insn_idx + 1,"
    },
    {
        "line": 124,
        "fullcodeline": "if (dst_reg->type == SCALAR_VALUE &&"
    },
    {
        "line": 125,
        "fullcodeline": "src_reg->type == SCALAR_VALUE) {"
    },
    {
        "line": 155,
        "fullcodeline": "} else if (dst_reg->type == SCALAR_VALUE) {"
    },
    {
        "line": 22,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 33,
        "fullcodeline": "return -EACCES;"
    },
    {
        "line": 54,
        "fullcodeline": "is_jmp32 && tnum_is_const(tnum_subreg(src_reg->var_off))) {"
    },
    {
        "line": 55,
        "fullcodeline": "pred = is_branch_taken(dst_reg,"
    },
    {
        "line": 92,
        "fullcodeline": "return -EFAULT;"
    },
    {
        "line": 148,
        "fullcodeline": "if (src_reg->id &&"
    },
    {
        "line": 156,
        "fullcodeline": "reg_set_min_max(&other_branch_regs[insn->dst_reg],"
    },
    {
        "line": 181,
        "fullcodeline": "} else if (!try_match_pkt_pointers(insn, dst_reg, &regs[insn->src_reg],"
    },
    {
        "line": 183,
        "fullcodeline": "is_pointer_value(env, insn->dst_reg)) {"
    },
    {
        "line": 39,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 126,
        "fullcodeline": "if (tnum_is_const(src_reg->var_off) ||"
    },
    {
        "line": 127,
        "fullcodeline": "(is_jmp32 &&"
    },
    {
        "line": 129,
        "fullcodeline": "reg_set_min_max(&other_branch_regs[insn->dst_reg],"
    },
    {
        "line": 149,
        "fullcodeline": "!WARN_ON_ONCE(src_reg->id != other_branch_regs[insn->src_reg].id)) {"
    },
    {
        "line": 150,
        "fullcodeline": "find_equal_scalars(this_branch, src_reg);"
    },
    {
        "line": 151,
        "fullcodeline": "find_equal_scalars(other_branch, &other_branch_regs[insn->src_reg]);"
    },
    {
        "line": 186,
        "fullcodeline": "return -EACCES;"
    },
    {
        "line": 100,
        "fullcodeline": "if (!env->bypass_spec_v1 &&"
    },
    {
        "line": 101,
        "fullcodeline": "!sanitize_speculative_path(env, insn,"
    },
    {
        "line": 128,
        "fullcodeline": "tnum_is_const(tnum_subreg(src_reg->var_off))))"
    },
    {
        "line": 56,
        "fullcodeline": "tnum_subreg(src_reg->var_off).value,"
    },
    {
        "line": 59,
        "fullcodeline": "} else if (src_reg->type == SCALAR_VALUE &&"
    },
    {
        "line": 60,
        "fullcodeline": "!is_jmp32 && tnum_is_const(src_reg->var_off)) {"
    },
    {
        "line": 61,
        "fullcodeline": "pred = is_branch_taken(dst_reg,"
    },
    {
        "line": 104,
        "fullcodeline": "return -EFAULT;"
    },
    {
        "line": 132,
        "fullcodeline": "tnum_subreg(src_reg->var_off).value,"
    },
    {
        "line": 134,
        "fullcodeline": "else if (tnum_is_const(dst_reg->var_off) ||"
    },
    {
        "line": 135,
        "fullcodeline": "(is_jmp32 &&"
    },
    {
        "line": 137,
        "fullcodeline": "reg_set_min_max_inv(&other_branch_regs[insn->src_reg],"
    },
    {
        "line": 136,
        "fullcodeline": "tnum_is_const(tnum_subreg(dst_reg->var_off))))"
    },
    {
        "line": 65,
        "fullcodeline": "} else if (reg_is_pkt_pointer_any(dst_reg) &&"
    },
    {
        "line": 67,
        "fullcodeline": "!is_jmp32) {"
    },
    {
        "line": 68,
        "fullcodeline": "pred = is_pkt_ptr_branch_taken(dst_reg, src_reg, opcode);"
    },
    {
        "line": 140,
        "fullcodeline": "tnum_subreg(dst_reg->var_off).value,"
    },
    {
        "line": 142,
        "fullcodeline": "else if (!is_jmp32 &&"
    },
    {
        "line": 66,
        "fullcodeline": "reg_is_pkt_pointer_any(src_reg) &&"
    },
    {
        "line": 143,
        "fullcodeline": "(opcode == BPF_JEQ || opcode == BPF_JNE))"
    },
    {
        "line": 145,
        "fullcodeline": "reg_combine_min_max(&other_branch_regs[insn->src_reg],"
    }
]