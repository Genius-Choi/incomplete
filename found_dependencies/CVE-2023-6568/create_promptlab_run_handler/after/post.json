[
    {
        "line": 2,
        "fullcodeline": "def assert_arg_exists(arg_name, arg):"
    },
    {
        "line": 9,
        "fullcodeline": "_validate_content_type(request, [\"application/json\"])"
    },
    {
        "line": 11,
        "fullcodeline": "args = request.json"
    },
    {
        "line": 12,
        "fullcodeline": "experiment_id = args.get(\"experiment_id\")"
    },
    {
        "line": 13,
        "fullcodeline": "assert_arg_exists(\"experiment_id\", experiment_id)"
    },
    {
        "line": 14,
        "fullcodeline": "run_name = args.get(\"run_name\", None)"
    },
    {
        "line": 15,
        "fullcodeline": "tags = args.get(\"tags\", [])"
    },
    {
        "line": 16,
        "fullcodeline": "prompt_template = args.get(\"prompt_template\")"
    },
    {
        "line": 17,
        "fullcodeline": "assert_arg_exists(\"prompt_template\", prompt_template)"
    },
    {
        "line": 18,
        "fullcodeline": "raw_prompt_parameters = args.get(\"prompt_parameters\")"
    },
    {
        "line": 19,
        "fullcodeline": "assert_arg_exists(\"prompt_parameters\", raw_prompt_parameters)"
    },
    {
        "line": 20,
        "fullcodeline": "prompt_parameters = ["
    },
    {
        "line": 23,
        "fullcodeline": "model_route = args.get(\"model_route\")"
    },
    {
        "line": 24,
        "fullcodeline": "assert_arg_exists(\"model_route\", model_route)"
    },
    {
        "line": 25,
        "fullcodeline": "raw_model_parameters = args.get(\"model_parameters\", [])"
    },
    {
        "line": 26,
        "fullcodeline": "model_parameters = ["
    },
    {
        "line": 29,
        "fullcodeline": "model_input = args.get(\"model_input\")"
    },
    {
        "line": 30,
        "fullcodeline": "assert_arg_exists(\"model_input\", model_input)"
    },
    {
        "line": 31,
        "fullcodeline": "model_output = args.get(\"model_output\", None)"
    },
    {
        "line": 32,
        "fullcodeline": "raw_model_output_parameters = args.get(\"model_output_parameters\", [])"
    },
    {
        "line": 33,
        "fullcodeline": "model_output_parameters = ["
    },
    {
        "line": 36,
        "fullcodeline": "mlflow_version = args.get(\"mlflow_version\")"
    },
    {
        "line": 37,
        "fullcodeline": "assert_arg_exists(\"mlflow_version\", mlflow_version)"
    },
    {
        "line": 38,
        "fullcodeline": "user_id = args.get(\"user_id\", \"unknown\")"
    },
    {
        "line": 41,
        "fullcodeline": "start_time = args.get(\"start_time\", int(time.time() * 1000))"
    },
    {
        "line": 43,
        "fullcodeline": "store = _get_tracking_store()"
    },
    {
        "line": 45,
        "fullcodeline": "run = _create_promptlab_run_impl("
    },
    {
        "line": 61,
        "fullcodeline": "response_message = CreateRun.Response()"
    },
    {
        "line": 63,
        "fullcodeline": "response = Response(mimetype=\"application/json\")"
    },
    {
        "line": 64,
        "fullcodeline": "response.set_data(message_to_json(response_message))"
    },
    {
        "line": 62,
        "fullcodeline": "response_message.run.MergeFrom(run.to_proto())"
    },
    {
        "line": 21,
        "fullcodeline": "Param(param.get(\"key\"), param.get(\"value\")) for param in args.get(\"prompt_parameters\")"
    },
    {
        "line": 27,
        "fullcodeline": "Param(param.get(\"key\"), param.get(\"value\")) for param in raw_model_parameters"
    },
    {
        "line": 34,
        "fullcodeline": "Param(param.get(\"key\"), param.get(\"value\")) for param in raw_model_output_parameters"
    }
]