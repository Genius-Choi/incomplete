[
    {
        "line": 3,
        "fullcodeline": "stream_t *p_stream = NULL;"
    },
    {
        "line": 4,
        "fullcodeline": "char *psz_version_line = NULL;"
    },
    {
        "line": 5,
        "fullcodeline": "char *psz_update_data = NULL;"
    },
    {
        "line": 7,
        "fullcodeline": "p_stream = stream_UrlNew( p_update->p_libvlc, UPDATE_VLC_STATUS_URL );"
    },
    {
        "line": 15,
        "fullcodeline": "const int64_t i_read = stream_Size( p_stream );"
    },
    {
        "line": 23,
        "fullcodeline": "psz_update_data = malloc( i_read + 1 ); /* terminating '\\0' */"
    },
    {
        "line": 33,
        "fullcodeline": "psz_update_data[i_read] = '\\0';"
    },
    {
        "line": 35,
        "fullcodeline": "stream_Delete( p_stream );"
    },
    {
        "line": 36,
        "fullcodeline": "p_stream = NULL;"
    },
    {
        "line": 39,
        "fullcodeline": "char *psz_update_data_parser = psz_update_data;"
    },
    {
        "line": 40,
        "fullcodeline": "size_t i_len = strcspn( psz_update_data, \"\\r\\n\" );"
    },
    {
        "line": 41,
        "fullcodeline": "psz_update_data_parser += i_len;"
    },
    {
        "line": 47,
        "fullcodeline": "strncpy( psz_version_line, psz_update_data, i_len );"
    },
    {
        "line": 48,
        "fullcodeline": "psz_version_line[i_len] = '\\0';"
    },
    {
        "line": 50,
        "fullcodeline": "p_update->release.i_extra = 0;"
    },
    {
        "line": 51,
        "fullcodeline": "int ret = sscanf( psz_version_line, \"%i.%i.%i.%i\","
    },
    {
        "line": 61,
        "fullcodeline": "i_len = strcspn( psz_update_data_parser, \"\\r\\n\" );"
    },
    {
        "line": 72,
        "fullcodeline": "strncpy( p_update->release.psz_url, psz_update_data_parser, i_len );"
    },
    {
        "line": 73,
        "fullcodeline": "p_update->release.psz_url[i_len] = '\\0';"
    },
    {
        "line": 75,
        "fullcodeline": "psz_update_data_parser += i_len;"
    },
    {
        "line": 80,
        "fullcodeline": "i_len = strlen( psz_update_data_parser );"
    },
    {
        "line": 91,
        "fullcodeline": "strncpy( p_update->release.psz_desc, psz_update_data_parser, i_len );"
    },
    {
        "line": 92,
        "fullcodeline": "p_update->release.psz_desc[i_len] = '\\0';"
    },
    {
        "line": 110,
        "fullcodeline": "p_update->p_pkey = (public_key_t*)malloc( sizeof( public_key_t ) );"
    },
    {
        "line": 122,
        "fullcodeline": "memcpy( p_update->p_pkey->longid, videolan_public_key_longid, 8 );"
    },
    {
        "line": 162,
        "fullcodeline": "uint8_t *p_hash = hash_from_text( psz_update_data, &sign );"
    },
    {
        "line": 8,
        "fullcodeline": "if( !p_stream )"
    },
    {
        "line": 17,
        "fullcodeline": "if( i_read < 0 || i_read >= UINT16_MAX)"
    },
    {
        "line": 24,
        "fullcodeline": "if( !psz_update_data )"
    },
    {
        "line": 27,
        "fullcodeline": "if( stream_Read( p_stream, psz_update_data, i_read ) != i_read )"
    },
    {
        "line": 42,
        "fullcodeline": "while( *psz_update_data_parser == '\\r' || *psz_update_data_parser == '\\n' )"
    },
    {
        "line": 43,
        "fullcodeline": "psz_update_data_parser++;"
    },
    {
        "line": 45,
        "fullcodeline": "if( !(psz_version_line = malloc( i_len + 1)) )"
    },
    {
        "line": 54,
        "fullcodeline": "if( ret != 3 && ret != 4 )"
    },
    {
        "line": 62,
        "fullcodeline": "if( i_len == 0 )"
    },
    {
        "line": 70,
        "fullcodeline": "if( !(p_update->release.psz_url = malloc( i_len + 1)) )"
    },
    {
        "line": 76,
        "fullcodeline": "while( *psz_update_data_parser == '\\r' || *psz_update_data_parser == '\\n' )"
    },
    {
        "line": 77,
        "fullcodeline": "psz_update_data_parser++;"
    },
    {
        "line": 81,
        "fullcodeline": "if( i_len == 0 )"
    },
    {
        "line": 89,
        "fullcodeline": "if( !(p_update->release.psz_desc = malloc( i_len + 1)) )"
    },
    {
        "line": 97,
        "fullcodeline": "if( download_signature( VLC_OBJECT( p_update->p_libvlc ), &sign,"
    },
    {
        "line": 104,
        "fullcodeline": "if( sign.type != BINARY_SIGNATURE && sign.type != TEXT_SIGNATURE )"
    },
    {
        "line": 111,
        "fullcodeline": "if( !p_update->p_pkey )"
    },
    {
        "line": 114,
        "fullcodeline": "if( parse_public_key( videolan_public_key, sizeof( videolan_public_key ),"
    },
    {
        "line": 124,
        "fullcodeline": "if( memcmp( sign.issuer_longid, p_update->p_pkey->longid , 8 ) != 0 )"
    },
    {
        "line": 163,
        "fullcodeline": "if( !p_hash )"
    },
    {
        "line": 126,
        "fullcodeline": "msg_Dbg( p_update->p_libvlc, \"Need to download the GPG key\" );"
    },
    {
        "line": 127,
        "fullcodeline": "public_key_t *p_new_pkey = download_key("
    },
    {
        "line": 137,
        "fullcodeline": "uint8_t *p_hash = hash_from_public_key( p_new_pkey );"
    },
    {
        "line": 130,
        "fullcodeline": "if( !p_new_pkey )"
    },
    {
        "line": 138,
        "fullcodeline": "if( !p_hash )"
    },
    {
        "line": 146,
        "fullcodeline": "if( verify_signature( &p_new_pkey->sig,"
    },
    {
        "line": 128,
        "fullcodeline": "VLC_OBJECT(p_update->p_libvlc),"
    },
    {
        "line": 150,
        "fullcodeline": "msg_Info( p_update->p_libvlc, \"Key authenticated\" );"
    },
    {
        "line": 152,
        "fullcodeline": "p_update->p_pkey = p_new_pkey;"
    },
    {
        "line": 169,
        "fullcodeline": "else if( p_hash[0] != sign.hash_verification[0] ||"
    },
    {
        "line": 170,
        "fullcodeline": "p_hash[1] != sign.hash_verification[1] )"
    },
    {
        "line": 177,
        "fullcodeline": "else if( verify_signature( &sign, &p_update->p_pkey->key, p_hash )"
    },
    {
        "line": 187,
        "fullcodeline": "msg_Info( p_update->p_libvlc, \"Status file authenticated\" );"
    },
    {
        "line": 188,
        "fullcodeline": "free( p_hash );"
    },
    {
        "line": 189,
        "fullcodeline": "free( psz_version_line );"
    },
    {
        "line": 190,
        "fullcodeline": "free( psz_update_data );"
    }
]