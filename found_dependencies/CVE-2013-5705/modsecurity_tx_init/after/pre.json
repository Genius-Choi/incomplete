[
    {
        "line": 2,
        "fullcodeline": "const char *s = NULL;"
    },
    {
        "line": 4,
        "fullcodeline": "char *semicolon = NULL;"
    },
    {
        "line": 5,
        "fullcodeline": "char *comma = NULL;"
    },
    {
        "line": 10,
        "fullcodeline": "apr_pool_cleanup_register(msr->mp, msr, modsecurity_tx_cleanup, apr_pool_cleanup_null);"
    },
    {
        "line": 13,
        "fullcodeline": "msr->request_content_length = -1;"
    },
    {
        "line": 14,
        "fullcodeline": "s = apr_table_get(msr->request_headers, \"Content-Length\");"
    },
    {
        "line": 20,
        "fullcodeline": "msr->reqbody_chunked = 0;"
    },
    {
        "line": 21,
        "fullcodeline": "msr->reqbody_should_exist = 0;"
    },
    {
        "line": 35,
        "fullcodeline": "msr->request_content_type = NULL;"
    },
    {
        "line": 36,
        "fullcodeline": "s = apr_table_get(msr->request_headers, \"Content-Type\");"
    },
    {
        "line": 79,
        "fullcodeline": "msr->arguments = apr_table_make(msr->mp, 32);"
    },
    {
        "line": 97,
        "fullcodeline": "msr->arguments_to_sanitize = apr_table_make(msr->mp, 16);"
    },
    {
        "line": 99,
        "fullcodeline": "msr->request_headers_to_sanitize = apr_table_make(msr->mp, 16);"
    },
    {
        "line": 101,
        "fullcodeline": "msr->response_headers_to_sanitize = apr_table_make(msr->mp, 16);"
    },
    {
        "line": 103,
        "fullcodeline": "msr->pattern_to_sanitize = apr_table_make(msr->mp, 32);"
    },
    {
        "line": 107,
        "fullcodeline": "msr->removed_targets = apr_table_make(msr->mp, 16);"
    },
    {
        "line": 111,
        "fullcodeline": "msr->request_cookies = apr_table_make(msr->mp, 16);"
    },
    {
        "line": 115,
        "fullcodeline": "msr->matched_vars = apr_table_make(msr->mp, 8);"
    },
    {
        "line": 117,
        "fullcodeline": "apr_table_clear(msr->matched_vars);"
    },
    {
        "line": 119,
        "fullcodeline": "msr->perf_rules = apr_table_make(msr->mp, 8);"
    },
    {
        "line": 121,
        "fullcodeline": "apr_table_clear(msr->perf_rules);"
    },
    {
        "line": 124,
        "fullcodeline": "arr = apr_table_elts(msr->request_headers);"
    },
    {
        "line": 157,
        "fullcodeline": "msr->tx_vars = apr_table_make(msr->mp, 32);"
    },
    {
        "line": 160,
        "fullcodeline": "msr->geo_vars = apr_table_make(msr->mp, 8);"
    },
    {
        "line": 163,
        "fullcodeline": "msr->collections_original = apr_table_make(msr->mp, 8);"
    },
    {
        "line": 165,
        "fullcodeline": "msr->collections = apr_table_make(msr->mp, 8);"
    },
    {
        "line": 167,
        "fullcodeline": "msr->collections_dirty = apr_table_make(msr->mp, 8);"
    },
    {
        "line": 174,
        "fullcodeline": "msr->matched_rules = apr_array_make(msr->mp, 16, sizeof(void *));"
    },
    {
        "line": 177,
        "fullcodeline": "msr->matched_var = (msc_string *)apr_pcalloc(msr->mp, sizeof(msc_string));"
    },
    {
        "line": 182,
        "fullcodeline": "msr->removed_rules = apr_array_make(msr->mp, 16, sizeof(char *));"
    },
    {
        "line": 185,
        "fullcodeline": "msr->removed_rules_tag = apr_array_make(msr->mp, 16, sizeof(char *));"
    },
    {
        "line": 188,
        "fullcodeline": "msr->removed_rules_msg = apr_array_make(msr->mp, 16, sizeof(char *));"
    },
    {
        "line": 15,
        "fullcodeline": "if (s != NULL) {"
    },
    {
        "line": 22,
        "fullcodeline": "if (msr->request_content_length == -1) {"
    },
    {
        "line": 37,
        "fullcodeline": "if (s != NULL) msr->request_content_type = s;"
    },
    {
        "line": 40,
        "fullcodeline": "if ((msr->request_content_type != NULL)"
    },
    {
        "line": 73,
        "fullcodeline": "if (msr->txcfg->reqbody_buffering != REQUEST_BODY_FORCEBUF_OFF) {"
    },
    {
        "line": 80,
        "fullcodeline": "if (msr->arguments == NULL) return -1;"
    },
    {
        "line": 81,
        "fullcodeline": "if (msr->query_string != NULL) {"
    },
    {
        "line": 98,
        "fullcodeline": "if (msr->arguments_to_sanitize == NULL) return -1;"
    },
    {
        "line": 100,
        "fullcodeline": "if (msr->request_headers_to_sanitize == NULL) return -1;"
    },
    {
        "line": 102,
        "fullcodeline": "if (msr->response_headers_to_sanitize == NULL) return -1;"
    },
    {
        "line": 104,
        "fullcodeline": "if (msr->pattern_to_sanitize == NULL) return -1;"
    },
    {
        "line": 108,
        "fullcodeline": "if (msr->removed_targets == NULL) return -1;"
    },
    {
        "line": 112,
        "fullcodeline": "if (msr->request_cookies == NULL) return -1;"
    },
    {
        "line": 116,
        "fullcodeline": "if (msr->matched_vars == NULL) return -1;"
    },
    {
        "line": 120,
        "fullcodeline": "if (msr->perf_rules == NULL) return -1;"
    },
    {
        "line": 126,
        "fullcodeline": "for (i = 0; i < arr->nelts; i++) {"
    },
    {
        "line": 158,
        "fullcodeline": "if (msr->tx_vars == NULL) return -1;"
    },
    {
        "line": 161,
        "fullcodeline": "if (msr->geo_vars == NULL) return -1;"
    },
    {
        "line": 164,
        "fullcodeline": "if (msr->collections_original == NULL) return -1;"
    },
    {
        "line": 166,
        "fullcodeline": "if (msr->collections == NULL) return -1;"
    },
    {
        "line": 168,
        "fullcodeline": "if (msr->collections_dirty == NULL) return -1;"
    },
    {
        "line": 175,
        "fullcodeline": "if (msr->matched_rules == NULL) return -1;"
    },
    {
        "line": 178,
        "fullcodeline": "if (msr->matched_var == NULL) return -1;"
    },
    {
        "line": 183,
        "fullcodeline": "if (msr->removed_rules == NULL) return -1;"
    },
    {
        "line": 186,
        "fullcodeline": "if (msr->removed_rules_tag == NULL) return -1;"
    },
    {
        "line": 16,
        "fullcodeline": "msr->request_content_length = strtol(s, NULL, 10);"
    },
    {
        "line": 24,
        "fullcodeline": "char *transfer_encoding = (char *)apr_table_get(msr->request_headers, \"Transfer-Encoding\");"
    },
    {
        "line": 41,
        "fullcodeline": "&& (strncasecmp(msr->request_content_type, \"application/x-www-form-urlencoded\", 33) == 0))"
    },
    {
        "line": 46,
        "fullcodeline": "msr->msc_reqbody_storage = MSC_REQBODY_MEMORY;"
    },
    {
        "line": 47,
        "fullcodeline": "msr->msc_reqbody_spilltodisk = 0;"
    },
    {
        "line": 48,
        "fullcodeline": "msr->msc_reqbody_processor = \"URLENCODED\";"
    },
    {
        "line": 74,
        "fullcodeline": "msr->msc_reqbody_storage = MSC_REQBODY_MEMORY;"
    },
    {
        "line": 75,
        "fullcodeline": "msr->msc_reqbody_spilltodisk = 0;"
    },
    {
        "line": 82,
        "fullcodeline": "int invalid_count = 0;"
    },
    {
        "line": 25,
        "fullcodeline": "if ((transfer_encoding != NULL)&&(m_strcasestr(transfer_encoding, \"chunked\") != NULL)) {"
    },
    {
        "line": 31,
        "fullcodeline": "msr->reqbody_should_exist = 1;"
    },
    {
        "line": 62,
        "fullcodeline": "msr->msc_reqbody_storage = MSC_REQBODY_MEMORY;"
    },
    {
        "line": 63,
        "fullcodeline": "msr->msc_reqbody_spilltodisk = 1;"
    },
    {
        "line": 189,
        "fullcodeline": "if (msr->removed_rules_msg == NULL) return -1;"
    },
    {
        "line": 26,
        "fullcodeline": "msr->reqbody_should_exist = 1;"
    },
    {
        "line": 27,
        "fullcodeline": "msr->reqbody_chunked = 1;"
    },
    {
        "line": 53,
        "fullcodeline": "if ((msr->request_content_length != -1)"
    },
    {
        "line": 65,
        "fullcodeline": "if (msr->request_content_type != NULL) {"
    },
    {
        "line": 84,
        "fullcodeline": "if (parse_arguments(msr, msr->query_string, strlen(msr->query_string),"
    },
    {
        "line": 93,
        "fullcodeline": "msr->urlencoded_error = 1;"
    },
    {
        "line": 127,
        "fullcodeline": "if (strcasecmp(te[i].key, \"Cookie\") == 0) {"
    },
    {
        "line": 54,
        "fullcodeline": "&& (msr->request_content_length > msr->txcfg->reqbody_inmemory_limit))"
    },
    {
        "line": 56,
        "fullcodeline": "msr->msc_reqbody_storage = MSC_REQBODY_DISK;"
    },
    {
        "line": 89,
        "fullcodeline": "return -1;"
    },
    {
        "line": 128,
        "fullcodeline": "if (msr->txcfg->cookie_format == COOKIES_V0) {"
    },
    {
        "line": 66,
        "fullcodeline": "if (strncasecmp(msr->request_content_type, \"multipart/form-data\", 19) == 0) {"
    },
    {
        "line": 129,
        "fullcodeline": "semicolon = apr_pstrdup(msr->mp, te[i].val);"
    },
    {
        "line": 67,
        "fullcodeline": "msr->msc_reqbody_processor = \"MULTIPART\";"
    },
    {
        "line": 131,
        "fullcodeline": "if(*semicolon == ';')    {"
    },
    {
        "line": 151,
        "fullcodeline": "parse_cookies_v1(msr, te[i].val, msr->request_cookies);"
    },
    {
        "line": 130,
        "fullcodeline": "while((*semicolon != 0)&&(*semicolon != ';')) semicolon++;"
    },
    {
        "line": 132,
        "fullcodeline": "parse_cookies_v0(msr, te[i].val, msr->request_cookies, \";\");"
    },
    {
        "line": 134,
        "fullcodeline": "comma = apr_pstrdup(msr->mp, te[i].val);"
    },
    {
        "line": 135,
        "fullcodeline": "while((*comma != 0)&&(*comma != ',')) comma++;"
    },
    {
        "line": 136,
        "fullcodeline": "if(*comma == ',')    {"
    },
    {
        "line": 138,
        "fullcodeline": "if(*comma == 0x20)   {// looks like comma is the separator"
    },
    {
        "line": 147,
        "fullcodeline": "parse_cookies_v0(msr, te[i].val, msr->request_cookies, \";\");"
    },
    {
        "line": 142,
        "fullcodeline": "parse_cookies_v0(msr, te[i].val, msr->request_cookies, \",\");"
    },
    {
        "line": 144,
        "fullcodeline": "parse_cookies_v0(msr, te[i].val, msr->request_cookies, \";\");"
    },
    {
        "line": 140,
        "fullcodeline": "msr_log(msr, 5, \"Cookie v0 parser: Using comma as a separator. Semi-colon was not identified!\");"
    }
]