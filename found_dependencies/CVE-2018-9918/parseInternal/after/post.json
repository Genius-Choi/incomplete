[
    {
        "line": 12,
        "fullcodeline": "empty = false;"
    },
    {
        "line": 16,
        "fullcodeline": "std::vector<std::vector<QPDFObjectHandle> > olist_stack;"
    },
    {
        "line": 17,
        "fullcodeline": "olist_stack.push_back(std::vector<QPDFObjectHandle>());"
    },
    {
        "line": 18,
        "fullcodeline": "std::vector<parser_state_e> state_stack;"
    },
    {
        "line": 19,
        "fullcodeline": "state_stack.push_back(st_top);"
    },
    {
        "line": 20,
        "fullcodeline": "std::vector<qpdf_offset_t> offset_stack;"
    },
    {
        "line": 21,
        "fullcodeline": "qpdf_offset_t offset = input->tell();"
    },
    {
        "line": 22,
        "fullcodeline": "offset_stack.push_back(offset);"
    },
    {
        "line": 23,
        "fullcodeline": "bool done = false;"
    },
    {
        "line": 366,
        "fullcodeline": "setObjectDescriptionFromInput("
    },
    {
        "line": 24,
        "fullcodeline": "while (! done)"
    },
    {
        "line": 26,
        "fullcodeline": "std::vector<QPDFObjectHandle>& olist = olist_stack.back();"
    },
    {
        "line": 27,
        "fullcodeline": "parser_state_e state = state_stack.back();"
    },
    {
        "line": 28,
        "fullcodeline": "offset = offset_stack.back();"
    },
    {
        "line": 30,
        "fullcodeline": "object = QPDFObjectHandle();"
    },
    {
        "line": 32,
        "fullcodeline": "QPDFTokenizer::Token token ="
    },
    {
        "line": 33,
        "fullcodeline": "tokenizer.readToken(input, object_description, true);"
    },
    {
        "line": 35,
        "fullcodeline": "switch (token.getType())"
    },
    {
        "line": 224,
        "fullcodeline": "if ((! object.isInitialized()) &&"
    },
    {
        "line": 47,
        "fullcodeline": "state = st_eof;"
    },
    {
        "line": 51,
        "fullcodeline": "QTC::TC(\"qpdf\", \"QPDFObjectHandle bad token in parse\");"
    },
    {
        "line": 52,
        "fullcodeline": "warn(context,"
    },
    {
        "line": 57,
        "fullcodeline": "object = newNull();"
    },
    {
        "line": 62,
        "fullcodeline": "QTC::TC(\"qpdf\", \"QPDFObjectHandle bad brace\");"
    },
    {
        "line": 63,
        "fullcodeline": "warn(context,"
    },
    {
        "line": 68,
        "fullcodeline": "object = newNull();"
    },
    {
        "line": 130,
        "fullcodeline": "object = newBool((token.getValue() == \"true\"));"
    },
    {
        "line": 134,
        "fullcodeline": "object = newNull();"
    },
    {
        "line": 138,
        "fullcodeline": "object = newInteger(QUtil::string_to_ll(token.getValue().c_str()));"
    },
    {
        "line": 142,
        "fullcodeline": "object = newReal(token.getValue());"
    },
    {
        "line": 146,
        "fullcodeline": "object = newName(token.getValue());"
    },
    {
        "line": 214,
        "fullcodeline": "warn(context,"
    },
    {
        "line": 220,
        "fullcodeline": "object = newNull();"
    },
    {
        "line": 225,
        "fullcodeline": "(! ((state == st_start) ||"
    },
    {
        "line": 246,
        "fullcodeline": "done = true;"
    },
    {
        "line": 257,
        "fullcodeline": "setObjectDescriptionFromInput("
    },
    {
        "line": 260,
        "fullcodeline": "olist.push_back(object);"
    },
    {
        "line": 264,
        "fullcodeline": "done = true;"
    },
    {
        "line": 277,
        "fullcodeline": "parser_state_e old_state = state_stack.back();"
    },
    {
        "line": 278,
        "fullcodeline": "state_stack.pop_back();"
    },
    {
        "line": 353,
        "fullcodeline": "olist_stack.pop_back();"
    },
    {
        "line": 354,
        "fullcodeline": "offset_stack.pop_back();"
    },
    {
        "line": 38,
        "fullcodeline": "if (! content_stream)"
    },
    {
        "line": 53,
        "fullcodeline": "QPDFExc(qpdf_e_damaged_pdf, input->getName(),"
    },
    {
        "line": 64,
        "fullcodeline": "QPDFExc(qpdf_e_damaged_pdf, input->getName(),"
    },
    {
        "line": 72,
        "fullcodeline": "if (state == st_array)"
    },
    {
        "line": 89,
        "fullcodeline": "if (state == st_dictionary)"
    },
    {
        "line": 107,
        "fullcodeline": "if (olist_stack.size() > 500)"
    },
    {
        "line": 151,
        "fullcodeline": "std::string const& value = token.getValue();"
    },
    {
        "line": 203,
        "fullcodeline": "std::string val = token.getValue();"
    },
    {
        "line": 208,
        "fullcodeline": "object = QPDFObjectHandle::newString(val);"
    },
    {
        "line": 215,
        "fullcodeline": "QPDFExc(qpdf_e_damaged_pdf, input->getName(),"
    },
    {
        "line": 229,
        "fullcodeline": "throw std::logic_error("
    },
    {
        "line": 238,
        "fullcodeline": "if (state_stack.size() > 1)"
    },
    {
        "line": 249,
        "fullcodeline": "if (! content_stream)"
    },
    {
        "line": 259,
        "fullcodeline": "input->getLastOffset());"
    },
    {
        "line": 271,
        "fullcodeline": "if ((state_stack.size() < 2) || (olist_stack.size() < 2))"
    },
    {
        "line": 279,
        "fullcodeline": "if (old_state == st_array)"
    },
    {
        "line": 355,
        "fullcodeline": "if (state_stack.back() == st_top)"
    },
    {
        "line": 40,
        "fullcodeline": "QTC::TC(\"qpdf\", \"QPDFObjectHandle eof in parseInternal\");"
    },
    {
        "line": 41,
        "fullcodeline": "warn(context,"
    },
    {
        "line": 55,
        "fullcodeline": "input->getLastOffset(),"
    },
    {
        "line": 56,
        "fullcodeline": "token.getErrorMessage()));"
    },
    {
        "line": 66,
        "fullcodeline": "input->getLastOffset(),"
    },
    {
        "line": 74,
        "fullcodeline": "state = st_stop;"
    },
    {
        "line": 91,
        "fullcodeline": "state = st_stop;"
    },
    {
        "line": 109,
        "fullcodeline": "QTC::TC(\"qpdf\", \"QPDFObjectHandle too deep\");"
    },
    {
        "line": 110,
        "fullcodeline": "warn(context,"
    },
    {
        "line": 115,
        "fullcodeline": "object = newNull();"
    },
    {
        "line": 116,
        "fullcodeline": "state = st_top;"
    },
    {
        "line": 217,
        "fullcodeline": "input->getLastOffset(),"
    },
    {
        "line": 227,
        "fullcodeline": "(state == st_eof))))"
    },
    {
        "line": 240,
        "fullcodeline": "warn(context,"
    },
    {
        "line": 251,
        "fullcodeline": "object = newNull();"
    },
    {
        "line": 281,
        "fullcodeline": "object = newArray(olist);"
    },
    {
        "line": 282,
        "fullcodeline": "setObjectDescriptionFromInput("
    },
    {
        "line": 357,
        "fullcodeline": "done = true;"
    },
    {
        "line": 42,
        "fullcodeline": "QPDFExc(qpdf_e_damaged_pdf, input->getName(),"
    },
    {
        "line": 78,
        "fullcodeline": "QTC::TC(\"qpdf\", \"QPDFObjectHandle bad array close\");"
    },
    {
        "line": 79,
        "fullcodeline": "warn(context,"
    },
    {
        "line": 84,
        "fullcodeline": "object = newNull();"
    },
    {
        "line": 95,
        "fullcodeline": "QTC::TC(\"qpdf\", \"QPDFObjectHandle bad dictionary close\");"
    },
    {
        "line": 96,
        "fullcodeline": "warn(context,"
    },
    {
        "line": 101,
        "fullcodeline": "object = newNull();"
    },
    {
        "line": 111,
        "fullcodeline": "QPDFExc(qpdf_e_damaged_pdf, input->getName(),"
    },
    {
        "line": 120,
        "fullcodeline": "olist_stack.push_back(std::vector<QPDFObjectHandle>());"
    },
    {
        "line": 121,
        "fullcodeline": "state = st_start;"
    },
    {
        "line": 122,
        "fullcodeline": "offset_stack.push_back(input->tell());"
    },
    {
        "line": 123,
        "fullcodeline": "state_stack.push_back("
    },
    {
        "line": 154,
        "fullcodeline": "object = QPDFObjectHandle::newOperator(value);"
    },
    {
        "line": 206,
        "fullcodeline": "decrypter->decryptString(val);"
    },
    {
        "line": 226,
        "fullcodeline": "(state == st_stop) ||"
    },
    {
        "line": 241,
        "fullcodeline": "QPDFExc(qpdf_e_damaged_pdf, input->getName(),"
    },
    {
        "line": 273,
        "fullcodeline": "throw std::logic_error("
    },
    {
        "line": 361,
        "fullcodeline": "olist_stack.back().push_back(object);"
    },
    {
        "line": 44,
        "fullcodeline": "input->getLastOffset(),"
    },
    {
        "line": 80,
        "fullcodeline": "QPDFExc(qpdf_e_damaged_pdf, input->getName(),"
    },
    {
        "line": 97,
        "fullcodeline": "QPDFExc(qpdf_e_damaged_pdf, input->getName(),"
    },
    {
        "line": 113,
        "fullcodeline": "input->getLastOffset(),"
    },
    {
        "line": 124,
        "fullcodeline": "(token.getType() == QPDFTokenizer::tt_array_open) ?"
    },
    {
        "line": 243,
        "fullcodeline": "input->getLastOffset(),"
    },
    {
        "line": 285,
        "fullcodeline": "else if (old_state == st_dictionary)"
    },
    {
        "line": 82,
        "fullcodeline": "input->getLastOffset(),"
    },
    {
        "line": 99,
        "fullcodeline": "input->getLastOffset(),"
    },
    {
        "line": 156,
        "fullcodeline": "else if ((value == \"R\") && (state != st_top) &&"
    },
    {
        "line": 290,
        "fullcodeline": "std::set<std::string> names;"
    },
    {
        "line": 301,
        "fullcodeline": "std::map<std::string, QPDFObjectHandle> dict;"
    },
    {
        "line": 302,
        "fullcodeline": "int next_fake_key = 1;"
    },
    {
        "line": 349,
        "fullcodeline": "object = newDictionary(dict);"
    },
    {
        "line": 350,
        "fullcodeline": "setObjectDescriptionFromInput("
    },
    {
        "line": 161,
        "fullcodeline": "(olist.at(olist.size() - 2).isInteger()))"
    },
    {
        "line": 171,
        "fullcodeline": "object = newIndirect("
    },
    {
        "line": 175,
        "fullcodeline": "olist.pop_back();"
    },
    {
        "line": 176,
        "fullcodeline": "olist.pop_back();"
    },
    {
        "line": 293,
        "fullcodeline": "iter != olist.end(); ++iter)"
    },
    {
        "line": 303,
        "fullcodeline": "for (unsigned int i = 0; i < olist.size(); ++i)"
    },
    {
        "line": 160,
        "fullcodeline": "(! olist.at(olist.size() - 2).isIndirect()) &&"
    },
    {
        "line": 163,
        "fullcodeline": "if (context == 0)"
    },
    {
        "line": 291,
        "fullcodeline": "for (std::vector<QPDFObjectHandle>::iterator iter ="
    },
    {
        "line": 305,
        "fullcodeline": "QPDFObjectHandle key_obj = olist.at(i);"
    },
    {
        "line": 347,
        "fullcodeline": "dict[key_obj.getName()] = val;"
    },
    {
        "line": 159,
        "fullcodeline": "(olist.at(olist.size() - 1).isInteger()) &&"
    },
    {
        "line": 165,
        "fullcodeline": "QTC::TC(\"qpdf\", \"QPDFObjectHandle indirect without context\");"
    },
    {
        "line": 173,
        "fullcodeline": "olist.at(olist.size() - 2).getIntValue(),"
    },
    {
        "line": 174,
        "fullcodeline": "olist.at(olist.size() - 1).getIntValue());"
    },
    {
        "line": 178,
        "fullcodeline": "else if ((value == \"endobj\") && (state == st_top))"
    },
    {
        "line": 292,
        "fullcodeline": "olist.begin();"
    },
    {
        "line": 295,
        "fullcodeline": "if ((! (*iter).isIndirect()) && (*iter).isName())"
    },
    {
        "line": 307,
        "fullcodeline": "if (key_obj.isIndirect() || (! key_obj.isName()))"
    },
    {
        "line": 158,
        "fullcodeline": "(! olist.at(olist.size() - 1).isIndirect()) &&"
    },
    {
        "line": 166,
        "fullcodeline": "throw std::logic_error("
    },
    {
        "line": 183,
        "fullcodeline": "object = newNull();"
    },
    {
        "line": 184,
        "fullcodeline": "input->seek(input->getLastOffset(), SEEK_SET);"
    },
    {
        "line": 185,
        "fullcodeline": "empty = true;"
    },
    {
        "line": 297,
        "fullcodeline": "names.insert((*iter).getName());"
    },
    {
        "line": 309,
        "fullcodeline": "bool found_fake = false;"
    },
    {
        "line": 320,
        "fullcodeline": "warn(context,"
    },
    {
        "line": 327,
        "fullcodeline": "val = key_obj;"
    },
    {
        "line": 328,
        "fullcodeline": "key_obj = newName(candidate);"
    },
    {
        "line": 157,
        "fullcodeline": "(olist.size() >= 2) &&"
    },
    {
        "line": 189,
        "fullcodeline": "QTC::TC(\"qpdf\", \"QPDFObjectHandle treat word as string\");"
    },
    {
        "line": 190,
        "fullcodeline": "warn(context,"
    },
    {
        "line": 196,
        "fullcodeline": "object = newString(value);"
    },
    {
        "line": 311,
        "fullcodeline": "while (! found_fake)"
    },
    {
        "line": 321,
        "fullcodeline": "QPDFExc("
    },
    {
        "line": 191,
        "fullcodeline": "QPDFExc(qpdf_e_damaged_pdf, input->getName(),"
    },
    {
        "line": 313,
        "fullcodeline": "candidate ="
    },
    {
        "line": 316,
        "fullcodeline": "found_fake = (names.count(candidate) == 0);"
    },
    {
        "line": 317,
        "fullcodeline": "QTC::TC(\"qpdf\", \"QPDFObjectHandle found fake\","
    },
    {
        "line": 323,
        "fullcodeline": "input->getName(), object_description, offset,"
    },
    {
        "line": 324,
        "fullcodeline": "\"expected dictionary key but found\""
    },
    {
        "line": 330,
        "fullcodeline": "else if (i + 1 >= olist.size())"
    },
    {
        "line": 193,
        "fullcodeline": "input->getLastOffset(),"
    },
    {
        "line": 314,
        "fullcodeline": "\"/QPDFFake\" +"
    },
    {
        "line": 318,
        "fullcodeline": "(found_fake ? 0 : 1));"
    },
    {
        "line": 332,
        "fullcodeline": "QTC::TC(\"qpdf\", \"QPDFObjectHandle no val for last key\");"
    },
    {
        "line": 333,
        "fullcodeline": "warn(context,"
    },
    {
        "line": 339,
        "fullcodeline": "val = newNull();"
    },
    {
        "line": 340,
        "fullcodeline": "setObjectDescriptionFromInput("
    },
    {
        "line": 315,
        "fullcodeline": "QUtil::int_to_string(next_fake_key++);"
    },
    {
        "line": 334,
        "fullcodeline": "QPDFExc("
    },
    {
        "line": 345,
        "fullcodeline": "val = olist.at(++i);"
    },
    {
        "line": 336,
        "fullcodeline": "input->getName(), object_description, offset,"
    }
]