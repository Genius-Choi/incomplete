[
    {
        "line": 2,
        "fullcodeline": "auto* params = reinterpret_cast<TfLiteDivParams*>(node->builtin_data);"
    },
    {
        "line": 3,
        "fullcodeline": "OpData* data = reinterpret_cast<OpData*>(node->user_data);"
    },
    {
        "line": 6,
        "fullcodeline": "TF_LITE_ENSURE_OK(context,"
    },
    {
        "line": 9,
        "fullcodeline": "TF_LITE_ENSURE_OK(context,"
    },
    {
        "line": 12,
        "fullcodeline": "TF_LITE_ENSURE_OK(context,"
    },
    {
        "line": 7,
        "fullcodeline": "GetInputSafe(context, node, kInputTensor1, &input1));"
    },
    {
        "line": 10,
        "fullcodeline": "GetInputSafe(context, node, kInputTensor2, &input2));"
    },
    {
        "line": 13,
        "fullcodeline": "GetOutputSafe(context, node, kOutputTensor, &output));"
    },
    {
        "line": 23,
        "fullcodeline": "if (output->type == kTfLiteFloat32) {"
    },
    {
        "line": 26,
        "fullcodeline": "EvalDiv<kernel_type>(context, node, params, data, input1, input2, output);"
    },
    {
        "line": 27,
        "fullcodeline": "} else if (output->type == kTfLiteInt32) {"
    },
    {
        "line": 28,
        "fullcodeline": "TF_LITE_CHECK_DIV_NON_ZERO(int32_t);"
    },
    {
        "line": 29,
        "fullcodeline": "EvalDiv<kernel_type>(context, node, params, data, input1, input2, output);"
    },
    {
        "line": 30,
        "fullcodeline": "} else if (output->type == kTfLiteUInt8) {"
    },
    {
        "line": 31,
        "fullcodeline": "TF_LITE_CHECK_DIV_NON_ZERO(uint8_t);"
    },
    {
        "line": 33,
        "fullcodeline": "context, EvalQuantized<kernel_type>(context, node, params, data, input1,"
    },
    {
        "line": 36,
        "fullcodeline": "context->ReportError("
    }
]