[
    {
        "line": 6,
        "fullcodeline": "sljit_sw private_srcw[2];"
    },
    {
        "line": 7,
        "fullcodeline": "sljit_sw shared_srcw[3];"
    },
    {
        "line": 8,
        "fullcodeline": "sljit_sw kept_shared_srcw[2];"
    },
    {
        "line": 12,
        "fullcodeline": "memset(common->recurse_bitset, 0, common->recurse_bitset_size);"
    },
    {
        "line": 40,
        "fullcodeline": "stackptr = STACK(stackptr);"
    },
    {
        "line": 41,
        "fullcodeline": "stacktop = STACK(stacktop);"
    },
    {
        "line": 43,
        "fullcodeline": "status.tmp_regs[0] = TMP1;"
    },
    {
        "line": 44,
        "fullcodeline": "status.saved_tmp_regs[0] = TMP1;"
    },
    {
        "line": 60,
        "fullcodeline": "status.saved_tmp_regs[2] = TMP3;"
    },
    {
        "line": 66,
        "fullcodeline": "delayed_mem_copy_init(&status, common);"
    },
    {
        "line": 79,
        "fullcodeline": "stackptr += sizeof(sljit_sw);"
    },
    {
        "line": 427,
        "fullcodeline": "SLJIT_ASSERT(cc == ccend && stackptr == stacktop);"
    },
    {
        "line": 429,
        "fullcodeline": "delayed_mem_copy_finish(&status);"
    },
    {
        "line": 46,
        "fullcodeline": "if (base_reg != TMP2)"
    },
    {
        "line": 68,
        "fullcodeline": "if (type != recurse_copy_shared_to_global && type != recurse_copy_kept_shared_to_global)"
    },
    {
        "line": 94,
        "fullcodeline": "while (cc < ccend)"
    },
    {
        "line": 22,
        "fullcodeline": "from_sp = TRUE;"
    },
    {
        "line": 23,
        "fullcodeline": "base_reg = STACK_TOP;"
    },
    {
        "line": 29,
        "fullcodeline": "from_sp = FALSE;"
    },
    {
        "line": 30,
        "fullcodeline": "base_reg = STACK_TOP;"
    },
    {
        "line": 34,
        "fullcodeline": "SLJIT_ASSERT(type == recurse_swap_global);"
    },
    {
        "line": 35,
        "fullcodeline": "from_sp = FALSE;"
    },
    {
        "line": 36,
        "fullcodeline": "base_reg = TMP2;"
    },
    {
        "line": 48,
        "fullcodeline": "status.tmp_regs[1] = TMP2;"
    },
    {
        "line": 49,
        "fullcodeline": "status.saved_tmp_regs[1] = TMP2;"
    },
    {
        "line": 62,
        "fullcodeline": "status.tmp_regs[2] = STR_END;"
    },
    {
        "line": 70,
        "fullcodeline": "SLJIT_ASSERT(type == recurse_copy_from_global || type == recurse_copy_private_to_global || type == recurse_swap_global);"
    },
    {
        "line": 96,
        "fullcodeline": "private_count = 0;"
    },
    {
        "line": 97,
        "fullcodeline": "shared_count = 0;"
    },
    {
        "line": 98,
        "fullcodeline": "kept_shared_count = 0;"
    },
    {
        "line": 53,
        "fullcodeline": "status.saved_tmp_regs[1] = RETURN_ADDR;"
    },
    {
        "line": 64,
        "fullcodeline": "status.tmp_regs[2] = TMP3;"
    },
    {
        "line": 72,
        "fullcodeline": "if (!from_sp)"
    },
    {
        "line": 75,
        "fullcodeline": "if (from_sp || type == recurse_swap_global)"
    },
    {
        "line": 366,
        "fullcodeline": "if (type != recurse_copy_shared_to_global && type != recurse_copy_kept_shared_to_global)"
    },
    {
        "line": 386,
        "fullcodeline": "if (type != recurse_copy_private_to_global && type != recurse_copy_kept_shared_to_global)"
    },
    {
        "line": 406,
        "fullcodeline": "if (type != recurse_copy_private_to_global && type != recurse_swap_global)"
    },
    {
        "line": 73,
        "fullcodeline": "delayed_mem_copy_move(&status, base_reg, stackptr, SLJIT_SP, common->recursive_head_ptr);"
    },
    {
        "line": 76,
        "fullcodeline": "delayed_mem_copy_move(&status, SLJIT_SP, common->recursive_head_ptr, base_reg, stackptr);"
    },
    {
        "line": 103,
        "fullcodeline": "SLJIT_ASSERT(common->has_set_som);"
    },
    {
        "line": 109,
        "fullcodeline": "cc += 1;"
    },
    {
        "line": 131,
        "fullcodeline": "cc += 1 + LINK_SIZE;"
    },
    {
        "line": 135,
        "fullcodeline": "private_srcw[0] = PRIVATE_DATA(cc);"
    },
    {
        "line": 143,
        "fullcodeline": "cc += 1 + LINK_SIZE;"
    },
    {
        "line": 158,
        "fullcodeline": "private_srcw[0] = PRIVATE_DATA(cc);"
    },
    {
        "line": 161,
        "fullcodeline": "cc += 1 + LINK_SIZE;"
    },
    {
        "line": 166,
        "fullcodeline": "offset = GET2(cc, 1 + LINK_SIZE);"
    },
    {
        "line": 167,
        "fullcodeline": "shared_srcw[0] = OVECTOR(offset << 1);"
    },
    {
        "line": 188,
        "fullcodeline": "cc += 1 + LINK_SIZE + IMM2_SIZE;"
    },
    {
        "line": 193,
        "fullcodeline": "offset = GET2(cc, 1 + LINK_SIZE);"
    },
    {
        "line": 194,
        "fullcodeline": "shared_srcw[0] = OVECTOR(offset << 1);"
    },
    {
        "line": 208,
        "fullcodeline": "private_srcw[0] = PRIVATE_DATA(cc);"
    },
    {
        "line": 212,
        "fullcodeline": "offset = OVECTOR_PRIV(offset);"
    },
    {
        "line": 218,
        "fullcodeline": "cc += 1 + LINK_SIZE + IMM2_SIZE;"
    },
    {
        "line": 223,
        "fullcodeline": "alternative = cc + GET(cc, 1);"
    },
    {
        "line": 230,
        "fullcodeline": "cc += 1 + LINK_SIZE;"
    },
    {
        "line": 304,
        "fullcodeline": "i = (*cc == OP_XCLASS) ? GET(cc, 1) : 1 + 32 / (int)sizeof(PCRE2_UCHAR);"
    },
    {
        "line": 329,
        "fullcodeline": "cc += i;"
    },
    {
        "line": 336,
        "fullcodeline": "SLJIT_ASSERT(common->mark_ptr != 0);"
    },
    {
        "line": 347,
        "fullcodeline": "cc += 1 + 2 + cc[1];"
    },
    {
        "line": 351,
        "fullcodeline": "SLJIT_ASSERT(common->control_head_ptr != 0);"
    },
    {
        "line": 357,
        "fullcodeline": "cc++;"
    },
    {
        "line": 361,
        "fullcodeline": "cc = next_opcode(common, cc);"
    },
    {
        "line": 362,
        "fullcodeline": "SLJIT_ASSERT(cc != NULL);"
    },
    {
        "line": 368,
        "fullcodeline": "SLJIT_ASSERT(type == recurse_copy_from_global || type == recurse_copy_private_to_global || type == recurse_swap_global);"
    },
    {
        "line": 388,
        "fullcodeline": "SLJIT_ASSERT(type == recurse_copy_from_global || type == recurse_copy_shared_to_global || type == recurse_swap_global);"
    },
    {
        "line": 408,
        "fullcodeline": "SLJIT_ASSERT(type == recurse_copy_from_global || type == recurse_copy_shared_to_global || type == recurse_copy_kept_shared_to_global);"
    },
    {
        "line": 55,
        "fullcodeline": "status.tmp_regs[1] = STR_PTR;"
    },
    {
        "line": 104,
        "fullcodeline": "if (has_quit && recurse_check_bit(common, OVECTOR(0)))"
    },
    {
        "line": 126,
        "fullcodeline": "if (common->capture_last_ptr != 0 && recurse_check_bit(common, common->capture_last_ptr))"
    },
    {
        "line": 136,
        "fullcodeline": "if (private_srcw[0] != 0)"
    },
    {
        "line": 159,
        "fullcodeline": "if (recurse_check_bit(common, private_srcw[0]))"
    },
    {
        "line": 168,
        "fullcodeline": "if (recurse_check_bit(common, shared_srcw[0]))"
    },
    {
        "line": 175,
        "fullcodeline": "if (common->capture_last_ptr != 0 && recurse_check_bit(common, common->capture_last_ptr))"
    },
    {
        "line": 181,
        "fullcodeline": "if (common->optimized_cbracket[offset] == 0)"
    },
    {
        "line": 195,
        "fullcodeline": "if (recurse_check_bit(common, shared_srcw[0]))"
    },
    {
        "line": 202,
        "fullcodeline": "if (common->capture_last_ptr != 0 && recurse_check_bit(common, common->capture_last_ptr))"
    },
    {
        "line": 209,
        "fullcodeline": "if (recurse_check_bit(common, private_srcw[0]))"
    },
    {
        "line": 213,
        "fullcodeline": "if (recurse_check_bit(common, offset))"
    },
    {
        "line": 224,
        "fullcodeline": "if (*alternative == OP_KETRMAX || *alternative == OP_KETRMIN)"
    },
    {
        "line": 308,
        "fullcodeline": "if (PRIVATE_DATA(cc) != 0)"
    },
    {
        "line": 337,
        "fullcodeline": "if (has_quit && recurse_check_bit(common, common->mark_ptr))"
    },
    {
        "line": 342,
        "fullcodeline": "if (common->control_head_ptr != 0 && recurse_check_bit(common, common->control_head_ptr))"
    },
    {
        "line": 352,
        "fullcodeline": "if (recurse_check_bit(common, common->control_head_ptr))"
    },
    {
        "line": 370,
        "fullcodeline": "for (i = 0; i < private_count; i++)"
    },
    {
        "line": 384,
        "fullcodeline": "stackptr += sizeof(sljit_sw) * private_count;"
    },
    {
        "line": 390,
        "fullcodeline": "for (i = 0; i < shared_count; i++)"
    },
    {
        "line": 404,
        "fullcodeline": "stackptr += sizeof(sljit_sw) * shared_count;"
    },
    {
        "line": 410,
        "fullcodeline": "for (i = 0; i < kept_shared_count; i++)"
    },
    {
        "line": 424,
        "fullcodeline": "stackptr += sizeof(sljit_sw) * kept_shared_count;"
    },
    {
        "line": 57,
        "fullcodeline": "status.tmp_regs[1] = RETURN_ADDR;"
    },
    {
        "line": 106,
        "fullcodeline": "kept_shared_srcw[0] = OVECTOR(0);"
    },
    {
        "line": 107,
        "fullcodeline": "kept_shared_count = 1;"
    },
    {
        "line": 128,
        "fullcodeline": "shared_srcw[0] = common->capture_last_ptr;"
    },
    {
        "line": 129,
        "fullcodeline": "shared_count = 1;"
    },
    {
        "line": 140,
        "fullcodeline": "SLJIT_ASSERT(PRIVATE_DATA(cc + 1) != 0);"
    },
    {
        "line": 141,
        "fullcodeline": "cc += PRIVATE_DATA(cc + 1);"
    },
    {
        "line": 160,
        "fullcodeline": "private_count = 1;"
    },
    {
        "line": 170,
        "fullcodeline": "shared_srcw[1] = shared_srcw[0] + sizeof(sljit_sw);"
    },
    {
        "line": 171,
        "fullcodeline": "SLJIT_ASSERT(recurse_check_bit(common, shared_srcw[1]));"
    },
    {
        "line": 172,
        "fullcodeline": "shared_count = 2;"
    },
    {
        "line": 177,
        "fullcodeline": "shared_srcw[shared_count] = common->capture_last_ptr;"
    },
    {
        "line": 178,
        "fullcodeline": "shared_count++;"
    },
    {
        "line": 183,
        "fullcodeline": "private_srcw[0] = OVECTOR_PRIV(offset);"
    },
    {
        "line": 197,
        "fullcodeline": "shared_srcw[1] = shared_srcw[0] + sizeof(sljit_sw);"
    },
    {
        "line": 198,
        "fullcodeline": "SLJIT_ASSERT(recurse_check_bit(common, shared_srcw[1]));"
    },
    {
        "line": 199,
        "fullcodeline": "shared_count = 2;"
    },
    {
        "line": 204,
        "fullcodeline": "shared_srcw[shared_count] = common->capture_last_ptr;"
    },
    {
        "line": 205,
        "fullcodeline": "shared_count++;"
    },
    {
        "line": 210,
        "fullcodeline": "private_count = 1;"
    },
    {
        "line": 215,
        "fullcodeline": "private_srcw[private_count] = offset;"
    },
    {
        "line": 216,
        "fullcodeline": "private_count++;"
    },
    {
        "line": 226,
        "fullcodeline": "private_srcw[0] = PRIVATE_DATA(cc);"
    },
    {
        "line": 339,
        "fullcodeline": "kept_shared_srcw[0] = common->mark_ptr;"
    },
    {
        "line": 340,
        "fullcodeline": "kept_shared_count = 1;"
    },
    {
        "line": 344,
        "fullcodeline": "private_srcw[0] = common->control_head_ptr;"
    },
    {
        "line": 345,
        "fullcodeline": "private_count = 1;"
    },
    {
        "line": 354,
        "fullcodeline": "private_srcw[0] = common->control_head_ptr;"
    },
    {
        "line": 355,
        "fullcodeline": "private_count = 1;"
    },
    {
        "line": 372,
        "fullcodeline": "SLJIT_ASSERT(private_srcw[i] != 0);"
    },
    {
        "line": 380,
        "fullcodeline": "stackptr += sizeof(sljit_sw);"
    },
    {
        "line": 392,
        "fullcodeline": "SLJIT_ASSERT(shared_srcw[i] != 0);"
    },
    {
        "line": 400,
        "fullcodeline": "stackptr += sizeof(sljit_sw);"
    },
    {
        "line": 412,
        "fullcodeline": "SLJIT_ASSERT(kept_shared_srcw[i] != 0);"
    },
    {
        "line": 420,
        "fullcodeline": "stackptr += sizeof(sljit_sw);"
    },
    {
        "line": 115,
        "fullcodeline": "if (common->has_set_som && recurse_check_bit(common, OVECTOR(0)))"
    },
    {
        "line": 120,
        "fullcodeline": "if (common->mark_ptr != 0 && recurse_check_bit(common, common->mark_ptr))"
    },
    {
        "line": 138,
        "fullcodeline": "if (recurse_check_bit(common, private_srcw[0]))"
    },
    {
        "line": 184,
        "fullcodeline": "if (recurse_check_bit(common, private_srcw[0]))"
    },
    {
        "line": 227,
        "fullcodeline": "if (recurse_check_bit(common, private_srcw[0]))"
    },
    {
        "line": 309,
        "fullcodeline": "switch(get_class_iterator_size(cc + i))"
    },
    {
        "line": 374,
        "fullcodeline": "if (!from_sp)"
    },
    {
        "line": 377,
        "fullcodeline": "if (from_sp || type == recurse_swap_global)"
    },
    {
        "line": 394,
        "fullcodeline": "if (!from_sp)"
    },
    {
        "line": 397,
        "fullcodeline": "if (from_sp || type == recurse_swap_global)"
    },
    {
        "line": 414,
        "fullcodeline": "if (!from_sp)"
    },
    {
        "line": 417,
        "fullcodeline": "if (from_sp || type == recurse_swap_global)"
    },
    {
        "line": 117,
        "fullcodeline": "kept_shared_srcw[0] = OVECTOR(0);"
    },
    {
        "line": 118,
        "fullcodeline": "kept_shared_count = 1;"
    },
    {
        "line": 122,
        "fullcodeline": "kept_shared_srcw[kept_shared_count] = common->mark_ptr;"
    },
    {
        "line": 123,
        "fullcodeline": "kept_shared_count++;"
    },
    {
        "line": 139,
        "fullcodeline": "private_count = 1;"
    },
    {
        "line": 185,
        "fullcodeline": "private_count = 1;"
    },
    {
        "line": 228,
        "fullcodeline": "private_count = 1;"
    },
    {
        "line": 312,
        "fullcodeline": "private_srcw[0] = PRIVATE_DATA(cc);"
    },
    {
        "line": 316,
        "fullcodeline": "private_srcw[0] = PRIVATE_DATA(cc);"
    },
    {
        "line": 326,
        "fullcodeline": "SLJIT_UNREACHABLE();"
    },
    {
        "line": 375,
        "fullcodeline": "delayed_mem_copy_move(&status, base_reg, stackptr, SLJIT_SP, private_srcw[i]);"
    },
    {
        "line": 378,
        "fullcodeline": "delayed_mem_copy_move(&status, SLJIT_SP, private_srcw[i], base_reg, stackptr);"
    },
    {
        "line": 395,
        "fullcodeline": "delayed_mem_copy_move(&status, base_reg, stackptr, SLJIT_SP, shared_srcw[i]);"
    },
    {
        "line": 398,
        "fullcodeline": "delayed_mem_copy_move(&status, SLJIT_SP, shared_srcw[i], base_reg, stackptr);"
    },
    {
        "line": 415,
        "fullcodeline": "delayed_mem_copy_move(&status, base_reg, stackptr, SLJIT_SP, kept_shared_srcw[i]);"
    },
    {
        "line": 418,
        "fullcodeline": "delayed_mem_copy_move(&status, SLJIT_SP, kept_shared_srcw[i], base_reg, stackptr);"
    },
    {
        "line": 317,
        "fullcodeline": "if (recurse_check_bit(common, private_srcw[0]))"
    },
    {
        "line": 319,
        "fullcodeline": "private_count = 2;"
    },
    {
        "line": 320,
        "fullcodeline": "private_srcw[1] = private_srcw[0] + sizeof(sljit_sw);"
    },
    {
        "line": 321,
        "fullcodeline": "SLJIT_ASSERT(recurse_check_bit(common, private_srcw[1]));"
    }
]