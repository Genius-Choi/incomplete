[
    {
        "line": 3,
        "fullcodeline": "pcre2_real_code *re = (pcre2_real_code *)code;"
    },
    {
        "line": 7,
        "fullcodeline": "compiler_common *common = &common_data;"
    },
    {
        "line": 8,
        "fullcodeline": "const sljit_u8 *tables = re->tables;"
    },
    {
        "line": 9,
        "fullcodeline": "void *allocator_data = &re->memctl;"
    },
    {
        "line": 16,
        "fullcodeline": "struct sljit_label *mainloop_label = NULL;"
    },
    {
        "line": 18,
        "fullcodeline": "struct sljit_label *empty_match_found_label = NULL;"
    },
    {
        "line": 19,
        "fullcodeline": "struct sljit_label *empty_match_backtrack_label = NULL;"
    },
    {
        "line": 23,
        "fullcodeline": "struct sljit_jump *minlength_check_failed = NULL;"
    },
    {
        "line": 24,
        "fullcodeline": "struct sljit_jump *empty_match = NULL;"
    },
    {
        "line": 25,
        "fullcodeline": "struct sljit_jump *end_anchor_failed = NULL;"
    },
    {
        "line": 26,
        "fullcodeline": "jump_list *reqcu_not_found = NULL;"
    },
    {
        "line": 28,
        "fullcodeline": "SLJIT_ASSERT(tables);"
    },
    {
        "line": 33,
        "fullcodeline": "SLJIT_ASSERT(sljit_get_register_index(TMP3) >= 0 && sljit_get_register_index(ARGUMENTS) >= 0 && sljit_get_register_index(RETURN_ADDR) >= 0);"
    },
    {
        "line": 38,
        "fullcodeline": "memset(&rootbacktrack, 0, sizeof(backtrack_common));"
    },
    {
        "line": 39,
        "fullcodeline": "memset(common, 0, sizeof(compiler_common));"
    },
    {
        "line": 40,
        "fullcodeline": "common->re = re;"
    },
    {
        "line": 41,
        "fullcodeline": "common->name_table = (PCRE2_SPTR)((uint8_t *)re + sizeof(pcre2_real_code));"
    },
    {
        "line": 42,
        "fullcodeline": "rootbacktrack.cc = common->name_table + re->name_count * re->name_entry_size;"
    },
    {
        "line": 47,
        "fullcodeline": "mode &= ~PUBLIC_JIT_COMPILE_CONFIGURATION_OPTIONS;"
    },
    {
        "line": 49,
        "fullcodeline": "common->start = rootbacktrack.cc;"
    },
    {
        "line": 50,
        "fullcodeline": "common->read_only_data_head = NULL;"
    },
    {
        "line": 51,
        "fullcodeline": "common->fcc = tables + fcc_offset;"
    },
    {
        "line": 52,
        "fullcodeline": "common->lcc = (sljit_sw)(tables + lcc_offset);"
    },
    {
        "line": 53,
        "fullcodeline": "common->mode = mode;"
    },
    {
        "line": 54,
        "fullcodeline": "common->might_be_empty = (re->minlength == 0) || (re->flags & PCRE2_MATCH_EMPTY);"
    },
    {
        "line": 55,
        "fullcodeline": "common->allow_empty_partial = (re->max_lookbehind > 0) || (re->flags & PCRE2_MATCH_EMPTY);"
    },
    {
        "line": 56,
        "fullcodeline": "common->nltype = NLTYPE_FIXED;"
    },
    {
        "line": 67,
        "fullcodeline": "common->nlmax = READ_CHAR_MAX;"
    },
    {
        "line": 68,
        "fullcodeline": "common->nlmin = 0;"
    },
    {
        "line": 81,
        "fullcodeline": "common->bsr_nlmax = READ_CHAR_MAX;"
    },
    {
        "line": 82,
        "fullcodeline": "common->bsr_nlmin = 0;"
    },
    {
        "line": 83,
        "fullcodeline": "common->endonly = (re->overall_options & PCRE2_DOLLAR_ENDONLY) != 0;"
    },
    {
        "line": 84,
        "fullcodeline": "common->ctypes = (sljit_sw)(tables + ctypes_offset);"
    },
    {
        "line": 85,
        "fullcodeline": "common->name_count = re->name_count;"
    },
    {
        "line": 86,
        "fullcodeline": "common->name_entry_size = re->name_entry_size;"
    },
    {
        "line": 87,
        "fullcodeline": "common->unset_backref = (re->overall_options & PCRE2_MATCH_UNSET_BACKREF) != 0;"
    },
    {
        "line": 88,
        "fullcodeline": "common->alt_circumflex = (re->overall_options & PCRE2_ALT_CIRCUMFLEX) != 0;"
    },
    {
        "line": 119,
        "fullcodeline": "ccend = bracketend(common->start);"
    },
    {
        "line": 122,
        "fullcodeline": "common->ovector_start = LIMIT_MATCH + sizeof(sljit_sw);"
    },
    {
        "line": 123,
        "fullcodeline": "common->optimized_cbracket = (sljit_u8 *)SLJIT_MALLOC(re->top_bracket + 1, allocator_data);"
    },
    {
        "line": 129,
        "fullcodeline": "memset(common->optimized_cbracket, 1, re->top_bracket + 1);"
    },
    {
        "line": 132,
        "fullcodeline": "SLJIT_ASSERT(*common->start == OP_BRA && ccend[-(1 + LINK_SIZE)] == OP_KET);"
    },
    {
        "line": 190,
        "fullcodeline": "SLJIT_ASSERT(!(common->req_char_ptr != 0 && common->start_used_ptr != 0));"
    },
    {
        "line": 191,
        "fullcodeline": "common->cbra_ptr = OVECTOR_START + (re->top_bracket + 1) * 2 * sizeof(sljit_sw);"
    },
    {
        "line": 193,
        "fullcodeline": "total_length = ccend - common->start;"
    },
    {
        "line": 194,
        "fullcodeline": "common->private_data_ptrs = (sljit_s32 *)SLJIT_MALLOC(total_length * (sizeof(sljit_s32) + (common->has_then ? 1 : 0)), allocator_data);"
    },
    {
        "line": 200,
        "fullcodeline": "memset(common->private_data_ptrs, 0, total_length * sizeof(sljit_s32));"
    },
    {
        "line": 202,
        "fullcodeline": "private_data_size = common->cbra_ptr + (re->top_bracket + 1) * sizeof(sljit_sw);"
    },
    {
        "line": 207,
        "fullcodeline": "set_private_data_ptrs(common, &private_data_size, ccend);"
    },
    {
        "line": 209,
        "fullcodeline": "SLJIT_ASSERT(common->early_fail_start_ptr <= common->early_fail_end_ptr);"
    },
    {
        "line": 225,
        "fullcodeline": "compiler = sljit_create_compiler(allocator_data, NULL);"
    },
    {
        "line": 232,
        "fullcodeline": "common->compiler = compiler;"
    },
    {
        "line": 235,
        "fullcodeline": "sljit_emit_enter(compiler, 0, SLJIT_ARGS1(W, W), 5, 5, 0, 0, private_data_size);"
    },
    {
        "line": 238,
        "fullcodeline": "reset_ovector(common, (re->top_bracket + 1) * 2);"
    },
    {
        "line": 242,
        "fullcodeline": "OP1(SLJIT_MOV, ARGUMENTS, 0, SLJIT_S0, 0);"
    },
    {
        "line": 243,
        "fullcodeline": "OP1(SLJIT_MOV, TMP1, 0, SLJIT_S0, 0);"
    },
    {
        "line": 244,
        "fullcodeline": "OP1(SLJIT_MOV, STR_PTR, 0, SLJIT_MEM1(TMP1), SLJIT_OFFSETOF(jit_arguments, str));"
    },
    {
        "line": 245,
        "fullcodeline": "OP1(SLJIT_MOV, STR_END, 0, SLJIT_MEM1(TMP1), SLJIT_OFFSETOF(jit_arguments, end));"
    },
    {
        "line": 246,
        "fullcodeline": "OP1(SLJIT_MOV, TMP2, 0, SLJIT_MEM1(TMP1), SLJIT_OFFSETOF(jit_arguments, stack));"
    },
    {
        "line": 247,
        "fullcodeline": "OP1(SLJIT_MOV_U32, TMP1, 0, SLJIT_MEM1(TMP1), SLJIT_OFFSETOF(jit_arguments, limit_match));"
    },
    {
        "line": 250,
        "fullcodeline": "OP2(SLJIT_ADD, TMP1, 0, TMP1, 0, SLJIT_IMM, 1);"
    },
    {
        "line": 251,
        "fullcodeline": "OP1(SLJIT_MOV, SLJIT_MEM1(SLJIT_SP), LIMIT_MATCH, TMP1, 0);"
    },
    {
        "line": 294,
        "fullcodeline": "OP1(SLJIT_MOV, SLJIT_MEM1(SLJIT_SP), OVECTOR(0), STR_PTR, 0);"
    },
    {
        "line": 296,
        "fullcodeline": "OP1(SLJIT_MOV, COUNT_MATCH, 0, SLJIT_MEM1(SLJIT_SP), LIMIT_MATCH);"
    },
    {
        "line": 315,
        "fullcodeline": "compile_matchingpath(common, common->start, ccend, &rootbacktrack);"
    },
    {
        "line": 334,
        "fullcodeline": "common->accept_label = LABEL();"
    },
    {
        "line": 339,
        "fullcodeline": "copy_ovector(common, re->top_bracket + 1);"
    },
    {
        "line": 340,
        "fullcodeline": "common->quit_label = common->abort_label = LABEL();"
    },
    {
        "line": 348,
        "fullcodeline": "sljit_emit_op0(compiler, SLJIT_SKIP_FRAMES_BEFORE_RETURN);"
    },
    {
        "line": 349,
        "fullcodeline": "sljit_emit_return(compiler, SLJIT_MOV, SLJIT_RETURN_REG, 0);"
    },
    {
        "line": 371,
        "fullcodeline": "compile_backtrackingpath(common, rootbacktrack.top);"
    },
    {
        "line": 381,
        "fullcodeline": "SLJIT_ASSERT(rootbacktrack.prev == NULL);"
    },
    {
        "line": 382,
        "fullcodeline": "reset_match_label = LABEL();"
    },
    {
        "line": 400,
        "fullcodeline": "OP1(SLJIT_MOV, STR_PTR, 0, SLJIT_MEM1(SLJIT_SP),"
    },
    {
        "line": 432,
        "fullcodeline": "OP1(SLJIT_MOV, SLJIT_RETURN_REG, 0, SLJIT_IMM, PCRE2_ERROR_NOMATCH);"
    },
    {
        "line": 433,
        "fullcodeline": "JUMPTO(SLJIT_JUMP, common->quit_label);"
    },
    {
        "line": 435,
        "fullcodeline": "flush_stubs(common);"
    },
    {
        "line": 451,
        "fullcodeline": "common->fast_forward_bc_ptr = NULL;"
    },
    {
        "line": 452,
        "fullcodeline": "common->early_fail_start_ptr = 0;"
    },
    {
        "line": 453,
        "fullcodeline": "common->early_fail_end_ptr = 0;"
    },
    {
        "line": 454,
        "fullcodeline": "common->currententry = common->entries;"
    },
    {
        "line": 455,
        "fullcodeline": "common->local_quit_available = TRUE;"
    },
    {
        "line": 456,
        "fullcodeline": "quit_label = common->quit_label;"
    },
    {
        "line": 472,
        "fullcodeline": "common->local_quit_available = FALSE;"
    },
    {
        "line": 473,
        "fullcodeline": "common->quit_label = quit_label;"
    },
    {
        "line": 477,
        "fullcodeline": "set_jumps(common->stackalloc, LABEL());"
    },
    {
        "line": 479,
        "fullcodeline": "sljit_emit_fast_enter(compiler, SLJIT_MEM1(SLJIT_SP), LOCALS0);"
    },
    {
        "line": 481,
        "fullcodeline": "SLJIT_ASSERT(TMP1 == SLJIT_R0 && STR_PTR == SLJIT_R1);"
    },
    {
        "line": 483,
        "fullcodeline": "OP1(SLJIT_MOV, SLJIT_MEM1(SLJIT_SP), LOCALS1, STR_PTR, 0);"
    },
    {
        "line": 484,
        "fullcodeline": "OP1(SLJIT_MOV, SLJIT_R0, 0, ARGUMENTS, 0);"
    },
    {
        "line": 485,
        "fullcodeline": "OP2(SLJIT_SUB, SLJIT_R1, 0, STACK_LIMIT, 0, SLJIT_IMM, STACK_GROWTH_RATE);"
    },
    {
        "line": 486,
        "fullcodeline": "OP1(SLJIT_MOV, SLJIT_R0, 0, SLJIT_MEM1(SLJIT_R0), SLJIT_OFFSETOF(jit_arguments, stack));"
    },
    {
        "line": 487,
        "fullcodeline": "OP1(SLJIT_MOV, STACK_LIMIT, 0, TMP2, 0);"
    },
    {
        "line": 489,
        "fullcodeline": "sljit_emit_icall(compiler, SLJIT_CALL, SLJIT_ARGS2(W, W, W), SLJIT_IMM, SLJIT_FUNC_ADDR(sljit_stack_resize));"
    },
    {
        "line": 491,
        "fullcodeline": "jump = CMP(SLJIT_EQUAL, SLJIT_RETURN_REG, 0, SLJIT_IMM, 0);"
    },
    {
        "line": 492,
        "fullcodeline": "OP1(SLJIT_MOV, TMP2, 0, STACK_LIMIT, 0);"
    },
    {
        "line": 493,
        "fullcodeline": "OP1(SLJIT_MOV, STACK_LIMIT, 0, SLJIT_RETURN_REG, 0);"
    },
    {
        "line": 494,
        "fullcodeline": "OP1(SLJIT_MOV, TMP1, 0, SLJIT_MEM1(SLJIT_SP), LOCALS0);"
    },
    {
        "line": 495,
        "fullcodeline": "OP1(SLJIT_MOV, STR_PTR, 0, SLJIT_MEM1(SLJIT_SP), LOCALS1);"
    },
    {
        "line": 496,
        "fullcodeline": "OP_SRC(SLJIT_FAST_RETURN, TMP1, 0);"
    },
    {
        "line": 499,
        "fullcodeline": "JUMPHERE(jump);"
    },
    {
        "line": 501,
        "fullcodeline": "OP1(SLJIT_MOV, SLJIT_RETURN_REG, 0, SLJIT_IMM, PCRE2_ERROR_JIT_STACKLIMIT);"
    },
    {
        "line": 502,
        "fullcodeline": "JUMPTO(SLJIT_JUMP, common->quit_label);"
    },
    {
        "line": 505,
        "fullcodeline": "set_jumps(common->calllimit, LABEL());"
    },
    {
        "line": 506,
        "fullcodeline": "OP1(SLJIT_MOV, SLJIT_RETURN_REG, 0, SLJIT_IMM, PCRE2_ERROR_MATCHLIMIT);"
    },
    {
        "line": 507,
        "fullcodeline": "JUMPTO(SLJIT_JUMP, common->quit_label);"
    },
    {
        "line": 604,
        "fullcodeline": "SLJIT_FREE(common->optimized_cbracket, allocator_data);"
    },
    {
        "line": 605,
        "fullcodeline": "SLJIT_FREE(common->private_data_ptrs, allocator_data);"
    },
    {
        "line": 607,
        "fullcodeline": "executable_func = sljit_generate_code(compiler);"
    },
    {
        "line": 608,
        "fullcodeline": "executable_size = sljit_get_generated_code_size(compiler);"
    },
    {
        "line": 609,
        "fullcodeline": "sljit_free_compiler(compiler);"
    },
    {
        "line": 643,
        "fullcodeline": "SLJIT_ASSERT(mode < JIT_NUMBER_OF_COMPILE_MODES);"
    },
    {
        "line": 644,
        "fullcodeline": "functions->executable_funcs[mode] = executable_func;"
    },
    {
        "line": 645,
        "fullcodeline": "functions->read_only_data_heads[mode] = common->read_only_data_head;"
    },
    {
        "line": 646,
        "fullcodeline": "functions->executable_sizes[mode] = executable_size;"
    },
    {
        "line": 69,
        "fullcodeline": "if (re->bsr_convention == PCRE2_BSR_UNICODE)"
    },
    {
        "line": 124,
        "fullcodeline": "if (!common->optimized_cbracket)"
    },
    {
        "line": 137,
        "fullcodeline": "if (!check_opcode_types(common, common->start, ccend))"
    },
    {
        "line": 144,
        "fullcodeline": "if (mode == PCRE2_JIT_COMPLETE && (re->flags & PCRE2_LASTSET) != 0 && (re->overall_options & PCRE2_NO_START_OPTIMIZE) == 0)"
    },
    {
        "line": 149,
        "fullcodeline": "if (mode != PCRE2_JIT_COMPLETE)"
    },
    {
        "line": 159,
        "fullcodeline": "if ((re->overall_options & (PCRE2_FIRSTLINE | PCRE2_USE_OFFSET_LIMIT)) != 0)"
    },
    {
        "line": 167,
        "fullcodeline": "if (common->control_head_ptr != 0)"
    },
    {
        "line": 180,
        "fullcodeline": "if ((common->ovector_start & sizeof(sljit_sw)) != 0)"
    },
    {
        "line": 183,
        "fullcodeline": "if (common->start_ptr == 0)"
    },
    {
        "line": 187,
        "fullcodeline": "if (common->capture_last_ptr != 0)"
    },
    {
        "line": 195,
        "fullcodeline": "if (!common->private_data_ptrs)"
    },
    {
        "line": 204,
        "fullcodeline": "if ((re->overall_options & PCRE2_ANCHORED) == 0 && (re->overall_options & PCRE2_NO_START_OPTIMIZE) == 0 && !common->has_skip_in_assert_back)"
    },
    {
        "line": 211,
        "fullcodeline": "if (private_data_size > SLJIT_MAX_LOCAL_SIZE)"
    },
    {
        "line": 226,
        "fullcodeline": "if (!compiler)"
    },
    {
        "line": 239,
        "fullcodeline": "if (common->req_char_ptr != 0)"
    },
    {
        "line": 253,
        "fullcodeline": "if (common->early_fail_start_ptr < common->early_fail_end_ptr)"
    },
    {
        "line": 256,
        "fullcodeline": "if (mode == PCRE2_JIT_PARTIAL_SOFT)"
    },
    {
        "line": 258,
        "fullcodeline": "if (common->mark_ptr != 0)"
    },
    {
        "line": 260,
        "fullcodeline": "if (common->control_head_ptr != 0)"
    },
    {
        "line": 264,
        "fullcodeline": "if ((re->overall_options & PCRE2_ANCHORED) == 0)"
    },
    {
        "line": 284,
        "fullcodeline": "if (mode == PCRE2_JIT_COMPLETE && re->minlength > 0 && (re->overall_options & PCRE2_NO_START_OPTIMIZE) == 0)"
    },
    {
        "line": 290,
        "fullcodeline": "if (common->req_char_ptr != 0)"
    },
    {
        "line": 297,
        "fullcodeline": "if (common->capture_last_ptr != 0)"
    },
    {
        "line": 299,
        "fullcodeline": "if (common->fast_forward_bc_ptr != NULL)"
    },
    {
        "line": 302,
        "fullcodeline": "if (common->start_ptr != OVECTOR(0))"
    },
    {
        "line": 306,
        "fullcodeline": "if (mode == PCRE2_JIT_PARTIAL_SOFT)"
    },
    {
        "line": 316,
        "fullcodeline": "if (SLJIT_UNLIKELY(sljit_get_compiler_error(compiler)))"
    },
    {
        "line": 325,
        "fullcodeline": "if ((re->overall_options & PCRE2_ENDANCHORED) != 0)"
    },
    {
        "line": 335,
        "fullcodeline": "if (common->accept != NULL)"
    },
    {
        "line": 341,
        "fullcodeline": "if (common->quit != NULL)"
    },
    {
        "line": 343,
        "fullcodeline": "if (common->abort != NULL)"
    },
    {
        "line": 345,
        "fullcodeline": "if (minlength_check_failed != NULL)"
    },
    {
        "line": 351,
        "fullcodeline": "if (common->failed_match != NULL)"
    },
    {
        "line": 359,
        "fullcodeline": "if ((re->overall_options & PCRE2_ENDANCHORED) != 0)"
    },
    {
        "line": 362,
        "fullcodeline": "if (mode != PCRE2_JIT_COMPLETE)"
    },
    {
        "line": 372,
        "fullcodeline": "if (SLJIT_UNLIKELY(sljit_get_compiler_error(compiler)))"
    },
    {
        "line": 384,
        "fullcodeline": "if (mode == PCRE2_JIT_PARTIAL_SOFT)"
    },
    {
        "line": 395,
        "fullcodeline": "if ((re->overall_options & PCRE2_ANCHORED) == 0 && common->match_end_ptr != 0)"
    },
    {
        "line": 401,
        "fullcodeline": "(common->fast_forward_bc_ptr != NULL) ? (PRIVATE_DATA(common->fast_forward_bc_ptr + 1) >> 3) : common->start_ptr);"
    },
    {
        "line": 403,
        "fullcodeline": "if ((re->overall_options & PCRE2_ANCHORED) == 0)"
    },
    {
        "line": 426,
        "fullcodeline": "if (reqcu_not_found != NULL)"
    },
    {
        "line": 429,
        "fullcodeline": "if (mode == PCRE2_JIT_PARTIAL_SOFT)"
    },
    {
        "line": 457,
        "fullcodeline": "while (common->currententry != NULL)"
    },
    {
        "line": 509,
        "fullcodeline": "if (common->revertframes != NULL)"
    },
    {
        "line": 514,
        "fullcodeline": "if (common->wordboundary != NULL)"
    },
    {
        "line": 519,
        "fullcodeline": "if (common->anynewline != NULL)"
    },
    {
        "line": 524,
        "fullcodeline": "if (common->hspace != NULL)"
    },
    {
        "line": 529,
        "fullcodeline": "if (common->vspace != NULL)"
    },
    {
        "line": 534,
        "fullcodeline": "if (common->casefulcmp != NULL)"
    },
    {
        "line": 539,
        "fullcodeline": "if (common->caselesscmp != NULL)"
    },
    {
        "line": 544,
        "fullcodeline": "if (common->reset_match != NULL)"
    },
    {
        "line": 611,
        "fullcodeline": "if (executable_func == NULL)"
    },
    {
        "line": 618,
        "fullcodeline": "if (re->executable_jit != NULL)"
    },
    {
        "line": 638,
        "fullcodeline": "if (mode == PCRE2_JIT_COMPLETE)"
    },
    {
        "line": 59,
        "fullcodeline": "case PCRE2_NEWLINE_CR: common->newline = CHAR_CR; break;"
    },
    {
        "line": 60,
        "fullcodeline": "case PCRE2_NEWLINE_LF: common->newline = CHAR_NL; break;"
    },
    {
        "line": 61,
        "fullcodeline": "case PCRE2_NEWLINE_CRLF: common->newline = (CHAR_CR << 8) | CHAR_NL; break;"
    },
    {
        "line": 62,
        "fullcodeline": "case PCRE2_NEWLINE_ANY: common->newline = (CHAR_CR << 8) | CHAR_NL; common->nltype = NLTYPE_ANY; break;"
    },
    {
        "line": 63,
        "fullcodeline": "case PCRE2_NEWLINE_ANYCRLF: common->newline = (CHAR_CR << 8) | CHAR_NL; common->nltype = NLTYPE_ANYCRLF; break;"
    },
    {
        "line": 64,
        "fullcodeline": "case PCRE2_NEWLINE_NUL: common->newline = CHAR_NUL; break;"
    },
    {
        "line": 70,
        "fullcodeline": "common->bsr_nltype = NLTYPE_ANY;"
    },
    {
        "line": 139,
        "fullcodeline": "SLJIT_FREE(common->optimized_cbracket, allocator_data);"
    },
    {
        "line": 146,
        "fullcodeline": "common->req_char_ptr = common->ovector_start;"
    },
    {
        "line": 147,
        "fullcodeline": "common->ovector_start += sizeof(sljit_sw);"
    },
    {
        "line": 151,
        "fullcodeline": "common->start_used_ptr = common->ovector_start;"
    },
    {
        "line": 152,
        "fullcodeline": "common->ovector_start += sizeof(sljit_sw);"
    },
    {
        "line": 161,
        "fullcodeline": "common->match_end_ptr = common->ovector_start;"
    },
    {
        "line": 162,
        "fullcodeline": "common->ovector_start += sizeof(sljit_sw);"
    },
    {
        "line": 169,
        "fullcodeline": "common->control_head_ptr = common->ovector_start;"
    },
    {
        "line": 170,
        "fullcodeline": "common->ovector_start += sizeof(sljit_sw);"
    },
    {
        "line": 175,
        "fullcodeline": "common->start_ptr = common->ovector_start;"
    },
    {
        "line": 176,
        "fullcodeline": "common->ovector_start += sizeof(sljit_sw);"
    },
    {
        "line": 181,
        "fullcodeline": "common->ovector_start += sizeof(sljit_sw);"
    },
    {
        "line": 184,
        "fullcodeline": "common->start_ptr = OVECTOR(0);"
    },
    {
        "line": 188,
        "fullcodeline": "memset(common->optimized_cbracket, 0, re->top_bracket + 1);"
    },
    {
        "line": 197,
        "fullcodeline": "SLJIT_FREE(common->optimized_cbracket, allocator_data);"
    },
    {
        "line": 205,
        "fullcodeline": "detect_early_fail(common, common->start, &private_data_size, 0, 0, TRUE);"
    },
    {
        "line": 213,
        "fullcodeline": "SLJIT_FREE(common->private_data_ptrs, allocator_data);"
    },
    {
        "line": 214,
        "fullcodeline": "SLJIT_FREE(common->optimized_cbracket, allocator_data);"
    },
    {
        "line": 220,
        "fullcodeline": "common->then_offsets = (sljit_u8 *)(common->private_data_ptrs + total_length);"
    },
    {
        "line": 221,
        "fullcodeline": "memset(common->then_offsets, 0, total_length);"
    },
    {
        "line": 222,
        "fullcodeline": "set_then_offsets(common, common->start, NULL);"
    },
    {
        "line": 228,
        "fullcodeline": "SLJIT_FREE(common->optimized_cbracket, allocator_data);"
    },
    {
        "line": 229,
        "fullcodeline": "SLJIT_FREE(common->private_data_ptrs, allocator_data);"
    },
    {
        "line": 240,
        "fullcodeline": "OP1(SLJIT_MOV, SLJIT_MEM1(SLJIT_SP), common->req_char_ptr, SLJIT_R0, 0);"
    },
    {
        "line": 254,
        "fullcodeline": "reset_early_fail(common);"
    },
    {
        "line": 257,
        "fullcodeline": "OP1(SLJIT_MOV, SLJIT_MEM1(SLJIT_SP), common->hit_start, SLJIT_IMM, -1);"
    },
    {
        "line": 259,
        "fullcodeline": "OP1(SLJIT_MOV, SLJIT_MEM1(SLJIT_SP), common->mark_ptr, SLJIT_IMM, 0);"
    },
    {
        "line": 261,
        "fullcodeline": "OP1(SLJIT_MOV, SLJIT_MEM1(SLJIT_SP), common->control_head_ptr, SLJIT_IMM, 0);"
    },
    {
        "line": 266,
        "fullcodeline": "mainloop_label = mainloop_entry(common);"
    },
    {
        "line": 267,
        "fullcodeline": "continue_match_label = LABEL();"
    },
    {
        "line": 286,
        "fullcodeline": "OP1(SLJIT_MOV, SLJIT_RETURN_REG, 0, SLJIT_IMM, PCRE2_ERROR_NOMATCH);"
    },
    {
        "line": 287,
        "fullcodeline": "OP2(SLJIT_ADD, TMP2, 0, STR_PTR, 0, SLJIT_IMM, IN_UCHARS(re->minlength));"
    },
    {
        "line": 288,
        "fullcodeline": "minlength_check_failed = CMP(SLJIT_GREATER, TMP2, 0, STR_END, 0);"
    },
    {
        "line": 291,
        "fullcodeline": "reqcu_not_found = search_requested_char(common, (PCRE2_UCHAR)(re->last_codeunit), (re->flags & PCRE2_LASTCASELESS) != 0, (re->flags & PCRE2_FIRSTSET) != 0);"
    },
    {
        "line": 298,
        "fullcodeline": "OP1(SLJIT_MOV, SLJIT_MEM1(SLJIT_SP), common->capture_last_ptr, SLJIT_IMM, 0);"
    },
    {
        "line": 300,
        "fullcodeline": "OP1(SLJIT_MOV, SLJIT_MEM1(SLJIT_SP), PRIVATE_DATA(common->fast_forward_bc_ptr + 1) >> 3, STR_PTR, 0);"
    },
    {
        "line": 303,
        "fullcodeline": "OP1(SLJIT_MOV, SLJIT_MEM1(SLJIT_SP), common->start_ptr, STR_PTR, 0);"
    },
    {
        "line": 308,
        "fullcodeline": "jump = CMP(SLJIT_NOT_EQUAL, SLJIT_MEM1(SLJIT_SP), common->hit_start, SLJIT_IMM, -1);"
    },
    {
        "line": 309,
        "fullcodeline": "OP1(SLJIT_MOV, SLJIT_MEM1(SLJIT_SP), common->start_used_ptr, STR_PTR, 0);"
    },
    {
        "line": 310,
        "fullcodeline": "JUMPHERE(jump);"
    },
    {
        "line": 318,
        "fullcodeline": "sljit_free_compiler(compiler);"
    },
    {
        "line": 319,
        "fullcodeline": "SLJIT_FREE(common->optimized_cbracket, allocator_data);"
    },
    {
        "line": 320,
        "fullcodeline": "SLJIT_FREE(common->private_data_ptrs, allocator_data);"
    },
    {
        "line": 321,
        "fullcodeline": "PRIV(jit_free_rodata)(common->read_only_data_head, allocator_data);"
    },
    {
        "line": 326,
        "fullcodeline": "end_anchor_failed = CMP(SLJIT_NOT_EQUAL, STR_PTR, 0, STR_END, 0);"
    },
    {
        "line": 330,
        "fullcodeline": "empty_match = CMP(SLJIT_EQUAL, STR_PTR, 0, SLJIT_MEM1(SLJIT_SP), OVECTOR(0));"
    },
    {
        "line": 331,
        "fullcodeline": "empty_match_found_label = LABEL();"
    },
    {
        "line": 336,
        "fullcodeline": "set_jumps(common->accept, common->accept_label);"
    },
    {
        "line": 342,
        "fullcodeline": "set_jumps(common->quit, common->quit_label);"
    },
    {
        "line": 344,
        "fullcodeline": "set_jumps(common->abort, common->abort_label);"
    },
    {
        "line": 346,
        "fullcodeline": "SET_LABEL(minlength_check_failed, common->abort_label);"
    },
    {
        "line": 353,
        "fullcodeline": "SLJIT_ASSERT(common->mode == PCRE2_JIT_COMPLETE);"
    },
    {
        "line": 354,
        "fullcodeline": "set_jumps(common->failed_match, LABEL());"
    },
    {
        "line": 355,
        "fullcodeline": "OP1(SLJIT_MOV, SLJIT_RETURN_REG, 0, SLJIT_IMM, PCRE2_ERROR_NOMATCH);"
    },
    {
        "line": 356,
        "fullcodeline": "JUMPTO(SLJIT_JUMP, common->abort_label);"
    },
    {
        "line": 360,
        "fullcodeline": "JUMPHERE(end_anchor_failed);"
    },
    {
        "line": 364,
        "fullcodeline": "common->partialmatchlabel = LABEL();"
    },
    {
        "line": 365,
        "fullcodeline": "set_jumps(common->partialmatch, common->partialmatchlabel);"
    },
    {
        "line": 366,
        "fullcodeline": "return_with_partial_match(common, common->quit_label);"
    },
    {
        "line": 370,
        "fullcodeline": "empty_match_backtrack_label = LABEL();"
    },
    {
        "line": 374,
        "fullcodeline": "sljit_free_compiler(compiler);"
    },
    {
        "line": 375,
        "fullcodeline": "SLJIT_FREE(common->optimized_cbracket, allocator_data);"
    },
    {
        "line": 376,
        "fullcodeline": "SLJIT_FREE(common->private_data_ptrs, allocator_data);"
    },
    {
        "line": 377,
        "fullcodeline": "PRIV(jit_free_rodata)(common->read_only_data_head, allocator_data);"
    },
    {
        "line": 387,
        "fullcodeline": "jump = CMP(SLJIT_NOT_EQUAL, SLJIT_MEM1(SLJIT_SP), common->hit_start, SLJIT_IMM, 0);"
    },
    {
        "line": 388,
        "fullcodeline": "OP1(SLJIT_MOV, TMP1, 0, SLJIT_MEM1(SLJIT_SP), common->start_ptr);"
    },
    {
        "line": 389,
        "fullcodeline": "OP1(SLJIT_MOV, SLJIT_MEM1(SLJIT_SP), common->start_used_ptr, SLJIT_IMM, -1);"
    },
    {
        "line": 390,
        "fullcodeline": "OP1(SLJIT_MOV, SLJIT_MEM1(SLJIT_SP), common->hit_start, TMP1, 0);"
    },
    {
        "line": 391,
        "fullcodeline": "JUMPHERE(jump);"
    },
    {
        "line": 397,
        "fullcodeline": "OP1(SLJIT_MOV, TMP1, 0, SLJIT_MEM1(SLJIT_SP), common->match_end_ptr);"
    },
    {
        "line": 427,
        "fullcodeline": "set_jumps(reqcu_not_found, LABEL());"
    },
    {
        "line": 430,
        "fullcodeline": "CMPTO(SLJIT_NOT_EQUAL, SLJIT_MEM1(SLJIT_SP), common->hit_start, SLJIT_IMM, -1, common->partialmatchlabel);"
    },
    {
        "line": 439,
        "fullcodeline": "JUMPHERE(empty_match);"
    },
    {
        "line": 440,
        "fullcodeline": "OP1(SLJIT_MOV, TMP1, 0, ARGUMENTS, 0);"
    },
    {
        "line": 441,
        "fullcodeline": "OP1(SLJIT_MOV_U32, TMP2, 0, SLJIT_MEM1(TMP1), SLJIT_OFFSETOF(jit_arguments, options));"
    },
    {
        "line": 442,
        "fullcodeline": "OP2U(SLJIT_AND | SLJIT_SET_Z, TMP2, 0, SLJIT_IMM, PCRE2_NOTEMPTY);"
    },
    {
        "line": 443,
        "fullcodeline": "JUMPTO(SLJIT_NOT_ZERO, empty_match_backtrack_label);"
    },
    {
        "line": 444,
        "fullcodeline": "OP2U(SLJIT_AND | SLJIT_SET_Z, TMP2, 0, SLJIT_IMM, PCRE2_NOTEMPTY_ATSTART);"
    },
    {
        "line": 445,
        "fullcodeline": "JUMPTO(SLJIT_ZERO, empty_match_found_label);"
    },
    {
        "line": 446,
        "fullcodeline": "OP1(SLJIT_MOV, TMP2, 0, SLJIT_MEM1(TMP1), SLJIT_OFFSETOF(jit_arguments, str));"
    },
    {
        "line": 447,
        "fullcodeline": "CMPTO(SLJIT_NOT_EQUAL, TMP2, 0, STR_PTR, 0, empty_match_found_label);"
    },
    {
        "line": 448,
        "fullcodeline": "JUMPTO(SLJIT_JUMP, empty_match_backtrack_label);"
    },
    {
        "line": 460,
        "fullcodeline": "compile_recurse(common);"
    },
    {
        "line": 469,
        "fullcodeline": "flush_stubs(common);"
    },
    {
        "line": 511,
        "fullcodeline": "set_jumps(common->revertframes, LABEL());"
    },
    {
        "line": 512,
        "fullcodeline": "do_revertframes(common);"
    },
    {
        "line": 516,
        "fullcodeline": "set_jumps(common->wordboundary, LABEL());"
    },
    {
        "line": 517,
        "fullcodeline": "check_wordboundary(common);"
    },
    {
        "line": 521,
        "fullcodeline": "set_jumps(common->anynewline, LABEL());"
    },
    {
        "line": 522,
        "fullcodeline": "check_anynewline(common);"
    },
    {
        "line": 526,
        "fullcodeline": "set_jumps(common->hspace, LABEL());"
    },
    {
        "line": 527,
        "fullcodeline": "check_hspace(common);"
    },
    {
        "line": 531,
        "fullcodeline": "set_jumps(common->vspace, LABEL());"
    },
    {
        "line": 532,
        "fullcodeline": "check_vspace(common);"
    },
    {
        "line": 536,
        "fullcodeline": "set_jumps(common->casefulcmp, LABEL());"
    },
    {
        "line": 537,
        "fullcodeline": "do_casefulcmp(common);"
    },
    {
        "line": 541,
        "fullcodeline": "set_jumps(common->caselesscmp, LABEL());"
    },
    {
        "line": 542,
        "fullcodeline": "do_caselesscmp(common);"
    },
    {
        "line": 546,
        "fullcodeline": "set_jumps(common->reset_match, LABEL());"
    },
    {
        "line": 547,
        "fullcodeline": "do_reset_match(common, (re->top_bracket + 1) * 2);"
    },
    {
        "line": 548,
        "fullcodeline": "CMPTO(SLJIT_GREATER, STR_PTR, 0, TMP1, 0, continue_match_label);"
    },
    {
        "line": 549,
        "fullcodeline": "OP1(SLJIT_MOV, STR_PTR, 0, TMP1, 0);"
    },
    {
        "line": 550,
        "fullcodeline": "JUMPTO(SLJIT_JUMP, reset_match_label);"
    },
    {
        "line": 613,
        "fullcodeline": "PRIV(jit_free_rodata)(common->read_only_data_head, allocator_data);"
    },
    {
        "line": 619,
        "fullcodeline": "functions = (executable_functions *)re->executable_jit;"
    },
    {
        "line": 639,
        "fullcodeline": "mode = 0;"
    },
    {
        "line": 153,
        "fullcodeline": "if (mode == PCRE2_JIT_PARTIAL_SOFT)"
    },
    {
        "line": 269,
        "fullcodeline": "if ((re->overall_options & PCRE2_NO_START_OPTIMIZE) == 0)"
    },
    {
        "line": 282,
        "fullcodeline": "continue_match_label = LABEL();"
    },
    {
        "line": 405,
        "fullcodeline": "if (common->ff_newline_shortcut != NULL)"
    },
    {
        "line": 461,
        "fullcodeline": "if (SLJIT_UNLIKELY(sljit_get_compiler_error(compiler)))"
    },
    {
        "line": 622,
        "fullcodeline": "functions = SLJIT_MALLOC(sizeof(executable_functions), allocator_data);"
    },
    {
        "line": 631,
        "fullcodeline": "memset(functions, 0, sizeof(executable_functions));"
    },
    {
        "line": 632,
        "fullcodeline": "functions->top_bracket = re->top_bracket + 1;"
    },
    {
        "line": 633,
        "fullcodeline": "functions->limit_match = re->limit_match;"
    },
    {
        "line": 634,
        "fullcodeline": "re->executable_jit = functions;"
    },
    {
        "line": 641,
        "fullcodeline": "mode = (mode == PCRE2_JIT_PARTIAL_SOFT) ? 1 : 2;"
    },
    {
        "line": 71,
        "fullcodeline": "else if (re->bsr_convention == PCRE2_BSR_ANYCRLF)"
    },
    {
        "line": 155,
        "fullcodeline": "common->hit_start = common->ovector_start;"
    },
    {
        "line": 156,
        "fullcodeline": "common->ovector_start += sizeof(sljit_sw);"
    },
    {
        "line": 312,
        "fullcodeline": "else if (mode == PCRE2_JIT_PARTIAL_HARD)"
    },
    {
        "line": 463,
        "fullcodeline": "sljit_free_compiler(compiler);"
    },
    {
        "line": 464,
        "fullcodeline": "SLJIT_FREE(common->optimized_cbracket, allocator_data);"
    },
    {
        "line": 465,
        "fullcodeline": "SLJIT_FREE(common->private_data_ptrs, allocator_data);"
    },
    {
        "line": 466,
        "fullcodeline": "PRIV(jit_free_rodata)(common->read_only_data_head, allocator_data);"
    },
    {
        "line": 623,
        "fullcodeline": "if (functions == NULL)"
    },
    {
        "line": 72,
        "fullcodeline": "common->bsr_nltype = NLTYPE_ANYCRLF;"
    },
    {
        "line": 271,
        "fullcodeline": "if (mode == PCRE2_JIT_COMPLETE && fast_forward_first_n_chars(common))"
    },
    {
        "line": 313,
        "fullcodeline": "OP1(SLJIT_MOV, SLJIT_MEM1(SLJIT_SP), common->start_used_ptr, STR_PTR, 0);"
    },
    {
        "line": 408,
        "fullcodeline": "if ((re->overall_options & PCRE2_FIRSTLINE) == 0)"
    },
    {
        "line": 422,
        "fullcodeline": "CMPTO(SLJIT_LESS, STR_PTR, 0, (common->match_end_ptr == 0) ? STR_END : TMP1, 0, mainloop_label);"
    },
    {
        "line": 627,
        "fullcodeline": "sljit_free_code(executable_func, NULL);"
    },
    {
        "line": 628,
        "fullcodeline": "PRIV(jit_free_rodata)(common->read_only_data_head, allocator_data);"
    },
    {
        "line": 78,
        "fullcodeline": "common->bsr_nltype = NLTYPE_ANY;"
    },
    {
        "line": 410,
        "fullcodeline": "if (common->match_end_ptr != 0)"
    },
    {
        "line": 273,
        "fullcodeline": "else if ((re->flags & PCRE2_FIRSTSET) != 0)"
    },
    {
        "line": 412,
        "fullcodeline": "OP1(SLJIT_MOV, TMP3, 0, STR_END, 0);"
    },
    {
        "line": 413,
        "fullcodeline": "OP1(SLJIT_MOV, STR_END, 0, TMP1, 0);"
    },
    {
        "line": 414,
        "fullcodeline": "CMPTO(SLJIT_LESS, STR_PTR, 0, TMP1, 0, common->ff_newline_shortcut);"
    },
    {
        "line": 415,
        "fullcodeline": "OP1(SLJIT_MOV, STR_END, 0, TMP3, 0);"
    },
    {
        "line": 274,
        "fullcodeline": "fast_forward_first_char(common);"
    },
    {
        "line": 418,
        "fullcodeline": "CMPTO(SLJIT_LESS, STR_PTR, 0, STR_END, 0, common->ff_newline_shortcut);"
    },
    {
        "line": 275,
        "fullcodeline": "else if ((re->flags & PCRE2_STARTLINE) != 0)"
    },
    {
        "line": 276,
        "fullcodeline": "fast_forward_newline(common);"
    },
    {
        "line": 277,
        "fullcodeline": "else if ((re->flags & PCRE2_FIRSTMAPSET) != 0)"
    },
    {
        "line": 278,
        "fullcodeline": "fast_forward_start_bits(common);"
    }
]