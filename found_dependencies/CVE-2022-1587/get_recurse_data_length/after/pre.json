[
    {
        "line": 4,
        "fullcodeline": "int length = 1;"
    },
    {
        "line": 7,
        "fullcodeline": "BOOL quit_found = FALSE;"
    },
    {
        "line": 8,
        "fullcodeline": "BOOL accept_found = FALSE;"
    },
    {
        "line": 9,
        "fullcodeline": "BOOL setsom_found = FALSE;"
    },
    {
        "line": 10,
        "fullcodeline": "BOOL setmark_found = FALSE;"
    },
    {
        "line": 11,
        "fullcodeline": "BOOL control_head_found = FALSE;"
    },
    {
        "line": 13,
        "fullcodeline": "memset(common->recurse_bitset, 0, common->recurse_bitset_size);"
    },
    {
        "line": 236,
        "fullcodeline": "SLJIT_ASSERT(cc == ccend);"
    },
    {
        "line": 248,
        "fullcodeline": "*needs_control_head = control_head_found;"
    },
    {
        "line": 249,
        "fullcodeline": "*has_quit = quit_found;"
    },
    {
        "line": 250,
        "fullcodeline": "*has_accept = accept_found;"
    },
    {
        "line": 21,
        "fullcodeline": "while (cc < ccend)"
    },
    {
        "line": 23,
        "fullcodeline": "size = 0;"
    },
    {
        "line": 239,
        "fullcodeline": "length++;"
    },
    {
        "line": 27,
        "fullcodeline": "SLJIT_ASSERT(common->has_set_som);"
    },
    {
        "line": 28,
        "fullcodeline": "setsom_found = TRUE;"
    },
    {
        "line": 29,
        "fullcodeline": "cc += 1;"
    },
    {
        "line": 39,
        "fullcodeline": "cc += 1 + LINK_SIZE;"
    },
    {
        "line": 43,
        "fullcodeline": "offset = PRIVATE_DATA(cc);"
    },
    {
        "line": 51,
        "fullcodeline": "cc += 1 + LINK_SIZE;"
    },
    {
        "line": 66,
        "fullcodeline": "SLJIT_ASSERT(PRIVATE_DATA(cc) != 0);"
    },
    {
        "line": 69,
        "fullcodeline": "cc += 1 + LINK_SIZE;"
    },
    {
        "line": 74,
        "fullcodeline": "offset = GET2(cc, 1 + LINK_SIZE);"
    },
    {
        "line": 84,
        "fullcodeline": "cc += 1 + LINK_SIZE + IMM2_SIZE;"
    },
    {
        "line": 89,
        "fullcodeline": "offset = GET2(cc, 1 + LINK_SIZE);"
    },
    {
        "line": 101,
        "fullcodeline": "cc += 1 + LINK_SIZE + IMM2_SIZE;"
    },
    {
        "line": 106,
        "fullcodeline": "alternative = cc + GET(cc, 1);"
    },
    {
        "line": 109,
        "fullcodeline": "cc += 1 + LINK_SIZE;"
    },
    {
        "line": 179,
        "fullcodeline": "size = (*cc == OP_XCLASS) ? GET(cc, 1) : 1 + 32 / (int)sizeof(PCRE2_UCHAR);"
    },
    {
        "line": 184,
        "fullcodeline": "offset = PRIVATE_DATA(cc);"
    },
    {
        "line": 187,
        "fullcodeline": "cc += size;"
    },
    {
        "line": 194,
        "fullcodeline": "SLJIT_ASSERT(common->mark_ptr != 0);"
    },
    {
        "line": 202,
        "fullcodeline": "cc += 1 + 2 + cc[1];"
    },
    {
        "line": 208,
        "fullcodeline": "quit_found = TRUE;"
    },
    {
        "line": 209,
        "fullcodeline": "cc++;"
    },
    {
        "line": 213,
        "fullcodeline": "quit_found = TRUE;"
    },
    {
        "line": 214,
        "fullcodeline": "cc += 1 + 2 + cc[1];"
    },
    {
        "line": 218,
        "fullcodeline": "SLJIT_ASSERT(common->control_head_ptr != 0);"
    },
    {
        "line": 219,
        "fullcodeline": "quit_found = TRUE;"
    },
    {
        "line": 220,
        "fullcodeline": "control_head_found = TRUE;"
    },
    {
        "line": 221,
        "fullcodeline": "cc++;"
    },
    {
        "line": 226,
        "fullcodeline": "accept_found = TRUE;"
    },
    {
        "line": 227,
        "fullcodeline": "cc++;"
    },
    {
        "line": 231,
        "fullcodeline": "cc = next_opcode(common, cc);"
    },
    {
        "line": 232,
        "fullcodeline": "SLJIT_ASSERT(cc != NULL);"
    },
    {
        "line": 243,
        "fullcodeline": "length++;"
    },
    {
        "line": 245,
        "fullcodeline": "length++;"
    },
    {
        "line": 35,
        "fullcodeline": "if (common->mark_ptr != 0)"
    },
    {
        "line": 37,
        "fullcodeline": "if (common->capture_last_ptr != 0 && recurse_check_bit(common, common->capture_last_ptr))"
    },
    {
        "line": 44,
        "fullcodeline": "if (offset != 0)"
    },
    {
        "line": 67,
        "fullcodeline": "if (recurse_check_bit(common, PRIVATE_DATA(cc)))"
    },
    {
        "line": 75,
        "fullcodeline": "if (recurse_check_bit(common, OVECTOR(offset << 1)))"
    },
    {
        "line": 80,
        "fullcodeline": "if (common->optimized_cbracket[offset] == 0 && recurse_check_bit(common, OVECTOR_PRIV(offset)))"
    },
    {
        "line": 82,
        "fullcodeline": "if (common->capture_last_ptr != 0 && recurse_check_bit(common, common->capture_last_ptr))"
    },
    {
        "line": 90,
        "fullcodeline": "if (recurse_check_bit(common, OVECTOR(offset << 1)))"
    },
    {
        "line": 95,
        "fullcodeline": "if (recurse_check_bit(common, OVECTOR_PRIV(offset)))"
    },
    {
        "line": 97,
        "fullcodeline": "if (recurse_check_bit(common, PRIVATE_DATA(cc)))"
    },
    {
        "line": 99,
        "fullcodeline": "if (common->capture_last_ptr != 0 && recurse_check_bit(common, common->capture_last_ptr))"
    },
    {
        "line": 107,
        "fullcodeline": "if ((*alternative == OP_KETRMAX || *alternative == OP_KETRMIN) && recurse_check_bit(common, PRIVATE_DATA(cc)))"
    },
    {
        "line": 185,
        "fullcodeline": "if (offset != 0 && recurse_check_bit(common, offset))"
    },
    {
        "line": 195,
        "fullcodeline": "if (!setmark_found)"
    },
    {
        "line": 197,
        "fullcodeline": "if (common->control_head_ptr != 0)"
    },
    {
        "line": 199,
        "fullcodeline": "if (*cc != OP_MARK)"
    },
    {
        "line": 34,
        "fullcodeline": "setsom_found = TRUE;"
    },
    {
        "line": 36,
        "fullcodeline": "setmark_found = TRUE;"
    },
    {
        "line": 38,
        "fullcodeline": "length++;"
    },
    {
        "line": 48,
        "fullcodeline": "SLJIT_ASSERT(PRIVATE_DATA(cc + 1) != 0);"
    },
    {
        "line": 49,
        "fullcodeline": "cc += PRIVATE_DATA(cc + 1);"
    },
    {
        "line": 68,
        "fullcodeline": "length++;"
    },
    {
        "line": 77,
        "fullcodeline": "SLJIT_ASSERT(recurse_check_bit(common, OVECTOR((offset << 1) + 1)));"
    },
    {
        "line": 78,
        "fullcodeline": "length += 2;"
    },
    {
        "line": 81,
        "fullcodeline": "length++;"
    },
    {
        "line": 83,
        "fullcodeline": "length++;"
    },
    {
        "line": 92,
        "fullcodeline": "SLJIT_ASSERT(recurse_check_bit(common, OVECTOR((offset << 1) + 1)));"
    },
    {
        "line": 93,
        "fullcodeline": "length += 2;"
    },
    {
        "line": 96,
        "fullcodeline": "length++;"
    },
    {
        "line": 98,
        "fullcodeline": "length++;"
    },
    {
        "line": 100,
        "fullcodeline": "length++;"
    },
    {
        "line": 108,
        "fullcodeline": "length++;"
    },
    {
        "line": 186,
        "fullcodeline": "length += get_class_iterator_size(cc + size);"
    },
    {
        "line": 196,
        "fullcodeline": "setmark_found = TRUE;"
    },
    {
        "line": 198,
        "fullcodeline": "control_head_found = TRUE;"
    },
    {
        "line": 200,
        "fullcodeline": "quit_found = TRUE;"
    },
    {
        "line": 46,
        "fullcodeline": "if (recurse_check_bit(common, offset))"
    },
    {
        "line": 47,
        "fullcodeline": "length++;"
    }
]