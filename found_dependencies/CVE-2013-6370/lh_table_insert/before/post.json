[
    {
        "line": 5,
        "fullcodeline": "t->inserts++;"
    },
    {
        "line": 8,
        "fullcodeline": "h = t->hash_fn(k);"
    },
    {
        "line": 9,
        "fullcodeline": "n = h % t->size;"
    },
    {
        "line": 17,
        "fullcodeline": "t->table[n].k = k;"
    },
    {
        "line": 18,
        "fullcodeline": "t->table[n].v = v;"
    },
    {
        "line": 19,
        "fullcodeline": "t->count++;"
    },
    {
        "line": 6,
        "fullcodeline": "if(t->count >= t->size * LH_LOAD_FACTOR) lh_table_resize(t, t->size * 2);"
    },
    {
        "line": 21,
        "fullcodeline": "if(t->head == NULL) {"
    },
    {
        "line": 13,
        "fullcodeline": "t->collisions++;"
    },
    {
        "line": 22,
        "fullcodeline": "t->head = t->tail = &t->table[n];"
    },
    {
        "line": 23,
        "fullcodeline": "t->table[n].next = t->table[n].prev = NULL;"
    },
    {
        "line": 12,
        "fullcodeline": "if(t->table[n].k == LH_EMPTY || t->table[n].k == LH_FREED) break;"
    },
    {
        "line": 14,
        "fullcodeline": "if ((int)++n == t->size) n = 0;"
    },
    {
        "line": 25,
        "fullcodeline": "t->tail->next = &t->table[n];"
    },
    {
        "line": 26,
        "fullcodeline": "t->table[n].prev = t->tail;"
    },
    {
        "line": 27,
        "fullcodeline": "t->table[n].next = NULL;"
    },
    {
        "line": 28,
        "fullcodeline": "t->tail = &t->table[n];"
    }
]