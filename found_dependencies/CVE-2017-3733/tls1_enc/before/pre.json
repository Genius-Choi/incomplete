[
    {
        "line": 4,
        "fullcodeline": "size_t reclen[SSL_MAX_PIPELINES];"
    },
    {
        "line": 5,
        "fullcodeline": "unsigned char buf[SSL_MAX_PIPELINES][EVP_AEAD_TLS1_AAD_LEN];"
    },
    {
        "line": 6,
        "fullcodeline": "int bs, i, j, k, pad = 0, ret, mac_size = 0;"
    },
    {
        "line": 15,
        "fullcodeline": "ds = s->enc_write_ctx;"
    },
    {
        "line": 55,
        "fullcodeline": "if ((s->session == NULL) || (ds == NULL) || (enc == NULL)) {"
    },
    {
        "line": 60,
        "fullcodeline": "ret = 1;"
    },
    {
        "line": 11,
        "fullcodeline": "if (EVP_MD_CTX_md(s->write_hash)) {"
    },
    {
        "line": 16,
        "fullcodeline": "if (s->enc_write_ctx == NULL)"
    },
    {
        "line": 48,
        "fullcodeline": "ds = s->enc_read_ctx;"
    },
    {
        "line": 56,
        "fullcodeline": "for (ctr = 0; ctr < n_recs; ctr++) {"
    },
    {
        "line": 62,
        "fullcodeline": "bs = EVP_CIPHER_block_size(EVP_CIPHER_CTX_cipher(ds));"
    },
    {
        "line": 159,
        "fullcodeline": "i = EVP_Cipher(ds, recs[0].data, recs[0].input, reclen[0]);"
    },
    {
        "line": 181,
        "fullcodeline": "ret = 1;"
    },
    {
        "line": 12,
        "fullcodeline": "int n = EVP_MD_CTX_size(s->write_hash);"
    },
    {
        "line": 13,
        "fullcodeline": "OPENSSL_assert(n >= 0);"
    },
    {
        "line": 17,
        "fullcodeline": "enc = NULL;"
    },
    {
        "line": 44,
        "fullcodeline": "if (EVP_MD_CTX_md(s->read_hash)) {"
    },
    {
        "line": 49,
        "fullcodeline": "if (s->enc_read_ctx == NULL)"
    },
    {
        "line": 57,
        "fullcodeline": "memmove(recs[ctr].data, recs[ctr].input, recs[ctr].length);"
    },
    {
        "line": 64,
        "fullcodeline": "if (n_recs > 1) {"
    },
    {
        "line": 75,
        "fullcodeline": "for (ctr = 0; ctr < n_recs; ctr++) {"
    },
    {
        "line": 135,
        "fullcodeline": "if (n_recs > 1) {"
    },
    {
        "line": 165,
        "fullcodeline": "if (send == 0) {"
    },
    {
        "line": 184,
        "fullcodeline": "if ((bs != 1) && !send) {"
    },
    {
        "line": 199,
        "fullcodeline": "if (pad && !send) {"
    },
    {
        "line": 20,
        "fullcodeline": "enc = EVP_CIPHER_CTX_cipher(s->enc_write_ctx);"
    },
    {
        "line": 45,
        "fullcodeline": "int n = EVP_MD_CTX_size(s->read_hash);"
    },
    {
        "line": 50,
        "fullcodeline": "enc = NULL;"
    },
    {
        "line": 76,
        "fullcodeline": "reclen[ctr] = recs[ctr].length;"
    },
    {
        "line": 136,
        "fullcodeline": "unsigned char *data[SSL_MAX_PIPELINES];"
    },
    {
        "line": 160,
        "fullcodeline": "if ((EVP_CIPHER_flags(EVP_CIPHER_CTX_cipher(ds))"
    },
    {
        "line": 162,
        "fullcodeline": "? (i < 0)"
    },
    {
        "line": 163,
        "fullcodeline": ": (i == 0))"
    },
    {
        "line": 182,
        "fullcodeline": "if (!SSL_USE_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)"
    },
    {
        "line": 183,
        "fullcodeline": "mac_size = EVP_MD_CTX_size(s->read_hash);"
    },
    {
        "line": 22,
        "fullcodeline": "if (SSL_USE_EXPLICIT_IV(s)"
    },
    {
        "line": 27,
        "fullcodeline": "if (ivlen > 1) {"
    },
    {
        "line": 46,
        "fullcodeline": "OPENSSL_assert(n >= 0);"
    },
    {
        "line": 52,
        "fullcodeline": "enc = EVP_CIPHER_CTX_cipher(s->enc_read_ctx);"
    },
    {
        "line": 78,
        "fullcodeline": "if (EVP_CIPHER_flags(EVP_CIPHER_CTX_cipher(ds))"
    },
    {
        "line": 130,
        "fullcodeline": "if (!send) {"
    },
    {
        "line": 139,
        "fullcodeline": "for (ctr = 0; ctr < n_recs; ctr++) {"
    },
    {
        "line": 147,
        "fullcodeline": "for (ctr = 0; ctr < n_recs; ctr++) {"
    },
    {
        "line": 164,
        "fullcodeline": "return -1;          /* AEAD can fail to verify MAC */"
    },
    {
        "line": 166,
        "fullcodeline": "if (EVP_CIPHER_mode(enc) == EVP_CIPH_GCM_MODE) {"
    },
    {
        "line": 186,
        "fullcodeline": "for (ctr = 0; ctr < n_recs; ctr++) {"
    },
    {
        "line": 200,
        "fullcodeline": "for (ctr = 0; ctr < n_recs; ctr++) {"
    },
    {
        "line": 23,
        "fullcodeline": "&& EVP_CIPHER_mode(enc) == EVP_CIPH_CBC_MODE)"
    },
    {
        "line": 24,
        "fullcodeline": "ivlen = EVP_CIPHER_iv_length(enc);"
    },
    {
        "line": 65,
        "fullcodeline": "if (!(EVP_CIPHER_flags(EVP_CIPHER_CTX_cipher(ds))"
    },
    {
        "line": 82,
        "fullcodeline": "seq = send ? RECORD_LAYER_get_write_sequence(&s->rlayer)"
    },
    {
        "line": 102,
        "fullcodeline": "buf[ctr][8] = recs[ctr].type;"
    },
    {
        "line": 103,
        "fullcodeline": "buf[ctr][9] = (unsigned char)(s->version >> 8);"
    },
    {
        "line": 104,
        "fullcodeline": "buf[ctr][10] = (unsigned char)(s->version);"
    },
    {
        "line": 105,
        "fullcodeline": "buf[ctr][11] = recs[ctr].length >> 8;"
    },
    {
        "line": 106,
        "fullcodeline": "buf[ctr][12] = recs[ctr].length & 0xff;"
    },
    {
        "line": 107,
        "fullcodeline": "pad = EVP_CIPHER_CTX_ctrl(ds, EVP_CTRL_AEAD_TLS1_AAD,"
    },
    {
        "line": 140,
        "fullcodeline": "data[ctr] = recs[ctr].data;"
    },
    {
        "line": 142,
        "fullcodeline": "if (EVP_CIPHER_CTX_ctrl(ds, EVP_CTRL_SET_PIPELINE_OUTPUT_BUFS,"
    },
    {
        "line": 144,
        "fullcodeline": "SSLerr(SSL_F_TLS1_ENC, SSL_R_PIPELINE_FAILURE);"
    },
    {
        "line": 148,
        "fullcodeline": "data[ctr] = recs[ctr].input;"
    },
    {
        "line": 150,
        "fullcodeline": "if (EVP_CIPHER_CTX_ctrl(ds, EVP_CTRL_SET_PIPELINE_INPUT_BUFS,"
    },
    {
        "line": 152,
        "fullcodeline": "|| EVP_CIPHER_CTX_ctrl(ds, EVP_CTRL_SET_PIPELINE_INPUT_LENS,"
    },
    {
        "line": 187,
        "fullcodeline": "tmpret = tls1_cbc_remove_padding(s, &recs[ctr], bs, mac_size);"
    },
    {
        "line": 195,
        "fullcodeline": "ret = constant_time_select_int(constant_time_eq_int(tmpret, 1),"
    },
    {
        "line": 26,
        "fullcodeline": "ivlen = 0;"
    },
    {
        "line": 28,
        "fullcodeline": "for (ctr = 0; ctr < n_recs; ctr++) {"
    },
    {
        "line": 72,
        "fullcodeline": "return -1;"
    },
    {
        "line": 85,
        "fullcodeline": "if (SSL_IS_DTLS(s)) {"
    },
    {
        "line": 109,
        "fullcodeline": "if (pad <= 0)"
    },
    {
        "line": 155,
        "fullcodeline": "return -1;"
    },
    {
        "line": 167,
        "fullcodeline": "for (ctr = 0; ctr < n_recs; ctr++) {"
    },
    {
        "line": 193,
        "fullcodeline": "if (tmpret == 0)"
    },
    {
        "line": 83,
        "fullcodeline": ": RECORD_LAYER_get_read_sequence(&s->rlayer);"
    },
    {
        "line": 87,
        "fullcodeline": "unsigned char dtlsseq[9], *p = dtlsseq;"
    },
    {
        "line": 89,
        "fullcodeline": "s2n(send ? DTLS_RECORD_LAYER_get_w_epoch(&s->rlayer) :"
    },
    {
        "line": 91,
        "fullcodeline": "memcpy(p, &seq[2], 6);"
    },
    {
        "line": 92,
        "fullcodeline": "memcpy(buf[ctr], dtlsseq, 8);"
    },
    {
        "line": 113,
        "fullcodeline": "reclen[ctr] += pad;"
    },
    {
        "line": 117,
        "fullcodeline": "} else if ((bs != 1) && send) {"
    },
    {
        "line": 131,
        "fullcodeline": "if (reclen[ctr] == 0 || reclen[ctr] % bs != 0)"
    },
    {
        "line": 172,
        "fullcodeline": "} else if (EVP_CIPHER_mode(enc) == EVP_CIPH_CCM_MODE) {"
    },
    {
        "line": 196,
        "fullcodeline": "ret, -1);"
    },
    {
        "line": 29,
        "fullcodeline": "if (recs[ctr].data != recs[ctr].input) {"
    },
    {
        "line": 94,
        "fullcodeline": "memcpy(buf[ctr], seq, 8);"
    },
    {
        "line": 110,
        "fullcodeline": "return -1;"
    },
    {
        "line": 118,
        "fullcodeline": "i = bs - ((int)reclen[ctr] % bs);"
    },
    {
        "line": 123,
        "fullcodeline": "j = i - 1;"
    },
    {
        "line": 126,
        "fullcodeline": "reclen[ctr] += i;"
    },
    {
        "line": 34,
        "fullcodeline": "SSLerr(SSL_F_TLS1_ENC, ERR_R_INTERNAL_ERROR);"
    },
    {
        "line": 90,
        "fullcodeline": "DTLS_RECORD_LAYER_get_r_epoch(&s->rlayer), p);"
    },
    {
        "line": 95,
        "fullcodeline": "for (i = 7; i >= 0; i--) { /* increment */"
    },
    {
        "line": 124,
        "fullcodeline": "for (k = (int)reclen[ctr]; k < (int)(reclen[ctr] + i); k++)"
    },
    {
        "line": 125,
        "fullcodeline": "recs[ctr].input[k] = j;"
    },
    {
        "line": 173,
        "fullcodeline": "for (ctr = 0; ctr < n_recs; ctr++) {"
    },
    {
        "line": 35,
        "fullcodeline": "return -1;"
    },
    {
        "line": 96,
        "fullcodeline": "++seq[i];"
    },
    {
        "line": 36,
        "fullcodeline": "} else if (RAND_bytes(recs[ctr].input, ivlen) <= 0) {"
    },
    {
        "line": 97,
        "fullcodeline": "if (seq[i] != 0)"
    },
    {
        "line": 38,
        "fullcodeline": "return -1;"
    }
]