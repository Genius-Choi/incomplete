[
    {
        "line": 59,
        "fullcodeline": "assert(image_info != (const ImageInfo *) NULL);"
    },
    {
        "line": 60,
        "fullcodeline": "assert(image_info->signature == MagickCoreSignature);"
    },
    {
        "line": 61,
        "fullcodeline": "assert(image != (Image *) NULL);"
    },
    {
        "line": 62,
        "fullcodeline": "assert(image->signature == MagickCoreSignature);"
    },
    {
        "line": 65,
        "fullcodeline": "assert(exception != (ExceptionInfo *) NULL);"
    },
    {
        "line": 66,
        "fullcodeline": "assert(exception->signature == MagickCoreSignature);"
    },
    {
        "line": 67,
        "fullcodeline": "status=OpenBlob(image_info,image,WriteBinaryBlobMode,exception);"
    },
    {
        "line": 70,
        "fullcodeline": "quantize_info=AcquireQuantizeInfo(image_info);"
    },
    {
        "line": 71,
        "fullcodeline": "flags=0;"
    },
    {
        "line": 72,
        "fullcodeline": "currentOffset=0;"
    },
    {
        "line": 73,
        "fullcodeline": "transparentIndex=0;"
    },
    {
        "line": 74,
        "fullcodeline": "transpix.red=0.0;"
    },
    {
        "line": 75,
        "fullcodeline": "transpix.green=0.0;"
    },
    {
        "line": 76,
        "fullcodeline": "transpix.blue=0.0;"
    },
    {
        "line": 78,
        "fullcodeline": "one=1;"
    },
    {
        "line": 79,
        "fullcodeline": "version=0;"
    },
    {
        "line": 80,
        "fullcodeline": "scene=0;"
    },
    {
        "line": 63,
        "fullcodeline": "if (image->debug != MagickFalse)"
    },
    {
        "line": 68,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 330,
        "fullcodeline": "} while (image_info->adjoin != MagickFalse);"
    },
    {
        "line": 331,
        "fullcodeline": "quantize_info=DestroyQuantizeInfo(quantize_info);"
    },
    {
        "line": 332,
        "fullcodeline": "(void) CloseBlob(image);"
    },
    {
        "line": 64,
        "fullcodeline": "(void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",image->filename);"
    },
    {
        "line": 84,
        "fullcodeline": "count=GetNumberColors(image,NULL,exception);"
    },
    {
        "line": 105,
        "fullcodeline": "bytes_per_row=((image->columns+(16/bits_per_pixel-1))/(16/"
    },
    {
        "line": 129,
        "fullcodeline": "offset=16;"
    },
    {
        "line": 187,
        "fullcodeline": "lastrow=(unsigned char *) NULL;"
    },
    {
        "line": 192,
        "fullcodeline": "one_row=(unsigned char *) AcquireQuantumMemory(bytes_per_row,"
    },
    {
        "line": 321,
        "fullcodeline": "nextDepthOffset=(size_t) ((GetBlobSize(image)-currentOffset)/4);"
    },
    {
        "line": 323,
        "fullcodeline": "currentOffset=(MagickOffsetType) GetBlobSize(image);"
    },
    {
        "line": 325,
        "fullcodeline": "image=SyncNextImageInList(image);"
    },
    {
        "line": 326,
        "fullcodeline": "status=SetImageProgress(image,SaveImagesTag,scene++,"
    },
    {
        "line": 83,
        "fullcodeline": "(void) TransformImageColorspace(image,sRGBColorspace,exception);"
    },
    {
        "line": 85,
        "fullcodeline": "for (bits_per_pixel=1;  (one << bits_per_pixel) < count; bits_per_pixel*=2) ;"
    },
    {
        "line": 86,
        "fullcodeline": "if (bits_per_pixel > 16)"
    },
    {
        "line": 91,
        "fullcodeline": "if (bits_per_pixel < 8)"
    },
    {
        "line": 99,
        "fullcodeline": "if (image->storage_class == PseudoClass)"
    },
    {
        "line": 103,
        "fullcodeline": "(void) WriteBlobMSBShort(image,(unsigned short) image->columns); /* width */"
    },
    {
        "line": 104,
        "fullcodeline": "(void) WriteBlobMSBShort(image,(unsigned short) image->rows);  /* height */"
    },
    {
        "line": 107,
        "fullcodeline": "(void) WriteBlobMSBShort(image,(unsigned short) bytes_per_row);"
    },
    {
        "line": 108,
        "fullcodeline": "if ((image_info->compression == RLECompression) ||"
    },
    {
        "line": 111,
        "fullcodeline": "(void) WriteBlobMSBShort(image, flags);"
    },
    {
        "line": 112,
        "fullcodeline": "(void) WriteBlobByte(image,(unsigned char) bits_per_pixel);"
    },
    {
        "line": 113,
        "fullcodeline": "if (bits_per_pixel > 1)"
    },
    {
        "line": 118,
        "fullcodeline": "(void) WriteBlobByte(image,version);"
    },
    {
        "line": 119,
        "fullcodeline": "(void) WriteBlobMSBShort(image,0);  /* nextDepthOffset */"
    },
    {
        "line": 120,
        "fullcodeline": "(void) WriteBlobByte(image,(unsigned char) transparentIndex);"
    },
    {
        "line": 121,
        "fullcodeline": "if (image_info->compression == RLECompression)"
    },
    {
        "line": 128,
        "fullcodeline": "(void) WriteBlobMSBShort(image,0);  /* reserved */"
    },
    {
        "line": 130,
        "fullcodeline": "if (bits_per_pixel == 16)"
    },
    {
        "line": 139,
        "fullcodeline": "if (bits_per_pixel == 8)"
    },
    {
        "line": 185,
        "fullcodeline": "if (flags & PALM_IS_COMPRESSED_FLAG)"
    },
    {
        "line": 188,
        "fullcodeline": "if (image_info->compression == FaxCompression)"
    },
    {
        "line": 194,
        "fullcodeline": "if (one_row == (unsigned char *) NULL)"
    },
    {
        "line": 196,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 289,
        "fullcodeline": "if (flags & PALM_HAS_TRANSPARENCY_FLAG)"
    },
    {
        "line": 304,
        "fullcodeline": "if (flags & PALM_IS_COMPRESSED_FLAG)  /* fill in size now */"
    },
    {
        "line": 310,
        "fullcodeline": "if (one_row != (unsigned char *) NULL)"
    },
    {
        "line": 312,
        "fullcodeline": "if (lastrow != (unsigned char *) NULL)"
    },
    {
        "line": 317,
        "fullcodeline": "for (cc=(GetBlobSize(image)) % 4; cc > 0; cc--)"
    },
    {
        "line": 320,
        "fullcodeline": "offset=SeekBlob(image,currentOffset+10,SEEK_SET);"
    },
    {
        "line": 322,
        "fullcodeline": "(void) WriteBlobMSBShort(image,(unsigned short) nextDepthOffset);"
    },
    {
        "line": 324,
        "fullcodeline": "offset=SeekBlob(image,currentOffset,SEEK_SET);"
    },
    {
        "line": 328,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 87,
        "fullcodeline": "bits_per_pixel=16;"
    },
    {
        "line": 97,
        "fullcodeline": "if ((image->storage_class == PseudoClass) && (image->colors > 256))"
    },
    {
        "line": 100,
        "fullcodeline": "flags|=PALM_HAS_COLORMAP_FLAG;"
    },
    {
        "line": 109,
        "fullcodeline": "(image_info->compression == FaxCompression))"
    },
    {
        "line": 110,
        "fullcodeline": "flags|=PALM_IS_COMPRESSED_FLAG;"
    },
    {
        "line": 114,
        "fullcodeline": "version=1;"
    },
    {
        "line": 115,
        "fullcodeline": "if ((image_info->compression == RLECompression) ||"
    },
    {
        "line": 116,
        "fullcodeline": "(image_info->compression == FaxCompression))"
    },
    {
        "line": 117,
        "fullcodeline": "version=2;"
    },
    {
        "line": 137,
        "fullcodeline": "offset+=8;"
    },
    {
        "line": 189,
        "fullcodeline": "lastrow=(unsigned char *) AcquireQuantumMemory(bytes_per_row,"
    },
    {
        "line": 195,
        "fullcodeline": "ThrowWriterException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 198,
        "fullcodeline": "ptr=one_row;"
    },
    {
        "line": 200,
        "fullcodeline": "p=GetVirtualPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 293,
        "fullcodeline": "offset=SeekBlob(image,currentOffset+12,SEEK_SET);"
    },
    {
        "line": 298,
        "fullcodeline": "offset=SeekBlob(image,currentOffset+20,SEEK_SET);"
    },
    {
        "line": 306,
        "fullcodeline": "offset=SeekBlob(image,currentOffset+offset,SEEK_SET);"
    },
    {
        "line": 314,
        "fullcodeline": "if (GetNextImageInList(image) == (Image *) NULL)"
    },
    {
        "line": 318,
        "fullcodeline": "(void) WriteBlobByte(image,0);"
    },
    {
        "line": 327,
        "fullcodeline": "GetImageListLength(image));"
    },
    {
        "line": 93,
        "fullcodeline": "(void) TransformImageColorspace(image,GRAYColorspace,exception);"
    },
    {
        "line": 94,
        "fullcodeline": "(void) SetImageType(image,PaletteType,exception);"
    },
    {
        "line": 95,
        "fullcodeline": "(void) SortColormapByIntensity(image,exception);"
    },
    {
        "line": 98,
        "fullcodeline": "(void) SetImageStorageClass(image,DirectClass,exception);"
    },
    {
        "line": 102,
        "fullcodeline": "flags|=PALM_IS_DIRECT_COLOR;"
    },
    {
        "line": 122,
        "fullcodeline": "(void) WriteBlobByte(image,PALM_COMPRESSION_RLE);"
    },
    {
        "line": 132,
        "fullcodeline": "(void) WriteBlobByte(image,5);  /* # of bits of red */"
    },
    {
        "line": 133,
        "fullcodeline": "(void) WriteBlobByte(image,6);  /* # of bits of green */"
    },
    {
        "line": 134,
        "fullcodeline": "(void) WriteBlobByte(image,5);  /* # of bits of blue */"
    },
    {
        "line": 135,
        "fullcodeline": "(void) WriteBlobByte(image,0);  /* reserved by Palm */"
    },
    {
        "line": 136,
        "fullcodeline": "(void) WriteBlobMSBLong(image,0);  /* no transparent color, YET */"
    },
    {
        "line": 141,
        "fullcodeline": "if (flags & PALM_HAS_COLORMAP_FLAG)  /* Write out colormap */"
    },
    {
        "line": 186,
        "fullcodeline": "(void) WriteBlobMSBShort(image,0);  /* fill in size later */"
    },
    {
        "line": 199,
        "fullcodeline": "(void) ResetMagickMemory(ptr,0,bytes_per_row);"
    },
    {
        "line": 201,
        "fullcodeline": "if (p == (const Quantum *) NULL)"
    },
    {
        "line": 203,
        "fullcodeline": "if (bits_per_pixel == 16)"
    },
    {
        "line": 249,
        "fullcodeline": "if (image_info->compression == RLECompression)"
    },
    {
        "line": 291,
        "fullcodeline": "offset=SeekBlob(image,currentOffset+6,SEEK_SET);"
    },
    {
        "line": 292,
        "fullcodeline": "(void) WriteBlobMSBShort(image,flags);"
    },
    {
        "line": 294,
        "fullcodeline": "(void) WriteBlobByte(image,(unsigned char) transparentIndex);  /* trans index */"
    },
    {
        "line": 299,
        "fullcodeline": "(void) WriteBlobByte(image,0);  /* reserved by Palm */"
    },
    {
        "line": 300,
        "fullcodeline": "(void) WriteBlobByte(image,(unsigned char) ((31*transpix.red)/QuantumRange));"
    },
    {
        "line": 301,
        "fullcodeline": "(void) WriteBlobByte(image,(unsigned char) ((63*transpix.green)/QuantumRange));"
    },
    {
        "line": 302,
        "fullcodeline": "(void) WriteBlobByte(image,(unsigned char) ((31*transpix.blue)/QuantumRange));"
    },
    {
        "line": 307,
        "fullcodeline": "(void) WriteBlobMSBShort(image,(unsigned short) (GetBlobSize(image)-"
    },
    {
        "line": 89,
        "fullcodeline": "if (bits_per_pixel < 16)"
    },
    {
        "line": 124,
        "fullcodeline": "if (image_info->compression == FaxCompression)"
    },
    {
        "line": 143,
        "fullcodeline": "quantize_info->dither_method=IdentifyPaletteImage(image,exception)"
    },
    {
        "line": 145,
        "fullcodeline": "quantize_info->number_colors=image->colors;"
    },
    {
        "line": 158,
        "fullcodeline": "offset+=2+count*4;"
    },
    {
        "line": 251,
        "fullcodeline": "x=0;"
    },
    {
        "line": 311,
        "fullcodeline": "one_row=(unsigned char *) RelinquishMagickMemory(one_row);"
    },
    {
        "line": 313,
        "fullcodeline": "lastrow=(unsigned char *) RelinquishMagickMemory(lastrow);"
    },
    {
        "line": 146,
        "fullcodeline": "(void) QuantizeImage(quantize_info,image,exception);"
    },
    {
        "line": 147,
        "fullcodeline": "(void) WriteBlobMSBShort(image,(unsigned short) image->colors);"
    },
    {
        "line": 148,
        "fullcodeline": "for (count = 0; count < image->colors; count++)"
    },
    {
        "line": 165,
        "fullcodeline": "affinity_image=ConstituteImage(256,1,\"RGB\",CharPixel,&PalmPalette,"
    },
    {
        "line": 205,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 226,
        "fullcodeline": "byte=0x00;"
    },
    {
        "line": 227,
        "fullcodeline": "bit=(unsigned char) (8-bits_per_pixel);"
    },
    {
        "line": 252,
        "fullcodeline": "while (x < (ssize_t) bytes_per_row)"
    },
    {
        "line": 90,
        "fullcodeline": "(void) TransformImageColorspace(image,image->colorspace,exception);"
    },
    {
        "line": 125,
        "fullcodeline": "(void) WriteBlobByte(image,PALM_COMPRESSION_SCANLINE);"
    },
    {
        "line": 167,
        "fullcodeline": "(void) TransformImageColorspace(affinity_image,"
    },
    {
        "line": 169,
        "fullcodeline": "(void) RemapImage(quantize_info,image,affinity_image,exception);"
    },
    {
        "line": 170,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 182,
        "fullcodeline": "affinity_image=DestroyImage(affinity_image);"
    },
    {
        "line": 207,
        "fullcodeline": "color16=(unsigned short) ((((31*(size_t) GetPixelRed(image,p))/"
    },
    {
        "line": 221,
        "fullcodeline": "p+=GetPixelChannels(image);"
    },
    {
        "line": 228,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 254,
        "fullcodeline": "byte=one_row[x];"
    },
    {
        "line": 255,
        "fullcodeline": "count=1;"
    },
    {
        "line": 264,
        "fullcodeline": "if (image_info->compression == FaxCompression)"
    },
    {
        "line": 127,
        "fullcodeline": "(void) WriteBlobByte(image,PALM_COMPRESSION_NONE);"
    },
    {
        "line": 150,
        "fullcodeline": "(void) WriteBlobByte(image,(unsigned char) count);"
    },
    {
        "line": 151,
        "fullcodeline": "(void) WriteBlobByte(image,ScaleQuantumToChar(ClampToQuantum("
    },
    {
        "line": 153,
        "fullcodeline": "(void) WriteBlobByte(image,ScaleQuantumToChar(ClampToQuantum("
    },
    {
        "line": 155,
        "fullcodeline": "(void) WriteBlobByte(image,ScaleQuantumToChar(ClampToQuantum("
    },
    {
        "line": 172,
        "fullcodeline": "q=GetAuthenticPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 235,
        "fullcodeline": "byte|=color << bit;"
    },
    {
        "line": 244,
        "fullcodeline": "p+=GetPixelChannels(image);"
    },
    {
        "line": 246,
        "fullcodeline": "if ((image->columns % (8/bits_per_pixel)) != 0)"
    },
    {
        "line": 258,
        "fullcodeline": "count++;"
    },
    {
        "line": 259,
        "fullcodeline": "(void) WriteBlobByte(image,(unsigned char) count);"
    },
    {
        "line": 260,
        "fullcodeline": "(void) WriteBlobByte(image,(unsigned char) byte);"
    },
    {
        "line": 267,
        "fullcodeline": "tmpbuf[8],"
    },
    {
        "line": 173,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 175,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 211,
        "fullcodeline": "if (GetPixelAlpha(image,p) == (Quantum) TransparentAlpha)"
    },
    {
        "line": 213,
        "fullcodeline": "transpix.red=(MagickRealType) GetPixelRed(image,p);"
    },
    {
        "line": 214,
        "fullcodeline": "transpix.green=(MagickRealType) GetPixelGreen(image,p);"
    },
    {
        "line": 215,
        "fullcodeline": "transpix.blue=(MagickRealType) GetPixelBlue(image,p);"
    },
    {
        "line": 217,
        "fullcodeline": "flags|=PALM_HAS_TRANSPARENCY_FLAG;"
    },
    {
        "line": 219,
        "fullcodeline": "*ptr++=(unsigned char) ((color16 >> 8) & 0xff);"
    },
    {
        "line": 220,
        "fullcodeline": "*ptr++=(unsigned char) (color16 & 0xff);"
    },
    {
        "line": 230,
        "fullcodeline": "if (bits_per_pixel >= 8)"
    },
    {
        "line": 236,
        "fullcodeline": "if (bit != 0)"
    },
    {
        "line": 256,
        "fullcodeline": "while ((one_row[++x] == byte) && (count < 255) &&"
    },
    {
        "line": 257,
        "fullcodeline": "(x < (ssize_t) bytes_per_row))"
    },
    {
        "line": 270,
        "fullcodeline": "for (x = 0;  x < (ssize_t) bytes_per_row;  x += 8)"
    },
    {
        "line": 284,
        "fullcodeline": "(void) CopyMagickMemory(lastrow,one_row,bytes_per_row);"
    },
    {
        "line": 177,
        "fullcodeline": "SetPixelIndex(image,(Quantum) FindColor(&image->colormap[(ssize_t)"
    },
    {
        "line": 179,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 210,
        "fullcodeline": "((31*(size_t) GetPixelBlue(image,p))/(size_t) QuantumRange));"
    },
    {
        "line": 231,
        "fullcodeline": "color=(unsigned char) GetPixelIndex(image,p);"
    },
    {
        "line": 237,
        "fullcodeline": "bit-=(unsigned char) bits_per_pixel;"
    },
    {
        "line": 272,
        "fullcodeline": "tptr = tmpbuf;"
    },
    {
        "line": 287,
        "fullcodeline": "(void) WriteBlob(image,bytes_per_row,one_row);"
    },
    {
        "line": 208,
        "fullcodeline": "(size_t) QuantumRange) << 11) | (((63*(size_t)"
    },
    {
        "line": 216,
        "fullcodeline": "transpix.alpha=(MagickRealType) GetPixelAlpha(image,p);"
    },
    {
        "line": 233,
        "fullcodeline": "color=(unsigned char) (GetPixelIndex(image,p)*"
    },
    {
        "line": 241,
        "fullcodeline": "byte=0x00;"
    },
    {
        "line": 242,
        "fullcodeline": "bit=(unsigned char) (8-bits_per_pixel);"
    },
    {
        "line": 273,
        "fullcodeline": "for (bit=0, byte=0; bit < (unsigned char) MagickMin(8,(ssize_t) bytes_per_row-x); bit++)"
    },
    {
        "line": 281,
        "fullcodeline": "(void) WriteBlobByte(image, byte);"
    },
    {
        "line": 282,
        "fullcodeline": "(void) WriteBlob(image,tptr-tmpbuf,(unsigned char *) tmpbuf);"
    },
    {
        "line": 240,
        "fullcodeline": "*ptr++=byte;"
    },
    {
        "line": 234,
        "fullcodeline": "((one << bits_per_pixel)-1)/MagickMax(1*image->colors-1,1));"
    },
    {
        "line": 275,
        "fullcodeline": "if ((y == 0) || (lastrow[x + bit] != one_row[x + bit]))"
    },
    {
        "line": 277,
        "fullcodeline": "byte |= (1 << (7 - bit));"
    },
    {
        "line": 209,
        "fullcodeline": "GetPixelGreen(image,p))/(size_t) QuantumRange) << 5) |"
    },
    {
        "line": 178,
        "fullcodeline": "GetPixelIndex(image,q)]),q);"
    },
    {
        "line": 278,
        "fullcodeline": "*tptr++ = (char) one_row[x + bit];"
    }
]