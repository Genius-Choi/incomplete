[
    {
        "line": 60,
        "fullcodeline": "assert(image_info != (const ImageInfo *) NULL);"
    },
    {
        "line": 61,
        "fullcodeline": "assert(image_info->signature == MagickCoreSignature);"
    },
    {
        "line": 65,
        "fullcodeline": "assert(exception != (ExceptionInfo *) NULL);"
    },
    {
        "line": 66,
        "fullcodeline": "assert(exception->signature == MagickCoreSignature);"
    },
    {
        "line": 67,
        "fullcodeline": "image=AcquireImage(image_info,exception);"
    },
    {
        "line": 68,
        "fullcodeline": "status=OpenBlob(image_info,image,ReadBinaryBlobMode,exception);"
    },
    {
        "line": 74,
        "fullcodeline": "totalOffset=0;"
    },
    {
        "line": 62,
        "fullcodeline": "if (image_info->debug != MagickFalse)"
    },
    {
        "line": 69,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 356,
        "fullcodeline": "(void) CloseBlob(image);"
    },
    {
        "line": 357,
        "fullcodeline": "return(GetFirstImageInList(image));"
    },
    {
        "line": 63,
        "fullcodeline": "(void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\","
    },
    {
        "line": 71,
        "fullcodeline": "(void) DestroyImageList(image);"
    },
    {
        "line": 77,
        "fullcodeline": "image->columns=ReadBlobMSBShort(image);"
    },
    {
        "line": 78,
        "fullcodeline": "image->rows=ReadBlobMSBShort(image);"
    },
    {
        "line": 83,
        "fullcodeline": "status=SetImageExtent(image,image->columns,image->rows,exception);"
    },
    {
        "line": 86,
        "fullcodeline": "bytes_per_row=ReadBlobMSBShort(image);"
    },
    {
        "line": 87,
        "fullcodeline": "flags=ReadBlobMSBShort(image);"
    },
    {
        "line": 88,
        "fullcodeline": "bits_per_pixel=(size_t) ReadBlobByte(image);"
    },
    {
        "line": 93,
        "fullcodeline": "version=(size_t) ReadBlobByte(image);"
    },
    {
        "line": 96,
        "fullcodeline": "nextDepthOffset=(size_t) ReadBlobMSBShort(image);"
    },
    {
        "line": 97,
        "fullcodeline": "transparentIndex=(size_t) ReadBlobByte(image);"
    },
    {
        "line": 98,
        "fullcodeline": "compressionType=(size_t) ReadBlobByte(image);"
    },
    {
        "line": 103,
        "fullcodeline": "pad=ReadBlobMSBShort(image);"
    },
    {
        "line": 108,
        "fullcodeline": "one=1;"
    },
    {
        "line": 112,
        "fullcodeline": "GetPixelInfo(image,&transpix);"
    },
    {
        "line": 162,
        "fullcodeline": "image->storage_class=DirectClass;"
    },
    {
        "line": 173,
        "fullcodeline": "status=SetImageExtent(image,image->columns,image->rows,exception);"
    },
    {
        "line": 176,
        "fullcodeline": "one_row=(unsigned char *) AcquireQuantumMemory(MagickMax(bytes_per_row,"
    },
    {
        "line": 180,
        "fullcodeline": "last_row=(unsigned char *) NULL;"
    },
    {
        "line": 188,
        "fullcodeline": "mask=(size_t) (1U << bits_per_pixel)-1;"
    },
    {
        "line": 72,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 79,
        "fullcodeline": "if (EOFBlob(image) != MagickFalse)"
    },
    {
        "line": 84,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 113,
        "fullcodeline": "if (bits_per_pixel == 16)  /* Direct Color */"
    },
    {
        "line": 127,
        "fullcodeline": "if (bits_per_pixel == 8)"
    },
    {
        "line": 159,
        "fullcodeline": "if (flags & PALM_IS_COMPRESSED_FLAG)"
    },
    {
        "line": 163,
        "fullcodeline": "if (bits_per_pixel < 16)"
    },
    {
        "line": 168,
        "fullcodeline": "if (image_info->ping != MagickFalse)"
    },
    {
        "line": 174,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 178,
        "fullcodeline": "if (one_row == (unsigned char *) NULL)"
    },
    {
        "line": 181,
        "fullcodeline": "if (compressionType == PALM_COMPRESSION_SCANLINE)"
    },
    {
        "line": 189,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 304,
        "fullcodeline": "if (flags & PALM_HAS_TRANSPARENCY_FLAG)"
    },
    {
        "line": 314,
        "fullcodeline": "if (compressionType == PALM_COMPRESSION_SCANLINE)"
    },
    {
        "line": 316,
        "fullcodeline": "if (EOFBlob(image) != MagickFalse)"
    },
    {
        "line": 325,
        "fullcodeline": "if (image_info->number_scenes != 0)"
    },
    {
        "line": 328,
        "fullcodeline": "if (nextDepthOffset != 0)"
    },
    {
        "line": 80,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 81,
        "fullcodeline": "if ((image->columns == 0) || (image->rows == 0))"
    },
    {
        "line": 82,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"NegativeOrZeroImageSize\");"
    },
    {
        "line": 89,
        "fullcodeline": "if ((bits_per_pixel != 1) && (bits_per_pixel != 2) &&"
    },
    {
        "line": 91,
        "fullcodeline": "(bits_per_pixel != 16))"
    },
    {
        "line": 92,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"UnrecognizedBitsPerPixel\");"
    },
    {
        "line": 94,
        "fullcodeline": "if ((version != 0) && (version != 1) && (version != 2))"
    },
    {
        "line": 95,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"FileFormatVersionMismatch\");"
    },
    {
        "line": 99,
        "fullcodeline": "if ((compressionType != PALM_COMPRESSION_NONE) &&"
    },
    {
        "line": 101,
        "fullcodeline": "(compressionType != PALM_COMPRESSION_RLE))"
    },
    {
        "line": 102,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"UnrecognizedImageCompression\");"
    },
    {
        "line": 109,
        "fullcodeline": "if ((bits_per_pixel < 16) &&"
    },
    {
        "line": 110,
        "fullcodeline": "(AcquireImageColormap(image,one << bits_per_pixel,exception) == MagickFalse))"
    },
    {
        "line": 111,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 115,
        "fullcodeline": "redbits=(size_t) ReadBlobByte(image);  /* # of bits of red */"
    },
    {
        "line": 117,
        "fullcodeline": "greenbits=(size_t) ReadBlobByte(image);  /* # of bits of green */"
    },
    {
        "line": 119,
        "fullcodeline": "bluebits=(size_t) ReadBlobByte(image);  /* # of bits of blue */"
    },
    {
        "line": 121,
        "fullcodeline": "ReadBlobByte(image);  /* reserved by Palm */"
    },
    {
        "line": 122,
        "fullcodeline": "ReadBlobByte(image);  /* reserved by Palm */"
    },
    {
        "line": 123,
        "fullcodeline": "transpix.red=(double) (QuantumRange*ReadBlobByte(image)/31);"
    },
    {
        "line": 124,
        "fullcodeline": "transpix.green=(double) (QuantumRange*ReadBlobByte(image)/63);"
    },
    {
        "line": 125,
        "fullcodeline": "transpix.blue=(double) (QuantumRange*ReadBlobByte(image)/31);"
    },
    {
        "line": 160,
        "fullcodeline": "size=ReadBlobMSBShort(image);"
    },
    {
        "line": 165,
        "fullcodeline": "image->storage_class=PseudoClass;"
    },
    {
        "line": 166,
        "fullcodeline": "image->depth=8;"
    },
    {
        "line": 179,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 183,
        "fullcodeline": "last_row=(unsigned char *) AcquireQuantumMemory(MagickMax(bytes_per_row,"
    },
    {
        "line": 242,
        "fullcodeline": "ptr=one_row;"
    },
    {
        "line": 243,
        "fullcodeline": "q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 313,
        "fullcodeline": "one_row=(unsigned char *) RelinquishMagickMemory(one_row);"
    },
    {
        "line": 318,
        "fullcodeline": "ThrowFileException(exception,CorruptImageError,\"UnexpectedEndOfFile\","
    },
    {
        "line": 333,
        "fullcodeline": "totalOffset+=(MagickOffsetType) (nextDepthOffset*4);"
    },
    {
        "line": 335,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\")"
    },
    {
        "line": 343,
        "fullcodeline": "AcquireNextImage(image_info,image,exception);"
    },
    {
        "line": 349,
        "fullcodeline": "image=SyncNextImageInList(image);"
    },
    {
        "line": 350,
        "fullcodeline": "status=SetImageProgress(image,LoadImagesTag,TellBlob(image),"
    },
    {
        "line": 85,
        "fullcodeline": "return(DestroyImageList(image));"
    },
    {
        "line": 90,
        "fullcodeline": "(bits_per_pixel != 4) && (bits_per_pixel != 8) &&"
    },
    {
        "line": 100,
        "fullcodeline": "(compressionType != PALM_COMPRESSION_SCANLINE ) &&"
    },
    {
        "line": 132,
        "fullcodeline": "if (flags & PALM_HAS_COLORMAP_FLAG)"
    },
    {
        "line": 170,
        "fullcodeline": "(void) CloseBlob(image);"
    },
    {
        "line": 175,
        "fullcodeline": "return(DestroyImageList(image));"
    },
    {
        "line": 185,
        "fullcodeline": "if (last_row == (unsigned char *) NULL)"
    },
    {
        "line": 244,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 246,
        "fullcodeline": "if (bits_per_pixel == 16)"
    },
    {
        "line": 296,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 306,
        "fullcodeline": "ssize_t index=ConstrainColormapIndex(image,(ssize_t) (mask-"
    },
    {
        "line": 308,
        "fullcodeline": "if (bits_per_pixel != 16)"
    },
    {
        "line": 310,
        "fullcodeline": "(void) TransparentPaintImage(image,&transpix,(Quantum) TransparentAlpha,"
    },
    {
        "line": 326,
        "fullcodeline": "if (image->scene >= (image_info->scene+image_info->number_scenes-1))"
    },
    {
        "line": 338,
        "fullcodeline": "if (seekNextDepth != totalOffset)"
    },
    {
        "line": 352,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 134,
        "fullcodeline": "count=(ssize_t) ReadBlobMSBShort(image);"
    },
    {
        "line": 177,
        "fullcodeline": "2*image->columns),sizeof(*one_row));"
    },
    {
        "line": 186,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 191,
        "fullcodeline": "if ((flags & PALM_IS_COMPRESSED_FLAG) == 0)"
    },
    {
        "line": 194,
        "fullcodeline": "image->compression=NoCompression;"
    },
    {
        "line": 195,
        "fullcodeline": "count=ReadBlob(image,bytes_per_row,one_row);"
    },
    {
        "line": 298,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 309,
        "fullcodeline": "transpix=image->colormap[index];"
    },
    {
        "line": 315,
        "fullcodeline": "last_row=(unsigned char *) RelinquishMagickMemory(last_row);"
    },
    {
        "line": 339,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 344,
        "fullcodeline": "if (GetNextImageInList(image) == (Image *) NULL)"
    },
    {
        "line": 351,
        "fullcodeline": "GetBlobSize(image));"
    },
    {
        "line": 135,
        "fullcodeline": "for (i=0; i < (ssize_t) count; i++)"
    },
    {
        "line": 248,
        "fullcodeline": "if (image->columns > (2*bytes_per_row))"
    },
    {
        "line": 255,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 271,
        "fullcodeline": "bit=8-bits_per_pixel;"
    },
    {
        "line": 300,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 346,
        "fullcodeline": "(void) DestroyImageList(image);"
    },
    {
        "line": 347,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 137,
        "fullcodeline": "ReadBlobByte(image);"
    },
    {
        "line": 148,
        "fullcodeline": "for (i=0; i < (ssize_t) (1L << bits_per_pixel); i++)"
    },
    {
        "line": 184,
        "fullcodeline": "2*image->columns),sizeof(*last_row));"
    },
    {
        "line": 201,
        "fullcodeline": "if (compressionType == PALM_COMPRESSION_RLE)"
    },
    {
        "line": 250,
        "fullcodeline": "one_row=(unsigned char *) RelinquishMagickMemory(one_row);"
    },
    {
        "line": 253,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"CorruptImage\");"
    },
    {
        "line": 257,
        "fullcodeline": "color16=(*ptr++ << 8);"
    },
    {
        "line": 258,
        "fullcodeline": "color16|=(*ptr++);"
    },
    {
        "line": 259,
        "fullcodeline": "SetPixelRed(image,(Quantum) ((QuantumRange*((color16 >> 11) &"
    },
    {
        "line": 261,
        "fullcodeline": "SetPixelGreen(image,(Quantum) ((QuantumRange*((color16 >> 5) &"
    },
    {
        "line": 263,
        "fullcodeline": "SetPixelBlue(image,(Quantum) ((QuantumRange*((color16 >> 0) &"
    },
    {
        "line": 265,
        "fullcodeline": "SetPixelAlpha(image,OpaqueAlpha,q);"
    },
    {
        "line": 266,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 272,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 293,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 138,
        "fullcodeline": "index=ConstrainColormapIndex(image,255-i,exception);"
    },
    {
        "line": 204,
        "fullcodeline": "image->compression=RLECompression;"
    },
    {
        "line": 251,
        "fullcodeline": "if (compressionType == PALM_COMPRESSION_SCANLINE)"
    },
    {
        "line": 281,
        "fullcodeline": "index=(Quantum) (mask-(((*ptr) & (mask << bit)) >> bit));"
    },
    {
        "line": 282,
        "fullcodeline": "SetPixelIndex(image,index,q);"
    },
    {
        "line": 283,
        "fullcodeline": "SetPixelViaPixelInfo(image,image->colormap+(ssize_t) index,q);"
    },
    {
        "line": 291,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 140,
        "fullcodeline": "ScaleCharToQuantum((unsigned char) ReadBlobByte(image));"
    },
    {
        "line": 142,
        "fullcodeline": "ScaleCharToQuantum((unsigned char) ReadBlobByte(image));"
    },
    {
        "line": 144,
        "fullcodeline": "ScaleCharToQuantum((unsigned char) ReadBlobByte(image));"
    },
    {
        "line": 150,
        "fullcodeline": "index=ConstrainColormapIndex(image,255-i,exception);"
    },
    {
        "line": 205,
        "fullcodeline": "for (i=0; i < (ssize_t) bytes_per_row; )"
    },
    {
        "line": 252,
        "fullcodeline": "last_row=(unsigned char *) RelinquishMagickMemory(last_row);"
    },
    {
        "line": 274,
        "fullcodeline": "if ((size_t) (ptr-one_row) >= bytes_per_row)"
    },
    {
        "line": 152,
        "fullcodeline": "ScaleCharToQuantum(PalmPalette[i][0]);"
    },
    {
        "line": 154,
        "fullcodeline": "ScaleCharToQuantum(PalmPalette[i][1]);"
    },
    {
        "line": 156,
        "fullcodeline": "ScaleCharToQuantum(PalmPalette[i][2]);"
    },
    {
        "line": 207,
        "fullcodeline": "count=(ssize_t) ReadBlobByte(image);"
    },
    {
        "line": 210,
        "fullcodeline": "count=MagickMin(count,(ssize_t) bytes_per_row-i);"
    },
    {
        "line": 211,
        "fullcodeline": "byte=(size_t) ReadBlobByte(image);"
    },
    {
        "line": 213,
        "fullcodeline": "i+=count;"
    },
    {
        "line": 217,
        "fullcodeline": "if (compressionType == PALM_COMPRESSION_SCANLINE)"
    },
    {
        "line": 276,
        "fullcodeline": "one_row=(unsigned char *) RelinquishMagickMemory(one_row);"
    },
    {
        "line": 279,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"CorruptImage\");"
    },
    {
        "line": 285,
        "fullcodeline": "bit-=bits_per_pixel;"
    },
    {
        "line": 208,
        "fullcodeline": "if (count < 0)"
    },
    {
        "line": 212,
        "fullcodeline": "(void) ResetMagickMemory(one_row+i,(int) byte,(size_t) count);"
    },
    {
        "line": 223,
        "fullcodeline": "one=1;"
    },
    {
        "line": 224,
        "fullcodeline": "image->compression=FaxCompression;"
    },
    {
        "line": 277,
        "fullcodeline": "if (compressionType == PALM_COMPRESSION_SCANLINE)"
    },
    {
        "line": 288,
        "fullcodeline": "ptr++;"
    },
    {
        "line": 289,
        "fullcodeline": "bit=8-bits_per_pixel;"
    },
    {
        "line": 225,
        "fullcodeline": "for (i=0; i < (ssize_t) bytes_per_row; i+=8)"
    },
    {
        "line": 239,
        "fullcodeline": "(void) CopyMagickMemory(last_row, one_row, bytes_per_row);"
    },
    {
        "line": 278,
        "fullcodeline": "last_row=(unsigned char *) RelinquishMagickMemory(last_row);"
    },
    {
        "line": 227,
        "fullcodeline": "count=(ssize_t) ReadBlobByte(image);"
    },
    {
        "line": 230,
        "fullcodeline": "byte=(size_t) MagickMin((ssize_t) bytes_per_row-i,8);"
    },
    {
        "line": 228,
        "fullcodeline": "if (count < 0)"
    },
    {
        "line": 231,
        "fullcodeline": "for (bit=0; bit < byte; bit++)"
    },
    {
        "line": 233,
        "fullcodeline": "if ((y == 0) || (count & (one << (7 - bit))))"
    },
    {
        "line": 234,
        "fullcodeline": "one_row[i+bit]=(unsigned char) ReadBlobByte(image);"
    },
    {
        "line": 236,
        "fullcodeline": "one_row[i+bit]=last_row[i+bit];"
    }
]