[
    {
        "line": 11,
        "fullcodeline": "static char *(except_tbl[][2]) = {"
    },
    {
        "line": 54,
        "fullcodeline": "static char *(expr_table[]) = {\"!=?\", \"!~?\", \"<=?\", \"<?\", \"==?\", \"=~?\","
    },
    {
        "line": 58,
        "fullcodeline": "d = IObuff;\t\t    // assume IObuff is long enough!"
    },
    {
        "line": 59,
        "fullcodeline": "d[0] = NUL;"
    },
    {
        "line": 241,
        "fullcodeline": "*matches = (char_u **)\"\";"
    },
    {
        "line": 242,
        "fullcodeline": "*num_matches = 0;"
    },
    {
        "line": 243,
        "fullcodeline": "flags = TAG_HELP | TAG_REGEXP | TAG_NAMES | TAG_VERBOSE | TAG_NO_TAGFUNC;"
    },
    {
        "line": 61,
        "fullcodeline": "if (STRNICMP(arg, \"expr-\", 5) == 0)"
    },
    {
        "line": 95,
        "fullcodeline": "if (d[0] == NUL)\t// no match in table"
    },
    {
        "line": 246,
        "fullcodeline": "if (find_tags(IObuff, num_matches, matches, flags, (int)MAXCOL, NULL) == OK"
    },
    {
        "line": 12,
        "fullcodeline": "{\"*\",\t\t\"star\"},"
    },
    {
        "line": 13,
        "fullcodeline": "{\"g*\",\t\t\"gstar\"},"
    },
    {
        "line": 14,
        "fullcodeline": "{\"[*\",\t\t\"[star\"},"
    },
    {
        "line": 15,
        "fullcodeline": "{\"]*\",\t\t\"]star\"},"
    },
    {
        "line": 16,
        "fullcodeline": "{\":*\",\t\t\":star\"},"
    },
    {
        "line": 17,
        "fullcodeline": "{\"/*\",\t\t\"/star\"},"
    },
    {
        "line": 18,
        "fullcodeline": "{\"/\\\\*\",\t\"/\\\\\\\\star\"},"
    },
    {
        "line": 19,
        "fullcodeline": "{\"\\\"*\",\t\t\"quotestar\"},"
    },
    {
        "line": 20,
        "fullcodeline": "{\"**\",\t\t\"starstar\"},"
    },
    {
        "line": 21,
        "fullcodeline": "{\"cpo-*\",\t\"cpo-star\"},"
    },
    {
        "line": 22,
        "fullcodeline": "{\"/\\\\(\\\\)\",\t\"/\\\\\\\\(\\\\\\\\)\"},"
    },
    {
        "line": 23,
        "fullcodeline": "{\"/\\\\%(\\\\)\",\t\"/\\\\\\\\%(\\\\\\\\)\"},"
    },
    {
        "line": 24,
        "fullcodeline": "{\"?\",\t\t\"?\"},"
    },
    {
        "line": 25,
        "fullcodeline": "{\"??\",\t\t\"??\"},"
    },
    {
        "line": 26,
        "fullcodeline": "{\":?\",\t\t\":?\"},"
    },
    {
        "line": 27,
        "fullcodeline": "{\"?<CR>\",\t\"?<CR>\"},"
    },
    {
        "line": 28,
        "fullcodeline": "{\"g?\",\t\t\"g?\"},"
    },
    {
        "line": 29,
        "fullcodeline": "{\"g?g?\",\t\"g?g?\"},"
    },
    {
        "line": 30,
        "fullcodeline": "{\"g??\",\t\t\"g??\"},"
    },
    {
        "line": 31,
        "fullcodeline": "{\"-?\",\t\t\"-?\"},"
    },
    {
        "line": 32,
        "fullcodeline": "{\"q?\",\t\t\"q?\"},"
    },
    {
        "line": 33,
        "fullcodeline": "{\"v_g?\",\t\"v_g?\"},"
    },
    {
        "line": 34,
        "fullcodeline": "{\"/\\\\?\",\t\"/\\\\\\\\?\"},"
    },
    {
        "line": 35,
        "fullcodeline": "{\"/\\\\z(\\\\)\",\t\"/\\\\\\\\z(\\\\\\\\)\"},"
    },
    {
        "line": 36,
        "fullcodeline": "{\"\\\\=\",\t\t\"\\\\\\\\=\"},"
    },
    {
        "line": 37,
        "fullcodeline": "{\":s\\\\=\",\t\":s\\\\\\\\=\"},"
    },
    {
        "line": 38,
        "fullcodeline": "{\"[count]\",\t\"\\\\[count]\"},"
    },
    {
        "line": 39,
        "fullcodeline": "{\"[quotex]\",\t\"\\\\[quotex]\"},"
    },
    {
        "line": 40,
        "fullcodeline": "{\"[range]\",\t\"\\\\[range]\"},"
    },
    {
        "line": 41,
        "fullcodeline": "{\":[range]\",\t\":\\\\[range]\"},"
    },
    {
        "line": 42,
        "fullcodeline": "{\"[pattern]\",\t\"\\\\[pattern]\"},"
    },
    {
        "line": 43,
        "fullcodeline": "{\"\\\\|\",\t\t\"\\\\\\\\bar\"},"
    },
    {
        "line": 44,
        "fullcodeline": "{\"\\\\%$\",\t\"/\\\\\\\\%\\\\$\"},"
    },
    {
        "line": 45,
        "fullcodeline": "{\"s/\\\\~\",\t\"s/\\\\\\\\\\\\~\"},"
    },
    {
        "line": 46,
        "fullcodeline": "{\"s/\\\\U\",\t\"s/\\\\\\\\U\"},"
    },
    {
        "line": 47,
        "fullcodeline": "{\"s/\\\\L\",\t\"s/\\\\\\\\L\"},"
    },
    {
        "line": 48,
        "fullcodeline": "{\"s/\\\\1\",\t\"s/\\\\\\\\1\"},"
    },
    {
        "line": 49,
        "fullcodeline": "{\"s/\\\\2\",\t\"s/\\\\\\\\2\"},"
    },
    {
        "line": 50,
        "fullcodeline": "{\"s/\\\\3\",\t\"s/\\\\\\\\3\"},"
    },
    {
        "line": 51,
        "fullcodeline": "{\"s/\\\\9\",\t\"s/\\\\\\\\9\"},"
    },
    {
        "line": 52,
        "fullcodeline": "{NULL, NULL}"
    },
    {
        "line": 245,
        "fullcodeline": "flags |= TAG_KEEP_LANG;"
    },
    {
        "line": 247,
        "fullcodeline": "&& *num_matches > 0)"
    },
    {
        "line": 251,
        "fullcodeline": "qsort((void *)*matches, (size_t)*num_matches,"
    },
    {
        "line": 66,
        "fullcodeline": "for (i = (int)ARRAY_LENGTH(expr_table); --i >= 0; )"
    },
    {
        "line": 102,
        "fullcodeline": "if (arg[0] == '\\\\'"
    },
    {
        "line": 254,
        "fullcodeline": "while (*num_matches > TAG_MANY)"
    },
    {
        "line": 67,
        "fullcodeline": "if (STRCMP(arg + 5, expr_table[i]) == 0)"
    },
    {
        "line": 87,
        "fullcodeline": "for (i = 0; except_tbl[i][0] != NULL; ++i)"
    },
    {
        "line": 103,
        "fullcodeline": "&& ((arg[1] != NUL && arg[2] == NUL)"
    },
    {
        "line": 107,
        "fullcodeline": "STRCPY(d, \"/\\\\\\\\\");"
    },
    {
        "line": 108,
        "fullcodeline": "STRCPY(d + 3, arg + 1);"
    },
    {
        "line": 69,
        "fullcodeline": "int si = 0, di = 0;"
    },
    {
        "line": 88,
        "fullcodeline": "if (STRCMP(arg, except_tbl[i][0]) == 0)"
    },
    {
        "line": 104,
        "fullcodeline": "|| (vim_strchr((char_u *)\"%_z@\", arg[1]) != NULL"
    },
    {
        "line": 110,
        "fullcodeline": "if (d[3] == '_' && d[4] == '$')"
    },
    {
        "line": 214,
        "fullcodeline": "*d = NUL;"
    },
    {
        "line": 255,
        "fullcodeline": "vim_free((*matches)[--*num_matches]);"
    },
    {
        "line": 90,
        "fullcodeline": "STRCPY(d, except_tbl[i][1]);"
    },
    {
        "line": 105,
        "fullcodeline": "&& arg[2] != NUL)))"
    },
    {
        "line": 111,
        "fullcodeline": "STRCPY(d + 4, \"\\\\$\");"
    },
    {
        "line": 119,
        "fullcodeline": "if ((arg[0] == '[' && (arg[1] == ':'"
    },
    {
        "line": 125,
        "fullcodeline": "if (*arg == '(' && arg[1] == '\\'')"
    },
    {
        "line": 127,
        "fullcodeline": "for (s = arg; *s; ++s)"
    },
    {
        "line": 216,
        "fullcodeline": "if (*IObuff == '`')"
    },
    {
        "line": 75,
        "fullcodeline": "d[di++] = arg[si];"
    },
    {
        "line": 78,
        "fullcodeline": "++si;"
    },
    {
        "line": 121,
        "fullcodeline": "|| (arg[0] == '\\\\' && arg[1] == '{'))"
    },
    {
        "line": 122,
        "fullcodeline": "*d++ = '\\\\';"
    },
    {
        "line": 126,
        "fullcodeline": "arg++;"
    },
    {
        "line": 199,
        "fullcodeline": "*d++ = *s;"
    },
    {
        "line": 73,
        "fullcodeline": "if (arg[si] == '~')"
    },
    {
        "line": 76,
        "fullcodeline": "if (arg[si] == NUL)"
    },
    {
        "line": 135,
        "fullcodeline": "if (d - IObuff > IOSIZE - 10)\t// getting too long!?"
    },
    {
        "line": 158,
        "fullcodeline": "if (*s < ' ' || (*s == '^' && s[1] && (ASCII_ISALPHA(s[1])"
    },
    {
        "line": 192,
        "fullcodeline": "if (STRNICMP(s, \"CTRL-\\\\_\", 7) == 0)"
    },
    {
        "line": 203,
        "fullcodeline": "if (*s == '(' && (s[1] == '{' || s[1] =='['))"
    },
    {
        "line": 208,
        "fullcodeline": "if (*s == '\\'' && s > arg && *arg == '\\'')"
    },
    {
        "line": 211,
        "fullcodeline": "if (*s == '}' && s > arg && *arg == '{')"
    },
    {
        "line": 218,
        "fullcodeline": "if (d > IObuff + 2 && d[-1] == '`')"
    },
    {
        "line": 74,
        "fullcodeline": "d[di++] = '\\\\';"
    },
    {
        "line": 120,
        "fullcodeline": "|| (arg[1] == '+' && arg[2] == '+')))"
    },
    {
        "line": 139,
        "fullcodeline": "case '|':   STRCPY(d, \"bar\");"
    },
    {
        "line": 140,
        "fullcodeline": "d += 3;"
    },
    {
        "line": 142,
        "fullcodeline": "case '\"':   STRCPY(d, \"quote\");"
    },
    {
        "line": 143,
        "fullcodeline": "d += 5;"
    },
    {
        "line": 145,
        "fullcodeline": "case '*':   *d++ = '.';"
    },
    {
        "line": 147,
        "fullcodeline": "case '?':   *d++ = '.';"
    },
    {
        "line": 151,
        "fullcodeline": "case '~':   *d++ = '\\\\';"
    },
    {
        "line": 163,
        "fullcodeline": "STRCPY(d, \"CTRL-\");"
    },
    {
        "line": 164,
        "fullcodeline": "d += 5;"
    },
    {
        "line": 194,
        "fullcodeline": "STRCPY(d, \"CTRL-\\\\\\\\\");"
    },
    {
        "line": 195,
        "fullcodeline": "d += 7;"
    },
    {
        "line": 196,
        "fullcodeline": "s += 6;"
    },
    {
        "line": 221,
        "fullcodeline": "mch_memmove(IObuff, IObuff + 1, STRLEN(IObuff));"
    },
    {
        "line": 222,
        "fullcodeline": "d[-2] = NUL;"
    },
    {
        "line": 161,
        "fullcodeline": "if (d > IObuff && d[-1] != '_' && d[-1] != '\\\\')"
    },
    {
        "line": 165,
        "fullcodeline": "if (*s < ' ')"
    },
    {
        "line": 177,
        "fullcodeline": "if (s[1] != NUL && s[1] != '_')"
    },
    {
        "line": 159,
        "fullcodeline": "|| vim_strchr((char_u *)\"?@[\\\\]^\", s[1]) != NULL)))"
    },
    {
        "line": 162,
        "fullcodeline": "*d++ = '_';\t\t// prepend a '_' to make x_CTRL-x"
    },
    {
        "line": 170,
        "fullcodeline": "*d++ = *s + '@';"
    },
    {
        "line": 178,
        "fullcodeline": "*d++ = '_';\t\t// append a '_'"
    },
    {
        "line": 181,
        "fullcodeline": "else if (*s == '^')\t\t// \"^\" or \"CTRL-^\" or \"^_\""
    },
    {
        "line": 224,
        "fullcodeline": "else if (d > IObuff + 3 && d[-2] == '`' && d[-1] == ',')"
    },
    {
        "line": 172,
        "fullcodeline": "if (d[-1] == '\\\\')"
    },
    {
        "line": 182,
        "fullcodeline": "*d++ = '\\\\';"
    },
    {
        "line": 227,
        "fullcodeline": "mch_memmove(IObuff, IObuff + 1, STRLEN(IObuff));"
    },
    {
        "line": 228,
        "fullcodeline": "d[-3] = NUL;"
    },
    {
        "line": 173,
        "fullcodeline": "*d++ = '\\\\';\t// double a backslash"
    },
    {
        "line": 176,
        "fullcodeline": "*d++ = *++s;"
    },
    {
        "line": 186,
        "fullcodeline": "else if (s[0] == '\\\\' && s[1] != '\\\\'"
    },
    {
        "line": 230,
        "fullcodeline": "else if (d > IObuff + 4 && d[-3] == '`'"
    },
    {
        "line": 187,
        "fullcodeline": "&& *arg == '/' && s == arg + 1)"
    },
    {
        "line": 188,
        "fullcodeline": "*d++ = '\\\\';"
    },
    {
        "line": 231,
        "fullcodeline": "&& d[-2] == '\\\\' && d[-1] == '.')"
    },
    {
        "line": 234,
        "fullcodeline": "mch_memmove(IObuff, IObuff + 1, STRLEN(IObuff));"
    },
    {
        "line": 235,
        "fullcodeline": "d[-4] = NUL;"
    }
]