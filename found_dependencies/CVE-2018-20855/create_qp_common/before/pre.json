[
    {
        "line": 5,
        "fullcodeline": "struct mlx5_ib_resources *devr = &dev->devr;"
    },
    {
        "line": 6,
        "fullcodeline": "int inlen = MLX5_ST_SZ_BYTES(create_qp_in);"
    },
    {
        "line": 7,
        "fullcodeline": "struct mlx5_core_dev *mdev = dev->mdev;"
    },
    {
        "line": 12,
        "fullcodeline": "u32 uidx = MLX5_IB_DEFAULT_UIDX;"
    },
    {
        "line": 20,
        "fullcodeline": "mutex_init(&qp->mutex);"
    },
    {
        "line": 21,
        "fullcodeline": "spin_lock_init(&qp->sq.lock);"
    },
    {
        "line": 22,
        "fullcodeline": "spin_lock_init(&qp->rq.lock);"
    },
    {
        "line": 24,
        "fullcodeline": "mlx5_st = to_mlx5_st(init_attr->qp_type);"
    },
    {
        "line": 130,
        "fullcodeline": "base = (init_attr->qp_type == IB_QPT_RAW_PACKET ||"
    },
    {
        "line": 135,
        "fullcodeline": "qp->has_rq = qp_has_rq(init_attr);"
    },
    {
        "line": 136,
        "fullcodeline": "err = set_rq_size(dev, &init_attr->cap, qp->has_rq,"
    },
    {
        "line": 187,
        "fullcodeline": "qpc = MLX5_ADDR_OF(create_qp_in, in, qpc);"
    },
    {
        "line": 189,
        "fullcodeline": "MLX5_SET(qpc, qpc, st, mlx5_st);"
    },
    {
        "line": 190,
        "fullcodeline": "MLX5_SET(qpc, qpc, pm_state, MLX5_QP_PM_MIGRATED);"
    },
    {
        "line": 236,
        "fullcodeline": "MLX5_SET(qpc, qpc, rq_type, get_rx_type(qp, init_attr));"
    },
    {
        "line": 277,
        "fullcodeline": "MLX5_SET64(qpc, qpc, dbr_addr, qp->db.dma);"
    },
    {
        "line": 325,
        "fullcodeline": "base->mqp.event = mlx5_ib_qp_event;"
    },
    {
        "line": 327,
        "fullcodeline": "get_cqs(init_attr->qp_type, init_attr->send_cq, init_attr->recv_cq,"
    },
    {
        "line": 329,
        "fullcodeline": "spin_lock_irqsave(&dev->reset_flow_resource_lock, flags);"
    },
    {
        "line": 330,
        "fullcodeline": "mlx5_ib_lock_cqs(send_cq, recv_cq);"
    },
    {
        "line": 25,
        "fullcodeline": "if (mlx5_st < 0)"
    },
    {
        "line": 36,
        "fullcodeline": "if (init_attr->create_flags & IB_QP_CREATE_BLOCK_MULTICAST_LOOPBACK) {"
    },
    {
        "line": 45,
        "fullcodeline": "if (init_attr->create_flags &"
    },
    {
        "line": 61,
        "fullcodeline": "if (init_attr->qp_type == IB_QPT_UD &&"
    },
    {
        "line": 68,
        "fullcodeline": "if (init_attr->create_flags & IB_QP_CREATE_SCATTER_FCS) {"
    },
    {
        "line": 81,
        "fullcodeline": "if (init_attr->sq_sig_type == IB_SIGNAL_ALL_WR)"
    },
    {
        "line": 84,
        "fullcodeline": "if (init_attr->create_flags & IB_QP_CREATE_CVLAN_STRIPPING) {"
    },
    {
        "line": 92,
        "fullcodeline": "if (pd && pd->uobject) {"
    },
    {
        "line": 184,
        "fullcodeline": "if (is_sqp(init_attr->qp_type))"
    },
    {
        "line": 192,
        "fullcodeline": "if (init_attr->qp_type != MLX5_IB_QPT_REG_UMR)"
    },
    {
        "line": 201,
        "fullcodeline": "if (qp->flags & MLX5_IB_QP_BLOCK_MULTICAST_LOOPBACK)"
    },
    {
        "line": 204,
        "fullcodeline": "if (qp->flags & MLX5_IB_QP_CROSS_CHANNEL)"
    },
    {
        "line": 206,
        "fullcodeline": "if (qp->flags & MLX5_IB_QP_MANAGED_SEND)"
    },
    {
        "line": 208,
        "fullcodeline": "if (qp->flags & MLX5_IB_QP_MANAGED_RECV)"
    },
    {
        "line": 211,
        "fullcodeline": "if (qp->scat_cqe && is_connected(init_attr->qp_type)) {"
    },
    {
        "line": 280,
        "fullcodeline": "if (MLX5_CAP_GEN(mdev, cqe_version) == MLX5_CQE_VERSION_V1)"
    },
    {
        "line": 290,
        "fullcodeline": "if (init_attr->create_flags & IB_QP_CREATE_PCI_WRITE_END_PADDING) {"
    },
    {
        "line": 303,
        "fullcodeline": "if (inlen < 0) {"
    },
    {
        "line": 347,
        "fullcodeline": "if (qp->create_type == MLX5_QP_USER)"
    },
    {
        "line": 32,
        "fullcodeline": "err = create_rss_raw_qp_tir(dev, qp, pd, init_attr, udata);"
    },
    {
        "line": 46,
        "fullcodeline": "(IB_QP_CREATE_CROSS_CHANNEL |"
    },
    {
        "line": 62,
        "fullcodeline": "(init_attr->create_flags & IB_QP_CREATE_IPOIB_UD_LSO))"
    },
    {
        "line": 78,
        "fullcodeline": "qp->flags |= MLX5_IB_QP_CAP_SCATTER_FCS;"
    },
    {
        "line": 82,
        "fullcodeline": "qp->sq_signal_bits = MLX5_WQE_CTRL_CQ_UPDATE;"
    },
    {
        "line": 89,
        "fullcodeline": "qp->flags |= MLX5_IB_QP_CVLAN_STRIPPING;"
    },
    {
        "line": 98,
        "fullcodeline": "err = get_qp_user_index(to_mucontext(pd->uobject->context),"
    },
    {
        "line": 103,
        "fullcodeline": "qp->wq_sig = !!(ucmd.flags & MLX5_QP_FLAG_SIGNATURE);"
    },
    {
        "line": 104,
        "fullcodeline": "qp->scat_cqe = !!(ucmd.flags & MLX5_QP_FLAG_SCATTER_CQE);"
    },
    {
        "line": 137,
        "fullcodeline": "qp, (pd && pd->uobject) ? &ucmd : NULL);"
    },
    {
        "line": 139,
        "fullcodeline": "mlx5_ib_dbg(dev, \"err %d\\n\", err);"
    },
    {
        "line": 185,
        "fullcodeline": "qp->port = init_attr->port_num;"
    },
    {
        "line": 193,
        "fullcodeline": "MLX5_SET(qpc, qpc, pd, to_mpd(pd ? pd : devr->p0)->pdn);"
    },
    {
        "line": 199,
        "fullcodeline": "MLX5_SET(qpc, qpc, wq_signature, 1);"
    },
    {
        "line": 202,
        "fullcodeline": "MLX5_SET(qpc, qpc, block_lb_mc, 1);"
    },
    {
        "line": 205,
        "fullcodeline": "MLX5_SET(qpc, qpc, cd_master, 1);"
    },
    {
        "line": 207,
        "fullcodeline": "MLX5_SET(qpc, qpc, cd_slave_send, 1);"
    },
    {
        "line": 209,
        "fullcodeline": "MLX5_SET(qpc, qpc, cd_slave_receive, 1);"
    },
    {
        "line": 215,
        "fullcodeline": "rcqe_sz = mlx5_ib_get_cqe_size(dev, init_attr->recv_cq);"
    },
    {
        "line": 216,
        "fullcodeline": "scqe_sz = mlx5_ib_get_cqe_size(dev, init_attr->send_cq);"
    },
    {
        "line": 232,
        "fullcodeline": "MLX5_SET(qpc, qpc, log_rq_stride, qp->rq.wqe_shift - 4);"
    },
    {
        "line": 233,
        "fullcodeline": "MLX5_SET(qpc, qpc, log_rq_size, ilog2(qp->rq.wqe_cnt));"
    },
    {
        "line": 239,
        "fullcodeline": "MLX5_SET(qpc, qpc, log_sq_size, ilog2(qp->sq.wqe_cnt));"
    },
    {
        "line": 251,
        "fullcodeline": "MLX5_SET(qpc, qpc, cqn_rcv, to_mcq(devr->c0)->mcq.cqn);"
    },
    {
        "line": 252,
        "fullcodeline": "MLX5_SET(qpc, qpc, cqn_snd, to_mcq(devr->c0)->mcq.cqn);"
    },
    {
        "line": 253,
        "fullcodeline": "MLX5_SET(qpc, qpc, srqn_rmpn_xrqn, to_msrq(devr->s0)->msrq.srqn);"
    },
    {
        "line": 254,
        "fullcodeline": "MLX5_SET(qpc, qpc, xrcd, to_mxrcd(init_attr->xrcd)->xrcdn);"
    },
    {
        "line": 257,
        "fullcodeline": "MLX5_SET(qpc, qpc, cqn_rcv, to_mcq(devr->c0)->mcq.cqn);"
    },
    {
        "line": 258,
        "fullcodeline": "MLX5_SET(qpc, qpc, xrcd, to_mxrcd(devr->x1)->xrcdn);"
    },
    {
        "line": 259,
        "fullcodeline": "MLX5_SET(qpc, qpc, srqn_rmpn_xrqn, to_msrq(devr->s0)->msrq.srqn);"
    },
    {
        "line": 272,
        "fullcodeline": "MLX5_SET(qpc, qpc, cqn_snd, to_mcq(init_attr->send_cq)->mcq.cqn);"
    },
    {
        "line": 275,
        "fullcodeline": "MLX5_SET(qpc, qpc, cqn_rcv, to_mcq(init_attr->recv_cq)->mcq.cqn);"
    },
    {
        "line": 281,
        "fullcodeline": "MLX5_SET(qpc, qpc, user_index, uidx);"
    },
    {
        "line": 284,
        "fullcodeline": "if (init_attr->qp_type == IB_QPT_UD &&"
    },
    {
        "line": 285,
        "fullcodeline": "(init_attr->create_flags & IB_QP_CREATE_IPOIB_UD_LSO)) {"
    },
    {
        "line": 286,
        "fullcodeline": "MLX5_SET(qpc, qpc, ulp_stateless_offload_mode, 1);"
    },
    {
        "line": 287,
        "fullcodeline": "qp->flags |= MLX5_IB_QP_LSO;"
    },
    {
        "line": 304,
        "fullcodeline": "err = -EINVAL;"
    },
    {
        "line": 308,
        "fullcodeline": "if (init_attr->qp_type == IB_QPT_RAW_PACKET ||"
    },
    {
        "line": 309,
        "fullcodeline": "qp->flags & MLX5_IB_QP_UNDERLAY) {"
    },
    {
        "line": 311,
        "fullcodeline": "raw_packet_qp_copy_info(qp, &qp->raw_packet_qp);"
    },
    {
        "line": 312,
        "fullcodeline": "err = create_raw_packet_qp(dev, qp, in, inlen, pd);"
    },
    {
        "line": 318,
        "fullcodeline": "mlx5_ib_dbg(dev, \"create qp failed\\n\");"
    },
    {
        "line": 26,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 29,
        "fullcodeline": "if (!udata)"
    },
    {
        "line": 53,
        "fullcodeline": "if (init_attr->create_flags & IB_QP_CREATE_CROSS_CHANNEL)"
    },
    {
        "line": 55,
        "fullcodeline": "if (init_attr->create_flags & IB_QP_CREATE_MANAGED_SEND)"
    },
    {
        "line": 57,
        "fullcodeline": "if (init_attr->create_flags & IB_QP_CREATE_MANAGED_RECV)"
    },
    {
        "line": 69,
        "fullcodeline": "if (init_attr->qp_type != IB_QPT_RAW_PACKET) {"
    },
    {
        "line": 93,
        "fullcodeline": "if (ib_copy_from_udata(&ucmd, udata, sizeof(ucmd))) {"
    },
    {
        "line": 105,
        "fullcodeline": "if (ucmd.flags & MLX5_QP_FLAG_TUNNEL_OFFLOADS) {"
    },
    {
        "line": 114,
        "fullcodeline": "if (init_attr->create_flags & IB_QP_CREATE_SOURCE_QPN) {"
    },
    {
        "line": 127,
        "fullcodeline": "qp->wq_sig = !!wq_signature;"
    },
    {
        "line": 131,
        "fullcodeline": "qp->flags & MLX5_IB_QP_UNDERLAY) ?"
    },
    {
        "line": 177,
        "fullcodeline": "in = kvzalloc(inlen, GFP_KERNEL);"
    },
    {
        "line": 181,
        "fullcodeline": "qp->create_type = MLX5_QP_EMPTY;"
    },
    {
        "line": 195,
        "fullcodeline": "MLX5_SET(qpc, qpc, latency_sensitive, 1);"
    },
    {
        "line": 223,
        "fullcodeline": "if (init_attr->sq_sig_type == IB_SIGNAL_ALL_WR) {"
    },
    {
        "line": 241,
        "fullcodeline": "MLX5_SET(qpc, qpc, no_sq, 1);"
    },
    {
        "line": 314,
        "fullcodeline": "err = mlx5_core_create_qp(dev->mdev, &base->mqp, in, inlen);"
    },
    {
        "line": 37,
        "fullcodeline": "if (!MLX5_CAP_GEN(mdev, block_lb_mc)) {"
    },
    {
        "line": 49,
        "fullcodeline": "if (!MLX5_CAP_GEN(mdev, cd)) {"
    },
    {
        "line": 54,
        "fullcodeline": "qp->flags |= MLX5_IB_QP_CROSS_CHANNEL;"
    },
    {
        "line": 56,
        "fullcodeline": "qp->flags |= MLX5_IB_QP_MANAGED_SEND;"
    },
    {
        "line": 58,
        "fullcodeline": "qp->flags |= MLX5_IB_QP_MANAGED_RECV;"
    },
    {
        "line": 63,
        "fullcodeline": "if (!MLX5_CAP_GEN(mdev, ipoib_basic_offloads)) {"
    },
    {
        "line": 73,
        "fullcodeline": "if (!MLX5_CAP_GEN(dev->mdev, eth_net_offloads) ||"
    },
    {
        "line": 74,
        "fullcodeline": "!MLX5_CAP_ETH(dev->mdev, scatter_fcs)) {"
    },
    {
        "line": 85,
        "fullcodeline": "if (!(MLX5_CAP_GEN(dev->mdev, eth_net_offloads) &&"
    },
    {
        "line": 87,
        "fullcodeline": "(init_attr->qp_type != IB_QPT_RAW_PACKET))"
    },
    {
        "line": 111,
        "fullcodeline": "qp->tunnel_offload_en = true;"
    },
    {
        "line": 123,
        "fullcodeline": "qp->flags |= MLX5_IB_QP_UNDERLAY;"
    },
    {
        "line": 124,
        "fullcodeline": "qp->underlay_qpn = init_attr->source_qpn;"
    },
    {
        "line": 145,
        "fullcodeline": "__u32 max_wqes ="
    },
    {
        "line": 147,
        "fullcodeline": "mlx5_ib_dbg(dev, \"requested sq_wqe_count (%d)\\n\", ucmd.sq_wqe_count);"
    },
    {
        "line": 163,
        "fullcodeline": "err = create_user_qp(dev, pd, qp, udata, init_attr, &in,"
    },
    {
        "line": 178,
        "fullcodeline": "if (!in)"
    },
    {
        "line": 219,
        "fullcodeline": "MLX5_SET(qpc, qpc, cs_res, MLX5_RES_SCAT_DATA64_CQE);"
    },
    {
        "line": 242,
        "fullcodeline": "if (init_attr->srq &&"
    },
    {
        "line": 263,
        "fullcodeline": "MLX5_SET(qpc, qpc, xrcd, to_mxrcd(devr->x0)->xrcdn);"
    },
    {
        "line": 264,
        "fullcodeline": "MLX5_SET(qpc, qpc, srqn_rmpn_xrqn, to_msrq(init_attr->srq)->msrq.srqn);"
    },
    {
        "line": 291,
        "fullcodeline": "if (!MLX5_CAP_GEN(dev->mdev, end_pad)) {"
    },
    {
        "line": 293,
        "fullcodeline": "err = -EOPNOTSUPP;"
    },
    {
        "line": 349,
        "fullcodeline": "else if (qp->create_type == MLX5_QP_KERNEL)"
    },
    {
        "line": 30,
        "fullcodeline": "return -ENOSYS;"
    },
    {
        "line": 39,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 41,
        "fullcodeline": "qp->flags |= MLX5_IB_QP_BLOCK_MULTICAST_LOOPBACK;"
    },
    {
        "line": 51,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 65,
        "fullcodeline": "return -EOPNOTSUPP;"
    },
    {
        "line": 71,
        "fullcodeline": "return -EOPNOTSUPP;"
    },
    {
        "line": 76,
        "fullcodeline": "return -EOPNOTSUPP;"
    },
    {
        "line": 88,
        "fullcodeline": "return -EOPNOTSUPP;"
    },
    {
        "line": 95,
        "fullcodeline": "return -EFAULT;"
    },
    {
        "line": 146,
        "fullcodeline": "1 << MLX5_CAP_GEN(mdev, log_max_qp_sz);"
    },
    {
        "line": 153,
        "fullcodeline": "if (ucmd.sq_wqe_count > max_wqes) {"
    },
    {
        "line": 158,
        "fullcodeline": "if (init_attr->create_flags &"
    },
    {
        "line": 168,
        "fullcodeline": "err = create_kernel_qp(dev, init_attr, qp, &in, &inlen,"
    },
    {
        "line": 221,
        "fullcodeline": "MLX5_SET(qpc, qpc, cs_res, MLX5_RES_SCAT_DATA32_CQE);"
    },
    {
        "line": 243,
        "fullcodeline": "init_attr->srq->srq_type == IB_SRQT_TM)"
    },
    {
        "line": 244,
        "fullcodeline": "MLX5_SET(qpc, qpc, offload_type,"
    },
    {
        "line": 266,
        "fullcodeline": "MLX5_SET(qpc, qpc, xrcd, to_mxrcd(devr->x1)->xrcdn);"
    },
    {
        "line": 267,
        "fullcodeline": "MLX5_SET(qpc, qpc, srqn_rmpn_xrqn, to_msrq(devr->s1)->msrq.srqn);"
    },
    {
        "line": 86,
        "fullcodeline": "MLX5_CAP_ETH(dev->mdev, vlan_cap)) ||"
    },
    {
        "line": 106,
        "fullcodeline": "if (init_attr->qp_type != IB_QPT_RAW_PACKET ||"
    },
    {
        "line": 107,
        "fullcodeline": "!tunnel_offload_supported(mdev)) {"
    },
    {
        "line": 115,
        "fullcodeline": "if (init_attr->qp_type != IB_QPT_UD ||"
    },
    {
        "line": 118,
        "fullcodeline": "!mlx5_get_flow_namespace(dev->mdev, MLX5_FLOW_NAMESPACE_BYPASS)) {"
    },
    {
        "line": 148,
        "fullcodeline": "if (ucmd.rq_wqe_shift != qp->rq.wqe_shift ||"
    },
    {
        "line": 149,
        "fullcodeline": "ucmd.rq_wqe_count != qp->rq.wqe_cnt) {"
    },
    {
        "line": 166,
        "fullcodeline": "mlx5_ib_dbg(dev, \"err %d\\n\", err);"
    },
    {
        "line": 179,
        "fullcodeline": "return -ENOMEM;"
    },
    {
        "line": 225,
        "fullcodeline": "MLX5_SET(qpc, qpc, cs_req, MLX5_REQ_SCAT_DATA64_CQE);"
    },
    {
        "line": 295,
        "fullcodeline": "} else if (init_attr->qp_type != IB_QPT_RAW_PACKET) {"
    },
    {
        "line": 109,
        "fullcodeline": "return -EOPNOTSUPP;"
    },
    {
        "line": 116,
        "fullcodeline": "(MLX5_CAP_GEN(dev->mdev, port_type) !="
    },
    {
        "line": 120,
        "fullcodeline": "return -EOPNOTSUPP;"
    },
    {
        "line": 151,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 156,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 161,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 171,
        "fullcodeline": "mlx5_ib_dbg(dev, \"err %d\\n\", err);"
    },
    {
        "line": 227,
        "fullcodeline": "MLX5_SET(qpc, qpc, cs_req, MLX5_REQ_SCAT_DATA32_CQE);"
    },
    {
        "line": 296,
        "fullcodeline": "MLX5_SET(qpc, qpc, end_padding_mode,"
    },
    {
        "line": 299,
        "fullcodeline": "qp->flags |= MLX5_IB_QP_PCI_WRITE_END_PADDING;"
    }
]