[
    {
        "line": 3,
        "fullcodeline": "GF_ADTSDmxCtx *ctx = gf_filter_get_udta(filter);"
    },
    {
        "line": 8,
        "fullcodeline": "u64 cts = GF_FILTER_NO_TS;"
    },
    {
        "line": 17,
        "fullcodeline": "pck = gf_filter_pid_get_packet(ctx->ipid);"
    },
    {
        "line": 32,
        "fullcodeline": "prev_pck_size = ctx->adts_buffer_size;"
    },
    {
        "line": 73,
        "fullcodeline": "remain = ctx->adts_buffer_size;"
    },
    {
        "line": 74,
        "fullcodeline": "start = ctx->adts_buffer;"
    },
    {
        "line": 14,
        "fullcodeline": "if (ctx->opid && !ctx->is_playing)"
    },
    {
        "line": 18,
        "fullcodeline": "if (!pck) {"
    },
    {
        "line": 33,
        "fullcodeline": "if (pck && !ctx->resume_from) {"
    },
    {
        "line": 61,
        "fullcodeline": "if (ctx->timescale && pck) {"
    },
    {
        "line": 68,
        "fullcodeline": "if (cts == GF_FILTER_NO_TS) {"
    },
    {
        "line": 323,
        "fullcodeline": "if (!pck) {"
    },
    {
        "line": 12,
        "fullcodeline": "adts_dmx_check_dur(filter, ctx);"
    },
    {
        "line": 34,
        "fullcodeline": "data = (char *) gf_filter_pck_get_data(pck, &pck_size);"
    },
    {
        "line": 56,
        "fullcodeline": "memcpy(ctx->adts_buffer + ctx->adts_buffer_size, data, pck_size);"
    },
    {
        "line": 57,
        "fullcodeline": "ctx->adts_buffer_size += pck_size;"
    },
    {
        "line": 62,
        "fullcodeline": "cts = gf_filter_pck_get_cts(pck);"
    },
    {
        "line": 70,
        "fullcodeline": "prev_pck_size = 0;"
    },
    {
        "line": 77,
        "fullcodeline": "start += ctx->resume_from - 1;"
    },
    {
        "line": 78,
        "fullcodeline": "remain -= ctx->resume_from - 1;"
    },
    {
        "line": 79,
        "fullcodeline": "ctx->resume_from = 0;"
    },
    {
        "line": 84,
        "fullcodeline": "u32 sync_pos, size, offset, bytes_to_drop=0, nb_blocks_per_frame;"
    },
    {
        "line": 124,
        "fullcodeline": "sync = memchr(start, 0xFF, remain);"
    },
    {
        "line": 125,
        "fullcodeline": "sync_pos = (u32) (sync ? sync - start : remain);"
    },
    {
        "line": 148,
        "fullcodeline": "gf_bs_read_int(ctx->bs, 4);"
    },
    {
        "line": 150,
        "fullcodeline": "ctx->hdr.is_mp2 = (Bool)gf_bs_read_int(ctx->bs, 1);"
    },
    {
        "line": 154,
        "fullcodeline": "ctx->hdr.is_mp2 = 0;"
    },
    {
        "line": 156,
        "fullcodeline": "gf_bs_read_int(ctx->bs, 2);"
    },
    {
        "line": 157,
        "fullcodeline": "ctx->hdr.no_crc = (Bool)gf_bs_read_int(ctx->bs, 1);"
    },
    {
        "line": 159,
        "fullcodeline": "ctx->hdr.profile = 1 + gf_bs_read_int(ctx->bs, 2);"
    },
    {
        "line": 160,
        "fullcodeline": "ctx->hdr.sr_idx = gf_bs_read_int(ctx->bs, 4);"
    },
    {
        "line": 161,
        "fullcodeline": "gf_bs_read_int(ctx->bs, 1);"
    },
    {
        "line": 162,
        "fullcodeline": "ctx->hdr.nb_ch = gf_bs_read_int(ctx->bs, 3);"
    },
    {
        "line": 164,
        "fullcodeline": "gf_bs_read_int(ctx->bs, 4);"
    },
    {
        "line": 165,
        "fullcodeline": "ctx->hdr.frame_size = gf_bs_read_int(ctx->bs, 13);"
    },
    {
        "line": 166,
        "fullcodeline": "gf_bs_read_int(ctx->bs, 11);"
    },
    {
        "line": 167,
        "fullcodeline": "nb_blocks_per_frame = gf_bs_read_int(ctx->bs, 2);"
    },
    {
        "line": 168,
        "fullcodeline": "ctx->hdr.hdr_size = 7;"
    },
    {
        "line": 245,
        "fullcodeline": "adts_dmx_check_pid(filter, ctx);"
    },
    {
        "line": 251,
        "fullcodeline": "ctx->is_sync = GF_TRUE;"
    },
    {
        "line": 253,
        "fullcodeline": "ctx->nb_frames++;"
    },
    {
        "line": 254,
        "fullcodeline": "size = ctx->hdr.frame_size - ctx->hdr.hdr_size;"
    },
    {
        "line": 255,
        "fullcodeline": "offset = ctx->hdr.hdr_size;"
    },
    {
        "line": 268,
        "fullcodeline": "bytes_to_drop = ctx->hdr.frame_size;"
    },
    {
        "line": 293,
        "fullcodeline": "adts_dmx_update_cts(ctx);"
    },
    {
        "line": 306,
        "fullcodeline": "start += bytes_to_drop;"
    },
    {
        "line": 307,
        "fullcodeline": "remain -= bytes_to_drop;"
    },
    {
        "line": 324,
        "fullcodeline": "ctx->adts_buffer_size = 0;"
    },
    {
        "line": 19,
        "fullcodeline": "if (gf_filter_pid_is_eos(ctx->ipid)) {"
    },
    {
        "line": 35,
        "fullcodeline": "if (!pck_size) {"
    },
    {
        "line": 40,
        "fullcodeline": "if (ctx->byte_offset != GF_FILTER_NO_BO) {"
    },
    {
        "line": 52,
        "fullcodeline": "if (ctx->adts_buffer_size + pck_size > ctx->adts_buffer_alloc) {"
    },
    {
        "line": 64,
        "fullcodeline": "if (!ctx->cts && (cts != GF_FILTER_NO_TS))"
    },
    {
        "line": 86,
        "fullcodeline": "if (!ctx->tag_size && (remain>3)) {"
    },
    {
        "line": 128,
        "fullcodeline": "if (remain - sync_pos < 7) {"
    },
    {
        "line": 133,
        "fullcodeline": "if ((sync[1] & 0xF0) != 0xF0) {"
    },
    {
        "line": 141,
        "fullcodeline": "if (!ctx->bs) {"
    },
    {
        "line": 170,
        "fullcodeline": "if (!ctx->hdr.no_crc) {"
    },
    {
        "line": 181,
        "fullcodeline": "if (!ctx->hdr.frame_size || !GF_M4ASampleRates[ctx->hdr.sr_idx]) {"
    },
    {
        "line": 186,
        "fullcodeline": "if ((nb_blocks_per_frame>2) || (nb_blocks_per_frame && ctx->hdr.nb_ch)) {"
    },
    {
        "line": 202,
        "fullcodeline": "if (nb_blocks_per_frame==2) {"
    },
    {
        "line": 212,
        "fullcodeline": "if (ctx->hdr.nb_ch==7)"
    },
    {
        "line": 218,
        "fullcodeline": "if (ctx->hdr.frame_size + sync_pos + 1 < remain) {"
    },
    {
        "line": 238,
        "fullcodeline": "if (ctx->hdr.frame_size < ctx->hdr.hdr_size) {"
    },
    {
        "line": 247,
        "fullcodeline": "if (!ctx->is_playing) {"
    },
    {
        "line": 257,
        "fullcodeline": "if ((nb_blocks_per_frame==2) && !ctx->hdr.no_crc)"
    },
    {
        "line": 269,
        "fullcodeline": "if (ctx->timescale && !prev_pck_size &&  (cts != GF_FILTER_NO_TS) ) {"
    },
    {
        "line": 274,
        "fullcodeline": "if (!ctx->in_seek) {"
    },
    {
        "line": 297,
        "fullcodeline": "if (bytes_to_drop>remain) {"
    },
    {
        "line": 303,
        "fullcodeline": "if (!bytes_to_drop) {"
    },
    {
        "line": 319,
        "fullcodeline": "if (ctx->byte_offset != GF_FILTER_NO_BO)"
    },
    {
        "line": 325,
        "fullcodeline": "return adts_dmx_process(filter);"
    },
    {
        "line": 330,
        "fullcodeline": "ctx->adts_buffer_size = remain;"
    },
    {
        "line": 331,
        "fullcodeline": "gf_filter_pid_drop_packet(ctx->ipid);"
    },
    {
        "line": 36,
        "fullcodeline": "gf_filter_pid_drop_packet(ctx->ipid);"
    },
    {
        "line": 41,
        "fullcodeline": "u64 byte_offset = gf_filter_pck_get_byte_offset(pck);"
    },
    {
        "line": 53,
        "fullcodeline": "ctx->adts_buffer_alloc = ctx->adts_buffer_size + pck_size;"
    },
    {
        "line": 54,
        "fullcodeline": "ctx->adts_buffer = gf_realloc(ctx->adts_buffer, ctx->adts_buffer_alloc);"
    },
    {
        "line": 65,
        "fullcodeline": "ctx->cts = cts;"
    },
    {
        "line": 113,
        "fullcodeline": "memcpy(ctx->id3_buffer + ctx->id3_buffer_size, start, bytes_to_drop);"
    },
    {
        "line": 114,
        "fullcodeline": "ctx->id3_buffer_size += bytes_to_drop;"
    },
    {
        "line": 138,
        "fullcodeline": "ctx->nb_frames = 0;"
    },
    {
        "line": 142,
        "fullcodeline": "ctx->bs = gf_bs_new(sync + 1, remain - sync_pos - 1, GF_BITSTREAM_READ);"
    },
    {
        "line": 177,
        "fullcodeline": "ctx->hdr.hdr_size += skip;"
    },
    {
        "line": 178,
        "fullcodeline": "gf_bs_skip_bytes(ctx->bs, skip);"
    },
    {
        "line": 182,
        "fullcodeline": "GF_LOG(GF_LOG_DEBUG, GF_LOG_MEDIA, (\"[ADTSDmx] Invalid ADTS frame header, resyncing\\n\"));"
    },
    {
        "line": 183,
        "fullcodeline": "ctx->nb_frames = 0;"
    },
    {
        "line": 187,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_MEDIA, (\"[ADTSDmx] Unsupported multi-block ADTS frame header - patch welcome\\n\"));"
    },
    {
        "line": 188,
        "fullcodeline": "ctx->nb_frames = 0;"
    },
    {
        "line": 203,
        "fullcodeline": "u32 pos = (u32) gf_bs_get_position(ctx->bs);"
    },
    {
        "line": 204,
        "fullcodeline": "gf_m4a_parse_program_config_element(ctx->bs, &ctx->acfg);"
    },
    {
        "line": 208,
        "fullcodeline": "ctx->hdr.hdr_size += (u32) gf_bs_get_position(ctx->bs) - pos;"
    },
    {
        "line": 213,
        "fullcodeline": "ctx->hdr.nb_ch = 8;"
    },
    {
        "line": 219,
        "fullcodeline": "u32 next_frame = ctx->hdr.frame_size;"
    },
    {
        "line": 239,
        "fullcodeline": "GF_LOG(ctx->is_sync ? GF_LOG_WARNING : GF_LOG_DEBUG, GF_LOG_MEDIA, (\"[ADTSDmx] Corrupted ADTS frame header, resyncing\\n\"));"
    },
    {
        "line": 240,
        "fullcodeline": "ctx->is_sync = GF_FALSE;"
    },
    {
        "line": 241,
        "fullcodeline": "ctx->nb_frames = 0;"
    },
    {
        "line": 248,
        "fullcodeline": "ctx->resume_from = 1 + ctx->adts_buffer_size - remain;"
    },
    {
        "line": 258,
        "fullcodeline": "size -= 2;"
    },
    {
        "line": 261,
        "fullcodeline": "u64 nb_samples_at_seek = (u64) (ctx->start_range * GF_M4ASampleRates[ctx->sr_idx]);"
    },
    {
        "line": 270,
        "fullcodeline": "ctx->cts = cts;"
    },
    {
        "line": 271,
        "fullcodeline": "cts = GF_FILTER_NO_TS;"
    },
    {
        "line": 275,
        "fullcodeline": "dst_pck = gf_filter_pck_new_alloc(ctx->opid, size, &output);"
    },
    {
        "line": 279,
        "fullcodeline": "memcpy(output, sync + offset, size);"
    },
    {
        "line": 281,
        "fullcodeline": "gf_filter_pck_set_dts(dst_pck, ctx->cts);"
    },
    {
        "line": 282,
        "fullcodeline": "gf_filter_pck_set_cts(dst_pck, ctx->cts);"
    },
    {
        "line": 283,
        "fullcodeline": "gf_filter_pck_set_duration(dst_pck, ctx->dts_inc);"
    },
    {
        "line": 284,
        "fullcodeline": "gf_filter_pck_set_framing(dst_pck, GF_TRUE, GF_TRUE);"
    },
    {
        "line": 285,
        "fullcodeline": "gf_filter_pck_set_sap(dst_pck, GF_FILTER_SAP_1);"
    },
    {
        "line": 291,
        "fullcodeline": "gf_filter_pck_send(dst_pck);"
    },
    {
        "line": 298,
        "fullcodeline": "GF_LOG(GF_LOG_WARNING, GF_LOG_MEDIA, (\"[ADTSDmx] truncated ADTS frame %d bytes but only %d left!\\n\", bytes_to_drop, remain));"
    },
    {
        "line": 299,
        "fullcodeline": "bytes_to_drop=remain;"
    },
    {
        "line": 304,
        "fullcodeline": "bytes_to_drop = 1;"
    },
    {
        "line": 320,
        "fullcodeline": "ctx->byte_offset += bytes_to_drop;"
    },
    {
        "line": 20,
        "fullcodeline": "if (!ctx->adts_buffer_size) {"
    },
    {
        "line": 42,
        "fullcodeline": "if (!ctx->adts_buffer_size) {"
    },
    {
        "line": 89,
        "fullcodeline": "if (start[0] == 'I' && start[1] == 'D' && start[2] == '3') {"
    },
    {
        "line": 106,
        "fullcodeline": "if (ctx->tag_size>remain) {"
    },
    {
        "line": 116,
        "fullcodeline": "if (!ctx->tag_size && ctx->opid) {"
    },
    {
        "line": 144,
        "fullcodeline": "gf_bs_reassign_buffer(ctx->bs, sync + 1, remain - sync_pos - 1);"
    },
    {
        "line": 172,
        "fullcodeline": "if (!nb_blocks_per_frame) {"
    },
    {
        "line": 205,
        "fullcodeline": "if (!ctx->hdr.no_crc)"
    },
    {
        "line": 221,
        "fullcodeline": "if ((sync[next_frame] !=0xFF) || ((sync[next_frame+1] & 0xF0) !=0xF0) ) {"
    },
    {
        "line": 262,
        "fullcodeline": "if (ctx->cts + ctx->dts_inc >= nb_samples_at_seek) {"
    },
    {
        "line": 276,
        "fullcodeline": "if (!dst_pck) return GF_OUT_OF_MEM;"
    },
    {
        "line": 287,
        "fullcodeline": "if (ctx->byte_offset != GF_FILTER_NO_BO) {"
    },
    {
        "line": 310,
        "fullcodeline": "if (prev_pck_size > bytes_to_drop) prev_pck_size -= bytes_to_drop;"
    },
    {
        "line": 328,
        "fullcodeline": "memmove(ctx->adts_buffer, start, remain);"
    },
    {
        "line": 24,
        "fullcodeline": "ctx->src_pck = NULL;"
    },
    {
        "line": 43,
        "fullcodeline": "ctx->byte_offset = byte_offset;"
    },
    {
        "line": 93,
        "fullcodeline": "ctx->tag_size = ((start[9] & 0x7f) + ((start[8] & 0x7f) << 7) + ((start[7] & 0x7f) << 14) + ((start[6] & 0x7f) << 21));"
    },
    {
        "line": 95,
        "fullcodeline": "bytes_to_drop = 10;"
    },
    {
        "line": 100,
        "fullcodeline": "memcpy(ctx->id3_buffer, start, 10);"
    },
    {
        "line": 101,
        "fullcodeline": "ctx->id3_buffer_size = 10;"
    },
    {
        "line": 107,
        "fullcodeline": "bytes_to_drop = remain;"
    },
    {
        "line": 108,
        "fullcodeline": "ctx->tag_size-=remain;"
    },
    {
        "line": 117,
        "fullcodeline": "id3dmx_flush(filter, ctx->id3_buffer, ctx->id3_buffer_size, ctx->opid, ctx->expart ? &ctx->vpid : NULL);"
    },
    {
        "line": 118,
        "fullcodeline": "ctx->id3_buffer_size = 0;"
    },
    {
        "line": 135,
        "fullcodeline": "GF_LOG(ctx->nb_frames ? GF_LOG_WARNING : GF_LOG_DEBUG, GF_LOG_MEDIA, (\"[ADTSDmx] invalid ADTS sync bytes, resyncing\\n\"));"
    },
    {
        "line": 136,
        "fullcodeline": "ctx->is_sync=GF_FALSE;"
    },
    {
        "line": 173,
        "fullcodeline": "skip = 2;"
    },
    {
        "line": 190,
        "fullcodeline": "} else if (!nb_blocks_per_frame) {"
    },
    {
        "line": 206,
        "fullcodeline": "gf_bs_skip_bytes(ctx->bs, 2);  //per block CRC"
    },
    {
        "line": 226,
        "fullcodeline": "ctx->nb_frames = 0;"
    },
    {
        "line": 264,
        "fullcodeline": "ctx->in_seek = GF_FALSE;"
    },
    {
        "line": 277,
        "fullcodeline": "if (ctx->src_pck) gf_filter_pck_merge_properties(ctx->src_pck, dst_pck);"
    },
    {
        "line": 288,
        "fullcodeline": "gf_filter_pck_set_byte_offset(dst_pck, ctx->byte_offset + ctx->hdr.hdr_size);"
    },
    {
        "line": 90,
        "fullcodeline": "if (remain<10)"
    },
    {
        "line": 96,
        "fullcodeline": "if (ctx->id3_buffer_alloc < ctx->tag_size+10) {"
    },
    {
        "line": 110,
        "fullcodeline": "bytes_to_drop = ctx->tag_size;"
    },
    {
        "line": 111,
        "fullcodeline": "ctx->tag_size = 0;"
    },
    {
        "line": 175,
        "fullcodeline": "skip = 2 + 2*nb_blocks_per_frame; //and we have 2 bytes per raw_data_block"
    },
    {
        "line": 312,
        "fullcodeline": "prev_pck_size=0;"
    },
    {
        "line": 314,
        "fullcodeline": "ctx->src_pck = pck;"
    },
    {
        "line": 22,
        "fullcodeline": "gf_filter_pid_set_eos(ctx->opid);"
    },
    {
        "line": 23,
        "fullcodeline": "if (ctx->src_pck) gf_filter_pck_unref(ctx->src_pck);"
    },
    {
        "line": 44,
        "fullcodeline": "} else if (ctx->byte_offset + ctx->adts_buffer_size != byte_offset) {"
    },
    {
        "line": 97,
        "fullcodeline": "ctx->id3_buffer = gf_realloc(ctx->id3_buffer, ctx->tag_size+10);"
    },
    {
        "line": 98,
        "fullcodeline": "ctx->id3_buffer_alloc = ctx->tag_size+10;"
    },
    {
        "line": 191,
        "fullcodeline": "if (ctx->aacchcfg<0)"
    },
    {
        "line": 196,
        "fullcodeline": "if (!ctx->hdr.nb_ch) {"
    },
    {
        "line": 223,
        "fullcodeline": "GF_LOG(ctx->nb_frames ? GF_LOG_WARNING : GF_LOG_DEBUG, GF_LOG_MEDIA, (\"[ADTSDmx] invalid next ADTS frame sync, resyncing\\n\"));"
    },
    {
        "line": 224,
        "fullcodeline": "ctx->is_sync = GF_FALSE;"
    },
    {
        "line": 232,
        "fullcodeline": "if (ctx->timescale && !prev_pck_size &&  (cts != GF_FILTER_NO_TS) ) {"
    },
    {
        "line": 45,
        "fullcodeline": "ctx->byte_offset = GF_FILTER_NO_BO;"
    },
    {
        "line": 192,
        "fullcodeline": "ctx->hdr.nb_ch = -ctx->aacchcfg;"
    },
    {
        "line": 197,
        "fullcodeline": "GF_LOG(GF_LOG_WARNING, GF_LOG_MEDIA, (\"[ADTSDmx] Missing channel configuration in ADTS frame header, defaulting to stereo - use `--aacchcfg` to force config\\n\"));"
    },
    {
        "line": 198,
        "fullcodeline": "ctx->hdr.nb_ch = ctx->aacchcfg = 2;"
    },
    {
        "line": 233,
        "fullcodeline": "ctx->cts = cts;"
    },
    {
        "line": 313,
        "fullcodeline": "if (ctx->src_pck) gf_filter_pck_unref(ctx->src_pck);"
    },
    {
        "line": 316,
        "fullcodeline": "gf_filter_pck_ref_props(&ctx->src_pck);"
    },
    {
        "line": 46,
        "fullcodeline": "if ((byte_offset != GF_FILTER_NO_BO) && (byte_offset>ctx->adts_buffer_size) ) {"
    },
    {
        "line": 47,
        "fullcodeline": "ctx->byte_offset = byte_offset - ctx->adts_buffer_size;"
    },
    {
        "line": 193,
        "fullcodeline": "else if (!ctx->hdr.nb_ch)"
    },
    {
        "line": 194,
        "fullcodeline": "ctx->hdr.nb_ch = ctx->aacchcfg;"
    }
]