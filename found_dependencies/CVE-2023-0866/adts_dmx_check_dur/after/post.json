[
    {
        "line": 7,
        "fullcodeline": "s32 sr_idx = -1;"
    },
    {
        "line": 16,
        "fullcodeline": "p = gf_filter_pid_get_property(ctx->ipid, GF_PROP_PID_FILEPATH);"
    },
    {
        "line": 22,
        "fullcodeline": "ctx->is_file = GF_TRUE;"
    },
    {
        "line": 24,
        "fullcodeline": "stream = gf_fopen_ex(p->value.string, NULL, \"rb\", GF_TRUE);"
    },
    {
        "line": 31,
        "fullcodeline": "ctx->index_size = 0;"
    },
    {
        "line": 33,
        "fullcodeline": "bs = gf_bs_from_file(stream, GF_BITSTREAM_READ);"
    },
    {
        "line": 34,
        "fullcodeline": "duration = 0;"
    },
    {
        "line": 35,
        "fullcodeline": "cur_dur = 0;"
    },
    {
        "line": 60,
        "fullcodeline": "rate = gf_bs_get_position(bs);"
    },
    {
        "line": 61,
        "fullcodeline": "gf_bs_del(bs);"
    },
    {
        "line": 62,
        "fullcodeline": "gf_fclose(stream);"
    },
    {
        "line": 79,
        "fullcodeline": "p = gf_filter_pid_get_property(ctx->ipid, GF_PROP_PID_FILE_CACHED);"
    },
    {
        "line": 9,
        "fullcodeline": "if (!ctx->opid || ctx->timescale || ctx->file_loaded) return;"
    },
    {
        "line": 11,
        "fullcodeline": "if (ctx->index<=0) {"
    },
    {
        "line": 17,
        "fullcodeline": "if (!p || !p->value.string || !strncmp(p->value.string, \"gmem://\", 7)) {"
    },
    {
        "line": 25,
        "fullcodeline": "if (!stream) {"
    },
    {
        "line": 36,
        "fullcodeline": "while (adts_dmx_sync_frame_bs(bs, &hdr)) {"
    },
    {
        "line": 64,
        "fullcodeline": "if (sr_idx>=0) {"
    },
    {
        "line": 80,
        "fullcodeline": "if (p && p->value.boolean) ctx->file_loaded = GF_TRUE;"
    },
    {
        "line": 12,
        "fullcodeline": "ctx->file_loaded = GF_TRUE;"
    },
    {
        "line": 18,
        "fullcodeline": "ctx->is_file = GF_FALSE;"
    },
    {
        "line": 19,
        "fullcodeline": "ctx->file_loaded = GF_TRUE;"
    },
    {
        "line": 44,
        "fullcodeline": "sr_idx = hdr.sr_idx;"
    },
    {
        "line": 45,
        "fullcodeline": "duration += ctx->frame_size;"
    },
    {
        "line": 46,
        "fullcodeline": "cur_dur += ctx->frame_size;"
    },
    {
        "line": 58,
        "fullcodeline": "gf_bs_skip_bytes(bs, hdr.frame_size);"
    },
    {
        "line": 26,
        "fullcodeline": "if (gf_fileio_is_main_thread(p->value.string))"
    },
    {
        "line": 37,
        "fullcodeline": "if ((sr_idx>=0) && (sr_idx != hdr.sr_idx)) {"
    },
    {
        "line": 47,
        "fullcodeline": "if (cur_dur > ctx->index * GF_M4ASampleRates[sr_idx]) {"
    },
    {
        "line": 65,
        "fullcodeline": "if (!ctx->duration.num || (ctx->duration.num  * GF_M4ASampleRates[sr_idx] != duration * ctx->duration.den)) {"
    },
    {
        "line": 27,
        "fullcodeline": "ctx->file_loaded = GF_TRUE;"
    },
    {
        "line": 38,
        "fullcodeline": "duration *= GF_M4ASampleRates[hdr.sr_idx];"
    },
    {
        "line": 39,
        "fullcodeline": "duration /= GF_M4ASampleRates[sr_idx];"
    },
    {
        "line": 41,
        "fullcodeline": "cur_dur *= GF_M4ASampleRates[hdr.sr_idx];"
    },
    {
        "line": 42,
        "fullcodeline": "cur_dur /= GF_M4ASampleRates[sr_idx];"
    },
    {
        "line": 50,
        "fullcodeline": "ctx->indexes = gf_realloc(ctx->indexes, sizeof(ADTSIdx)*ctx->index_alloc_size);"
    },
    {
        "line": 51,
        "fullcodeline": "ctx->indexes[ctx->index_size].pos = gf_bs_get_position(bs) - hdr.hdr_size;"
    },
    {
        "line": 52,
        "fullcodeline": "ctx->indexes[ctx->index_size].duration = (Double) duration;"
    },
    {
        "line": 53,
        "fullcodeline": "ctx->indexes[ctx->index_size].duration /= GF_M4ASampleRates[sr_idx];"
    },
    {
        "line": 54,
        "fullcodeline": "ctx->index_size ++;"
    },
    {
        "line": 55,
        "fullcodeline": "cur_dur = 0;"
    },
    {
        "line": 66,
        "fullcodeline": "ctx->duration.num = (s32) duration;"
    },
    {
        "line": 67,
        "fullcodeline": "ctx->duration.den = GF_M4ASampleRates[sr_idx];"
    },
    {
        "line": 69,
        "fullcodeline": "gf_filter_pid_set_property(ctx->opid, GF_PROP_PID_DURATION, & PROP_FRAC64(ctx->duration));"
    },
    {
        "line": 48,
        "fullcodeline": "if (!ctx->index_alloc_size) ctx->index_alloc_size = 10;"
    },
    {
        "line": 71,
        "fullcodeline": "if (duration && !gf_sys_is_test_mode() ) {"
    },
    {
        "line": 72,
        "fullcodeline": "rate *= 8 * ctx->duration.den;"
    },
    {
        "line": 73,
        "fullcodeline": "rate /= ctx->duration.num;"
    },
    {
        "line": 74,
        "fullcodeline": "ctx->bitrate = (u32) rate;"
    },
    {
        "line": 49,
        "fullcodeline": "else if (ctx->index_alloc_size == ctx->index_size) ctx->index_alloc_size *= 2;"
    }
]