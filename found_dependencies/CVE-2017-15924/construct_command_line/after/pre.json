[
    {
        "line": 3,
        "fullcodeline": "static char cmd[BUF_SIZE];"
    },
    {
        "line": 7,
        "fullcodeline": "port = atoi(server->port);"
    },
    {
        "line": 9,
        "fullcodeline": "build_config(working_dir, manager, server);"
    },
    {
        "line": 11,
        "fullcodeline": "memset(cmd, 0, BUF_SIZE);"
    },
    {
        "line": 12,
        "fullcodeline": "snprintf(cmd, BUF_SIZE,"
    },
    {
        "line": 16,
        "fullcodeline": "if (manager->acl != NULL) {"
    },
    {
        "line": 20,
        "fullcodeline": "if (manager->timeout != NULL) {"
    },
    {
        "line": 30,
        "fullcodeline": "if (manager->user != NULL) {"
    },
    {
        "line": 38,
        "fullcodeline": "if (server->mode == NULL && manager->mode == UDP_ONLY) {"
    },
    {
        "line": 42,
        "fullcodeline": "if (server->mode == NULL && manager->mode == TCP_AND_UDP) {"
    },
    {
        "line": 46,
        "fullcodeline": "if (server->fast_open[0] == 0 && manager->fast_open) {"
    },
    {
        "line": 58,
        "fullcodeline": "if (server->plugin == NULL && manager->plugin) {"
    },
    {
        "line": 62,
        "fullcodeline": "if (server->plugin_opts == NULL && manager->plugin_opts) {"
    },
    {
        "line": 66,
        "fullcodeline": "for (i = 0; i < manager->nameserver_num; i++) {"
    },
    {
        "line": 70,
        "fullcodeline": "for (i = 0; i < manager->host_num; i++) {"
    },
    {
        "line": 76,
        "fullcodeline": "int len = strlen(cmd);"
    },
    {
        "line": 77,
        "fullcodeline": "snprintf(cmd + len, BUF_SIZE - len, \" --reuse-port\");"
    },
    {
        "line": 17,
        "fullcodeline": "int len = strlen(cmd);"
    },
    {
        "line": 18,
        "fullcodeline": "snprintf(cmd + len, BUF_SIZE - len, \" --acl %s\", manager->acl);"
    },
    {
        "line": 21,
        "fullcodeline": "int len = strlen(cmd);"
    },
    {
        "line": 22,
        "fullcodeline": "snprintf(cmd + len, BUF_SIZE - len, \" -t %s\", manager->timeout);"
    },
    {
        "line": 31,
        "fullcodeline": "int len = strlen(cmd);"
    },
    {
        "line": 32,
        "fullcodeline": "snprintf(cmd + len, BUF_SIZE - len, \" -a %s\", manager->user);"
    },
    {
        "line": 35,
        "fullcodeline": "int len = strlen(cmd);"
    },
    {
        "line": 36,
        "fullcodeline": "snprintf(cmd + len, BUF_SIZE - len, \" -v\");"
    },
    {
        "line": 39,
        "fullcodeline": "int len = strlen(cmd);"
    },
    {
        "line": 40,
        "fullcodeline": "snprintf(cmd + len, BUF_SIZE - len, \" -U\");"
    },
    {
        "line": 43,
        "fullcodeline": "int len = strlen(cmd);"
    },
    {
        "line": 44,
        "fullcodeline": "snprintf(cmd + len, BUF_SIZE - len, \" -u\");"
    },
    {
        "line": 47,
        "fullcodeline": "int len = strlen(cmd);"
    },
    {
        "line": 48,
        "fullcodeline": "snprintf(cmd + len, BUF_SIZE - len, \" --fast-open\");"
    },
    {
        "line": 51,
        "fullcodeline": "int len = strlen(cmd);"
    },
    {
        "line": 52,
        "fullcodeline": "snprintf(cmd + len, BUF_SIZE - len, \" -6\");"
    },
    {
        "line": 55,
        "fullcodeline": "int len = strlen(cmd);"
    },
    {
        "line": 56,
        "fullcodeline": "snprintf(cmd + len, BUF_SIZE - len, \" --mtu %d\", manager->mtu);"
    },
    {
        "line": 59,
        "fullcodeline": "int len = strlen(cmd);"
    },
    {
        "line": 60,
        "fullcodeline": "snprintf(cmd + len, BUF_SIZE - len, \" --plugin \\\"%s\\\"\", manager->plugin);"
    },
    {
        "line": 63,
        "fullcodeline": "int len = strlen(cmd);"
    },
    {
        "line": 64,
        "fullcodeline": "snprintf(cmd + len, BUF_SIZE - len, \" --plugin-opts \\\"%s\\\"\", manager->plugin_opts);"
    },
    {
        "line": 67,
        "fullcodeline": "int len = strlen(cmd);"
    },
    {
        "line": 68,
        "fullcodeline": "snprintf(cmd + len, BUF_SIZE - len, \" -d %s\", manager->nameservers[i]);"
    },
    {
        "line": 71,
        "fullcodeline": "int len = strlen(cmd);"
    },
    {
        "line": 72,
        "fullcodeline": "snprintf(cmd + len, BUF_SIZE - len, \" -s %s\", manager->hosts[i]);"
    },
    {
        "line": 81,
        "fullcodeline": "LOGI(\"cmd: %s\", cmd);"
    }
]