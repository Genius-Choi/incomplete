[
    {
        "line": 12,
        "fullcodeline": "app.wsgi_app = ReverseProxied(app.wsgi_app)"
    },
    {
        "line": 21,
        "fullcodeline": "log.info('Starting Calibre Web...')"
    },
    {
        "line": 23,
        "fullcodeline": "Principal(app)"
    },
    {
        "line": 24,
        "fullcodeline": "lm.init_app(app)"
    },
    {
        "line": 25,
        "fullcodeline": "app.secret_key = os.getenv('SECRET_KEY', config_sql.get_flask_session_key(ub.session))"
    },
    {
        "line": 27,
        "fullcodeline": "web_server.init_app(app, config)"
    },
    {
        "line": 29,
        "fullcodeline": "babel.init_app(app)"
    },
    {
        "line": 30,
        "fullcodeline": "_BABEL_TRANSLATIONS.update(str(item) for item in babel.list_translations())"
    },
    {
        "line": 31,
        "fullcodeline": "_BABEL_TRANSLATIONS.add('en')"
    },
    {
        "line": 2,
        "fullcodeline": "if sys.version_info < (3, 0):"
    },
    {
        "line": 8,
        "fullcodeline": "if not lxml_present:"
    },
    {
        "line": 14,
        "fullcodeline": "if sys.version_info < (3, 0):"
    },
    {
        "line": 3,
        "fullcodeline": "log.info("
    },
    {
        "line": 5,
        "fullcodeline": "print("
    },
    {
        "line": 7,
        "fullcodeline": "sys.exit(5)"
    },
    {
        "line": 9,
        "fullcodeline": "log.info('*** \"lxml\" is needed for calibre-web to run. Please install it using pip: \"pip install lxml\" ***')"
    },
    {
        "line": 10,
        "fullcodeline": "print('*** \"lxml\" is needed for calibre-web to run. Please install it using pip: \"pip install lxml\" ***')"
    },
    {
        "line": 11,
        "fullcodeline": "sys.exit(6)"
    },
    {
        "line": 15,
        "fullcodeline": "app.static_folder = app.static_folder.decode('utf-8')"
    },
    {
        "line": 16,
        "fullcodeline": "app.root_path = app.root_path.decode('utf-8')"
    },
    {
        "line": 17,
        "fullcodeline": "app.instance_path = app.instance_path.decode('utf-8')"
    },
    {
        "line": 19,
        "fullcodeline": "if os.environ.get('FLASK_DEBUG'):"
    },
    {
        "line": 20,
        "fullcodeline": "cache_buster.init_cache_busting(app)"
    },
    {
        "line": 34,
        "fullcodeline": "services.ldap.init_app(app, config)"
    },
    {
        "line": 36,
        "fullcodeline": "services.goodreads_support.connect(config.config_goodreads_api_key,"
    }
]