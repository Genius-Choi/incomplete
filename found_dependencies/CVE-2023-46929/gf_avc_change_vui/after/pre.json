[
    {
        "line": 8,
        "fullcodeline": "orig = NULL;"
    },
    {
        "line": 13,
        "fullcodeline": "memset(&avc, 0, sizeof(AVCState));"
    },
    {
        "line": 14,
        "fullcodeline": "avc.sps_active_idx = -1;"
    },
    {
        "line": 16,
        "fullcodeline": "i=0;"
    },
    {
        "line": 10,
        "fullcodeline": "if (!avcc)"
    },
    {
        "line": 17,
        "fullcodeline": "while ((slc = (GF_AVCConfigSlot *)gf_list_enum(avcc->sequenceParameterSets, &i))) {"
    },
    {
        "line": 20,
        "fullcodeline": "idx = gf_avc_read_sps(slc->data, slc->size, &avc, 0, &bit_offset);"
    },
    {
        "line": 28,
        "fullcodeline": "no_emulation_buf = gf_malloc((slc->size - 1) * sizeof(char));"
    },
    {
        "line": 29,
        "fullcodeline": "no_emulation_buf_size = gf_media_nalu_remove_emulation_bytes(slc->data + 1, no_emulation_buf, slc->size - 1);"
    },
    {
        "line": 31,
        "fullcodeline": "orig = gf_bs_new(no_emulation_buf, no_emulation_buf_size, GF_BITSTREAM_READ);"
    },
    {
        "line": 32,
        "fullcodeline": "gf_bs_read_data(orig, no_emulation_buf, no_emulation_buf_size);"
    },
    {
        "line": 33,
        "fullcodeline": "gf_bs_seek(orig, 0);"
    },
    {
        "line": 34,
        "fullcodeline": "mod = gf_bs_new(NULL, 0, GF_BITSTREAM_WRITE);"
    },
    {
        "line": 44,
        "fullcodeline": "avc_hevc_vvc_rewrite_vui(vui_info, orig, mod, GF_CODECID_AVC);"
    },
    {
        "line": 52,
        "fullcodeline": "orig = NULL;"
    },
    {
        "line": 53,
        "fullcodeline": "gf_free(no_emulation_buf);"
    },
    {
        "line": 56,
        "fullcodeline": "gf_bs_get_content(mod, &no_emulation_buf, &flag);"
    },
    {
        "line": 57,
        "fullcodeline": "emulation_bytes = gf_media_nalu_emulation_bytes_add_count(no_emulation_buf, flag);"
    },
    {
        "line": 60,
        "fullcodeline": "slc->size = gf_media_nalu_add_emulation_bytes(no_emulation_buf, slc->data + 1, flag) + 1;"
    },
    {
        "line": 37,
        "fullcodeline": "assert(bit_offset >= 8);"
    },
    {
        "line": 38,
        "fullcodeline": "while (bit_offset - 8/*bit_offset doesn't take care of the first byte (NALU type)*/) {"
    },
    {
        "line": 47,
        "fullcodeline": "while (gf_bs_bits_available(orig)) {"
    },
    {
        "line": 39,
        "fullcodeline": "flag = gf_bs_read_int(orig, 1);"
    },
    {
        "line": 40,
        "fullcodeline": "gf_bs_write_int(mod, flag, 1);"
    },
    {
        "line": 41,
        "fullcodeline": "bit_offset--;"
    },
    {
        "line": 48,
        "fullcodeline": "flag = gf_bs_read_int(orig, 1);"
    },
    {
        "line": 49,
        "fullcodeline": "gf_bs_write_int(mod, flag, 1);"
    },
    {
        "line": 59,
        "fullcodeline": "slc->data = (char*)gf_realloc(slc->data, flag+emulation_bytes+1);"
    }
]