[
    {
        "line": 4,
        "fullcodeline": "struct sc_context *ctx = card->ctx;"
    },
    {
        "line": 7,
        "fullcodeline": "const unsigned char *acls = NULL, *tag = NULL;"
    },
    {
        "line": 9,
        "fullcodeline": "unsigned char ops_DF[7] = {"
    },
    {
        "line": 12,
        "fullcodeline": "unsigned char ops_EF[7] = {"
    },
    {
        "line": 16,
        "fullcodeline": "LOG_FUNC_CALLED(ctx);"
    },
    {
        "line": 18,
        "fullcodeline": "tag = sc_asn1_find_tag(ctx,  buf, buflen, 0x6F, &taglen);"
    },
    {
        "line": 19,
        "fullcodeline": "sc_log(ctx, \"processing FCI: 0x6F tag %p\", tag);"
    },
    {
        "line": 26,
        "fullcodeline": "tag = sc_asn1_find_tag(ctx,  buf, buflen, 0x62, &taglen);"
    },
    {
        "line": 27,
        "fullcodeline": "sc_log(ctx, \"processing FCI: 0x62 tag %p\", tag);"
    },
    {
        "line": 34,
        "fullcodeline": "rv = iso_ops->process_fci(card, file, buf, buflen);"
    },
    {
        "line": 35,
        "fullcodeline": "LOG_TEST_RET(ctx, rv, \"ISO parse FCI failed\");"
    },
    {
        "line": 42,
        "fullcodeline": "sc_log(ctx, \"iasecc_process_fci() type %i; let's parse file ACLs\", file->type);"
    },
    {
        "line": 43,
        "fullcodeline": "tag = sc_asn1_find_tag(ctx, buf, buflen, IASECC_DOCP_TAG_ACLS, &taglen);"
    },
    {
        "line": 58,
        "fullcodeline": "mask = 0x40, offs = 1;"
    },
    {
        "line": 89,
        "fullcodeline": "LOG_FUNC_RETURN(ctx, 0);"
    },
    {
        "line": 20,
        "fullcodeline": "if (tag != NULL) {"
    },
    {
        "line": 28,
        "fullcodeline": "if (tag != NULL) {"
    },
    {
        "line": 49,
        "fullcodeline": "if (!acls)   {"
    },
    {
        "line": 59,
        "fullcodeline": "for (ii = 0; ii < 7; ii++, mask /= 2)  {"
    },
    {
        "line": 22,
        "fullcodeline": "buf = tag;"
    },
    {
        "line": 23,
        "fullcodeline": "buflen = taglen;"
    },
    {
        "line": 30,
        "fullcodeline": "buf = tag;"
    },
    {
        "line": 31,
        "fullcodeline": "buflen = taglen;"
    },
    {
        "line": 45,
        "fullcodeline": "acls = sc_asn1_find_tag(ctx, tag, taglen, IASECC_DOCP_TAG_ACLS_CONTACT, &taglen);"
    },
    {
        "line": 53,
        "fullcodeline": "LOG_TEST_RET(ctx, SC_ERROR_OBJECT_NOT_FOUND, \"ACLs tag missing\");"
    },
    {
        "line": 60,
        "fullcodeline": "unsigned char op = file->type == SC_FILE_TYPE_DF ? ops_DF[ii] : ops_EF[ii];"
    },
    {
        "line": 65,
        "fullcodeline": "sc_log(ctx, \"ACLs mask 0x%X, offs %i, op 0x%X, acls[offs] 0x%X\", mask, offs, op, acls[offs]);"
    },
    {
        "line": 86,
        "fullcodeline": "offs++;"
    },
    {
        "line": 47,
        "fullcodeline": "acls = sc_asn1_find_tag(ctx, buf, buflen, IASECC_DOCP_TAG_ACLS_CONTACT, &taglen);"
    },
    {
        "line": 62,
        "fullcodeline": "if (!(mask & acls[0]))"
    },
    {
        "line": 66,
        "fullcodeline": "if (op == 0xFF)   {"
    },
    {
        "line": 69,
        "fullcodeline": "else if (acls[offs] == 0)   {"
    },
    {
        "line": 70,
        "fullcodeline": "sc_file_add_acl_entry(file, op, SC_AC_NONE, 0);"
    },
    {
        "line": 72,
        "fullcodeline": "else if (acls[offs] == 0xFF)   {"
    },
    {
        "line": 73,
        "fullcodeline": "sc_file_add_acl_entry(file, op, SC_AC_NEVER, 0);"
    },
    {
        "line": 75,
        "fullcodeline": "else if ((acls[offs] & IASECC_SCB_METHOD_MASK) == IASECC_SCB_METHOD_USER_AUTH)   {"
    },
    {
        "line": 76,
        "fullcodeline": "sc_file_add_acl_entry(file, op, SC_AC_SEN, acls[offs] & IASECC_SCB_METHOD_MASK_REF);"
    },
    {
        "line": 78,
        "fullcodeline": "else if (acls[offs] & IASECC_SCB_METHOD_MASK)   {"
    },
    {
        "line": 79,
        "fullcodeline": "sc_file_add_acl_entry(file, op, SC_AC_SCB, acls[offs]);"
    },
    {
        "line": 82,
        "fullcodeline": "sc_log(ctx, \"Warning: non supported SCB method: %X\", acls[offs]);"
    },
    {
        "line": 83,
        "fullcodeline": "sc_file_add_acl_entry(file, op, SC_AC_NEVER, 0);"
    }
]