[
    {
        "line": 6,
        "fullcodeline": "GHashTable *problem_info = g_hash_table_new_full(g_str_hash, g_str_equal,"
    },
    {
        "line": 9,
        "fullcodeline": "char *body_start = NULL;"
    },
    {
        "line": 10,
        "fullcodeline": "char *messagebuf_data = NULL;"
    },
    {
        "line": 11,
        "fullcodeline": "unsigned messagebuf_len = 0;"
    },
    {
        "line": 56,
        "fullcodeline": "log_debug(\"Request: %s\", messagebuf_data);"
    },
    {
        "line": 95,
        "fullcodeline": "char *url = skip_non_whitespace(messagebuf_data) + 1; /* skip \"POST \" */"
    },
    {
        "line": 110,
        "fullcodeline": "messagebuf_len -= (body_start - messagebuf_data);"
    },
    {
        "line": 111,
        "fullcodeline": "memmove(messagebuf_data, body_start, messagebuf_len);"
    },
    {
        "line": 112,
        "fullcodeline": "log_debug(\"Body so far: %u bytes, '%s'\", messagebuf_len, messagebuf_data);"
    },
    {
        "line": 152,
        "fullcodeline": "int ret = 0;"
    },
    {
        "line": 167,
        "fullcodeline": "unsigned pid = convert_pid(problem_info);"
    },
    {
        "line": 168,
        "fullcodeline": "die_if_data_is_missing(problem_info);"
    },
    {
        "line": 170,
        "fullcodeline": "char *executable = g_hash_table_lookup(problem_info, FILENAME_EXECUTABLE);"
    },
    {
        "line": 187,
        "fullcodeline": "create_problem_dir(problem_info, pid);"
    },
    {
        "line": 67,
        "fullcodeline": "if (prefixcmp(messagebuf_data, \"DELETE \") == 0)"
    },
    {
        "line": 104,
        "fullcodeline": "if (!body_start)"
    },
    {
        "line": 15,
        "fullcodeline": "messagebuf_data = xrealloc(messagebuf_data, messagebuf_len + INPUT_BUFFER_SIZE);"
    },
    {
        "line": 16,
        "fullcodeline": "char *p = messagebuf_data + messagebuf_len;"
    },
    {
        "line": 17,
        "fullcodeline": "int rd = read(STDIN_FILENO, p, INPUT_BUFFER_SIZE);"
    },
    {
        "line": 27,
        "fullcodeline": "log_debug(\"Received %u bytes of data\", rd);"
    },
    {
        "line": 28,
        "fullcodeline": "messagebuf_len += rd;"
    },
    {
        "line": 29,
        "fullcodeline": "total_bytes_read += rd;"
    },
    {
        "line": 35,
        "fullcodeline": "char *past_end = messagebuf_data + messagebuf_len;"
    },
    {
        "line": 69,
        "fullcodeline": "messagebuf_data += strlen(\"DELETE \");"
    },
    {
        "line": 70,
        "fullcodeline": "char *space = strchr(messagebuf_data, ' ');"
    },
    {
        "line": 84,
        "fullcodeline": "if (prefixcmp(messagebuf_data, \"PUT \") != 0"
    },
    {
        "line": 85,
        "fullcodeline": "&& prefixcmp(messagebuf_data, \"POST \") != 0"
    },
    {
        "line": 96,
        "fullcodeline": "if (prefixcmp(url, \"/creation_notification \") == 0)"
    },
    {
        "line": 97,
        "fullcodeline": "url_type = CREATION_NOTIFICATION;"
    },
    {
        "line": 131,
        "fullcodeline": "messagebuf_data = xrealloc(messagebuf_data, messagebuf_len + INPUT_BUFFER_SIZE + 1);"
    },
    {
        "line": 132,
        "fullcodeline": "int rd = read(STDIN_FILENO, messagebuf_data + messagebuf_len, INPUT_BUFFER_SIZE);"
    },
    {
        "line": 142,
        "fullcodeline": "log_debug(\"Received %u bytes of data\", rd);"
    },
    {
        "line": 143,
        "fullcodeline": "messagebuf_len += rd;"
    },
    {
        "line": 144,
        "fullcodeline": "total_bytes_read += rd;"
    },
    {
        "line": 162,
        "fullcodeline": "messagebuf_data[messagebuf_len] = '\\0';"
    },
    {
        "line": 173,
        "fullcodeline": "char *last_file = concat_path_file(g_settings_dump_location, \"last-via-server\");"
    },
    {
        "line": 18,
        "fullcodeline": "if (rd < 0)"
    },
    {
        "line": 24,
        "fullcodeline": "if (rd == 0)"
    },
    {
        "line": 30,
        "fullcodeline": "if (total_bytes_read > MAX_MESSAGE_SIZE)"
    },
    {
        "line": 36,
        "fullcodeline": "if (p > messagebuf_data+1)"
    },
    {
        "line": 38,
        "fullcodeline": "while (p < past_end)"
    },
    {
        "line": 71,
        "fullcodeline": "if (!space || prefixcmp(space+1, \"HTTP/\") != 0)"
    },
    {
        "line": 76,
        "fullcodeline": "return delete_path(messagebuf_data);"
    },
    {
        "line": 117,
        "fullcodeline": "if (url_type == CREATION_REQUEST)"
    },
    {
        "line": 133,
        "fullcodeline": "if (rd < 0)"
    },
    {
        "line": 139,
        "fullcodeline": "if (rd == 0)"
    },
    {
        "line": 145,
        "fullcodeline": "if (total_bytes_read > MAX_MESSAGE_SIZE)"
    },
    {
        "line": 155,
        "fullcodeline": "if (client_uid != 0)"
    },
    {
        "line": 163,
        "fullcodeline": "return run_post_create(messagebuf_data);"
    },
    {
        "line": 174,
        "fullcodeline": "int repeating_crash = check_recent_crash_file(last_file, executable);"
    },
    {
        "line": 22,
        "fullcodeline": "perror_msg_and_die(\"read\");"
    },
    {
        "line": 31,
        "fullcodeline": "error_msg_and_die(\"Message is too long, aborting\");"
    },
    {
        "line": 37,
        "fullcodeline": "p -= 2; /* start search from two last bytes in last read - they might be '\\n\\r' */"
    },
    {
        "line": 40,
        "fullcodeline": "p = memchr(p, '\\n', past_end - p);"
    },
    {
        "line": 43,
        "fullcodeline": "p++;"
    },
    {
        "line": 158,
        "fullcodeline": "ret = 403; /* Forbidden */"
    },
    {
        "line": 20,
        "fullcodeline": "if (errno == EINTR) /* SIGALRM? */"
    },
    {
        "line": 41,
        "fullcodeline": "if (!p)"
    },
    {
        "line": 44,
        "fullcodeline": "if (p >= past_end)"
    },
    {
        "line": 46,
        "fullcodeline": "if (*p == '\\n'"
    },
    {
        "line": 98,
        "fullcodeline": "else if (prefixcmp(url, \"/ \") == 0)"
    },
    {
        "line": 99,
        "fullcodeline": "url_type = CREATION_REQUEST;"
    },
    {
        "line": 21,
        "fullcodeline": "error_msg_and_die(\"Timed out\");"
    },
    {
        "line": 47,
        "fullcodeline": "|| (*p == '\\r' && p+1 < past_end && p[1] == '\\n')"
    },
    {
        "line": 49,
        "fullcodeline": "body_start = p + 1 + (*p == '\\r');"
    },
    {
        "line": 50,
        "fullcodeline": "*p = '\\0';"
    },
    {
        "line": 121,
        "fullcodeline": "unsigned len = strnlen(messagebuf_data, messagebuf_len);"
    },
    {
        "line": 125,
        "fullcodeline": "process_message(problem_info, messagebuf_data);"
    },
    {
        "line": 126,
        "fullcodeline": "messagebuf_len -= (len + 1);"
    },
    {
        "line": 127,
        "fullcodeline": "memmove(messagebuf_data, messagebuf_data + len + 1, messagebuf_len);"
    },
    {
        "line": 122,
        "fullcodeline": "if (len >= messagebuf_len)"
    }
]