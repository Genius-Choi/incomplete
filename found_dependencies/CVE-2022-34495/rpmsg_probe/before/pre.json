[
    {
        "line": 3,
        "fullcodeline": "vq_callback_t *vq_cbs[] = { rpmsg_recv_done, rpmsg_xmit_done };"
    },
    {
        "line": 4,
        "fullcodeline": "static const char * const names[] = { \"input\", \"output\" };"
    },
    {
        "line": 5,
        "fullcodeline": "struct virtqueue *vqs[2];"
    },
    {
        "line": 7,
        "fullcodeline": "struct virtio_rpmsg_channel *vch = NULL;"
    },
    {
        "line": 10,
        "fullcodeline": "int err = 0, i;"
    },
    {
        "line": 14,
        "fullcodeline": "vrp = kzalloc(sizeof(*vrp), GFP_KERNEL);"
    },
    {
        "line": 18,
        "fullcodeline": "vrp->vdev = vdev;"
    },
    {
        "line": 26,
        "fullcodeline": "err = virtio_find_vqs(vdev, 2, vqs, vq_cbs, names, NULL);"
    },
    {
        "line": 30,
        "fullcodeline": "vrp->rvq = vqs[0];"
    },
    {
        "line": 31,
        "fullcodeline": "vrp->svq = vqs[1];"
    },
    {
        "line": 43,
        "fullcodeline": "vrp->buf_size = MAX_RPMSG_BUF_SIZE;"
    },
    {
        "line": 45,
        "fullcodeline": "total_buf_space = vrp->num_bufs * vrp->buf_size;"
    },
    {
        "line": 48,
        "fullcodeline": "bufs_va = dma_alloc_coherent(vdev->dev.parent,"
    },
    {
        "line": 56,
        "fullcodeline": "dev_dbg(&vdev->dev, \"buffers: va %pK, dma %pad\\n\","
    },
    {
        "line": 60,
        "fullcodeline": "vrp->rbufs = bufs_va;"
    },
    {
        "line": 63,
        "fullcodeline": "vrp->sbufs = bufs_va + total_buf_space / 2;"
    },
    {
        "line": 78,
        "fullcodeline": "virtqueue_disable_cb(vrp->svq);"
    },
    {
        "line": 80,
        "fullcodeline": "vdev->priv = vrp;"
    },
    {
        "line": 82,
        "fullcodeline": "rpdev_ctrl = rpmsg_virtio_add_ctrl_dev(vdev);"
    },
    {
        "line": 119,
        "fullcodeline": "virtio_device_ready(vdev);"
    },
    {
        "line": 138,
        "fullcodeline": "dma_free_coherent(vdev->dev.parent, total_buf_space,"
    },
    {
        "line": 141,
        "fullcodeline": "vdev->config->del_vqs(vrp->vdev);"
    },
    {
        "line": 15,
        "fullcodeline": "if (!vrp)"
    },
    {
        "line": 34,
        "fullcodeline": "WARN_ON(virtqueue_get_vring_size(vrp->rvq) !="
    },
    {
        "line": 51,
        "fullcodeline": "if (!bufs_va) {"
    },
    {
        "line": 66,
        "fullcodeline": "for (i = 0; i < vrp->num_bufs / 2; i++) {"
    },
    {
        "line": 83,
        "fullcodeline": "if (IS_ERR(rpdev_ctrl)) {"
    },
    {
        "line": 89,
        "fullcodeline": "if (virtio_has_feature(vdev, VIRTIO_RPMSG_F_NS)) {"
    },
    {
        "line": 116,
        "fullcodeline": "notify = virtqueue_kick_prepare(vrp->rvq);"
    },
    {
        "line": 35,
        "fullcodeline": "virtqueue_get_vring_size(vrp->svq));"
    },
    {
        "line": 38,
        "fullcodeline": "if (virtqueue_get_vring_size(vrp->rvq) < MAX_RPMSG_NUM_BUFS / 2)"
    },
    {
        "line": 39,
        "fullcodeline": "vrp->num_bufs = virtqueue_get_vring_size(vrp->rvq) * 2;"
    },
    {
        "line": 52,
        "fullcodeline": "err = -ENOMEM;"
    },
    {
        "line": 68,
        "fullcodeline": "void *cpu_addr = vrp->rbufs + i * vrp->buf_size;"
    },
    {
        "line": 70,
        "fullcodeline": "rpmsg_sg_init(&sg, cpu_addr, vrp->buf_size);"
    },
    {
        "line": 72,
        "fullcodeline": "err = virtqueue_add_inbuf(vrp->rvq, &sg, 1, cpu_addr,"
    },
    {
        "line": 84,
        "fullcodeline": "err = PTR_ERR(rpdev_ctrl);"
    },
    {
        "line": 90,
        "fullcodeline": "vch = kzalloc(sizeof(*vch), GFP_KERNEL);"
    },
    {
        "line": 97,
        "fullcodeline": "vch->vrp = vrp;"
    },
    {
        "line": 100,
        "fullcodeline": "rpdev_ns = &vch->rpdev;"
    },
    {
        "line": 101,
        "fullcodeline": "rpdev_ns->ops = &virtio_rpmsg_ops;"
    },
    {
        "line": 102,
        "fullcodeline": "rpdev_ns->little_endian = virtio_is_little_endian(vrp->vdev);"
    },
    {
        "line": 105,
        "fullcodeline": "rpdev_ns->dev.release = virtio_rpmsg_release_device;"
    },
    {
        "line": 107,
        "fullcodeline": "err = rpmsg_ns_register_device(rpdev_ns);"
    },
    {
        "line": 16,
        "fullcodeline": "return -ENOMEM;"
    },
    {
        "line": 41,
        "fullcodeline": "vrp->num_bufs = MAX_RPMSG_NUM_BUFS;"
    },
    {
        "line": 91,
        "fullcodeline": "if (!vch) {"
    },
    {
        "line": 92,
        "fullcodeline": "err = -ENOMEM;"
    }
]