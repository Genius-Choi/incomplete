[
    {
        "line": 6,
        "fullcodeline": "int cur_size = ctxt->fetch.end - ctxt->fetch.data;"
    },
    {
        "line": 7,
        "fullcodeline": "struct segmented_address addr = { .seg = VCPU_SREG_CS,"
    },
    {
        "line": 20,
        "fullcodeline": "rc = __linearize(ctxt, addr, &max_size, 0, false, true, ctxt->mode,"
    },
    {
        "line": 37,
        "fullcodeline": "rc = ctxt->ops->fetch(ctxt, linear, ctxt->fetch.end,"
    },
    {
        "line": 22,
        "fullcodeline": "if (unlikely(rc != X86EMUL_CONTINUE))"
    },
    {
        "line": 34,
        "fullcodeline": "if (unlikely(size < op_size))"
    },
    {
        "line": 39,
        "fullcodeline": "if (unlikely(rc != X86EMUL_CONTINUE))"
    },
    {
        "line": 8,
        "fullcodeline": ".ea = ctxt->eip + cur_size };"
    },
    {
        "line": 35,
        "fullcodeline": "return emulate_gp(ctxt, 0);"
    }
]