[
    {
        "line": 3,
        "fullcodeline": "int r = 0;"
    },
    {
        "line": 7,
        "fullcodeline": "j = JSON_read(test->ctrl_sck);"
    },
    {
        "line": 8,
        "fullcodeline": "if (j == NULL) {"
    },
    {
        "line": 9,
        "fullcodeline": "i_errno = IERECVPARAMS;"
    },
    {
        "line": 10,
        "fullcodeline": "r = -1;"
    },
    {
        "line": 58,
        "fullcodeline": "cJSON_Delete(j);"
    },
    {
        "line": 16,
        "fullcodeline": "if ((j_p = cJSON_GetObjectItem(j, \"tcp\")) != NULL)"
    },
    {
        "line": 18,
        "fullcodeline": "if ((j_p = cJSON_GetObjectItem(j, \"udp\")) != NULL)"
    },
    {
        "line": 20,
        "fullcodeline": "if ((j_p = cJSON_GetObjectItem(j, \"omit\")) != NULL)"
    },
    {
        "line": 22,
        "fullcodeline": "if ((j_p = cJSON_GetObjectItem(j, \"server_affinity\")) != NULL)"
    },
    {
        "line": 24,
        "fullcodeline": "if ((j_p = cJSON_GetObjectItem(j, \"time\")) != NULL)"
    },
    {
        "line": 26,
        "fullcodeline": "if ((j_p = cJSON_GetObjectItem(j, \"num\")) != NULL)"
    },
    {
        "line": 28,
        "fullcodeline": "if ((j_p = cJSON_GetObjectItem(j, \"blockcount\")) != NULL)"
    },
    {
        "line": 30,
        "fullcodeline": "if ((j_p = cJSON_GetObjectItem(j, \"MSS\")) != NULL)"
    },
    {
        "line": 32,
        "fullcodeline": "if ((j_p = cJSON_GetObjectItem(j, \"nodelay\")) != NULL)"
    },
    {
        "line": 34,
        "fullcodeline": "if ((j_p = cJSON_GetObjectItem(j, \"parallel\")) != NULL)"
    },
    {
        "line": 36,
        "fullcodeline": "if ((j_p = cJSON_GetObjectItem(j, \"reverse\")) != NULL)"
    },
    {
        "line": 38,
        "fullcodeline": "if ((j_p = cJSON_GetObjectItem(j, \"window\")) != NULL)"
    },
    {
        "line": 40,
        "fullcodeline": "if ((j_p = cJSON_GetObjectItem(j, \"len\")) != NULL)"
    },
    {
        "line": 42,
        "fullcodeline": "if ((j_p = cJSON_GetObjectItem(j, \"bandwidth\")) != NULL)"
    },
    {
        "line": 44,
        "fullcodeline": "if ((j_p = cJSON_GetObjectItem(j, \"burst\")) != NULL)"
    },
    {
        "line": 46,
        "fullcodeline": "if ((j_p = cJSON_GetObjectItem(j, \"TOS\")) != NULL)"
    },
    {
        "line": 48,
        "fullcodeline": "if ((j_p = cJSON_GetObjectItem(j, \"flowlabel\")) != NULL)"
    },
    {
        "line": 50,
        "fullcodeline": "if ((j_p = cJSON_GetObjectItem(j, \"title\")) != NULL)"
    },
    {
        "line": 52,
        "fullcodeline": "if ((j_p = cJSON_GetObjectItem(j, \"congestion\")) != NULL)"
    },
    {
        "line": 54,
        "fullcodeline": "if ((j_p = cJSON_GetObjectItem(j, \"get_server_output\")) != NULL)"
    },
    {
        "line": 56,
        "fullcodeline": "if (test->sender && test->protocol->id == Ptcp && has_tcpinfo_retransmits())"
    },
    {
        "line": 13,
        "fullcodeline": "printf(\"get_parameters:\\n%s\\n\", cJSON_Print(j));"
    },
    {
        "line": 17,
        "fullcodeline": "set_protocol(test, Ptcp);"
    },
    {
        "line": 19,
        "fullcodeline": "set_protocol(test, Pudp);"
    },
    {
        "line": 21,
        "fullcodeline": "test->omit = j_p->valueint;"
    },
    {
        "line": 23,
        "fullcodeline": "test->server_affinity = j_p->valueint;"
    },
    {
        "line": 25,
        "fullcodeline": "test->duration = j_p->valueint;"
    },
    {
        "line": 27,
        "fullcodeline": "test->settings->bytes = j_p->valueint;"
    },
    {
        "line": 29,
        "fullcodeline": "test->settings->blocks = j_p->valueint;"
    },
    {
        "line": 31,
        "fullcodeline": "test->settings->mss = j_p->valueint;"
    },
    {
        "line": 33,
        "fullcodeline": "test->no_delay = 1;"
    },
    {
        "line": 35,
        "fullcodeline": "test->num_streams = j_p->valueint;"
    },
    {
        "line": 37,
        "fullcodeline": "iperf_set_test_reverse(test, 1);"
    },
    {
        "line": 39,
        "fullcodeline": "test->settings->socket_bufsize = j_p->valueint;"
    },
    {
        "line": 41,
        "fullcodeline": "test->settings->blksize = j_p->valueint;"
    },
    {
        "line": 43,
        "fullcodeline": "test->settings->rate = j_p->valueint;"
    },
    {
        "line": 45,
        "fullcodeline": "test->settings->burst = j_p->valueint;"
    },
    {
        "line": 47,
        "fullcodeline": "test->settings->tos = j_p->valueint;"
    },
    {
        "line": 49,
        "fullcodeline": "test->settings->flowlabel = j_p->valueint;"
    },
    {
        "line": 51,
        "fullcodeline": "test->title = strdup(j_p->valuestring);"
    },
    {
        "line": 53,
        "fullcodeline": "test->congestion = strdup(j_p->valuestring);"
    },
    {
        "line": 55,
        "fullcodeline": "iperf_set_test_get_server_output(test, 1);"
    },
    {
        "line": 57,
        "fullcodeline": "test->sender_has_retransmits = 1;"
    }
]