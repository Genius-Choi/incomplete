[
    {
        "line": 3,
        "fullcodeline": "const char *ptr;char *ptr2,*out;int len=0,flag=0;unsigned char token;"
    },
    {
        "line": 28,
        "fullcodeline": "ptr=str;while ((token=*ptr) && ++len) {if (strchr(\"\\\"\\\\\\b\\f\\n\\r\\t\",token)) len++; else if (token<32) len+=5;ptr++;}"
    },
    {
        "line": 34,
        "fullcodeline": "ptr2=out;ptr=str;"
    },
    {
        "line": 5,
        "fullcodeline": "if (!str)"
    },
    {
        "line": 14,
        "fullcodeline": "for (ptr=str;*ptr;ptr++) flag|=((*ptr>0 && *ptr<32)||(*ptr=='\\\"')||(*ptr=='\\\\'))?1:0;"
    },
    {
        "line": 32,
        "fullcodeline": "if (!out) return 0;"
    },
    {
        "line": 10,
        "fullcodeline": "strcpy(out,\"\\\"\\\"\");"
    },
    {
        "line": 17,
        "fullcodeline": "len=ptr-str;"
    },
    {
        "line": 21,
        "fullcodeline": "ptr2=out;*ptr2++='\\\"';"
    },
    {
        "line": 30,
        "fullcodeline": "if (p)\tout=ensure(p,len+3);"
    },
    {
        "line": 35,
        "fullcodeline": "*ptr2++='\\\"';"
    },
    {
        "line": 55,
        "fullcodeline": "*ptr2++='\\\"';*ptr2++=0;"
    },
    {
        "line": 9,
        "fullcodeline": "if (!out) return 0;"
    },
    {
        "line": 20,
        "fullcodeline": "if (!out) return 0;"
    },
    {
        "line": 31,
        "fullcodeline": "else\tout=(char*)cJSON_malloc(len+3);"
    },
    {
        "line": 7,
        "fullcodeline": "if (p)\tout=ensure(p,3);"
    },
    {
        "line": 18,
        "fullcodeline": "if (p) out=ensure(p,len+3);"
    },
    {
        "line": 38,
        "fullcodeline": "if ((unsigned char)*ptr>31 && *ptr!='\\\"' && *ptr!='\\\\') *ptr2++=*ptr++;"
    },
    {
        "line": 8,
        "fullcodeline": "else\tout=(char*)cJSON_malloc(3);"
    },
    {
        "line": 19,
        "fullcodeline": "else\t\tout=(char*)cJSON_malloc(len+3);"
    },
    {
        "line": 42,
        "fullcodeline": "switch (token=*ptr++)"
    },
    {
        "line": 41,
        "fullcodeline": "*ptr2++='\\\\';"
    },
    {
        "line": 51,
        "fullcodeline": "default: sprintf(ptr2,\"u%04x\",token);ptr2+=5;\tbreak;\t/* escape and print */"
    },
    {
        "line": 44,
        "fullcodeline": "case '\\\\':\t*ptr2++='\\\\';\tbreak;"
    },
    {
        "line": 45,
        "fullcodeline": "case '\\\"':\t*ptr2++='\\\"';\tbreak;"
    },
    {
        "line": 46,
        "fullcodeline": "case '\\b':\t*ptr2++='b';\tbreak;"
    },
    {
        "line": 47,
        "fullcodeline": "case '\\f':\t*ptr2++='f';\tbreak;"
    },
    {
        "line": 48,
        "fullcodeline": "case '\\n':\t*ptr2++='n';\tbreak;"
    },
    {
        "line": 49,
        "fullcodeline": "case '\\r':\t*ptr2++='r';\tbreak;"
    },
    {
        "line": 50,
        "fullcodeline": "case '\\t':\t*ptr2++='t';\tbreak;"
    }
]