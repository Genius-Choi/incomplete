[
    {
        "line": 3,
        "fullcodeline": "char **entries=0,**names=0;"
    },
    {
        "line": 4,
        "fullcodeline": "char *out=0,*ptr,*ret,*str;int len=7,i=0,j;"
    },
    {
        "line": 5,
        "fullcodeline": "cJSON *child=item->child;"
    },
    {
        "line": 6,
        "fullcodeline": "int numentries=0,fail=0;"
    },
    {
        "line": 7,
        "fullcodeline": "size_t tmplen=0;"
    },
    {
        "line": 9,
        "fullcodeline": "while (child) numentries++,child=child->next;"
    },
    {
        "line": 11,
        "fullcodeline": "if (!numentries)"
    },
    {
        "line": 16,
        "fullcodeline": "ptr=out;*ptr++='{';"
    },
    {
        "line": 18,
        "fullcodeline": "*ptr++='}';*ptr++=0;"
    },
    {
        "line": 24,
        "fullcodeline": "i=p->offset;"
    },
    {
        "line": 25,
        "fullcodeline": "len=fmt?2:1;\tptr=ensure(p,len+1);\tif (!ptr) return 0;"
    },
    {
        "line": 26,
        "fullcodeline": "*ptr++='{';\tif (fmt) *ptr++='\\n';\t*ptr=0;\tp->offset+=len;"
    },
    {
        "line": 27,
        "fullcodeline": "child=item->child;depth++;"
    },
    {
        "line": 54,
        "fullcodeline": "ptr=ensure(p,fmt?(depth+1):2);\t if (!ptr) return 0;"
    },
    {
        "line": 56,
        "fullcodeline": "*ptr++='}';*ptr=0;"
    },
    {
        "line": 57,
        "fullcodeline": "out=(p->buffer)+i;"
    },
    {
        "line": 15,
        "fullcodeline": "if (!out)\treturn 0;"
    },
    {
        "line": 62,
        "fullcodeline": "entries=(char**)cJSON_malloc(numentries*sizeof(char*));"
    },
    {
        "line": 64,
        "fullcodeline": "names=(char**)cJSON_malloc(numentries*sizeof(char*));"
    },
    {
        "line": 66,
        "fullcodeline": "memset(entries,0,sizeof(char*)*numentries);"
    },
    {
        "line": 67,
        "fullcodeline": "memset(names,0,sizeof(char*)*numentries);"
    },
    {
        "line": 70,
        "fullcodeline": "child=item->child;depth++;if (fmt) len+=depth;"
    },
    {
        "line": 92,
        "fullcodeline": "*out='{';ptr=out+1;if (fmt)*ptr++='\\n';*ptr=0;"
    },
    {
        "line": 104,
        "fullcodeline": "cJSON_free(names);cJSON_free(entries);"
    },
    {
        "line": 106,
        "fullcodeline": "*ptr++='}';*ptr++=0;"
    },
    {
        "line": 13,
        "fullcodeline": "if (p) out=ensure(p,fmt?depth+4:3);"
    },
    {
        "line": 17,
        "fullcodeline": "if (fmt) {*ptr++='\\n';for (i=0;i<depth;i++) *ptr++='\\t';}"
    },
    {
        "line": 36,
        "fullcodeline": "print_string_ptr(child->string,p);"
    },
    {
        "line": 37,
        "fullcodeline": "p->offset=update(p);"
    },
    {
        "line": 39,
        "fullcodeline": "len=fmt?2:1;"
    },
    {
        "line": 40,
        "fullcodeline": "ptr=ensure(p,len);\tif (!ptr) return 0;"
    },
    {
        "line": 41,
        "fullcodeline": "*ptr++=':';if (fmt) *ptr++='\\t';"
    },
    {
        "line": 42,
        "fullcodeline": "p->offset+=len;"
    },
    {
        "line": 44,
        "fullcodeline": "print_value(child,depth,fmt,p);"
    },
    {
        "line": 45,
        "fullcodeline": "p->offset=update(p);"
    },
    {
        "line": 47,
        "fullcodeline": "len=(fmt?1:0)+(child->next?1:0);"
    },
    {
        "line": 48,
        "fullcodeline": "ptr=ensure(p,len+1); if (!ptr) return 0;"
    },
    {
        "line": 50,
        "fullcodeline": "if (fmt) *ptr++='\\n';*ptr=0;"
    },
    {
        "line": 51,
        "fullcodeline": "p->offset+=len;"
    },
    {
        "line": 52,
        "fullcodeline": "child=child->next;"
    },
    {
        "line": 63,
        "fullcodeline": "if (!entries) return 0;"
    },
    {
        "line": 65,
        "fullcodeline": "if (!names) {cJSON_free(entries);return 0;}"
    },
    {
        "line": 71,
        "fullcodeline": "while (child && !fail)"
    },
    {
        "line": 80,
        "fullcodeline": "if (!fail)\tout=(char*)cJSON_malloc(len);"
    },
    {
        "line": 81,
        "fullcodeline": "if (!out) fail=1;"
    },
    {
        "line": 93,
        "fullcodeline": "for (i=0;i<numentries;i++)"
    },
    {
        "line": 14,
        "fullcodeline": "else\tout=(char*)cJSON_malloc(fmt?depth+4:3);"
    },
    {
        "line": 55,
        "fullcodeline": "if (fmt)\tfor (i=0;i<depth-1;i++) *ptr++='\\t';"
    },
    {
        "line": 73,
        "fullcodeline": "names[i]=str=print_string_ptr(child->string,0);"
    },
    {
        "line": 74,
        "fullcodeline": "entries[i++]=ret=print_value(child,depth,fmt,0);"
    },
    {
        "line": 76,
        "fullcodeline": "child=child->next;"
    },
    {
        "line": 87,
        "fullcodeline": "cJSON_free(names);cJSON_free(entries);"
    },
    {
        "line": 96,
        "fullcodeline": "tmplen=strlen(names[i]);memcpy(ptr,names[i],tmplen);ptr+=tmplen;"
    },
    {
        "line": 97,
        "fullcodeline": "*ptr++=':';if (fmt) *ptr++='\\t';"
    },
    {
        "line": 98,
        "fullcodeline": "strcpy(ptr,entries[i]);ptr+=strlen(entries[i]);"
    },
    {
        "line": 100,
        "fullcodeline": "if (fmt) *ptr++='\\n';*ptr=0;"
    },
    {
        "line": 101,
        "fullcodeline": "cJSON_free(names[i]);cJSON_free(entries[i]);"
    },
    {
        "line": 32,
        "fullcodeline": "ptr=ensure(p,depth);\tif (!ptr) return 0;"
    },
    {
        "line": 34,
        "fullcodeline": "p->offset+=depth;"
    },
    {
        "line": 49,
        "fullcodeline": "if (child->next) *ptr++=',';"
    },
    {
        "line": 75,
        "fullcodeline": "if (str && ret) len+=strlen(ret)+strlen(str)+2+(fmt?2+depth:0); else fail=1;"
    },
    {
        "line": 86,
        "fullcodeline": "for (i=0;i<numentries;i++) {if (names[i]) cJSON_free(names[i]);if (entries[i]) cJSON_free(entries[i]);}"
    },
    {
        "line": 99,
        "fullcodeline": "if (i!=numentries-1) *ptr++=',';"
    },
    {
        "line": 105,
        "fullcodeline": "if (fmt) for (i=0;i<depth-1;i++) *ptr++='\\t';"
    },
    {
        "line": 33,
        "fullcodeline": "for (j=0;j<depth;j++) *ptr++='\\t';"
    },
    {
        "line": 95,
        "fullcodeline": "if (fmt) for (j=0;j<depth;j++) *ptr++='\\t';"
    }
]