[
    {
        "line": 3,
        "fullcodeline": "char **entries = 0, **names = 0;"
    },
    {
        "line": 4,
        "fullcodeline": "char *out = 0, *ptr, *ret, *str;"
    },
    {
        "line": 5,
        "fullcodeline": "int len = 7, i = 0, j;"
    },
    {
        "line": 6,
        "fullcodeline": "cJSON *child = item->child;"
    },
    {
        "line": 7,
        "fullcodeline": "int numentries = 0, fail = 0;"
    },
    {
        "line": 21,
        "fullcodeline": "memset( entries, 0, sizeof(char*) * numentries );"
    },
    {
        "line": 22,
        "fullcodeline": "memset( names, 0, sizeof(char*) * numentries );"
    },
    {
        "line": 25,
        "fullcodeline": "child = item->child;"
    },
    {
        "line": 26,
        "fullcodeline": "++depth;"
    },
    {
        "line": 60,
        "fullcodeline": "*out = '{';"
    },
    {
        "line": 61,
        "fullcodeline": "ptr = out + 1;"
    },
    {
        "line": 64,
        "fullcodeline": "*ptr = 0;"
    },
    {
        "line": 85,
        "fullcodeline": "cJSON_free( names );"
    },
    {
        "line": 86,
        "fullcodeline": "cJSON_free( entries );"
    },
    {
        "line": 90,
        "fullcodeline": "*ptr++ = '}';"
    },
    {
        "line": 91,
        "fullcodeline": "*ptr++ = 0;"
    },
    {
        "line": 15,
        "fullcodeline": "if ( ! ( entries = (char**) cJSON_malloc( numentries * sizeof(char*) ) ) )"
    },
    {
        "line": 17,
        "fullcodeline": "if ( ! ( names = (char**) cJSON_malloc( numentries * sizeof(char*) ) ) ) {"
    },
    {
        "line": 40,
        "fullcodeline": "if ( ! fail ) {"
    },
    {
        "line": 65,
        "fullcodeline": "for ( i = 0; i < numentries; ++i ) {"
    },
    {
        "line": 11,
        "fullcodeline": "++numentries;"
    },
    {
        "line": 12,
        "fullcodeline": "child = child->next;"
    },
    {
        "line": 18,
        "fullcodeline": "cJSON_free( entries );"
    },
    {
        "line": 28,
        "fullcodeline": "len += depth;"
    },
    {
        "line": 30,
        "fullcodeline": "names[i] = str = print_string_ptr( child->string );"
    },
    {
        "line": 31,
        "fullcodeline": "entries[i++] = ret = print_value( child, depth, fmt );"
    },
    {
        "line": 36,
        "fullcodeline": "child = child->next;"
    },
    {
        "line": 41,
        "fullcodeline": "out = (char*) cJSON_malloc( len );"
    },
    {
        "line": 54,
        "fullcodeline": "cJSON_free( names );"
    },
    {
        "line": 55,
        "fullcodeline": "cJSON_free( entries );"
    },
    {
        "line": 63,
        "fullcodeline": "*ptr++ = '\\n';"
    },
    {
        "line": 69,
        "fullcodeline": "strcpy( ptr, names[i] );"
    },
    {
        "line": 70,
        "fullcodeline": "ptr += strlen( names[i] );"
    },
    {
        "line": 71,
        "fullcodeline": "*ptr++ = ':';"
    },
    {
        "line": 74,
        "fullcodeline": "strcpy( ptr, entries[i] );"
    },
    {
        "line": 75,
        "fullcodeline": "ptr += strlen( entries[i] );"
    },
    {
        "line": 80,
        "fullcodeline": "*ptr = 0;"
    },
    {
        "line": 81,
        "fullcodeline": "cJSON_free( names[i] );"
    },
    {
        "line": 82,
        "fullcodeline": "cJSON_free( entries[i] );"
    },
    {
        "line": 32,
        "fullcodeline": "if ( str && ret )"
    },
    {
        "line": 42,
        "fullcodeline": "if ( ! out )"
    },
    {
        "line": 48,
        "fullcodeline": "for ( i = 0; i < numentries; ++i ) {"
    },
    {
        "line": 76,
        "fullcodeline": "if ( i != numentries - 1 )"
    },
    {
        "line": 88,
        "fullcodeline": "for ( i = 0; i < depth - 1; ++i )"
    },
    {
        "line": 89,
        "fullcodeline": "*ptr++ = '\\t';"
    },
    {
        "line": 33,
        "fullcodeline": "len += strlen( ret ) + strlen( str ) + 2 + ( fmt ? 2 + depth : 0 );"
    },
    {
        "line": 43,
        "fullcodeline": "fail = 1;"
    },
    {
        "line": 73,
        "fullcodeline": "*ptr++ = '\\t';"
    },
    {
        "line": 77,
        "fullcodeline": "*ptr++ = ',';"
    },
    {
        "line": 79,
        "fullcodeline": "*ptr++ = '\\n';"
    },
    {
        "line": 35,
        "fullcodeline": "fail = 1;"
    },
    {
        "line": 67,
        "fullcodeline": "for ( j = 0; j < depth; ++j )"
    },
    {
        "line": 68,
        "fullcodeline": "*ptr++ = '\\t';"
    },
    {
        "line": 50,
        "fullcodeline": "cJSON_free( names[i] );"
    },
    {
        "line": 52,
        "fullcodeline": "cJSON_free( entries[i] );"
    }
]