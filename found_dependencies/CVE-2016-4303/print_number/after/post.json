[
    {
        "line": 3,
        "fullcodeline": "char *str=0;"
    },
    {
        "line": 4,
        "fullcodeline": "double d=item->valuedouble;"
    },
    {
        "line": 5,
        "fullcodeline": "if (d==0)"
    },
    {
        "line": 7,
        "fullcodeline": "if (p)\tstr=ensure(p,2);"
    },
    {
        "line": 9,
        "fullcodeline": "if (str) strcpy(str,\"0\");"
    },
    {
        "line": 11,
        "fullcodeline": "else if (fabs(((double)item->valueint)-d)<=DBL_EPSILON && d<=LLONG_MAX && d>=LLONG_MIN)"
    },
    {
        "line": 8,
        "fullcodeline": "else\tstr=(char*)cJSON_malloc(2);\t/* special case for 0. */"
    },
    {
        "line": 13,
        "fullcodeline": "if (p)\tstr=ensure(p,64);"
    },
    {
        "line": 15,
        "fullcodeline": "if (str)\tsprintf(str,\"%lld\",(long long) item->valueint);"
    },
    {
        "line": 14,
        "fullcodeline": "else\tstr=(char*)cJSON_malloc(64);"
    },
    {
        "line": 19,
        "fullcodeline": "if (p)\tstr=ensure(p,64);"
    },
    {
        "line": 20,
        "fullcodeline": "else\tstr=(char*)cJSON_malloc(64);\t/* This is a nice tradeoff. */"
    },
    {
        "line": 23,
        "fullcodeline": "if (fpclassify(d) != FP_ZERO && !isnormal(d))\t\t\t\tsprintf(str,\"null\");"
    },
    {
        "line": 24,
        "fullcodeline": "else if (fabs(floor(d)-d)<=DBL_EPSILON && fabs(d)<1.0e60)\tsprintf(str,\"%.0f\",d);"
    },
    {
        "line": 25,
        "fullcodeline": "else if (fabs(d)<1.0e-6 || fabs(d)>1.0e9)\t\t\t\t\tsprintf(str,\"%e\",d);"
    },
    {
        "line": 26,
        "fullcodeline": "else\t\t\t\t\t\t\t\t\t\t\t\t\t\tsprintf(str,\"%f\",d);"
    }
]