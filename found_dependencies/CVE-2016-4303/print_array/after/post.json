[
    {
        "line": 4,
        "fullcodeline": "char *out=0,*ptr,*ret;int len=5;"
    },
    {
        "line": 5,
        "fullcodeline": "cJSON *child=item->child;"
    },
    {
        "line": 6,
        "fullcodeline": "int numentries=0,i=0,fail=0;"
    },
    {
        "line": 7,
        "fullcodeline": "size_t tmplen=0;"
    },
    {
        "line": 10,
        "fullcodeline": "while (child) numentries++,child=child->next;"
    },
    {
        "line": 12,
        "fullcodeline": "if (!numentries)"
    },
    {
        "line": 23,
        "fullcodeline": "i=p->offset;"
    },
    {
        "line": 24,
        "fullcodeline": "ptr=ensure(p,1);if (!ptr) return 0;\t*ptr='[';\tp->offset++;"
    },
    {
        "line": 25,
        "fullcodeline": "child=item->child;"
    },
    {
        "line": 33,
        "fullcodeline": "ptr=ensure(p,2);if (!ptr) return 0;\t*ptr++=']';*ptr=0;"
    },
    {
        "line": 34,
        "fullcodeline": "out=(p->buffer)+i;"
    },
    {
        "line": 26,
        "fullcodeline": "while (child && !fail)"
    },
    {
        "line": 39,
        "fullcodeline": "entries=(char**)cJSON_malloc(numentries*sizeof(char*));"
    },
    {
        "line": 41,
        "fullcodeline": "memset(entries,0,numentries*sizeof(char*));"
    },
    {
        "line": 43,
        "fullcodeline": "child=item->child;"
    },
    {
        "line": 66,
        "fullcodeline": "*out='[';"
    },
    {
        "line": 67,
        "fullcodeline": "ptr=out+1;*ptr=0;"
    },
    {
        "line": 74,
        "fullcodeline": "cJSON_free(entries);"
    },
    {
        "line": 75,
        "fullcodeline": "*ptr++=']';*ptr++=0;"
    },
    {
        "line": 14,
        "fullcodeline": "if (p)\tout=ensure(p,3);"
    },
    {
        "line": 16,
        "fullcodeline": "if (out) strcpy(out,\"[]\");"
    },
    {
        "line": 28,
        "fullcodeline": "print_value(child,depth+1,fmt,p);"
    },
    {
        "line": 29,
        "fullcodeline": "p->offset=update(p);"
    },
    {
        "line": 31,
        "fullcodeline": "child=child->next;"
    },
    {
        "line": 40,
        "fullcodeline": "if (!entries) return 0;"
    },
    {
        "line": 44,
        "fullcodeline": "while (child && !fail)"
    },
    {
        "line": 53,
        "fullcodeline": "if (!fail)\tout=(char*)cJSON_malloc(len);"
    },
    {
        "line": 55,
        "fullcodeline": "if (!out) fail=1;"
    },
    {
        "line": 68,
        "fullcodeline": "for (i=0;i<numentries;i++)"
    },
    {
        "line": 15,
        "fullcodeline": "else\tout=(char*)cJSON_malloc(3);"
    },
    {
        "line": 46,
        "fullcodeline": "ret=print_value(child,depth+1,fmt,0);"
    },
    {
        "line": 47,
        "fullcodeline": "entries[i++]=ret;"
    },
    {
        "line": 49,
        "fullcodeline": "child=child->next;"
    },
    {
        "line": 61,
        "fullcodeline": "cJSON_free(entries);"
    },
    {
        "line": 70,
        "fullcodeline": "tmplen=strlen(entries[i]);memcpy(ptr,entries[i],tmplen);ptr+=tmplen;"
    },
    {
        "line": 72,
        "fullcodeline": "cJSON_free(entries[i]);"
    },
    {
        "line": 30,
        "fullcodeline": "if (child->next) {len=fmt?2:1;ptr=ensure(p,len+1);if (!ptr) return 0;*ptr++=',';if(fmt)*ptr++=' ';*ptr=0;p->offset+=len;}"
    },
    {
        "line": 60,
        "fullcodeline": "for (i=0;i<numentries;i++) if (entries[i]) cJSON_free(entries[i]);"
    },
    {
        "line": 71,
        "fullcodeline": "if (i!=numentries-1) {*ptr++=',';if(fmt)*ptr++=' ';*ptr=0;}"
    },
    {
        "line": 48,
        "fullcodeline": "if (ret) len+=strlen(ret)+2+(fmt?1:0); else fail=1;"
    }
]