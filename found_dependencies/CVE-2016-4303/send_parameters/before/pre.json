[
    {
        "line": 3,
        "fullcodeline": "int r = 0;"
    },
    {
        "line": 6,
        "fullcodeline": "j = cJSON_CreateObject();"
    },
    {
        "line": 7,
        "fullcodeline": "if (j == NULL) {"
    },
    {
        "line": 8,
        "fullcodeline": "i_errno = IESENDPARAMS;"
    },
    {
        "line": 9,
        "fullcodeline": "r = -1;"
    },
    {
        "line": 15,
        "fullcodeline": "cJSON_AddIntToObject(j, \"omit\", test->omit);"
    },
    {
        "line": 28,
        "fullcodeline": "cJSON_AddIntToObject(j, \"parallel\", test->num_streams);"
    },
    {
        "line": 58,
        "fullcodeline": "cJSON_Delete(j);"
    },
    {
        "line": 11,
        "fullcodeline": "if (test->protocol->id == Ptcp)"
    },
    {
        "line": 16,
        "fullcodeline": "if (test->server_affinity != -1)"
    },
    {
        "line": 54,
        "fullcodeline": "if (JSON_write(test->ctrl_sck, j) < 0) {"
    },
    {
        "line": 12,
        "fullcodeline": "cJSON_AddTrueToObject(j, \"tcp\");"
    },
    {
        "line": 17,
        "fullcodeline": "cJSON_AddIntToObject(j, \"server_affinity\", test->server_affinity);"
    },
    {
        "line": 19,
        "fullcodeline": "cJSON_AddIntToObject(j, \"time\", test->duration);"
    },
    {
        "line": 21,
        "fullcodeline": "cJSON_AddIntToObject(j, \"num\", test->settings->bytes);"
    },
    {
        "line": 23,
        "fullcodeline": "cJSON_AddIntToObject(j, \"blockcount\", test->settings->blocks);"
    },
    {
        "line": 25,
        "fullcodeline": "cJSON_AddIntToObject(j, \"MSS\", test->settings->mss);"
    },
    {
        "line": 27,
        "fullcodeline": "cJSON_AddTrueToObject(j, \"nodelay\");"
    },
    {
        "line": 30,
        "fullcodeline": "cJSON_AddTrueToObject(j, \"reverse\");"
    },
    {
        "line": 32,
        "fullcodeline": "cJSON_AddIntToObject(j, \"window\", test->settings->socket_bufsize);"
    },
    {
        "line": 34,
        "fullcodeline": "cJSON_AddIntToObject(j, \"len\", test->settings->blksize);"
    },
    {
        "line": 36,
        "fullcodeline": "cJSON_AddIntToObject(j, \"bandwidth\", test->settings->rate);"
    },
    {
        "line": 38,
        "fullcodeline": "cJSON_AddIntToObject(j, \"burst\", test->settings->burst);"
    },
    {
        "line": 40,
        "fullcodeline": "cJSON_AddIntToObject(j, \"TOS\", test->settings->tos);"
    },
    {
        "line": 42,
        "fullcodeline": "cJSON_AddIntToObject(j, \"flowlabel\", test->settings->flowlabel);"
    },
    {
        "line": 44,
        "fullcodeline": "cJSON_AddStringToObject(j, \"title\", test->title);"
    },
    {
        "line": 46,
        "fullcodeline": "cJSON_AddStringToObject(j, \"congestion\", test->congestion);"
    },
    {
        "line": 48,
        "fullcodeline": "cJSON_AddIntToObject(j, \"get_server_output\", iperf_get_test_get_server_output(test));"
    },
    {
        "line": 51,
        "fullcodeline": "printf(\"send_parameters:\\n%s\\n\", cJSON_Print(j));"
    },
    {
        "line": 55,
        "fullcodeline": "i_errno = IESENDPARAMS;"
    },
    {
        "line": 56,
        "fullcodeline": "r = -1;"
    },
    {
        "line": 13,
        "fullcodeline": "else if (test->protocol->id == Pudp)"
    },
    {
        "line": 14,
        "fullcodeline": "cJSON_AddTrueToObject(j, \"udp\");"
    }
]