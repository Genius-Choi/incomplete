[
    {
        "line": 3,
        "fullcodeline": "const char *ptr = str + 1;"
    },
    {
        "line": 6,
        "fullcodeline": "int len = 0;"
    },
    {
        "line": 23,
        "fullcodeline": "ptr = str + 1;"
    },
    {
        "line": 24,
        "fullcodeline": "ptr2 = out;"
    },
    {
        "line": 80,
        "fullcodeline": "*ptr2 = 0;"
    },
    {
        "line": 83,
        "fullcodeline": "item->valuestring = out;"
    },
    {
        "line": 84,
        "fullcodeline": "item->type = cJSON_String;"
    },
    {
        "line": 9,
        "fullcodeline": "if ( *str != '\\\"' ) {"
    },
    {
        "line": 16,
        "fullcodeline": "while ( *ptr != '\\\"' && *ptr && ++len )"
    },
    {
        "line": 20,
        "fullcodeline": "if ( ! ( out = (char*) cJSON_malloc( len + 1 ) ) )"
    },
    {
        "line": 25,
        "fullcodeline": "while ( *ptr != '\\\"' && *ptr ) {"
    },
    {
        "line": 81,
        "fullcodeline": "if ( *ptr == '\\\"' )"
    },
    {
        "line": 11,
        "fullcodeline": "ep = str;"
    },
    {
        "line": 17,
        "fullcodeline": "if ( *ptr++ == '\\\\' )"
    },
    {
        "line": 82,
        "fullcodeline": "++ptr;"
    },
    {
        "line": 18,
        "fullcodeline": "ptr++;"
    },
    {
        "line": 26,
        "fullcodeline": "if ( *ptr != '\\\\' )"
    },
    {
        "line": 29,
        "fullcodeline": "ptr++;"
    },
    {
        "line": 77,
        "fullcodeline": "++ptr;"
    },
    {
        "line": 27,
        "fullcodeline": "*ptr2++ = *ptr++;"
    },
    {
        "line": 31,
        "fullcodeline": "case 'b': *ptr2++ ='\\b'; break;"
    },
    {
        "line": 32,
        "fullcodeline": "case 'f': *ptr2++ ='\\f'; break;"
    },
    {
        "line": 33,
        "fullcodeline": "case 'n': *ptr2++ ='\\n'; break;"
    },
    {
        "line": 34,
        "fullcodeline": "case 'r': *ptr2++ ='\\r'; break;"
    },
    {
        "line": 35,
        "fullcodeline": "case 't': *ptr2++ ='\\t'; break;"
    },
    {
        "line": 39,
        "fullcodeline": "sscanf( ptr + 1,\"%4x\", &uc );"
    },
    {
        "line": 40,
        "fullcodeline": "ptr += 4;"
    },
    {
        "line": 58,
        "fullcodeline": "len = 4;"
    },
    {
        "line": 65,
        "fullcodeline": "ptr2 += len;"
    },
    {
        "line": 73,
        "fullcodeline": "ptr2 += len;"
    },
    {
        "line": 75,
        "fullcodeline": "default:  *ptr2++ = *ptr; break;"
    },
    {
        "line": 42,
        "fullcodeline": "if ( ( uc >= 0xDC00 && uc <= 0xDFFF ) || uc == 0 )"
    },
    {
        "line": 46,
        "fullcodeline": "if ( uc >= 0xD800 && uc <= 0xDBFF ) {"
    },
    {
        "line": 59,
        "fullcodeline": "if ( uc < 0x80 )"
    },
    {
        "line": 50,
        "fullcodeline": "sscanf( ptr + 3, \"%4x\", &uc2 );"
    },
    {
        "line": 51,
        "fullcodeline": "ptr += 6;"
    },
    {
        "line": 55,
        "fullcodeline": "uc = 0x10000 | ( ( uc & 0x3FF ) << 10 ) | ( uc2 & 0x3FF );"
    },
    {
        "line": 60,
        "fullcodeline": "len = 1;"
    },
    {
        "line": 68,
        "fullcodeline": "case 4: *--ptr2 = ( ( uc | 0x80) & 0xBF ); uc >>= 6;"
    },
    {
        "line": 69,
        "fullcodeline": "case 3: *--ptr2 = ( ( uc | 0x80) & 0xBF ); uc >>= 6;"
    },
    {
        "line": 70,
        "fullcodeline": "case 2: *--ptr2 = ( ( uc | 0x80) & 0xBF ); uc >>= 6;"
    },
    {
        "line": 71,
        "fullcodeline": "case 1: *--ptr2 = ( uc | firstByteMark[len] );"
    },
    {
        "line": 47,
        "fullcodeline": "if ( ptr[1] != '\\\\' || ptr[2] != 'u' )"
    },
    {
        "line": 52,
        "fullcodeline": "if ( uc2 < 0xDC00 || uc2 > 0xDFFF )"
    },
    {
        "line": 61,
        "fullcodeline": "else if ( uc < 0x800 )"
    },
    {
        "line": 62,
        "fullcodeline": "len = 2;"
    },
    {
        "line": 63,
        "fullcodeline": "else if ( uc < 0x10000 )"
    },
    {
        "line": 64,
        "fullcodeline": "len = 3;"
    }
]