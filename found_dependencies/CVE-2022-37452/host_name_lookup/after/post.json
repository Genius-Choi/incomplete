[
    {
        "line": 4,
        "fullcodeline": "int sep = 0;"
    },
    {
        "line": 8,
        "fullcodeline": "const uschar *list = host_lookup_order;"
    },
    {
        "line": 9,
        "fullcodeline": "dns_answer * dnsa = store_get_dns_answer();"
    },
    {
        "line": 12,
        "fullcodeline": "sender_host_dnssec = host_lookup_deferred = host_lookup_failed = FALSE;"
    },
    {
        "line": 15,
        "fullcodeline": "debug_printf(\"looking up host name for %s\\n\", sender_host_address);"
    },
    {
        "line": 150,
        "fullcodeline": "HDEBUG(D_host_lookup)"
    },
    {
        "line": 170,
        "fullcodeline": "save_hostname = sender_host_name;   /* Save for error messages */"
    },
    {
        "line": 171,
        "fullcodeline": "aliases = sender_host_aliases;"
    },
    {
        "line": 244,
        "fullcodeline": "debug_printf(\"%s does not match any IP address for %s\\n\","
    },
    {
        "line": 249,
        "fullcodeline": "old_pool = store_pool;"
    },
    {
        "line": 250,
        "fullcodeline": "store_pool = POOL_PERM;"
    },
    {
        "line": 251,
        "fullcodeline": "host_lookup_msg = string_sprintf(\" (%s does not match any IP address for %s)\","
    },
    {
        "line": 253,
        "fullcodeline": "store_pool = old_pool;"
    },
    {
        "line": 254,
        "fullcodeline": "host_lookup_failed = TRUE;"
    },
    {
        "line": 20,
        "fullcodeline": "if (f.running_in_test_harness &&"
    },
    {
        "line": 32,
        "fullcodeline": "while ((ordername = string_nextinlist(&list, &sep, NULL, 0)))"
    },
    {
        "line": 140,
        "fullcodeline": "if (!sender_host_name)"
    },
    {
        "line": 152,
        "fullcodeline": "uschar **aliases = sender_host_aliases;"
    },
    {
        "line": 153,
        "fullcodeline": "debug_printf(\"IP address lookup yielded \\\"%s\\\"\\n\", sender_host_name);"
    },
    {
        "line": 234,
        "fullcodeline": "if (sender_host_name == NULL && *sender_host_aliases != NULL)"
    },
    {
        "line": 239,
        "fullcodeline": "if (sender_host_name != NULL) return OK;"
    },
    {
        "line": 21,
        "fullcodeline": "Ustrcmp(sender_host_address, \"99.99.99.99\") == 0)"
    },
    {
        "line": 24,
        "fullcodeline": "debug_printf(\"Test harness: host name lookup returns DEFER\\n\");"
    },
    {
        "line": 25,
        "fullcodeline": "host_lookup_deferred = TRUE;"
    },
    {
        "line": 145,
        "fullcodeline": "host_lookup_msg = US\" (failed to find host name from IP address)\";"
    },
    {
        "line": 146,
        "fullcodeline": "host_lookup_failed = TRUE;"
    },
    {
        "line": 154,
        "fullcodeline": "while (*aliases != NULL) debug_printf(\"  alias \\\"%s\\\"\\n\", *aliases++);"
    },
    {
        "line": 172,
        "fullcodeline": "for (uschar * hname = sender_host_name; hname; hname = *aliases++)"
    },
    {
        "line": 175,
        "fullcodeline": "BOOL ok = FALSE;"
    },
    {
        "line": 176,
        "fullcodeline": "host_item h = { .next = NULL, .name = hname, .mx = MX_NONE, .address = NULL };"
    },
    {
        "line": 215,
        "fullcodeline": "HDEBUG(D_host_lookup) debug_printf(\"no IP addresses found for %s\\n\", hname);"
    },
    {
        "line": 142,
        "fullcodeline": "if (host_checking || !f.log_testing_mode)"
    },
    {
        "line": 220,
        "fullcodeline": "if (!ok)"
    },
    {
        "line": 36,
        "fullcodeline": "uschar * name = dns_build_reverse(sender_host_address);"
    },
    {
        "line": 38,
        "fullcodeline": "dns_init(FALSE, FALSE, FALSE);    /* dnssec ctrl by dns_dnssec_ok glbl */"
    },
    {
        "line": 39,
        "fullcodeline": "rc = dns_lookup_timerwrap(dnsa, name, T_PTR, NULL);"
    },
    {
        "line": 143,
        "fullcodeline": "log_write(L_host_lookup_failed, LOG_MAIN, \"no host name found for IP \""
    },
    {
        "line": 235,
        "fullcodeline": "sender_host_name = *sender_host_aliases++;"
    },
    {
        "line": 47,
        "fullcodeline": "if (rc == DNS_SUCCEED)"
    },
    {
        "line": 112,
        "fullcodeline": "if (rc == DNS_AGAIN)"
    },
    {
        "line": 222,
        "fullcodeline": "if (hname == sender_host_name) sender_host_name = NULL; else"
    },
    {
        "line": 49,
        "fullcodeline": "uschar **aptr = NULL;"
    },
    {
        "line": 50,
        "fullcodeline": "int ssize = 264;"
    },
    {
        "line": 51,
        "fullcodeline": "int count = 1;  /* need 1 more for terminating NULL */"
    },
    {
        "line": 52,
        "fullcodeline": "int old_pool = store_pool;"
    },
    {
        "line": 54,
        "fullcodeline": "sender_host_dnssec = dns_is_secure(dnsa);"
    },
    {
        "line": 56,
        "fullcodeline": "debug_printf(\"Reverse DNS security status: %s\\n\","
    },
    {
        "line": 59,
        "fullcodeline": "store_pool = POOL_PERM;        /* Save names in permanent storage */"
    },
    {
        "line": 69,
        "fullcodeline": "aptr = sender_host_aliases = store_get(count * sizeof(uschar *), FALSE);"
    },
    {
        "line": 102,
        "fullcodeline": "*aptr = NULL;            /* End of alias list */"
    },
    {
        "line": 103,
        "fullcodeline": "store_pool = old_pool;   /* Reset store pool */"
    },
    {
        "line": 115,
        "fullcodeline": "debug_printf(\"IP address PTR lookup gave temporary error\\n\");"
    },
    {
        "line": 116,
        "fullcodeline": "host_lookup_deferred = TRUE;"
    },
    {
        "line": 57,
        "fullcodeline": "sender_host_dnssec ? \"DNSSEC verified (AD)\" : \"unverified\");"
    },
    {
        "line": 63,
        "fullcodeline": "rr = dns_next_rr(dnsa, &dnss, RESET_NEXT)) if (rr->type == T_PTR)"
    },
    {
        "line": 75,
        "fullcodeline": "rr = dns_next_rr(dnsa, &dnss, RESET_NEXT)) if (rr->type == T_PTR)"
    },
    {
        "line": 126,
        "fullcodeline": "debug_printf(\"IP address lookup using gethostbyaddr()\\n\");"
    },
    {
        "line": 127,
        "fullcodeline": "rc = host_name_lookup_byaddr();"
    },
    {
        "line": 225,
        "fullcodeline": "a = --aliases;                           /* compilers grumble */"
    },
    {
        "line": 61,
        "fullcodeline": "for (dns_record * rr = dns_next_rr(dnsa, &dnss, RESET_ANSWERS);"
    },
    {
        "line": 73,
        "fullcodeline": "for (dns_record * rr = dns_next_rr(dnsa, &dnss, RESET_ANSWERS);"
    },
    {
        "line": 128,
        "fullcodeline": "if (rc == DEFER)"
    },
    {
        "line": 133,
        "fullcodeline": "if (rc == OK) break;               /* Found a name */"
    },
    {
        "line": 226,
        "fullcodeline": "while (*a != NULL) { *a = a[1]; a++; }"
    },
    {
        "line": 64,
        "fullcodeline": "count++;"
    },
    {
        "line": 77,
        "fullcodeline": "uschar * s = store_get(ssize, TRUE);\t/* names are tainted */"
    },
    {
        "line": 90,
        "fullcodeline": "store_release_above(s + Ustrlen(s) + 1);"
    },
    {
        "line": 130,
        "fullcodeline": "host_lookup_deferred = TRUE;"
    },
    {
        "line": 82,
        "fullcodeline": "if (dn_expand(dnsa->answer, dnsa->answer + dnsa->answerlen,"
    },
    {
        "line": 91,
        "fullcodeline": "if (!s[0])"
    },
    {
        "line": 97,
        "fullcodeline": "if (!sender_host_name) sender_host_name = s;"
    },
    {
        "line": 85,
        "fullcodeline": "log_write(0, LOG_MAIN, \"host name alias list truncated for %s\","
    },
    {
        "line": 93,
        "fullcodeline": "HDEBUG(D_host_lookup) debug_printf(\"IP address lookup yielded an \""
    },
    {
        "line": 99,
        "fullcodeline": "while (*s) { *s = tolower(*s); s++; }"
    },
    {
        "line": 83,
        "fullcodeline": "US (rr->data), (DN_EXPAND_ARG4_TYPE)(s), ssize) < 0)"
    },
    {
        "line": 98,
        "fullcodeline": "else *aptr++ = s;"
    }
]