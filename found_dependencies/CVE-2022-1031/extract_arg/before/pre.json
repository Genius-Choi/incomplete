[
    {
        "line": 2,
        "fullcodeline": "st64 ptr = 0;"
    },
    {
        "line": 3,
        "fullcodeline": "char *addr, *esil_buf = NULL;"
    },
    {
        "line": 4,
        "fullcodeline": "const st64 maxstackframe = 1024 * 8;"
    },
    {
        "line": 6,
        "fullcodeline": "r_return_if_fail (anal && fcn && op && reg);"
    },
    {
        "line": 80,
        "fullcodeline": "int rw = (op->direction == R_ANAL_OP_DIR_WRITE) ? R_ANAL_VAR_ACCESS_TYPE_WRITE : R_ANAL_VAR_ACCESS_TYPE_READ;"
    },
    {
        "line": 9,
        "fullcodeline": "for (i = 0; i < R_ARRAY_SIZE (op->src); i++) {"
    },
    {
        "line": 21,
        "fullcodeline": "if (!ptr) {"
    },
    {
        "line": 76,
        "fullcodeline": "if (anal->verbose && (!op->src[0] || !op->dst)) {"
    },
    {
        "line": 22,
        "fullcodeline": "const char *op_esil = r_strbuf_get (&op->esil);"
    },
    {
        "line": 26,
        "fullcodeline": "esil_buf = strdup (op_esil);"
    },
    {
        "line": 30,
        "fullcodeline": "r_strf_var (esilexpr, 64, \",%s,%s,\", reg, sign);"
    },
    {
        "line": 31,
        "fullcodeline": "char *ptr_end = strstr (esil_buf, esilexpr);"
    },
    {
        "line": 36,
        "fullcodeline": "*ptr_end = 0;"
    },
    {
        "line": 37,
        "fullcodeline": "addr = ptr_end;"
    },
    {
        "line": 83,
        "fullcodeline": "const char *pfx = isarg ? ARGPREFIX : VARPREFIX;"
    },
    {
        "line": 93,
        "fullcodeline": "RAnalVar *var = get_stack_var (fcn, frame_off);"
    },
    {
        "line": 98,
        "fullcodeline": "char *varname = NULL, *vartype = NULL;"
    },
    {
        "line": 10,
        "fullcodeline": "if (op->src[i] && op->src[i]->reg && op->src[i]->reg->name) {"
    },
    {
        "line": 23,
        "fullcodeline": "if (!op_esil) {"
    },
    {
        "line": 27,
        "fullcodeline": "if (!esil_buf) {"
    },
    {
        "line": 32,
        "fullcodeline": "if (!ptr_end) {"
    },
    {
        "line": 41,
        "fullcodeline": "if (strncmp (addr, \"0x\", 2)) {"
    },
    {
        "line": 85,
        "fullcodeline": "if (type == R_ANAL_VAR_KIND_SPV) {"
    },
    {
        "line": 133,
        "fullcodeline": "if (!varname) {"
    },
    {
        "line": 155,
        "fullcodeline": "st64 frame_off = -(ptr + fcn->bp_off);"
    },
    {
        "line": 159,
        "fullcodeline": "RAnalVar *var = get_stack_var (fcn, frame_off);"
    },
    {
        "line": 38,
        "fullcodeline": "while ((addr[0] != '0' || addr[1] != 'x') && addr >= esil_buf + 1 && *addr != ',') {"
    },
    {
        "line": 39,
        "fullcodeline": "addr--;"
    },
    {
        "line": 82,
        "fullcodeline": "const bool isarg = type == R_ANAL_VAR_KIND_SPV ? ptr >= fcn->stack : ptr >= fcn->bp_off;"
    },
    {
        "line": 86,
        "fullcodeline": "frame_off = ptr - fcn->stack;"
    },
    {
        "line": 90,
        "fullcodeline": "if (maxstackframe != 0 && (frame_off > maxstackframe || frame_off < -maxstackframe)) {"
    },
    {
        "line": 100,
        "fullcodeline": "const char *place = fcn->cc ? r_anal_cc_arg (anal, fcn->cc, ST32_MAX) : NULL;"
    },
    {
        "line": 102,
        "fullcodeline": "char *fname = r_type_func_guess (anal->sdb_types, fcn->name);"
    },
    {
        "line": 147,
        "fullcodeline": "RAnalVar *var = r_anal_function_set_var (fcn, frame_off, type, vartype, anal->bits / 8, isarg, varname);"
    },
    {
        "line": 11,
        "fullcodeline": "if (!strcmp (reg, op->src[i]->reg->name)) {"
    },
    {
        "line": 43,
        "fullcodeline": "if (!op->stackop && op->dst) {"
    },
    {
        "line": 54,
        "fullcodeline": "if (*addr == ',') {"
    },
    {
        "line": 72,
        "fullcodeline": "ptr = (st64)r_num_get (NULL, addr);"
    },
    {
        "line": 88,
        "fullcodeline": "frame_off = ptr - fcn->bp_off;"
    },
    {
        "line": 156,
        "fullcodeline": "if (maxstackframe != 0 && (frame_off > maxstackframe || frame_off < -maxstackframe)) {"
    },
    {
        "line": 168,
        "fullcodeline": "RAnalVar *var = r_anal_function_set_var (fcn, frame_off, type, NULL, anal->bits / 8, false, varname);"
    },
    {
        "line": 12,
        "fullcodeline": "st64 delta = op->src[i]->delta;"
    },
    {
        "line": 44,
        "fullcodeline": "const char *sp = r_reg_get_name (anal->reg, R_REG_NAME_SP);"
    },
    {
        "line": 45,
        "fullcodeline": "const char *bp = r_reg_get_name (anal->reg, R_REG_NAME_BP);"
    },
    {
        "line": 46,
        "fullcodeline": "const char *rn = op->dst->reg ? op->dst->reg->name : NULL;"
    },
    {
        "line": 55,
        "fullcodeline": "addr++;"
    },
    {
        "line": 57,
        "fullcodeline": "if (!op->stackop && op->type != R_ANAL_OP_TYPE_PUSH && op->type != R_ANAL_OP_TYPE_POP"
    },
    {
        "line": 58,
        "fullcodeline": "&& op->type != R_ANAL_OP_TYPE_RET && r_str_isnumber (addr)) {"
    },
    {
        "line": 59,
        "fullcodeline": "ptr = (st64)r_num_get (NULL, addr);"
    },
    {
        "line": 101,
        "fullcodeline": "bool stack_rev = place ? !strcmp (place, \"stack_rev\") : false;"
    },
    {
        "line": 104,
        "fullcodeline": "ut64 sum_sz = 0;"
    },
    {
        "line": 114,
        "fullcodeline": "const int bytes = (fcn->bits ? fcn->bits : anal->bits) / 8;"
    },
    {
        "line": 161,
        "fullcodeline": "r_anal_var_set_access (var, reg, op->addr, rw, -ptr);"
    },
    {
        "line": 13,
        "fullcodeline": "if ((delta > 0 && *sign == '+') || (delta < 0 && *sign == '-')) {"
    },
    {
        "line": 137,
        "fullcodeline": "varname = r_anal_function_autoname_var (fcn, type, pfx, ptr);"
    },
    {
        "line": 14,
        "fullcodeline": "ptr = R_ABS (op->src[i]->delta);"
    },
    {
        "line": 47,
        "fullcodeline": "if (rn && ((bp && !strcmp (bp, rn)) || (sp && !strcmp (sp, rn)))) {"
    },
    {
        "line": 60,
        "fullcodeline": "if (ptr && op->src[0] && ptr == op->src[0]->imm) {"
    },
    {
        "line": 107,
        "fullcodeline": "const size_t cnt = r_type_func_args_count (anal->sdb_types, fname);"
    },
    {
        "line": 108,
        "fullcodeline": "from = cnt ? cnt - 1 : cnt;"
    },
    {
        "line": 109,
        "fullcodeline": "to = fcn->cc ? r_anal_cc_max_arg (anal, fcn->cc) : 0;"
    },
    {
        "line": 115,
        "fullcodeline": "for (i = from; stack_rev ? i >= to : i < to; stack_rev ? i-- : i++) {"
    },
    {
        "line": 116,
        "fullcodeline": "char *tp = r_type_func_args_type (anal->sdb_types, fname, i);"
    },
    {
        "line": 125,
        "fullcodeline": "ut64 bit_sz = r_type_get_bitsize (anal->sdb_types, tp);"
    },
    {
        "line": 126,
        "fullcodeline": "sum_sz += bit_sz ? bit_sz / 8 : bytes;"
    },
    {
        "line": 127,
        "fullcodeline": "sum_sz = R_ROUND (sum_sz, bytes);"
    },
    {
        "line": 170,
        "fullcodeline": "r_anal_var_set_access (var, reg, op->addr, rw, -ptr);"
    },
    {
        "line": 63,
        "fullcodeline": "} else if ((op->stackop == R_ANAL_STACK_SET) || (op->stackop == R_ANAL_STACK_GET)) {"
    },
    {
        "line": 67,
        "fullcodeline": "ptr = R_ABS (op->ptr);"
    },
    {
        "line": 111,
        "fullcodeline": "from = fcn->cc ? r_anal_cc_max_arg (anal, fcn->cc) : 0;"
    },
    {
        "line": 112,
        "fullcodeline": "to = r_type_func_args_count (anal->sdb_types, fname);"
    },
    {
        "line": 117,
        "fullcodeline": "if (!tp) {"
    },
    {
        "line": 120,
        "fullcodeline": "if (sum_sz == frame_off) {"
    },
    {
        "line": 64,
        "fullcodeline": "if (op->ptr % 4) {"
    },
    {
        "line": 121,
        "fullcodeline": "vartype = tp;"
    },
    {
        "line": 122,
        "fullcodeline": "varname = strdup (r_type_func_args_name (anal->sdb_types, fname, i));"
    }
]