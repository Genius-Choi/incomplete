[
    {
        "line": 5,
        "fullcodeline": "import tempfile"
    },
    {
        "line": 7,
        "fullcodeline": "i = sys.argv.index('-c')"
    },
    {
        "line": 10,
        "fullcodeline": "remove_build_dir = 0"
    },
    {
        "line": 21,
        "fullcodeline": "_reg1 = re.compile(r'[-][-]link[-]')"
    },
    {
        "line": 22,
        "fullcodeline": "sysinfo_flags = [_m for _m in sys.argv[1:] if _reg1.match(_m)]"
    },
    {
        "line": 23,
        "fullcodeline": "sys.argv = [_m for _m in sys.argv if _m not in sysinfo_flags]"
    },
    {
        "line": 27,
        "fullcodeline": "_reg2 = re.compile(r'[-][-]((no[-]|)(wrap[-]functions|lower)|debug[-]capi|quiet)|[-]include')"
    },
    {
        "line": 28,
        "fullcodeline": "f2py_flags = [_m for _m in sys.argv[1:] if _reg2.match(_m)]"
    },
    {
        "line": 29,
        "fullcodeline": "sys.argv = [_m for _m in sys.argv if _m not in f2py_flags]"
    },
    {
        "line": 30,
        "fullcodeline": "f2py_flags2 = []"
    },
    {
        "line": 31,
        "fullcodeline": "fl = 0"
    },
    {
        "line": 41,
        "fullcodeline": "f2py_flags.extend(f2py_flags2)"
    },
    {
        "line": 43,
        "fullcodeline": "sys.argv = [_m for _m in sys.argv if _m not in f2py_flags2]"
    },
    {
        "line": 44,
        "fullcodeline": "_reg3 = re.compile(r'[-][-]((f(90)?compiler([-]exec|)|compiler)=|help[-]compiler)')"
    },
    {
        "line": 45,
        "fullcodeline": "flib_flags = [_m for _m in sys.argv[1:] if _reg3.match(_m)]"
    },
    {
        "line": 46,
        "fullcodeline": "sys.argv = [_m for _m in sys.argv if _m not in flib_flags]"
    },
    {
        "line": 47,
        "fullcodeline": "_reg4 = re.compile(r'[-][-]((f(77|90)(flags|exec)|opt|arch)=|(debug|noopt|noarch|help[-]fcompiler))')"
    },
    {
        "line": 48,
        "fullcodeline": "fc_flags = [_m for _m in sys.argv[1:] if _reg4.match(_m)]"
    },
    {
        "line": 49,
        "fullcodeline": "sys.argv = [_m for _m in sys.argv if _m not in fc_flags]"
    },
    {
        "line": 76,
        "fullcodeline": "_reg5 = re.compile(r'[-][-](verbose)')"
    },
    {
        "line": 77,
        "fullcodeline": "setup_flags = [_m for _m in sys.argv[1:] if _reg5.match(_m)]"
    },
    {
        "line": 78,
        "fullcodeline": "sys.argv = [_m for _m in sys.argv if _m not in setup_flags]"
    },
    {
        "line": 83,
        "fullcodeline": "modulename = 'untitled'"
    },
    {
        "line": 84,
        "fullcodeline": "sources = sys.argv[1:]"
    },
    {
        "line": 113,
        "fullcodeline": "using_numarray = 0"
    },
    {
        "line": 114,
        "fullcodeline": "using_numeric = 0"
    },
    {
        "line": 124,
        "fullcodeline": "from numpy.distutils.system_info import get_info"
    },
    {
        "line": 126,
        "fullcodeline": "num_include_dir = None"
    },
    {
        "line": 127,
        "fullcodeline": "num_info = {}"
    },
    {
        "line": 138,
        "fullcodeline": "ext_args = {'name': modulename, 'sources': sources,"
    },
    {
        "line": 157,
        "fullcodeline": "ext = Extension(**ext_args)"
    },
    {
        "line": 158,
        "fullcodeline": "sys.argv = [sys.argv[0]] + setup_flags"
    },
    {
        "line": 168,
        "fullcodeline": "setup(ext_modules = [ext])"
    },
    {
        "line": 13,
        "fullcodeline": "if i is not None:"
    },
    {
        "line": 32,
        "fullcodeline": "for a in sys.argv[1:]:"
    },
    {
        "line": 39,
        "fullcodeline": "if f2py_flags2 and f2py_flags2[-1]!=':':"
    },
    {
        "line": 80,
        "fullcodeline": "if '--quiet' in f2py_flags:"
    },
    {
        "line": 86,
        "fullcodeline": "for optname in ['--include_paths', '--include-paths']:"
    },
    {
        "line": 93,
        "fullcodeline": "if '-m' in sys.argv:"
    },
    {
        "line": 107,
        "fullcodeline": "extra_objects, sources = filter_files('', '[.](o|a|so)', sources)"
    },
    {
        "line": 108,
        "fullcodeline": "include_dirs, sources = filter_files('-I', '', sources, remove_prefix=1)"
    },
    {
        "line": 109,
        "fullcodeline": "library_dirs, sources = filter_files('-L', '', sources, remove_prefix=1)"
    },
    {
        "line": 110,
        "fullcodeline": "libraries, sources = filter_files('-l', '', sources, remove_prefix=1)"
    },
    {
        "line": 111,
        "fullcodeline": "undef_macros, sources = filter_files('-U', '', sources, remove_prefix=1)"
    },
    {
        "line": 112,
        "fullcodeline": "define_macros, sources = filter_files('-D', '', sources, remove_prefix=1)"
    },
    {
        "line": 115,
        "fullcodeline": "for i in range(len(define_macros)):"
    },
    {
        "line": 137,
        "fullcodeline": "from numpy.distutils.core import setup, Extension"
    },
    {
        "line": 159,
        "fullcodeline": "sys.argv.extend(['build',"
    },
    {
        "line": 170,
        "fullcodeline": "if remove_build_dir and os.path.exists(build_dir):"
    },
    {
        "line": 11,
        "fullcodeline": "try: i = sys.argv.index('--build-dir')"
    },
    {
        "line": 16,
        "fullcodeline": "del sys.argv[i]"
    },
    {
        "line": 18,
        "fullcodeline": "remove_build_dir = 1"
    },
    {
        "line": 19,
        "fullcodeline": "build_dir = os.path.join(tempfile.mktemp())"
    },
    {
        "line": 25,
        "fullcodeline": "sysinfo_flags = [f[7:] for f in sysinfo_flags]"
    },
    {
        "line": 40,
        "fullcodeline": "f2py_flags2.append(':')"
    },
    {
        "line": 52,
        "fullcodeline": "del_list = []"
    },
    {
        "line": 74,
        "fullcodeline": "assert len(flib_flags)<=2, repr(flib_flags)"
    },
    {
        "line": 81,
        "fullcodeline": "setup_flags.append('--quiet')"
    },
    {
        "line": 94,
        "fullcodeline": "i = sys.argv.index('-m')"
    },
    {
        "line": 95,
        "fullcodeline": "modulename = sys.argv[i+1]"
    },
    {
        "line": 96,
        "fullcodeline": "del sys.argv[i+1], sys.argv[i]"
    },
    {
        "line": 97,
        "fullcodeline": "sources = sys.argv[1:]"
    },
    {
        "line": 99,
        "fullcodeline": "from numpy.distutils.command.build_src import get_f2py_modulename"
    },
    {
        "line": 101,
        "fullcodeline": "sources = pyf_files + sources"
    },
    {
        "line": 135,
        "fullcodeline": "include_dirs.extend(num_info.get('include_dirs', []))"
    },
    {
        "line": 149,
        "fullcodeline": "from numpy.distutils.misc_util import dict_append"
    },
    {
        "line": 171,
        "fullcodeline": "import shutil"
    },
    {
        "line": 172,
        "fullcodeline": "outmess('Removing build directory %s\\n'%(build_dir))"
    },
    {
        "line": 173,
        "fullcodeline": "shutil.rmtree(build_dir)"
    },
    {
        "line": 53,
        "fullcodeline": "for s in flib_flags:"
    },
    {
        "line": 71,
        "fullcodeline": "for s in del_list:"
    },
    {
        "line": 100,
        "fullcodeline": "pyf_files, sources = filter_files('', '[.]pyf([.]src|)', sources)"
    },
    {
        "line": 102,
        "fullcodeline": "for f in pyf_files:"
    },
    {
        "line": 116,
        "fullcodeline": "name_value = define_macros[i].split('=', 1)"
    },
    {
        "line": 150,
        "fullcodeline": "for n in sysinfo_flags:"
    },
    {
        "line": 164,
        "fullcodeline": "sys.argv.extend(['config_fc']+fc_flags)"
    },
    {
        "line": 166,
        "fullcodeline": "sys.argv.extend(['build_ext']+flib_flags)"
    },
    {
        "line": 12,
        "fullcodeline": "except ValueError: i=None"
    },
    {
        "line": 14,
        "fullcodeline": "build_dir = sys.argv[i+1]"
    },
    {
        "line": 15,
        "fullcodeline": "del sys.argv[i+1]"
    },
    {
        "line": 33,
        "fullcodeline": "if a in ['only:', 'skip:']:"
    },
    {
        "line": 37,
        "fullcodeline": "if fl or a==':':"
    },
    {
        "line": 87,
        "fullcodeline": "if optname in sys.argv:"
    },
    {
        "line": 117,
        "fullcodeline": "if len(name_value)==1:"
    },
    {
        "line": 119,
        "fullcodeline": "if len(name_value)==2:"
    },
    {
        "line": 34,
        "fullcodeline": "fl = 1"
    },
    {
        "line": 38,
        "fullcodeline": "f2py_flags2.append(a)"
    },
    {
        "line": 54,
        "fullcodeline": "v = '--fcompiler='"
    },
    {
        "line": 72,
        "fullcodeline": "i = flib_flags.index(s)"
    },
    {
        "line": 73,
        "fullcodeline": "del flib_flags[i]"
    },
    {
        "line": 88,
        "fullcodeline": "i = sys.argv.index (optname)"
    },
    {
        "line": 89,
        "fullcodeline": "f2py_flags.extend (sys.argv[i:i+2])"
    },
    {
        "line": 90,
        "fullcodeline": "del sys.argv[i+1], sys.argv[i]"
    },
    {
        "line": 91,
        "fullcodeline": "sources = sys.argv[1:]"
    },
    {
        "line": 103,
        "fullcodeline": "modulename = get_f2py_modulename(f)"
    },
    {
        "line": 118,
        "fullcodeline": "name_value.append(None)"
    },
    {
        "line": 120,
        "fullcodeline": "define_macros[i] = tuple(name_value)"
    },
    {
        "line": 122,
        "fullcodeline": "print('Invalid use of -D:', name_value)"
    },
    {
        "line": 151,
        "fullcodeline": "i = get_info(n)"
    },
    {
        "line": 155,
        "fullcodeline": "dict_append(ext_args,**i)"
    },
    {
        "line": 35,
        "fullcodeline": "elif a==':':"
    },
    {
        "line": 55,
        "fullcodeline": "if s[:len(v)]==v:"
    },
    {
        "line": 152,
        "fullcodeline": "if not i:"
    },
    {
        "line": 36,
        "fullcodeline": "fl = 0"
    },
    {
        "line": 56,
        "fullcodeline": "from numpy.distutils import fcompiler"
    },
    {
        "line": 57,
        "fullcodeline": "fcompiler.load_all_fcompiler_classes()"
    },
    {
        "line": 58,
        "fullcodeline": "allowed_keys = list(fcompiler.fcompiler_class.keys())"
    },
    {
        "line": 68,
        "fullcodeline": "i = flib_flags.index(s)"
    },
    {
        "line": 69,
        "fullcodeline": "flib_flags[i] = '--fcompiler=' + nv"
    },
    {
        "line": 153,
        "fullcodeline": "outmess('No %s resources found in system'\\"
    },
    {
        "line": 59,
        "fullcodeline": "nv = ov = s[len(v):].lower()"
    },
    {
        "line": 60,
        "fullcodeline": "if ov not in allowed_keys:"
    },
    {
        "line": 61,
        "fullcodeline": "vmap = {} # XXX"
    },
    {
        "line": 67,
        "fullcodeline": "nv = ov"
    },
    {
        "line": 154,
        "fullcodeline": "' (try `f2py --help-link`)\\n' % (repr(n)))"
    },
    {
        "line": 63,
        "fullcodeline": "nv = vmap[ov]"
    },
    {
        "line": 65,
        "fullcodeline": "if ov not in vmap.values():"
    },
    {
        "line": 66,
        "fullcodeline": "print('Unknown vendor: \"%s\"' % (s[len(v):]))"
    }
]