[
    {
        "line": 5,
        "fullcodeline": "ogs_sbi_stream_t *stream = NULL;"
    },
    {
        "line": 6,
        "fullcodeline": "ogs_sbi_request_t *request = NULL;"
    },
    {
        "line": 8,
        "fullcodeline": "size_t offset = 0;"
    },
    {
        "line": 10,
        "fullcodeline": "ogs_assert(session);"
    },
    {
        "line": 12,
        "fullcodeline": "stream = nghttp2_session_get_stream_user_data(session, stream_id);"
    },
    {
        "line": 18,
        "fullcodeline": "request = stream->request;"
    },
    {
        "line": 21,
        "fullcodeline": "ogs_assert(data);"
    },
    {
        "line": 22,
        "fullcodeline": "ogs_assert(len);"
    },
    {
        "line": 46,
        "fullcodeline": "offset = request->http.content_length;"
    },
    {
        "line": 13,
        "fullcodeline": "if (!stream) {"
    },
    {
        "line": 24,
        "fullcodeline": "if (request->http.content == NULL) {"
    },
    {
        "line": 36,
        "fullcodeline": "if (!request->http.content) {"
    },
    {
        "line": 14,
        "fullcodeline": "ogs_error(\"no stream [%d]\", stream_id);"
    },
    {
        "line": 28,
        "fullcodeline": "request->http.content = (char*)ogs_malloc(len + 1);"
    },
    {
        "line": 37,
        "fullcodeline": "stream->memory_overflow = true;"
    },
    {
        "line": 41,
        "fullcodeline": "ogs_log_hexdump(OGS_LOG_ERROR, data, len);"
    },
    {
        "line": 25,
        "fullcodeline": "ogs_assert(request->http.content_length == 0);"
    },
    {
        "line": 26,
        "fullcodeline": "ogs_assert(offset == 0);"
    },
    {
        "line": 32,
        "fullcodeline": "request->http.content = (char*)ogs_realloc("
    },
    {
        "line": 30,
        "fullcodeline": "ogs_assert(request->http.content_length != 0);"
    }
]