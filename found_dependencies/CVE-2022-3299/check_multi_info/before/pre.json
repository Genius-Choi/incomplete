[
    {
        "line": 3,
        "fullcodeline": "CURLM *multi = NULL;"
    },
    {
        "line": 6,
        "fullcodeline": "CURL *easy = NULL;"
    },
    {
        "line": 8,
        "fullcodeline": "connection_t *conn = NULL;"
    },
    {
        "line": 9,
        "fullcodeline": "ogs_sbi_response_t *response = NULL;"
    },
    {
        "line": 11,
        "fullcodeline": "ogs_assert(client);"
    },
    {
        "line": 12,
        "fullcodeline": "multi = client->multi;"
    },
    {
        "line": 13,
        "fullcodeline": "ogs_assert(multi);"
    },
    {
        "line": 15,
        "fullcodeline": "while ((resource = curl_multi_info_read(multi, &pending))) {"
    },
    {
        "line": 17,
        "fullcodeline": "char *content_type = NULL;"
    },
    {
        "line": 19,
        "fullcodeline": "ogs_assert(resource);"
    },
    {
        "line": 23,
        "fullcodeline": "easy = resource->easy_handle;"
    },
    {
        "line": 24,
        "fullcodeline": "ogs_assert(easy);"
    },
    {
        "line": 26,
        "fullcodeline": "curl_easy_getinfo(easy, CURLINFO_PRIVATE, &conn);"
    },
    {
        "line": 27,
        "fullcodeline": "ogs_assert(conn);"
    },
    {
        "line": 29,
        "fullcodeline": "curl_easy_getinfo(easy, CURLINFO_EFFECTIVE_URL, &url);"
    },
    {
        "line": 30,
        "fullcodeline": "curl_easy_getinfo(easy, CURLINFO_RESPONSE_CODE, &res_status);"
    },
    {
        "line": 31,
        "fullcodeline": "curl_easy_getinfo(easy, CURLINFO_CONTENT_TYPE, &content_type);"
    },
    {
        "line": 33,
        "fullcodeline": "res = resource->data.result;"
    },
    {
        "line": 72,
        "fullcodeline": "ogs_assert(conn->client_cb);"
    },
    {
        "line": 73,
        "fullcodeline": "conn->client_cb(res == CURLE_OK ? OGS_OK : OGS_ERROR,"
    },
    {
        "line": 75,
        "fullcodeline": "connection_remove(conn);"
    },
    {
        "line": 78,
        "fullcodeline": "ogs_error(\"Unknown CURL resource[%d]\", resource->msg);"
    },
    {
        "line": 34,
        "fullcodeline": "if (res == CURLE_OK) {"
    },
    {
        "line": 35,
        "fullcodeline": "response = ogs_sbi_response_new();"
    },
    {
        "line": 36,
        "fullcodeline": "ogs_assert(response);"
    },
    {
        "line": 38,
        "fullcodeline": "response->status = res_status;"
    },
    {
        "line": 40,
        "fullcodeline": "ogs_assert(conn->method);"
    },
    {
        "line": 41,
        "fullcodeline": "response->h.method = ogs_strdup(conn->method);"
    },
    {
        "line": 42,
        "fullcodeline": "ogs_assert(response->h.method);"
    },
    {
        "line": 45,
        "fullcodeline": "response->h.uri = ogs_strdup(url);"
    },
    {
        "line": 46,
        "fullcodeline": "ogs_assert(response->h.uri);"
    },
    {
        "line": 48,
        "fullcodeline": "ogs_debug(\"[%d:%s] %s\","
    },
    {
        "line": 60,
        "fullcodeline": "if (response->http.content_length && response->http.content)"
    },
    {
        "line": 70,
        "fullcodeline": "ogs_warn(\"[%d] %s\", res, conn->error);"
    },
    {
        "line": 52,
        "fullcodeline": "response->http.content ="
    },
    {
        "line": 54,
        "fullcodeline": "ogs_assert(response->http.content);"
    },
    {
        "line": 55,
        "fullcodeline": "response->http.content_length = conn->size;"
    },
    {
        "line": 56,
        "fullcodeline": "ogs_assert(response->http.content_length);"
    },
    {
        "line": 64,
        "fullcodeline": "ogs_sbi_header_set(response->http.headers,"
    },
    {
        "line": 67,
        "fullcodeline": "ogs_sbi_header_set(response->http.headers,"
    },
    {
        "line": 53,
        "fullcodeline": "ogs_memdup(conn->memory, conn->size + 1);"
    }
]