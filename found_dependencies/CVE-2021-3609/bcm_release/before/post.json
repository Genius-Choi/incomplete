[
    {
        "line": 3,
        "fullcodeline": "struct sock *sk = sock->sk;"
    },
    {
        "line": 11,
        "fullcodeline": "net = sock_net(sk);"
    },
    {
        "line": 12,
        "fullcodeline": "bo = bcm_sk(sk);"
    },
    {
        "line": 16,
        "fullcodeline": "spin_lock(&bcm_notifier_lock);"
    },
    {
        "line": 22,
        "fullcodeline": "list_del(&bo->notifier);"
    },
    {
        "line": 23,
        "fullcodeline": "spin_unlock(&bcm_notifier_lock);"
    },
    {
        "line": 25,
        "fullcodeline": "lock_sock(sk);"
    },
    {
        "line": 27,
        "fullcodeline": "list_for_each_entry_safe(op, next, &bo->tx_ops, list)"
    },
    {
        "line": 28,
        "fullcodeline": "bcm_remove_op(op);"
    },
    {
        "line": 30,
        "fullcodeline": "list_for_each_entry_safe(op, next, &bo->rx_ops, list) {"
    },
    {
        "line": 70,
        "fullcodeline": "sock_orphan(sk);"
    },
    {
        "line": 71,
        "fullcodeline": "sock->sk = NULL;"
    },
    {
        "line": 73,
        "fullcodeline": "release_sock(sk);"
    },
    {
        "line": 74,
        "fullcodeline": "sock_put(sk);"
    },
    {
        "line": 8,
        "fullcodeline": "if (!sk)"
    },
    {
        "line": 17,
        "fullcodeline": "while (bcm_busy_notifier == bo) {"
    },
    {
        "line": 55,
        "fullcodeline": "bcm_remove_op(op);"
    },
    {
        "line": 18,
        "fullcodeline": "spin_unlock(&bcm_notifier_lock);"
    },
    {
        "line": 19,
        "fullcodeline": "schedule_timeout_uninterruptible(1);"
    },
    {
        "line": 20,
        "fullcodeline": "spin_lock(&bcm_notifier_lock);"
    },
    {
        "line": 66,
        "fullcodeline": "bo->bound   = 0;"
    },
    {
        "line": 67,
        "fullcodeline": "bo->ifindex = 0;"
    },
    {
        "line": 51,
        "fullcodeline": "can_rx_unregister(net, NULL, op->can_id,"
    },
    {
        "line": 44,
        "fullcodeline": "dev = dev_get_by_index(net, op->ifindex);"
    },
    {
        "line": 52,
        "fullcodeline": "REGMASK(op->can_id),"
    },
    {
        "line": 46,
        "fullcodeline": "bcm_rx_unreg(dev, op);"
    },
    {
        "line": 47,
        "fullcodeline": "dev_put(dev);"
    }
]