[
    {
        "line": 7,
        "fullcodeline": "ucounts = inc_mnt_namespaces(user_ns);"
    },
    {
        "line": 11,
        "fullcodeline": "new_ns = kmalloc(sizeof(struct mnt_namespace), GFP_KERNEL);"
    },
    {
        "line": 16,
        "fullcodeline": "ret = ns_alloc_inum(&new_ns->ns);"
    },
    {
        "line": 23,
        "fullcodeline": "new_ns->seq = atomic64_add_return(1, &mnt_ns_seq);"
    },
    {
        "line": 25,
        "fullcodeline": "new_ns->root = NULL;"
    },
    {
        "line": 28,
        "fullcodeline": "new_ns->event = 0;"
    },
    {
        "line": 29,
        "fullcodeline": "new_ns->user_ns = get_user_ns(user_ns);"
    },
    {
        "line": 30,
        "fullcodeline": "new_ns->ucounts = ucounts;"
    },
    {
        "line": 8,
        "fullcodeline": "if (!ucounts)"
    },
    {
        "line": 12,
        "fullcodeline": "if (!new_ns) {"
    },
    {
        "line": 9,
        "fullcodeline": "return ERR_PTR(-ENOSPC);"
    },
    {
        "line": 14,
        "fullcodeline": "return ERR_PTR(-ENOMEM);"
    },
    {
        "line": 20,
        "fullcodeline": "return ERR_PTR(ret);"
    }
]