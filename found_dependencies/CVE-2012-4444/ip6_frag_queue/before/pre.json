[
    {
        "line": 7,
        "fullcodeline": "struct net *net = dev_net(skb_dst(skb)->dev);"
    },
    {
        "line": 12,
        "fullcodeline": "offset = ntohs(fhdr->frag_off) & ~0x7;"
    },
    {
        "line": 13,
        "fullcodeline": "end = offset + (ntohs(ipv6_hdr(skb)->payload_len) -"
    },
    {
        "line": 78,
        "fullcodeline": "prev = fq->q.fragments_tail;"
    },
    {
        "line": 83,
        "fullcodeline": "prev = NULL;"
    },
    {
        "line": 147,
        "fullcodeline": "skb->next = next;"
    },
    {
        "line": 155,
        "fullcodeline": "dev = skb->dev;"
    },
    {
        "line": 161,
        "fullcodeline": "fq->q.meat += skb->len;"
    },
    {
        "line": 176,
        "fullcodeline": "write_lock(&ip6_frags.lock);"
    },
    {
        "line": 182,
        "fullcodeline": "IP6_INC_STATS(net, ip6_dst_idev(skb_dst(skb)),"
    },
    {
        "line": 9,
        "fullcodeline": "if (fq->q.last_in & INET_FRAG_COMPLETE)"
    },
    {
        "line": 16,
        "fullcodeline": "if ((unsigned int)end > IPV6_MAXPLEN) {"
    },
    {
        "line": 25,
        "fullcodeline": "if (skb->ip_summed == CHECKSUM_COMPLETE) {"
    },
    {
        "line": 64,
        "fullcodeline": "if (end == offset)"
    },
    {
        "line": 71,
        "fullcodeline": "if (pskb_trim_rcsum(skb, end - offset))"
    },
    {
        "line": 84,
        "fullcodeline": "for(next = fq->q.fragments; next != NULL; next = next->next) {"
    },
    {
        "line": 112,
        "fullcodeline": "while (next && FRAG6_CB(next)->offset < end) {"
    },
    {
        "line": 179,
        "fullcodeline": "return -1;"
    },
    {
        "line": 185,
        "fullcodeline": "return -1;"
    },
    {
        "line": 17,
        "fullcodeline": "IP6_INC_STATS_BH(net, ip6_dst_idev(skb_dst(skb)),"
    },
    {
        "line": 19,
        "fullcodeline": "icmpv6_param_prob(skb, ICMPV6_HDR_FIELD,"
    },
    {
        "line": 26,
        "fullcodeline": "const unsigned char *nh = skb_network_header(skb);"
    },
    {
        "line": 27,
        "fullcodeline": "skb->csum = csum_sub(skb->csum,"
    },
    {
        "line": 33,
        "fullcodeline": "if (!(fhdr->frag_off & htons(IP6_MF))) {"
    },
    {
        "line": 40,
        "fullcodeline": "fq->q.last_in |= INET_FRAG_LAST_IN;"
    },
    {
        "line": 41,
        "fullcodeline": "fq->q.len = end;"
    },
    {
        "line": 68,
        "fullcodeline": "if (!pskb_pull(skb, (u8 *) (fhdr + 1) - skb->data))"
    },
    {
        "line": 79,
        "fullcodeline": "if (!prev || FRAG6_CB(prev)->offset < offset) {"
    },
    {
        "line": 80,
        "fullcodeline": "next = NULL;"
    },
    {
        "line": 87,
        "fullcodeline": "prev = next;"
    },
    {
        "line": 96,
        "fullcodeline": "int i = (FRAG6_CB(prev)->offset + prev->len) - offset;"
    },
    {
        "line": 113,
        "fullcodeline": "int i = end - FRAG6_CB(next)->offset; /* overlap is 'i' bytes */"
    },
    {
        "line": 144,
        "fullcodeline": "FRAG6_CB(skb)->offset = offset;"
    },
    {
        "line": 151,
        "fullcodeline": "prev->next = skb;"
    },
    {
        "line": 157,
        "fullcodeline": "fq->iif = dev->ifindex;"
    },
    {
        "line": 168,
        "fullcodeline": "fq->nhoffset = nhoff;"
    },
    {
        "line": 169,
        "fullcodeline": "fq->q.last_in |= INET_FRAG_FIRST_IN;"
    },
    {
        "line": 172,
        "fullcodeline": "if (fq->q.last_in == (INET_FRAG_FIRST_IN | INET_FRAG_LAST_IN) &&"
    },
    {
        "line": 173,
        "fullcodeline": "fq->q.meat == fq->q.len)"
    },
    {
        "line": 14,
        "fullcodeline": "((u8 *)(fhdr + 1) - (u8 *)(ipv6_hdr(skb) + 1)));"
    },
    {
        "line": 20,
        "fullcodeline": "((u8 *)&fhdr->frag_off -"
    },
    {
        "line": 22,
        "fullcodeline": "return -1;"
    },
    {
        "line": 85,
        "fullcodeline": "if (FRAG6_CB(next)->offset >= offset)"
    },
    {
        "line": 98,
        "fullcodeline": "if (i > 0) {"
    },
    {
        "line": 115,
        "fullcodeline": "if (i < next->len) {"
    },
    {
        "line": 174,
        "fullcodeline": "return ip6_frag_reasm(fq, prev, dev);"
    },
    {
        "line": 21,
        "fullcodeline": "skb_network_header(skb)));"
    },
    {
        "line": 28,
        "fullcodeline": "csum_partial(nh, (u8 *)(fhdr + 1) - nh,"
    },
    {
        "line": 37,
        "fullcodeline": "if (end < fq->q.len ||"
    },
    {
        "line": 38,
        "fullcodeline": "((fq->q.last_in & INET_FRAG_LAST_IN) && end != fq->q.len))"
    },
    {
        "line": 46,
        "fullcodeline": "if (end & 0x7) {"
    },
    {
        "line": 56,
        "fullcodeline": "if (end > fq->q.len) {"
    },
    {
        "line": 99,
        "fullcodeline": "offset += i;"
    },
    {
        "line": 122,
        "fullcodeline": "fq->q.meat -= i;"
    },
    {
        "line": 60,
        "fullcodeline": "fq->q.len = end;"
    },
    {
        "line": 100,
        "fullcodeline": "if (end <= offset)"
    },
    {
        "line": 104,
        "fullcodeline": "if (skb->ip_summed != CHECKSUM_UNNECESSARY)"
    },
    {
        "line": 123,
        "fullcodeline": "if (next->ip_summed != CHECKSUM_UNNECESSARY)"
    },
    {
        "line": 127,
        "fullcodeline": "struct sk_buff *free_it = next;"
    },
    {
        "line": 132,
        "fullcodeline": "next = next->next;"
    },
    {
        "line": 139,
        "fullcodeline": "fq->q.meat -= free_it->len;"
    },
    {
        "line": 50,
        "fullcodeline": "IP6_INC_STATS_BH(net, ip6_dst_idev(skb_dst(skb)),"
    },
    {
        "line": 54,
        "fullcodeline": "return -1;"
    },
    {
        "line": 58,
        "fullcodeline": "if (fq->q.last_in & INET_FRAG_LAST_IN)"
    },
    {
        "line": 102,
        "fullcodeline": "if (!pskb_pull(skb, i))"
    },
    {
        "line": 105,
        "fullcodeline": "skb->ip_summed = CHECKSUM_NONE;"
    },
    {
        "line": 119,
        "fullcodeline": "if (!pskb_pull(next, i))"
    },
    {
        "line": 121,
        "fullcodeline": "FRAG6_CB(next)->offset += i;\t/* next fragment */"
    },
    {
        "line": 124,
        "fullcodeline": "next->ip_summed = CHECKSUM_NONE;"
    },
    {
        "line": 135,
        "fullcodeline": "prev->next = next;"
    }
]