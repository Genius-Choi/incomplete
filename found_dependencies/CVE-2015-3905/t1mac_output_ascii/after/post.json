[
    {
        "line": 10,
        "fullcodeline": "t1mac_output_data((byte *)s, len);"
    },
    {
        "line": 3,
        "fullcodeline": "if (blocktyp == POST_BINARY) {"
    },
    {
        "line": 8,
        "fullcodeline": "if (len > 0 && s[len-1] == '\\n')"
    },
    {
        "line": 11,
        "fullcodeline": "if (strncmp(s, \"/FontName\", 9) == 0) {"
    },
    {
        "line": 4,
        "fullcodeline": "output_current_post();"
    },
    {
        "line": 5,
        "fullcodeline": "blocktyp = POST_ASCII;"
    },
    {
        "line": 9,
        "fullcodeline": "s[len-1] = '\\r';"
    },
    {
        "line": 12,
        "fullcodeline": "for (s += 9; isspace((unsigned char) *s); s++)"
    },
    {
        "line": 14,
        "fullcodeline": "if (*s == '/') {"
    },
    {
        "line": 15,
        "fullcodeline": "const char *t = ++s;"
    },
    {
        "line": 17,
        "fullcodeline": "free(font_name);"
    },
    {
        "line": 18,
        "fullcodeline": "font_name = (char *)malloc(t - s + 1);"
    },
    {
        "line": 19,
        "fullcodeline": "memcpy(font_name, s, t - s);"
    },
    {
        "line": 20,
        "fullcodeline": "font_name[t - s] = 0;"
    },
    {
        "line": 16,
        "fullcodeline": "while (*t && !isspace((unsigned char) *t)) t++;"
    }
]