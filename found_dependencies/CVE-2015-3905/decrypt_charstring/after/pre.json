[
    {
        "line": 5,
        "fullcodeline": "char buf[20];"
    },
    {
        "line": 8,
        "fullcodeline": "if (lenIV >= 0) {"
    },
    {
        "line": 24,
        "fullcodeline": "for (i = 0; i < len; i++) {"
    },
    {
        "line": 144,
        "fullcodeline": "if (i > len) {"
    },
    {
        "line": 11,
        "fullcodeline": "uint16_t cr = cr_default;"
    },
    {
        "line": 19,
        "fullcodeline": "line += lenIV;"
    },
    {
        "line": 20,
        "fullcodeline": "len -= lenIV;"
    },
    {
        "line": 25,
        "fullcodeline": "byte b = line[i];"
    },
    {
        "line": 145,
        "fullcodeline": "output(\"\\terror\\n\");"
    },
    {
        "line": 146,
        "fullcodeline": "error(\"disassembly error: charstring too short\");"
    },
    {
        "line": 13,
        "fullcodeline": "for (i = 0; i < len; i++) {"
    },
    {
        "line": 27,
        "fullcodeline": "if (b >= 32) {"
    },
    {
        "line": 14,
        "fullcodeline": "byte cipher = line[i];"
    },
    {
        "line": 15,
        "fullcodeline": "plain = (byte)(cipher ^ (cr >> 8));"
    },
    {
        "line": 16,
        "fullcodeline": "cr = (uint16_t)((cipher + cr) * c1 + c2);"
    },
    {
        "line": 17,
        "fullcodeline": "line[i] = plain;"
    },
    {
        "line": 48,
        "fullcodeline": "sprintf(buf, \"%d\", val);"
    },
    {
        "line": 49,
        "fullcodeline": "output_token(buf);"
    },
    {
        "line": 28,
        "fullcodeline": "if (b >= 32 && b <= 246)"
    },
    {
        "line": 141,
        "fullcodeline": "output_token(\"\\n\");"
    },
    {
        "line": 29,
        "fullcodeline": "val = b - 139;"
    },
    {
        "line": 53,
        "fullcodeline": "case 0: output_token(\"error\"); break;\t\t/* special */"
    },
    {
        "line": 54,
        "fullcodeline": "case 1: output_token(\"hstem\"); break;"
    },
    {
        "line": 55,
        "fullcodeline": "case 3: output_token(\"vstem\"); break;"
    },
    {
        "line": 56,
        "fullcodeline": "case 4: output_token(\"vmoveto\"); break;"
    },
    {
        "line": 57,
        "fullcodeline": "case 5: output_token(\"rlineto\"); break;"
    },
    {
        "line": 58,
        "fullcodeline": "case 6: output_token(\"hlineto\"); break;"
    },
    {
        "line": 59,
        "fullcodeline": "case 7: output_token(\"vlineto\"); break;"
    },
    {
        "line": 60,
        "fullcodeline": "case 8: output_token(\"rrcurveto\"); break;"
    },
    {
        "line": 61,
        "fullcodeline": "case 9: output_token(\"closepath\"); break;\t\t/* Type 1 ONLY */"
    },
    {
        "line": 62,
        "fullcodeline": "case 10: output_token(\"callsubr\"); break;"
    },
    {
        "line": 63,
        "fullcodeline": "case 11: output_token(\"return\"); break;"
    },
    {
        "line": 64,
        "fullcodeline": "case 13: output_token(\"hsbw\"); break;\t\t/* Type 1 ONLY */"
    },
    {
        "line": 65,
        "fullcodeline": "case 14: output_token(\"endchar\"); break;"
    },
    {
        "line": 66,
        "fullcodeline": "case 16: output_token(\"blend\"); break;\t\t/* Type 2 */"
    },
    {
        "line": 67,
        "fullcodeline": "case 18: output_token(\"hstemhm\"); break;\t\t/* Type 2 */"
    },
    {
        "line": 68,
        "fullcodeline": "case 19: output_token(\"hintmask\"); break;\t\t/* Type 2 */"
    },
    {
        "line": 69,
        "fullcodeline": "case 20: output_token(\"cntrmask\"); break;\t\t/* Type 2 */"
    },
    {
        "line": 70,
        "fullcodeline": "case 21: output_token(\"rmoveto\"); break;"
    },
    {
        "line": 71,
        "fullcodeline": "case 22: output_token(\"hmoveto\"); break;"
    },
    {
        "line": 72,
        "fullcodeline": "case 23: output_token(\"vstemhm\"); break;\t\t/* Type 2 */"
    },
    {
        "line": 73,
        "fullcodeline": "case 24: output_token(\"rcurveline\"); break;\t/* Type 2 */"
    },
    {
        "line": 74,
        "fullcodeline": "case 25: output_token(\"rlinecurve\"); break;\t/* Type 2 */"
    },
    {
        "line": 75,
        "fullcodeline": "case 26: output_token(\"vvcurveto\"); break;\t/* Type 2 */"
    },
    {
        "line": 76,
        "fullcodeline": "case 27: output_token(\"hhcurveto\"); break;\t/* Type 2 */"
    },
    {
        "line": 87,
        "fullcodeline": "case 29: output_token(\"callgsubr\"); break;\t/* Type 2 */"
    },
    {
        "line": 88,
        "fullcodeline": "case 30: output_token(\"vhcurveto\"); break;"
    },
    {
        "line": 89,
        "fullcodeline": "case 31: output_token(\"hvcurveto\"); break;"
    },
    {
        "line": 91,
        "fullcodeline": "i++;"
    },
    {
        "line": 92,
        "fullcodeline": "b = line[i];"
    },
    {
        "line": 136,
        "fullcodeline": "sprintf(buf, \"UNKNOWN_%d\", b);"
    },
    {
        "line": 137,
        "fullcodeline": "unknown++;"
    },
    {
        "line": 138,
        "fullcodeline": "output_token(buf);"
    },
    {
        "line": 30,
        "fullcodeline": "else if (b >= 247 && b <= 250) {"
    },
    {
        "line": 79,
        "fullcodeline": "val =  (line[i+1] & 0xff) << 8;"
    },
    {
        "line": 80,
        "fullcodeline": "val |= (line[i+2] & 0xff);"
    },
    {
        "line": 81,
        "fullcodeline": "i += 2;"
    },
    {
        "line": 84,
        "fullcodeline": "sprintf(buf, \"%d\", val);"
    },
    {
        "line": 85,
        "fullcodeline": "output_token(buf);"
    },
    {
        "line": 31,
        "fullcodeline": "i++;"
    },
    {
        "line": 32,
        "fullcodeline": "val = (b - 247)*256 + 108 + line[i];"
    },
    {
        "line": 82,
        "fullcodeline": "if (val & 0x8000)"
    },
    {
        "line": 94,
        "fullcodeline": "case 0: output_token(\"dotsection\"); break;\t/* Type 1 ONLY */"
    },
    {
        "line": 95,
        "fullcodeline": "case 1: output_token(\"vstem3\"); break;\t\t/* Type 1 ONLY */"
    },
    {
        "line": 96,
        "fullcodeline": "case 2: output_token(\"hstem3\"); break;\t\t/* Type 1 ONLY */"
    },
    {
        "line": 97,
        "fullcodeline": "case 3: output_token(\"and\"); break;\t\t/* Type 2 */"
    },
    {
        "line": 98,
        "fullcodeline": "case 4: output_token(\"or\"); break;\t\t/* Type 2 */"
    },
    {
        "line": 99,
        "fullcodeline": "case 5: output_token(\"not\"); break;\t\t/* Type 2 */"
    },
    {
        "line": 100,
        "fullcodeline": "case 6: output_token(\"seac\"); break;\t\t/* Type 1 ONLY */"
    },
    {
        "line": 101,
        "fullcodeline": "case 7: output_token(\"sbw\"); break;\t\t/* Type 1 ONLY */"
    },
    {
        "line": 102,
        "fullcodeline": "case 8: output_token(\"store\"); break;\t\t/* Type 2 */"
    },
    {
        "line": 103,
        "fullcodeline": "case 9: output_token(\"abs\"); break;\t\t/* Type 2 */"
    },
    {
        "line": 104,
        "fullcodeline": "case 10: output_token(\"add\"); break;\t\t/* Type 2 */"
    },
    {
        "line": 105,
        "fullcodeline": "case 11: output_token(\"sub\"); break;\t\t/* Type 2 */"
    },
    {
        "line": 106,
        "fullcodeline": "case 12: output_token(\"div\"); break;"
    },
    {
        "line": 107,
        "fullcodeline": "case 13: output_token(\"load\"); break;\t\t/* Type 2 */"
    },
    {
        "line": 108,
        "fullcodeline": "case 14: output_token(\"neg\"); break;\t\t/* Type 2 */"
    },
    {
        "line": 109,
        "fullcodeline": "case 15: output_token(\"eq\"); break;\t\t/* Type 2 */"
    },
    {
        "line": 110,
        "fullcodeline": "case 16: output_token(\"callothersubr\"); break;\t/* Type 1 ONLY */"
    },
    {
        "line": 111,
        "fullcodeline": "case 17: output_token(\"pop\"); break;\t\t/* Type 1 ONLY */"
    },
    {
        "line": 112,
        "fullcodeline": "case 18: output_token(\"drop\"); break;\t\t/* Type 2 */"
    },
    {
        "line": 113,
        "fullcodeline": "case 20: output_token(\"put\"); break;\t\t/* Type 2 */"
    },
    {
        "line": 114,
        "fullcodeline": "case 21: output_token(\"get\"); break;\t\t/* Type 2 */"
    },
    {
        "line": 115,
        "fullcodeline": "case 22: output_token(\"ifelse\"); break;\t\t/* Type 2 */"
    },
    {
        "line": 116,
        "fullcodeline": "case 23: output_token(\"random\"); break;\t\t/* Type 2 */"
    },
    {
        "line": 117,
        "fullcodeline": "case 24: output_token(\"mul\"); break;\t\t/* Type 2 */"
    },
    {
        "line": 118,
        "fullcodeline": "case 26: output_token(\"sqrt\"); break;\t\t/* Type 2 */"
    },
    {
        "line": 119,
        "fullcodeline": "case 27: output_token(\"dup\"); break;\t\t/* Type 2 */"
    },
    {
        "line": 120,
        "fullcodeline": "case 28: output_token(\"exch\"); break;\t\t/* Type 2 */"
    },
    {
        "line": 121,
        "fullcodeline": "case 29: output_token(\"index\"); break;\t\t/* Type 2 */"
    },
    {
        "line": 122,
        "fullcodeline": "case 30: output_token(\"roll\"); break;\t\t/* Type 2 */"
    },
    {
        "line": 123,
        "fullcodeline": "case 33: output_token(\"setcurrentpoint\"); break;/* Type 1 ONLY */"
    },
    {
        "line": 124,
        "fullcodeline": "case 34: output_token(\"hflex\"); break;\t\t/* Type 2 */"
    },
    {
        "line": 125,
        "fullcodeline": "case 35: output_token(\"flex\"); break;\t\t/* Type 2 */"
    },
    {
        "line": 126,
        "fullcodeline": "case 36: output_token(\"hflex1\"); break;\t\t/* Type 2 */"
    },
    {
        "line": 127,
        "fullcodeline": "case 37: output_token(\"flex1\"); break;\t\t/* Type 2 */"
    },
    {
        "line": 129,
        "fullcodeline": "sprintf(buf, \"escape_%d\", b);"
    },
    {
        "line": 130,
        "fullcodeline": "unknown++;"
    },
    {
        "line": 131,
        "fullcodeline": "output_token(buf);"
    },
    {
        "line": 83,
        "fullcodeline": "val |= ~0x7FFF;"
    },
    {
        "line": 33,
        "fullcodeline": "} else if (b >= 251 && b <= 254) {"
    },
    {
        "line": 34,
        "fullcodeline": "i++;"
    },
    {
        "line": 35,
        "fullcodeline": "val = -(b - 251)*256 - 108 - line[i];"
    },
    {
        "line": 37,
        "fullcodeline": "val =  (line[i+1] & 0xff) << 24;"
    },
    {
        "line": 38,
        "fullcodeline": "val |= (line[i+2] & 0xff) << 16;"
    },
    {
        "line": 39,
        "fullcodeline": "val |= (line[i+3] & 0xff) <<  8;"
    },
    {
        "line": 40,
        "fullcodeline": "val |= (line[i+4] & 0xff) <<  0;"
    },
    {
        "line": 46,
        "fullcodeline": "i += 4;"
    }
]