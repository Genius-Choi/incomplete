[
    {
        "line": 5,
        "fullcodeline": "Clp_Parser *clp ="
    },
    {
        "line": 7,
        "fullcodeline": "program_name = Clp_ProgramName(clp);"
    },
    {
        "line": 195,
        "fullcodeline": "fclose(ifp);"
    },
    {
        "line": 196,
        "fullcodeline": "fclose(ofp);"
    },
    {
        "line": 6,
        "fullcodeline": "Clp_NewParser(argc, (const char * const *)argv, sizeof(options) / sizeof(options[0]), options);"
    },
    {
        "line": 73,
        "fullcodeline": "if (!pfb) {"
    },
    {
        "line": 85,
        "fullcodeline": "if (!ifp) ifp = stdin;"
    },
    {
        "line": 86,
        "fullcodeline": "if (!ofp) ofp = stdout;"
    },
    {
        "line": 113,
        "fullcodeline": "while (!feof(ifp) && !ferror(ifp)) {"
    },
    {
        "line": 184,
        "fullcodeline": "while (!feof(ifp) && !ferror(ifp)) {"
    },
    {
        "line": 193,
        "fullcodeline": "if (!ever_active)"
    },
    {
        "line": 11,
        "fullcodeline": "int opt = Clp_Next(clp);"
    },
    {
        "line": 89,
        "fullcodeline": "init_pfb_writer(&w, blocklen, ofp);"
    },
    {
        "line": 114,
        "fullcodeline": "t1utils_getline();"
    },
    {
        "line": 169,
        "fullcodeline": "eexec_string(line);"
    },
    {
        "line": 181,
        "fullcodeline": "eexec_end();"
    },
    {
        "line": 185,
        "fullcodeline": "t1utils_getline();"
    },
    {
        "line": 186,
        "fullcodeline": "eexec_string(line);"
    },
    {
        "line": 190,
        "fullcodeline": "pfb_writer_end(&w);"
    },
    {
        "line": 194,
        "fullcodeline": "error(\"warning: no charstrings found in input file\");"
    },
    {
        "line": 74,
        "fullcodeline": "if (blocklen == -1)"
    },
    {
        "line": 116,
        "fullcodeline": "if (!ever_active) {"
    },
    {
        "line": 143,
        "fullcodeline": "if (!active) {"
    },
    {
        "line": 149,
        "fullcodeline": "if ((p = strstr(line, \"currentfile closefile\"))) {"
    },
    {
        "line": 29,
        "fullcodeline": "pfb = 1;"
    },
    {
        "line": 33,
        "fullcodeline": "pfb = 0;"
    },
    {
        "line": 37,
        "fullcodeline": "usage();"
    },
    {
        "line": 38,
        "fullcodeline": "exit(0);"
    },
    {
        "line": 42,
        "fullcodeline": "printf(\"t1asm (LCDF t1utils) %s\\n\", VERSION);"
    },
    {
        "line": 43,
        "fullcodeline": "printf(\"Copyright (C) 1992-2010 I. Lee Hetherington, Eddie Kohler et al.\\n\\"
    },
    {
        "line": 47,
        "fullcodeline": "exit(0);"
    },
    {
        "line": 65,
        "fullcodeline": "short_usage();"
    },
    {
        "line": 66,
        "fullcodeline": "exit(1);"
    },
    {
        "line": 75,
        "fullcodeline": "blocklen = 64;"
    },
    {
        "line": 154,
        "fullcodeline": "p += sizeof(\"currentfile closefile\") - 1;"
    },
    {
        "line": 165,
        "fullcodeline": "eexec_string(line);"
    },
    {
        "line": 175,
        "fullcodeline": "parse_charstring();"
    },
    {
        "line": 22,
        "fullcodeline": "if (strcmp(clp->vstr, \"-\") == 0)"
    },
    {
        "line": 51,
        "fullcodeline": "if (ifp && ofp)"
    },
    {
        "line": 55,
        "fullcodeline": "if (strcmp(clp->vstr, \"-\") == 0)"
    },
    {
        "line": 117,
        "fullcodeline": "if (strncmp(line, \"currentfile eexec\", 17) == 0 && isspace(line[17])) {"
    },
    {
        "line": 144,
        "fullcodeline": "if ((p = strstr(line, \"/Subrs\")) && isdigit(p[7]))"
    },
    {
        "line": 155,
        "fullcodeline": "for (q = p; isspace(*q) && *q != '\\n'; q++)"
    },
    {
        "line": 157,
        "fullcodeline": "if (q == p && !*q)"
    },
    {
        "line": 173,
        "fullcodeline": "if (!cs_start[0])"
    },
    {
        "line": 21,
        "fullcodeline": "fatal_error(\"output file already specified\");"
    },
    {
        "line": 23,
        "fullcodeline": "ofp = stdout;"
    },
    {
        "line": 52,
        "fullcodeline": "fatal_error(\"too many arguments\");"
    },
    {
        "line": 56,
        "fullcodeline": "ifp = stdin;"
    },
    {
        "line": 76,
        "fullcodeline": "else if (blocklen < 8) {"
    },
    {
        "line": 123,
        "fullcodeline": "eexec_start(p);"
    },
    {
        "line": 145,
        "fullcodeline": "ever_active = active = 1;"
    },
    {
        "line": 158,
        "fullcodeline": "error(\"warning: `currentfile closefile' line too long\");"
    },
    {
        "line": 174,
        "fullcodeline": "fatal_error(\"couldn't find charstring start command\");"
    },
    {
        "line": 77,
        "fullcodeline": "blocklen = 8;"
    },
    {
        "line": 78,
        "fullcodeline": "error(\"warning: line length raised to %d\", blocklen);"
    },
    {
        "line": 121,
        "fullcodeline": "for (p = line + 18; isspace(*p); p++)"
    },
    {
        "line": 24,
        "fullcodeline": "else if (!(ofp = fopen(clp->vstr, \"w\")))"
    },
    {
        "line": 57,
        "fullcodeline": "else if (!(ifp = fopen(clp->vstr, \"r\")))"
    },
    {
        "line": 125,
        "fullcodeline": "} else if (strncmp(line, \"/lenIV\", 6) == 0) {"
    },
    {
        "line": 146,
        "fullcodeline": "else if ((p = strstr(line, \"/CharStrings\")) && isdigit(p[13]))"
    },
    {
        "line": 159,
        "fullcodeline": "else if (q != p) {"
    },
    {
        "line": 25,
        "fullcodeline": "fatal_error(\"%s: %s\", clp->vstr, strerror(errno));"
    },
    {
        "line": 58,
        "fullcodeline": "fatal_error(\"%s: %s\", clp->vstr, strerror(errno));"
    },
    {
        "line": 79,
        "fullcodeline": "} else if (blocklen > 1024) {"
    },
    {
        "line": 126,
        "fullcodeline": "lenIV = atoi(line + 6);"
    },
    {
        "line": 147,
        "fullcodeline": "ever_active = active = 1;"
    },
    {
        "line": 162,
        "fullcodeline": "*p++ = '\\n';"
    },
    {
        "line": 163,
        "fullcodeline": "*p++ = '\\0';"
    },
    {
        "line": 80,
        "fullcodeline": "blocklen = 1024;"
    },
    {
        "line": 81,
        "fullcodeline": "error(\"warning: line length lowered to %d\", blocklen);"
    },
    {
        "line": 160,
        "fullcodeline": "if (*q != '\\n')"
    },
    {
        "line": 127,
        "fullcodeline": "} else if ((p = strstr(line, \"string currentfile\"))"
    },
    {
        "line": 161,
        "fullcodeline": "error(\"text after `currentfile closefile' ignored\");"
    },
    {
        "line": 128,
        "fullcodeline": "&& strstr(line, \"readstring\")) { /* enforce `readstring' */"
    },
    {
        "line": 130,
        "fullcodeline": "*p = '\\0';                                  /* damage line[] */"
    },
    {
        "line": 131,
        "fullcodeline": "q = strrchr(line, '/');"
    },
    {
        "line": 139,
        "fullcodeline": "*p = 's';                                   /* repair line[] */"
    },
    {
        "line": 133,
        "fullcodeline": "r = cs_start;"
    },
    {
        "line": 134,
        "fullcodeline": "++q;"
    },
    {
        "line": 137,
        "fullcodeline": "*r = '\\0';"
    },
    {
        "line": 135,
        "fullcodeline": "while (!isspace(*q) && *q != '{')"
    },
    {
        "line": 136,
        "fullcodeline": "*r++ = *q++;"
    }
]