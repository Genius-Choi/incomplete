[
    {
        "line": 4,
        "fullcodeline": "struct tun_file *tfile = file->private_data;"
    },
    {
        "line": 28,
        "fullcodeline": "rtnl_lock();"
    },
    {
        "line": 30,
        "fullcodeline": "tun = __tun_get(tfile);"
    },
    {
        "line": 44,
        "fullcodeline": "ret = -EBADFD;"
    },
    {
        "line": 48,
        "fullcodeline": "tun_debug(KERN_INFO, tun, \"tun_chr_ioctl cmd %d\\n\", cmd);"
    },
    {
        "line": 50,
        "fullcodeline": "ret = 0;"
    },
    {
        "line": 201,
        "fullcodeline": "rtnl_unlock();"
    },
    {
        "line": 13,
        "fullcodeline": "if (cmd == TUNSETIFF || _IOC_TYPE(cmd) == 0x89) {"
    },
    {
        "line": 19,
        "fullcodeline": "if (cmd == TUNGETFEATURES) {"
    },
    {
        "line": 31,
        "fullcodeline": "if (cmd == TUNSETIFF && !tun) {"
    },
    {
        "line": 45,
        "fullcodeline": "if (!tun)"
    },
    {
        "line": 32,
        "fullcodeline": "ifr.ifr_name[IFNAMSIZ-1] = '\\0';"
    },
    {
        "line": 34,
        "fullcodeline": "ret = tun_set_iff(tfile->net, file, &ifr);"
    },
    {
        "line": 53,
        "fullcodeline": "ret = tun_get_iff(current->nsproxy->net_ns, tun, &ifr);"
    },
    {
        "line": 65,
        "fullcodeline": "tun_debug(KERN_INFO, tun, \"ignored: set checksum %s\\n\","
    },
    {
        "line": 76,
        "fullcodeline": "tun_debug(KERN_INFO, tun, \"persist %s\\n\","
    },
    {
        "line": 82,
        "fullcodeline": "tun->owner = (uid_t) arg;"
    },
    {
        "line": 84,
        "fullcodeline": "tun_debug(KERN_INFO, tun, \"owner set to %d\\n\", tun->owner);"
    },
    {
        "line": 89,
        "fullcodeline": "tun->group= (gid_t) arg;"
    },
    {
        "line": 91,
        "fullcodeline": "tun_debug(KERN_INFO, tun, \"group set to %d\\n\", tun->group);"
    },
    {
        "line": 114,
        "fullcodeline": "ret = set_offload(tun, arg);"
    },
    {
        "line": 119,
        "fullcodeline": "ret = -EINVAL;"
    },
    {
        "line": 127,
        "fullcodeline": "memcpy(ifr.ifr_hwaddr.sa_data, tun->dev->dev_addr, ETH_ALEN);"
    },
    {
        "line": 135,
        "fullcodeline": "tun_debug(KERN_DEBUG, tun, \"set hw address: %pM\\n\","
    },
    {
        "line": 138,
        "fullcodeline": "ret = dev_set_mac_address(tun->dev, &ifr.ifr_hwaddr);"
    },
    {
        "line": 153,
        "fullcodeline": "tun->socket.sk->sk_sndbuf = sndbuf;"
    },
    {
        "line": 157,
        "fullcodeline": "vnet_hdr_sz = tun->vnet_hdr_sz;"
    },
    {
        "line": 172,
        "fullcodeline": "tun->vnet_hdr_sz = vnet_hdr_sz;"
    },
    {
        "line": 177,
        "fullcodeline": "ret = -EINVAL;"
    },
    {
        "line": 180,
        "fullcodeline": "ret = -EFAULT;"
    },
    {
        "line": 184,
        "fullcodeline": "ret = sk_attach_filter(&fprog, tun->socket.sk);"
    },
    {
        "line": 189,
        "fullcodeline": "ret = -EINVAL;"
    },
    {
        "line": 192,
        "fullcodeline": "ret = sk_detach_filter(tun->socket.sk);"
    },
    {
        "line": 196,
        "fullcodeline": "ret = -EINVAL;"
    },
    {
        "line": 203,
        "fullcodeline": "tun_put(tun);"
    },
    {
        "line": 14,
        "fullcodeline": "if (copy_from_user(&ifr, argp, ifreq_len))"
    },
    {
        "line": 17,
        "fullcodeline": "memset(&ifr, 0, sizeof(ifr));"
    },
    {
        "line": 39,
        "fullcodeline": "if (copy_to_user(argp, &ifr, ifreq_len))"
    },
    {
        "line": 57,
        "fullcodeline": "if (copy_to_user(argp, &ifr, ifreq_len))"
    },
    {
        "line": 66,
        "fullcodeline": "arg ? \"disabled\" : \"enabled\");"
    },
    {
        "line": 77,
        "fullcodeline": "arg ? \"enabled\" : \"disabled\");"
    },
    {
        "line": 96,
        "fullcodeline": "if (tun->dev->flags & IFF_UP) {"
    },
    {
        "line": 120,
        "fullcodeline": "if ((tun->flags & TUN_TYPE_MASK) != TUN_TAP_DEV)"
    },
    {
        "line": 129,
        "fullcodeline": "if (copy_to_user(argp, &ifr, ifreq_len))"
    },
    {
        "line": 143,
        "fullcodeline": "if (copy_to_user(argp, &sndbuf, sizeof(sndbuf)))"
    },
    {
        "line": 148,
        "fullcodeline": "if (copy_from_user(&sndbuf, argp, sizeof(sndbuf))) {"
    },
    {
        "line": 158,
        "fullcodeline": "if (copy_to_user(argp, &vnet_hdr_sz, sizeof(vnet_hdr_sz)))"
    },
    {
        "line": 163,
        "fullcodeline": "if (copy_from_user(&vnet_hdr_sz, argp, sizeof(vnet_hdr_sz))) {"
    },
    {
        "line": 167,
        "fullcodeline": "if (vnet_hdr_sz < (int)sizeof(struct virtio_net_hdr)) {"
    },
    {
        "line": 178,
        "fullcodeline": "if ((tun->flags & TUN_TYPE_MASK) != TUN_TAP_DEV)"
    },
    {
        "line": 181,
        "fullcodeline": "if (copy_from_user(&fprog, argp, sizeof(fprog)))"
    },
    {
        "line": 190,
        "fullcodeline": "if ((tun->flags & TUN_TYPE_MASK) != TUN_TAP_DEV)"
    },
    {
        "line": 40,
        "fullcodeline": "ret = -EFAULT;"
    },
    {
        "line": 58,
        "fullcodeline": "ret = -EFAULT;"
    },
    {
        "line": 72,
        "fullcodeline": "tun->flags |= TUN_PERSIST;"
    },
    {
        "line": 97,
        "fullcodeline": "tun_debug(KERN_INFO, tun,"
    },
    {
        "line": 99,
        "fullcodeline": "ret = -EBUSY;"
    },
    {
        "line": 130,
        "fullcodeline": "ret = -EFAULT;"
    },
    {
        "line": 144,
        "fullcodeline": "ret = -EFAULT;"
    },
    {
        "line": 149,
        "fullcodeline": "ret = -EFAULT;"
    },
    {
        "line": 159,
        "fullcodeline": "ret = -EFAULT;"
    },
    {
        "line": 164,
        "fullcodeline": "ret = -EFAULT;"
    },
    {
        "line": 168,
        "fullcodeline": "ret = -EINVAL;"
    },
    {
        "line": 15,
        "fullcodeline": "return -EFAULT;"
    },
    {
        "line": 74,
        "fullcodeline": "tun->flags &= ~TUN_PERSIST;"
    },
    {
        "line": 101,
        "fullcodeline": "tun->dev->type = (int) arg;"
    },
    {
        "line": 102,
        "fullcodeline": "tun_debug(KERN_INFO, tun, \"linktype set to %d\\n\","
    },
    {
        "line": 104,
        "fullcodeline": "ret = 0;"
    }
]