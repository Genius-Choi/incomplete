[
    {
        "line": 6,
        "fullcodeline": "domain = Domain()"
    },
    {
        "line": 7,
        "fullcodeline": "leader = None"
    },
    {
        "line": 27,
        "fullcodeline": "domain.append(token)"
    },
    {
        "line": 8,
        "fullcodeline": "if value[0] in CFWS_LEADER:"
    },
    {
        "line": 10,
        "fullcodeline": "if not value:"
    },
    {
        "line": 13,
        "fullcodeline": "if value[0] == '[':"
    },
    {
        "line": 23,
        "fullcodeline": "if value and value[0] == '@':"
    },
    {
        "line": 25,
        "fullcodeline": "if leader is not None:"
    },
    {
        "line": 28,
        "fullcodeline": "if value and value[0] == '.':"
    },
    {
        "line": 37,
        "fullcodeline": "return domain, value"
    },
    {
        "line": 11,
        "fullcodeline": "raise errors.HeaderParseError("
    },
    {
        "line": 17,
        "fullcodeline": "domain.append(token)"
    },
    {
        "line": 24,
        "fullcodeline": "raise errors.HeaderParseError('Invalid Domain')"
    },
    {
        "line": 26,
        "fullcodeline": "token[:0] = [leader]"
    },
    {
        "line": 9,
        "fullcodeline": "leader, value = get_cfws(value)"
    },
    {
        "line": 14,
        "fullcodeline": "token, value = get_domain_literal(value)"
    },
    {
        "line": 15,
        "fullcodeline": "if leader is not None:"
    },
    {
        "line": 18,
        "fullcodeline": "return domain, value"
    },
    {
        "line": 20,
        "fullcodeline": "token, value = get_dot_atom(value)"
    },
    {
        "line": 29,
        "fullcodeline": "domain.defects.append(errors.ObsoleteHeaderDefect("
    },
    {
        "line": 31,
        "fullcodeline": "if domain[0].token_type == 'dot-atom':"
    },
    {
        "line": 33,
        "fullcodeline": "while value and value[0] == '.':"
    },
    {
        "line": 16,
        "fullcodeline": "token[:0] = [leader]"
    },
    {
        "line": 32,
        "fullcodeline": "domain[:] = domain[0]"
    },
    {
        "line": 34,
        "fullcodeline": "domain.append(DOT)"
    },
    {
        "line": 36,
        "fullcodeline": "domain.append(token)"
    },
    {
        "line": 12,
        "fullcodeline": "\"expected domain but found '{}'\".format(value))"
    },
    {
        "line": 22,
        "fullcodeline": "token, value = get_atom(value)"
    },
    {
        "line": 35,
        "fullcodeline": "token, value = get_atom(value[1:])"
    }
]