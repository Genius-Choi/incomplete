[
    {
        "line": 6,
        "fullcodeline": "struct bpf_reg_state *regs = cur_regs(env);"
    },
    {
        "line": 7,
        "fullcodeline": "u8 opcode = BPF_OP(insn->code);"
    },
    {
        "line": 11,
        "fullcodeline": "u64 insn_bitness = (BPF_CLASS(insn->code) == BPF_ALU64) ? 64 : 32;"
    },
    {
        "line": 13,
        "fullcodeline": "smin_val = src_reg.smin_value;"
    },
    {
        "line": 14,
        "fullcodeline": "smax_val = src_reg.smax_value;"
    },
    {
        "line": 15,
        "fullcodeline": "umin_val = src_reg.umin_value;"
    },
    {
        "line": 16,
        "fullcodeline": "umax_val = src_reg.umax_value;"
    },
    {
        "line": 17,
        "fullcodeline": "src_known = tnum_is_const(src_reg.var_off);"
    },
    {
        "line": 18,
        "fullcodeline": "dst_known = tnum_is_const(dst_reg->var_off);"
    },
    {
        "line": 251,
        "fullcodeline": "__reg_deduce_bounds(dst_reg);"
    },
    {
        "line": 20,
        "fullcodeline": "if ((src_known && (smin_val != smax_val || umin_val != umax_val)) ||"
    },
    {
        "line": 21,
        "fullcodeline": "smin_val > smax_val || umin_val > umax_val) {"
    },
    {
        "line": 25,
        "fullcodeline": "__mark_reg_unknown(dst_reg);"
    },
    {
        "line": 29,
        "fullcodeline": "if (!src_known &&"
    },
    {
        "line": 30,
        "fullcodeline": "opcode != BPF_ADD && opcode != BPF_SUB && opcode != BPF_AND) {"
    },
    {
        "line": 53,
        "fullcodeline": "dst_reg->var_off = tnum_add(dst_reg->var_off, src_reg.var_off);"
    },
    {
        "line": 74,
        "fullcodeline": "dst_reg->var_off = tnum_sub(dst_reg->var_off, src_reg.var_off);"
    },
    {
        "line": 77,
        "fullcodeline": "dst_reg->var_off = tnum_mul(dst_reg->var_off, src_reg.var_off);"
    },
    {
        "line": 94,
        "fullcodeline": "dst_reg->umin_value *= umin_val;"
    },
    {
        "line": 95,
        "fullcodeline": "dst_reg->umax_value *= umax_val;"
    },
    {
        "line": 114,
        "fullcodeline": "dst_reg->var_off = tnum_and(dst_reg->var_off, src_reg.var_off);"
    },
    {
        "line": 115,
        "fullcodeline": "dst_reg->umin_value = dst_reg->var_off.value;"
    },
    {
        "line": 116,
        "fullcodeline": "dst_reg->umax_value = min(dst_reg->umax_value, umax_val);"
    },
    {
        "line": 131,
        "fullcodeline": "__update_reg_bounds(dst_reg);"
    },
    {
        "line": 142,
        "fullcodeline": "dst_reg->var_off = tnum_or(dst_reg->var_off, src_reg.var_off);"
    },
    {
        "line": 143,
        "fullcodeline": "dst_reg->umin_value = max(dst_reg->umin_value, umin_val);"
    },
    {
        "line": 144,
        "fullcodeline": "dst_reg->umax_value = dst_reg->var_off.value |"
    },
    {
        "line": 160,
        "fullcodeline": "__update_reg_bounds(dst_reg);"
    },
    {
        "line": 173,
        "fullcodeline": "dst_reg->smin_value = S64_MIN;"
    },
    {
        "line": 174,
        "fullcodeline": "dst_reg->smax_value = S64_MAX;"
    },
    {
        "line": 183,
        "fullcodeline": "dst_reg->var_off = tnum_lshift(dst_reg->var_off, umin_val);"
    },
    {
        "line": 185,
        "fullcodeline": "__update_reg_bounds(dst_reg);"
    },
    {
        "line": 209,
        "fullcodeline": "dst_reg->smin_value = S64_MIN;"
    },
    {
        "line": 210,
        "fullcodeline": "dst_reg->smax_value = S64_MAX;"
    },
    {
        "line": 211,
        "fullcodeline": "dst_reg->var_off = tnum_rshift(dst_reg->var_off, umin_val);"
    },
    {
        "line": 212,
        "fullcodeline": "dst_reg->umin_value >>= umax_val;"
    },
    {
        "line": 213,
        "fullcodeline": "dst_reg->umax_value >>= umin_val;"
    },
    {
        "line": 215,
        "fullcodeline": "__update_reg_bounds(dst_reg);"
    },
    {
        "line": 229,
        "fullcodeline": "dst_reg->smin_value >>= umin_val;"
    },
    {
        "line": 230,
        "fullcodeline": "dst_reg->smax_value >>= umin_val;"
    },
    {
        "line": 231,
        "fullcodeline": "dst_reg->var_off = tnum_arshift(dst_reg->var_off, umin_val);"
    },
    {
        "line": 236,
        "fullcodeline": "dst_reg->umin_value = 0;"
    },
    {
        "line": 237,
        "fullcodeline": "dst_reg->umax_value = U64_MAX;"
    },
    {
        "line": 238,
        "fullcodeline": "__update_reg_bounds(dst_reg);"
    },
    {
        "line": 245,
        "fullcodeline": "if (BPF_CLASS(insn->code) != BPF_ALU64) {"
    },
    {
        "line": 247,
        "fullcodeline": "coerce_reg_to_size(dst_reg, 4);"
    },
    {
        "line": 65,
        "fullcodeline": "if (dst_reg->umin_value < umax_val) {"
    },
    {
        "line": 96,
        "fullcodeline": "if (dst_reg->umax_value > S64_MAX) {"
    },
    {
        "line": 163,
        "fullcodeline": "if (umax_val >= insn_bitness) {"
    },
    {
        "line": 176,
        "fullcodeline": "if (dst_reg->umax_value > 1ULL << (63 - umax_val)) {"
    },
    {
        "line": 188,
        "fullcodeline": "if (umax_val >= insn_bitness) {"
    },
    {
        "line": 37,
        "fullcodeline": "if (signed_add_overflows(dst_reg->smin_value, smin_val) ||"
    },
    {
        "line": 38,
        "fullcodeline": "signed_add_overflows(dst_reg->smax_value, smax_val)) {"
    },
    {
        "line": 39,
        "fullcodeline": "dst_reg->smin_value = S64_MIN;"
    },
    {
        "line": 40,
        "fullcodeline": "dst_reg->smax_value = S64_MAX;"
    },
    {
        "line": 45,
        "fullcodeline": "if (dst_reg->umin_value + umin_val < umin_val ||"
    },
    {
        "line": 46,
        "fullcodeline": "dst_reg->umax_value + umax_val < umax_val) {"
    },
    {
        "line": 47,
        "fullcodeline": "dst_reg->umin_value = 0;"
    },
    {
        "line": 48,
        "fullcodeline": "dst_reg->umax_value = U64_MAX;"
    },
    {
        "line": 56,
        "fullcodeline": "if (signed_sub_overflows(dst_reg->smin_value, smax_val) ||"
    },
    {
        "line": 57,
        "fullcodeline": "signed_sub_overflows(dst_reg->smax_value, smin_val)) {"
    },
    {
        "line": 59,
        "fullcodeline": "dst_reg->smin_value = S64_MIN;"
    },
    {
        "line": 60,
        "fullcodeline": "dst_reg->smax_value = S64_MAX;"
    },
    {
        "line": 67,
        "fullcodeline": "dst_reg->umin_value = 0;"
    },
    {
        "line": 68,
        "fullcodeline": "dst_reg->umax_value = U64_MAX;"
    },
    {
        "line": 78,
        "fullcodeline": "if (smin_val < 0 || dst_reg->smin_value < 0) {"
    },
    {
        "line": 80,
        "fullcodeline": "__mark_reg_unbounded(dst_reg);"
    },
    {
        "line": 81,
        "fullcodeline": "__update_reg_bounds(dst_reg);"
    },
    {
        "line": 87,
        "fullcodeline": "if (umax_val > U32_MAX || dst_reg->umax_value > U32_MAX) {"
    },
    {
        "line": 89,
        "fullcodeline": "__mark_reg_unbounded(dst_reg);"
    },
    {
        "line": 91,
        "fullcodeline": "__update_reg_bounds(dst_reg);"
    },
    {
        "line": 98,
        "fullcodeline": "dst_reg->smin_value = S64_MIN;"
    },
    {
        "line": 99,
        "fullcodeline": "dst_reg->smax_value = S64_MAX;"
    },
    {
        "line": 107,
        "fullcodeline": "__mark_reg_known(dst_reg, dst_reg->var_off.value &"
    },
    {
        "line": 117,
        "fullcodeline": "if (dst_reg->smin_value < 0 || smin_val < 0) {"
    },
    {
        "line": 121,
        "fullcodeline": "dst_reg->smin_value = S64_MIN;"
    },
    {
        "line": 122,
        "fullcodeline": "dst_reg->smax_value = S64_MAX;"
    },
    {
        "line": 135,
        "fullcodeline": "__mark_reg_known(dst_reg, dst_reg->var_off.value |"
    },
    {
        "line": 146,
        "fullcodeline": "if (dst_reg->smin_value < 0 || smin_val < 0) {"
    },
    {
        "line": 150,
        "fullcodeline": "dst_reg->smin_value = S64_MIN;"
    },
    {
        "line": 151,
        "fullcodeline": "dst_reg->smax_value = S64_MAX;"
    },
    {
        "line": 177,
        "fullcodeline": "dst_reg->umin_value = 0;"
    },
    {
        "line": 178,
        "fullcodeline": "dst_reg->umax_value = U64_MAX;"
    },
    {
        "line": 42,
        "fullcodeline": "dst_reg->smin_value += smin_val;"
    },
    {
        "line": 43,
        "fullcodeline": "dst_reg->smax_value += smax_val;"
    },
    {
        "line": 50,
        "fullcodeline": "dst_reg->umin_value += umin_val;"
    },
    {
        "line": 51,
        "fullcodeline": "dst_reg->umax_value += umax_val;"
    },
    {
        "line": 62,
        "fullcodeline": "dst_reg->smin_value -= smax_val;"
    },
    {
        "line": 63,
        "fullcodeline": "dst_reg->smax_value -= smin_val;"
    },
    {
        "line": 71,
        "fullcodeline": "dst_reg->umin_value -= umax_val;"
    },
    {
        "line": 72,
        "fullcodeline": "dst_reg->umax_value -= umin_val;"
    },
    {
        "line": 101,
        "fullcodeline": "dst_reg->smin_value = dst_reg->umin_value;"
    },
    {
        "line": 102,
        "fullcodeline": "dst_reg->smax_value = dst_reg->umax_value;"
    },
    {
        "line": 127,
        "fullcodeline": "dst_reg->smin_value = dst_reg->umin_value;"
    },
    {
        "line": 128,
        "fullcodeline": "dst_reg->smax_value = dst_reg->umax_value;"
    },
    {
        "line": 156,
        "fullcodeline": "dst_reg->smin_value = dst_reg->umin_value;"
    },
    {
        "line": 157,
        "fullcodeline": "dst_reg->smax_value = dst_reg->umax_value;"
    },
    {
        "line": 180,
        "fullcodeline": "dst_reg->umin_value <<= umin_val;"
    },
    {
        "line": 181,
        "fullcodeline": "dst_reg->umax_value <<= umax_val;"
    }
]