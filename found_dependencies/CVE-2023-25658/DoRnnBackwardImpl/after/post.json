[
    {
        "line": 33,
        "fullcodeline": "auto cudnn = cudnn_->GetHandle(parent_, stream);"
    },
    {
        "line": 35,
        "fullcodeline": "TF_RETURN_IF_ERROR(CheckRNNParameterSize(cudnn, rnn_desc, input_desc));"
    },
    {
        "line": 122,
        "fullcodeline": "TF_ASSIGN_OR_RETURN(DeviceMemory<uint8_t> workspace,"
    },
    {
        "line": 126,
        "fullcodeline": "std::unique_ptr<GpuTimer, GpuTimerDeleter> timer;"
    },
    {
        "line": 127,
        "fullcodeline": "const bool is_profiling = output_profile_result != nullptr;"
    },
    {
        "line": 123,
        "fullcodeline": "CreateRnnWorkspace(stream, cudnn, rnn_desc, input_desc,"
    },
    {
        "line": 138,
        "fullcodeline": "if (input_desc.is_var_seq_lengths()) {"
    },
    {
        "line": 186,
        "fullcodeline": "if (params_backprop_data != nullptr) {"
    },
    {
        "line": 229,
        "fullcodeline": "return ::tsl::OkStatus();"
    },
    {
        "line": 129,
        "fullcodeline": "timer.reset(new GpuTimer(parent_));"
    },
    {
        "line": 139,
        "fullcodeline": "RETURN_IF_CUDNN_ERROR(cudnnRNNBackwardDataEx("
    },
    {
        "line": 188,
        "fullcodeline": "stream->ThenMemZero(params_backprop_data, params_backprop_data->size());"
    },
    {
        "line": 224,
        "fullcodeline": "output_profile_result->set_algorithm(algo_desc);"
    },
    {
        "line": 225,
        "fullcodeline": "output_profile_result->set_elapsed_time_in_ms("
    },
    {
        "line": 133,
        "fullcodeline": "if (!timer->Init() || !timer->Start(AsGpuStream(stream))) {"
    },
    {
        "line": 162,
        "fullcodeline": "RETURN_IF_CUDNN_ERROR(cudnnRNNBackwardData("
    },
    {
        "line": 189,
        "fullcodeline": "if (input_desc.is_var_seq_lengths()) {"
    },
    {
        "line": 220,
        "fullcodeline": "if (!timer->Stop(AsGpuStream(stream))) {"
    },
    {
        "line": 226,
        "fullcodeline": "timer->GetElapsedMilliseconds());"
    },
    {
        "line": 140,
        "fullcodeline": "/*handle=*/cudnn.handle(), /*rnnDesc=*/rnn_desc.handle(),"
    },
    {
        "line": 141,
        "fullcodeline": "/*yDesc=*/output_desc.data_handle(), /*y=*/output_data.opaque(),"
    },
    {
        "line": 142,
        "fullcodeline": "/*dyDesc=*/output_desc.data_handle(),"
    },
    {
        "line": 143,
        "fullcodeline": "/*dy=*/output_backprop_data.opaque(), nullptr, nullptr,"
    },
    {
        "line": 144,
        "fullcodeline": "/*dhyDesc=*/output_h_desc.handle(),"
    },
    {
        "line": 145,
        "fullcodeline": "/*dhy=*/output_h_backprop_data.opaque(),"
    },
    {
        "line": 146,
        "fullcodeline": "/*dcyDesc=*/output_c_desc.handle(),"
    },
    {
        "line": 147,
        "fullcodeline": "/*dcy=*/output_c_backprop_data.opaque(),"
    },
    {
        "line": 148,
        "fullcodeline": "/*wDesc=*/rnn_desc.params_handle(), /*w=*/params.opaque(),"
    },
    {
        "line": 149,
        "fullcodeline": "/*hxDesc=*/input_h_desc.handle(), /*hx=*/input_h_data.opaque(),"
    },
    {
        "line": 150,
        "fullcodeline": "/*cxDesc=*/input_c_desc.handle(), /*cx=*/input_c_data.opaque(),"
    },
    {
        "line": 151,
        "fullcodeline": "/*dxDesc=*/input_desc.data_handle(),"
    },
    {
        "line": 152,
        "fullcodeline": "/*dx=*/input_backprop_data->opaque(),"
    },
    {
        "line": 153,
        "fullcodeline": "/*dhxDesc=*/input_h_desc.handle(),"
    },
    {
        "line": 154,
        "fullcodeline": "/*dhx=*/input_h_backprop_data->opaque(),"
    },
    {
        "line": 155,
        "fullcodeline": "/*dcxDesc=*/input_c_desc.handle(),"
    },
    {
        "line": 156,
        "fullcodeline": "/*dcx=*/input_c_backprop_data->opaque(), nullptr, nullptr,"
    },
    {
        "line": 157,
        "fullcodeline": "/*workspace=*/workspace.opaque(),"
    },
    {
        "line": 158,
        "fullcodeline": "/*workSpaceSizeInBytes=*/workspace.size(),"
    },
    {
        "line": 159,
        "fullcodeline": "/*reserveSpace=*/reserve_space_data->opaque(),"
    },
    {
        "line": 160,
        "fullcodeline": "/*reserveSpaceSizeInBytes=*/reserve_space_data->size()));"
    },
    {
        "line": 190,
        "fullcodeline": "RETURN_IF_CUDNN_ERROR(cudnnRNNBackwardWeightsEx("
    },
    {
        "line": 223,
        "fullcodeline": "auto algo_desc = *rnn_desc.algorithm_config().algorithm();"
    },
    {
        "line": 134,
        "fullcodeline": "return tsl::Status(tsl::error::INTERNAL, \"Failed to start timer\");"
    },
    {
        "line": 163,
        "fullcodeline": "/*handle=*/cudnn.handle(), /*rnnDesc=*/rnn_desc.handle(),"
    },
    {
        "line": 165,
        "fullcodeline": "/*yDesc=*/output_desc.handles(),"
    },
    {
        "line": 166,
        "fullcodeline": "/*y=*/output_data.opaque(), /*dyDesc=*/output_desc.handles(),"
    },
    {
        "line": 167,
        "fullcodeline": "/*dy=*/output_backprop_data.opaque(),"
    },
    {
        "line": 168,
        "fullcodeline": "/*dhyDesc=*/output_h_desc.handle(),"
    },
    {
        "line": 169,
        "fullcodeline": "/*dhy=*/output_h_backprop_data.opaque(),"
    },
    {
        "line": 170,
        "fullcodeline": "/*dcyDesc=*/output_c_desc.handle(),"
    },
    {
        "line": 171,
        "fullcodeline": "/*dcy=*/output_c_backprop_data.opaque(),"
    },
    {
        "line": 172,
        "fullcodeline": "/*wDesc=*/rnn_desc.params_handle(), /*w=*/params.opaque(),"
    },
    {
        "line": 173,
        "fullcodeline": "/*hxDesc=*/input_h_desc.handle(), /*hx=*/input_h_data.opaque(),"
    },
    {
        "line": 174,
        "fullcodeline": "/*cxDesc=*/input_c_desc.handle(), /*cx=*/input_c_data.opaque(),"
    },
    {
        "line": 175,
        "fullcodeline": "/*dxDesc=*/input_desc.handles(), /*dx=*/input_backprop_data->opaque(),"
    },
    {
        "line": 176,
        "fullcodeline": "/*dhxDesc=*/input_h_desc.handle(),"
    },
    {
        "line": 177,
        "fullcodeline": "/*dhx=*/input_h_backprop_data->opaque(),"
    },
    {
        "line": 178,
        "fullcodeline": "/*dcxDesc=*/input_c_desc.handle(),"
    },
    {
        "line": 179,
        "fullcodeline": "/*dcx=*/input_c_backprop_data->opaque(),"
    },
    {
        "line": 180,
        "fullcodeline": "/*workspace=*/workspace.opaque(),"
    },
    {
        "line": 181,
        "fullcodeline": "/*workSpaceSizeInBytes=*/workspace.size(),"
    },
    {
        "line": 182,
        "fullcodeline": "/*reserveSpace=*/reserve_space_data->opaque(),"
    },
    {
        "line": 183,
        "fullcodeline": "/*reserveSpaceSizeInBytes=*/reserve_space_data->size()));"
    },
    {
        "line": 204,
        "fullcodeline": "RETURN_IF_CUDNN_ERROR(cudnnRNNBackwardWeights("
    },
    {
        "line": 221,
        "fullcodeline": "return tsl::Status(tsl::error::INTERNAL, \"Failed to stop timer\");"
    },
    {
        "line": 191,
        "fullcodeline": "/*handle=*/cudnn.handle(), /*rnnDesc=*/rnn_desc.handle(),"
    },
    {
        "line": 192,
        "fullcodeline": "/*xDesc=*/input_desc.data_handle(), /*x=*/input_data.opaque(),"
    },
    {
        "line": 193,
        "fullcodeline": "/*hxDesc=*/input_h_desc.handle(), /*hx=*/input_h_data.opaque(),"
    },
    {
        "line": 194,
        "fullcodeline": "/*yDesc=*/output_desc.data_handle(),"
    },
    {
        "line": 195,
        "fullcodeline": "/*y=*/output_data.opaque(),"
    },
    {
        "line": 196,
        "fullcodeline": "/*workspace=*/workspace.opaque(),"
    },
    {
        "line": 197,
        "fullcodeline": "/*workSpaceSizeInBytes=*/workspace.size(),"
    },
    {
        "line": 198,
        "fullcodeline": "/*dwDesc=*/rnn_desc.params_handle(),"
    },
    {
        "line": 199,
        "fullcodeline": "/*dw=*/params_backprop_data->opaque(),"
    },
    {
        "line": 200,
        "fullcodeline": "/*reserveSpace=*/reserve_space_data->opaque(),"
    },
    {
        "line": 201,
        "fullcodeline": "/*reserveSpaceSizeInBytes=*/reserve_space_data->size()));"
    },
    {
        "line": 205,
        "fullcodeline": "/*handle=*/cudnn.handle(), /*rnnDesc=*/rnn_desc.handle(),"
    },
    {
        "line": 207,
        "fullcodeline": "/*xDesc=*/input_desc.handles(),"
    },
    {
        "line": 208,
        "fullcodeline": "/*x=*/input_data.opaque(), /*hxDesc=*/input_h_desc.handle(),"
    },
    {
        "line": 209,
        "fullcodeline": "/*hx=*/input_h_data.opaque(), /*yDesc=*/output_desc.handles(),"
    },
    {
        "line": 210,
        "fullcodeline": "/*y=*/output_data.opaque(), /*workspace=*/workspace.opaque(),"
    },
    {
        "line": 211,
        "fullcodeline": "/*workSpaceSizeInBytes=*/workspace.size(),"
    },
    {
        "line": 212,
        "fullcodeline": "/*dwDesc=*/rnn_desc.params_handle(),"
    },
    {
        "line": 213,
        "fullcodeline": "/*dw=*/params_backprop_data->opaque(),"
    },
    {
        "line": 214,
        "fullcodeline": "/*reserveSpace=*/reserve_space_data->opaque(),"
    },
    {
        "line": 215,
        "fullcodeline": "/*reserveSpaceSizeInBytes=*/reserve_space_data->size()));"
    }
]