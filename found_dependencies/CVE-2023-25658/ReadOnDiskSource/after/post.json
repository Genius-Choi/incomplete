[
    {
        "line": 4,
        "fullcodeline": "std::string source_path = SourceDirectory(path_, stream_index, source_index);"
    },
    {
        "line": 6,
        "fullcodeline": "std::vector<std::string> split_filenames;"
    },
    {
        "line": 7,
        "fullcodeline": "TF_RETURN_IF_ERROR(env_->GetChildren(source_path, &split_filenames));"
    },
    {
        "line": 35,
        "fullcodeline": "streams_[stream_index].num_assigned_splits[source_index] ="
    },
    {
        "line": 36,
        "fullcodeline": "split_filenames.size();"
    },
    {
        "line": 38,
        "fullcodeline": "return OkStatus();"
    },
    {
        "line": 12,
        "fullcodeline": "std::string split_path = io::JoinPath(source_path, split_filename);"
    },
    {
        "line": 30,
        "fullcodeline": "TF_RETURN_IF_ERROR(split_providers_[source_index]->GetNext("
    },
    {
        "line": 32,
        "fullcodeline": "global_split_indices.insert(global_split_index);"
    },
    {
        "line": 18,
        "fullcodeline": "if (local_split_index > split_filenames.size() - 1) {"
    },
    {
        "line": 23,
        "fullcodeline": "if (global_split_indices.contains(global_split_index)) {"
    },
    {
        "line": 19,
        "fullcodeline": "return InvalidArgument("
    },
    {
        "line": 24,
        "fullcodeline": "return InvalidArgument(\"found duplicate global split index in name of \","
    }
]