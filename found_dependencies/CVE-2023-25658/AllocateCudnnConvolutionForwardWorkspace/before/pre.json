[
    {
        "line": 28,
        "fullcodeline": "int64_t size_in_bytes_int64_t = size_in_bytes;"
    },
    {
        "line": 8,
        "fullcodeline": "if (IsTensorMathOpSet(conv) != algorithm_desc.tensor_ops_enabled()) {"
    },
    {
        "line": 16,
        "fullcodeline": "if (algorithm_desc.workspace_size()) {"
    },
    {
        "line": 46,
        "fullcodeline": "return scratch_allocator->AllocateBytes(size_in_bytes);"
    },
    {
        "line": 17,
        "fullcodeline": "size_in_bytes = *algorithm_desc.workspace_size();"
    },
    {
        "line": 30,
        "fullcodeline": "if (ABSL_PREDICT_FALSE(size_in_bytes_int64_t < 0)) {"
    },
    {
        "line": 41,
        "fullcodeline": "if (ABSL_PREDICT_FALSE(!scratch_allocator)) {"
    },
    {
        "line": 9,
        "fullcodeline": "return tsl::Status("
    },
    {
        "line": 31,
        "fullcodeline": "return tsl::Status("
    },
    {
        "line": 38,
        "fullcodeline": "return DeviceMemory<uint8_t>();"
    },
    {
        "line": 42,
        "fullcodeline": "return tsl::Status(port::error::INVALID_ARGUMENT,"
    },
    {
        "line": 19,
        "fullcodeline": "RETURN_IF_CUDNN_ERROR(cudnnGetConvolutionForwardWorkspaceSize("
    },
    {
        "line": 20,
        "fullcodeline": "cudnn.handle(),"
    },
    {
        "line": 21,
        "fullcodeline": "/*xDesc=*/input_nd.handle(),"
    },
    {
        "line": 22,
        "fullcodeline": "/*wDesc=*/filter.handle(), /*convDesc=*/conv.handle(),"
    },
    {
        "line": 23,
        "fullcodeline": "/*yDesc=*/output_nd.handle(),"
    },
    {
        "line": 24,
        "fullcodeline": "/*algo=*/ToConvForwardAlgo(algorithm_desc),"
    }
]