[
    {
        "line": 16,
        "fullcodeline": "job = None"
    },
    {
        "line": 26,
        "fullcodeline": "assert isinstance(cluster_resolver, TPUClusterResolver)"
    },
    {
        "line": 28,
        "fullcodeline": "tpu_name = compat.as_text(cluster_resolver._tpu)  # pylint: disable=protected-access"
    },
    {
        "line": 33,
        "fullcodeline": "logging.info(\"Shutting down the TPU system: %s\", tpu_name)"
    },
    {
        "line": 77,
        "fullcodeline": "logging.info(\"Finished shutting down TPU system.\")"
    },
    {
        "line": 17,
        "fullcodeline": "if cluster_resolver is None:"
    },
    {
        "line": 29,
        "fullcodeline": "if tpu_name not in _INITIALIZED_TPU_SYSTEMS:"
    },
    {
        "line": 35,
        "fullcodeline": "if context.executing_eagerly():"
    },
    {
        "line": 78,
        "fullcodeline": "if tpu_name in _INITIALIZED_TPU_SYSTEMS:"
    },
    {
        "line": 25,
        "fullcodeline": "cluster_resolver = TPUClusterResolver(\"\")"
    },
    {
        "line": 30,
        "fullcodeline": "logging.warning(\"You are shutting down a TPU system %s that has not been \""
    },
    {
        "line": 47,
        "fullcodeline": "def _tpu_shutdown_fn():"
    },
    {
        "line": 57,
        "fullcodeline": "logging.info(\"Clearing out eager caches\")"
    },
    {
        "line": 79,
        "fullcodeline": "del _INITIALIZED_TPU_SYSTEMS[tpu_name]"
    },
    {
        "line": 20,
        "fullcodeline": "if context.executing_eagerly():"
    },
    {
        "line": 41,
        "fullcodeline": "if tpu_name not in _LOCAL_MASTERS:"
    },
    {
        "line": 46,
        "fullcodeline": "@function"
    },
    {
        "line": 53,
        "fullcodeline": "with ops.device(tpu._tpu_system_device_name(job)):  # pylint: disable=protected-access"
    },
    {
        "line": 58,
        "fullcodeline": "context.context()._clear_caches()  # pylint: disable=protected-access"
    },
    {
        "line": 59,
        "fullcodeline": "context.context().clear_kernel_cache()"
    },
    {
        "line": 60,
        "fullcodeline": "elif not ops.executing_eagerly_outside_functions():"
    },
    {
        "line": 21,
        "fullcodeline": "curr_device = device.DeviceSpec.from_string(context.context().device_name)"
    },
    {
        "line": 44,
        "fullcodeline": "job = \"{}/replica:0/task:0\".format(cluster_resolver.get_job_name())"
    },
    {
        "line": 61,
        "fullcodeline": "master = cluster_resolver.master()"
    },
    {
        "line": 62,
        "fullcodeline": "cluster_spec = cluster_resolver.cluster_spec()"
    },
    {
        "line": 64,
        "fullcodeline": "session_config = config_pb2.ConfigProto(allow_soft_placement=True)"
    },
    {
        "line": 72,
        "fullcodeline": "raise RuntimeError("
    },
    {
        "line": 22,
        "fullcodeline": "if curr_device.job is not None:"
    },
    {
        "line": 54,
        "fullcodeline": "_tpu_shutdown_fn()"
    },
    {
        "line": 68,
        "fullcodeline": "with ops.Graph().as_default():"
    },
    {
        "line": 23,
        "fullcodeline": "job = \"{}/replica:0/task:0\".format(curr_device.job)"
    },
    {
        "line": 73,
        "fullcodeline": "\"initialize_tpu_system is not supported within \""
    },
    {
        "line": 66,
        "fullcodeline": "session_config.cluster_def.CopyFrom(cluster_spec.as_cluster_def())"
    },
    {
        "line": 69,
        "fullcodeline": "with session_lib.Session(config=session_config, target=master) as sess:"
    },
    {
        "line": 70,
        "fullcodeline": "sess.run(tpu.shutdown_system())"
    }
]