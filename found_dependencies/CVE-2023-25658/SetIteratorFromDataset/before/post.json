[
    {
        "line": 3,
        "fullcodeline": "std::shared_ptr<State> new_state;"
    },
    {
        "line": 13,
        "fullcodeline": "IteratorContext::Params params(ctx);"
    },
    {
        "line": 14,
        "fullcodeline": "params.cancellation_manager = new_state->cancellation_manager();"
    },
    {
        "line": 15,
        "fullcodeline": "params.flr = new_state->flr();"
    },
    {
        "line": 16,
        "fullcodeline": "params.function_handle_cache = new_state->function_handle_cache();"
    },
    {
        "line": 17,
        "fullcodeline": "params.resource_mgr = new_state->resource_mgr();"
    },
    {
        "line": 18,
        "fullcodeline": "params.symbolic_checkpoint = SymbolicCheckpointEnabled(dataset->options());"
    },
    {
        "line": 19,
        "fullcodeline": "params.thread_factory = unbounded_thread_pool_.get_thread_factory();"
    },
    {
        "line": 20,
        "fullcodeline": "params.thread_pool = &unbounded_thread_pool_;"
    },
    {
        "line": 21,
        "fullcodeline": "std::function<void()> deregister_fn;"
    },
    {
        "line": 22,
        "fullcodeline": "TF_RETURN_IF_ERROR(RegisterCancellationCallback("
    },
    {
        "line": 26,
        "fullcodeline": "auto cleanup = gtl::MakeCleanup(std::move(deregister_fn));"
    },
    {
        "line": 27,
        "fullcodeline": "IteratorContext iter_ctx(IteratorContext(std::move(params)));"
    },
    {
        "line": 28,
        "fullcodeline": "std::unique_ptr<IteratorBase> iterator;"
    },
    {
        "line": 40,
        "fullcodeline": "TF_RETURN_IF_ERROR("
    },
    {
        "line": 42,
        "fullcodeline": "TF_RETURN_IF_ERROR("
    },
    {
        "line": 44,
        "fullcodeline": "new_state->DowncastAndSetIteratorAndDataset(std::move(iterator), dataset);"
    },
    {
        "line": 45,
        "fullcodeline": "new_state->MergeCheckpoint(iter_ctx.checkpoint());"
    },
    {
        "line": 46,
        "fullcodeline": "mutex_lock l(mu_);"
    },
    {
        "line": 47,
        "fullcodeline": "std::swap(iterator_state_, new_state);"
    },
    {
        "line": 5,
        "fullcodeline": "tf_shared_lock l(mu_);"
    },
    {
        "line": 6,
        "fullcodeline": "new_state ="
    },
    {
        "line": 29,
        "fullcodeline": "if (ctx->function_library()->device()->device_type() == DEVICE_CPU) {"
    },
    {
        "line": 41,
        "fullcodeline": "VerifyTypesMatch(output_dtypes_, iterator->output_dtypes()));"
    },
    {
        "line": 43,
        "fullcodeline": "VerifyShapesCompatible(output_shapes_, iterator->output_shapes()));"
    },
    {
        "line": 48,
        "fullcodeline": "return OkStatus();"
    },
    {
        "line": 7,
        "fullcodeline": "std::make_shared<State>(iterator_state_->flib_def(),"
    },
    {
        "line": 23,
        "fullcodeline": "ctx->cancellation_manager(),"
    },
    {
        "line": 31,
        "fullcodeline": "TF_ASSIGN_OR_RETURN(finalized_dataset, GetFinalizedDataset(ctx, dataset));"
    },
    {
        "line": 32,
        "fullcodeline": "TF_RETURN_IF_ERROR(finalized_dataset->MakeIterator(&iter_ctx,"
    },
    {
        "line": 36,
        "fullcodeline": "TF_RETURN_IF_ERROR(dataset->MakeIterator(&iter_ctx,"
    },
    {
        "line": 8,
        "fullcodeline": "iterator_state_->pflr(), iterator_state_->flr(),"
    }
]