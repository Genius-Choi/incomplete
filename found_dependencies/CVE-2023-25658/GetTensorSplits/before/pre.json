[
    {
        "line": 4,
        "fullcodeline": "std::vector<PoolingSplitsSpec> out;"
    },
    {
        "line": 10,
        "fullcodeline": "cudnnDataType_t cudnn_input_type ="
    },
    {
        "line": 12,
        "fullcodeline": "cudnnDataType_t cudnn_output_type ="
    },
    {
        "line": 18,
        "fullcodeline": "int64_t num_batches = input_descriptor.count();"
    },
    {
        "line": 19,
        "fullcodeline": "int64_t elements_per_batch_input = input_descriptor.NodesAcrossFeatureMaps();"
    },
    {
        "line": 20,
        "fullcodeline": "int64_t elements_per_batch_output ="
    },
    {
        "line": 23,
        "fullcodeline": "int64_t max_batches_per_split ="
    },
    {
        "line": 35,
        "fullcodeline": "int64_t processed_batches = 0;"
    },
    {
        "line": 5,
        "fullcodeline": "if (element_type == dnn::DataType::kInt8) {"
    },
    {
        "line": 11,
        "fullcodeline": "ToCudnnDataType(element_type, input_descriptor.layout());"
    },
    {
        "line": 13,
        "fullcodeline": "ToCudnnDataType(element_type, output_descriptor.layout());"
    },
    {
        "line": 15,
        "fullcodeline": "std::vector<int64_t> dims64 ="
    },
    {
        "line": 16,
        "fullcodeline": "input_descriptor.full_dims(dnn::DataLayout::kBatchDepthYX);"
    },
    {
        "line": 21,
        "fullcodeline": "output_descriptor.NodesAcrossFeatureMaps();"
    },
    {
        "line": 24,
        "fullcodeline": "std::numeric_limits<int>::max() / elements_per_batch_input;"
    },
    {
        "line": 26,
        "fullcodeline": "if (max_batches_per_split == 0) {"
    },
    {
        "line": 36,
        "fullcodeline": "while (processed_batches < num_batches) {"
    },
    {
        "line": 6,
        "fullcodeline": "out.push_back({input_descriptor.count(), 0, 0});"
    },
    {
        "line": 37,
        "fullcodeline": "int64_t num_batches_per_split ="
    },
    {
        "line": 39,
        "fullcodeline": "int64_t offset_input = processed_batches * elements_per_batch_input *"
    },
    {
        "line": 41,
        "fullcodeline": "int64_t offset_output = processed_batches * elements_per_batch_output *"
    },
    {
        "line": 43,
        "fullcodeline": "out.push_back({num_batches_per_split, offset_input, offset_output});"
    },
    {
        "line": 44,
        "fullcodeline": "processed_batches += num_batches_per_split;"
    },
    {
        "line": 27,
        "fullcodeline": "return tsl::Status("
    },
    {
        "line": 38,
        "fullcodeline": "std::min(max_batches_per_split, num_batches - processed_batches);"
    },
    {
        "line": 29,
        "fullcodeline": "absl::StrCat("
    },
    {
        "line": 40,
        "fullcodeline": "CudnnDataTypeToByteSize(cudnn_input_type);"
    },
    {
        "line": 42,
        "fullcodeline": "CudnnDataTypeToByteSize(cudnn_output_type);"
    }
]