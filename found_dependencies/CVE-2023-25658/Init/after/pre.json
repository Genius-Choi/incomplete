[
    {
        "line": 2,
        "fullcodeline": "ScopedActivateExecutorContext context(parent_);"
    },
    {
        "line": 5,
        "fullcodeline": "cudaError_t cerr = cudaPeekAtLastError();"
    },
    {
        "line": 11,
        "fullcodeline": "cudnnHandle_t cudnn_handle = nullptr;"
    },
    {
        "line": 12,
        "fullcodeline": "const auto status = cudnnCreate(&cudnn_handle);"
    },
    {
        "line": 6,
        "fullcodeline": "if (cerr != cudaSuccess) {"
    },
    {
        "line": 13,
        "fullcodeline": "if (status == CUDNN_STATUS_SUCCESS) {"
    },
    {
        "line": 39,
        "fullcodeline": "LOG(ERROR) << \"Could not create cudnn handle: \""
    },
    {
        "line": 40,
        "fullcodeline": "<< CudnnStatusToString(status);"
    },
    {
        "line": 41,
        "fullcodeline": "if (status == CUDNN_STATUS_NOT_INITIALIZED) {"
    },
    {
        "line": 53,
        "fullcodeline": "return tsl::Status(tsl::error::INTERNAL,"
    },
    {
        "line": 7,
        "fullcodeline": "LOG(WARNING) << \"There was an error before creating cudnn handle: \""
    },
    {
        "line": 14,
        "fullcodeline": "CudnnVersion source_version(CUDNN_MAJOR, CUDNN_MINOR, CUDNN_PATCHLEVEL);"
    },
    {
        "line": 17,
        "fullcodeline": "TF_RETURN_IF_ERROR(GetLoadedCudnnVersion(&loaded_version));"
    },
    {
        "line": 32,
        "fullcodeline": "cudnn_.reset(new CudnnAccess(cudnn_handle));"
    },
    {
        "line": 42,
        "fullcodeline": "auto result = gpu::Diagnostician::FindKernelDriverVersion();"
    },
    {
        "line": 54,
        "fullcodeline": "absl::StrCat(\"cudnn library could not create a handle: \","
    },
    {
        "line": 8,
        "fullcodeline": "<< cudaGetErrorName(cerr) << \" : \" << cudaGetErrorString(cerr);"
    },
    {
        "line": 18,
        "fullcodeline": "if (!IsSourceCompatibleWithCudnnLibrary(source_version, loaded_version)) {"
    },
    {
        "line": 34,
        "fullcodeline": "LOG(INFO) << \"Loaded cuDNN version \" << cudnnGetVersion();"
    },
    {
        "line": 35,
        "fullcodeline": "return ::tsl::OkStatus();"
    },
    {
        "line": 55,
        "fullcodeline": "CudnnStatusToString(status)));"
    },
    {
        "line": 19,
        "fullcodeline": "const std::string error = absl::StrCat("
    },
    {
        "line": 27,
        "fullcodeline": "LOG(ERROR) << error;"
    },
    {
        "line": 28,
        "fullcodeline": "cudnnDestroy(cudnn_handle);"
    },
    {
        "line": 43,
        "fullcodeline": "if (!result.ok()) {"
    },
    {
        "line": 29,
        "fullcodeline": "return tsl::Status(tsl::error::INTERNAL, error);"
    },
    {
        "line": 44,
        "fullcodeline": "LOG(ERROR) << \"Error retrieving driver version: \""
    },
    {
        "line": 45,
        "fullcodeline": "<< cuda::DriverVersionStatusToString(result);"
    },
    {
        "line": 47,
        "fullcodeline": "const auto& version = result.value();"
    },
    {
        "line": 20,
        "fullcodeline": "\"Loaded runtime CuDNN library: \", loaded_version.ToString(),"
    },
    {
        "line": 21,
        "fullcodeline": "\" but source was compiled with: \", source_version.ToString(),"
    },
    {
        "line": 48,
        "fullcodeline": "LOG(ERROR) << \"Possibly insufficient driver version: \""
    },
    {
        "line": 49,
        "fullcodeline": "<< cuda::DriverVersionToString(version);"
    }
]