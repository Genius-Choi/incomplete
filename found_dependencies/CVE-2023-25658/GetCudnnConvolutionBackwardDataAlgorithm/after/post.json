[
    {
        "line": 9,
        "fullcodeline": "std::optional<dnn::AlgorithmDesc> algo_desc = algorithm_config.algorithm();"
    },
    {
        "line": 10,
        "fullcodeline": "CudnnConvolutionDescriptor conv("
    },
    {
        "line": 14,
        "fullcodeline": "TF_ASSIGN_OR_RETURN(use_tensor_ops,"
    },
    {
        "line": 16,
        "fullcodeline": "conv.set_use_tensor_op_math(use_tensor_ops);"
    },
    {
        "line": 33,
        "fullcodeline": "const auto scratch_or = AllocateCudnnConvolutionBackwardDataWorkspace("
    },
    {
        "line": 42,
        "fullcodeline": "algo_desc = algorithm_config.algorithm_no_scratch();"
    },
    {
        "line": 53,
        "fullcodeline": "TF_ASSIGN_OR_RETURN(use_tensor_ops,"
    },
    {
        "line": 55,
        "fullcodeline": "conv.set_use_tensor_op_math(use_tensor_ops);"
    },
    {
        "line": 56,
        "fullcodeline": "TF_ASSIGN_OR_RETURN(*scratch, AllocateCudnnConvolutionBackwardDataWorkspace("
    },
    {
        "line": 12,
        "fullcodeline": "ToCudnnDataType(GetConvAccumulatorType(element_type)));"
    },
    {
        "line": 15,
        "fullcodeline": "UseTensorOps(stream, element_type, algo_desc));"
    },
    {
        "line": 18,
        "fullcodeline": "if (!algo_desc.has_value()) {"
    },
    {
        "line": 37,
        "fullcodeline": "if (scratch_or.ok()) {"
    },
    {
        "line": 46,
        "fullcodeline": "if (!algo_desc.has_value()) {"
    },
    {
        "line": 54,
        "fullcodeline": "UseTensorOps(stream, element_type, algo_desc));"
    },
    {
        "line": 21,
        "fullcodeline": "bool specify_workspace_limit = scratch_allocator != nullptr;"
    },
    {
        "line": 22,
        "fullcodeline": "auto memory_limit_bytes ="
    },
    {
        "line": 30,
        "fullcodeline": "algo_desc = dnn::AlgorithmDesc(algo, use_tensor_ops);"
    },
    {
        "line": 38,
        "fullcodeline": "*scratch = scratch_or.value();"
    },
    {
        "line": 23,
        "fullcodeline": "specify_workspace_limit"
    },
    {
        "line": 47,
        "fullcodeline": "return tsl::Status("
    },
    {
        "line": 24,
        "fullcodeline": "? std::max(scratch_allocator->GetMemoryLimitInBytes(), int64_t{0})"
    },
    {
        "line": 25,
        "fullcodeline": ": int64_t{0};"
    }
]