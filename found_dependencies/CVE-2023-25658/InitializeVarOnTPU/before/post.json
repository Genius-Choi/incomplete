[
    {
        "line": 4,
        "fullcodeline": "const string device = strings::StrCat(kTPUDeviceNamePrefix, device_ordinal);"
    },
    {
        "line": 5,
        "fullcodeline": "std::unique_ptr<Graph> init_graph(new Graph(OpRegistry::Global()));"
    },
    {
        "line": 6,
        "fullcodeline": "TF_ASSIGN_OR_RETURN(Node * init_handle, init_graph->AddNode(*ndef));"
    },
    {
        "line": 7,
        "fullcodeline": "init_handle->set_assigned_device_name(device);"
    },
    {
        "line": 10,
        "fullcodeline": "init_const_ndef.set_name(\"initial_value\");"
    },
    {
        "line": 14,
        "fullcodeline": "init_const_ndef.set_op(\"_TPUConst\");"
    },
    {
        "line": 15,
        "fullcodeline": "AddNodeAttr(\"memory_space\", \"HBM\", &init_const_ndef);"
    },
    {
        "line": 17,
        "fullcodeline": "init_const_ndef.set_device(device);"
    },
    {
        "line": 18,
        "fullcodeline": "AddNodeAttr(\"dtype\", var->tensor()->dtype(), &init_const_ndef);"
    },
    {
        "line": 19,
        "fullcodeline": "AddNodeAttr(\"value\", *var->tensor(), &init_const_ndef);"
    },
    {
        "line": 21,
        "fullcodeline": "TF_ASSIGN_OR_RETURN(Node * init_const, init_graph->AddNode(init_const_ndef));"
    },
    {
        "line": 24,
        "fullcodeline": "assign_node_def.set_name(\"Assign\");"
    },
    {
        "line": 25,
        "fullcodeline": "assign_node_def.set_op(\"AssignVariableOp\");"
    },
    {
        "line": 26,
        "fullcodeline": "assign_node_def.set_device(device);"
    },
    {
        "line": 27,
        "fullcodeline": "AddNodeAttr(\"dtype\", var->tensor()->dtype(), &assign_node_def);"
    },
    {
        "line": 28,
        "fullcodeline": "TF_ASSIGN_OR_RETURN(Node * init_assign, init_graph->AddNode(assign_node_def));"
    },
    {
        "line": 30,
        "fullcodeline": "init_graph->AddEdge(init_handle, 0, init_assign, 0);"
    },
    {
        "line": 31,
        "fullcodeline": "init_graph->AddEdge(init_const, 0, init_assign, 1);"
    },
    {
        "line": 33,
        "fullcodeline": "const string fname ="
    },
    {
        "line": 36,
        "fullcodeline": "TF_RETURN_IF_ERROR("
    },
    {
        "line": 40,
        "fullcodeline": "opts.step_container = ctx->step_container();"
    },
    {
        "line": 41,
        "fullcodeline": "opts.cancellation_manager = ctx->cancellation_manager();"
    },
    {
        "line": 42,
        "fullcodeline": "opts.stats_collector = ctx->stats_collector();"
    },
    {
        "line": 47,
        "fullcodeline": "std::function<void(std::function<void()>)> runner ="
    },
    {
        "line": 49,
        "fullcodeline": "opts.runner = &runner;"
    },
    {
        "line": 51,
        "fullcodeline": "opts.source_device = local_device_name_;"
    },
    {
        "line": 52,
        "fullcodeline": "PrivateIntraProcessRendezvous rendez(device_mgr_);"
    },
    {
        "line": 53,
        "fullcodeline": "opts.rendezvous = &rendez;"
    },
    {
        "line": 54,
        "fullcodeline": "opts.remote_execution = true;"
    },
    {
        "line": 56,
        "fullcodeline": "std::vector<Tensor> dummy_args;"
    },
    {
        "line": 57,
        "fullcodeline": "std::vector<Tensor>* dummy_rets = new std::vector<Tensor>;"
    },
    {
        "line": 60,
        "fullcodeline": "profiler::TraceMe trace_me(\"TPUPartitionedCallOp-InitializeVarOnTPU\");"
    },
    {
        "line": 61,
        "fullcodeline": "library_runtime_->Run(opts, fhandle, dummy_args, dummy_rets,"
    },
    {
        "line": 67,
        "fullcodeline": "done.WaitForNotification();"
    },
    {
        "line": 68,
        "fullcodeline": "TF_RETURN_IF_ERROR(status);"
    },
    {
        "line": 77,
        "fullcodeline": "TF_RETURN_IF_ERROR(flib_def_->RemoveFunction(fname));"
    },
    {
        "line": 78,
        "fullcodeline": "TF_RETURN_IF_ERROR(library_runtime_->ReleaseHandle(fhandle));"
    },
    {
        "line": 34,
        "fullcodeline": "strings::StrCat(ndef->name(), \"_init_ord_\", device_ordinal);"
    },
    {
        "line": 37,
        "fullcodeline": "InstantiatePartition(*init_graph, fname, device, &fhandle, nullptr));"
    },
    {
        "line": 79,
        "fullcodeline": "return OkStatus();"
    }
]