[
    {
        "line": 26,
        "fullcodeline": "auto cudnn = cudnn_->GetHandle(parent_, stream);"
    },
    {
        "line": 28,
        "fullcodeline": "TF_RETURN_IF_ERROR(CheckRNNParameterSize(cudnn, rnn_desc, input_desc));"
    },
    {
        "line": 102,
        "fullcodeline": "TF_ASSIGN_OR_RETURN(DeviceMemory<uint8_t> workspace,"
    },
    {
        "line": 108,
        "fullcodeline": "DeviceMemory<uint8_t> reserve_space;"
    },
    {
        "line": 122,
        "fullcodeline": "std::unique_ptr<GpuTimer, GpuTimerDeleter> timer;"
    },
    {
        "line": 123,
        "fullcodeline": "const bool is_profiling = output_profile_result != nullptr;"
    },
    {
        "line": 103,
        "fullcodeline": "CreateRnnWorkspace(stream, cudnn, rnn_desc, input_desc,"
    },
    {
        "line": 134,
        "fullcodeline": "if (!is_training) {"
    },
    {
        "line": 210,
        "fullcodeline": "return ::tsl::OkStatus();"
    },
    {
        "line": 110,
        "fullcodeline": "size_t reserve_space_size_in_bytes = 0;"
    },
    {
        "line": 111,
        "fullcodeline": "RETURN_IF_CUDNN_ERROR(cudnnGetRNNTrainingReserveSize("
    },
    {
        "line": 125,
        "fullcodeline": "timer.reset(new GpuTimer(parent_));"
    },
    {
        "line": 205,
        "fullcodeline": "output_profile_result->set_algorithm(algo_desc);"
    },
    {
        "line": 206,
        "fullcodeline": "output_profile_result->set_elapsed_time_in_ms("
    },
    {
        "line": 116,
        "fullcodeline": "if (reserve_space_size_in_bytes > 0) {"
    },
    {
        "line": 129,
        "fullcodeline": "if (!timer->Init() || !timer->Start(AsGpuStream(stream))) {"
    },
    {
        "line": 135,
        "fullcodeline": "if (input_desc.is_var_seq_lengths()) {"
    },
    {
        "line": 201,
        "fullcodeline": "if (!timer->Stop(AsGpuStream(stream))) {"
    },
    {
        "line": 207,
        "fullcodeline": "timer->GetElapsedMilliseconds());"
    },
    {
        "line": 112,
        "fullcodeline": "/*handle=*/cudnn.handle(), /*rnnDesc=*/rnn_desc.handle(),"
    },
    {
        "line": 113,
        "fullcodeline": "/*seqLength=*/model_dims.max_seq_length, /*xDesc=*/input_desc.handles(),"
    },
    {
        "line": 117,
        "fullcodeline": "TF_ASSIGN_OR_RETURN(reserve_space, reserve_space_allocator->AllocateBytes("
    },
    {
        "line": 136,
        "fullcodeline": "RETURN_IF_CUDNN_ERROR(cudnnRNNForwardInferenceEx("
    },
    {
        "line": 165,
        "fullcodeline": "if (input_desc.is_var_seq_lengths()) {"
    },
    {
        "line": 204,
        "fullcodeline": "auto algo_desc = *rnn_desc.algorithm_config().algorithm();"
    },
    {
        "line": 130,
        "fullcodeline": "return tsl::Status(tsl::error::INTERNAL, \"Failed to start timer\");"
    },
    {
        "line": 151,
        "fullcodeline": "RETURN_IF_CUDNN_ERROR(cudnnRNNForwardInference("
    },
    {
        "line": 166,
        "fullcodeline": "RETURN_IF_CUDNN_ERROR(cudnnRNNForwardTrainingEx("
    },
    {
        "line": 202,
        "fullcodeline": "return tsl::Status(tsl::error::INTERNAL, \"Failed to stop timer\");"
    },
    {
        "line": 137,
        "fullcodeline": "/*handle=*/cudnn.handle(), /*rnnDesc=*/rnn_desc.handle(),"
    },
    {
        "line": 138,
        "fullcodeline": "/*xDesc=*/input_desc.data_handle(), /*x=*/input_data.opaque(),"
    },
    {
        "line": 139,
        "fullcodeline": "/*hxDesc=*/input_h_desc.handle(), /*hx=*/input_h_data.opaque(),"
    },
    {
        "line": 140,
        "fullcodeline": "/*cxDesc=*/input_c_desc.handle(), /*cx=*/input_c_data.opaque(),"
    },
    {
        "line": 141,
        "fullcodeline": "/*wDesc=*/rnn_desc.params_handle(), /*w=*/params.opaque(),"
    },
    {
        "line": 142,
        "fullcodeline": "/*yDesc=*/output_desc.data_handle(),"
    },
    {
        "line": 143,
        "fullcodeline": "/*y=*/output_data->opaque(),"
    },
    {
        "line": 144,
        "fullcodeline": "/*hyDesc=*/output_h_desc.handle(), /*hy=*/output_h_data->opaque(),"
    },
    {
        "line": 145,
        "fullcodeline": "/*cyDesc=*/output_c_desc.handle(), /*cy=*/output_c_data->opaque(),"
    },
    {
        "line": 148,
        "fullcodeline": "/*workspace=*/workspace.opaque(),"
    },
    {
        "line": 149,
        "fullcodeline": "/*workSpaceSizeInBytes=*/workspace.size()));"
    },
    {
        "line": 183,
        "fullcodeline": "RETURN_IF_CUDNN_ERROR(cudnnRNNForwardTraining("
    },
    {
        "line": 152,
        "fullcodeline": "/*handle=*/cudnn.handle(), /*rnnDesc=*/rnn_desc.handle(),"
    },
    {
        "line": 154,
        "fullcodeline": "/*xDesc=*/input_desc.handles(),"
    },
    {
        "line": 155,
        "fullcodeline": "/*x=*/input_data.opaque(), /*hxDesc=*/input_h_desc.handle(),"
    },
    {
        "line": 156,
        "fullcodeline": "/*hx=*/input_h_data.opaque(), /*cxDesc=*/input_c_desc.handle(),"
    },
    {
        "line": 157,
        "fullcodeline": "/*cx=*/input_c_data.opaque(), /*wDesc=*/rnn_desc.params_handle(),"
    },
    {
        "line": 158,
        "fullcodeline": "/*w=*/params.opaque(), /*yDesc=*/output_desc.handles(),"
    },
    {
        "line": 159,
        "fullcodeline": "/*y=*/output_data->opaque(), /*hyDesc=*/output_h_desc.handle(),"
    },
    {
        "line": 160,
        "fullcodeline": "/*hy=*/output_h_data->opaque(), /*cyDesc=*/output_c_desc.handle(),"
    },
    {
        "line": 161,
        "fullcodeline": "/*cy=*/output_c_data->opaque(), /*workspace=*/workspace.opaque(),"
    },
    {
        "line": 162,
        "fullcodeline": "/*workSpaceSizeInBytes=*/workspace.size()));"
    },
    {
        "line": 167,
        "fullcodeline": "/*handle=*/cudnn.handle(), /*rnnDesc=*/rnn_desc.handle(),"
    },
    {
        "line": 168,
        "fullcodeline": "/*xDesc=*/input_desc.data_handle(), /*x=*/input_data.opaque(),"
    },
    {
        "line": 169,
        "fullcodeline": "/*hxDesc=*/input_h_desc.handle(), /*hx=*/input_h_data.opaque(),"
    },
    {
        "line": 170,
        "fullcodeline": "/*cxDesc=*/input_c_desc.handle(), /*cx=*/input_c_data.opaque(),"
    },
    {
        "line": 171,
        "fullcodeline": "/*wDesc=*/rnn_desc.params_handle(), /*w=*/params.opaque(),"
    },
    {
        "line": 172,
        "fullcodeline": "/*yDesc=*/output_desc.data_handle(),"
    },
    {
        "line": 173,
        "fullcodeline": "/*y=*/output_data->opaque(),"
    },
    {
        "line": 174,
        "fullcodeline": "/*hyDesc=*/output_h_desc.handle(), /*hy=*/output_h_data->opaque(),"
    },
    {
        "line": 175,
        "fullcodeline": "/*cyDesc=*/output_c_desc.handle(), /*cy=*/output_c_data->opaque(),"
    },
    {
        "line": 178,
        "fullcodeline": "/*workspace=*/workspace.opaque(),"
    },
    {
        "line": 179,
        "fullcodeline": "/*workSpaceSizeInBytes=*/workspace.size(),"
    },
    {
        "line": 180,
        "fullcodeline": "/*reserveSpace=*/reserve_space.opaque(),"
    },
    {
        "line": 181,
        "fullcodeline": "/*reserveSpaceSizeInBytes=*/reserve_space.size()));"
    },
    {
        "line": 184,
        "fullcodeline": "/*handle=*/cudnn.handle(), /*rnnDesc=*/rnn_desc.handle(),"
    },
    {
        "line": 186,
        "fullcodeline": "/*xDesc=*/input_desc.handles(),"
    },
    {
        "line": 187,
        "fullcodeline": "/*x=*/input_data.opaque(), /*hxDesc=*/input_h_desc.handle(),"
    },
    {
        "line": 188,
        "fullcodeline": "/*hx=*/input_h_data.opaque(), /*cxDesc=*/input_c_desc.handle(),"
    },
    {
        "line": 189,
        "fullcodeline": "/*cx=*/input_c_data.opaque(), /*wDesc=*/rnn_desc.params_handle(),"
    },
    {
        "line": 190,
        "fullcodeline": "/*w=*/params.opaque(), /*yDesc=*/output_desc.handles(),"
    },
    {
        "line": 191,
        "fullcodeline": "/*y=*/output_data->opaque(), /*hyDesc=*/output_h_desc.handle(),"
    },
    {
        "line": 192,
        "fullcodeline": "/*hy=*/output_h_data->opaque(), /*cyDesc=*/output_c_desc.handle(),"
    },
    {
        "line": 193,
        "fullcodeline": "/*cy=*/output_c_data->opaque(), /*workspace=*/workspace.opaque(),"
    },
    {
        "line": 194,
        "fullcodeline": "/*workSpaceSizeInBytes=*/workspace.size(),"
    },
    {
        "line": 195,
        "fullcodeline": "/*reserveSpace=*/reserve_space.opaque(),"
    },
    {
        "line": 196,
        "fullcodeline": "/*reserveSpaceSizeInBytes=*/reserve_space.size()));"
    }
]