[
    {
        "line": 15,
        "fullcodeline": "const bool is_unsupported_x32 ="
    },
    {
        "line": 20,
        "fullcodeline": "const bool is_pre_frontend_cudnn = CUDNN_VERSION < 8100;"
    },
    {
        "line": 22,
        "fullcodeline": "const bool actually_use_cudnn_frontend ="
    },
    {
        "line": 16,
        "fullcodeline": "input_descriptor.layout() == dnn::kBatchDepthYX32;"
    },
    {
        "line": 23,
        "fullcodeline": "use_cudnn_frontend && !is_pre_frontend_cudnn && !is_unsupported_x32;"
    },
    {
        "line": 25,
        "fullcodeline": "if (use_cudnn_frontend && !actually_use_cudnn_frontend) {"
    },
    {
        "line": 40,
        "fullcodeline": "if (!actually_use_cudnn_frontend) {"
    },
    {
        "line": 102,
        "fullcodeline": "return tsl::errors::Unimplemented("
    },
    {
        "line": 30,
        "fullcodeline": "LOG(INFO) << \"Disabling cuDNN frontend for the following convolution:\\n\""
    },
    {
        "line": 41,
        "fullcodeline": "auto cuda_compute_capability = stream->GetCudaComputeCapability();"
    },
    {
        "line": 42,
        "fullcodeline": "std::vector<dnn::AlgorithmDesc> algorithms;"
    },
    {
        "line": 43,
        "fullcodeline": "bool got_algos = false;"
    },
    {
        "line": 35,
        "fullcodeline": "<< (is_unsupported_x32"
    },
    {
        "line": 61,
        "fullcodeline": "if (!got_algos) {"
    },
    {
        "line": 86,
        "fullcodeline": "return ::tsl::OkStatus();"
    },
    {
        "line": 49,
        "fullcodeline": "got_algos = GetConvolveAlgorithms(cuda_compute_capability, input_type,"
    },
    {
        "line": 53,
        "fullcodeline": "got_algos = GetConvolveBackwardFilterAlgorithms("
    },
    {
        "line": 57,
        "fullcodeline": "got_algos = GetConvolveBackwardDataAlgorithms(cuda_compute_capability,"
    },
    {
        "line": 68,
        "fullcodeline": "auto runner_or = ConvolveRunnerFromDesc("
    },
    {
        "line": 83,
        "fullcodeline": "out_exec_plans->push_back(std::move(runner_or).value());"
    },
    {
        "line": 46,
        "fullcodeline": "return tsl::errors::Internal(absl::StrFormat("
    },
    {
        "line": 62,
        "fullcodeline": "return tsl::Status("
    },
    {
        "line": 71,
        "fullcodeline": "if (!runner_or.ok()) {"
    },
    {
        "line": 33,
        "fullcodeline": "<< \"  \" << convolution_descriptor.ToString() << \"\\n\""
    },
    {
        "line": 64,
        "fullcodeline": "absl::StrFormat(\"Listing algorithms failed for kind %d\", kind));"
    },
    {
        "line": 32,
        "fullcodeline": "<< \"  filter: \" << filter_descriptor.ToString() << \"\\n\""
    },
    {
        "line": 31,
        "fullcodeline": "<< \"  input: \" << input_descriptor.ToString() << \"\\n\""
    }
]