[
    {
        "line": 2,
        "fullcodeline": "VLOG(1) << \"Retrieving mesh state\";"
    },
    {
        "line": 4,
        "fullcodeline": "ResourceMgr* rm = GetTPUConfigResourceMgr();"
    },
    {
        "line": 7,
        "fullcodeline": "TF_RETURN_IF_ERROR(rm->Lookup(rm->default_container(),"
    },
    {
        "line": 10,
        "fullcodeline": "core::ScopedUnref mesh_state_unref(mesh_state);"
    },
    {
        "line": 12,
        "fullcodeline": "std::vector<TensorShape> dynamic_shapes;"
    },
    {
        "line": 13,
        "fullcodeline": "TF_RETURN_IF_ERROR(GetDynamicShapes(ctx, &dynamic_shapes));"
    },
    {
        "line": 23,
        "fullcodeline": "ResourceMgr* resource_mgr = ctx->resource_manager();"
    },
    {
        "line": 27,
        "fullcodeline": "uint64_t session_id = reinterpret_cast<uint64_t>(resource_mgr);"
    },
    {
        "line": 28,
        "fullcodeline": "const TpuCompilationCacheKey key = CreateCompilationCacheKey("
    },
    {
        "line": 35,
        "fullcodeline": "TF_RETURN_IF_ERROR(rm->Lookup<TpuCompilationCacheInterface>("
    },
    {
        "line": 37,
        "fullcodeline": "core::ScopedUnref cache_unref(cache);"
    },
    {
        "line": 61,
        "fullcodeline": "core::ScopedUnref ref_holder_unref(ref_holder);"
    },
    {
        "line": 64,
        "fullcodeline": "std::vector<std::string> proto_key;"
    },
    {
        "line": 65,
        "fullcodeline": "std::vector<std::string> sharding_key;"
    },
    {
        "line": 68,
        "fullcodeline": "Status status = cache->CompileIfKeyAbsent("
    },
    {
        "line": 135,
        "fullcodeline": "int64_t num_cores_with_compiled_programs = proto_key.size();"
    },
    {
        "line": 165,
        "fullcodeline": "std::string rendezvous_key_base = strings::StrCat("
    },
    {
        "line": 18,
        "fullcodeline": "if (!use_mlir_) {"
    },
    {
        "line": 50,
        "fullcodeline": "if (ctx->step_container() == nullptr) {"
    },
    {
        "line": 55,
        "fullcodeline": "ctx->step_container()->LookupOrCreate<CompilationRefHolder>("
    },
    {
        "line": 192,
        "fullcodeline": "if (status.ok()) {"
    },
    {
        "line": 19,
        "fullcodeline": "TF_RETURN_IF_ERROR("
    },
    {
        "line": 29,
        "fullcodeline": "function_.name(), metadata_.function_library_fingerprint(),"
    },
    {
        "line": 69,
        "fullcodeline": "key, ctx->session_metadata(), ref_holder, &uid, &proto_key, &sharding_key,"
    },
    {
        "line": 131,
        "fullcodeline": "core::ScopedUnref unloader_unref(unloader);"
    },
    {
        "line": 136,
        "fullcodeline": "if (proto_key.size() == 1) {"
    },
    {
        "line": 138,
        "fullcodeline": "num_cores_with_compiled_programs = metadata_.num_cores_per_replica();"
    },
    {
        "line": 144,
        "fullcodeline": "if (status.ok() &&"
    },
    {
        "line": 145,
        "fullcodeline": "num_cores_with_compiled_programs +"
    },
    {
        "line": 148,
        "fullcodeline": "status = errors::Internal("
    },
    {
        "line": 166,
        "fullcodeline": "\"host_compute_rendezvous:\", ctx->op_kernel().name(), \":\","
    },
    {
        "line": 170,
        "fullcodeline": "if (!status.GetPayload(TpuCompileInterface::kTpuCompileErrorPayloadKey)"
    },
    {
        "line": 172,
        "fullcodeline": "Tensor output(DT_STRING, TensorShape({}));"
    },
    {
        "line": 174,
        "fullcodeline": "proto.set_status_code(status.code());"
    },
    {
        "line": 186,
        "fullcodeline": "SerializeToTString(proto, &output.scalar<tstring>()());"
    },
    {
        "line": 187,
        "fullcodeline": "ctx->set_output(0, output);"
    },
    {
        "line": 188,
        "fullcodeline": "status.SetPayload(TpuCompileInterface::kTpuCompileErrorPayloadKey,"
    },
    {
        "line": 20,
        "fullcodeline": "ctx->input_list(\"guaranteed_constants\", &guaranteed_constants));"
    },
    {
        "line": 36,
        "fullcodeline": "rm->default_container(), kCompilationCacheResourceName, &cache));"
    },
    {
        "line": 51,
        "fullcodeline": "return errors::FailedPrecondition("
    },
    {
        "line": 56,
        "fullcodeline": "ctx->resource_manager(), \"ref_holder\", &ref_holder,"
    },
    {
        "line": 122,
        "fullcodeline": "ctx->resource_manager()"
    },
    {
        "line": 147,
        "fullcodeline": "ctx->num_outputs() - 1) {"
    },
    {
        "line": 167,
        "fullcodeline": "ctx->frame_iter().frame_id, \":\", ctx->frame_iter().iter_id, \":\");"
    },
    {
        "line": 189,
        "fullcodeline": "output.scalar<tstring>()());"
    },
    {
        "line": 193,
        "fullcodeline": "for (int i = 0; i < num_cores_with_compiled_programs; ++i) {"
    },
    {
        "line": 225,
        "fullcodeline": "VLOG(1) << \"Cloud TPU: Compilation succeeded\";"
    },
    {
        "line": 123,
        "fullcodeline": "->LookupOrCreate<TpuCompilationCacheEntryUnloader>("
    },
    {
        "line": 139,
        "fullcodeline": "if (may_modify_variables.size() == 1) {"
    },
    {
        "line": 140,
        "fullcodeline": "may_modify_variables.resize(metadata_.num_cores_per_replica(),"
    },
    {
        "line": 146,
        "fullcodeline": "(may_modify_variables.size() * static_cast<int>(!use_mlir_)) !="
    },
    {
        "line": 151,
        "fullcodeline": "may_modify_variables.size() * static_cast<int>(!use_mlir_),"
    },
    {
        "line": 153,
        "fullcodeline": "ctx->num_outputs(), \")\");"
    },
    {
        "line": 175,
        "fullcodeline": "if (!status.ok()) {"
    },
    {
        "line": 176,
        "fullcodeline": "proto.set_status_error_message(TruncateMessage("
    },
    {
        "line": 209,
        "fullcodeline": "ctx->set_output(i + 1, output);"
    },
    {
        "line": 215,
        "fullcodeline": "bool may_modify = false;"
    },
    {
        "line": 228,
        "fullcodeline": "for (int i = 0; i < num_computations_; ++i) {"
    },
    {
        "line": 124,
        "fullcodeline": "ctx->resource_manager()->default_container(),"
    },
    {
        "line": 194,
        "fullcodeline": "Tensor output(DT_STRING, TensorShape({3}));"
    },
    {
        "line": 201,
        "fullcodeline": "if (sharding_key.empty()) {"
    },
    {
        "line": 219,
        "fullcodeline": "for (int i = 0; i < may_modify_variables.size(); ++i) {"
    },
    {
        "line": 233,
        "fullcodeline": "ctx->set_output(i + 1, output);"
    },
    {
        "line": 177,
        "fullcodeline": "absl::StrCat(\"Compilation failure: \", status.error_message()), 128));"
    },
    {
        "line": 195,
        "fullcodeline": "if (proto_key.size() == 1) {"
    },
    {
        "line": 200,
        "fullcodeline": "output.vec<tstring>()(1) = rendezvous_key_base;"
    },
    {
        "line": 217,
        "fullcodeline": "may_modify = may_modify || m;"
    },
    {
        "line": 220,
        "fullcodeline": "Tensor output(DT_BOOL, TensorShape({}));"
    },
    {
        "line": 222,
        "fullcodeline": "ctx->set_output(i + num_cores_with_compiled_programs + 1, output);"
    },
    {
        "line": 229,
        "fullcodeline": "Tensor output(DT_STRING, TensorShape({3}));"
    },
    {
        "line": 237,
        "fullcodeline": "for (int i = 0; i < num_computations_; ++i) {"
    },
    {
        "line": 182,
        "fullcodeline": "xla::HloProto* hlo_proto = proto.add_hlo_protos();"
    },
    {
        "line": 230,
        "fullcodeline": "output.vec<tstring>()(0) = \"<<NO PROGRAM AS COMPILATION FAILED>>\";"
    },
    {
        "line": 231,
        "fullcodeline": "output.vec<tstring>()(1) = \"<<NO RENDEZVOUS KEY AS COMPILATION FAILED>>\";"
    },
    {
        "line": 232,
        "fullcodeline": "output.vec<tstring>()(2) = \"<<NO SHARDing KEY AS COMPILATION FAILED>>\";"
    },
    {
        "line": 196,
        "fullcodeline": "output.vec<tstring>()(0) = proto_key[0];"
    },
    {
        "line": 202,
        "fullcodeline": "output.vec<tstring>()(2) = \"\";"
    },
    {
        "line": 221,
        "fullcodeline": "output.scalar<bool>()() = may_modify;"
    },
    {
        "line": 198,
        "fullcodeline": "output.vec<tstring>()(0) = proto_key[i];"
    },
    {
        "line": 203,
        "fullcodeline": "} else if (sharding_key.size() == 1) {"
    },
    {
        "line": 204,
        "fullcodeline": "output.vec<tstring>()(2) = sharding_key[0];"
    },
    {
        "line": 206,
        "fullcodeline": "TF_RET_CHECK(sharding_key.size() == num_cores_with_compiled_programs);"
    },
    {
        "line": 207,
        "fullcodeline": "output.vec<tstring>()(2) = sharding_key[i];"
    }
]