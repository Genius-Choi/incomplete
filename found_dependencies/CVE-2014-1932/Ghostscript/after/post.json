[
    {
        "line": 9,
        "fullcodeline": "scale = int(scale) or 1"
    },
    {
        "line": 10,
        "fullcodeline": "orig_size = size"
    },
    {
        "line": 11,
        "fullcodeline": "orig_bbox = bbox"
    },
    {
        "line": 12,
        "fullcodeline": "size = (size[0] * scale, size[1] * scale)"
    },
    {
        "line": 13,
        "fullcodeline": "bbox = [bbox[0], bbox[1], bbox[2] * scale, bbox[3] * scale]"
    },
    {
        "line": 19,
        "fullcodeline": "os.close(out_fd)"
    },
    {
        "line": 22,
        "fullcodeline": "command = [\"gs\","
    },
    {
        "line": 5,
        "fullcodeline": "decoder, tile, offset, data = tile[0]"
    },
    {
        "line": 6,
        "fullcodeline": "length, bbox = data"
    },
    {
        "line": 16,
        "fullcodeline": "import tempfile, os, subprocess"
    },
    {
        "line": 18,
        "fullcodeline": "out_fd, file = tempfile.mkstemp()"
    },
    {
        "line": 31,
        "fullcodeline": "if gs_windows_binary is not None:"
    },
    {
        "line": 24,
        "fullcodeline": "\"-g%dx%d\" % size,        # set output geometry (pixels)"
    },
    {
        "line": 25,
        "fullcodeline": "\"-r%d\" % (72*scale),     # set input DPI (dots per inch)"
    },
    {
        "line": 28,
        "fullcodeline": "\"-sOutputFile=%s\" % file,# output file"
    },
    {
        "line": 34,
        "fullcodeline": "command[0] = gs_windows_binary"
    },
    {
        "line": 38,
        "fullcodeline": "gs = subprocess.Popen(command, stdin=subprocess.PIPE, stdout=subprocess.PIPE)"
    },
    {
        "line": 42,
        "fullcodeline": "fp.seek(offset)"
    },
    {
        "line": 50,
        "fullcodeline": "status = gs.wait()"
    },
    {
        "line": 53,
        "fullcodeline": "im = Image.core.open_ppm(file)"
    },
    {
        "line": 32,
        "fullcodeline": "if gs_windows_binary is False:"
    },
    {
        "line": 40,
        "fullcodeline": "if bbox[0] != 0 or bbox[1] != 0:"
    },
    {
        "line": 43,
        "fullcodeline": "while length > 0:"
    },
    {
        "line": 49,
        "fullcodeline": "gs.stdin.close()"
    },
    {
        "line": 33,
        "fullcodeline": "raise WindowsError('Unable to locate Ghostscript on paths')"
    },
    {
        "line": 44,
        "fullcodeline": "s = fp.read(8192)"
    },
    {
        "line": 47,
        "fullcodeline": "length = length - len(s)"
    },
    {
        "line": 52,
        "fullcodeline": "raise IOError(\"gs failed (status %d)\" % status)"
    },
    {
        "line": 41,
        "fullcodeline": "gs.stdin.write((\"%d %d translate\\n\" % (-bbox[0], -bbox[1])).encode('ascii'))"
    },
    {
        "line": 45,
        "fullcodeline": "if not s:"
    },
    {
        "line": 48,
        "fullcodeline": "gs.stdin.write(s)"
    },
    {
        "line": 55,
        "fullcodeline": "try: os.unlink(file)"
    },
    {
        "line": 56,
        "fullcodeline": "except: pass"
    }
]