[
    {
        "line": 2,
        "fullcodeline": "if @partial_part_left > 0"
    },
    {
        "line": 31,
        "fullcodeline": "while !io.eof?"
    },
    {
        "line": 24,
        "fullcodeline": "if @prev_chunk.empty?"
    },
    {
        "line": 25,
        "fullcodeline": "io = StringIO.new(chunk)"
    },
    {
        "line": 27,
        "fullcodeline": "io = StringIO.new(@prev_chunk+chunk)"
    },
    {
        "line": 28,
        "fullcodeline": "@prev_chunk = \"\""
    },
    {
        "line": 32,
        "fullcodeline": "line = io.gets"
    },
    {
        "line": 3,
        "fullcodeline": "if @partial_part_left <= chunk.size"
    },
    {
        "line": 33,
        "fullcodeline": "if line.end_with?(\"\\r\\n\")"
    },
    {
        "line": 7,
        "fullcodeline": "chunk = chunk[@partial_part_left..-1]"
    },
    {
        "line": 8,
        "fullcodeline": "@partial_part_left = 0"
    },
    {
        "line": 19,
        "fullcodeline": "@partial_part_left -= chunk.size"
    },
    {
        "line": 40,
        "fullcodeline": "len = chunk_hex.to_i(16)"
    },
    {
        "line": 58,
        "fullcodeline": "len += 2"
    },
    {
        "line": 60,
        "fullcodeline": "part = io.read(len)"
    },
    {
        "line": 67,
        "fullcodeline": "got = part.size"
    },
    {
        "line": 85,
        "fullcodeline": "@prev_chunk = line"
    },
    {
        "line": 4,
        "fullcodeline": "if @partial_part_left > 2"
    },
    {
        "line": 10,
        "fullcodeline": "if @partial_part_left > 2"
    },
    {
        "line": 37,
        "fullcodeline": "if CHUNK_SIZE_INVALID.match? chunk_hex"
    },
    {
        "line": 41,
        "fullcodeline": "if len == 0"
    },
    {
        "line": 62,
        "fullcodeline": "unless part"
    },
    {
        "line": 5,
        "fullcodeline": "write_chunk(chunk[0..(@partial_part_left-3)]) # skip the \\r\\n"
    },
    {
        "line": 42,
        "fullcodeline": "@in_last_chunk = true"
    },
    {
        "line": 44,
        "fullcodeline": "rest = io.read"
    },
    {
        "line": 63,
        "fullcodeline": "@partial_part_left = len"
    },
    {
        "line": 70,
        "fullcodeline": "when got == len"
    },
    {
        "line": 11,
        "fullcodeline": "if @partial_part_left == chunk.size + 1"
    },
    {
        "line": 43,
        "fullcodeline": "@body.rewind"
    },
    {
        "line": 46,
        "fullcodeline": "if rest.bytesize < last_crlf_size"
    },
    {
        "line": 13,
        "fullcodeline": "write_chunk(chunk[0..(@partial_part_left-3)])"
    },
    {
        "line": 16,
        "fullcodeline": "write_chunk(chunk)"
    },
    {
        "line": 47,
        "fullcodeline": "@buffer = nil"
    },
    {
        "line": 48,
        "fullcodeline": "@partial_part_left = last_crlf_size - rest.bytesize"
    },
    {
        "line": 51,
        "fullcodeline": "@buffer = rest[last_crlf_size..-1]"
    },
    {
        "line": 72,
        "fullcodeline": "if part.end_with? CHUNK_VALID_ENDING"
    },
    {
        "line": 77,
        "fullcodeline": "when got <= len - 2"
    },
    {
        "line": 73,
        "fullcodeline": "write_chunk(part[0..-3]) # to skip the ending \\r\\n"
    },
    {
        "line": 78,
        "fullcodeline": "write_chunk(part)"
    },
    {
        "line": 79,
        "fullcodeline": "@partial_part_left = len - part.size"
    },
    {
        "line": 52,
        "fullcodeline": "@buffer = nil if @buffer.empty?"
    },
    {
        "line": 80,
        "fullcodeline": "when got == len - 1 # edge where we get just \\r but not \\n"
    },
    {
        "line": 81,
        "fullcodeline": "write_chunk(part[0..-2])"
    },
    {
        "line": 82,
        "fullcodeline": "@partial_part_left = len - part.size"
    }
]