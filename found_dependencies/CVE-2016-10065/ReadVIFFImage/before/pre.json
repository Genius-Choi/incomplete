[
    {
        "line": 120,
        "fullcodeline": "assert(image_info != (const ImageInfo *) NULL);"
    },
    {
        "line": 121,
        "fullcodeline": "assert(image_info->signature == MagickCoreSignature);"
    },
    {
        "line": 125,
        "fullcodeline": "assert(exception != (ExceptionInfo *) NULL);"
    },
    {
        "line": 126,
        "fullcodeline": "assert(exception->signature == MagickCoreSignature);"
    },
    {
        "line": 127,
        "fullcodeline": "image=AcquireImage(image_info,exception);"
    },
    {
        "line": 128,
        "fullcodeline": "status=OpenBlob(image_info,image,ReadBinaryBlobMode,exception);"
    },
    {
        "line": 137,
        "fullcodeline": "count=ReadBlob(image,1,&viff_info.identifier);"
    },
    {
        "line": 122,
        "fullcodeline": "if (image_info->debug != MagickFalse)"
    },
    {
        "line": 129,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 619,
        "fullcodeline": "} while ((count != 0) && (viff_info.identifier == 0xab));"
    },
    {
        "line": 620,
        "fullcodeline": "(void) CloseBlob(image);"
    },
    {
        "line": 621,
        "fullcodeline": "return(GetFirstImageInList(image));"
    },
    {
        "line": 123,
        "fullcodeline": "(void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\","
    },
    {
        "line": 131,
        "fullcodeline": "image=DestroyImageList(image);"
    },
    {
        "line": 155,
        "fullcodeline": "viff_info.comment[511]='\\0';"
    },
    {
        "line": 163,
        "fullcodeline": "viff_info.rows=ReadBlobLong(image);"
    },
    {
        "line": 164,
        "fullcodeline": "viff_info.columns=ReadBlobLong(image);"
    },
    {
        "line": 168,
        "fullcodeline": "viff_info.x_bits_per_pixel=(float) ReadBlobLong(image);"
    },
    {
        "line": 170,
        "fullcodeline": "viff_info.location_type=ReadBlobLong(image);"
    },
    {
        "line": 172,
        "fullcodeline": "viff_info.number_of_images=ReadBlobLong(image);"
    },
    {
        "line": 173,
        "fullcodeline": "viff_info.number_data_bands=ReadBlobLong(image);"
    },
    {
        "line": 174,
        "fullcodeline": "viff_info.data_storage_type=ReadBlobLong(image);"
    },
    {
        "line": 175,
        "fullcodeline": "viff_info.data_encode_scheme=ReadBlobLong(image);"
    },
    {
        "line": 176,
        "fullcodeline": "viff_info.map_scheme=ReadBlobLong(image);"
    },
    {
        "line": 177,
        "fullcodeline": "viff_info.map_storage_type=ReadBlobLong(image);"
    },
    {
        "line": 178,
        "fullcodeline": "viff_info.map_rows=ReadBlobLong(image);"
    },
    {
        "line": 179,
        "fullcodeline": "viff_info.map_columns=ReadBlobLong(image);"
    },
    {
        "line": 183,
        "fullcodeline": "viff_info.color_space_model=ReadBlobLong(image);"
    },
    {
        "line": 188,
        "fullcodeline": "image->columns=viff_info.rows;"
    },
    {
        "line": 189,
        "fullcodeline": "image->rows=viff_info.columns;"
    },
    {
        "line": 190,
        "fullcodeline": "image->depth=viff_info.x_bits_per_pixel <= 8 ? 8UL :"
    },
    {
        "line": 195,
        "fullcodeline": "number_pixels=(MagickSizeType) viff_info.columns*viff_info.rows;"
    },
    {
        "line": 339,
        "fullcodeline": "image->alpha_trait=viff_info.number_data_bands == 4 ? BlendPixelTrait :"
    },
    {
        "line": 341,
        "fullcodeline": "image->storage_class=(viff_info.number_data_bands < 3 ? PseudoClass :"
    },
    {
        "line": 343,
        "fullcodeline": "image->columns=viff_info.rows;"
    },
    {
        "line": 344,
        "fullcodeline": "image->rows=viff_info.columns;"
    },
    {
        "line": 348,
        "fullcodeline": "status=SetImageExtent(image,image->columns,image->rows,exception);"
    },
    {
        "line": 366,
        "fullcodeline": "pixels=(unsigned char *) AcquireQuantumMemory(MagickMax(number_pixels,"
    },
    {
        "line": 371,
        "fullcodeline": "lsb_first=1;"
    },
    {
        "line": 390,
        "fullcodeline": "min_value=0.0;"
    },
    {
        "line": 391,
        "fullcodeline": "scale_factor=1.0;"
    },
    {
        "line": 441,
        "fullcodeline": "p=(unsigned char *) pixels;"
    },
    {
        "line": 467,
        "fullcodeline": "p=(unsigned char *) pixels;"
    },
    {
        "line": 601,
        "fullcodeline": "count=ReadBlob(image,1,&viff_info.identifier);"
    },
    {
        "line": 132,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 148,
        "fullcodeline": "(void) ReadBlob(image,sizeof(viff_info.file_type),&viff_info.file_type);"
    },
    {
        "line": 149,
        "fullcodeline": "(void) ReadBlob(image,sizeof(viff_info.release),&viff_info.release);"
    },
    {
        "line": 150,
        "fullcodeline": "(void) ReadBlob(image,sizeof(viff_info.version),&viff_info.version);"
    },
    {
        "line": 151,
        "fullcodeline": "(void) ReadBlob(image,sizeof(viff_info.machine_dependency),"
    },
    {
        "line": 153,
        "fullcodeline": "(void) ReadBlob(image,sizeof(viff_info.reserve),viff_info.reserve);"
    },
    {
        "line": 154,
        "fullcodeline": "count=ReadBlob(image,512,(unsigned char *) viff_info.comment);"
    },
    {
        "line": 165,
        "fullcodeline": "viff_info.subrows=ReadBlobLong(image);"
    },
    {
        "line": 171,
        "fullcodeline": "viff_info.location_dimension=ReadBlobLong(image);"
    },
    {
        "line": 180,
        "fullcodeline": "viff_info.map_subrows=ReadBlobLong(image);"
    },
    {
        "line": 181,
        "fullcodeline": "viff_info.map_enable=ReadBlobLong(image);"
    },
    {
        "line": 182,
        "fullcodeline": "viff_info.maps_per_cycle=ReadBlobLong(image);"
    },
    {
        "line": 184,
        "fullcodeline": "for (i=0; i < 420; i++)"
    },
    {
        "line": 186,
        "fullcodeline": "if (EOFBlob(image) != MagickFalse)"
    },
    {
        "line": 196,
        "fullcodeline": "if (number_pixels != (size_t) number_pixels)"
    },
    {
        "line": 198,
        "fullcodeline": "if (number_pixels == 0)"
    },
    {
        "line": 226,
        "fullcodeline": "if (viff_info.map_rows == 0)"
    },
    {
        "line": 349,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 362,
        "fullcodeline": "if (viff_info.data_storage_type == VFF_TYP_BIT)"
    },
    {
        "line": 368,
        "fullcodeline": "if (pixels == (unsigned char *) NULL)"
    },
    {
        "line": 370,
        "fullcodeline": "count=ReadBlob(image,bytes_per_pixel*max_packets,pixels);"
    },
    {
        "line": 392,
        "fullcodeline": "if ((viff_info.data_storage_type != VFF_TYP_1_BYTE) &&"
    },
    {
        "line": 442,
        "fullcodeline": "for (i=0; i < (ssize_t) max_packets; i++)"
    },
    {
        "line": 587,
        "fullcodeline": "if (image->storage_class == PseudoClass)"
    },
    {
        "line": 589,
        "fullcodeline": "if (EOFBlob(image) != MagickFalse)"
    },
    {
        "line": 598,
        "fullcodeline": "if (image_info->number_scenes != 0)"
    },
    {
        "line": 602,
        "fullcodeline": "if ((count != 0) && (viff_info.identifier == 0xab))"
    },
    {
        "line": 143,
        "fullcodeline": "if ((count != 1) || ((unsigned char) viff_info.identifier != 0xab))"
    },
    {
        "line": 144,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"NotAVIFFImage\");"
    },
    {
        "line": 156,
        "fullcodeline": "if (strlen(viff_info.comment) > 4)"
    },
    {
        "line": 158,
        "fullcodeline": "if ((viff_info.machine_dependency == VFF_DEP_DECORDER) ||"
    },
    {
        "line": 159,
        "fullcodeline": "(viff_info.machine_dependency == VFF_DEP_NSORDER))"
    },
    {
        "line": 160,
        "fullcodeline": "image->endian=LSBEndian;"
    },
    {
        "line": 166,
        "fullcodeline": "viff_info.x_offset=(int) ReadBlobLong(image);"
    },
    {
        "line": 167,
        "fullcodeline": "viff_info.y_offset=(int) ReadBlobLong(image);"
    },
    {
        "line": 169,
        "fullcodeline": "viff_info.y_bits_per_pixel=(float) ReadBlobLong(image);"
    },
    {
        "line": 185,
        "fullcodeline": "(void) ReadBlobByte(image);"
    },
    {
        "line": 187,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"UnexpectedEndOfFile\");"
    },
    {
        "line": 197,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 199,
        "fullcodeline": "ThrowReaderException(CoderError,\"ImageColumnOrRowSizeIsNotSupported\");"
    },
    {
        "line": 200,
        "fullcodeline": "if ((viff_info.number_data_bands < 1) || (viff_info.number_data_bands > 4))"
    },
    {
        "line": 201,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 202,
        "fullcodeline": "if ((viff_info.data_storage_type != VFF_TYP_BIT) &&"
    },
    {
        "line": 207,
        "fullcodeline": "(viff_info.data_storage_type != VFF_TYP_DOUBLE))"
    },
    {
        "line": 208,
        "fullcodeline": "ThrowReaderException(CoderError,\"DataStorageTypeIsNotSupported\");"
    },
    {
        "line": 210,
        "fullcodeline": "ThrowReaderException(CoderError,\"DataEncodingSchemeIsNotSupported\");"
    },
    {
        "line": 211,
        "fullcodeline": "if ((viff_info.map_storage_type != VFF_MAPTYP_NONE) &&"
    },
    {
        "line": 216,
        "fullcodeline": "(viff_info.map_storage_type != VFF_MAPTYP_DOUBLE))"
    },
    {
        "line": 217,
        "fullcodeline": "ThrowReaderException(CoderError,\"MapStorageTypeIsNotSupported\");"
    },
    {
        "line": 218,
        "fullcodeline": "if ((viff_info.color_space_model != VFF_CM_NONE) &&"
    },
    {
        "line": 220,
        "fullcodeline": "(viff_info.color_space_model != VFF_CM_genericRGB))"
    },
    {
        "line": 221,
        "fullcodeline": "ThrowReaderException(CoderError,\"ColorspaceModelIsNotSupported\");"
    },
    {
        "line": 223,
        "fullcodeline": "ThrowReaderException(CoderError,\"LocationTypeIsNotSupported\");"
    },
    {
        "line": 225,
        "fullcodeline": "ThrowReaderException(CoderError,\"NumberOfImagesIsNotSupported\");"
    },
    {
        "line": 227,
        "fullcodeline": "viff_info.map_scheme=VFF_MS_NONE;"
    },
    {
        "line": 334,
        "fullcodeline": "ThrowReaderException(CoderError,\"ColormapTypeNotSupported\");"
    },
    {
        "line": 345,
        "fullcodeline": "if ((image_info->ping != MagickFalse) && (image_info->number_scenes != 0))"
    },
    {
        "line": 356,
        "fullcodeline": "case VFF_TYP_2_BYTE: bytes_per_pixel=2; break;"
    },
    {
        "line": 357,
        "fullcodeline": "case VFF_TYP_4_BYTE: bytes_per_pixel=4; break;"
    },
    {
        "line": 358,
        "fullcodeline": "case VFF_TYP_FLOAT: bytes_per_pixel=4; break;"
    },
    {
        "line": 359,
        "fullcodeline": "case VFF_TYP_DOUBLE: bytes_per_pixel=8; break;"
    },
    {
        "line": 360,
        "fullcodeline": "default: bytes_per_pixel=1; break;"
    },
    {
        "line": 363,
        "fullcodeline": "max_packets=((image->columns+7UL) >> 3UL)*image->rows;"
    },
    {
        "line": 369,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 373,
        "fullcodeline": "((viff_info.machine_dependency != VFF_DEP_DECORDER) &&"
    },
    {
        "line": 393,
        "fullcodeline": "(viff_info.map_scheme == VFF_MS_NONE))"
    },
    {
        "line": 409,
        "fullcodeline": "max_value=value;"
    },
    {
        "line": 410,
        "fullcodeline": "min_value=value;"
    },
    {
        "line": 461,
        "fullcodeline": "*p=(unsigned char) ((Quantum) value);"
    },
    {
        "line": 586,
        "fullcodeline": "pixels=(unsigned char *) RelinquishMagickMemory(pixels);"
    },
    {
        "line": 591,
        "fullcodeline": "ThrowFileException(exception,CorruptImageError,\"UnexpectedEndOfFile\","
    },
    {
        "line": 607,
        "fullcodeline": "AcquireNextImage(image_info,image,exception);"
    },
    {
        "line": 613,
        "fullcodeline": "image=SyncNextImageInList(image);"
    },
    {
        "line": 614,
        "fullcodeline": "status=SetImageProgress(image,LoadImagesTag,TellBlob(image),"
    },
    {
        "line": 157,
        "fullcodeline": "(void) SetImageProperty(image,\"comment\",viff_info.comment,exception);"
    },
    {
        "line": 162,
        "fullcodeline": "image->endian=MSBEndian;"
    },
    {
        "line": 206,
        "fullcodeline": "(viff_info.data_storage_type != VFF_TYP_FLOAT) &&"
    },
    {
        "line": 215,
        "fullcodeline": "(viff_info.map_storage_type != VFF_MAPTYP_FLOAT) &&"
    },
    {
        "line": 219,
        "fullcodeline": "(viff_info.color_space_model != VFF_CM_ntscRGB) &&"
    },
    {
        "line": 268,
        "fullcodeline": "image->colors=viff_info.map_columns;"
    },
    {
        "line": 274,
        "fullcodeline": "viff_colormap=(unsigned char *) AcquireQuantumMemory(image->colors,"
    },
    {
        "line": 283,
        "fullcodeline": "lsb_first=1;"
    },
    {
        "line": 346,
        "fullcodeline": "if (image->scene >= (image_info->scene+image_info->number_scenes-1))"
    },
    {
        "line": 350,
        "fullcodeline": "return(DestroyImageList(image));"
    },
    {
        "line": 365,
        "fullcodeline": "max_packets=(size_t) (number_pixels*viff_info.number_data_bands);"
    },
    {
        "line": 367,
        "fullcodeline": "max_packets),bytes_per_pixel*sizeof(*pixels));"
    },
    {
        "line": 374,
        "fullcodeline": "(viff_info.machine_dependency != VFF_DEP_NSORDER)))"
    },
    {
        "line": 411,
        "fullcodeline": "for (i=0; i < (ssize_t) max_packets; i++)"
    },
    {
        "line": 452,
        "fullcodeline": "if (viff_info.map_scheme == VFF_MS_NONE)"
    },
    {
        "line": 473,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 588,
        "fullcodeline": "(void) SyncImage(image,exception);"
    },
    {
        "line": 599,
        "fullcodeline": "if (image->scene >= (image_info->scene+image_info->number_scenes-1))"
    },
    {
        "line": 616,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 205,
        "fullcodeline": "(viff_info.data_storage_type != VFF_TYP_4_BYTE) &&"
    },
    {
        "line": 214,
        "fullcodeline": "(viff_info.map_storage_type != VFF_MAPTYP_4_BYTE) &&"
    },
    {
        "line": 232,
        "fullcodeline": "if (viff_info.number_data_bands < 3)"
    },
    {
        "line": 269,
        "fullcodeline": "if (AcquireImageColormap(image,image->colors,exception) == MagickFalse)"
    },
    {
        "line": 271,
        "fullcodeline": "if (viff_info.map_rows >"
    },
    {
        "line": 276,
        "fullcodeline": "if (viff_colormap == (unsigned char *) NULL)"
    },
    {
        "line": 281,
        "fullcodeline": "count=ReadBlob(image,bytes_per_pixel*image->colors*viff_info.map_rows,"
    },
    {
        "line": 304,
        "fullcodeline": "for (i=0; i < (ssize_t) (viff_info.map_rows*image->colors); i++)"
    },
    {
        "line": 403,
        "fullcodeline": "case VFF_TYP_2_BYTE: value=1.0*((short *) pixels)[0]; break;"
    },
    {
        "line": 404,
        "fullcodeline": "case VFF_TYP_4_BYTE: value=1.0*((int *) pixels)[0]; break;"
    },
    {
        "line": 405,
        "fullcodeline": "case VFF_TYP_FLOAT: value=((float *) pixels)[0]; break;"
    },
    {
        "line": 406,
        "fullcodeline": "case VFF_TYP_DOUBLE: value=((double *) pixels)[0]; break;"
    },
    {
        "line": 407,
        "fullcodeline": "default: value=1.0*pixels[0]; break;"
    },
    {
        "line": 427,
        "fullcodeline": "if ((min_value == 0) && (max_value == 0))"
    },
    {
        "line": 428,
        "fullcodeline": "scale_factor=0;"
    },
    {
        "line": 446,
        "fullcodeline": "case VFF_TYP_2_BYTE: value=1.0*((short *) pixels)[i]; break;"
    },
    {
        "line": 447,
        "fullcodeline": "case VFF_TYP_4_BYTE: value=1.0*((int *) pixels)[i]; break;"
    },
    {
        "line": 448,
        "fullcodeline": "case VFF_TYP_FLOAT: value=((float *) pixels)[i]; break;"
    },
    {
        "line": 449,
        "fullcodeline": "case VFF_TYP_DOUBLE: value=((double *) pixels)[i]; break;"
    },
    {
        "line": 450,
        "fullcodeline": "default: value=1.0*pixels[i]; break;"
    },
    {
        "line": 454,
        "fullcodeline": "value=(value-min_value)*scale_factor;"
    },
    {
        "line": 475,
        "fullcodeline": "q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 518,
        "fullcodeline": "if (image->storage_class == PseudoClass)"
    },
    {
        "line": 608,
        "fullcodeline": "if (GetNextImageInList(image) == (Image *) NULL)"
    },
    {
        "line": 615,
        "fullcodeline": "GetBlobSize(image));"
    },
    {
        "line": 204,
        "fullcodeline": "(viff_info.data_storage_type != VFF_TYP_2_BYTE) &&"
    },
    {
        "line": 213,
        "fullcodeline": "(viff_info.map_storage_type != VFF_MAPTYP_2_BYTE) &&"
    },
    {
        "line": 244,
        "fullcodeline": "status=AcquireImageColormap(image,image->colors,exception);"
    },
    {
        "line": 261,
        "fullcodeline": "case VFF_MAPTYP_1_BYTE: bytes_per_pixel=1; break;"
    },
    {
        "line": 262,
        "fullcodeline": "case VFF_MAPTYP_2_BYTE: bytes_per_pixel=2; break;"
    },
    {
        "line": 263,
        "fullcodeline": "case VFF_MAPTYP_4_BYTE: bytes_per_pixel=4; break;"
    },
    {
        "line": 264,
        "fullcodeline": "case VFF_MAPTYP_FLOAT: bytes_per_pixel=4; break;"
    },
    {
        "line": 265,
        "fullcodeline": "case VFF_MAPTYP_DOUBLE: bytes_per_pixel=8; break;"
    },
    {
        "line": 266,
        "fullcodeline": "default: bytes_per_pixel=1; break;"
    },
    {
        "line": 270,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 272,
        "fullcodeline": "(viff_info.map_rows*bytes_per_pixel*sizeof(*viff_colormap)))"
    },
    {
        "line": 273,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 277,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 285,
        "fullcodeline": "((viff_info.machine_dependency != VFF_DEP_DECORDER) &&"
    },
    {
        "line": 330,
        "fullcodeline": "viff_colormap=(unsigned char *) RelinquishMagickMemory(viff_colormap);"
    },
    {
        "line": 379,
        "fullcodeline": "MSBOrderShort(pixels,bytes_per_pixel*max_packets);"
    },
    {
        "line": 385,
        "fullcodeline": "MSBOrderLong(pixels,bytes_per_pixel*max_packets);"
    },
    {
        "line": 421,
        "fullcodeline": "if (value > max_value)"
    },
    {
        "line": 455,
        "fullcodeline": "if (value > QuantumRange)"
    },
    {
        "line": 476,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 478,
        "fullcodeline": "for (x=0; x < (ssize_t) (image->columns-7); x+=8)"
    },
    {
        "line": 506,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 508,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 610,
        "fullcodeline": "image=DestroyImageList(image);"
    },
    {
        "line": 611,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 203,
        "fullcodeline": "(viff_info.data_storage_type != VFF_TYP_1_BYTE) &&"
    },
    {
        "line": 212,
        "fullcodeline": "(viff_info.map_storage_type != VFF_MAPTYP_1_BYTE) &&"
    },
    {
        "line": 237,
        "fullcodeline": "if (viff_info.data_storage_type == VFF_TYP_BIT)"
    },
    {
        "line": 245,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 275,
        "fullcodeline": "viff_info.map_rows*bytes_per_pixel*sizeof(*viff_colormap));"
    },
    {
        "line": 286,
        "fullcodeline": "(viff_info.machine_dependency != VFF_DEP_NSORDER)))"
    },
    {
        "line": 314,
        "fullcodeline": "if (i < (ssize_t) image->colors)"
    },
    {
        "line": 415,
        "fullcodeline": "case VFF_TYP_2_BYTE: value=1.0*((short *) pixels)[i]; break;"
    },
    {
        "line": 416,
        "fullcodeline": "case VFF_TYP_4_BYTE: value=1.0*((int *) pixels)[i]; break;"
    },
    {
        "line": 417,
        "fullcodeline": "case VFF_TYP_FLOAT: value=((float *) pixels)[i]; break;"
    },
    {
        "line": 418,
        "fullcodeline": "case VFF_TYP_DOUBLE: value=((double *) pixels)[i]; break;"
    },
    {
        "line": 419,
        "fullcodeline": "default: value=1.0*pixels[i]; break;"
    },
    {
        "line": 422,
        "fullcodeline": "max_value=value;"
    },
    {
        "line": 430,
        "fullcodeline": "if (min_value == max_value)"
    },
    {
        "line": 456,
        "fullcodeline": "value=QuantumRange;"
    },
    {
        "line": 490,
        "fullcodeline": "p++;"
    },
    {
        "line": 492,
        "fullcodeline": "if ((image->columns % 8) != 0)"
    },
    {
        "line": 504,
        "fullcodeline": "p++;"
    },
    {
        "line": 510,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 519,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 544,
        "fullcodeline": "number_pixels=(MagickSizeType) image->columns*image->rows;"
    },
    {
        "line": 238,
        "fullcodeline": "image->colors=2;"
    },
    {
        "line": 246,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 308,
        "fullcodeline": "case VFF_MAPTYP_2_BYTE: value=1.0*((short *) viff_colormap)[i]; break;"
    },
    {
        "line": 309,
        "fullcodeline": "case VFF_MAPTYP_4_BYTE: value=1.0*((int *) viff_colormap)[i]; break;"
    },
    {
        "line": 310,
        "fullcodeline": "case VFF_MAPTYP_FLOAT: value=((float *) viff_colormap)[i]; break;"
    },
    {
        "line": 311,
        "fullcodeline": "case VFF_MAPTYP_DOUBLE: value=((double *) viff_colormap)[i]; break;"
    },
    {
        "line": 312,
        "fullcodeline": "default: value=1.0*viff_colormap[i]; break;"
    },
    {
        "line": 432,
        "fullcodeline": "scale_factor=(double) QuantumRange/min_value;"
    },
    {
        "line": 433,
        "fullcodeline": "min_value=0;"
    },
    {
        "line": 480,
        "fullcodeline": "for (bit=0; bit < 8; bit++)"
    },
    {
        "line": 494,
        "fullcodeline": "for (bit=0; bit < (int) (image->columns % 8); bit++)"
    },
    {
        "line": 512,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 521,
        "fullcodeline": "q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 545,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 291,
        "fullcodeline": "MSBOrderShort(viff_colormap,(bytes_per_pixel*image->colors*"
    },
    {
        "line": 298,
        "fullcodeline": "MSBOrderLong(viff_colormap,(bytes_per_pixel*image->colors*"
    },
    {
        "line": 316,
        "fullcodeline": "image->colormap[i].red=ScaleCharToQuantum((unsigned char) value);"
    },
    {
        "line": 318,
        "fullcodeline": "ScaleCharToQuantum((unsigned char) value);"
    },
    {
        "line": 319,
        "fullcodeline": "image->colormap[i].blue=ScaleCharToQuantum((unsigned char) value);"
    },
    {
        "line": 424,
        "fullcodeline": "if (value < min_value)"
    },
    {
        "line": 436,
        "fullcodeline": "scale_factor=(double) QuantumRange/(max_value-min_value);"
    },
    {
        "line": 458,
        "fullcodeline": "if (value < 0)"
    },
    {
        "line": 482,
        "fullcodeline": "quantum=(size_t) ((*p) & (0x01 << bit) ? 0 : 1);"
    },
    {
        "line": 483,
        "fullcodeline": "SetPixelRed(image,quantum == 0 ? 0 : QuantumRange,q);"
    },
    {
        "line": 484,
        "fullcodeline": "SetPixelGreen(image,quantum == 0 ? 0 : QuantumRange,q);"
    },
    {
        "line": 485,
        "fullcodeline": "SetPixelBlue(image,quantum == 0 ? 0 : QuantumRange,q);"
    },
    {
        "line": 488,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 496,
        "fullcodeline": "quantum=(size_t) ((*p) & (0x01 << bit) ? 0 : 1);"
    },
    {
        "line": 497,
        "fullcodeline": "SetPixelRed(image,quantum == 0 ? 0 : QuantumRange,q);"
    },
    {
        "line": 498,
        "fullcodeline": "SetPixelGreen(image,quantum == 0 ? 0 : QuantumRange,q);"
    },
    {
        "line": 499,
        "fullcodeline": "SetPixelBlue(image,quantum == 0 ? 0 : QuantumRange,q);"
    },
    {
        "line": 502,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 522,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 524,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 529,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 531,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 547,
        "fullcodeline": "q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 240,
        "fullcodeline": "if (viff_info.data_storage_type == VFF_MAPTYP_1_BYTE)"
    },
    {
        "line": 322,
        "fullcodeline": "if (i < (ssize_t) (2*image->colors))"
    },
    {
        "line": 425,
        "fullcodeline": "min_value=value;"
    },
    {
        "line": 459,
        "fullcodeline": "value=0;"
    },
    {
        "line": 486,
        "fullcodeline": "if (image->storage_class == PseudoClass)"
    },
    {
        "line": 500,
        "fullcodeline": "if (image->storage_class == PseudoClass)"
    },
    {
        "line": 526,
        "fullcodeline": "SetPixelIndex(image,*p++,q);"
    },
    {
        "line": 527,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 533,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 548,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 550,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 575,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 577,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 241,
        "fullcodeline": "image->colors=256UL;"
    },
    {
        "line": 487,
        "fullcodeline": "SetPixelIndex(image,(Quantum) quantum,q);"
    },
    {
        "line": 501,
        "fullcodeline": "SetPixelIndex(image,(Quantum) quantum,q);"
    },
    {
        "line": 535,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 552,
        "fullcodeline": "SetPixelRed(image,ScaleCharToQuantum(*p),q);"
    },
    {
        "line": 553,
        "fullcodeline": "SetPixelGreen(image,ScaleCharToQuantum(*(p+number_pixels)),q);"
    },
    {
        "line": 554,
        "fullcodeline": "SetPixelBlue(image,ScaleCharToQuantum(*(p+2*number_pixels)),q);"
    },
    {
        "line": 570,
        "fullcodeline": "SetPixelAlpha(image,image->alpha_trait != UndefinedPixelTrait ?"
    },
    {
        "line": 572,
        "fullcodeline": "p++;"
    },
    {
        "line": 573,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 579,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 243,
        "fullcodeline": "image->colors=image->depth <= 8 ? 256UL : 65536UL;"
    },
    {
        "line": 324,
        "fullcodeline": "ScaleCharToQuantum((unsigned char) value);"
    },
    {
        "line": 555,
        "fullcodeline": "if (image->colors != 0)"
    },
    {
        "line": 581,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 326,
        "fullcodeline": "if (i < (ssize_t) (3*image->colors))"
    },
    {
        "line": 560,
        "fullcodeline": "index=(ssize_t) GetPixelRed(image,q);"
    },
    {
        "line": 561,
        "fullcodeline": "SetPixelRed(image,image->colormap["
    },
    {
        "line": 563,
        "fullcodeline": "index=(ssize_t) GetPixelGreen(image,q);"
    },
    {
        "line": 564,
        "fullcodeline": "SetPixelGreen(image,image->colormap["
    },
    {
        "line": 566,
        "fullcodeline": "index=(ssize_t) GetPixelBlue(image,q);"
    },
    {
        "line": 567,
        "fullcodeline": "SetPixelBlue(image,image->colormap["
    },
    {
        "line": 571,
        "fullcodeline": "ScaleCharToQuantum(*(p+number_pixels*3)) : OpaqueAlpha,q);"
    },
    {
        "line": 323,
        "fullcodeline": "image->colormap[i % image->colors].green="
    },
    {
        "line": 328,
        "fullcodeline": "ScaleCharToQuantum((unsigned char) value);"
    },
    {
        "line": 562,
        "fullcodeline": "ConstrainColormapIndex(image,index,exception)].red,q);"
    },
    {
        "line": 565,
        "fullcodeline": "ConstrainColormapIndex(image,index,exception)].green,q);"
    },
    {
        "line": 568,
        "fullcodeline": "ConstrainColormapIndex(image,index,exception)].blue,q);"
    },
    {
        "line": 327,
        "fullcodeline": "image->colormap[i % image->colors].blue="
    }
]