[
    {
        "line": 9,
        "fullcodeline": "struct net_device *upper_dev = netdev_master_upper_dev_get(dev);"
    },
    {
        "line": 11,
        "fullcodeline": "ASSERT_RTNL();"
    },
    {
        "line": 12,
        "fullcodeline": "nlh = nlmsg_put(skb, pid, seq, type, sizeof(*ifm), flags);"
    },
    {
        "line": 17,
        "fullcodeline": "ifm->ifi_family = AF_UNSPEC;"
    },
    {
        "line": 117,
        "fullcodeline": "list_for_each_entry(af_ops, &rtnl_af_ops, list) {"
    },
    {
        "line": 142,
        "fullcodeline": "nla_nest_end(skb, af_spec);"
    },
    {
        "line": 13,
        "fullcodeline": "if (nlh == NULL)"
    },
    {
        "line": 16,
        "fullcodeline": "ifm = nlmsg_data(nlh);"
    },
    {
        "line": 21,
        "fullcodeline": "ifm->ifi_flags = dev_get_flags(dev);"
    },
    {
        "line": 52,
        "fullcodeline": "if (rtnl_fill_link_ifmap(skb, dev))"
    },
    {
        "line": 61,
        "fullcodeline": "if (rtnl_phys_port_id_fill(skb, dev))"
    },
    {
        "line": 64,
        "fullcodeline": "if (rtnl_phys_port_name_fill(skb, dev))"
    },
    {
        "line": 67,
        "fullcodeline": "if (rtnl_phys_switch_id_fill(skb, dev))"
    },
    {
        "line": 70,
        "fullcodeline": "if (rtnl_fill_stats(skb, dev))"
    },
    {
        "line": 94,
        "fullcodeline": "if (rtnl_port_fill(skb, dev, ext_filter_mask))"
    },
    {
        "line": 97,
        "fullcodeline": "if (dev->rtnl_link_ops || rtnl_have_link_slave_info(dev)) {"
    },
    {
        "line": 102,
        "fullcodeline": "if (dev->rtnl_link_ops &&"
    },
    {
        "line": 149,
        "fullcodeline": "return -EMSGSIZE;"
    },
    {
        "line": 24,
        "fullcodeline": "if (nla_put_string(skb, IFLA_IFNAME, dev->name) ||"
    },
    {
        "line": 49,
        "fullcodeline": "nla_put_u8(skb, IFLA_PROTO_DOWN, dev->proto_down))"
    },
    {
        "line": 73,
        "fullcodeline": "if (dev->dev.parent && (ext_filter_mask & RTEXT_FILTER_VF) &&"
    },
    {
        "line": 74,
        "fullcodeline": "nla_put_u32(skb, IFLA_NUM_VF, dev_num_vf(dev->dev.parent)))"
    },
    {
        "line": 77,
        "fullcodeline": "if (dev->netdev_ops->ndo_get_vf_config && dev->dev.parent &&"
    },
    {
        "line": 78,
        "fullcodeline": "ext_filter_mask & RTEXT_FILTER_VF) {"
    },
    {
        "line": 81,
        "fullcodeline": "int num_vfs = dev_num_vf(dev->dev.parent);"
    },
    {
        "line": 83,
        "fullcodeline": "vfinfo = nla_nest_start(skb, IFLA_VFINFO_LIST);"
    },
    {
        "line": 91,
        "fullcodeline": "nla_nest_end(skb, vfinfo);"
    },
    {
        "line": 104,
        "fullcodeline": "struct net *link_net = dev->rtnl_link_ops->get_link_net(dev);"
    },
    {
        "line": 114,
        "fullcodeline": "if (!(af_spec = nla_nest_start(skb, IFLA_AF_SPEC)))"
    },
    {
        "line": 14,
        "fullcodeline": "return -EMSGSIZE;"
    },
    {
        "line": 47,
        "fullcodeline": "nla_put_u32(skb, IFLA_CARRIER_CHANGES,"
    },
    {
        "line": 84,
        "fullcodeline": "if (!vfinfo)"
    },
    {
        "line": 86,
        "fullcodeline": "for (i = 0; i < num_vfs; i++) {"
    },
    {
        "line": 125,
        "fullcodeline": "err = af_ops->fill_link_af(skb, dev, ext_filter_mask);"
    },
    {
        "line": 138,
        "fullcodeline": "nla_nest_end(skb, af);"
    },
    {
        "line": 45,
        "fullcodeline": "(dev->ifalias &&"
    },
    {
        "line": 48,
        "fullcodeline": "atomic_read(&dev->carrier_changes)) ||"
    },
    {
        "line": 56,
        "fullcodeline": "if (nla_put(skb, IFLA_ADDRESS, dev->addr_len, dev->dev_addr) ||"
    },
    {
        "line": 57,
        "fullcodeline": "nla_put(skb, IFLA_BROADCAST, dev->addr_len, dev->broadcast))"
    },
    {
        "line": 98,
        "fullcodeline": "if (rtnl_link_fill(skb, dev) < 0)"
    },
    {
        "line": 106,
        "fullcodeline": "if (!net_eq(dev_net(dev), link_net)) {"
    },
    {
        "line": 107,
        "fullcodeline": "int id = peernet2id_alloc(dev_net(dev), link_net);"
    },
    {
        "line": 133,
        "fullcodeline": "if (err == -ENODATA)"
    },
    {
        "line": 43,
        "fullcodeline": "(dev->qdisc &&"
    },
    {
        "line": 46,
        "fullcodeline": "nla_put_string(skb, IFLA_IFALIAS, dev->ifalias)) ||"
    },
    {
        "line": 87,
        "fullcodeline": "if (rtnl_fill_vfinfo(skb, dev, i, vfinfo))"
    },
    {
        "line": 109,
        "fullcodeline": "if (nla_put_s32(skb, IFLA_LINK_NETNSID, id))"
    },
    {
        "line": 122,
        "fullcodeline": "if (!(af = nla_nest_start(skb, af_ops->family)))"
    },
    {
        "line": 134,
        "fullcodeline": "nla_nest_cancel(skb, af);"
    },
    {
        "line": 42,
        "fullcodeline": "nla_put_u8(skb, IFLA_CARRIER, netif_carrier_ok(dev)) ||"
    },
    {
        "line": 44,
        "fullcodeline": "nla_put_string(skb, IFLA_QDISC, dev->qdisc->ops->id)) ||"
    },
    {
        "line": 40,
        "fullcodeline": "(upper_dev &&"
    },
    {
        "line": 38,
        "fullcodeline": "(dev->ifindex != dev_get_iflink(dev) &&"
    },
    {
        "line": 41,
        "fullcodeline": "nla_put_u32(skb, IFLA_MASTER, upper_dev->ifindex)) ||"
    },
    {
        "line": 34,
        "fullcodeline": "nla_put_u32(skb, IFLA_GSO_MAX_SIZE, dev->gso_max_size) ||"
    },
    {
        "line": 39,
        "fullcodeline": "nla_put_u32(skb, IFLA_LINK, dev_get_iflink(dev))) ||"
    },
    {
        "line": 33,
        "fullcodeline": "nla_put_u32(skb, IFLA_GSO_MAX_SEGS, dev->gso_max_segs) ||"
    },
    {
        "line": 32,
        "fullcodeline": "nla_put_u32(skb, IFLA_NUM_TX_QUEUES, dev->num_tx_queues) ||"
    },
    {
        "line": 31,
        "fullcodeline": "nla_put_u32(skb, IFLA_PROMISCUITY, dev->promiscuity) ||"
    },
    {
        "line": 30,
        "fullcodeline": "nla_put_u32(skb, IFLA_GROUP, dev->group) ||"
    },
    {
        "line": 29,
        "fullcodeline": "nla_put_u32(skb, IFLA_MTU, dev->mtu) ||"
    },
    {
        "line": 28,
        "fullcodeline": "nla_put_u8(skb, IFLA_LINKMODE, dev->link_mode) ||"
    },
    {
        "line": 26,
        "fullcodeline": "nla_put_u8(skb, IFLA_OPERSTATE,"
    },
    {
        "line": 25,
        "fullcodeline": "nla_put_u32(skb, IFLA_TXQLEN, dev->tx_queue_len) ||"
    },
    {
        "line": 27,
        "fullcodeline": "netif_running(dev) ? dev->operstate : IF_OPER_DOWN) ||"
    }
]