[
    {
        "line": 2,
        "fullcodeline": "cfg = request.cfg"
    },
    {
        "line": 17,
        "fullcodeline": "options = {}"
    },
    {
        "line": 23,
        "fullcodeline": "debug.t_start(\"listdir\")"
    },
    {
        "line": 24,
        "fullcodeline": "file_data = request.repos.listdir(request.path_parts, request.pathrev,"
    },
    {
        "line": 26,
        "fullcodeline": "debug.t_end(\"listdir\")"
    },
    {
        "line": 29,
        "fullcodeline": "sortby = request.query_dict.get('sortby', cfg.options.sort_by) or 'file'"
    },
    {
        "line": 30,
        "fullcodeline": "sortdir = request.query_dict.get('sortdir', 'up')"
    },
    {
        "line": 37,
        "fullcodeline": "debug.t_start(\"dirlogs\")"
    },
    {
        "line": 61,
        "fullcodeline": "debug.t_end(\"dirlogs\")"
    },
    {
        "line": 64,
        "fullcodeline": "searchstr = None"
    },
    {
        "line": 65,
        "fullcodeline": "search_re = request.query_dict.get('search', '')"
    },
    {
        "line": 70,
        "fullcodeline": "rows = [ ]"
    },
    {
        "line": 72,
        "fullcodeline": "num_dead = 0"
    },
    {
        "line": 75,
        "fullcodeline": "where = request.where"
    },
    {
        "line": 76,
        "fullcodeline": "where_prefix = where and where + '/'"
    },
    {
        "line": 78,
        "fullcodeline": "debug.t_start(\"row-building\")"
    },
    {
        "line": 186,
        "fullcodeline": "debug.t_end(\"row-building\")"
    },
    {
        "line": 190,
        "fullcodeline": "data = common_template_data(request)"
    },
    {
        "line": 191,
        "fullcodeline": "data.merge(TemplateData({"
    },
    {
        "line": 294,
        "fullcodeline": "pathrev_form(request, data)"
    },
    {
        "line": 305,
        "fullcodeline": "generate_page(request, \"directory\", data)"
    },
    {
        "line": 7,
        "fullcodeline": "if request.roottype == 'svn':"
    },
    {
        "line": 18,
        "fullcodeline": "if request.roottype == 'cvs':"
    },
    {
        "line": 38,
        "fullcodeline": "if cfg.options.dir_pagesize and sortby == 'file':"
    },
    {
        "line": 66,
        "fullcodeline": "if cfg.options.use_re_search and search_re:"
    },
    {
        "line": 71,
        "fullcodeline": "dirs_displayed = files_displayed = 0"
    },
    {
        "line": 79,
        "fullcodeline": "for file in file_data:"
    },
    {
        "line": 245,
        "fullcodeline": "if sortdir == 'down':"
    },
    {
        "line": 249,
        "fullcodeline": "if sortby in ['file', 'rev', 'date', 'log', 'author']:"
    },
    {
        "line": 254,
        "fullcodeline": "if request.roottype == \"cvs\":"
    },
    {
        "line": 258,
        "fullcodeline": "if request.roottype == 'cvs':"
    },
    {
        "line": 12,
        "fullcodeline": "tree_rev = request.repos.created_rev(request.where, rev)"
    },
    {
        "line": 19,
        "fullcodeline": "hideattic = int(request.query_dict.get('hideattic',"
    },
    {
        "line": 21,
        "fullcodeline": "options[\"cvs_subdirs\"] = (cfg.options.show_subdir_lastmod and"
    },
    {
        "line": 39,
        "fullcodeline": "dirlogs_first = int(request.query_dict.get('dir_pagestart', 0))"
    },
    {
        "line": 42,
        "fullcodeline": "dirlogs_last = dirlogs_first + cfg.options.dir_pagesize"
    },
    {
        "line": 51,
        "fullcodeline": "sort_file_data(file_data, request.roottype, sortdir, sortby,"
    },
    {
        "line": 59,
        "fullcodeline": "sort_file_data(file_data, request.roottype, sortdir, sortby,"
    },
    {
        "line": 67,
        "fullcodeline": "searchstr = re.compile(search_re)"
    },
    {
        "line": 246,
        "fullcodeline": "revsortdir = None # 'up'"
    },
    {
        "line": 248,
        "fullcodeline": "revsortdir = 'down'"
    },
    {
        "line": 250,
        "fullcodeline": "data['sortby_%s_href' % sortby] = request.get_url(params={'sortdir':"
    },
    {
        "line": 255,
        "fullcodeline": "data['sortby_rev_href'] = None"
    },
    {
        "line": 259,
        "fullcodeline": "plain_tags = options['cvs_tags']"
    },
    {
        "line": 260,
        "fullcodeline": "plain_tags.sort(icmp)"
    },
    {
        "line": 261,
        "fullcodeline": "plain_tags.reverse()"
    },
    {
        "line": 262,
        "fullcodeline": "data['plain_tags'] = []"
    },
    {
        "line": 266,
        "fullcodeline": "branch_tags = options['cvs_branches']"
    },
    {
        "line": 267,
        "fullcodeline": "branch_tags.sort(icmp)"
    },
    {
        "line": 268,
        "fullcodeline": "branch_tags.reverse()"
    },
    {
        "line": 269,
        "fullcodeline": "data['branch_tags'] = []"
    },
    {
        "line": 273,
        "fullcodeline": "data['attic_showing'] = ezt.boolean(not hideattic)"
    },
    {
        "line": 274,
        "fullcodeline": "data['show_attic_href'] = request.get_url(params={'hideattic': 0},"
    },
    {
        "line": 276,
        "fullcodeline": "data['hide_attic_href'] = request.get_url(params={'hideattic': 1},"
    },
    {
        "line": 301,
        "fullcodeline": "data['dir_pagestart'] = int(request.query_dict.get('dir_pagestart',0))"
    },
    {
        "line": 302,
        "fullcodeline": "data['entries'] = paging(data, 'entries', data['dir_pagestart'], 'name',"
    },
    {
        "line": 13,
        "fullcodeline": "if check_freshness(request, None, str(tree_rev), weak=1):"
    },
    {
        "line": 40,
        "fullcodeline": "if dirlogs_first > len(file_data):"
    },
    {
        "line": 43,
        "fullcodeline": "for file in file_data:"
    },
    {
        "line": 54,
        "fullcodeline": "request.repos.dirlogs(request.path_parts, request.pathrev,"
    },
    {
        "line": 57,
        "fullcodeline": "request.repos.dirlogs(request.path_parts, request.pathrev,"
    },
    {
        "line": 82,
        "fullcodeline": "row = _item(author=None, log=None, short_log=None, state=None, size=None,"
    },
    {
        "line": 92,
        "fullcodeline": "row.rev = file.rev"
    },
    {
        "line": 93,
        "fullcodeline": "row.author = file.author"
    },
    {
        "line": 94,
        "fullcodeline": "row.state = (request.roottype == 'cvs' and file.dead) and 'dead' or ''"
    },
    {
        "line": 104,
        "fullcodeline": "row.lockinfo = file.lockinfo"
    },
    {
        "line": 105,
        "fullcodeline": "row.anchor = request.server.escape(file.name)"
    },
    {
        "line": 106,
        "fullcodeline": "row.name = request.server.escape(file.name)"
    },
    {
        "line": 107,
        "fullcodeline": "row.pathtype = (file.kind == vclib.FILE and 'file') or \\"
    },
    {
        "line": 109,
        "fullcodeline": "row.errors = file.errors"
    },
    {
        "line": 185,
        "fullcodeline": "rows.append(row)"
    },
    {
        "line": 263,
        "fullcodeline": "for plain_tag in plain_tags:"
    },
    {
        "line": 270,
        "fullcodeline": "for branch_tag in branch_tags:"
    },
    {
        "line": 280,
        "fullcodeline": "elif request.roottype == 'svn':"
    },
    {
        "line": 291,
        "fullcodeline": "data['dir_paging_action'], data['dir_paging_hidden_values'] = \\"
    },
    {
        "line": 297,
        "fullcodeline": "data['search_re_action'], data['search_re_hidden_values'] = \\"
    },
    {
        "line": 9,
        "fullcodeline": "rev = request.repos._getrev(request.pathrev)"
    },
    {
        "line": 41,
        "fullcodeline": "dirlogs_first = 0"
    },
    {
        "line": 55,
        "fullcodeline": "file_data[dirlogs_first:dirlogs_last], options)"
    },
    {
        "line": 80,
        "fullcodeline": "if is_dir_ignored_file(file.name, cfg):"
    },
    {
        "line": 88,
        "fullcodeline": "if request.roottype == 'cvs' and file.absent:"
    },
    {
        "line": 90,
        "fullcodeline": "if cfg.options.hide_errorful_entries and file.errors:"
    },
    {
        "line": 95,
        "fullcodeline": "if file.date is not None:"
    },
    {
        "line": 111,
        "fullcodeline": "if file.kind == vclib.DIR:"
    },
    {
        "line": 197,
        "fullcodeline": "'sortby_file_href' :   request.get_url(params={'sortby': 'file',"
    },
    {
        "line": 200,
        "fullcodeline": "'sortby_rev_href' :    request.get_url(params={'sortby': 'rev',"
    },
    {
        "line": 203,
        "fullcodeline": "'sortby_date_href' :   request.get_url(params={'sortby': 'date',"
    },
    {
        "line": 206,
        "fullcodeline": "'sortby_author_href' : request.get_url(params={'sortby': 'author',"
    },
    {
        "line": 209,
        "fullcodeline": "'sortby_log_href' :    request.get_url(params={'sortby': 'log',"
    },
    {
        "line": 223,
        "fullcodeline": "'properties': get_itemprops(request, request.path_parts, request.pathrev),"
    },
    {
        "line": 281,
        "fullcodeline": "data['tree_rev'] = tree_rev"
    },
    {
        "line": 282,
        "fullcodeline": "data['tree_rev_href'] = request.get_url(view_func=view_revision,"
    },
    {
        "line": 285,
        "fullcodeline": "data['youngest_rev'] = request.repos.get_youngest_revision()"
    },
    {
        "line": 286,
        "fullcodeline": "data['youngest_rev_href'] = request.get_url(view_func=view_revision,"
    },
    {
        "line": 292,
        "fullcodeline": "request.get_form(params={'dir_pagestart': None})"
    },
    {
        "line": 298,
        "fullcodeline": "request.get_form(params={'search': None})"
    },
    {
        "line": 44,
        "fullcodeline": "file.rev = None"
    },
    {
        "line": 45,
        "fullcodeline": "file.date = None"
    },
    {
        "line": 46,
        "fullcodeline": "file.log = None"
    },
    {
        "line": 47,
        "fullcodeline": "file.author = None"
    },
    {
        "line": 48,
        "fullcodeline": "file.size = None"
    },
    {
        "line": 49,
        "fullcodeline": "file.lockinfo = None"
    },
    {
        "line": 50,
        "fullcodeline": "file.dead = None"
    },
    {
        "line": 86,
        "fullcodeline": "download_text_href=None, prefer_markup=ezt.boolean(0),"
    },
    {
        "line": 87,
        "fullcodeline": "is_viewable_image=ezt.boolean(0), is_binary=ezt.boolean(0))"
    },
    {
        "line": 96,
        "fullcodeline": "row.date = make_time_string(file.date, cfg)"
    },
    {
        "line": 97,
        "fullcodeline": "row.ago = html_time(request, file.date)"
    },
    {
        "line": 99,
        "fullcodeline": "debug.t_start(\"dirview_logformat\")"
    },
    {
        "line": 100,
        "fullcodeline": "lf = LogFormatter(request, file.log)"
    },
    {
        "line": 101,
        "fullcodeline": "row.log = lf.get(maxlen=0, htmlize=1)"
    },
    {
        "line": 102,
        "fullcodeline": "row.short_log = lf.get(maxlen=cfg.options.short_log_len, htmlize=1)"
    },
    {
        "line": 103,
        "fullcodeline": "debug.t_end(\"dirview_logformat\")"
    },
    {
        "line": 108,
        "fullcodeline": "(file.kind == vclib.DIR and 'dir')"
    },
    {
        "line": 117,
        "fullcodeline": "dirs_displayed += 1"
    },
    {
        "line": 119,
        "fullcodeline": "row.view_href = request.get_url(view_func=view_directory,"
    },
    {
        "line": 195,
        "fullcodeline": "'search_re' : request.server.escape(search_re),"
    },
    {
        "line": 11,
        "fullcodeline": "raise debug.ViewVCException('Invalid revision', '404 Not Found')"
    },
    {
        "line": 112,
        "fullcodeline": "if cfg.options.hide_cvsroot \\"
    },
    {
        "line": 125,
        "fullcodeline": "if request.roottype == 'svn':"
    },
    {
        "line": 130,
        "fullcodeline": "if request.roottype == 'cvs' and file.rev is not None:"
    },
    {
        "line": 136,
        "fullcodeline": "if request.roottype == 'svn':"
    },
    {
        "line": 143,
        "fullcodeline": "elif file.kind == vclib.FILE:"
    },
    {
        "line": 264,
        "fullcodeline": "data['plain_tags'].append(_item(name=plain_tag, revision=None))"
    },
    {
        "line": 271,
        "fullcodeline": "data['branch_tags'].append(_item(name=branch_tag, revision=None))"
    },
    {
        "line": 113,
        "fullcodeline": "and is_cvsroot_path(request.roottype,"
    },
    {
        "line": 120,
        "fullcodeline": "where=where_prefix+file.name,"
    },
    {
        "line": 126,
        "fullcodeline": "row.revision_href = request.get_url(view_func=view_revision,"
    },
    {
        "line": 131,
        "fullcodeline": "row.rev = None"
    },
    {
        "line": 137,
        "fullcodeline": "row.log_href = request.get_url(view_func=view_log,"
    },
    {
        "line": 155,
        "fullcodeline": "files_displayed += 1"
    },
    {
        "line": 157,
        "fullcodeline": "file_where = where_prefix + file.name"
    },
    {
        "line": 164,
        "fullcodeline": "fvi = get_file_view_info(request, file_where, file.rev, row.mime_type)"
    },
    {
        "line": 165,
        "fullcodeline": "row.view_href = fvi.view_href"
    },
    {
        "line": 166,
        "fullcodeline": "row.download_href = fvi.download_href"
    },
    {
        "line": 167,
        "fullcodeline": "row.download_text_href = fvi.download_text_href"
    },
    {
        "line": 168,
        "fullcodeline": "row.annotate_href = fvi.annotate_href"
    },
    {
        "line": 169,
        "fullcodeline": "row.revision_href = fvi.revision_href"
    },
    {
        "line": 170,
        "fullcodeline": "row.prefer_markup = fvi.prefer_markup"
    },
    {
        "line": 171,
        "fullcodeline": "row.is_viewable_image = fvi.is_viewable_image"
    },
    {
        "line": 172,
        "fullcodeline": "row.is_binary = fvi.is_binary"
    },
    {
        "line": 173,
        "fullcodeline": "row.log_href = request.get_url(view_func=view_log,"
    },
    {
        "line": 283,
        "fullcodeline": "params={'revision': tree_rev},"
    },
    {
        "line": 287,
        "fullcodeline": "params={},"
    },
    {
        "line": 114,
        "fullcodeline": "request.path_parts + [file.name]):"
    },
    {
        "line": 122,
        "fullcodeline": "params={},"
    },
    {
        "line": 144,
        "fullcodeline": "if searchstr is not None:"
    },
    {
        "line": 150,
        "fullcodeline": "if request.roottype == 'cvs' and file.dead:"
    },
    {
        "line": 158,
        "fullcodeline": "if request.roottype == 'svn':"
    },
    {
        "line": 161,
        "fullcodeline": "row.mime_type, encoding = calculate_mime_type(request,"
    },
    {
        "line": 178,
        "fullcodeline": "if cfg.options.use_cvsgraph and request.roottype == 'cvs':"
    },
    {
        "line": 133,
        "fullcodeline": "row.log_file = request.server.escape(file.newest_file)"
    },
    {
        "line": 134,
        "fullcodeline": "row.log_rev = file.rev"
    },
    {
        "line": 138,
        "fullcodeline": "where=where_prefix + file.name,"
    },
    {
        "line": 151,
        "fullcodeline": "num_dead = num_dead + 1"
    },
    {
        "line": 159,
        "fullcodeline": "row.size = file.size"
    },
    {
        "line": 179,
        "fullcodeline": "row.graph_href = request.get_url(view_func=view_cvsgraph,"
    },
    {
        "line": 127,
        "fullcodeline": "params={'revision': file.rev},"
    },
    {
        "line": 140,
        "fullcodeline": "params={},"
    },
    {
        "line": 145,
        "fullcodeline": "if request.roottype == 'cvs' and (file.errors or file.dead):"
    },
    {
        "line": 147,
        "fullcodeline": "if not search_file(request.repos, request.path_parts + [file.name],"
    },
    {
        "line": 162,
        "fullcodeline": "_path_parts(file_where),"
    },
    {
        "line": 176,
        "fullcodeline": "params={},"
    },
    {
        "line": 182,
        "fullcodeline": "params={},"
    }
]