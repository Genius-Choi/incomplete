[
    {
        "line": 20,
        "fullcodeline": "IN_COPY_BYTE_OR_RETURN(connp);"
    },
    {
        "line": 3,
        "fullcodeline": "if (connp->in_status == HTP_STREAM_CLOSED) {"
    },
    {
        "line": 23,
        "fullcodeline": "if (connp->in_next_byte == LF) {"
    },
    {
        "line": 13,
        "fullcodeline": "htp_connp_req_clear_buffer(connp);"
    },
    {
        "line": 15,
        "fullcodeline": "connp->in_tx->request_progress = HTP_REQUEST_TRAILER;"
    },
    {
        "line": 52,
        "fullcodeline": "htp_chomp(data, &len);"
    },
    {
        "line": 110,
        "fullcodeline": "htp_connp_req_clear_buffer(connp);"
    },
    {
        "line": 5,
        "fullcodeline": "if (connp->in_header != NULL) {"
    },
    {
        "line": 18,
        "fullcodeline": "return htp_tx_state_request_headers(connp->in_tx);"
    },
    {
        "line": 27,
        "fullcodeline": "if (htp_connp_req_consolidate_data(connp, &data, &len) != HTP_OK) {"
    },
    {
        "line": 36,
        "fullcodeline": "if (htp_connp_is_line_terminator(connp, data, len, 0)) {"
    },
    {
        "line": 55,
        "fullcodeline": "if (htp_connp_is_line_folded(data, len) == 0) {"
    },
    {
        "line": 9,
        "fullcodeline": "bstr_free(connp->in_header);"
    },
    {
        "line": 10,
        "fullcodeline": "connp->in_header = NULL;"
    },
    {
        "line": 46,
        "fullcodeline": "htp_connp_req_clear_buffer(connp);"
    },
    {
        "line": 67,
        "fullcodeline": "IN_PEEK_NEXT(connp);"
    },
    {
        "line": 6,
        "fullcodeline": "if (connp->cfg->process_request_header(connp, bstr_ptr(connp->in_header),"
    },
    {
        "line": 38,
        "fullcodeline": "if (connp->in_header != NULL) {"
    },
    {
        "line": 49,
        "fullcodeline": "return htp_tx_state_request_headers(connp->in_tx);"
    },
    {
        "line": 59,
        "fullcodeline": "if (connp->in_header != NULL) {"
    },
    {
        "line": 69,
        "fullcodeline": "if (connp->in_next_byte != -1 && htp_is_folding_char(connp->in_next_byte) == 0) {"
    },
    {
        "line": 42,
        "fullcodeline": "bstr_free(connp->in_header);"
    },
    {
        "line": 43,
        "fullcodeline": "connp->in_header = NULL;"
    },
    {
        "line": 63,
        "fullcodeline": "bstr_free(connp->in_header);"
    },
    {
        "line": 64,
        "fullcodeline": "connp->in_header = NULL;"
    },
    {
        "line": 79,
        "fullcodeline": "if (connp->in_header == NULL) {"
    },
    {
        "line": 7,
        "fullcodeline": "bstr_len(connp->in_header)) != HTP_OK)"
    },
    {
        "line": 39,
        "fullcodeline": "if (connp->cfg->process_request_header(connp, bstr_ptr(connp->in_header),"
    },
    {
        "line": 60,
        "fullcodeline": "if (connp->cfg->process_request_header(connp, bstr_ptr(connp->in_header),"
    },
    {
        "line": 71,
        "fullcodeline": "if (connp->cfg->process_request_header(connp, data, len) != HTP_OK) return HTP_ERROR;"
    },
    {
        "line": 74,
        "fullcodeline": "connp->in_header = bstr_dup_mem(data, len);"
    },
    {
        "line": 89,
        "fullcodeline": "size_t trim = 0;"
    },
    {
        "line": 96,
        "fullcodeline": "connp->in_header = bstr_dup_mem(data + trim, len - trim);"
    },
    {
        "line": 75,
        "fullcodeline": "if (connp->in_header == NULL) return HTP_ERROR;"
    },
    {
        "line": 83,
        "fullcodeline": "if (!(connp->in_tx->flags & HTP_INVALID_FOLDING)) {"
    },
    {
        "line": 90,
        "fullcodeline": "while(trim < len) {"
    },
    {
        "line": 97,
        "fullcodeline": "if (connp->in_header == NULL) return HTP_ERROR;"
    },
    {
        "line": 40,
        "fullcodeline": "bstr_len(connp->in_header)) != HTP_OK) return HTP_ERROR;"
    },
    {
        "line": 61,
        "fullcodeline": "bstr_len(connp->in_header)) != HTP_OK) return HTP_ERROR;"
    },
    {
        "line": 84,
        "fullcodeline": "connp->in_tx->flags |= HTP_INVALID_FOLDING;"
    },
    {
        "line": 85,
        "fullcodeline": "htp_log(connp, HTP_LOG_MARK, HTP_LOG_WARNING, 0, \"Invalid request field folding\");"
    },
    {
        "line": 94,
        "fullcodeline": "trim++;"
    },
    {
        "line": 100,
        "fullcodeline": "if (bstr_len(connp->in_header) < HTP_MAX_HEADER_FOLDED) {"
    },
    {
        "line": 91,
        "fullcodeline": "if (!htp_is_folding_char(data[trim])) {"
    },
    {
        "line": 101,
        "fullcodeline": "bstr *new_in_header = bstr_add_mem(connp->in_header, data, len);"
    },
    {
        "line": 103,
        "fullcodeline": "connp->in_header = new_in_header;"
    },
    {
        "line": 102,
        "fullcodeline": "if (new_in_header == NULL) return HTP_ERROR;"
    },
    {
        "line": 105,
        "fullcodeline": "htp_log(connp, HTP_LOG_MARK, HTP_LOG_WARNING, 0, \"Request field length exceeds folded maximum\");"
    }
]