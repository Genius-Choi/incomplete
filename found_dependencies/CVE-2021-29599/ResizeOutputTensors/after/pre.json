[
    {
        "line": 4,
        "fullcodeline": "int axis_value = GetTensorData<int>(axis)[0];"
    },
    {
        "line": 9,
        "fullcodeline": "TF_LITE_ENSURE(context, axis_value >= 0);"
    },
    {
        "line": 10,
        "fullcodeline": "TF_LITE_ENSURE(context, axis_value < NumDimensions(input));"
    },
    {
        "line": 12,
        "fullcodeline": "const int input_size = SizeOfDimension(input, axis_value);"
    },
    {
        "line": 13,
        "fullcodeline": "TF_LITE_ENSURE(context, num_splits != 0);"
    },
    {
        "line": 14,
        "fullcodeline": "TF_LITE_ENSURE_MSG(context, input_size % num_splits == 0,"
    },
    {
        "line": 16,
        "fullcodeline": "const int slice_size = input_size / num_splits;"
    },
    {
        "line": 5,
        "fullcodeline": "if (axis_value < 0) {"
    },
    {
        "line": 18,
        "fullcodeline": "for (int i = 0; i < NumOutputs(node); ++i) {"
    },
    {
        "line": 6,
        "fullcodeline": "axis_value += NumDimensions(input);"
    },
    {
        "line": 19,
        "fullcodeline": "TfLiteIntArray* output_dims = TfLiteIntArrayCopy(input->dims);"
    },
    {
        "line": 20,
        "fullcodeline": "output_dims->data[axis_value] = slice_size;"
    },
    {
        "line": 22,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, i, &output));"
    },
    {
        "line": 23,
        "fullcodeline": "TF_LITE_ENSURE_STATUS(context->ResizeTensor(context, output, output_dims));"
    }
]