[
    {
        "line": 3,
        "fullcodeline": "proc_env = os.environ.copy()"
    },
    {
        "line": 21,
        "fullcodeline": "localconfig = anchore_engine.configuration.localconfig.get_config()"
    },
    {
        "line": 22,
        "fullcodeline": "global_timeout = localconfig.get('skopeo_global_timeout', 0)"
    },
    {
        "line": 35,
        "fullcodeline": "os_overrides = [\"\"]"
    },
    {
        "line": 4,
        "fullcodeline": "if user and pw:"
    },
    {
        "line": 16,
        "fullcodeline": "if use_cache_dir and os.path.exists(use_cache_dir):"
    },
    {
        "line": 58,
        "fullcodeline": "for os_override in os_overrides:"
    },
    {
        "line": 96,
        "fullcodeline": "if not success:"
    },
    {
        "line": 5,
        "fullcodeline": "proc_env['SKOPUSER'] = user"
    },
    {
        "line": 6,
        "fullcodeline": "proc_env['SKOPPASS'] = pw"
    },
    {
        "line": 7,
        "fullcodeline": "credstr = '--src-creds \\\"${SKOPUSER}\\\":\\\"${SKOPPASS}\\\"'"
    },
    {
        "line": 9,
        "fullcodeline": "credstr = \"\""
    },
    {
        "line": 12,
        "fullcodeline": "tlsverifystr = \"--src-tls-verify=true\""
    },
    {
        "line": 14,
        "fullcodeline": "tlsverifystr = \"--src-tls-verify=false\""
    },
    {
        "line": 17,
        "fullcodeline": "cachestr = \"--dest-shared-blob-dir \" + use_cache_dir"
    },
    {
        "line": 19,
        "fullcodeline": "cachestr = \"\""
    },
    {
        "line": 24,
        "fullcodeline": "global_timeout = int(global_timeout)"
    },
    {
        "line": 31,
        "fullcodeline": "global_timeout_str = \"--command-timeout {}s\".format(global_timeout)"
    },
    {
        "line": 33,
        "fullcodeline": "global_timeout_str = \"\""
    },
    {
        "line": 37,
        "fullcodeline": "manifest_data = json.loads(manifest)"
    },
    {
        "line": 97,
        "fullcodeline": "logger.error(\"could not download image\")"
    },
    {
        "line": 98,
        "fullcodeline": "raise Exception(\"could not download image\")"
    },
    {
        "line": 100,
        "fullcodeline": "raise err"
    },
    {
        "line": 25,
        "fullcodeline": "if global_timeout < 0:"
    },
    {
        "line": 40,
        "fullcodeline": "for l in manifest_data.get('layers', []):"
    },
    {
        "line": 59,
        "fullcodeline": "success = False"
    },
    {
        "line": 79,
        "fullcodeline": "cmdstr = ' '.join(cmd)"
    },
    {
        "line": 26,
        "fullcodeline": "global_timeout = 0"
    },
    {
        "line": 28,
        "fullcodeline": "global_timeout = 0"
    },
    {
        "line": 45,
        "fullcodeline": "parent_manifest_data = json.loads(parent_manifest)"
    },
    {
        "line": 47,
        "fullcodeline": "parent_manifest_data = {}"
    },
    {
        "line": 60,
        "fullcodeline": "if os_override not in [\"\", 'linux']:"
    },
    {
        "line": 66,
        "fullcodeline": "if dest_type == 'oci':"
    },
    {
        "line": 50,
        "fullcodeline": "for mlist in parent_manifest_data.get('manifests', []):"
    },
    {
        "line": 61,
        "fullcodeline": "dest_type = 'dir'"
    },
    {
        "line": 62,
        "fullcodeline": "os_override_str = \"--override-os {}\".format(os_override)"
    },
    {
        "line": 64,
        "fullcodeline": "os_override_str = \"\""
    },
    {
        "line": 75,
        "fullcodeline": "cmd = [\"/bin/sh\", \"-c\", \"skopeo {} {} copy {} {} {} docker://{} oci:{}:image\".format(os_override_str, global_timeout_str, tlsverifystr, credstr, cachestr, fulltag, copydir)]"
    },
    {
        "line": 77,
        "fullcodeline": "cmd = [\"/bin/sh\", \"-c\", \"skopeo {} {} copy {} {} docker://{} dir:{}\".format(os_override_str, global_timeout_str, tlsverifystr, credstr, fulltag, copydir)]"
    },
    {
        "line": 41,
        "fullcodeline": "if 'foreign.diff' in l.get('mediaType', \"\"):"
    },
    {
        "line": 81,
        "fullcodeline": "rc, sout, serr = run_command_list(cmd, env=proc_env)"
    },
    {
        "line": 82,
        "fullcodeline": "if rc != 0:"
    },
    {
        "line": 42,
        "fullcodeline": "dest_type = 'dir'"
    },
    {
        "line": 51,
        "fullcodeline": "imageos = mlist.get('platform', {}).get('os', \"\")"
    },
    {
        "line": 83,
        "fullcodeline": "skopeo_error = SkopeoError(cmd=cmd, rc=rc, out=sout, err=serr)"
    },
    {
        "line": 87,
        "fullcodeline": "logger.debug(\"command succeeded: cmd=\"+str(cmdstr)+\" stdout=\"+str(sout).strip()+\" stderr=\"+str(serr).strip())"
    },
    {
        "line": 88,
        "fullcodeline": "success = True"
    },
    {
        "line": 91,
        "fullcodeline": "logger.error(\"command failed with exception - \" + str(err))"
    },
    {
        "line": 92,
        "fullcodeline": "raise err"
    },
    {
        "line": 52,
        "fullcodeline": "if imageos not in [\"\", 'linux']:"
    },
    {
        "line": 68,
        "fullcodeline": "with open(os.path.join(copydir, \"manifest.json\"), 'w') as OFH:"
    },
    {
        "line": 72,
        "fullcodeline": "with open(os.path.join(copydir, \"parent_manifest.json\"), 'w') as OFH:"
    },
    {
        "line": 84,
        "fullcodeline": "if skopeo_error.error_code != AnchoreError.OSARCH_MISMATCH.name:"
    },
    {
        "line": 54,
        "fullcodeline": "dest_type = 'dir'"
    },
    {
        "line": 55,
        "fullcodeline": "os_overrides.insert(0, \"windows\")"
    },
    {
        "line": 85,
        "fullcodeline": "raise SkopeoError(cmd=cmd, rc=rc, out=sout, err=serr)"
    },
    {
        "line": 69,
        "fullcodeline": "OFH.write(manifest)"
    },
    {
        "line": 73,
        "fullcodeline": "OFH.write(parent_manifest)"
    }
]