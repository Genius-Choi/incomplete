[
    {
        "line": 3,
        "fullcodeline": "const char command0[] = { 0x00, 0x00 };"
    },
    {
        "line": 4,
        "fullcodeline": "char command1[] = \"\\x01\\x00urn:schemas-upnp-org:device:InternetGatewayDevice\";"
    },
    {
        "line": 5,
        "fullcodeline": "char command2[] = \"\\x02\\x00uuid:fc4ec57e-b051-11db-88f8-0060085db3f6::upnp:rootdevice\";"
    },
    {
        "line": 6,
        "fullcodeline": "const char command3[] = { 0x03, 0x00 };"
    },
    {
        "line": 9,
        "fullcodeline": "char command3compat[] = \"\\x03\\x00ssdp:all\";"
    },
    {
        "line": 10,
        "fullcodeline": "char command4[] = \"\\x04\\x00test:test:test\";"
    },
    {
        "line": 11,
        "fullcodeline": "const char bad_command[] = { 0xff, 0xff };"
    },
    {
        "line": 12,
        "fullcodeline": "const char overflow[] = { 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };"
    },
    {
        "line": 13,
        "fullcodeline": "const char command5[] = { 0x05, 0x00 };"
    },
    {
        "line": 17,
        "fullcodeline": "unsigned char * resp = NULL;"
    },
    {
        "line": 18,
        "fullcodeline": "size_t respsize = 0;"
    },
    {
        "line": 19,
        "fullcodeline": "unsigned char buf[4096];"
    },
    {
        "line": 21,
        "fullcodeline": "int total = 0;"
    },
    {
        "line": 22,
        "fullcodeline": "const char * sockpath = \"/var/run/minissdpd.sock\";"
    },
    {
        "line": 28,
        "fullcodeline": "command1[1] = sizeof(command1) - 3;"
    },
    {
        "line": 29,
        "fullcodeline": "command2[1] = sizeof(command2) - 3;"
    },
    {
        "line": 30,
        "fullcodeline": "command3compat[1] = sizeof(command3compat) - 3;"
    },
    {
        "line": 31,
        "fullcodeline": "command4[1] = sizeof(command4) - 3;"
    },
    {
        "line": 32,
        "fullcodeline": "s = connect_unix_socket(sockpath);"
    },
    {
        "line": 34,
        "fullcodeline": "n = SENDCOMMAND(command0, sizeof(command0));"
    },
    {
        "line": 35,
        "fullcodeline": "n = read(s, buf, sizeof(buf));"
    },
    {
        "line": 36,
        "fullcodeline": "printf(\"Response received %d bytes\\n\", (int)n);"
    },
    {
        "line": 45,
        "fullcodeline": "n = SENDCOMMAND(command1, sizeof(command1) - 1);"
    },
    {
        "line": 46,
        "fullcodeline": "n = read(s, buf, sizeof(buf));"
    },
    {
        "line": 47,
        "fullcodeline": "printf(\"Response received %d bytes\\n\", (int)n);"
    },
    {
        "line": 48,
        "fullcodeline": "printresponse(buf, n);"
    },
    {
        "line": 54,
        "fullcodeline": "n = SENDCOMMAND(command2, sizeof(command2) - 1);"
    },
    {
        "line": 55,
        "fullcodeline": "n = read(s, buf, sizeof(buf));"
    },
    {
        "line": 56,
        "fullcodeline": "printf(\"Response received %d bytes\\n\", (int)n);"
    },
    {
        "line": 57,
        "fullcodeline": "printresponse(buf, n);"
    },
    {
        "line": 63,
        "fullcodeline": "buf[0] = 0; /* Slight hack for printing num devices when 0 */"
    },
    {
        "line": 64,
        "fullcodeline": "n = SENDCOMMAND(command3, sizeof(command3));"
    },
    {
        "line": 65,
        "fullcodeline": "n = read(s, buf, sizeof(buf));"
    },
    {
        "line": 73,
        "fullcodeline": "printf(\"Response received %d bytes\\n\", (int)n);"
    },
    {
        "line": 74,
        "fullcodeline": "printf(\"Number of devices %d\\n\", (int)buf[0]);"
    },
    {
        "line": 104,
        "fullcodeline": "n = SENDCOMMAND(command4, sizeof(command4));"
    },
    {
        "line": 107,
        "fullcodeline": "n = SENDCOMMAND(bad_command, sizeof(bad_command));"
    },
    {
        "line": 108,
        "fullcodeline": "n = read(s, buf, sizeof(buf));"
    },
    {
        "line": 109,
        "fullcodeline": "printf(\"Response received %d bytes\\n\", (int)n);"
    },
    {
        "line": 110,
        "fullcodeline": "printresponse(buf, n);"
    },
    {
        "line": 116,
        "fullcodeline": "n = SENDCOMMAND(overflow, sizeof(overflow));"
    },
    {
        "line": 117,
        "fullcodeline": "n = read(s, buf, sizeof(buf));"
    },
    {
        "line": 118,
        "fullcodeline": "printf(\"Response received %d bytes\\n\", (int)n);"
    },
    {
        "line": 119,
        "fullcodeline": "printresponse(buf, n);"
    },
    {
        "line": 125,
        "fullcodeline": "n = SENDCOMMAND(command5, sizeof(command5));"
    },
    {
        "line": 126,
        "fullcodeline": "n = read(s, buf, sizeof(buf));"
    },
    {
        "line": 127,
        "fullcodeline": "printf(\"Response received %d bytes\\n\", (int)n);"
    },
    {
        "line": 128,
        "fullcodeline": "printresponse(buf, n);"
    },
    {
        "line": 130,
        "fullcodeline": "close(s);"
    },
    {
        "line": 24,
        "fullcodeline": "for(i=0; i<argc-1; i++) {"
    },
    {
        "line": 37,
        "fullcodeline": "if(n > 0) {"
    },
    {
        "line": 49,
        "fullcodeline": "if(n == 0) {"
    },
    {
        "line": 58,
        "fullcodeline": "if(n == 0) {"
    },
    {
        "line": 66,
        "fullcodeline": "if(n == 0) {"
    },
    {
        "line": 75,
        "fullcodeline": "while(n > 0) {"
    },
    {
        "line": 94,
        "fullcodeline": "if(resp != NULL) {"
    },
    {
        "line": 99,
        "fullcodeline": "if(n == 0) {"
    },
    {
        "line": 111,
        "fullcodeline": "if(n == 0) {"
    },
    {
        "line": 120,
        "fullcodeline": "if(n == 0) {"
    },
    {
        "line": 38,
        "fullcodeline": "printversion(buf, n);"
    },
    {
        "line": 50,
        "fullcodeline": "close(s);"
    },
    {
        "line": 51,
        "fullcodeline": "s = connect_unix_socket(sockpath);"
    },
    {
        "line": 59,
        "fullcodeline": "close(s);"
    },
    {
        "line": 60,
        "fullcodeline": "s = connect_unix_socket(sockpath);"
    },
    {
        "line": 67,
        "fullcodeline": "printf(\"command3 failed, testing compatible one\\n\");"
    },
    {
        "line": 68,
        "fullcodeline": "close(s);"
    },
    {
        "line": 69,
        "fullcodeline": "s = connect_unix_socket(sockpath);"
    },
    {
        "line": 70,
        "fullcodeline": "n = SENDCOMMAND(command3compat, sizeof(command3compat) - 1);"
    },
    {
        "line": 71,
        "fullcodeline": "n = read(s, buf, sizeof(buf));"
    },
    {
        "line": 76,
        "fullcodeline": "tmp = realloc(resp, respsize + n);"
    },
    {
        "line": 81,
        "fullcodeline": "resp = tmp;"
    },
    {
        "line": 82,
        "fullcodeline": "respsize += n;"
    },
    {
        "line": 91,
        "fullcodeline": "n = read(s, buf, sizeof(buf));"
    },
    {
        "line": 92,
        "fullcodeline": "printf(\"response received %d bytes\\n\", (int)n);"
    },
    {
        "line": 95,
        "fullcodeline": "printresponse(resp, total);"
    },
    {
        "line": 96,
        "fullcodeline": "free(resp);"
    },
    {
        "line": 97,
        "fullcodeline": "resp = NULL;"
    },
    {
        "line": 100,
        "fullcodeline": "close(s);"
    },
    {
        "line": 101,
        "fullcodeline": "s = connect_unix_socket(sockpath);"
    },
    {
        "line": 112,
        "fullcodeline": "close(s);"
    },
    {
        "line": 113,
        "fullcodeline": "s = connect_unix_socket(sockpath);"
    },
    {
        "line": 121,
        "fullcodeline": "close(s);"
    },
    {
        "line": 122,
        "fullcodeline": "s = connect_unix_socket(sockpath);"
    },
    {
        "line": 25,
        "fullcodeline": "if(0==strcmp(argv[i], \"-s\"))"
    },
    {
        "line": 40,
        "fullcodeline": "printf(\"Command 0 (get version) not supported\\n\");"
    },
    {
        "line": 41,
        "fullcodeline": "close(s);"
    },
    {
        "line": 42,
        "fullcodeline": "s = connect_unix_socket(sockpath);"
    },
    {
        "line": 77,
        "fullcodeline": "if(tmp == NULL) {"
    },
    {
        "line": 83,
        "fullcodeline": "if (n > 0) {"
    },
    {
        "line": 87,
        "fullcodeline": "if (n < (ssize_t)sizeof(buf)) {"
    },
    {
        "line": 26,
        "fullcodeline": "sockpath = argv[++i];"
    },
    {
        "line": 78,
        "fullcodeline": "fprintf(stderr, \"memory allocation error\\n\");"
    },
    {
        "line": 84,
        "fullcodeline": "memcpy(resp + total, buf, n);"
    },
    {
        "line": 85,
        "fullcodeline": "total += n;"
    }
]