[
    {
        "line": 3,
        "fullcodeline": "int64_t total_output_size = 0;"
    },
    {
        "line": 6,
        "fullcodeline": "DataType dt = output.dtype();"
    },
    {
        "line": 7,
        "fullcodeline": "const auto& original_output_shape = output.shape();"
    },
    {
        "line": 8,
        "fullcodeline": "int64_t output_size = DataTypeSize(BaseType(dt));"
    },
    {
        "line": 9,
        "fullcodeline": "int num_dims = std::max(1, original_output_shape.dim_size());"
    },
    {
        "line": 10,
        "fullcodeline": "auto output_shape = MaybeGetMinimumShape(original_output_shape, num_dims,"
    },
    {
        "line": 22,
        "fullcodeline": "total_output_size += output_size;"
    },
    {
        "line": 23,
        "fullcodeline": "VLOG(1) << \"Output Size: \" << output_size"
    },
    {
        "line": 13,
        "fullcodeline": "int64_t new_output_size ="
    },
    {
        "line": 20,
        "fullcodeline": "output_size = new_output_size;"
    },
    {
        "line": 14,
        "fullcodeline": "MultiplyWithoutOverflow(output_size, dim.size());"
    },
    {
        "line": 15,
        "fullcodeline": "if (new_output_size < 0) {"
    },
    {
        "line": 16,
        "fullcodeline": "VLOG(1) << \"Overflow encountered when estimating cost, multiplying \""
    },
    {
        "line": 17,
        "fullcodeline": "<< output_size << \" with \" << dim.size();"
    },
    {
        "line": 18,
        "fullcodeline": "return -1;"
    }
]