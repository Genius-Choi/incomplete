[
    {
        "line": 4,
        "fullcodeline": "int new_flen = 0, pass = 0, target, i, stack_off;"
    },
    {
        "line": 5,
        "fullcodeline": "struct bpf_insn *new_insn, *first_insn = NULL;"
    },
    {
        "line": 7,
        "fullcodeline": "int *addrs = NULL;"
    },
    {
        "line": 10,
        "fullcodeline": "BUILD_BUG_ON(BPF_MEMWORDS * sizeof(u32) > MAX_BPF_STACK);"
    },
    {
        "line": 11,
        "fullcodeline": "BUILD_BUG_ON(BPF_REG_FP + 1 != MAX_BPF_REG);"
    },
    {
        "line": 25,
        "fullcodeline": "new_insn = first_insn;"
    },
    {
        "line": 26,
        "fullcodeline": "fp = prog;"
    },
    {
        "line": 297,
        "fullcodeline": "pass++;"
    },
    {
        "line": 305,
        "fullcodeline": "kfree(addrs);"
    },
    {
        "line": 306,
        "fullcodeline": "BUG_ON(*new_len != new_flen);"
    },
    {
        "line": 309,
        "fullcodeline": "kfree(addrs);"
    },
    {
        "line": 13,
        "fullcodeline": "if (len <= 0 || len > BPF_MAXINSNS)"
    },
    {
        "line": 45,
        "fullcodeline": "for (i = 0; i < len; fp++, i++) {"
    },
    {
        "line": 291,
        "fullcodeline": "if (!new_prog) {"
    },
    {
        "line": 298,
        "fullcodeline": "if (new_flen != new_insn - first_insn) {"
    },
    {
        "line": 310,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 17,
        "fullcodeline": "first_insn = new_prog->insnsi;"
    },
    {
        "line": 18,
        "fullcodeline": "addrs = kcalloc(len, sizeof(*addrs),"
    },
    {
        "line": 33,
        "fullcodeline": "*new_insn++ = BPF_ALU32_REG(BPF_XOR, BPF_REG_A, BPF_REG_A);"
    },
    {
        "line": 34,
        "fullcodeline": "*new_insn++ = BPF_ALU32_REG(BPF_XOR, BPF_REG_X, BPF_REG_X);"
    },
    {
        "line": 40,
        "fullcodeline": "*new_insn++ = BPF_MOV64_REG(BPF_REG_CTX, BPF_REG_ARG1);"
    },
    {
        "line": 46,
        "fullcodeline": "struct bpf_insn tmp_insns[6] = { };"
    },
    {
        "line": 47,
        "fullcodeline": "struct bpf_insn *insn = tmp_insns;"
    },
    {
        "line": 284,
        "fullcodeline": "insn++;"
    },
    {
        "line": 288,
        "fullcodeline": "new_insn += insn - tmp_insns;"
    },
    {
        "line": 293,
        "fullcodeline": "*new_len = new_insn - first_insn;"
    },
    {
        "line": 299,
        "fullcodeline": "new_flen = new_insn - first_insn;"
    },
    {
        "line": 14,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 20,
        "fullcodeline": "if (!addrs)"
    },
    {
        "line": 42,
        "fullcodeline": "new_insn += 3;"
    },
    {
        "line": 300,
        "fullcodeline": "if (pass > 2)"
    },
    {
        "line": 19,
        "fullcodeline": "GFP_KERNEL | __GFP_NOWARN);"
    },
    {
        "line": 50,
        "fullcodeline": "addrs[i] = new_insn - first_insn;"
    },
    {
        "line": 54,
        "fullcodeline": "case BPF_ALU | BPF_ADD | BPF_X:"
    },
    {
        "line": 55,
        "fullcodeline": "case BPF_ALU | BPF_ADD | BPF_K:"
    },
    {
        "line": 56,
        "fullcodeline": "case BPF_ALU | BPF_SUB | BPF_X:"
    },
    {
        "line": 57,
        "fullcodeline": "case BPF_ALU | BPF_SUB | BPF_K:"
    },
    {
        "line": 58,
        "fullcodeline": "case BPF_ALU | BPF_AND | BPF_X:"
    },
    {
        "line": 59,
        "fullcodeline": "case BPF_ALU | BPF_AND | BPF_K:"
    },
    {
        "line": 60,
        "fullcodeline": "case BPF_ALU | BPF_OR | BPF_X:"
    },
    {
        "line": 61,
        "fullcodeline": "case BPF_ALU | BPF_OR | BPF_K:"
    },
    {
        "line": 62,
        "fullcodeline": "case BPF_ALU | BPF_LSH | BPF_X:"
    },
    {
        "line": 63,
        "fullcodeline": "case BPF_ALU | BPF_LSH | BPF_K:"
    },
    {
        "line": 64,
        "fullcodeline": "case BPF_ALU | BPF_RSH | BPF_X:"
    },
    {
        "line": 65,
        "fullcodeline": "case BPF_ALU | BPF_RSH | BPF_K:"
    },
    {
        "line": 66,
        "fullcodeline": "case BPF_ALU | BPF_XOR | BPF_X:"
    },
    {
        "line": 67,
        "fullcodeline": "case BPF_ALU | BPF_XOR | BPF_K:"
    },
    {
        "line": 68,
        "fullcodeline": "case BPF_ALU | BPF_MUL | BPF_X:"
    },
    {
        "line": 69,
        "fullcodeline": "case BPF_ALU | BPF_MUL | BPF_K:"
    },
    {
        "line": 70,
        "fullcodeline": "case BPF_ALU | BPF_DIV | BPF_X:"
    },
    {
        "line": 71,
        "fullcodeline": "case BPF_ALU | BPF_DIV | BPF_K:"
    },
    {
        "line": 72,
        "fullcodeline": "case BPF_ALU | BPF_MOD | BPF_X:"
    },
    {
        "line": 73,
        "fullcodeline": "case BPF_ALU | BPF_MOD | BPF_K:"
    },
    {
        "line": 74,
        "fullcodeline": "case BPF_ALU | BPF_NEG:"
    },
    {
        "line": 75,
        "fullcodeline": "case BPF_LD | BPF_ABS | BPF_W:"
    },
    {
        "line": 76,
        "fullcodeline": "case BPF_LD | BPF_ABS | BPF_H:"
    },
    {
        "line": 77,
        "fullcodeline": "case BPF_LD | BPF_ABS | BPF_B:"
    },
    {
        "line": 78,
        "fullcodeline": "case BPF_LD | BPF_IND | BPF_W:"
    },
    {
        "line": 79,
        "fullcodeline": "case BPF_LD | BPF_IND | BPF_H:"
    },
    {
        "line": 80,
        "fullcodeline": "case BPF_LD | BPF_IND | BPF_B:"
    },
    {
        "line": 101,
        "fullcodeline": "*insn = BPF_RAW_INSN(fp->code, BPF_REG_A, BPF_REG_X, 0, fp->k);"
    },
    {
        "line": 126,
        "fullcodeline": "case BPF_JMP | BPF_JA:"
    },
    {
        "line": 127,
        "fullcodeline": "target = i + fp->k + 1;"
    },
    {
        "line": 128,
        "fullcodeline": "insn->code = fp->code;"
    },
    {
        "line": 129,
        "fullcodeline": "BPF_EMIT_JMP;"
    },
    {
        "line": 132,
        "fullcodeline": "case BPF_JMP | BPF_JEQ | BPF_K:"
    },
    {
        "line": 133,
        "fullcodeline": "case BPF_JMP | BPF_JEQ | BPF_X:"
    },
    {
        "line": 134,
        "fullcodeline": "case BPF_JMP | BPF_JSET | BPF_K:"
    },
    {
        "line": 135,
        "fullcodeline": "case BPF_JMP | BPF_JSET | BPF_X:"
    },
    {
        "line": 136,
        "fullcodeline": "case BPF_JMP | BPF_JGT | BPF_K:"
    },
    {
        "line": 137,
        "fullcodeline": "case BPF_JMP | BPF_JGT | BPF_X:"
    },
    {
        "line": 138,
        "fullcodeline": "case BPF_JMP | BPF_JGE | BPF_K:"
    },
    {
        "line": 139,
        "fullcodeline": "case BPF_JMP | BPF_JGE | BPF_X:"
    },
    {
        "line": 187,
        "fullcodeline": "target = i + fp->jt + 1;"
    },
    {
        "line": 188,
        "fullcodeline": "insn->code = BPF_JMP | BPF_OP(fp->code) | bpf_src;"
    },
    {
        "line": 189,
        "fullcodeline": "BPF_EMIT_JMP;"
    },
    {
        "line": 190,
        "fullcodeline": "insn++;"
    },
    {
        "line": 192,
        "fullcodeline": "insn->code = BPF_JMP | BPF_JA;"
    },
    {
        "line": 193,
        "fullcodeline": "target = i + fp->jf + 1;"
    },
    {
        "line": 194,
        "fullcodeline": "BPF_EMIT_JMP;"
    },
    {
        "line": 198,
        "fullcodeline": "case BPF_LDX | BPF_MSH | BPF_B:"
    },
    {
        "line": 200,
        "fullcodeline": "*insn++ = BPF_MOV64_REG(BPF_REG_TMP, BPF_REG_A);"
    },
    {
        "line": 202,
        "fullcodeline": "*insn++ = BPF_LD_ABS(BPF_B, fp->k);"
    },
    {
        "line": 204,
        "fullcodeline": "*insn++ = BPF_ALU32_IMM(BPF_AND, BPF_REG_A, 0xf);"
    },
    {
        "line": 206,
        "fullcodeline": "*insn++ = BPF_ALU32_IMM(BPF_LSH, BPF_REG_A, 2);"
    },
    {
        "line": 208,
        "fullcodeline": "*insn++ = BPF_MOV64_REG(BPF_REG_X, BPF_REG_A);"
    },
    {
        "line": 210,
        "fullcodeline": "*insn = BPF_MOV64_REG(BPF_REG_A, BPF_REG_TMP);"
    },
    {
        "line": 216,
        "fullcodeline": "case BPF_RET | BPF_A:"
    },
    {
        "line": 217,
        "fullcodeline": "case BPF_RET | BPF_K:"
    },
    {
        "line": 221,
        "fullcodeline": "*insn = BPF_EXIT_INSN();"
    },
    {
        "line": 227,
        "fullcodeline": "stack_off = fp->k * 4  + 4;"
    },
    {
        "line": 228,
        "fullcodeline": "*insn = BPF_STX_MEM(BPF_W, BPF_REG_FP, BPF_CLASS(fp->code) =="
    },
    {
        "line": 240,
        "fullcodeline": "case BPF_LD | BPF_MEM:"
    },
    {
        "line": 241,
        "fullcodeline": "case BPF_LDX | BPF_MEM:"
    },
    {
        "line": 242,
        "fullcodeline": "stack_off = fp->k * 4  + 4;"
    },
    {
        "line": 243,
        "fullcodeline": "*insn = BPF_LDX_MEM(BPF_W, BPF_CLASS(fp->code) == BPF_LD  ?"
    },
    {
        "line": 249,
        "fullcodeline": "case BPF_LD | BPF_IMM:"
    },
    {
        "line": 250,
        "fullcodeline": "case BPF_LDX | BPF_IMM:"
    },
    {
        "line": 251,
        "fullcodeline": "*insn = BPF_MOV32_IMM(BPF_CLASS(fp->code) == BPF_LD ?"
    },
    {
        "line": 256,
        "fullcodeline": "case BPF_MISC | BPF_TAX:"
    },
    {
        "line": 257,
        "fullcodeline": "*insn = BPF_MOV64_REG(BPF_REG_X, BPF_REG_A);"
    },
    {
        "line": 261,
        "fullcodeline": "case BPF_MISC | BPF_TXA:"
    },
    {
        "line": 262,
        "fullcodeline": "*insn = BPF_MOV64_REG(BPF_REG_A, BPF_REG_X);"
    },
    {
        "line": 266,
        "fullcodeline": "case BPF_LD | BPF_W | BPF_LEN:"
    },
    {
        "line": 267,
        "fullcodeline": "case BPF_LDX | BPF_W | BPF_LEN:"
    },
    {
        "line": 274,
        "fullcodeline": "case BPF_LDX | BPF_ABS | BPF_W:"
    },
    {
        "line": 276,
        "fullcodeline": "*insn = BPF_LDX_MEM(BPF_W, BPF_REG_A, BPF_REG_CTX, fp->k);"
    },
    {
        "line": 286,
        "fullcodeline": "memcpy(new_insn, tmp_insns,"
    },
    {
        "line": 21,
        "fullcodeline": "return -ENOMEM;"
    },
    {
        "line": 85,
        "fullcodeline": "if (BPF_CLASS(fp->code) == BPF_LD &&"
    },
    {
        "line": 90,
        "fullcodeline": "if (fp->code == (BPF_ALU | BPF_DIV | BPF_X) ||"
    },
    {
        "line": 140,
        "fullcodeline": "if (BPF_SRC(fp->code) == BPF_K && (int) fp->k < 0) {"
    },
    {
        "line": 158,
        "fullcodeline": "if (fp->jf == 0) {"
    },
    {
        "line": 166,
        "fullcodeline": "if (fp->jt == 0) {"
    },
    {
        "line": 218,
        "fullcodeline": "if (BPF_RVAL(fp->code) == BPF_K)"
    },
    {
        "line": 235,
        "fullcodeline": "if (new_prog && new_prog->aux->stack_depth < stack_off)"
    },
    {
        "line": 287,
        "fullcodeline": "sizeof(*insn) * (insn - tmp_insns));"
    },
    {
        "line": 87,
        "fullcodeline": "convert_bpf_extensions(fp, &insn))"
    },
    {
        "line": 91,
        "fullcodeline": "fp->code == (BPF_ALU | BPF_MOD | BPF_X)) {"
    },
    {
        "line": 92,
        "fullcodeline": "*insn++ = BPF_MOV32_REG(BPF_REG_X, BPF_REG_X);"
    },
    {
        "line": 96,
        "fullcodeline": "*insn++ = BPF_JMP_IMM(BPF_JNE, BPF_REG_X, 0, 2);"
    },
    {
        "line": 97,
        "fullcodeline": "*insn++ = BPF_ALU32_REG(BPF_XOR, BPF_REG_A, BPF_REG_A);"
    },
    {
        "line": 98,
        "fullcodeline": "*insn++ = BPF_EXIT_INSN();"
    },
    {
        "line": 145,
        "fullcodeline": "*insn++ = BPF_MOV32_IMM(BPF_REG_TMP, fp->k);"
    },
    {
        "line": 147,
        "fullcodeline": "insn->dst_reg = BPF_REG_A;"
    },
    {
        "line": 148,
        "fullcodeline": "insn->src_reg = BPF_REG_TMP;"
    },
    {
        "line": 149,
        "fullcodeline": "bpf_src = BPF_X;"
    },
    {
        "line": 159,
        "fullcodeline": "insn->code = BPF_JMP | BPF_OP(fp->code) | bpf_src;"
    },
    {
        "line": 160,
        "fullcodeline": "target = i + fp->jt + 1;"
    },
    {
        "line": 161,
        "fullcodeline": "BPF_EMIT_JMP;"
    },
    {
        "line": 181,
        "fullcodeline": "target = i + fp->jf + 1;"
    },
    {
        "line": 182,
        "fullcodeline": "BPF_EMIT_JMP;"
    },
    {
        "line": 219,
        "fullcodeline": "*insn++ = BPF_MOV32_RAW(BPF_K, BPF_REG_0,"
    },
    {
        "line": 230,
        "fullcodeline": "-stack_off);"
    },
    {
        "line": 236,
        "fullcodeline": "new_prog->aux->stack_depth = stack_off;"
    },
    {
        "line": 245,
        "fullcodeline": "-stack_off);"
    },
    {
        "line": 86,
        "fullcodeline": "BPF_MODE(fp->code) == BPF_ABS &&"
    },
    {
        "line": 151,
        "fullcodeline": "insn->dst_reg = BPF_REG_A;"
    },
    {
        "line": 152,
        "fullcodeline": "insn->imm = fp->k;"
    },
    {
        "line": 153,
        "fullcodeline": "bpf_src = BPF_SRC(fp->code);"
    },
    {
        "line": 154,
        "fullcodeline": "insn->src_reg = bpf_src == BPF_X ? BPF_REG_X : 0;"
    },
    {
        "line": 167,
        "fullcodeline": "switch (BPF_OP(fp->code)) {"
    },
    {
        "line": 169,
        "fullcodeline": "insn->code = BPF_JMP | BPF_JNE | bpf_src;"
    },
    {
        "line": 172,
        "fullcodeline": "insn->code = BPF_JMP | BPF_JLE | bpf_src;"
    },
    {
        "line": 175,
        "fullcodeline": "insn->code = BPF_JMP | BPF_JLT | bpf_src;"
    }
]