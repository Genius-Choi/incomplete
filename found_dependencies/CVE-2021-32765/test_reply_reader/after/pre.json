[
    {
        "line": 7,
        "fullcodeline": "test(\"Error handling in reply parser: \");"
    },
    {
        "line": 8,
        "fullcodeline": "reader = redisReaderCreate();"
    },
    {
        "line": 9,
        "fullcodeline": "redisReaderFeed(reader,(char*)\"@foo\\r\\n\",6);"
    },
    {
        "line": 10,
        "fullcodeline": "ret = redisReaderGetReply(reader,NULL);"
    },
    {
        "line": 17,
        "fullcodeline": "test(\"Memory cleanup in reply parser: \");"
    },
    {
        "line": 18,
        "fullcodeline": "reader = redisReaderCreate();"
    },
    {
        "line": 19,
        "fullcodeline": "redisReaderFeed(reader,(char*)\"*2\\r\\n\",4);"
    },
    {
        "line": 20,
        "fullcodeline": "redisReaderFeed(reader,(char*)\"$5\\r\\nhello\\r\\n\",11);"
    },
    {
        "line": 21,
        "fullcodeline": "redisReaderFeed(reader,(char*)\"@foo\\r\\n\",6);"
    },
    {
        "line": 22,
        "fullcodeline": "ret = redisReaderGetReply(reader,NULL);"
    },
    {
        "line": 23,
        "fullcodeline": "test_cond(ret == REDIS_ERR &&"
    },
    {
        "line": 27,
        "fullcodeline": "reader = redisReaderCreate();"
    },
    {
        "line": 28,
        "fullcodeline": "test(\"Can handle arbitrarily nested multi-bulks: \");"
    },
    {
        "line": 32,
        "fullcodeline": "redisReaderFeed(reader,(char*)\"$6\\r\\nLOLWUT\\r\\n\",12);"
    },
    {
        "line": 33,
        "fullcodeline": "ret = redisReaderGetReply(reader,&reply);"
    },
    {
        "line": 34,
        "fullcodeline": "root = reply; /* Keep track of the root reply */"
    },
    {
        "line": 35,
        "fullcodeline": "test_cond(ret == REDIS_OK &&"
    },
    {
        "line": 39,
        "fullcodeline": "test(\"Can parse arbitrarily nested multi-bulks correctly: \");"
    },
    {
        "line": 44,
        "fullcodeline": "test_cond(((redisReply*)reply)->type == REDIS_REPLY_STRING &&"
    },
    {
        "line": 46,
        "fullcodeline": "freeReplyObject(root);"
    },
    {
        "line": 49,
        "fullcodeline": "test(\"Correctly parses LLONG_MAX: \");"
    },
    {
        "line": 50,
        "fullcodeline": "reader = redisReaderCreate();"
    },
    {
        "line": 51,
        "fullcodeline": "redisReaderFeed(reader, \":9223372036854775807\\r\\n\",22);"
    },
    {
        "line": 52,
        "fullcodeline": "ret = redisReaderGetReply(reader,&reply);"
    },
    {
        "line": 53,
        "fullcodeline": "test_cond(ret == REDIS_OK &&"
    },
    {
        "line": 56,
        "fullcodeline": "freeReplyObject(reply);"
    },
    {
        "line": 59,
        "fullcodeline": "test(\"Set error when > LLONG_MAX: \");"
    },
    {
        "line": 60,
        "fullcodeline": "reader = redisReaderCreate();"
    },
    {
        "line": 61,
        "fullcodeline": "redisReaderFeed(reader, \":9223372036854775808\\r\\n\",22);"
    },
    {
        "line": 62,
        "fullcodeline": "ret = redisReaderGetReply(reader,&reply);"
    },
    {
        "line": 65,
        "fullcodeline": "freeReplyObject(reply);"
    },
    {
        "line": 68,
        "fullcodeline": "test(\"Correctly parses LLONG_MIN: \");"
    },
    {
        "line": 69,
        "fullcodeline": "reader = redisReaderCreate();"
    },
    {
        "line": 70,
        "fullcodeline": "redisReaderFeed(reader, \":-9223372036854775808\\r\\n\",23);"
    },
    {
        "line": 71,
        "fullcodeline": "ret = redisReaderGetReply(reader,&reply);"
    },
    {
        "line": 72,
        "fullcodeline": "test_cond(ret == REDIS_OK &&"
    },
    {
        "line": 75,
        "fullcodeline": "freeReplyObject(reply);"
    },
    {
        "line": 78,
        "fullcodeline": "test(\"Set error when < LLONG_MIN: \");"
    },
    {
        "line": 79,
        "fullcodeline": "reader = redisReaderCreate();"
    },
    {
        "line": 80,
        "fullcodeline": "redisReaderFeed(reader, \":-9223372036854775809\\r\\n\",23);"
    },
    {
        "line": 81,
        "fullcodeline": "ret = redisReaderGetReply(reader,&reply);"
    },
    {
        "line": 82,
        "fullcodeline": "test_cond(ret == REDIS_ERR &&"
    },
    {
        "line": 84,
        "fullcodeline": "freeReplyObject(reply);"
    },
    {
        "line": 87,
        "fullcodeline": "test(\"Set error when array < -1: \");"
    },
    {
        "line": 88,
        "fullcodeline": "reader = redisReaderCreate();"
    },
    {
        "line": 89,
        "fullcodeline": "redisReaderFeed(reader, \"*-2\\r\\n+asdf\\r\\n\",12);"
    },
    {
        "line": 90,
        "fullcodeline": "ret = redisReaderGetReply(reader,&reply);"
    },
    {
        "line": 91,
        "fullcodeline": "test_cond(ret == REDIS_ERR &&"
    },
    {
        "line": 93,
        "fullcodeline": "freeReplyObject(reply);"
    },
    {
        "line": 96,
        "fullcodeline": "test(\"Set error when bulk < -1: \");"
    },
    {
        "line": 97,
        "fullcodeline": "reader = redisReaderCreate();"
    },
    {
        "line": 98,
        "fullcodeline": "redisReaderFeed(reader, \"$-2\\r\\nasdf\\r\\n\",11);"
    },
    {
        "line": 99,
        "fullcodeline": "ret = redisReaderGetReply(reader,&reply);"
    },
    {
        "line": 100,
        "fullcodeline": "test_cond(ret == REDIS_ERR &&"
    },
    {
        "line": 102,
        "fullcodeline": "freeReplyObject(reply);"
    },
    {
        "line": 105,
        "fullcodeline": "test(\"Can configure maximum multi-bulk elements: \");"
    },
    {
        "line": 106,
        "fullcodeline": "reader = redisReaderCreate();"
    },
    {
        "line": 107,
        "fullcodeline": "reader->maxelements = 1024;"
    },
    {
        "line": 108,
        "fullcodeline": "redisReaderFeed(reader, \"*1025\\r\\n\", 7);"
    },
    {
        "line": 109,
        "fullcodeline": "ret = redisReaderGetReply(reader,&reply);"
    },
    {
        "line": 110,
        "fullcodeline": "test_cond(ret == REDIS_ERR &&"
    },
    {
        "line": 112,
        "fullcodeline": "freeReplyObject(reply);"
    },
    {
        "line": 115,
        "fullcodeline": "test(\"Multi-bulk never overflows regardless of maxelements: \");"
    },
    {
        "line": 116,
        "fullcodeline": "size_t bad_mbulk_len = (SIZE_MAX / sizeof(void *)) + 3;"
    },
    {
        "line": 117,
        "fullcodeline": "char bad_mbulk_reply[100];"
    },
    {
        "line": 118,
        "fullcodeline": "snprintf(bad_mbulk_reply, sizeof(bad_mbulk_reply), \"*%llu\\r\\n+asdf\\r\\n\","
    },
    {
        "line": 121,
        "fullcodeline": "reader = redisReaderCreate();"
    },
    {
        "line": 122,
        "fullcodeline": "reader->maxelements = 0;    /* Don't rely on default limit */"
    },
    {
        "line": 123,
        "fullcodeline": "redisReaderFeed(reader, bad_mbulk_reply, strlen(bad_mbulk_reply));"
    },
    {
        "line": 124,
        "fullcodeline": "ret = redisReaderGetReply(reader,&reply);"
    },
    {
        "line": 125,
        "fullcodeline": "test_cond(ret == REDIS_ERR && strcasecmp(reader->errstr, \"Out of memory\") == 0);"
    },
    {
        "line": 126,
        "fullcodeline": "freeReplyObject(reply);"
    },
    {
        "line": 149,
        "fullcodeline": "test(\"Works with NULL functions for reply: \");"
    },
    {
        "line": 150,
        "fullcodeline": "reader = redisReaderCreate();"
    },
    {
        "line": 151,
        "fullcodeline": "reader->fn = NULL;"
    },
    {
        "line": 152,
        "fullcodeline": "redisReaderFeed(reader,(char*)\"+OK\\r\\n\",5);"
    },
    {
        "line": 153,
        "fullcodeline": "ret = redisReaderGetReply(reader,&reply);"
    },
    {
        "line": 157,
        "fullcodeline": "test(\"Works when a single newline (\\\\r\\\\n) covers two calls to feed: \");"
    },
    {
        "line": 158,
        "fullcodeline": "reader = redisReaderCreate();"
    },
    {
        "line": 159,
        "fullcodeline": "reader->fn = NULL;"
    },
    {
        "line": 160,
        "fullcodeline": "redisReaderFeed(reader,(char*)\"+OK\\r\",4);"
    },
    {
        "line": 161,
        "fullcodeline": "ret = redisReaderGetReply(reader,&reply);"
    },
    {
        "line": 162,
        "fullcodeline": "assert(ret == REDIS_OK && reply == NULL);"
    },
    {
        "line": 163,
        "fullcodeline": "redisReaderFeed(reader,(char*)\"\\n\",1);"
    },
    {
        "line": 164,
        "fullcodeline": "ret = redisReaderGetReply(reader,&reply);"
    },
    {
        "line": 165,
        "fullcodeline": "test_cond(ret == REDIS_OK && reply == (void*)REDIS_REPLY_STATUS);"
    },
    {
        "line": 168,
        "fullcodeline": "test(\"Don't reset state after protocol error: \");"
    },
    {
        "line": 169,
        "fullcodeline": "reader = redisReaderCreate();"
    },
    {
        "line": 170,
        "fullcodeline": "reader->fn = NULL;"
    },
    {
        "line": 171,
        "fullcodeline": "redisReaderFeed(reader,(char*)\"x\",1);"
    },
    {
        "line": 172,
        "fullcodeline": "ret = redisReaderGetReply(reader,&reply);"
    },
    {
        "line": 173,
        "fullcodeline": "assert(ret == REDIS_ERR);"
    },
    {
        "line": 174,
        "fullcodeline": "ret = redisReaderGetReply(reader,&reply);"
    },
    {
        "line": 175,
        "fullcodeline": "test_cond(ret == REDIS_ERR && reply == NULL);"
    },
    {
        "line": 179,
        "fullcodeline": "test(\"Don't do empty allocation for empty multi bulk: \");"
    },
    {
        "line": 180,
        "fullcodeline": "reader = redisReaderCreate();"
    },
    {
        "line": 181,
        "fullcodeline": "redisReaderFeed(reader,(char*)\"*0\\r\\n\",4);"
    },
    {
        "line": 182,
        "fullcodeline": "ret = redisReaderGetReply(reader,&reply);"
    },
    {
        "line": 183,
        "fullcodeline": "test_cond(ret == REDIS_OK &&"
    },
    {
        "line": 186,
        "fullcodeline": "freeReplyObject(reply);"
    },
    {
        "line": 190,
        "fullcodeline": "test(\"Can parse RESP3 verbatim strings: \");"
    },
    {
        "line": 191,
        "fullcodeline": "reader = redisReaderCreate();"
    },
    {
        "line": 192,
        "fullcodeline": "redisReaderFeed(reader,(char*)\"=10\\r\\ntxt:LOLWUT\\r\\n\",17);"
    },
    {
        "line": 193,
        "fullcodeline": "ret = redisReaderGetReply(reader,&reply);"
    },
    {
        "line": 194,
        "fullcodeline": "test_cond(ret == REDIS_OK &&"
    },
    {
        "line": 197,
        "fullcodeline": "freeReplyObject(reply);"
    },
    {
        "line": 201,
        "fullcodeline": "test(\"Can parse RESP3 push messages: \");"
    },
    {
        "line": 202,
        "fullcodeline": "reader = redisReaderCreate();"
    },
    {
        "line": 203,
        "fullcodeline": "redisReaderFeed(reader,(char*)\">2\\r\\n$6\\r\\nLOLWUT\\r\\n:42\\r\\n\",21);"
    },
    {
        "line": 204,
        "fullcodeline": "ret = redisReaderGetReply(reader,&reply);"
    },
    {
        "line": 205,
        "fullcodeline": "test_cond(ret == REDIS_OK &&"
    },
    {
        "line": 212,
        "fullcodeline": "freeReplyObject(reply);"
    },
    {
        "line": 213,
        "fullcodeline": "redisReaderFree(reader);"
    },
    {
        "line": 11,
        "fullcodeline": "test_cond(ret == REDIS_ERR &&"
    },
    {
        "line": 29,
        "fullcodeline": "for (i = 0; i < 128; i++) {"
    },
    {
        "line": 40,
        "fullcodeline": "while(i--) {"
    },
    {
        "line": 63,
        "fullcodeline": "test_cond(ret == REDIS_ERR &&"
    },
    {
        "line": 119,
        "fullcodeline": "(unsigned long long) bad_mbulk_len);"
    },
    {
        "line": 154,
        "fullcodeline": "test_cond(ret == REDIS_OK && reply == (void*)REDIS_REPLY_STATUS);"
    },
    {
        "line": 12,
        "fullcodeline": "strcasecmp(reader->errstr,\"Protocol error, got \\\"@\\\" as reply type byte\") == 0);"
    },
    {
        "line": 24,
        "fullcodeline": "strcasecmp(reader->errstr,\"Protocol error, got \\\"@\\\" as reply type byte\") == 0);"
    },
    {
        "line": 30,
        "fullcodeline": "redisReaderFeed(reader,(char*)\"*1\\r\\n\", 4);"
    },
    {
        "line": 37,
        "fullcodeline": "((redisReply*)reply)->elements == 1);"
    },
    {
        "line": 41,
        "fullcodeline": "assert(reply != NULL && ((redisReply*)reply)->type == REDIS_REPLY_ARRAY);"
    },
    {
        "line": 42,
        "fullcodeline": "reply = ((redisReply*)reply)->element[0];"
    },
    {
        "line": 45,
        "fullcodeline": "!memcmp(((redisReply*)reply)->str, \"LOLWUT\", 6));"
    },
    {
        "line": 55,
        "fullcodeline": "((redisReply*)reply)->integer == LLONG_MAX);"
    },
    {
        "line": 64,
        "fullcodeline": "strcasecmp(reader->errstr,\"Bad integer value\") == 0);"
    },
    {
        "line": 74,
        "fullcodeline": "((redisReply*)reply)->integer == LLONG_MIN);"
    },
    {
        "line": 83,
        "fullcodeline": "strcasecmp(reader->errstr,\"Bad integer value\") == 0);"
    },
    {
        "line": 92,
        "fullcodeline": "strcasecmp(reader->errstr,\"Multi-bulk length out of range\") == 0);"
    },
    {
        "line": 101,
        "fullcodeline": "strcasecmp(reader->errstr,\"Bulk string length out of range\") == 0);"
    },
    {
        "line": 111,
        "fullcodeline": "strcasecmp(reader->errstr, \"Multi-bulk length out of range\") == 0);"
    },
    {
        "line": 185,
        "fullcodeline": "((redisReply*)reply)->elements == 0);"
    },
    {
        "line": 196,
        "fullcodeline": "!memcmp(((redisReply*)reply)->str,\"LOLWUT\", 6));"
    },
    {
        "line": 211,
        "fullcodeline": "((redisReply*)reply)->element[1]->integer == 42);"
    },
    {
        "line": 36,
        "fullcodeline": "((redisReply*)reply)->type == REDIS_REPLY_ARRAY &&"
    },
    {
        "line": 54,
        "fullcodeline": "((redisReply*)reply)->type == REDIS_REPLY_INTEGER &&"
    },
    {
        "line": 73,
        "fullcodeline": "((redisReply*)reply)->type == REDIS_REPLY_INTEGER &&"
    },
    {
        "line": 184,
        "fullcodeline": "((redisReply*)reply)->type == REDIS_REPLY_ARRAY &&"
    },
    {
        "line": 195,
        "fullcodeline": "((redisReply*)reply)->type == REDIS_REPLY_VERB &&"
    },
    {
        "line": 210,
        "fullcodeline": "((redisReply*)reply)->element[1]->type == REDIS_REPLY_INTEGER &&"
    },
    {
        "line": 209,
        "fullcodeline": "!memcmp(((redisReply*)reply)->element[0]->str,\"LOLWUT\",6) &&"
    },
    {
        "line": 208,
        "fullcodeline": "((redisReply*)reply)->element[0]->type == REDIS_REPLY_STRING &&"
    },
    {
        "line": 207,
        "fullcodeline": "((redisReply*)reply)->elements == 2 &&"
    },
    {
        "line": 206,
        "fullcodeline": "((redisReply*)reply)->type == REDIS_REPLY_PUSH &&"
    }
]