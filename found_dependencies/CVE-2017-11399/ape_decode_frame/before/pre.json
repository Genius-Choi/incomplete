[
    {
        "line": 4,
        "fullcodeline": "AVFrame *frame     = data;"
    },
    {
        "line": 5,
        "fullcodeline": "const uint8_t *buf = avpkt->data;"
    },
    {
        "line": 6,
        "fullcodeline": "APEContext *s = avctx->priv_data;"
    },
    {
        "line": 15,
        "fullcodeline": "av_assert0(s->samples >= 0);"
    },
    {
        "line": 86,
        "fullcodeline": "blockstodecode = FFMIN(s->blocks_per_loop, s->samples);"
    },
    {
        "line": 93,
        "fullcodeline": "av_fast_malloc(&s->decoded_buffer, &s->decoded_size,"
    },
    {
        "line": 97,
        "fullcodeline": "memset(s->decoded_buffer, 0, s->decoded_size);"
    },
    {
        "line": 102,
        "fullcodeline": "frame->nb_samples = blockstodecode;"
    },
    {
        "line": 106,
        "fullcodeline": "s->error=0;"
    },
    {
        "line": 144,
        "fullcodeline": "s->samples -= blockstodecode;"
    },
    {
        "line": 17,
        "fullcodeline": "if(!s->samples){"
    },
    {
        "line": 81,
        "fullcodeline": "if (!s->data) {"
    },
    {
        "line": 89,
        "fullcodeline": "if (s->fileversion < 3930)"
    },
    {
        "line": 94,
        "fullcodeline": "2 * FFALIGN(blockstodecode, 8) * sizeof(*s->decoded_buffer));"
    },
    {
        "line": 95,
        "fullcodeline": "if (!s->decoded_buffer)"
    },
    {
        "line": 148,
        "fullcodeline": "return !s->samples ? avpkt->size : 0;"
    },
    {
        "line": 29,
        "fullcodeline": "buf_size = avpkt->size & ~3;"
    },
    {
        "line": 36,
        "fullcodeline": "av_fast_padded_malloc(&s->data, &s->data_size, buf_size);"
    },
    {
        "line": 42,
        "fullcodeline": "s->ptr = s->data;"
    },
    {
        "line": 43,
        "fullcodeline": "s->data_end = s->data + buf_size;"
    },
    {
        "line": 45,
        "fullcodeline": "nblocks = bytestream_get_be32(&s->ptr);"
    },
    {
        "line": 46,
        "fullcodeline": "offset  = bytestream_get_be32(&s->ptr);"
    },
    {
        "line": 78,
        "fullcodeline": "s->samples = nblocks;"
    },
    {
        "line": 90,
        "fullcodeline": "blockstodecode = s->samples;"
    },
    {
        "line": 99,
        "fullcodeline": "s->decoded[1] = s->decoded_buffer + FFALIGN(blockstodecode, 8);"
    },
    {
        "line": 103,
        "fullcodeline": "if ((ret = ff_get_buffer(avctx, frame, 0)) < 0)"
    },
    {
        "line": 108,
        "fullcodeline": "if ((s->channels == 1) || (s->frameflags & APE_FRAMECODE_PSEUDO_STEREO))"
    },
    {
        "line": 109,
        "fullcodeline": "ape_unpack_mono(s, blockstodecode);"
    },
    {
        "line": 21,
        "fullcodeline": "if (!avpkt->size) {"
    },
    {
        "line": 25,
        "fullcodeline": "if (avpkt->size < 8) {"
    },
    {
        "line": 30,
        "fullcodeline": "if (buf_size != avpkt->size) {"
    },
    {
        "line": 34,
        "fullcodeline": "if (s->fileversion < 3950) // previous versions overread two bytes"
    },
    {
        "line": 37,
        "fullcodeline": "if (!s->data)"
    },
    {
        "line": 40,
        "fullcodeline": "buf_size >> 2);"
    },
    {
        "line": 41,
        "fullcodeline": "memset(s->data + (buf_size & ~3), 0, buf_size & 3);"
    },
    {
        "line": 47,
        "fullcodeline": "if (s->fileversion >= 3900) {"
    },
    {
        "line": 96,
        "fullcodeline": "return AVERROR(ENOMEM);"
    },
    {
        "line": 111,
        "fullcodeline": "ape_unpack_stereo(s, blockstodecode);"
    },
    {
        "line": 122,
        "fullcodeline": "for (ch = 0; ch < s->channels; ch++) {"
    },
    {
        "line": 129,
        "fullcodeline": "for (ch = 0; ch < s->channels; ch++) {"
    },
    {
        "line": 136,
        "fullcodeline": "for (ch = 0; ch < s->channels; ch++) {"
    },
    {
        "line": 22,
        "fullcodeline": "*got_frame_ptr = 0;"
    },
    {
        "line": 31,
        "fullcodeline": "av_log(avctx, AV_LOG_WARNING, \"packet size is not a multiple of 4. \""
    },
    {
        "line": 35,
        "fullcodeline": "buf_size += 2;"
    },
    {
        "line": 57,
        "fullcodeline": "s->ptr += offset;"
    },
    {
        "line": 67,
        "fullcodeline": "if (!nblocks || nblocks > INT_MAX) {"
    },
    {
        "line": 74,
        "fullcodeline": "if (init_frame_decoder(s) < 0) {"
    },
    {
        "line": 123,
        "fullcodeline": "sample8 = (uint8_t *)frame->data[ch];"
    },
    {
        "line": 130,
        "fullcodeline": "sample16 = (int16_t *)frame->data[ch];"
    },
    {
        "line": 137,
        "fullcodeline": "sample24 = (int32_t *)frame->data[ch];"
    },
    {
        "line": 38,
        "fullcodeline": "return AVERROR(ENOMEM);"
    },
    {
        "line": 48,
        "fullcodeline": "if (offset > 3) {"
    },
    {
        "line": 53,
        "fullcodeline": "if (s->data_end - s->ptr < offset) {"
    },
    {
        "line": 124,
        "fullcodeline": "for (i = 0; i < blockstodecode; i++)"
    },
    {
        "line": 131,
        "fullcodeline": "for (i = 0; i < blockstodecode; i++)"
    },
    {
        "line": 138,
        "fullcodeline": "for (i = 0; i < blockstodecode; i++)"
    },
    {
        "line": 50,
        "fullcodeline": "s->data = NULL;"
    },
    {
        "line": 61,
        "fullcodeline": "if (s->fileversion > 3800)"
    },
    {
        "line": 125,
        "fullcodeline": "*sample8++ = (s->decoded[ch][i] + 0x80) & 0xff;"
    },
    {
        "line": 139,
        "fullcodeline": "*sample24++ = s->decoded[ch][i] << 8;"
    },
    {
        "line": 59,
        "fullcodeline": "if ((ret = init_get_bits8(&s->gb, s->ptr, s->data_end - s->ptr)) < 0)"
    },
    {
        "line": 62,
        "fullcodeline": "skip_bits_long(&s->gb, offset * 8);"
    }
]