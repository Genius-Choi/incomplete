[
    {
        "line": 4,
        "fullcodeline": "AVFrame *frame     = data;"
    },
    {
        "line": 5,
        "fullcodeline": "const uint8_t *buf = avpkt->data;"
    },
    {
        "line": 6,
        "fullcodeline": "APEContext *s = avctx->priv_data;"
    },
    {
        "line": 16,
        "fullcodeline": "av_assert0(s->samples >= 0);"
    },
    {
        "line": 87,
        "fullcodeline": "blockstodecode = FFMIN(s->blocks_per_loop, s->samples);"
    },
    {
        "line": 94,
        "fullcodeline": "decoded_buffer_size = 2LL * FFALIGN(blockstodecode, 8) * sizeof(*s->decoded_buffer);"
    },
    {
        "line": 95,
        "fullcodeline": "av_assert0(decoded_buffer_size <= INT_MAX);"
    },
    {
        "line": 96,
        "fullcodeline": "av_fast_malloc(&s->decoded_buffer, &s->decoded_size, decoded_buffer_size);"
    },
    {
        "line": 99,
        "fullcodeline": "memset(s->decoded_buffer, 0, s->decoded_size);"
    },
    {
        "line": 100,
        "fullcodeline": "s->decoded[0] = s->decoded_buffer;"
    },
    {
        "line": 101,
        "fullcodeline": "s->decoded[1] = s->decoded_buffer + FFALIGN(blockstodecode, 8);"
    },
    {
        "line": 104,
        "fullcodeline": "frame->nb_samples = blockstodecode;"
    },
    {
        "line": 108,
        "fullcodeline": "s->error=0;"
    },
    {
        "line": 114,
        "fullcodeline": "emms_c();"
    },
    {
        "line": 146,
        "fullcodeline": "s->samples -= blockstodecode;"
    },
    {
        "line": 148,
        "fullcodeline": "*got_frame_ptr = 1;"
    },
    {
        "line": 18,
        "fullcodeline": "if(!s->samples){"
    },
    {
        "line": 82,
        "fullcodeline": "if (!s->data) {"
    },
    {
        "line": 90,
        "fullcodeline": "if (s->fileversion < 3930)"
    },
    {
        "line": 97,
        "fullcodeline": "if (!s->decoded_buffer)"
    },
    {
        "line": 105,
        "fullcodeline": "if ((ret = ff_get_buffer(avctx, frame, 0)) < 0)"
    },
    {
        "line": 110,
        "fullcodeline": "if ((s->channels == 1) || (s->frameflags & APE_FRAMECODE_PSEUDO_STEREO))"
    },
    {
        "line": 150,
        "fullcodeline": "return !s->samples ? avpkt->size : 0;"
    },
    {
        "line": 30,
        "fullcodeline": "buf_size = avpkt->size & ~3;"
    },
    {
        "line": 37,
        "fullcodeline": "av_fast_padded_malloc(&s->data, &s->data_size, buf_size);"
    },
    {
        "line": 40,
        "fullcodeline": "s->bdsp.bswap_buf((uint32_t *) s->data, (const uint32_t *) buf,"
    },
    {
        "line": 42,
        "fullcodeline": "memset(s->data + (buf_size & ~3), 0, buf_size & 3);"
    },
    {
        "line": 43,
        "fullcodeline": "s->ptr = s->data;"
    },
    {
        "line": 44,
        "fullcodeline": "s->data_end = s->data + buf_size;"
    },
    {
        "line": 46,
        "fullcodeline": "nblocks = bytestream_get_be32(&s->ptr);"
    },
    {
        "line": 47,
        "fullcodeline": "offset  = bytestream_get_be32(&s->ptr);"
    },
    {
        "line": 79,
        "fullcodeline": "s->samples = nblocks;"
    },
    {
        "line": 83,
        "fullcodeline": "*got_frame_ptr = 0;"
    },
    {
        "line": 91,
        "fullcodeline": "blockstodecode = s->samples;"
    },
    {
        "line": 111,
        "fullcodeline": "ape_unpack_mono(s, blockstodecode);"
    },
    {
        "line": 117,
        "fullcodeline": "s->samples=0;"
    },
    {
        "line": 118,
        "fullcodeline": "av_log(avctx, AV_LOG_ERROR, \"Error decoding frame\\n\");"
    },
    {
        "line": 22,
        "fullcodeline": "if (!avpkt->size) {"
    },
    {
        "line": 26,
        "fullcodeline": "if (avpkt->size < 8) {"
    },
    {
        "line": 31,
        "fullcodeline": "if (buf_size != avpkt->size) {"
    },
    {
        "line": 35,
        "fullcodeline": "if (s->fileversion < 3950) // previous versions overread two bytes"
    },
    {
        "line": 38,
        "fullcodeline": "if (!s->data)"
    },
    {
        "line": 41,
        "fullcodeline": "buf_size >> 2);"
    },
    {
        "line": 48,
        "fullcodeline": "if (s->fileversion >= 3900) {"
    },
    {
        "line": 68,
        "fullcodeline": "if (!nblocks || nblocks > INT_MAX / 2 / sizeof(*s->decoded_buffer) - 8) {"
    },
    {
        "line": 75,
        "fullcodeline": "if (init_frame_decoder(s) < 0) {"
    },
    {
        "line": 98,
        "fullcodeline": "return AVERROR(ENOMEM);"
    },
    {
        "line": 113,
        "fullcodeline": "ape_unpack_stereo(s, blockstodecode);"
    },
    {
        "line": 124,
        "fullcodeline": "for (ch = 0; ch < s->channels; ch++) {"
    },
    {
        "line": 131,
        "fullcodeline": "for (ch = 0; ch < s->channels; ch++) {"
    },
    {
        "line": 138,
        "fullcodeline": "for (ch = 0; ch < s->channels; ch++) {"
    },
    {
        "line": 23,
        "fullcodeline": "*got_frame_ptr = 0;"
    },
    {
        "line": 27,
        "fullcodeline": "av_log(avctx, AV_LOG_ERROR, \"Packet is too small\\n\");"
    },
    {
        "line": 32,
        "fullcodeline": "av_log(avctx, AV_LOG_WARNING, \"packet size is not a multiple of 4. \""
    },
    {
        "line": 36,
        "fullcodeline": "buf_size += 2;"
    },
    {
        "line": 58,
        "fullcodeline": "s->ptr += offset;"
    },
    {
        "line": 76,
        "fullcodeline": "av_log(avctx, AV_LOG_ERROR, \"Error reading frame header\\n\");"
    },
    {
        "line": 39,
        "fullcodeline": "return AVERROR(ENOMEM);"
    },
    {
        "line": 49,
        "fullcodeline": "if (offset > 3) {"
    },
    {
        "line": 54,
        "fullcodeline": "if (s->data_end - s->ptr < offset) {"
    },
    {
        "line": 126,
        "fullcodeline": "for (i = 0; i < blockstodecode; i++)"
    },
    {
        "line": 127,
        "fullcodeline": "*sample8++ = (s->decoded[ch][i] + 0x80) & 0xff;"
    },
    {
        "line": 133,
        "fullcodeline": "for (i = 0; i < blockstodecode; i++)"
    },
    {
        "line": 140,
        "fullcodeline": "for (i = 0; i < blockstodecode; i++)"
    },
    {
        "line": 141,
        "fullcodeline": "*sample24++ = s->decoded[ch][i] << 8;"
    },
    {
        "line": 50,
        "fullcodeline": "av_log(avctx, AV_LOG_ERROR, \"Incorrect offset passed\\n\");"
    },
    {
        "line": 51,
        "fullcodeline": "s->data = NULL;"
    },
    {
        "line": 55,
        "fullcodeline": "av_log(avctx, AV_LOG_ERROR, \"Packet is too small\\n\");"
    },
    {
        "line": 60,
        "fullcodeline": "if ((ret = init_get_bits8(&s->gb, s->ptr, s->data_end - s->ptr)) < 0)"
    },
    {
        "line": 62,
        "fullcodeline": "if (s->fileversion > 3800)"
    },
    {
        "line": 63,
        "fullcodeline": "skip_bits_long(&s->gb, offset * 8);"
    },
    {
        "line": 134,
        "fullcodeline": "*sample16++ = s->decoded[ch][i];"
    },
    {
        "line": 65,
        "fullcodeline": "skip_bits_long(&s->gb, offset);"
    }
]