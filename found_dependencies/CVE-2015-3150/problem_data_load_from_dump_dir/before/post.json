[
    {
        "line": 6,
        "fullcodeline": "dd_init_next_file(dd);"
    },
    {
        "line": 7,
        "fullcodeline": "while (dd_get_next_file(dd, &short_name, &full_name))"
    },
    {
        "line": 22,
        "fullcodeline": "ssize_t sz = 4*1024;"
    },
    {
        "line": 23,
        "fullcodeline": "char *text = is_text_file(full_name, &sz);"
    },
    {
        "line": 48,
        "fullcodeline": "char *nl = strchr(content, '\\n');"
    },
    {
        "line": 55,
        "fullcodeline": "char *sanitized = sanitize_utf8(content,"
    },
    {
        "line": 64,
        "fullcodeline": "bool editable = is_editable_file(short_name);"
    },
    {
        "line": 65,
        "fullcodeline": "int flags = 0;"
    },
    {
        "line": 71,
        "fullcodeline": "static const char *const list_files[] = {"
    },
    {
        "line": 86,
        "fullcodeline": "problem_data_add(problem_data,"
    },
    {
        "line": 91,
        "fullcodeline": "free(content);"
    },
    {
        "line": 93,
        "fullcodeline": "free(short_name);"
    },
    {
        "line": 94,
        "fullcodeline": "free(full_name);"
    },
    {
        "line": 9,
        "fullcodeline": "if (excluding && is_in_string_list(short_name, excluding))"
    },
    {
        "line": 15,
        "fullcodeline": "if (short_name[0] == '#'"
    },
    {
        "line": 24,
        "fullcodeline": "if (!text || text == HUGE_TEXT)"
    },
    {
        "line": 36,
        "fullcodeline": "if (sz < 4*1024) /* did is_text_file read entire file? */"
    },
    {
        "line": 49,
        "fullcodeline": "if (nl && nl[1] == '\\0')"
    },
    {
        "line": 80,
        "fullcodeline": "if (is_in_string_list(short_name, (char**)list_files))"
    },
    {
        "line": 83,
        "fullcodeline": "if (strcmp(short_name, FILENAME_TIME) == 0)"
    },
    {
        "line": 16,
        "fullcodeline": "|| (short_name[0] && short_name[strlen(short_name) - 1] == '~')"
    },
    {
        "line": 26,
        "fullcodeline": "int flag = !text ? CD_FLAG_BIN : (CD_FLAG_BIN+CD_FLAG_BIGTXT);"
    },
    {
        "line": 27,
        "fullcodeline": "problem_data_add(problem_data,"
    },
    {
        "line": 39,
        "fullcodeline": "content = text;"
    },
    {
        "line": 50,
        "fullcodeline": "*nl = '\\0';"
    },
    {
        "line": 56,
        "fullcodeline": "(SANITIZE_ALL & ~SANITIZE_LF & ~SANITIZE_TAB)"
    },
    {
        "line": 60,
        "fullcodeline": "free(content);"
    },
    {
        "line": 61,
        "fullcodeline": "content = sanitized;"
    },
    {
        "line": 67,
        "fullcodeline": "flags |= CD_FLAG_TXT | CD_FLAG_ISEDITABLE;"
    },
    {
        "line": 81,
        "fullcodeline": "flags |= CD_FLAG_LIST;"
    },
    {
        "line": 84,
        "fullcodeline": "flags |= CD_FLAG_UNIXTIME;"
    },
    {
        "line": 30,
        "fullcodeline": "flag + CD_FLAG_ISNOTEDITABLE"
    },
    {
        "line": 44,
        "fullcodeline": "free(text);"
    },
    {
        "line": 45,
        "fullcodeline": "content = dd_load_text(dd, short_name);"
    },
    {
        "line": 69,
        "fullcodeline": "flags |= CD_FLAG_TXT | CD_FLAG_ISNOTEDITABLE;"
    }
]