[
    {
        "line": 6,
        "fullcodeline": "char pid_buf[sizeof(long)*3 + 2];"
    },
    {
        "line": 7,
        "fullcodeline": "snprintf(pid_buf, sizeof(pid_buf), \"%lu\", (long)getpid());"
    },
    {
        "line": 9,
        "fullcodeline": "unsigned dirname_len = strlen(dd->dd_dirname);"
    },
    {
        "line": 10,
        "fullcodeline": "char lock_buf[dirname_len + sizeof(\"/.lock\")];"
    },
    {
        "line": 11,
        "fullcodeline": "strcpy(lock_buf, dd->dd_dirname);"
    },
    {
        "line": 12,
        "fullcodeline": "strcpy(lock_buf + dirname_len, \"/.lock\");"
    },
    {
        "line": 14,
        "fullcodeline": "unsigned count = NO_TIME_FILE_COUNT;"
    },
    {
        "line": 51,
        "fullcodeline": "dd->locked = true;"
    },
    {
        "line": 29,
        "fullcodeline": "if (sleep_usec == WAIT_FOR_OTHER_PROCESS_USLEEP) /* yes */"
    },
    {
        "line": 4,
        "fullcodeline": "error_msg_and_die(\"Locking bug on '%s'\", dd->dd_dirname);"
    },
    {
        "line": 19,
        "fullcodeline": "int r = create_symlink_lockfile(lock_buf, pid_buf);"
    },
    {
        "line": 25,
        "fullcodeline": "usleep(sleep_usec);"
    },
    {
        "line": 31,
        "fullcodeline": "const char *missing_file = dd_check(dd);"
    },
    {
        "line": 20,
        "fullcodeline": "if (r < 0)"
    },
    {
        "line": 22,
        "fullcodeline": "if (r > 0)"
    },
    {
        "line": 39,
        "fullcodeline": "xunlink(lock_buf);"
    },
    {
        "line": 40,
        "fullcodeline": "log_warning(\"Unlocked '%s' (no or corrupted '%s' file)\", lock_buf, missing_file);"
    },
    {
        "line": 46,
        "fullcodeline": "usleep(NO_TIME_FILE_USLEEP);"
    },
    {
        "line": 41,
        "fullcodeline": "if (--count == 0 || flags & DD_DONT_WAIT_FOR_LOCK)"
    },
    {
        "line": 43,
        "fullcodeline": "errno = EISDIR; /* \"this is an ordinary dir, not dump dir\" */"
    },
    {
        "line": 44,
        "fullcodeline": "return -1;"
    }
]