[
    {
        "line": 7,
        "fullcodeline": "static const char *const protected_elements[] = {"
    },
    {
        "line": 27,
        "fullcodeline": "int dir_fd = dd_openfd(problem_id);"
    },
    {
        "line": 54,
        "fullcodeline": "struct dump_dir *dd = dd_fdopendir(dir_fd, problem_id, /* flags : */ 0);"
    },
    {
        "line": 13,
        "fullcodeline": "for (const char *const *protected = protected_elements; *protected; ++protected)"
    },
    {
        "line": 28,
        "fullcodeline": "if (dir_fd < 0)"
    },
    {
        "line": 55,
        "fullcodeline": "if (!dd)"
    },
    {
        "line": 30,
        "fullcodeline": "perror_msg(\"can't open problem directory '%s'\", problem_id);"
    },
    {
        "line": 35,
        "fullcodeline": "if (!fdump_dir_accessible_by_uid(dir_fd, caller_uid))"
    },
    {
        "line": 15,
        "fullcodeline": "if (strcmp(*protected, element) == 0)"
    },
    {
        "line": 37,
        "fullcodeline": "if (errno == ENOTDIR)"
    },
    {
        "line": 60,
        "fullcodeline": "_(\"Can't access the problem for modification\"));"
    },
    {
        "line": 17,
        "fullcodeline": "log_notice(\"'%s' element of '%s' can't be modified\", element, problem_id);"
    },
    {
        "line": 18,
        "fullcodeline": "char *error = xasprintf(_(\"'%s' element can't be modified\"), element);"
    },
    {
        "line": 19,
        "fullcodeline": "g_dbus_method_invocation_return_dbus_error(invocation,"
    },
    {
        "line": 22,
        "fullcodeline": "free(error);"
    },
    {
        "line": 39,
        "fullcodeline": "log_notice(\"'%s' is not a valid problem directory\", problem_id);"
    },
    {
        "line": 47,
        "fullcodeline": "_(\"Not Authorized\"));"
    }
]