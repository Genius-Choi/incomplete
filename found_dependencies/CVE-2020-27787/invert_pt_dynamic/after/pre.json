[
    {
        "line": 7,
        "fullcodeline": "unsigned ndx = 1+ 0;"
    },
    {
        "line": 32,
        "fullcodeline": "unsigned const z_str = dt_table[Elf32_Dyn::DT_STRSZ];"
    },
    {
        "line": 41,
        "fullcodeline": "unsigned const x_sym = dt_table[Elf32_Dyn::DT_SYMTAB];"
    },
    {
        "line": 42,
        "fullcodeline": "unsigned const x_str = dt_table[Elf32_Dyn::DT_STRTAB];"
    },
    {
        "line": 62,
        "fullcodeline": "unsigned const v_hsh = elf_unsigned_dynamic(Elf32_Dyn::DT_HASH);"
    },
    {
        "line": 89,
        "fullcodeline": "unsigned const v_gsh = elf_unsigned_dynamic(Elf32_Dyn::DT_GNU_HASH);"
    },
    {
        "line": 125,
        "fullcodeline": "unsigned const e_shstrndx = get_te16(&ehdri.e_shstrndx);"
    },
    {
        "line": 43,
        "fullcodeline": "if (x_sym && x_str) {"
    },
    {
        "line": 63,
        "fullcodeline": "if (v_hsh && file_image) {"
    },
    {
        "line": 90,
        "fullcodeline": "if (v_gsh && file_image) {"
    },
    {
        "line": 34,
        "fullcodeline": "strtab_end = get_te32(&dynp0[-1+ z_str].d_val);"
    },
    {
        "line": 44,
        "fullcodeline": "upx_uint32_t const v_sym = get_te32(&dynp0[-1+ x_sym].d_val);"
    },
    {
        "line": 45,
        "fullcodeline": "upx_uint32_t const v_str = get_te32(&dynp0[-1+ x_str].d_val);"
    },
    {
        "line": 46,
        "fullcodeline": "unsigned const  z_sym = dt_table[Elf32_Dyn::DT_SYMENT];"
    },
    {
        "line": 47,
        "fullcodeline": "unsigned const sz_sym = !z_sym ? sizeof(Elf32_Sym)"
    },
    {
        "line": 64,
        "fullcodeline": "hashtab = (unsigned const *)elf_find_dynamic(Elf32_Dyn::DT_HASH);"
    },
    {
        "line": 70,
        "fullcodeline": "unsigned const nbucket = get_te32(&hashtab[0]);"
    },
    {
        "line": 71,
        "fullcodeline": "unsigned const *const buckets = &hashtab[2];"
    },
    {
        "line": 72,
        "fullcodeline": "unsigned const *const chains = &buckets[nbucket]; (void)chains;"
    },
    {
        "line": 74,
        "fullcodeline": "unsigned const v_sym = !x_sym ? 0 : get_te32(&dynp0[-1+ x_sym].d_val);"
    },
    {
        "line": 91,
        "fullcodeline": "gashtab = (unsigned const *)elf_find_dynamic(Elf32_Dyn::DT_GNU_HASH);"
    },
    {
        "line": 97,
        "fullcodeline": "unsigned const n_bucket = get_te32(&gashtab[0]);"
    },
    {
        "line": 98,
        "fullcodeline": "unsigned const n_bitmask = get_te32(&gashtab[2]);"
    },
    {
        "line": 99,
        "fullcodeline": "unsigned const gnu_shift = get_te32(&gashtab[3]);"
    },
    {
        "line": 100,
        "fullcodeline": "unsigned const *const bitmask = (unsigned const *)(void const *)&gashtab[4];"
    },
    {
        "line": 101,
        "fullcodeline": "unsigned     const *const buckets = (unsigned const *)&bitmask[n_bitmask];"
    },
    {
        "line": 102,
        "fullcodeline": "unsigned     const *const hasharr = &buckets[n_bucket]; (void)hasharr;"
    },
    {
        "line": 105,
        "fullcodeline": "unsigned const v_sym = !x_sym ? 0 : get_te32(&dynp0[-1+ x_sym].d_val);"
    },
    {
        "line": 126,
        "fullcodeline": "if (e_shnum <= e_shstrndx"
    },
    {
        "line": 127,
        "fullcodeline": "&&  !(0==e_shnum && 0==e_shstrndx) ) {"
    },
    {
        "line": 128,
        "fullcodeline": "char msg[40]; snprintf(msg, sizeof(msg),"
    },
    {
        "line": 35,
        "fullcodeline": "if ((u32_t)file_size <= strtab_end) { // FIXME: weak"
    },
    {
        "line": 49,
        "fullcodeline": "if (sz_sym < sizeof(Elf32_Sym)) {"
    },
    {
        "line": 54,
        "fullcodeline": "if (v_sym < v_str) {"
    },
    {
        "line": 65,
        "fullcodeline": "if (!hashtab) {"
    },
    {
        "line": 92,
        "fullcodeline": "if (!gashtab) {"
    },
    {
        "line": 9,
        "fullcodeline": "for (; ; ++ndx, ++dynp) {"
    },
    {
        "line": 10,
        "fullcodeline": "unsigned const d_tag = get_te32(&dynp->d_tag);"
    },
    {
        "line": 36,
        "fullcodeline": "char msg[50]; snprintf(msg, sizeof(msg),"
    },
    {
        "line": 48,
        "fullcodeline": ": get_te32(&dynp0[-1+ z_sym].d_val);"
    },
    {
        "line": 50,
        "fullcodeline": "char msg[50]; snprintf(msg, sizeof(msg),"
    },
    {
        "line": 55,
        "fullcodeline": "symnum_end = (v_str - v_sym) / sz_sym;"
    },
    {
        "line": 66,
        "fullcodeline": "char msg[40]; snprintf(msg, sizeof(msg),"
    },
    {
        "line": 75,
        "fullcodeline": "if (!nbucket || !v_sym"
    },
    {
        "line": 77,
        "fullcodeline": "|| ((v_hsh < v_sym) && (v_sym - v_hsh) < (sizeof(unsigned)*2  // headers"
    },
    {
        "line": 82,
        "fullcodeline": "char msg[90]; snprintf(msg, sizeof(msg),"
    },
    {
        "line": 93,
        "fullcodeline": "char msg[40]; snprintf(msg, sizeof(msg),"
    },
    {
        "line": 106,
        "fullcodeline": "if (!n_bucket || !n_bitmask || !v_sym"
    },
    {
        "line": 113,
        "fullcodeline": "|| ((v_gsh < v_sym) && (v_sym - v_gsh) < (sizeof(unsigned)*4  // headers"
    },
    {
        "line": 119,
        "fullcodeline": "char msg[90]; snprintf(msg, sizeof(msg),"
    },
    {
        "line": 11,
        "fullcodeline": "if (d_tag < DT_NUM) {"
    },
    {
        "line": 76,
        "fullcodeline": "|| (nbucket>>31) || (file_size/sizeof(unsigned)) <= (2*nbucket)  // FIXME: weak"
    },
    {
        "line": 84,
        "fullcodeline": "nbucket, (v_sym - v_hsh));"
    },
    {
        "line": 111,
        "fullcodeline": "|| (file_size / sizeof(unsigned)) <= (n_bitmask + 2*n_bucket)  // FIXME: weak"
    },
    {
        "line": 121,
        "fullcodeline": "n_bucket, n_bitmask, v_sym - v_gsh);"
    },
    {
        "line": 21,
        "fullcodeline": "dt_table[d_tag] = ndx;"
    },
    {
        "line": 110,
        "fullcodeline": "|| (n_bitmask>>30)"
    },
    {
        "line": 79,
        "fullcodeline": "+ sizeof(*chains) *nbucket  // chains"
    },
    {
        "line": 109,
        "fullcodeline": "|| (n_bucket>>30)  // fie on fuzzers"
    },
    {
        "line": 116,
        "fullcodeline": "+ sizeof(*hasharr)*n_bucket  // hasharr"
    },
    {
        "line": 12,
        "fullcodeline": "if (Elf32_Dyn::DT_NEEDED != d_tag"
    },
    {
        "line": 14,
        "fullcodeline": "&&    get_te32(&dynp->d_val)"
    },
    {
        "line": 16,
        "fullcodeline": "char msg[50]; snprintf(msg, sizeof(msg),"
    },
    {
        "line": 78,
        "fullcodeline": "+ sizeof(*buckets)*nbucket  // buckets"
    },
    {
        "line": 108,
        "fullcodeline": "|| 8*sizeof(unsigned) <= gnu_shift  // shifted result always == 0"
    },
    {
        "line": 115,
        "fullcodeline": "+ sizeof(*buckets)*n_bucket  // buckets"
    },
    {
        "line": 15,
        "fullcodeline": "!= get_te32(&dynp0[-1+ dt_table[d_tag]].d_val)) {"
    },
    {
        "line": 107,
        "fullcodeline": "|| (-1+ n_bitmask) & n_bitmask  // not a power of 2"
    },
    {
        "line": 114,
        "fullcodeline": "+ sizeof(*bitmask)*n_bitmask  // bitmask"
    },
    {
        "line": 18,
        "fullcodeline": "d_tag, -1+ dt_table[d_tag], -1+ ndx);"
    }
]