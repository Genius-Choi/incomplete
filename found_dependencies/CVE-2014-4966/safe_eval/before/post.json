[
    {
        "line": 17,
        "fullcodeline": "SAFE_NODES = set("
    },
    {
        "line": 46,
        "fullcodeline": "filter_list = []"
    },
    {
        "line": 50,
        "fullcodeline": "CALL_WHITELIST = C.DEFAULT_CALLABLE_WHITELIST + filter_list"
    },
    {
        "line": 71,
        "fullcodeline": "cnv = CleansingNodeVisitor()"
    },
    {
        "line": 39,
        "fullcodeline": "if not sys.version.startswith('2.6'):"
    },
    {
        "line": 47,
        "fullcodeline": "for filter in filter_loader.all():"
    },
    {
        "line": 52,
        "fullcodeline": "class CleansingNodeVisitor(ast.NodeVisitor):"
    },
    {
        "line": 65,
        "fullcodeline": "if not isinstance(expr, basestring):"
    },
    {
        "line": 40,
        "fullcodeline": "SAFE_NODES.union("
    },
    {
        "line": 73,
        "fullcodeline": "parsed_tree = ast.parse(expr, mode='eval')"
    },
    {
        "line": 74,
        "fullcodeline": "cnv.visit(parsed_tree)"
    },
    {
        "line": 75,
        "fullcodeline": "compiled = compile(parsed_tree, expr, 'eval')"
    },
    {
        "line": 76,
        "fullcodeline": "result = eval(compiled, {}, locals)"
    },
    {
        "line": 41,
        "fullcodeline": "set("
    },
    {
        "line": 48,
        "fullcodeline": "filter_list.extend(filter.filters().keys())"
    },
    {
        "line": 68,
        "fullcodeline": "return (expr, None)"
    },
    {
        "line": 79,
        "fullcodeline": "return (result, None)"
    },
    {
        "line": 86,
        "fullcodeline": "return (expr, None)"
    },
    {
        "line": 90,
        "fullcodeline": "return (expr, e)"
    }
]