[
    {
        "line": 19,
        "fullcodeline": "DR_LOG(log_info) << \"RequestHandler::startRequest: sending http \" << httpMethod << \": \" << url ;"
    },
    {
        "line": 21,
        "fullcodeline": "conn = m_pool.malloc() ;"
    },
    {
        "line": 23,
        "fullcodeline": "CURL* easy = NULL ;"
    },
    {
        "line": 37,
        "fullcodeline": "conn->easy = easy;"
    },
    {
        "line": 39,
        "fullcodeline": "conn->global = &m_g;"
    },
    {
        "line": 40,
        "fullcodeline": "strncpy(conn->url, url.c_str(), URL_LEN) ;"
    },
    {
        "line": 41,
        "fullcodeline": "strncpy(conn->body, body.c_str(), HTTP_BODY_LEN);"
    },
    {
        "line": 42,
        "fullcodeline": "strncpy(conn->transactionId, transactionId.c_str(), TXNID_LEN);"
    },
    {
        "line": 43,
        "fullcodeline": "conn->hdr_list = NULL ;"
    },
    {
        "line": 45,
        "fullcodeline": "curl_easy_setopt(easy, CURLOPT_URL, conn->url);"
    },
    {
        "line": 46,
        "fullcodeline": "curl_easy_setopt(easy, CURLOPT_WRITEFUNCTION, write_cb);"
    },
    {
        "line": 47,
        "fullcodeline": "curl_easy_setopt(easy, CURLOPT_WRITEDATA, conn);"
    },
    {
        "line": 48,
        "fullcodeline": "curl_easy_setopt(easy, CURLOPT_ERRORBUFFER, conn->error);"
    },
    {
        "line": 49,
        "fullcodeline": "curl_easy_setopt(easy, CURLOPT_PRIVATE, conn);"
    },
    {
        "line": 56,
        "fullcodeline": "curl_easy_setopt(easy, CURLOPT_VERBOSE, 0L);"
    },
    {
        "line": 57,
        "fullcodeline": "curl_easy_setopt(easy, CURLOPT_NOPROGRESS, 1L);"
    },
    {
        "line": 63,
        "fullcodeline": "curl_easy_setopt(easy, CURLOPT_OPENSOCKETFUNCTION, opensocket);"
    },
    {
        "line": 66,
        "fullcodeline": "curl_easy_setopt(easy, CURLOPT_CLOSESOCKETFUNCTION, close_socket);"
    },
    {
        "line": 72,
        "fullcodeline": "conn->hdr_list = curl_slist_append(conn->hdr_list, \"Accept: application/json\");"
    },
    {
        "line": 79,
        "fullcodeline": "curl_easy_setopt(easy, CURLOPT_HTTPHEADER, conn->hdr_list);"
    },
    {
        "line": 81,
        "fullcodeline": "rc = curl_multi_add_handle(m_g.multi, conn->easy);"
    },
    {
        "line": 82,
        "fullcodeline": "mcode_test(\"new_conn: curl_multi_add_handle\", rc);"
    },
    {
        "line": 7,
        "fullcodeline": "if (0 == url.find(\"tcp://\") || 0 == url.find(\"tls://\")) {"
    },
    {
        "line": 30,
        "fullcodeline": "easy = m_cacheEasyHandles.front() ;"
    },
    {
        "line": 31,
        "fullcodeline": "m_cacheEasyHandles.pop_front() ;"
    },
    {
        "line": 32,
        "fullcodeline": "DR_LOG(log_debug) << \"RequestHandler::makeRequestForRoute - after acquiring handle in thread \" <<"
    },
    {
        "line": 68,
        "fullcodeline": "if( 0 == url.find(\"https:\") ) {"
    },
    {
        "line": 74,
        "fullcodeline": "if( 0 == httpMethod.compare(\"POST\") ) {"
    },
    {
        "line": 8,
        "fullcodeline": "string json = \"{\\\"action\\\": \\\"route\\\", \\\"data\\\": {\\\"uri\\\": \\\"\";"
    },
    {
        "line": 9,
        "fullcodeline": "json.append(url.substr(6));"
    },
    {
        "line": 12,
        "fullcodeline": "json.append(\"\\\"}}\");"
    },
    {
        "line": 13,
        "fullcodeline": "DR_LOG(log_info) << \"RequestHandler::startRequest: no web callback required, sending directly to \" << url << \":\" << json.c_str() ;"
    },
    {
        "line": 14,
        "fullcodeline": "m_pController->httpCallRoutingComplete(transactionId, 200, json);"
    },
    {
        "line": 27,
        "fullcodeline": "if( m_cacheEasyHandles.empty() ) {"
    },
    {
        "line": 69,
        "fullcodeline": "curl_easy_setopt(easy, CURLOPT_SSL_VERIFYPEER, verifyPeer);"
    },
    {
        "line": 75,
        "fullcodeline": "curl_easy_setopt(easy, CURLOPT_POSTFIELDS, conn->body);"
    },
    {
        "line": 76,
        "fullcodeline": "curl_easy_setopt(easy, CURLOPT_POSTFIELDSIZE, strlen(conn->body));"
    },
    {
        "line": 77,
        "fullcodeline": "conn->hdr_list = curl_slist_append(conn->hdr_list, \"Content-Type: text/plain; charset=UTF-8\");"
    },
    {
        "line": 10,
        "fullcodeline": "if (0 == url.find(\"tcp://\")) json.append(\";transport=tcp\");"
    },
    {
        "line": 28,
        "fullcodeline": "m_cacheEasyHandles.push_back(createEasyHandle()) ;"
    },
    {
        "line": 34,
        "fullcodeline": "m_cacheEasyHandles.size() << \" handles remain in cache\";"
    },
    {
        "line": 11,
        "fullcodeline": "else json.append(\";transport=tls\");"
    }
]