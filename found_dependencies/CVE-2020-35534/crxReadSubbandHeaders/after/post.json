[
    {
        "line": 5,
        "fullcodeline": "CrxSubband *band = comp->subBands + img->subbandCount - 1; // set to last band"
    },
    {
        "line": 6,
        "fullcodeline": "uint32_t bandHeight = tile->height;"
    },
    {
        "line": 7,
        "fullcodeline": "uint32_t bandWidth = tile->width;"
    },
    {
        "line": 8,
        "fullcodeline": "int32_t bandWidthExCoef = 0;"
    },
    {
        "line": 9,
        "fullcodeline": "int32_t bandHeightExCoef = 0;"
    },
    {
        "line": 70,
        "fullcodeline": "band->width = bandWidthExCoef + bandWidth;"
    },
    {
        "line": 71,
        "fullcodeline": "band->height = bandHeightExCoef + bandHeight;"
    },
    {
        "line": 75,
        "fullcodeline": "int32_t curSubband = 0;"
    },
    {
        "line": 76,
        "fullcodeline": "int32_t subbandOffset = 0;"
    },
    {
        "line": 77,
        "fullcodeline": "band = comp->subBands;"
    },
    {
        "line": 73,
        "fullcodeline": "if (!img->subbandCount)"
    },
    {
        "line": 78,
        "fullcodeline": "for (int curSubband = 0; curSubband < img->subbandCount; curSubband++, band++)"
    },
    {
        "line": 17,
        "fullcodeline": "int32_t *rowExCoef ="
    },
    {
        "line": 19,
        "fullcodeline": "int32_t *colExCoef ="
    },
    {
        "line": 60,
        "fullcodeline": "bandWidthExCoef = bandHeightExCoef = 0;"
    },
    {
        "line": 86,
        "fullcodeline": "uint32_t bitData = LibRaw::sgetn(4, *subbandMdatPtr + 8);"
    },
    {
        "line": 87,
        "fullcodeline": "uint32_t subbandSize = LibRaw::sgetn(4, *subbandMdatPtr + 4);"
    },
    {
        "line": 94,
        "fullcodeline": "band->dataSize = subbandSize - (bitData & 0x7FF);"
    },
    {
        "line": 95,
        "fullcodeline": "band->supportsPartial = bitData & 0x8000 ? 1 : 0;"
    },
    {
        "line": 96,
        "fullcodeline": "band->dataOffset = subbandOffset;"
    },
    {
        "line": 97,
        "fullcodeline": "band->quantValue = (bitData >> 19) & 0xFF;"
    },
    {
        "line": 98,
        "fullcodeline": "band->paramK = 0;"
    },
    {
        "line": 99,
        "fullcodeline": "band->bandParam = 0;"
    },
    {
        "line": 100,
        "fullcodeline": "band->bandBuf = 0;"
    },
    {
        "line": 101,
        "fullcodeline": "band->bandSize = 0;"
    },
    {
        "line": 103,
        "fullcodeline": "subbandOffset += subbandSize;"
    },
    {
        "line": 105,
        "fullcodeline": "*subbandMdatPtr += 0xC;"
    },
    {
        "line": 106,
        "fullcodeline": "*mdatSize -= 0xC;"
    },
    {
        "line": 18,
        "fullcodeline": "exCoefNumTbl + 0x60 * (img->levels - 1) + 12 * (tile->width & 7);"
    },
    {
        "line": 20,
        "fullcodeline": "exCoefNumTbl + 0x60 * (img->levels - 1) + 12 * (tile->height & 7);"
    },
    {
        "line": 21,
        "fullcodeline": "for (int level = 0; level < img->levels; ++level)"
    },
    {
        "line": 61,
        "fullcodeline": "if (tile->tileFlag & E_HAS_TILES_ON_THE_RIGHT)"
    },
    {
        "line": 65,
        "fullcodeline": "if (tile->tileFlag & E_HAS_TILES_ON_THE_BOTTOM)"
    },
    {
        "line": 80,
        "fullcodeline": "if (*mdatSize < 0xC)"
    },
    {
        "line": 83,
        "fullcodeline": "if (LibRaw::sgetn(2, *subbandMdatPtr) != 0xFF03)"
    },
    {
        "line": 89,
        "fullcodeline": "if (curSubband != bitData >> 28)"
    },
    {
        "line": 23,
        "fullcodeline": "int32_t widthOddPixel = bandWidth & 1;"
    },
    {
        "line": 24,
        "fullcodeline": "int32_t heightOddPixel = bandHeight & 1;"
    },
    {
        "line": 25,
        "fullcodeline": "bandWidth = (widthOddPixel + bandWidth) >> 1;"
    },
    {
        "line": 26,
        "fullcodeline": "bandHeight = (heightOddPixel + bandHeight) >> 1;"
    },
    {
        "line": 28,
        "fullcodeline": "int32_t bandWidthExCoef0 = 0;"
    },
    {
        "line": 29,
        "fullcodeline": "int32_t bandWidthExCoef1 = 0;"
    },
    {
        "line": 30,
        "fullcodeline": "int32_t bandHeightExCoef0 = 0;"
    },
    {
        "line": 31,
        "fullcodeline": "int32_t bandHeightExCoef1 = 0;"
    },
    {
        "line": 47,
        "fullcodeline": "band[0].width = bandWidth + bandWidthExCoef0 - widthOddPixel;"
    },
    {
        "line": 48,
        "fullcodeline": "band[0].height = bandHeight + bandHeightExCoef0 - heightOddPixel;"
    },
    {
        "line": 50,
        "fullcodeline": "band[-1].width = bandWidth + bandWidthExCoef1;"
    },
    {
        "line": 51,
        "fullcodeline": "band[-1].height = bandHeight + bandHeightExCoef0 - heightOddPixel;"
    },
    {
        "line": 53,
        "fullcodeline": "band[-2].width = bandWidth + bandWidthExCoef0 - widthOddPixel;"
    },
    {
        "line": 54,
        "fullcodeline": "band[-2].height = bandHeight + bandHeightExCoef1;"
    },
    {
        "line": 56,
        "fullcodeline": "rowExCoef += 4;"
    },
    {
        "line": 57,
        "fullcodeline": "colExCoef += 4;"
    },
    {
        "line": 58,
        "fullcodeline": "band -= 3;"
    },
    {
        "line": 62,
        "fullcodeline": "bandWidthExCoef ="
    },
    {
        "line": 66,
        "fullcodeline": "bandHeightExCoef ="
    },
    {
        "line": 91,
        "fullcodeline": "band->dataSize = subbandSize;"
    },
    {
        "line": 32,
        "fullcodeline": "if (tile->tileFlag & E_HAS_TILES_ON_THE_RIGHT)"
    },
    {
        "line": 37,
        "fullcodeline": "if (tile->tileFlag & E_HAS_TILES_ON_THE_LEFT)"
    },
    {
        "line": 39,
        "fullcodeline": "if (tile->tileFlag & E_HAS_TILES_ON_THE_BOTTOM)"
    },
    {
        "line": 44,
        "fullcodeline": "if (tile->tileFlag & E_HAS_TILES_ON_THE_TOP)"
    },
    {
        "line": 81,
        "fullcodeline": "return -1;"
    },
    {
        "line": 84,
        "fullcodeline": "return -1;"
    },
    {
        "line": 92,
        "fullcodeline": "return -1;"
    },
    {
        "line": 34,
        "fullcodeline": "bandWidthExCoef0 = rowExCoef[0];"
    },
    {
        "line": 35,
        "fullcodeline": "bandWidthExCoef1 = rowExCoef[1];"
    },
    {
        "line": 38,
        "fullcodeline": "++bandWidthExCoef0;"
    },
    {
        "line": 41,
        "fullcodeline": "bandHeightExCoef0 = colExCoef[0];"
    },
    {
        "line": 42,
        "fullcodeline": "bandHeightExCoef1 = colExCoef[1];"
    },
    {
        "line": 45,
        "fullcodeline": "++bandHeightExCoef0;"
    },
    {
        "line": 63,
        "fullcodeline": "exCoefNumTbl[0x60 * (img->levels - 1) + 12 * (tile->width & 7) +"
    },
    {
        "line": 67,
        "fullcodeline": "exCoefNumTbl[0x60 * (img->levels - 1) + 12 * (tile->height & 7) +"
    },
    {
        "line": 64,
        "fullcodeline": "4 * (img->levels - 1) + 1];"
    },
    {
        "line": 68,
        "fullcodeline": "4 * (img->levels - 1) + 1];"
    }
]