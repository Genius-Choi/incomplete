[
    {
        "line": 5,
        "fullcodeline": "int IncrBitTable[32] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0,"
    },
    {
        "line": 8,
        "fullcodeline": "img->planeWidth = hdr->f_width;"
    },
    {
        "line": 9,
        "fullcodeline": "img->planeHeight = hdr->f_height;"
    },
    {
        "line": 15,
        "fullcodeline": "img->tileCols = (img->planeWidth + hdr->tileWidth - 1) / hdr->tileWidth;"
    },
    {
        "line": 16,
        "fullcodeline": "img->tileRows = (img->planeHeight + hdr->tileHeight - 1) / hdr->tileHeight;"
    },
    {
        "line": 23,
        "fullcodeline": "img->tiles = 0;"
    },
    {
        "line": 24,
        "fullcodeline": "img->levels = hdr->imageLevels;"
    },
    {
        "line": 25,
        "fullcodeline": "img->subbandCount = 3 * img->levels + 1; // 3 bands per level + one last LL"
    },
    {
        "line": 26,
        "fullcodeline": "img->nPlanes = hdr->nPlanes;"
    },
    {
        "line": 27,
        "fullcodeline": "img->nBits = hdr->nBits;"
    },
    {
        "line": 28,
        "fullcodeline": "img->encType = hdr->encType;"
    },
    {
        "line": 29,
        "fullcodeline": "img->samplePrecision = hdr->nBits + IncrBitTable[4 * hdr->encType + 2] + 1;"
    },
    {
        "line": 30,
        "fullcodeline": "img->mdatOffset = mdatOffset + hdr->mdatHdrSize;"
    },
    {
        "line": 31,
        "fullcodeline": "img->mdatSize = mdatSize;"
    },
    {
        "line": 32,
        "fullcodeline": "img->planeBuf = 0;"
    },
    {
        "line": 50,
        "fullcodeline": "int32_t rowSize = 2 * img->planeWidth;"
    },
    {
        "line": 11,
        "fullcodeline": "if (hdr->tileWidth < 0x16 || hdr->tileHeight < 0x16 ||"
    },
    {
        "line": 33,
        "fullcodeline": "img->outBufs[0] = img->outBufs[1] = img->outBufs[2] = img->outBufs[3] = 0;"
    },
    {
        "line": 52,
        "fullcodeline": "if (img->nPlanes == 1)"
    },
    {
        "line": 92,
        "fullcodeline": "return crxReadImageHeaders(hdr, img, mdatHdrPtr, mdatSize);"
    },
    {
        "line": 12,
        "fullcodeline": "img->planeWidth > 0x7FFF || img->planeHeight > 0x7FFF)"
    },
    {
        "line": 18,
        "fullcodeline": "if (img->tileCols > 0xFF || img->tileRows > 0xFF ||"
    },
    {
        "line": 20,
        "fullcodeline": "img->planeHeight - hdr->tileHeight * (img->tileRows - 1) < 0x16)"
    },
    {
        "line": 41,
        "fullcodeline": "if (img->encType == 3 && img->nPlanes == 4 && img->nBits > 8)"
    },
    {
        "line": 43,
        "fullcodeline": "img->planeBuf ="
    },
    {
        "line": 13,
        "fullcodeline": "return -1;"
    },
    {
        "line": 19,
        "fullcodeline": "img->planeWidth - hdr->tileWidth * (img->tileCols - 1) < 0x16 ||"
    },
    {
        "line": 21,
        "fullcodeline": "return -1;"
    },
    {
        "line": 46,
        "fullcodeline": "if (!img->planeBuf)"
    },
    {
        "line": 44,
        "fullcodeline": "(int16_t *)malloc(img->planeHeight * img->planeWidth * img->nPlanes *"
    },
    {
        "line": 47,
        "fullcodeline": "return -1;"
    },
    {
        "line": 62,
        "fullcodeline": "img->outBufs[2] = outBuf + rowSize;"
    },
    {
        "line": 70,
        "fullcodeline": "img->outBufs[3] = outBuf + rowSize;"
    },
    {
        "line": 78,
        "fullcodeline": "img->outBufs[0] = outBuf + rowSize;"
    },
    {
        "line": 86,
        "fullcodeline": "img->outBufs[1] = outBuf + rowSize;"
    },
    {
        "line": 45,
        "fullcodeline": "((img->samplePrecision + 7) >> 3));"
    }
]