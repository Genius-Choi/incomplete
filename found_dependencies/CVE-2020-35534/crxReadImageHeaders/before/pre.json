[
    {
        "line": 4,
        "fullcodeline": "int nTiles = img->tileRows * img->tileCols;"
    },
    {
        "line": 96,
        "fullcodeline": "uint32_t tileOffset = 0;"
    },
    {
        "line": 97,
        "fullcodeline": "uint32_t dataSize = mdatSize;"
    },
    {
        "line": 98,
        "fullcodeline": "uint8_t *dataPtr = mdatPtr;"
    },
    {
        "line": 99,
        "fullcodeline": "CrxTile *tile = img->tiles;"
    },
    {
        "line": 6,
        "fullcodeline": "if (!nTiles)"
    },
    {
        "line": 9,
        "fullcodeline": "if (!img->tiles)"
    },
    {
        "line": 101,
        "fullcodeline": "for (int curTile = 0; curTile < nTiles; curTile++, tile++)"
    },
    {
        "line": 11,
        "fullcodeline": "img->tiles = (CrxTile *)malloc("
    },
    {
        "line": 19,
        "fullcodeline": "CrxTile *tile = img->tiles;"
    },
    {
        "line": 20,
        "fullcodeline": "CrxPlaneComp *comps = (CrxPlaneComp *)(tile + nTiles);"
    },
    {
        "line": 21,
        "fullcodeline": "CrxSubband *bands = (CrxSubband *)(comps + img->nPlanes * nTiles);"
    },
    {
        "line": 111,
        "fullcodeline": "dataSize -= 0xC;"
    },
    {
        "line": 113,
        "fullcodeline": "tile->tileSize = LibRaw::sgetn(4, dataPtr + 4);"
    },
    {
        "line": 114,
        "fullcodeline": "tile->dataOffset = tileOffset;"
    },
    {
        "line": 116,
        "fullcodeline": "int32_t hdrExtraBytes = LibRaw::sgetn(2, dataPtr + 2) - 8;"
    },
    {
        "line": 117,
        "fullcodeline": "tileOffset += tile->tileSize;"
    },
    {
        "line": 118,
        "fullcodeline": "dataPtr += hdrExtraBytes + 0xC;"
    },
    {
        "line": 119,
        "fullcodeline": "dataSize -= hdrExtraBytes;"
    },
    {
        "line": 121,
        "fullcodeline": "uint32_t compOffset = 0;"
    },
    {
        "line": 122,
        "fullcodeline": "CrxPlaneComp *comp = tile->comps;"
    },
    {
        "line": 7,
        "fullcodeline": "return -1;"
    },
    {
        "line": 15,
        "fullcodeline": "if (!img->tiles)"
    },
    {
        "line": 23,
        "fullcodeline": "for (int curTile = 0; curTile < nTiles; curTile++, tile++)"
    },
    {
        "line": 103,
        "fullcodeline": "if (dataSize < 0xC)"
    },
    {
        "line": 108,
        "fullcodeline": "if (LibRaw::sgetn(2, dataPtr + 8) != curTile)"
    },
    {
        "line": 124,
        "fullcodeline": "for (int compNum = 0; compNum < img->nPlanes; compNum++, comp++)"
    },
    {
        "line": 25,
        "fullcodeline": "tile->tileFlag = 0; // tile neighbouring flags"
    },
    {
        "line": 26,
        "fullcodeline": "tile->tileNumber = curTile;"
    },
    {
        "line": 27,
        "fullcodeline": "tile->tileSize = 0;"
    },
    {
        "line": 28,
        "fullcodeline": "tile->comps = comps + curTile * img->nPlanes;"
    },
    {
        "line": 106,
        "fullcodeline": "if (LibRaw::sgetn(2, dataPtr) != 0xFF01)"
    },
    {
        "line": 134,
        "fullcodeline": "comp->compSize = LibRaw::sgetn(4, dataPtr + 4);"
    },
    {
        "line": 136,
        "fullcodeline": "int32_t compHdrRoundedBits = (dataPtr[8] >> 1) & 3;"
    },
    {
        "line": 137,
        "fullcodeline": "comp->supportsPartial = (dataPtr[8] & 8) != 0;"
    },
    {
        "line": 139,
        "fullcodeline": "comp->dataOffset = compOffset;"
    },
    {
        "line": 140,
        "fullcodeline": "comp->tileFlag = tile->tileFlag;"
    },
    {
        "line": 142,
        "fullcodeline": "compOffset += comp->compSize;"
    },
    {
        "line": 143,
        "fullcodeline": "dataSize -= 0xC;"
    },
    {
        "line": 144,
        "fullcodeline": "dataPtr += 0xC;"
    },
    {
        "line": 146,
        "fullcodeline": "comp->roundedBitsMask = 0;"
    },
    {
        "line": 16,
        "fullcodeline": "return -1;"
    },
    {
        "line": 30,
        "fullcodeline": "if ((curTile + 1) % img->tileCols)"
    },
    {
        "line": 49,
        "fullcodeline": "if (curTile < nTiles - img->tileCols)"
    },
    {
        "line": 104,
        "fullcodeline": "return -1;"
    },
    {
        "line": 107,
        "fullcodeline": "return -1;"
    },
    {
        "line": 109,
        "fullcodeline": "return -1;"
    },
    {
        "line": 126,
        "fullcodeline": "if (dataSize < 0xC)"
    },
    {
        "line": 131,
        "fullcodeline": "if (compNum != dataPtr[8] >> 4)"
    },
    {
        "line": 156,
        "fullcodeline": "if (crxReadSubbandHeaders(hdr, img, tile, comp, &dataPtr, &dataSize))"
    },
    {
        "line": 14,
        "fullcodeline": "sizeof(CrxSubband) * nTiles * img->nPlanes * img->subbandCount);"
    },
    {
        "line": 33,
        "fullcodeline": "tile->width = hdr->tileWidth;"
    },
    {
        "line": 52,
        "fullcodeline": "tile->height = hdr->tileHeight;"
    },
    {
        "line": 69,
        "fullcodeline": "CrxPlaneComp *comp = tile->comps;"
    },
    {
        "line": 70,
        "fullcodeline": "CrxSubband *band = bands + curTile * img->nPlanes * img->subbandCount;"
    },
    {
        "line": 129,
        "fullcodeline": "if (LibRaw::sgetn(2, dataPtr) != 0xFF02)"
    },
    {
        "line": 153,
        "fullcodeline": "comp->roundedBitsMask = 1 << (compHdrRoundedBits - 1);"
    },
    {
        "line": 12,
        "fullcodeline": "sizeof(CrxTile) * nTiles +"
    },
    {
        "line": 13,
        "fullcodeline": "sizeof(CrxPlaneComp) * nTiles * img->nPlanes +"
    },
    {
        "line": 34,
        "fullcodeline": "if (img->tileCols > 1)"
    },
    {
        "line": 45,
        "fullcodeline": "tile->width = img->planeWidth - hdr->tileWidth * (img->tileCols - 1);"
    },
    {
        "line": 53,
        "fullcodeline": "if (img->tileRows > 1)"
    },
    {
        "line": 63,
        "fullcodeline": "tile->height = img->planeHeight - hdr->tileHeight * (img->tileRows - 1);"
    },
    {
        "line": 72,
        "fullcodeline": "for (int curComp = 0; curComp < img->nPlanes; curComp++, comp++)"
    },
    {
        "line": 127,
        "fullcodeline": "return -1;"
    },
    {
        "line": 130,
        "fullcodeline": "return -1;"
    },
    {
        "line": 132,
        "fullcodeline": "return -1;"
    },
    {
        "line": 150,
        "fullcodeline": "if (img->levels || !comp->supportsPartial)"
    },
    {
        "line": 157,
        "fullcodeline": "return -1;"
    },
    {
        "line": 36,
        "fullcodeline": "tile->tileFlag = E_HAS_TILES_ON_THE_RIGHT;"
    },
    {
        "line": 46,
        "fullcodeline": "if (img->tileCols > 1)"
    },
    {
        "line": 55,
        "fullcodeline": "tile->tileFlag |= E_HAS_TILES_ON_THE_BOTTOM;"
    },
    {
        "line": 64,
        "fullcodeline": "if (img->tileRows > 1)"
    },
    {
        "line": 74,
        "fullcodeline": "comp->compNumber = curComp;"
    },
    {
        "line": 75,
        "fullcodeline": "comp->supportsPartial = 1;"
    },
    {
        "line": 76,
        "fullcodeline": "comp->tileFlag = tile->tileFlag;"
    },
    {
        "line": 77,
        "fullcodeline": "comp->subBands = band;"
    },
    {
        "line": 78,
        "fullcodeline": "comp->compBuf = 0;"
    },
    {
        "line": 79,
        "fullcodeline": "comp->waveletTransform = 0;"
    },
    {
        "line": 37,
        "fullcodeline": "if (curTile % img->tileCols)"
    },
    {
        "line": 47,
        "fullcodeline": "tile->tileFlag = E_HAS_TILES_ON_THE_LEFT;"
    },
    {
        "line": 56,
        "fullcodeline": "if (curTile >= img->tileCols)"
    },
    {
        "line": 65,
        "fullcodeline": "tile->tileFlag |= E_HAS_TILES_ON_THE_TOP;"
    },
    {
        "line": 151,
        "fullcodeline": "return -1;"
    },
    {
        "line": 39,
        "fullcodeline": "tile->tileFlag |= E_HAS_TILES_ON_THE_LEFT;"
    },
    {
        "line": 57,
        "fullcodeline": "tile->tileFlag |= E_HAS_TILES_ON_THE_TOP;"
    },
    {
        "line": 82,
        "fullcodeline": "for (int curBand = 0; curBand < img->subbandCount;"
    },
    {
        "line": 83,
        "fullcodeline": "curBand++, band++)"
    },
    {
        "line": 85,
        "fullcodeline": "band->supportsPartial = 0;"
    },
    {
        "line": 86,
        "fullcodeline": "band->quantValue = 4;"
    },
    {
        "line": 87,
        "fullcodeline": "band->bandParam = 0;"
    },
    {
        "line": 88,
        "fullcodeline": "band->dataSize = 0;"
    }
]