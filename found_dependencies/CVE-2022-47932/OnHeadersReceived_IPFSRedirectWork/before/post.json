[
    {
        "line": 9,
        "fullcodeline": "auto* prefs = user_prefs::UserPrefs::Get(ctx->browser_context);"
    },
    {
        "line": 15,
        "fullcodeline": "bool api_gateway = IsAPIGateway(ctx->request_url, chrome::GetChannel());"
    },
    {
        "line": 7,
        "fullcodeline": "if (!ctx->browser_context)"
    },
    {
        "line": 10,
        "fullcodeline": "if (IsIpfsResolveMethodDisabled(prefs)) {"
    },
    {
        "line": 16,
        "fullcodeline": "if (ctx->ipfs_auto_fallback && !api_gateway && response_headers &&"
    },
    {
        "line": 21,
        "fullcodeline": "IsIPFSScheme(ctx->initiator_url)) {"
    },
    {
        "line": 23,
        "fullcodeline": "replacements.SetPathStr(ipfs_path);"
    },
    {
        "line": 29,
        "fullcodeline": "GURL new_url = ctx->ipfs_gateway_url.ReplaceComponents(replacements);"
    },
    {
        "line": 31,
        "fullcodeline": "*override_response_headers ="
    },
    {
        "line": 33,
        "fullcodeline": "(*override_response_headers)"
    },
    {
        "line": 35,
        "fullcodeline": "(*override_response_headers)->RemoveHeader(\"Location\");"
    },
    {
        "line": 36,
        "fullcodeline": "(*override_response_headers)->AddHeader(\"Location\", new_url.spec());"
    },
    {
        "line": 37,
        "fullcodeline": "*allowed_unsafe_redirect_url = new_url;"
    },
    {
        "line": 19,
        "fullcodeline": "!ctx->request_url.DomainIs(ctx->ipfs_gateway_url.host()) &&"
    },
    {
        "line": 25,
        "fullcodeline": "if (ctx->request_url.has_query()) {"
    },
    {
        "line": 32,
        "fullcodeline": "new net::HttpResponseHeaders(response_headers->raw_headers());"
    },
    {
        "line": 17,
        "fullcodeline": "response_headers->GetNormalizedHeader(\"x-ipfs-path\", &ipfs_path) &&"
    },
    {
        "line": 26,
        "fullcodeline": "replacements.SetQueryStr(ctx->request_url.query_piece());"
    }
]