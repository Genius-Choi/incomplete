[
    {
        "line": 6,
        "fullcodeline": "char import_name[PE_NAME_LENGTH + 1];"
    },
    {
        "line": 7,
        "fullcodeline": "char name[PE_NAME_LENGTH + 1];"
    },
    {
        "line": 8,
        "fullcodeline": "PE_Word import_hint, import_ordinal = 0;"
    },
    {
        "line": 9,
        "fullcodeline": "PE_DWord import_table = 0, off = 0;"
    },
    {
        "line": 10,
        "fullcodeline": "int i = 0, len;"
    },
    {
        "line": 11,
        "fullcodeline": "Sdb* db = NULL;"
    },
    {
        "line": 12,
        "fullcodeline": "char* sdb_module = NULL;"
    },
    {
        "line": 13,
        "fullcodeline": "char* symname = NULL;"
    },
    {
        "line": 14,
        "fullcodeline": "char* symdllname = NULL;"
    },
    {
        "line": 16,
        "fullcodeline": "if (!dll_name || !*dll_name || *dll_name == '0') {"
    },
    {
        "line": 20,
        "fullcodeline": "if (!(off = PE_(va2pa) (pe, OriginalFirstThunk)) &&"
    },
    {
        "line": 21,
        "fullcodeline": "!(off = PE_(va2pa) (pe, FirstThunk))) {"
    },
    {
        "line": 31,
        "fullcodeline": "import_table = R_BUF_READ_PE_DWORD_AT (pe->b, off + i * sizeof (PE_DWord));"
    },
    {
        "line": 25,
        "fullcodeline": "if (import_ordinal >= UT16_MAX) {"
    },
    {
        "line": 28,
        "fullcodeline": "if (off + i * sizeof (PE_DWord) > pe->size) {"
    },
    {
        "line": 32,
        "fullcodeline": "if (import_table == PE_DWORD_MAX) {"
    },
    {
        "line": 109,
        "fullcodeline": "struct r_bin_pe_import_t *new_importp = realloc (*importp, (*nimp + 1) * sizeof (struct r_bin_pe_import_t));"
    },
    {
        "line": 114,
        "fullcodeline": "*importp = new_importp;"
    },
    {
        "line": 115,
        "fullcodeline": "memcpy ((*importp)[*nimp].name, import_name, PE_NAME_LENGTH);"
    },
    {
        "line": 116,
        "fullcodeline": "(*importp)[*nimp].name[PE_NAME_LENGTH] = '\\0';"
    },
    {
        "line": 117,
        "fullcodeline": "memcpy ((*importp)[*nimp].libname, dll_name, PE_NAME_LENGTH);"
    },
    {
        "line": 118,
        "fullcodeline": "(*importp)[*nimp].libname[PE_NAME_LENGTH] = '\\0';"
    },
    {
        "line": 124,
        "fullcodeline": "(*nimp)++;"
    },
    {
        "line": 125,
        "fullcodeline": "i++;"
    },
    {
        "line": 36,
        "fullcodeline": "if (import_table & ILT_MASK1) {"
    },
    {
        "line": 110,
        "fullcodeline": "if (!new_importp) {"
    },
    {
        "line": 119,
        "fullcodeline": "(*importp)[*nimp].vaddr = bin_pe_rva_to_va (pe, FirstThunk + i * sizeof (PE_DWord));"
    },
    {
        "line": 37,
        "fullcodeline": "import_ordinal = import_table & ILT_MASK2;"
    },
    {
        "line": 38,
        "fullcodeline": "import_hint = 0;"
    },
    {
        "line": 39,
        "fullcodeline": "snprintf (import_name, PE_NAME_LENGTH, \"Ordinal_%i\", import_ordinal);"
    },
    {
        "line": 41,
        "fullcodeline": "strncpy (name, dll_name, sizeof (name) - 1);"
    },
    {
        "line": 42,
        "fullcodeline": "name[sizeof (name) - 1] = 0;"
    },
    {
        "line": 43,
        "fullcodeline": "symdllname = strdup (name);"
    },
    {
        "line": 46,
        "fullcodeline": "size_t len = strlen (symdllname);"
    },
    {
        "line": 47,
        "fullcodeline": "r_str_case (symdllname, 0);"
    },
    {
        "line": 49,
        "fullcodeline": "symdllname[len] = 0;"
    },
    {
        "line": 51,
        "fullcodeline": "char* filename = NULL;"
    },
    {
        "line": 120,
        "fullcodeline": "(*importp)[*nimp].paddr = PE_(va2pa) (pe, FirstThunk) + i * sizeof (PE_DWord);"
    },
    {
        "line": 83,
        "fullcodeline": "import_ordinal++;"
    },
    {
        "line": 84,
        "fullcodeline": "const ut64 off = PE_(va2pa) (pe, import_table);"
    },
    {
        "line": 89,
        "fullcodeline": "import_hint = r_buf_read_le16_at (pe->b, off);"
    },
    {
        "line": 94,
        "fullcodeline": "name[0] = '\\0';"
    },
    {
        "line": 95,
        "fullcodeline": "len = r_buf_read_at (pe->b, off + sizeof (PE_Word), (ut8*) name, PE_NAME_LENGTH);"
    },
    {
        "line": 103,
        "fullcodeline": "name[PE_NAME_LENGTH] = '\\0';"
    },
    {
        "line": 104,
        "fullcodeline": "int len = snprintf (import_name, sizeof (import_name), \"%s\" , name);"
    },
    {
        "line": 48,
        "fullcodeline": "len = len < 4? 0: len - 4;"
    },
    {
        "line": 52,
        "fullcodeline": "if (!sdb_module || strcmp (symdllname, sdb_module)) {"
    },
    {
        "line": 54,
        "fullcodeline": "db = NULL;"
    },
    {
        "line": 56,
        "fullcodeline": "sdb_module = strdup (symdllname);"
    },
    {
        "line": 57,
        "fullcodeline": "filename = r_str_newf (\"%s.sdb\", symdllname);"
    },
    {
        "line": 73,
        "fullcodeline": "symname = resolveModuleOrdinal (db, symdllname, import_ordinal);"
    },
    {
        "line": 90,
        "fullcodeline": "if (import_hint == UT16_MAX) {"
    },
    {
        "line": 100,
        "fullcodeline": "if (!*name) {"
    },
    {
        "line": 58,
        "fullcodeline": "if (filename && r_file_exists (filename)) {"
    },
    {
        "line": 79,
        "fullcodeline": "pe_printf (\"Cannot find %s\\n\", filename);"
    },
    {
        "line": 85,
        "fullcodeline": "if (off > pe->size || (off + sizeof (PE_Word)) > pe->size) {"
    },
    {
        "line": 106,
        "fullcodeline": "eprintf (\"Import name '%s' has been truncated.\\n\", import_name);"
    },
    {
        "line": 59,
        "fullcodeline": "db = sdb_new (NULL, filename, 0);"
    },
    {
        "line": 75,
        "fullcodeline": "snprintf (import_name, PE_NAME_LENGTH, \"%s\", symname);"
    },
    {
        "line": 61,
        "fullcodeline": "const char *dirPrefix = r_sys_prefix (NULL);"
    },
    {
        "line": 62,
        "fullcodeline": "char *lower_symdllname = strdup (symdllname);"
    },
    {
        "line": 63,
        "fullcodeline": "r_str_case (lower_symdllname, false);"
    },
    {
        "line": 64,
        "fullcodeline": "filename = r_str_newf (R_JOIN_4_PATHS (\"%s\", R2_SDB_FORMAT, \"dll\", \"%s.sdb\"),"
    },
    {
        "line": 67,
        "fullcodeline": "if (r_file_exists (filename)) {"
    },
    {
        "line": 68,
        "fullcodeline": "db = sdb_new (NULL, filename, 0);"
    }
]