[
    {
        "line": 2,
        "fullcodeline": "ut64 slide = 0;"
    },
    {
        "line": 6,
        "fullcodeline": "ut64 *classlist = malloc (64);"
    },
    {
        "line": 13,
        "fullcodeline": "r_list_foreach (cache->bins, iter, bin) {"
    },
    {
        "line": 87,
        "fullcodeline": "R_FREE (classlist);"
    },
    {
        "line": 3,
        "fullcodeline": "if (cache->n_hdr > 1) {"
    },
    {
        "line": 7,
        "fullcodeline": "if (!classlist) {"
    },
    {
        "line": 14,
        "fullcodeline": "bool found_sample = false;"
    },
    {
        "line": 18,
        "fullcodeline": "opts.header_at = bin->header_at;"
    },
    {
        "line": 19,
        "fullcodeline": "opts.symbols_off = 0;"
    },
    {
        "line": 21,
        "fullcodeline": "struct MACH0_(obj_t) *mach0 = MACH0_(new_buf) (cache->buf, &opts);"
    },
    {
        "line": 26,
        "fullcodeline": "struct section_t *sections = NULL;"
    },
    {
        "line": 33,
        "fullcodeline": "int incomplete = 2;"
    },
    {
        "line": 34,
        "fullcodeline": "int classlist_idx = 0, data_idx = 0;"
    },
    {
        "line": 55,
        "fullcodeline": "int classlist_sample_size = R_MIN (64, sections[classlist_idx].size);"
    },
    {
        "line": 56,
        "fullcodeline": "int n_classes = classlist_sample_size / 8;"
    },
    {
        "line": 57,
        "fullcodeline": "ut64 sect_offset = sections[classlist_idx].offset + bin->hdr_offset;"
    },
    {
        "line": 64,
        "fullcodeline": "ut64 data_tail = data_addr & 0xfff;"
    },
    {
        "line": 65,
        "fullcodeline": "ut64 data_tail_end = (data_addr + sections[data_idx].size) & 0xfff;"
    },
    {
        "line": 79,
        "fullcodeline": "R_FREE (sections);"
    },
    {
        "line": 22,
        "fullcodeline": "if (!mach0) {"
    },
    {
        "line": 27,
        "fullcodeline": "if (!(sections = MACH0_(get_sections) (mach0))) {"
    },
    {
        "line": 35,
        "fullcodeline": "for (i = 0; !sections[i].last && incomplete; i++) {"
    },
    {
        "line": 59,
        "fullcodeline": "if (r_buf_fread_at (cache->buf, sect_offset, (ut8*) classlist, \"l\", n_classes) != classlist_sample_size) {"
    },
    {
        "line": 66,
        "fullcodeline": "for (i = 0; i < n_classes; i++) {"
    },
    {
        "line": 67,
        "fullcodeline": "ut64 cl_addr = (classlist[i] & value_mask) + value_add;"
    },
    {
        "line": 68,
        "fullcodeline": "ut64 cl_tail = cl_addr & 0xfff;"
    },
    {
        "line": 36,
        "fullcodeline": "if (sections[i].size == 0) {"
    },
    {
        "line": 39,
        "fullcodeline": "if (strstr (sections[i].name, \"__objc_classlist\")) {"
    },
    {
        "line": 44,
        "fullcodeline": "if (strstr (sections[i].name, \"__objc_data\")) {"
    },
    {
        "line": 69,
        "fullcodeline": "if (cl_tail >= data_tail && cl_tail < data_tail_end) {"
    },
    {
        "line": 40,
        "fullcodeline": "incomplete--;"
    },
    {
        "line": 41,
        "fullcodeline": "classlist_idx = i;"
    },
    {
        "line": 45,
        "fullcodeline": "incomplete--;"
    },
    {
        "line": 46,
        "fullcodeline": "data_idx = i;"
    },
    {
        "line": 70,
        "fullcodeline": "ut64 off = cl_tail - data_tail;"
    },
    {
        "line": 71,
        "fullcodeline": "slide = ((cl_addr - off) & value_mask) - (data_addr & value_mask);"
    },
    {
        "line": 72,
        "fullcodeline": "found_sample = true;"
    }
]