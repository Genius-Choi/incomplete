[
    {
        "line": 2,
        "fullcodeline": "QnxObj *qo = R_NEW0 (QnxObj);"
    },
    {
        "line": 9,
        "fullcodeline": "ut64 offset = QNX_RECORD_SIZE;"
    },
    {
        "line": 10,
        "fullcodeline": "RList *sections = NULL;"
    },
    {
        "line": 11,
        "fullcodeline": "RList *fixups = NULL;"
    },
    {
        "line": 19,
        "fullcodeline": "qo->kv = sdb_new0 ();"
    },
    {
        "line": 28,
        "fullcodeline": "lmf_header_load (&qo->lmfh, bf->buf, qo->kv);"
    },
    {
        "line": 29,
        "fullcodeline": "offset += lrec.data_nbytes;"
    },
    {
        "line": 89,
        "fullcodeline": "sdb_ns_set (sdb, \"info\", qo->kv);"
    },
    {
        "line": 90,
        "fullcodeline": "qo->sections = sections;"
    },
    {
        "line": 91,
        "fullcodeline": "qo->fixups = fixups;"
    },
    {
        "line": 92,
        "fullcodeline": "*bin_obj = qo;"
    },
    {
        "line": 95,
        "fullcodeline": "free (qo);"
    },
    {
        "line": 96,
        "fullcodeline": "r_list_free (fixups);"
    },
    {
        "line": 97,
        "fullcodeline": "r_list_free (sections);"
    },
    {
        "line": 3,
        "fullcodeline": "if (!qo) {"
    },
    {
        "line": 13,
        "fullcodeline": "if (!qo) {"
    },
    {
        "line": 16,
        "fullcodeline": "if (!(sections = r_list_newf ((RListFree)r_bin_section_free)) || !(fixups = r_list_new ())) {"
    },
    {
        "line": 20,
        "fullcodeline": "if (!qo->kv) {"
    },
    {
        "line": 24,
        "fullcodeline": "if (r_buf_fread_at (bf->buf, 0, (ut8 *)&lrec, \"ccss\", 1) < QNX_RECORD_SIZE) {"
    },
    {
        "line": 35,
        "fullcodeline": "offset += sizeof (lmf_record);"
    },
    {
        "line": 87,
        "fullcodeline": "offset += lrec.data_nbytes;"
    },
    {
        "line": 32,
        "fullcodeline": "if (r_buf_fread_at (bf->buf, offset, (ut8 *)&lrec, \"ccss\", 1) < QNX_RECORD_SIZE) {"
    },
    {
        "line": 37,
        "fullcodeline": "if (lrec.rec_type == LMF_IMAGE_END_REC) {"
    },
    {
        "line": 39,
        "fullcodeline": "} else if (lrec.rec_type == LMF_RESOURCE_REC) {"
    },
    {
        "line": 40,
        "fullcodeline": "RBinSection *ptr = R_NEW0 (RBinSection);"
    },
    {
        "line": 47,
        "fullcodeline": "ptr->name = strdup (\"LMF_RESOURCE\");"
    },
    {
        "line": 48,
        "fullcodeline": "ptr->paddr = offset;"
    },
    {
        "line": 49,
        "fullcodeline": "ptr->vsize = lrec.data_nbytes - sizeof (lmf_resource);"
    },
    {
        "line": 50,
        "fullcodeline": "ptr->size = ptr->vsize;"
    },
    {
        "line": 51,
        "fullcodeline": "ptr->add = true;"
    },
    {
        "line": 52,
        "fullcodeline": "r_list_append (sections, ptr);"
    },
    {
        "line": 41,
        "fullcodeline": "if (!ptr) {"
    },
    {
        "line": 44,
        "fullcodeline": "if (r_buf_fread_at (bf->buf, offset, (ut8 *)&lres, \"ssss\", 1) < sizeof (lmf_resource)) {"
    },
    {
        "line": 53,
        "fullcodeline": "} else if (lrec.rec_type == LMF_LOAD_REC) {"
    },
    {
        "line": 54,
        "fullcodeline": "RBinSection *ptr = R_NEW0 (RBinSection);"
    },
    {
        "line": 61,
        "fullcodeline": "ptr->name = strdup (\"LMF_LOAD\");"
    },
    {
        "line": 62,
        "fullcodeline": "ptr->paddr = offset;"
    },
    {
        "line": 63,
        "fullcodeline": "ptr->vaddr = ldata.offset;"
    },
    {
        "line": 64,
        "fullcodeline": "ptr->vsize = lrec.data_nbytes - sizeof (lmf_data);"
    },
    {
        "line": 65,
        "fullcodeline": "ptr->size = ptr->vsize;"
    },
    {
        "line": 66,
        "fullcodeline": "ptr->add = true;"
    },
    {
        "line": 67,
        "fullcodeline": "r_list_append (sections, ptr);"
    },
    {
        "line": 55,
        "fullcodeline": "if (r_buf_fread_at (bf->buf, offset, (ut8 *)&ldata, \"si\", 1) < sizeof (lmf_data)) {"
    },
    {
        "line": 58,
        "fullcodeline": "if (!ptr) {"
    },
    {
        "line": 68,
        "fullcodeline": "} else if (lrec.rec_type == LMF_FIXUP_REC) {"
    },
    {
        "line": 69,
        "fullcodeline": "RBinReloc *ptr = R_NEW0 (RBinReloc);"
    },
    {
        "line": 73,
        "fullcodeline": "ptr->vaddr = ptr->paddr = ldata.offset;"
    },
    {
        "line": 74,
        "fullcodeline": "ptr->type = 'f'; // \"LMF_FIXUP\";"
    },
    {
        "line": 75,
        "fullcodeline": "r_list_append (fixups, ptr);"
    },
    {
        "line": 70,
        "fullcodeline": "if (!ptr || r_buf_fread_at (bf->buf, offset, (ut8 *)&ldata, \"si\", 1) < sizeof (lmf_data)) {"
    },
    {
        "line": 76,
        "fullcodeline": "} else if (lrec.rec_type == LMF_8087_FIXUP_REC) {"
    },
    {
        "line": 77,
        "fullcodeline": "RBinReloc *ptr = R_NEW0 (RBinReloc);"
    },
    {
        "line": 81,
        "fullcodeline": "ptr->vaddr = ptr->paddr = ldata.offset;"
    },
    {
        "line": 82,
        "fullcodeline": "ptr->type = 'F'; // \"LMF_8087_FIXUP\";"
    },
    {
        "line": 83,
        "fullcodeline": "r_list_append (fixups, ptr);"
    },
    {
        "line": 78,
        "fullcodeline": "if (!ptr || r_buf_fread_at (bf->buf, offset, (ut8 *)&ldata, \"si\", 1) < sizeof (lmf_data)) {"
    },
    {
        "line": 84,
        "fullcodeline": "} else if (lrec.rec_type == LMF_RW_END_REC) {"
    },
    {
        "line": 85,
        "fullcodeline": "r_buf_fread_at (bf->buf, offset, (ut8 *)&qo->rwend, \"si\", 1);"
    }
]