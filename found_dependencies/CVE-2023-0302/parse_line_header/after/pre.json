[
    {
        "line": 5,
        "fullcodeline": "r_return_val_if_fail (hdr && bf && buf, NULL);"
    },
    {
        "line": 7,
        "fullcodeline": "hdr->is_64bit = false;"
    },
    {
        "line": 8,
        "fullcodeline": "hdr->unit_length = READ32 (buf);"
    },
    {
        "line": 15,
        "fullcodeline": "hdr->version = READ16 (buf);"
    },
    {
        "line": 22,
        "fullcodeline": "hdr->header_length = dwarf_read_offset(hdr->is_64bit, &buf, buf_end);"
    },
    {
        "line": 24,
        "fullcodeline": "const ut8 *tmp_buf = buf; // So I can skip parsing DWARF 5 headers for now"
    },
    {
        "line": 29,
        "fullcodeline": "hdr->min_inst_len = READ8 (buf);"
    },
    {
        "line": 33,
        "fullcodeline": "hdr->default_is_stmt = READ8 (buf);"
    },
    {
        "line": 34,
        "fullcodeline": "hdr->line_base = READ (buf, int8_t); // signed"
    },
    {
        "line": 35,
        "fullcodeline": "hdr->line_range = READ8 (buf);"
    },
    {
        "line": 36,
        "fullcodeline": "hdr->opcode_base = READ8 (buf);"
    },
    {
        "line": 38,
        "fullcodeline": "hdr->file_names_count = 0;"
    },
    {
        "line": 39,
        "fullcodeline": "hdr->file_names = NULL;"
    },
    {
        "line": 84,
        "fullcodeline": "Sdb *sdb = sdb_new (NULL, NULL, 0);"
    },
    {
        "line": 10,
        "fullcodeline": "if (hdr->unit_length == DWARF_INIT_LEN_64) {"
    },
    {
        "line": 17,
        "fullcodeline": "if (hdr->version == 5) {"
    },
    {
        "line": 26,
        "fullcodeline": "if (buf_end - buf < 8) {"
    },
    {
        "line": 30,
        "fullcodeline": "if (hdr->version >= 4) {"
    },
    {
        "line": 41,
        "fullcodeline": "if (mode == R_MODE_PRINT) {"
    },
    {
        "line": 54,
        "fullcodeline": "if (hdr->opcode_base > 0) {"
    },
    {
        "line": 78,
        "fullcodeline": "if (hdr->version == 5) {"
    },
    {
        "line": 85,
        "fullcodeline": "if (!sdb) {"
    },
    {
        "line": 89,
        "fullcodeline": "if (hdr->version <= 4) {"
    },
    {
        "line": 11,
        "fullcodeline": "hdr->unit_length = READ64 (buf);"
    },
    {
        "line": 12,
        "fullcodeline": "hdr->is_64bit = true;"
    },
    {
        "line": 18,
        "fullcodeline": "hdr->address_size = READ8 (buf);"
    },
    {
        "line": 19,
        "fullcodeline": "hdr->segment_selector_size = READ8 (buf);"
    },
    {
        "line": 31,
        "fullcodeline": "hdr->max_ops_per_inst = READ8 (buf);"
    },
    {
        "line": 44,
        "fullcodeline": "print (\"  DWARF Version:                      %d\\n\", hdr->version);"
    },
    {
        "line": 46,
        "fullcodeline": "print (\"  Minimum Instruction Length:         %d\\n\", hdr->min_inst_len);"
    },
    {
        "line": 47,
        "fullcodeline": "print (\"  Maximum Operations per Instruction: %d\\n\", hdr->max_ops_per_inst);"
    },
    {
        "line": 48,
        "fullcodeline": "print (\"  Initial value of 'is_stmt':         %d\\n\", hdr->default_is_stmt);"
    },
    {
        "line": 49,
        "fullcodeline": "print (\"  Line Base:                          %d\\n\", hdr->line_base);"
    },
    {
        "line": 50,
        "fullcodeline": "print (\"  Line Range:                         %d\\n\", hdr->line_range);"
    },
    {
        "line": 51,
        "fullcodeline": "print (\"  Opcode Base:                        %d\\n\\n\", hdr->opcode_base);"
    },
    {
        "line": 55,
        "fullcodeline": "hdr->std_opcode_lengths = calloc (sizeof (ut8), hdr->opcode_base);"
    },
    {
        "line": 79,
        "fullcodeline": "tmp_buf += hdr->header_length;"
    },
    {
        "line": 90,
        "fullcodeline": "buf = parse_line_header_source (bf, buf, buf_end, hdr, sdb, mode, print);"
    },
    {
        "line": 57,
        "fullcodeline": "if (mode == R_MODE_PRINT) {"
    },
    {
        "line": 61,
        "fullcodeline": "for (i = 1; i < hdr->opcode_base; i++) {"
    },
    {
        "line": 70,
        "fullcodeline": "if (mode == R_MODE_PRINT) {"
    },
    {
        "line": 74,
        "fullcodeline": "hdr->std_opcode_lengths = NULL;"
    },
    {
        "line": 65,
        "fullcodeline": "hdr->std_opcode_lengths[i] = READ (buf, ut8);"
    },
    {
        "line": 62,
        "fullcodeline": "if (buf + 2 > buf_end) {"
    },
    {
        "line": 66,
        "fullcodeline": "if (mode == R_MODE_PRINT) {"
    }
]