[
    {
        "line": 3,
        "fullcodeline": "int i = 0;"
    },
    {
        "line": 5,
        "fullcodeline": "const ut8 *tmp_buf = NULL;"
    },
    {
        "line": 6,
        "fullcodeline": "char *fn = NULL;"
    },
    {
        "line": 29,
        "fullcodeline": "tmp_buf = buf;"
    },
    {
        "line": 30,
        "fullcodeline": "count = 0;"
    },
    {
        "line": 36,
        "fullcodeline": "int entry_index = 1; // used for printing information"
    },
    {
        "line": 123,
        "fullcodeline": "free (fn);"
    },
    {
        "line": 124,
        "fullcodeline": "sdb_free (sdb);"
    },
    {
        "line": 8,
        "fullcodeline": "if (mode == R_MODE_PRINT) {"
    },
    {
        "line": 11,
        "fullcodeline": "while (buf + 1 < buf_end) {"
    },
    {
        "line": 31,
        "fullcodeline": "if (mode == R_MODE_PRINT) {"
    },
    {
        "line": 38,
        "fullcodeline": "for (i = 0; i < 2; i++) {"
    },
    {
        "line": 118,
        "fullcodeline": "if (mode == R_MODE_PRINT) {"
    },
    {
        "line": 9,
        "fullcodeline": "print (\" The Directory Table:\\n\");"
    },
    {
        "line": 12,
        "fullcodeline": "size_t maxlen = R_MIN ((size_t) (buf_end - buf) - 1, 0xfff);"
    },
    {
        "line": 13,
        "fullcodeline": "size_t len = r_str_nlen ((const char *)buf, maxlen);"
    },
    {
        "line": 14,
        "fullcodeline": "char *str = r_str_ndup ((const char *)buf, len);"
    },
    {
        "line": 23,
        "fullcodeline": "add_sdb_include_dir (sdb, str, i);"
    },
    {
        "line": 24,
        "fullcodeline": "free (str);"
    },
    {
        "line": 25,
        "fullcodeline": "i++;"
    },
    {
        "line": 26,
        "fullcodeline": "buf += len + 1;"
    },
    {
        "line": 32,
        "fullcodeline": "print (\"\\n\");"
    },
    {
        "line": 33,
        "fullcodeline": "print (\" The File Name Table:\\n\");"
    },
    {
        "line": 34,
        "fullcodeline": "print (\"  Entry Dir     Time      Size       Name\\n\");"
    },
    {
        "line": 119,
        "fullcodeline": "print (\"\\n\");"
    },
    {
        "line": 15,
        "fullcodeline": "if (len < 1 || len >= 0xfff || !str) {"
    },
    {
        "line": 20,
        "fullcodeline": "if (mode == R_MODE_PRINT) {"
    },
    {
        "line": 39,
        "fullcodeline": "while (buf + 1 < buf_end) {"
    },
    {
        "line": 107,
        "fullcodeline": "if (i == 0) {"
    },
    {
        "line": 16,
        "fullcodeline": "buf += 1;"
    },
    {
        "line": 17,
        "fullcodeline": "free (str);"
    },
    {
        "line": 21,
        "fullcodeline": "print (\"  %d     %s\\n\", i + 1, str);"
    },
    {
        "line": 40,
        "fullcodeline": "size_t maxlen = R_MIN ((size_t) (buf_end - buf - 1), 0xfff);"
    },
    {
        "line": 42,
        "fullcodeline": "free (fn);"
    },
    {
        "line": 43,
        "fullcodeline": "fn = r_str_ndup ((const char *)buf, maxlen);"
    },
    {
        "line": 44,
        "fullcodeline": "r_str_ansi_strip (fn);"
    },
    {
        "line": 45,
        "fullcodeline": "size_t len = strlen (fn);"
    },
    {
        "line": 51,
        "fullcodeline": "buf += len + 1;"
    },
    {
        "line": 56,
        "fullcodeline": "buf = r_uleb128 (buf, buf_end - buf, &id_idx, NULL);"
    },
    {
        "line": 61,
        "fullcodeline": "buf = r_uleb128 (buf, buf_end - buf, &mod_time, NULL);"
    },
    {
        "line": 66,
        "fullcodeline": "buf = r_uleb128 (buf, buf_end - buf, &file_len, NULL);"
    },
    {
        "line": 101,
        "fullcodeline": "count++;"
    },
    {
        "line": 113,
        "fullcodeline": "hdr->file_names_count = count;"
    },
    {
        "line": 114,
        "fullcodeline": "buf = tmp_buf;"
    },
    {
        "line": 115,
        "fullcodeline": "count = 0;"
    },
    {
        "line": 47,
        "fullcodeline": "if (!len) {"
    },
    {
        "line": 52,
        "fullcodeline": "if (buf >= buf_end) {"
    },
    {
        "line": 57,
        "fullcodeline": "if (buf >= buf_end) {"
    },
    {
        "line": 62,
        "fullcodeline": "if (buf >= buf_end) {"
    },
    {
        "line": 67,
        "fullcodeline": "if (buf >= buf_end) {"
    },
    {
        "line": 102,
        "fullcodeline": "if (mode == R_MODE_PRINT && i) {"
    },
    {
        "line": 108,
        "fullcodeline": "if (count > 0) {"
    },
    {
        "line": 48,
        "fullcodeline": "buf++;"
    },
    {
        "line": 53,
        "fullcodeline": "buf = NULL;"
    },
    {
        "line": 58,
        "fullcodeline": "buf = NULL;"
    },
    {
        "line": 63,
        "fullcodeline": "buf = NULL;"
    },
    {
        "line": 68,
        "fullcodeline": "buf = NULL;"
    },
    {
        "line": 73,
        "fullcodeline": "char *include_dir = NULL, *comp_dir = NULL, *pinclude_dir = NULL;"
    },
    {
        "line": 99,
        "fullcodeline": "R_FREE (pinclude_dir);"
    },
    {
        "line": 109,
        "fullcodeline": "hdr->file_names = calloc (sizeof (file_entry), count);"
    },
    {
        "line": 74,
        "fullcodeline": "if (id_idx > 0) {"
    },
    {
        "line": 111,
        "fullcodeline": "hdr->file_names = NULL;"
    },
    {
        "line": 75,
        "fullcodeline": "include_dir = pinclude_dir = sdb_array_get (sdb, \"includedirs\", id_idx - 1, 0);"
    },
    {
        "line": 90,
        "fullcodeline": "hdr->file_names[count].name = r_str_newf(\"%s/%s\", r_str_get (include_dir), fn);"
    },
    {
        "line": 91,
        "fullcodeline": "hdr->file_names[count].id_idx = id_idx;"
    },
    {
        "line": 92,
        "fullcodeline": "hdr->file_names[count].mod_time = mod_time;"
    },
    {
        "line": 93,
        "fullcodeline": "hdr->file_names[count].file_len = file_len;"
    },
    {
        "line": 96,
        "fullcodeline": "R_FREE (include_dir);"
    },
    {
        "line": 97,
        "fullcodeline": "R_FREE (comp_dir);"
    },
    {
        "line": 76,
        "fullcodeline": "if (include_dir && include_dir[0] != '/') {"
    },
    {
        "line": 83,
        "fullcodeline": "include_dir = pinclude_dir = sdb_get (bf->sdb_addrinfo, \"DW_AT_comp_dir\", 0);"
    },
    {
        "line": 77,
        "fullcodeline": "comp_dir = sdb_get (bf->sdb_addrinfo, \"DW_AT_comp_dir\", 0);"
    },
    {
        "line": 84,
        "fullcodeline": "if (!include_dir) {"
    },
    {
        "line": 85,
        "fullcodeline": "include_dir = \"./\";"
    },
    {
        "line": 79,
        "fullcodeline": "include_dir = r_str_newf (\"%s/%s/\", comp_dir, include_dir);"
    }
]