[
    {
        "line": 4,
        "fullcodeline": "struct net_device *ndev = NULL;"
    },
    {
        "line": 5,
        "fullcodeline": "struct net_local *lp = NULL;"
    },
    {
        "line": 6,
        "fullcodeline": "struct device *dev = &ofdev->dev;"
    },
    {
        "line": 8,
        "fullcodeline": "int rc = 0;"
    },
    {
        "line": 10,
        "fullcodeline": "dev_info(dev, \"Device Tree Probing\\n\");"
    },
    {
        "line": 17,
        "fullcodeline": "dev_set_drvdata(dev, ndev);"
    },
    {
        "line": 18,
        "fullcodeline": "SET_NETDEV_DEV(ndev, &ofdev->dev);"
    },
    {
        "line": 20,
        "fullcodeline": "lp = netdev_priv(ndev);"
    },
    {
        "line": 21,
        "fullcodeline": "lp->ndev = ndev;"
    },
    {
        "line": 24,
        "fullcodeline": "res = platform_get_resource(ofdev, IORESOURCE_IRQ, 0);"
    },
    {
        "line": 31,
        "fullcodeline": "ndev->irq = res->start;"
    },
    {
        "line": 33,
        "fullcodeline": "res = platform_get_resource(ofdev, IORESOURCE_MEM, 0);"
    },
    {
        "line": 34,
        "fullcodeline": "lp->base_addr = devm_ioremap_resource(&ofdev->dev, res);"
    },
    {
        "line": 40,
        "fullcodeline": "ndev->mem_start = res->start;"
    },
    {
        "line": 41,
        "fullcodeline": "ndev->mem_end = res->end;"
    },
    {
        "line": 43,
        "fullcodeline": "spin_lock_init(&lp->reset_lock);"
    },
    {
        "line": 44,
        "fullcodeline": "lp->next_tx_buf_to_use = 0x0;"
    },
    {
        "line": 45,
        "fullcodeline": "lp->next_rx_buf_to_use = 0x0;"
    },
    {
        "line": 46,
        "fullcodeline": "lp->tx_ping_pong = get_bool(ofdev, \"xlnx,tx-ping-pong\");"
    },
    {
        "line": 47,
        "fullcodeline": "lp->rx_ping_pong = get_bool(ofdev, \"xlnx,rx-ping-pong\");"
    },
    {
        "line": 49,
        "fullcodeline": "rc = of_get_mac_address(ofdev->dev.of_node, ndev->dev_addr);"
    },
    {
        "line": 56,
        "fullcodeline": "xemaclite_writel(0, lp->base_addr + XEL_TSR_OFFSET);"
    },
    {
        "line": 57,
        "fullcodeline": "xemaclite_writel(0, lp->base_addr + XEL_BUFFER_OFFSET + XEL_TSR_OFFSET);"
    },
    {
        "line": 60,
        "fullcodeline": "xemaclite_update_address(lp, ndev->dev_addr);"
    },
    {
        "line": 62,
        "fullcodeline": "lp->phy_node = of_parse_phandle(ofdev->dev.of_node, \"phy-handle\", 0);"
    },
    {
        "line": 63,
        "fullcodeline": "xemaclite_mdio_setup(lp, &ofdev->dev);"
    },
    {
        "line": 65,
        "fullcodeline": "dev_info(dev, \"MAC address is now %pM\\n\", ndev->dev_addr);"
    },
    {
        "line": 67,
        "fullcodeline": "ndev->netdev_ops = &xemaclite_netdev_ops;"
    },
    {
        "line": 68,
        "fullcodeline": "ndev->ethtool_ops = &xemaclite_ethtool_ops;"
    },
    {
        "line": 69,
        "fullcodeline": "ndev->flags &= ~IFF_MULTICAST;"
    },
    {
        "line": 70,
        "fullcodeline": "ndev->watchdog_timeo = TX_TIMEOUT;"
    },
    {
        "line": 73,
        "fullcodeline": "rc = register_netdev(ndev);"
    },
    {
        "line": 87,
        "fullcodeline": "free_netdev(ndev);"
    },
    {
        "line": 14,
        "fullcodeline": "if (!ndev)"
    },
    {
        "line": 25,
        "fullcodeline": "if (!res) {"
    },
    {
        "line": 35,
        "fullcodeline": "if (IS_ERR(lp->base_addr)) {"
    },
    {
        "line": 26,
        "fullcodeline": "dev_err(dev, \"no IRQ found\\n\");"
    },
    {
        "line": 27,
        "fullcodeline": "rc = -ENXIO;"
    },
    {
        "line": 36,
        "fullcodeline": "rc = PTR_ERR(lp->base_addr);"
    },
    {
        "line": 51,
        "fullcodeline": "dev_warn(dev, \"No MAC address found, using random\\n\");"
    },
    {
        "line": 52,
        "fullcodeline": "eth_hw_addr_random(ndev);"
    },
    {
        "line": 75,
        "fullcodeline": "dev_err(dev,"
    },
    {
        "line": 15,
        "fullcodeline": "return -ENOMEM;"
    }
]