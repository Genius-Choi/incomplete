[
    {
        "line": 3,
        "fullcodeline": "StringRef output_name = \"\";"
    },
    {
        "line": 4,
        "fullcodeline": "bool is_control_dep = full_name[0] == '^';"
    },
    {
        "line": 5,
        "fullcodeline": "int output_num = 0;"
    },
    {
        "line": 26,
        "fullcodeline": "llvm::StringMap<SmallVector<Value, 1>>& op_info = values_map_[node_name];"
    },
    {
        "line": 27,
        "fullcodeline": "SmallVector<Value, 1>& base_operation = op_info[\"^\"];"
    },
    {
        "line": 39,
        "fullcodeline": "SmallVector<Value, 1>& value_info = op_info[output_name];"
    },
    {
        "line": 8,
        "fullcodeline": "size_t colon_sep = full_name.find_first_of(':');"
    },
    {
        "line": 15,
        "fullcodeline": "colon_sep = output_name.find_last_of(':');"
    },
    {
        "line": 28,
        "fullcodeline": "if (base_operation.empty()) {"
    },
    {
        "line": 40,
        "fullcodeline": "if (value_info.size() <= output_num)"
    },
    {
        "line": 6,
        "fullcodeline": "if (is_control_dep) full_name = full_name.drop_front();"
    },
    {
        "line": 9,
        "fullcodeline": "if (colon_sep == StringRef::npos) {"
    },
    {
        "line": 16,
        "fullcodeline": "if (colon_sep != StringRef::npos) {"
    },
    {
        "line": 29,
        "fullcodeline": "OperationState state(loc_, mlir_placeholder_);"
    },
    {
        "line": 30,
        "fullcodeline": "state.addAttribute(TFGraphDialect::getNameAttrKey(),"
    },
    {
        "line": 32,
        "fullcodeline": "state.types.push_back(placeholder_ty_);"
    },
    {
        "line": 33,
        "fullcodeline": "state.types.push_back(control_ty_);"
    },
    {
        "line": 34,
        "fullcodeline": "Operation* placeholder = builder_.create(state);"
    },
    {
        "line": 35,
        "fullcodeline": "base_operation.push_back(placeholder->getResult(1));"
    },
    {
        "line": 36,
        "fullcodeline": "base_operation.push_back(placeholder->getResult(0));"
    },
    {
        "line": 41,
        "fullcodeline": "value_info.resize(output_num + 1, Value{});"
    },
    {
        "line": 10,
        "fullcodeline": "node_name = full_name;"
    },
    {
        "line": 22,
        "fullcodeline": "output_name = output_name.take_front(colon_sep);"
    },
    {
        "line": 31,
        "fullcodeline": "builder_.getStringAttr(node_name));"
    },
    {
        "line": 44,
        "fullcodeline": "value_info[output_num] = builder_.create<GetResultOp>("
    },
    {
        "line": 12,
        "fullcodeline": "node_name = full_name.take_front(colon_sep);"
    },
    {
        "line": 13,
        "fullcodeline": "output_name = full_name.drop_front(colon_sep + 1);"
    },
    {
        "line": 19,
        "fullcodeline": "if (!llvm::getAsUnsignedInteger(output_name.drop_front(colon_sep + 1),"
    },
    {
        "line": 21,
        "fullcodeline": "output_num = value;"
    },
    {
        "line": 45,
        "fullcodeline": "loc_, base_operation[1], output_name, output_num);"
    }
]