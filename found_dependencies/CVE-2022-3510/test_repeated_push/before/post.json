[
    {
        "line": 2,
        "fullcodeline": "m = proto_module::TestMessage.new"
    },
    {
        "line": 4,
        "fullcodeline": "m.repeated_string += ['one']"
    },
    {
        "line": 5,
        "fullcodeline": "m.repeated_string += %w[two three]"
    },
    {
        "line": 6,
        "fullcodeline": "assert_equal %w[one two three], m.repeated_string"
    },
    {
        "line": 8,
        "fullcodeline": "m.repeated_string.push( *['four', 'five'] )"
    },
    {
        "line": 9,
        "fullcodeline": "assert_equal %w[one two three four five], m.repeated_string"
    },
    {
        "line": 11,
        "fullcodeline": "m.repeated_string.push 'six', 'seven'"
    },
    {
        "line": 12,
        "fullcodeline": "assert_equal %w[one two three four five six seven], m.repeated_string"
    },
    {
        "line": 14,
        "fullcodeline": "m = proto_module::TestMessage.new"
    },
    {
        "line": 16,
        "fullcodeline": "m.repeated_msg += [proto_module::TestMessage2.new(:foo => 1), proto_module::TestMessage2.new(:foo => 2)]"
    },
    {
        "line": 17,
        "fullcodeline": "m.repeated_msg += [proto_module::TestMessage2.new(:foo => 3)]"
    },
    {
        "line": 18,
        "fullcodeline": "m.repeated_msg.push proto_module::TestMessage2.new(:foo => 4), proto_module::TestMessage2.new(:foo => 5)"
    },
    {
        "line": 19,
        "fullcodeline": "assert_equal [1, 2, 3, 4, 5], m.repeated_msg.map {|x| x.foo}"
    }
]