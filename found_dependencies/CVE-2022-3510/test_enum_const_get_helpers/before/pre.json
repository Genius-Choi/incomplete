[
    {
        "line": 2,
        "fullcodeline": "m = proto_module::TestMessage.new"
    },
    {
        "line": 3,
        "fullcodeline": "assert_equal proto_module::TestEnum::Default, m.optional_enum_const"
    },
    {
        "line": 4,
        "fullcodeline": "assert_equal proto_module::TestEnum.const_get(:Default), m.optional_enum_const"
    },
    {
        "line": 6,
        "fullcodeline": "m = proto_module::TestMessage.new({optional_enum: proto_module::TestEnum::A})"
    },
    {
        "line": 7,
        "fullcodeline": "assert_equal proto_module::TestEnum::A, m.optional_enum_const"
    },
    {
        "line": 8,
        "fullcodeline": "assert_equal proto_module::TestEnum.const_get(:A), m.optional_enum_const"
    },
    {
        "line": 10,
        "fullcodeline": "m = proto_module::TestMessage.new({optional_enum: proto_module::TestEnum::B})"
    },
    {
        "line": 11,
        "fullcodeline": "assert_equal proto_module::TestEnum::B, m.optional_enum_const"
    },
    {
        "line": 12,
        "fullcodeline": "assert_equal proto_module::TestEnum.const_get(:B), m.optional_enum_const"
    },
    {
        "line": 14,
        "fullcodeline": "m = proto_module::TestMessage.new({optional_enum: proto_module::TestEnum::C})"
    },
    {
        "line": 15,
        "fullcodeline": "assert_equal proto_module::TestEnum::C, m.optional_enum_const"
    },
    {
        "line": 16,
        "fullcodeline": "assert_equal proto_module::TestEnum.const_get(:C), m.optional_enum_const"
    },
    {
        "line": 18,
        "fullcodeline": "m = proto_module::TestMessage2.new({foo: 2})"
    },
    {
        "line": 19,
        "fullcodeline": "assert_equal 2, m.foo"
    },
    {
        "line": 20,
        "fullcodeline": "assert_raise(NoMethodError) { m.foo_ }"
    },
    {
        "line": 21,
        "fullcodeline": "assert_raise(NoMethodError) { m.foo_X }"
    },
    {
        "line": 22,
        "fullcodeline": "assert_raise(NoMethodError) { m.foo_XX }"
    },
    {
        "line": 23,
        "fullcodeline": "assert_raise(NoMethodError) { m.foo_XXX }"
    },
    {
        "line": 24,
        "fullcodeline": "assert_raise(NoMethodError) { m.foo_XXXX }"
    },
    {
        "line": 25,
        "fullcodeline": "assert_raise(NoMethodError) { m.foo_XXXXX }"
    },
    {
        "line": 26,
        "fullcodeline": "assert_raise(NoMethodError) { m.foo_XXXXXX }"
    },
    {
        "line": 28,
        "fullcodeline": "m = proto_module::Enumer.new({optional_enum: :B})"
    },
    {
        "line": 29,
        "fullcodeline": "assert_equal :B, m.optional_enum"
    },
    {
        "line": 30,
        "fullcodeline": "assert_raise(NoMethodError) { m.optional_enum_ }"
    },
    {
        "line": 31,
        "fullcodeline": "assert_raise(NoMethodError) { m.optional_enum_X }"
    },
    {
        "line": 32,
        "fullcodeline": "assert_raise(NoMethodError) { m.optional_enum_XX }"
    },
    {
        "line": 33,
        "fullcodeline": "assert_raise(NoMethodError) { m.optional_enum_XXX }"
    },
    {
        "line": 34,
        "fullcodeline": "assert_raise(NoMethodError) { m.optional_enum_XXXX }"
    },
    {
        "line": 35,
        "fullcodeline": "assert_raise(NoMethodError) { m.optional_enum_XXXXX }"
    },
    {
        "line": 36,
        "fullcodeline": "assert_raise(NoMethodError) { m.optional_enum_XXXXXX }"
    }
]