[
    {
        "line": 5,
        "fullcodeline": "INPUT_RECORD ir[16] = {};"
    },
    {
        "line": 6,
        "fullcodeline": "int nLen = lstrlen(asRet);"
    },
    {
        "line": 7,
        "fullcodeline": "INPUT_RECORD* pir = (nLen <= (int)countof(ir)) ? ir : (INPUT_RECORD*)calloc(nLen,sizeof(INPUT_RECORD));"
    },
    {
        "line": 11,
        "fullcodeline": "INPUT_RECORD* p = pir;"
    },
    {
        "line": 12,
        "fullcodeline": "LPCWSTR pc = asRet;"
    },
    {
        "line": 22,
        "fullcodeline": "DumpKnownEscape(asRet, nLen, SrvAnsi::de_Report);"
    },
    {
        "line": 24,
        "fullcodeline": "DWORD nWritten = 0;"
    },
    {
        "line": 25,
        "fullcodeline": "HANDLE hIn = GetStdHandle(STD_INPUT_HANDLE);"
    },
    {
        "line": 26,
        "fullcodeline": "bool bSuccess = WriteConsoleInput(hIn, pir, nLen, &nWritten) && (nWritten == nLen);"
    },
    {
        "line": 3,
        "fullcodeline": "if (!asRet || !*asRet)"
    },
    {
        "line": 8,
        "fullcodeline": "if (!pir)"
    },
    {
        "line": 13,
        "fullcodeline": "for (int i = 0; i < nLen; i++, p++, pc++)"
    },
    {
        "line": 28,
        "fullcodeline": "if (pir != ir)"
    },
    {
        "line": 15,
        "fullcodeline": "const char ch = *pc >= 0x20 ? *pc : L' ';"
    },
    {
        "line": 16,
        "fullcodeline": "p->EventType = KEY_EVENT;"
    },
    {
        "line": 17,
        "fullcodeline": "p->Event.KeyEvent.bKeyDown = TRUE;"
    },
    {
        "line": 18,
        "fullcodeline": "p->Event.KeyEvent.wRepeatCount = 1;"
    },
    {
        "line": 19,
        "fullcodeline": "p->Event.KeyEvent.uChar.UnicodeChar = ch;"
    },
    {
        "line": 29,
        "fullcodeline": "free(pir);"
    }
]