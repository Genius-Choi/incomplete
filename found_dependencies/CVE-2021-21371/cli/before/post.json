[
    {
        "line": 7,
        "fullcodeline": "config_from_file = yaml.load(configfile, Loader=yaml.Loader)"
    },
    {
        "line": 8,
        "fullcodeline": "fields = config_from_file.pop('custom_fields', list())"
    },
    {
        "line": 9,
        "fullcodeline": "config = dict_merge(base_config(), config_from_file)"
    },
    {
        "line": 10,
        "fullcodeline": "config['fields'] = config['fields'] + fields"
    },
    {
        "line": 19,
        "fullcodeline": "log = config.get('log', {})"
    },
    {
        "line": 20,
        "fullcodeline": "log_lvls = {'debug': 10, 'info': 20, 'warn': 30, 'error': 40}"
    },
    {
        "line": 21,
        "fullcodeline": "log['level'] = log_lvls[log.get('level', 'warn')]"
    },
    {
        "line": 22,
        "fullcodeline": "log['format'] = log.get('format',"
    },
    {
        "line": 37,
        "fullcodeline": "logging.info('Tenable2JiraCloud Version {}'.format(__version__))"
    },
    {
        "line": 38,
        "fullcodeline": "logging.info('Using configuration file {}'.format(configfile.name))"
    },
    {
        "line": 39,
        "fullcodeline": "uname = platform.uname()"
    },
    {
        "line": 40,
        "fullcodeline": "logging.info('Running on Python {} {}/{}'.format("
    },
    {
        "line": 45,
        "fullcodeline": "jira = Jira("
    },
    {
        "line": 85,
        "fullcodeline": "ingest = Tio2Jira(source, jira, config)"
    },
    {
        "line": 53,
        "fullcodeline": "if config['tenable'].get('platform') == 'tenable.io':"
    },
    {
        "line": 12,
        "fullcodeline": "if config['tenable'].get('tio_transform_tags'):"
    },
    {
        "line": 13,
        "fullcodeline": "attr_cache = config['tenable'].get('tio_asset_attr_cache', list())"
    },
    {
        "line": 14,
        "fullcodeline": "tag_attrs = config['tenable'].get('tio_transform_tags', list())"
    },
    {
        "line": 15,
        "fullcodeline": "config['tenable']['tio_asset_attr_cache'] = attr_cache + tag_attrs"
    },
    {
        "line": 27,
        "fullcodeline": "logging.basicConfig("
    },
    {
        "line": 33,
        "fullcodeline": "logging.basicConfig(**log)"
    },
    {
        "line": 61,
        "fullcodeline": "source = TenableIO("
    },
    {
        "line": 100,
        "fullcodeline": "sc_addr = 'NOTHING_TO_SEE_HERE_AT_ALL'"
    },
    {
        "line": 101,
        "fullcodeline": "config_from_file['jira']['address'] = '<REDACTED>'"
    },
    {
        "line": 102,
        "fullcodeline": "config_from_file['jira']['api_token'] = '<REDACTED>'"
    },
    {
        "line": 103,
        "fullcodeline": "config_from_file['jira']['api_username'] = '<REDACTED>'"
    },
    {
        "line": 104,
        "fullcodeline": "config_from_file['project']['leadAccountId'] = '<REDACTED>'"
    },
    {
        "line": 117,
        "fullcodeline": "output = troubleshooting.format("
    },
    {
        "line": 130,
        "fullcodeline": "print(output)"
    },
    {
        "line": 131,
        "fullcodeline": "print('\\n'.join(["
    },
    {
        "line": 144,
        "fullcodeline": "os.remove('tenable_debug.log')"
    },
    {
        "line": 46,
        "fullcodeline": "'https://{}/rest/api/3'.format(config['jira']['address']),"
    },
    {
        "line": 54,
        "fullcodeline": "if not observed_since:"
    },
    {
        "line": 68,
        "fullcodeline": "if int(source.session.details().get('permissions')) < 64:"
    },
    {
        "line": 70,
        "fullcodeline": "elif config['tenable'].get('platform') == 'tenable.sc':"
    },
    {
        "line": 142,
        "fullcodeline": "with open('issue_debug.md', 'w') as reportfile:"
    },
    {
        "line": 145,
        "fullcodeline": "elif not setup_only:"
    },
    {
        "line": 41,
        "fullcodeline": "'.'.join([str(i) for i in sys.version_info][0:3]),"
    },
    {
        "line": 42,
        "fullcodeline": "uname[0], uname[-2]))"
    },
    {
        "line": 57,
        "fullcodeline": "observed_since = arrow.now()\\"
    },
    {
        "line": 69,
        "fullcodeline": "logging.error('API Keys tie to non-admin user.')"
    },
    {
        "line": 71,
        "fullcodeline": "source = TenableSC("
    },
    {
        "line": 83,
        "fullcodeline": "logging.error('No valid Tenable platform configuration defined.')"
    },
    {
        "line": 84,
        "fullcodeline": "exit(1)"
    },
    {
        "line": 93,
        "fullcodeline": "ingest.ingest(int(observed_since))"
    },
    {
        "line": 105,
        "fullcodeline": "if config_from_file['tenable'].get('address'):"
    },
    {
        "line": 107,
        "fullcodeline": "config_from_file['tenable']['address'] = '<REDACTED>'"
    },
    {
        "line": 108,
        "fullcodeline": "if config_from_file['tenable'].get('access_key'):"
    },
    {
        "line": 109,
        "fullcodeline": "config_from_file['tenable']['access_key'] = '<REDACTED>'"
    },
    {
        "line": 110,
        "fullcodeline": "if config_from_file['tenable'].get('secret_key'):"
    },
    {
        "line": 111,
        "fullcodeline": "config_from_file['tenable']['secret_key'] = '<REDACTED>'"
    },
    {
        "line": 112,
        "fullcodeline": "if config_from_file['tenable'].get('username'):"
    },
    {
        "line": 113,
        "fullcodeline": "config_from_file['tenable']['username'] = '<REDACTED>'"
    },
    {
        "line": 114,
        "fullcodeline": "if config_from_file['tenable'].get('password'):"
    },
    {
        "line": 115,
        "fullcodeline": "config_from_file['tenable']['password'] = '<REDACTED>'"
    },
    {
        "line": 118,
        "fullcodeline": "configfile=yaml.dump(config_from_file, default_flow_style=False),"
    },
    {
        "line": 146,
        "fullcodeline": "ingest.ingest(observed_since)"
    },
    {
        "line": 62,
        "fullcodeline": "access_key=config['tenable'].get('access_key'),"
    },
    {
        "line": 63,
        "fullcodeline": "secret_key=config['tenable'].get('secret_key'),"
    },
    {
        "line": 119,
        "fullcodeline": "logging=open('tenable_debug.log').read() \\"
    },
    {
        "line": 122,
        "fullcodeline": "issuetypes='\\n'.join("
    },
    {
        "line": 143,
        "fullcodeline": "print(output, file=reportfile)"
    },
    {
        "line": 151,
        "fullcodeline": "if config.get('service', {}).get('interval', 0) > 0:"
    },
    {
        "line": 73,
        "fullcodeline": "port=int(config['tenable'].get('port', 443)),"
    },
    {
        "line": 95,
        "fullcodeline": "logging.exception('Caught the following Exception')"
    },
    {
        "line": 152,
        "fullcodeline": "sleeper = int(config['service']['interval']) * 3600"
    },
    {
        "line": 167,
        "fullcodeline": "config['screen']['no_create'] = True"
    },
    {
        "line": 168,
        "fullcodeline": "logging.info('Set to setup-only.  Will not run ingest.')"
    },
    {
        "line": 169,
        "fullcodeline": "logging.info('The following is the updated config file from the setup.')"
    },
    {
        "line": 172,
        "fullcodeline": "logging.info('Generated \"generated_config.yaml\" config file.')"
    },
    {
        "line": 173,
        "fullcodeline": "logging.info('This config file should be updated for every new version of this integration.')"
    },
    {
        "line": 72,
        "fullcodeline": "config['tenable'].get('address'),"
    },
    {
        "line": 74,
        "fullcodeline": "username=config['tenable'].get('username'),"
    },
    {
        "line": 75,
        "fullcodeline": "password=config['tenable'].get('password'),"
    },
    {
        "line": 76,
        "fullcodeline": "access_key=config['tenable'].get('access_key'),"
    },
    {
        "line": 77,
        "fullcodeline": "secret_key=config['tenable'].get('secret_key'),"
    },
    {
        "line": 123,
        "fullcodeline": "["
    },
    {
        "line": 170,
        "fullcodeline": "with open('generated_config.yaml', 'w') as outfile:"
    },
    {
        "line": 154,
        "fullcodeline": "last_run = int(time.time())"
    },
    {
        "line": 155,
        "fullcodeline": "logging.info("
    },
    {
        "line": 157,
        "fullcodeline": "time.sleep(sleeper)"
    },
    {
        "line": 158,
        "fullcodeline": "logging.info("
    },
    {
        "line": 160,
        "fullcodeline": "ingest.ingest(last_run)"
    },
    {
        "line": 171,
        "fullcodeline": "outfile.write(yaml.dump(config, Dumper=yaml.Dumper))"
    },
    {
        "line": 156,
        "fullcodeline": "'Sleeping for {}h'.format(sleeper/3600))"
    },
    {
        "line": 159,
        "fullcodeline": "'Initiating ingest with observed_since={}'.format(last_run))"
    },
    {
        "line": 58,
        "fullcodeline": ".shift(days=-config['tenable'].get('tio_age', 30))\\"
    },
    {
        "line": 126,
        "fullcodeline": "if a.get('name').lower() in ['task', 'subtask', 'sub-task']"
    },
    {
        "line": 125,
        "fullcodeline": "for a in jira.issue_types.list()"
    },
    {
        "line": 124,
        "fullcodeline": "'{id}: {name}'.format(**a)"
    }
]