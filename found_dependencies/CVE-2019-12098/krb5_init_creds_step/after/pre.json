[
    {
        "line": 9,
        "fullcodeline": "size_t len = 0;"
    },
    {
        "line": 13,
        "fullcodeline": "krb5_data_zero(out);"
    },
    {
        "line": 32,
        "fullcodeline": "ctx->pa_counter++;"
    },
    {
        "line": 34,
        "fullcodeline": "_krb5_debug(context, 5, \"krb5_get_init_creds: loop %d\", ctx->pa_counter);"
    },
    {
        "line": 294,
        "fullcodeline": "ret = process_pa_data_to_md(context, &ctx->cred, &ctx->as_req, ctx,"
    },
    {
        "line": 303,
        "fullcodeline": "copy_AS_REQ(&ctx->as_req, &req2);"
    },
    {
        "line": 305,
        "fullcodeline": "ret = fast_wrap_req(context, &ctx->fast_state, &req2);"
    },
    {
        "line": 313,
        "fullcodeline": "ASN1_MALLOC_ENCODE(AS_REQ,"
    },
    {
        "line": 325,
        "fullcodeline": "*flags = KRB5_INIT_CREDS_STEP_FLAG_CONTINUE;"
    },
    {
        "line": 15,
        "fullcodeline": "if (ctx->as_req.req_body.cname == NULL) {"
    },
    {
        "line": 25,
        "fullcodeline": "if (ctx->pa_counter > MAX_PA_COUNTER) {"
    },
    {
        "line": 37,
        "fullcodeline": "if (in && in->length) {"
    },
    {
        "line": 275,
        "fullcodeline": "if (ctx->as_req.req_body.cname == NULL) {"
    },
    {
        "line": 319,
        "fullcodeline": "if(len != ctx->req_buffer.length)"
    },
    {
        "line": 16,
        "fullcodeline": "ret = init_as_req(context, ctx->flags, &ctx->cred,"
    },
    {
        "line": 26,
        "fullcodeline": "krb5_set_error_message(context, KRB5_GET_IN_TKT_LOOP,"
    },
    {
        "line": 40,
        "fullcodeline": "memset(&rep, 0, sizeof(rep));"
    },
    {
        "line": 42,
        "fullcodeline": "_krb5_debug(context, 5, \"krb5_get_init_creds: processing input\");"
    },
    {
        "line": 44,
        "fullcodeline": "ret = decode_AS_REP(in->data, in->length, &rep.kdc_rep, &size);"
    },
    {
        "line": 276,
        "fullcodeline": "ret = init_as_req(context, ctx->flags, &ctx->cred,"
    },
    {
        "line": 285,
        "fullcodeline": "free_METHOD_DATA(ctx->as_req.padata);"
    },
    {
        "line": 287,
        "fullcodeline": "ctx->as_req.padata = NULL;"
    },
    {
        "line": 27,
        "fullcodeline": "N_(\"Looping %d times while getting \""
    },
    {
        "line": 45,
        "fullcodeline": "if (ret == 0) {"
    },
    {
        "line": 19,
        "fullcodeline": "free_init_creds_ctx(context, ctx);"
    },
    {
        "line": 46,
        "fullcodeline": "unsigned eflags = EXTRACT_TICKET_AS_REQ | EXTRACT_TICKET_TIMESYNC;"
    },
    {
        "line": 52,
        "fullcodeline": "ASN1_MALLOC_ENCODE(Ticket, data.data, data.length,"
    },
    {
        "line": 58,
        "fullcodeline": "ret = fast_unwrap_as_rep(context, ctx->nonce, &data,"
    },
    {
        "line": 75,
        "fullcodeline": "ret = process_pa_data_to_key(context, ctx, &ctx->cred,"
    },
    {
        "line": 83,
        "fullcodeline": "_krb5_debug(context, 5, \"krb5_get_init_creds: extracting ticket\");"
    },
    {
        "line": 85,
        "fullcodeline": "ret = _krb5_extract_ticket(context,"
    },
    {
        "line": 56,
        "fullcodeline": "heim_assert(data.length == size, \"ASN.1 internal error\");"
    },
    {
        "line": 72,
        "fullcodeline": "if (ctx->ic_flags & KRB5_INIT_CREDS_NO_C_CANON_CHECK)"
    },
    {
        "line": 97,
        "fullcodeline": "if (ret == 0 && ctx->pk_init_ctx) {"
    },
    {
        "line": 117,
        "fullcodeline": "if (ret == 0)"
    },
    {
        "line": 132,
        "fullcodeline": "_krb5_debug(context, 5, \"krb5_get_init_creds: got an error\");"
    },
    {
        "line": 134,
        "fullcodeline": "free_KRB_ERROR(&ctx->error);"
    },
    {
        "line": 136,
        "fullcodeline": "ret = krb5_rd_error(context, in, &ctx->error);"
    },
    {
        "line": 147,
        "fullcodeline": "ret = fast_unwrap_error(context, &ctx->fast_state, &ctx->error);"
    },
    {
        "line": 155,
        "fullcodeline": "ret = krb5_error_from_rd_error(context, &ctx->error, &ctx->cred);"
    },
    {
        "line": 157,
        "fullcodeline": "_krb5_debug(context, 5, \"krb5_get_init_creds: KRB-ERROR %d\", ret);"
    },
    {
        "line": 69,
        "fullcodeline": "eflags |= EXTRACT_TICKET_ALLOW_SERVER_MISMATCH;"
    },
    {
        "line": 70,
        "fullcodeline": "eflags |= EXTRACT_TICKET_MATCH_REALM;"
    },
    {
        "line": 73,
        "fullcodeline": "eflags |= EXTRACT_TICKET_ALLOW_CNAME_MISMATCH;"
    },
    {
        "line": 99,
        "fullcodeline": "int idx = 0;"
    },
    {
        "line": 101,
        "fullcodeline": "pa_pkinit_kx ="
    },
    {
        "line": 107,
        "fullcodeline": "ret = _krb5_pk_kx_confirm(context, ctx->pk_init_ctx,"
    },
    {
        "line": 118,
        "fullcodeline": "ret = copy_EncKDCRepPart(&rep.enc_part, &ctx->enc_part);"
    },
    {
        "line": 164,
        "fullcodeline": "if (ret == KRB5KDC_ERR_PREAUTH_REQUIRED) {"
    },
    {
        "line": 102,
        "fullcodeline": "krb5_find_padata(rep.kdc_rep.padata->val,"
    },
    {
        "line": 137,
        "fullcodeline": "if(ret && in->length && ((char*)in->data)[0] == 4)"
    },
    {
        "line": 138,
        "fullcodeline": "ret = KRB5KRB_AP_ERR_V4_REPLY;"
    },
    {
        "line": 166,
        "fullcodeline": "free_METHOD_DATA(&ctx->md);"
    },
    {
        "line": 167,
        "fullcodeline": "memset(&ctx->md, 0, sizeof(ctx->md));"
    },
    {
        "line": 112,
        "fullcodeline": "krb5_set_error_message(context, ret,"
    },
    {
        "line": 113,
        "fullcodeline": "N_(\"Failed to confirm PA-PKINIT-KX\", \"\"));"
    },
    {
        "line": 170,
        "fullcodeline": "ret = decode_METHOD_DATA(ctx->error.e_data->data,"
    },
    {
        "line": 114,
        "fullcodeline": "else if (pa_pkinit_kx != NULL)"
    },
    {
        "line": 178,
        "fullcodeline": "krb5_set_error_message(context, ret,"
    },
    {
        "line": 182,
        "fullcodeline": "} else if (ret == KRB5KRB_AP_ERR_SKEW && context->kdc_sec_offset == 0) {"
    },
    {
        "line": 187,
        "fullcodeline": "krb5_set_real_time(context, ctx->error.stime, -1);"
    },
    {
        "line": 191,
        "fullcodeline": "_krb5_debug(context, 10, \"init_creds: err skew updateing kdc offset to %d\","
    },
    {
        "line": 194,
        "fullcodeline": "ctx->used_pa_types = 0;"
    },
    {
        "line": 115,
        "fullcodeline": "ctx->ic_flags |= KRB5_INIT_CREDS_PKINIT_KX_VALID;"
    },
    {
        "line": 175,
        "fullcodeline": "krb5_set_error_message(context, ret,"
    },
    {
        "line": 179,
        "fullcodeline": "N_(\"Preauth required but no preauth \""
    },
    {
        "line": 176,
        "fullcodeline": "N_(\"Failed to decode METHOD-DATA\", \"\"));"
    },
    {
        "line": 189,
        "fullcodeline": "ret = 0;"
    },
    {
        "line": 196,
        "fullcodeline": "} else if (ret == KRB5_KDC_ERR_WRONG_REALM && ctx->flags.canonicalize) {"
    },
    {
        "line": 204,
        "fullcodeline": "_krb5_debug(context, 5,"
    },
    {
        "line": 208,
        "fullcodeline": "ret = krb5_principal_set_realm(context,"
    },
    {
        "line": 220,
        "fullcodeline": "free_AS_REQ(&ctx->as_req);"
    },
    {
        "line": 221,
        "fullcodeline": "memset(&ctx->as_req, 0, sizeof(ctx->as_req));"
    },
    {
        "line": 223,
        "fullcodeline": "ctx->used_pa_types = 0;"
    },
    {
        "line": 199,
        "fullcodeline": "if (ctx->error.crealm == NULL) {"
    },
    {
        "line": 214,
        "fullcodeline": "if (krb5_principal_is_krbtgt(context, ctx->cred.server)) {"
    },
    {
        "line": 200,
        "fullcodeline": "krb5_set_error_message(context, ret,"
    },
    {
        "line": 215,
        "fullcodeline": "ret = krb5_init_creds_set_service(context, ctx, NULL);"
    },
    {
        "line": 224,
        "fullcodeline": "} else if (ret == KRB5KDC_ERR_KEY_EXP && ctx->runflags.change_password == 0 && ctx->prompter) {"
    },
    {
        "line": 201,
        "fullcodeline": "N_(\"Got a client referral, not but no realm\", \"\"));"
    },
    {
        "line": 229,
        "fullcodeline": "ctx->prompter(context, ctx->prompter_data, NULL, N_(\"Password has expired\", \"\"), 0, NULL);"
    },
    {
        "line": 240,
        "fullcodeline": "ret = change_password(context,"
    },
    {
        "line": 251,
        "fullcodeline": "krb5_init_creds_set_password(context, ctx, buf2);"
    },
    {
        "line": 253,
        "fullcodeline": "ctx->used_pa_types = 0;"
    },
    {
        "line": 254,
        "fullcodeline": "ret = 0;"
    },
    {
        "line": 225,
        "fullcodeline": "char buf2[1024];"
    },
    {
        "line": 237,
        "fullcodeline": "if (ctx->prompter == NULL)"
    },
    {
        "line": 233,
        "fullcodeline": "if (ctx->in_tkt_service != NULL && strcmp(ctx->in_tkt_service, \"kadmin/changepw\") == 0)"
    },
    {
        "line": 256,
        "fullcodeline": "} else if (ret == KRB5KDC_ERR_PREAUTH_FAILED) {"
    },
    {
        "line": 263,
        "fullcodeline": "_krb5_debug(context, 10, \"preauth failed with FAST, \""
    },
    {
        "line": 267,
        "fullcodeline": "ctx->used_pa_types = 0;"
    },
    {
        "line": 268,
        "fullcodeline": "ret = 0;"
    },
    {
        "line": 258,
        "fullcodeline": "if (ctx->fast_state.flags & KRB5_FAST_DISABLED)"
    },
    {
        "line": 260,
        "fullcodeline": "if (ctx->fast_state.flags & (KRB5_FAST_REQUIRED | KRB5_FAST_EXPECTED))"
    }
]