[
    {
        "line": 15,
        "fullcodeline": "unsigned char *dh_gen_key = NULL;"
    },
    {
        "line": 16,
        "fullcodeline": "struct krb5_pk_cert *host = NULL;"
    },
    {
        "line": 17,
        "fullcodeline": "BIGNUM *kdc_dh_pubkey = NULL;"
    },
    {
        "line": 19,
        "fullcodeline": "heim_oid contentType = { 0, NULL };"
    },
    {
        "line": 22,
        "fullcodeline": "int dh_gen_keylen = 0;"
    },
    {
        "line": 25,
        "fullcodeline": "krb5_data_zero(&content);"
    },
    {
        "line": 26,
        "fullcodeline": "memset(&kdc_dh_info, 0, sizeof(kdc_dh_info));"
    },
    {
        "line": 34,
        "fullcodeline": "ret = pk_verify_sign(context,"
    },
    {
        "line": 45,
        "fullcodeline": "ret = pk_verify_host(context, realm, hi, ctx, host);"
    },
    {
        "line": 56,
        "fullcodeline": "ret = decode_KDCDHKeyInfo(content.data,"
    },
    {
        "line": 102,
        "fullcodeline": "p = kdc_dh_info.subjectPublicKey.data;"
    },
    {
        "line": 103,
        "fullcodeline": "size = (kdc_dh_info.subjectPublicKey.length + 7) / 8;"
    },
    {
        "line": 161,
        "fullcodeline": "*key = malloc (sizeof (**key));"
    },
    {
        "line": 167,
        "fullcodeline": "ret = _krb5_pk_octetstring2key(context,"
    },
    {
        "line": 28,
        "fullcodeline": "if (der_heim_oid_cmp(&asn1_oid_id_pkcs7_signedData, dataType)) {"
    },
    {
        "line": 49,
        "fullcodeline": "if (der_heim_oid_cmp(&contentType, &asn1_oid_id_pkdhkeydata)) {"
    },
    {
        "line": 68,
        "fullcodeline": "if (kdc_dh_info.nonce != nonce) {"
    },
    {
        "line": 105,
        "fullcodeline": "if (ctx->keyex == USE_DH) {"
    },
    {
        "line": 153,
        "fullcodeline": "if (dh_gen_keylen <= 0) {"
    },
    {
        "line": 162,
        "fullcodeline": "if (*key == NULL) {"
    },
    {
        "line": 29,
        "fullcodeline": "krb5_set_error_message(context, EINVAL,"
    },
    {
        "line": 50,
        "fullcodeline": "ret = KRB5KRB_AP_ERR_MSG_TYPE;"
    },
    {
        "line": 51,
        "fullcodeline": "krb5_set_error_message(context, ret,"
    },
    {
        "line": 62,
        "fullcodeline": "krb5_set_error_message(context, ret,"
    },
    {
        "line": 69,
        "fullcodeline": "ret = KRB5KRB_AP_ERR_MODIFIED;"
    },
    {
        "line": 70,
        "fullcodeline": "krb5_set_error_message(context, ret,"
    },
    {
        "line": 107,
        "fullcodeline": "ret = decode_DHPublicKey(p, size, &k, NULL);"
    },
    {
        "line": 115,
        "fullcodeline": "kdc_dh_pubkey = integer_to_BN(context, \"DHPublicKey\", &k);"
    },
    {
        "line": 123,
        "fullcodeline": "size = DH_size(ctx->u.dh);"
    },
    {
        "line": 125,
        "fullcodeline": "dh_gen_key = malloc(size);"
    },
    {
        "line": 131,
        "fullcodeline": "dh_gen_keylen = DH_compute_key(dh_gen_key, kdc_dh_pubkey, ctx->u.dh);"
    },
    {
        "line": 154,
        "fullcodeline": "ret = EINVAL;"
    },
    {
        "line": 155,
        "fullcodeline": "krb5_set_error_message(context, ret,"
    },
    {
        "line": 157,
        "fullcodeline": "dh_gen_keylen = 0;"
    },
    {
        "line": 163,
        "fullcodeline": "ret = krb5_enomem(context);"
    },
    {
        "line": 173,
        "fullcodeline": "krb5_set_error_message(context, ret,"
    },
    {
        "line": 184,
        "fullcodeline": "memset(dh_gen_key, 0, dh_gen_keylen);"
    },
    {
        "line": 30,
        "fullcodeline": "N_(\"PKINIT: Invalid content type\", \"\"));"
    },
    {
        "line": 52,
        "fullcodeline": "N_(\"pkinit - dh reply contains wrong oid\", \"\"));"
    },
    {
        "line": 63,
        "fullcodeline": "N_(\"pkinit - failed to decode \""
    },
    {
        "line": 71,
        "fullcodeline": "N_(\"PKINIT: DH nonce is wrong\", \"\"));"
    },
    {
        "line": 76,
        "fullcodeline": "if (k_n == NULL) {"
    },
    {
        "line": 83,
        "fullcodeline": "if (c_n == NULL) {"
    },
    {
        "line": 98,
        "fullcodeline": "c_n = NULL;"
    },
    {
        "line": 117,
        "fullcodeline": "if (kdc_dh_pubkey == NULL) {"
    },
    {
        "line": 126,
        "fullcodeline": "if (dh_gen_key == NULL) {"
    },
    {
        "line": 132,
        "fullcodeline": "if (dh_gen_keylen == -1) {"
    },
    {
        "line": 139,
        "fullcodeline": "if (dh_gen_keylen < (int)size) {"
    },
    {
        "line": 146,
        "fullcodeline": "ret = _krb5_pk_rd_pa_reply_ecdh_compute_key(context, ctx, p,"
    },
    {
        "line": 156,
        "fullcodeline": "N_(\"PKINIT: resulting DH key <= 0\", \"\"));"
    },
    {
        "line": 174,
        "fullcodeline": "N_(\"PKINIT: can't create key from DH key\", \"\"));"
    },
    {
        "line": 77,
        "fullcodeline": "ret = KRB5KRB_ERR_GENERIC;"
    },
    {
        "line": 78,
        "fullcodeline": "krb5_set_error_message(context, ret,"
    },
    {
        "line": 84,
        "fullcodeline": "ret = KRB5KRB_ERR_GENERIC;"
    },
    {
        "line": 85,
        "fullcodeline": "krb5_set_error_message(context, ret,"
    },
    {
        "line": 109,
        "fullcodeline": "krb5_set_error_message(context, ret,"
    },
    {
        "line": 118,
        "fullcodeline": "ret = ENOMEM;"
    },
    {
        "line": 127,
        "fullcodeline": "ret = krb5_enomem(context);"
    },
    {
        "line": 133,
        "fullcodeline": "ret = KRB5KRB_ERR_GENERIC;"
    },
    {
        "line": 134,
        "fullcodeline": "dh_gen_keylen = 0;"
    },
    {
        "line": 135,
        "fullcodeline": "krb5_set_error_message(context, ret,"
    },
    {
        "line": 140,
        "fullcodeline": "size -= dh_gen_keylen;"
    },
    {
        "line": 141,
        "fullcodeline": "memmove(dh_gen_key + size, dh_gen_key, dh_gen_keylen);"
    },
    {
        "line": 142,
        "fullcodeline": "memset(dh_gen_key, 0, size);"
    },
    {
        "line": 79,
        "fullcodeline": "N_(\"pkinit; got key expiration \""
    },
    {
        "line": 86,
        "fullcodeline": "N_(\"pkinit; got DH reuse but no \""
    },
    {
        "line": 92,
        "fullcodeline": "ret = KRB5KRB_ERR_GENERIC;"
    },
    {
        "line": 93,
        "fullcodeline": "krb5_set_error_message(context, ret,"
    },
    {
        "line": 110,
        "fullcodeline": "N_(\"pkinit: can't decode \""
    },
    {
        "line": 136,
        "fullcodeline": "N_(\"PKINIT: Can't compute Diffie-Hellman key\", \"\"));"
    },
    {
        "line": 94,
        "fullcodeline": "N_(\"pkinit: got server nonce \""
    }
]