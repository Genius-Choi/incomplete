[
    {
        "line": 5,
        "fullcodeline": "char buffer[sizeof(struct squashfs_dir_entry) + SQUASHFS_NAME_LEN + 1]"
    },
    {
        "line": 7,
        "fullcodeline": "struct squashfs_dir_entry *dire = (struct squashfs_dir_entry *) buffer;"
    },
    {
        "line": 14,
        "fullcodeline": "TRACE(\"squashfs_opendir: inode start block %d, offset %d\\n\","
    },
    {
        "line": 17,
        "fullcodeline": "*i = s_ops.read_inode(block_start, offset);"
    },
    {
        "line": 19,
        "fullcodeline": "dir = malloc(sizeof(struct dir));"
    },
    {
        "line": 23,
        "fullcodeline": "dir->dir_count = 0;"
    },
    {
        "line": 24,
        "fullcodeline": "dir->cur_entry = 0;"
    },
    {
        "line": 25,
        "fullcodeline": "dir->mode = (*i)->mode;"
    },
    {
        "line": 26,
        "fullcodeline": "dir->uid = (*i)->uid;"
    },
    {
        "line": 27,
        "fullcodeline": "dir->guid = (*i)->gid;"
    },
    {
        "line": 28,
        "fullcodeline": "dir->mtime = (*i)->time;"
    },
    {
        "line": 29,
        "fullcodeline": "dir->xattr = (*i)->xattr;"
    },
    {
        "line": 30,
        "fullcodeline": "dir->dirs = NULL;"
    },
    {
        "line": 41,
        "fullcodeline": "start = sBlk.s.directory_table_start + (*i)->start;"
    },
    {
        "line": 42,
        "fullcodeline": "bytes = lookup_entry(directory_table_hash, start);"
    },
    {
        "line": 48,
        "fullcodeline": "bytes += (*i)->offset;"
    },
    {
        "line": 49,
        "fullcodeline": "size = (*i)->data + bytes - 3;"
    },
    {
        "line": 103,
        "fullcodeline": "free(dir->dirs);"
    },
    {
        "line": 20,
        "fullcodeline": "if(dir == NULL)"
    },
    {
        "line": 32,
        "fullcodeline": "if ((*i)->data == 3)"
    },
    {
        "line": 44,
        "fullcodeline": "if(bytes == -1)"
    },
    {
        "line": 51,
        "fullcodeline": "while(bytes < size) {"
    },
    {
        "line": 21,
        "fullcodeline": "EXIT_UNSQUASH(\"squashfs_opendir: malloc failed!\\n\");"
    },
    {
        "line": 52,
        "fullcodeline": "SQUASHFS_SWAP_DIR_HEADER(directory_table + bytes, &dirh);"
    },
    {
        "line": 54,
        "fullcodeline": "dir_count = dirh.count + 1;"
    },
    {
        "line": 55,
        "fullcodeline": "TRACE(\"squashfs_opendir: Read directory header @ byte position \""
    },
    {
        "line": 57,
        "fullcodeline": "bytes += sizeof(dirh);"
    },
    {
        "line": 60,
        "fullcodeline": "if(dir_count > SQUASHFS_DIR_COUNT) {"
    },
    {
        "line": 66,
        "fullcodeline": "SQUASHFS_SWAP_DIR_ENTRY(directory_table + bytes, dire);"
    },
    {
        "line": 68,
        "fullcodeline": "bytes += sizeof(*dire);"
    },
    {
        "line": 76,
        "fullcodeline": "memcpy(dire->name, directory_table + bytes,"
    },
    {
        "line": 78,
        "fullcodeline": "dire->name[dire->size + 1] = '\\0';"
    },
    {
        "line": 79,
        "fullcodeline": "TRACE(\"squashfs_opendir: directory entry %s, inode \""
    },
    {
        "line": 90,
        "fullcodeline": "strcpy(dir->dirs[dir->dir_count].name, dire->name);"
    },
    {
        "line": 95,
        "fullcodeline": "dir->dir_count ++;"
    },
    {
        "line": 96,
        "fullcodeline": "bytes += dire->size + 1;"
    },
    {
        "line": 71,
        "fullcodeline": "if(dire->size >= SQUASHFS_NAME_LEN) {"
    },
    {
        "line": 82,
        "fullcodeline": "if((dir->dir_count % DIR_ENT_SIZE) == 0) {"
    },
    {
        "line": 83,
        "fullcodeline": "new_dir = realloc(dir->dirs, (dir->dir_count +"
    },
    {
        "line": 88,
        "fullcodeline": "dir->dirs = new_dir;"
    },
    {
        "line": 85,
        "fullcodeline": "if(new_dir == NULL)"
    },
    {
        "line": 84,
        "fullcodeline": "DIR_ENT_SIZE) * sizeof(struct dir_ent));"
    }
]