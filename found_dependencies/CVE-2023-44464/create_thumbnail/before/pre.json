[
    {
        "line": 2,
        "fullcodeline": "source = default_storage.open(sourcename)"
    },
    {
        "line": 3,
        "fullcodeline": "image = Image.open(BytesIO(source.read()))"
    },
    {
        "line": 9,
        "fullcodeline": "frames = [resize_image(frame, size) for frame in ImageSequence.Iterator(image)]"
    },
    {
        "line": 10,
        "fullcodeline": "image_out = frames[0]"
    },
    {
        "line": 11,
        "fullcodeline": "save_kwargs = {}"
    },
    {
        "line": 30,
        "fullcodeline": "checksum = hashlib.md5(image.tobytes()).hexdigest()"
    },
    {
        "line": 31,
        "fullcodeline": "name = checksum + '.' + size.replace('^', 'c') + '.' + target_ext"
    },
    {
        "line": 32,
        "fullcodeline": "buffer = BytesIO()"
    },
    {
        "line": 37,
        "fullcodeline": "image_out.save(fp=buffer, format=target_ext.upper(), quality=quality, **save_kwargs)"
    },
    {
        "line": 38,
        "fullcodeline": "imgfile = ContentFile(buffer.getvalue())"
    },
    {
        "line": 40,
        "fullcodeline": "t = Thumbnail.objects.create(source=sourcename, size=size)"
    },
    {
        "line": 13,
        "fullcodeline": "if source.name.lower().endswith('.jpg') or source.name.lower().endswith('.jpeg'):"
    },
    {
        "line": 33,
        "fullcodeline": "if image_out.mode == \"P\" and source.name.lower().endswith('.png'):"
    },
    {
        "line": 35,
        "fullcodeline": "if image_out.mode not in (\"1\", \"L\", \"RGB\", \"RGBA\"):"
    },
    {
        "line": 41,
        "fullcodeline": "t.thumb.save(name, imgfile)"
    },
    {
        "line": 5,
        "fullcodeline": "image.load()"
    },
    {
        "line": 15,
        "fullcodeline": "target_ext = 'jpeg'"
    },
    {
        "line": 16,
        "fullcodeline": "quality = 95"
    },
    {
        "line": 34,
        "fullcodeline": "image_out = image_out.convert('RGBA')"
    },
    {
        "line": 36,
        "fullcodeline": "image_out = image_out.convert('RGB')"
    },
    {
        "line": 17,
        "fullcodeline": "elif source.name.lower().endswith('.gif') or source.name.lower().endswith('.png'):"
    },
    {
        "line": 7,
        "fullcodeline": "raise ThumbnailError('Could not load image')"
    },
    {
        "line": 18,
        "fullcodeline": "target_ext = source.name.lower()[-3:]"
    },
    {
        "line": 19,
        "fullcodeline": "quality = None"
    },
    {
        "line": 20,
        "fullcodeline": "image_out.info = image.info"
    },
    {
        "line": 21,
        "fullcodeline": "save_kwargs = {"
    },
    {
        "line": 27,
        "fullcodeline": "target_ext = 'png'"
    },
    {
        "line": 28,
        "fullcodeline": "quality = None"
    },
    {
        "line": 22,
        "fullcodeline": "'append_images': frames[1:],"
    },
    {
        "line": 23,
        "fullcodeline": "'loop': image.info.get('loop', 0),"
    }
]