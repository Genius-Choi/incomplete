[
    {
        "line": 4,
        "fullcodeline": "AMQP_VALUE link_source = TEST_LINK_SOURCE;"
    },
    {
        "line": 5,
        "fullcodeline": "AMQP_VALUE link_target = TEST_LINK_TARGET;"
    },
    {
        "line": 7,
        "fullcodeline": "umock_c_reset_all_calls();"
    },
    {
        "line": 10,
        "fullcodeline": "STRICT_EXPECTED_CALL(amqpvalue_clone(IGNORED_PTR_ARG));"
    },
    {
        "line": 11,
        "fullcodeline": "STRICT_EXPECTED_CALL(amqpvalue_clone(IGNORED_PTR_ARG));"
    },
    {
        "line": 12,
        "fullcodeline": "STRICT_EXPECTED_CALL(tickcounter_create());"
    },
    {
        "line": 13,
        "fullcodeline": "STRICT_EXPECTED_CALL(singlylinkedlist_create());"
    },
    {
        "line": 14,
        "fullcodeline": "STRICT_EXPECTED_CALL(gballoc_malloc(IGNORED_NUM_ARG));"
    },
    {
        "line": 19,
        "fullcodeline": "LINK_HANDLE link = link_create(TEST_SESSION_HANDLE, TEST_LINK_NAME_1, role_receiver, link_source, link_target);"
    },
    {
        "line": 22,
        "fullcodeline": "ASSERT_ARE_EQUAL(char_ptr, umock_c_get_expected_calls(), umock_c_get_actual_calls());"
    },
    {
        "line": 23,
        "fullcodeline": "ASSERT_IS_NOT_NULL(link);"
    },
    {
        "line": 26,
        "fullcodeline": "link_destroy(link);"
    }
]