[
    {
        "line": 5,
        "fullcodeline": "g_testByTest = TEST_MUTEX_CREATE();"
    },
    {
        "line": 6,
        "fullcodeline": "ASSERT_IS_NOT_NULL(g_testByTest);"
    },
    {
        "line": 8,
        "fullcodeline": "umock_c_init(on_umock_c_error);"
    },
    {
        "line": 10,
        "fullcodeline": "result = umocktypes_bool_register_types();"
    },
    {
        "line": 13,
        "fullcodeline": "REGISTER_GLOBAL_MOCK_HOOK(gballoc_malloc, my_gballoc_malloc);"
    },
    {
        "line": 14,
        "fullcodeline": "REGISTER_GLOBAL_MOCK_HOOK(gballoc_calloc, my_gballoc_calloc);"
    },
    {
        "line": 15,
        "fullcodeline": "REGISTER_GLOBAL_MOCK_HOOK(gballoc_realloc, my_gballoc_realloc);"
    },
    {
        "line": 16,
        "fullcodeline": "REGISTER_GLOBAL_MOCK_HOOK(gballoc_free, my_gballoc_free);"
    },
    {
        "line": 30,
        "fullcodeline": "REGISTER_GLOBAL_MOCK_RETURNS(tickcounter_create, TEST_TICK_COUNTER_HANDLE, NULL);"
    },
    {
        "line": 31,
        "fullcodeline": "REGISTER_GLOBAL_MOCK_RETURNS(singlylinkedlist_create, TEST_SINGLYLINKEDLIST_HANDLE, NULL);"
    },
    {
        "line": 32,
        "fullcodeline": "REGISTER_GLOBAL_MOCK_RETURNS(session_create_link_endpoint, TEST_LINK_ENDPOINT, NULL);"
    },
    {
        "line": 33,
        "fullcodeline": "REGISTER_GLOBAL_MOCK_RETURNS(session_start_link_endpoint, 0, 1);"
    },
    {
        "line": 35,
        "fullcodeline": "REGISTER_TYPE(FLOW_HANDLE, FLOW_HANDLE);"
    }
]