[
    {
        "line": 5,
        "fullcodeline": "char *sm_gitdir = clone_submodule_sm_gitdir(clone_data->name);"
    },
    {
        "line": 6,
        "fullcodeline": "char *sm_alternate = NULL, *error_strategy = NULL;"
    },
    {
        "line": 8,
        "fullcodeline": "struct child_process cp = CHILD_PROCESS_INIT;"
    },
    {
        "line": 9,
        "fullcodeline": "const char *clone_data_path = clone_data->path;"
    },
    {
        "line": 10,
        "fullcodeline": "char *to_free = NULL;"
    },
    {
        "line": 107,
        "fullcodeline": "connect_work_tree_and_git_dir(clone_data_path, sm_gitdir, 0);"
    },
    {
        "line": 109,
        "fullcodeline": "p = git_pathdup_submodule(clone_data_path, \"config\");"
    },
    {
        "line": 114,
        "fullcodeline": "git_config_get_string(\"submodule.alternateLocation\", &sm_alternate);"
    },
    {
        "line": 118,
        "fullcodeline": "git_config_get_string(\"submodule.alternateErrorStrategy\", &error_strategy);"
    },
    {
        "line": 123,
        "fullcodeline": "free(sm_alternate);"
    },
    {
        "line": 124,
        "fullcodeline": "free(error_strategy);"
    },
    {
        "line": 126,
        "fullcodeline": "free(sm_gitdir);"
    },
    {
        "line": 127,
        "fullcodeline": "free(p);"
    },
    {
        "line": 128,
        "fullcodeline": "free(to_free);"
    },
    {
        "line": 12,
        "fullcodeline": "if (!is_absolute_path(clone_data->path))"
    },
    {
        "line": 16,
        "fullcodeline": "if (validate_submodule_git_dir(sm_gitdir, clone_data->name) < 0)"
    },
    {
        "line": 20,
        "fullcodeline": "if (!file_exists(sm_gitdir)) {"
    },
    {
        "line": 99,
        "fullcodeline": "if (validate_submodule_git_dir(sm_gitdir, clone_data->name) < 0) {"
    },
    {
        "line": 110,
        "fullcodeline": "if (!p)"
    },
    {
        "line": 13,
        "fullcodeline": "clone_data_path = to_free = xstrfmt(\"%s/%s\", get_git_work_tree(),"
    },
    {
        "line": 17,
        "fullcodeline": "die(_(\"refusing to create/use '%s' in another submodule's \""
    },
    {
        "line": 28,
        "fullcodeline": "prepare_possible_alternates(clone_data->name, reference);"
    },
    {
        "line": 30,
        "fullcodeline": "strvec_push(&cp.args, \"clone\");"
    },
    {
        "line": 31,
        "fullcodeline": "strvec_push(&cp.args, \"--no-checkout\");"
    },
    {
        "line": 58,
        "fullcodeline": "strvec_push(&cp.args, \"--\");"
    },
    {
        "line": 59,
        "fullcodeline": "strvec_push(&cp.args, clone_data->url);"
    },
    {
        "line": 60,
        "fullcodeline": "strvec_push(&cp.args, clone_data_path);"
    },
    {
        "line": 62,
        "fullcodeline": "cp.git_cmd = 1;"
    },
    {
        "line": 63,
        "fullcodeline": "prepare_submodule_repo_env(&cp.env);"
    },
    {
        "line": 64,
        "fullcodeline": "cp.no_stdin = 1;"
    },
    {
        "line": 100,
        "fullcodeline": "char *head = xstrfmt(\"%s/HEAD\", sm_gitdir);"
    },
    {
        "line": 101,
        "fullcodeline": "unlink(head);"
    },
    {
        "line": 102,
        "fullcodeline": "free(head);"
    },
    {
        "line": 103,
        "fullcodeline": "die(_(\"refusing to create/use '%s' in another submodule's \""
    },
    {
        "line": 111,
        "fullcodeline": "die(_(\"could not get submodule directory for '%s'\"), clone_data_path);"
    },
    {
        "line": 116,
        "fullcodeline": "git_config_set_in_file(p, \"submodule.alternateLocation\","
    },
    {
        "line": 120,
        "fullcodeline": "git_config_set_in_file(p, \"submodule.alternateErrorStrategy\","
    },
    {
        "line": 21,
        "fullcodeline": "if (clone_data->require_init && !stat(clone_data_path, &st) &&"
    },
    {
        "line": 25,
        "fullcodeline": "if (safe_create_leading_directories_const(sm_gitdir) < 0)"
    },
    {
        "line": 36,
        "fullcodeline": "if (clone_data->depth && *(clone_data->depth))"
    },
    {
        "line": 47,
        "fullcodeline": "if (sm_gitdir && *sm_gitdir)"
    },
    {
        "line": 49,
        "fullcodeline": "if (clone_data->filter_options && clone_data->filter_options->choice)"
    },
    {
        "line": 53,
        "fullcodeline": "if (clone_data->single_branch >= 0)"
    },
    {
        "line": 66,
        "fullcodeline": "if(run_command(&cp))"
    },
    {
        "line": 70,
        "fullcodeline": "if (clone_data->require_init && !stat(clone_data_path, &st) &&"
    },
    {
        "line": 85,
        "fullcodeline": "path = xstrfmt(\"%s/index\", sm_gitdir);"
    },
    {
        "line": 86,
        "fullcodeline": "unlink_or_warn(path);"
    },
    {
        "line": 87,
        "fullcodeline": "free(path);"
    },
    {
        "line": 22,
        "fullcodeline": "!is_empty_dir(clone_data_path))"
    },
    {
        "line": 23,
        "fullcodeline": "die(_(\"directory not empty: '%s'\"), clone_data_path);"
    },
    {
        "line": 26,
        "fullcodeline": "die(_(\"could not create directory '%s'\"), sm_gitdir);"
    },
    {
        "line": 33,
        "fullcodeline": "strvec_push(&cp.args, \"--quiet\");"
    },
    {
        "line": 35,
        "fullcodeline": "strvec_push(&cp.args, \"--progress\");"
    },
    {
        "line": 37,
        "fullcodeline": "strvec_pushl(&cp.args, \"--depth\", clone_data->depth, NULL);"
    },
    {
        "line": 41,
        "fullcodeline": "for_each_string_list_item(item, reference)"
    },
    {
        "line": 42,
        "fullcodeline": "strvec_pushl(&cp.args, \"--reference\","
    },
    {
        "line": 46,
        "fullcodeline": "strvec_push(&cp.args, \"--dissociate\");"
    },
    {
        "line": 48,
        "fullcodeline": "strvec_pushl(&cp.args, \"--separate-git-dir\", sm_gitdir, NULL);"
    },
    {
        "line": 50,
        "fullcodeline": "strvec_pushf(&cp.args, \"--filter=%s\","
    },
    {
        "line": 54,
        "fullcodeline": "strvec_push(&cp.args, clone_data->single_branch ?"
    },
    {
        "line": 67,
        "fullcodeline": "die(_(\"clone of '%s' into submodule path '%s' failed\"),"
    },
    {
        "line": 71,
        "fullcodeline": "!dir_contains_only_dotgit(clone_data_path)) {"
    },
    {
        "line": 72,
        "fullcodeline": "char *dot_git = xstrfmt(\"%s/.git\", clone_data_path);"
    },
    {
        "line": 73,
        "fullcodeline": "unlink(dot_git);"
    },
    {
        "line": 74,
        "fullcodeline": "free(dot_git);"
    },
    {
        "line": 75,
        "fullcodeline": "die(_(\"directory not empty: '%s'\"), clone_data_path);"
    },
    {
        "line": 80,
        "fullcodeline": "if (clone_data->require_init && !access(clone_data_path, X_OK) &&"
    },
    {
        "line": 83,
        "fullcodeline": "if (safe_create_leading_directories_const(clone_data_path) < 0)"
    },
    {
        "line": 51,
        "fullcodeline": "expand_list_objects_filter_spec("
    },
    {
        "line": 81,
        "fullcodeline": "!is_empty_dir(clone_data_path))"
    },
    {
        "line": 82,
        "fullcodeline": "die(_(\"directory not empty: '%s'\"), clone_data_path);"
    },
    {
        "line": 84,
        "fullcodeline": "die(_(\"could not create directory '%s'\"), clone_data_path);"
    }
]