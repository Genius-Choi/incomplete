[
    {
        "line": 13,
        "fullcodeline": "if (is_dmar_unit_valid(dmar_unit, sid) && (index < CONFIG_MAX_IR_ENTRIES)) {"
    },
    {
        "line": 8,
        "fullcodeline": "dmar_unit = device_to_dmaru((uint8_t)intr_src->src.msi.bits.b, intr_src->src.msi.fields.devfun);"
    },
    {
        "line": 14,
        "fullcodeline": "ir_table = (union dmar_ir_entry *)hpa2hva(dmar_unit->ir_table_addr);"
    },
    {
        "line": 15,
        "fullcodeline": "ir_entry = ir_table + index;"
    },
    {
        "line": 16,
        "fullcodeline": "ir_entry->bits.remap.present = 0x0UL;"
    },
    {
        "line": 18,
        "fullcodeline": "iommu_flush_cache(ir_entry, sizeof(union dmar_ir_entry));"
    },
    {
        "line": 19,
        "fullcodeline": "dmar_invalid_iec(dmar_unit, index, 0U, false);"
    },
    {
        "line": 10,
        "fullcodeline": "dmar_unit = ioapic_to_dmaru(intr_src->src.ioapic_id, &sid);"
    },
    {
        "line": 21,
        "fullcodeline": "if (!is_irte_reserved(dmar_unit, index)) {"
    },
    {
        "line": 22,
        "fullcodeline": "spinlock_obtain(&dmar_unit->lock);"
    },
    {
        "line": 23,
        "fullcodeline": "bitmap_clear_nolock(index & 0x3FU, &dmar_unit->irte_alloc_bitmap[index >> 6U]);"
    },
    {
        "line": 24,
        "fullcodeline": "spinlock_release(&dmar_unit->lock);"
    }
]