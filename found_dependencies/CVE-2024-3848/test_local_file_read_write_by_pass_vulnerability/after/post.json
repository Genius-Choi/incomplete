[
    {
        "line": 2,
        "fullcodeline": "request = mock.MagicMock()"
    },
    {
        "line": 3,
        "fullcodeline": "request.method = \"POST\""
    },
    {
        "line": 4,
        "fullcodeline": "request.content_type = \"application/json; charset=utf-8\""
    },
    {
        "line": 5,
        "fullcodeline": "request.get_json = mock.MagicMock()"
    },
    {
        "line": 6,
        "fullcodeline": "request.get_json.return_value = {"
    },
    {
        "line": 10,
        "fullcodeline": "msg = _get_request_message(CreateExperiment(), flask_request=request)"
    },
    {
        "line": 11,
        "fullcodeline": "with mock.patch(\"mlflow.server.handlers._get_request_message\", return_value=msg):"
    },
    {
        "line": 19,
        "fullcodeline": "with mock.patch(\"mlflow.server.handlers._get_tracking_store\") as mock_get_tracking_store:"
    },
    {
        "line": 18,
        "fullcodeline": "run_id = uuid.uuid4().hex"
    },
    {
        "line": 12,
        "fullcodeline": "response = _create_experiment()"
    },
    {
        "line": 13,
        "fullcodeline": "json_response = json.loads(response.get_data())"
    },
    {
        "line": 14,
        "fullcodeline": "assert json_response[\"message\"] == \"'artifact_location' URL can't include fragment part.\""
    },
    {
        "line": 20,
        "fullcodeline": "mock_get_tracking_store().get_run("
    },
    {
        "line": 22,
        "fullcodeline": ").info.artifact_uri = f\"http://host/{run_id}/artifacts/abc\""
    },
    {
        "line": 24,
        "fullcodeline": "with pytest.raises("
    },
    {
        "line": 27,
        "fullcodeline": "\"the run_id request parameter has to be specified and the local \""
    },
    {
        "line": 32,
        "fullcodeline": "_validate_source(\"/local/path/xyz\", run_id)"
    }
]