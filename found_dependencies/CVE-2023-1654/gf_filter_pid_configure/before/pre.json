[
    {
        "line": 5,
        "fullcodeline": "Bool refire_events=GF_FALSE;"
    },
    {
        "line": 6,
        "fullcodeline": "Bool new_pid_inst=GF_FALSE;"
    },
    {
        "line": 7,
        "fullcodeline": "Bool remove_filter=GF_FALSE;"
    },
    {
        "line": 8,
        "fullcodeline": "GF_FilterPidInst *pidinst=NULL;"
    },
    {
        "line": 9,
        "fullcodeline": "GF_Filter *alias_orig = NULL;"
    },
    {
        "line": 16,
        "fullcodeline": "assert(filter->freg->configure_pid);"
    },
    {
        "line": 117,
        "fullcodeline": "filter->in_connect_err = GF_EOS;"
    },
    {
        "line": 124,
        "fullcodeline": "GF_LOG(GF_LOG_DEBUG, GF_LOG_FILTER, (\"Filter %s PID %s reconfigure\\n\", pidinst->filter->name, pidinst->pid->name));"
    },
    {
        "line": 125,
        "fullcodeline": "e = filter->freg->configure_pid(filter, (GF_FilterPid*) pidinst, (ctype==GF_PID_CONF_REMOVE) ? GF_TRUE : GF_FALSE);"
    },
    {
        "line": 145,
        "fullcodeline": "filter->in_connect_err = GF_OK;"
    },
    {
        "line": 58,
        "fullcodeline": "if (!pidinst) {"
    },
    {
        "line": 70,
        "fullcodeline": "if (!pidinst) {"
    },
    {
        "line": 78,
        "fullcodeline": "if (!pidinst->alias_orig)"
    },
    {
        "line": 147,
        "fullcodeline": "if (e==GF_OK) {"
    },
    {
        "line": 367,
        "fullcodeline": "if (ctype==GF_PID_CONF_REMOVE) {"
    },
    {
        "line": 12,
        "fullcodeline": "alias_orig = filter;"
    },
    {
        "line": 13,
        "fullcodeline": "filter = filter->multi_sink_target;"
    },
    {
        "line": 18,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_FILTER, (\"Trying to configure PID %s in finalized filter %s\\n\",  pid->name, filter->name));"
    },
    {
        "line": 27,
        "fullcodeline": "count = gf_list_count(filter->detached_pid_inst);"
    },
    {
        "line": 59,
        "fullcodeline": "count = pid->num_destinations;"
    },
    {
        "line": 75,
        "fullcodeline": "pidinst = gf_filter_pid_inst_new(filter, pid);"
    },
    {
        "line": 79,
        "fullcodeline": "pidinst->alias_orig = alias_orig;"
    },
    {
        "line": 83,
        "fullcodeline": "assert(pidinst);"
    },
    {
        "line": 84,
        "fullcodeline": "gf_mx_p(pid->filter->tasks_mx);"
    },
    {
        "line": 86,
        "fullcodeline": "GF_LOG(GF_LOG_DEBUG, GF_LOG_FILTER, (\"Registering %s:%s as destination for %s:%s\\n\", pid->filter->name, pid->name, pidinst->filter->name, pidinst->pid->name));"
    },
    {
        "line": 87,
        "fullcodeline": "gf_list_add(pid->destinations, pidinst);"
    },
    {
        "line": 88,
        "fullcodeline": "pid->num_destinations = gf_list_count(pid->destinations);"
    },
    {
        "line": 90,
        "fullcodeline": "gf_mx_v(pid->filter->tasks_mx);"
    },
    {
        "line": 92,
        "fullcodeline": "gf_mx_p(filter->tasks_mx);"
    },
    {
        "line": 94,
        "fullcodeline": "gf_list_add(filter->input_pids, pidinst);"
    },
    {
        "line": 95,
        "fullcodeline": "filter->num_input_pids = gf_list_count(filter->input_pids);"
    },
    {
        "line": 101,
        "fullcodeline": "gf_mx_v(filter->tasks_mx);"
    },
    {
        "line": 106,
        "fullcodeline": "gf_filter_pid_update_caps(pid);"
    },
    {
        "line": 113,
        "fullcodeline": "gf_filter_pid_inst_swap(filter, pidinst);"
    },
    {
        "line": 114,
        "fullcodeline": "filter->swap_pending = GF_FALSE;"
    },
    {
        "line": 142,
        "fullcodeline": "if ((e==GF_OK) && (filter->in_connect_err<GF_OK))"
    },
    {
        "line": 143,
        "fullcodeline": "e = filter->in_connect_err;"
    },
    {
        "line": 355,
        "fullcodeline": "filter->has_pending_pids = GF_FALSE;"
    },
    {
        "line": 368,
        "fullcodeline": "gf_mx_p(filter->tasks_mx);"
    },
    {
        "line": 369,
        "fullcodeline": "gf_list_del_item(filter->input_pids, pidinst);"
    },
    {
        "line": 370,
        "fullcodeline": "filter->num_input_pids = gf_list_count(filter->input_pids);"
    },
    {
        "line": 373,
        "fullcodeline": "gf_mx_v(filter->tasks_mx);"
    },
    {
        "line": 381,
        "fullcodeline": "gf_mx_p(pidinst->pid->filter->tasks_mx);"
    },
    {
        "line": 383,
        "fullcodeline": "gf_list_del_item(pidinst->pid->destinations, pidinst);"
    },
    {
        "line": 385,
        "fullcodeline": "gf_filter_instance_detach_pid(pidinst);"
    },
    {
        "line": 400,
        "fullcodeline": "assert(pid->filter->out_pid_connection_pending);"
    },
    {
        "line": 19,
        "fullcodeline": "if (ctype==GF_PID_CONF_CONNECT) {"
    },
    {
        "line": 28,
        "fullcodeline": "for (i=0; i<count; i++) {"
    },
    {
        "line": 60,
        "fullcodeline": "for (i=0; i<count; i++) {"
    },
    {
        "line": 71,
        "fullcodeline": "if (ctype != GF_PID_CONF_CONNECT) {"
    },
    {
        "line": 93,
        "fullcodeline": "if (!filter->input_pids) filter->input_pids = gf_list_new();"
    },
    {
        "line": 96,
        "fullcodeline": "if (filter->num_input_pids==1) {"
    },
    {
        "line": 356,
        "fullcodeline": "while (gf_fq_count(filter->pending_pids)) {"
    },
    {
        "line": 371,
        "fullcodeline": "if (!filter->num_input_pids)"
    },
    {
        "line": 384,
        "fullcodeline": "pidinst->pid->num_destinations = gf_list_count(pidinst->pid->destinations);"
    },
    {
        "line": 20,
        "fullcodeline": "assert(pid->filter->out_pid_connection_pending);"
    },
    {
        "line": 21,
        "fullcodeline": "safe_int_dec(&pid->filter->out_pid_connection_pending);"
    },
    {
        "line": 29,
        "fullcodeline": "pidinst = gf_list_get(filter->detached_pid_inst, i);"
    },
    {
        "line": 51,
        "fullcodeline": "pidinst=NULL;"
    },
    {
        "line": 53,
        "fullcodeline": "if (! gf_list_count(filter->detached_pid_inst)) {"
    },
    {
        "line": 55,
        "fullcodeline": "filter->detached_pid_inst = NULL;"
    },
    {
        "line": 61,
        "fullcodeline": "pidinst = gf_list_get(pid->destinations, i);"
    },
    {
        "line": 65,
        "fullcodeline": "pidinst=NULL;"
    },
    {
        "line": 97,
        "fullcodeline": "filter->single_source = pidinst->pid->filter;"
    },
    {
        "line": 357,
        "fullcodeline": "GF_FilterPid *a_pid=gf_fq_pop(filter->pending_pids);"
    },
    {
        "line": 363,
        "fullcodeline": "gf_filter_pid_post_init_task(filter, a_pid);"
    },
    {
        "line": 372,
        "fullcodeline": "filter->single_source = NULL;"
    },
    {
        "line": 389,
        "fullcodeline": "if (!filter->num_input_pids && !filter->sticky) {"
    },
    {
        "line": 390,
        "fullcodeline": "gf_filter_reset_pending_packets(filter);"
    },
    {
        "line": 401,
        "fullcodeline": "if (safe_int_dec(&pid->filter->out_pid_connection_pending) == 0) {"
    },
    {
        "line": 427,
        "fullcodeline": "if (remove_filter && !filter->sticky)"
    },
    {
        "line": 30,
        "fullcodeline": "if (pidinst->filter==filter) {"
    },
    {
        "line": 62,
        "fullcodeline": "if (pidinst->filter==filter) {"
    },
    {
        "line": 72,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_FILTER, (\"Trying to disconnect PID %s not present in filter %s inputs\\n\",  pid->name, filter->name));"
    },
    {
        "line": 150,
        "fullcodeline": "GF_LOG(GF_LOG_INFO, GF_LOG_FILTER, (\"Filter %s (%p) PID %s (%p) (%d fan-out) connected to filter %s (%p)\\n\", pid->filter->name, pid->filter, pid->name, pid, pid->num_destinations, filter->name, filter));"
    },
    {
        "line": 157,
        "fullcodeline": "else if ((ctype==GF_PID_CONF_RECONFIG) && (e != GF_FILTER_NOT_SUPPORTED)) {"
    },
    {
        "line": 159,
        "fullcodeline": "pidinst->is_end_of_stream = GF_TRUE;"
    },
    {
        "line": 360,
        "fullcodeline": "if (pid->is_playing && filter->is_pid_adaptation_filter)"
    },
    {
        "line": 419,
        "fullcodeline": "if (e==GF_OK) {"
    },
    {
        "line": 31,
        "fullcodeline": "gf_list_rem(filter->detached_pid_inst, i);"
    },
    {
        "line": 33,
        "fullcodeline": "pidinst->filter = filter;"
    },
    {
        "line": 34,
        "fullcodeline": "pidinst->pid = pid;"
    },
    {
        "line": 44,
        "fullcodeline": "assert(pidinst->detach_pending);"
    },
    {
        "line": 98,
        "fullcodeline": "} else if (filter->single_source != pidinst->pid->filter) {"
    },
    {
        "line": 160,
        "fullcodeline": "if (e==GF_BAD_PARAM) {"
    },
    {
        "line": 172,
        "fullcodeline": "gf_mx_p(filter->tasks_mx);"
    },
    {
        "line": 173,
        "fullcodeline": "gf_list_del_item(filter->input_pids, pidinst);"
    },
    {
        "line": 174,
        "fullcodeline": "filter->num_input_pids = gf_list_count(filter->input_pids);"
    },
    {
        "line": 177,
        "fullcodeline": "filter->freg->configure_pid(filter, (GF_FilterPid *) pidinst, GF_TRUE);"
    },
    {
        "line": 178,
        "fullcodeline": "gf_mx_v(filter->tasks_mx);"
    },
    {
        "line": 180,
        "fullcodeline": "gf_mx_p(pidinst->pid->filter->tasks_mx);"
    },
    {
        "line": 181,
        "fullcodeline": "gf_list_del_item(pidinst->pid->destinations, pidinst);"
    },
    {
        "line": 184,
        "fullcodeline": "gf_filter_instance_detach_pid(pidinst);"
    },
    {
        "line": 185,
        "fullcodeline": "gf_mx_v(pidinst->pid->filter->tasks_mx);"
    },
    {
        "line": 361,
        "fullcodeline": "a_pid->is_playing = GF_TRUE;"
    },
    {
        "line": 36,
        "fullcodeline": "assert(!pidinst->props);"
    },
    {
        "line": 39,
        "fullcodeline": "if (ctype == GF_PID_CONF_CONNECT) {"
    },
    {
        "line": 47,
        "fullcodeline": "if (filter->sticky == 2)"
    },
    {
        "line": 99,
        "fullcodeline": "filter->single_source = NULL;"
    },
    {
        "line": 163,
        "fullcodeline": "filter->session->last_connect_error = e;"
    },
    {
        "line": 175,
        "fullcodeline": "if (!filter->num_input_pids)"
    },
    {
        "line": 182,
        "fullcodeline": "pidinst->pid->num_destinations = gf_list_count(pidinst->pid->destinations);"
    },
    {
        "line": 210,
        "fullcodeline": "if (e==GF_REQUIRES_NEW_INSTANCE) {"
    },
    {
        "line": 222,
        "fullcodeline": "if (e && (ctype==GF_PID_CONF_REMOVE)) {"
    },
    {
        "line": 422,
        "fullcodeline": "if (pid->filter->postponed_packets || pid->filter->pending_packets || pid->filter->nb_caps_renegociate) {"
    },
    {
        "line": 48,
        "fullcodeline": "filter->sticky = 0;"
    },
    {
        "line": 161,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_FILTER, (\"Failed to reconfigure PID %s:%s in filter %s: %s\\n\", pid->filter->name, pid->name, filter->name, gf_error_to_string(e) ));"
    },
    {
        "line": 166,
        "fullcodeline": "gf_list_add(pid->filter->blacklisted, (void *) filter->freg);"
    },
    {
        "line": 167,
        "fullcodeline": "gf_filter_relink_dst(pidinst, e);"
    },
    {
        "line": 176,
        "fullcodeline": "filter->single_source = NULL;"
    },
    {
        "line": 189,
        "fullcodeline": "gf_mx_p(pid->filter->tasks_mx);"
    },
    {
        "line": 190,
        "fullcodeline": "gf_list_del_item(pid->destinations, pidinst);"
    },
    {
        "line": 191,
        "fullcodeline": "pid->num_destinations = gf_list_count(pid->destinations);"
    },
    {
        "line": 194,
        "fullcodeline": "gf_mx_p(pid->filter->tasks_mx);"
    },
    {
        "line": 195,
        "fullcodeline": "count = gf_fq_count(pid->filter->tasks);"
    },
    {
        "line": 202,
        "fullcodeline": "gf_mx_v(pid->filter->tasks_mx);"
    },
    {
        "line": 205,
        "fullcodeline": "gf_filter_pid_inst_del(pidinst);"
    },
    {
        "line": 206,
        "fullcodeline": "gf_mx_v(pid->filter->tasks_mx);"
    },
    {
        "line": 212,
        "fullcodeline": "GF_Filter *new_filter = gf_filter_clone(filter, pid->filter);"
    },
    {
        "line": 408,
        "fullcodeline": "pidinst->is_playing = GF_FALSE;"
    },
    {
        "line": 409,
        "fullcodeline": "GF_FEVT_INIT(evt, GF_FEVT_PLAY, (GF_FilterPid*)pidinst);"
    },
    {
        "line": 410,
        "fullcodeline": "gf_filter_pid_send_event((GF_FilterPid *)pidinst, &evt);"
    },
    {
        "line": 413,
        "fullcodeline": "pidinst->is_paused = GF_FALSE;"
    },
    {
        "line": 414,
        "fullcodeline": "GF_FEVT_INIT(evt, GF_FEVT_PAUSE, (GF_FilterPid*)pidinst);"
    },
    {
        "line": 423,
        "fullcodeline": "gf_filter_post_process_task(pid->filter);"
    },
    {
        "line": 165,
        "fullcodeline": "GF_LOG(GF_LOG_INFO, GF_LOG_FILTER, (\"Failed to reconfigure PID %s:%s in filter %s: %s, reloading filter graph\\n\", pid->filter->name, pid->name, filter->name, gf_error_to_string(e) ));"
    },
    {
        "line": 196,
        "fullcodeline": "for (i=0; i<count; i++) {"
    },
    {
        "line": 223,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_FILTER, (\"Failed to disconnect filter %s PID %s from filter %s: %s\\n\", pid->filter->name, pid->name, filter->name, gf_error_to_string(e) ));"
    },
    {
        "line": 41,
        "fullcodeline": "if (!pid->filter->nb_pids_playing && (pidinst->is_playing || pidinst->is_paused))"
    },
    {
        "line": 197,
        "fullcodeline": "GF_FSTask *t = gf_fq_get(pid->filter->tasks, i);"
    },
    {
        "line": 214,
        "fullcodeline": "GF_LOG(GF_LOG_DEBUG, GF_LOG_FILTER, (\"Clone filter %s, new instance for pid %s\\n\", filter->name, pid->name));"
    },
    {
        "line": 218,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_FILTER, (\"Failed to clone filter %s\\n\", filter->name));"
    },
    {
        "line": 219,
        "fullcodeline": "e = GF_OUT_OF_MEM;"
    },
    {
        "line": 199,
        "fullcodeline": "t->run_task = task_canceled;"
    },
    {
        "line": 226,
        "fullcodeline": "if (e!= GF_EOS) {"
    },
    {
        "line": 345,
        "fullcodeline": "filter->session->last_connect_error = GF_OK;"
    },
    {
        "line": 227,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_FILTER, (\"Failed to connect filter %s PID %s to filter %s: %s\\n\", pid->filter->name, pid->name, filter->name, gf_error_to_string(e) ));"
    },
    {
        "line": 230,
        "fullcodeline": "if ((e==GF_BAD_PARAM)"
    },
    {
        "line": 235,
        "fullcodeline": "|| (filter->session->flags & GF_FS_FLAG_NO_REASSIGN)"
    },
    {
        "line": 234,
        "fullcodeline": "|| (e==GF_EOS)"
    },
    {
        "line": 237,
        "fullcodeline": "if (filter->session->flags & GF_FS_FLAG_NO_REASSIGN) {"
    },
    {
        "line": 240,
        "fullcodeline": "if (e!= GF_EOS) {"
    },
    {
        "line": 244,
        "fullcodeline": "if (ctype==GF_PID_CONF_CONNECT) {"
    },
    {
        "line": 233,
        "fullcodeline": "|| (e==GF_FILTER_NOT_SUPPORTED)"
    },
    {
        "line": 241,
        "fullcodeline": "filter->session->last_connect_error = e;"
    },
    {
        "line": 246,
        "fullcodeline": "GF_FEVT_INIT(evt, GF_FEVT_PLAY, pid);"
    },
    {
        "line": 247,
        "fullcodeline": "gf_filter_pid_send_event_internal(pid, &evt, GF_TRUE);"
    },
    {
        "line": 249,
        "fullcodeline": "GF_FEVT_INIT(evt, GF_FEVT_STOP, pid);"
    },
    {
        "line": 250,
        "fullcodeline": "gf_filter_pid_send_event_internal(pid, &evt, GF_TRUE);"
    },
    {
        "line": 252,
        "fullcodeline": "gf_filter_pid_set_eos(pid);"
    },
    {
        "line": 232,
        "fullcodeline": "|| (e==GF_REMOTE_SERVICE_ERROR)"
    },
    {
        "line": 238,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_FILTER, (\"Filter reassignment disabled, skippping chain reload for filter %s PID %s\\n\", pid->filter->name, pid->name ));"
    },
    {
        "line": 264,
        "fullcodeline": "GF_LOG(GF_LOG_WARNING, GF_LOG_FILTER, (\"Blacklisting %s as output from %s and retrying connections\\n\", filter->name, pid->filter->name));"
    },
    {
        "line": 267,
        "fullcodeline": "gf_list_add(pid->filter->blacklisted, (void *) filter->freg);"
    },
    {
        "line": 269,
        "fullcodeline": "gf_mx_p(filter->tasks_mx);"
    },
    {
        "line": 281,
        "fullcodeline": "filter->num_input_pids = 0;"
    },
    {
        "line": 282,
        "fullcodeline": "filter->single_source = NULL;"
    },
    {
        "line": 283,
        "fullcodeline": "filter->removed = 1;"
    },
    {
        "line": 284,
        "fullcodeline": "filter->has_pending_pids = GF_FALSE;"
    },
    {
        "line": 285,
        "fullcodeline": "gf_mx_v(filter->tasks_mx);"
    },
    {
        "line": 231,
        "fullcodeline": "|| (e==GF_SERVICE_ERROR)"
    },
    {
        "line": 255,
        "fullcodeline": "GF_FEVT_INIT(evt, GF_FEVT_CONNECT_FAIL, pid);"
    },
    {
        "line": 256,
        "fullcodeline": "gf_filter_pid_send_event_internal(pid, &evt, GF_TRUE);"
    },
    {
        "line": 258,
        "fullcodeline": "if (!filter->num_input_pids && !filter->num_output_pids) {"
    },
    {
        "line": 259,
        "fullcodeline": "remove_filter = GF_TRUE;"
    },
    {
        "line": 270,
        "fullcodeline": "while (gf_list_count(filter->input_pids)) {"
    },
    {
        "line": 342,
        "fullcodeline": "filter->session->last_connect_error = e;"
    },
    {
        "line": 271,
        "fullcodeline": "GF_FilterPidInst *a_pidinst = gf_list_pop_back(filter->input_pids);"
    },
    {
        "line": 273,
        "fullcodeline": "filter->num_input_pids--;"
    },
    {
        "line": 274,
        "fullcodeline": "filter->freg->configure_pid(filter, (GF_FilterPid *) a_pidinst, GF_TRUE);"
    },
    {
        "line": 276,
        "fullcodeline": "gf_filter_pid_post_init_task(a_pidinst->pid->filter, a_pidinst->pid);"
    },
    {
        "line": 277,
        "fullcodeline": "gf_fs_post_task(filter->session, gf_filter_pid_inst_delete_task, a_pidinst->pid->filter, a_pidinst->pid, \"pid_inst_delete\", a_pidinst);"
    },
    {
        "line": 290,
        "fullcodeline": "assert(pid->filter->out_pid_connection_pending);"
    },
    {
        "line": 312,
        "fullcodeline": "filter->swap_pidinst_src = NULL;"
    },
    {
        "line": 327,
        "fullcodeline": "filter->swap_pidinst_dst = NULL;"
    },
    {
        "line": 336,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_FILTER, (\"Failed to reconfigure input of sink %s, cannot rebuild graph\\n\", filter->name));"
    },
    {
        "line": 297,
        "fullcodeline": "assert(!gf_list_count(filter->input_pids));"
    },
    {
        "line": 339,
        "fullcodeline": "GF_FEVT_INIT(evt, GF_FEVT_CONNECT_FAIL, pid);"
    },
    {
        "line": 340,
        "fullcodeline": "pid->filter->freg->process_event(pid->filter, &evt);"
    },
    {
        "line": 314,
        "fullcodeline": "GF_Filter *target = filter->swap_pidinst_dst->filter;"
    },
    {
        "line": 315,
        "fullcodeline": "assert(target);"
    },
    {
        "line": 323,
        "fullcodeline": "filter->swap_pidinst_dst->pid = NULL;"
    },
    {
        "line": 329,
        "fullcodeline": "gf_filter_notification_failure(filter, e, GF_TRUE);"
    },
    {
        "line": 300,
        "fullcodeline": "for (i=0; i<filter->num_output_pids; i++) {"
    },
    {
        "line": 316,
        "fullcodeline": "if (!target->detached_pid_inst) {"
    },
    {
        "line": 302,
        "fullcodeline": "GF_FilterPid *opid = gf_list_get(filter->output_pids, i);"
    },
    {
        "line": 307,
        "fullcodeline": "gf_list_reset(opid->destinations);"
    },
    {
        "line": 308,
        "fullcodeline": "opid->num_destinations = 0;"
    },
    {
        "line": 317,
        "fullcodeline": "target->detached_pid_inst = gf_list_new();"
    },
    {
        "line": 321,
        "fullcodeline": "filter->swap_pidinst_dst->props = NULL;"
    },
    {
        "line": 324,
        "fullcodeline": "if (gf_list_find(target->detached_pid_inst, filter->swap_pidinst_dst)<0)"
    },
    {
        "line": 303,
        "fullcodeline": "for (j=0; j< opid->num_destinations; j++) {"
    },
    {
        "line": 304,
        "fullcodeline": "GF_FilterPidInst *a_pidi = gf_list_get(opid->destinations, j);"
    }
]