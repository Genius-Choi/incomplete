[
    {
        "line": 3,
        "fullcodeline": "GF_PropertyMap *dst_props, *src_props = NULL, *old_dst_props=NULL;"
    },
    {
        "line": 15,
        "fullcodeline": "dst_props = check_new_pid_props(dst_pid, GF_FALSE);"
    },
    {
        "line": 35,
        "fullcodeline": "src_pid = src_pid->pid;"
    },
    {
        "line": 4,
        "fullcodeline": "if (PID_IS_INPUT(dst_pid)) {"
    },
    {
        "line": 17,
        "fullcodeline": "if (!dst_props) {"
    },
    {
        "line": 22,
        "fullcodeline": "if (PID_IS_INPUT(src_pid)) {"
    },
    {
        "line": 37,
        "fullcodeline": "if (!src_props) {"
    },
    {
        "line": 48,
        "fullcodeline": "if (src_pid->name && !old_dst_props)"
    },
    {
        "line": 60,
        "fullcodeline": "return gf_props_merge_property(dst_props, src_props, filter_prop, cbk);"
    },
    {
        "line": 5,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_FILTER, (\"Attempt to reset all properties on input PID in filter %s - ignoring\\n\", dst_pid->filter->name));"
    },
    {
        "line": 9,
        "fullcodeline": "gf_mx_p(src_pid->filter->tasks_mx);"
    },
    {
        "line": 10,
        "fullcodeline": "old_dst_props = gf_list_last(dst_pid->properties);"
    },
    {
        "line": 11,
        "fullcodeline": "gf_mx_v(src_pid->filter->tasks_mx);"
    },
    {
        "line": 23,
        "fullcodeline": "GF_FilterPidInst *pidi = (GF_FilterPidInst *)src_pid;"
    },
    {
        "line": 32,
        "fullcodeline": "src_props = pidi->props;"
    },
    {
        "line": 40,
        "fullcodeline": "gf_mx_p(src_pid->filter->tasks_mx);"
    },
    {
        "line": 41,
        "fullcodeline": "src_props = gf_list_last(src_pid->properties);"
    },
    {
        "line": 52,
        "fullcodeline": "gf_props_reset(dst_props);"
    },
    {
        "line": 18,
        "fullcodeline": "GF_LOG(GF_LOG_WARNING, GF_LOG_FILTER, (\"No properties for destination pid in filter %s, ignoring reset\\n\", dst_pid->filter->name));"
    },
    {
        "line": 24,
        "fullcodeline": "if (!pidi->props) {"
    },
    {
        "line": 43,
        "fullcodeline": "if (!src_props) {"
    },
    {
        "line": 26,
        "fullcodeline": "gf_mx_p(src_pid->filter->tasks_mx);"
    },
    {
        "line": 27,
        "fullcodeline": "pidi->props = gf_list_get(src_pid->pid->properties, 0);"
    },
    {
        "line": 28,
        "fullcodeline": "gf_mx_v(src_pid->filter->tasks_mx);"
    },
    {
        "line": 29,
        "fullcodeline": "assert(pidi->props);"
    },
    {
        "line": 55,
        "fullcodeline": "if (old_dst_props && (old_dst_props!=dst_props)) {"
    },
    {
        "line": 44,
        "fullcodeline": "GF_LOG(GF_LOG_WARNING, GF_LOG_FILTER, (\"No properties to copy from pid %s in filter %s, ignoring merge\\n\", src_pid->name, src_pid->filter->name));"
    },
    {
        "line": 56,
        "fullcodeline": "GF_Err e = gf_props_merge_property(dst_props, old_dst_props, NULL, NULL);"
    }
]