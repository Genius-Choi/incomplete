[
    {
        "line": 4,
        "fullcodeline": "GF_Filter *filter = task->filter;"
    },
    {
        "line": 5,
        "fullcodeline": "GF_FilterPid *pid = task->pid->pid;"
    },
    {
        "line": 6,
        "fullcodeline": "GF_FilterPidInst *pidinst=NULL;"
    },
    {
        "line": 7,
        "fullcodeline": "GF_Filter *new_chain_input = task->udta;"
    },
    {
        "line": 20,
        "fullcodeline": "count = pid->num_destinations;"
    },
    {
        "line": 44,
        "fullcodeline": "GF_LOG(GF_LOG_INFO, GF_LOG_FILTER, (\"Filter %s pid %s detach from %s\\n\", task->pid->pid->filter->name, task->pid->pid->name, task->filter->name));"
    },
    {
        "line": 45,
        "fullcodeline": "assert(pid->filter->detach_pid_tasks_pending);"
    },
    {
        "line": 68,
        "fullcodeline": "pidinst->props = NULL;"
    },
    {
        "line": 70,
        "fullcodeline": "gf_mx_p(filter->tasks_mx);"
    },
    {
        "line": 72,
        "fullcodeline": "count = gf_fq_count(pidinst->packets);"
    },
    {
        "line": 75,
        "fullcodeline": "gf_filter_pid_inst_reset(pidinst);"
    },
    {
        "line": 76,
        "fullcodeline": "pidinst->pid = NULL;"
    },
    {
        "line": 77,
        "fullcodeline": "gf_list_del_item(pid->destinations, pidinst);"
    },
    {
        "line": 79,
        "fullcodeline": "gf_list_del_item(filter->input_pids, pidinst);"
    },
    {
        "line": 80,
        "fullcodeline": "filter->num_input_pids = gf_list_count(filter->input_pids);"
    },
    {
        "line": 97,
        "fullcodeline": "assert(new_chain_input->detach_pid_tasks_pending);"
    },
    {
        "line": 21,
        "fullcodeline": "for (i=0; i<count; i++) {"
    },
    {
        "line": 29,
        "fullcodeline": "if (pidinst && gf_fq_count(pidinst->packets)) {"
    },
    {
        "line": 49,
        "fullcodeline": "if (!pidinst) {"
    },
    {
        "line": 73,
        "fullcodeline": "assert(count <= filter->pending_packets);"
    },
    {
        "line": 78,
        "fullcodeline": "pid->num_destinations = gf_list_count(pid->destinations);"
    },
    {
        "line": 85,
        "fullcodeline": "if (!filter->detached_pid_inst) {"
    },
    {
        "line": 22,
        "fullcodeline": "pidinst = gf_list_get(pid->destinations, i);"
    },
    {
        "line": 26,
        "fullcodeline": "pidinst=NULL;"
    },
    {
        "line": 30,
        "fullcodeline": "Bool in_process = filter->in_process;"
    },
    {
        "line": 31,
        "fullcodeline": "filter->in_process = GF_FALSE;"
    },
    {
        "line": 33,
        "fullcodeline": "filter->in_force_flush = GF_TRUE;"
    },
    {
        "line": 50,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_FILTER, (\"Trying to detach PID %s not present in filter %s inputs\\n\",  pid->name, filter->name));"
    },
    {
        "line": 59,
        "fullcodeline": "assert(pidinst->props->reference_count);"
    },
    {
        "line": 86,
        "fullcodeline": "filter->detached_pid_inst = gf_list_new();"
    },
    {
        "line": 88,
        "fullcodeline": "if (gf_list_find(filter->detached_pid_inst, pidinst)<0)"
    },
    {
        "line": 23,
        "fullcodeline": "if (pidinst->filter==filter) {"
    },
    {
        "line": 52,
        "fullcodeline": "assert(!new_chain_input->swap_pidinst_src);"
    },
    {
        "line": 60,
        "fullcodeline": "if (safe_int_dec(& pidinst->props->reference_count) == 0) {"
    },
    {
        "line": 62,
        "fullcodeline": "gf_mx_p(pidinst->pid->filter->tasks_mx);"
    },
    {
        "line": 63,
        "fullcodeline": "gf_list_del_item(pidinst->pid->properties, pidinst->props);"
    }
]