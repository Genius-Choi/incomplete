[
    {
        "line": 5,
        "fullcodeline": "module_name[MagickPathExtent],"
    },
    {
        "line": 6,
        "fullcodeline": "name[MagickPathExtent],"
    },
    {
        "line": 7,
        "fullcodeline": "path[MagickPathExtent];"
    },
    {
        "line": 30,
        "fullcodeline": "assert(module != (const char *) NULL);"
    },
    {
        "line": 31,
        "fullcodeline": "module_info=(ModuleInfo *) GetModuleInfo(module,exception);"
    },
    {
        "line": 35,
        "fullcodeline": "p=GetCoderInfo(module,exception);"
    },
    {
        "line": 38,
        "fullcodeline": "rights=ReadPolicyRights|WritePolicyRights;"
    },
    {
        "line": 52,
        "fullcodeline": "TagToCoderModuleName(module_name,name);"
    },
    {
        "line": 55,
        "fullcodeline": "*path='\\0';"
    },
    {
        "line": 56,
        "fullcodeline": "status=GetMagickModulePath(name,MagickImageCoderModule,path,exception);"
    },
    {
        "line": 64,
        "fullcodeline": "handle=(ModuleHandle) lt_dlopen(path);"
    },
    {
        "line": 74,
        "fullcodeline": "module_info=AcquireModuleInfo(path,module_name);"
    },
    {
        "line": 75,
        "fullcodeline": "module_info->handle=handle;"
    },
    {
        "line": 81,
        "fullcodeline": "TagToModuleName(module_name,\"Register%sImage\",name);"
    },
    {
        "line": 82,
        "fullcodeline": "module_info->register_module=(size_t (*)(void)) lt_dlsym(handle,name);"
    },
    {
        "line": 95,
        "fullcodeline": "TagToModuleName(module_name,\"Unregister%sImage\",name);"
    },
    {
        "line": 96,
        "fullcodeline": "module_info->unregister_module=(void (*)(void)) lt_dlsym(handle,name);"
    },
    {
        "line": 106,
        "fullcodeline": "signature=module_info->register_module();"
    },
    {
        "line": 32,
        "fullcodeline": "if (module_info != (ModuleInfo *) NULL)"
    },
    {
        "line": 34,
        "fullcodeline": "(void) CopyMagickString(module_name,module,MagickPathExtent);"
    },
    {
        "line": 36,
        "fullcodeline": "if (p != (CoderInfo *) NULL)"
    },
    {
        "line": 39,
        "fullcodeline": "if (IsRightsAuthorized(ModulePolicyDomain,rights,module_name) == MagickFalse)"
    },
    {
        "line": 53,
        "fullcodeline": "(void) LogMagickEvent(ModuleEvent,GetMagickModule(),"
    },
    {
        "line": 57,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 62,
        "fullcodeline": "(void) LogMagickEvent(ModuleEvent,GetMagickModule(),"
    },
    {
        "line": 65,
        "fullcodeline": "if (handle == (ModuleHandle) NULL)"
    },
    {
        "line": 83,
        "fullcodeline": "if (module_info->register_module == (size_t (*)(void)) NULL)"
    },
    {
        "line": 89,
        "fullcodeline": "(void) LogMagickEvent(ModuleEvent,GetMagickModule(),"
    },
    {
        "line": 97,
        "fullcodeline": "if (module_info->unregister_module == (void (*)(void)) NULL)"
    },
    {
        "line": 103,
        "fullcodeline": "(void) LogMagickEvent(ModuleEvent,GetMagickModule(),"
    },
    {
        "line": 107,
        "fullcodeline": "if (signature != MagickImageCoderSignature)"
    },
    {
        "line": 41,
        "fullcodeline": "errno=EPERM;"
    },
    {
        "line": 46,
        "fullcodeline": "if (GetValueFromSplayTree(module_list,module_name) != (void *) NULL)"
    },
    {
        "line": 76,
        "fullcodeline": "if (RegisterModule(module_info,exception) == (ModuleInfo *) NULL)"
    },
    {
        "line": 37,
        "fullcodeline": "(void) CopyMagickString(module_name,p->name,MagickPathExtent);"
    },
    {
        "line": 42,
        "fullcodeline": "(void) ThrowMagickException(exception,GetMagickModule(),PolicyError,"
    },
    {
        "line": 67,
        "fullcodeline": "(void) ThrowMagickException(exception,GetMagickModule(),ModuleError,"
    },
    {
        "line": 85,
        "fullcodeline": "(void) ThrowMagickException(exception,GetMagickModule(),ModuleError,"
    },
    {
        "line": 99,
        "fullcodeline": "(void) ThrowMagickException(exception,GetMagickModule(),ModuleError,"
    },
    {
        "line": 109,
        "fullcodeline": "(void) ThrowMagickException(exception,GetMagickModule(),ModuleError,"
    }
]