[
    {
        "line": 3,
        "fullcodeline": "BLOSC_UNUSED_PARAM(meta);"
    },
    {
        "line": 4,
        "fullcodeline": "BLOSC_UNUSED_PARAM(dparams);"
    },
    {
        "line": 6,
        "fullcodeline": "uint8_t *ip = (uint8_t *) input;"
    },
    {
        "line": 7,
        "fullcodeline": "uint8_t *ip_limit = ip + input_len;"
    },
    {
        "line": 8,
        "fullcodeline": "uint8_t *op = (uint8_t *) output;"
    },
    {
        "line": 10,
        "fullcodeline": "uint32_t blockshape[2];"
    },
    {
        "line": 11,
        "fullcodeline": "uint32_t eshape[2];"
    },
    {
        "line": 13,
        "fullcodeline": "uint8_t local_buffer[16];"
    },
    {
        "line": 20,
        "fullcodeline": "ndim = *ip;"
    },
    {
        "line": 21,
        "fullcodeline": "ip++;"
    },
    {
        "line": 26,
        "fullcodeline": "memcpy(&blockshape[0], ip, 4);"
    },
    {
        "line": 27,
        "fullcodeline": "ip += 4;"
    },
    {
        "line": 28,
        "fullcodeline": "memcpy(&blockshape[1], ip, 4);"
    },
    {
        "line": 29,
        "fullcodeline": "ip += 4;"
    },
    {
        "line": 36,
        "fullcodeline": "memset(op, 0, blockshape[0] * blockshape[1]);"
    },
    {
        "line": 38,
        "fullcodeline": "uint32_t i_stop[2];"
    },
    {
        "line": 44,
        "fullcodeline": "uint32_t ii[2];"
    },
    {
        "line": 45,
        "fullcodeline": "uint32_t padding[2] = {0};"
    },
    {
        "line": 46,
        "fullcodeline": "uint32_t ind = 0;"
    },
    {
        "line": 47,
        "fullcodeline": "uint8_t cell_aux[16];"
    },
    {
        "line": 177,
        "fullcodeline": "ind += padding[1];"
    },
    {
        "line": 15,
        "fullcodeline": "if (NDLZ_UNEXPECT_CONDITIONAL(input_len < 8)) {"
    },
    {
        "line": 30,
        "fullcodeline": "eshape[0] = ((blockshape[0] + 3) / 4) * 4;"
    },
    {
        "line": 31,
        "fullcodeline": "eshape[1] = ((blockshape[1] + 3) / 4) * 4;"
    },
    {
        "line": 39,
        "fullcodeline": "for (int i = 0; i < 2; ++i) {"
    },
    {
        "line": 48,
        "fullcodeline": "for (ii[0] = 0; ii[0] < i_stop[0]; ++ii[0]) {"
    },
    {
        "line": 179,
        "fullcodeline": "if (ind != (blockshape[0] * blockshape[1])) {"
    },
    {
        "line": 183,
        "fullcodeline": "if (ind > (uint32_t) output_len) {"
    },
    {
        "line": 188,
        "fullcodeline": "return (int) ind;"
    },
    {
        "line": 33,
        "fullcodeline": "if (NDLZ_UNEXPECT_CONDITIONAL(output_len < (int32_t) (blockshape[0] * blockshape[1]))) {"
    },
    {
        "line": 40,
        "fullcodeline": "i_stop[i] = eshape[i] / 4;"
    },
    {
        "line": 49,
        "fullcodeline": "for (ii[1] = 0; ii[1] < i_stop[1]; ++ii[1]) {      // for each cell"
    },
    {
        "line": 64,
        "fullcodeline": "token = *ip++;"
    },
    {
        "line": 163,
        "fullcodeline": "uint32_t orig = ii[0] * 4 * blockshape[1] + ii[1] * 4;"
    },
    {
        "line": 54,
        "fullcodeline": "if (ii[0] == i_stop[0] - 1) {"
    },
    {
        "line": 59,
        "fullcodeline": "if (ii[1] == i_stop[1] - 1) {"
    },
    {
        "line": 65,
        "fullcodeline": "if (token == 0) {    // no match"
    },
    {
        "line": 164,
        "fullcodeline": "for (uint32_t i = 0; i < 4; i++) {"
    },
    {
        "line": 171,
        "fullcodeline": "if (ind > (uint32_t) output_len) {"
    },
    {
        "line": 50,
        "fullcodeline": "if (NDLZ_UNEXPECT_CONDITIONAL(ip > ip_limit)) {"
    },
    {
        "line": 55,
        "fullcodeline": "padding[0] = (blockshape[0] % 4 == 0) ? 4 : blockshape[0] % 4;"
    },
    {
        "line": 60,
        "fullcodeline": "padding[1] = (blockshape[1] % 4 == 0) ? 4 : blockshape[1] % 4;"
    },
    {
        "line": 66,
        "fullcodeline": "buffercpy = ip;"
    },
    {
        "line": 67,
        "fullcodeline": "ip += padding[0] * padding[1];"
    },
    {
        "line": 169,
        "fullcodeline": "buffercpy += padding[1];"
    },
    {
        "line": 57,
        "fullcodeline": "padding[0] = 4;"
    },
    {
        "line": 62,
        "fullcodeline": "padding[1] = 4;"
    },
    {
        "line": 165,
        "fullcodeline": "if (i < padding[0]) {"
    },
    {
        "line": 68,
        "fullcodeline": "} else if (token == (uint8_t) ((1U << 7U) | (1U << 6U))) {  // cell match"
    },
    {
        "line": 166,
        "fullcodeline": "ind = orig + i * blockshape[1];"
    },
    {
        "line": 167,
        "fullcodeline": "memcpy(&op[ind], buffercpy, padding[1]);"
    },
    {
        "line": 69,
        "fullcodeline": "uint16_t offset = *((uint16_t *) ip);"
    },
    {
        "line": 70,
        "fullcodeline": "buffercpy = ip - offset - 1;"
    },
    {
        "line": 71,
        "fullcodeline": "ip += 2;"
    },
    {
        "line": 72,
        "fullcodeline": "} else if (token == (uint8_t) (1U << 6U)) { // whole cell of same element"
    },
    {
        "line": 73,
        "fullcodeline": "buffercpy = cell_aux;"
    },
    {
        "line": 74,
        "fullcodeline": "memset(buffercpy, *ip, 16);"
    },
    {
        "line": 75,
        "fullcodeline": "ip++;"
    },
    {
        "line": 76,
        "fullcodeline": "} else if (token >= 224) { // three rows match"
    },
    {
        "line": 77,
        "fullcodeline": "buffercpy = local_buffer;"
    },
    {
        "line": 78,
        "fullcodeline": "uint16_t offset = *((uint16_t *) ip);"
    },
    {
        "line": 79,
        "fullcodeline": "offset += 3;"
    },
    {
        "line": 80,
        "fullcodeline": "ip += 2;"
    },
    {
        "line": 100,
        "fullcodeline": "memcpy(&buffercpy[i * 4], ip - offset, 4);"
    },
    {
        "line": 101,
        "fullcodeline": "memcpy(&buffercpy[j * 4], ip - offset + 4, 4);"
    },
    {
        "line": 102,
        "fullcodeline": "memcpy(&buffercpy[k * 4], ip - offset + 8, 4);"
    },
    {
        "line": 103,
        "fullcodeline": "for (int l = 0; l < 4; l++) {"
    },
    {
        "line": 82,
        "fullcodeline": "if ((token >> 3U) == 28) {"
    },
    {
        "line": 83,
        "fullcodeline": "i = 1;"
    },
    {
        "line": 84,
        "fullcodeline": "j = 2;"
    },
    {
        "line": 85,
        "fullcodeline": "k = 3;"
    },
    {
        "line": 87,
        "fullcodeline": "i = 0;"
    },
    {
        "line": 111,
        "fullcodeline": "} else if ((token >= 128) && (token <= 191)) { // rows pair match"
    },
    {
        "line": 112,
        "fullcodeline": "buffercpy = local_buffer;"
    },
    {
        "line": 113,
        "fullcodeline": "uint16_t offset = *((uint16_t *) ip);"
    },
    {
        "line": 114,
        "fullcodeline": "offset += 3;"
    },
    {
        "line": 115,
        "fullcodeline": "ip += 2;"
    },
    {
        "line": 124,
        "fullcodeline": "memcpy(&buffercpy[i * 4], ip - offset, 4);"
    },
    {
        "line": 125,
        "fullcodeline": "memcpy(&buffercpy[j * 4], ip - offset + 4, 4);"
    },
    {
        "line": 104,
        "fullcodeline": "if ((l != i) && (l != j) && (l != k)) {"
    },
    {
        "line": 105,
        "fullcodeline": "memcpy(&buffercpy[l * 4], ip, 4);"
    },
    {
        "line": 106,
        "fullcodeline": "ip += 4;"
    },
    {
        "line": 117,
        "fullcodeline": "if (token == 128) {"
    },
    {
        "line": 126,
        "fullcodeline": "for (int k = 0; k < 4; k++) {"
    },
    {
        "line": 88,
        "fullcodeline": "if ((token >> 3U) < 30) {"
    },
    {
        "line": 89,
        "fullcodeline": "j = 1;"
    },
    {
        "line": 90,
        "fullcodeline": "k = 2;"
    },
    {
        "line": 118,
        "fullcodeline": "i = 2;"
    },
    {
        "line": 119,
        "fullcodeline": "j = 3;"
    },
    {
        "line": 92,
        "fullcodeline": "k = 3;"
    },
    {
        "line": 121,
        "fullcodeline": "i = (token - 128) >> 5U;"
    },
    {
        "line": 122,
        "fullcodeline": "j = ((token - 128) >> 3U) - (i << 2U);"
    },
    {
        "line": 127,
        "fullcodeline": "if ((k != i) && (k != j)) {"
    },
    {
        "line": 132,
        "fullcodeline": "} else if ((token >= 40) && (token <= 63)) {  // 2 rows pair matches"
    },
    {
        "line": 133,
        "fullcodeline": "buffercpy = local_buffer;"
    },
    {
        "line": 134,
        "fullcodeline": "uint16_t offset_1 = *((uint16_t *) ip);"
    },
    {
        "line": 135,
        "fullcodeline": "offset_1 += 5;"
    },
    {
        "line": 136,
        "fullcodeline": "ip += 2;"
    },
    {
        "line": 137,
        "fullcodeline": "uint16_t offset_2 = *((uint16_t *) ip);"
    },
    {
        "line": 138,
        "fullcodeline": "offset_2 += 5;"
    },
    {
        "line": 139,
        "fullcodeline": "ip += 2;"
    },
    {
        "line": 141,
        "fullcodeline": "i = 0;"
    },
    {
        "line": 142,
        "fullcodeline": "j = ((token - 32) >> 3U);"
    },
    {
        "line": 143,
        "fullcodeline": "l = -1;"
    },
    {
        "line": 153,
        "fullcodeline": "memcpy(&buffercpy[i * 4], ip - offset_1, 4);"
    },
    {
        "line": 154,
        "fullcodeline": "memcpy(&buffercpy[j * 4], ip - offset_1 + 4, 4);"
    },
    {
        "line": 155,
        "fullcodeline": "memcpy(&buffercpy[l * 4], ip - offset_2, 4);"
    },
    {
        "line": 156,
        "fullcodeline": "memcpy(&buffercpy[m * 4], ip - offset_2 + 4, 4);"
    },
    {
        "line": 128,
        "fullcodeline": "memcpy(&buffercpy[k * 4], ip, 4);"
    },
    {
        "line": 129,
        "fullcodeline": "ip += 4;"
    },
    {
        "line": 144,
        "fullcodeline": "for (k = 1; k < 4; k++) {"
    },
    {
        "line": 93,
        "fullcodeline": "if ((token >> 3U) == 30) {"
    },
    {
        "line": 94,
        "fullcodeline": "j = 1;"
    },
    {
        "line": 96,
        "fullcodeline": "j = 2;"
    },
    {
        "line": 145,
        "fullcodeline": "if ((k != i) && (k != j)) {"
    },
    {
        "line": 146,
        "fullcodeline": "if (l == -1) {"
    },
    {
        "line": 147,
        "fullcodeline": "l = k;"
    },
    {
        "line": 149,
        "fullcodeline": "m = k;"
    }
]