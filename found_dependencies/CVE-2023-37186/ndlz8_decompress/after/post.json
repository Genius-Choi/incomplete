[
    {
        "line": 3,
        "fullcodeline": "BLOSC_UNUSED_PARAM(meta);"
    },
    {
        "line": 4,
        "fullcodeline": "BLOSC_UNUSED_PARAM(dparams);"
    },
    {
        "line": 5,
        "fullcodeline": "BLOSC_ERROR_NULL(input, BLOSC2_ERROR_NULL_POINTER);"
    },
    {
        "line": 6,
        "fullcodeline": "BLOSC_ERROR_NULL(output, BLOSC2_ERROR_NULL_POINTER);"
    },
    {
        "line": 8,
        "fullcodeline": "const int cell_shape = 8;"
    },
    {
        "line": 9,
        "fullcodeline": "const int cell_size = 64;"
    },
    {
        "line": 10,
        "fullcodeline": "uint8_t *ip = (uint8_t *) input;"
    },
    {
        "line": 11,
        "fullcodeline": "uint8_t *ip_limit = ip + input_len;"
    },
    {
        "line": 12,
        "fullcodeline": "uint8_t *op = (uint8_t *) output;"
    },
    {
        "line": 14,
        "fullcodeline": "int32_t blockshape[2];"
    },
    {
        "line": 15,
        "fullcodeline": "int32_t eshape[2];"
    },
    {
        "line": 24,
        "fullcodeline": "ip++;"
    },
    {
        "line": 29,
        "fullcodeline": "memcpy(&blockshape[0], ip, 4);"
    },
    {
        "line": 30,
        "fullcodeline": "ip += 4;"
    },
    {
        "line": 31,
        "fullcodeline": "memcpy(&blockshape[1], ip, 4);"
    },
    {
        "line": 32,
        "fullcodeline": "ip += 4;"
    },
    {
        "line": 33,
        "fullcodeline": "eshape[0] = ((blockshape[0] + 7) / cell_shape) * cell_shape;"
    },
    {
        "line": 34,
        "fullcodeline": "eshape[1] = ((blockshape[1] + 7) / cell_shape) * cell_shape;"
    },
    {
        "line": 38,
        "fullcodeline": "memset(op, 0, blockshape[0] * blockshape[1]);"
    },
    {
        "line": 40,
        "fullcodeline": "int32_t i_stop[2];"
    },
    {
        "line": 46,
        "fullcodeline": "int32_t ii[2];"
    },
    {
        "line": 47,
        "fullcodeline": "int32_t padding[2] = {0};"
    },
    {
        "line": 48,
        "fullcodeline": "int32_t ind = 0;"
    },
    {
        "line": 49,
        "fullcodeline": "uint8_t *local_buffer = malloc(cell_size);"
    },
    {
        "line": 50,
        "fullcodeline": "uint8_t *cell_aux = malloc(cell_size);"
    },
    {
        "line": 135,
        "fullcodeline": "ind += padding[1];"
    },
    {
        "line": 137,
        "fullcodeline": "free(cell_aux);"
    },
    {
        "line": 138,
        "fullcodeline": "free(local_buffer);"
    },
    {
        "line": 18,
        "fullcodeline": "if (NDLZ_UNEXPECT_CONDITIONAL(input_len < 8)) {"
    },
    {
        "line": 25,
        "fullcodeline": "if (ndim != 2) {"
    },
    {
        "line": 35,
        "fullcodeline": "if (NDLZ_UNEXPECT_CONDITIONAL((int64_t)output_len < (int64_t)blockshape[0] * (int64_t)blockshape[1])) {"
    },
    {
        "line": 41,
        "fullcodeline": "for (int i = 0; i < 2; ++i) {"
    },
    {
        "line": 51,
        "fullcodeline": "for (ii[0] = 0; ii[0] < i_stop[0]; ++ii[0]) {"
    },
    {
        "line": 140,
        "fullcodeline": "if (ind != (blockshape[0] * blockshape[1])) {"
    },
    {
        "line": 144,
        "fullcodeline": "if (ind > output_len) {"
    },
    {
        "line": 149,
        "fullcodeline": "return (int) ind;"
    },
    {
        "line": 26,
        "fullcodeline": "BLOSC_TRACE_ERROR(\"This codec only works for ndim = 2\");"
    },
    {
        "line": 42,
        "fullcodeline": "i_stop[i] = eshape[i] / cell_shape;"
    },
    {
        "line": 141,
        "fullcodeline": "BLOSC_TRACE_ERROR(\"Output size is not compatible with embedded blockshape\");"
    },
    {
        "line": 145,
        "fullcodeline": "BLOSC_TRACE_ERROR(\"Exceeding output size\");"
    },
    {
        "line": 52,
        "fullcodeline": "for (ii[1] = 0; ii[1] < i_stop[1]; ++ii[1]) {      // for each cell"
    },
    {
        "line": 70,
        "fullcodeline": "uint8_t match_type = (token >> 3U);"
    },
    {
        "line": 119,
        "fullcodeline": "int32_t orig = ii[0] * cell_shape * blockshape[1] + ii[1] * cell_shape;"
    },
    {
        "line": 53,
        "fullcodeline": "if (NDLZ_UNEXPECT_CONDITIONAL(ip > ip_limit)) {"
    },
    {
        "line": 59,
        "fullcodeline": "if (ii[0] == i_stop[0] - 1) {"
    },
    {
        "line": 64,
        "fullcodeline": "if (ii[1] == i_stop[1] - 1) {"
    },
    {
        "line": 71,
        "fullcodeline": "if (token == 0) {    // no match"
    },
    {
        "line": 120,
        "fullcodeline": "for (int32_t i = 0; i < (int32_t) cell_shape; i++) {"
    },
    {
        "line": 127,
        "fullcodeline": "if (ind > output_len) {"
    },
    {
        "line": 54,
        "fullcodeline": "free(local_buffer);"
    },
    {
        "line": 55,
        "fullcodeline": "free(cell_aux);"
    },
    {
        "line": 56,
        "fullcodeline": "BLOSC_TRACE_ERROR(\"Exceeding input length\");"
    },
    {
        "line": 60,
        "fullcodeline": "padding[0] = (blockshape[0] % cell_shape == 0) ? cell_shape : blockshape[0] % cell_shape;"
    },
    {
        "line": 65,
        "fullcodeline": "padding[1] = (blockshape[1] % cell_shape == 0) ? cell_shape : blockshape[1] % cell_shape;"
    },
    {
        "line": 69,
        "fullcodeline": "token = *ip++;"
    },
    {
        "line": 72,
        "fullcodeline": "buffercpy = ip;"
    },
    {
        "line": 73,
        "fullcodeline": "ip += padding[0] * padding[1];"
    },
    {
        "line": 125,
        "fullcodeline": "buffercpy += padding[1];"
    },
    {
        "line": 128,
        "fullcodeline": "free(local_buffer);"
    },
    {
        "line": 129,
        "fullcodeline": "free(cell_aux);"
    },
    {
        "line": 130,
        "fullcodeline": "BLOSC_TRACE_ERROR(\"Exceeding output size\");"
    },
    {
        "line": 62,
        "fullcodeline": "padding[0] = cell_shape;"
    },
    {
        "line": 67,
        "fullcodeline": "padding[1] = cell_shape;"
    },
    {
        "line": 121,
        "fullcodeline": "if (i < padding[0]) {"
    },
    {
        "line": 74,
        "fullcodeline": "} else if (token == (uint8_t) ((1U << 7U) | (1U << 6U))) {  // cell match"
    },
    {
        "line": 122,
        "fullcodeline": "ind = orig + i * blockshape[1];"
    },
    {
        "line": 123,
        "fullcodeline": "memcpy(&op[ind], buffercpy, padding[1]);"
    },
    {
        "line": 76,
        "fullcodeline": "buffercpy = ip - offset - 1;"
    },
    {
        "line": 77,
        "fullcodeline": "ip += 2;"
    },
    {
        "line": 75,
        "fullcodeline": "uint16_t offset = *((uint16_t *) ip);"
    },
    {
        "line": 78,
        "fullcodeline": "} else if (token == (uint8_t) (1U << 6U)) { // whole cell of same element"
    },
    {
        "line": 79,
        "fullcodeline": "buffercpy = cell_aux;"
    },
    {
        "line": 80,
        "fullcodeline": "memset(buffercpy, *ip, cell_size);"
    },
    {
        "line": 81,
        "fullcodeline": "ip++;"
    },
    {
        "line": 82,
        "fullcodeline": "} else if (match_type == 21) {    // triple match"
    },
    {
        "line": 83,
        "fullcodeline": "buffercpy = local_buffer;"
    },
    {
        "line": 84,
        "fullcodeline": "int row = (int) (token & 7);"
    },
    {
        "line": 86,
        "fullcodeline": "ip += 2;"
    },
    {
        "line": 87,
        "fullcodeline": "for (int l = 0; l < 3; l++) {"
    },
    {
        "line": 91,
        "fullcodeline": "for (int l = 0; l < cell_shape; l++) {"
    },
    {
        "line": 85,
        "fullcodeline": "uint16_t offset = *((uint16_t *) ip);"
    },
    {
        "line": 88,
        "fullcodeline": "memcpy(&buffercpy[(row + l) * cell_shape],"
    },
    {
        "line": 97,
        "fullcodeline": "} else if (match_type == 17) {    // pair match"
    },
    {
        "line": 89,
        "fullcodeline": "ip - sizeof(token) - sizeof(offset) - offset + l * cell_shape, cell_shape);"
    },
    {
        "line": 92,
        "fullcodeline": "if ((l < row) || (l > row + 2)) {"
    },
    {
        "line": 98,
        "fullcodeline": "buffercpy = local_buffer;"
    },
    {
        "line": 99,
        "fullcodeline": "int row = (int) (token & 7);"
    },
    {
        "line": 101,
        "fullcodeline": "ip += 2;"
    },
    {
        "line": 93,
        "fullcodeline": "memcpy(&buffercpy[l * cell_shape], ip, cell_shape);"
    },
    {
        "line": 94,
        "fullcodeline": "ip += cell_shape;"
    },
    {
        "line": 102,
        "fullcodeline": "for (int l = 0; l < 2; l++) {"
    },
    {
        "line": 106,
        "fullcodeline": "for (int l = 0; l < cell_shape; l++) {"
    },
    {
        "line": 113,
        "fullcodeline": "free(local_buffer);"
    },
    {
        "line": 114,
        "fullcodeline": "free(cell_aux);"
    },
    {
        "line": 115,
        "fullcodeline": "BLOSC_TRACE_ERROR(\"Invalid token: %u at cell [%d, %d]\\n\", token, ii[0], ii[1]);"
    },
    {
        "line": 100,
        "fullcodeline": "uint16_t offset = *((uint16_t *) ip);"
    },
    {
        "line": 103,
        "fullcodeline": "memcpy(&buffercpy[(row + l) * cell_shape],"
    },
    {
        "line": 104,
        "fullcodeline": "ip - sizeof(token) - sizeof(offset) - offset + l * cell_shape, cell_shape);"
    },
    {
        "line": 107,
        "fullcodeline": "if ((l < row) || (l > row + 1)) {"
    },
    {
        "line": 108,
        "fullcodeline": "memcpy(&buffercpy[l * cell_shape], ip, cell_shape);"
    },
    {
        "line": 109,
        "fullcodeline": "ip += cell_shape;"
    }
]