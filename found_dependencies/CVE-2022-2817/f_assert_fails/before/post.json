[
    {
        "line": 5,
        "fullcodeline": "int\t\tsave_trylevel = trylevel;"
    },
    {
        "line": 6,
        "fullcodeline": "int\t\tcalled_emsg_before = called_emsg;"
    },
    {
        "line": 7,
        "fullcodeline": "char\t*wrong_arg_msg = NULL;"
    },
    {
        "line": 18,
        "fullcodeline": "cmd = tv_get_string_chk(&argvars[0]);"
    },
    {
        "line": 21,
        "fullcodeline": "trylevel = 0;"
    },
    {
        "line": 22,
        "fullcodeline": "suppress_errthrow = TRUE;"
    },
    {
        "line": 23,
        "fullcodeline": "in_assert_fails = TRUE;"
    },
    {
        "line": 25,
        "fullcodeline": "do_cmdline_cmd(cmd);"
    },
    {
        "line": 149,
        "fullcodeline": "trylevel = save_trylevel;"
    },
    {
        "line": 150,
        "fullcodeline": "suppress_errthrow = FALSE;"
    },
    {
        "line": 151,
        "fullcodeline": "in_assert_fails = FALSE;"
    },
    {
        "line": 152,
        "fullcodeline": "did_emsg = FALSE;"
    },
    {
        "line": 153,
        "fullcodeline": "got_int = FALSE;"
    },
    {
        "line": 154,
        "fullcodeline": "msg_col = 0;"
    },
    {
        "line": 155,
        "fullcodeline": "need_wait_return = FALSE;"
    },
    {
        "line": 156,
        "fullcodeline": "emsg_on_display = FALSE;"
    },
    {
        "line": 157,
        "fullcodeline": "msg_scrolled = 0;"
    },
    {
        "line": 158,
        "fullcodeline": "lines_left = Rows;"
    },
    {
        "line": 159,
        "fullcodeline": "VIM_CLEAR(emsg_assert_fails_msg);"
    },
    {
        "line": 160,
        "fullcodeline": "set_vim_var_string(VV_ERRMSG, NULL, 0);"
    },
    {
        "line": 9,
        "fullcodeline": "if (check_for_string_or_number_arg(argvars, 0) == FAIL"
    },
    {
        "line": 26,
        "fullcodeline": "if (called_emsg == called_emsg_before)"
    },
    {
        "line": 161,
        "fullcodeline": "if (wrong_arg_msg != NULL)"
    },
    {
        "line": 11,
        "fullcodeline": "|| (argvars[1].v_type != VAR_UNKNOWN"
    },
    {
        "line": 28,
        "fullcodeline": "prepare_assert_error(&ga);"
    },
    {
        "line": 29,
        "fullcodeline": "ga_concat(&ga, (char_u *)\"command did not fail: \");"
    },
    {
        "line": 30,
        "fullcodeline": "assert_append_cmd_or_arg(&ga, argvars, cmd);"
    },
    {
        "line": 31,
        "fullcodeline": "assert_error(&ga);"
    },
    {
        "line": 32,
        "fullcodeline": "ga_clear(&ga);"
    },
    {
        "line": 33,
        "fullcodeline": "rettv->vval.v_number = 1;"
    },
    {
        "line": 162,
        "fullcodeline": "emsg(_(wrong_arg_msg));"
    },
    {
        "line": 10,
        "fullcodeline": "|| check_for_opt_string_or_list_arg(argvars, 1) == FAIL"
    },
    {
        "line": 12,
        "fullcodeline": "&& (argvars[2].v_type != VAR_UNKNOWN"
    },
    {
        "line": 13,
        "fullcodeline": "&& (check_for_opt_number_arg(argvars, 3) == FAIL"
    },
    {
        "line": 35,
        "fullcodeline": "else if (argvars[1].v_type != VAR_UNKNOWN)"
    },
    {
        "line": 14,
        "fullcodeline": "|| (argvars[3].v_type != VAR_UNKNOWN"
    },
    {
        "line": 37,
        "fullcodeline": "char_u\tbuf[NUMBUFLEN];"
    },
    {
        "line": 39,
        "fullcodeline": "char_u\t*expected_str = NULL;"
    },
    {
        "line": 40,
        "fullcodeline": "int\terror_found = FALSE;"
    },
    {
        "line": 41,
        "fullcodeline": "int\terror_found_index = 1;"
    },
    {
        "line": 42,
        "fullcodeline": "char_u\t*actual = emsg_assert_fails_msg == NULL ? (char_u *)\"[unknown]\""
    },
    {
        "line": 15,
        "fullcodeline": "&& check_for_opt_string_arg(argvars, 4) == FAIL)))))"
    },
    {
        "line": 45,
        "fullcodeline": "if (argvars[1].v_type == VAR_STRING)"
    },
    {
        "line": 87,
        "fullcodeline": "if (!error_found && argvars[2].v_type != VAR_UNKNOWN"
    },
    {
        "line": 47,
        "fullcodeline": "expected = tv_get_string_buf_chk(&argvars[1], buf);"
    },
    {
        "line": 48,
        "fullcodeline": "error_found = expected == NULL"
    },
    {
        "line": 88,
        "fullcodeline": "&& argvars[3].v_type != VAR_UNKNOWN)"
    },
    {
        "line": 122,
        "fullcodeline": "prepare_assert_error(&ga);"
    },
    {
        "line": 138,
        "fullcodeline": "fill_assert_error(&ga, &argvars[2], expected_str,"
    },
    {
        "line": 140,
        "fullcodeline": "ga_concat(&ga, (char_u *)\": \");"
    },
    {
        "line": 141,
        "fullcodeline": "assert_append_cmd_or_arg(&ga, argvars, cmd);"
    },
    {
        "line": 142,
        "fullcodeline": "assert_error(&ga);"
    },
    {
        "line": 143,
        "fullcodeline": "ga_clear(&ga);"
    },
    {
        "line": 144,
        "fullcodeline": "rettv->vval.v_number = 1;"
    },
    {
        "line": 90,
        "fullcodeline": "if (argvars[3].v_type != VAR_NUMBER)"
    },
    {
        "line": 101,
        "fullcodeline": "if (!error_found && argvars[4].v_type != VAR_UNKNOWN)"
    },
    {
        "line": 123,
        "fullcodeline": "if (error_found_index == 3)"
    },
    {
        "line": 49,
        "fullcodeline": "|| strstr((char *)actual, (char *)expected) == NULL;"
    },
    {
        "line": 51,
        "fullcodeline": "else if (argvars[1].v_type == VAR_LIST)"
    },
    {
        "line": 92,
        "fullcodeline": "wrong_arg_msg = e_assert_fails_fourth_argument;"
    },
    {
        "line": 125,
        "fullcodeline": "actual_tv.v_type = VAR_NUMBER;"
    },
    {
        "line": 126,
        "fullcodeline": "actual_tv.vval.v_number = emsg_assert_fails_lnum;"
    },
    {
        "line": 61,
        "fullcodeline": "CHECK_LIST_MATERIALIZE(list);"
    },
    {
        "line": 63,
        "fullcodeline": "expected = tv_get_string_buf_chk(tv, buf);"
    },
    {
        "line": 103,
        "fullcodeline": "if (argvars[4].v_type != VAR_STRING)"
    },
    {
        "line": 56,
        "fullcodeline": "if (list == NULL || list->lv_len < 1 || list->lv_len > 2)"
    },
    {
        "line": 64,
        "fullcodeline": "if (!pattern_match(expected, actual, FALSE))"
    },
    {
        "line": 83,
        "fullcodeline": "wrong_arg_msg = e_assert_fails_second_arg;"
    },
    {
        "line": 95,
        "fullcodeline": "else if (argvars[3].vval.v_number >= 0"
    },
    {
        "line": 105,
        "fullcodeline": "wrong_arg_msg = e_assert_fails_fifth_argument;"
    },
    {
        "line": 128,
        "fullcodeline": "else if (error_found_index == 4)"
    },
    {
        "line": 58,
        "fullcodeline": "wrong_arg_msg = e_assert_fails_second_arg;"
    },
    {
        "line": 66,
        "fullcodeline": "error_found = TRUE;"
    },
    {
        "line": 67,
        "fullcodeline": "expected_str = expected;"
    },
    {
        "line": 96,
        "fullcodeline": "&& argvars[3].vval.v_number != emsg_assert_fails_lnum)"
    },
    {
        "line": 98,
        "fullcodeline": "error_found = TRUE;"
    },
    {
        "line": 99,
        "fullcodeline": "error_found_index = 3;"
    },
    {
        "line": 130,
        "fullcodeline": "actual_tv.v_type = VAR_STRING;"
    },
    {
        "line": 131,
        "fullcodeline": "actual_tv.vval.v_string = emsg_assert_fails_context;"
    },
    {
        "line": 108,
        "fullcodeline": "else if (argvars[4].vval.v_string != NULL"
    },
    {
        "line": 135,
        "fullcodeline": "actual_tv.v_type = VAR_STRING;"
    },
    {
        "line": 136,
        "fullcodeline": "actual_tv.vval.v_string = actual;"
    },
    {
        "line": 69,
        "fullcodeline": "else if (list->lv_len == 2)"
    },
    {
        "line": 109,
        "fullcodeline": "&& !pattern_match(argvars[4].vval.v_string,"
    },
    {
        "line": 112,
        "fullcodeline": "error_found = TRUE;"
    },
    {
        "line": 113,
        "fullcodeline": "error_found_index = 4;"
    },
    {
        "line": 72,
        "fullcodeline": "actual = get_vim_var_str(VV_ERRMSG);"
    },
    {
        "line": 73,
        "fullcodeline": "expected = tv_get_string_buf_chk(tv, buf);"
    },
    {
        "line": 74,
        "fullcodeline": "if (!pattern_match(expected, actual, FALSE))"
    },
    {
        "line": 76,
        "fullcodeline": "error_found = TRUE;"
    },
    {
        "line": 77,
        "fullcodeline": "expected_str = expected;"
    }
]