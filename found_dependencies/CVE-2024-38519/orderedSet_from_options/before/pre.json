[
    {
        "line": 2,
        "fullcodeline": "assert 'all' in alias_dict, '\"all\" alias is required'"
    },
    {
        "line": 3,
        "fullcodeline": "requested = list(start or [])"
    },
    {
        "line": 4,
        "fullcodeline": "for val in options:"
    },
    {
        "line": 28,
        "fullcodeline": "return orderedSet(requested)"
    },
    {
        "line": 5,
        "fullcodeline": "discard = val.startswith('-')"
    },
    {
        "line": 16,
        "fullcodeline": "current = (filter(re.compile(val, re.I).fullmatch, alias_dict['all']) if use_regex"
    },
    {
        "line": 9,
        "fullcodeline": "if val in alias_dict:"
    },
    {
        "line": 18,
        "fullcodeline": "if current is None:"
    },
    {
        "line": 7,
        "fullcodeline": "val = val[1:]"
    },
    {
        "line": 10,
        "fullcodeline": "val = alias_dict[val] if not discard else ["
    },
    {
        "line": 13,
        "fullcodeline": "requested = orderedSet_from_options(val, alias_dict, start=requested)"
    },
    {
        "line": 17,
        "fullcodeline": "else [val] if val in alias_dict['all'] else None)"
    },
    {
        "line": 19,
        "fullcodeline": "raise ValueError(val)"
    },
    {
        "line": 26,
        "fullcodeline": "requested.extend(current)"
    },
    {
        "line": 22,
        "fullcodeline": "for item in current:"
    },
    {
        "line": 23,
        "fullcodeline": "while item in requested:"
    },
    {
        "line": 24,
        "fullcodeline": "requested.remove(item)"
    },
    {
        "line": 11,
        "fullcodeline": "i[1:] if i.startswith('-') else f'-{i}' for i in alias_dict[val]]"
    }
]