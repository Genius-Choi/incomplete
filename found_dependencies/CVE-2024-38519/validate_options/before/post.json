[
    {
        "line": 2,
        "fullcodeline": "def validate(cndn, name, value=None, msg=None):"
    },
    {
        "line": 7,
        "fullcodeline": "def validate_in(name, value, items, msg=None):"
    },
    {
        "line": 10,
        "fullcodeline": "def validate_regex(name, value, regex):"
    },
    {
        "line": 13,
        "fullcodeline": "def validate_positive(name, value, strict=False):"
    },
    {
        "line": 17,
        "fullcodeline": "def validate_minmax(min_val, max_val, min_name, max_name=None):"
    },
    {
        "line": 25,
        "fullcodeline": "validate(sum(map(bool, (opts.usenetrc, opts.netrc_cmd, opts.username))) <= 1, '.netrc',"
    },
    {
        "line": 27,
        "fullcodeline": "validate(opts.password is None or opts.username is not None, 'account username', msg='{name} missing')"
    },
    {
        "line": 28,
        "fullcodeline": "validate(opts.ap_password is None or opts.ap_username is not None,"
    },
    {
        "line": 30,
        "fullcodeline": "validate_in('TV Provider', opts.ap_mso, MSO_INFO,"
    },
    {
        "line": 34,
        "fullcodeline": "validate_positive('autonumber start', opts.autonumber_start)"
    },
    {
        "line": 35,
        "fullcodeline": "validate_positive('autonumber size', opts.autonumber_size, True)"
    },
    {
        "line": 36,
        "fullcodeline": "validate_positive('concurrent fragments', opts.concurrent_fragment_downloads, True)"
    },
    {
        "line": 37,
        "fullcodeline": "validate_positive('playlist start', opts.playliststart, True)"
    },
    {
        "line": 42,
        "fullcodeline": "validate_positive('subtitles sleep interval', opts.sleep_interval_subtitles)"
    },
    {
        "line": 43,
        "fullcodeline": "validate_positive('requests sleep interval', opts.sleep_interval_requests)"
    },
    {
        "line": 44,
        "fullcodeline": "validate_positive('sleep interval', opts.sleep_interval)"
    },
    {
        "line": 45,
        "fullcodeline": "validate_positive('max sleep interval', opts.max_sleep_interval)"
    },
    {
        "line": 67,
        "fullcodeline": "validate_regex('merge output format', opts.merge_output_format,"
    },
    {
        "line": 69,
        "fullcodeline": "validate_regex('audio format', opts.audioformat, FFmpegExtractAudioPP.FORMAT_RE)"
    },
    {
        "line": 70,
        "fullcodeline": "validate_in('subtitle format', opts.convertsubtitles, FFmpegSubtitlesConvertorPP.SUPPORTED_EXTS)"
    },
    {
        "line": 71,
        "fullcodeline": "validate_regex('thumbnail format', opts.convertthumbnails, FFmpegThumbnailsConvertorPP.FORMAT_RE)"
    },
    {
        "line": 72,
        "fullcodeline": "validate_regex('recode video format', opts.recodevideo, FFmpegVideoConvertorPP.FORMAT_RE)"
    },
    {
        "line": 73,
        "fullcodeline": "validate_regex('remux video format', opts.remuxvideo, FFmpegVideoRemuxerPP.FORMAT_RE)"
    },
    {
        "line": 80,
        "fullcodeline": "def parse_retries(name, value):"
    },
    {
        "line": 90,
        "fullcodeline": "opts.retries = parse_retries('download', opts.retries)"
    },
    {
        "line": 91,
        "fullcodeline": "opts.fragment_retries = parse_retries('fragment', opts.fragment_retries)"
    },
    {
        "line": 92,
        "fullcodeline": "opts.extractor_retries = parse_retries('extractor', opts.extractor_retries)"
    },
    {
        "line": 93,
        "fullcodeline": "opts.file_access_retries = parse_retries('file access', opts.file_access_retries)"
    },
    {
        "line": 96,
        "fullcodeline": "def parse_sleep_func(expr):"
    },
    {
        "line": 118,
        "fullcodeline": "def validate_bytes(name, value):"
    },
    {
        "line": 125,
        "fullcodeline": "opts.ratelimit = validate_bytes('rate limit', opts.ratelimit)"
    },
    {
        "line": 126,
        "fullcodeline": "opts.throttledratelimit = validate_bytes('throttled rate limit', opts.throttledratelimit)"
    },
    {
        "line": 127,
        "fullcodeline": "opts.min_filesize = validate_bytes('min filesize', opts.min_filesize)"
    },
    {
        "line": 128,
        "fullcodeline": "opts.max_filesize = validate_bytes('max filesize', opts.max_filesize)"
    },
    {
        "line": 129,
        "fullcodeline": "opts.buffersize = validate_bytes('buffer size', opts.buffersize)"
    },
    {
        "line": 130,
        "fullcodeline": "opts.http_chunk_size = validate_bytes('http chunk size', opts.http_chunk_size)"
    },
    {
        "line": 133,
        "fullcodeline": "def validate_outtmpl(tmpl, msg):"
    },
    {
        "line": 147,
        "fullcodeline": "validate_outtmpl(opts.sponsorblock_chapter_title, 'SponsorBlock chapter title')"
    },
    {
        "line": 152,
        "fullcodeline": "outtmpl_default = opts.outtmpl.get('default')"
    },
    {
        "line": 157,
        "fullcodeline": "def parse_chapters(name, value, advanced=False):"
    },
    {
        "line": 199,
        "fullcodeline": "opts.download_ranges = download_range_func(*parse_chapters('--download-sections', opts.download_ranges, True))"
    },
    {
        "line": 228,
        "fullcodeline": "def metadataparser_actions(f):"
    },
    {
        "line": 248,
        "fullcodeline": "opts.parse_metadata = {"
    },
    {
        "line": 270,
        "fullcodeline": "opts.geo_bypass = opts.geo_bypass.lower() != 'never'"
    },
    {
        "line": 272,
        "fullcodeline": "opts.match_filter = match_filter_func(opts.match_filter, opts.breaking_match_filter)"
    },
    {
        "line": 288,
        "fullcodeline": "default_downloader = None"
    },
    {
        "line": 313,
        "fullcodeline": "def report_args_compat(name, value, key1, key2=None, where=None):"
    },
    {
        "line": 329,
        "fullcodeline": "def report_conflict(arg1, opt1, arg2='--allow-unplayable-formats', opt2='allow_unplayable_formats',"
    },
    {
        "line": 343,
        "fullcodeline": "report_conflict('--playlist-reverse', 'playlist_reverse', '--playlist-random', 'playlist_random')"
    },
    {
        "line": 344,
        "fullcodeline": "report_conflict('--playlist-reverse', 'playlist_reverse', '--lazy-playlist', 'lazy_playlist')"
    },
    {
        "line": 345,
        "fullcodeline": "report_conflict('--playlist-random', 'playlist_random', '--lazy-playlist', 'lazy_playlist')"
    },
    {
        "line": 346,
        "fullcodeline": "report_conflict('--dateafter', 'dateafter', '--date', 'date', default=None)"
    },
    {
        "line": 347,
        "fullcodeline": "report_conflict('--datebefore', 'datebefore', '--date', 'date', default=None)"
    },
    {
        "line": 348,
        "fullcodeline": "report_conflict('--exec-before-download', 'exec_before_dl_cmd',"
    },
    {
        "line": 350,
        "fullcodeline": "report_conflict('--id', 'useid', '--output', 'outtmpl', val2=opts.outtmpl.get('default'))"
    },
    {
        "line": 351,
        "fullcodeline": "report_conflict('--remux-video', 'remuxvideo', '--recode-video', 'recodevideo')"
    },
    {
        "line": 352,
        "fullcodeline": "report_conflict('--sponskrub', 'sponskrub', '--remove-chapters', 'remove_chapters')"
    },
    {
        "line": 353,
        "fullcodeline": "report_conflict('--sponskrub', 'sponskrub', '--sponsorblock-mark', 'sponsorblock_mark')"
    },
    {
        "line": 354,
        "fullcodeline": "report_conflict('--sponskrub', 'sponskrub', '--sponsorblock-remove', 'sponsorblock_remove')"
    },
    {
        "line": 355,
        "fullcodeline": "report_conflict('--sponskrub-cut', 'sponskrub_cut', '--split-chapter', 'split_chapters',"
    },
    {
        "line": 359,
        "fullcodeline": "report_conflict('--embed-metadata', 'addmetadata')"
    },
    {
        "line": 360,
        "fullcodeline": "report_conflict('--embed-chapters', 'addchapters')"
    },
    {
        "line": 361,
        "fullcodeline": "report_conflict('--embed-info-json', 'embed_infojson')"
    },
    {
        "line": 362,
        "fullcodeline": "report_conflict('--embed-subs', 'embedsubtitles')"
    },
    {
        "line": 363,
        "fullcodeline": "report_conflict('--embed-thumbnail', 'embedthumbnail')"
    },
    {
        "line": 364,
        "fullcodeline": "report_conflict('--extract-audio', 'extractaudio')"
    },
    {
        "line": 365,
        "fullcodeline": "report_conflict('--fixup', 'fixup', val1=opts.fixup not in (None, 'never', 'ignore'), default='never')"
    },
    {
        "line": 366,
        "fullcodeline": "report_conflict('--recode-video', 'recodevideo')"
    },
    {
        "line": 367,
        "fullcodeline": "report_conflict('--remove-chapters', 'remove_chapters', default=[])"
    },
    {
        "line": 368,
        "fullcodeline": "report_conflict('--remux-video', 'remuxvideo')"
    },
    {
        "line": 369,
        "fullcodeline": "report_conflict('--sponskrub', 'sponskrub')"
    },
    {
        "line": 370,
        "fullcodeline": "report_conflict('--sponsorblock-remove', 'sponsorblock_remove', default=set())"
    },
    {
        "line": 371,
        "fullcodeline": "report_conflict('--xattrs', 'xattrs')"
    },
    {
        "line": 374,
        "fullcodeline": "def report_deprecation(val, old, new=None):"
    },
    {
        "line": 381,
        "fullcodeline": "report_deprecation(opts.sponskrub, '--sponskrub', '--sponsorblock-mark or --sponsorblock-remove')"
    },
    {
        "line": 382,
        "fullcodeline": "report_deprecation(not opts.prefer_ffmpeg, '--prefer-avconv', 'ffmpeg')"
    },
    {
        "line": 388,
        "fullcodeline": "opts.date = DateRange.day(opts.date) if opts.date else DateRange(opts.dateafter, opts.datebefore)"
    },
    {
        "line": 38,
        "fullcodeline": "if opts.playlistend != -1:"
    },
    {
        "line": 46,
        "fullcodeline": "if opts.sleep_interval is None:"
    },
    {
        "line": 55,
        "fullcodeline": "if opts.wait_for_video is not None:"
    },
    {
        "line": 63,
        "fullcodeline": "for f in opts.format_sort:"
    },
    {
        "line": 108,
        "fullcodeline": "for key, expr in opts.retry_sleep.items():"
    },
    {
        "line": 138,
        "fullcodeline": "for k, tmpl in opts.outtmpl.items():"
    },
    {
        "line": 140,
        "fullcodeline": "for type_, tmpl_list in opts.forceprint.items():"
    },
    {
        "line": 143,
        "fullcodeline": "for type_, tmpl_list in opts.print_to_file.items():"
    },
    {
        "line": 148,
        "fullcodeline": "for k, tmpl in opts.progress_template.items():"
    },
    {
        "line": 153,
        "fullcodeline": "if outtmpl_default == '':"
    },
    {
        "line": 198,
        "fullcodeline": "opts.remove_chapters, opts.remove_ranges, _ = parse_chapters('--remove-chapters', opts.remove_chapters)"
    },
    {
        "line": 224,
        "fullcodeline": "if opts.impersonate is not None:"
    },
    {
        "line": 246,
        "fullcodeline": "if opts.metafromtitle is not None:"
    },
    {
        "line": 254,
        "fullcodeline": "if opts.playlist_items is not None:"
    },
    {
        "line": 260,
        "fullcodeline": "opts.geo_bypass_country, opts.geo_bypass_ip_block = None, None"
    },
    {
        "line": 261,
        "fullcodeline": "if opts.geo_bypass.lower() not in ('default', 'never'):"
    },
    {
        "line": 274,
        "fullcodeline": "if opts.download_archive is not None:"
    },
    {
        "line": 277,
        "fullcodeline": "if opts.ffmpeg_location is not None:"
    },
    {
        "line": 280,
        "fullcodeline": "if opts.user_agent is not None:"
    },
    {
        "line": 282,
        "fullcodeline": "if opts.referer is not None:"
    },
    {
        "line": 289,
        "fullcodeline": "for proto, path in opts.external_downloader.items():"
    },
    {
        "line": 299,
        "fullcodeline": "for policy in opts.color.values():"
    },
    {
        "line": 303,
        "fullcodeline": "warnings, deprecation_warnings = [], []"
    },
    {
        "line": 306,
        "fullcodeline": "if opts.format == 'best':"
    },
    {
        "line": 320,
        "fullcodeline": "if report_args_compat('external downloader', opts.external_downloader_args,"
    },
    {
        "line": 325,
        "fullcodeline": "if report_args_compat('post-processor', opts.postprocessor_args, 'default-compat', 'default'):"
    },
    {
        "line": 356,
        "fullcodeline": "val1=opts.sponskrub and opts.sponskrub_cut)"
    },
    {
        "line": 399,
        "fullcodeline": "if (opts.addmetadata or opts.sponsorblock_mark) and opts.addchapters is None:"
    },
    {
        "line": 403,
        "fullcodeline": "if opts.extractaudio and not opts.keepvideo and opts.format is None:"
    },
    {
        "line": 407,
        "fullcodeline": "if opts.getcomments and opts.writeinfojson is None and not opts.embed_infojson:"
    },
    {
        "line": 412,
        "fullcodeline": "if opts.allsubtitles and not (opts.embedsubtitles or opts.writeautomaticsub):"
    },
    {
        "line": 416,
        "fullcodeline": "if opts.addmetadata and opts.embed_infojson is None:"
    },
    {
        "line": 421,
        "fullcodeline": "if opts.username is not None and opts.password is None:"
    },
    {
        "line": 423,
        "fullcodeline": "if opts.ap_username is not None and opts.ap_password is None:"
    },
    {
        "line": 426,
        "fullcodeline": "return warnings, deprecation_warnings"
    },
    {
        "line": 39,
        "fullcodeline": "validate_minmax(opts.playliststart, opts.playlistend, 'playlist start', 'playlist end')"
    },
    {
        "line": 47,
        "fullcodeline": "validate("
    },
    {
        "line": 57,
        "fullcodeline": "validate(min_wait is not None and not (max_wait is None and '-' in opts.wait_for_video),"
    },
    {
        "line": 59,
        "fullcodeline": "validate_minmax(min_wait, max_wait, 'time range to wait for video')"
    },
    {
        "line": 60,
        "fullcodeline": "opts.wait_for_video = (min_wait, max_wait)"
    },
    {
        "line": 68,
        "fullcodeline": "r'({0})(/({0}))*'.format('|'.join(map(re.escape, FFmpegMergerPP.SUPPORTED_EXTS))))"
    },
    {
        "line": 75,
        "fullcodeline": "opts.audioquality = opts.audioquality.strip('k').strip('K')"
    },
    {
        "line": 77,
        "fullcodeline": "validate_positive('audio quality', int_or_none(float_or_none(opts.audioquality), default=0))"
    },
    {
        "line": 154,
        "fullcodeline": "opts.skip_download = None"
    },
    {
        "line": 203,
        "fullcodeline": "container = None"
    },
    {
        "line": 204,
        "fullcodeline": "mobj = re.fullmatch(r'''(?x)"
    },
    {
        "line": 213,
        "fullcodeline": "browser_name = browser_name.lower()"
    },
    {
        "line": 222,
        "fullcodeline": "opts.cookiesfrombrowser = (browser_name, profile, keyring, container)"
    },
    {
        "line": 225,
        "fullcodeline": "opts.impersonate = ImpersonateTarget.from_str(opts.impersonate.lower())"
    },
    {
        "line": 275,
        "fullcodeline": "opts.download_archive = expand_path(opts.download_archive)"
    },
    {
        "line": 278,
        "fullcodeline": "opts.ffmpeg_location = expand_path(opts.ffmpeg_location)"
    },
    {
        "line": 307,
        "fullcodeline": "warnings.append('.\\n         '.join(("
    },
    {
        "line": 326,
        "fullcodeline": "opts.postprocessor_args['default'] = opts.postprocessor_args.pop('default-compat')"
    },
    {
        "line": 349,
        "fullcodeline": "'\"--exec before_dl:\"', 'exec_cmd', val2=opts.exec_cmd.get('before_dl'))"
    },
    {
        "line": 391,
        "fullcodeline": "opts.exec_cmd['before_dl'] = opts.exec_before_dl_cmd"
    },
    {
        "line": 394,
        "fullcodeline": "opts.outtmpl['default'] = '%(id)s.%(ext)s'"
    },
    {
        "line": 397,
        "fullcodeline": "opts.continue_dl = False"
    },
    {
        "line": 401,
        "fullcodeline": "opts.addchapters = True"
    },
    {
        "line": 405,
        "fullcodeline": "opts.format = 'bestaudio/best'"
    },
    {
        "line": 414,
        "fullcodeline": "opts.writesubtitles = True"
    },
    {
        "line": 418,
        "fullcodeline": "opts.embed_infojson = 'if_exists'"
    },
    {
        "line": 422,
        "fullcodeline": "opts.password = getpass.getpass('Type account password and press [Return]: ')"
    },
    {
        "line": 424,
        "fullcodeline": "opts.ap_password = getpass.getpass('Type TV provider account password and press [Return]: ')"
    },
    {
        "line": 48,
        "fullcodeline": "opts.max_sleep_interval is None, 'min sleep interval',"
    },
    {
        "line": 50,
        "fullcodeline": "elif opts.max_sleep_interval is None:"
    },
    {
        "line": 56,
        "fullcodeline": "min_wait, max_wait, *_ = map(parse_duration, [*opts.wait_for_video.split('-', 1), None])"
    },
    {
        "line": 64,
        "fullcodeline": "validate_regex('format sorting', f, FormatSorter.regex)"
    },
    {
        "line": 139,
        "fullcodeline": "validate_outtmpl(tmpl, f'{k} output template')"
    },
    {
        "line": 149,
        "fullcodeline": "k = f'{k[:-6]} console title' if '-title' in k else f'{k} progress'"
    },
    {
        "line": 150,
        "fullcodeline": "validate_outtmpl(tmpl, f'{k} template')"
    },
    {
        "line": 210,
        "fullcodeline": "if mobj is None:"
    },
    {
        "line": 212,
        "fullcodeline": "browser_name, keyring, profile, container = mobj.group('name', 'keyring', 'profile', 'container')"
    },
    {
        "line": 214,
        "fullcodeline": "if browser_name not in SUPPORTED_BROWSERS:"
    },
    {
        "line": 217,
        "fullcodeline": "if keyring is not None:"
    },
    {
        "line": 247,
        "fullcodeline": "opts.parse_metadata.setdefault('pre_process', []).append(f'title:{opts.metafromtitle}')"
    },
    {
        "line": 266,
        "fullcodeline": "if len(opts.geo_bypass) == 2:"
    },
    {
        "line": 281,
        "fullcodeline": "opts.headers.setdefault('User-Agent', opts.user_agent)"
    },
    {
        "line": 283,
        "fullcodeline": "opts.headers.setdefault('Referer', opts.referer)"
    },
    {
        "line": 286,
        "fullcodeline": "opts.sponsorblock_mark = opts.sponsorblock_remove = set()"
    },
    {
        "line": 292,
        "fullcodeline": "ed = get_external_downloader(path)"
    },
    {
        "line": 323,
        "fullcodeline": "opts.external_downloader_args.setdefault(default_downloader, opts.external_downloader_args.pop('default'))"
    },
    {
        "line": 327,
        "fullcodeline": "opts.postprocessor_args.setdefault('sponskrub', [])"
    },
    {
        "line": 409,
        "fullcodeline": "if not opts.dumpjson or opts.print_json or opts.dump_single_json:"
    },
    {
        "line": 51,
        "fullcodeline": "opts.max_sleep_interval = opts.sleep_interval"
    },
    {
        "line": 53,
        "fullcodeline": "validate_minmax(opts.sleep_interval, opts.max_sleep_interval, 'sleep interval')"
    },
    {
        "line": 109,
        "fullcodeline": "if not expr:"
    },
    {
        "line": 141,
        "fullcodeline": "for tmpl in tmpl_list:"
    },
    {
        "line": 144,
        "fullcodeline": "for tmpl, file in tmpl_list:"
    },
    {
        "line": 211,
        "fullcodeline": "raise ValueError(f'invalid cookies from browser arguments: {opts.cookiesfrombrowser}')"
    },
    {
        "line": 215,
        "fullcodeline": "raise ValueError(f'unsupported browser specified for cookies: \"{browser_name}\". '"
    },
    {
        "line": 218,
        "fullcodeline": "keyring = keyring.upper()"
    },
    {
        "line": 256,
        "fullcodeline": "tuple(PlaylistEntries.parse_playlist_items(opts.playlist_items))"
    },
    {
        "line": 263,
        "fullcodeline": "GeoUtils.random_ipv4(opts.geo_bypass)"
    },
    {
        "line": 267,
        "fullcodeline": "opts.geo_bypass_country = opts.geo_bypass"
    },
    {
        "line": 269,
        "fullcodeline": "opts.geo_bypass_ip_block = opts.geo_bypass"
    },
    {
        "line": 290,
        "fullcodeline": "if path == 'native':"
    },
    {
        "line": 293,
        "fullcodeline": "if ed is None:"
    },
    {
        "line": 300,
        "fullcodeline": "if policy not in ('always', 'auto', 'no_color', 'never'):"
    },
    {
        "line": 410,
        "fullcodeline": "opts.writeinfojson = True"
    },
    {
        "line": 110,
        "fullcodeline": "del opts.retry_sleep[key]"
    },
    {
        "line": 113,
        "fullcodeline": "opts.retry_sleep[key] = parse_sleep_func(expr)"
    },
    {
        "line": 219,
        "fullcodeline": "if keyring not in SUPPORTED_KEYRINGS:"
    },
    {
        "line": 294,
        "fullcodeline": "raise ValueError("
    },
    {
        "line": 301,
        "fullcodeline": "raise ValueError(f'\"{policy}\" is not a valid color policy')"
    },
    {
        "line": 142,
        "fullcodeline": "validate_outtmpl(tmpl, f'{type_} print template')"
    },
    {
        "line": 145,
        "fullcodeline": "validate_outtmpl(tmpl, f'{type_} print to file template')"
    },
    {
        "line": 146,
        "fullcodeline": "validate_outtmpl(file, f'{type_} print to file filename')"
    },
    {
        "line": 220,
        "fullcodeline": "raise ValueError(f'unsupported keyring specified for cookies: \"{keyring}\". '"
    },
    {
        "line": 249,
        "fullcodeline": "k: list(itertools.chain(*map(metadataparser_actions, v)))"
    },
    {
        "line": 258,
        "fullcodeline": "raise ValueError(f'Invalid playlist-items {opts.playlist_items!r}: {err}')"
    },
    {
        "line": 265,
        "fullcodeline": "raise ValueError(f'Unsupported --xff \"{opts.geo_bypass}\"')"
    },
    {
        "line": 296,
        "fullcodeline": "elif ed and proto == 'default':"
    },
    {
        "line": 115,
        "fullcodeline": "raise ValueError(f'invalid {key} retry sleep expression {expr!r}')"
    },
    {
        "line": 216,
        "fullcodeline": "f'Supported browsers are: {\", \".join(sorted(SUPPORTED_BROWSERS))}')"
    },
    {
        "line": 250,
        "fullcodeline": "for k, v in opts.parse_metadata.items()"
    },
    {
        "line": 295,
        "fullcodeline": "f'No such {format_field(proto, None, \"%s \", ignore=\"default\")}external downloader \"{path}\"')"
    },
    {
        "line": 297,
        "fullcodeline": "default_downloader = ed.get_basename()"
    },
    {
        "line": 221,
        "fullcodeline": "f'Supported keyrings are: {\", \".join(sorted(SUPPORTED_KEYRINGS))}')"
    }
]