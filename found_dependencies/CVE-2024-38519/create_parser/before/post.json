[
    {
        "line": 2,
        "fullcodeline": "def _list_from_options_callback(option, opt_str, value, parser, append=True, delim=',', process=str.strip):"
    },
    {
        "line": 10,
        "fullcodeline": "def _set_from_options_callback("
    },
    {
        "line": 22,
        "fullcodeline": "def _dict_from_options_callback("
    },
    {
        "line": 52,
        "fullcodeline": "def when_prefix(default):"
    },
    {
        "line": 66,
        "fullcodeline": "parser = _YoutubeDLOptionParser()"
    },
    {
        "line": 67,
        "fullcodeline": "alias_group = optparse.OptionGroup(parser, 'Aliases')"
    },
    {
        "line": 68,
        "fullcodeline": "Formatter = string.Formatter()"
    },
    {
        "line": 70,
        "fullcodeline": "def _create_alias(option, opt_str, value, parser):"
    },
    {
        "line": 91,
        "fullcodeline": "def _alias_callback(option, opt_str, value, parser, opts, nargs):"
    },
    {
        "line": 102,
        "fullcodeline": "general = optparse.OptionGroup(parser, 'General Options')"
    },
    {
        "line": 103,
        "fullcodeline": "general.add_option("
    },
    {
        "line": 106,
        "fullcodeline": "general.add_option("
    },
    {
        "line": 110,
        "fullcodeline": "general.add_option("
    },
    {
        "line": 116,
        "fullcodeline": "general.add_option("
    },
    {
        "line": 120,
        "fullcodeline": "general.add_option("
    },
    {
        "line": 127,
        "fullcodeline": "general.add_option("
    },
    {
        "line": 131,
        "fullcodeline": "general.add_option("
    },
    {
        "line": 135,
        "fullcodeline": "general.add_option("
    },
    {
        "line": 139,
        "fullcodeline": "general.add_option("
    },
    {
        "line": 143,
        "fullcodeline": "general.add_option("
    },
    {
        "line": 147,
        "fullcodeline": "general.add_option("
    },
    {
        "line": 151,
        "fullcodeline": "general.add_option("
    },
    {
        "line": 161,
        "fullcodeline": "general.add_option("
    },
    {
        "line": 165,
        "fullcodeline": "general.add_option("
    },
    {
        "line": 174,
        "fullcodeline": "general.add_option("
    },
    {
        "line": 181,
        "fullcodeline": "general.add_option("
    },
    {
        "line": 187,
        "fullcodeline": "general.add_option("
    },
    {
        "line": 193,
        "fullcodeline": "general.add_option("
    },
    {
        "line": 197,
        "fullcodeline": "general.add_option("
    },
    {
        "line": 201,
        "fullcodeline": "general.add_option("
    },
    {
        "line": 205,
        "fullcodeline": "general.add_option("
    },
    {
        "line": 209,
        "fullcodeline": "general.add_option("
    },
    {
        "line": 215,
        "fullcodeline": "general.add_option("
    },
    {
        "line": 219,
        "fullcodeline": "general.add_option("
    },
    {
        "line": 223,
        "fullcodeline": "general.add_option("
    },
    {
        "line": 227,
        "fullcodeline": "general.add_option("
    },
    {
        "line": 234,
        "fullcodeline": "general.add_option("
    },
    {
        "line": 248,
        "fullcodeline": "general.add_option("
    },
    {
        "line": 271,
        "fullcodeline": "general.add_option("
    },
    {
        "line": 284,
        "fullcodeline": "network = optparse.OptionGroup(parser, 'Network Options')"
    },
    {
        "line": 285,
        "fullcodeline": "network.add_option("
    },
    {
        "line": 291,
        "fullcodeline": "network.add_option("
    },
    {
        "line": 295,
        "fullcodeline": "network.add_option("
    },
    {
        "line": 300,
        "fullcodeline": "network.add_option("
    },
    {
        "line": 308,
        "fullcodeline": "network.add_option("
    },
    {
        "line": 313,
        "fullcodeline": "network.add_option("
    },
    {
        "line": 318,
        "fullcodeline": "network.add_option("
    },
    {
        "line": 323,
        "fullcodeline": "network.add_option("
    },
    {
        "line": 329,
        "fullcodeline": "geo = optparse.OptionGroup(parser, 'Geo-restriction')"
    },
    {
        "line": 330,
        "fullcodeline": "geo.add_option("
    },
    {
        "line": 336,
        "fullcodeline": "geo.add_option("
    },
    {
        "line": 340,
        "fullcodeline": "geo.add_option("
    },
    {
        "line": 347,
        "fullcodeline": "geo.add_option("
    },
    {
        "line": 351,
        "fullcodeline": "geo.add_option("
    },
    {
        "line": 355,
        "fullcodeline": "geo.add_option("
    },
    {
        "line": 358,
        "fullcodeline": "geo.add_option("
    },
    {
        "line": 362,
        "fullcodeline": "selection = optparse.OptionGroup(parser, 'Video Selection')"
    },
    {
        "line": 363,
        "fullcodeline": "selection.add_option("
    },
    {
        "line": 367,
        "fullcodeline": "selection.add_option("
    },
    {
        "line": 371,
        "fullcodeline": "selection.add_option("
    },
    {
        "line": 379,
        "fullcodeline": "selection.add_option("
    },
    {
        "line": 383,
        "fullcodeline": "selection.add_option("
    },
    {
        "line": 387,
        "fullcodeline": "selection.add_option("
    },
    {
        "line": 391,
        "fullcodeline": "selection.add_option("
    },
    {
        "line": 395,
        "fullcodeline": "selection.add_option("
    },
    {
        "line": 402,
        "fullcodeline": "selection.add_option("
    },
    {
        "line": 408,
        "fullcodeline": "selection.add_option("
    },
    {
        "line": 414,
        "fullcodeline": "selection.add_option("
    },
    {
        "line": 418,
        "fullcodeline": "selection.add_option("
    },
    {
        "line": 422,
        "fullcodeline": "selection.add_option("
    },
    {
        "line": 437,
        "fullcodeline": "selection.add_option("
    },
    {
        "line": 441,
        "fullcodeline": "selection.add_option("
    },
    {
        "line": 445,
        "fullcodeline": "selection.add_option("
    },
    {
        "line": 449,
        "fullcodeline": "selection.add_option("
    },
    {
        "line": 453,
        "fullcodeline": "selection.add_option("
    },
    {
        "line": 457,
        "fullcodeline": "selection.add_option("
    },
    {
        "line": 461,
        "fullcodeline": "selection.add_option("
    },
    {
        "line": 465,
        "fullcodeline": "selection.add_option("
    },
    {
        "line": 469,
        "fullcodeline": "selection.add_option("
    },
    {
        "line": 473,
        "fullcodeline": "selection.add_option("
    },
    {
        "line": 477,
        "fullcodeline": "selection.add_option("
    },
    {
        "line": 481,
        "fullcodeline": "selection.add_option("
    },
    {
        "line": 485,
        "fullcodeline": "selection.add_option("
    },
    {
        "line": 489,
        "fullcodeline": "selection.add_option("
    },
    {
        "line": 493,
        "fullcodeline": "selection.add_option("
    },
    {
        "line": 497,
        "fullcodeline": "selection.add_option("
    },
    {
        "line": 501,
        "fullcodeline": "selection.add_option("
    },
    {
        "line": 506,
        "fullcodeline": "authentication = optparse.OptionGroup(parser, 'Authentication Options')"
    },
    {
        "line": 507,
        "fullcodeline": "authentication.add_option("
    },
    {
        "line": 511,
        "fullcodeline": "authentication.add_option("
    },
    {
        "line": 515,
        "fullcodeline": "authentication.add_option("
    },
    {
        "line": 519,
        "fullcodeline": "authentication.add_option("
    },
    {
        "line": 523,
        "fullcodeline": "authentication.add_option("
    },
    {
        "line": 527,
        "fullcodeline": "authentication.add_option("
    },
    {
        "line": 531,
        "fullcodeline": "authentication.add_option("
    },
    {
        "line": 535,
        "fullcodeline": "authentication.add_option("
    },
    {
        "line": 539,
        "fullcodeline": "authentication.add_option("
    },
    {
        "line": 543,
        "fullcodeline": "authentication.add_option("
    },
    {
        "line": 547,
        "fullcodeline": "authentication.add_option("
    },
    {
        "line": 551,
        "fullcodeline": "authentication.add_option("
    },
    {
        "line": 555,
        "fullcodeline": "authentication.add_option("
    },
    {
        "line": 559,
        "fullcodeline": "authentication.add_option("
    },
    {
        "line": 565,
        "fullcodeline": "video_format = optparse.OptionGroup(parser, 'Video Format Options')"
    },
    {
        "line": 566,
        "fullcodeline": "video_format.add_option("
    },
    {
        "line": 570,
        "fullcodeline": "video_format.add_option("
    },
    {
        "line": 575,
        "fullcodeline": "video_format.add_option("
    },
    {
        "line": 581,
        "fullcodeline": "video_format.add_option("
    },
    {
        "line": 585,
        "fullcodeline": "video_format.add_option("
    },
    {
        "line": 589,
        "fullcodeline": "video_format.add_option("
    },
    {
        "line": 593,
        "fullcodeline": "video_format.add_option("
    },
    {
        "line": 597,
        "fullcodeline": "video_format.add_option("
    },
    {
        "line": 601,
        "fullcodeline": "video_format.add_option("
    },
    {
        "line": 605,
        "fullcodeline": "video_format.add_option("
    },
    {
        "line": 611,
        "fullcodeline": "video_format.add_option("
    },
    {
        "line": 615,
        "fullcodeline": "video_format.add_option("
    },
    {
        "line": 619,
        "fullcodeline": "video_format.add_option("
    },
    {
        "line": 623,
        "fullcodeline": "video_format.add_option("
    },
    {
        "line": 627,
        "fullcodeline": "video_format.add_option("
    },
    {
        "line": 631,
        "fullcodeline": "video_format.add_option("
    },
    {
        "line": 635,
        "fullcodeline": "video_format.add_option("
    },
    {
        "line": 639,
        "fullcodeline": "video_format.add_option("
    },
    {
        "line": 646,
        "fullcodeline": "video_format.add_option("
    },
    {
        "line": 650,
        "fullcodeline": "video_format.add_option("
    },
    {
        "line": 655,
        "fullcodeline": "subtitles = optparse.OptionGroup(parser, 'Subtitle Options')"
    },
    {
        "line": 656,
        "fullcodeline": "subtitles.add_option("
    },
    {
        "line": 660,
        "fullcodeline": "subtitles.add_option("
    },
    {
        "line": 664,
        "fullcodeline": "subtitles.add_option("
    },
    {
        "line": 668,
        "fullcodeline": "subtitles.add_option("
    },
    {
        "line": 672,
        "fullcodeline": "subtitles.add_option("
    },
    {
        "line": 676,
        "fullcodeline": "subtitles.add_option("
    },
    {
        "line": 680,
        "fullcodeline": "subtitles.add_option("
    },
    {
        "line": 684,
        "fullcodeline": "subtitles.add_option("
    },
    {
        "line": 693,
        "fullcodeline": "downloader = optparse.OptionGroup(parser, 'Download Options')"
    },
    {
        "line": 694,
        "fullcodeline": "downloader.add_option("
    },
    {
        "line": 698,
        "fullcodeline": "downloader.add_option("
    },
    {
        "line": 702,
        "fullcodeline": "downloader.add_option("
    },
    {
        "line": 706,
        "fullcodeline": "downloader.add_option("
    },
    {
        "line": 710,
        "fullcodeline": "downloader.add_option("
    },
    {
        "line": 714,
        "fullcodeline": "downloader.add_option("
    },
    {
        "line": 718,
        "fullcodeline": "downloader.add_option("
    },
    {
        "line": 731,
        "fullcodeline": "downloader.add_option("
    },
    {
        "line": 735,
        "fullcodeline": "downloader.add_option("
    },
    {
        "line": 739,
        "fullcodeline": "downloader.add_option("
    },
    {
        "line": 743,
        "fullcodeline": "downloader.add_option("
    },
    {
        "line": 747,
        "fullcodeline": "downloader.add_option("
    },
    {
        "line": 751,
        "fullcodeline": "downloader.add_option("
    },
    {
        "line": 755,
        "fullcodeline": "downloader.add_option("
    },
    {
        "line": 759,
        "fullcodeline": "downloader.add_option("
    },
    {
        "line": 765,
        "fullcodeline": "downloader.add_option("
    },
    {
        "line": 769,
        "fullcodeline": "downloader.add_option("
    },
    {
        "line": 773,
        "fullcodeline": "downloader.add_option("
    },
    {
        "line": 777,
        "fullcodeline": "downloader.add_option("
    },
    {
        "line": 781,
        "fullcodeline": "downloader.add_option("
    },
    {
        "line": 785,
        "fullcodeline": "downloader.add_option("
    },
    {
        "line": 789,
        "fullcodeline": "downloader.add_option("
    },
    {
        "line": 793,
        "fullcodeline": "downloader.add_option("
    },
    {
        "line": 797,
        "fullcodeline": "downloader.add_option("
    },
    {
        "line": 801,
        "fullcodeline": "downloader.add_option("
    },
    {
        "line": 809,
        "fullcodeline": "downloader.add_option("
    },
    {
        "line": 815,
        "fullcodeline": "downloader.add_option("
    },
    {
        "line": 824,
        "fullcodeline": "downloader.add_option("
    },
    {
        "line": 840,
        "fullcodeline": "downloader.add_option("
    },
    {
        "line": 855,
        "fullcodeline": "workarounds = optparse.OptionGroup(parser, 'Workarounds')"
    },
    {
        "line": 856,
        "fullcodeline": "workarounds.add_option("
    },
    {
        "line": 860,
        "fullcodeline": "workarounds.add_option("
    },
    {
        "line": 864,
        "fullcodeline": "workarounds.add_option("
    },
    {
        "line": 868,
        "fullcodeline": "workarounds.add_option("
    },
    {
        "line": 872,
        "fullcodeline": "workarounds.add_option("
    },
    {
        "line": 876,
        "fullcodeline": "workarounds.add_option("
    },
    {
        "line": 880,
        "fullcodeline": "workarounds.add_option("
    },
    {
        "line": 887,
        "fullcodeline": "workarounds.add_option("
    },
    {
        "line": 891,
        "fullcodeline": "workarounds.add_option("
    },
    {
        "line": 895,
        "fullcodeline": "workarounds.add_option("
    },
    {
        "line": 902,
        "fullcodeline": "workarounds.add_option("
    },
    {
        "line": 906,
        "fullcodeline": "workarounds.add_option("
    },
    {
        "line": 911,
        "fullcodeline": "verbosity = optparse.OptionGroup(parser, 'Verbosity and Simulation Options')"
    },
    {
        "line": 912,
        "fullcodeline": "verbosity.add_option("
    },
    {
        "line": 916,
        "fullcodeline": "verbosity.add_option("
    },
    {
        "line": 920,
        "fullcodeline": "verbosity.add_option("
    },
    {
        "line": 924,
        "fullcodeline": "verbosity.add_option("
    },
    {
        "line": 928,
        "fullcodeline": "verbosity.add_option("
    },
    {
        "line": 932,
        "fullcodeline": "verbosity.add_option("
    },
    {
        "line": 938,
        "fullcodeline": "verbosity.add_option("
    },
    {
        "line": 942,
        "fullcodeline": "verbosity.add_option("
    },
    {
        "line": 946,
        "fullcodeline": "verbosity.add_option("
    },
    {
        "line": 954,
        "fullcodeline": "verbosity.add_option("
    },
    {
        "line": 960,
        "fullcodeline": "verbosity.add_option("
    },
    {
        "line": 964,
        "fullcodeline": "verbosity.add_option("
    },
    {
        "line": 968,
        "fullcodeline": "verbosity.add_option("
    },
    {
        "line": 972,
        "fullcodeline": "verbosity.add_option("
    },
    {
        "line": 976,
        "fullcodeline": "verbosity.add_option("
    },
    {
        "line": 980,
        "fullcodeline": "verbosity.add_option("
    },
    {
        "line": 984,
        "fullcodeline": "verbosity.add_option("
    },
    {
        "line": 988,
        "fullcodeline": "verbosity.add_option("
    },
    {
        "line": 992,
        "fullcodeline": "verbosity.add_option("
    },
    {
        "line": 998,
        "fullcodeline": "verbosity.add_option("
    },
    {
        "line": 1004,
        "fullcodeline": "verbosity.add_option("
    },
    {
        "line": 1008,
        "fullcodeline": "verbosity.add_option("
    },
    {
        "line": 1014,
        "fullcodeline": "verbosity.add_option("
    },
    {
        "line": 1018,
        "fullcodeline": "verbosity.add_option("
    },
    {
        "line": 1022,
        "fullcodeline": "verbosity.add_option("
    },
    {
        "line": 1026,
        "fullcodeline": "verbosity.add_option("
    },
    {
        "line": 1030,
        "fullcodeline": "verbosity.add_option("
    },
    {
        "line": 1044,
        "fullcodeline": "verbosity.add_option("
    },
    {
        "line": 1048,
        "fullcodeline": "verbosity.add_option("
    },
    {
        "line": 1052,
        "fullcodeline": "verbosity.add_option("
    },
    {
        "line": 1056,
        "fullcodeline": "verbosity.add_option("
    },
    {
        "line": 1060,
        "fullcodeline": "verbosity.add_option("
    },
    {
        "line": 1064,
        "fullcodeline": "verbosity.add_option("
    },
    {
        "line": 1068,
        "fullcodeline": "verbosity.add_option("
    },
    {
        "line": 1072,
        "fullcodeline": "verbosity.add_option("
    },
    {
        "line": 1077,
        "fullcodeline": "verbosity.add_option("
    },
    {
        "line": 1083,
        "fullcodeline": "filesystem = optparse.OptionGroup(parser, 'Filesystem Options')"
    },
    {
        "line": 1084,
        "fullcodeline": "filesystem.add_option("
    },
    {
        "line": 1090,
        "fullcodeline": "filesystem.add_option("
    },
    {
        "line": 1094,
        "fullcodeline": "filesystem.add_option("
    },
    {
        "line": 1097,
        "fullcodeline": "filesystem.add_option("
    },
    {
        "line": 1112,
        "fullcodeline": "filesystem.add_option("
    },
    {
        "line": 1120,
        "fullcodeline": "filesystem.add_option("
    },
    {
        "line": 1124,
        "fullcodeline": "filesystem.add_option("
    },
    {
        "line": 1128,
        "fullcodeline": "filesystem.add_option("
    },
    {
        "line": 1132,
        "fullcodeline": "filesystem.add_option("
    },
    {
        "line": 1136,
        "fullcodeline": "filesystem.add_option("
    },
    {
        "line": 1140,
        "fullcodeline": "filesystem.add_option("
    },
    {
        "line": 1144,
        "fullcodeline": "filesystem.add_option("
    },
    {
        "line": 1148,
        "fullcodeline": "filesystem.add_option("
    },
    {
        "line": 1152,
        "fullcodeline": "filesystem.add_option("
    },
    {
        "line": 1156,
        "fullcodeline": "filesystem.add_option("
    },
    {
        "line": 1160,
        "fullcodeline": "filesystem.add_option("
    },
    {
        "line": 1164,
        "fullcodeline": "filesystem.add_option("
    },
    {
        "line": 1168,
        "fullcodeline": "filesystem.add_option("
    },
    {
        "line": 1174,
        "fullcodeline": "filesystem.add_option("
    },
    {
        "line": 1178,
        "fullcodeline": "filesystem.add_option("
    },
    {
        "line": 1182,
        "fullcodeline": "filesystem.add_option("
    },
    {
        "line": 1186,
        "fullcodeline": "filesystem.add_option("
    },
    {
        "line": 1190,
        "fullcodeline": "filesystem.add_option("
    },
    {
        "line": 1194,
        "fullcodeline": "filesystem.add_option("
    },
    {
        "line": 1198,
        "fullcodeline": "filesystem.add_option("
    },
    {
        "line": 1202,
        "fullcodeline": "filesystem.add_option("
    },
    {
        "line": 1206,
        "fullcodeline": "filesystem.add_option("
    },
    {
        "line": 1210,
        "fullcodeline": "filesystem.add_option("
    },
    {
        "line": 1214,
        "fullcodeline": "filesystem.add_option("
    },
    {
        "line": 1220,
        "fullcodeline": "filesystem.add_option("
    },
    {
        "line": 1224,
        "fullcodeline": "filesystem.add_option("
    },
    {
        "line": 1229,
        "fullcodeline": "filesystem.add_option("
    },
    {
        "line": 1233,
        "fullcodeline": "filesystem.add_option("
    },
    {
        "line": 1239,
        "fullcodeline": "filesystem.add_option("
    },
    {
        "line": 1243,
        "fullcodeline": "filesystem.add_option("
    },
    {
        "line": 1247,
        "fullcodeline": "filesystem.add_option("
    },
    {
        "line": 1251,
        "fullcodeline": "filesystem.add_option("
    },
    {
        "line": 1255,
        "fullcodeline": "filesystem.add_option("
    },
    {
        "line": 1267,
        "fullcodeline": "filesystem.add_option("
    },
    {
        "line": 1271,
        "fullcodeline": "filesystem.add_option("
    },
    {
        "line": 1276,
        "fullcodeline": "filesystem.add_option("
    },
    {
        "line": 1279,
        "fullcodeline": "filesystem.add_option("
    },
    {
        "line": 1284,
        "fullcodeline": "thumbnail = optparse.OptionGroup(parser, 'Thumbnail Options')"
    },
    {
        "line": 1285,
        "fullcodeline": "thumbnail.add_option("
    },
    {
        "line": 1292,
        "fullcodeline": "thumbnail.add_option("
    },
    {
        "line": 1296,
        "fullcodeline": "thumbnail.add_option("
    },
    {
        "line": 1300,
        "fullcodeline": "thumbnail.add_option("
    },
    {
        "line": 1305,
        "fullcodeline": "link = optparse.OptionGroup(parser, 'Internet Shortcut Options')"
    },
    {
        "line": 1306,
        "fullcodeline": "link.add_option("
    },
    {
        "line": 1310,
        "fullcodeline": "link.add_option("
    },
    {
        "line": 1314,
        "fullcodeline": "link.add_option("
    },
    {
        "line": 1318,
        "fullcodeline": "link.add_option("
    },
    {
        "line": 1323,
        "fullcodeline": "postproc = optparse.OptionGroup(parser, 'Post-Processing Options')"
    },
    {
        "line": 1324,
        "fullcodeline": "postproc.add_option("
    },
    {
        "line": 1328,
        "fullcodeline": "postproc.add_option("
    },
    {
        "line": 1334,
        "fullcodeline": "postproc.add_option("
    },
    {
        "line": 1340,
        "fullcodeline": "postproc.add_option("
    },
    {
        "line": 1348,
        "fullcodeline": "postproc.add_option("
    },
    {
        "line": 1352,
        "fullcodeline": "postproc.add_option("
    },
    {
        "line": 1375,
        "fullcodeline": "postproc.add_option("
    },
    {
        "line": 1379,
        "fullcodeline": "postproc.add_option("
    },
    {
        "line": 1383,
        "fullcodeline": "postproc.add_option("
    },
    {
        "line": 1387,
        "fullcodeline": "postproc.add_option("
    },
    {
        "line": 1391,
        "fullcodeline": "postproc.add_option("
    },
    {
        "line": 1395,
        "fullcodeline": "postproc.add_option("
    },
    {
        "line": 1399,
        "fullcodeline": "postproc.add_option("
    },
    {
        "line": 1403,
        "fullcodeline": "postproc.add_option("
    },
    {
        "line": 1407,
        "fullcodeline": "postproc.add_option("
    },
    {
        "line": 1413,
        "fullcodeline": "postproc.add_option("
    },
    {
        "line": 1417,
        "fullcodeline": "postproc.add_option("
    },
    {
        "line": 1421,
        "fullcodeline": "postproc.add_option("
    },
    {
        "line": 1425,
        "fullcodeline": "postproc.add_option("
    },
    {
        "line": 1429,
        "fullcodeline": "postproc.add_option("
    },
    {
        "line": 1433,
        "fullcodeline": "postproc.add_option("
    },
    {
        "line": 1437,
        "fullcodeline": "postproc.add_option("
    },
    {
        "line": 1443,
        "fullcodeline": "postproc.add_option("
    },
    {
        "line": 1449,
        "fullcodeline": "postproc.add_option("
    },
    {
        "line": 1453,
        "fullcodeline": "postproc.add_option("
    },
    {
        "line": 1463,
        "fullcodeline": "postproc.add_option("
    },
    {
        "line": 1472,
        "fullcodeline": "postproc.add_option("
    },
    {
        "line": 1476,
        "fullcodeline": "postproc.add_option("
    },
    {
        "line": 1480,
        "fullcodeline": "postproc.add_option("
    },
    {
        "line": 1484,
        "fullcodeline": "postproc.add_option("
    },
    {
        "line": 1493,
        "fullcodeline": "postproc.add_option("
    },
    {
        "line": 1497,
        "fullcodeline": "postproc.add_option("
    },
    {
        "line": 1501,
        "fullcodeline": "postproc.add_option("
    },
    {
        "line": 1505,
        "fullcodeline": "postproc.add_option("
    },
    {
        "line": 1511,
        "fullcodeline": "postproc.add_option("
    },
    {
        "line": 1518,
        "fullcodeline": "postproc.add_option("
    },
    {
        "line": 1525,
        "fullcodeline": "postproc.add_option("
    },
    {
        "line": 1529,
        "fullcodeline": "postproc.add_option("
    },
    {
        "line": 1535,
        "fullcodeline": "postproc.add_option("
    },
    {
        "line": 1538,
        "fullcodeline": "postproc.add_option("
    },
    {
        "line": 1544,
        "fullcodeline": "postproc.add_option("
    },
    {
        "line": 1548,
        "fullcodeline": "_postprocessor_opts_parser = lambda key, val='': ("
    },
    {
        "line": 1551,
        "fullcodeline": "postproc.add_option("
    },
    {
        "line": 1571,
        "fullcodeline": "sponsorblock = optparse.OptionGroup(parser, 'SponsorBlock Options', description=("
    },
    {
        "line": 1574,
        "fullcodeline": "sponsorblock.add_option("
    },
    {
        "line": 1585,
        "fullcodeline": "sponsorblock.add_option("
    },
    {
        "line": 1600,
        "fullcodeline": "sponsorblock.add_option("
    },
    {
        "line": 1607,
        "fullcodeline": "sponsorblock.add_option("
    },
    {
        "line": 1611,
        "fullcodeline": "sponsorblock.add_option("
    },
    {
        "line": 1616,
        "fullcodeline": "sponsorblock.add_option("
    },
    {
        "line": 1620,
        "fullcodeline": "sponsorblock.add_option("
    },
    {
        "line": 1624,
        "fullcodeline": "sponsorblock.add_option("
    },
    {
        "line": 1628,
        "fullcodeline": "sponsorblock.add_option("
    },
    {
        "line": 1632,
        "fullcodeline": "sponsorblock.add_option("
    },
    {
        "line": 1636,
        "fullcodeline": "sponsorblock.add_option("
    },
    {
        "line": 1640,
        "fullcodeline": "sponsorblock.add_option("
    },
    {
        "line": 1644,
        "fullcodeline": "sponsorblock.add_option("
    },
    {
        "line": 1648,
        "fullcodeline": "extractor = optparse.OptionGroup(parser, 'Extractor Options')"
    },
    {
        "line": 1649,
        "fullcodeline": "extractor.add_option("
    },
    {
        "line": 1653,
        "fullcodeline": "extractor.add_option("
    },
    {
        "line": 1657,
        "fullcodeline": "extractor.add_option("
    },
    {
        "line": 1661,
        "fullcodeline": "extractor.add_option("
    },
    {
        "line": 1666,
        "fullcodeline": "extractor.add_option("
    },
    {
        "line": 1670,
        "fullcodeline": "_extractor_arg_parser = lambda key, vals='': (key.strip().lower().replace('-', '_'), ["
    },
    {
        "line": 1672,
        "fullcodeline": "extractor.add_option("
    },
    {
        "line": 1683,
        "fullcodeline": "extractor.add_option("
    },
    {
        "line": 1687,
        "fullcodeline": "extractor.add_option("
    },
    {
        "line": 1691,
        "fullcodeline": "extractor.add_option("
    },
    {
        "line": 1695,
        "fullcodeline": "extractor.add_option("
    },
    {
        "line": 1700,
        "fullcodeline": "parser.add_option_group(general)"
    },
    {
        "line": 1701,
        "fullcodeline": "parser.add_option_group(network)"
    },
    {
        "line": 1702,
        "fullcodeline": "parser.add_option_group(geo)"
    },
    {
        "line": 1703,
        "fullcodeline": "parser.add_option_group(selection)"
    },
    {
        "line": 1704,
        "fullcodeline": "parser.add_option_group(downloader)"
    },
    {
        "line": 1705,
        "fullcodeline": "parser.add_option_group(filesystem)"
    },
    {
        "line": 1706,
        "fullcodeline": "parser.add_option_group(thumbnail)"
    },
    {
        "line": 1707,
        "fullcodeline": "parser.add_option_group(link)"
    },
    {
        "line": 1708,
        "fullcodeline": "parser.add_option_group(verbosity)"
    },
    {
        "line": 1709,
        "fullcodeline": "parser.add_option_group(workarounds)"
    },
    {
        "line": 1710,
        "fullcodeline": "parser.add_option_group(video_format)"
    },
    {
        "line": 1711,
        "fullcodeline": "parser.add_option_group(subtitles)"
    },
    {
        "line": 1712,
        "fullcodeline": "parser.add_option_group(authentication)"
    },
    {
        "line": 1713,
        "fullcodeline": "parser.add_option_group(postproc)"
    },
    {
        "line": 1714,
        "fullcodeline": "parser.add_option_group(sponsorblock)"
    },
    {
        "line": 1715,
        "fullcodeline": "parser.add_option_group(extractor)"
    },
    {
        "line": 113,
        "fullcodeline": "help=format_field("
    },
    {
        "line": 124,
        "fullcodeline": "'Upgrade/downgrade to a specific version. CHANNEL can be a repository as well. '"
    },
    {
        "line": 156,
        "fullcodeline": "'Extractor names to use separated by commas. '"
    },
    {
        "line": 169,
        "fullcodeline": "'Use this prefix for unqualified URLs. '"
    },
    {
        "line": 178,
        "fullcodeline": "'Don\\'t load any more configuration files except those given to --config-locations. '"
    },
    {
        "line": 185,
        "fullcodeline": "'Do not load any custom configuration files (default). When given inside a '"
    },
    {
        "line": 191,
        "fullcodeline": "'Location of the main configuration file; either the path to the config or its containing directory '"
    },
    {
        "line": 213,
        "fullcodeline": "'Wait for scheduled streams to become available. '"
    },
    {
        "line": 243,
        "fullcodeline": "'Whether to emit color codes in output, optionally prefixed by '"
    },
    {
        "line": 268,
        "fullcodeline": "'Options that can help keep compatibility with youtube-dl or youtube-dlc '"
    },
    {
        "line": 275,
        "fullcodeline": "'Create aliases for an option string. Unless an alias starts with a dash \"-\", it is prefixed with \"--\". '"
    },
    {
        "line": 289,
        "fullcodeline": "'Use the specified HTTP/HTTPS/SOCKS proxy. To enable SOCKS proxy, specify a proper scheme, '"
    },
    {
        "line": 304,
        "fullcodeline": "'Client to impersonate for requests. E.g. chrome, chrome-110, chrome:windows-10. '"
    },
    {
        "line": 334,
        "fullcodeline": "'Use this proxy to verify the IP address for some geo-restricted sites. '"
    },
    {
        "line": 344,
        "fullcodeline": "'How to fake X-Forwarded-For HTTP header to try bypassing geographic restriction. '"
    },
    {
        "line": 375,
        "fullcodeline": "'Comma separated playlist_index of the items to download. '"
    },
    {
        "line": 399,
        "fullcodeline": "'Download only videos uploaded on this date. '"
    },
    {
        "line": 406,
        "fullcodeline": "'Download only videos uploaded on or before this date. '"
    },
    {
        "line": 412,
        "fullcodeline": "'Download only videos uploaded on or after this date. '"
    },
    {
        "line": 426,
        "fullcodeline": "'Generic video filter. Any \"OUTPUT TEMPLATE\" field can be compared with a '"
    },
    {
        "line": 562,
        "fullcodeline": "help='Password for client certificate private key, if encrypted. '"
    },
    {
        "line": 579,
        "fullcodeline": "'Force user specified sort order to have precedence over all fields, '"
    },
    {
        "line": 609,
        "fullcodeline": "'Prefer video formats with free containers over non-free ones of same quality. '"
    },
    {
        "line": 643,
        "fullcodeline": "'Containers that may be used when merging formats, separated by \"/\", e.g. \"mp4/mkv\". '"
    },
    {
        "line": 689,
        "fullcodeline": "'Languages of the subtitles to download (can be regex) or \"all\" separated by commas, e.g. --sub-langs \"en.*,ja\". '"
    },
    {
        "line": 726,
        "fullcodeline": "'Time to sleep between retries in seconds (optionally) prefixed by the type of retry '"
    },
    {
        "line": 763,
        "fullcodeline": "'Size of a chunk for chunk-based HTTP downloading, e.g. 10485760 or 10M (default is disabled). '"
    },
    {
        "line": 805,
        "fullcodeline": "'Use the mpegts container for HLS videos; '"
    },
    {
        "line": 813,
        "fullcodeline": "'Do not use the mpegts container for HLS videos. '"
    },
    {
        "line": 819,
        "fullcodeline": "'Download only chapters that match the regular expression. '"
    },
    {
        "line": 833,
        "fullcodeline": "'Name or path of the external downloader to use (optionally) prefixed by '"
    },
    {
        "line": 849,
        "fullcodeline": "'Give these arguments to the external downloader. '"
    },
    {
        "line": 899,
        "fullcodeline": "'Number of seconds to sleep before each download. '"
    },
    {
        "line": 936,
        "fullcodeline": "'Ignore \"No video formats\" error. Useful for extracting metadata '"
    },
    {
        "line": 950,
        "fullcodeline": "'Field name or output template to print to screen, optionally prefixed with when to print it, separated by a \":\". '"
    },
    {
        "line": 958,
        "fullcodeline": "'Append given template to the file. The values of WHEN and TEMPLATE are same as that of --print. '"
    },
    {
        "line": 996,
        "fullcodeline": "'Quiet, but print JSON information for each video. Simulate unless --no-simulate is used. '"
    },
    {
        "line": 1002,
        "fullcodeline": "'Quiet, but print JSON information for each url or infojson passed. Simulate unless --no-simulate is used. '"
    },
    {
        "line": 1012,
        "fullcodeline": "'Force download archive entries to be written as far as no errors occur, '"
    },
    {
        "line": 1038,
        "fullcodeline": "'Template for progress outputs, optionally prefixed with one of \"download:\" (default), '"
    },
    {
        "line": 1088,
        "fullcodeline": "'File containing URLs to download (\"-\" for stdin), one URL per line. '"
    },
    {
        "line": 1105,
        "fullcodeline": "'The paths where the files should be downloaded. '"
    },
    {
        "line": 1172,
        "fullcodeline": "'Do not resume partially downloaded fragments. '"
    },
    {
        "line": 1218,
        "fullcodeline": "'Write playlist metadata in addition to the video metadata '"
    },
    {
        "line": 1237,
        "fullcodeline": "'Retrieve video comments to be placed in the infojson. '"
    },
    {
        "line": 1259,
        "fullcodeline": "'The name of the browser to load cookies from. '"
    },
    {
        "line": 1274,
        "fullcodeline": "'Location in the filesystem where yt-dlp can store some downloaded information '"
    },
    {
        "line": 1331,
        "fullcodeline": "'Format to convert the audio to when -x is used. '"
    },
    {
        "line": 1338,
        "fullcodeline": "'Specify ffmpeg audio quality to use when converting the audio with -x. '"
    },
    {
        "line": 1344,
        "fullcodeline": "'Remux the video into another container if necessary '"
    },
    {
        "line": 1362,
        "fullcodeline": "'Give these arguments to the postprocessors. '"
    },
    {
        "line": 1411,
        "fullcodeline": "'Embed metadata to the video file. Also embeds chapters/infojson if present '"
    },
    {
        "line": 1441,
        "fullcodeline": "'Parse additional metadata like title/artist from other fields; see \"MODIFYING METADATA\" for details. '"
    },
    {
        "line": 1447,
        "fullcodeline": "'Replace text in a metadata field using the given regex. This option can be used multiple times. '"
    },
    {
        "line": 1456,
        "fullcodeline": "choices=('never', 'always', 'multi_video'),"
    },
    {
        "line": 1458,
        "fullcodeline": "'Concatenate videos in a playlist. One of \"never\", \"always\", or '"
    },
    {
        "line": 1466,
        "fullcodeline": "choices=('never', 'ignore', 'warn', 'detect_or_warn', 'force'),"
    },
    {
        "line": 1468,
        "fullcodeline": "'Automatically correct known faults of the file. '"
    },
    {
        "line": 1488,
        "fullcodeline": "'Execute a command, optionally prefixed with when to execute it, separated by a \":\". '"
    },
    {
        "line": 1515,
        "fullcodeline": "'Convert the thumbnails to another format '"
    },
    {
        "line": 1522,
        "fullcodeline": "'Split video into multiple files based on internal chapters. '"
    },
    {
        "line": 1533,
        "fullcodeline": "'Remove chapters whose title matches the given regular expression. '"
    },
    {
        "line": 1542,
        "fullcodeline": "'Force keyframes at cuts when downloading/splitting/removing sections. '"
    },
    {
        "line": 1559,
        "fullcodeline": "'The (case sensitive) name of plugin postprocessors to be enabled, '"
    },
    {
        "line": 1581,
        "fullcodeline": "'SponsorBlock categories to create chapters for, separated by commas. '"
    },
    {
        "line": 1595,
        "fullcodeline": "'SponsorBlock categories to be removed from the video file, separated by commas. '"
    },
    {
        "line": 1604,
        "fullcodeline": "'An output template for the title of the SponsorBlock chapters created by --sponsorblock-mark. '"
    },
    {
        "line": 1681,
        "fullcodeline": "'Pass ARGS arguments to the IE_KEY extractor. See \"EXTRACTOR ARGUMENTS\" for details. '"
    },
    {
        "line": 115,
        "fullcodeline": "default=f'Update this program to the latest {CHANNEL} version'))"
    },
    {
        "line": 125,
        "fullcodeline": "f'CHANNEL and TAG default to \"{CHANNEL.partition(\"@\")[0]}\" and \"latest\" respectively if omitted; '"
    },
    {
        "line": 126,
        "fullcodeline": "f'See \"UPDATE\" for details. Supported channels: {\", \".join(UPDATE_SOURCES)}'))"
    },
    {
        "line": 229,
        "fullcodeline": "action='store_const', dest='color', const={"
    },
    {
        "line": 236,
        "fullcodeline": "dest='color', metavar='[STREAM:]POLICY', default={}, type='str',"
    },
    {
        "line": 238,
        "fullcodeline": "callback_kwargs={"
    },
    {
        "line": 252,
        "fullcodeline": "callback_kwargs={"
    },
    {
        "line": 281,
        "fullcodeline": "f'As a safety measure, each alias may be triggered a maximum of {_YoutubeDLOptionParser.ALIAS_TRIGGER_LIMIT} times. '"
    },
    {
        "line": 573,
        "fullcodeline": "callback=_list_from_options_callback, callback_kwargs={'append': -1},"
    },
    {
        "line": 645,
        "fullcodeline": "f'(currently supported: {\", \".join(sorted(FFmpegMergerPP.SUPPORTED_EXTS))})'))"
    },
    {
        "line": 720,
        "fullcodeline": "dest='retry_sleep', metavar='[TYPE:]EXPR', default={}, type='str',"
    },
    {
        "line": 722,
        "fullcodeline": "callback_kwargs={"
    },
    {
        "line": 826,
        "fullcodeline": "dest='external_downloader', metavar='[PROTO:]NAME', default={}, type='str',"
    },
    {
        "line": 828,
        "fullcodeline": "callback_kwargs={"
    },
    {
        "line": 835,
        "fullcodeline": "f'Currently supports native, {\", \".join(sorted(list_external_downloaders()))}. '"
    },
    {
        "line": 842,
        "fullcodeline": "metavar='NAME:ARGS', dest='external_downloader_args', default={}, type='str',"
    },
    {
        "line": 844,
        "fullcodeline": "callback_kwargs={"
    },
    {
        "line": 882,
        "fullcodeline": "metavar='FIELD:VALUE', dest='headers', default={}, type='str',"
    },
    {
        "line": 884,
        "fullcodeline": "callback_kwargs={'multiple_keys': False},"
    },
    {
        "line": 1032,
        "fullcodeline": "metavar='[TYPES:]TEMPLATE', dest='progress_template', default={}, type='str',"
    },
    {
        "line": 1034,
        "fullcodeline": "callback_kwargs={"
    },
    {
        "line": 1099,
        "fullcodeline": "metavar='[TYPES:]PATH', dest='paths', default={}, type='str',"
    },
    {
        "line": 1101,
        "fullcodeline": "callback_kwargs={"
    },
    {
        "line": 1114,
        "fullcodeline": "metavar='[TYPES:]TEMPLATE', dest='outtmpl', default={}, type='str',"
    },
    {
        "line": 1116,
        "fullcodeline": "callback_kwargs={"
    },
    {
        "line": 1260,
        "fullcodeline": "f'Currently supported browsers are: {\", \".join(sorted(SUPPORTED_BROWSERS))}. '"
    },
    {
        "line": 1266,
        "fullcodeline": "f'Currently supported keyrings are: {\", \".join(map(str.lower, sorted(SUPPORTED_KEYRINGS)))}'))"
    },
    {
        "line": 1332,
        "fullcodeline": "f'(currently supported: best (default), {\", \".join(sorted(FFmpegExtractAudioPP.SUPPORTED_EXTS))}). '"
    },
    {
        "line": 1345,
        "fullcodeline": "f'(currently supported: {\", \".join(FFmpegVideoRemuxerPP.SUPPORTED_EXTS)}). '"
    },
    {
        "line": 1354,
        "fullcodeline": "metavar='NAME:ARGS', dest='postprocessor_args', default={}, type='str',"
    },
    {
        "line": 1356,
        "fullcodeline": "callback_kwargs={"
    },
    {
        "line": 1495,
        "fullcodeline": "action='store_const', dest='exec_cmd', const={},"
    },
    {
        "line": 1509,
        "fullcodeline": "'Convert the subtitles to another format (currently supported: {}) '"
    },
    {
        "line": 1516,
        "fullcodeline": "f'(currently supported: {\", \".join(sorted(FFmpegThumbnailsConvertorPP.SUPPORTED_EXTS))}). '"
    },
    {
        "line": 1555,
        "fullcodeline": "callback_kwargs={"
    },
    {
        "line": 1572,
        "fullcodeline": "'Make chapter entries for, or remove various segments (sponsor, introductions, etc.) '"
    },
    {
        "line": 1577,
        "fullcodeline": "callback=_set_from_options_callback, callback_kwargs={"
    },
    {
        "line": 1582,
        "fullcodeline": "f'Available categories are {\", \".join(SponsorBlockPP.CATEGORIES.keys())}, all and default (=all). '"
    },
    {
        "line": 1588,
        "fullcodeline": "callback=_set_from_options_callback, callback_kwargs={"
    },
    {
        "line": 1599,
        "fullcodeline": "f'and {\", \".join(SponsorBlockPP.NON_SKIPPABLE_CATEGORIES.keys())} are not available'))"
    },
    {
        "line": 1674,
        "fullcodeline": "metavar='IE_KEY:ARGS', dest='extractor_args', default={}, type='str',"
    },
    {
        "line": 1676,
        "fullcodeline": "callback_kwargs={"
    },
    {
        "line": 240,
        "fullcodeline": "'default_key': ['stdout', 'stderr'],"
    },
    {
        "line": 253,
        "fullcodeline": "'allowed_values': {"
    },
    {
        "line": 1589,
        "fullcodeline": "'allowed_values': set(SponsorBlockPP.CATEGORIES.keys()) - set(SponsorBlockPP.NON_SKIPPABLE_CATEGORIES.keys()),"
    },
    {
        "line": 260,
        "fullcodeline": "}, 'aliases': {"
    },
    {
        "line": 845,
        "fullcodeline": "'allowed_keys': r'ffmpeg_[io]\\d*|{}'.format('|'.join(map(re.escape, list_external_downloaders()))),"
    },
    {
        "line": 1102,
        "fullcodeline": "'allowed_keys': 'home|temp|{}'.format('|'.join(map(re.escape, OUTTMPL_TYPES.keys()))),"
    },
    {
        "line": 1117,
        "fullcodeline": "'allowed_keys': '|'.join(map(re.escape, OUTTMPL_TYPES.keys())),"
    },
    {
        "line": 1510,
        "fullcodeline": "'(Alias: --convert-subtitles)'.format(', '.join(sorted(FFmpegSubtitlesConvertorPP.SUPPORTED_EXTS)))))"
    },
    {
        "line": 1578,
        "fullcodeline": "'allowed_values': SponsorBlockPP.CATEGORIES.keys(),"
    },
    {
        "line": 1579,
        "fullcodeline": "'aliases': {'default': ['all']},"
    },
    {
        "line": 1593,
        "fullcodeline": "'aliases': {'default': ['all', '-filler']},"
    },
    {
        "line": 261,
        "fullcodeline": "'youtube-dl': ['all', '-multistreams', '-playlist-match-filter', '-manifest-filesize-approx'],"
    },
    {
        "line": 262,
        "fullcodeline": "'youtube-dlc': ['all', '-no-youtube-channel-redirect', '-no-live-chat', '-playlist-match-filter', '-manifest-filesize-approx'],"
    },
    {
        "line": 263,
        "fullcodeline": "'2021': ['2022', 'no-certifi', 'filename-sanitization'],"
    },
    {
        "line": 264,
        "fullcodeline": "'2022': ['2023', 'no-external-downloader-progress', 'playlist-match-filter', 'prefer-legacy-http-handler', 'manifest-filesize-approx'],"
    }
]