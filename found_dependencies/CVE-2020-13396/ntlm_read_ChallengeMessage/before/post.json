[
    {
        "line": 9,
        "fullcodeline": "ntlm_generate_client_challenge(context);"
    },
    {
        "line": 10,
        "fullcodeline": "message = &context->CHALLENGE_MESSAGE;"
    },
    {
        "line": 11,
        "fullcodeline": "ZeroMemory(message, sizeof(NTLM_CHALLENGE_MESSAGE));"
    },
    {
        "line": 12,
        "fullcodeline": "s = Stream_New((BYTE*)buffer->pvBuffer, buffer->cbBuffer);"
    },
    {
        "line": 17,
        "fullcodeline": "StartOffset = Stream_Pointer(s);"
    },
    {
        "line": 43,
        "fullcodeline": "Stream_Read_UINT32(s, message->NegotiateFlags); /* NegotiateFlags (4 bytes) */"
    },
    {
        "line": 44,
        "fullcodeline": "context->NegotiateFlags = message->NegotiateFlags;"
    },
    {
        "line": 52,
        "fullcodeline": "Stream_Read(s, message->ServerChallenge, 8); /* ServerChallenge (8 bytes) */"
    },
    {
        "line": 53,
        "fullcodeline": "CopyMemory(context->ServerChallenge, message->ServerChallenge, 8);"
    },
    {
        "line": 61,
        "fullcodeline": "Stream_Read(s, message->Reserved, 8); /* Reserved (8 bytes), should be ignored */"
    },
    {
        "line": 79,
        "fullcodeline": "PayloadOffset = Stream_Pointer(s);"
    },
    {
        "line": 119,
        "fullcodeline": "length = (PayloadOffset - StartOffset) + message->TargetName.Len + message->TargetInfo.Len;"
    },
    {
        "line": 127,
        "fullcodeline": "CopyMemory(context->ChallengeMessage.pvBuffer, StartOffset, length);"
    },
    {
        "line": 163,
        "fullcodeline": "ntlm_generate_timestamp(context); /* Timestamp */"
    },
    {
        "line": 177,
        "fullcodeline": "ntlm_generate_key_exchange_key(context);     /* KeyExchangeKey */"
    },
    {
        "line": 178,
        "fullcodeline": "ntlm_generate_random_session_key(context);   /* RandomSessionKey */"
    },
    {
        "line": 179,
        "fullcodeline": "ntlm_generate_exported_session_key(context); /* ExportedSessionKey */"
    },
    {
        "line": 180,
        "fullcodeline": "ntlm_encrypt_random_session_key(context);    /* EncryptedRandomSessionKey */"
    },
    {
        "line": 182,
        "fullcodeline": "ntlm_generate_client_signing_key(context);"
    },
    {
        "line": 183,
        "fullcodeline": "ntlm_generate_server_signing_key(context);"
    },
    {
        "line": 185,
        "fullcodeline": "ntlm_generate_client_sealing_key(context);"
    },
    {
        "line": 186,
        "fullcodeline": "ntlm_generate_server_sealing_key(context);"
    },
    {
        "line": 188,
        "fullcodeline": "ntlm_init_rc4_seal_states(context);"
    },
    {
        "line": 213,
        "fullcodeline": "context->state = NTLM_STATE_AUTHENTICATE;"
    },
    {
        "line": 214,
        "fullcodeline": "ntlm_free_message_fields_buffer(&(message->TargetName));"
    },
    {
        "line": 215,
        "fullcodeline": "Stream_Free(s, FALSE);"
    },
    {
        "line": 14,
        "fullcodeline": "if (!s)"
    },
    {
        "line": 19,
        "fullcodeline": "if (ntlm_read_message_header(s, (NTLM_MESSAGE_HEADER*)message) < 0)"
    },
    {
        "line": 25,
        "fullcodeline": "if (message->MessageType != MESSAGE_TYPE_CHALLENGE)"
    },
    {
        "line": 31,
        "fullcodeline": "if (ntlm_read_message_fields(s, &(message->TargetName)) < 0) /* TargetNameFields (8 bytes) */"
    },
    {
        "line": 37,
        "fullcodeline": "if (Stream_GetRemainingLength(s) < 4)"
    },
    {
        "line": 46,
        "fullcodeline": "if (Stream_GetRemainingLength(s) < 8)"
    },
    {
        "line": 55,
        "fullcodeline": "if (Stream_GetRemainingLength(s) < 8)"
    },
    {
        "line": 63,
        "fullcodeline": "if (ntlm_read_message_fields(s, &(message->TargetInfo)) < 0) /* TargetInfoFields (8 bytes) */"
    },
    {
        "line": 69,
        "fullcodeline": "if (context->NegotiateFlags & NTLMSSP_NEGOTIATE_VERSION)"
    },
    {
        "line": 81,
        "fullcodeline": "if (message->TargetName.Len > 0)"
    },
    {
        "line": 90,
        "fullcodeline": "if (message->TargetInfo.Len > 0)"
    },
    {
        "line": 121,
        "fullcodeline": "if (!sspi_SecBufferAlloc(&context->ChallengeMessage, length))"
    },
    {
        "line": 165,
        "fullcodeline": "if (ntlm_compute_lm_v2_response(context) < 0) /* LmChallengeResponse */"
    },
    {
        "line": 171,
        "fullcodeline": "if (ntlm_compute_ntlm_v2_response(context) < 0) /* NtChallengeResponse */"
    },
    {
        "line": 21,
        "fullcodeline": "Stream_Free(s, FALSE);"
    },
    {
        "line": 27,
        "fullcodeline": "Stream_Free(s, FALSE);"
    },
    {
        "line": 33,
        "fullcodeline": "Stream_Free(s, FALSE);"
    },
    {
        "line": 39,
        "fullcodeline": "Stream_Free(s, FALSE);"
    },
    {
        "line": 48,
        "fullcodeline": "Stream_Free(s, FALSE);"
    },
    {
        "line": 57,
        "fullcodeline": "Stream_Free(s, FALSE);"
    },
    {
        "line": 65,
        "fullcodeline": "Stream_Free(s, FALSE);"
    },
    {
        "line": 101,
        "fullcodeline": "context->ChallengeTargetInfo.cbBuffer = message->TargetInfo.Len;"
    },
    {
        "line": 102,
        "fullcodeline": "AvTimestamp = ntlm_av_pair_get((NTLM_AV_PAIR*)message->TargetInfo.Buffer,"
    },
    {
        "line": 123,
        "fullcodeline": "Stream_Free(s, FALSE);"
    },
    {
        "line": 158,
        "fullcodeline": "sspi_SecBufferFree(&context->ChallengeTargetInfo);"
    },
    {
        "line": 167,
        "fullcodeline": "Stream_Free(s, FALSE);"
    },
    {
        "line": 173,
        "fullcodeline": "Stream_Free(s, FALSE);"
    },
    {
        "line": 71,
        "fullcodeline": "if (ntlm_read_version_info(s, &(message->Version)) < 0) /* Version (8 bytes) */"
    },
    {
        "line": 83,
        "fullcodeline": "if (ntlm_read_message_fields_buffer(s, &(message->TargetName)) < 0)"
    },
    {
        "line": 94,
        "fullcodeline": "if (ntlm_read_message_fields_buffer(s, &(message->TargetInfo)) < 0)"
    },
    {
        "line": 152,
        "fullcodeline": "if (ntlm_construct_authenticate_target_info(context) < 0)"
    },
    {
        "line": 73,
        "fullcodeline": "Stream_Free(s, FALSE);"
    },
    {
        "line": 85,
        "fullcodeline": "Stream_Free(s, FALSE);"
    },
    {
        "line": 96,
        "fullcodeline": "Stream_Free(s, FALSE);"
    },
    {
        "line": 107,
        "fullcodeline": "PBYTE ptr = ntlm_av_pair_get_value_pointer(AvTimestamp);"
    },
    {
        "line": 115,
        "fullcodeline": "CopyMemory(context->ChallengeTimestamp, ptr, 8);"
    },
    {
        "line": 154,
        "fullcodeline": "Stream_Free(s, FALSE);"
    },
    {
        "line": 109,
        "fullcodeline": "if (!ptr)"
    },
    {
        "line": 113,
        "fullcodeline": "context->UseMIC = TRUE;"
    }
]