[
    {
        "line": 4,
        "fullcodeline": "sctp_chunkhdr_t *ch = NULL;"
    },
    {
        "line": 47,
        "fullcodeline": "chunk->chunk_hdr = ch;"
    },
    {
        "line": 48,
        "fullcodeline": "chunk->chunk_end = ((__u8 *)ch) + WORD_ROUND(ntohs(ch->length));"
    },
    {
        "line": 57,
        "fullcodeline": "skb_pull(chunk->skb, sizeof(sctp_chunkhdr_t));"
    },
    {
        "line": 58,
        "fullcodeline": "chunk->subh.v = NULL; /* Subheader is no longer valid.  */"
    },
    {
        "line": 75,
        "fullcodeline": "pr_debug(\"+++sctp_inq_pop+++ chunk:%p[%s], length:%d, skb->len:%d\\n\","
    },
    {
        "line": 10,
        "fullcodeline": "if ((chunk = queue->in_progress)) {"
    },
    {
        "line": 29,
        "fullcodeline": "if (!chunk) {"
    },
    {
        "line": 53,
        "fullcodeline": "if (unlikely(skb_is_nonlinear(chunk->skb))) {"
    },
    {
        "line": 60,
        "fullcodeline": "if (chunk->chunk_end + sizeof(sctp_chunkhdr_t) <"
    },
    {
        "line": 76,
        "fullcodeline": "chunk, sctp_cname(SCTP_ST_CHUNK(chunk->chunk_hdr->type)),"
    },
    {
        "line": 39,
        "fullcodeline": "list_del_init(entry);"
    },
    {
        "line": 42,
        "fullcodeline": "chunk->singleton = 1;"
    },
    {
        "line": 43,
        "fullcodeline": "ch = (sctp_chunkhdr_t *) chunk->skb->data;"
    },
    {
        "line": 44,
        "fullcodeline": "chunk->data_accepted = 0;"
    },
    {
        "line": 61,
        "fullcodeline": "skb_tail_pointer(chunk->skb)) {"
    },
    {
        "line": 63,
        "fullcodeline": "chunk->singleton = 0;"
    },
    {
        "line": 14,
        "fullcodeline": "if (chunk->singleton ||"
    },
    {
        "line": 33,
        "fullcodeline": "if (list_empty(&queue->in_chunk_list))"
    },
    {
        "line": 54,
        "fullcodeline": "if (chunk->chunk_end > skb_tail_pointer(chunk->skb))"
    },
    {
        "line": 17,
        "fullcodeline": "sctp_chunk_free(chunk);"
    },
    {
        "line": 18,
        "fullcodeline": "chunk = queue->in_progress = NULL;"
    },
    {
        "line": 55,
        "fullcodeline": "chunk->chunk_end = skb_tail_pointer(chunk->skb);"
    },
    {
        "line": 64,
        "fullcodeline": "} else if (chunk->chunk_end > skb_tail_pointer(chunk->skb)) {"
    },
    {
        "line": 21,
        "fullcodeline": "ch = (sctp_chunkhdr_t *) chunk->chunk_end;"
    },
    {
        "line": 23,
        "fullcodeline": "skb_pull(chunk->skb, chunk->chunk_end - chunk->skb->data);"
    },
    {
        "line": 66,
        "fullcodeline": "chunk->pdiscard = 1;"
    },
    {
        "line": 67,
        "fullcodeline": "chunk->chunk_end = skb_tail_pointer(chunk->skb);"
    },
    {
        "line": 72,
        "fullcodeline": "chunk->end_of_packet = 1;"
    }
]