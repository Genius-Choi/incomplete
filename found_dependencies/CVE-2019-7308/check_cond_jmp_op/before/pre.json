[
    {
        "line": 4,
        "fullcodeline": "struct bpf_verifier_state *this_branch = env->cur_state;"
    },
    {
        "line": 6,
        "fullcodeline": "struct bpf_reg_state *regs = this_branch->frame[this_branch->curframe]->regs;"
    },
    {
        "line": 8,
        "fullcodeline": "u8 opcode = BPF_OP(insn->code);"
    },
    {
        "line": 40,
        "fullcodeline": "err = check_reg_arg(env, insn->dst_reg, SRC_OP);"
    },
    {
        "line": 44,
        "fullcodeline": "dst_reg = &regs[insn->dst_reg];"
    },
    {
        "line": 61,
        "fullcodeline": "other_branch = push_stack(env, *insn_idx + insn->off + 1, *insn_idx);"
    },
    {
        "line": 64,
        "fullcodeline": "other_branch_regs = other_branch->frame[other_branch->curframe]->regs;"
    },
    {
        "line": 11,
        "fullcodeline": "if (opcode > BPF_JSLE) {"
    },
    {
        "line": 16,
        "fullcodeline": "if (BPF_SRC(insn->code) == BPF_X) {"
    },
    {
        "line": 46,
        "fullcodeline": "if (BPF_SRC(insn->code) == BPF_K) {"
    },
    {
        "line": 62,
        "fullcodeline": "if (!other_branch)"
    },
    {
        "line": 12,
        "fullcodeline": "verbose(env, \"invalid BPF_JMP opcode %x\\n\", opcode);"
    },
    {
        "line": 23,
        "fullcodeline": "err = check_reg_arg(env, insn->src_reg, SRC_OP);"
    },
    {
        "line": 47,
        "fullcodeline": "int pred = is_branch_taken(dst_reg, insn->imm, opcode);"
    },
    {
        "line": 73,
        "fullcodeline": "if (BPF_SRC(insn->code) == BPF_X) {"
    },
    {
        "line": 97,
        "fullcodeline": "if (BPF_SRC(insn->code) == BPF_K &&"
    },
    {
        "line": 99,
        "fullcodeline": "reg_type_may_be_null(dst_reg->type)) {"
    },
    {
        "line": 103,
        "fullcodeline": "mark_ptr_or_null_regs(this_branch, insn->dst_reg,"
    },
    {
        "line": 13,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 17,
        "fullcodeline": "if (insn->imm != 0) {"
    },
    {
        "line": 27,
        "fullcodeline": "if (is_pointer_value(env, insn->src_reg)) {"
    },
    {
        "line": 49,
        "fullcodeline": "if (pred == 1) {"
    },
    {
        "line": 63,
        "fullcodeline": "return -EFAULT;"
    },
    {
        "line": 98,
        "fullcodeline": "insn->imm == 0 && (opcode == BPF_JEQ || opcode == BPF_JNE) &&"
    },
    {
        "line": 104,
        "fullcodeline": "opcode == BPF_JNE);"
    },
    {
        "line": 106,
        "fullcodeline": "opcode == BPF_JEQ);"
    },
    {
        "line": 33,
        "fullcodeline": "if (insn->src_reg != BPF_REG_0) {"
    },
    {
        "line": 74,
        "fullcodeline": "if (dst_reg->type == SCALAR_VALUE &&"
    },
    {
        "line": 75,
        "fullcodeline": "regs[insn->src_reg].type == SCALAR_VALUE) {"
    },
    {
        "line": 91,
        "fullcodeline": "} else if (dst_reg->type == SCALAR_VALUE) {"
    },
    {
        "line": 19,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 30,
        "fullcodeline": "return -EACCES;"
    },
    {
        "line": 76,
        "fullcodeline": "if (tnum_is_const(regs[insn->src_reg].var_off))"
    },
    {
        "line": 92,
        "fullcodeline": "reg_set_min_max(&other_branch_regs[insn->dst_reg],"
    },
    {
        "line": 107,
        "fullcodeline": "} else if (!try_match_pkt_pointers(insn, dst_reg, &regs[insn->src_reg],"
    },
    {
        "line": 109,
        "fullcodeline": "is_pointer_value(env, insn->dst_reg)) {"
    },
    {
        "line": 35,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 77,
        "fullcodeline": "reg_set_min_max(&other_branch_regs[insn->dst_reg],"
    },
    {
        "line": 112,
        "fullcodeline": "return -EACCES;"
    },
    {
        "line": 80,
        "fullcodeline": "else if (tnum_is_const(dst_reg->var_off))"
    },
    {
        "line": 81,
        "fullcodeline": "reg_set_min_max_inv(&other_branch_regs[insn->src_reg],"
    },
    {
        "line": 84,
        "fullcodeline": "else if (opcode == BPF_JEQ || opcode == BPF_JNE)"
    },
    {
        "line": 86,
        "fullcodeline": "reg_combine_min_max(&other_branch_regs[insn->src_reg],"
    }
]