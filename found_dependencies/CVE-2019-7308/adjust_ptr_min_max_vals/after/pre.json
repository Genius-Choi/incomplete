[
    {
        "line": 6,
        "fullcodeline": "struct bpf_verifier_state *vstate = env->cur_state;"
    },
    {
        "line": 7,
        "fullcodeline": "struct bpf_func_state *state = vstate->frame[vstate->curframe];"
    },
    {
        "line": 8,
        "fullcodeline": "struct bpf_reg_state *regs = state->regs, *dst_reg;"
    },
    {
        "line": 9,
        "fullcodeline": "bool known = tnum_is_const(off_reg->var_off);"
    },
    {
        "line": 10,
        "fullcodeline": "s64 smin_val = off_reg->smin_value, smax_val = off_reg->smax_value,"
    },
    {
        "line": 11,
        "fullcodeline": "smin_ptr = ptr_reg->smin_value, smax_ptr = ptr_reg->smax_value;"
    },
    {
        "line": 12,
        "fullcodeline": "u64 umin_val = off_reg->umin_value, umax_val = off_reg->umax_value,"
    },
    {
        "line": 13,
        "fullcodeline": "umin_ptr = ptr_reg->umin_value, umax_ptr = ptr_reg->umax_value;"
    },
    {
        "line": 14,
        "fullcodeline": "u32 dst = insn->dst_reg, src = insn->src_reg;"
    },
    {
        "line": 15,
        "fullcodeline": "u8 opcode = BPF_OP(insn->code);"
    },
    {
        "line": 18,
        "fullcodeline": "dst_reg = &regs[dst];"
    },
    {
        "line": 63,
        "fullcodeline": "dst_reg->type = ptr_reg->type;"
    },
    {
        "line": 64,
        "fullcodeline": "dst_reg->id = ptr_reg->id;"
    },
    {
        "line": 208,
        "fullcodeline": "__update_reg_bounds(dst_reg);"
    },
    {
        "line": 209,
        "fullcodeline": "__reg_deduce_bounds(dst_reg);"
    },
    {
        "line": 210,
        "fullcodeline": "__reg_bound_offset(dst_reg);"
    },
    {
        "line": 20,
        "fullcodeline": "if ((known && (smin_val != smax_val || umin_val != umax_val)) ||"
    },
    {
        "line": 29,
        "fullcodeline": "if (BPF_CLASS(insn->code) != BPF_ALU64) {"
    },
    {
        "line": 215,
        "fullcodeline": "if (!env->allow_ptr_leaks) {"
    },
    {
        "line": 21,
        "fullcodeline": "smin_val > smax_val || umin_val > umax_val) {"
    },
    {
        "line": 25,
        "fullcodeline": "__mark_reg_unknown(dst_reg);"
    },
    {
        "line": 66,
        "fullcodeline": "if (!check_reg_sane_offset(env, off_reg, ptr_reg->type) ||"
    },
    {
        "line": 67,
        "fullcodeline": "!check_reg_sane_offset(env, ptr_reg, ptr_reg->type))"
    },
    {
        "line": 72,
        "fullcodeline": "ret = sanitize_ptr_alu(env, insn, ptr_reg, dst_reg, smin_val < 0);"
    },
    {
        "line": 117,
        "fullcodeline": "dst_reg->var_off = tnum_add(ptr_reg->var_off, off_reg->var_off);"
    },
    {
        "line": 118,
        "fullcodeline": "dst_reg->off = ptr_reg->off;"
    },
    {
        "line": 119,
        "fullcodeline": "dst_reg->raw = ptr_reg->raw;"
    },
    {
        "line": 127,
        "fullcodeline": "ret = sanitize_ptr_alu(env, insn, ptr_reg, dst_reg, smin_val < 0);"
    },
    {
        "line": 181,
        "fullcodeline": "dst_reg->var_off = tnum_sub(ptr_reg->var_off, off_reg->var_off);"
    },
    {
        "line": 182,
        "fullcodeline": "dst_reg->off = ptr_reg->off;"
    },
    {
        "line": 183,
        "fullcodeline": "dst_reg->raw = ptr_reg->raw;"
    },
    {
        "line": 205,
        "fullcodeline": "if (!check_reg_sane_offset(env, dst_reg, ptr_reg->type))"
    },
    {
        "line": 34,
        "fullcodeline": "return -EACCES;"
    },
    {
        "line": 41,
        "fullcodeline": "return -EACCES;"
    },
    {
        "line": 48,
        "fullcodeline": "return -EACCES;"
    },
    {
        "line": 68,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 73,
        "fullcodeline": "if (ret < 0) {"
    },
    {
        "line": 120,
        "fullcodeline": "if (reg_is_pkt_pointer(ptr_reg)) {"
    },
    {
        "line": 128,
        "fullcodeline": "if (ret < 0) {"
    },
    {
        "line": 132,
        "fullcodeline": "if (dst_reg == off_reg) {"
    },
    {
        "line": 142,
        "fullcodeline": "if (ptr_reg->type == PTR_TO_STACK) {"
    },
    {
        "line": 172,
        "fullcodeline": "if (umin_ptr < umax_val) {"
    },
    {
        "line": 184,
        "fullcodeline": "if (reg_is_pkt_pointer(ptr_reg)) {"
    },
    {
        "line": 197,
        "fullcodeline": "return -EACCES;"
    },
    {
        "line": 202,
        "fullcodeline": "return -EACCES;"
    },
    {
        "line": 206,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 50,
        "fullcodeline": "if (!env->allow_ptr_leaks && !known && (smin_val < 0) != (smax_val < 0)) {"
    },
    {
        "line": 80,
        "fullcodeline": "if (known && (ptr_reg->off + smin_val =="
    },
    {
        "line": 83,
        "fullcodeline": "dst_reg->smin_value = smin_ptr;"
    },
    {
        "line": 84,
        "fullcodeline": "dst_reg->smax_value = smax_ptr;"
    },
    {
        "line": 85,
        "fullcodeline": "dst_reg->umin_value = umin_ptr;"
    },
    {
        "line": 86,
        "fullcodeline": "dst_reg->umax_value = umax_ptr;"
    },
    {
        "line": 87,
        "fullcodeline": "dst_reg->var_off = ptr_reg->var_off;"
    },
    {
        "line": 88,
        "fullcodeline": "dst_reg->off = ptr_reg->off + smin_val;"
    },
    {
        "line": 89,
        "fullcodeline": "dst_reg->raw = ptr_reg->raw;"
    },
    {
        "line": 101,
        "fullcodeline": "if (signed_add_overflows(smin_ptr, smin_val) ||"
    },
    {
        "line": 102,
        "fullcodeline": "signed_add_overflows(smax_ptr, smax_val)) {"
    },
    {
        "line": 103,
        "fullcodeline": "dst_reg->smin_value = S64_MIN;"
    },
    {
        "line": 104,
        "fullcodeline": "dst_reg->smax_value = S64_MAX;"
    },
    {
        "line": 109,
        "fullcodeline": "if (umin_ptr + umin_val < umin_ptr ||"
    },
    {
        "line": 110,
        "fullcodeline": "umax_ptr + umax_val < umax_ptr) {"
    },
    {
        "line": 111,
        "fullcodeline": "dst_reg->umin_value = 0;"
    },
    {
        "line": 112,
        "fullcodeline": "dst_reg->umax_value = U64_MAX;"
    },
    {
        "line": 121,
        "fullcodeline": "dst_reg->id = ++env->id_gen;"
    },
    {
        "line": 123,
        "fullcodeline": "dst_reg->raw = 0;"
    },
    {
        "line": 147,
        "fullcodeline": "if (known && (ptr_reg->off - smin_val =="
    },
    {
        "line": 150,
        "fullcodeline": "dst_reg->smin_value = smin_ptr;"
    },
    {
        "line": 151,
        "fullcodeline": "dst_reg->smax_value = smax_ptr;"
    },
    {
        "line": 152,
        "fullcodeline": "dst_reg->umin_value = umin_ptr;"
    },
    {
        "line": 153,
        "fullcodeline": "dst_reg->umax_value = umax_ptr;"
    },
    {
        "line": 154,
        "fullcodeline": "dst_reg->var_off = ptr_reg->var_off;"
    },
    {
        "line": 155,
        "fullcodeline": "dst_reg->id = ptr_reg->id;"
    },
    {
        "line": 156,
        "fullcodeline": "dst_reg->off = ptr_reg->off - smin_val;"
    },
    {
        "line": 157,
        "fullcodeline": "dst_reg->raw = ptr_reg->raw;"
    },
    {
        "line": 163,
        "fullcodeline": "if (signed_sub_overflows(smin_ptr, smax_val) ||"
    },
    {
        "line": 164,
        "fullcodeline": "signed_sub_overflows(smax_ptr, smin_val)) {"
    },
    {
        "line": 166,
        "fullcodeline": "dst_reg->smin_value = S64_MIN;"
    },
    {
        "line": 167,
        "fullcodeline": "dst_reg->smax_value = S64_MAX;"
    },
    {
        "line": 174,
        "fullcodeline": "dst_reg->umin_value = 0;"
    },
    {
        "line": 175,
        "fullcodeline": "dst_reg->umax_value = U64_MAX;"
    },
    {
        "line": 185,
        "fullcodeline": "dst_reg->id = ++env->id_gen;"
    },
    {
        "line": 216,
        "fullcodeline": "if (dst_reg->type == PTR_TO_MAP_VALUE &&"
    },
    {
        "line": 217,
        "fullcodeline": "check_map_access(env, dst, dst_reg->off, 1, false)) {"
    },
    {
        "line": 53,
        "fullcodeline": "return -EACCES;"
    },
    {
        "line": 81,
        "fullcodeline": "(s64)(s32)(ptr_reg->off + smin_val))) {"
    },
    {
        "line": 106,
        "fullcodeline": "dst_reg->smin_value = smin_ptr + smin_val;"
    },
    {
        "line": 107,
        "fullcodeline": "dst_reg->smax_value = smax_ptr + smax_val;"
    },
    {
        "line": 114,
        "fullcodeline": "dst_reg->umin_value = umin_ptr + umin_val;"
    },
    {
        "line": 115,
        "fullcodeline": "dst_reg->umax_value = umax_ptr + umax_val;"
    },
    {
        "line": 136,
        "fullcodeline": "return -EACCES;"
    },
    {
        "line": 145,
        "fullcodeline": "return -EACCES;"
    },
    {
        "line": 148,
        "fullcodeline": "(s64)(s32)(ptr_reg->off - smin_val))) {"
    },
    {
        "line": 169,
        "fullcodeline": "dst_reg->smin_value = smin_ptr - smax_val;"
    },
    {
        "line": 170,
        "fullcodeline": "dst_reg->smax_value = smax_ptr - smin_val;"
    },
    {
        "line": 178,
        "fullcodeline": "dst_reg->umin_value = umin_ptr - umax_val;"
    },
    {
        "line": 179,
        "fullcodeline": "dst_reg->umax_value = umax_ptr - umin_val;"
    },
    {
        "line": 220,
        "fullcodeline": "return -EACCES;"
    },
    {
        "line": 188,
        "fullcodeline": "dst_reg->raw = 0;"
    },
    {
        "line": 221,
        "fullcodeline": "} else if (dst_reg->type == PTR_TO_STACK &&"
    },
    {
        "line": 222,
        "fullcodeline": "check_stack_access(env, dst_reg, dst_reg->off +"
    },
    {
        "line": 226,
        "fullcodeline": "return -EACCES;"
    }
]