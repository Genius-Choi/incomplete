[
    {
        "line": 4,
        "fullcodeline": "struct bpf_prog *prog = env->prog;"
    },
    {
        "line": 5,
        "fullcodeline": "struct bpf_insn *insn = prog->insnsi;"
    },
    {
        "line": 8,
        "fullcodeline": "int err = 0;"
    },
    {
        "line": 28,
        "fullcodeline": "err = 0;"
    },
    {
        "line": 10,
        "fullcodeline": "if (env->prog->jit_requested &&"
    },
    {
        "line": 19,
        "fullcodeline": "for (i = 0; i < prog->len; i++, insn++) {"
    },
    {
        "line": 11,
        "fullcodeline": "!bpf_prog_is_dev_bound(env->prog->aux)) {"
    },
    {
        "line": 12,
        "fullcodeline": "err = jit_subprogs(env);"
    },
    {
        "line": 23,
        "fullcodeline": "depth = get_callee_stack_depth(env, insn, i);"
    },
    {
        "line": 26,
        "fullcodeline": "bpf_patch_call_args(insn, depth);"
    },
    {
        "line": 13,
        "fullcodeline": "if (err == 0)"
    },
    {
        "line": 15,
        "fullcodeline": "if (err == -EFAULT)"
    },
    {
        "line": 24,
        "fullcodeline": "if (depth < 0)"
    },
    {
        "line": 20,
        "fullcodeline": "if (insn->code != (BPF_JMP | BPF_CALL) ||"
    },
    {
        "line": 21,
        "fullcodeline": "insn->src_reg != BPF_PSEUDO_CALL)"
    }
]