[
    {
        "line": 4,
        "fullcodeline": "struct bpf_verifier_state *cur = env->cur_state;"
    },
    {
        "line": 8,
        "fullcodeline": "elem = kzalloc(sizeof(struct bpf_verifier_stack_elem), GFP_KERNEL);"
    },
    {
        "line": 12,
        "fullcodeline": "elem->insn_idx = insn_idx;"
    },
    {
        "line": 13,
        "fullcodeline": "elem->prev_insn_idx = prev_insn_idx;"
    },
    {
        "line": 14,
        "fullcodeline": "elem->next = env->head;"
    },
    {
        "line": 15,
        "fullcodeline": "env->head = elem;"
    },
    {
        "line": 16,
        "fullcodeline": "env->stack_size++;"
    },
    {
        "line": 17,
        "fullcodeline": "err = copy_verifier_state(&elem->st, cur);"
    },
    {
        "line": 26,
        "fullcodeline": "free_verifier_state(env->cur_state, true);"
    },
    {
        "line": 27,
        "fullcodeline": "env->cur_state = NULL;"
    },
    {
        "line": 9,
        "fullcodeline": "if (!elem)"
    },
    {
        "line": 20,
        "fullcodeline": "if (env->stack_size > BPF_COMPLEXITY_LIMIT_STACK) {"
    },
    {
        "line": 21,
        "fullcodeline": "verbose(env, \"BPF program is too complex\\n\");"
    },
    {
        "line": 29,
        "fullcodeline": "while (!pop_stack(env, NULL, NULL));"
    }
]