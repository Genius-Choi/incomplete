[
    {
        "line": 7,
        "fullcodeline": "struct bpf_verifier_state *vstate = env->cur_state;"
    },
    {
        "line": 8,
        "fullcodeline": "struct bpf_insn_aux_data *aux = cur_aux(env);"
    },
    {
        "line": 9,
        "fullcodeline": "bool ptr_is_dst_reg = ptr_reg == dst_reg;"
    },
    {
        "line": 10,
        "fullcodeline": "u8 opcode = BPF_OP(insn->code);"
    },
    {
        "line": 25,
        "fullcodeline": "alu_state  = off_is_neg ? BPF_ALU_NEG_VALUE : 0;"
    },
    {
        "line": 26,
        "fullcodeline": "alu_state |= ptr_is_dst_reg ?"
    },
    {
        "line": 41,
        "fullcodeline": "aux->alu_state = alu_state;"
    },
    {
        "line": 42,
        "fullcodeline": "aux->alu_limit = alu_limit;"
    },
    {
        "line": 58,
        "fullcodeline": "ret = push_stack(env, env->insn_idx + 1, env->insn_idx, true);"
    },
    {
        "line": 15,
        "fullcodeline": "if (env->allow_ptr_leaks || BPF_SRC(insn->code) == BPF_K)"
    },
    {
        "line": 29,
        "fullcodeline": "if (retrieve_ptr_limit(ptr_reg, &alu_limit, opcode, off_is_neg))"
    },
    {
        "line": 35,
        "fullcodeline": "if (aux->alu_state &&"
    },
    {
        "line": 54,
        "fullcodeline": "if (!ptr_is_dst_reg) {"
    },
    {
        "line": 59,
        "fullcodeline": "if (!ptr_is_dst_reg)"
    },
    {
        "line": 61,
        "fullcodeline": "return !ret ? -EFAULT : 0;"
    },
    {
        "line": 36,
        "fullcodeline": "(aux->alu_state != alu_state ||"
    },
    {
        "line": 60,
        "fullcodeline": "*dst_reg = tmp;"
    },
    {
        "line": 37,
        "fullcodeline": "aux->alu_limit != alu_limit))"
    },
    {
        "line": 38,
        "fullcodeline": "return -EACCES;"
    }
]