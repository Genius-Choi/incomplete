[
    {
        "line": 3,
        "fullcodeline": "struct bpf_prog *prog = env->prog;"
    },
    {
        "line": 4,
        "fullcodeline": "struct bpf_insn *insn = prog->insnsi;"
    },
    {
        "line": 6,
        "fullcodeline": "const int insn_cnt = prog->len;"
    },
    {
        "line": 9,
        "fullcodeline": "struct bpf_insn insn_buf[16];"
    },
    {
        "line": 12,
        "fullcodeline": "int i, cnt, delta = 0;"
    },
    {
        "line": 14,
        "fullcodeline": "for (i = 0; i < insn_cnt; i++, insn++) {"
    },
    {
        "line": 219,
        "fullcodeline": "fn = env->ops->get_func_proto(insn->imm, env->prog);"
    },
    {
        "line": 229,
        "fullcodeline": "insn->imm = fn->func - __bpf_call_base;"
    },
    {
        "line": 15,
        "fullcodeline": "if (insn->code == (BPF_ALU64 | BPF_MOD | BPF_X) ||"
    },
    {
        "line": 55,
        "fullcodeline": "if (BPF_CLASS(insn->code) == BPF_LD &&"
    },
    {
        "line": 74,
        "fullcodeline": "if (insn->code != (BPF_JMP | BPF_CALL))"
    },
    {
        "line": 76,
        "fullcodeline": "if (insn->src_reg == BPF_PSEUDO_CALL)"
    },
    {
        "line": 79,
        "fullcodeline": "if (insn->imm == BPF_FUNC_get_route_realm)"
    },
    {
        "line": 81,
        "fullcodeline": "if (insn->imm == BPF_FUNC_get_prandom_u32)"
    },
    {
        "line": 83,
        "fullcodeline": "if (insn->imm == BPF_FUNC_override_return)"
    },
    {
        "line": 85,
        "fullcodeline": "if (insn->imm == BPF_FUNC_tail_call) {"
    },
    {
        "line": 141,
        "fullcodeline": "if (prog->jit_requested && BITS_PER_LONG == 64 &&"
    },
    {
        "line": 223,
        "fullcodeline": "if (!fn->func) {"
    },
    {
        "line": 18,
        "fullcodeline": "insn->code == (BPF_ALU | BPF_DIV | BPF_X)) {"
    },
    {
        "line": 19,
        "fullcodeline": "bool is64 = BPF_CLASS(insn->code) == BPF_ALU64;"
    },
    {
        "line": 20,
        "fullcodeline": "struct bpf_insn mask_and_div[] = {"
    },
    {
        "line": 28,
        "fullcodeline": "struct bpf_insn mask_and_mod[] = {"
    },
    {
        "line": 45,
        "fullcodeline": "new_prog = bpf_patch_insn_data(env, i + delta, patchlet, cnt);"
    },
    {
        "line": 49,
        "fullcodeline": "delta    += cnt - 1;"
    },
    {
        "line": 50,
        "fullcodeline": "env->prog = prog = new_prog;"
    },
    {
        "line": 51,
        "fullcodeline": "insn      = new_prog->insnsi + i + delta;"
    },
    {
        "line": 56,
        "fullcodeline": "(BPF_MODE(insn->code) == BPF_ABS ||"
    },
    {
        "line": 58,
        "fullcodeline": "cnt = env->ops->gen_ld_abs(insn, insn_buf);"
    },
    {
        "line": 64,
        "fullcodeline": "new_prog = bpf_patch_insn_data(env, i + delta, insn_buf, cnt);"
    },
    {
        "line": 68,
        "fullcodeline": "delta    += cnt - 1;"
    },
    {
        "line": 69,
        "fullcodeline": "env->prog = prog = new_prog;"
    },
    {
        "line": 70,
        "fullcodeline": "insn      = new_prog->insnsi + i + delta;"
    },
    {
        "line": 80,
        "fullcodeline": "prog->dst_needed = 1;"
    },
    {
        "line": 82,
        "fullcodeline": "bpf_user_rnd_init_once();"
    },
    {
        "line": 84,
        "fullcodeline": "prog->kprobe_override = 1;"
    },
    {
        "line": 91,
        "fullcodeline": "prog->cb_access = 1;"
    },
    {
        "line": 92,
        "fullcodeline": "env->prog->aux->stack_depth = MAX_BPF_STACK;"
    },
    {
        "line": 93,
        "fullcodeline": "env->prog->aux->max_pkt_offset = MAX_PACKET_OFF;"
    },
    {
        "line": 100,
        "fullcodeline": "insn->imm = 0;"
    },
    {
        "line": 101,
        "fullcodeline": "insn->code = BPF_JMP | BPF_TAIL_CALL;"
    },
    {
        "line": 118,
        "fullcodeline": "map_ptr = BPF_MAP_PTR(aux->map_state);"
    },
    {
        "line": 119,
        "fullcodeline": "insn_buf[0] = BPF_JMP_IMM(BPF_JGE, BPF_REG_3,"
    },
    {
        "line": 125,
        "fullcodeline": "insn_buf[2] = *insn;"
    },
    {
        "line": 126,
        "fullcodeline": "cnt = 3;"
    },
    {
        "line": 127,
        "fullcodeline": "new_prog = bpf_patch_insn_data(env, i + delta, insn_buf, cnt);"
    },
    {
        "line": 131,
        "fullcodeline": "delta    += cnt - 1;"
    },
    {
        "line": 132,
        "fullcodeline": "env->prog = prog = new_prog;"
    },
    {
        "line": 133,
        "fullcodeline": "insn      = new_prog->insnsi + i + delta;"
    },
    {
        "line": 142,
        "fullcodeline": "(insn->imm == BPF_FUNC_map_lookup_elem ||"
    },
    {
        "line": 152,
        "fullcodeline": "map_ptr = BPF_MAP_PTR(aux->map_state);"
    },
    {
        "line": 153,
        "fullcodeline": "ops = map_ptr->ops;"
    },
    {
        "line": 173,
        "fullcodeline": "BUILD_BUG_ON(!__same_type(ops->map_lookup_elem,"
    },
    {
        "line": 175,
        "fullcodeline": "BUILD_BUG_ON(!__same_type(ops->map_delete_elem,"
    },
    {
        "line": 177,
        "fullcodeline": "BUILD_BUG_ON(!__same_type(ops->map_update_elem,"
    },
    {
        "line": 180,
        "fullcodeline": "BUILD_BUG_ON(!__same_type(ops->map_push_elem,"
    },
    {
        "line": 183,
        "fullcodeline": "BUILD_BUG_ON(!__same_type(ops->map_pop_elem,"
    },
    {
        "line": 185,
        "fullcodeline": "BUILD_BUG_ON(!__same_type(ops->map_peek_elem,"
    },
    {
        "line": 224,
        "fullcodeline": "verbose(env,"
    },
    {
        "line": 17,
        "fullcodeline": "insn->code == (BPF_ALU | BPF_MOD | BPF_X) ||"
    },
    {
        "line": 36,
        "fullcodeline": "if (insn->code == (BPF_ALU64 | BPF_DIV | BPF_X) ||"
    },
    {
        "line": 46,
        "fullcodeline": "if (!new_prog)"
    },
    {
        "line": 57,
        "fullcodeline": "BPF_MODE(insn->code) == BPF_IND)) {"
    },
    {
        "line": 59,
        "fullcodeline": "if (cnt == 0 || cnt >= ARRAY_SIZE(insn_buf)) {"
    },
    {
        "line": 65,
        "fullcodeline": "if (!new_prog)"
    },
    {
        "line": 104,
        "fullcodeline": "if (!bpf_map_ptr_unpriv(aux))"
    },
    {
        "line": 113,
        "fullcodeline": "if (bpf_map_ptr_poisoned(aux)) {"
    },
    {
        "line": 128,
        "fullcodeline": "if (!new_prog)"
    },
    {
        "line": 147,
        "fullcodeline": "insn->imm == BPF_FUNC_map_peek_elem)) {"
    },
    {
        "line": 149,
        "fullcodeline": "if (bpf_map_ptr_poisoned(aux))"
    },
    {
        "line": 154,
        "fullcodeline": "if (insn->imm == BPF_FUNC_map_lookup_elem &&"
    },
    {
        "line": 226,
        "fullcodeline": "func_id_name(insn->imm), insn->imm);"
    },
    {
        "line": 227,
        "fullcodeline": "return -EFAULT;"
    },
    {
        "line": 16,
        "fullcodeline": "insn->code == (BPF_ALU64 | BPF_DIV | BPF_X) ||"
    },
    {
        "line": 21,
        "fullcodeline": "BPF_MOV32_REG(insn->src_reg, insn->src_reg),"
    },
    {
        "line": 23,
        "fullcodeline": "BPF_JMP_IMM(BPF_JNE, insn->src_reg, 0, 2),"
    },
    {
        "line": 24,
        "fullcodeline": "BPF_ALU32_REG(BPF_XOR, insn->dst_reg, insn->dst_reg),"
    },
    {
        "line": 25,
        "fullcodeline": "BPF_JMP_IMM(BPF_JA, 0, 0, 1),"
    },
    {
        "line": 29,
        "fullcodeline": "BPF_MOV32_REG(insn->src_reg, insn->src_reg),"
    },
    {
        "line": 31,
        "fullcodeline": "BPF_JMP_IMM(BPF_JEQ, insn->src_reg, 0, 1),"
    },
    {
        "line": 37,
        "fullcodeline": "insn->code == (BPF_ALU | BPF_DIV | BPF_X)) {"
    },
    {
        "line": 38,
        "fullcodeline": "patchlet = mask_and_div + (is64 ? 1 : 0);"
    },
    {
        "line": 39,
        "fullcodeline": "cnt = ARRAY_SIZE(mask_and_div) - (is64 ? 1 : 0);"
    },
    {
        "line": 60,
        "fullcodeline": "verbose(env, \"bpf verifier is misconfigured\\n\");"
    },
    {
        "line": 114,
        "fullcodeline": "verbose(env, \"tail_call abusing map_ptr\\n\");"
    },
    {
        "line": 146,
        "fullcodeline": "insn->imm == BPF_FUNC_map_pop_elem    ||"
    },
    {
        "line": 156,
        "fullcodeline": "cnt = ops->map_gen_lookup(map_ptr, insn_buf);"
    },
    {
        "line": 162,
        "fullcodeline": "new_prog = bpf_patch_insn_data(env, i + delta,"
    },
    {
        "line": 167,
        "fullcodeline": "delta    += cnt - 1;"
    },
    {
        "line": 168,
        "fullcodeline": "env->prog = prog = new_prog;"
    },
    {
        "line": 169,
        "fullcodeline": "insn      = new_prog->insnsi + i + delta;"
    },
    {
        "line": 190,
        "fullcodeline": "insn->imm = BPF_CAST_CALL(ops->map_lookup_elem) -"
    },
    {
        "line": 194,
        "fullcodeline": "insn->imm = BPF_CAST_CALL(ops->map_update_elem) -"
    },
    {
        "line": 198,
        "fullcodeline": "insn->imm = BPF_CAST_CALL(ops->map_delete_elem) -"
    },
    {
        "line": 202,
        "fullcodeline": "insn->imm = BPF_CAST_CALL(ops->map_push_elem) -"
    },
    {
        "line": 206,
        "fullcodeline": "insn->imm = BPF_CAST_CALL(ops->map_pop_elem) -"
    },
    {
        "line": 210,
        "fullcodeline": "insn->imm = BPF_CAST_CALL(ops->map_peek_elem) -"
    },
    {
        "line": 41,
        "fullcodeline": "patchlet = mask_and_mod + (is64 ? 1 : 0);"
    },
    {
        "line": 42,
        "fullcodeline": "cnt = ARRAY_SIZE(mask_and_mod) - (is64 ? 1 : 0);"
    },
    {
        "line": 47,
        "fullcodeline": "return -ENOMEM;"
    },
    {
        "line": 61,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 66,
        "fullcodeline": "return -ENOMEM;"
    },
    {
        "line": 103,
        "fullcodeline": "aux = &env->insn_aux_data[i + delta];"
    },
    {
        "line": 115,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 129,
        "fullcodeline": "return -ENOMEM;"
    },
    {
        "line": 145,
        "fullcodeline": "insn->imm == BPF_FUNC_map_push_elem   ||"
    },
    {
        "line": 148,
        "fullcodeline": "aux = &env->insn_aux_data[i + delta];"
    },
    {
        "line": 157,
        "fullcodeline": "if (cnt == 0 || cnt >= ARRAY_SIZE(insn_buf)) {"
    },
    {
        "line": 164,
        "fullcodeline": "if (!new_prog)"
    },
    {
        "line": 174,
        "fullcodeline": "(void *(*)(struct bpf_map *map, void *key))NULL));"
    },
    {
        "line": 176,
        "fullcodeline": "(int (*)(struct bpf_map *map, void *key))NULL));"
    },
    {
        "line": 178,
        "fullcodeline": "(int (*)(struct bpf_map *map, void *key, void *value,"
    },
    {
        "line": 181,
        "fullcodeline": "(int (*)(struct bpf_map *map, void *value,"
    },
    {
        "line": 184,
        "fullcodeline": "(int (*)(struct bpf_map *map, void *value))NULL));"
    },
    {
        "line": 186,
        "fullcodeline": "(int (*)(struct bpf_map *map, void *value))NULL));"
    },
    {
        "line": 144,
        "fullcodeline": "insn->imm == BPF_FUNC_map_delete_elem ||"
    },
    {
        "line": 158,
        "fullcodeline": "verbose(env, \"bpf verifier is misconfigured\\n\");"
    },
    {
        "line": 143,
        "fullcodeline": "insn->imm == BPF_FUNC_map_update_elem ||"
    },
    {
        "line": 159,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 165,
        "fullcodeline": "return -ENOMEM;"
    }
]