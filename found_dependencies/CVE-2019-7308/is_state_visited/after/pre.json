[
    {
        "line": 5,
        "fullcodeline": "struct bpf_verifier_state *cur = env->cur_state, *new;"
    },
    {
        "line": 6,
        "fullcodeline": "int i, j, err, states_cnt = 0;"
    },
    {
        "line": 8,
        "fullcodeline": "sl = env->explored_states[insn_idx];"
    },
    {
        "line": 15,
        "fullcodeline": "clean_live_states(env, insn_idx, cur);"
    },
    {
        "line": 48,
        "fullcodeline": "new_sl = kzalloc(sizeof(struct bpf_verifier_state_list), GFP_KERNEL);"
    },
    {
        "line": 53,
        "fullcodeline": "new = &new_sl->state;"
    },
    {
        "line": 54,
        "fullcodeline": "err = copy_verifier_state(new, cur);"
    },
    {
        "line": 60,
        "fullcodeline": "new_sl->next = env->explored_states[insn_idx];"
    },
    {
        "line": 9,
        "fullcodeline": "if (!sl)"
    },
    {
        "line": 17,
        "fullcodeline": "while (sl != STATE_LIST_MARK) {"
    },
    {
        "line": 49,
        "fullcodeline": "if (!new_sl)"
    },
    {
        "line": 69,
        "fullcodeline": "for (j = 0; j <= cur->curframe; j++)"
    },
    {
        "line": 78,
        "fullcodeline": "for (i = 0; i < BPF_REG_FP; i++)"
    },
    {
        "line": 82,
        "fullcodeline": "for (j = 0; j <= cur->curframe; j++) {"
    },
    {
        "line": 34,
        "fullcodeline": "sl = sl->next;"
    },
    {
        "line": 35,
        "fullcodeline": "states_cnt++;"
    },
    {
        "line": 38,
        "fullcodeline": "if (!env->allow_ptr_leaks && states_cnt > BPF_COMPLEXITY_LIMIT_STATES)"
    },
    {
        "line": 56,
        "fullcodeline": "free_verifier_state(new, false);"
    },
    {
        "line": 70,
        "fullcodeline": "for (i = j < cur->curframe ? BPF_REG_6 : 0; i < BPF_REG_FP; i++)"
    },
    {
        "line": 83,
        "fullcodeline": "struct bpf_func_state *frame = cur->frame[j];"
    },
    {
        "line": 18,
        "fullcodeline": "if (states_equal(env, &sl->state, cur)) {"
    },
    {
        "line": 50,
        "fullcodeline": "return -ENOMEM;"
    },
    {
        "line": 86,
        "fullcodeline": "for (i = 0; i < frame->allocated_stack / BPF_REG_SIZE; i++) {"
    },
    {
        "line": 29,
        "fullcodeline": "err = propagate_liveness(env, &sl->state, cur);"
    }
]