[
    {
        "line": 11,
        "fullcodeline": "for (i = 0; i < old->allocated_stack; i++) {"
    },
    {
        "line": 12,
        "fullcodeline": "spi = i / BPF_REG_SIZE;"
    },
    {
        "line": 14,
        "fullcodeline": "if (!(old->stack[spi].spilled_ptr.live & REG_LIVE_READ)) {"
    },
    {
        "line": 20,
        "fullcodeline": "if (old->stack[spi].slot_type[i % BPF_REG_SIZE] == STACK_INVALID)"
    },
    {
        "line": 26,
        "fullcodeline": "if (i >= cur->allocated_stack)"
    },
    {
        "line": 33,
        "fullcodeline": "if (old->stack[spi].slot_type[i % BPF_REG_SIZE] == STACK_MISC &&"
    },
    {
        "line": 36,
        "fullcodeline": "if (old->stack[spi].slot_type[i % BPF_REG_SIZE] !="
    },
    {
        "line": 44,
        "fullcodeline": "if (i % BPF_REG_SIZE)"
    },
    {
        "line": 46,
        "fullcodeline": "if (old->stack[spi].slot_type[0] != STACK_SPILL)"
    },
    {
        "line": 48,
        "fullcodeline": "if (!regsafe(&old->stack[spi].spilled_ptr,"
    },
    {
        "line": 15,
        "fullcodeline": "i += BPF_REG_SIZE - 1;"
    },
    {
        "line": 34,
        "fullcodeline": "cur->stack[spi].slot_type[i % BPF_REG_SIZE] == STACK_ZERO)"
    },
    {
        "line": 37,
        "fullcodeline": "cur->stack[spi].slot_type[i % BPF_REG_SIZE])"
    }
]