[
    {
        "line": 3,
        "fullcodeline": "struct vcpu_vmx *vmx = to_vmx(vcpu);"
    },
    {
        "line": 4,
        "fullcodeline": "struct kvm_run *kvm_run = vcpu->run;"
    },
    {
        "line": 10,
        "fullcodeline": "vect_info = vmx->idt_vectoring_info;"
    },
    {
        "line": 11,
        "fullcodeline": "intr_info = vmx->exit_intr_info;"
    },
    {
        "line": 35,
        "fullcodeline": "error_code = 0;"
    },
    {
        "line": 66,
        "fullcodeline": "ex_no = intr_info & INTR_INFO_VECTOR_MASK;"
    },
    {
        "line": 13,
        "fullcodeline": "if (is_machine_check(intr_info))"
    },
    {
        "line": 16,
        "fullcodeline": "if ((intr_info & INTR_INFO_INTR_TYPE_MASK) == INTR_TYPE_NMI_INTR)"
    },
    {
        "line": 19,
        "fullcodeline": "if (is_no_device(intr_info)) {"
    },
    {
        "line": 24,
        "fullcodeline": "if (is_invalid_opcode(intr_info)) {"
    },
    {
        "line": 36,
        "fullcodeline": "if (intr_info & INTR_INFO_DELIVER_CODE_MASK)"
    },
    {
        "line": 55,
        "fullcodeline": "if (is_page_fault(intr_info)) {"
    },
    {
        "line": 29,
        "fullcodeline": "er = emulate_instruction(vcpu, EMULTYPE_TRAP_UD);"
    },
    {
        "line": 37,
        "fullcodeline": "error_code = vmcs_read32(VM_EXIT_INTR_ERROR_CODE);"
    },
    {
        "line": 44,
        "fullcodeline": "if ((vect_info & VECTORING_INFO_VALID_MASK) &&"
    },
    {
        "line": 45,
        "fullcodeline": "!(is_page_fault(intr_info) && !(error_code & PFERR_RSVD_MASK))) {"
    },
    {
        "line": 46,
        "fullcodeline": "vcpu->run->exit_reason = KVM_EXIT_INTERNAL_ERROR;"
    },
    {
        "line": 47,
        "fullcodeline": "vcpu->run->internal.suberror = KVM_INTERNAL_ERROR_SIMUL_EX;"
    },
    {
        "line": 57,
        "fullcodeline": "BUG_ON(enable_ept);"
    },
    {
        "line": 58,
        "fullcodeline": "cr2 = vmcs_readl(EXIT_QUALIFICATION);"
    },
    {
        "line": 59,
        "fullcodeline": "trace_kvm_page_fault(cr2, error_code);"
    },
    {
        "line": 68,
        "fullcodeline": "if (vmx->rmode.vm86_active && rmode_exception(vcpu, ex_no))"
    },
    {
        "line": 73,
        "fullcodeline": "dr6 = vmcs_readl(EXIT_QUALIFICATION);"
    },
    {
        "line": 95,
        "fullcodeline": "kvm_run->exit_reason = KVM_EXIT_DEBUG;"
    },
    {
        "line": 96,
        "fullcodeline": "rip = kvm_rip_read(vcpu);"
    },
    {
        "line": 101,
        "fullcodeline": "kvm_run->exit_reason = KVM_EXIT_EXCEPTION;"
    },
    {
        "line": 14,
        "fullcodeline": "return handle_machine_check(vcpu);"
    },
    {
        "line": 25,
        "fullcodeline": "if (is_guest_mode(vcpu)) {"
    },
    {
        "line": 30,
        "fullcodeline": "if (er != EMULATE_DONE)"
    },
    {
        "line": 61,
        "fullcodeline": "if (kvm_event_needs_reinjection(vcpu))"
    },
    {
        "line": 63,
        "fullcodeline": "return kvm_mmu_page_fault(vcpu, cr2, error_code, NULL, 0);"
    },
    {
        "line": 69,
        "fullcodeline": "return handle_rmode_exception(vcpu, ex_no, error_code);"
    },
    {
        "line": 84,
        "fullcodeline": "kvm_run->debug.arch.dr6 = dr6 | DR6_FIXED_1;"
    },
    {
        "line": 85,
        "fullcodeline": "kvm_run->debug.arch.dr7 = vmcs_readl(GUEST_DR7);"
    },
    {
        "line": 94,
        "fullcodeline": "vmcs_read32(VM_EXIT_INSTRUCTION_LEN);"
    },
    {
        "line": 62,
        "fullcodeline": "kvm_mmu_unprotect_page_virt(vcpu, cr2);"
    },
    {
        "line": 74,
        "fullcodeline": "if (!(vcpu->guest_debug &"
    },
    {
        "line": 76,
        "fullcodeline": "vcpu->arch.dr6 &= ~15;"
    },
    {
        "line": 81,
        "fullcodeline": "kvm_queue_exception(vcpu, DB_VECTOR);"
    },
    {
        "line": 97,
        "fullcodeline": "kvm_run->debug.arch.pc = vmcs_readl(GUEST_CS_BASE) + rip;"
    },
    {
        "line": 75,
        "fullcodeline": "(KVM_GUESTDBG_SINGLESTEP | KVM_GUESTDBG_USE_HW_BP))) {"
    },
    {
        "line": 77,
        "fullcodeline": "vcpu->arch.dr6 |= dr6 | DR6_RTM;"
    },
    {
        "line": 78,
        "fullcodeline": "if (!(dr6 & ~DR6_RESERVED)) /* icebp */"
    },
    {
        "line": 79,
        "fullcodeline": "skip_emulated_instruction(vcpu);"
    }
]