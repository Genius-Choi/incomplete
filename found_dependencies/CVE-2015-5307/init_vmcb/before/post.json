[
    {
        "line": 6,
        "fullcodeline": "svm->vcpu.fpu_active = 1;"
    },
    {
        "line": 7,
        "fullcodeline": "svm->vcpu.arch.hflags = 0;"
    },
    {
        "line": 9,
        "fullcodeline": "set_cr_intercept(svm, INTERCEPT_CR0_READ);"
    },
    {
        "line": 10,
        "fullcodeline": "set_cr_intercept(svm, INTERCEPT_CR3_READ);"
    },
    {
        "line": 11,
        "fullcodeline": "set_cr_intercept(svm, INTERCEPT_CR4_READ);"
    },
    {
        "line": 12,
        "fullcodeline": "set_cr_intercept(svm, INTERCEPT_CR0_WRITE);"
    },
    {
        "line": 13,
        "fullcodeline": "set_cr_intercept(svm, INTERCEPT_CR3_WRITE);"
    },
    {
        "line": 14,
        "fullcodeline": "set_cr_intercept(svm, INTERCEPT_CR4_WRITE);"
    },
    {
        "line": 15,
        "fullcodeline": "set_cr_intercept(svm, INTERCEPT_CR8_WRITE);"
    },
    {
        "line": 17,
        "fullcodeline": "set_dr_intercepts(svm);"
    },
    {
        "line": 19,
        "fullcodeline": "set_exception_intercept(svm, PF_VECTOR);"
    },
    {
        "line": 20,
        "fullcodeline": "set_exception_intercept(svm, UD_VECTOR);"
    },
    {
        "line": 21,
        "fullcodeline": "set_exception_intercept(svm, MC_VECTOR);"
    },
    {
        "line": 23,
        "fullcodeline": "set_intercept(svm, INTERCEPT_INTR);"
    },
    {
        "line": 24,
        "fullcodeline": "set_intercept(svm, INTERCEPT_NMI);"
    },
    {
        "line": 25,
        "fullcodeline": "set_intercept(svm, INTERCEPT_SMI);"
    },
    {
        "line": 26,
        "fullcodeline": "set_intercept(svm, INTERCEPT_SELECTIVE_CR0);"
    },
    {
        "line": 27,
        "fullcodeline": "set_intercept(svm, INTERCEPT_RDPMC);"
    },
    {
        "line": 28,
        "fullcodeline": "set_intercept(svm, INTERCEPT_CPUID);"
    },
    {
        "line": 29,
        "fullcodeline": "set_intercept(svm, INTERCEPT_INVD);"
    },
    {
        "line": 30,
        "fullcodeline": "set_intercept(svm, INTERCEPT_HLT);"
    },
    {
        "line": 31,
        "fullcodeline": "set_intercept(svm, INTERCEPT_INVLPG);"
    },
    {
        "line": 32,
        "fullcodeline": "set_intercept(svm, INTERCEPT_INVLPGA);"
    },
    {
        "line": 33,
        "fullcodeline": "set_intercept(svm, INTERCEPT_IOIO_PROT);"
    },
    {
        "line": 34,
        "fullcodeline": "set_intercept(svm, INTERCEPT_MSR_PROT);"
    },
    {
        "line": 35,
        "fullcodeline": "set_intercept(svm, INTERCEPT_TASK_SWITCH);"
    },
    {
        "line": 36,
        "fullcodeline": "set_intercept(svm, INTERCEPT_SHUTDOWN);"
    },
    {
        "line": 37,
        "fullcodeline": "set_intercept(svm, INTERCEPT_VMRUN);"
    },
    {
        "line": 38,
        "fullcodeline": "set_intercept(svm, INTERCEPT_VMMCALL);"
    },
    {
        "line": 39,
        "fullcodeline": "set_intercept(svm, INTERCEPT_VMLOAD);"
    },
    {
        "line": 40,
        "fullcodeline": "set_intercept(svm, INTERCEPT_VMSAVE);"
    },
    {
        "line": 41,
        "fullcodeline": "set_intercept(svm, INTERCEPT_STGI);"
    },
    {
        "line": 42,
        "fullcodeline": "set_intercept(svm, INTERCEPT_CLGI);"
    },
    {
        "line": 43,
        "fullcodeline": "set_intercept(svm, INTERCEPT_SKINIT);"
    },
    {
        "line": 44,
        "fullcodeline": "set_intercept(svm, INTERCEPT_WBINVD);"
    },
    {
        "line": 45,
        "fullcodeline": "set_intercept(svm, INTERCEPT_MONITOR);"
    },
    {
        "line": 46,
        "fullcodeline": "set_intercept(svm, INTERCEPT_MWAIT);"
    },
    {
        "line": 47,
        "fullcodeline": "set_intercept(svm, INTERCEPT_XSETBV);"
    },
    {
        "line": 49,
        "fullcodeline": "control->iopm_base_pa = iopm_base;"
    },
    {
        "line": 50,
        "fullcodeline": "control->msrpm_base_pa = __pa(svm->msrpm);"
    },
    {
        "line": 51,
        "fullcodeline": "control->int_ctl = V_INTR_MASKING_MASK;"
    },
    {
        "line": 53,
        "fullcodeline": "init_seg(&save->es);"
    },
    {
        "line": 54,
        "fullcodeline": "init_seg(&save->ss);"
    },
    {
        "line": 55,
        "fullcodeline": "init_seg(&save->ds);"
    },
    {
        "line": 56,
        "fullcodeline": "init_seg(&save->fs);"
    },
    {
        "line": 57,
        "fullcodeline": "init_seg(&save->gs);"
    },
    {
        "line": 59,
        "fullcodeline": "save->cs.selector = 0xf000;"
    },
    {
        "line": 60,
        "fullcodeline": "save->cs.base = 0xffff0000;"
    },
    {
        "line": 62,
        "fullcodeline": "save->cs.attrib = SVM_SELECTOR_READ_MASK | SVM_SELECTOR_P_MASK |"
    },
    {
        "line": 64,
        "fullcodeline": "save->cs.limit = 0xffff;"
    },
    {
        "line": 66,
        "fullcodeline": "save->gdtr.limit = 0xffff;"
    },
    {
        "line": 67,
        "fullcodeline": "save->idtr.limit = 0xffff;"
    },
    {
        "line": 69,
        "fullcodeline": "init_sys_seg(&save->ldtr, SEG_TYPE_LDT);"
    },
    {
        "line": 70,
        "fullcodeline": "init_sys_seg(&save->tr, SEG_TYPE_BUSY_TSS16);"
    },
    {
        "line": 72,
        "fullcodeline": "svm_set_efer(&svm->vcpu, 0);"
    },
    {
        "line": 73,
        "fullcodeline": "save->dr6 = 0xffff0ff0;"
    },
    {
        "line": 74,
        "fullcodeline": "kvm_set_rflags(&svm->vcpu, 2);"
    },
    {
        "line": 75,
        "fullcodeline": "save->rip = 0x0000fff0;"
    },
    {
        "line": 76,
        "fullcodeline": "svm->vcpu.arch.regs[VCPU_REGS_RIP] = save->rip;"
    },
    {
        "line": 82,
        "fullcodeline": "svm_set_cr0(&svm->vcpu, X86_CR0_NW | X86_CR0_CD | X86_CR0_ET);"
    },
    {
        "line": 83,
        "fullcodeline": "kvm_mmu_reset_context(&svm->vcpu);"
    },
    {
        "line": 85,
        "fullcodeline": "save->cr4 = X86_CR4_PAE;"
    },
    {
        "line": 99,
        "fullcodeline": "svm->asid_generation = 0;"
    },
    {
        "line": 101,
        "fullcodeline": "svm->nested.vmcb = 0;"
    },
    {
        "line": 102,
        "fullcodeline": "svm->vcpu.arch.hflags = 0;"
    },
    {
        "line": 109,
        "fullcodeline": "mark_all_dirty(svm->vmcb);"
    },
    {
        "line": 111,
        "fullcodeline": "enable_gif(svm);"
    },
    {
        "line": 104,
        "fullcodeline": "if (boot_cpu_has(X86_FEATURE_PAUSEFILTER)) {"
    },
    {
        "line": 90,
        "fullcodeline": "control->nested_ctl = 1;"
    },
    {
        "line": 91,
        "fullcodeline": "clr_intercept(svm, INTERCEPT_INVLPG);"
    },
    {
        "line": 92,
        "fullcodeline": "clr_exception_intercept(svm, PF_VECTOR);"
    },
    {
        "line": 93,
        "fullcodeline": "clr_cr_intercept(svm, INTERCEPT_CR3_READ);"
    },
    {
        "line": 94,
        "fullcodeline": "clr_cr_intercept(svm, INTERCEPT_CR3_WRITE);"
    },
    {
        "line": 96,
        "fullcodeline": "save->cr3 = 0;"
    },
    {
        "line": 97,
        "fullcodeline": "save->cr4 = 0;"
    },
    {
        "line": 105,
        "fullcodeline": "control->pause_filter_count = 3000;"
    },
    {
        "line": 106,
        "fullcodeline": "set_intercept(svm, INTERCEPT_PAUSE);"
    }
]