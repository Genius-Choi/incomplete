[
    {
        "line": 5,
        "fullcodeline": "unsigned count = field->report_count;"
    },
    {
        "line": 6,
        "fullcodeline": "unsigned offset = field->report_offset;"
    },
    {
        "line": 7,
        "fullcodeline": "unsigned size = field->report_size;"
    },
    {
        "line": 8,
        "fullcodeline": "__s32 min = field->logical_minimum;"
    },
    {
        "line": 9,
        "fullcodeline": "__s32 max = field->logical_maximum;"
    },
    {
        "line": 12,
        "fullcodeline": "value = kmalloc(sizeof(__s32) * count, GFP_ATOMIC);"
    },
    {
        "line": 48,
        "fullcodeline": "memcpy(field->value, value, count * sizeof(__s32));"
    },
    {
        "line": 13,
        "fullcodeline": "if (!value)"
    },
    {
        "line": 16,
        "fullcodeline": "for (n = 0; n < count; n++) {"
    },
    {
        "line": 30,
        "fullcodeline": "for (n = 0; n < count; n++) {"
    },
    {
        "line": 18,
        "fullcodeline": "value[n] = min < 0 ?"
    },
    {
        "line": 32,
        "fullcodeline": "if (HID_MAIN_ITEM_VARIABLE & field->flags) {"
    },
    {
        "line": 19,
        "fullcodeline": "snto32(hid_field_extract(hid, data, offset + n * size,"
    },
    {
        "line": 21,
        "fullcodeline": "hid_field_extract(hid, data, offset + n * size, size);"
    },
    {
        "line": 24,
        "fullcodeline": "if (!(field->flags & HID_MAIN_ITEM_VARIABLE) &&"
    },
    {
        "line": 26,
        "fullcodeline": "field->usage[value[n] - min].hid == HID_UP_KEYBOARD + 1)"
    },
    {
        "line": 33,
        "fullcodeline": "hid_process_event(hid, field, &field->usage[n], value[n], interrupt);"
    },
    {
        "line": 37,
        "fullcodeline": "if (field->value[n] >= min && field->value[n] <= max"
    },
    {
        "line": 39,
        "fullcodeline": "&& search(value, field->value[n], count))"
    },
    {
        "line": 40,
        "fullcodeline": "hid_process_event(hid, field, &field->usage[field->value[n] - min], 0, interrupt);"
    },
    {
        "line": 42,
        "fullcodeline": "if (value[n] >= min && value[n] <= max"
    },
    {
        "line": 44,
        "fullcodeline": "&& search(field->value, value[n], count))"
    },
    {
        "line": 45,
        "fullcodeline": "hid_process_event(hid, field, &field->usage[value[n] - min], 1, interrupt);"
    },
    {
        "line": 25,
        "fullcodeline": "value[n] >= min && value[n] <= max &&"
    },
    {
        "line": 38,
        "fullcodeline": "&& field->usage[field->value[n] - min].hid"
    },
    {
        "line": 43,
        "fullcodeline": "&& field->usage[value[n] - min].hid"
    }
]