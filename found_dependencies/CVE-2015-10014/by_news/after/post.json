[
    {
        "line": 6,
        "fullcodeline": "@location_radius = (distance_between_points([bounds_ne['lat'], bounds_ne['lng']], [bounds_sw['lat'], bounds_sw['lng']])/1000).round(0)"
    },
    {
        "line": 8,
        "fullcodeline": "sql = <<-SQL"
    },
    {
        "line": 19,
        "fullcodeline": "sql.gsub!(':uke_import_id', @active_import.id.to_s)"
    },
    {
        "line": 20,
        "fullcodeline": "sql.gsub!(':lat_ne', conn.quote(bounds_ne['lat'].to_s))"
    },
    {
        "line": 21,
        "fullcodeline": "sql.gsub!(':lat_sw', conn.quote(bounds_sw['lat'].to_s))"
    },
    {
        "line": 22,
        "fullcodeline": "sql.gsub!(':lon_ne', conn.quote(bounds_ne['lng'].to_s))"
    },
    {
        "line": 23,
        "fullcodeline": "sql.gsub!(':lon_sw', conn.quote(bounds_sw['lng'].to_s))"
    },
    {
        "line": 24,
        "fullcodeline": "sql.gsub!(':lat', conn.quote(@location.latitude.to_s))"
    },
    {
        "line": 25,
        "fullcodeline": "sql.gsub!(':lon', conn.quote(@location.longitude.to_s))"
    },
    {
        "line": 2,
        "fullcodeline": "return nil if @q.strip[0..4] != 'news:' || (@location = Geocoder.search(@q.gsub('news:', '').strip).first).nil?"
    },
    {
        "line": 27,
        "fullcodeline": "result_to_hash select_using_uke_stations_result(sql)"
    },
    {
        "line": 4,
        "fullcodeline": "bounds_ne = @location.geometry['bounds']['northeast']"
    },
    {
        "line": 5,
        "fullcodeline": "bounds_sw = @location.geometry['bounds']['southwest']"
    }
]