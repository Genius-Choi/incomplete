[
    {
        "line": 2,
        "fullcodeline": "char buf[512];"
    },
    {
        "line": 5,
        "fullcodeline": "char *args[MAXARGS];"
    },
    {
        "line": 11,
        "fullcodeline": "config_fp = fopen (config_file, \"r\");"
    },
    {
        "line": 16,
        "fullcodeline": "linenum = errcnt = 0;"
    },
    {
        "line": 177,
        "fullcodeline": "fclose (config_fp);"
    },
    {
        "line": 8,
        "fullcodeline": "if (T.debug > 0)"
    },
    {
        "line": 12,
        "fullcodeline": "if (!config_fp) {"
    },
    {
        "line": 17,
        "fullcodeline": "while (fgets (buf, sizeof (buf), config_fp)) {"
    },
    {
        "line": 9,
        "fullcodeline": "syslog (LOG_DEBUG, \"config file: %s\", config_file);"
    },
    {
        "line": 13,
        "fullcodeline": "syslog (LOG_ERR, \"can't open config file: %s\", config_file);"
    },
    {
        "line": 18,
        "fullcodeline": "linenum++;"
    },
    {
        "line": 20,
        "fullcodeline": "cp = strchr (buf, '\\n');"
    },
    {
        "line": 23,
        "fullcodeline": "cp = strchr (buf, '\\n');"
    },
    {
        "line": 26,
        "fullcodeline": "cp = strchr (buf, '#'); /* strip comment */"
    },
    {
        "line": 29,
        "fullcodeline": "cp = strchr (buf, ';'); /* strip comment */"
    },
    {
        "line": 34,
        "fullcodeline": "args[argcnt = 0] = strtok (buf, \" \\t\");"
    },
    {
        "line": 180,
        "fullcodeline": "syslog (LOG_ERR, \"errors found in config file. errcnt = %d\", errcnt);"
    },
    {
        "line": 14,
        "fullcodeline": "return -1;"
    },
    {
        "line": 35,
        "fullcodeline": "while (args[argcnt] && ++argcnt < MAXARGS)"
    },
    {
        "line": 36,
        "fullcodeline": "args[argcnt] = strtok (NULL, \" \\t\");"
    },
    {
        "line": 38,
        "fullcodeline": "if (!args[0]) /* empty line (or only comment) */"
    },
    {
        "line": 41,
        "fullcodeline": "if (!strcasecmp (args[0], \"forwarder\")) {"
    },
    {
        "line": 181,
        "fullcodeline": "return -1;"
    },
    {
        "line": 184,
        "fullcodeline": "syslog (LOG_INFO, \"configuration file loaded.\");"
    },
    {
        "line": 22,
        "fullcodeline": "*cp = '\\0';"
    },
    {
        "line": 25,
        "fullcodeline": "*cp = '\\0';"
    },
    {
        "line": 28,
        "fullcodeline": "*cp = '\\0';"
    },
    {
        "line": 31,
        "fullcodeline": "*cp = '\\0';"
    },
    {
        "line": 42,
        "fullcodeline": "if (argcnt < 2 || argcnt > 4 ) {"
    },
    {
        "line": 43,
        "fullcodeline": "syslog (LOG_ERR, \"line %d: invalid format: forwarder <IPaddr> [port <port>]\", linenum);"
    },
    {
        "line": 44,
        "fullcodeline": "errcnt++;"
    },
    {
        "line": 67,
        "fullcodeline": "} else if (!strcasecmp (args[0], \"prefix\")) {"
    },
    {
        "line": 46,
        "fullcodeline": "int port = PORT_TO, i;"
    },
    {
        "line": 48,
        "fullcodeline": "i = 2;"
    },
    {
        "line": 49,
        "fullcodeline": "if (argcnt > i) {"
    },
    {
        "line": 64,
        "fullcodeline": "if (fwd_add (args[1], port) == -1)"
    },
    {
        "line": 68,
        "fullcodeline": "if (argcnt != 2) {"
    },
    {
        "line": 69,
        "fullcodeline": "syslog (LOG_ERR, \"line %d: invalid format: prefix <IPv6prefix>\", linenum);"
    },
    {
        "line": 70,
        "fullcodeline": "errcnt++;"
    },
    {
        "line": 78,
        "fullcodeline": "} else if (!strcasecmp (args[0], \"allow\")) {"
    },
    {
        "line": 50,
        "fullcodeline": "if (!strcasecmp (args[i], \"port\")) {"
    },
    {
        "line": 65,
        "fullcodeline": "return -1; /* serious trouble */"
    },
    {
        "line": 72,
        "fullcodeline": "if (conv_trick_conf ((u_char *)args[1])) {"
    },
    {
        "line": 79,
        "fullcodeline": "if (argcnt != 2) {"
    },
    {
        "line": 51,
        "fullcodeline": "if (argcnt >= ++i) {"
    },
    {
        "line": 59,
        "fullcodeline": "syslog (LOG_ERR, \"line %d: invalid format, cannot parse unknown attribute: %s\", linenum, args[i]);"
    },
    {
        "line": 60,
        "fullcodeline": "errcnt++;"
    },
    {
        "line": 73,
        "fullcodeline": "syslog (LOG_INFO, \"can not add prefix %d: %s\", T.prefixnum, args[1]);"
    },
    {
        "line": 74,
        "fullcodeline": "errcnt++;"
    },
    {
        "line": 80,
        "fullcodeline": "syslog (LOG_ERR, \"line %d: invalid format: allow <IP address>\", linenum);"
    },
    {
        "line": 81,
        "fullcodeline": "errcnt++;"
    },
    {
        "line": 91,
        "fullcodeline": "} else if (!strcasecmp (args[0], \"retry\")) {"
    },
    {
        "line": 52,
        "fullcodeline": "port = atoi (args[i++]);"
    },
    {
        "line": 76,
        "fullcodeline": "syslog (LOG_INFO, \"prefix %d added: %s\", T.prefixnum, args[1]);"
    },
    {
        "line": 89,
        "fullcodeline": "syslog (LOG_INFO, \"NOTE: http support not enabled!!!\");"
    },
    {
        "line": 54,
        "fullcodeline": "syslog (LOG_ERR, \"line %d: invalid format, missing <port> after port attribute\", linenum);"
    },
    {
        "line": 55,
        "fullcodeline": "errcnt++;"
    },
    {
        "line": 92,
        "fullcodeline": "if (argcnt != 2) {"
    },
    {
        "line": 93,
        "fullcodeline": "syslog (LOG_ERR, \"line %d: invalid format: retry <seconds>\", linenum);"
    },
    {
        "line": 94,
        "fullcodeline": "errcnt++;"
    },
    {
        "line": 98,
        "fullcodeline": "} else if (!strcasecmp (args[0], \"pidfile\")) {"
    },
    {
        "line": 96,
        "fullcodeline": "T.retry_interval = atoi(args[1]);"
    },
    {
        "line": 99,
        "fullcodeline": "if (argcnt != 2) {"
    },
    {
        "line": 100,
        "fullcodeline": "syslog (LOG_ERR, \"line %d: invalid format: pidfile <filename>\", linenum);"
    },
    {
        "line": 101,
        "fullcodeline": "errcnt++;"
    },
    {
        "line": 105,
        "fullcodeline": "} else if (!strcasecmp (args[0], \"interfaces\")) {"
    },
    {
        "line": 103,
        "fullcodeline": "T.pidfile = strdup(args[1]);"
    },
    {
        "line": 108,
        "fullcodeline": "if (argcnt < 2) {"
    },
    {
        "line": 113,
        "fullcodeline": "for (i = 0; T.iflist[i] && i < MAXINTERFACES; i++);"
    },
    {
        "line": 115,
        "fullcodeline": "if (i + argcnt-1 > MAXINTERFACES) {"
    },
    {
        "line": 109,
        "fullcodeline": "syslog (LOG_ERR, \"line %d: invalid format: interfaces <ifa> <ifb> ...\", linenum);"
    },
    {
        "line": 110,
        "fullcodeline": "errcnt++;"
    },
    {
        "line": 116,
        "fullcodeline": "syslog (LOG_ERR, \"line %d: to many interfaces, more than %d\", linenum, MAXINTERFACES);"
    },
    {
        "line": 117,
        "fullcodeline": "errcnt++;"
    },
    {
        "line": 135,
        "fullcodeline": "} else if (!strcasecmp (args[0], \"port\")) {"
    },
    {
        "line": 119,
        "fullcodeline": "syslog (LOG_DEBUG, \"line %d: %d interfaces listed, no wildcard socket\", linenum, argcnt-1);"
    },
    {
        "line": 121,
        "fullcodeline": "T.iflist[i + argcnt--] = NULL;"
    },
    {
        "line": 136,
        "fullcodeline": "if (argcnt != 2) {"
    },
    {
        "line": 171,
        "fullcodeline": "syslog (LOG_WARNING, \"line %d: unknown keyword in config file: %s\","
    },
    {
        "line": 173,
        "fullcodeline": "errcnt++;"
    },
    {
        "line": 129,
        "fullcodeline": "T.iflist[i+argcnt-1] = strdup(args[argcnt]);"
    },
    {
        "line": 130,
        "fullcodeline": "argcnt--;"
    },
    {
        "line": 133,
        "fullcodeline": "T.wildcard = 0;"
    },
    {
        "line": 137,
        "fullcodeline": "syslog (LOG_ERR, \"line %d: invalid format: port <portnum>\", linenum);"
    },
    {
        "line": 138,
        "fullcodeline": "errcnt++;"
    },
    {
        "line": 123,
        "fullcodeline": "if (!strcmp(args[argcnt], \"*\")) {"
    },
    {
        "line": 140,
        "fullcodeline": "T.port = atoi(args[1]);"
    },
    {
        "line": 125,
        "fullcodeline": "T.iflist[0] = NULL;"
    },
    {
        "line": 126,
        "fullcodeline": "T.wildcard = 1;"
    }
]