[
    {
        "line": 4,
        "fullcodeline": "xml_parser = XMLOutputParser()"
    },
    {
        "line": 5,
        "fullcodeline": "assert DEF_RESULT_EXPECTED == xml_parser.parse(result)"
    },
    {
        "line": 6,
        "fullcodeline": "assert DEF_RESULT_EXPECTED == (await xml_parser.aparse(result))"
    },
    {
        "line": 7,
        "fullcodeline": "assert list(xml_parser.transform(iter(result))) == ["
    },
    {
        "line": 13,
        "fullcodeline": "async def _as_iter(string: str) -> AsyncIterator[str]:"
    },
    {
        "line": 17,
        "fullcodeline": "chunks = [chunk async for chunk in xml_parser.atransform(_as_iter(result))]"
    },
    {
        "line": 18,
        "fullcodeline": "assert chunks == ["
    },
    {
        "line": 8,
        "fullcodeline": "{\"foo\": [{\"bar\": [{\"baz\": None}]}]},"
    },
    {
        "line": 9,
        "fullcodeline": "{\"foo\": [{\"bar\": [{\"baz\": \"slim.shady\"}]}]},"
    },
    {
        "line": 10,
        "fullcodeline": "{\"foo\": [{\"baz\": \"tag\"}]},"
    },
    {
        "line": 19,
        "fullcodeline": "{\"foo\": [{\"bar\": [{\"baz\": None}]}]},"
    },
    {
        "line": 20,
        "fullcodeline": "{\"foo\": [{\"bar\": [{\"baz\": \"slim.shady\"}]}]},"
    },
    {
        "line": 21,
        "fullcodeline": "{\"foo\": [{\"baz\": \"tag\"}]},"
    }
]