[
    {
        "line": 5,
        "fullcodeline": "int err = 0;"
    },
    {
        "line": 6,
        "fullcodeline": "int reserved = 0;"
    },
    {
        "line": 7,
        "fullcodeline": "struct extent_status *es = NULL;"
    },
    {
        "line": 12,
        "fullcodeline": "trace_ext4_es_remove_extent(inode, lblk, len);"
    },
    {
        "line": 13,
        "fullcodeline": "es_debug(\"remove [%u/%u) from extent status tree of inode %lu\\n\","
    },
    {
        "line": 19,
        "fullcodeline": "end = lblk + len - 1;"
    },
    {
        "line": 20,
        "fullcodeline": "BUG_ON(end < lblk);"
    },
    {
        "line": 30,
        "fullcodeline": "write_lock(&EXT4_I(inode)->i_es_lock);"
    },
    {
        "line": 31,
        "fullcodeline": "err = __es_remove_extent(inode, lblk, end, &reserved, es);"
    },
    {
        "line": 38,
        "fullcodeline": "write_unlock(&EXT4_I(inode)->i_es_lock);"
    },
    {
        "line": 42,
        "fullcodeline": "ext4_es_print_tree(inode);"
    },
    {
        "line": 43,
        "fullcodeline": "ext4_da_release_space(inode, reserved);"
    },
    {
        "line": 9,
        "fullcodeline": "if (EXT4_SB(inode->i_sb)->s_mount_state & EXT4_FC_REPLAY)"
    },
    {
        "line": 16,
        "fullcodeline": "if (!len)"
    },
    {
        "line": 23,
        "fullcodeline": "if (err && !es)"
    },
    {
        "line": 24,
        "fullcodeline": "es = __es_alloc_extent(true);"
    },
    {
        "line": 36,
        "fullcodeline": "es = NULL;"
    },
    {
        "line": 34,
        "fullcodeline": "if (!es->es_len)"
    },
    {
        "line": 35,
        "fullcodeline": "__es_free_extent(es);"
    }
]