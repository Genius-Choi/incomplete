[
    {
        "line": 5,
        "fullcodeline": "int do_read = 1;"
    },
    {
        "line": 6,
        "fullcodeline": "int n = 0;"
    },
    {
        "line": 7,
        "fullcodeline": "apr_size_t len = 1;"
    },
    {
        "line": 8,
        "fullcodeline": "apr_size_t plen = 0;"
    },
    {
        "line": 9,
        "fullcodeline": "unsigned short payload_short = 0;"
    },
    {
        "line": 10,
        "fullcodeline": "apr_uint64_t payload_long = 0;"
    },
    {
        "line": 16,
        "fullcodeline": "request_rec *r = ap_lua_check_request_rec(L, 1);"
    },
    {
        "line": 17,
        "fullcodeline": "plaintext = ap_lua_ssl_is_https(r->connection) ? 0 : 1;"
    },
    {
        "line": 20,
        "fullcodeline": "mask_bytes = apr_pcalloc(r->pool, 4);"
    },
    {
        "line": 21,
        "fullcodeline": "sock = ap_get_conn_socket(r->connection);"
    },
    {
        "line": 24,
        "fullcodeline": "do_read = 0;"
    },
    {
        "line": 32,
        "fullcodeline": "if (rv == APR_SUCCESS) {"
    },
    {
        "line": 27,
        "fullcodeline": "rv = apr_socket_recv(sock, &byte, &len);"
    },
    {
        "line": 34,
        "fullcodeline": "ubyte = (unsigned char)byte;"
    },
    {
        "line": 36,
        "fullcodeline": "fin = ubyte >> (CHAR_BIT - 1);"
    },
    {
        "line": 38,
        "fullcodeline": "opcode = ubyte & 0xf;"
    },
    {
        "line": 30,
        "fullcodeline": "rv = lua_websocket_readbytes(r->connection, &byte, 1);"
    },
    {
        "line": 47,
        "fullcodeline": "if (rv == APR_SUCCESS) {"
    },
    {
        "line": 42,
        "fullcodeline": "rv = apr_socket_recv(sock, &byte, &len);"
    },
    {
        "line": 48,
        "fullcodeline": "ubyte = (unsigned char)byte;"
    },
    {
        "line": 50,
        "fullcodeline": "mask = ubyte >> (CHAR_BIT - 1);"
    },
    {
        "line": 52,
        "fullcodeline": "payload = ubyte & 0x7f;"
    },
    {
        "line": 53,
        "fullcodeline": "plen = payload;"
    },
    {
        "line": 45,
        "fullcodeline": "rv = lua_websocket_readbytes(r->connection, &byte, 1);"
    },
    {
        "line": 56,
        "fullcodeline": "if (payload == 126) {"
    },
    {
        "line": 76,
        "fullcodeline": "if (payload == 127) {"
    },
    {
        "line": 111,
        "fullcodeline": "if (plen < (HUGE_STRING_LEN*1024) && plen > 0) {"
    },
    {
        "line": 152,
        "fullcodeline": "if (opcode == 0x09) { /* ping */"
    },
    {
        "line": 57,
        "fullcodeline": "len = 2;"
    },
    {
        "line": 66,
        "fullcodeline": "payload_short = ntohs(payload_short);"
    },
    {
        "line": 77,
        "fullcodeline": "len = 8;"
    },
    {
        "line": 99,
        "fullcodeline": "len = 4;"
    },
    {
        "line": 112,
        "fullcodeline": "apr_size_t remaining = plen;"
    },
    {
        "line": 114,
        "fullcodeline": "apr_off_t at = 0;"
    },
    {
        "line": 115,
        "fullcodeline": "char *buffer = apr_palloc(r->pool, plen+1);"
    },
    {
        "line": 116,
        "fullcodeline": "buffer[plen] = 0;"
    },
    {
        "line": 145,
        "fullcodeline": "lua_pushlstring(L, buffer, (size_t) plen); /* push to stack */"
    },
    {
        "line": 146,
        "fullcodeline": "lua_pushboolean(L, fin); /* push FIN bit to stack as boolean */"
    },
    {
        "line": 153,
        "fullcodeline": "char frame[2];"
    },
    {
        "line": 154,
        "fullcodeline": "plen = 2;"
    },
    {
        "line": 155,
        "fullcodeline": "frame[0] = 0x8A;"
    },
    {
        "line": 156,
        "fullcodeline": "frame[1] = 0;"
    },
    {
        "line": 157,
        "fullcodeline": "apr_socket_send(sock, frame, &plen); /* Pong! */"
    },
    {
        "line": 158,
        "fullcodeline": "do_read = 1;"
    },
    {
        "line": 68,
        "fullcodeline": "if (rv == APR_SUCCESS) {"
    },
    {
        "line": 85,
        "fullcodeline": "if (rv == APR_SUCCESS) {"
    },
    {
        "line": 107,
        "fullcodeline": "if (rv != APR_SUCCESS) {"
    },
    {
        "line": 60,
        "fullcodeline": "rv = apr_socket_recv(sock, (char*) &payload_short, &len);"
    },
    {
        "line": 69,
        "fullcodeline": "plen = payload_short;"
    },
    {
        "line": 79,
        "fullcodeline": "rv = apr_socket_recv(sock, (char*) &payload_long, &len);"
    },
    {
        "line": 86,
        "fullcodeline": "plen = ap_ntoh64(&payload_long);"
    },
    {
        "line": 101,
        "fullcodeline": "rv = apr_socket_recv(sock, (char*) mask_bytes, &len);"
    },
    {
        "line": 63,
        "fullcodeline": "rv = lua_websocket_readbytes(r->connection,"
    },
    {
        "line": 82,
        "fullcodeline": "rv = lua_websocket_readbytes(r->connection,"
    },
    {
        "line": 104,
        "fullcodeline": "rv = lua_websocket_readbytes(r->connection,"
    },
    {
        "line": 119,
        "fullcodeline": "while (remaining > 0) {"
    },
    {
        "line": 132,
        "fullcodeline": "rv = lua_websocket_readbytes(r->connection, buffer,"
    },
    {
        "line": 140,
        "fullcodeline": "for (n = 0; n < plen; n++) {"
    },
    {
        "line": 120,
        "fullcodeline": "received = remaining;"
    },
    {
        "line": 121,
        "fullcodeline": "rv = apr_socket_recv(sock, buffer+at, &received);"
    },
    {
        "line": 141,
        "fullcodeline": "buffer[n] ^= mask_bytes[n%4];"
    },
    {
        "line": 64,
        "fullcodeline": "(char*) &payload_short, 2);"
    },
    {
        "line": 83,
        "fullcodeline": "(char*) &payload_long, 8);"
    },
    {
        "line": 105,
        "fullcodeline": "(char*) mask_bytes, 4);"
    },
    {
        "line": 122,
        "fullcodeline": "if (received > 0 ) {"
    },
    {
        "line": 123,
        "fullcodeline": "remaining -= received;"
    },
    {
        "line": 124,
        "fullcodeline": "at += received;"
    }
]