[
    {
        "line": 7,
        "fullcodeline": "char *s=nullptr, *start_arr=nullptr;"
    },
    {
        "line": 9,
        "fullcodeline": "char *lbuf=nullptr;"
    },
    {
        "line": 10,
        "fullcodeline": "int total_bytes=0, cancel_upload=0, is_arr_upload=0, array_len=0;"
    },
    {
        "line": 11,
        "fullcodeline": "int max_file_size=0, skip_upload=0, anonindex=0;"
    },
    {
        "line": 14,
        "fullcodeline": "int fd=-1;"
    },
    {
        "line": 15,
        "fullcodeline": "void *event_extra_data = nullptr;"
    },
    {
        "line": 16,
        "fullcodeline": "unsigned int llen = 0;"
    },
    {
        "line": 29,
        "fullcodeline": "uploaded_files.clear();"
    },
    {
        "line": 452,
        "fullcodeline": "data = mbuff->post_data;"
    },
    {
        "line": 453,
        "fullcodeline": "size = mbuff->post_size;"
    },
    {
        "line": 462,
        "fullcodeline": "s_rfc1867_data->rfc1867ProtectedVariables.clear();"
    },
    {
        "line": 12,
        "fullcodeline": "std::set<std::string> &uploaded_files = s_rfc1867_data->rfc1867UploadedFiles;"
    },
    {
        "line": 20,
        "fullcodeline": "if (!(mbuff = multipart_buffer_new(transport,"
    },
    {
        "line": 35,
        "fullcodeline": "if (php_rfc1867_callback != nullptr) {"
    },
    {
        "line": 46,
        "fullcodeline": "while (!multipart_buffer_eof(mbuff)) {"
    },
    {
        "line": 454,
        "fullcodeline": "if (php_rfc1867_callback != nullptr) {"
    },
    {
        "line": 22,
        "fullcodeline": "Logger::Warning(\"Unable to initialize the input buffer\");"
    },
    {
        "line": 38,
        "fullcodeline": "event_start.content_length = content_length;"
    },
    {
        "line": 48,
        "fullcodeline": "char buff[FILLUNIT];"
    },
    {
        "line": 49,
        "fullcodeline": "char *cd=nullptr,*param=nullptr,*filename=nullptr, *tmp=nullptr;"
    },
    {
        "line": 50,
        "fullcodeline": "size_t blen=0, wlen=0;"
    },
    {
        "line": 457,
        "fullcodeline": "event_end.post_bytes_processed = mbuff->read_post_bytes;"
    },
    {
        "line": 458,
        "fullcodeline": "php_rfc1867_callback(&s_rfc1867_data->rfc1867ApcData,"
    },
    {
        "line": 461,
        "fullcodeline": "if (lbuf) free(lbuf);"
    },
    {
        "line": 463,
        "fullcodeline": "if (mbuff->boundary_next) free(mbuff->boundary_next);"
    },
    {
        "line": 464,
        "fullcodeline": "if (mbuff->boundary) free(mbuff->boundary);"
    },
    {
        "line": 465,
        "fullcodeline": "if (mbuff->buffer) free(mbuff->buffer);"
    },
    {
        "line": 466,
        "fullcodeline": "if (mbuff) free(mbuff);"
    },
    {
        "line": 39,
        "fullcodeline": "if (php_rfc1867_callback(&s_rfc1867_data->rfc1867ApcData,"
    },
    {
        "line": 54,
        "fullcodeline": "if (!multipart_buffer_headers(mbuff, header)) {"
    },
    {
        "line": 58,
        "fullcodeline": "if ((cd = php_mime_get_hdr_value(header, \"Content-Disposition\"))) {"
    },
    {
        "line": 21,
        "fullcodeline": "(const char *)data, size, boundary))) {"
    },
    {
        "line": 59,
        "fullcodeline": "char *pair=nullptr;"
    },
    {
        "line": 60,
        "fullcodeline": "int end=0;"
    },
    {
        "line": 179,
        "fullcodeline": "total_bytes = cancel_upload = 0;"
    },
    {
        "line": 234,
        "fullcodeline": "offset = 0;"
    },
    {
        "line": 235,
        "fullcodeline": "end = 0;"
    },
    {
        "line": 326,
        "fullcodeline": "is_arr_upload = (start_arr = strchr(param,'[')) &&"
    },
    {
        "line": 356,
        "fullcodeline": "s = strrchr(filename, '\\\\');"
    },
    {
        "line": 375,
        "fullcodeline": "free(filename);"
    },
    {
        "line": 376,
        "fullcodeline": "s = nullptr;"
    },
    {
        "line": 397,
        "fullcodeline": "String val(cd, strlen(cd), CopyString);"
    },
    {
        "line": 398,
        "fullcodeline": "safe_php_register_variable(lbuf, val, files, 0);"
    },
    {
        "line": 404,
        "fullcodeline": "s = \"\";"
    },
    {
        "line": 407,
        "fullcodeline": "add_protected_variable(param);"
    },
    {
        "line": 409,
        "fullcodeline": "Variant tempFileName(temp_filename);"
    },
    {
        "line": 418,
        "fullcodeline": "add_protected_variable(lbuf);"
    },
    {
        "line": 419,
        "fullcodeline": "safe_php_register_variable(lbuf, tempFileName, files, 1);"
    },
    {
        "line": 423,
        "fullcodeline": "error_type = cancel_upload;"
    },
    {
        "line": 438,
        "fullcodeline": "safe_php_register_variable(lbuf, error_type, files, 0);"
    },
    {
        "line": 447,
        "fullcodeline": "safe_php_register_variable(lbuf, file_size, files, 0);"
    },
    {
        "line": 448,
        "fullcodeline": "free(param);"
    },
    {
        "line": 62,
        "fullcodeline": "while (isspace(*cd)) {"
    },
    {
        "line": 66,
        "fullcodeline": "while (*cd && (pair = php_ap_getword(&cd, ';')))"
    },
    {
        "line": 94,
        "fullcodeline": "if (!filename && param) {"
    },
    {
        "line": 146,
        "fullcodeline": "if (!param && !filename) {"
    },
    {
        "line": 151,
        "fullcodeline": "if (!param) {"
    },
    {
        "line": 157,
        "fullcodeline": "if (!skip_upload) {"
    },
    {
        "line": 181,
        "fullcodeline": "if (!skip_upload) {"
    },
    {
        "line": 199,
        "fullcodeline": "if (!skip_upload && php_rfc1867_callback != nullptr) {"
    },
    {
        "line": 229,
        "fullcodeline": "if (strlen(filename) == 0) {"
    },
    {
        "line": 236,
        "fullcodeline": "while (!cancel_upload &&"
    },
    {
        "line": 283,
        "fullcodeline": "if (fd!=-1) { /* may not be initialized if file could not be created */"
    },
    {
        "line": 286,
        "fullcodeline": "if (!cancel_upload && !end) {"
    },
    {
        "line": 291,
        "fullcodeline": "if (strlen(filename) > 0 && total_bytes == 0 && !cancel_upload) {"
    },
    {
        "line": 297,
        "fullcodeline": "if (php_rfc1867_callback != nullptr) {"
    },
    {
        "line": 311,
        "fullcodeline": "if (cancel_upload && cancel_upload != UPLOAD_ERROR_C) {"
    },
    {
        "line": 335,
        "fullcodeline": "if (llen < strlen(param) + MAX_SIZE_OF_INDEX + 1) {"
    },
    {
        "line": 357,
        "fullcodeline": "if ((tmp = strrchr(filename, '/')) > s) {"
    },
    {
        "line": 379,
        "fullcodeline": "if ((cancel_upload && cancel_upload != UPLOAD_ERROR_C) ||"
    },
    {
        "line": 401,
        "fullcodeline": "if (s != nullptr) {"
    },
    {
        "line": 63,
        "fullcodeline": "++cd;"
    },
    {
        "line": 68,
        "fullcodeline": "char *key=nullptr, *word = pair;"
    },
    {
        "line": 90,
        "fullcodeline": "free(word);"
    },
    {
        "line": 96,
        "fullcodeline": "char *value = multipart_buffer_read_body(mbuff, &value_len);"
    },
    {
        "line": 103,
        "fullcodeline": "new_val_len = value_len;"
    },
    {
        "line": 123,
        "fullcodeline": "String val(value, new_val_len, CopyString);"
    },
    {
        "line": 124,
        "fullcodeline": "safe_php_register_variable(param, val, post, 0);"
    },
    {
        "line": 130,
        "fullcodeline": "free(param);"
    },
    {
        "line": 131,
        "fullcodeline": "free(value);"
    },
    {
        "line": 137,
        "fullcodeline": "skip_upload = 1;"
    },
    {
        "line": 147,
        "fullcodeline": "Logger::Warning(\"File Upload Mime headers garbled\");"
    },
    {
        "line": 152,
        "fullcodeline": "param = (char*)malloc(MAX_SIZE_ANONNAME);"
    },
    {
        "line": 153,
        "fullcodeline": "snprintf(param, MAX_SIZE_ANONNAME, \"%u\", anonindex++);"
    },
    {
        "line": 158,
        "fullcodeline": "tmp = param;"
    },
    {
        "line": 159,
        "fullcodeline": "long c = 0;"
    },
    {
        "line": 183,
        "fullcodeline": "char path[PATH_MAX];"
    },
    {
        "line": 186,
        "fullcodeline": "snprintf(path, sizeof(path), \"%s/XXXXXX\","
    },
    {
        "line": 188,
        "fullcodeline": "fd = mkstemp(path);"
    },
    {
        "line": 189,
        "fullcodeline": "upload_count--;"
    },
    {
        "line": 196,
        "fullcodeline": "temp_filename = path;"
    },
    {
        "line": 202,
        "fullcodeline": "event_file_start.post_bytes_processed = mbuff->read_post_bytes;"
    },
    {
        "line": 203,
        "fullcodeline": "event_file_start.name = param;"
    },
    {
        "line": 204,
        "fullcodeline": "event_file_start.filename = &filename;"
    },
    {
        "line": 224,
        "fullcodeline": "free(param);"
    },
    {
        "line": 225,
        "fullcodeline": "free(filename);"
    },
    {
        "line": 230,
        "fullcodeline": "Logger::Verbose(\"No file uploaded\");"
    },
    {
        "line": 231,
        "fullcodeline": "cancel_upload = UPLOAD_ERROR_D;"
    },
    {
        "line": 237,
        "fullcodeline": "(blen = multipart_buffer_read(mbuff, buff, sizeof(buff), &end)))"
    },
    {
        "line": 284,
        "fullcodeline": "close(fd);"
    },
    {
        "line": 287,
        "fullcodeline": "Logger::Verbose(\"Missing mime boundary at the end of the data for \""
    },
    {
        "line": 289,
        "fullcodeline": "cancel_upload = UPLOAD_ERROR_C;"
    },
    {
        "line": 292,
        "fullcodeline": "Logger::Verbose(\"Uploaded file size 0 - file [%s=%s] not saved\","
    },
    {
        "line": 294,
        "fullcodeline": "cancel_upload = 5;"
    },
    {
        "line": 300,
        "fullcodeline": "event_file_end.post_bytes_processed = mbuff->read_post_bytes;"
    },
    {
        "line": 301,
        "fullcodeline": "event_file_end.temp_filename = temp_filename.c_str();"
    },
    {
        "line": 302,
        "fullcodeline": "event_file_end.cancel_upload = cancel_upload;"
    },
    {
        "line": 317,
        "fullcodeline": "temp_filename=\"\";"
    },
    {
        "line": 327,
        "fullcodeline": "(param[strlen(param)-1] == ']');"
    },
    {
        "line": 330,
        "fullcodeline": "array_len = strlen(start_arr);"
    },
    {
        "line": 331,
        "fullcodeline": "array_index = std::string(start_arr+1, array_len-2);"
    },
    {
        "line": 336,
        "fullcodeline": "llen = strlen(param);"
    },
    {
        "line": 337,
        "fullcodeline": "lbuf = (char *) realloc(lbuf, llen + MAX_SIZE_OF_INDEX + 1);"
    },
    {
        "line": 338,
        "fullcodeline": "llen += MAX_SIZE_OF_INDEX + 1;"
    },
    {
        "line": 342,
        "fullcodeline": "abuf = std::string(param, strlen(param)-array_len);"
    },
    {
        "line": 343,
        "fullcodeline": "snprintf(lbuf, llen, \"%s_name[%s]\","
    },
    {
        "line": 358,
        "fullcodeline": "s = tmp;"
    },
    {
        "line": 363,
        "fullcodeline": "snprintf(lbuf, llen, \"%s[name][%s]\","
    },
    {
        "line": 369,
        "fullcodeline": "String val(s+1, strlen(s+1), CopyString);"
    },
    {
        "line": 370,
        "fullcodeline": "safe_php_register_variable(lbuf, val, files, 0);"
    },
    {
        "line": 380,
        "fullcodeline": "!(cd = php_mime_get_hdr_value(header, \"Content-Type\"))) {"
    },
    {
        "line": 381,
        "fullcodeline": "cd = \"\";"
    },
    {
        "line": 392,
        "fullcodeline": "snprintf(lbuf, llen, \"%s[type][%s]\","
    },
    {
        "line": 402,
        "fullcodeline": "*s = ';';"
    },
    {
        "line": 413,
        "fullcodeline": "snprintf(lbuf, llen, \"%s[tmp_name][%s]\","
    },
    {
        "line": 427,
        "fullcodeline": "file_size = 0;"
    },
    {
        "line": 433,
        "fullcodeline": "snprintf(lbuf, llen, \"%s[error][%s]\","
    },
    {
        "line": 442,
        "fullcodeline": "snprintf(lbuf, llen, \"%s[size][%s]\","
    },
    {
        "line": 70,
        "fullcodeline": "while (isspace(*cd)) {"
    },
    {
        "line": 74,
        "fullcodeline": "if (strchr(pair, '=')) {"
    },
    {
        "line": 99,
        "fullcodeline": "if (!value) {"
    },
    {
        "line": 104,
        "fullcodeline": "if (php_rfc1867_callback != nullptr) {"
    },
    {
        "line": 126,
        "fullcodeline": "if (!strcasecmp(param, \"MAX_FILE_SIZE\")) {"
    },
    {
        "line": 190,
        "fullcodeline": "if (fd == -1) {"
    },
    {
        "line": 205,
        "fullcodeline": "if (php_rfc1867_callback(&s_rfc1867_data->rfc1867ApcData,"
    },
    {
        "line": 239,
        "fullcodeline": "if (php_rfc1867_callback != nullptr) {"
    },
    {
        "line": 257,
        "fullcodeline": "if (VirtualHost::GetUploadMaxFileSize() > 0 &&"
    },
    {
        "line": 288,
        "fullcodeline": "\"file %s\", strlen(filename) > 0 ? filename : \"\");"
    },
    {
        "line": 303,
        "fullcodeline": "if (php_rfc1867_callback(&s_rfc1867_data->rfc1867ApcData,"
    },
    {
        "line": 312,
        "fullcodeline": "if (!temp_filename.empty()) {"
    },
    {
        "line": 319,
        "fullcodeline": "s_rfc1867_data->rfc1867UploadedFiles.insert(temp_filename);"
    },
    {
        "line": 344,
        "fullcodeline": "abuf.c_str(), array_index.c_str());"
    },
    {
        "line": 346,
        "fullcodeline": "snprintf(lbuf, llen, \"%s_name\", param);"
    },
    {
        "line": 364,
        "fullcodeline": "abuf.c_str(), array_index.c_str());"
    },
    {
        "line": 366,
        "fullcodeline": "snprintf(lbuf, llen, \"%s[name]\", param);"
    },
    {
        "line": 372,
        "fullcodeline": "String val(filename, strlen(filename), CopyString);"
    },
    {
        "line": 373,
        "fullcodeline": "safe_php_register_variable(lbuf, val, files, 0);"
    },
    {
        "line": 384,
        "fullcodeline": "s = strchr(cd, ';');"
    },
    {
        "line": 393,
        "fullcodeline": "abuf.c_str(), array_index.c_str());"
    },
    {
        "line": 395,
        "fullcodeline": "snprintf(lbuf, llen, \"%s[type]\", param);"
    },
    {
        "line": 414,
        "fullcodeline": "abuf.c_str(), array_index.c_str());"
    },
    {
        "line": 416,
        "fullcodeline": "snprintf(lbuf, llen, \"%s[tmp_name]\", param);"
    },
    {
        "line": 429,
        "fullcodeline": "file_size = total_bytes;"
    },
    {
        "line": 434,
        "fullcodeline": "abuf.c_str(), array_index.c_str());"
    },
    {
        "line": 436,
        "fullcodeline": "snprintf(lbuf, llen, \"%s[error]\", param);"
    },
    {
        "line": 443,
        "fullcodeline": "abuf.c_str(), array_index.c_str());"
    },
    {
        "line": 445,
        "fullcodeline": "snprintf(lbuf, llen, \"%s[size]\", param);"
    },
    {
        "line": 71,
        "fullcodeline": "++cd;"
    },
    {
        "line": 75,
        "fullcodeline": "key = php_ap_getword(&pair, '=');"
    },
    {
        "line": 89,
        "fullcodeline": "if (key) free(key);"
    },
    {
        "line": 100,
        "fullcodeline": "value = strdup(\"\");"
    },
    {
        "line": 106,
        "fullcodeline": "size_t newlength = new_val_len;"
    },
    {
        "line": 108,
        "fullcodeline": "event_formdata.post_bytes_processed = mbuff->read_post_bytes;"
    },
    {
        "line": 109,
        "fullcodeline": "event_formdata.name = param;"
    },
    {
        "line": 111,
        "fullcodeline": "event_formdata.length = new_val_len;"
    },
    {
        "line": 112,
        "fullcodeline": "event_formdata.newlength = &newlength;"
    },
    {
        "line": 120,
        "fullcodeline": "new_val_len = newlength;"
    },
    {
        "line": 127,
        "fullcodeline": "max_file_size = atol(value);"
    },
    {
        "line": 138,
        "fullcodeline": "} else if (upload_count <= 0) {"
    },
    {
        "line": 175,
        "fullcodeline": "tmp++;"
    },
    {
        "line": 191,
        "fullcodeline": "Logger::Warning(\"Unable to open temporary file\");"
    },
    {
        "line": 192,
        "fullcodeline": "Logger::Warning(\"File upload error - unable to create a \""
    },
    {
        "line": 194,
        "fullcodeline": "cancel_upload = UPLOAD_ERROR_E;"
    },
    {
        "line": 215,
        "fullcodeline": "temp_filename=\"\";"
    },
    {
        "line": 216,
        "fullcodeline": "free(param);"
    },
    {
        "line": 217,
        "fullcodeline": "free(filename);"
    },
    {
        "line": 242,
        "fullcodeline": "event_file_data.post_bytes_processed = mbuff->read_post_bytes;"
    },
    {
        "line": 243,
        "fullcodeline": "event_file_data.offset = offset;"
    },
    {
        "line": 244,
        "fullcodeline": "event_file_data.data = buff;"
    },
    {
        "line": 245,
        "fullcodeline": "event_file_data.length = blen;"
    },
    {
        "line": 258,
        "fullcodeline": "total_bytes > VirtualHost::GetUploadMaxFileSize()) {"
    },
    {
        "line": 263,
        "fullcodeline": "cancel_upload = UPLOAD_ERROR_A;"
    },
    {
        "line": 307,
        "fullcodeline": "cancel_upload = UPLOAD_ERROR_X;"
    },
    {
        "line": 385,
        "fullcodeline": "if (s != nullptr) {"
    },
    {
        "line": 77,
        "fullcodeline": "if (!strcasecmp(key, \"name\")) {"
    },
    {
        "line": 113,
        "fullcodeline": "if (php_rfc1867_callback(&s_rfc1867_data->rfc1867ApcData,"
    },
    {
        "line": 139,
        "fullcodeline": "Logger::Warning("
    },
    {
        "line": 142,
        "fullcodeline": "skip_upload = 1;"
    },
    {
        "line": 162,
        "fullcodeline": "if (*tmp == '[') {"
    },
    {
        "line": 171,
        "fullcodeline": "if (c < 0) {"
    },
    {
        "line": 209,
        "fullcodeline": "if (!temp_filename.empty()) {"
    },
    {
        "line": 247,
        "fullcodeline": "if (php_rfc1867_callback(&s_rfc1867_data->rfc1867ApcData,"
    },
    {
        "line": 313,
        "fullcodeline": "if (cancel_upload != UPLOAD_ERROR_E) { /* file creation failed */"
    },
    {
        "line": 386,
        "fullcodeline": "*s = '\\0';"
    },
    {
        "line": 81,
        "fullcodeline": "param = php_ap_getword_conf(&pair);"
    },
    {
        "line": 116,
        "fullcodeline": "free(param);"
    },
    {
        "line": 117,
        "fullcodeline": "free(value);"
    },
    {
        "line": 163,
        "fullcodeline": "c++;"
    },
    {
        "line": 172,
        "fullcodeline": "skip_upload = 1;"
    },
    {
        "line": 251,
        "fullcodeline": "cancel_upload = UPLOAD_ERROR_X;"
    },
    {
        "line": 264,
        "fullcodeline": "} else if (max_file_size && (total_bytes > max_file_size)) {"
    },
    {
        "line": 314,
        "fullcodeline": "unlink(temp_filename.c_str());"
    },
    {
        "line": 210,
        "fullcodeline": "if (cancel_upload != UPLOAD_ERROR_E) { /* file creation failed */"
    },
    {
        "line": 265,
        "fullcodeline": "Logger::Verbose(\"MAX_FILE_SIZE of %d bytes exceeded - \""
    },
    {
        "line": 268,
        "fullcodeline": "cancel_upload = UPLOAD_ERROR_B;"
    },
    {
        "line": 79,
        "fullcodeline": "free(param);"
    },
    {
        "line": 82,
        "fullcodeline": "} else if (!strcasecmp(key, \"filename\")) {"
    },
    {
        "line": 164,
        "fullcodeline": "} else if (*tmp == ']') {"
    },
    {
        "line": 211,
        "fullcodeline": "close(fd);"
    },
    {
        "line": 212,
        "fullcodeline": "unlink(temp_filename.c_str());"
    },
    {
        "line": 86,
        "fullcodeline": "filename = php_ap_getword_conf(&pair);"
    },
    {
        "line": 165,
        "fullcodeline": "c--;"
    },
    {
        "line": 269,
        "fullcodeline": "} else if (blen > 0) {"
    },
    {
        "line": 166,
        "fullcodeline": "if (tmp[1] && tmp[1] != '[') {"
    },
    {
        "line": 271,
        "fullcodeline": "wlen = folly::writeFull(fd, buff, blen);"
    },
    {
        "line": 280,
        "fullcodeline": "offset += wlen;"
    },
    {
        "line": 84,
        "fullcodeline": "free(filename);"
    },
    {
        "line": 167,
        "fullcodeline": "skip_upload = 1;"
    },
    {
        "line": 272,
        "fullcodeline": "if (wlen < blen) {"
    },
    {
        "line": 273,
        "fullcodeline": "Logger::Verbose(\"Only %zd bytes were written, expected to \""
    },
    {
        "line": 275,
        "fullcodeline": "cancel_upload = UPLOAD_ERROR_F;"
    },
    {
        "line": 277,
        "fullcodeline": "total_bytes += wlen;"
    }
]