[
    {
        "line": 7,
        "fullcodeline": "ewq->ctx = ctx;"
    },
    {
        "line": 8,
        "fullcodeline": "init_waitqueue_entry(&ewq->wq, current);"
    },
    {
        "line": 15,
        "fullcodeline": "__add_wait_queue(&ctx->event_wqh, &ewq->wq);"
    },
    {
        "line": 48,
        "fullcodeline": "__set_current_state(TASK_RUNNING);"
    },
    {
        "line": 49,
        "fullcodeline": "spin_unlock(&ctx->event_wqh.lock);"
    },
    {
        "line": 56,
        "fullcodeline": "userfaultfd_ctx_put(ctx);"
    },
    {
        "line": 4,
        "fullcodeline": "if (WARN_ON_ONCE(current->flags & PF_EXITING))"
    },
    {
        "line": 17,
        "fullcodeline": "set_current_state(TASK_KILLABLE);"
    },
    {
        "line": 41,
        "fullcodeline": "spin_unlock(&ctx->event_wqh.lock);"
    },
    {
        "line": 43,
        "fullcodeline": "wake_up_poll(&ctx->fd_wqh, POLLIN);"
    },
    {
        "line": 44,
        "fullcodeline": "schedule();"
    },
    {
        "line": 46,
        "fullcodeline": "spin_lock(&ctx->event_wqh.lock);"
    },
    {
        "line": 18,
        "fullcodeline": "if (ewq->msg.event == 0)"
    },
    {
        "line": 20,
        "fullcodeline": "if (ACCESS_ONCE(ctx->released) ||"
    },
    {
        "line": 21,
        "fullcodeline": "fatal_signal_pending(current)) {"
    },
    {
        "line": 28,
        "fullcodeline": "__remove_wait_queue(&ctx->event_wqh, &ewq->wq);"
    },
    {
        "line": 29,
        "fullcodeline": "if (ewq->msg.event == UFFD_EVENT_FORK) {"
    },
    {
        "line": 36,
        "fullcodeline": "userfaultfd_ctx_put(new);"
    }
]