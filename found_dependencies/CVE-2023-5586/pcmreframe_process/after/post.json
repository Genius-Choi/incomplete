[
    {
        "line": 3,
        "fullcodeline": "GF_PCMReframeCtx *ctx = gf_filter_get_udta(filter);"
    },
    {
        "line": 13,
        "fullcodeline": "pck = gf_filter_pid_get_packet(ctx->ipid);"
    },
    {
        "line": 28,
        "fullcodeline": "data = (char *) gf_filter_pck_get_data(pck, &pck_size);"
    },
    {
        "line": 29,
        "fullcodeline": "byte_offset = gf_filter_pck_get_byte_offset(pck);"
    },
    {
        "line": 179,
        "fullcodeline": "byte_offset+= ctx->wav_hdr_size;"
    },
    {
        "line": 232,
        "fullcodeline": "gf_filter_pid_drop_packet(ctx->ipid);"
    },
    {
        "line": 11,
        "fullcodeline": "if (!ctx->is_playing && ctx->opid) return GF_OK;"
    },
    {
        "line": 14,
        "fullcodeline": "if (!pck) {"
    },
    {
        "line": 31,
        "fullcodeline": "if (ctx->probe_wave==1) {"
    },
    {
        "line": 32,
        "fullcodeline": "Bool wav_ok = GF_TRUE;"
    },
    {
        "line": 33,
        "fullcodeline": "Bool hdr_found = GF_FALSE;"
    },
    {
        "line": 43,
        "fullcodeline": "u32 type = gf_bs_read_u32(bs);"
    },
    {
        "line": 47,
        "fullcodeline": "gf_bs_read_u32(bs);"
    },
    {
        "line": 48,
        "fullcodeline": "u32 wtype = gf_bs_read_u32(bs);"
    },
    {
        "line": 148,
        "fullcodeline": "ctx->wav_hdr_size = (u32) gf_bs_get_position(bs);"
    },
    {
        "line": 150,
        "fullcodeline": "gf_bs_del(bs);"
    },
    {
        "line": 160,
        "fullcodeline": "ctx->probe_wave = 2;"
    },
    {
        "line": 161,
        "fullcodeline": "pcmreframe_configure_pid(filter, ctx->ipid, GF_FALSE);"
    },
    {
        "line": 166,
        "fullcodeline": "ctx->init_skip = GF_TRUE;"
    },
    {
        "line": 167,
        "fullcodeline": "byte_offset = 0;"
    },
    {
        "line": 173,
        "fullcodeline": "data+=ctx->wav_hdr_size;"
    },
    {
        "line": 174,
        "fullcodeline": "pck_size-=ctx->wav_hdr_size;"
    },
    {
        "line": 175,
        "fullcodeline": "byte_offset = 0;"
    },
    {
        "line": 176,
        "fullcodeline": "ctx->init_skip = GF_FALSE;"
    },
    {
        "line": 235,
        "fullcodeline": "gf_free(ctx->probe_data);"
    },
    {
        "line": 236,
        "fullcodeline": "ctx->probe_data = NULL;"
    },
    {
        "line": 237,
        "fullcodeline": "ctx->probe_data_size = 0;"
    },
    {
        "line": 15,
        "fullcodeline": "if (gf_filter_pid_is_eos(ctx->ipid) && !ctx->reverse_play) {"
    },
    {
        "line": 44,
        "fullcodeline": "if (type!=GF_4CC('R', 'I', 'F', 'F')) {"
    },
    {
        "line": 49,
        "fullcodeline": "if (wtype!=GF_4CC('W', 'A', 'V', 'E')) {"
    },
    {
        "line": 52,
        "fullcodeline": "while (gf_bs_available(bs)) {"
    },
    {
        "line": 124,
        "fullcodeline": "if (gf_bs_is_overflow(bs)) {"
    },
    {
        "line": 139,
        "fullcodeline": "if (!ctx->ch) {"
    },
    {
        "line": 143,
        "fullcodeline": "if (!ctx->sr) {"
    },
    {
        "line": 151,
        "fullcodeline": "if (!wav_ok) {"
    },
    {
        "line": 168,
        "fullcodeline": "if (!ctx->is_playing) {"
    },
    {
        "line": 182,
        "fullcodeline": "if (!ctx->out_pck) {"
    },
    {
        "line": 192,
        "fullcodeline": "if (pck_size + ctx->nb_bytes_in_frame < ctx->frame_size) {"
    },
    {
        "line": 36,
        "fullcodeline": "ctx->probe_data = gf_realloc(ctx->probe_data, ctx->probe_data_size+pck_size);"
    },
    {
        "line": 37,
        "fullcodeline": "memcpy(ctx->probe_data + ctx->probe_data_size, data, pck_size);"
    },
    {
        "line": 38,
        "fullcodeline": "ctx->probe_data_size += pck_size;"
    },
    {
        "line": 39,
        "fullcodeline": "bs = gf_bs_new(ctx->probe_data, ctx->probe_data_size, GF_BITSTREAM_READ);"
    },
    {
        "line": 45,
        "fullcodeline": "wav_ok = GF_FALSE;"
    },
    {
        "line": 50,
        "fullcodeline": "wav_ok = GF_FALSE;"
    },
    {
        "line": 53,
        "fullcodeline": "type = gf_bs_read_u32(bs);"
    },
    {
        "line": 54,
        "fullcodeline": "u32 csize = gf_bs_read_u32_le(bs); //subchunk size"
    },
    {
        "line": 64,
        "fullcodeline": "hdr_found = GF_TRUE;"
    },
    {
        "line": 65,
        "fullcodeline": "u16 atype = gf_bs_read_u16_le(bs);"
    },
    {
        "line": 66,
        "fullcodeline": "ctx->ch = gf_bs_read_u16_le(bs);"
    },
    {
        "line": 67,
        "fullcodeline": "ctx->sr = gf_bs_read_u32_le(bs);"
    },
    {
        "line": 68,
        "fullcodeline": "gf_bs_read_u32_le(bs); //byte rate"
    },
    {
        "line": 69,
        "fullcodeline": "gf_bs_read_u16_le(bs); // block align"
    },
    {
        "line": 70,
        "fullcodeline": "u32 bps = gf_bs_read_u16_le(bs);"
    },
    {
        "line": 71,
        "fullcodeline": "csize-=16;"
    },
    {
        "line": 122,
        "fullcodeline": "gf_bs_skip_bytes(bs, csize);"
    },
    {
        "line": 137,
        "fullcodeline": "wav_ok = GF_FALSE;"
    },
    {
        "line": 140,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_MEDIA, (\"[PCMReframe] Channel count %d invalid in wave\\n\", ctx->ch));"
    },
    {
        "line": 141,
        "fullcodeline": "wav_ok = GF_FALSE;"
    },
    {
        "line": 144,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_MEDIA, (\"[PCMReframe] Samplerate %d invalid in wave\\n\", ctx->sr));"
    },
    {
        "line": 145,
        "fullcodeline": "wav_ok = GF_FALSE;"
    },
    {
        "line": 152,
        "fullcodeline": "gf_filter_pid_drop_packet(ctx->ipid);"
    },
    {
        "line": 155,
        "fullcodeline": "gf_filter_pid_set_discard(ctx->ipid, GF_TRUE);"
    },
    {
        "line": 156,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_MEDIA, (\"[PCMReframe] Invalid or unsupported WAVE header, aborting\\n\", ctx->probe_data_size));"
    },
    {
        "line": 163,
        "fullcodeline": "pck_size = ctx->probe_data_size;"
    },
    {
        "line": 164,
        "fullcodeline": "data = ctx->probe_data;"
    },
    {
        "line": 183,
        "fullcodeline": "ctx->out_pck = gf_filter_pck_new_alloc(ctx->opid, ctx->frame_size, &ctx->out_data);"
    },
    {
        "line": 186,
        "fullcodeline": "gf_filter_pck_set_cts(ctx->out_pck, ctx->cts);"
    },
    {
        "line": 187,
        "fullcodeline": "gf_filter_pck_set_sap(ctx->out_pck, GF_FILTER_SAP_1);"
    },
    {
        "line": 188,
        "fullcodeline": "gf_filter_pck_set_duration(ctx->out_pck, ctx->framelen);"
    },
    {
        "line": 189,
        "fullcodeline": "gf_filter_pck_set_byte_offset(ctx->out_pck, byte_offset);"
    },
    {
        "line": 193,
        "fullcodeline": "memcpy(ctx->out_data + ctx->nb_bytes_in_frame, data, pck_size);"
    },
    {
        "line": 194,
        "fullcodeline": "ctx->nb_bytes_in_frame += pck_size;"
    },
    {
        "line": 195,
        "fullcodeline": "pck_size = 0;"
    },
    {
        "line": 41,
        "fullcodeline": "bs = gf_bs_new(data, pck_size, GF_BITSTREAM_READ);"
    },
    {
        "line": 55,
        "fullcodeline": "if (type==GF_4CC('d', 'a', 't', 'a')) {"
    },
    {
        "line": 59,
        "fullcodeline": "if (type!=GF_4CC('f', 'm', 't', ' ')) {"
    },
    {
        "line": 72,
        "fullcodeline": "if (ctx->ch==1) ctx->layout = GF_AUDIO_CH_FRONT_CENTER;"
    },
    {
        "line": 76,
        "fullcodeline": "if (atype==3) {"
    },
    {
        "line": 97,
        "fullcodeline": "if (atype==0xFFFE) {"
    },
    {
        "line": 125,
        "fullcodeline": "if (!ctx->probe_data) {"
    },
    {
        "line": 130,
        "fullcodeline": "if (!hdr_found) {"
    },
    {
        "line": 184,
        "fullcodeline": "if (!ctx->out_pck) return GF_OUT_OF_MEM;"
    },
    {
        "line": 197,
        "fullcodeline": "u32 remain = ctx->frame_size - ctx->nb_bytes_in_frame;"
    },
    {
        "line": 198,
        "fullcodeline": "memcpy(ctx->out_data + ctx->nb_bytes_in_frame, data, remain);"
    },
    {
        "line": 199,
        "fullcodeline": "ctx->nb_bytes_in_frame = ctx->frame_size;"
    },
    {
        "line": 200,
        "fullcodeline": "pcmreframe_flush_packet(ctx);"
    },
    {
        "line": 202,
        "fullcodeline": "pck_size -= remain;"
    },
    {
        "line": 203,
        "fullcodeline": "data += remain;"
    },
    {
        "line": 204,
        "fullcodeline": "byte_offset += remain;"
    },
    {
        "line": 205,
        "fullcodeline": "ctx->out_pck = NULL;"
    },
    {
        "line": 206,
        "fullcodeline": "ctx->nb_bytes_in_frame = 0;"
    },
    {
        "line": 229,
        "fullcodeline": "ctx->cts += ctx->framelen;"
    },
    {
        "line": 17,
        "fullcodeline": "gf_filter_pck_truncate(ctx->out_pck, ctx->nb_bytes_in_frame);"
    },
    {
        "line": 18,
        "fullcodeline": "gf_filter_pck_set_duration(ctx->out_pck, ctx->nb_bytes_in_frame/ctx->Bps/ctx->ch);"
    },
    {
        "line": 19,
        "fullcodeline": "pcmreframe_flush_packet(ctx);"
    },
    {
        "line": 22,
        "fullcodeline": "gf_filter_pid_set_eos(ctx->opid);"
    },
    {
        "line": 60,
        "fullcodeline": "gf_bs_skip_bytes(bs, csize);"
    },
    {
        "line": 98,
        "fullcodeline": "gf_bs_read_u16_le(bs); //cbSize"
    },
    {
        "line": 99,
        "fullcodeline": "gf_bs_read_u16_le(bs); //Samples"
    },
    {
        "line": 100,
        "fullcodeline": "u32 ch_mask = gf_bs_read_u32_le(bs); //channel mask"
    },
    {
        "line": 101,
        "fullcodeline": "csize-=8;"
    },
    {
        "line": 102,
        "fullcodeline": "ctx->layout = 0;"
    },
    {
        "line": 126,
        "fullcodeline": "ctx->probe_data = gf_malloc(pck_size);"
    },
    {
        "line": 127,
        "fullcodeline": "memcpy(ctx->probe_data, data, pck_size);"
    },
    {
        "line": 128,
        "fullcodeline": "ctx->probe_data_size = pck_size;"
    },
    {
        "line": 135,
        "fullcodeline": "GF_LOG(GF_LOG_WARNING, GF_LOG_MEDIA, (\"[PCMReframe] Cannot find wave data chunk after %d bytes, aborting\\n\", ctx->probe_data_size));"
    },
    {
        "line": 154,
        "fullcodeline": "gf_filter_pid_set_eos(ctx->opid);"
    },
    {
        "line": 77,
        "fullcodeline": "if (bps==32) {"
    },
    {
        "line": 103,
        "fullcodeline": "if (ch_mask & 0x1) ctx->layout |= GF_AUDIO_CH_FRONT_LEFT;"
    },
    {
        "line": 104,
        "fullcodeline": "if (ch_mask & 0x2) ctx->layout |= GF_AUDIO_CH_FRONT_RIGHT;"
    },
    {
        "line": 105,
        "fullcodeline": "if (ch_mask & 0x4) ctx->layout |= GF_AUDIO_CH_FRONT_CENTER;"
    },
    {
        "line": 106,
        "fullcodeline": "if (ch_mask & 0x8) ctx->layout |= GF_AUDIO_CH_LFE;"
    },
    {
        "line": 107,
        "fullcodeline": "if (ch_mask & 0x10) ctx->layout |= GF_AUDIO_CH_REAR_SURROUND_LEFT;"
    },
    {
        "line": 108,
        "fullcodeline": "if (ch_mask & 0x20) ctx->layout |= GF_AUDIO_CH_REAR_SURROUND_RIGHT;"
    },
    {
        "line": 109,
        "fullcodeline": "if (ch_mask & 0x40) ctx->layout |= GF_AUDIO_CH_FRONT_CENTER_LEFT;"
    },
    {
        "line": 110,
        "fullcodeline": "if (ch_mask & 0x80) ctx->layout |= GF_AUDIO_CH_FRONT_CENTER_RIGHT;"
    },
    {
        "line": 111,
        "fullcodeline": "if (ch_mask & 0x100) ctx->layout |= GF_AUDIO_CH_REAR_CENTER;"
    },
    {
        "line": 112,
        "fullcodeline": "if (ch_mask & 0x200) ctx->layout |= GF_AUDIO_CH_SIDE_SURROUND_LEFT;"
    },
    {
        "line": 113,
        "fullcodeline": "if (ch_mask & 0x400) ctx->layout |= GF_AUDIO_CH_SIDE_SURROUND_RIGHT;"
    },
    {
        "line": 114,
        "fullcodeline": "if (ch_mask & 0x800) ctx->layout |= GF_AUDIO_CH_CENTER_SURROUND_TOP;"
    },
    {
        "line": 115,
        "fullcodeline": "if (ch_mask & 0x1000) ctx->layout |= GF_AUDIO_CH_FRONT_TOP_LEFT;"
    },
    {
        "line": 116,
        "fullcodeline": "if (ch_mask & 0x2000) ctx->layout |= GF_AUDIO_CH_FRONT_TOP_CENTER;"
    },
    {
        "line": 117,
        "fullcodeline": "if (ch_mask & 0x4000) ctx->layout |= GF_AUDIO_CH_FRONT_TOP_RIGHT;"
    },
    {
        "line": 118,
        "fullcodeline": "if (ch_mask & 0x8000) ctx->layout |= GF_AUDIO_CH_SURROUND_TOP_LEFT;"
    },
    {
        "line": 119,
        "fullcodeline": "if (ch_mask & 0x10000) ctx->layout |= GF_AUDIO_CH_REAR_CENTER_TOP;"
    },
    {
        "line": 120,
        "fullcodeline": "if (ch_mask & 0x20000) ctx->layout |= GF_AUDIO_CH_SURROUND_TOP_RIGHT;"
    },
    {
        "line": 131,
        "fullcodeline": "if (ctx->probe_data_size<=10000) {"
    },
    {
        "line": 220,
        "fullcodeline": "ctx->cts -= ctx->framelen;"
    },
    {
        "line": 221,
        "fullcodeline": "ctx->filepos -= ctx->frame_size;"
    },
    {
        "line": 222,
        "fullcodeline": "gf_filter_pid_drop_packet(ctx->ipid);"
    },
    {
        "line": 224,
        "fullcodeline": "GF_FEVT_INIT(fevt, GF_FEVT_SOURCE_SEEK, ctx->ipid);"
    },
    {
        "line": 225,
        "fullcodeline": "fevt.seek.start_offset = ctx->filepos + ctx->wav_hdr_size;"
    },
    {
        "line": 226,
        "fullcodeline": "gf_filter_pid_send_event(ctx->ipid, &fevt);"
    },
    {
        "line": 73,
        "fullcodeline": "else if (ctx->ch==2) ctx->layout = GF_AUDIO_CH_FRONT_LEFT|GF_AUDIO_CH_FRONT_RIGHT;"
    },
    {
        "line": 78,
        "fullcodeline": "ctx->safmt = GF_AUDIO_FMT_FLT;"
    },
    {
        "line": 84,
        "fullcodeline": "} else if ((atype==1) || (atype==0xFFFE))  {"
    },
    {
        "line": 132,
        "fullcodeline": "gf_filter_pid_drop_packet(ctx->ipid);"
    },
    {
        "line": 212,
        "fullcodeline": "if (!ctx->cts) {"
    },
    {
        "line": 215,
        "fullcodeline": "GF_FEVT_INIT(fevt, GF_FEVT_STOP, ctx->ipid);"
    },
    {
        "line": 216,
        "fullcodeline": "gf_filter_pid_send_event(ctx->ipid, &fevt);"
    },
    {
        "line": 217,
        "fullcodeline": "ctx->done = GF_TRUE;"
    },
    {
        "line": 74,
        "fullcodeline": "else ctx->layout = 0;"
    },
    {
        "line": 79,
        "fullcodeline": "} else if (bps==64) {"
    },
    {
        "line": 85,
        "fullcodeline": "if (bps==32) {"
    },
    {
        "line": 80,
        "fullcodeline": "ctx->safmt = GF_AUDIO_FMT_DBL;"
    },
    {
        "line": 86,
        "fullcodeline": "ctx->safmt = GF_AUDIO_FMT_S32;"
    },
    {
        "line": 214,
        "fullcodeline": "gf_filter_pid_set_eos(ctx->opid);"
    },
    {
        "line": 82,
        "fullcodeline": "wav_ok = GF_FALSE;"
    },
    {
        "line": 87,
        "fullcodeline": "} else if (bps==24) {"
    },
    {
        "line": 88,
        "fullcodeline": "ctx->safmt = GF_AUDIO_FMT_S24;"
    },
    {
        "line": 89,
        "fullcodeline": "} else if (bps==16) {"
    },
    {
        "line": 90,
        "fullcodeline": "ctx->safmt = GF_AUDIO_FMT_S16;"
    },
    {
        "line": 91,
        "fullcodeline": "} else if (bps==8) {"
    },
    {
        "line": 92,
        "fullcodeline": "ctx->safmt = GF_AUDIO_FMT_U8;"
    },
    {
        "line": 94,
        "fullcodeline": "wav_ok = GF_FALSE;"
    }
]