[
    {
        "line": 3,
        "fullcodeline": "const struct cred *old = current_cred();"
    },
    {
        "line": 4,
        "fullcodeline": "struct cred *new = bprm->cred;"
    },
    {
        "line": 5,
        "fullcodeline": "bool effective, has_cap = false;"
    },
    {
        "line": 8,
        "fullcodeline": "effective = false;"
    },
    {
        "line": 9,
        "fullcodeline": "ret = get_file_caps(bprm, &effective, &has_cap);"
    },
    {
        "line": 61,
        "fullcodeline": "new->suid = new->fsuid = new->euid;"
    },
    {
        "line": 62,
        "fullcodeline": "new->sgid = new->fsgid = new->egid;"
    },
    {
        "line": 68,
        "fullcodeline": "bprm->cap_effective = effective;"
    },
    {
        "line": 10,
        "fullcodeline": "if (ret < 0)"
    },
    {
        "line": 13,
        "fullcodeline": "if (!issecure(SECURE_NOROOT)) {"
    },
    {
        "line": 41,
        "fullcodeline": "if (!cap_issubset(new->cap_permitted, old->cap_permitted))"
    },
    {
        "line": 92,
        "fullcodeline": "new->securebits &= ~issecure_mask(SECURE_KEEP_CAPS);"
    },
    {
        "line": 42,
        "fullcodeline": "bprm->per_clear |= PER_CLEAR_ON_SETID;"
    },
    {
        "line": 48,
        "fullcodeline": "if ((new->euid != old->uid ||"
    },
    {
        "line": 51,
        "fullcodeline": "bprm->unsafe & ~LSM_UNSAFE_PTRACE_CAP) {"
    },
    {
        "line": 57,
        "fullcodeline": "new->cap_permitted = cap_intersect(new->cap_permitted,"
    },
    {
        "line": 65,
        "fullcodeline": "new->cap_effective = new->cap_permitted;"
    },
    {
        "line": 82,
        "fullcodeline": "if (!cap_isclear(new->cap_effective)) {"
    },
    {
        "line": 35,
        "fullcodeline": "if (new->euid == 0)"
    },
    {
        "line": 50,
        "fullcodeline": "!cap_issubset(new->cap_permitted, old->cap_permitted)) &&"
    },
    {
        "line": 67,
        "fullcodeline": "cap_clear(new->cap_effective);"
    },
    {
        "line": 19,
        "fullcodeline": "if (has_cap && new->uid != 0 && new->euid == 0) {"
    },
    {
        "line": 20,
        "fullcodeline": "warn_setuid_and_fcaps_mixed(bprm->filename);"
    },
    {
        "line": 30,
        "fullcodeline": "if (new->euid == 0 || new->uid == 0) {"
    },
    {
        "line": 32,
        "fullcodeline": "new->cap_permitted = cap_combine(old->cap_bset,"
    },
    {
        "line": 36,
        "fullcodeline": "effective = true;"
    },
    {
        "line": 49,
        "fullcodeline": "new->egid != old->gid ||"
    },
    {
        "line": 53,
        "fullcodeline": "if (!capable(CAP_SETUID)) {"
    },
    {
        "line": 54,
        "fullcodeline": "new->euid = new->uid;"
    },
    {
        "line": 55,
        "fullcodeline": "new->egid = new->gid;"
    },
    {
        "line": 83,
        "fullcodeline": "if (!cap_issubset(CAP_FULL_SET, new->cap_effective) ||"
    },
    {
        "line": 85,
        "fullcodeline": "issecure(SECURE_NOROOT)) {"
    },
    {
        "line": 86,
        "fullcodeline": "ret = audit_log_bprm_fcaps(bprm, new, old);"
    },
    {
        "line": 84,
        "fullcodeline": "new->euid != 0 || new->uid != 0 ||"
    },
    {
        "line": 87,
        "fullcodeline": "if (ret < 0)"
    }
]