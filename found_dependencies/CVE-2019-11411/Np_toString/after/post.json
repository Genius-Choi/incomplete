[
    {
        "line": 3,
        "fullcodeline": "char buf[100];"
    },
    {
        "line": 4,
        "fullcodeline": "js_Object *self = js_toobject(J, 0);"
    },
    {
        "line": 5,
        "fullcodeline": "int radix = js_isundefined(J, 1) ? 10 : js_tointeger(J, 1);"
    },
    {
        "line": 6,
        "fullcodeline": "if (self->type != JS_CNUMBER)"
    },
    {
        "line": 8,
        "fullcodeline": "if (radix == 10) {"
    },
    {
        "line": 12,
        "fullcodeline": "if (radix < 2 || radix > 36)"
    },
    {
        "line": 17,
        "fullcodeline": "static const char digits[] = \"0123456789abcdefghijklmnopqrstuvwxyz\";"
    },
    {
        "line": 19,
        "fullcodeline": "int sign = self->u.number < 0;"
    },
    {
        "line": 20,
        "fullcodeline": "js_Buffer *sb = NULL;"
    },
    {
        "line": 21,
        "fullcodeline": "uint64_t u, limit = ((uint64_t)1<<52);"
    },
    {
        "line": 33,
        "fullcodeline": "exp = 0;"
    },
    {
        "line": 38,
        "fullcodeline": "u = number * pow(radix, exp) + 0.5;"
    },
    {
        "line": 47,
        "fullcodeline": "ndigits = 0;"
    },
    {
        "line": 52,
        "fullcodeline": "point = ndigits - exp;"
    },
    {
        "line": 79,
        "fullcodeline": "js_putc(J, &sb, 0);"
    },
    {
        "line": 80,
        "fullcodeline": "js_pushstring(J, sb->s);"
    },
    {
        "line": 82,
        "fullcodeline": "js_endtry(J);"
    },
    {
        "line": 83,
        "fullcodeline": "js_free(J, sb);"
    },
    {
        "line": 7,
        "fullcodeline": "js_typeerror(J, \"not a number\");"
    },
    {
        "line": 9,
        "fullcodeline": "js_pushstring(J, jsV_numbertostring(J, buf, self->u.number));"
    },
    {
        "line": 13,
        "fullcodeline": "js_rangeerror(J, \"invalid radix\");"
    },
    {
        "line": 25,
        "fullcodeline": "if (number == 0) { js_pushstring(J, \"0\"); return; }"
    },
    {
        "line": 26,
        "fullcodeline": "if (isnan(number)) { js_pushstring(J, \"NaN\"); return; }"
    },
    {
        "line": 27,
        "fullcodeline": "if (isinf(number)) { js_pushstring(J, sign ? \"-Infinity\" : \"Infinity\"); return; }"
    },
    {
        "line": 34,
        "fullcodeline": "while (number * pow(radix, exp) > limit)"
    },
    {
        "line": 35,
        "fullcodeline": "--exp;"
    },
    {
        "line": 36,
        "fullcodeline": "while (number * pow(radix, exp+1) < limit)"
    },
    {
        "line": 37,
        "fullcodeline": "++exp;"
    },
    {
        "line": 41,
        "fullcodeline": "while (u > 0 && (u % radix) == 0) {"
    },
    {
        "line": 48,
        "fullcodeline": "while (u > 0) {"
    },
    {
        "line": 54,
        "fullcodeline": "if (js_try(J)) {"
    },
    {
        "line": 62,
        "fullcodeline": "if (point <= 0) {"
    },
    {
        "line": 30,
        "fullcodeline": "number = -number;"
    },
    {
        "line": 42,
        "fullcodeline": "u /= radix;"
    },
    {
        "line": 43,
        "fullcodeline": "--exp;"
    },
    {
        "line": 49,
        "fullcodeline": "buf[ndigits++] = digits[u % radix];"
    },
    {
        "line": 50,
        "fullcodeline": "u /= radix;"
    },
    {
        "line": 55,
        "fullcodeline": "js_free(J, sb);"
    },
    {
        "line": 56,
        "fullcodeline": "js_throw(J);"
    },
    {
        "line": 60,
        "fullcodeline": "js_putc(J, &sb, '-');"
    },
    {
        "line": 63,
        "fullcodeline": "js_putc(J, &sb, '0');"
    },
    {
        "line": 64,
        "fullcodeline": "js_putc(J, &sb, '.');"
    },
    {
        "line": 65,
        "fullcodeline": "while (point++ < 0)"
    },
    {
        "line": 66,
        "fullcodeline": "js_putc(J, &sb, '0');"
    },
    {
        "line": 67,
        "fullcodeline": "while (ndigits-- > 0)"
    },
    {
        "line": 68,
        "fullcodeline": "js_putc(J, &sb, buf[ndigits]);"
    },
    {
        "line": 70,
        "fullcodeline": "while (ndigits-- > 0) {"
    },
    {
        "line": 75,
        "fullcodeline": "while (point-- > 0)"
    },
    {
        "line": 76,
        "fullcodeline": "js_putc(J, &sb, '0');"
    },
    {
        "line": 71,
        "fullcodeline": "js_putc(J, &sb, buf[ndigits]);"
    },
    {
        "line": 72,
        "fullcodeline": "if (--point == 0 && ndigits > 0)"
    },
    {
        "line": 73,
        "fullcodeline": "js_putc(J, &sb, '.');"
    }
]